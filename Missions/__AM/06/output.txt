// export JMM , Gladstone , Denis , Lisa , Frank , Bobby , Cyrus , Brown , Donaldson , Mike ; export others , randomsDelta ; export apemans , yourApemans ; export yourVehicles ; export DeltaDoctor ; export Harisson ; export selectedPeople ; export baseCorrect ; export cutscene ; export lab ; export resources ; export mission_prefix , mission_prefix_prev ; starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// FogOff ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 344
// baseCorrect := 0 ;
  15: LD_ADDR_EXP 19
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// cutscene := 1 ;
  23: LD_ADDR_EXP 20
  27: PUSH
  28: LD_INT 1
  30: ST_TO_ADDR
// apemans := [ ] ;
  31: LD_ADDR_EXP 13
  35: PUSH
  36: EMPTY
  37: ST_TO_ADDR
// yourApemans := [ ] ;
  38: LD_ADDR_EXP 14
  42: PUSH
  43: EMPTY
  44: ST_TO_ADDR
// yourVehicles := [ ] ;
  45: LD_ADDR_EXP 15
  49: PUSH
  50: EMPTY
  51: ST_TO_ADDR
// randomsDelta := [ ] ;
  52: LD_ADDR_EXP 12
  56: PUSH
  57: EMPTY
  58: ST_TO_ADDR
// resources := [ ] ;
  59: LD_ADDR_EXP 22
  63: PUSH
  64: EMPTY
  65: ST_TO_ADDR
// mission_prefix := 06_ ;
  66: LD_ADDR_EXP 23
  70: PUSH
  71: LD_STRING 06_
  73: ST_TO_ADDR
// mission_prefix_prev := 05_ ;
  74: LD_ADDR_EXP 24
  78: PUSH
  79: LD_STRING 05_
  81: ST_TO_ADDR
// PrepareDeltaBase ;
  82: CALL 2382 0 0
// CreateNature ;
  86: CALL 170 0 0
// LoadVehicles ;
  90: CALL 1530 0 0
// PrepareHeroes ;
  94: CALL 299 0 0
// PrepareRandoms ;
  98: CALL 1795 0 0
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
 102: LD_ADDR_EXP 21
 106: PUSH
 107: LD_INT 22
 109: PUSH
 110: LD_INT 1
 112: PUSH
 113: EMPTY
 114: LIST
 115: LIST
 116: PUSH
 117: LD_INT 2
 119: PUSH
 120: LD_INT 30
 122: PUSH
 123: LD_INT 6
 125: PUSH
 126: EMPTY
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 30
 132: PUSH
 133: LD_INT 7
 135: PUSH
 136: EMPTY
 137: LIST
 138: LIST
 139: PUSH
 140: LD_INT 30
 142: PUSH
 143: LD_INT 8
 145: PUSH
 146: EMPTY
 147: LIST
 148: LIST
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: LIST
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: PPUSH
 160: CALL_OW 69
 164: ST_TO_ADDR
// Action ;
 165: CALL 3310 0 0
// end ;
 169: END
// export function CreateNature ; var i ; begin
 170: LD_INT 0
 172: PPUSH
 173: PPUSH
// uc_side := 0 ;
 174: LD_ADDR_OWVAR 20
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// uc_nation := 0 ;
 182: LD_ADDR_OWVAR 21
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// for i = 1 to 4 do
 190: LD_ADDR_VAR 0 2
 194: PUSH
 195: DOUBLE
 196: LD_INT 1
 198: DEC
 199: ST_TO_ADDR
 200: LD_INT 4
 202: PUSH
 203: FOR_TO
 204: IFFALSE 292
// begin hc_gallery :=  ;
 206: LD_ADDR_OWVAR 33
 210: PUSH
 211: LD_STRING 
 213: ST_TO_ADDR
// hc_name :=  ;
 214: LD_ADDR_OWVAR 26
 218: PUSH
 219: LD_STRING 
 221: ST_TO_ADDR
// hc_agressivity := 0 ;
 222: LD_ADDR_OWVAR 35
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// hc_attr := [ rand ( 10 , 11 ) , rand ( 10 , 12 ) ] ;
 230: LD_ADDR_OWVAR 29
 234: PUSH
 235: LD_INT 10
 237: PPUSH
 238: LD_INT 11
 240: PPUSH
 241: CALL_OW 12
 245: PUSH
 246: LD_INT 10
 248: PPUSH
 249: LD_INT 12
 251: PPUSH
 252: CALL_OW 12
 256: PUSH
 257: EMPTY
 258: LIST
 259: LIST
 260: ST_TO_ADDR
// hc_class := class_apeman ;
 261: LD_ADDR_OWVAR 28
 265: PUSH
 266: LD_INT 12
 268: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , 22 , 18 , 20 , false ) ;
 269: CALL_OW 44
 273: PPUSH
 274: LD_INT 22
 276: PPUSH
 277: LD_INT 18
 279: PPUSH
 280: LD_INT 20
 282: PPUSH
 283: LD_INT 0
 285: PPUSH
 286: CALL_OW 50
// end ;
 290: GO 203
 292: POP
 293: POP
// end ; end_of_file
 294: LD_VAR 0 1
 298: RET
// export function PrepareHeroes ; var i , tmp , ape , test ; begin
 299: LD_INT 0
 301: PPUSH
 302: PPUSH
 303: PPUSH
 304: PPUSH
 305: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
 306: LD_ADDR_VAR 0 3
 310: PUSH
 311: LD_INT 22
 313: PUSH
 314: LD_INT 1
 316: PUSH
 317: EMPTY
 318: LIST
 319: LIST
 320: PUSH
 321: LD_INT 21
 323: PUSH
 324: LD_INT 3
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: PUSH
 331: LD_INT 30
 333: PUSH
 334: LD_INT 0
 336: PUSH
 337: EMPTY
 338: LIST
 339: LIST
 340: PUSH
 341: EMPTY
 342: LIST
 343: LIST
 344: LIST
 345: PPUSH
 346: CALL_OW 69
 350: ST_TO_ADDR
// if tmp then
 351: LD_VAR 0 3
 355: IFFALSE 373
// SetBName ( tmp [ 1 ] , delta ) ;
 357: LD_VAR 0 3
 361: PUSH
 362: LD_INT 1
 364: ARRAY
 365: PPUSH
 366: LD_STRING delta
 368: PPUSH
 369: CALL_OW 500
// uc_side := 1 ;
 373: LD_ADDR_OWVAR 20
 377: PUSH
 378: LD_INT 1
 380: ST_TO_ADDR
// uc_nation := 1 ;
 381: LD_ADDR_OWVAR 21
 385: PUSH
 386: LD_INT 1
 388: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , true , mission_prefix_prev ) ;
 389: LD_ADDR_EXP 1
 393: PUSH
 394: LD_STRING JMM
 396: PPUSH
 397: LD_INT 1
 399: PPUSH
 400: LD_EXP 24
 404: PPUSH
 405: CALL 25966 0 3
 409: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
 410: LD_ADDR_EXP 17
 414: PUSH
 415: LD_STRING Harisson
 417: PPUSH
 418: LD_INT 0
 420: PPUSH
 421: LD_STRING 
 423: PPUSH
 424: CALL 25966 0 3
 428: ST_TO_ADDR
// PlaceUnitXYR ( JMM , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 429: LD_EXP 1
 433: PPUSH
 434: LD_VAR 0 3
 438: PUSH
 439: LD_INT 1
 441: ARRAY
 442: PPUSH
 443: CALL_OW 250
 447: PPUSH
 448: LD_VAR 0 3
 452: PUSH
 453: LD_INT 1
 455: ARRAY
 456: PPUSH
 457: CALL_OW 251
 461: PPUSH
 462: LD_INT 5
 464: PPUSH
 465: LD_INT 0
 467: PPUSH
 468: CALL_OW 50
// SetClass ( JMM , 1 ) ;
 472: LD_EXP 1
 476: PPUSH
 477: LD_INT 1
 479: PPUSH
 480: CALL_OW 336
// Gladstone := PrepareUnit ( Gladstone , true , mission_prefix_prev ) ;
 484: LD_ADDR_EXP 2
 488: PUSH
 489: LD_STRING Gladstone
 491: PPUSH
 492: LD_INT 1
 494: PPUSH
 495: LD_EXP 24
 499: PPUSH
 500: CALL 25966 0 3
 504: ST_TO_ADDR
// PlaceUnitXYR ( Gladstone , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 505: LD_EXP 2
 509: PPUSH
 510: LD_VAR 0 3
 514: PUSH
 515: LD_INT 1
 517: ARRAY
 518: PPUSH
 519: CALL_OW 250
 523: PPUSH
 524: LD_VAR 0 3
 528: PUSH
 529: LD_INT 1
 531: ARRAY
 532: PPUSH
 533: CALL_OW 251
 537: PPUSH
 538: LD_INT 5
 540: PPUSH
 541: LD_INT 0
 543: PPUSH
 544: CALL_OW 50
// SetClass ( Gladstone , 4 ) ;
 548: LD_EXP 2
 552: PPUSH
 553: LD_INT 4
 555: PPUSH
 556: CALL_OW 336
// Denis := PrepareUnit ( Denis , true , mission_prefix_prev ) ;
 560: LD_ADDR_EXP 3
 564: PUSH
 565: LD_STRING Denis
 567: PPUSH
 568: LD_INT 1
 570: PPUSH
 571: LD_EXP 24
 575: PPUSH
 576: CALL 25966 0 3
 580: ST_TO_ADDR
// PlaceUnitXYR ( Denis , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 581: LD_EXP 3
 585: PPUSH
 586: LD_VAR 0 3
 590: PUSH
 591: LD_INT 1
 593: ARRAY
 594: PPUSH
 595: CALL_OW 250
 599: PPUSH
 600: LD_VAR 0 3
 604: PUSH
 605: LD_INT 1
 607: ARRAY
 608: PPUSH
 609: CALL_OW 251
 613: PPUSH
 614: LD_INT 5
 616: PPUSH
 617: LD_INT 0
 619: PPUSH
 620: CALL_OW 50
// SetClass ( Denis , 4 ) ;
 624: LD_EXP 3
 628: PPUSH
 629: LD_INT 4
 631: PPUSH
 632: CALL_OW 336
// Mike := PrepareUnit ( Mike , true , mission_prefix_prev ) ;
 636: LD_ADDR_EXP 10
 640: PUSH
 641: LD_STRING Mike
 643: PPUSH
 644: LD_INT 1
 646: PPUSH
 647: LD_EXP 24
 651: PPUSH
 652: CALL 25966 0 3
 656: ST_TO_ADDR
// PlaceUnitXYR ( Mike , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 657: LD_EXP 10
 661: PPUSH
 662: LD_VAR 0 3
 666: PUSH
 667: LD_INT 1
 669: ARRAY
 670: PPUSH
 671: CALL_OW 250
 675: PPUSH
 676: LD_VAR 0 3
 680: PUSH
 681: LD_INT 1
 683: ARRAY
 684: PPUSH
 685: CALL_OW 251
 689: PPUSH
 690: LD_INT 5
 692: PPUSH
 693: LD_INT 0
 695: PPUSH
 696: CALL_OW 50
// if LoadVariable ( FrankInDelta , 0 ) = 1 then
 700: LD_STRING FrankInDelta
 702: PPUSH
 703: LD_INT 0
 705: PPUSH
 706: CALL_OW 30
 710: PUSH
 711: LD_INT 1
 713: EQUAL
 714: IFFALSE 792
// begin Frank := PrepareUnit ( Frank , true , mission_prefix_prev ) ;
 716: LD_ADDR_EXP 5
 720: PUSH
 721: LD_STRING Frank
 723: PPUSH
 724: LD_INT 1
 726: PPUSH
 727: LD_EXP 24
 731: PPUSH
 732: CALL 25966 0 3
 736: ST_TO_ADDR
// PlaceUnitXYR ( Frank , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 737: LD_EXP 5
 741: PPUSH
 742: LD_VAR 0 3
 746: PUSH
 747: LD_INT 1
 749: ARRAY
 750: PPUSH
 751: CALL_OW 250
 755: PPUSH
 756: LD_VAR 0 3
 760: PUSH
 761: LD_INT 1
 763: ARRAY
 764: PPUSH
 765: CALL_OW 251
 769: PPUSH
 770: LD_INT 5
 772: PPUSH
 773: LD_INT 0
 775: PPUSH
 776: CALL_OW 50
// SetClass ( Frank , 1 ) ;
 780: LD_EXP 5
 784: PPUSH
 785: LD_INT 1
 787: PPUSH
 788: CALL_OW 336
// end ; if LoadVariable ( LisaInDelta , 0 ) = 1 then
 792: LD_STRING LisaInDelta
 794: PPUSH
 795: LD_INT 0
 797: PPUSH
 798: CALL_OW 30
 802: PUSH
 803: LD_INT 1
 805: EQUAL
 806: IFFALSE 884
// begin Lisa := PrepareUnit ( Lisa , true , mission_prefix_prev ) ;
 808: LD_ADDR_EXP 4
 812: PUSH
 813: LD_STRING Lisa
 815: PPUSH
 816: LD_INT 1
 818: PPUSH
 819: LD_EXP 24
 823: PPUSH
 824: CALL 25966 0 3
 828: ST_TO_ADDR
// PlaceUnitXYR ( Lisa , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 829: LD_EXP 4
 833: PPUSH
 834: LD_VAR 0 3
 838: PUSH
 839: LD_INT 1
 841: ARRAY
 842: PPUSH
 843: CALL_OW 250
 847: PPUSH
 848: LD_VAR 0 3
 852: PUSH
 853: LD_INT 1
 855: ARRAY
 856: PPUSH
 857: CALL_OW 251
 861: PPUSH
 862: LD_INT 5
 864: PPUSH
 865: LD_INT 0
 867: PPUSH
 868: CALL_OW 50
// SetClass ( Lisa , 1 ) ;
 872: LD_EXP 4
 876: PPUSH
 877: LD_INT 1
 879: PPUSH
 880: CALL_OW 336
// end ; if LoadVariable ( BobbyInDelta , 0 ) = 1 then
 884: LD_STRING BobbyInDelta
 886: PPUSH
 887: LD_INT 0
 889: PPUSH
 890: CALL_OW 30
 894: PUSH
 895: LD_INT 1
 897: EQUAL
 898: IFFALSE 976
// begin Bobby := PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 900: LD_ADDR_EXP 6
 904: PUSH
 905: LD_STRING Bobby
 907: PPUSH
 908: LD_INT 1
 910: PPUSH
 911: LD_EXP 24
 915: PPUSH
 916: CALL 25966 0 3
 920: ST_TO_ADDR
// PlaceUnitXYR ( Bobby , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 921: LD_EXP 6
 925: PPUSH
 926: LD_VAR 0 3
 930: PUSH
 931: LD_INT 1
 933: ARRAY
 934: PPUSH
 935: CALL_OW 250
 939: PPUSH
 940: LD_VAR 0 3
 944: PUSH
 945: LD_INT 1
 947: ARRAY
 948: PPUSH
 949: CALL_OW 251
 953: PPUSH
 954: LD_INT 5
 956: PPUSH
 957: LD_INT 0
 959: PPUSH
 960: CALL_OW 50
// SetClass ( Bobby , 1 ) ;
 964: LD_EXP 6
 968: PPUSH
 969: LD_INT 1
 971: PPUSH
 972: CALL_OW 336
// end ; if LoadVariable ( CyrusInDelta , 0 ) = 1 then
 976: LD_STRING CyrusInDelta
 978: PPUSH
 979: LD_INT 0
 981: PPUSH
 982: CALL_OW 30
 986: PUSH
 987: LD_INT 1
 989: EQUAL
 990: IFFALSE 1068
// begin Cyrus := PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
 992: LD_ADDR_EXP 7
 996: PUSH
 997: LD_STRING Cyrus
 999: PPUSH
1000: LD_INT 1
1002: PPUSH
1003: LD_EXP 24
1007: PPUSH
1008: CALL 25966 0 3
1012: ST_TO_ADDR
// PlaceUnitXYR ( Cyrus , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1013: LD_EXP 7
1017: PPUSH
1018: LD_VAR 0 3
1022: PUSH
1023: LD_INT 1
1025: ARRAY
1026: PPUSH
1027: CALL_OW 250
1031: PPUSH
1032: LD_VAR 0 3
1036: PUSH
1037: LD_INT 1
1039: ARRAY
1040: PPUSH
1041: CALL_OW 251
1045: PPUSH
1046: LD_INT 5
1048: PPUSH
1049: LD_INT 0
1051: PPUSH
1052: CALL_OW 50
// SetClass ( Cyrus , 1 ) ;
1056: LD_EXP 7
1060: PPUSH
1061: LD_INT 1
1063: PPUSH
1064: CALL_OW 336
// end ; if LoadVariable ( DonaldsonInDelta , 0 ) = 1 then
1068: LD_STRING DonaldsonInDelta
1070: PPUSH
1071: LD_INT 0
1073: PPUSH
1074: CALL_OW 30
1078: PUSH
1079: LD_INT 1
1081: EQUAL
1082: IFFALSE 1160
// begin Donaldson := PrepareUnit ( Donaldson , true , mission_prefix_prev ) ;
1084: LD_ADDR_EXP 9
1088: PUSH
1089: LD_STRING Donaldson
1091: PPUSH
1092: LD_INT 1
1094: PPUSH
1095: LD_EXP 24
1099: PPUSH
1100: CALL 25966 0 3
1104: ST_TO_ADDR
// PlaceUnitXYR ( Donaldson , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1105: LD_EXP 9
1109: PPUSH
1110: LD_VAR 0 3
1114: PUSH
1115: LD_INT 1
1117: ARRAY
1118: PPUSH
1119: CALL_OW 250
1123: PPUSH
1124: LD_VAR 0 3
1128: PUSH
1129: LD_INT 1
1131: ARRAY
1132: PPUSH
1133: CALL_OW 251
1137: PPUSH
1138: LD_INT 5
1140: PPUSH
1141: LD_INT 0
1143: PPUSH
1144: CALL_OW 50
// SetClass ( Donaldson , 1 ) ;
1148: LD_EXP 9
1152: PPUSH
1153: LD_INT 1
1155: PPUSH
1156: CALL_OW 336
// end ; if LoadVariable ( BrownInDelta , 0 ) = 1 then
1160: LD_STRING BrownInDelta
1162: PPUSH
1163: LD_INT 0
1165: PPUSH
1166: CALL_OW 30
1170: PUSH
1171: LD_INT 1
1173: EQUAL
1174: IFFALSE 1252
// begin Brown := PrepareUnit ( Brown , true , mission_prefix_prev ) ;
1176: LD_ADDR_EXP 8
1180: PUSH
1181: LD_STRING Brown
1183: PPUSH
1184: LD_INT 1
1186: PPUSH
1187: LD_EXP 24
1191: PPUSH
1192: CALL 25966 0 3
1196: ST_TO_ADDR
// PlaceUnitXYR ( Brown , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1197: LD_EXP 8
1201: PPUSH
1202: LD_VAR 0 3
1206: PUSH
1207: LD_INT 1
1209: ARRAY
1210: PPUSH
1211: CALL_OW 250
1215: PPUSH
1216: LD_VAR 0 3
1220: PUSH
1221: LD_INT 1
1223: ARRAY
1224: PPUSH
1225: CALL_OW 251
1229: PPUSH
1230: LD_INT 5
1232: PPUSH
1233: LD_INT 0
1235: PPUSH
1236: CALL_OW 50
// SetClass ( Brown , 2 ) ;
1240: LD_EXP 8
1244: PPUSH
1245: LD_INT 2
1247: PPUSH
1248: CALL_OW 336
// end ; others := CreateCharacterSet ( othersInDelta ) ;
1252: LD_ADDR_EXP 11
1256: PUSH
1257: LD_STRING othersInDelta
1259: PPUSH
1260: CALL_OW 31
1264: ST_TO_ADDR
// for i in others do
1265: LD_ADDR_VAR 0 2
1269: PUSH
1270: LD_EXP 11
1274: PUSH
1275: FOR_IN
1276: IFFALSE 1323
// PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1278: LD_VAR 0 2
1282: PPUSH
1283: LD_VAR 0 3
1287: PUSH
1288: LD_INT 1
1290: ARRAY
1291: PPUSH
1292: CALL_OW 250
1296: PPUSH
1297: LD_VAR 0 3
1301: PUSH
1302: LD_INT 1
1304: ARRAY
1305: PPUSH
1306: CALL_OW 251
1310: PPUSH
1311: LD_INT 35
1313: PPUSH
1314: LD_INT 0
1316: PPUSH
1317: CALL_OW 50
1321: GO 1275
1323: POP
1324: POP
// apemans := CreateCharacterSet ( apeInDelta ) ;
1325: LD_ADDR_EXP 13
1329: PUSH
1330: LD_STRING apeInDelta
1332: PPUSH
1333: CALL_OW 31
1337: ST_TO_ADDR
// uc_nation := 0 ;
1338: LD_ADDR_OWVAR 21
1342: PUSH
1343: LD_INT 0
1345: ST_TO_ADDR
// if apemans > 5 then
1346: LD_EXP 13
1350: PUSH
1351: LD_INT 5
1353: GREATER
1354: IFFALSE 1449
// begin for i := 1 to 5 do
1356: LD_ADDR_VAR 0 2
1360: PUSH
1361: DOUBLE
1362: LD_INT 1
1364: DEC
1365: ST_TO_ADDR
1366: LD_INT 5
1368: PUSH
1369: FOR_TO
1370: IFFALSE 1445
// begin PlaceUnitXYR ( apemans [ i ] , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1372: LD_EXP 13
1376: PUSH
1377: LD_VAR 0 2
1381: ARRAY
1382: PPUSH
1383: LD_VAR 0 3
1387: PUSH
1388: LD_INT 1
1390: ARRAY
1391: PPUSH
1392: CALL_OW 250
1396: PPUSH
1397: LD_VAR 0 3
1401: PUSH
1402: LD_INT 1
1404: ARRAY
1405: PPUSH
1406: CALL_OW 251
1410: PPUSH
1411: LD_INT 50
1413: PPUSH
1414: LD_INT 0
1416: PPUSH
1417: CALL_OW 50
// yourApemans := yourApemans ^ apemans [ i ] ;
1421: LD_ADDR_EXP 14
1425: PUSH
1426: LD_EXP 14
1430: PUSH
1431: LD_EXP 13
1435: PUSH
1436: LD_VAR 0 2
1440: ARRAY
1441: ADD
1442: ST_TO_ADDR
// end ;
1443: GO 1369
1445: POP
1446: POP
// end else
1447: GO 1525
// begin for i in apemans do
1449: LD_ADDR_VAR 0 2
1453: PUSH
1454: LD_EXP 13
1458: PUSH
1459: FOR_IN
1460: IFFALSE 1523
// begin PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1462: LD_VAR 0 2
1466: PPUSH
1467: LD_VAR 0 3
1471: PUSH
1472: LD_INT 1
1474: ARRAY
1475: PPUSH
1476: CALL_OW 250
1480: PPUSH
1481: LD_VAR 0 3
1485: PUSH
1486: LD_INT 1
1488: ARRAY
1489: PPUSH
1490: CALL_OW 251
1494: PPUSH
1495: LD_INT 50
1497: PPUSH
1498: LD_INT 0
1500: PPUSH
1501: CALL_OW 50
// yourApemans := yourApemans ^ i ;
1505: LD_ADDR_EXP 14
1509: PUSH
1510: LD_EXP 14
1514: PUSH
1515: LD_VAR 0 2
1519: ADD
1520: ST_TO_ADDR
// end ;
1521: GO 1459
1523: POP
1524: POP
// end ; end ;
1525: LD_VAR 0 1
1529: RET
// export function LoadVehicles ; var i , j , veh , tmp , vehicles ; begin
1530: LD_INT 0
1532: PPUSH
1533: PPUSH
1534: PPUSH
1535: PPUSH
1536: PPUSH
1537: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1538: LD_ADDR_VAR 0 5
1542: PUSH
1543: LD_INT 22
1545: PUSH
1546: LD_INT 1
1548: PUSH
1549: EMPTY
1550: LIST
1551: LIST
1552: PUSH
1553: LD_INT 21
1555: PUSH
1556: LD_INT 3
1558: PUSH
1559: EMPTY
1560: LIST
1561: LIST
1562: PUSH
1563: LD_INT 30
1565: PUSH
1566: LD_INT 0
1568: PUSH
1569: EMPTY
1570: LIST
1571: LIST
1572: PUSH
1573: EMPTY
1574: LIST
1575: LIST
1576: LIST
1577: PPUSH
1578: CALL_OW 69
1582: ST_TO_ADDR
// uc_side := 1 ;
1583: LD_ADDR_OWVAR 20
1587: PUSH
1588: LD_INT 1
1590: ST_TO_ADDR
// vehicles := LoadVariable ( vehiclesInDelta , [ ] ) ;
1591: LD_ADDR_VAR 0 6
1595: PUSH
1596: LD_STRING vehiclesInDelta
1598: PPUSH
1599: EMPTY
1600: PPUSH
1601: CALL_OW 30
1605: ST_TO_ADDR
// for i := 1 to Count ( vehicles ) div 4 do
1606: LD_ADDR_VAR 0 2
1610: PUSH
1611: DOUBLE
1612: LD_INT 1
1614: DEC
1615: ST_TO_ADDR
1616: LD_VAR 0 6
1620: PPUSH
1621: CALL 28068 0 1
1625: PUSH
1626: LD_INT 4
1628: DIV
1629: PUSH
1630: FOR_TO
1631: IFFALSE 1788
// begin uc_nation := vehicles [ 1 ] ;
1633: LD_ADDR_OWVAR 21
1637: PUSH
1638: LD_VAR 0 6
1642: PUSH
1643: LD_INT 1
1645: ARRAY
1646: ST_TO_ADDR
// vc_chassis := vehicles [ 2 ] ;
1647: LD_ADDR_OWVAR 37
1651: PUSH
1652: LD_VAR 0 6
1656: PUSH
1657: LD_INT 2
1659: ARRAY
1660: ST_TO_ADDR
// vc_engine := vehicles [ 3 ] ;
1661: LD_ADDR_OWVAR 39
1665: PUSH
1666: LD_VAR 0 6
1670: PUSH
1671: LD_INT 3
1673: ARRAY
1674: ST_TO_ADDR
// vc_control := vehicles [ 4 ] ;
1675: LD_ADDR_OWVAR 38
1679: PUSH
1680: LD_VAR 0 6
1684: PUSH
1685: LD_INT 4
1687: ARRAY
1688: ST_TO_ADDR
// vc_weapon := vehicles [ 5 ] ;
1689: LD_ADDR_OWVAR 40
1693: PUSH
1694: LD_VAR 0 6
1698: PUSH
1699: LD_INT 5
1701: ARRAY
1702: ST_TO_ADDR
// veh := CreateVehicle ;
1703: LD_ADDR_VAR 0 4
1707: PUSH
1708: CALL_OW 45
1712: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1713: LD_VAR 0 4
1717: PPUSH
1718: LD_INT 0
1720: PPUSH
1721: LD_INT 5
1723: PPUSH
1724: CALL_OW 12
1728: PPUSH
1729: CALL_OW 233
// PlaceUnitArea ( veh , parkingArea , false ) ;
1733: LD_VAR 0 4
1737: PPUSH
1738: LD_INT 4
1740: PPUSH
1741: LD_INT 0
1743: PPUSH
1744: CALL_OW 49
// for j := 1 to 5 do
1748: LD_ADDR_VAR 0 3
1752: PUSH
1753: DOUBLE
1754: LD_INT 1
1756: DEC
1757: ST_TO_ADDR
1758: LD_INT 5
1760: PUSH
1761: FOR_TO
1762: IFFALSE 1784
// vehicles := Delete ( vehicles , 1 ) ;
1764: LD_ADDR_VAR 0 6
1768: PUSH
1769: LD_VAR 0 6
1773: PPUSH
1774: LD_INT 1
1776: PPUSH
1777: CALL_OW 3
1781: ST_TO_ADDR
1782: GO 1761
1784: POP
1785: POP
// end ;
1786: GO 1630
1788: POP
1789: POP
// end ;
1790: LD_VAR 0 1
1794: RET
// export function PrepareRandoms ; var i , un , tmp , filter ; begin
1795: LD_INT 0
1797: PPUSH
1798: PPUSH
1799: PPUSH
1800: PPUSH
1801: PPUSH
// uc_side := 1 ;
1802: LD_ADDR_OWVAR 20
1806: PUSH
1807: LD_INT 1
1809: ST_TO_ADDR
// uc_nation := 1 ;
1810: LD_ADDR_OWVAR 21
1814: PUSH
1815: LD_INT 1
1817: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1818: LD_ADDR_VAR 0 4
1822: PUSH
1823: LD_INT 22
1825: PUSH
1826: LD_INT 1
1828: PUSH
1829: EMPTY
1830: LIST
1831: LIST
1832: PUSH
1833: LD_INT 21
1835: PUSH
1836: LD_INT 3
1838: PUSH
1839: EMPTY
1840: LIST
1841: LIST
1842: PUSH
1843: LD_INT 30
1845: PUSH
1846: LD_INT 0
1848: PUSH
1849: EMPTY
1850: LIST
1851: LIST
1852: PUSH
1853: EMPTY
1854: LIST
1855: LIST
1856: LIST
1857: PPUSH
1858: CALL_OW 69
1862: ST_TO_ADDR
// deltaDoctor := ( FilterAllunits ( [ [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] ) ;
1863: LD_ADDR_EXP 16
1867: PUSH
1868: LD_INT 22
1870: PUSH
1871: LD_INT 1
1873: PUSH
1874: EMPTY
1875: LIST
1876: LIST
1877: PUSH
1878: LD_INT 25
1880: PUSH
1881: LD_INT 4
1883: PUSH
1884: EMPTY
1885: LIST
1886: LIST
1887: PUSH
1888: LD_INT 26
1890: PUSH
1891: LD_INT 1
1893: PUSH
1894: EMPTY
1895: LIST
1896: LIST
1897: PUSH
1898: EMPTY
1899: LIST
1900: LIST
1901: LIST
1902: PUSH
1903: EMPTY
1904: LIST
1905: PPUSH
1906: CALL_OW 69
1910: PUSH
1911: LD_EXP 1
1915: PUSH
1916: LD_EXP 7
1920: PUSH
1921: LD_EXP 6
1925: PUSH
1926: LD_EXP 5
1930: PUSH
1931: LD_EXP 2
1935: PUSH
1936: LD_EXP 3
1940: PUSH
1941: LD_EXP 8
1945: PUSH
1946: EMPTY
1947: LIST
1948: LIST
1949: LIST
1950: LIST
1951: LIST
1952: LIST
1953: LIST
1954: DIFF
1955: ST_TO_ADDR
// if not deltaDoctor then
1956: LD_EXP 16
1960: NOT
1961: IFFALSE 2112
// begin filter := FilterAllunits ( [ [ [ f_side , 1 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] ;
1963: LD_ADDR_VAR 0 5
1967: PUSH
1968: LD_INT 22
1970: PUSH
1971: LD_INT 1
1973: PUSH
1974: EMPTY
1975: LIST
1976: LIST
1977: PUSH
1978: LD_INT 26
1980: PUSH
1981: LD_INT 1
1983: PUSH
1984: EMPTY
1985: LIST
1986: LIST
1987: PUSH
1988: EMPTY
1989: LIST
1990: LIST
1991: PUSH
1992: EMPTY
1993: LIST
1994: PPUSH
1995: CALL_OW 69
1999: PUSH
2000: LD_EXP 1
2004: PUSH
2005: LD_EXP 7
2009: PUSH
2010: LD_EXP 6
2014: PUSH
2015: LD_EXP 5
2019: PUSH
2020: LD_EXP 2
2024: PUSH
2025: LD_EXP 3
2029: PUSH
2030: LD_EXP 8
2034: PUSH
2035: EMPTY
2036: LIST
2037: LIST
2038: LIST
2039: LIST
2040: LIST
2041: LIST
2042: LIST
2043: DIFF
2044: ST_TO_ADDR
// if filter then
2045: LD_VAR 0 5
2049: IFFALSE 2110
// for i in filter do
2051: LD_ADDR_VAR 0 2
2055: PUSH
2056: LD_VAR 0 5
2060: PUSH
2061: FOR_IN
2062: IFFALSE 2108
// if GetSkill ( i , 4 ) >= 4 then
2064: LD_VAR 0 2
2068: PPUSH
2069: LD_INT 4
2071: PPUSH
2072: CALL_OW 259
2076: PUSH
2077: LD_INT 4
2079: GREATEREQUAL
2080: IFFALSE 2106
// begin deltaDoctor := i ;
2082: LD_ADDR_EXP 16
2086: PUSH
2087: LD_VAR 0 2
2091: ST_TO_ADDR
// SetClass ( deltaDoctor , 4 ) ;
2092: LD_EXP 16
2096: PPUSH
2097: LD_INT 4
2099: PPUSH
2100: CALL_OW 336
// break ;
2104: GO 2108
// end ;
2106: GO 2061
2108: POP
2109: POP
// end else
2110: GO 2126
// deltaDoctor := deltaDoctor [ 1 ] ;
2112: LD_ADDR_EXP 16
2116: PUSH
2117: LD_EXP 16
2121: PUSH
2122: LD_INT 1
2124: ARRAY
2125: ST_TO_ADDR
// for i := 1 to 7 do
2126: LD_ADDR_VAR 0 2
2130: PUSH
2131: DOUBLE
2132: LD_INT 1
2134: DEC
2135: ST_TO_ADDR
2136: LD_INT 7
2138: PUSH
2139: FOR_TO
2140: IFFALSE 2277
// begin hc_gallery :=  ;
2142: LD_ADDR_OWVAR 33
2146: PUSH
2147: LD_STRING 
2149: ST_TO_ADDR
// hc_name :=  ;
2150: LD_ADDR_OWVAR 26
2154: PUSH
2155: LD_STRING 
2157: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 3 , 5 ) ) ;
2158: LD_INT 0
2160: PPUSH
2161: LD_INT 1
2163: PUSH
2164: LD_INT 2
2166: PUSH
2167: LD_INT 3
2169: PUSH
2170: LD_INT 4
2172: PUSH
2173: EMPTY
2174: LIST
2175: LIST
2176: LIST
2177: LIST
2178: PUSH
2179: LD_INT 1
2181: PPUSH
2182: LD_INT 4
2184: PPUSH
2185: CALL_OW 12
2189: ARRAY
2190: PPUSH
2191: LD_INT 3
2193: PPUSH
2194: LD_INT 5
2196: PPUSH
2197: CALL_OW 12
2201: PPUSH
2202: CALL_OW 380
// un := CreateHuman ;
2206: LD_ADDR_VAR 0 3
2210: PUSH
2211: CALL_OW 44
2215: ST_TO_ADDR
// randomsDelta := randomsDelta ^ un ;
2216: LD_ADDR_EXP 12
2220: PUSH
2221: LD_EXP 12
2225: PUSH
2226: LD_VAR 0 3
2230: ADD
2231: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
2232: LD_VAR 0 3
2236: PPUSH
2237: LD_VAR 0 4
2241: PUSH
2242: LD_INT 1
2244: ARRAY
2245: PPUSH
2246: CALL_OW 250
2250: PPUSH
2251: LD_VAR 0 4
2255: PUSH
2256: LD_INT 1
2258: ARRAY
2259: PPUSH
2260: CALL_OW 251
2264: PPUSH
2265: LD_INT 15
2267: PPUSH
2268: LD_INT 0
2270: PPUSH
2271: CALL_OW 50
// end ;
2275: GO 2139
2277: POP
2278: POP
// if deltaDoctor then
2279: LD_EXP 16
2283: IFFALSE 2287
// exit ;
2285: GO 2377
// hc_gallery := Dawkins ;
2287: LD_ADDR_OWVAR 33
2291: PUSH
2292: LD_STRING Dawkins
2294: ST_TO_ADDR
// hc_face_number := 1 ;
2295: LD_ADDR_OWVAR 34
2299: PUSH
2300: LD_INT 1
2302: ST_TO_ADDR
// hc_name := Dr. Adam Charles Dawkins ;
2303: LD_ADDR_OWVAR 26
2307: PUSH
2308: LD_STRING Dr. Adam Charles Dawkins
2310: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 5 ) ;
2311: LD_INT 1
2313: PPUSH
2314: LD_INT 4
2316: PPUSH
2317: LD_INT 5
2319: PPUSH
2320: CALL_OW 380
// deltaDoctor := CreateHuman ;
2324: LD_ADDR_EXP 16
2328: PUSH
2329: CALL_OW 44
2333: ST_TO_ADDR
// PlaceUnitXYR ( deltaDoctor , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
2334: LD_EXP 16
2338: PPUSH
2339: LD_VAR 0 4
2343: PUSH
2344: LD_INT 1
2346: ARRAY
2347: PPUSH
2348: CALL_OW 250
2352: PPUSH
2353: LD_VAR 0 4
2357: PUSH
2358: LD_INT 1
2360: ARRAY
2361: PPUSH
2362: CALL_OW 251
2366: PPUSH
2367: LD_INT 5
2369: PPUSH
2370: LD_INT 0
2372: PPUSH
2373: CALL_OW 50
// end ; end_of_file
2377: LD_VAR 0 1
2381: RET
// export function PrepareDeltaBase ; var i , j , building , buildings , lab , tmp ; begin
2382: LD_INT 0
2384: PPUSH
2385: PPUSH
2386: PPUSH
2387: PPUSH
2388: PPUSH
2389: PPUSH
2390: PPUSH
// buildings := LoadVariable ( buildingsInDelta , [ ] ) ;
2391: LD_ADDR_VAR 0 5
2395: PUSH
2396: LD_STRING buildingsInDelta
2398: PPUSH
2399: EMPTY
2400: PPUSH
2401: CALL_OW 30
2405: ST_TO_ADDR
// SetResourceVisibility ( 68 , 40 , 1 ) ;
2406: LD_INT 68
2408: PPUSH
2409: LD_INT 40
2411: PPUSH
2412: LD_INT 1
2414: PPUSH
2415: CALL_OW 441
// uc_side := 1 ;
2419: LD_ADDR_OWVAR 20
2423: PUSH
2424: LD_INT 1
2426: ST_TO_ADDR
// uc_nation := 1 ;
2427: LD_ADDR_OWVAR 21
2431: PUSH
2432: LD_INT 1
2434: ST_TO_ADDR
// for i := 1 to buildings do
2435: LD_ADDR_VAR 0 2
2439: PUSH
2440: DOUBLE
2441: LD_INT 1
2443: DEC
2444: ST_TO_ADDR
2445: LD_VAR 0 5
2449: PUSH
2450: FOR_TO
2451: IFFALSE 2766
// begin bc_type := buildings [ i ] [ 1 ] ;
2453: LD_ADDR_OWVAR 42
2457: PUSH
2458: LD_VAR 0 5
2462: PUSH
2463: LD_VAR 0 2
2467: ARRAY
2468: PUSH
2469: LD_INT 1
2471: ARRAY
2472: ST_TO_ADDR
// bc_level := buildings [ i ] [ 2 ] ;
2473: LD_ADDR_OWVAR 43
2477: PUSH
2478: LD_VAR 0 5
2482: PUSH
2483: LD_VAR 0 2
2487: ARRAY
2488: PUSH
2489: LD_INT 2
2491: ARRAY
2492: ST_TO_ADDR
// bc_kind1 := - 1 ;
2493: LD_ADDR_OWVAR 44
2497: PUSH
2498: LD_INT 1
2500: NEG
2501: ST_TO_ADDR
// bc_kind2 := - 1 ;
2502: LD_ADDR_OWVAR 45
2506: PUSH
2507: LD_INT 1
2509: NEG
2510: ST_TO_ADDR
// if bc_type in [ b_lab , b_lab_half , b_lab_full ] then
2511: LD_OWVAR 42
2515: PUSH
2516: LD_INT 6
2518: PUSH
2519: LD_INT 7
2521: PUSH
2522: LD_INT 8
2524: PUSH
2525: EMPTY
2526: LIST
2527: LIST
2528: LIST
2529: IN
2530: IFFALSE 2654
// begin bc_kind1 := b_lab_basic ;
2532: LD_ADDR_OWVAR 44
2536: PUSH
2537: LD_INT 9
2539: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2540: LD_ADDR_OWVAR 45
2544: PUSH
2545: LD_INT 9
2547: ST_TO_ADDR
// if buildings [ i ] [ 6 ] then
2548: LD_VAR 0 5
2552: PUSH
2553: LD_VAR 0 2
2557: ARRAY
2558: PUSH
2559: LD_INT 6
2561: ARRAY
2562: IFFALSE 2630
// begin bc_kind1 := buildings [ i ] [ 6 ] ;
2564: LD_ADDR_OWVAR 44
2568: PUSH
2569: LD_VAR 0 5
2573: PUSH
2574: LD_VAR 0 2
2578: ARRAY
2579: PUSH
2580: LD_INT 6
2582: ARRAY
2583: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2584: LD_ADDR_OWVAR 45
2588: PUSH
2589: LD_INT 9
2591: ST_TO_ADDR
// if buildings [ i ] [ 7 ] then
2592: LD_VAR 0 5
2596: PUSH
2597: LD_VAR 0 2
2601: ARRAY
2602: PUSH
2603: LD_INT 7
2605: ARRAY
2606: IFFALSE 2628
// bc_kind2 := buildings [ i ] [ 7 ] ;
2608: LD_ADDR_OWVAR 45
2612: PUSH
2613: LD_VAR 0 5
2617: PUSH
2618: LD_VAR 0 2
2622: ARRAY
2623: PUSH
2624: LD_INT 7
2626: ARRAY
2627: ST_TO_ADDR
// end else
2628: GO 2654
// begin bc_type := b_lab ;
2630: LD_ADDR_OWVAR 42
2634: PUSH
2635: LD_INT 6
2637: ST_TO_ADDR
// bc_kind1 := b_lab_basic ;
2638: LD_ADDR_OWVAR 44
2642: PUSH
2643: LD_INT 9
2645: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2646: LD_ADDR_OWVAR 45
2650: PUSH
2651: LD_INT 9
2653: ST_TO_ADDR
// end ; end ; building := CreateAndPlaceBuildingXYD ( buildings [ i ] [ 3 ] , buildings [ i ] [ 4 ] , buildings [ i ] [ 5 ] ) ;
2654: LD_ADDR_VAR 0 4
2658: PUSH
2659: LD_VAR 0 5
2663: PUSH
2664: LD_VAR 0 2
2668: ARRAY
2669: PUSH
2670: LD_INT 3
2672: ARRAY
2673: PPUSH
2674: LD_VAR 0 5
2678: PUSH
2679: LD_VAR 0 2
2683: ARRAY
2684: PUSH
2685: LD_INT 4
2687: ARRAY
2688: PPUSH
2689: LD_VAR 0 5
2693: PUSH
2694: LD_VAR 0 2
2698: ARRAY
2699: PUSH
2700: LD_INT 5
2702: ARRAY
2703: PPUSH
2704: CALL_OW 47
2708: ST_TO_ADDR
// if GetBType ( building ) = b_bunker and buildings [ i ] [ 8 ] then
2709: LD_VAR 0 4
2713: PPUSH
2714: CALL_OW 266
2718: PUSH
2719: LD_INT 32
2721: EQUAL
2722: PUSH
2723: LD_VAR 0 5
2727: PUSH
2728: LD_VAR 0 2
2732: ARRAY
2733: PUSH
2734: LD_INT 8
2736: ARRAY
2737: AND
2738: IFFALSE 2764
// PlaceWeaponTurret ( building , buildings [ i ] [ 8 ] ) ;
2740: LD_VAR 0 4
2744: PPUSH
2745: LD_VAR 0 5
2749: PUSH
2750: LD_VAR 0 2
2754: ARRAY
2755: PUSH
2756: LD_INT 8
2758: ARRAY
2759: PPUSH
2760: CALL_OW 431
// end ;
2764: GO 2450
2766: POP
2767: POP
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
2768: LD_ADDR_VAR 0 6
2772: PUSH
2773: LD_INT 22
2775: PUSH
2776: LD_INT 1
2778: PUSH
2779: EMPTY
2780: LIST
2781: LIST
2782: PUSH
2783: LD_INT 2
2785: PUSH
2786: LD_INT 30
2788: PUSH
2789: LD_INT 6
2791: PUSH
2792: EMPTY
2793: LIST
2794: LIST
2795: PUSH
2796: LD_INT 30
2798: PUSH
2799: LD_INT 7
2801: PUSH
2802: EMPTY
2803: LIST
2804: LIST
2805: PUSH
2806: LD_INT 30
2808: PUSH
2809: LD_INT 8
2811: PUSH
2812: EMPTY
2813: LIST
2814: LIST
2815: PUSH
2816: EMPTY
2817: LIST
2818: LIST
2819: LIST
2820: LIST
2821: PUSH
2822: EMPTY
2823: LIST
2824: LIST
2825: PPUSH
2826: CALL_OW 69
2830: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) ;
2831: LD_ADDR_VAR 0 7
2835: PUSH
2836: LD_INT 22
2838: PUSH
2839: LD_INT 1
2841: PUSH
2842: EMPTY
2843: LIST
2844: LIST
2845: PUSH
2846: LD_INT 30
2848: PUSH
2849: LD_INT 0
2851: PUSH
2852: EMPTY
2853: LIST
2854: LIST
2855: PUSH
2856: EMPTY
2857: LIST
2858: LIST
2859: PPUSH
2860: CALL_OW 69
2864: ST_TO_ADDR
// if lab and tmp then
2865: LD_VAR 0 6
2869: PUSH
2870: LD_VAR 0 7
2874: AND
2875: IFFALSE 2885
// baseCorrect := 1 ;
2877: LD_ADDR_EXP 19
2881: PUSH
2882: LD_INT 1
2884: ST_TO_ADDR
// if not baseCorrect then
2885: LD_EXP 19
2889: NOT
2890: IFFALSE 3305
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
2892: LD_ADDR_VAR 0 2
2896: PUSH
2897: LD_INT 22
2899: PUSH
2900: LD_INT 1
2902: PUSH
2903: EMPTY
2904: LIST
2905: LIST
2906: PUSH
2907: LD_INT 21
2909: PUSH
2910: LD_INT 3
2912: PUSH
2913: EMPTY
2914: LIST
2915: LIST
2916: PUSH
2917: EMPTY
2918: LIST
2919: LIST
2920: PPUSH
2921: CALL_OW 69
2925: PUSH
2926: FOR_IN
2927: IFFALSE 2940
// RemoveUnit ( i ) ;
2929: LD_VAR 0 2
2933: PPUSH
2934: CALL_OW 64
2938: GO 2926
2940: POP
2941: POP
// uc_nation := 1 ;
2942: LD_ADDR_OWVAR 21
2946: PUSH
2947: LD_INT 1
2949: ST_TO_ADDR
// uc_side := 1 ;
2950: LD_ADDR_OWVAR 20
2954: PUSH
2955: LD_INT 1
2957: ST_TO_ADDR
// bc_level := 5 ;
2958: LD_ADDR_OWVAR 43
2962: PUSH
2963: LD_INT 5
2965: ST_TO_ADDR
// bc_type := b_depot ;
2966: LD_ADDR_OWVAR 42
2970: PUSH
2971: LD_INT 0
2973: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 50 , 22 , 0 ) ;
2974: LD_INT 50
2976: PPUSH
2977: LD_INT 22
2979: PPUSH
2980: LD_INT 0
2982: PPUSH
2983: CALL_OW 47
// bc_type = b_bunker ;
2987: LD_ADDR_OWVAR 42
2991: PUSH
2992: LD_INT 32
2994: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( 68 , 24 , 4 ) ;
2995: LD_ADDR_VAR 0 4
2999: PUSH
3000: LD_INT 68
3002: PPUSH
3003: LD_INT 24
3005: PPUSH
3006: LD_INT 4
3008: PPUSH
3009: CALL_OW 47
3013: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ rand ( 1 , 2 ) ] ) ;
3014: LD_VAR 0 4
3018: PPUSH
3019: LD_INT 4
3021: PUSH
3022: LD_INT 11
3024: PUSH
3025: EMPTY
3026: LIST
3027: LIST
3028: PUSH
3029: LD_INT 1
3031: PPUSH
3032: LD_INT 2
3034: PPUSH
3035: CALL_OW 12
3039: ARRAY
3040: PPUSH
3041: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 71 , 34 , 4 ) ;
3045: LD_ADDR_VAR 0 4
3049: PUSH
3050: LD_INT 71
3052: PPUSH
3053: LD_INT 34
3055: PPUSH
3056: LD_INT 4
3058: PPUSH
3059: CALL_OW 47
3063: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ rand ( 1 , 2 ) ] ) ;
3064: LD_VAR 0 4
3068: PPUSH
3069: LD_INT 4
3071: PUSH
3072: LD_INT 11
3074: PUSH
3075: EMPTY
3076: LIST
3077: LIST
3078: PUSH
3079: LD_INT 1
3081: PPUSH
3082: LD_INT 2
3084: PPUSH
3085: CALL_OW 12
3089: ARRAY
3090: PPUSH
3091: CALL_OW 431
// bc_type := b_breastwork ;
3095: LD_ADDR_OWVAR 42
3099: PUSH
3100: LD_INT 31
3102: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 51 , 7 , 3 ) ;
3103: LD_INT 51
3105: PPUSH
3106: LD_INT 7
3108: PPUSH
3109: LD_INT 3
3111: PPUSH
3112: CALL_OW 47
// bc_type := b_oil_mine ;
3116: LD_ADDR_OWVAR 42
3120: PUSH
3121: LD_INT 29
3123: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 68 , 40 , 1 ) ;
3124: LD_INT 68
3126: PPUSH
3127: LD_INT 40
3129: PPUSH
3130: LD_INT 1
3132: PPUSH
3133: CALL_OW 47
// bc_type := b_factory ;
3137: LD_ADDR_OWVAR 42
3141: PUSH
3142: LD_INT 3
3144: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 20 , 2 ) ;
3145: LD_INT 38
3147: PPUSH
3148: LD_INT 20
3150: PPUSH
3151: LD_INT 2
3153: PPUSH
3154: CALL_OW 47
// bc_type := b_ext_noncombat ;
3158: LD_ADDR_OWVAR 42
3162: PUSH
3163: LD_INT 19
3165: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 24 , 2 ) ;
3166: LD_INT 38
3168: PPUSH
3169: LD_INT 24
3171: PPUSH
3172: LD_INT 2
3174: PPUSH
3175: CALL_OW 47
// bc_type := b_ext_radar ;
3179: LD_ADDR_OWVAR 42
3183: PUSH
3184: LD_INT 20
3186: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 35 , 20 , 1 ) ;
3187: LD_INT 35
3189: PPUSH
3190: LD_INT 20
3192: PPUSH
3193: LD_INT 1
3195: PPUSH
3196: CALL_OW 47
// bc_type := b_armoury ;
3200: LD_ADDR_OWVAR 42
3204: PUSH
3205: LD_INT 4
3207: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 33 , 28 , 1 ) ;
3208: LD_INT 33
3210: PPUSH
3211: LD_INT 28
3213: PPUSH
3214: LD_INT 1
3216: PPUSH
3217: CALL_OW 47
// bc_type := b_solar_power ;
3221: LD_ADDR_OWVAR 42
3225: PUSH
3226: LD_INT 27
3228: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 46 , 12 , 1 ) ;
3229: LD_INT 46
3231: PPUSH
3232: LD_INT 12
3234: PPUSH
3235: LD_INT 1
3237: PPUSH
3238: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 48 , 11 , 2 ) ;
3242: LD_INT 48
3244: PPUSH
3245: LD_INT 11
3247: PPUSH
3248: LD_INT 2
3250: PPUSH
3251: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 35 , 12 , 3 ) ;
3255: LD_INT 35
3257: PPUSH
3258: LD_INT 12
3260: PPUSH
3261: LD_INT 3
3263: PPUSH
3264: CALL_OW 47
// bc_type := b_lab_half ;
3268: LD_ADDR_OWVAR 42
3272: PUSH
3273: LD_INT 7
3275: ST_TO_ADDR
// bc_kind1 := b_lab_opto ;
3276: LD_ADDR_OWVAR 44
3280: PUSH
3281: LD_INT 15
3283: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
3284: LD_ADDR_OWVAR 45
3288: PUSH
3289: LD_INT 9
3291: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 42 , 15 , 2 ) ;
3292: LD_INT 42
3294: PPUSH
3295: LD_INT 15
3297: PPUSH
3298: LD_INT 2
3300: PPUSH
3301: CALL_OW 47
// end ; end ; end_of_file
3305: LD_VAR 0 1
3309: RET
// export function Action ; var i , j , tmp ; begin
3310: LD_INT 0
3312: PPUSH
3313: PPUSH
3314: PPUSH
3315: PPUSH
// InGameOn ;
3316: CALL_OW 8
// if lab then
3320: LD_EXP 21
3324: IFFALSE 3341
// CenterNowOnUnits ( lab [ 1 ] ) else
3326: LD_EXP 21
3330: PUSH
3331: LD_INT 1
3333: ARRAY
3334: PPUSH
3335: CALL_OW 87
3339: GO 3350
// CenterOnUnits ( JMM ) ;
3341: LD_EXP 1
3345: PPUSH
3346: CALL_OW 85
// if IsOK ( Denis ) then
3350: LD_EXP 3
3354: PPUSH
3355: CALL_OW 302
3359: IFFALSE 3387
// begin SetTech ( tech_radar , 1 , state_researched ) ;
3361: LD_INT 6
3363: PPUSH
3364: LD_INT 1
3366: PPUSH
3367: LD_INT 2
3369: PPUSH
3370: CALL_OW 322
// SetRestrict ( b_ext_radar , 1 , true ) ;
3374: LD_INT 20
3376: PPUSH
3377: LD_INT 1
3379: PPUSH
3380: LD_INT 1
3382: PPUSH
3383: CALL_OW 324
// end ; CenterNowOnUnits ( JMM ) ;
3387: LD_EXP 1
3391: PPUSH
3392: CALL_OW 87
// ComTurnUnit ( JMM , DeltaDoctor ) ;
3396: LD_EXP 1
3400: PPUSH
3401: LD_EXP 16
3405: PPUSH
3406: CALL_OW 119
// repeat wait ( 0 0$1 ) ;
3410: LD_INT 35
3412: PPUSH
3413: CALL_OW 67
// ComMoveUnit ( DeltaDoctor , JMM ) ;
3417: LD_EXP 16
3421: PPUSH
3422: LD_EXP 1
3426: PPUSH
3427: CALL_OW 112
// until GetDistUnits ( JMM , DeltaDoctor ) < 5 ;
3431: LD_EXP 1
3435: PPUSH
3436: LD_EXP 16
3440: PPUSH
3441: CALL_OW 296
3445: PUSH
3446: LD_INT 5
3448: LESS
3449: IFFALSE 3410
// ComTurnUnit ( DeltaDoctor , JMM ) ;
3451: LD_EXP 16
3455: PPUSH
3456: LD_EXP 1
3460: PPUSH
3461: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
3465: LD_EXP 1
3469: PPUSH
3470: LD_STRING D1-JMM-1
3472: PPUSH
3473: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-1 ) ;
3477: LD_EXP 16
3481: PPUSH
3482: LD_STRING D1-Sci-1
3484: PPUSH
3485: CALL_OW 88
// ComEnterUnit ( [ JMM , DeltaDoctor , Denis ] , lab [ 1 ] ) ;
3489: LD_EXP 1
3493: PUSH
3494: LD_EXP 16
3498: PUSH
3499: LD_EXP 3
3503: PUSH
3504: EMPTY
3505: LIST
3506: LIST
3507: LIST
3508: PPUSH
3509: LD_EXP 21
3513: PUSH
3514: LD_INT 1
3516: ARRAY
3517: PPUSH
3518: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
3522: LD_INT 35
3524: PPUSH
3525: CALL_OW 67
// until IsInUnit ( JMM ) and IsInUnit ( DeltaDoctor ) ;
3529: LD_EXP 1
3533: PPUSH
3534: CALL_OW 310
3538: PUSH
3539: LD_EXP 16
3543: PPUSH
3544: CALL_OW 310
3548: AND
3549: IFFALSE 3522
// CenterNowOnUnits ( lab [ 1 ] ) ;
3551: LD_EXP 21
3555: PUSH
3556: LD_INT 1
3558: ARRAY
3559: PPUSH
3560: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
3564: LD_EXP 1
3568: PPUSH
3569: LD_STRING D1-JMM-2
3571: PPUSH
3572: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-2 ) ;
3576: LD_EXP 16
3580: PPUSH
3581: LD_STRING D1-Sci-2
3583: PPUSH
3584: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
3588: LD_EXP 1
3592: PPUSH
3593: LD_STRING D1-JMM-3
3595: PPUSH
3596: CALL_OW 88
// if IsOK ( Denis ) then
3600: LD_EXP 3
3604: PPUSH
3605: CALL_OW 302
3609: IFFALSE 3625
// Say ( DeltaDoctor , D1-Sci-3 ) else
3611: LD_EXP 16
3615: PPUSH
3616: LD_STRING D1-Sci-3
3618: PPUSH
3619: CALL_OW 88
3623: GO 3637
// Say ( DeltaDoctor , D1-Sci-3a ) ;
3625: LD_EXP 16
3629: PPUSH
3630: LD_STRING D1-Sci-3a
3632: PPUSH
3633: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
3637: LD_EXP 1
3641: PPUSH
3642: LD_STRING D1-JMM-4
3644: PPUSH
3645: CALL_OW 88
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
3649: LD_ADDR_VAR 0 4
3653: PUSH
3654: LD_INT 22
3656: PUSH
3657: LD_INT 1
3659: PUSH
3660: EMPTY
3661: LIST
3662: LIST
3663: PUSH
3664: LD_INT 25
3666: PUSH
3667: LD_INT 4
3669: PUSH
3670: EMPTY
3671: LIST
3672: LIST
3673: PUSH
3674: LD_INT 3
3676: PUSH
3677: LD_INT 54
3679: PUSH
3680: EMPTY
3681: LIST
3682: PUSH
3683: EMPTY
3684: LIST
3685: LIST
3686: PUSH
3687: EMPTY
3688: LIST
3689: LIST
3690: LIST
3691: PPUSH
3692: CALL_OW 69
3696: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 0 ] ) do
3697: LD_ADDR_VAR 0 2
3701: PUSH
3702: LD_INT 22
3704: PUSH
3705: LD_INT 0
3707: PUSH
3708: EMPTY
3709: LIST
3710: LIST
3711: PPUSH
3712: CALL_OW 69
3716: PUSH
3717: FOR_IN
3718: IFFALSE 3768
// for j in tmp do
3720: LD_ADDR_VAR 0 3
3724: PUSH
3725: LD_VAR 0 4
3729: PUSH
3730: FOR_IN
3731: IFFALSE 3764
// AddComTameXY ( j , GetX ( i ) , GetY ( i ) ) ;
3733: LD_VAR 0 3
3737: PPUSH
3738: LD_VAR 0 2
3742: PPUSH
3743: CALL_OW 250
3747: PPUSH
3748: LD_VAR 0 2
3752: PPUSH
3753: CALL_OW 251
3757: PPUSH
3758: CALL_OW 191
3762: GO 3730
3764: POP
3765: POP
3766: GO 3717
3768: POP
3769: POP
// Say ( DeltaDoctor , D1-Sci-4 ) ;
3770: LD_EXP 16
3774: PPUSH
3775: LD_STRING D1-Sci-4
3777: PPUSH
3778: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
3782: LD_EXP 1
3786: PPUSH
3787: LD_STRING D1-JMM-5
3789: PPUSH
3790: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-5 ) ;
3794: LD_EXP 16
3798: PPUSH
3799: LD_STRING D1-Sci-5
3801: PPUSH
3802: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
3806: LD_EXP 1
3810: PPUSH
3811: LD_STRING D1-JMM-6
3813: PPUSH
3814: CALL_OW 88
// SayRadio ( Harisson , D1-Har-6 ) ;
3818: LD_EXP 17
3822: PPUSH
3823: LD_STRING D1-Har-6
3825: PPUSH
3826: CALL_OW 94
// Say ( JMM , D1-JMM-7 ) ;
3830: LD_EXP 1
3834: PPUSH
3835: LD_STRING D1-JMM-7
3837: PPUSH
3838: CALL_OW 88
// SayRadio ( Harisson , D1-Har-7 ) ;
3842: LD_EXP 17
3846: PPUSH
3847: LD_STRING D1-Har-7
3849: PPUSH
3850: CALL_OW 94
// if IsOK ( Denis ) then
3854: LD_EXP 3
3858: PPUSH
3859: CALL_OW 302
3863: IFFALSE 3877
// Say ( JMM , D1-JMM-8 ) ;
3865: LD_EXP 1
3869: PPUSH
3870: LD_STRING D1-JMM-8
3872: PPUSH
3873: CALL_OW 88
// Say ( JMM , D1-JMM-8a ) ;
3877: LD_EXP 1
3881: PPUSH
3882: LD_STRING D1-JMM-8a
3884: PPUSH
3885: CALL_OW 88
// SayRadio ( Harisson , D1-Har-8 ) ;
3889: LD_EXP 17
3893: PPUSH
3894: LD_STRING D1-Har-8
3896: PPUSH
3897: CALL_OW 94
// Say ( JMM , D1-JMM-9 ) ;
3901: LD_EXP 1
3905: PPUSH
3906: LD_STRING D1-JMM-9
3908: PPUSH
3909: CALL_OW 88
// SayRadio ( Harisson , D1-Har-9 ) ;
3913: LD_EXP 17
3917: PPUSH
3918: LD_STRING D1-Har-9
3920: PPUSH
3921: CALL_OW 94
// Say ( JMM , D1-JMM-10 ) ;
3925: LD_EXP 1
3929: PPUSH
3930: LD_STRING D1-JMM-10
3932: PPUSH
3933: CALL_OW 88
// if IsOK ( Denis ) then
3937: LD_EXP 3
3941: PPUSH
3942: CALL_OW 302
3946: IFFALSE 3960
// Say ( JMM , D1-JMM-10a ) ;
3948: LD_EXP 1
3952: PPUSH
3953: LD_STRING D1-JMM-10a
3955: PPUSH
3956: CALL_OW 88
// SelectDeltaCharacters ;
3960: CALL 4444 0 0
// SetResourceType ( GetBase ( lab [ 1 ] ) , 1 , 150 ) ;
3964: LD_EXP 21
3968: PUSH
3969: LD_INT 1
3971: ARRAY
3972: PPUSH
3973: CALL_OW 274
3977: PPUSH
3978: LD_INT 1
3980: PPUSH
3981: LD_INT 150
3983: PPUSH
3984: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) then
3988: LD_INT 22
3990: PUSH
3991: LD_INT 1
3993: PUSH
3994: EMPTY
3995: LIST
3996: LIST
3997: PUSH
3998: LD_INT 30
4000: PUSH
4001: LD_INT 29
4003: PUSH
4004: EMPTY
4005: LIST
4006: LIST
4007: PUSH
4008: EMPTY
4009: LIST
4010: LIST
4011: PPUSH
4012: CALL_OW 69
4016: IFFALSE 4042
// SetResourceType ( GetBase ( lab [ 1 ] ) , 2 , 300 ) ;
4018: LD_EXP 21
4022: PUSH
4023: LD_INT 1
4025: ARRAY
4026: PPUSH
4027: CALL_OW 274
4031: PPUSH
4032: LD_INT 2
4034: PPUSH
4035: LD_INT 300
4037: PPUSH
4038: CALL_OW 277
// InGameOff ;
4042: CALL_OW 9
// Query ( Q1 ) ;
4046: LD_STRING Q1
4048: PPUSH
4049: CALL_OW 97
// SetAreaMapShow ( ExitArea , 1 ) ;
4053: LD_INT 3
4055: PPUSH
4056: LD_INT 1
4058: PPUSH
4059: CALL_OW 424
// if IsInUnit ( JMM ) then
4063: LD_EXP 1
4067: PPUSH
4068: CALL_OW 310
4072: IFFALSE 4083
// ComExitBuilding ( JMM ) ;
4074: LD_EXP 1
4078: PPUSH
4079: CALL_OW 122
// end ;
4083: LD_VAR 0 1
4087: RET
// every 0 0$1 trigger FilterUnitsExceptArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do var i , cargoType ;
4088: LD_INT 3
4090: PPUSH
4091: LD_INT 22
4093: PUSH
4094: LD_INT 1
4096: PUSH
4097: EMPTY
4098: LIST
4099: LIST
4100: PUSH
4101: LD_INT 21
4103: PUSH
4104: LD_INT 1
4106: PUSH
4107: EMPTY
4108: LIST
4109: LIST
4110: PUSH
4111: EMPTY
4112: LIST
4113: LIST
4114: PPUSH
4115: CALL_OW 71
4119: PUSH
4120: LD_INT 0
4122: EQUAL
4123: IFFALSE 4441
4125: GO 4127
4127: DISABLE
4128: LD_INT 0
4130: PPUSH
4131: PPUSH
// begin SaveDeltaCharacters ;
4132: CALL 4816 0 0
// if FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) then
4136: LD_INT 3
4138: PPUSH
4139: LD_INT 21
4141: PUSH
4142: LD_INT 2
4144: PUSH
4145: EMPTY
4146: LIST
4147: LIST
4148: PUSH
4149: LD_INT 3
4151: PUSH
4152: LD_INT 58
4154: PUSH
4155: EMPTY
4156: LIST
4157: PUSH
4158: EMPTY
4159: LIST
4160: LIST
4161: PUSH
4162: EMPTY
4163: LIST
4164: LIST
4165: PPUSH
4166: CALL_OW 70
4170: IFFALSE 4427
// begin for i in FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) do
4172: LD_ADDR_VAR 0 1
4176: PUSH
4177: LD_INT 3
4179: PPUSH
4180: LD_INT 21
4182: PUSH
4183: LD_INT 2
4185: PUSH
4186: EMPTY
4187: LIST
4188: LIST
4189: PUSH
4190: LD_INT 3
4192: PUSH
4193: LD_INT 58
4195: PUSH
4196: EMPTY
4197: LIST
4198: PUSH
4199: EMPTY
4200: LIST
4201: LIST
4202: PUSH
4203: EMPTY
4204: LIST
4205: LIST
4206: PPUSH
4207: CALL_OW 70
4211: PUSH
4212: FOR_IN
4213: IFFALSE 4425
// begin cargoType := GetCargoType ( i ) ;
4215: LD_ADDR_VAR 0 2
4219: PUSH
4220: LD_VAR 0 1
4224: PPUSH
4225: CALL_OW 288
4229: ST_TO_ADDR
// if GetWeapon ( i ) = us_cargo_bay then
4230: LD_VAR 0 1
4234: PPUSH
4235: CALL_OW 264
4239: PUSH
4240: LD_INT 12
4242: EQUAL
4243: IFFALSE 4340
// yourVehicles := yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , cargoType , GetCargo ( i , cargoType ) ] ] else
4245: LD_ADDR_EXP 15
4249: PUSH
4250: LD_EXP 15
4254: PUSH
4255: LD_VAR 0 1
4259: PPUSH
4260: CALL_OW 248
4264: PUSH
4265: LD_VAR 0 1
4269: PPUSH
4270: CALL_OW 265
4274: PUSH
4275: LD_VAR 0 1
4279: PPUSH
4280: CALL_OW 262
4284: PUSH
4285: LD_VAR 0 1
4289: PPUSH
4290: CALL_OW 263
4294: PUSH
4295: LD_VAR 0 1
4299: PPUSH
4300: CALL_OW 264
4304: PUSH
4305: LD_VAR 0 2
4309: PUSH
4310: LD_VAR 0 1
4314: PPUSH
4315: LD_VAR 0 2
4319: PPUSH
4320: CALL_OW 289
4324: PUSH
4325: EMPTY
4326: LIST
4327: LIST
4328: LIST
4329: LIST
4330: LIST
4331: LIST
4332: LIST
4333: PUSH
4334: EMPTY
4335: LIST
4336: ADD
4337: ST_TO_ADDR
4338: GO 4411
// yourVehicles := yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ] ;
4340: LD_ADDR_EXP 15
4344: PUSH
4345: LD_EXP 15
4349: PUSH
4350: LD_VAR 0 1
4354: PPUSH
4355: CALL_OW 248
4359: PUSH
4360: LD_VAR 0 1
4364: PPUSH
4365: CALL_OW 265
4369: PUSH
4370: LD_VAR 0 1
4374: PPUSH
4375: CALL_OW 262
4379: PUSH
4380: LD_VAR 0 1
4384: PPUSH
4385: CALL_OW 263
4389: PUSH
4390: LD_VAR 0 1
4394: PPUSH
4395: CALL_OW 264
4399: PUSH
4400: EMPTY
4401: LIST
4402: LIST
4403: LIST
4404: LIST
4405: LIST
4406: PUSH
4407: EMPTY
4408: LIST
4409: ADD
4410: ST_TO_ADDR
// SaveVariable ( yourVehicles , 06_VehiclesIn06_1 ) ;
4411: LD_EXP 15
4415: PPUSH
4416: LD_STRING 06_VehiclesIn06_1
4418: PPUSH
4419: CALL_OW 39
// end ;
4423: GO 4212
4425: POP
4426: POP
// end ; SaveCargos ;
4427: CALL 5596 0 0
// ChangeMap ( 6 , %_cont ) ;
4431: LD_INT 6
4433: PPUSH
4434: LD_STRING %_cont
4436: PPUSH
4437: CALL_OW 340
// end ; end_of_file
4441: PPOPN 2
4443: END
// export function SelectDeltaCharacters ; var i , yourPeople ; begin
4444: LD_INT 0
4446: PPUSH
4447: PPUSH
4448: PPUSH
// selectedPeople := [ ] ;
4449: LD_ADDR_EXP 18
4453: PUSH
4454: EMPTY
4455: ST_TO_ADDR
// yourPeople := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , DeltaDoctor , Denis ] ;
4456: LD_ADDR_VAR 0 3
4460: PUSH
4461: LD_INT 22
4463: PUSH
4464: LD_INT 1
4466: PUSH
4467: EMPTY
4468: LIST
4469: LIST
4470: PUSH
4471: LD_INT 21
4473: PUSH
4474: LD_INT 1
4476: PUSH
4477: EMPTY
4478: LIST
4479: LIST
4480: PUSH
4481: LD_INT 2
4483: PUSH
4484: LD_INT 25
4486: PUSH
4487: LD_INT 1
4489: PUSH
4490: EMPTY
4491: LIST
4492: LIST
4493: PUSH
4494: LD_INT 25
4496: PUSH
4497: LD_INT 2
4499: PUSH
4500: EMPTY
4501: LIST
4502: LIST
4503: PUSH
4504: LD_INT 25
4506: PUSH
4507: LD_INT 3
4509: PUSH
4510: EMPTY
4511: LIST
4512: LIST
4513: PUSH
4514: LD_INT 25
4516: PUSH
4517: LD_INT 4
4519: PUSH
4520: EMPTY
4521: LIST
4522: LIST
4523: PUSH
4524: EMPTY
4525: LIST
4526: LIST
4527: LIST
4528: LIST
4529: LIST
4530: PUSH
4531: EMPTY
4532: LIST
4533: LIST
4534: LIST
4535: PPUSH
4536: CALL_OW 69
4540: PUSH
4541: LD_EXP 1
4545: PUSH
4546: LD_EXP 16
4550: PUSH
4551: LD_EXP 3
4555: PUSH
4556: EMPTY
4557: LIST
4558: LIST
4559: LIST
4560: DIFF
4561: ST_TO_ADDR
// selectedPeople := CharacterSelection ( text , 5 , 5 , [ sel_change_class , JMM , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ yourPeople ^ [ sel_dont_change_class , sel_not_changeable , Denis , DeltaDoctor ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
4562: LD_ADDR_EXP 18
4566: PUSH
4567: LD_STRING text
4569: PPUSH
4570: LD_INT 5
4572: PPUSH
4573: LD_INT 5
4575: PPUSH
4576: LD_INT -5
4578: PUSH
4579: LD_EXP 1
4583: PUSH
4584: LD_INT -6
4586: PUSH
4587: LD_INT -2
4589: PUSH
4590: LD_INT -3
4592: PUSH
4593: LD_INT -5
4595: PUSH
4596: EMPTY
4597: LIST
4598: LIST
4599: LIST
4600: LIST
4601: LIST
4602: LIST
4603: PUSH
4604: LD_VAR 0 3
4608: ADD
4609: PUSH
4610: LD_INT -6
4612: PUSH
4613: LD_INT -4
4615: PUSH
4616: LD_EXP 3
4620: PUSH
4621: LD_EXP 16
4625: PUSH
4626: EMPTY
4627: LIST
4628: LIST
4629: LIST
4630: LIST
4631: ADD
4632: PPUSH
4633: LD_INT 1
4635: PUSH
4636: LD_INT 3
4638: PUSH
4639: LD_INT 2
4641: PUSH
4642: LD_INT 1
4644: PUSH
4645: EMPTY
4646: LIST
4647: LIST
4648: PUSH
4649: LD_INT 4
4651: PUSH
4652: EMPTY
4653: LIST
4654: LIST
4655: LIST
4656: LIST
4657: PPUSH
4658: CALL_OW 42
4662: ST_TO_ADDR
// ComStop ( selectedPeople ) ;
4663: LD_EXP 18
4667: PPUSH
4668: CALL_OW 141
// SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 4 ) ;
4672: LD_INT 22
4674: PUSH
4675: LD_INT 1
4677: PUSH
4678: EMPTY
4679: LIST
4680: LIST
4681: PUSH
4682: LD_INT 21
4684: PUSH
4685: LD_INT 1
4687: PUSH
4688: EMPTY
4689: LIST
4690: LIST
4691: PUSH
4692: EMPTY
4693: LIST
4694: LIST
4695: PPUSH
4696: CALL_OW 69
4700: PPUSH
4701: LD_INT 4
4703: PPUSH
4704: CALL_OW 235
// for i in selectedPeople do
4708: LD_ADDR_VAR 0 2
4712: PUSH
4713: LD_EXP 18
4717: PUSH
4718: FOR_IN
4719: IFFALSE 4735
// SetSide ( i , 1 ) ;
4721: LD_VAR 0 2
4725: PPUSH
4726: LD_INT 1
4728: PPUSH
4729: CALL_OW 235
4733: GO 4718
4735: POP
4736: POP
// for i in yourApemans do
4737: LD_ADDR_VAR 0 2
4741: PUSH
4742: LD_EXP 14
4746: PUSH
4747: FOR_IN
4748: IFFALSE 4764
// SetSide ( i , 1 ) ;
4750: LD_VAR 0 2
4754: PPUSH
4755: LD_INT 1
4757: PPUSH
4758: CALL_OW 235
4762: GO 4747
4764: POP
4765: POP
// if Mike then
4766: LD_EXP 10
4770: IFFALSE 4784
// SetSide ( Mike , 1 ) ;
4772: LD_EXP 10
4776: PPUSH
4777: LD_INT 1
4779: PPUSH
4780: CALL_OW 235
// SetSide ( JMM , 1 ) ;
4784: LD_EXP 1
4788: PPUSH
4789: LD_INT 1
4791: PPUSH
4792: CALL_OW 235
// SetSkill ( yourApemans , 2 , 3 ) ;
4796: LD_EXP 14
4800: PPUSH
4801: LD_INT 2
4803: PPUSH
4804: LD_INT 3
4806: PPUSH
4807: CALL_OW 237
// end ;
4811: LD_VAR 0 1
4815: RET
// export function SaveDeltaCharacters ; begin
4816: LD_INT 0
4818: PPUSH
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
4819: LD_EXP 1
4823: PPUSH
4824: LD_EXP 23
4828: PUSH
4829: LD_STRING JMM
4831: STR
4832: PPUSH
4833: CALL_OW 38
// SaveCharacters ( DeltaDoctor , DeltaDoctor ) ;
4837: LD_EXP 16
4841: PPUSH
4842: LD_STRING DeltaDoctor
4844: PPUSH
4845: CALL_OW 38
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
4849: LD_EXP 3
4853: PPUSH
4854: LD_EXP 23
4858: PUSH
4859: LD_STRING Denis
4861: STR
4862: PPUSH
4863: CALL_OW 38
// if Lisa in selectedPeople then
4867: LD_EXP 4
4871: PUSH
4872: LD_EXP 18
4876: IN
4877: IFFALSE 4909
// begin SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
4879: LD_EXP 4
4883: PPUSH
4884: LD_EXP 23
4888: PUSH
4889: LD_STRING Lisa
4891: STR
4892: PPUSH
4893: CALL_OW 38
// SaveVariable ( 1 , LisaIn06 ) ;
4897: LD_INT 1
4899: PPUSH
4900: LD_STRING LisaIn06
4902: PPUSH
4903: CALL_OW 39
// end else
4907: GO 4930
// if IsOk ( Lisa ) then
4909: LD_EXP 4
4913: PPUSH
4914: CALL_OW 302
4918: IFFALSE 4930
// SaveVariable ( 1 , LisaStayInDelta ) ;
4920: LD_INT 1
4922: PPUSH
4923: LD_STRING LisaStayInDelta
4925: PPUSH
4926: CALL_OW 39
// if Bobby in selectedPeople then
4930: LD_EXP 6
4934: PUSH
4935: LD_EXP 18
4939: IN
4940: IFFALSE 4972
// begin SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
4942: LD_EXP 6
4946: PPUSH
4947: LD_EXP 23
4951: PUSH
4952: LD_STRING Bobby
4954: STR
4955: PPUSH
4956: CALL_OW 38
// SaveVariable ( 1 , BobbyIn06 ) ;
4960: LD_INT 1
4962: PPUSH
4963: LD_STRING BobbyIn06
4965: PPUSH
4966: CALL_OW 39
// end else
4970: GO 4993
// if IsOk ( Bobby ) then
4972: LD_EXP 6
4976: PPUSH
4977: CALL_OW 302
4981: IFFALSE 4993
// SaveVariable ( 1 , BobbyStayInDelta ) ;
4983: LD_INT 1
4985: PPUSH
4986: LD_STRING BobbyStayInDelta
4988: PPUSH
4989: CALL_OW 39
// if Cyrus in selectedPeople then
4993: LD_EXP 7
4997: PUSH
4998: LD_EXP 18
5002: IN
5003: IFFALSE 5035
// begin SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
5005: LD_EXP 7
5009: PPUSH
5010: LD_EXP 23
5014: PUSH
5015: LD_STRING Cyrus
5017: STR
5018: PPUSH
5019: CALL_OW 38
// SaveVariable ( 1 , CyrusIn06 ) ;
5023: LD_INT 1
5025: PPUSH
5026: LD_STRING CyrusIn06
5028: PPUSH
5029: CALL_OW 39
// end else
5033: GO 5056
// if IsOk ( Cyrus ) then
5035: LD_EXP 7
5039: PPUSH
5040: CALL_OW 302
5044: IFFALSE 5056
// SaveVariable ( 1 , CyrusStayInDelta ) ;
5046: LD_INT 1
5048: PPUSH
5049: LD_STRING CyrusStayInDelta
5051: PPUSH
5052: CALL_OW 39
// if Frank in selectedPeople then
5056: LD_EXP 5
5060: PUSH
5061: LD_EXP 18
5065: IN
5066: IFFALSE 5098
// begin SaveCharacters ( Frank , mission_prefix & Frank ) ;
5068: LD_EXP 5
5072: PPUSH
5073: LD_EXP 23
5077: PUSH
5078: LD_STRING Frank
5080: STR
5081: PPUSH
5082: CALL_OW 38
// SaveVariable ( 1 , FrankIn06 ) ;
5086: LD_INT 1
5088: PPUSH
5089: LD_STRING FrankIn06
5091: PPUSH
5092: CALL_OW 39
// end else
5096: GO 5119
// if IsOk ( Frank ) then
5098: LD_EXP 5
5102: PPUSH
5103: CALL_OW 302
5107: IFFALSE 5119
// SaveVariable ( 1 , FrankStayInDelta ) ;
5109: LD_INT 1
5111: PPUSH
5112: LD_STRING FrankStayInDelta
5114: PPUSH
5115: CALL_OW 39
// if Brown in selectedPeople then
5119: LD_EXP 8
5123: PUSH
5124: LD_EXP 18
5128: IN
5129: IFFALSE 5161
// begin SaveCharacters ( Brown , mission_prefix & Brown ) ;
5131: LD_EXP 8
5135: PPUSH
5136: LD_EXP 23
5140: PUSH
5141: LD_STRING Brown
5143: STR
5144: PPUSH
5145: CALL_OW 38
// SaveVariable ( 1 , BrownIn06 ) ;
5149: LD_INT 1
5151: PPUSH
5152: LD_STRING BrownIn06
5154: PPUSH
5155: CALL_OW 39
// end else
5159: GO 5182
// if IsOk ( Brown ) then
5161: LD_EXP 8
5165: PPUSH
5166: CALL_OW 302
5170: IFFALSE 5182
// SaveVariable ( 1 , BrownStayInDelta ) ;
5172: LD_INT 1
5174: PPUSH
5175: LD_STRING BrownStayInDelta
5177: PPUSH
5178: CALL_OW 39
// if Donaldson in selectedPeople then
5182: LD_EXP 9
5186: PUSH
5187: LD_EXP 18
5191: IN
5192: IFFALSE 5224
// begin SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
5194: LD_EXP 9
5198: PPUSH
5199: LD_EXP 23
5203: PUSH
5204: LD_STRING Donaldson
5206: STR
5207: PPUSH
5208: CALL_OW 38
// SaveVariable ( 1 , DonaldsonIn06 ) ;
5212: LD_INT 1
5214: PPUSH
5215: LD_STRING DonaldsonIn06
5217: PPUSH
5218: CALL_OW 39
// end else
5222: GO 5245
// if IsOk ( Donaldson ) then
5224: LD_EXP 9
5228: PPUSH
5229: CALL_OW 302
5233: IFFALSE 5245
// SaveVariable ( 1 , DonaldsonStayInDelta ) ;
5235: LD_INT 1
5237: PPUSH
5238: LD_STRING DonaldsonStayInDelta
5240: PPUSH
5241: CALL_OW 39
// if Gladstone in selectedPeople then
5245: LD_EXP 2
5249: PUSH
5250: LD_EXP 18
5254: IN
5255: IFFALSE 5287
// begin SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
5257: LD_EXP 2
5261: PPUSH
5262: LD_EXP 23
5266: PUSH
5267: LD_STRING Gladstone
5269: STR
5270: PPUSH
5271: CALL_OW 38
// SaveVariable ( 1 , GladstoneIn06 ) ;
5275: LD_INT 1
5277: PPUSH
5278: LD_STRING GladstoneIn06
5280: PPUSH
5281: CALL_OW 39
// end else
5285: GO 5308
// if IsOk ( Gladstone ) then
5287: LD_EXP 2
5291: PPUSH
5292: CALL_OW 302
5296: IFFALSE 5308
// SaveVariable ( 1 , GladstoneStayInDelta ) ;
5298: LD_INT 1
5300: PPUSH
5301: LD_STRING GladstoneStayInDelta
5303: PPUSH
5304: CALL_OW 39
// if Mike then
5308: LD_EXP 10
5312: IFFALSE 5332
// SaveCharacters ( Mike , mission_prefix & Mike ) ;
5314: LD_EXP 10
5318: PPUSH
5319: LD_EXP 23
5323: PUSH
5324: LD_STRING Mike
5326: STR
5327: PPUSH
5328: CALL_OW 38
// selectedPeople := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ;
5332: LD_ADDR_EXP 18
5336: PUSH
5337: LD_INT 22
5339: PUSH
5340: LD_INT 1
5342: PUSH
5343: EMPTY
5344: LIST
5345: LIST
5346: PUSH
5347: LD_INT 23
5349: PUSH
5350: LD_INT 1
5352: PUSH
5353: EMPTY
5354: LIST
5355: LIST
5356: PUSH
5357: LD_INT 21
5359: PUSH
5360: LD_INT 1
5362: PUSH
5363: EMPTY
5364: LIST
5365: LIST
5366: PUSH
5367: EMPTY
5368: LIST
5369: LIST
5370: LIST
5371: PPUSH
5372: CALL_OW 69
5376: ST_TO_ADDR
// SaveCharacters ( yourApemans , ApeIn06 ) ;
5377: LD_EXP 14
5381: PPUSH
5382: LD_STRING ApeIn06
5384: PPUSH
5385: CALL_OW 38
// SaveCharacters ( selectedPeople diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis ] , OthersIn06 ) ;
5389: LD_EXP 18
5393: PUSH
5394: LD_EXP 1
5398: PUSH
5399: LD_EXP 4
5403: PUSH
5404: LD_EXP 6
5408: PUSH
5409: LD_EXP 7
5413: PUSH
5414: LD_EXP 5
5418: PUSH
5419: LD_EXP 8
5423: PUSH
5424: LD_EXP 9
5428: PUSH
5429: LD_EXP 2
5433: PUSH
5434: LD_EXP 3
5438: PUSH
5439: EMPTY
5440: LIST
5441: LIST
5442: LIST
5443: LIST
5444: LIST
5445: LIST
5446: LIST
5447: LIST
5448: LIST
5449: DIFF
5450: PPUSH
5451: LD_STRING OthersIn06
5453: PPUSH
5454: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ DeltaDoctor , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis ] , OthersStayInDelta ) ;
5458: LD_INT 22
5460: PUSH
5461: LD_INT 4
5463: PUSH
5464: EMPTY
5465: LIST
5466: LIST
5467: PUSH
5468: LD_INT 2
5470: PUSH
5471: LD_INT 25
5473: PUSH
5474: LD_INT 1
5476: PUSH
5477: EMPTY
5478: LIST
5479: LIST
5480: PUSH
5481: LD_INT 25
5483: PUSH
5484: LD_INT 2
5486: PUSH
5487: EMPTY
5488: LIST
5489: LIST
5490: PUSH
5491: LD_INT 25
5493: PUSH
5494: LD_INT 3
5496: PUSH
5497: EMPTY
5498: LIST
5499: LIST
5500: PUSH
5501: LD_INT 25
5503: PUSH
5504: LD_INT 4
5506: PUSH
5507: EMPTY
5508: LIST
5509: LIST
5510: PUSH
5511: EMPTY
5512: LIST
5513: LIST
5514: LIST
5515: LIST
5516: LIST
5517: PUSH
5518: EMPTY
5519: LIST
5520: LIST
5521: PPUSH
5522: CALL_OW 69
5526: PUSH
5527: LD_EXP 16
5531: PUSH
5532: LD_EXP 4
5536: PUSH
5537: LD_EXP 6
5541: PUSH
5542: LD_EXP 7
5546: PUSH
5547: LD_EXP 5
5551: PUSH
5552: LD_EXP 8
5556: PUSH
5557: LD_EXP 9
5561: PUSH
5562: LD_EXP 2
5566: PUSH
5567: LD_EXP 3
5571: PUSH
5572: EMPTY
5573: LIST
5574: LIST
5575: LIST
5576: LIST
5577: LIST
5578: LIST
5579: LIST
5580: LIST
5581: LIST
5582: DIFF
5583: PPUSH
5584: LD_STRING OthersStayInDelta
5586: PPUSH
5587: CALL_OW 38
// end ;
5591: LD_VAR 0 1
5595: RET
// export function SaveCargos ; var i ; begin
5596: LD_INT 0
5598: PPUSH
5599: PPUSH
// for i in FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) do
5600: LD_ADDR_VAR 0 2
5604: PUSH
5605: LD_INT 3
5607: PPUSH
5608: LD_INT 22
5610: PUSH
5611: LD_INT 1
5613: PUSH
5614: EMPTY
5615: LIST
5616: LIST
5617: PUSH
5618: LD_INT 34
5620: PUSH
5621: LD_INT 12
5623: PUSH
5624: EMPTY
5625: LIST
5626: LIST
5627: PUSH
5628: EMPTY
5629: LIST
5630: LIST
5631: PPUSH
5632: CALL_OW 70
5636: PUSH
5637: FOR_IN
5638: IFFALSE 5666
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
5640: LD_ADDR_EXP 22
5644: PUSH
5645: LD_EXP 22
5649: PUSH
5650: LD_VAR 0 2
5654: PPUSH
5655: CALL 66999 0 1
5659: PUSH
5660: EMPTY
5661: LIST
5662: ADD
5663: ST_TO_ADDR
5664: GO 5637
5666: POP
5667: POP
// SaveVariable ( resources , 06_ResourcesInCargo06_1 ) ;
5668: LD_EXP 22
5672: PPUSH
5673: LD_STRING 06_ResourcesInCargo06_1
5675: PPUSH
5676: CALL_OW 39
// end ; end_of_file
5680: LD_VAR 0 1
5684: RET
// on Command ( comandid ) do var i ;
5685: LD_INT 0
5687: PPUSH
// begin if comandid = 65 then
5688: LD_VAR 0 1
5692: PUSH
5693: LD_INT 65
5695: EQUAL
5696: IFFALSE 5737
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
5698: LD_ADDR_VAR 0 2
5702: PUSH
5703: LD_INT 22
5705: PUSH
5706: LD_INT 1
5708: PUSH
5709: EMPTY
5710: LIST
5711: LIST
5712: PUSH
5713: EMPTY
5714: LIST
5715: PPUSH
5716: CALL_OW 69
5720: PUSH
5721: FOR_IN
5722: IFFALSE 5735
// ComStop ( i ) ;
5724: LD_VAR 0 2
5728: PPUSH
5729: CALL_OW 141
5733: GO 5721
5735: POP
5736: POP
// end ;
5737: PPOPN 2
5739: END
// on ApemanTamed ( apeman , human ) do var tmp ;
5740: LD_INT 0
5742: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
5743: LD_ADDR_VAR 0 3
5747: PUSH
5748: LD_INT 22
5750: PUSH
5751: LD_INT 1
5753: PUSH
5754: EMPTY
5755: LIST
5756: LIST
5757: PUSH
5758: LD_INT 21
5760: PUSH
5761: LD_INT 3
5763: PUSH
5764: EMPTY
5765: LIST
5766: LIST
5767: PUSH
5768: LD_INT 30
5770: PUSH
5771: LD_INT 0
5773: PUSH
5774: EMPTY
5775: LIST
5776: LIST
5777: PUSH
5778: EMPTY
5779: LIST
5780: LIST
5781: LIST
5782: PPUSH
5783: CALL_OW 69
5787: ST_TO_ADDR
// if not tmp then
5788: LD_VAR 0 3
5792: NOT
5793: IFFALSE 5797
// exit ;
5795: GO 5827
// ComEnterUnit ( apeman , tmp [ 1 ] ) ;
5797: LD_VAR 0 1
5801: PPUSH
5802: LD_VAR 0 3
5806: PUSH
5807: LD_INT 1
5809: ARRAY
5810: PPUSH
5811: CALL_OW 120
// SetSide ( apeman , 4 ) ;
5815: LD_VAR 0 1
5819: PPUSH
5820: LD_INT 4
5822: PPUSH
5823: CALL_OW 235
// end ;
5827: PPOPN 3
5829: END
// on UnitDestroyed ( un ) do begin if un = JMM then
5830: LD_VAR 0 1
5834: PUSH
5835: LD_EXP 1
5839: EQUAL
5840: IFFALSE 5849
// YouLost ( JMM ) ;
5842: LD_STRING JMM
5844: PPUSH
5845: CALL_OW 104
// SOS_UnitDestroyed ( un ) ;
5849: LD_VAR 0 1
5853: PPUSH
5854: CALL 21677 0 1
// end ;
5858: PPOPN 1
5860: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
5861: LD_VAR 0 1
5865: PPUSH
5866: LD_VAR 0 2
5870: PPUSH
5871: CALL 21797 0 2
// end ; end_of_file
5875: PPOPN 2
5877: END
// every 0 0$1 do
5878: GO 5880
5880: DISABLE
// begin enable ;
5881: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
5882: LD_STRING updateTimer(
5884: PUSH
5885: LD_OWVAR 1
5889: STR
5890: PUSH
5891: LD_STRING );
5893: STR
5894: PPUSH
5895: CALL_OW 559
// end ;
5899: END
// export function SOS_MapStart ( ) ; begin
5900: LD_INT 0
5902: PPUSH
// if streamModeActive then
5903: LD_EXP 26
5907: IFFALSE 5916
// DefineStreamItems ( true ) ;
5909: LD_INT 1
5911: PPUSH
5912: CALL 7720 0 1
// UpdateLuaVariables ( ) ;
5916: CALL 5933 0 0
// UpdateFactoryWaypoints ( ) ;
5920: CALL 20581 0 0
// UpdateWarehouseGatheringPoints ( ) ;
5924: CALL 20838 0 0
// end ;
5928: LD_VAR 0 1
5932: RET
// export globalGameSaveCounter ; function UpdateLuaVariables ( ) ; begin
5933: LD_INT 0
5935: PPUSH
// if not globalGameSaveCounter then
5936: LD_EXP 25
5940: NOT
5941: IFFALSE 5952
// ToLua ( setGameSaveCounter(0) ) else
5943: LD_STRING setGameSaveCounter(0)
5945: PPUSH
5946: CALL_OW 559
5950: GO 5984
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
5952: LD_ADDR_EXP 25
5956: PUSH
5957: LD_EXP 25
5961: PPUSH
5962: CALL 64795 0 1
5966: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
5967: LD_STRING setGameSaveCounter(
5969: PUSH
5970: LD_EXP 25
5974: STR
5975: PUSH
5976: LD_STRING )
5978: STR
5979: PPUSH
5980: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
5984: LD_STRING setGameDifficulty(
5986: PUSH
5987: LD_OWVAR 67
5991: STR
5992: PUSH
5993: LD_STRING )
5995: STR
5996: PPUSH
5997: CALL_OW 559
// end ;
6001: LD_VAR 0 1
6005: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
6006: LD_INT 0
6008: PPUSH
// if p2 = stream_mode then
6009: LD_VAR 0 2
6013: PUSH
6014: LD_INT 100
6016: EQUAL
6017: IFFALSE 7020
// begin if not StreamModeActive then
6019: LD_EXP 26
6023: NOT
6024: IFFALSE 6034
// StreamModeActive := true ;
6026: LD_ADDR_EXP 26
6030: PUSH
6031: LD_INT 1
6033: ST_TO_ADDR
// if p3 = 0 then
6034: LD_VAR 0 3
6038: PUSH
6039: LD_INT 0
6041: EQUAL
6042: IFFALSE 6048
// InitStreamMode ;
6044: CALL 7256 0 0
// if p3 = 1 then
6048: LD_VAR 0 3
6052: PUSH
6053: LD_INT 1
6055: EQUAL
6056: IFFALSE 6066
// sRocket := true ;
6058: LD_ADDR_EXP 31
6062: PUSH
6063: LD_INT 1
6065: ST_TO_ADDR
// if p3 = 2 then
6066: LD_VAR 0 3
6070: PUSH
6071: LD_INT 2
6073: EQUAL
6074: IFFALSE 6084
// sSpeed := true ;
6076: LD_ADDR_EXP 30
6080: PUSH
6081: LD_INT 1
6083: ST_TO_ADDR
// if p3 = 3 then
6084: LD_VAR 0 3
6088: PUSH
6089: LD_INT 3
6091: EQUAL
6092: IFFALSE 6102
// sEngine := true ;
6094: LD_ADDR_EXP 32
6098: PUSH
6099: LD_INT 1
6101: ST_TO_ADDR
// if p3 = 4 then
6102: LD_VAR 0 3
6106: PUSH
6107: LD_INT 4
6109: EQUAL
6110: IFFALSE 6120
// sSpec := true ;
6112: LD_ADDR_EXP 29
6116: PUSH
6117: LD_INT 1
6119: ST_TO_ADDR
// if p3 = 5 then
6120: LD_VAR 0 3
6124: PUSH
6125: LD_INT 5
6127: EQUAL
6128: IFFALSE 6138
// sLevel := true ;
6130: LD_ADDR_EXP 33
6134: PUSH
6135: LD_INT 1
6137: ST_TO_ADDR
// if p3 = 6 then
6138: LD_VAR 0 3
6142: PUSH
6143: LD_INT 6
6145: EQUAL
6146: IFFALSE 6156
// sArmoury := true ;
6148: LD_ADDR_EXP 34
6152: PUSH
6153: LD_INT 1
6155: ST_TO_ADDR
// if p3 = 7 then
6156: LD_VAR 0 3
6160: PUSH
6161: LD_INT 7
6163: EQUAL
6164: IFFALSE 6174
// sRadar := true ;
6166: LD_ADDR_EXP 35
6170: PUSH
6171: LD_INT 1
6173: ST_TO_ADDR
// if p3 = 8 then
6174: LD_VAR 0 3
6178: PUSH
6179: LD_INT 8
6181: EQUAL
6182: IFFALSE 6192
// sBunker := true ;
6184: LD_ADDR_EXP 36
6188: PUSH
6189: LD_INT 1
6191: ST_TO_ADDR
// if p3 = 9 then
6192: LD_VAR 0 3
6196: PUSH
6197: LD_INT 9
6199: EQUAL
6200: IFFALSE 6210
// sHack := true ;
6202: LD_ADDR_EXP 37
6206: PUSH
6207: LD_INT 1
6209: ST_TO_ADDR
// if p3 = 10 then
6210: LD_VAR 0 3
6214: PUSH
6215: LD_INT 10
6217: EQUAL
6218: IFFALSE 6228
// sFire := true ;
6220: LD_ADDR_EXP 38
6224: PUSH
6225: LD_INT 1
6227: ST_TO_ADDR
// if p3 = 11 then
6228: LD_VAR 0 3
6232: PUSH
6233: LD_INT 11
6235: EQUAL
6236: IFFALSE 6246
// sRefresh := true ;
6238: LD_ADDR_EXP 39
6242: PUSH
6243: LD_INT 1
6245: ST_TO_ADDR
// if p3 = 12 then
6246: LD_VAR 0 3
6250: PUSH
6251: LD_INT 12
6253: EQUAL
6254: IFFALSE 6264
// sExp := true ;
6256: LD_ADDR_EXP 40
6260: PUSH
6261: LD_INT 1
6263: ST_TO_ADDR
// if p3 = 13 then
6264: LD_VAR 0 3
6268: PUSH
6269: LD_INT 13
6271: EQUAL
6272: IFFALSE 6282
// sDepot := true ;
6274: LD_ADDR_EXP 41
6278: PUSH
6279: LD_INT 1
6281: ST_TO_ADDR
// if p3 = 14 then
6282: LD_VAR 0 3
6286: PUSH
6287: LD_INT 14
6289: EQUAL
6290: IFFALSE 6300
// sFlag := true ;
6292: LD_ADDR_EXP 42
6296: PUSH
6297: LD_INT 1
6299: ST_TO_ADDR
// if p3 = 15 then
6300: LD_VAR 0 3
6304: PUSH
6305: LD_INT 15
6307: EQUAL
6308: IFFALSE 6318
// sKamikadze := true ;
6310: LD_ADDR_EXP 50
6314: PUSH
6315: LD_INT 1
6317: ST_TO_ADDR
// if p3 = 16 then
6318: LD_VAR 0 3
6322: PUSH
6323: LD_INT 16
6325: EQUAL
6326: IFFALSE 6336
// sTroll := true ;
6328: LD_ADDR_EXP 51
6332: PUSH
6333: LD_INT 1
6335: ST_TO_ADDR
// if p3 = 17 then
6336: LD_VAR 0 3
6340: PUSH
6341: LD_INT 17
6343: EQUAL
6344: IFFALSE 6354
// sSlow := true ;
6346: LD_ADDR_EXP 52
6350: PUSH
6351: LD_INT 1
6353: ST_TO_ADDR
// if p3 = 18 then
6354: LD_VAR 0 3
6358: PUSH
6359: LD_INT 18
6361: EQUAL
6362: IFFALSE 6372
// sLack := true ;
6364: LD_ADDR_EXP 53
6368: PUSH
6369: LD_INT 1
6371: ST_TO_ADDR
// if p3 = 19 then
6372: LD_VAR 0 3
6376: PUSH
6377: LD_INT 19
6379: EQUAL
6380: IFFALSE 6390
// sTank := true ;
6382: LD_ADDR_EXP 55
6386: PUSH
6387: LD_INT 1
6389: ST_TO_ADDR
// if p3 = 20 then
6390: LD_VAR 0 3
6394: PUSH
6395: LD_INT 20
6397: EQUAL
6398: IFFALSE 6408
// sRemote := true ;
6400: LD_ADDR_EXP 56
6404: PUSH
6405: LD_INT 1
6407: ST_TO_ADDR
// if p3 = 21 then
6408: LD_VAR 0 3
6412: PUSH
6413: LD_INT 21
6415: EQUAL
6416: IFFALSE 6426
// sPowell := true ;
6418: LD_ADDR_EXP 57
6422: PUSH
6423: LD_INT 1
6425: ST_TO_ADDR
// if p3 = 22 then
6426: LD_VAR 0 3
6430: PUSH
6431: LD_INT 22
6433: EQUAL
6434: IFFALSE 6444
// sTeleport := true ;
6436: LD_ADDR_EXP 60
6440: PUSH
6441: LD_INT 1
6443: ST_TO_ADDR
// if p3 = 23 then
6444: LD_VAR 0 3
6448: PUSH
6449: LD_INT 23
6451: EQUAL
6452: IFFALSE 6462
// sOilTower := true ;
6454: LD_ADDR_EXP 62
6458: PUSH
6459: LD_INT 1
6461: ST_TO_ADDR
// if p3 = 24 then
6462: LD_VAR 0 3
6466: PUSH
6467: LD_INT 24
6469: EQUAL
6470: IFFALSE 6480
// sShovel := true ;
6472: LD_ADDR_EXP 63
6476: PUSH
6477: LD_INT 1
6479: ST_TO_ADDR
// if p3 = 25 then
6480: LD_VAR 0 3
6484: PUSH
6485: LD_INT 25
6487: EQUAL
6488: IFFALSE 6498
// sSheik := true ;
6490: LD_ADDR_EXP 64
6494: PUSH
6495: LD_INT 1
6497: ST_TO_ADDR
// if p3 = 26 then
6498: LD_VAR 0 3
6502: PUSH
6503: LD_INT 26
6505: EQUAL
6506: IFFALSE 6516
// sEarthquake := true ;
6508: LD_ADDR_EXP 66
6512: PUSH
6513: LD_INT 1
6515: ST_TO_ADDR
// if p3 = 27 then
6516: LD_VAR 0 3
6520: PUSH
6521: LD_INT 27
6523: EQUAL
6524: IFFALSE 6534
// sAI := true ;
6526: LD_ADDR_EXP 67
6530: PUSH
6531: LD_INT 1
6533: ST_TO_ADDR
// if p3 = 28 then
6534: LD_VAR 0 3
6538: PUSH
6539: LD_INT 28
6541: EQUAL
6542: IFFALSE 6552
// sCargo := true ;
6544: LD_ADDR_EXP 70
6548: PUSH
6549: LD_INT 1
6551: ST_TO_ADDR
// if p3 = 29 then
6552: LD_VAR 0 3
6556: PUSH
6557: LD_INT 29
6559: EQUAL
6560: IFFALSE 6570
// sDLaser := true ;
6562: LD_ADDR_EXP 71
6566: PUSH
6567: LD_INT 1
6569: ST_TO_ADDR
// if p3 = 30 then
6570: LD_VAR 0 3
6574: PUSH
6575: LD_INT 30
6577: EQUAL
6578: IFFALSE 6588
// sExchange := true ;
6580: LD_ADDR_EXP 72
6584: PUSH
6585: LD_INT 1
6587: ST_TO_ADDR
// if p3 = 31 then
6588: LD_VAR 0 3
6592: PUSH
6593: LD_INT 31
6595: EQUAL
6596: IFFALSE 6606
// sFac := true ;
6598: LD_ADDR_EXP 73
6602: PUSH
6603: LD_INT 1
6605: ST_TO_ADDR
// if p3 = 32 then
6606: LD_VAR 0 3
6610: PUSH
6611: LD_INT 32
6613: EQUAL
6614: IFFALSE 6624
// sPower := true ;
6616: LD_ADDR_EXP 74
6620: PUSH
6621: LD_INT 1
6623: ST_TO_ADDR
// if p3 = 33 then
6624: LD_VAR 0 3
6628: PUSH
6629: LD_INT 33
6631: EQUAL
6632: IFFALSE 6642
// sRandom := true ;
6634: LD_ADDR_EXP 75
6638: PUSH
6639: LD_INT 1
6641: ST_TO_ADDR
// if p3 = 34 then
6642: LD_VAR 0 3
6646: PUSH
6647: LD_INT 34
6649: EQUAL
6650: IFFALSE 6660
// sShield := true ;
6652: LD_ADDR_EXP 76
6656: PUSH
6657: LD_INT 1
6659: ST_TO_ADDR
// if p3 = 35 then
6660: LD_VAR 0 3
6664: PUSH
6665: LD_INT 35
6667: EQUAL
6668: IFFALSE 6678
// sTime := true ;
6670: LD_ADDR_EXP 77
6674: PUSH
6675: LD_INT 1
6677: ST_TO_ADDR
// if p3 = 36 then
6678: LD_VAR 0 3
6682: PUSH
6683: LD_INT 36
6685: EQUAL
6686: IFFALSE 6696
// sTools := true ;
6688: LD_ADDR_EXP 78
6692: PUSH
6693: LD_INT 1
6695: ST_TO_ADDR
// if p3 = 101 then
6696: LD_VAR 0 3
6700: PUSH
6701: LD_INT 101
6703: EQUAL
6704: IFFALSE 6714
// sSold := true ;
6706: LD_ADDR_EXP 43
6710: PUSH
6711: LD_INT 1
6713: ST_TO_ADDR
// if p3 = 102 then
6714: LD_VAR 0 3
6718: PUSH
6719: LD_INT 102
6721: EQUAL
6722: IFFALSE 6732
// sDiff := true ;
6724: LD_ADDR_EXP 44
6728: PUSH
6729: LD_INT 1
6731: ST_TO_ADDR
// if p3 = 103 then
6732: LD_VAR 0 3
6736: PUSH
6737: LD_INT 103
6739: EQUAL
6740: IFFALSE 6750
// sFog := true ;
6742: LD_ADDR_EXP 47
6746: PUSH
6747: LD_INT 1
6749: ST_TO_ADDR
// if p3 = 104 then
6750: LD_VAR 0 3
6754: PUSH
6755: LD_INT 104
6757: EQUAL
6758: IFFALSE 6768
// sReset := true ;
6760: LD_ADDR_EXP 48
6764: PUSH
6765: LD_INT 1
6767: ST_TO_ADDR
// if p3 = 105 then
6768: LD_VAR 0 3
6772: PUSH
6773: LD_INT 105
6775: EQUAL
6776: IFFALSE 6786
// sSun := true ;
6778: LD_ADDR_EXP 49
6782: PUSH
6783: LD_INT 1
6785: ST_TO_ADDR
// if p3 = 106 then
6786: LD_VAR 0 3
6790: PUSH
6791: LD_INT 106
6793: EQUAL
6794: IFFALSE 6804
// sTiger := true ;
6796: LD_ADDR_EXP 45
6800: PUSH
6801: LD_INT 1
6803: ST_TO_ADDR
// if p3 = 107 then
6804: LD_VAR 0 3
6808: PUSH
6809: LD_INT 107
6811: EQUAL
6812: IFFALSE 6822
// sBomb := true ;
6814: LD_ADDR_EXP 46
6818: PUSH
6819: LD_INT 1
6821: ST_TO_ADDR
// if p3 = 108 then
6822: LD_VAR 0 3
6826: PUSH
6827: LD_INT 108
6829: EQUAL
6830: IFFALSE 6840
// sWound := true ;
6832: LD_ADDR_EXP 54
6836: PUSH
6837: LD_INT 1
6839: ST_TO_ADDR
// if p3 = 109 then
6840: LD_VAR 0 3
6844: PUSH
6845: LD_INT 109
6847: EQUAL
6848: IFFALSE 6858
// sBetray := true ;
6850: LD_ADDR_EXP 58
6854: PUSH
6855: LD_INT 1
6857: ST_TO_ADDR
// if p3 = 110 then
6858: LD_VAR 0 3
6862: PUSH
6863: LD_INT 110
6865: EQUAL
6866: IFFALSE 6876
// sContamin := true ;
6868: LD_ADDR_EXP 59
6872: PUSH
6873: LD_INT 1
6875: ST_TO_ADDR
// if p3 = 111 then
6876: LD_VAR 0 3
6880: PUSH
6881: LD_INT 111
6883: EQUAL
6884: IFFALSE 6894
// sOil := true ;
6886: LD_ADDR_EXP 61
6890: PUSH
6891: LD_INT 1
6893: ST_TO_ADDR
// if p3 = 112 then
6894: LD_VAR 0 3
6898: PUSH
6899: LD_INT 112
6901: EQUAL
6902: IFFALSE 6912
// sStu := true ;
6904: LD_ADDR_EXP 65
6908: PUSH
6909: LD_INT 1
6911: ST_TO_ADDR
// if p3 = 113 then
6912: LD_VAR 0 3
6916: PUSH
6917: LD_INT 113
6919: EQUAL
6920: IFFALSE 6930
// sBazooka := true ;
6922: LD_ADDR_EXP 68
6926: PUSH
6927: LD_INT 1
6929: ST_TO_ADDR
// if p3 = 114 then
6930: LD_VAR 0 3
6934: PUSH
6935: LD_INT 114
6937: EQUAL
6938: IFFALSE 6948
// sMortar := true ;
6940: LD_ADDR_EXP 69
6944: PUSH
6945: LD_INT 1
6947: ST_TO_ADDR
// if p3 = 115 then
6948: LD_VAR 0 3
6952: PUSH
6953: LD_INT 115
6955: EQUAL
6956: IFFALSE 6966
// sRanger := true ;
6958: LD_ADDR_EXP 79
6962: PUSH
6963: LD_INT 1
6965: ST_TO_ADDR
// if p3 = 116 then
6966: LD_VAR 0 3
6970: PUSH
6971: LD_INT 116
6973: EQUAL
6974: IFFALSE 6984
// sComputer := true ;
6976: LD_ADDR_EXP 80
6980: PUSH
6981: LD_INT 1
6983: ST_TO_ADDR
// if p3 = 117 then
6984: LD_VAR 0 3
6988: PUSH
6989: LD_INT 117
6991: EQUAL
6992: IFFALSE 7002
// s30 := true ;
6994: LD_ADDR_EXP 81
6998: PUSH
6999: LD_INT 1
7001: ST_TO_ADDR
// if p3 = 118 then
7002: LD_VAR 0 3
7006: PUSH
7007: LD_INT 118
7009: EQUAL
7010: IFFALSE 7020
// s60 := true ;
7012: LD_ADDR_EXP 82
7016: PUSH
7017: LD_INT 1
7019: ST_TO_ADDR
// end ; if p2 = hack_mode then
7020: LD_VAR 0 2
7024: PUSH
7025: LD_INT 101
7027: EQUAL
7028: IFFALSE 7156
// begin case p3 of 1 :
7030: LD_VAR 0 3
7034: PUSH
7035: LD_INT 1
7037: DOUBLE
7038: EQUAL
7039: IFTRUE 7043
7041: GO 7050
7043: POP
// hHackUnlimitedResources ; 2 :
7044: CALL 19327 0 0
7048: GO 7156
7050: LD_INT 2
7052: DOUBLE
7053: EQUAL
7054: IFTRUE 7058
7056: GO 7065
7058: POP
// hHackSetLevel10 ; 3 :
7059: CALL 19460 0 0
7063: GO 7156
7065: LD_INT 3
7067: DOUBLE
7068: EQUAL
7069: IFTRUE 7073
7071: GO 7080
7073: POP
// hHackSetLevel10YourUnits ; 4 :
7074: CALL 19545 0 0
7078: GO 7156
7080: LD_INT 4
7082: DOUBLE
7083: EQUAL
7084: IFTRUE 7088
7086: GO 7095
7088: POP
// hHackInvincible ; 5 :
7089: CALL 19993 0 0
7093: GO 7156
7095: LD_INT 5
7097: DOUBLE
7098: EQUAL
7099: IFTRUE 7103
7101: GO 7110
7103: POP
// hHackInvisible ; 6 :
7104: CALL 20104 0 0
7108: GO 7156
7110: LD_INT 6
7112: DOUBLE
7113: EQUAL
7114: IFTRUE 7118
7116: GO 7125
7118: POP
// hHackChangeYourSide ; 7 :
7119: CALL 20161 0 0
7123: GO 7156
7125: LD_INT 7
7127: DOUBLE
7128: EQUAL
7129: IFTRUE 7133
7131: GO 7140
7133: POP
// hHackChangeUnitSide ; 8 :
7134: CALL 20203 0 0
7138: GO 7156
7140: LD_INT 8
7142: DOUBLE
7143: EQUAL
7144: IFTRUE 7148
7146: GO 7155
7148: POP
// hHackFog ; end ;
7149: CALL 20304 0 0
7153: GO 7156
7155: POP
// end ; if p2 = game_save_mode then
7156: LD_VAR 0 2
7160: PUSH
7161: LD_INT 102
7163: EQUAL
7164: IFFALSE 7229
// begin if p3 = 1 then
7166: LD_VAR 0 3
7170: PUSH
7171: LD_INT 1
7173: EQUAL
7174: IFFALSE 7186
// globalGameSaveCounter := p4 ;
7176: LD_ADDR_EXP 25
7180: PUSH
7181: LD_VAR 0 4
7185: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
7186: LD_VAR 0 3
7190: PUSH
7191: LD_INT 2
7193: EQUAL
7194: PUSH
7195: LD_EXP 25
7199: AND
7200: IFFALSE 7219
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
7202: LD_STRING setGameSaveCounter(
7204: PUSH
7205: LD_EXP 25
7209: STR
7210: PUSH
7211: LD_STRING )
7213: STR
7214: PPUSH
7215: CALL_OW 559
// display_strings := globalGameSaveCounter ;
7219: LD_ADDR_OWVAR 47
7223: PUSH
7224: LD_EXP 25
7228: ST_TO_ADDR
// end ; end ;
7229: LD_VAR 0 7
7233: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
7234: GO 7236
7236: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
7237: LD_STRING initStreamRollete();
7239: PPUSH
7240: CALL_OW 559
// InitStreamMode ;
7244: CALL 7256 0 0
// DefineStreamItems ( false ) ;
7248: LD_INT 0
7250: PPUSH
7251: CALL 7720 0 1
// end ;
7255: END
// function InitStreamMode ; begin
7256: LD_INT 0
7258: PPUSH
// streamModeActive := false ;
7259: LD_ADDR_EXP 26
7263: PUSH
7264: LD_INT 0
7266: ST_TO_ADDR
// normalCounter := 36 ;
7267: LD_ADDR_EXP 27
7271: PUSH
7272: LD_INT 36
7274: ST_TO_ADDR
// hardcoreCounter := 18 ;
7275: LD_ADDR_EXP 28
7279: PUSH
7280: LD_INT 18
7282: ST_TO_ADDR
// sRocket := false ;
7283: LD_ADDR_EXP 31
7287: PUSH
7288: LD_INT 0
7290: ST_TO_ADDR
// sSpeed := false ;
7291: LD_ADDR_EXP 30
7295: PUSH
7296: LD_INT 0
7298: ST_TO_ADDR
// sEngine := false ;
7299: LD_ADDR_EXP 32
7303: PUSH
7304: LD_INT 0
7306: ST_TO_ADDR
// sSpec := false ;
7307: LD_ADDR_EXP 29
7311: PUSH
7312: LD_INT 0
7314: ST_TO_ADDR
// sLevel := false ;
7315: LD_ADDR_EXP 33
7319: PUSH
7320: LD_INT 0
7322: ST_TO_ADDR
// sArmoury := false ;
7323: LD_ADDR_EXP 34
7327: PUSH
7328: LD_INT 0
7330: ST_TO_ADDR
// sRadar := false ;
7331: LD_ADDR_EXP 35
7335: PUSH
7336: LD_INT 0
7338: ST_TO_ADDR
// sBunker := false ;
7339: LD_ADDR_EXP 36
7343: PUSH
7344: LD_INT 0
7346: ST_TO_ADDR
// sHack := false ;
7347: LD_ADDR_EXP 37
7351: PUSH
7352: LD_INT 0
7354: ST_TO_ADDR
// sFire := false ;
7355: LD_ADDR_EXP 38
7359: PUSH
7360: LD_INT 0
7362: ST_TO_ADDR
// sRefresh := false ;
7363: LD_ADDR_EXP 39
7367: PUSH
7368: LD_INT 0
7370: ST_TO_ADDR
// sExp := false ;
7371: LD_ADDR_EXP 40
7375: PUSH
7376: LD_INT 0
7378: ST_TO_ADDR
// sDepot := false ;
7379: LD_ADDR_EXP 41
7383: PUSH
7384: LD_INT 0
7386: ST_TO_ADDR
// sFlag := false ;
7387: LD_ADDR_EXP 42
7391: PUSH
7392: LD_INT 0
7394: ST_TO_ADDR
// sKamikadze := false ;
7395: LD_ADDR_EXP 50
7399: PUSH
7400: LD_INT 0
7402: ST_TO_ADDR
// sTroll := false ;
7403: LD_ADDR_EXP 51
7407: PUSH
7408: LD_INT 0
7410: ST_TO_ADDR
// sSlow := false ;
7411: LD_ADDR_EXP 52
7415: PUSH
7416: LD_INT 0
7418: ST_TO_ADDR
// sLack := false ;
7419: LD_ADDR_EXP 53
7423: PUSH
7424: LD_INT 0
7426: ST_TO_ADDR
// sTank := false ;
7427: LD_ADDR_EXP 55
7431: PUSH
7432: LD_INT 0
7434: ST_TO_ADDR
// sRemote := false ;
7435: LD_ADDR_EXP 56
7439: PUSH
7440: LD_INT 0
7442: ST_TO_ADDR
// sPowell := false ;
7443: LD_ADDR_EXP 57
7447: PUSH
7448: LD_INT 0
7450: ST_TO_ADDR
// sTeleport := false ;
7451: LD_ADDR_EXP 60
7455: PUSH
7456: LD_INT 0
7458: ST_TO_ADDR
// sOilTower := false ;
7459: LD_ADDR_EXP 62
7463: PUSH
7464: LD_INT 0
7466: ST_TO_ADDR
// sShovel := false ;
7467: LD_ADDR_EXP 63
7471: PUSH
7472: LD_INT 0
7474: ST_TO_ADDR
// sSheik := false ;
7475: LD_ADDR_EXP 64
7479: PUSH
7480: LD_INT 0
7482: ST_TO_ADDR
// sEarthquake := false ;
7483: LD_ADDR_EXP 66
7487: PUSH
7488: LD_INT 0
7490: ST_TO_ADDR
// sAI := false ;
7491: LD_ADDR_EXP 67
7495: PUSH
7496: LD_INT 0
7498: ST_TO_ADDR
// sCargo := false ;
7499: LD_ADDR_EXP 70
7503: PUSH
7504: LD_INT 0
7506: ST_TO_ADDR
// sDLaser := false ;
7507: LD_ADDR_EXP 71
7511: PUSH
7512: LD_INT 0
7514: ST_TO_ADDR
// sExchange := false ;
7515: LD_ADDR_EXP 72
7519: PUSH
7520: LD_INT 0
7522: ST_TO_ADDR
// sFac := false ;
7523: LD_ADDR_EXP 73
7527: PUSH
7528: LD_INT 0
7530: ST_TO_ADDR
// sPower := false ;
7531: LD_ADDR_EXP 74
7535: PUSH
7536: LD_INT 0
7538: ST_TO_ADDR
// sRandom := false ;
7539: LD_ADDR_EXP 75
7543: PUSH
7544: LD_INT 0
7546: ST_TO_ADDR
// sShield := false ;
7547: LD_ADDR_EXP 76
7551: PUSH
7552: LD_INT 0
7554: ST_TO_ADDR
// sTime := false ;
7555: LD_ADDR_EXP 77
7559: PUSH
7560: LD_INT 0
7562: ST_TO_ADDR
// sTools := false ;
7563: LD_ADDR_EXP 78
7567: PUSH
7568: LD_INT 0
7570: ST_TO_ADDR
// sSold := false ;
7571: LD_ADDR_EXP 43
7575: PUSH
7576: LD_INT 0
7578: ST_TO_ADDR
// sDiff := false ;
7579: LD_ADDR_EXP 44
7583: PUSH
7584: LD_INT 0
7586: ST_TO_ADDR
// sFog := false ;
7587: LD_ADDR_EXP 47
7591: PUSH
7592: LD_INT 0
7594: ST_TO_ADDR
// sReset := false ;
7595: LD_ADDR_EXP 48
7599: PUSH
7600: LD_INT 0
7602: ST_TO_ADDR
// sSun := false ;
7603: LD_ADDR_EXP 49
7607: PUSH
7608: LD_INT 0
7610: ST_TO_ADDR
// sTiger := false ;
7611: LD_ADDR_EXP 45
7615: PUSH
7616: LD_INT 0
7618: ST_TO_ADDR
// sBomb := false ;
7619: LD_ADDR_EXP 46
7623: PUSH
7624: LD_INT 0
7626: ST_TO_ADDR
// sWound := false ;
7627: LD_ADDR_EXP 54
7631: PUSH
7632: LD_INT 0
7634: ST_TO_ADDR
// sBetray := false ;
7635: LD_ADDR_EXP 58
7639: PUSH
7640: LD_INT 0
7642: ST_TO_ADDR
// sContamin := false ;
7643: LD_ADDR_EXP 59
7647: PUSH
7648: LD_INT 0
7650: ST_TO_ADDR
// sOil := false ;
7651: LD_ADDR_EXP 61
7655: PUSH
7656: LD_INT 0
7658: ST_TO_ADDR
// sStu := false ;
7659: LD_ADDR_EXP 65
7663: PUSH
7664: LD_INT 0
7666: ST_TO_ADDR
// sBazooka := false ;
7667: LD_ADDR_EXP 68
7671: PUSH
7672: LD_INT 0
7674: ST_TO_ADDR
// sMortar := false ;
7675: LD_ADDR_EXP 69
7679: PUSH
7680: LD_INT 0
7682: ST_TO_ADDR
// sRanger := false ;
7683: LD_ADDR_EXP 79
7687: PUSH
7688: LD_INT 0
7690: ST_TO_ADDR
// sComputer := false ;
7691: LD_ADDR_EXP 80
7695: PUSH
7696: LD_INT 0
7698: ST_TO_ADDR
// s30 := false ;
7699: LD_ADDR_EXP 81
7703: PUSH
7704: LD_INT 0
7706: ST_TO_ADDR
// s60 := false ;
7707: LD_ADDR_EXP 82
7711: PUSH
7712: LD_INT 0
7714: ST_TO_ADDR
// end ;
7715: LD_VAR 0 1
7719: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
7720: LD_INT 0
7722: PPUSH
7723: PPUSH
7724: PPUSH
7725: PPUSH
7726: PPUSH
7727: PPUSH
7728: PPUSH
// result := [ ] ;
7729: LD_ADDR_VAR 0 2
7733: PUSH
7734: EMPTY
7735: ST_TO_ADDR
// if campaign_id = 1 then
7736: LD_OWVAR 69
7740: PUSH
7741: LD_INT 1
7743: EQUAL
7744: IFFALSE 10910
// begin case mission_number of 1 :
7746: LD_OWVAR 70
7750: PUSH
7751: LD_INT 1
7753: DOUBLE
7754: EQUAL
7755: IFTRUE 7759
7757: GO 7835
7759: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
7760: LD_ADDR_VAR 0 2
7764: PUSH
7765: LD_INT 2
7767: PUSH
7768: LD_INT 4
7770: PUSH
7771: LD_INT 11
7773: PUSH
7774: LD_INT 12
7776: PUSH
7777: LD_INT 15
7779: PUSH
7780: LD_INT 16
7782: PUSH
7783: LD_INT 22
7785: PUSH
7786: LD_INT 23
7788: PUSH
7789: LD_INT 26
7791: PUSH
7792: EMPTY
7793: LIST
7794: LIST
7795: LIST
7796: LIST
7797: LIST
7798: LIST
7799: LIST
7800: LIST
7801: LIST
7802: PUSH
7803: LD_INT 101
7805: PUSH
7806: LD_INT 102
7808: PUSH
7809: LD_INT 106
7811: PUSH
7812: LD_INT 116
7814: PUSH
7815: LD_INT 117
7817: PUSH
7818: LD_INT 118
7820: PUSH
7821: EMPTY
7822: LIST
7823: LIST
7824: LIST
7825: LIST
7826: LIST
7827: LIST
7828: PUSH
7829: EMPTY
7830: LIST
7831: LIST
7832: ST_TO_ADDR
7833: GO 10908
7835: LD_INT 2
7837: DOUBLE
7838: EQUAL
7839: IFTRUE 7843
7841: GO 7927
7843: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
7844: LD_ADDR_VAR 0 2
7848: PUSH
7849: LD_INT 2
7851: PUSH
7852: LD_INT 4
7854: PUSH
7855: LD_INT 11
7857: PUSH
7858: LD_INT 12
7860: PUSH
7861: LD_INT 15
7863: PUSH
7864: LD_INT 16
7866: PUSH
7867: LD_INT 22
7869: PUSH
7870: LD_INT 23
7872: PUSH
7873: LD_INT 26
7875: PUSH
7876: EMPTY
7877: LIST
7878: LIST
7879: LIST
7880: LIST
7881: LIST
7882: LIST
7883: LIST
7884: LIST
7885: LIST
7886: PUSH
7887: LD_INT 101
7889: PUSH
7890: LD_INT 102
7892: PUSH
7893: LD_INT 105
7895: PUSH
7896: LD_INT 106
7898: PUSH
7899: LD_INT 108
7901: PUSH
7902: LD_INT 116
7904: PUSH
7905: LD_INT 117
7907: PUSH
7908: LD_INT 118
7910: PUSH
7911: EMPTY
7912: LIST
7913: LIST
7914: LIST
7915: LIST
7916: LIST
7917: LIST
7918: LIST
7919: LIST
7920: PUSH
7921: EMPTY
7922: LIST
7923: LIST
7924: ST_TO_ADDR
7925: GO 10908
7927: LD_INT 3
7929: DOUBLE
7930: EQUAL
7931: IFTRUE 7935
7933: GO 8023
7935: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
7936: LD_ADDR_VAR 0 2
7940: PUSH
7941: LD_INT 2
7943: PUSH
7944: LD_INT 4
7946: PUSH
7947: LD_INT 5
7949: PUSH
7950: LD_INT 11
7952: PUSH
7953: LD_INT 12
7955: PUSH
7956: LD_INT 15
7958: PUSH
7959: LD_INT 16
7961: PUSH
7962: LD_INT 22
7964: PUSH
7965: LD_INT 26
7967: PUSH
7968: LD_INT 36
7970: PUSH
7971: EMPTY
7972: LIST
7973: LIST
7974: LIST
7975: LIST
7976: LIST
7977: LIST
7978: LIST
7979: LIST
7980: LIST
7981: LIST
7982: PUSH
7983: LD_INT 101
7985: PUSH
7986: LD_INT 102
7988: PUSH
7989: LD_INT 105
7991: PUSH
7992: LD_INT 106
7994: PUSH
7995: LD_INT 108
7997: PUSH
7998: LD_INT 116
8000: PUSH
8001: LD_INT 117
8003: PUSH
8004: LD_INT 118
8006: PUSH
8007: EMPTY
8008: LIST
8009: LIST
8010: LIST
8011: LIST
8012: LIST
8013: LIST
8014: LIST
8015: LIST
8016: PUSH
8017: EMPTY
8018: LIST
8019: LIST
8020: ST_TO_ADDR
8021: GO 10908
8023: LD_INT 4
8025: DOUBLE
8026: EQUAL
8027: IFTRUE 8031
8029: GO 8127
8031: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
8032: LD_ADDR_VAR 0 2
8036: PUSH
8037: LD_INT 2
8039: PUSH
8040: LD_INT 4
8042: PUSH
8043: LD_INT 5
8045: PUSH
8046: LD_INT 8
8048: PUSH
8049: LD_INT 11
8051: PUSH
8052: LD_INT 12
8054: PUSH
8055: LD_INT 15
8057: PUSH
8058: LD_INT 16
8060: PUSH
8061: LD_INT 22
8063: PUSH
8064: LD_INT 23
8066: PUSH
8067: LD_INT 26
8069: PUSH
8070: LD_INT 36
8072: PUSH
8073: EMPTY
8074: LIST
8075: LIST
8076: LIST
8077: LIST
8078: LIST
8079: LIST
8080: LIST
8081: LIST
8082: LIST
8083: LIST
8084: LIST
8085: LIST
8086: PUSH
8087: LD_INT 101
8089: PUSH
8090: LD_INT 102
8092: PUSH
8093: LD_INT 105
8095: PUSH
8096: LD_INT 106
8098: PUSH
8099: LD_INT 108
8101: PUSH
8102: LD_INT 116
8104: PUSH
8105: LD_INT 117
8107: PUSH
8108: LD_INT 118
8110: PUSH
8111: EMPTY
8112: LIST
8113: LIST
8114: LIST
8115: LIST
8116: LIST
8117: LIST
8118: LIST
8119: LIST
8120: PUSH
8121: EMPTY
8122: LIST
8123: LIST
8124: ST_TO_ADDR
8125: GO 10908
8127: LD_INT 5
8129: DOUBLE
8130: EQUAL
8131: IFTRUE 8135
8133: GO 8247
8135: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
8136: LD_ADDR_VAR 0 2
8140: PUSH
8141: LD_INT 2
8143: PUSH
8144: LD_INT 4
8146: PUSH
8147: LD_INT 5
8149: PUSH
8150: LD_INT 6
8152: PUSH
8153: LD_INT 8
8155: PUSH
8156: LD_INT 11
8158: PUSH
8159: LD_INT 12
8161: PUSH
8162: LD_INT 15
8164: PUSH
8165: LD_INT 16
8167: PUSH
8168: LD_INT 22
8170: PUSH
8171: LD_INT 23
8173: PUSH
8174: LD_INT 25
8176: PUSH
8177: LD_INT 26
8179: PUSH
8180: LD_INT 36
8182: PUSH
8183: EMPTY
8184: LIST
8185: LIST
8186: LIST
8187: LIST
8188: LIST
8189: LIST
8190: LIST
8191: LIST
8192: LIST
8193: LIST
8194: LIST
8195: LIST
8196: LIST
8197: LIST
8198: PUSH
8199: LD_INT 101
8201: PUSH
8202: LD_INT 102
8204: PUSH
8205: LD_INT 105
8207: PUSH
8208: LD_INT 106
8210: PUSH
8211: LD_INT 108
8213: PUSH
8214: LD_INT 109
8216: PUSH
8217: LD_INT 112
8219: PUSH
8220: LD_INT 116
8222: PUSH
8223: LD_INT 117
8225: PUSH
8226: LD_INT 118
8228: PUSH
8229: EMPTY
8230: LIST
8231: LIST
8232: LIST
8233: LIST
8234: LIST
8235: LIST
8236: LIST
8237: LIST
8238: LIST
8239: LIST
8240: PUSH
8241: EMPTY
8242: LIST
8243: LIST
8244: ST_TO_ADDR
8245: GO 10908
8247: LD_INT 6
8249: DOUBLE
8250: EQUAL
8251: IFTRUE 8255
8253: GO 8387
8255: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
8256: LD_ADDR_VAR 0 2
8260: PUSH
8261: LD_INT 2
8263: PUSH
8264: LD_INT 4
8266: PUSH
8267: LD_INT 5
8269: PUSH
8270: LD_INT 6
8272: PUSH
8273: LD_INT 8
8275: PUSH
8276: LD_INT 11
8278: PUSH
8279: LD_INT 12
8281: PUSH
8282: LD_INT 15
8284: PUSH
8285: LD_INT 16
8287: PUSH
8288: LD_INT 20
8290: PUSH
8291: LD_INT 21
8293: PUSH
8294: LD_INT 22
8296: PUSH
8297: LD_INT 23
8299: PUSH
8300: LD_INT 25
8302: PUSH
8303: LD_INT 26
8305: PUSH
8306: LD_INT 30
8308: PUSH
8309: LD_INT 31
8311: PUSH
8312: LD_INT 32
8314: PUSH
8315: LD_INT 36
8317: PUSH
8318: EMPTY
8319: LIST
8320: LIST
8321: LIST
8322: LIST
8323: LIST
8324: LIST
8325: LIST
8326: LIST
8327: LIST
8328: LIST
8329: LIST
8330: LIST
8331: LIST
8332: LIST
8333: LIST
8334: LIST
8335: LIST
8336: LIST
8337: LIST
8338: PUSH
8339: LD_INT 101
8341: PUSH
8342: LD_INT 102
8344: PUSH
8345: LD_INT 105
8347: PUSH
8348: LD_INT 106
8350: PUSH
8351: LD_INT 108
8353: PUSH
8354: LD_INT 109
8356: PUSH
8357: LD_INT 112
8359: PUSH
8360: LD_INT 116
8362: PUSH
8363: LD_INT 117
8365: PUSH
8366: LD_INT 118
8368: PUSH
8369: EMPTY
8370: LIST
8371: LIST
8372: LIST
8373: LIST
8374: LIST
8375: LIST
8376: LIST
8377: LIST
8378: LIST
8379: LIST
8380: PUSH
8381: EMPTY
8382: LIST
8383: LIST
8384: ST_TO_ADDR
8385: GO 10908
8387: LD_INT 7
8389: DOUBLE
8390: EQUAL
8391: IFTRUE 8395
8393: GO 8507
8395: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
8396: LD_ADDR_VAR 0 2
8400: PUSH
8401: LD_INT 2
8403: PUSH
8404: LD_INT 4
8406: PUSH
8407: LD_INT 5
8409: PUSH
8410: LD_INT 7
8412: PUSH
8413: LD_INT 11
8415: PUSH
8416: LD_INT 12
8418: PUSH
8419: LD_INT 15
8421: PUSH
8422: LD_INT 16
8424: PUSH
8425: LD_INT 20
8427: PUSH
8428: LD_INT 21
8430: PUSH
8431: LD_INT 22
8433: PUSH
8434: LD_INT 23
8436: PUSH
8437: LD_INT 25
8439: PUSH
8440: LD_INT 26
8442: PUSH
8443: EMPTY
8444: LIST
8445: LIST
8446: LIST
8447: LIST
8448: LIST
8449: LIST
8450: LIST
8451: LIST
8452: LIST
8453: LIST
8454: LIST
8455: LIST
8456: LIST
8457: LIST
8458: PUSH
8459: LD_INT 101
8461: PUSH
8462: LD_INT 102
8464: PUSH
8465: LD_INT 103
8467: PUSH
8468: LD_INT 105
8470: PUSH
8471: LD_INT 106
8473: PUSH
8474: LD_INT 108
8476: PUSH
8477: LD_INT 112
8479: PUSH
8480: LD_INT 116
8482: PUSH
8483: LD_INT 117
8485: PUSH
8486: LD_INT 118
8488: PUSH
8489: EMPTY
8490: LIST
8491: LIST
8492: LIST
8493: LIST
8494: LIST
8495: LIST
8496: LIST
8497: LIST
8498: LIST
8499: LIST
8500: PUSH
8501: EMPTY
8502: LIST
8503: LIST
8504: ST_TO_ADDR
8505: GO 10908
8507: LD_INT 8
8509: DOUBLE
8510: EQUAL
8511: IFTRUE 8515
8513: GO 8655
8515: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
8516: LD_ADDR_VAR 0 2
8520: PUSH
8521: LD_INT 2
8523: PUSH
8524: LD_INT 4
8526: PUSH
8527: LD_INT 5
8529: PUSH
8530: LD_INT 6
8532: PUSH
8533: LD_INT 7
8535: PUSH
8536: LD_INT 8
8538: PUSH
8539: LD_INT 11
8541: PUSH
8542: LD_INT 12
8544: PUSH
8545: LD_INT 15
8547: PUSH
8548: LD_INT 16
8550: PUSH
8551: LD_INT 20
8553: PUSH
8554: LD_INT 21
8556: PUSH
8557: LD_INT 22
8559: PUSH
8560: LD_INT 23
8562: PUSH
8563: LD_INT 25
8565: PUSH
8566: LD_INT 26
8568: PUSH
8569: LD_INT 30
8571: PUSH
8572: LD_INT 31
8574: PUSH
8575: LD_INT 32
8577: PUSH
8578: LD_INT 36
8580: PUSH
8581: EMPTY
8582: LIST
8583: LIST
8584: LIST
8585: LIST
8586: LIST
8587: LIST
8588: LIST
8589: LIST
8590: LIST
8591: LIST
8592: LIST
8593: LIST
8594: LIST
8595: LIST
8596: LIST
8597: LIST
8598: LIST
8599: LIST
8600: LIST
8601: LIST
8602: PUSH
8603: LD_INT 101
8605: PUSH
8606: LD_INT 102
8608: PUSH
8609: LD_INT 103
8611: PUSH
8612: LD_INT 105
8614: PUSH
8615: LD_INT 106
8617: PUSH
8618: LD_INT 108
8620: PUSH
8621: LD_INT 109
8623: PUSH
8624: LD_INT 112
8626: PUSH
8627: LD_INT 116
8629: PUSH
8630: LD_INT 117
8632: PUSH
8633: LD_INT 118
8635: PUSH
8636: EMPTY
8637: LIST
8638: LIST
8639: LIST
8640: LIST
8641: LIST
8642: LIST
8643: LIST
8644: LIST
8645: LIST
8646: LIST
8647: LIST
8648: PUSH
8649: EMPTY
8650: LIST
8651: LIST
8652: ST_TO_ADDR
8653: GO 10908
8655: LD_INT 9
8657: DOUBLE
8658: EQUAL
8659: IFTRUE 8663
8661: GO 8811
8663: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
8664: LD_ADDR_VAR 0 2
8668: PUSH
8669: LD_INT 2
8671: PUSH
8672: LD_INT 4
8674: PUSH
8675: LD_INT 5
8677: PUSH
8678: LD_INT 6
8680: PUSH
8681: LD_INT 7
8683: PUSH
8684: LD_INT 8
8686: PUSH
8687: LD_INT 11
8689: PUSH
8690: LD_INT 12
8692: PUSH
8693: LD_INT 15
8695: PUSH
8696: LD_INT 16
8698: PUSH
8699: LD_INT 20
8701: PUSH
8702: LD_INT 21
8704: PUSH
8705: LD_INT 22
8707: PUSH
8708: LD_INT 23
8710: PUSH
8711: LD_INT 25
8713: PUSH
8714: LD_INT 26
8716: PUSH
8717: LD_INT 28
8719: PUSH
8720: LD_INT 30
8722: PUSH
8723: LD_INT 31
8725: PUSH
8726: LD_INT 32
8728: PUSH
8729: LD_INT 36
8731: PUSH
8732: EMPTY
8733: LIST
8734: LIST
8735: LIST
8736: LIST
8737: LIST
8738: LIST
8739: LIST
8740: LIST
8741: LIST
8742: LIST
8743: LIST
8744: LIST
8745: LIST
8746: LIST
8747: LIST
8748: LIST
8749: LIST
8750: LIST
8751: LIST
8752: LIST
8753: LIST
8754: PUSH
8755: LD_INT 101
8757: PUSH
8758: LD_INT 102
8760: PUSH
8761: LD_INT 103
8763: PUSH
8764: LD_INT 105
8766: PUSH
8767: LD_INT 106
8769: PUSH
8770: LD_INT 108
8772: PUSH
8773: LD_INT 109
8775: PUSH
8776: LD_INT 112
8778: PUSH
8779: LD_INT 114
8781: PUSH
8782: LD_INT 116
8784: PUSH
8785: LD_INT 117
8787: PUSH
8788: LD_INT 118
8790: PUSH
8791: EMPTY
8792: LIST
8793: LIST
8794: LIST
8795: LIST
8796: LIST
8797: LIST
8798: LIST
8799: LIST
8800: LIST
8801: LIST
8802: LIST
8803: LIST
8804: PUSH
8805: EMPTY
8806: LIST
8807: LIST
8808: ST_TO_ADDR
8809: GO 10908
8811: LD_INT 10
8813: DOUBLE
8814: EQUAL
8815: IFTRUE 8819
8817: GO 9015
8819: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
8820: LD_ADDR_VAR 0 2
8824: PUSH
8825: LD_INT 2
8827: PUSH
8828: LD_INT 4
8830: PUSH
8831: LD_INT 5
8833: PUSH
8834: LD_INT 6
8836: PUSH
8837: LD_INT 7
8839: PUSH
8840: LD_INT 8
8842: PUSH
8843: LD_INT 9
8845: PUSH
8846: LD_INT 10
8848: PUSH
8849: LD_INT 11
8851: PUSH
8852: LD_INT 12
8854: PUSH
8855: LD_INT 13
8857: PUSH
8858: LD_INT 14
8860: PUSH
8861: LD_INT 15
8863: PUSH
8864: LD_INT 16
8866: PUSH
8867: LD_INT 17
8869: PUSH
8870: LD_INT 18
8872: PUSH
8873: LD_INT 19
8875: PUSH
8876: LD_INT 20
8878: PUSH
8879: LD_INT 21
8881: PUSH
8882: LD_INT 22
8884: PUSH
8885: LD_INT 23
8887: PUSH
8888: LD_INT 24
8890: PUSH
8891: LD_INT 25
8893: PUSH
8894: LD_INT 26
8896: PUSH
8897: LD_INT 28
8899: PUSH
8900: LD_INT 30
8902: PUSH
8903: LD_INT 31
8905: PUSH
8906: LD_INT 32
8908: PUSH
8909: LD_INT 36
8911: PUSH
8912: EMPTY
8913: LIST
8914: LIST
8915: LIST
8916: LIST
8917: LIST
8918: LIST
8919: LIST
8920: LIST
8921: LIST
8922: LIST
8923: LIST
8924: LIST
8925: LIST
8926: LIST
8927: LIST
8928: LIST
8929: LIST
8930: LIST
8931: LIST
8932: LIST
8933: LIST
8934: LIST
8935: LIST
8936: LIST
8937: LIST
8938: LIST
8939: LIST
8940: LIST
8941: LIST
8942: PUSH
8943: LD_INT 101
8945: PUSH
8946: LD_INT 102
8948: PUSH
8949: LD_INT 103
8951: PUSH
8952: LD_INT 104
8954: PUSH
8955: LD_INT 105
8957: PUSH
8958: LD_INT 106
8960: PUSH
8961: LD_INT 107
8963: PUSH
8964: LD_INT 108
8966: PUSH
8967: LD_INT 109
8969: PUSH
8970: LD_INT 110
8972: PUSH
8973: LD_INT 111
8975: PUSH
8976: LD_INT 112
8978: PUSH
8979: LD_INT 114
8981: PUSH
8982: LD_INT 116
8984: PUSH
8985: LD_INT 117
8987: PUSH
8988: LD_INT 118
8990: PUSH
8991: EMPTY
8992: LIST
8993: LIST
8994: LIST
8995: LIST
8996: LIST
8997: LIST
8998: LIST
8999: LIST
9000: LIST
9001: LIST
9002: LIST
9003: LIST
9004: LIST
9005: LIST
9006: LIST
9007: LIST
9008: PUSH
9009: EMPTY
9010: LIST
9011: LIST
9012: ST_TO_ADDR
9013: GO 10908
9015: LD_INT 11
9017: DOUBLE
9018: EQUAL
9019: IFTRUE 9023
9021: GO 9227
9023: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
9024: LD_ADDR_VAR 0 2
9028: PUSH
9029: LD_INT 2
9031: PUSH
9032: LD_INT 3
9034: PUSH
9035: LD_INT 4
9037: PUSH
9038: LD_INT 5
9040: PUSH
9041: LD_INT 6
9043: PUSH
9044: LD_INT 7
9046: PUSH
9047: LD_INT 8
9049: PUSH
9050: LD_INT 9
9052: PUSH
9053: LD_INT 10
9055: PUSH
9056: LD_INT 11
9058: PUSH
9059: LD_INT 12
9061: PUSH
9062: LD_INT 13
9064: PUSH
9065: LD_INT 14
9067: PUSH
9068: LD_INT 15
9070: PUSH
9071: LD_INT 16
9073: PUSH
9074: LD_INT 17
9076: PUSH
9077: LD_INT 18
9079: PUSH
9080: LD_INT 19
9082: PUSH
9083: LD_INT 20
9085: PUSH
9086: LD_INT 21
9088: PUSH
9089: LD_INT 22
9091: PUSH
9092: LD_INT 23
9094: PUSH
9095: LD_INT 24
9097: PUSH
9098: LD_INT 25
9100: PUSH
9101: LD_INT 26
9103: PUSH
9104: LD_INT 28
9106: PUSH
9107: LD_INT 30
9109: PUSH
9110: LD_INT 31
9112: PUSH
9113: LD_INT 32
9115: PUSH
9116: LD_INT 34
9118: PUSH
9119: LD_INT 36
9121: PUSH
9122: EMPTY
9123: LIST
9124: LIST
9125: LIST
9126: LIST
9127: LIST
9128: LIST
9129: LIST
9130: LIST
9131: LIST
9132: LIST
9133: LIST
9134: LIST
9135: LIST
9136: LIST
9137: LIST
9138: LIST
9139: LIST
9140: LIST
9141: LIST
9142: LIST
9143: LIST
9144: LIST
9145: LIST
9146: LIST
9147: LIST
9148: LIST
9149: LIST
9150: LIST
9151: LIST
9152: LIST
9153: LIST
9154: PUSH
9155: LD_INT 101
9157: PUSH
9158: LD_INT 102
9160: PUSH
9161: LD_INT 103
9163: PUSH
9164: LD_INT 104
9166: PUSH
9167: LD_INT 105
9169: PUSH
9170: LD_INT 106
9172: PUSH
9173: LD_INT 107
9175: PUSH
9176: LD_INT 108
9178: PUSH
9179: LD_INT 109
9181: PUSH
9182: LD_INT 110
9184: PUSH
9185: LD_INT 111
9187: PUSH
9188: LD_INT 112
9190: PUSH
9191: LD_INT 114
9193: PUSH
9194: LD_INT 116
9196: PUSH
9197: LD_INT 117
9199: PUSH
9200: LD_INT 118
9202: PUSH
9203: EMPTY
9204: LIST
9205: LIST
9206: LIST
9207: LIST
9208: LIST
9209: LIST
9210: LIST
9211: LIST
9212: LIST
9213: LIST
9214: LIST
9215: LIST
9216: LIST
9217: LIST
9218: LIST
9219: LIST
9220: PUSH
9221: EMPTY
9222: LIST
9223: LIST
9224: ST_TO_ADDR
9225: GO 10908
9227: LD_INT 12
9229: DOUBLE
9230: EQUAL
9231: IFTRUE 9235
9233: GO 9455
9235: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
9236: LD_ADDR_VAR 0 2
9240: PUSH
9241: LD_INT 1
9243: PUSH
9244: LD_INT 2
9246: PUSH
9247: LD_INT 3
9249: PUSH
9250: LD_INT 4
9252: PUSH
9253: LD_INT 5
9255: PUSH
9256: LD_INT 6
9258: PUSH
9259: LD_INT 7
9261: PUSH
9262: LD_INT 8
9264: PUSH
9265: LD_INT 9
9267: PUSH
9268: LD_INT 10
9270: PUSH
9271: LD_INT 11
9273: PUSH
9274: LD_INT 12
9276: PUSH
9277: LD_INT 13
9279: PUSH
9280: LD_INT 14
9282: PUSH
9283: LD_INT 15
9285: PUSH
9286: LD_INT 16
9288: PUSH
9289: LD_INT 17
9291: PUSH
9292: LD_INT 18
9294: PUSH
9295: LD_INT 19
9297: PUSH
9298: LD_INT 20
9300: PUSH
9301: LD_INT 21
9303: PUSH
9304: LD_INT 22
9306: PUSH
9307: LD_INT 23
9309: PUSH
9310: LD_INT 24
9312: PUSH
9313: LD_INT 25
9315: PUSH
9316: LD_INT 26
9318: PUSH
9319: LD_INT 27
9321: PUSH
9322: LD_INT 28
9324: PUSH
9325: LD_INT 30
9327: PUSH
9328: LD_INT 31
9330: PUSH
9331: LD_INT 32
9333: PUSH
9334: LD_INT 33
9336: PUSH
9337: LD_INT 34
9339: PUSH
9340: LD_INT 36
9342: PUSH
9343: EMPTY
9344: LIST
9345: LIST
9346: LIST
9347: LIST
9348: LIST
9349: LIST
9350: LIST
9351: LIST
9352: LIST
9353: LIST
9354: LIST
9355: LIST
9356: LIST
9357: LIST
9358: LIST
9359: LIST
9360: LIST
9361: LIST
9362: LIST
9363: LIST
9364: LIST
9365: LIST
9366: LIST
9367: LIST
9368: LIST
9369: LIST
9370: LIST
9371: LIST
9372: LIST
9373: LIST
9374: LIST
9375: LIST
9376: LIST
9377: LIST
9378: PUSH
9379: LD_INT 101
9381: PUSH
9382: LD_INT 102
9384: PUSH
9385: LD_INT 103
9387: PUSH
9388: LD_INT 104
9390: PUSH
9391: LD_INT 105
9393: PUSH
9394: LD_INT 106
9396: PUSH
9397: LD_INT 107
9399: PUSH
9400: LD_INT 108
9402: PUSH
9403: LD_INT 109
9405: PUSH
9406: LD_INT 110
9408: PUSH
9409: LD_INT 111
9411: PUSH
9412: LD_INT 112
9414: PUSH
9415: LD_INT 113
9417: PUSH
9418: LD_INT 114
9420: PUSH
9421: LD_INT 116
9423: PUSH
9424: LD_INT 117
9426: PUSH
9427: LD_INT 118
9429: PUSH
9430: EMPTY
9431: LIST
9432: LIST
9433: LIST
9434: LIST
9435: LIST
9436: LIST
9437: LIST
9438: LIST
9439: LIST
9440: LIST
9441: LIST
9442: LIST
9443: LIST
9444: LIST
9445: LIST
9446: LIST
9447: LIST
9448: PUSH
9449: EMPTY
9450: LIST
9451: LIST
9452: ST_TO_ADDR
9453: GO 10908
9455: LD_INT 13
9457: DOUBLE
9458: EQUAL
9459: IFTRUE 9463
9461: GO 9671
9463: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
9464: LD_ADDR_VAR 0 2
9468: PUSH
9469: LD_INT 1
9471: PUSH
9472: LD_INT 2
9474: PUSH
9475: LD_INT 3
9477: PUSH
9478: LD_INT 4
9480: PUSH
9481: LD_INT 5
9483: PUSH
9484: LD_INT 8
9486: PUSH
9487: LD_INT 9
9489: PUSH
9490: LD_INT 10
9492: PUSH
9493: LD_INT 11
9495: PUSH
9496: LD_INT 12
9498: PUSH
9499: LD_INT 14
9501: PUSH
9502: LD_INT 15
9504: PUSH
9505: LD_INT 16
9507: PUSH
9508: LD_INT 17
9510: PUSH
9511: LD_INT 18
9513: PUSH
9514: LD_INT 19
9516: PUSH
9517: LD_INT 20
9519: PUSH
9520: LD_INT 21
9522: PUSH
9523: LD_INT 22
9525: PUSH
9526: LD_INT 23
9528: PUSH
9529: LD_INT 24
9531: PUSH
9532: LD_INT 25
9534: PUSH
9535: LD_INT 26
9537: PUSH
9538: LD_INT 27
9540: PUSH
9541: LD_INT 28
9543: PUSH
9544: LD_INT 30
9546: PUSH
9547: LD_INT 31
9549: PUSH
9550: LD_INT 32
9552: PUSH
9553: LD_INT 33
9555: PUSH
9556: LD_INT 34
9558: PUSH
9559: LD_INT 36
9561: PUSH
9562: EMPTY
9563: LIST
9564: LIST
9565: LIST
9566: LIST
9567: LIST
9568: LIST
9569: LIST
9570: LIST
9571: LIST
9572: LIST
9573: LIST
9574: LIST
9575: LIST
9576: LIST
9577: LIST
9578: LIST
9579: LIST
9580: LIST
9581: LIST
9582: LIST
9583: LIST
9584: LIST
9585: LIST
9586: LIST
9587: LIST
9588: LIST
9589: LIST
9590: LIST
9591: LIST
9592: LIST
9593: LIST
9594: PUSH
9595: LD_INT 101
9597: PUSH
9598: LD_INT 102
9600: PUSH
9601: LD_INT 103
9603: PUSH
9604: LD_INT 104
9606: PUSH
9607: LD_INT 105
9609: PUSH
9610: LD_INT 106
9612: PUSH
9613: LD_INT 107
9615: PUSH
9616: LD_INT 108
9618: PUSH
9619: LD_INT 109
9621: PUSH
9622: LD_INT 110
9624: PUSH
9625: LD_INT 111
9627: PUSH
9628: LD_INT 112
9630: PUSH
9631: LD_INT 113
9633: PUSH
9634: LD_INT 114
9636: PUSH
9637: LD_INT 116
9639: PUSH
9640: LD_INT 117
9642: PUSH
9643: LD_INT 118
9645: PUSH
9646: EMPTY
9647: LIST
9648: LIST
9649: LIST
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: LIST
9655: LIST
9656: LIST
9657: LIST
9658: LIST
9659: LIST
9660: LIST
9661: LIST
9662: LIST
9663: LIST
9664: PUSH
9665: EMPTY
9666: LIST
9667: LIST
9668: ST_TO_ADDR
9669: GO 10908
9671: LD_INT 14
9673: DOUBLE
9674: EQUAL
9675: IFTRUE 9679
9677: GO 9903
9679: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
9680: LD_ADDR_VAR 0 2
9684: PUSH
9685: LD_INT 1
9687: PUSH
9688: LD_INT 2
9690: PUSH
9691: LD_INT 3
9693: PUSH
9694: LD_INT 4
9696: PUSH
9697: LD_INT 5
9699: PUSH
9700: LD_INT 6
9702: PUSH
9703: LD_INT 7
9705: PUSH
9706: LD_INT 8
9708: PUSH
9709: LD_INT 9
9711: PUSH
9712: LD_INT 10
9714: PUSH
9715: LD_INT 11
9717: PUSH
9718: LD_INT 12
9720: PUSH
9721: LD_INT 13
9723: PUSH
9724: LD_INT 14
9726: PUSH
9727: LD_INT 15
9729: PUSH
9730: LD_INT 16
9732: PUSH
9733: LD_INT 17
9735: PUSH
9736: LD_INT 18
9738: PUSH
9739: LD_INT 19
9741: PUSH
9742: LD_INT 20
9744: PUSH
9745: LD_INT 21
9747: PUSH
9748: LD_INT 22
9750: PUSH
9751: LD_INT 23
9753: PUSH
9754: LD_INT 24
9756: PUSH
9757: LD_INT 25
9759: PUSH
9760: LD_INT 26
9762: PUSH
9763: LD_INT 27
9765: PUSH
9766: LD_INT 28
9768: PUSH
9769: LD_INT 29
9771: PUSH
9772: LD_INT 30
9774: PUSH
9775: LD_INT 31
9777: PUSH
9778: LD_INT 32
9780: PUSH
9781: LD_INT 33
9783: PUSH
9784: LD_INT 34
9786: PUSH
9787: LD_INT 36
9789: PUSH
9790: EMPTY
9791: LIST
9792: LIST
9793: LIST
9794: LIST
9795: LIST
9796: LIST
9797: LIST
9798: LIST
9799: LIST
9800: LIST
9801: LIST
9802: LIST
9803: LIST
9804: LIST
9805: LIST
9806: LIST
9807: LIST
9808: LIST
9809: LIST
9810: LIST
9811: LIST
9812: LIST
9813: LIST
9814: LIST
9815: LIST
9816: LIST
9817: LIST
9818: LIST
9819: LIST
9820: LIST
9821: LIST
9822: LIST
9823: LIST
9824: LIST
9825: LIST
9826: PUSH
9827: LD_INT 101
9829: PUSH
9830: LD_INT 102
9832: PUSH
9833: LD_INT 103
9835: PUSH
9836: LD_INT 104
9838: PUSH
9839: LD_INT 105
9841: PUSH
9842: LD_INT 106
9844: PUSH
9845: LD_INT 107
9847: PUSH
9848: LD_INT 108
9850: PUSH
9851: LD_INT 109
9853: PUSH
9854: LD_INT 110
9856: PUSH
9857: LD_INT 111
9859: PUSH
9860: LD_INT 112
9862: PUSH
9863: LD_INT 113
9865: PUSH
9866: LD_INT 114
9868: PUSH
9869: LD_INT 116
9871: PUSH
9872: LD_INT 117
9874: PUSH
9875: LD_INT 118
9877: PUSH
9878: EMPTY
9879: LIST
9880: LIST
9881: LIST
9882: LIST
9883: LIST
9884: LIST
9885: LIST
9886: LIST
9887: LIST
9888: LIST
9889: LIST
9890: LIST
9891: LIST
9892: LIST
9893: LIST
9894: LIST
9895: LIST
9896: PUSH
9897: EMPTY
9898: LIST
9899: LIST
9900: ST_TO_ADDR
9901: GO 10908
9903: LD_INT 15
9905: DOUBLE
9906: EQUAL
9907: IFTRUE 9911
9909: GO 10135
9911: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
9912: LD_ADDR_VAR 0 2
9916: PUSH
9917: LD_INT 1
9919: PUSH
9920: LD_INT 2
9922: PUSH
9923: LD_INT 3
9925: PUSH
9926: LD_INT 4
9928: PUSH
9929: LD_INT 5
9931: PUSH
9932: LD_INT 6
9934: PUSH
9935: LD_INT 7
9937: PUSH
9938: LD_INT 8
9940: PUSH
9941: LD_INT 9
9943: PUSH
9944: LD_INT 10
9946: PUSH
9947: LD_INT 11
9949: PUSH
9950: LD_INT 12
9952: PUSH
9953: LD_INT 13
9955: PUSH
9956: LD_INT 14
9958: PUSH
9959: LD_INT 15
9961: PUSH
9962: LD_INT 16
9964: PUSH
9965: LD_INT 17
9967: PUSH
9968: LD_INT 18
9970: PUSH
9971: LD_INT 19
9973: PUSH
9974: LD_INT 20
9976: PUSH
9977: LD_INT 21
9979: PUSH
9980: LD_INT 22
9982: PUSH
9983: LD_INT 23
9985: PUSH
9986: LD_INT 24
9988: PUSH
9989: LD_INT 25
9991: PUSH
9992: LD_INT 26
9994: PUSH
9995: LD_INT 27
9997: PUSH
9998: LD_INT 28
10000: PUSH
10001: LD_INT 29
10003: PUSH
10004: LD_INT 30
10006: PUSH
10007: LD_INT 31
10009: PUSH
10010: LD_INT 32
10012: PUSH
10013: LD_INT 33
10015: PUSH
10016: LD_INT 34
10018: PUSH
10019: LD_INT 36
10021: PUSH
10022: EMPTY
10023: LIST
10024: LIST
10025: LIST
10026: LIST
10027: LIST
10028: LIST
10029: LIST
10030: LIST
10031: LIST
10032: LIST
10033: LIST
10034: LIST
10035: LIST
10036: LIST
10037: LIST
10038: LIST
10039: LIST
10040: LIST
10041: LIST
10042: LIST
10043: LIST
10044: LIST
10045: LIST
10046: LIST
10047: LIST
10048: LIST
10049: LIST
10050: LIST
10051: LIST
10052: LIST
10053: LIST
10054: LIST
10055: LIST
10056: LIST
10057: LIST
10058: PUSH
10059: LD_INT 101
10061: PUSH
10062: LD_INT 102
10064: PUSH
10065: LD_INT 103
10067: PUSH
10068: LD_INT 104
10070: PUSH
10071: LD_INT 105
10073: PUSH
10074: LD_INT 106
10076: PUSH
10077: LD_INT 107
10079: PUSH
10080: LD_INT 108
10082: PUSH
10083: LD_INT 109
10085: PUSH
10086: LD_INT 110
10088: PUSH
10089: LD_INT 111
10091: PUSH
10092: LD_INT 112
10094: PUSH
10095: LD_INT 113
10097: PUSH
10098: LD_INT 114
10100: PUSH
10101: LD_INT 116
10103: PUSH
10104: LD_INT 117
10106: PUSH
10107: LD_INT 118
10109: PUSH
10110: EMPTY
10111: LIST
10112: LIST
10113: LIST
10114: LIST
10115: LIST
10116: LIST
10117: LIST
10118: LIST
10119: LIST
10120: LIST
10121: LIST
10122: LIST
10123: LIST
10124: LIST
10125: LIST
10126: LIST
10127: LIST
10128: PUSH
10129: EMPTY
10130: LIST
10131: LIST
10132: ST_TO_ADDR
10133: GO 10908
10135: LD_INT 16
10137: DOUBLE
10138: EQUAL
10139: IFTRUE 10143
10141: GO 10279
10143: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
10144: LD_ADDR_VAR 0 2
10148: PUSH
10149: LD_INT 2
10151: PUSH
10152: LD_INT 4
10154: PUSH
10155: LD_INT 5
10157: PUSH
10158: LD_INT 7
10160: PUSH
10161: LD_INT 11
10163: PUSH
10164: LD_INT 12
10166: PUSH
10167: LD_INT 15
10169: PUSH
10170: LD_INT 16
10172: PUSH
10173: LD_INT 20
10175: PUSH
10176: LD_INT 21
10178: PUSH
10179: LD_INT 22
10181: PUSH
10182: LD_INT 23
10184: PUSH
10185: LD_INT 25
10187: PUSH
10188: LD_INT 26
10190: PUSH
10191: LD_INT 30
10193: PUSH
10194: LD_INT 31
10196: PUSH
10197: LD_INT 32
10199: PUSH
10200: LD_INT 33
10202: PUSH
10203: LD_INT 34
10205: PUSH
10206: EMPTY
10207: LIST
10208: LIST
10209: LIST
10210: LIST
10211: LIST
10212: LIST
10213: LIST
10214: LIST
10215: LIST
10216: LIST
10217: LIST
10218: LIST
10219: LIST
10220: LIST
10221: LIST
10222: LIST
10223: LIST
10224: LIST
10225: LIST
10226: PUSH
10227: LD_INT 101
10229: PUSH
10230: LD_INT 102
10232: PUSH
10233: LD_INT 103
10235: PUSH
10236: LD_INT 106
10238: PUSH
10239: LD_INT 108
10241: PUSH
10242: LD_INT 112
10244: PUSH
10245: LD_INT 113
10247: PUSH
10248: LD_INT 114
10250: PUSH
10251: LD_INT 116
10253: PUSH
10254: LD_INT 117
10256: PUSH
10257: LD_INT 118
10259: PUSH
10260: EMPTY
10261: LIST
10262: LIST
10263: LIST
10264: LIST
10265: LIST
10266: LIST
10267: LIST
10268: LIST
10269: LIST
10270: LIST
10271: LIST
10272: PUSH
10273: EMPTY
10274: LIST
10275: LIST
10276: ST_TO_ADDR
10277: GO 10908
10279: LD_INT 17
10281: DOUBLE
10282: EQUAL
10283: IFTRUE 10287
10285: GO 10511
10287: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
10288: LD_ADDR_VAR 0 2
10292: PUSH
10293: LD_INT 1
10295: PUSH
10296: LD_INT 2
10298: PUSH
10299: LD_INT 3
10301: PUSH
10302: LD_INT 4
10304: PUSH
10305: LD_INT 5
10307: PUSH
10308: LD_INT 6
10310: PUSH
10311: LD_INT 7
10313: PUSH
10314: LD_INT 8
10316: PUSH
10317: LD_INT 9
10319: PUSH
10320: LD_INT 10
10322: PUSH
10323: LD_INT 11
10325: PUSH
10326: LD_INT 12
10328: PUSH
10329: LD_INT 13
10331: PUSH
10332: LD_INT 14
10334: PUSH
10335: LD_INT 15
10337: PUSH
10338: LD_INT 16
10340: PUSH
10341: LD_INT 17
10343: PUSH
10344: LD_INT 18
10346: PUSH
10347: LD_INT 19
10349: PUSH
10350: LD_INT 20
10352: PUSH
10353: LD_INT 21
10355: PUSH
10356: LD_INT 22
10358: PUSH
10359: LD_INT 23
10361: PUSH
10362: LD_INT 24
10364: PUSH
10365: LD_INT 25
10367: PUSH
10368: LD_INT 26
10370: PUSH
10371: LD_INT 27
10373: PUSH
10374: LD_INT 28
10376: PUSH
10377: LD_INT 29
10379: PUSH
10380: LD_INT 30
10382: PUSH
10383: LD_INT 31
10385: PUSH
10386: LD_INT 32
10388: PUSH
10389: LD_INT 33
10391: PUSH
10392: LD_INT 34
10394: PUSH
10395: LD_INT 36
10397: PUSH
10398: EMPTY
10399: LIST
10400: LIST
10401: LIST
10402: LIST
10403: LIST
10404: LIST
10405: LIST
10406: LIST
10407: LIST
10408: LIST
10409: LIST
10410: LIST
10411: LIST
10412: LIST
10413: LIST
10414: LIST
10415: LIST
10416: LIST
10417: LIST
10418: LIST
10419: LIST
10420: LIST
10421: LIST
10422: LIST
10423: LIST
10424: LIST
10425: LIST
10426: LIST
10427: LIST
10428: LIST
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: LIST
10434: PUSH
10435: LD_INT 101
10437: PUSH
10438: LD_INT 102
10440: PUSH
10441: LD_INT 103
10443: PUSH
10444: LD_INT 104
10446: PUSH
10447: LD_INT 105
10449: PUSH
10450: LD_INT 106
10452: PUSH
10453: LD_INT 107
10455: PUSH
10456: LD_INT 108
10458: PUSH
10459: LD_INT 109
10461: PUSH
10462: LD_INT 110
10464: PUSH
10465: LD_INT 111
10467: PUSH
10468: LD_INT 112
10470: PUSH
10471: LD_INT 113
10473: PUSH
10474: LD_INT 114
10476: PUSH
10477: LD_INT 116
10479: PUSH
10480: LD_INT 117
10482: PUSH
10483: LD_INT 118
10485: PUSH
10486: EMPTY
10487: LIST
10488: LIST
10489: LIST
10490: LIST
10491: LIST
10492: LIST
10493: LIST
10494: LIST
10495: LIST
10496: LIST
10497: LIST
10498: LIST
10499: LIST
10500: LIST
10501: LIST
10502: LIST
10503: LIST
10504: PUSH
10505: EMPTY
10506: LIST
10507: LIST
10508: ST_TO_ADDR
10509: GO 10908
10511: LD_INT 18
10513: DOUBLE
10514: EQUAL
10515: IFTRUE 10519
10517: GO 10667
10519: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
10520: LD_ADDR_VAR 0 2
10524: PUSH
10525: LD_INT 2
10527: PUSH
10528: LD_INT 4
10530: PUSH
10531: LD_INT 5
10533: PUSH
10534: LD_INT 7
10536: PUSH
10537: LD_INT 11
10539: PUSH
10540: LD_INT 12
10542: PUSH
10543: LD_INT 15
10545: PUSH
10546: LD_INT 16
10548: PUSH
10549: LD_INT 20
10551: PUSH
10552: LD_INT 21
10554: PUSH
10555: LD_INT 22
10557: PUSH
10558: LD_INT 23
10560: PUSH
10561: LD_INT 25
10563: PUSH
10564: LD_INT 26
10566: PUSH
10567: LD_INT 30
10569: PUSH
10570: LD_INT 31
10572: PUSH
10573: LD_INT 32
10575: PUSH
10576: LD_INT 33
10578: PUSH
10579: LD_INT 34
10581: PUSH
10582: LD_INT 35
10584: PUSH
10585: LD_INT 36
10587: PUSH
10588: EMPTY
10589: LIST
10590: LIST
10591: LIST
10592: LIST
10593: LIST
10594: LIST
10595: LIST
10596: LIST
10597: LIST
10598: LIST
10599: LIST
10600: LIST
10601: LIST
10602: LIST
10603: LIST
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: LIST
10609: LIST
10610: PUSH
10611: LD_INT 101
10613: PUSH
10614: LD_INT 102
10616: PUSH
10617: LD_INT 103
10619: PUSH
10620: LD_INT 106
10622: PUSH
10623: LD_INT 108
10625: PUSH
10626: LD_INT 112
10628: PUSH
10629: LD_INT 113
10631: PUSH
10632: LD_INT 114
10634: PUSH
10635: LD_INT 115
10637: PUSH
10638: LD_INT 116
10640: PUSH
10641: LD_INT 117
10643: PUSH
10644: LD_INT 118
10646: PUSH
10647: EMPTY
10648: LIST
10649: LIST
10650: LIST
10651: LIST
10652: LIST
10653: LIST
10654: LIST
10655: LIST
10656: LIST
10657: LIST
10658: LIST
10659: LIST
10660: PUSH
10661: EMPTY
10662: LIST
10663: LIST
10664: ST_TO_ADDR
10665: GO 10908
10667: LD_INT 19
10669: DOUBLE
10670: EQUAL
10671: IFTRUE 10675
10673: GO 10907
10675: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
10676: LD_ADDR_VAR 0 2
10680: PUSH
10681: LD_INT 1
10683: PUSH
10684: LD_INT 2
10686: PUSH
10687: LD_INT 3
10689: PUSH
10690: LD_INT 4
10692: PUSH
10693: LD_INT 5
10695: PUSH
10696: LD_INT 6
10698: PUSH
10699: LD_INT 7
10701: PUSH
10702: LD_INT 8
10704: PUSH
10705: LD_INT 9
10707: PUSH
10708: LD_INT 10
10710: PUSH
10711: LD_INT 11
10713: PUSH
10714: LD_INT 12
10716: PUSH
10717: LD_INT 13
10719: PUSH
10720: LD_INT 14
10722: PUSH
10723: LD_INT 15
10725: PUSH
10726: LD_INT 16
10728: PUSH
10729: LD_INT 17
10731: PUSH
10732: LD_INT 18
10734: PUSH
10735: LD_INT 19
10737: PUSH
10738: LD_INT 20
10740: PUSH
10741: LD_INT 21
10743: PUSH
10744: LD_INT 22
10746: PUSH
10747: LD_INT 23
10749: PUSH
10750: LD_INT 24
10752: PUSH
10753: LD_INT 25
10755: PUSH
10756: LD_INT 26
10758: PUSH
10759: LD_INT 27
10761: PUSH
10762: LD_INT 28
10764: PUSH
10765: LD_INT 29
10767: PUSH
10768: LD_INT 30
10770: PUSH
10771: LD_INT 31
10773: PUSH
10774: LD_INT 32
10776: PUSH
10777: LD_INT 33
10779: PUSH
10780: LD_INT 34
10782: PUSH
10783: LD_INT 35
10785: PUSH
10786: LD_INT 36
10788: PUSH
10789: EMPTY
10790: LIST
10791: LIST
10792: LIST
10793: LIST
10794: LIST
10795: LIST
10796: LIST
10797: LIST
10798: LIST
10799: LIST
10800: LIST
10801: LIST
10802: LIST
10803: LIST
10804: LIST
10805: LIST
10806: LIST
10807: LIST
10808: LIST
10809: LIST
10810: LIST
10811: LIST
10812: LIST
10813: LIST
10814: LIST
10815: LIST
10816: LIST
10817: LIST
10818: LIST
10819: LIST
10820: LIST
10821: LIST
10822: LIST
10823: LIST
10824: LIST
10825: LIST
10826: PUSH
10827: LD_INT 101
10829: PUSH
10830: LD_INT 102
10832: PUSH
10833: LD_INT 103
10835: PUSH
10836: LD_INT 104
10838: PUSH
10839: LD_INT 105
10841: PUSH
10842: LD_INT 106
10844: PUSH
10845: LD_INT 107
10847: PUSH
10848: LD_INT 108
10850: PUSH
10851: LD_INT 109
10853: PUSH
10854: LD_INT 110
10856: PUSH
10857: LD_INT 111
10859: PUSH
10860: LD_INT 112
10862: PUSH
10863: LD_INT 113
10865: PUSH
10866: LD_INT 114
10868: PUSH
10869: LD_INT 115
10871: PUSH
10872: LD_INT 116
10874: PUSH
10875: LD_INT 117
10877: PUSH
10878: LD_INT 118
10880: PUSH
10881: EMPTY
10882: LIST
10883: LIST
10884: LIST
10885: LIST
10886: LIST
10887: LIST
10888: LIST
10889: LIST
10890: LIST
10891: LIST
10892: LIST
10893: LIST
10894: LIST
10895: LIST
10896: LIST
10897: LIST
10898: LIST
10899: LIST
10900: PUSH
10901: EMPTY
10902: LIST
10903: LIST
10904: ST_TO_ADDR
10905: GO 10908
10907: POP
// end else
10908: GO 11139
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
10910: LD_ADDR_VAR 0 2
10914: PUSH
10915: LD_INT 1
10917: PUSH
10918: LD_INT 2
10920: PUSH
10921: LD_INT 3
10923: PUSH
10924: LD_INT 4
10926: PUSH
10927: LD_INT 5
10929: PUSH
10930: LD_INT 6
10932: PUSH
10933: LD_INT 7
10935: PUSH
10936: LD_INT 8
10938: PUSH
10939: LD_INT 9
10941: PUSH
10942: LD_INT 10
10944: PUSH
10945: LD_INT 11
10947: PUSH
10948: LD_INT 12
10950: PUSH
10951: LD_INT 13
10953: PUSH
10954: LD_INT 14
10956: PUSH
10957: LD_INT 15
10959: PUSH
10960: LD_INT 16
10962: PUSH
10963: LD_INT 17
10965: PUSH
10966: LD_INT 18
10968: PUSH
10969: LD_INT 19
10971: PUSH
10972: LD_INT 20
10974: PUSH
10975: LD_INT 21
10977: PUSH
10978: LD_INT 22
10980: PUSH
10981: LD_INT 23
10983: PUSH
10984: LD_INT 24
10986: PUSH
10987: LD_INT 25
10989: PUSH
10990: LD_INT 26
10992: PUSH
10993: LD_INT 27
10995: PUSH
10996: LD_INT 28
10998: PUSH
10999: LD_INT 29
11001: PUSH
11002: LD_INT 30
11004: PUSH
11005: LD_INT 31
11007: PUSH
11008: LD_INT 32
11010: PUSH
11011: LD_INT 33
11013: PUSH
11014: LD_INT 34
11016: PUSH
11017: LD_INT 35
11019: PUSH
11020: LD_INT 36
11022: PUSH
11023: EMPTY
11024: LIST
11025: LIST
11026: LIST
11027: LIST
11028: LIST
11029: LIST
11030: LIST
11031: LIST
11032: LIST
11033: LIST
11034: LIST
11035: LIST
11036: LIST
11037: LIST
11038: LIST
11039: LIST
11040: LIST
11041: LIST
11042: LIST
11043: LIST
11044: LIST
11045: LIST
11046: LIST
11047: LIST
11048: LIST
11049: LIST
11050: LIST
11051: LIST
11052: LIST
11053: LIST
11054: LIST
11055: LIST
11056: LIST
11057: LIST
11058: LIST
11059: LIST
11060: PUSH
11061: LD_INT 101
11063: PUSH
11064: LD_INT 102
11066: PUSH
11067: LD_INT 103
11069: PUSH
11070: LD_INT 104
11072: PUSH
11073: LD_INT 105
11075: PUSH
11076: LD_INT 106
11078: PUSH
11079: LD_INT 107
11081: PUSH
11082: LD_INT 108
11084: PUSH
11085: LD_INT 109
11087: PUSH
11088: LD_INT 110
11090: PUSH
11091: LD_INT 111
11093: PUSH
11094: LD_INT 112
11096: PUSH
11097: LD_INT 113
11099: PUSH
11100: LD_INT 114
11102: PUSH
11103: LD_INT 115
11105: PUSH
11106: LD_INT 116
11108: PUSH
11109: LD_INT 117
11111: PUSH
11112: LD_INT 118
11114: PUSH
11115: EMPTY
11116: LIST
11117: LIST
11118: LIST
11119: LIST
11120: LIST
11121: LIST
11122: LIST
11123: LIST
11124: LIST
11125: LIST
11126: LIST
11127: LIST
11128: LIST
11129: LIST
11130: LIST
11131: LIST
11132: LIST
11133: LIST
11134: PUSH
11135: EMPTY
11136: LIST
11137: LIST
11138: ST_TO_ADDR
// if result then
11139: LD_VAR 0 2
11143: IFFALSE 11929
// begin normal :=  ;
11145: LD_ADDR_VAR 0 5
11149: PUSH
11150: LD_STRING 
11152: ST_TO_ADDR
// hardcore :=  ;
11153: LD_ADDR_VAR 0 6
11157: PUSH
11158: LD_STRING 
11160: ST_TO_ADDR
// active :=  ;
11161: LD_ADDR_VAR 0 7
11165: PUSH
11166: LD_STRING 
11168: ST_TO_ADDR
// for i = 1 to normalCounter do
11169: LD_ADDR_VAR 0 8
11173: PUSH
11174: DOUBLE
11175: LD_INT 1
11177: DEC
11178: ST_TO_ADDR
11179: LD_EXP 27
11183: PUSH
11184: FOR_TO
11185: IFFALSE 11286
// begin tmp := 0 ;
11187: LD_ADDR_VAR 0 3
11191: PUSH
11192: LD_STRING 0
11194: ST_TO_ADDR
// if result [ 1 ] then
11195: LD_VAR 0 2
11199: PUSH
11200: LD_INT 1
11202: ARRAY
11203: IFFALSE 11268
// if result [ 1 ] [ 1 ] = i then
11205: LD_VAR 0 2
11209: PUSH
11210: LD_INT 1
11212: ARRAY
11213: PUSH
11214: LD_INT 1
11216: ARRAY
11217: PUSH
11218: LD_VAR 0 8
11222: EQUAL
11223: IFFALSE 11268
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
11225: LD_ADDR_VAR 0 2
11229: PUSH
11230: LD_VAR 0 2
11234: PPUSH
11235: LD_INT 1
11237: PPUSH
11238: LD_VAR 0 2
11242: PUSH
11243: LD_INT 1
11245: ARRAY
11246: PPUSH
11247: LD_INT 1
11249: PPUSH
11250: CALL_OW 3
11254: PPUSH
11255: CALL_OW 1
11259: ST_TO_ADDR
// tmp := 1 ;
11260: LD_ADDR_VAR 0 3
11264: PUSH
11265: LD_STRING 1
11267: ST_TO_ADDR
// end ; normal := normal & tmp ;
11268: LD_ADDR_VAR 0 5
11272: PUSH
11273: LD_VAR 0 5
11277: PUSH
11278: LD_VAR 0 3
11282: STR
11283: ST_TO_ADDR
// end ;
11284: GO 11184
11286: POP
11287: POP
// for i = 1 to hardcoreCounter do
11288: LD_ADDR_VAR 0 8
11292: PUSH
11293: DOUBLE
11294: LD_INT 1
11296: DEC
11297: ST_TO_ADDR
11298: LD_EXP 28
11302: PUSH
11303: FOR_TO
11304: IFFALSE 11409
// begin tmp := 0 ;
11306: LD_ADDR_VAR 0 3
11310: PUSH
11311: LD_STRING 0
11313: ST_TO_ADDR
// if result [ 2 ] then
11314: LD_VAR 0 2
11318: PUSH
11319: LD_INT 2
11321: ARRAY
11322: IFFALSE 11391
// if result [ 2 ] [ 1 ] = 100 + i then
11324: LD_VAR 0 2
11328: PUSH
11329: LD_INT 2
11331: ARRAY
11332: PUSH
11333: LD_INT 1
11335: ARRAY
11336: PUSH
11337: LD_INT 100
11339: PUSH
11340: LD_VAR 0 8
11344: PLUS
11345: EQUAL
11346: IFFALSE 11391
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
11348: LD_ADDR_VAR 0 2
11352: PUSH
11353: LD_VAR 0 2
11357: PPUSH
11358: LD_INT 2
11360: PPUSH
11361: LD_VAR 0 2
11365: PUSH
11366: LD_INT 2
11368: ARRAY
11369: PPUSH
11370: LD_INT 1
11372: PPUSH
11373: CALL_OW 3
11377: PPUSH
11378: CALL_OW 1
11382: ST_TO_ADDR
// tmp := 1 ;
11383: LD_ADDR_VAR 0 3
11387: PUSH
11388: LD_STRING 1
11390: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
11391: LD_ADDR_VAR 0 6
11395: PUSH
11396: LD_VAR 0 6
11400: PUSH
11401: LD_VAR 0 3
11405: STR
11406: ST_TO_ADDR
// end ;
11407: GO 11303
11409: POP
11410: POP
// if isGameLoad then
11411: LD_VAR 0 1
11415: IFFALSE 11890
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
11417: LD_ADDR_VAR 0 4
11421: PUSH
11422: LD_EXP 31
11426: PUSH
11427: LD_EXP 30
11431: PUSH
11432: LD_EXP 32
11436: PUSH
11437: LD_EXP 29
11441: PUSH
11442: LD_EXP 33
11446: PUSH
11447: LD_EXP 34
11451: PUSH
11452: LD_EXP 35
11456: PUSH
11457: LD_EXP 36
11461: PUSH
11462: LD_EXP 37
11466: PUSH
11467: LD_EXP 38
11471: PUSH
11472: LD_EXP 39
11476: PUSH
11477: LD_EXP 40
11481: PUSH
11482: LD_EXP 41
11486: PUSH
11487: LD_EXP 42
11491: PUSH
11492: LD_EXP 50
11496: PUSH
11497: LD_EXP 51
11501: PUSH
11502: LD_EXP 52
11506: PUSH
11507: LD_EXP 53
11511: PUSH
11512: LD_EXP 55
11516: PUSH
11517: LD_EXP 56
11521: PUSH
11522: LD_EXP 57
11526: PUSH
11527: LD_EXP 60
11531: PUSH
11532: LD_EXP 62
11536: PUSH
11537: LD_EXP 63
11541: PUSH
11542: LD_EXP 64
11546: PUSH
11547: LD_EXP 66
11551: PUSH
11552: LD_EXP 67
11556: PUSH
11557: LD_EXP 70
11561: PUSH
11562: LD_EXP 71
11566: PUSH
11567: LD_EXP 72
11571: PUSH
11572: LD_EXP 73
11576: PUSH
11577: LD_EXP 74
11581: PUSH
11582: LD_EXP 75
11586: PUSH
11587: LD_EXP 76
11591: PUSH
11592: LD_EXP 77
11596: PUSH
11597: LD_EXP 78
11601: PUSH
11602: LD_EXP 43
11606: PUSH
11607: LD_EXP 44
11611: PUSH
11612: LD_EXP 47
11616: PUSH
11617: LD_EXP 48
11621: PUSH
11622: LD_EXP 49
11626: PUSH
11627: LD_EXP 45
11631: PUSH
11632: LD_EXP 46
11636: PUSH
11637: LD_EXP 54
11641: PUSH
11642: LD_EXP 58
11646: PUSH
11647: LD_EXP 59
11651: PUSH
11652: LD_EXP 61
11656: PUSH
11657: LD_EXP 65
11661: PUSH
11662: LD_EXP 68
11666: PUSH
11667: LD_EXP 69
11671: PUSH
11672: LD_EXP 79
11676: PUSH
11677: LD_EXP 80
11681: PUSH
11682: LD_EXP 81
11686: PUSH
11687: LD_EXP 82
11691: PUSH
11692: EMPTY
11693: LIST
11694: LIST
11695: LIST
11696: LIST
11697: LIST
11698: LIST
11699: LIST
11700: LIST
11701: LIST
11702: LIST
11703: LIST
11704: LIST
11705: LIST
11706: LIST
11707: LIST
11708: LIST
11709: LIST
11710: LIST
11711: LIST
11712: LIST
11713: LIST
11714: LIST
11715: LIST
11716: LIST
11717: LIST
11718: LIST
11719: LIST
11720: LIST
11721: LIST
11722: LIST
11723: LIST
11724: LIST
11725: LIST
11726: LIST
11727: LIST
11728: LIST
11729: LIST
11730: LIST
11731: LIST
11732: LIST
11733: LIST
11734: LIST
11735: LIST
11736: LIST
11737: LIST
11738: LIST
11739: LIST
11740: LIST
11741: LIST
11742: LIST
11743: LIST
11744: LIST
11745: LIST
11746: LIST
11747: ST_TO_ADDR
// tmp :=  ;
11748: LD_ADDR_VAR 0 3
11752: PUSH
11753: LD_STRING 
11755: ST_TO_ADDR
// for i = 1 to normalCounter do
11756: LD_ADDR_VAR 0 8
11760: PUSH
11761: DOUBLE
11762: LD_INT 1
11764: DEC
11765: ST_TO_ADDR
11766: LD_EXP 27
11770: PUSH
11771: FOR_TO
11772: IFFALSE 11808
// begin if flags [ i ] then
11774: LD_VAR 0 4
11778: PUSH
11779: LD_VAR 0 8
11783: ARRAY
11784: IFFALSE 11806
// tmp := tmp & i & ; ;
11786: LD_ADDR_VAR 0 3
11790: PUSH
11791: LD_VAR 0 3
11795: PUSH
11796: LD_VAR 0 8
11800: STR
11801: PUSH
11802: LD_STRING ;
11804: STR
11805: ST_TO_ADDR
// end ;
11806: GO 11771
11808: POP
11809: POP
// for i = 1 to hardcoreCounter do
11810: LD_ADDR_VAR 0 8
11814: PUSH
11815: DOUBLE
11816: LD_INT 1
11818: DEC
11819: ST_TO_ADDR
11820: LD_EXP 28
11824: PUSH
11825: FOR_TO
11826: IFFALSE 11872
// begin if flags [ normalCounter + i ] then
11828: LD_VAR 0 4
11832: PUSH
11833: LD_EXP 27
11837: PUSH
11838: LD_VAR 0 8
11842: PLUS
11843: ARRAY
11844: IFFALSE 11870
// tmp := tmp & ( 100 + i ) & ; ;
11846: LD_ADDR_VAR 0 3
11850: PUSH
11851: LD_VAR 0 3
11855: PUSH
11856: LD_INT 100
11858: PUSH
11859: LD_VAR 0 8
11863: PLUS
11864: STR
11865: PUSH
11866: LD_STRING ;
11868: STR
11869: ST_TO_ADDR
// end ;
11870: GO 11825
11872: POP
11873: POP
// if tmp then
11874: LD_VAR 0 3
11878: IFFALSE 11890
// active := tmp ;
11880: LD_ADDR_VAR 0 7
11884: PUSH
11885: LD_VAR 0 3
11889: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
11890: LD_STRING getStreamItemsFromMission("
11892: PUSH
11893: LD_VAR 0 5
11897: STR
11898: PUSH
11899: LD_STRING ","
11901: STR
11902: PUSH
11903: LD_VAR 0 6
11907: STR
11908: PUSH
11909: LD_STRING ","
11911: STR
11912: PUSH
11913: LD_VAR 0 7
11917: STR
11918: PUSH
11919: LD_STRING ")
11921: STR
11922: PPUSH
11923: CALL_OW 559
// end else
11927: GO 11936
// ToLua ( getStreamItemsFromMission("","","") ) ;
11929: LD_STRING getStreamItemsFromMission("","","")
11931: PPUSH
11932: CALL_OW 559
// end ;
11936: LD_VAR 0 2
11940: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
11941: LD_EXP 26
11945: PUSH
11946: LD_EXP 31
11950: AND
11951: IFFALSE 12075
11953: GO 11955
11955: DISABLE
11956: LD_INT 0
11958: PPUSH
11959: PPUSH
// begin enable ;
11960: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
11961: LD_ADDR_VAR 0 2
11965: PUSH
11966: LD_INT 22
11968: PUSH
11969: LD_OWVAR 2
11973: PUSH
11974: EMPTY
11975: LIST
11976: LIST
11977: PUSH
11978: LD_INT 2
11980: PUSH
11981: LD_INT 34
11983: PUSH
11984: LD_INT 7
11986: PUSH
11987: EMPTY
11988: LIST
11989: LIST
11990: PUSH
11991: LD_INT 34
11993: PUSH
11994: LD_INT 45
11996: PUSH
11997: EMPTY
11998: LIST
11999: LIST
12000: PUSH
12001: LD_INT 34
12003: PUSH
12004: LD_INT 28
12006: PUSH
12007: EMPTY
12008: LIST
12009: LIST
12010: PUSH
12011: LD_INT 34
12013: PUSH
12014: LD_INT 47
12016: PUSH
12017: EMPTY
12018: LIST
12019: LIST
12020: PUSH
12021: EMPTY
12022: LIST
12023: LIST
12024: LIST
12025: LIST
12026: LIST
12027: PUSH
12028: EMPTY
12029: LIST
12030: LIST
12031: PPUSH
12032: CALL_OW 69
12036: ST_TO_ADDR
// if not tmp then
12037: LD_VAR 0 2
12041: NOT
12042: IFFALSE 12046
// exit ;
12044: GO 12075
// for i in tmp do
12046: LD_ADDR_VAR 0 1
12050: PUSH
12051: LD_VAR 0 2
12055: PUSH
12056: FOR_IN
12057: IFFALSE 12073
// begin SetLives ( i , 0 ) ;
12059: LD_VAR 0 1
12063: PPUSH
12064: LD_INT 0
12066: PPUSH
12067: CALL_OW 234
// end ;
12071: GO 12056
12073: POP
12074: POP
// end ;
12075: PPOPN 2
12077: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
12078: LD_EXP 26
12082: PUSH
12083: LD_EXP 32
12087: AND
12088: IFFALSE 12172
12090: GO 12092
12092: DISABLE
12093: LD_INT 0
12095: PPUSH
12096: PPUSH
// begin enable ;
12097: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
12098: LD_ADDR_VAR 0 2
12102: PUSH
12103: LD_INT 22
12105: PUSH
12106: LD_OWVAR 2
12110: PUSH
12111: EMPTY
12112: LIST
12113: LIST
12114: PUSH
12115: LD_INT 32
12117: PUSH
12118: LD_INT 3
12120: PUSH
12121: EMPTY
12122: LIST
12123: LIST
12124: PUSH
12125: EMPTY
12126: LIST
12127: LIST
12128: PPUSH
12129: CALL_OW 69
12133: ST_TO_ADDR
// if not tmp then
12134: LD_VAR 0 2
12138: NOT
12139: IFFALSE 12143
// exit ;
12141: GO 12172
// for i in tmp do
12143: LD_ADDR_VAR 0 1
12147: PUSH
12148: LD_VAR 0 2
12152: PUSH
12153: FOR_IN
12154: IFFALSE 12170
// begin SetLives ( i , 0 ) ;
12156: LD_VAR 0 1
12160: PPUSH
12161: LD_INT 0
12163: PPUSH
12164: CALL_OW 234
// end ;
12168: GO 12153
12170: POP
12171: POP
// end ;
12172: PPOPN 2
12174: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
12175: LD_EXP 26
12179: PUSH
12180: LD_EXP 29
12184: AND
12185: IFFALSE 12278
12187: GO 12189
12189: DISABLE
12190: LD_INT 0
12192: PPUSH
// begin enable ;
12193: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
12194: LD_ADDR_VAR 0 1
12198: PUSH
12199: LD_INT 22
12201: PUSH
12202: LD_OWVAR 2
12206: PUSH
12207: EMPTY
12208: LIST
12209: LIST
12210: PUSH
12211: LD_INT 2
12213: PUSH
12214: LD_INT 25
12216: PUSH
12217: LD_INT 5
12219: PUSH
12220: EMPTY
12221: LIST
12222: LIST
12223: PUSH
12224: LD_INT 25
12226: PUSH
12227: LD_INT 9
12229: PUSH
12230: EMPTY
12231: LIST
12232: LIST
12233: PUSH
12234: LD_INT 25
12236: PUSH
12237: LD_INT 8
12239: PUSH
12240: EMPTY
12241: LIST
12242: LIST
12243: PUSH
12244: EMPTY
12245: LIST
12246: LIST
12247: LIST
12248: LIST
12249: PUSH
12250: EMPTY
12251: LIST
12252: LIST
12253: PPUSH
12254: CALL_OW 69
12258: PUSH
12259: FOR_IN
12260: IFFALSE 12276
// begin SetClass ( i , 1 ) ;
12262: LD_VAR 0 1
12266: PPUSH
12267: LD_INT 1
12269: PPUSH
12270: CALL_OW 336
// end ;
12274: GO 12259
12276: POP
12277: POP
// end ;
12278: PPOPN 1
12280: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
12281: LD_EXP 26
12285: PUSH
12286: LD_EXP 30
12290: AND
12291: PUSH
12292: LD_OWVAR 65
12296: PUSH
12297: LD_INT 7
12299: LESS
12300: AND
12301: IFFALSE 12315
12303: GO 12305
12305: DISABLE
// begin enable ;
12306: ENABLE
// game_speed := 7 ;
12307: LD_ADDR_OWVAR 65
12311: PUSH
12312: LD_INT 7
12314: ST_TO_ADDR
// end ;
12315: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
12316: LD_EXP 26
12320: PUSH
12321: LD_EXP 33
12325: AND
12326: IFFALSE 12528
12328: GO 12330
12330: DISABLE
12331: LD_INT 0
12333: PPUSH
12334: PPUSH
12335: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
12336: LD_ADDR_VAR 0 3
12340: PUSH
12341: LD_INT 81
12343: PUSH
12344: LD_OWVAR 2
12348: PUSH
12349: EMPTY
12350: LIST
12351: LIST
12352: PUSH
12353: LD_INT 21
12355: PUSH
12356: LD_INT 1
12358: PUSH
12359: EMPTY
12360: LIST
12361: LIST
12362: PUSH
12363: EMPTY
12364: LIST
12365: LIST
12366: PPUSH
12367: CALL_OW 69
12371: ST_TO_ADDR
// if not tmp then
12372: LD_VAR 0 3
12376: NOT
12377: IFFALSE 12381
// exit ;
12379: GO 12528
// if tmp > 5 then
12381: LD_VAR 0 3
12385: PUSH
12386: LD_INT 5
12388: GREATER
12389: IFFALSE 12401
// k := 5 else
12391: LD_ADDR_VAR 0 2
12395: PUSH
12396: LD_INT 5
12398: ST_TO_ADDR
12399: GO 12411
// k := tmp ;
12401: LD_ADDR_VAR 0 2
12405: PUSH
12406: LD_VAR 0 3
12410: ST_TO_ADDR
// for i := 1 to k do
12411: LD_ADDR_VAR 0 1
12415: PUSH
12416: DOUBLE
12417: LD_INT 1
12419: DEC
12420: ST_TO_ADDR
12421: LD_VAR 0 2
12425: PUSH
12426: FOR_TO
12427: IFFALSE 12526
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
12429: LD_VAR 0 3
12433: PUSH
12434: LD_VAR 0 1
12438: ARRAY
12439: PPUSH
12440: LD_VAR 0 1
12444: PUSH
12445: LD_INT 4
12447: MOD
12448: PUSH
12449: LD_INT 1
12451: PLUS
12452: PPUSH
12453: CALL_OW 259
12457: PUSH
12458: LD_INT 10
12460: LESS
12461: IFFALSE 12524
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
12463: LD_VAR 0 3
12467: PUSH
12468: LD_VAR 0 1
12472: ARRAY
12473: PPUSH
12474: LD_VAR 0 1
12478: PUSH
12479: LD_INT 4
12481: MOD
12482: PUSH
12483: LD_INT 1
12485: PLUS
12486: PPUSH
12487: LD_VAR 0 3
12491: PUSH
12492: LD_VAR 0 1
12496: ARRAY
12497: PPUSH
12498: LD_VAR 0 1
12502: PUSH
12503: LD_INT 4
12505: MOD
12506: PUSH
12507: LD_INT 1
12509: PLUS
12510: PPUSH
12511: CALL_OW 259
12515: PUSH
12516: LD_INT 1
12518: PLUS
12519: PPUSH
12520: CALL_OW 237
12524: GO 12426
12526: POP
12527: POP
// end ;
12528: PPOPN 3
12530: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
12531: LD_EXP 26
12535: PUSH
12536: LD_EXP 34
12540: AND
12541: IFFALSE 12561
12543: GO 12545
12545: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
12546: LD_INT 4
12548: PPUSH
12549: LD_OWVAR 2
12553: PPUSH
12554: LD_INT 0
12556: PPUSH
12557: CALL_OW 324
12561: END
// every 0 0$1 trigger StreamModeActive and sShovel do
12562: LD_EXP 26
12566: PUSH
12567: LD_EXP 63
12571: AND
12572: IFFALSE 12592
12574: GO 12576
12576: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
12577: LD_INT 19
12579: PPUSH
12580: LD_OWVAR 2
12584: PPUSH
12585: LD_INT 0
12587: PPUSH
12588: CALL_OW 324
12592: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
12593: LD_EXP 26
12597: PUSH
12598: LD_EXP 35
12602: AND
12603: IFFALSE 12705
12605: GO 12607
12607: DISABLE
12608: LD_INT 0
12610: PPUSH
12611: PPUSH
// begin enable ;
12612: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
12613: LD_ADDR_VAR 0 2
12617: PUSH
12618: LD_INT 22
12620: PUSH
12621: LD_OWVAR 2
12625: PUSH
12626: EMPTY
12627: LIST
12628: LIST
12629: PUSH
12630: LD_INT 2
12632: PUSH
12633: LD_INT 34
12635: PUSH
12636: LD_INT 11
12638: PUSH
12639: EMPTY
12640: LIST
12641: LIST
12642: PUSH
12643: LD_INT 34
12645: PUSH
12646: LD_INT 30
12648: PUSH
12649: EMPTY
12650: LIST
12651: LIST
12652: PUSH
12653: EMPTY
12654: LIST
12655: LIST
12656: LIST
12657: PUSH
12658: EMPTY
12659: LIST
12660: LIST
12661: PPUSH
12662: CALL_OW 69
12666: ST_TO_ADDR
// if not tmp then
12667: LD_VAR 0 2
12671: NOT
12672: IFFALSE 12676
// exit ;
12674: GO 12705
// for i in tmp do
12676: LD_ADDR_VAR 0 1
12680: PUSH
12681: LD_VAR 0 2
12685: PUSH
12686: FOR_IN
12687: IFFALSE 12703
// begin SetLives ( i , 0 ) ;
12689: LD_VAR 0 1
12693: PPUSH
12694: LD_INT 0
12696: PPUSH
12697: CALL_OW 234
// end ;
12701: GO 12686
12703: POP
12704: POP
// end ;
12705: PPOPN 2
12707: END
// every 0 0$1 trigger StreamModeActive and sBunker do
12708: LD_EXP 26
12712: PUSH
12713: LD_EXP 36
12717: AND
12718: IFFALSE 12738
12720: GO 12722
12722: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
12723: LD_INT 32
12725: PPUSH
12726: LD_OWVAR 2
12730: PPUSH
12731: LD_INT 0
12733: PPUSH
12734: CALL_OW 324
12738: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
12739: LD_EXP 26
12743: PUSH
12744: LD_EXP 37
12748: AND
12749: IFFALSE 12930
12751: GO 12753
12753: DISABLE
12754: LD_INT 0
12756: PPUSH
12757: PPUSH
12758: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
12759: LD_ADDR_VAR 0 2
12763: PUSH
12764: LD_INT 22
12766: PUSH
12767: LD_OWVAR 2
12771: PUSH
12772: EMPTY
12773: LIST
12774: LIST
12775: PUSH
12776: LD_INT 33
12778: PUSH
12779: LD_INT 3
12781: PUSH
12782: EMPTY
12783: LIST
12784: LIST
12785: PUSH
12786: EMPTY
12787: LIST
12788: LIST
12789: PPUSH
12790: CALL_OW 69
12794: ST_TO_ADDR
// if not tmp then
12795: LD_VAR 0 2
12799: NOT
12800: IFFALSE 12804
// exit ;
12802: GO 12930
// side := 0 ;
12804: LD_ADDR_VAR 0 3
12808: PUSH
12809: LD_INT 0
12811: ST_TO_ADDR
// for i := 1 to 8 do
12812: LD_ADDR_VAR 0 1
12816: PUSH
12817: DOUBLE
12818: LD_INT 1
12820: DEC
12821: ST_TO_ADDR
12822: LD_INT 8
12824: PUSH
12825: FOR_TO
12826: IFFALSE 12874
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
12828: LD_OWVAR 2
12832: PUSH
12833: LD_VAR 0 1
12837: NONEQUAL
12838: PUSH
12839: LD_OWVAR 2
12843: PPUSH
12844: LD_VAR 0 1
12848: PPUSH
12849: CALL_OW 81
12853: PUSH
12854: LD_INT 2
12856: EQUAL
12857: AND
12858: IFFALSE 12872
// begin side := i ;
12860: LD_ADDR_VAR 0 3
12864: PUSH
12865: LD_VAR 0 1
12869: ST_TO_ADDR
// break ;
12870: GO 12874
// end ;
12872: GO 12825
12874: POP
12875: POP
// if not side then
12876: LD_VAR 0 3
12880: NOT
12881: IFFALSE 12885
// exit ;
12883: GO 12930
// for i := 1 to tmp do
12885: LD_ADDR_VAR 0 1
12889: PUSH
12890: DOUBLE
12891: LD_INT 1
12893: DEC
12894: ST_TO_ADDR
12895: LD_VAR 0 2
12899: PUSH
12900: FOR_TO
12901: IFFALSE 12928
// if Prob ( 60 ) then
12903: LD_INT 60
12905: PPUSH
12906: CALL_OW 13
12910: IFFALSE 12926
// SetSide ( i , side ) ;
12912: LD_VAR 0 1
12916: PPUSH
12917: LD_VAR 0 3
12921: PPUSH
12922: CALL_OW 235
12926: GO 12900
12928: POP
12929: POP
// end ;
12930: PPOPN 3
12932: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
12933: LD_EXP 26
12937: PUSH
12938: LD_EXP 39
12942: AND
12943: IFFALSE 13062
12945: GO 12947
12947: DISABLE
12948: LD_INT 0
12950: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
12951: LD_ADDR_VAR 0 1
12955: PUSH
12956: LD_INT 22
12958: PUSH
12959: LD_OWVAR 2
12963: PUSH
12964: EMPTY
12965: LIST
12966: LIST
12967: PUSH
12968: LD_INT 21
12970: PUSH
12971: LD_INT 1
12973: PUSH
12974: EMPTY
12975: LIST
12976: LIST
12977: PUSH
12978: LD_INT 3
12980: PUSH
12981: LD_INT 23
12983: PUSH
12984: LD_INT 0
12986: PUSH
12987: EMPTY
12988: LIST
12989: LIST
12990: PUSH
12991: EMPTY
12992: LIST
12993: LIST
12994: PUSH
12995: EMPTY
12996: LIST
12997: LIST
12998: LIST
12999: PPUSH
13000: CALL_OW 69
13004: PUSH
13005: FOR_IN
13006: IFFALSE 13060
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
13008: LD_VAR 0 1
13012: PPUSH
13013: CALL_OW 257
13017: PUSH
13018: LD_INT 1
13020: PUSH
13021: LD_INT 2
13023: PUSH
13024: LD_INT 3
13026: PUSH
13027: LD_INT 4
13029: PUSH
13030: EMPTY
13031: LIST
13032: LIST
13033: LIST
13034: LIST
13035: IN
13036: IFFALSE 13058
// SetClass ( un , rand ( 1 , 4 ) ) ;
13038: LD_VAR 0 1
13042: PPUSH
13043: LD_INT 1
13045: PPUSH
13046: LD_INT 4
13048: PPUSH
13049: CALL_OW 12
13053: PPUSH
13054: CALL_OW 336
13058: GO 13005
13060: POP
13061: POP
// end ;
13062: PPOPN 1
13064: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
13065: LD_EXP 26
13069: PUSH
13070: LD_EXP 38
13074: AND
13075: IFFALSE 13154
13077: GO 13079
13079: DISABLE
13080: LD_INT 0
13082: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13083: LD_ADDR_VAR 0 1
13087: PUSH
13088: LD_INT 22
13090: PUSH
13091: LD_OWVAR 2
13095: PUSH
13096: EMPTY
13097: LIST
13098: LIST
13099: PUSH
13100: LD_INT 21
13102: PUSH
13103: LD_INT 3
13105: PUSH
13106: EMPTY
13107: LIST
13108: LIST
13109: PUSH
13110: EMPTY
13111: LIST
13112: LIST
13113: PPUSH
13114: CALL_OW 69
13118: ST_TO_ADDR
// if not tmp then
13119: LD_VAR 0 1
13123: NOT
13124: IFFALSE 13128
// exit ;
13126: GO 13154
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
13128: LD_VAR 0 1
13132: PUSH
13133: LD_INT 1
13135: PPUSH
13136: LD_VAR 0 1
13140: PPUSH
13141: CALL_OW 12
13145: ARRAY
13146: PPUSH
13147: LD_INT 100
13149: PPUSH
13150: CALL_OW 234
// end ;
13154: PPOPN 1
13156: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
13157: LD_EXP 26
13161: PUSH
13162: LD_EXP 40
13166: AND
13167: IFFALSE 13265
13169: GO 13171
13171: DISABLE
13172: LD_INT 0
13174: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13175: LD_ADDR_VAR 0 1
13179: PUSH
13180: LD_INT 22
13182: PUSH
13183: LD_OWVAR 2
13187: PUSH
13188: EMPTY
13189: LIST
13190: LIST
13191: PUSH
13192: LD_INT 21
13194: PUSH
13195: LD_INT 1
13197: PUSH
13198: EMPTY
13199: LIST
13200: LIST
13201: PUSH
13202: EMPTY
13203: LIST
13204: LIST
13205: PPUSH
13206: CALL_OW 69
13210: ST_TO_ADDR
// if not tmp then
13211: LD_VAR 0 1
13215: NOT
13216: IFFALSE 13220
// exit ;
13218: GO 13265
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
13220: LD_VAR 0 1
13224: PUSH
13225: LD_INT 1
13227: PPUSH
13228: LD_VAR 0 1
13232: PPUSH
13233: CALL_OW 12
13237: ARRAY
13238: PPUSH
13239: LD_INT 1
13241: PPUSH
13242: LD_INT 4
13244: PPUSH
13245: CALL_OW 12
13249: PPUSH
13250: LD_INT 3000
13252: PPUSH
13253: LD_INT 9000
13255: PPUSH
13256: CALL_OW 12
13260: PPUSH
13261: CALL_OW 492
// end ;
13265: PPOPN 1
13267: END
// every 0 0$1 trigger StreamModeActive and sDepot do
13268: LD_EXP 26
13272: PUSH
13273: LD_EXP 41
13277: AND
13278: IFFALSE 13298
13280: GO 13282
13282: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
13283: LD_INT 1
13285: PPUSH
13286: LD_OWVAR 2
13290: PPUSH
13291: LD_INT 0
13293: PPUSH
13294: CALL_OW 324
13298: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
13299: LD_EXP 26
13303: PUSH
13304: LD_EXP 42
13308: AND
13309: IFFALSE 13392
13311: GO 13313
13313: DISABLE
13314: LD_INT 0
13316: PPUSH
13317: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13318: LD_ADDR_VAR 0 2
13322: PUSH
13323: LD_INT 22
13325: PUSH
13326: LD_OWVAR 2
13330: PUSH
13331: EMPTY
13332: LIST
13333: LIST
13334: PUSH
13335: LD_INT 21
13337: PUSH
13338: LD_INT 3
13340: PUSH
13341: EMPTY
13342: LIST
13343: LIST
13344: PUSH
13345: EMPTY
13346: LIST
13347: LIST
13348: PPUSH
13349: CALL_OW 69
13353: ST_TO_ADDR
// if not tmp then
13354: LD_VAR 0 2
13358: NOT
13359: IFFALSE 13363
// exit ;
13361: GO 13392
// for i in tmp do
13363: LD_ADDR_VAR 0 1
13367: PUSH
13368: LD_VAR 0 2
13372: PUSH
13373: FOR_IN
13374: IFFALSE 13390
// SetBLevel ( i , 10 ) ;
13376: LD_VAR 0 1
13380: PPUSH
13381: LD_INT 10
13383: PPUSH
13384: CALL_OW 241
13388: GO 13373
13390: POP
13391: POP
// end ;
13392: PPOPN 2
13394: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
13395: LD_EXP 26
13399: PUSH
13400: LD_EXP 43
13404: AND
13405: IFFALSE 13516
13407: GO 13409
13409: DISABLE
13410: LD_INT 0
13412: PPUSH
13413: PPUSH
13414: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13415: LD_ADDR_VAR 0 3
13419: PUSH
13420: LD_INT 22
13422: PUSH
13423: LD_OWVAR 2
13427: PUSH
13428: EMPTY
13429: LIST
13430: LIST
13431: PUSH
13432: LD_INT 25
13434: PUSH
13435: LD_INT 1
13437: PUSH
13438: EMPTY
13439: LIST
13440: LIST
13441: PUSH
13442: EMPTY
13443: LIST
13444: LIST
13445: PPUSH
13446: CALL_OW 69
13450: ST_TO_ADDR
// if not tmp then
13451: LD_VAR 0 3
13455: NOT
13456: IFFALSE 13460
// exit ;
13458: GO 13516
// un := tmp [ rand ( 1 , tmp ) ] ;
13460: LD_ADDR_VAR 0 2
13464: PUSH
13465: LD_VAR 0 3
13469: PUSH
13470: LD_INT 1
13472: PPUSH
13473: LD_VAR 0 3
13477: PPUSH
13478: CALL_OW 12
13482: ARRAY
13483: ST_TO_ADDR
// if Crawls ( un ) then
13484: LD_VAR 0 2
13488: PPUSH
13489: CALL_OW 318
13493: IFFALSE 13504
// ComWalk ( un ) ;
13495: LD_VAR 0 2
13499: PPUSH
13500: CALL_OW 138
// SetClass ( un , class_sniper ) ;
13504: LD_VAR 0 2
13508: PPUSH
13509: LD_INT 5
13511: PPUSH
13512: CALL_OW 336
// end ;
13516: PPOPN 3
13518: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
13519: LD_EXP 26
13523: PUSH
13524: LD_EXP 44
13528: AND
13529: PUSH
13530: LD_OWVAR 67
13534: PUSH
13535: LD_INT 4
13537: LESS
13538: AND
13539: IFFALSE 13558
13541: GO 13543
13543: DISABLE
// begin Difficulty := Difficulty + 1 ;
13544: LD_ADDR_OWVAR 67
13548: PUSH
13549: LD_OWVAR 67
13553: PUSH
13554: LD_INT 1
13556: PLUS
13557: ST_TO_ADDR
// end ;
13558: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
13559: LD_EXP 26
13563: PUSH
13564: LD_EXP 45
13568: AND
13569: IFFALSE 13672
13571: GO 13573
13573: DISABLE
13574: LD_INT 0
13576: PPUSH
// begin for i := 1 to 5 do
13577: LD_ADDR_VAR 0 1
13581: PUSH
13582: DOUBLE
13583: LD_INT 1
13585: DEC
13586: ST_TO_ADDR
13587: LD_INT 5
13589: PUSH
13590: FOR_TO
13591: IFFALSE 13670
// begin uc_nation := nation_nature ;
13593: LD_ADDR_OWVAR 21
13597: PUSH
13598: LD_INT 0
13600: ST_TO_ADDR
// uc_side := 0 ;
13601: LD_ADDR_OWVAR 20
13605: PUSH
13606: LD_INT 0
13608: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13609: LD_ADDR_OWVAR 29
13613: PUSH
13614: LD_INT 12
13616: PUSH
13617: LD_INT 12
13619: PUSH
13620: EMPTY
13621: LIST
13622: LIST
13623: ST_TO_ADDR
// hc_agressivity := 20 ;
13624: LD_ADDR_OWVAR 35
13628: PUSH
13629: LD_INT 20
13631: ST_TO_ADDR
// hc_class := class_tiger ;
13632: LD_ADDR_OWVAR 28
13636: PUSH
13637: LD_INT 14
13639: ST_TO_ADDR
// hc_gallery :=  ;
13640: LD_ADDR_OWVAR 33
13644: PUSH
13645: LD_STRING 
13647: ST_TO_ADDR
// hc_name :=  ;
13648: LD_ADDR_OWVAR 26
13652: PUSH
13653: LD_STRING 
13655: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
13656: CALL_OW 44
13660: PPUSH
13661: LD_INT 0
13663: PPUSH
13664: CALL_OW 51
// end ;
13668: GO 13590
13670: POP
13671: POP
// end ;
13672: PPOPN 1
13674: END
// every 0 0$1 trigger StreamModeActive and sBomb do
13675: LD_EXP 26
13679: PUSH
13680: LD_EXP 46
13684: AND
13685: IFFALSE 13694
13687: GO 13689
13689: DISABLE
// StreamSibBomb ;
13690: CALL 13695 0 0
13694: END
// export function StreamSibBomb ; var i , x , y ; begin
13695: LD_INT 0
13697: PPUSH
13698: PPUSH
13699: PPUSH
13700: PPUSH
// result := false ;
13701: LD_ADDR_VAR 0 1
13705: PUSH
13706: LD_INT 0
13708: ST_TO_ADDR
// for i := 1 to 16 do
13709: LD_ADDR_VAR 0 2
13713: PUSH
13714: DOUBLE
13715: LD_INT 1
13717: DEC
13718: ST_TO_ADDR
13719: LD_INT 16
13721: PUSH
13722: FOR_TO
13723: IFFALSE 13922
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13725: LD_ADDR_VAR 0 3
13729: PUSH
13730: LD_INT 10
13732: PUSH
13733: LD_INT 20
13735: PUSH
13736: LD_INT 30
13738: PUSH
13739: LD_INT 40
13741: PUSH
13742: LD_INT 50
13744: PUSH
13745: LD_INT 60
13747: PUSH
13748: LD_INT 70
13750: PUSH
13751: LD_INT 80
13753: PUSH
13754: LD_INT 90
13756: PUSH
13757: LD_INT 100
13759: PUSH
13760: LD_INT 110
13762: PUSH
13763: LD_INT 120
13765: PUSH
13766: LD_INT 130
13768: PUSH
13769: LD_INT 140
13771: PUSH
13772: LD_INT 150
13774: PUSH
13775: EMPTY
13776: LIST
13777: LIST
13778: LIST
13779: LIST
13780: LIST
13781: LIST
13782: LIST
13783: LIST
13784: LIST
13785: LIST
13786: LIST
13787: LIST
13788: LIST
13789: LIST
13790: LIST
13791: PUSH
13792: LD_INT 1
13794: PPUSH
13795: LD_INT 15
13797: PPUSH
13798: CALL_OW 12
13802: ARRAY
13803: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13804: LD_ADDR_VAR 0 4
13808: PUSH
13809: LD_INT 10
13811: PUSH
13812: LD_INT 20
13814: PUSH
13815: LD_INT 30
13817: PUSH
13818: LD_INT 40
13820: PUSH
13821: LD_INT 50
13823: PUSH
13824: LD_INT 60
13826: PUSH
13827: LD_INT 70
13829: PUSH
13830: LD_INT 80
13832: PUSH
13833: LD_INT 90
13835: PUSH
13836: LD_INT 100
13838: PUSH
13839: LD_INT 110
13841: PUSH
13842: LD_INT 120
13844: PUSH
13845: LD_INT 130
13847: PUSH
13848: LD_INT 140
13850: PUSH
13851: LD_INT 150
13853: PUSH
13854: EMPTY
13855: LIST
13856: LIST
13857: LIST
13858: LIST
13859: LIST
13860: LIST
13861: LIST
13862: LIST
13863: LIST
13864: LIST
13865: LIST
13866: LIST
13867: LIST
13868: LIST
13869: LIST
13870: PUSH
13871: LD_INT 1
13873: PPUSH
13874: LD_INT 15
13876: PPUSH
13877: CALL_OW 12
13881: ARRAY
13882: ST_TO_ADDR
// if ValidHex ( x , y ) then
13883: LD_VAR 0 3
13887: PPUSH
13888: LD_VAR 0 4
13892: PPUSH
13893: CALL_OW 488
13897: IFFALSE 13920
// begin result := [ x , y ] ;
13899: LD_ADDR_VAR 0 1
13903: PUSH
13904: LD_VAR 0 3
13908: PUSH
13909: LD_VAR 0 4
13913: PUSH
13914: EMPTY
13915: LIST
13916: LIST
13917: ST_TO_ADDR
// break ;
13918: GO 13922
// end ; end ;
13920: GO 13722
13922: POP
13923: POP
// if result then
13924: LD_VAR 0 1
13928: IFFALSE 13988
// begin ToLua ( playSibBomb() ) ;
13930: LD_STRING playSibBomb()
13932: PPUSH
13933: CALL_OW 559
// wait ( 0 0$14 ) ;
13937: LD_INT 490
13939: PPUSH
13940: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
13944: LD_VAR 0 1
13948: PUSH
13949: LD_INT 1
13951: ARRAY
13952: PPUSH
13953: LD_VAR 0 1
13957: PUSH
13958: LD_INT 2
13960: ARRAY
13961: PPUSH
13962: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
13966: LD_VAR 0 1
13970: PUSH
13971: LD_INT 1
13973: ARRAY
13974: PPUSH
13975: LD_VAR 0 1
13979: PUSH
13980: LD_INT 2
13982: ARRAY
13983: PPUSH
13984: CALL_OW 429
// end ; end ;
13988: LD_VAR 0 1
13992: RET
// every 0 0$1 trigger StreamModeActive and sReset do
13993: LD_EXP 26
13997: PUSH
13998: LD_EXP 48
14002: AND
14003: IFFALSE 14015
14005: GO 14007
14007: DISABLE
// YouLost (  ) ;
14008: LD_STRING 
14010: PPUSH
14011: CALL_OW 104
14015: END
// every 0 0$1 trigger StreamModeActive and sFog do
14016: LD_EXP 26
14020: PUSH
14021: LD_EXP 47
14025: AND
14026: IFFALSE 14040
14028: GO 14030
14030: DISABLE
// FogOff ( your_side ) ;
14031: LD_OWVAR 2
14035: PPUSH
14036: CALL_OW 344
14040: END
// every 0 0$1 trigger StreamModeActive and sSun do
14041: LD_EXP 26
14045: PUSH
14046: LD_EXP 49
14050: AND
14051: IFFALSE 14079
14053: GO 14055
14055: DISABLE
// begin solar_recharge_percent := 0 ;
14056: LD_ADDR_OWVAR 79
14060: PUSH
14061: LD_INT 0
14063: ST_TO_ADDR
// wait ( 5 5$00 ) ;
14064: LD_INT 10500
14066: PPUSH
14067: CALL_OW 67
// solar_recharge_percent := 100 ;
14071: LD_ADDR_OWVAR 79
14075: PUSH
14076: LD_INT 100
14078: ST_TO_ADDR
// end ;
14079: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
14080: LD_EXP 26
14084: PUSH
14085: LD_EXP 50
14089: AND
14090: IFFALSE 14329
14092: GO 14094
14094: DISABLE
14095: LD_INT 0
14097: PPUSH
14098: PPUSH
14099: PPUSH
// begin tmp := [ ] ;
14100: LD_ADDR_VAR 0 3
14104: PUSH
14105: EMPTY
14106: ST_TO_ADDR
// for i := 1 to 6 do
14107: LD_ADDR_VAR 0 1
14111: PUSH
14112: DOUBLE
14113: LD_INT 1
14115: DEC
14116: ST_TO_ADDR
14117: LD_INT 6
14119: PUSH
14120: FOR_TO
14121: IFFALSE 14226
// begin uc_nation := nation_nature ;
14123: LD_ADDR_OWVAR 21
14127: PUSH
14128: LD_INT 0
14130: ST_TO_ADDR
// uc_side := 0 ;
14131: LD_ADDR_OWVAR 20
14135: PUSH
14136: LD_INT 0
14138: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14139: LD_ADDR_OWVAR 29
14143: PUSH
14144: LD_INT 12
14146: PUSH
14147: LD_INT 12
14149: PUSH
14150: EMPTY
14151: LIST
14152: LIST
14153: ST_TO_ADDR
// hc_agressivity := 20 ;
14154: LD_ADDR_OWVAR 35
14158: PUSH
14159: LD_INT 20
14161: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
14162: LD_ADDR_OWVAR 28
14166: PUSH
14167: LD_INT 17
14169: ST_TO_ADDR
// hc_gallery :=  ;
14170: LD_ADDR_OWVAR 33
14174: PUSH
14175: LD_STRING 
14177: ST_TO_ADDR
// hc_name :=  ;
14178: LD_ADDR_OWVAR 26
14182: PUSH
14183: LD_STRING 
14185: ST_TO_ADDR
// un := CreateHuman ;
14186: LD_ADDR_VAR 0 2
14190: PUSH
14191: CALL_OW 44
14195: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
14196: LD_VAR 0 2
14200: PPUSH
14201: LD_INT 1
14203: PPUSH
14204: CALL_OW 51
// tmp := tmp ^ un ;
14208: LD_ADDR_VAR 0 3
14212: PUSH
14213: LD_VAR 0 3
14217: PUSH
14218: LD_VAR 0 2
14222: ADD
14223: ST_TO_ADDR
// end ;
14224: GO 14120
14226: POP
14227: POP
// repeat wait ( 0 0$1 ) ;
14228: LD_INT 35
14230: PPUSH
14231: CALL_OW 67
// for un in tmp do
14235: LD_ADDR_VAR 0 2
14239: PUSH
14240: LD_VAR 0 3
14244: PUSH
14245: FOR_IN
14246: IFFALSE 14320
// begin if IsDead ( un ) then
14248: LD_VAR 0 2
14252: PPUSH
14253: CALL_OW 301
14257: IFFALSE 14277
// begin tmp := tmp diff un ;
14259: LD_ADDR_VAR 0 3
14263: PUSH
14264: LD_VAR 0 3
14268: PUSH
14269: LD_VAR 0 2
14273: DIFF
14274: ST_TO_ADDR
// continue ;
14275: GO 14245
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
14277: LD_VAR 0 2
14281: PPUSH
14282: LD_INT 3
14284: PUSH
14285: LD_INT 22
14287: PUSH
14288: LD_INT 0
14290: PUSH
14291: EMPTY
14292: LIST
14293: LIST
14294: PUSH
14295: EMPTY
14296: LIST
14297: LIST
14298: PPUSH
14299: CALL_OW 69
14303: PPUSH
14304: LD_VAR 0 2
14308: PPUSH
14309: CALL_OW 74
14313: PPUSH
14314: CALL_OW 115
// end ;
14318: GO 14245
14320: POP
14321: POP
// until not tmp ;
14322: LD_VAR 0 3
14326: NOT
14327: IFFALSE 14228
// end ;
14329: PPOPN 3
14331: END
// every 0 0$1 trigger StreamModeActive and sTroll do
14332: LD_EXP 26
14336: PUSH
14337: LD_EXP 51
14341: AND
14342: IFFALSE 14396
14344: GO 14346
14346: DISABLE
// begin ToLua ( displayTroll(); ) ;
14347: LD_STRING displayTroll();
14349: PPUSH
14350: CALL_OW 559
// wait ( 3 3$00 ) ;
14354: LD_INT 6300
14356: PPUSH
14357: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14361: LD_STRING hideTroll();
14363: PPUSH
14364: CALL_OW 559
// wait ( 1 1$00 ) ;
14368: LD_INT 2100
14370: PPUSH
14371: CALL_OW 67
// ToLua ( displayTroll(); ) ;
14375: LD_STRING displayTroll();
14377: PPUSH
14378: CALL_OW 559
// wait ( 1 1$00 ) ;
14382: LD_INT 2100
14384: PPUSH
14385: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14389: LD_STRING hideTroll();
14391: PPUSH
14392: CALL_OW 559
// end ;
14396: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
14397: LD_EXP 26
14401: PUSH
14402: LD_EXP 52
14406: AND
14407: IFFALSE 14470
14409: GO 14411
14411: DISABLE
14412: LD_INT 0
14414: PPUSH
// begin p := 0 ;
14415: LD_ADDR_VAR 0 1
14419: PUSH
14420: LD_INT 0
14422: ST_TO_ADDR
// repeat game_speed := 1 ;
14423: LD_ADDR_OWVAR 65
14427: PUSH
14428: LD_INT 1
14430: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14431: LD_INT 35
14433: PPUSH
14434: CALL_OW 67
// p := p + 1 ;
14438: LD_ADDR_VAR 0 1
14442: PUSH
14443: LD_VAR 0 1
14447: PUSH
14448: LD_INT 1
14450: PLUS
14451: ST_TO_ADDR
// until p >= 60 ;
14452: LD_VAR 0 1
14456: PUSH
14457: LD_INT 60
14459: GREATEREQUAL
14460: IFFALSE 14423
// game_speed := 4 ;
14462: LD_ADDR_OWVAR 65
14466: PUSH
14467: LD_INT 4
14469: ST_TO_ADDR
// end ;
14470: PPOPN 1
14472: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
14473: LD_EXP 26
14477: PUSH
14478: LD_EXP 53
14482: AND
14483: IFFALSE 14629
14485: GO 14487
14487: DISABLE
14488: LD_INT 0
14490: PPUSH
14491: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14492: LD_ADDR_VAR 0 1
14496: PUSH
14497: LD_INT 22
14499: PUSH
14500: LD_OWVAR 2
14504: PUSH
14505: EMPTY
14506: LIST
14507: LIST
14508: PUSH
14509: LD_INT 2
14511: PUSH
14512: LD_INT 30
14514: PUSH
14515: LD_INT 0
14517: PUSH
14518: EMPTY
14519: LIST
14520: LIST
14521: PUSH
14522: LD_INT 30
14524: PUSH
14525: LD_INT 1
14527: PUSH
14528: EMPTY
14529: LIST
14530: LIST
14531: PUSH
14532: EMPTY
14533: LIST
14534: LIST
14535: LIST
14536: PUSH
14537: EMPTY
14538: LIST
14539: LIST
14540: PPUSH
14541: CALL_OW 69
14545: ST_TO_ADDR
// if not depot then
14546: LD_VAR 0 1
14550: NOT
14551: IFFALSE 14555
// exit ;
14553: GO 14629
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
14555: LD_ADDR_VAR 0 2
14559: PUSH
14560: LD_VAR 0 1
14564: PUSH
14565: LD_INT 1
14567: PPUSH
14568: LD_VAR 0 1
14572: PPUSH
14573: CALL_OW 12
14577: ARRAY
14578: PPUSH
14579: CALL_OW 274
14583: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
14584: LD_VAR 0 2
14588: PPUSH
14589: LD_INT 1
14591: PPUSH
14592: LD_INT 0
14594: PPUSH
14595: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
14599: LD_VAR 0 2
14603: PPUSH
14604: LD_INT 2
14606: PPUSH
14607: LD_INT 0
14609: PPUSH
14610: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
14614: LD_VAR 0 2
14618: PPUSH
14619: LD_INT 3
14621: PPUSH
14622: LD_INT 0
14624: PPUSH
14625: CALL_OW 277
// end ;
14629: PPOPN 2
14631: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
14632: LD_EXP 26
14636: PUSH
14637: LD_EXP 54
14641: AND
14642: IFFALSE 14739
14644: GO 14646
14646: DISABLE
14647: LD_INT 0
14649: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14650: LD_ADDR_VAR 0 1
14654: PUSH
14655: LD_INT 22
14657: PUSH
14658: LD_OWVAR 2
14662: PUSH
14663: EMPTY
14664: LIST
14665: LIST
14666: PUSH
14667: LD_INT 21
14669: PUSH
14670: LD_INT 1
14672: PUSH
14673: EMPTY
14674: LIST
14675: LIST
14676: PUSH
14677: LD_INT 3
14679: PUSH
14680: LD_INT 23
14682: PUSH
14683: LD_INT 0
14685: PUSH
14686: EMPTY
14687: LIST
14688: LIST
14689: PUSH
14690: EMPTY
14691: LIST
14692: LIST
14693: PUSH
14694: EMPTY
14695: LIST
14696: LIST
14697: LIST
14698: PPUSH
14699: CALL_OW 69
14703: ST_TO_ADDR
// if not tmp then
14704: LD_VAR 0 1
14708: NOT
14709: IFFALSE 14713
// exit ;
14711: GO 14739
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
14713: LD_VAR 0 1
14717: PUSH
14718: LD_INT 1
14720: PPUSH
14721: LD_VAR 0 1
14725: PPUSH
14726: CALL_OW 12
14730: ARRAY
14731: PPUSH
14732: LD_INT 200
14734: PPUSH
14735: CALL_OW 234
// end ;
14739: PPOPN 1
14741: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
14742: LD_EXP 26
14746: PUSH
14747: LD_EXP 55
14751: AND
14752: IFFALSE 14831
14754: GO 14756
14756: DISABLE
14757: LD_INT 0
14759: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
14760: LD_ADDR_VAR 0 1
14764: PUSH
14765: LD_INT 22
14767: PUSH
14768: LD_OWVAR 2
14772: PUSH
14773: EMPTY
14774: LIST
14775: LIST
14776: PUSH
14777: LD_INT 21
14779: PUSH
14780: LD_INT 2
14782: PUSH
14783: EMPTY
14784: LIST
14785: LIST
14786: PUSH
14787: EMPTY
14788: LIST
14789: LIST
14790: PPUSH
14791: CALL_OW 69
14795: ST_TO_ADDR
// if not tmp then
14796: LD_VAR 0 1
14800: NOT
14801: IFFALSE 14805
// exit ;
14803: GO 14831
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
14805: LD_VAR 0 1
14809: PUSH
14810: LD_INT 1
14812: PPUSH
14813: LD_VAR 0 1
14817: PPUSH
14818: CALL_OW 12
14822: ARRAY
14823: PPUSH
14824: LD_INT 60
14826: PPUSH
14827: CALL_OW 234
// end ;
14831: PPOPN 1
14833: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
14834: LD_EXP 26
14838: PUSH
14839: LD_EXP 56
14843: AND
14844: IFFALSE 14943
14846: GO 14848
14848: DISABLE
14849: LD_INT 0
14851: PPUSH
14852: PPUSH
// begin enable ;
14853: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
14854: LD_ADDR_VAR 0 1
14858: PUSH
14859: LD_INT 22
14861: PUSH
14862: LD_OWVAR 2
14866: PUSH
14867: EMPTY
14868: LIST
14869: LIST
14870: PUSH
14871: LD_INT 61
14873: PUSH
14874: EMPTY
14875: LIST
14876: PUSH
14877: LD_INT 33
14879: PUSH
14880: LD_INT 2
14882: PUSH
14883: EMPTY
14884: LIST
14885: LIST
14886: PUSH
14887: EMPTY
14888: LIST
14889: LIST
14890: LIST
14891: PPUSH
14892: CALL_OW 69
14896: ST_TO_ADDR
// if not tmp then
14897: LD_VAR 0 1
14901: NOT
14902: IFFALSE 14906
// exit ;
14904: GO 14943
// for i in tmp do
14906: LD_ADDR_VAR 0 2
14910: PUSH
14911: LD_VAR 0 1
14915: PUSH
14916: FOR_IN
14917: IFFALSE 14941
// if IsControledBy ( i ) then
14919: LD_VAR 0 2
14923: PPUSH
14924: CALL_OW 312
14928: IFFALSE 14939
// ComUnlink ( i ) ;
14930: LD_VAR 0 2
14934: PPUSH
14935: CALL_OW 136
14939: GO 14916
14941: POP
14942: POP
// end ;
14943: PPOPN 2
14945: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
14946: LD_EXP 26
14950: PUSH
14951: LD_EXP 57
14955: AND
14956: IFFALSE 15096
14958: GO 14960
14960: DISABLE
14961: LD_INT 0
14963: PPUSH
14964: PPUSH
// begin ToLua ( displayPowell(); ) ;
14965: LD_STRING displayPowell();
14967: PPUSH
14968: CALL_OW 559
// uc_side := 0 ;
14972: LD_ADDR_OWVAR 20
14976: PUSH
14977: LD_INT 0
14979: ST_TO_ADDR
// uc_nation := 2 ;
14980: LD_ADDR_OWVAR 21
14984: PUSH
14985: LD_INT 2
14987: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
14988: LD_ADDR_OWVAR 37
14992: PUSH
14993: LD_INT 14
14995: ST_TO_ADDR
// vc_engine := engine_siberite ;
14996: LD_ADDR_OWVAR 39
15000: PUSH
15001: LD_INT 3
15003: ST_TO_ADDR
// vc_control := control_apeman ;
15004: LD_ADDR_OWVAR 38
15008: PUSH
15009: LD_INT 5
15011: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
15012: LD_ADDR_OWVAR 40
15016: PUSH
15017: LD_INT 29
15019: ST_TO_ADDR
// un := CreateVehicle ;
15020: LD_ADDR_VAR 0 2
15024: PUSH
15025: CALL_OW 45
15029: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15030: LD_VAR 0 2
15034: PPUSH
15035: LD_INT 1
15037: PPUSH
15038: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15042: LD_INT 35
15044: PPUSH
15045: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15049: LD_VAR 0 2
15053: PPUSH
15054: LD_INT 22
15056: PUSH
15057: LD_OWVAR 2
15061: PUSH
15062: EMPTY
15063: LIST
15064: LIST
15065: PPUSH
15066: CALL_OW 69
15070: PPUSH
15071: LD_VAR 0 2
15075: PPUSH
15076: CALL_OW 74
15080: PPUSH
15081: CALL_OW 115
// until IsDead ( un ) ;
15085: LD_VAR 0 2
15089: PPUSH
15090: CALL_OW 301
15094: IFFALSE 15042
// end ;
15096: PPOPN 2
15098: END
// every 0 0$1 trigger StreamModeActive and sStu do
15099: LD_EXP 26
15103: PUSH
15104: LD_EXP 65
15108: AND
15109: IFFALSE 15125
15111: GO 15113
15113: DISABLE
// begin ToLua ( displayStucuk(); ) ;
15114: LD_STRING displayStucuk();
15116: PPUSH
15117: CALL_OW 559
// ResetFog ;
15121: CALL_OW 335
// end ;
15125: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
15126: LD_EXP 26
15130: PUSH
15131: LD_EXP 58
15135: AND
15136: IFFALSE 15277
15138: GO 15140
15140: DISABLE
15141: LD_INT 0
15143: PPUSH
15144: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15145: LD_ADDR_VAR 0 2
15149: PUSH
15150: LD_INT 22
15152: PUSH
15153: LD_OWVAR 2
15157: PUSH
15158: EMPTY
15159: LIST
15160: LIST
15161: PUSH
15162: LD_INT 21
15164: PUSH
15165: LD_INT 1
15167: PUSH
15168: EMPTY
15169: LIST
15170: LIST
15171: PUSH
15172: EMPTY
15173: LIST
15174: LIST
15175: PPUSH
15176: CALL_OW 69
15180: ST_TO_ADDR
// if not tmp then
15181: LD_VAR 0 2
15185: NOT
15186: IFFALSE 15190
// exit ;
15188: GO 15277
// un := tmp [ rand ( 1 , tmp ) ] ;
15190: LD_ADDR_VAR 0 1
15194: PUSH
15195: LD_VAR 0 2
15199: PUSH
15200: LD_INT 1
15202: PPUSH
15203: LD_VAR 0 2
15207: PPUSH
15208: CALL_OW 12
15212: ARRAY
15213: ST_TO_ADDR
// SetSide ( un , 0 ) ;
15214: LD_VAR 0 1
15218: PPUSH
15219: LD_INT 0
15221: PPUSH
15222: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
15226: LD_VAR 0 1
15230: PPUSH
15231: LD_OWVAR 3
15235: PUSH
15236: LD_VAR 0 1
15240: DIFF
15241: PPUSH
15242: LD_VAR 0 1
15246: PPUSH
15247: CALL_OW 74
15251: PPUSH
15252: CALL_OW 115
// wait ( 0 0$20 ) ;
15256: LD_INT 700
15258: PPUSH
15259: CALL_OW 67
// SetSide ( un , your_side ) ;
15263: LD_VAR 0 1
15267: PPUSH
15268: LD_OWVAR 2
15272: PPUSH
15273: CALL_OW 235
// end ;
15277: PPOPN 2
15279: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
15280: LD_EXP 26
15284: PUSH
15285: LD_EXP 59
15289: AND
15290: IFFALSE 15396
15292: GO 15294
15294: DISABLE
15295: LD_INT 0
15297: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15298: LD_ADDR_VAR 0 1
15302: PUSH
15303: LD_INT 22
15305: PUSH
15306: LD_OWVAR 2
15310: PUSH
15311: EMPTY
15312: LIST
15313: LIST
15314: PUSH
15315: LD_INT 2
15317: PUSH
15318: LD_INT 30
15320: PUSH
15321: LD_INT 0
15323: PUSH
15324: EMPTY
15325: LIST
15326: LIST
15327: PUSH
15328: LD_INT 30
15330: PUSH
15331: LD_INT 1
15333: PUSH
15334: EMPTY
15335: LIST
15336: LIST
15337: PUSH
15338: EMPTY
15339: LIST
15340: LIST
15341: LIST
15342: PUSH
15343: EMPTY
15344: LIST
15345: LIST
15346: PPUSH
15347: CALL_OW 69
15351: ST_TO_ADDR
// if not depot then
15352: LD_VAR 0 1
15356: NOT
15357: IFFALSE 15361
// exit ;
15359: GO 15396
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
15361: LD_VAR 0 1
15365: PUSH
15366: LD_INT 1
15368: ARRAY
15369: PPUSH
15370: CALL_OW 250
15374: PPUSH
15375: LD_VAR 0 1
15379: PUSH
15380: LD_INT 1
15382: ARRAY
15383: PPUSH
15384: CALL_OW 251
15388: PPUSH
15389: LD_INT 70
15391: PPUSH
15392: CALL_OW 495
// end ;
15396: PPOPN 1
15398: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
15399: LD_EXP 26
15403: PUSH
15404: LD_EXP 60
15408: AND
15409: IFFALSE 15620
15411: GO 15413
15413: DISABLE
15414: LD_INT 0
15416: PPUSH
15417: PPUSH
15418: PPUSH
15419: PPUSH
15420: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15421: LD_ADDR_VAR 0 5
15425: PUSH
15426: LD_INT 22
15428: PUSH
15429: LD_OWVAR 2
15433: PUSH
15434: EMPTY
15435: LIST
15436: LIST
15437: PUSH
15438: LD_INT 21
15440: PUSH
15441: LD_INT 1
15443: PUSH
15444: EMPTY
15445: LIST
15446: LIST
15447: PUSH
15448: EMPTY
15449: LIST
15450: LIST
15451: PPUSH
15452: CALL_OW 69
15456: ST_TO_ADDR
// if not tmp then
15457: LD_VAR 0 5
15461: NOT
15462: IFFALSE 15466
// exit ;
15464: GO 15620
// for i in tmp do
15466: LD_ADDR_VAR 0 1
15470: PUSH
15471: LD_VAR 0 5
15475: PUSH
15476: FOR_IN
15477: IFFALSE 15618
// begin d := rand ( 0 , 5 ) ;
15479: LD_ADDR_VAR 0 4
15483: PUSH
15484: LD_INT 0
15486: PPUSH
15487: LD_INT 5
15489: PPUSH
15490: CALL_OW 12
15494: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
15495: LD_ADDR_VAR 0 2
15499: PUSH
15500: LD_VAR 0 1
15504: PPUSH
15505: CALL_OW 250
15509: PPUSH
15510: LD_VAR 0 4
15514: PPUSH
15515: LD_INT 3
15517: PPUSH
15518: LD_INT 12
15520: PPUSH
15521: CALL_OW 12
15525: PPUSH
15526: CALL_OW 272
15530: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
15531: LD_ADDR_VAR 0 3
15535: PUSH
15536: LD_VAR 0 1
15540: PPUSH
15541: CALL_OW 251
15545: PPUSH
15546: LD_VAR 0 4
15550: PPUSH
15551: LD_INT 3
15553: PPUSH
15554: LD_INT 12
15556: PPUSH
15557: CALL_OW 12
15561: PPUSH
15562: CALL_OW 273
15566: ST_TO_ADDR
// if ValidHex ( x , y ) then
15567: LD_VAR 0 2
15571: PPUSH
15572: LD_VAR 0 3
15576: PPUSH
15577: CALL_OW 488
15581: IFFALSE 15616
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
15583: LD_VAR 0 1
15587: PPUSH
15588: LD_VAR 0 2
15592: PPUSH
15593: LD_VAR 0 3
15597: PPUSH
15598: LD_INT 3
15600: PPUSH
15601: LD_INT 6
15603: PPUSH
15604: CALL_OW 12
15608: PPUSH
15609: LD_INT 1
15611: PPUSH
15612: CALL_OW 483
// end ;
15616: GO 15476
15618: POP
15619: POP
// end ;
15620: PPOPN 5
15622: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
15623: LD_EXP 26
15627: PUSH
15628: LD_EXP 61
15632: AND
15633: IFFALSE 15727
15635: GO 15637
15637: DISABLE
15638: LD_INT 0
15640: PPUSH
15641: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
15642: LD_ADDR_VAR 0 2
15646: PUSH
15647: LD_INT 22
15649: PUSH
15650: LD_OWVAR 2
15654: PUSH
15655: EMPTY
15656: LIST
15657: LIST
15658: PUSH
15659: LD_INT 32
15661: PUSH
15662: LD_INT 1
15664: PUSH
15665: EMPTY
15666: LIST
15667: LIST
15668: PUSH
15669: LD_INT 21
15671: PUSH
15672: LD_INT 2
15674: PUSH
15675: EMPTY
15676: LIST
15677: LIST
15678: PUSH
15679: EMPTY
15680: LIST
15681: LIST
15682: LIST
15683: PPUSH
15684: CALL_OW 69
15688: ST_TO_ADDR
// if not tmp then
15689: LD_VAR 0 2
15693: NOT
15694: IFFALSE 15698
// exit ;
15696: GO 15727
// for i in tmp do
15698: LD_ADDR_VAR 0 1
15702: PUSH
15703: LD_VAR 0 2
15707: PUSH
15708: FOR_IN
15709: IFFALSE 15725
// SetFuel ( i , 0 ) ;
15711: LD_VAR 0 1
15715: PPUSH
15716: LD_INT 0
15718: PPUSH
15719: CALL_OW 240
15723: GO 15708
15725: POP
15726: POP
// end ;
15727: PPOPN 2
15729: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
15730: LD_EXP 26
15734: PUSH
15735: LD_EXP 62
15739: AND
15740: IFFALSE 15806
15742: GO 15744
15744: DISABLE
15745: LD_INT 0
15747: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15748: LD_ADDR_VAR 0 1
15752: PUSH
15753: LD_INT 22
15755: PUSH
15756: LD_OWVAR 2
15760: PUSH
15761: EMPTY
15762: LIST
15763: LIST
15764: PUSH
15765: LD_INT 30
15767: PUSH
15768: LD_INT 29
15770: PUSH
15771: EMPTY
15772: LIST
15773: LIST
15774: PUSH
15775: EMPTY
15776: LIST
15777: LIST
15778: PPUSH
15779: CALL_OW 69
15783: ST_TO_ADDR
// if not tmp then
15784: LD_VAR 0 1
15788: NOT
15789: IFFALSE 15793
// exit ;
15791: GO 15806
// DestroyUnit ( tmp [ 1 ] ) ;
15793: LD_VAR 0 1
15797: PUSH
15798: LD_INT 1
15800: ARRAY
15801: PPUSH
15802: CALL_OW 65
// end ;
15806: PPOPN 1
15808: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
15809: LD_EXP 26
15813: PUSH
15814: LD_EXP 64
15818: AND
15819: IFFALSE 15948
15821: GO 15823
15823: DISABLE
15824: LD_INT 0
15826: PPUSH
// begin uc_side := 0 ;
15827: LD_ADDR_OWVAR 20
15831: PUSH
15832: LD_INT 0
15834: ST_TO_ADDR
// uc_nation := nation_arabian ;
15835: LD_ADDR_OWVAR 21
15839: PUSH
15840: LD_INT 2
15842: ST_TO_ADDR
// hc_gallery :=  ;
15843: LD_ADDR_OWVAR 33
15847: PUSH
15848: LD_STRING 
15850: ST_TO_ADDR
// hc_name :=  ;
15851: LD_ADDR_OWVAR 26
15855: PUSH
15856: LD_STRING 
15858: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
15859: LD_INT 1
15861: PPUSH
15862: LD_INT 11
15864: PPUSH
15865: LD_INT 10
15867: PPUSH
15868: CALL_OW 380
// un := CreateHuman ;
15872: LD_ADDR_VAR 0 1
15876: PUSH
15877: CALL_OW 44
15881: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15882: LD_VAR 0 1
15886: PPUSH
15887: LD_INT 1
15889: PPUSH
15890: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15894: LD_INT 35
15896: PPUSH
15897: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15901: LD_VAR 0 1
15905: PPUSH
15906: LD_INT 22
15908: PUSH
15909: LD_OWVAR 2
15913: PUSH
15914: EMPTY
15915: LIST
15916: LIST
15917: PPUSH
15918: CALL_OW 69
15922: PPUSH
15923: LD_VAR 0 1
15927: PPUSH
15928: CALL_OW 74
15932: PPUSH
15933: CALL_OW 115
// until IsDead ( un ) ;
15937: LD_VAR 0 1
15941: PPUSH
15942: CALL_OW 301
15946: IFFALSE 15894
// end ;
15948: PPOPN 1
15950: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
15951: LD_EXP 26
15955: PUSH
15956: LD_EXP 66
15960: AND
15961: IFFALSE 15973
15963: GO 15965
15965: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
15966: LD_STRING earthquake(getX(game), 0, 32)
15968: PPUSH
15969: CALL_OW 559
15973: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
15974: LD_EXP 26
15978: PUSH
15979: LD_EXP 67
15983: AND
15984: IFFALSE 16075
15986: GO 15988
15988: DISABLE
15989: LD_INT 0
15991: PPUSH
// begin enable ;
15992: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
15993: LD_ADDR_VAR 0 1
15997: PUSH
15998: LD_INT 22
16000: PUSH
16001: LD_OWVAR 2
16005: PUSH
16006: EMPTY
16007: LIST
16008: LIST
16009: PUSH
16010: LD_INT 21
16012: PUSH
16013: LD_INT 2
16015: PUSH
16016: EMPTY
16017: LIST
16018: LIST
16019: PUSH
16020: LD_INT 33
16022: PUSH
16023: LD_INT 3
16025: PUSH
16026: EMPTY
16027: LIST
16028: LIST
16029: PUSH
16030: EMPTY
16031: LIST
16032: LIST
16033: LIST
16034: PPUSH
16035: CALL_OW 69
16039: ST_TO_ADDR
// if not tmp then
16040: LD_VAR 0 1
16044: NOT
16045: IFFALSE 16049
// exit ;
16047: GO 16075
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16049: LD_VAR 0 1
16053: PUSH
16054: LD_INT 1
16056: PPUSH
16057: LD_VAR 0 1
16061: PPUSH
16062: CALL_OW 12
16066: ARRAY
16067: PPUSH
16068: LD_INT 1
16070: PPUSH
16071: CALL_OW 234
// end ;
16075: PPOPN 1
16077: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
16078: LD_EXP 26
16082: PUSH
16083: LD_EXP 68
16087: AND
16088: IFFALSE 16229
16090: GO 16092
16092: DISABLE
16093: LD_INT 0
16095: PPUSH
16096: PPUSH
16097: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16098: LD_ADDR_VAR 0 3
16102: PUSH
16103: LD_INT 22
16105: PUSH
16106: LD_OWVAR 2
16110: PUSH
16111: EMPTY
16112: LIST
16113: LIST
16114: PUSH
16115: LD_INT 25
16117: PUSH
16118: LD_INT 1
16120: PUSH
16121: EMPTY
16122: LIST
16123: LIST
16124: PUSH
16125: EMPTY
16126: LIST
16127: LIST
16128: PPUSH
16129: CALL_OW 69
16133: ST_TO_ADDR
// if not tmp then
16134: LD_VAR 0 3
16138: NOT
16139: IFFALSE 16143
// exit ;
16141: GO 16229
// un := tmp [ rand ( 1 , tmp ) ] ;
16143: LD_ADDR_VAR 0 2
16147: PUSH
16148: LD_VAR 0 3
16152: PUSH
16153: LD_INT 1
16155: PPUSH
16156: LD_VAR 0 3
16160: PPUSH
16161: CALL_OW 12
16165: ARRAY
16166: ST_TO_ADDR
// if Crawls ( un ) then
16167: LD_VAR 0 2
16171: PPUSH
16172: CALL_OW 318
16176: IFFALSE 16187
// ComWalk ( un ) ;
16178: LD_VAR 0 2
16182: PPUSH
16183: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
16187: LD_VAR 0 2
16191: PPUSH
16192: LD_INT 9
16194: PPUSH
16195: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
16199: LD_INT 28
16201: PPUSH
16202: LD_OWVAR 2
16206: PPUSH
16207: LD_INT 2
16209: PPUSH
16210: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
16214: LD_INT 29
16216: PPUSH
16217: LD_OWVAR 2
16221: PPUSH
16222: LD_INT 2
16224: PPUSH
16225: CALL_OW 322
// end ;
16229: PPOPN 3
16231: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
16232: LD_EXP 26
16236: PUSH
16237: LD_EXP 69
16241: AND
16242: IFFALSE 16353
16244: GO 16246
16246: DISABLE
16247: LD_INT 0
16249: PPUSH
16250: PPUSH
16251: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16252: LD_ADDR_VAR 0 3
16256: PUSH
16257: LD_INT 22
16259: PUSH
16260: LD_OWVAR 2
16264: PUSH
16265: EMPTY
16266: LIST
16267: LIST
16268: PUSH
16269: LD_INT 25
16271: PUSH
16272: LD_INT 1
16274: PUSH
16275: EMPTY
16276: LIST
16277: LIST
16278: PUSH
16279: EMPTY
16280: LIST
16281: LIST
16282: PPUSH
16283: CALL_OW 69
16287: ST_TO_ADDR
// if not tmp then
16288: LD_VAR 0 3
16292: NOT
16293: IFFALSE 16297
// exit ;
16295: GO 16353
// un := tmp [ rand ( 1 , tmp ) ] ;
16297: LD_ADDR_VAR 0 2
16301: PUSH
16302: LD_VAR 0 3
16306: PUSH
16307: LD_INT 1
16309: PPUSH
16310: LD_VAR 0 3
16314: PPUSH
16315: CALL_OW 12
16319: ARRAY
16320: ST_TO_ADDR
// if Crawls ( un ) then
16321: LD_VAR 0 2
16325: PPUSH
16326: CALL_OW 318
16330: IFFALSE 16341
// ComWalk ( un ) ;
16332: LD_VAR 0 2
16336: PPUSH
16337: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16341: LD_VAR 0 2
16345: PPUSH
16346: LD_INT 8
16348: PPUSH
16349: CALL_OW 336
// end ;
16353: PPOPN 3
16355: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
16356: LD_EXP 26
16360: PUSH
16361: LD_EXP 70
16365: AND
16366: IFFALSE 16510
16368: GO 16370
16370: DISABLE
16371: LD_INT 0
16373: PPUSH
16374: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
16375: LD_ADDR_VAR 0 2
16379: PUSH
16380: LD_INT 22
16382: PUSH
16383: LD_OWVAR 2
16387: PUSH
16388: EMPTY
16389: LIST
16390: LIST
16391: PUSH
16392: LD_INT 21
16394: PUSH
16395: LD_INT 2
16397: PUSH
16398: EMPTY
16399: LIST
16400: LIST
16401: PUSH
16402: LD_INT 2
16404: PUSH
16405: LD_INT 34
16407: PUSH
16408: LD_INT 12
16410: PUSH
16411: EMPTY
16412: LIST
16413: LIST
16414: PUSH
16415: LD_INT 34
16417: PUSH
16418: LD_INT 51
16420: PUSH
16421: EMPTY
16422: LIST
16423: LIST
16424: PUSH
16425: LD_INT 34
16427: PUSH
16428: LD_INT 32
16430: PUSH
16431: EMPTY
16432: LIST
16433: LIST
16434: PUSH
16435: EMPTY
16436: LIST
16437: LIST
16438: LIST
16439: LIST
16440: PUSH
16441: EMPTY
16442: LIST
16443: LIST
16444: LIST
16445: PPUSH
16446: CALL_OW 69
16450: ST_TO_ADDR
// if not tmp then
16451: LD_VAR 0 2
16455: NOT
16456: IFFALSE 16460
// exit ;
16458: GO 16510
// for i in tmp do
16460: LD_ADDR_VAR 0 1
16464: PUSH
16465: LD_VAR 0 2
16469: PUSH
16470: FOR_IN
16471: IFFALSE 16508
// if GetCargo ( i , mat_artifact ) = 0 then
16473: LD_VAR 0 1
16477: PPUSH
16478: LD_INT 4
16480: PPUSH
16481: CALL_OW 289
16485: PUSH
16486: LD_INT 0
16488: EQUAL
16489: IFFALSE 16506
// SetCargo ( i , mat_siberit , 100 ) ;
16491: LD_VAR 0 1
16495: PPUSH
16496: LD_INT 3
16498: PPUSH
16499: LD_INT 100
16501: PPUSH
16502: CALL_OW 290
16506: GO 16470
16508: POP
16509: POP
// end ;
16510: PPOPN 2
16512: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
16513: LD_EXP 26
16517: PUSH
16518: LD_EXP 71
16522: AND
16523: IFFALSE 16706
16525: GO 16527
16527: DISABLE
16528: LD_INT 0
16530: PPUSH
16531: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16532: LD_ADDR_VAR 0 2
16536: PUSH
16537: LD_INT 22
16539: PUSH
16540: LD_OWVAR 2
16544: PUSH
16545: EMPTY
16546: LIST
16547: LIST
16548: PPUSH
16549: CALL_OW 69
16553: ST_TO_ADDR
// if not tmp then
16554: LD_VAR 0 2
16558: NOT
16559: IFFALSE 16563
// exit ;
16561: GO 16706
// for i := 1 to 2 do
16563: LD_ADDR_VAR 0 1
16567: PUSH
16568: DOUBLE
16569: LD_INT 1
16571: DEC
16572: ST_TO_ADDR
16573: LD_INT 2
16575: PUSH
16576: FOR_TO
16577: IFFALSE 16704
// begin uc_side := your_side ;
16579: LD_ADDR_OWVAR 20
16583: PUSH
16584: LD_OWVAR 2
16588: ST_TO_ADDR
// uc_nation := nation_american ;
16589: LD_ADDR_OWVAR 21
16593: PUSH
16594: LD_INT 1
16596: ST_TO_ADDR
// vc_chassis := us_morphling ;
16597: LD_ADDR_OWVAR 37
16601: PUSH
16602: LD_INT 5
16604: ST_TO_ADDR
// vc_engine := engine_siberite ;
16605: LD_ADDR_OWVAR 39
16609: PUSH
16610: LD_INT 3
16612: ST_TO_ADDR
// vc_control := control_computer ;
16613: LD_ADDR_OWVAR 38
16617: PUSH
16618: LD_INT 3
16620: ST_TO_ADDR
// vc_weapon := us_double_laser ;
16621: LD_ADDR_OWVAR 40
16625: PUSH
16626: LD_INT 10
16628: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
16629: LD_VAR 0 2
16633: PUSH
16634: LD_INT 1
16636: ARRAY
16637: PPUSH
16638: CALL_OW 310
16642: NOT
16643: IFFALSE 16690
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
16645: CALL_OW 45
16649: PPUSH
16650: LD_VAR 0 2
16654: PUSH
16655: LD_INT 1
16657: ARRAY
16658: PPUSH
16659: CALL_OW 250
16663: PPUSH
16664: LD_VAR 0 2
16668: PUSH
16669: LD_INT 1
16671: ARRAY
16672: PPUSH
16673: CALL_OW 251
16677: PPUSH
16678: LD_INT 12
16680: PPUSH
16681: LD_INT 1
16683: PPUSH
16684: CALL_OW 50
16688: GO 16702
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
16690: CALL_OW 45
16694: PPUSH
16695: LD_INT 1
16697: PPUSH
16698: CALL_OW 51
// end ;
16702: GO 16576
16704: POP
16705: POP
// end ;
16706: PPOPN 2
16708: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
16709: LD_EXP 26
16713: PUSH
16714: LD_EXP 72
16718: AND
16719: IFFALSE 16941
16721: GO 16723
16723: DISABLE
16724: LD_INT 0
16726: PPUSH
16727: PPUSH
16728: PPUSH
16729: PPUSH
16730: PPUSH
16731: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16732: LD_ADDR_VAR 0 6
16736: PUSH
16737: LD_INT 22
16739: PUSH
16740: LD_OWVAR 2
16744: PUSH
16745: EMPTY
16746: LIST
16747: LIST
16748: PUSH
16749: LD_INT 21
16751: PUSH
16752: LD_INT 1
16754: PUSH
16755: EMPTY
16756: LIST
16757: LIST
16758: PUSH
16759: LD_INT 3
16761: PUSH
16762: LD_INT 23
16764: PUSH
16765: LD_INT 0
16767: PUSH
16768: EMPTY
16769: LIST
16770: LIST
16771: PUSH
16772: EMPTY
16773: LIST
16774: LIST
16775: PUSH
16776: EMPTY
16777: LIST
16778: LIST
16779: LIST
16780: PPUSH
16781: CALL_OW 69
16785: ST_TO_ADDR
// if not tmp then
16786: LD_VAR 0 6
16790: NOT
16791: IFFALSE 16795
// exit ;
16793: GO 16941
// s1 := rand ( 1 , 4 ) ;
16795: LD_ADDR_VAR 0 2
16799: PUSH
16800: LD_INT 1
16802: PPUSH
16803: LD_INT 4
16805: PPUSH
16806: CALL_OW 12
16810: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
16811: LD_ADDR_VAR 0 4
16815: PUSH
16816: LD_VAR 0 6
16820: PUSH
16821: LD_INT 1
16823: ARRAY
16824: PPUSH
16825: LD_VAR 0 2
16829: PPUSH
16830: CALL_OW 259
16834: ST_TO_ADDR
// if s1 = 1 then
16835: LD_VAR 0 2
16839: PUSH
16840: LD_INT 1
16842: EQUAL
16843: IFFALSE 16863
// s2 := rand ( 2 , 4 ) else
16845: LD_ADDR_VAR 0 3
16849: PUSH
16850: LD_INT 2
16852: PPUSH
16853: LD_INT 4
16855: PPUSH
16856: CALL_OW 12
16860: ST_TO_ADDR
16861: GO 16871
// s2 := 1 ;
16863: LD_ADDR_VAR 0 3
16867: PUSH
16868: LD_INT 1
16870: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
16871: LD_ADDR_VAR 0 5
16875: PUSH
16876: LD_VAR 0 6
16880: PUSH
16881: LD_INT 1
16883: ARRAY
16884: PPUSH
16885: LD_VAR 0 3
16889: PPUSH
16890: CALL_OW 259
16894: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
16895: LD_VAR 0 6
16899: PUSH
16900: LD_INT 1
16902: ARRAY
16903: PPUSH
16904: LD_VAR 0 2
16908: PPUSH
16909: LD_VAR 0 5
16913: PPUSH
16914: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
16918: LD_VAR 0 6
16922: PUSH
16923: LD_INT 1
16925: ARRAY
16926: PPUSH
16927: LD_VAR 0 3
16931: PPUSH
16932: LD_VAR 0 4
16936: PPUSH
16937: CALL_OW 237
// end ;
16941: PPOPN 6
16943: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
16944: LD_EXP 26
16948: PUSH
16949: LD_EXP 73
16953: AND
16954: IFFALSE 17033
16956: GO 16958
16958: DISABLE
16959: LD_INT 0
16961: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
16962: LD_ADDR_VAR 0 1
16966: PUSH
16967: LD_INT 22
16969: PUSH
16970: LD_OWVAR 2
16974: PUSH
16975: EMPTY
16976: LIST
16977: LIST
16978: PUSH
16979: LD_INT 30
16981: PUSH
16982: LD_INT 3
16984: PUSH
16985: EMPTY
16986: LIST
16987: LIST
16988: PUSH
16989: EMPTY
16990: LIST
16991: LIST
16992: PPUSH
16993: CALL_OW 69
16997: ST_TO_ADDR
// if not tmp then
16998: LD_VAR 0 1
17002: NOT
17003: IFFALSE 17007
// exit ;
17005: GO 17033
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17007: LD_VAR 0 1
17011: PUSH
17012: LD_INT 1
17014: PPUSH
17015: LD_VAR 0 1
17019: PPUSH
17020: CALL_OW 12
17024: ARRAY
17025: PPUSH
17026: LD_INT 1
17028: PPUSH
17029: CALL_OW 234
// end ;
17033: PPOPN 1
17035: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
17036: LD_EXP 26
17040: PUSH
17041: LD_EXP 74
17045: AND
17046: IFFALSE 17158
17048: GO 17050
17050: DISABLE
17051: LD_INT 0
17053: PPUSH
17054: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
17055: LD_ADDR_VAR 0 2
17059: PUSH
17060: LD_INT 22
17062: PUSH
17063: LD_OWVAR 2
17067: PUSH
17068: EMPTY
17069: LIST
17070: LIST
17071: PUSH
17072: LD_INT 2
17074: PUSH
17075: LD_INT 30
17077: PUSH
17078: LD_INT 27
17080: PUSH
17081: EMPTY
17082: LIST
17083: LIST
17084: PUSH
17085: LD_INT 30
17087: PUSH
17088: LD_INT 26
17090: PUSH
17091: EMPTY
17092: LIST
17093: LIST
17094: PUSH
17095: LD_INT 30
17097: PUSH
17098: LD_INT 28
17100: PUSH
17101: EMPTY
17102: LIST
17103: LIST
17104: PUSH
17105: EMPTY
17106: LIST
17107: LIST
17108: LIST
17109: LIST
17110: PUSH
17111: EMPTY
17112: LIST
17113: LIST
17114: PPUSH
17115: CALL_OW 69
17119: ST_TO_ADDR
// if not tmp then
17120: LD_VAR 0 2
17124: NOT
17125: IFFALSE 17129
// exit ;
17127: GO 17158
// for i in tmp do
17129: LD_ADDR_VAR 0 1
17133: PUSH
17134: LD_VAR 0 2
17138: PUSH
17139: FOR_IN
17140: IFFALSE 17156
// SetLives ( i , 1 ) ;
17142: LD_VAR 0 1
17146: PPUSH
17147: LD_INT 1
17149: PPUSH
17150: CALL_OW 234
17154: GO 17139
17156: POP
17157: POP
// end ;
17158: PPOPN 2
17160: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
17161: LD_EXP 26
17165: PUSH
17166: LD_EXP 75
17170: AND
17171: IFFALSE 17458
17173: GO 17175
17175: DISABLE
17176: LD_INT 0
17178: PPUSH
17179: PPUSH
17180: PPUSH
// begin i := rand ( 1 , 7 ) ;
17181: LD_ADDR_VAR 0 1
17185: PUSH
17186: LD_INT 1
17188: PPUSH
17189: LD_INT 7
17191: PPUSH
17192: CALL_OW 12
17196: ST_TO_ADDR
// case i of 1 :
17197: LD_VAR 0 1
17201: PUSH
17202: LD_INT 1
17204: DOUBLE
17205: EQUAL
17206: IFTRUE 17210
17208: GO 17220
17210: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
17211: LD_STRING earthquake(getX(game), 0, 32)
17213: PPUSH
17214: CALL_OW 559
17218: GO 17458
17220: LD_INT 2
17222: DOUBLE
17223: EQUAL
17224: IFTRUE 17228
17226: GO 17242
17228: POP
// begin ToLua ( displayStucuk(); ) ;
17229: LD_STRING displayStucuk();
17231: PPUSH
17232: CALL_OW 559
// ResetFog ;
17236: CALL_OW 335
// end ; 3 :
17240: GO 17458
17242: LD_INT 3
17244: DOUBLE
17245: EQUAL
17246: IFTRUE 17250
17248: GO 17354
17250: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17251: LD_ADDR_VAR 0 2
17255: PUSH
17256: LD_INT 22
17258: PUSH
17259: LD_OWVAR 2
17263: PUSH
17264: EMPTY
17265: LIST
17266: LIST
17267: PUSH
17268: LD_INT 25
17270: PUSH
17271: LD_INT 1
17273: PUSH
17274: EMPTY
17275: LIST
17276: LIST
17277: PUSH
17278: EMPTY
17279: LIST
17280: LIST
17281: PPUSH
17282: CALL_OW 69
17286: ST_TO_ADDR
// if not tmp then
17287: LD_VAR 0 2
17291: NOT
17292: IFFALSE 17296
// exit ;
17294: GO 17458
// un := tmp [ rand ( 1 , tmp ) ] ;
17296: LD_ADDR_VAR 0 3
17300: PUSH
17301: LD_VAR 0 2
17305: PUSH
17306: LD_INT 1
17308: PPUSH
17309: LD_VAR 0 2
17313: PPUSH
17314: CALL_OW 12
17318: ARRAY
17319: ST_TO_ADDR
// if Crawls ( un ) then
17320: LD_VAR 0 3
17324: PPUSH
17325: CALL_OW 318
17329: IFFALSE 17340
// ComWalk ( un ) ;
17331: LD_VAR 0 3
17335: PPUSH
17336: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17340: LD_VAR 0 3
17344: PPUSH
17345: LD_INT 8
17347: PPUSH
17348: CALL_OW 336
// end ; 4 :
17352: GO 17458
17354: LD_INT 4
17356: DOUBLE
17357: EQUAL
17358: IFTRUE 17362
17360: GO 17436
17362: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17363: LD_ADDR_VAR 0 2
17367: PUSH
17368: LD_INT 22
17370: PUSH
17371: LD_OWVAR 2
17375: PUSH
17376: EMPTY
17377: LIST
17378: LIST
17379: PUSH
17380: LD_INT 30
17382: PUSH
17383: LD_INT 29
17385: PUSH
17386: EMPTY
17387: LIST
17388: LIST
17389: PUSH
17390: EMPTY
17391: LIST
17392: LIST
17393: PPUSH
17394: CALL_OW 69
17398: ST_TO_ADDR
// if not tmp then
17399: LD_VAR 0 2
17403: NOT
17404: IFFALSE 17408
// exit ;
17406: GO 17458
// CenterNowOnUnits ( tmp [ 1 ] ) ;
17408: LD_VAR 0 2
17412: PUSH
17413: LD_INT 1
17415: ARRAY
17416: PPUSH
17417: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
17421: LD_VAR 0 2
17425: PUSH
17426: LD_INT 1
17428: ARRAY
17429: PPUSH
17430: CALL_OW 65
// end ; 5 .. 7 :
17434: GO 17458
17436: LD_INT 5
17438: DOUBLE
17439: GREATEREQUAL
17440: IFFALSE 17448
17442: LD_INT 7
17444: DOUBLE
17445: LESSEQUAL
17446: IFTRUE 17450
17448: GO 17457
17450: POP
// StreamSibBomb ; end ;
17451: CALL 13695 0 0
17455: GO 17458
17457: POP
// end ;
17458: PPOPN 3
17460: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
17461: LD_EXP 26
17465: PUSH
17466: LD_EXP 76
17470: AND
17471: IFFALSE 17627
17473: GO 17475
17475: DISABLE
17476: LD_INT 0
17478: PPUSH
17479: PPUSH
17480: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
17481: LD_ADDR_VAR 0 2
17485: PUSH
17486: LD_INT 81
17488: PUSH
17489: LD_OWVAR 2
17493: PUSH
17494: EMPTY
17495: LIST
17496: LIST
17497: PUSH
17498: LD_INT 2
17500: PUSH
17501: LD_INT 21
17503: PUSH
17504: LD_INT 1
17506: PUSH
17507: EMPTY
17508: LIST
17509: LIST
17510: PUSH
17511: LD_INT 21
17513: PUSH
17514: LD_INT 2
17516: PUSH
17517: EMPTY
17518: LIST
17519: LIST
17520: PUSH
17521: EMPTY
17522: LIST
17523: LIST
17524: LIST
17525: PUSH
17526: EMPTY
17527: LIST
17528: LIST
17529: PPUSH
17530: CALL_OW 69
17534: ST_TO_ADDR
// if not tmp then
17535: LD_VAR 0 2
17539: NOT
17540: IFFALSE 17544
// exit ;
17542: GO 17627
// p := 0 ;
17544: LD_ADDR_VAR 0 3
17548: PUSH
17549: LD_INT 0
17551: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17552: LD_INT 35
17554: PPUSH
17555: CALL_OW 67
// p := p + 1 ;
17559: LD_ADDR_VAR 0 3
17563: PUSH
17564: LD_VAR 0 3
17568: PUSH
17569: LD_INT 1
17571: PLUS
17572: ST_TO_ADDR
// for i in tmp do
17573: LD_ADDR_VAR 0 1
17577: PUSH
17578: LD_VAR 0 2
17582: PUSH
17583: FOR_IN
17584: IFFALSE 17615
// if GetLives ( i ) < 1000 then
17586: LD_VAR 0 1
17590: PPUSH
17591: CALL_OW 256
17595: PUSH
17596: LD_INT 1000
17598: LESS
17599: IFFALSE 17613
// SetLives ( i , 1000 ) ;
17601: LD_VAR 0 1
17605: PPUSH
17606: LD_INT 1000
17608: PPUSH
17609: CALL_OW 234
17613: GO 17583
17615: POP
17616: POP
// until p > 20 ;
17617: LD_VAR 0 3
17621: PUSH
17622: LD_INT 20
17624: GREATER
17625: IFFALSE 17552
// end ;
17627: PPOPN 3
17629: END
// every 0 0$1 trigger StreamModeActive and sTime do
17630: LD_EXP 26
17634: PUSH
17635: LD_EXP 77
17639: AND
17640: IFFALSE 17675
17642: GO 17644
17644: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
17645: LD_INT 28
17647: PPUSH
17648: LD_OWVAR 2
17652: PPUSH
17653: LD_INT 2
17655: PPUSH
17656: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
17660: LD_INT 30
17662: PPUSH
17663: LD_OWVAR 2
17667: PPUSH
17668: LD_INT 2
17670: PPUSH
17671: CALL_OW 322
// end ;
17675: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
17676: LD_EXP 26
17680: PUSH
17681: LD_EXP 78
17685: AND
17686: IFFALSE 17807
17688: GO 17690
17690: DISABLE
17691: LD_INT 0
17693: PPUSH
17694: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17695: LD_ADDR_VAR 0 2
17699: PUSH
17700: LD_INT 22
17702: PUSH
17703: LD_OWVAR 2
17707: PUSH
17708: EMPTY
17709: LIST
17710: LIST
17711: PUSH
17712: LD_INT 21
17714: PUSH
17715: LD_INT 1
17717: PUSH
17718: EMPTY
17719: LIST
17720: LIST
17721: PUSH
17722: LD_INT 3
17724: PUSH
17725: LD_INT 23
17727: PUSH
17728: LD_INT 0
17730: PUSH
17731: EMPTY
17732: LIST
17733: LIST
17734: PUSH
17735: EMPTY
17736: LIST
17737: LIST
17738: PUSH
17739: EMPTY
17740: LIST
17741: LIST
17742: LIST
17743: PPUSH
17744: CALL_OW 69
17748: ST_TO_ADDR
// if not tmp then
17749: LD_VAR 0 2
17753: NOT
17754: IFFALSE 17758
// exit ;
17756: GO 17807
// for i in tmp do
17758: LD_ADDR_VAR 0 1
17762: PUSH
17763: LD_VAR 0 2
17767: PUSH
17768: FOR_IN
17769: IFFALSE 17805
// begin if Crawls ( i ) then
17771: LD_VAR 0 1
17775: PPUSH
17776: CALL_OW 318
17780: IFFALSE 17791
// ComWalk ( i ) ;
17782: LD_VAR 0 1
17786: PPUSH
17787: CALL_OW 138
// SetClass ( i , 2 ) ;
17791: LD_VAR 0 1
17795: PPUSH
17796: LD_INT 2
17798: PPUSH
17799: CALL_OW 336
// end ;
17803: GO 17768
17805: POP
17806: POP
// end ;
17807: PPOPN 2
17809: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
17810: LD_EXP 26
17814: PUSH
17815: LD_EXP 79
17819: AND
17820: IFFALSE 18108
17822: GO 17824
17824: DISABLE
17825: LD_INT 0
17827: PPUSH
17828: PPUSH
17829: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
17830: LD_OWVAR 2
17834: PPUSH
17835: LD_INT 9
17837: PPUSH
17838: LD_INT 1
17840: PPUSH
17841: LD_INT 1
17843: PPUSH
17844: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
17848: LD_INT 9
17850: PPUSH
17851: LD_OWVAR 2
17855: PPUSH
17856: CALL_OW 343
// uc_side := 9 ;
17860: LD_ADDR_OWVAR 20
17864: PUSH
17865: LD_INT 9
17867: ST_TO_ADDR
// uc_nation := 2 ;
17868: LD_ADDR_OWVAR 21
17872: PUSH
17873: LD_INT 2
17875: ST_TO_ADDR
// hc_name := Dark Warrior ;
17876: LD_ADDR_OWVAR 26
17880: PUSH
17881: LD_STRING Dark Warrior
17883: ST_TO_ADDR
// hc_gallery :=  ;
17884: LD_ADDR_OWVAR 33
17888: PUSH
17889: LD_STRING 
17891: ST_TO_ADDR
// hc_noskilllimit := true ;
17892: LD_ADDR_OWVAR 76
17896: PUSH
17897: LD_INT 1
17899: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
17900: LD_ADDR_OWVAR 31
17904: PUSH
17905: LD_INT 30
17907: PUSH
17908: LD_INT 30
17910: PUSH
17911: LD_INT 30
17913: PUSH
17914: LD_INT 30
17916: PUSH
17917: EMPTY
17918: LIST
17919: LIST
17920: LIST
17921: LIST
17922: ST_TO_ADDR
// un := CreateHuman ;
17923: LD_ADDR_VAR 0 3
17927: PUSH
17928: CALL_OW 44
17932: ST_TO_ADDR
// hc_noskilllimit := false ;
17933: LD_ADDR_OWVAR 76
17937: PUSH
17938: LD_INT 0
17940: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17941: LD_VAR 0 3
17945: PPUSH
17946: LD_INT 1
17948: PPUSH
17949: CALL_OW 51
// ToLua ( playRanger() ) ;
17953: LD_STRING playRanger()
17955: PPUSH
17956: CALL_OW 559
// p := 0 ;
17960: LD_ADDR_VAR 0 2
17964: PUSH
17965: LD_INT 0
17967: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17968: LD_INT 35
17970: PPUSH
17971: CALL_OW 67
// p := p + 1 ;
17975: LD_ADDR_VAR 0 2
17979: PUSH
17980: LD_VAR 0 2
17984: PUSH
17985: LD_INT 1
17987: PLUS
17988: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
17989: LD_VAR 0 3
17993: PPUSH
17994: CALL_OW 256
17998: PUSH
17999: LD_INT 1000
18001: LESS
18002: IFFALSE 18016
// SetLives ( un , 1000 ) ;
18004: LD_VAR 0 3
18008: PPUSH
18009: LD_INT 1000
18011: PPUSH
18012: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
18016: LD_VAR 0 3
18020: PPUSH
18021: LD_INT 81
18023: PUSH
18024: LD_OWVAR 2
18028: PUSH
18029: EMPTY
18030: LIST
18031: LIST
18032: PUSH
18033: LD_INT 91
18035: PUSH
18036: LD_VAR 0 3
18040: PUSH
18041: LD_INT 30
18043: PUSH
18044: EMPTY
18045: LIST
18046: LIST
18047: LIST
18048: PUSH
18049: EMPTY
18050: LIST
18051: LIST
18052: PPUSH
18053: CALL_OW 69
18057: PPUSH
18058: LD_VAR 0 3
18062: PPUSH
18063: CALL_OW 74
18067: PPUSH
18068: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
18072: LD_VAR 0 2
18076: PUSH
18077: LD_INT 80
18079: GREATER
18080: PUSH
18081: LD_VAR 0 3
18085: PPUSH
18086: CALL_OW 301
18090: OR
18091: IFFALSE 17968
// if un then
18093: LD_VAR 0 3
18097: IFFALSE 18108
// RemoveUnit ( un ) ;
18099: LD_VAR 0 3
18103: PPUSH
18104: CALL_OW 64
// end ;
18108: PPOPN 3
18110: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
18111: LD_EXP 80
18115: IFFALSE 18231
18117: GO 18119
18119: DISABLE
18120: LD_INT 0
18122: PPUSH
18123: PPUSH
18124: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
18125: LD_ADDR_VAR 0 2
18129: PUSH
18130: LD_INT 81
18132: PUSH
18133: LD_OWVAR 2
18137: PUSH
18138: EMPTY
18139: LIST
18140: LIST
18141: PUSH
18142: LD_INT 21
18144: PUSH
18145: LD_INT 1
18147: PUSH
18148: EMPTY
18149: LIST
18150: LIST
18151: PUSH
18152: EMPTY
18153: LIST
18154: LIST
18155: PPUSH
18156: CALL_OW 69
18160: ST_TO_ADDR
// ToLua ( playComputer() ) ;
18161: LD_STRING playComputer()
18163: PPUSH
18164: CALL_OW 559
// if not tmp then
18168: LD_VAR 0 2
18172: NOT
18173: IFFALSE 18177
// exit ;
18175: GO 18231
// for i in tmp do
18177: LD_ADDR_VAR 0 1
18181: PUSH
18182: LD_VAR 0 2
18186: PUSH
18187: FOR_IN
18188: IFFALSE 18229
// for j := 1 to 4 do
18190: LD_ADDR_VAR 0 3
18194: PUSH
18195: DOUBLE
18196: LD_INT 1
18198: DEC
18199: ST_TO_ADDR
18200: LD_INT 4
18202: PUSH
18203: FOR_TO
18204: IFFALSE 18225
// SetSkill ( i , j , 10 ) ;
18206: LD_VAR 0 1
18210: PPUSH
18211: LD_VAR 0 3
18215: PPUSH
18216: LD_INT 10
18218: PPUSH
18219: CALL_OW 237
18223: GO 18203
18225: POP
18226: POP
18227: GO 18187
18229: POP
18230: POP
// end ;
18231: PPOPN 3
18233: END
// every 0 0$1 trigger s30 do var i , tmp ;
18234: LD_EXP 81
18238: IFFALSE 18307
18240: GO 18242
18242: DISABLE
18243: LD_INT 0
18245: PPUSH
18246: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18247: LD_ADDR_VAR 0 2
18251: PUSH
18252: LD_INT 22
18254: PUSH
18255: LD_OWVAR 2
18259: PUSH
18260: EMPTY
18261: LIST
18262: LIST
18263: PPUSH
18264: CALL_OW 69
18268: ST_TO_ADDR
// if not tmp then
18269: LD_VAR 0 2
18273: NOT
18274: IFFALSE 18278
// exit ;
18276: GO 18307
// for i in tmp do
18278: LD_ADDR_VAR 0 1
18282: PUSH
18283: LD_VAR 0 2
18287: PUSH
18288: FOR_IN
18289: IFFALSE 18305
// SetLives ( i , 300 ) ;
18291: LD_VAR 0 1
18295: PPUSH
18296: LD_INT 300
18298: PPUSH
18299: CALL_OW 234
18303: GO 18288
18305: POP
18306: POP
// end ;
18307: PPOPN 2
18309: END
// every 0 0$1 trigger s60 do var i , tmp ;
18310: LD_EXP 82
18314: IFFALSE 18383
18316: GO 18318
18318: DISABLE
18319: LD_INT 0
18321: PPUSH
18322: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18323: LD_ADDR_VAR 0 2
18327: PUSH
18328: LD_INT 22
18330: PUSH
18331: LD_OWVAR 2
18335: PUSH
18336: EMPTY
18337: LIST
18338: LIST
18339: PPUSH
18340: CALL_OW 69
18344: ST_TO_ADDR
// if not tmp then
18345: LD_VAR 0 2
18349: NOT
18350: IFFALSE 18354
// exit ;
18352: GO 18383
// for i in tmp do
18354: LD_ADDR_VAR 0 1
18358: PUSH
18359: LD_VAR 0 2
18363: PUSH
18364: FOR_IN
18365: IFFALSE 18381
// SetLives ( i , 600 ) ;
18367: LD_VAR 0 1
18371: PPUSH
18372: LD_INT 600
18374: PPUSH
18375: CALL_OW 234
18379: GO 18364
18381: POP
18382: POP
// end ;
18383: PPOPN 2
18385: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18386: LD_INT 0
18388: PPUSH
// case cmd of 301 :
18389: LD_VAR 0 1
18393: PUSH
18394: LD_INT 301
18396: DOUBLE
18397: EQUAL
18398: IFTRUE 18402
18400: GO 18434
18402: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
18403: LD_VAR 0 6
18407: PPUSH
18408: LD_VAR 0 7
18412: PPUSH
18413: LD_VAR 0 8
18417: PPUSH
18418: LD_VAR 0 4
18422: PPUSH
18423: LD_VAR 0 5
18427: PPUSH
18428: CALL 19635 0 5
18432: GO 18555
18434: LD_INT 302
18436: DOUBLE
18437: EQUAL
18438: IFTRUE 18442
18440: GO 18479
18442: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
18443: LD_VAR 0 6
18447: PPUSH
18448: LD_VAR 0 7
18452: PPUSH
18453: LD_VAR 0 8
18457: PPUSH
18458: LD_VAR 0 9
18462: PPUSH
18463: LD_VAR 0 4
18467: PPUSH
18468: LD_VAR 0 5
18472: PPUSH
18473: CALL 19726 0 6
18477: GO 18555
18479: LD_INT 303
18481: DOUBLE
18482: EQUAL
18483: IFTRUE 18487
18485: GO 18524
18487: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
18488: LD_VAR 0 6
18492: PPUSH
18493: LD_VAR 0 7
18497: PPUSH
18498: LD_VAR 0 8
18502: PPUSH
18503: LD_VAR 0 9
18507: PPUSH
18508: LD_VAR 0 4
18512: PPUSH
18513: LD_VAR 0 5
18517: PPUSH
18518: CALL 18560 0 6
18522: GO 18555
18524: LD_INT 304
18526: DOUBLE
18527: EQUAL
18528: IFTRUE 18532
18530: GO 18554
18532: POP
// hHackTeleport ( unit , x , y ) ; end ;
18533: LD_VAR 0 2
18537: PPUSH
18538: LD_VAR 0 4
18542: PPUSH
18543: LD_VAR 0 5
18547: PPUSH
18548: CALL 20319 0 3
18552: GO 18555
18554: POP
// end ;
18555: LD_VAR 0 12
18559: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
18560: LD_INT 0
18562: PPUSH
18563: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
18564: LD_VAR 0 1
18568: PUSH
18569: LD_INT 1
18571: LESS
18572: PUSH
18573: LD_VAR 0 1
18577: PUSH
18578: LD_INT 3
18580: GREATER
18581: OR
18582: PUSH
18583: LD_VAR 0 5
18587: PPUSH
18588: LD_VAR 0 6
18592: PPUSH
18593: CALL_OW 428
18597: OR
18598: IFFALSE 18602
// exit ;
18600: GO 19322
// uc_side := your_side ;
18602: LD_ADDR_OWVAR 20
18606: PUSH
18607: LD_OWVAR 2
18611: ST_TO_ADDR
// uc_nation := nation ;
18612: LD_ADDR_OWVAR 21
18616: PUSH
18617: LD_VAR 0 1
18621: ST_TO_ADDR
// bc_level = 1 ;
18622: LD_ADDR_OWVAR 43
18626: PUSH
18627: LD_INT 1
18629: ST_TO_ADDR
// case btype of 1 :
18630: LD_VAR 0 2
18634: PUSH
18635: LD_INT 1
18637: DOUBLE
18638: EQUAL
18639: IFTRUE 18643
18641: GO 18654
18643: POP
// bc_type := b_depot ; 2 :
18644: LD_ADDR_OWVAR 42
18648: PUSH
18649: LD_INT 0
18651: ST_TO_ADDR
18652: GO 19266
18654: LD_INT 2
18656: DOUBLE
18657: EQUAL
18658: IFTRUE 18662
18660: GO 18673
18662: POP
// bc_type := b_warehouse ; 3 :
18663: LD_ADDR_OWVAR 42
18667: PUSH
18668: LD_INT 1
18670: ST_TO_ADDR
18671: GO 19266
18673: LD_INT 3
18675: DOUBLE
18676: EQUAL
18677: IFTRUE 18681
18679: GO 18692
18681: POP
// bc_type := b_lab ; 4 .. 9 :
18682: LD_ADDR_OWVAR 42
18686: PUSH
18687: LD_INT 6
18689: ST_TO_ADDR
18690: GO 19266
18692: LD_INT 4
18694: DOUBLE
18695: GREATEREQUAL
18696: IFFALSE 18704
18698: LD_INT 9
18700: DOUBLE
18701: LESSEQUAL
18702: IFTRUE 18706
18704: GO 18758
18706: POP
// begin bc_type := b_lab_half ;
18707: LD_ADDR_OWVAR 42
18711: PUSH
18712: LD_INT 7
18714: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
18715: LD_ADDR_OWVAR 44
18719: PUSH
18720: LD_INT 10
18722: PUSH
18723: LD_INT 11
18725: PUSH
18726: LD_INT 12
18728: PUSH
18729: LD_INT 15
18731: PUSH
18732: LD_INT 14
18734: PUSH
18735: LD_INT 13
18737: PUSH
18738: EMPTY
18739: LIST
18740: LIST
18741: LIST
18742: LIST
18743: LIST
18744: LIST
18745: PUSH
18746: LD_VAR 0 2
18750: PUSH
18751: LD_INT 3
18753: MINUS
18754: ARRAY
18755: ST_TO_ADDR
// end ; 10 .. 13 :
18756: GO 19266
18758: LD_INT 10
18760: DOUBLE
18761: GREATEREQUAL
18762: IFFALSE 18770
18764: LD_INT 13
18766: DOUBLE
18767: LESSEQUAL
18768: IFTRUE 18772
18770: GO 18849
18772: POP
// begin bc_type := b_lab_full ;
18773: LD_ADDR_OWVAR 42
18777: PUSH
18778: LD_INT 8
18780: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
18781: LD_ADDR_OWVAR 44
18785: PUSH
18786: LD_INT 10
18788: PUSH
18789: LD_INT 12
18791: PUSH
18792: LD_INT 14
18794: PUSH
18795: LD_INT 13
18797: PUSH
18798: EMPTY
18799: LIST
18800: LIST
18801: LIST
18802: LIST
18803: PUSH
18804: LD_VAR 0 2
18808: PUSH
18809: LD_INT 9
18811: MINUS
18812: ARRAY
18813: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
18814: LD_ADDR_OWVAR 45
18818: PUSH
18819: LD_INT 11
18821: PUSH
18822: LD_INT 15
18824: PUSH
18825: LD_INT 12
18827: PUSH
18828: LD_INT 15
18830: PUSH
18831: EMPTY
18832: LIST
18833: LIST
18834: LIST
18835: LIST
18836: PUSH
18837: LD_VAR 0 2
18841: PUSH
18842: LD_INT 9
18844: MINUS
18845: ARRAY
18846: ST_TO_ADDR
// end ; 14 :
18847: GO 19266
18849: LD_INT 14
18851: DOUBLE
18852: EQUAL
18853: IFTRUE 18857
18855: GO 18868
18857: POP
// bc_type := b_workshop ; 15 :
18858: LD_ADDR_OWVAR 42
18862: PUSH
18863: LD_INT 2
18865: ST_TO_ADDR
18866: GO 19266
18868: LD_INT 15
18870: DOUBLE
18871: EQUAL
18872: IFTRUE 18876
18874: GO 18887
18876: POP
// bc_type := b_factory ; 16 :
18877: LD_ADDR_OWVAR 42
18881: PUSH
18882: LD_INT 3
18884: ST_TO_ADDR
18885: GO 19266
18887: LD_INT 16
18889: DOUBLE
18890: EQUAL
18891: IFTRUE 18895
18893: GO 18906
18895: POP
// bc_type := b_ext_gun ; 17 :
18896: LD_ADDR_OWVAR 42
18900: PUSH
18901: LD_INT 17
18903: ST_TO_ADDR
18904: GO 19266
18906: LD_INT 17
18908: DOUBLE
18909: EQUAL
18910: IFTRUE 18914
18912: GO 18942
18914: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
18915: LD_ADDR_OWVAR 42
18919: PUSH
18920: LD_INT 19
18922: PUSH
18923: LD_INT 23
18925: PUSH
18926: LD_INT 19
18928: PUSH
18929: EMPTY
18930: LIST
18931: LIST
18932: LIST
18933: PUSH
18934: LD_VAR 0 1
18938: ARRAY
18939: ST_TO_ADDR
18940: GO 19266
18942: LD_INT 18
18944: DOUBLE
18945: EQUAL
18946: IFTRUE 18950
18948: GO 18961
18950: POP
// bc_type := b_ext_radar ; 19 :
18951: LD_ADDR_OWVAR 42
18955: PUSH
18956: LD_INT 20
18958: ST_TO_ADDR
18959: GO 19266
18961: LD_INT 19
18963: DOUBLE
18964: EQUAL
18965: IFTRUE 18969
18967: GO 18980
18969: POP
// bc_type := b_ext_radio ; 20 :
18970: LD_ADDR_OWVAR 42
18974: PUSH
18975: LD_INT 22
18977: ST_TO_ADDR
18978: GO 19266
18980: LD_INT 20
18982: DOUBLE
18983: EQUAL
18984: IFTRUE 18988
18986: GO 18999
18988: POP
// bc_type := b_ext_siberium ; 21 :
18989: LD_ADDR_OWVAR 42
18993: PUSH
18994: LD_INT 21
18996: ST_TO_ADDR
18997: GO 19266
18999: LD_INT 21
19001: DOUBLE
19002: EQUAL
19003: IFTRUE 19007
19005: GO 19018
19007: POP
// bc_type := b_ext_computer ; 22 :
19008: LD_ADDR_OWVAR 42
19012: PUSH
19013: LD_INT 24
19015: ST_TO_ADDR
19016: GO 19266
19018: LD_INT 22
19020: DOUBLE
19021: EQUAL
19022: IFTRUE 19026
19024: GO 19037
19026: POP
// bc_type := b_ext_track ; 23 :
19027: LD_ADDR_OWVAR 42
19031: PUSH
19032: LD_INT 16
19034: ST_TO_ADDR
19035: GO 19266
19037: LD_INT 23
19039: DOUBLE
19040: EQUAL
19041: IFTRUE 19045
19043: GO 19056
19045: POP
// bc_type := b_ext_laser ; 24 :
19046: LD_ADDR_OWVAR 42
19050: PUSH
19051: LD_INT 25
19053: ST_TO_ADDR
19054: GO 19266
19056: LD_INT 24
19058: DOUBLE
19059: EQUAL
19060: IFTRUE 19064
19062: GO 19075
19064: POP
// bc_type := b_control_tower ; 25 :
19065: LD_ADDR_OWVAR 42
19069: PUSH
19070: LD_INT 36
19072: ST_TO_ADDR
19073: GO 19266
19075: LD_INT 25
19077: DOUBLE
19078: EQUAL
19079: IFTRUE 19083
19081: GO 19094
19083: POP
// bc_type := b_breastwork ; 26 :
19084: LD_ADDR_OWVAR 42
19088: PUSH
19089: LD_INT 31
19091: ST_TO_ADDR
19092: GO 19266
19094: LD_INT 26
19096: DOUBLE
19097: EQUAL
19098: IFTRUE 19102
19100: GO 19113
19102: POP
// bc_type := b_bunker ; 27 :
19103: LD_ADDR_OWVAR 42
19107: PUSH
19108: LD_INT 32
19110: ST_TO_ADDR
19111: GO 19266
19113: LD_INT 27
19115: DOUBLE
19116: EQUAL
19117: IFTRUE 19121
19119: GO 19132
19121: POP
// bc_type := b_turret ; 28 :
19122: LD_ADDR_OWVAR 42
19126: PUSH
19127: LD_INT 33
19129: ST_TO_ADDR
19130: GO 19266
19132: LD_INT 28
19134: DOUBLE
19135: EQUAL
19136: IFTRUE 19140
19138: GO 19151
19140: POP
// bc_type := b_armoury ; 29 :
19141: LD_ADDR_OWVAR 42
19145: PUSH
19146: LD_INT 4
19148: ST_TO_ADDR
19149: GO 19266
19151: LD_INT 29
19153: DOUBLE
19154: EQUAL
19155: IFTRUE 19159
19157: GO 19170
19159: POP
// bc_type := b_barracks ; 30 :
19160: LD_ADDR_OWVAR 42
19164: PUSH
19165: LD_INT 5
19167: ST_TO_ADDR
19168: GO 19266
19170: LD_INT 30
19172: DOUBLE
19173: EQUAL
19174: IFTRUE 19178
19176: GO 19189
19178: POP
// bc_type := b_solar_power ; 31 :
19179: LD_ADDR_OWVAR 42
19183: PUSH
19184: LD_INT 27
19186: ST_TO_ADDR
19187: GO 19266
19189: LD_INT 31
19191: DOUBLE
19192: EQUAL
19193: IFTRUE 19197
19195: GO 19208
19197: POP
// bc_type := b_oil_power ; 32 :
19198: LD_ADDR_OWVAR 42
19202: PUSH
19203: LD_INT 26
19205: ST_TO_ADDR
19206: GO 19266
19208: LD_INT 32
19210: DOUBLE
19211: EQUAL
19212: IFTRUE 19216
19214: GO 19227
19216: POP
// bc_type := b_siberite_power ; 33 :
19217: LD_ADDR_OWVAR 42
19221: PUSH
19222: LD_INT 28
19224: ST_TO_ADDR
19225: GO 19266
19227: LD_INT 33
19229: DOUBLE
19230: EQUAL
19231: IFTRUE 19235
19233: GO 19246
19235: POP
// bc_type := b_oil_mine ; 34 :
19236: LD_ADDR_OWVAR 42
19240: PUSH
19241: LD_INT 29
19243: ST_TO_ADDR
19244: GO 19266
19246: LD_INT 34
19248: DOUBLE
19249: EQUAL
19250: IFTRUE 19254
19252: GO 19265
19254: POP
// bc_type := b_siberite_mine ; end ;
19255: LD_ADDR_OWVAR 42
19259: PUSH
19260: LD_INT 30
19262: ST_TO_ADDR
19263: GO 19266
19265: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
19266: LD_ADDR_VAR 0 8
19270: PUSH
19271: LD_VAR 0 5
19275: PPUSH
19276: LD_VAR 0 6
19280: PPUSH
19281: LD_VAR 0 3
19285: PPUSH
19286: CALL_OW 47
19290: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
19291: LD_OWVAR 42
19295: PUSH
19296: LD_INT 32
19298: PUSH
19299: LD_INT 33
19301: PUSH
19302: EMPTY
19303: LIST
19304: LIST
19305: IN
19306: IFFALSE 19322
// PlaceWeaponTurret ( b , weapon ) ;
19308: LD_VAR 0 8
19312: PPUSH
19313: LD_VAR 0 4
19317: PPUSH
19318: CALL_OW 431
// end ;
19322: LD_VAR 0 7
19326: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
19327: LD_INT 0
19329: PPUSH
19330: PPUSH
19331: PPUSH
19332: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19333: LD_ADDR_VAR 0 4
19337: PUSH
19338: LD_INT 22
19340: PUSH
19341: LD_OWVAR 2
19345: PUSH
19346: EMPTY
19347: LIST
19348: LIST
19349: PUSH
19350: LD_INT 2
19352: PUSH
19353: LD_INT 30
19355: PUSH
19356: LD_INT 0
19358: PUSH
19359: EMPTY
19360: LIST
19361: LIST
19362: PUSH
19363: LD_INT 30
19365: PUSH
19366: LD_INT 1
19368: PUSH
19369: EMPTY
19370: LIST
19371: LIST
19372: PUSH
19373: EMPTY
19374: LIST
19375: LIST
19376: LIST
19377: PUSH
19378: EMPTY
19379: LIST
19380: LIST
19381: PPUSH
19382: CALL_OW 69
19386: ST_TO_ADDR
// if not tmp then
19387: LD_VAR 0 4
19391: NOT
19392: IFFALSE 19396
// exit ;
19394: GO 19455
// for i in tmp do
19396: LD_ADDR_VAR 0 2
19400: PUSH
19401: LD_VAR 0 4
19405: PUSH
19406: FOR_IN
19407: IFFALSE 19453
// for j = 1 to 3 do
19409: LD_ADDR_VAR 0 3
19413: PUSH
19414: DOUBLE
19415: LD_INT 1
19417: DEC
19418: ST_TO_ADDR
19419: LD_INT 3
19421: PUSH
19422: FOR_TO
19423: IFFALSE 19449
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
19425: LD_VAR 0 2
19429: PPUSH
19430: CALL_OW 274
19434: PPUSH
19435: LD_VAR 0 3
19439: PPUSH
19440: LD_INT 99999
19442: PPUSH
19443: CALL_OW 277
19447: GO 19422
19449: POP
19450: POP
19451: GO 19406
19453: POP
19454: POP
// end ;
19455: LD_VAR 0 1
19459: RET
// export function hHackSetLevel10 ; var i , j ; begin
19460: LD_INT 0
19462: PPUSH
19463: PPUSH
19464: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19465: LD_ADDR_VAR 0 2
19469: PUSH
19470: LD_INT 21
19472: PUSH
19473: LD_INT 1
19475: PUSH
19476: EMPTY
19477: LIST
19478: LIST
19479: PPUSH
19480: CALL_OW 69
19484: PUSH
19485: FOR_IN
19486: IFFALSE 19538
// if IsSelected ( i ) then
19488: LD_VAR 0 2
19492: PPUSH
19493: CALL_OW 306
19497: IFFALSE 19536
// begin for j := 1 to 4 do
19499: LD_ADDR_VAR 0 3
19503: PUSH
19504: DOUBLE
19505: LD_INT 1
19507: DEC
19508: ST_TO_ADDR
19509: LD_INT 4
19511: PUSH
19512: FOR_TO
19513: IFFALSE 19534
// SetSkill ( i , j , 10 ) ;
19515: LD_VAR 0 2
19519: PPUSH
19520: LD_VAR 0 3
19524: PPUSH
19525: LD_INT 10
19527: PPUSH
19528: CALL_OW 237
19532: GO 19512
19534: POP
19535: POP
// end ;
19536: GO 19485
19538: POP
19539: POP
// end ;
19540: LD_VAR 0 1
19544: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
19545: LD_INT 0
19547: PPUSH
19548: PPUSH
19549: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
19550: LD_ADDR_VAR 0 2
19554: PUSH
19555: LD_INT 22
19557: PUSH
19558: LD_OWVAR 2
19562: PUSH
19563: EMPTY
19564: LIST
19565: LIST
19566: PUSH
19567: LD_INT 21
19569: PUSH
19570: LD_INT 1
19572: PUSH
19573: EMPTY
19574: LIST
19575: LIST
19576: PUSH
19577: EMPTY
19578: LIST
19579: LIST
19580: PPUSH
19581: CALL_OW 69
19585: PUSH
19586: FOR_IN
19587: IFFALSE 19628
// begin for j := 1 to 4 do
19589: LD_ADDR_VAR 0 3
19593: PUSH
19594: DOUBLE
19595: LD_INT 1
19597: DEC
19598: ST_TO_ADDR
19599: LD_INT 4
19601: PUSH
19602: FOR_TO
19603: IFFALSE 19624
// SetSkill ( i , j , 10 ) ;
19605: LD_VAR 0 2
19609: PPUSH
19610: LD_VAR 0 3
19614: PPUSH
19615: LD_INT 10
19617: PPUSH
19618: CALL_OW 237
19622: GO 19602
19624: POP
19625: POP
// end ;
19626: GO 19586
19628: POP
19629: POP
// end ;
19630: LD_VAR 0 1
19634: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
19635: LD_INT 0
19637: PPUSH
// uc_side := your_side ;
19638: LD_ADDR_OWVAR 20
19642: PUSH
19643: LD_OWVAR 2
19647: ST_TO_ADDR
// uc_nation := nation ;
19648: LD_ADDR_OWVAR 21
19652: PUSH
19653: LD_VAR 0 1
19657: ST_TO_ADDR
// InitHc ;
19658: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
19662: LD_INT 0
19664: PPUSH
19665: LD_VAR 0 2
19669: PPUSH
19670: LD_VAR 0 3
19674: PPUSH
19675: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
19679: LD_VAR 0 4
19683: PPUSH
19684: LD_VAR 0 5
19688: PPUSH
19689: CALL_OW 428
19693: PUSH
19694: LD_INT 0
19696: EQUAL
19697: IFFALSE 19721
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
19699: CALL_OW 44
19703: PPUSH
19704: LD_VAR 0 4
19708: PPUSH
19709: LD_VAR 0 5
19713: PPUSH
19714: LD_INT 1
19716: PPUSH
19717: CALL_OW 48
// end ;
19721: LD_VAR 0 6
19725: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
19726: LD_INT 0
19728: PPUSH
19729: PPUSH
// uc_side := your_side ;
19730: LD_ADDR_OWVAR 20
19734: PUSH
19735: LD_OWVAR 2
19739: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
19740: LD_VAR 0 1
19744: PUSH
19745: LD_INT 1
19747: PUSH
19748: LD_INT 2
19750: PUSH
19751: LD_INT 3
19753: PUSH
19754: LD_INT 4
19756: PUSH
19757: LD_INT 5
19759: PUSH
19760: EMPTY
19761: LIST
19762: LIST
19763: LIST
19764: LIST
19765: LIST
19766: IN
19767: IFFALSE 19779
// uc_nation := nation_american else
19769: LD_ADDR_OWVAR 21
19773: PUSH
19774: LD_INT 1
19776: ST_TO_ADDR
19777: GO 19822
// if chassis in [ 11 , 12 , 13 , 14 ] then
19779: LD_VAR 0 1
19783: PUSH
19784: LD_INT 11
19786: PUSH
19787: LD_INT 12
19789: PUSH
19790: LD_INT 13
19792: PUSH
19793: LD_INT 14
19795: PUSH
19796: EMPTY
19797: LIST
19798: LIST
19799: LIST
19800: LIST
19801: IN
19802: IFFALSE 19814
// uc_nation := nation_arabian else
19804: LD_ADDR_OWVAR 21
19808: PUSH
19809: LD_INT 2
19811: ST_TO_ADDR
19812: GO 19822
// uc_nation := nation_russian ;
19814: LD_ADDR_OWVAR 21
19818: PUSH
19819: LD_INT 3
19821: ST_TO_ADDR
// vc_chassis := chassis ;
19822: LD_ADDR_OWVAR 37
19826: PUSH
19827: LD_VAR 0 1
19831: ST_TO_ADDR
// vc_engine := engine ;
19832: LD_ADDR_OWVAR 39
19836: PUSH
19837: LD_VAR 0 2
19841: ST_TO_ADDR
// vc_control := control ;
19842: LD_ADDR_OWVAR 38
19846: PUSH
19847: LD_VAR 0 3
19851: ST_TO_ADDR
// vc_weapon := weapon ;
19852: LD_ADDR_OWVAR 40
19856: PUSH
19857: LD_VAR 0 4
19861: ST_TO_ADDR
// un := CreateVehicle ;
19862: LD_ADDR_VAR 0 8
19866: PUSH
19867: CALL_OW 45
19871: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
19872: LD_VAR 0 8
19876: PPUSH
19877: LD_INT 0
19879: PPUSH
19880: LD_INT 5
19882: PPUSH
19883: CALL_OW 12
19887: PPUSH
19888: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
19892: LD_VAR 0 8
19896: PPUSH
19897: LD_VAR 0 5
19901: PPUSH
19902: LD_VAR 0 6
19906: PPUSH
19907: LD_INT 1
19909: PPUSH
19910: CALL_OW 48
// end ;
19914: LD_VAR 0 7
19918: RET
// export hInvincible ; every 1 do
19919: GO 19921
19921: DISABLE
// hInvincible := [ ] ;
19922: LD_ADDR_EXP 83
19926: PUSH
19927: EMPTY
19928: ST_TO_ADDR
19929: END
// every 10 do var i ;
19930: GO 19932
19932: DISABLE
19933: LD_INT 0
19935: PPUSH
// begin enable ;
19936: ENABLE
// if not hInvincible then
19937: LD_EXP 83
19941: NOT
19942: IFFALSE 19946
// exit ;
19944: GO 19990
// for i in hInvincible do
19946: LD_ADDR_VAR 0 1
19950: PUSH
19951: LD_EXP 83
19955: PUSH
19956: FOR_IN
19957: IFFALSE 19988
// if GetLives ( i ) < 1000 then
19959: LD_VAR 0 1
19963: PPUSH
19964: CALL_OW 256
19968: PUSH
19969: LD_INT 1000
19971: LESS
19972: IFFALSE 19986
// SetLives ( i , 1000 ) ;
19974: LD_VAR 0 1
19978: PPUSH
19979: LD_INT 1000
19981: PPUSH
19982: CALL_OW 234
19986: GO 19956
19988: POP
19989: POP
// end ;
19990: PPOPN 1
19992: END
// export function hHackInvincible ; var i ; begin
19993: LD_INT 0
19995: PPUSH
19996: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
19997: LD_ADDR_VAR 0 2
20001: PUSH
20002: LD_INT 2
20004: PUSH
20005: LD_INT 21
20007: PUSH
20008: LD_INT 1
20010: PUSH
20011: EMPTY
20012: LIST
20013: LIST
20014: PUSH
20015: LD_INT 21
20017: PUSH
20018: LD_INT 2
20020: PUSH
20021: EMPTY
20022: LIST
20023: LIST
20024: PUSH
20025: EMPTY
20026: LIST
20027: LIST
20028: LIST
20029: PPUSH
20030: CALL_OW 69
20034: PUSH
20035: FOR_IN
20036: IFFALSE 20097
// if IsSelected ( i ) then
20038: LD_VAR 0 2
20042: PPUSH
20043: CALL_OW 306
20047: IFFALSE 20095
// begin if i in hInvincible then
20049: LD_VAR 0 2
20053: PUSH
20054: LD_EXP 83
20058: IN
20059: IFFALSE 20079
// hInvincible := hInvincible diff i else
20061: LD_ADDR_EXP 83
20065: PUSH
20066: LD_EXP 83
20070: PUSH
20071: LD_VAR 0 2
20075: DIFF
20076: ST_TO_ADDR
20077: GO 20095
// hInvincible := hInvincible union i ;
20079: LD_ADDR_EXP 83
20083: PUSH
20084: LD_EXP 83
20088: PUSH
20089: LD_VAR 0 2
20093: UNION
20094: ST_TO_ADDR
// end ;
20095: GO 20035
20097: POP
20098: POP
// end ;
20099: LD_VAR 0 1
20103: RET
// export function hHackInvisible ; var i , j ; begin
20104: LD_INT 0
20106: PPUSH
20107: PPUSH
20108: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20109: LD_ADDR_VAR 0 2
20113: PUSH
20114: LD_INT 21
20116: PUSH
20117: LD_INT 1
20119: PUSH
20120: EMPTY
20121: LIST
20122: LIST
20123: PPUSH
20124: CALL_OW 69
20128: PUSH
20129: FOR_IN
20130: IFFALSE 20154
// if IsSelected ( i ) then
20132: LD_VAR 0 2
20136: PPUSH
20137: CALL_OW 306
20141: IFFALSE 20152
// ComForceInvisible ( i ) ;
20143: LD_VAR 0 2
20147: PPUSH
20148: CALL_OW 496
20152: GO 20129
20154: POP
20155: POP
// end ;
20156: LD_VAR 0 1
20160: RET
// export function hHackChangeYourSide ; begin
20161: LD_INT 0
20163: PPUSH
// if your_side = 8 then
20164: LD_OWVAR 2
20168: PUSH
20169: LD_INT 8
20171: EQUAL
20172: IFFALSE 20184
// your_side := 0 else
20174: LD_ADDR_OWVAR 2
20178: PUSH
20179: LD_INT 0
20181: ST_TO_ADDR
20182: GO 20198
// your_side := your_side + 1 ;
20184: LD_ADDR_OWVAR 2
20188: PUSH
20189: LD_OWVAR 2
20193: PUSH
20194: LD_INT 1
20196: PLUS
20197: ST_TO_ADDR
// end ;
20198: LD_VAR 0 1
20202: RET
// export function hHackChangeUnitSide ; var i , j ; begin
20203: LD_INT 0
20205: PPUSH
20206: PPUSH
20207: PPUSH
// for i in all_units do
20208: LD_ADDR_VAR 0 2
20212: PUSH
20213: LD_OWVAR 3
20217: PUSH
20218: FOR_IN
20219: IFFALSE 20297
// if IsSelected ( i ) then
20221: LD_VAR 0 2
20225: PPUSH
20226: CALL_OW 306
20230: IFFALSE 20295
// begin j := GetSide ( i ) ;
20232: LD_ADDR_VAR 0 3
20236: PUSH
20237: LD_VAR 0 2
20241: PPUSH
20242: CALL_OW 255
20246: ST_TO_ADDR
// if j = 8 then
20247: LD_VAR 0 3
20251: PUSH
20252: LD_INT 8
20254: EQUAL
20255: IFFALSE 20267
// j := 0 else
20257: LD_ADDR_VAR 0 3
20261: PUSH
20262: LD_INT 0
20264: ST_TO_ADDR
20265: GO 20281
// j := j + 1 ;
20267: LD_ADDR_VAR 0 3
20271: PUSH
20272: LD_VAR 0 3
20276: PUSH
20277: LD_INT 1
20279: PLUS
20280: ST_TO_ADDR
// SetSide ( i , j ) ;
20281: LD_VAR 0 2
20285: PPUSH
20286: LD_VAR 0 3
20290: PPUSH
20291: CALL_OW 235
// end ;
20295: GO 20218
20297: POP
20298: POP
// end ;
20299: LD_VAR 0 1
20303: RET
// export function hHackFog ; begin
20304: LD_INT 0
20306: PPUSH
// FogOff ( true ) ;
20307: LD_INT 1
20309: PPUSH
20310: CALL_OW 344
// end ;
20314: LD_VAR 0 1
20318: RET
// export function hHackTeleport ( unit , x , y ) ; begin
20319: LD_INT 0
20321: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
20322: LD_VAR 0 1
20326: PPUSH
20327: LD_VAR 0 2
20331: PPUSH
20332: LD_VAR 0 3
20336: PPUSH
20337: LD_INT 1
20339: PPUSH
20340: LD_INT 1
20342: PPUSH
20343: CALL_OW 483
// CenterOnXY ( x , y ) ;
20347: LD_VAR 0 2
20351: PPUSH
20352: LD_VAR 0 3
20356: PPUSH
20357: CALL_OW 84
// end ;
20361: LD_VAR 0 4
20365: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
20366: LD_INT 0
20368: PPUSH
20369: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
20370: LD_VAR 0 1
20374: NOT
20375: PUSH
20376: LD_VAR 0 2
20380: PPUSH
20381: LD_VAR 0 3
20385: PPUSH
20386: CALL_OW 488
20390: NOT
20391: OR
20392: PUSH
20393: LD_VAR 0 1
20397: PPUSH
20398: CALL_OW 266
20402: PUSH
20403: LD_INT 3
20405: NONEQUAL
20406: PUSH
20407: LD_VAR 0 1
20411: PPUSH
20412: CALL_OW 247
20416: PUSH
20417: LD_INT 1
20419: EQUAL
20420: NOT
20421: AND
20422: OR
20423: IFFALSE 20427
// exit ;
20425: GO 20576
// if GetType ( factory ) = unit_human then
20427: LD_VAR 0 1
20431: PPUSH
20432: CALL_OW 247
20436: PUSH
20437: LD_INT 1
20439: EQUAL
20440: IFFALSE 20457
// factory := IsInUnit ( factory ) ;
20442: LD_ADDR_VAR 0 1
20446: PUSH
20447: LD_VAR 0 1
20451: PPUSH
20452: CALL_OW 310
20456: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
20457: LD_VAR 0 1
20461: PPUSH
20462: CALL_OW 266
20466: PUSH
20467: LD_INT 3
20469: NONEQUAL
20470: IFFALSE 20474
// exit ;
20472: GO 20576
// if HexInfo ( x , y ) = factory then
20474: LD_VAR 0 2
20478: PPUSH
20479: LD_VAR 0 3
20483: PPUSH
20484: CALL_OW 428
20488: PUSH
20489: LD_VAR 0 1
20493: EQUAL
20494: IFFALSE 20521
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
20496: LD_ADDR_EXP 84
20500: PUSH
20501: LD_EXP 84
20505: PPUSH
20506: LD_VAR 0 1
20510: PPUSH
20511: LD_INT 0
20513: PPUSH
20514: CALL_OW 1
20518: ST_TO_ADDR
20519: GO 20572
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
20521: LD_ADDR_EXP 84
20525: PUSH
20526: LD_EXP 84
20530: PPUSH
20531: LD_VAR 0 1
20535: PPUSH
20536: LD_VAR 0 1
20540: PPUSH
20541: CALL_OW 255
20545: PUSH
20546: LD_VAR 0 1
20550: PUSH
20551: LD_VAR 0 2
20555: PUSH
20556: LD_VAR 0 3
20560: PUSH
20561: EMPTY
20562: LIST
20563: LIST
20564: LIST
20565: LIST
20566: PPUSH
20567: CALL_OW 1
20571: ST_TO_ADDR
// UpdateFactoryWaypoints ;
20572: CALL 20581 0 0
// end ;
20576: LD_VAR 0 4
20580: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
20581: LD_INT 0
20583: PPUSH
20584: PPUSH
20585: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
20586: LD_STRING resetFactoryWaypoint();
20588: PPUSH
20589: CALL_OW 559
// if factoryWaypoints then
20593: LD_EXP 84
20597: IFFALSE 20723
// begin list := PrepareArray ( factoryWaypoints ) ;
20599: LD_ADDR_VAR 0 3
20603: PUSH
20604: LD_EXP 84
20608: PPUSH
20609: CALL 67192 0 1
20613: ST_TO_ADDR
// for i := 1 to list do
20614: LD_ADDR_VAR 0 2
20618: PUSH
20619: DOUBLE
20620: LD_INT 1
20622: DEC
20623: ST_TO_ADDR
20624: LD_VAR 0 3
20628: PUSH
20629: FOR_TO
20630: IFFALSE 20721
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
20632: LD_STRING setFactoryWaypointXY(
20634: PUSH
20635: LD_VAR 0 3
20639: PUSH
20640: LD_VAR 0 2
20644: ARRAY
20645: PUSH
20646: LD_INT 1
20648: ARRAY
20649: STR
20650: PUSH
20651: LD_STRING ,
20653: STR
20654: PUSH
20655: LD_VAR 0 3
20659: PUSH
20660: LD_VAR 0 2
20664: ARRAY
20665: PUSH
20666: LD_INT 2
20668: ARRAY
20669: STR
20670: PUSH
20671: LD_STRING ,
20673: STR
20674: PUSH
20675: LD_VAR 0 3
20679: PUSH
20680: LD_VAR 0 2
20684: ARRAY
20685: PUSH
20686: LD_INT 3
20688: ARRAY
20689: STR
20690: PUSH
20691: LD_STRING ,
20693: STR
20694: PUSH
20695: LD_VAR 0 3
20699: PUSH
20700: LD_VAR 0 2
20704: ARRAY
20705: PUSH
20706: LD_INT 4
20708: ARRAY
20709: STR
20710: PUSH
20711: LD_STRING )
20713: STR
20714: PPUSH
20715: CALL_OW 559
20719: GO 20629
20721: POP
20722: POP
// end ; end ;
20723: LD_VAR 0 1
20727: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
20728: LD_INT 0
20730: PPUSH
// if HexInfo ( x , y ) = warehouse then
20731: LD_VAR 0 2
20735: PPUSH
20736: LD_VAR 0 3
20740: PPUSH
20741: CALL_OW 428
20745: PUSH
20746: LD_VAR 0 1
20750: EQUAL
20751: IFFALSE 20778
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
20753: LD_ADDR_EXP 85
20757: PUSH
20758: LD_EXP 85
20762: PPUSH
20763: LD_VAR 0 1
20767: PPUSH
20768: LD_INT 0
20770: PPUSH
20771: CALL_OW 1
20775: ST_TO_ADDR
20776: GO 20829
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
20778: LD_ADDR_EXP 85
20782: PUSH
20783: LD_EXP 85
20787: PPUSH
20788: LD_VAR 0 1
20792: PPUSH
20793: LD_VAR 0 1
20797: PPUSH
20798: CALL_OW 255
20802: PUSH
20803: LD_VAR 0 1
20807: PUSH
20808: LD_VAR 0 2
20812: PUSH
20813: LD_VAR 0 3
20817: PUSH
20818: EMPTY
20819: LIST
20820: LIST
20821: LIST
20822: LIST
20823: PPUSH
20824: CALL_OW 1
20828: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
20829: CALL 20838 0 0
// end ;
20833: LD_VAR 0 4
20837: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
20838: LD_INT 0
20840: PPUSH
20841: PPUSH
20842: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
20843: LD_STRING resetWarehouseGatheringPoints();
20845: PPUSH
20846: CALL_OW 559
// if warehouseGatheringPoints then
20850: LD_EXP 85
20854: IFFALSE 20980
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
20856: LD_ADDR_VAR 0 3
20860: PUSH
20861: LD_EXP 85
20865: PPUSH
20866: CALL 67192 0 1
20870: ST_TO_ADDR
// for i := 1 to list do
20871: LD_ADDR_VAR 0 2
20875: PUSH
20876: DOUBLE
20877: LD_INT 1
20879: DEC
20880: ST_TO_ADDR
20881: LD_VAR 0 3
20885: PUSH
20886: FOR_TO
20887: IFFALSE 20978
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
20889: LD_STRING setWarehouseGatheringPointXY(
20891: PUSH
20892: LD_VAR 0 3
20896: PUSH
20897: LD_VAR 0 2
20901: ARRAY
20902: PUSH
20903: LD_INT 1
20905: ARRAY
20906: STR
20907: PUSH
20908: LD_STRING ,
20910: STR
20911: PUSH
20912: LD_VAR 0 3
20916: PUSH
20917: LD_VAR 0 2
20921: ARRAY
20922: PUSH
20923: LD_INT 2
20925: ARRAY
20926: STR
20927: PUSH
20928: LD_STRING ,
20930: STR
20931: PUSH
20932: LD_VAR 0 3
20936: PUSH
20937: LD_VAR 0 2
20941: ARRAY
20942: PUSH
20943: LD_INT 3
20945: ARRAY
20946: STR
20947: PUSH
20948: LD_STRING ,
20950: STR
20951: PUSH
20952: LD_VAR 0 3
20956: PUSH
20957: LD_VAR 0 2
20961: ARRAY
20962: PUSH
20963: LD_INT 4
20965: ARRAY
20966: STR
20967: PUSH
20968: LD_STRING )
20970: STR
20971: PPUSH
20972: CALL_OW 559
20976: GO 20886
20978: POP
20979: POP
// end ; end ;
20980: LD_VAR 0 1
20984: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
20985: LD_EXP 85
20989: IFFALSE 21674
20991: GO 20993
20993: DISABLE
20994: LD_INT 0
20996: PPUSH
20997: PPUSH
20998: PPUSH
20999: PPUSH
21000: PPUSH
21001: PPUSH
21002: PPUSH
21003: PPUSH
21004: PPUSH
// begin enable ;
21005: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
21006: LD_ADDR_VAR 0 3
21010: PUSH
21011: LD_EXP 85
21015: PPUSH
21016: CALL 67192 0 1
21020: ST_TO_ADDR
// if not list then
21021: LD_VAR 0 3
21025: NOT
21026: IFFALSE 21030
// exit ;
21028: GO 21674
// for i := 1 to list do
21030: LD_ADDR_VAR 0 1
21034: PUSH
21035: DOUBLE
21036: LD_INT 1
21038: DEC
21039: ST_TO_ADDR
21040: LD_VAR 0 3
21044: PUSH
21045: FOR_TO
21046: IFFALSE 21672
// begin depot := list [ i ] [ 2 ] ;
21048: LD_ADDR_VAR 0 8
21052: PUSH
21053: LD_VAR 0 3
21057: PUSH
21058: LD_VAR 0 1
21062: ARRAY
21063: PUSH
21064: LD_INT 2
21066: ARRAY
21067: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
21068: LD_ADDR_VAR 0 5
21072: PUSH
21073: LD_VAR 0 3
21077: PUSH
21078: LD_VAR 0 1
21082: ARRAY
21083: PUSH
21084: LD_INT 1
21086: ARRAY
21087: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
21088: LD_VAR 0 8
21092: PPUSH
21093: CALL_OW 301
21097: PUSH
21098: LD_VAR 0 5
21102: PUSH
21103: LD_VAR 0 8
21107: PPUSH
21108: CALL_OW 255
21112: NONEQUAL
21113: OR
21114: IFFALSE 21143
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
21116: LD_ADDR_EXP 85
21120: PUSH
21121: LD_EXP 85
21125: PPUSH
21126: LD_VAR 0 8
21130: PPUSH
21131: LD_INT 0
21133: PPUSH
21134: CALL_OW 1
21138: ST_TO_ADDR
// exit ;
21139: POP
21140: POP
21141: GO 21674
// end ; x := list [ i ] [ 3 ] ;
21143: LD_ADDR_VAR 0 6
21147: PUSH
21148: LD_VAR 0 3
21152: PUSH
21153: LD_VAR 0 1
21157: ARRAY
21158: PUSH
21159: LD_INT 3
21161: ARRAY
21162: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
21163: LD_ADDR_VAR 0 7
21167: PUSH
21168: LD_VAR 0 3
21172: PUSH
21173: LD_VAR 0 1
21177: ARRAY
21178: PUSH
21179: LD_INT 4
21181: ARRAY
21182: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
21183: LD_ADDR_VAR 0 9
21187: PUSH
21188: LD_VAR 0 6
21192: PPUSH
21193: LD_VAR 0 7
21197: PPUSH
21198: LD_INT 16
21200: PPUSH
21201: CALL 65780 0 3
21205: ST_TO_ADDR
// if not cratesNearbyPoint then
21206: LD_VAR 0 9
21210: NOT
21211: IFFALSE 21217
// exit ;
21213: POP
21214: POP
21215: GO 21674
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
21217: LD_ADDR_VAR 0 4
21221: PUSH
21222: LD_INT 22
21224: PUSH
21225: LD_VAR 0 5
21229: PUSH
21230: EMPTY
21231: LIST
21232: LIST
21233: PUSH
21234: LD_INT 3
21236: PUSH
21237: LD_INT 60
21239: PUSH
21240: EMPTY
21241: LIST
21242: PUSH
21243: EMPTY
21244: LIST
21245: LIST
21246: PUSH
21247: LD_INT 91
21249: PUSH
21250: LD_VAR 0 8
21254: PUSH
21255: LD_INT 6
21257: PUSH
21258: EMPTY
21259: LIST
21260: LIST
21261: LIST
21262: PUSH
21263: LD_INT 2
21265: PUSH
21266: LD_INT 25
21268: PUSH
21269: LD_INT 2
21271: PUSH
21272: EMPTY
21273: LIST
21274: LIST
21275: PUSH
21276: LD_INT 25
21278: PUSH
21279: LD_INT 16
21281: PUSH
21282: EMPTY
21283: LIST
21284: LIST
21285: PUSH
21286: EMPTY
21287: LIST
21288: LIST
21289: LIST
21290: PUSH
21291: EMPTY
21292: LIST
21293: LIST
21294: LIST
21295: LIST
21296: PPUSH
21297: CALL_OW 69
21301: PUSH
21302: LD_VAR 0 8
21306: PPUSH
21307: CALL_OW 313
21311: PPUSH
21312: LD_INT 3
21314: PUSH
21315: LD_INT 60
21317: PUSH
21318: EMPTY
21319: LIST
21320: PUSH
21321: EMPTY
21322: LIST
21323: LIST
21324: PUSH
21325: LD_INT 2
21327: PUSH
21328: LD_INT 25
21330: PUSH
21331: LD_INT 2
21333: PUSH
21334: EMPTY
21335: LIST
21336: LIST
21337: PUSH
21338: LD_INT 25
21340: PUSH
21341: LD_INT 16
21343: PUSH
21344: EMPTY
21345: LIST
21346: LIST
21347: PUSH
21348: EMPTY
21349: LIST
21350: LIST
21351: LIST
21352: PUSH
21353: EMPTY
21354: LIST
21355: LIST
21356: PPUSH
21357: CALL_OW 72
21361: UNION
21362: ST_TO_ADDR
// if tmp then
21363: LD_VAR 0 4
21367: IFFALSE 21447
// begin tmp := ShrinkArray ( tmp , 3 ) ;
21369: LD_ADDR_VAR 0 4
21373: PUSH
21374: LD_VAR 0 4
21378: PPUSH
21379: LD_INT 3
21381: PPUSH
21382: CALL 63749 0 2
21386: ST_TO_ADDR
// for j in tmp do
21387: LD_ADDR_VAR 0 2
21391: PUSH
21392: LD_VAR 0 4
21396: PUSH
21397: FOR_IN
21398: IFFALSE 21441
// begin if IsInUnit ( j ) then
21400: LD_VAR 0 2
21404: PPUSH
21405: CALL_OW 310
21409: IFFALSE 21420
// ComExit ( j ) ;
21411: LD_VAR 0 2
21415: PPUSH
21416: CALL 63832 0 1
// AddComCollect ( j , x , y ) ;
21420: LD_VAR 0 2
21424: PPUSH
21425: LD_VAR 0 6
21429: PPUSH
21430: LD_VAR 0 7
21434: PPUSH
21435: CALL_OW 177
// end ;
21439: GO 21397
21441: POP
21442: POP
// exit ;
21443: POP
21444: POP
21445: GO 21674
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
21447: LD_ADDR_VAR 0 4
21451: PUSH
21452: LD_INT 22
21454: PUSH
21455: LD_VAR 0 5
21459: PUSH
21460: EMPTY
21461: LIST
21462: LIST
21463: PUSH
21464: LD_INT 91
21466: PUSH
21467: LD_VAR 0 8
21471: PUSH
21472: LD_INT 8
21474: PUSH
21475: EMPTY
21476: LIST
21477: LIST
21478: LIST
21479: PUSH
21480: LD_INT 2
21482: PUSH
21483: LD_INT 34
21485: PUSH
21486: LD_INT 12
21488: PUSH
21489: EMPTY
21490: LIST
21491: LIST
21492: PUSH
21493: LD_INT 34
21495: PUSH
21496: LD_INT 51
21498: PUSH
21499: EMPTY
21500: LIST
21501: LIST
21502: PUSH
21503: LD_INT 34
21505: PUSH
21506: LD_INT 32
21508: PUSH
21509: EMPTY
21510: LIST
21511: LIST
21512: PUSH
21513: LD_INT 34
21515: PUSH
21516: LD_INT 89
21518: PUSH
21519: EMPTY
21520: LIST
21521: LIST
21522: PUSH
21523: EMPTY
21524: LIST
21525: LIST
21526: LIST
21527: LIST
21528: LIST
21529: PUSH
21530: EMPTY
21531: LIST
21532: LIST
21533: LIST
21534: PPUSH
21535: CALL_OW 69
21539: ST_TO_ADDR
// if tmp then
21540: LD_VAR 0 4
21544: IFFALSE 21670
// begin for j in tmp do
21546: LD_ADDR_VAR 0 2
21550: PUSH
21551: LD_VAR 0 4
21555: PUSH
21556: FOR_IN
21557: IFFALSE 21668
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
21559: LD_VAR 0 2
21563: PPUSH
21564: CALL_OW 262
21568: PUSH
21569: LD_INT 3
21571: EQUAL
21572: PUSH
21573: LD_VAR 0 2
21577: PPUSH
21578: CALL_OW 261
21582: PUSH
21583: LD_INT 20
21585: GREATER
21586: OR
21587: PUSH
21588: LD_VAR 0 2
21592: PPUSH
21593: CALL_OW 314
21597: NOT
21598: AND
21599: PUSH
21600: LD_VAR 0 2
21604: PPUSH
21605: CALL_OW 263
21609: PUSH
21610: LD_INT 1
21612: NONEQUAL
21613: PUSH
21614: LD_VAR 0 2
21618: PPUSH
21619: CALL_OW 311
21623: OR
21624: AND
21625: IFFALSE 21666
// begin ComCollect ( j , x , y ) ;
21627: LD_VAR 0 2
21631: PPUSH
21632: LD_VAR 0 6
21636: PPUSH
21637: LD_VAR 0 7
21641: PPUSH
21642: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
21646: LD_VAR 0 2
21650: PPUSH
21651: LD_VAR 0 8
21655: PPUSH
21656: CALL_OW 172
// exit ;
21660: POP
21661: POP
21662: POP
21663: POP
21664: GO 21674
// end ;
21666: GO 21556
21668: POP
21669: POP
// end ; end ;
21670: GO 21045
21672: POP
21673: POP
// end ; end_of_file
21674: PPOPN 9
21676: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
21677: LD_INT 0
21679: PPUSH
21680: PPUSH
21681: PPUSH
21682: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
21683: LD_VAR 0 1
21687: PPUSH
21688: CALL_OW 264
21692: PUSH
21693: LD_INT 91
21695: EQUAL
21696: IFFALSE 21768
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
21698: LD_INT 68
21700: PPUSH
21701: LD_VAR 0 1
21705: PPUSH
21706: CALL_OW 255
21710: PPUSH
21711: CALL_OW 321
21715: PUSH
21716: LD_INT 2
21718: EQUAL
21719: IFFALSE 21731
// eff := 70 else
21721: LD_ADDR_VAR 0 4
21725: PUSH
21726: LD_INT 70
21728: ST_TO_ADDR
21729: GO 21739
// eff := 30 ;
21731: LD_ADDR_VAR 0 4
21735: PUSH
21736: LD_INT 30
21738: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
21739: LD_VAR 0 1
21743: PPUSH
21744: CALL_OW 250
21748: PPUSH
21749: LD_VAR 0 1
21753: PPUSH
21754: CALL_OW 251
21758: PPUSH
21759: LD_VAR 0 4
21763: PPUSH
21764: CALL_OW 495
// end ; end ;
21768: LD_VAR 0 2
21772: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
21773: LD_INT 0
21775: PPUSH
// end ;
21776: LD_VAR 0 4
21780: RET
// export function SOS_Command ( cmd ) ; begin
21781: LD_INT 0
21783: PPUSH
// end ;
21784: LD_VAR 0 2
21788: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
21789: LD_INT 0
21791: PPUSH
// end ;
21792: LD_VAR 0 6
21796: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
21797: LD_INT 0
21799: PPUSH
21800: PPUSH
// if not vehicle or not factory then
21801: LD_VAR 0 1
21805: NOT
21806: PUSH
21807: LD_VAR 0 2
21811: NOT
21812: OR
21813: IFFALSE 21817
// exit ;
21815: GO 22048
// if factoryWaypoints >= factory then
21817: LD_EXP 84
21821: PUSH
21822: LD_VAR 0 2
21826: GREATEREQUAL
21827: IFFALSE 22048
// if factoryWaypoints [ factory ] then
21829: LD_EXP 84
21833: PUSH
21834: LD_VAR 0 2
21838: ARRAY
21839: IFFALSE 22048
// begin if GetControl ( vehicle ) = control_manual then
21841: LD_VAR 0 1
21845: PPUSH
21846: CALL_OW 263
21850: PUSH
21851: LD_INT 1
21853: EQUAL
21854: IFFALSE 21935
// begin driver := IsDrivenBy ( vehicle ) ;
21856: LD_ADDR_VAR 0 4
21860: PUSH
21861: LD_VAR 0 1
21865: PPUSH
21866: CALL_OW 311
21870: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21871: LD_VAR 0 4
21875: PPUSH
21876: LD_EXP 84
21880: PUSH
21881: LD_VAR 0 2
21885: ARRAY
21886: PUSH
21887: LD_INT 3
21889: ARRAY
21890: PPUSH
21891: LD_EXP 84
21895: PUSH
21896: LD_VAR 0 2
21900: ARRAY
21901: PUSH
21902: LD_INT 4
21904: ARRAY
21905: PPUSH
21906: CALL_OW 171
// AddComExitVehicle ( driver ) ;
21910: LD_VAR 0 4
21914: PPUSH
21915: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
21919: LD_VAR 0 4
21923: PPUSH
21924: LD_VAR 0 2
21928: PPUSH
21929: CALL_OW 180
// end else
21933: GO 22048
// if GetControl ( vehicle ) = control_remote then
21935: LD_VAR 0 1
21939: PPUSH
21940: CALL_OW 263
21944: PUSH
21945: LD_INT 2
21947: EQUAL
21948: IFFALSE 22009
// begin wait ( 0 0$2 ) ;
21950: LD_INT 70
21952: PPUSH
21953: CALL_OW 67
// if Connect ( vehicle ) then
21957: LD_VAR 0 1
21961: PPUSH
21962: CALL 34072 0 1
21966: IFFALSE 22007
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21968: LD_VAR 0 1
21972: PPUSH
21973: LD_EXP 84
21977: PUSH
21978: LD_VAR 0 2
21982: ARRAY
21983: PUSH
21984: LD_INT 3
21986: ARRAY
21987: PPUSH
21988: LD_EXP 84
21992: PUSH
21993: LD_VAR 0 2
21997: ARRAY
21998: PUSH
21999: LD_INT 4
22001: ARRAY
22002: PPUSH
22003: CALL_OW 171
// end else
22007: GO 22048
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
22009: LD_VAR 0 1
22013: PPUSH
22014: LD_EXP 84
22018: PUSH
22019: LD_VAR 0 2
22023: ARRAY
22024: PUSH
22025: LD_INT 3
22027: ARRAY
22028: PPUSH
22029: LD_EXP 84
22033: PUSH
22034: LD_VAR 0 2
22038: ARRAY
22039: PUSH
22040: LD_INT 4
22042: ARRAY
22043: PPUSH
22044: CALL_OW 171
// end ; end ;
22048: LD_VAR 0 3
22052: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
22053: LD_INT 0
22055: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
22056: LD_VAR 0 1
22060: PUSH
22061: LD_INT 250
22063: EQUAL
22064: PUSH
22065: LD_VAR 0 2
22069: PPUSH
22070: CALL_OW 264
22074: PUSH
22075: LD_INT 81
22077: EQUAL
22078: AND
22079: IFFALSE 22100
// MinerPlaceMine ( unit , x , y ) ;
22081: LD_VAR 0 2
22085: PPUSH
22086: LD_VAR 0 4
22090: PPUSH
22091: LD_VAR 0 5
22095: PPUSH
22096: CALL 24485 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
22100: LD_VAR 0 1
22104: PUSH
22105: LD_INT 251
22107: EQUAL
22108: PUSH
22109: LD_VAR 0 2
22113: PPUSH
22114: CALL_OW 264
22118: PUSH
22119: LD_INT 81
22121: EQUAL
22122: AND
22123: IFFALSE 22144
// MinerDetonateMine ( unit , x , y ) ;
22125: LD_VAR 0 2
22129: PPUSH
22130: LD_VAR 0 4
22134: PPUSH
22135: LD_VAR 0 5
22139: PPUSH
22140: CALL 24760 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
22144: LD_VAR 0 1
22148: PUSH
22149: LD_INT 252
22151: EQUAL
22152: PUSH
22153: LD_VAR 0 2
22157: PPUSH
22158: CALL_OW 264
22162: PUSH
22163: LD_INT 81
22165: EQUAL
22166: AND
22167: IFFALSE 22188
// MinerCreateMinefield ( unit , x , y ) ;
22169: LD_VAR 0 2
22173: PPUSH
22174: LD_VAR 0 4
22178: PPUSH
22179: LD_VAR 0 5
22183: PPUSH
22184: CALL 25177 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
22188: LD_VAR 0 1
22192: PUSH
22193: LD_INT 253
22195: EQUAL
22196: PUSH
22197: LD_VAR 0 2
22201: PPUSH
22202: CALL_OW 257
22206: PUSH
22207: LD_INT 5
22209: EQUAL
22210: AND
22211: IFFALSE 22232
// ComBinocular ( unit , x , y ) ;
22213: LD_VAR 0 2
22217: PPUSH
22218: LD_VAR 0 4
22222: PPUSH
22223: LD_VAR 0 5
22227: PPUSH
22228: CALL 25546 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
22232: LD_VAR 0 1
22236: PUSH
22237: LD_INT 254
22239: EQUAL
22240: PUSH
22241: LD_VAR 0 2
22245: PPUSH
22246: CALL_OW 264
22250: PUSH
22251: LD_INT 99
22253: EQUAL
22254: AND
22255: PUSH
22256: LD_VAR 0 3
22260: PPUSH
22261: CALL_OW 263
22265: PUSH
22266: LD_INT 3
22268: EQUAL
22269: AND
22270: IFFALSE 22286
// HackDestroyVehicle ( unit , selectedUnit ) ;
22272: LD_VAR 0 2
22276: PPUSH
22277: LD_VAR 0 3
22281: PPUSH
22282: CALL 23849 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
22286: LD_VAR 0 1
22290: PUSH
22291: LD_INT 255
22293: EQUAL
22294: PUSH
22295: LD_VAR 0 2
22299: PPUSH
22300: CALL_OW 264
22304: PUSH
22305: LD_INT 14
22307: PUSH
22308: LD_INT 53
22310: PUSH
22311: EMPTY
22312: LIST
22313: LIST
22314: IN
22315: AND
22316: PUSH
22317: LD_VAR 0 4
22321: PPUSH
22322: LD_VAR 0 5
22326: PPUSH
22327: CALL_OW 488
22331: AND
22332: IFFALSE 22356
// CutTreeXYR ( unit , x , y , 12 ) ;
22334: LD_VAR 0 2
22338: PPUSH
22339: LD_VAR 0 4
22343: PPUSH
22344: LD_VAR 0 5
22348: PPUSH
22349: LD_INT 12
22351: PPUSH
22352: CALL 22419 0 4
// if cmd = 256 then
22356: LD_VAR 0 1
22360: PUSH
22361: LD_INT 256
22363: EQUAL
22364: IFFALSE 22385
// SetFactoryWaypoint ( unit , x , y ) ;
22366: LD_VAR 0 2
22370: PPUSH
22371: LD_VAR 0 4
22375: PPUSH
22376: LD_VAR 0 5
22380: PPUSH
22381: CALL 20366 0 3
// if cmd = 257 then
22385: LD_VAR 0 1
22389: PUSH
22390: LD_INT 257
22392: EQUAL
22393: IFFALSE 22414
// SetWarehouseGatheringPoint ( unit , x , y ) ;
22395: LD_VAR 0 2
22399: PPUSH
22400: LD_VAR 0 4
22404: PPUSH
22405: LD_VAR 0 5
22409: PPUSH
22410: CALL 20728 0 3
// end ;
22414: LD_VAR 0 6
22418: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
22419: LD_INT 0
22421: PPUSH
22422: PPUSH
22423: PPUSH
22424: PPUSH
22425: PPUSH
22426: PPUSH
22427: PPUSH
22428: PPUSH
22429: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
22430: LD_VAR 0 1
22434: NOT
22435: PUSH
22436: LD_VAR 0 2
22440: PPUSH
22441: LD_VAR 0 3
22445: PPUSH
22446: CALL_OW 488
22450: NOT
22451: OR
22452: PUSH
22453: LD_VAR 0 4
22457: NOT
22458: OR
22459: IFFALSE 22463
// exit ;
22461: GO 22803
// list := [ ] ;
22463: LD_ADDR_VAR 0 13
22467: PUSH
22468: EMPTY
22469: ST_TO_ADDR
// if x - r < 0 then
22470: LD_VAR 0 2
22474: PUSH
22475: LD_VAR 0 4
22479: MINUS
22480: PUSH
22481: LD_INT 0
22483: LESS
22484: IFFALSE 22496
// min_x := 0 else
22486: LD_ADDR_VAR 0 7
22490: PUSH
22491: LD_INT 0
22493: ST_TO_ADDR
22494: GO 22512
// min_x := x - r ;
22496: LD_ADDR_VAR 0 7
22500: PUSH
22501: LD_VAR 0 2
22505: PUSH
22506: LD_VAR 0 4
22510: MINUS
22511: ST_TO_ADDR
// if y - r < 0 then
22512: LD_VAR 0 3
22516: PUSH
22517: LD_VAR 0 4
22521: MINUS
22522: PUSH
22523: LD_INT 0
22525: LESS
22526: IFFALSE 22538
// min_y := 0 else
22528: LD_ADDR_VAR 0 8
22532: PUSH
22533: LD_INT 0
22535: ST_TO_ADDR
22536: GO 22554
// min_y := y - r ;
22538: LD_ADDR_VAR 0 8
22542: PUSH
22543: LD_VAR 0 3
22547: PUSH
22548: LD_VAR 0 4
22552: MINUS
22553: ST_TO_ADDR
// max_x := x + r ;
22554: LD_ADDR_VAR 0 9
22558: PUSH
22559: LD_VAR 0 2
22563: PUSH
22564: LD_VAR 0 4
22568: PLUS
22569: ST_TO_ADDR
// max_y := y + r ;
22570: LD_ADDR_VAR 0 10
22574: PUSH
22575: LD_VAR 0 3
22579: PUSH
22580: LD_VAR 0 4
22584: PLUS
22585: ST_TO_ADDR
// for _x = min_x to max_x do
22586: LD_ADDR_VAR 0 11
22590: PUSH
22591: DOUBLE
22592: LD_VAR 0 7
22596: DEC
22597: ST_TO_ADDR
22598: LD_VAR 0 9
22602: PUSH
22603: FOR_TO
22604: IFFALSE 22721
// for _y = min_y to max_y do
22606: LD_ADDR_VAR 0 12
22610: PUSH
22611: DOUBLE
22612: LD_VAR 0 8
22616: DEC
22617: ST_TO_ADDR
22618: LD_VAR 0 10
22622: PUSH
22623: FOR_TO
22624: IFFALSE 22717
// begin if not ValidHex ( _x , _y ) then
22626: LD_VAR 0 11
22630: PPUSH
22631: LD_VAR 0 12
22635: PPUSH
22636: CALL_OW 488
22640: NOT
22641: IFFALSE 22645
// continue ;
22643: GO 22623
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
22645: LD_VAR 0 11
22649: PPUSH
22650: LD_VAR 0 12
22654: PPUSH
22655: CALL_OW 351
22659: PUSH
22660: LD_VAR 0 11
22664: PPUSH
22665: LD_VAR 0 12
22669: PPUSH
22670: CALL_OW 554
22674: AND
22675: IFFALSE 22715
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
22677: LD_ADDR_VAR 0 13
22681: PUSH
22682: LD_VAR 0 13
22686: PPUSH
22687: LD_VAR 0 13
22691: PUSH
22692: LD_INT 1
22694: PLUS
22695: PPUSH
22696: LD_VAR 0 11
22700: PUSH
22701: LD_VAR 0 12
22705: PUSH
22706: EMPTY
22707: LIST
22708: LIST
22709: PPUSH
22710: CALL_OW 2
22714: ST_TO_ADDR
// end ;
22715: GO 22623
22717: POP
22718: POP
22719: GO 22603
22721: POP
22722: POP
// if not list then
22723: LD_VAR 0 13
22727: NOT
22728: IFFALSE 22732
// exit ;
22730: GO 22803
// for i in list do
22732: LD_ADDR_VAR 0 6
22736: PUSH
22737: LD_VAR 0 13
22741: PUSH
22742: FOR_IN
22743: IFFALSE 22801
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
22745: LD_VAR 0 1
22749: PPUSH
22750: LD_STRING M
22752: PUSH
22753: LD_VAR 0 6
22757: PUSH
22758: LD_INT 1
22760: ARRAY
22761: PUSH
22762: LD_VAR 0 6
22766: PUSH
22767: LD_INT 2
22769: ARRAY
22770: PUSH
22771: LD_INT 0
22773: PUSH
22774: LD_INT 0
22776: PUSH
22777: LD_INT 0
22779: PUSH
22780: LD_INT 0
22782: PUSH
22783: EMPTY
22784: LIST
22785: LIST
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: PUSH
22792: EMPTY
22793: LIST
22794: PPUSH
22795: CALL_OW 447
22799: GO 22742
22801: POP
22802: POP
// end ;
22803: LD_VAR 0 5
22807: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
22808: LD_EXP 87
22812: NOT
22813: IFFALSE 22863
22815: GO 22817
22817: DISABLE
// begin initHack := true ;
22818: LD_ADDR_EXP 87
22822: PUSH
22823: LD_INT 1
22825: ST_TO_ADDR
// hackTanks := [ ] ;
22826: LD_ADDR_EXP 88
22830: PUSH
22831: EMPTY
22832: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
22833: LD_ADDR_EXP 89
22837: PUSH
22838: EMPTY
22839: ST_TO_ADDR
// hackLimit := 3 ;
22840: LD_ADDR_EXP 90
22844: PUSH
22845: LD_INT 3
22847: ST_TO_ADDR
// hackDist := 12 ;
22848: LD_ADDR_EXP 91
22852: PUSH
22853: LD_INT 12
22855: ST_TO_ADDR
// hackCounter := [ ] ;
22856: LD_ADDR_EXP 92
22860: PUSH
22861: EMPTY
22862: ST_TO_ADDR
// end ;
22863: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
22864: LD_EXP 87
22868: PUSH
22869: LD_INT 34
22871: PUSH
22872: LD_INT 99
22874: PUSH
22875: EMPTY
22876: LIST
22877: LIST
22878: PPUSH
22879: CALL_OW 69
22883: AND
22884: IFFALSE 23137
22886: GO 22888
22888: DISABLE
22889: LD_INT 0
22891: PPUSH
22892: PPUSH
// begin enable ;
22893: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
22894: LD_ADDR_VAR 0 1
22898: PUSH
22899: LD_INT 34
22901: PUSH
22902: LD_INT 99
22904: PUSH
22905: EMPTY
22906: LIST
22907: LIST
22908: PPUSH
22909: CALL_OW 69
22913: PUSH
22914: FOR_IN
22915: IFFALSE 23135
// begin if not i in hackTanks then
22917: LD_VAR 0 1
22921: PUSH
22922: LD_EXP 88
22926: IN
22927: NOT
22928: IFFALSE 23011
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
22930: LD_ADDR_EXP 88
22934: PUSH
22935: LD_EXP 88
22939: PPUSH
22940: LD_EXP 88
22944: PUSH
22945: LD_INT 1
22947: PLUS
22948: PPUSH
22949: LD_VAR 0 1
22953: PPUSH
22954: CALL_OW 1
22958: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
22959: LD_ADDR_EXP 89
22963: PUSH
22964: LD_EXP 89
22968: PPUSH
22969: LD_EXP 89
22973: PUSH
22974: LD_INT 1
22976: PLUS
22977: PPUSH
22978: EMPTY
22979: PPUSH
22980: CALL_OW 1
22984: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
22985: LD_ADDR_EXP 92
22989: PUSH
22990: LD_EXP 92
22994: PPUSH
22995: LD_EXP 92
22999: PUSH
23000: LD_INT 1
23002: PLUS
23003: PPUSH
23004: EMPTY
23005: PPUSH
23006: CALL_OW 1
23010: ST_TO_ADDR
// end ; if not IsOk ( i ) then
23011: LD_VAR 0 1
23015: PPUSH
23016: CALL_OW 302
23020: NOT
23021: IFFALSE 23034
// begin HackUnlinkAll ( i ) ;
23023: LD_VAR 0 1
23027: PPUSH
23028: CALL 23140 0 1
// continue ;
23032: GO 22914
// end ; HackCheckCapturedStatus ( i ) ;
23034: LD_VAR 0 1
23038: PPUSH
23039: CALL 23583 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
23043: LD_ADDR_VAR 0 2
23047: PUSH
23048: LD_INT 81
23050: PUSH
23051: LD_VAR 0 1
23055: PPUSH
23056: CALL_OW 255
23060: PUSH
23061: EMPTY
23062: LIST
23063: LIST
23064: PUSH
23065: LD_INT 33
23067: PUSH
23068: LD_INT 3
23070: PUSH
23071: EMPTY
23072: LIST
23073: LIST
23074: PUSH
23075: LD_INT 91
23077: PUSH
23078: LD_VAR 0 1
23082: PUSH
23083: LD_EXP 91
23087: PUSH
23088: EMPTY
23089: LIST
23090: LIST
23091: LIST
23092: PUSH
23093: LD_INT 50
23095: PUSH
23096: EMPTY
23097: LIST
23098: PUSH
23099: EMPTY
23100: LIST
23101: LIST
23102: LIST
23103: LIST
23104: PPUSH
23105: CALL_OW 69
23109: ST_TO_ADDR
// if not tmp then
23110: LD_VAR 0 2
23114: NOT
23115: IFFALSE 23119
// continue ;
23117: GO 22914
// HackLink ( i , tmp ) ;
23119: LD_VAR 0 1
23123: PPUSH
23124: LD_VAR 0 2
23128: PPUSH
23129: CALL 23276 0 2
// end ;
23133: GO 22914
23135: POP
23136: POP
// end ;
23137: PPOPN 2
23139: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
23140: LD_INT 0
23142: PPUSH
23143: PPUSH
23144: PPUSH
// if not hack in hackTanks then
23145: LD_VAR 0 1
23149: PUSH
23150: LD_EXP 88
23154: IN
23155: NOT
23156: IFFALSE 23160
// exit ;
23158: GO 23271
// index := GetElementIndex ( hackTanks , hack ) ;
23160: LD_ADDR_VAR 0 4
23164: PUSH
23165: LD_EXP 88
23169: PPUSH
23170: LD_VAR 0 1
23174: PPUSH
23175: CALL 30888 0 2
23179: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
23180: LD_EXP 89
23184: PUSH
23185: LD_VAR 0 4
23189: ARRAY
23190: IFFALSE 23271
// begin for i in hackTanksCaptured [ index ] do
23192: LD_ADDR_VAR 0 3
23196: PUSH
23197: LD_EXP 89
23201: PUSH
23202: LD_VAR 0 4
23206: ARRAY
23207: PUSH
23208: FOR_IN
23209: IFFALSE 23235
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
23211: LD_VAR 0 3
23215: PUSH
23216: LD_INT 1
23218: ARRAY
23219: PPUSH
23220: LD_VAR 0 3
23224: PUSH
23225: LD_INT 2
23227: ARRAY
23228: PPUSH
23229: CALL_OW 235
23233: GO 23208
23235: POP
23236: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
23237: LD_ADDR_EXP 89
23241: PUSH
23242: LD_EXP 89
23246: PPUSH
23247: LD_VAR 0 4
23251: PPUSH
23252: EMPTY
23253: PPUSH
23254: CALL_OW 1
23258: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
23259: LD_VAR 0 1
23263: PPUSH
23264: LD_INT 0
23266: PPUSH
23267: CALL_OW 505
// end ; end ;
23271: LD_VAR 0 2
23275: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
23276: LD_INT 0
23278: PPUSH
23279: PPUSH
23280: PPUSH
// if not hack in hackTanks or not vehicles then
23281: LD_VAR 0 1
23285: PUSH
23286: LD_EXP 88
23290: IN
23291: NOT
23292: PUSH
23293: LD_VAR 0 2
23297: NOT
23298: OR
23299: IFFALSE 23303
// exit ;
23301: GO 23578
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
23303: LD_ADDR_VAR 0 2
23307: PUSH
23308: LD_VAR 0 1
23312: PPUSH
23313: LD_VAR 0 2
23317: PPUSH
23318: LD_INT 1
23320: PPUSH
23321: LD_INT 1
23323: PPUSH
23324: CALL 31538 0 4
23328: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
23329: LD_ADDR_VAR 0 5
23333: PUSH
23334: LD_EXP 88
23338: PPUSH
23339: LD_VAR 0 1
23343: PPUSH
23344: CALL 30888 0 2
23348: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
23349: LD_EXP 89
23353: PUSH
23354: LD_VAR 0 5
23358: ARRAY
23359: PUSH
23360: LD_EXP 90
23364: LESS
23365: IFFALSE 23554
// begin for i := 1 to vehicles do
23367: LD_ADDR_VAR 0 4
23371: PUSH
23372: DOUBLE
23373: LD_INT 1
23375: DEC
23376: ST_TO_ADDR
23377: LD_VAR 0 2
23381: PUSH
23382: FOR_TO
23383: IFFALSE 23552
// begin if hackTanksCaptured [ index ] = hackLimit then
23385: LD_EXP 89
23389: PUSH
23390: LD_VAR 0 5
23394: ARRAY
23395: PUSH
23396: LD_EXP 90
23400: EQUAL
23401: IFFALSE 23405
// break ;
23403: GO 23552
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
23405: LD_ADDR_EXP 92
23409: PUSH
23410: LD_EXP 92
23414: PPUSH
23415: LD_VAR 0 5
23419: PPUSH
23420: LD_EXP 92
23424: PUSH
23425: LD_VAR 0 5
23429: ARRAY
23430: PUSH
23431: LD_INT 1
23433: PLUS
23434: PPUSH
23435: CALL_OW 1
23439: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
23440: LD_ADDR_EXP 89
23444: PUSH
23445: LD_EXP 89
23449: PPUSH
23450: LD_VAR 0 5
23454: PUSH
23455: LD_EXP 89
23459: PUSH
23460: LD_VAR 0 5
23464: ARRAY
23465: PUSH
23466: LD_INT 1
23468: PLUS
23469: PUSH
23470: EMPTY
23471: LIST
23472: LIST
23473: PPUSH
23474: LD_VAR 0 2
23478: PUSH
23479: LD_VAR 0 4
23483: ARRAY
23484: PUSH
23485: LD_VAR 0 2
23489: PUSH
23490: LD_VAR 0 4
23494: ARRAY
23495: PPUSH
23496: CALL_OW 255
23500: PUSH
23501: EMPTY
23502: LIST
23503: LIST
23504: PPUSH
23505: CALL 31103 0 3
23509: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
23510: LD_VAR 0 2
23514: PUSH
23515: LD_VAR 0 4
23519: ARRAY
23520: PPUSH
23521: LD_VAR 0 1
23525: PPUSH
23526: CALL_OW 255
23530: PPUSH
23531: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
23535: LD_VAR 0 2
23539: PUSH
23540: LD_VAR 0 4
23544: ARRAY
23545: PPUSH
23546: CALL_OW 141
// end ;
23550: GO 23382
23552: POP
23553: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23554: LD_VAR 0 1
23558: PPUSH
23559: LD_EXP 89
23563: PUSH
23564: LD_VAR 0 5
23568: ARRAY
23569: PUSH
23570: LD_INT 0
23572: PLUS
23573: PPUSH
23574: CALL_OW 505
// end ;
23578: LD_VAR 0 3
23582: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
23583: LD_INT 0
23585: PPUSH
23586: PPUSH
23587: PPUSH
23588: PPUSH
// if not hack in hackTanks then
23589: LD_VAR 0 1
23593: PUSH
23594: LD_EXP 88
23598: IN
23599: NOT
23600: IFFALSE 23604
// exit ;
23602: GO 23844
// index := GetElementIndex ( hackTanks , hack ) ;
23604: LD_ADDR_VAR 0 4
23608: PUSH
23609: LD_EXP 88
23613: PPUSH
23614: LD_VAR 0 1
23618: PPUSH
23619: CALL 30888 0 2
23623: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
23624: LD_ADDR_VAR 0 3
23628: PUSH
23629: DOUBLE
23630: LD_EXP 89
23634: PUSH
23635: LD_VAR 0 4
23639: ARRAY
23640: INC
23641: ST_TO_ADDR
23642: LD_INT 1
23644: PUSH
23645: FOR_DOWNTO
23646: IFFALSE 23818
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
23648: LD_ADDR_VAR 0 5
23652: PUSH
23653: LD_EXP 89
23657: PUSH
23658: LD_VAR 0 4
23662: ARRAY
23663: PUSH
23664: LD_VAR 0 3
23668: ARRAY
23669: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
23670: LD_VAR 0 5
23674: PUSH
23675: LD_INT 1
23677: ARRAY
23678: PPUSH
23679: CALL_OW 302
23683: NOT
23684: PUSH
23685: LD_VAR 0 5
23689: PUSH
23690: LD_INT 1
23692: ARRAY
23693: PPUSH
23694: CALL_OW 255
23698: PUSH
23699: LD_VAR 0 1
23703: PPUSH
23704: CALL_OW 255
23708: NONEQUAL
23709: OR
23710: IFFALSE 23816
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
23712: LD_VAR 0 5
23716: PUSH
23717: LD_INT 1
23719: ARRAY
23720: PPUSH
23721: CALL_OW 305
23725: PUSH
23726: LD_VAR 0 5
23730: PUSH
23731: LD_INT 1
23733: ARRAY
23734: PPUSH
23735: CALL_OW 255
23739: PUSH
23740: LD_VAR 0 1
23744: PPUSH
23745: CALL_OW 255
23749: EQUAL
23750: AND
23751: IFFALSE 23775
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
23753: LD_VAR 0 5
23757: PUSH
23758: LD_INT 1
23760: ARRAY
23761: PPUSH
23762: LD_VAR 0 5
23766: PUSH
23767: LD_INT 2
23769: ARRAY
23770: PPUSH
23771: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
23775: LD_ADDR_EXP 89
23779: PUSH
23780: LD_EXP 89
23784: PPUSH
23785: LD_VAR 0 4
23789: PPUSH
23790: LD_EXP 89
23794: PUSH
23795: LD_VAR 0 4
23799: ARRAY
23800: PPUSH
23801: LD_VAR 0 3
23805: PPUSH
23806: CALL_OW 3
23810: PPUSH
23811: CALL_OW 1
23815: ST_TO_ADDR
// end ; end ;
23816: GO 23645
23818: POP
23819: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23820: LD_VAR 0 1
23824: PPUSH
23825: LD_EXP 89
23829: PUSH
23830: LD_VAR 0 4
23834: ARRAY
23835: PUSH
23836: LD_INT 0
23838: PLUS
23839: PPUSH
23840: CALL_OW 505
// end ;
23844: LD_VAR 0 2
23848: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
23849: LD_INT 0
23851: PPUSH
23852: PPUSH
23853: PPUSH
23854: PPUSH
// if not hack in hackTanks then
23855: LD_VAR 0 1
23859: PUSH
23860: LD_EXP 88
23864: IN
23865: NOT
23866: IFFALSE 23870
// exit ;
23868: GO 23955
// index := GetElementIndex ( hackTanks , hack ) ;
23870: LD_ADDR_VAR 0 5
23874: PUSH
23875: LD_EXP 88
23879: PPUSH
23880: LD_VAR 0 1
23884: PPUSH
23885: CALL 30888 0 2
23889: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
23890: LD_ADDR_VAR 0 4
23894: PUSH
23895: DOUBLE
23896: LD_INT 1
23898: DEC
23899: ST_TO_ADDR
23900: LD_EXP 89
23904: PUSH
23905: LD_VAR 0 5
23909: ARRAY
23910: PUSH
23911: FOR_TO
23912: IFFALSE 23953
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
23914: LD_EXP 89
23918: PUSH
23919: LD_VAR 0 5
23923: ARRAY
23924: PUSH
23925: LD_VAR 0 4
23929: ARRAY
23930: PUSH
23931: LD_INT 1
23933: ARRAY
23934: PUSH
23935: LD_VAR 0 2
23939: EQUAL
23940: IFFALSE 23951
// KillUnit ( vehicle ) ;
23942: LD_VAR 0 2
23946: PPUSH
23947: CALL_OW 66
23951: GO 23911
23953: POP
23954: POP
// end ;
23955: LD_VAR 0 3
23959: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
23960: LD_EXP 93
23964: NOT
23965: IFFALSE 24000
23967: GO 23969
23969: DISABLE
// begin initMiner := true ;
23970: LD_ADDR_EXP 93
23974: PUSH
23975: LD_INT 1
23977: ST_TO_ADDR
// minersList := [ ] ;
23978: LD_ADDR_EXP 94
23982: PUSH
23983: EMPTY
23984: ST_TO_ADDR
// minerMinesList := [ ] ;
23985: LD_ADDR_EXP 95
23989: PUSH
23990: EMPTY
23991: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
23992: LD_ADDR_EXP 96
23996: PUSH
23997: LD_INT 5
23999: ST_TO_ADDR
// end ;
24000: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
24001: LD_EXP 93
24005: PUSH
24006: LD_INT 34
24008: PUSH
24009: LD_INT 81
24011: PUSH
24012: EMPTY
24013: LIST
24014: LIST
24015: PPUSH
24016: CALL_OW 69
24020: AND
24021: IFFALSE 24482
24023: GO 24025
24025: DISABLE
24026: LD_INT 0
24028: PPUSH
24029: PPUSH
24030: PPUSH
24031: PPUSH
// begin enable ;
24032: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
24033: LD_ADDR_VAR 0 1
24037: PUSH
24038: LD_INT 34
24040: PUSH
24041: LD_INT 81
24043: PUSH
24044: EMPTY
24045: LIST
24046: LIST
24047: PPUSH
24048: CALL_OW 69
24052: PUSH
24053: FOR_IN
24054: IFFALSE 24126
// begin if not i in minersList then
24056: LD_VAR 0 1
24060: PUSH
24061: LD_EXP 94
24065: IN
24066: NOT
24067: IFFALSE 24124
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
24069: LD_ADDR_EXP 94
24073: PUSH
24074: LD_EXP 94
24078: PPUSH
24079: LD_EXP 94
24083: PUSH
24084: LD_INT 1
24086: PLUS
24087: PPUSH
24088: LD_VAR 0 1
24092: PPUSH
24093: CALL_OW 1
24097: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
24098: LD_ADDR_EXP 95
24102: PUSH
24103: LD_EXP 95
24107: PPUSH
24108: LD_EXP 95
24112: PUSH
24113: LD_INT 1
24115: PLUS
24116: PPUSH
24117: EMPTY
24118: PPUSH
24119: CALL_OW 1
24123: ST_TO_ADDR
// end end ;
24124: GO 24053
24126: POP
24127: POP
// for i := minerMinesList downto 1 do
24128: LD_ADDR_VAR 0 1
24132: PUSH
24133: DOUBLE
24134: LD_EXP 95
24138: INC
24139: ST_TO_ADDR
24140: LD_INT 1
24142: PUSH
24143: FOR_DOWNTO
24144: IFFALSE 24480
// begin if IsLive ( minersList [ i ] ) then
24146: LD_EXP 94
24150: PUSH
24151: LD_VAR 0 1
24155: ARRAY
24156: PPUSH
24157: CALL_OW 300
24161: IFFALSE 24189
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
24163: LD_EXP 94
24167: PUSH
24168: LD_VAR 0 1
24172: ARRAY
24173: PPUSH
24174: LD_EXP 95
24178: PUSH
24179: LD_VAR 0 1
24183: ARRAY
24184: PPUSH
24185: CALL_OW 505
// if not minerMinesList [ i ] then
24189: LD_EXP 95
24193: PUSH
24194: LD_VAR 0 1
24198: ARRAY
24199: NOT
24200: IFFALSE 24204
// continue ;
24202: GO 24143
// for j := minerMinesList [ i ] downto 1 do
24204: LD_ADDR_VAR 0 2
24208: PUSH
24209: DOUBLE
24210: LD_EXP 95
24214: PUSH
24215: LD_VAR 0 1
24219: ARRAY
24220: INC
24221: ST_TO_ADDR
24222: LD_INT 1
24224: PUSH
24225: FOR_DOWNTO
24226: IFFALSE 24476
// begin side := GetSide ( minersList [ i ] ) ;
24228: LD_ADDR_VAR 0 3
24232: PUSH
24233: LD_EXP 94
24237: PUSH
24238: LD_VAR 0 1
24242: ARRAY
24243: PPUSH
24244: CALL_OW 255
24248: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
24249: LD_ADDR_VAR 0 4
24253: PUSH
24254: LD_EXP 95
24258: PUSH
24259: LD_VAR 0 1
24263: ARRAY
24264: PUSH
24265: LD_VAR 0 2
24269: ARRAY
24270: PUSH
24271: LD_INT 1
24273: ARRAY
24274: PPUSH
24275: LD_EXP 95
24279: PUSH
24280: LD_VAR 0 1
24284: ARRAY
24285: PUSH
24286: LD_VAR 0 2
24290: ARRAY
24291: PUSH
24292: LD_INT 2
24294: ARRAY
24295: PPUSH
24296: CALL_OW 428
24300: ST_TO_ADDR
// if not tmp then
24301: LD_VAR 0 4
24305: NOT
24306: IFFALSE 24310
// continue ;
24308: GO 24225
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
24310: LD_VAR 0 4
24314: PUSH
24315: LD_INT 81
24317: PUSH
24318: LD_VAR 0 3
24322: PUSH
24323: EMPTY
24324: LIST
24325: LIST
24326: PPUSH
24327: CALL_OW 69
24331: IN
24332: PUSH
24333: LD_EXP 95
24337: PUSH
24338: LD_VAR 0 1
24342: ARRAY
24343: PUSH
24344: LD_VAR 0 2
24348: ARRAY
24349: PUSH
24350: LD_INT 1
24352: ARRAY
24353: PPUSH
24354: LD_EXP 95
24358: PUSH
24359: LD_VAR 0 1
24363: ARRAY
24364: PUSH
24365: LD_VAR 0 2
24369: ARRAY
24370: PUSH
24371: LD_INT 2
24373: ARRAY
24374: PPUSH
24375: CALL_OW 458
24379: AND
24380: IFFALSE 24474
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
24382: LD_EXP 95
24386: PUSH
24387: LD_VAR 0 1
24391: ARRAY
24392: PUSH
24393: LD_VAR 0 2
24397: ARRAY
24398: PUSH
24399: LD_INT 1
24401: ARRAY
24402: PPUSH
24403: LD_EXP 95
24407: PUSH
24408: LD_VAR 0 1
24412: ARRAY
24413: PUSH
24414: LD_VAR 0 2
24418: ARRAY
24419: PUSH
24420: LD_INT 2
24422: ARRAY
24423: PPUSH
24424: LD_VAR 0 3
24428: PPUSH
24429: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
24433: LD_ADDR_EXP 95
24437: PUSH
24438: LD_EXP 95
24442: PPUSH
24443: LD_VAR 0 1
24447: PPUSH
24448: LD_EXP 95
24452: PUSH
24453: LD_VAR 0 1
24457: ARRAY
24458: PPUSH
24459: LD_VAR 0 2
24463: PPUSH
24464: CALL_OW 3
24468: PPUSH
24469: CALL_OW 1
24473: ST_TO_ADDR
// end ; end ;
24474: GO 24225
24476: POP
24477: POP
// end ;
24478: GO 24143
24480: POP
24481: POP
// end ;
24482: PPOPN 4
24484: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
24485: LD_INT 0
24487: PPUSH
24488: PPUSH
// result := false ;
24489: LD_ADDR_VAR 0 4
24493: PUSH
24494: LD_INT 0
24496: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
24497: LD_VAR 0 1
24501: PPUSH
24502: CALL_OW 264
24506: PUSH
24507: LD_INT 81
24509: EQUAL
24510: NOT
24511: IFFALSE 24515
// exit ;
24513: GO 24755
// index := GetElementIndex ( minersList , unit ) ;
24515: LD_ADDR_VAR 0 5
24519: PUSH
24520: LD_EXP 94
24524: PPUSH
24525: LD_VAR 0 1
24529: PPUSH
24530: CALL 30888 0 2
24534: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
24535: LD_EXP 95
24539: PUSH
24540: LD_VAR 0 5
24544: ARRAY
24545: PUSH
24546: LD_EXP 96
24550: GREATEREQUAL
24551: IFFALSE 24555
// exit ;
24553: GO 24755
// ComMoveXY ( unit , x , y ) ;
24555: LD_VAR 0 1
24559: PPUSH
24560: LD_VAR 0 2
24564: PPUSH
24565: LD_VAR 0 3
24569: PPUSH
24570: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24574: LD_INT 35
24576: PPUSH
24577: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
24581: LD_VAR 0 1
24585: PPUSH
24586: LD_VAR 0 2
24590: PPUSH
24591: LD_VAR 0 3
24595: PPUSH
24596: CALL 62243 0 3
24600: NOT
24601: PUSH
24602: LD_VAR 0 1
24606: PPUSH
24607: CALL_OW 314
24611: AND
24612: IFFALSE 24616
// exit ;
24614: GO 24755
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
24616: LD_VAR 0 2
24620: PPUSH
24621: LD_VAR 0 3
24625: PPUSH
24626: CALL_OW 428
24630: PUSH
24631: LD_VAR 0 1
24635: EQUAL
24636: PUSH
24637: LD_VAR 0 1
24641: PPUSH
24642: CALL_OW 314
24646: NOT
24647: AND
24648: IFFALSE 24574
// PlaySoundXY ( x , y , PlantMine ) ;
24650: LD_VAR 0 2
24654: PPUSH
24655: LD_VAR 0 3
24659: PPUSH
24660: LD_STRING PlantMine
24662: PPUSH
24663: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
24667: LD_VAR 0 2
24671: PPUSH
24672: LD_VAR 0 3
24676: PPUSH
24677: LD_VAR 0 1
24681: PPUSH
24682: CALL_OW 255
24686: PPUSH
24687: LD_INT 0
24689: PPUSH
24690: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
24694: LD_ADDR_EXP 95
24698: PUSH
24699: LD_EXP 95
24703: PPUSH
24704: LD_VAR 0 5
24708: PUSH
24709: LD_EXP 95
24713: PUSH
24714: LD_VAR 0 5
24718: ARRAY
24719: PUSH
24720: LD_INT 1
24722: PLUS
24723: PUSH
24724: EMPTY
24725: LIST
24726: LIST
24727: PPUSH
24728: LD_VAR 0 2
24732: PUSH
24733: LD_VAR 0 3
24737: PUSH
24738: EMPTY
24739: LIST
24740: LIST
24741: PPUSH
24742: CALL 31103 0 3
24746: ST_TO_ADDR
// result := true ;
24747: LD_ADDR_VAR 0 4
24751: PUSH
24752: LD_INT 1
24754: ST_TO_ADDR
// end ;
24755: LD_VAR 0 4
24759: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
24760: LD_INT 0
24762: PPUSH
24763: PPUSH
24764: PPUSH
// if not unit in minersList then
24765: LD_VAR 0 1
24769: PUSH
24770: LD_EXP 94
24774: IN
24775: NOT
24776: IFFALSE 24780
// exit ;
24778: GO 25172
// index := GetElementIndex ( minersList , unit ) ;
24780: LD_ADDR_VAR 0 6
24784: PUSH
24785: LD_EXP 94
24789: PPUSH
24790: LD_VAR 0 1
24794: PPUSH
24795: CALL 30888 0 2
24799: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
24800: LD_ADDR_VAR 0 5
24804: PUSH
24805: DOUBLE
24806: LD_EXP 95
24810: PUSH
24811: LD_VAR 0 6
24815: ARRAY
24816: INC
24817: ST_TO_ADDR
24818: LD_INT 1
24820: PUSH
24821: FOR_DOWNTO
24822: IFFALSE 24983
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
24824: LD_EXP 95
24828: PUSH
24829: LD_VAR 0 6
24833: ARRAY
24834: PUSH
24835: LD_VAR 0 5
24839: ARRAY
24840: PUSH
24841: LD_INT 1
24843: ARRAY
24844: PUSH
24845: LD_VAR 0 2
24849: EQUAL
24850: PUSH
24851: LD_EXP 95
24855: PUSH
24856: LD_VAR 0 6
24860: ARRAY
24861: PUSH
24862: LD_VAR 0 5
24866: ARRAY
24867: PUSH
24868: LD_INT 2
24870: ARRAY
24871: PUSH
24872: LD_VAR 0 3
24876: EQUAL
24877: AND
24878: IFFALSE 24981
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24880: LD_EXP 95
24884: PUSH
24885: LD_VAR 0 6
24889: ARRAY
24890: PUSH
24891: LD_VAR 0 5
24895: ARRAY
24896: PUSH
24897: LD_INT 1
24899: ARRAY
24900: PPUSH
24901: LD_EXP 95
24905: PUSH
24906: LD_VAR 0 6
24910: ARRAY
24911: PUSH
24912: LD_VAR 0 5
24916: ARRAY
24917: PUSH
24918: LD_INT 2
24920: ARRAY
24921: PPUSH
24922: LD_VAR 0 1
24926: PPUSH
24927: CALL_OW 255
24931: PPUSH
24932: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24936: LD_ADDR_EXP 95
24940: PUSH
24941: LD_EXP 95
24945: PPUSH
24946: LD_VAR 0 6
24950: PPUSH
24951: LD_EXP 95
24955: PUSH
24956: LD_VAR 0 6
24960: ARRAY
24961: PPUSH
24962: LD_VAR 0 5
24966: PPUSH
24967: CALL_OW 3
24971: PPUSH
24972: CALL_OW 1
24976: ST_TO_ADDR
// exit ;
24977: POP
24978: POP
24979: GO 25172
// end ; end ;
24981: GO 24821
24983: POP
24984: POP
// for i := minerMinesList [ index ] downto 1 do
24985: LD_ADDR_VAR 0 5
24989: PUSH
24990: DOUBLE
24991: LD_EXP 95
24995: PUSH
24996: LD_VAR 0 6
25000: ARRAY
25001: INC
25002: ST_TO_ADDR
25003: LD_INT 1
25005: PUSH
25006: FOR_DOWNTO
25007: IFFALSE 25170
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
25009: LD_EXP 95
25013: PUSH
25014: LD_VAR 0 6
25018: ARRAY
25019: PUSH
25020: LD_VAR 0 5
25024: ARRAY
25025: PUSH
25026: LD_INT 1
25028: ARRAY
25029: PPUSH
25030: LD_EXP 95
25034: PUSH
25035: LD_VAR 0 6
25039: ARRAY
25040: PUSH
25041: LD_VAR 0 5
25045: ARRAY
25046: PUSH
25047: LD_INT 2
25049: ARRAY
25050: PPUSH
25051: LD_VAR 0 2
25055: PPUSH
25056: LD_VAR 0 3
25060: PPUSH
25061: CALL_OW 298
25065: PUSH
25066: LD_INT 6
25068: LESS
25069: IFFALSE 25168
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25071: LD_EXP 95
25075: PUSH
25076: LD_VAR 0 6
25080: ARRAY
25081: PUSH
25082: LD_VAR 0 5
25086: ARRAY
25087: PUSH
25088: LD_INT 1
25090: ARRAY
25091: PPUSH
25092: LD_EXP 95
25096: PUSH
25097: LD_VAR 0 6
25101: ARRAY
25102: PUSH
25103: LD_VAR 0 5
25107: ARRAY
25108: PUSH
25109: LD_INT 2
25111: ARRAY
25112: PPUSH
25113: LD_VAR 0 1
25117: PPUSH
25118: CALL_OW 255
25122: PPUSH
25123: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25127: LD_ADDR_EXP 95
25131: PUSH
25132: LD_EXP 95
25136: PPUSH
25137: LD_VAR 0 6
25141: PPUSH
25142: LD_EXP 95
25146: PUSH
25147: LD_VAR 0 6
25151: ARRAY
25152: PPUSH
25153: LD_VAR 0 5
25157: PPUSH
25158: CALL_OW 3
25162: PPUSH
25163: CALL_OW 1
25167: ST_TO_ADDR
// end ; end ;
25168: GO 25006
25170: POP
25171: POP
// end ;
25172: LD_VAR 0 4
25176: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
25177: LD_INT 0
25179: PPUSH
25180: PPUSH
25181: PPUSH
25182: PPUSH
25183: PPUSH
25184: PPUSH
25185: PPUSH
25186: PPUSH
25187: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
25188: LD_VAR 0 1
25192: PPUSH
25193: CALL_OW 264
25197: PUSH
25198: LD_INT 81
25200: EQUAL
25201: NOT
25202: PUSH
25203: LD_VAR 0 1
25207: PUSH
25208: LD_EXP 94
25212: IN
25213: NOT
25214: OR
25215: IFFALSE 25219
// exit ;
25217: GO 25541
// index := GetElementIndex ( minersList , unit ) ;
25219: LD_ADDR_VAR 0 6
25223: PUSH
25224: LD_EXP 94
25228: PPUSH
25229: LD_VAR 0 1
25233: PPUSH
25234: CALL 30888 0 2
25238: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
25239: LD_ADDR_VAR 0 8
25243: PUSH
25244: LD_EXP 96
25248: PUSH
25249: LD_EXP 95
25253: PUSH
25254: LD_VAR 0 6
25258: ARRAY
25259: MINUS
25260: ST_TO_ADDR
// if not minesFreeAmount then
25261: LD_VAR 0 8
25265: NOT
25266: IFFALSE 25270
// exit ;
25268: GO 25541
// tmp := [ ] ;
25270: LD_ADDR_VAR 0 7
25274: PUSH
25275: EMPTY
25276: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
25277: LD_ADDR_VAR 0 5
25281: PUSH
25282: DOUBLE
25283: LD_INT 1
25285: DEC
25286: ST_TO_ADDR
25287: LD_VAR 0 8
25291: PUSH
25292: FOR_TO
25293: IFFALSE 25488
// begin _d := rand ( 0 , 5 ) ;
25295: LD_ADDR_VAR 0 11
25299: PUSH
25300: LD_INT 0
25302: PPUSH
25303: LD_INT 5
25305: PPUSH
25306: CALL_OW 12
25310: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
25311: LD_ADDR_VAR 0 12
25315: PUSH
25316: LD_INT 2
25318: PPUSH
25319: LD_INT 6
25321: PPUSH
25322: CALL_OW 12
25326: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
25327: LD_ADDR_VAR 0 9
25331: PUSH
25332: LD_VAR 0 2
25336: PPUSH
25337: LD_VAR 0 11
25341: PPUSH
25342: LD_VAR 0 12
25346: PPUSH
25347: CALL_OW 272
25351: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
25352: LD_ADDR_VAR 0 10
25356: PUSH
25357: LD_VAR 0 3
25361: PPUSH
25362: LD_VAR 0 11
25366: PPUSH
25367: LD_VAR 0 12
25371: PPUSH
25372: CALL_OW 273
25376: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
25377: LD_VAR 0 9
25381: PPUSH
25382: LD_VAR 0 10
25386: PPUSH
25387: CALL_OW 488
25391: PUSH
25392: LD_VAR 0 9
25396: PUSH
25397: LD_VAR 0 10
25401: PUSH
25402: EMPTY
25403: LIST
25404: LIST
25405: PUSH
25406: LD_VAR 0 7
25410: IN
25411: NOT
25412: AND
25413: PUSH
25414: LD_VAR 0 9
25418: PPUSH
25419: LD_VAR 0 10
25423: PPUSH
25424: CALL_OW 458
25428: NOT
25429: AND
25430: IFFALSE 25472
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
25432: LD_ADDR_VAR 0 7
25436: PUSH
25437: LD_VAR 0 7
25441: PPUSH
25442: LD_VAR 0 7
25446: PUSH
25447: LD_INT 1
25449: PLUS
25450: PPUSH
25451: LD_VAR 0 9
25455: PUSH
25456: LD_VAR 0 10
25460: PUSH
25461: EMPTY
25462: LIST
25463: LIST
25464: PPUSH
25465: CALL_OW 1
25469: ST_TO_ADDR
25470: GO 25486
// i := i - 1 ;
25472: LD_ADDR_VAR 0 5
25476: PUSH
25477: LD_VAR 0 5
25481: PUSH
25482: LD_INT 1
25484: MINUS
25485: ST_TO_ADDR
// end ;
25486: GO 25292
25488: POP
25489: POP
// for i in tmp do
25490: LD_ADDR_VAR 0 5
25494: PUSH
25495: LD_VAR 0 7
25499: PUSH
25500: FOR_IN
25501: IFFALSE 25539
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
25503: LD_VAR 0 1
25507: PPUSH
25508: LD_VAR 0 5
25512: PUSH
25513: LD_INT 1
25515: ARRAY
25516: PPUSH
25517: LD_VAR 0 5
25521: PUSH
25522: LD_INT 2
25524: ARRAY
25525: PPUSH
25526: CALL 24485 0 3
25530: NOT
25531: IFFALSE 25537
// exit ;
25533: POP
25534: POP
25535: GO 25541
25537: GO 25500
25539: POP
25540: POP
// end ;
25541: LD_VAR 0 4
25545: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
25546: LD_INT 0
25548: PPUSH
25549: PPUSH
25550: PPUSH
25551: PPUSH
25552: PPUSH
25553: PPUSH
25554: PPUSH
// if not GetClass ( unit ) = class_sniper then
25555: LD_VAR 0 1
25559: PPUSH
25560: CALL_OW 257
25564: PUSH
25565: LD_INT 5
25567: EQUAL
25568: NOT
25569: IFFALSE 25573
// exit ;
25571: GO 25961
// dist := 8 ;
25573: LD_ADDR_VAR 0 5
25577: PUSH
25578: LD_INT 8
25580: ST_TO_ADDR
// viewRange := 12 ;
25581: LD_ADDR_VAR 0 7
25585: PUSH
25586: LD_INT 12
25588: ST_TO_ADDR
// side := GetSide ( unit ) ;
25589: LD_ADDR_VAR 0 6
25593: PUSH
25594: LD_VAR 0 1
25598: PPUSH
25599: CALL_OW 255
25603: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
25604: LD_INT 61
25606: PPUSH
25607: LD_VAR 0 6
25611: PPUSH
25612: CALL_OW 321
25616: PUSH
25617: LD_INT 2
25619: EQUAL
25620: IFFALSE 25630
// viewRange := 16 ;
25622: LD_ADDR_VAR 0 7
25626: PUSH
25627: LD_INT 16
25629: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
25630: LD_VAR 0 1
25634: PPUSH
25635: LD_VAR 0 2
25639: PPUSH
25640: LD_VAR 0 3
25644: PPUSH
25645: CALL_OW 297
25649: PUSH
25650: LD_VAR 0 5
25654: GREATER
25655: IFFALSE 25734
// begin ComMoveXY ( unit , x , y ) ;
25657: LD_VAR 0 1
25661: PPUSH
25662: LD_VAR 0 2
25666: PPUSH
25667: LD_VAR 0 3
25671: PPUSH
25672: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25676: LD_INT 35
25678: PPUSH
25679: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
25683: LD_VAR 0 1
25687: PPUSH
25688: LD_VAR 0 2
25692: PPUSH
25693: LD_VAR 0 3
25697: PPUSH
25698: CALL 62243 0 3
25702: NOT
25703: IFFALSE 25707
// exit ;
25705: GO 25961
// until GetDistUnitXY ( unit , x , y ) < dist ;
25707: LD_VAR 0 1
25711: PPUSH
25712: LD_VAR 0 2
25716: PPUSH
25717: LD_VAR 0 3
25721: PPUSH
25722: CALL_OW 297
25726: PUSH
25727: LD_VAR 0 5
25731: LESS
25732: IFFALSE 25676
// end ; ComTurnXY ( unit , x , y ) ;
25734: LD_VAR 0 1
25738: PPUSH
25739: LD_VAR 0 2
25743: PPUSH
25744: LD_VAR 0 3
25748: PPUSH
25749: CALL_OW 118
// wait ( 5 ) ;
25753: LD_INT 5
25755: PPUSH
25756: CALL_OW 67
// _d := GetDir ( unit ) ;
25760: LD_ADDR_VAR 0 10
25764: PUSH
25765: LD_VAR 0 1
25769: PPUSH
25770: CALL_OW 254
25774: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
25775: LD_ADDR_VAR 0 8
25779: PUSH
25780: LD_VAR 0 1
25784: PPUSH
25785: CALL_OW 250
25789: PPUSH
25790: LD_VAR 0 10
25794: PPUSH
25795: LD_VAR 0 5
25799: PPUSH
25800: CALL_OW 272
25804: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
25805: LD_ADDR_VAR 0 9
25809: PUSH
25810: LD_VAR 0 1
25814: PPUSH
25815: CALL_OW 251
25819: PPUSH
25820: LD_VAR 0 10
25824: PPUSH
25825: LD_VAR 0 5
25829: PPUSH
25830: CALL_OW 273
25834: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25835: LD_VAR 0 8
25839: PPUSH
25840: LD_VAR 0 9
25844: PPUSH
25845: CALL_OW 488
25849: NOT
25850: IFFALSE 25854
// exit ;
25852: GO 25961
// ComAnimCustom ( unit , 1 ) ;
25854: LD_VAR 0 1
25858: PPUSH
25859: LD_INT 1
25861: PPUSH
25862: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
25866: LD_VAR 0 8
25870: PPUSH
25871: LD_VAR 0 9
25875: PPUSH
25876: LD_VAR 0 6
25880: PPUSH
25881: LD_VAR 0 7
25885: PPUSH
25886: CALL_OW 330
// repeat wait ( 1 ) ;
25890: LD_INT 1
25892: PPUSH
25893: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
25897: LD_VAR 0 1
25901: PPUSH
25902: CALL_OW 316
25906: PUSH
25907: LD_VAR 0 1
25911: PPUSH
25912: CALL_OW 314
25916: OR
25917: PUSH
25918: LD_VAR 0 1
25922: PPUSH
25923: CALL_OW 302
25927: NOT
25928: OR
25929: PUSH
25930: LD_VAR 0 1
25934: PPUSH
25935: CALL_OW 301
25939: OR
25940: IFFALSE 25890
// RemoveSeeing ( _x , _y , side ) ;
25942: LD_VAR 0 8
25946: PPUSH
25947: LD_VAR 0 9
25951: PPUSH
25952: LD_VAR 0 6
25956: PPUSH
25957: CALL_OW 331
// end ; end_of_file
25961: LD_VAR 0 4
25965: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
25966: LD_INT 0
25968: PPUSH
25969: PPUSH
// if exist_mode then
25970: LD_VAR 0 2
25974: IFFALSE 25999
// unit := CreateCharacter ( prefix & ident ) else
25976: LD_ADDR_VAR 0 5
25980: PUSH
25981: LD_VAR 0 3
25985: PUSH
25986: LD_VAR 0 1
25990: STR
25991: PPUSH
25992: CALL_OW 34
25996: ST_TO_ADDR
25997: GO 26014
// unit := NewCharacter ( ident ) ;
25999: LD_ADDR_VAR 0 5
26003: PUSH
26004: LD_VAR 0 1
26008: PPUSH
26009: CALL_OW 25
26013: ST_TO_ADDR
// result := unit ;
26014: LD_ADDR_VAR 0 4
26018: PUSH
26019: LD_VAR 0 5
26023: ST_TO_ADDR
// end ;
26024: LD_VAR 0 4
26028: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
26029: LD_INT 0
26031: PPUSH
26032: PPUSH
// if not side or not nation then
26033: LD_VAR 0 1
26037: NOT
26038: PUSH
26039: LD_VAR 0 2
26043: NOT
26044: OR
26045: IFFALSE 26049
// exit ;
26047: GO 26817
// case nation of nation_american :
26049: LD_VAR 0 2
26053: PUSH
26054: LD_INT 1
26056: DOUBLE
26057: EQUAL
26058: IFTRUE 26062
26060: GO 26276
26062: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
26063: LD_ADDR_VAR 0 4
26067: PUSH
26068: LD_INT 35
26070: PUSH
26071: LD_INT 45
26073: PUSH
26074: LD_INT 46
26076: PUSH
26077: LD_INT 47
26079: PUSH
26080: LD_INT 82
26082: PUSH
26083: LD_INT 83
26085: PUSH
26086: LD_INT 84
26088: PUSH
26089: LD_INT 85
26091: PUSH
26092: LD_INT 86
26094: PUSH
26095: LD_INT 1
26097: PUSH
26098: LD_INT 2
26100: PUSH
26101: LD_INT 6
26103: PUSH
26104: LD_INT 15
26106: PUSH
26107: LD_INT 16
26109: PUSH
26110: LD_INT 7
26112: PUSH
26113: LD_INT 12
26115: PUSH
26116: LD_INT 13
26118: PUSH
26119: LD_INT 10
26121: PUSH
26122: LD_INT 14
26124: PUSH
26125: LD_INT 20
26127: PUSH
26128: LD_INT 21
26130: PUSH
26131: LD_INT 22
26133: PUSH
26134: LD_INT 25
26136: PUSH
26137: LD_INT 32
26139: PUSH
26140: LD_INT 27
26142: PUSH
26143: LD_INT 36
26145: PUSH
26146: LD_INT 69
26148: PUSH
26149: LD_INT 39
26151: PUSH
26152: LD_INT 34
26154: PUSH
26155: LD_INT 40
26157: PUSH
26158: LD_INT 48
26160: PUSH
26161: LD_INT 49
26163: PUSH
26164: LD_INT 50
26166: PUSH
26167: LD_INT 51
26169: PUSH
26170: LD_INT 52
26172: PUSH
26173: LD_INT 53
26175: PUSH
26176: LD_INT 54
26178: PUSH
26179: LD_INT 55
26181: PUSH
26182: LD_INT 56
26184: PUSH
26185: LD_INT 57
26187: PUSH
26188: LD_INT 58
26190: PUSH
26191: LD_INT 59
26193: PUSH
26194: LD_INT 60
26196: PUSH
26197: LD_INT 61
26199: PUSH
26200: LD_INT 62
26202: PUSH
26203: LD_INT 80
26205: PUSH
26206: LD_INT 82
26208: PUSH
26209: LD_INT 83
26211: PUSH
26212: LD_INT 84
26214: PUSH
26215: LD_INT 85
26217: PUSH
26218: LD_INT 86
26220: PUSH
26221: EMPTY
26222: LIST
26223: LIST
26224: LIST
26225: LIST
26226: LIST
26227: LIST
26228: LIST
26229: LIST
26230: LIST
26231: LIST
26232: LIST
26233: LIST
26234: LIST
26235: LIST
26236: LIST
26237: LIST
26238: LIST
26239: LIST
26240: LIST
26241: LIST
26242: LIST
26243: LIST
26244: LIST
26245: LIST
26246: LIST
26247: LIST
26248: LIST
26249: LIST
26250: LIST
26251: LIST
26252: LIST
26253: LIST
26254: LIST
26255: LIST
26256: LIST
26257: LIST
26258: LIST
26259: LIST
26260: LIST
26261: LIST
26262: LIST
26263: LIST
26264: LIST
26265: LIST
26266: LIST
26267: LIST
26268: LIST
26269: LIST
26270: LIST
26271: LIST
26272: LIST
26273: ST_TO_ADDR
26274: GO 26741
26276: LD_INT 2
26278: DOUBLE
26279: EQUAL
26280: IFTRUE 26284
26282: GO 26510
26284: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
26285: LD_ADDR_VAR 0 4
26289: PUSH
26290: LD_INT 35
26292: PUSH
26293: LD_INT 45
26295: PUSH
26296: LD_INT 46
26298: PUSH
26299: LD_INT 47
26301: PUSH
26302: LD_INT 82
26304: PUSH
26305: LD_INT 83
26307: PUSH
26308: LD_INT 84
26310: PUSH
26311: LD_INT 85
26313: PUSH
26314: LD_INT 87
26316: PUSH
26317: LD_INT 70
26319: PUSH
26320: LD_INT 1
26322: PUSH
26323: LD_INT 11
26325: PUSH
26326: LD_INT 3
26328: PUSH
26329: LD_INT 4
26331: PUSH
26332: LD_INT 5
26334: PUSH
26335: LD_INT 6
26337: PUSH
26338: LD_INT 15
26340: PUSH
26341: LD_INT 18
26343: PUSH
26344: LD_INT 7
26346: PUSH
26347: LD_INT 17
26349: PUSH
26350: LD_INT 8
26352: PUSH
26353: LD_INT 20
26355: PUSH
26356: LD_INT 21
26358: PUSH
26359: LD_INT 22
26361: PUSH
26362: LD_INT 72
26364: PUSH
26365: LD_INT 26
26367: PUSH
26368: LD_INT 69
26370: PUSH
26371: LD_INT 39
26373: PUSH
26374: LD_INT 40
26376: PUSH
26377: LD_INT 41
26379: PUSH
26380: LD_INT 42
26382: PUSH
26383: LD_INT 43
26385: PUSH
26386: LD_INT 48
26388: PUSH
26389: LD_INT 49
26391: PUSH
26392: LD_INT 50
26394: PUSH
26395: LD_INT 51
26397: PUSH
26398: LD_INT 52
26400: PUSH
26401: LD_INT 53
26403: PUSH
26404: LD_INT 54
26406: PUSH
26407: LD_INT 55
26409: PUSH
26410: LD_INT 56
26412: PUSH
26413: LD_INT 60
26415: PUSH
26416: LD_INT 61
26418: PUSH
26419: LD_INT 62
26421: PUSH
26422: LD_INT 66
26424: PUSH
26425: LD_INT 67
26427: PUSH
26428: LD_INT 68
26430: PUSH
26431: LD_INT 81
26433: PUSH
26434: LD_INT 82
26436: PUSH
26437: LD_INT 83
26439: PUSH
26440: LD_INT 84
26442: PUSH
26443: LD_INT 85
26445: PUSH
26446: LD_INT 87
26448: PUSH
26449: LD_INT 88
26451: PUSH
26452: EMPTY
26453: LIST
26454: LIST
26455: LIST
26456: LIST
26457: LIST
26458: LIST
26459: LIST
26460: LIST
26461: LIST
26462: LIST
26463: LIST
26464: LIST
26465: LIST
26466: LIST
26467: LIST
26468: LIST
26469: LIST
26470: LIST
26471: LIST
26472: LIST
26473: LIST
26474: LIST
26475: LIST
26476: LIST
26477: LIST
26478: LIST
26479: LIST
26480: LIST
26481: LIST
26482: LIST
26483: LIST
26484: LIST
26485: LIST
26486: LIST
26487: LIST
26488: LIST
26489: LIST
26490: LIST
26491: LIST
26492: LIST
26493: LIST
26494: LIST
26495: LIST
26496: LIST
26497: LIST
26498: LIST
26499: LIST
26500: LIST
26501: LIST
26502: LIST
26503: LIST
26504: LIST
26505: LIST
26506: LIST
26507: ST_TO_ADDR
26508: GO 26741
26510: LD_INT 3
26512: DOUBLE
26513: EQUAL
26514: IFTRUE 26518
26516: GO 26740
26518: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
26519: LD_ADDR_VAR 0 4
26523: PUSH
26524: LD_INT 46
26526: PUSH
26527: LD_INT 47
26529: PUSH
26530: LD_INT 1
26532: PUSH
26533: LD_INT 2
26535: PUSH
26536: LD_INT 82
26538: PUSH
26539: LD_INT 83
26541: PUSH
26542: LD_INT 84
26544: PUSH
26545: LD_INT 85
26547: PUSH
26548: LD_INT 86
26550: PUSH
26551: LD_INT 11
26553: PUSH
26554: LD_INT 9
26556: PUSH
26557: LD_INT 20
26559: PUSH
26560: LD_INT 19
26562: PUSH
26563: LD_INT 21
26565: PUSH
26566: LD_INT 24
26568: PUSH
26569: LD_INT 22
26571: PUSH
26572: LD_INT 25
26574: PUSH
26575: LD_INT 28
26577: PUSH
26578: LD_INT 29
26580: PUSH
26581: LD_INT 30
26583: PUSH
26584: LD_INT 31
26586: PUSH
26587: LD_INT 37
26589: PUSH
26590: LD_INT 38
26592: PUSH
26593: LD_INT 32
26595: PUSH
26596: LD_INT 27
26598: PUSH
26599: LD_INT 33
26601: PUSH
26602: LD_INT 69
26604: PUSH
26605: LD_INT 39
26607: PUSH
26608: LD_INT 34
26610: PUSH
26611: LD_INT 40
26613: PUSH
26614: LD_INT 71
26616: PUSH
26617: LD_INT 23
26619: PUSH
26620: LD_INT 44
26622: PUSH
26623: LD_INT 48
26625: PUSH
26626: LD_INT 49
26628: PUSH
26629: LD_INT 50
26631: PUSH
26632: LD_INT 51
26634: PUSH
26635: LD_INT 52
26637: PUSH
26638: LD_INT 53
26640: PUSH
26641: LD_INT 54
26643: PUSH
26644: LD_INT 55
26646: PUSH
26647: LD_INT 56
26649: PUSH
26650: LD_INT 57
26652: PUSH
26653: LD_INT 58
26655: PUSH
26656: LD_INT 59
26658: PUSH
26659: LD_INT 63
26661: PUSH
26662: LD_INT 64
26664: PUSH
26665: LD_INT 65
26667: PUSH
26668: LD_INT 82
26670: PUSH
26671: LD_INT 83
26673: PUSH
26674: LD_INT 84
26676: PUSH
26677: LD_INT 85
26679: PUSH
26680: LD_INT 86
26682: PUSH
26683: EMPTY
26684: LIST
26685: LIST
26686: LIST
26687: LIST
26688: LIST
26689: LIST
26690: LIST
26691: LIST
26692: LIST
26693: LIST
26694: LIST
26695: LIST
26696: LIST
26697: LIST
26698: LIST
26699: LIST
26700: LIST
26701: LIST
26702: LIST
26703: LIST
26704: LIST
26705: LIST
26706: LIST
26707: LIST
26708: LIST
26709: LIST
26710: LIST
26711: LIST
26712: LIST
26713: LIST
26714: LIST
26715: LIST
26716: LIST
26717: LIST
26718: LIST
26719: LIST
26720: LIST
26721: LIST
26722: LIST
26723: LIST
26724: LIST
26725: LIST
26726: LIST
26727: LIST
26728: LIST
26729: LIST
26730: LIST
26731: LIST
26732: LIST
26733: LIST
26734: LIST
26735: LIST
26736: LIST
26737: ST_TO_ADDR
26738: GO 26741
26740: POP
// if state > - 1 and state < 3 then
26741: LD_VAR 0 3
26745: PUSH
26746: LD_INT 1
26748: NEG
26749: GREATER
26750: PUSH
26751: LD_VAR 0 3
26755: PUSH
26756: LD_INT 3
26758: LESS
26759: AND
26760: IFFALSE 26817
// for i in result do
26762: LD_ADDR_VAR 0 5
26766: PUSH
26767: LD_VAR 0 4
26771: PUSH
26772: FOR_IN
26773: IFFALSE 26815
// if GetTech ( i , side ) <> state then
26775: LD_VAR 0 5
26779: PPUSH
26780: LD_VAR 0 1
26784: PPUSH
26785: CALL_OW 321
26789: PUSH
26790: LD_VAR 0 3
26794: NONEQUAL
26795: IFFALSE 26813
// result := result diff i ;
26797: LD_ADDR_VAR 0 4
26801: PUSH
26802: LD_VAR 0 4
26806: PUSH
26807: LD_VAR 0 5
26811: DIFF
26812: ST_TO_ADDR
26813: GO 26772
26815: POP
26816: POP
// end ;
26817: LD_VAR 0 4
26821: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
26822: LD_INT 0
26824: PPUSH
26825: PPUSH
26826: PPUSH
// result := true ;
26827: LD_ADDR_VAR 0 3
26831: PUSH
26832: LD_INT 1
26834: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
26835: LD_ADDR_VAR 0 5
26839: PUSH
26840: LD_VAR 0 2
26844: PPUSH
26845: CALL_OW 480
26849: ST_TO_ADDR
// if not tmp then
26850: LD_VAR 0 5
26854: NOT
26855: IFFALSE 26859
// exit ;
26857: GO 26908
// for i in tmp do
26859: LD_ADDR_VAR 0 4
26863: PUSH
26864: LD_VAR 0 5
26868: PUSH
26869: FOR_IN
26870: IFFALSE 26906
// if GetTech ( i , side ) <> state_researched then
26872: LD_VAR 0 4
26876: PPUSH
26877: LD_VAR 0 1
26881: PPUSH
26882: CALL_OW 321
26886: PUSH
26887: LD_INT 2
26889: NONEQUAL
26890: IFFALSE 26904
// begin result := false ;
26892: LD_ADDR_VAR 0 3
26896: PUSH
26897: LD_INT 0
26899: ST_TO_ADDR
// exit ;
26900: POP
26901: POP
26902: GO 26908
// end ;
26904: GO 26869
26906: POP
26907: POP
// end ;
26908: LD_VAR 0 3
26912: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
26913: LD_INT 0
26915: PPUSH
26916: PPUSH
26917: PPUSH
26918: PPUSH
26919: PPUSH
26920: PPUSH
26921: PPUSH
26922: PPUSH
26923: PPUSH
26924: PPUSH
26925: PPUSH
26926: PPUSH
26927: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
26928: LD_VAR 0 1
26932: NOT
26933: PUSH
26934: LD_VAR 0 1
26938: PPUSH
26939: CALL_OW 257
26943: PUSH
26944: LD_INT 9
26946: NONEQUAL
26947: OR
26948: IFFALSE 26952
// exit ;
26950: GO 27525
// side := GetSide ( unit ) ;
26952: LD_ADDR_VAR 0 9
26956: PUSH
26957: LD_VAR 0 1
26961: PPUSH
26962: CALL_OW 255
26966: ST_TO_ADDR
// tech_space := tech_spacanom ;
26967: LD_ADDR_VAR 0 12
26971: PUSH
26972: LD_INT 29
26974: ST_TO_ADDR
// tech_time := tech_taurad ;
26975: LD_ADDR_VAR 0 13
26979: PUSH
26980: LD_INT 28
26982: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
26983: LD_ADDR_VAR 0 11
26987: PUSH
26988: LD_VAR 0 1
26992: PPUSH
26993: CALL_OW 310
26997: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
26998: LD_VAR 0 11
27002: PPUSH
27003: CALL_OW 247
27007: PUSH
27008: LD_INT 2
27010: EQUAL
27011: IFFALSE 27015
// exit ;
27013: GO 27525
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27015: LD_ADDR_VAR 0 8
27019: PUSH
27020: LD_INT 81
27022: PUSH
27023: LD_VAR 0 9
27027: PUSH
27028: EMPTY
27029: LIST
27030: LIST
27031: PUSH
27032: LD_INT 3
27034: PUSH
27035: LD_INT 21
27037: PUSH
27038: LD_INT 3
27040: PUSH
27041: EMPTY
27042: LIST
27043: LIST
27044: PUSH
27045: EMPTY
27046: LIST
27047: LIST
27048: PUSH
27049: EMPTY
27050: LIST
27051: LIST
27052: PPUSH
27053: CALL_OW 69
27057: ST_TO_ADDR
// if not tmp then
27058: LD_VAR 0 8
27062: NOT
27063: IFFALSE 27067
// exit ;
27065: GO 27525
// if in_unit then
27067: LD_VAR 0 11
27071: IFFALSE 27095
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
27073: LD_ADDR_VAR 0 10
27077: PUSH
27078: LD_VAR 0 8
27082: PPUSH
27083: LD_VAR 0 11
27087: PPUSH
27088: CALL_OW 74
27092: ST_TO_ADDR
27093: GO 27115
// enemy := NearestUnitToUnit ( tmp , unit ) ;
27095: LD_ADDR_VAR 0 10
27099: PUSH
27100: LD_VAR 0 8
27104: PPUSH
27105: LD_VAR 0 1
27109: PPUSH
27110: CALL_OW 74
27114: ST_TO_ADDR
// if not enemy then
27115: LD_VAR 0 10
27119: NOT
27120: IFFALSE 27124
// exit ;
27122: GO 27525
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
27124: LD_VAR 0 11
27128: PUSH
27129: LD_VAR 0 11
27133: PPUSH
27134: LD_VAR 0 10
27138: PPUSH
27139: CALL_OW 296
27143: PUSH
27144: LD_INT 13
27146: GREATER
27147: AND
27148: PUSH
27149: LD_VAR 0 1
27153: PPUSH
27154: LD_VAR 0 10
27158: PPUSH
27159: CALL_OW 296
27163: PUSH
27164: LD_INT 12
27166: GREATER
27167: OR
27168: IFFALSE 27172
// exit ;
27170: GO 27525
// missile := [ 1 ] ;
27172: LD_ADDR_VAR 0 14
27176: PUSH
27177: LD_INT 1
27179: PUSH
27180: EMPTY
27181: LIST
27182: ST_TO_ADDR
// if Researched ( side , tech_space ) then
27183: LD_VAR 0 9
27187: PPUSH
27188: LD_VAR 0 12
27192: PPUSH
27193: CALL_OW 325
27197: IFFALSE 27226
// missile := Replace ( missile , missile + 1 , 2 ) ;
27199: LD_ADDR_VAR 0 14
27203: PUSH
27204: LD_VAR 0 14
27208: PPUSH
27209: LD_VAR 0 14
27213: PUSH
27214: LD_INT 1
27216: PLUS
27217: PPUSH
27218: LD_INT 2
27220: PPUSH
27221: CALL_OW 1
27225: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
27226: LD_VAR 0 9
27230: PPUSH
27231: LD_VAR 0 13
27235: PPUSH
27236: CALL_OW 325
27240: PUSH
27241: LD_VAR 0 10
27245: PPUSH
27246: CALL_OW 255
27250: PPUSH
27251: LD_VAR 0 13
27255: PPUSH
27256: CALL_OW 325
27260: NOT
27261: AND
27262: IFFALSE 27291
// missile := Replace ( missile , missile + 1 , 3 ) ;
27264: LD_ADDR_VAR 0 14
27268: PUSH
27269: LD_VAR 0 14
27273: PPUSH
27274: LD_VAR 0 14
27278: PUSH
27279: LD_INT 1
27281: PLUS
27282: PPUSH
27283: LD_INT 3
27285: PPUSH
27286: CALL_OW 1
27290: ST_TO_ADDR
// if missile < 2 then
27291: LD_VAR 0 14
27295: PUSH
27296: LD_INT 2
27298: LESS
27299: IFFALSE 27303
// exit ;
27301: GO 27525
// x := GetX ( enemy ) ;
27303: LD_ADDR_VAR 0 4
27307: PUSH
27308: LD_VAR 0 10
27312: PPUSH
27313: CALL_OW 250
27317: ST_TO_ADDR
// y := GetY ( enemy ) ;
27318: LD_ADDR_VAR 0 5
27322: PUSH
27323: LD_VAR 0 10
27327: PPUSH
27328: CALL_OW 251
27332: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
27333: LD_ADDR_VAR 0 6
27337: PUSH
27338: LD_VAR 0 4
27342: PUSH
27343: LD_INT 1
27345: NEG
27346: PPUSH
27347: LD_INT 1
27349: PPUSH
27350: CALL_OW 12
27354: PLUS
27355: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
27356: LD_ADDR_VAR 0 7
27360: PUSH
27361: LD_VAR 0 5
27365: PUSH
27366: LD_INT 1
27368: NEG
27369: PPUSH
27370: LD_INT 1
27372: PPUSH
27373: CALL_OW 12
27377: PLUS
27378: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27379: LD_VAR 0 6
27383: PPUSH
27384: LD_VAR 0 7
27388: PPUSH
27389: CALL_OW 488
27393: NOT
27394: IFFALSE 27416
// begin _x := x ;
27396: LD_ADDR_VAR 0 6
27400: PUSH
27401: LD_VAR 0 4
27405: ST_TO_ADDR
// _y := y ;
27406: LD_ADDR_VAR 0 7
27410: PUSH
27411: LD_VAR 0 5
27415: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
27416: LD_ADDR_VAR 0 3
27420: PUSH
27421: LD_INT 1
27423: PPUSH
27424: LD_VAR 0 14
27428: PPUSH
27429: CALL_OW 12
27433: ST_TO_ADDR
// case i of 1 :
27434: LD_VAR 0 3
27438: PUSH
27439: LD_INT 1
27441: DOUBLE
27442: EQUAL
27443: IFTRUE 27447
27445: GO 27464
27447: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
27448: LD_VAR 0 1
27452: PPUSH
27453: LD_VAR 0 10
27457: PPUSH
27458: CALL_OW 115
27462: GO 27525
27464: LD_INT 2
27466: DOUBLE
27467: EQUAL
27468: IFTRUE 27472
27470: GO 27494
27472: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
27473: LD_VAR 0 1
27477: PPUSH
27478: LD_VAR 0 6
27482: PPUSH
27483: LD_VAR 0 7
27487: PPUSH
27488: CALL_OW 153
27492: GO 27525
27494: LD_INT 3
27496: DOUBLE
27497: EQUAL
27498: IFTRUE 27502
27500: GO 27524
27502: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
27503: LD_VAR 0 1
27507: PPUSH
27508: LD_VAR 0 6
27512: PPUSH
27513: LD_VAR 0 7
27517: PPUSH
27518: CALL_OW 154
27522: GO 27525
27524: POP
// end ;
27525: LD_VAR 0 2
27529: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
27530: LD_INT 0
27532: PPUSH
27533: PPUSH
27534: PPUSH
27535: PPUSH
27536: PPUSH
27537: PPUSH
// if not unit or not building then
27538: LD_VAR 0 1
27542: NOT
27543: PUSH
27544: LD_VAR 0 2
27548: NOT
27549: OR
27550: IFFALSE 27554
// exit ;
27552: GO 27712
// x := GetX ( building ) ;
27554: LD_ADDR_VAR 0 5
27558: PUSH
27559: LD_VAR 0 2
27563: PPUSH
27564: CALL_OW 250
27568: ST_TO_ADDR
// y := GetY ( building ) ;
27569: LD_ADDR_VAR 0 6
27573: PUSH
27574: LD_VAR 0 2
27578: PPUSH
27579: CALL_OW 251
27583: ST_TO_ADDR
// for i = 0 to 5 do
27584: LD_ADDR_VAR 0 4
27588: PUSH
27589: DOUBLE
27590: LD_INT 0
27592: DEC
27593: ST_TO_ADDR
27594: LD_INT 5
27596: PUSH
27597: FOR_TO
27598: IFFALSE 27710
// begin _x := ShiftX ( x , i , 3 ) ;
27600: LD_ADDR_VAR 0 7
27604: PUSH
27605: LD_VAR 0 5
27609: PPUSH
27610: LD_VAR 0 4
27614: PPUSH
27615: LD_INT 3
27617: PPUSH
27618: CALL_OW 272
27622: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
27623: LD_ADDR_VAR 0 8
27627: PUSH
27628: LD_VAR 0 6
27632: PPUSH
27633: LD_VAR 0 4
27637: PPUSH
27638: LD_INT 3
27640: PPUSH
27641: CALL_OW 273
27645: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27646: LD_VAR 0 7
27650: PPUSH
27651: LD_VAR 0 8
27655: PPUSH
27656: CALL_OW 488
27660: NOT
27661: IFFALSE 27665
// continue ;
27663: GO 27597
// if HexInfo ( _x , _y ) = 0 then
27665: LD_VAR 0 7
27669: PPUSH
27670: LD_VAR 0 8
27674: PPUSH
27675: CALL_OW 428
27679: PUSH
27680: LD_INT 0
27682: EQUAL
27683: IFFALSE 27708
// begin ComMoveXY ( unit , _x , _y ) ;
27685: LD_VAR 0 1
27689: PPUSH
27690: LD_VAR 0 7
27694: PPUSH
27695: LD_VAR 0 8
27699: PPUSH
27700: CALL_OW 111
// exit ;
27704: POP
27705: POP
27706: GO 27712
// end ; end ;
27708: GO 27597
27710: POP
27711: POP
// end ;
27712: LD_VAR 0 3
27716: RET
// export function ScanBase ( side , base_area ) ; begin
27717: LD_INT 0
27719: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
27720: LD_ADDR_VAR 0 3
27724: PUSH
27725: LD_VAR 0 2
27729: PPUSH
27730: LD_INT 81
27732: PUSH
27733: LD_VAR 0 1
27737: PUSH
27738: EMPTY
27739: LIST
27740: LIST
27741: PPUSH
27742: CALL_OW 70
27746: ST_TO_ADDR
// end ;
27747: LD_VAR 0 3
27751: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
27752: LD_INT 0
27754: PPUSH
27755: PPUSH
27756: PPUSH
27757: PPUSH
// result := false ;
27758: LD_ADDR_VAR 0 2
27762: PUSH
27763: LD_INT 0
27765: ST_TO_ADDR
// side := GetSide ( unit ) ;
27766: LD_ADDR_VAR 0 3
27770: PUSH
27771: LD_VAR 0 1
27775: PPUSH
27776: CALL_OW 255
27780: ST_TO_ADDR
// nat := GetNation ( unit ) ;
27781: LD_ADDR_VAR 0 4
27785: PUSH
27786: LD_VAR 0 1
27790: PPUSH
27791: CALL_OW 248
27795: ST_TO_ADDR
// case nat of 1 :
27796: LD_VAR 0 4
27800: PUSH
27801: LD_INT 1
27803: DOUBLE
27804: EQUAL
27805: IFTRUE 27809
27807: GO 27820
27809: POP
// tech := tech_lassight ; 2 :
27810: LD_ADDR_VAR 0 5
27814: PUSH
27815: LD_INT 12
27817: ST_TO_ADDR
27818: GO 27859
27820: LD_INT 2
27822: DOUBLE
27823: EQUAL
27824: IFTRUE 27828
27826: GO 27839
27828: POP
// tech := tech_mortar ; 3 :
27829: LD_ADDR_VAR 0 5
27833: PUSH
27834: LD_INT 41
27836: ST_TO_ADDR
27837: GO 27859
27839: LD_INT 3
27841: DOUBLE
27842: EQUAL
27843: IFTRUE 27847
27845: GO 27858
27847: POP
// tech := tech_bazooka ; end ;
27848: LD_ADDR_VAR 0 5
27852: PUSH
27853: LD_INT 44
27855: ST_TO_ADDR
27856: GO 27859
27858: POP
// if Researched ( side , tech ) then
27859: LD_VAR 0 3
27863: PPUSH
27864: LD_VAR 0 5
27868: PPUSH
27869: CALL_OW 325
27873: IFFALSE 27900
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
27875: LD_ADDR_VAR 0 2
27879: PUSH
27880: LD_INT 5
27882: PUSH
27883: LD_INT 8
27885: PUSH
27886: LD_INT 9
27888: PUSH
27889: EMPTY
27890: LIST
27891: LIST
27892: LIST
27893: PUSH
27894: LD_VAR 0 4
27898: ARRAY
27899: ST_TO_ADDR
// end ;
27900: LD_VAR 0 2
27904: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
27905: LD_INT 0
27907: PPUSH
27908: PPUSH
27909: PPUSH
// if not mines then
27910: LD_VAR 0 2
27914: NOT
27915: IFFALSE 27919
// exit ;
27917: GO 28063
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27919: LD_ADDR_VAR 0 5
27923: PUSH
27924: LD_INT 81
27926: PUSH
27927: LD_VAR 0 1
27931: PUSH
27932: EMPTY
27933: LIST
27934: LIST
27935: PUSH
27936: LD_INT 3
27938: PUSH
27939: LD_INT 21
27941: PUSH
27942: LD_INT 3
27944: PUSH
27945: EMPTY
27946: LIST
27947: LIST
27948: PUSH
27949: EMPTY
27950: LIST
27951: LIST
27952: PUSH
27953: EMPTY
27954: LIST
27955: LIST
27956: PPUSH
27957: CALL_OW 69
27961: ST_TO_ADDR
// for i in mines do
27962: LD_ADDR_VAR 0 4
27966: PUSH
27967: LD_VAR 0 2
27971: PUSH
27972: FOR_IN
27973: IFFALSE 28061
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
27975: LD_VAR 0 4
27979: PUSH
27980: LD_INT 1
27982: ARRAY
27983: PPUSH
27984: LD_VAR 0 4
27988: PUSH
27989: LD_INT 2
27991: ARRAY
27992: PPUSH
27993: CALL_OW 458
27997: NOT
27998: IFFALSE 28002
// continue ;
28000: GO 27972
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
28002: LD_VAR 0 4
28006: PUSH
28007: LD_INT 1
28009: ARRAY
28010: PPUSH
28011: LD_VAR 0 4
28015: PUSH
28016: LD_INT 2
28018: ARRAY
28019: PPUSH
28020: CALL_OW 428
28024: PUSH
28025: LD_VAR 0 5
28029: IN
28030: IFFALSE 28059
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
28032: LD_VAR 0 4
28036: PUSH
28037: LD_INT 1
28039: ARRAY
28040: PPUSH
28041: LD_VAR 0 4
28045: PUSH
28046: LD_INT 2
28048: ARRAY
28049: PPUSH
28050: LD_VAR 0 1
28054: PPUSH
28055: CALL_OW 456
// end ;
28059: GO 27972
28061: POP
28062: POP
// end ;
28063: LD_VAR 0 3
28067: RET
// export function Count ( array ) ; var i ; begin
28068: LD_INT 0
28070: PPUSH
28071: PPUSH
// result := 0 ;
28072: LD_ADDR_VAR 0 2
28076: PUSH
28077: LD_INT 0
28079: ST_TO_ADDR
// for i in array do
28080: LD_ADDR_VAR 0 3
28084: PUSH
28085: LD_VAR 0 1
28089: PUSH
28090: FOR_IN
28091: IFFALSE 28115
// if i then
28093: LD_VAR 0 3
28097: IFFALSE 28113
// result := result + 1 ;
28099: LD_ADDR_VAR 0 2
28103: PUSH
28104: LD_VAR 0 2
28108: PUSH
28109: LD_INT 1
28111: PLUS
28112: ST_TO_ADDR
28113: GO 28090
28115: POP
28116: POP
// end ;
28117: LD_VAR 0 2
28121: RET
// export function IsEmpty ( building ) ; begin
28122: LD_INT 0
28124: PPUSH
// if not building then
28125: LD_VAR 0 1
28129: NOT
28130: IFFALSE 28134
// exit ;
28132: GO 28177
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
28134: LD_ADDR_VAR 0 2
28138: PUSH
28139: LD_VAR 0 1
28143: PUSH
28144: LD_INT 22
28146: PUSH
28147: LD_VAR 0 1
28151: PPUSH
28152: CALL_OW 255
28156: PUSH
28157: EMPTY
28158: LIST
28159: LIST
28160: PUSH
28161: LD_INT 58
28163: PUSH
28164: EMPTY
28165: LIST
28166: PUSH
28167: EMPTY
28168: LIST
28169: LIST
28170: PPUSH
28171: CALL_OW 69
28175: IN
28176: ST_TO_ADDR
// end ;
28177: LD_VAR 0 2
28181: RET
// export function IsNotFull ( building ) ; var places ; begin
28182: LD_INT 0
28184: PPUSH
28185: PPUSH
// if not building then
28186: LD_VAR 0 1
28190: NOT
28191: IFFALSE 28195
// exit ;
28193: GO 28366
// result := false ;
28195: LD_ADDR_VAR 0 2
28199: PUSH
28200: LD_INT 0
28202: ST_TO_ADDR
// places := 0 ;
28203: LD_ADDR_VAR 0 3
28207: PUSH
28208: LD_INT 0
28210: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
28211: LD_VAR 0 1
28215: PPUSH
28216: CALL_OW 266
28220: PUSH
28221: LD_INT 0
28223: DOUBLE
28224: EQUAL
28225: IFTRUE 28283
28227: LD_INT 1
28229: DOUBLE
28230: EQUAL
28231: IFTRUE 28283
28233: LD_INT 6
28235: DOUBLE
28236: EQUAL
28237: IFTRUE 28283
28239: LD_INT 7
28241: DOUBLE
28242: EQUAL
28243: IFTRUE 28283
28245: LD_INT 8
28247: DOUBLE
28248: EQUAL
28249: IFTRUE 28283
28251: LD_INT 4
28253: DOUBLE
28254: EQUAL
28255: IFTRUE 28283
28257: LD_INT 5
28259: DOUBLE
28260: EQUAL
28261: IFTRUE 28283
28263: LD_INT 2
28265: DOUBLE
28266: EQUAL
28267: IFTRUE 28283
28269: LD_INT 3
28271: DOUBLE
28272: EQUAL
28273: IFTRUE 28283
28275: LD_INT 35
28277: DOUBLE
28278: EQUAL
28279: IFTRUE 28283
28281: GO 28294
28283: POP
// places := 6 ; b_bunker , b_breastwork :
28284: LD_ADDR_VAR 0 3
28288: PUSH
28289: LD_INT 6
28291: ST_TO_ADDR
28292: GO 28339
28294: LD_INT 32
28296: DOUBLE
28297: EQUAL
28298: IFTRUE 28308
28300: LD_INT 31
28302: DOUBLE
28303: EQUAL
28304: IFTRUE 28308
28306: GO 28319
28308: POP
// places := 1 ; b_control_tower :
28309: LD_ADDR_VAR 0 3
28313: PUSH
28314: LD_INT 1
28316: ST_TO_ADDR
28317: GO 28339
28319: LD_INT 36
28321: DOUBLE
28322: EQUAL
28323: IFTRUE 28327
28325: GO 28338
28327: POP
// places := 3 ; end ;
28328: LD_ADDR_VAR 0 3
28332: PUSH
28333: LD_INT 3
28335: ST_TO_ADDR
28336: GO 28339
28338: POP
// if places then
28339: LD_VAR 0 3
28343: IFFALSE 28366
// result := UnitsInside ( building ) < places ;
28345: LD_ADDR_VAR 0 2
28349: PUSH
28350: LD_VAR 0 1
28354: PPUSH
28355: CALL_OW 313
28359: PUSH
28360: LD_VAR 0 3
28364: LESS
28365: ST_TO_ADDR
// end ;
28366: LD_VAR 0 2
28370: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
28371: LD_INT 0
28373: PPUSH
28374: PPUSH
28375: PPUSH
28376: PPUSH
// tmp := [ ] ;
28377: LD_ADDR_VAR 0 3
28381: PUSH
28382: EMPTY
28383: ST_TO_ADDR
// list := [ ] ;
28384: LD_ADDR_VAR 0 5
28388: PUSH
28389: EMPTY
28390: ST_TO_ADDR
// for i = 16 to 25 do
28391: LD_ADDR_VAR 0 4
28395: PUSH
28396: DOUBLE
28397: LD_INT 16
28399: DEC
28400: ST_TO_ADDR
28401: LD_INT 25
28403: PUSH
28404: FOR_TO
28405: IFFALSE 28478
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
28407: LD_ADDR_VAR 0 3
28411: PUSH
28412: LD_VAR 0 3
28416: PUSH
28417: LD_INT 22
28419: PUSH
28420: LD_VAR 0 1
28424: PPUSH
28425: CALL_OW 255
28429: PUSH
28430: EMPTY
28431: LIST
28432: LIST
28433: PUSH
28434: LD_INT 91
28436: PUSH
28437: LD_VAR 0 1
28441: PUSH
28442: LD_INT 6
28444: PUSH
28445: EMPTY
28446: LIST
28447: LIST
28448: LIST
28449: PUSH
28450: LD_INT 30
28452: PUSH
28453: LD_VAR 0 4
28457: PUSH
28458: EMPTY
28459: LIST
28460: LIST
28461: PUSH
28462: EMPTY
28463: LIST
28464: LIST
28465: LIST
28466: PUSH
28467: EMPTY
28468: LIST
28469: PPUSH
28470: CALL_OW 69
28474: ADD
28475: ST_TO_ADDR
28476: GO 28404
28478: POP
28479: POP
// for i = 1 to tmp do
28480: LD_ADDR_VAR 0 4
28484: PUSH
28485: DOUBLE
28486: LD_INT 1
28488: DEC
28489: ST_TO_ADDR
28490: LD_VAR 0 3
28494: PUSH
28495: FOR_TO
28496: IFFALSE 28584
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
28498: LD_ADDR_VAR 0 5
28502: PUSH
28503: LD_VAR 0 5
28507: PUSH
28508: LD_VAR 0 3
28512: PUSH
28513: LD_VAR 0 4
28517: ARRAY
28518: PPUSH
28519: CALL_OW 266
28523: PUSH
28524: LD_VAR 0 3
28528: PUSH
28529: LD_VAR 0 4
28533: ARRAY
28534: PPUSH
28535: CALL_OW 250
28539: PUSH
28540: LD_VAR 0 3
28544: PUSH
28545: LD_VAR 0 4
28549: ARRAY
28550: PPUSH
28551: CALL_OW 251
28555: PUSH
28556: LD_VAR 0 3
28560: PUSH
28561: LD_VAR 0 4
28565: ARRAY
28566: PPUSH
28567: CALL_OW 254
28571: PUSH
28572: EMPTY
28573: LIST
28574: LIST
28575: LIST
28576: LIST
28577: PUSH
28578: EMPTY
28579: LIST
28580: ADD
28581: ST_TO_ADDR
28582: GO 28495
28584: POP
28585: POP
// result := list ;
28586: LD_ADDR_VAR 0 2
28590: PUSH
28591: LD_VAR 0 5
28595: ST_TO_ADDR
// end ;
28596: LD_VAR 0 2
28600: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
28601: LD_INT 0
28603: PPUSH
28604: PPUSH
28605: PPUSH
28606: PPUSH
28607: PPUSH
28608: PPUSH
28609: PPUSH
// if not factory then
28610: LD_VAR 0 1
28614: NOT
28615: IFFALSE 28619
// exit ;
28617: GO 29212
// if control = control_apeman then
28619: LD_VAR 0 4
28623: PUSH
28624: LD_INT 5
28626: EQUAL
28627: IFFALSE 28736
// begin tmp := UnitsInside ( factory ) ;
28629: LD_ADDR_VAR 0 8
28633: PUSH
28634: LD_VAR 0 1
28638: PPUSH
28639: CALL_OW 313
28643: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
28644: LD_VAR 0 8
28648: PPUSH
28649: LD_INT 25
28651: PUSH
28652: LD_INT 12
28654: PUSH
28655: EMPTY
28656: LIST
28657: LIST
28658: PPUSH
28659: CALL_OW 72
28663: NOT
28664: IFFALSE 28674
// control := control_manual ;
28666: LD_ADDR_VAR 0 4
28670: PUSH
28671: LD_INT 1
28673: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
28674: LD_ADDR_VAR 0 8
28678: PUSH
28679: LD_VAR 0 1
28683: PPUSH
28684: CALL 28371 0 1
28688: ST_TO_ADDR
// if tmp then
28689: LD_VAR 0 8
28693: IFFALSE 28736
// begin for i in tmp do
28695: LD_ADDR_VAR 0 7
28699: PUSH
28700: LD_VAR 0 8
28704: PUSH
28705: FOR_IN
28706: IFFALSE 28734
// if i [ 1 ] = b_ext_radio then
28708: LD_VAR 0 7
28712: PUSH
28713: LD_INT 1
28715: ARRAY
28716: PUSH
28717: LD_INT 22
28719: EQUAL
28720: IFFALSE 28732
// begin control := control_remote ;
28722: LD_ADDR_VAR 0 4
28726: PUSH
28727: LD_INT 2
28729: ST_TO_ADDR
// break ;
28730: GO 28734
// end ;
28732: GO 28705
28734: POP
28735: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28736: LD_VAR 0 1
28740: PPUSH
28741: LD_VAR 0 2
28745: PPUSH
28746: LD_VAR 0 3
28750: PPUSH
28751: LD_VAR 0 4
28755: PPUSH
28756: LD_VAR 0 5
28760: PPUSH
28761: CALL_OW 448
28765: IFFALSE 28800
// begin result := [ chassis , engine , control , weapon ] ;
28767: LD_ADDR_VAR 0 6
28771: PUSH
28772: LD_VAR 0 2
28776: PUSH
28777: LD_VAR 0 3
28781: PUSH
28782: LD_VAR 0 4
28786: PUSH
28787: LD_VAR 0 5
28791: PUSH
28792: EMPTY
28793: LIST
28794: LIST
28795: LIST
28796: LIST
28797: ST_TO_ADDR
// exit ;
28798: GO 29212
// end ; _chassis := AvailableChassisList ( factory ) ;
28800: LD_ADDR_VAR 0 9
28804: PUSH
28805: LD_VAR 0 1
28809: PPUSH
28810: CALL_OW 475
28814: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
28815: LD_ADDR_VAR 0 11
28819: PUSH
28820: LD_VAR 0 1
28824: PPUSH
28825: CALL_OW 476
28829: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
28830: LD_ADDR_VAR 0 12
28834: PUSH
28835: LD_VAR 0 1
28839: PPUSH
28840: CALL_OW 477
28844: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
28845: LD_ADDR_VAR 0 10
28849: PUSH
28850: LD_VAR 0 1
28854: PPUSH
28855: CALL_OW 478
28859: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
28860: LD_VAR 0 9
28864: NOT
28865: PUSH
28866: LD_VAR 0 11
28870: NOT
28871: OR
28872: PUSH
28873: LD_VAR 0 12
28877: NOT
28878: OR
28879: PUSH
28880: LD_VAR 0 10
28884: NOT
28885: OR
28886: IFFALSE 28921
// begin result := [ chassis , engine , control , weapon ] ;
28888: LD_ADDR_VAR 0 6
28892: PUSH
28893: LD_VAR 0 2
28897: PUSH
28898: LD_VAR 0 3
28902: PUSH
28903: LD_VAR 0 4
28907: PUSH
28908: LD_VAR 0 5
28912: PUSH
28913: EMPTY
28914: LIST
28915: LIST
28916: LIST
28917: LIST
28918: ST_TO_ADDR
// exit ;
28919: GO 29212
// end ; if not chassis in _chassis then
28921: LD_VAR 0 2
28925: PUSH
28926: LD_VAR 0 9
28930: IN
28931: NOT
28932: IFFALSE 28958
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
28934: LD_ADDR_VAR 0 2
28938: PUSH
28939: LD_VAR 0 9
28943: PUSH
28944: LD_INT 1
28946: PPUSH
28947: LD_VAR 0 9
28951: PPUSH
28952: CALL_OW 12
28956: ARRAY
28957: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
28958: LD_VAR 0 2
28962: PPUSH
28963: LD_VAR 0 3
28967: PPUSH
28968: CALL 29217 0 2
28972: NOT
28973: IFFALSE 29032
// repeat engine := _engine [ 1 ] ;
28975: LD_ADDR_VAR 0 3
28979: PUSH
28980: LD_VAR 0 11
28984: PUSH
28985: LD_INT 1
28987: ARRAY
28988: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
28989: LD_ADDR_VAR 0 11
28993: PUSH
28994: LD_VAR 0 11
28998: PPUSH
28999: LD_INT 1
29001: PPUSH
29002: CALL_OW 3
29006: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
29007: LD_VAR 0 2
29011: PPUSH
29012: LD_VAR 0 3
29016: PPUSH
29017: CALL 29217 0 2
29021: PUSH
29022: LD_VAR 0 11
29026: PUSH
29027: EMPTY
29028: EQUAL
29029: OR
29030: IFFALSE 28975
// if not control in _control then
29032: LD_VAR 0 4
29036: PUSH
29037: LD_VAR 0 12
29041: IN
29042: NOT
29043: IFFALSE 29069
// control := _control [ rand ( 1 , _control ) ] ;
29045: LD_ADDR_VAR 0 4
29049: PUSH
29050: LD_VAR 0 12
29054: PUSH
29055: LD_INT 1
29057: PPUSH
29058: LD_VAR 0 12
29062: PPUSH
29063: CALL_OW 12
29067: ARRAY
29068: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
29069: LD_VAR 0 2
29073: PPUSH
29074: LD_VAR 0 5
29078: PPUSH
29079: CALL 29437 0 2
29083: NOT
29084: IFFALSE 29143
// repeat weapon := _weapon [ 1 ] ;
29086: LD_ADDR_VAR 0 5
29090: PUSH
29091: LD_VAR 0 10
29095: PUSH
29096: LD_INT 1
29098: ARRAY
29099: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
29100: LD_ADDR_VAR 0 10
29104: PUSH
29105: LD_VAR 0 10
29109: PPUSH
29110: LD_INT 1
29112: PPUSH
29113: CALL_OW 3
29117: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
29118: LD_VAR 0 2
29122: PPUSH
29123: LD_VAR 0 5
29127: PPUSH
29128: CALL 29437 0 2
29132: PUSH
29133: LD_VAR 0 10
29137: PUSH
29138: EMPTY
29139: EQUAL
29140: OR
29141: IFFALSE 29086
// result := [ ] ;
29143: LD_ADDR_VAR 0 6
29147: PUSH
29148: EMPTY
29149: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29150: LD_VAR 0 1
29154: PPUSH
29155: LD_VAR 0 2
29159: PPUSH
29160: LD_VAR 0 3
29164: PPUSH
29165: LD_VAR 0 4
29169: PPUSH
29170: LD_VAR 0 5
29174: PPUSH
29175: CALL_OW 448
29179: IFFALSE 29212
// result := [ chassis , engine , control , weapon ] ;
29181: LD_ADDR_VAR 0 6
29185: PUSH
29186: LD_VAR 0 2
29190: PUSH
29191: LD_VAR 0 3
29195: PUSH
29196: LD_VAR 0 4
29200: PUSH
29201: LD_VAR 0 5
29205: PUSH
29206: EMPTY
29207: LIST
29208: LIST
29209: LIST
29210: LIST
29211: ST_TO_ADDR
// end ;
29212: LD_VAR 0 6
29216: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
29217: LD_INT 0
29219: PPUSH
// if not chassis or not engine then
29220: LD_VAR 0 1
29224: NOT
29225: PUSH
29226: LD_VAR 0 2
29230: NOT
29231: OR
29232: IFFALSE 29236
// exit ;
29234: GO 29432
// case engine of engine_solar :
29236: LD_VAR 0 2
29240: PUSH
29241: LD_INT 2
29243: DOUBLE
29244: EQUAL
29245: IFTRUE 29249
29247: GO 29287
29249: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
29250: LD_ADDR_VAR 0 3
29254: PUSH
29255: LD_INT 11
29257: PUSH
29258: LD_INT 12
29260: PUSH
29261: LD_INT 13
29263: PUSH
29264: LD_INT 14
29266: PUSH
29267: LD_INT 1
29269: PUSH
29270: LD_INT 2
29272: PUSH
29273: LD_INT 3
29275: PUSH
29276: EMPTY
29277: LIST
29278: LIST
29279: LIST
29280: LIST
29281: LIST
29282: LIST
29283: LIST
29284: ST_TO_ADDR
29285: GO 29416
29287: LD_INT 1
29289: DOUBLE
29290: EQUAL
29291: IFTRUE 29295
29293: GO 29357
29295: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
29296: LD_ADDR_VAR 0 3
29300: PUSH
29301: LD_INT 11
29303: PUSH
29304: LD_INT 12
29306: PUSH
29307: LD_INT 13
29309: PUSH
29310: LD_INT 14
29312: PUSH
29313: LD_INT 1
29315: PUSH
29316: LD_INT 2
29318: PUSH
29319: LD_INT 3
29321: PUSH
29322: LD_INT 4
29324: PUSH
29325: LD_INT 5
29327: PUSH
29328: LD_INT 21
29330: PUSH
29331: LD_INT 23
29333: PUSH
29334: LD_INT 22
29336: PUSH
29337: LD_INT 24
29339: PUSH
29340: EMPTY
29341: LIST
29342: LIST
29343: LIST
29344: LIST
29345: LIST
29346: LIST
29347: LIST
29348: LIST
29349: LIST
29350: LIST
29351: LIST
29352: LIST
29353: LIST
29354: ST_TO_ADDR
29355: GO 29416
29357: LD_INT 3
29359: DOUBLE
29360: EQUAL
29361: IFTRUE 29365
29363: GO 29415
29365: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29366: LD_ADDR_VAR 0 3
29370: PUSH
29371: LD_INT 13
29373: PUSH
29374: LD_INT 14
29376: PUSH
29377: LD_INT 2
29379: PUSH
29380: LD_INT 3
29382: PUSH
29383: LD_INT 4
29385: PUSH
29386: LD_INT 5
29388: PUSH
29389: LD_INT 21
29391: PUSH
29392: LD_INT 22
29394: PUSH
29395: LD_INT 23
29397: PUSH
29398: LD_INT 24
29400: PUSH
29401: EMPTY
29402: LIST
29403: LIST
29404: LIST
29405: LIST
29406: LIST
29407: LIST
29408: LIST
29409: LIST
29410: LIST
29411: LIST
29412: ST_TO_ADDR
29413: GO 29416
29415: POP
// result := ( chassis in result ) ;
29416: LD_ADDR_VAR 0 3
29420: PUSH
29421: LD_VAR 0 1
29425: PUSH
29426: LD_VAR 0 3
29430: IN
29431: ST_TO_ADDR
// end ;
29432: LD_VAR 0 3
29436: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
29437: LD_INT 0
29439: PPUSH
// if not chassis or not weapon then
29440: LD_VAR 0 1
29444: NOT
29445: PUSH
29446: LD_VAR 0 2
29450: NOT
29451: OR
29452: IFFALSE 29456
// exit ;
29454: GO 30516
// case weapon of us_machine_gun :
29456: LD_VAR 0 2
29460: PUSH
29461: LD_INT 2
29463: DOUBLE
29464: EQUAL
29465: IFTRUE 29469
29467: GO 29499
29469: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
29470: LD_ADDR_VAR 0 3
29474: PUSH
29475: LD_INT 1
29477: PUSH
29478: LD_INT 2
29480: PUSH
29481: LD_INT 3
29483: PUSH
29484: LD_INT 4
29486: PUSH
29487: LD_INT 5
29489: PUSH
29490: EMPTY
29491: LIST
29492: LIST
29493: LIST
29494: LIST
29495: LIST
29496: ST_TO_ADDR
29497: GO 30500
29499: LD_INT 3
29501: DOUBLE
29502: EQUAL
29503: IFTRUE 29507
29505: GO 29537
29507: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
29508: LD_ADDR_VAR 0 3
29512: PUSH
29513: LD_INT 1
29515: PUSH
29516: LD_INT 2
29518: PUSH
29519: LD_INT 3
29521: PUSH
29522: LD_INT 4
29524: PUSH
29525: LD_INT 5
29527: PUSH
29528: EMPTY
29529: LIST
29530: LIST
29531: LIST
29532: LIST
29533: LIST
29534: ST_TO_ADDR
29535: GO 30500
29537: LD_INT 11
29539: DOUBLE
29540: EQUAL
29541: IFTRUE 29545
29543: GO 29575
29545: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
29546: LD_ADDR_VAR 0 3
29550: PUSH
29551: LD_INT 1
29553: PUSH
29554: LD_INT 2
29556: PUSH
29557: LD_INT 3
29559: PUSH
29560: LD_INT 4
29562: PUSH
29563: LD_INT 5
29565: PUSH
29566: EMPTY
29567: LIST
29568: LIST
29569: LIST
29570: LIST
29571: LIST
29572: ST_TO_ADDR
29573: GO 30500
29575: LD_INT 4
29577: DOUBLE
29578: EQUAL
29579: IFTRUE 29583
29581: GO 29609
29583: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
29584: LD_ADDR_VAR 0 3
29588: PUSH
29589: LD_INT 2
29591: PUSH
29592: LD_INT 3
29594: PUSH
29595: LD_INT 4
29597: PUSH
29598: LD_INT 5
29600: PUSH
29601: EMPTY
29602: LIST
29603: LIST
29604: LIST
29605: LIST
29606: ST_TO_ADDR
29607: GO 30500
29609: LD_INT 5
29611: DOUBLE
29612: EQUAL
29613: IFTRUE 29617
29615: GO 29643
29617: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
29618: LD_ADDR_VAR 0 3
29622: PUSH
29623: LD_INT 2
29625: PUSH
29626: LD_INT 3
29628: PUSH
29629: LD_INT 4
29631: PUSH
29632: LD_INT 5
29634: PUSH
29635: EMPTY
29636: LIST
29637: LIST
29638: LIST
29639: LIST
29640: ST_TO_ADDR
29641: GO 30500
29643: LD_INT 9
29645: DOUBLE
29646: EQUAL
29647: IFTRUE 29651
29649: GO 29677
29651: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
29652: LD_ADDR_VAR 0 3
29656: PUSH
29657: LD_INT 2
29659: PUSH
29660: LD_INT 3
29662: PUSH
29663: LD_INT 4
29665: PUSH
29666: LD_INT 5
29668: PUSH
29669: EMPTY
29670: LIST
29671: LIST
29672: LIST
29673: LIST
29674: ST_TO_ADDR
29675: GO 30500
29677: LD_INT 7
29679: DOUBLE
29680: EQUAL
29681: IFTRUE 29685
29683: GO 29711
29685: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
29686: LD_ADDR_VAR 0 3
29690: PUSH
29691: LD_INT 2
29693: PUSH
29694: LD_INT 3
29696: PUSH
29697: LD_INT 4
29699: PUSH
29700: LD_INT 5
29702: PUSH
29703: EMPTY
29704: LIST
29705: LIST
29706: LIST
29707: LIST
29708: ST_TO_ADDR
29709: GO 30500
29711: LD_INT 12
29713: DOUBLE
29714: EQUAL
29715: IFTRUE 29719
29717: GO 29745
29719: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
29720: LD_ADDR_VAR 0 3
29724: PUSH
29725: LD_INT 2
29727: PUSH
29728: LD_INT 3
29730: PUSH
29731: LD_INT 4
29733: PUSH
29734: LD_INT 5
29736: PUSH
29737: EMPTY
29738: LIST
29739: LIST
29740: LIST
29741: LIST
29742: ST_TO_ADDR
29743: GO 30500
29745: LD_INT 13
29747: DOUBLE
29748: EQUAL
29749: IFTRUE 29753
29751: GO 29779
29753: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
29754: LD_ADDR_VAR 0 3
29758: PUSH
29759: LD_INT 2
29761: PUSH
29762: LD_INT 3
29764: PUSH
29765: LD_INT 4
29767: PUSH
29768: LD_INT 5
29770: PUSH
29771: EMPTY
29772: LIST
29773: LIST
29774: LIST
29775: LIST
29776: ST_TO_ADDR
29777: GO 30500
29779: LD_INT 14
29781: DOUBLE
29782: EQUAL
29783: IFTRUE 29787
29785: GO 29805
29787: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
29788: LD_ADDR_VAR 0 3
29792: PUSH
29793: LD_INT 4
29795: PUSH
29796: LD_INT 5
29798: PUSH
29799: EMPTY
29800: LIST
29801: LIST
29802: ST_TO_ADDR
29803: GO 30500
29805: LD_INT 6
29807: DOUBLE
29808: EQUAL
29809: IFTRUE 29813
29811: GO 29831
29813: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
29814: LD_ADDR_VAR 0 3
29818: PUSH
29819: LD_INT 4
29821: PUSH
29822: LD_INT 5
29824: PUSH
29825: EMPTY
29826: LIST
29827: LIST
29828: ST_TO_ADDR
29829: GO 30500
29831: LD_INT 10
29833: DOUBLE
29834: EQUAL
29835: IFTRUE 29839
29837: GO 29857
29839: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
29840: LD_ADDR_VAR 0 3
29844: PUSH
29845: LD_INT 4
29847: PUSH
29848: LD_INT 5
29850: PUSH
29851: EMPTY
29852: LIST
29853: LIST
29854: ST_TO_ADDR
29855: GO 30500
29857: LD_INT 22
29859: DOUBLE
29860: EQUAL
29861: IFTRUE 29865
29863: GO 29891
29865: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
29866: LD_ADDR_VAR 0 3
29870: PUSH
29871: LD_INT 11
29873: PUSH
29874: LD_INT 12
29876: PUSH
29877: LD_INT 13
29879: PUSH
29880: LD_INT 14
29882: PUSH
29883: EMPTY
29884: LIST
29885: LIST
29886: LIST
29887: LIST
29888: ST_TO_ADDR
29889: GO 30500
29891: LD_INT 23
29893: DOUBLE
29894: EQUAL
29895: IFTRUE 29899
29897: GO 29925
29899: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
29900: LD_ADDR_VAR 0 3
29904: PUSH
29905: LD_INT 11
29907: PUSH
29908: LD_INT 12
29910: PUSH
29911: LD_INT 13
29913: PUSH
29914: LD_INT 14
29916: PUSH
29917: EMPTY
29918: LIST
29919: LIST
29920: LIST
29921: LIST
29922: ST_TO_ADDR
29923: GO 30500
29925: LD_INT 24
29927: DOUBLE
29928: EQUAL
29929: IFTRUE 29933
29931: GO 29959
29933: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
29934: LD_ADDR_VAR 0 3
29938: PUSH
29939: LD_INT 11
29941: PUSH
29942: LD_INT 12
29944: PUSH
29945: LD_INT 13
29947: PUSH
29948: LD_INT 14
29950: PUSH
29951: EMPTY
29952: LIST
29953: LIST
29954: LIST
29955: LIST
29956: ST_TO_ADDR
29957: GO 30500
29959: LD_INT 30
29961: DOUBLE
29962: EQUAL
29963: IFTRUE 29967
29965: GO 29993
29967: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
29968: LD_ADDR_VAR 0 3
29972: PUSH
29973: LD_INT 11
29975: PUSH
29976: LD_INT 12
29978: PUSH
29979: LD_INT 13
29981: PUSH
29982: LD_INT 14
29984: PUSH
29985: EMPTY
29986: LIST
29987: LIST
29988: LIST
29989: LIST
29990: ST_TO_ADDR
29991: GO 30500
29993: LD_INT 25
29995: DOUBLE
29996: EQUAL
29997: IFTRUE 30001
29999: GO 30019
30001: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
30002: LD_ADDR_VAR 0 3
30006: PUSH
30007: LD_INT 13
30009: PUSH
30010: LD_INT 14
30012: PUSH
30013: EMPTY
30014: LIST
30015: LIST
30016: ST_TO_ADDR
30017: GO 30500
30019: LD_INT 27
30021: DOUBLE
30022: EQUAL
30023: IFTRUE 30027
30025: GO 30045
30027: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
30028: LD_ADDR_VAR 0 3
30032: PUSH
30033: LD_INT 13
30035: PUSH
30036: LD_INT 14
30038: PUSH
30039: EMPTY
30040: LIST
30041: LIST
30042: ST_TO_ADDR
30043: GO 30500
30045: LD_INT 92
30047: DOUBLE
30048: EQUAL
30049: IFTRUE 30053
30051: GO 30079
30053: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
30054: LD_ADDR_VAR 0 3
30058: PUSH
30059: LD_INT 11
30061: PUSH
30062: LD_INT 12
30064: PUSH
30065: LD_INT 13
30067: PUSH
30068: LD_INT 14
30070: PUSH
30071: EMPTY
30072: LIST
30073: LIST
30074: LIST
30075: LIST
30076: ST_TO_ADDR
30077: GO 30500
30079: LD_INT 28
30081: DOUBLE
30082: EQUAL
30083: IFTRUE 30087
30085: GO 30105
30087: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
30088: LD_ADDR_VAR 0 3
30092: PUSH
30093: LD_INT 13
30095: PUSH
30096: LD_INT 14
30098: PUSH
30099: EMPTY
30100: LIST
30101: LIST
30102: ST_TO_ADDR
30103: GO 30500
30105: LD_INT 29
30107: DOUBLE
30108: EQUAL
30109: IFTRUE 30113
30111: GO 30131
30113: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
30114: LD_ADDR_VAR 0 3
30118: PUSH
30119: LD_INT 13
30121: PUSH
30122: LD_INT 14
30124: PUSH
30125: EMPTY
30126: LIST
30127: LIST
30128: ST_TO_ADDR
30129: GO 30500
30131: LD_INT 31
30133: DOUBLE
30134: EQUAL
30135: IFTRUE 30139
30137: GO 30157
30139: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
30140: LD_ADDR_VAR 0 3
30144: PUSH
30145: LD_INT 13
30147: PUSH
30148: LD_INT 14
30150: PUSH
30151: EMPTY
30152: LIST
30153: LIST
30154: ST_TO_ADDR
30155: GO 30500
30157: LD_INT 26
30159: DOUBLE
30160: EQUAL
30161: IFTRUE 30165
30163: GO 30183
30165: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
30166: LD_ADDR_VAR 0 3
30170: PUSH
30171: LD_INT 13
30173: PUSH
30174: LD_INT 14
30176: PUSH
30177: EMPTY
30178: LIST
30179: LIST
30180: ST_TO_ADDR
30181: GO 30500
30183: LD_INT 42
30185: DOUBLE
30186: EQUAL
30187: IFTRUE 30191
30189: GO 30217
30191: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
30192: LD_ADDR_VAR 0 3
30196: PUSH
30197: LD_INT 21
30199: PUSH
30200: LD_INT 22
30202: PUSH
30203: LD_INT 23
30205: PUSH
30206: LD_INT 24
30208: PUSH
30209: EMPTY
30210: LIST
30211: LIST
30212: LIST
30213: LIST
30214: ST_TO_ADDR
30215: GO 30500
30217: LD_INT 43
30219: DOUBLE
30220: EQUAL
30221: IFTRUE 30225
30223: GO 30251
30225: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
30226: LD_ADDR_VAR 0 3
30230: PUSH
30231: LD_INT 21
30233: PUSH
30234: LD_INT 22
30236: PUSH
30237: LD_INT 23
30239: PUSH
30240: LD_INT 24
30242: PUSH
30243: EMPTY
30244: LIST
30245: LIST
30246: LIST
30247: LIST
30248: ST_TO_ADDR
30249: GO 30500
30251: LD_INT 44
30253: DOUBLE
30254: EQUAL
30255: IFTRUE 30259
30257: GO 30285
30259: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
30260: LD_ADDR_VAR 0 3
30264: PUSH
30265: LD_INT 21
30267: PUSH
30268: LD_INT 22
30270: PUSH
30271: LD_INT 23
30273: PUSH
30274: LD_INT 24
30276: PUSH
30277: EMPTY
30278: LIST
30279: LIST
30280: LIST
30281: LIST
30282: ST_TO_ADDR
30283: GO 30500
30285: LD_INT 45
30287: DOUBLE
30288: EQUAL
30289: IFTRUE 30293
30291: GO 30319
30293: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
30294: LD_ADDR_VAR 0 3
30298: PUSH
30299: LD_INT 21
30301: PUSH
30302: LD_INT 22
30304: PUSH
30305: LD_INT 23
30307: PUSH
30308: LD_INT 24
30310: PUSH
30311: EMPTY
30312: LIST
30313: LIST
30314: LIST
30315: LIST
30316: ST_TO_ADDR
30317: GO 30500
30319: LD_INT 49
30321: DOUBLE
30322: EQUAL
30323: IFTRUE 30327
30325: GO 30353
30327: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
30328: LD_ADDR_VAR 0 3
30332: PUSH
30333: LD_INT 21
30335: PUSH
30336: LD_INT 22
30338: PUSH
30339: LD_INT 23
30341: PUSH
30342: LD_INT 24
30344: PUSH
30345: EMPTY
30346: LIST
30347: LIST
30348: LIST
30349: LIST
30350: ST_TO_ADDR
30351: GO 30500
30353: LD_INT 51
30355: DOUBLE
30356: EQUAL
30357: IFTRUE 30361
30359: GO 30387
30361: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
30362: LD_ADDR_VAR 0 3
30366: PUSH
30367: LD_INT 21
30369: PUSH
30370: LD_INT 22
30372: PUSH
30373: LD_INT 23
30375: PUSH
30376: LD_INT 24
30378: PUSH
30379: EMPTY
30380: LIST
30381: LIST
30382: LIST
30383: LIST
30384: ST_TO_ADDR
30385: GO 30500
30387: LD_INT 52
30389: DOUBLE
30390: EQUAL
30391: IFTRUE 30395
30393: GO 30421
30395: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
30396: LD_ADDR_VAR 0 3
30400: PUSH
30401: LD_INT 21
30403: PUSH
30404: LD_INT 22
30406: PUSH
30407: LD_INT 23
30409: PUSH
30410: LD_INT 24
30412: PUSH
30413: EMPTY
30414: LIST
30415: LIST
30416: LIST
30417: LIST
30418: ST_TO_ADDR
30419: GO 30500
30421: LD_INT 53
30423: DOUBLE
30424: EQUAL
30425: IFTRUE 30429
30427: GO 30447
30429: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
30430: LD_ADDR_VAR 0 3
30434: PUSH
30435: LD_INT 23
30437: PUSH
30438: LD_INT 24
30440: PUSH
30441: EMPTY
30442: LIST
30443: LIST
30444: ST_TO_ADDR
30445: GO 30500
30447: LD_INT 46
30449: DOUBLE
30450: EQUAL
30451: IFTRUE 30455
30453: GO 30473
30455: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
30456: LD_ADDR_VAR 0 3
30460: PUSH
30461: LD_INT 23
30463: PUSH
30464: LD_INT 24
30466: PUSH
30467: EMPTY
30468: LIST
30469: LIST
30470: ST_TO_ADDR
30471: GO 30500
30473: LD_INT 47
30475: DOUBLE
30476: EQUAL
30477: IFTRUE 30481
30479: GO 30499
30481: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30482: LD_ADDR_VAR 0 3
30486: PUSH
30487: LD_INT 23
30489: PUSH
30490: LD_INT 24
30492: PUSH
30493: EMPTY
30494: LIST
30495: LIST
30496: ST_TO_ADDR
30497: GO 30500
30499: POP
// result := ( chassis in result ) ;
30500: LD_ADDR_VAR 0 3
30504: PUSH
30505: LD_VAR 0 1
30509: PUSH
30510: LD_VAR 0 3
30514: IN
30515: ST_TO_ADDR
// end ;
30516: LD_VAR 0 3
30520: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
30521: LD_INT 0
30523: PPUSH
30524: PPUSH
30525: PPUSH
30526: PPUSH
30527: PPUSH
30528: PPUSH
30529: PPUSH
// result := array ;
30530: LD_ADDR_VAR 0 5
30534: PUSH
30535: LD_VAR 0 1
30539: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
30540: LD_VAR 0 1
30544: NOT
30545: PUSH
30546: LD_VAR 0 2
30550: NOT
30551: OR
30552: PUSH
30553: LD_VAR 0 3
30557: NOT
30558: OR
30559: PUSH
30560: LD_VAR 0 2
30564: PUSH
30565: LD_VAR 0 1
30569: GREATER
30570: OR
30571: PUSH
30572: LD_VAR 0 3
30576: PUSH
30577: LD_VAR 0 1
30581: GREATER
30582: OR
30583: IFFALSE 30587
// exit ;
30585: GO 30883
// if direction then
30587: LD_VAR 0 4
30591: IFFALSE 30655
// begin d := 1 ;
30593: LD_ADDR_VAR 0 9
30597: PUSH
30598: LD_INT 1
30600: ST_TO_ADDR
// if i_from > i_to then
30601: LD_VAR 0 2
30605: PUSH
30606: LD_VAR 0 3
30610: GREATER
30611: IFFALSE 30637
// length := ( array - i_from ) + i_to else
30613: LD_ADDR_VAR 0 11
30617: PUSH
30618: LD_VAR 0 1
30622: PUSH
30623: LD_VAR 0 2
30627: MINUS
30628: PUSH
30629: LD_VAR 0 3
30633: PLUS
30634: ST_TO_ADDR
30635: GO 30653
// length := i_to - i_from ;
30637: LD_ADDR_VAR 0 11
30641: PUSH
30642: LD_VAR 0 3
30646: PUSH
30647: LD_VAR 0 2
30651: MINUS
30652: ST_TO_ADDR
// end else
30653: GO 30716
// begin d := - 1 ;
30655: LD_ADDR_VAR 0 9
30659: PUSH
30660: LD_INT 1
30662: NEG
30663: ST_TO_ADDR
// if i_from > i_to then
30664: LD_VAR 0 2
30668: PUSH
30669: LD_VAR 0 3
30673: GREATER
30674: IFFALSE 30694
// length := i_from - i_to else
30676: LD_ADDR_VAR 0 11
30680: PUSH
30681: LD_VAR 0 2
30685: PUSH
30686: LD_VAR 0 3
30690: MINUS
30691: ST_TO_ADDR
30692: GO 30716
// length := ( array - i_to ) + i_from ;
30694: LD_ADDR_VAR 0 11
30698: PUSH
30699: LD_VAR 0 1
30703: PUSH
30704: LD_VAR 0 3
30708: MINUS
30709: PUSH
30710: LD_VAR 0 2
30714: PLUS
30715: ST_TO_ADDR
// end ; if not length then
30716: LD_VAR 0 11
30720: NOT
30721: IFFALSE 30725
// exit ;
30723: GO 30883
// tmp := array ;
30725: LD_ADDR_VAR 0 10
30729: PUSH
30730: LD_VAR 0 1
30734: ST_TO_ADDR
// for i = 1 to length do
30735: LD_ADDR_VAR 0 6
30739: PUSH
30740: DOUBLE
30741: LD_INT 1
30743: DEC
30744: ST_TO_ADDR
30745: LD_VAR 0 11
30749: PUSH
30750: FOR_TO
30751: IFFALSE 30871
// begin for j = 1 to array do
30753: LD_ADDR_VAR 0 7
30757: PUSH
30758: DOUBLE
30759: LD_INT 1
30761: DEC
30762: ST_TO_ADDR
30763: LD_VAR 0 1
30767: PUSH
30768: FOR_TO
30769: IFFALSE 30857
// begin k := j + d ;
30771: LD_ADDR_VAR 0 8
30775: PUSH
30776: LD_VAR 0 7
30780: PUSH
30781: LD_VAR 0 9
30785: PLUS
30786: ST_TO_ADDR
// if k > array then
30787: LD_VAR 0 8
30791: PUSH
30792: LD_VAR 0 1
30796: GREATER
30797: IFFALSE 30807
// k := 1 ;
30799: LD_ADDR_VAR 0 8
30803: PUSH
30804: LD_INT 1
30806: ST_TO_ADDR
// if not k then
30807: LD_VAR 0 8
30811: NOT
30812: IFFALSE 30824
// k := array ;
30814: LD_ADDR_VAR 0 8
30818: PUSH
30819: LD_VAR 0 1
30823: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
30824: LD_ADDR_VAR 0 10
30828: PUSH
30829: LD_VAR 0 10
30833: PPUSH
30834: LD_VAR 0 8
30838: PPUSH
30839: LD_VAR 0 1
30843: PUSH
30844: LD_VAR 0 7
30848: ARRAY
30849: PPUSH
30850: CALL_OW 1
30854: ST_TO_ADDR
// end ;
30855: GO 30768
30857: POP
30858: POP
// array := tmp ;
30859: LD_ADDR_VAR 0 1
30863: PUSH
30864: LD_VAR 0 10
30868: ST_TO_ADDR
// end ;
30869: GO 30750
30871: POP
30872: POP
// result := array ;
30873: LD_ADDR_VAR 0 5
30877: PUSH
30878: LD_VAR 0 1
30882: ST_TO_ADDR
// end ;
30883: LD_VAR 0 5
30887: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
30888: LD_INT 0
30890: PPUSH
30891: PPUSH
// result := 0 ;
30892: LD_ADDR_VAR 0 3
30896: PUSH
30897: LD_INT 0
30899: ST_TO_ADDR
// if not array or not value in array then
30900: LD_VAR 0 1
30904: NOT
30905: PUSH
30906: LD_VAR 0 2
30910: PUSH
30911: LD_VAR 0 1
30915: IN
30916: NOT
30917: OR
30918: IFFALSE 30922
// exit ;
30920: GO 30976
// for i = 1 to array do
30922: LD_ADDR_VAR 0 4
30926: PUSH
30927: DOUBLE
30928: LD_INT 1
30930: DEC
30931: ST_TO_ADDR
30932: LD_VAR 0 1
30936: PUSH
30937: FOR_TO
30938: IFFALSE 30974
// if value = array [ i ] then
30940: LD_VAR 0 2
30944: PUSH
30945: LD_VAR 0 1
30949: PUSH
30950: LD_VAR 0 4
30954: ARRAY
30955: EQUAL
30956: IFFALSE 30972
// begin result := i ;
30958: LD_ADDR_VAR 0 3
30962: PUSH
30963: LD_VAR 0 4
30967: ST_TO_ADDR
// exit ;
30968: POP
30969: POP
30970: GO 30976
// end ;
30972: GO 30937
30974: POP
30975: POP
// end ;
30976: LD_VAR 0 3
30980: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
30981: LD_INT 0
30983: PPUSH
// vc_chassis := chassis ;
30984: LD_ADDR_OWVAR 37
30988: PUSH
30989: LD_VAR 0 1
30993: ST_TO_ADDR
// vc_engine := engine ;
30994: LD_ADDR_OWVAR 39
30998: PUSH
30999: LD_VAR 0 2
31003: ST_TO_ADDR
// vc_control := control ;
31004: LD_ADDR_OWVAR 38
31008: PUSH
31009: LD_VAR 0 3
31013: ST_TO_ADDR
// vc_weapon := weapon ;
31014: LD_ADDR_OWVAR 40
31018: PUSH
31019: LD_VAR 0 4
31023: ST_TO_ADDR
// vc_fuel_battery := fuel ;
31024: LD_ADDR_OWVAR 41
31028: PUSH
31029: LD_VAR 0 5
31033: ST_TO_ADDR
// end ;
31034: LD_VAR 0 6
31038: RET
// export function WantPlant ( unit ) ; var task ; begin
31039: LD_INT 0
31041: PPUSH
31042: PPUSH
// result := false ;
31043: LD_ADDR_VAR 0 2
31047: PUSH
31048: LD_INT 0
31050: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
31051: LD_ADDR_VAR 0 3
31055: PUSH
31056: LD_VAR 0 1
31060: PPUSH
31061: CALL_OW 437
31065: ST_TO_ADDR
// if task then
31066: LD_VAR 0 3
31070: IFFALSE 31098
// if task [ 1 ] [ 1 ] = p then
31072: LD_VAR 0 3
31076: PUSH
31077: LD_INT 1
31079: ARRAY
31080: PUSH
31081: LD_INT 1
31083: ARRAY
31084: PUSH
31085: LD_STRING p
31087: EQUAL
31088: IFFALSE 31098
// result := true ;
31090: LD_ADDR_VAR 0 2
31094: PUSH
31095: LD_INT 1
31097: ST_TO_ADDR
// end ;
31098: LD_VAR 0 2
31102: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
31103: LD_INT 0
31105: PPUSH
31106: PPUSH
31107: PPUSH
31108: PPUSH
// if pos < 1 then
31109: LD_VAR 0 2
31113: PUSH
31114: LD_INT 1
31116: LESS
31117: IFFALSE 31121
// exit ;
31119: GO 31424
// if pos = 1 then
31121: LD_VAR 0 2
31125: PUSH
31126: LD_INT 1
31128: EQUAL
31129: IFFALSE 31162
// result := Replace ( arr , pos [ 1 ] , value ) else
31131: LD_ADDR_VAR 0 4
31135: PUSH
31136: LD_VAR 0 1
31140: PPUSH
31141: LD_VAR 0 2
31145: PUSH
31146: LD_INT 1
31148: ARRAY
31149: PPUSH
31150: LD_VAR 0 3
31154: PPUSH
31155: CALL_OW 1
31159: ST_TO_ADDR
31160: GO 31424
// begin tmp := arr ;
31162: LD_ADDR_VAR 0 6
31166: PUSH
31167: LD_VAR 0 1
31171: ST_TO_ADDR
// s_arr := [ tmp ] ;
31172: LD_ADDR_VAR 0 7
31176: PUSH
31177: LD_VAR 0 6
31181: PUSH
31182: EMPTY
31183: LIST
31184: ST_TO_ADDR
// for i = 1 to pos - 1 do
31185: LD_ADDR_VAR 0 5
31189: PUSH
31190: DOUBLE
31191: LD_INT 1
31193: DEC
31194: ST_TO_ADDR
31195: LD_VAR 0 2
31199: PUSH
31200: LD_INT 1
31202: MINUS
31203: PUSH
31204: FOR_TO
31205: IFFALSE 31250
// begin tmp := tmp [ pos [ i ] ] ;
31207: LD_ADDR_VAR 0 6
31211: PUSH
31212: LD_VAR 0 6
31216: PUSH
31217: LD_VAR 0 2
31221: PUSH
31222: LD_VAR 0 5
31226: ARRAY
31227: ARRAY
31228: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
31229: LD_ADDR_VAR 0 7
31233: PUSH
31234: LD_VAR 0 7
31238: PUSH
31239: LD_VAR 0 6
31243: PUSH
31244: EMPTY
31245: LIST
31246: ADD
31247: ST_TO_ADDR
// end ;
31248: GO 31204
31250: POP
31251: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
31252: LD_ADDR_VAR 0 6
31256: PUSH
31257: LD_VAR 0 6
31261: PPUSH
31262: LD_VAR 0 2
31266: PUSH
31267: LD_VAR 0 2
31271: ARRAY
31272: PPUSH
31273: LD_VAR 0 3
31277: PPUSH
31278: CALL_OW 1
31282: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
31283: LD_ADDR_VAR 0 7
31287: PUSH
31288: LD_VAR 0 7
31292: PPUSH
31293: LD_VAR 0 7
31297: PPUSH
31298: LD_VAR 0 6
31302: PPUSH
31303: CALL_OW 1
31307: ST_TO_ADDR
// for i = s_arr downto 2 do
31308: LD_ADDR_VAR 0 5
31312: PUSH
31313: DOUBLE
31314: LD_VAR 0 7
31318: INC
31319: ST_TO_ADDR
31320: LD_INT 2
31322: PUSH
31323: FOR_DOWNTO
31324: IFFALSE 31408
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
31326: LD_ADDR_VAR 0 6
31330: PUSH
31331: LD_VAR 0 7
31335: PUSH
31336: LD_VAR 0 5
31340: PUSH
31341: LD_INT 1
31343: MINUS
31344: ARRAY
31345: PPUSH
31346: LD_VAR 0 2
31350: PUSH
31351: LD_VAR 0 5
31355: PUSH
31356: LD_INT 1
31358: MINUS
31359: ARRAY
31360: PPUSH
31361: LD_VAR 0 7
31365: PUSH
31366: LD_VAR 0 5
31370: ARRAY
31371: PPUSH
31372: CALL_OW 1
31376: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
31377: LD_ADDR_VAR 0 7
31381: PUSH
31382: LD_VAR 0 7
31386: PPUSH
31387: LD_VAR 0 5
31391: PUSH
31392: LD_INT 1
31394: MINUS
31395: PPUSH
31396: LD_VAR 0 6
31400: PPUSH
31401: CALL_OW 1
31405: ST_TO_ADDR
// end ;
31406: GO 31323
31408: POP
31409: POP
// result := s_arr [ 1 ] ;
31410: LD_ADDR_VAR 0 4
31414: PUSH
31415: LD_VAR 0 7
31419: PUSH
31420: LD_INT 1
31422: ARRAY
31423: ST_TO_ADDR
// end ; end ;
31424: LD_VAR 0 4
31428: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
31429: LD_INT 0
31431: PPUSH
31432: PPUSH
// if not list then
31433: LD_VAR 0 1
31437: NOT
31438: IFFALSE 31442
// exit ;
31440: GO 31533
// i := list [ pos1 ] ;
31442: LD_ADDR_VAR 0 5
31446: PUSH
31447: LD_VAR 0 1
31451: PUSH
31452: LD_VAR 0 2
31456: ARRAY
31457: ST_TO_ADDR
// if not i then
31458: LD_VAR 0 5
31462: NOT
31463: IFFALSE 31467
// exit ;
31465: GO 31533
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
31467: LD_ADDR_VAR 0 1
31471: PUSH
31472: LD_VAR 0 1
31476: PPUSH
31477: LD_VAR 0 2
31481: PPUSH
31482: LD_VAR 0 1
31486: PUSH
31487: LD_VAR 0 3
31491: ARRAY
31492: PPUSH
31493: CALL_OW 1
31497: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
31498: LD_ADDR_VAR 0 1
31502: PUSH
31503: LD_VAR 0 1
31507: PPUSH
31508: LD_VAR 0 3
31512: PPUSH
31513: LD_VAR 0 5
31517: PPUSH
31518: CALL_OW 1
31522: ST_TO_ADDR
// result := list ;
31523: LD_ADDR_VAR 0 4
31527: PUSH
31528: LD_VAR 0 1
31532: ST_TO_ADDR
// end ;
31533: LD_VAR 0 4
31537: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
31538: LD_INT 0
31540: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
31541: LD_ADDR_VAR 0 5
31545: PUSH
31546: LD_VAR 0 1
31550: PPUSH
31551: CALL_OW 250
31555: PPUSH
31556: LD_VAR 0 1
31560: PPUSH
31561: CALL_OW 251
31565: PPUSH
31566: LD_VAR 0 2
31570: PPUSH
31571: LD_VAR 0 3
31575: PPUSH
31576: LD_VAR 0 4
31580: PPUSH
31581: CALL 31591 0 5
31585: ST_TO_ADDR
// end ;
31586: LD_VAR 0 5
31590: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
31591: LD_INT 0
31593: PPUSH
31594: PPUSH
31595: PPUSH
31596: PPUSH
// if not list then
31597: LD_VAR 0 3
31601: NOT
31602: IFFALSE 31606
// exit ;
31604: GO 31994
// result := [ ] ;
31606: LD_ADDR_VAR 0 6
31610: PUSH
31611: EMPTY
31612: ST_TO_ADDR
// for i in list do
31613: LD_ADDR_VAR 0 7
31617: PUSH
31618: LD_VAR 0 3
31622: PUSH
31623: FOR_IN
31624: IFFALSE 31826
// begin tmp := GetDistUnitXY ( i , x , y ) ;
31626: LD_ADDR_VAR 0 9
31630: PUSH
31631: LD_VAR 0 7
31635: PPUSH
31636: LD_VAR 0 1
31640: PPUSH
31641: LD_VAR 0 2
31645: PPUSH
31646: CALL_OW 297
31650: ST_TO_ADDR
// if not result then
31651: LD_VAR 0 6
31655: NOT
31656: IFFALSE 31682
// result := [ [ i , tmp ] ] else
31658: LD_ADDR_VAR 0 6
31662: PUSH
31663: LD_VAR 0 7
31667: PUSH
31668: LD_VAR 0 9
31672: PUSH
31673: EMPTY
31674: LIST
31675: LIST
31676: PUSH
31677: EMPTY
31678: LIST
31679: ST_TO_ADDR
31680: GO 31824
// begin if result [ result ] [ 2 ] < tmp then
31682: LD_VAR 0 6
31686: PUSH
31687: LD_VAR 0 6
31691: ARRAY
31692: PUSH
31693: LD_INT 2
31695: ARRAY
31696: PUSH
31697: LD_VAR 0 9
31701: LESS
31702: IFFALSE 31744
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
31704: LD_ADDR_VAR 0 6
31708: PUSH
31709: LD_VAR 0 6
31713: PPUSH
31714: LD_VAR 0 6
31718: PUSH
31719: LD_INT 1
31721: PLUS
31722: PPUSH
31723: LD_VAR 0 7
31727: PUSH
31728: LD_VAR 0 9
31732: PUSH
31733: EMPTY
31734: LIST
31735: LIST
31736: PPUSH
31737: CALL_OW 2
31741: ST_TO_ADDR
31742: GO 31824
// for j = 1 to result do
31744: LD_ADDR_VAR 0 8
31748: PUSH
31749: DOUBLE
31750: LD_INT 1
31752: DEC
31753: ST_TO_ADDR
31754: LD_VAR 0 6
31758: PUSH
31759: FOR_TO
31760: IFFALSE 31822
// begin if tmp < result [ j ] [ 2 ] then
31762: LD_VAR 0 9
31766: PUSH
31767: LD_VAR 0 6
31771: PUSH
31772: LD_VAR 0 8
31776: ARRAY
31777: PUSH
31778: LD_INT 2
31780: ARRAY
31781: LESS
31782: IFFALSE 31820
// begin result := Insert ( result , j , [ i , tmp ] ) ;
31784: LD_ADDR_VAR 0 6
31788: PUSH
31789: LD_VAR 0 6
31793: PPUSH
31794: LD_VAR 0 8
31798: PPUSH
31799: LD_VAR 0 7
31803: PUSH
31804: LD_VAR 0 9
31808: PUSH
31809: EMPTY
31810: LIST
31811: LIST
31812: PPUSH
31813: CALL_OW 2
31817: ST_TO_ADDR
// break ;
31818: GO 31822
// end ; end ;
31820: GO 31759
31822: POP
31823: POP
// end ; end ;
31824: GO 31623
31826: POP
31827: POP
// if result and not asc then
31828: LD_VAR 0 6
31832: PUSH
31833: LD_VAR 0 4
31837: NOT
31838: AND
31839: IFFALSE 31914
// begin tmp := result ;
31841: LD_ADDR_VAR 0 9
31845: PUSH
31846: LD_VAR 0 6
31850: ST_TO_ADDR
// for i = tmp downto 1 do
31851: LD_ADDR_VAR 0 7
31855: PUSH
31856: DOUBLE
31857: LD_VAR 0 9
31861: INC
31862: ST_TO_ADDR
31863: LD_INT 1
31865: PUSH
31866: FOR_DOWNTO
31867: IFFALSE 31912
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
31869: LD_ADDR_VAR 0 6
31873: PUSH
31874: LD_VAR 0 6
31878: PPUSH
31879: LD_VAR 0 9
31883: PUSH
31884: LD_VAR 0 7
31888: MINUS
31889: PUSH
31890: LD_INT 1
31892: PLUS
31893: PPUSH
31894: LD_VAR 0 9
31898: PUSH
31899: LD_VAR 0 7
31903: ARRAY
31904: PPUSH
31905: CALL_OW 1
31909: ST_TO_ADDR
31910: GO 31866
31912: POP
31913: POP
// end ; tmp := [ ] ;
31914: LD_ADDR_VAR 0 9
31918: PUSH
31919: EMPTY
31920: ST_TO_ADDR
// if mode then
31921: LD_VAR 0 5
31925: IFFALSE 31994
// begin for i = 1 to result do
31927: LD_ADDR_VAR 0 7
31931: PUSH
31932: DOUBLE
31933: LD_INT 1
31935: DEC
31936: ST_TO_ADDR
31937: LD_VAR 0 6
31941: PUSH
31942: FOR_TO
31943: IFFALSE 31982
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
31945: LD_ADDR_VAR 0 9
31949: PUSH
31950: LD_VAR 0 9
31954: PPUSH
31955: LD_VAR 0 7
31959: PPUSH
31960: LD_VAR 0 6
31964: PUSH
31965: LD_VAR 0 7
31969: ARRAY
31970: PUSH
31971: LD_INT 1
31973: ARRAY
31974: PPUSH
31975: CALL_OW 1
31979: ST_TO_ADDR
31980: GO 31942
31982: POP
31983: POP
// result := tmp ;
31984: LD_ADDR_VAR 0 6
31988: PUSH
31989: LD_VAR 0 9
31993: ST_TO_ADDR
// end ; end ;
31994: LD_VAR 0 6
31998: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
31999: LD_INT 0
32001: PPUSH
32002: PPUSH
32003: PPUSH
32004: PPUSH
32005: PPUSH
32006: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
32007: LD_ADDR_VAR 0 5
32011: PUSH
32012: LD_INT 0
32014: PUSH
32015: LD_INT 0
32017: PUSH
32018: LD_INT 0
32020: PUSH
32021: EMPTY
32022: PUSH
32023: EMPTY
32024: LIST
32025: LIST
32026: LIST
32027: LIST
32028: ST_TO_ADDR
// if not x or not y then
32029: LD_VAR 0 2
32033: NOT
32034: PUSH
32035: LD_VAR 0 3
32039: NOT
32040: OR
32041: IFFALSE 32045
// exit ;
32043: GO 33695
// if not range then
32045: LD_VAR 0 4
32049: NOT
32050: IFFALSE 32060
// range := 10 ;
32052: LD_ADDR_VAR 0 4
32056: PUSH
32057: LD_INT 10
32059: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32060: LD_ADDR_VAR 0 8
32064: PUSH
32065: LD_INT 81
32067: PUSH
32068: LD_VAR 0 1
32072: PUSH
32073: EMPTY
32074: LIST
32075: LIST
32076: PUSH
32077: LD_INT 92
32079: PUSH
32080: LD_VAR 0 2
32084: PUSH
32085: LD_VAR 0 3
32089: PUSH
32090: LD_VAR 0 4
32094: PUSH
32095: EMPTY
32096: LIST
32097: LIST
32098: LIST
32099: LIST
32100: PUSH
32101: LD_INT 3
32103: PUSH
32104: LD_INT 21
32106: PUSH
32107: LD_INT 3
32109: PUSH
32110: EMPTY
32111: LIST
32112: LIST
32113: PUSH
32114: EMPTY
32115: LIST
32116: LIST
32117: PUSH
32118: EMPTY
32119: LIST
32120: LIST
32121: LIST
32122: PPUSH
32123: CALL_OW 69
32127: ST_TO_ADDR
// if not tmp then
32128: LD_VAR 0 8
32132: NOT
32133: IFFALSE 32137
// exit ;
32135: GO 33695
// for i in tmp do
32137: LD_ADDR_VAR 0 6
32141: PUSH
32142: LD_VAR 0 8
32146: PUSH
32147: FOR_IN
32148: IFFALSE 33670
// begin points := [ 0 , 0 , 0 ] ;
32150: LD_ADDR_VAR 0 9
32154: PUSH
32155: LD_INT 0
32157: PUSH
32158: LD_INT 0
32160: PUSH
32161: LD_INT 0
32163: PUSH
32164: EMPTY
32165: LIST
32166: LIST
32167: LIST
32168: ST_TO_ADDR
// bpoints := 1 ;
32169: LD_ADDR_VAR 0 10
32173: PUSH
32174: LD_INT 1
32176: ST_TO_ADDR
// case GetType ( i ) of unit_human :
32177: LD_VAR 0 6
32181: PPUSH
32182: CALL_OW 247
32186: PUSH
32187: LD_INT 1
32189: DOUBLE
32190: EQUAL
32191: IFTRUE 32195
32193: GO 32773
32195: POP
// begin if GetClass ( i ) = 1 then
32196: LD_VAR 0 6
32200: PPUSH
32201: CALL_OW 257
32205: PUSH
32206: LD_INT 1
32208: EQUAL
32209: IFFALSE 32230
// points := [ 10 , 5 , 3 ] ;
32211: LD_ADDR_VAR 0 9
32215: PUSH
32216: LD_INT 10
32218: PUSH
32219: LD_INT 5
32221: PUSH
32222: LD_INT 3
32224: PUSH
32225: EMPTY
32226: LIST
32227: LIST
32228: LIST
32229: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
32230: LD_VAR 0 6
32234: PPUSH
32235: CALL_OW 257
32239: PUSH
32240: LD_INT 2
32242: PUSH
32243: LD_INT 3
32245: PUSH
32246: LD_INT 4
32248: PUSH
32249: EMPTY
32250: LIST
32251: LIST
32252: LIST
32253: IN
32254: IFFALSE 32275
// points := [ 3 , 2 , 1 ] ;
32256: LD_ADDR_VAR 0 9
32260: PUSH
32261: LD_INT 3
32263: PUSH
32264: LD_INT 2
32266: PUSH
32267: LD_INT 1
32269: PUSH
32270: EMPTY
32271: LIST
32272: LIST
32273: LIST
32274: ST_TO_ADDR
// if GetClass ( i ) = 5 then
32275: LD_VAR 0 6
32279: PPUSH
32280: CALL_OW 257
32284: PUSH
32285: LD_INT 5
32287: EQUAL
32288: IFFALSE 32309
// points := [ 130 , 5 , 2 ] ;
32290: LD_ADDR_VAR 0 9
32294: PUSH
32295: LD_INT 130
32297: PUSH
32298: LD_INT 5
32300: PUSH
32301: LD_INT 2
32303: PUSH
32304: EMPTY
32305: LIST
32306: LIST
32307: LIST
32308: ST_TO_ADDR
// if GetClass ( i ) = 8 then
32309: LD_VAR 0 6
32313: PPUSH
32314: CALL_OW 257
32318: PUSH
32319: LD_INT 8
32321: EQUAL
32322: IFFALSE 32343
// points := [ 35 , 35 , 30 ] ;
32324: LD_ADDR_VAR 0 9
32328: PUSH
32329: LD_INT 35
32331: PUSH
32332: LD_INT 35
32334: PUSH
32335: LD_INT 30
32337: PUSH
32338: EMPTY
32339: LIST
32340: LIST
32341: LIST
32342: ST_TO_ADDR
// if GetClass ( i ) = 9 then
32343: LD_VAR 0 6
32347: PPUSH
32348: CALL_OW 257
32352: PUSH
32353: LD_INT 9
32355: EQUAL
32356: IFFALSE 32377
// points := [ 20 , 55 , 40 ] ;
32358: LD_ADDR_VAR 0 9
32362: PUSH
32363: LD_INT 20
32365: PUSH
32366: LD_INT 55
32368: PUSH
32369: LD_INT 40
32371: PUSH
32372: EMPTY
32373: LIST
32374: LIST
32375: LIST
32376: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
32377: LD_VAR 0 6
32381: PPUSH
32382: CALL_OW 257
32386: PUSH
32387: LD_INT 12
32389: PUSH
32390: LD_INT 16
32392: PUSH
32393: EMPTY
32394: LIST
32395: LIST
32396: IN
32397: IFFALSE 32418
// points := [ 5 , 3 , 2 ] ;
32399: LD_ADDR_VAR 0 9
32403: PUSH
32404: LD_INT 5
32406: PUSH
32407: LD_INT 3
32409: PUSH
32410: LD_INT 2
32412: PUSH
32413: EMPTY
32414: LIST
32415: LIST
32416: LIST
32417: ST_TO_ADDR
// if GetClass ( i ) = 17 then
32418: LD_VAR 0 6
32422: PPUSH
32423: CALL_OW 257
32427: PUSH
32428: LD_INT 17
32430: EQUAL
32431: IFFALSE 32452
// points := [ 100 , 50 , 75 ] ;
32433: LD_ADDR_VAR 0 9
32437: PUSH
32438: LD_INT 100
32440: PUSH
32441: LD_INT 50
32443: PUSH
32444: LD_INT 75
32446: PUSH
32447: EMPTY
32448: LIST
32449: LIST
32450: LIST
32451: ST_TO_ADDR
// if GetClass ( i ) = 15 then
32452: LD_VAR 0 6
32456: PPUSH
32457: CALL_OW 257
32461: PUSH
32462: LD_INT 15
32464: EQUAL
32465: IFFALSE 32486
// points := [ 10 , 5 , 3 ] ;
32467: LD_ADDR_VAR 0 9
32471: PUSH
32472: LD_INT 10
32474: PUSH
32475: LD_INT 5
32477: PUSH
32478: LD_INT 3
32480: PUSH
32481: EMPTY
32482: LIST
32483: LIST
32484: LIST
32485: ST_TO_ADDR
// if GetClass ( i ) = 14 then
32486: LD_VAR 0 6
32490: PPUSH
32491: CALL_OW 257
32495: PUSH
32496: LD_INT 14
32498: EQUAL
32499: IFFALSE 32520
// points := [ 10 , 0 , 0 ] ;
32501: LD_ADDR_VAR 0 9
32505: PUSH
32506: LD_INT 10
32508: PUSH
32509: LD_INT 0
32511: PUSH
32512: LD_INT 0
32514: PUSH
32515: EMPTY
32516: LIST
32517: LIST
32518: LIST
32519: ST_TO_ADDR
// if GetClass ( i ) = 11 then
32520: LD_VAR 0 6
32524: PPUSH
32525: CALL_OW 257
32529: PUSH
32530: LD_INT 11
32532: EQUAL
32533: IFFALSE 32554
// points := [ 30 , 10 , 5 ] ;
32535: LD_ADDR_VAR 0 9
32539: PUSH
32540: LD_INT 30
32542: PUSH
32543: LD_INT 10
32545: PUSH
32546: LD_INT 5
32548: PUSH
32549: EMPTY
32550: LIST
32551: LIST
32552: LIST
32553: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
32554: LD_VAR 0 1
32558: PPUSH
32559: LD_INT 5
32561: PPUSH
32562: CALL_OW 321
32566: PUSH
32567: LD_INT 2
32569: EQUAL
32570: IFFALSE 32587
// bpoints := bpoints * 1.8 ;
32572: LD_ADDR_VAR 0 10
32576: PUSH
32577: LD_VAR 0 10
32581: PUSH
32582: LD_REAL  1.80000000000000E+0000
32585: MUL
32586: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
32587: LD_VAR 0 6
32591: PPUSH
32592: CALL_OW 257
32596: PUSH
32597: LD_INT 1
32599: PUSH
32600: LD_INT 2
32602: PUSH
32603: LD_INT 3
32605: PUSH
32606: LD_INT 4
32608: PUSH
32609: EMPTY
32610: LIST
32611: LIST
32612: LIST
32613: LIST
32614: IN
32615: PUSH
32616: LD_VAR 0 1
32620: PPUSH
32621: LD_INT 51
32623: PPUSH
32624: CALL_OW 321
32628: PUSH
32629: LD_INT 2
32631: EQUAL
32632: AND
32633: IFFALSE 32650
// bpoints := bpoints * 1.2 ;
32635: LD_ADDR_VAR 0 10
32639: PUSH
32640: LD_VAR 0 10
32644: PUSH
32645: LD_REAL  1.20000000000000E+0000
32648: MUL
32649: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
32650: LD_VAR 0 6
32654: PPUSH
32655: CALL_OW 257
32659: PUSH
32660: LD_INT 5
32662: PUSH
32663: LD_INT 7
32665: PUSH
32666: LD_INT 9
32668: PUSH
32669: EMPTY
32670: LIST
32671: LIST
32672: LIST
32673: IN
32674: PUSH
32675: LD_VAR 0 1
32679: PPUSH
32680: LD_INT 52
32682: PPUSH
32683: CALL_OW 321
32687: PUSH
32688: LD_INT 2
32690: EQUAL
32691: AND
32692: IFFALSE 32709
// bpoints := bpoints * 1.5 ;
32694: LD_ADDR_VAR 0 10
32698: PUSH
32699: LD_VAR 0 10
32703: PUSH
32704: LD_REAL  1.50000000000000E+0000
32707: MUL
32708: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
32709: LD_VAR 0 1
32713: PPUSH
32714: LD_INT 66
32716: PPUSH
32717: CALL_OW 321
32721: PUSH
32722: LD_INT 2
32724: EQUAL
32725: IFFALSE 32742
// bpoints := bpoints * 1.1 ;
32727: LD_ADDR_VAR 0 10
32731: PUSH
32732: LD_VAR 0 10
32736: PUSH
32737: LD_REAL  1.10000000000000E+0000
32740: MUL
32741: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
32742: LD_ADDR_VAR 0 10
32746: PUSH
32747: LD_VAR 0 10
32751: PUSH
32752: LD_VAR 0 6
32756: PPUSH
32757: LD_INT 1
32759: PPUSH
32760: CALL_OW 259
32764: PUSH
32765: LD_REAL  1.15000000000000E+0000
32768: MUL
32769: MUL
32770: ST_TO_ADDR
// end ; unit_vehicle :
32771: GO 33599
32773: LD_INT 2
32775: DOUBLE
32776: EQUAL
32777: IFTRUE 32781
32779: GO 33587
32781: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
32782: LD_VAR 0 6
32786: PPUSH
32787: CALL_OW 264
32791: PUSH
32792: LD_INT 2
32794: PUSH
32795: LD_INT 42
32797: PUSH
32798: LD_INT 24
32800: PUSH
32801: EMPTY
32802: LIST
32803: LIST
32804: LIST
32805: IN
32806: IFFALSE 32827
// points := [ 25 , 5 , 3 ] ;
32808: LD_ADDR_VAR 0 9
32812: PUSH
32813: LD_INT 25
32815: PUSH
32816: LD_INT 5
32818: PUSH
32819: LD_INT 3
32821: PUSH
32822: EMPTY
32823: LIST
32824: LIST
32825: LIST
32826: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
32827: LD_VAR 0 6
32831: PPUSH
32832: CALL_OW 264
32836: PUSH
32837: LD_INT 4
32839: PUSH
32840: LD_INT 43
32842: PUSH
32843: LD_INT 25
32845: PUSH
32846: EMPTY
32847: LIST
32848: LIST
32849: LIST
32850: IN
32851: IFFALSE 32872
// points := [ 40 , 15 , 5 ] ;
32853: LD_ADDR_VAR 0 9
32857: PUSH
32858: LD_INT 40
32860: PUSH
32861: LD_INT 15
32863: PUSH
32864: LD_INT 5
32866: PUSH
32867: EMPTY
32868: LIST
32869: LIST
32870: LIST
32871: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
32872: LD_VAR 0 6
32876: PPUSH
32877: CALL_OW 264
32881: PUSH
32882: LD_INT 3
32884: PUSH
32885: LD_INT 23
32887: PUSH
32888: EMPTY
32889: LIST
32890: LIST
32891: IN
32892: IFFALSE 32913
// points := [ 7 , 25 , 8 ] ;
32894: LD_ADDR_VAR 0 9
32898: PUSH
32899: LD_INT 7
32901: PUSH
32902: LD_INT 25
32904: PUSH
32905: LD_INT 8
32907: PUSH
32908: EMPTY
32909: LIST
32910: LIST
32911: LIST
32912: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
32913: LD_VAR 0 6
32917: PPUSH
32918: CALL_OW 264
32922: PUSH
32923: LD_INT 5
32925: PUSH
32926: LD_INT 27
32928: PUSH
32929: LD_INT 44
32931: PUSH
32932: EMPTY
32933: LIST
32934: LIST
32935: LIST
32936: IN
32937: IFFALSE 32958
// points := [ 14 , 50 , 16 ] ;
32939: LD_ADDR_VAR 0 9
32943: PUSH
32944: LD_INT 14
32946: PUSH
32947: LD_INT 50
32949: PUSH
32950: LD_INT 16
32952: PUSH
32953: EMPTY
32954: LIST
32955: LIST
32956: LIST
32957: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
32958: LD_VAR 0 6
32962: PPUSH
32963: CALL_OW 264
32967: PUSH
32968: LD_INT 6
32970: PUSH
32971: LD_INT 46
32973: PUSH
32974: EMPTY
32975: LIST
32976: LIST
32977: IN
32978: IFFALSE 32999
// points := [ 32 , 120 , 70 ] ;
32980: LD_ADDR_VAR 0 9
32984: PUSH
32985: LD_INT 32
32987: PUSH
32988: LD_INT 120
32990: PUSH
32991: LD_INT 70
32993: PUSH
32994: EMPTY
32995: LIST
32996: LIST
32997: LIST
32998: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
32999: LD_VAR 0 6
33003: PPUSH
33004: CALL_OW 264
33008: PUSH
33009: LD_INT 7
33011: PUSH
33012: LD_INT 28
33014: PUSH
33015: LD_INT 45
33017: PUSH
33018: LD_INT 92
33020: PUSH
33021: EMPTY
33022: LIST
33023: LIST
33024: LIST
33025: LIST
33026: IN
33027: IFFALSE 33048
// points := [ 35 , 20 , 45 ] ;
33029: LD_ADDR_VAR 0 9
33033: PUSH
33034: LD_INT 35
33036: PUSH
33037: LD_INT 20
33039: PUSH
33040: LD_INT 45
33042: PUSH
33043: EMPTY
33044: LIST
33045: LIST
33046: LIST
33047: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
33048: LD_VAR 0 6
33052: PPUSH
33053: CALL_OW 264
33057: PUSH
33058: LD_INT 47
33060: PUSH
33061: EMPTY
33062: LIST
33063: IN
33064: IFFALSE 33085
// points := [ 67 , 45 , 75 ] ;
33066: LD_ADDR_VAR 0 9
33070: PUSH
33071: LD_INT 67
33073: PUSH
33074: LD_INT 45
33076: PUSH
33077: LD_INT 75
33079: PUSH
33080: EMPTY
33081: LIST
33082: LIST
33083: LIST
33084: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
33085: LD_VAR 0 6
33089: PPUSH
33090: CALL_OW 264
33094: PUSH
33095: LD_INT 26
33097: PUSH
33098: EMPTY
33099: LIST
33100: IN
33101: IFFALSE 33122
// points := [ 120 , 30 , 80 ] ;
33103: LD_ADDR_VAR 0 9
33107: PUSH
33108: LD_INT 120
33110: PUSH
33111: LD_INT 30
33113: PUSH
33114: LD_INT 80
33116: PUSH
33117: EMPTY
33118: LIST
33119: LIST
33120: LIST
33121: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
33122: LD_VAR 0 6
33126: PPUSH
33127: CALL_OW 264
33131: PUSH
33132: LD_INT 22
33134: PUSH
33135: EMPTY
33136: LIST
33137: IN
33138: IFFALSE 33159
// points := [ 40 , 1 , 1 ] ;
33140: LD_ADDR_VAR 0 9
33144: PUSH
33145: LD_INT 40
33147: PUSH
33148: LD_INT 1
33150: PUSH
33151: LD_INT 1
33153: PUSH
33154: EMPTY
33155: LIST
33156: LIST
33157: LIST
33158: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
33159: LD_VAR 0 6
33163: PPUSH
33164: CALL_OW 264
33168: PUSH
33169: LD_INT 29
33171: PUSH
33172: EMPTY
33173: LIST
33174: IN
33175: IFFALSE 33196
// points := [ 70 , 200 , 400 ] ;
33177: LD_ADDR_VAR 0 9
33181: PUSH
33182: LD_INT 70
33184: PUSH
33185: LD_INT 200
33187: PUSH
33188: LD_INT 400
33190: PUSH
33191: EMPTY
33192: LIST
33193: LIST
33194: LIST
33195: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
33196: LD_VAR 0 6
33200: PPUSH
33201: CALL_OW 264
33205: PUSH
33206: LD_INT 14
33208: PUSH
33209: LD_INT 53
33211: PUSH
33212: EMPTY
33213: LIST
33214: LIST
33215: IN
33216: IFFALSE 33237
// points := [ 40 , 10 , 20 ] ;
33218: LD_ADDR_VAR 0 9
33222: PUSH
33223: LD_INT 40
33225: PUSH
33226: LD_INT 10
33228: PUSH
33229: LD_INT 20
33231: PUSH
33232: EMPTY
33233: LIST
33234: LIST
33235: LIST
33236: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
33237: LD_VAR 0 6
33241: PPUSH
33242: CALL_OW 264
33246: PUSH
33247: LD_INT 9
33249: PUSH
33250: EMPTY
33251: LIST
33252: IN
33253: IFFALSE 33274
// points := [ 5 , 70 , 20 ] ;
33255: LD_ADDR_VAR 0 9
33259: PUSH
33260: LD_INT 5
33262: PUSH
33263: LD_INT 70
33265: PUSH
33266: LD_INT 20
33268: PUSH
33269: EMPTY
33270: LIST
33271: LIST
33272: LIST
33273: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
33274: LD_VAR 0 6
33278: PPUSH
33279: CALL_OW 264
33283: PUSH
33284: LD_INT 10
33286: PUSH
33287: EMPTY
33288: LIST
33289: IN
33290: IFFALSE 33311
// points := [ 35 , 110 , 70 ] ;
33292: LD_ADDR_VAR 0 9
33296: PUSH
33297: LD_INT 35
33299: PUSH
33300: LD_INT 110
33302: PUSH
33303: LD_INT 70
33305: PUSH
33306: EMPTY
33307: LIST
33308: LIST
33309: LIST
33310: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
33311: LD_VAR 0 6
33315: PPUSH
33316: CALL_OW 265
33320: PUSH
33321: LD_INT 25
33323: EQUAL
33324: IFFALSE 33345
// points := [ 80 , 65 , 100 ] ;
33326: LD_ADDR_VAR 0 9
33330: PUSH
33331: LD_INT 80
33333: PUSH
33334: LD_INT 65
33336: PUSH
33337: LD_INT 100
33339: PUSH
33340: EMPTY
33341: LIST
33342: LIST
33343: LIST
33344: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
33345: LD_VAR 0 6
33349: PPUSH
33350: CALL_OW 263
33354: PUSH
33355: LD_INT 1
33357: EQUAL
33358: IFFALSE 33393
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
33360: LD_ADDR_VAR 0 10
33364: PUSH
33365: LD_VAR 0 10
33369: PUSH
33370: LD_VAR 0 6
33374: PPUSH
33375: CALL_OW 311
33379: PPUSH
33380: LD_INT 3
33382: PPUSH
33383: CALL_OW 259
33387: PUSH
33388: LD_INT 4
33390: MUL
33391: MUL
33392: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
33393: LD_VAR 0 6
33397: PPUSH
33398: CALL_OW 263
33402: PUSH
33403: LD_INT 2
33405: EQUAL
33406: IFFALSE 33457
// begin j := IsControledBy ( i ) ;
33408: LD_ADDR_VAR 0 7
33412: PUSH
33413: LD_VAR 0 6
33417: PPUSH
33418: CALL_OW 312
33422: ST_TO_ADDR
// if j then
33423: LD_VAR 0 7
33427: IFFALSE 33457
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
33429: LD_ADDR_VAR 0 10
33433: PUSH
33434: LD_VAR 0 10
33438: PUSH
33439: LD_VAR 0 7
33443: PPUSH
33444: LD_INT 3
33446: PPUSH
33447: CALL_OW 259
33451: PUSH
33452: LD_INT 3
33454: MUL
33455: MUL
33456: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
33457: LD_VAR 0 6
33461: PPUSH
33462: CALL_OW 264
33466: PUSH
33467: LD_INT 5
33469: PUSH
33470: LD_INT 6
33472: PUSH
33473: LD_INT 46
33475: PUSH
33476: LD_INT 44
33478: PUSH
33479: LD_INT 47
33481: PUSH
33482: LD_INT 45
33484: PUSH
33485: LD_INT 28
33487: PUSH
33488: LD_INT 7
33490: PUSH
33491: LD_INT 27
33493: PUSH
33494: LD_INT 29
33496: PUSH
33497: EMPTY
33498: LIST
33499: LIST
33500: LIST
33501: LIST
33502: LIST
33503: LIST
33504: LIST
33505: LIST
33506: LIST
33507: LIST
33508: IN
33509: PUSH
33510: LD_VAR 0 1
33514: PPUSH
33515: LD_INT 52
33517: PPUSH
33518: CALL_OW 321
33522: PUSH
33523: LD_INT 2
33525: EQUAL
33526: AND
33527: IFFALSE 33544
// bpoints := bpoints * 1.2 ;
33529: LD_ADDR_VAR 0 10
33533: PUSH
33534: LD_VAR 0 10
33538: PUSH
33539: LD_REAL  1.20000000000000E+0000
33542: MUL
33543: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
33544: LD_VAR 0 6
33548: PPUSH
33549: CALL_OW 264
33553: PUSH
33554: LD_INT 6
33556: PUSH
33557: LD_INT 46
33559: PUSH
33560: LD_INT 47
33562: PUSH
33563: EMPTY
33564: LIST
33565: LIST
33566: LIST
33567: IN
33568: IFFALSE 33585
// bpoints := bpoints * 1.2 ;
33570: LD_ADDR_VAR 0 10
33574: PUSH
33575: LD_VAR 0 10
33579: PUSH
33580: LD_REAL  1.20000000000000E+0000
33583: MUL
33584: ST_TO_ADDR
// end ; unit_building :
33585: GO 33599
33587: LD_INT 3
33589: DOUBLE
33590: EQUAL
33591: IFTRUE 33595
33593: GO 33598
33595: POP
// ; end ;
33596: GO 33599
33598: POP
// for j = 1 to 3 do
33599: LD_ADDR_VAR 0 7
33603: PUSH
33604: DOUBLE
33605: LD_INT 1
33607: DEC
33608: ST_TO_ADDR
33609: LD_INT 3
33611: PUSH
33612: FOR_TO
33613: IFFALSE 33666
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
33615: LD_ADDR_VAR 0 5
33619: PUSH
33620: LD_VAR 0 5
33624: PPUSH
33625: LD_VAR 0 7
33629: PPUSH
33630: LD_VAR 0 5
33634: PUSH
33635: LD_VAR 0 7
33639: ARRAY
33640: PUSH
33641: LD_VAR 0 9
33645: PUSH
33646: LD_VAR 0 7
33650: ARRAY
33651: PUSH
33652: LD_VAR 0 10
33656: MUL
33657: PLUS
33658: PPUSH
33659: CALL_OW 1
33663: ST_TO_ADDR
33664: GO 33612
33666: POP
33667: POP
// end ;
33668: GO 32147
33670: POP
33671: POP
// result := Replace ( result , 4 , tmp ) ;
33672: LD_ADDR_VAR 0 5
33676: PUSH
33677: LD_VAR 0 5
33681: PPUSH
33682: LD_INT 4
33684: PPUSH
33685: LD_VAR 0 8
33689: PPUSH
33690: CALL_OW 1
33694: ST_TO_ADDR
// end ;
33695: LD_VAR 0 5
33699: RET
// export function DangerAtRange ( unit , range ) ; begin
33700: LD_INT 0
33702: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
33703: LD_ADDR_VAR 0 3
33707: PUSH
33708: LD_VAR 0 1
33712: PPUSH
33713: CALL_OW 255
33717: PPUSH
33718: LD_VAR 0 1
33722: PPUSH
33723: CALL_OW 250
33727: PPUSH
33728: LD_VAR 0 1
33732: PPUSH
33733: CALL_OW 251
33737: PPUSH
33738: LD_VAR 0 2
33742: PPUSH
33743: CALL 31999 0 4
33747: ST_TO_ADDR
// end ;
33748: LD_VAR 0 3
33752: RET
// export function DangerInArea ( side , area ) ; begin
33753: LD_INT 0
33755: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
33756: LD_ADDR_VAR 0 3
33760: PUSH
33761: LD_VAR 0 2
33765: PPUSH
33766: LD_INT 81
33768: PUSH
33769: LD_VAR 0 1
33773: PUSH
33774: EMPTY
33775: LIST
33776: LIST
33777: PPUSH
33778: CALL_OW 70
33782: ST_TO_ADDR
// end ;
33783: LD_VAR 0 3
33787: RET
// export function IsExtension ( b ) ; begin
33788: LD_INT 0
33790: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
33791: LD_ADDR_VAR 0 2
33795: PUSH
33796: LD_VAR 0 1
33800: PUSH
33801: LD_INT 23
33803: PUSH
33804: LD_INT 20
33806: PUSH
33807: LD_INT 22
33809: PUSH
33810: LD_INT 17
33812: PUSH
33813: LD_INT 24
33815: PUSH
33816: LD_INT 21
33818: PUSH
33819: LD_INT 19
33821: PUSH
33822: LD_INT 16
33824: PUSH
33825: LD_INT 25
33827: PUSH
33828: LD_INT 18
33830: PUSH
33831: EMPTY
33832: LIST
33833: LIST
33834: LIST
33835: LIST
33836: LIST
33837: LIST
33838: LIST
33839: LIST
33840: LIST
33841: LIST
33842: IN
33843: ST_TO_ADDR
// end ;
33844: LD_VAR 0 2
33848: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
33849: LD_INT 0
33851: PPUSH
33852: PPUSH
33853: PPUSH
// result := [ ] ;
33854: LD_ADDR_VAR 0 4
33858: PUSH
33859: EMPTY
33860: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
33861: LD_ADDR_VAR 0 5
33865: PUSH
33866: LD_VAR 0 2
33870: PPUSH
33871: LD_INT 21
33873: PUSH
33874: LD_INT 3
33876: PUSH
33877: EMPTY
33878: LIST
33879: LIST
33880: PPUSH
33881: CALL_OW 70
33885: ST_TO_ADDR
// if not tmp then
33886: LD_VAR 0 5
33890: NOT
33891: IFFALSE 33895
// exit ;
33893: GO 33959
// if checkLink then
33895: LD_VAR 0 3
33899: IFFALSE 33949
// begin for i in tmp do
33901: LD_ADDR_VAR 0 6
33905: PUSH
33906: LD_VAR 0 5
33910: PUSH
33911: FOR_IN
33912: IFFALSE 33947
// if GetBase ( i ) <> base then
33914: LD_VAR 0 6
33918: PPUSH
33919: CALL_OW 274
33923: PUSH
33924: LD_VAR 0 1
33928: NONEQUAL
33929: IFFALSE 33945
// ComLinkToBase ( base , i ) ;
33931: LD_VAR 0 1
33935: PPUSH
33936: LD_VAR 0 6
33940: PPUSH
33941: CALL_OW 169
33945: GO 33911
33947: POP
33948: POP
// end ; result := tmp ;
33949: LD_ADDR_VAR 0 4
33953: PUSH
33954: LD_VAR 0 5
33958: ST_TO_ADDR
// end ;
33959: LD_VAR 0 4
33963: RET
// export function ComComplete ( units , b ) ; var i ; begin
33964: LD_INT 0
33966: PPUSH
33967: PPUSH
// if not units then
33968: LD_VAR 0 1
33972: NOT
33973: IFFALSE 33977
// exit ;
33975: GO 34067
// for i in units do
33977: LD_ADDR_VAR 0 4
33981: PUSH
33982: LD_VAR 0 1
33986: PUSH
33987: FOR_IN
33988: IFFALSE 34065
// if BuildingStatus ( b ) = bs_build then
33990: LD_VAR 0 2
33994: PPUSH
33995: CALL_OW 461
33999: PUSH
34000: LD_INT 1
34002: EQUAL
34003: IFFALSE 34063
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
34005: LD_VAR 0 4
34009: PPUSH
34010: LD_STRING h
34012: PUSH
34013: LD_VAR 0 2
34017: PPUSH
34018: CALL_OW 250
34022: PUSH
34023: LD_VAR 0 2
34027: PPUSH
34028: CALL_OW 251
34032: PUSH
34033: LD_VAR 0 2
34037: PUSH
34038: LD_INT 0
34040: PUSH
34041: LD_INT 0
34043: PUSH
34044: LD_INT 0
34046: PUSH
34047: EMPTY
34048: LIST
34049: LIST
34050: LIST
34051: LIST
34052: LIST
34053: LIST
34054: LIST
34055: PUSH
34056: EMPTY
34057: LIST
34058: PPUSH
34059: CALL_OW 446
34063: GO 33987
34065: POP
34066: POP
// end ;
34067: LD_VAR 0 3
34071: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
34072: LD_INT 0
34074: PPUSH
34075: PPUSH
34076: PPUSH
34077: PPUSH
34078: PPUSH
34079: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
34080: LD_VAR 0 1
34084: NOT
34085: PUSH
34086: LD_VAR 0 1
34090: PPUSH
34091: CALL_OW 263
34095: PUSH
34096: LD_INT 2
34098: NONEQUAL
34099: OR
34100: IFFALSE 34104
// exit ;
34102: GO 34420
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
34104: LD_ADDR_VAR 0 6
34108: PUSH
34109: LD_INT 22
34111: PUSH
34112: LD_VAR 0 1
34116: PPUSH
34117: CALL_OW 255
34121: PUSH
34122: EMPTY
34123: LIST
34124: LIST
34125: PUSH
34126: LD_INT 2
34128: PUSH
34129: LD_INT 30
34131: PUSH
34132: LD_INT 36
34134: PUSH
34135: EMPTY
34136: LIST
34137: LIST
34138: PUSH
34139: LD_INT 34
34141: PUSH
34142: LD_INT 31
34144: PUSH
34145: EMPTY
34146: LIST
34147: LIST
34148: PUSH
34149: EMPTY
34150: LIST
34151: LIST
34152: LIST
34153: PUSH
34154: EMPTY
34155: LIST
34156: LIST
34157: PPUSH
34158: CALL_OW 69
34162: ST_TO_ADDR
// if not tmp then
34163: LD_VAR 0 6
34167: NOT
34168: IFFALSE 34172
// exit ;
34170: GO 34420
// result := [ ] ;
34172: LD_ADDR_VAR 0 2
34176: PUSH
34177: EMPTY
34178: ST_TO_ADDR
// for i in tmp do
34179: LD_ADDR_VAR 0 3
34183: PUSH
34184: LD_VAR 0 6
34188: PUSH
34189: FOR_IN
34190: IFFALSE 34261
// begin t := UnitsInside ( i ) ;
34192: LD_ADDR_VAR 0 4
34196: PUSH
34197: LD_VAR 0 3
34201: PPUSH
34202: CALL_OW 313
34206: ST_TO_ADDR
// if t then
34207: LD_VAR 0 4
34211: IFFALSE 34259
// for j in t do
34213: LD_ADDR_VAR 0 7
34217: PUSH
34218: LD_VAR 0 4
34222: PUSH
34223: FOR_IN
34224: IFFALSE 34257
// result := Replace ( result , result + 1 , j ) ;
34226: LD_ADDR_VAR 0 2
34230: PUSH
34231: LD_VAR 0 2
34235: PPUSH
34236: LD_VAR 0 2
34240: PUSH
34241: LD_INT 1
34243: PLUS
34244: PPUSH
34245: LD_VAR 0 7
34249: PPUSH
34250: CALL_OW 1
34254: ST_TO_ADDR
34255: GO 34223
34257: POP
34258: POP
// end ;
34259: GO 34189
34261: POP
34262: POP
// if not result then
34263: LD_VAR 0 2
34267: NOT
34268: IFFALSE 34272
// exit ;
34270: GO 34420
// mech := result [ 1 ] ;
34272: LD_ADDR_VAR 0 5
34276: PUSH
34277: LD_VAR 0 2
34281: PUSH
34282: LD_INT 1
34284: ARRAY
34285: ST_TO_ADDR
// if result > 1 then
34286: LD_VAR 0 2
34290: PUSH
34291: LD_INT 1
34293: GREATER
34294: IFFALSE 34406
// begin for i = 2 to result do
34296: LD_ADDR_VAR 0 3
34300: PUSH
34301: DOUBLE
34302: LD_INT 2
34304: DEC
34305: ST_TO_ADDR
34306: LD_VAR 0 2
34310: PUSH
34311: FOR_TO
34312: IFFALSE 34404
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
34314: LD_ADDR_VAR 0 4
34318: PUSH
34319: LD_VAR 0 2
34323: PUSH
34324: LD_VAR 0 3
34328: ARRAY
34329: PPUSH
34330: LD_INT 3
34332: PPUSH
34333: CALL_OW 259
34337: PUSH
34338: LD_VAR 0 2
34342: PUSH
34343: LD_VAR 0 3
34347: ARRAY
34348: PPUSH
34349: CALL_OW 432
34353: MINUS
34354: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
34355: LD_VAR 0 4
34359: PUSH
34360: LD_VAR 0 5
34364: PPUSH
34365: LD_INT 3
34367: PPUSH
34368: CALL_OW 259
34372: PUSH
34373: LD_VAR 0 5
34377: PPUSH
34378: CALL_OW 432
34382: MINUS
34383: GREATEREQUAL
34384: IFFALSE 34402
// mech := result [ i ] ;
34386: LD_ADDR_VAR 0 5
34390: PUSH
34391: LD_VAR 0 2
34395: PUSH
34396: LD_VAR 0 3
34400: ARRAY
34401: ST_TO_ADDR
// end ;
34402: GO 34311
34404: POP
34405: POP
// end ; ComLinkTo ( vehicle , mech ) ;
34406: LD_VAR 0 1
34410: PPUSH
34411: LD_VAR 0 5
34415: PPUSH
34416: CALL_OW 135
// end ;
34420: LD_VAR 0 2
34424: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
34425: LD_INT 0
34427: PPUSH
34428: PPUSH
34429: PPUSH
34430: PPUSH
34431: PPUSH
34432: PPUSH
34433: PPUSH
34434: PPUSH
34435: PPUSH
34436: PPUSH
34437: PPUSH
34438: PPUSH
34439: PPUSH
// result := [ ] ;
34440: LD_ADDR_VAR 0 7
34444: PUSH
34445: EMPTY
34446: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
34447: LD_VAR 0 1
34451: PPUSH
34452: CALL_OW 266
34456: PUSH
34457: LD_INT 0
34459: PUSH
34460: LD_INT 1
34462: PUSH
34463: EMPTY
34464: LIST
34465: LIST
34466: IN
34467: NOT
34468: IFFALSE 34472
// exit ;
34470: GO 36106
// if name then
34472: LD_VAR 0 3
34476: IFFALSE 34492
// SetBName ( base_dep , name ) ;
34478: LD_VAR 0 1
34482: PPUSH
34483: LD_VAR 0 3
34487: PPUSH
34488: CALL_OW 500
// base := GetBase ( base_dep ) ;
34492: LD_ADDR_VAR 0 15
34496: PUSH
34497: LD_VAR 0 1
34501: PPUSH
34502: CALL_OW 274
34506: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
34507: LD_ADDR_VAR 0 16
34511: PUSH
34512: LD_VAR 0 1
34516: PPUSH
34517: CALL_OW 255
34521: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
34522: LD_ADDR_VAR 0 17
34526: PUSH
34527: LD_VAR 0 1
34531: PPUSH
34532: CALL_OW 248
34536: ST_TO_ADDR
// if sources then
34537: LD_VAR 0 5
34541: IFFALSE 34588
// for i = 1 to 3 do
34543: LD_ADDR_VAR 0 8
34547: PUSH
34548: DOUBLE
34549: LD_INT 1
34551: DEC
34552: ST_TO_ADDR
34553: LD_INT 3
34555: PUSH
34556: FOR_TO
34557: IFFALSE 34586
// AddResourceType ( base , i , sources [ i ] ) ;
34559: LD_VAR 0 15
34563: PPUSH
34564: LD_VAR 0 8
34568: PPUSH
34569: LD_VAR 0 5
34573: PUSH
34574: LD_VAR 0 8
34578: ARRAY
34579: PPUSH
34580: CALL_OW 276
34584: GO 34556
34586: POP
34587: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
34588: LD_ADDR_VAR 0 18
34592: PUSH
34593: LD_VAR 0 15
34597: PPUSH
34598: LD_VAR 0 2
34602: PPUSH
34603: LD_INT 1
34605: PPUSH
34606: CALL 33849 0 3
34610: ST_TO_ADDR
// InitHc ;
34611: CALL_OW 19
// InitUc ;
34615: CALL_OW 18
// uc_side := side ;
34619: LD_ADDR_OWVAR 20
34623: PUSH
34624: LD_VAR 0 16
34628: ST_TO_ADDR
// uc_nation := nation ;
34629: LD_ADDR_OWVAR 21
34633: PUSH
34634: LD_VAR 0 17
34638: ST_TO_ADDR
// if buildings then
34639: LD_VAR 0 18
34643: IFFALSE 35965
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
34645: LD_ADDR_VAR 0 19
34649: PUSH
34650: LD_VAR 0 18
34654: PPUSH
34655: LD_INT 2
34657: PUSH
34658: LD_INT 30
34660: PUSH
34661: LD_INT 29
34663: PUSH
34664: EMPTY
34665: LIST
34666: LIST
34667: PUSH
34668: LD_INT 30
34670: PUSH
34671: LD_INT 30
34673: PUSH
34674: EMPTY
34675: LIST
34676: LIST
34677: PUSH
34678: EMPTY
34679: LIST
34680: LIST
34681: LIST
34682: PPUSH
34683: CALL_OW 72
34687: ST_TO_ADDR
// if tmp then
34688: LD_VAR 0 19
34692: IFFALSE 34740
// for i in tmp do
34694: LD_ADDR_VAR 0 8
34698: PUSH
34699: LD_VAR 0 19
34703: PUSH
34704: FOR_IN
34705: IFFALSE 34738
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
34707: LD_VAR 0 8
34711: PPUSH
34712: CALL_OW 250
34716: PPUSH
34717: LD_VAR 0 8
34721: PPUSH
34722: CALL_OW 251
34726: PPUSH
34727: LD_VAR 0 16
34731: PPUSH
34732: CALL_OW 441
34736: GO 34704
34738: POP
34739: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
34740: LD_VAR 0 18
34744: PPUSH
34745: LD_INT 2
34747: PUSH
34748: LD_INT 30
34750: PUSH
34751: LD_INT 32
34753: PUSH
34754: EMPTY
34755: LIST
34756: LIST
34757: PUSH
34758: LD_INT 30
34760: PUSH
34761: LD_INT 33
34763: PUSH
34764: EMPTY
34765: LIST
34766: LIST
34767: PUSH
34768: EMPTY
34769: LIST
34770: LIST
34771: LIST
34772: PPUSH
34773: CALL_OW 72
34777: IFFALSE 34865
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
34779: LD_ADDR_VAR 0 8
34783: PUSH
34784: LD_VAR 0 18
34788: PPUSH
34789: LD_INT 2
34791: PUSH
34792: LD_INT 30
34794: PUSH
34795: LD_INT 32
34797: PUSH
34798: EMPTY
34799: LIST
34800: LIST
34801: PUSH
34802: LD_INT 30
34804: PUSH
34805: LD_INT 33
34807: PUSH
34808: EMPTY
34809: LIST
34810: LIST
34811: PUSH
34812: EMPTY
34813: LIST
34814: LIST
34815: LIST
34816: PPUSH
34817: CALL_OW 72
34821: PUSH
34822: FOR_IN
34823: IFFALSE 34863
// begin if not GetBWeapon ( i ) then
34825: LD_VAR 0 8
34829: PPUSH
34830: CALL_OW 269
34834: NOT
34835: IFFALSE 34861
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
34837: LD_VAR 0 8
34841: PPUSH
34842: LD_VAR 0 8
34846: PPUSH
34847: LD_VAR 0 2
34851: PPUSH
34852: CALL 36111 0 2
34856: PPUSH
34857: CALL_OW 431
// end ;
34861: GO 34822
34863: POP
34864: POP
// end ; for i = 1 to personel do
34865: LD_ADDR_VAR 0 8
34869: PUSH
34870: DOUBLE
34871: LD_INT 1
34873: DEC
34874: ST_TO_ADDR
34875: LD_VAR 0 6
34879: PUSH
34880: FOR_TO
34881: IFFALSE 35945
// begin if i > 4 then
34883: LD_VAR 0 8
34887: PUSH
34888: LD_INT 4
34890: GREATER
34891: IFFALSE 34895
// break ;
34893: GO 35945
// case i of 1 :
34895: LD_VAR 0 8
34899: PUSH
34900: LD_INT 1
34902: DOUBLE
34903: EQUAL
34904: IFTRUE 34908
34906: GO 34988
34908: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
34909: LD_ADDR_VAR 0 12
34913: PUSH
34914: LD_VAR 0 18
34918: PPUSH
34919: LD_INT 22
34921: PUSH
34922: LD_VAR 0 16
34926: PUSH
34927: EMPTY
34928: LIST
34929: LIST
34930: PUSH
34931: LD_INT 58
34933: PUSH
34934: EMPTY
34935: LIST
34936: PUSH
34937: LD_INT 2
34939: PUSH
34940: LD_INT 30
34942: PUSH
34943: LD_INT 32
34945: PUSH
34946: EMPTY
34947: LIST
34948: LIST
34949: PUSH
34950: LD_INT 30
34952: PUSH
34953: LD_INT 4
34955: PUSH
34956: EMPTY
34957: LIST
34958: LIST
34959: PUSH
34960: LD_INT 30
34962: PUSH
34963: LD_INT 5
34965: PUSH
34966: EMPTY
34967: LIST
34968: LIST
34969: PUSH
34970: EMPTY
34971: LIST
34972: LIST
34973: LIST
34974: LIST
34975: PUSH
34976: EMPTY
34977: LIST
34978: LIST
34979: LIST
34980: PPUSH
34981: CALL_OW 72
34985: ST_TO_ADDR
34986: GO 35210
34988: LD_INT 2
34990: DOUBLE
34991: EQUAL
34992: IFTRUE 34996
34994: GO 35058
34996: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
34997: LD_ADDR_VAR 0 12
35001: PUSH
35002: LD_VAR 0 18
35006: PPUSH
35007: LD_INT 22
35009: PUSH
35010: LD_VAR 0 16
35014: PUSH
35015: EMPTY
35016: LIST
35017: LIST
35018: PUSH
35019: LD_INT 2
35021: PUSH
35022: LD_INT 30
35024: PUSH
35025: LD_INT 0
35027: PUSH
35028: EMPTY
35029: LIST
35030: LIST
35031: PUSH
35032: LD_INT 30
35034: PUSH
35035: LD_INT 1
35037: PUSH
35038: EMPTY
35039: LIST
35040: LIST
35041: PUSH
35042: EMPTY
35043: LIST
35044: LIST
35045: LIST
35046: PUSH
35047: EMPTY
35048: LIST
35049: LIST
35050: PPUSH
35051: CALL_OW 72
35055: ST_TO_ADDR
35056: GO 35210
35058: LD_INT 3
35060: DOUBLE
35061: EQUAL
35062: IFTRUE 35066
35064: GO 35128
35066: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
35067: LD_ADDR_VAR 0 12
35071: PUSH
35072: LD_VAR 0 18
35076: PPUSH
35077: LD_INT 22
35079: PUSH
35080: LD_VAR 0 16
35084: PUSH
35085: EMPTY
35086: LIST
35087: LIST
35088: PUSH
35089: LD_INT 2
35091: PUSH
35092: LD_INT 30
35094: PUSH
35095: LD_INT 2
35097: PUSH
35098: EMPTY
35099: LIST
35100: LIST
35101: PUSH
35102: LD_INT 30
35104: PUSH
35105: LD_INT 3
35107: PUSH
35108: EMPTY
35109: LIST
35110: LIST
35111: PUSH
35112: EMPTY
35113: LIST
35114: LIST
35115: LIST
35116: PUSH
35117: EMPTY
35118: LIST
35119: LIST
35120: PPUSH
35121: CALL_OW 72
35125: ST_TO_ADDR
35126: GO 35210
35128: LD_INT 4
35130: DOUBLE
35131: EQUAL
35132: IFTRUE 35136
35134: GO 35209
35136: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
35137: LD_ADDR_VAR 0 12
35141: PUSH
35142: LD_VAR 0 18
35146: PPUSH
35147: LD_INT 22
35149: PUSH
35150: LD_VAR 0 16
35154: PUSH
35155: EMPTY
35156: LIST
35157: LIST
35158: PUSH
35159: LD_INT 2
35161: PUSH
35162: LD_INT 30
35164: PUSH
35165: LD_INT 6
35167: PUSH
35168: EMPTY
35169: LIST
35170: LIST
35171: PUSH
35172: LD_INT 30
35174: PUSH
35175: LD_INT 7
35177: PUSH
35178: EMPTY
35179: LIST
35180: LIST
35181: PUSH
35182: LD_INT 30
35184: PUSH
35185: LD_INT 8
35187: PUSH
35188: EMPTY
35189: LIST
35190: LIST
35191: PUSH
35192: EMPTY
35193: LIST
35194: LIST
35195: LIST
35196: LIST
35197: PUSH
35198: EMPTY
35199: LIST
35200: LIST
35201: PPUSH
35202: CALL_OW 72
35206: ST_TO_ADDR
35207: GO 35210
35209: POP
// if i = 1 then
35210: LD_VAR 0 8
35214: PUSH
35215: LD_INT 1
35217: EQUAL
35218: IFFALSE 35329
// begin tmp := [ ] ;
35220: LD_ADDR_VAR 0 19
35224: PUSH
35225: EMPTY
35226: ST_TO_ADDR
// for j in f do
35227: LD_ADDR_VAR 0 9
35231: PUSH
35232: LD_VAR 0 12
35236: PUSH
35237: FOR_IN
35238: IFFALSE 35311
// if GetBType ( j ) = b_bunker then
35240: LD_VAR 0 9
35244: PPUSH
35245: CALL_OW 266
35249: PUSH
35250: LD_INT 32
35252: EQUAL
35253: IFFALSE 35280
// tmp := Insert ( tmp , 1 , j ) else
35255: LD_ADDR_VAR 0 19
35259: PUSH
35260: LD_VAR 0 19
35264: PPUSH
35265: LD_INT 1
35267: PPUSH
35268: LD_VAR 0 9
35272: PPUSH
35273: CALL_OW 2
35277: ST_TO_ADDR
35278: GO 35309
// tmp := Insert ( tmp , tmp + 1 , j ) ;
35280: LD_ADDR_VAR 0 19
35284: PUSH
35285: LD_VAR 0 19
35289: PPUSH
35290: LD_VAR 0 19
35294: PUSH
35295: LD_INT 1
35297: PLUS
35298: PPUSH
35299: LD_VAR 0 9
35303: PPUSH
35304: CALL_OW 2
35308: ST_TO_ADDR
35309: GO 35237
35311: POP
35312: POP
// if tmp then
35313: LD_VAR 0 19
35317: IFFALSE 35329
// f := tmp ;
35319: LD_ADDR_VAR 0 12
35323: PUSH
35324: LD_VAR 0 19
35328: ST_TO_ADDR
// end ; x := personel [ i ] ;
35329: LD_ADDR_VAR 0 13
35333: PUSH
35334: LD_VAR 0 6
35338: PUSH
35339: LD_VAR 0 8
35343: ARRAY
35344: ST_TO_ADDR
// if x = - 1 then
35345: LD_VAR 0 13
35349: PUSH
35350: LD_INT 1
35352: NEG
35353: EQUAL
35354: IFFALSE 35563
// begin for j in f do
35356: LD_ADDR_VAR 0 9
35360: PUSH
35361: LD_VAR 0 12
35365: PUSH
35366: FOR_IN
35367: IFFALSE 35559
// repeat InitHc ;
35369: CALL_OW 19
// if GetBType ( j ) = b_barracks then
35373: LD_VAR 0 9
35377: PPUSH
35378: CALL_OW 266
35382: PUSH
35383: LD_INT 5
35385: EQUAL
35386: IFFALSE 35456
// begin if UnitsInside ( j ) < 3 then
35388: LD_VAR 0 9
35392: PPUSH
35393: CALL_OW 313
35397: PUSH
35398: LD_INT 3
35400: LESS
35401: IFFALSE 35437
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35403: LD_INT 0
35405: PPUSH
35406: LD_INT 5
35408: PUSH
35409: LD_INT 8
35411: PUSH
35412: LD_INT 9
35414: PUSH
35415: EMPTY
35416: LIST
35417: LIST
35418: LIST
35419: PUSH
35420: LD_VAR 0 17
35424: ARRAY
35425: PPUSH
35426: LD_VAR 0 4
35430: PPUSH
35431: CALL_OW 380
35435: GO 35454
// PrepareHuman ( false , i , skill ) ;
35437: LD_INT 0
35439: PPUSH
35440: LD_VAR 0 8
35444: PPUSH
35445: LD_VAR 0 4
35449: PPUSH
35450: CALL_OW 380
// end else
35454: GO 35473
// PrepareHuman ( false , i , skill ) ;
35456: LD_INT 0
35458: PPUSH
35459: LD_VAR 0 8
35463: PPUSH
35464: LD_VAR 0 4
35468: PPUSH
35469: CALL_OW 380
// un := CreateHuman ;
35473: LD_ADDR_VAR 0 14
35477: PUSH
35478: CALL_OW 44
35482: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35483: LD_ADDR_VAR 0 7
35487: PUSH
35488: LD_VAR 0 7
35492: PPUSH
35493: LD_INT 1
35495: PPUSH
35496: LD_VAR 0 14
35500: PPUSH
35501: CALL_OW 2
35505: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
35506: LD_VAR 0 14
35510: PPUSH
35511: LD_VAR 0 9
35515: PPUSH
35516: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
35520: LD_VAR 0 9
35524: PPUSH
35525: CALL_OW 313
35529: PUSH
35530: LD_INT 6
35532: EQUAL
35533: PUSH
35534: LD_VAR 0 9
35538: PPUSH
35539: CALL_OW 266
35543: PUSH
35544: LD_INT 32
35546: PUSH
35547: LD_INT 31
35549: PUSH
35550: EMPTY
35551: LIST
35552: LIST
35553: IN
35554: OR
35555: IFFALSE 35369
35557: GO 35366
35559: POP
35560: POP
// end else
35561: GO 35943
// for j = 1 to x do
35563: LD_ADDR_VAR 0 9
35567: PUSH
35568: DOUBLE
35569: LD_INT 1
35571: DEC
35572: ST_TO_ADDR
35573: LD_VAR 0 13
35577: PUSH
35578: FOR_TO
35579: IFFALSE 35941
// begin InitHc ;
35581: CALL_OW 19
// if not f then
35585: LD_VAR 0 12
35589: NOT
35590: IFFALSE 35679
// begin PrepareHuman ( false , i , skill ) ;
35592: LD_INT 0
35594: PPUSH
35595: LD_VAR 0 8
35599: PPUSH
35600: LD_VAR 0 4
35604: PPUSH
35605: CALL_OW 380
// un := CreateHuman ;
35609: LD_ADDR_VAR 0 14
35613: PUSH
35614: CALL_OW 44
35618: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35619: LD_ADDR_VAR 0 7
35623: PUSH
35624: LD_VAR 0 7
35628: PPUSH
35629: LD_INT 1
35631: PPUSH
35632: LD_VAR 0 14
35636: PPUSH
35637: CALL_OW 2
35641: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35642: LD_VAR 0 14
35646: PPUSH
35647: LD_VAR 0 1
35651: PPUSH
35652: CALL_OW 250
35656: PPUSH
35657: LD_VAR 0 1
35661: PPUSH
35662: CALL_OW 251
35666: PPUSH
35667: LD_INT 10
35669: PPUSH
35670: LD_INT 0
35672: PPUSH
35673: CALL_OW 50
// continue ;
35677: GO 35578
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
35679: LD_VAR 0 12
35683: PUSH
35684: LD_INT 1
35686: ARRAY
35687: PPUSH
35688: CALL_OW 313
35692: PUSH
35693: LD_VAR 0 12
35697: PUSH
35698: LD_INT 1
35700: ARRAY
35701: PPUSH
35702: CALL_OW 266
35706: PUSH
35707: LD_INT 32
35709: PUSH
35710: LD_INT 31
35712: PUSH
35713: EMPTY
35714: LIST
35715: LIST
35716: IN
35717: AND
35718: PUSH
35719: LD_VAR 0 12
35723: PUSH
35724: LD_INT 1
35726: ARRAY
35727: PPUSH
35728: CALL_OW 313
35732: PUSH
35733: LD_INT 6
35735: EQUAL
35736: OR
35737: IFFALSE 35757
// f := Delete ( f , 1 ) ;
35739: LD_ADDR_VAR 0 12
35743: PUSH
35744: LD_VAR 0 12
35748: PPUSH
35749: LD_INT 1
35751: PPUSH
35752: CALL_OW 3
35756: ST_TO_ADDR
// if not f then
35757: LD_VAR 0 12
35761: NOT
35762: IFFALSE 35780
// begin x := x + 2 ;
35764: LD_ADDR_VAR 0 13
35768: PUSH
35769: LD_VAR 0 13
35773: PUSH
35774: LD_INT 2
35776: PLUS
35777: ST_TO_ADDR
// continue ;
35778: GO 35578
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
35780: LD_VAR 0 12
35784: PUSH
35785: LD_INT 1
35787: ARRAY
35788: PPUSH
35789: CALL_OW 266
35793: PUSH
35794: LD_INT 5
35796: EQUAL
35797: IFFALSE 35871
// begin if UnitsInside ( f [ 1 ] ) < 3 then
35799: LD_VAR 0 12
35803: PUSH
35804: LD_INT 1
35806: ARRAY
35807: PPUSH
35808: CALL_OW 313
35812: PUSH
35813: LD_INT 3
35815: LESS
35816: IFFALSE 35852
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35818: LD_INT 0
35820: PPUSH
35821: LD_INT 5
35823: PUSH
35824: LD_INT 8
35826: PUSH
35827: LD_INT 9
35829: PUSH
35830: EMPTY
35831: LIST
35832: LIST
35833: LIST
35834: PUSH
35835: LD_VAR 0 17
35839: ARRAY
35840: PPUSH
35841: LD_VAR 0 4
35845: PPUSH
35846: CALL_OW 380
35850: GO 35869
// PrepareHuman ( false , i , skill ) ;
35852: LD_INT 0
35854: PPUSH
35855: LD_VAR 0 8
35859: PPUSH
35860: LD_VAR 0 4
35864: PPUSH
35865: CALL_OW 380
// end else
35869: GO 35888
// PrepareHuman ( false , i , skill ) ;
35871: LD_INT 0
35873: PPUSH
35874: LD_VAR 0 8
35878: PPUSH
35879: LD_VAR 0 4
35883: PPUSH
35884: CALL_OW 380
// un := CreateHuman ;
35888: LD_ADDR_VAR 0 14
35892: PUSH
35893: CALL_OW 44
35897: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35898: LD_ADDR_VAR 0 7
35902: PUSH
35903: LD_VAR 0 7
35907: PPUSH
35908: LD_INT 1
35910: PPUSH
35911: LD_VAR 0 14
35915: PPUSH
35916: CALL_OW 2
35920: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
35921: LD_VAR 0 14
35925: PPUSH
35926: LD_VAR 0 12
35930: PUSH
35931: LD_INT 1
35933: ARRAY
35934: PPUSH
35935: CALL_OW 52
// end ;
35939: GO 35578
35941: POP
35942: POP
// end ;
35943: GO 34880
35945: POP
35946: POP
// result := result ^ buildings ;
35947: LD_ADDR_VAR 0 7
35951: PUSH
35952: LD_VAR 0 7
35956: PUSH
35957: LD_VAR 0 18
35961: ADD
35962: ST_TO_ADDR
// end else
35963: GO 36106
// begin for i = 1 to personel do
35965: LD_ADDR_VAR 0 8
35969: PUSH
35970: DOUBLE
35971: LD_INT 1
35973: DEC
35974: ST_TO_ADDR
35975: LD_VAR 0 6
35979: PUSH
35980: FOR_TO
35981: IFFALSE 36104
// begin if i > 4 then
35983: LD_VAR 0 8
35987: PUSH
35988: LD_INT 4
35990: GREATER
35991: IFFALSE 35995
// break ;
35993: GO 36104
// x := personel [ i ] ;
35995: LD_ADDR_VAR 0 13
35999: PUSH
36000: LD_VAR 0 6
36004: PUSH
36005: LD_VAR 0 8
36009: ARRAY
36010: ST_TO_ADDR
// if x = - 1 then
36011: LD_VAR 0 13
36015: PUSH
36016: LD_INT 1
36018: NEG
36019: EQUAL
36020: IFFALSE 36024
// continue ;
36022: GO 35980
// PrepareHuman ( false , i , skill ) ;
36024: LD_INT 0
36026: PPUSH
36027: LD_VAR 0 8
36031: PPUSH
36032: LD_VAR 0 4
36036: PPUSH
36037: CALL_OW 380
// un := CreateHuman ;
36041: LD_ADDR_VAR 0 14
36045: PUSH
36046: CALL_OW 44
36050: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36051: LD_VAR 0 14
36055: PPUSH
36056: LD_VAR 0 1
36060: PPUSH
36061: CALL_OW 250
36065: PPUSH
36066: LD_VAR 0 1
36070: PPUSH
36071: CALL_OW 251
36075: PPUSH
36076: LD_INT 10
36078: PPUSH
36079: LD_INT 0
36081: PPUSH
36082: CALL_OW 50
// result := result ^ un ;
36086: LD_ADDR_VAR 0 7
36090: PUSH
36091: LD_VAR 0 7
36095: PUSH
36096: LD_VAR 0 14
36100: ADD
36101: ST_TO_ADDR
// end ;
36102: GO 35980
36104: POP
36105: POP
// end ; end ;
36106: LD_VAR 0 7
36110: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
36111: LD_INT 0
36113: PPUSH
36114: PPUSH
36115: PPUSH
36116: PPUSH
36117: PPUSH
36118: PPUSH
36119: PPUSH
36120: PPUSH
36121: PPUSH
36122: PPUSH
36123: PPUSH
36124: PPUSH
36125: PPUSH
36126: PPUSH
36127: PPUSH
36128: PPUSH
// result := false ;
36129: LD_ADDR_VAR 0 3
36133: PUSH
36134: LD_INT 0
36136: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
36137: LD_VAR 0 1
36141: NOT
36142: PUSH
36143: LD_VAR 0 1
36147: PPUSH
36148: CALL_OW 266
36152: PUSH
36153: LD_INT 32
36155: PUSH
36156: LD_INT 33
36158: PUSH
36159: EMPTY
36160: LIST
36161: LIST
36162: IN
36163: NOT
36164: OR
36165: IFFALSE 36169
// exit ;
36167: GO 37278
// nat := GetNation ( tower ) ;
36169: LD_ADDR_VAR 0 12
36173: PUSH
36174: LD_VAR 0 1
36178: PPUSH
36179: CALL_OW 248
36183: ST_TO_ADDR
// side := GetSide ( tower ) ;
36184: LD_ADDR_VAR 0 16
36188: PUSH
36189: LD_VAR 0 1
36193: PPUSH
36194: CALL_OW 255
36198: ST_TO_ADDR
// x := GetX ( tower ) ;
36199: LD_ADDR_VAR 0 10
36203: PUSH
36204: LD_VAR 0 1
36208: PPUSH
36209: CALL_OW 250
36213: ST_TO_ADDR
// y := GetY ( tower ) ;
36214: LD_ADDR_VAR 0 11
36218: PUSH
36219: LD_VAR 0 1
36223: PPUSH
36224: CALL_OW 251
36228: ST_TO_ADDR
// if not x or not y then
36229: LD_VAR 0 10
36233: NOT
36234: PUSH
36235: LD_VAR 0 11
36239: NOT
36240: OR
36241: IFFALSE 36245
// exit ;
36243: GO 37278
// weapon := 0 ;
36245: LD_ADDR_VAR 0 18
36249: PUSH
36250: LD_INT 0
36252: ST_TO_ADDR
// fac_list := [ ] ;
36253: LD_ADDR_VAR 0 17
36257: PUSH
36258: EMPTY
36259: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
36260: LD_ADDR_VAR 0 6
36264: PUSH
36265: LD_VAR 0 1
36269: PPUSH
36270: CALL_OW 274
36274: PPUSH
36275: LD_VAR 0 2
36279: PPUSH
36280: LD_INT 0
36282: PPUSH
36283: CALL 33849 0 3
36287: PPUSH
36288: LD_INT 30
36290: PUSH
36291: LD_INT 3
36293: PUSH
36294: EMPTY
36295: LIST
36296: LIST
36297: PPUSH
36298: CALL_OW 72
36302: ST_TO_ADDR
// if not factories then
36303: LD_VAR 0 6
36307: NOT
36308: IFFALSE 36312
// exit ;
36310: GO 37278
// for i in factories do
36312: LD_ADDR_VAR 0 8
36316: PUSH
36317: LD_VAR 0 6
36321: PUSH
36322: FOR_IN
36323: IFFALSE 36348
// fac_list := fac_list union AvailableWeaponList ( i ) ;
36325: LD_ADDR_VAR 0 17
36329: PUSH
36330: LD_VAR 0 17
36334: PUSH
36335: LD_VAR 0 8
36339: PPUSH
36340: CALL_OW 478
36344: UNION
36345: ST_TO_ADDR
36346: GO 36322
36348: POP
36349: POP
// if not fac_list then
36350: LD_VAR 0 17
36354: NOT
36355: IFFALSE 36359
// exit ;
36357: GO 37278
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
36359: LD_ADDR_VAR 0 5
36363: PUSH
36364: LD_INT 4
36366: PUSH
36367: LD_INT 5
36369: PUSH
36370: LD_INT 9
36372: PUSH
36373: LD_INT 10
36375: PUSH
36376: LD_INT 6
36378: PUSH
36379: LD_INT 7
36381: PUSH
36382: LD_INT 11
36384: PUSH
36385: EMPTY
36386: LIST
36387: LIST
36388: LIST
36389: LIST
36390: LIST
36391: LIST
36392: LIST
36393: PUSH
36394: LD_INT 27
36396: PUSH
36397: LD_INT 28
36399: PUSH
36400: LD_INT 26
36402: PUSH
36403: LD_INT 30
36405: PUSH
36406: EMPTY
36407: LIST
36408: LIST
36409: LIST
36410: LIST
36411: PUSH
36412: LD_INT 43
36414: PUSH
36415: LD_INT 44
36417: PUSH
36418: LD_INT 46
36420: PUSH
36421: LD_INT 45
36423: PUSH
36424: LD_INT 47
36426: PUSH
36427: LD_INT 49
36429: PUSH
36430: EMPTY
36431: LIST
36432: LIST
36433: LIST
36434: LIST
36435: LIST
36436: LIST
36437: PUSH
36438: EMPTY
36439: LIST
36440: LIST
36441: LIST
36442: PUSH
36443: LD_VAR 0 12
36447: ARRAY
36448: ST_TO_ADDR
// list := list isect fac_list ;
36449: LD_ADDR_VAR 0 5
36453: PUSH
36454: LD_VAR 0 5
36458: PUSH
36459: LD_VAR 0 17
36463: ISECT
36464: ST_TO_ADDR
// if not list then
36465: LD_VAR 0 5
36469: NOT
36470: IFFALSE 36474
// exit ;
36472: GO 37278
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
36474: LD_VAR 0 12
36478: PUSH
36479: LD_INT 3
36481: EQUAL
36482: PUSH
36483: LD_INT 49
36485: PUSH
36486: LD_VAR 0 5
36490: IN
36491: AND
36492: PUSH
36493: LD_INT 31
36495: PPUSH
36496: LD_VAR 0 16
36500: PPUSH
36501: CALL_OW 321
36505: PUSH
36506: LD_INT 2
36508: EQUAL
36509: AND
36510: IFFALSE 36570
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
36512: LD_INT 22
36514: PUSH
36515: LD_VAR 0 16
36519: PUSH
36520: EMPTY
36521: LIST
36522: LIST
36523: PUSH
36524: LD_INT 35
36526: PUSH
36527: LD_INT 49
36529: PUSH
36530: EMPTY
36531: LIST
36532: LIST
36533: PUSH
36534: LD_INT 91
36536: PUSH
36537: LD_VAR 0 1
36541: PUSH
36542: LD_INT 10
36544: PUSH
36545: EMPTY
36546: LIST
36547: LIST
36548: LIST
36549: PUSH
36550: EMPTY
36551: LIST
36552: LIST
36553: LIST
36554: PPUSH
36555: CALL_OW 69
36559: NOT
36560: IFFALSE 36570
// weapon := ru_time_lapser ;
36562: LD_ADDR_VAR 0 18
36566: PUSH
36567: LD_INT 49
36569: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
36570: LD_VAR 0 12
36574: PUSH
36575: LD_INT 1
36577: PUSH
36578: LD_INT 2
36580: PUSH
36581: EMPTY
36582: LIST
36583: LIST
36584: IN
36585: PUSH
36586: LD_INT 11
36588: PUSH
36589: LD_VAR 0 5
36593: IN
36594: PUSH
36595: LD_INT 30
36597: PUSH
36598: LD_VAR 0 5
36602: IN
36603: OR
36604: AND
36605: PUSH
36606: LD_INT 6
36608: PPUSH
36609: LD_VAR 0 16
36613: PPUSH
36614: CALL_OW 321
36618: PUSH
36619: LD_INT 2
36621: EQUAL
36622: AND
36623: IFFALSE 36788
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
36625: LD_INT 22
36627: PUSH
36628: LD_VAR 0 16
36632: PUSH
36633: EMPTY
36634: LIST
36635: LIST
36636: PUSH
36637: LD_INT 2
36639: PUSH
36640: LD_INT 35
36642: PUSH
36643: LD_INT 11
36645: PUSH
36646: EMPTY
36647: LIST
36648: LIST
36649: PUSH
36650: LD_INT 35
36652: PUSH
36653: LD_INT 30
36655: PUSH
36656: EMPTY
36657: LIST
36658: LIST
36659: PUSH
36660: EMPTY
36661: LIST
36662: LIST
36663: LIST
36664: PUSH
36665: LD_INT 91
36667: PUSH
36668: LD_VAR 0 1
36672: PUSH
36673: LD_INT 18
36675: PUSH
36676: EMPTY
36677: LIST
36678: LIST
36679: LIST
36680: PUSH
36681: EMPTY
36682: LIST
36683: LIST
36684: LIST
36685: PPUSH
36686: CALL_OW 69
36690: NOT
36691: PUSH
36692: LD_INT 22
36694: PUSH
36695: LD_VAR 0 16
36699: PUSH
36700: EMPTY
36701: LIST
36702: LIST
36703: PUSH
36704: LD_INT 2
36706: PUSH
36707: LD_INT 30
36709: PUSH
36710: LD_INT 32
36712: PUSH
36713: EMPTY
36714: LIST
36715: LIST
36716: PUSH
36717: LD_INT 30
36719: PUSH
36720: LD_INT 33
36722: PUSH
36723: EMPTY
36724: LIST
36725: LIST
36726: PUSH
36727: EMPTY
36728: LIST
36729: LIST
36730: LIST
36731: PUSH
36732: LD_INT 91
36734: PUSH
36735: LD_VAR 0 1
36739: PUSH
36740: LD_INT 12
36742: PUSH
36743: EMPTY
36744: LIST
36745: LIST
36746: LIST
36747: PUSH
36748: EMPTY
36749: LIST
36750: LIST
36751: LIST
36752: PUSH
36753: EMPTY
36754: LIST
36755: PPUSH
36756: CALL_OW 69
36760: PUSH
36761: LD_INT 2
36763: GREATER
36764: AND
36765: IFFALSE 36788
// weapon := [ us_radar , ar_radar ] [ nat ] ;
36767: LD_ADDR_VAR 0 18
36771: PUSH
36772: LD_INT 11
36774: PUSH
36775: LD_INT 30
36777: PUSH
36778: EMPTY
36779: LIST
36780: LIST
36781: PUSH
36782: LD_VAR 0 12
36786: ARRAY
36787: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
36788: LD_VAR 0 18
36792: NOT
36793: PUSH
36794: LD_INT 40
36796: PPUSH
36797: LD_VAR 0 16
36801: PPUSH
36802: CALL_OW 321
36806: PUSH
36807: LD_INT 2
36809: EQUAL
36810: AND
36811: PUSH
36812: LD_INT 7
36814: PUSH
36815: LD_VAR 0 5
36819: IN
36820: PUSH
36821: LD_INT 28
36823: PUSH
36824: LD_VAR 0 5
36828: IN
36829: OR
36830: PUSH
36831: LD_INT 45
36833: PUSH
36834: LD_VAR 0 5
36838: IN
36839: OR
36840: AND
36841: IFFALSE 37095
// begin hex := GetHexInfo ( x , y ) ;
36843: LD_ADDR_VAR 0 4
36847: PUSH
36848: LD_VAR 0 10
36852: PPUSH
36853: LD_VAR 0 11
36857: PPUSH
36858: CALL_OW 546
36862: ST_TO_ADDR
// if hex [ 1 ] then
36863: LD_VAR 0 4
36867: PUSH
36868: LD_INT 1
36870: ARRAY
36871: IFFALSE 36875
// exit ;
36873: GO 37278
// height := hex [ 2 ] ;
36875: LD_ADDR_VAR 0 15
36879: PUSH
36880: LD_VAR 0 4
36884: PUSH
36885: LD_INT 2
36887: ARRAY
36888: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
36889: LD_ADDR_VAR 0 14
36893: PUSH
36894: LD_INT 0
36896: PUSH
36897: LD_INT 2
36899: PUSH
36900: LD_INT 3
36902: PUSH
36903: LD_INT 5
36905: PUSH
36906: EMPTY
36907: LIST
36908: LIST
36909: LIST
36910: LIST
36911: ST_TO_ADDR
// for i in tmp do
36912: LD_ADDR_VAR 0 8
36916: PUSH
36917: LD_VAR 0 14
36921: PUSH
36922: FOR_IN
36923: IFFALSE 37093
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
36925: LD_ADDR_VAR 0 9
36929: PUSH
36930: LD_VAR 0 10
36934: PPUSH
36935: LD_VAR 0 8
36939: PPUSH
36940: LD_INT 5
36942: PPUSH
36943: CALL_OW 272
36947: PUSH
36948: LD_VAR 0 11
36952: PPUSH
36953: LD_VAR 0 8
36957: PPUSH
36958: LD_INT 5
36960: PPUSH
36961: CALL_OW 273
36965: PUSH
36966: EMPTY
36967: LIST
36968: LIST
36969: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
36970: LD_VAR 0 9
36974: PUSH
36975: LD_INT 1
36977: ARRAY
36978: PPUSH
36979: LD_VAR 0 9
36983: PUSH
36984: LD_INT 2
36986: ARRAY
36987: PPUSH
36988: CALL_OW 488
36992: IFFALSE 37091
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
36994: LD_ADDR_VAR 0 4
36998: PUSH
36999: LD_VAR 0 9
37003: PUSH
37004: LD_INT 1
37006: ARRAY
37007: PPUSH
37008: LD_VAR 0 9
37012: PUSH
37013: LD_INT 2
37015: ARRAY
37016: PPUSH
37017: CALL_OW 546
37021: ST_TO_ADDR
// if hex [ 1 ] then
37022: LD_VAR 0 4
37026: PUSH
37027: LD_INT 1
37029: ARRAY
37030: IFFALSE 37034
// continue ;
37032: GO 36922
// h := hex [ 2 ] ;
37034: LD_ADDR_VAR 0 13
37038: PUSH
37039: LD_VAR 0 4
37043: PUSH
37044: LD_INT 2
37046: ARRAY
37047: ST_TO_ADDR
// if h + 7 < height then
37048: LD_VAR 0 13
37052: PUSH
37053: LD_INT 7
37055: PLUS
37056: PUSH
37057: LD_VAR 0 15
37061: LESS
37062: IFFALSE 37091
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
37064: LD_ADDR_VAR 0 18
37068: PUSH
37069: LD_INT 7
37071: PUSH
37072: LD_INT 28
37074: PUSH
37075: LD_INT 45
37077: PUSH
37078: EMPTY
37079: LIST
37080: LIST
37081: LIST
37082: PUSH
37083: LD_VAR 0 12
37087: ARRAY
37088: ST_TO_ADDR
// break ;
37089: GO 37093
// end ; end ; end ;
37091: GO 36922
37093: POP
37094: POP
// end ; if not weapon then
37095: LD_VAR 0 18
37099: NOT
37100: IFFALSE 37160
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
37102: LD_ADDR_VAR 0 5
37106: PUSH
37107: LD_VAR 0 5
37111: PUSH
37112: LD_INT 11
37114: PUSH
37115: LD_INT 30
37117: PUSH
37118: LD_INT 49
37120: PUSH
37121: EMPTY
37122: LIST
37123: LIST
37124: LIST
37125: DIFF
37126: ST_TO_ADDR
// if not list then
37127: LD_VAR 0 5
37131: NOT
37132: IFFALSE 37136
// exit ;
37134: GO 37278
// weapon := list [ rand ( 1 , list ) ] ;
37136: LD_ADDR_VAR 0 18
37140: PUSH
37141: LD_VAR 0 5
37145: PUSH
37146: LD_INT 1
37148: PPUSH
37149: LD_VAR 0 5
37153: PPUSH
37154: CALL_OW 12
37158: ARRAY
37159: ST_TO_ADDR
// end ; if weapon then
37160: LD_VAR 0 18
37164: IFFALSE 37278
// begin tmp := CostOfWeapon ( weapon ) ;
37166: LD_ADDR_VAR 0 14
37170: PUSH
37171: LD_VAR 0 18
37175: PPUSH
37176: CALL_OW 451
37180: ST_TO_ADDR
// j := GetBase ( tower ) ;
37181: LD_ADDR_VAR 0 9
37185: PUSH
37186: LD_VAR 0 1
37190: PPUSH
37191: CALL_OW 274
37195: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
37196: LD_VAR 0 9
37200: PPUSH
37201: LD_INT 1
37203: PPUSH
37204: CALL_OW 275
37208: PUSH
37209: LD_VAR 0 14
37213: PUSH
37214: LD_INT 1
37216: ARRAY
37217: GREATEREQUAL
37218: PUSH
37219: LD_VAR 0 9
37223: PPUSH
37224: LD_INT 2
37226: PPUSH
37227: CALL_OW 275
37231: PUSH
37232: LD_VAR 0 14
37236: PUSH
37237: LD_INT 2
37239: ARRAY
37240: GREATEREQUAL
37241: AND
37242: PUSH
37243: LD_VAR 0 9
37247: PPUSH
37248: LD_INT 3
37250: PPUSH
37251: CALL_OW 275
37255: PUSH
37256: LD_VAR 0 14
37260: PUSH
37261: LD_INT 3
37263: ARRAY
37264: GREATEREQUAL
37265: AND
37266: IFFALSE 37278
// result := weapon ;
37268: LD_ADDR_VAR 0 3
37272: PUSH
37273: LD_VAR 0 18
37277: ST_TO_ADDR
// end ; end ;
37278: LD_VAR 0 3
37282: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
37283: LD_INT 0
37285: PPUSH
37286: PPUSH
// result := true ;
37287: LD_ADDR_VAR 0 3
37291: PUSH
37292: LD_INT 1
37294: ST_TO_ADDR
// if array1 = array2 then
37295: LD_VAR 0 1
37299: PUSH
37300: LD_VAR 0 2
37304: EQUAL
37305: IFFALSE 37365
// begin for i = 1 to array1 do
37307: LD_ADDR_VAR 0 4
37311: PUSH
37312: DOUBLE
37313: LD_INT 1
37315: DEC
37316: ST_TO_ADDR
37317: LD_VAR 0 1
37321: PUSH
37322: FOR_TO
37323: IFFALSE 37361
// if array1 [ i ] <> array2 [ i ] then
37325: LD_VAR 0 1
37329: PUSH
37330: LD_VAR 0 4
37334: ARRAY
37335: PUSH
37336: LD_VAR 0 2
37340: PUSH
37341: LD_VAR 0 4
37345: ARRAY
37346: NONEQUAL
37347: IFFALSE 37359
// begin result := false ;
37349: LD_ADDR_VAR 0 3
37353: PUSH
37354: LD_INT 0
37356: ST_TO_ADDR
// break ;
37357: GO 37361
// end ;
37359: GO 37322
37361: POP
37362: POP
// end else
37363: GO 37373
// result := false ;
37365: LD_ADDR_VAR 0 3
37369: PUSH
37370: LD_INT 0
37372: ST_TO_ADDR
// end ;
37373: LD_VAR 0 3
37377: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
37378: LD_INT 0
37380: PPUSH
37381: PPUSH
// if not array1 or not array2 then
37382: LD_VAR 0 1
37386: NOT
37387: PUSH
37388: LD_VAR 0 2
37392: NOT
37393: OR
37394: IFFALSE 37398
// exit ;
37396: GO 37462
// result := true ;
37398: LD_ADDR_VAR 0 3
37402: PUSH
37403: LD_INT 1
37405: ST_TO_ADDR
// for i = 1 to array1 do
37406: LD_ADDR_VAR 0 4
37410: PUSH
37411: DOUBLE
37412: LD_INT 1
37414: DEC
37415: ST_TO_ADDR
37416: LD_VAR 0 1
37420: PUSH
37421: FOR_TO
37422: IFFALSE 37460
// if array1 [ i ] <> array2 [ i ] then
37424: LD_VAR 0 1
37428: PUSH
37429: LD_VAR 0 4
37433: ARRAY
37434: PUSH
37435: LD_VAR 0 2
37439: PUSH
37440: LD_VAR 0 4
37444: ARRAY
37445: NONEQUAL
37446: IFFALSE 37458
// begin result := false ;
37448: LD_ADDR_VAR 0 3
37452: PUSH
37453: LD_INT 0
37455: ST_TO_ADDR
// break ;
37456: GO 37460
// end ;
37458: GO 37421
37460: POP
37461: POP
// end ;
37462: LD_VAR 0 3
37466: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
37467: LD_INT 0
37469: PPUSH
37470: PPUSH
37471: PPUSH
// pom := GetBase ( fac ) ;
37472: LD_ADDR_VAR 0 5
37476: PUSH
37477: LD_VAR 0 1
37481: PPUSH
37482: CALL_OW 274
37486: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
37487: LD_ADDR_VAR 0 4
37491: PUSH
37492: LD_VAR 0 2
37496: PUSH
37497: LD_INT 1
37499: ARRAY
37500: PPUSH
37501: LD_VAR 0 2
37505: PUSH
37506: LD_INT 2
37508: ARRAY
37509: PPUSH
37510: LD_VAR 0 2
37514: PUSH
37515: LD_INT 3
37517: ARRAY
37518: PPUSH
37519: LD_VAR 0 2
37523: PUSH
37524: LD_INT 4
37526: ARRAY
37527: PPUSH
37528: CALL_OW 449
37532: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37533: LD_ADDR_VAR 0 3
37537: PUSH
37538: LD_VAR 0 5
37542: PPUSH
37543: LD_INT 1
37545: PPUSH
37546: CALL_OW 275
37550: PUSH
37551: LD_VAR 0 4
37555: PUSH
37556: LD_INT 1
37558: ARRAY
37559: GREATEREQUAL
37560: PUSH
37561: LD_VAR 0 5
37565: PPUSH
37566: LD_INT 2
37568: PPUSH
37569: CALL_OW 275
37573: PUSH
37574: LD_VAR 0 4
37578: PUSH
37579: LD_INT 2
37581: ARRAY
37582: GREATEREQUAL
37583: AND
37584: PUSH
37585: LD_VAR 0 5
37589: PPUSH
37590: LD_INT 3
37592: PPUSH
37593: CALL_OW 275
37597: PUSH
37598: LD_VAR 0 4
37602: PUSH
37603: LD_INT 3
37605: ARRAY
37606: GREATEREQUAL
37607: AND
37608: ST_TO_ADDR
// end ;
37609: LD_VAR 0 3
37613: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
37614: LD_INT 0
37616: PPUSH
37617: PPUSH
37618: PPUSH
37619: PPUSH
// pom := GetBase ( building ) ;
37620: LD_ADDR_VAR 0 3
37624: PUSH
37625: LD_VAR 0 1
37629: PPUSH
37630: CALL_OW 274
37634: ST_TO_ADDR
// if not pom then
37635: LD_VAR 0 3
37639: NOT
37640: IFFALSE 37644
// exit ;
37642: GO 37814
// btype := GetBType ( building ) ;
37644: LD_ADDR_VAR 0 5
37648: PUSH
37649: LD_VAR 0 1
37653: PPUSH
37654: CALL_OW 266
37658: ST_TO_ADDR
// if btype = b_armoury then
37659: LD_VAR 0 5
37663: PUSH
37664: LD_INT 4
37666: EQUAL
37667: IFFALSE 37677
// btype := b_barracks ;
37669: LD_ADDR_VAR 0 5
37673: PUSH
37674: LD_INT 5
37676: ST_TO_ADDR
// if btype = b_depot then
37677: LD_VAR 0 5
37681: PUSH
37682: LD_INT 0
37684: EQUAL
37685: IFFALSE 37695
// btype := b_warehouse ;
37687: LD_ADDR_VAR 0 5
37691: PUSH
37692: LD_INT 1
37694: ST_TO_ADDR
// if btype = b_workshop then
37695: LD_VAR 0 5
37699: PUSH
37700: LD_INT 2
37702: EQUAL
37703: IFFALSE 37713
// btype := b_factory ;
37705: LD_ADDR_VAR 0 5
37709: PUSH
37710: LD_INT 3
37712: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37713: LD_ADDR_VAR 0 4
37717: PUSH
37718: LD_VAR 0 5
37722: PPUSH
37723: LD_VAR 0 1
37727: PPUSH
37728: CALL_OW 248
37732: PPUSH
37733: CALL_OW 450
37737: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37738: LD_ADDR_VAR 0 2
37742: PUSH
37743: LD_VAR 0 3
37747: PPUSH
37748: LD_INT 1
37750: PPUSH
37751: CALL_OW 275
37755: PUSH
37756: LD_VAR 0 4
37760: PUSH
37761: LD_INT 1
37763: ARRAY
37764: GREATEREQUAL
37765: PUSH
37766: LD_VAR 0 3
37770: PPUSH
37771: LD_INT 2
37773: PPUSH
37774: CALL_OW 275
37778: PUSH
37779: LD_VAR 0 4
37783: PUSH
37784: LD_INT 2
37786: ARRAY
37787: GREATEREQUAL
37788: AND
37789: PUSH
37790: LD_VAR 0 3
37794: PPUSH
37795: LD_INT 3
37797: PPUSH
37798: CALL_OW 275
37802: PUSH
37803: LD_VAR 0 4
37807: PUSH
37808: LD_INT 3
37810: ARRAY
37811: GREATEREQUAL
37812: AND
37813: ST_TO_ADDR
// end ;
37814: LD_VAR 0 2
37818: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
37819: LD_INT 0
37821: PPUSH
37822: PPUSH
37823: PPUSH
// pom := GetBase ( building ) ;
37824: LD_ADDR_VAR 0 4
37828: PUSH
37829: LD_VAR 0 1
37833: PPUSH
37834: CALL_OW 274
37838: ST_TO_ADDR
// if not pom then
37839: LD_VAR 0 4
37843: NOT
37844: IFFALSE 37848
// exit ;
37846: GO 37949
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37848: LD_ADDR_VAR 0 5
37852: PUSH
37853: LD_VAR 0 2
37857: PPUSH
37858: LD_VAR 0 1
37862: PPUSH
37863: CALL_OW 248
37867: PPUSH
37868: CALL_OW 450
37872: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37873: LD_ADDR_VAR 0 3
37877: PUSH
37878: LD_VAR 0 4
37882: PPUSH
37883: LD_INT 1
37885: PPUSH
37886: CALL_OW 275
37890: PUSH
37891: LD_VAR 0 5
37895: PUSH
37896: LD_INT 1
37898: ARRAY
37899: GREATEREQUAL
37900: PUSH
37901: LD_VAR 0 4
37905: PPUSH
37906: LD_INT 2
37908: PPUSH
37909: CALL_OW 275
37913: PUSH
37914: LD_VAR 0 5
37918: PUSH
37919: LD_INT 2
37921: ARRAY
37922: GREATEREQUAL
37923: AND
37924: PUSH
37925: LD_VAR 0 4
37929: PPUSH
37930: LD_INT 3
37932: PPUSH
37933: CALL_OW 275
37937: PUSH
37938: LD_VAR 0 5
37942: PUSH
37943: LD_INT 3
37945: ARRAY
37946: GREATEREQUAL
37947: AND
37948: ST_TO_ADDR
// end ;
37949: LD_VAR 0 3
37953: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
37954: LD_INT 0
37956: PPUSH
37957: PPUSH
37958: PPUSH
37959: PPUSH
37960: PPUSH
37961: PPUSH
37962: PPUSH
37963: PPUSH
37964: PPUSH
37965: PPUSH
37966: PPUSH
// result := false ;
37967: LD_ADDR_VAR 0 8
37971: PUSH
37972: LD_INT 0
37974: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
37975: LD_VAR 0 5
37979: NOT
37980: PUSH
37981: LD_VAR 0 1
37985: NOT
37986: OR
37987: PUSH
37988: LD_VAR 0 2
37992: NOT
37993: OR
37994: PUSH
37995: LD_VAR 0 3
37999: NOT
38000: OR
38001: IFFALSE 38005
// exit ;
38003: GO 38819
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
38005: LD_ADDR_VAR 0 14
38009: PUSH
38010: LD_VAR 0 1
38014: PPUSH
38015: LD_VAR 0 2
38019: PPUSH
38020: LD_VAR 0 3
38024: PPUSH
38025: LD_VAR 0 4
38029: PPUSH
38030: LD_VAR 0 5
38034: PUSH
38035: LD_INT 1
38037: ARRAY
38038: PPUSH
38039: CALL_OW 248
38043: PPUSH
38044: LD_INT 0
38046: PPUSH
38047: CALL 40052 0 6
38051: ST_TO_ADDR
// if not hexes then
38052: LD_VAR 0 14
38056: NOT
38057: IFFALSE 38061
// exit ;
38059: GO 38819
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
38061: LD_ADDR_VAR 0 17
38065: PUSH
38066: LD_VAR 0 5
38070: PPUSH
38071: LD_INT 22
38073: PUSH
38074: LD_VAR 0 13
38078: PPUSH
38079: CALL_OW 255
38083: PUSH
38084: EMPTY
38085: LIST
38086: LIST
38087: PUSH
38088: LD_INT 2
38090: PUSH
38091: LD_INT 30
38093: PUSH
38094: LD_INT 0
38096: PUSH
38097: EMPTY
38098: LIST
38099: LIST
38100: PUSH
38101: LD_INT 30
38103: PUSH
38104: LD_INT 1
38106: PUSH
38107: EMPTY
38108: LIST
38109: LIST
38110: PUSH
38111: EMPTY
38112: LIST
38113: LIST
38114: LIST
38115: PUSH
38116: EMPTY
38117: LIST
38118: LIST
38119: PPUSH
38120: CALL_OW 72
38124: ST_TO_ADDR
// for i = 1 to hexes do
38125: LD_ADDR_VAR 0 9
38129: PUSH
38130: DOUBLE
38131: LD_INT 1
38133: DEC
38134: ST_TO_ADDR
38135: LD_VAR 0 14
38139: PUSH
38140: FOR_TO
38141: IFFALSE 38817
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38143: LD_ADDR_VAR 0 13
38147: PUSH
38148: LD_VAR 0 14
38152: PUSH
38153: LD_VAR 0 9
38157: ARRAY
38158: PUSH
38159: LD_INT 1
38161: ARRAY
38162: PPUSH
38163: LD_VAR 0 14
38167: PUSH
38168: LD_VAR 0 9
38172: ARRAY
38173: PUSH
38174: LD_INT 2
38176: ARRAY
38177: PPUSH
38178: CALL_OW 428
38182: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
38183: LD_VAR 0 14
38187: PUSH
38188: LD_VAR 0 9
38192: ARRAY
38193: PUSH
38194: LD_INT 1
38196: ARRAY
38197: PPUSH
38198: LD_VAR 0 14
38202: PUSH
38203: LD_VAR 0 9
38207: ARRAY
38208: PUSH
38209: LD_INT 2
38211: ARRAY
38212: PPUSH
38213: CALL_OW 351
38217: PUSH
38218: LD_VAR 0 14
38222: PUSH
38223: LD_VAR 0 9
38227: ARRAY
38228: PUSH
38229: LD_INT 1
38231: ARRAY
38232: PPUSH
38233: LD_VAR 0 14
38237: PUSH
38238: LD_VAR 0 9
38242: ARRAY
38243: PUSH
38244: LD_INT 2
38246: ARRAY
38247: PPUSH
38248: CALL_OW 488
38252: NOT
38253: OR
38254: PUSH
38255: LD_VAR 0 13
38259: PPUSH
38260: CALL_OW 247
38264: PUSH
38265: LD_INT 3
38267: EQUAL
38268: OR
38269: IFFALSE 38275
// exit ;
38271: POP
38272: POP
38273: GO 38819
// if not tmp then
38275: LD_VAR 0 13
38279: NOT
38280: IFFALSE 38284
// continue ;
38282: GO 38140
// result := true ;
38284: LD_ADDR_VAR 0 8
38288: PUSH
38289: LD_INT 1
38291: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
38292: LD_VAR 0 6
38296: PUSH
38297: LD_VAR 0 13
38301: PPUSH
38302: CALL_OW 247
38306: PUSH
38307: LD_INT 2
38309: EQUAL
38310: AND
38311: PUSH
38312: LD_VAR 0 13
38316: PPUSH
38317: CALL_OW 263
38321: PUSH
38322: LD_INT 1
38324: EQUAL
38325: AND
38326: IFFALSE 38490
// begin if IsDrivenBy ( tmp ) then
38328: LD_VAR 0 13
38332: PPUSH
38333: CALL_OW 311
38337: IFFALSE 38341
// continue ;
38339: GO 38140
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
38341: LD_VAR 0 6
38345: PPUSH
38346: LD_INT 3
38348: PUSH
38349: LD_INT 60
38351: PUSH
38352: EMPTY
38353: LIST
38354: PUSH
38355: EMPTY
38356: LIST
38357: LIST
38358: PUSH
38359: LD_INT 3
38361: PUSH
38362: LD_INT 55
38364: PUSH
38365: EMPTY
38366: LIST
38367: PUSH
38368: EMPTY
38369: LIST
38370: LIST
38371: PUSH
38372: EMPTY
38373: LIST
38374: LIST
38375: PPUSH
38376: CALL_OW 72
38380: IFFALSE 38488
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
38382: LD_ADDR_VAR 0 18
38386: PUSH
38387: LD_VAR 0 6
38391: PPUSH
38392: LD_INT 3
38394: PUSH
38395: LD_INT 60
38397: PUSH
38398: EMPTY
38399: LIST
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: PUSH
38405: LD_INT 3
38407: PUSH
38408: LD_INT 55
38410: PUSH
38411: EMPTY
38412: LIST
38413: PUSH
38414: EMPTY
38415: LIST
38416: LIST
38417: PUSH
38418: EMPTY
38419: LIST
38420: LIST
38421: PPUSH
38422: CALL_OW 72
38426: PUSH
38427: LD_INT 1
38429: ARRAY
38430: ST_TO_ADDR
// if IsInUnit ( driver ) then
38431: LD_VAR 0 18
38435: PPUSH
38436: CALL_OW 310
38440: IFFALSE 38451
// ComExit ( driver ) ;
38442: LD_VAR 0 18
38446: PPUSH
38447: CALL 63832 0 1
// AddComEnterUnit ( driver , tmp ) ;
38451: LD_VAR 0 18
38455: PPUSH
38456: LD_VAR 0 13
38460: PPUSH
38461: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
38465: LD_VAR 0 18
38469: PPUSH
38470: LD_VAR 0 7
38474: PPUSH
38475: CALL_OW 173
// AddComExitVehicle ( driver ) ;
38479: LD_VAR 0 18
38483: PPUSH
38484: CALL_OW 181
// end ; continue ;
38488: GO 38140
// end ; if not cleaners or not tmp in cleaners then
38490: LD_VAR 0 6
38494: NOT
38495: PUSH
38496: LD_VAR 0 13
38500: PUSH
38501: LD_VAR 0 6
38505: IN
38506: NOT
38507: OR
38508: IFFALSE 38815
// begin if dep then
38510: LD_VAR 0 17
38514: IFFALSE 38650
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
38516: LD_ADDR_VAR 0 16
38520: PUSH
38521: LD_VAR 0 17
38525: PUSH
38526: LD_INT 1
38528: ARRAY
38529: PPUSH
38530: CALL_OW 250
38534: PPUSH
38535: LD_VAR 0 17
38539: PUSH
38540: LD_INT 1
38542: ARRAY
38543: PPUSH
38544: CALL_OW 254
38548: PPUSH
38549: LD_INT 5
38551: PPUSH
38552: CALL_OW 272
38556: PUSH
38557: LD_VAR 0 17
38561: PUSH
38562: LD_INT 1
38564: ARRAY
38565: PPUSH
38566: CALL_OW 251
38570: PPUSH
38571: LD_VAR 0 17
38575: PUSH
38576: LD_INT 1
38578: ARRAY
38579: PPUSH
38580: CALL_OW 254
38584: PPUSH
38585: LD_INT 5
38587: PPUSH
38588: CALL_OW 273
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
38597: LD_VAR 0 16
38601: PUSH
38602: LD_INT 1
38604: ARRAY
38605: PPUSH
38606: LD_VAR 0 16
38610: PUSH
38611: LD_INT 2
38613: ARRAY
38614: PPUSH
38615: CALL_OW 488
38619: IFFALSE 38650
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
38621: LD_VAR 0 13
38625: PPUSH
38626: LD_VAR 0 16
38630: PUSH
38631: LD_INT 1
38633: ARRAY
38634: PPUSH
38635: LD_VAR 0 16
38639: PUSH
38640: LD_INT 2
38642: ARRAY
38643: PPUSH
38644: CALL_OW 111
// continue ;
38648: GO 38140
// end ; end ; r := GetDir ( tmp ) ;
38650: LD_ADDR_VAR 0 15
38654: PUSH
38655: LD_VAR 0 13
38659: PPUSH
38660: CALL_OW 254
38664: ST_TO_ADDR
// if r = 5 then
38665: LD_VAR 0 15
38669: PUSH
38670: LD_INT 5
38672: EQUAL
38673: IFFALSE 38683
// r := 0 ;
38675: LD_ADDR_VAR 0 15
38679: PUSH
38680: LD_INT 0
38682: ST_TO_ADDR
// for j = r to 5 do
38683: LD_ADDR_VAR 0 10
38687: PUSH
38688: DOUBLE
38689: LD_VAR 0 15
38693: DEC
38694: ST_TO_ADDR
38695: LD_INT 5
38697: PUSH
38698: FOR_TO
38699: IFFALSE 38813
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
38701: LD_ADDR_VAR 0 11
38705: PUSH
38706: LD_VAR 0 13
38710: PPUSH
38711: CALL_OW 250
38715: PPUSH
38716: LD_VAR 0 10
38720: PPUSH
38721: LD_INT 2
38723: PPUSH
38724: CALL_OW 272
38728: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
38729: LD_ADDR_VAR 0 12
38733: PUSH
38734: LD_VAR 0 13
38738: PPUSH
38739: CALL_OW 251
38743: PPUSH
38744: LD_VAR 0 10
38748: PPUSH
38749: LD_INT 2
38751: PPUSH
38752: CALL_OW 273
38756: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
38757: LD_VAR 0 11
38761: PPUSH
38762: LD_VAR 0 12
38766: PPUSH
38767: CALL_OW 488
38771: PUSH
38772: LD_VAR 0 11
38776: PPUSH
38777: LD_VAR 0 12
38781: PPUSH
38782: CALL_OW 428
38786: NOT
38787: AND
38788: IFFALSE 38811
// begin ComMoveXY ( tmp , _x , _y ) ;
38790: LD_VAR 0 13
38794: PPUSH
38795: LD_VAR 0 11
38799: PPUSH
38800: LD_VAR 0 12
38804: PPUSH
38805: CALL_OW 111
// break ;
38809: GO 38813
// end ; end ;
38811: GO 38698
38813: POP
38814: POP
// end ; end ;
38815: GO 38140
38817: POP
38818: POP
// end ;
38819: LD_VAR 0 8
38823: RET
// export function BuildingTechInvented ( side , btype ) ; begin
38824: LD_INT 0
38826: PPUSH
// result := true ;
38827: LD_ADDR_VAR 0 3
38831: PUSH
38832: LD_INT 1
38834: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
38835: LD_VAR 0 2
38839: PUSH
38840: LD_INT 24
38842: DOUBLE
38843: EQUAL
38844: IFTRUE 38854
38846: LD_INT 33
38848: DOUBLE
38849: EQUAL
38850: IFTRUE 38854
38852: GO 38879
38854: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
38855: LD_ADDR_VAR 0 3
38859: PUSH
38860: LD_INT 32
38862: PPUSH
38863: LD_VAR 0 1
38867: PPUSH
38868: CALL_OW 321
38872: PUSH
38873: LD_INT 2
38875: EQUAL
38876: ST_TO_ADDR
38877: GO 39195
38879: LD_INT 20
38881: DOUBLE
38882: EQUAL
38883: IFTRUE 38887
38885: GO 38912
38887: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
38888: LD_ADDR_VAR 0 3
38892: PUSH
38893: LD_INT 6
38895: PPUSH
38896: LD_VAR 0 1
38900: PPUSH
38901: CALL_OW 321
38905: PUSH
38906: LD_INT 2
38908: EQUAL
38909: ST_TO_ADDR
38910: GO 39195
38912: LD_INT 22
38914: DOUBLE
38915: EQUAL
38916: IFTRUE 38926
38918: LD_INT 36
38920: DOUBLE
38921: EQUAL
38922: IFTRUE 38926
38924: GO 38951
38926: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
38927: LD_ADDR_VAR 0 3
38931: PUSH
38932: LD_INT 15
38934: PPUSH
38935: LD_VAR 0 1
38939: PPUSH
38940: CALL_OW 321
38944: PUSH
38945: LD_INT 2
38947: EQUAL
38948: ST_TO_ADDR
38949: GO 39195
38951: LD_INT 30
38953: DOUBLE
38954: EQUAL
38955: IFTRUE 38959
38957: GO 38984
38959: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
38960: LD_ADDR_VAR 0 3
38964: PUSH
38965: LD_INT 20
38967: PPUSH
38968: LD_VAR 0 1
38972: PPUSH
38973: CALL_OW 321
38977: PUSH
38978: LD_INT 2
38980: EQUAL
38981: ST_TO_ADDR
38982: GO 39195
38984: LD_INT 28
38986: DOUBLE
38987: EQUAL
38988: IFTRUE 38998
38990: LD_INT 21
38992: DOUBLE
38993: EQUAL
38994: IFTRUE 38998
38996: GO 39023
38998: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
38999: LD_ADDR_VAR 0 3
39003: PUSH
39004: LD_INT 21
39006: PPUSH
39007: LD_VAR 0 1
39011: PPUSH
39012: CALL_OW 321
39016: PUSH
39017: LD_INT 2
39019: EQUAL
39020: ST_TO_ADDR
39021: GO 39195
39023: LD_INT 16
39025: DOUBLE
39026: EQUAL
39027: IFTRUE 39031
39029: GO 39056
39031: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
39032: LD_ADDR_VAR 0 3
39036: PUSH
39037: LD_INT 84
39039: PPUSH
39040: LD_VAR 0 1
39044: PPUSH
39045: CALL_OW 321
39049: PUSH
39050: LD_INT 2
39052: EQUAL
39053: ST_TO_ADDR
39054: GO 39195
39056: LD_INT 19
39058: DOUBLE
39059: EQUAL
39060: IFTRUE 39070
39062: LD_INT 23
39064: DOUBLE
39065: EQUAL
39066: IFTRUE 39070
39068: GO 39095
39070: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
39071: LD_ADDR_VAR 0 3
39075: PUSH
39076: LD_INT 83
39078: PPUSH
39079: LD_VAR 0 1
39083: PPUSH
39084: CALL_OW 321
39088: PUSH
39089: LD_INT 2
39091: EQUAL
39092: ST_TO_ADDR
39093: GO 39195
39095: LD_INT 17
39097: DOUBLE
39098: EQUAL
39099: IFTRUE 39103
39101: GO 39128
39103: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
39104: LD_ADDR_VAR 0 3
39108: PUSH
39109: LD_INT 39
39111: PPUSH
39112: LD_VAR 0 1
39116: PPUSH
39117: CALL_OW 321
39121: PUSH
39122: LD_INT 2
39124: EQUAL
39125: ST_TO_ADDR
39126: GO 39195
39128: LD_INT 18
39130: DOUBLE
39131: EQUAL
39132: IFTRUE 39136
39134: GO 39161
39136: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
39137: LD_ADDR_VAR 0 3
39141: PUSH
39142: LD_INT 40
39144: PPUSH
39145: LD_VAR 0 1
39149: PPUSH
39150: CALL_OW 321
39154: PUSH
39155: LD_INT 2
39157: EQUAL
39158: ST_TO_ADDR
39159: GO 39195
39161: LD_INT 27
39163: DOUBLE
39164: EQUAL
39165: IFTRUE 39169
39167: GO 39194
39169: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
39170: LD_ADDR_VAR 0 3
39174: PUSH
39175: LD_INT 35
39177: PPUSH
39178: LD_VAR 0 1
39182: PPUSH
39183: CALL_OW 321
39187: PUSH
39188: LD_INT 2
39190: EQUAL
39191: ST_TO_ADDR
39192: GO 39195
39194: POP
// end ;
39195: LD_VAR 0 3
39199: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
39200: LD_INT 0
39202: PPUSH
39203: PPUSH
39204: PPUSH
39205: PPUSH
39206: PPUSH
39207: PPUSH
39208: PPUSH
39209: PPUSH
39210: PPUSH
39211: PPUSH
39212: PPUSH
// result := false ;
39213: LD_ADDR_VAR 0 6
39217: PUSH
39218: LD_INT 0
39220: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
39221: LD_VAR 0 1
39225: NOT
39226: PUSH
39227: LD_VAR 0 1
39231: PPUSH
39232: CALL_OW 266
39236: PUSH
39237: LD_INT 0
39239: PUSH
39240: LD_INT 1
39242: PUSH
39243: EMPTY
39244: LIST
39245: LIST
39246: IN
39247: NOT
39248: OR
39249: PUSH
39250: LD_VAR 0 2
39254: NOT
39255: OR
39256: PUSH
39257: LD_VAR 0 5
39261: PUSH
39262: LD_INT 0
39264: PUSH
39265: LD_INT 1
39267: PUSH
39268: LD_INT 2
39270: PUSH
39271: LD_INT 3
39273: PUSH
39274: LD_INT 4
39276: PUSH
39277: LD_INT 5
39279: PUSH
39280: EMPTY
39281: LIST
39282: LIST
39283: LIST
39284: LIST
39285: LIST
39286: LIST
39287: IN
39288: NOT
39289: OR
39290: PUSH
39291: LD_VAR 0 3
39295: PPUSH
39296: LD_VAR 0 4
39300: PPUSH
39301: CALL_OW 488
39305: NOT
39306: OR
39307: IFFALSE 39311
// exit ;
39309: GO 40047
// side := GetSide ( depot ) ;
39311: LD_ADDR_VAR 0 9
39315: PUSH
39316: LD_VAR 0 1
39320: PPUSH
39321: CALL_OW 255
39325: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
39326: LD_VAR 0 9
39330: PPUSH
39331: LD_VAR 0 2
39335: PPUSH
39336: CALL 38824 0 2
39340: NOT
39341: IFFALSE 39345
// exit ;
39343: GO 40047
// pom := GetBase ( depot ) ;
39345: LD_ADDR_VAR 0 10
39349: PUSH
39350: LD_VAR 0 1
39354: PPUSH
39355: CALL_OW 274
39359: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
39360: LD_ADDR_VAR 0 11
39364: PUSH
39365: LD_VAR 0 2
39369: PPUSH
39370: LD_VAR 0 1
39374: PPUSH
39375: CALL_OW 248
39379: PPUSH
39380: CALL_OW 450
39384: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
39385: LD_VAR 0 10
39389: PPUSH
39390: LD_INT 1
39392: PPUSH
39393: CALL_OW 275
39397: PUSH
39398: LD_VAR 0 11
39402: PUSH
39403: LD_INT 1
39405: ARRAY
39406: GREATEREQUAL
39407: PUSH
39408: LD_VAR 0 10
39412: PPUSH
39413: LD_INT 2
39415: PPUSH
39416: CALL_OW 275
39420: PUSH
39421: LD_VAR 0 11
39425: PUSH
39426: LD_INT 2
39428: ARRAY
39429: GREATEREQUAL
39430: AND
39431: PUSH
39432: LD_VAR 0 10
39436: PPUSH
39437: LD_INT 3
39439: PPUSH
39440: CALL_OW 275
39444: PUSH
39445: LD_VAR 0 11
39449: PUSH
39450: LD_INT 3
39452: ARRAY
39453: GREATEREQUAL
39454: AND
39455: NOT
39456: IFFALSE 39460
// exit ;
39458: GO 40047
// if GetBType ( depot ) = b_depot then
39460: LD_VAR 0 1
39464: PPUSH
39465: CALL_OW 266
39469: PUSH
39470: LD_INT 0
39472: EQUAL
39473: IFFALSE 39485
// dist := 28 else
39475: LD_ADDR_VAR 0 14
39479: PUSH
39480: LD_INT 28
39482: ST_TO_ADDR
39483: GO 39493
// dist := 36 ;
39485: LD_ADDR_VAR 0 14
39489: PUSH
39490: LD_INT 36
39492: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
39493: LD_VAR 0 1
39497: PPUSH
39498: LD_VAR 0 3
39502: PPUSH
39503: LD_VAR 0 4
39507: PPUSH
39508: CALL_OW 297
39512: PUSH
39513: LD_VAR 0 14
39517: GREATER
39518: IFFALSE 39522
// exit ;
39520: GO 40047
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
39522: LD_ADDR_VAR 0 12
39526: PUSH
39527: LD_VAR 0 2
39531: PPUSH
39532: LD_VAR 0 3
39536: PPUSH
39537: LD_VAR 0 4
39541: PPUSH
39542: LD_VAR 0 5
39546: PPUSH
39547: LD_VAR 0 1
39551: PPUSH
39552: CALL_OW 248
39556: PPUSH
39557: LD_INT 0
39559: PPUSH
39560: CALL 40052 0 6
39564: ST_TO_ADDR
// if not hexes then
39565: LD_VAR 0 12
39569: NOT
39570: IFFALSE 39574
// exit ;
39572: GO 40047
// hex := GetHexInfo ( x , y ) ;
39574: LD_ADDR_VAR 0 15
39578: PUSH
39579: LD_VAR 0 3
39583: PPUSH
39584: LD_VAR 0 4
39588: PPUSH
39589: CALL_OW 546
39593: ST_TO_ADDR
// if hex [ 1 ] then
39594: LD_VAR 0 15
39598: PUSH
39599: LD_INT 1
39601: ARRAY
39602: IFFALSE 39606
// exit ;
39604: GO 40047
// height := hex [ 2 ] ;
39606: LD_ADDR_VAR 0 13
39610: PUSH
39611: LD_VAR 0 15
39615: PUSH
39616: LD_INT 2
39618: ARRAY
39619: ST_TO_ADDR
// for i = 1 to hexes do
39620: LD_ADDR_VAR 0 7
39624: PUSH
39625: DOUBLE
39626: LD_INT 1
39628: DEC
39629: ST_TO_ADDR
39630: LD_VAR 0 12
39634: PUSH
39635: FOR_TO
39636: IFFALSE 39966
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
39638: LD_VAR 0 12
39642: PUSH
39643: LD_VAR 0 7
39647: ARRAY
39648: PUSH
39649: LD_INT 1
39651: ARRAY
39652: PPUSH
39653: LD_VAR 0 12
39657: PUSH
39658: LD_VAR 0 7
39662: ARRAY
39663: PUSH
39664: LD_INT 2
39666: ARRAY
39667: PPUSH
39668: CALL_OW 488
39672: NOT
39673: PUSH
39674: LD_VAR 0 12
39678: PUSH
39679: LD_VAR 0 7
39683: ARRAY
39684: PUSH
39685: LD_INT 1
39687: ARRAY
39688: PPUSH
39689: LD_VAR 0 12
39693: PUSH
39694: LD_VAR 0 7
39698: ARRAY
39699: PUSH
39700: LD_INT 2
39702: ARRAY
39703: PPUSH
39704: CALL_OW 428
39708: PUSH
39709: LD_INT 0
39711: GREATER
39712: OR
39713: PUSH
39714: LD_VAR 0 12
39718: PUSH
39719: LD_VAR 0 7
39723: ARRAY
39724: PUSH
39725: LD_INT 1
39727: ARRAY
39728: PPUSH
39729: LD_VAR 0 12
39733: PUSH
39734: LD_VAR 0 7
39738: ARRAY
39739: PUSH
39740: LD_INT 2
39742: ARRAY
39743: PPUSH
39744: CALL_OW 351
39748: OR
39749: IFFALSE 39755
// exit ;
39751: POP
39752: POP
39753: GO 40047
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39755: LD_ADDR_VAR 0 8
39759: PUSH
39760: LD_VAR 0 12
39764: PUSH
39765: LD_VAR 0 7
39769: ARRAY
39770: PUSH
39771: LD_INT 1
39773: ARRAY
39774: PPUSH
39775: LD_VAR 0 12
39779: PUSH
39780: LD_VAR 0 7
39784: ARRAY
39785: PUSH
39786: LD_INT 2
39788: ARRAY
39789: PPUSH
39790: CALL_OW 546
39794: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
39795: LD_VAR 0 8
39799: PUSH
39800: LD_INT 1
39802: ARRAY
39803: PUSH
39804: LD_VAR 0 8
39808: PUSH
39809: LD_INT 2
39811: ARRAY
39812: PUSH
39813: LD_VAR 0 13
39817: PUSH
39818: LD_INT 2
39820: PLUS
39821: GREATER
39822: OR
39823: PUSH
39824: LD_VAR 0 8
39828: PUSH
39829: LD_INT 2
39831: ARRAY
39832: PUSH
39833: LD_VAR 0 13
39837: PUSH
39838: LD_INT 2
39840: MINUS
39841: LESS
39842: OR
39843: PUSH
39844: LD_VAR 0 8
39848: PUSH
39849: LD_INT 3
39851: ARRAY
39852: PUSH
39853: LD_INT 0
39855: PUSH
39856: LD_INT 8
39858: PUSH
39859: LD_INT 9
39861: PUSH
39862: LD_INT 10
39864: PUSH
39865: LD_INT 11
39867: PUSH
39868: LD_INT 12
39870: PUSH
39871: LD_INT 13
39873: PUSH
39874: LD_INT 16
39876: PUSH
39877: LD_INT 17
39879: PUSH
39880: LD_INT 18
39882: PUSH
39883: LD_INT 19
39885: PUSH
39886: LD_INT 20
39888: PUSH
39889: LD_INT 21
39891: PUSH
39892: EMPTY
39893: LIST
39894: LIST
39895: LIST
39896: LIST
39897: LIST
39898: LIST
39899: LIST
39900: LIST
39901: LIST
39902: LIST
39903: LIST
39904: LIST
39905: LIST
39906: IN
39907: NOT
39908: OR
39909: PUSH
39910: LD_VAR 0 8
39914: PUSH
39915: LD_INT 5
39917: ARRAY
39918: NOT
39919: OR
39920: PUSH
39921: LD_VAR 0 8
39925: PUSH
39926: LD_INT 6
39928: ARRAY
39929: PUSH
39930: LD_INT 1
39932: PUSH
39933: LD_INT 2
39935: PUSH
39936: LD_INT 7
39938: PUSH
39939: LD_INT 9
39941: PUSH
39942: LD_INT 10
39944: PUSH
39945: LD_INT 11
39947: PUSH
39948: EMPTY
39949: LIST
39950: LIST
39951: LIST
39952: LIST
39953: LIST
39954: LIST
39955: IN
39956: NOT
39957: OR
39958: IFFALSE 39964
// exit ;
39960: POP
39961: POP
39962: GO 40047
// end ;
39964: GO 39635
39966: POP
39967: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
39968: LD_VAR 0 9
39972: PPUSH
39973: LD_VAR 0 3
39977: PPUSH
39978: LD_VAR 0 4
39982: PPUSH
39983: LD_INT 20
39985: PPUSH
39986: CALL 31999 0 4
39990: PUSH
39991: LD_INT 4
39993: ARRAY
39994: IFFALSE 39998
// exit ;
39996: GO 40047
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
39998: LD_VAR 0 2
40002: PUSH
40003: LD_INT 29
40005: PUSH
40006: LD_INT 30
40008: PUSH
40009: EMPTY
40010: LIST
40011: LIST
40012: IN
40013: PUSH
40014: LD_VAR 0 3
40018: PPUSH
40019: LD_VAR 0 4
40023: PPUSH
40024: LD_VAR 0 9
40028: PPUSH
40029: CALL_OW 440
40033: NOT
40034: AND
40035: IFFALSE 40039
// exit ;
40037: GO 40047
// result := true ;
40039: LD_ADDR_VAR 0 6
40043: PUSH
40044: LD_INT 1
40046: ST_TO_ADDR
// end ;
40047: LD_VAR 0 6
40051: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
40052: LD_INT 0
40054: PPUSH
40055: PPUSH
40056: PPUSH
40057: PPUSH
40058: PPUSH
40059: PPUSH
40060: PPUSH
40061: PPUSH
40062: PPUSH
40063: PPUSH
40064: PPUSH
40065: PPUSH
40066: PPUSH
40067: PPUSH
40068: PPUSH
40069: PPUSH
40070: PPUSH
40071: PPUSH
40072: PPUSH
40073: PPUSH
40074: PPUSH
40075: PPUSH
40076: PPUSH
40077: PPUSH
40078: PPUSH
40079: PPUSH
40080: PPUSH
40081: PPUSH
40082: PPUSH
40083: PPUSH
40084: PPUSH
40085: PPUSH
40086: PPUSH
40087: PPUSH
40088: PPUSH
40089: PPUSH
40090: PPUSH
40091: PPUSH
40092: PPUSH
40093: PPUSH
40094: PPUSH
40095: PPUSH
40096: PPUSH
40097: PPUSH
40098: PPUSH
40099: PPUSH
40100: PPUSH
40101: PPUSH
40102: PPUSH
40103: PPUSH
40104: PPUSH
40105: PPUSH
40106: PPUSH
40107: PPUSH
40108: PPUSH
40109: PPUSH
40110: PPUSH
40111: PPUSH
// result = [ ] ;
40112: LD_ADDR_VAR 0 7
40116: PUSH
40117: EMPTY
40118: ST_TO_ADDR
// temp_list = [ ] ;
40119: LD_ADDR_VAR 0 9
40123: PUSH
40124: EMPTY
40125: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
40126: LD_VAR 0 4
40130: PUSH
40131: LD_INT 0
40133: PUSH
40134: LD_INT 1
40136: PUSH
40137: LD_INT 2
40139: PUSH
40140: LD_INT 3
40142: PUSH
40143: LD_INT 4
40145: PUSH
40146: LD_INT 5
40148: PUSH
40149: EMPTY
40150: LIST
40151: LIST
40152: LIST
40153: LIST
40154: LIST
40155: LIST
40156: IN
40157: NOT
40158: PUSH
40159: LD_VAR 0 1
40163: PUSH
40164: LD_INT 0
40166: PUSH
40167: LD_INT 1
40169: PUSH
40170: EMPTY
40171: LIST
40172: LIST
40173: IN
40174: PUSH
40175: LD_VAR 0 5
40179: PUSH
40180: LD_INT 1
40182: PUSH
40183: LD_INT 2
40185: PUSH
40186: LD_INT 3
40188: PUSH
40189: EMPTY
40190: LIST
40191: LIST
40192: LIST
40193: IN
40194: NOT
40195: AND
40196: OR
40197: IFFALSE 40201
// exit ;
40199: GO 58592
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
40201: LD_VAR 0 1
40205: PUSH
40206: LD_INT 6
40208: PUSH
40209: LD_INT 7
40211: PUSH
40212: LD_INT 8
40214: PUSH
40215: LD_INT 13
40217: PUSH
40218: LD_INT 12
40220: PUSH
40221: LD_INT 15
40223: PUSH
40224: LD_INT 11
40226: PUSH
40227: LD_INT 14
40229: PUSH
40230: LD_INT 10
40232: PUSH
40233: EMPTY
40234: LIST
40235: LIST
40236: LIST
40237: LIST
40238: LIST
40239: LIST
40240: LIST
40241: LIST
40242: LIST
40243: IN
40244: IFFALSE 40254
// btype = b_lab ;
40246: LD_ADDR_VAR 0 1
40250: PUSH
40251: LD_INT 6
40253: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
40254: LD_VAR 0 6
40258: PUSH
40259: LD_INT 0
40261: PUSH
40262: LD_INT 1
40264: PUSH
40265: LD_INT 2
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: LIST
40272: IN
40273: NOT
40274: PUSH
40275: LD_VAR 0 1
40279: PUSH
40280: LD_INT 0
40282: PUSH
40283: LD_INT 1
40285: PUSH
40286: LD_INT 2
40288: PUSH
40289: LD_INT 3
40291: PUSH
40292: LD_INT 6
40294: PUSH
40295: LD_INT 36
40297: PUSH
40298: LD_INT 4
40300: PUSH
40301: LD_INT 5
40303: PUSH
40304: LD_INT 31
40306: PUSH
40307: LD_INT 32
40309: PUSH
40310: LD_INT 33
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: LIST
40317: LIST
40318: LIST
40319: LIST
40320: LIST
40321: LIST
40322: LIST
40323: LIST
40324: LIST
40325: IN
40326: NOT
40327: PUSH
40328: LD_VAR 0 6
40332: PUSH
40333: LD_INT 1
40335: EQUAL
40336: AND
40337: OR
40338: PUSH
40339: LD_VAR 0 1
40343: PUSH
40344: LD_INT 2
40346: PUSH
40347: LD_INT 3
40349: PUSH
40350: EMPTY
40351: LIST
40352: LIST
40353: IN
40354: NOT
40355: PUSH
40356: LD_VAR 0 6
40360: PUSH
40361: LD_INT 2
40363: EQUAL
40364: AND
40365: OR
40366: IFFALSE 40376
// mode = 0 ;
40368: LD_ADDR_VAR 0 6
40372: PUSH
40373: LD_INT 0
40375: ST_TO_ADDR
// case mode of 0 :
40376: LD_VAR 0 6
40380: PUSH
40381: LD_INT 0
40383: DOUBLE
40384: EQUAL
40385: IFTRUE 40389
40387: GO 51842
40389: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40390: LD_ADDR_VAR 0 11
40394: PUSH
40395: LD_INT 0
40397: PUSH
40398: LD_INT 0
40400: PUSH
40401: EMPTY
40402: LIST
40403: LIST
40404: PUSH
40405: LD_INT 0
40407: PUSH
40408: LD_INT 1
40410: NEG
40411: PUSH
40412: EMPTY
40413: LIST
40414: LIST
40415: PUSH
40416: LD_INT 1
40418: PUSH
40419: LD_INT 0
40421: PUSH
40422: EMPTY
40423: LIST
40424: LIST
40425: PUSH
40426: LD_INT 1
40428: PUSH
40429: LD_INT 1
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: PUSH
40436: LD_INT 0
40438: PUSH
40439: LD_INT 1
40441: PUSH
40442: EMPTY
40443: LIST
40444: LIST
40445: PUSH
40446: LD_INT 1
40448: NEG
40449: PUSH
40450: LD_INT 0
40452: PUSH
40453: EMPTY
40454: LIST
40455: LIST
40456: PUSH
40457: LD_INT 1
40459: NEG
40460: PUSH
40461: LD_INT 1
40463: NEG
40464: PUSH
40465: EMPTY
40466: LIST
40467: LIST
40468: PUSH
40469: LD_INT 1
40471: NEG
40472: PUSH
40473: LD_INT 2
40475: NEG
40476: PUSH
40477: EMPTY
40478: LIST
40479: LIST
40480: PUSH
40481: LD_INT 0
40483: PUSH
40484: LD_INT 2
40486: NEG
40487: PUSH
40488: EMPTY
40489: LIST
40490: LIST
40491: PUSH
40492: LD_INT 1
40494: PUSH
40495: LD_INT 1
40497: NEG
40498: PUSH
40499: EMPTY
40500: LIST
40501: LIST
40502: PUSH
40503: LD_INT 1
40505: PUSH
40506: LD_INT 2
40508: PUSH
40509: EMPTY
40510: LIST
40511: LIST
40512: PUSH
40513: LD_INT 0
40515: PUSH
40516: LD_INT 2
40518: PUSH
40519: EMPTY
40520: LIST
40521: LIST
40522: PUSH
40523: LD_INT 1
40525: NEG
40526: PUSH
40527: LD_INT 1
40529: PUSH
40530: EMPTY
40531: LIST
40532: LIST
40533: PUSH
40534: LD_INT 1
40536: PUSH
40537: LD_INT 3
40539: PUSH
40540: EMPTY
40541: LIST
40542: LIST
40543: PUSH
40544: LD_INT 0
40546: PUSH
40547: LD_INT 3
40549: PUSH
40550: EMPTY
40551: LIST
40552: LIST
40553: PUSH
40554: LD_INT 1
40556: NEG
40557: PUSH
40558: LD_INT 2
40560: PUSH
40561: EMPTY
40562: LIST
40563: LIST
40564: PUSH
40565: EMPTY
40566: LIST
40567: LIST
40568: LIST
40569: LIST
40570: LIST
40571: LIST
40572: LIST
40573: LIST
40574: LIST
40575: LIST
40576: LIST
40577: LIST
40578: LIST
40579: LIST
40580: LIST
40581: LIST
40582: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40583: LD_ADDR_VAR 0 12
40587: PUSH
40588: LD_INT 0
40590: PUSH
40591: LD_INT 0
40593: PUSH
40594: EMPTY
40595: LIST
40596: LIST
40597: PUSH
40598: LD_INT 0
40600: PUSH
40601: LD_INT 1
40603: NEG
40604: PUSH
40605: EMPTY
40606: LIST
40607: LIST
40608: PUSH
40609: LD_INT 1
40611: PUSH
40612: LD_INT 0
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: PUSH
40619: LD_INT 1
40621: PUSH
40622: LD_INT 1
40624: PUSH
40625: EMPTY
40626: LIST
40627: LIST
40628: PUSH
40629: LD_INT 0
40631: PUSH
40632: LD_INT 1
40634: PUSH
40635: EMPTY
40636: LIST
40637: LIST
40638: PUSH
40639: LD_INT 1
40641: NEG
40642: PUSH
40643: LD_INT 0
40645: PUSH
40646: EMPTY
40647: LIST
40648: LIST
40649: PUSH
40650: LD_INT 1
40652: NEG
40653: PUSH
40654: LD_INT 1
40656: NEG
40657: PUSH
40658: EMPTY
40659: LIST
40660: LIST
40661: PUSH
40662: LD_INT 1
40664: PUSH
40665: LD_INT 1
40667: NEG
40668: PUSH
40669: EMPTY
40670: LIST
40671: LIST
40672: PUSH
40673: LD_INT 2
40675: PUSH
40676: LD_INT 0
40678: PUSH
40679: EMPTY
40680: LIST
40681: LIST
40682: PUSH
40683: LD_INT 2
40685: PUSH
40686: LD_INT 1
40688: PUSH
40689: EMPTY
40690: LIST
40691: LIST
40692: PUSH
40693: LD_INT 1
40695: NEG
40696: PUSH
40697: LD_INT 1
40699: PUSH
40700: EMPTY
40701: LIST
40702: LIST
40703: PUSH
40704: LD_INT 2
40706: NEG
40707: PUSH
40708: LD_INT 0
40710: PUSH
40711: EMPTY
40712: LIST
40713: LIST
40714: PUSH
40715: LD_INT 2
40717: NEG
40718: PUSH
40719: LD_INT 1
40721: NEG
40722: PUSH
40723: EMPTY
40724: LIST
40725: LIST
40726: PUSH
40727: LD_INT 2
40729: NEG
40730: PUSH
40731: LD_INT 1
40733: PUSH
40734: EMPTY
40735: LIST
40736: LIST
40737: PUSH
40738: LD_INT 3
40740: NEG
40741: PUSH
40742: LD_INT 0
40744: PUSH
40745: EMPTY
40746: LIST
40747: LIST
40748: PUSH
40749: LD_INT 3
40751: NEG
40752: PUSH
40753: LD_INT 1
40755: NEG
40756: PUSH
40757: EMPTY
40758: LIST
40759: LIST
40760: PUSH
40761: EMPTY
40762: LIST
40763: LIST
40764: LIST
40765: LIST
40766: LIST
40767: LIST
40768: LIST
40769: LIST
40770: LIST
40771: LIST
40772: LIST
40773: LIST
40774: LIST
40775: LIST
40776: LIST
40777: LIST
40778: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40779: LD_ADDR_VAR 0 13
40783: PUSH
40784: LD_INT 0
40786: PUSH
40787: LD_INT 0
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: PUSH
40794: LD_INT 0
40796: PUSH
40797: LD_INT 1
40799: NEG
40800: PUSH
40801: EMPTY
40802: LIST
40803: LIST
40804: PUSH
40805: LD_INT 1
40807: PUSH
40808: LD_INT 0
40810: PUSH
40811: EMPTY
40812: LIST
40813: LIST
40814: PUSH
40815: LD_INT 1
40817: PUSH
40818: LD_INT 1
40820: PUSH
40821: EMPTY
40822: LIST
40823: LIST
40824: PUSH
40825: LD_INT 0
40827: PUSH
40828: LD_INT 1
40830: PUSH
40831: EMPTY
40832: LIST
40833: LIST
40834: PUSH
40835: LD_INT 1
40837: NEG
40838: PUSH
40839: LD_INT 0
40841: PUSH
40842: EMPTY
40843: LIST
40844: LIST
40845: PUSH
40846: LD_INT 1
40848: NEG
40849: PUSH
40850: LD_INT 1
40852: NEG
40853: PUSH
40854: EMPTY
40855: LIST
40856: LIST
40857: PUSH
40858: LD_INT 1
40860: NEG
40861: PUSH
40862: LD_INT 2
40864: NEG
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: PUSH
40870: LD_INT 2
40872: PUSH
40873: LD_INT 1
40875: PUSH
40876: EMPTY
40877: LIST
40878: LIST
40879: PUSH
40880: LD_INT 2
40882: PUSH
40883: LD_INT 2
40885: PUSH
40886: EMPTY
40887: LIST
40888: LIST
40889: PUSH
40890: LD_INT 1
40892: PUSH
40893: LD_INT 2
40895: PUSH
40896: EMPTY
40897: LIST
40898: LIST
40899: PUSH
40900: LD_INT 2
40902: NEG
40903: PUSH
40904: LD_INT 1
40906: NEG
40907: PUSH
40908: EMPTY
40909: LIST
40910: LIST
40911: PUSH
40912: LD_INT 2
40914: NEG
40915: PUSH
40916: LD_INT 2
40918: NEG
40919: PUSH
40920: EMPTY
40921: LIST
40922: LIST
40923: PUSH
40924: LD_INT 2
40926: NEG
40927: PUSH
40928: LD_INT 3
40930: NEG
40931: PUSH
40932: EMPTY
40933: LIST
40934: LIST
40935: PUSH
40936: LD_INT 3
40938: NEG
40939: PUSH
40940: LD_INT 2
40942: NEG
40943: PUSH
40944: EMPTY
40945: LIST
40946: LIST
40947: PUSH
40948: LD_INT 3
40950: NEG
40951: PUSH
40952: LD_INT 3
40954: NEG
40955: PUSH
40956: EMPTY
40957: LIST
40958: LIST
40959: PUSH
40960: EMPTY
40961: LIST
40962: LIST
40963: LIST
40964: LIST
40965: LIST
40966: LIST
40967: LIST
40968: LIST
40969: LIST
40970: LIST
40971: LIST
40972: LIST
40973: LIST
40974: LIST
40975: LIST
40976: LIST
40977: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40978: LD_ADDR_VAR 0 14
40982: PUSH
40983: LD_INT 0
40985: PUSH
40986: LD_INT 0
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: PUSH
40993: LD_INT 0
40995: PUSH
40996: LD_INT 1
40998: NEG
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: PUSH
41004: LD_INT 1
41006: PUSH
41007: LD_INT 0
41009: PUSH
41010: EMPTY
41011: LIST
41012: LIST
41013: PUSH
41014: LD_INT 1
41016: PUSH
41017: LD_INT 1
41019: PUSH
41020: EMPTY
41021: LIST
41022: LIST
41023: PUSH
41024: LD_INT 0
41026: PUSH
41027: LD_INT 1
41029: PUSH
41030: EMPTY
41031: LIST
41032: LIST
41033: PUSH
41034: LD_INT 1
41036: NEG
41037: PUSH
41038: LD_INT 0
41040: PUSH
41041: EMPTY
41042: LIST
41043: LIST
41044: PUSH
41045: LD_INT 1
41047: NEG
41048: PUSH
41049: LD_INT 1
41051: NEG
41052: PUSH
41053: EMPTY
41054: LIST
41055: LIST
41056: PUSH
41057: LD_INT 1
41059: NEG
41060: PUSH
41061: LD_INT 2
41063: NEG
41064: PUSH
41065: EMPTY
41066: LIST
41067: LIST
41068: PUSH
41069: LD_INT 0
41071: PUSH
41072: LD_INT 2
41074: NEG
41075: PUSH
41076: EMPTY
41077: LIST
41078: LIST
41079: PUSH
41080: LD_INT 1
41082: PUSH
41083: LD_INT 1
41085: NEG
41086: PUSH
41087: EMPTY
41088: LIST
41089: LIST
41090: PUSH
41091: LD_INT 1
41093: PUSH
41094: LD_INT 2
41096: PUSH
41097: EMPTY
41098: LIST
41099: LIST
41100: PUSH
41101: LD_INT 0
41103: PUSH
41104: LD_INT 2
41106: PUSH
41107: EMPTY
41108: LIST
41109: LIST
41110: PUSH
41111: LD_INT 1
41113: NEG
41114: PUSH
41115: LD_INT 1
41117: PUSH
41118: EMPTY
41119: LIST
41120: LIST
41121: PUSH
41122: LD_INT 1
41124: NEG
41125: PUSH
41126: LD_INT 3
41128: NEG
41129: PUSH
41130: EMPTY
41131: LIST
41132: LIST
41133: PUSH
41134: LD_INT 0
41136: PUSH
41137: LD_INT 3
41139: NEG
41140: PUSH
41141: EMPTY
41142: LIST
41143: LIST
41144: PUSH
41145: LD_INT 1
41147: PUSH
41148: LD_INT 2
41150: NEG
41151: PUSH
41152: EMPTY
41153: LIST
41154: LIST
41155: PUSH
41156: EMPTY
41157: LIST
41158: LIST
41159: LIST
41160: LIST
41161: LIST
41162: LIST
41163: LIST
41164: LIST
41165: LIST
41166: LIST
41167: LIST
41168: LIST
41169: LIST
41170: LIST
41171: LIST
41172: LIST
41173: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41174: LD_ADDR_VAR 0 15
41178: PUSH
41179: LD_INT 0
41181: PUSH
41182: LD_INT 0
41184: PUSH
41185: EMPTY
41186: LIST
41187: LIST
41188: PUSH
41189: LD_INT 0
41191: PUSH
41192: LD_INT 1
41194: NEG
41195: PUSH
41196: EMPTY
41197: LIST
41198: LIST
41199: PUSH
41200: LD_INT 1
41202: PUSH
41203: LD_INT 0
41205: PUSH
41206: EMPTY
41207: LIST
41208: LIST
41209: PUSH
41210: LD_INT 1
41212: PUSH
41213: LD_INT 1
41215: PUSH
41216: EMPTY
41217: LIST
41218: LIST
41219: PUSH
41220: LD_INT 0
41222: PUSH
41223: LD_INT 1
41225: PUSH
41226: EMPTY
41227: LIST
41228: LIST
41229: PUSH
41230: LD_INT 1
41232: NEG
41233: PUSH
41234: LD_INT 0
41236: PUSH
41237: EMPTY
41238: LIST
41239: LIST
41240: PUSH
41241: LD_INT 1
41243: NEG
41244: PUSH
41245: LD_INT 1
41247: NEG
41248: PUSH
41249: EMPTY
41250: LIST
41251: LIST
41252: PUSH
41253: LD_INT 1
41255: PUSH
41256: LD_INT 1
41258: NEG
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: PUSH
41264: LD_INT 2
41266: PUSH
41267: LD_INT 0
41269: PUSH
41270: EMPTY
41271: LIST
41272: LIST
41273: PUSH
41274: LD_INT 2
41276: PUSH
41277: LD_INT 1
41279: PUSH
41280: EMPTY
41281: LIST
41282: LIST
41283: PUSH
41284: LD_INT 1
41286: NEG
41287: PUSH
41288: LD_INT 1
41290: PUSH
41291: EMPTY
41292: LIST
41293: LIST
41294: PUSH
41295: LD_INT 2
41297: NEG
41298: PUSH
41299: LD_INT 0
41301: PUSH
41302: EMPTY
41303: LIST
41304: LIST
41305: PUSH
41306: LD_INT 2
41308: NEG
41309: PUSH
41310: LD_INT 1
41312: NEG
41313: PUSH
41314: EMPTY
41315: LIST
41316: LIST
41317: PUSH
41318: LD_INT 2
41320: PUSH
41321: LD_INT 1
41323: NEG
41324: PUSH
41325: EMPTY
41326: LIST
41327: LIST
41328: PUSH
41329: LD_INT 3
41331: PUSH
41332: LD_INT 0
41334: PUSH
41335: EMPTY
41336: LIST
41337: LIST
41338: PUSH
41339: LD_INT 3
41341: PUSH
41342: LD_INT 1
41344: PUSH
41345: EMPTY
41346: LIST
41347: LIST
41348: PUSH
41349: EMPTY
41350: LIST
41351: LIST
41352: LIST
41353: LIST
41354: LIST
41355: LIST
41356: LIST
41357: LIST
41358: LIST
41359: LIST
41360: LIST
41361: LIST
41362: LIST
41363: LIST
41364: LIST
41365: LIST
41366: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41367: LD_ADDR_VAR 0 16
41371: PUSH
41372: LD_INT 0
41374: PUSH
41375: LD_INT 0
41377: PUSH
41378: EMPTY
41379: LIST
41380: LIST
41381: PUSH
41382: LD_INT 0
41384: PUSH
41385: LD_INT 1
41387: NEG
41388: PUSH
41389: EMPTY
41390: LIST
41391: LIST
41392: PUSH
41393: LD_INT 1
41395: PUSH
41396: LD_INT 0
41398: PUSH
41399: EMPTY
41400: LIST
41401: LIST
41402: PUSH
41403: LD_INT 1
41405: PUSH
41406: LD_INT 1
41408: PUSH
41409: EMPTY
41410: LIST
41411: LIST
41412: PUSH
41413: LD_INT 0
41415: PUSH
41416: LD_INT 1
41418: PUSH
41419: EMPTY
41420: LIST
41421: LIST
41422: PUSH
41423: LD_INT 1
41425: NEG
41426: PUSH
41427: LD_INT 0
41429: PUSH
41430: EMPTY
41431: LIST
41432: LIST
41433: PUSH
41434: LD_INT 1
41436: NEG
41437: PUSH
41438: LD_INT 1
41440: NEG
41441: PUSH
41442: EMPTY
41443: LIST
41444: LIST
41445: PUSH
41446: LD_INT 1
41448: NEG
41449: PUSH
41450: LD_INT 2
41452: NEG
41453: PUSH
41454: EMPTY
41455: LIST
41456: LIST
41457: PUSH
41458: LD_INT 2
41460: PUSH
41461: LD_INT 1
41463: PUSH
41464: EMPTY
41465: LIST
41466: LIST
41467: PUSH
41468: LD_INT 2
41470: PUSH
41471: LD_INT 2
41473: PUSH
41474: EMPTY
41475: LIST
41476: LIST
41477: PUSH
41478: LD_INT 1
41480: PUSH
41481: LD_INT 2
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: PUSH
41488: LD_INT 2
41490: NEG
41491: PUSH
41492: LD_INT 1
41494: NEG
41495: PUSH
41496: EMPTY
41497: LIST
41498: LIST
41499: PUSH
41500: LD_INT 2
41502: NEG
41503: PUSH
41504: LD_INT 2
41506: NEG
41507: PUSH
41508: EMPTY
41509: LIST
41510: LIST
41511: PUSH
41512: LD_INT 3
41514: PUSH
41515: LD_INT 2
41517: PUSH
41518: EMPTY
41519: LIST
41520: LIST
41521: PUSH
41522: LD_INT 3
41524: PUSH
41525: LD_INT 3
41527: PUSH
41528: EMPTY
41529: LIST
41530: LIST
41531: PUSH
41532: LD_INT 2
41534: PUSH
41535: LD_INT 3
41537: PUSH
41538: EMPTY
41539: LIST
41540: LIST
41541: PUSH
41542: EMPTY
41543: LIST
41544: LIST
41545: LIST
41546: LIST
41547: LIST
41548: LIST
41549: LIST
41550: LIST
41551: LIST
41552: LIST
41553: LIST
41554: LIST
41555: LIST
41556: LIST
41557: LIST
41558: LIST
41559: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41560: LD_ADDR_VAR 0 17
41564: PUSH
41565: LD_INT 0
41567: PUSH
41568: LD_INT 0
41570: PUSH
41571: EMPTY
41572: LIST
41573: LIST
41574: PUSH
41575: LD_INT 0
41577: PUSH
41578: LD_INT 1
41580: NEG
41581: PUSH
41582: EMPTY
41583: LIST
41584: LIST
41585: PUSH
41586: LD_INT 1
41588: PUSH
41589: LD_INT 0
41591: PUSH
41592: EMPTY
41593: LIST
41594: LIST
41595: PUSH
41596: LD_INT 1
41598: PUSH
41599: LD_INT 1
41601: PUSH
41602: EMPTY
41603: LIST
41604: LIST
41605: PUSH
41606: LD_INT 0
41608: PUSH
41609: LD_INT 1
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: PUSH
41616: LD_INT 1
41618: NEG
41619: PUSH
41620: LD_INT 0
41622: PUSH
41623: EMPTY
41624: LIST
41625: LIST
41626: PUSH
41627: LD_INT 1
41629: NEG
41630: PUSH
41631: LD_INT 1
41633: NEG
41634: PUSH
41635: EMPTY
41636: LIST
41637: LIST
41638: PUSH
41639: LD_INT 1
41641: NEG
41642: PUSH
41643: LD_INT 2
41645: NEG
41646: PUSH
41647: EMPTY
41648: LIST
41649: LIST
41650: PUSH
41651: LD_INT 0
41653: PUSH
41654: LD_INT 2
41656: NEG
41657: PUSH
41658: EMPTY
41659: LIST
41660: LIST
41661: PUSH
41662: LD_INT 1
41664: PUSH
41665: LD_INT 1
41667: NEG
41668: PUSH
41669: EMPTY
41670: LIST
41671: LIST
41672: PUSH
41673: LD_INT 2
41675: PUSH
41676: LD_INT 0
41678: PUSH
41679: EMPTY
41680: LIST
41681: LIST
41682: PUSH
41683: LD_INT 2
41685: PUSH
41686: LD_INT 1
41688: PUSH
41689: EMPTY
41690: LIST
41691: LIST
41692: PUSH
41693: LD_INT 2
41695: PUSH
41696: LD_INT 2
41698: PUSH
41699: EMPTY
41700: LIST
41701: LIST
41702: PUSH
41703: LD_INT 1
41705: PUSH
41706: LD_INT 2
41708: PUSH
41709: EMPTY
41710: LIST
41711: LIST
41712: PUSH
41713: LD_INT 0
41715: PUSH
41716: LD_INT 2
41718: PUSH
41719: EMPTY
41720: LIST
41721: LIST
41722: PUSH
41723: LD_INT 1
41725: NEG
41726: PUSH
41727: LD_INT 1
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: PUSH
41734: LD_INT 2
41736: NEG
41737: PUSH
41738: LD_INT 0
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: PUSH
41745: LD_INT 2
41747: NEG
41748: PUSH
41749: LD_INT 1
41751: NEG
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: PUSH
41757: LD_INT 2
41759: NEG
41760: PUSH
41761: LD_INT 2
41763: NEG
41764: PUSH
41765: EMPTY
41766: LIST
41767: LIST
41768: PUSH
41769: EMPTY
41770: LIST
41771: LIST
41772: LIST
41773: LIST
41774: LIST
41775: LIST
41776: LIST
41777: LIST
41778: LIST
41779: LIST
41780: LIST
41781: LIST
41782: LIST
41783: LIST
41784: LIST
41785: LIST
41786: LIST
41787: LIST
41788: LIST
41789: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41790: LD_ADDR_VAR 0 18
41794: PUSH
41795: LD_INT 0
41797: PUSH
41798: LD_INT 0
41800: PUSH
41801: EMPTY
41802: LIST
41803: LIST
41804: PUSH
41805: LD_INT 0
41807: PUSH
41808: LD_INT 1
41810: NEG
41811: PUSH
41812: EMPTY
41813: LIST
41814: LIST
41815: PUSH
41816: LD_INT 1
41818: PUSH
41819: LD_INT 0
41821: PUSH
41822: EMPTY
41823: LIST
41824: LIST
41825: PUSH
41826: LD_INT 1
41828: PUSH
41829: LD_INT 1
41831: PUSH
41832: EMPTY
41833: LIST
41834: LIST
41835: PUSH
41836: LD_INT 0
41838: PUSH
41839: LD_INT 1
41841: PUSH
41842: EMPTY
41843: LIST
41844: LIST
41845: PUSH
41846: LD_INT 1
41848: NEG
41849: PUSH
41850: LD_INT 0
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: PUSH
41857: LD_INT 1
41859: NEG
41860: PUSH
41861: LD_INT 1
41863: NEG
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: PUSH
41869: LD_INT 1
41871: NEG
41872: PUSH
41873: LD_INT 2
41875: NEG
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: PUSH
41881: LD_INT 0
41883: PUSH
41884: LD_INT 2
41886: NEG
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: PUSH
41892: LD_INT 1
41894: PUSH
41895: LD_INT 1
41897: NEG
41898: PUSH
41899: EMPTY
41900: LIST
41901: LIST
41902: PUSH
41903: LD_INT 2
41905: PUSH
41906: LD_INT 0
41908: PUSH
41909: EMPTY
41910: LIST
41911: LIST
41912: PUSH
41913: LD_INT 2
41915: PUSH
41916: LD_INT 1
41918: PUSH
41919: EMPTY
41920: LIST
41921: LIST
41922: PUSH
41923: LD_INT 2
41925: PUSH
41926: LD_INT 2
41928: PUSH
41929: EMPTY
41930: LIST
41931: LIST
41932: PUSH
41933: LD_INT 1
41935: PUSH
41936: LD_INT 2
41938: PUSH
41939: EMPTY
41940: LIST
41941: LIST
41942: PUSH
41943: LD_INT 0
41945: PUSH
41946: LD_INT 2
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: PUSH
41953: LD_INT 1
41955: NEG
41956: PUSH
41957: LD_INT 1
41959: PUSH
41960: EMPTY
41961: LIST
41962: LIST
41963: PUSH
41964: LD_INT 2
41966: NEG
41967: PUSH
41968: LD_INT 0
41970: PUSH
41971: EMPTY
41972: LIST
41973: LIST
41974: PUSH
41975: LD_INT 2
41977: NEG
41978: PUSH
41979: LD_INT 1
41981: NEG
41982: PUSH
41983: EMPTY
41984: LIST
41985: LIST
41986: PUSH
41987: LD_INT 2
41989: NEG
41990: PUSH
41991: LD_INT 2
41993: NEG
41994: PUSH
41995: EMPTY
41996: LIST
41997: LIST
41998: PUSH
41999: EMPTY
42000: LIST
42001: LIST
42002: LIST
42003: LIST
42004: LIST
42005: LIST
42006: LIST
42007: LIST
42008: LIST
42009: LIST
42010: LIST
42011: LIST
42012: LIST
42013: LIST
42014: LIST
42015: LIST
42016: LIST
42017: LIST
42018: LIST
42019: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42020: LD_ADDR_VAR 0 19
42024: PUSH
42025: LD_INT 0
42027: PUSH
42028: LD_INT 0
42030: PUSH
42031: EMPTY
42032: LIST
42033: LIST
42034: PUSH
42035: LD_INT 0
42037: PUSH
42038: LD_INT 1
42040: NEG
42041: PUSH
42042: EMPTY
42043: LIST
42044: LIST
42045: PUSH
42046: LD_INT 1
42048: PUSH
42049: LD_INT 0
42051: PUSH
42052: EMPTY
42053: LIST
42054: LIST
42055: PUSH
42056: LD_INT 1
42058: PUSH
42059: LD_INT 1
42061: PUSH
42062: EMPTY
42063: LIST
42064: LIST
42065: PUSH
42066: LD_INT 0
42068: PUSH
42069: LD_INT 1
42071: PUSH
42072: EMPTY
42073: LIST
42074: LIST
42075: PUSH
42076: LD_INT 1
42078: NEG
42079: PUSH
42080: LD_INT 0
42082: PUSH
42083: EMPTY
42084: LIST
42085: LIST
42086: PUSH
42087: LD_INT 1
42089: NEG
42090: PUSH
42091: LD_INT 1
42093: NEG
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: PUSH
42099: LD_INT 1
42101: NEG
42102: PUSH
42103: LD_INT 2
42105: NEG
42106: PUSH
42107: EMPTY
42108: LIST
42109: LIST
42110: PUSH
42111: LD_INT 0
42113: PUSH
42114: LD_INT 2
42116: NEG
42117: PUSH
42118: EMPTY
42119: LIST
42120: LIST
42121: PUSH
42122: LD_INT 1
42124: PUSH
42125: LD_INT 1
42127: NEG
42128: PUSH
42129: EMPTY
42130: LIST
42131: LIST
42132: PUSH
42133: LD_INT 2
42135: PUSH
42136: LD_INT 0
42138: PUSH
42139: EMPTY
42140: LIST
42141: LIST
42142: PUSH
42143: LD_INT 2
42145: PUSH
42146: LD_INT 1
42148: PUSH
42149: EMPTY
42150: LIST
42151: LIST
42152: PUSH
42153: LD_INT 2
42155: PUSH
42156: LD_INT 2
42158: PUSH
42159: EMPTY
42160: LIST
42161: LIST
42162: PUSH
42163: LD_INT 1
42165: PUSH
42166: LD_INT 2
42168: PUSH
42169: EMPTY
42170: LIST
42171: LIST
42172: PUSH
42173: LD_INT 0
42175: PUSH
42176: LD_INT 2
42178: PUSH
42179: EMPTY
42180: LIST
42181: LIST
42182: PUSH
42183: LD_INT 1
42185: NEG
42186: PUSH
42187: LD_INT 1
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: PUSH
42194: LD_INT 2
42196: NEG
42197: PUSH
42198: LD_INT 0
42200: PUSH
42201: EMPTY
42202: LIST
42203: LIST
42204: PUSH
42205: LD_INT 2
42207: NEG
42208: PUSH
42209: LD_INT 1
42211: NEG
42212: PUSH
42213: EMPTY
42214: LIST
42215: LIST
42216: PUSH
42217: LD_INT 2
42219: NEG
42220: PUSH
42221: LD_INT 2
42223: NEG
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: PUSH
42229: EMPTY
42230: LIST
42231: LIST
42232: LIST
42233: LIST
42234: LIST
42235: LIST
42236: LIST
42237: LIST
42238: LIST
42239: LIST
42240: LIST
42241: LIST
42242: LIST
42243: LIST
42244: LIST
42245: LIST
42246: LIST
42247: LIST
42248: LIST
42249: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42250: LD_ADDR_VAR 0 20
42254: PUSH
42255: LD_INT 0
42257: PUSH
42258: LD_INT 0
42260: PUSH
42261: EMPTY
42262: LIST
42263: LIST
42264: PUSH
42265: LD_INT 0
42267: PUSH
42268: LD_INT 1
42270: NEG
42271: PUSH
42272: EMPTY
42273: LIST
42274: LIST
42275: PUSH
42276: LD_INT 1
42278: PUSH
42279: LD_INT 0
42281: PUSH
42282: EMPTY
42283: LIST
42284: LIST
42285: PUSH
42286: LD_INT 1
42288: PUSH
42289: LD_INT 1
42291: PUSH
42292: EMPTY
42293: LIST
42294: LIST
42295: PUSH
42296: LD_INT 0
42298: PUSH
42299: LD_INT 1
42301: PUSH
42302: EMPTY
42303: LIST
42304: LIST
42305: PUSH
42306: LD_INT 1
42308: NEG
42309: PUSH
42310: LD_INT 0
42312: PUSH
42313: EMPTY
42314: LIST
42315: LIST
42316: PUSH
42317: LD_INT 1
42319: NEG
42320: PUSH
42321: LD_INT 1
42323: NEG
42324: PUSH
42325: EMPTY
42326: LIST
42327: LIST
42328: PUSH
42329: LD_INT 1
42331: NEG
42332: PUSH
42333: LD_INT 2
42335: NEG
42336: PUSH
42337: EMPTY
42338: LIST
42339: LIST
42340: PUSH
42341: LD_INT 0
42343: PUSH
42344: LD_INT 2
42346: NEG
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: PUSH
42352: LD_INT 1
42354: PUSH
42355: LD_INT 1
42357: NEG
42358: PUSH
42359: EMPTY
42360: LIST
42361: LIST
42362: PUSH
42363: LD_INT 2
42365: PUSH
42366: LD_INT 0
42368: PUSH
42369: EMPTY
42370: LIST
42371: LIST
42372: PUSH
42373: LD_INT 2
42375: PUSH
42376: LD_INT 1
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: PUSH
42383: LD_INT 2
42385: PUSH
42386: LD_INT 2
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: PUSH
42393: LD_INT 1
42395: PUSH
42396: LD_INT 2
42398: PUSH
42399: EMPTY
42400: LIST
42401: LIST
42402: PUSH
42403: LD_INT 0
42405: PUSH
42406: LD_INT 2
42408: PUSH
42409: EMPTY
42410: LIST
42411: LIST
42412: PUSH
42413: LD_INT 1
42415: NEG
42416: PUSH
42417: LD_INT 1
42419: PUSH
42420: EMPTY
42421: LIST
42422: LIST
42423: PUSH
42424: LD_INT 2
42426: NEG
42427: PUSH
42428: LD_INT 0
42430: PUSH
42431: EMPTY
42432: LIST
42433: LIST
42434: PUSH
42435: LD_INT 2
42437: NEG
42438: PUSH
42439: LD_INT 1
42441: NEG
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: PUSH
42447: LD_INT 2
42449: NEG
42450: PUSH
42451: LD_INT 2
42453: NEG
42454: PUSH
42455: EMPTY
42456: LIST
42457: LIST
42458: PUSH
42459: EMPTY
42460: LIST
42461: LIST
42462: LIST
42463: LIST
42464: LIST
42465: LIST
42466: LIST
42467: LIST
42468: LIST
42469: LIST
42470: LIST
42471: LIST
42472: LIST
42473: LIST
42474: LIST
42475: LIST
42476: LIST
42477: LIST
42478: LIST
42479: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42480: LD_ADDR_VAR 0 21
42484: PUSH
42485: LD_INT 0
42487: PUSH
42488: LD_INT 0
42490: PUSH
42491: EMPTY
42492: LIST
42493: LIST
42494: PUSH
42495: LD_INT 0
42497: PUSH
42498: LD_INT 1
42500: NEG
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: PUSH
42506: LD_INT 1
42508: PUSH
42509: LD_INT 0
42511: PUSH
42512: EMPTY
42513: LIST
42514: LIST
42515: PUSH
42516: LD_INT 1
42518: PUSH
42519: LD_INT 1
42521: PUSH
42522: EMPTY
42523: LIST
42524: LIST
42525: PUSH
42526: LD_INT 0
42528: PUSH
42529: LD_INT 1
42531: PUSH
42532: EMPTY
42533: LIST
42534: LIST
42535: PUSH
42536: LD_INT 1
42538: NEG
42539: PUSH
42540: LD_INT 0
42542: PUSH
42543: EMPTY
42544: LIST
42545: LIST
42546: PUSH
42547: LD_INT 1
42549: NEG
42550: PUSH
42551: LD_INT 1
42553: NEG
42554: PUSH
42555: EMPTY
42556: LIST
42557: LIST
42558: PUSH
42559: LD_INT 1
42561: NEG
42562: PUSH
42563: LD_INT 2
42565: NEG
42566: PUSH
42567: EMPTY
42568: LIST
42569: LIST
42570: PUSH
42571: LD_INT 0
42573: PUSH
42574: LD_INT 2
42576: NEG
42577: PUSH
42578: EMPTY
42579: LIST
42580: LIST
42581: PUSH
42582: LD_INT 1
42584: PUSH
42585: LD_INT 1
42587: NEG
42588: PUSH
42589: EMPTY
42590: LIST
42591: LIST
42592: PUSH
42593: LD_INT 2
42595: PUSH
42596: LD_INT 0
42598: PUSH
42599: EMPTY
42600: LIST
42601: LIST
42602: PUSH
42603: LD_INT 2
42605: PUSH
42606: LD_INT 1
42608: PUSH
42609: EMPTY
42610: LIST
42611: LIST
42612: PUSH
42613: LD_INT 2
42615: PUSH
42616: LD_INT 2
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: PUSH
42623: LD_INT 1
42625: PUSH
42626: LD_INT 2
42628: PUSH
42629: EMPTY
42630: LIST
42631: LIST
42632: PUSH
42633: LD_INT 0
42635: PUSH
42636: LD_INT 2
42638: PUSH
42639: EMPTY
42640: LIST
42641: LIST
42642: PUSH
42643: LD_INT 1
42645: NEG
42646: PUSH
42647: LD_INT 1
42649: PUSH
42650: EMPTY
42651: LIST
42652: LIST
42653: PUSH
42654: LD_INT 2
42656: NEG
42657: PUSH
42658: LD_INT 0
42660: PUSH
42661: EMPTY
42662: LIST
42663: LIST
42664: PUSH
42665: LD_INT 2
42667: NEG
42668: PUSH
42669: LD_INT 1
42671: NEG
42672: PUSH
42673: EMPTY
42674: LIST
42675: LIST
42676: PUSH
42677: LD_INT 2
42679: NEG
42680: PUSH
42681: LD_INT 2
42683: NEG
42684: PUSH
42685: EMPTY
42686: LIST
42687: LIST
42688: PUSH
42689: EMPTY
42690: LIST
42691: LIST
42692: LIST
42693: LIST
42694: LIST
42695: LIST
42696: LIST
42697: LIST
42698: LIST
42699: LIST
42700: LIST
42701: LIST
42702: LIST
42703: LIST
42704: LIST
42705: LIST
42706: LIST
42707: LIST
42708: LIST
42709: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42710: LD_ADDR_VAR 0 22
42714: PUSH
42715: LD_INT 0
42717: PUSH
42718: LD_INT 0
42720: PUSH
42721: EMPTY
42722: LIST
42723: LIST
42724: PUSH
42725: LD_INT 0
42727: PUSH
42728: LD_INT 1
42730: NEG
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: PUSH
42736: LD_INT 1
42738: PUSH
42739: LD_INT 0
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: PUSH
42746: LD_INT 1
42748: PUSH
42749: LD_INT 1
42751: PUSH
42752: EMPTY
42753: LIST
42754: LIST
42755: PUSH
42756: LD_INT 0
42758: PUSH
42759: LD_INT 1
42761: PUSH
42762: EMPTY
42763: LIST
42764: LIST
42765: PUSH
42766: LD_INT 1
42768: NEG
42769: PUSH
42770: LD_INT 0
42772: PUSH
42773: EMPTY
42774: LIST
42775: LIST
42776: PUSH
42777: LD_INT 1
42779: NEG
42780: PUSH
42781: LD_INT 1
42783: NEG
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: PUSH
42789: LD_INT 1
42791: NEG
42792: PUSH
42793: LD_INT 2
42795: NEG
42796: PUSH
42797: EMPTY
42798: LIST
42799: LIST
42800: PUSH
42801: LD_INT 0
42803: PUSH
42804: LD_INT 2
42806: NEG
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: PUSH
42812: LD_INT 1
42814: PUSH
42815: LD_INT 1
42817: NEG
42818: PUSH
42819: EMPTY
42820: LIST
42821: LIST
42822: PUSH
42823: LD_INT 2
42825: PUSH
42826: LD_INT 0
42828: PUSH
42829: EMPTY
42830: LIST
42831: LIST
42832: PUSH
42833: LD_INT 2
42835: PUSH
42836: LD_INT 1
42838: PUSH
42839: EMPTY
42840: LIST
42841: LIST
42842: PUSH
42843: LD_INT 2
42845: PUSH
42846: LD_INT 2
42848: PUSH
42849: EMPTY
42850: LIST
42851: LIST
42852: PUSH
42853: LD_INT 1
42855: PUSH
42856: LD_INT 2
42858: PUSH
42859: EMPTY
42860: LIST
42861: LIST
42862: PUSH
42863: LD_INT 0
42865: PUSH
42866: LD_INT 2
42868: PUSH
42869: EMPTY
42870: LIST
42871: LIST
42872: PUSH
42873: LD_INT 1
42875: NEG
42876: PUSH
42877: LD_INT 1
42879: PUSH
42880: EMPTY
42881: LIST
42882: LIST
42883: PUSH
42884: LD_INT 2
42886: NEG
42887: PUSH
42888: LD_INT 0
42890: PUSH
42891: EMPTY
42892: LIST
42893: LIST
42894: PUSH
42895: LD_INT 2
42897: NEG
42898: PUSH
42899: LD_INT 1
42901: NEG
42902: PUSH
42903: EMPTY
42904: LIST
42905: LIST
42906: PUSH
42907: LD_INT 2
42909: NEG
42910: PUSH
42911: LD_INT 2
42913: NEG
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: PUSH
42919: EMPTY
42920: LIST
42921: LIST
42922: LIST
42923: LIST
42924: LIST
42925: LIST
42926: LIST
42927: LIST
42928: LIST
42929: LIST
42930: LIST
42931: LIST
42932: LIST
42933: LIST
42934: LIST
42935: LIST
42936: LIST
42937: LIST
42938: LIST
42939: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
42940: LD_ADDR_VAR 0 23
42944: PUSH
42945: LD_INT 0
42947: PUSH
42948: LD_INT 0
42950: PUSH
42951: EMPTY
42952: LIST
42953: LIST
42954: PUSH
42955: LD_INT 0
42957: PUSH
42958: LD_INT 1
42960: NEG
42961: PUSH
42962: EMPTY
42963: LIST
42964: LIST
42965: PUSH
42966: LD_INT 1
42968: PUSH
42969: LD_INT 0
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: PUSH
42976: LD_INT 1
42978: PUSH
42979: LD_INT 1
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: PUSH
42986: LD_INT 0
42988: PUSH
42989: LD_INT 1
42991: PUSH
42992: EMPTY
42993: LIST
42994: LIST
42995: PUSH
42996: LD_INT 1
42998: NEG
42999: PUSH
43000: LD_INT 0
43002: PUSH
43003: EMPTY
43004: LIST
43005: LIST
43006: PUSH
43007: LD_INT 1
43009: NEG
43010: PUSH
43011: LD_INT 1
43013: NEG
43014: PUSH
43015: EMPTY
43016: LIST
43017: LIST
43018: PUSH
43019: LD_INT 1
43021: NEG
43022: PUSH
43023: LD_INT 2
43025: NEG
43026: PUSH
43027: EMPTY
43028: LIST
43029: LIST
43030: PUSH
43031: LD_INT 0
43033: PUSH
43034: LD_INT 2
43036: NEG
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: PUSH
43042: LD_INT 1
43044: PUSH
43045: LD_INT 1
43047: NEG
43048: PUSH
43049: EMPTY
43050: LIST
43051: LIST
43052: PUSH
43053: LD_INT 2
43055: PUSH
43056: LD_INT 0
43058: PUSH
43059: EMPTY
43060: LIST
43061: LIST
43062: PUSH
43063: LD_INT 2
43065: PUSH
43066: LD_INT 1
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: PUSH
43073: LD_INT 2
43075: PUSH
43076: LD_INT 2
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: PUSH
43083: LD_INT 1
43085: PUSH
43086: LD_INT 2
43088: PUSH
43089: EMPTY
43090: LIST
43091: LIST
43092: PUSH
43093: LD_INT 0
43095: PUSH
43096: LD_INT 2
43098: PUSH
43099: EMPTY
43100: LIST
43101: LIST
43102: PUSH
43103: LD_INT 1
43105: NEG
43106: PUSH
43107: LD_INT 1
43109: PUSH
43110: EMPTY
43111: LIST
43112: LIST
43113: PUSH
43114: LD_INT 2
43116: NEG
43117: PUSH
43118: LD_INT 0
43120: PUSH
43121: EMPTY
43122: LIST
43123: LIST
43124: PUSH
43125: LD_INT 2
43127: NEG
43128: PUSH
43129: LD_INT 1
43131: NEG
43132: PUSH
43133: EMPTY
43134: LIST
43135: LIST
43136: PUSH
43137: LD_INT 2
43139: NEG
43140: PUSH
43141: LD_INT 2
43143: NEG
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: PUSH
43149: LD_INT 2
43151: NEG
43152: PUSH
43153: LD_INT 3
43155: NEG
43156: PUSH
43157: EMPTY
43158: LIST
43159: LIST
43160: PUSH
43161: LD_INT 1
43163: NEG
43164: PUSH
43165: LD_INT 3
43167: NEG
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: PUSH
43173: LD_INT 1
43175: PUSH
43176: LD_INT 2
43178: NEG
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: PUSH
43184: LD_INT 2
43186: PUSH
43187: LD_INT 1
43189: NEG
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: PUSH
43195: EMPTY
43196: LIST
43197: LIST
43198: LIST
43199: LIST
43200: LIST
43201: LIST
43202: LIST
43203: LIST
43204: LIST
43205: LIST
43206: LIST
43207: LIST
43208: LIST
43209: LIST
43210: LIST
43211: LIST
43212: LIST
43213: LIST
43214: LIST
43215: LIST
43216: LIST
43217: LIST
43218: LIST
43219: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
43220: LD_ADDR_VAR 0 24
43224: PUSH
43225: LD_INT 0
43227: PUSH
43228: LD_INT 0
43230: PUSH
43231: EMPTY
43232: LIST
43233: LIST
43234: PUSH
43235: LD_INT 0
43237: PUSH
43238: LD_INT 1
43240: NEG
43241: PUSH
43242: EMPTY
43243: LIST
43244: LIST
43245: PUSH
43246: LD_INT 1
43248: PUSH
43249: LD_INT 0
43251: PUSH
43252: EMPTY
43253: LIST
43254: LIST
43255: PUSH
43256: LD_INT 1
43258: PUSH
43259: LD_INT 1
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: PUSH
43266: LD_INT 0
43268: PUSH
43269: LD_INT 1
43271: PUSH
43272: EMPTY
43273: LIST
43274: LIST
43275: PUSH
43276: LD_INT 1
43278: NEG
43279: PUSH
43280: LD_INT 0
43282: PUSH
43283: EMPTY
43284: LIST
43285: LIST
43286: PUSH
43287: LD_INT 1
43289: NEG
43290: PUSH
43291: LD_INT 1
43293: NEG
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: PUSH
43299: LD_INT 1
43301: NEG
43302: PUSH
43303: LD_INT 2
43305: NEG
43306: PUSH
43307: EMPTY
43308: LIST
43309: LIST
43310: PUSH
43311: LD_INT 0
43313: PUSH
43314: LD_INT 2
43316: NEG
43317: PUSH
43318: EMPTY
43319: LIST
43320: LIST
43321: PUSH
43322: LD_INT 1
43324: PUSH
43325: LD_INT 1
43327: NEG
43328: PUSH
43329: EMPTY
43330: LIST
43331: LIST
43332: PUSH
43333: LD_INT 2
43335: PUSH
43336: LD_INT 0
43338: PUSH
43339: EMPTY
43340: LIST
43341: LIST
43342: PUSH
43343: LD_INT 2
43345: PUSH
43346: LD_INT 1
43348: PUSH
43349: EMPTY
43350: LIST
43351: LIST
43352: PUSH
43353: LD_INT 2
43355: PUSH
43356: LD_INT 2
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: PUSH
43363: LD_INT 1
43365: PUSH
43366: LD_INT 2
43368: PUSH
43369: EMPTY
43370: LIST
43371: LIST
43372: PUSH
43373: LD_INT 0
43375: PUSH
43376: LD_INT 2
43378: PUSH
43379: EMPTY
43380: LIST
43381: LIST
43382: PUSH
43383: LD_INT 1
43385: NEG
43386: PUSH
43387: LD_INT 1
43389: PUSH
43390: EMPTY
43391: LIST
43392: LIST
43393: PUSH
43394: LD_INT 2
43396: NEG
43397: PUSH
43398: LD_INT 0
43400: PUSH
43401: EMPTY
43402: LIST
43403: LIST
43404: PUSH
43405: LD_INT 2
43407: NEG
43408: PUSH
43409: LD_INT 1
43411: NEG
43412: PUSH
43413: EMPTY
43414: LIST
43415: LIST
43416: PUSH
43417: LD_INT 2
43419: NEG
43420: PUSH
43421: LD_INT 2
43423: NEG
43424: PUSH
43425: EMPTY
43426: LIST
43427: LIST
43428: PUSH
43429: LD_INT 1
43431: PUSH
43432: LD_INT 2
43434: NEG
43435: PUSH
43436: EMPTY
43437: LIST
43438: LIST
43439: PUSH
43440: LD_INT 2
43442: PUSH
43443: LD_INT 1
43445: NEG
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: PUSH
43451: LD_INT 3
43453: PUSH
43454: LD_INT 1
43456: PUSH
43457: EMPTY
43458: LIST
43459: LIST
43460: PUSH
43461: LD_INT 3
43463: PUSH
43464: LD_INT 2
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: PUSH
43471: EMPTY
43472: LIST
43473: LIST
43474: LIST
43475: LIST
43476: LIST
43477: LIST
43478: LIST
43479: LIST
43480: LIST
43481: LIST
43482: LIST
43483: LIST
43484: LIST
43485: LIST
43486: LIST
43487: LIST
43488: LIST
43489: LIST
43490: LIST
43491: LIST
43492: LIST
43493: LIST
43494: LIST
43495: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
43496: LD_ADDR_VAR 0 25
43500: PUSH
43501: LD_INT 0
43503: PUSH
43504: LD_INT 0
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PUSH
43511: LD_INT 0
43513: PUSH
43514: LD_INT 1
43516: NEG
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: PUSH
43522: LD_INT 1
43524: PUSH
43525: LD_INT 0
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: PUSH
43532: LD_INT 1
43534: PUSH
43535: LD_INT 1
43537: PUSH
43538: EMPTY
43539: LIST
43540: LIST
43541: PUSH
43542: LD_INT 0
43544: PUSH
43545: LD_INT 1
43547: PUSH
43548: EMPTY
43549: LIST
43550: LIST
43551: PUSH
43552: LD_INT 1
43554: NEG
43555: PUSH
43556: LD_INT 0
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PUSH
43563: LD_INT 1
43565: NEG
43566: PUSH
43567: LD_INT 1
43569: NEG
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: PUSH
43575: LD_INT 1
43577: NEG
43578: PUSH
43579: LD_INT 2
43581: NEG
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: PUSH
43587: LD_INT 0
43589: PUSH
43590: LD_INT 2
43592: NEG
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: PUSH
43598: LD_INT 1
43600: PUSH
43601: LD_INT 1
43603: NEG
43604: PUSH
43605: EMPTY
43606: LIST
43607: LIST
43608: PUSH
43609: LD_INT 2
43611: PUSH
43612: LD_INT 0
43614: PUSH
43615: EMPTY
43616: LIST
43617: LIST
43618: PUSH
43619: LD_INT 2
43621: PUSH
43622: LD_INT 1
43624: PUSH
43625: EMPTY
43626: LIST
43627: LIST
43628: PUSH
43629: LD_INT 2
43631: PUSH
43632: LD_INT 2
43634: PUSH
43635: EMPTY
43636: LIST
43637: LIST
43638: PUSH
43639: LD_INT 1
43641: PUSH
43642: LD_INT 2
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: PUSH
43649: LD_INT 0
43651: PUSH
43652: LD_INT 2
43654: PUSH
43655: EMPTY
43656: LIST
43657: LIST
43658: PUSH
43659: LD_INT 1
43661: NEG
43662: PUSH
43663: LD_INT 1
43665: PUSH
43666: EMPTY
43667: LIST
43668: LIST
43669: PUSH
43670: LD_INT 2
43672: NEG
43673: PUSH
43674: LD_INT 0
43676: PUSH
43677: EMPTY
43678: LIST
43679: LIST
43680: PUSH
43681: LD_INT 2
43683: NEG
43684: PUSH
43685: LD_INT 1
43687: NEG
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: PUSH
43693: LD_INT 2
43695: NEG
43696: PUSH
43697: LD_INT 2
43699: NEG
43700: PUSH
43701: EMPTY
43702: LIST
43703: LIST
43704: PUSH
43705: LD_INT 3
43707: PUSH
43708: LD_INT 1
43710: PUSH
43711: EMPTY
43712: LIST
43713: LIST
43714: PUSH
43715: LD_INT 3
43717: PUSH
43718: LD_INT 2
43720: PUSH
43721: EMPTY
43722: LIST
43723: LIST
43724: PUSH
43725: LD_INT 2
43727: PUSH
43728: LD_INT 3
43730: PUSH
43731: EMPTY
43732: LIST
43733: LIST
43734: PUSH
43735: LD_INT 1
43737: PUSH
43738: LD_INT 3
43740: PUSH
43741: EMPTY
43742: LIST
43743: LIST
43744: PUSH
43745: EMPTY
43746: LIST
43747: LIST
43748: LIST
43749: LIST
43750: LIST
43751: LIST
43752: LIST
43753: LIST
43754: LIST
43755: LIST
43756: LIST
43757: LIST
43758: LIST
43759: LIST
43760: LIST
43761: LIST
43762: LIST
43763: LIST
43764: LIST
43765: LIST
43766: LIST
43767: LIST
43768: LIST
43769: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43770: LD_ADDR_VAR 0 26
43774: PUSH
43775: LD_INT 0
43777: PUSH
43778: LD_INT 0
43780: PUSH
43781: EMPTY
43782: LIST
43783: LIST
43784: PUSH
43785: LD_INT 0
43787: PUSH
43788: LD_INT 1
43790: NEG
43791: PUSH
43792: EMPTY
43793: LIST
43794: LIST
43795: PUSH
43796: LD_INT 1
43798: PUSH
43799: LD_INT 0
43801: PUSH
43802: EMPTY
43803: LIST
43804: LIST
43805: PUSH
43806: LD_INT 1
43808: PUSH
43809: LD_INT 1
43811: PUSH
43812: EMPTY
43813: LIST
43814: LIST
43815: PUSH
43816: LD_INT 0
43818: PUSH
43819: LD_INT 1
43821: PUSH
43822: EMPTY
43823: LIST
43824: LIST
43825: PUSH
43826: LD_INT 1
43828: NEG
43829: PUSH
43830: LD_INT 0
43832: PUSH
43833: EMPTY
43834: LIST
43835: LIST
43836: PUSH
43837: LD_INT 1
43839: NEG
43840: PUSH
43841: LD_INT 1
43843: NEG
43844: PUSH
43845: EMPTY
43846: LIST
43847: LIST
43848: PUSH
43849: LD_INT 1
43851: NEG
43852: PUSH
43853: LD_INT 2
43855: NEG
43856: PUSH
43857: EMPTY
43858: LIST
43859: LIST
43860: PUSH
43861: LD_INT 0
43863: PUSH
43864: LD_INT 2
43866: NEG
43867: PUSH
43868: EMPTY
43869: LIST
43870: LIST
43871: PUSH
43872: LD_INT 1
43874: PUSH
43875: LD_INT 1
43877: NEG
43878: PUSH
43879: EMPTY
43880: LIST
43881: LIST
43882: PUSH
43883: LD_INT 2
43885: PUSH
43886: LD_INT 0
43888: PUSH
43889: EMPTY
43890: LIST
43891: LIST
43892: PUSH
43893: LD_INT 2
43895: PUSH
43896: LD_INT 1
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: PUSH
43903: LD_INT 2
43905: PUSH
43906: LD_INT 2
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: PUSH
43913: LD_INT 1
43915: PUSH
43916: LD_INT 2
43918: PUSH
43919: EMPTY
43920: LIST
43921: LIST
43922: PUSH
43923: LD_INT 0
43925: PUSH
43926: LD_INT 2
43928: PUSH
43929: EMPTY
43930: LIST
43931: LIST
43932: PUSH
43933: LD_INT 1
43935: NEG
43936: PUSH
43937: LD_INT 1
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: PUSH
43944: LD_INT 2
43946: NEG
43947: PUSH
43948: LD_INT 0
43950: PUSH
43951: EMPTY
43952: LIST
43953: LIST
43954: PUSH
43955: LD_INT 2
43957: NEG
43958: PUSH
43959: LD_INT 1
43961: NEG
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: LD_INT 2
43969: NEG
43970: PUSH
43971: LD_INT 2
43973: NEG
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 2
43981: PUSH
43982: LD_INT 3
43984: PUSH
43985: EMPTY
43986: LIST
43987: LIST
43988: PUSH
43989: LD_INT 1
43991: PUSH
43992: LD_INT 3
43994: PUSH
43995: EMPTY
43996: LIST
43997: LIST
43998: PUSH
43999: LD_INT 1
44001: NEG
44002: PUSH
44003: LD_INT 2
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: PUSH
44010: LD_INT 2
44012: NEG
44013: PUSH
44014: LD_INT 1
44016: PUSH
44017: EMPTY
44018: LIST
44019: LIST
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: LIST
44025: LIST
44026: LIST
44027: LIST
44028: LIST
44029: LIST
44030: LIST
44031: LIST
44032: LIST
44033: LIST
44034: LIST
44035: LIST
44036: LIST
44037: LIST
44038: LIST
44039: LIST
44040: LIST
44041: LIST
44042: LIST
44043: LIST
44044: LIST
44045: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44046: LD_ADDR_VAR 0 27
44050: PUSH
44051: LD_INT 0
44053: PUSH
44054: LD_INT 0
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: PUSH
44061: LD_INT 0
44063: PUSH
44064: LD_INT 1
44066: NEG
44067: PUSH
44068: EMPTY
44069: LIST
44070: LIST
44071: PUSH
44072: LD_INT 1
44074: PUSH
44075: LD_INT 0
44077: PUSH
44078: EMPTY
44079: LIST
44080: LIST
44081: PUSH
44082: LD_INT 1
44084: PUSH
44085: LD_INT 1
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: PUSH
44092: LD_INT 0
44094: PUSH
44095: LD_INT 1
44097: PUSH
44098: EMPTY
44099: LIST
44100: LIST
44101: PUSH
44102: LD_INT 1
44104: NEG
44105: PUSH
44106: LD_INT 0
44108: PUSH
44109: EMPTY
44110: LIST
44111: LIST
44112: PUSH
44113: LD_INT 1
44115: NEG
44116: PUSH
44117: LD_INT 1
44119: NEG
44120: PUSH
44121: EMPTY
44122: LIST
44123: LIST
44124: PUSH
44125: LD_INT 1
44127: NEG
44128: PUSH
44129: LD_INT 2
44131: NEG
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: PUSH
44137: LD_INT 0
44139: PUSH
44140: LD_INT 2
44142: NEG
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: PUSH
44148: LD_INT 1
44150: PUSH
44151: LD_INT 1
44153: NEG
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: PUSH
44159: LD_INT 2
44161: PUSH
44162: LD_INT 0
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: PUSH
44169: LD_INT 2
44171: PUSH
44172: LD_INT 1
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: PUSH
44179: LD_INT 2
44181: PUSH
44182: LD_INT 2
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: PUSH
44189: LD_INT 1
44191: PUSH
44192: LD_INT 2
44194: PUSH
44195: EMPTY
44196: LIST
44197: LIST
44198: PUSH
44199: LD_INT 0
44201: PUSH
44202: LD_INT 2
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: PUSH
44209: LD_INT 1
44211: NEG
44212: PUSH
44213: LD_INT 1
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PUSH
44220: LD_INT 2
44222: NEG
44223: PUSH
44224: LD_INT 0
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: PUSH
44231: LD_INT 2
44233: NEG
44234: PUSH
44235: LD_INT 1
44237: NEG
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: PUSH
44243: LD_INT 2
44245: NEG
44246: PUSH
44247: LD_INT 2
44249: NEG
44250: PUSH
44251: EMPTY
44252: LIST
44253: LIST
44254: PUSH
44255: LD_INT 1
44257: NEG
44258: PUSH
44259: LD_INT 2
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: PUSH
44266: LD_INT 2
44268: NEG
44269: PUSH
44270: LD_INT 1
44272: PUSH
44273: EMPTY
44274: LIST
44275: LIST
44276: PUSH
44277: LD_INT 3
44279: NEG
44280: PUSH
44281: LD_INT 1
44283: NEG
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: PUSH
44289: LD_INT 3
44291: NEG
44292: PUSH
44293: LD_INT 2
44295: NEG
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: PUSH
44301: EMPTY
44302: LIST
44303: LIST
44304: LIST
44305: LIST
44306: LIST
44307: LIST
44308: LIST
44309: LIST
44310: LIST
44311: LIST
44312: LIST
44313: LIST
44314: LIST
44315: LIST
44316: LIST
44317: LIST
44318: LIST
44319: LIST
44320: LIST
44321: LIST
44322: LIST
44323: LIST
44324: LIST
44325: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44326: LD_ADDR_VAR 0 28
44330: PUSH
44331: LD_INT 0
44333: PUSH
44334: LD_INT 0
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: PUSH
44341: LD_INT 0
44343: PUSH
44344: LD_INT 1
44346: NEG
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: PUSH
44352: LD_INT 1
44354: PUSH
44355: LD_INT 0
44357: PUSH
44358: EMPTY
44359: LIST
44360: LIST
44361: PUSH
44362: LD_INT 1
44364: PUSH
44365: LD_INT 1
44367: PUSH
44368: EMPTY
44369: LIST
44370: LIST
44371: PUSH
44372: LD_INT 0
44374: PUSH
44375: LD_INT 1
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: PUSH
44382: LD_INT 1
44384: NEG
44385: PUSH
44386: LD_INT 0
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: PUSH
44393: LD_INT 1
44395: NEG
44396: PUSH
44397: LD_INT 1
44399: NEG
44400: PUSH
44401: EMPTY
44402: LIST
44403: LIST
44404: PUSH
44405: LD_INT 1
44407: NEG
44408: PUSH
44409: LD_INT 2
44411: NEG
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: PUSH
44417: LD_INT 0
44419: PUSH
44420: LD_INT 2
44422: NEG
44423: PUSH
44424: EMPTY
44425: LIST
44426: LIST
44427: PUSH
44428: LD_INT 1
44430: PUSH
44431: LD_INT 1
44433: NEG
44434: PUSH
44435: EMPTY
44436: LIST
44437: LIST
44438: PUSH
44439: LD_INT 2
44441: PUSH
44442: LD_INT 0
44444: PUSH
44445: EMPTY
44446: LIST
44447: LIST
44448: PUSH
44449: LD_INT 2
44451: PUSH
44452: LD_INT 1
44454: PUSH
44455: EMPTY
44456: LIST
44457: LIST
44458: PUSH
44459: LD_INT 2
44461: PUSH
44462: LD_INT 2
44464: PUSH
44465: EMPTY
44466: LIST
44467: LIST
44468: PUSH
44469: LD_INT 1
44471: PUSH
44472: LD_INT 2
44474: PUSH
44475: EMPTY
44476: LIST
44477: LIST
44478: PUSH
44479: LD_INT 0
44481: PUSH
44482: LD_INT 2
44484: PUSH
44485: EMPTY
44486: LIST
44487: LIST
44488: PUSH
44489: LD_INT 1
44491: NEG
44492: PUSH
44493: LD_INT 1
44495: PUSH
44496: EMPTY
44497: LIST
44498: LIST
44499: PUSH
44500: LD_INT 2
44502: NEG
44503: PUSH
44504: LD_INT 0
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: PUSH
44511: LD_INT 2
44513: NEG
44514: PUSH
44515: LD_INT 1
44517: NEG
44518: PUSH
44519: EMPTY
44520: LIST
44521: LIST
44522: PUSH
44523: LD_INT 2
44525: NEG
44526: PUSH
44527: LD_INT 2
44529: NEG
44530: PUSH
44531: EMPTY
44532: LIST
44533: LIST
44534: PUSH
44535: LD_INT 2
44537: NEG
44538: PUSH
44539: LD_INT 3
44541: NEG
44542: PUSH
44543: EMPTY
44544: LIST
44545: LIST
44546: PUSH
44547: LD_INT 1
44549: NEG
44550: PUSH
44551: LD_INT 3
44553: NEG
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: PUSH
44559: LD_INT 3
44561: NEG
44562: PUSH
44563: LD_INT 1
44565: NEG
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: PUSH
44571: LD_INT 3
44573: NEG
44574: PUSH
44575: LD_INT 2
44577: NEG
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: LIST
44587: LIST
44588: LIST
44589: LIST
44590: LIST
44591: LIST
44592: LIST
44593: LIST
44594: LIST
44595: LIST
44596: LIST
44597: LIST
44598: LIST
44599: LIST
44600: LIST
44601: LIST
44602: LIST
44603: LIST
44604: LIST
44605: LIST
44606: LIST
44607: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44608: LD_ADDR_VAR 0 29
44612: PUSH
44613: LD_INT 0
44615: PUSH
44616: LD_INT 0
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: PUSH
44623: LD_INT 0
44625: PUSH
44626: LD_INT 1
44628: NEG
44629: PUSH
44630: EMPTY
44631: LIST
44632: LIST
44633: PUSH
44634: LD_INT 1
44636: PUSH
44637: LD_INT 0
44639: PUSH
44640: EMPTY
44641: LIST
44642: LIST
44643: PUSH
44644: LD_INT 1
44646: PUSH
44647: LD_INT 1
44649: PUSH
44650: EMPTY
44651: LIST
44652: LIST
44653: PUSH
44654: LD_INT 0
44656: PUSH
44657: LD_INT 1
44659: PUSH
44660: EMPTY
44661: LIST
44662: LIST
44663: PUSH
44664: LD_INT 1
44666: NEG
44667: PUSH
44668: LD_INT 0
44670: PUSH
44671: EMPTY
44672: LIST
44673: LIST
44674: PUSH
44675: LD_INT 1
44677: NEG
44678: PUSH
44679: LD_INT 1
44681: NEG
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: PUSH
44687: LD_INT 1
44689: NEG
44690: PUSH
44691: LD_INT 2
44693: NEG
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: PUSH
44699: LD_INT 0
44701: PUSH
44702: LD_INT 2
44704: NEG
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: PUSH
44710: LD_INT 1
44712: PUSH
44713: LD_INT 1
44715: NEG
44716: PUSH
44717: EMPTY
44718: LIST
44719: LIST
44720: PUSH
44721: LD_INT 2
44723: PUSH
44724: LD_INT 0
44726: PUSH
44727: EMPTY
44728: LIST
44729: LIST
44730: PUSH
44731: LD_INT 2
44733: PUSH
44734: LD_INT 1
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: LD_INT 1
44743: PUSH
44744: LD_INT 2
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: PUSH
44751: LD_INT 0
44753: PUSH
44754: LD_INT 2
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: PUSH
44761: LD_INT 1
44763: NEG
44764: PUSH
44765: LD_INT 1
44767: PUSH
44768: EMPTY
44769: LIST
44770: LIST
44771: PUSH
44772: LD_INT 2
44774: NEG
44775: PUSH
44776: LD_INT 1
44778: NEG
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: PUSH
44784: LD_INT 2
44786: NEG
44787: PUSH
44788: LD_INT 2
44790: NEG
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: LD_INT 2
44798: NEG
44799: PUSH
44800: LD_INT 3
44802: NEG
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: PUSH
44808: LD_INT 2
44810: PUSH
44811: LD_INT 1
44813: NEG
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: PUSH
44819: LD_INT 3
44821: PUSH
44822: LD_INT 1
44824: PUSH
44825: EMPTY
44826: LIST
44827: LIST
44828: PUSH
44829: LD_INT 1
44831: PUSH
44832: LD_INT 3
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: PUSH
44839: LD_INT 1
44841: NEG
44842: PUSH
44843: LD_INT 2
44845: PUSH
44846: EMPTY
44847: LIST
44848: LIST
44849: PUSH
44850: LD_INT 3
44852: NEG
44853: PUSH
44854: LD_INT 2
44856: NEG
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PUSH
44862: EMPTY
44863: LIST
44864: LIST
44865: LIST
44866: LIST
44867: LIST
44868: LIST
44869: LIST
44870: LIST
44871: LIST
44872: LIST
44873: LIST
44874: LIST
44875: LIST
44876: LIST
44877: LIST
44878: LIST
44879: LIST
44880: LIST
44881: LIST
44882: LIST
44883: LIST
44884: LIST
44885: LIST
44886: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44887: LD_ADDR_VAR 0 30
44891: PUSH
44892: LD_INT 0
44894: PUSH
44895: LD_INT 0
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: PUSH
44902: LD_INT 0
44904: PUSH
44905: LD_INT 1
44907: NEG
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: PUSH
44913: LD_INT 1
44915: PUSH
44916: LD_INT 0
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: PUSH
44923: LD_INT 1
44925: PUSH
44926: LD_INT 1
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: PUSH
44933: LD_INT 0
44935: PUSH
44936: LD_INT 1
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 1
44945: NEG
44946: PUSH
44947: LD_INT 0
44949: PUSH
44950: EMPTY
44951: LIST
44952: LIST
44953: PUSH
44954: LD_INT 1
44956: NEG
44957: PUSH
44958: LD_INT 1
44960: NEG
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: PUSH
44966: LD_INT 1
44968: NEG
44969: PUSH
44970: LD_INT 2
44972: NEG
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: LD_INT 0
44980: PUSH
44981: LD_INT 2
44983: NEG
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: PUSH
44989: LD_INT 1
44991: PUSH
44992: LD_INT 1
44994: NEG
44995: PUSH
44996: EMPTY
44997: LIST
44998: LIST
44999: PUSH
45000: LD_INT 2
45002: PUSH
45003: LD_INT 0
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: LD_INT 2
45012: PUSH
45013: LD_INT 1
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: PUSH
45020: LD_INT 2
45022: PUSH
45023: LD_INT 2
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: PUSH
45030: LD_INT 1
45032: PUSH
45033: LD_INT 2
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: PUSH
45040: LD_INT 1
45042: NEG
45043: PUSH
45044: LD_INT 1
45046: PUSH
45047: EMPTY
45048: LIST
45049: LIST
45050: PUSH
45051: LD_INT 2
45053: NEG
45054: PUSH
45055: LD_INT 0
45057: PUSH
45058: EMPTY
45059: LIST
45060: LIST
45061: PUSH
45062: LD_INT 2
45064: NEG
45065: PUSH
45066: LD_INT 1
45068: NEG
45069: PUSH
45070: EMPTY
45071: LIST
45072: LIST
45073: PUSH
45074: LD_INT 1
45076: NEG
45077: PUSH
45078: LD_INT 3
45080: NEG
45081: PUSH
45082: EMPTY
45083: LIST
45084: LIST
45085: PUSH
45086: LD_INT 1
45088: PUSH
45089: LD_INT 2
45091: NEG
45092: PUSH
45093: EMPTY
45094: LIST
45095: LIST
45096: PUSH
45097: LD_INT 3
45099: PUSH
45100: LD_INT 2
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: LD_INT 2
45109: PUSH
45110: LD_INT 3
45112: PUSH
45113: EMPTY
45114: LIST
45115: LIST
45116: PUSH
45117: LD_INT 2
45119: NEG
45120: PUSH
45121: LD_INT 1
45123: PUSH
45124: EMPTY
45125: LIST
45126: LIST
45127: PUSH
45128: LD_INT 3
45130: NEG
45131: PUSH
45132: LD_INT 1
45134: NEG
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: LIST
45144: LIST
45145: LIST
45146: LIST
45147: LIST
45148: LIST
45149: LIST
45150: LIST
45151: LIST
45152: LIST
45153: LIST
45154: LIST
45155: LIST
45156: LIST
45157: LIST
45158: LIST
45159: LIST
45160: LIST
45161: LIST
45162: LIST
45163: LIST
45164: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45165: LD_ADDR_VAR 0 31
45169: PUSH
45170: LD_INT 0
45172: PUSH
45173: LD_INT 0
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: PUSH
45180: LD_INT 0
45182: PUSH
45183: LD_INT 1
45185: NEG
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: PUSH
45191: LD_INT 1
45193: PUSH
45194: LD_INT 0
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: PUSH
45201: LD_INT 1
45203: PUSH
45204: LD_INT 1
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: PUSH
45211: LD_INT 0
45213: PUSH
45214: LD_INT 1
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: PUSH
45221: LD_INT 1
45223: NEG
45224: PUSH
45225: LD_INT 0
45227: PUSH
45228: EMPTY
45229: LIST
45230: LIST
45231: PUSH
45232: LD_INT 1
45234: NEG
45235: PUSH
45236: LD_INT 1
45238: NEG
45239: PUSH
45240: EMPTY
45241: LIST
45242: LIST
45243: PUSH
45244: LD_INT 1
45246: NEG
45247: PUSH
45248: LD_INT 2
45250: NEG
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: PUSH
45256: LD_INT 1
45258: PUSH
45259: LD_INT 1
45261: NEG
45262: PUSH
45263: EMPTY
45264: LIST
45265: LIST
45266: PUSH
45267: LD_INT 2
45269: PUSH
45270: LD_INT 0
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: PUSH
45277: LD_INT 2
45279: PUSH
45280: LD_INT 1
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 2
45289: PUSH
45290: LD_INT 2
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: PUSH
45297: LD_INT 1
45299: PUSH
45300: LD_INT 2
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: PUSH
45307: LD_INT 0
45309: PUSH
45310: LD_INT 2
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PUSH
45317: LD_INT 1
45319: NEG
45320: PUSH
45321: LD_INT 1
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: PUSH
45328: LD_INT 2
45330: NEG
45331: PUSH
45332: LD_INT 1
45334: NEG
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: PUSH
45340: LD_INT 2
45342: NEG
45343: PUSH
45344: LD_INT 2
45346: NEG
45347: PUSH
45348: EMPTY
45349: LIST
45350: LIST
45351: PUSH
45352: LD_INT 2
45354: NEG
45355: PUSH
45356: LD_INT 3
45358: NEG
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: PUSH
45364: LD_INT 2
45366: PUSH
45367: LD_INT 1
45369: NEG
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: PUSH
45375: LD_INT 3
45377: PUSH
45378: LD_INT 1
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: PUSH
45385: LD_INT 1
45387: PUSH
45388: LD_INT 3
45390: PUSH
45391: EMPTY
45392: LIST
45393: LIST
45394: PUSH
45395: LD_INT 1
45397: NEG
45398: PUSH
45399: LD_INT 2
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: PUSH
45406: LD_INT 3
45408: NEG
45409: PUSH
45410: LD_INT 2
45412: NEG
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: LIST
45422: LIST
45423: LIST
45424: LIST
45425: LIST
45426: LIST
45427: LIST
45428: LIST
45429: LIST
45430: LIST
45431: LIST
45432: LIST
45433: LIST
45434: LIST
45435: LIST
45436: LIST
45437: LIST
45438: LIST
45439: LIST
45440: LIST
45441: LIST
45442: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45443: LD_ADDR_VAR 0 32
45447: PUSH
45448: LD_INT 0
45450: PUSH
45451: LD_INT 0
45453: PUSH
45454: EMPTY
45455: LIST
45456: LIST
45457: PUSH
45458: LD_INT 0
45460: PUSH
45461: LD_INT 1
45463: NEG
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: PUSH
45469: LD_INT 1
45471: PUSH
45472: LD_INT 0
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: PUSH
45479: LD_INT 1
45481: PUSH
45482: LD_INT 1
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: PUSH
45489: LD_INT 0
45491: PUSH
45492: LD_INT 1
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: PUSH
45499: LD_INT 1
45501: NEG
45502: PUSH
45503: LD_INT 0
45505: PUSH
45506: EMPTY
45507: LIST
45508: LIST
45509: PUSH
45510: LD_INT 1
45512: NEG
45513: PUSH
45514: LD_INT 1
45516: NEG
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: PUSH
45522: LD_INT 1
45524: NEG
45525: PUSH
45526: LD_INT 2
45528: NEG
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: PUSH
45534: LD_INT 0
45536: PUSH
45537: LD_INT 2
45539: NEG
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: PUSH
45545: LD_INT 1
45547: PUSH
45548: LD_INT 1
45550: NEG
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: PUSH
45556: LD_INT 2
45558: PUSH
45559: LD_INT 1
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: LD_INT 2
45568: PUSH
45569: LD_INT 2
45571: PUSH
45572: EMPTY
45573: LIST
45574: LIST
45575: PUSH
45576: LD_INT 1
45578: PUSH
45579: LD_INT 2
45581: PUSH
45582: EMPTY
45583: LIST
45584: LIST
45585: PUSH
45586: LD_INT 0
45588: PUSH
45589: LD_INT 2
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: PUSH
45596: LD_INT 1
45598: NEG
45599: PUSH
45600: LD_INT 1
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: PUSH
45607: LD_INT 2
45609: NEG
45610: PUSH
45611: LD_INT 0
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: PUSH
45618: LD_INT 2
45620: NEG
45621: PUSH
45622: LD_INT 1
45624: NEG
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: PUSH
45630: LD_INT 1
45632: NEG
45633: PUSH
45634: LD_INT 3
45636: NEG
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: LD_INT 1
45644: PUSH
45645: LD_INT 2
45647: NEG
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PUSH
45653: LD_INT 3
45655: PUSH
45656: LD_INT 2
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: PUSH
45663: LD_INT 2
45665: PUSH
45666: LD_INT 3
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: LD_INT 2
45675: NEG
45676: PUSH
45677: LD_INT 1
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PUSH
45684: LD_INT 3
45686: NEG
45687: PUSH
45688: LD_INT 1
45690: NEG
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: PUSH
45696: EMPTY
45697: LIST
45698: LIST
45699: LIST
45700: LIST
45701: LIST
45702: LIST
45703: LIST
45704: LIST
45705: LIST
45706: LIST
45707: LIST
45708: LIST
45709: LIST
45710: LIST
45711: LIST
45712: LIST
45713: LIST
45714: LIST
45715: LIST
45716: LIST
45717: LIST
45718: LIST
45719: LIST
45720: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45721: LD_ADDR_VAR 0 33
45725: PUSH
45726: LD_INT 0
45728: PUSH
45729: LD_INT 0
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: PUSH
45736: LD_INT 0
45738: PUSH
45739: LD_INT 1
45741: NEG
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: LD_INT 1
45749: PUSH
45750: LD_INT 0
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: PUSH
45757: LD_INT 1
45759: PUSH
45760: LD_INT 1
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: PUSH
45767: LD_INT 0
45769: PUSH
45770: LD_INT 1
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: PUSH
45777: LD_INT 1
45779: NEG
45780: PUSH
45781: LD_INT 0
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: PUSH
45788: LD_INT 1
45790: NEG
45791: PUSH
45792: LD_INT 1
45794: NEG
45795: PUSH
45796: EMPTY
45797: LIST
45798: LIST
45799: PUSH
45800: LD_INT 1
45802: NEG
45803: PUSH
45804: LD_INT 2
45806: NEG
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: PUSH
45812: LD_INT 1
45814: PUSH
45815: LD_INT 1
45817: NEG
45818: PUSH
45819: EMPTY
45820: LIST
45821: LIST
45822: PUSH
45823: LD_INT 2
45825: PUSH
45826: LD_INT 0
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: PUSH
45833: LD_INT 2
45835: PUSH
45836: LD_INT 1
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: PUSH
45843: LD_INT 1
45845: PUSH
45846: LD_INT 2
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: PUSH
45853: LD_INT 0
45855: PUSH
45856: LD_INT 2
45858: PUSH
45859: EMPTY
45860: LIST
45861: LIST
45862: PUSH
45863: LD_INT 1
45865: NEG
45866: PUSH
45867: LD_INT 1
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: PUSH
45874: LD_INT 2
45876: NEG
45877: PUSH
45878: LD_INT 0
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: LD_INT 2
45887: NEG
45888: PUSH
45889: LD_INT 1
45891: NEG
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: PUSH
45897: LD_INT 2
45899: NEG
45900: PUSH
45901: LD_INT 2
45903: NEG
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: PUSH
45909: LD_INT 2
45911: NEG
45912: PUSH
45913: LD_INT 3
45915: NEG
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: LD_INT 2
45923: PUSH
45924: LD_INT 1
45926: NEG
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: PUSH
45932: LD_INT 3
45934: PUSH
45935: LD_INT 1
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: PUSH
45942: LD_INT 1
45944: PUSH
45945: LD_INT 3
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: PUSH
45952: LD_INT 1
45954: NEG
45955: PUSH
45956: LD_INT 2
45958: PUSH
45959: EMPTY
45960: LIST
45961: LIST
45962: PUSH
45963: LD_INT 3
45965: NEG
45966: PUSH
45967: LD_INT 2
45969: NEG
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: LIST
45979: LIST
45980: LIST
45981: LIST
45982: LIST
45983: LIST
45984: LIST
45985: LIST
45986: LIST
45987: LIST
45988: LIST
45989: LIST
45990: LIST
45991: LIST
45992: LIST
45993: LIST
45994: LIST
45995: LIST
45996: LIST
45997: LIST
45998: LIST
45999: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46000: LD_ADDR_VAR 0 34
46004: PUSH
46005: LD_INT 0
46007: PUSH
46008: LD_INT 0
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: PUSH
46015: LD_INT 0
46017: PUSH
46018: LD_INT 1
46020: NEG
46021: PUSH
46022: EMPTY
46023: LIST
46024: LIST
46025: PUSH
46026: LD_INT 1
46028: PUSH
46029: LD_INT 0
46031: PUSH
46032: EMPTY
46033: LIST
46034: LIST
46035: PUSH
46036: LD_INT 1
46038: PUSH
46039: LD_INT 1
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: PUSH
46046: LD_INT 0
46048: PUSH
46049: LD_INT 1
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: PUSH
46056: LD_INT 1
46058: NEG
46059: PUSH
46060: LD_INT 0
46062: PUSH
46063: EMPTY
46064: LIST
46065: LIST
46066: PUSH
46067: LD_INT 1
46069: NEG
46070: PUSH
46071: LD_INT 1
46073: NEG
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: PUSH
46079: LD_INT 1
46081: NEG
46082: PUSH
46083: LD_INT 2
46085: NEG
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: PUSH
46091: LD_INT 0
46093: PUSH
46094: LD_INT 2
46096: NEG
46097: PUSH
46098: EMPTY
46099: LIST
46100: LIST
46101: PUSH
46102: LD_INT 1
46104: PUSH
46105: LD_INT 1
46107: NEG
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: PUSH
46113: LD_INT 2
46115: PUSH
46116: LD_INT 1
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: PUSH
46123: LD_INT 2
46125: PUSH
46126: LD_INT 2
46128: PUSH
46129: EMPTY
46130: LIST
46131: LIST
46132: PUSH
46133: LD_INT 1
46135: PUSH
46136: LD_INT 2
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: PUSH
46143: LD_INT 1
46145: NEG
46146: PUSH
46147: LD_INT 1
46149: PUSH
46150: EMPTY
46151: LIST
46152: LIST
46153: PUSH
46154: LD_INT 2
46156: NEG
46157: PUSH
46158: LD_INT 0
46160: PUSH
46161: EMPTY
46162: LIST
46163: LIST
46164: PUSH
46165: LD_INT 2
46167: NEG
46168: PUSH
46169: LD_INT 1
46171: NEG
46172: PUSH
46173: EMPTY
46174: LIST
46175: LIST
46176: PUSH
46177: LD_INT 2
46179: NEG
46180: PUSH
46181: LD_INT 2
46183: NEG
46184: PUSH
46185: EMPTY
46186: LIST
46187: LIST
46188: PUSH
46189: LD_INT 1
46191: NEG
46192: PUSH
46193: LD_INT 3
46195: NEG
46196: PUSH
46197: EMPTY
46198: LIST
46199: LIST
46200: PUSH
46201: LD_INT 1
46203: PUSH
46204: LD_INT 2
46206: NEG
46207: PUSH
46208: EMPTY
46209: LIST
46210: LIST
46211: PUSH
46212: LD_INT 3
46214: PUSH
46215: LD_INT 2
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: PUSH
46222: LD_INT 2
46224: PUSH
46225: LD_INT 3
46227: PUSH
46228: EMPTY
46229: LIST
46230: LIST
46231: PUSH
46232: LD_INT 2
46234: NEG
46235: PUSH
46236: LD_INT 1
46238: PUSH
46239: EMPTY
46240: LIST
46241: LIST
46242: PUSH
46243: LD_INT 3
46245: NEG
46246: PUSH
46247: LD_INT 1
46249: NEG
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: LIST
46259: LIST
46260: LIST
46261: LIST
46262: LIST
46263: LIST
46264: LIST
46265: LIST
46266: LIST
46267: LIST
46268: LIST
46269: LIST
46270: LIST
46271: LIST
46272: LIST
46273: LIST
46274: LIST
46275: LIST
46276: LIST
46277: LIST
46278: LIST
46279: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46280: LD_ADDR_VAR 0 35
46284: PUSH
46285: LD_INT 0
46287: PUSH
46288: LD_INT 0
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: PUSH
46295: LD_INT 0
46297: PUSH
46298: LD_INT 1
46300: NEG
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 1
46308: PUSH
46309: LD_INT 0
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: PUSH
46316: LD_INT 1
46318: PUSH
46319: LD_INT 1
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: PUSH
46326: LD_INT 0
46328: PUSH
46329: LD_INT 1
46331: PUSH
46332: EMPTY
46333: LIST
46334: LIST
46335: PUSH
46336: LD_INT 1
46338: NEG
46339: PUSH
46340: LD_INT 0
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: PUSH
46347: LD_INT 1
46349: NEG
46350: PUSH
46351: LD_INT 1
46353: NEG
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: PUSH
46359: LD_INT 2
46361: PUSH
46362: LD_INT 1
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: LD_INT 2
46371: NEG
46372: PUSH
46373: LD_INT 1
46375: NEG
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: LIST
46385: LIST
46386: LIST
46387: LIST
46388: LIST
46389: LIST
46390: LIST
46391: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46392: LD_ADDR_VAR 0 36
46396: PUSH
46397: LD_INT 0
46399: PUSH
46400: LD_INT 0
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: PUSH
46407: LD_INT 0
46409: PUSH
46410: LD_INT 1
46412: NEG
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: PUSH
46418: LD_INT 1
46420: PUSH
46421: LD_INT 0
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: PUSH
46428: LD_INT 1
46430: PUSH
46431: LD_INT 1
46433: PUSH
46434: EMPTY
46435: LIST
46436: LIST
46437: PUSH
46438: LD_INT 0
46440: PUSH
46441: LD_INT 1
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: PUSH
46448: LD_INT 1
46450: NEG
46451: PUSH
46452: LD_INT 0
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: PUSH
46459: LD_INT 1
46461: NEG
46462: PUSH
46463: LD_INT 1
46465: NEG
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: PUSH
46471: LD_INT 1
46473: NEG
46474: PUSH
46475: LD_INT 2
46477: NEG
46478: PUSH
46479: EMPTY
46480: LIST
46481: LIST
46482: PUSH
46483: LD_INT 1
46485: PUSH
46486: LD_INT 2
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: LIST
46497: LIST
46498: LIST
46499: LIST
46500: LIST
46501: LIST
46502: LIST
46503: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46504: LD_ADDR_VAR 0 37
46508: PUSH
46509: LD_INT 0
46511: PUSH
46512: LD_INT 0
46514: PUSH
46515: EMPTY
46516: LIST
46517: LIST
46518: PUSH
46519: LD_INT 0
46521: PUSH
46522: LD_INT 1
46524: NEG
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: PUSH
46530: LD_INT 1
46532: PUSH
46533: LD_INT 0
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: PUSH
46540: LD_INT 1
46542: PUSH
46543: LD_INT 1
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: PUSH
46550: LD_INT 0
46552: PUSH
46553: LD_INT 1
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: PUSH
46560: LD_INT 1
46562: NEG
46563: PUSH
46564: LD_INT 0
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: LD_INT 1
46573: NEG
46574: PUSH
46575: LD_INT 1
46577: NEG
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: PUSH
46583: LD_INT 1
46585: PUSH
46586: LD_INT 1
46588: NEG
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: PUSH
46594: LD_INT 1
46596: NEG
46597: PUSH
46598: LD_INT 1
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: LIST
46609: LIST
46610: LIST
46611: LIST
46612: LIST
46613: LIST
46614: LIST
46615: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46616: LD_ADDR_VAR 0 38
46620: PUSH
46621: LD_INT 0
46623: PUSH
46624: LD_INT 0
46626: PUSH
46627: EMPTY
46628: LIST
46629: LIST
46630: PUSH
46631: LD_INT 0
46633: PUSH
46634: LD_INT 1
46636: NEG
46637: PUSH
46638: EMPTY
46639: LIST
46640: LIST
46641: PUSH
46642: LD_INT 1
46644: PUSH
46645: LD_INT 0
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: PUSH
46652: LD_INT 1
46654: PUSH
46655: LD_INT 1
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: PUSH
46662: LD_INT 0
46664: PUSH
46665: LD_INT 1
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: PUSH
46672: LD_INT 1
46674: NEG
46675: PUSH
46676: LD_INT 0
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: PUSH
46683: LD_INT 1
46685: NEG
46686: PUSH
46687: LD_INT 1
46689: NEG
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: LD_INT 2
46697: PUSH
46698: LD_INT 1
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: LD_INT 2
46707: NEG
46708: PUSH
46709: LD_INT 1
46711: NEG
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: LIST
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46728: LD_ADDR_VAR 0 39
46732: PUSH
46733: LD_INT 0
46735: PUSH
46736: LD_INT 0
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: PUSH
46743: LD_INT 0
46745: PUSH
46746: LD_INT 1
46748: NEG
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: LD_INT 1
46756: PUSH
46757: LD_INT 0
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: PUSH
46764: LD_INT 1
46766: PUSH
46767: LD_INT 1
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: PUSH
46774: LD_INT 0
46776: PUSH
46777: LD_INT 1
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: PUSH
46784: LD_INT 1
46786: NEG
46787: PUSH
46788: LD_INT 0
46790: PUSH
46791: EMPTY
46792: LIST
46793: LIST
46794: PUSH
46795: LD_INT 1
46797: NEG
46798: PUSH
46799: LD_INT 1
46801: NEG
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: PUSH
46807: LD_INT 1
46809: NEG
46810: PUSH
46811: LD_INT 2
46813: NEG
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: LD_INT 1
46821: PUSH
46822: LD_INT 2
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: LIST
46833: LIST
46834: LIST
46835: LIST
46836: LIST
46837: LIST
46838: LIST
46839: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46840: LD_ADDR_VAR 0 40
46844: PUSH
46845: LD_INT 0
46847: PUSH
46848: LD_INT 0
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: PUSH
46855: LD_INT 0
46857: PUSH
46858: LD_INT 1
46860: NEG
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: PUSH
46866: LD_INT 1
46868: PUSH
46869: LD_INT 0
46871: PUSH
46872: EMPTY
46873: LIST
46874: LIST
46875: PUSH
46876: LD_INT 1
46878: PUSH
46879: LD_INT 1
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: PUSH
46886: LD_INT 0
46888: PUSH
46889: LD_INT 1
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: PUSH
46896: LD_INT 1
46898: NEG
46899: PUSH
46900: LD_INT 0
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: PUSH
46907: LD_INT 1
46909: NEG
46910: PUSH
46911: LD_INT 1
46913: NEG
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: LD_INT 1
46921: PUSH
46922: LD_INT 1
46924: NEG
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: PUSH
46930: LD_INT 1
46932: NEG
46933: PUSH
46934: LD_INT 1
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: LIST
46945: LIST
46946: LIST
46947: LIST
46948: LIST
46949: LIST
46950: LIST
46951: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46952: LD_ADDR_VAR 0 41
46956: PUSH
46957: LD_INT 0
46959: PUSH
46960: LD_INT 0
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: PUSH
46967: LD_INT 0
46969: PUSH
46970: LD_INT 1
46972: NEG
46973: PUSH
46974: EMPTY
46975: LIST
46976: LIST
46977: PUSH
46978: LD_INT 1
46980: PUSH
46981: LD_INT 0
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: PUSH
46988: LD_INT 1
46990: PUSH
46991: LD_INT 1
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: PUSH
46998: LD_INT 0
47000: PUSH
47001: LD_INT 1
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: PUSH
47008: LD_INT 1
47010: NEG
47011: PUSH
47012: LD_INT 0
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: PUSH
47019: LD_INT 1
47021: NEG
47022: PUSH
47023: LD_INT 1
47025: NEG
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: PUSH
47031: LD_INT 1
47033: NEG
47034: PUSH
47035: LD_INT 2
47037: NEG
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: LD_INT 1
47045: PUSH
47046: LD_INT 1
47048: NEG
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: PUSH
47054: LD_INT 2
47056: PUSH
47057: LD_INT 0
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: LD_INT 2
47066: PUSH
47067: LD_INT 1
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: PUSH
47074: LD_INT 2
47076: PUSH
47077: LD_INT 2
47079: PUSH
47080: EMPTY
47081: LIST
47082: LIST
47083: PUSH
47084: LD_INT 1
47086: PUSH
47087: LD_INT 2
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: PUSH
47094: LD_INT 1
47096: NEG
47097: PUSH
47098: LD_INT 1
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: PUSH
47105: LD_INT 2
47107: NEG
47108: PUSH
47109: LD_INT 0
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: LD_INT 2
47118: NEG
47119: PUSH
47120: LD_INT 1
47122: NEG
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: PUSH
47128: LD_INT 2
47130: NEG
47131: PUSH
47132: LD_INT 2
47134: NEG
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: PUSH
47140: LD_INT 2
47142: NEG
47143: PUSH
47144: LD_INT 3
47146: NEG
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: PUSH
47152: LD_INT 2
47154: PUSH
47155: LD_INT 1
47157: NEG
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: LD_INT 3
47165: PUSH
47166: LD_INT 0
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: PUSH
47173: LD_INT 3
47175: PUSH
47176: LD_INT 1
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: PUSH
47183: LD_INT 3
47185: PUSH
47186: LD_INT 2
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 3
47195: PUSH
47196: LD_INT 3
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: LD_INT 2
47205: PUSH
47206: LD_INT 3
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: PUSH
47213: LD_INT 2
47215: NEG
47216: PUSH
47217: LD_INT 1
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: PUSH
47224: LD_INT 3
47226: NEG
47227: PUSH
47228: LD_INT 0
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: PUSH
47235: LD_INT 3
47237: NEG
47238: PUSH
47239: LD_INT 1
47241: NEG
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: PUSH
47247: LD_INT 3
47249: NEG
47250: PUSH
47251: LD_INT 2
47253: NEG
47254: PUSH
47255: EMPTY
47256: LIST
47257: LIST
47258: PUSH
47259: LD_INT 3
47261: NEG
47262: PUSH
47263: LD_INT 3
47265: NEG
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: LIST
47282: LIST
47283: LIST
47284: LIST
47285: LIST
47286: LIST
47287: LIST
47288: LIST
47289: LIST
47290: LIST
47291: LIST
47292: LIST
47293: LIST
47294: LIST
47295: LIST
47296: LIST
47297: LIST
47298: LIST
47299: LIST
47300: LIST
47301: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47302: LD_ADDR_VAR 0 42
47306: PUSH
47307: LD_INT 0
47309: PUSH
47310: LD_INT 0
47312: PUSH
47313: EMPTY
47314: LIST
47315: LIST
47316: PUSH
47317: LD_INT 0
47319: PUSH
47320: LD_INT 1
47322: NEG
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 1
47330: PUSH
47331: LD_INT 0
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: LD_INT 1
47340: PUSH
47341: LD_INT 1
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: PUSH
47348: LD_INT 0
47350: PUSH
47351: LD_INT 1
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: PUSH
47358: LD_INT 1
47360: NEG
47361: PUSH
47362: LD_INT 0
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: PUSH
47369: LD_INT 1
47371: NEG
47372: PUSH
47373: LD_INT 1
47375: NEG
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PUSH
47381: LD_INT 1
47383: NEG
47384: PUSH
47385: LD_INT 2
47387: NEG
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: PUSH
47393: LD_INT 0
47395: PUSH
47396: LD_INT 2
47398: NEG
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PUSH
47404: LD_INT 1
47406: PUSH
47407: LD_INT 1
47409: NEG
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: PUSH
47415: LD_INT 2
47417: PUSH
47418: LD_INT 1
47420: PUSH
47421: EMPTY
47422: LIST
47423: LIST
47424: PUSH
47425: LD_INT 2
47427: PUSH
47428: LD_INT 2
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: PUSH
47435: LD_INT 1
47437: PUSH
47438: LD_INT 2
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: PUSH
47445: LD_INT 0
47447: PUSH
47448: LD_INT 2
47450: PUSH
47451: EMPTY
47452: LIST
47453: LIST
47454: PUSH
47455: LD_INT 1
47457: NEG
47458: PUSH
47459: LD_INT 1
47461: PUSH
47462: EMPTY
47463: LIST
47464: LIST
47465: PUSH
47466: LD_INT 2
47468: NEG
47469: PUSH
47470: LD_INT 1
47472: NEG
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: LD_INT 2
47480: NEG
47481: PUSH
47482: LD_INT 2
47484: NEG
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: PUSH
47490: LD_INT 2
47492: NEG
47493: PUSH
47494: LD_INT 3
47496: NEG
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: PUSH
47502: LD_INT 1
47504: NEG
47505: PUSH
47506: LD_INT 3
47508: NEG
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: PUSH
47514: LD_INT 0
47516: PUSH
47517: LD_INT 3
47519: NEG
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: PUSH
47525: LD_INT 1
47527: PUSH
47528: LD_INT 2
47530: NEG
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PUSH
47536: LD_INT 3
47538: PUSH
47539: LD_INT 2
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: PUSH
47546: LD_INT 3
47548: PUSH
47549: LD_INT 3
47551: PUSH
47552: EMPTY
47553: LIST
47554: LIST
47555: PUSH
47556: LD_INT 2
47558: PUSH
47559: LD_INT 3
47561: PUSH
47562: EMPTY
47563: LIST
47564: LIST
47565: PUSH
47566: LD_INT 1
47568: PUSH
47569: LD_INT 3
47571: PUSH
47572: EMPTY
47573: LIST
47574: LIST
47575: PUSH
47576: LD_INT 0
47578: PUSH
47579: LD_INT 3
47581: PUSH
47582: EMPTY
47583: LIST
47584: LIST
47585: PUSH
47586: LD_INT 1
47588: NEG
47589: PUSH
47590: LD_INT 2
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: PUSH
47597: LD_INT 3
47599: NEG
47600: PUSH
47601: LD_INT 2
47603: NEG
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: PUSH
47609: LD_INT 3
47611: NEG
47612: PUSH
47613: LD_INT 3
47615: NEG
47616: PUSH
47617: EMPTY
47618: LIST
47619: LIST
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: LIST
47633: LIST
47634: LIST
47635: LIST
47636: LIST
47637: LIST
47638: LIST
47639: LIST
47640: LIST
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: LIST
47647: LIST
47648: LIST
47649: LIST
47650: LIST
47651: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47652: LD_ADDR_VAR 0 43
47656: PUSH
47657: LD_INT 0
47659: PUSH
47660: LD_INT 0
47662: PUSH
47663: EMPTY
47664: LIST
47665: LIST
47666: PUSH
47667: LD_INT 0
47669: PUSH
47670: LD_INT 1
47672: NEG
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: PUSH
47678: LD_INT 1
47680: PUSH
47681: LD_INT 0
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: LD_INT 1
47690: PUSH
47691: LD_INT 1
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: PUSH
47698: LD_INT 0
47700: PUSH
47701: LD_INT 1
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: PUSH
47708: LD_INT 1
47710: NEG
47711: PUSH
47712: LD_INT 0
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: PUSH
47719: LD_INT 1
47721: NEG
47722: PUSH
47723: LD_INT 1
47725: NEG
47726: PUSH
47727: EMPTY
47728: LIST
47729: LIST
47730: PUSH
47731: LD_INT 1
47733: NEG
47734: PUSH
47735: LD_INT 2
47737: NEG
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: PUSH
47743: LD_INT 0
47745: PUSH
47746: LD_INT 2
47748: NEG
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: PUSH
47754: LD_INT 1
47756: PUSH
47757: LD_INT 1
47759: NEG
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: LD_INT 2
47767: PUSH
47768: LD_INT 0
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: PUSH
47775: LD_INT 2
47777: PUSH
47778: LD_INT 1
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 1
47787: PUSH
47788: LD_INT 2
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PUSH
47795: LD_INT 0
47797: PUSH
47798: LD_INT 2
47800: PUSH
47801: EMPTY
47802: LIST
47803: LIST
47804: PUSH
47805: LD_INT 1
47807: NEG
47808: PUSH
47809: LD_INT 1
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PUSH
47816: LD_INT 2
47818: NEG
47819: PUSH
47820: LD_INT 0
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: PUSH
47827: LD_INT 2
47829: NEG
47830: PUSH
47831: LD_INT 1
47833: NEG
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: PUSH
47839: LD_INT 1
47841: NEG
47842: PUSH
47843: LD_INT 3
47845: NEG
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 0
47853: PUSH
47854: LD_INT 3
47856: NEG
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: LD_INT 1
47864: PUSH
47865: LD_INT 2
47867: NEG
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: PUSH
47873: LD_INT 2
47875: PUSH
47876: LD_INT 1
47878: NEG
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: PUSH
47884: LD_INT 3
47886: PUSH
47887: LD_INT 0
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: PUSH
47894: LD_INT 3
47896: PUSH
47897: LD_INT 1
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: LD_INT 1
47906: PUSH
47907: LD_INT 3
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: LD_INT 0
47916: PUSH
47917: LD_INT 3
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: PUSH
47924: LD_INT 1
47926: NEG
47927: PUSH
47928: LD_INT 2
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: PUSH
47935: LD_INT 2
47937: NEG
47938: PUSH
47939: LD_INT 1
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: PUSH
47946: LD_INT 3
47948: NEG
47949: PUSH
47950: LD_INT 0
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: PUSH
47957: LD_INT 3
47959: NEG
47960: PUSH
47961: LD_INT 1
47963: NEG
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: LIST
47973: LIST
47974: LIST
47975: LIST
47976: LIST
47977: LIST
47978: LIST
47979: LIST
47980: LIST
47981: LIST
47982: LIST
47983: LIST
47984: LIST
47985: LIST
47986: LIST
47987: LIST
47988: LIST
47989: LIST
47990: LIST
47991: LIST
47992: LIST
47993: LIST
47994: LIST
47995: LIST
47996: LIST
47997: LIST
47998: LIST
47999: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48000: LD_ADDR_VAR 0 44
48004: PUSH
48005: LD_INT 0
48007: PUSH
48008: LD_INT 0
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: PUSH
48015: LD_INT 0
48017: PUSH
48018: LD_INT 1
48020: NEG
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: PUSH
48026: LD_INT 1
48028: PUSH
48029: LD_INT 0
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: PUSH
48036: LD_INT 1
48038: PUSH
48039: LD_INT 1
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: PUSH
48046: LD_INT 0
48048: PUSH
48049: LD_INT 1
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: PUSH
48056: LD_INT 1
48058: NEG
48059: PUSH
48060: LD_INT 0
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: PUSH
48067: LD_INT 1
48069: NEG
48070: PUSH
48071: LD_INT 1
48073: NEG
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: PUSH
48079: LD_INT 1
48081: NEG
48082: PUSH
48083: LD_INT 2
48085: NEG
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: PUSH
48091: LD_INT 1
48093: PUSH
48094: LD_INT 1
48096: NEG
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: LD_INT 2
48104: PUSH
48105: LD_INT 0
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: PUSH
48112: LD_INT 2
48114: PUSH
48115: LD_INT 1
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_INT 2
48124: PUSH
48125: LD_INT 2
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: PUSH
48132: LD_INT 1
48134: PUSH
48135: LD_INT 2
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: PUSH
48142: LD_INT 1
48144: NEG
48145: PUSH
48146: LD_INT 1
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: PUSH
48153: LD_INT 2
48155: NEG
48156: PUSH
48157: LD_INT 0
48159: PUSH
48160: EMPTY
48161: LIST
48162: LIST
48163: PUSH
48164: LD_INT 2
48166: NEG
48167: PUSH
48168: LD_INT 1
48170: NEG
48171: PUSH
48172: EMPTY
48173: LIST
48174: LIST
48175: PUSH
48176: LD_INT 2
48178: NEG
48179: PUSH
48180: LD_INT 2
48182: NEG
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: PUSH
48188: LD_INT 2
48190: NEG
48191: PUSH
48192: LD_INT 3
48194: NEG
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: PUSH
48200: LD_INT 2
48202: PUSH
48203: LD_INT 1
48205: NEG
48206: PUSH
48207: EMPTY
48208: LIST
48209: LIST
48210: PUSH
48211: LD_INT 3
48213: PUSH
48214: LD_INT 0
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: PUSH
48221: LD_INT 3
48223: PUSH
48224: LD_INT 1
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: LD_INT 3
48233: PUSH
48234: LD_INT 2
48236: PUSH
48237: EMPTY
48238: LIST
48239: LIST
48240: PUSH
48241: LD_INT 3
48243: PUSH
48244: LD_INT 3
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: PUSH
48251: LD_INT 2
48253: PUSH
48254: LD_INT 3
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: LD_INT 2
48263: NEG
48264: PUSH
48265: LD_INT 1
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 3
48274: NEG
48275: PUSH
48276: LD_INT 0
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: PUSH
48283: LD_INT 3
48285: NEG
48286: PUSH
48287: LD_INT 1
48289: NEG
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: PUSH
48295: LD_INT 3
48297: NEG
48298: PUSH
48299: LD_INT 2
48301: NEG
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: PUSH
48307: LD_INT 3
48309: NEG
48310: PUSH
48311: LD_INT 3
48313: NEG
48314: PUSH
48315: EMPTY
48316: LIST
48317: LIST
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: LIST
48325: LIST
48326: LIST
48327: LIST
48328: LIST
48329: LIST
48330: LIST
48331: LIST
48332: LIST
48333: LIST
48334: LIST
48335: LIST
48336: LIST
48337: LIST
48338: LIST
48339: LIST
48340: LIST
48341: LIST
48342: LIST
48343: LIST
48344: LIST
48345: LIST
48346: LIST
48347: LIST
48348: LIST
48349: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48350: LD_ADDR_VAR 0 45
48354: PUSH
48355: LD_INT 0
48357: PUSH
48358: LD_INT 0
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: PUSH
48365: LD_INT 0
48367: PUSH
48368: LD_INT 1
48370: NEG
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: PUSH
48376: LD_INT 1
48378: PUSH
48379: LD_INT 0
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: LD_INT 1
48388: PUSH
48389: LD_INT 1
48391: PUSH
48392: EMPTY
48393: LIST
48394: LIST
48395: PUSH
48396: LD_INT 0
48398: PUSH
48399: LD_INT 1
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: PUSH
48406: LD_INT 1
48408: NEG
48409: PUSH
48410: LD_INT 0
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: LD_INT 1
48419: NEG
48420: PUSH
48421: LD_INT 1
48423: NEG
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: PUSH
48429: LD_INT 1
48431: NEG
48432: PUSH
48433: LD_INT 2
48435: NEG
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: PUSH
48441: LD_INT 0
48443: PUSH
48444: LD_INT 2
48446: NEG
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: PUSH
48452: LD_INT 1
48454: PUSH
48455: LD_INT 1
48457: NEG
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: PUSH
48463: LD_INT 2
48465: PUSH
48466: LD_INT 1
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: PUSH
48473: LD_INT 2
48475: PUSH
48476: LD_INT 2
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: PUSH
48483: LD_INT 1
48485: PUSH
48486: LD_INT 2
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: PUSH
48493: LD_INT 0
48495: PUSH
48496: LD_INT 2
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: PUSH
48503: LD_INT 1
48505: NEG
48506: PUSH
48507: LD_INT 1
48509: PUSH
48510: EMPTY
48511: LIST
48512: LIST
48513: PUSH
48514: LD_INT 2
48516: NEG
48517: PUSH
48518: LD_INT 1
48520: NEG
48521: PUSH
48522: EMPTY
48523: LIST
48524: LIST
48525: PUSH
48526: LD_INT 2
48528: NEG
48529: PUSH
48530: LD_INT 2
48532: NEG
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: LD_INT 2
48540: NEG
48541: PUSH
48542: LD_INT 3
48544: NEG
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: PUSH
48550: LD_INT 1
48552: NEG
48553: PUSH
48554: LD_INT 3
48556: NEG
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: LD_INT 0
48564: PUSH
48565: LD_INT 3
48567: NEG
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: LD_INT 1
48575: PUSH
48576: LD_INT 2
48578: NEG
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: PUSH
48584: LD_INT 3
48586: PUSH
48587: LD_INT 2
48589: PUSH
48590: EMPTY
48591: LIST
48592: LIST
48593: PUSH
48594: LD_INT 3
48596: PUSH
48597: LD_INT 3
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: PUSH
48604: LD_INT 2
48606: PUSH
48607: LD_INT 3
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: PUSH
48614: LD_INT 1
48616: PUSH
48617: LD_INT 3
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 0
48626: PUSH
48627: LD_INT 3
48629: PUSH
48630: EMPTY
48631: LIST
48632: LIST
48633: PUSH
48634: LD_INT 1
48636: NEG
48637: PUSH
48638: LD_INT 2
48640: PUSH
48641: EMPTY
48642: LIST
48643: LIST
48644: PUSH
48645: LD_INT 3
48647: NEG
48648: PUSH
48649: LD_INT 2
48651: NEG
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 3
48659: NEG
48660: PUSH
48661: LD_INT 3
48663: NEG
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: LIST
48676: LIST
48677: LIST
48678: LIST
48679: LIST
48680: LIST
48681: LIST
48682: LIST
48683: LIST
48684: LIST
48685: LIST
48686: LIST
48687: LIST
48688: LIST
48689: LIST
48690: LIST
48691: LIST
48692: LIST
48693: LIST
48694: LIST
48695: LIST
48696: LIST
48697: LIST
48698: LIST
48699: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48700: LD_ADDR_VAR 0 46
48704: PUSH
48705: LD_INT 0
48707: PUSH
48708: LD_INT 0
48710: PUSH
48711: EMPTY
48712: LIST
48713: LIST
48714: PUSH
48715: LD_INT 0
48717: PUSH
48718: LD_INT 1
48720: NEG
48721: PUSH
48722: EMPTY
48723: LIST
48724: LIST
48725: PUSH
48726: LD_INT 1
48728: PUSH
48729: LD_INT 0
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: PUSH
48736: LD_INT 1
48738: PUSH
48739: LD_INT 1
48741: PUSH
48742: EMPTY
48743: LIST
48744: LIST
48745: PUSH
48746: LD_INT 0
48748: PUSH
48749: LD_INT 1
48751: PUSH
48752: EMPTY
48753: LIST
48754: LIST
48755: PUSH
48756: LD_INT 1
48758: NEG
48759: PUSH
48760: LD_INT 0
48762: PUSH
48763: EMPTY
48764: LIST
48765: LIST
48766: PUSH
48767: LD_INT 1
48769: NEG
48770: PUSH
48771: LD_INT 1
48773: NEG
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: PUSH
48779: LD_INT 1
48781: NEG
48782: PUSH
48783: LD_INT 2
48785: NEG
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: PUSH
48791: LD_INT 0
48793: PUSH
48794: LD_INT 2
48796: NEG
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: PUSH
48802: LD_INT 1
48804: PUSH
48805: LD_INT 1
48807: NEG
48808: PUSH
48809: EMPTY
48810: LIST
48811: LIST
48812: PUSH
48813: LD_INT 2
48815: PUSH
48816: LD_INT 0
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: LD_INT 2
48825: PUSH
48826: LD_INT 1
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: LD_INT 1
48835: PUSH
48836: LD_INT 2
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: PUSH
48843: LD_INT 0
48845: PUSH
48846: LD_INT 2
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: LD_INT 1
48855: NEG
48856: PUSH
48857: LD_INT 1
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: LD_INT 2
48866: NEG
48867: PUSH
48868: LD_INT 0
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: LD_INT 2
48877: NEG
48878: PUSH
48879: LD_INT 1
48881: NEG
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: LD_INT 1
48889: NEG
48890: PUSH
48891: LD_INT 3
48893: NEG
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: PUSH
48899: LD_INT 0
48901: PUSH
48902: LD_INT 3
48904: NEG
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: PUSH
48910: LD_INT 1
48912: PUSH
48913: LD_INT 2
48915: NEG
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PUSH
48921: LD_INT 2
48923: PUSH
48924: LD_INT 1
48926: NEG
48927: PUSH
48928: EMPTY
48929: LIST
48930: LIST
48931: PUSH
48932: LD_INT 3
48934: PUSH
48935: LD_INT 0
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 3
48944: PUSH
48945: LD_INT 1
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: LD_INT 1
48954: PUSH
48955: LD_INT 3
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: LD_INT 0
48964: PUSH
48965: LD_INT 3
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: PUSH
48972: LD_INT 1
48974: NEG
48975: PUSH
48976: LD_INT 2
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: PUSH
48983: LD_INT 2
48985: NEG
48986: PUSH
48987: LD_INT 1
48989: PUSH
48990: EMPTY
48991: LIST
48992: LIST
48993: PUSH
48994: LD_INT 3
48996: NEG
48997: PUSH
48998: LD_INT 0
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: LD_INT 3
49007: NEG
49008: PUSH
49009: LD_INT 1
49011: NEG
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: LIST
49021: LIST
49022: LIST
49023: LIST
49024: LIST
49025: LIST
49026: LIST
49027: LIST
49028: LIST
49029: LIST
49030: LIST
49031: LIST
49032: LIST
49033: LIST
49034: LIST
49035: LIST
49036: LIST
49037: LIST
49038: LIST
49039: LIST
49040: LIST
49041: LIST
49042: LIST
49043: LIST
49044: LIST
49045: LIST
49046: LIST
49047: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49048: LD_ADDR_VAR 0 47
49052: PUSH
49053: LD_INT 0
49055: PUSH
49056: LD_INT 0
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: LD_INT 0
49065: PUSH
49066: LD_INT 1
49068: NEG
49069: PUSH
49070: EMPTY
49071: LIST
49072: LIST
49073: PUSH
49074: LD_INT 1
49076: PUSH
49077: LD_INT 0
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: PUSH
49084: LD_INT 1
49086: PUSH
49087: LD_INT 1
49089: PUSH
49090: EMPTY
49091: LIST
49092: LIST
49093: PUSH
49094: LD_INT 0
49096: PUSH
49097: LD_INT 1
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: PUSH
49104: LD_INT 1
49106: NEG
49107: PUSH
49108: LD_INT 0
49110: PUSH
49111: EMPTY
49112: LIST
49113: LIST
49114: PUSH
49115: LD_INT 1
49117: NEG
49118: PUSH
49119: LD_INT 1
49121: NEG
49122: PUSH
49123: EMPTY
49124: LIST
49125: LIST
49126: PUSH
49127: LD_INT 1
49129: NEG
49130: PUSH
49131: LD_INT 2
49133: NEG
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: LD_INT 0
49141: PUSH
49142: LD_INT 2
49144: NEG
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: PUSH
49150: LD_INT 1
49152: PUSH
49153: LD_INT 1
49155: NEG
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: LD_INT 2
49163: NEG
49164: PUSH
49165: LD_INT 1
49167: NEG
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: PUSH
49173: LD_INT 2
49175: NEG
49176: PUSH
49177: LD_INT 2
49179: NEG
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: LIST
49189: LIST
49190: LIST
49191: LIST
49192: LIST
49193: LIST
49194: LIST
49195: LIST
49196: LIST
49197: LIST
49198: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49199: LD_ADDR_VAR 0 48
49203: PUSH
49204: LD_INT 0
49206: PUSH
49207: LD_INT 0
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: PUSH
49214: LD_INT 0
49216: PUSH
49217: LD_INT 1
49219: NEG
49220: PUSH
49221: EMPTY
49222: LIST
49223: LIST
49224: PUSH
49225: LD_INT 1
49227: PUSH
49228: LD_INT 0
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: PUSH
49235: LD_INT 1
49237: PUSH
49238: LD_INT 1
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: PUSH
49245: LD_INT 0
49247: PUSH
49248: LD_INT 1
49250: PUSH
49251: EMPTY
49252: LIST
49253: LIST
49254: PUSH
49255: LD_INT 1
49257: NEG
49258: PUSH
49259: LD_INT 0
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: PUSH
49266: LD_INT 1
49268: NEG
49269: PUSH
49270: LD_INT 1
49272: NEG
49273: PUSH
49274: EMPTY
49275: LIST
49276: LIST
49277: PUSH
49278: LD_INT 1
49280: NEG
49281: PUSH
49282: LD_INT 2
49284: NEG
49285: PUSH
49286: EMPTY
49287: LIST
49288: LIST
49289: PUSH
49290: LD_INT 0
49292: PUSH
49293: LD_INT 2
49295: NEG
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: PUSH
49301: LD_INT 1
49303: PUSH
49304: LD_INT 1
49306: NEG
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: PUSH
49312: LD_INT 2
49314: PUSH
49315: LD_INT 0
49317: PUSH
49318: EMPTY
49319: LIST
49320: LIST
49321: PUSH
49322: LD_INT 2
49324: PUSH
49325: LD_INT 1
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: LIST
49336: LIST
49337: LIST
49338: LIST
49339: LIST
49340: LIST
49341: LIST
49342: LIST
49343: LIST
49344: LIST
49345: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49346: LD_ADDR_VAR 0 49
49350: PUSH
49351: LD_INT 0
49353: PUSH
49354: LD_INT 0
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: PUSH
49361: LD_INT 0
49363: PUSH
49364: LD_INT 1
49366: NEG
49367: PUSH
49368: EMPTY
49369: LIST
49370: LIST
49371: PUSH
49372: LD_INT 1
49374: PUSH
49375: LD_INT 0
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: PUSH
49382: LD_INT 1
49384: PUSH
49385: LD_INT 1
49387: PUSH
49388: EMPTY
49389: LIST
49390: LIST
49391: PUSH
49392: LD_INT 0
49394: PUSH
49395: LD_INT 1
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: PUSH
49402: LD_INT 1
49404: NEG
49405: PUSH
49406: LD_INT 0
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: PUSH
49413: LD_INT 1
49415: NEG
49416: PUSH
49417: LD_INT 1
49419: NEG
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: PUSH
49425: LD_INT 1
49427: PUSH
49428: LD_INT 1
49430: NEG
49431: PUSH
49432: EMPTY
49433: LIST
49434: LIST
49435: PUSH
49436: LD_INT 2
49438: PUSH
49439: LD_INT 0
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: PUSH
49446: LD_INT 2
49448: PUSH
49449: LD_INT 1
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: PUSH
49456: LD_INT 2
49458: PUSH
49459: LD_INT 2
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: PUSH
49466: LD_INT 1
49468: PUSH
49469: LD_INT 2
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: LIST
49480: LIST
49481: LIST
49482: LIST
49483: LIST
49484: LIST
49485: LIST
49486: LIST
49487: LIST
49488: LIST
49489: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49490: LD_ADDR_VAR 0 50
49494: PUSH
49495: LD_INT 0
49497: PUSH
49498: LD_INT 0
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: PUSH
49505: LD_INT 0
49507: PUSH
49508: LD_INT 1
49510: NEG
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: PUSH
49516: LD_INT 1
49518: PUSH
49519: LD_INT 0
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: PUSH
49526: LD_INT 1
49528: PUSH
49529: LD_INT 1
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: PUSH
49536: LD_INT 0
49538: PUSH
49539: LD_INT 1
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: PUSH
49546: LD_INT 1
49548: NEG
49549: PUSH
49550: LD_INT 0
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: LD_INT 1
49559: NEG
49560: PUSH
49561: LD_INT 1
49563: NEG
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: PUSH
49569: LD_INT 2
49571: PUSH
49572: LD_INT 1
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: PUSH
49579: LD_INT 2
49581: PUSH
49582: LD_INT 2
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PUSH
49589: LD_INT 1
49591: PUSH
49592: LD_INT 2
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: PUSH
49599: LD_INT 0
49601: PUSH
49602: LD_INT 2
49604: PUSH
49605: EMPTY
49606: LIST
49607: LIST
49608: PUSH
49609: LD_INT 1
49611: NEG
49612: PUSH
49613: LD_INT 1
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: LIST
49624: LIST
49625: LIST
49626: LIST
49627: LIST
49628: LIST
49629: LIST
49630: LIST
49631: LIST
49632: LIST
49633: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49634: LD_ADDR_VAR 0 51
49638: PUSH
49639: LD_INT 0
49641: PUSH
49642: LD_INT 0
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: PUSH
49649: LD_INT 0
49651: PUSH
49652: LD_INT 1
49654: NEG
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: PUSH
49660: LD_INT 1
49662: PUSH
49663: LD_INT 0
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PUSH
49670: LD_INT 1
49672: PUSH
49673: LD_INT 1
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: PUSH
49680: LD_INT 0
49682: PUSH
49683: LD_INT 1
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: PUSH
49690: LD_INT 1
49692: NEG
49693: PUSH
49694: LD_INT 0
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: PUSH
49701: LD_INT 1
49703: NEG
49704: PUSH
49705: LD_INT 1
49707: NEG
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: PUSH
49713: LD_INT 1
49715: PUSH
49716: LD_INT 2
49718: PUSH
49719: EMPTY
49720: LIST
49721: LIST
49722: PUSH
49723: LD_INT 0
49725: PUSH
49726: LD_INT 2
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: PUSH
49733: LD_INT 1
49735: NEG
49736: PUSH
49737: LD_INT 1
49739: PUSH
49740: EMPTY
49741: LIST
49742: LIST
49743: PUSH
49744: LD_INT 2
49746: NEG
49747: PUSH
49748: LD_INT 0
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: LD_INT 2
49757: NEG
49758: PUSH
49759: LD_INT 1
49761: NEG
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: LIST
49771: LIST
49772: LIST
49773: LIST
49774: LIST
49775: LIST
49776: LIST
49777: LIST
49778: LIST
49779: LIST
49780: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49781: LD_ADDR_VAR 0 52
49785: PUSH
49786: LD_INT 0
49788: PUSH
49789: LD_INT 0
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: LD_INT 0
49798: PUSH
49799: LD_INT 1
49801: NEG
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: LD_INT 1
49809: PUSH
49810: LD_INT 0
49812: PUSH
49813: EMPTY
49814: LIST
49815: LIST
49816: PUSH
49817: LD_INT 1
49819: PUSH
49820: LD_INT 1
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: LD_INT 0
49829: PUSH
49830: LD_INT 1
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: PUSH
49837: LD_INT 1
49839: NEG
49840: PUSH
49841: LD_INT 0
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: PUSH
49848: LD_INT 1
49850: NEG
49851: PUSH
49852: LD_INT 1
49854: NEG
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: PUSH
49860: LD_INT 1
49862: NEG
49863: PUSH
49864: LD_INT 2
49866: NEG
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: PUSH
49872: LD_INT 1
49874: NEG
49875: PUSH
49876: LD_INT 1
49878: PUSH
49879: EMPTY
49880: LIST
49881: LIST
49882: PUSH
49883: LD_INT 2
49885: NEG
49886: PUSH
49887: LD_INT 0
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: PUSH
49894: LD_INT 2
49896: NEG
49897: PUSH
49898: LD_INT 1
49900: NEG
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: LD_INT 2
49908: NEG
49909: PUSH
49910: LD_INT 2
49912: NEG
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: PUSH
49918: EMPTY
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: LIST
49927: LIST
49928: LIST
49929: LIST
49930: LIST
49931: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49932: LD_ADDR_VAR 0 53
49936: PUSH
49937: LD_INT 0
49939: PUSH
49940: LD_INT 0
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: LD_INT 0
49949: PUSH
49950: LD_INT 1
49952: NEG
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PUSH
49958: LD_INT 1
49960: PUSH
49961: LD_INT 0
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: PUSH
49968: LD_INT 1
49970: PUSH
49971: LD_INT 1
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: PUSH
49978: LD_INT 0
49980: PUSH
49981: LD_INT 1
49983: PUSH
49984: EMPTY
49985: LIST
49986: LIST
49987: PUSH
49988: LD_INT 1
49990: NEG
49991: PUSH
49992: LD_INT 0
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: PUSH
49999: LD_INT 1
50001: NEG
50002: PUSH
50003: LD_INT 1
50005: NEG
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: LD_INT 1
50013: NEG
50014: PUSH
50015: LD_INT 2
50017: NEG
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: PUSH
50023: LD_INT 0
50025: PUSH
50026: LD_INT 2
50028: NEG
50029: PUSH
50030: EMPTY
50031: LIST
50032: LIST
50033: PUSH
50034: LD_INT 1
50036: PUSH
50037: LD_INT 1
50039: NEG
50040: PUSH
50041: EMPTY
50042: LIST
50043: LIST
50044: PUSH
50045: LD_INT 2
50047: PUSH
50048: LD_INT 0
50050: PUSH
50051: EMPTY
50052: LIST
50053: LIST
50054: PUSH
50055: LD_INT 2
50057: PUSH
50058: LD_INT 1
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: PUSH
50065: LD_INT 2
50067: PUSH
50068: LD_INT 2
50070: PUSH
50071: EMPTY
50072: LIST
50073: LIST
50074: PUSH
50075: LD_INT 1
50077: PUSH
50078: LD_INT 2
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: LD_INT 0
50087: PUSH
50088: LD_INT 2
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: LD_INT 1
50097: NEG
50098: PUSH
50099: LD_INT 1
50101: PUSH
50102: EMPTY
50103: LIST
50104: LIST
50105: PUSH
50106: LD_INT 2
50108: NEG
50109: PUSH
50110: LD_INT 0
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: PUSH
50117: LD_INT 2
50119: NEG
50120: PUSH
50121: LD_INT 1
50123: NEG
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: LD_INT 2
50131: NEG
50132: PUSH
50133: LD_INT 2
50135: NEG
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: PUSH
50141: EMPTY
50142: LIST
50143: LIST
50144: LIST
50145: LIST
50146: LIST
50147: LIST
50148: LIST
50149: LIST
50150: LIST
50151: LIST
50152: LIST
50153: LIST
50154: LIST
50155: LIST
50156: LIST
50157: LIST
50158: LIST
50159: LIST
50160: LIST
50161: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50162: LD_ADDR_VAR 0 54
50166: PUSH
50167: LD_INT 0
50169: PUSH
50170: LD_INT 0
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 0
50179: PUSH
50180: LD_INT 1
50182: NEG
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PUSH
50188: LD_INT 1
50190: PUSH
50191: LD_INT 0
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: PUSH
50198: LD_INT 1
50200: PUSH
50201: LD_INT 1
50203: PUSH
50204: EMPTY
50205: LIST
50206: LIST
50207: PUSH
50208: LD_INT 0
50210: PUSH
50211: LD_INT 1
50213: PUSH
50214: EMPTY
50215: LIST
50216: LIST
50217: PUSH
50218: LD_INT 1
50220: NEG
50221: PUSH
50222: LD_INT 0
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: PUSH
50229: LD_INT 1
50231: NEG
50232: PUSH
50233: LD_INT 1
50235: NEG
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PUSH
50241: LD_INT 1
50243: NEG
50244: PUSH
50245: LD_INT 2
50247: NEG
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: PUSH
50253: LD_INT 0
50255: PUSH
50256: LD_INT 2
50258: NEG
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: PUSH
50264: LD_INT 1
50266: PUSH
50267: LD_INT 1
50269: NEG
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: LD_INT 2
50277: PUSH
50278: LD_INT 0
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: PUSH
50285: LD_INT 2
50287: PUSH
50288: LD_INT 1
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 2
50297: PUSH
50298: LD_INT 2
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: LD_INT 1
50307: PUSH
50308: LD_INT 2
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: PUSH
50315: LD_INT 0
50317: PUSH
50318: LD_INT 2
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: LD_INT 1
50327: NEG
50328: PUSH
50329: LD_INT 1
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: PUSH
50336: LD_INT 2
50338: NEG
50339: PUSH
50340: LD_INT 0
50342: PUSH
50343: EMPTY
50344: LIST
50345: LIST
50346: PUSH
50347: LD_INT 2
50349: NEG
50350: PUSH
50351: LD_INT 1
50353: NEG
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: PUSH
50359: LD_INT 2
50361: NEG
50362: PUSH
50363: LD_INT 2
50365: NEG
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: LIST
50375: LIST
50376: LIST
50377: LIST
50378: LIST
50379: LIST
50380: LIST
50381: LIST
50382: LIST
50383: LIST
50384: LIST
50385: LIST
50386: LIST
50387: LIST
50388: LIST
50389: LIST
50390: LIST
50391: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50392: LD_ADDR_VAR 0 55
50396: PUSH
50397: LD_INT 0
50399: PUSH
50400: LD_INT 0
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 0
50409: PUSH
50410: LD_INT 1
50412: NEG
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: LD_INT 1
50420: PUSH
50421: LD_INT 0
50423: PUSH
50424: EMPTY
50425: LIST
50426: LIST
50427: PUSH
50428: LD_INT 1
50430: PUSH
50431: LD_INT 1
50433: PUSH
50434: EMPTY
50435: LIST
50436: LIST
50437: PUSH
50438: LD_INT 0
50440: PUSH
50441: LD_INT 1
50443: PUSH
50444: EMPTY
50445: LIST
50446: LIST
50447: PUSH
50448: LD_INT 1
50450: NEG
50451: PUSH
50452: LD_INT 0
50454: PUSH
50455: EMPTY
50456: LIST
50457: LIST
50458: PUSH
50459: LD_INT 1
50461: NEG
50462: PUSH
50463: LD_INT 1
50465: NEG
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: PUSH
50471: LD_INT 1
50473: NEG
50474: PUSH
50475: LD_INT 2
50477: NEG
50478: PUSH
50479: EMPTY
50480: LIST
50481: LIST
50482: PUSH
50483: LD_INT 0
50485: PUSH
50486: LD_INT 2
50488: NEG
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: LD_INT 1
50496: PUSH
50497: LD_INT 1
50499: NEG
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 2
50507: PUSH
50508: LD_INT 0
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: LD_INT 2
50517: PUSH
50518: LD_INT 1
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: LD_INT 2
50527: PUSH
50528: LD_INT 2
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: PUSH
50535: LD_INT 1
50537: PUSH
50538: LD_INT 2
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: PUSH
50545: LD_INT 0
50547: PUSH
50548: LD_INT 2
50550: PUSH
50551: EMPTY
50552: LIST
50553: LIST
50554: PUSH
50555: LD_INT 1
50557: NEG
50558: PUSH
50559: LD_INT 1
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: PUSH
50566: LD_INT 2
50568: NEG
50569: PUSH
50570: LD_INT 0
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: PUSH
50577: LD_INT 2
50579: NEG
50580: PUSH
50581: LD_INT 1
50583: NEG
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: LD_INT 2
50591: NEG
50592: PUSH
50593: LD_INT 2
50595: NEG
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: LIST
50605: LIST
50606: LIST
50607: LIST
50608: LIST
50609: LIST
50610: LIST
50611: LIST
50612: LIST
50613: LIST
50614: LIST
50615: LIST
50616: LIST
50617: LIST
50618: LIST
50619: LIST
50620: LIST
50621: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50622: LD_ADDR_VAR 0 56
50626: PUSH
50627: LD_INT 0
50629: PUSH
50630: LD_INT 0
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: PUSH
50637: LD_INT 0
50639: PUSH
50640: LD_INT 1
50642: NEG
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: PUSH
50648: LD_INT 1
50650: PUSH
50651: LD_INT 0
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: PUSH
50658: LD_INT 1
50660: PUSH
50661: LD_INT 1
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: PUSH
50668: LD_INT 0
50670: PUSH
50671: LD_INT 1
50673: PUSH
50674: EMPTY
50675: LIST
50676: LIST
50677: PUSH
50678: LD_INT 1
50680: NEG
50681: PUSH
50682: LD_INT 0
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: PUSH
50689: LD_INT 1
50691: NEG
50692: PUSH
50693: LD_INT 1
50695: NEG
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: LD_INT 1
50703: NEG
50704: PUSH
50705: LD_INT 2
50707: NEG
50708: PUSH
50709: EMPTY
50710: LIST
50711: LIST
50712: PUSH
50713: LD_INT 0
50715: PUSH
50716: LD_INT 2
50718: NEG
50719: PUSH
50720: EMPTY
50721: LIST
50722: LIST
50723: PUSH
50724: LD_INT 1
50726: PUSH
50727: LD_INT 1
50729: NEG
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: PUSH
50735: LD_INT 2
50737: PUSH
50738: LD_INT 0
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: PUSH
50745: LD_INT 2
50747: PUSH
50748: LD_INT 1
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 2
50757: PUSH
50758: LD_INT 2
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 1
50767: PUSH
50768: LD_INT 2
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PUSH
50775: LD_INT 0
50777: PUSH
50778: LD_INT 2
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 1
50787: NEG
50788: PUSH
50789: LD_INT 1
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 2
50798: NEG
50799: PUSH
50800: LD_INT 0
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: PUSH
50807: LD_INT 2
50809: NEG
50810: PUSH
50811: LD_INT 1
50813: NEG
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: PUSH
50819: LD_INT 2
50821: NEG
50822: PUSH
50823: LD_INT 2
50825: NEG
50826: PUSH
50827: EMPTY
50828: LIST
50829: LIST
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: LIST
50835: LIST
50836: LIST
50837: LIST
50838: LIST
50839: LIST
50840: LIST
50841: LIST
50842: LIST
50843: LIST
50844: LIST
50845: LIST
50846: LIST
50847: LIST
50848: LIST
50849: LIST
50850: LIST
50851: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50852: LD_ADDR_VAR 0 57
50856: PUSH
50857: LD_INT 0
50859: PUSH
50860: LD_INT 0
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 0
50869: PUSH
50870: LD_INT 1
50872: NEG
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: LD_INT 1
50880: PUSH
50881: LD_INT 0
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PUSH
50888: LD_INT 1
50890: PUSH
50891: LD_INT 1
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: PUSH
50898: LD_INT 0
50900: PUSH
50901: LD_INT 1
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: PUSH
50908: LD_INT 1
50910: NEG
50911: PUSH
50912: LD_INT 0
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 1
50921: NEG
50922: PUSH
50923: LD_INT 1
50925: NEG
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 1
50933: NEG
50934: PUSH
50935: LD_INT 2
50937: NEG
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: PUSH
50943: LD_INT 0
50945: PUSH
50946: LD_INT 2
50948: NEG
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: PUSH
50954: LD_INT 1
50956: PUSH
50957: LD_INT 1
50959: NEG
50960: PUSH
50961: EMPTY
50962: LIST
50963: LIST
50964: PUSH
50965: LD_INT 2
50967: PUSH
50968: LD_INT 0
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 2
50977: PUSH
50978: LD_INT 1
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: PUSH
50985: LD_INT 2
50987: PUSH
50988: LD_INT 2
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PUSH
50995: LD_INT 1
50997: PUSH
50998: LD_INT 2
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: LD_INT 0
51007: PUSH
51008: LD_INT 2
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: PUSH
51015: LD_INT 1
51017: NEG
51018: PUSH
51019: LD_INT 1
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PUSH
51026: LD_INT 2
51028: NEG
51029: PUSH
51030: LD_INT 0
51032: PUSH
51033: EMPTY
51034: LIST
51035: LIST
51036: PUSH
51037: LD_INT 2
51039: NEG
51040: PUSH
51041: LD_INT 1
51043: NEG
51044: PUSH
51045: EMPTY
51046: LIST
51047: LIST
51048: PUSH
51049: LD_INT 2
51051: NEG
51052: PUSH
51053: LD_INT 2
51055: NEG
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51082: LD_ADDR_VAR 0 58
51086: PUSH
51087: LD_INT 0
51089: PUSH
51090: LD_INT 0
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: LD_INT 0
51099: PUSH
51100: LD_INT 1
51102: NEG
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: PUSH
51108: LD_INT 1
51110: PUSH
51111: LD_INT 0
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: PUSH
51118: LD_INT 1
51120: PUSH
51121: LD_INT 1
51123: PUSH
51124: EMPTY
51125: LIST
51126: LIST
51127: PUSH
51128: LD_INT 0
51130: PUSH
51131: LD_INT 1
51133: PUSH
51134: EMPTY
51135: LIST
51136: LIST
51137: PUSH
51138: LD_INT 1
51140: NEG
51141: PUSH
51142: LD_INT 0
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: PUSH
51149: LD_INT 1
51151: NEG
51152: PUSH
51153: LD_INT 1
51155: NEG
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: PUSH
51161: LD_INT 1
51163: NEG
51164: PUSH
51165: LD_INT 2
51167: NEG
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 0
51175: PUSH
51176: LD_INT 2
51178: NEG
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 1
51186: PUSH
51187: LD_INT 1
51189: NEG
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: PUSH
51195: LD_INT 2
51197: PUSH
51198: LD_INT 0
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: LD_INT 2
51207: PUSH
51208: LD_INT 1
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: LD_INT 2
51217: PUSH
51218: LD_INT 2
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: LD_INT 1
51227: PUSH
51228: LD_INT 2
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: LD_INT 0
51237: PUSH
51238: LD_INT 2
51240: PUSH
51241: EMPTY
51242: LIST
51243: LIST
51244: PUSH
51245: LD_INT 1
51247: NEG
51248: PUSH
51249: LD_INT 1
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: PUSH
51256: LD_INT 2
51258: NEG
51259: PUSH
51260: LD_INT 0
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: PUSH
51267: LD_INT 2
51269: NEG
51270: PUSH
51271: LD_INT 1
51273: NEG
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: PUSH
51279: LD_INT 2
51281: NEG
51282: PUSH
51283: LD_INT 2
51285: NEG
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: LIST
51295: LIST
51296: LIST
51297: LIST
51298: LIST
51299: LIST
51300: LIST
51301: LIST
51302: LIST
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: LIST
51309: LIST
51310: LIST
51311: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51312: LD_ADDR_VAR 0 59
51316: PUSH
51317: LD_INT 0
51319: PUSH
51320: LD_INT 0
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: PUSH
51327: LD_INT 0
51329: PUSH
51330: LD_INT 1
51332: NEG
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: PUSH
51338: LD_INT 1
51340: PUSH
51341: LD_INT 0
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: LD_INT 1
51350: PUSH
51351: LD_INT 1
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: PUSH
51358: LD_INT 0
51360: PUSH
51361: LD_INT 1
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: PUSH
51368: LD_INT 1
51370: NEG
51371: PUSH
51372: LD_INT 0
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 1
51381: NEG
51382: PUSH
51383: LD_INT 1
51385: NEG
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: LIST
51395: LIST
51396: LIST
51397: LIST
51398: LIST
51399: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51400: LD_ADDR_VAR 0 60
51404: PUSH
51405: LD_INT 0
51407: PUSH
51408: LD_INT 0
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: PUSH
51415: LD_INT 0
51417: PUSH
51418: LD_INT 1
51420: NEG
51421: PUSH
51422: EMPTY
51423: LIST
51424: LIST
51425: PUSH
51426: LD_INT 1
51428: PUSH
51429: LD_INT 0
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: PUSH
51436: LD_INT 1
51438: PUSH
51439: LD_INT 1
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: PUSH
51446: LD_INT 0
51448: PUSH
51449: LD_INT 1
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: LD_INT 1
51458: NEG
51459: PUSH
51460: LD_INT 0
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PUSH
51467: LD_INT 1
51469: NEG
51470: PUSH
51471: LD_INT 1
51473: NEG
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: LIST
51483: LIST
51484: LIST
51485: LIST
51486: LIST
51487: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51488: LD_ADDR_VAR 0 61
51492: PUSH
51493: LD_INT 0
51495: PUSH
51496: LD_INT 0
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 0
51505: PUSH
51506: LD_INT 1
51508: NEG
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 1
51516: PUSH
51517: LD_INT 0
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 1
51526: PUSH
51527: LD_INT 1
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 0
51536: PUSH
51537: LD_INT 1
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 1
51546: NEG
51547: PUSH
51548: LD_INT 0
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: LD_INT 1
51557: NEG
51558: PUSH
51559: LD_INT 1
51561: NEG
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: LIST
51571: LIST
51572: LIST
51573: LIST
51574: LIST
51575: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51576: LD_ADDR_VAR 0 62
51580: PUSH
51581: LD_INT 0
51583: PUSH
51584: LD_INT 0
51586: PUSH
51587: EMPTY
51588: LIST
51589: LIST
51590: PUSH
51591: LD_INT 0
51593: PUSH
51594: LD_INT 1
51596: NEG
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: PUSH
51602: LD_INT 1
51604: PUSH
51605: LD_INT 0
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PUSH
51612: LD_INT 1
51614: PUSH
51615: LD_INT 1
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: LD_INT 0
51624: PUSH
51625: LD_INT 1
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 1
51634: NEG
51635: PUSH
51636: LD_INT 0
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 1
51645: NEG
51646: PUSH
51647: LD_INT 1
51649: NEG
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: LIST
51659: LIST
51660: LIST
51661: LIST
51662: LIST
51663: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51664: LD_ADDR_VAR 0 63
51668: PUSH
51669: LD_INT 0
51671: PUSH
51672: LD_INT 0
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 0
51681: PUSH
51682: LD_INT 1
51684: NEG
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: PUSH
51690: LD_INT 1
51692: PUSH
51693: LD_INT 0
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: PUSH
51700: LD_INT 1
51702: PUSH
51703: LD_INT 1
51705: PUSH
51706: EMPTY
51707: LIST
51708: LIST
51709: PUSH
51710: LD_INT 0
51712: PUSH
51713: LD_INT 1
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: LD_INT 1
51722: NEG
51723: PUSH
51724: LD_INT 0
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: LD_INT 1
51733: NEG
51734: PUSH
51735: LD_INT 1
51737: NEG
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51752: LD_ADDR_VAR 0 64
51756: PUSH
51757: LD_INT 0
51759: PUSH
51760: LD_INT 0
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: PUSH
51767: LD_INT 0
51769: PUSH
51770: LD_INT 1
51772: NEG
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: PUSH
51778: LD_INT 1
51780: PUSH
51781: LD_INT 0
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 1
51790: PUSH
51791: LD_INT 1
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: PUSH
51798: LD_INT 0
51800: PUSH
51801: LD_INT 1
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PUSH
51808: LD_INT 1
51810: NEG
51811: PUSH
51812: LD_INT 0
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: LD_INT 1
51821: NEG
51822: PUSH
51823: LD_INT 1
51825: NEG
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: LIST
51835: LIST
51836: LIST
51837: LIST
51838: LIST
51839: ST_TO_ADDR
// end ; 1 :
51840: GO 57737
51842: LD_INT 1
51844: DOUBLE
51845: EQUAL
51846: IFTRUE 51850
51848: GO 54473
51850: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51851: LD_ADDR_VAR 0 11
51855: PUSH
51856: LD_INT 1
51858: NEG
51859: PUSH
51860: LD_INT 3
51862: NEG
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: PUSH
51868: LD_INT 0
51870: PUSH
51871: LD_INT 3
51873: NEG
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: PUSH
51879: LD_INT 1
51881: PUSH
51882: LD_INT 2
51884: NEG
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: LIST
51894: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51895: LD_ADDR_VAR 0 12
51899: PUSH
51900: LD_INT 2
51902: PUSH
51903: LD_INT 1
51905: NEG
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: PUSH
51911: LD_INT 3
51913: PUSH
51914: LD_INT 0
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: PUSH
51921: LD_INT 3
51923: PUSH
51924: LD_INT 1
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: LIST
51935: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51936: LD_ADDR_VAR 0 13
51940: PUSH
51941: LD_INT 3
51943: PUSH
51944: LD_INT 2
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: PUSH
51951: LD_INT 3
51953: PUSH
51954: LD_INT 3
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: LD_INT 2
51963: PUSH
51964: LD_INT 3
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: LIST
51975: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51976: LD_ADDR_VAR 0 14
51980: PUSH
51981: LD_INT 1
51983: PUSH
51984: LD_INT 3
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: PUSH
51991: LD_INT 0
51993: PUSH
51994: LD_INT 3
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: LD_INT 1
52003: NEG
52004: PUSH
52005: LD_INT 2
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: LIST
52016: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52017: LD_ADDR_VAR 0 15
52021: PUSH
52022: LD_INT 2
52024: NEG
52025: PUSH
52026: LD_INT 1
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 3
52035: NEG
52036: PUSH
52037: LD_INT 0
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: PUSH
52044: LD_INT 3
52046: NEG
52047: PUSH
52048: LD_INT 1
52050: NEG
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: LIST
52060: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52061: LD_ADDR_VAR 0 16
52065: PUSH
52066: LD_INT 2
52068: NEG
52069: PUSH
52070: LD_INT 3
52072: NEG
52073: PUSH
52074: EMPTY
52075: LIST
52076: LIST
52077: PUSH
52078: LD_INT 3
52080: NEG
52081: PUSH
52082: LD_INT 2
52084: NEG
52085: PUSH
52086: EMPTY
52087: LIST
52088: LIST
52089: PUSH
52090: LD_INT 3
52092: NEG
52093: PUSH
52094: LD_INT 3
52096: NEG
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: LIST
52106: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52107: LD_ADDR_VAR 0 17
52111: PUSH
52112: LD_INT 1
52114: NEG
52115: PUSH
52116: LD_INT 3
52118: NEG
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: LD_INT 0
52126: PUSH
52127: LD_INT 3
52129: NEG
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: PUSH
52135: LD_INT 1
52137: PUSH
52138: LD_INT 2
52140: NEG
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: LIST
52150: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52151: LD_ADDR_VAR 0 18
52155: PUSH
52156: LD_INT 2
52158: PUSH
52159: LD_INT 1
52161: NEG
52162: PUSH
52163: EMPTY
52164: LIST
52165: LIST
52166: PUSH
52167: LD_INT 3
52169: PUSH
52170: LD_INT 0
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: PUSH
52177: LD_INT 3
52179: PUSH
52180: LD_INT 1
52182: PUSH
52183: EMPTY
52184: LIST
52185: LIST
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: LIST
52191: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52192: LD_ADDR_VAR 0 19
52196: PUSH
52197: LD_INT 3
52199: PUSH
52200: LD_INT 2
52202: PUSH
52203: EMPTY
52204: LIST
52205: LIST
52206: PUSH
52207: LD_INT 3
52209: PUSH
52210: LD_INT 3
52212: PUSH
52213: EMPTY
52214: LIST
52215: LIST
52216: PUSH
52217: LD_INT 2
52219: PUSH
52220: LD_INT 3
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: LIST
52231: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52232: LD_ADDR_VAR 0 20
52236: PUSH
52237: LD_INT 1
52239: PUSH
52240: LD_INT 3
52242: PUSH
52243: EMPTY
52244: LIST
52245: LIST
52246: PUSH
52247: LD_INT 0
52249: PUSH
52250: LD_INT 3
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: PUSH
52257: LD_INT 1
52259: NEG
52260: PUSH
52261: LD_INT 2
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: LIST
52272: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52273: LD_ADDR_VAR 0 21
52277: PUSH
52278: LD_INT 2
52280: NEG
52281: PUSH
52282: LD_INT 1
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 3
52291: NEG
52292: PUSH
52293: LD_INT 0
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 3
52302: NEG
52303: PUSH
52304: LD_INT 1
52306: NEG
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: LIST
52316: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52317: LD_ADDR_VAR 0 22
52321: PUSH
52322: LD_INT 2
52324: NEG
52325: PUSH
52326: LD_INT 3
52328: NEG
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 3
52336: NEG
52337: PUSH
52338: LD_INT 2
52340: NEG
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: PUSH
52346: LD_INT 3
52348: NEG
52349: PUSH
52350: LD_INT 3
52352: NEG
52353: PUSH
52354: EMPTY
52355: LIST
52356: LIST
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: LIST
52362: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
52363: LD_ADDR_VAR 0 23
52367: PUSH
52368: LD_INT 0
52370: PUSH
52371: LD_INT 3
52373: NEG
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: PUSH
52379: LD_INT 1
52381: NEG
52382: PUSH
52383: LD_INT 4
52385: NEG
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: LD_INT 1
52393: PUSH
52394: LD_INT 3
52396: NEG
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: LIST
52406: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
52407: LD_ADDR_VAR 0 24
52411: PUSH
52412: LD_INT 3
52414: PUSH
52415: LD_INT 0
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PUSH
52422: LD_INT 3
52424: PUSH
52425: LD_INT 1
52427: NEG
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: LD_INT 4
52435: PUSH
52436: LD_INT 1
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PUSH
52443: EMPTY
52444: LIST
52445: LIST
52446: LIST
52447: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
52448: LD_ADDR_VAR 0 25
52452: PUSH
52453: LD_INT 3
52455: PUSH
52456: LD_INT 3
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: PUSH
52463: LD_INT 4
52465: PUSH
52466: LD_INT 3
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: PUSH
52473: LD_INT 3
52475: PUSH
52476: LD_INT 4
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: LIST
52487: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
52488: LD_ADDR_VAR 0 26
52492: PUSH
52493: LD_INT 0
52495: PUSH
52496: LD_INT 3
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: PUSH
52503: LD_INT 1
52505: PUSH
52506: LD_INT 4
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: PUSH
52513: LD_INT 1
52515: NEG
52516: PUSH
52517: LD_INT 3
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: PUSH
52524: EMPTY
52525: LIST
52526: LIST
52527: LIST
52528: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
52529: LD_ADDR_VAR 0 27
52533: PUSH
52534: LD_INT 3
52536: NEG
52537: PUSH
52538: LD_INT 0
52540: PUSH
52541: EMPTY
52542: LIST
52543: LIST
52544: PUSH
52545: LD_INT 3
52547: NEG
52548: PUSH
52549: LD_INT 1
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: PUSH
52556: LD_INT 4
52558: NEG
52559: PUSH
52560: LD_INT 1
52562: NEG
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: LIST
52572: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
52573: LD_ADDR_VAR 0 28
52577: PUSH
52578: LD_INT 3
52580: NEG
52581: PUSH
52582: LD_INT 3
52584: NEG
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: LD_INT 3
52592: NEG
52593: PUSH
52594: LD_INT 4
52596: NEG
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: PUSH
52602: LD_INT 4
52604: NEG
52605: PUSH
52606: LD_INT 3
52608: NEG
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: LIST
52618: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
52619: LD_ADDR_VAR 0 29
52623: PUSH
52624: LD_INT 1
52626: NEG
52627: PUSH
52628: LD_INT 3
52630: NEG
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: PUSH
52636: LD_INT 0
52638: PUSH
52639: LD_INT 3
52641: NEG
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: PUSH
52647: LD_INT 1
52649: PUSH
52650: LD_INT 2
52652: NEG
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 1
52660: NEG
52661: PUSH
52662: LD_INT 4
52664: NEG
52665: PUSH
52666: EMPTY
52667: LIST
52668: LIST
52669: PUSH
52670: LD_INT 0
52672: PUSH
52673: LD_INT 4
52675: NEG
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: LD_INT 1
52683: PUSH
52684: LD_INT 3
52686: NEG
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: PUSH
52692: LD_INT 1
52694: NEG
52695: PUSH
52696: LD_INT 5
52698: NEG
52699: PUSH
52700: EMPTY
52701: LIST
52702: LIST
52703: PUSH
52704: LD_INT 0
52706: PUSH
52707: LD_INT 5
52709: NEG
52710: PUSH
52711: EMPTY
52712: LIST
52713: LIST
52714: PUSH
52715: LD_INT 1
52717: PUSH
52718: LD_INT 4
52720: NEG
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: PUSH
52726: LD_INT 1
52728: NEG
52729: PUSH
52730: LD_INT 6
52732: NEG
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PUSH
52738: LD_INT 0
52740: PUSH
52741: LD_INT 6
52743: NEG
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: PUSH
52749: LD_INT 1
52751: PUSH
52752: LD_INT 5
52754: NEG
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: LIST
52764: LIST
52765: LIST
52766: LIST
52767: LIST
52768: LIST
52769: LIST
52770: LIST
52771: LIST
52772: LIST
52773: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
52774: LD_ADDR_VAR 0 30
52778: PUSH
52779: LD_INT 2
52781: PUSH
52782: LD_INT 1
52784: NEG
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: PUSH
52790: LD_INT 3
52792: PUSH
52793: LD_INT 0
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: LD_INT 3
52802: PUSH
52803: LD_INT 1
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: PUSH
52810: LD_INT 3
52812: PUSH
52813: LD_INT 1
52815: NEG
52816: PUSH
52817: EMPTY
52818: LIST
52819: LIST
52820: PUSH
52821: LD_INT 4
52823: PUSH
52824: LD_INT 0
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: LD_INT 4
52833: PUSH
52834: LD_INT 1
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: PUSH
52841: LD_INT 4
52843: PUSH
52844: LD_INT 1
52846: NEG
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: PUSH
52852: LD_INT 5
52854: PUSH
52855: LD_INT 0
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 5
52864: PUSH
52865: LD_INT 1
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 5
52874: PUSH
52875: LD_INT 1
52877: NEG
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: PUSH
52883: LD_INT 6
52885: PUSH
52886: LD_INT 0
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: PUSH
52893: LD_INT 6
52895: PUSH
52896: LD_INT 1
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: LIST
52910: LIST
52911: LIST
52912: LIST
52913: LIST
52914: LIST
52915: LIST
52916: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
52917: LD_ADDR_VAR 0 31
52921: PUSH
52922: LD_INT 3
52924: PUSH
52925: LD_INT 2
52927: PUSH
52928: EMPTY
52929: LIST
52930: LIST
52931: PUSH
52932: LD_INT 3
52934: PUSH
52935: LD_INT 3
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: PUSH
52942: LD_INT 2
52944: PUSH
52945: LD_INT 3
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PUSH
52952: LD_INT 4
52954: PUSH
52955: LD_INT 3
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: LD_INT 4
52964: PUSH
52965: LD_INT 4
52967: PUSH
52968: EMPTY
52969: LIST
52970: LIST
52971: PUSH
52972: LD_INT 3
52974: PUSH
52975: LD_INT 4
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: PUSH
52982: LD_INT 5
52984: PUSH
52985: LD_INT 4
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: LD_INT 5
52994: PUSH
52995: LD_INT 5
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: LD_INT 4
53004: PUSH
53005: LD_INT 5
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: PUSH
53012: LD_INT 6
53014: PUSH
53015: LD_INT 5
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 6
53024: PUSH
53025: LD_INT 6
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 5
53034: PUSH
53035: LD_INT 6
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: LIST
53046: LIST
53047: LIST
53048: LIST
53049: LIST
53050: LIST
53051: LIST
53052: LIST
53053: LIST
53054: LIST
53055: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
53056: LD_ADDR_VAR 0 32
53060: PUSH
53061: LD_INT 1
53063: PUSH
53064: LD_INT 3
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: PUSH
53071: LD_INT 0
53073: PUSH
53074: LD_INT 3
53076: PUSH
53077: EMPTY
53078: LIST
53079: LIST
53080: PUSH
53081: LD_INT 1
53083: NEG
53084: PUSH
53085: LD_INT 2
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 1
53094: PUSH
53095: LD_INT 4
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 0
53104: PUSH
53105: LD_INT 4
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 1
53114: NEG
53115: PUSH
53116: LD_INT 3
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: PUSH
53123: LD_INT 1
53125: PUSH
53126: LD_INT 5
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PUSH
53133: LD_INT 0
53135: PUSH
53136: LD_INT 5
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: PUSH
53143: LD_INT 1
53145: NEG
53146: PUSH
53147: LD_INT 4
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: LD_INT 1
53156: PUSH
53157: LD_INT 6
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: LD_INT 0
53166: PUSH
53167: LD_INT 6
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 1
53176: NEG
53177: PUSH
53178: LD_INT 5
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: LIST
53189: LIST
53190: LIST
53191: LIST
53192: LIST
53193: LIST
53194: LIST
53195: LIST
53196: LIST
53197: LIST
53198: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
53199: LD_ADDR_VAR 0 33
53203: PUSH
53204: LD_INT 2
53206: NEG
53207: PUSH
53208: LD_INT 1
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: LD_INT 3
53217: NEG
53218: PUSH
53219: LD_INT 0
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: PUSH
53226: LD_INT 3
53228: NEG
53229: PUSH
53230: LD_INT 1
53232: NEG
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: LD_INT 3
53240: NEG
53241: PUSH
53242: LD_INT 1
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: PUSH
53249: LD_INT 4
53251: NEG
53252: PUSH
53253: LD_INT 0
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: PUSH
53260: LD_INT 4
53262: NEG
53263: PUSH
53264: LD_INT 1
53266: NEG
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: LD_INT 4
53274: NEG
53275: PUSH
53276: LD_INT 1
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: PUSH
53283: LD_INT 5
53285: NEG
53286: PUSH
53287: LD_INT 0
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: LD_INT 5
53296: NEG
53297: PUSH
53298: LD_INT 1
53300: NEG
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: PUSH
53306: LD_INT 5
53308: NEG
53309: PUSH
53310: LD_INT 1
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: LD_INT 6
53319: NEG
53320: PUSH
53321: LD_INT 0
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: PUSH
53328: LD_INT 6
53330: NEG
53331: PUSH
53332: LD_INT 1
53334: NEG
53335: PUSH
53336: EMPTY
53337: LIST
53338: LIST
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: LIST
53344: LIST
53345: LIST
53346: LIST
53347: LIST
53348: LIST
53349: LIST
53350: LIST
53351: LIST
53352: LIST
53353: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
53354: LD_ADDR_VAR 0 34
53358: PUSH
53359: LD_INT 2
53361: NEG
53362: PUSH
53363: LD_INT 3
53365: NEG
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: PUSH
53371: LD_INT 3
53373: NEG
53374: PUSH
53375: LD_INT 2
53377: NEG
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 3
53385: NEG
53386: PUSH
53387: LD_INT 3
53389: NEG
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: PUSH
53395: LD_INT 3
53397: NEG
53398: PUSH
53399: LD_INT 4
53401: NEG
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PUSH
53407: LD_INT 4
53409: NEG
53410: PUSH
53411: LD_INT 3
53413: NEG
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 4
53421: NEG
53422: PUSH
53423: LD_INT 4
53425: NEG
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: PUSH
53431: LD_INT 4
53433: NEG
53434: PUSH
53435: LD_INT 5
53437: NEG
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: PUSH
53443: LD_INT 5
53445: NEG
53446: PUSH
53447: LD_INT 4
53449: NEG
53450: PUSH
53451: EMPTY
53452: LIST
53453: LIST
53454: PUSH
53455: LD_INT 5
53457: NEG
53458: PUSH
53459: LD_INT 5
53461: NEG
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: PUSH
53467: LD_INT 5
53469: NEG
53470: PUSH
53471: LD_INT 6
53473: NEG
53474: PUSH
53475: EMPTY
53476: LIST
53477: LIST
53478: PUSH
53479: LD_INT 6
53481: NEG
53482: PUSH
53483: LD_INT 5
53485: NEG
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: LD_INT 6
53493: NEG
53494: PUSH
53495: LD_INT 6
53497: NEG
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: PUSH
53503: EMPTY
53504: LIST
53505: LIST
53506: LIST
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
53517: LD_ADDR_VAR 0 41
53521: PUSH
53522: LD_INT 0
53524: PUSH
53525: LD_INT 2
53527: NEG
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: PUSH
53533: LD_INT 1
53535: NEG
53536: PUSH
53537: LD_INT 3
53539: NEG
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: PUSH
53545: LD_INT 1
53547: PUSH
53548: LD_INT 2
53550: NEG
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: PUSH
53556: EMPTY
53557: LIST
53558: LIST
53559: LIST
53560: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
53561: LD_ADDR_VAR 0 42
53565: PUSH
53566: LD_INT 2
53568: PUSH
53569: LD_INT 0
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: PUSH
53576: LD_INT 2
53578: PUSH
53579: LD_INT 1
53581: NEG
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: PUSH
53587: LD_INT 3
53589: PUSH
53590: LD_INT 1
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: PUSH
53597: EMPTY
53598: LIST
53599: LIST
53600: LIST
53601: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
53602: LD_ADDR_VAR 0 43
53606: PUSH
53607: LD_INT 2
53609: PUSH
53610: LD_INT 2
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: LD_INT 3
53619: PUSH
53620: LD_INT 2
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: PUSH
53627: LD_INT 2
53629: PUSH
53630: LD_INT 3
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: LIST
53641: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
53642: LD_ADDR_VAR 0 44
53646: PUSH
53647: LD_INT 0
53649: PUSH
53650: LD_INT 2
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: PUSH
53657: LD_INT 1
53659: PUSH
53660: LD_INT 3
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: PUSH
53667: LD_INT 1
53669: NEG
53670: PUSH
53671: LD_INT 2
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: LIST
53682: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53683: LD_ADDR_VAR 0 45
53687: PUSH
53688: LD_INT 2
53690: NEG
53691: PUSH
53692: LD_INT 0
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: PUSH
53699: LD_INT 2
53701: NEG
53702: PUSH
53703: LD_INT 1
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: PUSH
53710: LD_INT 3
53712: NEG
53713: PUSH
53714: LD_INT 1
53716: NEG
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: LIST
53726: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
53727: LD_ADDR_VAR 0 46
53731: PUSH
53732: LD_INT 2
53734: NEG
53735: PUSH
53736: LD_INT 2
53738: NEG
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: PUSH
53744: LD_INT 2
53746: NEG
53747: PUSH
53748: LD_INT 3
53750: NEG
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: PUSH
53756: LD_INT 3
53758: NEG
53759: PUSH
53760: LD_INT 2
53762: NEG
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: LIST
53772: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
53773: LD_ADDR_VAR 0 47
53777: PUSH
53778: LD_INT 2
53780: NEG
53781: PUSH
53782: LD_INT 3
53784: NEG
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: PUSH
53790: LD_INT 1
53792: NEG
53793: PUSH
53794: LD_INT 3
53796: NEG
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: EMPTY
53803: LIST
53804: LIST
53805: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53806: LD_ADDR_VAR 0 48
53810: PUSH
53811: LD_INT 1
53813: PUSH
53814: LD_INT 2
53816: NEG
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: PUSH
53822: LD_INT 2
53824: PUSH
53825: LD_INT 1
53827: NEG
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
53837: LD_ADDR_VAR 0 49
53841: PUSH
53842: LD_INT 3
53844: PUSH
53845: LD_INT 1
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: PUSH
53852: LD_INT 3
53854: PUSH
53855: LD_INT 2
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
53866: LD_ADDR_VAR 0 50
53870: PUSH
53871: LD_INT 2
53873: PUSH
53874: LD_INT 3
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: PUSH
53881: LD_INT 1
53883: PUSH
53884: LD_INT 3
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: PUSH
53891: EMPTY
53892: LIST
53893: LIST
53894: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53895: LD_ADDR_VAR 0 51
53899: PUSH
53900: LD_INT 1
53902: NEG
53903: PUSH
53904: LD_INT 2
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: PUSH
53911: LD_INT 2
53913: NEG
53914: PUSH
53915: LD_INT 1
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53926: LD_ADDR_VAR 0 52
53930: PUSH
53931: LD_INT 3
53933: NEG
53934: PUSH
53935: LD_INT 1
53937: NEG
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: LD_INT 3
53945: NEG
53946: PUSH
53947: LD_INT 2
53949: NEG
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: EMPTY
53956: LIST
53957: LIST
53958: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53959: LD_ADDR_VAR 0 53
53963: PUSH
53964: LD_INT 1
53966: NEG
53967: PUSH
53968: LD_INT 3
53970: NEG
53971: PUSH
53972: EMPTY
53973: LIST
53974: LIST
53975: PUSH
53976: LD_INT 0
53978: PUSH
53979: LD_INT 3
53981: NEG
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: PUSH
53987: LD_INT 1
53989: PUSH
53990: LD_INT 2
53992: NEG
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: LIST
54002: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54003: LD_ADDR_VAR 0 54
54007: PUSH
54008: LD_INT 2
54010: PUSH
54011: LD_INT 1
54013: NEG
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: PUSH
54019: LD_INT 3
54021: PUSH
54022: LD_INT 0
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PUSH
54029: LD_INT 3
54031: PUSH
54032: LD_INT 1
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: LIST
54043: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54044: LD_ADDR_VAR 0 55
54048: PUSH
54049: LD_INT 3
54051: PUSH
54052: LD_INT 2
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 3
54061: PUSH
54062: LD_INT 3
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: PUSH
54069: LD_INT 2
54071: PUSH
54072: LD_INT 3
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: LIST
54083: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54084: LD_ADDR_VAR 0 56
54088: PUSH
54089: LD_INT 1
54091: PUSH
54092: LD_INT 3
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: LD_INT 0
54101: PUSH
54102: LD_INT 3
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: PUSH
54109: LD_INT 1
54111: NEG
54112: PUSH
54113: LD_INT 2
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: LIST
54124: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54125: LD_ADDR_VAR 0 57
54129: PUSH
54130: LD_INT 2
54132: NEG
54133: PUSH
54134: LD_INT 1
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: LD_INT 3
54143: NEG
54144: PUSH
54145: LD_INT 0
54147: PUSH
54148: EMPTY
54149: LIST
54150: LIST
54151: PUSH
54152: LD_INT 3
54154: NEG
54155: PUSH
54156: LD_INT 1
54158: NEG
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: LIST
54168: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54169: LD_ADDR_VAR 0 58
54173: PUSH
54174: LD_INT 2
54176: NEG
54177: PUSH
54178: LD_INT 3
54180: NEG
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 3
54188: NEG
54189: PUSH
54190: LD_INT 2
54192: NEG
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: LD_INT 3
54200: NEG
54201: PUSH
54202: LD_INT 3
54204: NEG
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: LIST
54214: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
54215: LD_ADDR_VAR 0 59
54219: PUSH
54220: LD_INT 1
54222: NEG
54223: PUSH
54224: LD_INT 2
54226: NEG
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: LD_INT 0
54234: PUSH
54235: LD_INT 2
54237: NEG
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: LD_INT 1
54245: PUSH
54246: LD_INT 1
54248: NEG
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: LIST
54258: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54259: LD_ADDR_VAR 0 60
54263: PUSH
54264: LD_INT 1
54266: PUSH
54267: LD_INT 1
54269: NEG
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 2
54277: PUSH
54278: LD_INT 0
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 2
54287: PUSH
54288: LD_INT 1
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: EMPTY
54296: LIST
54297: LIST
54298: LIST
54299: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54300: LD_ADDR_VAR 0 61
54304: PUSH
54305: LD_INT 2
54307: PUSH
54308: LD_INT 1
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 2
54317: PUSH
54318: LD_INT 2
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 1
54327: PUSH
54328: LD_INT 2
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: LIST
54339: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54340: LD_ADDR_VAR 0 62
54344: PUSH
54345: LD_INT 1
54347: PUSH
54348: LD_INT 2
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PUSH
54355: LD_INT 0
54357: PUSH
54358: LD_INT 2
54360: PUSH
54361: EMPTY
54362: LIST
54363: LIST
54364: PUSH
54365: LD_INT 1
54367: NEG
54368: PUSH
54369: LD_INT 1
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: PUSH
54376: EMPTY
54377: LIST
54378: LIST
54379: LIST
54380: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54381: LD_ADDR_VAR 0 63
54385: PUSH
54386: LD_INT 1
54388: NEG
54389: PUSH
54390: LD_INT 1
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: LD_INT 2
54399: NEG
54400: PUSH
54401: LD_INT 0
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: PUSH
54408: LD_INT 2
54410: NEG
54411: PUSH
54412: LD_INT 1
54414: NEG
54415: PUSH
54416: EMPTY
54417: LIST
54418: LIST
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: LIST
54424: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54425: LD_ADDR_VAR 0 64
54429: PUSH
54430: LD_INT 1
54432: NEG
54433: PUSH
54434: LD_INT 2
54436: NEG
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: LD_INT 2
54444: NEG
54445: PUSH
54446: LD_INT 1
54448: NEG
54449: PUSH
54450: EMPTY
54451: LIST
54452: LIST
54453: PUSH
54454: LD_INT 2
54456: NEG
54457: PUSH
54458: LD_INT 2
54460: NEG
54461: PUSH
54462: EMPTY
54463: LIST
54464: LIST
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: LIST
54470: ST_TO_ADDR
// end ; 2 :
54471: GO 57737
54473: LD_INT 2
54475: DOUBLE
54476: EQUAL
54477: IFTRUE 54481
54479: GO 57736
54481: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
54482: LD_ADDR_VAR 0 29
54486: PUSH
54487: LD_INT 4
54489: PUSH
54490: LD_INT 0
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: LD_INT 4
54499: PUSH
54500: LD_INT 1
54502: NEG
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: PUSH
54508: LD_INT 5
54510: PUSH
54511: LD_INT 0
54513: PUSH
54514: EMPTY
54515: LIST
54516: LIST
54517: PUSH
54518: LD_INT 5
54520: PUSH
54521: LD_INT 1
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: PUSH
54528: LD_INT 4
54530: PUSH
54531: LD_INT 1
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: PUSH
54538: LD_INT 3
54540: PUSH
54541: LD_INT 0
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: PUSH
54548: LD_INT 3
54550: PUSH
54551: LD_INT 1
54553: NEG
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: LD_INT 3
54561: PUSH
54562: LD_INT 2
54564: NEG
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: PUSH
54570: LD_INT 5
54572: PUSH
54573: LD_INT 2
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: PUSH
54580: LD_INT 3
54582: PUSH
54583: LD_INT 3
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 3
54592: PUSH
54593: LD_INT 2
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: PUSH
54600: LD_INT 4
54602: PUSH
54603: LD_INT 3
54605: PUSH
54606: EMPTY
54607: LIST
54608: LIST
54609: PUSH
54610: LD_INT 4
54612: PUSH
54613: LD_INT 4
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: PUSH
54620: LD_INT 3
54622: PUSH
54623: LD_INT 4
54625: PUSH
54626: EMPTY
54627: LIST
54628: LIST
54629: PUSH
54630: LD_INT 2
54632: PUSH
54633: LD_INT 3
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: PUSH
54640: LD_INT 2
54642: PUSH
54643: LD_INT 2
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: LD_INT 4
54652: PUSH
54653: LD_INT 2
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: LD_INT 2
54662: PUSH
54663: LD_INT 4
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 0
54672: PUSH
54673: LD_INT 4
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: PUSH
54680: LD_INT 0
54682: PUSH
54683: LD_INT 3
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: LD_INT 1
54692: PUSH
54693: LD_INT 4
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: LD_INT 1
54702: PUSH
54703: LD_INT 5
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: LD_INT 0
54712: PUSH
54713: LD_INT 5
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 1
54722: NEG
54723: PUSH
54724: LD_INT 4
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: PUSH
54731: LD_INT 1
54733: NEG
54734: PUSH
54735: LD_INT 3
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 2
54744: PUSH
54745: LD_INT 5
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: PUSH
54752: LD_INT 2
54754: NEG
54755: PUSH
54756: LD_INT 3
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: LD_INT 3
54765: NEG
54766: PUSH
54767: LD_INT 0
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: LD_INT 3
54776: NEG
54777: PUSH
54778: LD_INT 1
54780: NEG
54781: PUSH
54782: EMPTY
54783: LIST
54784: LIST
54785: PUSH
54786: LD_INT 2
54788: NEG
54789: PUSH
54790: LD_INT 0
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: PUSH
54797: LD_INT 2
54799: NEG
54800: PUSH
54801: LD_INT 1
54803: PUSH
54804: EMPTY
54805: LIST
54806: LIST
54807: PUSH
54808: LD_INT 3
54810: NEG
54811: PUSH
54812: LD_INT 1
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: LD_INT 4
54821: NEG
54822: PUSH
54823: LD_INT 0
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PUSH
54830: LD_INT 4
54832: NEG
54833: PUSH
54834: LD_INT 1
54836: NEG
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: LD_INT 4
54844: NEG
54845: PUSH
54846: LD_INT 2
54848: NEG
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: PUSH
54854: LD_INT 2
54856: NEG
54857: PUSH
54858: LD_INT 2
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: PUSH
54865: LD_INT 4
54867: NEG
54868: PUSH
54869: LD_INT 4
54871: NEG
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: PUSH
54877: LD_INT 4
54879: NEG
54880: PUSH
54881: LD_INT 5
54883: NEG
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: LD_INT 3
54891: NEG
54892: PUSH
54893: LD_INT 4
54895: NEG
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: PUSH
54901: LD_INT 3
54903: NEG
54904: PUSH
54905: LD_INT 3
54907: NEG
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: PUSH
54913: LD_INT 4
54915: NEG
54916: PUSH
54917: LD_INT 3
54919: NEG
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: PUSH
54925: LD_INT 5
54927: NEG
54928: PUSH
54929: LD_INT 4
54931: NEG
54932: PUSH
54933: EMPTY
54934: LIST
54935: LIST
54936: PUSH
54937: LD_INT 5
54939: NEG
54940: PUSH
54941: LD_INT 5
54943: NEG
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: LD_INT 3
54951: NEG
54952: PUSH
54953: LD_INT 5
54955: NEG
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: PUSH
54961: LD_INT 5
54963: NEG
54964: PUSH
54965: LD_INT 3
54967: NEG
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: LIST
54977: LIST
54978: LIST
54979: LIST
54980: LIST
54981: LIST
54982: LIST
54983: LIST
54984: LIST
54985: LIST
54986: LIST
54987: LIST
54988: LIST
54989: LIST
54990: LIST
54991: LIST
54992: LIST
54993: LIST
54994: LIST
54995: LIST
54996: LIST
54997: LIST
54998: LIST
54999: LIST
55000: LIST
55001: LIST
55002: LIST
55003: LIST
55004: LIST
55005: LIST
55006: LIST
55007: LIST
55008: LIST
55009: LIST
55010: LIST
55011: LIST
55012: LIST
55013: LIST
55014: LIST
55015: LIST
55016: LIST
55017: LIST
55018: LIST
55019: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
55020: LD_ADDR_VAR 0 30
55024: PUSH
55025: LD_INT 4
55027: PUSH
55028: LD_INT 4
55030: PUSH
55031: EMPTY
55032: LIST
55033: LIST
55034: PUSH
55035: LD_INT 4
55037: PUSH
55038: LD_INT 3
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 5
55047: PUSH
55048: LD_INT 4
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: PUSH
55055: LD_INT 5
55057: PUSH
55058: LD_INT 5
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: LD_INT 4
55067: PUSH
55068: LD_INT 5
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: LD_INT 3
55077: PUSH
55078: LD_INT 4
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: PUSH
55085: LD_INT 3
55087: PUSH
55088: LD_INT 3
55090: PUSH
55091: EMPTY
55092: LIST
55093: LIST
55094: PUSH
55095: LD_INT 5
55097: PUSH
55098: LD_INT 3
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: PUSH
55105: LD_INT 3
55107: PUSH
55108: LD_INT 5
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: PUSH
55115: LD_INT 0
55117: PUSH
55118: LD_INT 3
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: PUSH
55125: LD_INT 0
55127: PUSH
55128: LD_INT 2
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: PUSH
55135: LD_INT 1
55137: PUSH
55138: LD_INT 3
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: PUSH
55145: LD_INT 1
55147: PUSH
55148: LD_INT 4
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: PUSH
55155: LD_INT 0
55157: PUSH
55158: LD_INT 4
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: PUSH
55165: LD_INT 1
55167: NEG
55168: PUSH
55169: LD_INT 3
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: PUSH
55176: LD_INT 1
55178: NEG
55179: PUSH
55180: LD_INT 2
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: LD_INT 2
55189: PUSH
55190: LD_INT 4
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: LD_INT 2
55199: NEG
55200: PUSH
55201: LD_INT 2
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: LD_INT 4
55210: NEG
55211: PUSH
55212: LD_INT 0
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: LD_INT 4
55221: NEG
55222: PUSH
55223: LD_INT 1
55225: NEG
55226: PUSH
55227: EMPTY
55228: LIST
55229: LIST
55230: PUSH
55231: LD_INT 3
55233: NEG
55234: PUSH
55235: LD_INT 0
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: PUSH
55242: LD_INT 3
55244: NEG
55245: PUSH
55246: LD_INT 1
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: PUSH
55253: LD_INT 4
55255: NEG
55256: PUSH
55257: LD_INT 1
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 5
55266: NEG
55267: PUSH
55268: LD_INT 0
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 5
55277: NEG
55278: PUSH
55279: LD_INT 1
55281: NEG
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: LD_INT 5
55289: NEG
55290: PUSH
55291: LD_INT 2
55293: NEG
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: PUSH
55299: LD_INT 3
55301: NEG
55302: PUSH
55303: LD_INT 2
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: PUSH
55310: LD_INT 3
55312: NEG
55313: PUSH
55314: LD_INT 3
55316: NEG
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: PUSH
55322: LD_INT 3
55324: NEG
55325: PUSH
55326: LD_INT 4
55328: NEG
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: PUSH
55334: LD_INT 2
55336: NEG
55337: PUSH
55338: LD_INT 3
55340: NEG
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 2
55348: NEG
55349: PUSH
55350: LD_INT 2
55352: NEG
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: PUSH
55358: LD_INT 3
55360: NEG
55361: PUSH
55362: LD_INT 2
55364: NEG
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: PUSH
55370: LD_INT 4
55372: NEG
55373: PUSH
55374: LD_INT 3
55376: NEG
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 4
55384: NEG
55385: PUSH
55386: LD_INT 4
55388: NEG
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: PUSH
55394: LD_INT 2
55396: NEG
55397: PUSH
55398: LD_INT 4
55400: NEG
55401: PUSH
55402: EMPTY
55403: LIST
55404: LIST
55405: PUSH
55406: LD_INT 4
55408: NEG
55409: PUSH
55410: LD_INT 2
55412: NEG
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: PUSH
55418: LD_INT 0
55420: PUSH
55421: LD_INT 4
55423: NEG
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: LD_INT 0
55431: PUSH
55432: LD_INT 5
55434: NEG
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: PUSH
55440: LD_INT 1
55442: PUSH
55443: LD_INT 4
55445: NEG
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: PUSH
55451: LD_INT 1
55453: PUSH
55454: LD_INT 3
55456: NEG
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: PUSH
55462: LD_INT 0
55464: PUSH
55465: LD_INT 3
55467: NEG
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: PUSH
55473: LD_INT 1
55475: NEG
55476: PUSH
55477: LD_INT 4
55479: NEG
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PUSH
55485: LD_INT 1
55487: NEG
55488: PUSH
55489: LD_INT 5
55491: NEG
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: LD_INT 2
55499: PUSH
55500: LD_INT 3
55502: NEG
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: PUSH
55508: LD_INT 2
55510: NEG
55511: PUSH
55512: LD_INT 5
55514: NEG
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: LIST
55524: LIST
55525: LIST
55526: LIST
55527: LIST
55528: LIST
55529: LIST
55530: LIST
55531: LIST
55532: LIST
55533: LIST
55534: LIST
55535: LIST
55536: LIST
55537: LIST
55538: LIST
55539: LIST
55540: LIST
55541: LIST
55542: LIST
55543: LIST
55544: LIST
55545: LIST
55546: LIST
55547: LIST
55548: LIST
55549: LIST
55550: LIST
55551: LIST
55552: LIST
55553: LIST
55554: LIST
55555: LIST
55556: LIST
55557: LIST
55558: LIST
55559: LIST
55560: LIST
55561: LIST
55562: LIST
55563: LIST
55564: LIST
55565: LIST
55566: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
55567: LD_ADDR_VAR 0 31
55571: PUSH
55572: LD_INT 0
55574: PUSH
55575: LD_INT 4
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: LD_INT 0
55584: PUSH
55585: LD_INT 3
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: LD_INT 1
55594: PUSH
55595: LD_INT 4
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: PUSH
55602: LD_INT 1
55604: PUSH
55605: LD_INT 5
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 0
55614: PUSH
55615: LD_INT 5
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: PUSH
55622: LD_INT 1
55624: NEG
55625: PUSH
55626: LD_INT 4
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: LD_INT 1
55635: NEG
55636: PUSH
55637: LD_INT 3
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 2
55646: PUSH
55647: LD_INT 5
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_INT 2
55656: NEG
55657: PUSH
55658: LD_INT 3
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: PUSH
55665: LD_INT 3
55667: NEG
55668: PUSH
55669: LD_INT 0
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PUSH
55676: LD_INT 3
55678: NEG
55679: PUSH
55680: LD_INT 1
55682: NEG
55683: PUSH
55684: EMPTY
55685: LIST
55686: LIST
55687: PUSH
55688: LD_INT 2
55690: NEG
55691: PUSH
55692: LD_INT 0
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 2
55701: NEG
55702: PUSH
55703: LD_INT 1
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: LD_INT 3
55712: NEG
55713: PUSH
55714: LD_INT 1
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: PUSH
55721: LD_INT 4
55723: NEG
55724: PUSH
55725: LD_INT 0
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: PUSH
55732: LD_INT 4
55734: NEG
55735: PUSH
55736: LD_INT 1
55738: NEG
55739: PUSH
55740: EMPTY
55741: LIST
55742: LIST
55743: PUSH
55744: LD_INT 4
55746: NEG
55747: PUSH
55748: LD_INT 2
55750: NEG
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: PUSH
55756: LD_INT 2
55758: NEG
55759: PUSH
55760: LD_INT 2
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: PUSH
55767: LD_INT 4
55769: NEG
55770: PUSH
55771: LD_INT 4
55773: NEG
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: LD_INT 4
55781: NEG
55782: PUSH
55783: LD_INT 5
55785: NEG
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 3
55793: NEG
55794: PUSH
55795: LD_INT 4
55797: NEG
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: LD_INT 3
55805: NEG
55806: PUSH
55807: LD_INT 3
55809: NEG
55810: PUSH
55811: EMPTY
55812: LIST
55813: LIST
55814: PUSH
55815: LD_INT 4
55817: NEG
55818: PUSH
55819: LD_INT 3
55821: NEG
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: LD_INT 5
55829: NEG
55830: PUSH
55831: LD_INT 4
55833: NEG
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: PUSH
55839: LD_INT 5
55841: NEG
55842: PUSH
55843: LD_INT 5
55845: NEG
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: PUSH
55851: LD_INT 3
55853: NEG
55854: PUSH
55855: LD_INT 5
55857: NEG
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: PUSH
55863: LD_INT 5
55865: NEG
55866: PUSH
55867: LD_INT 3
55869: NEG
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PUSH
55875: LD_INT 0
55877: PUSH
55878: LD_INT 3
55880: NEG
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: LD_INT 0
55888: PUSH
55889: LD_INT 4
55891: NEG
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 1
55899: PUSH
55900: LD_INT 3
55902: NEG
55903: PUSH
55904: EMPTY
55905: LIST
55906: LIST
55907: PUSH
55908: LD_INT 1
55910: PUSH
55911: LD_INT 2
55913: NEG
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PUSH
55919: LD_INT 0
55921: PUSH
55922: LD_INT 2
55924: NEG
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: PUSH
55930: LD_INT 1
55932: NEG
55933: PUSH
55934: LD_INT 3
55936: NEG
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: PUSH
55942: LD_INT 1
55944: NEG
55945: PUSH
55946: LD_INT 4
55948: NEG
55949: PUSH
55950: EMPTY
55951: LIST
55952: LIST
55953: PUSH
55954: LD_INT 2
55956: PUSH
55957: LD_INT 2
55959: NEG
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: PUSH
55965: LD_INT 2
55967: NEG
55968: PUSH
55969: LD_INT 4
55971: NEG
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: LD_INT 4
55979: PUSH
55980: LD_INT 0
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: PUSH
55987: LD_INT 4
55989: PUSH
55990: LD_INT 1
55992: NEG
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: PUSH
55998: LD_INT 5
56000: PUSH
56001: LD_INT 0
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: PUSH
56008: LD_INT 5
56010: PUSH
56011: LD_INT 1
56013: PUSH
56014: EMPTY
56015: LIST
56016: LIST
56017: PUSH
56018: LD_INT 4
56020: PUSH
56021: LD_INT 1
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: LD_INT 3
56030: PUSH
56031: LD_INT 0
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: LD_INT 3
56040: PUSH
56041: LD_INT 1
56043: NEG
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PUSH
56049: LD_INT 3
56051: PUSH
56052: LD_INT 2
56054: NEG
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: PUSH
56060: LD_INT 5
56062: PUSH
56063: LD_INT 2
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: LIST
56077: LIST
56078: LIST
56079: LIST
56080: LIST
56081: LIST
56082: LIST
56083: LIST
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: LIST
56090: LIST
56091: LIST
56092: LIST
56093: LIST
56094: LIST
56095: LIST
56096: LIST
56097: LIST
56098: LIST
56099: LIST
56100: LIST
56101: LIST
56102: LIST
56103: LIST
56104: LIST
56105: LIST
56106: LIST
56107: LIST
56108: LIST
56109: LIST
56110: LIST
56111: LIST
56112: LIST
56113: LIST
56114: LIST
56115: LIST
56116: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
56117: LD_ADDR_VAR 0 32
56121: PUSH
56122: LD_INT 4
56124: NEG
56125: PUSH
56126: LD_INT 0
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: PUSH
56133: LD_INT 4
56135: NEG
56136: PUSH
56137: LD_INT 1
56139: NEG
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: PUSH
56145: LD_INT 3
56147: NEG
56148: PUSH
56149: LD_INT 0
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: PUSH
56156: LD_INT 3
56158: NEG
56159: PUSH
56160: LD_INT 1
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: LD_INT 4
56169: NEG
56170: PUSH
56171: LD_INT 1
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: PUSH
56178: LD_INT 5
56180: NEG
56181: PUSH
56182: LD_INT 0
56184: PUSH
56185: EMPTY
56186: LIST
56187: LIST
56188: PUSH
56189: LD_INT 5
56191: NEG
56192: PUSH
56193: LD_INT 1
56195: NEG
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PUSH
56201: LD_INT 5
56203: NEG
56204: PUSH
56205: LD_INT 2
56207: NEG
56208: PUSH
56209: EMPTY
56210: LIST
56211: LIST
56212: PUSH
56213: LD_INT 3
56215: NEG
56216: PUSH
56217: LD_INT 2
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: PUSH
56224: LD_INT 3
56226: NEG
56227: PUSH
56228: LD_INT 3
56230: NEG
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: PUSH
56236: LD_INT 3
56238: NEG
56239: PUSH
56240: LD_INT 4
56242: NEG
56243: PUSH
56244: EMPTY
56245: LIST
56246: LIST
56247: PUSH
56248: LD_INT 2
56250: NEG
56251: PUSH
56252: LD_INT 3
56254: NEG
56255: PUSH
56256: EMPTY
56257: LIST
56258: LIST
56259: PUSH
56260: LD_INT 2
56262: NEG
56263: PUSH
56264: LD_INT 2
56266: NEG
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: LD_INT 3
56274: NEG
56275: PUSH
56276: LD_INT 2
56278: NEG
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: PUSH
56284: LD_INT 4
56286: NEG
56287: PUSH
56288: LD_INT 3
56290: NEG
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: PUSH
56296: LD_INT 4
56298: NEG
56299: PUSH
56300: LD_INT 4
56302: NEG
56303: PUSH
56304: EMPTY
56305: LIST
56306: LIST
56307: PUSH
56308: LD_INT 2
56310: NEG
56311: PUSH
56312: LD_INT 4
56314: NEG
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: PUSH
56320: LD_INT 4
56322: NEG
56323: PUSH
56324: LD_INT 2
56326: NEG
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: PUSH
56332: LD_INT 0
56334: PUSH
56335: LD_INT 4
56337: NEG
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: PUSH
56343: LD_INT 0
56345: PUSH
56346: LD_INT 5
56348: NEG
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: LD_INT 1
56356: PUSH
56357: LD_INT 4
56359: NEG
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: PUSH
56365: LD_INT 1
56367: PUSH
56368: LD_INT 3
56370: NEG
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: LD_INT 0
56378: PUSH
56379: LD_INT 3
56381: NEG
56382: PUSH
56383: EMPTY
56384: LIST
56385: LIST
56386: PUSH
56387: LD_INT 1
56389: NEG
56390: PUSH
56391: LD_INT 4
56393: NEG
56394: PUSH
56395: EMPTY
56396: LIST
56397: LIST
56398: PUSH
56399: LD_INT 1
56401: NEG
56402: PUSH
56403: LD_INT 5
56405: NEG
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: PUSH
56411: LD_INT 2
56413: PUSH
56414: LD_INT 3
56416: NEG
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PUSH
56422: LD_INT 2
56424: NEG
56425: PUSH
56426: LD_INT 5
56428: NEG
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: PUSH
56434: LD_INT 3
56436: PUSH
56437: LD_INT 0
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: PUSH
56444: LD_INT 3
56446: PUSH
56447: LD_INT 1
56449: NEG
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PUSH
56455: LD_INT 4
56457: PUSH
56458: LD_INT 0
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: PUSH
56465: LD_INT 4
56467: PUSH
56468: LD_INT 1
56470: PUSH
56471: EMPTY
56472: LIST
56473: LIST
56474: PUSH
56475: LD_INT 3
56477: PUSH
56478: LD_INT 1
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: LD_INT 2
56487: PUSH
56488: LD_INT 0
56490: PUSH
56491: EMPTY
56492: LIST
56493: LIST
56494: PUSH
56495: LD_INT 2
56497: PUSH
56498: LD_INT 1
56500: NEG
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 2
56508: PUSH
56509: LD_INT 2
56511: NEG
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 4
56519: PUSH
56520: LD_INT 2
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 4
56529: PUSH
56530: LD_INT 4
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: LD_INT 4
56539: PUSH
56540: LD_INT 3
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: LD_INT 5
56549: PUSH
56550: LD_INT 4
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: PUSH
56557: LD_INT 5
56559: PUSH
56560: LD_INT 5
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: LD_INT 4
56569: PUSH
56570: LD_INT 5
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: LD_INT 3
56579: PUSH
56580: LD_INT 4
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: LD_INT 3
56589: PUSH
56590: LD_INT 3
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: LD_INT 5
56599: PUSH
56600: LD_INT 3
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: LD_INT 3
56609: PUSH
56610: LD_INT 5
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: LIST
56621: LIST
56622: LIST
56623: LIST
56624: LIST
56625: LIST
56626: LIST
56627: LIST
56628: LIST
56629: LIST
56630: LIST
56631: LIST
56632: LIST
56633: LIST
56634: LIST
56635: LIST
56636: LIST
56637: LIST
56638: LIST
56639: LIST
56640: LIST
56641: LIST
56642: LIST
56643: LIST
56644: LIST
56645: LIST
56646: LIST
56647: LIST
56648: LIST
56649: LIST
56650: LIST
56651: LIST
56652: LIST
56653: LIST
56654: LIST
56655: LIST
56656: LIST
56657: LIST
56658: LIST
56659: LIST
56660: LIST
56661: LIST
56662: LIST
56663: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
56664: LD_ADDR_VAR 0 33
56668: PUSH
56669: LD_INT 4
56671: NEG
56672: PUSH
56673: LD_INT 4
56675: NEG
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: PUSH
56681: LD_INT 4
56683: NEG
56684: PUSH
56685: LD_INT 5
56687: NEG
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: PUSH
56693: LD_INT 3
56695: NEG
56696: PUSH
56697: LD_INT 4
56699: NEG
56700: PUSH
56701: EMPTY
56702: LIST
56703: LIST
56704: PUSH
56705: LD_INT 3
56707: NEG
56708: PUSH
56709: LD_INT 3
56711: NEG
56712: PUSH
56713: EMPTY
56714: LIST
56715: LIST
56716: PUSH
56717: LD_INT 4
56719: NEG
56720: PUSH
56721: LD_INT 3
56723: NEG
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: PUSH
56729: LD_INT 5
56731: NEG
56732: PUSH
56733: LD_INT 4
56735: NEG
56736: PUSH
56737: EMPTY
56738: LIST
56739: LIST
56740: PUSH
56741: LD_INT 5
56743: NEG
56744: PUSH
56745: LD_INT 5
56747: NEG
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: LD_INT 3
56755: NEG
56756: PUSH
56757: LD_INT 5
56759: NEG
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: PUSH
56765: LD_INT 5
56767: NEG
56768: PUSH
56769: LD_INT 3
56771: NEG
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: PUSH
56777: LD_INT 0
56779: PUSH
56780: LD_INT 3
56782: NEG
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PUSH
56788: LD_INT 0
56790: PUSH
56791: LD_INT 4
56793: NEG
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: LD_INT 1
56801: PUSH
56802: LD_INT 3
56804: NEG
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: LD_INT 1
56812: PUSH
56813: LD_INT 2
56815: NEG
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 0
56823: PUSH
56824: LD_INT 2
56826: NEG
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: PUSH
56832: LD_INT 1
56834: NEG
56835: PUSH
56836: LD_INT 3
56838: NEG
56839: PUSH
56840: EMPTY
56841: LIST
56842: LIST
56843: PUSH
56844: LD_INT 1
56846: NEG
56847: PUSH
56848: LD_INT 4
56850: NEG
56851: PUSH
56852: EMPTY
56853: LIST
56854: LIST
56855: PUSH
56856: LD_INT 2
56858: PUSH
56859: LD_INT 2
56861: NEG
56862: PUSH
56863: EMPTY
56864: LIST
56865: LIST
56866: PUSH
56867: LD_INT 2
56869: NEG
56870: PUSH
56871: LD_INT 4
56873: NEG
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: PUSH
56879: LD_INT 4
56881: PUSH
56882: LD_INT 0
56884: PUSH
56885: EMPTY
56886: LIST
56887: LIST
56888: PUSH
56889: LD_INT 4
56891: PUSH
56892: LD_INT 1
56894: NEG
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: PUSH
56900: LD_INT 5
56902: PUSH
56903: LD_INT 0
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: PUSH
56910: LD_INT 5
56912: PUSH
56913: LD_INT 1
56915: PUSH
56916: EMPTY
56917: LIST
56918: LIST
56919: PUSH
56920: LD_INT 4
56922: PUSH
56923: LD_INT 1
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: PUSH
56930: LD_INT 3
56932: PUSH
56933: LD_INT 0
56935: PUSH
56936: EMPTY
56937: LIST
56938: LIST
56939: PUSH
56940: LD_INT 3
56942: PUSH
56943: LD_INT 1
56945: NEG
56946: PUSH
56947: EMPTY
56948: LIST
56949: LIST
56950: PUSH
56951: LD_INT 3
56953: PUSH
56954: LD_INT 2
56956: NEG
56957: PUSH
56958: EMPTY
56959: LIST
56960: LIST
56961: PUSH
56962: LD_INT 5
56964: PUSH
56965: LD_INT 2
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: PUSH
56972: LD_INT 3
56974: PUSH
56975: LD_INT 3
56977: PUSH
56978: EMPTY
56979: LIST
56980: LIST
56981: PUSH
56982: LD_INT 3
56984: PUSH
56985: LD_INT 2
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: PUSH
56992: LD_INT 4
56994: PUSH
56995: LD_INT 3
56997: PUSH
56998: EMPTY
56999: LIST
57000: LIST
57001: PUSH
57002: LD_INT 4
57004: PUSH
57005: LD_INT 4
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: PUSH
57012: LD_INT 3
57014: PUSH
57015: LD_INT 4
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PUSH
57022: LD_INT 2
57024: PUSH
57025: LD_INT 3
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: PUSH
57032: LD_INT 2
57034: PUSH
57035: LD_INT 2
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: PUSH
57042: LD_INT 4
57044: PUSH
57045: LD_INT 2
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: PUSH
57052: LD_INT 2
57054: PUSH
57055: LD_INT 4
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: PUSH
57062: LD_INT 0
57064: PUSH
57065: LD_INT 4
57067: PUSH
57068: EMPTY
57069: LIST
57070: LIST
57071: PUSH
57072: LD_INT 0
57074: PUSH
57075: LD_INT 3
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: LD_INT 1
57084: PUSH
57085: LD_INT 4
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PUSH
57092: LD_INT 1
57094: PUSH
57095: LD_INT 5
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: LD_INT 0
57104: PUSH
57105: LD_INT 5
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 1
57114: NEG
57115: PUSH
57116: LD_INT 4
57118: PUSH
57119: EMPTY
57120: LIST
57121: LIST
57122: PUSH
57123: LD_INT 1
57125: NEG
57126: PUSH
57127: LD_INT 3
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: PUSH
57134: LD_INT 2
57136: PUSH
57137: LD_INT 5
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: PUSH
57144: LD_INT 2
57146: NEG
57147: PUSH
57148: LD_INT 3
57150: PUSH
57151: EMPTY
57152: LIST
57153: LIST
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: LIST
57159: LIST
57160: LIST
57161: LIST
57162: LIST
57163: LIST
57164: LIST
57165: LIST
57166: LIST
57167: LIST
57168: LIST
57169: LIST
57170: LIST
57171: LIST
57172: LIST
57173: LIST
57174: LIST
57175: LIST
57176: LIST
57177: LIST
57178: LIST
57179: LIST
57180: LIST
57181: LIST
57182: LIST
57183: LIST
57184: LIST
57185: LIST
57186: LIST
57187: LIST
57188: LIST
57189: LIST
57190: LIST
57191: LIST
57192: LIST
57193: LIST
57194: LIST
57195: LIST
57196: LIST
57197: LIST
57198: LIST
57199: LIST
57200: LIST
57201: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
57202: LD_ADDR_VAR 0 34
57206: PUSH
57207: LD_INT 0
57209: PUSH
57210: LD_INT 4
57212: NEG
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: LD_INT 0
57220: PUSH
57221: LD_INT 5
57223: NEG
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: LD_INT 1
57231: PUSH
57232: LD_INT 4
57234: NEG
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: PUSH
57240: LD_INT 1
57242: PUSH
57243: LD_INT 3
57245: NEG
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: LD_INT 0
57253: PUSH
57254: LD_INT 3
57256: NEG
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: PUSH
57262: LD_INT 1
57264: NEG
57265: PUSH
57266: LD_INT 4
57268: NEG
57269: PUSH
57270: EMPTY
57271: LIST
57272: LIST
57273: PUSH
57274: LD_INT 1
57276: NEG
57277: PUSH
57278: LD_INT 5
57280: NEG
57281: PUSH
57282: EMPTY
57283: LIST
57284: LIST
57285: PUSH
57286: LD_INT 2
57288: PUSH
57289: LD_INT 3
57291: NEG
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: LD_INT 2
57299: NEG
57300: PUSH
57301: LD_INT 5
57303: NEG
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: PUSH
57309: LD_INT 3
57311: PUSH
57312: LD_INT 0
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: PUSH
57319: LD_INT 3
57321: PUSH
57322: LD_INT 1
57324: NEG
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 4
57332: PUSH
57333: LD_INT 0
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: LD_INT 4
57342: PUSH
57343: LD_INT 1
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: LD_INT 3
57352: PUSH
57353: LD_INT 1
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: PUSH
57360: LD_INT 2
57362: PUSH
57363: LD_INT 0
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: PUSH
57370: LD_INT 2
57372: PUSH
57373: LD_INT 1
57375: NEG
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: PUSH
57381: LD_INT 2
57383: PUSH
57384: LD_INT 2
57386: NEG
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: LD_INT 4
57394: PUSH
57395: LD_INT 2
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: LD_INT 4
57404: PUSH
57405: LD_INT 4
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: PUSH
57412: LD_INT 4
57414: PUSH
57415: LD_INT 3
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: PUSH
57422: LD_INT 5
57424: PUSH
57425: LD_INT 4
57427: PUSH
57428: EMPTY
57429: LIST
57430: LIST
57431: PUSH
57432: LD_INT 5
57434: PUSH
57435: LD_INT 5
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: PUSH
57442: LD_INT 4
57444: PUSH
57445: LD_INT 5
57447: PUSH
57448: EMPTY
57449: LIST
57450: LIST
57451: PUSH
57452: LD_INT 3
57454: PUSH
57455: LD_INT 4
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: PUSH
57462: LD_INT 3
57464: PUSH
57465: LD_INT 3
57467: PUSH
57468: EMPTY
57469: LIST
57470: LIST
57471: PUSH
57472: LD_INT 5
57474: PUSH
57475: LD_INT 3
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: PUSH
57482: LD_INT 3
57484: PUSH
57485: LD_INT 5
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: PUSH
57492: LD_INT 0
57494: PUSH
57495: LD_INT 3
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: PUSH
57502: LD_INT 0
57504: PUSH
57505: LD_INT 2
57507: PUSH
57508: EMPTY
57509: LIST
57510: LIST
57511: PUSH
57512: LD_INT 1
57514: PUSH
57515: LD_INT 3
57517: PUSH
57518: EMPTY
57519: LIST
57520: LIST
57521: PUSH
57522: LD_INT 1
57524: PUSH
57525: LD_INT 4
57527: PUSH
57528: EMPTY
57529: LIST
57530: LIST
57531: PUSH
57532: LD_INT 0
57534: PUSH
57535: LD_INT 4
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: PUSH
57542: LD_INT 1
57544: NEG
57545: PUSH
57546: LD_INT 3
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: LD_INT 1
57555: NEG
57556: PUSH
57557: LD_INT 2
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: LD_INT 2
57566: PUSH
57567: LD_INT 4
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: PUSH
57574: LD_INT 2
57576: NEG
57577: PUSH
57578: LD_INT 2
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: LD_INT 4
57587: NEG
57588: PUSH
57589: LD_INT 0
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 4
57598: NEG
57599: PUSH
57600: LD_INT 1
57602: NEG
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 3
57610: NEG
57611: PUSH
57612: LD_INT 0
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: LD_INT 3
57621: NEG
57622: PUSH
57623: LD_INT 1
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: PUSH
57630: LD_INT 4
57632: NEG
57633: PUSH
57634: LD_INT 1
57636: PUSH
57637: EMPTY
57638: LIST
57639: LIST
57640: PUSH
57641: LD_INT 5
57643: NEG
57644: PUSH
57645: LD_INT 0
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: PUSH
57652: LD_INT 5
57654: NEG
57655: PUSH
57656: LD_INT 1
57658: NEG
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: PUSH
57664: LD_INT 5
57666: NEG
57667: PUSH
57668: LD_INT 2
57670: NEG
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: PUSH
57676: LD_INT 3
57678: NEG
57679: PUSH
57680: LD_INT 2
57682: PUSH
57683: EMPTY
57684: LIST
57685: LIST
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: LIST
57691: LIST
57692: LIST
57693: LIST
57694: LIST
57695: LIST
57696: LIST
57697: LIST
57698: LIST
57699: LIST
57700: LIST
57701: LIST
57702: LIST
57703: LIST
57704: LIST
57705: LIST
57706: LIST
57707: LIST
57708: LIST
57709: LIST
57710: LIST
57711: LIST
57712: LIST
57713: LIST
57714: LIST
57715: LIST
57716: LIST
57717: LIST
57718: LIST
57719: LIST
57720: LIST
57721: LIST
57722: LIST
57723: LIST
57724: LIST
57725: LIST
57726: LIST
57727: LIST
57728: LIST
57729: LIST
57730: LIST
57731: LIST
57732: LIST
57733: ST_TO_ADDR
// end ; end ;
57734: GO 57737
57736: POP
// case btype of b_depot , b_warehouse :
57737: LD_VAR 0 1
57741: PUSH
57742: LD_INT 0
57744: DOUBLE
57745: EQUAL
57746: IFTRUE 57756
57748: LD_INT 1
57750: DOUBLE
57751: EQUAL
57752: IFTRUE 57756
57754: GO 57957
57756: POP
// case nation of nation_american :
57757: LD_VAR 0 5
57761: PUSH
57762: LD_INT 1
57764: DOUBLE
57765: EQUAL
57766: IFTRUE 57770
57768: GO 57826
57770: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
57771: LD_ADDR_VAR 0 9
57775: PUSH
57776: LD_VAR 0 11
57780: PUSH
57781: LD_VAR 0 12
57785: PUSH
57786: LD_VAR 0 13
57790: PUSH
57791: LD_VAR 0 14
57795: PUSH
57796: LD_VAR 0 15
57800: PUSH
57801: LD_VAR 0 16
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: LIST
57810: LIST
57811: LIST
57812: LIST
57813: PUSH
57814: LD_VAR 0 4
57818: PUSH
57819: LD_INT 1
57821: PLUS
57822: ARRAY
57823: ST_TO_ADDR
57824: GO 57955
57826: LD_INT 2
57828: DOUBLE
57829: EQUAL
57830: IFTRUE 57834
57832: GO 57890
57834: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
57835: LD_ADDR_VAR 0 9
57839: PUSH
57840: LD_VAR 0 17
57844: PUSH
57845: LD_VAR 0 18
57849: PUSH
57850: LD_VAR 0 19
57854: PUSH
57855: LD_VAR 0 20
57859: PUSH
57860: LD_VAR 0 21
57864: PUSH
57865: LD_VAR 0 22
57869: PUSH
57870: EMPTY
57871: LIST
57872: LIST
57873: LIST
57874: LIST
57875: LIST
57876: LIST
57877: PUSH
57878: LD_VAR 0 4
57882: PUSH
57883: LD_INT 1
57885: PLUS
57886: ARRAY
57887: ST_TO_ADDR
57888: GO 57955
57890: LD_INT 3
57892: DOUBLE
57893: EQUAL
57894: IFTRUE 57898
57896: GO 57954
57898: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
57899: LD_ADDR_VAR 0 9
57903: PUSH
57904: LD_VAR 0 23
57908: PUSH
57909: LD_VAR 0 24
57913: PUSH
57914: LD_VAR 0 25
57918: PUSH
57919: LD_VAR 0 26
57923: PUSH
57924: LD_VAR 0 27
57928: PUSH
57929: LD_VAR 0 28
57933: PUSH
57934: EMPTY
57935: LIST
57936: LIST
57937: LIST
57938: LIST
57939: LIST
57940: LIST
57941: PUSH
57942: LD_VAR 0 4
57946: PUSH
57947: LD_INT 1
57949: PLUS
57950: ARRAY
57951: ST_TO_ADDR
57952: GO 57955
57954: POP
57955: GO 58510
57957: LD_INT 2
57959: DOUBLE
57960: EQUAL
57961: IFTRUE 57971
57963: LD_INT 3
57965: DOUBLE
57966: EQUAL
57967: IFTRUE 57971
57969: GO 58027
57971: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
57972: LD_ADDR_VAR 0 9
57976: PUSH
57977: LD_VAR 0 29
57981: PUSH
57982: LD_VAR 0 30
57986: PUSH
57987: LD_VAR 0 31
57991: PUSH
57992: LD_VAR 0 32
57996: PUSH
57997: LD_VAR 0 33
58001: PUSH
58002: LD_VAR 0 34
58006: PUSH
58007: EMPTY
58008: LIST
58009: LIST
58010: LIST
58011: LIST
58012: LIST
58013: LIST
58014: PUSH
58015: LD_VAR 0 4
58019: PUSH
58020: LD_INT 1
58022: PLUS
58023: ARRAY
58024: ST_TO_ADDR
58025: GO 58510
58027: LD_INT 16
58029: DOUBLE
58030: EQUAL
58031: IFTRUE 58089
58033: LD_INT 17
58035: DOUBLE
58036: EQUAL
58037: IFTRUE 58089
58039: LD_INT 18
58041: DOUBLE
58042: EQUAL
58043: IFTRUE 58089
58045: LD_INT 19
58047: DOUBLE
58048: EQUAL
58049: IFTRUE 58089
58051: LD_INT 22
58053: DOUBLE
58054: EQUAL
58055: IFTRUE 58089
58057: LD_INT 20
58059: DOUBLE
58060: EQUAL
58061: IFTRUE 58089
58063: LD_INT 21
58065: DOUBLE
58066: EQUAL
58067: IFTRUE 58089
58069: LD_INT 23
58071: DOUBLE
58072: EQUAL
58073: IFTRUE 58089
58075: LD_INT 24
58077: DOUBLE
58078: EQUAL
58079: IFTRUE 58089
58081: LD_INT 25
58083: DOUBLE
58084: EQUAL
58085: IFTRUE 58089
58087: GO 58145
58089: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
58090: LD_ADDR_VAR 0 9
58094: PUSH
58095: LD_VAR 0 35
58099: PUSH
58100: LD_VAR 0 36
58104: PUSH
58105: LD_VAR 0 37
58109: PUSH
58110: LD_VAR 0 38
58114: PUSH
58115: LD_VAR 0 39
58119: PUSH
58120: LD_VAR 0 40
58124: PUSH
58125: EMPTY
58126: LIST
58127: LIST
58128: LIST
58129: LIST
58130: LIST
58131: LIST
58132: PUSH
58133: LD_VAR 0 4
58137: PUSH
58138: LD_INT 1
58140: PLUS
58141: ARRAY
58142: ST_TO_ADDR
58143: GO 58510
58145: LD_INT 6
58147: DOUBLE
58148: EQUAL
58149: IFTRUE 58201
58151: LD_INT 7
58153: DOUBLE
58154: EQUAL
58155: IFTRUE 58201
58157: LD_INT 8
58159: DOUBLE
58160: EQUAL
58161: IFTRUE 58201
58163: LD_INT 13
58165: DOUBLE
58166: EQUAL
58167: IFTRUE 58201
58169: LD_INT 12
58171: DOUBLE
58172: EQUAL
58173: IFTRUE 58201
58175: LD_INT 15
58177: DOUBLE
58178: EQUAL
58179: IFTRUE 58201
58181: LD_INT 11
58183: DOUBLE
58184: EQUAL
58185: IFTRUE 58201
58187: LD_INT 14
58189: DOUBLE
58190: EQUAL
58191: IFTRUE 58201
58193: LD_INT 10
58195: DOUBLE
58196: EQUAL
58197: IFTRUE 58201
58199: GO 58257
58201: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
58202: LD_ADDR_VAR 0 9
58206: PUSH
58207: LD_VAR 0 41
58211: PUSH
58212: LD_VAR 0 42
58216: PUSH
58217: LD_VAR 0 43
58221: PUSH
58222: LD_VAR 0 44
58226: PUSH
58227: LD_VAR 0 45
58231: PUSH
58232: LD_VAR 0 46
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: LIST
58241: LIST
58242: LIST
58243: LIST
58244: PUSH
58245: LD_VAR 0 4
58249: PUSH
58250: LD_INT 1
58252: PLUS
58253: ARRAY
58254: ST_TO_ADDR
58255: GO 58510
58257: LD_INT 36
58259: DOUBLE
58260: EQUAL
58261: IFTRUE 58265
58263: GO 58321
58265: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
58266: LD_ADDR_VAR 0 9
58270: PUSH
58271: LD_VAR 0 47
58275: PUSH
58276: LD_VAR 0 48
58280: PUSH
58281: LD_VAR 0 49
58285: PUSH
58286: LD_VAR 0 50
58290: PUSH
58291: LD_VAR 0 51
58295: PUSH
58296: LD_VAR 0 52
58300: PUSH
58301: EMPTY
58302: LIST
58303: LIST
58304: LIST
58305: LIST
58306: LIST
58307: LIST
58308: PUSH
58309: LD_VAR 0 4
58313: PUSH
58314: LD_INT 1
58316: PLUS
58317: ARRAY
58318: ST_TO_ADDR
58319: GO 58510
58321: LD_INT 4
58323: DOUBLE
58324: EQUAL
58325: IFTRUE 58347
58327: LD_INT 5
58329: DOUBLE
58330: EQUAL
58331: IFTRUE 58347
58333: LD_INT 34
58335: DOUBLE
58336: EQUAL
58337: IFTRUE 58347
58339: LD_INT 37
58341: DOUBLE
58342: EQUAL
58343: IFTRUE 58347
58345: GO 58403
58347: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
58348: LD_ADDR_VAR 0 9
58352: PUSH
58353: LD_VAR 0 53
58357: PUSH
58358: LD_VAR 0 54
58362: PUSH
58363: LD_VAR 0 55
58367: PUSH
58368: LD_VAR 0 56
58372: PUSH
58373: LD_VAR 0 57
58377: PUSH
58378: LD_VAR 0 58
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: LIST
58387: LIST
58388: LIST
58389: LIST
58390: PUSH
58391: LD_VAR 0 4
58395: PUSH
58396: LD_INT 1
58398: PLUS
58399: ARRAY
58400: ST_TO_ADDR
58401: GO 58510
58403: LD_INT 31
58405: DOUBLE
58406: EQUAL
58407: IFTRUE 58453
58409: LD_INT 32
58411: DOUBLE
58412: EQUAL
58413: IFTRUE 58453
58415: LD_INT 33
58417: DOUBLE
58418: EQUAL
58419: IFTRUE 58453
58421: LD_INT 27
58423: DOUBLE
58424: EQUAL
58425: IFTRUE 58453
58427: LD_INT 26
58429: DOUBLE
58430: EQUAL
58431: IFTRUE 58453
58433: LD_INT 28
58435: DOUBLE
58436: EQUAL
58437: IFTRUE 58453
58439: LD_INT 29
58441: DOUBLE
58442: EQUAL
58443: IFTRUE 58453
58445: LD_INT 30
58447: DOUBLE
58448: EQUAL
58449: IFTRUE 58453
58451: GO 58509
58453: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
58454: LD_ADDR_VAR 0 9
58458: PUSH
58459: LD_VAR 0 59
58463: PUSH
58464: LD_VAR 0 60
58468: PUSH
58469: LD_VAR 0 61
58473: PUSH
58474: LD_VAR 0 62
58478: PUSH
58479: LD_VAR 0 63
58483: PUSH
58484: LD_VAR 0 64
58488: PUSH
58489: EMPTY
58490: LIST
58491: LIST
58492: LIST
58493: LIST
58494: LIST
58495: LIST
58496: PUSH
58497: LD_VAR 0 4
58501: PUSH
58502: LD_INT 1
58504: PLUS
58505: ARRAY
58506: ST_TO_ADDR
58507: GO 58510
58509: POP
// temp_list2 = [ ] ;
58510: LD_ADDR_VAR 0 10
58514: PUSH
58515: EMPTY
58516: ST_TO_ADDR
// for i in temp_list do
58517: LD_ADDR_VAR 0 8
58521: PUSH
58522: LD_VAR 0 9
58526: PUSH
58527: FOR_IN
58528: IFFALSE 58580
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
58530: LD_ADDR_VAR 0 10
58534: PUSH
58535: LD_VAR 0 10
58539: PUSH
58540: LD_VAR 0 8
58544: PUSH
58545: LD_INT 1
58547: ARRAY
58548: PUSH
58549: LD_VAR 0 2
58553: PLUS
58554: PUSH
58555: LD_VAR 0 8
58559: PUSH
58560: LD_INT 2
58562: ARRAY
58563: PUSH
58564: LD_VAR 0 3
58568: PLUS
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: PUSH
58574: EMPTY
58575: LIST
58576: ADD
58577: ST_TO_ADDR
58578: GO 58527
58580: POP
58581: POP
// result = temp_list2 ;
58582: LD_ADDR_VAR 0 7
58586: PUSH
58587: LD_VAR 0 10
58591: ST_TO_ADDR
// end ;
58592: LD_VAR 0 7
58596: RET
// export function EnemyInRange ( unit , dist ) ; begin
58597: LD_INT 0
58599: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
58600: LD_ADDR_VAR 0 3
58604: PUSH
58605: LD_VAR 0 1
58609: PPUSH
58610: CALL_OW 255
58614: PPUSH
58615: LD_VAR 0 1
58619: PPUSH
58620: CALL_OW 250
58624: PPUSH
58625: LD_VAR 0 1
58629: PPUSH
58630: CALL_OW 251
58634: PPUSH
58635: LD_VAR 0 2
58639: PPUSH
58640: CALL 31999 0 4
58644: PUSH
58645: LD_INT 4
58647: ARRAY
58648: ST_TO_ADDR
// end ;
58649: LD_VAR 0 3
58653: RET
// export function PlayerSeeMe ( unit ) ; begin
58654: LD_INT 0
58656: PPUSH
// result := See ( your_side , unit ) ;
58657: LD_ADDR_VAR 0 2
58661: PUSH
58662: LD_OWVAR 2
58666: PPUSH
58667: LD_VAR 0 1
58671: PPUSH
58672: CALL_OW 292
58676: ST_TO_ADDR
// end ;
58677: LD_VAR 0 2
58681: RET
// export function ReverseDir ( unit ) ; begin
58682: LD_INT 0
58684: PPUSH
// if not unit then
58685: LD_VAR 0 1
58689: NOT
58690: IFFALSE 58694
// exit ;
58692: GO 58717
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
58694: LD_ADDR_VAR 0 2
58698: PUSH
58699: LD_VAR 0 1
58703: PPUSH
58704: CALL_OW 254
58708: PUSH
58709: LD_INT 3
58711: PLUS
58712: PUSH
58713: LD_INT 6
58715: MOD
58716: ST_TO_ADDR
// end ;
58717: LD_VAR 0 2
58721: RET
// export function ReverseArray ( array ) ; var i ; begin
58722: LD_INT 0
58724: PPUSH
58725: PPUSH
// if not array then
58726: LD_VAR 0 1
58730: NOT
58731: IFFALSE 58735
// exit ;
58733: GO 58790
// result := [ ] ;
58735: LD_ADDR_VAR 0 2
58739: PUSH
58740: EMPTY
58741: ST_TO_ADDR
// for i := array downto 1 do
58742: LD_ADDR_VAR 0 3
58746: PUSH
58747: DOUBLE
58748: LD_VAR 0 1
58752: INC
58753: ST_TO_ADDR
58754: LD_INT 1
58756: PUSH
58757: FOR_DOWNTO
58758: IFFALSE 58788
// result := Join ( result , array [ i ] ) ;
58760: LD_ADDR_VAR 0 2
58764: PUSH
58765: LD_VAR 0 2
58769: PPUSH
58770: LD_VAR 0 1
58774: PUSH
58775: LD_VAR 0 3
58779: ARRAY
58780: PPUSH
58781: CALL 63434 0 2
58785: ST_TO_ADDR
58786: GO 58757
58788: POP
58789: POP
// end ;
58790: LD_VAR 0 2
58794: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
58795: LD_INT 0
58797: PPUSH
58798: PPUSH
58799: PPUSH
58800: PPUSH
58801: PPUSH
58802: PPUSH
// if not unit or not hexes then
58803: LD_VAR 0 1
58807: NOT
58808: PUSH
58809: LD_VAR 0 2
58813: NOT
58814: OR
58815: IFFALSE 58819
// exit ;
58817: GO 58942
// dist := 9999 ;
58819: LD_ADDR_VAR 0 5
58823: PUSH
58824: LD_INT 9999
58826: ST_TO_ADDR
// for i = 1 to hexes do
58827: LD_ADDR_VAR 0 4
58831: PUSH
58832: DOUBLE
58833: LD_INT 1
58835: DEC
58836: ST_TO_ADDR
58837: LD_VAR 0 2
58841: PUSH
58842: FOR_TO
58843: IFFALSE 58930
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
58845: LD_ADDR_VAR 0 6
58849: PUSH
58850: LD_VAR 0 1
58854: PPUSH
58855: LD_VAR 0 2
58859: PUSH
58860: LD_VAR 0 4
58864: ARRAY
58865: PUSH
58866: LD_INT 1
58868: ARRAY
58869: PPUSH
58870: LD_VAR 0 2
58874: PUSH
58875: LD_VAR 0 4
58879: ARRAY
58880: PUSH
58881: LD_INT 2
58883: ARRAY
58884: PPUSH
58885: CALL_OW 297
58889: ST_TO_ADDR
// if tdist < dist then
58890: LD_VAR 0 6
58894: PUSH
58895: LD_VAR 0 5
58899: LESS
58900: IFFALSE 58928
// begin hex := hexes [ i ] ;
58902: LD_ADDR_VAR 0 8
58906: PUSH
58907: LD_VAR 0 2
58911: PUSH
58912: LD_VAR 0 4
58916: ARRAY
58917: ST_TO_ADDR
// dist := tdist ;
58918: LD_ADDR_VAR 0 5
58922: PUSH
58923: LD_VAR 0 6
58927: ST_TO_ADDR
// end ; end ;
58928: GO 58842
58930: POP
58931: POP
// result := hex ;
58932: LD_ADDR_VAR 0 3
58936: PUSH
58937: LD_VAR 0 8
58941: ST_TO_ADDR
// end ;
58942: LD_VAR 0 3
58946: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
58947: LD_INT 0
58949: PPUSH
58950: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
58951: LD_VAR 0 1
58955: NOT
58956: PUSH
58957: LD_VAR 0 1
58961: PUSH
58962: LD_INT 21
58964: PUSH
58965: LD_INT 2
58967: PUSH
58968: EMPTY
58969: LIST
58970: LIST
58971: PUSH
58972: LD_INT 23
58974: PUSH
58975: LD_INT 2
58977: PUSH
58978: EMPTY
58979: LIST
58980: LIST
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PPUSH
58986: CALL_OW 69
58990: IN
58991: NOT
58992: OR
58993: IFFALSE 58997
// exit ;
58995: GO 59044
// for i = 1 to 3 do
58997: LD_ADDR_VAR 0 3
59001: PUSH
59002: DOUBLE
59003: LD_INT 1
59005: DEC
59006: ST_TO_ADDR
59007: LD_INT 3
59009: PUSH
59010: FOR_TO
59011: IFFALSE 59042
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
59013: LD_VAR 0 1
59017: PPUSH
59018: CALL_OW 250
59022: PPUSH
59023: LD_VAR 0 1
59027: PPUSH
59028: CALL_OW 251
59032: PPUSH
59033: LD_INT 1
59035: PPUSH
59036: CALL_OW 453
59040: GO 59010
59042: POP
59043: POP
// end ;
59044: LD_VAR 0 2
59048: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
59049: LD_INT 0
59051: PPUSH
59052: PPUSH
59053: PPUSH
59054: PPUSH
59055: PPUSH
59056: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
59057: LD_VAR 0 1
59061: NOT
59062: PUSH
59063: LD_VAR 0 2
59067: NOT
59068: OR
59069: PUSH
59070: LD_VAR 0 1
59074: PPUSH
59075: CALL_OW 314
59079: OR
59080: IFFALSE 59084
// exit ;
59082: GO 59551
// if GetLives ( i ) < 250 then
59084: LD_VAR 0 4
59088: PPUSH
59089: CALL_OW 256
59093: PUSH
59094: LD_INT 250
59096: LESS
59097: IFFALSE 59110
// begin ComAutodestruct ( i ) ;
59099: LD_VAR 0 4
59103: PPUSH
59104: CALL 58947 0 1
// exit ;
59108: GO 59551
// end ; x := GetX ( enemy_unit ) ;
59110: LD_ADDR_VAR 0 7
59114: PUSH
59115: LD_VAR 0 2
59119: PPUSH
59120: CALL_OW 250
59124: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
59125: LD_ADDR_VAR 0 8
59129: PUSH
59130: LD_VAR 0 2
59134: PPUSH
59135: CALL_OW 251
59139: ST_TO_ADDR
// if not x or not y then
59140: LD_VAR 0 7
59144: NOT
59145: PUSH
59146: LD_VAR 0 8
59150: NOT
59151: OR
59152: IFFALSE 59156
// exit ;
59154: GO 59551
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
59156: LD_ADDR_VAR 0 6
59160: PUSH
59161: LD_VAR 0 7
59165: PPUSH
59166: LD_INT 0
59168: PPUSH
59169: LD_INT 4
59171: PPUSH
59172: CALL_OW 272
59176: PUSH
59177: LD_VAR 0 8
59181: PPUSH
59182: LD_INT 0
59184: PPUSH
59185: LD_INT 4
59187: PPUSH
59188: CALL_OW 273
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: PUSH
59197: LD_VAR 0 7
59201: PPUSH
59202: LD_INT 1
59204: PPUSH
59205: LD_INT 4
59207: PPUSH
59208: CALL_OW 272
59212: PUSH
59213: LD_VAR 0 8
59217: PPUSH
59218: LD_INT 1
59220: PPUSH
59221: LD_INT 4
59223: PPUSH
59224: CALL_OW 273
59228: PUSH
59229: EMPTY
59230: LIST
59231: LIST
59232: PUSH
59233: LD_VAR 0 7
59237: PPUSH
59238: LD_INT 2
59240: PPUSH
59241: LD_INT 4
59243: PPUSH
59244: CALL_OW 272
59248: PUSH
59249: LD_VAR 0 8
59253: PPUSH
59254: LD_INT 2
59256: PPUSH
59257: LD_INT 4
59259: PPUSH
59260: CALL_OW 273
59264: PUSH
59265: EMPTY
59266: LIST
59267: LIST
59268: PUSH
59269: LD_VAR 0 7
59273: PPUSH
59274: LD_INT 3
59276: PPUSH
59277: LD_INT 4
59279: PPUSH
59280: CALL_OW 272
59284: PUSH
59285: LD_VAR 0 8
59289: PPUSH
59290: LD_INT 3
59292: PPUSH
59293: LD_INT 4
59295: PPUSH
59296: CALL_OW 273
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: PUSH
59305: LD_VAR 0 7
59309: PPUSH
59310: LD_INT 4
59312: PPUSH
59313: LD_INT 4
59315: PPUSH
59316: CALL_OW 272
59320: PUSH
59321: LD_VAR 0 8
59325: PPUSH
59326: LD_INT 4
59328: PPUSH
59329: LD_INT 4
59331: PPUSH
59332: CALL_OW 273
59336: PUSH
59337: EMPTY
59338: LIST
59339: LIST
59340: PUSH
59341: LD_VAR 0 7
59345: PPUSH
59346: LD_INT 5
59348: PPUSH
59349: LD_INT 4
59351: PPUSH
59352: CALL_OW 272
59356: PUSH
59357: LD_VAR 0 8
59361: PPUSH
59362: LD_INT 5
59364: PPUSH
59365: LD_INT 4
59367: PPUSH
59368: CALL_OW 273
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: LIST
59381: LIST
59382: LIST
59383: LIST
59384: ST_TO_ADDR
// for i = tmp downto 1 do
59385: LD_ADDR_VAR 0 4
59389: PUSH
59390: DOUBLE
59391: LD_VAR 0 6
59395: INC
59396: ST_TO_ADDR
59397: LD_INT 1
59399: PUSH
59400: FOR_DOWNTO
59401: IFFALSE 59502
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
59403: LD_VAR 0 6
59407: PUSH
59408: LD_VAR 0 4
59412: ARRAY
59413: PUSH
59414: LD_INT 1
59416: ARRAY
59417: PPUSH
59418: LD_VAR 0 6
59422: PUSH
59423: LD_VAR 0 4
59427: ARRAY
59428: PUSH
59429: LD_INT 2
59431: ARRAY
59432: PPUSH
59433: CALL_OW 488
59437: NOT
59438: PUSH
59439: LD_VAR 0 6
59443: PUSH
59444: LD_VAR 0 4
59448: ARRAY
59449: PUSH
59450: LD_INT 1
59452: ARRAY
59453: PPUSH
59454: LD_VAR 0 6
59458: PUSH
59459: LD_VAR 0 4
59463: ARRAY
59464: PUSH
59465: LD_INT 2
59467: ARRAY
59468: PPUSH
59469: CALL_OW 428
59473: PUSH
59474: LD_INT 0
59476: NONEQUAL
59477: OR
59478: IFFALSE 59500
// tmp := Delete ( tmp , i ) ;
59480: LD_ADDR_VAR 0 6
59484: PUSH
59485: LD_VAR 0 6
59489: PPUSH
59490: LD_VAR 0 4
59494: PPUSH
59495: CALL_OW 3
59499: ST_TO_ADDR
59500: GO 59400
59502: POP
59503: POP
// j := GetClosestHex ( unit , tmp ) ;
59504: LD_ADDR_VAR 0 5
59508: PUSH
59509: LD_VAR 0 1
59513: PPUSH
59514: LD_VAR 0 6
59518: PPUSH
59519: CALL 58795 0 2
59523: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
59524: LD_VAR 0 1
59528: PPUSH
59529: LD_VAR 0 5
59533: PUSH
59534: LD_INT 1
59536: ARRAY
59537: PPUSH
59538: LD_VAR 0 5
59542: PUSH
59543: LD_INT 2
59545: ARRAY
59546: PPUSH
59547: CALL_OW 111
// end ;
59551: LD_VAR 0 3
59555: RET
// export function PrepareApemanSoldier ( ) ; begin
59556: LD_INT 0
59558: PPUSH
// uc_nation := 0 ;
59559: LD_ADDR_OWVAR 21
59563: PUSH
59564: LD_INT 0
59566: ST_TO_ADDR
// hc_sex := sex_male ;
59567: LD_ADDR_OWVAR 27
59571: PUSH
59572: LD_INT 1
59574: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
59575: LD_ADDR_OWVAR 28
59579: PUSH
59580: LD_INT 15
59582: ST_TO_ADDR
// hc_gallery :=  ;
59583: LD_ADDR_OWVAR 33
59587: PUSH
59588: LD_STRING 
59590: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59591: LD_ADDR_OWVAR 31
59595: PUSH
59596: LD_INT 0
59598: PPUSH
59599: LD_INT 3
59601: PPUSH
59602: CALL_OW 12
59606: PUSH
59607: LD_INT 0
59609: PPUSH
59610: LD_INT 3
59612: PPUSH
59613: CALL_OW 12
59617: PUSH
59618: LD_INT 0
59620: PUSH
59621: LD_INT 0
59623: PUSH
59624: EMPTY
59625: LIST
59626: LIST
59627: LIST
59628: LIST
59629: ST_TO_ADDR
// end ;
59630: LD_VAR 0 1
59634: RET
// export function PrepareApemanEngineer ( ) ; begin
59635: LD_INT 0
59637: PPUSH
// uc_nation := 0 ;
59638: LD_ADDR_OWVAR 21
59642: PUSH
59643: LD_INT 0
59645: ST_TO_ADDR
// hc_sex := sex_male ;
59646: LD_ADDR_OWVAR 27
59650: PUSH
59651: LD_INT 1
59653: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
59654: LD_ADDR_OWVAR 28
59658: PUSH
59659: LD_INT 16
59661: ST_TO_ADDR
// hc_gallery :=  ;
59662: LD_ADDR_OWVAR 33
59666: PUSH
59667: LD_STRING 
59669: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59670: LD_ADDR_OWVAR 31
59674: PUSH
59675: LD_INT 0
59677: PPUSH
59678: LD_INT 3
59680: PPUSH
59681: CALL_OW 12
59685: PUSH
59686: LD_INT 0
59688: PPUSH
59689: LD_INT 3
59691: PPUSH
59692: CALL_OW 12
59696: PUSH
59697: LD_INT 0
59699: PUSH
59700: LD_INT 0
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: LIST
59707: LIST
59708: ST_TO_ADDR
// end ;
59709: LD_VAR 0 1
59713: RET
// export function PrepareApeman ( agressivity ) ; begin
59714: LD_INT 0
59716: PPUSH
// uc_side := 0 ;
59717: LD_ADDR_OWVAR 20
59721: PUSH
59722: LD_INT 0
59724: ST_TO_ADDR
// uc_nation := 0 ;
59725: LD_ADDR_OWVAR 21
59729: PUSH
59730: LD_INT 0
59732: ST_TO_ADDR
// hc_sex := sex_male ;
59733: LD_ADDR_OWVAR 27
59737: PUSH
59738: LD_INT 1
59740: ST_TO_ADDR
// hc_class := class_apeman ;
59741: LD_ADDR_OWVAR 28
59745: PUSH
59746: LD_INT 12
59748: ST_TO_ADDR
// hc_gallery :=  ;
59749: LD_ADDR_OWVAR 33
59753: PUSH
59754: LD_STRING 
59756: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
59757: LD_ADDR_OWVAR 35
59761: PUSH
59762: LD_VAR 0 1
59766: NEG
59767: PPUSH
59768: LD_VAR 0 1
59772: PPUSH
59773: CALL_OW 12
59777: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59778: LD_ADDR_OWVAR 31
59782: PUSH
59783: LD_INT 0
59785: PPUSH
59786: LD_INT 3
59788: PPUSH
59789: CALL_OW 12
59793: PUSH
59794: LD_INT 0
59796: PPUSH
59797: LD_INT 3
59799: PPUSH
59800: CALL_OW 12
59804: PUSH
59805: LD_INT 0
59807: PUSH
59808: LD_INT 0
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: LIST
59815: LIST
59816: ST_TO_ADDR
// end ;
59817: LD_VAR 0 2
59821: RET
// export function PrepareTiger ( agressivity ) ; begin
59822: LD_INT 0
59824: PPUSH
// uc_side := 0 ;
59825: LD_ADDR_OWVAR 20
59829: PUSH
59830: LD_INT 0
59832: ST_TO_ADDR
// uc_nation := 0 ;
59833: LD_ADDR_OWVAR 21
59837: PUSH
59838: LD_INT 0
59840: ST_TO_ADDR
// hc_class := class_tiger ;
59841: LD_ADDR_OWVAR 28
59845: PUSH
59846: LD_INT 14
59848: ST_TO_ADDR
// hc_gallery :=  ;
59849: LD_ADDR_OWVAR 33
59853: PUSH
59854: LD_STRING 
59856: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
59857: LD_ADDR_OWVAR 35
59861: PUSH
59862: LD_VAR 0 1
59866: NEG
59867: PPUSH
59868: LD_VAR 0 1
59872: PPUSH
59873: CALL_OW 12
59877: ST_TO_ADDR
// end ;
59878: LD_VAR 0 2
59882: RET
// export function PrepareEnchidna ( ) ; begin
59883: LD_INT 0
59885: PPUSH
// uc_side := 0 ;
59886: LD_ADDR_OWVAR 20
59890: PUSH
59891: LD_INT 0
59893: ST_TO_ADDR
// uc_nation := 0 ;
59894: LD_ADDR_OWVAR 21
59898: PUSH
59899: LD_INT 0
59901: ST_TO_ADDR
// hc_class := class_baggie ;
59902: LD_ADDR_OWVAR 28
59906: PUSH
59907: LD_INT 13
59909: ST_TO_ADDR
// hc_gallery :=  ;
59910: LD_ADDR_OWVAR 33
59914: PUSH
59915: LD_STRING 
59917: ST_TO_ADDR
// end ;
59918: LD_VAR 0 1
59922: RET
// export function PrepareFrog ( ) ; begin
59923: LD_INT 0
59925: PPUSH
// uc_side := 0 ;
59926: LD_ADDR_OWVAR 20
59930: PUSH
59931: LD_INT 0
59933: ST_TO_ADDR
// uc_nation := 0 ;
59934: LD_ADDR_OWVAR 21
59938: PUSH
59939: LD_INT 0
59941: ST_TO_ADDR
// hc_class := class_frog ;
59942: LD_ADDR_OWVAR 28
59946: PUSH
59947: LD_INT 19
59949: ST_TO_ADDR
// hc_gallery :=  ;
59950: LD_ADDR_OWVAR 33
59954: PUSH
59955: LD_STRING 
59957: ST_TO_ADDR
// end ;
59958: LD_VAR 0 1
59962: RET
// export function PrepareFish ( ) ; begin
59963: LD_INT 0
59965: PPUSH
// uc_side := 0 ;
59966: LD_ADDR_OWVAR 20
59970: PUSH
59971: LD_INT 0
59973: ST_TO_ADDR
// uc_nation := 0 ;
59974: LD_ADDR_OWVAR 21
59978: PUSH
59979: LD_INT 0
59981: ST_TO_ADDR
// hc_class := class_fish ;
59982: LD_ADDR_OWVAR 28
59986: PUSH
59987: LD_INT 20
59989: ST_TO_ADDR
// hc_gallery :=  ;
59990: LD_ADDR_OWVAR 33
59994: PUSH
59995: LD_STRING 
59997: ST_TO_ADDR
// end ;
59998: LD_VAR 0 1
60002: RET
// export function PrepareBird ( ) ; begin
60003: LD_INT 0
60005: PPUSH
// uc_side := 0 ;
60006: LD_ADDR_OWVAR 20
60010: PUSH
60011: LD_INT 0
60013: ST_TO_ADDR
// uc_nation := 0 ;
60014: LD_ADDR_OWVAR 21
60018: PUSH
60019: LD_INT 0
60021: ST_TO_ADDR
// hc_class := class_phororhacos ;
60022: LD_ADDR_OWVAR 28
60026: PUSH
60027: LD_INT 18
60029: ST_TO_ADDR
// hc_gallery :=  ;
60030: LD_ADDR_OWVAR 33
60034: PUSH
60035: LD_STRING 
60037: ST_TO_ADDR
// end ;
60038: LD_VAR 0 1
60042: RET
// export function PrepareHorse ( ) ; begin
60043: LD_INT 0
60045: PPUSH
// uc_side := 0 ;
60046: LD_ADDR_OWVAR 20
60050: PUSH
60051: LD_INT 0
60053: ST_TO_ADDR
// uc_nation := 0 ;
60054: LD_ADDR_OWVAR 21
60058: PUSH
60059: LD_INT 0
60061: ST_TO_ADDR
// hc_class := class_horse ;
60062: LD_ADDR_OWVAR 28
60066: PUSH
60067: LD_INT 21
60069: ST_TO_ADDR
// hc_gallery :=  ;
60070: LD_ADDR_OWVAR 33
60074: PUSH
60075: LD_STRING 
60077: ST_TO_ADDR
// end ;
60078: LD_VAR 0 1
60082: RET
// export function PrepareMastodont ( ) ; begin
60083: LD_INT 0
60085: PPUSH
// uc_side := 0 ;
60086: LD_ADDR_OWVAR 20
60090: PUSH
60091: LD_INT 0
60093: ST_TO_ADDR
// uc_nation := 0 ;
60094: LD_ADDR_OWVAR 21
60098: PUSH
60099: LD_INT 0
60101: ST_TO_ADDR
// vc_chassis := class_mastodont ;
60102: LD_ADDR_OWVAR 37
60106: PUSH
60107: LD_INT 31
60109: ST_TO_ADDR
// vc_control := control_rider ;
60110: LD_ADDR_OWVAR 38
60114: PUSH
60115: LD_INT 4
60117: ST_TO_ADDR
// end ;
60118: LD_VAR 0 1
60122: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
60123: LD_INT 0
60125: PPUSH
60126: PPUSH
60127: PPUSH
// uc_side = 0 ;
60128: LD_ADDR_OWVAR 20
60132: PUSH
60133: LD_INT 0
60135: ST_TO_ADDR
// uc_nation = 0 ;
60136: LD_ADDR_OWVAR 21
60140: PUSH
60141: LD_INT 0
60143: ST_TO_ADDR
// InitHc_All ( ) ;
60144: CALL_OW 584
// InitVc ;
60148: CALL_OW 20
// if mastodonts then
60152: LD_VAR 0 6
60156: IFFALSE 60223
// for i = 1 to mastodonts do
60158: LD_ADDR_VAR 0 11
60162: PUSH
60163: DOUBLE
60164: LD_INT 1
60166: DEC
60167: ST_TO_ADDR
60168: LD_VAR 0 6
60172: PUSH
60173: FOR_TO
60174: IFFALSE 60221
// begin vc_chassis := 31 ;
60176: LD_ADDR_OWVAR 37
60180: PUSH
60181: LD_INT 31
60183: ST_TO_ADDR
// vc_control := control_rider ;
60184: LD_ADDR_OWVAR 38
60188: PUSH
60189: LD_INT 4
60191: ST_TO_ADDR
// animal := CreateVehicle ;
60192: LD_ADDR_VAR 0 12
60196: PUSH
60197: CALL_OW 45
60201: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60202: LD_VAR 0 12
60206: PPUSH
60207: LD_VAR 0 8
60211: PPUSH
60212: LD_INT 0
60214: PPUSH
60215: CALL 62351 0 3
// end ;
60219: GO 60173
60221: POP
60222: POP
// if horses then
60223: LD_VAR 0 5
60227: IFFALSE 60294
// for i = 1 to horses do
60229: LD_ADDR_VAR 0 11
60233: PUSH
60234: DOUBLE
60235: LD_INT 1
60237: DEC
60238: ST_TO_ADDR
60239: LD_VAR 0 5
60243: PUSH
60244: FOR_TO
60245: IFFALSE 60292
// begin hc_class := 21 ;
60247: LD_ADDR_OWVAR 28
60251: PUSH
60252: LD_INT 21
60254: ST_TO_ADDR
// hc_gallery :=  ;
60255: LD_ADDR_OWVAR 33
60259: PUSH
60260: LD_STRING 
60262: ST_TO_ADDR
// animal := CreateHuman ;
60263: LD_ADDR_VAR 0 12
60267: PUSH
60268: CALL_OW 44
60272: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60273: LD_VAR 0 12
60277: PPUSH
60278: LD_VAR 0 8
60282: PPUSH
60283: LD_INT 0
60285: PPUSH
60286: CALL 62351 0 3
// end ;
60290: GO 60244
60292: POP
60293: POP
// if birds then
60294: LD_VAR 0 1
60298: IFFALSE 60365
// for i = 1 to birds do
60300: LD_ADDR_VAR 0 11
60304: PUSH
60305: DOUBLE
60306: LD_INT 1
60308: DEC
60309: ST_TO_ADDR
60310: LD_VAR 0 1
60314: PUSH
60315: FOR_TO
60316: IFFALSE 60363
// begin hc_class = 18 ;
60318: LD_ADDR_OWVAR 28
60322: PUSH
60323: LD_INT 18
60325: ST_TO_ADDR
// hc_gallery =  ;
60326: LD_ADDR_OWVAR 33
60330: PUSH
60331: LD_STRING 
60333: ST_TO_ADDR
// animal := CreateHuman ;
60334: LD_ADDR_VAR 0 12
60338: PUSH
60339: CALL_OW 44
60343: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60344: LD_VAR 0 12
60348: PPUSH
60349: LD_VAR 0 8
60353: PPUSH
60354: LD_INT 0
60356: PPUSH
60357: CALL 62351 0 3
// end ;
60361: GO 60315
60363: POP
60364: POP
// if tigers then
60365: LD_VAR 0 2
60369: IFFALSE 60453
// for i = 1 to tigers do
60371: LD_ADDR_VAR 0 11
60375: PUSH
60376: DOUBLE
60377: LD_INT 1
60379: DEC
60380: ST_TO_ADDR
60381: LD_VAR 0 2
60385: PUSH
60386: FOR_TO
60387: IFFALSE 60451
// begin hc_class = class_tiger ;
60389: LD_ADDR_OWVAR 28
60393: PUSH
60394: LD_INT 14
60396: ST_TO_ADDR
// hc_gallery =  ;
60397: LD_ADDR_OWVAR 33
60401: PUSH
60402: LD_STRING 
60404: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
60405: LD_ADDR_OWVAR 35
60409: PUSH
60410: LD_INT 7
60412: NEG
60413: PPUSH
60414: LD_INT 7
60416: PPUSH
60417: CALL_OW 12
60421: ST_TO_ADDR
// animal := CreateHuman ;
60422: LD_ADDR_VAR 0 12
60426: PUSH
60427: CALL_OW 44
60431: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60432: LD_VAR 0 12
60436: PPUSH
60437: LD_VAR 0 8
60441: PPUSH
60442: LD_INT 0
60444: PPUSH
60445: CALL 62351 0 3
// end ;
60449: GO 60386
60451: POP
60452: POP
// if apemans then
60453: LD_VAR 0 3
60457: IFFALSE 60580
// for i = 1 to apemans do
60459: LD_ADDR_VAR 0 11
60463: PUSH
60464: DOUBLE
60465: LD_INT 1
60467: DEC
60468: ST_TO_ADDR
60469: LD_VAR 0 3
60473: PUSH
60474: FOR_TO
60475: IFFALSE 60578
// begin hc_class = class_apeman ;
60477: LD_ADDR_OWVAR 28
60481: PUSH
60482: LD_INT 12
60484: ST_TO_ADDR
// hc_gallery =  ;
60485: LD_ADDR_OWVAR 33
60489: PUSH
60490: LD_STRING 
60492: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
60493: LD_ADDR_OWVAR 35
60497: PUSH
60498: LD_INT 2
60500: NEG
60501: PPUSH
60502: LD_INT 2
60504: PPUSH
60505: CALL_OW 12
60509: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
60510: LD_ADDR_OWVAR 31
60514: PUSH
60515: LD_INT 1
60517: PPUSH
60518: LD_INT 3
60520: PPUSH
60521: CALL_OW 12
60525: PUSH
60526: LD_INT 1
60528: PPUSH
60529: LD_INT 3
60531: PPUSH
60532: CALL_OW 12
60536: PUSH
60537: LD_INT 0
60539: PUSH
60540: LD_INT 0
60542: PUSH
60543: EMPTY
60544: LIST
60545: LIST
60546: LIST
60547: LIST
60548: ST_TO_ADDR
// animal := CreateHuman ;
60549: LD_ADDR_VAR 0 12
60553: PUSH
60554: CALL_OW 44
60558: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60559: LD_VAR 0 12
60563: PPUSH
60564: LD_VAR 0 8
60568: PPUSH
60569: LD_INT 0
60571: PPUSH
60572: CALL 62351 0 3
// end ;
60576: GO 60474
60578: POP
60579: POP
// if enchidnas then
60580: LD_VAR 0 4
60584: IFFALSE 60651
// for i = 1 to enchidnas do
60586: LD_ADDR_VAR 0 11
60590: PUSH
60591: DOUBLE
60592: LD_INT 1
60594: DEC
60595: ST_TO_ADDR
60596: LD_VAR 0 4
60600: PUSH
60601: FOR_TO
60602: IFFALSE 60649
// begin hc_class = 13 ;
60604: LD_ADDR_OWVAR 28
60608: PUSH
60609: LD_INT 13
60611: ST_TO_ADDR
// hc_gallery =  ;
60612: LD_ADDR_OWVAR 33
60616: PUSH
60617: LD_STRING 
60619: ST_TO_ADDR
// animal := CreateHuman ;
60620: LD_ADDR_VAR 0 12
60624: PUSH
60625: CALL_OW 44
60629: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60630: LD_VAR 0 12
60634: PPUSH
60635: LD_VAR 0 8
60639: PPUSH
60640: LD_INT 0
60642: PPUSH
60643: CALL 62351 0 3
// end ;
60647: GO 60601
60649: POP
60650: POP
// if fishes then
60651: LD_VAR 0 7
60655: IFFALSE 60722
// for i = 1 to fishes do
60657: LD_ADDR_VAR 0 11
60661: PUSH
60662: DOUBLE
60663: LD_INT 1
60665: DEC
60666: ST_TO_ADDR
60667: LD_VAR 0 7
60671: PUSH
60672: FOR_TO
60673: IFFALSE 60720
// begin hc_class = 20 ;
60675: LD_ADDR_OWVAR 28
60679: PUSH
60680: LD_INT 20
60682: ST_TO_ADDR
// hc_gallery =  ;
60683: LD_ADDR_OWVAR 33
60687: PUSH
60688: LD_STRING 
60690: ST_TO_ADDR
// animal := CreateHuman ;
60691: LD_ADDR_VAR 0 12
60695: PUSH
60696: CALL_OW 44
60700: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
60701: LD_VAR 0 12
60705: PPUSH
60706: LD_VAR 0 9
60710: PPUSH
60711: LD_INT 0
60713: PPUSH
60714: CALL 62351 0 3
// end ;
60718: GO 60672
60720: POP
60721: POP
// end ;
60722: LD_VAR 0 10
60726: RET
// export function WantHeal ( sci , unit ) ; begin
60727: LD_INT 0
60729: PPUSH
// if GetTaskList ( sci ) > 0 then
60730: LD_VAR 0 1
60734: PPUSH
60735: CALL_OW 437
60739: PUSH
60740: LD_INT 0
60742: GREATER
60743: IFFALSE 60813
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
60745: LD_VAR 0 1
60749: PPUSH
60750: CALL_OW 437
60754: PUSH
60755: LD_INT 1
60757: ARRAY
60758: PUSH
60759: LD_INT 1
60761: ARRAY
60762: PUSH
60763: LD_STRING l
60765: EQUAL
60766: PUSH
60767: LD_VAR 0 1
60771: PPUSH
60772: CALL_OW 437
60776: PUSH
60777: LD_INT 1
60779: ARRAY
60780: PUSH
60781: LD_INT 4
60783: ARRAY
60784: PUSH
60785: LD_VAR 0 2
60789: EQUAL
60790: AND
60791: IFFALSE 60803
// result := true else
60793: LD_ADDR_VAR 0 3
60797: PUSH
60798: LD_INT 1
60800: ST_TO_ADDR
60801: GO 60811
// result := false ;
60803: LD_ADDR_VAR 0 3
60807: PUSH
60808: LD_INT 0
60810: ST_TO_ADDR
// end else
60811: GO 60821
// result := false ;
60813: LD_ADDR_VAR 0 3
60817: PUSH
60818: LD_INT 0
60820: ST_TO_ADDR
// end ;
60821: LD_VAR 0 3
60825: RET
// export function HealTarget ( sci ) ; begin
60826: LD_INT 0
60828: PPUSH
// if not sci then
60829: LD_VAR 0 1
60833: NOT
60834: IFFALSE 60838
// exit ;
60836: GO 60903
// result := 0 ;
60838: LD_ADDR_VAR 0 2
60842: PUSH
60843: LD_INT 0
60845: ST_TO_ADDR
// if GetTaskList ( sci ) then
60846: LD_VAR 0 1
60850: PPUSH
60851: CALL_OW 437
60855: IFFALSE 60903
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
60857: LD_VAR 0 1
60861: PPUSH
60862: CALL_OW 437
60866: PUSH
60867: LD_INT 1
60869: ARRAY
60870: PUSH
60871: LD_INT 1
60873: ARRAY
60874: PUSH
60875: LD_STRING l
60877: EQUAL
60878: IFFALSE 60903
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
60880: LD_ADDR_VAR 0 2
60884: PUSH
60885: LD_VAR 0 1
60889: PPUSH
60890: CALL_OW 437
60894: PUSH
60895: LD_INT 1
60897: ARRAY
60898: PUSH
60899: LD_INT 4
60901: ARRAY
60902: ST_TO_ADDR
// end ;
60903: LD_VAR 0 2
60907: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
60908: LD_INT 0
60910: PPUSH
60911: PPUSH
60912: PPUSH
60913: PPUSH
// if not base_units then
60914: LD_VAR 0 1
60918: NOT
60919: IFFALSE 60923
// exit ;
60921: GO 61010
// result := false ;
60923: LD_ADDR_VAR 0 2
60927: PUSH
60928: LD_INT 0
60930: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
60931: LD_ADDR_VAR 0 5
60935: PUSH
60936: LD_VAR 0 1
60940: PPUSH
60941: LD_INT 21
60943: PUSH
60944: LD_INT 3
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: PPUSH
60951: CALL_OW 72
60955: ST_TO_ADDR
// if not tmp then
60956: LD_VAR 0 5
60960: NOT
60961: IFFALSE 60965
// exit ;
60963: GO 61010
// for i in tmp do
60965: LD_ADDR_VAR 0 3
60969: PUSH
60970: LD_VAR 0 5
60974: PUSH
60975: FOR_IN
60976: IFFALSE 61008
// begin result := EnemyInRange ( i , 22 ) ;
60978: LD_ADDR_VAR 0 2
60982: PUSH
60983: LD_VAR 0 3
60987: PPUSH
60988: LD_INT 22
60990: PPUSH
60991: CALL 58597 0 2
60995: ST_TO_ADDR
// if result then
60996: LD_VAR 0 2
61000: IFFALSE 61006
// exit ;
61002: POP
61003: POP
61004: GO 61010
// end ;
61006: GO 60975
61008: POP
61009: POP
// end ;
61010: LD_VAR 0 2
61014: RET
// export function FilterByTag ( units , tag ) ; begin
61015: LD_INT 0
61017: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
61018: LD_ADDR_VAR 0 3
61022: PUSH
61023: LD_VAR 0 1
61027: PPUSH
61028: LD_INT 120
61030: PUSH
61031: LD_VAR 0 2
61035: PUSH
61036: EMPTY
61037: LIST
61038: LIST
61039: PPUSH
61040: CALL_OW 72
61044: ST_TO_ADDR
// end ;
61045: LD_VAR 0 3
61049: RET
// export function IsDriver ( un ) ; begin
61050: LD_INT 0
61052: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
61053: LD_ADDR_VAR 0 2
61057: PUSH
61058: LD_VAR 0 1
61062: PUSH
61063: LD_INT 55
61065: PUSH
61066: EMPTY
61067: LIST
61068: PPUSH
61069: CALL_OW 69
61073: IN
61074: ST_TO_ADDR
// end ;
61075: LD_VAR 0 2
61079: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
61080: LD_INT 0
61082: PPUSH
61083: PPUSH
// list := [ ] ;
61084: LD_ADDR_VAR 0 5
61088: PUSH
61089: EMPTY
61090: ST_TO_ADDR
// case d of 0 :
61091: LD_VAR 0 3
61095: PUSH
61096: LD_INT 0
61098: DOUBLE
61099: EQUAL
61100: IFTRUE 61104
61102: GO 61237
61104: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
61105: LD_ADDR_VAR 0 5
61109: PUSH
61110: LD_VAR 0 1
61114: PUSH
61115: LD_INT 4
61117: MINUS
61118: PUSH
61119: LD_VAR 0 2
61123: PUSH
61124: LD_INT 4
61126: MINUS
61127: PUSH
61128: LD_INT 2
61130: PUSH
61131: EMPTY
61132: LIST
61133: LIST
61134: LIST
61135: PUSH
61136: LD_VAR 0 1
61140: PUSH
61141: LD_INT 3
61143: MINUS
61144: PUSH
61145: LD_VAR 0 2
61149: PUSH
61150: LD_INT 1
61152: PUSH
61153: EMPTY
61154: LIST
61155: LIST
61156: LIST
61157: PUSH
61158: LD_VAR 0 1
61162: PUSH
61163: LD_INT 4
61165: PLUS
61166: PUSH
61167: LD_VAR 0 2
61171: PUSH
61172: LD_INT 4
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: LIST
61179: PUSH
61180: LD_VAR 0 1
61184: PUSH
61185: LD_INT 3
61187: PLUS
61188: PUSH
61189: LD_VAR 0 2
61193: PUSH
61194: LD_INT 3
61196: PLUS
61197: PUSH
61198: LD_INT 5
61200: PUSH
61201: EMPTY
61202: LIST
61203: LIST
61204: LIST
61205: PUSH
61206: LD_VAR 0 1
61210: PUSH
61211: LD_VAR 0 2
61215: PUSH
61216: LD_INT 4
61218: PLUS
61219: PUSH
61220: LD_INT 0
61222: PUSH
61223: EMPTY
61224: LIST
61225: LIST
61226: LIST
61227: PUSH
61228: EMPTY
61229: LIST
61230: LIST
61231: LIST
61232: LIST
61233: LIST
61234: ST_TO_ADDR
// end ; 1 :
61235: GO 61935
61237: LD_INT 1
61239: DOUBLE
61240: EQUAL
61241: IFTRUE 61245
61243: GO 61378
61245: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
61246: LD_ADDR_VAR 0 5
61250: PUSH
61251: LD_VAR 0 1
61255: PUSH
61256: LD_VAR 0 2
61260: PUSH
61261: LD_INT 4
61263: MINUS
61264: PUSH
61265: LD_INT 3
61267: PUSH
61268: EMPTY
61269: LIST
61270: LIST
61271: LIST
61272: PUSH
61273: LD_VAR 0 1
61277: PUSH
61278: LD_INT 3
61280: MINUS
61281: PUSH
61282: LD_VAR 0 2
61286: PUSH
61287: LD_INT 3
61289: MINUS
61290: PUSH
61291: LD_INT 2
61293: PUSH
61294: EMPTY
61295: LIST
61296: LIST
61297: LIST
61298: PUSH
61299: LD_VAR 0 1
61303: PUSH
61304: LD_INT 4
61306: MINUS
61307: PUSH
61308: LD_VAR 0 2
61312: PUSH
61313: LD_INT 1
61315: PUSH
61316: EMPTY
61317: LIST
61318: LIST
61319: LIST
61320: PUSH
61321: LD_VAR 0 1
61325: PUSH
61326: LD_VAR 0 2
61330: PUSH
61331: LD_INT 3
61333: PLUS
61334: PUSH
61335: LD_INT 0
61337: PUSH
61338: EMPTY
61339: LIST
61340: LIST
61341: LIST
61342: PUSH
61343: LD_VAR 0 1
61347: PUSH
61348: LD_INT 4
61350: PLUS
61351: PUSH
61352: LD_VAR 0 2
61356: PUSH
61357: LD_INT 4
61359: PLUS
61360: PUSH
61361: LD_INT 5
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: LIST
61368: PUSH
61369: EMPTY
61370: LIST
61371: LIST
61372: LIST
61373: LIST
61374: LIST
61375: ST_TO_ADDR
// end ; 2 :
61376: GO 61935
61378: LD_INT 2
61380: DOUBLE
61381: EQUAL
61382: IFTRUE 61386
61384: GO 61515
61386: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
61387: LD_ADDR_VAR 0 5
61391: PUSH
61392: LD_VAR 0 1
61396: PUSH
61397: LD_VAR 0 2
61401: PUSH
61402: LD_INT 3
61404: MINUS
61405: PUSH
61406: LD_INT 3
61408: PUSH
61409: EMPTY
61410: LIST
61411: LIST
61412: LIST
61413: PUSH
61414: LD_VAR 0 1
61418: PUSH
61419: LD_INT 4
61421: PLUS
61422: PUSH
61423: LD_VAR 0 2
61427: PUSH
61428: LD_INT 4
61430: PUSH
61431: EMPTY
61432: LIST
61433: LIST
61434: LIST
61435: PUSH
61436: LD_VAR 0 1
61440: PUSH
61441: LD_VAR 0 2
61445: PUSH
61446: LD_INT 4
61448: PLUS
61449: PUSH
61450: LD_INT 0
61452: PUSH
61453: EMPTY
61454: LIST
61455: LIST
61456: LIST
61457: PUSH
61458: LD_VAR 0 1
61462: PUSH
61463: LD_INT 3
61465: MINUS
61466: PUSH
61467: LD_VAR 0 2
61471: PUSH
61472: LD_INT 1
61474: PUSH
61475: EMPTY
61476: LIST
61477: LIST
61478: LIST
61479: PUSH
61480: LD_VAR 0 1
61484: PUSH
61485: LD_INT 4
61487: MINUS
61488: PUSH
61489: LD_VAR 0 2
61493: PUSH
61494: LD_INT 4
61496: MINUS
61497: PUSH
61498: LD_INT 2
61500: PUSH
61501: EMPTY
61502: LIST
61503: LIST
61504: LIST
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: LIST
61510: LIST
61511: LIST
61512: ST_TO_ADDR
// end ; 3 :
61513: GO 61935
61515: LD_INT 3
61517: DOUBLE
61518: EQUAL
61519: IFTRUE 61523
61521: GO 61656
61523: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
61524: LD_ADDR_VAR 0 5
61528: PUSH
61529: LD_VAR 0 1
61533: PUSH
61534: LD_INT 3
61536: PLUS
61537: PUSH
61538: LD_VAR 0 2
61542: PUSH
61543: LD_INT 4
61545: PUSH
61546: EMPTY
61547: LIST
61548: LIST
61549: LIST
61550: PUSH
61551: LD_VAR 0 1
61555: PUSH
61556: LD_INT 4
61558: PLUS
61559: PUSH
61560: LD_VAR 0 2
61564: PUSH
61565: LD_INT 4
61567: PLUS
61568: PUSH
61569: LD_INT 5
61571: PUSH
61572: EMPTY
61573: LIST
61574: LIST
61575: LIST
61576: PUSH
61577: LD_VAR 0 1
61581: PUSH
61582: LD_INT 4
61584: MINUS
61585: PUSH
61586: LD_VAR 0 2
61590: PUSH
61591: LD_INT 1
61593: PUSH
61594: EMPTY
61595: LIST
61596: LIST
61597: LIST
61598: PUSH
61599: LD_VAR 0 1
61603: PUSH
61604: LD_VAR 0 2
61608: PUSH
61609: LD_INT 4
61611: MINUS
61612: PUSH
61613: LD_INT 3
61615: PUSH
61616: EMPTY
61617: LIST
61618: LIST
61619: LIST
61620: PUSH
61621: LD_VAR 0 1
61625: PUSH
61626: LD_INT 3
61628: MINUS
61629: PUSH
61630: LD_VAR 0 2
61634: PUSH
61635: LD_INT 3
61637: MINUS
61638: PUSH
61639: LD_INT 2
61641: PUSH
61642: EMPTY
61643: LIST
61644: LIST
61645: LIST
61646: PUSH
61647: EMPTY
61648: LIST
61649: LIST
61650: LIST
61651: LIST
61652: LIST
61653: ST_TO_ADDR
// end ; 4 :
61654: GO 61935
61656: LD_INT 4
61658: DOUBLE
61659: EQUAL
61660: IFTRUE 61664
61662: GO 61797
61664: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
61665: LD_ADDR_VAR 0 5
61669: PUSH
61670: LD_VAR 0 1
61674: PUSH
61675: LD_VAR 0 2
61679: PUSH
61680: LD_INT 4
61682: PLUS
61683: PUSH
61684: LD_INT 0
61686: PUSH
61687: EMPTY
61688: LIST
61689: LIST
61690: LIST
61691: PUSH
61692: LD_VAR 0 1
61696: PUSH
61697: LD_INT 3
61699: PLUS
61700: PUSH
61701: LD_VAR 0 2
61705: PUSH
61706: LD_INT 3
61708: PLUS
61709: PUSH
61710: LD_INT 5
61712: PUSH
61713: EMPTY
61714: LIST
61715: LIST
61716: LIST
61717: PUSH
61718: LD_VAR 0 1
61722: PUSH
61723: LD_INT 4
61725: PLUS
61726: PUSH
61727: LD_VAR 0 2
61731: PUSH
61732: LD_INT 4
61734: PUSH
61735: EMPTY
61736: LIST
61737: LIST
61738: LIST
61739: PUSH
61740: LD_VAR 0 1
61744: PUSH
61745: LD_VAR 0 2
61749: PUSH
61750: LD_INT 3
61752: MINUS
61753: PUSH
61754: LD_INT 3
61756: PUSH
61757: EMPTY
61758: LIST
61759: LIST
61760: LIST
61761: PUSH
61762: LD_VAR 0 1
61766: PUSH
61767: LD_INT 4
61769: MINUS
61770: PUSH
61771: LD_VAR 0 2
61775: PUSH
61776: LD_INT 4
61778: MINUS
61779: PUSH
61780: LD_INT 2
61782: PUSH
61783: EMPTY
61784: LIST
61785: LIST
61786: LIST
61787: PUSH
61788: EMPTY
61789: LIST
61790: LIST
61791: LIST
61792: LIST
61793: LIST
61794: ST_TO_ADDR
// end ; 5 :
61795: GO 61935
61797: LD_INT 5
61799: DOUBLE
61800: EQUAL
61801: IFTRUE 61805
61803: GO 61934
61805: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
61806: LD_ADDR_VAR 0 5
61810: PUSH
61811: LD_VAR 0 1
61815: PUSH
61816: LD_INT 4
61818: MINUS
61819: PUSH
61820: LD_VAR 0 2
61824: PUSH
61825: LD_INT 1
61827: PUSH
61828: EMPTY
61829: LIST
61830: LIST
61831: LIST
61832: PUSH
61833: LD_VAR 0 1
61837: PUSH
61838: LD_VAR 0 2
61842: PUSH
61843: LD_INT 4
61845: MINUS
61846: PUSH
61847: LD_INT 3
61849: PUSH
61850: EMPTY
61851: LIST
61852: LIST
61853: LIST
61854: PUSH
61855: LD_VAR 0 1
61859: PUSH
61860: LD_INT 4
61862: PLUS
61863: PUSH
61864: LD_VAR 0 2
61868: PUSH
61869: LD_INT 4
61871: PLUS
61872: PUSH
61873: LD_INT 5
61875: PUSH
61876: EMPTY
61877: LIST
61878: LIST
61879: LIST
61880: PUSH
61881: LD_VAR 0 1
61885: PUSH
61886: LD_INT 3
61888: PLUS
61889: PUSH
61890: LD_VAR 0 2
61894: PUSH
61895: LD_INT 4
61897: PUSH
61898: EMPTY
61899: LIST
61900: LIST
61901: LIST
61902: PUSH
61903: LD_VAR 0 1
61907: PUSH
61908: LD_VAR 0 2
61912: PUSH
61913: LD_INT 3
61915: PLUS
61916: PUSH
61917: LD_INT 0
61919: PUSH
61920: EMPTY
61921: LIST
61922: LIST
61923: LIST
61924: PUSH
61925: EMPTY
61926: LIST
61927: LIST
61928: LIST
61929: LIST
61930: LIST
61931: ST_TO_ADDR
// end ; end ;
61932: GO 61935
61934: POP
// result := list ;
61935: LD_ADDR_VAR 0 4
61939: PUSH
61940: LD_VAR 0 5
61944: ST_TO_ADDR
// end ;
61945: LD_VAR 0 4
61949: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
61950: LD_INT 0
61952: PPUSH
61953: PPUSH
61954: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
61955: LD_VAR 0 1
61959: NOT
61960: PUSH
61961: LD_VAR 0 2
61965: PUSH
61966: LD_INT 1
61968: PUSH
61969: LD_INT 2
61971: PUSH
61972: LD_INT 3
61974: PUSH
61975: LD_INT 4
61977: PUSH
61978: EMPTY
61979: LIST
61980: LIST
61981: LIST
61982: LIST
61983: IN
61984: NOT
61985: OR
61986: IFFALSE 61990
// exit ;
61988: GO 62073
// tmp := [ ] ;
61990: LD_ADDR_VAR 0 5
61994: PUSH
61995: EMPTY
61996: ST_TO_ADDR
// for i in units do
61997: LD_ADDR_VAR 0 4
62001: PUSH
62002: LD_VAR 0 1
62006: PUSH
62007: FOR_IN
62008: IFFALSE 62042
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
62010: LD_ADDR_VAR 0 5
62014: PUSH
62015: LD_VAR 0 5
62019: PPUSH
62020: LD_VAR 0 4
62024: PPUSH
62025: LD_VAR 0 2
62029: PPUSH
62030: CALL_OW 259
62034: PPUSH
62035: CALL 63434 0 2
62039: ST_TO_ADDR
62040: GO 62007
62042: POP
62043: POP
// if not tmp then
62044: LD_VAR 0 5
62048: NOT
62049: IFFALSE 62053
// exit ;
62051: GO 62073
// result := SortListByListDesc ( units , tmp ) ;
62053: LD_ADDR_VAR 0 3
62057: PUSH
62058: LD_VAR 0 1
62062: PPUSH
62063: LD_VAR 0 5
62067: PPUSH
62068: CALL_OW 77
62072: ST_TO_ADDR
// end ;
62073: LD_VAR 0 3
62077: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
62078: LD_INT 0
62080: PPUSH
62081: PPUSH
62082: PPUSH
// result := false ;
62083: LD_ADDR_VAR 0 3
62087: PUSH
62088: LD_INT 0
62090: ST_TO_ADDR
// if not building then
62091: LD_VAR 0 2
62095: NOT
62096: IFFALSE 62100
// exit ;
62098: GO 62238
// x := GetX ( building ) ;
62100: LD_ADDR_VAR 0 4
62104: PUSH
62105: LD_VAR 0 2
62109: PPUSH
62110: CALL_OW 250
62114: ST_TO_ADDR
// y := GetY ( building ) ;
62115: LD_ADDR_VAR 0 5
62119: PUSH
62120: LD_VAR 0 2
62124: PPUSH
62125: CALL_OW 251
62129: ST_TO_ADDR
// if not x or not y then
62130: LD_VAR 0 4
62134: NOT
62135: PUSH
62136: LD_VAR 0 5
62140: NOT
62141: OR
62142: IFFALSE 62146
// exit ;
62144: GO 62238
// if GetTaskList ( unit ) then
62146: LD_VAR 0 1
62150: PPUSH
62151: CALL_OW 437
62155: IFFALSE 62238
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62157: LD_STRING e
62159: PUSH
62160: LD_VAR 0 1
62164: PPUSH
62165: CALL_OW 437
62169: PUSH
62170: LD_INT 1
62172: ARRAY
62173: PUSH
62174: LD_INT 1
62176: ARRAY
62177: EQUAL
62178: PUSH
62179: LD_VAR 0 4
62183: PUSH
62184: LD_VAR 0 1
62188: PPUSH
62189: CALL_OW 437
62193: PUSH
62194: LD_INT 1
62196: ARRAY
62197: PUSH
62198: LD_INT 2
62200: ARRAY
62201: EQUAL
62202: AND
62203: PUSH
62204: LD_VAR 0 5
62208: PUSH
62209: LD_VAR 0 1
62213: PPUSH
62214: CALL_OW 437
62218: PUSH
62219: LD_INT 1
62221: ARRAY
62222: PUSH
62223: LD_INT 3
62225: ARRAY
62226: EQUAL
62227: AND
62228: IFFALSE 62238
// result := true end ;
62230: LD_ADDR_VAR 0 3
62234: PUSH
62235: LD_INT 1
62237: ST_TO_ADDR
// end ;
62238: LD_VAR 0 3
62242: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
62243: LD_INT 0
62245: PPUSH
// result := false ;
62246: LD_ADDR_VAR 0 4
62250: PUSH
62251: LD_INT 0
62253: ST_TO_ADDR
// if GetTaskList ( unit ) then
62254: LD_VAR 0 1
62258: PPUSH
62259: CALL_OW 437
62263: IFFALSE 62346
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62265: LD_STRING M
62267: PUSH
62268: LD_VAR 0 1
62272: PPUSH
62273: CALL_OW 437
62277: PUSH
62278: LD_INT 1
62280: ARRAY
62281: PUSH
62282: LD_INT 1
62284: ARRAY
62285: EQUAL
62286: PUSH
62287: LD_VAR 0 2
62291: PUSH
62292: LD_VAR 0 1
62296: PPUSH
62297: CALL_OW 437
62301: PUSH
62302: LD_INT 1
62304: ARRAY
62305: PUSH
62306: LD_INT 2
62308: ARRAY
62309: EQUAL
62310: AND
62311: PUSH
62312: LD_VAR 0 3
62316: PUSH
62317: LD_VAR 0 1
62321: PPUSH
62322: CALL_OW 437
62326: PUSH
62327: LD_INT 1
62329: ARRAY
62330: PUSH
62331: LD_INT 3
62333: ARRAY
62334: EQUAL
62335: AND
62336: IFFALSE 62346
// result := true ;
62338: LD_ADDR_VAR 0 4
62342: PUSH
62343: LD_INT 1
62345: ST_TO_ADDR
// end ; end ;
62346: LD_VAR 0 4
62350: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
62351: LD_INT 0
62353: PPUSH
62354: PPUSH
62355: PPUSH
62356: PPUSH
// if not unit or not area then
62357: LD_VAR 0 1
62361: NOT
62362: PUSH
62363: LD_VAR 0 2
62367: NOT
62368: OR
62369: IFFALSE 62373
// exit ;
62371: GO 62537
// tmp := AreaToList ( area , i ) ;
62373: LD_ADDR_VAR 0 6
62377: PUSH
62378: LD_VAR 0 2
62382: PPUSH
62383: LD_VAR 0 5
62387: PPUSH
62388: CALL_OW 517
62392: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
62393: LD_ADDR_VAR 0 5
62397: PUSH
62398: DOUBLE
62399: LD_INT 1
62401: DEC
62402: ST_TO_ADDR
62403: LD_VAR 0 6
62407: PUSH
62408: LD_INT 1
62410: ARRAY
62411: PUSH
62412: FOR_TO
62413: IFFALSE 62535
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
62415: LD_ADDR_VAR 0 7
62419: PUSH
62420: LD_VAR 0 6
62424: PUSH
62425: LD_INT 1
62427: ARRAY
62428: PUSH
62429: LD_VAR 0 5
62433: ARRAY
62434: PUSH
62435: LD_VAR 0 6
62439: PUSH
62440: LD_INT 2
62442: ARRAY
62443: PUSH
62444: LD_VAR 0 5
62448: ARRAY
62449: PUSH
62450: EMPTY
62451: LIST
62452: LIST
62453: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
62454: LD_VAR 0 7
62458: PUSH
62459: LD_INT 1
62461: ARRAY
62462: PPUSH
62463: LD_VAR 0 7
62467: PUSH
62468: LD_INT 2
62470: ARRAY
62471: PPUSH
62472: CALL_OW 428
62476: PUSH
62477: LD_INT 0
62479: EQUAL
62480: IFFALSE 62533
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
62482: LD_VAR 0 1
62486: PPUSH
62487: LD_VAR 0 7
62491: PUSH
62492: LD_INT 1
62494: ARRAY
62495: PPUSH
62496: LD_VAR 0 7
62500: PUSH
62501: LD_INT 2
62503: ARRAY
62504: PPUSH
62505: LD_VAR 0 3
62509: PPUSH
62510: CALL_OW 48
// result := IsPlaced ( unit ) ;
62514: LD_ADDR_VAR 0 4
62518: PUSH
62519: LD_VAR 0 1
62523: PPUSH
62524: CALL_OW 305
62528: ST_TO_ADDR
// exit ;
62529: POP
62530: POP
62531: GO 62537
// end ; end ;
62533: GO 62412
62535: POP
62536: POP
// end ;
62537: LD_VAR 0 4
62541: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
62542: LD_INT 0
62544: PPUSH
62545: PPUSH
62546: PPUSH
// if not side or side > 8 then
62547: LD_VAR 0 1
62551: NOT
62552: PUSH
62553: LD_VAR 0 1
62557: PUSH
62558: LD_INT 8
62560: GREATER
62561: OR
62562: IFFALSE 62566
// exit ;
62564: GO 62753
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
62566: LD_ADDR_VAR 0 4
62570: PUSH
62571: LD_INT 22
62573: PUSH
62574: LD_VAR 0 1
62578: PUSH
62579: EMPTY
62580: LIST
62581: LIST
62582: PUSH
62583: LD_INT 21
62585: PUSH
62586: LD_INT 3
62588: PUSH
62589: EMPTY
62590: LIST
62591: LIST
62592: PUSH
62593: EMPTY
62594: LIST
62595: LIST
62596: PPUSH
62597: CALL_OW 69
62601: ST_TO_ADDR
// if not tmp then
62602: LD_VAR 0 4
62606: NOT
62607: IFFALSE 62611
// exit ;
62609: GO 62753
// enable_addtolog := true ;
62611: LD_ADDR_OWVAR 81
62615: PUSH
62616: LD_INT 1
62618: ST_TO_ADDR
// AddToLog ( [ ) ;
62619: LD_STRING [
62621: PPUSH
62622: CALL_OW 561
// for i in tmp do
62626: LD_ADDR_VAR 0 3
62630: PUSH
62631: LD_VAR 0 4
62635: PUSH
62636: FOR_IN
62637: IFFALSE 62744
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
62639: LD_STRING [
62641: PUSH
62642: LD_VAR 0 3
62646: PPUSH
62647: CALL_OW 266
62651: STR
62652: PUSH
62653: LD_STRING , 
62655: STR
62656: PUSH
62657: LD_VAR 0 3
62661: PPUSH
62662: CALL_OW 250
62666: STR
62667: PUSH
62668: LD_STRING , 
62670: STR
62671: PUSH
62672: LD_VAR 0 3
62676: PPUSH
62677: CALL_OW 251
62681: STR
62682: PUSH
62683: LD_STRING , 
62685: STR
62686: PUSH
62687: LD_VAR 0 3
62691: PPUSH
62692: CALL_OW 254
62696: STR
62697: PUSH
62698: LD_STRING , 
62700: STR
62701: PUSH
62702: LD_VAR 0 3
62706: PPUSH
62707: LD_INT 1
62709: PPUSH
62710: CALL_OW 268
62714: STR
62715: PUSH
62716: LD_STRING , 
62718: STR
62719: PUSH
62720: LD_VAR 0 3
62724: PPUSH
62725: LD_INT 2
62727: PPUSH
62728: CALL_OW 268
62732: STR
62733: PUSH
62734: LD_STRING ],
62736: STR
62737: PPUSH
62738: CALL_OW 561
// end ;
62742: GO 62636
62744: POP
62745: POP
// AddToLog ( ]; ) ;
62746: LD_STRING ];
62748: PPUSH
62749: CALL_OW 561
// end ;
62753: LD_VAR 0 2
62757: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
62758: LD_INT 0
62760: PPUSH
62761: PPUSH
62762: PPUSH
62763: PPUSH
62764: PPUSH
// if not area or not rate or not max then
62765: LD_VAR 0 1
62769: NOT
62770: PUSH
62771: LD_VAR 0 2
62775: NOT
62776: OR
62777: PUSH
62778: LD_VAR 0 4
62782: NOT
62783: OR
62784: IFFALSE 62788
// exit ;
62786: GO 62977
// while 1 do
62788: LD_INT 1
62790: IFFALSE 62977
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
62792: LD_ADDR_VAR 0 9
62796: PUSH
62797: LD_VAR 0 1
62801: PPUSH
62802: LD_INT 1
62804: PPUSH
62805: CALL_OW 287
62809: PUSH
62810: LD_INT 10
62812: MUL
62813: ST_TO_ADDR
// r := rate / 10 ;
62814: LD_ADDR_VAR 0 7
62818: PUSH
62819: LD_VAR 0 2
62823: PUSH
62824: LD_INT 10
62826: DIVREAL
62827: ST_TO_ADDR
// time := 1 1$00 ;
62828: LD_ADDR_VAR 0 8
62832: PUSH
62833: LD_INT 2100
62835: ST_TO_ADDR
// if amount < min then
62836: LD_VAR 0 9
62840: PUSH
62841: LD_VAR 0 3
62845: LESS
62846: IFFALSE 62864
// r := r * 2 else
62848: LD_ADDR_VAR 0 7
62852: PUSH
62853: LD_VAR 0 7
62857: PUSH
62858: LD_INT 2
62860: MUL
62861: ST_TO_ADDR
62862: GO 62890
// if amount > max then
62864: LD_VAR 0 9
62868: PUSH
62869: LD_VAR 0 4
62873: GREATER
62874: IFFALSE 62890
// r := r / 2 ;
62876: LD_ADDR_VAR 0 7
62880: PUSH
62881: LD_VAR 0 7
62885: PUSH
62886: LD_INT 2
62888: DIVREAL
62889: ST_TO_ADDR
// time := time / r ;
62890: LD_ADDR_VAR 0 8
62894: PUSH
62895: LD_VAR 0 8
62899: PUSH
62900: LD_VAR 0 7
62904: DIVREAL
62905: ST_TO_ADDR
// if time < 0 then
62906: LD_VAR 0 8
62910: PUSH
62911: LD_INT 0
62913: LESS
62914: IFFALSE 62931
// time := time * - 1 ;
62916: LD_ADDR_VAR 0 8
62920: PUSH
62921: LD_VAR 0 8
62925: PUSH
62926: LD_INT 1
62928: NEG
62929: MUL
62930: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
62931: LD_VAR 0 8
62935: PUSH
62936: LD_INT 35
62938: PPUSH
62939: LD_INT 875
62941: PPUSH
62942: CALL_OW 12
62946: PLUS
62947: PPUSH
62948: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
62952: LD_INT 1
62954: PPUSH
62955: LD_INT 5
62957: PPUSH
62958: CALL_OW 12
62962: PPUSH
62963: LD_VAR 0 1
62967: PPUSH
62968: LD_INT 1
62970: PPUSH
62971: CALL_OW 55
// end ;
62975: GO 62788
// end ;
62977: LD_VAR 0 5
62981: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
62982: LD_INT 0
62984: PPUSH
62985: PPUSH
62986: PPUSH
62987: PPUSH
62988: PPUSH
62989: PPUSH
62990: PPUSH
62991: PPUSH
// if not turrets or not factories then
62992: LD_VAR 0 1
62996: NOT
62997: PUSH
62998: LD_VAR 0 2
63002: NOT
63003: OR
63004: IFFALSE 63008
// exit ;
63006: GO 63315
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
63008: LD_ADDR_VAR 0 10
63012: PUSH
63013: LD_INT 5
63015: PUSH
63016: LD_INT 6
63018: PUSH
63019: EMPTY
63020: LIST
63021: LIST
63022: PUSH
63023: LD_INT 2
63025: PUSH
63026: LD_INT 4
63028: PUSH
63029: EMPTY
63030: LIST
63031: LIST
63032: PUSH
63033: LD_INT 3
63035: PUSH
63036: LD_INT 5
63038: PUSH
63039: EMPTY
63040: LIST
63041: LIST
63042: PUSH
63043: EMPTY
63044: LIST
63045: LIST
63046: LIST
63047: PUSH
63048: LD_INT 24
63050: PUSH
63051: LD_INT 25
63053: PUSH
63054: EMPTY
63055: LIST
63056: LIST
63057: PUSH
63058: LD_INT 23
63060: PUSH
63061: LD_INT 27
63063: PUSH
63064: EMPTY
63065: LIST
63066: LIST
63067: PUSH
63068: EMPTY
63069: LIST
63070: LIST
63071: PUSH
63072: LD_INT 42
63074: PUSH
63075: LD_INT 43
63077: PUSH
63078: EMPTY
63079: LIST
63080: LIST
63081: PUSH
63082: LD_INT 44
63084: PUSH
63085: LD_INT 46
63087: PUSH
63088: EMPTY
63089: LIST
63090: LIST
63091: PUSH
63092: LD_INT 45
63094: PUSH
63095: LD_INT 47
63097: PUSH
63098: EMPTY
63099: LIST
63100: LIST
63101: PUSH
63102: EMPTY
63103: LIST
63104: LIST
63105: LIST
63106: PUSH
63107: EMPTY
63108: LIST
63109: LIST
63110: LIST
63111: ST_TO_ADDR
// result := [ ] ;
63112: LD_ADDR_VAR 0 3
63116: PUSH
63117: EMPTY
63118: ST_TO_ADDR
// for i in turrets do
63119: LD_ADDR_VAR 0 4
63123: PUSH
63124: LD_VAR 0 1
63128: PUSH
63129: FOR_IN
63130: IFFALSE 63313
// begin nat := GetNation ( i ) ;
63132: LD_ADDR_VAR 0 7
63136: PUSH
63137: LD_VAR 0 4
63141: PPUSH
63142: CALL_OW 248
63146: ST_TO_ADDR
// weapon := 0 ;
63147: LD_ADDR_VAR 0 8
63151: PUSH
63152: LD_INT 0
63154: ST_TO_ADDR
// if not nat then
63155: LD_VAR 0 7
63159: NOT
63160: IFFALSE 63164
// continue ;
63162: GO 63129
// for j in list [ nat ] do
63164: LD_ADDR_VAR 0 5
63168: PUSH
63169: LD_VAR 0 10
63173: PUSH
63174: LD_VAR 0 7
63178: ARRAY
63179: PUSH
63180: FOR_IN
63181: IFFALSE 63222
// if GetBWeapon ( i ) = j [ 1 ] then
63183: LD_VAR 0 4
63187: PPUSH
63188: CALL_OW 269
63192: PUSH
63193: LD_VAR 0 5
63197: PUSH
63198: LD_INT 1
63200: ARRAY
63201: EQUAL
63202: IFFALSE 63220
// begin weapon := j [ 2 ] ;
63204: LD_ADDR_VAR 0 8
63208: PUSH
63209: LD_VAR 0 5
63213: PUSH
63214: LD_INT 2
63216: ARRAY
63217: ST_TO_ADDR
// break ;
63218: GO 63222
// end ;
63220: GO 63180
63222: POP
63223: POP
// if not weapon then
63224: LD_VAR 0 8
63228: NOT
63229: IFFALSE 63233
// continue ;
63231: GO 63129
// for k in factories do
63233: LD_ADDR_VAR 0 6
63237: PUSH
63238: LD_VAR 0 2
63242: PUSH
63243: FOR_IN
63244: IFFALSE 63309
// begin weapons := AvailableWeaponList ( k ) ;
63246: LD_ADDR_VAR 0 9
63250: PUSH
63251: LD_VAR 0 6
63255: PPUSH
63256: CALL_OW 478
63260: ST_TO_ADDR
// if not weapons then
63261: LD_VAR 0 9
63265: NOT
63266: IFFALSE 63270
// continue ;
63268: GO 63243
// if weapon in weapons then
63270: LD_VAR 0 8
63274: PUSH
63275: LD_VAR 0 9
63279: IN
63280: IFFALSE 63307
// begin result := [ i , weapon ] ;
63282: LD_ADDR_VAR 0 3
63286: PUSH
63287: LD_VAR 0 4
63291: PUSH
63292: LD_VAR 0 8
63296: PUSH
63297: EMPTY
63298: LIST
63299: LIST
63300: ST_TO_ADDR
// exit ;
63301: POP
63302: POP
63303: POP
63304: POP
63305: GO 63315
// end ; end ;
63307: GO 63243
63309: POP
63310: POP
// end ;
63311: GO 63129
63313: POP
63314: POP
// end ;
63315: LD_VAR 0 3
63319: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
63320: LD_INT 0
63322: PPUSH
// if not side or side > 8 then
63323: LD_VAR 0 3
63327: NOT
63328: PUSH
63329: LD_VAR 0 3
63333: PUSH
63334: LD_INT 8
63336: GREATER
63337: OR
63338: IFFALSE 63342
// exit ;
63340: GO 63401
// if not range then
63342: LD_VAR 0 4
63346: NOT
63347: IFFALSE 63358
// range := - 12 ;
63349: LD_ADDR_VAR 0 4
63353: PUSH
63354: LD_INT 12
63356: NEG
63357: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
63358: LD_VAR 0 1
63362: PPUSH
63363: LD_VAR 0 2
63367: PPUSH
63368: LD_VAR 0 3
63372: PPUSH
63373: LD_VAR 0 4
63377: PPUSH
63378: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
63382: LD_VAR 0 1
63386: PPUSH
63387: LD_VAR 0 2
63391: PPUSH
63392: LD_VAR 0 3
63396: PPUSH
63397: CALL_OW 331
// end ;
63401: LD_VAR 0 5
63405: RET
// export function Video ( mode ) ; begin
63406: LD_INT 0
63408: PPUSH
// ingame_video = mode ;
63409: LD_ADDR_OWVAR 52
63413: PUSH
63414: LD_VAR 0 1
63418: ST_TO_ADDR
// interface_hidden = mode ;
63419: LD_ADDR_OWVAR 54
63423: PUSH
63424: LD_VAR 0 1
63428: ST_TO_ADDR
// end ;
63429: LD_VAR 0 2
63433: RET
// export function Join ( array , element ) ; begin
63434: LD_INT 0
63436: PPUSH
// result := Replace ( array , array + 1 , element ) ;
63437: LD_ADDR_VAR 0 3
63441: PUSH
63442: LD_VAR 0 1
63446: PPUSH
63447: LD_VAR 0 1
63451: PUSH
63452: LD_INT 1
63454: PLUS
63455: PPUSH
63456: LD_VAR 0 2
63460: PPUSH
63461: CALL_OW 1
63465: ST_TO_ADDR
// end ;
63466: LD_VAR 0 3
63470: RET
// export function JoinUnion ( array , element ) ; begin
63471: LD_INT 0
63473: PPUSH
// result := array union element ;
63474: LD_ADDR_VAR 0 3
63478: PUSH
63479: LD_VAR 0 1
63483: PUSH
63484: LD_VAR 0 2
63488: UNION
63489: ST_TO_ADDR
// end ;
63490: LD_VAR 0 3
63494: RET
// export function GetBehemoths ( side ) ; begin
63495: LD_INT 0
63497: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
63498: LD_ADDR_VAR 0 2
63502: PUSH
63503: LD_INT 22
63505: PUSH
63506: LD_VAR 0 1
63510: PUSH
63511: EMPTY
63512: LIST
63513: LIST
63514: PUSH
63515: LD_INT 31
63517: PUSH
63518: LD_INT 25
63520: PUSH
63521: EMPTY
63522: LIST
63523: LIST
63524: PUSH
63525: EMPTY
63526: LIST
63527: LIST
63528: PPUSH
63529: CALL_OW 69
63533: ST_TO_ADDR
// end ;
63534: LD_VAR 0 2
63538: RET
// export function Shuffle ( array ) ; var i , index ; begin
63539: LD_INT 0
63541: PPUSH
63542: PPUSH
63543: PPUSH
// result := [ ] ;
63544: LD_ADDR_VAR 0 2
63548: PUSH
63549: EMPTY
63550: ST_TO_ADDR
// if not array then
63551: LD_VAR 0 1
63555: NOT
63556: IFFALSE 63560
// exit ;
63558: GO 63659
// Randomize ;
63560: CALL_OW 10
// for i = array downto 1 do
63564: LD_ADDR_VAR 0 3
63568: PUSH
63569: DOUBLE
63570: LD_VAR 0 1
63574: INC
63575: ST_TO_ADDR
63576: LD_INT 1
63578: PUSH
63579: FOR_DOWNTO
63580: IFFALSE 63657
// begin index := rand ( 1 , array ) ;
63582: LD_ADDR_VAR 0 4
63586: PUSH
63587: LD_INT 1
63589: PPUSH
63590: LD_VAR 0 1
63594: PPUSH
63595: CALL_OW 12
63599: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
63600: LD_ADDR_VAR 0 2
63604: PUSH
63605: LD_VAR 0 2
63609: PPUSH
63610: LD_VAR 0 2
63614: PUSH
63615: LD_INT 1
63617: PLUS
63618: PPUSH
63619: LD_VAR 0 1
63623: PUSH
63624: LD_VAR 0 4
63628: ARRAY
63629: PPUSH
63630: CALL_OW 2
63634: ST_TO_ADDR
// array := Delete ( array , index ) ;
63635: LD_ADDR_VAR 0 1
63639: PUSH
63640: LD_VAR 0 1
63644: PPUSH
63645: LD_VAR 0 4
63649: PPUSH
63650: CALL_OW 3
63654: ST_TO_ADDR
// end ;
63655: GO 63579
63657: POP
63658: POP
// end ;
63659: LD_VAR 0 2
63663: RET
// export function GetBaseMaterials ( base ) ; begin
63664: LD_INT 0
63666: PPUSH
// result := [ 0 , 0 , 0 ] ;
63667: LD_ADDR_VAR 0 2
63671: PUSH
63672: LD_INT 0
63674: PUSH
63675: LD_INT 0
63677: PUSH
63678: LD_INT 0
63680: PUSH
63681: EMPTY
63682: LIST
63683: LIST
63684: LIST
63685: ST_TO_ADDR
// if not base then
63686: LD_VAR 0 1
63690: NOT
63691: IFFALSE 63695
// exit ;
63693: GO 63744
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
63695: LD_ADDR_VAR 0 2
63699: PUSH
63700: LD_VAR 0 1
63704: PPUSH
63705: LD_INT 1
63707: PPUSH
63708: CALL_OW 275
63712: PUSH
63713: LD_VAR 0 1
63717: PPUSH
63718: LD_INT 2
63720: PPUSH
63721: CALL_OW 275
63725: PUSH
63726: LD_VAR 0 1
63730: PPUSH
63731: LD_INT 3
63733: PPUSH
63734: CALL_OW 275
63738: PUSH
63739: EMPTY
63740: LIST
63741: LIST
63742: LIST
63743: ST_TO_ADDR
// end ;
63744: LD_VAR 0 2
63748: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
63749: LD_INT 0
63751: PPUSH
63752: PPUSH
// result := array ;
63753: LD_ADDR_VAR 0 3
63757: PUSH
63758: LD_VAR 0 1
63762: ST_TO_ADDR
// if size >= result then
63763: LD_VAR 0 2
63767: PUSH
63768: LD_VAR 0 3
63772: GREATEREQUAL
63773: IFFALSE 63777
// exit ;
63775: GO 63827
// if size then
63777: LD_VAR 0 2
63781: IFFALSE 63827
// for i := array downto size do
63783: LD_ADDR_VAR 0 4
63787: PUSH
63788: DOUBLE
63789: LD_VAR 0 1
63793: INC
63794: ST_TO_ADDR
63795: LD_VAR 0 2
63799: PUSH
63800: FOR_DOWNTO
63801: IFFALSE 63825
// result := Delete ( result , result ) ;
63803: LD_ADDR_VAR 0 3
63807: PUSH
63808: LD_VAR 0 3
63812: PPUSH
63813: LD_VAR 0 3
63817: PPUSH
63818: CALL_OW 3
63822: ST_TO_ADDR
63823: GO 63800
63825: POP
63826: POP
// end ;
63827: LD_VAR 0 3
63831: RET
// export function ComExit ( unit ) ; var tmp ; begin
63832: LD_INT 0
63834: PPUSH
63835: PPUSH
// if not IsInUnit ( unit ) then
63836: LD_VAR 0 1
63840: PPUSH
63841: CALL_OW 310
63845: NOT
63846: IFFALSE 63850
// exit ;
63848: GO 63910
// tmp := IsInUnit ( unit ) ;
63850: LD_ADDR_VAR 0 3
63854: PUSH
63855: LD_VAR 0 1
63859: PPUSH
63860: CALL_OW 310
63864: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
63865: LD_VAR 0 3
63869: PPUSH
63870: CALL_OW 247
63874: PUSH
63875: LD_INT 2
63877: EQUAL
63878: IFFALSE 63891
// ComExitVehicle ( unit ) else
63880: LD_VAR 0 1
63884: PPUSH
63885: CALL_OW 121
63889: GO 63900
// ComExitBuilding ( unit ) ;
63891: LD_VAR 0 1
63895: PPUSH
63896: CALL_OW 122
// result := tmp ;
63900: LD_ADDR_VAR 0 2
63904: PUSH
63905: LD_VAR 0 3
63909: ST_TO_ADDR
// end ;
63910: LD_VAR 0 2
63914: RET
// export function ComExitAll ( units ) ; var i ; begin
63915: LD_INT 0
63917: PPUSH
63918: PPUSH
// if not units then
63919: LD_VAR 0 1
63923: NOT
63924: IFFALSE 63928
// exit ;
63926: GO 63954
// for i in units do
63928: LD_ADDR_VAR 0 3
63932: PUSH
63933: LD_VAR 0 1
63937: PUSH
63938: FOR_IN
63939: IFFALSE 63952
// ComExit ( i ) ;
63941: LD_VAR 0 3
63945: PPUSH
63946: CALL 63832 0 1
63950: GO 63938
63952: POP
63953: POP
// end ;
63954: LD_VAR 0 2
63958: RET
// export function ResetHc ; begin
63959: LD_INT 0
63961: PPUSH
// InitHc ;
63962: CALL_OW 19
// hc_importance := 0 ;
63966: LD_ADDR_OWVAR 32
63970: PUSH
63971: LD_INT 0
63973: ST_TO_ADDR
// end ;
63974: LD_VAR 0 1
63978: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
63979: LD_INT 0
63981: PPUSH
63982: PPUSH
63983: PPUSH
// _x := ( x1 + x2 ) div 2 ;
63984: LD_ADDR_VAR 0 6
63988: PUSH
63989: LD_VAR 0 1
63993: PUSH
63994: LD_VAR 0 3
63998: PLUS
63999: PUSH
64000: LD_INT 2
64002: DIV
64003: ST_TO_ADDR
// if _x < 0 then
64004: LD_VAR 0 6
64008: PUSH
64009: LD_INT 0
64011: LESS
64012: IFFALSE 64029
// _x := _x * - 1 ;
64014: LD_ADDR_VAR 0 6
64018: PUSH
64019: LD_VAR 0 6
64023: PUSH
64024: LD_INT 1
64026: NEG
64027: MUL
64028: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
64029: LD_ADDR_VAR 0 7
64033: PUSH
64034: LD_VAR 0 2
64038: PUSH
64039: LD_VAR 0 4
64043: PLUS
64044: PUSH
64045: LD_INT 2
64047: DIV
64048: ST_TO_ADDR
// if _y < 0 then
64049: LD_VAR 0 7
64053: PUSH
64054: LD_INT 0
64056: LESS
64057: IFFALSE 64074
// _y := _y * - 1 ;
64059: LD_ADDR_VAR 0 7
64063: PUSH
64064: LD_VAR 0 7
64068: PUSH
64069: LD_INT 1
64071: NEG
64072: MUL
64073: ST_TO_ADDR
// result := [ _x , _y ] ;
64074: LD_ADDR_VAR 0 5
64078: PUSH
64079: LD_VAR 0 6
64083: PUSH
64084: LD_VAR 0 7
64088: PUSH
64089: EMPTY
64090: LIST
64091: LIST
64092: ST_TO_ADDR
// end ;
64093: LD_VAR 0 5
64097: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
64098: LD_INT 0
64100: PPUSH
64101: PPUSH
64102: PPUSH
64103: PPUSH
// task := GetTaskList ( unit ) ;
64104: LD_ADDR_VAR 0 7
64108: PUSH
64109: LD_VAR 0 1
64113: PPUSH
64114: CALL_OW 437
64118: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
64119: LD_VAR 0 7
64123: NOT
64124: PUSH
64125: LD_VAR 0 1
64129: PPUSH
64130: LD_VAR 0 2
64134: PPUSH
64135: CALL_OW 308
64139: NOT
64140: AND
64141: IFFALSE 64145
// exit ;
64143: GO 64263
// if IsInArea ( unit , area ) then
64145: LD_VAR 0 1
64149: PPUSH
64150: LD_VAR 0 2
64154: PPUSH
64155: CALL_OW 308
64159: IFFALSE 64177
// begin ComMoveToArea ( unit , goAway ) ;
64161: LD_VAR 0 1
64165: PPUSH
64166: LD_VAR 0 3
64170: PPUSH
64171: CALL_OW 113
// exit ;
64175: GO 64263
// end ; if task [ 1 ] [ 1 ] <> M then
64177: LD_VAR 0 7
64181: PUSH
64182: LD_INT 1
64184: ARRAY
64185: PUSH
64186: LD_INT 1
64188: ARRAY
64189: PUSH
64190: LD_STRING M
64192: NONEQUAL
64193: IFFALSE 64197
// exit ;
64195: GO 64263
// x := task [ 1 ] [ 2 ] ;
64197: LD_ADDR_VAR 0 5
64201: PUSH
64202: LD_VAR 0 7
64206: PUSH
64207: LD_INT 1
64209: ARRAY
64210: PUSH
64211: LD_INT 2
64213: ARRAY
64214: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
64215: LD_ADDR_VAR 0 6
64219: PUSH
64220: LD_VAR 0 7
64224: PUSH
64225: LD_INT 1
64227: ARRAY
64228: PUSH
64229: LD_INT 3
64231: ARRAY
64232: ST_TO_ADDR
// if InArea ( x , y , area ) then
64233: LD_VAR 0 5
64237: PPUSH
64238: LD_VAR 0 6
64242: PPUSH
64243: LD_VAR 0 2
64247: PPUSH
64248: CALL_OW 309
64252: IFFALSE 64263
// ComStop ( unit ) ;
64254: LD_VAR 0 1
64258: PPUSH
64259: CALL_OW 141
// end ;
64263: LD_VAR 0 4
64267: RET
// export function Abs ( value ) ; begin
64268: LD_INT 0
64270: PPUSH
// result := value ;
64271: LD_ADDR_VAR 0 2
64275: PUSH
64276: LD_VAR 0 1
64280: ST_TO_ADDR
// if value < 0 then
64281: LD_VAR 0 1
64285: PUSH
64286: LD_INT 0
64288: LESS
64289: IFFALSE 64306
// result := value * - 1 ;
64291: LD_ADDR_VAR 0 2
64295: PUSH
64296: LD_VAR 0 1
64300: PUSH
64301: LD_INT 1
64303: NEG
64304: MUL
64305: ST_TO_ADDR
// end ;
64306: LD_VAR 0 2
64310: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
64311: LD_INT 0
64313: PPUSH
64314: PPUSH
64315: PPUSH
64316: PPUSH
64317: PPUSH
64318: PPUSH
64319: PPUSH
64320: PPUSH
// if not unit or not building then
64321: LD_VAR 0 1
64325: NOT
64326: PUSH
64327: LD_VAR 0 2
64331: NOT
64332: OR
64333: IFFALSE 64337
// exit ;
64335: GO 64563
// x := GetX ( building ) ;
64337: LD_ADDR_VAR 0 4
64341: PUSH
64342: LD_VAR 0 2
64346: PPUSH
64347: CALL_OW 250
64351: ST_TO_ADDR
// y := GetY ( building ) ;
64352: LD_ADDR_VAR 0 6
64356: PUSH
64357: LD_VAR 0 2
64361: PPUSH
64362: CALL_OW 251
64366: ST_TO_ADDR
// d := GetDir ( building ) ;
64367: LD_ADDR_VAR 0 8
64371: PUSH
64372: LD_VAR 0 2
64376: PPUSH
64377: CALL_OW 254
64381: ST_TO_ADDR
// r := 4 ;
64382: LD_ADDR_VAR 0 9
64386: PUSH
64387: LD_INT 4
64389: ST_TO_ADDR
// for i := 1 to 5 do
64390: LD_ADDR_VAR 0 10
64394: PUSH
64395: DOUBLE
64396: LD_INT 1
64398: DEC
64399: ST_TO_ADDR
64400: LD_INT 5
64402: PUSH
64403: FOR_TO
64404: IFFALSE 64561
// begin _x := ShiftX ( x , d , r + i ) ;
64406: LD_ADDR_VAR 0 5
64410: PUSH
64411: LD_VAR 0 4
64415: PPUSH
64416: LD_VAR 0 8
64420: PPUSH
64421: LD_VAR 0 9
64425: PUSH
64426: LD_VAR 0 10
64430: PLUS
64431: PPUSH
64432: CALL_OW 272
64436: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
64437: LD_ADDR_VAR 0 7
64441: PUSH
64442: LD_VAR 0 6
64446: PPUSH
64447: LD_VAR 0 8
64451: PPUSH
64452: LD_VAR 0 9
64456: PUSH
64457: LD_VAR 0 10
64461: PLUS
64462: PPUSH
64463: CALL_OW 273
64467: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
64468: LD_VAR 0 5
64472: PPUSH
64473: LD_VAR 0 7
64477: PPUSH
64478: CALL_OW 488
64482: PUSH
64483: LD_VAR 0 5
64487: PPUSH
64488: LD_VAR 0 7
64492: PPUSH
64493: CALL_OW 428
64497: PPUSH
64498: CALL_OW 247
64502: PUSH
64503: LD_INT 3
64505: PUSH
64506: LD_INT 2
64508: PUSH
64509: EMPTY
64510: LIST
64511: LIST
64512: IN
64513: NOT
64514: AND
64515: IFFALSE 64559
// begin ComMoveXY ( unit , _x , _y ) ;
64517: LD_VAR 0 1
64521: PPUSH
64522: LD_VAR 0 5
64526: PPUSH
64527: LD_VAR 0 7
64531: PPUSH
64532: CALL_OW 111
// result := [ _x , _y ] ;
64536: LD_ADDR_VAR 0 3
64540: PUSH
64541: LD_VAR 0 5
64545: PUSH
64546: LD_VAR 0 7
64550: PUSH
64551: EMPTY
64552: LIST
64553: LIST
64554: ST_TO_ADDR
// exit ;
64555: POP
64556: POP
64557: GO 64563
// end ; end ;
64559: GO 64403
64561: POP
64562: POP
// end ;
64563: LD_VAR 0 3
64567: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
64568: LD_INT 0
64570: PPUSH
64571: PPUSH
64572: PPUSH
// result := 0 ;
64573: LD_ADDR_VAR 0 3
64577: PUSH
64578: LD_INT 0
64580: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
64581: LD_VAR 0 1
64585: PUSH
64586: LD_INT 0
64588: LESS
64589: PUSH
64590: LD_VAR 0 1
64594: PUSH
64595: LD_INT 8
64597: GREATER
64598: OR
64599: PUSH
64600: LD_VAR 0 2
64604: PUSH
64605: LD_INT 0
64607: LESS
64608: OR
64609: PUSH
64610: LD_VAR 0 2
64614: PUSH
64615: LD_INT 8
64617: GREATER
64618: OR
64619: IFFALSE 64623
// exit ;
64621: GO 64698
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
64623: LD_ADDR_VAR 0 4
64627: PUSH
64628: LD_INT 22
64630: PUSH
64631: LD_VAR 0 2
64635: PUSH
64636: EMPTY
64637: LIST
64638: LIST
64639: PPUSH
64640: CALL_OW 69
64644: PUSH
64645: FOR_IN
64646: IFFALSE 64696
// begin un := UnitShoot ( i ) ;
64648: LD_ADDR_VAR 0 5
64652: PUSH
64653: LD_VAR 0 4
64657: PPUSH
64658: CALL_OW 504
64662: ST_TO_ADDR
// if GetSide ( un ) = side1 then
64663: LD_VAR 0 5
64667: PPUSH
64668: CALL_OW 255
64672: PUSH
64673: LD_VAR 0 1
64677: EQUAL
64678: IFFALSE 64694
// begin result := un ;
64680: LD_ADDR_VAR 0 3
64684: PUSH
64685: LD_VAR 0 5
64689: ST_TO_ADDR
// exit ;
64690: POP
64691: POP
64692: GO 64698
// end ; end ;
64694: GO 64645
64696: POP
64697: POP
// end ;
64698: LD_VAR 0 3
64702: RET
// export function GetCargoBay ( units ) ; begin
64703: LD_INT 0
64705: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
64706: LD_ADDR_VAR 0 2
64710: PUSH
64711: LD_VAR 0 1
64715: PPUSH
64716: LD_INT 2
64718: PUSH
64719: LD_INT 34
64721: PUSH
64722: LD_INT 12
64724: PUSH
64725: EMPTY
64726: LIST
64727: LIST
64728: PUSH
64729: LD_INT 34
64731: PUSH
64732: LD_INT 51
64734: PUSH
64735: EMPTY
64736: LIST
64737: LIST
64738: PUSH
64739: LD_INT 34
64741: PUSH
64742: LD_INT 32
64744: PUSH
64745: EMPTY
64746: LIST
64747: LIST
64748: PUSH
64749: LD_INT 34
64751: PUSH
64752: LD_INT 89
64754: PUSH
64755: EMPTY
64756: LIST
64757: LIST
64758: PUSH
64759: EMPTY
64760: LIST
64761: LIST
64762: LIST
64763: LIST
64764: LIST
64765: PPUSH
64766: CALL_OW 72
64770: ST_TO_ADDR
// end ;
64771: LD_VAR 0 2
64775: RET
// export function Negate ( value ) ; begin
64776: LD_INT 0
64778: PPUSH
// result := not value ;
64779: LD_ADDR_VAR 0 2
64783: PUSH
64784: LD_VAR 0 1
64788: NOT
64789: ST_TO_ADDR
// end ;
64790: LD_VAR 0 2
64794: RET
// export function Inc ( value ) ; begin
64795: LD_INT 0
64797: PPUSH
// result := value + 1 ;
64798: LD_ADDR_VAR 0 2
64802: PUSH
64803: LD_VAR 0 1
64807: PUSH
64808: LD_INT 1
64810: PLUS
64811: ST_TO_ADDR
// end ;
64812: LD_VAR 0 2
64816: RET
// export function Dec ( value ) ; begin
64817: LD_INT 0
64819: PPUSH
// result := value - 1 ;
64820: LD_ADDR_VAR 0 2
64824: PUSH
64825: LD_VAR 0 1
64829: PUSH
64830: LD_INT 1
64832: MINUS
64833: ST_TO_ADDR
// end ;
64834: LD_VAR 0 2
64838: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
64839: LD_INT 0
64841: PPUSH
64842: PPUSH
64843: PPUSH
64844: PPUSH
64845: PPUSH
64846: PPUSH
64847: PPUSH
64848: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
64849: LD_VAR 0 1
64853: PPUSH
64854: LD_VAR 0 2
64858: PPUSH
64859: CALL_OW 488
64863: NOT
64864: PUSH
64865: LD_VAR 0 3
64869: PPUSH
64870: LD_VAR 0 4
64874: PPUSH
64875: CALL_OW 488
64879: NOT
64880: OR
64881: IFFALSE 64894
// begin result := - 1 ;
64883: LD_ADDR_VAR 0 5
64887: PUSH
64888: LD_INT 1
64890: NEG
64891: ST_TO_ADDR
// exit ;
64892: GO 65129
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
64894: LD_ADDR_VAR 0 12
64898: PUSH
64899: LD_VAR 0 1
64903: PPUSH
64904: LD_VAR 0 2
64908: PPUSH
64909: LD_VAR 0 3
64913: PPUSH
64914: LD_VAR 0 4
64918: PPUSH
64919: CALL 63979 0 4
64923: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
64924: LD_ADDR_VAR 0 11
64928: PUSH
64929: LD_VAR 0 1
64933: PPUSH
64934: LD_VAR 0 2
64938: PPUSH
64939: LD_VAR 0 12
64943: PUSH
64944: LD_INT 1
64946: ARRAY
64947: PPUSH
64948: LD_VAR 0 12
64952: PUSH
64953: LD_INT 2
64955: ARRAY
64956: PPUSH
64957: CALL_OW 298
64961: ST_TO_ADDR
// distance := 9999 ;
64962: LD_ADDR_VAR 0 10
64966: PUSH
64967: LD_INT 9999
64969: ST_TO_ADDR
// for i := 0 to 5 do
64970: LD_ADDR_VAR 0 6
64974: PUSH
64975: DOUBLE
64976: LD_INT 0
64978: DEC
64979: ST_TO_ADDR
64980: LD_INT 5
64982: PUSH
64983: FOR_TO
64984: IFFALSE 65127
// begin _x := ShiftX ( x1 , i , centerDist ) ;
64986: LD_ADDR_VAR 0 7
64990: PUSH
64991: LD_VAR 0 1
64995: PPUSH
64996: LD_VAR 0 6
65000: PPUSH
65001: LD_VAR 0 11
65005: PPUSH
65006: CALL_OW 272
65010: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
65011: LD_ADDR_VAR 0 8
65015: PUSH
65016: LD_VAR 0 2
65020: PPUSH
65021: LD_VAR 0 6
65025: PPUSH
65026: LD_VAR 0 11
65030: PPUSH
65031: CALL_OW 273
65035: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
65036: LD_VAR 0 7
65040: PPUSH
65041: LD_VAR 0 8
65045: PPUSH
65046: CALL_OW 488
65050: NOT
65051: IFFALSE 65055
// continue ;
65053: GO 64983
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
65055: LD_ADDR_VAR 0 9
65059: PUSH
65060: LD_VAR 0 12
65064: PUSH
65065: LD_INT 1
65067: ARRAY
65068: PPUSH
65069: LD_VAR 0 12
65073: PUSH
65074: LD_INT 2
65076: ARRAY
65077: PPUSH
65078: LD_VAR 0 7
65082: PPUSH
65083: LD_VAR 0 8
65087: PPUSH
65088: CALL_OW 298
65092: ST_TO_ADDR
// if tmp < distance then
65093: LD_VAR 0 9
65097: PUSH
65098: LD_VAR 0 10
65102: LESS
65103: IFFALSE 65125
// begin result := i ;
65105: LD_ADDR_VAR 0 5
65109: PUSH
65110: LD_VAR 0 6
65114: ST_TO_ADDR
// distance := tmp ;
65115: LD_ADDR_VAR 0 10
65119: PUSH
65120: LD_VAR 0 9
65124: ST_TO_ADDR
// end ; end ;
65125: GO 64983
65127: POP
65128: POP
// end ;
65129: LD_VAR 0 5
65133: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65134: LD_INT 0
65136: PPUSH
65137: PPUSH
// if not driver or not IsInUnit ( driver ) then
65138: LD_VAR 0 1
65142: NOT
65143: PUSH
65144: LD_VAR 0 1
65148: PPUSH
65149: CALL_OW 310
65153: NOT
65154: OR
65155: IFFALSE 65159
// exit ;
65157: GO 65249
// vehicle := IsInUnit ( driver ) ;
65159: LD_ADDR_VAR 0 3
65163: PUSH
65164: LD_VAR 0 1
65168: PPUSH
65169: CALL_OW 310
65173: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65174: LD_VAR 0 1
65178: PPUSH
65179: LD_STRING \
65181: PUSH
65182: LD_INT 0
65184: PUSH
65185: LD_INT 0
65187: PUSH
65188: LD_INT 0
65190: PUSH
65191: LD_INT 0
65193: PUSH
65194: LD_INT 0
65196: PUSH
65197: LD_INT 0
65199: PUSH
65200: EMPTY
65201: LIST
65202: LIST
65203: LIST
65204: LIST
65205: LIST
65206: LIST
65207: LIST
65208: PUSH
65209: LD_STRING E
65211: PUSH
65212: LD_INT 0
65214: PUSH
65215: LD_INT 0
65217: PUSH
65218: LD_VAR 0 3
65222: PUSH
65223: LD_INT 0
65225: PUSH
65226: LD_INT 0
65228: PUSH
65229: LD_INT 0
65231: PUSH
65232: EMPTY
65233: LIST
65234: LIST
65235: LIST
65236: LIST
65237: LIST
65238: LIST
65239: LIST
65240: PUSH
65241: EMPTY
65242: LIST
65243: LIST
65244: PPUSH
65245: CALL_OW 446
// end ;
65249: LD_VAR 0 2
65253: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65254: LD_INT 0
65256: PPUSH
65257: PPUSH
// if not driver or not IsInUnit ( driver ) then
65258: LD_VAR 0 1
65262: NOT
65263: PUSH
65264: LD_VAR 0 1
65268: PPUSH
65269: CALL_OW 310
65273: NOT
65274: OR
65275: IFFALSE 65279
// exit ;
65277: GO 65369
// vehicle := IsInUnit ( driver ) ;
65279: LD_ADDR_VAR 0 3
65283: PUSH
65284: LD_VAR 0 1
65288: PPUSH
65289: CALL_OW 310
65293: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65294: LD_VAR 0 1
65298: PPUSH
65299: LD_STRING \
65301: PUSH
65302: LD_INT 0
65304: PUSH
65305: LD_INT 0
65307: PUSH
65308: LD_INT 0
65310: PUSH
65311: LD_INT 0
65313: PUSH
65314: LD_INT 0
65316: PUSH
65317: LD_INT 0
65319: PUSH
65320: EMPTY
65321: LIST
65322: LIST
65323: LIST
65324: LIST
65325: LIST
65326: LIST
65327: LIST
65328: PUSH
65329: LD_STRING E
65331: PUSH
65332: LD_INT 0
65334: PUSH
65335: LD_INT 0
65337: PUSH
65338: LD_VAR 0 3
65342: PUSH
65343: LD_INT 0
65345: PUSH
65346: LD_INT 0
65348: PUSH
65349: LD_INT 0
65351: PUSH
65352: EMPTY
65353: LIST
65354: LIST
65355: LIST
65356: LIST
65357: LIST
65358: LIST
65359: LIST
65360: PUSH
65361: EMPTY
65362: LIST
65363: LIST
65364: PPUSH
65365: CALL_OW 447
// end ;
65369: LD_VAR 0 2
65373: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
65374: LD_INT 0
65376: PPUSH
65377: PPUSH
65378: PPUSH
// tmp := [ ] ;
65379: LD_ADDR_VAR 0 5
65383: PUSH
65384: EMPTY
65385: ST_TO_ADDR
// for i in units do
65386: LD_ADDR_VAR 0 4
65390: PUSH
65391: LD_VAR 0 1
65395: PUSH
65396: FOR_IN
65397: IFFALSE 65435
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
65399: LD_ADDR_VAR 0 5
65403: PUSH
65404: LD_VAR 0 5
65408: PPUSH
65409: LD_VAR 0 5
65413: PUSH
65414: LD_INT 1
65416: PLUS
65417: PPUSH
65418: LD_VAR 0 4
65422: PPUSH
65423: CALL_OW 256
65427: PPUSH
65428: CALL_OW 2
65432: ST_TO_ADDR
65433: GO 65396
65435: POP
65436: POP
// if not tmp then
65437: LD_VAR 0 5
65441: NOT
65442: IFFALSE 65446
// exit ;
65444: GO 65494
// if asc then
65446: LD_VAR 0 2
65450: IFFALSE 65474
// result := SortListByListAsc ( units , tmp ) else
65452: LD_ADDR_VAR 0 3
65456: PUSH
65457: LD_VAR 0 1
65461: PPUSH
65462: LD_VAR 0 5
65466: PPUSH
65467: CALL_OW 76
65471: ST_TO_ADDR
65472: GO 65494
// result := SortListByListDesc ( units , tmp ) ;
65474: LD_ADDR_VAR 0 3
65478: PUSH
65479: LD_VAR 0 1
65483: PPUSH
65484: LD_VAR 0 5
65488: PPUSH
65489: CALL_OW 77
65493: ST_TO_ADDR
// end ;
65494: LD_VAR 0 3
65498: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
65499: LD_INT 0
65501: PPUSH
65502: PPUSH
// task := GetTaskList ( mech ) ;
65503: LD_ADDR_VAR 0 4
65507: PUSH
65508: LD_VAR 0 1
65512: PPUSH
65513: CALL_OW 437
65517: ST_TO_ADDR
// if not task then
65518: LD_VAR 0 4
65522: NOT
65523: IFFALSE 65527
// exit ;
65525: GO 65569
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
65527: LD_ADDR_VAR 0 3
65531: PUSH
65532: LD_VAR 0 4
65536: PUSH
65537: LD_INT 1
65539: ARRAY
65540: PUSH
65541: LD_INT 1
65543: ARRAY
65544: PUSH
65545: LD_STRING r
65547: EQUAL
65548: PUSH
65549: LD_VAR 0 4
65553: PUSH
65554: LD_INT 1
65556: ARRAY
65557: PUSH
65558: LD_INT 4
65560: ARRAY
65561: PUSH
65562: LD_VAR 0 2
65566: EQUAL
65567: AND
65568: ST_TO_ADDR
// end ;
65569: LD_VAR 0 3
65573: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
65574: LD_INT 0
65576: PPUSH
// SetDir ( unit , d ) ;
65577: LD_VAR 0 1
65581: PPUSH
65582: LD_VAR 0 4
65586: PPUSH
65587: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
65591: LD_VAR 0 1
65595: PPUSH
65596: LD_VAR 0 2
65600: PPUSH
65601: LD_VAR 0 3
65605: PPUSH
65606: LD_VAR 0 5
65610: PPUSH
65611: CALL_OW 48
// end ;
65615: LD_VAR 0 6
65619: RET
// export function ToNaturalNumber ( number ) ; begin
65620: LD_INT 0
65622: PPUSH
// result := number div 1 ;
65623: LD_ADDR_VAR 0 2
65627: PUSH
65628: LD_VAR 0 1
65632: PUSH
65633: LD_INT 1
65635: DIV
65636: ST_TO_ADDR
// if number < 0 then
65637: LD_VAR 0 1
65641: PUSH
65642: LD_INT 0
65644: LESS
65645: IFFALSE 65655
// result := 0 ;
65647: LD_ADDR_VAR 0 2
65651: PUSH
65652: LD_INT 0
65654: ST_TO_ADDR
// end ;
65655: LD_VAR 0 2
65659: RET
// export function SortByClass ( units , class ) ; var un ; begin
65660: LD_INT 0
65662: PPUSH
65663: PPUSH
// if not units or not class then
65664: LD_VAR 0 1
65668: NOT
65669: PUSH
65670: LD_VAR 0 2
65674: NOT
65675: OR
65676: IFFALSE 65680
// exit ;
65678: GO 65775
// result := [ ] ;
65680: LD_ADDR_VAR 0 3
65684: PUSH
65685: EMPTY
65686: ST_TO_ADDR
// for un in units do
65687: LD_ADDR_VAR 0 4
65691: PUSH
65692: LD_VAR 0 1
65696: PUSH
65697: FOR_IN
65698: IFFALSE 65773
// if GetClass ( un ) = class then
65700: LD_VAR 0 4
65704: PPUSH
65705: CALL_OW 257
65709: PUSH
65710: LD_VAR 0 2
65714: EQUAL
65715: IFFALSE 65742
// result := Insert ( result , 1 , un ) else
65717: LD_ADDR_VAR 0 3
65721: PUSH
65722: LD_VAR 0 3
65726: PPUSH
65727: LD_INT 1
65729: PPUSH
65730: LD_VAR 0 4
65734: PPUSH
65735: CALL_OW 2
65739: ST_TO_ADDR
65740: GO 65771
// result := Replace ( result , result + 1 , un ) ;
65742: LD_ADDR_VAR 0 3
65746: PUSH
65747: LD_VAR 0 3
65751: PPUSH
65752: LD_VAR 0 3
65756: PUSH
65757: LD_INT 1
65759: PLUS
65760: PPUSH
65761: LD_VAR 0 4
65765: PPUSH
65766: CALL_OW 1
65770: ST_TO_ADDR
65771: GO 65697
65773: POP
65774: POP
// end ;
65775: LD_VAR 0 3
65779: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
65780: LD_INT 0
65782: PPUSH
65783: PPUSH
65784: PPUSH
65785: PPUSH
65786: PPUSH
65787: PPUSH
65788: PPUSH
// result := [ ] ;
65789: LD_ADDR_VAR 0 4
65793: PUSH
65794: EMPTY
65795: ST_TO_ADDR
// if x - r < 0 then
65796: LD_VAR 0 1
65800: PUSH
65801: LD_VAR 0 3
65805: MINUS
65806: PUSH
65807: LD_INT 0
65809: LESS
65810: IFFALSE 65822
// min_x := 0 else
65812: LD_ADDR_VAR 0 8
65816: PUSH
65817: LD_INT 0
65819: ST_TO_ADDR
65820: GO 65838
// min_x := x - r ;
65822: LD_ADDR_VAR 0 8
65826: PUSH
65827: LD_VAR 0 1
65831: PUSH
65832: LD_VAR 0 3
65836: MINUS
65837: ST_TO_ADDR
// if y - r < 0 then
65838: LD_VAR 0 2
65842: PUSH
65843: LD_VAR 0 3
65847: MINUS
65848: PUSH
65849: LD_INT 0
65851: LESS
65852: IFFALSE 65864
// min_y := 0 else
65854: LD_ADDR_VAR 0 7
65858: PUSH
65859: LD_INT 0
65861: ST_TO_ADDR
65862: GO 65880
// min_y := y - r ;
65864: LD_ADDR_VAR 0 7
65868: PUSH
65869: LD_VAR 0 2
65873: PUSH
65874: LD_VAR 0 3
65878: MINUS
65879: ST_TO_ADDR
// max_x := x + r ;
65880: LD_ADDR_VAR 0 9
65884: PUSH
65885: LD_VAR 0 1
65889: PUSH
65890: LD_VAR 0 3
65894: PLUS
65895: ST_TO_ADDR
// max_y := y + r ;
65896: LD_ADDR_VAR 0 10
65900: PUSH
65901: LD_VAR 0 2
65905: PUSH
65906: LD_VAR 0 3
65910: PLUS
65911: ST_TO_ADDR
// for _x = min_x to max_x do
65912: LD_ADDR_VAR 0 5
65916: PUSH
65917: DOUBLE
65918: LD_VAR 0 8
65922: DEC
65923: ST_TO_ADDR
65924: LD_VAR 0 9
65928: PUSH
65929: FOR_TO
65930: IFFALSE 66031
// for _y = min_y to max_y do
65932: LD_ADDR_VAR 0 6
65936: PUSH
65937: DOUBLE
65938: LD_VAR 0 7
65942: DEC
65943: ST_TO_ADDR
65944: LD_VAR 0 10
65948: PUSH
65949: FOR_TO
65950: IFFALSE 66027
// begin if not ValidHex ( _x , _y ) then
65952: LD_VAR 0 5
65956: PPUSH
65957: LD_VAR 0 6
65961: PPUSH
65962: CALL_OW 488
65966: NOT
65967: IFFALSE 65971
// continue ;
65969: GO 65949
// if GetResourceTypeXY ( _x , _y ) then
65971: LD_VAR 0 5
65975: PPUSH
65976: LD_VAR 0 6
65980: PPUSH
65981: CALL_OW 283
65985: IFFALSE 66025
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
65987: LD_ADDR_VAR 0 4
65991: PUSH
65992: LD_VAR 0 4
65996: PPUSH
65997: LD_VAR 0 4
66001: PUSH
66002: LD_INT 1
66004: PLUS
66005: PPUSH
66006: LD_VAR 0 5
66010: PUSH
66011: LD_VAR 0 6
66015: PUSH
66016: EMPTY
66017: LIST
66018: LIST
66019: PPUSH
66020: CALL_OW 1
66024: ST_TO_ADDR
// end ;
66025: GO 65949
66027: POP
66028: POP
66029: GO 65929
66031: POP
66032: POP
// end ;
66033: LD_VAR 0 4
66037: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
66038: LD_INT 0
66040: PPUSH
66041: PPUSH
66042: PPUSH
66043: PPUSH
66044: PPUSH
66045: PPUSH
66046: PPUSH
66047: PPUSH
// if not units then
66048: LD_VAR 0 1
66052: NOT
66053: IFFALSE 66057
// exit ;
66055: GO 66581
// result := UnitFilter ( units , [ f_ok ] ) ;
66057: LD_ADDR_VAR 0 3
66061: PUSH
66062: LD_VAR 0 1
66066: PPUSH
66067: LD_INT 50
66069: PUSH
66070: EMPTY
66071: LIST
66072: PPUSH
66073: CALL_OW 72
66077: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
66078: LD_ADDR_VAR 0 8
66082: PUSH
66083: LD_VAR 0 1
66087: PUSH
66088: LD_INT 1
66090: ARRAY
66091: PPUSH
66092: CALL_OW 255
66096: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
66097: LD_ADDR_VAR 0 10
66101: PUSH
66102: LD_INT 29
66104: PUSH
66105: LD_INT 91
66107: PUSH
66108: LD_INT 49
66110: PUSH
66111: EMPTY
66112: LIST
66113: LIST
66114: LIST
66115: ST_TO_ADDR
// if not result then
66116: LD_VAR 0 3
66120: NOT
66121: IFFALSE 66125
// exit ;
66123: GO 66581
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
66125: LD_ADDR_VAR 0 5
66129: PUSH
66130: LD_INT 81
66132: PUSH
66133: LD_VAR 0 8
66137: PUSH
66138: EMPTY
66139: LIST
66140: LIST
66141: PPUSH
66142: CALL_OW 69
66146: ST_TO_ADDR
// for i in result do
66147: LD_ADDR_VAR 0 4
66151: PUSH
66152: LD_VAR 0 3
66156: PUSH
66157: FOR_IN
66158: IFFALSE 66579
// begin tag := GetTag ( i ) + 1 ;
66160: LD_ADDR_VAR 0 9
66164: PUSH
66165: LD_VAR 0 4
66169: PPUSH
66170: CALL_OW 110
66174: PUSH
66175: LD_INT 1
66177: PLUS
66178: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
66179: LD_ADDR_VAR 0 7
66183: PUSH
66184: LD_VAR 0 4
66188: PPUSH
66189: CALL_OW 250
66193: PPUSH
66194: LD_VAR 0 4
66198: PPUSH
66199: CALL_OW 251
66203: PPUSH
66204: LD_INT 6
66206: PPUSH
66207: CALL 65780 0 3
66211: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
66212: LD_VAR 0 4
66216: PPUSH
66217: CALL_OW 247
66221: PUSH
66222: LD_INT 2
66224: EQUAL
66225: PUSH
66226: LD_VAR 0 7
66230: AND
66231: PUSH
66232: LD_VAR 0 4
66236: PPUSH
66237: CALL_OW 264
66241: PUSH
66242: LD_VAR 0 10
66246: IN
66247: NOT
66248: AND
66249: IFFALSE 66288
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
66251: LD_VAR 0 4
66255: PPUSH
66256: LD_VAR 0 7
66260: PUSH
66261: LD_INT 1
66263: ARRAY
66264: PUSH
66265: LD_INT 1
66267: ARRAY
66268: PPUSH
66269: LD_VAR 0 7
66273: PUSH
66274: LD_INT 1
66276: ARRAY
66277: PUSH
66278: LD_INT 2
66280: ARRAY
66281: PPUSH
66282: CALL_OW 116
66286: GO 66577
// if path > tag then
66288: LD_VAR 0 2
66292: PUSH
66293: LD_VAR 0 9
66297: GREATER
66298: IFFALSE 66506
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
66300: LD_ADDR_VAR 0 6
66304: PUSH
66305: LD_VAR 0 5
66309: PPUSH
66310: LD_INT 91
66312: PUSH
66313: LD_VAR 0 4
66317: PUSH
66318: LD_INT 8
66320: PUSH
66321: EMPTY
66322: LIST
66323: LIST
66324: LIST
66325: PPUSH
66326: CALL_OW 72
66330: ST_TO_ADDR
// if nearEnemy then
66331: LD_VAR 0 6
66335: IFFALSE 66404
// begin if GetWeapon ( i ) = ru_time_lapser then
66337: LD_VAR 0 4
66341: PPUSH
66342: CALL_OW 264
66346: PUSH
66347: LD_INT 49
66349: EQUAL
66350: IFFALSE 66378
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
66352: LD_VAR 0 4
66356: PPUSH
66357: LD_VAR 0 6
66361: PPUSH
66362: LD_VAR 0 4
66366: PPUSH
66367: CALL_OW 74
66371: PPUSH
66372: CALL_OW 112
66376: GO 66402
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
66378: LD_VAR 0 4
66382: PPUSH
66383: LD_VAR 0 6
66387: PPUSH
66388: LD_VAR 0 4
66392: PPUSH
66393: CALL_OW 74
66397: PPUSH
66398: CALL_OW 115
// end else
66402: GO 66504
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
66404: LD_VAR 0 4
66408: PPUSH
66409: LD_VAR 0 2
66413: PUSH
66414: LD_VAR 0 9
66418: ARRAY
66419: PUSH
66420: LD_INT 1
66422: ARRAY
66423: PPUSH
66424: LD_VAR 0 2
66428: PUSH
66429: LD_VAR 0 9
66433: ARRAY
66434: PUSH
66435: LD_INT 2
66437: ARRAY
66438: PPUSH
66439: CALL_OW 297
66443: PUSH
66444: LD_INT 6
66446: GREATER
66447: IFFALSE 66490
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
66449: LD_VAR 0 4
66453: PPUSH
66454: LD_VAR 0 2
66458: PUSH
66459: LD_VAR 0 9
66463: ARRAY
66464: PUSH
66465: LD_INT 1
66467: ARRAY
66468: PPUSH
66469: LD_VAR 0 2
66473: PUSH
66474: LD_VAR 0 9
66478: ARRAY
66479: PUSH
66480: LD_INT 2
66482: ARRAY
66483: PPUSH
66484: CALL_OW 114
66488: GO 66504
// SetTag ( i , tag ) ;
66490: LD_VAR 0 4
66494: PPUSH
66495: LD_VAR 0 9
66499: PPUSH
66500: CALL_OW 109
// end else
66504: GO 66577
// if enemy then
66506: LD_VAR 0 5
66510: IFFALSE 66577
// begin if GetWeapon ( i ) = ru_time_lapser then
66512: LD_VAR 0 4
66516: PPUSH
66517: CALL_OW 264
66521: PUSH
66522: LD_INT 49
66524: EQUAL
66525: IFFALSE 66553
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
66527: LD_VAR 0 4
66531: PPUSH
66532: LD_VAR 0 5
66536: PPUSH
66537: LD_VAR 0 4
66541: PPUSH
66542: CALL_OW 74
66546: PPUSH
66547: CALL_OW 112
66551: GO 66577
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
66553: LD_VAR 0 4
66557: PPUSH
66558: LD_VAR 0 5
66562: PPUSH
66563: LD_VAR 0 4
66567: PPUSH
66568: CALL_OW 74
66572: PPUSH
66573: CALL_OW 115
// end ; end ;
66577: GO 66157
66579: POP
66580: POP
// end ;
66581: LD_VAR 0 3
66585: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
66586: LD_INT 0
66588: PPUSH
66589: PPUSH
66590: PPUSH
// if not unit or IsInUnit ( unit ) then
66591: LD_VAR 0 1
66595: NOT
66596: PUSH
66597: LD_VAR 0 1
66601: PPUSH
66602: CALL_OW 310
66606: OR
66607: IFFALSE 66611
// exit ;
66609: GO 66702
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
66611: LD_ADDR_VAR 0 4
66615: PUSH
66616: LD_VAR 0 1
66620: PPUSH
66621: CALL_OW 250
66625: PPUSH
66626: LD_VAR 0 2
66630: PPUSH
66631: LD_INT 1
66633: PPUSH
66634: CALL_OW 272
66638: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
66639: LD_ADDR_VAR 0 5
66643: PUSH
66644: LD_VAR 0 1
66648: PPUSH
66649: CALL_OW 251
66653: PPUSH
66654: LD_VAR 0 2
66658: PPUSH
66659: LD_INT 1
66661: PPUSH
66662: CALL_OW 273
66666: ST_TO_ADDR
// if ValidHex ( x , y ) then
66667: LD_VAR 0 4
66671: PPUSH
66672: LD_VAR 0 5
66676: PPUSH
66677: CALL_OW 488
66681: IFFALSE 66702
// ComTurnXY ( unit , x , y ) ;
66683: LD_VAR 0 1
66687: PPUSH
66688: LD_VAR 0 4
66692: PPUSH
66693: LD_VAR 0 5
66697: PPUSH
66698: CALL_OW 118
// end ;
66702: LD_VAR 0 3
66706: RET
// export function SeeUnits ( side , units ) ; var i ; begin
66707: LD_INT 0
66709: PPUSH
66710: PPUSH
// result := false ;
66711: LD_ADDR_VAR 0 3
66715: PUSH
66716: LD_INT 0
66718: ST_TO_ADDR
// if not units then
66719: LD_VAR 0 2
66723: NOT
66724: IFFALSE 66728
// exit ;
66726: GO 66773
// for i in units do
66728: LD_ADDR_VAR 0 4
66732: PUSH
66733: LD_VAR 0 2
66737: PUSH
66738: FOR_IN
66739: IFFALSE 66771
// if See ( side , i ) then
66741: LD_VAR 0 1
66745: PPUSH
66746: LD_VAR 0 4
66750: PPUSH
66751: CALL_OW 292
66755: IFFALSE 66769
// begin result := true ;
66757: LD_ADDR_VAR 0 3
66761: PUSH
66762: LD_INT 1
66764: ST_TO_ADDR
// exit ;
66765: POP
66766: POP
66767: GO 66773
// end ;
66769: GO 66738
66771: POP
66772: POP
// end ;
66773: LD_VAR 0 3
66777: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
66778: LD_INT 0
66780: PPUSH
66781: PPUSH
66782: PPUSH
66783: PPUSH
// if not unit or not points then
66784: LD_VAR 0 1
66788: NOT
66789: PUSH
66790: LD_VAR 0 2
66794: NOT
66795: OR
66796: IFFALSE 66800
// exit ;
66798: GO 66890
// dist := 99999 ;
66800: LD_ADDR_VAR 0 5
66804: PUSH
66805: LD_INT 99999
66807: ST_TO_ADDR
// for i in points do
66808: LD_ADDR_VAR 0 4
66812: PUSH
66813: LD_VAR 0 2
66817: PUSH
66818: FOR_IN
66819: IFFALSE 66888
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
66821: LD_ADDR_VAR 0 6
66825: PUSH
66826: LD_VAR 0 1
66830: PPUSH
66831: LD_VAR 0 4
66835: PUSH
66836: LD_INT 1
66838: ARRAY
66839: PPUSH
66840: LD_VAR 0 4
66844: PUSH
66845: LD_INT 2
66847: ARRAY
66848: PPUSH
66849: CALL_OW 297
66853: ST_TO_ADDR
// if tmpDist < dist then
66854: LD_VAR 0 6
66858: PUSH
66859: LD_VAR 0 5
66863: LESS
66864: IFFALSE 66886
// begin result := i ;
66866: LD_ADDR_VAR 0 3
66870: PUSH
66871: LD_VAR 0 4
66875: ST_TO_ADDR
// dist := tmpDist ;
66876: LD_ADDR_VAR 0 5
66880: PUSH
66881: LD_VAR 0 6
66885: ST_TO_ADDR
// end ; end ;
66886: GO 66818
66888: POP
66889: POP
// end ;
66890: LD_VAR 0 3
66894: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
66895: LD_INT 0
66897: PPUSH
// uc_side := side ;
66898: LD_ADDR_OWVAR 20
66902: PUSH
66903: LD_VAR 0 1
66907: ST_TO_ADDR
// uc_nation := 3 ;
66908: LD_ADDR_OWVAR 21
66912: PUSH
66913: LD_INT 3
66915: ST_TO_ADDR
// vc_chassis := 25 ;
66916: LD_ADDR_OWVAR 37
66920: PUSH
66921: LD_INT 25
66923: ST_TO_ADDR
// vc_engine := engine_siberite ;
66924: LD_ADDR_OWVAR 39
66928: PUSH
66929: LD_INT 3
66931: ST_TO_ADDR
// vc_control := control_computer ;
66932: LD_ADDR_OWVAR 38
66936: PUSH
66937: LD_INT 3
66939: ST_TO_ADDR
// vc_weapon := 59 ;
66940: LD_ADDR_OWVAR 40
66944: PUSH
66945: LD_INT 59
66947: ST_TO_ADDR
// result := CreateVehicle ;
66948: LD_ADDR_VAR 0 5
66952: PUSH
66953: CALL_OW 45
66957: ST_TO_ADDR
// SetDir ( result , d ) ;
66958: LD_VAR 0 5
66962: PPUSH
66963: LD_VAR 0 4
66967: PPUSH
66968: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
66972: LD_VAR 0 5
66976: PPUSH
66977: LD_VAR 0 2
66981: PPUSH
66982: LD_VAR 0 3
66986: PPUSH
66987: LD_INT 0
66989: PPUSH
66990: CALL_OW 48
// end ;
66994: LD_VAR 0 5
66998: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
66999: LD_INT 0
67001: PPUSH
67002: PPUSH
67003: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
67004: LD_ADDR_VAR 0 2
67008: PUSH
67009: LD_INT 0
67011: PUSH
67012: LD_INT 0
67014: PUSH
67015: LD_INT 0
67017: PUSH
67018: LD_INT 0
67020: PUSH
67021: EMPTY
67022: LIST
67023: LIST
67024: LIST
67025: LIST
67026: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
67027: LD_VAR 0 1
67031: NOT
67032: PUSH
67033: LD_VAR 0 1
67037: PPUSH
67038: CALL_OW 264
67042: PUSH
67043: LD_INT 12
67045: PUSH
67046: LD_INT 51
67048: PUSH
67049: LD_INT 32
67051: PUSH
67052: LD_INT 89
67054: PUSH
67055: EMPTY
67056: LIST
67057: LIST
67058: LIST
67059: LIST
67060: IN
67061: NOT
67062: OR
67063: IFFALSE 67067
// exit ;
67065: GO 67165
// for i := 1 to 3 do
67067: LD_ADDR_VAR 0 3
67071: PUSH
67072: DOUBLE
67073: LD_INT 1
67075: DEC
67076: ST_TO_ADDR
67077: LD_INT 3
67079: PUSH
67080: FOR_TO
67081: IFFALSE 67163
// begin tmp := GetCargo ( cargo , i ) ;
67083: LD_ADDR_VAR 0 4
67087: PUSH
67088: LD_VAR 0 1
67092: PPUSH
67093: LD_VAR 0 3
67097: PPUSH
67098: CALL_OW 289
67102: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
67103: LD_ADDR_VAR 0 2
67107: PUSH
67108: LD_VAR 0 2
67112: PPUSH
67113: LD_VAR 0 3
67117: PPUSH
67118: LD_VAR 0 4
67122: PPUSH
67123: CALL_OW 1
67127: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
67128: LD_ADDR_VAR 0 2
67132: PUSH
67133: LD_VAR 0 2
67137: PPUSH
67138: LD_INT 4
67140: PPUSH
67141: LD_VAR 0 2
67145: PUSH
67146: LD_INT 4
67148: ARRAY
67149: PUSH
67150: LD_VAR 0 4
67154: PLUS
67155: PPUSH
67156: CALL_OW 1
67160: ST_TO_ADDR
// end ;
67161: GO 67080
67163: POP
67164: POP
// end ;
67165: LD_VAR 0 2
67169: RET
// export function Length ( array ) ; begin
67170: LD_INT 0
67172: PPUSH
// result := array + 0 ;
67173: LD_ADDR_VAR 0 2
67177: PUSH
67178: LD_VAR 0 1
67182: PUSH
67183: LD_INT 0
67185: PLUS
67186: ST_TO_ADDR
// end ;
67187: LD_VAR 0 2
67191: RET
// export function PrepareArray ( array ) ; begin
67192: LD_INT 0
67194: PPUSH
// result := array diff 0 ;
67195: LD_ADDR_VAR 0 2
67199: PUSH
67200: LD_VAR 0 1
67204: PUSH
67205: LD_INT 0
67207: DIFF
67208: ST_TO_ADDR
// if not result [ 1 ] then
67209: LD_VAR 0 2
67213: PUSH
67214: LD_INT 1
67216: ARRAY
67217: NOT
67218: IFFALSE 67238
// result := Delete ( result , 1 ) ;
67220: LD_ADDR_VAR 0 2
67224: PUSH
67225: LD_VAR 0 2
67229: PPUSH
67230: LD_INT 1
67232: PPUSH
67233: CALL_OW 3
67237: ST_TO_ADDR
// end ;
67238: LD_VAR 0 2
67242: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
67243: LD_INT 0
67245: PPUSH
67246: PPUSH
67247: PPUSH
67248: PPUSH
// sibRocketRange := 25 ;
67249: LD_ADDR_VAR 0 6
67253: PUSH
67254: LD_INT 25
67256: ST_TO_ADDR
// result := false ;
67257: LD_ADDR_VAR 0 4
67261: PUSH
67262: LD_INT 0
67264: ST_TO_ADDR
// for i := 0 to 5 do
67265: LD_ADDR_VAR 0 5
67269: PUSH
67270: DOUBLE
67271: LD_INT 0
67273: DEC
67274: ST_TO_ADDR
67275: LD_INT 5
67277: PUSH
67278: FOR_TO
67279: IFFALSE 67346
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
67281: LD_VAR 0 1
67285: PPUSH
67286: LD_VAR 0 5
67290: PPUSH
67291: LD_VAR 0 6
67295: PPUSH
67296: CALL_OW 272
67300: PPUSH
67301: LD_VAR 0 2
67305: PPUSH
67306: LD_VAR 0 5
67310: PPUSH
67311: LD_VAR 0 6
67315: PPUSH
67316: CALL_OW 273
67320: PPUSH
67321: LD_VAR 0 3
67325: PPUSH
67326: CALL_OW 309
67330: IFFALSE 67344
// begin result := true ;
67332: LD_ADDR_VAR 0 4
67336: PUSH
67337: LD_INT 1
67339: ST_TO_ADDR
// exit ;
67340: POP
67341: POP
67342: GO 67348
// end ;
67344: GO 67278
67346: POP
67347: POP
// end ;
67348: LD_VAR 0 4
67352: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
67353: LD_INT 0
67355: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
67356: LD_VAR 0 1
67360: PPUSH
67361: LD_VAR 0 2
67365: PPUSH
67366: LD_INT 0
67368: PPUSH
67369: LD_INT 0
67371: PPUSH
67372: LD_INT 1
67374: PPUSH
67375: LD_INT 0
67377: PPUSH
67378: CALL_OW 587
// end ; end_of_file
67382: LD_VAR 0 3
67386: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
67387: LD_VAR 0 1
67391: PPUSH
67392: LD_VAR 0 2
67396: PPUSH
67397: LD_VAR 0 3
67401: PPUSH
67402: LD_VAR 0 4
67406: PPUSH
67407: LD_VAR 0 5
67411: PPUSH
67412: LD_VAR 0 6
67416: PPUSH
67417: CALL 6006 0 6
// end ;
67421: PPOPN 6
67423: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
67424: LD_INT 0
67426: PPUSH
// begin if not units then
67427: LD_VAR 0 1
67431: NOT
67432: IFFALSE 67436
// exit ;
67434: GO 67436
// end ;
67436: PPOPN 7
67438: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
67439: CALL 5900 0 0
// end ; end_of_file
67443: PPOPN 1
67445: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
67446: LD_VAR 0 1
67450: PUSH
67451: LD_INT 200
67453: DOUBLE
67454: GREATEREQUAL
67455: IFFALSE 67463
67457: LD_INT 299
67459: DOUBLE
67460: LESSEQUAL
67461: IFTRUE 67465
67463: GO 67497
67465: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
67466: LD_VAR 0 1
67470: PPUSH
67471: LD_VAR 0 2
67475: PPUSH
67476: LD_VAR 0 3
67480: PPUSH
67481: LD_VAR 0 4
67485: PPUSH
67486: LD_VAR 0 5
67490: PPUSH
67491: CALL 22053 0 5
67495: GO 67574
67497: LD_INT 300
67499: DOUBLE
67500: GREATEREQUAL
67501: IFFALSE 67509
67503: LD_INT 399
67505: DOUBLE
67506: LESSEQUAL
67507: IFTRUE 67511
67509: GO 67573
67511: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
67512: LD_VAR 0 1
67516: PPUSH
67517: LD_VAR 0 2
67521: PPUSH
67522: LD_VAR 0 3
67526: PPUSH
67527: LD_VAR 0 4
67531: PPUSH
67532: LD_VAR 0 5
67536: PPUSH
67537: LD_VAR 0 6
67541: PPUSH
67542: LD_VAR 0 7
67546: PPUSH
67547: LD_VAR 0 8
67551: PPUSH
67552: LD_VAR 0 9
67556: PPUSH
67557: LD_VAR 0 10
67561: PPUSH
67562: LD_VAR 0 11
67566: PPUSH
67567: CALL 18386 0 11
67571: GO 67574
67573: POP
// end ;
67574: PPOPN 11
67576: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
67577: LD_VAR 0 1
67581: PPUSH
67582: LD_VAR 0 2
67586: PPUSH
67587: LD_VAR 0 3
67591: PPUSH
67592: LD_VAR 0 4
67596: PPUSH
67597: LD_VAR 0 5
67601: PPUSH
67602: CALL 21789 0 5
// end ;
67606: PPOPN 5
67608: END
