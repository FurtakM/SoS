// export JMM , Gladstone , Denis , Lisa , Frank , Bobby , Cyrus , Brown , Donaldson ; export others , randomsDelta ; export apemans , yourApemans ; export yourVehicles ; export DeltaDoctor ; export Harisson ; export selectedPeople ; export baseCorrect ; export cutscene ; export lab ; export resources ; export mission_prefix , mission_prefix_prev ; starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// FogOff ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 344
// baseCorrect = 0 ;
  15: LD_ADDR_EXP 18
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// cutscene = 1 ;
  23: LD_ADDR_EXP 19
  27: PUSH
  28: LD_INT 1
  30: ST_TO_ADDR
// apemans = [ ] ;
  31: LD_ADDR_EXP 12
  35: PUSH
  36: EMPTY
  37: ST_TO_ADDR
// yourApemans = [ ] ;
  38: LD_ADDR_EXP 13
  42: PUSH
  43: EMPTY
  44: ST_TO_ADDR
// yourVehicles = [ ] ;
  45: LD_ADDR_EXP 14
  49: PUSH
  50: EMPTY
  51: ST_TO_ADDR
// randomsDelta := [ ] ;
  52: LD_ADDR_EXP 11
  56: PUSH
  57: EMPTY
  58: ST_TO_ADDR
// resources = [ ] ;
  59: LD_ADDR_EXP 21
  63: PUSH
  64: EMPTY
  65: ST_TO_ADDR
// mission_prefix := 06_ ;
  66: LD_ADDR_EXP 22
  70: PUSH
  71: LD_STRING 06_
  73: ST_TO_ADDR
// mission_prefix_prev := 05_ ;
  74: LD_ADDR_EXP 23
  78: PUSH
  79: LD_STRING 05_
  81: ST_TO_ADDR
// CreateNature ;
  82: CALL 166 0 0
// PrepareDeltaBase ;
  86: CALL 2408 0 0
// LoadVehicles ;
  90: CALL 1448 0 0
// PrepareHeroes ;
  94: CALL 287 0 0
// PrepareRandoms ;
  98: CALL 1749 0 0
// lab = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
 102: LD_ADDR_EXP 20
 106: PUSH
 107: LD_INT 22
 109: PUSH
 110: LD_INT 1
 112: PUSH
 113: EMPTY
 114: LIST
 115: LIST
 116: PUSH
 117: LD_INT 2
 119: PUSH
 120: LD_INT 30
 122: PUSH
 123: LD_INT 6
 125: PUSH
 126: EMPTY
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 30
 132: PUSH
 133: LD_INT 7
 135: PUSH
 136: EMPTY
 137: LIST
 138: LIST
 139: PUSH
 140: LD_INT 30
 142: PUSH
 143: LD_INT 8
 145: PUSH
 146: EMPTY
 147: LIST
 148: LIST
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: LIST
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: PPUSH
 160: CALL_OW 69
 164: ST_TO_ADDR
// end ;
 165: END
// export function CreateNature ; var i ; begin
 166: LD_INT 0
 168: PPUSH
 169: PPUSH
// uc_side := 0 ;
 170: LD_ADDR_OWVAR 20
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// uc_nation := 0 ;
 178: LD_ADDR_OWVAR 21
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// for i = 1 to 4 do
 186: LD_ADDR_VAR 0 2
 190: PUSH
 191: DOUBLE
 192: LD_INT 1
 194: DEC
 195: ST_TO_ADDR
 196: LD_INT 4
 198: PUSH
 199: FOR_TO
 200: IFFALSE 280
// begin hc_gallery :=  ;
 202: LD_ADDR_OWVAR 33
 206: PUSH
 207: LD_STRING 
 209: ST_TO_ADDR
// hc_name :=  ;
 210: LD_ADDR_OWVAR 26
 214: PUSH
 215: LD_STRING 
 217: ST_TO_ADDR
// hc_attr := [ rand ( 10 , 11 ) , rand ( 10 , 12 ) ] ;
 218: LD_ADDR_OWVAR 29
 222: PUSH
 223: LD_INT 10
 225: PPUSH
 226: LD_INT 11
 228: PPUSH
 229: CALL_OW 12
 233: PUSH
 234: LD_INT 10
 236: PPUSH
 237: LD_INT 12
 239: PPUSH
 240: CALL_OW 12
 244: PUSH
 245: EMPTY
 246: LIST
 247: LIST
 248: ST_TO_ADDR
// hc_class := class_apeman ;
 249: LD_ADDR_OWVAR 28
 253: PUSH
 254: LD_INT 12
 256: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , 22 , 18 , 20 , false ) ;
 257: CALL_OW 44
 261: PPUSH
 262: LD_INT 22
 264: PPUSH
 265: LD_INT 18
 267: PPUSH
 268: LD_INT 20
 270: PPUSH
 271: LD_INT 0
 273: PPUSH
 274: CALL_OW 50
// end ;
 278: GO 199
 280: POP
 281: POP
// end ; end_of_file
 282: LD_VAR 0 1
 286: RET
// export function PrepareHeroes ; var i , tmp , ape , test ; begin
 287: LD_INT 0
 289: PPUSH
 290: PPUSH
 291: PPUSH
 292: PPUSH
 293: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
 294: LD_ADDR_VAR 0 3
 298: PUSH
 299: LD_INT 22
 301: PUSH
 302: LD_INT 1
 304: PUSH
 305: EMPTY
 306: LIST
 307: LIST
 308: PUSH
 309: LD_INT 21
 311: PUSH
 312: LD_INT 3
 314: PUSH
 315: EMPTY
 316: LIST
 317: LIST
 318: PUSH
 319: LD_INT 30
 321: PUSH
 322: LD_INT 0
 324: PUSH
 325: EMPTY
 326: LIST
 327: LIST
 328: PUSH
 329: EMPTY
 330: LIST
 331: LIST
 332: LIST
 333: PPUSH
 334: CALL_OW 69
 338: ST_TO_ADDR
// SetBName ( tmp [ 1 ] , delta ) ;
 339: LD_VAR 0 3
 343: PUSH
 344: LD_INT 1
 346: ARRAY
 347: PPUSH
 348: LD_STRING delta
 350: PPUSH
 351: CALL_OW 500
// uc_side = 1 ;
 355: LD_ADDR_OWVAR 20
 359: PUSH
 360: LD_INT 1
 362: ST_TO_ADDR
// uc_nation = 1 ;
 363: LD_ADDR_OWVAR 21
 367: PUSH
 368: LD_INT 1
 370: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true , mission_prefix_prev ) ;
 371: LD_ADDR_EXP 1
 375: PUSH
 376: LD_STRING JMM
 378: PPUSH
 379: LD_INT 1
 381: PPUSH
 382: LD_EXP 23
 386: PPUSH
 387: CALL 23172 0 3
 391: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ,  ) ;
 392: LD_ADDR_EXP 16
 396: PUSH
 397: LD_STRING Harisson
 399: PPUSH
 400: LD_INT 0
 402: PPUSH
 403: LD_STRING 
 405: PPUSH
 406: CALL 23172 0 3
 410: ST_TO_ADDR
// PlaceUnitXYR ( JMM , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 411: LD_EXP 1
 415: PPUSH
 416: LD_VAR 0 3
 420: PUSH
 421: LD_INT 1
 423: ARRAY
 424: PPUSH
 425: CALL_OW 250
 429: PPUSH
 430: LD_VAR 0 3
 434: PUSH
 435: LD_INT 1
 437: ARRAY
 438: PPUSH
 439: CALL_OW 251
 443: PPUSH
 444: LD_INT 5
 446: PPUSH
 447: LD_INT 0
 449: PPUSH
 450: CALL_OW 50
// SetClass ( JMM , 1 ) ;
 454: LD_EXP 1
 458: PPUSH
 459: LD_INT 1
 461: PPUSH
 462: CALL_OW 336
// Gladstone = PrepareUnit ( Gladstone , true , mission_prefix_prev ) ;
 466: LD_ADDR_EXP 2
 470: PUSH
 471: LD_STRING Gladstone
 473: PPUSH
 474: LD_INT 1
 476: PPUSH
 477: LD_EXP 23
 481: PPUSH
 482: CALL 23172 0 3
 486: ST_TO_ADDR
// PlaceUnitXYR ( Gladstone , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 487: LD_EXP 2
 491: PPUSH
 492: LD_VAR 0 3
 496: PUSH
 497: LD_INT 1
 499: ARRAY
 500: PPUSH
 501: CALL_OW 250
 505: PPUSH
 506: LD_VAR 0 3
 510: PUSH
 511: LD_INT 1
 513: ARRAY
 514: PPUSH
 515: CALL_OW 251
 519: PPUSH
 520: LD_INT 5
 522: PPUSH
 523: LD_INT 0
 525: PPUSH
 526: CALL_OW 50
// SetClass ( Gladstone , 4 ) ;
 530: LD_EXP 2
 534: PPUSH
 535: LD_INT 4
 537: PPUSH
 538: CALL_OW 336
// Denis = PrepareUnit ( Denis , true , mission_prefix_prev ) ;
 542: LD_ADDR_EXP 3
 546: PUSH
 547: LD_STRING Denis
 549: PPUSH
 550: LD_INT 1
 552: PPUSH
 553: LD_EXP 23
 557: PPUSH
 558: CALL 23172 0 3
 562: ST_TO_ADDR
// PlaceUnitXYR ( Denis , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 563: LD_EXP 3
 567: PPUSH
 568: LD_VAR 0 3
 572: PUSH
 573: LD_INT 1
 575: ARRAY
 576: PPUSH
 577: CALL_OW 250
 581: PPUSH
 582: LD_VAR 0 3
 586: PUSH
 587: LD_INT 1
 589: ARRAY
 590: PPUSH
 591: CALL_OW 251
 595: PPUSH
 596: LD_INT 5
 598: PPUSH
 599: LD_INT 0
 601: PPUSH
 602: CALL_OW 50
// SetClass ( Denis , 4 ) ;
 606: LD_EXP 3
 610: PPUSH
 611: LD_INT 4
 613: PPUSH
 614: CALL_OW 336
// if LoadVariable ( FrankInDelta , 0 ) = 1 then
 618: LD_STRING FrankInDelta
 620: PPUSH
 621: LD_INT 0
 623: PPUSH
 624: CALL_OW 30
 628: PUSH
 629: LD_INT 1
 631: EQUAL
 632: IFFALSE 710
// begin Frank = PrepareUnit ( Frank , true , mission_prefix_prev ) ;
 634: LD_ADDR_EXP 5
 638: PUSH
 639: LD_STRING Frank
 641: PPUSH
 642: LD_INT 1
 644: PPUSH
 645: LD_EXP 23
 649: PPUSH
 650: CALL 23172 0 3
 654: ST_TO_ADDR
// PlaceUnitXYR ( Frank , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 655: LD_EXP 5
 659: PPUSH
 660: LD_VAR 0 3
 664: PUSH
 665: LD_INT 1
 667: ARRAY
 668: PPUSH
 669: CALL_OW 250
 673: PPUSH
 674: LD_VAR 0 3
 678: PUSH
 679: LD_INT 1
 681: ARRAY
 682: PPUSH
 683: CALL_OW 251
 687: PPUSH
 688: LD_INT 5
 690: PPUSH
 691: LD_INT 0
 693: PPUSH
 694: CALL_OW 50
// SetClass ( Frank , 1 ) ;
 698: LD_EXP 5
 702: PPUSH
 703: LD_INT 1
 705: PPUSH
 706: CALL_OW 336
// end ; if LoadVariable ( LisaInDelta , 0 ) = 1 then
 710: LD_STRING LisaInDelta
 712: PPUSH
 713: LD_INT 0
 715: PPUSH
 716: CALL_OW 30
 720: PUSH
 721: LD_INT 1
 723: EQUAL
 724: IFFALSE 802
// begin Lisa = PrepareUnit ( Lisa , true , mission_prefix_prev ) ;
 726: LD_ADDR_EXP 4
 730: PUSH
 731: LD_STRING Lisa
 733: PPUSH
 734: LD_INT 1
 736: PPUSH
 737: LD_EXP 23
 741: PPUSH
 742: CALL 23172 0 3
 746: ST_TO_ADDR
// PlaceUnitXYR ( Lisa , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 747: LD_EXP 4
 751: PPUSH
 752: LD_VAR 0 3
 756: PUSH
 757: LD_INT 1
 759: ARRAY
 760: PPUSH
 761: CALL_OW 250
 765: PPUSH
 766: LD_VAR 0 3
 770: PUSH
 771: LD_INT 1
 773: ARRAY
 774: PPUSH
 775: CALL_OW 251
 779: PPUSH
 780: LD_INT 5
 782: PPUSH
 783: LD_INT 0
 785: PPUSH
 786: CALL_OW 50
// SetClass ( Lisa , 1 ) ;
 790: LD_EXP 4
 794: PPUSH
 795: LD_INT 1
 797: PPUSH
 798: CALL_OW 336
// end ; if LoadVariable ( BobbyInDelta , 0 ) = 1 then
 802: LD_STRING BobbyInDelta
 804: PPUSH
 805: LD_INT 0
 807: PPUSH
 808: CALL_OW 30
 812: PUSH
 813: LD_INT 1
 815: EQUAL
 816: IFFALSE 894
// begin Bobby = PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 818: LD_ADDR_EXP 6
 822: PUSH
 823: LD_STRING Bobby
 825: PPUSH
 826: LD_INT 1
 828: PPUSH
 829: LD_EXP 23
 833: PPUSH
 834: CALL 23172 0 3
 838: ST_TO_ADDR
// PlaceUnitXYR ( Bobby , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 839: LD_EXP 6
 843: PPUSH
 844: LD_VAR 0 3
 848: PUSH
 849: LD_INT 1
 851: ARRAY
 852: PPUSH
 853: CALL_OW 250
 857: PPUSH
 858: LD_VAR 0 3
 862: PUSH
 863: LD_INT 1
 865: ARRAY
 866: PPUSH
 867: CALL_OW 251
 871: PPUSH
 872: LD_INT 5
 874: PPUSH
 875: LD_INT 0
 877: PPUSH
 878: CALL_OW 50
// SetClass ( Bobby , 1 ) ;
 882: LD_EXP 6
 886: PPUSH
 887: LD_INT 1
 889: PPUSH
 890: CALL_OW 336
// end ; if LoadVariable ( CyrusInDelta , 0 ) = 1 then
 894: LD_STRING CyrusInDelta
 896: PPUSH
 897: LD_INT 0
 899: PPUSH
 900: CALL_OW 30
 904: PUSH
 905: LD_INT 1
 907: EQUAL
 908: IFFALSE 986
// begin Cyrus = PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
 910: LD_ADDR_EXP 7
 914: PUSH
 915: LD_STRING Cyrus
 917: PPUSH
 918: LD_INT 1
 920: PPUSH
 921: LD_EXP 23
 925: PPUSH
 926: CALL 23172 0 3
 930: ST_TO_ADDR
// PlaceUnitXYR ( Cyrus , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 931: LD_EXP 7
 935: PPUSH
 936: LD_VAR 0 3
 940: PUSH
 941: LD_INT 1
 943: ARRAY
 944: PPUSH
 945: CALL_OW 250
 949: PPUSH
 950: LD_VAR 0 3
 954: PUSH
 955: LD_INT 1
 957: ARRAY
 958: PPUSH
 959: CALL_OW 251
 963: PPUSH
 964: LD_INT 5
 966: PPUSH
 967: LD_INT 0
 969: PPUSH
 970: CALL_OW 50
// SetClass ( Cyrus , 1 ) ;
 974: LD_EXP 7
 978: PPUSH
 979: LD_INT 1
 981: PPUSH
 982: CALL_OW 336
// end ; if LoadVariable ( DonaldsonInDelta , 0 ) = 1 then
 986: LD_STRING DonaldsonInDelta
 988: PPUSH
 989: LD_INT 0
 991: PPUSH
 992: CALL_OW 30
 996: PUSH
 997: LD_INT 1
 999: EQUAL
1000: IFFALSE 1078
// begin Donaldson = PrepareUnit ( Donaldson , true , mission_prefix_prev ) ;
1002: LD_ADDR_EXP 9
1006: PUSH
1007: LD_STRING Donaldson
1009: PPUSH
1010: LD_INT 1
1012: PPUSH
1013: LD_EXP 23
1017: PPUSH
1018: CALL 23172 0 3
1022: ST_TO_ADDR
// PlaceUnitXYR ( Donaldson , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1023: LD_EXP 9
1027: PPUSH
1028: LD_VAR 0 3
1032: PUSH
1033: LD_INT 1
1035: ARRAY
1036: PPUSH
1037: CALL_OW 250
1041: PPUSH
1042: LD_VAR 0 3
1046: PUSH
1047: LD_INT 1
1049: ARRAY
1050: PPUSH
1051: CALL_OW 251
1055: PPUSH
1056: LD_INT 5
1058: PPUSH
1059: LD_INT 0
1061: PPUSH
1062: CALL_OW 50
// SetClass ( Donaldson , 1 ) ;
1066: LD_EXP 9
1070: PPUSH
1071: LD_INT 1
1073: PPUSH
1074: CALL_OW 336
// end ; if LoadVariable ( BrownInDelta , 0 ) = 1 then
1078: LD_STRING BrownInDelta
1080: PPUSH
1081: LD_INT 0
1083: PPUSH
1084: CALL_OW 30
1088: PUSH
1089: LD_INT 1
1091: EQUAL
1092: IFFALSE 1170
// begin Brown = PrepareUnit ( Brown , true , mission_prefix_prev ) ;
1094: LD_ADDR_EXP 8
1098: PUSH
1099: LD_STRING Brown
1101: PPUSH
1102: LD_INT 1
1104: PPUSH
1105: LD_EXP 23
1109: PPUSH
1110: CALL 23172 0 3
1114: ST_TO_ADDR
// PlaceUnitXYR ( Brown , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1115: LD_EXP 8
1119: PPUSH
1120: LD_VAR 0 3
1124: PUSH
1125: LD_INT 1
1127: ARRAY
1128: PPUSH
1129: CALL_OW 250
1133: PPUSH
1134: LD_VAR 0 3
1138: PUSH
1139: LD_INT 1
1141: ARRAY
1142: PPUSH
1143: CALL_OW 251
1147: PPUSH
1148: LD_INT 5
1150: PPUSH
1151: LD_INT 0
1153: PPUSH
1154: CALL_OW 50
// SetClass ( Brown , 2 ) ;
1158: LD_EXP 8
1162: PPUSH
1163: LD_INT 2
1165: PPUSH
1166: CALL_OW 336
// end ; others = CreateCharacterSet ( othersInDelta ) ;
1170: LD_ADDR_EXP 10
1174: PUSH
1175: LD_STRING othersInDelta
1177: PPUSH
1178: CALL_OW 31
1182: ST_TO_ADDR
// for i in others do
1183: LD_ADDR_VAR 0 2
1187: PUSH
1188: LD_EXP 10
1192: PUSH
1193: FOR_IN
1194: IFFALSE 1241
// PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1196: LD_VAR 0 2
1200: PPUSH
1201: LD_VAR 0 3
1205: PUSH
1206: LD_INT 1
1208: ARRAY
1209: PPUSH
1210: CALL_OW 250
1214: PPUSH
1215: LD_VAR 0 3
1219: PUSH
1220: LD_INT 1
1222: ARRAY
1223: PPUSH
1224: CALL_OW 251
1228: PPUSH
1229: LD_INT 35
1231: PPUSH
1232: LD_INT 0
1234: PPUSH
1235: CALL_OW 50
1239: GO 1193
1241: POP
1242: POP
// apemans = CreateCharacterSet ( apeInDelta ) ;
1243: LD_ADDR_EXP 12
1247: PUSH
1248: LD_STRING apeInDelta
1250: PPUSH
1251: CALL_OW 31
1255: ST_TO_ADDR
// uc_nation = 0 ;
1256: LD_ADDR_OWVAR 21
1260: PUSH
1261: LD_INT 0
1263: ST_TO_ADDR
// if apemans > 5 then
1264: LD_EXP 12
1268: PUSH
1269: LD_INT 5
1271: GREATER
1272: IFFALSE 1367
// begin for i := 1 to 5 do
1274: LD_ADDR_VAR 0 2
1278: PUSH
1279: DOUBLE
1280: LD_INT 1
1282: DEC
1283: ST_TO_ADDR
1284: LD_INT 5
1286: PUSH
1287: FOR_TO
1288: IFFALSE 1363
// begin PlaceUnitXYR ( apemans [ i ] , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1290: LD_EXP 12
1294: PUSH
1295: LD_VAR 0 2
1299: ARRAY
1300: PPUSH
1301: LD_VAR 0 3
1305: PUSH
1306: LD_INT 1
1308: ARRAY
1309: PPUSH
1310: CALL_OW 250
1314: PPUSH
1315: LD_VAR 0 3
1319: PUSH
1320: LD_INT 1
1322: ARRAY
1323: PPUSH
1324: CALL_OW 251
1328: PPUSH
1329: LD_INT 50
1331: PPUSH
1332: LD_INT 0
1334: PPUSH
1335: CALL_OW 50
// yourApemans = yourApemans ^ apemans [ i ] ;
1339: LD_ADDR_EXP 13
1343: PUSH
1344: LD_EXP 13
1348: PUSH
1349: LD_EXP 12
1353: PUSH
1354: LD_VAR 0 2
1358: ARRAY
1359: ADD
1360: ST_TO_ADDR
// end ;
1361: GO 1287
1363: POP
1364: POP
// end else
1365: GO 1443
// begin for i in apemans do
1367: LD_ADDR_VAR 0 2
1371: PUSH
1372: LD_EXP 12
1376: PUSH
1377: FOR_IN
1378: IFFALSE 1441
// begin PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1380: LD_VAR 0 2
1384: PPUSH
1385: LD_VAR 0 3
1389: PUSH
1390: LD_INT 1
1392: ARRAY
1393: PPUSH
1394: CALL_OW 250
1398: PPUSH
1399: LD_VAR 0 3
1403: PUSH
1404: LD_INT 1
1406: ARRAY
1407: PPUSH
1408: CALL_OW 251
1412: PPUSH
1413: LD_INT 50
1415: PPUSH
1416: LD_INT 0
1418: PPUSH
1419: CALL_OW 50
// yourApemans = yourApemans ^ i ;
1423: LD_ADDR_EXP 13
1427: PUSH
1428: LD_EXP 13
1432: PUSH
1433: LD_VAR 0 2
1437: ADD
1438: ST_TO_ADDR
// end ;
1439: GO 1377
1441: POP
1442: POP
// end ; end ;
1443: LD_VAR 0 1
1447: RET
// export function LoadVehicles ; var i , veh , tmp , vehicles ; begin
1448: LD_INT 0
1450: PPUSH
1451: PPUSH
1452: PPUSH
1453: PPUSH
1454: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1455: LD_ADDR_VAR 0 4
1459: PUSH
1460: LD_INT 22
1462: PUSH
1463: LD_INT 1
1465: PUSH
1466: EMPTY
1467: LIST
1468: LIST
1469: PUSH
1470: LD_INT 21
1472: PUSH
1473: LD_INT 3
1475: PUSH
1476: EMPTY
1477: LIST
1478: LIST
1479: PUSH
1480: LD_INT 30
1482: PUSH
1483: LD_INT 0
1485: PUSH
1486: EMPTY
1487: LIST
1488: LIST
1489: PUSH
1490: EMPTY
1491: LIST
1492: LIST
1493: LIST
1494: PPUSH
1495: CALL_OW 69
1499: ST_TO_ADDR
// uc_side = 1 ;
1500: LD_ADDR_OWVAR 20
1504: PUSH
1505: LD_INT 1
1507: ST_TO_ADDR
// vehicles = LoadVariable ( vehiclesInDelta , [ ] ) ;
1508: LD_ADDR_VAR 0 5
1512: PUSH
1513: LD_STRING vehiclesInDelta
1515: PPUSH
1516: EMPTY
1517: PPUSH
1518: CALL_OW 30
1522: ST_TO_ADDR
// for i = 1 to vehicles do
1523: LD_ADDR_VAR 0 2
1527: PUSH
1528: DOUBLE
1529: LD_INT 1
1531: DEC
1532: ST_TO_ADDR
1533: LD_VAR 0 5
1537: PUSH
1538: FOR_TO
1539: IFFALSE 1742
// begin if vehicles [ i + 4 ] = 11 or vehicles [ i ] = 3 then
1541: LD_VAR 0 5
1545: PUSH
1546: LD_VAR 0 2
1550: PUSH
1551: LD_INT 4
1553: PLUS
1554: ARRAY
1555: PUSH
1556: LD_INT 11
1558: EQUAL
1559: PUSH
1560: LD_VAR 0 5
1564: PUSH
1565: LD_VAR 0 2
1569: ARRAY
1570: PUSH
1571: LD_INT 3
1573: EQUAL
1574: OR
1575: IFFALSE 1726
// begin uc_nation = vehicles [ i ] ;
1577: LD_ADDR_OWVAR 21
1581: PUSH
1582: LD_VAR 0 5
1586: PUSH
1587: LD_VAR 0 2
1591: ARRAY
1592: ST_TO_ADDR
// vc_chassis = vehicles [ i + 1 ] ;
1593: LD_ADDR_OWVAR 37
1597: PUSH
1598: LD_VAR 0 5
1602: PUSH
1603: LD_VAR 0 2
1607: PUSH
1608: LD_INT 1
1610: PLUS
1611: ARRAY
1612: ST_TO_ADDR
// vc_engine = vehicles [ i + 2 ] ;
1613: LD_ADDR_OWVAR 39
1617: PUSH
1618: LD_VAR 0 5
1622: PUSH
1623: LD_VAR 0 2
1627: PUSH
1628: LD_INT 2
1630: PLUS
1631: ARRAY
1632: ST_TO_ADDR
// vc_control = vehicles [ i + 3 ] ;
1633: LD_ADDR_OWVAR 38
1637: PUSH
1638: LD_VAR 0 5
1642: PUSH
1643: LD_VAR 0 2
1647: PUSH
1648: LD_INT 3
1650: PLUS
1651: ARRAY
1652: ST_TO_ADDR
// vc_weapon = vehicles [ i + 4 ] ;
1653: LD_ADDR_OWVAR 40
1657: PUSH
1658: LD_VAR 0 5
1662: PUSH
1663: LD_VAR 0 2
1667: PUSH
1668: LD_INT 4
1670: PLUS
1671: ARRAY
1672: ST_TO_ADDR
// veh = CreateVehicle ;
1673: LD_ADDR_VAR 0 3
1677: PUSH
1678: CALL_OW 45
1682: ST_TO_ADDR
// PlaceUnitXYR ( veh , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 40 , false ) ;
1683: LD_VAR 0 3
1687: PPUSH
1688: LD_VAR 0 4
1692: PUSH
1693: LD_INT 1
1695: ARRAY
1696: PPUSH
1697: CALL_OW 250
1701: PPUSH
1702: LD_VAR 0 4
1706: PUSH
1707: LD_INT 1
1709: ARRAY
1710: PPUSH
1711: CALL_OW 251
1715: PPUSH
1716: LD_INT 40
1718: PPUSH
1719: LD_INT 0
1721: PPUSH
1722: CALL_OW 50
// end ; i = i + 4 ;
1726: LD_ADDR_VAR 0 2
1730: PUSH
1731: LD_VAR 0 2
1735: PUSH
1736: LD_INT 4
1738: PLUS
1739: ST_TO_ADDR
// end ;
1740: GO 1538
1742: POP
1743: POP
// end ;
1744: LD_VAR 0 1
1748: RET
// export function PrepareRandoms ; var i , un , tmp , filter ; begin
1749: LD_INT 0
1751: PPUSH
1752: PPUSH
1753: PPUSH
1754: PPUSH
1755: PPUSH
// uc_side = 1 ;
1756: LD_ADDR_OWVAR 20
1760: PUSH
1761: LD_INT 1
1763: ST_TO_ADDR
// uc_nation = 1 ;
1764: LD_ADDR_OWVAR 21
1768: PUSH
1769: LD_INT 1
1771: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1772: LD_ADDR_VAR 0 4
1776: PUSH
1777: LD_INT 22
1779: PUSH
1780: LD_INT 1
1782: PUSH
1783: EMPTY
1784: LIST
1785: LIST
1786: PUSH
1787: LD_INT 21
1789: PUSH
1790: LD_INT 3
1792: PUSH
1793: EMPTY
1794: LIST
1795: LIST
1796: PUSH
1797: LD_INT 30
1799: PUSH
1800: LD_INT 0
1802: PUSH
1803: EMPTY
1804: LIST
1805: LIST
1806: PUSH
1807: EMPTY
1808: LIST
1809: LIST
1810: LIST
1811: PPUSH
1812: CALL_OW 69
1816: ST_TO_ADDR
// if FilterAllunits ( [ [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] then
1817: LD_INT 22
1819: PUSH
1820: LD_INT 1
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: PUSH
1827: LD_INT 25
1829: PUSH
1830: LD_INT 4
1832: PUSH
1833: EMPTY
1834: LIST
1835: LIST
1836: PUSH
1837: LD_INT 26
1839: PUSH
1840: LD_INT 1
1842: PUSH
1843: EMPTY
1844: LIST
1845: LIST
1846: PUSH
1847: EMPTY
1848: LIST
1849: LIST
1850: LIST
1851: PUSH
1852: EMPTY
1853: LIST
1854: PPUSH
1855: CALL_OW 69
1859: PUSH
1860: LD_EXP 1
1864: PUSH
1865: LD_EXP 7
1869: PUSH
1870: LD_EXP 6
1874: PUSH
1875: LD_EXP 5
1879: PUSH
1880: LD_EXP 2
1884: PUSH
1885: LD_EXP 3
1889: PUSH
1890: LD_EXP 8
1894: PUSH
1895: EMPTY
1896: LIST
1897: LIST
1898: LIST
1899: LIST
1900: LIST
1901: LIST
1902: LIST
1903: DIFF
1904: IFFALSE 2005
// deltaDoctor := ( FilterAllunits ( [ [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] ) [ 1 ] else
1906: LD_ADDR_EXP 15
1910: PUSH
1911: LD_INT 22
1913: PUSH
1914: LD_INT 1
1916: PUSH
1917: EMPTY
1918: LIST
1919: LIST
1920: PUSH
1921: LD_INT 25
1923: PUSH
1924: LD_INT 4
1926: PUSH
1927: EMPTY
1928: LIST
1929: LIST
1930: PUSH
1931: LD_INT 26
1933: PUSH
1934: LD_INT 1
1936: PUSH
1937: EMPTY
1938: LIST
1939: LIST
1940: PUSH
1941: EMPTY
1942: LIST
1943: LIST
1944: LIST
1945: PUSH
1946: EMPTY
1947: LIST
1948: PPUSH
1949: CALL_OW 69
1953: PUSH
1954: LD_EXP 1
1958: PUSH
1959: LD_EXP 7
1963: PUSH
1964: LD_EXP 6
1968: PUSH
1969: LD_EXP 5
1973: PUSH
1974: LD_EXP 2
1978: PUSH
1979: LD_EXP 3
1983: PUSH
1984: LD_EXP 8
1988: PUSH
1989: EMPTY
1990: LIST
1991: LIST
1992: LIST
1993: LIST
1994: LIST
1995: LIST
1996: LIST
1997: DIFF
1998: PUSH
1999: LD_INT 1
2001: ARRAY
2002: ST_TO_ADDR
2003: GO 2152
// begin filter := FilterAllunits ( [ [ [ f_side , 1 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] ;
2005: LD_ADDR_VAR 0 5
2009: PUSH
2010: LD_INT 22
2012: PUSH
2013: LD_INT 1
2015: PUSH
2016: EMPTY
2017: LIST
2018: LIST
2019: PUSH
2020: LD_INT 26
2022: PUSH
2023: LD_INT 1
2025: PUSH
2026: EMPTY
2027: LIST
2028: LIST
2029: PUSH
2030: EMPTY
2031: LIST
2032: LIST
2033: PUSH
2034: EMPTY
2035: LIST
2036: PPUSH
2037: CALL_OW 69
2041: PUSH
2042: LD_EXP 1
2046: PUSH
2047: LD_EXP 7
2051: PUSH
2052: LD_EXP 6
2056: PUSH
2057: LD_EXP 5
2061: PUSH
2062: LD_EXP 2
2066: PUSH
2067: LD_EXP 3
2071: PUSH
2072: LD_EXP 8
2076: PUSH
2077: EMPTY
2078: LIST
2079: LIST
2080: LIST
2081: LIST
2082: LIST
2083: LIST
2084: LIST
2085: DIFF
2086: ST_TO_ADDR
// if filter then
2087: LD_VAR 0 5
2091: IFFALSE 2152
// for i in filter do
2093: LD_ADDR_VAR 0 2
2097: PUSH
2098: LD_VAR 0 5
2102: PUSH
2103: FOR_IN
2104: IFFALSE 2150
// if GetSkill ( i , 4 ) >= 4 then
2106: LD_VAR 0 2
2110: PPUSH
2111: LD_INT 4
2113: PPUSH
2114: CALL_OW 259
2118: PUSH
2119: LD_INT 4
2121: GREATEREQUAL
2122: IFFALSE 2148
// begin deltaDoctor := i ;
2124: LD_ADDR_EXP 15
2128: PUSH
2129: LD_VAR 0 2
2133: ST_TO_ADDR
// SetClass ( deltaDoctor , 4 ) ;
2134: LD_EXP 15
2138: PPUSH
2139: LD_INT 4
2141: PPUSH
2142: CALL_OW 336
// break ;
2146: GO 2150
// end ;
2148: GO 2103
2150: POP
2151: POP
// end ; for i = 1 to 7 do
2152: LD_ADDR_VAR 0 2
2156: PUSH
2157: DOUBLE
2158: LD_INT 1
2160: DEC
2161: ST_TO_ADDR
2162: LD_INT 7
2164: PUSH
2165: FOR_TO
2166: IFFALSE 2303
// begin hc_gallery =  ;
2168: LD_ADDR_OWVAR 33
2172: PUSH
2173: LD_STRING 
2175: ST_TO_ADDR
// hc_name =  ;
2176: LD_ADDR_OWVAR 26
2180: PUSH
2181: LD_STRING 
2183: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 3 , 5 ) ) ;
2184: LD_INT 0
2186: PPUSH
2187: LD_INT 1
2189: PUSH
2190: LD_INT 2
2192: PUSH
2193: LD_INT 3
2195: PUSH
2196: LD_INT 4
2198: PUSH
2199: EMPTY
2200: LIST
2201: LIST
2202: LIST
2203: LIST
2204: PUSH
2205: LD_INT 1
2207: PPUSH
2208: LD_INT 4
2210: PPUSH
2211: CALL_OW 12
2215: ARRAY
2216: PPUSH
2217: LD_INT 3
2219: PPUSH
2220: LD_INT 5
2222: PPUSH
2223: CALL_OW 12
2227: PPUSH
2228: CALL_OW 380
// un = CreateHuman ;
2232: LD_ADDR_VAR 0 3
2236: PUSH
2237: CALL_OW 44
2241: ST_TO_ADDR
// randomsDelta := randomsDelta ^ un ;
2242: LD_ADDR_EXP 11
2246: PUSH
2247: LD_EXP 11
2251: PUSH
2252: LD_VAR 0 3
2256: ADD
2257: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
2258: LD_VAR 0 3
2262: PPUSH
2263: LD_VAR 0 4
2267: PUSH
2268: LD_INT 1
2270: ARRAY
2271: PPUSH
2272: CALL_OW 250
2276: PPUSH
2277: LD_VAR 0 4
2281: PUSH
2282: LD_INT 1
2284: ARRAY
2285: PPUSH
2286: CALL_OW 251
2290: PPUSH
2291: LD_INT 15
2293: PPUSH
2294: LD_INT 0
2296: PPUSH
2297: CALL_OW 50
// end ;
2301: GO 2165
2303: POP
2304: POP
// if deltaDoctor then
2305: LD_EXP 15
2309: IFFALSE 2313
// exit ;
2311: GO 2403
// hc_gallery = Dawkins ;
2313: LD_ADDR_OWVAR 33
2317: PUSH
2318: LD_STRING Dawkins
2320: ST_TO_ADDR
// hc_face_number := 1 ;
2321: LD_ADDR_OWVAR 34
2325: PUSH
2326: LD_INT 1
2328: ST_TO_ADDR
// hc_name = Dr. Adam Charles Dawkins ;
2329: LD_ADDR_OWVAR 26
2333: PUSH
2334: LD_STRING Dr. Adam Charles Dawkins
2336: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 6 ) ;
2337: LD_INT 1
2339: PPUSH
2340: LD_INT 4
2342: PPUSH
2343: LD_INT 6
2345: PPUSH
2346: CALL_OW 380
// deltaDoctor = CreateHuman ;
2350: LD_ADDR_EXP 15
2354: PUSH
2355: CALL_OW 44
2359: ST_TO_ADDR
// PlaceUnitXYR ( deltaDoctor , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
2360: LD_EXP 15
2364: PPUSH
2365: LD_VAR 0 4
2369: PUSH
2370: LD_INT 1
2372: ARRAY
2373: PPUSH
2374: CALL_OW 250
2378: PPUSH
2379: LD_VAR 0 4
2383: PUSH
2384: LD_INT 1
2386: ARRAY
2387: PPUSH
2388: CALL_OW 251
2392: PPUSH
2393: LD_INT 5
2395: PPUSH
2396: LD_INT 0
2398: PPUSH
2399: CALL_OW 50
// end ; end_of_file
2403: LD_VAR 0 1
2407: RET
// export function PrepareDeltaBase ; var i , j , building , buildings , lab , tmp ; begin
2408: LD_INT 0
2410: PPUSH
2411: PPUSH
2412: PPUSH
2413: PPUSH
2414: PPUSH
2415: PPUSH
2416: PPUSH
// buildings = LoadVariable ( buildingsInDelta , [ ] ) ;
2417: LD_ADDR_VAR 0 5
2421: PUSH
2422: LD_STRING buildingsInDelta
2424: PPUSH
2425: EMPTY
2426: PPUSH
2427: CALL_OW 30
2431: ST_TO_ADDR
// SetResourceVisibility ( 68 , 40 , 1 ) ;
2432: LD_INT 68
2434: PPUSH
2435: LD_INT 40
2437: PPUSH
2438: LD_INT 1
2440: PPUSH
2441: CALL_OW 441
// uc_side = 1 ;
2445: LD_ADDR_OWVAR 20
2449: PUSH
2450: LD_INT 1
2452: ST_TO_ADDR
// uc_nation = 1 ;
2453: LD_ADDR_OWVAR 21
2457: PUSH
2458: LD_INT 1
2460: ST_TO_ADDR
// for i = 1 to buildings do
2461: LD_ADDR_VAR 0 2
2465: PUSH
2466: DOUBLE
2467: LD_INT 1
2469: DEC
2470: ST_TO_ADDR
2471: LD_VAR 0 5
2475: PUSH
2476: FOR_TO
2477: IFFALSE 2775
// begin bc_type = buildings [ i ] [ 1 ] ;
2479: LD_ADDR_OWVAR 42
2483: PUSH
2484: LD_VAR 0 5
2488: PUSH
2489: LD_VAR 0 2
2493: ARRAY
2494: PUSH
2495: LD_INT 1
2497: ARRAY
2498: ST_TO_ADDR
// bc_level = buildings [ i ] [ 2 ] ;
2499: LD_ADDR_OWVAR 43
2503: PUSH
2504: LD_VAR 0 5
2508: PUSH
2509: LD_VAR 0 2
2513: ARRAY
2514: PUSH
2515: LD_INT 2
2517: ARRAY
2518: ST_TO_ADDR
// if bc_type = b_lab then
2519: LD_OWVAR 42
2523: PUSH
2524: LD_INT 6
2526: EQUAL
2527: IFFALSE 2545
// begin bc_kind1 = b_lab_basic ;
2529: LD_ADDR_OWVAR 44
2533: PUSH
2534: LD_INT 9
2536: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
2537: LD_ADDR_OWVAR 45
2541: PUSH
2542: LD_INT 9
2544: ST_TO_ADDR
// end ; if bc_type = b_lab_half or bc_type = b_lab_full then
2545: LD_OWVAR 42
2549: PUSH
2550: LD_INT 7
2552: EQUAL
2553: PUSH
2554: LD_OWVAR 42
2558: PUSH
2559: LD_INT 8
2561: EQUAL
2562: OR
2563: IFFALSE 2679
// begin if buildings [ i ] [ 6 ] then
2565: LD_VAR 0 5
2569: PUSH
2570: LD_VAR 0 2
2574: ARRAY
2575: PUSH
2576: LD_INT 6
2578: ARRAY
2579: IFFALSE 2601
// bc_kind1 = buildings [ i ] [ 6 ] ;
2581: LD_ADDR_OWVAR 44
2585: PUSH
2586: LD_VAR 0 5
2590: PUSH
2591: LD_VAR 0 2
2595: ARRAY
2596: PUSH
2597: LD_INT 6
2599: ARRAY
2600: ST_TO_ADDR
// if buildings [ i ] [ 7 ] then
2601: LD_VAR 0 5
2605: PUSH
2606: LD_VAR 0 2
2610: ARRAY
2611: PUSH
2612: LD_INT 7
2614: ARRAY
2615: IFFALSE 2637
// bc_kind2 = buildings [ i ] [ 7 ] ;
2617: LD_ADDR_OWVAR 45
2621: PUSH
2622: LD_VAR 0 5
2626: PUSH
2627: LD_VAR 0 2
2631: ARRAY
2632: PUSH
2633: LD_INT 7
2635: ARRAY
2636: ST_TO_ADDR
// if not buildings [ i ] [ 6 ] and not buildings [ i ] [ 7 ] then
2637: LD_VAR 0 5
2641: PUSH
2642: LD_VAR 0 2
2646: ARRAY
2647: PUSH
2648: LD_INT 6
2650: ARRAY
2651: NOT
2652: PUSH
2653: LD_VAR 0 5
2657: PUSH
2658: LD_VAR 0 2
2662: ARRAY
2663: PUSH
2664: LD_INT 7
2666: ARRAY
2667: NOT
2668: AND
2669: IFFALSE 2679
// bc_type := b_lab ;
2671: LD_ADDR_OWVAR 42
2675: PUSH
2676: LD_INT 6
2678: ST_TO_ADDR
// end ; building = CreateAndPlaceBuildingXYD ( buildings [ i ] [ 3 ] , buildings [ i ] [ 4 ] , buildings [ i ] [ 5 ] ) ;
2679: LD_ADDR_VAR 0 4
2683: PUSH
2684: LD_VAR 0 5
2688: PUSH
2689: LD_VAR 0 2
2693: ARRAY
2694: PUSH
2695: LD_INT 3
2697: ARRAY
2698: PPUSH
2699: LD_VAR 0 5
2703: PUSH
2704: LD_VAR 0 2
2708: ARRAY
2709: PUSH
2710: LD_INT 4
2712: ARRAY
2713: PPUSH
2714: LD_VAR 0 5
2718: PUSH
2719: LD_VAR 0 2
2723: ARRAY
2724: PUSH
2725: LD_INT 5
2727: ARRAY
2728: PPUSH
2729: CALL_OW 47
2733: ST_TO_ADDR
// if GetBType ( building ) = b_bunker then
2734: LD_VAR 0 4
2738: PPUSH
2739: CALL_OW 266
2743: PUSH
2744: LD_INT 32
2746: EQUAL
2747: IFFALSE 2773
// PlaceWeaponTurret ( building , buildings [ i ] [ 8 ] ) ;
2749: LD_VAR 0 4
2753: PPUSH
2754: LD_VAR 0 5
2758: PUSH
2759: LD_VAR 0 2
2763: ARRAY
2764: PUSH
2765: LD_INT 8
2767: ARRAY
2768: PPUSH
2769: CALL_OW 431
// end ;
2773: GO 2476
2775: POP
2776: POP
// lab = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
2777: LD_ADDR_VAR 0 6
2781: PUSH
2782: LD_INT 22
2784: PUSH
2785: LD_INT 1
2787: PUSH
2788: EMPTY
2789: LIST
2790: LIST
2791: PUSH
2792: LD_INT 2
2794: PUSH
2795: LD_INT 30
2797: PUSH
2798: LD_INT 6
2800: PUSH
2801: EMPTY
2802: LIST
2803: LIST
2804: PUSH
2805: LD_INT 30
2807: PUSH
2808: LD_INT 7
2810: PUSH
2811: EMPTY
2812: LIST
2813: LIST
2814: PUSH
2815: LD_INT 30
2817: PUSH
2818: LD_INT 8
2820: PUSH
2821: EMPTY
2822: LIST
2823: LIST
2824: PUSH
2825: EMPTY
2826: LIST
2827: LIST
2828: LIST
2829: LIST
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: PPUSH
2835: CALL_OW 69
2839: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) ;
2840: LD_ADDR_VAR 0 7
2844: PUSH
2845: LD_INT 22
2847: PUSH
2848: LD_INT 1
2850: PUSH
2851: EMPTY
2852: LIST
2853: LIST
2854: PUSH
2855: LD_INT 30
2857: PUSH
2858: LD_INT 0
2860: PUSH
2861: EMPTY
2862: LIST
2863: LIST
2864: PUSH
2865: EMPTY
2866: LIST
2867: LIST
2868: PPUSH
2869: CALL_OW 69
2873: ST_TO_ADDR
// if lab > 0 and tmp > 0 then
2874: LD_VAR 0 6
2878: PUSH
2879: LD_INT 0
2881: GREATER
2882: PUSH
2883: LD_VAR 0 7
2887: PUSH
2888: LD_INT 0
2890: GREATER
2891: AND
2892: IFFALSE 2902
// baseCorrect = 1 ;
2894: LD_ADDR_EXP 18
2898: PUSH
2899: LD_INT 1
2901: ST_TO_ADDR
// if baseCorrect = 0 then
2902: LD_EXP 18
2906: PUSH
2907: LD_INT 0
2909: EQUAL
2910: IFFALSE 3283
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
2912: LD_ADDR_VAR 0 2
2916: PUSH
2917: LD_INT 22
2919: PUSH
2920: LD_INT 1
2922: PUSH
2923: EMPTY
2924: LIST
2925: LIST
2926: PUSH
2927: LD_INT 21
2929: PUSH
2930: LD_INT 3
2932: PUSH
2933: EMPTY
2934: LIST
2935: LIST
2936: PUSH
2937: EMPTY
2938: LIST
2939: LIST
2940: PPUSH
2941: CALL_OW 69
2945: PUSH
2946: FOR_IN
2947: IFFALSE 2960
// RemoveUnit ( i ) ;
2949: LD_VAR 0 2
2953: PPUSH
2954: CALL_OW 64
2958: GO 2946
2960: POP
2961: POP
// uc_nation = 1 ;
2962: LD_ADDR_OWVAR 21
2966: PUSH
2967: LD_INT 1
2969: ST_TO_ADDR
// uc_side = 1 ;
2970: LD_ADDR_OWVAR 20
2974: PUSH
2975: LD_INT 1
2977: ST_TO_ADDR
// bc_level = 5 ;
2978: LD_ADDR_OWVAR 43
2982: PUSH
2983: LD_INT 5
2985: ST_TO_ADDR
// bc_type = b_depot ;
2986: LD_ADDR_OWVAR 42
2990: PUSH
2991: LD_INT 0
2993: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 50 , 22 , 0 ) ;
2994: LD_INT 50
2996: PPUSH
2997: LD_INT 22
2999: PPUSH
3000: LD_INT 0
3002: PPUSH
3003: CALL_OW 47
// bc_type = b_bunker ;
3007: LD_ADDR_OWVAR 42
3011: PUSH
3012: LD_INT 32
3014: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( 68 , 24 , 4 ) ;
3015: LD_ADDR_VAR 0 4
3019: PUSH
3020: LD_INT 68
3022: PPUSH
3023: LD_INT 24
3025: PPUSH
3026: LD_INT 4
3028: PPUSH
3029: CALL_OW 47
3033: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ Rand ( 1 , 2 ) ] ) ;
3034: LD_VAR 0 4
3038: PPUSH
3039: LD_INT 4
3041: PUSH
3042: LD_INT 11
3044: PUSH
3045: EMPTY
3046: LIST
3047: LIST
3048: PUSH
3049: LD_INT 1
3051: PPUSH
3052: LD_INT 2
3054: PPUSH
3055: CALL_OW 12
3059: ARRAY
3060: PPUSH
3061: CALL_OW 431
// building = CreateAndPlaceBuildingXYD ( 71 , 34 , 4 ) ;
3065: LD_ADDR_VAR 0 4
3069: PUSH
3070: LD_INT 71
3072: PPUSH
3073: LD_INT 34
3075: PPUSH
3076: LD_INT 4
3078: PPUSH
3079: CALL_OW 47
3083: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ Rand ( 1 , 2 ) ] ) ;
3084: LD_VAR 0 4
3088: PPUSH
3089: LD_INT 4
3091: PUSH
3092: LD_INT 11
3094: PUSH
3095: EMPTY
3096: LIST
3097: LIST
3098: PUSH
3099: LD_INT 1
3101: PPUSH
3102: LD_INT 2
3104: PPUSH
3105: CALL_OW 12
3109: ARRAY
3110: PPUSH
3111: CALL_OW 431
// bc_type = 31 ;
3115: LD_ADDR_OWVAR 42
3119: PUSH
3120: LD_INT 31
3122: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 51 , 7 , 3 ) ;
3123: LD_INT 51
3125: PPUSH
3126: LD_INT 7
3128: PPUSH
3129: LD_INT 3
3131: PPUSH
3132: CALL_OW 47
// bc_type = b_oil_mine ;
3136: LD_ADDR_OWVAR 42
3140: PUSH
3141: LD_INT 29
3143: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 68 , 40 , 1 ) ;
3144: LD_INT 68
3146: PPUSH
3147: LD_INT 40
3149: PPUSH
3150: LD_INT 1
3152: PPUSH
3153: CALL_OW 47
// bc_type = b_workshop ;
3157: LD_ADDR_OWVAR 42
3161: PUSH
3162: LD_INT 2
3164: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 20 , 2 ) ;
3165: LD_INT 38
3167: PPUSH
3168: LD_INT 20
3170: PPUSH
3171: LD_INT 2
3173: PPUSH
3174: CALL_OW 47
// bc_type = b_armoury ;
3178: LD_ADDR_OWVAR 42
3182: PUSH
3183: LD_INT 4
3185: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 20 , 2 ) ;
3186: LD_INT 38
3188: PPUSH
3189: LD_INT 20
3191: PPUSH
3192: LD_INT 2
3194: PPUSH
3195: CALL_OW 47
// bc_type = b_solar_power ;
3199: LD_ADDR_OWVAR 42
3203: PUSH
3204: LD_INT 27
3206: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 46 , 12 , 1 ) ;
3207: LD_INT 46
3209: PPUSH
3210: LD_INT 12
3212: PPUSH
3213: LD_INT 1
3215: PPUSH
3216: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 48 , 11 , 2 ) ;
3220: LD_INT 48
3222: PPUSH
3223: LD_INT 11
3225: PPUSH
3226: LD_INT 2
3228: PPUSH
3229: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 49 , 11 , 3 ) ;
3233: LD_INT 49
3235: PPUSH
3236: LD_INT 11
3238: PPUSH
3239: LD_INT 3
3241: PPUSH
3242: CALL_OW 47
// bc_type = b_lab_half ;
3246: LD_ADDR_OWVAR 42
3250: PUSH
3251: LD_INT 7
3253: ST_TO_ADDR
// bc_kind1 = b_lab_opto ;
3254: LD_ADDR_OWVAR 44
3258: PUSH
3259: LD_INT 15
3261: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
3262: LD_ADDR_OWVAR 45
3266: PUSH
3267: LD_INT 9
3269: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 42 , 15 , 2 ) ;
3270: LD_INT 42
3272: PPUSH
3273: LD_INT 15
3275: PPUSH
3276: LD_INT 2
3278: PPUSH
3279: CALL_OW 47
// end ; end ; end_of_file
3283: LD_VAR 0 1
3287: RET
// every 1 do var i , j , tmp ;
3288: GO 3290
3290: DISABLE
3291: LD_INT 0
3293: PPUSH
3294: PPUSH
3295: PPUSH
// begin InGameOn ;
3296: CALL_OW 8
// CenterNowOnUnits ( lab [ 1 ] ) ;
3300: LD_EXP 20
3304: PUSH
3305: LD_INT 1
3307: ARRAY
3308: PPUSH
3309: CALL_OW 87
// if IsOK ( Denis ) then
3313: LD_EXP 3
3317: PPUSH
3318: CALL_OW 302
3322: IFFALSE 3350
// begin SetTech ( tech_radar , 1 , state_researched ) ;
3324: LD_INT 6
3326: PPUSH
3327: LD_INT 1
3329: PPUSH
3330: LD_INT 2
3332: PPUSH
3333: CALL_OW 322
// SetRestrict ( b_ext_radar , 1 , true ) ;
3337: LD_INT 20
3339: PPUSH
3340: LD_INT 1
3342: PPUSH
3343: LD_INT 1
3345: PPUSH
3346: CALL_OW 324
// end ; CenterNowOnUnits ( JMM ) ;
3350: LD_EXP 1
3354: PPUSH
3355: CALL_OW 87
// ComTurnUnit ( JMM , DeltaDoctor ) ;
3359: LD_EXP 1
3363: PPUSH
3364: LD_EXP 15
3368: PPUSH
3369: CALL_OW 119
// repeat wait ( 0 0$1 ) ;
3373: LD_INT 35
3375: PPUSH
3376: CALL_OW 67
// ComMoveUnit ( DeltaDoctor , JMM ) ;
3380: LD_EXP 15
3384: PPUSH
3385: LD_EXP 1
3389: PPUSH
3390: CALL_OW 112
// until GetDistUnits ( JMM , DeltaDoctor ) < 5 ;
3394: LD_EXP 1
3398: PPUSH
3399: LD_EXP 15
3403: PPUSH
3404: CALL_OW 296
3408: PUSH
3409: LD_INT 5
3411: LESS
3412: IFFALSE 3373
// ComTurnUnit ( DeltaDoctor , JMM ) ;
3414: LD_EXP 15
3418: PPUSH
3419: LD_EXP 1
3423: PPUSH
3424: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
3428: LD_EXP 1
3432: PPUSH
3433: LD_STRING D1-JMM-1
3435: PPUSH
3436: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-1 ) ;
3440: LD_EXP 15
3444: PPUSH
3445: LD_STRING D1-Sci-1
3447: PPUSH
3448: CALL_OW 88
// ComEnterUnit ( [ JMM , DeltaDoctor , Denis ] , lab [ 1 ] ) ;
3452: LD_EXP 1
3456: PUSH
3457: LD_EXP 15
3461: PUSH
3462: LD_EXP 3
3466: PUSH
3467: EMPTY
3468: LIST
3469: LIST
3470: LIST
3471: PPUSH
3472: LD_EXP 20
3476: PUSH
3477: LD_INT 1
3479: ARRAY
3480: PPUSH
3481: CALL_OW 120
// end ;
3485: PPOPN 3
3487: END
// every 0 0$2 trigger IsInUnit ( JMM ) = lab [ 1 ] and IsInUnit ( DeltaDoctor ) = lab [ 1 ] do var i , j , tmp ;
3488: LD_EXP 1
3492: PPUSH
3493: CALL_OW 310
3497: PUSH
3498: LD_EXP 20
3502: PUSH
3503: LD_INT 1
3505: ARRAY
3506: EQUAL
3507: PUSH
3508: LD_EXP 15
3512: PPUSH
3513: CALL_OW 310
3517: PUSH
3518: LD_EXP 20
3522: PUSH
3523: LD_INT 1
3525: ARRAY
3526: EQUAL
3527: AND
3528: IFFALSE 4074
3530: GO 3532
3532: DISABLE
3533: LD_INT 0
3535: PPUSH
3536: PPUSH
3537: PPUSH
// begin CenterNowOnUnits ( lab [ 1 ] ) ;
3538: LD_EXP 20
3542: PUSH
3543: LD_INT 1
3545: ARRAY
3546: PPUSH
3547: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
3551: LD_EXP 1
3555: PPUSH
3556: LD_STRING D1-JMM-2
3558: PPUSH
3559: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-2 ) ;
3563: LD_EXP 15
3567: PPUSH
3568: LD_STRING D1-Sci-2
3570: PPUSH
3571: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
3575: LD_EXP 1
3579: PPUSH
3580: LD_STRING D1-JMM-3
3582: PPUSH
3583: CALL_OW 88
// if IsOK ( Denis ) then
3587: LD_EXP 3
3591: PPUSH
3592: CALL_OW 302
3596: IFFALSE 3612
// Say ( DeltaDoctor , D1-Sci-3 ) else
3598: LD_EXP 15
3602: PPUSH
3603: LD_STRING D1-Sci-3
3605: PPUSH
3606: CALL_OW 88
3610: GO 3624
// Say ( DeltaDoctor , D1-Sci-3a ) ;
3612: LD_EXP 15
3616: PPUSH
3617: LD_STRING D1-Sci-3a
3619: PPUSH
3620: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
3624: LD_EXP 1
3628: PPUSH
3629: LD_STRING D1-JMM-4
3631: PPUSH
3632: CALL_OW 88
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
3636: LD_ADDR_VAR 0 3
3640: PUSH
3641: LD_INT 22
3643: PUSH
3644: LD_INT 1
3646: PUSH
3647: EMPTY
3648: LIST
3649: LIST
3650: PUSH
3651: LD_INT 25
3653: PUSH
3654: LD_INT 4
3656: PUSH
3657: EMPTY
3658: LIST
3659: LIST
3660: PUSH
3661: LD_INT 3
3663: PUSH
3664: LD_INT 54
3666: PUSH
3667: EMPTY
3668: LIST
3669: PUSH
3670: EMPTY
3671: LIST
3672: LIST
3673: PUSH
3674: EMPTY
3675: LIST
3676: LIST
3677: LIST
3678: PPUSH
3679: CALL_OW 69
3683: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 0 ] ) do
3684: LD_ADDR_VAR 0 1
3688: PUSH
3689: LD_INT 22
3691: PUSH
3692: LD_INT 0
3694: PUSH
3695: EMPTY
3696: LIST
3697: LIST
3698: PPUSH
3699: CALL_OW 69
3703: PUSH
3704: FOR_IN
3705: IFFALSE 3755
// for j in tmp do
3707: LD_ADDR_VAR 0 2
3711: PUSH
3712: LD_VAR 0 3
3716: PUSH
3717: FOR_IN
3718: IFFALSE 3751
// AddComTameXY ( j , GetX ( i ) , GetY ( i ) ) ;
3720: LD_VAR 0 2
3724: PPUSH
3725: LD_VAR 0 1
3729: PPUSH
3730: CALL_OW 250
3734: PPUSH
3735: LD_VAR 0 1
3739: PPUSH
3740: CALL_OW 251
3744: PPUSH
3745: CALL_OW 191
3749: GO 3717
3751: POP
3752: POP
3753: GO 3704
3755: POP
3756: POP
// Say ( DeltaDoctor , D1-Sci-4 ) ;
3757: LD_EXP 15
3761: PPUSH
3762: LD_STRING D1-Sci-4
3764: PPUSH
3765: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
3769: LD_EXP 1
3773: PPUSH
3774: LD_STRING D1-JMM-5
3776: PPUSH
3777: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-5 ) ;
3781: LD_EXP 15
3785: PPUSH
3786: LD_STRING D1-Sci-5
3788: PPUSH
3789: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
3793: LD_EXP 1
3797: PPUSH
3798: LD_STRING D1-JMM-6
3800: PPUSH
3801: CALL_OW 88
// SayRadio ( Harisson , D1-Har-6 ) ;
3805: LD_EXP 16
3809: PPUSH
3810: LD_STRING D1-Har-6
3812: PPUSH
3813: CALL_OW 94
// Say ( JMM , D1-JMM-7 ) ;
3817: LD_EXP 1
3821: PPUSH
3822: LD_STRING D1-JMM-7
3824: PPUSH
3825: CALL_OW 88
// SayRadio ( Harisson , D1-Har-7 ) ;
3829: LD_EXP 16
3833: PPUSH
3834: LD_STRING D1-Har-7
3836: PPUSH
3837: CALL_OW 94
// if IsOK ( Denis ) then
3841: LD_EXP 3
3845: PPUSH
3846: CALL_OW 302
3850: IFFALSE 3864
// Say ( JMM , D1-JMM-8 ) ;
3852: LD_EXP 1
3856: PPUSH
3857: LD_STRING D1-JMM-8
3859: PPUSH
3860: CALL_OW 88
// Say ( JMM , D1-JMM-8a ) ;
3864: LD_EXP 1
3868: PPUSH
3869: LD_STRING D1-JMM-8a
3871: PPUSH
3872: CALL_OW 88
// SayRadio ( Harisson , D1-Har-8 ) ;
3876: LD_EXP 16
3880: PPUSH
3881: LD_STRING D1-Har-8
3883: PPUSH
3884: CALL_OW 94
// Say ( JMM , D1-JMM-9 ) ;
3888: LD_EXP 1
3892: PPUSH
3893: LD_STRING D1-JMM-9
3895: PPUSH
3896: CALL_OW 88
// SayRadio ( Harisson , D1-Har-9 ) ;
3900: LD_EXP 16
3904: PPUSH
3905: LD_STRING D1-Har-9
3907: PPUSH
3908: CALL_OW 94
// Say ( JMM , D1-JMM-10 ) ;
3912: LD_EXP 1
3916: PPUSH
3917: LD_STRING D1-JMM-10
3919: PPUSH
3920: CALL_OW 88
// if IsOK ( Denis ) then
3924: LD_EXP 3
3928: PPUSH
3929: CALL_OW 302
3933: IFFALSE 3947
// Say ( JMM , D1-JMM-10a ) ;
3935: LD_EXP 1
3939: PPUSH
3940: LD_STRING D1-JMM-10a
3942: PPUSH
3943: CALL_OW 88
// SelectDeltaCharacters ;
3947: CALL 4433 0 0
// SetResourceType ( GetBase ( lab [ 1 ] ) , 1 , 250 ) ;
3951: LD_EXP 20
3955: PUSH
3956: LD_INT 1
3958: ARRAY
3959: PPUSH
3960: CALL_OW 274
3964: PPUSH
3965: LD_INT 1
3967: PPUSH
3968: LD_INT 250
3970: PPUSH
3971: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) > 0 then
3975: LD_INT 22
3977: PUSH
3978: LD_INT 1
3980: PUSH
3981: EMPTY
3982: LIST
3983: LIST
3984: PUSH
3985: LD_INT 30
3987: PUSH
3988: LD_INT 29
3990: PUSH
3991: EMPTY
3992: LIST
3993: LIST
3994: PUSH
3995: EMPTY
3996: LIST
3997: LIST
3998: PPUSH
3999: CALL_OW 69
4003: PUSH
4004: LD_INT 0
4006: GREATER
4007: IFFALSE 4033
// SetResourceType ( GetBase ( lab [ 1 ] ) , 2 , 300 ) ;
4009: LD_EXP 20
4013: PUSH
4014: LD_INT 1
4016: ARRAY
4017: PPUSH
4018: CALL_OW 274
4022: PPUSH
4023: LD_INT 2
4025: PPUSH
4026: LD_INT 300
4028: PPUSH
4029: CALL_OW 277
// InGameOff ;
4033: CALL_OW 9
// Query ( Q1 ) ;
4037: LD_STRING Q1
4039: PPUSH
4040: CALL_OW 97
// SetAreaMapShow ( ExitArea , 1 ) ;
4044: LD_INT 3
4046: PPUSH
4047: LD_INT 1
4049: PPUSH
4050: CALL_OW 424
// if IsInUnit ( JMM ) then
4054: LD_EXP 1
4058: PPUSH
4059: CALL_OW 310
4063: IFFALSE 4074
// ComExitBuilding ( JMM ) ;
4065: LD_EXP 1
4069: PPUSH
4070: CALL_OW 122
// end ;
4074: PPOPN 3
4076: END
// every 0 0$1 trigger FilterUnitsExceptArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do var i , cargoType ;
4077: LD_INT 3
4079: PPUSH
4080: LD_INT 22
4082: PUSH
4083: LD_INT 1
4085: PUSH
4086: EMPTY
4087: LIST
4088: LIST
4089: PUSH
4090: LD_INT 21
4092: PUSH
4093: LD_INT 1
4095: PUSH
4096: EMPTY
4097: LIST
4098: LIST
4099: PUSH
4100: EMPTY
4101: LIST
4102: LIST
4103: PPUSH
4104: CALL_OW 71
4108: PUSH
4109: LD_INT 0
4111: EQUAL
4112: IFFALSE 4430
4114: GO 4116
4116: DISABLE
4117: LD_INT 0
4119: PPUSH
4120: PPUSH
// begin SaveDeltaCharacters ;
4121: CALL 4787 0 0
// if FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) then
4125: LD_INT 3
4127: PPUSH
4128: LD_INT 21
4130: PUSH
4131: LD_INT 2
4133: PUSH
4134: EMPTY
4135: LIST
4136: LIST
4137: PUSH
4138: LD_INT 3
4140: PUSH
4141: LD_INT 58
4143: PUSH
4144: EMPTY
4145: LIST
4146: PUSH
4147: EMPTY
4148: LIST
4149: LIST
4150: PUSH
4151: EMPTY
4152: LIST
4153: LIST
4154: PPUSH
4155: CALL_OW 70
4159: IFFALSE 4416
// begin for i in FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) do
4161: LD_ADDR_VAR 0 1
4165: PUSH
4166: LD_INT 3
4168: PPUSH
4169: LD_INT 21
4171: PUSH
4172: LD_INT 2
4174: PUSH
4175: EMPTY
4176: LIST
4177: LIST
4178: PUSH
4179: LD_INT 3
4181: PUSH
4182: LD_INT 58
4184: PUSH
4185: EMPTY
4186: LIST
4187: PUSH
4188: EMPTY
4189: LIST
4190: LIST
4191: PUSH
4192: EMPTY
4193: LIST
4194: LIST
4195: PPUSH
4196: CALL_OW 70
4200: PUSH
4201: FOR_IN
4202: IFFALSE 4414
// begin cargoType = GetCargoType ( i ) ;
4204: LD_ADDR_VAR 0 2
4208: PUSH
4209: LD_VAR 0 1
4213: PPUSH
4214: CALL_OW 288
4218: ST_TO_ADDR
// if GetWeapon ( i ) = us_cargo_bay then
4219: LD_VAR 0 1
4223: PPUSH
4224: CALL_OW 264
4228: PUSH
4229: LD_INT 12
4231: EQUAL
4232: IFFALSE 4329
// yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , cargoType , GetCargo ( i , cargoType ) ] ] else
4234: LD_ADDR_EXP 14
4238: PUSH
4239: LD_EXP 14
4243: PUSH
4244: LD_VAR 0 1
4248: PPUSH
4249: CALL_OW 248
4253: PUSH
4254: LD_VAR 0 1
4258: PPUSH
4259: CALL_OW 265
4263: PUSH
4264: LD_VAR 0 1
4268: PPUSH
4269: CALL_OW 262
4273: PUSH
4274: LD_VAR 0 1
4278: PPUSH
4279: CALL_OW 263
4283: PUSH
4284: LD_VAR 0 1
4288: PPUSH
4289: CALL_OW 264
4293: PUSH
4294: LD_VAR 0 2
4298: PUSH
4299: LD_VAR 0 1
4303: PPUSH
4304: LD_VAR 0 2
4308: PPUSH
4309: CALL_OW 289
4313: PUSH
4314: EMPTY
4315: LIST
4316: LIST
4317: LIST
4318: LIST
4319: LIST
4320: LIST
4321: LIST
4322: PUSH
4323: EMPTY
4324: LIST
4325: ADD
4326: ST_TO_ADDR
4327: GO 4400
// yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ] ;
4329: LD_ADDR_EXP 14
4333: PUSH
4334: LD_EXP 14
4338: PUSH
4339: LD_VAR 0 1
4343: PPUSH
4344: CALL_OW 248
4348: PUSH
4349: LD_VAR 0 1
4353: PPUSH
4354: CALL_OW 265
4358: PUSH
4359: LD_VAR 0 1
4363: PPUSH
4364: CALL_OW 262
4368: PUSH
4369: LD_VAR 0 1
4373: PPUSH
4374: CALL_OW 263
4378: PUSH
4379: LD_VAR 0 1
4383: PPUSH
4384: CALL_OW 264
4388: PUSH
4389: EMPTY
4390: LIST
4391: LIST
4392: LIST
4393: LIST
4394: LIST
4395: PUSH
4396: EMPTY
4397: LIST
4398: ADD
4399: ST_TO_ADDR
// SaveVariable ( yourVehicles , 06_VehiclesIn06_1 ) ;
4400: LD_EXP 14
4404: PPUSH
4405: LD_STRING 06_VehiclesIn06_1
4407: PPUSH
4408: CALL_OW 39
// end ;
4412: GO 4201
4414: POP
4415: POP
// end ; SaveCargos ;
4416: CALL 5543 0 0
// ChangeMap ( 6 , %_cont ) ;
4420: LD_INT 6
4422: PPUSH
4423: LD_STRING %_cont
4425: PPUSH
4426: CALL_OW 340
// end ; end_of_file
4430: PPOPN 2
4432: END
// export function SelectDeltaCharacters ; var i , yourPeople ; begin
4433: LD_INT 0
4435: PPUSH
4436: PPUSH
4437: PPUSH
// selectedPeople := [ ] ;
4438: LD_ADDR_EXP 17
4442: PUSH
4443: EMPTY
4444: ST_TO_ADDR
// yourPeople = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , DeltaDoctor , Denis ] ;
4445: LD_ADDR_VAR 0 3
4449: PUSH
4450: LD_INT 22
4452: PUSH
4453: LD_INT 1
4455: PUSH
4456: EMPTY
4457: LIST
4458: LIST
4459: PUSH
4460: LD_INT 21
4462: PUSH
4463: LD_INT 1
4465: PUSH
4466: EMPTY
4467: LIST
4468: LIST
4469: PUSH
4470: LD_INT 2
4472: PUSH
4473: LD_INT 25
4475: PUSH
4476: LD_INT 1
4478: PUSH
4479: EMPTY
4480: LIST
4481: LIST
4482: PUSH
4483: LD_INT 25
4485: PUSH
4486: LD_INT 2
4488: PUSH
4489: EMPTY
4490: LIST
4491: LIST
4492: PUSH
4493: LD_INT 25
4495: PUSH
4496: LD_INT 3
4498: PUSH
4499: EMPTY
4500: LIST
4501: LIST
4502: PUSH
4503: LD_INT 25
4505: PUSH
4506: LD_INT 4
4508: PUSH
4509: EMPTY
4510: LIST
4511: LIST
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: LIST
4517: LIST
4518: LIST
4519: PUSH
4520: EMPTY
4521: LIST
4522: LIST
4523: LIST
4524: PPUSH
4525: CALL_OW 69
4529: PUSH
4530: LD_EXP 1
4534: PUSH
4535: LD_EXP 15
4539: PUSH
4540: LD_EXP 3
4544: PUSH
4545: EMPTY
4546: LIST
4547: LIST
4548: LIST
4549: DIFF
4550: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , 5 , 5 , [ sel_change_class , JMM , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ yourPeople ^ [ sel_dont_change_class , sel_not_changeable , Denis , DeltaDoctor ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
4551: LD_ADDR_EXP 17
4555: PUSH
4556: LD_STRING text
4558: PPUSH
4559: LD_INT 5
4561: PPUSH
4562: LD_INT 5
4564: PPUSH
4565: LD_INT -5
4567: PUSH
4568: LD_EXP 1
4572: PUSH
4573: LD_INT -6
4575: PUSH
4576: LD_INT -2
4578: PUSH
4579: LD_INT -3
4581: PUSH
4582: LD_INT -5
4584: PUSH
4585: EMPTY
4586: LIST
4587: LIST
4588: LIST
4589: LIST
4590: LIST
4591: LIST
4592: PUSH
4593: LD_VAR 0 3
4597: ADD
4598: PUSH
4599: LD_INT -6
4601: PUSH
4602: LD_INT -4
4604: PUSH
4605: LD_EXP 3
4609: PUSH
4610: LD_EXP 15
4614: PUSH
4615: EMPTY
4616: LIST
4617: LIST
4618: LIST
4619: LIST
4620: ADD
4621: PPUSH
4622: LD_INT 1
4624: PUSH
4625: LD_INT 3
4627: PUSH
4628: LD_INT 2
4630: PUSH
4631: LD_INT 1
4633: PUSH
4634: EMPTY
4635: LIST
4636: LIST
4637: PUSH
4638: LD_INT 4
4640: PUSH
4641: EMPTY
4642: LIST
4643: LIST
4644: LIST
4645: LIST
4646: PPUSH
4647: CALL_OW 42
4651: ST_TO_ADDR
// ComStop ( selectedPeople ) ;
4652: LD_EXP 17
4656: PPUSH
4657: CALL_OW 141
// SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 4 ) ;
4661: LD_INT 22
4663: PUSH
4664: LD_INT 1
4666: PUSH
4667: EMPTY
4668: LIST
4669: LIST
4670: PUSH
4671: LD_INT 21
4673: PUSH
4674: LD_INT 1
4676: PUSH
4677: EMPTY
4678: LIST
4679: LIST
4680: PUSH
4681: EMPTY
4682: LIST
4683: LIST
4684: PPUSH
4685: CALL_OW 69
4689: PPUSH
4690: LD_INT 4
4692: PPUSH
4693: CALL_OW 235
// for i in selectedPeople do
4697: LD_ADDR_VAR 0 2
4701: PUSH
4702: LD_EXP 17
4706: PUSH
4707: FOR_IN
4708: IFFALSE 4724
// SetSide ( i , 1 ) ;
4710: LD_VAR 0 2
4714: PPUSH
4715: LD_INT 1
4717: PPUSH
4718: CALL_OW 235
4722: GO 4707
4724: POP
4725: POP
// for i in yourApemans do
4726: LD_ADDR_VAR 0 2
4730: PUSH
4731: LD_EXP 13
4735: PUSH
4736: FOR_IN
4737: IFFALSE 4753
// SetSide ( i , 1 ) ;
4739: LD_VAR 0 2
4743: PPUSH
4744: LD_INT 1
4746: PPUSH
4747: CALL_OW 235
4751: GO 4736
4753: POP
4754: POP
// SetSide ( JMM , 1 ) ;
4755: LD_EXP 1
4759: PPUSH
4760: LD_INT 1
4762: PPUSH
4763: CALL_OW 235
// SetSkill ( yourApemans , 2 , 5 ) ;
4767: LD_EXP 13
4771: PPUSH
4772: LD_INT 2
4774: PPUSH
4775: LD_INT 5
4777: PPUSH
4778: CALL_OW 237
// end ;
4782: LD_VAR 0 1
4786: RET
// export function SaveDeltaCharacters ; begin
4787: LD_INT 0
4789: PPUSH
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
4790: LD_EXP 1
4794: PPUSH
4795: LD_EXP 22
4799: PUSH
4800: LD_STRING JMM
4802: STR
4803: PPUSH
4804: CALL_OW 38
// SaveCharacters ( DeltaDoctor , DeltaDoctor ) ;
4808: LD_EXP 15
4812: PPUSH
4813: LD_STRING DeltaDoctor
4815: PPUSH
4816: CALL_OW 38
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
4820: LD_EXP 3
4824: PPUSH
4825: LD_EXP 22
4829: PUSH
4830: LD_STRING Denis
4832: STR
4833: PPUSH
4834: CALL_OW 38
// if Lisa in selectedPeople then
4838: LD_EXP 4
4842: PUSH
4843: LD_EXP 17
4847: IN
4848: IFFALSE 4880
// begin SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
4850: LD_EXP 4
4854: PPUSH
4855: LD_EXP 22
4859: PUSH
4860: LD_STRING Lisa
4862: STR
4863: PPUSH
4864: CALL_OW 38
// SaveVariable ( 1 , LisaIn06 ) ;
4868: LD_INT 1
4870: PPUSH
4871: LD_STRING LisaIn06
4873: PPUSH
4874: CALL_OW 39
// end else
4878: GO 4901
// if IsOk ( Lisa ) then
4880: LD_EXP 4
4884: PPUSH
4885: CALL_OW 302
4889: IFFALSE 4901
// SaveVariable ( 1 , LisaStayInDelta ) ;
4891: LD_INT 1
4893: PPUSH
4894: LD_STRING LisaStayInDelta
4896: PPUSH
4897: CALL_OW 39
// if Bobby in selectedPeople then
4901: LD_EXP 6
4905: PUSH
4906: LD_EXP 17
4910: IN
4911: IFFALSE 4943
// begin SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
4913: LD_EXP 6
4917: PPUSH
4918: LD_EXP 22
4922: PUSH
4923: LD_STRING Bobby
4925: STR
4926: PPUSH
4927: CALL_OW 38
// SaveVariable ( 1 , BobbyIn06 ) ;
4931: LD_INT 1
4933: PPUSH
4934: LD_STRING BobbyIn06
4936: PPUSH
4937: CALL_OW 39
// end else
4941: GO 4964
// if IsOk ( Bobby ) then
4943: LD_EXP 6
4947: PPUSH
4948: CALL_OW 302
4952: IFFALSE 4964
// SaveVariable ( 1 , BobbyStayInDelta ) ;
4954: LD_INT 1
4956: PPUSH
4957: LD_STRING BobbyStayInDelta
4959: PPUSH
4960: CALL_OW 39
// if Cyrus in selectedPeople then
4964: LD_EXP 7
4968: PUSH
4969: LD_EXP 17
4973: IN
4974: IFFALSE 5006
// begin SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
4976: LD_EXP 7
4980: PPUSH
4981: LD_EXP 22
4985: PUSH
4986: LD_STRING Cyrus
4988: STR
4989: PPUSH
4990: CALL_OW 38
// SaveVariable ( 1 , CyrusIn06 ) ;
4994: LD_INT 1
4996: PPUSH
4997: LD_STRING CyrusIn06
4999: PPUSH
5000: CALL_OW 39
// end else
5004: GO 5027
// if IsOk ( Cyrus ) then
5006: LD_EXP 7
5010: PPUSH
5011: CALL_OW 302
5015: IFFALSE 5027
// SaveVariable ( 1 , CyrusStayInDelta ) ;
5017: LD_INT 1
5019: PPUSH
5020: LD_STRING CyrusStayInDelta
5022: PPUSH
5023: CALL_OW 39
// if Frank in selectedPeople then
5027: LD_EXP 5
5031: PUSH
5032: LD_EXP 17
5036: IN
5037: IFFALSE 5069
// begin SaveCharacters ( Frank , mission_prefix & Frank ) ;
5039: LD_EXP 5
5043: PPUSH
5044: LD_EXP 22
5048: PUSH
5049: LD_STRING Frank
5051: STR
5052: PPUSH
5053: CALL_OW 38
// SaveVariable ( 1 , FrankIn06 ) ;
5057: LD_INT 1
5059: PPUSH
5060: LD_STRING FrankIn06
5062: PPUSH
5063: CALL_OW 39
// end else
5067: GO 5090
// if IsOk ( Frank ) then
5069: LD_EXP 5
5073: PPUSH
5074: CALL_OW 302
5078: IFFALSE 5090
// SaveVariable ( 1 , FrankStayInDelta ) ;
5080: LD_INT 1
5082: PPUSH
5083: LD_STRING FrankStayInDelta
5085: PPUSH
5086: CALL_OW 39
// if Brown in selectedPeople then
5090: LD_EXP 8
5094: PUSH
5095: LD_EXP 17
5099: IN
5100: IFFALSE 5132
// begin SaveCharacters ( Brown , mission_prefix & Brown ) ;
5102: LD_EXP 8
5106: PPUSH
5107: LD_EXP 22
5111: PUSH
5112: LD_STRING Brown
5114: STR
5115: PPUSH
5116: CALL_OW 38
// SaveVariable ( 1 , BrownIn06 ) ;
5120: LD_INT 1
5122: PPUSH
5123: LD_STRING BrownIn06
5125: PPUSH
5126: CALL_OW 39
// end else
5130: GO 5153
// if IsOk ( Brown ) then
5132: LD_EXP 8
5136: PPUSH
5137: CALL_OW 302
5141: IFFALSE 5153
// SaveVariable ( 1 , BrownStayInDelta ) ;
5143: LD_INT 1
5145: PPUSH
5146: LD_STRING BrownStayInDelta
5148: PPUSH
5149: CALL_OW 39
// if Donaldson in selectedPeople then
5153: LD_EXP 9
5157: PUSH
5158: LD_EXP 17
5162: IN
5163: IFFALSE 5195
// begin SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
5165: LD_EXP 9
5169: PPUSH
5170: LD_EXP 22
5174: PUSH
5175: LD_STRING Donaldson
5177: STR
5178: PPUSH
5179: CALL_OW 38
// SaveVariable ( 1 , DonaldsonIn06 ) ;
5183: LD_INT 1
5185: PPUSH
5186: LD_STRING DonaldsonIn06
5188: PPUSH
5189: CALL_OW 39
// end else
5193: GO 5216
// if IsOk ( Donaldson ) then
5195: LD_EXP 9
5199: PPUSH
5200: CALL_OW 302
5204: IFFALSE 5216
// SaveVariable ( 1 , DonaldsonStayInDelta ) ;
5206: LD_INT 1
5208: PPUSH
5209: LD_STRING DonaldsonStayInDelta
5211: PPUSH
5212: CALL_OW 39
// if Gladstone in selectedPeople then
5216: LD_EXP 2
5220: PUSH
5221: LD_EXP 17
5225: IN
5226: IFFALSE 5258
// begin SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
5228: LD_EXP 2
5232: PPUSH
5233: LD_EXP 22
5237: PUSH
5238: LD_STRING Gladstone
5240: STR
5241: PPUSH
5242: CALL_OW 38
// SaveVariable ( 1 , GladstoneIn06 ) ;
5246: LD_INT 1
5248: PPUSH
5249: LD_STRING GladstoneIn06
5251: PPUSH
5252: CALL_OW 39
// end else
5256: GO 5279
// if IsOk ( Gladstone ) then
5258: LD_EXP 2
5262: PPUSH
5263: CALL_OW 302
5267: IFFALSE 5279
// SaveVariable ( 1 , GladstoneStayInDelta ) ;
5269: LD_INT 1
5271: PPUSH
5272: LD_STRING GladstoneStayInDelta
5274: PPUSH
5275: CALL_OW 39
// selectedPeople := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ;
5279: LD_ADDR_EXP 17
5283: PUSH
5284: LD_INT 22
5286: PUSH
5287: LD_INT 1
5289: PUSH
5290: EMPTY
5291: LIST
5292: LIST
5293: PUSH
5294: LD_INT 23
5296: PUSH
5297: LD_INT 1
5299: PUSH
5300: EMPTY
5301: LIST
5302: LIST
5303: PUSH
5304: LD_INT 21
5306: PUSH
5307: LD_INT 1
5309: PUSH
5310: EMPTY
5311: LIST
5312: LIST
5313: PUSH
5314: EMPTY
5315: LIST
5316: LIST
5317: LIST
5318: PPUSH
5319: CALL_OW 69
5323: ST_TO_ADDR
// SaveCharacters ( yourApemans , ApeIn06 ) ;
5324: LD_EXP 13
5328: PPUSH
5329: LD_STRING ApeIn06
5331: PPUSH
5332: CALL_OW 38
// SaveCharacters ( selectedPeople diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis ] , OthersIn06 ) ;
5336: LD_EXP 17
5340: PUSH
5341: LD_EXP 1
5345: PUSH
5346: LD_EXP 4
5350: PUSH
5351: LD_EXP 6
5355: PUSH
5356: LD_EXP 7
5360: PUSH
5361: LD_EXP 5
5365: PUSH
5366: LD_EXP 8
5370: PUSH
5371: LD_EXP 9
5375: PUSH
5376: LD_EXP 2
5380: PUSH
5381: LD_EXP 3
5385: PUSH
5386: EMPTY
5387: LIST
5388: LIST
5389: LIST
5390: LIST
5391: LIST
5392: LIST
5393: LIST
5394: LIST
5395: LIST
5396: DIFF
5397: PPUSH
5398: LD_STRING OthersIn06
5400: PPUSH
5401: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ DeltaDoctor , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis ] , OthersStayInDelta ) ;
5405: LD_INT 22
5407: PUSH
5408: LD_INT 4
5410: PUSH
5411: EMPTY
5412: LIST
5413: LIST
5414: PUSH
5415: LD_INT 2
5417: PUSH
5418: LD_INT 25
5420: PUSH
5421: LD_INT 1
5423: PUSH
5424: EMPTY
5425: LIST
5426: LIST
5427: PUSH
5428: LD_INT 25
5430: PUSH
5431: LD_INT 2
5433: PUSH
5434: EMPTY
5435: LIST
5436: LIST
5437: PUSH
5438: LD_INT 25
5440: PUSH
5441: LD_INT 3
5443: PUSH
5444: EMPTY
5445: LIST
5446: LIST
5447: PUSH
5448: LD_INT 25
5450: PUSH
5451: LD_INT 4
5453: PUSH
5454: EMPTY
5455: LIST
5456: LIST
5457: PUSH
5458: EMPTY
5459: LIST
5460: LIST
5461: LIST
5462: LIST
5463: LIST
5464: PUSH
5465: EMPTY
5466: LIST
5467: LIST
5468: PPUSH
5469: CALL_OW 69
5473: PUSH
5474: LD_EXP 15
5478: PUSH
5479: LD_EXP 4
5483: PUSH
5484: LD_EXP 6
5488: PUSH
5489: LD_EXP 7
5493: PUSH
5494: LD_EXP 5
5498: PUSH
5499: LD_EXP 8
5503: PUSH
5504: LD_EXP 9
5508: PUSH
5509: LD_EXP 2
5513: PUSH
5514: LD_EXP 3
5518: PUSH
5519: EMPTY
5520: LIST
5521: LIST
5522: LIST
5523: LIST
5524: LIST
5525: LIST
5526: LIST
5527: LIST
5528: LIST
5529: DIFF
5530: PPUSH
5531: LD_STRING OthersStayInDelta
5533: PPUSH
5534: CALL_OW 38
// end ;
5538: LD_VAR 0 1
5542: RET
// export function SaveCargos ; var i ; begin
5543: LD_INT 0
5545: PPUSH
5546: PPUSH
// for i in FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) do
5547: LD_ADDR_VAR 0 2
5551: PUSH
5552: LD_INT 3
5554: PPUSH
5555: LD_INT 22
5557: PUSH
5558: LD_INT 1
5560: PUSH
5561: EMPTY
5562: LIST
5563: LIST
5564: PUSH
5565: LD_INT 34
5567: PUSH
5568: LD_INT 12
5570: PUSH
5571: EMPTY
5572: LIST
5573: LIST
5574: PUSH
5575: EMPTY
5576: LIST
5577: LIST
5578: PPUSH
5579: CALL_OW 70
5583: PUSH
5584: FOR_IN
5585: IFFALSE 5613
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
5587: LD_ADDR_EXP 21
5591: PUSH
5592: LD_EXP 21
5596: PUSH
5597: LD_VAR 0 2
5601: PPUSH
5602: CALL 5632 0 1
5606: PUSH
5607: EMPTY
5608: LIST
5609: ADD
5610: ST_TO_ADDR
5611: GO 5584
5613: POP
5614: POP
// SaveVariable ( resources , 06_ResourcesInCargo06_1 ) ;
5615: LD_EXP 21
5619: PPUSH
5620: LD_STRING 06_ResourcesInCargo06_1
5622: PPUSH
5623: CALL_OW 39
// end ;
5627: LD_VAR 0 1
5631: RET
// export function GetMultiCargo ( cargo_bay ) ; begin
5632: LD_INT 0
5634: PPUSH
// result := [ GetCargo ( cargo_bay , mat_cans ) , GetCargo ( cargo_bay , mat_oil ) , GetCargo ( cargo_bay , mat_siberit ) ] ;
5635: LD_ADDR_VAR 0 2
5639: PUSH
5640: LD_VAR 0 1
5644: PPUSH
5645: LD_INT 1
5647: PPUSH
5648: CALL_OW 289
5652: PUSH
5653: LD_VAR 0 1
5657: PPUSH
5658: LD_INT 2
5660: PPUSH
5661: CALL_OW 289
5665: PUSH
5666: LD_VAR 0 1
5670: PPUSH
5671: LD_INT 3
5673: PPUSH
5674: CALL_OW 289
5678: PUSH
5679: EMPTY
5680: LIST
5681: LIST
5682: LIST
5683: ST_TO_ADDR
// end ; end_of_file
5684: LD_VAR 0 2
5688: RET
// on Command ( comandid ) do var i ;
5689: LD_INT 0
5691: PPUSH
// begin if comandid = 65 then
5692: LD_VAR 0 1
5696: PUSH
5697: LD_INT 65
5699: EQUAL
5700: IFFALSE 5741
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
5702: LD_ADDR_VAR 0 2
5706: PUSH
5707: LD_INT 22
5709: PUSH
5710: LD_INT 1
5712: PUSH
5713: EMPTY
5714: LIST
5715: LIST
5716: PUSH
5717: EMPTY
5718: LIST
5719: PPUSH
5720: CALL_OW 69
5724: PUSH
5725: FOR_IN
5726: IFFALSE 5739
// ComStop ( i ) ;
5728: LD_VAR 0 2
5732: PPUSH
5733: CALL_OW 141
5737: GO 5725
5739: POP
5740: POP
// end ;
5741: PPOPN 2
5743: END
// on ApemanTamed ( apeman , human ) do var tmp ;
5744: LD_INT 0
5746: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
5747: LD_ADDR_VAR 0 3
5751: PUSH
5752: LD_INT 22
5754: PUSH
5755: LD_INT 1
5757: PUSH
5758: EMPTY
5759: LIST
5760: LIST
5761: PUSH
5762: LD_INT 21
5764: PUSH
5765: LD_INT 3
5767: PUSH
5768: EMPTY
5769: LIST
5770: LIST
5771: PUSH
5772: LD_INT 30
5774: PUSH
5775: LD_INT 0
5777: PUSH
5778: EMPTY
5779: LIST
5780: LIST
5781: PUSH
5782: EMPTY
5783: LIST
5784: LIST
5785: LIST
5786: PPUSH
5787: CALL_OW 69
5791: ST_TO_ADDR
// ComEnterUnit ( apeman , tmp [ 1 ] ) ;
5792: LD_VAR 0 1
5796: PPUSH
5797: LD_VAR 0 3
5801: PUSH
5802: LD_INT 1
5804: ARRAY
5805: PPUSH
5806: CALL_OW 120
// SetSide ( apeman , 4 ) ;
5810: LD_VAR 0 1
5814: PPUSH
5815: LD_INT 4
5817: PPUSH
5818: CALL_OW 235
// end ; end_of_file
5822: PPOPN 3
5824: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
5825: LD_INT 0
5827: PPUSH
// if p2 = 100 then
5828: LD_VAR 0 2
5832: PUSH
5833: LD_INT 100
5835: EQUAL
5836: IFFALSE 6785
// begin if not StreamModeActive then
5838: LD_EXP 24
5842: NOT
5843: IFFALSE 5853
// StreamModeActive := true ;
5845: LD_ADDR_EXP 24
5849: PUSH
5850: LD_INT 1
5852: ST_TO_ADDR
// if p3 = 0 then
5853: LD_VAR 0 3
5857: PUSH
5858: LD_INT 0
5860: EQUAL
5861: IFFALSE 5867
// InitStreamMode ;
5863: CALL 6945 0 0
// if p3 = 1 then
5867: LD_VAR 0 3
5871: PUSH
5872: LD_INT 1
5874: EQUAL
5875: IFFALSE 5885
// sRocket := true ;
5877: LD_ADDR_EXP 29
5881: PUSH
5882: LD_INT 1
5884: ST_TO_ADDR
// if p3 = 2 then
5885: LD_VAR 0 3
5889: PUSH
5890: LD_INT 2
5892: EQUAL
5893: IFFALSE 5903
// sSpeed := true ;
5895: LD_ADDR_EXP 28
5899: PUSH
5900: LD_INT 1
5902: ST_TO_ADDR
// if p3 = 3 then
5903: LD_VAR 0 3
5907: PUSH
5908: LD_INT 3
5910: EQUAL
5911: IFFALSE 5921
// sEngine := true ;
5913: LD_ADDR_EXP 30
5917: PUSH
5918: LD_INT 1
5920: ST_TO_ADDR
// if p3 = 4 then
5921: LD_VAR 0 3
5925: PUSH
5926: LD_INT 4
5928: EQUAL
5929: IFFALSE 5939
// sSpec := true ;
5931: LD_ADDR_EXP 27
5935: PUSH
5936: LD_INT 1
5938: ST_TO_ADDR
// if p3 = 5 then
5939: LD_VAR 0 3
5943: PUSH
5944: LD_INT 5
5946: EQUAL
5947: IFFALSE 5957
// sLevel := true ;
5949: LD_ADDR_EXP 31
5953: PUSH
5954: LD_INT 1
5956: ST_TO_ADDR
// if p3 = 6 then
5957: LD_VAR 0 3
5961: PUSH
5962: LD_INT 6
5964: EQUAL
5965: IFFALSE 5975
// sArmoury := true ;
5967: LD_ADDR_EXP 32
5971: PUSH
5972: LD_INT 1
5974: ST_TO_ADDR
// if p3 = 7 then
5975: LD_VAR 0 3
5979: PUSH
5980: LD_INT 7
5982: EQUAL
5983: IFFALSE 5993
// sRadar := true ;
5985: LD_ADDR_EXP 33
5989: PUSH
5990: LD_INT 1
5992: ST_TO_ADDR
// if p3 = 8 then
5993: LD_VAR 0 3
5997: PUSH
5998: LD_INT 8
6000: EQUAL
6001: IFFALSE 6011
// sBunker := true ;
6003: LD_ADDR_EXP 34
6007: PUSH
6008: LD_INT 1
6010: ST_TO_ADDR
// if p3 = 9 then
6011: LD_VAR 0 3
6015: PUSH
6016: LD_INT 9
6018: EQUAL
6019: IFFALSE 6029
// sHack := true ;
6021: LD_ADDR_EXP 35
6025: PUSH
6026: LD_INT 1
6028: ST_TO_ADDR
// if p3 = 10 then
6029: LD_VAR 0 3
6033: PUSH
6034: LD_INT 10
6036: EQUAL
6037: IFFALSE 6047
// sFire := true ;
6039: LD_ADDR_EXP 36
6043: PUSH
6044: LD_INT 1
6046: ST_TO_ADDR
// if p3 = 11 then
6047: LD_VAR 0 3
6051: PUSH
6052: LD_INT 11
6054: EQUAL
6055: IFFALSE 6065
// sRefresh := true ;
6057: LD_ADDR_EXP 37
6061: PUSH
6062: LD_INT 1
6064: ST_TO_ADDR
// if p3 = 12 then
6065: LD_VAR 0 3
6069: PUSH
6070: LD_INT 12
6072: EQUAL
6073: IFFALSE 6083
// sExp := true ;
6075: LD_ADDR_EXP 38
6079: PUSH
6080: LD_INT 1
6082: ST_TO_ADDR
// if p3 = 13 then
6083: LD_VAR 0 3
6087: PUSH
6088: LD_INT 13
6090: EQUAL
6091: IFFALSE 6101
// sDepot := true ;
6093: LD_ADDR_EXP 39
6097: PUSH
6098: LD_INT 1
6100: ST_TO_ADDR
// if p3 = 14 then
6101: LD_VAR 0 3
6105: PUSH
6106: LD_INT 14
6108: EQUAL
6109: IFFALSE 6119
// sFlag := true ;
6111: LD_ADDR_EXP 40
6115: PUSH
6116: LD_INT 1
6118: ST_TO_ADDR
// if p3 = 15 then
6119: LD_VAR 0 3
6123: PUSH
6124: LD_INT 15
6126: EQUAL
6127: IFFALSE 6137
// sKamikadze := true ;
6129: LD_ADDR_EXP 48
6133: PUSH
6134: LD_INT 1
6136: ST_TO_ADDR
// if p3 = 16 then
6137: LD_VAR 0 3
6141: PUSH
6142: LD_INT 16
6144: EQUAL
6145: IFFALSE 6155
// sTroll := true ;
6147: LD_ADDR_EXP 49
6151: PUSH
6152: LD_INT 1
6154: ST_TO_ADDR
// if p3 = 17 then
6155: LD_VAR 0 3
6159: PUSH
6160: LD_INT 17
6162: EQUAL
6163: IFFALSE 6173
// sSlow := true ;
6165: LD_ADDR_EXP 50
6169: PUSH
6170: LD_INT 1
6172: ST_TO_ADDR
// if p3 = 18 then
6173: LD_VAR 0 3
6177: PUSH
6178: LD_INT 18
6180: EQUAL
6181: IFFALSE 6191
// sLack := true ;
6183: LD_ADDR_EXP 51
6187: PUSH
6188: LD_INT 1
6190: ST_TO_ADDR
// if p3 = 19 then
6191: LD_VAR 0 3
6195: PUSH
6196: LD_INT 19
6198: EQUAL
6199: IFFALSE 6209
// sTank := true ;
6201: LD_ADDR_EXP 53
6205: PUSH
6206: LD_INT 1
6208: ST_TO_ADDR
// if p3 = 20 then
6209: LD_VAR 0 3
6213: PUSH
6214: LD_INT 20
6216: EQUAL
6217: IFFALSE 6227
// sRemote := true ;
6219: LD_ADDR_EXP 54
6223: PUSH
6224: LD_INT 1
6226: ST_TO_ADDR
// if p3 = 21 then
6227: LD_VAR 0 3
6231: PUSH
6232: LD_INT 21
6234: EQUAL
6235: IFFALSE 6245
// sPowell := true ;
6237: LD_ADDR_EXP 55
6241: PUSH
6242: LD_INT 1
6244: ST_TO_ADDR
// if p3 = 22 then
6245: LD_VAR 0 3
6249: PUSH
6250: LD_INT 22
6252: EQUAL
6253: IFFALSE 6263
// sTeleport := true ;
6255: LD_ADDR_EXP 58
6259: PUSH
6260: LD_INT 1
6262: ST_TO_ADDR
// if p3 = 23 then
6263: LD_VAR 0 3
6267: PUSH
6268: LD_INT 23
6270: EQUAL
6271: IFFALSE 6281
// sOilTower := true ;
6273: LD_ADDR_EXP 60
6277: PUSH
6278: LD_INT 1
6280: ST_TO_ADDR
// if p3 = 24 then
6281: LD_VAR 0 3
6285: PUSH
6286: LD_INT 24
6288: EQUAL
6289: IFFALSE 6299
// sShovel := true ;
6291: LD_ADDR_EXP 61
6295: PUSH
6296: LD_INT 1
6298: ST_TO_ADDR
// if p3 = 25 then
6299: LD_VAR 0 3
6303: PUSH
6304: LD_INT 25
6306: EQUAL
6307: IFFALSE 6317
// sSheik := true ;
6309: LD_ADDR_EXP 62
6313: PUSH
6314: LD_INT 1
6316: ST_TO_ADDR
// if p3 = 26 then
6317: LD_VAR 0 3
6321: PUSH
6322: LD_INT 26
6324: EQUAL
6325: IFFALSE 6335
// sEarthquake := true ;
6327: LD_ADDR_EXP 64
6331: PUSH
6332: LD_INT 1
6334: ST_TO_ADDR
// if p3 = 27 then
6335: LD_VAR 0 3
6339: PUSH
6340: LD_INT 27
6342: EQUAL
6343: IFFALSE 6353
// sAI := true ;
6345: LD_ADDR_EXP 65
6349: PUSH
6350: LD_INT 1
6352: ST_TO_ADDR
// if p3 = 28 then
6353: LD_VAR 0 3
6357: PUSH
6358: LD_INT 28
6360: EQUAL
6361: IFFALSE 6371
// sCargo := true ;
6363: LD_ADDR_EXP 68
6367: PUSH
6368: LD_INT 1
6370: ST_TO_ADDR
// if p3 = 29 then
6371: LD_VAR 0 3
6375: PUSH
6376: LD_INT 29
6378: EQUAL
6379: IFFALSE 6389
// sDLaser := true ;
6381: LD_ADDR_EXP 69
6385: PUSH
6386: LD_INT 1
6388: ST_TO_ADDR
// if p3 = 30 then
6389: LD_VAR 0 3
6393: PUSH
6394: LD_INT 30
6396: EQUAL
6397: IFFALSE 6407
// sExchange := true ;
6399: LD_ADDR_EXP 70
6403: PUSH
6404: LD_INT 1
6406: ST_TO_ADDR
// if p3 = 31 then
6407: LD_VAR 0 3
6411: PUSH
6412: LD_INT 31
6414: EQUAL
6415: IFFALSE 6425
// sFac := true ;
6417: LD_ADDR_EXP 71
6421: PUSH
6422: LD_INT 1
6424: ST_TO_ADDR
// if p3 = 32 then
6425: LD_VAR 0 3
6429: PUSH
6430: LD_INT 32
6432: EQUAL
6433: IFFALSE 6443
// sPower := true ;
6435: LD_ADDR_EXP 72
6439: PUSH
6440: LD_INT 1
6442: ST_TO_ADDR
// if p3 = 33 then
6443: LD_VAR 0 3
6447: PUSH
6448: LD_INT 33
6450: EQUAL
6451: IFFALSE 6461
// sRandom := true ;
6453: LD_ADDR_EXP 73
6457: PUSH
6458: LD_INT 1
6460: ST_TO_ADDR
// if p3 = 34 then
6461: LD_VAR 0 3
6465: PUSH
6466: LD_INT 34
6468: EQUAL
6469: IFFALSE 6479
// sShield := true ;
6471: LD_ADDR_EXP 74
6475: PUSH
6476: LD_INT 1
6478: ST_TO_ADDR
// if p3 = 35 then
6479: LD_VAR 0 3
6483: PUSH
6484: LD_INT 35
6486: EQUAL
6487: IFFALSE 6497
// sTime := true ;
6489: LD_ADDR_EXP 75
6493: PUSH
6494: LD_INT 1
6496: ST_TO_ADDR
// if p3 = 36 then
6497: LD_VAR 0 3
6501: PUSH
6502: LD_INT 36
6504: EQUAL
6505: IFFALSE 6515
// sTools := true ;
6507: LD_ADDR_EXP 76
6511: PUSH
6512: LD_INT 1
6514: ST_TO_ADDR
// if p3 = 101 then
6515: LD_VAR 0 3
6519: PUSH
6520: LD_INT 101
6522: EQUAL
6523: IFFALSE 6533
// sSold := true ;
6525: LD_ADDR_EXP 41
6529: PUSH
6530: LD_INT 1
6532: ST_TO_ADDR
// if p3 = 102 then
6533: LD_VAR 0 3
6537: PUSH
6538: LD_INT 102
6540: EQUAL
6541: IFFALSE 6551
// sDiff := true ;
6543: LD_ADDR_EXP 42
6547: PUSH
6548: LD_INT 1
6550: ST_TO_ADDR
// if p3 = 103 then
6551: LD_VAR 0 3
6555: PUSH
6556: LD_INT 103
6558: EQUAL
6559: IFFALSE 6569
// sFog := true ;
6561: LD_ADDR_EXP 45
6565: PUSH
6566: LD_INT 1
6568: ST_TO_ADDR
// if p3 = 104 then
6569: LD_VAR 0 3
6573: PUSH
6574: LD_INT 104
6576: EQUAL
6577: IFFALSE 6587
// sReset := true ;
6579: LD_ADDR_EXP 46
6583: PUSH
6584: LD_INT 1
6586: ST_TO_ADDR
// if p3 = 105 then
6587: LD_VAR 0 3
6591: PUSH
6592: LD_INT 105
6594: EQUAL
6595: IFFALSE 6605
// sSun := true ;
6597: LD_ADDR_EXP 47
6601: PUSH
6602: LD_INT 1
6604: ST_TO_ADDR
// if p3 = 106 then
6605: LD_VAR 0 3
6609: PUSH
6610: LD_INT 106
6612: EQUAL
6613: IFFALSE 6623
// sTiger := true ;
6615: LD_ADDR_EXP 43
6619: PUSH
6620: LD_INT 1
6622: ST_TO_ADDR
// if p3 = 107 then
6623: LD_VAR 0 3
6627: PUSH
6628: LD_INT 107
6630: EQUAL
6631: IFFALSE 6641
// sBomb := true ;
6633: LD_ADDR_EXP 44
6637: PUSH
6638: LD_INT 1
6640: ST_TO_ADDR
// if p3 = 108 then
6641: LD_VAR 0 3
6645: PUSH
6646: LD_INT 108
6648: EQUAL
6649: IFFALSE 6659
// sWound := true ;
6651: LD_ADDR_EXP 52
6655: PUSH
6656: LD_INT 1
6658: ST_TO_ADDR
// if p3 = 109 then
6659: LD_VAR 0 3
6663: PUSH
6664: LD_INT 109
6666: EQUAL
6667: IFFALSE 6677
// sBetray := true ;
6669: LD_ADDR_EXP 56
6673: PUSH
6674: LD_INT 1
6676: ST_TO_ADDR
// if p3 = 110 then
6677: LD_VAR 0 3
6681: PUSH
6682: LD_INT 110
6684: EQUAL
6685: IFFALSE 6695
// sContamin := true ;
6687: LD_ADDR_EXP 57
6691: PUSH
6692: LD_INT 1
6694: ST_TO_ADDR
// if p3 = 111 then
6695: LD_VAR 0 3
6699: PUSH
6700: LD_INT 111
6702: EQUAL
6703: IFFALSE 6713
// sOil := true ;
6705: LD_ADDR_EXP 59
6709: PUSH
6710: LD_INT 1
6712: ST_TO_ADDR
// if p3 = 112 then
6713: LD_VAR 0 3
6717: PUSH
6718: LD_INT 112
6720: EQUAL
6721: IFFALSE 6731
// sStu := true ;
6723: LD_ADDR_EXP 63
6727: PUSH
6728: LD_INT 1
6730: ST_TO_ADDR
// if p3 = 113 then
6731: LD_VAR 0 3
6735: PUSH
6736: LD_INT 113
6738: EQUAL
6739: IFFALSE 6749
// sBazooka := true ;
6741: LD_ADDR_EXP 66
6745: PUSH
6746: LD_INT 1
6748: ST_TO_ADDR
// if p3 = 114 then
6749: LD_VAR 0 3
6753: PUSH
6754: LD_INT 114
6756: EQUAL
6757: IFFALSE 6767
// sMortar := true ;
6759: LD_ADDR_EXP 67
6763: PUSH
6764: LD_INT 1
6766: ST_TO_ADDR
// if p3 = 115 then
6767: LD_VAR 0 3
6771: PUSH
6772: LD_INT 115
6774: EQUAL
6775: IFFALSE 6785
// sRanger := true ;
6777: LD_ADDR_EXP 77
6781: PUSH
6782: LD_INT 1
6784: ST_TO_ADDR
// end ; if p2 = 101 then
6785: LD_VAR 0 2
6789: PUSH
6790: LD_INT 101
6792: EQUAL
6793: IFFALSE 6921
// begin case p3 of 1 :
6795: LD_VAR 0 3
6799: PUSH
6800: LD_INT 1
6802: DOUBLE
6803: EQUAL
6804: IFTRUE 6808
6806: GO 6815
6808: POP
// hHackUnlimitedResources ; 2 :
6809: CALL 17958 0 0
6813: GO 6921
6815: LD_INT 2
6817: DOUBLE
6818: EQUAL
6819: IFTRUE 6823
6821: GO 6830
6823: POP
// hHackSetLevel10 ; 3 :
6824: CALL 18091 0 0
6828: GO 6921
6830: LD_INT 3
6832: DOUBLE
6833: EQUAL
6834: IFTRUE 6838
6836: GO 6845
6838: POP
// hHackSetLevel10YourUnits ; 4 :
6839: CALL 18176 0 0
6843: GO 6921
6845: LD_INT 4
6847: DOUBLE
6848: EQUAL
6849: IFTRUE 6853
6851: GO 6860
6853: POP
// hHackInvincible ; 5 :
6854: CALL 18624 0 0
6858: GO 6921
6860: LD_INT 5
6862: DOUBLE
6863: EQUAL
6864: IFTRUE 6868
6866: GO 6875
6868: POP
// hHackInvisible ; 6 :
6869: CALL 18735 0 0
6873: GO 6921
6875: LD_INT 6
6877: DOUBLE
6878: EQUAL
6879: IFTRUE 6883
6881: GO 6890
6883: POP
// hHackChangeYourSide ; 7 :
6884: CALL 18792 0 0
6888: GO 6921
6890: LD_INT 7
6892: DOUBLE
6893: EQUAL
6894: IFTRUE 6898
6896: GO 6905
6898: POP
// hHackChangeUnitSide ; 8 :
6899: CALL 18834 0 0
6903: GO 6921
6905: LD_INT 8
6907: DOUBLE
6908: EQUAL
6909: IFTRUE 6913
6911: GO 6920
6913: POP
// hHackFog ; end ;
6914: CALL 18935 0 0
6918: GO 6921
6920: POP
// end ; end ;
6921: LD_VAR 0 7
6925: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
6926: GO 6928
6928: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
6929: LD_STRING initStreamRollete();
6931: PPUSH
6932: CALL_OW 559
// InitStreamMode ;
6936: CALL 6945 0 0
// DefineStreamItems ( ) ;
6940: CALL 7385 0 0
// end ;
6944: END
// function InitStreamMode ; begin
6945: LD_INT 0
6947: PPUSH
// streamModeActive := false ;
6948: LD_ADDR_EXP 24
6952: PUSH
6953: LD_INT 0
6955: ST_TO_ADDR
// normalCounter := 36 ;
6956: LD_ADDR_EXP 25
6960: PUSH
6961: LD_INT 36
6963: ST_TO_ADDR
// hardcoreCounter := 16 ;
6964: LD_ADDR_EXP 26
6968: PUSH
6969: LD_INT 16
6971: ST_TO_ADDR
// sRocket := false ;
6972: LD_ADDR_EXP 29
6976: PUSH
6977: LD_INT 0
6979: ST_TO_ADDR
// sSpeed := false ;
6980: LD_ADDR_EXP 28
6984: PUSH
6985: LD_INT 0
6987: ST_TO_ADDR
// sEngine := false ;
6988: LD_ADDR_EXP 30
6992: PUSH
6993: LD_INT 0
6995: ST_TO_ADDR
// sSpec := false ;
6996: LD_ADDR_EXP 27
7000: PUSH
7001: LD_INT 0
7003: ST_TO_ADDR
// sLevel := false ;
7004: LD_ADDR_EXP 31
7008: PUSH
7009: LD_INT 0
7011: ST_TO_ADDR
// sArmoury := false ;
7012: LD_ADDR_EXP 32
7016: PUSH
7017: LD_INT 0
7019: ST_TO_ADDR
// sRadar := false ;
7020: LD_ADDR_EXP 33
7024: PUSH
7025: LD_INT 0
7027: ST_TO_ADDR
// sBunker := false ;
7028: LD_ADDR_EXP 34
7032: PUSH
7033: LD_INT 0
7035: ST_TO_ADDR
// sHack := false ;
7036: LD_ADDR_EXP 35
7040: PUSH
7041: LD_INT 0
7043: ST_TO_ADDR
// sFire := false ;
7044: LD_ADDR_EXP 36
7048: PUSH
7049: LD_INT 0
7051: ST_TO_ADDR
// sRefresh := false ;
7052: LD_ADDR_EXP 37
7056: PUSH
7057: LD_INT 0
7059: ST_TO_ADDR
// sExp := false ;
7060: LD_ADDR_EXP 38
7064: PUSH
7065: LD_INT 0
7067: ST_TO_ADDR
// sDepot := false ;
7068: LD_ADDR_EXP 39
7072: PUSH
7073: LD_INT 0
7075: ST_TO_ADDR
// sFlag := false ;
7076: LD_ADDR_EXP 40
7080: PUSH
7081: LD_INT 0
7083: ST_TO_ADDR
// sKamikadze := false ;
7084: LD_ADDR_EXP 48
7088: PUSH
7089: LD_INT 0
7091: ST_TO_ADDR
// sTroll := false ;
7092: LD_ADDR_EXP 49
7096: PUSH
7097: LD_INT 0
7099: ST_TO_ADDR
// sSlow := false ;
7100: LD_ADDR_EXP 50
7104: PUSH
7105: LD_INT 0
7107: ST_TO_ADDR
// sLack := false ;
7108: LD_ADDR_EXP 51
7112: PUSH
7113: LD_INT 0
7115: ST_TO_ADDR
// sTank := false ;
7116: LD_ADDR_EXP 53
7120: PUSH
7121: LD_INT 0
7123: ST_TO_ADDR
// sRemote := false ;
7124: LD_ADDR_EXP 54
7128: PUSH
7129: LD_INT 0
7131: ST_TO_ADDR
// sPowell := false ;
7132: LD_ADDR_EXP 55
7136: PUSH
7137: LD_INT 0
7139: ST_TO_ADDR
// sTeleport := false ;
7140: LD_ADDR_EXP 58
7144: PUSH
7145: LD_INT 0
7147: ST_TO_ADDR
// sOilTower := false ;
7148: LD_ADDR_EXP 60
7152: PUSH
7153: LD_INT 0
7155: ST_TO_ADDR
// sShovel := false ;
7156: LD_ADDR_EXP 61
7160: PUSH
7161: LD_INT 0
7163: ST_TO_ADDR
// sSheik := false ;
7164: LD_ADDR_EXP 62
7168: PUSH
7169: LD_INT 0
7171: ST_TO_ADDR
// sEarthquake := false ;
7172: LD_ADDR_EXP 64
7176: PUSH
7177: LD_INT 0
7179: ST_TO_ADDR
// sAI := false ;
7180: LD_ADDR_EXP 65
7184: PUSH
7185: LD_INT 0
7187: ST_TO_ADDR
// sCargo := false ;
7188: LD_ADDR_EXP 68
7192: PUSH
7193: LD_INT 0
7195: ST_TO_ADDR
// sDLaser := false ;
7196: LD_ADDR_EXP 69
7200: PUSH
7201: LD_INT 0
7203: ST_TO_ADDR
// sExchange := false ;
7204: LD_ADDR_EXP 70
7208: PUSH
7209: LD_INT 0
7211: ST_TO_ADDR
// sFac := false ;
7212: LD_ADDR_EXP 71
7216: PUSH
7217: LD_INT 0
7219: ST_TO_ADDR
// sPower := false ;
7220: LD_ADDR_EXP 72
7224: PUSH
7225: LD_INT 0
7227: ST_TO_ADDR
// sRandom := false ;
7228: LD_ADDR_EXP 73
7232: PUSH
7233: LD_INT 0
7235: ST_TO_ADDR
// sShield := false ;
7236: LD_ADDR_EXP 74
7240: PUSH
7241: LD_INT 0
7243: ST_TO_ADDR
// sTime := false ;
7244: LD_ADDR_EXP 75
7248: PUSH
7249: LD_INT 0
7251: ST_TO_ADDR
// sTools := false ;
7252: LD_ADDR_EXP 76
7256: PUSH
7257: LD_INT 0
7259: ST_TO_ADDR
// sSold := false ;
7260: LD_ADDR_EXP 41
7264: PUSH
7265: LD_INT 0
7267: ST_TO_ADDR
// sDiff := false ;
7268: LD_ADDR_EXP 42
7272: PUSH
7273: LD_INT 0
7275: ST_TO_ADDR
// sFog := false ;
7276: LD_ADDR_EXP 45
7280: PUSH
7281: LD_INT 0
7283: ST_TO_ADDR
// sReset := false ;
7284: LD_ADDR_EXP 46
7288: PUSH
7289: LD_INT 0
7291: ST_TO_ADDR
// sSun := false ;
7292: LD_ADDR_EXP 47
7296: PUSH
7297: LD_INT 0
7299: ST_TO_ADDR
// sTiger := false ;
7300: LD_ADDR_EXP 43
7304: PUSH
7305: LD_INT 0
7307: ST_TO_ADDR
// sBomb := false ;
7308: LD_ADDR_EXP 44
7312: PUSH
7313: LD_INT 0
7315: ST_TO_ADDR
// sWound := false ;
7316: LD_ADDR_EXP 52
7320: PUSH
7321: LD_INT 0
7323: ST_TO_ADDR
// sBetray := false ;
7324: LD_ADDR_EXP 56
7328: PUSH
7329: LD_INT 0
7331: ST_TO_ADDR
// sContamin := false ;
7332: LD_ADDR_EXP 57
7336: PUSH
7337: LD_INT 0
7339: ST_TO_ADDR
// sOil := false ;
7340: LD_ADDR_EXP 59
7344: PUSH
7345: LD_INT 0
7347: ST_TO_ADDR
// sStu := false ;
7348: LD_ADDR_EXP 63
7352: PUSH
7353: LD_INT 0
7355: ST_TO_ADDR
// sBazooka := false ;
7356: LD_ADDR_EXP 66
7360: PUSH
7361: LD_INT 0
7363: ST_TO_ADDR
// sMortar := false ;
7364: LD_ADDR_EXP 67
7368: PUSH
7369: LD_INT 0
7371: ST_TO_ADDR
// sRanger := false ;
7372: LD_ADDR_EXP 77
7376: PUSH
7377: LD_INT 0
7379: ST_TO_ADDR
// end ;
7380: LD_VAR 0 1
7384: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
7385: LD_INT 0
7387: PPUSH
7388: PPUSH
7389: PPUSH
7390: PPUSH
7391: PPUSH
// result := [ ] ;
7392: LD_ADDR_VAR 0 1
7396: PUSH
7397: EMPTY
7398: ST_TO_ADDR
// if campaign_id = 1 then
7399: LD_OWVAR 69
7403: PUSH
7404: LD_INT 1
7406: EQUAL
7407: IFFALSE 10345
// begin case mission_number of 1 :
7409: LD_OWVAR 70
7413: PUSH
7414: LD_INT 1
7416: DOUBLE
7417: EQUAL
7418: IFTRUE 7422
7420: GO 7486
7422: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
7423: LD_ADDR_VAR 0 1
7427: PUSH
7428: LD_INT 2
7430: PUSH
7431: LD_INT 4
7433: PUSH
7434: LD_INT 11
7436: PUSH
7437: LD_INT 12
7439: PUSH
7440: LD_INT 15
7442: PUSH
7443: LD_INT 16
7445: PUSH
7446: LD_INT 22
7448: PUSH
7449: LD_INT 23
7451: PUSH
7452: LD_INT 26
7454: PUSH
7455: EMPTY
7456: LIST
7457: LIST
7458: LIST
7459: LIST
7460: LIST
7461: LIST
7462: LIST
7463: LIST
7464: LIST
7465: PUSH
7466: LD_INT 101
7468: PUSH
7469: LD_INT 102
7471: PUSH
7472: LD_INT 106
7474: PUSH
7475: EMPTY
7476: LIST
7477: LIST
7478: LIST
7479: PUSH
7480: EMPTY
7481: LIST
7482: LIST
7483: ST_TO_ADDR
7484: GO 10343
7486: LD_INT 2
7488: DOUBLE
7489: EQUAL
7490: IFTRUE 7494
7492: GO 7566
7494: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
7495: LD_ADDR_VAR 0 1
7499: PUSH
7500: LD_INT 2
7502: PUSH
7503: LD_INT 4
7505: PUSH
7506: LD_INT 11
7508: PUSH
7509: LD_INT 12
7511: PUSH
7512: LD_INT 15
7514: PUSH
7515: LD_INT 16
7517: PUSH
7518: LD_INT 22
7520: PUSH
7521: LD_INT 23
7523: PUSH
7524: LD_INT 26
7526: PUSH
7527: EMPTY
7528: LIST
7529: LIST
7530: LIST
7531: LIST
7532: LIST
7533: LIST
7534: LIST
7535: LIST
7536: LIST
7537: PUSH
7538: LD_INT 101
7540: PUSH
7541: LD_INT 102
7543: PUSH
7544: LD_INT 105
7546: PUSH
7547: LD_INT 106
7549: PUSH
7550: LD_INT 108
7552: PUSH
7553: EMPTY
7554: LIST
7555: LIST
7556: LIST
7557: LIST
7558: LIST
7559: PUSH
7560: EMPTY
7561: LIST
7562: LIST
7563: ST_TO_ADDR
7564: GO 10343
7566: LD_INT 3
7568: DOUBLE
7569: EQUAL
7570: IFTRUE 7574
7572: GO 7650
7574: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
7575: LD_ADDR_VAR 0 1
7579: PUSH
7580: LD_INT 2
7582: PUSH
7583: LD_INT 4
7585: PUSH
7586: LD_INT 5
7588: PUSH
7589: LD_INT 11
7591: PUSH
7592: LD_INT 12
7594: PUSH
7595: LD_INT 15
7597: PUSH
7598: LD_INT 16
7600: PUSH
7601: LD_INT 22
7603: PUSH
7604: LD_INT 26
7606: PUSH
7607: LD_INT 36
7609: PUSH
7610: EMPTY
7611: LIST
7612: LIST
7613: LIST
7614: LIST
7615: LIST
7616: LIST
7617: LIST
7618: LIST
7619: LIST
7620: LIST
7621: PUSH
7622: LD_INT 101
7624: PUSH
7625: LD_INT 102
7627: PUSH
7628: LD_INT 105
7630: PUSH
7631: LD_INT 106
7633: PUSH
7634: LD_INT 108
7636: PUSH
7637: EMPTY
7638: LIST
7639: LIST
7640: LIST
7641: LIST
7642: LIST
7643: PUSH
7644: EMPTY
7645: LIST
7646: LIST
7647: ST_TO_ADDR
7648: GO 10343
7650: LD_INT 4
7652: DOUBLE
7653: EQUAL
7654: IFTRUE 7658
7656: GO 7742
7658: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
7659: LD_ADDR_VAR 0 1
7663: PUSH
7664: LD_INT 2
7666: PUSH
7667: LD_INT 4
7669: PUSH
7670: LD_INT 5
7672: PUSH
7673: LD_INT 8
7675: PUSH
7676: LD_INT 11
7678: PUSH
7679: LD_INT 12
7681: PUSH
7682: LD_INT 15
7684: PUSH
7685: LD_INT 16
7687: PUSH
7688: LD_INT 22
7690: PUSH
7691: LD_INT 23
7693: PUSH
7694: LD_INT 26
7696: PUSH
7697: LD_INT 36
7699: PUSH
7700: EMPTY
7701: LIST
7702: LIST
7703: LIST
7704: LIST
7705: LIST
7706: LIST
7707: LIST
7708: LIST
7709: LIST
7710: LIST
7711: LIST
7712: LIST
7713: PUSH
7714: LD_INT 101
7716: PUSH
7717: LD_INT 102
7719: PUSH
7720: LD_INT 105
7722: PUSH
7723: LD_INT 106
7725: PUSH
7726: LD_INT 108
7728: PUSH
7729: EMPTY
7730: LIST
7731: LIST
7732: LIST
7733: LIST
7734: LIST
7735: PUSH
7736: EMPTY
7737: LIST
7738: LIST
7739: ST_TO_ADDR
7740: GO 10343
7742: LD_INT 5
7744: DOUBLE
7745: EQUAL
7746: IFTRUE 7750
7748: GO 7850
7750: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
7751: LD_ADDR_VAR 0 1
7755: PUSH
7756: LD_INT 2
7758: PUSH
7759: LD_INT 4
7761: PUSH
7762: LD_INT 5
7764: PUSH
7765: LD_INT 6
7767: PUSH
7768: LD_INT 8
7770: PUSH
7771: LD_INT 11
7773: PUSH
7774: LD_INT 12
7776: PUSH
7777: LD_INT 15
7779: PUSH
7780: LD_INT 16
7782: PUSH
7783: LD_INT 22
7785: PUSH
7786: LD_INT 23
7788: PUSH
7789: LD_INT 25
7791: PUSH
7792: LD_INT 26
7794: PUSH
7795: LD_INT 36
7797: PUSH
7798: EMPTY
7799: LIST
7800: LIST
7801: LIST
7802: LIST
7803: LIST
7804: LIST
7805: LIST
7806: LIST
7807: LIST
7808: LIST
7809: LIST
7810: LIST
7811: LIST
7812: LIST
7813: PUSH
7814: LD_INT 101
7816: PUSH
7817: LD_INT 102
7819: PUSH
7820: LD_INT 105
7822: PUSH
7823: LD_INT 106
7825: PUSH
7826: LD_INT 108
7828: PUSH
7829: LD_INT 109
7831: PUSH
7832: LD_INT 112
7834: PUSH
7835: EMPTY
7836: LIST
7837: LIST
7838: LIST
7839: LIST
7840: LIST
7841: LIST
7842: LIST
7843: PUSH
7844: EMPTY
7845: LIST
7846: LIST
7847: ST_TO_ADDR
7848: GO 10343
7850: LD_INT 6
7852: DOUBLE
7853: EQUAL
7854: IFTRUE 7858
7856: GO 7978
7858: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
7859: LD_ADDR_VAR 0 1
7863: PUSH
7864: LD_INT 2
7866: PUSH
7867: LD_INT 4
7869: PUSH
7870: LD_INT 5
7872: PUSH
7873: LD_INT 6
7875: PUSH
7876: LD_INT 8
7878: PUSH
7879: LD_INT 11
7881: PUSH
7882: LD_INT 12
7884: PUSH
7885: LD_INT 15
7887: PUSH
7888: LD_INT 16
7890: PUSH
7891: LD_INT 20
7893: PUSH
7894: LD_INT 21
7896: PUSH
7897: LD_INT 22
7899: PUSH
7900: LD_INT 23
7902: PUSH
7903: LD_INT 25
7905: PUSH
7906: LD_INT 26
7908: PUSH
7909: LD_INT 30
7911: PUSH
7912: LD_INT 31
7914: PUSH
7915: LD_INT 32
7917: PUSH
7918: LD_INT 36
7920: PUSH
7921: EMPTY
7922: LIST
7923: LIST
7924: LIST
7925: LIST
7926: LIST
7927: LIST
7928: LIST
7929: LIST
7930: LIST
7931: LIST
7932: LIST
7933: LIST
7934: LIST
7935: LIST
7936: LIST
7937: LIST
7938: LIST
7939: LIST
7940: LIST
7941: PUSH
7942: LD_INT 101
7944: PUSH
7945: LD_INT 102
7947: PUSH
7948: LD_INT 105
7950: PUSH
7951: LD_INT 106
7953: PUSH
7954: LD_INT 108
7956: PUSH
7957: LD_INT 109
7959: PUSH
7960: LD_INT 112
7962: PUSH
7963: EMPTY
7964: LIST
7965: LIST
7966: LIST
7967: LIST
7968: LIST
7969: LIST
7970: LIST
7971: PUSH
7972: EMPTY
7973: LIST
7974: LIST
7975: ST_TO_ADDR
7976: GO 10343
7978: LD_INT 7
7980: DOUBLE
7981: EQUAL
7982: IFTRUE 7986
7984: GO 8086
7986: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
7987: LD_ADDR_VAR 0 1
7991: PUSH
7992: LD_INT 2
7994: PUSH
7995: LD_INT 4
7997: PUSH
7998: LD_INT 5
8000: PUSH
8001: LD_INT 7
8003: PUSH
8004: LD_INT 11
8006: PUSH
8007: LD_INT 12
8009: PUSH
8010: LD_INT 15
8012: PUSH
8013: LD_INT 16
8015: PUSH
8016: LD_INT 20
8018: PUSH
8019: LD_INT 21
8021: PUSH
8022: LD_INT 22
8024: PUSH
8025: LD_INT 23
8027: PUSH
8028: LD_INT 25
8030: PUSH
8031: LD_INT 26
8033: PUSH
8034: EMPTY
8035: LIST
8036: LIST
8037: LIST
8038: LIST
8039: LIST
8040: LIST
8041: LIST
8042: LIST
8043: LIST
8044: LIST
8045: LIST
8046: LIST
8047: LIST
8048: LIST
8049: PUSH
8050: LD_INT 101
8052: PUSH
8053: LD_INT 102
8055: PUSH
8056: LD_INT 103
8058: PUSH
8059: LD_INT 105
8061: PUSH
8062: LD_INT 106
8064: PUSH
8065: LD_INT 108
8067: PUSH
8068: LD_INT 112
8070: PUSH
8071: EMPTY
8072: LIST
8073: LIST
8074: LIST
8075: LIST
8076: LIST
8077: LIST
8078: LIST
8079: PUSH
8080: EMPTY
8081: LIST
8082: LIST
8083: ST_TO_ADDR
8084: GO 10343
8086: LD_INT 8
8088: DOUBLE
8089: EQUAL
8090: IFTRUE 8094
8092: GO 8222
8094: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
8095: LD_ADDR_VAR 0 1
8099: PUSH
8100: LD_INT 2
8102: PUSH
8103: LD_INT 4
8105: PUSH
8106: LD_INT 5
8108: PUSH
8109: LD_INT 6
8111: PUSH
8112: LD_INT 7
8114: PUSH
8115: LD_INT 8
8117: PUSH
8118: LD_INT 11
8120: PUSH
8121: LD_INT 12
8123: PUSH
8124: LD_INT 15
8126: PUSH
8127: LD_INT 16
8129: PUSH
8130: LD_INT 20
8132: PUSH
8133: LD_INT 21
8135: PUSH
8136: LD_INT 22
8138: PUSH
8139: LD_INT 23
8141: PUSH
8142: LD_INT 25
8144: PUSH
8145: LD_INT 26
8147: PUSH
8148: LD_INT 30
8150: PUSH
8151: LD_INT 31
8153: PUSH
8154: LD_INT 32
8156: PUSH
8157: LD_INT 36
8159: PUSH
8160: EMPTY
8161: LIST
8162: LIST
8163: LIST
8164: LIST
8165: LIST
8166: LIST
8167: LIST
8168: LIST
8169: LIST
8170: LIST
8171: LIST
8172: LIST
8173: LIST
8174: LIST
8175: LIST
8176: LIST
8177: LIST
8178: LIST
8179: LIST
8180: LIST
8181: PUSH
8182: LD_INT 101
8184: PUSH
8185: LD_INT 102
8187: PUSH
8188: LD_INT 103
8190: PUSH
8191: LD_INT 105
8193: PUSH
8194: LD_INT 106
8196: PUSH
8197: LD_INT 108
8199: PUSH
8200: LD_INT 109
8202: PUSH
8203: LD_INT 112
8205: PUSH
8206: EMPTY
8207: LIST
8208: LIST
8209: LIST
8210: LIST
8211: LIST
8212: LIST
8213: LIST
8214: LIST
8215: PUSH
8216: EMPTY
8217: LIST
8218: LIST
8219: ST_TO_ADDR
8220: GO 10343
8222: LD_INT 9
8224: DOUBLE
8225: EQUAL
8226: IFTRUE 8230
8228: GO 8366
8230: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
8231: LD_ADDR_VAR 0 1
8235: PUSH
8236: LD_INT 2
8238: PUSH
8239: LD_INT 4
8241: PUSH
8242: LD_INT 5
8244: PUSH
8245: LD_INT 6
8247: PUSH
8248: LD_INT 7
8250: PUSH
8251: LD_INT 8
8253: PUSH
8254: LD_INT 11
8256: PUSH
8257: LD_INT 12
8259: PUSH
8260: LD_INT 15
8262: PUSH
8263: LD_INT 16
8265: PUSH
8266: LD_INT 20
8268: PUSH
8269: LD_INT 21
8271: PUSH
8272: LD_INT 22
8274: PUSH
8275: LD_INT 23
8277: PUSH
8278: LD_INT 25
8280: PUSH
8281: LD_INT 26
8283: PUSH
8284: LD_INT 28
8286: PUSH
8287: LD_INT 30
8289: PUSH
8290: LD_INT 31
8292: PUSH
8293: LD_INT 32
8295: PUSH
8296: LD_INT 36
8298: PUSH
8299: EMPTY
8300: LIST
8301: LIST
8302: LIST
8303: LIST
8304: LIST
8305: LIST
8306: LIST
8307: LIST
8308: LIST
8309: LIST
8310: LIST
8311: LIST
8312: LIST
8313: LIST
8314: LIST
8315: LIST
8316: LIST
8317: LIST
8318: LIST
8319: LIST
8320: LIST
8321: PUSH
8322: LD_INT 101
8324: PUSH
8325: LD_INT 102
8327: PUSH
8328: LD_INT 103
8330: PUSH
8331: LD_INT 105
8333: PUSH
8334: LD_INT 106
8336: PUSH
8337: LD_INT 108
8339: PUSH
8340: LD_INT 109
8342: PUSH
8343: LD_INT 112
8345: PUSH
8346: LD_INT 114
8348: PUSH
8349: EMPTY
8350: LIST
8351: LIST
8352: LIST
8353: LIST
8354: LIST
8355: LIST
8356: LIST
8357: LIST
8358: LIST
8359: PUSH
8360: EMPTY
8361: LIST
8362: LIST
8363: ST_TO_ADDR
8364: GO 10343
8366: LD_INT 10
8368: DOUBLE
8369: EQUAL
8370: IFTRUE 8374
8372: GO 8558
8374: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
8375: LD_ADDR_VAR 0 1
8379: PUSH
8380: LD_INT 2
8382: PUSH
8383: LD_INT 4
8385: PUSH
8386: LD_INT 5
8388: PUSH
8389: LD_INT 6
8391: PUSH
8392: LD_INT 7
8394: PUSH
8395: LD_INT 8
8397: PUSH
8398: LD_INT 9
8400: PUSH
8401: LD_INT 10
8403: PUSH
8404: LD_INT 11
8406: PUSH
8407: LD_INT 12
8409: PUSH
8410: LD_INT 13
8412: PUSH
8413: LD_INT 14
8415: PUSH
8416: LD_INT 15
8418: PUSH
8419: LD_INT 16
8421: PUSH
8422: LD_INT 17
8424: PUSH
8425: LD_INT 18
8427: PUSH
8428: LD_INT 19
8430: PUSH
8431: LD_INT 20
8433: PUSH
8434: LD_INT 21
8436: PUSH
8437: LD_INT 22
8439: PUSH
8440: LD_INT 23
8442: PUSH
8443: LD_INT 24
8445: PUSH
8446: LD_INT 25
8448: PUSH
8449: LD_INT 26
8451: PUSH
8452: LD_INT 28
8454: PUSH
8455: LD_INT 30
8457: PUSH
8458: LD_INT 31
8460: PUSH
8461: LD_INT 32
8463: PUSH
8464: LD_INT 36
8466: PUSH
8467: EMPTY
8468: LIST
8469: LIST
8470: LIST
8471: LIST
8472: LIST
8473: LIST
8474: LIST
8475: LIST
8476: LIST
8477: LIST
8478: LIST
8479: LIST
8480: LIST
8481: LIST
8482: LIST
8483: LIST
8484: LIST
8485: LIST
8486: LIST
8487: LIST
8488: LIST
8489: LIST
8490: LIST
8491: LIST
8492: LIST
8493: LIST
8494: LIST
8495: LIST
8496: LIST
8497: PUSH
8498: LD_INT 101
8500: PUSH
8501: LD_INT 102
8503: PUSH
8504: LD_INT 103
8506: PUSH
8507: LD_INT 104
8509: PUSH
8510: LD_INT 105
8512: PUSH
8513: LD_INT 106
8515: PUSH
8516: LD_INT 107
8518: PUSH
8519: LD_INT 108
8521: PUSH
8522: LD_INT 109
8524: PUSH
8525: LD_INT 110
8527: PUSH
8528: LD_INT 111
8530: PUSH
8531: LD_INT 112
8533: PUSH
8534: LD_INT 114
8536: PUSH
8537: EMPTY
8538: LIST
8539: LIST
8540: LIST
8541: LIST
8542: LIST
8543: LIST
8544: LIST
8545: LIST
8546: LIST
8547: LIST
8548: LIST
8549: LIST
8550: LIST
8551: PUSH
8552: EMPTY
8553: LIST
8554: LIST
8555: ST_TO_ADDR
8556: GO 10343
8558: LD_INT 11
8560: DOUBLE
8561: EQUAL
8562: IFTRUE 8566
8564: GO 8758
8566: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
8567: LD_ADDR_VAR 0 1
8571: PUSH
8572: LD_INT 2
8574: PUSH
8575: LD_INT 3
8577: PUSH
8578: LD_INT 4
8580: PUSH
8581: LD_INT 5
8583: PUSH
8584: LD_INT 6
8586: PUSH
8587: LD_INT 7
8589: PUSH
8590: LD_INT 8
8592: PUSH
8593: LD_INT 9
8595: PUSH
8596: LD_INT 10
8598: PUSH
8599: LD_INT 11
8601: PUSH
8602: LD_INT 12
8604: PUSH
8605: LD_INT 13
8607: PUSH
8608: LD_INT 14
8610: PUSH
8611: LD_INT 15
8613: PUSH
8614: LD_INT 16
8616: PUSH
8617: LD_INT 17
8619: PUSH
8620: LD_INT 18
8622: PUSH
8623: LD_INT 19
8625: PUSH
8626: LD_INT 20
8628: PUSH
8629: LD_INT 21
8631: PUSH
8632: LD_INT 22
8634: PUSH
8635: LD_INT 23
8637: PUSH
8638: LD_INT 24
8640: PUSH
8641: LD_INT 25
8643: PUSH
8644: LD_INT 26
8646: PUSH
8647: LD_INT 28
8649: PUSH
8650: LD_INT 30
8652: PUSH
8653: LD_INT 31
8655: PUSH
8656: LD_INT 32
8658: PUSH
8659: LD_INT 34
8661: PUSH
8662: LD_INT 36
8664: PUSH
8665: EMPTY
8666: LIST
8667: LIST
8668: LIST
8669: LIST
8670: LIST
8671: LIST
8672: LIST
8673: LIST
8674: LIST
8675: LIST
8676: LIST
8677: LIST
8678: LIST
8679: LIST
8680: LIST
8681: LIST
8682: LIST
8683: LIST
8684: LIST
8685: LIST
8686: LIST
8687: LIST
8688: LIST
8689: LIST
8690: LIST
8691: LIST
8692: LIST
8693: LIST
8694: LIST
8695: LIST
8696: LIST
8697: PUSH
8698: LD_INT 101
8700: PUSH
8701: LD_INT 102
8703: PUSH
8704: LD_INT 103
8706: PUSH
8707: LD_INT 104
8709: PUSH
8710: LD_INT 105
8712: PUSH
8713: LD_INT 106
8715: PUSH
8716: LD_INT 107
8718: PUSH
8719: LD_INT 108
8721: PUSH
8722: LD_INT 109
8724: PUSH
8725: LD_INT 110
8727: PUSH
8728: LD_INT 111
8730: PUSH
8731: LD_INT 112
8733: PUSH
8734: LD_INT 114
8736: PUSH
8737: EMPTY
8738: LIST
8739: LIST
8740: LIST
8741: LIST
8742: LIST
8743: LIST
8744: LIST
8745: LIST
8746: LIST
8747: LIST
8748: LIST
8749: LIST
8750: LIST
8751: PUSH
8752: EMPTY
8753: LIST
8754: LIST
8755: ST_TO_ADDR
8756: GO 10343
8758: LD_INT 12
8760: DOUBLE
8761: EQUAL
8762: IFTRUE 8766
8764: GO 8974
8766: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
8767: LD_ADDR_VAR 0 1
8771: PUSH
8772: LD_INT 1
8774: PUSH
8775: LD_INT 2
8777: PUSH
8778: LD_INT 3
8780: PUSH
8781: LD_INT 4
8783: PUSH
8784: LD_INT 5
8786: PUSH
8787: LD_INT 6
8789: PUSH
8790: LD_INT 7
8792: PUSH
8793: LD_INT 8
8795: PUSH
8796: LD_INT 9
8798: PUSH
8799: LD_INT 10
8801: PUSH
8802: LD_INT 11
8804: PUSH
8805: LD_INT 12
8807: PUSH
8808: LD_INT 13
8810: PUSH
8811: LD_INT 14
8813: PUSH
8814: LD_INT 15
8816: PUSH
8817: LD_INT 16
8819: PUSH
8820: LD_INT 17
8822: PUSH
8823: LD_INT 18
8825: PUSH
8826: LD_INT 19
8828: PUSH
8829: LD_INT 20
8831: PUSH
8832: LD_INT 21
8834: PUSH
8835: LD_INT 22
8837: PUSH
8838: LD_INT 23
8840: PUSH
8841: LD_INT 24
8843: PUSH
8844: LD_INT 25
8846: PUSH
8847: LD_INT 26
8849: PUSH
8850: LD_INT 27
8852: PUSH
8853: LD_INT 28
8855: PUSH
8856: LD_INT 30
8858: PUSH
8859: LD_INT 31
8861: PUSH
8862: LD_INT 32
8864: PUSH
8865: LD_INT 33
8867: PUSH
8868: LD_INT 34
8870: PUSH
8871: LD_INT 36
8873: PUSH
8874: EMPTY
8875: LIST
8876: LIST
8877: LIST
8878: LIST
8879: LIST
8880: LIST
8881: LIST
8882: LIST
8883: LIST
8884: LIST
8885: LIST
8886: LIST
8887: LIST
8888: LIST
8889: LIST
8890: LIST
8891: LIST
8892: LIST
8893: LIST
8894: LIST
8895: LIST
8896: LIST
8897: LIST
8898: LIST
8899: LIST
8900: LIST
8901: LIST
8902: LIST
8903: LIST
8904: LIST
8905: LIST
8906: LIST
8907: LIST
8908: LIST
8909: PUSH
8910: LD_INT 101
8912: PUSH
8913: LD_INT 102
8915: PUSH
8916: LD_INT 103
8918: PUSH
8919: LD_INT 104
8921: PUSH
8922: LD_INT 105
8924: PUSH
8925: LD_INT 106
8927: PUSH
8928: LD_INT 107
8930: PUSH
8931: LD_INT 108
8933: PUSH
8934: LD_INT 109
8936: PUSH
8937: LD_INT 110
8939: PUSH
8940: LD_INT 111
8942: PUSH
8943: LD_INT 112
8945: PUSH
8946: LD_INT 113
8948: PUSH
8949: LD_INT 114
8951: PUSH
8952: EMPTY
8953: LIST
8954: LIST
8955: LIST
8956: LIST
8957: LIST
8958: LIST
8959: LIST
8960: LIST
8961: LIST
8962: LIST
8963: LIST
8964: LIST
8965: LIST
8966: LIST
8967: PUSH
8968: EMPTY
8969: LIST
8970: LIST
8971: ST_TO_ADDR
8972: GO 10343
8974: LD_INT 13
8976: DOUBLE
8977: EQUAL
8978: IFTRUE 8982
8980: GO 9178
8982: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
8983: LD_ADDR_VAR 0 1
8987: PUSH
8988: LD_INT 1
8990: PUSH
8991: LD_INT 2
8993: PUSH
8994: LD_INT 3
8996: PUSH
8997: LD_INT 4
8999: PUSH
9000: LD_INT 5
9002: PUSH
9003: LD_INT 8
9005: PUSH
9006: LD_INT 9
9008: PUSH
9009: LD_INT 10
9011: PUSH
9012: LD_INT 11
9014: PUSH
9015: LD_INT 12
9017: PUSH
9018: LD_INT 14
9020: PUSH
9021: LD_INT 15
9023: PUSH
9024: LD_INT 16
9026: PUSH
9027: LD_INT 17
9029: PUSH
9030: LD_INT 18
9032: PUSH
9033: LD_INT 19
9035: PUSH
9036: LD_INT 20
9038: PUSH
9039: LD_INT 21
9041: PUSH
9042: LD_INT 22
9044: PUSH
9045: LD_INT 23
9047: PUSH
9048: LD_INT 24
9050: PUSH
9051: LD_INT 25
9053: PUSH
9054: LD_INT 26
9056: PUSH
9057: LD_INT 27
9059: PUSH
9060: LD_INT 28
9062: PUSH
9063: LD_INT 30
9065: PUSH
9066: LD_INT 31
9068: PUSH
9069: LD_INT 32
9071: PUSH
9072: LD_INT 33
9074: PUSH
9075: LD_INT 34
9077: PUSH
9078: LD_INT 36
9080: PUSH
9081: EMPTY
9082: LIST
9083: LIST
9084: LIST
9085: LIST
9086: LIST
9087: LIST
9088: LIST
9089: LIST
9090: LIST
9091: LIST
9092: LIST
9093: LIST
9094: LIST
9095: LIST
9096: LIST
9097: LIST
9098: LIST
9099: LIST
9100: LIST
9101: LIST
9102: LIST
9103: LIST
9104: LIST
9105: LIST
9106: LIST
9107: LIST
9108: LIST
9109: LIST
9110: LIST
9111: LIST
9112: LIST
9113: PUSH
9114: LD_INT 101
9116: PUSH
9117: LD_INT 102
9119: PUSH
9120: LD_INT 103
9122: PUSH
9123: LD_INT 104
9125: PUSH
9126: LD_INT 105
9128: PUSH
9129: LD_INT 106
9131: PUSH
9132: LD_INT 107
9134: PUSH
9135: LD_INT 108
9137: PUSH
9138: LD_INT 109
9140: PUSH
9141: LD_INT 110
9143: PUSH
9144: LD_INT 111
9146: PUSH
9147: LD_INT 112
9149: PUSH
9150: LD_INT 113
9152: PUSH
9153: LD_INT 114
9155: PUSH
9156: EMPTY
9157: LIST
9158: LIST
9159: LIST
9160: LIST
9161: LIST
9162: LIST
9163: LIST
9164: LIST
9165: LIST
9166: LIST
9167: LIST
9168: LIST
9169: LIST
9170: LIST
9171: PUSH
9172: EMPTY
9173: LIST
9174: LIST
9175: ST_TO_ADDR
9176: GO 10343
9178: LD_INT 14
9180: DOUBLE
9181: EQUAL
9182: IFTRUE 9186
9184: GO 9398
9186: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
9187: LD_ADDR_VAR 0 1
9191: PUSH
9192: LD_INT 1
9194: PUSH
9195: LD_INT 2
9197: PUSH
9198: LD_INT 3
9200: PUSH
9201: LD_INT 4
9203: PUSH
9204: LD_INT 5
9206: PUSH
9207: LD_INT 6
9209: PUSH
9210: LD_INT 7
9212: PUSH
9213: LD_INT 8
9215: PUSH
9216: LD_INT 9
9218: PUSH
9219: LD_INT 10
9221: PUSH
9222: LD_INT 11
9224: PUSH
9225: LD_INT 12
9227: PUSH
9228: LD_INT 13
9230: PUSH
9231: LD_INT 14
9233: PUSH
9234: LD_INT 15
9236: PUSH
9237: LD_INT 16
9239: PUSH
9240: LD_INT 17
9242: PUSH
9243: LD_INT 18
9245: PUSH
9246: LD_INT 19
9248: PUSH
9249: LD_INT 20
9251: PUSH
9252: LD_INT 21
9254: PUSH
9255: LD_INT 22
9257: PUSH
9258: LD_INT 23
9260: PUSH
9261: LD_INT 24
9263: PUSH
9264: LD_INT 25
9266: PUSH
9267: LD_INT 26
9269: PUSH
9270: LD_INT 27
9272: PUSH
9273: LD_INT 28
9275: PUSH
9276: LD_INT 29
9278: PUSH
9279: LD_INT 30
9281: PUSH
9282: LD_INT 31
9284: PUSH
9285: LD_INT 32
9287: PUSH
9288: LD_INT 33
9290: PUSH
9291: LD_INT 34
9293: PUSH
9294: LD_INT 36
9296: PUSH
9297: EMPTY
9298: LIST
9299: LIST
9300: LIST
9301: LIST
9302: LIST
9303: LIST
9304: LIST
9305: LIST
9306: LIST
9307: LIST
9308: LIST
9309: LIST
9310: LIST
9311: LIST
9312: LIST
9313: LIST
9314: LIST
9315: LIST
9316: LIST
9317: LIST
9318: LIST
9319: LIST
9320: LIST
9321: LIST
9322: LIST
9323: LIST
9324: LIST
9325: LIST
9326: LIST
9327: LIST
9328: LIST
9329: LIST
9330: LIST
9331: LIST
9332: LIST
9333: PUSH
9334: LD_INT 101
9336: PUSH
9337: LD_INT 102
9339: PUSH
9340: LD_INT 103
9342: PUSH
9343: LD_INT 104
9345: PUSH
9346: LD_INT 105
9348: PUSH
9349: LD_INT 106
9351: PUSH
9352: LD_INT 107
9354: PUSH
9355: LD_INT 108
9357: PUSH
9358: LD_INT 109
9360: PUSH
9361: LD_INT 110
9363: PUSH
9364: LD_INT 111
9366: PUSH
9367: LD_INT 112
9369: PUSH
9370: LD_INT 113
9372: PUSH
9373: LD_INT 114
9375: PUSH
9376: EMPTY
9377: LIST
9378: LIST
9379: LIST
9380: LIST
9381: LIST
9382: LIST
9383: LIST
9384: LIST
9385: LIST
9386: LIST
9387: LIST
9388: LIST
9389: LIST
9390: LIST
9391: PUSH
9392: EMPTY
9393: LIST
9394: LIST
9395: ST_TO_ADDR
9396: GO 10343
9398: LD_INT 15
9400: DOUBLE
9401: EQUAL
9402: IFTRUE 9406
9404: GO 9618
9406: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
9407: LD_ADDR_VAR 0 1
9411: PUSH
9412: LD_INT 1
9414: PUSH
9415: LD_INT 2
9417: PUSH
9418: LD_INT 3
9420: PUSH
9421: LD_INT 4
9423: PUSH
9424: LD_INT 5
9426: PUSH
9427: LD_INT 6
9429: PUSH
9430: LD_INT 7
9432: PUSH
9433: LD_INT 8
9435: PUSH
9436: LD_INT 9
9438: PUSH
9439: LD_INT 10
9441: PUSH
9442: LD_INT 11
9444: PUSH
9445: LD_INT 12
9447: PUSH
9448: LD_INT 13
9450: PUSH
9451: LD_INT 14
9453: PUSH
9454: LD_INT 15
9456: PUSH
9457: LD_INT 16
9459: PUSH
9460: LD_INT 17
9462: PUSH
9463: LD_INT 18
9465: PUSH
9466: LD_INT 19
9468: PUSH
9469: LD_INT 20
9471: PUSH
9472: LD_INT 21
9474: PUSH
9475: LD_INT 22
9477: PUSH
9478: LD_INT 23
9480: PUSH
9481: LD_INT 24
9483: PUSH
9484: LD_INT 25
9486: PUSH
9487: LD_INT 26
9489: PUSH
9490: LD_INT 27
9492: PUSH
9493: LD_INT 28
9495: PUSH
9496: LD_INT 29
9498: PUSH
9499: LD_INT 30
9501: PUSH
9502: LD_INT 31
9504: PUSH
9505: LD_INT 32
9507: PUSH
9508: LD_INT 33
9510: PUSH
9511: LD_INT 34
9513: PUSH
9514: LD_INT 36
9516: PUSH
9517: EMPTY
9518: LIST
9519: LIST
9520: LIST
9521: LIST
9522: LIST
9523: LIST
9524: LIST
9525: LIST
9526: LIST
9527: LIST
9528: LIST
9529: LIST
9530: LIST
9531: LIST
9532: LIST
9533: LIST
9534: LIST
9535: LIST
9536: LIST
9537: LIST
9538: LIST
9539: LIST
9540: LIST
9541: LIST
9542: LIST
9543: LIST
9544: LIST
9545: LIST
9546: LIST
9547: LIST
9548: LIST
9549: LIST
9550: LIST
9551: LIST
9552: LIST
9553: PUSH
9554: LD_INT 101
9556: PUSH
9557: LD_INT 102
9559: PUSH
9560: LD_INT 103
9562: PUSH
9563: LD_INT 104
9565: PUSH
9566: LD_INT 105
9568: PUSH
9569: LD_INT 106
9571: PUSH
9572: LD_INT 107
9574: PUSH
9575: LD_INT 108
9577: PUSH
9578: LD_INT 109
9580: PUSH
9581: LD_INT 110
9583: PUSH
9584: LD_INT 111
9586: PUSH
9587: LD_INT 112
9589: PUSH
9590: LD_INT 113
9592: PUSH
9593: LD_INT 114
9595: PUSH
9596: EMPTY
9597: LIST
9598: LIST
9599: LIST
9600: LIST
9601: LIST
9602: LIST
9603: LIST
9604: LIST
9605: LIST
9606: LIST
9607: LIST
9608: LIST
9609: LIST
9610: LIST
9611: PUSH
9612: EMPTY
9613: LIST
9614: LIST
9615: ST_TO_ADDR
9616: GO 10343
9618: LD_INT 16
9620: DOUBLE
9621: EQUAL
9622: IFTRUE 9626
9624: GO 9750
9626: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
9627: LD_ADDR_VAR 0 1
9631: PUSH
9632: LD_INT 2
9634: PUSH
9635: LD_INT 4
9637: PUSH
9638: LD_INT 5
9640: PUSH
9641: LD_INT 7
9643: PUSH
9644: LD_INT 11
9646: PUSH
9647: LD_INT 12
9649: PUSH
9650: LD_INT 15
9652: PUSH
9653: LD_INT 16
9655: PUSH
9656: LD_INT 20
9658: PUSH
9659: LD_INT 21
9661: PUSH
9662: LD_INT 22
9664: PUSH
9665: LD_INT 23
9667: PUSH
9668: LD_INT 25
9670: PUSH
9671: LD_INT 26
9673: PUSH
9674: LD_INT 30
9676: PUSH
9677: LD_INT 31
9679: PUSH
9680: LD_INT 32
9682: PUSH
9683: LD_INT 33
9685: PUSH
9686: LD_INT 34
9688: PUSH
9689: EMPTY
9690: LIST
9691: LIST
9692: LIST
9693: LIST
9694: LIST
9695: LIST
9696: LIST
9697: LIST
9698: LIST
9699: LIST
9700: LIST
9701: LIST
9702: LIST
9703: LIST
9704: LIST
9705: LIST
9706: LIST
9707: LIST
9708: LIST
9709: PUSH
9710: LD_INT 101
9712: PUSH
9713: LD_INT 102
9715: PUSH
9716: LD_INT 103
9718: PUSH
9719: LD_INT 106
9721: PUSH
9722: LD_INT 108
9724: PUSH
9725: LD_INT 112
9727: PUSH
9728: LD_INT 113
9730: PUSH
9731: LD_INT 114
9733: PUSH
9734: EMPTY
9735: LIST
9736: LIST
9737: LIST
9738: LIST
9739: LIST
9740: LIST
9741: LIST
9742: LIST
9743: PUSH
9744: EMPTY
9745: LIST
9746: LIST
9747: ST_TO_ADDR
9748: GO 10343
9750: LD_INT 17
9752: DOUBLE
9753: EQUAL
9754: IFTRUE 9758
9756: GO 9970
9758: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
9759: LD_ADDR_VAR 0 1
9763: PUSH
9764: LD_INT 1
9766: PUSH
9767: LD_INT 2
9769: PUSH
9770: LD_INT 3
9772: PUSH
9773: LD_INT 4
9775: PUSH
9776: LD_INT 5
9778: PUSH
9779: LD_INT 6
9781: PUSH
9782: LD_INT 7
9784: PUSH
9785: LD_INT 8
9787: PUSH
9788: LD_INT 9
9790: PUSH
9791: LD_INT 10
9793: PUSH
9794: LD_INT 11
9796: PUSH
9797: LD_INT 12
9799: PUSH
9800: LD_INT 13
9802: PUSH
9803: LD_INT 14
9805: PUSH
9806: LD_INT 15
9808: PUSH
9809: LD_INT 16
9811: PUSH
9812: LD_INT 17
9814: PUSH
9815: LD_INT 18
9817: PUSH
9818: LD_INT 19
9820: PUSH
9821: LD_INT 20
9823: PUSH
9824: LD_INT 21
9826: PUSH
9827: LD_INT 22
9829: PUSH
9830: LD_INT 23
9832: PUSH
9833: LD_INT 24
9835: PUSH
9836: LD_INT 25
9838: PUSH
9839: LD_INT 26
9841: PUSH
9842: LD_INT 27
9844: PUSH
9845: LD_INT 28
9847: PUSH
9848: LD_INT 29
9850: PUSH
9851: LD_INT 30
9853: PUSH
9854: LD_INT 31
9856: PUSH
9857: LD_INT 32
9859: PUSH
9860: LD_INT 33
9862: PUSH
9863: LD_INT 34
9865: PUSH
9866: LD_INT 36
9868: PUSH
9869: EMPTY
9870: LIST
9871: LIST
9872: LIST
9873: LIST
9874: LIST
9875: LIST
9876: LIST
9877: LIST
9878: LIST
9879: LIST
9880: LIST
9881: LIST
9882: LIST
9883: LIST
9884: LIST
9885: LIST
9886: LIST
9887: LIST
9888: LIST
9889: LIST
9890: LIST
9891: LIST
9892: LIST
9893: LIST
9894: LIST
9895: LIST
9896: LIST
9897: LIST
9898: LIST
9899: LIST
9900: LIST
9901: LIST
9902: LIST
9903: LIST
9904: LIST
9905: PUSH
9906: LD_INT 101
9908: PUSH
9909: LD_INT 102
9911: PUSH
9912: LD_INT 103
9914: PUSH
9915: LD_INT 104
9917: PUSH
9918: LD_INT 105
9920: PUSH
9921: LD_INT 106
9923: PUSH
9924: LD_INT 107
9926: PUSH
9927: LD_INT 108
9929: PUSH
9930: LD_INT 109
9932: PUSH
9933: LD_INT 110
9935: PUSH
9936: LD_INT 111
9938: PUSH
9939: LD_INT 112
9941: PUSH
9942: LD_INT 113
9944: PUSH
9945: LD_INT 114
9947: PUSH
9948: EMPTY
9949: LIST
9950: LIST
9951: LIST
9952: LIST
9953: LIST
9954: LIST
9955: LIST
9956: LIST
9957: LIST
9958: LIST
9959: LIST
9960: LIST
9961: LIST
9962: LIST
9963: PUSH
9964: EMPTY
9965: LIST
9966: LIST
9967: ST_TO_ADDR
9968: GO 10343
9970: LD_INT 18
9972: DOUBLE
9973: EQUAL
9974: IFTRUE 9978
9976: GO 10114
9978: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
9979: LD_ADDR_VAR 0 1
9983: PUSH
9984: LD_INT 2
9986: PUSH
9987: LD_INT 4
9989: PUSH
9990: LD_INT 5
9992: PUSH
9993: LD_INT 7
9995: PUSH
9996: LD_INT 11
9998: PUSH
9999: LD_INT 12
10001: PUSH
10002: LD_INT 15
10004: PUSH
10005: LD_INT 16
10007: PUSH
10008: LD_INT 20
10010: PUSH
10011: LD_INT 21
10013: PUSH
10014: LD_INT 22
10016: PUSH
10017: LD_INT 23
10019: PUSH
10020: LD_INT 25
10022: PUSH
10023: LD_INT 26
10025: PUSH
10026: LD_INT 30
10028: PUSH
10029: LD_INT 31
10031: PUSH
10032: LD_INT 32
10034: PUSH
10035: LD_INT 33
10037: PUSH
10038: LD_INT 34
10040: PUSH
10041: LD_INT 35
10043: PUSH
10044: LD_INT 36
10046: PUSH
10047: EMPTY
10048: LIST
10049: LIST
10050: LIST
10051: LIST
10052: LIST
10053: LIST
10054: LIST
10055: LIST
10056: LIST
10057: LIST
10058: LIST
10059: LIST
10060: LIST
10061: LIST
10062: LIST
10063: LIST
10064: LIST
10065: LIST
10066: LIST
10067: LIST
10068: LIST
10069: PUSH
10070: LD_INT 101
10072: PUSH
10073: LD_INT 102
10075: PUSH
10076: LD_INT 103
10078: PUSH
10079: LD_INT 106
10081: PUSH
10082: LD_INT 108
10084: PUSH
10085: LD_INT 112
10087: PUSH
10088: LD_INT 113
10090: PUSH
10091: LD_INT 114
10093: PUSH
10094: LD_INT 115
10096: PUSH
10097: EMPTY
10098: LIST
10099: LIST
10100: LIST
10101: LIST
10102: LIST
10103: LIST
10104: LIST
10105: LIST
10106: LIST
10107: PUSH
10108: EMPTY
10109: LIST
10110: LIST
10111: ST_TO_ADDR
10112: GO 10343
10114: LD_INT 19
10116: DOUBLE
10117: EQUAL
10118: IFTRUE 10122
10120: GO 10342
10122: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
10123: LD_ADDR_VAR 0 1
10127: PUSH
10128: LD_INT 1
10130: PUSH
10131: LD_INT 2
10133: PUSH
10134: LD_INT 3
10136: PUSH
10137: LD_INT 4
10139: PUSH
10140: LD_INT 5
10142: PUSH
10143: LD_INT 6
10145: PUSH
10146: LD_INT 7
10148: PUSH
10149: LD_INT 8
10151: PUSH
10152: LD_INT 9
10154: PUSH
10155: LD_INT 10
10157: PUSH
10158: LD_INT 11
10160: PUSH
10161: LD_INT 12
10163: PUSH
10164: LD_INT 13
10166: PUSH
10167: LD_INT 14
10169: PUSH
10170: LD_INT 15
10172: PUSH
10173: LD_INT 16
10175: PUSH
10176: LD_INT 17
10178: PUSH
10179: LD_INT 18
10181: PUSH
10182: LD_INT 19
10184: PUSH
10185: LD_INT 20
10187: PUSH
10188: LD_INT 21
10190: PUSH
10191: LD_INT 22
10193: PUSH
10194: LD_INT 23
10196: PUSH
10197: LD_INT 24
10199: PUSH
10200: LD_INT 25
10202: PUSH
10203: LD_INT 26
10205: PUSH
10206: LD_INT 27
10208: PUSH
10209: LD_INT 28
10211: PUSH
10212: LD_INT 29
10214: PUSH
10215: LD_INT 30
10217: PUSH
10218: LD_INT 31
10220: PUSH
10221: LD_INT 32
10223: PUSH
10224: LD_INT 33
10226: PUSH
10227: LD_INT 34
10229: PUSH
10230: LD_INT 35
10232: PUSH
10233: LD_INT 36
10235: PUSH
10236: EMPTY
10237: LIST
10238: LIST
10239: LIST
10240: LIST
10241: LIST
10242: LIST
10243: LIST
10244: LIST
10245: LIST
10246: LIST
10247: LIST
10248: LIST
10249: LIST
10250: LIST
10251: LIST
10252: LIST
10253: LIST
10254: LIST
10255: LIST
10256: LIST
10257: LIST
10258: LIST
10259: LIST
10260: LIST
10261: LIST
10262: LIST
10263: LIST
10264: LIST
10265: LIST
10266: LIST
10267: LIST
10268: LIST
10269: LIST
10270: LIST
10271: LIST
10272: LIST
10273: PUSH
10274: LD_INT 101
10276: PUSH
10277: LD_INT 102
10279: PUSH
10280: LD_INT 103
10282: PUSH
10283: LD_INT 104
10285: PUSH
10286: LD_INT 105
10288: PUSH
10289: LD_INT 106
10291: PUSH
10292: LD_INT 107
10294: PUSH
10295: LD_INT 108
10297: PUSH
10298: LD_INT 109
10300: PUSH
10301: LD_INT 110
10303: PUSH
10304: LD_INT 111
10306: PUSH
10307: LD_INT 112
10309: PUSH
10310: LD_INT 113
10312: PUSH
10313: LD_INT 114
10315: PUSH
10316: LD_INT 115
10318: PUSH
10319: EMPTY
10320: LIST
10321: LIST
10322: LIST
10323: LIST
10324: LIST
10325: LIST
10326: LIST
10327: LIST
10328: LIST
10329: LIST
10330: LIST
10331: LIST
10332: LIST
10333: LIST
10334: LIST
10335: PUSH
10336: EMPTY
10337: LIST
10338: LIST
10339: ST_TO_ADDR
10340: GO 10343
10342: POP
// end else
10343: GO 10562
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
10345: LD_ADDR_VAR 0 1
10349: PUSH
10350: LD_INT 1
10352: PUSH
10353: LD_INT 2
10355: PUSH
10356: LD_INT 3
10358: PUSH
10359: LD_INT 4
10361: PUSH
10362: LD_INT 5
10364: PUSH
10365: LD_INT 6
10367: PUSH
10368: LD_INT 7
10370: PUSH
10371: LD_INT 8
10373: PUSH
10374: LD_INT 9
10376: PUSH
10377: LD_INT 10
10379: PUSH
10380: LD_INT 11
10382: PUSH
10383: LD_INT 12
10385: PUSH
10386: LD_INT 13
10388: PUSH
10389: LD_INT 14
10391: PUSH
10392: LD_INT 15
10394: PUSH
10395: LD_INT 16
10397: PUSH
10398: LD_INT 17
10400: PUSH
10401: LD_INT 18
10403: PUSH
10404: LD_INT 19
10406: PUSH
10407: LD_INT 20
10409: PUSH
10410: LD_INT 21
10412: PUSH
10413: LD_INT 22
10415: PUSH
10416: LD_INT 23
10418: PUSH
10419: LD_INT 24
10421: PUSH
10422: LD_INT 25
10424: PUSH
10425: LD_INT 26
10427: PUSH
10428: LD_INT 27
10430: PUSH
10431: LD_INT 28
10433: PUSH
10434: LD_INT 29
10436: PUSH
10437: LD_INT 30
10439: PUSH
10440: LD_INT 31
10442: PUSH
10443: LD_INT 32
10445: PUSH
10446: LD_INT 33
10448: PUSH
10449: LD_INT 34
10451: PUSH
10452: LD_INT 35
10454: PUSH
10455: LD_INT 36
10457: PUSH
10458: EMPTY
10459: LIST
10460: LIST
10461: LIST
10462: LIST
10463: LIST
10464: LIST
10465: LIST
10466: LIST
10467: LIST
10468: LIST
10469: LIST
10470: LIST
10471: LIST
10472: LIST
10473: LIST
10474: LIST
10475: LIST
10476: LIST
10477: LIST
10478: LIST
10479: LIST
10480: LIST
10481: LIST
10482: LIST
10483: LIST
10484: LIST
10485: LIST
10486: LIST
10487: LIST
10488: LIST
10489: LIST
10490: LIST
10491: LIST
10492: LIST
10493: LIST
10494: LIST
10495: PUSH
10496: LD_INT 101
10498: PUSH
10499: LD_INT 102
10501: PUSH
10502: LD_INT 103
10504: PUSH
10505: LD_INT 104
10507: PUSH
10508: LD_INT 105
10510: PUSH
10511: LD_INT 106
10513: PUSH
10514: LD_INT 107
10516: PUSH
10517: LD_INT 108
10519: PUSH
10520: LD_INT 109
10522: PUSH
10523: LD_INT 110
10525: PUSH
10526: LD_INT 111
10528: PUSH
10529: LD_INT 112
10531: PUSH
10532: LD_INT 113
10534: PUSH
10535: LD_INT 114
10537: PUSH
10538: LD_INT 115
10540: PUSH
10541: EMPTY
10542: LIST
10543: LIST
10544: LIST
10545: LIST
10546: LIST
10547: LIST
10548: LIST
10549: LIST
10550: LIST
10551: LIST
10552: LIST
10553: LIST
10554: LIST
10555: LIST
10556: LIST
10557: PUSH
10558: EMPTY
10559: LIST
10560: LIST
10561: ST_TO_ADDR
// if result then
10562: LD_VAR 0 1
10566: IFFALSE 10855
// begin normal :=  ;
10568: LD_ADDR_VAR 0 3
10572: PUSH
10573: LD_STRING 
10575: ST_TO_ADDR
// hardcore :=  ;
10576: LD_ADDR_VAR 0 4
10580: PUSH
10581: LD_STRING 
10583: ST_TO_ADDR
// for i = 1 to normalCounter do
10584: LD_ADDR_VAR 0 5
10588: PUSH
10589: DOUBLE
10590: LD_INT 1
10592: DEC
10593: ST_TO_ADDR
10594: LD_EXP 25
10598: PUSH
10599: FOR_TO
10600: IFFALSE 10701
// begin tmp := 0 ;
10602: LD_ADDR_VAR 0 2
10606: PUSH
10607: LD_STRING 0
10609: ST_TO_ADDR
// if result [ 1 ] then
10610: LD_VAR 0 1
10614: PUSH
10615: LD_INT 1
10617: ARRAY
10618: IFFALSE 10683
// if result [ 1 ] [ 1 ] = i then
10620: LD_VAR 0 1
10624: PUSH
10625: LD_INT 1
10627: ARRAY
10628: PUSH
10629: LD_INT 1
10631: ARRAY
10632: PUSH
10633: LD_VAR 0 5
10637: EQUAL
10638: IFFALSE 10683
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
10640: LD_ADDR_VAR 0 1
10644: PUSH
10645: LD_VAR 0 1
10649: PPUSH
10650: LD_INT 1
10652: PPUSH
10653: LD_VAR 0 1
10657: PUSH
10658: LD_INT 1
10660: ARRAY
10661: PPUSH
10662: LD_INT 1
10664: PPUSH
10665: CALL_OW 3
10669: PPUSH
10670: CALL_OW 1
10674: ST_TO_ADDR
// tmp := 1 ;
10675: LD_ADDR_VAR 0 2
10679: PUSH
10680: LD_STRING 1
10682: ST_TO_ADDR
// end ; normal := normal & tmp ;
10683: LD_ADDR_VAR 0 3
10687: PUSH
10688: LD_VAR 0 3
10692: PUSH
10693: LD_VAR 0 2
10697: STR
10698: ST_TO_ADDR
// end ;
10699: GO 10599
10701: POP
10702: POP
// for i = 1 to hardcoreCounter do
10703: LD_ADDR_VAR 0 5
10707: PUSH
10708: DOUBLE
10709: LD_INT 1
10711: DEC
10712: ST_TO_ADDR
10713: LD_EXP 26
10717: PUSH
10718: FOR_TO
10719: IFFALSE 10824
// begin tmp := 0 ;
10721: LD_ADDR_VAR 0 2
10725: PUSH
10726: LD_STRING 0
10728: ST_TO_ADDR
// if result [ 2 ] then
10729: LD_VAR 0 1
10733: PUSH
10734: LD_INT 2
10736: ARRAY
10737: IFFALSE 10806
// if result [ 2 ] [ 1 ] = 100 + i then
10739: LD_VAR 0 1
10743: PUSH
10744: LD_INT 2
10746: ARRAY
10747: PUSH
10748: LD_INT 1
10750: ARRAY
10751: PUSH
10752: LD_INT 100
10754: PUSH
10755: LD_VAR 0 5
10759: PLUS
10760: EQUAL
10761: IFFALSE 10806
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
10763: LD_ADDR_VAR 0 1
10767: PUSH
10768: LD_VAR 0 1
10772: PPUSH
10773: LD_INT 2
10775: PPUSH
10776: LD_VAR 0 1
10780: PUSH
10781: LD_INT 2
10783: ARRAY
10784: PPUSH
10785: LD_INT 1
10787: PPUSH
10788: CALL_OW 3
10792: PPUSH
10793: CALL_OW 1
10797: ST_TO_ADDR
// tmp := 1 ;
10798: LD_ADDR_VAR 0 2
10802: PUSH
10803: LD_STRING 1
10805: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
10806: LD_ADDR_VAR 0 4
10810: PUSH
10811: LD_VAR 0 4
10815: PUSH
10816: LD_VAR 0 2
10820: STR
10821: ST_TO_ADDR
// end ;
10822: GO 10718
10824: POP
10825: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
10826: LD_STRING getStreamItemsFromMission("
10828: PUSH
10829: LD_VAR 0 3
10833: STR
10834: PUSH
10835: LD_STRING ","
10837: STR
10838: PUSH
10839: LD_VAR 0 4
10843: STR
10844: PUSH
10845: LD_STRING ")
10847: STR
10848: PPUSH
10849: CALL_OW 559
// end else
10853: GO 10862
// ToLua ( getStreamItemsFromMission("","") ) ;
10855: LD_STRING getStreamItemsFromMission("","")
10857: PPUSH
10858: CALL_OW 559
// end ;
10862: LD_VAR 0 1
10866: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
10867: LD_EXP 24
10871: PUSH
10872: LD_EXP 29
10876: AND
10877: IFFALSE 11001
10879: GO 10881
10881: DISABLE
10882: LD_INT 0
10884: PPUSH
10885: PPUSH
// begin enable ;
10886: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
10887: LD_ADDR_VAR 0 2
10891: PUSH
10892: LD_INT 22
10894: PUSH
10895: LD_OWVAR 2
10899: PUSH
10900: EMPTY
10901: LIST
10902: LIST
10903: PUSH
10904: LD_INT 2
10906: PUSH
10907: LD_INT 34
10909: PUSH
10910: LD_INT 7
10912: PUSH
10913: EMPTY
10914: LIST
10915: LIST
10916: PUSH
10917: LD_INT 34
10919: PUSH
10920: LD_INT 45
10922: PUSH
10923: EMPTY
10924: LIST
10925: LIST
10926: PUSH
10927: LD_INT 34
10929: PUSH
10930: LD_INT 28
10932: PUSH
10933: EMPTY
10934: LIST
10935: LIST
10936: PUSH
10937: LD_INT 34
10939: PUSH
10940: LD_INT 47
10942: PUSH
10943: EMPTY
10944: LIST
10945: LIST
10946: PUSH
10947: EMPTY
10948: LIST
10949: LIST
10950: LIST
10951: LIST
10952: LIST
10953: PUSH
10954: EMPTY
10955: LIST
10956: LIST
10957: PPUSH
10958: CALL_OW 69
10962: ST_TO_ADDR
// if not tmp then
10963: LD_VAR 0 2
10967: NOT
10968: IFFALSE 10972
// exit ;
10970: GO 11001
// for i in tmp do
10972: LD_ADDR_VAR 0 1
10976: PUSH
10977: LD_VAR 0 2
10981: PUSH
10982: FOR_IN
10983: IFFALSE 10999
// begin SetLives ( i , 0 ) ;
10985: LD_VAR 0 1
10989: PPUSH
10990: LD_INT 0
10992: PPUSH
10993: CALL_OW 234
// end ;
10997: GO 10982
10999: POP
11000: POP
// end ;
11001: PPOPN 2
11003: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
11004: LD_EXP 24
11008: PUSH
11009: LD_EXP 30
11013: AND
11014: IFFALSE 11098
11016: GO 11018
11018: DISABLE
11019: LD_INT 0
11021: PPUSH
11022: PPUSH
// begin enable ;
11023: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
11024: LD_ADDR_VAR 0 2
11028: PUSH
11029: LD_INT 22
11031: PUSH
11032: LD_OWVAR 2
11036: PUSH
11037: EMPTY
11038: LIST
11039: LIST
11040: PUSH
11041: LD_INT 32
11043: PUSH
11044: LD_INT 3
11046: PUSH
11047: EMPTY
11048: LIST
11049: LIST
11050: PUSH
11051: EMPTY
11052: LIST
11053: LIST
11054: PPUSH
11055: CALL_OW 69
11059: ST_TO_ADDR
// if not tmp then
11060: LD_VAR 0 2
11064: NOT
11065: IFFALSE 11069
// exit ;
11067: GO 11098
// for i in tmp do
11069: LD_ADDR_VAR 0 1
11073: PUSH
11074: LD_VAR 0 2
11078: PUSH
11079: FOR_IN
11080: IFFALSE 11096
// begin SetLives ( i , 0 ) ;
11082: LD_VAR 0 1
11086: PPUSH
11087: LD_INT 0
11089: PPUSH
11090: CALL_OW 234
// end ;
11094: GO 11079
11096: POP
11097: POP
// end ;
11098: PPOPN 2
11100: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
11101: LD_EXP 24
11105: PUSH
11106: LD_EXP 27
11110: AND
11111: IFFALSE 11204
11113: GO 11115
11115: DISABLE
11116: LD_INT 0
11118: PPUSH
// begin enable ;
11119: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
11120: LD_ADDR_VAR 0 1
11124: PUSH
11125: LD_INT 22
11127: PUSH
11128: LD_OWVAR 2
11132: PUSH
11133: EMPTY
11134: LIST
11135: LIST
11136: PUSH
11137: LD_INT 2
11139: PUSH
11140: LD_INT 25
11142: PUSH
11143: LD_INT 5
11145: PUSH
11146: EMPTY
11147: LIST
11148: LIST
11149: PUSH
11150: LD_INT 25
11152: PUSH
11153: LD_INT 9
11155: PUSH
11156: EMPTY
11157: LIST
11158: LIST
11159: PUSH
11160: LD_INT 25
11162: PUSH
11163: LD_INT 8
11165: PUSH
11166: EMPTY
11167: LIST
11168: LIST
11169: PUSH
11170: EMPTY
11171: LIST
11172: LIST
11173: LIST
11174: LIST
11175: PUSH
11176: EMPTY
11177: LIST
11178: LIST
11179: PPUSH
11180: CALL_OW 69
11184: PUSH
11185: FOR_IN
11186: IFFALSE 11202
// begin SetClass ( i , 1 ) ;
11188: LD_VAR 0 1
11192: PPUSH
11193: LD_INT 1
11195: PPUSH
11196: CALL_OW 336
// end ;
11200: GO 11185
11202: POP
11203: POP
// end ;
11204: PPOPN 1
11206: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
11207: LD_EXP 24
11211: PUSH
11212: LD_EXP 28
11216: AND
11217: PUSH
11218: LD_OWVAR 65
11222: PUSH
11223: LD_INT 7
11225: LESS
11226: AND
11227: IFFALSE 11241
11229: GO 11231
11231: DISABLE
// begin enable ;
11232: ENABLE
// game_speed := 7 ;
11233: LD_ADDR_OWVAR 65
11237: PUSH
11238: LD_INT 7
11240: ST_TO_ADDR
// end ;
11241: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
11242: LD_EXP 24
11246: PUSH
11247: LD_EXP 31
11251: AND
11252: IFFALSE 11454
11254: GO 11256
11256: DISABLE
11257: LD_INT 0
11259: PPUSH
11260: PPUSH
11261: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
11262: LD_ADDR_VAR 0 3
11266: PUSH
11267: LD_INT 81
11269: PUSH
11270: LD_OWVAR 2
11274: PUSH
11275: EMPTY
11276: LIST
11277: LIST
11278: PUSH
11279: LD_INT 21
11281: PUSH
11282: LD_INT 1
11284: PUSH
11285: EMPTY
11286: LIST
11287: LIST
11288: PUSH
11289: EMPTY
11290: LIST
11291: LIST
11292: PPUSH
11293: CALL_OW 69
11297: ST_TO_ADDR
// if not tmp then
11298: LD_VAR 0 3
11302: NOT
11303: IFFALSE 11307
// exit ;
11305: GO 11454
// if tmp > 5 then
11307: LD_VAR 0 3
11311: PUSH
11312: LD_INT 5
11314: GREATER
11315: IFFALSE 11327
// k := 5 else
11317: LD_ADDR_VAR 0 2
11321: PUSH
11322: LD_INT 5
11324: ST_TO_ADDR
11325: GO 11337
// k := tmp ;
11327: LD_ADDR_VAR 0 2
11331: PUSH
11332: LD_VAR 0 3
11336: ST_TO_ADDR
// for i := 1 to k do
11337: LD_ADDR_VAR 0 1
11341: PUSH
11342: DOUBLE
11343: LD_INT 1
11345: DEC
11346: ST_TO_ADDR
11347: LD_VAR 0 2
11351: PUSH
11352: FOR_TO
11353: IFFALSE 11452
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
11355: LD_VAR 0 3
11359: PUSH
11360: LD_VAR 0 1
11364: ARRAY
11365: PPUSH
11366: LD_VAR 0 1
11370: PUSH
11371: LD_INT 4
11373: MOD
11374: PUSH
11375: LD_INT 1
11377: PLUS
11378: PPUSH
11379: CALL_OW 259
11383: PUSH
11384: LD_INT 10
11386: LESS
11387: IFFALSE 11450
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
11389: LD_VAR 0 3
11393: PUSH
11394: LD_VAR 0 1
11398: ARRAY
11399: PPUSH
11400: LD_VAR 0 1
11404: PUSH
11405: LD_INT 4
11407: MOD
11408: PUSH
11409: LD_INT 1
11411: PLUS
11412: PPUSH
11413: LD_VAR 0 3
11417: PUSH
11418: LD_VAR 0 1
11422: ARRAY
11423: PPUSH
11424: LD_VAR 0 1
11428: PUSH
11429: LD_INT 4
11431: MOD
11432: PUSH
11433: LD_INT 1
11435: PLUS
11436: PPUSH
11437: CALL_OW 259
11441: PUSH
11442: LD_INT 1
11444: PLUS
11445: PPUSH
11446: CALL_OW 237
11450: GO 11352
11452: POP
11453: POP
// end ;
11454: PPOPN 3
11456: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
11457: LD_EXP 24
11461: PUSH
11462: LD_EXP 32
11466: AND
11467: IFFALSE 11487
11469: GO 11471
11471: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
11472: LD_INT 4
11474: PPUSH
11475: LD_OWVAR 2
11479: PPUSH
11480: LD_INT 0
11482: PPUSH
11483: CALL_OW 324
11487: END
// every 0 0$1 trigger StreamModeActive and sShovel do
11488: LD_EXP 24
11492: PUSH
11493: LD_EXP 61
11497: AND
11498: IFFALSE 11518
11500: GO 11502
11502: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
11503: LD_INT 19
11505: PPUSH
11506: LD_OWVAR 2
11510: PPUSH
11511: LD_INT 0
11513: PPUSH
11514: CALL_OW 324
11518: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
11519: LD_EXP 24
11523: PUSH
11524: LD_EXP 33
11528: AND
11529: IFFALSE 11631
11531: GO 11533
11533: DISABLE
11534: LD_INT 0
11536: PPUSH
11537: PPUSH
// begin enable ;
11538: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
11539: LD_ADDR_VAR 0 2
11543: PUSH
11544: LD_INT 22
11546: PUSH
11547: LD_OWVAR 2
11551: PUSH
11552: EMPTY
11553: LIST
11554: LIST
11555: PUSH
11556: LD_INT 2
11558: PUSH
11559: LD_INT 34
11561: PUSH
11562: LD_INT 11
11564: PUSH
11565: EMPTY
11566: LIST
11567: LIST
11568: PUSH
11569: LD_INT 34
11571: PUSH
11572: LD_INT 30
11574: PUSH
11575: EMPTY
11576: LIST
11577: LIST
11578: PUSH
11579: EMPTY
11580: LIST
11581: LIST
11582: LIST
11583: PUSH
11584: EMPTY
11585: LIST
11586: LIST
11587: PPUSH
11588: CALL_OW 69
11592: ST_TO_ADDR
// if not tmp then
11593: LD_VAR 0 2
11597: NOT
11598: IFFALSE 11602
// exit ;
11600: GO 11631
// for i in tmp do
11602: LD_ADDR_VAR 0 1
11606: PUSH
11607: LD_VAR 0 2
11611: PUSH
11612: FOR_IN
11613: IFFALSE 11629
// begin SetLives ( i , 0 ) ;
11615: LD_VAR 0 1
11619: PPUSH
11620: LD_INT 0
11622: PPUSH
11623: CALL_OW 234
// end ;
11627: GO 11612
11629: POP
11630: POP
// end ;
11631: PPOPN 2
11633: END
// every 0 0$1 trigger StreamModeActive and sBunker do
11634: LD_EXP 24
11638: PUSH
11639: LD_EXP 34
11643: AND
11644: IFFALSE 11664
11646: GO 11648
11648: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
11649: LD_INT 32
11651: PPUSH
11652: LD_OWVAR 2
11656: PPUSH
11657: LD_INT 0
11659: PPUSH
11660: CALL_OW 324
11664: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
11665: LD_EXP 24
11669: PUSH
11670: LD_EXP 35
11674: AND
11675: IFFALSE 11856
11677: GO 11679
11679: DISABLE
11680: LD_INT 0
11682: PPUSH
11683: PPUSH
11684: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
11685: LD_ADDR_VAR 0 2
11689: PUSH
11690: LD_INT 22
11692: PUSH
11693: LD_OWVAR 2
11697: PUSH
11698: EMPTY
11699: LIST
11700: LIST
11701: PUSH
11702: LD_INT 33
11704: PUSH
11705: LD_INT 3
11707: PUSH
11708: EMPTY
11709: LIST
11710: LIST
11711: PUSH
11712: EMPTY
11713: LIST
11714: LIST
11715: PPUSH
11716: CALL_OW 69
11720: ST_TO_ADDR
// if not tmp then
11721: LD_VAR 0 2
11725: NOT
11726: IFFALSE 11730
// exit ;
11728: GO 11856
// side := 0 ;
11730: LD_ADDR_VAR 0 3
11734: PUSH
11735: LD_INT 0
11737: ST_TO_ADDR
// for i := 1 to 8 do
11738: LD_ADDR_VAR 0 1
11742: PUSH
11743: DOUBLE
11744: LD_INT 1
11746: DEC
11747: ST_TO_ADDR
11748: LD_INT 8
11750: PUSH
11751: FOR_TO
11752: IFFALSE 11800
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
11754: LD_OWVAR 2
11758: PUSH
11759: LD_VAR 0 1
11763: NONEQUAL
11764: PUSH
11765: LD_OWVAR 2
11769: PPUSH
11770: LD_VAR 0 1
11774: PPUSH
11775: CALL_OW 81
11779: PUSH
11780: LD_INT 2
11782: EQUAL
11783: AND
11784: IFFALSE 11798
// begin side := i ;
11786: LD_ADDR_VAR 0 3
11790: PUSH
11791: LD_VAR 0 1
11795: ST_TO_ADDR
// break ;
11796: GO 11800
// end ;
11798: GO 11751
11800: POP
11801: POP
// if not side then
11802: LD_VAR 0 3
11806: NOT
11807: IFFALSE 11811
// exit ;
11809: GO 11856
// for i := 1 to tmp do
11811: LD_ADDR_VAR 0 1
11815: PUSH
11816: DOUBLE
11817: LD_INT 1
11819: DEC
11820: ST_TO_ADDR
11821: LD_VAR 0 2
11825: PUSH
11826: FOR_TO
11827: IFFALSE 11854
// if Prob ( 60 ) then
11829: LD_INT 60
11831: PPUSH
11832: CALL_OW 13
11836: IFFALSE 11852
// SetSide ( i , side ) ;
11838: LD_VAR 0 1
11842: PPUSH
11843: LD_VAR 0 3
11847: PPUSH
11848: CALL_OW 235
11852: GO 11826
11854: POP
11855: POP
// end ;
11856: PPOPN 3
11858: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
11859: LD_EXP 24
11863: PUSH
11864: LD_EXP 37
11868: AND
11869: IFFALSE 11988
11871: GO 11873
11873: DISABLE
11874: LD_INT 0
11876: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
11877: LD_ADDR_VAR 0 1
11881: PUSH
11882: LD_INT 22
11884: PUSH
11885: LD_OWVAR 2
11889: PUSH
11890: EMPTY
11891: LIST
11892: LIST
11893: PUSH
11894: LD_INT 21
11896: PUSH
11897: LD_INT 1
11899: PUSH
11900: EMPTY
11901: LIST
11902: LIST
11903: PUSH
11904: LD_INT 3
11906: PUSH
11907: LD_INT 23
11909: PUSH
11910: LD_INT 0
11912: PUSH
11913: EMPTY
11914: LIST
11915: LIST
11916: PUSH
11917: EMPTY
11918: LIST
11919: LIST
11920: PUSH
11921: EMPTY
11922: LIST
11923: LIST
11924: LIST
11925: PPUSH
11926: CALL_OW 69
11930: PUSH
11931: FOR_IN
11932: IFFALSE 11986
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
11934: LD_VAR 0 1
11938: PPUSH
11939: CALL_OW 257
11943: PUSH
11944: LD_INT 1
11946: PUSH
11947: LD_INT 2
11949: PUSH
11950: LD_INT 3
11952: PUSH
11953: LD_INT 4
11955: PUSH
11956: EMPTY
11957: LIST
11958: LIST
11959: LIST
11960: LIST
11961: IN
11962: IFFALSE 11984
// SetClass ( un , rand ( 1 , 4 ) ) ;
11964: LD_VAR 0 1
11968: PPUSH
11969: LD_INT 1
11971: PPUSH
11972: LD_INT 4
11974: PPUSH
11975: CALL_OW 12
11979: PPUSH
11980: CALL_OW 336
11984: GO 11931
11986: POP
11987: POP
// end ;
11988: PPOPN 1
11990: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
11991: LD_EXP 24
11995: PUSH
11996: LD_EXP 36
12000: AND
12001: IFFALSE 12080
12003: GO 12005
12005: DISABLE
12006: LD_INT 0
12008: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12009: LD_ADDR_VAR 0 1
12013: PUSH
12014: LD_INT 22
12016: PUSH
12017: LD_OWVAR 2
12021: PUSH
12022: EMPTY
12023: LIST
12024: LIST
12025: PUSH
12026: LD_INT 21
12028: PUSH
12029: LD_INT 3
12031: PUSH
12032: EMPTY
12033: LIST
12034: LIST
12035: PUSH
12036: EMPTY
12037: LIST
12038: LIST
12039: PPUSH
12040: CALL_OW 69
12044: ST_TO_ADDR
// if not tmp then
12045: LD_VAR 0 1
12049: NOT
12050: IFFALSE 12054
// exit ;
12052: GO 12080
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
12054: LD_VAR 0 1
12058: PUSH
12059: LD_INT 1
12061: PPUSH
12062: LD_VAR 0 1
12066: PPUSH
12067: CALL_OW 12
12071: ARRAY
12072: PPUSH
12073: LD_INT 100
12075: PPUSH
12076: CALL_OW 234
// end ;
12080: PPOPN 1
12082: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
12083: LD_EXP 24
12087: PUSH
12088: LD_EXP 38
12092: AND
12093: IFFALSE 12191
12095: GO 12097
12097: DISABLE
12098: LD_INT 0
12100: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12101: LD_ADDR_VAR 0 1
12105: PUSH
12106: LD_INT 22
12108: PUSH
12109: LD_OWVAR 2
12113: PUSH
12114: EMPTY
12115: LIST
12116: LIST
12117: PUSH
12118: LD_INT 21
12120: PUSH
12121: LD_INT 1
12123: PUSH
12124: EMPTY
12125: LIST
12126: LIST
12127: PUSH
12128: EMPTY
12129: LIST
12130: LIST
12131: PPUSH
12132: CALL_OW 69
12136: ST_TO_ADDR
// if not tmp then
12137: LD_VAR 0 1
12141: NOT
12142: IFFALSE 12146
// exit ;
12144: GO 12191
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
12146: LD_VAR 0 1
12150: PUSH
12151: LD_INT 1
12153: PPUSH
12154: LD_VAR 0 1
12158: PPUSH
12159: CALL_OW 12
12163: ARRAY
12164: PPUSH
12165: LD_INT 1
12167: PPUSH
12168: LD_INT 4
12170: PPUSH
12171: CALL_OW 12
12175: PPUSH
12176: LD_INT 3000
12178: PPUSH
12179: LD_INT 9000
12181: PPUSH
12182: CALL_OW 12
12186: PPUSH
12187: CALL_OW 492
// end ;
12191: PPOPN 1
12193: END
// every 0 0$1 trigger StreamModeActive and sDepot do
12194: LD_EXP 24
12198: PUSH
12199: LD_EXP 39
12203: AND
12204: IFFALSE 12224
12206: GO 12208
12208: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
12209: LD_INT 1
12211: PPUSH
12212: LD_OWVAR 2
12216: PPUSH
12217: LD_INT 0
12219: PPUSH
12220: CALL_OW 324
12224: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
12225: LD_EXP 24
12229: PUSH
12230: LD_EXP 40
12234: AND
12235: IFFALSE 12318
12237: GO 12239
12239: DISABLE
12240: LD_INT 0
12242: PPUSH
12243: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12244: LD_ADDR_VAR 0 2
12248: PUSH
12249: LD_INT 22
12251: PUSH
12252: LD_OWVAR 2
12256: PUSH
12257: EMPTY
12258: LIST
12259: LIST
12260: PUSH
12261: LD_INT 21
12263: PUSH
12264: LD_INT 3
12266: PUSH
12267: EMPTY
12268: LIST
12269: LIST
12270: PUSH
12271: EMPTY
12272: LIST
12273: LIST
12274: PPUSH
12275: CALL_OW 69
12279: ST_TO_ADDR
// if not tmp then
12280: LD_VAR 0 2
12284: NOT
12285: IFFALSE 12289
// exit ;
12287: GO 12318
// for i in tmp do
12289: LD_ADDR_VAR 0 1
12293: PUSH
12294: LD_VAR 0 2
12298: PUSH
12299: FOR_IN
12300: IFFALSE 12316
// SetBLevel ( i , 10 ) ;
12302: LD_VAR 0 1
12306: PPUSH
12307: LD_INT 10
12309: PPUSH
12310: CALL_OW 241
12314: GO 12299
12316: POP
12317: POP
// end ;
12318: PPOPN 2
12320: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
12321: LD_EXP 24
12325: PUSH
12326: LD_EXP 41
12330: AND
12331: IFFALSE 12442
12333: GO 12335
12335: DISABLE
12336: LD_INT 0
12338: PPUSH
12339: PPUSH
12340: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12341: LD_ADDR_VAR 0 3
12345: PUSH
12346: LD_INT 22
12348: PUSH
12349: LD_OWVAR 2
12353: PUSH
12354: EMPTY
12355: LIST
12356: LIST
12357: PUSH
12358: LD_INT 25
12360: PUSH
12361: LD_INT 1
12363: PUSH
12364: EMPTY
12365: LIST
12366: LIST
12367: PUSH
12368: EMPTY
12369: LIST
12370: LIST
12371: PPUSH
12372: CALL_OW 69
12376: ST_TO_ADDR
// if not tmp then
12377: LD_VAR 0 3
12381: NOT
12382: IFFALSE 12386
// exit ;
12384: GO 12442
// un := tmp [ rand ( 1 , tmp ) ] ;
12386: LD_ADDR_VAR 0 2
12390: PUSH
12391: LD_VAR 0 3
12395: PUSH
12396: LD_INT 1
12398: PPUSH
12399: LD_VAR 0 3
12403: PPUSH
12404: CALL_OW 12
12408: ARRAY
12409: ST_TO_ADDR
// if Crawls ( un ) then
12410: LD_VAR 0 2
12414: PPUSH
12415: CALL_OW 318
12419: IFFALSE 12430
// ComWalk ( un ) ;
12421: LD_VAR 0 2
12425: PPUSH
12426: CALL_OW 138
// SetClass ( un , class_sniper ) ;
12430: LD_VAR 0 2
12434: PPUSH
12435: LD_INT 5
12437: PPUSH
12438: CALL_OW 336
// end ;
12442: PPOPN 3
12444: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
12445: LD_EXP 24
12449: PUSH
12450: LD_EXP 42
12454: AND
12455: PUSH
12456: LD_OWVAR 67
12460: PUSH
12461: LD_INT 3
12463: LESS
12464: AND
12465: IFFALSE 12484
12467: GO 12469
12469: DISABLE
// Difficulty := Difficulty + 1 ;
12470: LD_ADDR_OWVAR 67
12474: PUSH
12475: LD_OWVAR 67
12479: PUSH
12480: LD_INT 1
12482: PLUS
12483: ST_TO_ADDR
12484: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
12485: LD_EXP 24
12489: PUSH
12490: LD_EXP 43
12494: AND
12495: IFFALSE 12598
12497: GO 12499
12499: DISABLE
12500: LD_INT 0
12502: PPUSH
// begin for i := 1 to 5 do
12503: LD_ADDR_VAR 0 1
12507: PUSH
12508: DOUBLE
12509: LD_INT 1
12511: DEC
12512: ST_TO_ADDR
12513: LD_INT 5
12515: PUSH
12516: FOR_TO
12517: IFFALSE 12596
// begin uc_nation := nation_nature ;
12519: LD_ADDR_OWVAR 21
12523: PUSH
12524: LD_INT 0
12526: ST_TO_ADDR
// uc_side := 0 ;
12527: LD_ADDR_OWVAR 20
12531: PUSH
12532: LD_INT 0
12534: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12535: LD_ADDR_OWVAR 29
12539: PUSH
12540: LD_INT 12
12542: PUSH
12543: LD_INT 12
12545: PUSH
12546: EMPTY
12547: LIST
12548: LIST
12549: ST_TO_ADDR
// hc_agressivity := 20 ;
12550: LD_ADDR_OWVAR 35
12554: PUSH
12555: LD_INT 20
12557: ST_TO_ADDR
// hc_class := class_tiger ;
12558: LD_ADDR_OWVAR 28
12562: PUSH
12563: LD_INT 14
12565: ST_TO_ADDR
// hc_gallery :=  ;
12566: LD_ADDR_OWVAR 33
12570: PUSH
12571: LD_STRING 
12573: ST_TO_ADDR
// hc_name :=  ;
12574: LD_ADDR_OWVAR 26
12578: PUSH
12579: LD_STRING 
12581: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
12582: CALL_OW 44
12586: PPUSH
12587: LD_INT 0
12589: PPUSH
12590: CALL_OW 51
// end ;
12594: GO 12516
12596: POP
12597: POP
// end ;
12598: PPOPN 1
12600: END
// every 0 0$1 trigger StreamModeActive and sBomb do
12601: LD_EXP 24
12605: PUSH
12606: LD_EXP 44
12610: AND
12611: IFFALSE 12620
12613: GO 12615
12615: DISABLE
// StreamSibBomb ;
12616: CALL 12621 0 0
12620: END
// export function StreamSibBomb ; var i , x , y ; begin
12621: LD_INT 0
12623: PPUSH
12624: PPUSH
12625: PPUSH
12626: PPUSH
// result := false ;
12627: LD_ADDR_VAR 0 1
12631: PUSH
12632: LD_INT 0
12634: ST_TO_ADDR
// for i := 1 to 16 do
12635: LD_ADDR_VAR 0 2
12639: PUSH
12640: DOUBLE
12641: LD_INT 1
12643: DEC
12644: ST_TO_ADDR
12645: LD_INT 16
12647: PUSH
12648: FOR_TO
12649: IFFALSE 12848
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12651: LD_ADDR_VAR 0 3
12655: PUSH
12656: LD_INT 10
12658: PUSH
12659: LD_INT 20
12661: PUSH
12662: LD_INT 30
12664: PUSH
12665: LD_INT 40
12667: PUSH
12668: LD_INT 50
12670: PUSH
12671: LD_INT 60
12673: PUSH
12674: LD_INT 70
12676: PUSH
12677: LD_INT 80
12679: PUSH
12680: LD_INT 90
12682: PUSH
12683: LD_INT 100
12685: PUSH
12686: LD_INT 110
12688: PUSH
12689: LD_INT 120
12691: PUSH
12692: LD_INT 130
12694: PUSH
12695: LD_INT 140
12697: PUSH
12698: LD_INT 150
12700: PUSH
12701: EMPTY
12702: LIST
12703: LIST
12704: LIST
12705: LIST
12706: LIST
12707: LIST
12708: LIST
12709: LIST
12710: LIST
12711: LIST
12712: LIST
12713: LIST
12714: LIST
12715: LIST
12716: LIST
12717: PUSH
12718: LD_INT 1
12720: PPUSH
12721: LD_INT 15
12723: PPUSH
12724: CALL_OW 12
12728: ARRAY
12729: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12730: LD_ADDR_VAR 0 4
12734: PUSH
12735: LD_INT 10
12737: PUSH
12738: LD_INT 20
12740: PUSH
12741: LD_INT 30
12743: PUSH
12744: LD_INT 40
12746: PUSH
12747: LD_INT 50
12749: PUSH
12750: LD_INT 60
12752: PUSH
12753: LD_INT 70
12755: PUSH
12756: LD_INT 80
12758: PUSH
12759: LD_INT 90
12761: PUSH
12762: LD_INT 100
12764: PUSH
12765: LD_INT 110
12767: PUSH
12768: LD_INT 120
12770: PUSH
12771: LD_INT 130
12773: PUSH
12774: LD_INT 140
12776: PUSH
12777: LD_INT 150
12779: PUSH
12780: EMPTY
12781: LIST
12782: LIST
12783: LIST
12784: LIST
12785: LIST
12786: LIST
12787: LIST
12788: LIST
12789: LIST
12790: LIST
12791: LIST
12792: LIST
12793: LIST
12794: LIST
12795: LIST
12796: PUSH
12797: LD_INT 1
12799: PPUSH
12800: LD_INT 15
12802: PPUSH
12803: CALL_OW 12
12807: ARRAY
12808: ST_TO_ADDR
// if ValidHex ( x , y ) then
12809: LD_VAR 0 3
12813: PPUSH
12814: LD_VAR 0 4
12818: PPUSH
12819: CALL_OW 488
12823: IFFALSE 12846
// begin result := [ x , y ] ;
12825: LD_ADDR_VAR 0 1
12829: PUSH
12830: LD_VAR 0 3
12834: PUSH
12835: LD_VAR 0 4
12839: PUSH
12840: EMPTY
12841: LIST
12842: LIST
12843: ST_TO_ADDR
// break ;
12844: GO 12848
// end ; end ;
12846: GO 12648
12848: POP
12849: POP
// if result then
12850: LD_VAR 0 1
12854: IFFALSE 12914
// begin ToLua ( playSibBomb() ) ;
12856: LD_STRING playSibBomb()
12858: PPUSH
12859: CALL_OW 559
// wait ( 0 0$14 ) ;
12863: LD_INT 490
12865: PPUSH
12866: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
12870: LD_VAR 0 1
12874: PUSH
12875: LD_INT 1
12877: ARRAY
12878: PPUSH
12879: LD_VAR 0 1
12883: PUSH
12884: LD_INT 2
12886: ARRAY
12887: PPUSH
12888: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
12892: LD_VAR 0 1
12896: PUSH
12897: LD_INT 1
12899: ARRAY
12900: PPUSH
12901: LD_VAR 0 1
12905: PUSH
12906: LD_INT 2
12908: ARRAY
12909: PPUSH
12910: CALL_OW 429
// end ; end ;
12914: LD_VAR 0 1
12918: RET
// every 0 0$1 trigger StreamModeActive and sReset do
12919: LD_EXP 24
12923: PUSH
12924: LD_EXP 46
12928: AND
12929: IFFALSE 12941
12931: GO 12933
12933: DISABLE
// YouLost (  ) ;
12934: LD_STRING 
12936: PPUSH
12937: CALL_OW 104
12941: END
// every 0 0$1 trigger StreamModeActive and sFog do
12942: LD_EXP 24
12946: PUSH
12947: LD_EXP 45
12951: AND
12952: IFFALSE 12966
12954: GO 12956
12956: DISABLE
// FogOff ( your_side ) ;
12957: LD_OWVAR 2
12961: PPUSH
12962: CALL_OW 344
12966: END
// every 0 0$1 trigger StreamModeActive and sSun do
12967: LD_EXP 24
12971: PUSH
12972: LD_EXP 47
12976: AND
12977: IFFALSE 13005
12979: GO 12981
12981: DISABLE
// begin solar_recharge_percent := 0 ;
12982: LD_ADDR_OWVAR 79
12986: PUSH
12987: LD_INT 0
12989: ST_TO_ADDR
// wait ( 5 5$00 ) ;
12990: LD_INT 10500
12992: PPUSH
12993: CALL_OW 67
// solar_recharge_percent := 100 ;
12997: LD_ADDR_OWVAR 79
13001: PUSH
13002: LD_INT 100
13004: ST_TO_ADDR
// end ;
13005: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
13006: LD_EXP 24
13010: PUSH
13011: LD_EXP 48
13015: AND
13016: IFFALSE 13255
13018: GO 13020
13020: DISABLE
13021: LD_INT 0
13023: PPUSH
13024: PPUSH
13025: PPUSH
// begin tmp := [ ] ;
13026: LD_ADDR_VAR 0 3
13030: PUSH
13031: EMPTY
13032: ST_TO_ADDR
// for i := 1 to 6 do
13033: LD_ADDR_VAR 0 1
13037: PUSH
13038: DOUBLE
13039: LD_INT 1
13041: DEC
13042: ST_TO_ADDR
13043: LD_INT 6
13045: PUSH
13046: FOR_TO
13047: IFFALSE 13152
// begin uc_nation := nation_nature ;
13049: LD_ADDR_OWVAR 21
13053: PUSH
13054: LD_INT 0
13056: ST_TO_ADDR
// uc_side := 0 ;
13057: LD_ADDR_OWVAR 20
13061: PUSH
13062: LD_INT 0
13064: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13065: LD_ADDR_OWVAR 29
13069: PUSH
13070: LD_INT 12
13072: PUSH
13073: LD_INT 12
13075: PUSH
13076: EMPTY
13077: LIST
13078: LIST
13079: ST_TO_ADDR
// hc_agressivity := 20 ;
13080: LD_ADDR_OWVAR 35
13084: PUSH
13085: LD_INT 20
13087: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
13088: LD_ADDR_OWVAR 28
13092: PUSH
13093: LD_INT 17
13095: ST_TO_ADDR
// hc_gallery :=  ;
13096: LD_ADDR_OWVAR 33
13100: PUSH
13101: LD_STRING 
13103: ST_TO_ADDR
// hc_name :=  ;
13104: LD_ADDR_OWVAR 26
13108: PUSH
13109: LD_STRING 
13111: ST_TO_ADDR
// un := CreateHuman ;
13112: LD_ADDR_VAR 0 2
13116: PUSH
13117: CALL_OW 44
13121: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
13122: LD_VAR 0 2
13126: PPUSH
13127: LD_INT 1
13129: PPUSH
13130: CALL_OW 51
// tmp := tmp ^ un ;
13134: LD_ADDR_VAR 0 3
13138: PUSH
13139: LD_VAR 0 3
13143: PUSH
13144: LD_VAR 0 2
13148: ADD
13149: ST_TO_ADDR
// end ;
13150: GO 13046
13152: POP
13153: POP
// repeat wait ( 0 0$1 ) ;
13154: LD_INT 35
13156: PPUSH
13157: CALL_OW 67
// for un in tmp do
13161: LD_ADDR_VAR 0 2
13165: PUSH
13166: LD_VAR 0 3
13170: PUSH
13171: FOR_IN
13172: IFFALSE 13246
// begin if IsDead ( un ) then
13174: LD_VAR 0 2
13178: PPUSH
13179: CALL_OW 301
13183: IFFALSE 13203
// begin tmp := tmp diff un ;
13185: LD_ADDR_VAR 0 3
13189: PUSH
13190: LD_VAR 0 3
13194: PUSH
13195: LD_VAR 0 2
13199: DIFF
13200: ST_TO_ADDR
// continue ;
13201: GO 13171
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
13203: LD_VAR 0 2
13207: PPUSH
13208: LD_INT 3
13210: PUSH
13211: LD_INT 22
13213: PUSH
13214: LD_INT 0
13216: PUSH
13217: EMPTY
13218: LIST
13219: LIST
13220: PUSH
13221: EMPTY
13222: LIST
13223: LIST
13224: PPUSH
13225: CALL_OW 69
13229: PPUSH
13230: LD_VAR 0 2
13234: PPUSH
13235: CALL_OW 74
13239: PPUSH
13240: CALL_OW 115
// end ;
13244: GO 13171
13246: POP
13247: POP
// until not tmp ;
13248: LD_VAR 0 3
13252: NOT
13253: IFFALSE 13154
// end ;
13255: PPOPN 3
13257: END
// every 0 0$1 trigger StreamModeActive and sTroll do
13258: LD_EXP 24
13262: PUSH
13263: LD_EXP 49
13267: AND
13268: IFFALSE 13322
13270: GO 13272
13272: DISABLE
// begin ToLua ( displayTroll(); ) ;
13273: LD_STRING displayTroll();
13275: PPUSH
13276: CALL_OW 559
// wait ( 3 3$00 ) ;
13280: LD_INT 6300
13282: PPUSH
13283: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13287: LD_STRING hideTroll();
13289: PPUSH
13290: CALL_OW 559
// wait ( 1 1$00 ) ;
13294: LD_INT 2100
13296: PPUSH
13297: CALL_OW 67
// ToLua ( displayTroll(); ) ;
13301: LD_STRING displayTroll();
13303: PPUSH
13304: CALL_OW 559
// wait ( 1 1$00 ) ;
13308: LD_INT 2100
13310: PPUSH
13311: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13315: LD_STRING hideTroll();
13317: PPUSH
13318: CALL_OW 559
// end ;
13322: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
13323: LD_EXP 24
13327: PUSH
13328: LD_EXP 50
13332: AND
13333: IFFALSE 13396
13335: GO 13337
13337: DISABLE
13338: LD_INT 0
13340: PPUSH
// begin p := 0 ;
13341: LD_ADDR_VAR 0 1
13345: PUSH
13346: LD_INT 0
13348: ST_TO_ADDR
// repeat game_speed := 1 ;
13349: LD_ADDR_OWVAR 65
13353: PUSH
13354: LD_INT 1
13356: ST_TO_ADDR
// wait ( 0 0$1 ) ;
13357: LD_INT 35
13359: PPUSH
13360: CALL_OW 67
// p := p + 1 ;
13364: LD_ADDR_VAR 0 1
13368: PUSH
13369: LD_VAR 0 1
13373: PUSH
13374: LD_INT 1
13376: PLUS
13377: ST_TO_ADDR
// until p >= 60 ;
13378: LD_VAR 0 1
13382: PUSH
13383: LD_INT 60
13385: GREATEREQUAL
13386: IFFALSE 13349
// game_speed := 4 ;
13388: LD_ADDR_OWVAR 65
13392: PUSH
13393: LD_INT 4
13395: ST_TO_ADDR
// end ;
13396: PPOPN 1
13398: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
13399: LD_EXP 24
13403: PUSH
13404: LD_EXP 51
13408: AND
13409: IFFALSE 13555
13411: GO 13413
13413: DISABLE
13414: LD_INT 0
13416: PPUSH
13417: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13418: LD_ADDR_VAR 0 1
13422: PUSH
13423: LD_INT 22
13425: PUSH
13426: LD_OWVAR 2
13430: PUSH
13431: EMPTY
13432: LIST
13433: LIST
13434: PUSH
13435: LD_INT 2
13437: PUSH
13438: LD_INT 30
13440: PUSH
13441: LD_INT 0
13443: PUSH
13444: EMPTY
13445: LIST
13446: LIST
13447: PUSH
13448: LD_INT 30
13450: PUSH
13451: LD_INT 1
13453: PUSH
13454: EMPTY
13455: LIST
13456: LIST
13457: PUSH
13458: EMPTY
13459: LIST
13460: LIST
13461: LIST
13462: PUSH
13463: EMPTY
13464: LIST
13465: LIST
13466: PPUSH
13467: CALL_OW 69
13471: ST_TO_ADDR
// if not depot then
13472: LD_VAR 0 1
13476: NOT
13477: IFFALSE 13481
// exit ;
13479: GO 13555
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
13481: LD_ADDR_VAR 0 2
13485: PUSH
13486: LD_VAR 0 1
13490: PUSH
13491: LD_INT 1
13493: PPUSH
13494: LD_VAR 0 1
13498: PPUSH
13499: CALL_OW 12
13503: ARRAY
13504: PPUSH
13505: CALL_OW 274
13509: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
13510: LD_VAR 0 2
13514: PPUSH
13515: LD_INT 1
13517: PPUSH
13518: LD_INT 0
13520: PPUSH
13521: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
13525: LD_VAR 0 2
13529: PPUSH
13530: LD_INT 2
13532: PPUSH
13533: LD_INT 0
13535: PPUSH
13536: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
13540: LD_VAR 0 2
13544: PPUSH
13545: LD_INT 3
13547: PPUSH
13548: LD_INT 0
13550: PPUSH
13551: CALL_OW 277
// end ;
13555: PPOPN 2
13557: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
13558: LD_EXP 24
13562: PUSH
13563: LD_EXP 52
13567: AND
13568: IFFALSE 13665
13570: GO 13572
13572: DISABLE
13573: LD_INT 0
13575: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13576: LD_ADDR_VAR 0 1
13580: PUSH
13581: LD_INT 22
13583: PUSH
13584: LD_OWVAR 2
13588: PUSH
13589: EMPTY
13590: LIST
13591: LIST
13592: PUSH
13593: LD_INT 21
13595: PUSH
13596: LD_INT 1
13598: PUSH
13599: EMPTY
13600: LIST
13601: LIST
13602: PUSH
13603: LD_INT 3
13605: PUSH
13606: LD_INT 23
13608: PUSH
13609: LD_INT 0
13611: PUSH
13612: EMPTY
13613: LIST
13614: LIST
13615: PUSH
13616: EMPTY
13617: LIST
13618: LIST
13619: PUSH
13620: EMPTY
13621: LIST
13622: LIST
13623: LIST
13624: PPUSH
13625: CALL_OW 69
13629: ST_TO_ADDR
// if not tmp then
13630: LD_VAR 0 1
13634: NOT
13635: IFFALSE 13639
// exit ;
13637: GO 13665
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
13639: LD_VAR 0 1
13643: PUSH
13644: LD_INT 1
13646: PPUSH
13647: LD_VAR 0 1
13651: PPUSH
13652: CALL_OW 12
13656: ARRAY
13657: PPUSH
13658: LD_INT 200
13660: PPUSH
13661: CALL_OW 234
// end ;
13665: PPOPN 1
13667: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
13668: LD_EXP 24
13672: PUSH
13673: LD_EXP 53
13677: AND
13678: IFFALSE 13757
13680: GO 13682
13682: DISABLE
13683: LD_INT 0
13685: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
13686: LD_ADDR_VAR 0 1
13690: PUSH
13691: LD_INT 22
13693: PUSH
13694: LD_OWVAR 2
13698: PUSH
13699: EMPTY
13700: LIST
13701: LIST
13702: PUSH
13703: LD_INT 21
13705: PUSH
13706: LD_INT 2
13708: PUSH
13709: EMPTY
13710: LIST
13711: LIST
13712: PUSH
13713: EMPTY
13714: LIST
13715: LIST
13716: PPUSH
13717: CALL_OW 69
13721: ST_TO_ADDR
// if not tmp then
13722: LD_VAR 0 1
13726: NOT
13727: IFFALSE 13731
// exit ;
13729: GO 13757
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
13731: LD_VAR 0 1
13735: PUSH
13736: LD_INT 1
13738: PPUSH
13739: LD_VAR 0 1
13743: PPUSH
13744: CALL_OW 12
13748: ARRAY
13749: PPUSH
13750: LD_INT 60
13752: PPUSH
13753: CALL_OW 234
// end ;
13757: PPOPN 1
13759: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
13760: LD_EXP 24
13764: PUSH
13765: LD_EXP 54
13769: AND
13770: IFFALSE 13869
13772: GO 13774
13774: DISABLE
13775: LD_INT 0
13777: PPUSH
13778: PPUSH
// begin enable ;
13779: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
13780: LD_ADDR_VAR 0 1
13784: PUSH
13785: LD_INT 22
13787: PUSH
13788: LD_OWVAR 2
13792: PUSH
13793: EMPTY
13794: LIST
13795: LIST
13796: PUSH
13797: LD_INT 61
13799: PUSH
13800: EMPTY
13801: LIST
13802: PUSH
13803: LD_INT 33
13805: PUSH
13806: LD_INT 2
13808: PUSH
13809: EMPTY
13810: LIST
13811: LIST
13812: PUSH
13813: EMPTY
13814: LIST
13815: LIST
13816: LIST
13817: PPUSH
13818: CALL_OW 69
13822: ST_TO_ADDR
// if not tmp then
13823: LD_VAR 0 1
13827: NOT
13828: IFFALSE 13832
// exit ;
13830: GO 13869
// for i in tmp do
13832: LD_ADDR_VAR 0 2
13836: PUSH
13837: LD_VAR 0 1
13841: PUSH
13842: FOR_IN
13843: IFFALSE 13867
// if IsControledBy ( i ) then
13845: LD_VAR 0 2
13849: PPUSH
13850: CALL_OW 312
13854: IFFALSE 13865
// ComUnlink ( i ) ;
13856: LD_VAR 0 2
13860: PPUSH
13861: CALL_OW 136
13865: GO 13842
13867: POP
13868: POP
// end ;
13869: PPOPN 2
13871: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
13872: LD_EXP 24
13876: PUSH
13877: LD_EXP 55
13881: AND
13882: IFFALSE 14022
13884: GO 13886
13886: DISABLE
13887: LD_INT 0
13889: PPUSH
13890: PPUSH
// begin ToLua ( displayPowell(); ) ;
13891: LD_STRING displayPowell();
13893: PPUSH
13894: CALL_OW 559
// uc_side := 0 ;
13898: LD_ADDR_OWVAR 20
13902: PUSH
13903: LD_INT 0
13905: ST_TO_ADDR
// uc_nation := 2 ;
13906: LD_ADDR_OWVAR 21
13910: PUSH
13911: LD_INT 2
13913: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
13914: LD_ADDR_OWVAR 37
13918: PUSH
13919: LD_INT 14
13921: ST_TO_ADDR
// vc_engine := engine_siberite ;
13922: LD_ADDR_OWVAR 39
13926: PUSH
13927: LD_INT 3
13929: ST_TO_ADDR
// vc_control := control_apeman ;
13930: LD_ADDR_OWVAR 38
13934: PUSH
13935: LD_INT 5
13937: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
13938: LD_ADDR_OWVAR 40
13942: PUSH
13943: LD_INT 29
13945: ST_TO_ADDR
// un := CreateVehicle ;
13946: LD_ADDR_VAR 0 2
13950: PUSH
13951: CALL_OW 45
13955: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13956: LD_VAR 0 2
13960: PPUSH
13961: LD_INT 1
13963: PPUSH
13964: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13968: LD_INT 35
13970: PPUSH
13971: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13975: LD_VAR 0 2
13979: PPUSH
13980: LD_INT 22
13982: PUSH
13983: LD_OWVAR 2
13987: PUSH
13988: EMPTY
13989: LIST
13990: LIST
13991: PPUSH
13992: CALL_OW 69
13996: PPUSH
13997: LD_VAR 0 2
14001: PPUSH
14002: CALL_OW 74
14006: PPUSH
14007: CALL_OW 115
// until IsDead ( un ) ;
14011: LD_VAR 0 2
14015: PPUSH
14016: CALL_OW 301
14020: IFFALSE 13968
// end ;
14022: PPOPN 2
14024: END
// every 0 0$1 trigger StreamModeActive and sStu do
14025: LD_EXP 24
14029: PUSH
14030: LD_EXP 63
14034: AND
14035: IFFALSE 14051
14037: GO 14039
14039: DISABLE
// begin ToLua ( displayStucuk(); ) ;
14040: LD_STRING displayStucuk();
14042: PPUSH
14043: CALL_OW 559
// ResetFog ;
14047: CALL_OW 335
// end ;
14051: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
14052: LD_EXP 24
14056: PUSH
14057: LD_EXP 56
14061: AND
14062: IFFALSE 14203
14064: GO 14066
14066: DISABLE
14067: LD_INT 0
14069: PPUSH
14070: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14071: LD_ADDR_VAR 0 2
14075: PUSH
14076: LD_INT 22
14078: PUSH
14079: LD_OWVAR 2
14083: PUSH
14084: EMPTY
14085: LIST
14086: LIST
14087: PUSH
14088: LD_INT 21
14090: PUSH
14091: LD_INT 1
14093: PUSH
14094: EMPTY
14095: LIST
14096: LIST
14097: PUSH
14098: EMPTY
14099: LIST
14100: LIST
14101: PPUSH
14102: CALL_OW 69
14106: ST_TO_ADDR
// if not tmp then
14107: LD_VAR 0 2
14111: NOT
14112: IFFALSE 14116
// exit ;
14114: GO 14203
// un := tmp [ rand ( 1 , tmp ) ] ;
14116: LD_ADDR_VAR 0 1
14120: PUSH
14121: LD_VAR 0 2
14125: PUSH
14126: LD_INT 1
14128: PPUSH
14129: LD_VAR 0 2
14133: PPUSH
14134: CALL_OW 12
14138: ARRAY
14139: ST_TO_ADDR
// SetSide ( un , 0 ) ;
14140: LD_VAR 0 1
14144: PPUSH
14145: LD_INT 0
14147: PPUSH
14148: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
14152: LD_VAR 0 1
14156: PPUSH
14157: LD_OWVAR 3
14161: PUSH
14162: LD_VAR 0 1
14166: DIFF
14167: PPUSH
14168: LD_VAR 0 1
14172: PPUSH
14173: CALL_OW 74
14177: PPUSH
14178: CALL_OW 115
// wait ( 0 0$20 ) ;
14182: LD_INT 700
14184: PPUSH
14185: CALL_OW 67
// SetSide ( un , your_side ) ;
14189: LD_VAR 0 1
14193: PPUSH
14194: LD_OWVAR 2
14198: PPUSH
14199: CALL_OW 235
// end ;
14203: PPOPN 2
14205: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
14206: LD_EXP 24
14210: PUSH
14211: LD_EXP 57
14215: AND
14216: IFFALSE 14322
14218: GO 14220
14220: DISABLE
14221: LD_INT 0
14223: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14224: LD_ADDR_VAR 0 1
14228: PUSH
14229: LD_INT 22
14231: PUSH
14232: LD_OWVAR 2
14236: PUSH
14237: EMPTY
14238: LIST
14239: LIST
14240: PUSH
14241: LD_INT 2
14243: PUSH
14244: LD_INT 30
14246: PUSH
14247: LD_INT 0
14249: PUSH
14250: EMPTY
14251: LIST
14252: LIST
14253: PUSH
14254: LD_INT 30
14256: PUSH
14257: LD_INT 1
14259: PUSH
14260: EMPTY
14261: LIST
14262: LIST
14263: PUSH
14264: EMPTY
14265: LIST
14266: LIST
14267: LIST
14268: PUSH
14269: EMPTY
14270: LIST
14271: LIST
14272: PPUSH
14273: CALL_OW 69
14277: ST_TO_ADDR
// if not depot then
14278: LD_VAR 0 1
14282: NOT
14283: IFFALSE 14287
// exit ;
14285: GO 14322
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
14287: LD_VAR 0 1
14291: PUSH
14292: LD_INT 1
14294: ARRAY
14295: PPUSH
14296: CALL_OW 250
14300: PPUSH
14301: LD_VAR 0 1
14305: PUSH
14306: LD_INT 1
14308: ARRAY
14309: PPUSH
14310: CALL_OW 251
14314: PPUSH
14315: LD_INT 70
14317: PPUSH
14318: CALL_OW 495
// end ;
14322: PPOPN 1
14324: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
14325: LD_EXP 24
14329: PUSH
14330: LD_EXP 58
14334: AND
14335: IFFALSE 14546
14337: GO 14339
14339: DISABLE
14340: LD_INT 0
14342: PPUSH
14343: PPUSH
14344: PPUSH
14345: PPUSH
14346: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14347: LD_ADDR_VAR 0 5
14351: PUSH
14352: LD_INT 22
14354: PUSH
14355: LD_OWVAR 2
14359: PUSH
14360: EMPTY
14361: LIST
14362: LIST
14363: PUSH
14364: LD_INT 21
14366: PUSH
14367: LD_INT 1
14369: PUSH
14370: EMPTY
14371: LIST
14372: LIST
14373: PUSH
14374: EMPTY
14375: LIST
14376: LIST
14377: PPUSH
14378: CALL_OW 69
14382: ST_TO_ADDR
// if not tmp then
14383: LD_VAR 0 5
14387: NOT
14388: IFFALSE 14392
// exit ;
14390: GO 14546
// for i in tmp do
14392: LD_ADDR_VAR 0 1
14396: PUSH
14397: LD_VAR 0 5
14401: PUSH
14402: FOR_IN
14403: IFFALSE 14544
// begin d := rand ( 0 , 5 ) ;
14405: LD_ADDR_VAR 0 4
14409: PUSH
14410: LD_INT 0
14412: PPUSH
14413: LD_INT 5
14415: PPUSH
14416: CALL_OW 12
14420: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
14421: LD_ADDR_VAR 0 2
14425: PUSH
14426: LD_VAR 0 1
14430: PPUSH
14431: CALL_OW 250
14435: PPUSH
14436: LD_VAR 0 4
14440: PPUSH
14441: LD_INT 3
14443: PPUSH
14444: LD_INT 12
14446: PPUSH
14447: CALL_OW 12
14451: PPUSH
14452: CALL_OW 272
14456: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
14457: LD_ADDR_VAR 0 3
14461: PUSH
14462: LD_VAR 0 1
14466: PPUSH
14467: CALL_OW 251
14471: PPUSH
14472: LD_VAR 0 4
14476: PPUSH
14477: LD_INT 3
14479: PPUSH
14480: LD_INT 12
14482: PPUSH
14483: CALL_OW 12
14487: PPUSH
14488: CALL_OW 273
14492: ST_TO_ADDR
// if ValidHex ( x , y ) then
14493: LD_VAR 0 2
14497: PPUSH
14498: LD_VAR 0 3
14502: PPUSH
14503: CALL_OW 488
14507: IFFALSE 14542
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
14509: LD_VAR 0 1
14513: PPUSH
14514: LD_VAR 0 2
14518: PPUSH
14519: LD_VAR 0 3
14523: PPUSH
14524: LD_INT 3
14526: PPUSH
14527: LD_INT 6
14529: PPUSH
14530: CALL_OW 12
14534: PPUSH
14535: LD_INT 1
14537: PPUSH
14538: CALL_OW 483
// end ;
14542: GO 14402
14544: POP
14545: POP
// end ;
14546: PPOPN 5
14548: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
14549: LD_EXP 24
14553: PUSH
14554: LD_EXP 59
14558: AND
14559: IFFALSE 14653
14561: GO 14563
14563: DISABLE
14564: LD_INT 0
14566: PPUSH
14567: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
14568: LD_ADDR_VAR 0 2
14572: PUSH
14573: LD_INT 22
14575: PUSH
14576: LD_OWVAR 2
14580: PUSH
14581: EMPTY
14582: LIST
14583: LIST
14584: PUSH
14585: LD_INT 32
14587: PUSH
14588: LD_INT 1
14590: PUSH
14591: EMPTY
14592: LIST
14593: LIST
14594: PUSH
14595: LD_INT 21
14597: PUSH
14598: LD_INT 2
14600: PUSH
14601: EMPTY
14602: LIST
14603: LIST
14604: PUSH
14605: EMPTY
14606: LIST
14607: LIST
14608: LIST
14609: PPUSH
14610: CALL_OW 69
14614: ST_TO_ADDR
// if not tmp then
14615: LD_VAR 0 2
14619: NOT
14620: IFFALSE 14624
// exit ;
14622: GO 14653
// for i in tmp do
14624: LD_ADDR_VAR 0 1
14628: PUSH
14629: LD_VAR 0 2
14633: PUSH
14634: FOR_IN
14635: IFFALSE 14651
// SetFuel ( i , 0 ) ;
14637: LD_VAR 0 1
14641: PPUSH
14642: LD_INT 0
14644: PPUSH
14645: CALL_OW 240
14649: GO 14634
14651: POP
14652: POP
// end ;
14653: PPOPN 2
14655: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
14656: LD_EXP 24
14660: PUSH
14661: LD_EXP 60
14665: AND
14666: IFFALSE 14732
14668: GO 14670
14670: DISABLE
14671: LD_INT 0
14673: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14674: LD_ADDR_VAR 0 1
14678: PUSH
14679: LD_INT 22
14681: PUSH
14682: LD_OWVAR 2
14686: PUSH
14687: EMPTY
14688: LIST
14689: LIST
14690: PUSH
14691: LD_INT 30
14693: PUSH
14694: LD_INT 29
14696: PUSH
14697: EMPTY
14698: LIST
14699: LIST
14700: PUSH
14701: EMPTY
14702: LIST
14703: LIST
14704: PPUSH
14705: CALL_OW 69
14709: ST_TO_ADDR
// if not tmp then
14710: LD_VAR 0 1
14714: NOT
14715: IFFALSE 14719
// exit ;
14717: GO 14732
// DestroyUnit ( tmp [ 1 ] ) ;
14719: LD_VAR 0 1
14723: PUSH
14724: LD_INT 1
14726: ARRAY
14727: PPUSH
14728: CALL_OW 65
// end ;
14732: PPOPN 1
14734: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
14735: LD_EXP 24
14739: PUSH
14740: LD_EXP 62
14744: AND
14745: IFFALSE 14874
14747: GO 14749
14749: DISABLE
14750: LD_INT 0
14752: PPUSH
// begin uc_side := 0 ;
14753: LD_ADDR_OWVAR 20
14757: PUSH
14758: LD_INT 0
14760: ST_TO_ADDR
// uc_nation := nation_arabian ;
14761: LD_ADDR_OWVAR 21
14765: PUSH
14766: LD_INT 2
14768: ST_TO_ADDR
// hc_gallery :=  ;
14769: LD_ADDR_OWVAR 33
14773: PUSH
14774: LD_STRING 
14776: ST_TO_ADDR
// hc_name :=  ;
14777: LD_ADDR_OWVAR 26
14781: PUSH
14782: LD_STRING 
14784: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
14785: LD_INT 1
14787: PPUSH
14788: LD_INT 11
14790: PPUSH
14791: LD_INT 10
14793: PPUSH
14794: CALL_OW 380
// un := CreateHuman ;
14798: LD_ADDR_VAR 0 1
14802: PUSH
14803: CALL_OW 44
14807: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14808: LD_VAR 0 1
14812: PPUSH
14813: LD_INT 1
14815: PPUSH
14816: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14820: LD_INT 35
14822: PPUSH
14823: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14827: LD_VAR 0 1
14831: PPUSH
14832: LD_INT 22
14834: PUSH
14835: LD_OWVAR 2
14839: PUSH
14840: EMPTY
14841: LIST
14842: LIST
14843: PPUSH
14844: CALL_OW 69
14848: PPUSH
14849: LD_VAR 0 1
14853: PPUSH
14854: CALL_OW 74
14858: PPUSH
14859: CALL_OW 115
// until IsDead ( un ) ;
14863: LD_VAR 0 1
14867: PPUSH
14868: CALL_OW 301
14872: IFFALSE 14820
// end ;
14874: PPOPN 1
14876: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
14877: LD_EXP 24
14881: PUSH
14882: LD_EXP 64
14886: AND
14887: IFFALSE 14899
14889: GO 14891
14891: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
14892: LD_STRING earthquake(getX(game), 0, 32)
14894: PPUSH
14895: CALL_OW 559
14899: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
14900: LD_EXP 24
14904: PUSH
14905: LD_EXP 65
14909: AND
14910: IFFALSE 15001
14912: GO 14914
14914: DISABLE
14915: LD_INT 0
14917: PPUSH
// begin enable ;
14918: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
14919: LD_ADDR_VAR 0 1
14923: PUSH
14924: LD_INT 22
14926: PUSH
14927: LD_OWVAR 2
14931: PUSH
14932: EMPTY
14933: LIST
14934: LIST
14935: PUSH
14936: LD_INT 21
14938: PUSH
14939: LD_INT 2
14941: PUSH
14942: EMPTY
14943: LIST
14944: LIST
14945: PUSH
14946: LD_INT 33
14948: PUSH
14949: LD_INT 3
14951: PUSH
14952: EMPTY
14953: LIST
14954: LIST
14955: PUSH
14956: EMPTY
14957: LIST
14958: LIST
14959: LIST
14960: PPUSH
14961: CALL_OW 69
14965: ST_TO_ADDR
// if not tmp then
14966: LD_VAR 0 1
14970: NOT
14971: IFFALSE 14975
// exit ;
14973: GO 15001
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14975: LD_VAR 0 1
14979: PUSH
14980: LD_INT 1
14982: PPUSH
14983: LD_VAR 0 1
14987: PPUSH
14988: CALL_OW 12
14992: ARRAY
14993: PPUSH
14994: LD_INT 1
14996: PPUSH
14997: CALL_OW 234
// end ;
15001: PPOPN 1
15003: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
15004: LD_EXP 24
15008: PUSH
15009: LD_EXP 66
15013: AND
15014: IFFALSE 15155
15016: GO 15018
15018: DISABLE
15019: LD_INT 0
15021: PPUSH
15022: PPUSH
15023: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15024: LD_ADDR_VAR 0 3
15028: PUSH
15029: LD_INT 22
15031: PUSH
15032: LD_OWVAR 2
15036: PUSH
15037: EMPTY
15038: LIST
15039: LIST
15040: PUSH
15041: LD_INT 25
15043: PUSH
15044: LD_INT 1
15046: PUSH
15047: EMPTY
15048: LIST
15049: LIST
15050: PUSH
15051: EMPTY
15052: LIST
15053: LIST
15054: PPUSH
15055: CALL_OW 69
15059: ST_TO_ADDR
// if not tmp then
15060: LD_VAR 0 3
15064: NOT
15065: IFFALSE 15069
// exit ;
15067: GO 15155
// un := tmp [ rand ( 1 , tmp ) ] ;
15069: LD_ADDR_VAR 0 2
15073: PUSH
15074: LD_VAR 0 3
15078: PUSH
15079: LD_INT 1
15081: PPUSH
15082: LD_VAR 0 3
15086: PPUSH
15087: CALL_OW 12
15091: ARRAY
15092: ST_TO_ADDR
// if Crawls ( un ) then
15093: LD_VAR 0 2
15097: PPUSH
15098: CALL_OW 318
15102: IFFALSE 15113
// ComWalk ( un ) ;
15104: LD_VAR 0 2
15108: PPUSH
15109: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
15113: LD_VAR 0 2
15117: PPUSH
15118: LD_INT 9
15120: PPUSH
15121: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
15125: LD_INT 28
15127: PPUSH
15128: LD_OWVAR 2
15132: PPUSH
15133: LD_INT 2
15135: PPUSH
15136: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
15140: LD_INT 29
15142: PPUSH
15143: LD_OWVAR 2
15147: PPUSH
15148: LD_INT 2
15150: PPUSH
15151: CALL_OW 322
// end ;
15155: PPOPN 3
15157: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
15158: LD_EXP 24
15162: PUSH
15163: LD_EXP 67
15167: AND
15168: IFFALSE 15279
15170: GO 15172
15172: DISABLE
15173: LD_INT 0
15175: PPUSH
15176: PPUSH
15177: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15178: LD_ADDR_VAR 0 3
15182: PUSH
15183: LD_INT 22
15185: PUSH
15186: LD_OWVAR 2
15190: PUSH
15191: EMPTY
15192: LIST
15193: LIST
15194: PUSH
15195: LD_INT 25
15197: PUSH
15198: LD_INT 1
15200: PUSH
15201: EMPTY
15202: LIST
15203: LIST
15204: PUSH
15205: EMPTY
15206: LIST
15207: LIST
15208: PPUSH
15209: CALL_OW 69
15213: ST_TO_ADDR
// if not tmp then
15214: LD_VAR 0 3
15218: NOT
15219: IFFALSE 15223
// exit ;
15221: GO 15279
// un := tmp [ rand ( 1 , tmp ) ] ;
15223: LD_ADDR_VAR 0 2
15227: PUSH
15228: LD_VAR 0 3
15232: PUSH
15233: LD_INT 1
15235: PPUSH
15236: LD_VAR 0 3
15240: PPUSH
15241: CALL_OW 12
15245: ARRAY
15246: ST_TO_ADDR
// if Crawls ( un ) then
15247: LD_VAR 0 2
15251: PPUSH
15252: CALL_OW 318
15256: IFFALSE 15267
// ComWalk ( un ) ;
15258: LD_VAR 0 2
15262: PPUSH
15263: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15267: LD_VAR 0 2
15271: PPUSH
15272: LD_INT 8
15274: PPUSH
15275: CALL_OW 336
// end ;
15279: PPOPN 3
15281: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
15282: LD_EXP 24
15286: PUSH
15287: LD_EXP 68
15291: AND
15292: IFFALSE 15436
15294: GO 15296
15296: DISABLE
15297: LD_INT 0
15299: PPUSH
15300: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
15301: LD_ADDR_VAR 0 2
15305: PUSH
15306: LD_INT 22
15308: PUSH
15309: LD_OWVAR 2
15313: PUSH
15314: EMPTY
15315: LIST
15316: LIST
15317: PUSH
15318: LD_INT 21
15320: PUSH
15321: LD_INT 2
15323: PUSH
15324: EMPTY
15325: LIST
15326: LIST
15327: PUSH
15328: LD_INT 2
15330: PUSH
15331: LD_INT 34
15333: PUSH
15334: LD_INT 12
15336: PUSH
15337: EMPTY
15338: LIST
15339: LIST
15340: PUSH
15341: LD_INT 34
15343: PUSH
15344: LD_INT 51
15346: PUSH
15347: EMPTY
15348: LIST
15349: LIST
15350: PUSH
15351: LD_INT 34
15353: PUSH
15354: LD_INT 32
15356: PUSH
15357: EMPTY
15358: LIST
15359: LIST
15360: PUSH
15361: EMPTY
15362: LIST
15363: LIST
15364: LIST
15365: LIST
15366: PUSH
15367: EMPTY
15368: LIST
15369: LIST
15370: LIST
15371: PPUSH
15372: CALL_OW 69
15376: ST_TO_ADDR
// if not tmp then
15377: LD_VAR 0 2
15381: NOT
15382: IFFALSE 15386
// exit ;
15384: GO 15436
// for i in tmp do
15386: LD_ADDR_VAR 0 1
15390: PUSH
15391: LD_VAR 0 2
15395: PUSH
15396: FOR_IN
15397: IFFALSE 15434
// if GetCargo ( i , mat_artifact ) = 0 then
15399: LD_VAR 0 1
15403: PPUSH
15404: LD_INT 4
15406: PPUSH
15407: CALL_OW 289
15411: PUSH
15412: LD_INT 0
15414: EQUAL
15415: IFFALSE 15432
// SetCargo ( i , mat_siberit , 100 ) ;
15417: LD_VAR 0 1
15421: PPUSH
15422: LD_INT 3
15424: PPUSH
15425: LD_INT 100
15427: PPUSH
15428: CALL_OW 290
15432: GO 15396
15434: POP
15435: POP
// end ;
15436: PPOPN 2
15438: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
15439: LD_EXP 24
15443: PUSH
15444: LD_EXP 69
15448: AND
15449: IFFALSE 15632
15451: GO 15453
15453: DISABLE
15454: LD_INT 0
15456: PPUSH
15457: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
15458: LD_ADDR_VAR 0 2
15462: PUSH
15463: LD_INT 22
15465: PUSH
15466: LD_OWVAR 2
15470: PUSH
15471: EMPTY
15472: LIST
15473: LIST
15474: PPUSH
15475: CALL_OW 69
15479: ST_TO_ADDR
// if not tmp then
15480: LD_VAR 0 2
15484: NOT
15485: IFFALSE 15489
// exit ;
15487: GO 15632
// for i := 1 to 2 do
15489: LD_ADDR_VAR 0 1
15493: PUSH
15494: DOUBLE
15495: LD_INT 1
15497: DEC
15498: ST_TO_ADDR
15499: LD_INT 2
15501: PUSH
15502: FOR_TO
15503: IFFALSE 15630
// begin uc_side := your_side ;
15505: LD_ADDR_OWVAR 20
15509: PUSH
15510: LD_OWVAR 2
15514: ST_TO_ADDR
// uc_nation := nation_american ;
15515: LD_ADDR_OWVAR 21
15519: PUSH
15520: LD_INT 1
15522: ST_TO_ADDR
// vc_chassis := us_morphling ;
15523: LD_ADDR_OWVAR 37
15527: PUSH
15528: LD_INT 5
15530: ST_TO_ADDR
// vc_engine := engine_siberite ;
15531: LD_ADDR_OWVAR 39
15535: PUSH
15536: LD_INT 3
15538: ST_TO_ADDR
// vc_control := control_computer ;
15539: LD_ADDR_OWVAR 38
15543: PUSH
15544: LD_INT 3
15546: ST_TO_ADDR
// vc_weapon := us_double_laser ;
15547: LD_ADDR_OWVAR 40
15551: PUSH
15552: LD_INT 10
15554: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
15555: LD_VAR 0 2
15559: PUSH
15560: LD_INT 1
15562: ARRAY
15563: PPUSH
15564: CALL_OW 310
15568: NOT
15569: IFFALSE 15616
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
15571: CALL_OW 45
15575: PPUSH
15576: LD_VAR 0 2
15580: PUSH
15581: LD_INT 1
15583: ARRAY
15584: PPUSH
15585: CALL_OW 250
15589: PPUSH
15590: LD_VAR 0 2
15594: PUSH
15595: LD_INT 1
15597: ARRAY
15598: PPUSH
15599: CALL_OW 251
15603: PPUSH
15604: LD_INT 12
15606: PPUSH
15607: LD_INT 1
15609: PPUSH
15610: CALL_OW 50
15614: GO 15628
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
15616: CALL_OW 45
15620: PPUSH
15621: LD_INT 1
15623: PPUSH
15624: CALL_OW 51
// end ;
15628: GO 15502
15630: POP
15631: POP
// end ;
15632: PPOPN 2
15634: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
15635: LD_EXP 24
15639: PUSH
15640: LD_EXP 70
15644: AND
15645: IFFALSE 15867
15647: GO 15649
15649: DISABLE
15650: LD_INT 0
15652: PPUSH
15653: PPUSH
15654: PPUSH
15655: PPUSH
15656: PPUSH
15657: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15658: LD_ADDR_VAR 0 6
15662: PUSH
15663: LD_INT 22
15665: PUSH
15666: LD_OWVAR 2
15670: PUSH
15671: EMPTY
15672: LIST
15673: LIST
15674: PUSH
15675: LD_INT 21
15677: PUSH
15678: LD_INT 1
15680: PUSH
15681: EMPTY
15682: LIST
15683: LIST
15684: PUSH
15685: LD_INT 3
15687: PUSH
15688: LD_INT 23
15690: PUSH
15691: LD_INT 0
15693: PUSH
15694: EMPTY
15695: LIST
15696: LIST
15697: PUSH
15698: EMPTY
15699: LIST
15700: LIST
15701: PUSH
15702: EMPTY
15703: LIST
15704: LIST
15705: LIST
15706: PPUSH
15707: CALL_OW 69
15711: ST_TO_ADDR
// if not tmp then
15712: LD_VAR 0 6
15716: NOT
15717: IFFALSE 15721
// exit ;
15719: GO 15867
// s1 := rand ( 1 , 4 ) ;
15721: LD_ADDR_VAR 0 2
15725: PUSH
15726: LD_INT 1
15728: PPUSH
15729: LD_INT 4
15731: PPUSH
15732: CALL_OW 12
15736: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
15737: LD_ADDR_VAR 0 4
15741: PUSH
15742: LD_VAR 0 6
15746: PUSH
15747: LD_INT 1
15749: ARRAY
15750: PPUSH
15751: LD_VAR 0 2
15755: PPUSH
15756: CALL_OW 259
15760: ST_TO_ADDR
// if s1 = 1 then
15761: LD_VAR 0 2
15765: PUSH
15766: LD_INT 1
15768: EQUAL
15769: IFFALSE 15789
// s2 := rand ( 2 , 4 ) else
15771: LD_ADDR_VAR 0 3
15775: PUSH
15776: LD_INT 2
15778: PPUSH
15779: LD_INT 4
15781: PPUSH
15782: CALL_OW 12
15786: ST_TO_ADDR
15787: GO 15797
// s2 := 1 ;
15789: LD_ADDR_VAR 0 3
15793: PUSH
15794: LD_INT 1
15796: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
15797: LD_ADDR_VAR 0 5
15801: PUSH
15802: LD_VAR 0 6
15806: PUSH
15807: LD_INT 1
15809: ARRAY
15810: PPUSH
15811: LD_VAR 0 3
15815: PPUSH
15816: CALL_OW 259
15820: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
15821: LD_VAR 0 6
15825: PUSH
15826: LD_INT 1
15828: ARRAY
15829: PPUSH
15830: LD_VAR 0 2
15834: PPUSH
15835: LD_VAR 0 5
15839: PPUSH
15840: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
15844: LD_VAR 0 6
15848: PUSH
15849: LD_INT 1
15851: ARRAY
15852: PPUSH
15853: LD_VAR 0 3
15857: PPUSH
15858: LD_VAR 0 4
15862: PPUSH
15863: CALL_OW 237
// end ;
15867: PPOPN 6
15869: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
15870: LD_EXP 24
15874: PUSH
15875: LD_EXP 71
15879: AND
15880: IFFALSE 15959
15882: GO 15884
15884: DISABLE
15885: LD_INT 0
15887: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
15888: LD_ADDR_VAR 0 1
15892: PUSH
15893: LD_INT 22
15895: PUSH
15896: LD_OWVAR 2
15900: PUSH
15901: EMPTY
15902: LIST
15903: LIST
15904: PUSH
15905: LD_INT 30
15907: PUSH
15908: LD_INT 3
15910: PUSH
15911: EMPTY
15912: LIST
15913: LIST
15914: PUSH
15915: EMPTY
15916: LIST
15917: LIST
15918: PPUSH
15919: CALL_OW 69
15923: ST_TO_ADDR
// if not tmp then
15924: LD_VAR 0 1
15928: NOT
15929: IFFALSE 15933
// exit ;
15931: GO 15959
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15933: LD_VAR 0 1
15937: PUSH
15938: LD_INT 1
15940: PPUSH
15941: LD_VAR 0 1
15945: PPUSH
15946: CALL_OW 12
15950: ARRAY
15951: PPUSH
15952: LD_INT 1
15954: PPUSH
15955: CALL_OW 234
// end ;
15959: PPOPN 1
15961: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
15962: LD_EXP 24
15966: PUSH
15967: LD_EXP 72
15971: AND
15972: IFFALSE 16084
15974: GO 15976
15976: DISABLE
15977: LD_INT 0
15979: PPUSH
15980: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
15981: LD_ADDR_VAR 0 2
15985: PUSH
15986: LD_INT 22
15988: PUSH
15989: LD_OWVAR 2
15993: PUSH
15994: EMPTY
15995: LIST
15996: LIST
15997: PUSH
15998: LD_INT 2
16000: PUSH
16001: LD_INT 30
16003: PUSH
16004: LD_INT 27
16006: PUSH
16007: EMPTY
16008: LIST
16009: LIST
16010: PUSH
16011: LD_INT 30
16013: PUSH
16014: LD_INT 26
16016: PUSH
16017: EMPTY
16018: LIST
16019: LIST
16020: PUSH
16021: LD_INT 30
16023: PUSH
16024: LD_INT 28
16026: PUSH
16027: EMPTY
16028: LIST
16029: LIST
16030: PUSH
16031: EMPTY
16032: LIST
16033: LIST
16034: LIST
16035: LIST
16036: PUSH
16037: EMPTY
16038: LIST
16039: LIST
16040: PPUSH
16041: CALL_OW 69
16045: ST_TO_ADDR
// if not tmp then
16046: LD_VAR 0 2
16050: NOT
16051: IFFALSE 16055
// exit ;
16053: GO 16084
// for i in tmp do
16055: LD_ADDR_VAR 0 1
16059: PUSH
16060: LD_VAR 0 2
16064: PUSH
16065: FOR_IN
16066: IFFALSE 16082
// SetLives ( i , 1 ) ;
16068: LD_VAR 0 1
16072: PPUSH
16073: LD_INT 1
16075: PPUSH
16076: CALL_OW 234
16080: GO 16065
16082: POP
16083: POP
// end ;
16084: PPOPN 2
16086: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
16087: LD_EXP 24
16091: PUSH
16092: LD_EXP 73
16096: AND
16097: IFFALSE 16371
16099: GO 16101
16101: DISABLE
16102: LD_INT 0
16104: PPUSH
16105: PPUSH
16106: PPUSH
// begin i := rand ( 1 , 7 ) ;
16107: LD_ADDR_VAR 0 1
16111: PUSH
16112: LD_INT 1
16114: PPUSH
16115: LD_INT 7
16117: PPUSH
16118: CALL_OW 12
16122: ST_TO_ADDR
// case i of 1 :
16123: LD_VAR 0 1
16127: PUSH
16128: LD_INT 1
16130: DOUBLE
16131: EQUAL
16132: IFTRUE 16136
16134: GO 16146
16136: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
16137: LD_STRING earthquake(getX(game), 0, 32)
16139: PPUSH
16140: CALL_OW 559
16144: GO 16371
16146: LD_INT 2
16148: DOUBLE
16149: EQUAL
16150: IFTRUE 16154
16152: GO 16168
16154: POP
// begin ToLua ( displayStucuk(); ) ;
16155: LD_STRING displayStucuk();
16157: PPUSH
16158: CALL_OW 559
// ResetFog ;
16162: CALL_OW 335
// end ; 3 :
16166: GO 16371
16168: LD_INT 3
16170: DOUBLE
16171: EQUAL
16172: IFTRUE 16176
16174: GO 16280
16176: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16177: LD_ADDR_VAR 0 2
16181: PUSH
16182: LD_INT 22
16184: PUSH
16185: LD_OWVAR 2
16189: PUSH
16190: EMPTY
16191: LIST
16192: LIST
16193: PUSH
16194: LD_INT 25
16196: PUSH
16197: LD_INT 1
16199: PUSH
16200: EMPTY
16201: LIST
16202: LIST
16203: PUSH
16204: EMPTY
16205: LIST
16206: LIST
16207: PPUSH
16208: CALL_OW 69
16212: ST_TO_ADDR
// if not tmp then
16213: LD_VAR 0 2
16217: NOT
16218: IFFALSE 16222
// exit ;
16220: GO 16371
// un := tmp [ rand ( 1 , tmp ) ] ;
16222: LD_ADDR_VAR 0 3
16226: PUSH
16227: LD_VAR 0 2
16231: PUSH
16232: LD_INT 1
16234: PPUSH
16235: LD_VAR 0 2
16239: PPUSH
16240: CALL_OW 12
16244: ARRAY
16245: ST_TO_ADDR
// if Crawls ( un ) then
16246: LD_VAR 0 3
16250: PPUSH
16251: CALL_OW 318
16255: IFFALSE 16266
// ComWalk ( un ) ;
16257: LD_VAR 0 3
16261: PPUSH
16262: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16266: LD_VAR 0 3
16270: PPUSH
16271: LD_INT 8
16273: PPUSH
16274: CALL_OW 336
// end ; 4 :
16278: GO 16371
16280: LD_INT 4
16282: DOUBLE
16283: EQUAL
16284: IFTRUE 16288
16286: GO 16349
16288: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16289: LD_ADDR_VAR 0 2
16293: PUSH
16294: LD_INT 22
16296: PUSH
16297: LD_OWVAR 2
16301: PUSH
16302: EMPTY
16303: LIST
16304: LIST
16305: PUSH
16306: LD_INT 30
16308: PUSH
16309: LD_INT 29
16311: PUSH
16312: EMPTY
16313: LIST
16314: LIST
16315: PUSH
16316: EMPTY
16317: LIST
16318: LIST
16319: PPUSH
16320: CALL_OW 69
16324: ST_TO_ADDR
// if not tmp then
16325: LD_VAR 0 2
16329: NOT
16330: IFFALSE 16334
// exit ;
16332: GO 16371
// DestroyUnit ( tmp [ 1 ] ) ;
16334: LD_VAR 0 2
16338: PUSH
16339: LD_INT 1
16341: ARRAY
16342: PPUSH
16343: CALL_OW 65
// end ; 5 .. 7 :
16347: GO 16371
16349: LD_INT 5
16351: DOUBLE
16352: GREATEREQUAL
16353: IFFALSE 16361
16355: LD_INT 7
16357: DOUBLE
16358: LESSEQUAL
16359: IFTRUE 16363
16361: GO 16370
16363: POP
// StreamSibBomb ; end ;
16364: CALL 12621 0 0
16368: GO 16371
16370: POP
// end ;
16371: PPOPN 3
16373: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
16374: LD_EXP 24
16378: PUSH
16379: LD_EXP 74
16383: AND
16384: IFFALSE 16540
16386: GO 16388
16388: DISABLE
16389: LD_INT 0
16391: PPUSH
16392: PPUSH
16393: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
16394: LD_ADDR_VAR 0 2
16398: PUSH
16399: LD_INT 81
16401: PUSH
16402: LD_OWVAR 2
16406: PUSH
16407: EMPTY
16408: LIST
16409: LIST
16410: PUSH
16411: LD_INT 2
16413: PUSH
16414: LD_INT 21
16416: PUSH
16417: LD_INT 1
16419: PUSH
16420: EMPTY
16421: LIST
16422: LIST
16423: PUSH
16424: LD_INT 21
16426: PUSH
16427: LD_INT 2
16429: PUSH
16430: EMPTY
16431: LIST
16432: LIST
16433: PUSH
16434: EMPTY
16435: LIST
16436: LIST
16437: LIST
16438: PUSH
16439: EMPTY
16440: LIST
16441: LIST
16442: PPUSH
16443: CALL_OW 69
16447: ST_TO_ADDR
// if not tmp then
16448: LD_VAR 0 2
16452: NOT
16453: IFFALSE 16457
// exit ;
16455: GO 16540
// p := 0 ;
16457: LD_ADDR_VAR 0 3
16461: PUSH
16462: LD_INT 0
16464: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16465: LD_INT 35
16467: PPUSH
16468: CALL_OW 67
// p := p + 1 ;
16472: LD_ADDR_VAR 0 3
16476: PUSH
16477: LD_VAR 0 3
16481: PUSH
16482: LD_INT 1
16484: PLUS
16485: ST_TO_ADDR
// for i in tmp do
16486: LD_ADDR_VAR 0 1
16490: PUSH
16491: LD_VAR 0 2
16495: PUSH
16496: FOR_IN
16497: IFFALSE 16528
// if GetLives ( i ) < 1000 then
16499: LD_VAR 0 1
16503: PPUSH
16504: CALL_OW 256
16508: PUSH
16509: LD_INT 1000
16511: LESS
16512: IFFALSE 16526
// SetLives ( i , 1000 ) ;
16514: LD_VAR 0 1
16518: PPUSH
16519: LD_INT 1000
16521: PPUSH
16522: CALL_OW 234
16526: GO 16496
16528: POP
16529: POP
// until p > 20 ;
16530: LD_VAR 0 3
16534: PUSH
16535: LD_INT 20
16537: GREATER
16538: IFFALSE 16465
// end ;
16540: PPOPN 3
16542: END
// every 0 0$1 trigger StreamModeActive and sTime do
16543: LD_EXP 24
16547: PUSH
16548: LD_EXP 75
16552: AND
16553: IFFALSE 16588
16555: GO 16557
16557: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
16558: LD_INT 28
16560: PPUSH
16561: LD_OWVAR 2
16565: PPUSH
16566: LD_INT 2
16568: PPUSH
16569: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
16573: LD_INT 30
16575: PPUSH
16576: LD_OWVAR 2
16580: PPUSH
16581: LD_INT 2
16583: PPUSH
16584: CALL_OW 322
// end ;
16588: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
16589: LD_EXP 24
16593: PUSH
16594: LD_EXP 76
16598: AND
16599: IFFALSE 16720
16601: GO 16603
16603: DISABLE
16604: LD_INT 0
16606: PPUSH
16607: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16608: LD_ADDR_VAR 0 2
16612: PUSH
16613: LD_INT 22
16615: PUSH
16616: LD_OWVAR 2
16620: PUSH
16621: EMPTY
16622: LIST
16623: LIST
16624: PUSH
16625: LD_INT 21
16627: PUSH
16628: LD_INT 1
16630: PUSH
16631: EMPTY
16632: LIST
16633: LIST
16634: PUSH
16635: LD_INT 3
16637: PUSH
16638: LD_INT 23
16640: PUSH
16641: LD_INT 0
16643: PUSH
16644: EMPTY
16645: LIST
16646: LIST
16647: PUSH
16648: EMPTY
16649: LIST
16650: LIST
16651: PUSH
16652: EMPTY
16653: LIST
16654: LIST
16655: LIST
16656: PPUSH
16657: CALL_OW 69
16661: ST_TO_ADDR
// if not tmp then
16662: LD_VAR 0 2
16666: NOT
16667: IFFALSE 16671
// exit ;
16669: GO 16720
// for i in tmp do
16671: LD_ADDR_VAR 0 1
16675: PUSH
16676: LD_VAR 0 2
16680: PUSH
16681: FOR_IN
16682: IFFALSE 16718
// begin if Crawls ( i ) then
16684: LD_VAR 0 1
16688: PPUSH
16689: CALL_OW 318
16693: IFFALSE 16704
// ComWalk ( i ) ;
16695: LD_VAR 0 1
16699: PPUSH
16700: CALL_OW 138
// SetClass ( i , 2 ) ;
16704: LD_VAR 0 1
16708: PPUSH
16709: LD_INT 2
16711: PPUSH
16712: CALL_OW 336
// end ;
16716: GO 16681
16718: POP
16719: POP
// end ;
16720: PPOPN 2
16722: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
16723: LD_EXP 24
16727: PUSH
16728: LD_EXP 77
16732: AND
16733: IFFALSE 17014
16735: GO 16737
16737: DISABLE
16738: LD_INT 0
16740: PPUSH
16741: PPUSH
16742: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
16743: LD_OWVAR 2
16747: PPUSH
16748: LD_INT 9
16750: PPUSH
16751: LD_INT 1
16753: PPUSH
16754: LD_INT 1
16756: PPUSH
16757: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
16761: LD_INT 9
16763: PPUSH
16764: LD_OWVAR 2
16768: PPUSH
16769: CALL_OW 343
// uc_side := 9 ;
16773: LD_ADDR_OWVAR 20
16777: PUSH
16778: LD_INT 9
16780: ST_TO_ADDR
// uc_nation := 2 ;
16781: LD_ADDR_OWVAR 21
16785: PUSH
16786: LD_INT 2
16788: ST_TO_ADDR
// hc_name := Dark Warrior ;
16789: LD_ADDR_OWVAR 26
16793: PUSH
16794: LD_STRING Dark Warrior
16796: ST_TO_ADDR
// hc_gallery :=  ;
16797: LD_ADDR_OWVAR 33
16801: PUSH
16802: LD_STRING 
16804: ST_TO_ADDR
// hc_noskilllimit := true ;
16805: LD_ADDR_OWVAR 76
16809: PUSH
16810: LD_INT 1
16812: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
16813: LD_ADDR_OWVAR 31
16817: PUSH
16818: LD_INT 30
16820: PUSH
16821: LD_INT 30
16823: PUSH
16824: LD_INT 30
16826: PUSH
16827: LD_INT 30
16829: PUSH
16830: EMPTY
16831: LIST
16832: LIST
16833: LIST
16834: LIST
16835: ST_TO_ADDR
// un := CreateHuman ;
16836: LD_ADDR_VAR 0 3
16840: PUSH
16841: CALL_OW 44
16845: ST_TO_ADDR
// hc_noskilllimit := false ;
16846: LD_ADDR_OWVAR 76
16850: PUSH
16851: LD_INT 0
16853: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16854: LD_VAR 0 3
16858: PPUSH
16859: LD_INT 1
16861: PPUSH
16862: CALL_OW 51
// p := 0 ;
16866: LD_ADDR_VAR 0 2
16870: PUSH
16871: LD_INT 0
16873: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16874: LD_INT 35
16876: PPUSH
16877: CALL_OW 67
// p := p + 1 ;
16881: LD_ADDR_VAR 0 2
16885: PUSH
16886: LD_VAR 0 2
16890: PUSH
16891: LD_INT 1
16893: PLUS
16894: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
16895: LD_VAR 0 3
16899: PPUSH
16900: CALL_OW 256
16904: PUSH
16905: LD_INT 1000
16907: LESS
16908: IFFALSE 16922
// SetLives ( un , 1000 ) ;
16910: LD_VAR 0 3
16914: PPUSH
16915: LD_INT 1000
16917: PPUSH
16918: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
16922: LD_VAR 0 3
16926: PPUSH
16927: LD_INT 81
16929: PUSH
16930: LD_OWVAR 2
16934: PUSH
16935: EMPTY
16936: LIST
16937: LIST
16938: PUSH
16939: LD_INT 91
16941: PUSH
16942: LD_VAR 0 3
16946: PUSH
16947: LD_INT 30
16949: PUSH
16950: EMPTY
16951: LIST
16952: LIST
16953: LIST
16954: PUSH
16955: EMPTY
16956: LIST
16957: LIST
16958: PPUSH
16959: CALL_OW 69
16963: PPUSH
16964: LD_VAR 0 3
16968: PPUSH
16969: CALL_OW 74
16973: PPUSH
16974: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
16978: LD_VAR 0 2
16982: PUSH
16983: LD_INT 60
16985: GREATER
16986: PUSH
16987: LD_VAR 0 3
16991: PPUSH
16992: CALL_OW 301
16996: OR
16997: IFFALSE 16874
// if un then
16999: LD_VAR 0 3
17003: IFFALSE 17014
// RemoveUnit ( un ) ;
17005: LD_VAR 0 3
17009: PPUSH
17010: CALL_OW 64
// end ;
17014: PPOPN 3
17016: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17017: LD_INT 0
17019: PPUSH
// case cmd of 301 :
17020: LD_VAR 0 1
17024: PUSH
17025: LD_INT 301
17027: DOUBLE
17028: EQUAL
17029: IFTRUE 17033
17031: GO 17065
17033: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
17034: LD_VAR 0 6
17038: PPUSH
17039: LD_VAR 0 7
17043: PPUSH
17044: LD_VAR 0 8
17048: PPUSH
17049: LD_VAR 0 4
17053: PPUSH
17054: LD_VAR 0 5
17058: PPUSH
17059: CALL 18266 0 5
17063: GO 17186
17065: LD_INT 302
17067: DOUBLE
17068: EQUAL
17069: IFTRUE 17073
17071: GO 17110
17073: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
17074: LD_VAR 0 6
17078: PPUSH
17079: LD_VAR 0 7
17083: PPUSH
17084: LD_VAR 0 8
17088: PPUSH
17089: LD_VAR 0 9
17093: PPUSH
17094: LD_VAR 0 4
17098: PPUSH
17099: LD_VAR 0 5
17103: PPUSH
17104: CALL 18357 0 6
17108: GO 17186
17110: LD_INT 303
17112: DOUBLE
17113: EQUAL
17114: IFTRUE 17118
17116: GO 17155
17118: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
17119: LD_VAR 0 6
17123: PPUSH
17124: LD_VAR 0 7
17128: PPUSH
17129: LD_VAR 0 8
17133: PPUSH
17134: LD_VAR 0 9
17138: PPUSH
17139: LD_VAR 0 4
17143: PPUSH
17144: LD_VAR 0 5
17148: PPUSH
17149: CALL 17191 0 6
17153: GO 17186
17155: LD_INT 304
17157: DOUBLE
17158: EQUAL
17159: IFTRUE 17163
17161: GO 17185
17163: POP
// hHackTeleport ( unit , x , y ) ; end ;
17164: LD_VAR 0 2
17168: PPUSH
17169: LD_VAR 0 4
17173: PPUSH
17174: LD_VAR 0 5
17178: PPUSH
17179: CALL 18950 0 3
17183: GO 17186
17185: POP
// end ;
17186: LD_VAR 0 12
17190: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
17191: LD_INT 0
17193: PPUSH
17194: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
17195: LD_VAR 0 1
17199: PUSH
17200: LD_INT 1
17202: LESS
17203: PUSH
17204: LD_VAR 0 1
17208: PUSH
17209: LD_INT 3
17211: GREATER
17212: OR
17213: PUSH
17214: LD_VAR 0 5
17218: PPUSH
17219: LD_VAR 0 6
17223: PPUSH
17224: CALL_OW 428
17228: OR
17229: IFFALSE 17233
// exit ;
17231: GO 17953
// uc_side := your_side ;
17233: LD_ADDR_OWVAR 20
17237: PUSH
17238: LD_OWVAR 2
17242: ST_TO_ADDR
// uc_nation := nation ;
17243: LD_ADDR_OWVAR 21
17247: PUSH
17248: LD_VAR 0 1
17252: ST_TO_ADDR
// bc_level = 1 ;
17253: LD_ADDR_OWVAR 43
17257: PUSH
17258: LD_INT 1
17260: ST_TO_ADDR
// case btype of 1 :
17261: LD_VAR 0 2
17265: PUSH
17266: LD_INT 1
17268: DOUBLE
17269: EQUAL
17270: IFTRUE 17274
17272: GO 17285
17274: POP
// bc_type := b_depot ; 2 :
17275: LD_ADDR_OWVAR 42
17279: PUSH
17280: LD_INT 0
17282: ST_TO_ADDR
17283: GO 17897
17285: LD_INT 2
17287: DOUBLE
17288: EQUAL
17289: IFTRUE 17293
17291: GO 17304
17293: POP
// bc_type := b_warehouse ; 3 :
17294: LD_ADDR_OWVAR 42
17298: PUSH
17299: LD_INT 1
17301: ST_TO_ADDR
17302: GO 17897
17304: LD_INT 3
17306: DOUBLE
17307: EQUAL
17308: IFTRUE 17312
17310: GO 17323
17312: POP
// bc_type := b_lab ; 4 .. 9 :
17313: LD_ADDR_OWVAR 42
17317: PUSH
17318: LD_INT 6
17320: ST_TO_ADDR
17321: GO 17897
17323: LD_INT 4
17325: DOUBLE
17326: GREATEREQUAL
17327: IFFALSE 17335
17329: LD_INT 9
17331: DOUBLE
17332: LESSEQUAL
17333: IFTRUE 17337
17335: GO 17389
17337: POP
// begin bc_type := b_lab_half ;
17338: LD_ADDR_OWVAR 42
17342: PUSH
17343: LD_INT 7
17345: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
17346: LD_ADDR_OWVAR 44
17350: PUSH
17351: LD_INT 10
17353: PUSH
17354: LD_INT 11
17356: PUSH
17357: LD_INT 12
17359: PUSH
17360: LD_INT 15
17362: PUSH
17363: LD_INT 14
17365: PUSH
17366: LD_INT 13
17368: PUSH
17369: EMPTY
17370: LIST
17371: LIST
17372: LIST
17373: LIST
17374: LIST
17375: LIST
17376: PUSH
17377: LD_VAR 0 2
17381: PUSH
17382: LD_INT 3
17384: MINUS
17385: ARRAY
17386: ST_TO_ADDR
// end ; 10 .. 13 :
17387: GO 17897
17389: LD_INT 10
17391: DOUBLE
17392: GREATEREQUAL
17393: IFFALSE 17401
17395: LD_INT 13
17397: DOUBLE
17398: LESSEQUAL
17399: IFTRUE 17403
17401: GO 17480
17403: POP
// begin bc_type := b_lab_full ;
17404: LD_ADDR_OWVAR 42
17408: PUSH
17409: LD_INT 8
17411: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
17412: LD_ADDR_OWVAR 44
17416: PUSH
17417: LD_INT 10
17419: PUSH
17420: LD_INT 12
17422: PUSH
17423: LD_INT 14
17425: PUSH
17426: LD_INT 13
17428: PUSH
17429: EMPTY
17430: LIST
17431: LIST
17432: LIST
17433: LIST
17434: PUSH
17435: LD_VAR 0 2
17439: PUSH
17440: LD_INT 9
17442: MINUS
17443: ARRAY
17444: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
17445: LD_ADDR_OWVAR 45
17449: PUSH
17450: LD_INT 11
17452: PUSH
17453: LD_INT 15
17455: PUSH
17456: LD_INT 12
17458: PUSH
17459: LD_INT 15
17461: PUSH
17462: EMPTY
17463: LIST
17464: LIST
17465: LIST
17466: LIST
17467: PUSH
17468: LD_VAR 0 2
17472: PUSH
17473: LD_INT 9
17475: MINUS
17476: ARRAY
17477: ST_TO_ADDR
// end ; 14 :
17478: GO 17897
17480: LD_INT 14
17482: DOUBLE
17483: EQUAL
17484: IFTRUE 17488
17486: GO 17499
17488: POP
// bc_type := b_workshop ; 15 :
17489: LD_ADDR_OWVAR 42
17493: PUSH
17494: LD_INT 2
17496: ST_TO_ADDR
17497: GO 17897
17499: LD_INT 15
17501: DOUBLE
17502: EQUAL
17503: IFTRUE 17507
17505: GO 17518
17507: POP
// bc_type := b_factory ; 16 :
17508: LD_ADDR_OWVAR 42
17512: PUSH
17513: LD_INT 3
17515: ST_TO_ADDR
17516: GO 17897
17518: LD_INT 16
17520: DOUBLE
17521: EQUAL
17522: IFTRUE 17526
17524: GO 17537
17526: POP
// bc_type := b_ext_gun ; 17 :
17527: LD_ADDR_OWVAR 42
17531: PUSH
17532: LD_INT 17
17534: ST_TO_ADDR
17535: GO 17897
17537: LD_INT 17
17539: DOUBLE
17540: EQUAL
17541: IFTRUE 17545
17543: GO 17573
17545: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
17546: LD_ADDR_OWVAR 42
17550: PUSH
17551: LD_INT 19
17553: PUSH
17554: LD_INT 23
17556: PUSH
17557: LD_INT 19
17559: PUSH
17560: EMPTY
17561: LIST
17562: LIST
17563: LIST
17564: PUSH
17565: LD_VAR 0 1
17569: ARRAY
17570: ST_TO_ADDR
17571: GO 17897
17573: LD_INT 18
17575: DOUBLE
17576: EQUAL
17577: IFTRUE 17581
17579: GO 17592
17581: POP
// bc_type := b_ext_radar ; 19 :
17582: LD_ADDR_OWVAR 42
17586: PUSH
17587: LD_INT 20
17589: ST_TO_ADDR
17590: GO 17897
17592: LD_INT 19
17594: DOUBLE
17595: EQUAL
17596: IFTRUE 17600
17598: GO 17611
17600: POP
// bc_type := b_ext_radio ; 20 :
17601: LD_ADDR_OWVAR 42
17605: PUSH
17606: LD_INT 22
17608: ST_TO_ADDR
17609: GO 17897
17611: LD_INT 20
17613: DOUBLE
17614: EQUAL
17615: IFTRUE 17619
17617: GO 17630
17619: POP
// bc_type := b_ext_siberium ; 21 :
17620: LD_ADDR_OWVAR 42
17624: PUSH
17625: LD_INT 21
17627: ST_TO_ADDR
17628: GO 17897
17630: LD_INT 21
17632: DOUBLE
17633: EQUAL
17634: IFTRUE 17638
17636: GO 17649
17638: POP
// bc_type := b_ext_computer ; 22 :
17639: LD_ADDR_OWVAR 42
17643: PUSH
17644: LD_INT 24
17646: ST_TO_ADDR
17647: GO 17897
17649: LD_INT 22
17651: DOUBLE
17652: EQUAL
17653: IFTRUE 17657
17655: GO 17668
17657: POP
// bc_type := b_ext_track ; 23 :
17658: LD_ADDR_OWVAR 42
17662: PUSH
17663: LD_INT 16
17665: ST_TO_ADDR
17666: GO 17897
17668: LD_INT 23
17670: DOUBLE
17671: EQUAL
17672: IFTRUE 17676
17674: GO 17687
17676: POP
// bc_type := b_ext_laser ; 24 :
17677: LD_ADDR_OWVAR 42
17681: PUSH
17682: LD_INT 25
17684: ST_TO_ADDR
17685: GO 17897
17687: LD_INT 24
17689: DOUBLE
17690: EQUAL
17691: IFTRUE 17695
17693: GO 17706
17695: POP
// bc_type := b_control_tower ; 25 :
17696: LD_ADDR_OWVAR 42
17700: PUSH
17701: LD_INT 36
17703: ST_TO_ADDR
17704: GO 17897
17706: LD_INT 25
17708: DOUBLE
17709: EQUAL
17710: IFTRUE 17714
17712: GO 17725
17714: POP
// bc_type := b_breastwork ; 26 :
17715: LD_ADDR_OWVAR 42
17719: PUSH
17720: LD_INT 31
17722: ST_TO_ADDR
17723: GO 17897
17725: LD_INT 26
17727: DOUBLE
17728: EQUAL
17729: IFTRUE 17733
17731: GO 17744
17733: POP
// bc_type := b_bunker ; 27 :
17734: LD_ADDR_OWVAR 42
17738: PUSH
17739: LD_INT 32
17741: ST_TO_ADDR
17742: GO 17897
17744: LD_INT 27
17746: DOUBLE
17747: EQUAL
17748: IFTRUE 17752
17750: GO 17763
17752: POP
// bc_type := b_turret ; 28 :
17753: LD_ADDR_OWVAR 42
17757: PUSH
17758: LD_INT 33
17760: ST_TO_ADDR
17761: GO 17897
17763: LD_INT 28
17765: DOUBLE
17766: EQUAL
17767: IFTRUE 17771
17769: GO 17782
17771: POP
// bc_type := b_armoury ; 29 :
17772: LD_ADDR_OWVAR 42
17776: PUSH
17777: LD_INT 4
17779: ST_TO_ADDR
17780: GO 17897
17782: LD_INT 29
17784: DOUBLE
17785: EQUAL
17786: IFTRUE 17790
17788: GO 17801
17790: POP
// bc_type := b_barracks ; 30 :
17791: LD_ADDR_OWVAR 42
17795: PUSH
17796: LD_INT 5
17798: ST_TO_ADDR
17799: GO 17897
17801: LD_INT 30
17803: DOUBLE
17804: EQUAL
17805: IFTRUE 17809
17807: GO 17820
17809: POP
// bc_type := b_solar_power ; 31 :
17810: LD_ADDR_OWVAR 42
17814: PUSH
17815: LD_INT 27
17817: ST_TO_ADDR
17818: GO 17897
17820: LD_INT 31
17822: DOUBLE
17823: EQUAL
17824: IFTRUE 17828
17826: GO 17839
17828: POP
// bc_type := b_oil_power ; 32 :
17829: LD_ADDR_OWVAR 42
17833: PUSH
17834: LD_INT 26
17836: ST_TO_ADDR
17837: GO 17897
17839: LD_INT 32
17841: DOUBLE
17842: EQUAL
17843: IFTRUE 17847
17845: GO 17858
17847: POP
// bc_type := b_siberite_power ; 33 :
17848: LD_ADDR_OWVAR 42
17852: PUSH
17853: LD_INT 28
17855: ST_TO_ADDR
17856: GO 17897
17858: LD_INT 33
17860: DOUBLE
17861: EQUAL
17862: IFTRUE 17866
17864: GO 17877
17866: POP
// bc_type := b_oil_mine ; 34 :
17867: LD_ADDR_OWVAR 42
17871: PUSH
17872: LD_INT 29
17874: ST_TO_ADDR
17875: GO 17897
17877: LD_INT 34
17879: DOUBLE
17880: EQUAL
17881: IFTRUE 17885
17883: GO 17896
17885: POP
// bc_type := b_siberite_mine ; end ;
17886: LD_ADDR_OWVAR 42
17890: PUSH
17891: LD_INT 30
17893: ST_TO_ADDR
17894: GO 17897
17896: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
17897: LD_ADDR_VAR 0 8
17901: PUSH
17902: LD_VAR 0 5
17906: PPUSH
17907: LD_VAR 0 6
17911: PPUSH
17912: LD_VAR 0 3
17916: PPUSH
17917: CALL_OW 47
17921: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
17922: LD_OWVAR 42
17926: PUSH
17927: LD_INT 32
17929: PUSH
17930: LD_INT 33
17932: PUSH
17933: EMPTY
17934: LIST
17935: LIST
17936: IN
17937: IFFALSE 17953
// PlaceWeaponTurret ( b , weapon ) ;
17939: LD_VAR 0 8
17943: PPUSH
17944: LD_VAR 0 4
17948: PPUSH
17949: CALL_OW 431
// end ;
17953: LD_VAR 0 7
17957: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
17958: LD_INT 0
17960: PPUSH
17961: PPUSH
17962: PPUSH
17963: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17964: LD_ADDR_VAR 0 4
17968: PUSH
17969: LD_INT 22
17971: PUSH
17972: LD_OWVAR 2
17976: PUSH
17977: EMPTY
17978: LIST
17979: LIST
17980: PUSH
17981: LD_INT 2
17983: PUSH
17984: LD_INT 30
17986: PUSH
17987: LD_INT 0
17989: PUSH
17990: EMPTY
17991: LIST
17992: LIST
17993: PUSH
17994: LD_INT 30
17996: PUSH
17997: LD_INT 1
17999: PUSH
18000: EMPTY
18001: LIST
18002: LIST
18003: PUSH
18004: EMPTY
18005: LIST
18006: LIST
18007: LIST
18008: PUSH
18009: EMPTY
18010: LIST
18011: LIST
18012: PPUSH
18013: CALL_OW 69
18017: ST_TO_ADDR
// if not tmp then
18018: LD_VAR 0 4
18022: NOT
18023: IFFALSE 18027
// exit ;
18025: GO 18086
// for i in tmp do
18027: LD_ADDR_VAR 0 2
18031: PUSH
18032: LD_VAR 0 4
18036: PUSH
18037: FOR_IN
18038: IFFALSE 18084
// for j = 1 to 3 do
18040: LD_ADDR_VAR 0 3
18044: PUSH
18045: DOUBLE
18046: LD_INT 1
18048: DEC
18049: ST_TO_ADDR
18050: LD_INT 3
18052: PUSH
18053: FOR_TO
18054: IFFALSE 18080
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
18056: LD_VAR 0 2
18060: PPUSH
18061: CALL_OW 274
18065: PPUSH
18066: LD_VAR 0 3
18070: PPUSH
18071: LD_INT 99999
18073: PPUSH
18074: CALL_OW 277
18078: GO 18053
18080: POP
18081: POP
18082: GO 18037
18084: POP
18085: POP
// end ;
18086: LD_VAR 0 1
18090: RET
// export function hHackSetLevel10 ; var i , j ; begin
18091: LD_INT 0
18093: PPUSH
18094: PPUSH
18095: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18096: LD_ADDR_VAR 0 2
18100: PUSH
18101: LD_INT 21
18103: PUSH
18104: LD_INT 1
18106: PUSH
18107: EMPTY
18108: LIST
18109: LIST
18110: PPUSH
18111: CALL_OW 69
18115: PUSH
18116: FOR_IN
18117: IFFALSE 18169
// if IsSelected ( i ) then
18119: LD_VAR 0 2
18123: PPUSH
18124: CALL_OW 306
18128: IFFALSE 18167
// begin for j := 1 to 4 do
18130: LD_ADDR_VAR 0 3
18134: PUSH
18135: DOUBLE
18136: LD_INT 1
18138: DEC
18139: ST_TO_ADDR
18140: LD_INT 4
18142: PUSH
18143: FOR_TO
18144: IFFALSE 18165
// SetSkill ( i , j , 10 ) ;
18146: LD_VAR 0 2
18150: PPUSH
18151: LD_VAR 0 3
18155: PPUSH
18156: LD_INT 10
18158: PPUSH
18159: CALL_OW 237
18163: GO 18143
18165: POP
18166: POP
// end ;
18167: GO 18116
18169: POP
18170: POP
// end ;
18171: LD_VAR 0 1
18175: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
18176: LD_INT 0
18178: PPUSH
18179: PPUSH
18180: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
18181: LD_ADDR_VAR 0 2
18185: PUSH
18186: LD_INT 22
18188: PUSH
18189: LD_OWVAR 2
18193: PUSH
18194: EMPTY
18195: LIST
18196: LIST
18197: PUSH
18198: LD_INT 21
18200: PUSH
18201: LD_INT 1
18203: PUSH
18204: EMPTY
18205: LIST
18206: LIST
18207: PUSH
18208: EMPTY
18209: LIST
18210: LIST
18211: PPUSH
18212: CALL_OW 69
18216: PUSH
18217: FOR_IN
18218: IFFALSE 18259
// begin for j := 1 to 4 do
18220: LD_ADDR_VAR 0 3
18224: PUSH
18225: DOUBLE
18226: LD_INT 1
18228: DEC
18229: ST_TO_ADDR
18230: LD_INT 4
18232: PUSH
18233: FOR_TO
18234: IFFALSE 18255
// SetSkill ( i , j , 10 ) ;
18236: LD_VAR 0 2
18240: PPUSH
18241: LD_VAR 0 3
18245: PPUSH
18246: LD_INT 10
18248: PPUSH
18249: CALL_OW 237
18253: GO 18233
18255: POP
18256: POP
// end ;
18257: GO 18217
18259: POP
18260: POP
// end ;
18261: LD_VAR 0 1
18265: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
18266: LD_INT 0
18268: PPUSH
// uc_side := your_side ;
18269: LD_ADDR_OWVAR 20
18273: PUSH
18274: LD_OWVAR 2
18278: ST_TO_ADDR
// uc_nation := nation ;
18279: LD_ADDR_OWVAR 21
18283: PUSH
18284: LD_VAR 0 1
18288: ST_TO_ADDR
// InitHc ;
18289: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
18293: LD_INT 0
18295: PPUSH
18296: LD_VAR 0 2
18300: PPUSH
18301: LD_VAR 0 3
18305: PPUSH
18306: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
18310: LD_VAR 0 4
18314: PPUSH
18315: LD_VAR 0 5
18319: PPUSH
18320: CALL_OW 428
18324: PUSH
18325: LD_INT 0
18327: EQUAL
18328: IFFALSE 18352
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
18330: CALL_OW 44
18334: PPUSH
18335: LD_VAR 0 4
18339: PPUSH
18340: LD_VAR 0 5
18344: PPUSH
18345: LD_INT 1
18347: PPUSH
18348: CALL_OW 48
// end ;
18352: LD_VAR 0 6
18356: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
18357: LD_INT 0
18359: PPUSH
18360: PPUSH
// uc_side := your_side ;
18361: LD_ADDR_OWVAR 20
18365: PUSH
18366: LD_OWVAR 2
18370: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
18371: LD_VAR 0 1
18375: PUSH
18376: LD_INT 1
18378: PUSH
18379: LD_INT 2
18381: PUSH
18382: LD_INT 3
18384: PUSH
18385: LD_INT 4
18387: PUSH
18388: LD_INT 5
18390: PUSH
18391: EMPTY
18392: LIST
18393: LIST
18394: LIST
18395: LIST
18396: LIST
18397: IN
18398: IFFALSE 18410
// uc_nation := nation_american else
18400: LD_ADDR_OWVAR 21
18404: PUSH
18405: LD_INT 1
18407: ST_TO_ADDR
18408: GO 18453
// if chassis in [ 11 , 12 , 13 , 14 ] then
18410: LD_VAR 0 1
18414: PUSH
18415: LD_INT 11
18417: PUSH
18418: LD_INT 12
18420: PUSH
18421: LD_INT 13
18423: PUSH
18424: LD_INT 14
18426: PUSH
18427: EMPTY
18428: LIST
18429: LIST
18430: LIST
18431: LIST
18432: IN
18433: IFFALSE 18445
// uc_nation := nation_arabian else
18435: LD_ADDR_OWVAR 21
18439: PUSH
18440: LD_INT 2
18442: ST_TO_ADDR
18443: GO 18453
// uc_nation := nation_russian ;
18445: LD_ADDR_OWVAR 21
18449: PUSH
18450: LD_INT 3
18452: ST_TO_ADDR
// vc_chassis := chassis ;
18453: LD_ADDR_OWVAR 37
18457: PUSH
18458: LD_VAR 0 1
18462: ST_TO_ADDR
// vc_engine := engine ;
18463: LD_ADDR_OWVAR 39
18467: PUSH
18468: LD_VAR 0 2
18472: ST_TO_ADDR
// vc_control := control ;
18473: LD_ADDR_OWVAR 38
18477: PUSH
18478: LD_VAR 0 3
18482: ST_TO_ADDR
// vc_weapon := weapon ;
18483: LD_ADDR_OWVAR 40
18487: PUSH
18488: LD_VAR 0 4
18492: ST_TO_ADDR
// un := CreateVehicle ;
18493: LD_ADDR_VAR 0 8
18497: PUSH
18498: CALL_OW 45
18502: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
18503: LD_VAR 0 8
18507: PPUSH
18508: LD_INT 0
18510: PPUSH
18511: LD_INT 5
18513: PPUSH
18514: CALL_OW 12
18518: PPUSH
18519: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
18523: LD_VAR 0 8
18527: PPUSH
18528: LD_VAR 0 5
18532: PPUSH
18533: LD_VAR 0 6
18537: PPUSH
18538: LD_INT 1
18540: PPUSH
18541: CALL_OW 48
// end ;
18545: LD_VAR 0 7
18549: RET
// export hInvincible ; every 1 do
18550: GO 18552
18552: DISABLE
// hInvincible := [ ] ;
18553: LD_ADDR_EXP 78
18557: PUSH
18558: EMPTY
18559: ST_TO_ADDR
18560: END
// every 10 do var i ;
18561: GO 18563
18563: DISABLE
18564: LD_INT 0
18566: PPUSH
// begin enable ;
18567: ENABLE
// if not hInvincible then
18568: LD_EXP 78
18572: NOT
18573: IFFALSE 18577
// exit ;
18575: GO 18621
// for i in hInvincible do
18577: LD_ADDR_VAR 0 1
18581: PUSH
18582: LD_EXP 78
18586: PUSH
18587: FOR_IN
18588: IFFALSE 18619
// if GetLives ( i ) < 1000 then
18590: LD_VAR 0 1
18594: PPUSH
18595: CALL_OW 256
18599: PUSH
18600: LD_INT 1000
18602: LESS
18603: IFFALSE 18617
// SetLives ( i , 1000 ) ;
18605: LD_VAR 0 1
18609: PPUSH
18610: LD_INT 1000
18612: PPUSH
18613: CALL_OW 234
18617: GO 18587
18619: POP
18620: POP
// end ;
18621: PPOPN 1
18623: END
// export function hHackInvincible ; var i ; begin
18624: LD_INT 0
18626: PPUSH
18627: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
18628: LD_ADDR_VAR 0 2
18632: PUSH
18633: LD_INT 2
18635: PUSH
18636: LD_INT 21
18638: PUSH
18639: LD_INT 1
18641: PUSH
18642: EMPTY
18643: LIST
18644: LIST
18645: PUSH
18646: LD_INT 21
18648: PUSH
18649: LD_INT 2
18651: PUSH
18652: EMPTY
18653: LIST
18654: LIST
18655: PUSH
18656: EMPTY
18657: LIST
18658: LIST
18659: LIST
18660: PPUSH
18661: CALL_OW 69
18665: PUSH
18666: FOR_IN
18667: IFFALSE 18728
// if IsSelected ( i ) then
18669: LD_VAR 0 2
18673: PPUSH
18674: CALL_OW 306
18678: IFFALSE 18726
// begin if i in hInvincible then
18680: LD_VAR 0 2
18684: PUSH
18685: LD_EXP 78
18689: IN
18690: IFFALSE 18710
// hInvincible := hInvincible diff i else
18692: LD_ADDR_EXP 78
18696: PUSH
18697: LD_EXP 78
18701: PUSH
18702: LD_VAR 0 2
18706: DIFF
18707: ST_TO_ADDR
18708: GO 18726
// hInvincible := hInvincible union i ;
18710: LD_ADDR_EXP 78
18714: PUSH
18715: LD_EXP 78
18719: PUSH
18720: LD_VAR 0 2
18724: UNION
18725: ST_TO_ADDR
// end ;
18726: GO 18666
18728: POP
18729: POP
// end ;
18730: LD_VAR 0 1
18734: RET
// export function hHackInvisible ; var i , j ; begin
18735: LD_INT 0
18737: PPUSH
18738: PPUSH
18739: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18740: LD_ADDR_VAR 0 2
18744: PUSH
18745: LD_INT 21
18747: PUSH
18748: LD_INT 1
18750: PUSH
18751: EMPTY
18752: LIST
18753: LIST
18754: PPUSH
18755: CALL_OW 69
18759: PUSH
18760: FOR_IN
18761: IFFALSE 18785
// if IsSelected ( i ) then
18763: LD_VAR 0 2
18767: PPUSH
18768: CALL_OW 306
18772: IFFALSE 18783
// ComForceInvisible ( i ) ;
18774: LD_VAR 0 2
18778: PPUSH
18779: CALL_OW 496
18783: GO 18760
18785: POP
18786: POP
// end ;
18787: LD_VAR 0 1
18791: RET
// export function hHackChangeYourSide ; begin
18792: LD_INT 0
18794: PPUSH
// if your_side = 8 then
18795: LD_OWVAR 2
18799: PUSH
18800: LD_INT 8
18802: EQUAL
18803: IFFALSE 18815
// your_side := 0 else
18805: LD_ADDR_OWVAR 2
18809: PUSH
18810: LD_INT 0
18812: ST_TO_ADDR
18813: GO 18829
// your_side := your_side + 1 ;
18815: LD_ADDR_OWVAR 2
18819: PUSH
18820: LD_OWVAR 2
18824: PUSH
18825: LD_INT 1
18827: PLUS
18828: ST_TO_ADDR
// end ;
18829: LD_VAR 0 1
18833: RET
// export function hHackChangeUnitSide ; var i , j ; begin
18834: LD_INT 0
18836: PPUSH
18837: PPUSH
18838: PPUSH
// for i in all_units do
18839: LD_ADDR_VAR 0 2
18843: PUSH
18844: LD_OWVAR 3
18848: PUSH
18849: FOR_IN
18850: IFFALSE 18928
// if IsSelected ( i ) then
18852: LD_VAR 0 2
18856: PPUSH
18857: CALL_OW 306
18861: IFFALSE 18926
// begin j := GetSide ( i ) ;
18863: LD_ADDR_VAR 0 3
18867: PUSH
18868: LD_VAR 0 2
18872: PPUSH
18873: CALL_OW 255
18877: ST_TO_ADDR
// if j = 8 then
18878: LD_VAR 0 3
18882: PUSH
18883: LD_INT 8
18885: EQUAL
18886: IFFALSE 18898
// j := 0 else
18888: LD_ADDR_VAR 0 3
18892: PUSH
18893: LD_INT 0
18895: ST_TO_ADDR
18896: GO 18912
// j := j + 1 ;
18898: LD_ADDR_VAR 0 3
18902: PUSH
18903: LD_VAR 0 3
18907: PUSH
18908: LD_INT 1
18910: PLUS
18911: ST_TO_ADDR
// SetSide ( i , j ) ;
18912: LD_VAR 0 2
18916: PPUSH
18917: LD_VAR 0 3
18921: PPUSH
18922: CALL_OW 235
// end ;
18926: GO 18849
18928: POP
18929: POP
// end ;
18930: LD_VAR 0 1
18934: RET
// export function hHackFog ; begin
18935: LD_INT 0
18937: PPUSH
// FogOff ( true ) ;
18938: LD_INT 1
18940: PPUSH
18941: CALL_OW 344
// end ;
18945: LD_VAR 0 1
18949: RET
// export function hHackTeleport ( unit , x , y ) ; begin
18950: LD_INT 0
18952: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
18953: LD_VAR 0 1
18957: PPUSH
18958: LD_VAR 0 2
18962: PPUSH
18963: LD_VAR 0 3
18967: PPUSH
18968: LD_INT 1
18970: PPUSH
18971: LD_INT 1
18973: PPUSH
18974: CALL_OW 483
// CenterOnXY ( x , y ) ;
18978: LD_VAR 0 2
18982: PPUSH
18983: LD_VAR 0 3
18987: PPUSH
18988: CALL_OW 84
// end ; end_of_file
18992: LD_VAR 0 4
18996: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
18997: LD_INT 0
18999: PPUSH
19000: PPUSH
19001: PPUSH
19002: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
19003: LD_VAR 0 1
19007: PPUSH
19008: CALL_OW 264
19012: PUSH
19013: LD_EXP 95
19017: EQUAL
19018: IFFALSE 19090
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
19020: LD_INT 68
19022: PPUSH
19023: LD_VAR 0 1
19027: PPUSH
19028: CALL_OW 255
19032: PPUSH
19033: CALL_OW 321
19037: PUSH
19038: LD_INT 2
19040: EQUAL
19041: IFFALSE 19053
// eff := 70 else
19043: LD_ADDR_VAR 0 4
19047: PUSH
19048: LD_INT 70
19050: ST_TO_ADDR
19051: GO 19061
// eff := 30 ;
19053: LD_ADDR_VAR 0 4
19057: PUSH
19058: LD_INT 30
19060: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
19061: LD_VAR 0 1
19065: PPUSH
19066: CALL_OW 250
19070: PPUSH
19071: LD_VAR 0 1
19075: PPUSH
19076: CALL_OW 251
19080: PPUSH
19081: LD_VAR 0 4
19085: PPUSH
19086: CALL_OW 495
// end ; end ;
19090: LD_VAR 0 2
19094: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
19095: LD_INT 0
19097: PPUSH
// end ;
19098: LD_VAR 0 4
19102: RET
// export function SOS_Command ( cmd ) ; begin
19103: LD_INT 0
19105: PPUSH
// end ;
19106: LD_VAR 0 2
19110: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
19111: LD_INT 0
19113: PPUSH
// if cmd = 121 then
19114: LD_VAR 0 1
19118: PUSH
19119: LD_INT 121
19121: EQUAL
19122: IFFALSE 19124
// end ;
19124: LD_VAR 0 6
19128: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
19129: LD_INT 0
19131: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
19132: LD_VAR 0 1
19136: PUSH
19137: LD_INT 250
19139: EQUAL
19140: PUSH
19141: LD_VAR 0 2
19145: PPUSH
19146: CALL_OW 264
19150: PUSH
19151: LD_EXP 98
19155: EQUAL
19156: AND
19157: IFFALSE 19178
// MinerPlaceMine ( unit , x , y ) ;
19159: LD_VAR 0 2
19163: PPUSH
19164: LD_VAR 0 4
19168: PPUSH
19169: LD_VAR 0 5
19173: PPUSH
19174: CALL 21527 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
19178: LD_VAR 0 1
19182: PUSH
19183: LD_INT 251
19185: EQUAL
19186: PUSH
19187: LD_VAR 0 2
19191: PPUSH
19192: CALL_OW 264
19196: PUSH
19197: LD_EXP 98
19201: EQUAL
19202: AND
19203: IFFALSE 19224
// MinerDetonateMine ( unit , x , y ) ;
19205: LD_VAR 0 2
19209: PPUSH
19210: LD_VAR 0 4
19214: PPUSH
19215: LD_VAR 0 5
19219: PPUSH
19220: CALL 21804 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
19224: LD_VAR 0 1
19228: PUSH
19229: LD_INT 252
19231: EQUAL
19232: PUSH
19233: LD_VAR 0 2
19237: PPUSH
19238: CALL_OW 264
19242: PUSH
19243: LD_EXP 98
19247: EQUAL
19248: AND
19249: IFFALSE 19270
// MinerCreateMinefield ( unit , x , y ) ;
19251: LD_VAR 0 2
19255: PPUSH
19256: LD_VAR 0 4
19260: PPUSH
19261: LD_VAR 0 5
19265: PPUSH
19266: CALL 22221 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
19270: LD_VAR 0 1
19274: PUSH
19275: LD_INT 253
19277: EQUAL
19278: PUSH
19279: LD_VAR 0 2
19283: PPUSH
19284: CALL_OW 257
19288: PUSH
19289: LD_INT 5
19291: EQUAL
19292: AND
19293: IFFALSE 19314
// ComBinocular ( unit , x , y ) ;
19295: LD_VAR 0 2
19299: PPUSH
19300: LD_VAR 0 4
19304: PPUSH
19305: LD_VAR 0 5
19309: PPUSH
19310: CALL 22592 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
19314: LD_VAR 0 1
19318: PUSH
19319: LD_INT 254
19321: EQUAL
19322: PUSH
19323: LD_VAR 0 2
19327: PPUSH
19328: CALL_OW 264
19332: PUSH
19333: LD_EXP 93
19337: EQUAL
19338: AND
19339: PUSH
19340: LD_VAR 0 3
19344: PPUSH
19345: CALL_OW 263
19349: PUSH
19350: LD_INT 3
19352: EQUAL
19353: AND
19354: IFFALSE 19370
// HackDestroyVehicle ( unit , selectedUnit ) ;
19356: LD_VAR 0 2
19360: PPUSH
19361: LD_VAR 0 3
19365: PPUSH
19366: CALL 20887 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
19370: LD_VAR 0 1
19374: PUSH
19375: LD_INT 255
19377: EQUAL
19378: PUSH
19379: LD_VAR 0 2
19383: PPUSH
19384: CALL_OW 264
19388: PUSH
19389: LD_INT 14
19391: PUSH
19392: LD_INT 53
19394: PUSH
19395: EMPTY
19396: LIST
19397: LIST
19398: IN
19399: AND
19400: PUSH
19401: LD_VAR 0 4
19405: PPUSH
19406: LD_VAR 0 5
19410: PPUSH
19411: CALL_OW 488
19415: AND
19416: IFFALSE 19440
// CutTreeXYR ( unit , x , y , 12 ) ;
19418: LD_VAR 0 2
19422: PPUSH
19423: LD_VAR 0 4
19427: PPUSH
19428: LD_VAR 0 5
19432: PPUSH
19433: LD_INT 12
19435: PPUSH
19436: CALL 19453 0 4
// end ;
19440: LD_VAR 0 6
19444: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
19445: LD_INT 0
19447: PPUSH
// end ;
19448: LD_VAR 0 4
19452: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
19453: LD_INT 0
19455: PPUSH
19456: PPUSH
19457: PPUSH
19458: PPUSH
19459: PPUSH
19460: PPUSH
19461: PPUSH
19462: PPUSH
19463: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
19464: LD_VAR 0 1
19468: NOT
19469: PUSH
19470: LD_VAR 0 2
19474: PPUSH
19475: LD_VAR 0 3
19479: PPUSH
19480: CALL_OW 488
19484: NOT
19485: OR
19486: PUSH
19487: LD_VAR 0 4
19491: NOT
19492: OR
19493: IFFALSE 19497
// exit ;
19495: GO 19837
// list := [ ] ;
19497: LD_ADDR_VAR 0 13
19501: PUSH
19502: EMPTY
19503: ST_TO_ADDR
// if x - r < 0 then
19504: LD_VAR 0 2
19508: PUSH
19509: LD_VAR 0 4
19513: MINUS
19514: PUSH
19515: LD_INT 0
19517: LESS
19518: IFFALSE 19530
// min_x := 0 else
19520: LD_ADDR_VAR 0 7
19524: PUSH
19525: LD_INT 0
19527: ST_TO_ADDR
19528: GO 19546
// min_x := x - r ;
19530: LD_ADDR_VAR 0 7
19534: PUSH
19535: LD_VAR 0 2
19539: PUSH
19540: LD_VAR 0 4
19544: MINUS
19545: ST_TO_ADDR
// if y - r < 0 then
19546: LD_VAR 0 3
19550: PUSH
19551: LD_VAR 0 4
19555: MINUS
19556: PUSH
19557: LD_INT 0
19559: LESS
19560: IFFALSE 19572
// min_y := 0 else
19562: LD_ADDR_VAR 0 8
19566: PUSH
19567: LD_INT 0
19569: ST_TO_ADDR
19570: GO 19588
// min_y := y - r ;
19572: LD_ADDR_VAR 0 8
19576: PUSH
19577: LD_VAR 0 3
19581: PUSH
19582: LD_VAR 0 4
19586: MINUS
19587: ST_TO_ADDR
// max_x := x + r ;
19588: LD_ADDR_VAR 0 9
19592: PUSH
19593: LD_VAR 0 2
19597: PUSH
19598: LD_VAR 0 4
19602: PLUS
19603: ST_TO_ADDR
// max_y := y + r ;
19604: LD_ADDR_VAR 0 10
19608: PUSH
19609: LD_VAR 0 3
19613: PUSH
19614: LD_VAR 0 4
19618: PLUS
19619: ST_TO_ADDR
// for _x = min_x to max_x do
19620: LD_ADDR_VAR 0 11
19624: PUSH
19625: DOUBLE
19626: LD_VAR 0 7
19630: DEC
19631: ST_TO_ADDR
19632: LD_VAR 0 9
19636: PUSH
19637: FOR_TO
19638: IFFALSE 19755
// for _y = min_y to max_y do
19640: LD_ADDR_VAR 0 12
19644: PUSH
19645: DOUBLE
19646: LD_VAR 0 8
19650: DEC
19651: ST_TO_ADDR
19652: LD_VAR 0 10
19656: PUSH
19657: FOR_TO
19658: IFFALSE 19751
// begin if not ValidHex ( _x , _y ) then
19660: LD_VAR 0 11
19664: PPUSH
19665: LD_VAR 0 12
19669: PPUSH
19670: CALL_OW 488
19674: NOT
19675: IFFALSE 19679
// continue ;
19677: GO 19657
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
19679: LD_VAR 0 11
19683: PPUSH
19684: LD_VAR 0 12
19688: PPUSH
19689: CALL_OW 351
19693: PUSH
19694: LD_VAR 0 11
19698: PPUSH
19699: LD_VAR 0 12
19703: PPUSH
19704: CALL_OW 554
19708: AND
19709: IFFALSE 19749
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
19711: LD_ADDR_VAR 0 13
19715: PUSH
19716: LD_VAR 0 13
19720: PPUSH
19721: LD_VAR 0 13
19725: PUSH
19726: LD_INT 1
19728: PLUS
19729: PPUSH
19730: LD_VAR 0 11
19734: PUSH
19735: LD_VAR 0 12
19739: PUSH
19740: EMPTY
19741: LIST
19742: LIST
19743: PPUSH
19744: CALL_OW 2
19748: ST_TO_ADDR
// end ;
19749: GO 19657
19751: POP
19752: POP
19753: GO 19637
19755: POP
19756: POP
// if not list then
19757: LD_VAR 0 13
19761: NOT
19762: IFFALSE 19766
// exit ;
19764: GO 19837
// for i in list do
19766: LD_ADDR_VAR 0 6
19770: PUSH
19771: LD_VAR 0 13
19775: PUSH
19776: FOR_IN
19777: IFFALSE 19835
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
19779: LD_VAR 0 1
19783: PPUSH
19784: LD_STRING M
19786: PUSH
19787: LD_VAR 0 6
19791: PUSH
19792: LD_INT 1
19794: ARRAY
19795: PUSH
19796: LD_VAR 0 6
19800: PUSH
19801: LD_INT 2
19803: ARRAY
19804: PUSH
19805: LD_INT 0
19807: PUSH
19808: LD_INT 0
19810: PUSH
19811: LD_INT 0
19813: PUSH
19814: LD_INT 0
19816: PUSH
19817: EMPTY
19818: LIST
19819: LIST
19820: LIST
19821: LIST
19822: LIST
19823: LIST
19824: LIST
19825: PUSH
19826: EMPTY
19827: LIST
19828: PPUSH
19829: CALL_OW 447
19833: GO 19776
19835: POP
19836: POP
// end ;
19837: LD_VAR 0 5
19841: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
19842: LD_EXP 81
19846: NOT
19847: IFFALSE 19897
19849: GO 19851
19851: DISABLE
// begin initHack := true ;
19852: LD_ADDR_EXP 81
19856: PUSH
19857: LD_INT 1
19859: ST_TO_ADDR
// hackTanks := [ ] ;
19860: LD_ADDR_EXP 82
19864: PUSH
19865: EMPTY
19866: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
19867: LD_ADDR_EXP 83
19871: PUSH
19872: EMPTY
19873: ST_TO_ADDR
// hackLimit := 3 ;
19874: LD_ADDR_EXP 84
19878: PUSH
19879: LD_INT 3
19881: ST_TO_ADDR
// hackDist := 12 ;
19882: LD_ADDR_EXP 85
19886: PUSH
19887: LD_INT 12
19889: ST_TO_ADDR
// hackCounter := [ ] ;
19890: LD_ADDR_EXP 86
19894: PUSH
19895: EMPTY
19896: ST_TO_ADDR
// end ;
19897: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
19898: LD_EXP 81
19902: PUSH
19903: LD_INT 34
19905: PUSH
19906: LD_EXP 93
19910: PUSH
19911: EMPTY
19912: LIST
19913: LIST
19914: PPUSH
19915: CALL_OW 69
19919: AND
19920: IFFALSE 20175
19922: GO 19924
19924: DISABLE
19925: LD_INT 0
19927: PPUSH
19928: PPUSH
// begin enable ;
19929: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
19930: LD_ADDR_VAR 0 1
19934: PUSH
19935: LD_INT 34
19937: PUSH
19938: LD_EXP 93
19942: PUSH
19943: EMPTY
19944: LIST
19945: LIST
19946: PPUSH
19947: CALL_OW 69
19951: PUSH
19952: FOR_IN
19953: IFFALSE 20173
// begin if not i in hackTanks then
19955: LD_VAR 0 1
19959: PUSH
19960: LD_EXP 82
19964: IN
19965: NOT
19966: IFFALSE 20049
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
19968: LD_ADDR_EXP 82
19972: PUSH
19973: LD_EXP 82
19977: PPUSH
19978: LD_EXP 82
19982: PUSH
19983: LD_INT 1
19985: PLUS
19986: PPUSH
19987: LD_VAR 0 1
19991: PPUSH
19992: CALL_OW 1
19996: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
19997: LD_ADDR_EXP 83
20001: PUSH
20002: LD_EXP 83
20006: PPUSH
20007: LD_EXP 83
20011: PUSH
20012: LD_INT 1
20014: PLUS
20015: PPUSH
20016: EMPTY
20017: PPUSH
20018: CALL_OW 1
20022: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
20023: LD_ADDR_EXP 86
20027: PUSH
20028: LD_EXP 86
20032: PPUSH
20033: LD_EXP 86
20037: PUSH
20038: LD_INT 1
20040: PLUS
20041: PPUSH
20042: EMPTY
20043: PPUSH
20044: CALL_OW 1
20048: ST_TO_ADDR
// end ; if not IsOk ( i ) then
20049: LD_VAR 0 1
20053: PPUSH
20054: CALL_OW 302
20058: NOT
20059: IFFALSE 20072
// begin HackUnlinkAll ( i ) ;
20061: LD_VAR 0 1
20065: PPUSH
20066: CALL 20178 0 1
// continue ;
20070: GO 19952
// end ; HackCheckCapturedStatus ( i ) ;
20072: LD_VAR 0 1
20076: PPUSH
20077: CALL 20621 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
20081: LD_ADDR_VAR 0 2
20085: PUSH
20086: LD_INT 81
20088: PUSH
20089: LD_VAR 0 1
20093: PPUSH
20094: CALL_OW 255
20098: PUSH
20099: EMPTY
20100: LIST
20101: LIST
20102: PUSH
20103: LD_INT 33
20105: PUSH
20106: LD_INT 3
20108: PUSH
20109: EMPTY
20110: LIST
20111: LIST
20112: PUSH
20113: LD_INT 91
20115: PUSH
20116: LD_VAR 0 1
20120: PUSH
20121: LD_EXP 85
20125: PUSH
20126: EMPTY
20127: LIST
20128: LIST
20129: LIST
20130: PUSH
20131: LD_INT 50
20133: PUSH
20134: EMPTY
20135: LIST
20136: PUSH
20137: EMPTY
20138: LIST
20139: LIST
20140: LIST
20141: LIST
20142: PPUSH
20143: CALL_OW 69
20147: ST_TO_ADDR
// if not tmp then
20148: LD_VAR 0 2
20152: NOT
20153: IFFALSE 20157
// continue ;
20155: GO 19952
// HackLink ( i , tmp ) ;
20157: LD_VAR 0 1
20161: PPUSH
20162: LD_VAR 0 2
20166: PPUSH
20167: CALL 20314 0 2
// end ;
20171: GO 19952
20173: POP
20174: POP
// end ;
20175: PPOPN 2
20177: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
20178: LD_INT 0
20180: PPUSH
20181: PPUSH
20182: PPUSH
// if not hack in hackTanks then
20183: LD_VAR 0 1
20187: PUSH
20188: LD_EXP 82
20192: IN
20193: NOT
20194: IFFALSE 20198
// exit ;
20196: GO 20309
// index := GetElementIndex ( hackTanks , hack ) ;
20198: LD_ADDR_VAR 0 4
20202: PUSH
20203: LD_EXP 82
20207: PPUSH
20208: LD_VAR 0 1
20212: PPUSH
20213: CALL 27903 0 2
20217: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
20218: LD_EXP 83
20222: PUSH
20223: LD_VAR 0 4
20227: ARRAY
20228: IFFALSE 20309
// begin for i in hackTanksCaptured [ index ] do
20230: LD_ADDR_VAR 0 3
20234: PUSH
20235: LD_EXP 83
20239: PUSH
20240: LD_VAR 0 4
20244: ARRAY
20245: PUSH
20246: FOR_IN
20247: IFFALSE 20273
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
20249: LD_VAR 0 3
20253: PUSH
20254: LD_INT 1
20256: ARRAY
20257: PPUSH
20258: LD_VAR 0 3
20262: PUSH
20263: LD_INT 2
20265: ARRAY
20266: PPUSH
20267: CALL_OW 235
20271: GO 20246
20273: POP
20274: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
20275: LD_ADDR_EXP 83
20279: PUSH
20280: LD_EXP 83
20284: PPUSH
20285: LD_VAR 0 4
20289: PPUSH
20290: EMPTY
20291: PPUSH
20292: CALL_OW 1
20296: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
20297: LD_VAR 0 1
20301: PPUSH
20302: LD_INT 0
20304: PPUSH
20305: CALL_OW 505
// end ; end ;
20309: LD_VAR 0 2
20313: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
20314: LD_INT 0
20316: PPUSH
20317: PPUSH
20318: PPUSH
// if not hack in hackTanks or not vehicles then
20319: LD_VAR 0 1
20323: PUSH
20324: LD_EXP 82
20328: IN
20329: NOT
20330: PUSH
20331: LD_VAR 0 2
20335: NOT
20336: OR
20337: IFFALSE 20341
// exit ;
20339: GO 20616
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
20341: LD_ADDR_VAR 0 2
20345: PUSH
20346: LD_VAR 0 1
20350: PPUSH
20351: LD_VAR 0 2
20355: PPUSH
20356: LD_INT 1
20358: PPUSH
20359: LD_INT 1
20361: PPUSH
20362: CALL 28553 0 4
20366: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
20367: LD_ADDR_VAR 0 5
20371: PUSH
20372: LD_EXP 82
20376: PPUSH
20377: LD_VAR 0 1
20381: PPUSH
20382: CALL 27903 0 2
20386: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
20387: LD_EXP 83
20391: PUSH
20392: LD_VAR 0 5
20396: ARRAY
20397: PUSH
20398: LD_EXP 84
20402: LESS
20403: IFFALSE 20592
// begin for i := 1 to vehicles do
20405: LD_ADDR_VAR 0 4
20409: PUSH
20410: DOUBLE
20411: LD_INT 1
20413: DEC
20414: ST_TO_ADDR
20415: LD_VAR 0 2
20419: PUSH
20420: FOR_TO
20421: IFFALSE 20590
// begin if hackTanksCaptured [ index ] = hackLimit then
20423: LD_EXP 83
20427: PUSH
20428: LD_VAR 0 5
20432: ARRAY
20433: PUSH
20434: LD_EXP 84
20438: EQUAL
20439: IFFALSE 20443
// break ;
20441: GO 20590
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
20443: LD_ADDR_EXP 86
20447: PUSH
20448: LD_EXP 86
20452: PPUSH
20453: LD_VAR 0 5
20457: PPUSH
20458: LD_EXP 86
20462: PUSH
20463: LD_VAR 0 5
20467: ARRAY
20468: PUSH
20469: LD_INT 1
20471: PLUS
20472: PPUSH
20473: CALL_OW 1
20477: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
20478: LD_ADDR_EXP 83
20482: PUSH
20483: LD_EXP 83
20487: PPUSH
20488: LD_VAR 0 5
20492: PUSH
20493: LD_EXP 83
20497: PUSH
20498: LD_VAR 0 5
20502: ARRAY
20503: PUSH
20504: LD_INT 1
20506: PLUS
20507: PUSH
20508: EMPTY
20509: LIST
20510: LIST
20511: PPUSH
20512: LD_VAR 0 2
20516: PUSH
20517: LD_VAR 0 4
20521: ARRAY
20522: PUSH
20523: LD_VAR 0 2
20527: PUSH
20528: LD_VAR 0 4
20532: ARRAY
20533: PPUSH
20534: CALL_OW 255
20538: PUSH
20539: EMPTY
20540: LIST
20541: LIST
20542: PPUSH
20543: CALL 28118 0 3
20547: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
20548: LD_VAR 0 2
20552: PUSH
20553: LD_VAR 0 4
20557: ARRAY
20558: PPUSH
20559: LD_VAR 0 1
20563: PPUSH
20564: CALL_OW 255
20568: PPUSH
20569: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
20573: LD_VAR 0 2
20577: PUSH
20578: LD_VAR 0 4
20582: ARRAY
20583: PPUSH
20584: CALL_OW 141
// end ;
20588: GO 20420
20590: POP
20591: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
20592: LD_VAR 0 1
20596: PPUSH
20597: LD_EXP 83
20601: PUSH
20602: LD_VAR 0 5
20606: ARRAY
20607: PUSH
20608: LD_INT 0
20610: PLUS
20611: PPUSH
20612: CALL_OW 505
// end ;
20616: LD_VAR 0 3
20620: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
20621: LD_INT 0
20623: PPUSH
20624: PPUSH
20625: PPUSH
20626: PPUSH
// if not hack in hackTanks then
20627: LD_VAR 0 1
20631: PUSH
20632: LD_EXP 82
20636: IN
20637: NOT
20638: IFFALSE 20642
// exit ;
20640: GO 20882
// index := GetElementIndex ( hackTanks , hack ) ;
20642: LD_ADDR_VAR 0 4
20646: PUSH
20647: LD_EXP 82
20651: PPUSH
20652: LD_VAR 0 1
20656: PPUSH
20657: CALL 27903 0 2
20661: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
20662: LD_ADDR_VAR 0 3
20666: PUSH
20667: DOUBLE
20668: LD_EXP 83
20672: PUSH
20673: LD_VAR 0 4
20677: ARRAY
20678: INC
20679: ST_TO_ADDR
20680: LD_INT 1
20682: PUSH
20683: FOR_DOWNTO
20684: IFFALSE 20856
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
20686: LD_ADDR_VAR 0 5
20690: PUSH
20691: LD_EXP 83
20695: PUSH
20696: LD_VAR 0 4
20700: ARRAY
20701: PUSH
20702: LD_VAR 0 3
20706: ARRAY
20707: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
20708: LD_VAR 0 5
20712: PUSH
20713: LD_INT 1
20715: ARRAY
20716: PPUSH
20717: CALL_OW 302
20721: NOT
20722: PUSH
20723: LD_VAR 0 5
20727: PUSH
20728: LD_INT 1
20730: ARRAY
20731: PPUSH
20732: CALL_OW 255
20736: PUSH
20737: LD_VAR 0 1
20741: PPUSH
20742: CALL_OW 255
20746: NONEQUAL
20747: OR
20748: IFFALSE 20854
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
20750: LD_VAR 0 5
20754: PUSH
20755: LD_INT 1
20757: ARRAY
20758: PPUSH
20759: CALL_OW 305
20763: PUSH
20764: LD_VAR 0 5
20768: PUSH
20769: LD_INT 1
20771: ARRAY
20772: PPUSH
20773: CALL_OW 255
20777: PUSH
20778: LD_VAR 0 1
20782: PPUSH
20783: CALL_OW 255
20787: EQUAL
20788: AND
20789: IFFALSE 20813
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
20791: LD_VAR 0 5
20795: PUSH
20796: LD_INT 1
20798: ARRAY
20799: PPUSH
20800: LD_VAR 0 5
20804: PUSH
20805: LD_INT 2
20807: ARRAY
20808: PPUSH
20809: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
20813: LD_ADDR_EXP 83
20817: PUSH
20818: LD_EXP 83
20822: PPUSH
20823: LD_VAR 0 4
20827: PPUSH
20828: LD_EXP 83
20832: PUSH
20833: LD_VAR 0 4
20837: ARRAY
20838: PPUSH
20839: LD_VAR 0 3
20843: PPUSH
20844: CALL_OW 3
20848: PPUSH
20849: CALL_OW 1
20853: ST_TO_ADDR
// end ; end ;
20854: GO 20683
20856: POP
20857: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
20858: LD_VAR 0 1
20862: PPUSH
20863: LD_EXP 83
20867: PUSH
20868: LD_VAR 0 4
20872: ARRAY
20873: PUSH
20874: LD_INT 0
20876: PLUS
20877: PPUSH
20878: CALL_OW 505
// end ;
20882: LD_VAR 0 2
20886: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
20887: LD_INT 0
20889: PPUSH
20890: PPUSH
20891: PPUSH
20892: PPUSH
// if not hack in hackTanks then
20893: LD_VAR 0 1
20897: PUSH
20898: LD_EXP 82
20902: IN
20903: NOT
20904: IFFALSE 20908
// exit ;
20906: GO 20993
// index := GetElementIndex ( hackTanks , hack ) ;
20908: LD_ADDR_VAR 0 5
20912: PUSH
20913: LD_EXP 82
20917: PPUSH
20918: LD_VAR 0 1
20922: PPUSH
20923: CALL 27903 0 2
20927: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
20928: LD_ADDR_VAR 0 4
20932: PUSH
20933: DOUBLE
20934: LD_INT 1
20936: DEC
20937: ST_TO_ADDR
20938: LD_EXP 83
20942: PUSH
20943: LD_VAR 0 5
20947: ARRAY
20948: PUSH
20949: FOR_TO
20950: IFFALSE 20991
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
20952: LD_EXP 83
20956: PUSH
20957: LD_VAR 0 5
20961: ARRAY
20962: PUSH
20963: LD_VAR 0 4
20967: ARRAY
20968: PUSH
20969: LD_INT 1
20971: ARRAY
20972: PUSH
20973: LD_VAR 0 2
20977: EQUAL
20978: IFFALSE 20989
// KillUnit ( vehicle ) ;
20980: LD_VAR 0 2
20984: PPUSH
20985: CALL_OW 66
20989: GO 20949
20991: POP
20992: POP
// end ;
20993: LD_VAR 0 3
20997: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
20998: LD_EXP 87
21002: NOT
21003: IFFALSE 21038
21005: GO 21007
21007: DISABLE
// begin initMiner := true ;
21008: LD_ADDR_EXP 87
21012: PUSH
21013: LD_INT 1
21015: ST_TO_ADDR
// minersList := [ ] ;
21016: LD_ADDR_EXP 88
21020: PUSH
21021: EMPTY
21022: ST_TO_ADDR
// minerMinesList := [ ] ;
21023: LD_ADDR_EXP 89
21027: PUSH
21028: EMPTY
21029: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
21030: LD_ADDR_EXP 90
21034: PUSH
21035: LD_INT 5
21037: ST_TO_ADDR
// end ;
21038: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
21039: LD_EXP 87
21043: PUSH
21044: LD_INT 34
21046: PUSH
21047: LD_EXP 98
21051: PUSH
21052: EMPTY
21053: LIST
21054: LIST
21055: PPUSH
21056: CALL_OW 69
21060: AND
21061: IFFALSE 21524
21063: GO 21065
21065: DISABLE
21066: LD_INT 0
21068: PPUSH
21069: PPUSH
21070: PPUSH
21071: PPUSH
// begin enable ;
21072: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
21073: LD_ADDR_VAR 0 1
21077: PUSH
21078: LD_INT 34
21080: PUSH
21081: LD_EXP 98
21085: PUSH
21086: EMPTY
21087: LIST
21088: LIST
21089: PPUSH
21090: CALL_OW 69
21094: PUSH
21095: FOR_IN
21096: IFFALSE 21168
// begin if not i in minersList then
21098: LD_VAR 0 1
21102: PUSH
21103: LD_EXP 88
21107: IN
21108: NOT
21109: IFFALSE 21166
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
21111: LD_ADDR_EXP 88
21115: PUSH
21116: LD_EXP 88
21120: PPUSH
21121: LD_EXP 88
21125: PUSH
21126: LD_INT 1
21128: PLUS
21129: PPUSH
21130: LD_VAR 0 1
21134: PPUSH
21135: CALL_OW 1
21139: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
21140: LD_ADDR_EXP 89
21144: PUSH
21145: LD_EXP 89
21149: PPUSH
21150: LD_EXP 89
21154: PUSH
21155: LD_INT 1
21157: PLUS
21158: PPUSH
21159: EMPTY
21160: PPUSH
21161: CALL_OW 1
21165: ST_TO_ADDR
// end end ;
21166: GO 21095
21168: POP
21169: POP
// for i := minerMinesList downto 1 do
21170: LD_ADDR_VAR 0 1
21174: PUSH
21175: DOUBLE
21176: LD_EXP 89
21180: INC
21181: ST_TO_ADDR
21182: LD_INT 1
21184: PUSH
21185: FOR_DOWNTO
21186: IFFALSE 21522
// begin if IsLive ( minersList [ i ] ) then
21188: LD_EXP 88
21192: PUSH
21193: LD_VAR 0 1
21197: ARRAY
21198: PPUSH
21199: CALL_OW 300
21203: IFFALSE 21231
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
21205: LD_EXP 88
21209: PUSH
21210: LD_VAR 0 1
21214: ARRAY
21215: PPUSH
21216: LD_EXP 89
21220: PUSH
21221: LD_VAR 0 1
21225: ARRAY
21226: PPUSH
21227: CALL_OW 505
// if not minerMinesList [ i ] then
21231: LD_EXP 89
21235: PUSH
21236: LD_VAR 0 1
21240: ARRAY
21241: NOT
21242: IFFALSE 21246
// continue ;
21244: GO 21185
// for j := minerMinesList [ i ] downto 1 do
21246: LD_ADDR_VAR 0 2
21250: PUSH
21251: DOUBLE
21252: LD_EXP 89
21256: PUSH
21257: LD_VAR 0 1
21261: ARRAY
21262: INC
21263: ST_TO_ADDR
21264: LD_INT 1
21266: PUSH
21267: FOR_DOWNTO
21268: IFFALSE 21518
// begin side := GetSide ( minersList [ i ] ) ;
21270: LD_ADDR_VAR 0 3
21274: PUSH
21275: LD_EXP 88
21279: PUSH
21280: LD_VAR 0 1
21284: ARRAY
21285: PPUSH
21286: CALL_OW 255
21290: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
21291: LD_ADDR_VAR 0 4
21295: PUSH
21296: LD_EXP 89
21300: PUSH
21301: LD_VAR 0 1
21305: ARRAY
21306: PUSH
21307: LD_VAR 0 2
21311: ARRAY
21312: PUSH
21313: LD_INT 1
21315: ARRAY
21316: PPUSH
21317: LD_EXP 89
21321: PUSH
21322: LD_VAR 0 1
21326: ARRAY
21327: PUSH
21328: LD_VAR 0 2
21332: ARRAY
21333: PUSH
21334: LD_INT 2
21336: ARRAY
21337: PPUSH
21338: CALL_OW 428
21342: ST_TO_ADDR
// if not tmp then
21343: LD_VAR 0 4
21347: NOT
21348: IFFALSE 21352
// continue ;
21350: GO 21267
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
21352: LD_VAR 0 4
21356: PUSH
21357: LD_INT 81
21359: PUSH
21360: LD_VAR 0 3
21364: PUSH
21365: EMPTY
21366: LIST
21367: LIST
21368: PPUSH
21369: CALL_OW 69
21373: IN
21374: PUSH
21375: LD_EXP 89
21379: PUSH
21380: LD_VAR 0 1
21384: ARRAY
21385: PUSH
21386: LD_VAR 0 2
21390: ARRAY
21391: PUSH
21392: LD_INT 1
21394: ARRAY
21395: PPUSH
21396: LD_EXP 89
21400: PUSH
21401: LD_VAR 0 1
21405: ARRAY
21406: PUSH
21407: LD_VAR 0 2
21411: ARRAY
21412: PUSH
21413: LD_INT 2
21415: ARRAY
21416: PPUSH
21417: CALL_OW 458
21421: AND
21422: IFFALSE 21516
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
21424: LD_EXP 89
21428: PUSH
21429: LD_VAR 0 1
21433: ARRAY
21434: PUSH
21435: LD_VAR 0 2
21439: ARRAY
21440: PUSH
21441: LD_INT 1
21443: ARRAY
21444: PPUSH
21445: LD_EXP 89
21449: PUSH
21450: LD_VAR 0 1
21454: ARRAY
21455: PUSH
21456: LD_VAR 0 2
21460: ARRAY
21461: PUSH
21462: LD_INT 2
21464: ARRAY
21465: PPUSH
21466: LD_VAR 0 3
21470: PPUSH
21471: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
21475: LD_ADDR_EXP 89
21479: PUSH
21480: LD_EXP 89
21484: PPUSH
21485: LD_VAR 0 1
21489: PPUSH
21490: LD_EXP 89
21494: PUSH
21495: LD_VAR 0 1
21499: ARRAY
21500: PPUSH
21501: LD_VAR 0 2
21505: PPUSH
21506: CALL_OW 3
21510: PPUSH
21511: CALL_OW 1
21515: ST_TO_ADDR
// end ; end ;
21516: GO 21267
21518: POP
21519: POP
// end ;
21520: GO 21185
21522: POP
21523: POP
// end ;
21524: PPOPN 4
21526: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
21527: LD_INT 0
21529: PPUSH
21530: PPUSH
// result := false ;
21531: LD_ADDR_VAR 0 4
21535: PUSH
21536: LD_INT 0
21538: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
21539: LD_VAR 0 1
21543: PPUSH
21544: CALL_OW 264
21548: PUSH
21549: LD_EXP 98
21553: EQUAL
21554: NOT
21555: IFFALSE 21559
// exit ;
21557: GO 21799
// index := GetElementIndex ( minersList , unit ) ;
21559: LD_ADDR_VAR 0 5
21563: PUSH
21564: LD_EXP 88
21568: PPUSH
21569: LD_VAR 0 1
21573: PPUSH
21574: CALL 27903 0 2
21578: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
21579: LD_EXP 89
21583: PUSH
21584: LD_VAR 0 5
21588: ARRAY
21589: PUSH
21590: LD_EXP 90
21594: GREATEREQUAL
21595: IFFALSE 21599
// exit ;
21597: GO 21799
// ComMoveXY ( unit , x , y ) ;
21599: LD_VAR 0 1
21603: PPUSH
21604: LD_VAR 0 2
21608: PPUSH
21609: LD_VAR 0 3
21613: PPUSH
21614: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
21618: LD_INT 35
21620: PPUSH
21621: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
21625: LD_VAR 0 1
21629: PPUSH
21630: LD_VAR 0 2
21634: PPUSH
21635: LD_VAR 0 3
21639: PPUSH
21640: CALL 58300 0 3
21644: NOT
21645: PUSH
21646: LD_VAR 0 1
21650: PPUSH
21651: CALL_OW 314
21655: AND
21656: IFFALSE 21660
// exit ;
21658: GO 21799
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
21660: LD_VAR 0 2
21664: PPUSH
21665: LD_VAR 0 3
21669: PPUSH
21670: CALL_OW 428
21674: PUSH
21675: LD_VAR 0 1
21679: EQUAL
21680: PUSH
21681: LD_VAR 0 1
21685: PPUSH
21686: CALL_OW 314
21690: NOT
21691: AND
21692: IFFALSE 21618
// PlaySoundXY ( x , y , PlantMine ) ;
21694: LD_VAR 0 2
21698: PPUSH
21699: LD_VAR 0 3
21703: PPUSH
21704: LD_STRING PlantMine
21706: PPUSH
21707: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
21711: LD_VAR 0 2
21715: PPUSH
21716: LD_VAR 0 3
21720: PPUSH
21721: LD_VAR 0 1
21725: PPUSH
21726: CALL_OW 255
21730: PPUSH
21731: LD_INT 0
21733: PPUSH
21734: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
21738: LD_ADDR_EXP 89
21742: PUSH
21743: LD_EXP 89
21747: PPUSH
21748: LD_VAR 0 5
21752: PUSH
21753: LD_EXP 89
21757: PUSH
21758: LD_VAR 0 5
21762: ARRAY
21763: PUSH
21764: LD_INT 1
21766: PLUS
21767: PUSH
21768: EMPTY
21769: LIST
21770: LIST
21771: PPUSH
21772: LD_VAR 0 2
21776: PUSH
21777: LD_VAR 0 3
21781: PUSH
21782: EMPTY
21783: LIST
21784: LIST
21785: PPUSH
21786: CALL 28118 0 3
21790: ST_TO_ADDR
// result := true ;
21791: LD_ADDR_VAR 0 4
21795: PUSH
21796: LD_INT 1
21798: ST_TO_ADDR
// end ;
21799: LD_VAR 0 4
21803: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
21804: LD_INT 0
21806: PPUSH
21807: PPUSH
21808: PPUSH
// if not unit in minersList then
21809: LD_VAR 0 1
21813: PUSH
21814: LD_EXP 88
21818: IN
21819: NOT
21820: IFFALSE 21824
// exit ;
21822: GO 22216
// index := GetElementIndex ( minersList , unit ) ;
21824: LD_ADDR_VAR 0 6
21828: PUSH
21829: LD_EXP 88
21833: PPUSH
21834: LD_VAR 0 1
21838: PPUSH
21839: CALL 27903 0 2
21843: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
21844: LD_ADDR_VAR 0 5
21848: PUSH
21849: DOUBLE
21850: LD_EXP 89
21854: PUSH
21855: LD_VAR 0 6
21859: ARRAY
21860: INC
21861: ST_TO_ADDR
21862: LD_INT 1
21864: PUSH
21865: FOR_DOWNTO
21866: IFFALSE 22027
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
21868: LD_EXP 89
21872: PUSH
21873: LD_VAR 0 6
21877: ARRAY
21878: PUSH
21879: LD_VAR 0 5
21883: ARRAY
21884: PUSH
21885: LD_INT 1
21887: ARRAY
21888: PUSH
21889: LD_VAR 0 2
21893: EQUAL
21894: PUSH
21895: LD_EXP 89
21899: PUSH
21900: LD_VAR 0 6
21904: ARRAY
21905: PUSH
21906: LD_VAR 0 5
21910: ARRAY
21911: PUSH
21912: LD_INT 2
21914: ARRAY
21915: PUSH
21916: LD_VAR 0 3
21920: EQUAL
21921: AND
21922: IFFALSE 22025
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
21924: LD_EXP 89
21928: PUSH
21929: LD_VAR 0 6
21933: ARRAY
21934: PUSH
21935: LD_VAR 0 5
21939: ARRAY
21940: PUSH
21941: LD_INT 1
21943: ARRAY
21944: PPUSH
21945: LD_EXP 89
21949: PUSH
21950: LD_VAR 0 6
21954: ARRAY
21955: PUSH
21956: LD_VAR 0 5
21960: ARRAY
21961: PUSH
21962: LD_INT 2
21964: ARRAY
21965: PPUSH
21966: LD_VAR 0 1
21970: PPUSH
21971: CALL_OW 255
21975: PPUSH
21976: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
21980: LD_ADDR_EXP 89
21984: PUSH
21985: LD_EXP 89
21989: PPUSH
21990: LD_VAR 0 6
21994: PPUSH
21995: LD_EXP 89
21999: PUSH
22000: LD_VAR 0 6
22004: ARRAY
22005: PPUSH
22006: LD_VAR 0 5
22010: PPUSH
22011: CALL_OW 3
22015: PPUSH
22016: CALL_OW 1
22020: ST_TO_ADDR
// exit ;
22021: POP
22022: POP
22023: GO 22216
// end ; end ;
22025: GO 21865
22027: POP
22028: POP
// for i := minerMinesList [ index ] downto 1 do
22029: LD_ADDR_VAR 0 5
22033: PUSH
22034: DOUBLE
22035: LD_EXP 89
22039: PUSH
22040: LD_VAR 0 6
22044: ARRAY
22045: INC
22046: ST_TO_ADDR
22047: LD_INT 1
22049: PUSH
22050: FOR_DOWNTO
22051: IFFALSE 22214
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
22053: LD_EXP 89
22057: PUSH
22058: LD_VAR 0 6
22062: ARRAY
22063: PUSH
22064: LD_VAR 0 5
22068: ARRAY
22069: PUSH
22070: LD_INT 1
22072: ARRAY
22073: PPUSH
22074: LD_EXP 89
22078: PUSH
22079: LD_VAR 0 6
22083: ARRAY
22084: PUSH
22085: LD_VAR 0 5
22089: ARRAY
22090: PUSH
22091: LD_INT 2
22093: ARRAY
22094: PPUSH
22095: LD_VAR 0 2
22099: PPUSH
22100: LD_VAR 0 3
22104: PPUSH
22105: CALL_OW 298
22109: PUSH
22110: LD_INT 6
22112: LESS
22113: IFFALSE 22212
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
22115: LD_EXP 89
22119: PUSH
22120: LD_VAR 0 6
22124: ARRAY
22125: PUSH
22126: LD_VAR 0 5
22130: ARRAY
22131: PUSH
22132: LD_INT 1
22134: ARRAY
22135: PPUSH
22136: LD_EXP 89
22140: PUSH
22141: LD_VAR 0 6
22145: ARRAY
22146: PUSH
22147: LD_VAR 0 5
22151: ARRAY
22152: PUSH
22153: LD_INT 2
22155: ARRAY
22156: PPUSH
22157: LD_VAR 0 1
22161: PPUSH
22162: CALL_OW 255
22166: PPUSH
22167: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
22171: LD_ADDR_EXP 89
22175: PUSH
22176: LD_EXP 89
22180: PPUSH
22181: LD_VAR 0 6
22185: PPUSH
22186: LD_EXP 89
22190: PUSH
22191: LD_VAR 0 6
22195: ARRAY
22196: PPUSH
22197: LD_VAR 0 5
22201: PPUSH
22202: CALL_OW 3
22206: PPUSH
22207: CALL_OW 1
22211: ST_TO_ADDR
// end ; end ;
22212: GO 22050
22214: POP
22215: POP
// end ;
22216: LD_VAR 0 4
22220: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
22221: LD_INT 0
22223: PPUSH
22224: PPUSH
22225: PPUSH
22226: PPUSH
22227: PPUSH
22228: PPUSH
22229: PPUSH
22230: PPUSH
22231: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
22232: LD_VAR 0 1
22236: PPUSH
22237: CALL_OW 264
22241: PUSH
22242: LD_EXP 98
22246: EQUAL
22247: NOT
22248: PUSH
22249: LD_VAR 0 1
22253: PUSH
22254: LD_EXP 88
22258: IN
22259: NOT
22260: OR
22261: IFFALSE 22265
// exit ;
22263: GO 22587
// index := GetElementIndex ( minersList , unit ) ;
22265: LD_ADDR_VAR 0 6
22269: PUSH
22270: LD_EXP 88
22274: PPUSH
22275: LD_VAR 0 1
22279: PPUSH
22280: CALL 27903 0 2
22284: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
22285: LD_ADDR_VAR 0 8
22289: PUSH
22290: LD_EXP 90
22294: PUSH
22295: LD_EXP 89
22299: PUSH
22300: LD_VAR 0 6
22304: ARRAY
22305: MINUS
22306: ST_TO_ADDR
// if not minesFreeAmount then
22307: LD_VAR 0 8
22311: NOT
22312: IFFALSE 22316
// exit ;
22314: GO 22587
// tmp := [ ] ;
22316: LD_ADDR_VAR 0 7
22320: PUSH
22321: EMPTY
22322: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
22323: LD_ADDR_VAR 0 5
22327: PUSH
22328: DOUBLE
22329: LD_INT 1
22331: DEC
22332: ST_TO_ADDR
22333: LD_VAR 0 8
22337: PUSH
22338: FOR_TO
22339: IFFALSE 22534
// begin _d := rand ( 0 , 5 ) ;
22341: LD_ADDR_VAR 0 11
22345: PUSH
22346: LD_INT 0
22348: PPUSH
22349: LD_INT 5
22351: PPUSH
22352: CALL_OW 12
22356: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
22357: LD_ADDR_VAR 0 12
22361: PUSH
22362: LD_INT 2
22364: PPUSH
22365: LD_INT 6
22367: PPUSH
22368: CALL_OW 12
22372: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
22373: LD_ADDR_VAR 0 9
22377: PUSH
22378: LD_VAR 0 2
22382: PPUSH
22383: LD_VAR 0 11
22387: PPUSH
22388: LD_VAR 0 12
22392: PPUSH
22393: CALL_OW 272
22397: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
22398: LD_ADDR_VAR 0 10
22402: PUSH
22403: LD_VAR 0 3
22407: PPUSH
22408: LD_VAR 0 11
22412: PPUSH
22413: LD_VAR 0 12
22417: PPUSH
22418: CALL_OW 273
22422: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
22423: LD_VAR 0 9
22427: PPUSH
22428: LD_VAR 0 10
22432: PPUSH
22433: CALL_OW 488
22437: PUSH
22438: LD_VAR 0 9
22442: PUSH
22443: LD_VAR 0 10
22447: PUSH
22448: EMPTY
22449: LIST
22450: LIST
22451: PUSH
22452: LD_VAR 0 7
22456: IN
22457: NOT
22458: AND
22459: PUSH
22460: LD_VAR 0 9
22464: PPUSH
22465: LD_VAR 0 10
22469: PPUSH
22470: CALL_OW 458
22474: NOT
22475: AND
22476: IFFALSE 22518
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
22478: LD_ADDR_VAR 0 7
22482: PUSH
22483: LD_VAR 0 7
22487: PPUSH
22488: LD_VAR 0 7
22492: PUSH
22493: LD_INT 1
22495: PLUS
22496: PPUSH
22497: LD_VAR 0 9
22501: PUSH
22502: LD_VAR 0 10
22506: PUSH
22507: EMPTY
22508: LIST
22509: LIST
22510: PPUSH
22511: CALL_OW 1
22515: ST_TO_ADDR
22516: GO 22532
// i := i - 1 ;
22518: LD_ADDR_VAR 0 5
22522: PUSH
22523: LD_VAR 0 5
22527: PUSH
22528: LD_INT 1
22530: MINUS
22531: ST_TO_ADDR
// end ;
22532: GO 22338
22534: POP
22535: POP
// for i in tmp do
22536: LD_ADDR_VAR 0 5
22540: PUSH
22541: LD_VAR 0 7
22545: PUSH
22546: FOR_IN
22547: IFFALSE 22585
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
22549: LD_VAR 0 1
22553: PPUSH
22554: LD_VAR 0 5
22558: PUSH
22559: LD_INT 1
22561: ARRAY
22562: PPUSH
22563: LD_VAR 0 5
22567: PUSH
22568: LD_INT 2
22570: ARRAY
22571: PPUSH
22572: CALL 21527 0 3
22576: NOT
22577: IFFALSE 22583
// exit ;
22579: POP
22580: POP
22581: GO 22587
22583: GO 22546
22585: POP
22586: POP
// end ;
22587: LD_VAR 0 4
22591: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
22592: LD_INT 0
22594: PPUSH
22595: PPUSH
22596: PPUSH
22597: PPUSH
22598: PPUSH
22599: PPUSH
22600: PPUSH
// if not GetClass ( unit ) = class_sniper then
22601: LD_VAR 0 1
22605: PPUSH
22606: CALL_OW 257
22610: PUSH
22611: LD_INT 5
22613: EQUAL
22614: NOT
22615: IFFALSE 22619
// exit ;
22617: GO 23007
// dist := 8 ;
22619: LD_ADDR_VAR 0 5
22623: PUSH
22624: LD_INT 8
22626: ST_TO_ADDR
// viewRange := 12 ;
22627: LD_ADDR_VAR 0 7
22631: PUSH
22632: LD_INT 12
22634: ST_TO_ADDR
// side := GetSide ( unit ) ;
22635: LD_ADDR_VAR 0 6
22639: PUSH
22640: LD_VAR 0 1
22644: PPUSH
22645: CALL_OW 255
22649: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
22650: LD_INT 61
22652: PPUSH
22653: LD_VAR 0 6
22657: PPUSH
22658: CALL_OW 321
22662: PUSH
22663: LD_INT 2
22665: EQUAL
22666: IFFALSE 22676
// viewRange := 16 ;
22668: LD_ADDR_VAR 0 7
22672: PUSH
22673: LD_INT 16
22675: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
22676: LD_VAR 0 1
22680: PPUSH
22681: LD_VAR 0 2
22685: PPUSH
22686: LD_VAR 0 3
22690: PPUSH
22691: CALL_OW 297
22695: PUSH
22696: LD_VAR 0 5
22700: GREATER
22701: IFFALSE 22780
// begin ComMoveXY ( unit , x , y ) ;
22703: LD_VAR 0 1
22707: PPUSH
22708: LD_VAR 0 2
22712: PPUSH
22713: LD_VAR 0 3
22717: PPUSH
22718: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
22722: LD_INT 35
22724: PPUSH
22725: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
22729: LD_VAR 0 1
22733: PPUSH
22734: LD_VAR 0 2
22738: PPUSH
22739: LD_VAR 0 3
22743: PPUSH
22744: CALL 58300 0 3
22748: NOT
22749: IFFALSE 22753
// exit ;
22751: GO 23007
// until GetDistUnitXY ( unit , x , y ) < dist ;
22753: LD_VAR 0 1
22757: PPUSH
22758: LD_VAR 0 2
22762: PPUSH
22763: LD_VAR 0 3
22767: PPUSH
22768: CALL_OW 297
22772: PUSH
22773: LD_VAR 0 5
22777: LESS
22778: IFFALSE 22722
// end ; ComTurnXY ( unit , x , y ) ;
22780: LD_VAR 0 1
22784: PPUSH
22785: LD_VAR 0 2
22789: PPUSH
22790: LD_VAR 0 3
22794: PPUSH
22795: CALL_OW 118
// wait ( 5 ) ;
22799: LD_INT 5
22801: PPUSH
22802: CALL_OW 67
// _d := GetDir ( unit ) ;
22806: LD_ADDR_VAR 0 10
22810: PUSH
22811: LD_VAR 0 1
22815: PPUSH
22816: CALL_OW 254
22820: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
22821: LD_ADDR_VAR 0 8
22825: PUSH
22826: LD_VAR 0 1
22830: PPUSH
22831: CALL_OW 250
22835: PPUSH
22836: LD_VAR 0 10
22840: PPUSH
22841: LD_VAR 0 5
22845: PPUSH
22846: CALL_OW 272
22850: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
22851: LD_ADDR_VAR 0 9
22855: PUSH
22856: LD_VAR 0 1
22860: PPUSH
22861: CALL_OW 251
22865: PPUSH
22866: LD_VAR 0 10
22870: PPUSH
22871: LD_VAR 0 5
22875: PPUSH
22876: CALL_OW 273
22880: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22881: LD_VAR 0 8
22885: PPUSH
22886: LD_VAR 0 9
22890: PPUSH
22891: CALL_OW 488
22895: NOT
22896: IFFALSE 22900
// exit ;
22898: GO 23007
// ComAnimCustom ( unit , 1 ) ;
22900: LD_VAR 0 1
22904: PPUSH
22905: LD_INT 1
22907: PPUSH
22908: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
22912: LD_VAR 0 8
22916: PPUSH
22917: LD_VAR 0 9
22921: PPUSH
22922: LD_VAR 0 6
22926: PPUSH
22927: LD_VAR 0 7
22931: PPUSH
22932: CALL_OW 330
// repeat wait ( 1 ) ;
22936: LD_INT 1
22938: PPUSH
22939: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
22943: LD_VAR 0 1
22947: PPUSH
22948: CALL_OW 316
22952: PUSH
22953: LD_VAR 0 1
22957: PPUSH
22958: CALL_OW 314
22962: OR
22963: PUSH
22964: LD_VAR 0 1
22968: PPUSH
22969: CALL_OW 302
22973: NOT
22974: OR
22975: PUSH
22976: LD_VAR 0 1
22980: PPUSH
22981: CALL_OW 301
22985: OR
22986: IFFALSE 22936
// RemoveSeeing ( _x , _y , side ) ;
22988: LD_VAR 0 8
22992: PPUSH
22993: LD_VAR 0 9
22997: PPUSH
22998: LD_VAR 0 6
23002: PPUSH
23003: CALL_OW 331
// end ; end_of_file
23007: LD_VAR 0 4
23011: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
23012: LD_INT 0
23014: PPUSH
// ar_miner := 81 ;
23015: LD_ADDR_EXP 98
23019: PUSH
23020: LD_INT 81
23022: ST_TO_ADDR
// ar_crane := 88 ;
23023: LD_ADDR_EXP 97
23027: PUSH
23028: LD_INT 88
23030: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
23031: LD_ADDR_EXP 92
23035: PUSH
23036: LD_INT 89
23038: ST_TO_ADDR
// us_hack := 99 ;
23039: LD_ADDR_EXP 93
23043: PUSH
23044: LD_INT 99
23046: ST_TO_ADDR
// us_artillery := 97 ;
23047: LD_ADDR_EXP 94
23051: PUSH
23052: LD_INT 97
23054: ST_TO_ADDR
// ar_bio_bomb := 91 ;
23055: LD_ADDR_EXP 95
23059: PUSH
23060: LD_INT 91
23062: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
23063: LD_ADDR_EXP 96
23067: PUSH
23068: LD_INT 92
23070: ST_TO_ADDR
// ru_radar := 98 ;
23071: LD_ADDR_EXP 91
23075: PUSH
23076: LD_INT 98
23078: ST_TO_ADDR
// tech_Artillery := 80 ;
23079: LD_ADDR_EXP 99
23083: PUSH
23084: LD_INT 80
23086: ST_TO_ADDR
// tech_RadMat := 81 ;
23087: LD_ADDR_EXP 100
23091: PUSH
23092: LD_INT 81
23094: ST_TO_ADDR
// tech_BasicTools := 82 ;
23095: LD_ADDR_EXP 101
23099: PUSH
23100: LD_INT 82
23102: ST_TO_ADDR
// tech_Cargo := 83 ;
23103: LD_ADDR_EXP 102
23107: PUSH
23108: LD_INT 83
23110: ST_TO_ADDR
// tech_Track := 84 ;
23111: LD_ADDR_EXP 103
23115: PUSH
23116: LD_INT 84
23118: ST_TO_ADDR
// tech_Crane := 85 ;
23119: LD_ADDR_EXP 104
23123: PUSH
23124: LD_INT 85
23126: ST_TO_ADDR
// tech_Bulldozer := 86 ;
23127: LD_ADDR_EXP 105
23131: PUSH
23132: LD_INT 86
23134: ST_TO_ADDR
// tech_Hovercraft := 87 ;
23135: LD_ADDR_EXP 106
23139: PUSH
23140: LD_INT 87
23142: ST_TO_ADDR
// class_mastodont := 31 ;
23143: LD_ADDR_EXP 107
23147: PUSH
23148: LD_INT 31
23150: ST_TO_ADDR
// class_horse := 21 ;
23151: LD_ADDR_EXP 108
23155: PUSH
23156: LD_INT 21
23158: ST_TO_ADDR
// end ;
23159: LD_VAR 0 1
23163: RET
// every 1 do
23164: GO 23166
23166: DISABLE
// InitGlobalVariables ; end_of_file
23167: CALL 23012 0 0
23171: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
23172: LD_INT 0
23174: PPUSH
23175: PPUSH
// if exist_mode then
23176: LD_VAR 0 2
23180: IFFALSE 23205
// unit := CreateCharacter ( prefix & ident ) else
23182: LD_ADDR_VAR 0 5
23186: PUSH
23187: LD_VAR 0 3
23191: PUSH
23192: LD_VAR 0 1
23196: STR
23197: PPUSH
23198: CALL_OW 34
23202: ST_TO_ADDR
23203: GO 23220
// unit := NewCharacter ( ident ) ;
23205: LD_ADDR_VAR 0 5
23209: PUSH
23210: LD_VAR 0 1
23214: PPUSH
23215: CALL_OW 25
23219: ST_TO_ADDR
// result := unit ;
23220: LD_ADDR_VAR 0 4
23224: PUSH
23225: LD_VAR 0 5
23229: ST_TO_ADDR
// end ;
23230: LD_VAR 0 4
23234: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
23235: LD_INT 0
23237: PPUSH
23238: PPUSH
// if not side or not nation then
23239: LD_VAR 0 1
23243: NOT
23244: PUSH
23245: LD_VAR 0 2
23249: NOT
23250: OR
23251: IFFALSE 23255
// exit ;
23253: GO 24019
// case nation of nation_american :
23255: LD_VAR 0 2
23259: PUSH
23260: LD_INT 1
23262: DOUBLE
23263: EQUAL
23264: IFTRUE 23268
23266: GO 23482
23268: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
23269: LD_ADDR_VAR 0 4
23273: PUSH
23274: LD_INT 35
23276: PUSH
23277: LD_INT 45
23279: PUSH
23280: LD_INT 46
23282: PUSH
23283: LD_INT 47
23285: PUSH
23286: LD_INT 82
23288: PUSH
23289: LD_INT 83
23291: PUSH
23292: LD_INT 84
23294: PUSH
23295: LD_INT 85
23297: PUSH
23298: LD_INT 86
23300: PUSH
23301: LD_INT 1
23303: PUSH
23304: LD_INT 2
23306: PUSH
23307: LD_INT 6
23309: PUSH
23310: LD_INT 15
23312: PUSH
23313: LD_INT 16
23315: PUSH
23316: LD_INT 7
23318: PUSH
23319: LD_INT 12
23321: PUSH
23322: LD_INT 13
23324: PUSH
23325: LD_INT 10
23327: PUSH
23328: LD_INT 14
23330: PUSH
23331: LD_INT 20
23333: PUSH
23334: LD_INT 21
23336: PUSH
23337: LD_INT 22
23339: PUSH
23340: LD_INT 25
23342: PUSH
23343: LD_INT 32
23345: PUSH
23346: LD_INT 27
23348: PUSH
23349: LD_INT 36
23351: PUSH
23352: LD_INT 69
23354: PUSH
23355: LD_INT 39
23357: PUSH
23358: LD_INT 34
23360: PUSH
23361: LD_INT 40
23363: PUSH
23364: LD_INT 48
23366: PUSH
23367: LD_INT 49
23369: PUSH
23370: LD_INT 50
23372: PUSH
23373: LD_INT 51
23375: PUSH
23376: LD_INT 52
23378: PUSH
23379: LD_INT 53
23381: PUSH
23382: LD_INT 54
23384: PUSH
23385: LD_INT 55
23387: PUSH
23388: LD_INT 56
23390: PUSH
23391: LD_INT 57
23393: PUSH
23394: LD_INT 58
23396: PUSH
23397: LD_INT 59
23399: PUSH
23400: LD_INT 60
23402: PUSH
23403: LD_INT 61
23405: PUSH
23406: LD_INT 62
23408: PUSH
23409: LD_INT 80
23411: PUSH
23412: LD_INT 82
23414: PUSH
23415: LD_INT 83
23417: PUSH
23418: LD_INT 84
23420: PUSH
23421: LD_INT 85
23423: PUSH
23424: LD_INT 86
23426: PUSH
23427: EMPTY
23428: LIST
23429: LIST
23430: LIST
23431: LIST
23432: LIST
23433: LIST
23434: LIST
23435: LIST
23436: LIST
23437: LIST
23438: LIST
23439: LIST
23440: LIST
23441: LIST
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: LIST
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: LIST
23477: LIST
23478: LIST
23479: ST_TO_ADDR
23480: GO 23943
23482: LD_INT 2
23484: DOUBLE
23485: EQUAL
23486: IFTRUE 23490
23488: GO 23712
23490: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
23491: LD_ADDR_VAR 0 4
23495: PUSH
23496: LD_INT 35
23498: PUSH
23499: LD_INT 45
23501: PUSH
23502: LD_INT 46
23504: PUSH
23505: LD_INT 47
23507: PUSH
23508: LD_INT 82
23510: PUSH
23511: LD_INT 83
23513: PUSH
23514: LD_INT 84
23516: PUSH
23517: LD_INT 85
23519: PUSH
23520: LD_INT 87
23522: PUSH
23523: LD_INT 70
23525: PUSH
23526: LD_INT 1
23528: PUSH
23529: LD_INT 11
23531: PUSH
23532: LD_INT 3
23534: PUSH
23535: LD_INT 4
23537: PUSH
23538: LD_INT 5
23540: PUSH
23541: LD_INT 6
23543: PUSH
23544: LD_INT 15
23546: PUSH
23547: LD_INT 18
23549: PUSH
23550: LD_INT 7
23552: PUSH
23553: LD_INT 17
23555: PUSH
23556: LD_INT 8
23558: PUSH
23559: LD_INT 20
23561: PUSH
23562: LD_INT 21
23564: PUSH
23565: LD_INT 22
23567: PUSH
23568: LD_INT 72
23570: PUSH
23571: LD_INT 26
23573: PUSH
23574: LD_INT 69
23576: PUSH
23577: LD_INT 39
23579: PUSH
23580: LD_INT 40
23582: PUSH
23583: LD_INT 41
23585: PUSH
23586: LD_INT 42
23588: PUSH
23589: LD_INT 43
23591: PUSH
23592: LD_INT 48
23594: PUSH
23595: LD_INT 49
23597: PUSH
23598: LD_INT 50
23600: PUSH
23601: LD_INT 51
23603: PUSH
23604: LD_INT 52
23606: PUSH
23607: LD_INT 53
23609: PUSH
23610: LD_INT 54
23612: PUSH
23613: LD_INT 55
23615: PUSH
23616: LD_INT 56
23618: PUSH
23619: LD_INT 60
23621: PUSH
23622: LD_INT 61
23624: PUSH
23625: LD_INT 62
23627: PUSH
23628: LD_INT 66
23630: PUSH
23631: LD_INT 67
23633: PUSH
23634: LD_INT 68
23636: PUSH
23637: LD_INT 81
23639: PUSH
23640: LD_INT 82
23642: PUSH
23643: LD_INT 83
23645: PUSH
23646: LD_INT 84
23648: PUSH
23649: LD_INT 85
23651: PUSH
23652: LD_INT 87
23654: PUSH
23655: EMPTY
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: LIST
23680: LIST
23681: LIST
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: LIST
23690: LIST
23691: LIST
23692: LIST
23693: LIST
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: LIST
23700: LIST
23701: LIST
23702: LIST
23703: LIST
23704: LIST
23705: LIST
23706: LIST
23707: LIST
23708: LIST
23709: ST_TO_ADDR
23710: GO 23943
23712: LD_INT 3
23714: DOUBLE
23715: EQUAL
23716: IFTRUE 23720
23718: GO 23942
23720: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
23721: LD_ADDR_VAR 0 4
23725: PUSH
23726: LD_INT 46
23728: PUSH
23729: LD_INT 47
23731: PUSH
23732: LD_INT 1
23734: PUSH
23735: LD_INT 2
23737: PUSH
23738: LD_INT 82
23740: PUSH
23741: LD_INT 83
23743: PUSH
23744: LD_INT 84
23746: PUSH
23747: LD_INT 85
23749: PUSH
23750: LD_INT 86
23752: PUSH
23753: LD_INT 11
23755: PUSH
23756: LD_INT 9
23758: PUSH
23759: LD_INT 20
23761: PUSH
23762: LD_INT 19
23764: PUSH
23765: LD_INT 21
23767: PUSH
23768: LD_INT 24
23770: PUSH
23771: LD_INT 22
23773: PUSH
23774: LD_INT 25
23776: PUSH
23777: LD_INT 28
23779: PUSH
23780: LD_INT 29
23782: PUSH
23783: LD_INT 30
23785: PUSH
23786: LD_INT 31
23788: PUSH
23789: LD_INT 37
23791: PUSH
23792: LD_INT 38
23794: PUSH
23795: LD_INT 32
23797: PUSH
23798: LD_INT 27
23800: PUSH
23801: LD_INT 33
23803: PUSH
23804: LD_INT 69
23806: PUSH
23807: LD_INT 39
23809: PUSH
23810: LD_INT 34
23812: PUSH
23813: LD_INT 40
23815: PUSH
23816: LD_INT 71
23818: PUSH
23819: LD_INT 23
23821: PUSH
23822: LD_INT 44
23824: PUSH
23825: LD_INT 48
23827: PUSH
23828: LD_INT 49
23830: PUSH
23831: LD_INT 50
23833: PUSH
23834: LD_INT 51
23836: PUSH
23837: LD_INT 52
23839: PUSH
23840: LD_INT 53
23842: PUSH
23843: LD_INT 54
23845: PUSH
23846: LD_INT 55
23848: PUSH
23849: LD_INT 56
23851: PUSH
23852: LD_INT 57
23854: PUSH
23855: LD_INT 58
23857: PUSH
23858: LD_INT 59
23860: PUSH
23861: LD_INT 63
23863: PUSH
23864: LD_INT 64
23866: PUSH
23867: LD_INT 65
23869: PUSH
23870: LD_INT 82
23872: PUSH
23873: LD_INT 83
23875: PUSH
23876: LD_INT 84
23878: PUSH
23879: LD_INT 85
23881: PUSH
23882: LD_INT 86
23884: PUSH
23885: EMPTY
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: LIST
23913: LIST
23914: LIST
23915: LIST
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: LIST
23925: LIST
23926: LIST
23927: LIST
23928: LIST
23929: LIST
23930: LIST
23931: LIST
23932: LIST
23933: LIST
23934: LIST
23935: LIST
23936: LIST
23937: LIST
23938: LIST
23939: ST_TO_ADDR
23940: GO 23943
23942: POP
// if state > - 1 and state < 3 then
23943: LD_VAR 0 3
23947: PUSH
23948: LD_INT 1
23950: NEG
23951: GREATER
23952: PUSH
23953: LD_VAR 0 3
23957: PUSH
23958: LD_INT 3
23960: LESS
23961: AND
23962: IFFALSE 24019
// for i in result do
23964: LD_ADDR_VAR 0 5
23968: PUSH
23969: LD_VAR 0 4
23973: PUSH
23974: FOR_IN
23975: IFFALSE 24017
// if GetTech ( i , side ) <> state then
23977: LD_VAR 0 5
23981: PPUSH
23982: LD_VAR 0 1
23986: PPUSH
23987: CALL_OW 321
23991: PUSH
23992: LD_VAR 0 3
23996: NONEQUAL
23997: IFFALSE 24015
// result := result diff i ;
23999: LD_ADDR_VAR 0 4
24003: PUSH
24004: LD_VAR 0 4
24008: PUSH
24009: LD_VAR 0 5
24013: DIFF
24014: ST_TO_ADDR
24015: GO 23974
24017: POP
24018: POP
// end ;
24019: LD_VAR 0 4
24023: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
24024: LD_INT 0
24026: PPUSH
24027: PPUSH
24028: PPUSH
// result := true ;
24029: LD_ADDR_VAR 0 3
24033: PUSH
24034: LD_INT 1
24036: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
24037: LD_ADDR_VAR 0 5
24041: PUSH
24042: LD_VAR 0 2
24046: PPUSH
24047: CALL_OW 480
24051: ST_TO_ADDR
// if not tmp then
24052: LD_VAR 0 5
24056: NOT
24057: IFFALSE 24061
// exit ;
24059: GO 24110
// for i in tmp do
24061: LD_ADDR_VAR 0 4
24065: PUSH
24066: LD_VAR 0 5
24070: PUSH
24071: FOR_IN
24072: IFFALSE 24108
// if GetTech ( i , side ) <> state_researched then
24074: LD_VAR 0 4
24078: PPUSH
24079: LD_VAR 0 1
24083: PPUSH
24084: CALL_OW 321
24088: PUSH
24089: LD_INT 2
24091: NONEQUAL
24092: IFFALSE 24106
// begin result := false ;
24094: LD_ADDR_VAR 0 3
24098: PUSH
24099: LD_INT 0
24101: ST_TO_ADDR
// exit ;
24102: POP
24103: POP
24104: GO 24110
// end ;
24106: GO 24071
24108: POP
24109: POP
// end ;
24110: LD_VAR 0 3
24114: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
24115: LD_INT 0
24117: PPUSH
24118: PPUSH
24119: PPUSH
24120: PPUSH
24121: PPUSH
24122: PPUSH
24123: PPUSH
24124: PPUSH
24125: PPUSH
24126: PPUSH
24127: PPUSH
24128: PPUSH
24129: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
24130: LD_VAR 0 1
24134: NOT
24135: PUSH
24136: LD_VAR 0 1
24140: PPUSH
24141: CALL_OW 257
24145: PUSH
24146: LD_INT 9
24148: NONEQUAL
24149: OR
24150: IFFALSE 24154
// exit ;
24152: GO 24727
// side := GetSide ( unit ) ;
24154: LD_ADDR_VAR 0 9
24158: PUSH
24159: LD_VAR 0 1
24163: PPUSH
24164: CALL_OW 255
24168: ST_TO_ADDR
// tech_space := tech_spacanom ;
24169: LD_ADDR_VAR 0 12
24173: PUSH
24174: LD_INT 29
24176: ST_TO_ADDR
// tech_time := tech_taurad ;
24177: LD_ADDR_VAR 0 13
24181: PUSH
24182: LD_INT 28
24184: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
24185: LD_ADDR_VAR 0 11
24189: PUSH
24190: LD_VAR 0 1
24194: PPUSH
24195: CALL_OW 310
24199: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
24200: LD_VAR 0 11
24204: PPUSH
24205: CALL_OW 247
24209: PUSH
24210: LD_INT 2
24212: EQUAL
24213: IFFALSE 24217
// exit ;
24215: GO 24727
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24217: LD_ADDR_VAR 0 8
24221: PUSH
24222: LD_INT 81
24224: PUSH
24225: LD_VAR 0 9
24229: PUSH
24230: EMPTY
24231: LIST
24232: LIST
24233: PUSH
24234: LD_INT 3
24236: PUSH
24237: LD_INT 21
24239: PUSH
24240: LD_INT 3
24242: PUSH
24243: EMPTY
24244: LIST
24245: LIST
24246: PUSH
24247: EMPTY
24248: LIST
24249: LIST
24250: PUSH
24251: EMPTY
24252: LIST
24253: LIST
24254: PPUSH
24255: CALL_OW 69
24259: ST_TO_ADDR
// if not tmp then
24260: LD_VAR 0 8
24264: NOT
24265: IFFALSE 24269
// exit ;
24267: GO 24727
// if in_unit then
24269: LD_VAR 0 11
24273: IFFALSE 24297
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
24275: LD_ADDR_VAR 0 10
24279: PUSH
24280: LD_VAR 0 8
24284: PPUSH
24285: LD_VAR 0 11
24289: PPUSH
24290: CALL_OW 74
24294: ST_TO_ADDR
24295: GO 24317
// enemy := NearestUnitToUnit ( tmp , unit ) ;
24297: LD_ADDR_VAR 0 10
24301: PUSH
24302: LD_VAR 0 8
24306: PPUSH
24307: LD_VAR 0 1
24311: PPUSH
24312: CALL_OW 74
24316: ST_TO_ADDR
// if not enemy then
24317: LD_VAR 0 10
24321: NOT
24322: IFFALSE 24326
// exit ;
24324: GO 24727
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
24326: LD_VAR 0 11
24330: PUSH
24331: LD_VAR 0 11
24335: PPUSH
24336: LD_VAR 0 10
24340: PPUSH
24341: CALL_OW 296
24345: PUSH
24346: LD_INT 13
24348: GREATER
24349: AND
24350: PUSH
24351: LD_VAR 0 1
24355: PPUSH
24356: LD_VAR 0 10
24360: PPUSH
24361: CALL_OW 296
24365: PUSH
24366: LD_INT 12
24368: GREATER
24369: OR
24370: IFFALSE 24374
// exit ;
24372: GO 24727
// missile := [ 1 ] ;
24374: LD_ADDR_VAR 0 14
24378: PUSH
24379: LD_INT 1
24381: PUSH
24382: EMPTY
24383: LIST
24384: ST_TO_ADDR
// if Researched ( side , tech_space ) then
24385: LD_VAR 0 9
24389: PPUSH
24390: LD_VAR 0 12
24394: PPUSH
24395: CALL_OW 325
24399: IFFALSE 24428
// missile := Insert ( missile , missile + 1 , 2 ) ;
24401: LD_ADDR_VAR 0 14
24405: PUSH
24406: LD_VAR 0 14
24410: PPUSH
24411: LD_VAR 0 14
24415: PUSH
24416: LD_INT 1
24418: PLUS
24419: PPUSH
24420: LD_INT 2
24422: PPUSH
24423: CALL_OW 2
24427: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
24428: LD_VAR 0 9
24432: PPUSH
24433: LD_VAR 0 13
24437: PPUSH
24438: CALL_OW 325
24442: PUSH
24443: LD_VAR 0 10
24447: PPUSH
24448: CALL_OW 255
24452: PPUSH
24453: LD_VAR 0 13
24457: PPUSH
24458: CALL_OW 325
24462: NOT
24463: AND
24464: IFFALSE 24493
// missile := Insert ( missile , missile + 1 , 3 ) ;
24466: LD_ADDR_VAR 0 14
24470: PUSH
24471: LD_VAR 0 14
24475: PPUSH
24476: LD_VAR 0 14
24480: PUSH
24481: LD_INT 1
24483: PLUS
24484: PPUSH
24485: LD_INT 3
24487: PPUSH
24488: CALL_OW 2
24492: ST_TO_ADDR
// if missile < 2 then
24493: LD_VAR 0 14
24497: PUSH
24498: LD_INT 2
24500: LESS
24501: IFFALSE 24505
// exit ;
24503: GO 24727
// x := GetX ( enemy ) ;
24505: LD_ADDR_VAR 0 4
24509: PUSH
24510: LD_VAR 0 10
24514: PPUSH
24515: CALL_OW 250
24519: ST_TO_ADDR
// y := GetY ( enemy ) ;
24520: LD_ADDR_VAR 0 5
24524: PUSH
24525: LD_VAR 0 10
24529: PPUSH
24530: CALL_OW 251
24534: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
24535: LD_ADDR_VAR 0 6
24539: PUSH
24540: LD_VAR 0 4
24544: PUSH
24545: LD_INT 1
24547: NEG
24548: PPUSH
24549: LD_INT 1
24551: PPUSH
24552: CALL_OW 12
24556: PLUS
24557: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
24558: LD_ADDR_VAR 0 7
24562: PUSH
24563: LD_VAR 0 5
24567: PUSH
24568: LD_INT 1
24570: NEG
24571: PPUSH
24572: LD_INT 1
24574: PPUSH
24575: CALL_OW 12
24579: PLUS
24580: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24581: LD_VAR 0 6
24585: PPUSH
24586: LD_VAR 0 7
24590: PPUSH
24591: CALL_OW 488
24595: NOT
24596: IFFALSE 24618
// begin _x := x ;
24598: LD_ADDR_VAR 0 6
24602: PUSH
24603: LD_VAR 0 4
24607: ST_TO_ADDR
// _y := y ;
24608: LD_ADDR_VAR 0 7
24612: PUSH
24613: LD_VAR 0 5
24617: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
24618: LD_ADDR_VAR 0 3
24622: PUSH
24623: LD_INT 1
24625: PPUSH
24626: LD_VAR 0 14
24630: PPUSH
24631: CALL_OW 12
24635: ST_TO_ADDR
// case i of 1 :
24636: LD_VAR 0 3
24640: PUSH
24641: LD_INT 1
24643: DOUBLE
24644: EQUAL
24645: IFTRUE 24649
24647: GO 24666
24649: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
24650: LD_VAR 0 1
24654: PPUSH
24655: LD_VAR 0 10
24659: PPUSH
24660: CALL_OW 115
24664: GO 24727
24666: LD_INT 2
24668: DOUBLE
24669: EQUAL
24670: IFTRUE 24674
24672: GO 24696
24674: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
24675: LD_VAR 0 1
24679: PPUSH
24680: LD_VAR 0 6
24684: PPUSH
24685: LD_VAR 0 7
24689: PPUSH
24690: CALL_OW 153
24694: GO 24727
24696: LD_INT 3
24698: DOUBLE
24699: EQUAL
24700: IFTRUE 24704
24702: GO 24726
24704: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
24705: LD_VAR 0 1
24709: PPUSH
24710: LD_VAR 0 6
24714: PPUSH
24715: LD_VAR 0 7
24719: PPUSH
24720: CALL_OW 154
24724: GO 24727
24726: POP
// end ;
24727: LD_VAR 0 2
24731: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
24732: LD_INT 0
24734: PPUSH
24735: PPUSH
24736: PPUSH
24737: PPUSH
24738: PPUSH
24739: PPUSH
// if not unit or not building then
24740: LD_VAR 0 1
24744: NOT
24745: PUSH
24746: LD_VAR 0 2
24750: NOT
24751: OR
24752: IFFALSE 24756
// exit ;
24754: GO 24914
// x := GetX ( building ) ;
24756: LD_ADDR_VAR 0 5
24760: PUSH
24761: LD_VAR 0 2
24765: PPUSH
24766: CALL_OW 250
24770: ST_TO_ADDR
// y := GetY ( building ) ;
24771: LD_ADDR_VAR 0 6
24775: PUSH
24776: LD_VAR 0 2
24780: PPUSH
24781: CALL_OW 251
24785: ST_TO_ADDR
// for i = 0 to 5 do
24786: LD_ADDR_VAR 0 4
24790: PUSH
24791: DOUBLE
24792: LD_INT 0
24794: DEC
24795: ST_TO_ADDR
24796: LD_INT 5
24798: PUSH
24799: FOR_TO
24800: IFFALSE 24912
// begin _x := ShiftX ( x , i , 3 ) ;
24802: LD_ADDR_VAR 0 7
24806: PUSH
24807: LD_VAR 0 5
24811: PPUSH
24812: LD_VAR 0 4
24816: PPUSH
24817: LD_INT 3
24819: PPUSH
24820: CALL_OW 272
24824: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
24825: LD_ADDR_VAR 0 8
24829: PUSH
24830: LD_VAR 0 6
24834: PPUSH
24835: LD_VAR 0 4
24839: PPUSH
24840: LD_INT 3
24842: PPUSH
24843: CALL_OW 273
24847: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24848: LD_VAR 0 7
24852: PPUSH
24853: LD_VAR 0 8
24857: PPUSH
24858: CALL_OW 488
24862: NOT
24863: IFFALSE 24867
// continue ;
24865: GO 24799
// if HexInfo ( _x , _y ) = 0 then
24867: LD_VAR 0 7
24871: PPUSH
24872: LD_VAR 0 8
24876: PPUSH
24877: CALL_OW 428
24881: PUSH
24882: LD_INT 0
24884: EQUAL
24885: IFFALSE 24910
// begin ComMoveXY ( unit , _x , _y ) ;
24887: LD_VAR 0 1
24891: PPUSH
24892: LD_VAR 0 7
24896: PPUSH
24897: LD_VAR 0 8
24901: PPUSH
24902: CALL_OW 111
// exit ;
24906: POP
24907: POP
24908: GO 24914
// end ; end ;
24910: GO 24799
24912: POP
24913: POP
// end ;
24914: LD_VAR 0 3
24918: RET
// export function ScanBase ( side , base_area ) ; begin
24919: LD_INT 0
24921: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
24922: LD_ADDR_VAR 0 3
24926: PUSH
24927: LD_VAR 0 2
24931: PPUSH
24932: LD_INT 81
24934: PUSH
24935: LD_VAR 0 1
24939: PUSH
24940: EMPTY
24941: LIST
24942: LIST
24943: PPUSH
24944: CALL_OW 70
24948: ST_TO_ADDR
// end ;
24949: LD_VAR 0 3
24953: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
24954: LD_INT 0
24956: PPUSH
24957: PPUSH
24958: PPUSH
24959: PPUSH
// result := false ;
24960: LD_ADDR_VAR 0 2
24964: PUSH
24965: LD_INT 0
24967: ST_TO_ADDR
// side := GetSide ( unit ) ;
24968: LD_ADDR_VAR 0 3
24972: PUSH
24973: LD_VAR 0 1
24977: PPUSH
24978: CALL_OW 255
24982: ST_TO_ADDR
// nat := GetNation ( unit ) ;
24983: LD_ADDR_VAR 0 4
24987: PUSH
24988: LD_VAR 0 1
24992: PPUSH
24993: CALL_OW 248
24997: ST_TO_ADDR
// case nat of 1 :
24998: LD_VAR 0 4
25002: PUSH
25003: LD_INT 1
25005: DOUBLE
25006: EQUAL
25007: IFTRUE 25011
25009: GO 25022
25011: POP
// tech := tech_lassight ; 2 :
25012: LD_ADDR_VAR 0 5
25016: PUSH
25017: LD_INT 12
25019: ST_TO_ADDR
25020: GO 25061
25022: LD_INT 2
25024: DOUBLE
25025: EQUAL
25026: IFTRUE 25030
25028: GO 25041
25030: POP
// tech := tech_mortar ; 3 :
25031: LD_ADDR_VAR 0 5
25035: PUSH
25036: LD_INT 41
25038: ST_TO_ADDR
25039: GO 25061
25041: LD_INT 3
25043: DOUBLE
25044: EQUAL
25045: IFTRUE 25049
25047: GO 25060
25049: POP
// tech := tech_bazooka ; end ;
25050: LD_ADDR_VAR 0 5
25054: PUSH
25055: LD_INT 44
25057: ST_TO_ADDR
25058: GO 25061
25060: POP
// if Researched ( side , tech ) then
25061: LD_VAR 0 3
25065: PPUSH
25066: LD_VAR 0 5
25070: PPUSH
25071: CALL_OW 325
25075: IFFALSE 25102
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
25077: LD_ADDR_VAR 0 2
25081: PUSH
25082: LD_INT 5
25084: PUSH
25085: LD_INT 8
25087: PUSH
25088: LD_INT 9
25090: PUSH
25091: EMPTY
25092: LIST
25093: LIST
25094: LIST
25095: PUSH
25096: LD_VAR 0 4
25100: ARRAY
25101: ST_TO_ADDR
// end ;
25102: LD_VAR 0 2
25106: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
25107: LD_INT 0
25109: PPUSH
25110: PPUSH
25111: PPUSH
// if not mines then
25112: LD_VAR 0 2
25116: NOT
25117: IFFALSE 25121
// exit ;
25119: GO 25265
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25121: LD_ADDR_VAR 0 5
25125: PUSH
25126: LD_INT 81
25128: PUSH
25129: LD_VAR 0 1
25133: PUSH
25134: EMPTY
25135: LIST
25136: LIST
25137: PUSH
25138: LD_INT 3
25140: PUSH
25141: LD_INT 21
25143: PUSH
25144: LD_INT 3
25146: PUSH
25147: EMPTY
25148: LIST
25149: LIST
25150: PUSH
25151: EMPTY
25152: LIST
25153: LIST
25154: PUSH
25155: EMPTY
25156: LIST
25157: LIST
25158: PPUSH
25159: CALL_OW 69
25163: ST_TO_ADDR
// for i in mines do
25164: LD_ADDR_VAR 0 4
25168: PUSH
25169: LD_VAR 0 2
25173: PUSH
25174: FOR_IN
25175: IFFALSE 25263
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
25177: LD_VAR 0 4
25181: PUSH
25182: LD_INT 1
25184: ARRAY
25185: PPUSH
25186: LD_VAR 0 4
25190: PUSH
25191: LD_INT 2
25193: ARRAY
25194: PPUSH
25195: CALL_OW 458
25199: NOT
25200: IFFALSE 25204
// continue ;
25202: GO 25174
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
25204: LD_VAR 0 4
25208: PUSH
25209: LD_INT 1
25211: ARRAY
25212: PPUSH
25213: LD_VAR 0 4
25217: PUSH
25218: LD_INT 2
25220: ARRAY
25221: PPUSH
25222: CALL_OW 428
25226: PUSH
25227: LD_VAR 0 5
25231: IN
25232: IFFALSE 25261
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
25234: LD_VAR 0 4
25238: PUSH
25239: LD_INT 1
25241: ARRAY
25242: PPUSH
25243: LD_VAR 0 4
25247: PUSH
25248: LD_INT 2
25250: ARRAY
25251: PPUSH
25252: LD_VAR 0 1
25256: PPUSH
25257: CALL_OW 456
// end ;
25261: GO 25174
25263: POP
25264: POP
// end ;
25265: LD_VAR 0 3
25269: RET
// export function Count ( array ) ; var i ; begin
25270: LD_INT 0
25272: PPUSH
25273: PPUSH
// result := 0 ;
25274: LD_ADDR_VAR 0 2
25278: PUSH
25279: LD_INT 0
25281: ST_TO_ADDR
// for i in array do
25282: LD_ADDR_VAR 0 3
25286: PUSH
25287: LD_VAR 0 1
25291: PUSH
25292: FOR_IN
25293: IFFALSE 25317
// if i then
25295: LD_VAR 0 3
25299: IFFALSE 25315
// result := result + 1 ;
25301: LD_ADDR_VAR 0 2
25305: PUSH
25306: LD_VAR 0 2
25310: PUSH
25311: LD_INT 1
25313: PLUS
25314: ST_TO_ADDR
25315: GO 25292
25317: POP
25318: POP
// end ;
25319: LD_VAR 0 2
25323: RET
// export function IsEmpty ( building ) ; begin
25324: LD_INT 0
25326: PPUSH
// if not building then
25327: LD_VAR 0 1
25331: NOT
25332: IFFALSE 25336
// exit ;
25334: GO 25379
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
25336: LD_ADDR_VAR 0 2
25340: PUSH
25341: LD_VAR 0 1
25345: PUSH
25346: LD_INT 22
25348: PUSH
25349: LD_VAR 0 1
25353: PPUSH
25354: CALL_OW 255
25358: PUSH
25359: EMPTY
25360: LIST
25361: LIST
25362: PUSH
25363: LD_INT 58
25365: PUSH
25366: EMPTY
25367: LIST
25368: PUSH
25369: EMPTY
25370: LIST
25371: LIST
25372: PPUSH
25373: CALL_OW 69
25377: IN
25378: ST_TO_ADDR
// end ;
25379: LD_VAR 0 2
25383: RET
// export function IsNotFull ( building ) ; begin
25384: LD_INT 0
25386: PPUSH
// if not building then
25387: LD_VAR 0 1
25391: NOT
25392: IFFALSE 25396
// exit ;
25394: GO 25415
// result := UnitsInside ( building ) < 6 ;
25396: LD_ADDR_VAR 0 2
25400: PUSH
25401: LD_VAR 0 1
25405: PPUSH
25406: CALL_OW 313
25410: PUSH
25411: LD_INT 6
25413: LESS
25414: ST_TO_ADDR
// end ;
25415: LD_VAR 0 2
25419: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
25420: LD_INT 0
25422: PPUSH
25423: PPUSH
25424: PPUSH
25425: PPUSH
// tmp := [ ] ;
25426: LD_ADDR_VAR 0 3
25430: PUSH
25431: EMPTY
25432: ST_TO_ADDR
// list := [ ] ;
25433: LD_ADDR_VAR 0 5
25437: PUSH
25438: EMPTY
25439: ST_TO_ADDR
// for i = 16 to 25 do
25440: LD_ADDR_VAR 0 4
25444: PUSH
25445: DOUBLE
25446: LD_INT 16
25448: DEC
25449: ST_TO_ADDR
25450: LD_INT 25
25452: PUSH
25453: FOR_TO
25454: IFFALSE 25527
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
25456: LD_ADDR_VAR 0 3
25460: PUSH
25461: LD_VAR 0 3
25465: PUSH
25466: LD_INT 22
25468: PUSH
25469: LD_VAR 0 1
25473: PPUSH
25474: CALL_OW 255
25478: PUSH
25479: EMPTY
25480: LIST
25481: LIST
25482: PUSH
25483: LD_INT 91
25485: PUSH
25486: LD_VAR 0 1
25490: PUSH
25491: LD_INT 6
25493: PUSH
25494: EMPTY
25495: LIST
25496: LIST
25497: LIST
25498: PUSH
25499: LD_INT 30
25501: PUSH
25502: LD_VAR 0 4
25506: PUSH
25507: EMPTY
25508: LIST
25509: LIST
25510: PUSH
25511: EMPTY
25512: LIST
25513: LIST
25514: LIST
25515: PUSH
25516: EMPTY
25517: LIST
25518: PPUSH
25519: CALL_OW 69
25523: ADD
25524: ST_TO_ADDR
25525: GO 25453
25527: POP
25528: POP
// for i = 1 to tmp do
25529: LD_ADDR_VAR 0 4
25533: PUSH
25534: DOUBLE
25535: LD_INT 1
25537: DEC
25538: ST_TO_ADDR
25539: LD_VAR 0 3
25543: PUSH
25544: FOR_TO
25545: IFFALSE 25633
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
25547: LD_ADDR_VAR 0 5
25551: PUSH
25552: LD_VAR 0 5
25556: PUSH
25557: LD_VAR 0 3
25561: PUSH
25562: LD_VAR 0 4
25566: ARRAY
25567: PPUSH
25568: CALL_OW 266
25572: PUSH
25573: LD_VAR 0 3
25577: PUSH
25578: LD_VAR 0 4
25582: ARRAY
25583: PPUSH
25584: CALL_OW 250
25588: PUSH
25589: LD_VAR 0 3
25593: PUSH
25594: LD_VAR 0 4
25598: ARRAY
25599: PPUSH
25600: CALL_OW 251
25604: PUSH
25605: LD_VAR 0 3
25609: PUSH
25610: LD_VAR 0 4
25614: ARRAY
25615: PPUSH
25616: CALL_OW 254
25620: PUSH
25621: EMPTY
25622: LIST
25623: LIST
25624: LIST
25625: LIST
25626: PUSH
25627: EMPTY
25628: LIST
25629: ADD
25630: ST_TO_ADDR
25631: GO 25544
25633: POP
25634: POP
// result := list ;
25635: LD_ADDR_VAR 0 2
25639: PUSH
25640: LD_VAR 0 5
25644: ST_TO_ADDR
// end ;
25645: LD_VAR 0 2
25649: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
25650: LD_INT 0
25652: PPUSH
25653: PPUSH
25654: PPUSH
25655: PPUSH
25656: PPUSH
25657: PPUSH
25658: PPUSH
// if not factory then
25659: LD_VAR 0 1
25663: NOT
25664: IFFALSE 25668
// exit ;
25666: GO 26261
// if control = control_apeman then
25668: LD_VAR 0 4
25672: PUSH
25673: LD_INT 5
25675: EQUAL
25676: IFFALSE 25785
// begin tmp := UnitsInside ( factory ) ;
25678: LD_ADDR_VAR 0 8
25682: PUSH
25683: LD_VAR 0 1
25687: PPUSH
25688: CALL_OW 313
25692: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
25693: LD_VAR 0 8
25697: PPUSH
25698: LD_INT 25
25700: PUSH
25701: LD_INT 12
25703: PUSH
25704: EMPTY
25705: LIST
25706: LIST
25707: PPUSH
25708: CALL_OW 72
25712: NOT
25713: IFFALSE 25723
// control := control_manual ;
25715: LD_ADDR_VAR 0 4
25719: PUSH
25720: LD_INT 1
25722: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
25723: LD_ADDR_VAR 0 8
25727: PUSH
25728: LD_VAR 0 1
25732: PPUSH
25733: CALL 25420 0 1
25737: ST_TO_ADDR
// if tmp then
25738: LD_VAR 0 8
25742: IFFALSE 25785
// begin for i in tmp do
25744: LD_ADDR_VAR 0 7
25748: PUSH
25749: LD_VAR 0 8
25753: PUSH
25754: FOR_IN
25755: IFFALSE 25783
// if i [ 1 ] = b_ext_radio then
25757: LD_VAR 0 7
25761: PUSH
25762: LD_INT 1
25764: ARRAY
25765: PUSH
25766: LD_INT 22
25768: EQUAL
25769: IFFALSE 25781
// begin control := control_remote ;
25771: LD_ADDR_VAR 0 4
25775: PUSH
25776: LD_INT 2
25778: ST_TO_ADDR
// break ;
25779: GO 25783
// end ;
25781: GO 25754
25783: POP
25784: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
25785: LD_VAR 0 1
25789: PPUSH
25790: LD_VAR 0 2
25794: PPUSH
25795: LD_VAR 0 3
25799: PPUSH
25800: LD_VAR 0 4
25804: PPUSH
25805: LD_VAR 0 5
25809: PPUSH
25810: CALL_OW 448
25814: IFFALSE 25849
// begin result := [ chassis , engine , control , weapon ] ;
25816: LD_ADDR_VAR 0 6
25820: PUSH
25821: LD_VAR 0 2
25825: PUSH
25826: LD_VAR 0 3
25830: PUSH
25831: LD_VAR 0 4
25835: PUSH
25836: LD_VAR 0 5
25840: PUSH
25841: EMPTY
25842: LIST
25843: LIST
25844: LIST
25845: LIST
25846: ST_TO_ADDR
// exit ;
25847: GO 26261
// end ; _chassis := AvailableChassisList ( factory ) ;
25849: LD_ADDR_VAR 0 9
25853: PUSH
25854: LD_VAR 0 1
25858: PPUSH
25859: CALL_OW 475
25863: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
25864: LD_ADDR_VAR 0 11
25868: PUSH
25869: LD_VAR 0 1
25873: PPUSH
25874: CALL_OW 476
25878: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
25879: LD_ADDR_VAR 0 12
25883: PUSH
25884: LD_VAR 0 1
25888: PPUSH
25889: CALL_OW 477
25893: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
25894: LD_ADDR_VAR 0 10
25898: PUSH
25899: LD_VAR 0 1
25903: PPUSH
25904: CALL_OW 478
25908: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
25909: LD_VAR 0 9
25913: NOT
25914: PUSH
25915: LD_VAR 0 11
25919: NOT
25920: OR
25921: PUSH
25922: LD_VAR 0 12
25926: NOT
25927: OR
25928: PUSH
25929: LD_VAR 0 10
25933: NOT
25934: OR
25935: IFFALSE 25970
// begin result := [ chassis , engine , control , weapon ] ;
25937: LD_ADDR_VAR 0 6
25941: PUSH
25942: LD_VAR 0 2
25946: PUSH
25947: LD_VAR 0 3
25951: PUSH
25952: LD_VAR 0 4
25956: PUSH
25957: LD_VAR 0 5
25961: PUSH
25962: EMPTY
25963: LIST
25964: LIST
25965: LIST
25966: LIST
25967: ST_TO_ADDR
// exit ;
25968: GO 26261
// end ; if not chassis in _chassis then
25970: LD_VAR 0 2
25974: PUSH
25975: LD_VAR 0 9
25979: IN
25980: NOT
25981: IFFALSE 26007
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
25983: LD_ADDR_VAR 0 2
25987: PUSH
25988: LD_VAR 0 9
25992: PUSH
25993: LD_INT 1
25995: PPUSH
25996: LD_VAR 0 9
26000: PPUSH
26001: CALL_OW 12
26005: ARRAY
26006: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
26007: LD_VAR 0 2
26011: PPUSH
26012: LD_VAR 0 3
26016: PPUSH
26017: CALL 26266 0 2
26021: NOT
26022: IFFALSE 26081
// repeat engine := _engine [ 1 ] ;
26024: LD_ADDR_VAR 0 3
26028: PUSH
26029: LD_VAR 0 11
26033: PUSH
26034: LD_INT 1
26036: ARRAY
26037: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
26038: LD_ADDR_VAR 0 11
26042: PUSH
26043: LD_VAR 0 11
26047: PPUSH
26048: LD_INT 1
26050: PPUSH
26051: CALL_OW 3
26055: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
26056: LD_VAR 0 2
26060: PPUSH
26061: LD_VAR 0 3
26065: PPUSH
26066: CALL 26266 0 2
26070: PUSH
26071: LD_VAR 0 11
26075: PUSH
26076: EMPTY
26077: EQUAL
26078: OR
26079: IFFALSE 26024
// if not control in _control then
26081: LD_VAR 0 4
26085: PUSH
26086: LD_VAR 0 12
26090: IN
26091: NOT
26092: IFFALSE 26118
// control := _control [ rand ( 1 , _control ) ] ;
26094: LD_ADDR_VAR 0 4
26098: PUSH
26099: LD_VAR 0 12
26103: PUSH
26104: LD_INT 1
26106: PPUSH
26107: LD_VAR 0 12
26111: PPUSH
26112: CALL_OW 12
26116: ARRAY
26117: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
26118: LD_VAR 0 2
26122: PPUSH
26123: LD_VAR 0 5
26127: PPUSH
26128: CALL 26486 0 2
26132: NOT
26133: IFFALSE 26192
// repeat weapon := _weapon [ 1 ] ;
26135: LD_ADDR_VAR 0 5
26139: PUSH
26140: LD_VAR 0 10
26144: PUSH
26145: LD_INT 1
26147: ARRAY
26148: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
26149: LD_ADDR_VAR 0 10
26153: PUSH
26154: LD_VAR 0 10
26158: PPUSH
26159: LD_INT 1
26161: PPUSH
26162: CALL_OW 3
26166: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
26167: LD_VAR 0 2
26171: PPUSH
26172: LD_VAR 0 5
26176: PPUSH
26177: CALL 26486 0 2
26181: PUSH
26182: LD_VAR 0 10
26186: PUSH
26187: EMPTY
26188: EQUAL
26189: OR
26190: IFFALSE 26135
// result := [ ] ;
26192: LD_ADDR_VAR 0 6
26196: PUSH
26197: EMPTY
26198: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26199: LD_VAR 0 1
26203: PPUSH
26204: LD_VAR 0 2
26208: PPUSH
26209: LD_VAR 0 3
26213: PPUSH
26214: LD_VAR 0 4
26218: PPUSH
26219: LD_VAR 0 5
26223: PPUSH
26224: CALL_OW 448
26228: IFFALSE 26261
// result := [ chassis , engine , control , weapon ] ;
26230: LD_ADDR_VAR 0 6
26234: PUSH
26235: LD_VAR 0 2
26239: PUSH
26240: LD_VAR 0 3
26244: PUSH
26245: LD_VAR 0 4
26249: PUSH
26250: LD_VAR 0 5
26254: PUSH
26255: EMPTY
26256: LIST
26257: LIST
26258: LIST
26259: LIST
26260: ST_TO_ADDR
// end ;
26261: LD_VAR 0 6
26265: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
26266: LD_INT 0
26268: PPUSH
// if not chassis or not engine then
26269: LD_VAR 0 1
26273: NOT
26274: PUSH
26275: LD_VAR 0 2
26279: NOT
26280: OR
26281: IFFALSE 26285
// exit ;
26283: GO 26481
// case engine of engine_solar :
26285: LD_VAR 0 2
26289: PUSH
26290: LD_INT 2
26292: DOUBLE
26293: EQUAL
26294: IFTRUE 26298
26296: GO 26336
26298: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
26299: LD_ADDR_VAR 0 3
26303: PUSH
26304: LD_INT 11
26306: PUSH
26307: LD_INT 12
26309: PUSH
26310: LD_INT 13
26312: PUSH
26313: LD_INT 14
26315: PUSH
26316: LD_INT 1
26318: PUSH
26319: LD_INT 2
26321: PUSH
26322: LD_INT 3
26324: PUSH
26325: EMPTY
26326: LIST
26327: LIST
26328: LIST
26329: LIST
26330: LIST
26331: LIST
26332: LIST
26333: ST_TO_ADDR
26334: GO 26465
26336: LD_INT 1
26338: DOUBLE
26339: EQUAL
26340: IFTRUE 26344
26342: GO 26406
26344: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
26345: LD_ADDR_VAR 0 3
26349: PUSH
26350: LD_INT 11
26352: PUSH
26353: LD_INT 12
26355: PUSH
26356: LD_INT 13
26358: PUSH
26359: LD_INT 14
26361: PUSH
26362: LD_INT 1
26364: PUSH
26365: LD_INT 2
26367: PUSH
26368: LD_INT 3
26370: PUSH
26371: LD_INT 4
26373: PUSH
26374: LD_INT 5
26376: PUSH
26377: LD_INT 21
26379: PUSH
26380: LD_INT 23
26382: PUSH
26383: LD_INT 22
26385: PUSH
26386: LD_INT 24
26388: PUSH
26389: EMPTY
26390: LIST
26391: LIST
26392: LIST
26393: LIST
26394: LIST
26395: LIST
26396: LIST
26397: LIST
26398: LIST
26399: LIST
26400: LIST
26401: LIST
26402: LIST
26403: ST_TO_ADDR
26404: GO 26465
26406: LD_INT 3
26408: DOUBLE
26409: EQUAL
26410: IFTRUE 26414
26412: GO 26464
26414: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26415: LD_ADDR_VAR 0 3
26419: PUSH
26420: LD_INT 13
26422: PUSH
26423: LD_INT 14
26425: PUSH
26426: LD_INT 2
26428: PUSH
26429: LD_INT 3
26431: PUSH
26432: LD_INT 4
26434: PUSH
26435: LD_INT 5
26437: PUSH
26438: LD_INT 21
26440: PUSH
26441: LD_INT 22
26443: PUSH
26444: LD_INT 23
26446: PUSH
26447: LD_INT 24
26449: PUSH
26450: EMPTY
26451: LIST
26452: LIST
26453: LIST
26454: LIST
26455: LIST
26456: LIST
26457: LIST
26458: LIST
26459: LIST
26460: LIST
26461: ST_TO_ADDR
26462: GO 26465
26464: POP
// result := ( chassis in result ) ;
26465: LD_ADDR_VAR 0 3
26469: PUSH
26470: LD_VAR 0 1
26474: PUSH
26475: LD_VAR 0 3
26479: IN
26480: ST_TO_ADDR
// end ;
26481: LD_VAR 0 3
26485: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
26486: LD_INT 0
26488: PPUSH
// if not chassis or not weapon then
26489: LD_VAR 0 1
26493: NOT
26494: PUSH
26495: LD_VAR 0 2
26499: NOT
26500: OR
26501: IFFALSE 26505
// exit ;
26503: GO 27531
// case weapon of us_machine_gun :
26505: LD_VAR 0 2
26509: PUSH
26510: LD_INT 2
26512: DOUBLE
26513: EQUAL
26514: IFTRUE 26518
26516: GO 26548
26518: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
26519: LD_ADDR_VAR 0 3
26523: PUSH
26524: LD_INT 1
26526: PUSH
26527: LD_INT 2
26529: PUSH
26530: LD_INT 3
26532: PUSH
26533: LD_INT 4
26535: PUSH
26536: LD_INT 5
26538: PUSH
26539: EMPTY
26540: LIST
26541: LIST
26542: LIST
26543: LIST
26544: LIST
26545: ST_TO_ADDR
26546: GO 27515
26548: LD_INT 3
26550: DOUBLE
26551: EQUAL
26552: IFTRUE 26556
26554: GO 26586
26556: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
26557: LD_ADDR_VAR 0 3
26561: PUSH
26562: LD_INT 1
26564: PUSH
26565: LD_INT 2
26567: PUSH
26568: LD_INT 3
26570: PUSH
26571: LD_INT 4
26573: PUSH
26574: LD_INT 5
26576: PUSH
26577: EMPTY
26578: LIST
26579: LIST
26580: LIST
26581: LIST
26582: LIST
26583: ST_TO_ADDR
26584: GO 27515
26586: LD_INT 11
26588: DOUBLE
26589: EQUAL
26590: IFTRUE 26594
26592: GO 26624
26594: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
26595: LD_ADDR_VAR 0 3
26599: PUSH
26600: LD_INT 1
26602: PUSH
26603: LD_INT 2
26605: PUSH
26606: LD_INT 3
26608: PUSH
26609: LD_INT 4
26611: PUSH
26612: LD_INT 5
26614: PUSH
26615: EMPTY
26616: LIST
26617: LIST
26618: LIST
26619: LIST
26620: LIST
26621: ST_TO_ADDR
26622: GO 27515
26624: LD_INT 4
26626: DOUBLE
26627: EQUAL
26628: IFTRUE 26632
26630: GO 26658
26632: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
26633: LD_ADDR_VAR 0 3
26637: PUSH
26638: LD_INT 2
26640: PUSH
26641: LD_INT 3
26643: PUSH
26644: LD_INT 4
26646: PUSH
26647: LD_INT 5
26649: PUSH
26650: EMPTY
26651: LIST
26652: LIST
26653: LIST
26654: LIST
26655: ST_TO_ADDR
26656: GO 27515
26658: LD_INT 5
26660: DOUBLE
26661: EQUAL
26662: IFTRUE 26666
26664: GO 26692
26666: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
26667: LD_ADDR_VAR 0 3
26671: PUSH
26672: LD_INT 2
26674: PUSH
26675: LD_INT 3
26677: PUSH
26678: LD_INT 4
26680: PUSH
26681: LD_INT 5
26683: PUSH
26684: EMPTY
26685: LIST
26686: LIST
26687: LIST
26688: LIST
26689: ST_TO_ADDR
26690: GO 27515
26692: LD_INT 9
26694: DOUBLE
26695: EQUAL
26696: IFTRUE 26700
26698: GO 26726
26700: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
26701: LD_ADDR_VAR 0 3
26705: PUSH
26706: LD_INT 2
26708: PUSH
26709: LD_INT 3
26711: PUSH
26712: LD_INT 4
26714: PUSH
26715: LD_INT 5
26717: PUSH
26718: EMPTY
26719: LIST
26720: LIST
26721: LIST
26722: LIST
26723: ST_TO_ADDR
26724: GO 27515
26726: LD_INT 7
26728: DOUBLE
26729: EQUAL
26730: IFTRUE 26734
26732: GO 26760
26734: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
26735: LD_ADDR_VAR 0 3
26739: PUSH
26740: LD_INT 2
26742: PUSH
26743: LD_INT 3
26745: PUSH
26746: LD_INT 4
26748: PUSH
26749: LD_INT 5
26751: PUSH
26752: EMPTY
26753: LIST
26754: LIST
26755: LIST
26756: LIST
26757: ST_TO_ADDR
26758: GO 27515
26760: LD_INT 12
26762: DOUBLE
26763: EQUAL
26764: IFTRUE 26768
26766: GO 26794
26768: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
26769: LD_ADDR_VAR 0 3
26773: PUSH
26774: LD_INT 2
26776: PUSH
26777: LD_INT 3
26779: PUSH
26780: LD_INT 4
26782: PUSH
26783: LD_INT 5
26785: PUSH
26786: EMPTY
26787: LIST
26788: LIST
26789: LIST
26790: LIST
26791: ST_TO_ADDR
26792: GO 27515
26794: LD_INT 13
26796: DOUBLE
26797: EQUAL
26798: IFTRUE 26802
26800: GO 26828
26802: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
26803: LD_ADDR_VAR 0 3
26807: PUSH
26808: LD_INT 2
26810: PUSH
26811: LD_INT 3
26813: PUSH
26814: LD_INT 4
26816: PUSH
26817: LD_INT 5
26819: PUSH
26820: EMPTY
26821: LIST
26822: LIST
26823: LIST
26824: LIST
26825: ST_TO_ADDR
26826: GO 27515
26828: LD_INT 14
26830: DOUBLE
26831: EQUAL
26832: IFTRUE 26836
26834: GO 26854
26836: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
26837: LD_ADDR_VAR 0 3
26841: PUSH
26842: LD_INT 4
26844: PUSH
26845: LD_INT 5
26847: PUSH
26848: EMPTY
26849: LIST
26850: LIST
26851: ST_TO_ADDR
26852: GO 27515
26854: LD_INT 6
26856: DOUBLE
26857: EQUAL
26858: IFTRUE 26862
26860: GO 26880
26862: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
26863: LD_ADDR_VAR 0 3
26867: PUSH
26868: LD_INT 4
26870: PUSH
26871: LD_INT 5
26873: PUSH
26874: EMPTY
26875: LIST
26876: LIST
26877: ST_TO_ADDR
26878: GO 27515
26880: LD_INT 10
26882: DOUBLE
26883: EQUAL
26884: IFTRUE 26888
26886: GO 26906
26888: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
26889: LD_ADDR_VAR 0 3
26893: PUSH
26894: LD_INT 4
26896: PUSH
26897: LD_INT 5
26899: PUSH
26900: EMPTY
26901: LIST
26902: LIST
26903: ST_TO_ADDR
26904: GO 27515
26906: LD_INT 22
26908: DOUBLE
26909: EQUAL
26910: IFTRUE 26914
26912: GO 26940
26914: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
26915: LD_ADDR_VAR 0 3
26919: PUSH
26920: LD_INT 11
26922: PUSH
26923: LD_INT 12
26925: PUSH
26926: LD_INT 13
26928: PUSH
26929: LD_INT 14
26931: PUSH
26932: EMPTY
26933: LIST
26934: LIST
26935: LIST
26936: LIST
26937: ST_TO_ADDR
26938: GO 27515
26940: LD_INT 23
26942: DOUBLE
26943: EQUAL
26944: IFTRUE 26948
26946: GO 26974
26948: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
26949: LD_ADDR_VAR 0 3
26953: PUSH
26954: LD_INT 11
26956: PUSH
26957: LD_INT 12
26959: PUSH
26960: LD_INT 13
26962: PUSH
26963: LD_INT 14
26965: PUSH
26966: EMPTY
26967: LIST
26968: LIST
26969: LIST
26970: LIST
26971: ST_TO_ADDR
26972: GO 27515
26974: LD_INT 24
26976: DOUBLE
26977: EQUAL
26978: IFTRUE 26982
26980: GO 27008
26982: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
26983: LD_ADDR_VAR 0 3
26987: PUSH
26988: LD_INT 11
26990: PUSH
26991: LD_INT 12
26993: PUSH
26994: LD_INT 13
26996: PUSH
26997: LD_INT 14
26999: PUSH
27000: EMPTY
27001: LIST
27002: LIST
27003: LIST
27004: LIST
27005: ST_TO_ADDR
27006: GO 27515
27008: LD_INT 30
27010: DOUBLE
27011: EQUAL
27012: IFTRUE 27016
27014: GO 27042
27016: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
27017: LD_ADDR_VAR 0 3
27021: PUSH
27022: LD_INT 11
27024: PUSH
27025: LD_INT 12
27027: PUSH
27028: LD_INT 13
27030: PUSH
27031: LD_INT 14
27033: PUSH
27034: EMPTY
27035: LIST
27036: LIST
27037: LIST
27038: LIST
27039: ST_TO_ADDR
27040: GO 27515
27042: LD_INT 25
27044: DOUBLE
27045: EQUAL
27046: IFTRUE 27050
27048: GO 27068
27050: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
27051: LD_ADDR_VAR 0 3
27055: PUSH
27056: LD_INT 13
27058: PUSH
27059: LD_INT 14
27061: PUSH
27062: EMPTY
27063: LIST
27064: LIST
27065: ST_TO_ADDR
27066: GO 27515
27068: LD_INT 27
27070: DOUBLE
27071: EQUAL
27072: IFTRUE 27076
27074: GO 27094
27076: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
27077: LD_ADDR_VAR 0 3
27081: PUSH
27082: LD_INT 13
27084: PUSH
27085: LD_INT 14
27087: PUSH
27088: EMPTY
27089: LIST
27090: LIST
27091: ST_TO_ADDR
27092: GO 27515
27094: LD_INT 28
27096: DOUBLE
27097: EQUAL
27098: IFTRUE 27102
27100: GO 27120
27102: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
27103: LD_ADDR_VAR 0 3
27107: PUSH
27108: LD_INT 13
27110: PUSH
27111: LD_INT 14
27113: PUSH
27114: EMPTY
27115: LIST
27116: LIST
27117: ST_TO_ADDR
27118: GO 27515
27120: LD_INT 29
27122: DOUBLE
27123: EQUAL
27124: IFTRUE 27128
27126: GO 27146
27128: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
27129: LD_ADDR_VAR 0 3
27133: PUSH
27134: LD_INT 13
27136: PUSH
27137: LD_INT 14
27139: PUSH
27140: EMPTY
27141: LIST
27142: LIST
27143: ST_TO_ADDR
27144: GO 27515
27146: LD_INT 31
27148: DOUBLE
27149: EQUAL
27150: IFTRUE 27154
27152: GO 27172
27154: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
27155: LD_ADDR_VAR 0 3
27159: PUSH
27160: LD_INT 13
27162: PUSH
27163: LD_INT 14
27165: PUSH
27166: EMPTY
27167: LIST
27168: LIST
27169: ST_TO_ADDR
27170: GO 27515
27172: LD_INT 26
27174: DOUBLE
27175: EQUAL
27176: IFTRUE 27180
27178: GO 27198
27180: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
27181: LD_ADDR_VAR 0 3
27185: PUSH
27186: LD_INT 13
27188: PUSH
27189: LD_INT 14
27191: PUSH
27192: EMPTY
27193: LIST
27194: LIST
27195: ST_TO_ADDR
27196: GO 27515
27198: LD_INT 42
27200: DOUBLE
27201: EQUAL
27202: IFTRUE 27206
27204: GO 27232
27206: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
27207: LD_ADDR_VAR 0 3
27211: PUSH
27212: LD_INT 21
27214: PUSH
27215: LD_INT 22
27217: PUSH
27218: LD_INT 23
27220: PUSH
27221: LD_INT 24
27223: PUSH
27224: EMPTY
27225: LIST
27226: LIST
27227: LIST
27228: LIST
27229: ST_TO_ADDR
27230: GO 27515
27232: LD_INT 43
27234: DOUBLE
27235: EQUAL
27236: IFTRUE 27240
27238: GO 27266
27240: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
27241: LD_ADDR_VAR 0 3
27245: PUSH
27246: LD_INT 21
27248: PUSH
27249: LD_INT 22
27251: PUSH
27252: LD_INT 23
27254: PUSH
27255: LD_INT 24
27257: PUSH
27258: EMPTY
27259: LIST
27260: LIST
27261: LIST
27262: LIST
27263: ST_TO_ADDR
27264: GO 27515
27266: LD_INT 44
27268: DOUBLE
27269: EQUAL
27270: IFTRUE 27274
27272: GO 27300
27274: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
27275: LD_ADDR_VAR 0 3
27279: PUSH
27280: LD_INT 21
27282: PUSH
27283: LD_INT 22
27285: PUSH
27286: LD_INT 23
27288: PUSH
27289: LD_INT 24
27291: PUSH
27292: EMPTY
27293: LIST
27294: LIST
27295: LIST
27296: LIST
27297: ST_TO_ADDR
27298: GO 27515
27300: LD_INT 45
27302: DOUBLE
27303: EQUAL
27304: IFTRUE 27308
27306: GO 27334
27308: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
27309: LD_ADDR_VAR 0 3
27313: PUSH
27314: LD_INT 21
27316: PUSH
27317: LD_INT 22
27319: PUSH
27320: LD_INT 23
27322: PUSH
27323: LD_INT 24
27325: PUSH
27326: EMPTY
27327: LIST
27328: LIST
27329: LIST
27330: LIST
27331: ST_TO_ADDR
27332: GO 27515
27334: LD_INT 49
27336: DOUBLE
27337: EQUAL
27338: IFTRUE 27342
27340: GO 27368
27342: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
27343: LD_ADDR_VAR 0 3
27347: PUSH
27348: LD_INT 21
27350: PUSH
27351: LD_INT 22
27353: PUSH
27354: LD_INT 23
27356: PUSH
27357: LD_INT 24
27359: PUSH
27360: EMPTY
27361: LIST
27362: LIST
27363: LIST
27364: LIST
27365: ST_TO_ADDR
27366: GO 27515
27368: LD_INT 51
27370: DOUBLE
27371: EQUAL
27372: IFTRUE 27376
27374: GO 27402
27376: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
27377: LD_ADDR_VAR 0 3
27381: PUSH
27382: LD_INT 21
27384: PUSH
27385: LD_INT 22
27387: PUSH
27388: LD_INT 23
27390: PUSH
27391: LD_INT 24
27393: PUSH
27394: EMPTY
27395: LIST
27396: LIST
27397: LIST
27398: LIST
27399: ST_TO_ADDR
27400: GO 27515
27402: LD_INT 52
27404: DOUBLE
27405: EQUAL
27406: IFTRUE 27410
27408: GO 27436
27410: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
27411: LD_ADDR_VAR 0 3
27415: PUSH
27416: LD_INT 21
27418: PUSH
27419: LD_INT 22
27421: PUSH
27422: LD_INT 23
27424: PUSH
27425: LD_INT 24
27427: PUSH
27428: EMPTY
27429: LIST
27430: LIST
27431: LIST
27432: LIST
27433: ST_TO_ADDR
27434: GO 27515
27436: LD_INT 53
27438: DOUBLE
27439: EQUAL
27440: IFTRUE 27444
27442: GO 27462
27444: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
27445: LD_ADDR_VAR 0 3
27449: PUSH
27450: LD_INT 23
27452: PUSH
27453: LD_INT 24
27455: PUSH
27456: EMPTY
27457: LIST
27458: LIST
27459: ST_TO_ADDR
27460: GO 27515
27462: LD_INT 46
27464: DOUBLE
27465: EQUAL
27466: IFTRUE 27470
27468: GO 27488
27470: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
27471: LD_ADDR_VAR 0 3
27475: PUSH
27476: LD_INT 23
27478: PUSH
27479: LD_INT 24
27481: PUSH
27482: EMPTY
27483: LIST
27484: LIST
27485: ST_TO_ADDR
27486: GO 27515
27488: LD_INT 47
27490: DOUBLE
27491: EQUAL
27492: IFTRUE 27496
27494: GO 27514
27496: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27497: LD_ADDR_VAR 0 3
27501: PUSH
27502: LD_INT 23
27504: PUSH
27505: LD_INT 24
27507: PUSH
27508: EMPTY
27509: LIST
27510: LIST
27511: ST_TO_ADDR
27512: GO 27515
27514: POP
// result := ( chassis in result ) ;
27515: LD_ADDR_VAR 0 3
27519: PUSH
27520: LD_VAR 0 1
27524: PUSH
27525: LD_VAR 0 3
27529: IN
27530: ST_TO_ADDR
// end ;
27531: LD_VAR 0 3
27535: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
27536: LD_INT 0
27538: PPUSH
27539: PPUSH
27540: PPUSH
27541: PPUSH
27542: PPUSH
27543: PPUSH
27544: PPUSH
// result := array ;
27545: LD_ADDR_VAR 0 5
27549: PUSH
27550: LD_VAR 0 1
27554: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
27555: LD_VAR 0 1
27559: NOT
27560: PUSH
27561: LD_VAR 0 2
27565: NOT
27566: OR
27567: PUSH
27568: LD_VAR 0 3
27572: NOT
27573: OR
27574: PUSH
27575: LD_VAR 0 2
27579: PUSH
27580: LD_VAR 0 1
27584: GREATER
27585: OR
27586: PUSH
27587: LD_VAR 0 3
27591: PUSH
27592: LD_VAR 0 1
27596: GREATER
27597: OR
27598: IFFALSE 27602
// exit ;
27600: GO 27898
// if direction then
27602: LD_VAR 0 4
27606: IFFALSE 27670
// begin d := 1 ;
27608: LD_ADDR_VAR 0 9
27612: PUSH
27613: LD_INT 1
27615: ST_TO_ADDR
// if i_from > i_to then
27616: LD_VAR 0 2
27620: PUSH
27621: LD_VAR 0 3
27625: GREATER
27626: IFFALSE 27652
// length := ( array - i_from ) + i_to else
27628: LD_ADDR_VAR 0 11
27632: PUSH
27633: LD_VAR 0 1
27637: PUSH
27638: LD_VAR 0 2
27642: MINUS
27643: PUSH
27644: LD_VAR 0 3
27648: PLUS
27649: ST_TO_ADDR
27650: GO 27668
// length := i_to - i_from ;
27652: LD_ADDR_VAR 0 11
27656: PUSH
27657: LD_VAR 0 3
27661: PUSH
27662: LD_VAR 0 2
27666: MINUS
27667: ST_TO_ADDR
// end else
27668: GO 27731
// begin d := - 1 ;
27670: LD_ADDR_VAR 0 9
27674: PUSH
27675: LD_INT 1
27677: NEG
27678: ST_TO_ADDR
// if i_from > i_to then
27679: LD_VAR 0 2
27683: PUSH
27684: LD_VAR 0 3
27688: GREATER
27689: IFFALSE 27709
// length := i_from - i_to else
27691: LD_ADDR_VAR 0 11
27695: PUSH
27696: LD_VAR 0 2
27700: PUSH
27701: LD_VAR 0 3
27705: MINUS
27706: ST_TO_ADDR
27707: GO 27731
// length := ( array - i_to ) + i_from ;
27709: LD_ADDR_VAR 0 11
27713: PUSH
27714: LD_VAR 0 1
27718: PUSH
27719: LD_VAR 0 3
27723: MINUS
27724: PUSH
27725: LD_VAR 0 2
27729: PLUS
27730: ST_TO_ADDR
// end ; if not length then
27731: LD_VAR 0 11
27735: NOT
27736: IFFALSE 27740
// exit ;
27738: GO 27898
// tmp := array ;
27740: LD_ADDR_VAR 0 10
27744: PUSH
27745: LD_VAR 0 1
27749: ST_TO_ADDR
// for i = 1 to length do
27750: LD_ADDR_VAR 0 6
27754: PUSH
27755: DOUBLE
27756: LD_INT 1
27758: DEC
27759: ST_TO_ADDR
27760: LD_VAR 0 11
27764: PUSH
27765: FOR_TO
27766: IFFALSE 27886
// begin for j = 1 to array do
27768: LD_ADDR_VAR 0 7
27772: PUSH
27773: DOUBLE
27774: LD_INT 1
27776: DEC
27777: ST_TO_ADDR
27778: LD_VAR 0 1
27782: PUSH
27783: FOR_TO
27784: IFFALSE 27872
// begin k := j + d ;
27786: LD_ADDR_VAR 0 8
27790: PUSH
27791: LD_VAR 0 7
27795: PUSH
27796: LD_VAR 0 9
27800: PLUS
27801: ST_TO_ADDR
// if k > array then
27802: LD_VAR 0 8
27806: PUSH
27807: LD_VAR 0 1
27811: GREATER
27812: IFFALSE 27822
// k := 1 ;
27814: LD_ADDR_VAR 0 8
27818: PUSH
27819: LD_INT 1
27821: ST_TO_ADDR
// if not k then
27822: LD_VAR 0 8
27826: NOT
27827: IFFALSE 27839
// k := array ;
27829: LD_ADDR_VAR 0 8
27833: PUSH
27834: LD_VAR 0 1
27838: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
27839: LD_ADDR_VAR 0 10
27843: PUSH
27844: LD_VAR 0 10
27848: PPUSH
27849: LD_VAR 0 8
27853: PPUSH
27854: LD_VAR 0 1
27858: PUSH
27859: LD_VAR 0 7
27863: ARRAY
27864: PPUSH
27865: CALL_OW 1
27869: ST_TO_ADDR
// end ;
27870: GO 27783
27872: POP
27873: POP
// array := tmp ;
27874: LD_ADDR_VAR 0 1
27878: PUSH
27879: LD_VAR 0 10
27883: ST_TO_ADDR
// end ;
27884: GO 27765
27886: POP
27887: POP
// result := array ;
27888: LD_ADDR_VAR 0 5
27892: PUSH
27893: LD_VAR 0 1
27897: ST_TO_ADDR
// end ;
27898: LD_VAR 0 5
27902: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
27903: LD_INT 0
27905: PPUSH
27906: PPUSH
// result := 0 ;
27907: LD_ADDR_VAR 0 3
27911: PUSH
27912: LD_INT 0
27914: ST_TO_ADDR
// if not array or not value in array then
27915: LD_VAR 0 1
27919: NOT
27920: PUSH
27921: LD_VAR 0 2
27925: PUSH
27926: LD_VAR 0 1
27930: IN
27931: NOT
27932: OR
27933: IFFALSE 27937
// exit ;
27935: GO 27991
// for i = 1 to array do
27937: LD_ADDR_VAR 0 4
27941: PUSH
27942: DOUBLE
27943: LD_INT 1
27945: DEC
27946: ST_TO_ADDR
27947: LD_VAR 0 1
27951: PUSH
27952: FOR_TO
27953: IFFALSE 27989
// if value = array [ i ] then
27955: LD_VAR 0 2
27959: PUSH
27960: LD_VAR 0 1
27964: PUSH
27965: LD_VAR 0 4
27969: ARRAY
27970: EQUAL
27971: IFFALSE 27987
// begin result := i ;
27973: LD_ADDR_VAR 0 3
27977: PUSH
27978: LD_VAR 0 4
27982: ST_TO_ADDR
// exit ;
27983: POP
27984: POP
27985: GO 27991
// end ;
27987: GO 27952
27989: POP
27990: POP
// end ;
27991: LD_VAR 0 3
27995: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
27996: LD_INT 0
27998: PPUSH
// vc_chassis := chassis ;
27999: LD_ADDR_OWVAR 37
28003: PUSH
28004: LD_VAR 0 1
28008: ST_TO_ADDR
// vc_engine := engine ;
28009: LD_ADDR_OWVAR 39
28013: PUSH
28014: LD_VAR 0 2
28018: ST_TO_ADDR
// vc_control := control ;
28019: LD_ADDR_OWVAR 38
28023: PUSH
28024: LD_VAR 0 3
28028: ST_TO_ADDR
// vc_weapon := weapon ;
28029: LD_ADDR_OWVAR 40
28033: PUSH
28034: LD_VAR 0 4
28038: ST_TO_ADDR
// vc_fuel_battery := fuel ;
28039: LD_ADDR_OWVAR 41
28043: PUSH
28044: LD_VAR 0 5
28048: ST_TO_ADDR
// end ;
28049: LD_VAR 0 6
28053: RET
// export function WantPlant ( unit ) ; var task ; begin
28054: LD_INT 0
28056: PPUSH
28057: PPUSH
// result := false ;
28058: LD_ADDR_VAR 0 2
28062: PUSH
28063: LD_INT 0
28065: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
28066: LD_ADDR_VAR 0 3
28070: PUSH
28071: LD_VAR 0 1
28075: PPUSH
28076: CALL_OW 437
28080: ST_TO_ADDR
// if task then
28081: LD_VAR 0 3
28085: IFFALSE 28113
// if task [ 1 ] [ 1 ] = p then
28087: LD_VAR 0 3
28091: PUSH
28092: LD_INT 1
28094: ARRAY
28095: PUSH
28096: LD_INT 1
28098: ARRAY
28099: PUSH
28100: LD_STRING p
28102: EQUAL
28103: IFFALSE 28113
// result := true ;
28105: LD_ADDR_VAR 0 2
28109: PUSH
28110: LD_INT 1
28112: ST_TO_ADDR
// end ;
28113: LD_VAR 0 2
28117: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
28118: LD_INT 0
28120: PPUSH
28121: PPUSH
28122: PPUSH
28123: PPUSH
// if pos < 1 then
28124: LD_VAR 0 2
28128: PUSH
28129: LD_INT 1
28131: LESS
28132: IFFALSE 28136
// exit ;
28134: GO 28439
// if pos = 1 then
28136: LD_VAR 0 2
28140: PUSH
28141: LD_INT 1
28143: EQUAL
28144: IFFALSE 28177
// result := Replace ( arr , pos [ 1 ] , value ) else
28146: LD_ADDR_VAR 0 4
28150: PUSH
28151: LD_VAR 0 1
28155: PPUSH
28156: LD_VAR 0 2
28160: PUSH
28161: LD_INT 1
28163: ARRAY
28164: PPUSH
28165: LD_VAR 0 3
28169: PPUSH
28170: CALL_OW 1
28174: ST_TO_ADDR
28175: GO 28439
// begin tmp := arr ;
28177: LD_ADDR_VAR 0 6
28181: PUSH
28182: LD_VAR 0 1
28186: ST_TO_ADDR
// s_arr := [ tmp ] ;
28187: LD_ADDR_VAR 0 7
28191: PUSH
28192: LD_VAR 0 6
28196: PUSH
28197: EMPTY
28198: LIST
28199: ST_TO_ADDR
// for i = 1 to pos - 1 do
28200: LD_ADDR_VAR 0 5
28204: PUSH
28205: DOUBLE
28206: LD_INT 1
28208: DEC
28209: ST_TO_ADDR
28210: LD_VAR 0 2
28214: PUSH
28215: LD_INT 1
28217: MINUS
28218: PUSH
28219: FOR_TO
28220: IFFALSE 28265
// begin tmp := tmp [ pos [ i ] ] ;
28222: LD_ADDR_VAR 0 6
28226: PUSH
28227: LD_VAR 0 6
28231: PUSH
28232: LD_VAR 0 2
28236: PUSH
28237: LD_VAR 0 5
28241: ARRAY
28242: ARRAY
28243: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
28244: LD_ADDR_VAR 0 7
28248: PUSH
28249: LD_VAR 0 7
28253: PUSH
28254: LD_VAR 0 6
28258: PUSH
28259: EMPTY
28260: LIST
28261: ADD
28262: ST_TO_ADDR
// end ;
28263: GO 28219
28265: POP
28266: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
28267: LD_ADDR_VAR 0 6
28271: PUSH
28272: LD_VAR 0 6
28276: PPUSH
28277: LD_VAR 0 2
28281: PUSH
28282: LD_VAR 0 2
28286: ARRAY
28287: PPUSH
28288: LD_VAR 0 3
28292: PPUSH
28293: CALL_OW 1
28297: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
28298: LD_ADDR_VAR 0 7
28302: PUSH
28303: LD_VAR 0 7
28307: PPUSH
28308: LD_VAR 0 7
28312: PPUSH
28313: LD_VAR 0 6
28317: PPUSH
28318: CALL_OW 1
28322: ST_TO_ADDR
// for i = s_arr downto 2 do
28323: LD_ADDR_VAR 0 5
28327: PUSH
28328: DOUBLE
28329: LD_VAR 0 7
28333: INC
28334: ST_TO_ADDR
28335: LD_INT 2
28337: PUSH
28338: FOR_DOWNTO
28339: IFFALSE 28423
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
28341: LD_ADDR_VAR 0 6
28345: PUSH
28346: LD_VAR 0 7
28350: PUSH
28351: LD_VAR 0 5
28355: PUSH
28356: LD_INT 1
28358: MINUS
28359: ARRAY
28360: PPUSH
28361: LD_VAR 0 2
28365: PUSH
28366: LD_VAR 0 5
28370: PUSH
28371: LD_INT 1
28373: MINUS
28374: ARRAY
28375: PPUSH
28376: LD_VAR 0 7
28380: PUSH
28381: LD_VAR 0 5
28385: ARRAY
28386: PPUSH
28387: CALL_OW 1
28391: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
28392: LD_ADDR_VAR 0 7
28396: PUSH
28397: LD_VAR 0 7
28401: PPUSH
28402: LD_VAR 0 5
28406: PUSH
28407: LD_INT 1
28409: MINUS
28410: PPUSH
28411: LD_VAR 0 6
28415: PPUSH
28416: CALL_OW 1
28420: ST_TO_ADDR
// end ;
28421: GO 28338
28423: POP
28424: POP
// result := s_arr [ 1 ] ;
28425: LD_ADDR_VAR 0 4
28429: PUSH
28430: LD_VAR 0 7
28434: PUSH
28435: LD_INT 1
28437: ARRAY
28438: ST_TO_ADDR
// end ; end ;
28439: LD_VAR 0 4
28443: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
28444: LD_INT 0
28446: PPUSH
28447: PPUSH
// if not list then
28448: LD_VAR 0 1
28452: NOT
28453: IFFALSE 28457
// exit ;
28455: GO 28548
// i := list [ pos1 ] ;
28457: LD_ADDR_VAR 0 5
28461: PUSH
28462: LD_VAR 0 1
28466: PUSH
28467: LD_VAR 0 2
28471: ARRAY
28472: ST_TO_ADDR
// if not i then
28473: LD_VAR 0 5
28477: NOT
28478: IFFALSE 28482
// exit ;
28480: GO 28548
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
28482: LD_ADDR_VAR 0 1
28486: PUSH
28487: LD_VAR 0 1
28491: PPUSH
28492: LD_VAR 0 2
28496: PPUSH
28497: LD_VAR 0 1
28501: PUSH
28502: LD_VAR 0 3
28506: ARRAY
28507: PPUSH
28508: CALL_OW 1
28512: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
28513: LD_ADDR_VAR 0 1
28517: PUSH
28518: LD_VAR 0 1
28522: PPUSH
28523: LD_VAR 0 3
28527: PPUSH
28528: LD_VAR 0 5
28532: PPUSH
28533: CALL_OW 1
28537: ST_TO_ADDR
// result := list ;
28538: LD_ADDR_VAR 0 4
28542: PUSH
28543: LD_VAR 0 1
28547: ST_TO_ADDR
// end ;
28548: LD_VAR 0 4
28552: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
28553: LD_INT 0
28555: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
28556: LD_ADDR_VAR 0 5
28560: PUSH
28561: LD_VAR 0 1
28565: PPUSH
28566: CALL_OW 250
28570: PPUSH
28571: LD_VAR 0 1
28575: PPUSH
28576: CALL_OW 251
28580: PPUSH
28581: LD_VAR 0 2
28585: PPUSH
28586: LD_VAR 0 3
28590: PPUSH
28591: LD_VAR 0 4
28595: PPUSH
28596: CALL 28606 0 5
28600: ST_TO_ADDR
// end ;
28601: LD_VAR 0 5
28605: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
28606: LD_INT 0
28608: PPUSH
28609: PPUSH
28610: PPUSH
28611: PPUSH
// if not list then
28612: LD_VAR 0 3
28616: NOT
28617: IFFALSE 28621
// exit ;
28619: GO 29009
// result := [ ] ;
28621: LD_ADDR_VAR 0 6
28625: PUSH
28626: EMPTY
28627: ST_TO_ADDR
// for i in list do
28628: LD_ADDR_VAR 0 7
28632: PUSH
28633: LD_VAR 0 3
28637: PUSH
28638: FOR_IN
28639: IFFALSE 28841
// begin tmp := GetDistUnitXY ( i , x , y ) ;
28641: LD_ADDR_VAR 0 9
28645: PUSH
28646: LD_VAR 0 7
28650: PPUSH
28651: LD_VAR 0 1
28655: PPUSH
28656: LD_VAR 0 2
28660: PPUSH
28661: CALL_OW 297
28665: ST_TO_ADDR
// if not result then
28666: LD_VAR 0 6
28670: NOT
28671: IFFALSE 28697
// result := [ [ i , tmp ] ] else
28673: LD_ADDR_VAR 0 6
28677: PUSH
28678: LD_VAR 0 7
28682: PUSH
28683: LD_VAR 0 9
28687: PUSH
28688: EMPTY
28689: LIST
28690: LIST
28691: PUSH
28692: EMPTY
28693: LIST
28694: ST_TO_ADDR
28695: GO 28839
// begin if result [ result ] [ 2 ] < tmp then
28697: LD_VAR 0 6
28701: PUSH
28702: LD_VAR 0 6
28706: ARRAY
28707: PUSH
28708: LD_INT 2
28710: ARRAY
28711: PUSH
28712: LD_VAR 0 9
28716: LESS
28717: IFFALSE 28759
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
28719: LD_ADDR_VAR 0 6
28723: PUSH
28724: LD_VAR 0 6
28728: PPUSH
28729: LD_VAR 0 6
28733: PUSH
28734: LD_INT 1
28736: PLUS
28737: PPUSH
28738: LD_VAR 0 7
28742: PUSH
28743: LD_VAR 0 9
28747: PUSH
28748: EMPTY
28749: LIST
28750: LIST
28751: PPUSH
28752: CALL_OW 2
28756: ST_TO_ADDR
28757: GO 28839
// for j = 1 to result do
28759: LD_ADDR_VAR 0 8
28763: PUSH
28764: DOUBLE
28765: LD_INT 1
28767: DEC
28768: ST_TO_ADDR
28769: LD_VAR 0 6
28773: PUSH
28774: FOR_TO
28775: IFFALSE 28837
// begin if tmp < result [ j ] [ 2 ] then
28777: LD_VAR 0 9
28781: PUSH
28782: LD_VAR 0 6
28786: PUSH
28787: LD_VAR 0 8
28791: ARRAY
28792: PUSH
28793: LD_INT 2
28795: ARRAY
28796: LESS
28797: IFFALSE 28835
// begin result := Insert ( result , j , [ i , tmp ] ) ;
28799: LD_ADDR_VAR 0 6
28803: PUSH
28804: LD_VAR 0 6
28808: PPUSH
28809: LD_VAR 0 8
28813: PPUSH
28814: LD_VAR 0 7
28818: PUSH
28819: LD_VAR 0 9
28823: PUSH
28824: EMPTY
28825: LIST
28826: LIST
28827: PPUSH
28828: CALL_OW 2
28832: ST_TO_ADDR
// break ;
28833: GO 28837
// end ; end ;
28835: GO 28774
28837: POP
28838: POP
// end ; end ;
28839: GO 28638
28841: POP
28842: POP
// if result and not asc then
28843: LD_VAR 0 6
28847: PUSH
28848: LD_VAR 0 4
28852: NOT
28853: AND
28854: IFFALSE 28929
// begin tmp := result ;
28856: LD_ADDR_VAR 0 9
28860: PUSH
28861: LD_VAR 0 6
28865: ST_TO_ADDR
// for i = tmp downto 1 do
28866: LD_ADDR_VAR 0 7
28870: PUSH
28871: DOUBLE
28872: LD_VAR 0 9
28876: INC
28877: ST_TO_ADDR
28878: LD_INT 1
28880: PUSH
28881: FOR_DOWNTO
28882: IFFALSE 28927
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
28884: LD_ADDR_VAR 0 6
28888: PUSH
28889: LD_VAR 0 6
28893: PPUSH
28894: LD_VAR 0 9
28898: PUSH
28899: LD_VAR 0 7
28903: MINUS
28904: PUSH
28905: LD_INT 1
28907: PLUS
28908: PPUSH
28909: LD_VAR 0 9
28913: PUSH
28914: LD_VAR 0 7
28918: ARRAY
28919: PPUSH
28920: CALL_OW 1
28924: ST_TO_ADDR
28925: GO 28881
28927: POP
28928: POP
// end ; tmp := [ ] ;
28929: LD_ADDR_VAR 0 9
28933: PUSH
28934: EMPTY
28935: ST_TO_ADDR
// if mode then
28936: LD_VAR 0 5
28940: IFFALSE 29009
// begin for i = 1 to result do
28942: LD_ADDR_VAR 0 7
28946: PUSH
28947: DOUBLE
28948: LD_INT 1
28950: DEC
28951: ST_TO_ADDR
28952: LD_VAR 0 6
28956: PUSH
28957: FOR_TO
28958: IFFALSE 28997
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
28960: LD_ADDR_VAR 0 9
28964: PUSH
28965: LD_VAR 0 9
28969: PPUSH
28970: LD_VAR 0 7
28974: PPUSH
28975: LD_VAR 0 6
28979: PUSH
28980: LD_VAR 0 7
28984: ARRAY
28985: PUSH
28986: LD_INT 1
28988: ARRAY
28989: PPUSH
28990: CALL_OW 1
28994: ST_TO_ADDR
28995: GO 28957
28997: POP
28998: POP
// result := tmp ;
28999: LD_ADDR_VAR 0 6
29003: PUSH
29004: LD_VAR 0 9
29008: ST_TO_ADDR
// end ; end ;
29009: LD_VAR 0 6
29013: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
29014: LD_INT 0
29016: PPUSH
29017: PPUSH
29018: PPUSH
29019: PPUSH
29020: PPUSH
29021: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
29022: LD_ADDR_VAR 0 5
29026: PUSH
29027: LD_INT 0
29029: PUSH
29030: LD_INT 0
29032: PUSH
29033: LD_INT 0
29035: PUSH
29036: EMPTY
29037: PUSH
29038: EMPTY
29039: LIST
29040: LIST
29041: LIST
29042: LIST
29043: ST_TO_ADDR
// if not x or not y then
29044: LD_VAR 0 2
29048: NOT
29049: PUSH
29050: LD_VAR 0 3
29054: NOT
29055: OR
29056: IFFALSE 29060
// exit ;
29058: GO 30706
// if not range then
29060: LD_VAR 0 4
29064: NOT
29065: IFFALSE 29075
// range := 10 ;
29067: LD_ADDR_VAR 0 4
29071: PUSH
29072: LD_INT 10
29074: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29075: LD_ADDR_VAR 0 8
29079: PUSH
29080: LD_INT 81
29082: PUSH
29083: LD_VAR 0 1
29087: PUSH
29088: EMPTY
29089: LIST
29090: LIST
29091: PUSH
29092: LD_INT 92
29094: PUSH
29095: LD_VAR 0 2
29099: PUSH
29100: LD_VAR 0 3
29104: PUSH
29105: LD_VAR 0 4
29109: PUSH
29110: EMPTY
29111: LIST
29112: LIST
29113: LIST
29114: LIST
29115: PUSH
29116: LD_INT 3
29118: PUSH
29119: LD_INT 21
29121: PUSH
29122: LD_INT 3
29124: PUSH
29125: EMPTY
29126: LIST
29127: LIST
29128: PUSH
29129: EMPTY
29130: LIST
29131: LIST
29132: PUSH
29133: EMPTY
29134: LIST
29135: LIST
29136: LIST
29137: PPUSH
29138: CALL_OW 69
29142: ST_TO_ADDR
// if not tmp then
29143: LD_VAR 0 8
29147: NOT
29148: IFFALSE 29152
// exit ;
29150: GO 30706
// for i in tmp do
29152: LD_ADDR_VAR 0 6
29156: PUSH
29157: LD_VAR 0 8
29161: PUSH
29162: FOR_IN
29163: IFFALSE 30681
// begin points := [ 0 , 0 , 0 ] ;
29165: LD_ADDR_VAR 0 9
29169: PUSH
29170: LD_INT 0
29172: PUSH
29173: LD_INT 0
29175: PUSH
29176: LD_INT 0
29178: PUSH
29179: EMPTY
29180: LIST
29181: LIST
29182: LIST
29183: ST_TO_ADDR
// bpoints := 1 ;
29184: LD_ADDR_VAR 0 10
29188: PUSH
29189: LD_INT 1
29191: ST_TO_ADDR
// case GetType ( i ) of unit_human :
29192: LD_VAR 0 6
29196: PPUSH
29197: CALL_OW 247
29201: PUSH
29202: LD_INT 1
29204: DOUBLE
29205: EQUAL
29206: IFTRUE 29210
29208: GO 29788
29210: POP
// begin if GetClass ( i ) = 1 then
29211: LD_VAR 0 6
29215: PPUSH
29216: CALL_OW 257
29220: PUSH
29221: LD_INT 1
29223: EQUAL
29224: IFFALSE 29245
// points := [ 10 , 5 , 3 ] ;
29226: LD_ADDR_VAR 0 9
29230: PUSH
29231: LD_INT 10
29233: PUSH
29234: LD_INT 5
29236: PUSH
29237: LD_INT 3
29239: PUSH
29240: EMPTY
29241: LIST
29242: LIST
29243: LIST
29244: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
29245: LD_VAR 0 6
29249: PPUSH
29250: CALL_OW 257
29254: PUSH
29255: LD_INT 2
29257: PUSH
29258: LD_INT 3
29260: PUSH
29261: LD_INT 4
29263: PUSH
29264: EMPTY
29265: LIST
29266: LIST
29267: LIST
29268: IN
29269: IFFALSE 29290
// points := [ 3 , 2 , 1 ] ;
29271: LD_ADDR_VAR 0 9
29275: PUSH
29276: LD_INT 3
29278: PUSH
29279: LD_INT 2
29281: PUSH
29282: LD_INT 1
29284: PUSH
29285: EMPTY
29286: LIST
29287: LIST
29288: LIST
29289: ST_TO_ADDR
// if GetClass ( i ) = 5 then
29290: LD_VAR 0 6
29294: PPUSH
29295: CALL_OW 257
29299: PUSH
29300: LD_INT 5
29302: EQUAL
29303: IFFALSE 29324
// points := [ 130 , 5 , 2 ] ;
29305: LD_ADDR_VAR 0 9
29309: PUSH
29310: LD_INT 130
29312: PUSH
29313: LD_INT 5
29315: PUSH
29316: LD_INT 2
29318: PUSH
29319: EMPTY
29320: LIST
29321: LIST
29322: LIST
29323: ST_TO_ADDR
// if GetClass ( i ) = 8 then
29324: LD_VAR 0 6
29328: PPUSH
29329: CALL_OW 257
29333: PUSH
29334: LD_INT 8
29336: EQUAL
29337: IFFALSE 29358
// points := [ 35 , 35 , 30 ] ;
29339: LD_ADDR_VAR 0 9
29343: PUSH
29344: LD_INT 35
29346: PUSH
29347: LD_INT 35
29349: PUSH
29350: LD_INT 30
29352: PUSH
29353: EMPTY
29354: LIST
29355: LIST
29356: LIST
29357: ST_TO_ADDR
// if GetClass ( i ) = 9 then
29358: LD_VAR 0 6
29362: PPUSH
29363: CALL_OW 257
29367: PUSH
29368: LD_INT 9
29370: EQUAL
29371: IFFALSE 29392
// points := [ 20 , 55 , 40 ] ;
29373: LD_ADDR_VAR 0 9
29377: PUSH
29378: LD_INT 20
29380: PUSH
29381: LD_INT 55
29383: PUSH
29384: LD_INT 40
29386: PUSH
29387: EMPTY
29388: LIST
29389: LIST
29390: LIST
29391: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
29392: LD_VAR 0 6
29396: PPUSH
29397: CALL_OW 257
29401: PUSH
29402: LD_INT 12
29404: PUSH
29405: LD_INT 16
29407: PUSH
29408: EMPTY
29409: LIST
29410: LIST
29411: IN
29412: IFFALSE 29433
// points := [ 5 , 3 , 2 ] ;
29414: LD_ADDR_VAR 0 9
29418: PUSH
29419: LD_INT 5
29421: PUSH
29422: LD_INT 3
29424: PUSH
29425: LD_INT 2
29427: PUSH
29428: EMPTY
29429: LIST
29430: LIST
29431: LIST
29432: ST_TO_ADDR
// if GetClass ( i ) = 17 then
29433: LD_VAR 0 6
29437: PPUSH
29438: CALL_OW 257
29442: PUSH
29443: LD_INT 17
29445: EQUAL
29446: IFFALSE 29467
// points := [ 100 , 50 , 75 ] ;
29448: LD_ADDR_VAR 0 9
29452: PUSH
29453: LD_INT 100
29455: PUSH
29456: LD_INT 50
29458: PUSH
29459: LD_INT 75
29461: PUSH
29462: EMPTY
29463: LIST
29464: LIST
29465: LIST
29466: ST_TO_ADDR
// if GetClass ( i ) = 15 then
29467: LD_VAR 0 6
29471: PPUSH
29472: CALL_OW 257
29476: PUSH
29477: LD_INT 15
29479: EQUAL
29480: IFFALSE 29501
// points := [ 10 , 5 , 3 ] ;
29482: LD_ADDR_VAR 0 9
29486: PUSH
29487: LD_INT 10
29489: PUSH
29490: LD_INT 5
29492: PUSH
29493: LD_INT 3
29495: PUSH
29496: EMPTY
29497: LIST
29498: LIST
29499: LIST
29500: ST_TO_ADDR
// if GetClass ( i ) = 14 then
29501: LD_VAR 0 6
29505: PPUSH
29506: CALL_OW 257
29510: PUSH
29511: LD_INT 14
29513: EQUAL
29514: IFFALSE 29535
// points := [ 10 , 0 , 0 ] ;
29516: LD_ADDR_VAR 0 9
29520: PUSH
29521: LD_INT 10
29523: PUSH
29524: LD_INT 0
29526: PUSH
29527: LD_INT 0
29529: PUSH
29530: EMPTY
29531: LIST
29532: LIST
29533: LIST
29534: ST_TO_ADDR
// if GetClass ( i ) = 11 then
29535: LD_VAR 0 6
29539: PPUSH
29540: CALL_OW 257
29544: PUSH
29545: LD_INT 11
29547: EQUAL
29548: IFFALSE 29569
// points := [ 30 , 10 , 5 ] ;
29550: LD_ADDR_VAR 0 9
29554: PUSH
29555: LD_INT 30
29557: PUSH
29558: LD_INT 10
29560: PUSH
29561: LD_INT 5
29563: PUSH
29564: EMPTY
29565: LIST
29566: LIST
29567: LIST
29568: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
29569: LD_VAR 0 1
29573: PPUSH
29574: LD_INT 5
29576: PPUSH
29577: CALL_OW 321
29581: PUSH
29582: LD_INT 2
29584: EQUAL
29585: IFFALSE 29602
// bpoints := bpoints * 1.8 ;
29587: LD_ADDR_VAR 0 10
29591: PUSH
29592: LD_VAR 0 10
29596: PUSH
29597: LD_REAL  1.80000000000000E+0000
29600: MUL
29601: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
29602: LD_VAR 0 6
29606: PPUSH
29607: CALL_OW 257
29611: PUSH
29612: LD_INT 1
29614: PUSH
29615: LD_INT 2
29617: PUSH
29618: LD_INT 3
29620: PUSH
29621: LD_INT 4
29623: PUSH
29624: EMPTY
29625: LIST
29626: LIST
29627: LIST
29628: LIST
29629: IN
29630: PUSH
29631: LD_VAR 0 1
29635: PPUSH
29636: LD_INT 51
29638: PPUSH
29639: CALL_OW 321
29643: PUSH
29644: LD_INT 2
29646: EQUAL
29647: AND
29648: IFFALSE 29665
// bpoints := bpoints * 1.2 ;
29650: LD_ADDR_VAR 0 10
29654: PUSH
29655: LD_VAR 0 10
29659: PUSH
29660: LD_REAL  1.20000000000000E+0000
29663: MUL
29664: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
29665: LD_VAR 0 6
29669: PPUSH
29670: CALL_OW 257
29674: PUSH
29675: LD_INT 5
29677: PUSH
29678: LD_INT 7
29680: PUSH
29681: LD_INT 9
29683: PUSH
29684: EMPTY
29685: LIST
29686: LIST
29687: LIST
29688: IN
29689: PUSH
29690: LD_VAR 0 1
29694: PPUSH
29695: LD_INT 52
29697: PPUSH
29698: CALL_OW 321
29702: PUSH
29703: LD_INT 2
29705: EQUAL
29706: AND
29707: IFFALSE 29724
// bpoints := bpoints * 1.5 ;
29709: LD_ADDR_VAR 0 10
29713: PUSH
29714: LD_VAR 0 10
29718: PUSH
29719: LD_REAL  1.50000000000000E+0000
29722: MUL
29723: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
29724: LD_VAR 0 1
29728: PPUSH
29729: LD_INT 66
29731: PPUSH
29732: CALL_OW 321
29736: PUSH
29737: LD_INT 2
29739: EQUAL
29740: IFFALSE 29757
// bpoints := bpoints * 1.1 ;
29742: LD_ADDR_VAR 0 10
29746: PUSH
29747: LD_VAR 0 10
29751: PUSH
29752: LD_REAL  1.10000000000000E+0000
29755: MUL
29756: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
29757: LD_ADDR_VAR 0 10
29761: PUSH
29762: LD_VAR 0 10
29766: PUSH
29767: LD_VAR 0 6
29771: PPUSH
29772: LD_INT 1
29774: PPUSH
29775: CALL_OW 259
29779: PUSH
29780: LD_REAL  1.15000000000000E+0000
29783: MUL
29784: MUL
29785: ST_TO_ADDR
// end ; unit_vehicle :
29786: GO 30610
29788: LD_INT 2
29790: DOUBLE
29791: EQUAL
29792: IFTRUE 29796
29794: GO 30598
29796: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
29797: LD_VAR 0 6
29801: PPUSH
29802: CALL_OW 264
29806: PUSH
29807: LD_INT 2
29809: PUSH
29810: LD_INT 42
29812: PUSH
29813: LD_INT 24
29815: PUSH
29816: EMPTY
29817: LIST
29818: LIST
29819: LIST
29820: IN
29821: IFFALSE 29842
// points := [ 25 , 5 , 3 ] ;
29823: LD_ADDR_VAR 0 9
29827: PUSH
29828: LD_INT 25
29830: PUSH
29831: LD_INT 5
29833: PUSH
29834: LD_INT 3
29836: PUSH
29837: EMPTY
29838: LIST
29839: LIST
29840: LIST
29841: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
29842: LD_VAR 0 6
29846: PPUSH
29847: CALL_OW 264
29851: PUSH
29852: LD_INT 4
29854: PUSH
29855: LD_INT 43
29857: PUSH
29858: LD_INT 25
29860: PUSH
29861: EMPTY
29862: LIST
29863: LIST
29864: LIST
29865: IN
29866: IFFALSE 29887
// points := [ 40 , 15 , 5 ] ;
29868: LD_ADDR_VAR 0 9
29872: PUSH
29873: LD_INT 40
29875: PUSH
29876: LD_INT 15
29878: PUSH
29879: LD_INT 5
29881: PUSH
29882: EMPTY
29883: LIST
29884: LIST
29885: LIST
29886: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
29887: LD_VAR 0 6
29891: PPUSH
29892: CALL_OW 264
29896: PUSH
29897: LD_INT 3
29899: PUSH
29900: LD_INT 23
29902: PUSH
29903: EMPTY
29904: LIST
29905: LIST
29906: IN
29907: IFFALSE 29928
// points := [ 7 , 25 , 8 ] ;
29909: LD_ADDR_VAR 0 9
29913: PUSH
29914: LD_INT 7
29916: PUSH
29917: LD_INT 25
29919: PUSH
29920: LD_INT 8
29922: PUSH
29923: EMPTY
29924: LIST
29925: LIST
29926: LIST
29927: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
29928: LD_VAR 0 6
29932: PPUSH
29933: CALL_OW 264
29937: PUSH
29938: LD_INT 5
29940: PUSH
29941: LD_INT 27
29943: PUSH
29944: LD_INT 44
29946: PUSH
29947: EMPTY
29948: LIST
29949: LIST
29950: LIST
29951: IN
29952: IFFALSE 29973
// points := [ 14 , 50 , 16 ] ;
29954: LD_ADDR_VAR 0 9
29958: PUSH
29959: LD_INT 14
29961: PUSH
29962: LD_INT 50
29964: PUSH
29965: LD_INT 16
29967: PUSH
29968: EMPTY
29969: LIST
29970: LIST
29971: LIST
29972: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
29973: LD_VAR 0 6
29977: PPUSH
29978: CALL_OW 264
29982: PUSH
29983: LD_INT 6
29985: PUSH
29986: LD_INT 46
29988: PUSH
29989: EMPTY
29990: LIST
29991: LIST
29992: IN
29993: IFFALSE 30014
// points := [ 32 , 120 , 70 ] ;
29995: LD_ADDR_VAR 0 9
29999: PUSH
30000: LD_INT 32
30002: PUSH
30003: LD_INT 120
30005: PUSH
30006: LD_INT 70
30008: PUSH
30009: EMPTY
30010: LIST
30011: LIST
30012: LIST
30013: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
30014: LD_VAR 0 6
30018: PPUSH
30019: CALL_OW 264
30023: PUSH
30024: LD_INT 7
30026: PUSH
30027: LD_INT 28
30029: PUSH
30030: LD_INT 45
30032: PUSH
30033: EMPTY
30034: LIST
30035: LIST
30036: LIST
30037: IN
30038: IFFALSE 30059
// points := [ 35 , 20 , 45 ] ;
30040: LD_ADDR_VAR 0 9
30044: PUSH
30045: LD_INT 35
30047: PUSH
30048: LD_INT 20
30050: PUSH
30051: LD_INT 45
30053: PUSH
30054: EMPTY
30055: LIST
30056: LIST
30057: LIST
30058: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
30059: LD_VAR 0 6
30063: PPUSH
30064: CALL_OW 264
30068: PUSH
30069: LD_INT 47
30071: PUSH
30072: EMPTY
30073: LIST
30074: IN
30075: IFFALSE 30096
// points := [ 67 , 45 , 75 ] ;
30077: LD_ADDR_VAR 0 9
30081: PUSH
30082: LD_INT 67
30084: PUSH
30085: LD_INT 45
30087: PUSH
30088: LD_INT 75
30090: PUSH
30091: EMPTY
30092: LIST
30093: LIST
30094: LIST
30095: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
30096: LD_VAR 0 6
30100: PPUSH
30101: CALL_OW 264
30105: PUSH
30106: LD_INT 26
30108: PUSH
30109: EMPTY
30110: LIST
30111: IN
30112: IFFALSE 30133
// points := [ 120 , 30 , 80 ] ;
30114: LD_ADDR_VAR 0 9
30118: PUSH
30119: LD_INT 120
30121: PUSH
30122: LD_INT 30
30124: PUSH
30125: LD_INT 80
30127: PUSH
30128: EMPTY
30129: LIST
30130: LIST
30131: LIST
30132: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
30133: LD_VAR 0 6
30137: PPUSH
30138: CALL_OW 264
30142: PUSH
30143: LD_INT 22
30145: PUSH
30146: EMPTY
30147: LIST
30148: IN
30149: IFFALSE 30170
// points := [ 40 , 1 , 1 ] ;
30151: LD_ADDR_VAR 0 9
30155: PUSH
30156: LD_INT 40
30158: PUSH
30159: LD_INT 1
30161: PUSH
30162: LD_INT 1
30164: PUSH
30165: EMPTY
30166: LIST
30167: LIST
30168: LIST
30169: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
30170: LD_VAR 0 6
30174: PPUSH
30175: CALL_OW 264
30179: PUSH
30180: LD_INT 29
30182: PUSH
30183: EMPTY
30184: LIST
30185: IN
30186: IFFALSE 30207
// points := [ 70 , 200 , 400 ] ;
30188: LD_ADDR_VAR 0 9
30192: PUSH
30193: LD_INT 70
30195: PUSH
30196: LD_INT 200
30198: PUSH
30199: LD_INT 400
30201: PUSH
30202: EMPTY
30203: LIST
30204: LIST
30205: LIST
30206: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
30207: LD_VAR 0 6
30211: PPUSH
30212: CALL_OW 264
30216: PUSH
30217: LD_INT 14
30219: PUSH
30220: LD_INT 53
30222: PUSH
30223: EMPTY
30224: LIST
30225: LIST
30226: IN
30227: IFFALSE 30248
// points := [ 40 , 10 , 20 ] ;
30229: LD_ADDR_VAR 0 9
30233: PUSH
30234: LD_INT 40
30236: PUSH
30237: LD_INT 10
30239: PUSH
30240: LD_INT 20
30242: PUSH
30243: EMPTY
30244: LIST
30245: LIST
30246: LIST
30247: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
30248: LD_VAR 0 6
30252: PPUSH
30253: CALL_OW 264
30257: PUSH
30258: LD_INT 9
30260: PUSH
30261: EMPTY
30262: LIST
30263: IN
30264: IFFALSE 30285
// points := [ 5 , 70 , 20 ] ;
30266: LD_ADDR_VAR 0 9
30270: PUSH
30271: LD_INT 5
30273: PUSH
30274: LD_INT 70
30276: PUSH
30277: LD_INT 20
30279: PUSH
30280: EMPTY
30281: LIST
30282: LIST
30283: LIST
30284: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
30285: LD_VAR 0 6
30289: PPUSH
30290: CALL_OW 264
30294: PUSH
30295: LD_INT 10
30297: PUSH
30298: EMPTY
30299: LIST
30300: IN
30301: IFFALSE 30322
// points := [ 35 , 110 , 70 ] ;
30303: LD_ADDR_VAR 0 9
30307: PUSH
30308: LD_INT 35
30310: PUSH
30311: LD_INT 110
30313: PUSH
30314: LD_INT 70
30316: PUSH
30317: EMPTY
30318: LIST
30319: LIST
30320: LIST
30321: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
30322: LD_VAR 0 6
30326: PPUSH
30327: CALL_OW 265
30331: PUSH
30332: LD_INT 25
30334: EQUAL
30335: IFFALSE 30356
// points := [ 80 , 65 , 100 ] ;
30337: LD_ADDR_VAR 0 9
30341: PUSH
30342: LD_INT 80
30344: PUSH
30345: LD_INT 65
30347: PUSH
30348: LD_INT 100
30350: PUSH
30351: EMPTY
30352: LIST
30353: LIST
30354: LIST
30355: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
30356: LD_VAR 0 6
30360: PPUSH
30361: CALL_OW 263
30365: PUSH
30366: LD_INT 1
30368: EQUAL
30369: IFFALSE 30404
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
30371: LD_ADDR_VAR 0 10
30375: PUSH
30376: LD_VAR 0 10
30380: PUSH
30381: LD_VAR 0 6
30385: PPUSH
30386: CALL_OW 311
30390: PPUSH
30391: LD_INT 3
30393: PPUSH
30394: CALL_OW 259
30398: PUSH
30399: LD_INT 4
30401: MUL
30402: MUL
30403: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
30404: LD_VAR 0 6
30408: PPUSH
30409: CALL_OW 263
30413: PUSH
30414: LD_INT 2
30416: EQUAL
30417: IFFALSE 30468
// begin j := IsControledBy ( i ) ;
30419: LD_ADDR_VAR 0 7
30423: PUSH
30424: LD_VAR 0 6
30428: PPUSH
30429: CALL_OW 312
30433: ST_TO_ADDR
// if j then
30434: LD_VAR 0 7
30438: IFFALSE 30468
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
30440: LD_ADDR_VAR 0 10
30444: PUSH
30445: LD_VAR 0 10
30449: PUSH
30450: LD_VAR 0 7
30454: PPUSH
30455: LD_INT 3
30457: PPUSH
30458: CALL_OW 259
30462: PUSH
30463: LD_INT 3
30465: MUL
30466: MUL
30467: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
30468: LD_VAR 0 6
30472: PPUSH
30473: CALL_OW 264
30477: PUSH
30478: LD_INT 5
30480: PUSH
30481: LD_INT 6
30483: PUSH
30484: LD_INT 46
30486: PUSH
30487: LD_INT 44
30489: PUSH
30490: LD_INT 47
30492: PUSH
30493: LD_INT 45
30495: PUSH
30496: LD_INT 28
30498: PUSH
30499: LD_INT 7
30501: PUSH
30502: LD_INT 27
30504: PUSH
30505: LD_INT 29
30507: PUSH
30508: EMPTY
30509: LIST
30510: LIST
30511: LIST
30512: LIST
30513: LIST
30514: LIST
30515: LIST
30516: LIST
30517: LIST
30518: LIST
30519: IN
30520: PUSH
30521: LD_VAR 0 1
30525: PPUSH
30526: LD_INT 52
30528: PPUSH
30529: CALL_OW 321
30533: PUSH
30534: LD_INT 2
30536: EQUAL
30537: AND
30538: IFFALSE 30555
// bpoints := bpoints * 1.2 ;
30540: LD_ADDR_VAR 0 10
30544: PUSH
30545: LD_VAR 0 10
30549: PUSH
30550: LD_REAL  1.20000000000000E+0000
30553: MUL
30554: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
30555: LD_VAR 0 6
30559: PPUSH
30560: CALL_OW 264
30564: PUSH
30565: LD_INT 6
30567: PUSH
30568: LD_INT 46
30570: PUSH
30571: LD_INT 47
30573: PUSH
30574: EMPTY
30575: LIST
30576: LIST
30577: LIST
30578: IN
30579: IFFALSE 30596
// bpoints := bpoints * 1.2 ;
30581: LD_ADDR_VAR 0 10
30585: PUSH
30586: LD_VAR 0 10
30590: PUSH
30591: LD_REAL  1.20000000000000E+0000
30594: MUL
30595: ST_TO_ADDR
// end ; unit_building :
30596: GO 30610
30598: LD_INT 3
30600: DOUBLE
30601: EQUAL
30602: IFTRUE 30606
30604: GO 30609
30606: POP
// ; end ;
30607: GO 30610
30609: POP
// for j = 1 to 3 do
30610: LD_ADDR_VAR 0 7
30614: PUSH
30615: DOUBLE
30616: LD_INT 1
30618: DEC
30619: ST_TO_ADDR
30620: LD_INT 3
30622: PUSH
30623: FOR_TO
30624: IFFALSE 30677
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
30626: LD_ADDR_VAR 0 5
30630: PUSH
30631: LD_VAR 0 5
30635: PPUSH
30636: LD_VAR 0 7
30640: PPUSH
30641: LD_VAR 0 5
30645: PUSH
30646: LD_VAR 0 7
30650: ARRAY
30651: PUSH
30652: LD_VAR 0 9
30656: PUSH
30657: LD_VAR 0 7
30661: ARRAY
30662: PUSH
30663: LD_VAR 0 10
30667: MUL
30668: PLUS
30669: PPUSH
30670: CALL_OW 1
30674: ST_TO_ADDR
30675: GO 30623
30677: POP
30678: POP
// end ;
30679: GO 29162
30681: POP
30682: POP
// result := Replace ( result , 4 , tmp ) ;
30683: LD_ADDR_VAR 0 5
30687: PUSH
30688: LD_VAR 0 5
30692: PPUSH
30693: LD_INT 4
30695: PPUSH
30696: LD_VAR 0 8
30700: PPUSH
30701: CALL_OW 1
30705: ST_TO_ADDR
// end ;
30706: LD_VAR 0 5
30710: RET
// export function DangerAtRange ( unit , range ) ; begin
30711: LD_INT 0
30713: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
30714: LD_ADDR_VAR 0 3
30718: PUSH
30719: LD_VAR 0 1
30723: PPUSH
30724: CALL_OW 255
30728: PPUSH
30729: LD_VAR 0 1
30733: PPUSH
30734: CALL_OW 250
30738: PPUSH
30739: LD_VAR 0 1
30743: PPUSH
30744: CALL_OW 251
30748: PPUSH
30749: LD_VAR 0 2
30753: PPUSH
30754: CALL 29014 0 4
30758: ST_TO_ADDR
// end ;
30759: LD_VAR 0 3
30763: RET
// export function DangerInArea ( side , area ) ; begin
30764: LD_INT 0
30766: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
30767: LD_ADDR_VAR 0 3
30771: PUSH
30772: LD_VAR 0 2
30776: PPUSH
30777: LD_INT 81
30779: PUSH
30780: LD_VAR 0 1
30784: PUSH
30785: EMPTY
30786: LIST
30787: LIST
30788: PPUSH
30789: CALL_OW 70
30793: ST_TO_ADDR
// end ;
30794: LD_VAR 0 3
30798: RET
// export function IsExtension ( b ) ; begin
30799: LD_INT 0
30801: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
30802: LD_ADDR_VAR 0 2
30806: PUSH
30807: LD_VAR 0 1
30811: PUSH
30812: LD_INT 23
30814: PUSH
30815: LD_INT 20
30817: PUSH
30818: LD_INT 22
30820: PUSH
30821: LD_INT 17
30823: PUSH
30824: LD_INT 24
30826: PUSH
30827: LD_INT 21
30829: PUSH
30830: LD_INT 19
30832: PUSH
30833: LD_INT 16
30835: PUSH
30836: LD_INT 25
30838: PUSH
30839: LD_INT 18
30841: PUSH
30842: EMPTY
30843: LIST
30844: LIST
30845: LIST
30846: LIST
30847: LIST
30848: LIST
30849: LIST
30850: LIST
30851: LIST
30852: LIST
30853: IN
30854: ST_TO_ADDR
// end ;
30855: LD_VAR 0 2
30859: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
30860: LD_INT 0
30862: PPUSH
30863: PPUSH
30864: PPUSH
// result := [ ] ;
30865: LD_ADDR_VAR 0 4
30869: PUSH
30870: EMPTY
30871: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
30872: LD_ADDR_VAR 0 5
30876: PUSH
30877: LD_VAR 0 2
30881: PPUSH
30882: LD_INT 21
30884: PUSH
30885: LD_INT 3
30887: PUSH
30888: EMPTY
30889: LIST
30890: LIST
30891: PPUSH
30892: CALL_OW 70
30896: ST_TO_ADDR
// if not tmp then
30897: LD_VAR 0 5
30901: NOT
30902: IFFALSE 30906
// exit ;
30904: GO 30970
// if checkLink then
30906: LD_VAR 0 3
30910: IFFALSE 30960
// begin for i in tmp do
30912: LD_ADDR_VAR 0 6
30916: PUSH
30917: LD_VAR 0 5
30921: PUSH
30922: FOR_IN
30923: IFFALSE 30958
// if GetBase ( i ) <> base then
30925: LD_VAR 0 6
30929: PPUSH
30930: CALL_OW 274
30934: PUSH
30935: LD_VAR 0 1
30939: NONEQUAL
30940: IFFALSE 30956
// ComLinkToBase ( base , i ) ;
30942: LD_VAR 0 1
30946: PPUSH
30947: LD_VAR 0 6
30951: PPUSH
30952: CALL_OW 169
30956: GO 30922
30958: POP
30959: POP
// end ; result := tmp ;
30960: LD_ADDR_VAR 0 4
30964: PUSH
30965: LD_VAR 0 5
30969: ST_TO_ADDR
// end ;
30970: LD_VAR 0 4
30974: RET
// export function ComComplete ( units , b ) ; var i ; begin
30975: LD_INT 0
30977: PPUSH
30978: PPUSH
// if not units then
30979: LD_VAR 0 1
30983: NOT
30984: IFFALSE 30988
// exit ;
30986: GO 31078
// for i in units do
30988: LD_ADDR_VAR 0 4
30992: PUSH
30993: LD_VAR 0 1
30997: PUSH
30998: FOR_IN
30999: IFFALSE 31076
// if BuildingStatus ( b ) = bs_build then
31001: LD_VAR 0 2
31005: PPUSH
31006: CALL_OW 461
31010: PUSH
31011: LD_INT 1
31013: EQUAL
31014: IFFALSE 31074
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
31016: LD_VAR 0 4
31020: PPUSH
31021: LD_STRING h
31023: PUSH
31024: LD_VAR 0 2
31028: PPUSH
31029: CALL_OW 250
31033: PUSH
31034: LD_VAR 0 2
31038: PPUSH
31039: CALL_OW 251
31043: PUSH
31044: LD_VAR 0 2
31048: PUSH
31049: LD_INT 0
31051: PUSH
31052: LD_INT 0
31054: PUSH
31055: LD_INT 0
31057: PUSH
31058: EMPTY
31059: LIST
31060: LIST
31061: LIST
31062: LIST
31063: LIST
31064: LIST
31065: LIST
31066: PUSH
31067: EMPTY
31068: LIST
31069: PPUSH
31070: CALL_OW 446
31074: GO 30998
31076: POP
31077: POP
// end ;
31078: LD_VAR 0 3
31082: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
31083: LD_INT 0
31085: PPUSH
31086: PPUSH
31087: PPUSH
31088: PPUSH
31089: PPUSH
31090: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
31091: LD_VAR 0 1
31095: NOT
31096: PUSH
31097: LD_VAR 0 1
31101: PPUSH
31102: CALL_OW 263
31106: PUSH
31107: LD_INT 2
31109: EQUAL
31110: NOT
31111: OR
31112: IFFALSE 31116
// exit ;
31114: GO 31432
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
31116: LD_ADDR_VAR 0 6
31120: PUSH
31121: LD_INT 22
31123: PUSH
31124: LD_VAR 0 1
31128: PPUSH
31129: CALL_OW 255
31133: PUSH
31134: EMPTY
31135: LIST
31136: LIST
31137: PUSH
31138: LD_INT 2
31140: PUSH
31141: LD_INT 30
31143: PUSH
31144: LD_INT 36
31146: PUSH
31147: EMPTY
31148: LIST
31149: LIST
31150: PUSH
31151: LD_INT 34
31153: PUSH
31154: LD_INT 31
31156: PUSH
31157: EMPTY
31158: LIST
31159: LIST
31160: PUSH
31161: EMPTY
31162: LIST
31163: LIST
31164: LIST
31165: PUSH
31166: EMPTY
31167: LIST
31168: LIST
31169: PPUSH
31170: CALL_OW 69
31174: ST_TO_ADDR
// if not tmp then
31175: LD_VAR 0 6
31179: NOT
31180: IFFALSE 31184
// exit ;
31182: GO 31432
// result := [ ] ;
31184: LD_ADDR_VAR 0 2
31188: PUSH
31189: EMPTY
31190: ST_TO_ADDR
// for i in tmp do
31191: LD_ADDR_VAR 0 3
31195: PUSH
31196: LD_VAR 0 6
31200: PUSH
31201: FOR_IN
31202: IFFALSE 31273
// begin t := UnitsInside ( i ) ;
31204: LD_ADDR_VAR 0 4
31208: PUSH
31209: LD_VAR 0 3
31213: PPUSH
31214: CALL_OW 313
31218: ST_TO_ADDR
// if t then
31219: LD_VAR 0 4
31223: IFFALSE 31271
// for j in t do
31225: LD_ADDR_VAR 0 7
31229: PUSH
31230: LD_VAR 0 4
31234: PUSH
31235: FOR_IN
31236: IFFALSE 31269
// result := Insert ( result , result + 1 , j ) ;
31238: LD_ADDR_VAR 0 2
31242: PUSH
31243: LD_VAR 0 2
31247: PPUSH
31248: LD_VAR 0 2
31252: PUSH
31253: LD_INT 1
31255: PLUS
31256: PPUSH
31257: LD_VAR 0 7
31261: PPUSH
31262: CALL_OW 2
31266: ST_TO_ADDR
31267: GO 31235
31269: POP
31270: POP
// end ;
31271: GO 31201
31273: POP
31274: POP
// if not result then
31275: LD_VAR 0 2
31279: NOT
31280: IFFALSE 31284
// exit ;
31282: GO 31432
// mech := result [ 1 ] ;
31284: LD_ADDR_VAR 0 5
31288: PUSH
31289: LD_VAR 0 2
31293: PUSH
31294: LD_INT 1
31296: ARRAY
31297: ST_TO_ADDR
// if result > 1 then
31298: LD_VAR 0 2
31302: PUSH
31303: LD_INT 1
31305: GREATER
31306: IFFALSE 31418
// for i = 2 to result do
31308: LD_ADDR_VAR 0 3
31312: PUSH
31313: DOUBLE
31314: LD_INT 2
31316: DEC
31317: ST_TO_ADDR
31318: LD_VAR 0 2
31322: PUSH
31323: FOR_TO
31324: IFFALSE 31416
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
31326: LD_ADDR_VAR 0 4
31330: PUSH
31331: LD_VAR 0 2
31335: PUSH
31336: LD_VAR 0 3
31340: ARRAY
31341: PPUSH
31342: LD_INT 3
31344: PPUSH
31345: CALL_OW 259
31349: PUSH
31350: LD_VAR 0 2
31354: PUSH
31355: LD_VAR 0 3
31359: ARRAY
31360: PPUSH
31361: CALL_OW 432
31365: MINUS
31366: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
31367: LD_VAR 0 4
31371: PUSH
31372: LD_VAR 0 5
31376: PPUSH
31377: LD_INT 3
31379: PPUSH
31380: CALL_OW 259
31384: PUSH
31385: LD_VAR 0 5
31389: PPUSH
31390: CALL_OW 432
31394: MINUS
31395: GREATEREQUAL
31396: IFFALSE 31414
// mech := result [ i ] ;
31398: LD_ADDR_VAR 0 5
31402: PUSH
31403: LD_VAR 0 2
31407: PUSH
31408: LD_VAR 0 3
31412: ARRAY
31413: ST_TO_ADDR
// end ;
31414: GO 31323
31416: POP
31417: POP
// ComLinkTo ( vehicle , mech ) ;
31418: LD_VAR 0 1
31422: PPUSH
31423: LD_VAR 0 5
31427: PPUSH
31428: CALL_OW 135
// end ;
31432: LD_VAR 0 2
31436: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
31437: LD_INT 0
31439: PPUSH
31440: PPUSH
31441: PPUSH
31442: PPUSH
31443: PPUSH
31444: PPUSH
31445: PPUSH
31446: PPUSH
31447: PPUSH
31448: PPUSH
31449: PPUSH
31450: PPUSH
31451: PPUSH
// result := [ ] ;
31452: LD_ADDR_VAR 0 7
31456: PUSH
31457: EMPTY
31458: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
31459: LD_VAR 0 1
31463: PPUSH
31464: CALL_OW 266
31468: PUSH
31469: LD_INT 0
31471: PUSH
31472: LD_INT 1
31474: PUSH
31475: EMPTY
31476: LIST
31477: LIST
31478: IN
31479: NOT
31480: IFFALSE 31484
// exit ;
31482: GO 33118
// if name then
31484: LD_VAR 0 3
31488: IFFALSE 31504
// SetBName ( base_dep , name ) ;
31490: LD_VAR 0 1
31494: PPUSH
31495: LD_VAR 0 3
31499: PPUSH
31500: CALL_OW 500
// base := GetBase ( base_dep ) ;
31504: LD_ADDR_VAR 0 15
31508: PUSH
31509: LD_VAR 0 1
31513: PPUSH
31514: CALL_OW 274
31518: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
31519: LD_ADDR_VAR 0 16
31523: PUSH
31524: LD_VAR 0 1
31528: PPUSH
31529: CALL_OW 255
31533: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
31534: LD_ADDR_VAR 0 17
31538: PUSH
31539: LD_VAR 0 1
31543: PPUSH
31544: CALL_OW 248
31548: ST_TO_ADDR
// if sources then
31549: LD_VAR 0 5
31553: IFFALSE 31600
// for i = 1 to 3 do
31555: LD_ADDR_VAR 0 8
31559: PUSH
31560: DOUBLE
31561: LD_INT 1
31563: DEC
31564: ST_TO_ADDR
31565: LD_INT 3
31567: PUSH
31568: FOR_TO
31569: IFFALSE 31598
// AddResourceType ( base , i , sources [ i ] ) ;
31571: LD_VAR 0 15
31575: PPUSH
31576: LD_VAR 0 8
31580: PPUSH
31581: LD_VAR 0 5
31585: PUSH
31586: LD_VAR 0 8
31590: ARRAY
31591: PPUSH
31592: CALL_OW 276
31596: GO 31568
31598: POP
31599: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
31600: LD_ADDR_VAR 0 18
31604: PUSH
31605: LD_VAR 0 15
31609: PPUSH
31610: LD_VAR 0 2
31614: PPUSH
31615: LD_INT 1
31617: PPUSH
31618: CALL 30860 0 3
31622: ST_TO_ADDR
// InitHc ;
31623: CALL_OW 19
// InitUc ;
31627: CALL_OW 18
// uc_side := side ;
31631: LD_ADDR_OWVAR 20
31635: PUSH
31636: LD_VAR 0 16
31640: ST_TO_ADDR
// uc_nation := nation ;
31641: LD_ADDR_OWVAR 21
31645: PUSH
31646: LD_VAR 0 17
31650: ST_TO_ADDR
// if buildings then
31651: LD_VAR 0 18
31655: IFFALSE 32977
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
31657: LD_ADDR_VAR 0 19
31661: PUSH
31662: LD_VAR 0 18
31666: PPUSH
31667: LD_INT 2
31669: PUSH
31670: LD_INT 30
31672: PUSH
31673: LD_INT 29
31675: PUSH
31676: EMPTY
31677: LIST
31678: LIST
31679: PUSH
31680: LD_INT 30
31682: PUSH
31683: LD_INT 30
31685: PUSH
31686: EMPTY
31687: LIST
31688: LIST
31689: PUSH
31690: EMPTY
31691: LIST
31692: LIST
31693: LIST
31694: PPUSH
31695: CALL_OW 72
31699: ST_TO_ADDR
// if tmp then
31700: LD_VAR 0 19
31704: IFFALSE 31752
// for i in tmp do
31706: LD_ADDR_VAR 0 8
31710: PUSH
31711: LD_VAR 0 19
31715: PUSH
31716: FOR_IN
31717: IFFALSE 31750
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
31719: LD_VAR 0 8
31723: PPUSH
31724: CALL_OW 250
31728: PPUSH
31729: LD_VAR 0 8
31733: PPUSH
31734: CALL_OW 251
31738: PPUSH
31739: LD_VAR 0 16
31743: PPUSH
31744: CALL_OW 441
31748: GO 31716
31750: POP
31751: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
31752: LD_VAR 0 18
31756: PPUSH
31757: LD_INT 2
31759: PUSH
31760: LD_INT 30
31762: PUSH
31763: LD_INT 32
31765: PUSH
31766: EMPTY
31767: LIST
31768: LIST
31769: PUSH
31770: LD_INT 30
31772: PUSH
31773: LD_INT 33
31775: PUSH
31776: EMPTY
31777: LIST
31778: LIST
31779: PUSH
31780: EMPTY
31781: LIST
31782: LIST
31783: LIST
31784: PPUSH
31785: CALL_OW 72
31789: IFFALSE 31877
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
31791: LD_ADDR_VAR 0 8
31795: PUSH
31796: LD_VAR 0 18
31800: PPUSH
31801: LD_INT 2
31803: PUSH
31804: LD_INT 30
31806: PUSH
31807: LD_INT 32
31809: PUSH
31810: EMPTY
31811: LIST
31812: LIST
31813: PUSH
31814: LD_INT 30
31816: PUSH
31817: LD_INT 33
31819: PUSH
31820: EMPTY
31821: LIST
31822: LIST
31823: PUSH
31824: EMPTY
31825: LIST
31826: LIST
31827: LIST
31828: PPUSH
31829: CALL_OW 72
31833: PUSH
31834: FOR_IN
31835: IFFALSE 31875
// begin if not GetBWeapon ( i ) then
31837: LD_VAR 0 8
31841: PPUSH
31842: CALL_OW 269
31846: NOT
31847: IFFALSE 31873
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
31849: LD_VAR 0 8
31853: PPUSH
31854: LD_VAR 0 8
31858: PPUSH
31859: LD_VAR 0 2
31863: PPUSH
31864: CALL 33123 0 2
31868: PPUSH
31869: CALL_OW 431
// end ;
31873: GO 31834
31875: POP
31876: POP
// end ; for i = 1 to personel do
31877: LD_ADDR_VAR 0 8
31881: PUSH
31882: DOUBLE
31883: LD_INT 1
31885: DEC
31886: ST_TO_ADDR
31887: LD_VAR 0 6
31891: PUSH
31892: FOR_TO
31893: IFFALSE 32957
// begin if i > 4 then
31895: LD_VAR 0 8
31899: PUSH
31900: LD_INT 4
31902: GREATER
31903: IFFALSE 31907
// break ;
31905: GO 32957
// case i of 1 :
31907: LD_VAR 0 8
31911: PUSH
31912: LD_INT 1
31914: DOUBLE
31915: EQUAL
31916: IFTRUE 31920
31918: GO 32000
31920: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
31921: LD_ADDR_VAR 0 12
31925: PUSH
31926: LD_VAR 0 18
31930: PPUSH
31931: LD_INT 22
31933: PUSH
31934: LD_VAR 0 16
31938: PUSH
31939: EMPTY
31940: LIST
31941: LIST
31942: PUSH
31943: LD_INT 58
31945: PUSH
31946: EMPTY
31947: LIST
31948: PUSH
31949: LD_INT 2
31951: PUSH
31952: LD_INT 30
31954: PUSH
31955: LD_INT 32
31957: PUSH
31958: EMPTY
31959: LIST
31960: LIST
31961: PUSH
31962: LD_INT 30
31964: PUSH
31965: LD_INT 4
31967: PUSH
31968: EMPTY
31969: LIST
31970: LIST
31971: PUSH
31972: LD_INT 30
31974: PUSH
31975: LD_INT 5
31977: PUSH
31978: EMPTY
31979: LIST
31980: LIST
31981: PUSH
31982: EMPTY
31983: LIST
31984: LIST
31985: LIST
31986: LIST
31987: PUSH
31988: EMPTY
31989: LIST
31990: LIST
31991: LIST
31992: PPUSH
31993: CALL_OW 72
31997: ST_TO_ADDR
31998: GO 32222
32000: LD_INT 2
32002: DOUBLE
32003: EQUAL
32004: IFTRUE 32008
32006: GO 32070
32008: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
32009: LD_ADDR_VAR 0 12
32013: PUSH
32014: LD_VAR 0 18
32018: PPUSH
32019: LD_INT 22
32021: PUSH
32022: LD_VAR 0 16
32026: PUSH
32027: EMPTY
32028: LIST
32029: LIST
32030: PUSH
32031: LD_INT 2
32033: PUSH
32034: LD_INT 30
32036: PUSH
32037: LD_INT 0
32039: PUSH
32040: EMPTY
32041: LIST
32042: LIST
32043: PUSH
32044: LD_INT 30
32046: PUSH
32047: LD_INT 1
32049: PUSH
32050: EMPTY
32051: LIST
32052: LIST
32053: PUSH
32054: EMPTY
32055: LIST
32056: LIST
32057: LIST
32058: PUSH
32059: EMPTY
32060: LIST
32061: LIST
32062: PPUSH
32063: CALL_OW 72
32067: ST_TO_ADDR
32068: GO 32222
32070: LD_INT 3
32072: DOUBLE
32073: EQUAL
32074: IFTRUE 32078
32076: GO 32140
32078: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
32079: LD_ADDR_VAR 0 12
32083: PUSH
32084: LD_VAR 0 18
32088: PPUSH
32089: LD_INT 22
32091: PUSH
32092: LD_VAR 0 16
32096: PUSH
32097: EMPTY
32098: LIST
32099: LIST
32100: PUSH
32101: LD_INT 2
32103: PUSH
32104: LD_INT 30
32106: PUSH
32107: LD_INT 2
32109: PUSH
32110: EMPTY
32111: LIST
32112: LIST
32113: PUSH
32114: LD_INT 30
32116: PUSH
32117: LD_INT 3
32119: PUSH
32120: EMPTY
32121: LIST
32122: LIST
32123: PUSH
32124: EMPTY
32125: LIST
32126: LIST
32127: LIST
32128: PUSH
32129: EMPTY
32130: LIST
32131: LIST
32132: PPUSH
32133: CALL_OW 72
32137: ST_TO_ADDR
32138: GO 32222
32140: LD_INT 4
32142: DOUBLE
32143: EQUAL
32144: IFTRUE 32148
32146: GO 32221
32148: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
32149: LD_ADDR_VAR 0 12
32153: PUSH
32154: LD_VAR 0 18
32158: PPUSH
32159: LD_INT 22
32161: PUSH
32162: LD_VAR 0 16
32166: PUSH
32167: EMPTY
32168: LIST
32169: LIST
32170: PUSH
32171: LD_INT 2
32173: PUSH
32174: LD_INT 30
32176: PUSH
32177: LD_INT 6
32179: PUSH
32180: EMPTY
32181: LIST
32182: LIST
32183: PUSH
32184: LD_INT 30
32186: PUSH
32187: LD_INT 7
32189: PUSH
32190: EMPTY
32191: LIST
32192: LIST
32193: PUSH
32194: LD_INT 30
32196: PUSH
32197: LD_INT 8
32199: PUSH
32200: EMPTY
32201: LIST
32202: LIST
32203: PUSH
32204: EMPTY
32205: LIST
32206: LIST
32207: LIST
32208: LIST
32209: PUSH
32210: EMPTY
32211: LIST
32212: LIST
32213: PPUSH
32214: CALL_OW 72
32218: ST_TO_ADDR
32219: GO 32222
32221: POP
// if i = 1 then
32222: LD_VAR 0 8
32226: PUSH
32227: LD_INT 1
32229: EQUAL
32230: IFFALSE 32341
// begin tmp := [ ] ;
32232: LD_ADDR_VAR 0 19
32236: PUSH
32237: EMPTY
32238: ST_TO_ADDR
// for j in f do
32239: LD_ADDR_VAR 0 9
32243: PUSH
32244: LD_VAR 0 12
32248: PUSH
32249: FOR_IN
32250: IFFALSE 32323
// if GetBType ( j ) = b_bunker then
32252: LD_VAR 0 9
32256: PPUSH
32257: CALL_OW 266
32261: PUSH
32262: LD_INT 32
32264: EQUAL
32265: IFFALSE 32292
// tmp := Insert ( tmp , 1 , j ) else
32267: LD_ADDR_VAR 0 19
32271: PUSH
32272: LD_VAR 0 19
32276: PPUSH
32277: LD_INT 1
32279: PPUSH
32280: LD_VAR 0 9
32284: PPUSH
32285: CALL_OW 2
32289: ST_TO_ADDR
32290: GO 32321
// tmp := Insert ( tmp , tmp + 1 , j ) ;
32292: LD_ADDR_VAR 0 19
32296: PUSH
32297: LD_VAR 0 19
32301: PPUSH
32302: LD_VAR 0 19
32306: PUSH
32307: LD_INT 1
32309: PLUS
32310: PPUSH
32311: LD_VAR 0 9
32315: PPUSH
32316: CALL_OW 2
32320: ST_TO_ADDR
32321: GO 32249
32323: POP
32324: POP
// if tmp then
32325: LD_VAR 0 19
32329: IFFALSE 32341
// f := tmp ;
32331: LD_ADDR_VAR 0 12
32335: PUSH
32336: LD_VAR 0 19
32340: ST_TO_ADDR
// end ; x := personel [ i ] ;
32341: LD_ADDR_VAR 0 13
32345: PUSH
32346: LD_VAR 0 6
32350: PUSH
32351: LD_VAR 0 8
32355: ARRAY
32356: ST_TO_ADDR
// if x = - 1 then
32357: LD_VAR 0 13
32361: PUSH
32362: LD_INT 1
32364: NEG
32365: EQUAL
32366: IFFALSE 32575
// begin for j in f do
32368: LD_ADDR_VAR 0 9
32372: PUSH
32373: LD_VAR 0 12
32377: PUSH
32378: FOR_IN
32379: IFFALSE 32571
// repeat InitHc ;
32381: CALL_OW 19
// if GetBType ( j ) = b_barracks then
32385: LD_VAR 0 9
32389: PPUSH
32390: CALL_OW 266
32394: PUSH
32395: LD_INT 5
32397: EQUAL
32398: IFFALSE 32468
// begin if UnitsInside ( j ) < 3 then
32400: LD_VAR 0 9
32404: PPUSH
32405: CALL_OW 313
32409: PUSH
32410: LD_INT 3
32412: LESS
32413: IFFALSE 32449
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
32415: LD_INT 0
32417: PPUSH
32418: LD_INT 5
32420: PUSH
32421: LD_INT 8
32423: PUSH
32424: LD_INT 9
32426: PUSH
32427: EMPTY
32428: LIST
32429: LIST
32430: LIST
32431: PUSH
32432: LD_VAR 0 17
32436: ARRAY
32437: PPUSH
32438: LD_VAR 0 4
32442: PPUSH
32443: CALL_OW 380
32447: GO 32466
// PrepareHuman ( false , i , skill ) ;
32449: LD_INT 0
32451: PPUSH
32452: LD_VAR 0 8
32456: PPUSH
32457: LD_VAR 0 4
32461: PPUSH
32462: CALL_OW 380
// end else
32466: GO 32485
// PrepareHuman ( false , i , skill ) ;
32468: LD_INT 0
32470: PPUSH
32471: LD_VAR 0 8
32475: PPUSH
32476: LD_VAR 0 4
32480: PPUSH
32481: CALL_OW 380
// un := CreateHuman ;
32485: LD_ADDR_VAR 0 14
32489: PUSH
32490: CALL_OW 44
32494: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32495: LD_ADDR_VAR 0 7
32499: PUSH
32500: LD_VAR 0 7
32504: PPUSH
32505: LD_INT 1
32507: PPUSH
32508: LD_VAR 0 14
32512: PPUSH
32513: CALL_OW 2
32517: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
32518: LD_VAR 0 14
32522: PPUSH
32523: LD_VAR 0 9
32527: PPUSH
32528: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
32532: LD_VAR 0 9
32536: PPUSH
32537: CALL_OW 313
32541: PUSH
32542: LD_INT 6
32544: EQUAL
32545: PUSH
32546: LD_VAR 0 9
32550: PPUSH
32551: CALL_OW 266
32555: PUSH
32556: LD_INT 32
32558: PUSH
32559: LD_INT 31
32561: PUSH
32562: EMPTY
32563: LIST
32564: LIST
32565: IN
32566: OR
32567: IFFALSE 32381
32569: GO 32378
32571: POP
32572: POP
// end else
32573: GO 32955
// for j = 1 to x do
32575: LD_ADDR_VAR 0 9
32579: PUSH
32580: DOUBLE
32581: LD_INT 1
32583: DEC
32584: ST_TO_ADDR
32585: LD_VAR 0 13
32589: PUSH
32590: FOR_TO
32591: IFFALSE 32953
// begin InitHc ;
32593: CALL_OW 19
// if not f then
32597: LD_VAR 0 12
32601: NOT
32602: IFFALSE 32691
// begin PrepareHuman ( false , i , skill ) ;
32604: LD_INT 0
32606: PPUSH
32607: LD_VAR 0 8
32611: PPUSH
32612: LD_VAR 0 4
32616: PPUSH
32617: CALL_OW 380
// un := CreateHuman ;
32621: LD_ADDR_VAR 0 14
32625: PUSH
32626: CALL_OW 44
32630: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32631: LD_ADDR_VAR 0 7
32635: PUSH
32636: LD_VAR 0 7
32640: PPUSH
32641: LD_INT 1
32643: PPUSH
32644: LD_VAR 0 14
32648: PPUSH
32649: CALL_OW 2
32653: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
32654: LD_VAR 0 14
32658: PPUSH
32659: LD_VAR 0 1
32663: PPUSH
32664: CALL_OW 250
32668: PPUSH
32669: LD_VAR 0 1
32673: PPUSH
32674: CALL_OW 251
32678: PPUSH
32679: LD_INT 10
32681: PPUSH
32682: LD_INT 0
32684: PPUSH
32685: CALL_OW 50
// continue ;
32689: GO 32590
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
32691: LD_VAR 0 12
32695: PUSH
32696: LD_INT 1
32698: ARRAY
32699: PPUSH
32700: CALL_OW 313
32704: PUSH
32705: LD_VAR 0 12
32709: PUSH
32710: LD_INT 1
32712: ARRAY
32713: PPUSH
32714: CALL_OW 266
32718: PUSH
32719: LD_INT 32
32721: PUSH
32722: LD_INT 31
32724: PUSH
32725: EMPTY
32726: LIST
32727: LIST
32728: IN
32729: AND
32730: PUSH
32731: LD_VAR 0 12
32735: PUSH
32736: LD_INT 1
32738: ARRAY
32739: PPUSH
32740: CALL_OW 313
32744: PUSH
32745: LD_INT 6
32747: EQUAL
32748: OR
32749: IFFALSE 32769
// f := Delete ( f , 1 ) ;
32751: LD_ADDR_VAR 0 12
32755: PUSH
32756: LD_VAR 0 12
32760: PPUSH
32761: LD_INT 1
32763: PPUSH
32764: CALL_OW 3
32768: ST_TO_ADDR
// if not f then
32769: LD_VAR 0 12
32773: NOT
32774: IFFALSE 32792
// begin x := x + 2 ;
32776: LD_ADDR_VAR 0 13
32780: PUSH
32781: LD_VAR 0 13
32785: PUSH
32786: LD_INT 2
32788: PLUS
32789: ST_TO_ADDR
// continue ;
32790: GO 32590
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
32792: LD_VAR 0 12
32796: PUSH
32797: LD_INT 1
32799: ARRAY
32800: PPUSH
32801: CALL_OW 266
32805: PUSH
32806: LD_INT 5
32808: EQUAL
32809: IFFALSE 32883
// begin if UnitsInside ( f [ 1 ] ) < 3 then
32811: LD_VAR 0 12
32815: PUSH
32816: LD_INT 1
32818: ARRAY
32819: PPUSH
32820: CALL_OW 313
32824: PUSH
32825: LD_INT 3
32827: LESS
32828: IFFALSE 32864
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
32830: LD_INT 0
32832: PPUSH
32833: LD_INT 5
32835: PUSH
32836: LD_INT 8
32838: PUSH
32839: LD_INT 9
32841: PUSH
32842: EMPTY
32843: LIST
32844: LIST
32845: LIST
32846: PUSH
32847: LD_VAR 0 17
32851: ARRAY
32852: PPUSH
32853: LD_VAR 0 4
32857: PPUSH
32858: CALL_OW 380
32862: GO 32881
// PrepareHuman ( false , i , skill ) ;
32864: LD_INT 0
32866: PPUSH
32867: LD_VAR 0 8
32871: PPUSH
32872: LD_VAR 0 4
32876: PPUSH
32877: CALL_OW 380
// end else
32881: GO 32900
// PrepareHuman ( false , i , skill ) ;
32883: LD_INT 0
32885: PPUSH
32886: LD_VAR 0 8
32890: PPUSH
32891: LD_VAR 0 4
32895: PPUSH
32896: CALL_OW 380
// un := CreateHuman ;
32900: LD_ADDR_VAR 0 14
32904: PUSH
32905: CALL_OW 44
32909: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32910: LD_ADDR_VAR 0 7
32914: PUSH
32915: LD_VAR 0 7
32919: PPUSH
32920: LD_INT 1
32922: PPUSH
32923: LD_VAR 0 14
32927: PPUSH
32928: CALL_OW 2
32932: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
32933: LD_VAR 0 14
32937: PPUSH
32938: LD_VAR 0 12
32942: PUSH
32943: LD_INT 1
32945: ARRAY
32946: PPUSH
32947: CALL_OW 52
// end ;
32951: GO 32590
32953: POP
32954: POP
// end ;
32955: GO 31892
32957: POP
32958: POP
// result := result ^ buildings ;
32959: LD_ADDR_VAR 0 7
32963: PUSH
32964: LD_VAR 0 7
32968: PUSH
32969: LD_VAR 0 18
32973: ADD
32974: ST_TO_ADDR
// end else
32975: GO 33118
// begin for i = 1 to personel do
32977: LD_ADDR_VAR 0 8
32981: PUSH
32982: DOUBLE
32983: LD_INT 1
32985: DEC
32986: ST_TO_ADDR
32987: LD_VAR 0 6
32991: PUSH
32992: FOR_TO
32993: IFFALSE 33116
// begin if i > 4 then
32995: LD_VAR 0 8
32999: PUSH
33000: LD_INT 4
33002: GREATER
33003: IFFALSE 33007
// break ;
33005: GO 33116
// x := personel [ i ] ;
33007: LD_ADDR_VAR 0 13
33011: PUSH
33012: LD_VAR 0 6
33016: PUSH
33017: LD_VAR 0 8
33021: ARRAY
33022: ST_TO_ADDR
// if x = - 1 then
33023: LD_VAR 0 13
33027: PUSH
33028: LD_INT 1
33030: NEG
33031: EQUAL
33032: IFFALSE 33036
// continue ;
33034: GO 32992
// PrepareHuman ( false , i , skill ) ;
33036: LD_INT 0
33038: PPUSH
33039: LD_VAR 0 8
33043: PPUSH
33044: LD_VAR 0 4
33048: PPUSH
33049: CALL_OW 380
// un := CreateHuman ;
33053: LD_ADDR_VAR 0 14
33057: PUSH
33058: CALL_OW 44
33062: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33063: LD_VAR 0 14
33067: PPUSH
33068: LD_VAR 0 1
33072: PPUSH
33073: CALL_OW 250
33077: PPUSH
33078: LD_VAR 0 1
33082: PPUSH
33083: CALL_OW 251
33087: PPUSH
33088: LD_INT 10
33090: PPUSH
33091: LD_INT 0
33093: PPUSH
33094: CALL_OW 50
// result := result ^ un ;
33098: LD_ADDR_VAR 0 7
33102: PUSH
33103: LD_VAR 0 7
33107: PUSH
33108: LD_VAR 0 14
33112: ADD
33113: ST_TO_ADDR
// end ;
33114: GO 32992
33116: POP
33117: POP
// end ; end ;
33118: LD_VAR 0 7
33122: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
33123: LD_INT 0
33125: PPUSH
33126: PPUSH
33127: PPUSH
33128: PPUSH
33129: PPUSH
33130: PPUSH
33131: PPUSH
33132: PPUSH
33133: PPUSH
33134: PPUSH
33135: PPUSH
33136: PPUSH
33137: PPUSH
33138: PPUSH
33139: PPUSH
33140: PPUSH
// result := false ;
33141: LD_ADDR_VAR 0 3
33145: PUSH
33146: LD_INT 0
33148: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
33149: LD_VAR 0 1
33153: NOT
33154: PUSH
33155: LD_VAR 0 1
33159: PPUSH
33160: CALL_OW 266
33164: PUSH
33165: LD_INT 32
33167: PUSH
33168: LD_INT 33
33170: PUSH
33171: EMPTY
33172: LIST
33173: LIST
33174: IN
33175: NOT
33176: OR
33177: IFFALSE 33181
// exit ;
33179: GO 34320
// nat := GetNation ( tower ) ;
33181: LD_ADDR_VAR 0 12
33185: PUSH
33186: LD_VAR 0 1
33190: PPUSH
33191: CALL_OW 248
33195: ST_TO_ADDR
// side := GetSide ( tower ) ;
33196: LD_ADDR_VAR 0 16
33200: PUSH
33201: LD_VAR 0 1
33205: PPUSH
33206: CALL_OW 255
33210: ST_TO_ADDR
// x := GetX ( tower ) ;
33211: LD_ADDR_VAR 0 10
33215: PUSH
33216: LD_VAR 0 1
33220: PPUSH
33221: CALL_OW 250
33225: ST_TO_ADDR
// y := GetY ( tower ) ;
33226: LD_ADDR_VAR 0 11
33230: PUSH
33231: LD_VAR 0 1
33235: PPUSH
33236: CALL_OW 251
33240: ST_TO_ADDR
// if not x or not y then
33241: LD_VAR 0 10
33245: NOT
33246: PUSH
33247: LD_VAR 0 11
33251: NOT
33252: OR
33253: IFFALSE 33257
// exit ;
33255: GO 34320
// weapon := 0 ;
33257: LD_ADDR_VAR 0 18
33261: PUSH
33262: LD_INT 0
33264: ST_TO_ADDR
// fac_list := [ ] ;
33265: LD_ADDR_VAR 0 17
33269: PUSH
33270: EMPTY
33271: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
33272: LD_ADDR_VAR 0 6
33276: PUSH
33277: LD_VAR 0 1
33281: PPUSH
33282: CALL_OW 274
33286: PPUSH
33287: LD_VAR 0 2
33291: PPUSH
33292: LD_INT 0
33294: PPUSH
33295: CALL 30860 0 3
33299: PPUSH
33300: LD_INT 30
33302: PUSH
33303: LD_INT 3
33305: PUSH
33306: EMPTY
33307: LIST
33308: LIST
33309: PPUSH
33310: CALL_OW 72
33314: ST_TO_ADDR
// if not factories then
33315: LD_VAR 0 6
33319: NOT
33320: IFFALSE 33324
// exit ;
33322: GO 34320
// for i in factories do
33324: LD_ADDR_VAR 0 8
33328: PUSH
33329: LD_VAR 0 6
33333: PUSH
33334: FOR_IN
33335: IFFALSE 33360
// fac_list := fac_list union AvailableWeaponList ( i ) ;
33337: LD_ADDR_VAR 0 17
33341: PUSH
33342: LD_VAR 0 17
33346: PUSH
33347: LD_VAR 0 8
33351: PPUSH
33352: CALL_OW 478
33356: UNION
33357: ST_TO_ADDR
33358: GO 33334
33360: POP
33361: POP
// if not fac_list then
33362: LD_VAR 0 17
33366: NOT
33367: IFFALSE 33371
// exit ;
33369: GO 34320
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
33371: LD_ADDR_VAR 0 5
33375: PUSH
33376: LD_INT 4
33378: PUSH
33379: LD_INT 5
33381: PUSH
33382: LD_INT 9
33384: PUSH
33385: LD_INT 10
33387: PUSH
33388: LD_INT 6
33390: PUSH
33391: LD_INT 7
33393: PUSH
33394: LD_INT 11
33396: PUSH
33397: EMPTY
33398: LIST
33399: LIST
33400: LIST
33401: LIST
33402: LIST
33403: LIST
33404: LIST
33405: PUSH
33406: LD_INT 27
33408: PUSH
33409: LD_INT 28
33411: PUSH
33412: LD_INT 26
33414: PUSH
33415: LD_INT 30
33417: PUSH
33418: EMPTY
33419: LIST
33420: LIST
33421: LIST
33422: LIST
33423: PUSH
33424: LD_INT 43
33426: PUSH
33427: LD_INT 44
33429: PUSH
33430: LD_INT 46
33432: PUSH
33433: LD_INT 45
33435: PUSH
33436: LD_INT 47
33438: PUSH
33439: LD_INT 49
33441: PUSH
33442: EMPTY
33443: LIST
33444: LIST
33445: LIST
33446: LIST
33447: LIST
33448: LIST
33449: PUSH
33450: EMPTY
33451: LIST
33452: LIST
33453: LIST
33454: PUSH
33455: LD_VAR 0 12
33459: ARRAY
33460: ST_TO_ADDR
// for i in list do
33461: LD_ADDR_VAR 0 8
33465: PUSH
33466: LD_VAR 0 5
33470: PUSH
33471: FOR_IN
33472: IFFALSE 33505
// if not i in fac_list then
33474: LD_VAR 0 8
33478: PUSH
33479: LD_VAR 0 17
33483: IN
33484: NOT
33485: IFFALSE 33503
// list := list diff i ;
33487: LD_ADDR_VAR 0 5
33491: PUSH
33492: LD_VAR 0 5
33496: PUSH
33497: LD_VAR 0 8
33501: DIFF
33502: ST_TO_ADDR
33503: GO 33471
33505: POP
33506: POP
// if not list then
33507: LD_VAR 0 5
33511: NOT
33512: IFFALSE 33516
// exit ;
33514: GO 34320
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
33516: LD_VAR 0 12
33520: PUSH
33521: LD_INT 3
33523: EQUAL
33524: PUSH
33525: LD_INT 49
33527: PUSH
33528: LD_VAR 0 5
33532: IN
33533: AND
33534: PUSH
33535: LD_INT 31
33537: PPUSH
33538: LD_VAR 0 16
33542: PPUSH
33543: CALL_OW 321
33547: PUSH
33548: LD_INT 2
33550: EQUAL
33551: AND
33552: IFFALSE 33612
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
33554: LD_INT 22
33556: PUSH
33557: LD_VAR 0 16
33561: PUSH
33562: EMPTY
33563: LIST
33564: LIST
33565: PUSH
33566: LD_INT 35
33568: PUSH
33569: LD_INT 49
33571: PUSH
33572: EMPTY
33573: LIST
33574: LIST
33575: PUSH
33576: LD_INT 91
33578: PUSH
33579: LD_VAR 0 1
33583: PUSH
33584: LD_INT 10
33586: PUSH
33587: EMPTY
33588: LIST
33589: LIST
33590: LIST
33591: PUSH
33592: EMPTY
33593: LIST
33594: LIST
33595: LIST
33596: PPUSH
33597: CALL_OW 69
33601: NOT
33602: IFFALSE 33612
// weapon := ru_time_lapser ;
33604: LD_ADDR_VAR 0 18
33608: PUSH
33609: LD_INT 49
33611: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
33612: LD_VAR 0 12
33616: PUSH
33617: LD_INT 1
33619: PUSH
33620: LD_INT 2
33622: PUSH
33623: EMPTY
33624: LIST
33625: LIST
33626: IN
33627: PUSH
33628: LD_INT 11
33630: PUSH
33631: LD_VAR 0 5
33635: IN
33636: PUSH
33637: LD_INT 30
33639: PUSH
33640: LD_VAR 0 5
33644: IN
33645: OR
33646: AND
33647: PUSH
33648: LD_INT 6
33650: PPUSH
33651: LD_VAR 0 16
33655: PPUSH
33656: CALL_OW 321
33660: PUSH
33661: LD_INT 2
33663: EQUAL
33664: AND
33665: IFFALSE 33830
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
33667: LD_INT 22
33669: PUSH
33670: LD_VAR 0 16
33674: PUSH
33675: EMPTY
33676: LIST
33677: LIST
33678: PUSH
33679: LD_INT 2
33681: PUSH
33682: LD_INT 35
33684: PUSH
33685: LD_INT 11
33687: PUSH
33688: EMPTY
33689: LIST
33690: LIST
33691: PUSH
33692: LD_INT 35
33694: PUSH
33695: LD_INT 30
33697: PUSH
33698: EMPTY
33699: LIST
33700: LIST
33701: PUSH
33702: EMPTY
33703: LIST
33704: LIST
33705: LIST
33706: PUSH
33707: LD_INT 91
33709: PUSH
33710: LD_VAR 0 1
33714: PUSH
33715: LD_INT 18
33717: PUSH
33718: EMPTY
33719: LIST
33720: LIST
33721: LIST
33722: PUSH
33723: EMPTY
33724: LIST
33725: LIST
33726: LIST
33727: PPUSH
33728: CALL_OW 69
33732: NOT
33733: PUSH
33734: LD_INT 22
33736: PUSH
33737: LD_VAR 0 16
33741: PUSH
33742: EMPTY
33743: LIST
33744: LIST
33745: PUSH
33746: LD_INT 2
33748: PUSH
33749: LD_INT 30
33751: PUSH
33752: LD_INT 32
33754: PUSH
33755: EMPTY
33756: LIST
33757: LIST
33758: PUSH
33759: LD_INT 30
33761: PUSH
33762: LD_INT 33
33764: PUSH
33765: EMPTY
33766: LIST
33767: LIST
33768: PUSH
33769: EMPTY
33770: LIST
33771: LIST
33772: LIST
33773: PUSH
33774: LD_INT 91
33776: PUSH
33777: LD_VAR 0 1
33781: PUSH
33782: LD_INT 12
33784: PUSH
33785: EMPTY
33786: LIST
33787: LIST
33788: LIST
33789: PUSH
33790: EMPTY
33791: LIST
33792: LIST
33793: LIST
33794: PUSH
33795: EMPTY
33796: LIST
33797: PPUSH
33798: CALL_OW 69
33802: PUSH
33803: LD_INT 2
33805: GREATER
33806: AND
33807: IFFALSE 33830
// weapon := [ us_radar , ar_radar ] [ nat ] ;
33809: LD_ADDR_VAR 0 18
33813: PUSH
33814: LD_INT 11
33816: PUSH
33817: LD_INT 30
33819: PUSH
33820: EMPTY
33821: LIST
33822: LIST
33823: PUSH
33824: LD_VAR 0 12
33828: ARRAY
33829: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
33830: LD_VAR 0 18
33834: NOT
33835: PUSH
33836: LD_INT 40
33838: PPUSH
33839: LD_VAR 0 16
33843: PPUSH
33844: CALL_OW 321
33848: PUSH
33849: LD_INT 2
33851: EQUAL
33852: AND
33853: PUSH
33854: LD_INT 7
33856: PUSH
33857: LD_VAR 0 5
33861: IN
33862: PUSH
33863: LD_INT 28
33865: PUSH
33866: LD_VAR 0 5
33870: IN
33871: OR
33872: PUSH
33873: LD_INT 45
33875: PUSH
33876: LD_VAR 0 5
33880: IN
33881: OR
33882: AND
33883: IFFALSE 34137
// begin hex := GetHexInfo ( x , y ) ;
33885: LD_ADDR_VAR 0 4
33889: PUSH
33890: LD_VAR 0 10
33894: PPUSH
33895: LD_VAR 0 11
33899: PPUSH
33900: CALL_OW 546
33904: ST_TO_ADDR
// if hex [ 1 ] then
33905: LD_VAR 0 4
33909: PUSH
33910: LD_INT 1
33912: ARRAY
33913: IFFALSE 33917
// exit ;
33915: GO 34320
// height := hex [ 2 ] ;
33917: LD_ADDR_VAR 0 15
33921: PUSH
33922: LD_VAR 0 4
33926: PUSH
33927: LD_INT 2
33929: ARRAY
33930: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
33931: LD_ADDR_VAR 0 14
33935: PUSH
33936: LD_INT 0
33938: PUSH
33939: LD_INT 2
33941: PUSH
33942: LD_INT 3
33944: PUSH
33945: LD_INT 5
33947: PUSH
33948: EMPTY
33949: LIST
33950: LIST
33951: LIST
33952: LIST
33953: ST_TO_ADDR
// for i in tmp do
33954: LD_ADDR_VAR 0 8
33958: PUSH
33959: LD_VAR 0 14
33963: PUSH
33964: FOR_IN
33965: IFFALSE 34135
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
33967: LD_ADDR_VAR 0 9
33971: PUSH
33972: LD_VAR 0 10
33976: PPUSH
33977: LD_VAR 0 8
33981: PPUSH
33982: LD_INT 5
33984: PPUSH
33985: CALL_OW 272
33989: PUSH
33990: LD_VAR 0 11
33994: PPUSH
33995: LD_VAR 0 8
33999: PPUSH
34000: LD_INT 5
34002: PPUSH
34003: CALL_OW 273
34007: PUSH
34008: EMPTY
34009: LIST
34010: LIST
34011: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
34012: LD_VAR 0 9
34016: PUSH
34017: LD_INT 1
34019: ARRAY
34020: PPUSH
34021: LD_VAR 0 9
34025: PUSH
34026: LD_INT 2
34028: ARRAY
34029: PPUSH
34030: CALL_OW 488
34034: IFFALSE 34133
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
34036: LD_ADDR_VAR 0 4
34040: PUSH
34041: LD_VAR 0 9
34045: PUSH
34046: LD_INT 1
34048: ARRAY
34049: PPUSH
34050: LD_VAR 0 9
34054: PUSH
34055: LD_INT 2
34057: ARRAY
34058: PPUSH
34059: CALL_OW 546
34063: ST_TO_ADDR
// if hex [ 1 ] then
34064: LD_VAR 0 4
34068: PUSH
34069: LD_INT 1
34071: ARRAY
34072: IFFALSE 34076
// continue ;
34074: GO 33964
// h := hex [ 2 ] ;
34076: LD_ADDR_VAR 0 13
34080: PUSH
34081: LD_VAR 0 4
34085: PUSH
34086: LD_INT 2
34088: ARRAY
34089: ST_TO_ADDR
// if h + 7 < height then
34090: LD_VAR 0 13
34094: PUSH
34095: LD_INT 7
34097: PLUS
34098: PUSH
34099: LD_VAR 0 15
34103: LESS
34104: IFFALSE 34133
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
34106: LD_ADDR_VAR 0 18
34110: PUSH
34111: LD_INT 7
34113: PUSH
34114: LD_INT 28
34116: PUSH
34117: LD_INT 45
34119: PUSH
34120: EMPTY
34121: LIST
34122: LIST
34123: LIST
34124: PUSH
34125: LD_VAR 0 12
34129: ARRAY
34130: ST_TO_ADDR
// break ;
34131: GO 34135
// end ; end ; end ;
34133: GO 33964
34135: POP
34136: POP
// end ; if not weapon then
34137: LD_VAR 0 18
34141: NOT
34142: IFFALSE 34202
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
34144: LD_ADDR_VAR 0 5
34148: PUSH
34149: LD_VAR 0 5
34153: PUSH
34154: LD_INT 11
34156: PUSH
34157: LD_INT 30
34159: PUSH
34160: LD_INT 49
34162: PUSH
34163: EMPTY
34164: LIST
34165: LIST
34166: LIST
34167: DIFF
34168: ST_TO_ADDR
// if not list then
34169: LD_VAR 0 5
34173: NOT
34174: IFFALSE 34178
// exit ;
34176: GO 34320
// weapon := list [ rand ( 1 , list ) ] ;
34178: LD_ADDR_VAR 0 18
34182: PUSH
34183: LD_VAR 0 5
34187: PUSH
34188: LD_INT 1
34190: PPUSH
34191: LD_VAR 0 5
34195: PPUSH
34196: CALL_OW 12
34200: ARRAY
34201: ST_TO_ADDR
// end ; if weapon then
34202: LD_VAR 0 18
34206: IFFALSE 34320
// begin tmp := CostOfWeapon ( weapon ) ;
34208: LD_ADDR_VAR 0 14
34212: PUSH
34213: LD_VAR 0 18
34217: PPUSH
34218: CALL_OW 451
34222: ST_TO_ADDR
// j := GetBase ( tower ) ;
34223: LD_ADDR_VAR 0 9
34227: PUSH
34228: LD_VAR 0 1
34232: PPUSH
34233: CALL_OW 274
34237: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
34238: LD_VAR 0 9
34242: PPUSH
34243: LD_INT 1
34245: PPUSH
34246: CALL_OW 275
34250: PUSH
34251: LD_VAR 0 14
34255: PUSH
34256: LD_INT 1
34258: ARRAY
34259: GREATEREQUAL
34260: PUSH
34261: LD_VAR 0 9
34265: PPUSH
34266: LD_INT 2
34268: PPUSH
34269: CALL_OW 275
34273: PUSH
34274: LD_VAR 0 14
34278: PUSH
34279: LD_INT 2
34281: ARRAY
34282: GREATEREQUAL
34283: AND
34284: PUSH
34285: LD_VAR 0 9
34289: PPUSH
34290: LD_INT 3
34292: PPUSH
34293: CALL_OW 275
34297: PUSH
34298: LD_VAR 0 14
34302: PUSH
34303: LD_INT 3
34305: ARRAY
34306: GREATEREQUAL
34307: AND
34308: IFFALSE 34320
// result := weapon ;
34310: LD_ADDR_VAR 0 3
34314: PUSH
34315: LD_VAR 0 18
34319: ST_TO_ADDR
// end ; end ;
34320: LD_VAR 0 3
34324: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
34325: LD_INT 0
34327: PPUSH
34328: PPUSH
// result := true ;
34329: LD_ADDR_VAR 0 3
34333: PUSH
34334: LD_INT 1
34336: ST_TO_ADDR
// if array1 = array2 then
34337: LD_VAR 0 1
34341: PUSH
34342: LD_VAR 0 2
34346: EQUAL
34347: IFFALSE 34407
// begin for i = 1 to array1 do
34349: LD_ADDR_VAR 0 4
34353: PUSH
34354: DOUBLE
34355: LD_INT 1
34357: DEC
34358: ST_TO_ADDR
34359: LD_VAR 0 1
34363: PUSH
34364: FOR_TO
34365: IFFALSE 34403
// if array1 [ i ] <> array2 [ i ] then
34367: LD_VAR 0 1
34371: PUSH
34372: LD_VAR 0 4
34376: ARRAY
34377: PUSH
34378: LD_VAR 0 2
34382: PUSH
34383: LD_VAR 0 4
34387: ARRAY
34388: NONEQUAL
34389: IFFALSE 34401
// begin result := false ;
34391: LD_ADDR_VAR 0 3
34395: PUSH
34396: LD_INT 0
34398: ST_TO_ADDR
// break ;
34399: GO 34403
// end ;
34401: GO 34364
34403: POP
34404: POP
// end else
34405: GO 34415
// result := false ;
34407: LD_ADDR_VAR 0 3
34411: PUSH
34412: LD_INT 0
34414: ST_TO_ADDR
// end ;
34415: LD_VAR 0 3
34419: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
34420: LD_INT 0
34422: PPUSH
34423: PPUSH
// if not array1 or not array2 then
34424: LD_VAR 0 1
34428: NOT
34429: PUSH
34430: LD_VAR 0 2
34434: NOT
34435: OR
34436: IFFALSE 34440
// exit ;
34438: GO 34504
// result := true ;
34440: LD_ADDR_VAR 0 3
34444: PUSH
34445: LD_INT 1
34447: ST_TO_ADDR
// for i = 1 to array1 do
34448: LD_ADDR_VAR 0 4
34452: PUSH
34453: DOUBLE
34454: LD_INT 1
34456: DEC
34457: ST_TO_ADDR
34458: LD_VAR 0 1
34462: PUSH
34463: FOR_TO
34464: IFFALSE 34502
// if array1 [ i ] <> array2 [ i ] then
34466: LD_VAR 0 1
34470: PUSH
34471: LD_VAR 0 4
34475: ARRAY
34476: PUSH
34477: LD_VAR 0 2
34481: PUSH
34482: LD_VAR 0 4
34486: ARRAY
34487: NONEQUAL
34488: IFFALSE 34500
// begin result := false ;
34490: LD_ADDR_VAR 0 3
34494: PUSH
34495: LD_INT 0
34497: ST_TO_ADDR
// break ;
34498: GO 34502
// end ;
34500: GO 34463
34502: POP
34503: POP
// end ;
34504: LD_VAR 0 3
34508: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
34509: LD_INT 0
34511: PPUSH
34512: PPUSH
34513: PPUSH
// pom := GetBase ( fac ) ;
34514: LD_ADDR_VAR 0 5
34518: PUSH
34519: LD_VAR 0 1
34523: PPUSH
34524: CALL_OW 274
34528: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
34529: LD_ADDR_VAR 0 4
34533: PUSH
34534: LD_VAR 0 2
34538: PUSH
34539: LD_INT 1
34541: ARRAY
34542: PPUSH
34543: LD_VAR 0 2
34547: PUSH
34548: LD_INT 2
34550: ARRAY
34551: PPUSH
34552: LD_VAR 0 2
34556: PUSH
34557: LD_INT 3
34559: ARRAY
34560: PPUSH
34561: LD_VAR 0 2
34565: PUSH
34566: LD_INT 4
34568: ARRAY
34569: PPUSH
34570: CALL_OW 449
34574: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34575: LD_ADDR_VAR 0 3
34579: PUSH
34580: LD_VAR 0 5
34584: PPUSH
34585: LD_INT 1
34587: PPUSH
34588: CALL_OW 275
34592: PUSH
34593: LD_VAR 0 4
34597: PUSH
34598: LD_INT 1
34600: ARRAY
34601: GREATEREQUAL
34602: PUSH
34603: LD_VAR 0 5
34607: PPUSH
34608: LD_INT 2
34610: PPUSH
34611: CALL_OW 275
34615: PUSH
34616: LD_VAR 0 4
34620: PUSH
34621: LD_INT 2
34623: ARRAY
34624: GREATEREQUAL
34625: AND
34626: PUSH
34627: LD_VAR 0 5
34631: PPUSH
34632: LD_INT 3
34634: PPUSH
34635: CALL_OW 275
34639: PUSH
34640: LD_VAR 0 4
34644: PUSH
34645: LD_INT 3
34647: ARRAY
34648: GREATEREQUAL
34649: AND
34650: ST_TO_ADDR
// end ;
34651: LD_VAR 0 3
34655: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
34656: LD_INT 0
34658: PPUSH
34659: PPUSH
34660: PPUSH
34661: PPUSH
// pom := GetBase ( building ) ;
34662: LD_ADDR_VAR 0 3
34666: PUSH
34667: LD_VAR 0 1
34671: PPUSH
34672: CALL_OW 274
34676: ST_TO_ADDR
// if not pom then
34677: LD_VAR 0 3
34681: NOT
34682: IFFALSE 34686
// exit ;
34684: GO 34856
// btype := GetBType ( building ) ;
34686: LD_ADDR_VAR 0 5
34690: PUSH
34691: LD_VAR 0 1
34695: PPUSH
34696: CALL_OW 266
34700: ST_TO_ADDR
// if btype = b_armoury then
34701: LD_VAR 0 5
34705: PUSH
34706: LD_INT 4
34708: EQUAL
34709: IFFALSE 34719
// btype := b_barracks ;
34711: LD_ADDR_VAR 0 5
34715: PUSH
34716: LD_INT 5
34718: ST_TO_ADDR
// if btype = b_depot then
34719: LD_VAR 0 5
34723: PUSH
34724: LD_INT 0
34726: EQUAL
34727: IFFALSE 34737
// btype := b_warehouse ;
34729: LD_ADDR_VAR 0 5
34733: PUSH
34734: LD_INT 1
34736: ST_TO_ADDR
// if btype = b_workshop then
34737: LD_VAR 0 5
34741: PUSH
34742: LD_INT 2
34744: EQUAL
34745: IFFALSE 34755
// btype := b_factory ;
34747: LD_ADDR_VAR 0 5
34751: PUSH
34752: LD_INT 3
34754: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
34755: LD_ADDR_VAR 0 4
34759: PUSH
34760: LD_VAR 0 5
34764: PPUSH
34765: LD_VAR 0 1
34769: PPUSH
34770: CALL_OW 248
34774: PPUSH
34775: CALL_OW 450
34779: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34780: LD_ADDR_VAR 0 2
34784: PUSH
34785: LD_VAR 0 3
34789: PPUSH
34790: LD_INT 1
34792: PPUSH
34793: CALL_OW 275
34797: PUSH
34798: LD_VAR 0 4
34802: PUSH
34803: LD_INT 1
34805: ARRAY
34806: GREATEREQUAL
34807: PUSH
34808: LD_VAR 0 3
34812: PPUSH
34813: LD_INT 2
34815: PPUSH
34816: CALL_OW 275
34820: PUSH
34821: LD_VAR 0 4
34825: PUSH
34826: LD_INT 2
34828: ARRAY
34829: GREATEREQUAL
34830: AND
34831: PUSH
34832: LD_VAR 0 3
34836: PPUSH
34837: LD_INT 3
34839: PPUSH
34840: CALL_OW 275
34844: PUSH
34845: LD_VAR 0 4
34849: PUSH
34850: LD_INT 3
34852: ARRAY
34853: GREATEREQUAL
34854: AND
34855: ST_TO_ADDR
// end ;
34856: LD_VAR 0 2
34860: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
34861: LD_INT 0
34863: PPUSH
34864: PPUSH
34865: PPUSH
// pom := GetBase ( building ) ;
34866: LD_ADDR_VAR 0 4
34870: PUSH
34871: LD_VAR 0 1
34875: PPUSH
34876: CALL_OW 274
34880: ST_TO_ADDR
// if not pom then
34881: LD_VAR 0 4
34885: NOT
34886: IFFALSE 34890
// exit ;
34888: GO 34991
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
34890: LD_ADDR_VAR 0 5
34894: PUSH
34895: LD_VAR 0 2
34899: PPUSH
34900: LD_VAR 0 1
34904: PPUSH
34905: CALL_OW 248
34909: PPUSH
34910: CALL_OW 450
34914: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34915: LD_ADDR_VAR 0 3
34919: PUSH
34920: LD_VAR 0 4
34924: PPUSH
34925: LD_INT 1
34927: PPUSH
34928: CALL_OW 275
34932: PUSH
34933: LD_VAR 0 5
34937: PUSH
34938: LD_INT 1
34940: ARRAY
34941: GREATEREQUAL
34942: PUSH
34943: LD_VAR 0 4
34947: PPUSH
34948: LD_INT 2
34950: PPUSH
34951: CALL_OW 275
34955: PUSH
34956: LD_VAR 0 5
34960: PUSH
34961: LD_INT 2
34963: ARRAY
34964: GREATEREQUAL
34965: AND
34966: PUSH
34967: LD_VAR 0 4
34971: PPUSH
34972: LD_INT 3
34974: PPUSH
34975: CALL_OW 275
34979: PUSH
34980: LD_VAR 0 5
34984: PUSH
34985: LD_INT 3
34987: ARRAY
34988: GREATEREQUAL
34989: AND
34990: ST_TO_ADDR
// end ;
34991: LD_VAR 0 3
34995: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
34996: LD_INT 0
34998: PPUSH
34999: PPUSH
35000: PPUSH
35001: PPUSH
35002: PPUSH
35003: PPUSH
35004: PPUSH
35005: PPUSH
35006: PPUSH
35007: PPUSH
35008: PPUSH
// result := false ;
35009: LD_ADDR_VAR 0 8
35013: PUSH
35014: LD_INT 0
35016: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
35017: LD_VAR 0 5
35021: NOT
35022: PUSH
35023: LD_VAR 0 1
35027: NOT
35028: OR
35029: PUSH
35030: LD_VAR 0 2
35034: NOT
35035: OR
35036: PUSH
35037: LD_VAR 0 3
35041: NOT
35042: OR
35043: IFFALSE 35047
// exit ;
35045: GO 35861
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
35047: LD_ADDR_VAR 0 14
35051: PUSH
35052: LD_VAR 0 1
35056: PPUSH
35057: LD_VAR 0 2
35061: PPUSH
35062: LD_VAR 0 3
35066: PPUSH
35067: LD_VAR 0 4
35071: PPUSH
35072: LD_VAR 0 5
35076: PUSH
35077: LD_INT 1
35079: ARRAY
35080: PPUSH
35081: CALL_OW 248
35085: PPUSH
35086: LD_INT 0
35088: PPUSH
35089: CALL 36698 0 6
35093: ST_TO_ADDR
// if not hexes then
35094: LD_VAR 0 14
35098: NOT
35099: IFFALSE 35103
// exit ;
35101: GO 35861
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35103: LD_ADDR_VAR 0 17
35107: PUSH
35108: LD_VAR 0 5
35112: PPUSH
35113: LD_INT 22
35115: PUSH
35116: LD_VAR 0 13
35120: PPUSH
35121: CALL_OW 255
35125: PUSH
35126: EMPTY
35127: LIST
35128: LIST
35129: PUSH
35130: LD_INT 2
35132: PUSH
35133: LD_INT 30
35135: PUSH
35136: LD_INT 0
35138: PUSH
35139: EMPTY
35140: LIST
35141: LIST
35142: PUSH
35143: LD_INT 30
35145: PUSH
35146: LD_INT 1
35148: PUSH
35149: EMPTY
35150: LIST
35151: LIST
35152: PUSH
35153: EMPTY
35154: LIST
35155: LIST
35156: LIST
35157: PUSH
35158: EMPTY
35159: LIST
35160: LIST
35161: PPUSH
35162: CALL_OW 72
35166: ST_TO_ADDR
// for i = 1 to hexes do
35167: LD_ADDR_VAR 0 9
35171: PUSH
35172: DOUBLE
35173: LD_INT 1
35175: DEC
35176: ST_TO_ADDR
35177: LD_VAR 0 14
35181: PUSH
35182: FOR_TO
35183: IFFALSE 35859
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35185: LD_ADDR_VAR 0 13
35189: PUSH
35190: LD_VAR 0 14
35194: PUSH
35195: LD_VAR 0 9
35199: ARRAY
35200: PUSH
35201: LD_INT 1
35203: ARRAY
35204: PPUSH
35205: LD_VAR 0 14
35209: PUSH
35210: LD_VAR 0 9
35214: ARRAY
35215: PUSH
35216: LD_INT 2
35218: ARRAY
35219: PPUSH
35220: CALL_OW 428
35224: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
35225: LD_VAR 0 14
35229: PUSH
35230: LD_VAR 0 9
35234: ARRAY
35235: PUSH
35236: LD_INT 1
35238: ARRAY
35239: PPUSH
35240: LD_VAR 0 14
35244: PUSH
35245: LD_VAR 0 9
35249: ARRAY
35250: PUSH
35251: LD_INT 2
35253: ARRAY
35254: PPUSH
35255: CALL_OW 351
35259: PUSH
35260: LD_VAR 0 14
35264: PUSH
35265: LD_VAR 0 9
35269: ARRAY
35270: PUSH
35271: LD_INT 1
35273: ARRAY
35274: PPUSH
35275: LD_VAR 0 14
35279: PUSH
35280: LD_VAR 0 9
35284: ARRAY
35285: PUSH
35286: LD_INT 2
35288: ARRAY
35289: PPUSH
35290: CALL_OW 488
35294: NOT
35295: OR
35296: PUSH
35297: LD_VAR 0 13
35301: PPUSH
35302: CALL_OW 247
35306: PUSH
35307: LD_INT 3
35309: EQUAL
35310: OR
35311: IFFALSE 35317
// exit ;
35313: POP
35314: POP
35315: GO 35861
// if not tmp then
35317: LD_VAR 0 13
35321: NOT
35322: IFFALSE 35326
// continue ;
35324: GO 35182
// result := true ;
35326: LD_ADDR_VAR 0 8
35330: PUSH
35331: LD_INT 1
35333: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
35334: LD_VAR 0 6
35338: PUSH
35339: LD_VAR 0 13
35343: PPUSH
35344: CALL_OW 247
35348: PUSH
35349: LD_INT 2
35351: EQUAL
35352: AND
35353: PUSH
35354: LD_VAR 0 13
35358: PPUSH
35359: CALL_OW 263
35363: PUSH
35364: LD_INT 1
35366: EQUAL
35367: AND
35368: IFFALSE 35532
// begin if IsDrivenBy ( tmp ) then
35370: LD_VAR 0 13
35374: PPUSH
35375: CALL_OW 311
35379: IFFALSE 35383
// continue ;
35381: GO 35182
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
35383: LD_VAR 0 6
35387: PPUSH
35388: LD_INT 3
35390: PUSH
35391: LD_INT 60
35393: PUSH
35394: EMPTY
35395: LIST
35396: PUSH
35397: EMPTY
35398: LIST
35399: LIST
35400: PUSH
35401: LD_INT 3
35403: PUSH
35404: LD_INT 55
35406: PUSH
35407: EMPTY
35408: LIST
35409: PUSH
35410: EMPTY
35411: LIST
35412: LIST
35413: PUSH
35414: EMPTY
35415: LIST
35416: LIST
35417: PPUSH
35418: CALL_OW 72
35422: IFFALSE 35530
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
35424: LD_ADDR_VAR 0 18
35428: PUSH
35429: LD_VAR 0 6
35433: PPUSH
35434: LD_INT 3
35436: PUSH
35437: LD_INT 60
35439: PUSH
35440: EMPTY
35441: LIST
35442: PUSH
35443: EMPTY
35444: LIST
35445: LIST
35446: PUSH
35447: LD_INT 3
35449: PUSH
35450: LD_INT 55
35452: PUSH
35453: EMPTY
35454: LIST
35455: PUSH
35456: EMPTY
35457: LIST
35458: LIST
35459: PUSH
35460: EMPTY
35461: LIST
35462: LIST
35463: PPUSH
35464: CALL_OW 72
35468: PUSH
35469: LD_INT 1
35471: ARRAY
35472: ST_TO_ADDR
// if IsInUnit ( driver ) then
35473: LD_VAR 0 18
35477: PPUSH
35478: CALL_OW 310
35482: IFFALSE 35493
// ComExit ( driver ) ;
35484: LD_VAR 0 18
35488: PPUSH
35489: CALL 59882 0 1
// AddComEnterUnit ( driver , tmp ) ;
35493: LD_VAR 0 18
35497: PPUSH
35498: LD_VAR 0 13
35502: PPUSH
35503: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
35507: LD_VAR 0 18
35511: PPUSH
35512: LD_VAR 0 7
35516: PPUSH
35517: CALL_OW 173
// AddComExitVehicle ( driver ) ;
35521: LD_VAR 0 18
35525: PPUSH
35526: CALL_OW 181
// end ; continue ;
35530: GO 35182
// end ; if not cleaners or not tmp in cleaners then
35532: LD_VAR 0 6
35536: NOT
35537: PUSH
35538: LD_VAR 0 13
35542: PUSH
35543: LD_VAR 0 6
35547: IN
35548: NOT
35549: OR
35550: IFFALSE 35857
// begin if dep then
35552: LD_VAR 0 17
35556: IFFALSE 35692
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
35558: LD_ADDR_VAR 0 16
35562: PUSH
35563: LD_VAR 0 17
35567: PUSH
35568: LD_INT 1
35570: ARRAY
35571: PPUSH
35572: CALL_OW 250
35576: PPUSH
35577: LD_VAR 0 17
35581: PUSH
35582: LD_INT 1
35584: ARRAY
35585: PPUSH
35586: CALL_OW 254
35590: PPUSH
35591: LD_INT 5
35593: PPUSH
35594: CALL_OW 272
35598: PUSH
35599: LD_VAR 0 17
35603: PUSH
35604: LD_INT 1
35606: ARRAY
35607: PPUSH
35608: CALL_OW 251
35612: PPUSH
35613: LD_VAR 0 17
35617: PUSH
35618: LD_INT 1
35620: ARRAY
35621: PPUSH
35622: CALL_OW 254
35626: PPUSH
35627: LD_INT 5
35629: PPUSH
35630: CALL_OW 273
35634: PUSH
35635: EMPTY
35636: LIST
35637: LIST
35638: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
35639: LD_VAR 0 16
35643: PUSH
35644: LD_INT 1
35646: ARRAY
35647: PPUSH
35648: LD_VAR 0 16
35652: PUSH
35653: LD_INT 2
35655: ARRAY
35656: PPUSH
35657: CALL_OW 488
35661: IFFALSE 35692
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
35663: LD_VAR 0 13
35667: PPUSH
35668: LD_VAR 0 16
35672: PUSH
35673: LD_INT 1
35675: ARRAY
35676: PPUSH
35677: LD_VAR 0 16
35681: PUSH
35682: LD_INT 2
35684: ARRAY
35685: PPUSH
35686: CALL_OW 111
// continue ;
35690: GO 35182
// end ; end ; r := GetDir ( tmp ) ;
35692: LD_ADDR_VAR 0 15
35696: PUSH
35697: LD_VAR 0 13
35701: PPUSH
35702: CALL_OW 254
35706: ST_TO_ADDR
// if r = 5 then
35707: LD_VAR 0 15
35711: PUSH
35712: LD_INT 5
35714: EQUAL
35715: IFFALSE 35725
// r := 0 ;
35717: LD_ADDR_VAR 0 15
35721: PUSH
35722: LD_INT 0
35724: ST_TO_ADDR
// for j = r to 5 do
35725: LD_ADDR_VAR 0 10
35729: PUSH
35730: DOUBLE
35731: LD_VAR 0 15
35735: DEC
35736: ST_TO_ADDR
35737: LD_INT 5
35739: PUSH
35740: FOR_TO
35741: IFFALSE 35855
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
35743: LD_ADDR_VAR 0 11
35747: PUSH
35748: LD_VAR 0 13
35752: PPUSH
35753: CALL_OW 250
35757: PPUSH
35758: LD_VAR 0 10
35762: PPUSH
35763: LD_INT 2
35765: PPUSH
35766: CALL_OW 272
35770: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
35771: LD_ADDR_VAR 0 12
35775: PUSH
35776: LD_VAR 0 13
35780: PPUSH
35781: CALL_OW 251
35785: PPUSH
35786: LD_VAR 0 10
35790: PPUSH
35791: LD_INT 2
35793: PPUSH
35794: CALL_OW 273
35798: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
35799: LD_VAR 0 11
35803: PPUSH
35804: LD_VAR 0 12
35808: PPUSH
35809: CALL_OW 488
35813: PUSH
35814: LD_VAR 0 11
35818: PPUSH
35819: LD_VAR 0 12
35823: PPUSH
35824: CALL_OW 428
35828: NOT
35829: AND
35830: IFFALSE 35853
// begin ComMoveXY ( tmp , _x , _y ) ;
35832: LD_VAR 0 13
35836: PPUSH
35837: LD_VAR 0 11
35841: PPUSH
35842: LD_VAR 0 12
35846: PPUSH
35847: CALL_OW 111
// break ;
35851: GO 35855
// end ; end ;
35853: GO 35740
35855: POP
35856: POP
// end ; end ;
35857: GO 35182
35859: POP
35860: POP
// end ;
35861: LD_VAR 0 8
35865: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
35866: LD_INT 0
35868: PPUSH
35869: PPUSH
35870: PPUSH
35871: PPUSH
35872: PPUSH
35873: PPUSH
35874: PPUSH
35875: PPUSH
35876: PPUSH
35877: PPUSH
// result := false ;
35878: LD_ADDR_VAR 0 6
35882: PUSH
35883: LD_INT 0
35885: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
35886: LD_VAR 0 1
35890: NOT
35891: PUSH
35892: LD_VAR 0 1
35896: PPUSH
35897: CALL_OW 266
35901: PUSH
35902: LD_INT 0
35904: PUSH
35905: LD_INT 1
35907: PUSH
35908: EMPTY
35909: LIST
35910: LIST
35911: IN
35912: NOT
35913: OR
35914: PUSH
35915: LD_VAR 0 2
35919: NOT
35920: OR
35921: PUSH
35922: LD_VAR 0 5
35926: PUSH
35927: LD_INT 0
35929: PUSH
35930: LD_INT 1
35932: PUSH
35933: LD_INT 2
35935: PUSH
35936: LD_INT 3
35938: PUSH
35939: LD_INT 4
35941: PUSH
35942: LD_INT 5
35944: PUSH
35945: EMPTY
35946: LIST
35947: LIST
35948: LIST
35949: LIST
35950: LIST
35951: LIST
35952: IN
35953: NOT
35954: OR
35955: PUSH
35956: LD_VAR 0 3
35960: PPUSH
35961: LD_VAR 0 4
35965: PPUSH
35966: CALL_OW 488
35970: NOT
35971: OR
35972: IFFALSE 35976
// exit ;
35974: GO 36693
// pom := GetBase ( depot ) ;
35976: LD_ADDR_VAR 0 10
35980: PUSH
35981: LD_VAR 0 1
35985: PPUSH
35986: CALL_OW 274
35990: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
35991: LD_ADDR_VAR 0 11
35995: PUSH
35996: LD_VAR 0 2
36000: PPUSH
36001: LD_VAR 0 1
36005: PPUSH
36006: CALL_OW 248
36010: PPUSH
36011: CALL_OW 450
36015: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
36016: LD_VAR 0 10
36020: PPUSH
36021: LD_INT 1
36023: PPUSH
36024: CALL_OW 275
36028: PUSH
36029: LD_VAR 0 11
36033: PUSH
36034: LD_INT 1
36036: ARRAY
36037: GREATEREQUAL
36038: PUSH
36039: LD_VAR 0 10
36043: PPUSH
36044: LD_INT 2
36046: PPUSH
36047: CALL_OW 275
36051: PUSH
36052: LD_VAR 0 11
36056: PUSH
36057: LD_INT 2
36059: ARRAY
36060: GREATEREQUAL
36061: AND
36062: PUSH
36063: LD_VAR 0 10
36067: PPUSH
36068: LD_INT 3
36070: PPUSH
36071: CALL_OW 275
36075: PUSH
36076: LD_VAR 0 11
36080: PUSH
36081: LD_INT 3
36083: ARRAY
36084: GREATEREQUAL
36085: AND
36086: NOT
36087: IFFALSE 36091
// exit ;
36089: GO 36693
// if GetBType ( depot ) = b_depot then
36091: LD_VAR 0 1
36095: PPUSH
36096: CALL_OW 266
36100: PUSH
36101: LD_INT 0
36103: EQUAL
36104: IFFALSE 36116
// dist := 28 else
36106: LD_ADDR_VAR 0 14
36110: PUSH
36111: LD_INT 28
36113: ST_TO_ADDR
36114: GO 36124
// dist := 36 ;
36116: LD_ADDR_VAR 0 14
36120: PUSH
36121: LD_INT 36
36123: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
36124: LD_VAR 0 1
36128: PPUSH
36129: LD_VAR 0 3
36133: PPUSH
36134: LD_VAR 0 4
36138: PPUSH
36139: CALL_OW 297
36143: PUSH
36144: LD_VAR 0 14
36148: GREATER
36149: IFFALSE 36153
// exit ;
36151: GO 36693
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
36153: LD_ADDR_VAR 0 12
36157: PUSH
36158: LD_VAR 0 2
36162: PPUSH
36163: LD_VAR 0 3
36167: PPUSH
36168: LD_VAR 0 4
36172: PPUSH
36173: LD_VAR 0 5
36177: PPUSH
36178: LD_VAR 0 1
36182: PPUSH
36183: CALL_OW 248
36187: PPUSH
36188: LD_INT 0
36190: PPUSH
36191: CALL 36698 0 6
36195: ST_TO_ADDR
// if not hexes then
36196: LD_VAR 0 12
36200: NOT
36201: IFFALSE 36205
// exit ;
36203: GO 36693
// hex := GetHexInfo ( x , y ) ;
36205: LD_ADDR_VAR 0 15
36209: PUSH
36210: LD_VAR 0 3
36214: PPUSH
36215: LD_VAR 0 4
36219: PPUSH
36220: CALL_OW 546
36224: ST_TO_ADDR
// if hex [ 1 ] then
36225: LD_VAR 0 15
36229: PUSH
36230: LD_INT 1
36232: ARRAY
36233: IFFALSE 36237
// exit ;
36235: GO 36693
// height := hex [ 2 ] ;
36237: LD_ADDR_VAR 0 13
36241: PUSH
36242: LD_VAR 0 15
36246: PUSH
36247: LD_INT 2
36249: ARRAY
36250: ST_TO_ADDR
// for i = 1 to hexes do
36251: LD_ADDR_VAR 0 7
36255: PUSH
36256: DOUBLE
36257: LD_INT 1
36259: DEC
36260: ST_TO_ADDR
36261: LD_VAR 0 12
36265: PUSH
36266: FOR_TO
36267: IFFALSE 36597
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
36269: LD_VAR 0 12
36273: PUSH
36274: LD_VAR 0 7
36278: ARRAY
36279: PUSH
36280: LD_INT 1
36282: ARRAY
36283: PPUSH
36284: LD_VAR 0 12
36288: PUSH
36289: LD_VAR 0 7
36293: ARRAY
36294: PUSH
36295: LD_INT 2
36297: ARRAY
36298: PPUSH
36299: CALL_OW 488
36303: NOT
36304: PUSH
36305: LD_VAR 0 12
36309: PUSH
36310: LD_VAR 0 7
36314: ARRAY
36315: PUSH
36316: LD_INT 1
36318: ARRAY
36319: PPUSH
36320: LD_VAR 0 12
36324: PUSH
36325: LD_VAR 0 7
36329: ARRAY
36330: PUSH
36331: LD_INT 2
36333: ARRAY
36334: PPUSH
36335: CALL_OW 428
36339: PUSH
36340: LD_INT 0
36342: GREATER
36343: OR
36344: PUSH
36345: LD_VAR 0 12
36349: PUSH
36350: LD_VAR 0 7
36354: ARRAY
36355: PUSH
36356: LD_INT 1
36358: ARRAY
36359: PPUSH
36360: LD_VAR 0 12
36364: PUSH
36365: LD_VAR 0 7
36369: ARRAY
36370: PUSH
36371: LD_INT 2
36373: ARRAY
36374: PPUSH
36375: CALL_OW 351
36379: OR
36380: IFFALSE 36386
// exit ;
36382: POP
36383: POP
36384: GO 36693
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36386: LD_ADDR_VAR 0 8
36390: PUSH
36391: LD_VAR 0 12
36395: PUSH
36396: LD_VAR 0 7
36400: ARRAY
36401: PUSH
36402: LD_INT 1
36404: ARRAY
36405: PPUSH
36406: LD_VAR 0 12
36410: PUSH
36411: LD_VAR 0 7
36415: ARRAY
36416: PUSH
36417: LD_INT 2
36419: ARRAY
36420: PPUSH
36421: CALL_OW 546
36425: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
36426: LD_VAR 0 8
36430: PUSH
36431: LD_INT 1
36433: ARRAY
36434: PUSH
36435: LD_VAR 0 8
36439: PUSH
36440: LD_INT 2
36442: ARRAY
36443: PUSH
36444: LD_VAR 0 13
36448: PUSH
36449: LD_INT 2
36451: PLUS
36452: GREATER
36453: OR
36454: PUSH
36455: LD_VAR 0 8
36459: PUSH
36460: LD_INT 2
36462: ARRAY
36463: PUSH
36464: LD_VAR 0 13
36468: PUSH
36469: LD_INT 2
36471: MINUS
36472: LESS
36473: OR
36474: PUSH
36475: LD_VAR 0 8
36479: PUSH
36480: LD_INT 3
36482: ARRAY
36483: PUSH
36484: LD_INT 0
36486: PUSH
36487: LD_INT 8
36489: PUSH
36490: LD_INT 9
36492: PUSH
36493: LD_INT 10
36495: PUSH
36496: LD_INT 11
36498: PUSH
36499: LD_INT 12
36501: PUSH
36502: LD_INT 13
36504: PUSH
36505: LD_INT 16
36507: PUSH
36508: LD_INT 17
36510: PUSH
36511: LD_INT 18
36513: PUSH
36514: LD_INT 19
36516: PUSH
36517: LD_INT 20
36519: PUSH
36520: LD_INT 21
36522: PUSH
36523: EMPTY
36524: LIST
36525: LIST
36526: LIST
36527: LIST
36528: LIST
36529: LIST
36530: LIST
36531: LIST
36532: LIST
36533: LIST
36534: LIST
36535: LIST
36536: LIST
36537: IN
36538: NOT
36539: OR
36540: PUSH
36541: LD_VAR 0 8
36545: PUSH
36546: LD_INT 5
36548: ARRAY
36549: NOT
36550: OR
36551: PUSH
36552: LD_VAR 0 8
36556: PUSH
36557: LD_INT 6
36559: ARRAY
36560: PUSH
36561: LD_INT 1
36563: PUSH
36564: LD_INT 2
36566: PUSH
36567: LD_INT 7
36569: PUSH
36570: LD_INT 9
36572: PUSH
36573: LD_INT 10
36575: PUSH
36576: LD_INT 11
36578: PUSH
36579: EMPTY
36580: LIST
36581: LIST
36582: LIST
36583: LIST
36584: LIST
36585: LIST
36586: IN
36587: NOT
36588: OR
36589: IFFALSE 36595
// exit ;
36591: POP
36592: POP
36593: GO 36693
// end ;
36595: GO 36266
36597: POP
36598: POP
// side := GetSide ( depot ) ;
36599: LD_ADDR_VAR 0 9
36603: PUSH
36604: LD_VAR 0 1
36608: PPUSH
36609: CALL_OW 255
36613: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
36614: LD_VAR 0 9
36618: PPUSH
36619: LD_VAR 0 3
36623: PPUSH
36624: LD_VAR 0 4
36628: PPUSH
36629: LD_INT 20
36631: PPUSH
36632: CALL 29014 0 4
36636: PUSH
36637: LD_INT 4
36639: ARRAY
36640: IFFALSE 36644
// exit ;
36642: GO 36693
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
36644: LD_VAR 0 2
36648: PUSH
36649: LD_INT 29
36651: PUSH
36652: LD_INT 30
36654: PUSH
36655: EMPTY
36656: LIST
36657: LIST
36658: IN
36659: PUSH
36660: LD_VAR 0 3
36664: PPUSH
36665: LD_VAR 0 4
36669: PPUSH
36670: LD_VAR 0 9
36674: PPUSH
36675: CALL_OW 440
36679: NOT
36680: AND
36681: IFFALSE 36685
// exit ;
36683: GO 36693
// result := true ;
36685: LD_ADDR_VAR 0 6
36689: PUSH
36690: LD_INT 1
36692: ST_TO_ADDR
// end ;
36693: LD_VAR 0 6
36697: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
36698: LD_INT 0
36700: PPUSH
36701: PPUSH
36702: PPUSH
36703: PPUSH
36704: PPUSH
36705: PPUSH
36706: PPUSH
36707: PPUSH
36708: PPUSH
36709: PPUSH
36710: PPUSH
36711: PPUSH
36712: PPUSH
36713: PPUSH
36714: PPUSH
36715: PPUSH
36716: PPUSH
36717: PPUSH
36718: PPUSH
36719: PPUSH
36720: PPUSH
36721: PPUSH
36722: PPUSH
36723: PPUSH
36724: PPUSH
36725: PPUSH
36726: PPUSH
36727: PPUSH
36728: PPUSH
36729: PPUSH
36730: PPUSH
36731: PPUSH
36732: PPUSH
36733: PPUSH
36734: PPUSH
36735: PPUSH
36736: PPUSH
36737: PPUSH
36738: PPUSH
36739: PPUSH
36740: PPUSH
36741: PPUSH
36742: PPUSH
36743: PPUSH
36744: PPUSH
36745: PPUSH
36746: PPUSH
36747: PPUSH
36748: PPUSH
36749: PPUSH
36750: PPUSH
36751: PPUSH
36752: PPUSH
36753: PPUSH
36754: PPUSH
36755: PPUSH
36756: PPUSH
36757: PPUSH
// result = [ ] ;
36758: LD_ADDR_VAR 0 7
36762: PUSH
36763: EMPTY
36764: ST_TO_ADDR
// temp_list = [ ] ;
36765: LD_ADDR_VAR 0 9
36769: PUSH
36770: EMPTY
36771: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
36772: LD_VAR 0 4
36776: PUSH
36777: LD_INT 0
36779: PUSH
36780: LD_INT 1
36782: PUSH
36783: LD_INT 2
36785: PUSH
36786: LD_INT 3
36788: PUSH
36789: LD_INT 4
36791: PUSH
36792: LD_INT 5
36794: PUSH
36795: EMPTY
36796: LIST
36797: LIST
36798: LIST
36799: LIST
36800: LIST
36801: LIST
36802: IN
36803: NOT
36804: PUSH
36805: LD_VAR 0 1
36809: PUSH
36810: LD_INT 0
36812: PUSH
36813: LD_INT 1
36815: PUSH
36816: EMPTY
36817: LIST
36818: LIST
36819: IN
36820: PUSH
36821: LD_VAR 0 5
36825: PUSH
36826: LD_INT 1
36828: PUSH
36829: LD_INT 2
36831: PUSH
36832: LD_INT 3
36834: PUSH
36835: EMPTY
36836: LIST
36837: LIST
36838: LIST
36839: IN
36840: NOT
36841: AND
36842: OR
36843: IFFALSE 36847
// exit ;
36845: GO 55238
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
36847: LD_VAR 0 1
36851: PUSH
36852: LD_INT 6
36854: PUSH
36855: LD_INT 7
36857: PUSH
36858: LD_INT 8
36860: PUSH
36861: LD_INT 13
36863: PUSH
36864: LD_INT 12
36866: PUSH
36867: LD_INT 15
36869: PUSH
36870: LD_INT 11
36872: PUSH
36873: LD_INT 14
36875: PUSH
36876: LD_INT 10
36878: PUSH
36879: EMPTY
36880: LIST
36881: LIST
36882: LIST
36883: LIST
36884: LIST
36885: LIST
36886: LIST
36887: LIST
36888: LIST
36889: IN
36890: IFFALSE 36900
// btype = b_lab ;
36892: LD_ADDR_VAR 0 1
36896: PUSH
36897: LD_INT 6
36899: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
36900: LD_VAR 0 6
36904: PUSH
36905: LD_INT 0
36907: PUSH
36908: LD_INT 1
36910: PUSH
36911: LD_INT 2
36913: PUSH
36914: EMPTY
36915: LIST
36916: LIST
36917: LIST
36918: IN
36919: NOT
36920: PUSH
36921: LD_VAR 0 1
36925: PUSH
36926: LD_INT 0
36928: PUSH
36929: LD_INT 1
36931: PUSH
36932: LD_INT 2
36934: PUSH
36935: LD_INT 3
36937: PUSH
36938: LD_INT 6
36940: PUSH
36941: LD_INT 36
36943: PUSH
36944: LD_INT 4
36946: PUSH
36947: LD_INT 5
36949: PUSH
36950: LD_INT 31
36952: PUSH
36953: LD_INT 32
36955: PUSH
36956: LD_INT 33
36958: PUSH
36959: EMPTY
36960: LIST
36961: LIST
36962: LIST
36963: LIST
36964: LIST
36965: LIST
36966: LIST
36967: LIST
36968: LIST
36969: LIST
36970: LIST
36971: IN
36972: NOT
36973: PUSH
36974: LD_VAR 0 6
36978: PUSH
36979: LD_INT 1
36981: EQUAL
36982: AND
36983: OR
36984: PUSH
36985: LD_VAR 0 1
36989: PUSH
36990: LD_INT 2
36992: PUSH
36993: LD_INT 3
36995: PUSH
36996: EMPTY
36997: LIST
36998: LIST
36999: IN
37000: NOT
37001: PUSH
37002: LD_VAR 0 6
37006: PUSH
37007: LD_INT 2
37009: EQUAL
37010: AND
37011: OR
37012: IFFALSE 37022
// mode = 0 ;
37014: LD_ADDR_VAR 0 6
37018: PUSH
37019: LD_INT 0
37021: ST_TO_ADDR
// case mode of 0 :
37022: LD_VAR 0 6
37026: PUSH
37027: LD_INT 0
37029: DOUBLE
37030: EQUAL
37031: IFTRUE 37035
37033: GO 48488
37035: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37036: LD_ADDR_VAR 0 11
37040: PUSH
37041: LD_INT 0
37043: PUSH
37044: LD_INT 0
37046: PUSH
37047: EMPTY
37048: LIST
37049: LIST
37050: PUSH
37051: LD_INT 0
37053: PUSH
37054: LD_INT 1
37056: NEG
37057: PUSH
37058: EMPTY
37059: LIST
37060: LIST
37061: PUSH
37062: LD_INT 1
37064: PUSH
37065: LD_INT 0
37067: PUSH
37068: EMPTY
37069: LIST
37070: LIST
37071: PUSH
37072: LD_INT 1
37074: PUSH
37075: LD_INT 1
37077: PUSH
37078: EMPTY
37079: LIST
37080: LIST
37081: PUSH
37082: LD_INT 0
37084: PUSH
37085: LD_INT 1
37087: PUSH
37088: EMPTY
37089: LIST
37090: LIST
37091: PUSH
37092: LD_INT 1
37094: NEG
37095: PUSH
37096: LD_INT 0
37098: PUSH
37099: EMPTY
37100: LIST
37101: LIST
37102: PUSH
37103: LD_INT 1
37105: NEG
37106: PUSH
37107: LD_INT 1
37109: NEG
37110: PUSH
37111: EMPTY
37112: LIST
37113: LIST
37114: PUSH
37115: LD_INT 1
37117: NEG
37118: PUSH
37119: LD_INT 2
37121: NEG
37122: PUSH
37123: EMPTY
37124: LIST
37125: LIST
37126: PUSH
37127: LD_INT 0
37129: PUSH
37130: LD_INT 2
37132: NEG
37133: PUSH
37134: EMPTY
37135: LIST
37136: LIST
37137: PUSH
37138: LD_INT 1
37140: PUSH
37141: LD_INT 1
37143: NEG
37144: PUSH
37145: EMPTY
37146: LIST
37147: LIST
37148: PUSH
37149: LD_INT 1
37151: PUSH
37152: LD_INT 2
37154: PUSH
37155: EMPTY
37156: LIST
37157: LIST
37158: PUSH
37159: LD_INT 0
37161: PUSH
37162: LD_INT 2
37164: PUSH
37165: EMPTY
37166: LIST
37167: LIST
37168: PUSH
37169: LD_INT 1
37171: NEG
37172: PUSH
37173: LD_INT 1
37175: PUSH
37176: EMPTY
37177: LIST
37178: LIST
37179: PUSH
37180: LD_INT 1
37182: PUSH
37183: LD_INT 3
37185: PUSH
37186: EMPTY
37187: LIST
37188: LIST
37189: PUSH
37190: LD_INT 0
37192: PUSH
37193: LD_INT 3
37195: PUSH
37196: EMPTY
37197: LIST
37198: LIST
37199: PUSH
37200: LD_INT 1
37202: NEG
37203: PUSH
37204: LD_INT 2
37206: PUSH
37207: EMPTY
37208: LIST
37209: LIST
37210: PUSH
37211: EMPTY
37212: LIST
37213: LIST
37214: LIST
37215: LIST
37216: LIST
37217: LIST
37218: LIST
37219: LIST
37220: LIST
37221: LIST
37222: LIST
37223: LIST
37224: LIST
37225: LIST
37226: LIST
37227: LIST
37228: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37229: LD_ADDR_VAR 0 12
37233: PUSH
37234: LD_INT 0
37236: PUSH
37237: LD_INT 0
37239: PUSH
37240: EMPTY
37241: LIST
37242: LIST
37243: PUSH
37244: LD_INT 0
37246: PUSH
37247: LD_INT 1
37249: NEG
37250: PUSH
37251: EMPTY
37252: LIST
37253: LIST
37254: PUSH
37255: LD_INT 1
37257: PUSH
37258: LD_INT 0
37260: PUSH
37261: EMPTY
37262: LIST
37263: LIST
37264: PUSH
37265: LD_INT 1
37267: PUSH
37268: LD_INT 1
37270: PUSH
37271: EMPTY
37272: LIST
37273: LIST
37274: PUSH
37275: LD_INT 0
37277: PUSH
37278: LD_INT 1
37280: PUSH
37281: EMPTY
37282: LIST
37283: LIST
37284: PUSH
37285: LD_INT 1
37287: NEG
37288: PUSH
37289: LD_INT 0
37291: PUSH
37292: EMPTY
37293: LIST
37294: LIST
37295: PUSH
37296: LD_INT 1
37298: NEG
37299: PUSH
37300: LD_INT 1
37302: NEG
37303: PUSH
37304: EMPTY
37305: LIST
37306: LIST
37307: PUSH
37308: LD_INT 1
37310: PUSH
37311: LD_INT 1
37313: NEG
37314: PUSH
37315: EMPTY
37316: LIST
37317: LIST
37318: PUSH
37319: LD_INT 2
37321: PUSH
37322: LD_INT 0
37324: PUSH
37325: EMPTY
37326: LIST
37327: LIST
37328: PUSH
37329: LD_INT 2
37331: PUSH
37332: LD_INT 1
37334: PUSH
37335: EMPTY
37336: LIST
37337: LIST
37338: PUSH
37339: LD_INT 1
37341: NEG
37342: PUSH
37343: LD_INT 1
37345: PUSH
37346: EMPTY
37347: LIST
37348: LIST
37349: PUSH
37350: LD_INT 2
37352: NEG
37353: PUSH
37354: LD_INT 0
37356: PUSH
37357: EMPTY
37358: LIST
37359: LIST
37360: PUSH
37361: LD_INT 2
37363: NEG
37364: PUSH
37365: LD_INT 1
37367: NEG
37368: PUSH
37369: EMPTY
37370: LIST
37371: LIST
37372: PUSH
37373: LD_INT 2
37375: NEG
37376: PUSH
37377: LD_INT 1
37379: PUSH
37380: EMPTY
37381: LIST
37382: LIST
37383: PUSH
37384: LD_INT 3
37386: NEG
37387: PUSH
37388: LD_INT 0
37390: PUSH
37391: EMPTY
37392: LIST
37393: LIST
37394: PUSH
37395: LD_INT 3
37397: NEG
37398: PUSH
37399: LD_INT 1
37401: NEG
37402: PUSH
37403: EMPTY
37404: LIST
37405: LIST
37406: PUSH
37407: EMPTY
37408: LIST
37409: LIST
37410: LIST
37411: LIST
37412: LIST
37413: LIST
37414: LIST
37415: LIST
37416: LIST
37417: LIST
37418: LIST
37419: LIST
37420: LIST
37421: LIST
37422: LIST
37423: LIST
37424: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37425: LD_ADDR_VAR 0 13
37429: PUSH
37430: LD_INT 0
37432: PUSH
37433: LD_INT 0
37435: PUSH
37436: EMPTY
37437: LIST
37438: LIST
37439: PUSH
37440: LD_INT 0
37442: PUSH
37443: LD_INT 1
37445: NEG
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: PUSH
37451: LD_INT 1
37453: PUSH
37454: LD_INT 0
37456: PUSH
37457: EMPTY
37458: LIST
37459: LIST
37460: PUSH
37461: LD_INT 1
37463: PUSH
37464: LD_INT 1
37466: PUSH
37467: EMPTY
37468: LIST
37469: LIST
37470: PUSH
37471: LD_INT 0
37473: PUSH
37474: LD_INT 1
37476: PUSH
37477: EMPTY
37478: LIST
37479: LIST
37480: PUSH
37481: LD_INT 1
37483: NEG
37484: PUSH
37485: LD_INT 0
37487: PUSH
37488: EMPTY
37489: LIST
37490: LIST
37491: PUSH
37492: LD_INT 1
37494: NEG
37495: PUSH
37496: LD_INT 1
37498: NEG
37499: PUSH
37500: EMPTY
37501: LIST
37502: LIST
37503: PUSH
37504: LD_INT 1
37506: NEG
37507: PUSH
37508: LD_INT 2
37510: NEG
37511: PUSH
37512: EMPTY
37513: LIST
37514: LIST
37515: PUSH
37516: LD_INT 2
37518: PUSH
37519: LD_INT 1
37521: PUSH
37522: EMPTY
37523: LIST
37524: LIST
37525: PUSH
37526: LD_INT 2
37528: PUSH
37529: LD_INT 2
37531: PUSH
37532: EMPTY
37533: LIST
37534: LIST
37535: PUSH
37536: LD_INT 1
37538: PUSH
37539: LD_INT 2
37541: PUSH
37542: EMPTY
37543: LIST
37544: LIST
37545: PUSH
37546: LD_INT 2
37548: NEG
37549: PUSH
37550: LD_INT 1
37552: NEG
37553: PUSH
37554: EMPTY
37555: LIST
37556: LIST
37557: PUSH
37558: LD_INT 2
37560: NEG
37561: PUSH
37562: LD_INT 2
37564: NEG
37565: PUSH
37566: EMPTY
37567: LIST
37568: LIST
37569: PUSH
37570: LD_INT 2
37572: NEG
37573: PUSH
37574: LD_INT 3
37576: NEG
37577: PUSH
37578: EMPTY
37579: LIST
37580: LIST
37581: PUSH
37582: LD_INT 3
37584: NEG
37585: PUSH
37586: LD_INT 2
37588: NEG
37589: PUSH
37590: EMPTY
37591: LIST
37592: LIST
37593: PUSH
37594: LD_INT 3
37596: NEG
37597: PUSH
37598: LD_INT 3
37600: NEG
37601: PUSH
37602: EMPTY
37603: LIST
37604: LIST
37605: PUSH
37606: EMPTY
37607: LIST
37608: LIST
37609: LIST
37610: LIST
37611: LIST
37612: LIST
37613: LIST
37614: LIST
37615: LIST
37616: LIST
37617: LIST
37618: LIST
37619: LIST
37620: LIST
37621: LIST
37622: LIST
37623: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37624: LD_ADDR_VAR 0 14
37628: PUSH
37629: LD_INT 0
37631: PUSH
37632: LD_INT 0
37634: PUSH
37635: EMPTY
37636: LIST
37637: LIST
37638: PUSH
37639: LD_INT 0
37641: PUSH
37642: LD_INT 1
37644: NEG
37645: PUSH
37646: EMPTY
37647: LIST
37648: LIST
37649: PUSH
37650: LD_INT 1
37652: PUSH
37653: LD_INT 0
37655: PUSH
37656: EMPTY
37657: LIST
37658: LIST
37659: PUSH
37660: LD_INT 1
37662: PUSH
37663: LD_INT 1
37665: PUSH
37666: EMPTY
37667: LIST
37668: LIST
37669: PUSH
37670: LD_INT 0
37672: PUSH
37673: LD_INT 1
37675: PUSH
37676: EMPTY
37677: LIST
37678: LIST
37679: PUSH
37680: LD_INT 1
37682: NEG
37683: PUSH
37684: LD_INT 0
37686: PUSH
37687: EMPTY
37688: LIST
37689: LIST
37690: PUSH
37691: LD_INT 1
37693: NEG
37694: PUSH
37695: LD_INT 1
37697: NEG
37698: PUSH
37699: EMPTY
37700: LIST
37701: LIST
37702: PUSH
37703: LD_INT 1
37705: NEG
37706: PUSH
37707: LD_INT 2
37709: NEG
37710: PUSH
37711: EMPTY
37712: LIST
37713: LIST
37714: PUSH
37715: LD_INT 0
37717: PUSH
37718: LD_INT 2
37720: NEG
37721: PUSH
37722: EMPTY
37723: LIST
37724: LIST
37725: PUSH
37726: LD_INT 1
37728: PUSH
37729: LD_INT 1
37731: NEG
37732: PUSH
37733: EMPTY
37734: LIST
37735: LIST
37736: PUSH
37737: LD_INT 1
37739: PUSH
37740: LD_INT 2
37742: PUSH
37743: EMPTY
37744: LIST
37745: LIST
37746: PUSH
37747: LD_INT 0
37749: PUSH
37750: LD_INT 2
37752: PUSH
37753: EMPTY
37754: LIST
37755: LIST
37756: PUSH
37757: LD_INT 1
37759: NEG
37760: PUSH
37761: LD_INT 1
37763: PUSH
37764: EMPTY
37765: LIST
37766: LIST
37767: PUSH
37768: LD_INT 1
37770: NEG
37771: PUSH
37772: LD_INT 3
37774: NEG
37775: PUSH
37776: EMPTY
37777: LIST
37778: LIST
37779: PUSH
37780: LD_INT 0
37782: PUSH
37783: LD_INT 3
37785: NEG
37786: PUSH
37787: EMPTY
37788: LIST
37789: LIST
37790: PUSH
37791: LD_INT 1
37793: PUSH
37794: LD_INT 2
37796: NEG
37797: PUSH
37798: EMPTY
37799: LIST
37800: LIST
37801: PUSH
37802: EMPTY
37803: LIST
37804: LIST
37805: LIST
37806: LIST
37807: LIST
37808: LIST
37809: LIST
37810: LIST
37811: LIST
37812: LIST
37813: LIST
37814: LIST
37815: LIST
37816: LIST
37817: LIST
37818: LIST
37819: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37820: LD_ADDR_VAR 0 15
37824: PUSH
37825: LD_INT 0
37827: PUSH
37828: LD_INT 0
37830: PUSH
37831: EMPTY
37832: LIST
37833: LIST
37834: PUSH
37835: LD_INT 0
37837: PUSH
37838: LD_INT 1
37840: NEG
37841: PUSH
37842: EMPTY
37843: LIST
37844: LIST
37845: PUSH
37846: LD_INT 1
37848: PUSH
37849: LD_INT 0
37851: PUSH
37852: EMPTY
37853: LIST
37854: LIST
37855: PUSH
37856: LD_INT 1
37858: PUSH
37859: LD_INT 1
37861: PUSH
37862: EMPTY
37863: LIST
37864: LIST
37865: PUSH
37866: LD_INT 0
37868: PUSH
37869: LD_INT 1
37871: PUSH
37872: EMPTY
37873: LIST
37874: LIST
37875: PUSH
37876: LD_INT 1
37878: NEG
37879: PUSH
37880: LD_INT 0
37882: PUSH
37883: EMPTY
37884: LIST
37885: LIST
37886: PUSH
37887: LD_INT 1
37889: NEG
37890: PUSH
37891: LD_INT 1
37893: NEG
37894: PUSH
37895: EMPTY
37896: LIST
37897: LIST
37898: PUSH
37899: LD_INT 1
37901: PUSH
37902: LD_INT 1
37904: NEG
37905: PUSH
37906: EMPTY
37907: LIST
37908: LIST
37909: PUSH
37910: LD_INT 2
37912: PUSH
37913: LD_INT 0
37915: PUSH
37916: EMPTY
37917: LIST
37918: LIST
37919: PUSH
37920: LD_INT 2
37922: PUSH
37923: LD_INT 1
37925: PUSH
37926: EMPTY
37927: LIST
37928: LIST
37929: PUSH
37930: LD_INT 1
37932: NEG
37933: PUSH
37934: LD_INT 1
37936: PUSH
37937: EMPTY
37938: LIST
37939: LIST
37940: PUSH
37941: LD_INT 2
37943: NEG
37944: PUSH
37945: LD_INT 0
37947: PUSH
37948: EMPTY
37949: LIST
37950: LIST
37951: PUSH
37952: LD_INT 2
37954: NEG
37955: PUSH
37956: LD_INT 1
37958: NEG
37959: PUSH
37960: EMPTY
37961: LIST
37962: LIST
37963: PUSH
37964: LD_INT 2
37966: PUSH
37967: LD_INT 1
37969: NEG
37970: PUSH
37971: EMPTY
37972: LIST
37973: LIST
37974: PUSH
37975: LD_INT 3
37977: PUSH
37978: LD_INT 0
37980: PUSH
37981: EMPTY
37982: LIST
37983: LIST
37984: PUSH
37985: LD_INT 3
37987: PUSH
37988: LD_INT 1
37990: PUSH
37991: EMPTY
37992: LIST
37993: LIST
37994: PUSH
37995: EMPTY
37996: LIST
37997: LIST
37998: LIST
37999: LIST
38000: LIST
38001: LIST
38002: LIST
38003: LIST
38004: LIST
38005: LIST
38006: LIST
38007: LIST
38008: LIST
38009: LIST
38010: LIST
38011: LIST
38012: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38013: LD_ADDR_VAR 0 16
38017: PUSH
38018: LD_INT 0
38020: PUSH
38021: LD_INT 0
38023: PUSH
38024: EMPTY
38025: LIST
38026: LIST
38027: PUSH
38028: LD_INT 0
38030: PUSH
38031: LD_INT 1
38033: NEG
38034: PUSH
38035: EMPTY
38036: LIST
38037: LIST
38038: PUSH
38039: LD_INT 1
38041: PUSH
38042: LD_INT 0
38044: PUSH
38045: EMPTY
38046: LIST
38047: LIST
38048: PUSH
38049: LD_INT 1
38051: PUSH
38052: LD_INT 1
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: PUSH
38059: LD_INT 0
38061: PUSH
38062: LD_INT 1
38064: PUSH
38065: EMPTY
38066: LIST
38067: LIST
38068: PUSH
38069: LD_INT 1
38071: NEG
38072: PUSH
38073: LD_INT 0
38075: PUSH
38076: EMPTY
38077: LIST
38078: LIST
38079: PUSH
38080: LD_INT 1
38082: NEG
38083: PUSH
38084: LD_INT 1
38086: NEG
38087: PUSH
38088: EMPTY
38089: LIST
38090: LIST
38091: PUSH
38092: LD_INT 1
38094: NEG
38095: PUSH
38096: LD_INT 2
38098: NEG
38099: PUSH
38100: EMPTY
38101: LIST
38102: LIST
38103: PUSH
38104: LD_INT 2
38106: PUSH
38107: LD_INT 1
38109: PUSH
38110: EMPTY
38111: LIST
38112: LIST
38113: PUSH
38114: LD_INT 2
38116: PUSH
38117: LD_INT 2
38119: PUSH
38120: EMPTY
38121: LIST
38122: LIST
38123: PUSH
38124: LD_INT 1
38126: PUSH
38127: LD_INT 2
38129: PUSH
38130: EMPTY
38131: LIST
38132: LIST
38133: PUSH
38134: LD_INT 2
38136: NEG
38137: PUSH
38138: LD_INT 1
38140: NEG
38141: PUSH
38142: EMPTY
38143: LIST
38144: LIST
38145: PUSH
38146: LD_INT 2
38148: NEG
38149: PUSH
38150: LD_INT 2
38152: NEG
38153: PUSH
38154: EMPTY
38155: LIST
38156: LIST
38157: PUSH
38158: LD_INT 3
38160: PUSH
38161: LD_INT 2
38163: PUSH
38164: EMPTY
38165: LIST
38166: LIST
38167: PUSH
38168: LD_INT 3
38170: PUSH
38171: LD_INT 3
38173: PUSH
38174: EMPTY
38175: LIST
38176: LIST
38177: PUSH
38178: LD_INT 2
38180: PUSH
38181: LD_INT 3
38183: PUSH
38184: EMPTY
38185: LIST
38186: LIST
38187: PUSH
38188: EMPTY
38189: LIST
38190: LIST
38191: LIST
38192: LIST
38193: LIST
38194: LIST
38195: LIST
38196: LIST
38197: LIST
38198: LIST
38199: LIST
38200: LIST
38201: LIST
38202: LIST
38203: LIST
38204: LIST
38205: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38206: LD_ADDR_VAR 0 17
38210: PUSH
38211: LD_INT 0
38213: PUSH
38214: LD_INT 0
38216: PUSH
38217: EMPTY
38218: LIST
38219: LIST
38220: PUSH
38221: LD_INT 0
38223: PUSH
38224: LD_INT 1
38226: NEG
38227: PUSH
38228: EMPTY
38229: LIST
38230: LIST
38231: PUSH
38232: LD_INT 1
38234: PUSH
38235: LD_INT 0
38237: PUSH
38238: EMPTY
38239: LIST
38240: LIST
38241: PUSH
38242: LD_INT 1
38244: PUSH
38245: LD_INT 1
38247: PUSH
38248: EMPTY
38249: LIST
38250: LIST
38251: PUSH
38252: LD_INT 0
38254: PUSH
38255: LD_INT 1
38257: PUSH
38258: EMPTY
38259: LIST
38260: LIST
38261: PUSH
38262: LD_INT 1
38264: NEG
38265: PUSH
38266: LD_INT 0
38268: PUSH
38269: EMPTY
38270: LIST
38271: LIST
38272: PUSH
38273: LD_INT 1
38275: NEG
38276: PUSH
38277: LD_INT 1
38279: NEG
38280: PUSH
38281: EMPTY
38282: LIST
38283: LIST
38284: PUSH
38285: LD_INT 1
38287: NEG
38288: PUSH
38289: LD_INT 2
38291: NEG
38292: PUSH
38293: EMPTY
38294: LIST
38295: LIST
38296: PUSH
38297: LD_INT 0
38299: PUSH
38300: LD_INT 2
38302: NEG
38303: PUSH
38304: EMPTY
38305: LIST
38306: LIST
38307: PUSH
38308: LD_INT 1
38310: PUSH
38311: LD_INT 1
38313: NEG
38314: PUSH
38315: EMPTY
38316: LIST
38317: LIST
38318: PUSH
38319: LD_INT 2
38321: PUSH
38322: LD_INT 0
38324: PUSH
38325: EMPTY
38326: LIST
38327: LIST
38328: PUSH
38329: LD_INT 2
38331: PUSH
38332: LD_INT 1
38334: PUSH
38335: EMPTY
38336: LIST
38337: LIST
38338: PUSH
38339: LD_INT 2
38341: PUSH
38342: LD_INT 2
38344: PUSH
38345: EMPTY
38346: LIST
38347: LIST
38348: PUSH
38349: LD_INT 1
38351: PUSH
38352: LD_INT 2
38354: PUSH
38355: EMPTY
38356: LIST
38357: LIST
38358: PUSH
38359: LD_INT 0
38361: PUSH
38362: LD_INT 2
38364: PUSH
38365: EMPTY
38366: LIST
38367: LIST
38368: PUSH
38369: LD_INT 1
38371: NEG
38372: PUSH
38373: LD_INT 1
38375: PUSH
38376: EMPTY
38377: LIST
38378: LIST
38379: PUSH
38380: LD_INT 2
38382: NEG
38383: PUSH
38384: LD_INT 0
38386: PUSH
38387: EMPTY
38388: LIST
38389: LIST
38390: PUSH
38391: LD_INT 2
38393: NEG
38394: PUSH
38395: LD_INT 1
38397: NEG
38398: PUSH
38399: EMPTY
38400: LIST
38401: LIST
38402: PUSH
38403: LD_INT 2
38405: NEG
38406: PUSH
38407: LD_INT 2
38409: NEG
38410: PUSH
38411: EMPTY
38412: LIST
38413: LIST
38414: PUSH
38415: EMPTY
38416: LIST
38417: LIST
38418: LIST
38419: LIST
38420: LIST
38421: LIST
38422: LIST
38423: LIST
38424: LIST
38425: LIST
38426: LIST
38427: LIST
38428: LIST
38429: LIST
38430: LIST
38431: LIST
38432: LIST
38433: LIST
38434: LIST
38435: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38436: LD_ADDR_VAR 0 18
38440: PUSH
38441: LD_INT 0
38443: PUSH
38444: LD_INT 0
38446: PUSH
38447: EMPTY
38448: LIST
38449: LIST
38450: PUSH
38451: LD_INT 0
38453: PUSH
38454: LD_INT 1
38456: NEG
38457: PUSH
38458: EMPTY
38459: LIST
38460: LIST
38461: PUSH
38462: LD_INT 1
38464: PUSH
38465: LD_INT 0
38467: PUSH
38468: EMPTY
38469: LIST
38470: LIST
38471: PUSH
38472: LD_INT 1
38474: PUSH
38475: LD_INT 1
38477: PUSH
38478: EMPTY
38479: LIST
38480: LIST
38481: PUSH
38482: LD_INT 0
38484: PUSH
38485: LD_INT 1
38487: PUSH
38488: EMPTY
38489: LIST
38490: LIST
38491: PUSH
38492: LD_INT 1
38494: NEG
38495: PUSH
38496: LD_INT 0
38498: PUSH
38499: EMPTY
38500: LIST
38501: LIST
38502: PUSH
38503: LD_INT 1
38505: NEG
38506: PUSH
38507: LD_INT 1
38509: NEG
38510: PUSH
38511: EMPTY
38512: LIST
38513: LIST
38514: PUSH
38515: LD_INT 1
38517: NEG
38518: PUSH
38519: LD_INT 2
38521: NEG
38522: PUSH
38523: EMPTY
38524: LIST
38525: LIST
38526: PUSH
38527: LD_INT 0
38529: PUSH
38530: LD_INT 2
38532: NEG
38533: PUSH
38534: EMPTY
38535: LIST
38536: LIST
38537: PUSH
38538: LD_INT 1
38540: PUSH
38541: LD_INT 1
38543: NEG
38544: PUSH
38545: EMPTY
38546: LIST
38547: LIST
38548: PUSH
38549: LD_INT 2
38551: PUSH
38552: LD_INT 0
38554: PUSH
38555: EMPTY
38556: LIST
38557: LIST
38558: PUSH
38559: LD_INT 2
38561: PUSH
38562: LD_INT 1
38564: PUSH
38565: EMPTY
38566: LIST
38567: LIST
38568: PUSH
38569: LD_INT 2
38571: PUSH
38572: LD_INT 2
38574: PUSH
38575: EMPTY
38576: LIST
38577: LIST
38578: PUSH
38579: LD_INT 1
38581: PUSH
38582: LD_INT 2
38584: PUSH
38585: EMPTY
38586: LIST
38587: LIST
38588: PUSH
38589: LD_INT 0
38591: PUSH
38592: LD_INT 2
38594: PUSH
38595: EMPTY
38596: LIST
38597: LIST
38598: PUSH
38599: LD_INT 1
38601: NEG
38602: PUSH
38603: LD_INT 1
38605: PUSH
38606: EMPTY
38607: LIST
38608: LIST
38609: PUSH
38610: LD_INT 2
38612: NEG
38613: PUSH
38614: LD_INT 0
38616: PUSH
38617: EMPTY
38618: LIST
38619: LIST
38620: PUSH
38621: LD_INT 2
38623: NEG
38624: PUSH
38625: LD_INT 1
38627: NEG
38628: PUSH
38629: EMPTY
38630: LIST
38631: LIST
38632: PUSH
38633: LD_INT 2
38635: NEG
38636: PUSH
38637: LD_INT 2
38639: NEG
38640: PUSH
38641: EMPTY
38642: LIST
38643: LIST
38644: PUSH
38645: EMPTY
38646: LIST
38647: LIST
38648: LIST
38649: LIST
38650: LIST
38651: LIST
38652: LIST
38653: LIST
38654: LIST
38655: LIST
38656: LIST
38657: LIST
38658: LIST
38659: LIST
38660: LIST
38661: LIST
38662: LIST
38663: LIST
38664: LIST
38665: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38666: LD_ADDR_VAR 0 19
38670: PUSH
38671: LD_INT 0
38673: PUSH
38674: LD_INT 0
38676: PUSH
38677: EMPTY
38678: LIST
38679: LIST
38680: PUSH
38681: LD_INT 0
38683: PUSH
38684: LD_INT 1
38686: NEG
38687: PUSH
38688: EMPTY
38689: LIST
38690: LIST
38691: PUSH
38692: LD_INT 1
38694: PUSH
38695: LD_INT 0
38697: PUSH
38698: EMPTY
38699: LIST
38700: LIST
38701: PUSH
38702: LD_INT 1
38704: PUSH
38705: LD_INT 1
38707: PUSH
38708: EMPTY
38709: LIST
38710: LIST
38711: PUSH
38712: LD_INT 0
38714: PUSH
38715: LD_INT 1
38717: PUSH
38718: EMPTY
38719: LIST
38720: LIST
38721: PUSH
38722: LD_INT 1
38724: NEG
38725: PUSH
38726: LD_INT 0
38728: PUSH
38729: EMPTY
38730: LIST
38731: LIST
38732: PUSH
38733: LD_INT 1
38735: NEG
38736: PUSH
38737: LD_INT 1
38739: NEG
38740: PUSH
38741: EMPTY
38742: LIST
38743: LIST
38744: PUSH
38745: LD_INT 1
38747: NEG
38748: PUSH
38749: LD_INT 2
38751: NEG
38752: PUSH
38753: EMPTY
38754: LIST
38755: LIST
38756: PUSH
38757: LD_INT 0
38759: PUSH
38760: LD_INT 2
38762: NEG
38763: PUSH
38764: EMPTY
38765: LIST
38766: LIST
38767: PUSH
38768: LD_INT 1
38770: PUSH
38771: LD_INT 1
38773: NEG
38774: PUSH
38775: EMPTY
38776: LIST
38777: LIST
38778: PUSH
38779: LD_INT 2
38781: PUSH
38782: LD_INT 0
38784: PUSH
38785: EMPTY
38786: LIST
38787: LIST
38788: PUSH
38789: LD_INT 2
38791: PUSH
38792: LD_INT 1
38794: PUSH
38795: EMPTY
38796: LIST
38797: LIST
38798: PUSH
38799: LD_INT 2
38801: PUSH
38802: LD_INT 2
38804: PUSH
38805: EMPTY
38806: LIST
38807: LIST
38808: PUSH
38809: LD_INT 1
38811: PUSH
38812: LD_INT 2
38814: PUSH
38815: EMPTY
38816: LIST
38817: LIST
38818: PUSH
38819: LD_INT 0
38821: PUSH
38822: LD_INT 2
38824: PUSH
38825: EMPTY
38826: LIST
38827: LIST
38828: PUSH
38829: LD_INT 1
38831: NEG
38832: PUSH
38833: LD_INT 1
38835: PUSH
38836: EMPTY
38837: LIST
38838: LIST
38839: PUSH
38840: LD_INT 2
38842: NEG
38843: PUSH
38844: LD_INT 0
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: PUSH
38851: LD_INT 2
38853: NEG
38854: PUSH
38855: LD_INT 1
38857: NEG
38858: PUSH
38859: EMPTY
38860: LIST
38861: LIST
38862: PUSH
38863: LD_INT 2
38865: NEG
38866: PUSH
38867: LD_INT 2
38869: NEG
38870: PUSH
38871: EMPTY
38872: LIST
38873: LIST
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: LIST
38879: LIST
38880: LIST
38881: LIST
38882: LIST
38883: LIST
38884: LIST
38885: LIST
38886: LIST
38887: LIST
38888: LIST
38889: LIST
38890: LIST
38891: LIST
38892: LIST
38893: LIST
38894: LIST
38895: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38896: LD_ADDR_VAR 0 20
38900: PUSH
38901: LD_INT 0
38903: PUSH
38904: LD_INT 0
38906: PUSH
38907: EMPTY
38908: LIST
38909: LIST
38910: PUSH
38911: LD_INT 0
38913: PUSH
38914: LD_INT 1
38916: NEG
38917: PUSH
38918: EMPTY
38919: LIST
38920: LIST
38921: PUSH
38922: LD_INT 1
38924: PUSH
38925: LD_INT 0
38927: PUSH
38928: EMPTY
38929: LIST
38930: LIST
38931: PUSH
38932: LD_INT 1
38934: PUSH
38935: LD_INT 1
38937: PUSH
38938: EMPTY
38939: LIST
38940: LIST
38941: PUSH
38942: LD_INT 0
38944: PUSH
38945: LD_INT 1
38947: PUSH
38948: EMPTY
38949: LIST
38950: LIST
38951: PUSH
38952: LD_INT 1
38954: NEG
38955: PUSH
38956: LD_INT 0
38958: PUSH
38959: EMPTY
38960: LIST
38961: LIST
38962: PUSH
38963: LD_INT 1
38965: NEG
38966: PUSH
38967: LD_INT 1
38969: NEG
38970: PUSH
38971: EMPTY
38972: LIST
38973: LIST
38974: PUSH
38975: LD_INT 1
38977: NEG
38978: PUSH
38979: LD_INT 2
38981: NEG
38982: PUSH
38983: EMPTY
38984: LIST
38985: LIST
38986: PUSH
38987: LD_INT 0
38989: PUSH
38990: LD_INT 2
38992: NEG
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: PUSH
38998: LD_INT 1
39000: PUSH
39001: LD_INT 1
39003: NEG
39004: PUSH
39005: EMPTY
39006: LIST
39007: LIST
39008: PUSH
39009: LD_INT 2
39011: PUSH
39012: LD_INT 0
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: PUSH
39019: LD_INT 2
39021: PUSH
39022: LD_INT 1
39024: PUSH
39025: EMPTY
39026: LIST
39027: LIST
39028: PUSH
39029: LD_INT 2
39031: PUSH
39032: LD_INT 2
39034: PUSH
39035: EMPTY
39036: LIST
39037: LIST
39038: PUSH
39039: LD_INT 1
39041: PUSH
39042: LD_INT 2
39044: PUSH
39045: EMPTY
39046: LIST
39047: LIST
39048: PUSH
39049: LD_INT 0
39051: PUSH
39052: LD_INT 2
39054: PUSH
39055: EMPTY
39056: LIST
39057: LIST
39058: PUSH
39059: LD_INT 1
39061: NEG
39062: PUSH
39063: LD_INT 1
39065: PUSH
39066: EMPTY
39067: LIST
39068: LIST
39069: PUSH
39070: LD_INT 2
39072: NEG
39073: PUSH
39074: LD_INT 0
39076: PUSH
39077: EMPTY
39078: LIST
39079: LIST
39080: PUSH
39081: LD_INT 2
39083: NEG
39084: PUSH
39085: LD_INT 1
39087: NEG
39088: PUSH
39089: EMPTY
39090: LIST
39091: LIST
39092: PUSH
39093: LD_INT 2
39095: NEG
39096: PUSH
39097: LD_INT 2
39099: NEG
39100: PUSH
39101: EMPTY
39102: LIST
39103: LIST
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: LIST
39109: LIST
39110: LIST
39111: LIST
39112: LIST
39113: LIST
39114: LIST
39115: LIST
39116: LIST
39117: LIST
39118: LIST
39119: LIST
39120: LIST
39121: LIST
39122: LIST
39123: LIST
39124: LIST
39125: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39126: LD_ADDR_VAR 0 21
39130: PUSH
39131: LD_INT 0
39133: PUSH
39134: LD_INT 0
39136: PUSH
39137: EMPTY
39138: LIST
39139: LIST
39140: PUSH
39141: LD_INT 0
39143: PUSH
39144: LD_INT 1
39146: NEG
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: PUSH
39152: LD_INT 1
39154: PUSH
39155: LD_INT 0
39157: PUSH
39158: EMPTY
39159: LIST
39160: LIST
39161: PUSH
39162: LD_INT 1
39164: PUSH
39165: LD_INT 1
39167: PUSH
39168: EMPTY
39169: LIST
39170: LIST
39171: PUSH
39172: LD_INT 0
39174: PUSH
39175: LD_INT 1
39177: PUSH
39178: EMPTY
39179: LIST
39180: LIST
39181: PUSH
39182: LD_INT 1
39184: NEG
39185: PUSH
39186: LD_INT 0
39188: PUSH
39189: EMPTY
39190: LIST
39191: LIST
39192: PUSH
39193: LD_INT 1
39195: NEG
39196: PUSH
39197: LD_INT 1
39199: NEG
39200: PUSH
39201: EMPTY
39202: LIST
39203: LIST
39204: PUSH
39205: LD_INT 1
39207: NEG
39208: PUSH
39209: LD_INT 2
39211: NEG
39212: PUSH
39213: EMPTY
39214: LIST
39215: LIST
39216: PUSH
39217: LD_INT 0
39219: PUSH
39220: LD_INT 2
39222: NEG
39223: PUSH
39224: EMPTY
39225: LIST
39226: LIST
39227: PUSH
39228: LD_INT 1
39230: PUSH
39231: LD_INT 1
39233: NEG
39234: PUSH
39235: EMPTY
39236: LIST
39237: LIST
39238: PUSH
39239: LD_INT 2
39241: PUSH
39242: LD_INT 0
39244: PUSH
39245: EMPTY
39246: LIST
39247: LIST
39248: PUSH
39249: LD_INT 2
39251: PUSH
39252: LD_INT 1
39254: PUSH
39255: EMPTY
39256: LIST
39257: LIST
39258: PUSH
39259: LD_INT 2
39261: PUSH
39262: LD_INT 2
39264: PUSH
39265: EMPTY
39266: LIST
39267: LIST
39268: PUSH
39269: LD_INT 1
39271: PUSH
39272: LD_INT 2
39274: PUSH
39275: EMPTY
39276: LIST
39277: LIST
39278: PUSH
39279: LD_INT 0
39281: PUSH
39282: LD_INT 2
39284: PUSH
39285: EMPTY
39286: LIST
39287: LIST
39288: PUSH
39289: LD_INT 1
39291: NEG
39292: PUSH
39293: LD_INT 1
39295: PUSH
39296: EMPTY
39297: LIST
39298: LIST
39299: PUSH
39300: LD_INT 2
39302: NEG
39303: PUSH
39304: LD_INT 0
39306: PUSH
39307: EMPTY
39308: LIST
39309: LIST
39310: PUSH
39311: LD_INT 2
39313: NEG
39314: PUSH
39315: LD_INT 1
39317: NEG
39318: PUSH
39319: EMPTY
39320: LIST
39321: LIST
39322: PUSH
39323: LD_INT 2
39325: NEG
39326: PUSH
39327: LD_INT 2
39329: NEG
39330: PUSH
39331: EMPTY
39332: LIST
39333: LIST
39334: PUSH
39335: EMPTY
39336: LIST
39337: LIST
39338: LIST
39339: LIST
39340: LIST
39341: LIST
39342: LIST
39343: LIST
39344: LIST
39345: LIST
39346: LIST
39347: LIST
39348: LIST
39349: LIST
39350: LIST
39351: LIST
39352: LIST
39353: LIST
39354: LIST
39355: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39356: LD_ADDR_VAR 0 22
39360: PUSH
39361: LD_INT 0
39363: PUSH
39364: LD_INT 0
39366: PUSH
39367: EMPTY
39368: LIST
39369: LIST
39370: PUSH
39371: LD_INT 0
39373: PUSH
39374: LD_INT 1
39376: NEG
39377: PUSH
39378: EMPTY
39379: LIST
39380: LIST
39381: PUSH
39382: LD_INT 1
39384: PUSH
39385: LD_INT 0
39387: PUSH
39388: EMPTY
39389: LIST
39390: LIST
39391: PUSH
39392: LD_INT 1
39394: PUSH
39395: LD_INT 1
39397: PUSH
39398: EMPTY
39399: LIST
39400: LIST
39401: PUSH
39402: LD_INT 0
39404: PUSH
39405: LD_INT 1
39407: PUSH
39408: EMPTY
39409: LIST
39410: LIST
39411: PUSH
39412: LD_INT 1
39414: NEG
39415: PUSH
39416: LD_INT 0
39418: PUSH
39419: EMPTY
39420: LIST
39421: LIST
39422: PUSH
39423: LD_INT 1
39425: NEG
39426: PUSH
39427: LD_INT 1
39429: NEG
39430: PUSH
39431: EMPTY
39432: LIST
39433: LIST
39434: PUSH
39435: LD_INT 1
39437: NEG
39438: PUSH
39439: LD_INT 2
39441: NEG
39442: PUSH
39443: EMPTY
39444: LIST
39445: LIST
39446: PUSH
39447: LD_INT 0
39449: PUSH
39450: LD_INT 2
39452: NEG
39453: PUSH
39454: EMPTY
39455: LIST
39456: LIST
39457: PUSH
39458: LD_INT 1
39460: PUSH
39461: LD_INT 1
39463: NEG
39464: PUSH
39465: EMPTY
39466: LIST
39467: LIST
39468: PUSH
39469: LD_INT 2
39471: PUSH
39472: LD_INT 0
39474: PUSH
39475: EMPTY
39476: LIST
39477: LIST
39478: PUSH
39479: LD_INT 2
39481: PUSH
39482: LD_INT 1
39484: PUSH
39485: EMPTY
39486: LIST
39487: LIST
39488: PUSH
39489: LD_INT 2
39491: PUSH
39492: LD_INT 2
39494: PUSH
39495: EMPTY
39496: LIST
39497: LIST
39498: PUSH
39499: LD_INT 1
39501: PUSH
39502: LD_INT 2
39504: PUSH
39505: EMPTY
39506: LIST
39507: LIST
39508: PUSH
39509: LD_INT 0
39511: PUSH
39512: LD_INT 2
39514: PUSH
39515: EMPTY
39516: LIST
39517: LIST
39518: PUSH
39519: LD_INT 1
39521: NEG
39522: PUSH
39523: LD_INT 1
39525: PUSH
39526: EMPTY
39527: LIST
39528: LIST
39529: PUSH
39530: LD_INT 2
39532: NEG
39533: PUSH
39534: LD_INT 0
39536: PUSH
39537: EMPTY
39538: LIST
39539: LIST
39540: PUSH
39541: LD_INT 2
39543: NEG
39544: PUSH
39545: LD_INT 1
39547: NEG
39548: PUSH
39549: EMPTY
39550: LIST
39551: LIST
39552: PUSH
39553: LD_INT 2
39555: NEG
39556: PUSH
39557: LD_INT 2
39559: NEG
39560: PUSH
39561: EMPTY
39562: LIST
39563: LIST
39564: PUSH
39565: EMPTY
39566: LIST
39567: LIST
39568: LIST
39569: LIST
39570: LIST
39571: LIST
39572: LIST
39573: LIST
39574: LIST
39575: LIST
39576: LIST
39577: LIST
39578: LIST
39579: LIST
39580: LIST
39581: LIST
39582: LIST
39583: LIST
39584: LIST
39585: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
39586: LD_ADDR_VAR 0 23
39590: PUSH
39591: LD_INT 0
39593: PUSH
39594: LD_INT 0
39596: PUSH
39597: EMPTY
39598: LIST
39599: LIST
39600: PUSH
39601: LD_INT 0
39603: PUSH
39604: LD_INT 1
39606: NEG
39607: PUSH
39608: EMPTY
39609: LIST
39610: LIST
39611: PUSH
39612: LD_INT 1
39614: PUSH
39615: LD_INT 0
39617: PUSH
39618: EMPTY
39619: LIST
39620: LIST
39621: PUSH
39622: LD_INT 1
39624: PUSH
39625: LD_INT 1
39627: PUSH
39628: EMPTY
39629: LIST
39630: LIST
39631: PUSH
39632: LD_INT 0
39634: PUSH
39635: LD_INT 1
39637: PUSH
39638: EMPTY
39639: LIST
39640: LIST
39641: PUSH
39642: LD_INT 1
39644: NEG
39645: PUSH
39646: LD_INT 0
39648: PUSH
39649: EMPTY
39650: LIST
39651: LIST
39652: PUSH
39653: LD_INT 1
39655: NEG
39656: PUSH
39657: LD_INT 1
39659: NEG
39660: PUSH
39661: EMPTY
39662: LIST
39663: LIST
39664: PUSH
39665: LD_INT 1
39667: NEG
39668: PUSH
39669: LD_INT 2
39671: NEG
39672: PUSH
39673: EMPTY
39674: LIST
39675: LIST
39676: PUSH
39677: LD_INT 0
39679: PUSH
39680: LD_INT 2
39682: NEG
39683: PUSH
39684: EMPTY
39685: LIST
39686: LIST
39687: PUSH
39688: LD_INT 1
39690: PUSH
39691: LD_INT 1
39693: NEG
39694: PUSH
39695: EMPTY
39696: LIST
39697: LIST
39698: PUSH
39699: LD_INT 2
39701: PUSH
39702: LD_INT 0
39704: PUSH
39705: EMPTY
39706: LIST
39707: LIST
39708: PUSH
39709: LD_INT 2
39711: PUSH
39712: LD_INT 1
39714: PUSH
39715: EMPTY
39716: LIST
39717: LIST
39718: PUSH
39719: LD_INT 2
39721: PUSH
39722: LD_INT 2
39724: PUSH
39725: EMPTY
39726: LIST
39727: LIST
39728: PUSH
39729: LD_INT 1
39731: PUSH
39732: LD_INT 2
39734: PUSH
39735: EMPTY
39736: LIST
39737: LIST
39738: PUSH
39739: LD_INT 0
39741: PUSH
39742: LD_INT 2
39744: PUSH
39745: EMPTY
39746: LIST
39747: LIST
39748: PUSH
39749: LD_INT 1
39751: NEG
39752: PUSH
39753: LD_INT 1
39755: PUSH
39756: EMPTY
39757: LIST
39758: LIST
39759: PUSH
39760: LD_INT 2
39762: NEG
39763: PUSH
39764: LD_INT 0
39766: PUSH
39767: EMPTY
39768: LIST
39769: LIST
39770: PUSH
39771: LD_INT 2
39773: NEG
39774: PUSH
39775: LD_INT 1
39777: NEG
39778: PUSH
39779: EMPTY
39780: LIST
39781: LIST
39782: PUSH
39783: LD_INT 2
39785: NEG
39786: PUSH
39787: LD_INT 2
39789: NEG
39790: PUSH
39791: EMPTY
39792: LIST
39793: LIST
39794: PUSH
39795: LD_INT 2
39797: NEG
39798: PUSH
39799: LD_INT 3
39801: NEG
39802: PUSH
39803: EMPTY
39804: LIST
39805: LIST
39806: PUSH
39807: LD_INT 1
39809: NEG
39810: PUSH
39811: LD_INT 3
39813: NEG
39814: PUSH
39815: EMPTY
39816: LIST
39817: LIST
39818: PUSH
39819: LD_INT 1
39821: PUSH
39822: LD_INT 2
39824: NEG
39825: PUSH
39826: EMPTY
39827: LIST
39828: LIST
39829: PUSH
39830: LD_INT 2
39832: PUSH
39833: LD_INT 1
39835: NEG
39836: PUSH
39837: EMPTY
39838: LIST
39839: LIST
39840: PUSH
39841: EMPTY
39842: LIST
39843: LIST
39844: LIST
39845: LIST
39846: LIST
39847: LIST
39848: LIST
39849: LIST
39850: LIST
39851: LIST
39852: LIST
39853: LIST
39854: LIST
39855: LIST
39856: LIST
39857: LIST
39858: LIST
39859: LIST
39860: LIST
39861: LIST
39862: LIST
39863: LIST
39864: LIST
39865: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
39866: LD_ADDR_VAR 0 24
39870: PUSH
39871: LD_INT 0
39873: PUSH
39874: LD_INT 0
39876: PUSH
39877: EMPTY
39878: LIST
39879: LIST
39880: PUSH
39881: LD_INT 0
39883: PUSH
39884: LD_INT 1
39886: NEG
39887: PUSH
39888: EMPTY
39889: LIST
39890: LIST
39891: PUSH
39892: LD_INT 1
39894: PUSH
39895: LD_INT 0
39897: PUSH
39898: EMPTY
39899: LIST
39900: LIST
39901: PUSH
39902: LD_INT 1
39904: PUSH
39905: LD_INT 1
39907: PUSH
39908: EMPTY
39909: LIST
39910: LIST
39911: PUSH
39912: LD_INT 0
39914: PUSH
39915: LD_INT 1
39917: PUSH
39918: EMPTY
39919: LIST
39920: LIST
39921: PUSH
39922: LD_INT 1
39924: NEG
39925: PUSH
39926: LD_INT 0
39928: PUSH
39929: EMPTY
39930: LIST
39931: LIST
39932: PUSH
39933: LD_INT 1
39935: NEG
39936: PUSH
39937: LD_INT 1
39939: NEG
39940: PUSH
39941: EMPTY
39942: LIST
39943: LIST
39944: PUSH
39945: LD_INT 1
39947: NEG
39948: PUSH
39949: LD_INT 2
39951: NEG
39952: PUSH
39953: EMPTY
39954: LIST
39955: LIST
39956: PUSH
39957: LD_INT 0
39959: PUSH
39960: LD_INT 2
39962: NEG
39963: PUSH
39964: EMPTY
39965: LIST
39966: LIST
39967: PUSH
39968: LD_INT 1
39970: PUSH
39971: LD_INT 1
39973: NEG
39974: PUSH
39975: EMPTY
39976: LIST
39977: LIST
39978: PUSH
39979: LD_INT 2
39981: PUSH
39982: LD_INT 0
39984: PUSH
39985: EMPTY
39986: LIST
39987: LIST
39988: PUSH
39989: LD_INT 2
39991: PUSH
39992: LD_INT 1
39994: PUSH
39995: EMPTY
39996: LIST
39997: LIST
39998: PUSH
39999: LD_INT 2
40001: PUSH
40002: LD_INT 2
40004: PUSH
40005: EMPTY
40006: LIST
40007: LIST
40008: PUSH
40009: LD_INT 1
40011: PUSH
40012: LD_INT 2
40014: PUSH
40015: EMPTY
40016: LIST
40017: LIST
40018: PUSH
40019: LD_INT 0
40021: PUSH
40022: LD_INT 2
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: PUSH
40029: LD_INT 1
40031: NEG
40032: PUSH
40033: LD_INT 1
40035: PUSH
40036: EMPTY
40037: LIST
40038: LIST
40039: PUSH
40040: LD_INT 2
40042: NEG
40043: PUSH
40044: LD_INT 0
40046: PUSH
40047: EMPTY
40048: LIST
40049: LIST
40050: PUSH
40051: LD_INT 2
40053: NEG
40054: PUSH
40055: LD_INT 1
40057: NEG
40058: PUSH
40059: EMPTY
40060: LIST
40061: LIST
40062: PUSH
40063: LD_INT 2
40065: NEG
40066: PUSH
40067: LD_INT 2
40069: NEG
40070: PUSH
40071: EMPTY
40072: LIST
40073: LIST
40074: PUSH
40075: LD_INT 1
40077: PUSH
40078: LD_INT 2
40080: NEG
40081: PUSH
40082: EMPTY
40083: LIST
40084: LIST
40085: PUSH
40086: LD_INT 2
40088: PUSH
40089: LD_INT 1
40091: NEG
40092: PUSH
40093: EMPTY
40094: LIST
40095: LIST
40096: PUSH
40097: LD_INT 3
40099: PUSH
40100: LD_INT 1
40102: PUSH
40103: EMPTY
40104: LIST
40105: LIST
40106: PUSH
40107: LD_INT 3
40109: PUSH
40110: LD_INT 2
40112: PUSH
40113: EMPTY
40114: LIST
40115: LIST
40116: PUSH
40117: EMPTY
40118: LIST
40119: LIST
40120: LIST
40121: LIST
40122: LIST
40123: LIST
40124: LIST
40125: LIST
40126: LIST
40127: LIST
40128: LIST
40129: LIST
40130: LIST
40131: LIST
40132: LIST
40133: LIST
40134: LIST
40135: LIST
40136: LIST
40137: LIST
40138: LIST
40139: LIST
40140: LIST
40141: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
40142: LD_ADDR_VAR 0 25
40146: PUSH
40147: LD_INT 0
40149: PUSH
40150: LD_INT 0
40152: PUSH
40153: EMPTY
40154: LIST
40155: LIST
40156: PUSH
40157: LD_INT 0
40159: PUSH
40160: LD_INT 1
40162: NEG
40163: PUSH
40164: EMPTY
40165: LIST
40166: LIST
40167: PUSH
40168: LD_INT 1
40170: PUSH
40171: LD_INT 0
40173: PUSH
40174: EMPTY
40175: LIST
40176: LIST
40177: PUSH
40178: LD_INT 1
40180: PUSH
40181: LD_INT 1
40183: PUSH
40184: EMPTY
40185: LIST
40186: LIST
40187: PUSH
40188: LD_INT 0
40190: PUSH
40191: LD_INT 1
40193: PUSH
40194: EMPTY
40195: LIST
40196: LIST
40197: PUSH
40198: LD_INT 1
40200: NEG
40201: PUSH
40202: LD_INT 0
40204: PUSH
40205: EMPTY
40206: LIST
40207: LIST
40208: PUSH
40209: LD_INT 1
40211: NEG
40212: PUSH
40213: LD_INT 1
40215: NEG
40216: PUSH
40217: EMPTY
40218: LIST
40219: LIST
40220: PUSH
40221: LD_INT 1
40223: NEG
40224: PUSH
40225: LD_INT 2
40227: NEG
40228: PUSH
40229: EMPTY
40230: LIST
40231: LIST
40232: PUSH
40233: LD_INT 0
40235: PUSH
40236: LD_INT 2
40238: NEG
40239: PUSH
40240: EMPTY
40241: LIST
40242: LIST
40243: PUSH
40244: LD_INT 1
40246: PUSH
40247: LD_INT 1
40249: NEG
40250: PUSH
40251: EMPTY
40252: LIST
40253: LIST
40254: PUSH
40255: LD_INT 2
40257: PUSH
40258: LD_INT 0
40260: PUSH
40261: EMPTY
40262: LIST
40263: LIST
40264: PUSH
40265: LD_INT 2
40267: PUSH
40268: LD_INT 1
40270: PUSH
40271: EMPTY
40272: LIST
40273: LIST
40274: PUSH
40275: LD_INT 2
40277: PUSH
40278: LD_INT 2
40280: PUSH
40281: EMPTY
40282: LIST
40283: LIST
40284: PUSH
40285: LD_INT 1
40287: PUSH
40288: LD_INT 2
40290: PUSH
40291: EMPTY
40292: LIST
40293: LIST
40294: PUSH
40295: LD_INT 0
40297: PUSH
40298: LD_INT 2
40300: PUSH
40301: EMPTY
40302: LIST
40303: LIST
40304: PUSH
40305: LD_INT 1
40307: NEG
40308: PUSH
40309: LD_INT 1
40311: PUSH
40312: EMPTY
40313: LIST
40314: LIST
40315: PUSH
40316: LD_INT 2
40318: NEG
40319: PUSH
40320: LD_INT 0
40322: PUSH
40323: EMPTY
40324: LIST
40325: LIST
40326: PUSH
40327: LD_INT 2
40329: NEG
40330: PUSH
40331: LD_INT 1
40333: NEG
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: PUSH
40339: LD_INT 2
40341: NEG
40342: PUSH
40343: LD_INT 2
40345: NEG
40346: PUSH
40347: EMPTY
40348: LIST
40349: LIST
40350: PUSH
40351: LD_INT 3
40353: PUSH
40354: LD_INT 1
40356: PUSH
40357: EMPTY
40358: LIST
40359: LIST
40360: PUSH
40361: LD_INT 3
40363: PUSH
40364: LD_INT 2
40366: PUSH
40367: EMPTY
40368: LIST
40369: LIST
40370: PUSH
40371: LD_INT 2
40373: PUSH
40374: LD_INT 3
40376: PUSH
40377: EMPTY
40378: LIST
40379: LIST
40380: PUSH
40381: LD_INT 1
40383: PUSH
40384: LD_INT 3
40386: PUSH
40387: EMPTY
40388: LIST
40389: LIST
40390: PUSH
40391: EMPTY
40392: LIST
40393: LIST
40394: LIST
40395: LIST
40396: LIST
40397: LIST
40398: LIST
40399: LIST
40400: LIST
40401: LIST
40402: LIST
40403: LIST
40404: LIST
40405: LIST
40406: LIST
40407: LIST
40408: LIST
40409: LIST
40410: LIST
40411: LIST
40412: LIST
40413: LIST
40414: LIST
40415: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
40416: LD_ADDR_VAR 0 26
40420: PUSH
40421: LD_INT 0
40423: PUSH
40424: LD_INT 0
40426: PUSH
40427: EMPTY
40428: LIST
40429: LIST
40430: PUSH
40431: LD_INT 0
40433: PUSH
40434: LD_INT 1
40436: NEG
40437: PUSH
40438: EMPTY
40439: LIST
40440: LIST
40441: PUSH
40442: LD_INT 1
40444: PUSH
40445: LD_INT 0
40447: PUSH
40448: EMPTY
40449: LIST
40450: LIST
40451: PUSH
40452: LD_INT 1
40454: PUSH
40455: LD_INT 1
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: PUSH
40462: LD_INT 0
40464: PUSH
40465: LD_INT 1
40467: PUSH
40468: EMPTY
40469: LIST
40470: LIST
40471: PUSH
40472: LD_INT 1
40474: NEG
40475: PUSH
40476: LD_INT 0
40478: PUSH
40479: EMPTY
40480: LIST
40481: LIST
40482: PUSH
40483: LD_INT 1
40485: NEG
40486: PUSH
40487: LD_INT 1
40489: NEG
40490: PUSH
40491: EMPTY
40492: LIST
40493: LIST
40494: PUSH
40495: LD_INT 1
40497: NEG
40498: PUSH
40499: LD_INT 2
40501: NEG
40502: PUSH
40503: EMPTY
40504: LIST
40505: LIST
40506: PUSH
40507: LD_INT 0
40509: PUSH
40510: LD_INT 2
40512: NEG
40513: PUSH
40514: EMPTY
40515: LIST
40516: LIST
40517: PUSH
40518: LD_INT 1
40520: PUSH
40521: LD_INT 1
40523: NEG
40524: PUSH
40525: EMPTY
40526: LIST
40527: LIST
40528: PUSH
40529: LD_INT 2
40531: PUSH
40532: LD_INT 0
40534: PUSH
40535: EMPTY
40536: LIST
40537: LIST
40538: PUSH
40539: LD_INT 2
40541: PUSH
40542: LD_INT 1
40544: PUSH
40545: EMPTY
40546: LIST
40547: LIST
40548: PUSH
40549: LD_INT 2
40551: PUSH
40552: LD_INT 2
40554: PUSH
40555: EMPTY
40556: LIST
40557: LIST
40558: PUSH
40559: LD_INT 1
40561: PUSH
40562: LD_INT 2
40564: PUSH
40565: EMPTY
40566: LIST
40567: LIST
40568: PUSH
40569: LD_INT 0
40571: PUSH
40572: LD_INT 2
40574: PUSH
40575: EMPTY
40576: LIST
40577: LIST
40578: PUSH
40579: LD_INT 1
40581: NEG
40582: PUSH
40583: LD_INT 1
40585: PUSH
40586: EMPTY
40587: LIST
40588: LIST
40589: PUSH
40590: LD_INT 2
40592: NEG
40593: PUSH
40594: LD_INT 0
40596: PUSH
40597: EMPTY
40598: LIST
40599: LIST
40600: PUSH
40601: LD_INT 2
40603: NEG
40604: PUSH
40605: LD_INT 1
40607: NEG
40608: PUSH
40609: EMPTY
40610: LIST
40611: LIST
40612: PUSH
40613: LD_INT 2
40615: NEG
40616: PUSH
40617: LD_INT 2
40619: NEG
40620: PUSH
40621: EMPTY
40622: LIST
40623: LIST
40624: PUSH
40625: LD_INT 2
40627: PUSH
40628: LD_INT 3
40630: PUSH
40631: EMPTY
40632: LIST
40633: LIST
40634: PUSH
40635: LD_INT 1
40637: PUSH
40638: LD_INT 3
40640: PUSH
40641: EMPTY
40642: LIST
40643: LIST
40644: PUSH
40645: LD_INT 1
40647: NEG
40648: PUSH
40649: LD_INT 2
40651: PUSH
40652: EMPTY
40653: LIST
40654: LIST
40655: PUSH
40656: LD_INT 2
40658: NEG
40659: PUSH
40660: LD_INT 1
40662: PUSH
40663: EMPTY
40664: LIST
40665: LIST
40666: PUSH
40667: EMPTY
40668: LIST
40669: LIST
40670: LIST
40671: LIST
40672: LIST
40673: LIST
40674: LIST
40675: LIST
40676: LIST
40677: LIST
40678: LIST
40679: LIST
40680: LIST
40681: LIST
40682: LIST
40683: LIST
40684: LIST
40685: LIST
40686: LIST
40687: LIST
40688: LIST
40689: LIST
40690: LIST
40691: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40692: LD_ADDR_VAR 0 27
40696: PUSH
40697: LD_INT 0
40699: PUSH
40700: LD_INT 0
40702: PUSH
40703: EMPTY
40704: LIST
40705: LIST
40706: PUSH
40707: LD_INT 0
40709: PUSH
40710: LD_INT 1
40712: NEG
40713: PUSH
40714: EMPTY
40715: LIST
40716: LIST
40717: PUSH
40718: LD_INT 1
40720: PUSH
40721: LD_INT 0
40723: PUSH
40724: EMPTY
40725: LIST
40726: LIST
40727: PUSH
40728: LD_INT 1
40730: PUSH
40731: LD_INT 1
40733: PUSH
40734: EMPTY
40735: LIST
40736: LIST
40737: PUSH
40738: LD_INT 0
40740: PUSH
40741: LD_INT 1
40743: PUSH
40744: EMPTY
40745: LIST
40746: LIST
40747: PUSH
40748: LD_INT 1
40750: NEG
40751: PUSH
40752: LD_INT 0
40754: PUSH
40755: EMPTY
40756: LIST
40757: LIST
40758: PUSH
40759: LD_INT 1
40761: NEG
40762: PUSH
40763: LD_INT 1
40765: NEG
40766: PUSH
40767: EMPTY
40768: LIST
40769: LIST
40770: PUSH
40771: LD_INT 1
40773: NEG
40774: PUSH
40775: LD_INT 2
40777: NEG
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: PUSH
40783: LD_INT 0
40785: PUSH
40786: LD_INT 2
40788: NEG
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: PUSH
40794: LD_INT 1
40796: PUSH
40797: LD_INT 1
40799: NEG
40800: PUSH
40801: EMPTY
40802: LIST
40803: LIST
40804: PUSH
40805: LD_INT 2
40807: PUSH
40808: LD_INT 0
40810: PUSH
40811: EMPTY
40812: LIST
40813: LIST
40814: PUSH
40815: LD_INT 2
40817: PUSH
40818: LD_INT 1
40820: PUSH
40821: EMPTY
40822: LIST
40823: LIST
40824: PUSH
40825: LD_INT 2
40827: PUSH
40828: LD_INT 2
40830: PUSH
40831: EMPTY
40832: LIST
40833: LIST
40834: PUSH
40835: LD_INT 1
40837: PUSH
40838: LD_INT 2
40840: PUSH
40841: EMPTY
40842: LIST
40843: LIST
40844: PUSH
40845: LD_INT 0
40847: PUSH
40848: LD_INT 2
40850: PUSH
40851: EMPTY
40852: LIST
40853: LIST
40854: PUSH
40855: LD_INT 1
40857: NEG
40858: PUSH
40859: LD_INT 1
40861: PUSH
40862: EMPTY
40863: LIST
40864: LIST
40865: PUSH
40866: LD_INT 2
40868: NEG
40869: PUSH
40870: LD_INT 0
40872: PUSH
40873: EMPTY
40874: LIST
40875: LIST
40876: PUSH
40877: LD_INT 2
40879: NEG
40880: PUSH
40881: LD_INT 1
40883: NEG
40884: PUSH
40885: EMPTY
40886: LIST
40887: LIST
40888: PUSH
40889: LD_INT 2
40891: NEG
40892: PUSH
40893: LD_INT 2
40895: NEG
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: PUSH
40901: LD_INT 1
40903: NEG
40904: PUSH
40905: LD_INT 2
40907: PUSH
40908: EMPTY
40909: LIST
40910: LIST
40911: PUSH
40912: LD_INT 2
40914: NEG
40915: PUSH
40916: LD_INT 1
40918: PUSH
40919: EMPTY
40920: LIST
40921: LIST
40922: PUSH
40923: LD_INT 3
40925: NEG
40926: PUSH
40927: LD_INT 1
40929: NEG
40930: PUSH
40931: EMPTY
40932: LIST
40933: LIST
40934: PUSH
40935: LD_INT 3
40937: NEG
40938: PUSH
40939: LD_INT 2
40941: NEG
40942: PUSH
40943: EMPTY
40944: LIST
40945: LIST
40946: PUSH
40947: EMPTY
40948: LIST
40949: LIST
40950: LIST
40951: LIST
40952: LIST
40953: LIST
40954: LIST
40955: LIST
40956: LIST
40957: LIST
40958: LIST
40959: LIST
40960: LIST
40961: LIST
40962: LIST
40963: LIST
40964: LIST
40965: LIST
40966: LIST
40967: LIST
40968: LIST
40969: LIST
40970: LIST
40971: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40972: LD_ADDR_VAR 0 28
40976: PUSH
40977: LD_INT 0
40979: PUSH
40980: LD_INT 0
40982: PUSH
40983: EMPTY
40984: LIST
40985: LIST
40986: PUSH
40987: LD_INT 0
40989: PUSH
40990: LD_INT 1
40992: NEG
40993: PUSH
40994: EMPTY
40995: LIST
40996: LIST
40997: PUSH
40998: LD_INT 1
41000: PUSH
41001: LD_INT 0
41003: PUSH
41004: EMPTY
41005: LIST
41006: LIST
41007: PUSH
41008: LD_INT 1
41010: PUSH
41011: LD_INT 1
41013: PUSH
41014: EMPTY
41015: LIST
41016: LIST
41017: PUSH
41018: LD_INT 0
41020: PUSH
41021: LD_INT 1
41023: PUSH
41024: EMPTY
41025: LIST
41026: LIST
41027: PUSH
41028: LD_INT 1
41030: NEG
41031: PUSH
41032: LD_INT 0
41034: PUSH
41035: EMPTY
41036: LIST
41037: LIST
41038: PUSH
41039: LD_INT 1
41041: NEG
41042: PUSH
41043: LD_INT 1
41045: NEG
41046: PUSH
41047: EMPTY
41048: LIST
41049: LIST
41050: PUSH
41051: LD_INT 1
41053: NEG
41054: PUSH
41055: LD_INT 2
41057: NEG
41058: PUSH
41059: EMPTY
41060: LIST
41061: LIST
41062: PUSH
41063: LD_INT 0
41065: PUSH
41066: LD_INT 2
41068: NEG
41069: PUSH
41070: EMPTY
41071: LIST
41072: LIST
41073: PUSH
41074: LD_INT 1
41076: PUSH
41077: LD_INT 1
41079: NEG
41080: PUSH
41081: EMPTY
41082: LIST
41083: LIST
41084: PUSH
41085: LD_INT 2
41087: PUSH
41088: LD_INT 0
41090: PUSH
41091: EMPTY
41092: LIST
41093: LIST
41094: PUSH
41095: LD_INT 2
41097: PUSH
41098: LD_INT 1
41100: PUSH
41101: EMPTY
41102: LIST
41103: LIST
41104: PUSH
41105: LD_INT 2
41107: PUSH
41108: LD_INT 2
41110: PUSH
41111: EMPTY
41112: LIST
41113: LIST
41114: PUSH
41115: LD_INT 1
41117: PUSH
41118: LD_INT 2
41120: PUSH
41121: EMPTY
41122: LIST
41123: LIST
41124: PUSH
41125: LD_INT 0
41127: PUSH
41128: LD_INT 2
41130: PUSH
41131: EMPTY
41132: LIST
41133: LIST
41134: PUSH
41135: LD_INT 1
41137: NEG
41138: PUSH
41139: LD_INT 1
41141: PUSH
41142: EMPTY
41143: LIST
41144: LIST
41145: PUSH
41146: LD_INT 2
41148: NEG
41149: PUSH
41150: LD_INT 0
41152: PUSH
41153: EMPTY
41154: LIST
41155: LIST
41156: PUSH
41157: LD_INT 2
41159: NEG
41160: PUSH
41161: LD_INT 1
41163: NEG
41164: PUSH
41165: EMPTY
41166: LIST
41167: LIST
41168: PUSH
41169: LD_INT 2
41171: NEG
41172: PUSH
41173: LD_INT 2
41175: NEG
41176: PUSH
41177: EMPTY
41178: LIST
41179: LIST
41180: PUSH
41181: LD_INT 2
41183: NEG
41184: PUSH
41185: LD_INT 3
41187: NEG
41188: PUSH
41189: EMPTY
41190: LIST
41191: LIST
41192: PUSH
41193: LD_INT 1
41195: NEG
41196: PUSH
41197: LD_INT 3
41199: NEG
41200: PUSH
41201: EMPTY
41202: LIST
41203: LIST
41204: PUSH
41205: LD_INT 3
41207: NEG
41208: PUSH
41209: LD_INT 1
41211: NEG
41212: PUSH
41213: EMPTY
41214: LIST
41215: LIST
41216: PUSH
41217: LD_INT 3
41219: NEG
41220: PUSH
41221: LD_INT 2
41223: NEG
41224: PUSH
41225: EMPTY
41226: LIST
41227: LIST
41228: PUSH
41229: EMPTY
41230: LIST
41231: LIST
41232: LIST
41233: LIST
41234: LIST
41235: LIST
41236: LIST
41237: LIST
41238: LIST
41239: LIST
41240: LIST
41241: LIST
41242: LIST
41243: LIST
41244: LIST
41245: LIST
41246: LIST
41247: LIST
41248: LIST
41249: LIST
41250: LIST
41251: LIST
41252: LIST
41253: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41254: LD_ADDR_VAR 0 29
41258: PUSH
41259: LD_INT 0
41261: PUSH
41262: LD_INT 0
41264: PUSH
41265: EMPTY
41266: LIST
41267: LIST
41268: PUSH
41269: LD_INT 0
41271: PUSH
41272: LD_INT 1
41274: NEG
41275: PUSH
41276: EMPTY
41277: LIST
41278: LIST
41279: PUSH
41280: LD_INT 1
41282: PUSH
41283: LD_INT 0
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: PUSH
41290: LD_INT 1
41292: PUSH
41293: LD_INT 1
41295: PUSH
41296: EMPTY
41297: LIST
41298: LIST
41299: PUSH
41300: LD_INT 0
41302: PUSH
41303: LD_INT 1
41305: PUSH
41306: EMPTY
41307: LIST
41308: LIST
41309: PUSH
41310: LD_INT 1
41312: NEG
41313: PUSH
41314: LD_INT 0
41316: PUSH
41317: EMPTY
41318: LIST
41319: LIST
41320: PUSH
41321: LD_INT 1
41323: NEG
41324: PUSH
41325: LD_INT 1
41327: NEG
41328: PUSH
41329: EMPTY
41330: LIST
41331: LIST
41332: PUSH
41333: LD_INT 1
41335: NEG
41336: PUSH
41337: LD_INT 2
41339: NEG
41340: PUSH
41341: EMPTY
41342: LIST
41343: LIST
41344: PUSH
41345: LD_INT 0
41347: PUSH
41348: LD_INT 2
41350: NEG
41351: PUSH
41352: EMPTY
41353: LIST
41354: LIST
41355: PUSH
41356: LD_INT 1
41358: PUSH
41359: LD_INT 1
41361: NEG
41362: PUSH
41363: EMPTY
41364: LIST
41365: LIST
41366: PUSH
41367: LD_INT 2
41369: PUSH
41370: LD_INT 0
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: PUSH
41377: LD_INT 2
41379: PUSH
41380: LD_INT 1
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PUSH
41387: LD_INT 1
41389: PUSH
41390: LD_INT 2
41392: PUSH
41393: EMPTY
41394: LIST
41395: LIST
41396: PUSH
41397: LD_INT 0
41399: PUSH
41400: LD_INT 2
41402: PUSH
41403: EMPTY
41404: LIST
41405: LIST
41406: PUSH
41407: LD_INT 1
41409: NEG
41410: PUSH
41411: LD_INT 1
41413: PUSH
41414: EMPTY
41415: LIST
41416: LIST
41417: PUSH
41418: LD_INT 2
41420: NEG
41421: PUSH
41422: LD_INT 1
41424: NEG
41425: PUSH
41426: EMPTY
41427: LIST
41428: LIST
41429: PUSH
41430: LD_INT 2
41432: NEG
41433: PUSH
41434: LD_INT 2
41436: NEG
41437: PUSH
41438: EMPTY
41439: LIST
41440: LIST
41441: PUSH
41442: LD_INT 2
41444: NEG
41445: PUSH
41446: LD_INT 3
41448: NEG
41449: PUSH
41450: EMPTY
41451: LIST
41452: LIST
41453: PUSH
41454: LD_INT 2
41456: PUSH
41457: LD_INT 1
41459: NEG
41460: PUSH
41461: EMPTY
41462: LIST
41463: LIST
41464: PUSH
41465: LD_INT 3
41467: PUSH
41468: LD_INT 1
41470: PUSH
41471: EMPTY
41472: LIST
41473: LIST
41474: PUSH
41475: LD_INT 1
41477: PUSH
41478: LD_INT 3
41480: PUSH
41481: EMPTY
41482: LIST
41483: LIST
41484: PUSH
41485: LD_INT 1
41487: NEG
41488: PUSH
41489: LD_INT 2
41491: PUSH
41492: EMPTY
41493: LIST
41494: LIST
41495: PUSH
41496: LD_INT 3
41498: NEG
41499: PUSH
41500: LD_INT 2
41502: NEG
41503: PUSH
41504: EMPTY
41505: LIST
41506: LIST
41507: PUSH
41508: EMPTY
41509: LIST
41510: LIST
41511: LIST
41512: LIST
41513: LIST
41514: LIST
41515: LIST
41516: LIST
41517: LIST
41518: LIST
41519: LIST
41520: LIST
41521: LIST
41522: LIST
41523: LIST
41524: LIST
41525: LIST
41526: LIST
41527: LIST
41528: LIST
41529: LIST
41530: LIST
41531: LIST
41532: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41533: LD_ADDR_VAR 0 30
41537: PUSH
41538: LD_INT 0
41540: PUSH
41541: LD_INT 0
41543: PUSH
41544: EMPTY
41545: LIST
41546: LIST
41547: PUSH
41548: LD_INT 0
41550: PUSH
41551: LD_INT 1
41553: NEG
41554: PUSH
41555: EMPTY
41556: LIST
41557: LIST
41558: PUSH
41559: LD_INT 1
41561: PUSH
41562: LD_INT 0
41564: PUSH
41565: EMPTY
41566: LIST
41567: LIST
41568: PUSH
41569: LD_INT 1
41571: PUSH
41572: LD_INT 1
41574: PUSH
41575: EMPTY
41576: LIST
41577: LIST
41578: PUSH
41579: LD_INT 0
41581: PUSH
41582: LD_INT 1
41584: PUSH
41585: EMPTY
41586: LIST
41587: LIST
41588: PUSH
41589: LD_INT 1
41591: NEG
41592: PUSH
41593: LD_INT 0
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: PUSH
41600: LD_INT 1
41602: NEG
41603: PUSH
41604: LD_INT 1
41606: NEG
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: PUSH
41612: LD_INT 1
41614: NEG
41615: PUSH
41616: LD_INT 2
41618: NEG
41619: PUSH
41620: EMPTY
41621: LIST
41622: LIST
41623: PUSH
41624: LD_INT 0
41626: PUSH
41627: LD_INT 2
41629: NEG
41630: PUSH
41631: EMPTY
41632: LIST
41633: LIST
41634: PUSH
41635: LD_INT 1
41637: PUSH
41638: LD_INT 1
41640: NEG
41641: PUSH
41642: EMPTY
41643: LIST
41644: LIST
41645: PUSH
41646: LD_INT 2
41648: PUSH
41649: LD_INT 0
41651: PUSH
41652: EMPTY
41653: LIST
41654: LIST
41655: PUSH
41656: LD_INT 2
41658: PUSH
41659: LD_INT 1
41661: PUSH
41662: EMPTY
41663: LIST
41664: LIST
41665: PUSH
41666: LD_INT 2
41668: PUSH
41669: LD_INT 2
41671: PUSH
41672: EMPTY
41673: LIST
41674: LIST
41675: PUSH
41676: LD_INT 1
41678: PUSH
41679: LD_INT 2
41681: PUSH
41682: EMPTY
41683: LIST
41684: LIST
41685: PUSH
41686: LD_INT 1
41688: NEG
41689: PUSH
41690: LD_INT 1
41692: PUSH
41693: EMPTY
41694: LIST
41695: LIST
41696: PUSH
41697: LD_INT 2
41699: NEG
41700: PUSH
41701: LD_INT 0
41703: PUSH
41704: EMPTY
41705: LIST
41706: LIST
41707: PUSH
41708: LD_INT 2
41710: NEG
41711: PUSH
41712: LD_INT 1
41714: NEG
41715: PUSH
41716: EMPTY
41717: LIST
41718: LIST
41719: PUSH
41720: LD_INT 1
41722: NEG
41723: PUSH
41724: LD_INT 3
41726: NEG
41727: PUSH
41728: EMPTY
41729: LIST
41730: LIST
41731: PUSH
41732: LD_INT 1
41734: PUSH
41735: LD_INT 2
41737: NEG
41738: PUSH
41739: EMPTY
41740: LIST
41741: LIST
41742: PUSH
41743: LD_INT 3
41745: PUSH
41746: LD_INT 2
41748: PUSH
41749: EMPTY
41750: LIST
41751: LIST
41752: PUSH
41753: LD_INT 2
41755: PUSH
41756: LD_INT 3
41758: PUSH
41759: EMPTY
41760: LIST
41761: LIST
41762: PUSH
41763: LD_INT 2
41765: NEG
41766: PUSH
41767: LD_INT 1
41769: PUSH
41770: EMPTY
41771: LIST
41772: LIST
41773: PUSH
41774: LD_INT 3
41776: NEG
41777: PUSH
41778: LD_INT 1
41780: NEG
41781: PUSH
41782: EMPTY
41783: LIST
41784: LIST
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: LIST
41790: LIST
41791: LIST
41792: LIST
41793: LIST
41794: LIST
41795: LIST
41796: LIST
41797: LIST
41798: LIST
41799: LIST
41800: LIST
41801: LIST
41802: LIST
41803: LIST
41804: LIST
41805: LIST
41806: LIST
41807: LIST
41808: LIST
41809: LIST
41810: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41811: LD_ADDR_VAR 0 31
41815: PUSH
41816: LD_INT 0
41818: PUSH
41819: LD_INT 0
41821: PUSH
41822: EMPTY
41823: LIST
41824: LIST
41825: PUSH
41826: LD_INT 0
41828: PUSH
41829: LD_INT 1
41831: NEG
41832: PUSH
41833: EMPTY
41834: LIST
41835: LIST
41836: PUSH
41837: LD_INT 1
41839: PUSH
41840: LD_INT 0
41842: PUSH
41843: EMPTY
41844: LIST
41845: LIST
41846: PUSH
41847: LD_INT 1
41849: PUSH
41850: LD_INT 1
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: PUSH
41857: LD_INT 0
41859: PUSH
41860: LD_INT 1
41862: PUSH
41863: EMPTY
41864: LIST
41865: LIST
41866: PUSH
41867: LD_INT 1
41869: NEG
41870: PUSH
41871: LD_INT 0
41873: PUSH
41874: EMPTY
41875: LIST
41876: LIST
41877: PUSH
41878: LD_INT 1
41880: NEG
41881: PUSH
41882: LD_INT 1
41884: NEG
41885: PUSH
41886: EMPTY
41887: LIST
41888: LIST
41889: PUSH
41890: LD_INT 1
41892: NEG
41893: PUSH
41894: LD_INT 2
41896: NEG
41897: PUSH
41898: EMPTY
41899: LIST
41900: LIST
41901: PUSH
41902: LD_INT 1
41904: PUSH
41905: LD_INT 1
41907: NEG
41908: PUSH
41909: EMPTY
41910: LIST
41911: LIST
41912: PUSH
41913: LD_INT 2
41915: PUSH
41916: LD_INT 0
41918: PUSH
41919: EMPTY
41920: LIST
41921: LIST
41922: PUSH
41923: LD_INT 2
41925: PUSH
41926: LD_INT 1
41928: PUSH
41929: EMPTY
41930: LIST
41931: LIST
41932: PUSH
41933: LD_INT 2
41935: PUSH
41936: LD_INT 2
41938: PUSH
41939: EMPTY
41940: LIST
41941: LIST
41942: PUSH
41943: LD_INT 1
41945: PUSH
41946: LD_INT 2
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: PUSH
41953: LD_INT 0
41955: PUSH
41956: LD_INT 2
41958: PUSH
41959: EMPTY
41960: LIST
41961: LIST
41962: PUSH
41963: LD_INT 1
41965: NEG
41966: PUSH
41967: LD_INT 1
41969: PUSH
41970: EMPTY
41971: LIST
41972: LIST
41973: PUSH
41974: LD_INT 2
41976: NEG
41977: PUSH
41978: LD_INT 1
41980: NEG
41981: PUSH
41982: EMPTY
41983: LIST
41984: LIST
41985: PUSH
41986: LD_INT 2
41988: NEG
41989: PUSH
41990: LD_INT 2
41992: NEG
41993: PUSH
41994: EMPTY
41995: LIST
41996: LIST
41997: PUSH
41998: LD_INT 2
42000: NEG
42001: PUSH
42002: LD_INT 3
42004: NEG
42005: PUSH
42006: EMPTY
42007: LIST
42008: LIST
42009: PUSH
42010: LD_INT 2
42012: PUSH
42013: LD_INT 1
42015: NEG
42016: PUSH
42017: EMPTY
42018: LIST
42019: LIST
42020: PUSH
42021: LD_INT 3
42023: PUSH
42024: LD_INT 1
42026: PUSH
42027: EMPTY
42028: LIST
42029: LIST
42030: PUSH
42031: LD_INT 1
42033: PUSH
42034: LD_INT 3
42036: PUSH
42037: EMPTY
42038: LIST
42039: LIST
42040: PUSH
42041: LD_INT 1
42043: NEG
42044: PUSH
42045: LD_INT 2
42047: PUSH
42048: EMPTY
42049: LIST
42050: LIST
42051: PUSH
42052: LD_INT 3
42054: NEG
42055: PUSH
42056: LD_INT 2
42058: NEG
42059: PUSH
42060: EMPTY
42061: LIST
42062: LIST
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: LIST
42068: LIST
42069: LIST
42070: LIST
42071: LIST
42072: LIST
42073: LIST
42074: LIST
42075: LIST
42076: LIST
42077: LIST
42078: LIST
42079: LIST
42080: LIST
42081: LIST
42082: LIST
42083: LIST
42084: LIST
42085: LIST
42086: LIST
42087: LIST
42088: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42089: LD_ADDR_VAR 0 32
42093: PUSH
42094: LD_INT 0
42096: PUSH
42097: LD_INT 0
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: PUSH
42104: LD_INT 0
42106: PUSH
42107: LD_INT 1
42109: NEG
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: PUSH
42115: LD_INT 1
42117: PUSH
42118: LD_INT 0
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: PUSH
42125: LD_INT 1
42127: PUSH
42128: LD_INT 1
42130: PUSH
42131: EMPTY
42132: LIST
42133: LIST
42134: PUSH
42135: LD_INT 0
42137: PUSH
42138: LD_INT 1
42140: PUSH
42141: EMPTY
42142: LIST
42143: LIST
42144: PUSH
42145: LD_INT 1
42147: NEG
42148: PUSH
42149: LD_INT 0
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: PUSH
42156: LD_INT 1
42158: NEG
42159: PUSH
42160: LD_INT 1
42162: NEG
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: PUSH
42168: LD_INT 1
42170: NEG
42171: PUSH
42172: LD_INT 2
42174: NEG
42175: PUSH
42176: EMPTY
42177: LIST
42178: LIST
42179: PUSH
42180: LD_INT 0
42182: PUSH
42183: LD_INT 2
42185: NEG
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: PUSH
42191: LD_INT 1
42193: PUSH
42194: LD_INT 1
42196: NEG
42197: PUSH
42198: EMPTY
42199: LIST
42200: LIST
42201: PUSH
42202: LD_INT 2
42204: PUSH
42205: LD_INT 1
42207: PUSH
42208: EMPTY
42209: LIST
42210: LIST
42211: PUSH
42212: LD_INT 2
42214: PUSH
42215: LD_INT 2
42217: PUSH
42218: EMPTY
42219: LIST
42220: LIST
42221: PUSH
42222: LD_INT 1
42224: PUSH
42225: LD_INT 2
42227: PUSH
42228: EMPTY
42229: LIST
42230: LIST
42231: PUSH
42232: LD_INT 0
42234: PUSH
42235: LD_INT 2
42237: PUSH
42238: EMPTY
42239: LIST
42240: LIST
42241: PUSH
42242: LD_INT 1
42244: NEG
42245: PUSH
42246: LD_INT 1
42248: PUSH
42249: EMPTY
42250: LIST
42251: LIST
42252: PUSH
42253: LD_INT 2
42255: NEG
42256: PUSH
42257: LD_INT 0
42259: PUSH
42260: EMPTY
42261: LIST
42262: LIST
42263: PUSH
42264: LD_INT 2
42266: NEG
42267: PUSH
42268: LD_INT 1
42270: NEG
42271: PUSH
42272: EMPTY
42273: LIST
42274: LIST
42275: PUSH
42276: LD_INT 1
42278: NEG
42279: PUSH
42280: LD_INT 3
42282: NEG
42283: PUSH
42284: EMPTY
42285: LIST
42286: LIST
42287: PUSH
42288: LD_INT 1
42290: PUSH
42291: LD_INT 2
42293: NEG
42294: PUSH
42295: EMPTY
42296: LIST
42297: LIST
42298: PUSH
42299: LD_INT 3
42301: PUSH
42302: LD_INT 2
42304: PUSH
42305: EMPTY
42306: LIST
42307: LIST
42308: PUSH
42309: LD_INT 2
42311: PUSH
42312: LD_INT 3
42314: PUSH
42315: EMPTY
42316: LIST
42317: LIST
42318: PUSH
42319: LD_INT 2
42321: NEG
42322: PUSH
42323: LD_INT 1
42325: PUSH
42326: EMPTY
42327: LIST
42328: LIST
42329: PUSH
42330: LD_INT 3
42332: NEG
42333: PUSH
42334: LD_INT 1
42336: NEG
42337: PUSH
42338: EMPTY
42339: LIST
42340: LIST
42341: PUSH
42342: EMPTY
42343: LIST
42344: LIST
42345: LIST
42346: LIST
42347: LIST
42348: LIST
42349: LIST
42350: LIST
42351: LIST
42352: LIST
42353: LIST
42354: LIST
42355: LIST
42356: LIST
42357: LIST
42358: LIST
42359: LIST
42360: LIST
42361: LIST
42362: LIST
42363: LIST
42364: LIST
42365: LIST
42366: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42367: LD_ADDR_VAR 0 33
42371: PUSH
42372: LD_INT 0
42374: PUSH
42375: LD_INT 0
42377: PUSH
42378: EMPTY
42379: LIST
42380: LIST
42381: PUSH
42382: LD_INT 0
42384: PUSH
42385: LD_INT 1
42387: NEG
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: PUSH
42393: LD_INT 1
42395: PUSH
42396: LD_INT 0
42398: PUSH
42399: EMPTY
42400: LIST
42401: LIST
42402: PUSH
42403: LD_INT 1
42405: PUSH
42406: LD_INT 1
42408: PUSH
42409: EMPTY
42410: LIST
42411: LIST
42412: PUSH
42413: LD_INT 0
42415: PUSH
42416: LD_INT 1
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: PUSH
42423: LD_INT 1
42425: NEG
42426: PUSH
42427: LD_INT 0
42429: PUSH
42430: EMPTY
42431: LIST
42432: LIST
42433: PUSH
42434: LD_INT 1
42436: NEG
42437: PUSH
42438: LD_INT 1
42440: NEG
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: PUSH
42446: LD_INT 1
42448: NEG
42449: PUSH
42450: LD_INT 2
42452: NEG
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: PUSH
42458: LD_INT 1
42460: PUSH
42461: LD_INT 1
42463: NEG
42464: PUSH
42465: EMPTY
42466: LIST
42467: LIST
42468: PUSH
42469: LD_INT 2
42471: PUSH
42472: LD_INT 0
42474: PUSH
42475: EMPTY
42476: LIST
42477: LIST
42478: PUSH
42479: LD_INT 2
42481: PUSH
42482: LD_INT 1
42484: PUSH
42485: EMPTY
42486: LIST
42487: LIST
42488: PUSH
42489: LD_INT 1
42491: PUSH
42492: LD_INT 2
42494: PUSH
42495: EMPTY
42496: LIST
42497: LIST
42498: PUSH
42499: LD_INT 0
42501: PUSH
42502: LD_INT 2
42504: PUSH
42505: EMPTY
42506: LIST
42507: LIST
42508: PUSH
42509: LD_INT 1
42511: NEG
42512: PUSH
42513: LD_INT 1
42515: PUSH
42516: EMPTY
42517: LIST
42518: LIST
42519: PUSH
42520: LD_INT 2
42522: NEG
42523: PUSH
42524: LD_INT 0
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: PUSH
42531: LD_INT 2
42533: NEG
42534: PUSH
42535: LD_INT 1
42537: NEG
42538: PUSH
42539: EMPTY
42540: LIST
42541: LIST
42542: PUSH
42543: LD_INT 2
42545: NEG
42546: PUSH
42547: LD_INT 2
42549: NEG
42550: PUSH
42551: EMPTY
42552: LIST
42553: LIST
42554: PUSH
42555: LD_INT 2
42557: NEG
42558: PUSH
42559: LD_INT 3
42561: NEG
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: PUSH
42567: LD_INT 2
42569: PUSH
42570: LD_INT 1
42572: NEG
42573: PUSH
42574: EMPTY
42575: LIST
42576: LIST
42577: PUSH
42578: LD_INT 3
42580: PUSH
42581: LD_INT 1
42583: PUSH
42584: EMPTY
42585: LIST
42586: LIST
42587: PUSH
42588: LD_INT 1
42590: PUSH
42591: LD_INT 3
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: PUSH
42598: LD_INT 1
42600: NEG
42601: PUSH
42602: LD_INT 2
42604: PUSH
42605: EMPTY
42606: LIST
42607: LIST
42608: PUSH
42609: LD_INT 3
42611: NEG
42612: PUSH
42613: LD_INT 2
42615: NEG
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: PUSH
42621: EMPTY
42622: LIST
42623: LIST
42624: LIST
42625: LIST
42626: LIST
42627: LIST
42628: LIST
42629: LIST
42630: LIST
42631: LIST
42632: LIST
42633: LIST
42634: LIST
42635: LIST
42636: LIST
42637: LIST
42638: LIST
42639: LIST
42640: LIST
42641: LIST
42642: LIST
42643: LIST
42644: LIST
42645: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42646: LD_ADDR_VAR 0 34
42650: PUSH
42651: LD_INT 0
42653: PUSH
42654: LD_INT 0
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: PUSH
42661: LD_INT 0
42663: PUSH
42664: LD_INT 1
42666: NEG
42667: PUSH
42668: EMPTY
42669: LIST
42670: LIST
42671: PUSH
42672: LD_INT 1
42674: PUSH
42675: LD_INT 0
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: PUSH
42682: LD_INT 1
42684: PUSH
42685: LD_INT 1
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: PUSH
42692: LD_INT 0
42694: PUSH
42695: LD_INT 1
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: PUSH
42702: LD_INT 1
42704: NEG
42705: PUSH
42706: LD_INT 0
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: PUSH
42713: LD_INT 1
42715: NEG
42716: PUSH
42717: LD_INT 1
42719: NEG
42720: PUSH
42721: EMPTY
42722: LIST
42723: LIST
42724: PUSH
42725: LD_INT 1
42727: NEG
42728: PUSH
42729: LD_INT 2
42731: NEG
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: PUSH
42737: LD_INT 0
42739: PUSH
42740: LD_INT 2
42742: NEG
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: PUSH
42748: LD_INT 1
42750: PUSH
42751: LD_INT 1
42753: NEG
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: PUSH
42759: LD_INT 2
42761: PUSH
42762: LD_INT 1
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: PUSH
42769: LD_INT 2
42771: PUSH
42772: LD_INT 2
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PUSH
42779: LD_INT 1
42781: PUSH
42782: LD_INT 2
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: PUSH
42789: LD_INT 1
42791: NEG
42792: PUSH
42793: LD_INT 1
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: PUSH
42800: LD_INT 2
42802: NEG
42803: PUSH
42804: LD_INT 0
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: PUSH
42811: LD_INT 2
42813: NEG
42814: PUSH
42815: LD_INT 1
42817: NEG
42818: PUSH
42819: EMPTY
42820: LIST
42821: LIST
42822: PUSH
42823: LD_INT 2
42825: NEG
42826: PUSH
42827: LD_INT 2
42829: NEG
42830: PUSH
42831: EMPTY
42832: LIST
42833: LIST
42834: PUSH
42835: LD_INT 1
42837: NEG
42838: PUSH
42839: LD_INT 3
42841: NEG
42842: PUSH
42843: EMPTY
42844: LIST
42845: LIST
42846: PUSH
42847: LD_INT 1
42849: PUSH
42850: LD_INT 2
42852: NEG
42853: PUSH
42854: EMPTY
42855: LIST
42856: LIST
42857: PUSH
42858: LD_INT 3
42860: PUSH
42861: LD_INT 2
42863: PUSH
42864: EMPTY
42865: LIST
42866: LIST
42867: PUSH
42868: LD_INT 2
42870: PUSH
42871: LD_INT 3
42873: PUSH
42874: EMPTY
42875: LIST
42876: LIST
42877: PUSH
42878: LD_INT 2
42880: NEG
42881: PUSH
42882: LD_INT 1
42884: PUSH
42885: EMPTY
42886: LIST
42887: LIST
42888: PUSH
42889: LD_INT 3
42891: NEG
42892: PUSH
42893: LD_INT 1
42895: NEG
42896: PUSH
42897: EMPTY
42898: LIST
42899: LIST
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: LIST
42905: LIST
42906: LIST
42907: LIST
42908: LIST
42909: LIST
42910: LIST
42911: LIST
42912: LIST
42913: LIST
42914: LIST
42915: LIST
42916: LIST
42917: LIST
42918: LIST
42919: LIST
42920: LIST
42921: LIST
42922: LIST
42923: LIST
42924: LIST
42925: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42926: LD_ADDR_VAR 0 35
42930: PUSH
42931: LD_INT 0
42933: PUSH
42934: LD_INT 0
42936: PUSH
42937: EMPTY
42938: LIST
42939: LIST
42940: PUSH
42941: LD_INT 0
42943: PUSH
42944: LD_INT 1
42946: NEG
42947: PUSH
42948: EMPTY
42949: LIST
42950: LIST
42951: PUSH
42952: LD_INT 1
42954: PUSH
42955: LD_INT 0
42957: PUSH
42958: EMPTY
42959: LIST
42960: LIST
42961: PUSH
42962: LD_INT 1
42964: PUSH
42965: LD_INT 1
42967: PUSH
42968: EMPTY
42969: LIST
42970: LIST
42971: PUSH
42972: LD_INT 0
42974: PUSH
42975: LD_INT 1
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: PUSH
42982: LD_INT 1
42984: NEG
42985: PUSH
42986: LD_INT 0
42988: PUSH
42989: EMPTY
42990: LIST
42991: LIST
42992: PUSH
42993: LD_INT 1
42995: NEG
42996: PUSH
42997: LD_INT 1
42999: NEG
43000: PUSH
43001: EMPTY
43002: LIST
43003: LIST
43004: PUSH
43005: LD_INT 2
43007: PUSH
43008: LD_INT 1
43010: PUSH
43011: EMPTY
43012: LIST
43013: LIST
43014: PUSH
43015: LD_INT 2
43017: NEG
43018: PUSH
43019: LD_INT 1
43021: NEG
43022: PUSH
43023: EMPTY
43024: LIST
43025: LIST
43026: PUSH
43027: EMPTY
43028: LIST
43029: LIST
43030: LIST
43031: LIST
43032: LIST
43033: LIST
43034: LIST
43035: LIST
43036: LIST
43037: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
43038: LD_ADDR_VAR 0 36
43042: PUSH
43043: LD_INT 0
43045: PUSH
43046: LD_INT 0
43048: PUSH
43049: EMPTY
43050: LIST
43051: LIST
43052: PUSH
43053: LD_INT 0
43055: PUSH
43056: LD_INT 1
43058: NEG
43059: PUSH
43060: EMPTY
43061: LIST
43062: LIST
43063: PUSH
43064: LD_INT 1
43066: PUSH
43067: LD_INT 0
43069: PUSH
43070: EMPTY
43071: LIST
43072: LIST
43073: PUSH
43074: LD_INT 1
43076: PUSH
43077: LD_INT 1
43079: PUSH
43080: EMPTY
43081: LIST
43082: LIST
43083: PUSH
43084: LD_INT 0
43086: PUSH
43087: LD_INT 1
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: PUSH
43094: LD_INT 1
43096: NEG
43097: PUSH
43098: LD_INT 0
43100: PUSH
43101: EMPTY
43102: LIST
43103: LIST
43104: PUSH
43105: LD_INT 1
43107: NEG
43108: PUSH
43109: LD_INT 1
43111: NEG
43112: PUSH
43113: EMPTY
43114: LIST
43115: LIST
43116: PUSH
43117: LD_INT 1
43119: NEG
43120: PUSH
43121: LD_INT 2
43123: NEG
43124: PUSH
43125: EMPTY
43126: LIST
43127: LIST
43128: PUSH
43129: LD_INT 1
43131: PUSH
43132: LD_INT 2
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: LIST
43143: LIST
43144: LIST
43145: LIST
43146: LIST
43147: LIST
43148: LIST
43149: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
43150: LD_ADDR_VAR 0 37
43154: PUSH
43155: LD_INT 0
43157: PUSH
43158: LD_INT 0
43160: PUSH
43161: EMPTY
43162: LIST
43163: LIST
43164: PUSH
43165: LD_INT 0
43167: PUSH
43168: LD_INT 1
43170: NEG
43171: PUSH
43172: EMPTY
43173: LIST
43174: LIST
43175: PUSH
43176: LD_INT 1
43178: PUSH
43179: LD_INT 0
43181: PUSH
43182: EMPTY
43183: LIST
43184: LIST
43185: PUSH
43186: LD_INT 1
43188: PUSH
43189: LD_INT 1
43191: PUSH
43192: EMPTY
43193: LIST
43194: LIST
43195: PUSH
43196: LD_INT 0
43198: PUSH
43199: LD_INT 1
43201: PUSH
43202: EMPTY
43203: LIST
43204: LIST
43205: PUSH
43206: LD_INT 1
43208: NEG
43209: PUSH
43210: LD_INT 0
43212: PUSH
43213: EMPTY
43214: LIST
43215: LIST
43216: PUSH
43217: LD_INT 1
43219: NEG
43220: PUSH
43221: LD_INT 1
43223: NEG
43224: PUSH
43225: EMPTY
43226: LIST
43227: LIST
43228: PUSH
43229: LD_INT 1
43231: PUSH
43232: LD_INT 1
43234: NEG
43235: PUSH
43236: EMPTY
43237: LIST
43238: LIST
43239: PUSH
43240: LD_INT 1
43242: NEG
43243: PUSH
43244: LD_INT 1
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: PUSH
43251: EMPTY
43252: LIST
43253: LIST
43254: LIST
43255: LIST
43256: LIST
43257: LIST
43258: LIST
43259: LIST
43260: LIST
43261: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
43262: LD_ADDR_VAR 0 38
43266: PUSH
43267: LD_INT 0
43269: PUSH
43270: LD_INT 0
43272: PUSH
43273: EMPTY
43274: LIST
43275: LIST
43276: PUSH
43277: LD_INT 0
43279: PUSH
43280: LD_INT 1
43282: NEG
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: PUSH
43288: LD_INT 1
43290: PUSH
43291: LD_INT 0
43293: PUSH
43294: EMPTY
43295: LIST
43296: LIST
43297: PUSH
43298: LD_INT 1
43300: PUSH
43301: LD_INT 1
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: PUSH
43308: LD_INT 0
43310: PUSH
43311: LD_INT 1
43313: PUSH
43314: EMPTY
43315: LIST
43316: LIST
43317: PUSH
43318: LD_INT 1
43320: NEG
43321: PUSH
43322: LD_INT 0
43324: PUSH
43325: EMPTY
43326: LIST
43327: LIST
43328: PUSH
43329: LD_INT 1
43331: NEG
43332: PUSH
43333: LD_INT 1
43335: NEG
43336: PUSH
43337: EMPTY
43338: LIST
43339: LIST
43340: PUSH
43341: LD_INT 2
43343: PUSH
43344: LD_INT 1
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: PUSH
43351: LD_INT 2
43353: NEG
43354: PUSH
43355: LD_INT 1
43357: NEG
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: PUSH
43363: EMPTY
43364: LIST
43365: LIST
43366: LIST
43367: LIST
43368: LIST
43369: LIST
43370: LIST
43371: LIST
43372: LIST
43373: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
43374: LD_ADDR_VAR 0 39
43378: PUSH
43379: LD_INT 0
43381: PUSH
43382: LD_INT 0
43384: PUSH
43385: EMPTY
43386: LIST
43387: LIST
43388: PUSH
43389: LD_INT 0
43391: PUSH
43392: LD_INT 1
43394: NEG
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: PUSH
43400: LD_INT 1
43402: PUSH
43403: LD_INT 0
43405: PUSH
43406: EMPTY
43407: LIST
43408: LIST
43409: PUSH
43410: LD_INT 1
43412: PUSH
43413: LD_INT 1
43415: PUSH
43416: EMPTY
43417: LIST
43418: LIST
43419: PUSH
43420: LD_INT 0
43422: PUSH
43423: LD_INT 1
43425: PUSH
43426: EMPTY
43427: LIST
43428: LIST
43429: PUSH
43430: LD_INT 1
43432: NEG
43433: PUSH
43434: LD_INT 0
43436: PUSH
43437: EMPTY
43438: LIST
43439: LIST
43440: PUSH
43441: LD_INT 1
43443: NEG
43444: PUSH
43445: LD_INT 1
43447: NEG
43448: PUSH
43449: EMPTY
43450: LIST
43451: LIST
43452: PUSH
43453: LD_INT 1
43455: NEG
43456: PUSH
43457: LD_INT 2
43459: NEG
43460: PUSH
43461: EMPTY
43462: LIST
43463: LIST
43464: PUSH
43465: LD_INT 1
43467: PUSH
43468: LD_INT 2
43470: PUSH
43471: EMPTY
43472: LIST
43473: LIST
43474: PUSH
43475: EMPTY
43476: LIST
43477: LIST
43478: LIST
43479: LIST
43480: LIST
43481: LIST
43482: LIST
43483: LIST
43484: LIST
43485: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
43486: LD_ADDR_VAR 0 40
43490: PUSH
43491: LD_INT 0
43493: PUSH
43494: LD_INT 0
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: PUSH
43501: LD_INT 0
43503: PUSH
43504: LD_INT 1
43506: NEG
43507: PUSH
43508: EMPTY
43509: LIST
43510: LIST
43511: PUSH
43512: LD_INT 1
43514: PUSH
43515: LD_INT 0
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: PUSH
43522: LD_INT 1
43524: PUSH
43525: LD_INT 1
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: PUSH
43532: LD_INT 0
43534: PUSH
43535: LD_INT 1
43537: PUSH
43538: EMPTY
43539: LIST
43540: LIST
43541: PUSH
43542: LD_INT 1
43544: NEG
43545: PUSH
43546: LD_INT 0
43548: PUSH
43549: EMPTY
43550: LIST
43551: LIST
43552: PUSH
43553: LD_INT 1
43555: NEG
43556: PUSH
43557: LD_INT 1
43559: NEG
43560: PUSH
43561: EMPTY
43562: LIST
43563: LIST
43564: PUSH
43565: LD_INT 1
43567: PUSH
43568: LD_INT 1
43570: NEG
43571: PUSH
43572: EMPTY
43573: LIST
43574: LIST
43575: PUSH
43576: LD_INT 1
43578: NEG
43579: PUSH
43580: LD_INT 1
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: PUSH
43587: EMPTY
43588: LIST
43589: LIST
43590: LIST
43591: LIST
43592: LIST
43593: LIST
43594: LIST
43595: LIST
43596: LIST
43597: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43598: LD_ADDR_VAR 0 41
43602: PUSH
43603: LD_INT 0
43605: PUSH
43606: LD_INT 0
43608: PUSH
43609: EMPTY
43610: LIST
43611: LIST
43612: PUSH
43613: LD_INT 0
43615: PUSH
43616: LD_INT 1
43618: NEG
43619: PUSH
43620: EMPTY
43621: LIST
43622: LIST
43623: PUSH
43624: LD_INT 1
43626: PUSH
43627: LD_INT 0
43629: PUSH
43630: EMPTY
43631: LIST
43632: LIST
43633: PUSH
43634: LD_INT 1
43636: PUSH
43637: LD_INT 1
43639: PUSH
43640: EMPTY
43641: LIST
43642: LIST
43643: PUSH
43644: LD_INT 0
43646: PUSH
43647: LD_INT 1
43649: PUSH
43650: EMPTY
43651: LIST
43652: LIST
43653: PUSH
43654: LD_INT 1
43656: NEG
43657: PUSH
43658: LD_INT 0
43660: PUSH
43661: EMPTY
43662: LIST
43663: LIST
43664: PUSH
43665: LD_INT 1
43667: NEG
43668: PUSH
43669: LD_INT 1
43671: NEG
43672: PUSH
43673: EMPTY
43674: LIST
43675: LIST
43676: PUSH
43677: LD_INT 1
43679: NEG
43680: PUSH
43681: LD_INT 2
43683: NEG
43684: PUSH
43685: EMPTY
43686: LIST
43687: LIST
43688: PUSH
43689: LD_INT 1
43691: PUSH
43692: LD_INT 1
43694: NEG
43695: PUSH
43696: EMPTY
43697: LIST
43698: LIST
43699: PUSH
43700: LD_INT 2
43702: PUSH
43703: LD_INT 0
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: PUSH
43710: LD_INT 2
43712: PUSH
43713: LD_INT 1
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: PUSH
43720: LD_INT 2
43722: PUSH
43723: LD_INT 2
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: PUSH
43730: LD_INT 1
43732: PUSH
43733: LD_INT 2
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: PUSH
43740: LD_INT 1
43742: NEG
43743: PUSH
43744: LD_INT 1
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: PUSH
43751: LD_INT 2
43753: NEG
43754: PUSH
43755: LD_INT 0
43757: PUSH
43758: EMPTY
43759: LIST
43760: LIST
43761: PUSH
43762: LD_INT 2
43764: NEG
43765: PUSH
43766: LD_INT 1
43768: NEG
43769: PUSH
43770: EMPTY
43771: LIST
43772: LIST
43773: PUSH
43774: LD_INT 2
43776: NEG
43777: PUSH
43778: LD_INT 2
43780: NEG
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: PUSH
43786: LD_INT 2
43788: NEG
43789: PUSH
43790: LD_INT 3
43792: NEG
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: PUSH
43798: LD_INT 2
43800: PUSH
43801: LD_INT 1
43803: NEG
43804: PUSH
43805: EMPTY
43806: LIST
43807: LIST
43808: PUSH
43809: LD_INT 3
43811: PUSH
43812: LD_INT 0
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: PUSH
43819: LD_INT 3
43821: PUSH
43822: LD_INT 1
43824: PUSH
43825: EMPTY
43826: LIST
43827: LIST
43828: PUSH
43829: LD_INT 3
43831: PUSH
43832: LD_INT 2
43834: PUSH
43835: EMPTY
43836: LIST
43837: LIST
43838: PUSH
43839: LD_INT 3
43841: PUSH
43842: LD_INT 3
43844: PUSH
43845: EMPTY
43846: LIST
43847: LIST
43848: PUSH
43849: LD_INT 2
43851: PUSH
43852: LD_INT 3
43854: PUSH
43855: EMPTY
43856: LIST
43857: LIST
43858: PUSH
43859: LD_INT 2
43861: NEG
43862: PUSH
43863: LD_INT 1
43865: PUSH
43866: EMPTY
43867: LIST
43868: LIST
43869: PUSH
43870: LD_INT 3
43872: NEG
43873: PUSH
43874: LD_INT 0
43876: PUSH
43877: EMPTY
43878: LIST
43879: LIST
43880: PUSH
43881: LD_INT 3
43883: NEG
43884: PUSH
43885: LD_INT 1
43887: NEG
43888: PUSH
43889: EMPTY
43890: LIST
43891: LIST
43892: PUSH
43893: LD_INT 3
43895: NEG
43896: PUSH
43897: LD_INT 2
43899: NEG
43900: PUSH
43901: EMPTY
43902: LIST
43903: LIST
43904: PUSH
43905: LD_INT 3
43907: NEG
43908: PUSH
43909: LD_INT 3
43911: NEG
43912: PUSH
43913: EMPTY
43914: LIST
43915: LIST
43916: PUSH
43917: EMPTY
43918: LIST
43919: LIST
43920: LIST
43921: LIST
43922: LIST
43923: LIST
43924: LIST
43925: LIST
43926: LIST
43927: LIST
43928: LIST
43929: LIST
43930: LIST
43931: LIST
43932: LIST
43933: LIST
43934: LIST
43935: LIST
43936: LIST
43937: LIST
43938: LIST
43939: LIST
43940: LIST
43941: LIST
43942: LIST
43943: LIST
43944: LIST
43945: LIST
43946: LIST
43947: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43948: LD_ADDR_VAR 0 42
43952: PUSH
43953: LD_INT 0
43955: PUSH
43956: LD_INT 0
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: PUSH
43963: LD_INT 0
43965: PUSH
43966: LD_INT 1
43968: NEG
43969: PUSH
43970: EMPTY
43971: LIST
43972: LIST
43973: PUSH
43974: LD_INT 1
43976: PUSH
43977: LD_INT 0
43979: PUSH
43980: EMPTY
43981: LIST
43982: LIST
43983: PUSH
43984: LD_INT 1
43986: PUSH
43987: LD_INT 1
43989: PUSH
43990: EMPTY
43991: LIST
43992: LIST
43993: PUSH
43994: LD_INT 0
43996: PUSH
43997: LD_INT 1
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: PUSH
44004: LD_INT 1
44006: NEG
44007: PUSH
44008: LD_INT 0
44010: PUSH
44011: EMPTY
44012: LIST
44013: LIST
44014: PUSH
44015: LD_INT 1
44017: NEG
44018: PUSH
44019: LD_INT 1
44021: NEG
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: PUSH
44027: LD_INT 1
44029: NEG
44030: PUSH
44031: LD_INT 2
44033: NEG
44034: PUSH
44035: EMPTY
44036: LIST
44037: LIST
44038: PUSH
44039: LD_INT 0
44041: PUSH
44042: LD_INT 2
44044: NEG
44045: PUSH
44046: EMPTY
44047: LIST
44048: LIST
44049: PUSH
44050: LD_INT 1
44052: PUSH
44053: LD_INT 1
44055: NEG
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: PUSH
44061: LD_INT 2
44063: PUSH
44064: LD_INT 1
44066: PUSH
44067: EMPTY
44068: LIST
44069: LIST
44070: PUSH
44071: LD_INT 2
44073: PUSH
44074: LD_INT 2
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: PUSH
44081: LD_INT 1
44083: PUSH
44084: LD_INT 2
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: PUSH
44091: LD_INT 0
44093: PUSH
44094: LD_INT 2
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: PUSH
44101: LD_INT 1
44103: NEG
44104: PUSH
44105: LD_INT 1
44107: PUSH
44108: EMPTY
44109: LIST
44110: LIST
44111: PUSH
44112: LD_INT 2
44114: NEG
44115: PUSH
44116: LD_INT 1
44118: NEG
44119: PUSH
44120: EMPTY
44121: LIST
44122: LIST
44123: PUSH
44124: LD_INT 2
44126: NEG
44127: PUSH
44128: LD_INT 2
44130: NEG
44131: PUSH
44132: EMPTY
44133: LIST
44134: LIST
44135: PUSH
44136: LD_INT 2
44138: NEG
44139: PUSH
44140: LD_INT 3
44142: NEG
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: PUSH
44148: LD_INT 1
44150: NEG
44151: PUSH
44152: LD_INT 3
44154: NEG
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: PUSH
44160: LD_INT 0
44162: PUSH
44163: LD_INT 3
44165: NEG
44166: PUSH
44167: EMPTY
44168: LIST
44169: LIST
44170: PUSH
44171: LD_INT 1
44173: PUSH
44174: LD_INT 2
44176: NEG
44177: PUSH
44178: EMPTY
44179: LIST
44180: LIST
44181: PUSH
44182: LD_INT 3
44184: PUSH
44185: LD_INT 2
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: PUSH
44192: LD_INT 3
44194: PUSH
44195: LD_INT 3
44197: PUSH
44198: EMPTY
44199: LIST
44200: LIST
44201: PUSH
44202: LD_INT 2
44204: PUSH
44205: LD_INT 3
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: PUSH
44212: LD_INT 1
44214: PUSH
44215: LD_INT 3
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: PUSH
44222: LD_INT 0
44224: PUSH
44225: LD_INT 3
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: PUSH
44232: LD_INT 1
44234: NEG
44235: PUSH
44236: LD_INT 2
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: PUSH
44243: LD_INT 3
44245: NEG
44246: PUSH
44247: LD_INT 2
44249: NEG
44250: PUSH
44251: EMPTY
44252: LIST
44253: LIST
44254: PUSH
44255: LD_INT 3
44257: NEG
44258: PUSH
44259: LD_INT 3
44261: NEG
44262: PUSH
44263: EMPTY
44264: LIST
44265: LIST
44266: PUSH
44267: EMPTY
44268: LIST
44269: LIST
44270: LIST
44271: LIST
44272: LIST
44273: LIST
44274: LIST
44275: LIST
44276: LIST
44277: LIST
44278: LIST
44279: LIST
44280: LIST
44281: LIST
44282: LIST
44283: LIST
44284: LIST
44285: LIST
44286: LIST
44287: LIST
44288: LIST
44289: LIST
44290: LIST
44291: LIST
44292: LIST
44293: LIST
44294: LIST
44295: LIST
44296: LIST
44297: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44298: LD_ADDR_VAR 0 43
44302: PUSH
44303: LD_INT 0
44305: PUSH
44306: LD_INT 0
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: PUSH
44313: LD_INT 0
44315: PUSH
44316: LD_INT 1
44318: NEG
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: PUSH
44324: LD_INT 1
44326: PUSH
44327: LD_INT 0
44329: PUSH
44330: EMPTY
44331: LIST
44332: LIST
44333: PUSH
44334: LD_INT 1
44336: PUSH
44337: LD_INT 1
44339: PUSH
44340: EMPTY
44341: LIST
44342: LIST
44343: PUSH
44344: LD_INT 0
44346: PUSH
44347: LD_INT 1
44349: PUSH
44350: EMPTY
44351: LIST
44352: LIST
44353: PUSH
44354: LD_INT 1
44356: NEG
44357: PUSH
44358: LD_INT 0
44360: PUSH
44361: EMPTY
44362: LIST
44363: LIST
44364: PUSH
44365: LD_INT 1
44367: NEG
44368: PUSH
44369: LD_INT 1
44371: NEG
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: PUSH
44377: LD_INT 1
44379: NEG
44380: PUSH
44381: LD_INT 2
44383: NEG
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: PUSH
44389: LD_INT 0
44391: PUSH
44392: LD_INT 2
44394: NEG
44395: PUSH
44396: EMPTY
44397: LIST
44398: LIST
44399: PUSH
44400: LD_INT 1
44402: PUSH
44403: LD_INT 1
44405: NEG
44406: PUSH
44407: EMPTY
44408: LIST
44409: LIST
44410: PUSH
44411: LD_INT 2
44413: PUSH
44414: LD_INT 0
44416: PUSH
44417: EMPTY
44418: LIST
44419: LIST
44420: PUSH
44421: LD_INT 2
44423: PUSH
44424: LD_INT 1
44426: PUSH
44427: EMPTY
44428: LIST
44429: LIST
44430: PUSH
44431: LD_INT 1
44433: PUSH
44434: LD_INT 2
44436: PUSH
44437: EMPTY
44438: LIST
44439: LIST
44440: PUSH
44441: LD_INT 0
44443: PUSH
44444: LD_INT 2
44446: PUSH
44447: EMPTY
44448: LIST
44449: LIST
44450: PUSH
44451: LD_INT 1
44453: NEG
44454: PUSH
44455: LD_INT 1
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: PUSH
44462: LD_INT 2
44464: NEG
44465: PUSH
44466: LD_INT 0
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: PUSH
44473: LD_INT 2
44475: NEG
44476: PUSH
44477: LD_INT 1
44479: NEG
44480: PUSH
44481: EMPTY
44482: LIST
44483: LIST
44484: PUSH
44485: LD_INT 1
44487: NEG
44488: PUSH
44489: LD_INT 3
44491: NEG
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: PUSH
44497: LD_INT 0
44499: PUSH
44500: LD_INT 3
44502: NEG
44503: PUSH
44504: EMPTY
44505: LIST
44506: LIST
44507: PUSH
44508: LD_INT 1
44510: PUSH
44511: LD_INT 2
44513: NEG
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: PUSH
44519: LD_INT 2
44521: PUSH
44522: LD_INT 1
44524: NEG
44525: PUSH
44526: EMPTY
44527: LIST
44528: LIST
44529: PUSH
44530: LD_INT 3
44532: PUSH
44533: LD_INT 0
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: PUSH
44540: LD_INT 3
44542: PUSH
44543: LD_INT 1
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: LD_INT 1
44552: PUSH
44553: LD_INT 3
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: PUSH
44560: LD_INT 0
44562: PUSH
44563: LD_INT 3
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: PUSH
44570: LD_INT 1
44572: NEG
44573: PUSH
44574: LD_INT 2
44576: PUSH
44577: EMPTY
44578: LIST
44579: LIST
44580: PUSH
44581: LD_INT 2
44583: NEG
44584: PUSH
44585: LD_INT 1
44587: PUSH
44588: EMPTY
44589: LIST
44590: LIST
44591: PUSH
44592: LD_INT 3
44594: NEG
44595: PUSH
44596: LD_INT 0
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: PUSH
44603: LD_INT 3
44605: NEG
44606: PUSH
44607: LD_INT 1
44609: NEG
44610: PUSH
44611: EMPTY
44612: LIST
44613: LIST
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: LIST
44619: LIST
44620: LIST
44621: LIST
44622: LIST
44623: LIST
44624: LIST
44625: LIST
44626: LIST
44627: LIST
44628: LIST
44629: LIST
44630: LIST
44631: LIST
44632: LIST
44633: LIST
44634: LIST
44635: LIST
44636: LIST
44637: LIST
44638: LIST
44639: LIST
44640: LIST
44641: LIST
44642: LIST
44643: LIST
44644: LIST
44645: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44646: LD_ADDR_VAR 0 44
44650: PUSH
44651: LD_INT 0
44653: PUSH
44654: LD_INT 0
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: PUSH
44661: LD_INT 0
44663: PUSH
44664: LD_INT 1
44666: NEG
44667: PUSH
44668: EMPTY
44669: LIST
44670: LIST
44671: PUSH
44672: LD_INT 1
44674: PUSH
44675: LD_INT 0
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: PUSH
44682: LD_INT 1
44684: PUSH
44685: LD_INT 1
44687: PUSH
44688: EMPTY
44689: LIST
44690: LIST
44691: PUSH
44692: LD_INT 0
44694: PUSH
44695: LD_INT 1
44697: PUSH
44698: EMPTY
44699: LIST
44700: LIST
44701: PUSH
44702: LD_INT 1
44704: NEG
44705: PUSH
44706: LD_INT 0
44708: PUSH
44709: EMPTY
44710: LIST
44711: LIST
44712: PUSH
44713: LD_INT 1
44715: NEG
44716: PUSH
44717: LD_INT 1
44719: NEG
44720: PUSH
44721: EMPTY
44722: LIST
44723: LIST
44724: PUSH
44725: LD_INT 1
44727: NEG
44728: PUSH
44729: LD_INT 2
44731: NEG
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: PUSH
44737: LD_INT 1
44739: PUSH
44740: LD_INT 1
44742: NEG
44743: PUSH
44744: EMPTY
44745: LIST
44746: LIST
44747: PUSH
44748: LD_INT 2
44750: PUSH
44751: LD_INT 0
44753: PUSH
44754: EMPTY
44755: LIST
44756: LIST
44757: PUSH
44758: LD_INT 2
44760: PUSH
44761: LD_INT 1
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: PUSH
44768: LD_INT 2
44770: PUSH
44771: LD_INT 2
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: PUSH
44778: LD_INT 1
44780: PUSH
44781: LD_INT 2
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: LD_INT 1
44790: NEG
44791: PUSH
44792: LD_INT 1
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: PUSH
44799: LD_INT 2
44801: NEG
44802: PUSH
44803: LD_INT 0
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: PUSH
44810: LD_INT 2
44812: NEG
44813: PUSH
44814: LD_INT 1
44816: NEG
44817: PUSH
44818: EMPTY
44819: LIST
44820: LIST
44821: PUSH
44822: LD_INT 2
44824: NEG
44825: PUSH
44826: LD_INT 2
44828: NEG
44829: PUSH
44830: EMPTY
44831: LIST
44832: LIST
44833: PUSH
44834: LD_INT 2
44836: NEG
44837: PUSH
44838: LD_INT 3
44840: NEG
44841: PUSH
44842: EMPTY
44843: LIST
44844: LIST
44845: PUSH
44846: LD_INT 2
44848: PUSH
44849: LD_INT 1
44851: NEG
44852: PUSH
44853: EMPTY
44854: LIST
44855: LIST
44856: PUSH
44857: LD_INT 3
44859: PUSH
44860: LD_INT 0
44862: PUSH
44863: EMPTY
44864: LIST
44865: LIST
44866: PUSH
44867: LD_INT 3
44869: PUSH
44870: LD_INT 1
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: PUSH
44877: LD_INT 3
44879: PUSH
44880: LD_INT 2
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: PUSH
44887: LD_INT 3
44889: PUSH
44890: LD_INT 3
44892: PUSH
44893: EMPTY
44894: LIST
44895: LIST
44896: PUSH
44897: LD_INT 2
44899: PUSH
44900: LD_INT 3
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: PUSH
44907: LD_INT 2
44909: NEG
44910: PUSH
44911: LD_INT 1
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: PUSH
44918: LD_INT 3
44920: NEG
44921: PUSH
44922: LD_INT 0
44924: PUSH
44925: EMPTY
44926: LIST
44927: LIST
44928: PUSH
44929: LD_INT 3
44931: NEG
44932: PUSH
44933: LD_INT 1
44935: NEG
44936: PUSH
44937: EMPTY
44938: LIST
44939: LIST
44940: PUSH
44941: LD_INT 3
44943: NEG
44944: PUSH
44945: LD_INT 2
44947: NEG
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: PUSH
44953: LD_INT 3
44955: NEG
44956: PUSH
44957: LD_INT 3
44959: NEG
44960: PUSH
44961: EMPTY
44962: LIST
44963: LIST
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: LIST
44969: LIST
44970: LIST
44971: LIST
44972: LIST
44973: LIST
44974: LIST
44975: LIST
44976: LIST
44977: LIST
44978: LIST
44979: LIST
44980: LIST
44981: LIST
44982: LIST
44983: LIST
44984: LIST
44985: LIST
44986: LIST
44987: LIST
44988: LIST
44989: LIST
44990: LIST
44991: LIST
44992: LIST
44993: LIST
44994: LIST
44995: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44996: LD_ADDR_VAR 0 45
45000: PUSH
45001: LD_INT 0
45003: PUSH
45004: LD_INT 0
45006: PUSH
45007: EMPTY
45008: LIST
45009: LIST
45010: PUSH
45011: LD_INT 0
45013: PUSH
45014: LD_INT 1
45016: NEG
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: PUSH
45022: LD_INT 1
45024: PUSH
45025: LD_INT 0
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: PUSH
45032: LD_INT 1
45034: PUSH
45035: LD_INT 1
45037: PUSH
45038: EMPTY
45039: LIST
45040: LIST
45041: PUSH
45042: LD_INT 0
45044: PUSH
45045: LD_INT 1
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: LD_INT 1
45054: NEG
45055: PUSH
45056: LD_INT 0
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: PUSH
45063: LD_INT 1
45065: NEG
45066: PUSH
45067: LD_INT 1
45069: NEG
45070: PUSH
45071: EMPTY
45072: LIST
45073: LIST
45074: PUSH
45075: LD_INT 1
45077: NEG
45078: PUSH
45079: LD_INT 2
45081: NEG
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: PUSH
45087: LD_INT 0
45089: PUSH
45090: LD_INT 2
45092: NEG
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: PUSH
45098: LD_INT 1
45100: PUSH
45101: LD_INT 1
45103: NEG
45104: PUSH
45105: EMPTY
45106: LIST
45107: LIST
45108: PUSH
45109: LD_INT 2
45111: PUSH
45112: LD_INT 1
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: PUSH
45119: LD_INT 2
45121: PUSH
45122: LD_INT 2
45124: PUSH
45125: EMPTY
45126: LIST
45127: LIST
45128: PUSH
45129: LD_INT 1
45131: PUSH
45132: LD_INT 2
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: PUSH
45139: LD_INT 0
45141: PUSH
45142: LD_INT 2
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: PUSH
45149: LD_INT 1
45151: NEG
45152: PUSH
45153: LD_INT 1
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: PUSH
45160: LD_INT 2
45162: NEG
45163: PUSH
45164: LD_INT 1
45166: NEG
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: PUSH
45172: LD_INT 2
45174: NEG
45175: PUSH
45176: LD_INT 2
45178: NEG
45179: PUSH
45180: EMPTY
45181: LIST
45182: LIST
45183: PUSH
45184: LD_INT 2
45186: NEG
45187: PUSH
45188: LD_INT 3
45190: NEG
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: PUSH
45196: LD_INT 1
45198: NEG
45199: PUSH
45200: LD_INT 3
45202: NEG
45203: PUSH
45204: EMPTY
45205: LIST
45206: LIST
45207: PUSH
45208: LD_INT 0
45210: PUSH
45211: LD_INT 3
45213: NEG
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: PUSH
45219: LD_INT 1
45221: PUSH
45222: LD_INT 2
45224: NEG
45225: PUSH
45226: EMPTY
45227: LIST
45228: LIST
45229: PUSH
45230: LD_INT 3
45232: PUSH
45233: LD_INT 2
45235: PUSH
45236: EMPTY
45237: LIST
45238: LIST
45239: PUSH
45240: LD_INT 3
45242: PUSH
45243: LD_INT 3
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: PUSH
45250: LD_INT 2
45252: PUSH
45253: LD_INT 3
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: PUSH
45260: LD_INT 1
45262: PUSH
45263: LD_INT 3
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: PUSH
45270: LD_INT 0
45272: PUSH
45273: LD_INT 3
45275: PUSH
45276: EMPTY
45277: LIST
45278: LIST
45279: PUSH
45280: LD_INT 1
45282: NEG
45283: PUSH
45284: LD_INT 2
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: PUSH
45291: LD_INT 3
45293: NEG
45294: PUSH
45295: LD_INT 2
45297: NEG
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: PUSH
45303: LD_INT 3
45305: NEG
45306: PUSH
45307: LD_INT 3
45309: NEG
45310: PUSH
45311: EMPTY
45312: LIST
45313: LIST
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: LIST
45319: LIST
45320: LIST
45321: LIST
45322: LIST
45323: LIST
45324: LIST
45325: LIST
45326: LIST
45327: LIST
45328: LIST
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: LIST
45337: LIST
45338: LIST
45339: LIST
45340: LIST
45341: LIST
45342: LIST
45343: LIST
45344: LIST
45345: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45346: LD_ADDR_VAR 0 46
45350: PUSH
45351: LD_INT 0
45353: PUSH
45354: LD_INT 0
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: PUSH
45361: LD_INT 0
45363: PUSH
45364: LD_INT 1
45366: NEG
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: PUSH
45372: LD_INT 1
45374: PUSH
45375: LD_INT 0
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: PUSH
45382: LD_INT 1
45384: PUSH
45385: LD_INT 1
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: PUSH
45392: LD_INT 0
45394: PUSH
45395: LD_INT 1
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: PUSH
45402: LD_INT 1
45404: NEG
45405: PUSH
45406: LD_INT 0
45408: PUSH
45409: EMPTY
45410: LIST
45411: LIST
45412: PUSH
45413: LD_INT 1
45415: NEG
45416: PUSH
45417: LD_INT 1
45419: NEG
45420: PUSH
45421: EMPTY
45422: LIST
45423: LIST
45424: PUSH
45425: LD_INT 1
45427: NEG
45428: PUSH
45429: LD_INT 2
45431: NEG
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: PUSH
45437: LD_INT 0
45439: PUSH
45440: LD_INT 2
45442: NEG
45443: PUSH
45444: EMPTY
45445: LIST
45446: LIST
45447: PUSH
45448: LD_INT 1
45450: PUSH
45451: LD_INT 1
45453: NEG
45454: PUSH
45455: EMPTY
45456: LIST
45457: LIST
45458: PUSH
45459: LD_INT 2
45461: PUSH
45462: LD_INT 0
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: PUSH
45469: LD_INT 2
45471: PUSH
45472: LD_INT 1
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: PUSH
45479: LD_INT 1
45481: PUSH
45482: LD_INT 2
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: PUSH
45489: LD_INT 0
45491: PUSH
45492: LD_INT 2
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: PUSH
45499: LD_INT 1
45501: NEG
45502: PUSH
45503: LD_INT 1
45505: PUSH
45506: EMPTY
45507: LIST
45508: LIST
45509: PUSH
45510: LD_INT 2
45512: NEG
45513: PUSH
45514: LD_INT 0
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: PUSH
45521: LD_INT 2
45523: NEG
45524: PUSH
45525: LD_INT 1
45527: NEG
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: PUSH
45533: LD_INT 1
45535: NEG
45536: PUSH
45537: LD_INT 3
45539: NEG
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: PUSH
45545: LD_INT 0
45547: PUSH
45548: LD_INT 3
45550: NEG
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: PUSH
45556: LD_INT 1
45558: PUSH
45559: LD_INT 2
45561: NEG
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: PUSH
45567: LD_INT 2
45569: PUSH
45570: LD_INT 1
45572: NEG
45573: PUSH
45574: EMPTY
45575: LIST
45576: LIST
45577: PUSH
45578: LD_INT 3
45580: PUSH
45581: LD_INT 0
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: PUSH
45588: LD_INT 3
45590: PUSH
45591: LD_INT 1
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: PUSH
45598: LD_INT 1
45600: PUSH
45601: LD_INT 3
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: PUSH
45608: LD_INT 0
45610: PUSH
45611: LD_INT 3
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: PUSH
45618: LD_INT 1
45620: NEG
45621: PUSH
45622: LD_INT 2
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: PUSH
45629: LD_INT 2
45631: NEG
45632: PUSH
45633: LD_INT 1
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: PUSH
45640: LD_INT 3
45642: NEG
45643: PUSH
45644: LD_INT 0
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: PUSH
45651: LD_INT 3
45653: NEG
45654: PUSH
45655: LD_INT 1
45657: NEG
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: PUSH
45663: EMPTY
45664: LIST
45665: LIST
45666: LIST
45667: LIST
45668: LIST
45669: LIST
45670: LIST
45671: LIST
45672: LIST
45673: LIST
45674: LIST
45675: LIST
45676: LIST
45677: LIST
45678: LIST
45679: LIST
45680: LIST
45681: LIST
45682: LIST
45683: LIST
45684: LIST
45685: LIST
45686: LIST
45687: LIST
45688: LIST
45689: LIST
45690: LIST
45691: LIST
45692: LIST
45693: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45694: LD_ADDR_VAR 0 47
45698: PUSH
45699: LD_INT 0
45701: PUSH
45702: LD_INT 0
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: PUSH
45709: LD_INT 0
45711: PUSH
45712: LD_INT 1
45714: NEG
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: PUSH
45720: LD_INT 1
45722: PUSH
45723: LD_INT 0
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: PUSH
45730: LD_INT 1
45732: PUSH
45733: LD_INT 1
45735: PUSH
45736: EMPTY
45737: LIST
45738: LIST
45739: PUSH
45740: LD_INT 0
45742: PUSH
45743: LD_INT 1
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: PUSH
45750: LD_INT 1
45752: NEG
45753: PUSH
45754: LD_INT 0
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: PUSH
45761: LD_INT 1
45763: NEG
45764: PUSH
45765: LD_INT 1
45767: NEG
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: LD_INT 1
45775: NEG
45776: PUSH
45777: LD_INT 2
45779: NEG
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: PUSH
45785: LD_INT 0
45787: PUSH
45788: LD_INT 2
45790: NEG
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: PUSH
45796: LD_INT 1
45798: PUSH
45799: LD_INT 1
45801: NEG
45802: PUSH
45803: EMPTY
45804: LIST
45805: LIST
45806: PUSH
45807: LD_INT 2
45809: NEG
45810: PUSH
45811: LD_INT 1
45813: NEG
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: PUSH
45819: LD_INT 2
45821: NEG
45822: PUSH
45823: LD_INT 2
45825: NEG
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: LIST
45835: LIST
45836: LIST
45837: LIST
45838: LIST
45839: LIST
45840: LIST
45841: LIST
45842: LIST
45843: LIST
45844: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
45845: LD_ADDR_VAR 0 48
45849: PUSH
45850: LD_INT 0
45852: PUSH
45853: LD_INT 0
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 0
45862: PUSH
45863: LD_INT 1
45865: NEG
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: PUSH
45871: LD_INT 1
45873: PUSH
45874: LD_INT 0
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: PUSH
45881: LD_INT 1
45883: PUSH
45884: LD_INT 1
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: PUSH
45891: LD_INT 0
45893: PUSH
45894: LD_INT 1
45896: PUSH
45897: EMPTY
45898: LIST
45899: LIST
45900: PUSH
45901: LD_INT 1
45903: NEG
45904: PUSH
45905: LD_INT 0
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: PUSH
45912: LD_INT 1
45914: NEG
45915: PUSH
45916: LD_INT 1
45918: NEG
45919: PUSH
45920: EMPTY
45921: LIST
45922: LIST
45923: PUSH
45924: LD_INT 1
45926: NEG
45927: PUSH
45928: LD_INT 2
45930: NEG
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: LD_INT 0
45938: PUSH
45939: LD_INT 2
45941: NEG
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: PUSH
45947: LD_INT 1
45949: PUSH
45950: LD_INT 1
45952: NEG
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: PUSH
45958: LD_INT 2
45960: PUSH
45961: LD_INT 0
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: LD_INT 2
45970: PUSH
45971: LD_INT 1
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: LIST
45982: LIST
45983: LIST
45984: LIST
45985: LIST
45986: LIST
45987: LIST
45988: LIST
45989: LIST
45990: LIST
45991: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45992: LD_ADDR_VAR 0 49
45996: PUSH
45997: LD_INT 0
45999: PUSH
46000: LD_INT 0
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: PUSH
46007: LD_INT 0
46009: PUSH
46010: LD_INT 1
46012: NEG
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 1
46020: PUSH
46021: LD_INT 0
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: PUSH
46028: LD_INT 1
46030: PUSH
46031: LD_INT 1
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: PUSH
46038: LD_INT 0
46040: PUSH
46041: LD_INT 1
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: PUSH
46048: LD_INT 1
46050: NEG
46051: PUSH
46052: LD_INT 0
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: PUSH
46059: LD_INT 1
46061: NEG
46062: PUSH
46063: LD_INT 1
46065: NEG
46066: PUSH
46067: EMPTY
46068: LIST
46069: LIST
46070: PUSH
46071: LD_INT 1
46073: PUSH
46074: LD_INT 1
46076: NEG
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: PUSH
46082: LD_INT 2
46084: PUSH
46085: LD_INT 0
46087: PUSH
46088: EMPTY
46089: LIST
46090: LIST
46091: PUSH
46092: LD_INT 2
46094: PUSH
46095: LD_INT 1
46097: PUSH
46098: EMPTY
46099: LIST
46100: LIST
46101: PUSH
46102: LD_INT 2
46104: PUSH
46105: LD_INT 2
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: PUSH
46112: LD_INT 1
46114: PUSH
46115: LD_INT 2
46117: PUSH
46118: EMPTY
46119: LIST
46120: LIST
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: LIST
46126: LIST
46127: LIST
46128: LIST
46129: LIST
46130: LIST
46131: LIST
46132: LIST
46133: LIST
46134: LIST
46135: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
46136: LD_ADDR_VAR 0 50
46140: PUSH
46141: LD_INT 0
46143: PUSH
46144: LD_INT 0
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: PUSH
46151: LD_INT 0
46153: PUSH
46154: LD_INT 1
46156: NEG
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: LD_INT 1
46164: PUSH
46165: LD_INT 0
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: PUSH
46172: LD_INT 1
46174: PUSH
46175: LD_INT 1
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: LD_INT 0
46184: PUSH
46185: LD_INT 1
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: PUSH
46192: LD_INT 1
46194: NEG
46195: PUSH
46196: LD_INT 0
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: PUSH
46203: LD_INT 1
46205: NEG
46206: PUSH
46207: LD_INT 1
46209: NEG
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: LD_INT 2
46217: PUSH
46218: LD_INT 1
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: LD_INT 2
46227: PUSH
46228: LD_INT 2
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 1
46237: PUSH
46238: LD_INT 2
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: LD_INT 0
46247: PUSH
46248: LD_INT 2
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: PUSH
46255: LD_INT 1
46257: NEG
46258: PUSH
46259: LD_INT 1
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: LIST
46270: LIST
46271: LIST
46272: LIST
46273: LIST
46274: LIST
46275: LIST
46276: LIST
46277: LIST
46278: LIST
46279: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
46280: LD_ADDR_VAR 0 51
46284: PUSH
46285: LD_INT 0
46287: PUSH
46288: LD_INT 0
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: PUSH
46295: LD_INT 0
46297: PUSH
46298: LD_INT 1
46300: NEG
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 1
46308: PUSH
46309: LD_INT 0
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: PUSH
46316: LD_INT 1
46318: PUSH
46319: LD_INT 1
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: PUSH
46326: LD_INT 0
46328: PUSH
46329: LD_INT 1
46331: PUSH
46332: EMPTY
46333: LIST
46334: LIST
46335: PUSH
46336: LD_INT 1
46338: NEG
46339: PUSH
46340: LD_INT 0
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: PUSH
46347: LD_INT 1
46349: NEG
46350: PUSH
46351: LD_INT 1
46353: NEG
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: PUSH
46359: LD_INT 1
46361: PUSH
46362: LD_INT 2
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: LD_INT 0
46371: PUSH
46372: LD_INT 2
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 1
46381: NEG
46382: PUSH
46383: LD_INT 1
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: LD_INT 2
46392: NEG
46393: PUSH
46394: LD_INT 0
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: PUSH
46401: LD_INT 2
46403: NEG
46404: PUSH
46405: LD_INT 1
46407: NEG
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: PUSH
46413: EMPTY
46414: LIST
46415: LIST
46416: LIST
46417: LIST
46418: LIST
46419: LIST
46420: LIST
46421: LIST
46422: LIST
46423: LIST
46424: LIST
46425: LIST
46426: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46427: LD_ADDR_VAR 0 52
46431: PUSH
46432: LD_INT 0
46434: PUSH
46435: LD_INT 0
46437: PUSH
46438: EMPTY
46439: LIST
46440: LIST
46441: PUSH
46442: LD_INT 0
46444: PUSH
46445: LD_INT 1
46447: NEG
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: PUSH
46453: LD_INT 1
46455: PUSH
46456: LD_INT 0
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: PUSH
46463: LD_INT 1
46465: PUSH
46466: LD_INT 1
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: PUSH
46473: LD_INT 0
46475: PUSH
46476: LD_INT 1
46478: PUSH
46479: EMPTY
46480: LIST
46481: LIST
46482: PUSH
46483: LD_INT 1
46485: NEG
46486: PUSH
46487: LD_INT 0
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: PUSH
46494: LD_INT 1
46496: NEG
46497: PUSH
46498: LD_INT 1
46500: NEG
46501: PUSH
46502: EMPTY
46503: LIST
46504: LIST
46505: PUSH
46506: LD_INT 1
46508: NEG
46509: PUSH
46510: LD_INT 2
46512: NEG
46513: PUSH
46514: EMPTY
46515: LIST
46516: LIST
46517: PUSH
46518: LD_INT 1
46520: NEG
46521: PUSH
46522: LD_INT 1
46524: PUSH
46525: EMPTY
46526: LIST
46527: LIST
46528: PUSH
46529: LD_INT 2
46531: NEG
46532: PUSH
46533: LD_INT 0
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: PUSH
46540: LD_INT 2
46542: NEG
46543: PUSH
46544: LD_INT 1
46546: NEG
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: LD_INT 2
46554: NEG
46555: PUSH
46556: LD_INT 2
46558: NEG
46559: PUSH
46560: EMPTY
46561: LIST
46562: LIST
46563: PUSH
46564: EMPTY
46565: LIST
46566: LIST
46567: LIST
46568: LIST
46569: LIST
46570: LIST
46571: LIST
46572: LIST
46573: LIST
46574: LIST
46575: LIST
46576: LIST
46577: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46578: LD_ADDR_VAR 0 53
46582: PUSH
46583: LD_INT 0
46585: PUSH
46586: LD_INT 0
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: PUSH
46593: LD_INT 0
46595: PUSH
46596: LD_INT 1
46598: NEG
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: PUSH
46604: LD_INT 1
46606: PUSH
46607: LD_INT 0
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: PUSH
46614: LD_INT 1
46616: PUSH
46617: LD_INT 1
46619: PUSH
46620: EMPTY
46621: LIST
46622: LIST
46623: PUSH
46624: LD_INT 0
46626: PUSH
46627: LD_INT 1
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: LD_INT 1
46636: NEG
46637: PUSH
46638: LD_INT 0
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: LD_INT 1
46647: NEG
46648: PUSH
46649: LD_INT 1
46651: NEG
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: PUSH
46657: LD_INT 1
46659: NEG
46660: PUSH
46661: LD_INT 2
46663: NEG
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: PUSH
46669: LD_INT 0
46671: PUSH
46672: LD_INT 2
46674: NEG
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: PUSH
46680: LD_INT 1
46682: PUSH
46683: LD_INT 1
46685: NEG
46686: PUSH
46687: EMPTY
46688: LIST
46689: LIST
46690: PUSH
46691: LD_INT 2
46693: PUSH
46694: LD_INT 0
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: PUSH
46701: LD_INT 2
46703: PUSH
46704: LD_INT 1
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: LD_INT 2
46713: PUSH
46714: LD_INT 2
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: PUSH
46721: LD_INT 1
46723: PUSH
46724: LD_INT 2
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: PUSH
46731: LD_INT 0
46733: PUSH
46734: LD_INT 2
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: LD_INT 1
46743: NEG
46744: PUSH
46745: LD_INT 1
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: PUSH
46752: LD_INT 2
46754: NEG
46755: PUSH
46756: LD_INT 0
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: LD_INT 2
46765: NEG
46766: PUSH
46767: LD_INT 1
46769: NEG
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: PUSH
46775: LD_INT 2
46777: NEG
46778: PUSH
46779: LD_INT 2
46781: NEG
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: LIST
46791: LIST
46792: LIST
46793: LIST
46794: LIST
46795: LIST
46796: LIST
46797: LIST
46798: LIST
46799: LIST
46800: LIST
46801: LIST
46802: LIST
46803: LIST
46804: LIST
46805: LIST
46806: LIST
46807: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46808: LD_ADDR_VAR 0 54
46812: PUSH
46813: LD_INT 0
46815: PUSH
46816: LD_INT 0
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: PUSH
46823: LD_INT 0
46825: PUSH
46826: LD_INT 1
46828: NEG
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PUSH
46834: LD_INT 1
46836: PUSH
46837: LD_INT 0
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: PUSH
46844: LD_INT 1
46846: PUSH
46847: LD_INT 1
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: PUSH
46854: LD_INT 0
46856: PUSH
46857: LD_INT 1
46859: PUSH
46860: EMPTY
46861: LIST
46862: LIST
46863: PUSH
46864: LD_INT 1
46866: NEG
46867: PUSH
46868: LD_INT 0
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PUSH
46875: LD_INT 1
46877: NEG
46878: PUSH
46879: LD_INT 1
46881: NEG
46882: PUSH
46883: EMPTY
46884: LIST
46885: LIST
46886: PUSH
46887: LD_INT 1
46889: NEG
46890: PUSH
46891: LD_INT 2
46893: NEG
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: PUSH
46899: LD_INT 0
46901: PUSH
46902: LD_INT 2
46904: NEG
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: LD_INT 1
46912: PUSH
46913: LD_INT 1
46915: NEG
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: PUSH
46921: LD_INT 2
46923: PUSH
46924: LD_INT 0
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 2
46933: PUSH
46934: LD_INT 1
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: PUSH
46941: LD_INT 2
46943: PUSH
46944: LD_INT 2
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 1
46953: PUSH
46954: LD_INT 2
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 0
46963: PUSH
46964: LD_INT 2
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: LD_INT 1
46973: NEG
46974: PUSH
46975: LD_INT 1
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: LD_INT 2
46984: NEG
46985: PUSH
46986: LD_INT 0
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: LD_INT 2
46995: NEG
46996: PUSH
46997: LD_INT 1
46999: NEG
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: LD_INT 2
47007: NEG
47008: PUSH
47009: LD_INT 2
47011: NEG
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: LIST
47021: LIST
47022: LIST
47023: LIST
47024: LIST
47025: LIST
47026: LIST
47027: LIST
47028: LIST
47029: LIST
47030: LIST
47031: LIST
47032: LIST
47033: LIST
47034: LIST
47035: LIST
47036: LIST
47037: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47038: LD_ADDR_VAR 0 55
47042: PUSH
47043: LD_INT 0
47045: PUSH
47046: LD_INT 0
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: LD_INT 0
47055: PUSH
47056: LD_INT 1
47058: NEG
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: LD_INT 1
47066: PUSH
47067: LD_INT 0
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: PUSH
47074: LD_INT 1
47076: PUSH
47077: LD_INT 1
47079: PUSH
47080: EMPTY
47081: LIST
47082: LIST
47083: PUSH
47084: LD_INT 0
47086: PUSH
47087: LD_INT 1
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: PUSH
47094: LD_INT 1
47096: NEG
47097: PUSH
47098: LD_INT 0
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: PUSH
47105: LD_INT 1
47107: NEG
47108: PUSH
47109: LD_INT 1
47111: NEG
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: PUSH
47117: LD_INT 1
47119: NEG
47120: PUSH
47121: LD_INT 2
47123: NEG
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: PUSH
47129: LD_INT 0
47131: PUSH
47132: LD_INT 2
47134: NEG
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: PUSH
47140: LD_INT 1
47142: PUSH
47143: LD_INT 1
47145: NEG
47146: PUSH
47147: EMPTY
47148: LIST
47149: LIST
47150: PUSH
47151: LD_INT 2
47153: PUSH
47154: LD_INT 0
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: PUSH
47161: LD_INT 2
47163: PUSH
47164: LD_INT 1
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: PUSH
47171: LD_INT 2
47173: PUSH
47174: LD_INT 2
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: PUSH
47181: LD_INT 1
47183: PUSH
47184: LD_INT 2
47186: PUSH
47187: EMPTY
47188: LIST
47189: LIST
47190: PUSH
47191: LD_INT 0
47193: PUSH
47194: LD_INT 2
47196: PUSH
47197: EMPTY
47198: LIST
47199: LIST
47200: PUSH
47201: LD_INT 1
47203: NEG
47204: PUSH
47205: LD_INT 1
47207: PUSH
47208: EMPTY
47209: LIST
47210: LIST
47211: PUSH
47212: LD_INT 2
47214: NEG
47215: PUSH
47216: LD_INT 0
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: LD_INT 2
47225: NEG
47226: PUSH
47227: LD_INT 1
47229: NEG
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: PUSH
47235: LD_INT 2
47237: NEG
47238: PUSH
47239: LD_INT 2
47241: NEG
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: LIST
47251: LIST
47252: LIST
47253: LIST
47254: LIST
47255: LIST
47256: LIST
47257: LIST
47258: LIST
47259: LIST
47260: LIST
47261: LIST
47262: LIST
47263: LIST
47264: LIST
47265: LIST
47266: LIST
47267: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47268: LD_ADDR_VAR 0 56
47272: PUSH
47273: LD_INT 0
47275: PUSH
47276: LD_INT 0
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: PUSH
47283: LD_INT 0
47285: PUSH
47286: LD_INT 1
47288: NEG
47289: PUSH
47290: EMPTY
47291: LIST
47292: LIST
47293: PUSH
47294: LD_INT 1
47296: PUSH
47297: LD_INT 0
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 1
47306: PUSH
47307: LD_INT 1
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 0
47316: PUSH
47317: LD_INT 1
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: PUSH
47324: LD_INT 1
47326: NEG
47327: PUSH
47328: LD_INT 0
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PUSH
47335: LD_INT 1
47337: NEG
47338: PUSH
47339: LD_INT 1
47341: NEG
47342: PUSH
47343: EMPTY
47344: LIST
47345: LIST
47346: PUSH
47347: LD_INT 1
47349: NEG
47350: PUSH
47351: LD_INT 2
47353: NEG
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: PUSH
47359: LD_INT 0
47361: PUSH
47362: LD_INT 2
47364: NEG
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: PUSH
47370: LD_INT 1
47372: PUSH
47373: LD_INT 1
47375: NEG
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PUSH
47381: LD_INT 2
47383: PUSH
47384: LD_INT 0
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: LD_INT 2
47393: PUSH
47394: LD_INT 1
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: PUSH
47401: LD_INT 2
47403: PUSH
47404: LD_INT 2
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: PUSH
47411: LD_INT 1
47413: PUSH
47414: LD_INT 2
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: PUSH
47421: LD_INT 0
47423: PUSH
47424: LD_INT 2
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: PUSH
47431: LD_INT 1
47433: NEG
47434: PUSH
47435: LD_INT 1
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: PUSH
47442: LD_INT 2
47444: NEG
47445: PUSH
47446: LD_INT 0
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: PUSH
47453: LD_INT 2
47455: NEG
47456: PUSH
47457: LD_INT 1
47459: NEG
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: PUSH
47465: LD_INT 2
47467: NEG
47468: PUSH
47469: LD_INT 2
47471: NEG
47472: PUSH
47473: EMPTY
47474: LIST
47475: LIST
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: LIST
47490: LIST
47491: LIST
47492: LIST
47493: LIST
47494: LIST
47495: LIST
47496: LIST
47497: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47498: LD_ADDR_VAR 0 57
47502: PUSH
47503: LD_INT 0
47505: PUSH
47506: LD_INT 0
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: LD_INT 0
47515: PUSH
47516: LD_INT 1
47518: NEG
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PUSH
47524: LD_INT 1
47526: PUSH
47527: LD_INT 0
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: LD_INT 1
47536: PUSH
47537: LD_INT 1
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: PUSH
47544: LD_INT 0
47546: PUSH
47547: LD_INT 1
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: LD_INT 1
47556: NEG
47557: PUSH
47558: LD_INT 0
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: LD_INT 1
47567: NEG
47568: PUSH
47569: LD_INT 1
47571: NEG
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: PUSH
47577: LD_INT 1
47579: NEG
47580: PUSH
47581: LD_INT 2
47583: NEG
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: PUSH
47589: LD_INT 0
47591: PUSH
47592: LD_INT 2
47594: NEG
47595: PUSH
47596: EMPTY
47597: LIST
47598: LIST
47599: PUSH
47600: LD_INT 1
47602: PUSH
47603: LD_INT 1
47605: NEG
47606: PUSH
47607: EMPTY
47608: LIST
47609: LIST
47610: PUSH
47611: LD_INT 2
47613: PUSH
47614: LD_INT 0
47616: PUSH
47617: EMPTY
47618: LIST
47619: LIST
47620: PUSH
47621: LD_INT 2
47623: PUSH
47624: LD_INT 1
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: LD_INT 2
47633: PUSH
47634: LD_INT 2
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: PUSH
47641: LD_INT 1
47643: PUSH
47644: LD_INT 2
47646: PUSH
47647: EMPTY
47648: LIST
47649: LIST
47650: PUSH
47651: LD_INT 0
47653: PUSH
47654: LD_INT 2
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 1
47663: NEG
47664: PUSH
47665: LD_INT 1
47667: PUSH
47668: EMPTY
47669: LIST
47670: LIST
47671: PUSH
47672: LD_INT 2
47674: NEG
47675: PUSH
47676: LD_INT 0
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: LD_INT 2
47685: NEG
47686: PUSH
47687: LD_INT 1
47689: NEG
47690: PUSH
47691: EMPTY
47692: LIST
47693: LIST
47694: PUSH
47695: LD_INT 2
47697: NEG
47698: PUSH
47699: LD_INT 2
47701: NEG
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: LIST
47711: LIST
47712: LIST
47713: LIST
47714: LIST
47715: LIST
47716: LIST
47717: LIST
47718: LIST
47719: LIST
47720: LIST
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: LIST
47726: LIST
47727: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47728: LD_ADDR_VAR 0 58
47732: PUSH
47733: LD_INT 0
47735: PUSH
47736: LD_INT 0
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: PUSH
47743: LD_INT 0
47745: PUSH
47746: LD_INT 1
47748: NEG
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: PUSH
47754: LD_INT 1
47756: PUSH
47757: LD_INT 0
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: PUSH
47764: LD_INT 1
47766: PUSH
47767: LD_INT 1
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: PUSH
47774: LD_INT 0
47776: PUSH
47777: LD_INT 1
47779: PUSH
47780: EMPTY
47781: LIST
47782: LIST
47783: PUSH
47784: LD_INT 1
47786: NEG
47787: PUSH
47788: LD_INT 0
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PUSH
47795: LD_INT 1
47797: NEG
47798: PUSH
47799: LD_INT 1
47801: NEG
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: PUSH
47807: LD_INT 1
47809: NEG
47810: PUSH
47811: LD_INT 2
47813: NEG
47814: PUSH
47815: EMPTY
47816: LIST
47817: LIST
47818: PUSH
47819: LD_INT 0
47821: PUSH
47822: LD_INT 2
47824: NEG
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: PUSH
47830: LD_INT 1
47832: PUSH
47833: LD_INT 1
47835: NEG
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: LD_INT 2
47843: PUSH
47844: LD_INT 0
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 2
47853: PUSH
47854: LD_INT 1
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PUSH
47861: LD_INT 2
47863: PUSH
47864: LD_INT 2
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: LD_INT 1
47873: PUSH
47874: LD_INT 2
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PUSH
47881: LD_INT 0
47883: PUSH
47884: LD_INT 2
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: PUSH
47891: LD_INT 1
47893: NEG
47894: PUSH
47895: LD_INT 1
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: PUSH
47902: LD_INT 2
47904: NEG
47905: PUSH
47906: LD_INT 0
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: PUSH
47913: LD_INT 2
47915: NEG
47916: PUSH
47917: LD_INT 1
47919: NEG
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: LD_INT 2
47927: NEG
47928: PUSH
47929: LD_INT 2
47931: NEG
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: LIST
47941: LIST
47942: LIST
47943: LIST
47944: LIST
47945: LIST
47946: LIST
47947: LIST
47948: LIST
47949: LIST
47950: LIST
47951: LIST
47952: LIST
47953: LIST
47954: LIST
47955: LIST
47956: LIST
47957: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47958: LD_ADDR_VAR 0 59
47962: PUSH
47963: LD_INT 0
47965: PUSH
47966: LD_INT 0
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: PUSH
47973: LD_INT 0
47975: PUSH
47976: LD_INT 1
47978: NEG
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: LD_INT 1
47986: PUSH
47987: LD_INT 0
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: LD_INT 1
47996: PUSH
47997: LD_INT 1
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: PUSH
48004: LD_INT 0
48006: PUSH
48007: LD_INT 1
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: PUSH
48014: LD_INT 1
48016: NEG
48017: PUSH
48018: LD_INT 0
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: LD_INT 1
48027: NEG
48028: PUSH
48029: LD_INT 1
48031: NEG
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: PUSH
48037: EMPTY
48038: LIST
48039: LIST
48040: LIST
48041: LIST
48042: LIST
48043: LIST
48044: LIST
48045: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48046: LD_ADDR_VAR 0 60
48050: PUSH
48051: LD_INT 0
48053: PUSH
48054: LD_INT 0
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PUSH
48061: LD_INT 0
48063: PUSH
48064: LD_INT 1
48066: NEG
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: PUSH
48072: LD_INT 1
48074: PUSH
48075: LD_INT 0
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: PUSH
48082: LD_INT 1
48084: PUSH
48085: LD_INT 1
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: LD_INT 0
48094: PUSH
48095: LD_INT 1
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: LD_INT 1
48104: NEG
48105: PUSH
48106: LD_INT 0
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 1
48115: NEG
48116: PUSH
48117: LD_INT 1
48119: NEG
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: LIST
48129: LIST
48130: LIST
48131: LIST
48132: LIST
48133: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48134: LD_ADDR_VAR 0 61
48138: PUSH
48139: LD_INT 0
48141: PUSH
48142: LD_INT 0
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: LD_INT 0
48151: PUSH
48152: LD_INT 1
48154: NEG
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 1
48162: PUSH
48163: LD_INT 0
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: LD_INT 1
48172: PUSH
48173: LD_INT 1
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: PUSH
48180: LD_INT 0
48182: PUSH
48183: LD_INT 1
48185: PUSH
48186: EMPTY
48187: LIST
48188: LIST
48189: PUSH
48190: LD_INT 1
48192: NEG
48193: PUSH
48194: LD_INT 0
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: PUSH
48201: LD_INT 1
48203: NEG
48204: PUSH
48205: LD_INT 1
48207: NEG
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: LIST
48217: LIST
48218: LIST
48219: LIST
48220: LIST
48221: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48222: LD_ADDR_VAR 0 62
48226: PUSH
48227: LD_INT 0
48229: PUSH
48230: LD_INT 0
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: PUSH
48237: LD_INT 0
48239: PUSH
48240: LD_INT 1
48242: NEG
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: PUSH
48248: LD_INT 1
48250: PUSH
48251: LD_INT 0
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: LD_INT 1
48260: PUSH
48261: LD_INT 1
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: LD_INT 0
48270: PUSH
48271: LD_INT 1
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: LD_INT 1
48280: NEG
48281: PUSH
48282: LD_INT 0
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: PUSH
48289: LD_INT 1
48291: NEG
48292: PUSH
48293: LD_INT 1
48295: NEG
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: LIST
48305: LIST
48306: LIST
48307: LIST
48308: LIST
48309: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48310: LD_ADDR_VAR 0 63
48314: PUSH
48315: LD_INT 0
48317: PUSH
48318: LD_INT 0
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: PUSH
48325: LD_INT 0
48327: PUSH
48328: LD_INT 1
48330: NEG
48331: PUSH
48332: EMPTY
48333: LIST
48334: LIST
48335: PUSH
48336: LD_INT 1
48338: PUSH
48339: LD_INT 0
48341: PUSH
48342: EMPTY
48343: LIST
48344: LIST
48345: PUSH
48346: LD_INT 1
48348: PUSH
48349: LD_INT 1
48351: PUSH
48352: EMPTY
48353: LIST
48354: LIST
48355: PUSH
48356: LD_INT 0
48358: PUSH
48359: LD_INT 1
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: PUSH
48366: LD_INT 1
48368: NEG
48369: PUSH
48370: LD_INT 0
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: PUSH
48377: LD_INT 1
48379: NEG
48380: PUSH
48381: LD_INT 1
48383: NEG
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: LIST
48393: LIST
48394: LIST
48395: LIST
48396: LIST
48397: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48398: LD_ADDR_VAR 0 64
48402: PUSH
48403: LD_INT 0
48405: PUSH
48406: LD_INT 0
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: LD_INT 0
48415: PUSH
48416: LD_INT 1
48418: NEG
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: PUSH
48424: LD_INT 1
48426: PUSH
48427: LD_INT 0
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: PUSH
48434: LD_INT 1
48436: PUSH
48437: LD_INT 1
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: LD_INT 0
48446: PUSH
48447: LD_INT 1
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: LD_INT 1
48456: NEG
48457: PUSH
48458: LD_INT 0
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: LD_INT 1
48467: NEG
48468: PUSH
48469: LD_INT 1
48471: NEG
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: LIST
48481: LIST
48482: LIST
48483: LIST
48484: LIST
48485: ST_TO_ADDR
// end ; 1 :
48486: GO 54383
48488: LD_INT 1
48490: DOUBLE
48491: EQUAL
48492: IFTRUE 48496
48494: GO 51119
48496: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48497: LD_ADDR_VAR 0 11
48501: PUSH
48502: LD_INT 1
48504: NEG
48505: PUSH
48506: LD_INT 3
48508: NEG
48509: PUSH
48510: EMPTY
48511: LIST
48512: LIST
48513: PUSH
48514: LD_INT 0
48516: PUSH
48517: LD_INT 3
48519: NEG
48520: PUSH
48521: EMPTY
48522: LIST
48523: LIST
48524: PUSH
48525: LD_INT 1
48527: PUSH
48528: LD_INT 2
48530: NEG
48531: PUSH
48532: EMPTY
48533: LIST
48534: LIST
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: LIST
48540: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48541: LD_ADDR_VAR 0 12
48545: PUSH
48546: LD_INT 2
48548: PUSH
48549: LD_INT 1
48551: NEG
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: PUSH
48557: LD_INT 3
48559: PUSH
48560: LD_INT 0
48562: PUSH
48563: EMPTY
48564: LIST
48565: LIST
48566: PUSH
48567: LD_INT 3
48569: PUSH
48570: LD_INT 1
48572: PUSH
48573: EMPTY
48574: LIST
48575: LIST
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: LIST
48581: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48582: LD_ADDR_VAR 0 13
48586: PUSH
48587: LD_INT 3
48589: PUSH
48590: LD_INT 2
48592: PUSH
48593: EMPTY
48594: LIST
48595: LIST
48596: PUSH
48597: LD_INT 3
48599: PUSH
48600: LD_INT 3
48602: PUSH
48603: EMPTY
48604: LIST
48605: LIST
48606: PUSH
48607: LD_INT 2
48609: PUSH
48610: LD_INT 3
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: LIST
48621: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48622: LD_ADDR_VAR 0 14
48626: PUSH
48627: LD_INT 1
48629: PUSH
48630: LD_INT 3
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: LD_INT 0
48639: PUSH
48640: LD_INT 3
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 1
48649: NEG
48650: PUSH
48651: LD_INT 2
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: LIST
48662: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48663: LD_ADDR_VAR 0 15
48667: PUSH
48668: LD_INT 2
48670: NEG
48671: PUSH
48672: LD_INT 1
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: PUSH
48679: LD_INT 3
48681: NEG
48682: PUSH
48683: LD_INT 0
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: PUSH
48690: LD_INT 3
48692: NEG
48693: PUSH
48694: LD_INT 1
48696: NEG
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: LIST
48706: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48707: LD_ADDR_VAR 0 16
48711: PUSH
48712: LD_INT 2
48714: NEG
48715: PUSH
48716: LD_INT 3
48718: NEG
48719: PUSH
48720: EMPTY
48721: LIST
48722: LIST
48723: PUSH
48724: LD_INT 3
48726: NEG
48727: PUSH
48728: LD_INT 2
48730: NEG
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: PUSH
48736: LD_INT 3
48738: NEG
48739: PUSH
48740: LD_INT 3
48742: NEG
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: LIST
48752: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48753: LD_ADDR_VAR 0 17
48757: PUSH
48758: LD_INT 1
48760: NEG
48761: PUSH
48762: LD_INT 3
48764: NEG
48765: PUSH
48766: EMPTY
48767: LIST
48768: LIST
48769: PUSH
48770: LD_INT 0
48772: PUSH
48773: LD_INT 3
48775: NEG
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PUSH
48781: LD_INT 1
48783: PUSH
48784: LD_INT 2
48786: NEG
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: LIST
48796: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48797: LD_ADDR_VAR 0 18
48801: PUSH
48802: LD_INT 2
48804: PUSH
48805: LD_INT 1
48807: NEG
48808: PUSH
48809: EMPTY
48810: LIST
48811: LIST
48812: PUSH
48813: LD_INT 3
48815: PUSH
48816: LD_INT 0
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: LD_INT 3
48825: PUSH
48826: LD_INT 1
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: EMPTY
48834: LIST
48835: LIST
48836: LIST
48837: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48838: LD_ADDR_VAR 0 19
48842: PUSH
48843: LD_INT 3
48845: PUSH
48846: LD_INT 2
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: LD_INT 3
48855: PUSH
48856: LD_INT 3
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: PUSH
48863: LD_INT 2
48865: PUSH
48866: LD_INT 3
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: LIST
48877: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48878: LD_ADDR_VAR 0 20
48882: PUSH
48883: LD_INT 1
48885: PUSH
48886: LD_INT 3
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: PUSH
48893: LD_INT 0
48895: PUSH
48896: LD_INT 3
48898: PUSH
48899: EMPTY
48900: LIST
48901: LIST
48902: PUSH
48903: LD_INT 1
48905: NEG
48906: PUSH
48907: LD_INT 2
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: LIST
48918: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48919: LD_ADDR_VAR 0 21
48923: PUSH
48924: LD_INT 2
48926: NEG
48927: PUSH
48928: LD_INT 1
48930: PUSH
48931: EMPTY
48932: LIST
48933: LIST
48934: PUSH
48935: LD_INT 3
48937: NEG
48938: PUSH
48939: LD_INT 0
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 3
48948: NEG
48949: PUSH
48950: LD_INT 1
48952: NEG
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: LIST
48962: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48963: LD_ADDR_VAR 0 22
48967: PUSH
48968: LD_INT 2
48970: NEG
48971: PUSH
48972: LD_INT 3
48974: NEG
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: LD_INT 3
48982: NEG
48983: PUSH
48984: LD_INT 2
48986: NEG
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: LD_INT 3
48994: NEG
48995: PUSH
48996: LD_INT 3
48998: NEG
48999: PUSH
49000: EMPTY
49001: LIST
49002: LIST
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: LIST
49008: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
49009: LD_ADDR_VAR 0 23
49013: PUSH
49014: LD_INT 0
49016: PUSH
49017: LD_INT 3
49019: NEG
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: PUSH
49025: LD_INT 1
49027: NEG
49028: PUSH
49029: LD_INT 4
49031: NEG
49032: PUSH
49033: EMPTY
49034: LIST
49035: LIST
49036: PUSH
49037: LD_INT 1
49039: PUSH
49040: LD_INT 3
49042: NEG
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: EMPTY
49049: LIST
49050: LIST
49051: LIST
49052: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
49053: LD_ADDR_VAR 0 24
49057: PUSH
49058: LD_INT 3
49060: PUSH
49061: LD_INT 0
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: LD_INT 3
49070: PUSH
49071: LD_INT 1
49073: NEG
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: LD_INT 4
49081: PUSH
49082: LD_INT 1
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: LIST
49093: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
49094: LD_ADDR_VAR 0 25
49098: PUSH
49099: LD_INT 3
49101: PUSH
49102: LD_INT 3
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: PUSH
49109: LD_INT 4
49111: PUSH
49112: LD_INT 3
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: PUSH
49119: LD_INT 3
49121: PUSH
49122: LD_INT 4
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: PUSH
49129: EMPTY
49130: LIST
49131: LIST
49132: LIST
49133: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
49134: LD_ADDR_VAR 0 26
49138: PUSH
49139: LD_INT 0
49141: PUSH
49142: LD_INT 3
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: PUSH
49149: LD_INT 1
49151: PUSH
49152: LD_INT 4
49154: PUSH
49155: EMPTY
49156: LIST
49157: LIST
49158: PUSH
49159: LD_INT 1
49161: NEG
49162: PUSH
49163: LD_INT 3
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: PUSH
49170: EMPTY
49171: LIST
49172: LIST
49173: LIST
49174: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
49175: LD_ADDR_VAR 0 27
49179: PUSH
49180: LD_INT 3
49182: NEG
49183: PUSH
49184: LD_INT 0
49186: PUSH
49187: EMPTY
49188: LIST
49189: LIST
49190: PUSH
49191: LD_INT 3
49193: NEG
49194: PUSH
49195: LD_INT 1
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: PUSH
49202: LD_INT 4
49204: NEG
49205: PUSH
49206: LD_INT 1
49208: NEG
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: LIST
49218: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
49219: LD_ADDR_VAR 0 28
49223: PUSH
49224: LD_INT 3
49226: NEG
49227: PUSH
49228: LD_INT 3
49230: NEG
49231: PUSH
49232: EMPTY
49233: LIST
49234: LIST
49235: PUSH
49236: LD_INT 3
49238: NEG
49239: PUSH
49240: LD_INT 4
49242: NEG
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: PUSH
49248: LD_INT 4
49250: NEG
49251: PUSH
49252: LD_INT 3
49254: NEG
49255: PUSH
49256: EMPTY
49257: LIST
49258: LIST
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: LIST
49264: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
49265: LD_ADDR_VAR 0 29
49269: PUSH
49270: LD_INT 1
49272: NEG
49273: PUSH
49274: LD_INT 3
49276: NEG
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 0
49284: PUSH
49285: LD_INT 3
49287: NEG
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 1
49295: PUSH
49296: LD_INT 2
49298: NEG
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 1
49306: NEG
49307: PUSH
49308: LD_INT 4
49310: NEG
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 0
49318: PUSH
49319: LD_INT 4
49321: NEG
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 1
49329: PUSH
49330: LD_INT 3
49332: NEG
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: PUSH
49338: LD_INT 1
49340: NEG
49341: PUSH
49342: LD_INT 5
49344: NEG
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 0
49352: PUSH
49353: LD_INT 5
49355: NEG
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: PUSH
49361: LD_INT 1
49363: PUSH
49364: LD_INT 4
49366: NEG
49367: PUSH
49368: EMPTY
49369: LIST
49370: LIST
49371: PUSH
49372: LD_INT 1
49374: NEG
49375: PUSH
49376: LD_INT 6
49378: NEG
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: PUSH
49384: LD_INT 0
49386: PUSH
49387: LD_INT 6
49389: NEG
49390: PUSH
49391: EMPTY
49392: LIST
49393: LIST
49394: PUSH
49395: LD_INT 1
49397: PUSH
49398: LD_INT 5
49400: NEG
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: LIST
49410: LIST
49411: LIST
49412: LIST
49413: LIST
49414: LIST
49415: LIST
49416: LIST
49417: LIST
49418: LIST
49419: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
49420: LD_ADDR_VAR 0 30
49424: PUSH
49425: LD_INT 2
49427: PUSH
49428: LD_INT 1
49430: NEG
49431: PUSH
49432: EMPTY
49433: LIST
49434: LIST
49435: PUSH
49436: LD_INT 3
49438: PUSH
49439: LD_INT 0
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: PUSH
49446: LD_INT 3
49448: PUSH
49449: LD_INT 1
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: PUSH
49456: LD_INT 3
49458: PUSH
49459: LD_INT 1
49461: NEG
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: PUSH
49467: LD_INT 4
49469: PUSH
49470: LD_INT 0
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: PUSH
49477: LD_INT 4
49479: PUSH
49480: LD_INT 1
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: PUSH
49487: LD_INT 4
49489: PUSH
49490: LD_INT 1
49492: NEG
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: LD_INT 5
49500: PUSH
49501: LD_INT 0
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: LD_INT 5
49510: PUSH
49511: LD_INT 1
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: PUSH
49518: LD_INT 5
49520: PUSH
49521: LD_INT 1
49523: NEG
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 6
49531: PUSH
49532: LD_INT 0
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: LD_INT 6
49541: PUSH
49542: LD_INT 1
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: PUSH
49549: EMPTY
49550: LIST
49551: LIST
49552: LIST
49553: LIST
49554: LIST
49555: LIST
49556: LIST
49557: LIST
49558: LIST
49559: LIST
49560: LIST
49561: LIST
49562: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
49563: LD_ADDR_VAR 0 31
49567: PUSH
49568: LD_INT 3
49570: PUSH
49571: LD_INT 2
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: PUSH
49578: LD_INT 3
49580: PUSH
49581: LD_INT 3
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: PUSH
49588: LD_INT 2
49590: PUSH
49591: LD_INT 3
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: PUSH
49598: LD_INT 4
49600: PUSH
49601: LD_INT 3
49603: PUSH
49604: EMPTY
49605: LIST
49606: LIST
49607: PUSH
49608: LD_INT 4
49610: PUSH
49611: LD_INT 4
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: LD_INT 3
49620: PUSH
49621: LD_INT 4
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: PUSH
49628: LD_INT 5
49630: PUSH
49631: LD_INT 4
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: PUSH
49638: LD_INT 5
49640: PUSH
49641: LD_INT 5
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: PUSH
49648: LD_INT 4
49650: PUSH
49651: LD_INT 5
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: PUSH
49658: LD_INT 6
49660: PUSH
49661: LD_INT 5
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: LD_INT 6
49670: PUSH
49671: LD_INT 6
49673: PUSH
49674: EMPTY
49675: LIST
49676: LIST
49677: PUSH
49678: LD_INT 5
49680: PUSH
49681: LD_INT 6
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: PUSH
49688: EMPTY
49689: LIST
49690: LIST
49691: LIST
49692: LIST
49693: LIST
49694: LIST
49695: LIST
49696: LIST
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
49702: LD_ADDR_VAR 0 32
49706: PUSH
49707: LD_INT 1
49709: PUSH
49710: LD_INT 3
49712: PUSH
49713: EMPTY
49714: LIST
49715: LIST
49716: PUSH
49717: LD_INT 0
49719: PUSH
49720: LD_INT 3
49722: PUSH
49723: EMPTY
49724: LIST
49725: LIST
49726: PUSH
49727: LD_INT 1
49729: NEG
49730: PUSH
49731: LD_INT 2
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: PUSH
49738: LD_INT 1
49740: PUSH
49741: LD_INT 4
49743: PUSH
49744: EMPTY
49745: LIST
49746: LIST
49747: PUSH
49748: LD_INT 0
49750: PUSH
49751: LD_INT 4
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: PUSH
49758: LD_INT 1
49760: NEG
49761: PUSH
49762: LD_INT 3
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: PUSH
49769: LD_INT 1
49771: PUSH
49772: LD_INT 5
49774: PUSH
49775: EMPTY
49776: LIST
49777: LIST
49778: PUSH
49779: LD_INT 0
49781: PUSH
49782: LD_INT 5
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: PUSH
49789: LD_INT 1
49791: NEG
49792: PUSH
49793: LD_INT 4
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: LD_INT 1
49802: PUSH
49803: LD_INT 6
49805: PUSH
49806: EMPTY
49807: LIST
49808: LIST
49809: PUSH
49810: LD_INT 0
49812: PUSH
49813: LD_INT 6
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: PUSH
49820: LD_INT 1
49822: NEG
49823: PUSH
49824: LD_INT 5
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: LIST
49835: LIST
49836: LIST
49837: LIST
49838: LIST
49839: LIST
49840: LIST
49841: LIST
49842: LIST
49843: LIST
49844: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
49845: LD_ADDR_VAR 0 33
49849: PUSH
49850: LD_INT 2
49852: NEG
49853: PUSH
49854: LD_INT 1
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: PUSH
49861: LD_INT 3
49863: NEG
49864: PUSH
49865: LD_INT 0
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: PUSH
49872: LD_INT 3
49874: NEG
49875: PUSH
49876: LD_INT 1
49878: NEG
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: PUSH
49884: LD_INT 3
49886: NEG
49887: PUSH
49888: LD_INT 1
49890: PUSH
49891: EMPTY
49892: LIST
49893: LIST
49894: PUSH
49895: LD_INT 4
49897: NEG
49898: PUSH
49899: LD_INT 0
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: LD_INT 4
49908: NEG
49909: PUSH
49910: LD_INT 1
49912: NEG
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: PUSH
49918: LD_INT 4
49920: NEG
49921: PUSH
49922: LD_INT 1
49924: PUSH
49925: EMPTY
49926: LIST
49927: LIST
49928: PUSH
49929: LD_INT 5
49931: NEG
49932: PUSH
49933: LD_INT 0
49935: PUSH
49936: EMPTY
49937: LIST
49938: LIST
49939: PUSH
49940: LD_INT 5
49942: NEG
49943: PUSH
49944: LD_INT 1
49946: NEG
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: LD_INT 5
49954: NEG
49955: PUSH
49956: LD_INT 1
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: PUSH
49963: LD_INT 6
49965: NEG
49966: PUSH
49967: LD_INT 0
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: PUSH
49974: LD_INT 6
49976: NEG
49977: PUSH
49978: LD_INT 1
49980: NEG
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: LIST
49990: LIST
49991: LIST
49992: LIST
49993: LIST
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
50000: LD_ADDR_VAR 0 34
50004: PUSH
50005: LD_INT 2
50007: NEG
50008: PUSH
50009: LD_INT 3
50011: NEG
50012: PUSH
50013: EMPTY
50014: LIST
50015: LIST
50016: PUSH
50017: LD_INT 3
50019: NEG
50020: PUSH
50021: LD_INT 2
50023: NEG
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: LD_INT 3
50031: NEG
50032: PUSH
50033: LD_INT 3
50035: NEG
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: LD_INT 3
50043: NEG
50044: PUSH
50045: LD_INT 4
50047: NEG
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: LD_INT 4
50055: NEG
50056: PUSH
50057: LD_INT 3
50059: NEG
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: PUSH
50065: LD_INT 4
50067: NEG
50068: PUSH
50069: LD_INT 4
50071: NEG
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: PUSH
50077: LD_INT 4
50079: NEG
50080: PUSH
50081: LD_INT 5
50083: NEG
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 5
50091: NEG
50092: PUSH
50093: LD_INT 4
50095: NEG
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: PUSH
50101: LD_INT 5
50103: NEG
50104: PUSH
50105: LD_INT 5
50107: NEG
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: PUSH
50113: LD_INT 5
50115: NEG
50116: PUSH
50117: LD_INT 6
50119: NEG
50120: PUSH
50121: EMPTY
50122: LIST
50123: LIST
50124: PUSH
50125: LD_INT 6
50127: NEG
50128: PUSH
50129: LD_INT 5
50131: NEG
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: PUSH
50137: LD_INT 6
50139: NEG
50140: PUSH
50141: LD_INT 6
50143: NEG
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: EMPTY
50150: LIST
50151: LIST
50152: LIST
50153: LIST
50154: LIST
50155: LIST
50156: LIST
50157: LIST
50158: LIST
50159: LIST
50160: LIST
50161: LIST
50162: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
50163: LD_ADDR_VAR 0 41
50167: PUSH
50168: LD_INT 0
50170: PUSH
50171: LD_INT 2
50173: NEG
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: LD_INT 1
50181: NEG
50182: PUSH
50183: LD_INT 3
50185: NEG
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: PUSH
50191: LD_INT 1
50193: PUSH
50194: LD_INT 2
50196: NEG
50197: PUSH
50198: EMPTY
50199: LIST
50200: LIST
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: LIST
50206: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
50207: LD_ADDR_VAR 0 42
50211: PUSH
50212: LD_INT 2
50214: PUSH
50215: LD_INT 0
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 2
50224: PUSH
50225: LD_INT 1
50227: NEG
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: PUSH
50233: LD_INT 3
50235: PUSH
50236: LD_INT 1
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: LIST
50247: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
50248: LD_ADDR_VAR 0 43
50252: PUSH
50253: LD_INT 2
50255: PUSH
50256: LD_INT 2
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: PUSH
50263: LD_INT 3
50265: PUSH
50266: LD_INT 2
50268: PUSH
50269: EMPTY
50270: LIST
50271: LIST
50272: PUSH
50273: LD_INT 2
50275: PUSH
50276: LD_INT 3
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: LIST
50287: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
50288: LD_ADDR_VAR 0 44
50292: PUSH
50293: LD_INT 0
50295: PUSH
50296: LD_INT 2
50298: PUSH
50299: EMPTY
50300: LIST
50301: LIST
50302: PUSH
50303: LD_INT 1
50305: PUSH
50306: LD_INT 3
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: LD_INT 1
50315: NEG
50316: PUSH
50317: LD_INT 2
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: PUSH
50324: EMPTY
50325: LIST
50326: LIST
50327: LIST
50328: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50329: LD_ADDR_VAR 0 45
50333: PUSH
50334: LD_INT 2
50336: NEG
50337: PUSH
50338: LD_INT 0
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: PUSH
50345: LD_INT 2
50347: NEG
50348: PUSH
50349: LD_INT 1
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: PUSH
50356: LD_INT 3
50358: NEG
50359: PUSH
50360: LD_INT 1
50362: NEG
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: LIST
50372: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
50373: LD_ADDR_VAR 0 46
50377: PUSH
50378: LD_INT 2
50380: NEG
50381: PUSH
50382: LD_INT 2
50384: NEG
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: PUSH
50390: LD_INT 2
50392: NEG
50393: PUSH
50394: LD_INT 3
50396: NEG
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: PUSH
50402: LD_INT 3
50404: NEG
50405: PUSH
50406: LD_INT 2
50408: NEG
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: LIST
50418: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
50419: LD_ADDR_VAR 0 47
50423: PUSH
50424: LD_INT 2
50426: NEG
50427: PUSH
50428: LD_INT 3
50430: NEG
50431: PUSH
50432: EMPTY
50433: LIST
50434: LIST
50435: PUSH
50436: LD_INT 1
50438: NEG
50439: PUSH
50440: LD_INT 3
50442: NEG
50443: PUSH
50444: EMPTY
50445: LIST
50446: LIST
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
50452: LD_ADDR_VAR 0 48
50456: PUSH
50457: LD_INT 1
50459: PUSH
50460: LD_INT 2
50462: NEG
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: PUSH
50468: LD_INT 2
50470: PUSH
50471: LD_INT 1
50473: NEG
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: PUSH
50479: EMPTY
50480: LIST
50481: LIST
50482: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
50483: LD_ADDR_VAR 0 49
50487: PUSH
50488: LD_INT 3
50490: PUSH
50491: LD_INT 1
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: PUSH
50498: LD_INT 3
50500: PUSH
50501: LD_INT 2
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: PUSH
50508: EMPTY
50509: LIST
50510: LIST
50511: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
50512: LD_ADDR_VAR 0 50
50516: PUSH
50517: LD_INT 2
50519: PUSH
50520: LD_INT 3
50522: PUSH
50523: EMPTY
50524: LIST
50525: LIST
50526: PUSH
50527: LD_INT 1
50529: PUSH
50530: LD_INT 3
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
50541: LD_ADDR_VAR 0 51
50545: PUSH
50546: LD_INT 1
50548: NEG
50549: PUSH
50550: LD_INT 2
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: PUSH
50557: LD_INT 2
50559: NEG
50560: PUSH
50561: LD_INT 1
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50572: LD_ADDR_VAR 0 52
50576: PUSH
50577: LD_INT 3
50579: NEG
50580: PUSH
50581: LD_INT 1
50583: NEG
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: LD_INT 3
50591: NEG
50592: PUSH
50593: LD_INT 2
50595: NEG
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50605: LD_ADDR_VAR 0 53
50609: PUSH
50610: LD_INT 1
50612: NEG
50613: PUSH
50614: LD_INT 3
50616: NEG
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: PUSH
50622: LD_INT 0
50624: PUSH
50625: LD_INT 3
50627: NEG
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: PUSH
50633: LD_INT 1
50635: PUSH
50636: LD_INT 2
50638: NEG
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: LIST
50648: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50649: LD_ADDR_VAR 0 54
50653: PUSH
50654: LD_INT 2
50656: PUSH
50657: LD_INT 1
50659: NEG
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: PUSH
50665: LD_INT 3
50667: PUSH
50668: LD_INT 0
50670: PUSH
50671: EMPTY
50672: LIST
50673: LIST
50674: PUSH
50675: LD_INT 3
50677: PUSH
50678: LD_INT 1
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: LIST
50689: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50690: LD_ADDR_VAR 0 55
50694: PUSH
50695: LD_INT 3
50697: PUSH
50698: LD_INT 2
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: PUSH
50705: LD_INT 3
50707: PUSH
50708: LD_INT 3
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: PUSH
50715: LD_INT 2
50717: PUSH
50718: LD_INT 3
50720: PUSH
50721: EMPTY
50722: LIST
50723: LIST
50724: PUSH
50725: EMPTY
50726: LIST
50727: LIST
50728: LIST
50729: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50730: LD_ADDR_VAR 0 56
50734: PUSH
50735: LD_INT 1
50737: PUSH
50738: LD_INT 3
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: PUSH
50745: LD_INT 0
50747: PUSH
50748: LD_INT 3
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 1
50757: NEG
50758: PUSH
50759: LD_INT 2
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: LIST
50770: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50771: LD_ADDR_VAR 0 57
50775: PUSH
50776: LD_INT 2
50778: NEG
50779: PUSH
50780: LD_INT 1
50782: PUSH
50783: EMPTY
50784: LIST
50785: LIST
50786: PUSH
50787: LD_INT 3
50789: NEG
50790: PUSH
50791: LD_INT 0
50793: PUSH
50794: EMPTY
50795: LIST
50796: LIST
50797: PUSH
50798: LD_INT 3
50800: NEG
50801: PUSH
50802: LD_INT 1
50804: NEG
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: LIST
50814: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50815: LD_ADDR_VAR 0 58
50819: PUSH
50820: LD_INT 2
50822: NEG
50823: PUSH
50824: LD_INT 3
50826: NEG
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: LD_INT 3
50834: NEG
50835: PUSH
50836: LD_INT 2
50838: NEG
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: PUSH
50844: LD_INT 3
50846: NEG
50847: PUSH
50848: LD_INT 3
50850: NEG
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: LIST
50860: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
50861: LD_ADDR_VAR 0 59
50865: PUSH
50866: LD_INT 1
50868: NEG
50869: PUSH
50870: LD_INT 2
50872: NEG
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: LD_INT 0
50880: PUSH
50881: LD_INT 2
50883: NEG
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: PUSH
50889: LD_INT 1
50891: PUSH
50892: LD_INT 1
50894: NEG
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: LIST
50904: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50905: LD_ADDR_VAR 0 60
50909: PUSH
50910: LD_INT 1
50912: PUSH
50913: LD_INT 1
50915: NEG
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PUSH
50921: LD_INT 2
50923: PUSH
50924: LD_INT 0
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 2
50933: PUSH
50934: LD_INT 1
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: LIST
50945: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50946: LD_ADDR_VAR 0 61
50950: PUSH
50951: LD_INT 2
50953: PUSH
50954: LD_INT 1
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: LD_INT 2
50963: PUSH
50964: LD_INT 2
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: LD_INT 1
50973: PUSH
50974: LD_INT 2
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: LIST
50985: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50986: LD_ADDR_VAR 0 62
50990: PUSH
50991: LD_INT 1
50993: PUSH
50994: LD_INT 2
50996: PUSH
50997: EMPTY
50998: LIST
50999: LIST
51000: PUSH
51001: LD_INT 0
51003: PUSH
51004: LD_INT 2
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: PUSH
51011: LD_INT 1
51013: NEG
51014: PUSH
51015: LD_INT 1
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: LIST
51026: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51027: LD_ADDR_VAR 0 63
51031: PUSH
51032: LD_INT 1
51034: NEG
51035: PUSH
51036: LD_INT 1
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: PUSH
51043: LD_INT 2
51045: NEG
51046: PUSH
51047: LD_INT 0
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: PUSH
51054: LD_INT 2
51056: NEG
51057: PUSH
51058: LD_INT 1
51060: NEG
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: LIST
51070: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51071: LD_ADDR_VAR 0 64
51075: PUSH
51076: LD_INT 1
51078: NEG
51079: PUSH
51080: LD_INT 2
51082: NEG
51083: PUSH
51084: EMPTY
51085: LIST
51086: LIST
51087: PUSH
51088: LD_INT 2
51090: NEG
51091: PUSH
51092: LD_INT 1
51094: NEG
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: LD_INT 2
51102: NEG
51103: PUSH
51104: LD_INT 2
51106: NEG
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: LIST
51116: ST_TO_ADDR
// end ; 2 :
51117: GO 54383
51119: LD_INT 2
51121: DOUBLE
51122: EQUAL
51123: IFTRUE 51127
51125: GO 54382
51127: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
51128: LD_ADDR_VAR 0 29
51132: PUSH
51133: LD_INT 4
51135: PUSH
51136: LD_INT 0
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 4
51145: PUSH
51146: LD_INT 1
51148: NEG
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: PUSH
51154: LD_INT 5
51156: PUSH
51157: LD_INT 0
51159: PUSH
51160: EMPTY
51161: LIST
51162: LIST
51163: PUSH
51164: LD_INT 5
51166: PUSH
51167: LD_INT 1
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PUSH
51174: LD_INT 4
51176: PUSH
51177: LD_INT 1
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 3
51186: PUSH
51187: LD_INT 0
51189: PUSH
51190: EMPTY
51191: LIST
51192: LIST
51193: PUSH
51194: LD_INT 3
51196: PUSH
51197: LD_INT 1
51199: NEG
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: LD_INT 3
51207: PUSH
51208: LD_INT 2
51210: NEG
51211: PUSH
51212: EMPTY
51213: LIST
51214: LIST
51215: PUSH
51216: LD_INT 5
51218: PUSH
51219: LD_INT 2
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PUSH
51226: LD_INT 3
51228: PUSH
51229: LD_INT 3
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 3
51238: PUSH
51239: LD_INT 2
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: LD_INT 4
51248: PUSH
51249: LD_INT 3
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: PUSH
51256: LD_INT 4
51258: PUSH
51259: LD_INT 4
51261: PUSH
51262: EMPTY
51263: LIST
51264: LIST
51265: PUSH
51266: LD_INT 3
51268: PUSH
51269: LD_INT 4
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: PUSH
51276: LD_INT 2
51278: PUSH
51279: LD_INT 3
51281: PUSH
51282: EMPTY
51283: LIST
51284: LIST
51285: PUSH
51286: LD_INT 2
51288: PUSH
51289: LD_INT 2
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: PUSH
51296: LD_INT 4
51298: PUSH
51299: LD_INT 2
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: PUSH
51306: LD_INT 2
51308: PUSH
51309: LD_INT 4
51311: PUSH
51312: EMPTY
51313: LIST
51314: LIST
51315: PUSH
51316: LD_INT 0
51318: PUSH
51319: LD_INT 4
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: PUSH
51326: LD_INT 0
51328: PUSH
51329: LD_INT 3
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: PUSH
51336: LD_INT 1
51338: PUSH
51339: LD_INT 4
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: PUSH
51346: LD_INT 1
51348: PUSH
51349: LD_INT 5
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: PUSH
51356: LD_INT 0
51358: PUSH
51359: LD_INT 5
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: LD_INT 1
51368: NEG
51369: PUSH
51370: LD_INT 4
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: PUSH
51377: LD_INT 1
51379: NEG
51380: PUSH
51381: LD_INT 3
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: PUSH
51388: LD_INT 2
51390: PUSH
51391: LD_INT 5
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: PUSH
51398: LD_INT 2
51400: NEG
51401: PUSH
51402: LD_INT 3
51404: PUSH
51405: EMPTY
51406: LIST
51407: LIST
51408: PUSH
51409: LD_INT 3
51411: NEG
51412: PUSH
51413: LD_INT 0
51415: PUSH
51416: EMPTY
51417: LIST
51418: LIST
51419: PUSH
51420: LD_INT 3
51422: NEG
51423: PUSH
51424: LD_INT 1
51426: NEG
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: LD_INT 2
51434: NEG
51435: PUSH
51436: LD_INT 0
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 2
51445: NEG
51446: PUSH
51447: LD_INT 1
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: PUSH
51454: LD_INT 3
51456: NEG
51457: PUSH
51458: LD_INT 1
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 4
51467: NEG
51468: PUSH
51469: LD_INT 0
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 4
51478: NEG
51479: PUSH
51480: LD_INT 1
51482: NEG
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: PUSH
51488: LD_INT 4
51490: NEG
51491: PUSH
51492: LD_INT 2
51494: NEG
51495: PUSH
51496: EMPTY
51497: LIST
51498: LIST
51499: PUSH
51500: LD_INT 2
51502: NEG
51503: PUSH
51504: LD_INT 2
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: PUSH
51511: LD_INT 4
51513: NEG
51514: PUSH
51515: LD_INT 4
51517: NEG
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: PUSH
51523: LD_INT 4
51525: NEG
51526: PUSH
51527: LD_INT 5
51529: NEG
51530: PUSH
51531: EMPTY
51532: LIST
51533: LIST
51534: PUSH
51535: LD_INT 3
51537: NEG
51538: PUSH
51539: LD_INT 4
51541: NEG
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: PUSH
51547: LD_INT 3
51549: NEG
51550: PUSH
51551: LD_INT 3
51553: NEG
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: PUSH
51559: LD_INT 4
51561: NEG
51562: PUSH
51563: LD_INT 3
51565: NEG
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: PUSH
51571: LD_INT 5
51573: NEG
51574: PUSH
51575: LD_INT 4
51577: NEG
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: PUSH
51583: LD_INT 5
51585: NEG
51586: PUSH
51587: LD_INT 5
51589: NEG
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: PUSH
51595: LD_INT 3
51597: NEG
51598: PUSH
51599: LD_INT 5
51601: NEG
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: PUSH
51607: LD_INT 5
51609: NEG
51610: PUSH
51611: LD_INT 3
51613: NEG
51614: PUSH
51615: EMPTY
51616: LIST
51617: LIST
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: LIST
51623: LIST
51624: LIST
51625: LIST
51626: LIST
51627: LIST
51628: LIST
51629: LIST
51630: LIST
51631: LIST
51632: LIST
51633: LIST
51634: LIST
51635: LIST
51636: LIST
51637: LIST
51638: LIST
51639: LIST
51640: LIST
51641: LIST
51642: LIST
51643: LIST
51644: LIST
51645: LIST
51646: LIST
51647: LIST
51648: LIST
51649: LIST
51650: LIST
51651: LIST
51652: LIST
51653: LIST
51654: LIST
51655: LIST
51656: LIST
51657: LIST
51658: LIST
51659: LIST
51660: LIST
51661: LIST
51662: LIST
51663: LIST
51664: LIST
51665: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
51666: LD_ADDR_VAR 0 30
51670: PUSH
51671: LD_INT 4
51673: PUSH
51674: LD_INT 4
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: PUSH
51681: LD_INT 4
51683: PUSH
51684: LD_INT 3
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: PUSH
51691: LD_INT 5
51693: PUSH
51694: LD_INT 4
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: PUSH
51701: LD_INT 5
51703: PUSH
51704: LD_INT 5
51706: PUSH
51707: EMPTY
51708: LIST
51709: LIST
51710: PUSH
51711: LD_INT 4
51713: PUSH
51714: LD_INT 5
51716: PUSH
51717: EMPTY
51718: LIST
51719: LIST
51720: PUSH
51721: LD_INT 3
51723: PUSH
51724: LD_INT 4
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: LD_INT 3
51733: PUSH
51734: LD_INT 3
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: PUSH
51741: LD_INT 5
51743: PUSH
51744: LD_INT 3
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: PUSH
51751: LD_INT 3
51753: PUSH
51754: LD_INT 5
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: LD_INT 0
51763: PUSH
51764: LD_INT 3
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 0
51773: PUSH
51774: LD_INT 2
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: LD_INT 1
51783: PUSH
51784: LD_INT 3
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: PUSH
51791: LD_INT 1
51793: PUSH
51794: LD_INT 4
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: PUSH
51801: LD_INT 0
51803: PUSH
51804: LD_INT 4
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 1
51813: NEG
51814: PUSH
51815: LD_INT 3
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: LD_INT 1
51824: NEG
51825: PUSH
51826: LD_INT 2
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: PUSH
51833: LD_INT 2
51835: PUSH
51836: LD_INT 4
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: PUSH
51843: LD_INT 2
51845: NEG
51846: PUSH
51847: LD_INT 2
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: LD_INT 4
51856: NEG
51857: PUSH
51858: LD_INT 0
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: PUSH
51865: LD_INT 4
51867: NEG
51868: PUSH
51869: LD_INT 1
51871: NEG
51872: PUSH
51873: EMPTY
51874: LIST
51875: LIST
51876: PUSH
51877: LD_INT 3
51879: NEG
51880: PUSH
51881: LD_INT 0
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: PUSH
51888: LD_INT 3
51890: NEG
51891: PUSH
51892: LD_INT 1
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: PUSH
51899: LD_INT 4
51901: NEG
51902: PUSH
51903: LD_INT 1
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: LD_INT 5
51912: NEG
51913: PUSH
51914: LD_INT 0
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: PUSH
51921: LD_INT 5
51923: NEG
51924: PUSH
51925: LD_INT 1
51927: NEG
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: PUSH
51933: LD_INT 5
51935: NEG
51936: PUSH
51937: LD_INT 2
51939: NEG
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: PUSH
51945: LD_INT 3
51947: NEG
51948: PUSH
51949: LD_INT 2
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: PUSH
51956: LD_INT 3
51958: NEG
51959: PUSH
51960: LD_INT 3
51962: NEG
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 3
51970: NEG
51971: PUSH
51972: LD_INT 4
51974: NEG
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: LD_INT 2
51982: NEG
51983: PUSH
51984: LD_INT 3
51986: NEG
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 2
51994: NEG
51995: PUSH
51996: LD_INT 2
51998: NEG
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: PUSH
52004: LD_INT 3
52006: NEG
52007: PUSH
52008: LD_INT 2
52010: NEG
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: PUSH
52016: LD_INT 4
52018: NEG
52019: PUSH
52020: LD_INT 3
52022: NEG
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: PUSH
52028: LD_INT 4
52030: NEG
52031: PUSH
52032: LD_INT 4
52034: NEG
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: PUSH
52040: LD_INT 2
52042: NEG
52043: PUSH
52044: LD_INT 4
52046: NEG
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: PUSH
52052: LD_INT 4
52054: NEG
52055: PUSH
52056: LD_INT 2
52058: NEG
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: LD_INT 0
52066: PUSH
52067: LD_INT 4
52069: NEG
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: LD_INT 0
52077: PUSH
52078: LD_INT 5
52080: NEG
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PUSH
52086: LD_INT 1
52088: PUSH
52089: LD_INT 4
52091: NEG
52092: PUSH
52093: EMPTY
52094: LIST
52095: LIST
52096: PUSH
52097: LD_INT 1
52099: PUSH
52100: LD_INT 3
52102: NEG
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: LD_INT 0
52110: PUSH
52111: LD_INT 3
52113: NEG
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: LD_INT 1
52121: NEG
52122: PUSH
52123: LD_INT 4
52125: NEG
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: LD_INT 1
52133: NEG
52134: PUSH
52135: LD_INT 5
52137: NEG
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: PUSH
52143: LD_INT 2
52145: PUSH
52146: LD_INT 3
52148: NEG
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: PUSH
52154: LD_INT 2
52156: NEG
52157: PUSH
52158: LD_INT 5
52160: NEG
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: LIST
52170: LIST
52171: LIST
52172: LIST
52173: LIST
52174: LIST
52175: LIST
52176: LIST
52177: LIST
52178: LIST
52179: LIST
52180: LIST
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: LIST
52193: LIST
52194: LIST
52195: LIST
52196: LIST
52197: LIST
52198: LIST
52199: LIST
52200: LIST
52201: LIST
52202: LIST
52203: LIST
52204: LIST
52205: LIST
52206: LIST
52207: LIST
52208: LIST
52209: LIST
52210: LIST
52211: LIST
52212: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
52213: LD_ADDR_VAR 0 31
52217: PUSH
52218: LD_INT 0
52220: PUSH
52221: LD_INT 4
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: PUSH
52228: LD_INT 0
52230: PUSH
52231: LD_INT 3
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: LD_INT 1
52240: PUSH
52241: LD_INT 4
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 1
52250: PUSH
52251: LD_INT 5
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: LD_INT 0
52260: PUSH
52261: LD_INT 5
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 1
52270: NEG
52271: PUSH
52272: LD_INT 4
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 1
52281: NEG
52282: PUSH
52283: LD_INT 3
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: LD_INT 2
52292: PUSH
52293: LD_INT 5
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 2
52302: NEG
52303: PUSH
52304: LD_INT 3
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: PUSH
52311: LD_INT 3
52313: NEG
52314: PUSH
52315: LD_INT 0
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 3
52324: NEG
52325: PUSH
52326: LD_INT 1
52328: NEG
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 2
52336: NEG
52337: PUSH
52338: LD_INT 0
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 2
52347: NEG
52348: PUSH
52349: LD_INT 1
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: LD_INT 3
52358: NEG
52359: PUSH
52360: LD_INT 1
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: PUSH
52367: LD_INT 4
52369: NEG
52370: PUSH
52371: LD_INT 0
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: PUSH
52378: LD_INT 4
52380: NEG
52381: PUSH
52382: LD_INT 1
52384: NEG
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: PUSH
52390: LD_INT 4
52392: NEG
52393: PUSH
52394: LD_INT 2
52396: NEG
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: LD_INT 2
52404: NEG
52405: PUSH
52406: LD_INT 2
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: LD_INT 4
52415: NEG
52416: PUSH
52417: LD_INT 4
52419: NEG
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: PUSH
52425: LD_INT 4
52427: NEG
52428: PUSH
52429: LD_INT 5
52431: NEG
52432: PUSH
52433: EMPTY
52434: LIST
52435: LIST
52436: PUSH
52437: LD_INT 3
52439: NEG
52440: PUSH
52441: LD_INT 4
52443: NEG
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: PUSH
52449: LD_INT 3
52451: NEG
52452: PUSH
52453: LD_INT 3
52455: NEG
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: PUSH
52461: LD_INT 4
52463: NEG
52464: PUSH
52465: LD_INT 3
52467: NEG
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: PUSH
52473: LD_INT 5
52475: NEG
52476: PUSH
52477: LD_INT 4
52479: NEG
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PUSH
52485: LD_INT 5
52487: NEG
52488: PUSH
52489: LD_INT 5
52491: NEG
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: LD_INT 3
52499: NEG
52500: PUSH
52501: LD_INT 5
52503: NEG
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: PUSH
52509: LD_INT 5
52511: NEG
52512: PUSH
52513: LD_INT 3
52515: NEG
52516: PUSH
52517: EMPTY
52518: LIST
52519: LIST
52520: PUSH
52521: LD_INT 0
52523: PUSH
52524: LD_INT 3
52526: NEG
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: LD_INT 0
52534: PUSH
52535: LD_INT 4
52537: NEG
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PUSH
52543: LD_INT 1
52545: PUSH
52546: LD_INT 3
52548: NEG
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: LD_INT 1
52556: PUSH
52557: LD_INT 2
52559: NEG
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: LD_INT 0
52567: PUSH
52568: LD_INT 2
52570: NEG
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: LD_INT 1
52578: NEG
52579: PUSH
52580: LD_INT 3
52582: NEG
52583: PUSH
52584: EMPTY
52585: LIST
52586: LIST
52587: PUSH
52588: LD_INT 1
52590: NEG
52591: PUSH
52592: LD_INT 4
52594: NEG
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: PUSH
52600: LD_INT 2
52602: PUSH
52603: LD_INT 2
52605: NEG
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: PUSH
52611: LD_INT 2
52613: NEG
52614: PUSH
52615: LD_INT 4
52617: NEG
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: PUSH
52623: LD_INT 4
52625: PUSH
52626: LD_INT 0
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: LD_INT 4
52635: PUSH
52636: LD_INT 1
52638: NEG
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: PUSH
52644: LD_INT 5
52646: PUSH
52647: LD_INT 0
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: PUSH
52654: LD_INT 5
52656: PUSH
52657: LD_INT 1
52659: PUSH
52660: EMPTY
52661: LIST
52662: LIST
52663: PUSH
52664: LD_INT 4
52666: PUSH
52667: LD_INT 1
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: PUSH
52674: LD_INT 3
52676: PUSH
52677: LD_INT 0
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: PUSH
52684: LD_INT 3
52686: PUSH
52687: LD_INT 1
52689: NEG
52690: PUSH
52691: EMPTY
52692: LIST
52693: LIST
52694: PUSH
52695: LD_INT 3
52697: PUSH
52698: LD_INT 2
52700: NEG
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: PUSH
52706: LD_INT 5
52708: PUSH
52709: LD_INT 2
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: LIST
52720: LIST
52721: LIST
52722: LIST
52723: LIST
52724: LIST
52725: LIST
52726: LIST
52727: LIST
52728: LIST
52729: LIST
52730: LIST
52731: LIST
52732: LIST
52733: LIST
52734: LIST
52735: LIST
52736: LIST
52737: LIST
52738: LIST
52739: LIST
52740: LIST
52741: LIST
52742: LIST
52743: LIST
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: LIST
52758: LIST
52759: LIST
52760: LIST
52761: LIST
52762: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
52763: LD_ADDR_VAR 0 32
52767: PUSH
52768: LD_INT 4
52770: NEG
52771: PUSH
52772: LD_INT 0
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: PUSH
52779: LD_INT 4
52781: NEG
52782: PUSH
52783: LD_INT 1
52785: NEG
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: PUSH
52791: LD_INT 3
52793: NEG
52794: PUSH
52795: LD_INT 0
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: PUSH
52802: LD_INT 3
52804: NEG
52805: PUSH
52806: LD_INT 1
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: PUSH
52813: LD_INT 4
52815: NEG
52816: PUSH
52817: LD_INT 1
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: PUSH
52824: LD_INT 5
52826: NEG
52827: PUSH
52828: LD_INT 0
52830: PUSH
52831: EMPTY
52832: LIST
52833: LIST
52834: PUSH
52835: LD_INT 5
52837: NEG
52838: PUSH
52839: LD_INT 1
52841: NEG
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: LD_INT 5
52849: NEG
52850: PUSH
52851: LD_INT 2
52853: NEG
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: PUSH
52859: LD_INT 3
52861: NEG
52862: PUSH
52863: LD_INT 2
52865: PUSH
52866: EMPTY
52867: LIST
52868: LIST
52869: PUSH
52870: LD_INT 3
52872: NEG
52873: PUSH
52874: LD_INT 3
52876: NEG
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: LD_INT 3
52884: NEG
52885: PUSH
52886: LD_INT 4
52888: NEG
52889: PUSH
52890: EMPTY
52891: LIST
52892: LIST
52893: PUSH
52894: LD_INT 2
52896: NEG
52897: PUSH
52898: LD_INT 3
52900: NEG
52901: PUSH
52902: EMPTY
52903: LIST
52904: LIST
52905: PUSH
52906: LD_INT 2
52908: NEG
52909: PUSH
52910: LD_INT 2
52912: NEG
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PUSH
52918: LD_INT 3
52920: NEG
52921: PUSH
52922: LD_INT 2
52924: NEG
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: PUSH
52930: LD_INT 4
52932: NEG
52933: PUSH
52934: LD_INT 3
52936: NEG
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: PUSH
52942: LD_INT 4
52944: NEG
52945: PUSH
52946: LD_INT 4
52948: NEG
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: PUSH
52954: LD_INT 2
52956: NEG
52957: PUSH
52958: LD_INT 4
52960: NEG
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: PUSH
52966: LD_INT 4
52968: NEG
52969: PUSH
52970: LD_INT 2
52972: NEG
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: PUSH
52978: LD_INT 0
52980: PUSH
52981: LD_INT 4
52983: NEG
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: LD_INT 0
52991: PUSH
52992: LD_INT 5
52994: NEG
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PUSH
53000: LD_INT 1
53002: PUSH
53003: LD_INT 4
53005: NEG
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: PUSH
53011: LD_INT 1
53013: PUSH
53014: LD_INT 3
53016: NEG
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 0
53024: PUSH
53025: LD_INT 3
53027: NEG
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: PUSH
53033: LD_INT 1
53035: NEG
53036: PUSH
53037: LD_INT 4
53039: NEG
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: LD_INT 1
53047: NEG
53048: PUSH
53049: LD_INT 5
53051: NEG
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: PUSH
53057: LD_INT 2
53059: PUSH
53060: LD_INT 3
53062: NEG
53063: PUSH
53064: EMPTY
53065: LIST
53066: LIST
53067: PUSH
53068: LD_INT 2
53070: NEG
53071: PUSH
53072: LD_INT 5
53074: NEG
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: PUSH
53080: LD_INT 3
53082: PUSH
53083: LD_INT 0
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: LD_INT 3
53092: PUSH
53093: LD_INT 1
53095: NEG
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: PUSH
53101: LD_INT 4
53103: PUSH
53104: LD_INT 0
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: PUSH
53111: LD_INT 4
53113: PUSH
53114: LD_INT 1
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 3
53123: PUSH
53124: LD_INT 1
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: PUSH
53131: LD_INT 2
53133: PUSH
53134: LD_INT 0
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: PUSH
53141: LD_INT 2
53143: PUSH
53144: LD_INT 1
53146: NEG
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: PUSH
53152: LD_INT 2
53154: PUSH
53155: LD_INT 2
53157: NEG
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: PUSH
53163: LD_INT 4
53165: PUSH
53166: LD_INT 2
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: LD_INT 4
53175: PUSH
53176: LD_INT 4
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: LD_INT 4
53185: PUSH
53186: LD_INT 3
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: PUSH
53193: LD_INT 5
53195: PUSH
53196: LD_INT 4
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: LD_INT 5
53205: PUSH
53206: LD_INT 5
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: PUSH
53213: LD_INT 4
53215: PUSH
53216: LD_INT 5
53218: PUSH
53219: EMPTY
53220: LIST
53221: LIST
53222: PUSH
53223: LD_INT 3
53225: PUSH
53226: LD_INT 4
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: LD_INT 3
53235: PUSH
53236: LD_INT 3
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: PUSH
53243: LD_INT 5
53245: PUSH
53246: LD_INT 3
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: LD_INT 3
53255: PUSH
53256: LD_INT 5
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: LIST
53267: LIST
53268: LIST
53269: LIST
53270: LIST
53271: LIST
53272: LIST
53273: LIST
53274: LIST
53275: LIST
53276: LIST
53277: LIST
53278: LIST
53279: LIST
53280: LIST
53281: LIST
53282: LIST
53283: LIST
53284: LIST
53285: LIST
53286: LIST
53287: LIST
53288: LIST
53289: LIST
53290: LIST
53291: LIST
53292: LIST
53293: LIST
53294: LIST
53295: LIST
53296: LIST
53297: LIST
53298: LIST
53299: LIST
53300: LIST
53301: LIST
53302: LIST
53303: LIST
53304: LIST
53305: LIST
53306: LIST
53307: LIST
53308: LIST
53309: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
53310: LD_ADDR_VAR 0 33
53314: PUSH
53315: LD_INT 4
53317: NEG
53318: PUSH
53319: LD_INT 4
53321: NEG
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: LD_INT 4
53329: NEG
53330: PUSH
53331: LD_INT 5
53333: NEG
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: LD_INT 3
53341: NEG
53342: PUSH
53343: LD_INT 4
53345: NEG
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: PUSH
53351: LD_INT 3
53353: NEG
53354: PUSH
53355: LD_INT 3
53357: NEG
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 4
53365: NEG
53366: PUSH
53367: LD_INT 3
53369: NEG
53370: PUSH
53371: EMPTY
53372: LIST
53373: LIST
53374: PUSH
53375: LD_INT 5
53377: NEG
53378: PUSH
53379: LD_INT 4
53381: NEG
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 5
53389: NEG
53390: PUSH
53391: LD_INT 5
53393: NEG
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 3
53401: NEG
53402: PUSH
53403: LD_INT 5
53405: NEG
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: PUSH
53411: LD_INT 5
53413: NEG
53414: PUSH
53415: LD_INT 3
53417: NEG
53418: PUSH
53419: EMPTY
53420: LIST
53421: LIST
53422: PUSH
53423: LD_INT 0
53425: PUSH
53426: LD_INT 3
53428: NEG
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: PUSH
53434: LD_INT 0
53436: PUSH
53437: LD_INT 4
53439: NEG
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: PUSH
53445: LD_INT 1
53447: PUSH
53448: LD_INT 3
53450: NEG
53451: PUSH
53452: EMPTY
53453: LIST
53454: LIST
53455: PUSH
53456: LD_INT 1
53458: PUSH
53459: LD_INT 2
53461: NEG
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: PUSH
53467: LD_INT 0
53469: PUSH
53470: LD_INT 2
53472: NEG
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: PUSH
53478: LD_INT 1
53480: NEG
53481: PUSH
53482: LD_INT 3
53484: NEG
53485: PUSH
53486: EMPTY
53487: LIST
53488: LIST
53489: PUSH
53490: LD_INT 1
53492: NEG
53493: PUSH
53494: LD_INT 4
53496: NEG
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: LD_INT 2
53504: PUSH
53505: LD_INT 2
53507: NEG
53508: PUSH
53509: EMPTY
53510: LIST
53511: LIST
53512: PUSH
53513: LD_INT 2
53515: NEG
53516: PUSH
53517: LD_INT 4
53519: NEG
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: LD_INT 4
53527: PUSH
53528: LD_INT 0
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: PUSH
53535: LD_INT 4
53537: PUSH
53538: LD_INT 1
53540: NEG
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: PUSH
53546: LD_INT 5
53548: PUSH
53549: LD_INT 0
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: PUSH
53556: LD_INT 5
53558: PUSH
53559: LD_INT 1
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PUSH
53566: LD_INT 4
53568: PUSH
53569: LD_INT 1
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: PUSH
53576: LD_INT 3
53578: PUSH
53579: LD_INT 0
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: LD_INT 3
53588: PUSH
53589: LD_INT 1
53591: NEG
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: PUSH
53597: LD_INT 3
53599: PUSH
53600: LD_INT 2
53602: NEG
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: PUSH
53608: LD_INT 5
53610: PUSH
53611: LD_INT 2
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: PUSH
53618: LD_INT 3
53620: PUSH
53621: LD_INT 3
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: PUSH
53628: LD_INT 3
53630: PUSH
53631: LD_INT 2
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: PUSH
53638: LD_INT 4
53640: PUSH
53641: LD_INT 3
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: PUSH
53648: LD_INT 4
53650: PUSH
53651: LD_INT 4
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: LD_INT 3
53660: PUSH
53661: LD_INT 4
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: LD_INT 2
53670: PUSH
53671: LD_INT 3
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: PUSH
53678: LD_INT 2
53680: PUSH
53681: LD_INT 2
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 4
53690: PUSH
53691: LD_INT 2
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 2
53700: PUSH
53701: LD_INT 4
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: LD_INT 0
53710: PUSH
53711: LD_INT 4
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 0
53720: PUSH
53721: LD_INT 3
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 1
53730: PUSH
53731: LD_INT 4
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: LD_INT 1
53740: PUSH
53741: LD_INT 5
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 0
53750: PUSH
53751: LD_INT 5
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_INT 1
53760: NEG
53761: PUSH
53762: LD_INT 4
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PUSH
53769: LD_INT 1
53771: NEG
53772: PUSH
53773: LD_INT 3
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: LD_INT 2
53782: PUSH
53783: LD_INT 5
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: PUSH
53790: LD_INT 2
53792: NEG
53793: PUSH
53794: LD_INT 3
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: LIST
53805: LIST
53806: LIST
53807: LIST
53808: LIST
53809: LIST
53810: LIST
53811: LIST
53812: LIST
53813: LIST
53814: LIST
53815: LIST
53816: LIST
53817: LIST
53818: LIST
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: LIST
53844: LIST
53845: LIST
53846: LIST
53847: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
53848: LD_ADDR_VAR 0 34
53852: PUSH
53853: LD_INT 0
53855: PUSH
53856: LD_INT 4
53858: NEG
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: PUSH
53864: LD_INT 0
53866: PUSH
53867: LD_INT 5
53869: NEG
53870: PUSH
53871: EMPTY
53872: LIST
53873: LIST
53874: PUSH
53875: LD_INT 1
53877: PUSH
53878: LD_INT 4
53880: NEG
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: LD_INT 1
53888: PUSH
53889: LD_INT 3
53891: NEG
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: LD_INT 0
53899: PUSH
53900: LD_INT 3
53902: NEG
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: PUSH
53908: LD_INT 1
53910: NEG
53911: PUSH
53912: LD_INT 4
53914: NEG
53915: PUSH
53916: EMPTY
53917: LIST
53918: LIST
53919: PUSH
53920: LD_INT 1
53922: NEG
53923: PUSH
53924: LD_INT 5
53926: NEG
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: PUSH
53932: LD_INT 2
53934: PUSH
53935: LD_INT 3
53937: NEG
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: LD_INT 2
53945: NEG
53946: PUSH
53947: LD_INT 5
53949: NEG
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: LD_INT 3
53957: PUSH
53958: LD_INT 0
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: LD_INT 3
53967: PUSH
53968: LD_INT 1
53970: NEG
53971: PUSH
53972: EMPTY
53973: LIST
53974: LIST
53975: PUSH
53976: LD_INT 4
53978: PUSH
53979: LD_INT 0
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: LD_INT 4
53988: PUSH
53989: LD_INT 1
53991: PUSH
53992: EMPTY
53993: LIST
53994: LIST
53995: PUSH
53996: LD_INT 3
53998: PUSH
53999: LD_INT 1
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: PUSH
54006: LD_INT 2
54008: PUSH
54009: LD_INT 0
54011: PUSH
54012: EMPTY
54013: LIST
54014: LIST
54015: PUSH
54016: LD_INT 2
54018: PUSH
54019: LD_INT 1
54021: NEG
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: LD_INT 2
54029: PUSH
54030: LD_INT 2
54032: NEG
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: PUSH
54038: LD_INT 4
54040: PUSH
54041: LD_INT 2
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: LD_INT 4
54050: PUSH
54051: LD_INT 4
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: PUSH
54058: LD_INT 4
54060: PUSH
54061: LD_INT 3
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: PUSH
54068: LD_INT 5
54070: PUSH
54071: LD_INT 4
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PUSH
54078: LD_INT 5
54080: PUSH
54081: LD_INT 5
54083: PUSH
54084: EMPTY
54085: LIST
54086: LIST
54087: PUSH
54088: LD_INT 4
54090: PUSH
54091: LD_INT 5
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: PUSH
54098: LD_INT 3
54100: PUSH
54101: LD_INT 4
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: PUSH
54108: LD_INT 3
54110: PUSH
54111: LD_INT 3
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: PUSH
54118: LD_INT 5
54120: PUSH
54121: LD_INT 3
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: PUSH
54128: LD_INT 3
54130: PUSH
54131: LD_INT 5
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: PUSH
54138: LD_INT 0
54140: PUSH
54141: LD_INT 3
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: PUSH
54148: LD_INT 0
54150: PUSH
54151: LD_INT 2
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: PUSH
54158: LD_INT 1
54160: PUSH
54161: LD_INT 3
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: LD_INT 1
54170: PUSH
54171: LD_INT 4
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: LD_INT 0
54180: PUSH
54181: LD_INT 4
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: PUSH
54188: LD_INT 1
54190: NEG
54191: PUSH
54192: LD_INT 3
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: LD_INT 1
54201: NEG
54202: PUSH
54203: LD_INT 2
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: PUSH
54210: LD_INT 2
54212: PUSH
54213: LD_INT 4
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PUSH
54220: LD_INT 2
54222: NEG
54223: PUSH
54224: LD_INT 2
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: PUSH
54231: LD_INT 4
54233: NEG
54234: PUSH
54235: LD_INT 0
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PUSH
54242: LD_INT 4
54244: NEG
54245: PUSH
54246: LD_INT 1
54248: NEG
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: LD_INT 3
54256: NEG
54257: PUSH
54258: LD_INT 0
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 3
54267: NEG
54268: PUSH
54269: LD_INT 1
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: PUSH
54276: LD_INT 4
54278: NEG
54279: PUSH
54280: LD_INT 1
54282: PUSH
54283: EMPTY
54284: LIST
54285: LIST
54286: PUSH
54287: LD_INT 5
54289: NEG
54290: PUSH
54291: LD_INT 0
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: PUSH
54298: LD_INT 5
54300: NEG
54301: PUSH
54302: LD_INT 1
54304: NEG
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: LD_INT 5
54312: NEG
54313: PUSH
54314: LD_INT 2
54316: NEG
54317: PUSH
54318: EMPTY
54319: LIST
54320: LIST
54321: PUSH
54322: LD_INT 3
54324: NEG
54325: PUSH
54326: LD_INT 2
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: LIST
54337: LIST
54338: LIST
54339: LIST
54340: LIST
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: LIST
54349: LIST
54350: LIST
54351: LIST
54352: LIST
54353: LIST
54354: LIST
54355: LIST
54356: LIST
54357: LIST
54358: LIST
54359: LIST
54360: LIST
54361: LIST
54362: LIST
54363: LIST
54364: LIST
54365: LIST
54366: LIST
54367: LIST
54368: LIST
54369: LIST
54370: LIST
54371: LIST
54372: LIST
54373: LIST
54374: LIST
54375: LIST
54376: LIST
54377: LIST
54378: LIST
54379: ST_TO_ADDR
// end ; end ;
54380: GO 54383
54382: POP
// case btype of b_depot , b_warehouse :
54383: LD_VAR 0 1
54387: PUSH
54388: LD_INT 0
54390: DOUBLE
54391: EQUAL
54392: IFTRUE 54402
54394: LD_INT 1
54396: DOUBLE
54397: EQUAL
54398: IFTRUE 54402
54400: GO 54603
54402: POP
// case nation of nation_american :
54403: LD_VAR 0 5
54407: PUSH
54408: LD_INT 1
54410: DOUBLE
54411: EQUAL
54412: IFTRUE 54416
54414: GO 54472
54416: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
54417: LD_ADDR_VAR 0 9
54421: PUSH
54422: LD_VAR 0 11
54426: PUSH
54427: LD_VAR 0 12
54431: PUSH
54432: LD_VAR 0 13
54436: PUSH
54437: LD_VAR 0 14
54441: PUSH
54442: LD_VAR 0 15
54446: PUSH
54447: LD_VAR 0 16
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: LIST
54456: LIST
54457: LIST
54458: LIST
54459: PUSH
54460: LD_VAR 0 4
54464: PUSH
54465: LD_INT 1
54467: PLUS
54468: ARRAY
54469: ST_TO_ADDR
54470: GO 54601
54472: LD_INT 2
54474: DOUBLE
54475: EQUAL
54476: IFTRUE 54480
54478: GO 54536
54480: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
54481: LD_ADDR_VAR 0 9
54485: PUSH
54486: LD_VAR 0 17
54490: PUSH
54491: LD_VAR 0 18
54495: PUSH
54496: LD_VAR 0 19
54500: PUSH
54501: LD_VAR 0 20
54505: PUSH
54506: LD_VAR 0 21
54510: PUSH
54511: LD_VAR 0 22
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: LIST
54520: LIST
54521: LIST
54522: LIST
54523: PUSH
54524: LD_VAR 0 4
54528: PUSH
54529: LD_INT 1
54531: PLUS
54532: ARRAY
54533: ST_TO_ADDR
54534: GO 54601
54536: LD_INT 3
54538: DOUBLE
54539: EQUAL
54540: IFTRUE 54544
54542: GO 54600
54544: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
54545: LD_ADDR_VAR 0 9
54549: PUSH
54550: LD_VAR 0 23
54554: PUSH
54555: LD_VAR 0 24
54559: PUSH
54560: LD_VAR 0 25
54564: PUSH
54565: LD_VAR 0 26
54569: PUSH
54570: LD_VAR 0 27
54574: PUSH
54575: LD_VAR 0 28
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: LIST
54584: LIST
54585: LIST
54586: LIST
54587: PUSH
54588: LD_VAR 0 4
54592: PUSH
54593: LD_INT 1
54595: PLUS
54596: ARRAY
54597: ST_TO_ADDR
54598: GO 54601
54600: POP
54601: GO 55156
54603: LD_INT 2
54605: DOUBLE
54606: EQUAL
54607: IFTRUE 54617
54609: LD_INT 3
54611: DOUBLE
54612: EQUAL
54613: IFTRUE 54617
54615: GO 54673
54617: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
54618: LD_ADDR_VAR 0 9
54622: PUSH
54623: LD_VAR 0 29
54627: PUSH
54628: LD_VAR 0 30
54632: PUSH
54633: LD_VAR 0 31
54637: PUSH
54638: LD_VAR 0 32
54642: PUSH
54643: LD_VAR 0 33
54647: PUSH
54648: LD_VAR 0 34
54652: PUSH
54653: EMPTY
54654: LIST
54655: LIST
54656: LIST
54657: LIST
54658: LIST
54659: LIST
54660: PUSH
54661: LD_VAR 0 4
54665: PUSH
54666: LD_INT 1
54668: PLUS
54669: ARRAY
54670: ST_TO_ADDR
54671: GO 55156
54673: LD_INT 16
54675: DOUBLE
54676: EQUAL
54677: IFTRUE 54735
54679: LD_INT 17
54681: DOUBLE
54682: EQUAL
54683: IFTRUE 54735
54685: LD_INT 18
54687: DOUBLE
54688: EQUAL
54689: IFTRUE 54735
54691: LD_INT 19
54693: DOUBLE
54694: EQUAL
54695: IFTRUE 54735
54697: LD_INT 22
54699: DOUBLE
54700: EQUAL
54701: IFTRUE 54735
54703: LD_INT 20
54705: DOUBLE
54706: EQUAL
54707: IFTRUE 54735
54709: LD_INT 21
54711: DOUBLE
54712: EQUAL
54713: IFTRUE 54735
54715: LD_INT 23
54717: DOUBLE
54718: EQUAL
54719: IFTRUE 54735
54721: LD_INT 24
54723: DOUBLE
54724: EQUAL
54725: IFTRUE 54735
54727: LD_INT 25
54729: DOUBLE
54730: EQUAL
54731: IFTRUE 54735
54733: GO 54791
54735: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
54736: LD_ADDR_VAR 0 9
54740: PUSH
54741: LD_VAR 0 35
54745: PUSH
54746: LD_VAR 0 36
54750: PUSH
54751: LD_VAR 0 37
54755: PUSH
54756: LD_VAR 0 38
54760: PUSH
54761: LD_VAR 0 39
54765: PUSH
54766: LD_VAR 0 40
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: PUSH
54779: LD_VAR 0 4
54783: PUSH
54784: LD_INT 1
54786: PLUS
54787: ARRAY
54788: ST_TO_ADDR
54789: GO 55156
54791: LD_INT 6
54793: DOUBLE
54794: EQUAL
54795: IFTRUE 54847
54797: LD_INT 7
54799: DOUBLE
54800: EQUAL
54801: IFTRUE 54847
54803: LD_INT 8
54805: DOUBLE
54806: EQUAL
54807: IFTRUE 54847
54809: LD_INT 13
54811: DOUBLE
54812: EQUAL
54813: IFTRUE 54847
54815: LD_INT 12
54817: DOUBLE
54818: EQUAL
54819: IFTRUE 54847
54821: LD_INT 15
54823: DOUBLE
54824: EQUAL
54825: IFTRUE 54847
54827: LD_INT 11
54829: DOUBLE
54830: EQUAL
54831: IFTRUE 54847
54833: LD_INT 14
54835: DOUBLE
54836: EQUAL
54837: IFTRUE 54847
54839: LD_INT 10
54841: DOUBLE
54842: EQUAL
54843: IFTRUE 54847
54845: GO 54903
54847: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
54848: LD_ADDR_VAR 0 9
54852: PUSH
54853: LD_VAR 0 41
54857: PUSH
54858: LD_VAR 0 42
54862: PUSH
54863: LD_VAR 0 43
54867: PUSH
54868: LD_VAR 0 44
54872: PUSH
54873: LD_VAR 0 45
54877: PUSH
54878: LD_VAR 0 46
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: LIST
54887: LIST
54888: LIST
54889: LIST
54890: PUSH
54891: LD_VAR 0 4
54895: PUSH
54896: LD_INT 1
54898: PLUS
54899: ARRAY
54900: ST_TO_ADDR
54901: GO 55156
54903: LD_INT 36
54905: DOUBLE
54906: EQUAL
54907: IFTRUE 54911
54909: GO 54967
54911: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
54912: LD_ADDR_VAR 0 9
54916: PUSH
54917: LD_VAR 0 47
54921: PUSH
54922: LD_VAR 0 48
54926: PUSH
54927: LD_VAR 0 49
54931: PUSH
54932: LD_VAR 0 50
54936: PUSH
54937: LD_VAR 0 51
54941: PUSH
54942: LD_VAR 0 52
54946: PUSH
54947: EMPTY
54948: LIST
54949: LIST
54950: LIST
54951: LIST
54952: LIST
54953: LIST
54954: PUSH
54955: LD_VAR 0 4
54959: PUSH
54960: LD_INT 1
54962: PLUS
54963: ARRAY
54964: ST_TO_ADDR
54965: GO 55156
54967: LD_INT 4
54969: DOUBLE
54970: EQUAL
54971: IFTRUE 54993
54973: LD_INT 5
54975: DOUBLE
54976: EQUAL
54977: IFTRUE 54993
54979: LD_INT 34
54981: DOUBLE
54982: EQUAL
54983: IFTRUE 54993
54985: LD_INT 37
54987: DOUBLE
54988: EQUAL
54989: IFTRUE 54993
54991: GO 55049
54993: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
54994: LD_ADDR_VAR 0 9
54998: PUSH
54999: LD_VAR 0 53
55003: PUSH
55004: LD_VAR 0 54
55008: PUSH
55009: LD_VAR 0 55
55013: PUSH
55014: LD_VAR 0 56
55018: PUSH
55019: LD_VAR 0 57
55023: PUSH
55024: LD_VAR 0 58
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: LIST
55033: LIST
55034: LIST
55035: LIST
55036: PUSH
55037: LD_VAR 0 4
55041: PUSH
55042: LD_INT 1
55044: PLUS
55045: ARRAY
55046: ST_TO_ADDR
55047: GO 55156
55049: LD_INT 31
55051: DOUBLE
55052: EQUAL
55053: IFTRUE 55099
55055: LD_INT 32
55057: DOUBLE
55058: EQUAL
55059: IFTRUE 55099
55061: LD_INT 33
55063: DOUBLE
55064: EQUAL
55065: IFTRUE 55099
55067: LD_INT 27
55069: DOUBLE
55070: EQUAL
55071: IFTRUE 55099
55073: LD_INT 26
55075: DOUBLE
55076: EQUAL
55077: IFTRUE 55099
55079: LD_INT 28
55081: DOUBLE
55082: EQUAL
55083: IFTRUE 55099
55085: LD_INT 29
55087: DOUBLE
55088: EQUAL
55089: IFTRUE 55099
55091: LD_INT 30
55093: DOUBLE
55094: EQUAL
55095: IFTRUE 55099
55097: GO 55155
55099: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
55100: LD_ADDR_VAR 0 9
55104: PUSH
55105: LD_VAR 0 59
55109: PUSH
55110: LD_VAR 0 60
55114: PUSH
55115: LD_VAR 0 61
55119: PUSH
55120: LD_VAR 0 62
55124: PUSH
55125: LD_VAR 0 63
55129: PUSH
55130: LD_VAR 0 64
55134: PUSH
55135: EMPTY
55136: LIST
55137: LIST
55138: LIST
55139: LIST
55140: LIST
55141: LIST
55142: PUSH
55143: LD_VAR 0 4
55147: PUSH
55148: LD_INT 1
55150: PLUS
55151: ARRAY
55152: ST_TO_ADDR
55153: GO 55156
55155: POP
// temp_list2 = [ ] ;
55156: LD_ADDR_VAR 0 10
55160: PUSH
55161: EMPTY
55162: ST_TO_ADDR
// for i in temp_list do
55163: LD_ADDR_VAR 0 8
55167: PUSH
55168: LD_VAR 0 9
55172: PUSH
55173: FOR_IN
55174: IFFALSE 55226
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
55176: LD_ADDR_VAR 0 10
55180: PUSH
55181: LD_VAR 0 10
55185: PUSH
55186: LD_VAR 0 8
55190: PUSH
55191: LD_INT 1
55193: ARRAY
55194: PUSH
55195: LD_VAR 0 2
55199: PLUS
55200: PUSH
55201: LD_VAR 0 8
55205: PUSH
55206: LD_INT 2
55208: ARRAY
55209: PUSH
55210: LD_VAR 0 3
55214: PLUS
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: PUSH
55220: EMPTY
55221: LIST
55222: ADD
55223: ST_TO_ADDR
55224: GO 55173
55226: POP
55227: POP
// result = temp_list2 ;
55228: LD_ADDR_VAR 0 7
55232: PUSH
55233: LD_VAR 0 10
55237: ST_TO_ADDR
// end ;
55238: LD_VAR 0 7
55242: RET
// export function EnemyInRange ( unit , dist ) ; begin
55243: LD_INT 0
55245: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
55246: LD_ADDR_VAR 0 3
55250: PUSH
55251: LD_VAR 0 1
55255: PPUSH
55256: CALL_OW 255
55260: PPUSH
55261: LD_VAR 0 1
55265: PPUSH
55266: CALL_OW 250
55270: PPUSH
55271: LD_VAR 0 1
55275: PPUSH
55276: CALL_OW 251
55280: PPUSH
55281: LD_VAR 0 2
55285: PPUSH
55286: CALL 29014 0 4
55290: PUSH
55291: LD_INT 4
55293: ARRAY
55294: ST_TO_ADDR
// end ;
55295: LD_VAR 0 3
55299: RET
// export function PlayerSeeMe ( unit ) ; begin
55300: LD_INT 0
55302: PPUSH
// result := See ( your_side , unit ) ;
55303: LD_ADDR_VAR 0 2
55307: PUSH
55308: LD_OWVAR 2
55312: PPUSH
55313: LD_VAR 0 1
55317: PPUSH
55318: CALL_OW 292
55322: ST_TO_ADDR
// end ;
55323: LD_VAR 0 2
55327: RET
// export function ReverseDir ( unit ) ; begin
55328: LD_INT 0
55330: PPUSH
// if not unit then
55331: LD_VAR 0 1
55335: NOT
55336: IFFALSE 55340
// exit ;
55338: GO 55363
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
55340: LD_ADDR_VAR 0 2
55344: PUSH
55345: LD_VAR 0 1
55349: PPUSH
55350: CALL_OW 254
55354: PUSH
55355: LD_INT 3
55357: PLUS
55358: PUSH
55359: LD_INT 6
55361: MOD
55362: ST_TO_ADDR
// end ;
55363: LD_VAR 0 2
55367: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
55368: LD_INT 0
55370: PPUSH
55371: PPUSH
55372: PPUSH
55373: PPUSH
55374: PPUSH
// if not hexes then
55375: LD_VAR 0 2
55379: NOT
55380: IFFALSE 55384
// exit ;
55382: GO 55532
// dist := 9999 ;
55384: LD_ADDR_VAR 0 5
55388: PUSH
55389: LD_INT 9999
55391: ST_TO_ADDR
// for i = 1 to hexes do
55392: LD_ADDR_VAR 0 4
55396: PUSH
55397: DOUBLE
55398: LD_INT 1
55400: DEC
55401: ST_TO_ADDR
55402: LD_VAR 0 2
55406: PUSH
55407: FOR_TO
55408: IFFALSE 55520
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
55410: LD_VAR 0 1
55414: PPUSH
55415: LD_VAR 0 2
55419: PUSH
55420: LD_VAR 0 4
55424: ARRAY
55425: PUSH
55426: LD_INT 1
55428: ARRAY
55429: PPUSH
55430: LD_VAR 0 2
55434: PUSH
55435: LD_VAR 0 4
55439: ARRAY
55440: PUSH
55441: LD_INT 2
55443: ARRAY
55444: PPUSH
55445: CALL_OW 297
55449: PUSH
55450: LD_VAR 0 5
55454: LESS
55455: IFFALSE 55518
// begin hex := hexes [ i ] ;
55457: LD_ADDR_VAR 0 7
55461: PUSH
55462: LD_VAR 0 2
55466: PUSH
55467: LD_VAR 0 4
55471: ARRAY
55472: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55473: LD_ADDR_VAR 0 5
55477: PUSH
55478: LD_VAR 0 1
55482: PPUSH
55483: LD_VAR 0 2
55487: PUSH
55488: LD_VAR 0 4
55492: ARRAY
55493: PUSH
55494: LD_INT 1
55496: ARRAY
55497: PPUSH
55498: LD_VAR 0 2
55502: PUSH
55503: LD_VAR 0 4
55507: ARRAY
55508: PUSH
55509: LD_INT 2
55511: ARRAY
55512: PPUSH
55513: CALL_OW 297
55517: ST_TO_ADDR
// end ; end ;
55518: GO 55407
55520: POP
55521: POP
// result := hex ;
55522: LD_ADDR_VAR 0 3
55526: PUSH
55527: LD_VAR 0 7
55531: ST_TO_ADDR
// end ;
55532: LD_VAR 0 3
55536: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
55537: LD_INT 0
55539: PPUSH
55540: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
55541: LD_VAR 0 1
55545: NOT
55546: PUSH
55547: LD_VAR 0 1
55551: PUSH
55552: LD_INT 21
55554: PUSH
55555: LD_INT 2
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: PUSH
55562: LD_INT 23
55564: PUSH
55565: LD_INT 2
55567: PUSH
55568: EMPTY
55569: LIST
55570: LIST
55571: PUSH
55572: EMPTY
55573: LIST
55574: LIST
55575: PPUSH
55576: CALL_OW 69
55580: IN
55581: NOT
55582: OR
55583: IFFALSE 55587
// exit ;
55585: GO 55634
// for i = 1 to 3 do
55587: LD_ADDR_VAR 0 3
55591: PUSH
55592: DOUBLE
55593: LD_INT 1
55595: DEC
55596: ST_TO_ADDR
55597: LD_INT 3
55599: PUSH
55600: FOR_TO
55601: IFFALSE 55632
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
55603: LD_VAR 0 1
55607: PPUSH
55608: CALL_OW 250
55612: PPUSH
55613: LD_VAR 0 1
55617: PPUSH
55618: CALL_OW 251
55622: PPUSH
55623: LD_INT 1
55625: PPUSH
55626: CALL_OW 453
55630: GO 55600
55632: POP
55633: POP
// end ;
55634: LD_VAR 0 2
55638: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
55639: LD_INT 0
55641: PPUSH
55642: PPUSH
55643: PPUSH
55644: PPUSH
55645: PPUSH
55646: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
55647: LD_VAR 0 1
55651: NOT
55652: PUSH
55653: LD_VAR 0 2
55657: NOT
55658: OR
55659: PUSH
55660: LD_VAR 0 1
55664: PPUSH
55665: CALL_OW 314
55669: OR
55670: IFFALSE 55674
// exit ;
55672: GO 56115
// x := GetX ( enemy_unit ) ;
55674: LD_ADDR_VAR 0 7
55678: PUSH
55679: LD_VAR 0 2
55683: PPUSH
55684: CALL_OW 250
55688: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
55689: LD_ADDR_VAR 0 8
55693: PUSH
55694: LD_VAR 0 2
55698: PPUSH
55699: CALL_OW 251
55703: ST_TO_ADDR
// if not x or not y then
55704: LD_VAR 0 7
55708: NOT
55709: PUSH
55710: LD_VAR 0 8
55714: NOT
55715: OR
55716: IFFALSE 55720
// exit ;
55718: GO 56115
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
55720: LD_ADDR_VAR 0 6
55724: PUSH
55725: LD_VAR 0 7
55729: PPUSH
55730: LD_INT 0
55732: PPUSH
55733: LD_INT 4
55735: PPUSH
55736: CALL_OW 272
55740: PUSH
55741: LD_VAR 0 8
55745: PPUSH
55746: LD_INT 0
55748: PPUSH
55749: LD_INT 4
55751: PPUSH
55752: CALL_OW 273
55756: PUSH
55757: EMPTY
55758: LIST
55759: LIST
55760: PUSH
55761: LD_VAR 0 7
55765: PPUSH
55766: LD_INT 1
55768: PPUSH
55769: LD_INT 4
55771: PPUSH
55772: CALL_OW 272
55776: PUSH
55777: LD_VAR 0 8
55781: PPUSH
55782: LD_INT 1
55784: PPUSH
55785: LD_INT 4
55787: PPUSH
55788: CALL_OW 273
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: LD_VAR 0 7
55801: PPUSH
55802: LD_INT 2
55804: PPUSH
55805: LD_INT 4
55807: PPUSH
55808: CALL_OW 272
55812: PUSH
55813: LD_VAR 0 8
55817: PPUSH
55818: LD_INT 2
55820: PPUSH
55821: LD_INT 4
55823: PPUSH
55824: CALL_OW 273
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: PUSH
55833: LD_VAR 0 7
55837: PPUSH
55838: LD_INT 3
55840: PPUSH
55841: LD_INT 4
55843: PPUSH
55844: CALL_OW 272
55848: PUSH
55849: LD_VAR 0 8
55853: PPUSH
55854: LD_INT 3
55856: PPUSH
55857: LD_INT 4
55859: PPUSH
55860: CALL_OW 273
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PUSH
55869: LD_VAR 0 7
55873: PPUSH
55874: LD_INT 4
55876: PPUSH
55877: LD_INT 4
55879: PPUSH
55880: CALL_OW 272
55884: PUSH
55885: LD_VAR 0 8
55889: PPUSH
55890: LD_INT 4
55892: PPUSH
55893: LD_INT 4
55895: PPUSH
55896: CALL_OW 273
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: PUSH
55905: LD_VAR 0 7
55909: PPUSH
55910: LD_INT 5
55912: PPUSH
55913: LD_INT 4
55915: PPUSH
55916: CALL_OW 272
55920: PUSH
55921: LD_VAR 0 8
55925: PPUSH
55926: LD_INT 5
55928: PPUSH
55929: LD_INT 4
55931: PPUSH
55932: CALL_OW 273
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: LIST
55945: LIST
55946: LIST
55947: LIST
55948: ST_TO_ADDR
// for i = tmp downto 1 do
55949: LD_ADDR_VAR 0 4
55953: PUSH
55954: DOUBLE
55955: LD_VAR 0 6
55959: INC
55960: ST_TO_ADDR
55961: LD_INT 1
55963: PUSH
55964: FOR_DOWNTO
55965: IFFALSE 56066
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
55967: LD_VAR 0 6
55971: PUSH
55972: LD_VAR 0 4
55976: ARRAY
55977: PUSH
55978: LD_INT 1
55980: ARRAY
55981: PPUSH
55982: LD_VAR 0 6
55986: PUSH
55987: LD_VAR 0 4
55991: ARRAY
55992: PUSH
55993: LD_INT 2
55995: ARRAY
55996: PPUSH
55997: CALL_OW 488
56001: NOT
56002: PUSH
56003: LD_VAR 0 6
56007: PUSH
56008: LD_VAR 0 4
56012: ARRAY
56013: PUSH
56014: LD_INT 1
56016: ARRAY
56017: PPUSH
56018: LD_VAR 0 6
56022: PUSH
56023: LD_VAR 0 4
56027: ARRAY
56028: PUSH
56029: LD_INT 2
56031: ARRAY
56032: PPUSH
56033: CALL_OW 428
56037: PUSH
56038: LD_INT 0
56040: NONEQUAL
56041: OR
56042: IFFALSE 56064
// tmp := Delete ( tmp , i ) ;
56044: LD_ADDR_VAR 0 6
56048: PUSH
56049: LD_VAR 0 6
56053: PPUSH
56054: LD_VAR 0 4
56058: PPUSH
56059: CALL_OW 3
56063: ST_TO_ADDR
56064: GO 55964
56066: POP
56067: POP
// j := GetClosestHex ( unit , tmp ) ;
56068: LD_ADDR_VAR 0 5
56072: PUSH
56073: LD_VAR 0 1
56077: PPUSH
56078: LD_VAR 0 6
56082: PPUSH
56083: CALL 55368 0 2
56087: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
56088: LD_VAR 0 1
56092: PPUSH
56093: LD_VAR 0 5
56097: PUSH
56098: LD_INT 1
56100: ARRAY
56101: PPUSH
56102: LD_VAR 0 5
56106: PUSH
56107: LD_INT 2
56109: ARRAY
56110: PPUSH
56111: CALL_OW 111
// end ;
56115: LD_VAR 0 3
56119: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
56120: LD_INT 0
56122: PPUSH
56123: PPUSH
56124: PPUSH
// uc_side = 0 ;
56125: LD_ADDR_OWVAR 20
56129: PUSH
56130: LD_INT 0
56132: ST_TO_ADDR
// uc_nation = 0 ;
56133: LD_ADDR_OWVAR 21
56137: PUSH
56138: LD_INT 0
56140: ST_TO_ADDR
// InitHc_All ( ) ;
56141: CALL_OW 584
// InitVc ;
56145: CALL_OW 20
// if mastodonts then
56149: LD_VAR 0 6
56153: IFFALSE 56220
// for i = 1 to mastodonts do
56155: LD_ADDR_VAR 0 11
56159: PUSH
56160: DOUBLE
56161: LD_INT 1
56163: DEC
56164: ST_TO_ADDR
56165: LD_VAR 0 6
56169: PUSH
56170: FOR_TO
56171: IFFALSE 56218
// begin vc_chassis := 31 ;
56173: LD_ADDR_OWVAR 37
56177: PUSH
56178: LD_INT 31
56180: ST_TO_ADDR
// vc_control := control_rider ;
56181: LD_ADDR_OWVAR 38
56185: PUSH
56186: LD_INT 4
56188: ST_TO_ADDR
// animal := CreateVehicle ;
56189: LD_ADDR_VAR 0 12
56193: PUSH
56194: CALL_OW 45
56198: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56199: LD_VAR 0 12
56203: PPUSH
56204: LD_VAR 0 8
56208: PPUSH
56209: LD_INT 0
56211: PPUSH
56212: CALL 58408 0 3
// end ;
56216: GO 56170
56218: POP
56219: POP
// if horses then
56220: LD_VAR 0 5
56224: IFFALSE 56291
// for i = 1 to horses do
56226: LD_ADDR_VAR 0 11
56230: PUSH
56231: DOUBLE
56232: LD_INT 1
56234: DEC
56235: ST_TO_ADDR
56236: LD_VAR 0 5
56240: PUSH
56241: FOR_TO
56242: IFFALSE 56289
// begin hc_class := 21 ;
56244: LD_ADDR_OWVAR 28
56248: PUSH
56249: LD_INT 21
56251: ST_TO_ADDR
// hc_gallery :=  ;
56252: LD_ADDR_OWVAR 33
56256: PUSH
56257: LD_STRING 
56259: ST_TO_ADDR
// animal := CreateHuman ;
56260: LD_ADDR_VAR 0 12
56264: PUSH
56265: CALL_OW 44
56269: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56270: LD_VAR 0 12
56274: PPUSH
56275: LD_VAR 0 8
56279: PPUSH
56280: LD_INT 0
56282: PPUSH
56283: CALL 58408 0 3
// end ;
56287: GO 56241
56289: POP
56290: POP
// if birds then
56291: LD_VAR 0 1
56295: IFFALSE 56362
// for i = 1 to birds do
56297: LD_ADDR_VAR 0 11
56301: PUSH
56302: DOUBLE
56303: LD_INT 1
56305: DEC
56306: ST_TO_ADDR
56307: LD_VAR 0 1
56311: PUSH
56312: FOR_TO
56313: IFFALSE 56360
// begin hc_class = 18 ;
56315: LD_ADDR_OWVAR 28
56319: PUSH
56320: LD_INT 18
56322: ST_TO_ADDR
// hc_gallery =  ;
56323: LD_ADDR_OWVAR 33
56327: PUSH
56328: LD_STRING 
56330: ST_TO_ADDR
// animal := CreateHuman ;
56331: LD_ADDR_VAR 0 12
56335: PUSH
56336: CALL_OW 44
56340: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56341: LD_VAR 0 12
56345: PPUSH
56346: LD_VAR 0 8
56350: PPUSH
56351: LD_INT 0
56353: PPUSH
56354: CALL 58408 0 3
// end ;
56358: GO 56312
56360: POP
56361: POP
// if tigers then
56362: LD_VAR 0 2
56366: IFFALSE 56450
// for i = 1 to tigers do
56368: LD_ADDR_VAR 0 11
56372: PUSH
56373: DOUBLE
56374: LD_INT 1
56376: DEC
56377: ST_TO_ADDR
56378: LD_VAR 0 2
56382: PUSH
56383: FOR_TO
56384: IFFALSE 56448
// begin hc_class = class_tiger ;
56386: LD_ADDR_OWVAR 28
56390: PUSH
56391: LD_INT 14
56393: ST_TO_ADDR
// hc_gallery =  ;
56394: LD_ADDR_OWVAR 33
56398: PUSH
56399: LD_STRING 
56401: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
56402: LD_ADDR_OWVAR 35
56406: PUSH
56407: LD_INT 7
56409: NEG
56410: PPUSH
56411: LD_INT 7
56413: PPUSH
56414: CALL_OW 12
56418: ST_TO_ADDR
// animal := CreateHuman ;
56419: LD_ADDR_VAR 0 12
56423: PUSH
56424: CALL_OW 44
56428: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56429: LD_VAR 0 12
56433: PPUSH
56434: LD_VAR 0 8
56438: PPUSH
56439: LD_INT 0
56441: PPUSH
56442: CALL 58408 0 3
// end ;
56446: GO 56383
56448: POP
56449: POP
// if apemans then
56450: LD_VAR 0 3
56454: IFFALSE 56577
// for i = 1 to apemans do
56456: LD_ADDR_VAR 0 11
56460: PUSH
56461: DOUBLE
56462: LD_INT 1
56464: DEC
56465: ST_TO_ADDR
56466: LD_VAR 0 3
56470: PUSH
56471: FOR_TO
56472: IFFALSE 56575
// begin hc_class = class_apeman ;
56474: LD_ADDR_OWVAR 28
56478: PUSH
56479: LD_INT 12
56481: ST_TO_ADDR
// hc_gallery =  ;
56482: LD_ADDR_OWVAR 33
56486: PUSH
56487: LD_STRING 
56489: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
56490: LD_ADDR_OWVAR 35
56494: PUSH
56495: LD_INT 5
56497: NEG
56498: PPUSH
56499: LD_INT 5
56501: PPUSH
56502: CALL_OW 12
56506: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
56507: LD_ADDR_OWVAR 31
56511: PUSH
56512: LD_INT 1
56514: PPUSH
56515: LD_INT 3
56517: PPUSH
56518: CALL_OW 12
56522: PUSH
56523: LD_INT 1
56525: PPUSH
56526: LD_INT 3
56528: PPUSH
56529: CALL_OW 12
56533: PUSH
56534: LD_INT 0
56536: PUSH
56537: LD_INT 0
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: LIST
56544: LIST
56545: ST_TO_ADDR
// animal := CreateHuman ;
56546: LD_ADDR_VAR 0 12
56550: PUSH
56551: CALL_OW 44
56555: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56556: LD_VAR 0 12
56560: PPUSH
56561: LD_VAR 0 8
56565: PPUSH
56566: LD_INT 0
56568: PPUSH
56569: CALL 58408 0 3
// end ;
56573: GO 56471
56575: POP
56576: POP
// if enchidnas then
56577: LD_VAR 0 4
56581: IFFALSE 56648
// for i = 1 to enchidnas do
56583: LD_ADDR_VAR 0 11
56587: PUSH
56588: DOUBLE
56589: LD_INT 1
56591: DEC
56592: ST_TO_ADDR
56593: LD_VAR 0 4
56597: PUSH
56598: FOR_TO
56599: IFFALSE 56646
// begin hc_class = 13 ;
56601: LD_ADDR_OWVAR 28
56605: PUSH
56606: LD_INT 13
56608: ST_TO_ADDR
// hc_gallery =  ;
56609: LD_ADDR_OWVAR 33
56613: PUSH
56614: LD_STRING 
56616: ST_TO_ADDR
// animal := CreateHuman ;
56617: LD_ADDR_VAR 0 12
56621: PUSH
56622: CALL_OW 44
56626: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56627: LD_VAR 0 12
56631: PPUSH
56632: LD_VAR 0 8
56636: PPUSH
56637: LD_INT 0
56639: PPUSH
56640: CALL 58408 0 3
// end ;
56644: GO 56598
56646: POP
56647: POP
// if fishes then
56648: LD_VAR 0 7
56652: IFFALSE 56719
// for i = 1 to fishes do
56654: LD_ADDR_VAR 0 11
56658: PUSH
56659: DOUBLE
56660: LD_INT 1
56662: DEC
56663: ST_TO_ADDR
56664: LD_VAR 0 7
56668: PUSH
56669: FOR_TO
56670: IFFALSE 56717
// begin hc_class = 20 ;
56672: LD_ADDR_OWVAR 28
56676: PUSH
56677: LD_INT 20
56679: ST_TO_ADDR
// hc_gallery =  ;
56680: LD_ADDR_OWVAR 33
56684: PUSH
56685: LD_STRING 
56687: ST_TO_ADDR
// animal := CreateHuman ;
56688: LD_ADDR_VAR 0 12
56692: PUSH
56693: CALL_OW 44
56697: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
56698: LD_VAR 0 12
56702: PPUSH
56703: LD_VAR 0 9
56707: PPUSH
56708: LD_INT 0
56710: PPUSH
56711: CALL 58408 0 3
// end ;
56715: GO 56669
56717: POP
56718: POP
// end ;
56719: LD_VAR 0 10
56723: RET
// export function WantHeal ( sci , unit ) ; begin
56724: LD_INT 0
56726: PPUSH
// if GetTaskList ( sci ) > 0 then
56727: LD_VAR 0 1
56731: PPUSH
56732: CALL_OW 437
56736: PUSH
56737: LD_INT 0
56739: GREATER
56740: IFFALSE 56810
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
56742: LD_VAR 0 1
56746: PPUSH
56747: CALL_OW 437
56751: PUSH
56752: LD_INT 1
56754: ARRAY
56755: PUSH
56756: LD_INT 1
56758: ARRAY
56759: PUSH
56760: LD_STRING l
56762: EQUAL
56763: PUSH
56764: LD_VAR 0 1
56768: PPUSH
56769: CALL_OW 437
56773: PUSH
56774: LD_INT 1
56776: ARRAY
56777: PUSH
56778: LD_INT 4
56780: ARRAY
56781: PUSH
56782: LD_VAR 0 2
56786: EQUAL
56787: AND
56788: IFFALSE 56800
// result := true else
56790: LD_ADDR_VAR 0 3
56794: PUSH
56795: LD_INT 1
56797: ST_TO_ADDR
56798: GO 56808
// result := false ;
56800: LD_ADDR_VAR 0 3
56804: PUSH
56805: LD_INT 0
56807: ST_TO_ADDR
// end else
56808: GO 56818
// result := false ;
56810: LD_ADDR_VAR 0 3
56814: PUSH
56815: LD_INT 0
56817: ST_TO_ADDR
// end ;
56818: LD_VAR 0 3
56822: RET
// export function HealTarget ( sci ) ; begin
56823: LD_INT 0
56825: PPUSH
// if not sci then
56826: LD_VAR 0 1
56830: NOT
56831: IFFALSE 56835
// exit ;
56833: GO 56900
// result := 0 ;
56835: LD_ADDR_VAR 0 2
56839: PUSH
56840: LD_INT 0
56842: ST_TO_ADDR
// if GetTaskList ( sci ) then
56843: LD_VAR 0 1
56847: PPUSH
56848: CALL_OW 437
56852: IFFALSE 56900
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
56854: LD_VAR 0 1
56858: PPUSH
56859: CALL_OW 437
56863: PUSH
56864: LD_INT 1
56866: ARRAY
56867: PUSH
56868: LD_INT 1
56870: ARRAY
56871: PUSH
56872: LD_STRING l
56874: EQUAL
56875: IFFALSE 56900
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
56877: LD_ADDR_VAR 0 2
56881: PUSH
56882: LD_VAR 0 1
56886: PPUSH
56887: CALL_OW 437
56891: PUSH
56892: LD_INT 1
56894: ARRAY
56895: PUSH
56896: LD_INT 4
56898: ARRAY
56899: ST_TO_ADDR
// end ;
56900: LD_VAR 0 2
56904: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
56905: LD_INT 0
56907: PPUSH
56908: PPUSH
56909: PPUSH
56910: PPUSH
// if not base_units then
56911: LD_VAR 0 1
56915: NOT
56916: IFFALSE 56920
// exit ;
56918: GO 57007
// result := false ;
56920: LD_ADDR_VAR 0 2
56924: PUSH
56925: LD_INT 0
56927: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
56928: LD_ADDR_VAR 0 5
56932: PUSH
56933: LD_VAR 0 1
56937: PPUSH
56938: LD_INT 21
56940: PUSH
56941: LD_INT 3
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: PPUSH
56948: CALL_OW 72
56952: ST_TO_ADDR
// if not tmp then
56953: LD_VAR 0 5
56957: NOT
56958: IFFALSE 56962
// exit ;
56960: GO 57007
// for i in tmp do
56962: LD_ADDR_VAR 0 3
56966: PUSH
56967: LD_VAR 0 5
56971: PUSH
56972: FOR_IN
56973: IFFALSE 57005
// begin result := EnemyInRange ( i , 22 ) ;
56975: LD_ADDR_VAR 0 2
56979: PUSH
56980: LD_VAR 0 3
56984: PPUSH
56985: LD_INT 22
56987: PPUSH
56988: CALL 55243 0 2
56992: ST_TO_ADDR
// if result then
56993: LD_VAR 0 2
56997: IFFALSE 57003
// exit ;
56999: POP
57000: POP
57001: GO 57007
// end ;
57003: GO 56972
57005: POP
57006: POP
// end ;
57007: LD_VAR 0 2
57011: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
57012: LD_INT 0
57014: PPUSH
57015: PPUSH
// if not units then
57016: LD_VAR 0 1
57020: NOT
57021: IFFALSE 57025
// exit ;
57023: GO 57095
// result := [ ] ;
57025: LD_ADDR_VAR 0 3
57029: PUSH
57030: EMPTY
57031: ST_TO_ADDR
// for i in units do
57032: LD_ADDR_VAR 0 4
57036: PUSH
57037: LD_VAR 0 1
57041: PUSH
57042: FOR_IN
57043: IFFALSE 57093
// if GetTag ( i ) = tag then
57045: LD_VAR 0 4
57049: PPUSH
57050: CALL_OW 110
57054: PUSH
57055: LD_VAR 0 2
57059: EQUAL
57060: IFFALSE 57091
// result := Insert ( result , result + 1 , i ) ;
57062: LD_ADDR_VAR 0 3
57066: PUSH
57067: LD_VAR 0 3
57071: PPUSH
57072: LD_VAR 0 3
57076: PUSH
57077: LD_INT 1
57079: PLUS
57080: PPUSH
57081: LD_VAR 0 4
57085: PPUSH
57086: CALL_OW 2
57090: ST_TO_ADDR
57091: GO 57042
57093: POP
57094: POP
// end ;
57095: LD_VAR 0 3
57099: RET
// export function IsDriver ( un ) ; begin
57100: LD_INT 0
57102: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
57103: LD_ADDR_VAR 0 2
57107: PUSH
57108: LD_VAR 0 1
57112: PUSH
57113: LD_INT 55
57115: PUSH
57116: EMPTY
57117: LIST
57118: PPUSH
57119: CALL_OW 69
57123: IN
57124: ST_TO_ADDR
// end ;
57125: LD_VAR 0 2
57129: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
57130: LD_INT 0
57132: PPUSH
57133: PPUSH
// list := [ ] ;
57134: LD_ADDR_VAR 0 5
57138: PUSH
57139: EMPTY
57140: ST_TO_ADDR
// case d of 0 :
57141: LD_VAR 0 3
57145: PUSH
57146: LD_INT 0
57148: DOUBLE
57149: EQUAL
57150: IFTRUE 57154
57152: GO 57287
57154: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
57155: LD_ADDR_VAR 0 5
57159: PUSH
57160: LD_VAR 0 1
57164: PUSH
57165: LD_INT 4
57167: MINUS
57168: PUSH
57169: LD_VAR 0 2
57173: PUSH
57174: LD_INT 4
57176: MINUS
57177: PUSH
57178: LD_INT 2
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: LIST
57185: PUSH
57186: LD_VAR 0 1
57190: PUSH
57191: LD_INT 3
57193: MINUS
57194: PUSH
57195: LD_VAR 0 2
57199: PUSH
57200: LD_INT 1
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: LIST
57207: PUSH
57208: LD_VAR 0 1
57212: PUSH
57213: LD_INT 4
57215: PLUS
57216: PUSH
57217: LD_VAR 0 2
57221: PUSH
57222: LD_INT 4
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: LIST
57229: PUSH
57230: LD_VAR 0 1
57234: PUSH
57235: LD_INT 3
57237: PLUS
57238: PUSH
57239: LD_VAR 0 2
57243: PUSH
57244: LD_INT 3
57246: PLUS
57247: PUSH
57248: LD_INT 5
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: LIST
57255: PUSH
57256: LD_VAR 0 1
57260: PUSH
57261: LD_VAR 0 2
57265: PUSH
57266: LD_INT 4
57268: PLUS
57269: PUSH
57270: LD_INT 0
57272: PUSH
57273: EMPTY
57274: LIST
57275: LIST
57276: LIST
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: LIST
57282: LIST
57283: LIST
57284: ST_TO_ADDR
// end ; 1 :
57285: GO 57985
57287: LD_INT 1
57289: DOUBLE
57290: EQUAL
57291: IFTRUE 57295
57293: GO 57428
57295: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
57296: LD_ADDR_VAR 0 5
57300: PUSH
57301: LD_VAR 0 1
57305: PUSH
57306: LD_VAR 0 2
57310: PUSH
57311: LD_INT 4
57313: MINUS
57314: PUSH
57315: LD_INT 3
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: LIST
57322: PUSH
57323: LD_VAR 0 1
57327: PUSH
57328: LD_INT 3
57330: MINUS
57331: PUSH
57332: LD_VAR 0 2
57336: PUSH
57337: LD_INT 3
57339: MINUS
57340: PUSH
57341: LD_INT 2
57343: PUSH
57344: EMPTY
57345: LIST
57346: LIST
57347: LIST
57348: PUSH
57349: LD_VAR 0 1
57353: PUSH
57354: LD_INT 4
57356: MINUS
57357: PUSH
57358: LD_VAR 0 2
57362: PUSH
57363: LD_INT 1
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: LIST
57370: PUSH
57371: LD_VAR 0 1
57375: PUSH
57376: LD_VAR 0 2
57380: PUSH
57381: LD_INT 3
57383: PLUS
57384: PUSH
57385: LD_INT 0
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: LIST
57392: PUSH
57393: LD_VAR 0 1
57397: PUSH
57398: LD_INT 4
57400: PLUS
57401: PUSH
57402: LD_VAR 0 2
57406: PUSH
57407: LD_INT 4
57409: PLUS
57410: PUSH
57411: LD_INT 5
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: LIST
57418: PUSH
57419: EMPTY
57420: LIST
57421: LIST
57422: LIST
57423: LIST
57424: LIST
57425: ST_TO_ADDR
// end ; 2 :
57426: GO 57985
57428: LD_INT 2
57430: DOUBLE
57431: EQUAL
57432: IFTRUE 57436
57434: GO 57565
57436: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
57437: LD_ADDR_VAR 0 5
57441: PUSH
57442: LD_VAR 0 1
57446: PUSH
57447: LD_VAR 0 2
57451: PUSH
57452: LD_INT 3
57454: MINUS
57455: PUSH
57456: LD_INT 3
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: LIST
57463: PUSH
57464: LD_VAR 0 1
57468: PUSH
57469: LD_INT 4
57471: PLUS
57472: PUSH
57473: LD_VAR 0 2
57477: PUSH
57478: LD_INT 4
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: LIST
57485: PUSH
57486: LD_VAR 0 1
57490: PUSH
57491: LD_VAR 0 2
57495: PUSH
57496: LD_INT 4
57498: PLUS
57499: PUSH
57500: LD_INT 0
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: LIST
57507: PUSH
57508: LD_VAR 0 1
57512: PUSH
57513: LD_INT 3
57515: MINUS
57516: PUSH
57517: LD_VAR 0 2
57521: PUSH
57522: LD_INT 1
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: LIST
57529: PUSH
57530: LD_VAR 0 1
57534: PUSH
57535: LD_INT 4
57537: MINUS
57538: PUSH
57539: LD_VAR 0 2
57543: PUSH
57544: LD_INT 4
57546: MINUS
57547: PUSH
57548: LD_INT 2
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: LIST
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: LIST
57560: LIST
57561: LIST
57562: ST_TO_ADDR
// end ; 3 :
57563: GO 57985
57565: LD_INT 3
57567: DOUBLE
57568: EQUAL
57569: IFTRUE 57573
57571: GO 57706
57573: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
57574: LD_ADDR_VAR 0 5
57578: PUSH
57579: LD_VAR 0 1
57583: PUSH
57584: LD_INT 3
57586: PLUS
57587: PUSH
57588: LD_VAR 0 2
57592: PUSH
57593: LD_INT 4
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: LIST
57600: PUSH
57601: LD_VAR 0 1
57605: PUSH
57606: LD_INT 4
57608: PLUS
57609: PUSH
57610: LD_VAR 0 2
57614: PUSH
57615: LD_INT 4
57617: PLUS
57618: PUSH
57619: LD_INT 5
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: LIST
57626: PUSH
57627: LD_VAR 0 1
57631: PUSH
57632: LD_INT 4
57634: MINUS
57635: PUSH
57636: LD_VAR 0 2
57640: PUSH
57641: LD_INT 1
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: LIST
57648: PUSH
57649: LD_VAR 0 1
57653: PUSH
57654: LD_VAR 0 2
57658: PUSH
57659: LD_INT 4
57661: MINUS
57662: PUSH
57663: LD_INT 3
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: LIST
57670: PUSH
57671: LD_VAR 0 1
57675: PUSH
57676: LD_INT 3
57678: MINUS
57679: PUSH
57680: LD_VAR 0 2
57684: PUSH
57685: LD_INT 3
57687: MINUS
57688: PUSH
57689: LD_INT 2
57691: PUSH
57692: EMPTY
57693: LIST
57694: LIST
57695: LIST
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: LIST
57701: LIST
57702: LIST
57703: ST_TO_ADDR
// end ; 4 :
57704: GO 57985
57706: LD_INT 4
57708: DOUBLE
57709: EQUAL
57710: IFTRUE 57714
57712: GO 57847
57714: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
57715: LD_ADDR_VAR 0 5
57719: PUSH
57720: LD_VAR 0 1
57724: PUSH
57725: LD_VAR 0 2
57729: PUSH
57730: LD_INT 4
57732: PLUS
57733: PUSH
57734: LD_INT 0
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: LIST
57741: PUSH
57742: LD_VAR 0 1
57746: PUSH
57747: LD_INT 3
57749: PLUS
57750: PUSH
57751: LD_VAR 0 2
57755: PUSH
57756: LD_INT 3
57758: PLUS
57759: PUSH
57760: LD_INT 5
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: LIST
57767: PUSH
57768: LD_VAR 0 1
57772: PUSH
57773: LD_INT 4
57775: PLUS
57776: PUSH
57777: LD_VAR 0 2
57781: PUSH
57782: LD_INT 4
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: LIST
57789: PUSH
57790: LD_VAR 0 1
57794: PUSH
57795: LD_VAR 0 2
57799: PUSH
57800: LD_INT 3
57802: MINUS
57803: PUSH
57804: LD_INT 3
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: LIST
57811: PUSH
57812: LD_VAR 0 1
57816: PUSH
57817: LD_INT 4
57819: MINUS
57820: PUSH
57821: LD_VAR 0 2
57825: PUSH
57826: LD_INT 4
57828: MINUS
57829: PUSH
57830: LD_INT 2
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: LIST
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: LIST
57842: LIST
57843: LIST
57844: ST_TO_ADDR
// end ; 5 :
57845: GO 57985
57847: LD_INT 5
57849: DOUBLE
57850: EQUAL
57851: IFTRUE 57855
57853: GO 57984
57855: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
57856: LD_ADDR_VAR 0 5
57860: PUSH
57861: LD_VAR 0 1
57865: PUSH
57866: LD_INT 4
57868: MINUS
57869: PUSH
57870: LD_VAR 0 2
57874: PUSH
57875: LD_INT 1
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: LIST
57882: PUSH
57883: LD_VAR 0 1
57887: PUSH
57888: LD_VAR 0 2
57892: PUSH
57893: LD_INT 4
57895: MINUS
57896: PUSH
57897: LD_INT 3
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: LIST
57904: PUSH
57905: LD_VAR 0 1
57909: PUSH
57910: LD_INT 4
57912: PLUS
57913: PUSH
57914: LD_VAR 0 2
57918: PUSH
57919: LD_INT 4
57921: PLUS
57922: PUSH
57923: LD_INT 5
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: LIST
57930: PUSH
57931: LD_VAR 0 1
57935: PUSH
57936: LD_INT 3
57938: PLUS
57939: PUSH
57940: LD_VAR 0 2
57944: PUSH
57945: LD_INT 4
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: LIST
57952: PUSH
57953: LD_VAR 0 1
57957: PUSH
57958: LD_VAR 0 2
57962: PUSH
57963: LD_INT 3
57965: PLUS
57966: PUSH
57967: LD_INT 0
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: LIST
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: LIST
57979: LIST
57980: LIST
57981: ST_TO_ADDR
// end ; end ;
57982: GO 57985
57984: POP
// result := list ;
57985: LD_ADDR_VAR 0 4
57989: PUSH
57990: LD_VAR 0 5
57994: ST_TO_ADDR
// end ;
57995: LD_VAR 0 4
57999: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
58000: LD_INT 0
58002: PPUSH
58003: PPUSH
58004: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
58005: LD_VAR 0 1
58009: NOT
58010: PUSH
58011: LD_VAR 0 2
58015: PUSH
58016: LD_INT 1
58018: PUSH
58019: LD_INT 2
58021: PUSH
58022: LD_INT 3
58024: PUSH
58025: LD_INT 4
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: LIST
58032: LIST
58033: IN
58034: NOT
58035: OR
58036: IFFALSE 58040
// exit ;
58038: GO 58132
// tmp := [ ] ;
58040: LD_ADDR_VAR 0 5
58044: PUSH
58045: EMPTY
58046: ST_TO_ADDR
// for i in units do
58047: LD_ADDR_VAR 0 4
58051: PUSH
58052: LD_VAR 0 1
58056: PUSH
58057: FOR_IN
58058: IFFALSE 58101
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
58060: LD_ADDR_VAR 0 5
58064: PUSH
58065: LD_VAR 0 5
58069: PPUSH
58070: LD_VAR 0 5
58074: PUSH
58075: LD_INT 1
58077: PLUS
58078: PPUSH
58079: LD_VAR 0 4
58083: PPUSH
58084: LD_VAR 0 2
58088: PPUSH
58089: CALL_OW 259
58093: PPUSH
58094: CALL_OW 2
58098: ST_TO_ADDR
58099: GO 58057
58101: POP
58102: POP
// if not tmp then
58103: LD_VAR 0 5
58107: NOT
58108: IFFALSE 58112
// exit ;
58110: GO 58132
// result := SortListByListDesc ( units , tmp ) ;
58112: LD_ADDR_VAR 0 3
58116: PUSH
58117: LD_VAR 0 1
58121: PPUSH
58122: LD_VAR 0 5
58126: PPUSH
58127: CALL_OW 77
58131: ST_TO_ADDR
// end ;
58132: LD_VAR 0 3
58136: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
58137: LD_INT 0
58139: PPUSH
58140: PPUSH
58141: PPUSH
// result := false ;
58142: LD_ADDR_VAR 0 3
58146: PUSH
58147: LD_INT 0
58149: ST_TO_ADDR
// x := GetX ( building ) ;
58150: LD_ADDR_VAR 0 4
58154: PUSH
58155: LD_VAR 0 2
58159: PPUSH
58160: CALL_OW 250
58164: ST_TO_ADDR
// y := GetY ( building ) ;
58165: LD_ADDR_VAR 0 5
58169: PUSH
58170: LD_VAR 0 2
58174: PPUSH
58175: CALL_OW 251
58179: ST_TO_ADDR
// if not building or not x or not y then
58180: LD_VAR 0 2
58184: NOT
58185: PUSH
58186: LD_VAR 0 4
58190: NOT
58191: OR
58192: PUSH
58193: LD_VAR 0 5
58197: NOT
58198: OR
58199: IFFALSE 58203
// exit ;
58201: GO 58295
// if GetTaskList ( unit ) then
58203: LD_VAR 0 1
58207: PPUSH
58208: CALL_OW 437
58212: IFFALSE 58295
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
58214: LD_STRING e
58216: PUSH
58217: LD_VAR 0 1
58221: PPUSH
58222: CALL_OW 437
58226: PUSH
58227: LD_INT 1
58229: ARRAY
58230: PUSH
58231: LD_INT 1
58233: ARRAY
58234: EQUAL
58235: PUSH
58236: LD_VAR 0 4
58240: PUSH
58241: LD_VAR 0 1
58245: PPUSH
58246: CALL_OW 437
58250: PUSH
58251: LD_INT 1
58253: ARRAY
58254: PUSH
58255: LD_INT 2
58257: ARRAY
58258: EQUAL
58259: AND
58260: PUSH
58261: LD_VAR 0 5
58265: PUSH
58266: LD_VAR 0 1
58270: PPUSH
58271: CALL_OW 437
58275: PUSH
58276: LD_INT 1
58278: ARRAY
58279: PUSH
58280: LD_INT 3
58282: ARRAY
58283: EQUAL
58284: AND
58285: IFFALSE 58295
// result := true end ;
58287: LD_ADDR_VAR 0 3
58291: PUSH
58292: LD_INT 1
58294: ST_TO_ADDR
// end ;
58295: LD_VAR 0 3
58299: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
58300: LD_INT 0
58302: PPUSH
// result := false ;
58303: LD_ADDR_VAR 0 4
58307: PUSH
58308: LD_INT 0
58310: ST_TO_ADDR
// if GetTaskList ( unit ) then
58311: LD_VAR 0 1
58315: PPUSH
58316: CALL_OW 437
58320: IFFALSE 58403
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
58322: LD_STRING M
58324: PUSH
58325: LD_VAR 0 1
58329: PPUSH
58330: CALL_OW 437
58334: PUSH
58335: LD_INT 1
58337: ARRAY
58338: PUSH
58339: LD_INT 1
58341: ARRAY
58342: EQUAL
58343: PUSH
58344: LD_VAR 0 2
58348: PUSH
58349: LD_VAR 0 1
58353: PPUSH
58354: CALL_OW 437
58358: PUSH
58359: LD_INT 1
58361: ARRAY
58362: PUSH
58363: LD_INT 2
58365: ARRAY
58366: EQUAL
58367: AND
58368: PUSH
58369: LD_VAR 0 3
58373: PUSH
58374: LD_VAR 0 1
58378: PPUSH
58379: CALL_OW 437
58383: PUSH
58384: LD_INT 1
58386: ARRAY
58387: PUSH
58388: LD_INT 3
58390: ARRAY
58391: EQUAL
58392: AND
58393: IFFALSE 58403
// result := true ;
58395: LD_ADDR_VAR 0 4
58399: PUSH
58400: LD_INT 1
58402: ST_TO_ADDR
// end ; end ;
58403: LD_VAR 0 4
58407: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
58408: LD_INT 0
58410: PPUSH
58411: PPUSH
58412: PPUSH
58413: PPUSH
// if not unit or not area then
58414: LD_VAR 0 1
58418: NOT
58419: PUSH
58420: LD_VAR 0 2
58424: NOT
58425: OR
58426: IFFALSE 58430
// exit ;
58428: GO 58594
// tmp := AreaToList ( area , i ) ;
58430: LD_ADDR_VAR 0 6
58434: PUSH
58435: LD_VAR 0 2
58439: PPUSH
58440: LD_VAR 0 5
58444: PPUSH
58445: CALL_OW 517
58449: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
58450: LD_ADDR_VAR 0 5
58454: PUSH
58455: DOUBLE
58456: LD_INT 1
58458: DEC
58459: ST_TO_ADDR
58460: LD_VAR 0 6
58464: PUSH
58465: LD_INT 1
58467: ARRAY
58468: PUSH
58469: FOR_TO
58470: IFFALSE 58592
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
58472: LD_ADDR_VAR 0 7
58476: PUSH
58477: LD_VAR 0 6
58481: PUSH
58482: LD_INT 1
58484: ARRAY
58485: PUSH
58486: LD_VAR 0 5
58490: ARRAY
58491: PUSH
58492: LD_VAR 0 6
58496: PUSH
58497: LD_INT 2
58499: ARRAY
58500: PUSH
58501: LD_VAR 0 5
58505: ARRAY
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
58511: LD_VAR 0 7
58515: PUSH
58516: LD_INT 1
58518: ARRAY
58519: PPUSH
58520: LD_VAR 0 7
58524: PUSH
58525: LD_INT 2
58527: ARRAY
58528: PPUSH
58529: CALL_OW 428
58533: PUSH
58534: LD_INT 0
58536: EQUAL
58537: IFFALSE 58590
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
58539: LD_VAR 0 1
58543: PPUSH
58544: LD_VAR 0 7
58548: PUSH
58549: LD_INT 1
58551: ARRAY
58552: PPUSH
58553: LD_VAR 0 7
58557: PUSH
58558: LD_INT 2
58560: ARRAY
58561: PPUSH
58562: LD_VAR 0 3
58566: PPUSH
58567: CALL_OW 48
// result := IsPlaced ( unit ) ;
58571: LD_ADDR_VAR 0 4
58575: PUSH
58576: LD_VAR 0 1
58580: PPUSH
58581: CALL_OW 305
58585: ST_TO_ADDR
// exit ;
58586: POP
58587: POP
58588: GO 58594
// end ; end ;
58590: GO 58469
58592: POP
58593: POP
// end ;
58594: LD_VAR 0 4
58598: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
58599: LD_INT 0
58601: PPUSH
58602: PPUSH
58603: PPUSH
// if not side or side > 8 then
58604: LD_VAR 0 1
58608: NOT
58609: PUSH
58610: LD_VAR 0 1
58614: PUSH
58615: LD_INT 8
58617: GREATER
58618: OR
58619: IFFALSE 58623
// exit ;
58621: GO 58810
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
58623: LD_ADDR_VAR 0 4
58627: PUSH
58628: LD_INT 22
58630: PUSH
58631: LD_VAR 0 1
58635: PUSH
58636: EMPTY
58637: LIST
58638: LIST
58639: PUSH
58640: LD_INT 21
58642: PUSH
58643: LD_INT 3
58645: PUSH
58646: EMPTY
58647: LIST
58648: LIST
58649: PUSH
58650: EMPTY
58651: LIST
58652: LIST
58653: PPUSH
58654: CALL_OW 69
58658: ST_TO_ADDR
// if not tmp then
58659: LD_VAR 0 4
58663: NOT
58664: IFFALSE 58668
// exit ;
58666: GO 58810
// enable_addtolog := true ;
58668: LD_ADDR_OWVAR 81
58672: PUSH
58673: LD_INT 1
58675: ST_TO_ADDR
// AddToLog ( [ ) ;
58676: LD_STRING [
58678: PPUSH
58679: CALL_OW 561
// for i in tmp do
58683: LD_ADDR_VAR 0 3
58687: PUSH
58688: LD_VAR 0 4
58692: PUSH
58693: FOR_IN
58694: IFFALSE 58801
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
58696: LD_STRING [
58698: PUSH
58699: LD_VAR 0 3
58703: PPUSH
58704: CALL_OW 266
58708: STR
58709: PUSH
58710: LD_STRING , 
58712: STR
58713: PUSH
58714: LD_VAR 0 3
58718: PPUSH
58719: CALL_OW 250
58723: STR
58724: PUSH
58725: LD_STRING , 
58727: STR
58728: PUSH
58729: LD_VAR 0 3
58733: PPUSH
58734: CALL_OW 251
58738: STR
58739: PUSH
58740: LD_STRING , 
58742: STR
58743: PUSH
58744: LD_VAR 0 3
58748: PPUSH
58749: CALL_OW 254
58753: STR
58754: PUSH
58755: LD_STRING , 
58757: STR
58758: PUSH
58759: LD_VAR 0 3
58763: PPUSH
58764: LD_INT 1
58766: PPUSH
58767: CALL_OW 268
58771: STR
58772: PUSH
58773: LD_STRING , 
58775: STR
58776: PUSH
58777: LD_VAR 0 3
58781: PPUSH
58782: LD_INT 2
58784: PPUSH
58785: CALL_OW 268
58789: STR
58790: PUSH
58791: LD_STRING ],
58793: STR
58794: PPUSH
58795: CALL_OW 561
// end ;
58799: GO 58693
58801: POP
58802: POP
// AddToLog ( ]; ) ;
58803: LD_STRING ];
58805: PPUSH
58806: CALL_OW 561
// end ;
58810: LD_VAR 0 2
58814: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
58815: LD_INT 0
58817: PPUSH
58818: PPUSH
58819: PPUSH
58820: PPUSH
58821: PPUSH
// if not area or not rate or not max then
58822: LD_VAR 0 1
58826: NOT
58827: PUSH
58828: LD_VAR 0 2
58832: NOT
58833: OR
58834: PUSH
58835: LD_VAR 0 4
58839: NOT
58840: OR
58841: IFFALSE 58845
// exit ;
58843: GO 59037
// while 1 do
58845: LD_INT 1
58847: IFFALSE 59037
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
58849: LD_ADDR_VAR 0 9
58853: PUSH
58854: LD_VAR 0 1
58858: PPUSH
58859: LD_INT 1
58861: PPUSH
58862: CALL_OW 287
58866: PUSH
58867: LD_INT 10
58869: MUL
58870: ST_TO_ADDR
// r := rate / 10 ;
58871: LD_ADDR_VAR 0 7
58875: PUSH
58876: LD_VAR 0 2
58880: PUSH
58881: LD_INT 10
58883: DIVREAL
58884: ST_TO_ADDR
// time := 1 1$00 ;
58885: LD_ADDR_VAR 0 8
58889: PUSH
58890: LD_INT 2100
58892: ST_TO_ADDR
// if amount < min then
58893: LD_VAR 0 9
58897: PUSH
58898: LD_VAR 0 3
58902: LESS
58903: IFFALSE 58921
// r := r * 2 else
58905: LD_ADDR_VAR 0 7
58909: PUSH
58910: LD_VAR 0 7
58914: PUSH
58915: LD_INT 2
58917: MUL
58918: ST_TO_ADDR
58919: GO 58947
// if amount > max then
58921: LD_VAR 0 9
58925: PUSH
58926: LD_VAR 0 4
58930: GREATER
58931: IFFALSE 58947
// r := r / 2 ;
58933: LD_ADDR_VAR 0 7
58937: PUSH
58938: LD_VAR 0 7
58942: PUSH
58943: LD_INT 2
58945: DIVREAL
58946: ST_TO_ADDR
// time := time / r ;
58947: LD_ADDR_VAR 0 8
58951: PUSH
58952: LD_VAR 0 8
58956: PUSH
58957: LD_VAR 0 7
58961: DIVREAL
58962: ST_TO_ADDR
// if time < 0 then
58963: LD_VAR 0 8
58967: PUSH
58968: LD_INT 0
58970: LESS
58971: IFFALSE 58988
// time := time * - 1 ;
58973: LD_ADDR_VAR 0 8
58977: PUSH
58978: LD_VAR 0 8
58982: PUSH
58983: LD_INT 1
58985: NEG
58986: MUL
58987: ST_TO_ADDR
// wait ( time ) ;
58988: LD_VAR 0 8
58992: PPUSH
58993: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
58997: LD_INT 35
58999: PPUSH
59000: LD_INT 875
59002: PPUSH
59003: CALL_OW 12
59007: PPUSH
59008: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
59012: LD_INT 1
59014: PPUSH
59015: LD_INT 5
59017: PPUSH
59018: CALL_OW 12
59022: PPUSH
59023: LD_VAR 0 1
59027: PPUSH
59028: LD_INT 1
59030: PPUSH
59031: CALL_OW 55
// end ;
59035: GO 58845
// end ;
59037: LD_VAR 0 5
59041: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
59042: LD_INT 0
59044: PPUSH
59045: PPUSH
59046: PPUSH
59047: PPUSH
59048: PPUSH
59049: PPUSH
59050: PPUSH
59051: PPUSH
// if not turrets or not factories then
59052: LD_VAR 0 1
59056: NOT
59057: PUSH
59058: LD_VAR 0 2
59062: NOT
59063: OR
59064: IFFALSE 59068
// exit ;
59066: GO 59375
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
59068: LD_ADDR_VAR 0 10
59072: PUSH
59073: LD_INT 5
59075: PUSH
59076: LD_INT 6
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: LD_INT 2
59085: PUSH
59086: LD_INT 4
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PUSH
59093: LD_INT 3
59095: PUSH
59096: LD_INT 5
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: EMPTY
59104: LIST
59105: LIST
59106: LIST
59107: PUSH
59108: LD_INT 24
59110: PUSH
59111: LD_INT 25
59113: PUSH
59114: EMPTY
59115: LIST
59116: LIST
59117: PUSH
59118: LD_INT 23
59120: PUSH
59121: LD_INT 27
59123: PUSH
59124: EMPTY
59125: LIST
59126: LIST
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: PUSH
59132: LD_INT 42
59134: PUSH
59135: LD_INT 43
59137: PUSH
59138: EMPTY
59139: LIST
59140: LIST
59141: PUSH
59142: LD_INT 44
59144: PUSH
59145: LD_INT 46
59147: PUSH
59148: EMPTY
59149: LIST
59150: LIST
59151: PUSH
59152: LD_INT 45
59154: PUSH
59155: LD_INT 47
59157: PUSH
59158: EMPTY
59159: LIST
59160: LIST
59161: PUSH
59162: EMPTY
59163: LIST
59164: LIST
59165: LIST
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: LIST
59171: ST_TO_ADDR
// result := [ ] ;
59172: LD_ADDR_VAR 0 3
59176: PUSH
59177: EMPTY
59178: ST_TO_ADDR
// for i in turrets do
59179: LD_ADDR_VAR 0 4
59183: PUSH
59184: LD_VAR 0 1
59188: PUSH
59189: FOR_IN
59190: IFFALSE 59373
// begin nat := GetNation ( i ) ;
59192: LD_ADDR_VAR 0 7
59196: PUSH
59197: LD_VAR 0 4
59201: PPUSH
59202: CALL_OW 248
59206: ST_TO_ADDR
// weapon := 0 ;
59207: LD_ADDR_VAR 0 8
59211: PUSH
59212: LD_INT 0
59214: ST_TO_ADDR
// if not nat then
59215: LD_VAR 0 7
59219: NOT
59220: IFFALSE 59224
// continue ;
59222: GO 59189
// for j in list [ nat ] do
59224: LD_ADDR_VAR 0 5
59228: PUSH
59229: LD_VAR 0 10
59233: PUSH
59234: LD_VAR 0 7
59238: ARRAY
59239: PUSH
59240: FOR_IN
59241: IFFALSE 59282
// if GetBWeapon ( i ) = j [ 1 ] then
59243: LD_VAR 0 4
59247: PPUSH
59248: CALL_OW 269
59252: PUSH
59253: LD_VAR 0 5
59257: PUSH
59258: LD_INT 1
59260: ARRAY
59261: EQUAL
59262: IFFALSE 59280
// begin weapon := j [ 2 ] ;
59264: LD_ADDR_VAR 0 8
59268: PUSH
59269: LD_VAR 0 5
59273: PUSH
59274: LD_INT 2
59276: ARRAY
59277: ST_TO_ADDR
// break ;
59278: GO 59282
// end ;
59280: GO 59240
59282: POP
59283: POP
// if not weapon then
59284: LD_VAR 0 8
59288: NOT
59289: IFFALSE 59293
// continue ;
59291: GO 59189
// for k in factories do
59293: LD_ADDR_VAR 0 6
59297: PUSH
59298: LD_VAR 0 2
59302: PUSH
59303: FOR_IN
59304: IFFALSE 59369
// begin weapons := AvailableWeaponList ( k ) ;
59306: LD_ADDR_VAR 0 9
59310: PUSH
59311: LD_VAR 0 6
59315: PPUSH
59316: CALL_OW 478
59320: ST_TO_ADDR
// if not weapons then
59321: LD_VAR 0 9
59325: NOT
59326: IFFALSE 59330
// continue ;
59328: GO 59303
// if weapon in weapons then
59330: LD_VAR 0 8
59334: PUSH
59335: LD_VAR 0 9
59339: IN
59340: IFFALSE 59367
// begin result := [ i , weapon ] ;
59342: LD_ADDR_VAR 0 3
59346: PUSH
59347: LD_VAR 0 4
59351: PUSH
59352: LD_VAR 0 8
59356: PUSH
59357: EMPTY
59358: LIST
59359: LIST
59360: ST_TO_ADDR
// exit ;
59361: POP
59362: POP
59363: POP
59364: POP
59365: GO 59375
// end ; end ;
59367: GO 59303
59369: POP
59370: POP
// end ;
59371: GO 59189
59373: POP
59374: POP
// end ;
59375: LD_VAR 0 3
59379: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
59380: LD_INT 0
59382: PPUSH
// if not side or side > 8 then
59383: LD_VAR 0 3
59387: NOT
59388: PUSH
59389: LD_VAR 0 3
59393: PUSH
59394: LD_INT 8
59396: GREATER
59397: OR
59398: IFFALSE 59402
// exit ;
59400: GO 59461
// if not range then
59402: LD_VAR 0 4
59406: NOT
59407: IFFALSE 59418
// range := - 12 ;
59409: LD_ADDR_VAR 0 4
59413: PUSH
59414: LD_INT 12
59416: NEG
59417: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
59418: LD_VAR 0 1
59422: PPUSH
59423: LD_VAR 0 2
59427: PPUSH
59428: LD_VAR 0 3
59432: PPUSH
59433: LD_VAR 0 4
59437: PPUSH
59438: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
59442: LD_VAR 0 1
59446: PPUSH
59447: LD_VAR 0 2
59451: PPUSH
59452: LD_VAR 0 3
59456: PPUSH
59457: CALL_OW 331
// end ;
59461: LD_VAR 0 5
59465: RET
// export function Video ( mode ) ; begin
59466: LD_INT 0
59468: PPUSH
// ingame_video = mode ;
59469: LD_ADDR_OWVAR 52
59473: PUSH
59474: LD_VAR 0 1
59478: ST_TO_ADDR
// interface_hidden = mode ;
59479: LD_ADDR_OWVAR 54
59483: PUSH
59484: LD_VAR 0 1
59488: ST_TO_ADDR
// end ;
59489: LD_VAR 0 2
59493: RET
// export function Join ( array , element ) ; begin
59494: LD_INT 0
59496: PPUSH
// result := Replace ( array , array + 1 , element ) ;
59497: LD_ADDR_VAR 0 3
59501: PUSH
59502: LD_VAR 0 1
59506: PPUSH
59507: LD_VAR 0 1
59511: PUSH
59512: LD_INT 1
59514: PLUS
59515: PPUSH
59516: LD_VAR 0 2
59520: PPUSH
59521: CALL_OW 1
59525: ST_TO_ADDR
// end ;
59526: LD_VAR 0 3
59530: RET
// export function JoinUnion ( array , element ) ; begin
59531: LD_INT 0
59533: PPUSH
// result := array union element ;
59534: LD_ADDR_VAR 0 3
59538: PUSH
59539: LD_VAR 0 1
59543: PUSH
59544: LD_VAR 0 2
59548: UNION
59549: ST_TO_ADDR
// end ;
59550: LD_VAR 0 3
59554: RET
// export function GetBehemoths ( side ) ; begin
59555: LD_INT 0
59557: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
59558: LD_ADDR_VAR 0 2
59562: PUSH
59563: LD_INT 22
59565: PUSH
59566: LD_VAR 0 1
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: PUSH
59575: LD_INT 31
59577: PUSH
59578: LD_INT 25
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: PUSH
59585: EMPTY
59586: LIST
59587: LIST
59588: PPUSH
59589: CALL_OW 69
59593: ST_TO_ADDR
// end ;
59594: LD_VAR 0 2
59598: RET
// export function Shuffle ( array ) ; var i , index ; begin
59599: LD_INT 0
59601: PPUSH
59602: PPUSH
59603: PPUSH
// result := [ ] ;
59604: LD_ADDR_VAR 0 2
59608: PUSH
59609: EMPTY
59610: ST_TO_ADDR
// if not array then
59611: LD_VAR 0 1
59615: NOT
59616: IFFALSE 59620
// exit ;
59618: GO 59719
// Randomize ;
59620: CALL_OW 10
// for i = array downto 1 do
59624: LD_ADDR_VAR 0 3
59628: PUSH
59629: DOUBLE
59630: LD_VAR 0 1
59634: INC
59635: ST_TO_ADDR
59636: LD_INT 1
59638: PUSH
59639: FOR_DOWNTO
59640: IFFALSE 59717
// begin index := rand ( 1 , array ) ;
59642: LD_ADDR_VAR 0 4
59646: PUSH
59647: LD_INT 1
59649: PPUSH
59650: LD_VAR 0 1
59654: PPUSH
59655: CALL_OW 12
59659: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
59660: LD_ADDR_VAR 0 2
59664: PUSH
59665: LD_VAR 0 2
59669: PPUSH
59670: LD_VAR 0 2
59674: PUSH
59675: LD_INT 1
59677: PLUS
59678: PPUSH
59679: LD_VAR 0 1
59683: PUSH
59684: LD_VAR 0 4
59688: ARRAY
59689: PPUSH
59690: CALL_OW 2
59694: ST_TO_ADDR
// array := Delete ( array , index ) ;
59695: LD_ADDR_VAR 0 1
59699: PUSH
59700: LD_VAR 0 1
59704: PPUSH
59705: LD_VAR 0 4
59709: PPUSH
59710: CALL_OW 3
59714: ST_TO_ADDR
// end ;
59715: GO 59639
59717: POP
59718: POP
// end ;
59719: LD_VAR 0 2
59723: RET
// export function GetBaseMaterials ( base ) ; begin
59724: LD_INT 0
59726: PPUSH
// result := [ 0 , 0 , 0 ] ;
59727: LD_ADDR_VAR 0 2
59731: PUSH
59732: LD_INT 0
59734: PUSH
59735: LD_INT 0
59737: PUSH
59738: LD_INT 0
59740: PUSH
59741: EMPTY
59742: LIST
59743: LIST
59744: LIST
59745: ST_TO_ADDR
// if not base then
59746: LD_VAR 0 1
59750: NOT
59751: IFFALSE 59755
// exit ;
59753: GO 59804
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
59755: LD_ADDR_VAR 0 2
59759: PUSH
59760: LD_VAR 0 1
59764: PPUSH
59765: LD_INT 1
59767: PPUSH
59768: CALL_OW 275
59772: PUSH
59773: LD_VAR 0 1
59777: PPUSH
59778: LD_INT 2
59780: PPUSH
59781: CALL_OW 275
59785: PUSH
59786: LD_VAR 0 1
59790: PPUSH
59791: LD_INT 3
59793: PPUSH
59794: CALL_OW 275
59798: PUSH
59799: EMPTY
59800: LIST
59801: LIST
59802: LIST
59803: ST_TO_ADDR
// end ;
59804: LD_VAR 0 2
59808: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
59809: LD_INT 0
59811: PPUSH
59812: PPUSH
// result := array ;
59813: LD_ADDR_VAR 0 3
59817: PUSH
59818: LD_VAR 0 1
59822: ST_TO_ADDR
// if size > 0 then
59823: LD_VAR 0 2
59827: PUSH
59828: LD_INT 0
59830: GREATER
59831: IFFALSE 59877
// for i := array downto size do
59833: LD_ADDR_VAR 0 4
59837: PUSH
59838: DOUBLE
59839: LD_VAR 0 1
59843: INC
59844: ST_TO_ADDR
59845: LD_VAR 0 2
59849: PUSH
59850: FOR_DOWNTO
59851: IFFALSE 59875
// result := Delete ( result , result ) ;
59853: LD_ADDR_VAR 0 3
59857: PUSH
59858: LD_VAR 0 3
59862: PPUSH
59863: LD_VAR 0 3
59867: PPUSH
59868: CALL_OW 3
59872: ST_TO_ADDR
59873: GO 59850
59875: POP
59876: POP
// end ;
59877: LD_VAR 0 3
59881: RET
// export function ComExit ( unit ) ; var tmp ; begin
59882: LD_INT 0
59884: PPUSH
59885: PPUSH
// if not IsInUnit ( unit ) then
59886: LD_VAR 0 1
59890: PPUSH
59891: CALL_OW 310
59895: NOT
59896: IFFALSE 59900
// exit ;
59898: GO 59960
// tmp := IsInUnit ( unit ) ;
59900: LD_ADDR_VAR 0 3
59904: PUSH
59905: LD_VAR 0 1
59909: PPUSH
59910: CALL_OW 310
59914: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
59915: LD_VAR 0 3
59919: PPUSH
59920: CALL_OW 247
59924: PUSH
59925: LD_INT 2
59927: EQUAL
59928: IFFALSE 59941
// ComExitVehicle ( unit ) else
59930: LD_VAR 0 1
59934: PPUSH
59935: CALL_OW 121
59939: GO 59950
// ComExitBuilding ( unit ) ;
59941: LD_VAR 0 1
59945: PPUSH
59946: CALL_OW 122
// result := tmp ;
59950: LD_ADDR_VAR 0 2
59954: PUSH
59955: LD_VAR 0 3
59959: ST_TO_ADDR
// end ;
59960: LD_VAR 0 2
59964: RET
// export function ComExitAll ( units ) ; var i ; begin
59965: LD_INT 0
59967: PPUSH
59968: PPUSH
// if not units then
59969: LD_VAR 0 1
59973: NOT
59974: IFFALSE 59978
// exit ;
59976: GO 60004
// for i in units do
59978: LD_ADDR_VAR 0 3
59982: PUSH
59983: LD_VAR 0 1
59987: PUSH
59988: FOR_IN
59989: IFFALSE 60002
// ComExit ( i ) ;
59991: LD_VAR 0 3
59995: PPUSH
59996: CALL 59882 0 1
60000: GO 59988
60002: POP
60003: POP
// end ;
60004: LD_VAR 0 2
60008: RET
// export function ResetHc ; begin
60009: LD_INT 0
60011: PPUSH
// InitHc ;
60012: CALL_OW 19
// hc_importance := 0 ;
60016: LD_ADDR_OWVAR 32
60020: PUSH
60021: LD_INT 0
60023: ST_TO_ADDR
// end ;
60024: LD_VAR 0 1
60028: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
60029: LD_INT 0
60031: PPUSH
60032: PPUSH
60033: PPUSH
// _x := ( x1 + x2 ) div 2 ;
60034: LD_ADDR_VAR 0 6
60038: PUSH
60039: LD_VAR 0 1
60043: PUSH
60044: LD_VAR 0 3
60048: PLUS
60049: PUSH
60050: LD_INT 2
60052: DIV
60053: ST_TO_ADDR
// if _x < 0 then
60054: LD_VAR 0 6
60058: PUSH
60059: LD_INT 0
60061: LESS
60062: IFFALSE 60079
// _x := _x * - 1 ;
60064: LD_ADDR_VAR 0 6
60068: PUSH
60069: LD_VAR 0 6
60073: PUSH
60074: LD_INT 1
60076: NEG
60077: MUL
60078: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
60079: LD_ADDR_VAR 0 7
60083: PUSH
60084: LD_VAR 0 2
60088: PUSH
60089: LD_VAR 0 4
60093: PLUS
60094: PUSH
60095: LD_INT 2
60097: DIV
60098: ST_TO_ADDR
// if _y < 0 then
60099: LD_VAR 0 7
60103: PUSH
60104: LD_INT 0
60106: LESS
60107: IFFALSE 60124
// _y := _y * - 1 ;
60109: LD_ADDR_VAR 0 7
60113: PUSH
60114: LD_VAR 0 7
60118: PUSH
60119: LD_INT 1
60121: NEG
60122: MUL
60123: ST_TO_ADDR
// result := [ _x , _y ] ;
60124: LD_ADDR_VAR 0 5
60128: PUSH
60129: LD_VAR 0 6
60133: PUSH
60134: LD_VAR 0 7
60138: PUSH
60139: EMPTY
60140: LIST
60141: LIST
60142: ST_TO_ADDR
// end ;
60143: LD_VAR 0 5
60147: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
60148: LD_INT 0
60150: PPUSH
60151: PPUSH
60152: PPUSH
60153: PPUSH
// task := GetTaskList ( unit ) ;
60154: LD_ADDR_VAR 0 7
60158: PUSH
60159: LD_VAR 0 1
60163: PPUSH
60164: CALL_OW 437
60168: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
60169: LD_VAR 0 7
60173: NOT
60174: PUSH
60175: LD_VAR 0 1
60179: PPUSH
60180: LD_VAR 0 2
60184: PPUSH
60185: CALL_OW 308
60189: NOT
60190: AND
60191: IFFALSE 60195
// exit ;
60193: GO 60313
// if IsInArea ( unit , area ) then
60195: LD_VAR 0 1
60199: PPUSH
60200: LD_VAR 0 2
60204: PPUSH
60205: CALL_OW 308
60209: IFFALSE 60227
// begin ComMoveToArea ( unit , goAway ) ;
60211: LD_VAR 0 1
60215: PPUSH
60216: LD_VAR 0 3
60220: PPUSH
60221: CALL_OW 113
// exit ;
60225: GO 60313
// end ; if task [ 1 ] [ 1 ] <> M then
60227: LD_VAR 0 7
60231: PUSH
60232: LD_INT 1
60234: ARRAY
60235: PUSH
60236: LD_INT 1
60238: ARRAY
60239: PUSH
60240: LD_STRING M
60242: NONEQUAL
60243: IFFALSE 60247
// exit ;
60245: GO 60313
// x := task [ 1 ] [ 2 ] ;
60247: LD_ADDR_VAR 0 5
60251: PUSH
60252: LD_VAR 0 7
60256: PUSH
60257: LD_INT 1
60259: ARRAY
60260: PUSH
60261: LD_INT 2
60263: ARRAY
60264: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
60265: LD_ADDR_VAR 0 6
60269: PUSH
60270: LD_VAR 0 7
60274: PUSH
60275: LD_INT 1
60277: ARRAY
60278: PUSH
60279: LD_INT 3
60281: ARRAY
60282: ST_TO_ADDR
// if InArea ( x , y , area ) then
60283: LD_VAR 0 5
60287: PPUSH
60288: LD_VAR 0 6
60292: PPUSH
60293: LD_VAR 0 2
60297: PPUSH
60298: CALL_OW 309
60302: IFFALSE 60313
// ComStop ( unit ) ;
60304: LD_VAR 0 1
60308: PPUSH
60309: CALL_OW 141
// end ;
60313: LD_VAR 0 4
60317: RET
// export function Abs ( value ) ; begin
60318: LD_INT 0
60320: PPUSH
// result := value ;
60321: LD_ADDR_VAR 0 2
60325: PUSH
60326: LD_VAR 0 1
60330: ST_TO_ADDR
// if value < 0 then
60331: LD_VAR 0 1
60335: PUSH
60336: LD_INT 0
60338: LESS
60339: IFFALSE 60356
// result := value * - 1 ;
60341: LD_ADDR_VAR 0 2
60345: PUSH
60346: LD_VAR 0 1
60350: PUSH
60351: LD_INT 1
60353: NEG
60354: MUL
60355: ST_TO_ADDR
// end ;
60356: LD_VAR 0 2
60360: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
60361: LD_INT 0
60363: PPUSH
60364: PPUSH
60365: PPUSH
60366: PPUSH
60367: PPUSH
60368: PPUSH
60369: PPUSH
60370: PPUSH
// if not unit or not building then
60371: LD_VAR 0 1
60375: NOT
60376: PUSH
60377: LD_VAR 0 2
60381: NOT
60382: OR
60383: IFFALSE 60387
// exit ;
60385: GO 60613
// x := GetX ( building ) ;
60387: LD_ADDR_VAR 0 4
60391: PUSH
60392: LD_VAR 0 2
60396: PPUSH
60397: CALL_OW 250
60401: ST_TO_ADDR
// y := GetY ( building ) ;
60402: LD_ADDR_VAR 0 6
60406: PUSH
60407: LD_VAR 0 2
60411: PPUSH
60412: CALL_OW 251
60416: ST_TO_ADDR
// d := GetDir ( building ) ;
60417: LD_ADDR_VAR 0 8
60421: PUSH
60422: LD_VAR 0 2
60426: PPUSH
60427: CALL_OW 254
60431: ST_TO_ADDR
// r := 4 ;
60432: LD_ADDR_VAR 0 9
60436: PUSH
60437: LD_INT 4
60439: ST_TO_ADDR
// for i := 1 to 5 do
60440: LD_ADDR_VAR 0 10
60444: PUSH
60445: DOUBLE
60446: LD_INT 1
60448: DEC
60449: ST_TO_ADDR
60450: LD_INT 5
60452: PUSH
60453: FOR_TO
60454: IFFALSE 60611
// begin _x := ShiftX ( x , d , r + i ) ;
60456: LD_ADDR_VAR 0 5
60460: PUSH
60461: LD_VAR 0 4
60465: PPUSH
60466: LD_VAR 0 8
60470: PPUSH
60471: LD_VAR 0 9
60475: PUSH
60476: LD_VAR 0 10
60480: PLUS
60481: PPUSH
60482: CALL_OW 272
60486: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
60487: LD_ADDR_VAR 0 7
60491: PUSH
60492: LD_VAR 0 6
60496: PPUSH
60497: LD_VAR 0 8
60501: PPUSH
60502: LD_VAR 0 9
60506: PUSH
60507: LD_VAR 0 10
60511: PLUS
60512: PPUSH
60513: CALL_OW 273
60517: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
60518: LD_VAR 0 5
60522: PPUSH
60523: LD_VAR 0 7
60527: PPUSH
60528: CALL_OW 488
60532: PUSH
60533: LD_VAR 0 5
60537: PPUSH
60538: LD_VAR 0 7
60542: PPUSH
60543: CALL_OW 428
60547: PPUSH
60548: CALL_OW 247
60552: PUSH
60553: LD_INT 3
60555: PUSH
60556: LD_INT 2
60558: PUSH
60559: EMPTY
60560: LIST
60561: LIST
60562: IN
60563: NOT
60564: AND
60565: IFFALSE 60609
// begin ComMoveXY ( unit , _x , _y ) ;
60567: LD_VAR 0 1
60571: PPUSH
60572: LD_VAR 0 5
60576: PPUSH
60577: LD_VAR 0 7
60581: PPUSH
60582: CALL_OW 111
// result := [ _x , _y ] ;
60586: LD_ADDR_VAR 0 3
60590: PUSH
60591: LD_VAR 0 5
60595: PUSH
60596: LD_VAR 0 7
60600: PUSH
60601: EMPTY
60602: LIST
60603: LIST
60604: ST_TO_ADDR
// exit ;
60605: POP
60606: POP
60607: GO 60613
// end ; end ;
60609: GO 60453
60611: POP
60612: POP
// end ;
60613: LD_VAR 0 3
60617: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
60618: LD_INT 0
60620: PPUSH
60621: PPUSH
60622: PPUSH
// result := 0 ;
60623: LD_ADDR_VAR 0 3
60627: PUSH
60628: LD_INT 0
60630: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
60631: LD_VAR 0 1
60635: PUSH
60636: LD_INT 0
60638: LESS
60639: PUSH
60640: LD_VAR 0 1
60644: PUSH
60645: LD_INT 8
60647: GREATER
60648: OR
60649: PUSH
60650: LD_VAR 0 2
60654: PUSH
60655: LD_INT 0
60657: LESS
60658: OR
60659: PUSH
60660: LD_VAR 0 2
60664: PUSH
60665: LD_INT 8
60667: GREATER
60668: OR
60669: IFFALSE 60673
// exit ;
60671: GO 60748
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
60673: LD_ADDR_VAR 0 4
60677: PUSH
60678: LD_INT 22
60680: PUSH
60681: LD_VAR 0 2
60685: PUSH
60686: EMPTY
60687: LIST
60688: LIST
60689: PPUSH
60690: CALL_OW 69
60694: PUSH
60695: FOR_IN
60696: IFFALSE 60746
// begin un := UnitShoot ( i ) ;
60698: LD_ADDR_VAR 0 5
60702: PUSH
60703: LD_VAR 0 4
60707: PPUSH
60708: CALL_OW 504
60712: ST_TO_ADDR
// if GetSide ( un ) = side1 then
60713: LD_VAR 0 5
60717: PPUSH
60718: CALL_OW 255
60722: PUSH
60723: LD_VAR 0 1
60727: EQUAL
60728: IFFALSE 60744
// begin result := un ;
60730: LD_ADDR_VAR 0 3
60734: PUSH
60735: LD_VAR 0 5
60739: ST_TO_ADDR
// exit ;
60740: POP
60741: POP
60742: GO 60748
// end ; end ;
60744: GO 60695
60746: POP
60747: POP
// end ;
60748: LD_VAR 0 3
60752: RET
// export function GetCargoBay ( units ) ; begin
60753: LD_INT 0
60755: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
60756: LD_ADDR_VAR 0 2
60760: PUSH
60761: LD_VAR 0 1
60765: PPUSH
60766: LD_INT 2
60768: PUSH
60769: LD_INT 34
60771: PUSH
60772: LD_INT 12
60774: PUSH
60775: EMPTY
60776: LIST
60777: LIST
60778: PUSH
60779: LD_INT 34
60781: PUSH
60782: LD_INT 51
60784: PUSH
60785: EMPTY
60786: LIST
60787: LIST
60788: PUSH
60789: LD_INT 34
60791: PUSH
60792: LD_INT 32
60794: PUSH
60795: EMPTY
60796: LIST
60797: LIST
60798: PUSH
60799: LD_INT 34
60801: PUSH
60802: LD_EXP 92
60806: PUSH
60807: EMPTY
60808: LIST
60809: LIST
60810: PUSH
60811: EMPTY
60812: LIST
60813: LIST
60814: LIST
60815: LIST
60816: LIST
60817: PPUSH
60818: CALL_OW 72
60822: ST_TO_ADDR
// end ; end_of_file
60823: LD_VAR 0 2
60827: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
60828: LD_VAR 0 1
60832: PPUSH
60833: LD_VAR 0 2
60837: PPUSH
60838: LD_VAR 0 3
60842: PPUSH
60843: LD_VAR 0 4
60847: PPUSH
60848: LD_VAR 0 5
60852: PPUSH
60853: LD_VAR 0 6
60857: PPUSH
60858: CALL 5825 0 6
// end ;
60862: PPOPN 6
60864: END
