// export JMM , Gladstone , Denis , Lisa , Frank , Bobby , Cyrus , Brown , Donaldson ; export others , randomsDelta ; export apemans , yourApemans ; export yourVehicles ; export DeltaDoctor ; export Harisson ; export selectedPeople ; export baseCorrect ; export cutscene ; export lab ; export resources ; export mission_prefix , mission_prefix_prev ; starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// FogOff ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 344
// baseCorrect := 0 ;
  15: LD_ADDR_EXP 18
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// cutscene := 1 ;
  23: LD_ADDR_EXP 19
  27: PUSH
  28: LD_INT 1
  30: ST_TO_ADDR
// apemans := [ ] ;
  31: LD_ADDR_EXP 12
  35: PUSH
  36: EMPTY
  37: ST_TO_ADDR
// yourApemans := [ ] ;
  38: LD_ADDR_EXP 13
  42: PUSH
  43: EMPTY
  44: ST_TO_ADDR
// yourVehicles := [ ] ;
  45: LD_ADDR_EXP 14
  49: PUSH
  50: EMPTY
  51: ST_TO_ADDR
// randomsDelta := [ ] ;
  52: LD_ADDR_EXP 11
  56: PUSH
  57: EMPTY
  58: ST_TO_ADDR
// resources := [ ] ;
  59: LD_ADDR_EXP 21
  63: PUSH
  64: EMPTY
  65: ST_TO_ADDR
// mission_prefix := 06_ ;
  66: LD_ADDR_EXP 22
  70: PUSH
  71: LD_STRING 06_
  73: ST_TO_ADDR
// mission_prefix_prev := 05_ ;
  74: LD_ADDR_EXP 23
  78: PUSH
  79: LD_STRING 05_
  81: ST_TO_ADDR
// CreateNature ;
  82: CALL 170 0 0
// PrepareDeltaBase ;
  86: CALL 2346 0 0
// LoadVehicles ;
  90: CALL 1458 0 0
// PrepareHeroes ;
  94: CALL 291 0 0
// PrepareRandoms ;
  98: CALL 1759 0 0
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
 102: LD_ADDR_EXP 20
 106: PUSH
 107: LD_INT 22
 109: PUSH
 110: LD_INT 1
 112: PUSH
 113: EMPTY
 114: LIST
 115: LIST
 116: PUSH
 117: LD_INT 2
 119: PUSH
 120: LD_INT 30
 122: PUSH
 123: LD_INT 6
 125: PUSH
 126: EMPTY
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 30
 132: PUSH
 133: LD_INT 7
 135: PUSH
 136: EMPTY
 137: LIST
 138: LIST
 139: PUSH
 140: LD_INT 30
 142: PUSH
 143: LD_INT 8
 145: PUSH
 146: EMPTY
 147: LIST
 148: LIST
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: LIST
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: PPUSH
 160: CALL_OW 69
 164: ST_TO_ADDR
// Action ;
 165: CALL 3228 0 0
// end ;
 169: END
// export function CreateNature ; var i ; begin
 170: LD_INT 0
 172: PPUSH
 173: PPUSH
// uc_side := 0 ;
 174: LD_ADDR_OWVAR 20
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// uc_nation := 0 ;
 182: LD_ADDR_OWVAR 21
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// for i = 1 to 4 do
 190: LD_ADDR_VAR 0 2
 194: PUSH
 195: DOUBLE
 196: LD_INT 1
 198: DEC
 199: ST_TO_ADDR
 200: LD_INT 4
 202: PUSH
 203: FOR_TO
 204: IFFALSE 284
// begin hc_gallery :=  ;
 206: LD_ADDR_OWVAR 33
 210: PUSH
 211: LD_STRING 
 213: ST_TO_ADDR
// hc_name :=  ;
 214: LD_ADDR_OWVAR 26
 218: PUSH
 219: LD_STRING 
 221: ST_TO_ADDR
// hc_attr := [ rand ( 10 , 11 ) , rand ( 10 , 12 ) ] ;
 222: LD_ADDR_OWVAR 29
 226: PUSH
 227: LD_INT 10
 229: PPUSH
 230: LD_INT 11
 232: PPUSH
 233: CALL_OW 12
 237: PUSH
 238: LD_INT 10
 240: PPUSH
 241: LD_INT 12
 243: PPUSH
 244: CALL_OW 12
 248: PUSH
 249: EMPTY
 250: LIST
 251: LIST
 252: ST_TO_ADDR
// hc_class := class_apeman ;
 253: LD_ADDR_OWVAR 28
 257: PUSH
 258: LD_INT 12
 260: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , 22 , 18 , 20 , false ) ;
 261: CALL_OW 44
 265: PPUSH
 266: LD_INT 22
 268: PPUSH
 269: LD_INT 18
 271: PPUSH
 272: LD_INT 20
 274: PPUSH
 275: LD_INT 0
 277: PPUSH
 278: CALL_OW 50
// end ;
 282: GO 203
 284: POP
 285: POP
// end ; end_of_file
 286: LD_VAR 0 1
 290: RET
// export function PrepareHeroes ; var i , tmp , ape , test ; begin
 291: LD_INT 0
 293: PPUSH
 294: PPUSH
 295: PPUSH
 296: PPUSH
 297: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
 298: LD_ADDR_VAR 0 3
 302: PUSH
 303: LD_INT 22
 305: PUSH
 306: LD_INT 1
 308: PUSH
 309: EMPTY
 310: LIST
 311: LIST
 312: PUSH
 313: LD_INT 21
 315: PUSH
 316: LD_INT 3
 318: PUSH
 319: EMPTY
 320: LIST
 321: LIST
 322: PUSH
 323: LD_INT 30
 325: PUSH
 326: LD_INT 0
 328: PUSH
 329: EMPTY
 330: LIST
 331: LIST
 332: PUSH
 333: EMPTY
 334: LIST
 335: LIST
 336: LIST
 337: PPUSH
 338: CALL_OW 69
 342: ST_TO_ADDR
// if tmp then
 343: LD_VAR 0 3
 347: IFFALSE 365
// SetBName ( tmp [ 1 ] , delta ) ;
 349: LD_VAR 0 3
 353: PUSH
 354: LD_INT 1
 356: ARRAY
 357: PPUSH
 358: LD_STRING delta
 360: PPUSH
 361: CALL_OW 500
// uc_side := 1 ;
 365: LD_ADDR_OWVAR 20
 369: PUSH
 370: LD_INT 1
 372: ST_TO_ADDR
// uc_nation := 1 ;
 373: LD_ADDR_OWVAR 21
 377: PUSH
 378: LD_INT 1
 380: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , true , mission_prefix_prev ) ;
 381: LD_ADDR_EXP 1
 385: PUSH
 386: LD_STRING JMM
 388: PPUSH
 389: LD_INT 1
 391: PPUSH
 392: LD_EXP 23
 396: PPUSH
 397: CALL 25876 0 3
 401: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
 402: LD_ADDR_EXP 16
 406: PUSH
 407: LD_STRING Harisson
 409: PPUSH
 410: LD_INT 0
 412: PPUSH
 413: LD_STRING 
 415: PPUSH
 416: CALL 25876 0 3
 420: ST_TO_ADDR
// PlaceUnitXYR ( JMM , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 421: LD_EXP 1
 425: PPUSH
 426: LD_VAR 0 3
 430: PUSH
 431: LD_INT 1
 433: ARRAY
 434: PPUSH
 435: CALL_OW 250
 439: PPUSH
 440: LD_VAR 0 3
 444: PUSH
 445: LD_INT 1
 447: ARRAY
 448: PPUSH
 449: CALL_OW 251
 453: PPUSH
 454: LD_INT 5
 456: PPUSH
 457: LD_INT 0
 459: PPUSH
 460: CALL_OW 50
// SetClass ( JMM , 1 ) ;
 464: LD_EXP 1
 468: PPUSH
 469: LD_INT 1
 471: PPUSH
 472: CALL_OW 336
// Gladstone := PrepareUnit ( Gladstone , true , mission_prefix_prev ) ;
 476: LD_ADDR_EXP 2
 480: PUSH
 481: LD_STRING Gladstone
 483: PPUSH
 484: LD_INT 1
 486: PPUSH
 487: LD_EXP 23
 491: PPUSH
 492: CALL 25876 0 3
 496: ST_TO_ADDR
// PlaceUnitXYR ( Gladstone , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 497: LD_EXP 2
 501: PPUSH
 502: LD_VAR 0 3
 506: PUSH
 507: LD_INT 1
 509: ARRAY
 510: PPUSH
 511: CALL_OW 250
 515: PPUSH
 516: LD_VAR 0 3
 520: PUSH
 521: LD_INT 1
 523: ARRAY
 524: PPUSH
 525: CALL_OW 251
 529: PPUSH
 530: LD_INT 5
 532: PPUSH
 533: LD_INT 0
 535: PPUSH
 536: CALL_OW 50
// SetClass ( Gladstone , 4 ) ;
 540: LD_EXP 2
 544: PPUSH
 545: LD_INT 4
 547: PPUSH
 548: CALL_OW 336
// Denis := PrepareUnit ( Denis , true , mission_prefix_prev ) ;
 552: LD_ADDR_EXP 3
 556: PUSH
 557: LD_STRING Denis
 559: PPUSH
 560: LD_INT 1
 562: PPUSH
 563: LD_EXP 23
 567: PPUSH
 568: CALL 25876 0 3
 572: ST_TO_ADDR
// PlaceUnitXYR ( Denis , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 573: LD_EXP 3
 577: PPUSH
 578: LD_VAR 0 3
 582: PUSH
 583: LD_INT 1
 585: ARRAY
 586: PPUSH
 587: CALL_OW 250
 591: PPUSH
 592: LD_VAR 0 3
 596: PUSH
 597: LD_INT 1
 599: ARRAY
 600: PPUSH
 601: CALL_OW 251
 605: PPUSH
 606: LD_INT 5
 608: PPUSH
 609: LD_INT 0
 611: PPUSH
 612: CALL_OW 50
// SetClass ( Denis , 4 ) ;
 616: LD_EXP 3
 620: PPUSH
 621: LD_INT 4
 623: PPUSH
 624: CALL_OW 336
// if LoadVariable ( FrankInDelta , 0 ) = 1 then
 628: LD_STRING FrankInDelta
 630: PPUSH
 631: LD_INT 0
 633: PPUSH
 634: CALL_OW 30
 638: PUSH
 639: LD_INT 1
 641: EQUAL
 642: IFFALSE 720
// begin Frank := PrepareUnit ( Frank , true , mission_prefix_prev ) ;
 644: LD_ADDR_EXP 5
 648: PUSH
 649: LD_STRING Frank
 651: PPUSH
 652: LD_INT 1
 654: PPUSH
 655: LD_EXP 23
 659: PPUSH
 660: CALL 25876 0 3
 664: ST_TO_ADDR
// PlaceUnitXYR ( Frank , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 665: LD_EXP 5
 669: PPUSH
 670: LD_VAR 0 3
 674: PUSH
 675: LD_INT 1
 677: ARRAY
 678: PPUSH
 679: CALL_OW 250
 683: PPUSH
 684: LD_VAR 0 3
 688: PUSH
 689: LD_INT 1
 691: ARRAY
 692: PPUSH
 693: CALL_OW 251
 697: PPUSH
 698: LD_INT 5
 700: PPUSH
 701: LD_INT 0
 703: PPUSH
 704: CALL_OW 50
// SetClass ( Frank , 1 ) ;
 708: LD_EXP 5
 712: PPUSH
 713: LD_INT 1
 715: PPUSH
 716: CALL_OW 336
// end ; if LoadVariable ( LisaInDelta , 0 ) = 1 then
 720: LD_STRING LisaInDelta
 722: PPUSH
 723: LD_INT 0
 725: PPUSH
 726: CALL_OW 30
 730: PUSH
 731: LD_INT 1
 733: EQUAL
 734: IFFALSE 812
// begin Lisa := PrepareUnit ( Lisa , true , mission_prefix_prev ) ;
 736: LD_ADDR_EXP 4
 740: PUSH
 741: LD_STRING Lisa
 743: PPUSH
 744: LD_INT 1
 746: PPUSH
 747: LD_EXP 23
 751: PPUSH
 752: CALL 25876 0 3
 756: ST_TO_ADDR
// PlaceUnitXYR ( Lisa , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 757: LD_EXP 4
 761: PPUSH
 762: LD_VAR 0 3
 766: PUSH
 767: LD_INT 1
 769: ARRAY
 770: PPUSH
 771: CALL_OW 250
 775: PPUSH
 776: LD_VAR 0 3
 780: PUSH
 781: LD_INT 1
 783: ARRAY
 784: PPUSH
 785: CALL_OW 251
 789: PPUSH
 790: LD_INT 5
 792: PPUSH
 793: LD_INT 0
 795: PPUSH
 796: CALL_OW 50
// SetClass ( Lisa , 1 ) ;
 800: LD_EXP 4
 804: PPUSH
 805: LD_INT 1
 807: PPUSH
 808: CALL_OW 336
// end ; if LoadVariable ( BobbyInDelta , 0 ) = 1 then
 812: LD_STRING BobbyInDelta
 814: PPUSH
 815: LD_INT 0
 817: PPUSH
 818: CALL_OW 30
 822: PUSH
 823: LD_INT 1
 825: EQUAL
 826: IFFALSE 904
// begin Bobby := PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 828: LD_ADDR_EXP 6
 832: PUSH
 833: LD_STRING Bobby
 835: PPUSH
 836: LD_INT 1
 838: PPUSH
 839: LD_EXP 23
 843: PPUSH
 844: CALL 25876 0 3
 848: ST_TO_ADDR
// PlaceUnitXYR ( Bobby , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 849: LD_EXP 6
 853: PPUSH
 854: LD_VAR 0 3
 858: PUSH
 859: LD_INT 1
 861: ARRAY
 862: PPUSH
 863: CALL_OW 250
 867: PPUSH
 868: LD_VAR 0 3
 872: PUSH
 873: LD_INT 1
 875: ARRAY
 876: PPUSH
 877: CALL_OW 251
 881: PPUSH
 882: LD_INT 5
 884: PPUSH
 885: LD_INT 0
 887: PPUSH
 888: CALL_OW 50
// SetClass ( Bobby , 1 ) ;
 892: LD_EXP 6
 896: PPUSH
 897: LD_INT 1
 899: PPUSH
 900: CALL_OW 336
// end ; if LoadVariable ( CyrusInDelta , 0 ) = 1 then
 904: LD_STRING CyrusInDelta
 906: PPUSH
 907: LD_INT 0
 909: PPUSH
 910: CALL_OW 30
 914: PUSH
 915: LD_INT 1
 917: EQUAL
 918: IFFALSE 996
// begin Cyrus := PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
 920: LD_ADDR_EXP 7
 924: PUSH
 925: LD_STRING Cyrus
 927: PPUSH
 928: LD_INT 1
 930: PPUSH
 931: LD_EXP 23
 935: PPUSH
 936: CALL 25876 0 3
 940: ST_TO_ADDR
// PlaceUnitXYR ( Cyrus , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 941: LD_EXP 7
 945: PPUSH
 946: LD_VAR 0 3
 950: PUSH
 951: LD_INT 1
 953: ARRAY
 954: PPUSH
 955: CALL_OW 250
 959: PPUSH
 960: LD_VAR 0 3
 964: PUSH
 965: LD_INT 1
 967: ARRAY
 968: PPUSH
 969: CALL_OW 251
 973: PPUSH
 974: LD_INT 5
 976: PPUSH
 977: LD_INT 0
 979: PPUSH
 980: CALL_OW 50
// SetClass ( Cyrus , 1 ) ;
 984: LD_EXP 7
 988: PPUSH
 989: LD_INT 1
 991: PPUSH
 992: CALL_OW 336
// end ; if LoadVariable ( DonaldsonInDelta , 0 ) = 1 then
 996: LD_STRING DonaldsonInDelta
 998: PPUSH
 999: LD_INT 0
1001: PPUSH
1002: CALL_OW 30
1006: PUSH
1007: LD_INT 1
1009: EQUAL
1010: IFFALSE 1088
// begin Donaldson := PrepareUnit ( Donaldson , true , mission_prefix_prev ) ;
1012: LD_ADDR_EXP 9
1016: PUSH
1017: LD_STRING Donaldson
1019: PPUSH
1020: LD_INT 1
1022: PPUSH
1023: LD_EXP 23
1027: PPUSH
1028: CALL 25876 0 3
1032: ST_TO_ADDR
// PlaceUnitXYR ( Donaldson , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1033: LD_EXP 9
1037: PPUSH
1038: LD_VAR 0 3
1042: PUSH
1043: LD_INT 1
1045: ARRAY
1046: PPUSH
1047: CALL_OW 250
1051: PPUSH
1052: LD_VAR 0 3
1056: PUSH
1057: LD_INT 1
1059: ARRAY
1060: PPUSH
1061: CALL_OW 251
1065: PPUSH
1066: LD_INT 5
1068: PPUSH
1069: LD_INT 0
1071: PPUSH
1072: CALL_OW 50
// SetClass ( Donaldson , 1 ) ;
1076: LD_EXP 9
1080: PPUSH
1081: LD_INT 1
1083: PPUSH
1084: CALL_OW 336
// end ; if LoadVariable ( BrownInDelta , 0 ) = 1 then
1088: LD_STRING BrownInDelta
1090: PPUSH
1091: LD_INT 0
1093: PPUSH
1094: CALL_OW 30
1098: PUSH
1099: LD_INT 1
1101: EQUAL
1102: IFFALSE 1180
// begin Brown := PrepareUnit ( Brown , true , mission_prefix_prev ) ;
1104: LD_ADDR_EXP 8
1108: PUSH
1109: LD_STRING Brown
1111: PPUSH
1112: LD_INT 1
1114: PPUSH
1115: LD_EXP 23
1119: PPUSH
1120: CALL 25876 0 3
1124: ST_TO_ADDR
// PlaceUnitXYR ( Brown , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1125: LD_EXP 8
1129: PPUSH
1130: LD_VAR 0 3
1134: PUSH
1135: LD_INT 1
1137: ARRAY
1138: PPUSH
1139: CALL_OW 250
1143: PPUSH
1144: LD_VAR 0 3
1148: PUSH
1149: LD_INT 1
1151: ARRAY
1152: PPUSH
1153: CALL_OW 251
1157: PPUSH
1158: LD_INT 5
1160: PPUSH
1161: LD_INT 0
1163: PPUSH
1164: CALL_OW 50
// SetClass ( Brown , 2 ) ;
1168: LD_EXP 8
1172: PPUSH
1173: LD_INT 2
1175: PPUSH
1176: CALL_OW 336
// end ; others := CreateCharacterSet ( othersInDelta ) ;
1180: LD_ADDR_EXP 10
1184: PUSH
1185: LD_STRING othersInDelta
1187: PPUSH
1188: CALL_OW 31
1192: ST_TO_ADDR
// for i in others do
1193: LD_ADDR_VAR 0 2
1197: PUSH
1198: LD_EXP 10
1202: PUSH
1203: FOR_IN
1204: IFFALSE 1251
// PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1206: LD_VAR 0 2
1210: PPUSH
1211: LD_VAR 0 3
1215: PUSH
1216: LD_INT 1
1218: ARRAY
1219: PPUSH
1220: CALL_OW 250
1224: PPUSH
1225: LD_VAR 0 3
1229: PUSH
1230: LD_INT 1
1232: ARRAY
1233: PPUSH
1234: CALL_OW 251
1238: PPUSH
1239: LD_INT 35
1241: PPUSH
1242: LD_INT 0
1244: PPUSH
1245: CALL_OW 50
1249: GO 1203
1251: POP
1252: POP
// apemans := CreateCharacterSet ( apeInDelta ) ;
1253: LD_ADDR_EXP 12
1257: PUSH
1258: LD_STRING apeInDelta
1260: PPUSH
1261: CALL_OW 31
1265: ST_TO_ADDR
// uc_nation := 0 ;
1266: LD_ADDR_OWVAR 21
1270: PUSH
1271: LD_INT 0
1273: ST_TO_ADDR
// if apemans > 5 then
1274: LD_EXP 12
1278: PUSH
1279: LD_INT 5
1281: GREATER
1282: IFFALSE 1377
// begin for i := 1 to 5 do
1284: LD_ADDR_VAR 0 2
1288: PUSH
1289: DOUBLE
1290: LD_INT 1
1292: DEC
1293: ST_TO_ADDR
1294: LD_INT 5
1296: PUSH
1297: FOR_TO
1298: IFFALSE 1373
// begin PlaceUnitXYR ( apemans [ i ] , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1300: LD_EXP 12
1304: PUSH
1305: LD_VAR 0 2
1309: ARRAY
1310: PPUSH
1311: LD_VAR 0 3
1315: PUSH
1316: LD_INT 1
1318: ARRAY
1319: PPUSH
1320: CALL_OW 250
1324: PPUSH
1325: LD_VAR 0 3
1329: PUSH
1330: LD_INT 1
1332: ARRAY
1333: PPUSH
1334: CALL_OW 251
1338: PPUSH
1339: LD_INT 50
1341: PPUSH
1342: LD_INT 0
1344: PPUSH
1345: CALL_OW 50
// yourApemans := yourApemans ^ apemans [ i ] ;
1349: LD_ADDR_EXP 13
1353: PUSH
1354: LD_EXP 13
1358: PUSH
1359: LD_EXP 12
1363: PUSH
1364: LD_VAR 0 2
1368: ARRAY
1369: ADD
1370: ST_TO_ADDR
// end ;
1371: GO 1297
1373: POP
1374: POP
// end else
1375: GO 1453
// begin for i in apemans do
1377: LD_ADDR_VAR 0 2
1381: PUSH
1382: LD_EXP 12
1386: PUSH
1387: FOR_IN
1388: IFFALSE 1451
// begin PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1390: LD_VAR 0 2
1394: PPUSH
1395: LD_VAR 0 3
1399: PUSH
1400: LD_INT 1
1402: ARRAY
1403: PPUSH
1404: CALL_OW 250
1408: PPUSH
1409: LD_VAR 0 3
1413: PUSH
1414: LD_INT 1
1416: ARRAY
1417: PPUSH
1418: CALL_OW 251
1422: PPUSH
1423: LD_INT 50
1425: PPUSH
1426: LD_INT 0
1428: PPUSH
1429: CALL_OW 50
// yourApemans := yourApemans ^ i ;
1433: LD_ADDR_EXP 13
1437: PUSH
1438: LD_EXP 13
1442: PUSH
1443: LD_VAR 0 2
1447: ADD
1448: ST_TO_ADDR
// end ;
1449: GO 1387
1451: POP
1452: POP
// end ; end ;
1453: LD_VAR 0 1
1457: RET
// export function LoadVehicles ; var i , veh , tmp , vehicles ; begin
1458: LD_INT 0
1460: PPUSH
1461: PPUSH
1462: PPUSH
1463: PPUSH
1464: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1465: LD_ADDR_VAR 0 4
1469: PUSH
1470: LD_INT 22
1472: PUSH
1473: LD_INT 1
1475: PUSH
1476: EMPTY
1477: LIST
1478: LIST
1479: PUSH
1480: LD_INT 21
1482: PUSH
1483: LD_INT 3
1485: PUSH
1486: EMPTY
1487: LIST
1488: LIST
1489: PUSH
1490: LD_INT 30
1492: PUSH
1493: LD_INT 0
1495: PUSH
1496: EMPTY
1497: LIST
1498: LIST
1499: PUSH
1500: EMPTY
1501: LIST
1502: LIST
1503: LIST
1504: PPUSH
1505: CALL_OW 69
1509: ST_TO_ADDR
// uc_side = 1 ;
1510: LD_ADDR_OWVAR 20
1514: PUSH
1515: LD_INT 1
1517: ST_TO_ADDR
// vehicles := LoadVariable ( vehiclesInDelta , [ ] ) ;
1518: LD_ADDR_VAR 0 5
1522: PUSH
1523: LD_STRING vehiclesInDelta
1525: PPUSH
1526: EMPTY
1527: PPUSH
1528: CALL_OW 30
1532: ST_TO_ADDR
// for i = 1 to vehicles do
1533: LD_ADDR_VAR 0 2
1537: PUSH
1538: DOUBLE
1539: LD_INT 1
1541: DEC
1542: ST_TO_ADDR
1543: LD_VAR 0 5
1547: PUSH
1548: FOR_TO
1549: IFFALSE 1752
// begin if vehicles [ i + 4 ] = 11 or vehicles [ i ] = 3 then
1551: LD_VAR 0 5
1555: PUSH
1556: LD_VAR 0 2
1560: PUSH
1561: LD_INT 4
1563: PLUS
1564: ARRAY
1565: PUSH
1566: LD_INT 11
1568: EQUAL
1569: PUSH
1570: LD_VAR 0 5
1574: PUSH
1575: LD_VAR 0 2
1579: ARRAY
1580: PUSH
1581: LD_INT 3
1583: EQUAL
1584: OR
1585: IFFALSE 1736
// begin uc_nation := vehicles [ i ] ;
1587: LD_ADDR_OWVAR 21
1591: PUSH
1592: LD_VAR 0 5
1596: PUSH
1597: LD_VAR 0 2
1601: ARRAY
1602: ST_TO_ADDR
// vc_chassis := vehicles [ i + 1 ] ;
1603: LD_ADDR_OWVAR 37
1607: PUSH
1608: LD_VAR 0 5
1612: PUSH
1613: LD_VAR 0 2
1617: PUSH
1618: LD_INT 1
1620: PLUS
1621: ARRAY
1622: ST_TO_ADDR
// vc_engine := vehicles [ i + 2 ] ;
1623: LD_ADDR_OWVAR 39
1627: PUSH
1628: LD_VAR 0 5
1632: PUSH
1633: LD_VAR 0 2
1637: PUSH
1638: LD_INT 2
1640: PLUS
1641: ARRAY
1642: ST_TO_ADDR
// vc_control := vehicles [ i + 3 ] ;
1643: LD_ADDR_OWVAR 38
1647: PUSH
1648: LD_VAR 0 5
1652: PUSH
1653: LD_VAR 0 2
1657: PUSH
1658: LD_INT 3
1660: PLUS
1661: ARRAY
1662: ST_TO_ADDR
// vc_weapon := vehicles [ i + 4 ] ;
1663: LD_ADDR_OWVAR 40
1667: PUSH
1668: LD_VAR 0 5
1672: PUSH
1673: LD_VAR 0 2
1677: PUSH
1678: LD_INT 4
1680: PLUS
1681: ARRAY
1682: ST_TO_ADDR
// veh = CreateVehicle ;
1683: LD_ADDR_VAR 0 3
1687: PUSH
1688: CALL_OW 45
1692: ST_TO_ADDR
// PlaceUnitXYR ( veh , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 40 , false ) ;
1693: LD_VAR 0 3
1697: PPUSH
1698: LD_VAR 0 4
1702: PUSH
1703: LD_INT 1
1705: ARRAY
1706: PPUSH
1707: CALL_OW 250
1711: PPUSH
1712: LD_VAR 0 4
1716: PUSH
1717: LD_INT 1
1719: ARRAY
1720: PPUSH
1721: CALL_OW 251
1725: PPUSH
1726: LD_INT 40
1728: PPUSH
1729: LD_INT 0
1731: PPUSH
1732: CALL_OW 50
// end ; i := i + 4 ;
1736: LD_ADDR_VAR 0 2
1740: PUSH
1741: LD_VAR 0 2
1745: PUSH
1746: LD_INT 4
1748: PLUS
1749: ST_TO_ADDR
// end ;
1750: GO 1548
1752: POP
1753: POP
// end ;
1754: LD_VAR 0 1
1758: RET
// export function PrepareRandoms ; var i , un , tmp , filter ; begin
1759: LD_INT 0
1761: PPUSH
1762: PPUSH
1763: PPUSH
1764: PPUSH
1765: PPUSH
// uc_side := 1 ;
1766: LD_ADDR_OWVAR 20
1770: PUSH
1771: LD_INT 1
1773: ST_TO_ADDR
// uc_nation := 1 ;
1774: LD_ADDR_OWVAR 21
1778: PUSH
1779: LD_INT 1
1781: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1782: LD_ADDR_VAR 0 4
1786: PUSH
1787: LD_INT 22
1789: PUSH
1790: LD_INT 1
1792: PUSH
1793: EMPTY
1794: LIST
1795: LIST
1796: PUSH
1797: LD_INT 21
1799: PUSH
1800: LD_INT 3
1802: PUSH
1803: EMPTY
1804: LIST
1805: LIST
1806: PUSH
1807: LD_INT 30
1809: PUSH
1810: LD_INT 0
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: PUSH
1817: EMPTY
1818: LIST
1819: LIST
1820: LIST
1821: PPUSH
1822: CALL_OW 69
1826: ST_TO_ADDR
// deltaDoctor := ( FilterAllunits ( [ [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] ) ;
1827: LD_ADDR_EXP 15
1831: PUSH
1832: LD_INT 22
1834: PUSH
1835: LD_INT 1
1837: PUSH
1838: EMPTY
1839: LIST
1840: LIST
1841: PUSH
1842: LD_INT 25
1844: PUSH
1845: LD_INT 4
1847: PUSH
1848: EMPTY
1849: LIST
1850: LIST
1851: PUSH
1852: LD_INT 26
1854: PUSH
1855: LD_INT 1
1857: PUSH
1858: EMPTY
1859: LIST
1860: LIST
1861: PUSH
1862: EMPTY
1863: LIST
1864: LIST
1865: LIST
1866: PUSH
1867: EMPTY
1868: LIST
1869: PPUSH
1870: CALL_OW 69
1874: PUSH
1875: LD_EXP 1
1879: PUSH
1880: LD_EXP 7
1884: PUSH
1885: LD_EXP 6
1889: PUSH
1890: LD_EXP 5
1894: PUSH
1895: LD_EXP 2
1899: PUSH
1900: LD_EXP 3
1904: PUSH
1905: LD_EXP 8
1909: PUSH
1910: EMPTY
1911: LIST
1912: LIST
1913: LIST
1914: LIST
1915: LIST
1916: LIST
1917: LIST
1918: DIFF
1919: ST_TO_ADDR
// if not deltaDoctor then
1920: LD_EXP 15
1924: NOT
1925: IFFALSE 2076
// begin filter := FilterAllunits ( [ [ [ f_side , 1 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] ;
1927: LD_ADDR_VAR 0 5
1931: PUSH
1932: LD_INT 22
1934: PUSH
1935: LD_INT 1
1937: PUSH
1938: EMPTY
1939: LIST
1940: LIST
1941: PUSH
1942: LD_INT 26
1944: PUSH
1945: LD_INT 1
1947: PUSH
1948: EMPTY
1949: LIST
1950: LIST
1951: PUSH
1952: EMPTY
1953: LIST
1954: LIST
1955: PUSH
1956: EMPTY
1957: LIST
1958: PPUSH
1959: CALL_OW 69
1963: PUSH
1964: LD_EXP 1
1968: PUSH
1969: LD_EXP 7
1973: PUSH
1974: LD_EXP 6
1978: PUSH
1979: LD_EXP 5
1983: PUSH
1984: LD_EXP 2
1988: PUSH
1989: LD_EXP 3
1993: PUSH
1994: LD_EXP 8
1998: PUSH
1999: EMPTY
2000: LIST
2001: LIST
2002: LIST
2003: LIST
2004: LIST
2005: LIST
2006: LIST
2007: DIFF
2008: ST_TO_ADDR
// if filter then
2009: LD_VAR 0 5
2013: IFFALSE 2074
// for i in filter do
2015: LD_ADDR_VAR 0 2
2019: PUSH
2020: LD_VAR 0 5
2024: PUSH
2025: FOR_IN
2026: IFFALSE 2072
// if GetSkill ( i , 4 ) >= 4 then
2028: LD_VAR 0 2
2032: PPUSH
2033: LD_INT 4
2035: PPUSH
2036: CALL_OW 259
2040: PUSH
2041: LD_INT 4
2043: GREATEREQUAL
2044: IFFALSE 2070
// begin deltaDoctor := i ;
2046: LD_ADDR_EXP 15
2050: PUSH
2051: LD_VAR 0 2
2055: ST_TO_ADDR
// SetClass ( deltaDoctor , 4 ) ;
2056: LD_EXP 15
2060: PPUSH
2061: LD_INT 4
2063: PPUSH
2064: CALL_OW 336
// break ;
2068: GO 2072
// end ;
2070: GO 2025
2072: POP
2073: POP
// end else
2074: GO 2090
// deltaDoctor := deltaDoctor [ 1 ] ;
2076: LD_ADDR_EXP 15
2080: PUSH
2081: LD_EXP 15
2085: PUSH
2086: LD_INT 1
2088: ARRAY
2089: ST_TO_ADDR
// for i := 1 to 7 do
2090: LD_ADDR_VAR 0 2
2094: PUSH
2095: DOUBLE
2096: LD_INT 1
2098: DEC
2099: ST_TO_ADDR
2100: LD_INT 7
2102: PUSH
2103: FOR_TO
2104: IFFALSE 2241
// begin hc_gallery :=  ;
2106: LD_ADDR_OWVAR 33
2110: PUSH
2111: LD_STRING 
2113: ST_TO_ADDR
// hc_name :=  ;
2114: LD_ADDR_OWVAR 26
2118: PUSH
2119: LD_STRING 
2121: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 3 , 5 ) ) ;
2122: LD_INT 0
2124: PPUSH
2125: LD_INT 1
2127: PUSH
2128: LD_INT 2
2130: PUSH
2131: LD_INT 3
2133: PUSH
2134: LD_INT 4
2136: PUSH
2137: EMPTY
2138: LIST
2139: LIST
2140: LIST
2141: LIST
2142: PUSH
2143: LD_INT 1
2145: PPUSH
2146: LD_INT 4
2148: PPUSH
2149: CALL_OW 12
2153: ARRAY
2154: PPUSH
2155: LD_INT 3
2157: PPUSH
2158: LD_INT 5
2160: PPUSH
2161: CALL_OW 12
2165: PPUSH
2166: CALL_OW 380
// un := CreateHuman ;
2170: LD_ADDR_VAR 0 3
2174: PUSH
2175: CALL_OW 44
2179: ST_TO_ADDR
// randomsDelta := randomsDelta ^ un ;
2180: LD_ADDR_EXP 11
2184: PUSH
2185: LD_EXP 11
2189: PUSH
2190: LD_VAR 0 3
2194: ADD
2195: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
2196: LD_VAR 0 3
2200: PPUSH
2201: LD_VAR 0 4
2205: PUSH
2206: LD_INT 1
2208: ARRAY
2209: PPUSH
2210: CALL_OW 250
2214: PPUSH
2215: LD_VAR 0 4
2219: PUSH
2220: LD_INT 1
2222: ARRAY
2223: PPUSH
2224: CALL_OW 251
2228: PPUSH
2229: LD_INT 15
2231: PPUSH
2232: LD_INT 0
2234: PPUSH
2235: CALL_OW 50
// end ;
2239: GO 2103
2241: POP
2242: POP
// if deltaDoctor then
2243: LD_EXP 15
2247: IFFALSE 2251
// exit ;
2249: GO 2341
// hc_gallery := Dawkins ;
2251: LD_ADDR_OWVAR 33
2255: PUSH
2256: LD_STRING Dawkins
2258: ST_TO_ADDR
// hc_face_number := 1 ;
2259: LD_ADDR_OWVAR 34
2263: PUSH
2264: LD_INT 1
2266: ST_TO_ADDR
// hc_name := Dr. Adam Charles Dawkins ;
2267: LD_ADDR_OWVAR 26
2271: PUSH
2272: LD_STRING Dr. Adam Charles Dawkins
2274: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 5 ) ;
2275: LD_INT 1
2277: PPUSH
2278: LD_INT 4
2280: PPUSH
2281: LD_INT 5
2283: PPUSH
2284: CALL_OW 380
// deltaDoctor := CreateHuman ;
2288: LD_ADDR_EXP 15
2292: PUSH
2293: CALL_OW 44
2297: ST_TO_ADDR
// PlaceUnitXYR ( deltaDoctor , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
2298: LD_EXP 15
2302: PPUSH
2303: LD_VAR 0 4
2307: PUSH
2308: LD_INT 1
2310: ARRAY
2311: PPUSH
2312: CALL_OW 250
2316: PPUSH
2317: LD_VAR 0 4
2321: PUSH
2322: LD_INT 1
2324: ARRAY
2325: PPUSH
2326: CALL_OW 251
2330: PPUSH
2331: LD_INT 5
2333: PPUSH
2334: LD_INT 0
2336: PPUSH
2337: CALL_OW 50
// end ; end_of_file
2341: LD_VAR 0 1
2345: RET
// export function PrepareDeltaBase ; var i , j , building , buildings , lab , tmp ; begin
2346: LD_INT 0
2348: PPUSH
2349: PPUSH
2350: PPUSH
2351: PPUSH
2352: PPUSH
2353: PPUSH
2354: PPUSH
// buildings := LoadVariable ( buildingsInDelta , [ ] ) ;
2355: LD_ADDR_VAR 0 5
2359: PUSH
2360: LD_STRING buildingsInDelta
2362: PPUSH
2363: EMPTY
2364: PPUSH
2365: CALL_OW 30
2369: ST_TO_ADDR
// SetResourceVisibility ( 68 , 40 , 1 ) ;
2370: LD_INT 68
2372: PPUSH
2373: LD_INT 40
2375: PPUSH
2376: LD_INT 1
2378: PPUSH
2379: CALL_OW 441
// uc_side := 1 ;
2383: LD_ADDR_OWVAR 20
2387: PUSH
2388: LD_INT 1
2390: ST_TO_ADDR
// uc_nation := 1 ;
2391: LD_ADDR_OWVAR 21
2395: PUSH
2396: LD_INT 1
2398: ST_TO_ADDR
// for i := 1 to buildings do
2399: LD_ADDR_VAR 0 2
2403: PUSH
2404: DOUBLE
2405: LD_INT 1
2407: DEC
2408: ST_TO_ADDR
2409: LD_VAR 0 5
2413: PUSH
2414: FOR_TO
2415: IFFALSE 2723
// begin bc_type := buildings [ i ] [ 1 ] ;
2417: LD_ADDR_OWVAR 42
2421: PUSH
2422: LD_VAR 0 5
2426: PUSH
2427: LD_VAR 0 2
2431: ARRAY
2432: PUSH
2433: LD_INT 1
2435: ARRAY
2436: ST_TO_ADDR
// bc_level := buildings [ i ] [ 2 ] ;
2437: LD_ADDR_OWVAR 43
2441: PUSH
2442: LD_VAR 0 5
2446: PUSH
2447: LD_VAR 0 2
2451: ARRAY
2452: PUSH
2453: LD_INT 2
2455: ARRAY
2456: ST_TO_ADDR
// if bc_type = b_lab then
2457: LD_OWVAR 42
2461: PUSH
2462: LD_INT 6
2464: EQUAL
2465: IFFALSE 2483
// begin bc_kind1 := b_lab_basic ;
2467: LD_ADDR_OWVAR 44
2471: PUSH
2472: LD_INT 9
2474: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2475: LD_ADDR_OWVAR 45
2479: PUSH
2480: LD_INT 9
2482: ST_TO_ADDR
// end ; if bc_type = b_lab_half or bc_type = b_lab_full then
2483: LD_OWVAR 42
2487: PUSH
2488: LD_INT 7
2490: EQUAL
2491: PUSH
2492: LD_OWVAR 42
2496: PUSH
2497: LD_INT 8
2499: EQUAL
2500: OR
2501: IFFALSE 2611
// begin if buildings [ i ] [ 6 ] then
2503: LD_VAR 0 5
2507: PUSH
2508: LD_VAR 0 2
2512: ARRAY
2513: PUSH
2514: LD_INT 6
2516: ARRAY
2517: IFFALSE 2587
// begin bc_kind1 := buildings [ i ] [ 6 ] ;
2519: LD_ADDR_OWVAR 44
2523: PUSH
2524: LD_VAR 0 5
2528: PUSH
2529: LD_VAR 0 2
2533: ARRAY
2534: PUSH
2535: LD_INT 6
2537: ARRAY
2538: ST_TO_ADDR
// if buildings [ i ] [ 7 ] then
2539: LD_VAR 0 5
2543: PUSH
2544: LD_VAR 0 2
2548: ARRAY
2549: PUSH
2550: LD_INT 7
2552: ARRAY
2553: IFFALSE 2577
// bc_kind1 := buildings [ i ] [ 7 ] else
2555: LD_ADDR_OWVAR 44
2559: PUSH
2560: LD_VAR 0 5
2564: PUSH
2565: LD_VAR 0 2
2569: ARRAY
2570: PUSH
2571: LD_INT 7
2573: ARRAY
2574: ST_TO_ADDR
2575: GO 2585
// bc_kind2 := b_lab_basic ;
2577: LD_ADDR_OWVAR 45
2581: PUSH
2582: LD_INT 9
2584: ST_TO_ADDR
// end else
2585: GO 2611
// begin bc_type := b_lab ;
2587: LD_ADDR_OWVAR 42
2591: PUSH
2592: LD_INT 6
2594: ST_TO_ADDR
// bc_kind1 := b_lab_basic ;
2595: LD_ADDR_OWVAR 44
2599: PUSH
2600: LD_INT 9
2602: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2603: LD_ADDR_OWVAR 45
2607: PUSH
2608: LD_INT 9
2610: ST_TO_ADDR
// end ; end ; building := CreateAndPlaceBuildingXYD ( buildings [ i ] [ 3 ] , buildings [ i ] [ 4 ] , buildings [ i ] [ 5 ] ) ;
2611: LD_ADDR_VAR 0 4
2615: PUSH
2616: LD_VAR 0 5
2620: PUSH
2621: LD_VAR 0 2
2625: ARRAY
2626: PUSH
2627: LD_INT 3
2629: ARRAY
2630: PPUSH
2631: LD_VAR 0 5
2635: PUSH
2636: LD_VAR 0 2
2640: ARRAY
2641: PUSH
2642: LD_INT 4
2644: ARRAY
2645: PPUSH
2646: LD_VAR 0 5
2650: PUSH
2651: LD_VAR 0 2
2655: ARRAY
2656: PUSH
2657: LD_INT 5
2659: ARRAY
2660: PPUSH
2661: CALL_OW 47
2665: ST_TO_ADDR
// if GetBType ( building ) = b_bunker and buildings [ i ] [ 8 ] then
2666: LD_VAR 0 4
2670: PPUSH
2671: CALL_OW 266
2675: PUSH
2676: LD_INT 32
2678: EQUAL
2679: PUSH
2680: LD_VAR 0 5
2684: PUSH
2685: LD_VAR 0 2
2689: ARRAY
2690: PUSH
2691: LD_INT 8
2693: ARRAY
2694: AND
2695: IFFALSE 2721
// PlaceWeaponTurret ( building , buildings [ i ] [ 8 ] ) ;
2697: LD_VAR 0 4
2701: PPUSH
2702: LD_VAR 0 5
2706: PUSH
2707: LD_VAR 0 2
2711: ARRAY
2712: PUSH
2713: LD_INT 8
2715: ARRAY
2716: PPUSH
2717: CALL_OW 431
// end ;
2721: GO 2414
2723: POP
2724: POP
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
2725: LD_ADDR_VAR 0 6
2729: PUSH
2730: LD_INT 22
2732: PUSH
2733: LD_INT 1
2735: PUSH
2736: EMPTY
2737: LIST
2738: LIST
2739: PUSH
2740: LD_INT 2
2742: PUSH
2743: LD_INT 30
2745: PUSH
2746: LD_INT 6
2748: PUSH
2749: EMPTY
2750: LIST
2751: LIST
2752: PUSH
2753: LD_INT 30
2755: PUSH
2756: LD_INT 7
2758: PUSH
2759: EMPTY
2760: LIST
2761: LIST
2762: PUSH
2763: LD_INT 30
2765: PUSH
2766: LD_INT 8
2768: PUSH
2769: EMPTY
2770: LIST
2771: LIST
2772: PUSH
2773: EMPTY
2774: LIST
2775: LIST
2776: LIST
2777: LIST
2778: PUSH
2779: EMPTY
2780: LIST
2781: LIST
2782: PPUSH
2783: CALL_OW 69
2787: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) ;
2788: LD_ADDR_VAR 0 7
2792: PUSH
2793: LD_INT 22
2795: PUSH
2796: LD_INT 1
2798: PUSH
2799: EMPTY
2800: LIST
2801: LIST
2802: PUSH
2803: LD_INT 30
2805: PUSH
2806: LD_INT 0
2808: PUSH
2809: EMPTY
2810: LIST
2811: LIST
2812: PUSH
2813: EMPTY
2814: LIST
2815: LIST
2816: PPUSH
2817: CALL_OW 69
2821: ST_TO_ADDR
// if lab and tmp then
2822: LD_VAR 0 6
2826: PUSH
2827: LD_VAR 0 7
2831: AND
2832: IFFALSE 2842
// baseCorrect := 1 ;
2834: LD_ADDR_EXP 18
2838: PUSH
2839: LD_INT 1
2841: ST_TO_ADDR
// if baseCorrect = 0 then
2842: LD_EXP 18
2846: PUSH
2847: LD_INT 0
2849: EQUAL
2850: IFFALSE 3223
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
2852: LD_ADDR_VAR 0 2
2856: PUSH
2857: LD_INT 22
2859: PUSH
2860: LD_INT 1
2862: PUSH
2863: EMPTY
2864: LIST
2865: LIST
2866: PUSH
2867: LD_INT 21
2869: PUSH
2870: LD_INT 3
2872: PUSH
2873: EMPTY
2874: LIST
2875: LIST
2876: PUSH
2877: EMPTY
2878: LIST
2879: LIST
2880: PPUSH
2881: CALL_OW 69
2885: PUSH
2886: FOR_IN
2887: IFFALSE 2900
// RemoveUnit ( i ) ;
2889: LD_VAR 0 2
2893: PPUSH
2894: CALL_OW 64
2898: GO 2886
2900: POP
2901: POP
// uc_nation := 1 ;
2902: LD_ADDR_OWVAR 21
2906: PUSH
2907: LD_INT 1
2909: ST_TO_ADDR
// uc_side := 1 ;
2910: LD_ADDR_OWVAR 20
2914: PUSH
2915: LD_INT 1
2917: ST_TO_ADDR
// bc_level := 5 ;
2918: LD_ADDR_OWVAR 43
2922: PUSH
2923: LD_INT 5
2925: ST_TO_ADDR
// bc_type := b_depot ;
2926: LD_ADDR_OWVAR 42
2930: PUSH
2931: LD_INT 0
2933: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 50 , 22 , 0 ) ;
2934: LD_INT 50
2936: PPUSH
2937: LD_INT 22
2939: PPUSH
2940: LD_INT 0
2942: PPUSH
2943: CALL_OW 47
// bc_type = b_bunker ;
2947: LD_ADDR_OWVAR 42
2951: PUSH
2952: LD_INT 32
2954: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( 68 , 24 , 4 ) ;
2955: LD_ADDR_VAR 0 4
2959: PUSH
2960: LD_INT 68
2962: PPUSH
2963: LD_INT 24
2965: PPUSH
2966: LD_INT 4
2968: PPUSH
2969: CALL_OW 47
2973: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ rand ( 1 , 2 ) ] ) ;
2974: LD_VAR 0 4
2978: PPUSH
2979: LD_INT 4
2981: PUSH
2982: LD_INT 11
2984: PUSH
2985: EMPTY
2986: LIST
2987: LIST
2988: PUSH
2989: LD_INT 1
2991: PPUSH
2992: LD_INT 2
2994: PPUSH
2995: CALL_OW 12
2999: ARRAY
3000: PPUSH
3001: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 71 , 34 , 4 ) ;
3005: LD_ADDR_VAR 0 4
3009: PUSH
3010: LD_INT 71
3012: PPUSH
3013: LD_INT 34
3015: PPUSH
3016: LD_INT 4
3018: PPUSH
3019: CALL_OW 47
3023: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ rand ( 1 , 2 ) ] ) ;
3024: LD_VAR 0 4
3028: PPUSH
3029: LD_INT 4
3031: PUSH
3032: LD_INT 11
3034: PUSH
3035: EMPTY
3036: LIST
3037: LIST
3038: PUSH
3039: LD_INT 1
3041: PPUSH
3042: LD_INT 2
3044: PPUSH
3045: CALL_OW 12
3049: ARRAY
3050: PPUSH
3051: CALL_OW 431
// bc_type := b_breastwork ;
3055: LD_ADDR_OWVAR 42
3059: PUSH
3060: LD_INT 31
3062: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 51 , 7 , 3 ) ;
3063: LD_INT 51
3065: PPUSH
3066: LD_INT 7
3068: PPUSH
3069: LD_INT 3
3071: PPUSH
3072: CALL_OW 47
// bc_type := b_oil_mine ;
3076: LD_ADDR_OWVAR 42
3080: PUSH
3081: LD_INT 29
3083: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 68 , 40 , 1 ) ;
3084: LD_INT 68
3086: PPUSH
3087: LD_INT 40
3089: PPUSH
3090: LD_INT 1
3092: PPUSH
3093: CALL_OW 47
// bc_type := b_workshop ;
3097: LD_ADDR_OWVAR 42
3101: PUSH
3102: LD_INT 2
3104: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 20 , 2 ) ;
3105: LD_INT 38
3107: PPUSH
3108: LD_INT 20
3110: PPUSH
3111: LD_INT 2
3113: PPUSH
3114: CALL_OW 47
// bc_type := b_armoury ;
3118: LD_ADDR_OWVAR 42
3122: PUSH
3123: LD_INT 4
3125: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 20 , 2 ) ;
3126: LD_INT 38
3128: PPUSH
3129: LD_INT 20
3131: PPUSH
3132: LD_INT 2
3134: PPUSH
3135: CALL_OW 47
// bc_type := b_solar_power ;
3139: LD_ADDR_OWVAR 42
3143: PUSH
3144: LD_INT 27
3146: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 46 , 12 , 1 ) ;
3147: LD_INT 46
3149: PPUSH
3150: LD_INT 12
3152: PPUSH
3153: LD_INT 1
3155: PPUSH
3156: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 48 , 11 , 2 ) ;
3160: LD_INT 48
3162: PPUSH
3163: LD_INT 11
3165: PPUSH
3166: LD_INT 2
3168: PPUSH
3169: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 49 , 11 , 3 ) ;
3173: LD_INT 49
3175: PPUSH
3176: LD_INT 11
3178: PPUSH
3179: LD_INT 3
3181: PPUSH
3182: CALL_OW 47
// bc_type := b_lab_half ;
3186: LD_ADDR_OWVAR 42
3190: PUSH
3191: LD_INT 7
3193: ST_TO_ADDR
// bc_kind1 := b_lab_opto ;
3194: LD_ADDR_OWVAR 44
3198: PUSH
3199: LD_INT 15
3201: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
3202: LD_ADDR_OWVAR 45
3206: PUSH
3207: LD_INT 9
3209: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 42 , 15 , 2 ) ;
3210: LD_INT 42
3212: PPUSH
3213: LD_INT 15
3215: PPUSH
3216: LD_INT 2
3218: PPUSH
3219: CALL_OW 47
// end ; end ; end_of_file
3223: LD_VAR 0 1
3227: RET
// export function Action ; var i , j , tmp ; begin
3228: LD_INT 0
3230: PPUSH
3231: PPUSH
3232: PPUSH
3233: PPUSH
// InGameOn ;
3234: CALL_OW 8
// if lab then
3238: LD_EXP 20
3242: IFFALSE 3259
// CenterNowOnUnits ( lab [ 1 ] ) else
3244: LD_EXP 20
3248: PUSH
3249: LD_INT 1
3251: ARRAY
3252: PPUSH
3253: CALL_OW 87
3257: GO 3268
// CenterOnUnits ( JMM ) ;
3259: LD_EXP 1
3263: PPUSH
3264: CALL_OW 85
// if IsOK ( Denis ) then
3268: LD_EXP 3
3272: PPUSH
3273: CALL_OW 302
3277: IFFALSE 3305
// begin SetTech ( tech_radar , 1 , state_researched ) ;
3279: LD_INT 6
3281: PPUSH
3282: LD_INT 1
3284: PPUSH
3285: LD_INT 2
3287: PPUSH
3288: CALL_OW 322
// SetRestrict ( b_ext_radar , 1 , true ) ;
3292: LD_INT 20
3294: PPUSH
3295: LD_INT 1
3297: PPUSH
3298: LD_INT 1
3300: PPUSH
3301: CALL_OW 324
// end ; CenterNowOnUnits ( JMM ) ;
3305: LD_EXP 1
3309: PPUSH
3310: CALL_OW 87
// ComTurnUnit ( JMM , DeltaDoctor ) ;
3314: LD_EXP 1
3318: PPUSH
3319: LD_EXP 15
3323: PPUSH
3324: CALL_OW 119
// repeat wait ( 0 0$1 ) ;
3328: LD_INT 35
3330: PPUSH
3331: CALL_OW 67
// ComMoveUnit ( DeltaDoctor , JMM ) ;
3335: LD_EXP 15
3339: PPUSH
3340: LD_EXP 1
3344: PPUSH
3345: CALL_OW 112
// until GetDistUnits ( JMM , DeltaDoctor ) < 5 ;
3349: LD_EXP 1
3353: PPUSH
3354: LD_EXP 15
3358: PPUSH
3359: CALL_OW 296
3363: PUSH
3364: LD_INT 5
3366: LESS
3367: IFFALSE 3328
// ComTurnUnit ( DeltaDoctor , JMM ) ;
3369: LD_EXP 15
3373: PPUSH
3374: LD_EXP 1
3378: PPUSH
3379: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
3383: LD_EXP 1
3387: PPUSH
3388: LD_STRING D1-JMM-1
3390: PPUSH
3391: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-1 ) ;
3395: LD_EXP 15
3399: PPUSH
3400: LD_STRING D1-Sci-1
3402: PPUSH
3403: CALL_OW 88
// ComEnterUnit ( [ JMM , DeltaDoctor , Denis ] , lab [ 1 ] ) ;
3407: LD_EXP 1
3411: PUSH
3412: LD_EXP 15
3416: PUSH
3417: LD_EXP 3
3421: PUSH
3422: EMPTY
3423: LIST
3424: LIST
3425: LIST
3426: PPUSH
3427: LD_EXP 20
3431: PUSH
3432: LD_INT 1
3434: ARRAY
3435: PPUSH
3436: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
3440: LD_INT 35
3442: PPUSH
3443: CALL_OW 67
// until IsInUnit ( JMM ) and IsInUnit ( DeltaDoctor ) ;
3447: LD_EXP 1
3451: PPUSH
3452: CALL_OW 310
3456: PUSH
3457: LD_EXP 15
3461: PPUSH
3462: CALL_OW 310
3466: AND
3467: IFFALSE 3440
// CenterNowOnUnits ( lab [ 1 ] ) ;
3469: LD_EXP 20
3473: PUSH
3474: LD_INT 1
3476: ARRAY
3477: PPUSH
3478: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
3482: LD_EXP 1
3486: PPUSH
3487: LD_STRING D1-JMM-2
3489: PPUSH
3490: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-2 ) ;
3494: LD_EXP 15
3498: PPUSH
3499: LD_STRING D1-Sci-2
3501: PPUSH
3502: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
3506: LD_EXP 1
3510: PPUSH
3511: LD_STRING D1-JMM-3
3513: PPUSH
3514: CALL_OW 88
// if IsOK ( Denis ) then
3518: LD_EXP 3
3522: PPUSH
3523: CALL_OW 302
3527: IFFALSE 3543
// Say ( DeltaDoctor , D1-Sci-3 ) else
3529: LD_EXP 15
3533: PPUSH
3534: LD_STRING D1-Sci-3
3536: PPUSH
3537: CALL_OW 88
3541: GO 3555
// Say ( DeltaDoctor , D1-Sci-3a ) ;
3543: LD_EXP 15
3547: PPUSH
3548: LD_STRING D1-Sci-3a
3550: PPUSH
3551: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
3555: LD_EXP 1
3559: PPUSH
3560: LD_STRING D1-JMM-4
3562: PPUSH
3563: CALL_OW 88
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
3567: LD_ADDR_VAR 0 4
3571: PUSH
3572: LD_INT 22
3574: PUSH
3575: LD_INT 1
3577: PUSH
3578: EMPTY
3579: LIST
3580: LIST
3581: PUSH
3582: LD_INT 25
3584: PUSH
3585: LD_INT 4
3587: PUSH
3588: EMPTY
3589: LIST
3590: LIST
3591: PUSH
3592: LD_INT 3
3594: PUSH
3595: LD_INT 54
3597: PUSH
3598: EMPTY
3599: LIST
3600: PUSH
3601: EMPTY
3602: LIST
3603: LIST
3604: PUSH
3605: EMPTY
3606: LIST
3607: LIST
3608: LIST
3609: PPUSH
3610: CALL_OW 69
3614: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 0 ] ) do
3615: LD_ADDR_VAR 0 2
3619: PUSH
3620: LD_INT 22
3622: PUSH
3623: LD_INT 0
3625: PUSH
3626: EMPTY
3627: LIST
3628: LIST
3629: PPUSH
3630: CALL_OW 69
3634: PUSH
3635: FOR_IN
3636: IFFALSE 3686
// for j in tmp do
3638: LD_ADDR_VAR 0 3
3642: PUSH
3643: LD_VAR 0 4
3647: PUSH
3648: FOR_IN
3649: IFFALSE 3682
// AddComTameXY ( j , GetX ( i ) , GetY ( i ) ) ;
3651: LD_VAR 0 3
3655: PPUSH
3656: LD_VAR 0 2
3660: PPUSH
3661: CALL_OW 250
3665: PPUSH
3666: LD_VAR 0 2
3670: PPUSH
3671: CALL_OW 251
3675: PPUSH
3676: CALL_OW 191
3680: GO 3648
3682: POP
3683: POP
3684: GO 3635
3686: POP
3687: POP
// Say ( DeltaDoctor , D1-Sci-4 ) ;
3688: LD_EXP 15
3692: PPUSH
3693: LD_STRING D1-Sci-4
3695: PPUSH
3696: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
3700: LD_EXP 1
3704: PPUSH
3705: LD_STRING D1-JMM-5
3707: PPUSH
3708: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-5 ) ;
3712: LD_EXP 15
3716: PPUSH
3717: LD_STRING D1-Sci-5
3719: PPUSH
3720: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
3724: LD_EXP 1
3728: PPUSH
3729: LD_STRING D1-JMM-6
3731: PPUSH
3732: CALL_OW 88
// SayRadio ( Harisson , D1-Har-6 ) ;
3736: LD_EXP 16
3740: PPUSH
3741: LD_STRING D1-Har-6
3743: PPUSH
3744: CALL_OW 94
// Say ( JMM , D1-JMM-7 ) ;
3748: LD_EXP 1
3752: PPUSH
3753: LD_STRING D1-JMM-7
3755: PPUSH
3756: CALL_OW 88
// SayRadio ( Harisson , D1-Har-7 ) ;
3760: LD_EXP 16
3764: PPUSH
3765: LD_STRING D1-Har-7
3767: PPUSH
3768: CALL_OW 94
// if IsOK ( Denis ) then
3772: LD_EXP 3
3776: PPUSH
3777: CALL_OW 302
3781: IFFALSE 3795
// Say ( JMM , D1-JMM-8 ) ;
3783: LD_EXP 1
3787: PPUSH
3788: LD_STRING D1-JMM-8
3790: PPUSH
3791: CALL_OW 88
// Say ( JMM , D1-JMM-8a ) ;
3795: LD_EXP 1
3799: PPUSH
3800: LD_STRING D1-JMM-8a
3802: PPUSH
3803: CALL_OW 88
// SayRadio ( Harisson , D1-Har-8 ) ;
3807: LD_EXP 16
3811: PPUSH
3812: LD_STRING D1-Har-8
3814: PPUSH
3815: CALL_OW 94
// Say ( JMM , D1-JMM-9 ) ;
3819: LD_EXP 1
3823: PPUSH
3824: LD_STRING D1-JMM-9
3826: PPUSH
3827: CALL_OW 88
// SayRadio ( Harisson , D1-Har-9 ) ;
3831: LD_EXP 16
3835: PPUSH
3836: LD_STRING D1-Har-9
3838: PPUSH
3839: CALL_OW 94
// Say ( JMM , D1-JMM-10 ) ;
3843: LD_EXP 1
3847: PPUSH
3848: LD_STRING D1-JMM-10
3850: PPUSH
3851: CALL_OW 88
// if IsOK ( Denis ) then
3855: LD_EXP 3
3859: PPUSH
3860: CALL_OW 302
3864: IFFALSE 3878
// Say ( JMM , D1-JMM-10a ) ;
3866: LD_EXP 1
3870: PPUSH
3871: LD_STRING D1-JMM-10a
3873: PPUSH
3874: CALL_OW 88
// SelectDeltaCharacters ;
3878: CALL 4362 0 0
// SetResourceType ( GetBase ( lab [ 1 ] ) , 1 , 150 ) ;
3882: LD_EXP 20
3886: PUSH
3887: LD_INT 1
3889: ARRAY
3890: PPUSH
3891: CALL_OW 274
3895: PPUSH
3896: LD_INT 1
3898: PPUSH
3899: LD_INT 150
3901: PPUSH
3902: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) then
3906: LD_INT 22
3908: PUSH
3909: LD_INT 1
3911: PUSH
3912: EMPTY
3913: LIST
3914: LIST
3915: PUSH
3916: LD_INT 30
3918: PUSH
3919: LD_INT 29
3921: PUSH
3922: EMPTY
3923: LIST
3924: LIST
3925: PUSH
3926: EMPTY
3927: LIST
3928: LIST
3929: PPUSH
3930: CALL_OW 69
3934: IFFALSE 3960
// SetResourceType ( GetBase ( lab [ 1 ] ) , 2 , 300 ) ;
3936: LD_EXP 20
3940: PUSH
3941: LD_INT 1
3943: ARRAY
3944: PPUSH
3945: CALL_OW 274
3949: PPUSH
3950: LD_INT 2
3952: PPUSH
3953: LD_INT 300
3955: PPUSH
3956: CALL_OW 277
// InGameOff ;
3960: CALL_OW 9
// Query ( Q1 ) ;
3964: LD_STRING Q1
3966: PPUSH
3967: CALL_OW 97
// SetAreaMapShow ( ExitArea , 1 ) ;
3971: LD_INT 3
3973: PPUSH
3974: LD_INT 1
3976: PPUSH
3977: CALL_OW 424
// if IsInUnit ( JMM ) then
3981: LD_EXP 1
3985: PPUSH
3986: CALL_OW 310
3990: IFFALSE 4001
// ComExitBuilding ( JMM ) ;
3992: LD_EXP 1
3996: PPUSH
3997: CALL_OW 122
// end ;
4001: LD_VAR 0 1
4005: RET
// every 0 0$1 trigger FilterUnitsExceptArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do var i , cargoType ;
4006: LD_INT 3
4008: PPUSH
4009: LD_INT 22
4011: PUSH
4012: LD_INT 1
4014: PUSH
4015: EMPTY
4016: LIST
4017: LIST
4018: PUSH
4019: LD_INT 21
4021: PUSH
4022: LD_INT 1
4024: PUSH
4025: EMPTY
4026: LIST
4027: LIST
4028: PUSH
4029: EMPTY
4030: LIST
4031: LIST
4032: PPUSH
4033: CALL_OW 71
4037: PUSH
4038: LD_INT 0
4040: EQUAL
4041: IFFALSE 4359
4043: GO 4045
4045: DISABLE
4046: LD_INT 0
4048: PPUSH
4049: PPUSH
// begin SaveDeltaCharacters ;
4050: CALL 4716 0 0
// if FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) then
4054: LD_INT 3
4056: PPUSH
4057: LD_INT 21
4059: PUSH
4060: LD_INT 2
4062: PUSH
4063: EMPTY
4064: LIST
4065: LIST
4066: PUSH
4067: LD_INT 3
4069: PUSH
4070: LD_INT 58
4072: PUSH
4073: EMPTY
4074: LIST
4075: PUSH
4076: EMPTY
4077: LIST
4078: LIST
4079: PUSH
4080: EMPTY
4081: LIST
4082: LIST
4083: PPUSH
4084: CALL_OW 70
4088: IFFALSE 4345
// begin for i in FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) do
4090: LD_ADDR_VAR 0 1
4094: PUSH
4095: LD_INT 3
4097: PPUSH
4098: LD_INT 21
4100: PUSH
4101: LD_INT 2
4103: PUSH
4104: EMPTY
4105: LIST
4106: LIST
4107: PUSH
4108: LD_INT 3
4110: PUSH
4111: LD_INT 58
4113: PUSH
4114: EMPTY
4115: LIST
4116: PUSH
4117: EMPTY
4118: LIST
4119: LIST
4120: PUSH
4121: EMPTY
4122: LIST
4123: LIST
4124: PPUSH
4125: CALL_OW 70
4129: PUSH
4130: FOR_IN
4131: IFFALSE 4343
// begin cargoType := GetCargoType ( i ) ;
4133: LD_ADDR_VAR 0 2
4137: PUSH
4138: LD_VAR 0 1
4142: PPUSH
4143: CALL_OW 288
4147: ST_TO_ADDR
// if GetWeapon ( i ) = us_cargo_bay then
4148: LD_VAR 0 1
4152: PPUSH
4153: CALL_OW 264
4157: PUSH
4158: LD_INT 12
4160: EQUAL
4161: IFFALSE 4258
// yourVehicles := yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , cargoType , GetCargo ( i , cargoType ) ] ] else
4163: LD_ADDR_EXP 14
4167: PUSH
4168: LD_EXP 14
4172: PUSH
4173: LD_VAR 0 1
4177: PPUSH
4178: CALL_OW 248
4182: PUSH
4183: LD_VAR 0 1
4187: PPUSH
4188: CALL_OW 265
4192: PUSH
4193: LD_VAR 0 1
4197: PPUSH
4198: CALL_OW 262
4202: PUSH
4203: LD_VAR 0 1
4207: PPUSH
4208: CALL_OW 263
4212: PUSH
4213: LD_VAR 0 1
4217: PPUSH
4218: CALL_OW 264
4222: PUSH
4223: LD_VAR 0 2
4227: PUSH
4228: LD_VAR 0 1
4232: PPUSH
4233: LD_VAR 0 2
4237: PPUSH
4238: CALL_OW 289
4242: PUSH
4243: EMPTY
4244: LIST
4245: LIST
4246: LIST
4247: LIST
4248: LIST
4249: LIST
4250: LIST
4251: PUSH
4252: EMPTY
4253: LIST
4254: ADD
4255: ST_TO_ADDR
4256: GO 4329
// yourVehicles := yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ] ;
4258: LD_ADDR_EXP 14
4262: PUSH
4263: LD_EXP 14
4267: PUSH
4268: LD_VAR 0 1
4272: PPUSH
4273: CALL_OW 248
4277: PUSH
4278: LD_VAR 0 1
4282: PPUSH
4283: CALL_OW 265
4287: PUSH
4288: LD_VAR 0 1
4292: PPUSH
4293: CALL_OW 262
4297: PUSH
4298: LD_VAR 0 1
4302: PPUSH
4303: CALL_OW 263
4307: PUSH
4308: LD_VAR 0 1
4312: PPUSH
4313: CALL_OW 264
4317: PUSH
4318: EMPTY
4319: LIST
4320: LIST
4321: LIST
4322: LIST
4323: LIST
4324: PUSH
4325: EMPTY
4326: LIST
4327: ADD
4328: ST_TO_ADDR
// SaveVariable ( yourVehicles , 06_VehiclesIn06_1 ) ;
4329: LD_EXP 14
4333: PPUSH
4334: LD_STRING 06_VehiclesIn06_1
4336: PPUSH
4337: CALL_OW 39
// end ;
4341: GO 4130
4343: POP
4344: POP
// end ; SaveCargos ;
4345: CALL 5472 0 0
// ChangeMap ( 6 , %_cont ) ;
4349: LD_INT 6
4351: PPUSH
4352: LD_STRING %_cont
4354: PPUSH
4355: CALL_OW 340
// end ; end_of_file
4359: PPOPN 2
4361: END
// export function SelectDeltaCharacters ; var i , yourPeople ; begin
4362: LD_INT 0
4364: PPUSH
4365: PPUSH
4366: PPUSH
// selectedPeople := [ ] ;
4367: LD_ADDR_EXP 17
4371: PUSH
4372: EMPTY
4373: ST_TO_ADDR
// yourPeople := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , DeltaDoctor , Denis ] ;
4374: LD_ADDR_VAR 0 3
4378: PUSH
4379: LD_INT 22
4381: PUSH
4382: LD_INT 1
4384: PUSH
4385: EMPTY
4386: LIST
4387: LIST
4388: PUSH
4389: LD_INT 21
4391: PUSH
4392: LD_INT 1
4394: PUSH
4395: EMPTY
4396: LIST
4397: LIST
4398: PUSH
4399: LD_INT 2
4401: PUSH
4402: LD_INT 25
4404: PUSH
4405: LD_INT 1
4407: PUSH
4408: EMPTY
4409: LIST
4410: LIST
4411: PUSH
4412: LD_INT 25
4414: PUSH
4415: LD_INT 2
4417: PUSH
4418: EMPTY
4419: LIST
4420: LIST
4421: PUSH
4422: LD_INT 25
4424: PUSH
4425: LD_INT 3
4427: PUSH
4428: EMPTY
4429: LIST
4430: LIST
4431: PUSH
4432: LD_INT 25
4434: PUSH
4435: LD_INT 4
4437: PUSH
4438: EMPTY
4439: LIST
4440: LIST
4441: PUSH
4442: EMPTY
4443: LIST
4444: LIST
4445: LIST
4446: LIST
4447: LIST
4448: PUSH
4449: EMPTY
4450: LIST
4451: LIST
4452: LIST
4453: PPUSH
4454: CALL_OW 69
4458: PUSH
4459: LD_EXP 1
4463: PUSH
4464: LD_EXP 15
4468: PUSH
4469: LD_EXP 3
4473: PUSH
4474: EMPTY
4475: LIST
4476: LIST
4477: LIST
4478: DIFF
4479: ST_TO_ADDR
// selectedPeople := CharacterSelection ( text , 5 , 5 , [ sel_change_class , JMM , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ yourPeople ^ [ sel_dont_change_class , sel_not_changeable , Denis , DeltaDoctor ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
4480: LD_ADDR_EXP 17
4484: PUSH
4485: LD_STRING text
4487: PPUSH
4488: LD_INT 5
4490: PPUSH
4491: LD_INT 5
4493: PPUSH
4494: LD_INT -5
4496: PUSH
4497: LD_EXP 1
4501: PUSH
4502: LD_INT -6
4504: PUSH
4505: LD_INT -2
4507: PUSH
4508: LD_INT -3
4510: PUSH
4511: LD_INT -5
4513: PUSH
4514: EMPTY
4515: LIST
4516: LIST
4517: LIST
4518: LIST
4519: LIST
4520: LIST
4521: PUSH
4522: LD_VAR 0 3
4526: ADD
4527: PUSH
4528: LD_INT -6
4530: PUSH
4531: LD_INT -4
4533: PUSH
4534: LD_EXP 3
4538: PUSH
4539: LD_EXP 15
4543: PUSH
4544: EMPTY
4545: LIST
4546: LIST
4547: LIST
4548: LIST
4549: ADD
4550: PPUSH
4551: LD_INT 1
4553: PUSH
4554: LD_INT 3
4556: PUSH
4557: LD_INT 2
4559: PUSH
4560: LD_INT 1
4562: PUSH
4563: EMPTY
4564: LIST
4565: LIST
4566: PUSH
4567: LD_INT 4
4569: PUSH
4570: EMPTY
4571: LIST
4572: LIST
4573: LIST
4574: LIST
4575: PPUSH
4576: CALL_OW 42
4580: ST_TO_ADDR
// ComStop ( selectedPeople ) ;
4581: LD_EXP 17
4585: PPUSH
4586: CALL_OW 141
// SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 4 ) ;
4590: LD_INT 22
4592: PUSH
4593: LD_INT 1
4595: PUSH
4596: EMPTY
4597: LIST
4598: LIST
4599: PUSH
4600: LD_INT 21
4602: PUSH
4603: LD_INT 1
4605: PUSH
4606: EMPTY
4607: LIST
4608: LIST
4609: PUSH
4610: EMPTY
4611: LIST
4612: LIST
4613: PPUSH
4614: CALL_OW 69
4618: PPUSH
4619: LD_INT 4
4621: PPUSH
4622: CALL_OW 235
// for i in selectedPeople do
4626: LD_ADDR_VAR 0 2
4630: PUSH
4631: LD_EXP 17
4635: PUSH
4636: FOR_IN
4637: IFFALSE 4653
// SetSide ( i , 1 ) ;
4639: LD_VAR 0 2
4643: PPUSH
4644: LD_INT 1
4646: PPUSH
4647: CALL_OW 235
4651: GO 4636
4653: POP
4654: POP
// for i in yourApemans do
4655: LD_ADDR_VAR 0 2
4659: PUSH
4660: LD_EXP 13
4664: PUSH
4665: FOR_IN
4666: IFFALSE 4682
// SetSide ( i , 1 ) ;
4668: LD_VAR 0 2
4672: PPUSH
4673: LD_INT 1
4675: PPUSH
4676: CALL_OW 235
4680: GO 4665
4682: POP
4683: POP
// SetSide ( JMM , 1 ) ;
4684: LD_EXP 1
4688: PPUSH
4689: LD_INT 1
4691: PPUSH
4692: CALL_OW 235
// SetSkill ( yourApemans , 2 , 5 ) ;
4696: LD_EXP 13
4700: PPUSH
4701: LD_INT 2
4703: PPUSH
4704: LD_INT 5
4706: PPUSH
4707: CALL_OW 237
// end ;
4711: LD_VAR 0 1
4715: RET
// export function SaveDeltaCharacters ; begin
4716: LD_INT 0
4718: PPUSH
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
4719: LD_EXP 1
4723: PPUSH
4724: LD_EXP 22
4728: PUSH
4729: LD_STRING JMM
4731: STR
4732: PPUSH
4733: CALL_OW 38
// SaveCharacters ( DeltaDoctor , DeltaDoctor ) ;
4737: LD_EXP 15
4741: PPUSH
4742: LD_STRING DeltaDoctor
4744: PPUSH
4745: CALL_OW 38
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
4749: LD_EXP 3
4753: PPUSH
4754: LD_EXP 22
4758: PUSH
4759: LD_STRING Denis
4761: STR
4762: PPUSH
4763: CALL_OW 38
// if Lisa in selectedPeople then
4767: LD_EXP 4
4771: PUSH
4772: LD_EXP 17
4776: IN
4777: IFFALSE 4809
// begin SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
4779: LD_EXP 4
4783: PPUSH
4784: LD_EXP 22
4788: PUSH
4789: LD_STRING Lisa
4791: STR
4792: PPUSH
4793: CALL_OW 38
// SaveVariable ( 1 , LisaIn06 ) ;
4797: LD_INT 1
4799: PPUSH
4800: LD_STRING LisaIn06
4802: PPUSH
4803: CALL_OW 39
// end else
4807: GO 4830
// if IsOk ( Lisa ) then
4809: LD_EXP 4
4813: PPUSH
4814: CALL_OW 302
4818: IFFALSE 4830
// SaveVariable ( 1 , LisaStayInDelta ) ;
4820: LD_INT 1
4822: PPUSH
4823: LD_STRING LisaStayInDelta
4825: PPUSH
4826: CALL_OW 39
// if Bobby in selectedPeople then
4830: LD_EXP 6
4834: PUSH
4835: LD_EXP 17
4839: IN
4840: IFFALSE 4872
// begin SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
4842: LD_EXP 6
4846: PPUSH
4847: LD_EXP 22
4851: PUSH
4852: LD_STRING Bobby
4854: STR
4855: PPUSH
4856: CALL_OW 38
// SaveVariable ( 1 , BobbyIn06 ) ;
4860: LD_INT 1
4862: PPUSH
4863: LD_STRING BobbyIn06
4865: PPUSH
4866: CALL_OW 39
// end else
4870: GO 4893
// if IsOk ( Bobby ) then
4872: LD_EXP 6
4876: PPUSH
4877: CALL_OW 302
4881: IFFALSE 4893
// SaveVariable ( 1 , BobbyStayInDelta ) ;
4883: LD_INT 1
4885: PPUSH
4886: LD_STRING BobbyStayInDelta
4888: PPUSH
4889: CALL_OW 39
// if Cyrus in selectedPeople then
4893: LD_EXP 7
4897: PUSH
4898: LD_EXP 17
4902: IN
4903: IFFALSE 4935
// begin SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
4905: LD_EXP 7
4909: PPUSH
4910: LD_EXP 22
4914: PUSH
4915: LD_STRING Cyrus
4917: STR
4918: PPUSH
4919: CALL_OW 38
// SaveVariable ( 1 , CyrusIn06 ) ;
4923: LD_INT 1
4925: PPUSH
4926: LD_STRING CyrusIn06
4928: PPUSH
4929: CALL_OW 39
// end else
4933: GO 4956
// if IsOk ( Cyrus ) then
4935: LD_EXP 7
4939: PPUSH
4940: CALL_OW 302
4944: IFFALSE 4956
// SaveVariable ( 1 , CyrusStayInDelta ) ;
4946: LD_INT 1
4948: PPUSH
4949: LD_STRING CyrusStayInDelta
4951: PPUSH
4952: CALL_OW 39
// if Frank in selectedPeople then
4956: LD_EXP 5
4960: PUSH
4961: LD_EXP 17
4965: IN
4966: IFFALSE 4998
// begin SaveCharacters ( Frank , mission_prefix & Frank ) ;
4968: LD_EXP 5
4972: PPUSH
4973: LD_EXP 22
4977: PUSH
4978: LD_STRING Frank
4980: STR
4981: PPUSH
4982: CALL_OW 38
// SaveVariable ( 1 , FrankIn06 ) ;
4986: LD_INT 1
4988: PPUSH
4989: LD_STRING FrankIn06
4991: PPUSH
4992: CALL_OW 39
// end else
4996: GO 5019
// if IsOk ( Frank ) then
4998: LD_EXP 5
5002: PPUSH
5003: CALL_OW 302
5007: IFFALSE 5019
// SaveVariable ( 1 , FrankStayInDelta ) ;
5009: LD_INT 1
5011: PPUSH
5012: LD_STRING FrankStayInDelta
5014: PPUSH
5015: CALL_OW 39
// if Brown in selectedPeople then
5019: LD_EXP 8
5023: PUSH
5024: LD_EXP 17
5028: IN
5029: IFFALSE 5061
// begin SaveCharacters ( Brown , mission_prefix & Brown ) ;
5031: LD_EXP 8
5035: PPUSH
5036: LD_EXP 22
5040: PUSH
5041: LD_STRING Brown
5043: STR
5044: PPUSH
5045: CALL_OW 38
// SaveVariable ( 1 , BrownIn06 ) ;
5049: LD_INT 1
5051: PPUSH
5052: LD_STRING BrownIn06
5054: PPUSH
5055: CALL_OW 39
// end else
5059: GO 5082
// if IsOk ( Brown ) then
5061: LD_EXP 8
5065: PPUSH
5066: CALL_OW 302
5070: IFFALSE 5082
// SaveVariable ( 1 , BrownStayInDelta ) ;
5072: LD_INT 1
5074: PPUSH
5075: LD_STRING BrownStayInDelta
5077: PPUSH
5078: CALL_OW 39
// if Donaldson in selectedPeople then
5082: LD_EXP 9
5086: PUSH
5087: LD_EXP 17
5091: IN
5092: IFFALSE 5124
// begin SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
5094: LD_EXP 9
5098: PPUSH
5099: LD_EXP 22
5103: PUSH
5104: LD_STRING Donaldson
5106: STR
5107: PPUSH
5108: CALL_OW 38
// SaveVariable ( 1 , DonaldsonIn06 ) ;
5112: LD_INT 1
5114: PPUSH
5115: LD_STRING DonaldsonIn06
5117: PPUSH
5118: CALL_OW 39
// end else
5122: GO 5145
// if IsOk ( Donaldson ) then
5124: LD_EXP 9
5128: PPUSH
5129: CALL_OW 302
5133: IFFALSE 5145
// SaveVariable ( 1 , DonaldsonStayInDelta ) ;
5135: LD_INT 1
5137: PPUSH
5138: LD_STRING DonaldsonStayInDelta
5140: PPUSH
5141: CALL_OW 39
// if Gladstone in selectedPeople then
5145: LD_EXP 2
5149: PUSH
5150: LD_EXP 17
5154: IN
5155: IFFALSE 5187
// begin SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
5157: LD_EXP 2
5161: PPUSH
5162: LD_EXP 22
5166: PUSH
5167: LD_STRING Gladstone
5169: STR
5170: PPUSH
5171: CALL_OW 38
// SaveVariable ( 1 , GladstoneIn06 ) ;
5175: LD_INT 1
5177: PPUSH
5178: LD_STRING GladstoneIn06
5180: PPUSH
5181: CALL_OW 39
// end else
5185: GO 5208
// if IsOk ( Gladstone ) then
5187: LD_EXP 2
5191: PPUSH
5192: CALL_OW 302
5196: IFFALSE 5208
// SaveVariable ( 1 , GladstoneStayInDelta ) ;
5198: LD_INT 1
5200: PPUSH
5201: LD_STRING GladstoneStayInDelta
5203: PPUSH
5204: CALL_OW 39
// selectedPeople := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ;
5208: LD_ADDR_EXP 17
5212: PUSH
5213: LD_INT 22
5215: PUSH
5216: LD_INT 1
5218: PUSH
5219: EMPTY
5220: LIST
5221: LIST
5222: PUSH
5223: LD_INT 23
5225: PUSH
5226: LD_INT 1
5228: PUSH
5229: EMPTY
5230: LIST
5231: LIST
5232: PUSH
5233: LD_INT 21
5235: PUSH
5236: LD_INT 1
5238: PUSH
5239: EMPTY
5240: LIST
5241: LIST
5242: PUSH
5243: EMPTY
5244: LIST
5245: LIST
5246: LIST
5247: PPUSH
5248: CALL_OW 69
5252: ST_TO_ADDR
// SaveCharacters ( yourApemans , ApeIn06 ) ;
5253: LD_EXP 13
5257: PPUSH
5258: LD_STRING ApeIn06
5260: PPUSH
5261: CALL_OW 38
// SaveCharacters ( selectedPeople diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis ] , OthersIn06 ) ;
5265: LD_EXP 17
5269: PUSH
5270: LD_EXP 1
5274: PUSH
5275: LD_EXP 4
5279: PUSH
5280: LD_EXP 6
5284: PUSH
5285: LD_EXP 7
5289: PUSH
5290: LD_EXP 5
5294: PUSH
5295: LD_EXP 8
5299: PUSH
5300: LD_EXP 9
5304: PUSH
5305: LD_EXP 2
5309: PUSH
5310: LD_EXP 3
5314: PUSH
5315: EMPTY
5316: LIST
5317: LIST
5318: LIST
5319: LIST
5320: LIST
5321: LIST
5322: LIST
5323: LIST
5324: LIST
5325: DIFF
5326: PPUSH
5327: LD_STRING OthersIn06
5329: PPUSH
5330: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ DeltaDoctor , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis ] , OthersStayInDelta ) ;
5334: LD_INT 22
5336: PUSH
5337: LD_INT 4
5339: PUSH
5340: EMPTY
5341: LIST
5342: LIST
5343: PUSH
5344: LD_INT 2
5346: PUSH
5347: LD_INT 25
5349: PUSH
5350: LD_INT 1
5352: PUSH
5353: EMPTY
5354: LIST
5355: LIST
5356: PUSH
5357: LD_INT 25
5359: PUSH
5360: LD_INT 2
5362: PUSH
5363: EMPTY
5364: LIST
5365: LIST
5366: PUSH
5367: LD_INT 25
5369: PUSH
5370: LD_INT 3
5372: PUSH
5373: EMPTY
5374: LIST
5375: LIST
5376: PUSH
5377: LD_INT 25
5379: PUSH
5380: LD_INT 4
5382: PUSH
5383: EMPTY
5384: LIST
5385: LIST
5386: PUSH
5387: EMPTY
5388: LIST
5389: LIST
5390: LIST
5391: LIST
5392: LIST
5393: PUSH
5394: EMPTY
5395: LIST
5396: LIST
5397: PPUSH
5398: CALL_OW 69
5402: PUSH
5403: LD_EXP 15
5407: PUSH
5408: LD_EXP 4
5412: PUSH
5413: LD_EXP 6
5417: PUSH
5418: LD_EXP 7
5422: PUSH
5423: LD_EXP 5
5427: PUSH
5428: LD_EXP 8
5432: PUSH
5433: LD_EXP 9
5437: PUSH
5438: LD_EXP 2
5442: PUSH
5443: LD_EXP 3
5447: PUSH
5448: EMPTY
5449: LIST
5450: LIST
5451: LIST
5452: LIST
5453: LIST
5454: LIST
5455: LIST
5456: LIST
5457: LIST
5458: DIFF
5459: PPUSH
5460: LD_STRING OthersStayInDelta
5462: PPUSH
5463: CALL_OW 38
// end ;
5467: LD_VAR 0 1
5471: RET
// export function SaveCargos ; var i ; begin
5472: LD_INT 0
5474: PPUSH
5475: PPUSH
// for i in FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) do
5476: LD_ADDR_VAR 0 2
5480: PUSH
5481: LD_INT 3
5483: PPUSH
5484: LD_INT 22
5486: PUSH
5487: LD_INT 1
5489: PUSH
5490: EMPTY
5491: LIST
5492: LIST
5493: PUSH
5494: LD_INT 34
5496: PUSH
5497: LD_INT 12
5499: PUSH
5500: EMPTY
5501: LIST
5502: LIST
5503: PUSH
5504: EMPTY
5505: LIST
5506: LIST
5507: PPUSH
5508: CALL_OW 70
5512: PUSH
5513: FOR_IN
5514: IFFALSE 5542
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
5516: LD_ADDR_EXP 21
5520: PUSH
5521: LD_EXP 21
5525: PUSH
5526: LD_VAR 0 2
5530: PPUSH
5531: CALL 66846 0 1
5535: PUSH
5536: EMPTY
5537: LIST
5538: ADD
5539: ST_TO_ADDR
5540: GO 5513
5542: POP
5543: POP
// SaveVariable ( resources , 06_ResourcesInCargo06_1 ) ;
5544: LD_EXP 21
5548: PPUSH
5549: LD_STRING 06_ResourcesInCargo06_1
5551: PPUSH
5552: CALL_OW 39
// end ; end_of_file
5556: LD_VAR 0 1
5560: RET
// on Command ( comandid ) do var i ;
5561: LD_INT 0
5563: PPUSH
// begin if comandid = 65 then
5564: LD_VAR 0 1
5568: PUSH
5569: LD_INT 65
5571: EQUAL
5572: IFFALSE 5613
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
5574: LD_ADDR_VAR 0 2
5578: PUSH
5579: LD_INT 22
5581: PUSH
5582: LD_INT 1
5584: PUSH
5585: EMPTY
5586: LIST
5587: LIST
5588: PUSH
5589: EMPTY
5590: LIST
5591: PPUSH
5592: CALL_OW 69
5596: PUSH
5597: FOR_IN
5598: IFFALSE 5611
// ComStop ( i ) ;
5600: LD_VAR 0 2
5604: PPUSH
5605: CALL_OW 141
5609: GO 5597
5611: POP
5612: POP
// end ;
5613: PPOPN 2
5615: END
// on ApemanTamed ( apeman , human ) do var tmp ;
5616: LD_INT 0
5618: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
5619: LD_ADDR_VAR 0 3
5623: PUSH
5624: LD_INT 22
5626: PUSH
5627: LD_INT 1
5629: PUSH
5630: EMPTY
5631: LIST
5632: LIST
5633: PUSH
5634: LD_INT 21
5636: PUSH
5637: LD_INT 3
5639: PUSH
5640: EMPTY
5641: LIST
5642: LIST
5643: PUSH
5644: LD_INT 30
5646: PUSH
5647: LD_INT 0
5649: PUSH
5650: EMPTY
5651: LIST
5652: LIST
5653: PUSH
5654: EMPTY
5655: LIST
5656: LIST
5657: LIST
5658: PPUSH
5659: CALL_OW 69
5663: ST_TO_ADDR
// if not tmp then
5664: LD_VAR 0 3
5668: NOT
5669: IFFALSE 5673
// exit ;
5671: GO 5703
// ComEnterUnit ( apeman , tmp [ 1 ] ) ;
5673: LD_VAR 0 1
5677: PPUSH
5678: LD_VAR 0 3
5682: PUSH
5683: LD_INT 1
5685: ARRAY
5686: PPUSH
5687: CALL_OW 120
// SetSide ( apeman , 4 ) ;
5691: LD_VAR 0 1
5695: PPUSH
5696: LD_INT 4
5698: PPUSH
5699: CALL_OW 235
// end ;
5703: PPOPN 3
5705: END
// on UnitDestroyed ( un ) do begin if un = JMM then
5706: LD_VAR 0 1
5710: PUSH
5711: LD_EXP 1
5715: EQUAL
5716: IFFALSE 5725
// YouLost ( JMM ) ;
5718: LD_STRING JMM
5720: PPUSH
5721: CALL_OW 104
// SOS_UnitDestroyed ( un ) ;
5725: LD_VAR 0 1
5729: PPUSH
5730: CALL 21405 0 1
// end ;
5734: PPOPN 1
5736: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
5737: LD_VAR 0 1
5741: PPUSH
5742: LD_VAR 0 2
5746: PPUSH
5747: CALL 21527 0 2
// end ; end_of_file
5751: PPOPN 2
5753: END
// every 0 0$1 do
5754: GO 5756
5756: DISABLE
// begin enable ;
5757: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
5758: LD_STRING updateTimer(
5760: PUSH
5761: LD_OWVAR 1
5765: STR
5766: PUSH
5767: LD_STRING );
5769: STR
5770: PPUSH
5771: CALL_OW 559
// end ;
5775: END
// export function SOS_MapStart ( ) ; begin
5776: LD_INT 0
5778: PPUSH
// if streamModeActive then
5779: LD_EXP 24
5783: IFFALSE 5792
// DefineStreamItems ( true ) ;
5785: LD_INT 1
5787: PPUSH
5788: CALL 7446 0 1
// UpdateFactoryWaypoints ( ) ;
5792: CALL 20307 0 0
// UpdateWarehouseGatheringPoints ( ) ;
5796: CALL 20564 0 0
// end ;
5800: LD_VAR 0 1
5804: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
5805: LD_INT 0
5807: PPUSH
// if p2 = 100 then
5808: LD_VAR 0 2
5812: PUSH
5813: LD_INT 100
5815: EQUAL
5816: IFFALSE 6819
// begin if not StreamModeActive then
5818: LD_EXP 24
5822: NOT
5823: IFFALSE 5833
// StreamModeActive := true ;
5825: LD_ADDR_EXP 24
5829: PUSH
5830: LD_INT 1
5832: ST_TO_ADDR
// if p3 = 0 then
5833: LD_VAR 0 3
5837: PUSH
5838: LD_INT 0
5840: EQUAL
5841: IFFALSE 5847
// InitStreamMode ;
5843: CALL 6982 0 0
// if p3 = 1 then
5847: LD_VAR 0 3
5851: PUSH
5852: LD_INT 1
5854: EQUAL
5855: IFFALSE 5865
// sRocket := true ;
5857: LD_ADDR_EXP 29
5861: PUSH
5862: LD_INT 1
5864: ST_TO_ADDR
// if p3 = 2 then
5865: LD_VAR 0 3
5869: PUSH
5870: LD_INT 2
5872: EQUAL
5873: IFFALSE 5883
// sSpeed := true ;
5875: LD_ADDR_EXP 28
5879: PUSH
5880: LD_INT 1
5882: ST_TO_ADDR
// if p3 = 3 then
5883: LD_VAR 0 3
5887: PUSH
5888: LD_INT 3
5890: EQUAL
5891: IFFALSE 5901
// sEngine := true ;
5893: LD_ADDR_EXP 30
5897: PUSH
5898: LD_INT 1
5900: ST_TO_ADDR
// if p3 = 4 then
5901: LD_VAR 0 3
5905: PUSH
5906: LD_INT 4
5908: EQUAL
5909: IFFALSE 5919
// sSpec := true ;
5911: LD_ADDR_EXP 27
5915: PUSH
5916: LD_INT 1
5918: ST_TO_ADDR
// if p3 = 5 then
5919: LD_VAR 0 3
5923: PUSH
5924: LD_INT 5
5926: EQUAL
5927: IFFALSE 5937
// sLevel := true ;
5929: LD_ADDR_EXP 31
5933: PUSH
5934: LD_INT 1
5936: ST_TO_ADDR
// if p3 = 6 then
5937: LD_VAR 0 3
5941: PUSH
5942: LD_INT 6
5944: EQUAL
5945: IFFALSE 5955
// sArmoury := true ;
5947: LD_ADDR_EXP 32
5951: PUSH
5952: LD_INT 1
5954: ST_TO_ADDR
// if p3 = 7 then
5955: LD_VAR 0 3
5959: PUSH
5960: LD_INT 7
5962: EQUAL
5963: IFFALSE 5973
// sRadar := true ;
5965: LD_ADDR_EXP 33
5969: PUSH
5970: LD_INT 1
5972: ST_TO_ADDR
// if p3 = 8 then
5973: LD_VAR 0 3
5977: PUSH
5978: LD_INT 8
5980: EQUAL
5981: IFFALSE 5991
// sBunker := true ;
5983: LD_ADDR_EXP 34
5987: PUSH
5988: LD_INT 1
5990: ST_TO_ADDR
// if p3 = 9 then
5991: LD_VAR 0 3
5995: PUSH
5996: LD_INT 9
5998: EQUAL
5999: IFFALSE 6009
// sHack := true ;
6001: LD_ADDR_EXP 35
6005: PUSH
6006: LD_INT 1
6008: ST_TO_ADDR
// if p3 = 10 then
6009: LD_VAR 0 3
6013: PUSH
6014: LD_INT 10
6016: EQUAL
6017: IFFALSE 6027
// sFire := true ;
6019: LD_ADDR_EXP 36
6023: PUSH
6024: LD_INT 1
6026: ST_TO_ADDR
// if p3 = 11 then
6027: LD_VAR 0 3
6031: PUSH
6032: LD_INT 11
6034: EQUAL
6035: IFFALSE 6045
// sRefresh := true ;
6037: LD_ADDR_EXP 37
6041: PUSH
6042: LD_INT 1
6044: ST_TO_ADDR
// if p3 = 12 then
6045: LD_VAR 0 3
6049: PUSH
6050: LD_INT 12
6052: EQUAL
6053: IFFALSE 6063
// sExp := true ;
6055: LD_ADDR_EXP 38
6059: PUSH
6060: LD_INT 1
6062: ST_TO_ADDR
// if p3 = 13 then
6063: LD_VAR 0 3
6067: PUSH
6068: LD_INT 13
6070: EQUAL
6071: IFFALSE 6081
// sDepot := true ;
6073: LD_ADDR_EXP 39
6077: PUSH
6078: LD_INT 1
6080: ST_TO_ADDR
// if p3 = 14 then
6081: LD_VAR 0 3
6085: PUSH
6086: LD_INT 14
6088: EQUAL
6089: IFFALSE 6099
// sFlag := true ;
6091: LD_ADDR_EXP 40
6095: PUSH
6096: LD_INT 1
6098: ST_TO_ADDR
// if p3 = 15 then
6099: LD_VAR 0 3
6103: PUSH
6104: LD_INT 15
6106: EQUAL
6107: IFFALSE 6117
// sKamikadze := true ;
6109: LD_ADDR_EXP 48
6113: PUSH
6114: LD_INT 1
6116: ST_TO_ADDR
// if p3 = 16 then
6117: LD_VAR 0 3
6121: PUSH
6122: LD_INT 16
6124: EQUAL
6125: IFFALSE 6135
// sTroll := true ;
6127: LD_ADDR_EXP 49
6131: PUSH
6132: LD_INT 1
6134: ST_TO_ADDR
// if p3 = 17 then
6135: LD_VAR 0 3
6139: PUSH
6140: LD_INT 17
6142: EQUAL
6143: IFFALSE 6153
// sSlow := true ;
6145: LD_ADDR_EXP 50
6149: PUSH
6150: LD_INT 1
6152: ST_TO_ADDR
// if p3 = 18 then
6153: LD_VAR 0 3
6157: PUSH
6158: LD_INT 18
6160: EQUAL
6161: IFFALSE 6171
// sLack := true ;
6163: LD_ADDR_EXP 51
6167: PUSH
6168: LD_INT 1
6170: ST_TO_ADDR
// if p3 = 19 then
6171: LD_VAR 0 3
6175: PUSH
6176: LD_INT 19
6178: EQUAL
6179: IFFALSE 6189
// sTank := true ;
6181: LD_ADDR_EXP 53
6185: PUSH
6186: LD_INT 1
6188: ST_TO_ADDR
// if p3 = 20 then
6189: LD_VAR 0 3
6193: PUSH
6194: LD_INT 20
6196: EQUAL
6197: IFFALSE 6207
// sRemote := true ;
6199: LD_ADDR_EXP 54
6203: PUSH
6204: LD_INT 1
6206: ST_TO_ADDR
// if p3 = 21 then
6207: LD_VAR 0 3
6211: PUSH
6212: LD_INT 21
6214: EQUAL
6215: IFFALSE 6225
// sPowell := true ;
6217: LD_ADDR_EXP 55
6221: PUSH
6222: LD_INT 1
6224: ST_TO_ADDR
// if p3 = 22 then
6225: LD_VAR 0 3
6229: PUSH
6230: LD_INT 22
6232: EQUAL
6233: IFFALSE 6243
// sTeleport := true ;
6235: LD_ADDR_EXP 58
6239: PUSH
6240: LD_INT 1
6242: ST_TO_ADDR
// if p3 = 23 then
6243: LD_VAR 0 3
6247: PUSH
6248: LD_INT 23
6250: EQUAL
6251: IFFALSE 6261
// sOilTower := true ;
6253: LD_ADDR_EXP 60
6257: PUSH
6258: LD_INT 1
6260: ST_TO_ADDR
// if p3 = 24 then
6261: LD_VAR 0 3
6265: PUSH
6266: LD_INT 24
6268: EQUAL
6269: IFFALSE 6279
// sShovel := true ;
6271: LD_ADDR_EXP 61
6275: PUSH
6276: LD_INT 1
6278: ST_TO_ADDR
// if p3 = 25 then
6279: LD_VAR 0 3
6283: PUSH
6284: LD_INT 25
6286: EQUAL
6287: IFFALSE 6297
// sSheik := true ;
6289: LD_ADDR_EXP 62
6293: PUSH
6294: LD_INT 1
6296: ST_TO_ADDR
// if p3 = 26 then
6297: LD_VAR 0 3
6301: PUSH
6302: LD_INT 26
6304: EQUAL
6305: IFFALSE 6315
// sEarthquake := true ;
6307: LD_ADDR_EXP 64
6311: PUSH
6312: LD_INT 1
6314: ST_TO_ADDR
// if p3 = 27 then
6315: LD_VAR 0 3
6319: PUSH
6320: LD_INT 27
6322: EQUAL
6323: IFFALSE 6333
// sAI := true ;
6325: LD_ADDR_EXP 65
6329: PUSH
6330: LD_INT 1
6332: ST_TO_ADDR
// if p3 = 28 then
6333: LD_VAR 0 3
6337: PUSH
6338: LD_INT 28
6340: EQUAL
6341: IFFALSE 6351
// sCargo := true ;
6343: LD_ADDR_EXP 68
6347: PUSH
6348: LD_INT 1
6350: ST_TO_ADDR
// if p3 = 29 then
6351: LD_VAR 0 3
6355: PUSH
6356: LD_INT 29
6358: EQUAL
6359: IFFALSE 6369
// sDLaser := true ;
6361: LD_ADDR_EXP 69
6365: PUSH
6366: LD_INT 1
6368: ST_TO_ADDR
// if p3 = 30 then
6369: LD_VAR 0 3
6373: PUSH
6374: LD_INT 30
6376: EQUAL
6377: IFFALSE 6387
// sExchange := true ;
6379: LD_ADDR_EXP 70
6383: PUSH
6384: LD_INT 1
6386: ST_TO_ADDR
// if p3 = 31 then
6387: LD_VAR 0 3
6391: PUSH
6392: LD_INT 31
6394: EQUAL
6395: IFFALSE 6405
// sFac := true ;
6397: LD_ADDR_EXP 71
6401: PUSH
6402: LD_INT 1
6404: ST_TO_ADDR
// if p3 = 32 then
6405: LD_VAR 0 3
6409: PUSH
6410: LD_INT 32
6412: EQUAL
6413: IFFALSE 6423
// sPower := true ;
6415: LD_ADDR_EXP 72
6419: PUSH
6420: LD_INT 1
6422: ST_TO_ADDR
// if p3 = 33 then
6423: LD_VAR 0 3
6427: PUSH
6428: LD_INT 33
6430: EQUAL
6431: IFFALSE 6441
// sRandom := true ;
6433: LD_ADDR_EXP 73
6437: PUSH
6438: LD_INT 1
6440: ST_TO_ADDR
// if p3 = 34 then
6441: LD_VAR 0 3
6445: PUSH
6446: LD_INT 34
6448: EQUAL
6449: IFFALSE 6459
// sShield := true ;
6451: LD_ADDR_EXP 74
6455: PUSH
6456: LD_INT 1
6458: ST_TO_ADDR
// if p3 = 35 then
6459: LD_VAR 0 3
6463: PUSH
6464: LD_INT 35
6466: EQUAL
6467: IFFALSE 6477
// sTime := true ;
6469: LD_ADDR_EXP 75
6473: PUSH
6474: LD_INT 1
6476: ST_TO_ADDR
// if p3 = 36 then
6477: LD_VAR 0 3
6481: PUSH
6482: LD_INT 36
6484: EQUAL
6485: IFFALSE 6495
// sTools := true ;
6487: LD_ADDR_EXP 76
6491: PUSH
6492: LD_INT 1
6494: ST_TO_ADDR
// if p3 = 101 then
6495: LD_VAR 0 3
6499: PUSH
6500: LD_INT 101
6502: EQUAL
6503: IFFALSE 6513
// sSold := true ;
6505: LD_ADDR_EXP 41
6509: PUSH
6510: LD_INT 1
6512: ST_TO_ADDR
// if p3 = 102 then
6513: LD_VAR 0 3
6517: PUSH
6518: LD_INT 102
6520: EQUAL
6521: IFFALSE 6531
// sDiff := true ;
6523: LD_ADDR_EXP 42
6527: PUSH
6528: LD_INT 1
6530: ST_TO_ADDR
// if p3 = 103 then
6531: LD_VAR 0 3
6535: PUSH
6536: LD_INT 103
6538: EQUAL
6539: IFFALSE 6549
// sFog := true ;
6541: LD_ADDR_EXP 45
6545: PUSH
6546: LD_INT 1
6548: ST_TO_ADDR
// if p3 = 104 then
6549: LD_VAR 0 3
6553: PUSH
6554: LD_INT 104
6556: EQUAL
6557: IFFALSE 6567
// sReset := true ;
6559: LD_ADDR_EXP 46
6563: PUSH
6564: LD_INT 1
6566: ST_TO_ADDR
// if p3 = 105 then
6567: LD_VAR 0 3
6571: PUSH
6572: LD_INT 105
6574: EQUAL
6575: IFFALSE 6585
// sSun := true ;
6577: LD_ADDR_EXP 47
6581: PUSH
6582: LD_INT 1
6584: ST_TO_ADDR
// if p3 = 106 then
6585: LD_VAR 0 3
6589: PUSH
6590: LD_INT 106
6592: EQUAL
6593: IFFALSE 6603
// sTiger := true ;
6595: LD_ADDR_EXP 43
6599: PUSH
6600: LD_INT 1
6602: ST_TO_ADDR
// if p3 = 107 then
6603: LD_VAR 0 3
6607: PUSH
6608: LD_INT 107
6610: EQUAL
6611: IFFALSE 6621
// sBomb := true ;
6613: LD_ADDR_EXP 44
6617: PUSH
6618: LD_INT 1
6620: ST_TO_ADDR
// if p3 = 108 then
6621: LD_VAR 0 3
6625: PUSH
6626: LD_INT 108
6628: EQUAL
6629: IFFALSE 6639
// sWound := true ;
6631: LD_ADDR_EXP 52
6635: PUSH
6636: LD_INT 1
6638: ST_TO_ADDR
// if p3 = 109 then
6639: LD_VAR 0 3
6643: PUSH
6644: LD_INT 109
6646: EQUAL
6647: IFFALSE 6657
// sBetray := true ;
6649: LD_ADDR_EXP 56
6653: PUSH
6654: LD_INT 1
6656: ST_TO_ADDR
// if p3 = 110 then
6657: LD_VAR 0 3
6661: PUSH
6662: LD_INT 110
6664: EQUAL
6665: IFFALSE 6675
// sContamin := true ;
6667: LD_ADDR_EXP 57
6671: PUSH
6672: LD_INT 1
6674: ST_TO_ADDR
// if p3 = 111 then
6675: LD_VAR 0 3
6679: PUSH
6680: LD_INT 111
6682: EQUAL
6683: IFFALSE 6693
// sOil := true ;
6685: LD_ADDR_EXP 59
6689: PUSH
6690: LD_INT 1
6692: ST_TO_ADDR
// if p3 = 112 then
6693: LD_VAR 0 3
6697: PUSH
6698: LD_INT 112
6700: EQUAL
6701: IFFALSE 6711
// sStu := true ;
6703: LD_ADDR_EXP 63
6707: PUSH
6708: LD_INT 1
6710: ST_TO_ADDR
// if p3 = 113 then
6711: LD_VAR 0 3
6715: PUSH
6716: LD_INT 113
6718: EQUAL
6719: IFFALSE 6729
// sBazooka := true ;
6721: LD_ADDR_EXP 66
6725: PUSH
6726: LD_INT 1
6728: ST_TO_ADDR
// if p3 = 114 then
6729: LD_VAR 0 3
6733: PUSH
6734: LD_INT 114
6736: EQUAL
6737: IFFALSE 6747
// sMortar := true ;
6739: LD_ADDR_EXP 67
6743: PUSH
6744: LD_INT 1
6746: ST_TO_ADDR
// if p3 = 115 then
6747: LD_VAR 0 3
6751: PUSH
6752: LD_INT 115
6754: EQUAL
6755: IFFALSE 6765
// sRanger := true ;
6757: LD_ADDR_EXP 77
6761: PUSH
6762: LD_INT 1
6764: ST_TO_ADDR
// if p3 = 116 then
6765: LD_VAR 0 3
6769: PUSH
6770: LD_INT 116
6772: EQUAL
6773: IFFALSE 6783
// sComputer := true ;
6775: LD_ADDR_EXP 78
6779: PUSH
6780: LD_INT 1
6782: ST_TO_ADDR
// if p3 = 117 then
6783: LD_VAR 0 3
6787: PUSH
6788: LD_INT 117
6790: EQUAL
6791: IFFALSE 6801
// s30 := true ;
6793: LD_ADDR_EXP 79
6797: PUSH
6798: LD_INT 1
6800: ST_TO_ADDR
// if p3 = 118 then
6801: LD_VAR 0 3
6805: PUSH
6806: LD_INT 118
6808: EQUAL
6809: IFFALSE 6819
// s60 := true ;
6811: LD_ADDR_EXP 80
6815: PUSH
6816: LD_INT 1
6818: ST_TO_ADDR
// end ; if p2 = 101 then
6819: LD_VAR 0 2
6823: PUSH
6824: LD_INT 101
6826: EQUAL
6827: IFFALSE 6955
// begin case p3 of 1 :
6829: LD_VAR 0 3
6833: PUSH
6834: LD_INT 1
6836: DOUBLE
6837: EQUAL
6838: IFTRUE 6842
6840: GO 6849
6842: POP
// hHackUnlimitedResources ; 2 :
6843: CALL 19053 0 0
6847: GO 6955
6849: LD_INT 2
6851: DOUBLE
6852: EQUAL
6853: IFTRUE 6857
6855: GO 6864
6857: POP
// hHackSetLevel10 ; 3 :
6858: CALL 19186 0 0
6862: GO 6955
6864: LD_INT 3
6866: DOUBLE
6867: EQUAL
6868: IFTRUE 6872
6870: GO 6879
6872: POP
// hHackSetLevel10YourUnits ; 4 :
6873: CALL 19271 0 0
6877: GO 6955
6879: LD_INT 4
6881: DOUBLE
6882: EQUAL
6883: IFTRUE 6887
6885: GO 6894
6887: POP
// hHackInvincible ; 5 :
6888: CALL 19719 0 0
6892: GO 6955
6894: LD_INT 5
6896: DOUBLE
6897: EQUAL
6898: IFTRUE 6902
6900: GO 6909
6902: POP
// hHackInvisible ; 6 :
6903: CALL 19830 0 0
6907: GO 6955
6909: LD_INT 6
6911: DOUBLE
6912: EQUAL
6913: IFTRUE 6917
6915: GO 6924
6917: POP
// hHackChangeYourSide ; 7 :
6918: CALL 19887 0 0
6922: GO 6955
6924: LD_INT 7
6926: DOUBLE
6927: EQUAL
6928: IFTRUE 6932
6930: GO 6939
6932: POP
// hHackChangeUnitSide ; 8 :
6933: CALL 19929 0 0
6937: GO 6955
6939: LD_INT 8
6941: DOUBLE
6942: EQUAL
6943: IFTRUE 6947
6945: GO 6954
6947: POP
// hHackFog ; end ;
6948: CALL 20030 0 0
6952: GO 6955
6954: POP
// end ; end ;
6955: LD_VAR 0 7
6959: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
6960: GO 6962
6962: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
6963: LD_STRING initStreamRollete();
6965: PPUSH
6966: CALL_OW 559
// InitStreamMode ;
6970: CALL 6982 0 0
// DefineStreamItems ( false ) ;
6974: LD_INT 0
6976: PPUSH
6977: CALL 7446 0 1
// end ;
6981: END
// function InitStreamMode ; begin
6982: LD_INT 0
6984: PPUSH
// streamModeActive := false ;
6985: LD_ADDR_EXP 24
6989: PUSH
6990: LD_INT 0
6992: ST_TO_ADDR
// normalCounter := 36 ;
6993: LD_ADDR_EXP 25
6997: PUSH
6998: LD_INT 36
7000: ST_TO_ADDR
// hardcoreCounter := 18 ;
7001: LD_ADDR_EXP 26
7005: PUSH
7006: LD_INT 18
7008: ST_TO_ADDR
// sRocket := false ;
7009: LD_ADDR_EXP 29
7013: PUSH
7014: LD_INT 0
7016: ST_TO_ADDR
// sSpeed := false ;
7017: LD_ADDR_EXP 28
7021: PUSH
7022: LD_INT 0
7024: ST_TO_ADDR
// sEngine := false ;
7025: LD_ADDR_EXP 30
7029: PUSH
7030: LD_INT 0
7032: ST_TO_ADDR
// sSpec := false ;
7033: LD_ADDR_EXP 27
7037: PUSH
7038: LD_INT 0
7040: ST_TO_ADDR
// sLevel := false ;
7041: LD_ADDR_EXP 31
7045: PUSH
7046: LD_INT 0
7048: ST_TO_ADDR
// sArmoury := false ;
7049: LD_ADDR_EXP 32
7053: PUSH
7054: LD_INT 0
7056: ST_TO_ADDR
// sRadar := false ;
7057: LD_ADDR_EXP 33
7061: PUSH
7062: LD_INT 0
7064: ST_TO_ADDR
// sBunker := false ;
7065: LD_ADDR_EXP 34
7069: PUSH
7070: LD_INT 0
7072: ST_TO_ADDR
// sHack := false ;
7073: LD_ADDR_EXP 35
7077: PUSH
7078: LD_INT 0
7080: ST_TO_ADDR
// sFire := false ;
7081: LD_ADDR_EXP 36
7085: PUSH
7086: LD_INT 0
7088: ST_TO_ADDR
// sRefresh := false ;
7089: LD_ADDR_EXP 37
7093: PUSH
7094: LD_INT 0
7096: ST_TO_ADDR
// sExp := false ;
7097: LD_ADDR_EXP 38
7101: PUSH
7102: LD_INT 0
7104: ST_TO_ADDR
// sDepot := false ;
7105: LD_ADDR_EXP 39
7109: PUSH
7110: LD_INT 0
7112: ST_TO_ADDR
// sFlag := false ;
7113: LD_ADDR_EXP 40
7117: PUSH
7118: LD_INT 0
7120: ST_TO_ADDR
// sKamikadze := false ;
7121: LD_ADDR_EXP 48
7125: PUSH
7126: LD_INT 0
7128: ST_TO_ADDR
// sTroll := false ;
7129: LD_ADDR_EXP 49
7133: PUSH
7134: LD_INT 0
7136: ST_TO_ADDR
// sSlow := false ;
7137: LD_ADDR_EXP 50
7141: PUSH
7142: LD_INT 0
7144: ST_TO_ADDR
// sLack := false ;
7145: LD_ADDR_EXP 51
7149: PUSH
7150: LD_INT 0
7152: ST_TO_ADDR
// sTank := false ;
7153: LD_ADDR_EXP 53
7157: PUSH
7158: LD_INT 0
7160: ST_TO_ADDR
// sRemote := false ;
7161: LD_ADDR_EXP 54
7165: PUSH
7166: LD_INT 0
7168: ST_TO_ADDR
// sPowell := false ;
7169: LD_ADDR_EXP 55
7173: PUSH
7174: LD_INT 0
7176: ST_TO_ADDR
// sTeleport := false ;
7177: LD_ADDR_EXP 58
7181: PUSH
7182: LD_INT 0
7184: ST_TO_ADDR
// sOilTower := false ;
7185: LD_ADDR_EXP 60
7189: PUSH
7190: LD_INT 0
7192: ST_TO_ADDR
// sShovel := false ;
7193: LD_ADDR_EXP 61
7197: PUSH
7198: LD_INT 0
7200: ST_TO_ADDR
// sSheik := false ;
7201: LD_ADDR_EXP 62
7205: PUSH
7206: LD_INT 0
7208: ST_TO_ADDR
// sEarthquake := false ;
7209: LD_ADDR_EXP 64
7213: PUSH
7214: LD_INT 0
7216: ST_TO_ADDR
// sAI := false ;
7217: LD_ADDR_EXP 65
7221: PUSH
7222: LD_INT 0
7224: ST_TO_ADDR
// sCargo := false ;
7225: LD_ADDR_EXP 68
7229: PUSH
7230: LD_INT 0
7232: ST_TO_ADDR
// sDLaser := false ;
7233: LD_ADDR_EXP 69
7237: PUSH
7238: LD_INT 0
7240: ST_TO_ADDR
// sExchange := false ;
7241: LD_ADDR_EXP 70
7245: PUSH
7246: LD_INT 0
7248: ST_TO_ADDR
// sFac := false ;
7249: LD_ADDR_EXP 71
7253: PUSH
7254: LD_INT 0
7256: ST_TO_ADDR
// sPower := false ;
7257: LD_ADDR_EXP 72
7261: PUSH
7262: LD_INT 0
7264: ST_TO_ADDR
// sRandom := false ;
7265: LD_ADDR_EXP 73
7269: PUSH
7270: LD_INT 0
7272: ST_TO_ADDR
// sShield := false ;
7273: LD_ADDR_EXP 74
7277: PUSH
7278: LD_INT 0
7280: ST_TO_ADDR
// sTime := false ;
7281: LD_ADDR_EXP 75
7285: PUSH
7286: LD_INT 0
7288: ST_TO_ADDR
// sTools := false ;
7289: LD_ADDR_EXP 76
7293: PUSH
7294: LD_INT 0
7296: ST_TO_ADDR
// sSold := false ;
7297: LD_ADDR_EXP 41
7301: PUSH
7302: LD_INT 0
7304: ST_TO_ADDR
// sDiff := false ;
7305: LD_ADDR_EXP 42
7309: PUSH
7310: LD_INT 0
7312: ST_TO_ADDR
// sFog := false ;
7313: LD_ADDR_EXP 45
7317: PUSH
7318: LD_INT 0
7320: ST_TO_ADDR
// sReset := false ;
7321: LD_ADDR_EXP 46
7325: PUSH
7326: LD_INT 0
7328: ST_TO_ADDR
// sSun := false ;
7329: LD_ADDR_EXP 47
7333: PUSH
7334: LD_INT 0
7336: ST_TO_ADDR
// sTiger := false ;
7337: LD_ADDR_EXP 43
7341: PUSH
7342: LD_INT 0
7344: ST_TO_ADDR
// sBomb := false ;
7345: LD_ADDR_EXP 44
7349: PUSH
7350: LD_INT 0
7352: ST_TO_ADDR
// sWound := false ;
7353: LD_ADDR_EXP 52
7357: PUSH
7358: LD_INT 0
7360: ST_TO_ADDR
// sBetray := false ;
7361: LD_ADDR_EXP 56
7365: PUSH
7366: LD_INT 0
7368: ST_TO_ADDR
// sContamin := false ;
7369: LD_ADDR_EXP 57
7373: PUSH
7374: LD_INT 0
7376: ST_TO_ADDR
// sOil := false ;
7377: LD_ADDR_EXP 59
7381: PUSH
7382: LD_INT 0
7384: ST_TO_ADDR
// sStu := false ;
7385: LD_ADDR_EXP 63
7389: PUSH
7390: LD_INT 0
7392: ST_TO_ADDR
// sBazooka := false ;
7393: LD_ADDR_EXP 66
7397: PUSH
7398: LD_INT 0
7400: ST_TO_ADDR
// sMortar := false ;
7401: LD_ADDR_EXP 67
7405: PUSH
7406: LD_INT 0
7408: ST_TO_ADDR
// sRanger := false ;
7409: LD_ADDR_EXP 77
7413: PUSH
7414: LD_INT 0
7416: ST_TO_ADDR
// sComputer := false ;
7417: LD_ADDR_EXP 78
7421: PUSH
7422: LD_INT 0
7424: ST_TO_ADDR
// s30 := false ;
7425: LD_ADDR_EXP 79
7429: PUSH
7430: LD_INT 0
7432: ST_TO_ADDR
// s60 := false ;
7433: LD_ADDR_EXP 80
7437: PUSH
7438: LD_INT 0
7440: ST_TO_ADDR
// end ;
7441: LD_VAR 0 1
7445: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
7446: LD_INT 0
7448: PPUSH
7449: PPUSH
7450: PPUSH
7451: PPUSH
7452: PPUSH
7453: PPUSH
7454: PPUSH
// result := [ ] ;
7455: LD_ADDR_VAR 0 2
7459: PUSH
7460: EMPTY
7461: ST_TO_ADDR
// if campaign_id = 1 then
7462: LD_OWVAR 69
7466: PUSH
7467: LD_INT 1
7469: EQUAL
7470: IFFALSE 10636
// begin case mission_number of 1 :
7472: LD_OWVAR 70
7476: PUSH
7477: LD_INT 1
7479: DOUBLE
7480: EQUAL
7481: IFTRUE 7485
7483: GO 7561
7485: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
7486: LD_ADDR_VAR 0 2
7490: PUSH
7491: LD_INT 2
7493: PUSH
7494: LD_INT 4
7496: PUSH
7497: LD_INT 11
7499: PUSH
7500: LD_INT 12
7502: PUSH
7503: LD_INT 15
7505: PUSH
7506: LD_INT 16
7508: PUSH
7509: LD_INT 22
7511: PUSH
7512: LD_INT 23
7514: PUSH
7515: LD_INT 26
7517: PUSH
7518: EMPTY
7519: LIST
7520: LIST
7521: LIST
7522: LIST
7523: LIST
7524: LIST
7525: LIST
7526: LIST
7527: LIST
7528: PUSH
7529: LD_INT 101
7531: PUSH
7532: LD_INT 102
7534: PUSH
7535: LD_INT 106
7537: PUSH
7538: LD_INT 116
7540: PUSH
7541: LD_INT 117
7543: PUSH
7544: LD_INT 118
7546: PUSH
7547: EMPTY
7548: LIST
7549: LIST
7550: LIST
7551: LIST
7552: LIST
7553: LIST
7554: PUSH
7555: EMPTY
7556: LIST
7557: LIST
7558: ST_TO_ADDR
7559: GO 10634
7561: LD_INT 2
7563: DOUBLE
7564: EQUAL
7565: IFTRUE 7569
7567: GO 7653
7569: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
7570: LD_ADDR_VAR 0 2
7574: PUSH
7575: LD_INT 2
7577: PUSH
7578: LD_INT 4
7580: PUSH
7581: LD_INT 11
7583: PUSH
7584: LD_INT 12
7586: PUSH
7587: LD_INT 15
7589: PUSH
7590: LD_INT 16
7592: PUSH
7593: LD_INT 22
7595: PUSH
7596: LD_INT 23
7598: PUSH
7599: LD_INT 26
7601: PUSH
7602: EMPTY
7603: LIST
7604: LIST
7605: LIST
7606: LIST
7607: LIST
7608: LIST
7609: LIST
7610: LIST
7611: LIST
7612: PUSH
7613: LD_INT 101
7615: PUSH
7616: LD_INT 102
7618: PUSH
7619: LD_INT 105
7621: PUSH
7622: LD_INT 106
7624: PUSH
7625: LD_INT 108
7627: PUSH
7628: LD_INT 116
7630: PUSH
7631: LD_INT 117
7633: PUSH
7634: LD_INT 118
7636: PUSH
7637: EMPTY
7638: LIST
7639: LIST
7640: LIST
7641: LIST
7642: LIST
7643: LIST
7644: LIST
7645: LIST
7646: PUSH
7647: EMPTY
7648: LIST
7649: LIST
7650: ST_TO_ADDR
7651: GO 10634
7653: LD_INT 3
7655: DOUBLE
7656: EQUAL
7657: IFTRUE 7661
7659: GO 7749
7661: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
7662: LD_ADDR_VAR 0 2
7666: PUSH
7667: LD_INT 2
7669: PUSH
7670: LD_INT 4
7672: PUSH
7673: LD_INT 5
7675: PUSH
7676: LD_INT 11
7678: PUSH
7679: LD_INT 12
7681: PUSH
7682: LD_INT 15
7684: PUSH
7685: LD_INT 16
7687: PUSH
7688: LD_INT 22
7690: PUSH
7691: LD_INT 26
7693: PUSH
7694: LD_INT 36
7696: PUSH
7697: EMPTY
7698: LIST
7699: LIST
7700: LIST
7701: LIST
7702: LIST
7703: LIST
7704: LIST
7705: LIST
7706: LIST
7707: LIST
7708: PUSH
7709: LD_INT 101
7711: PUSH
7712: LD_INT 102
7714: PUSH
7715: LD_INT 105
7717: PUSH
7718: LD_INT 106
7720: PUSH
7721: LD_INT 108
7723: PUSH
7724: LD_INT 116
7726: PUSH
7727: LD_INT 117
7729: PUSH
7730: LD_INT 118
7732: PUSH
7733: EMPTY
7734: LIST
7735: LIST
7736: LIST
7737: LIST
7738: LIST
7739: LIST
7740: LIST
7741: LIST
7742: PUSH
7743: EMPTY
7744: LIST
7745: LIST
7746: ST_TO_ADDR
7747: GO 10634
7749: LD_INT 4
7751: DOUBLE
7752: EQUAL
7753: IFTRUE 7757
7755: GO 7853
7757: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
7758: LD_ADDR_VAR 0 2
7762: PUSH
7763: LD_INT 2
7765: PUSH
7766: LD_INT 4
7768: PUSH
7769: LD_INT 5
7771: PUSH
7772: LD_INT 8
7774: PUSH
7775: LD_INT 11
7777: PUSH
7778: LD_INT 12
7780: PUSH
7781: LD_INT 15
7783: PUSH
7784: LD_INT 16
7786: PUSH
7787: LD_INT 22
7789: PUSH
7790: LD_INT 23
7792: PUSH
7793: LD_INT 26
7795: PUSH
7796: LD_INT 36
7798: PUSH
7799: EMPTY
7800: LIST
7801: LIST
7802: LIST
7803: LIST
7804: LIST
7805: LIST
7806: LIST
7807: LIST
7808: LIST
7809: LIST
7810: LIST
7811: LIST
7812: PUSH
7813: LD_INT 101
7815: PUSH
7816: LD_INT 102
7818: PUSH
7819: LD_INT 105
7821: PUSH
7822: LD_INT 106
7824: PUSH
7825: LD_INT 108
7827: PUSH
7828: LD_INT 116
7830: PUSH
7831: LD_INT 117
7833: PUSH
7834: LD_INT 118
7836: PUSH
7837: EMPTY
7838: LIST
7839: LIST
7840: LIST
7841: LIST
7842: LIST
7843: LIST
7844: LIST
7845: LIST
7846: PUSH
7847: EMPTY
7848: LIST
7849: LIST
7850: ST_TO_ADDR
7851: GO 10634
7853: LD_INT 5
7855: DOUBLE
7856: EQUAL
7857: IFTRUE 7861
7859: GO 7973
7861: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
7862: LD_ADDR_VAR 0 2
7866: PUSH
7867: LD_INT 2
7869: PUSH
7870: LD_INT 4
7872: PUSH
7873: LD_INT 5
7875: PUSH
7876: LD_INT 6
7878: PUSH
7879: LD_INT 8
7881: PUSH
7882: LD_INT 11
7884: PUSH
7885: LD_INT 12
7887: PUSH
7888: LD_INT 15
7890: PUSH
7891: LD_INT 16
7893: PUSH
7894: LD_INT 22
7896: PUSH
7897: LD_INT 23
7899: PUSH
7900: LD_INT 25
7902: PUSH
7903: LD_INT 26
7905: PUSH
7906: LD_INT 36
7908: PUSH
7909: EMPTY
7910: LIST
7911: LIST
7912: LIST
7913: LIST
7914: LIST
7915: LIST
7916: LIST
7917: LIST
7918: LIST
7919: LIST
7920: LIST
7921: LIST
7922: LIST
7923: LIST
7924: PUSH
7925: LD_INT 101
7927: PUSH
7928: LD_INT 102
7930: PUSH
7931: LD_INT 105
7933: PUSH
7934: LD_INT 106
7936: PUSH
7937: LD_INT 108
7939: PUSH
7940: LD_INT 109
7942: PUSH
7943: LD_INT 112
7945: PUSH
7946: LD_INT 116
7948: PUSH
7949: LD_INT 117
7951: PUSH
7952: LD_INT 118
7954: PUSH
7955: EMPTY
7956: LIST
7957: LIST
7958: LIST
7959: LIST
7960: LIST
7961: LIST
7962: LIST
7963: LIST
7964: LIST
7965: LIST
7966: PUSH
7967: EMPTY
7968: LIST
7969: LIST
7970: ST_TO_ADDR
7971: GO 10634
7973: LD_INT 6
7975: DOUBLE
7976: EQUAL
7977: IFTRUE 7981
7979: GO 8113
7981: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
7982: LD_ADDR_VAR 0 2
7986: PUSH
7987: LD_INT 2
7989: PUSH
7990: LD_INT 4
7992: PUSH
7993: LD_INT 5
7995: PUSH
7996: LD_INT 6
7998: PUSH
7999: LD_INT 8
8001: PUSH
8002: LD_INT 11
8004: PUSH
8005: LD_INT 12
8007: PUSH
8008: LD_INT 15
8010: PUSH
8011: LD_INT 16
8013: PUSH
8014: LD_INT 20
8016: PUSH
8017: LD_INT 21
8019: PUSH
8020: LD_INT 22
8022: PUSH
8023: LD_INT 23
8025: PUSH
8026: LD_INT 25
8028: PUSH
8029: LD_INT 26
8031: PUSH
8032: LD_INT 30
8034: PUSH
8035: LD_INT 31
8037: PUSH
8038: LD_INT 32
8040: PUSH
8041: LD_INT 36
8043: PUSH
8044: EMPTY
8045: LIST
8046: LIST
8047: LIST
8048: LIST
8049: LIST
8050: LIST
8051: LIST
8052: LIST
8053: LIST
8054: LIST
8055: LIST
8056: LIST
8057: LIST
8058: LIST
8059: LIST
8060: LIST
8061: LIST
8062: LIST
8063: LIST
8064: PUSH
8065: LD_INT 101
8067: PUSH
8068: LD_INT 102
8070: PUSH
8071: LD_INT 105
8073: PUSH
8074: LD_INT 106
8076: PUSH
8077: LD_INT 108
8079: PUSH
8080: LD_INT 109
8082: PUSH
8083: LD_INT 112
8085: PUSH
8086: LD_INT 116
8088: PUSH
8089: LD_INT 117
8091: PUSH
8092: LD_INT 118
8094: PUSH
8095: EMPTY
8096: LIST
8097: LIST
8098: LIST
8099: LIST
8100: LIST
8101: LIST
8102: LIST
8103: LIST
8104: LIST
8105: LIST
8106: PUSH
8107: EMPTY
8108: LIST
8109: LIST
8110: ST_TO_ADDR
8111: GO 10634
8113: LD_INT 7
8115: DOUBLE
8116: EQUAL
8117: IFTRUE 8121
8119: GO 8233
8121: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
8122: LD_ADDR_VAR 0 2
8126: PUSH
8127: LD_INT 2
8129: PUSH
8130: LD_INT 4
8132: PUSH
8133: LD_INT 5
8135: PUSH
8136: LD_INT 7
8138: PUSH
8139: LD_INT 11
8141: PUSH
8142: LD_INT 12
8144: PUSH
8145: LD_INT 15
8147: PUSH
8148: LD_INT 16
8150: PUSH
8151: LD_INT 20
8153: PUSH
8154: LD_INT 21
8156: PUSH
8157: LD_INT 22
8159: PUSH
8160: LD_INT 23
8162: PUSH
8163: LD_INT 25
8165: PUSH
8166: LD_INT 26
8168: PUSH
8169: EMPTY
8170: LIST
8171: LIST
8172: LIST
8173: LIST
8174: LIST
8175: LIST
8176: LIST
8177: LIST
8178: LIST
8179: LIST
8180: LIST
8181: LIST
8182: LIST
8183: LIST
8184: PUSH
8185: LD_INT 101
8187: PUSH
8188: LD_INT 102
8190: PUSH
8191: LD_INT 103
8193: PUSH
8194: LD_INT 105
8196: PUSH
8197: LD_INT 106
8199: PUSH
8200: LD_INT 108
8202: PUSH
8203: LD_INT 112
8205: PUSH
8206: LD_INT 116
8208: PUSH
8209: LD_INT 117
8211: PUSH
8212: LD_INT 118
8214: PUSH
8215: EMPTY
8216: LIST
8217: LIST
8218: LIST
8219: LIST
8220: LIST
8221: LIST
8222: LIST
8223: LIST
8224: LIST
8225: LIST
8226: PUSH
8227: EMPTY
8228: LIST
8229: LIST
8230: ST_TO_ADDR
8231: GO 10634
8233: LD_INT 8
8235: DOUBLE
8236: EQUAL
8237: IFTRUE 8241
8239: GO 8381
8241: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
8242: LD_ADDR_VAR 0 2
8246: PUSH
8247: LD_INT 2
8249: PUSH
8250: LD_INT 4
8252: PUSH
8253: LD_INT 5
8255: PUSH
8256: LD_INT 6
8258: PUSH
8259: LD_INT 7
8261: PUSH
8262: LD_INT 8
8264: PUSH
8265: LD_INT 11
8267: PUSH
8268: LD_INT 12
8270: PUSH
8271: LD_INT 15
8273: PUSH
8274: LD_INT 16
8276: PUSH
8277: LD_INT 20
8279: PUSH
8280: LD_INT 21
8282: PUSH
8283: LD_INT 22
8285: PUSH
8286: LD_INT 23
8288: PUSH
8289: LD_INT 25
8291: PUSH
8292: LD_INT 26
8294: PUSH
8295: LD_INT 30
8297: PUSH
8298: LD_INT 31
8300: PUSH
8301: LD_INT 32
8303: PUSH
8304: LD_INT 36
8306: PUSH
8307: EMPTY
8308: LIST
8309: LIST
8310: LIST
8311: LIST
8312: LIST
8313: LIST
8314: LIST
8315: LIST
8316: LIST
8317: LIST
8318: LIST
8319: LIST
8320: LIST
8321: LIST
8322: LIST
8323: LIST
8324: LIST
8325: LIST
8326: LIST
8327: LIST
8328: PUSH
8329: LD_INT 101
8331: PUSH
8332: LD_INT 102
8334: PUSH
8335: LD_INT 103
8337: PUSH
8338: LD_INT 105
8340: PUSH
8341: LD_INT 106
8343: PUSH
8344: LD_INT 108
8346: PUSH
8347: LD_INT 109
8349: PUSH
8350: LD_INT 112
8352: PUSH
8353: LD_INT 116
8355: PUSH
8356: LD_INT 117
8358: PUSH
8359: LD_INT 118
8361: PUSH
8362: EMPTY
8363: LIST
8364: LIST
8365: LIST
8366: LIST
8367: LIST
8368: LIST
8369: LIST
8370: LIST
8371: LIST
8372: LIST
8373: LIST
8374: PUSH
8375: EMPTY
8376: LIST
8377: LIST
8378: ST_TO_ADDR
8379: GO 10634
8381: LD_INT 9
8383: DOUBLE
8384: EQUAL
8385: IFTRUE 8389
8387: GO 8537
8389: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
8390: LD_ADDR_VAR 0 2
8394: PUSH
8395: LD_INT 2
8397: PUSH
8398: LD_INT 4
8400: PUSH
8401: LD_INT 5
8403: PUSH
8404: LD_INT 6
8406: PUSH
8407: LD_INT 7
8409: PUSH
8410: LD_INT 8
8412: PUSH
8413: LD_INT 11
8415: PUSH
8416: LD_INT 12
8418: PUSH
8419: LD_INT 15
8421: PUSH
8422: LD_INT 16
8424: PUSH
8425: LD_INT 20
8427: PUSH
8428: LD_INT 21
8430: PUSH
8431: LD_INT 22
8433: PUSH
8434: LD_INT 23
8436: PUSH
8437: LD_INT 25
8439: PUSH
8440: LD_INT 26
8442: PUSH
8443: LD_INT 28
8445: PUSH
8446: LD_INT 30
8448: PUSH
8449: LD_INT 31
8451: PUSH
8452: LD_INT 32
8454: PUSH
8455: LD_INT 36
8457: PUSH
8458: EMPTY
8459: LIST
8460: LIST
8461: LIST
8462: LIST
8463: LIST
8464: LIST
8465: LIST
8466: LIST
8467: LIST
8468: LIST
8469: LIST
8470: LIST
8471: LIST
8472: LIST
8473: LIST
8474: LIST
8475: LIST
8476: LIST
8477: LIST
8478: LIST
8479: LIST
8480: PUSH
8481: LD_INT 101
8483: PUSH
8484: LD_INT 102
8486: PUSH
8487: LD_INT 103
8489: PUSH
8490: LD_INT 105
8492: PUSH
8493: LD_INT 106
8495: PUSH
8496: LD_INT 108
8498: PUSH
8499: LD_INT 109
8501: PUSH
8502: LD_INT 112
8504: PUSH
8505: LD_INT 114
8507: PUSH
8508: LD_INT 116
8510: PUSH
8511: LD_INT 117
8513: PUSH
8514: LD_INT 118
8516: PUSH
8517: EMPTY
8518: LIST
8519: LIST
8520: LIST
8521: LIST
8522: LIST
8523: LIST
8524: LIST
8525: LIST
8526: LIST
8527: LIST
8528: LIST
8529: LIST
8530: PUSH
8531: EMPTY
8532: LIST
8533: LIST
8534: ST_TO_ADDR
8535: GO 10634
8537: LD_INT 10
8539: DOUBLE
8540: EQUAL
8541: IFTRUE 8545
8543: GO 8741
8545: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
8546: LD_ADDR_VAR 0 2
8550: PUSH
8551: LD_INT 2
8553: PUSH
8554: LD_INT 4
8556: PUSH
8557: LD_INT 5
8559: PUSH
8560: LD_INT 6
8562: PUSH
8563: LD_INT 7
8565: PUSH
8566: LD_INT 8
8568: PUSH
8569: LD_INT 9
8571: PUSH
8572: LD_INT 10
8574: PUSH
8575: LD_INT 11
8577: PUSH
8578: LD_INT 12
8580: PUSH
8581: LD_INT 13
8583: PUSH
8584: LD_INT 14
8586: PUSH
8587: LD_INT 15
8589: PUSH
8590: LD_INT 16
8592: PUSH
8593: LD_INT 17
8595: PUSH
8596: LD_INT 18
8598: PUSH
8599: LD_INT 19
8601: PUSH
8602: LD_INT 20
8604: PUSH
8605: LD_INT 21
8607: PUSH
8608: LD_INT 22
8610: PUSH
8611: LD_INT 23
8613: PUSH
8614: LD_INT 24
8616: PUSH
8617: LD_INT 25
8619: PUSH
8620: LD_INT 26
8622: PUSH
8623: LD_INT 28
8625: PUSH
8626: LD_INT 30
8628: PUSH
8629: LD_INT 31
8631: PUSH
8632: LD_INT 32
8634: PUSH
8635: LD_INT 36
8637: PUSH
8638: EMPTY
8639: LIST
8640: LIST
8641: LIST
8642: LIST
8643: LIST
8644: LIST
8645: LIST
8646: LIST
8647: LIST
8648: LIST
8649: LIST
8650: LIST
8651: LIST
8652: LIST
8653: LIST
8654: LIST
8655: LIST
8656: LIST
8657: LIST
8658: LIST
8659: LIST
8660: LIST
8661: LIST
8662: LIST
8663: LIST
8664: LIST
8665: LIST
8666: LIST
8667: LIST
8668: PUSH
8669: LD_INT 101
8671: PUSH
8672: LD_INT 102
8674: PUSH
8675: LD_INT 103
8677: PUSH
8678: LD_INT 104
8680: PUSH
8681: LD_INT 105
8683: PUSH
8684: LD_INT 106
8686: PUSH
8687: LD_INT 107
8689: PUSH
8690: LD_INT 108
8692: PUSH
8693: LD_INT 109
8695: PUSH
8696: LD_INT 110
8698: PUSH
8699: LD_INT 111
8701: PUSH
8702: LD_INT 112
8704: PUSH
8705: LD_INT 114
8707: PUSH
8708: LD_INT 116
8710: PUSH
8711: LD_INT 117
8713: PUSH
8714: LD_INT 118
8716: PUSH
8717: EMPTY
8718: LIST
8719: LIST
8720: LIST
8721: LIST
8722: LIST
8723: LIST
8724: LIST
8725: LIST
8726: LIST
8727: LIST
8728: LIST
8729: LIST
8730: LIST
8731: LIST
8732: LIST
8733: LIST
8734: PUSH
8735: EMPTY
8736: LIST
8737: LIST
8738: ST_TO_ADDR
8739: GO 10634
8741: LD_INT 11
8743: DOUBLE
8744: EQUAL
8745: IFTRUE 8749
8747: GO 8953
8749: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
8750: LD_ADDR_VAR 0 2
8754: PUSH
8755: LD_INT 2
8757: PUSH
8758: LD_INT 3
8760: PUSH
8761: LD_INT 4
8763: PUSH
8764: LD_INT 5
8766: PUSH
8767: LD_INT 6
8769: PUSH
8770: LD_INT 7
8772: PUSH
8773: LD_INT 8
8775: PUSH
8776: LD_INT 9
8778: PUSH
8779: LD_INT 10
8781: PUSH
8782: LD_INT 11
8784: PUSH
8785: LD_INT 12
8787: PUSH
8788: LD_INT 13
8790: PUSH
8791: LD_INT 14
8793: PUSH
8794: LD_INT 15
8796: PUSH
8797: LD_INT 16
8799: PUSH
8800: LD_INT 17
8802: PUSH
8803: LD_INT 18
8805: PUSH
8806: LD_INT 19
8808: PUSH
8809: LD_INT 20
8811: PUSH
8812: LD_INT 21
8814: PUSH
8815: LD_INT 22
8817: PUSH
8818: LD_INT 23
8820: PUSH
8821: LD_INT 24
8823: PUSH
8824: LD_INT 25
8826: PUSH
8827: LD_INT 26
8829: PUSH
8830: LD_INT 28
8832: PUSH
8833: LD_INT 30
8835: PUSH
8836: LD_INT 31
8838: PUSH
8839: LD_INT 32
8841: PUSH
8842: LD_INT 34
8844: PUSH
8845: LD_INT 36
8847: PUSH
8848: EMPTY
8849: LIST
8850: LIST
8851: LIST
8852: LIST
8853: LIST
8854: LIST
8855: LIST
8856: LIST
8857: LIST
8858: LIST
8859: LIST
8860: LIST
8861: LIST
8862: LIST
8863: LIST
8864: LIST
8865: LIST
8866: LIST
8867: LIST
8868: LIST
8869: LIST
8870: LIST
8871: LIST
8872: LIST
8873: LIST
8874: LIST
8875: LIST
8876: LIST
8877: LIST
8878: LIST
8879: LIST
8880: PUSH
8881: LD_INT 101
8883: PUSH
8884: LD_INT 102
8886: PUSH
8887: LD_INT 103
8889: PUSH
8890: LD_INT 104
8892: PUSH
8893: LD_INT 105
8895: PUSH
8896: LD_INT 106
8898: PUSH
8899: LD_INT 107
8901: PUSH
8902: LD_INT 108
8904: PUSH
8905: LD_INT 109
8907: PUSH
8908: LD_INT 110
8910: PUSH
8911: LD_INT 111
8913: PUSH
8914: LD_INT 112
8916: PUSH
8917: LD_INT 114
8919: PUSH
8920: LD_INT 116
8922: PUSH
8923: LD_INT 117
8925: PUSH
8926: LD_INT 118
8928: PUSH
8929: EMPTY
8930: LIST
8931: LIST
8932: LIST
8933: LIST
8934: LIST
8935: LIST
8936: LIST
8937: LIST
8938: LIST
8939: LIST
8940: LIST
8941: LIST
8942: LIST
8943: LIST
8944: LIST
8945: LIST
8946: PUSH
8947: EMPTY
8948: LIST
8949: LIST
8950: ST_TO_ADDR
8951: GO 10634
8953: LD_INT 12
8955: DOUBLE
8956: EQUAL
8957: IFTRUE 8961
8959: GO 9181
8961: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
8962: LD_ADDR_VAR 0 2
8966: PUSH
8967: LD_INT 1
8969: PUSH
8970: LD_INT 2
8972: PUSH
8973: LD_INT 3
8975: PUSH
8976: LD_INT 4
8978: PUSH
8979: LD_INT 5
8981: PUSH
8982: LD_INT 6
8984: PUSH
8985: LD_INT 7
8987: PUSH
8988: LD_INT 8
8990: PUSH
8991: LD_INT 9
8993: PUSH
8994: LD_INT 10
8996: PUSH
8997: LD_INT 11
8999: PUSH
9000: LD_INT 12
9002: PUSH
9003: LD_INT 13
9005: PUSH
9006: LD_INT 14
9008: PUSH
9009: LD_INT 15
9011: PUSH
9012: LD_INT 16
9014: PUSH
9015: LD_INT 17
9017: PUSH
9018: LD_INT 18
9020: PUSH
9021: LD_INT 19
9023: PUSH
9024: LD_INT 20
9026: PUSH
9027: LD_INT 21
9029: PUSH
9030: LD_INT 22
9032: PUSH
9033: LD_INT 23
9035: PUSH
9036: LD_INT 24
9038: PUSH
9039: LD_INT 25
9041: PUSH
9042: LD_INT 26
9044: PUSH
9045: LD_INT 27
9047: PUSH
9048: LD_INT 28
9050: PUSH
9051: LD_INT 30
9053: PUSH
9054: LD_INT 31
9056: PUSH
9057: LD_INT 32
9059: PUSH
9060: LD_INT 33
9062: PUSH
9063: LD_INT 34
9065: PUSH
9066: LD_INT 36
9068: PUSH
9069: EMPTY
9070: LIST
9071: LIST
9072: LIST
9073: LIST
9074: LIST
9075: LIST
9076: LIST
9077: LIST
9078: LIST
9079: LIST
9080: LIST
9081: LIST
9082: LIST
9083: LIST
9084: LIST
9085: LIST
9086: LIST
9087: LIST
9088: LIST
9089: LIST
9090: LIST
9091: LIST
9092: LIST
9093: LIST
9094: LIST
9095: LIST
9096: LIST
9097: LIST
9098: LIST
9099: LIST
9100: LIST
9101: LIST
9102: LIST
9103: LIST
9104: PUSH
9105: LD_INT 101
9107: PUSH
9108: LD_INT 102
9110: PUSH
9111: LD_INT 103
9113: PUSH
9114: LD_INT 104
9116: PUSH
9117: LD_INT 105
9119: PUSH
9120: LD_INT 106
9122: PUSH
9123: LD_INT 107
9125: PUSH
9126: LD_INT 108
9128: PUSH
9129: LD_INT 109
9131: PUSH
9132: LD_INT 110
9134: PUSH
9135: LD_INT 111
9137: PUSH
9138: LD_INT 112
9140: PUSH
9141: LD_INT 113
9143: PUSH
9144: LD_INT 114
9146: PUSH
9147: LD_INT 116
9149: PUSH
9150: LD_INT 117
9152: PUSH
9153: LD_INT 118
9155: PUSH
9156: EMPTY
9157: LIST
9158: LIST
9159: LIST
9160: LIST
9161: LIST
9162: LIST
9163: LIST
9164: LIST
9165: LIST
9166: LIST
9167: LIST
9168: LIST
9169: LIST
9170: LIST
9171: LIST
9172: LIST
9173: LIST
9174: PUSH
9175: EMPTY
9176: LIST
9177: LIST
9178: ST_TO_ADDR
9179: GO 10634
9181: LD_INT 13
9183: DOUBLE
9184: EQUAL
9185: IFTRUE 9189
9187: GO 9397
9189: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
9190: LD_ADDR_VAR 0 2
9194: PUSH
9195: LD_INT 1
9197: PUSH
9198: LD_INT 2
9200: PUSH
9201: LD_INT 3
9203: PUSH
9204: LD_INT 4
9206: PUSH
9207: LD_INT 5
9209: PUSH
9210: LD_INT 8
9212: PUSH
9213: LD_INT 9
9215: PUSH
9216: LD_INT 10
9218: PUSH
9219: LD_INT 11
9221: PUSH
9222: LD_INT 12
9224: PUSH
9225: LD_INT 14
9227: PUSH
9228: LD_INT 15
9230: PUSH
9231: LD_INT 16
9233: PUSH
9234: LD_INT 17
9236: PUSH
9237: LD_INT 18
9239: PUSH
9240: LD_INT 19
9242: PUSH
9243: LD_INT 20
9245: PUSH
9246: LD_INT 21
9248: PUSH
9249: LD_INT 22
9251: PUSH
9252: LD_INT 23
9254: PUSH
9255: LD_INT 24
9257: PUSH
9258: LD_INT 25
9260: PUSH
9261: LD_INT 26
9263: PUSH
9264: LD_INT 27
9266: PUSH
9267: LD_INT 28
9269: PUSH
9270: LD_INT 30
9272: PUSH
9273: LD_INT 31
9275: PUSH
9276: LD_INT 32
9278: PUSH
9279: LD_INT 33
9281: PUSH
9282: LD_INT 34
9284: PUSH
9285: LD_INT 36
9287: PUSH
9288: EMPTY
9289: LIST
9290: LIST
9291: LIST
9292: LIST
9293: LIST
9294: LIST
9295: LIST
9296: LIST
9297: LIST
9298: LIST
9299: LIST
9300: LIST
9301: LIST
9302: LIST
9303: LIST
9304: LIST
9305: LIST
9306: LIST
9307: LIST
9308: LIST
9309: LIST
9310: LIST
9311: LIST
9312: LIST
9313: LIST
9314: LIST
9315: LIST
9316: LIST
9317: LIST
9318: LIST
9319: LIST
9320: PUSH
9321: LD_INT 101
9323: PUSH
9324: LD_INT 102
9326: PUSH
9327: LD_INT 103
9329: PUSH
9330: LD_INT 104
9332: PUSH
9333: LD_INT 105
9335: PUSH
9336: LD_INT 106
9338: PUSH
9339: LD_INT 107
9341: PUSH
9342: LD_INT 108
9344: PUSH
9345: LD_INT 109
9347: PUSH
9348: LD_INT 110
9350: PUSH
9351: LD_INT 111
9353: PUSH
9354: LD_INT 112
9356: PUSH
9357: LD_INT 113
9359: PUSH
9360: LD_INT 114
9362: PUSH
9363: LD_INT 116
9365: PUSH
9366: LD_INT 117
9368: PUSH
9369: LD_INT 118
9371: PUSH
9372: EMPTY
9373: LIST
9374: LIST
9375: LIST
9376: LIST
9377: LIST
9378: LIST
9379: LIST
9380: LIST
9381: LIST
9382: LIST
9383: LIST
9384: LIST
9385: LIST
9386: LIST
9387: LIST
9388: LIST
9389: LIST
9390: PUSH
9391: EMPTY
9392: LIST
9393: LIST
9394: ST_TO_ADDR
9395: GO 10634
9397: LD_INT 14
9399: DOUBLE
9400: EQUAL
9401: IFTRUE 9405
9403: GO 9629
9405: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
9406: LD_ADDR_VAR 0 2
9410: PUSH
9411: LD_INT 1
9413: PUSH
9414: LD_INT 2
9416: PUSH
9417: LD_INT 3
9419: PUSH
9420: LD_INT 4
9422: PUSH
9423: LD_INT 5
9425: PUSH
9426: LD_INT 6
9428: PUSH
9429: LD_INT 7
9431: PUSH
9432: LD_INT 8
9434: PUSH
9435: LD_INT 9
9437: PUSH
9438: LD_INT 10
9440: PUSH
9441: LD_INT 11
9443: PUSH
9444: LD_INT 12
9446: PUSH
9447: LD_INT 13
9449: PUSH
9450: LD_INT 14
9452: PUSH
9453: LD_INT 15
9455: PUSH
9456: LD_INT 16
9458: PUSH
9459: LD_INT 17
9461: PUSH
9462: LD_INT 18
9464: PUSH
9465: LD_INT 19
9467: PUSH
9468: LD_INT 20
9470: PUSH
9471: LD_INT 21
9473: PUSH
9474: LD_INT 22
9476: PUSH
9477: LD_INT 23
9479: PUSH
9480: LD_INT 24
9482: PUSH
9483: LD_INT 25
9485: PUSH
9486: LD_INT 26
9488: PUSH
9489: LD_INT 27
9491: PUSH
9492: LD_INT 28
9494: PUSH
9495: LD_INT 29
9497: PUSH
9498: LD_INT 30
9500: PUSH
9501: LD_INT 31
9503: PUSH
9504: LD_INT 32
9506: PUSH
9507: LD_INT 33
9509: PUSH
9510: LD_INT 34
9512: PUSH
9513: LD_INT 36
9515: PUSH
9516: EMPTY
9517: LIST
9518: LIST
9519: LIST
9520: LIST
9521: LIST
9522: LIST
9523: LIST
9524: LIST
9525: LIST
9526: LIST
9527: LIST
9528: LIST
9529: LIST
9530: LIST
9531: LIST
9532: LIST
9533: LIST
9534: LIST
9535: LIST
9536: LIST
9537: LIST
9538: LIST
9539: LIST
9540: LIST
9541: LIST
9542: LIST
9543: LIST
9544: LIST
9545: LIST
9546: LIST
9547: LIST
9548: LIST
9549: LIST
9550: LIST
9551: LIST
9552: PUSH
9553: LD_INT 101
9555: PUSH
9556: LD_INT 102
9558: PUSH
9559: LD_INT 103
9561: PUSH
9562: LD_INT 104
9564: PUSH
9565: LD_INT 105
9567: PUSH
9568: LD_INT 106
9570: PUSH
9571: LD_INT 107
9573: PUSH
9574: LD_INT 108
9576: PUSH
9577: LD_INT 109
9579: PUSH
9580: LD_INT 110
9582: PUSH
9583: LD_INT 111
9585: PUSH
9586: LD_INT 112
9588: PUSH
9589: LD_INT 113
9591: PUSH
9592: LD_INT 114
9594: PUSH
9595: LD_INT 116
9597: PUSH
9598: LD_INT 117
9600: PUSH
9601: LD_INT 118
9603: PUSH
9604: EMPTY
9605: LIST
9606: LIST
9607: LIST
9608: LIST
9609: LIST
9610: LIST
9611: LIST
9612: LIST
9613: LIST
9614: LIST
9615: LIST
9616: LIST
9617: LIST
9618: LIST
9619: LIST
9620: LIST
9621: LIST
9622: PUSH
9623: EMPTY
9624: LIST
9625: LIST
9626: ST_TO_ADDR
9627: GO 10634
9629: LD_INT 15
9631: DOUBLE
9632: EQUAL
9633: IFTRUE 9637
9635: GO 9861
9637: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
9638: LD_ADDR_VAR 0 2
9642: PUSH
9643: LD_INT 1
9645: PUSH
9646: LD_INT 2
9648: PUSH
9649: LD_INT 3
9651: PUSH
9652: LD_INT 4
9654: PUSH
9655: LD_INT 5
9657: PUSH
9658: LD_INT 6
9660: PUSH
9661: LD_INT 7
9663: PUSH
9664: LD_INT 8
9666: PUSH
9667: LD_INT 9
9669: PUSH
9670: LD_INT 10
9672: PUSH
9673: LD_INT 11
9675: PUSH
9676: LD_INT 12
9678: PUSH
9679: LD_INT 13
9681: PUSH
9682: LD_INT 14
9684: PUSH
9685: LD_INT 15
9687: PUSH
9688: LD_INT 16
9690: PUSH
9691: LD_INT 17
9693: PUSH
9694: LD_INT 18
9696: PUSH
9697: LD_INT 19
9699: PUSH
9700: LD_INT 20
9702: PUSH
9703: LD_INT 21
9705: PUSH
9706: LD_INT 22
9708: PUSH
9709: LD_INT 23
9711: PUSH
9712: LD_INT 24
9714: PUSH
9715: LD_INT 25
9717: PUSH
9718: LD_INT 26
9720: PUSH
9721: LD_INT 27
9723: PUSH
9724: LD_INT 28
9726: PUSH
9727: LD_INT 29
9729: PUSH
9730: LD_INT 30
9732: PUSH
9733: LD_INT 31
9735: PUSH
9736: LD_INT 32
9738: PUSH
9739: LD_INT 33
9741: PUSH
9742: LD_INT 34
9744: PUSH
9745: LD_INT 36
9747: PUSH
9748: EMPTY
9749: LIST
9750: LIST
9751: LIST
9752: LIST
9753: LIST
9754: LIST
9755: LIST
9756: LIST
9757: LIST
9758: LIST
9759: LIST
9760: LIST
9761: LIST
9762: LIST
9763: LIST
9764: LIST
9765: LIST
9766: LIST
9767: LIST
9768: LIST
9769: LIST
9770: LIST
9771: LIST
9772: LIST
9773: LIST
9774: LIST
9775: LIST
9776: LIST
9777: LIST
9778: LIST
9779: LIST
9780: LIST
9781: LIST
9782: LIST
9783: LIST
9784: PUSH
9785: LD_INT 101
9787: PUSH
9788: LD_INT 102
9790: PUSH
9791: LD_INT 103
9793: PUSH
9794: LD_INT 104
9796: PUSH
9797: LD_INT 105
9799: PUSH
9800: LD_INT 106
9802: PUSH
9803: LD_INT 107
9805: PUSH
9806: LD_INT 108
9808: PUSH
9809: LD_INT 109
9811: PUSH
9812: LD_INT 110
9814: PUSH
9815: LD_INT 111
9817: PUSH
9818: LD_INT 112
9820: PUSH
9821: LD_INT 113
9823: PUSH
9824: LD_INT 114
9826: PUSH
9827: LD_INT 116
9829: PUSH
9830: LD_INT 117
9832: PUSH
9833: LD_INT 118
9835: PUSH
9836: EMPTY
9837: LIST
9838: LIST
9839: LIST
9840: LIST
9841: LIST
9842: LIST
9843: LIST
9844: LIST
9845: LIST
9846: LIST
9847: LIST
9848: LIST
9849: LIST
9850: LIST
9851: LIST
9852: LIST
9853: LIST
9854: PUSH
9855: EMPTY
9856: LIST
9857: LIST
9858: ST_TO_ADDR
9859: GO 10634
9861: LD_INT 16
9863: DOUBLE
9864: EQUAL
9865: IFTRUE 9869
9867: GO 10005
9869: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
9870: LD_ADDR_VAR 0 2
9874: PUSH
9875: LD_INT 2
9877: PUSH
9878: LD_INT 4
9880: PUSH
9881: LD_INT 5
9883: PUSH
9884: LD_INT 7
9886: PUSH
9887: LD_INT 11
9889: PUSH
9890: LD_INT 12
9892: PUSH
9893: LD_INT 15
9895: PUSH
9896: LD_INT 16
9898: PUSH
9899: LD_INT 20
9901: PUSH
9902: LD_INT 21
9904: PUSH
9905: LD_INT 22
9907: PUSH
9908: LD_INT 23
9910: PUSH
9911: LD_INT 25
9913: PUSH
9914: LD_INT 26
9916: PUSH
9917: LD_INT 30
9919: PUSH
9920: LD_INT 31
9922: PUSH
9923: LD_INT 32
9925: PUSH
9926: LD_INT 33
9928: PUSH
9929: LD_INT 34
9931: PUSH
9932: EMPTY
9933: LIST
9934: LIST
9935: LIST
9936: LIST
9937: LIST
9938: LIST
9939: LIST
9940: LIST
9941: LIST
9942: LIST
9943: LIST
9944: LIST
9945: LIST
9946: LIST
9947: LIST
9948: LIST
9949: LIST
9950: LIST
9951: LIST
9952: PUSH
9953: LD_INT 101
9955: PUSH
9956: LD_INT 102
9958: PUSH
9959: LD_INT 103
9961: PUSH
9962: LD_INT 106
9964: PUSH
9965: LD_INT 108
9967: PUSH
9968: LD_INT 112
9970: PUSH
9971: LD_INT 113
9973: PUSH
9974: LD_INT 114
9976: PUSH
9977: LD_INT 116
9979: PUSH
9980: LD_INT 117
9982: PUSH
9983: LD_INT 118
9985: PUSH
9986: EMPTY
9987: LIST
9988: LIST
9989: LIST
9990: LIST
9991: LIST
9992: LIST
9993: LIST
9994: LIST
9995: LIST
9996: LIST
9997: LIST
9998: PUSH
9999: EMPTY
10000: LIST
10001: LIST
10002: ST_TO_ADDR
10003: GO 10634
10005: LD_INT 17
10007: DOUBLE
10008: EQUAL
10009: IFTRUE 10013
10011: GO 10237
10013: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
10014: LD_ADDR_VAR 0 2
10018: PUSH
10019: LD_INT 1
10021: PUSH
10022: LD_INT 2
10024: PUSH
10025: LD_INT 3
10027: PUSH
10028: LD_INT 4
10030: PUSH
10031: LD_INT 5
10033: PUSH
10034: LD_INT 6
10036: PUSH
10037: LD_INT 7
10039: PUSH
10040: LD_INT 8
10042: PUSH
10043: LD_INT 9
10045: PUSH
10046: LD_INT 10
10048: PUSH
10049: LD_INT 11
10051: PUSH
10052: LD_INT 12
10054: PUSH
10055: LD_INT 13
10057: PUSH
10058: LD_INT 14
10060: PUSH
10061: LD_INT 15
10063: PUSH
10064: LD_INT 16
10066: PUSH
10067: LD_INT 17
10069: PUSH
10070: LD_INT 18
10072: PUSH
10073: LD_INT 19
10075: PUSH
10076: LD_INT 20
10078: PUSH
10079: LD_INT 21
10081: PUSH
10082: LD_INT 22
10084: PUSH
10085: LD_INT 23
10087: PUSH
10088: LD_INT 24
10090: PUSH
10091: LD_INT 25
10093: PUSH
10094: LD_INT 26
10096: PUSH
10097: LD_INT 27
10099: PUSH
10100: LD_INT 28
10102: PUSH
10103: LD_INT 29
10105: PUSH
10106: LD_INT 30
10108: PUSH
10109: LD_INT 31
10111: PUSH
10112: LD_INT 32
10114: PUSH
10115: LD_INT 33
10117: PUSH
10118: LD_INT 34
10120: PUSH
10121: LD_INT 36
10123: PUSH
10124: EMPTY
10125: LIST
10126: LIST
10127: LIST
10128: LIST
10129: LIST
10130: LIST
10131: LIST
10132: LIST
10133: LIST
10134: LIST
10135: LIST
10136: LIST
10137: LIST
10138: LIST
10139: LIST
10140: LIST
10141: LIST
10142: LIST
10143: LIST
10144: LIST
10145: LIST
10146: LIST
10147: LIST
10148: LIST
10149: LIST
10150: LIST
10151: LIST
10152: LIST
10153: LIST
10154: LIST
10155: LIST
10156: LIST
10157: LIST
10158: LIST
10159: LIST
10160: PUSH
10161: LD_INT 101
10163: PUSH
10164: LD_INT 102
10166: PUSH
10167: LD_INT 103
10169: PUSH
10170: LD_INT 104
10172: PUSH
10173: LD_INT 105
10175: PUSH
10176: LD_INT 106
10178: PUSH
10179: LD_INT 107
10181: PUSH
10182: LD_INT 108
10184: PUSH
10185: LD_INT 109
10187: PUSH
10188: LD_INT 110
10190: PUSH
10191: LD_INT 111
10193: PUSH
10194: LD_INT 112
10196: PUSH
10197: LD_INT 113
10199: PUSH
10200: LD_INT 114
10202: PUSH
10203: LD_INT 116
10205: PUSH
10206: LD_INT 117
10208: PUSH
10209: LD_INT 118
10211: PUSH
10212: EMPTY
10213: LIST
10214: LIST
10215: LIST
10216: LIST
10217: LIST
10218: LIST
10219: LIST
10220: LIST
10221: LIST
10222: LIST
10223: LIST
10224: LIST
10225: LIST
10226: LIST
10227: LIST
10228: LIST
10229: LIST
10230: PUSH
10231: EMPTY
10232: LIST
10233: LIST
10234: ST_TO_ADDR
10235: GO 10634
10237: LD_INT 18
10239: DOUBLE
10240: EQUAL
10241: IFTRUE 10245
10243: GO 10393
10245: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
10246: LD_ADDR_VAR 0 2
10250: PUSH
10251: LD_INT 2
10253: PUSH
10254: LD_INT 4
10256: PUSH
10257: LD_INT 5
10259: PUSH
10260: LD_INT 7
10262: PUSH
10263: LD_INT 11
10265: PUSH
10266: LD_INT 12
10268: PUSH
10269: LD_INT 15
10271: PUSH
10272: LD_INT 16
10274: PUSH
10275: LD_INT 20
10277: PUSH
10278: LD_INT 21
10280: PUSH
10281: LD_INT 22
10283: PUSH
10284: LD_INT 23
10286: PUSH
10287: LD_INT 25
10289: PUSH
10290: LD_INT 26
10292: PUSH
10293: LD_INT 30
10295: PUSH
10296: LD_INT 31
10298: PUSH
10299: LD_INT 32
10301: PUSH
10302: LD_INT 33
10304: PUSH
10305: LD_INT 34
10307: PUSH
10308: LD_INT 35
10310: PUSH
10311: LD_INT 36
10313: PUSH
10314: EMPTY
10315: LIST
10316: LIST
10317: LIST
10318: LIST
10319: LIST
10320: LIST
10321: LIST
10322: LIST
10323: LIST
10324: LIST
10325: LIST
10326: LIST
10327: LIST
10328: LIST
10329: LIST
10330: LIST
10331: LIST
10332: LIST
10333: LIST
10334: LIST
10335: LIST
10336: PUSH
10337: LD_INT 101
10339: PUSH
10340: LD_INT 102
10342: PUSH
10343: LD_INT 103
10345: PUSH
10346: LD_INT 106
10348: PUSH
10349: LD_INT 108
10351: PUSH
10352: LD_INT 112
10354: PUSH
10355: LD_INT 113
10357: PUSH
10358: LD_INT 114
10360: PUSH
10361: LD_INT 115
10363: PUSH
10364: LD_INT 116
10366: PUSH
10367: LD_INT 117
10369: PUSH
10370: LD_INT 118
10372: PUSH
10373: EMPTY
10374: LIST
10375: LIST
10376: LIST
10377: LIST
10378: LIST
10379: LIST
10380: LIST
10381: LIST
10382: LIST
10383: LIST
10384: LIST
10385: LIST
10386: PUSH
10387: EMPTY
10388: LIST
10389: LIST
10390: ST_TO_ADDR
10391: GO 10634
10393: LD_INT 19
10395: DOUBLE
10396: EQUAL
10397: IFTRUE 10401
10399: GO 10633
10401: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
10402: LD_ADDR_VAR 0 2
10406: PUSH
10407: LD_INT 1
10409: PUSH
10410: LD_INT 2
10412: PUSH
10413: LD_INT 3
10415: PUSH
10416: LD_INT 4
10418: PUSH
10419: LD_INT 5
10421: PUSH
10422: LD_INT 6
10424: PUSH
10425: LD_INT 7
10427: PUSH
10428: LD_INT 8
10430: PUSH
10431: LD_INT 9
10433: PUSH
10434: LD_INT 10
10436: PUSH
10437: LD_INT 11
10439: PUSH
10440: LD_INT 12
10442: PUSH
10443: LD_INT 13
10445: PUSH
10446: LD_INT 14
10448: PUSH
10449: LD_INT 15
10451: PUSH
10452: LD_INT 16
10454: PUSH
10455: LD_INT 17
10457: PUSH
10458: LD_INT 18
10460: PUSH
10461: LD_INT 19
10463: PUSH
10464: LD_INT 20
10466: PUSH
10467: LD_INT 21
10469: PUSH
10470: LD_INT 22
10472: PUSH
10473: LD_INT 23
10475: PUSH
10476: LD_INT 24
10478: PUSH
10479: LD_INT 25
10481: PUSH
10482: LD_INT 26
10484: PUSH
10485: LD_INT 27
10487: PUSH
10488: LD_INT 28
10490: PUSH
10491: LD_INT 29
10493: PUSH
10494: LD_INT 30
10496: PUSH
10497: LD_INT 31
10499: PUSH
10500: LD_INT 32
10502: PUSH
10503: LD_INT 33
10505: PUSH
10506: LD_INT 34
10508: PUSH
10509: LD_INT 35
10511: PUSH
10512: LD_INT 36
10514: PUSH
10515: EMPTY
10516: LIST
10517: LIST
10518: LIST
10519: LIST
10520: LIST
10521: LIST
10522: LIST
10523: LIST
10524: LIST
10525: LIST
10526: LIST
10527: LIST
10528: LIST
10529: LIST
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: LIST
10535: LIST
10536: LIST
10537: LIST
10538: LIST
10539: LIST
10540: LIST
10541: LIST
10542: LIST
10543: LIST
10544: LIST
10545: LIST
10546: LIST
10547: LIST
10548: LIST
10549: LIST
10550: LIST
10551: LIST
10552: PUSH
10553: LD_INT 101
10555: PUSH
10556: LD_INT 102
10558: PUSH
10559: LD_INT 103
10561: PUSH
10562: LD_INT 104
10564: PUSH
10565: LD_INT 105
10567: PUSH
10568: LD_INT 106
10570: PUSH
10571: LD_INT 107
10573: PUSH
10574: LD_INT 108
10576: PUSH
10577: LD_INT 109
10579: PUSH
10580: LD_INT 110
10582: PUSH
10583: LD_INT 111
10585: PUSH
10586: LD_INT 112
10588: PUSH
10589: LD_INT 113
10591: PUSH
10592: LD_INT 114
10594: PUSH
10595: LD_INT 115
10597: PUSH
10598: LD_INT 116
10600: PUSH
10601: LD_INT 117
10603: PUSH
10604: LD_INT 118
10606: PUSH
10607: EMPTY
10608: LIST
10609: LIST
10610: LIST
10611: LIST
10612: LIST
10613: LIST
10614: LIST
10615: LIST
10616: LIST
10617: LIST
10618: LIST
10619: LIST
10620: LIST
10621: LIST
10622: LIST
10623: LIST
10624: LIST
10625: LIST
10626: PUSH
10627: EMPTY
10628: LIST
10629: LIST
10630: ST_TO_ADDR
10631: GO 10634
10633: POP
// end else
10634: GO 10865
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
10636: LD_ADDR_VAR 0 2
10640: PUSH
10641: LD_INT 1
10643: PUSH
10644: LD_INT 2
10646: PUSH
10647: LD_INT 3
10649: PUSH
10650: LD_INT 4
10652: PUSH
10653: LD_INT 5
10655: PUSH
10656: LD_INT 6
10658: PUSH
10659: LD_INT 7
10661: PUSH
10662: LD_INT 8
10664: PUSH
10665: LD_INT 9
10667: PUSH
10668: LD_INT 10
10670: PUSH
10671: LD_INT 11
10673: PUSH
10674: LD_INT 12
10676: PUSH
10677: LD_INT 13
10679: PUSH
10680: LD_INT 14
10682: PUSH
10683: LD_INT 15
10685: PUSH
10686: LD_INT 16
10688: PUSH
10689: LD_INT 17
10691: PUSH
10692: LD_INT 18
10694: PUSH
10695: LD_INT 19
10697: PUSH
10698: LD_INT 20
10700: PUSH
10701: LD_INT 21
10703: PUSH
10704: LD_INT 22
10706: PUSH
10707: LD_INT 23
10709: PUSH
10710: LD_INT 24
10712: PUSH
10713: LD_INT 25
10715: PUSH
10716: LD_INT 26
10718: PUSH
10719: LD_INT 27
10721: PUSH
10722: LD_INT 28
10724: PUSH
10725: LD_INT 29
10727: PUSH
10728: LD_INT 30
10730: PUSH
10731: LD_INT 31
10733: PUSH
10734: LD_INT 32
10736: PUSH
10737: LD_INT 33
10739: PUSH
10740: LD_INT 34
10742: PUSH
10743: LD_INT 35
10745: PUSH
10746: LD_INT 36
10748: PUSH
10749: EMPTY
10750: LIST
10751: LIST
10752: LIST
10753: LIST
10754: LIST
10755: LIST
10756: LIST
10757: LIST
10758: LIST
10759: LIST
10760: LIST
10761: LIST
10762: LIST
10763: LIST
10764: LIST
10765: LIST
10766: LIST
10767: LIST
10768: LIST
10769: LIST
10770: LIST
10771: LIST
10772: LIST
10773: LIST
10774: LIST
10775: LIST
10776: LIST
10777: LIST
10778: LIST
10779: LIST
10780: LIST
10781: LIST
10782: LIST
10783: LIST
10784: LIST
10785: LIST
10786: PUSH
10787: LD_INT 101
10789: PUSH
10790: LD_INT 102
10792: PUSH
10793: LD_INT 103
10795: PUSH
10796: LD_INT 104
10798: PUSH
10799: LD_INT 105
10801: PUSH
10802: LD_INT 106
10804: PUSH
10805: LD_INT 107
10807: PUSH
10808: LD_INT 108
10810: PUSH
10811: LD_INT 109
10813: PUSH
10814: LD_INT 110
10816: PUSH
10817: LD_INT 111
10819: PUSH
10820: LD_INT 112
10822: PUSH
10823: LD_INT 113
10825: PUSH
10826: LD_INT 114
10828: PUSH
10829: LD_INT 115
10831: PUSH
10832: LD_INT 116
10834: PUSH
10835: LD_INT 117
10837: PUSH
10838: LD_INT 118
10840: PUSH
10841: EMPTY
10842: LIST
10843: LIST
10844: LIST
10845: LIST
10846: LIST
10847: LIST
10848: LIST
10849: LIST
10850: LIST
10851: LIST
10852: LIST
10853: LIST
10854: LIST
10855: LIST
10856: LIST
10857: LIST
10858: LIST
10859: LIST
10860: PUSH
10861: EMPTY
10862: LIST
10863: LIST
10864: ST_TO_ADDR
// if result then
10865: LD_VAR 0 2
10869: IFFALSE 11655
// begin normal :=  ;
10871: LD_ADDR_VAR 0 5
10875: PUSH
10876: LD_STRING 
10878: ST_TO_ADDR
// hardcore :=  ;
10879: LD_ADDR_VAR 0 6
10883: PUSH
10884: LD_STRING 
10886: ST_TO_ADDR
// active :=  ;
10887: LD_ADDR_VAR 0 7
10891: PUSH
10892: LD_STRING 
10894: ST_TO_ADDR
// for i = 1 to normalCounter do
10895: LD_ADDR_VAR 0 8
10899: PUSH
10900: DOUBLE
10901: LD_INT 1
10903: DEC
10904: ST_TO_ADDR
10905: LD_EXP 25
10909: PUSH
10910: FOR_TO
10911: IFFALSE 11012
// begin tmp := 0 ;
10913: LD_ADDR_VAR 0 3
10917: PUSH
10918: LD_STRING 0
10920: ST_TO_ADDR
// if result [ 1 ] then
10921: LD_VAR 0 2
10925: PUSH
10926: LD_INT 1
10928: ARRAY
10929: IFFALSE 10994
// if result [ 1 ] [ 1 ] = i then
10931: LD_VAR 0 2
10935: PUSH
10936: LD_INT 1
10938: ARRAY
10939: PUSH
10940: LD_INT 1
10942: ARRAY
10943: PUSH
10944: LD_VAR 0 8
10948: EQUAL
10949: IFFALSE 10994
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
10951: LD_ADDR_VAR 0 2
10955: PUSH
10956: LD_VAR 0 2
10960: PPUSH
10961: LD_INT 1
10963: PPUSH
10964: LD_VAR 0 2
10968: PUSH
10969: LD_INT 1
10971: ARRAY
10972: PPUSH
10973: LD_INT 1
10975: PPUSH
10976: CALL_OW 3
10980: PPUSH
10981: CALL_OW 1
10985: ST_TO_ADDR
// tmp := 1 ;
10986: LD_ADDR_VAR 0 3
10990: PUSH
10991: LD_STRING 1
10993: ST_TO_ADDR
// end ; normal := normal & tmp ;
10994: LD_ADDR_VAR 0 5
10998: PUSH
10999: LD_VAR 0 5
11003: PUSH
11004: LD_VAR 0 3
11008: STR
11009: ST_TO_ADDR
// end ;
11010: GO 10910
11012: POP
11013: POP
// for i = 1 to hardcoreCounter do
11014: LD_ADDR_VAR 0 8
11018: PUSH
11019: DOUBLE
11020: LD_INT 1
11022: DEC
11023: ST_TO_ADDR
11024: LD_EXP 26
11028: PUSH
11029: FOR_TO
11030: IFFALSE 11135
// begin tmp := 0 ;
11032: LD_ADDR_VAR 0 3
11036: PUSH
11037: LD_STRING 0
11039: ST_TO_ADDR
// if result [ 2 ] then
11040: LD_VAR 0 2
11044: PUSH
11045: LD_INT 2
11047: ARRAY
11048: IFFALSE 11117
// if result [ 2 ] [ 1 ] = 100 + i then
11050: LD_VAR 0 2
11054: PUSH
11055: LD_INT 2
11057: ARRAY
11058: PUSH
11059: LD_INT 1
11061: ARRAY
11062: PUSH
11063: LD_INT 100
11065: PUSH
11066: LD_VAR 0 8
11070: PLUS
11071: EQUAL
11072: IFFALSE 11117
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
11074: LD_ADDR_VAR 0 2
11078: PUSH
11079: LD_VAR 0 2
11083: PPUSH
11084: LD_INT 2
11086: PPUSH
11087: LD_VAR 0 2
11091: PUSH
11092: LD_INT 2
11094: ARRAY
11095: PPUSH
11096: LD_INT 1
11098: PPUSH
11099: CALL_OW 3
11103: PPUSH
11104: CALL_OW 1
11108: ST_TO_ADDR
// tmp := 1 ;
11109: LD_ADDR_VAR 0 3
11113: PUSH
11114: LD_STRING 1
11116: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
11117: LD_ADDR_VAR 0 6
11121: PUSH
11122: LD_VAR 0 6
11126: PUSH
11127: LD_VAR 0 3
11131: STR
11132: ST_TO_ADDR
// end ;
11133: GO 11029
11135: POP
11136: POP
// if isGameLoad then
11137: LD_VAR 0 1
11141: IFFALSE 11616
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
11143: LD_ADDR_VAR 0 4
11147: PUSH
11148: LD_EXP 29
11152: PUSH
11153: LD_EXP 28
11157: PUSH
11158: LD_EXP 30
11162: PUSH
11163: LD_EXP 27
11167: PUSH
11168: LD_EXP 31
11172: PUSH
11173: LD_EXP 32
11177: PUSH
11178: LD_EXP 33
11182: PUSH
11183: LD_EXP 34
11187: PUSH
11188: LD_EXP 35
11192: PUSH
11193: LD_EXP 36
11197: PUSH
11198: LD_EXP 37
11202: PUSH
11203: LD_EXP 38
11207: PUSH
11208: LD_EXP 39
11212: PUSH
11213: LD_EXP 40
11217: PUSH
11218: LD_EXP 48
11222: PUSH
11223: LD_EXP 49
11227: PUSH
11228: LD_EXP 50
11232: PUSH
11233: LD_EXP 51
11237: PUSH
11238: LD_EXP 53
11242: PUSH
11243: LD_EXP 54
11247: PUSH
11248: LD_EXP 55
11252: PUSH
11253: LD_EXP 58
11257: PUSH
11258: LD_EXP 60
11262: PUSH
11263: LD_EXP 61
11267: PUSH
11268: LD_EXP 62
11272: PUSH
11273: LD_EXP 64
11277: PUSH
11278: LD_EXP 65
11282: PUSH
11283: LD_EXP 68
11287: PUSH
11288: LD_EXP 69
11292: PUSH
11293: LD_EXP 70
11297: PUSH
11298: LD_EXP 71
11302: PUSH
11303: LD_EXP 72
11307: PUSH
11308: LD_EXP 73
11312: PUSH
11313: LD_EXP 74
11317: PUSH
11318: LD_EXP 75
11322: PUSH
11323: LD_EXP 76
11327: PUSH
11328: LD_EXP 41
11332: PUSH
11333: LD_EXP 42
11337: PUSH
11338: LD_EXP 45
11342: PUSH
11343: LD_EXP 46
11347: PUSH
11348: LD_EXP 47
11352: PUSH
11353: LD_EXP 43
11357: PUSH
11358: LD_EXP 44
11362: PUSH
11363: LD_EXP 52
11367: PUSH
11368: LD_EXP 56
11372: PUSH
11373: LD_EXP 57
11377: PUSH
11378: LD_EXP 59
11382: PUSH
11383: LD_EXP 63
11387: PUSH
11388: LD_EXP 66
11392: PUSH
11393: LD_EXP 67
11397: PUSH
11398: LD_EXP 77
11402: PUSH
11403: LD_EXP 78
11407: PUSH
11408: LD_EXP 79
11412: PUSH
11413: LD_EXP 80
11417: PUSH
11418: EMPTY
11419: LIST
11420: LIST
11421: LIST
11422: LIST
11423: LIST
11424: LIST
11425: LIST
11426: LIST
11427: LIST
11428: LIST
11429: LIST
11430: LIST
11431: LIST
11432: LIST
11433: LIST
11434: LIST
11435: LIST
11436: LIST
11437: LIST
11438: LIST
11439: LIST
11440: LIST
11441: LIST
11442: LIST
11443: LIST
11444: LIST
11445: LIST
11446: LIST
11447: LIST
11448: LIST
11449: LIST
11450: LIST
11451: LIST
11452: LIST
11453: LIST
11454: LIST
11455: LIST
11456: LIST
11457: LIST
11458: LIST
11459: LIST
11460: LIST
11461: LIST
11462: LIST
11463: LIST
11464: LIST
11465: LIST
11466: LIST
11467: LIST
11468: LIST
11469: LIST
11470: LIST
11471: LIST
11472: LIST
11473: ST_TO_ADDR
// tmp :=  ;
11474: LD_ADDR_VAR 0 3
11478: PUSH
11479: LD_STRING 
11481: ST_TO_ADDR
// for i = 1 to normalCounter do
11482: LD_ADDR_VAR 0 8
11486: PUSH
11487: DOUBLE
11488: LD_INT 1
11490: DEC
11491: ST_TO_ADDR
11492: LD_EXP 25
11496: PUSH
11497: FOR_TO
11498: IFFALSE 11534
// begin if flags [ i ] then
11500: LD_VAR 0 4
11504: PUSH
11505: LD_VAR 0 8
11509: ARRAY
11510: IFFALSE 11532
// tmp := tmp & i & ; ;
11512: LD_ADDR_VAR 0 3
11516: PUSH
11517: LD_VAR 0 3
11521: PUSH
11522: LD_VAR 0 8
11526: STR
11527: PUSH
11528: LD_STRING ;
11530: STR
11531: ST_TO_ADDR
// end ;
11532: GO 11497
11534: POP
11535: POP
// for i = 1 to hardcoreCounter do
11536: LD_ADDR_VAR 0 8
11540: PUSH
11541: DOUBLE
11542: LD_INT 1
11544: DEC
11545: ST_TO_ADDR
11546: LD_EXP 26
11550: PUSH
11551: FOR_TO
11552: IFFALSE 11598
// begin if flags [ normalCounter + i ] then
11554: LD_VAR 0 4
11558: PUSH
11559: LD_EXP 25
11563: PUSH
11564: LD_VAR 0 8
11568: PLUS
11569: ARRAY
11570: IFFALSE 11596
// tmp := tmp & ( 100 + i ) & ; ;
11572: LD_ADDR_VAR 0 3
11576: PUSH
11577: LD_VAR 0 3
11581: PUSH
11582: LD_INT 100
11584: PUSH
11585: LD_VAR 0 8
11589: PLUS
11590: STR
11591: PUSH
11592: LD_STRING ;
11594: STR
11595: ST_TO_ADDR
// end ;
11596: GO 11551
11598: POP
11599: POP
// if tmp then
11600: LD_VAR 0 3
11604: IFFALSE 11616
// active := tmp ;
11606: LD_ADDR_VAR 0 7
11610: PUSH
11611: LD_VAR 0 3
11615: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
11616: LD_STRING getStreamItemsFromMission("
11618: PUSH
11619: LD_VAR 0 5
11623: STR
11624: PUSH
11625: LD_STRING ","
11627: STR
11628: PUSH
11629: LD_VAR 0 6
11633: STR
11634: PUSH
11635: LD_STRING ","
11637: STR
11638: PUSH
11639: LD_VAR 0 7
11643: STR
11644: PUSH
11645: LD_STRING ")
11647: STR
11648: PPUSH
11649: CALL_OW 559
// end else
11653: GO 11662
// ToLua ( getStreamItemsFromMission("","","") ) ;
11655: LD_STRING getStreamItemsFromMission("","","")
11657: PPUSH
11658: CALL_OW 559
// end ;
11662: LD_VAR 0 2
11666: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
11667: LD_EXP 24
11671: PUSH
11672: LD_EXP 29
11676: AND
11677: IFFALSE 11801
11679: GO 11681
11681: DISABLE
11682: LD_INT 0
11684: PPUSH
11685: PPUSH
// begin enable ;
11686: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
11687: LD_ADDR_VAR 0 2
11691: PUSH
11692: LD_INT 22
11694: PUSH
11695: LD_OWVAR 2
11699: PUSH
11700: EMPTY
11701: LIST
11702: LIST
11703: PUSH
11704: LD_INT 2
11706: PUSH
11707: LD_INT 34
11709: PUSH
11710: LD_INT 7
11712: PUSH
11713: EMPTY
11714: LIST
11715: LIST
11716: PUSH
11717: LD_INT 34
11719: PUSH
11720: LD_INT 45
11722: PUSH
11723: EMPTY
11724: LIST
11725: LIST
11726: PUSH
11727: LD_INT 34
11729: PUSH
11730: LD_INT 28
11732: PUSH
11733: EMPTY
11734: LIST
11735: LIST
11736: PUSH
11737: LD_INT 34
11739: PUSH
11740: LD_INT 47
11742: PUSH
11743: EMPTY
11744: LIST
11745: LIST
11746: PUSH
11747: EMPTY
11748: LIST
11749: LIST
11750: LIST
11751: LIST
11752: LIST
11753: PUSH
11754: EMPTY
11755: LIST
11756: LIST
11757: PPUSH
11758: CALL_OW 69
11762: ST_TO_ADDR
// if not tmp then
11763: LD_VAR 0 2
11767: NOT
11768: IFFALSE 11772
// exit ;
11770: GO 11801
// for i in tmp do
11772: LD_ADDR_VAR 0 1
11776: PUSH
11777: LD_VAR 0 2
11781: PUSH
11782: FOR_IN
11783: IFFALSE 11799
// begin SetLives ( i , 0 ) ;
11785: LD_VAR 0 1
11789: PPUSH
11790: LD_INT 0
11792: PPUSH
11793: CALL_OW 234
// end ;
11797: GO 11782
11799: POP
11800: POP
// end ;
11801: PPOPN 2
11803: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
11804: LD_EXP 24
11808: PUSH
11809: LD_EXP 30
11813: AND
11814: IFFALSE 11898
11816: GO 11818
11818: DISABLE
11819: LD_INT 0
11821: PPUSH
11822: PPUSH
// begin enable ;
11823: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
11824: LD_ADDR_VAR 0 2
11828: PUSH
11829: LD_INT 22
11831: PUSH
11832: LD_OWVAR 2
11836: PUSH
11837: EMPTY
11838: LIST
11839: LIST
11840: PUSH
11841: LD_INT 32
11843: PUSH
11844: LD_INT 3
11846: PUSH
11847: EMPTY
11848: LIST
11849: LIST
11850: PUSH
11851: EMPTY
11852: LIST
11853: LIST
11854: PPUSH
11855: CALL_OW 69
11859: ST_TO_ADDR
// if not tmp then
11860: LD_VAR 0 2
11864: NOT
11865: IFFALSE 11869
// exit ;
11867: GO 11898
// for i in tmp do
11869: LD_ADDR_VAR 0 1
11873: PUSH
11874: LD_VAR 0 2
11878: PUSH
11879: FOR_IN
11880: IFFALSE 11896
// begin SetLives ( i , 0 ) ;
11882: LD_VAR 0 1
11886: PPUSH
11887: LD_INT 0
11889: PPUSH
11890: CALL_OW 234
// end ;
11894: GO 11879
11896: POP
11897: POP
// end ;
11898: PPOPN 2
11900: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
11901: LD_EXP 24
11905: PUSH
11906: LD_EXP 27
11910: AND
11911: IFFALSE 12004
11913: GO 11915
11915: DISABLE
11916: LD_INT 0
11918: PPUSH
// begin enable ;
11919: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
11920: LD_ADDR_VAR 0 1
11924: PUSH
11925: LD_INT 22
11927: PUSH
11928: LD_OWVAR 2
11932: PUSH
11933: EMPTY
11934: LIST
11935: LIST
11936: PUSH
11937: LD_INT 2
11939: PUSH
11940: LD_INT 25
11942: PUSH
11943: LD_INT 5
11945: PUSH
11946: EMPTY
11947: LIST
11948: LIST
11949: PUSH
11950: LD_INT 25
11952: PUSH
11953: LD_INT 9
11955: PUSH
11956: EMPTY
11957: LIST
11958: LIST
11959: PUSH
11960: LD_INT 25
11962: PUSH
11963: LD_INT 8
11965: PUSH
11966: EMPTY
11967: LIST
11968: LIST
11969: PUSH
11970: EMPTY
11971: LIST
11972: LIST
11973: LIST
11974: LIST
11975: PUSH
11976: EMPTY
11977: LIST
11978: LIST
11979: PPUSH
11980: CALL_OW 69
11984: PUSH
11985: FOR_IN
11986: IFFALSE 12002
// begin SetClass ( i , 1 ) ;
11988: LD_VAR 0 1
11992: PPUSH
11993: LD_INT 1
11995: PPUSH
11996: CALL_OW 336
// end ;
12000: GO 11985
12002: POP
12003: POP
// end ;
12004: PPOPN 1
12006: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
12007: LD_EXP 24
12011: PUSH
12012: LD_EXP 28
12016: AND
12017: PUSH
12018: LD_OWVAR 65
12022: PUSH
12023: LD_INT 7
12025: LESS
12026: AND
12027: IFFALSE 12041
12029: GO 12031
12031: DISABLE
// begin enable ;
12032: ENABLE
// game_speed := 7 ;
12033: LD_ADDR_OWVAR 65
12037: PUSH
12038: LD_INT 7
12040: ST_TO_ADDR
// end ;
12041: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
12042: LD_EXP 24
12046: PUSH
12047: LD_EXP 31
12051: AND
12052: IFFALSE 12254
12054: GO 12056
12056: DISABLE
12057: LD_INT 0
12059: PPUSH
12060: PPUSH
12061: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
12062: LD_ADDR_VAR 0 3
12066: PUSH
12067: LD_INT 81
12069: PUSH
12070: LD_OWVAR 2
12074: PUSH
12075: EMPTY
12076: LIST
12077: LIST
12078: PUSH
12079: LD_INT 21
12081: PUSH
12082: LD_INT 1
12084: PUSH
12085: EMPTY
12086: LIST
12087: LIST
12088: PUSH
12089: EMPTY
12090: LIST
12091: LIST
12092: PPUSH
12093: CALL_OW 69
12097: ST_TO_ADDR
// if not tmp then
12098: LD_VAR 0 3
12102: NOT
12103: IFFALSE 12107
// exit ;
12105: GO 12254
// if tmp > 5 then
12107: LD_VAR 0 3
12111: PUSH
12112: LD_INT 5
12114: GREATER
12115: IFFALSE 12127
// k := 5 else
12117: LD_ADDR_VAR 0 2
12121: PUSH
12122: LD_INT 5
12124: ST_TO_ADDR
12125: GO 12137
// k := tmp ;
12127: LD_ADDR_VAR 0 2
12131: PUSH
12132: LD_VAR 0 3
12136: ST_TO_ADDR
// for i := 1 to k do
12137: LD_ADDR_VAR 0 1
12141: PUSH
12142: DOUBLE
12143: LD_INT 1
12145: DEC
12146: ST_TO_ADDR
12147: LD_VAR 0 2
12151: PUSH
12152: FOR_TO
12153: IFFALSE 12252
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
12155: LD_VAR 0 3
12159: PUSH
12160: LD_VAR 0 1
12164: ARRAY
12165: PPUSH
12166: LD_VAR 0 1
12170: PUSH
12171: LD_INT 4
12173: MOD
12174: PUSH
12175: LD_INT 1
12177: PLUS
12178: PPUSH
12179: CALL_OW 259
12183: PUSH
12184: LD_INT 10
12186: LESS
12187: IFFALSE 12250
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
12189: LD_VAR 0 3
12193: PUSH
12194: LD_VAR 0 1
12198: ARRAY
12199: PPUSH
12200: LD_VAR 0 1
12204: PUSH
12205: LD_INT 4
12207: MOD
12208: PUSH
12209: LD_INT 1
12211: PLUS
12212: PPUSH
12213: LD_VAR 0 3
12217: PUSH
12218: LD_VAR 0 1
12222: ARRAY
12223: PPUSH
12224: LD_VAR 0 1
12228: PUSH
12229: LD_INT 4
12231: MOD
12232: PUSH
12233: LD_INT 1
12235: PLUS
12236: PPUSH
12237: CALL_OW 259
12241: PUSH
12242: LD_INT 1
12244: PLUS
12245: PPUSH
12246: CALL_OW 237
12250: GO 12152
12252: POP
12253: POP
// end ;
12254: PPOPN 3
12256: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
12257: LD_EXP 24
12261: PUSH
12262: LD_EXP 32
12266: AND
12267: IFFALSE 12287
12269: GO 12271
12271: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
12272: LD_INT 4
12274: PPUSH
12275: LD_OWVAR 2
12279: PPUSH
12280: LD_INT 0
12282: PPUSH
12283: CALL_OW 324
12287: END
// every 0 0$1 trigger StreamModeActive and sShovel do
12288: LD_EXP 24
12292: PUSH
12293: LD_EXP 61
12297: AND
12298: IFFALSE 12318
12300: GO 12302
12302: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
12303: LD_INT 19
12305: PPUSH
12306: LD_OWVAR 2
12310: PPUSH
12311: LD_INT 0
12313: PPUSH
12314: CALL_OW 324
12318: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
12319: LD_EXP 24
12323: PUSH
12324: LD_EXP 33
12328: AND
12329: IFFALSE 12431
12331: GO 12333
12333: DISABLE
12334: LD_INT 0
12336: PPUSH
12337: PPUSH
// begin enable ;
12338: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
12339: LD_ADDR_VAR 0 2
12343: PUSH
12344: LD_INT 22
12346: PUSH
12347: LD_OWVAR 2
12351: PUSH
12352: EMPTY
12353: LIST
12354: LIST
12355: PUSH
12356: LD_INT 2
12358: PUSH
12359: LD_INT 34
12361: PUSH
12362: LD_INT 11
12364: PUSH
12365: EMPTY
12366: LIST
12367: LIST
12368: PUSH
12369: LD_INT 34
12371: PUSH
12372: LD_INT 30
12374: PUSH
12375: EMPTY
12376: LIST
12377: LIST
12378: PUSH
12379: EMPTY
12380: LIST
12381: LIST
12382: LIST
12383: PUSH
12384: EMPTY
12385: LIST
12386: LIST
12387: PPUSH
12388: CALL_OW 69
12392: ST_TO_ADDR
// if not tmp then
12393: LD_VAR 0 2
12397: NOT
12398: IFFALSE 12402
// exit ;
12400: GO 12431
// for i in tmp do
12402: LD_ADDR_VAR 0 1
12406: PUSH
12407: LD_VAR 0 2
12411: PUSH
12412: FOR_IN
12413: IFFALSE 12429
// begin SetLives ( i , 0 ) ;
12415: LD_VAR 0 1
12419: PPUSH
12420: LD_INT 0
12422: PPUSH
12423: CALL_OW 234
// end ;
12427: GO 12412
12429: POP
12430: POP
// end ;
12431: PPOPN 2
12433: END
// every 0 0$1 trigger StreamModeActive and sBunker do
12434: LD_EXP 24
12438: PUSH
12439: LD_EXP 34
12443: AND
12444: IFFALSE 12464
12446: GO 12448
12448: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
12449: LD_INT 32
12451: PPUSH
12452: LD_OWVAR 2
12456: PPUSH
12457: LD_INT 0
12459: PPUSH
12460: CALL_OW 324
12464: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
12465: LD_EXP 24
12469: PUSH
12470: LD_EXP 35
12474: AND
12475: IFFALSE 12656
12477: GO 12479
12479: DISABLE
12480: LD_INT 0
12482: PPUSH
12483: PPUSH
12484: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
12485: LD_ADDR_VAR 0 2
12489: PUSH
12490: LD_INT 22
12492: PUSH
12493: LD_OWVAR 2
12497: PUSH
12498: EMPTY
12499: LIST
12500: LIST
12501: PUSH
12502: LD_INT 33
12504: PUSH
12505: LD_INT 3
12507: PUSH
12508: EMPTY
12509: LIST
12510: LIST
12511: PUSH
12512: EMPTY
12513: LIST
12514: LIST
12515: PPUSH
12516: CALL_OW 69
12520: ST_TO_ADDR
// if not tmp then
12521: LD_VAR 0 2
12525: NOT
12526: IFFALSE 12530
// exit ;
12528: GO 12656
// side := 0 ;
12530: LD_ADDR_VAR 0 3
12534: PUSH
12535: LD_INT 0
12537: ST_TO_ADDR
// for i := 1 to 8 do
12538: LD_ADDR_VAR 0 1
12542: PUSH
12543: DOUBLE
12544: LD_INT 1
12546: DEC
12547: ST_TO_ADDR
12548: LD_INT 8
12550: PUSH
12551: FOR_TO
12552: IFFALSE 12600
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
12554: LD_OWVAR 2
12558: PUSH
12559: LD_VAR 0 1
12563: NONEQUAL
12564: PUSH
12565: LD_OWVAR 2
12569: PPUSH
12570: LD_VAR 0 1
12574: PPUSH
12575: CALL_OW 81
12579: PUSH
12580: LD_INT 2
12582: EQUAL
12583: AND
12584: IFFALSE 12598
// begin side := i ;
12586: LD_ADDR_VAR 0 3
12590: PUSH
12591: LD_VAR 0 1
12595: ST_TO_ADDR
// break ;
12596: GO 12600
// end ;
12598: GO 12551
12600: POP
12601: POP
// if not side then
12602: LD_VAR 0 3
12606: NOT
12607: IFFALSE 12611
// exit ;
12609: GO 12656
// for i := 1 to tmp do
12611: LD_ADDR_VAR 0 1
12615: PUSH
12616: DOUBLE
12617: LD_INT 1
12619: DEC
12620: ST_TO_ADDR
12621: LD_VAR 0 2
12625: PUSH
12626: FOR_TO
12627: IFFALSE 12654
// if Prob ( 60 ) then
12629: LD_INT 60
12631: PPUSH
12632: CALL_OW 13
12636: IFFALSE 12652
// SetSide ( i , side ) ;
12638: LD_VAR 0 1
12642: PPUSH
12643: LD_VAR 0 3
12647: PPUSH
12648: CALL_OW 235
12652: GO 12626
12654: POP
12655: POP
// end ;
12656: PPOPN 3
12658: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
12659: LD_EXP 24
12663: PUSH
12664: LD_EXP 37
12668: AND
12669: IFFALSE 12788
12671: GO 12673
12673: DISABLE
12674: LD_INT 0
12676: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
12677: LD_ADDR_VAR 0 1
12681: PUSH
12682: LD_INT 22
12684: PUSH
12685: LD_OWVAR 2
12689: PUSH
12690: EMPTY
12691: LIST
12692: LIST
12693: PUSH
12694: LD_INT 21
12696: PUSH
12697: LD_INT 1
12699: PUSH
12700: EMPTY
12701: LIST
12702: LIST
12703: PUSH
12704: LD_INT 3
12706: PUSH
12707: LD_INT 23
12709: PUSH
12710: LD_INT 0
12712: PUSH
12713: EMPTY
12714: LIST
12715: LIST
12716: PUSH
12717: EMPTY
12718: LIST
12719: LIST
12720: PUSH
12721: EMPTY
12722: LIST
12723: LIST
12724: LIST
12725: PPUSH
12726: CALL_OW 69
12730: PUSH
12731: FOR_IN
12732: IFFALSE 12786
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
12734: LD_VAR 0 1
12738: PPUSH
12739: CALL_OW 257
12743: PUSH
12744: LD_INT 1
12746: PUSH
12747: LD_INT 2
12749: PUSH
12750: LD_INT 3
12752: PUSH
12753: LD_INT 4
12755: PUSH
12756: EMPTY
12757: LIST
12758: LIST
12759: LIST
12760: LIST
12761: IN
12762: IFFALSE 12784
// SetClass ( un , rand ( 1 , 4 ) ) ;
12764: LD_VAR 0 1
12768: PPUSH
12769: LD_INT 1
12771: PPUSH
12772: LD_INT 4
12774: PPUSH
12775: CALL_OW 12
12779: PPUSH
12780: CALL_OW 336
12784: GO 12731
12786: POP
12787: POP
// end ;
12788: PPOPN 1
12790: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
12791: LD_EXP 24
12795: PUSH
12796: LD_EXP 36
12800: AND
12801: IFFALSE 12880
12803: GO 12805
12805: DISABLE
12806: LD_INT 0
12808: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12809: LD_ADDR_VAR 0 1
12813: PUSH
12814: LD_INT 22
12816: PUSH
12817: LD_OWVAR 2
12821: PUSH
12822: EMPTY
12823: LIST
12824: LIST
12825: PUSH
12826: LD_INT 21
12828: PUSH
12829: LD_INT 3
12831: PUSH
12832: EMPTY
12833: LIST
12834: LIST
12835: PUSH
12836: EMPTY
12837: LIST
12838: LIST
12839: PPUSH
12840: CALL_OW 69
12844: ST_TO_ADDR
// if not tmp then
12845: LD_VAR 0 1
12849: NOT
12850: IFFALSE 12854
// exit ;
12852: GO 12880
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
12854: LD_VAR 0 1
12858: PUSH
12859: LD_INT 1
12861: PPUSH
12862: LD_VAR 0 1
12866: PPUSH
12867: CALL_OW 12
12871: ARRAY
12872: PPUSH
12873: LD_INT 100
12875: PPUSH
12876: CALL_OW 234
// end ;
12880: PPOPN 1
12882: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
12883: LD_EXP 24
12887: PUSH
12888: LD_EXP 38
12892: AND
12893: IFFALSE 12991
12895: GO 12897
12897: DISABLE
12898: LD_INT 0
12900: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12901: LD_ADDR_VAR 0 1
12905: PUSH
12906: LD_INT 22
12908: PUSH
12909: LD_OWVAR 2
12913: PUSH
12914: EMPTY
12915: LIST
12916: LIST
12917: PUSH
12918: LD_INT 21
12920: PUSH
12921: LD_INT 1
12923: PUSH
12924: EMPTY
12925: LIST
12926: LIST
12927: PUSH
12928: EMPTY
12929: LIST
12930: LIST
12931: PPUSH
12932: CALL_OW 69
12936: ST_TO_ADDR
// if not tmp then
12937: LD_VAR 0 1
12941: NOT
12942: IFFALSE 12946
// exit ;
12944: GO 12991
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
12946: LD_VAR 0 1
12950: PUSH
12951: LD_INT 1
12953: PPUSH
12954: LD_VAR 0 1
12958: PPUSH
12959: CALL_OW 12
12963: ARRAY
12964: PPUSH
12965: LD_INT 1
12967: PPUSH
12968: LD_INT 4
12970: PPUSH
12971: CALL_OW 12
12975: PPUSH
12976: LD_INT 3000
12978: PPUSH
12979: LD_INT 9000
12981: PPUSH
12982: CALL_OW 12
12986: PPUSH
12987: CALL_OW 492
// end ;
12991: PPOPN 1
12993: END
// every 0 0$1 trigger StreamModeActive and sDepot do
12994: LD_EXP 24
12998: PUSH
12999: LD_EXP 39
13003: AND
13004: IFFALSE 13024
13006: GO 13008
13008: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
13009: LD_INT 1
13011: PPUSH
13012: LD_OWVAR 2
13016: PPUSH
13017: LD_INT 0
13019: PPUSH
13020: CALL_OW 324
13024: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
13025: LD_EXP 24
13029: PUSH
13030: LD_EXP 40
13034: AND
13035: IFFALSE 13118
13037: GO 13039
13039: DISABLE
13040: LD_INT 0
13042: PPUSH
13043: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13044: LD_ADDR_VAR 0 2
13048: PUSH
13049: LD_INT 22
13051: PUSH
13052: LD_OWVAR 2
13056: PUSH
13057: EMPTY
13058: LIST
13059: LIST
13060: PUSH
13061: LD_INT 21
13063: PUSH
13064: LD_INT 3
13066: PUSH
13067: EMPTY
13068: LIST
13069: LIST
13070: PUSH
13071: EMPTY
13072: LIST
13073: LIST
13074: PPUSH
13075: CALL_OW 69
13079: ST_TO_ADDR
// if not tmp then
13080: LD_VAR 0 2
13084: NOT
13085: IFFALSE 13089
// exit ;
13087: GO 13118
// for i in tmp do
13089: LD_ADDR_VAR 0 1
13093: PUSH
13094: LD_VAR 0 2
13098: PUSH
13099: FOR_IN
13100: IFFALSE 13116
// SetBLevel ( i , 10 ) ;
13102: LD_VAR 0 1
13106: PPUSH
13107: LD_INT 10
13109: PPUSH
13110: CALL_OW 241
13114: GO 13099
13116: POP
13117: POP
// end ;
13118: PPOPN 2
13120: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
13121: LD_EXP 24
13125: PUSH
13126: LD_EXP 41
13130: AND
13131: IFFALSE 13242
13133: GO 13135
13135: DISABLE
13136: LD_INT 0
13138: PPUSH
13139: PPUSH
13140: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13141: LD_ADDR_VAR 0 3
13145: PUSH
13146: LD_INT 22
13148: PUSH
13149: LD_OWVAR 2
13153: PUSH
13154: EMPTY
13155: LIST
13156: LIST
13157: PUSH
13158: LD_INT 25
13160: PUSH
13161: LD_INT 1
13163: PUSH
13164: EMPTY
13165: LIST
13166: LIST
13167: PUSH
13168: EMPTY
13169: LIST
13170: LIST
13171: PPUSH
13172: CALL_OW 69
13176: ST_TO_ADDR
// if not tmp then
13177: LD_VAR 0 3
13181: NOT
13182: IFFALSE 13186
// exit ;
13184: GO 13242
// un := tmp [ rand ( 1 , tmp ) ] ;
13186: LD_ADDR_VAR 0 2
13190: PUSH
13191: LD_VAR 0 3
13195: PUSH
13196: LD_INT 1
13198: PPUSH
13199: LD_VAR 0 3
13203: PPUSH
13204: CALL_OW 12
13208: ARRAY
13209: ST_TO_ADDR
// if Crawls ( un ) then
13210: LD_VAR 0 2
13214: PPUSH
13215: CALL_OW 318
13219: IFFALSE 13230
// ComWalk ( un ) ;
13221: LD_VAR 0 2
13225: PPUSH
13226: CALL_OW 138
// SetClass ( un , class_sniper ) ;
13230: LD_VAR 0 2
13234: PPUSH
13235: LD_INT 5
13237: PPUSH
13238: CALL_OW 336
// end ;
13242: PPOPN 3
13244: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
13245: LD_EXP 24
13249: PUSH
13250: LD_EXP 42
13254: AND
13255: PUSH
13256: LD_OWVAR 67
13260: PUSH
13261: LD_INT 4
13263: LESS
13264: AND
13265: IFFALSE 13284
13267: GO 13269
13269: DISABLE
// begin Difficulty := Difficulty + 1 ;
13270: LD_ADDR_OWVAR 67
13274: PUSH
13275: LD_OWVAR 67
13279: PUSH
13280: LD_INT 1
13282: PLUS
13283: ST_TO_ADDR
// end ;
13284: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
13285: LD_EXP 24
13289: PUSH
13290: LD_EXP 43
13294: AND
13295: IFFALSE 13398
13297: GO 13299
13299: DISABLE
13300: LD_INT 0
13302: PPUSH
// begin for i := 1 to 5 do
13303: LD_ADDR_VAR 0 1
13307: PUSH
13308: DOUBLE
13309: LD_INT 1
13311: DEC
13312: ST_TO_ADDR
13313: LD_INT 5
13315: PUSH
13316: FOR_TO
13317: IFFALSE 13396
// begin uc_nation := nation_nature ;
13319: LD_ADDR_OWVAR 21
13323: PUSH
13324: LD_INT 0
13326: ST_TO_ADDR
// uc_side := 0 ;
13327: LD_ADDR_OWVAR 20
13331: PUSH
13332: LD_INT 0
13334: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13335: LD_ADDR_OWVAR 29
13339: PUSH
13340: LD_INT 12
13342: PUSH
13343: LD_INT 12
13345: PUSH
13346: EMPTY
13347: LIST
13348: LIST
13349: ST_TO_ADDR
// hc_agressivity := 20 ;
13350: LD_ADDR_OWVAR 35
13354: PUSH
13355: LD_INT 20
13357: ST_TO_ADDR
// hc_class := class_tiger ;
13358: LD_ADDR_OWVAR 28
13362: PUSH
13363: LD_INT 14
13365: ST_TO_ADDR
// hc_gallery :=  ;
13366: LD_ADDR_OWVAR 33
13370: PUSH
13371: LD_STRING 
13373: ST_TO_ADDR
// hc_name :=  ;
13374: LD_ADDR_OWVAR 26
13378: PUSH
13379: LD_STRING 
13381: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
13382: CALL_OW 44
13386: PPUSH
13387: LD_INT 0
13389: PPUSH
13390: CALL_OW 51
// end ;
13394: GO 13316
13396: POP
13397: POP
// end ;
13398: PPOPN 1
13400: END
// every 0 0$1 trigger StreamModeActive and sBomb do
13401: LD_EXP 24
13405: PUSH
13406: LD_EXP 44
13410: AND
13411: IFFALSE 13420
13413: GO 13415
13415: DISABLE
// StreamSibBomb ;
13416: CALL 13421 0 0
13420: END
// export function StreamSibBomb ; var i , x , y ; begin
13421: LD_INT 0
13423: PPUSH
13424: PPUSH
13425: PPUSH
13426: PPUSH
// result := false ;
13427: LD_ADDR_VAR 0 1
13431: PUSH
13432: LD_INT 0
13434: ST_TO_ADDR
// for i := 1 to 16 do
13435: LD_ADDR_VAR 0 2
13439: PUSH
13440: DOUBLE
13441: LD_INT 1
13443: DEC
13444: ST_TO_ADDR
13445: LD_INT 16
13447: PUSH
13448: FOR_TO
13449: IFFALSE 13648
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13451: LD_ADDR_VAR 0 3
13455: PUSH
13456: LD_INT 10
13458: PUSH
13459: LD_INT 20
13461: PUSH
13462: LD_INT 30
13464: PUSH
13465: LD_INT 40
13467: PUSH
13468: LD_INT 50
13470: PUSH
13471: LD_INT 60
13473: PUSH
13474: LD_INT 70
13476: PUSH
13477: LD_INT 80
13479: PUSH
13480: LD_INT 90
13482: PUSH
13483: LD_INT 100
13485: PUSH
13486: LD_INT 110
13488: PUSH
13489: LD_INT 120
13491: PUSH
13492: LD_INT 130
13494: PUSH
13495: LD_INT 140
13497: PUSH
13498: LD_INT 150
13500: PUSH
13501: EMPTY
13502: LIST
13503: LIST
13504: LIST
13505: LIST
13506: LIST
13507: LIST
13508: LIST
13509: LIST
13510: LIST
13511: LIST
13512: LIST
13513: LIST
13514: LIST
13515: LIST
13516: LIST
13517: PUSH
13518: LD_INT 1
13520: PPUSH
13521: LD_INT 15
13523: PPUSH
13524: CALL_OW 12
13528: ARRAY
13529: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13530: LD_ADDR_VAR 0 4
13534: PUSH
13535: LD_INT 10
13537: PUSH
13538: LD_INT 20
13540: PUSH
13541: LD_INT 30
13543: PUSH
13544: LD_INT 40
13546: PUSH
13547: LD_INT 50
13549: PUSH
13550: LD_INT 60
13552: PUSH
13553: LD_INT 70
13555: PUSH
13556: LD_INT 80
13558: PUSH
13559: LD_INT 90
13561: PUSH
13562: LD_INT 100
13564: PUSH
13565: LD_INT 110
13567: PUSH
13568: LD_INT 120
13570: PUSH
13571: LD_INT 130
13573: PUSH
13574: LD_INT 140
13576: PUSH
13577: LD_INT 150
13579: PUSH
13580: EMPTY
13581: LIST
13582: LIST
13583: LIST
13584: LIST
13585: LIST
13586: LIST
13587: LIST
13588: LIST
13589: LIST
13590: LIST
13591: LIST
13592: LIST
13593: LIST
13594: LIST
13595: LIST
13596: PUSH
13597: LD_INT 1
13599: PPUSH
13600: LD_INT 15
13602: PPUSH
13603: CALL_OW 12
13607: ARRAY
13608: ST_TO_ADDR
// if ValidHex ( x , y ) then
13609: LD_VAR 0 3
13613: PPUSH
13614: LD_VAR 0 4
13618: PPUSH
13619: CALL_OW 488
13623: IFFALSE 13646
// begin result := [ x , y ] ;
13625: LD_ADDR_VAR 0 1
13629: PUSH
13630: LD_VAR 0 3
13634: PUSH
13635: LD_VAR 0 4
13639: PUSH
13640: EMPTY
13641: LIST
13642: LIST
13643: ST_TO_ADDR
// break ;
13644: GO 13648
// end ; end ;
13646: GO 13448
13648: POP
13649: POP
// if result then
13650: LD_VAR 0 1
13654: IFFALSE 13714
// begin ToLua ( playSibBomb() ) ;
13656: LD_STRING playSibBomb()
13658: PPUSH
13659: CALL_OW 559
// wait ( 0 0$14 ) ;
13663: LD_INT 490
13665: PPUSH
13666: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
13670: LD_VAR 0 1
13674: PUSH
13675: LD_INT 1
13677: ARRAY
13678: PPUSH
13679: LD_VAR 0 1
13683: PUSH
13684: LD_INT 2
13686: ARRAY
13687: PPUSH
13688: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
13692: LD_VAR 0 1
13696: PUSH
13697: LD_INT 1
13699: ARRAY
13700: PPUSH
13701: LD_VAR 0 1
13705: PUSH
13706: LD_INT 2
13708: ARRAY
13709: PPUSH
13710: CALL_OW 429
// end ; end ;
13714: LD_VAR 0 1
13718: RET
// every 0 0$1 trigger StreamModeActive and sReset do
13719: LD_EXP 24
13723: PUSH
13724: LD_EXP 46
13728: AND
13729: IFFALSE 13741
13731: GO 13733
13733: DISABLE
// YouLost (  ) ;
13734: LD_STRING 
13736: PPUSH
13737: CALL_OW 104
13741: END
// every 0 0$1 trigger StreamModeActive and sFog do
13742: LD_EXP 24
13746: PUSH
13747: LD_EXP 45
13751: AND
13752: IFFALSE 13766
13754: GO 13756
13756: DISABLE
// FogOff ( your_side ) ;
13757: LD_OWVAR 2
13761: PPUSH
13762: CALL_OW 344
13766: END
// every 0 0$1 trigger StreamModeActive and sSun do
13767: LD_EXP 24
13771: PUSH
13772: LD_EXP 47
13776: AND
13777: IFFALSE 13805
13779: GO 13781
13781: DISABLE
// begin solar_recharge_percent := 0 ;
13782: LD_ADDR_OWVAR 79
13786: PUSH
13787: LD_INT 0
13789: ST_TO_ADDR
// wait ( 5 5$00 ) ;
13790: LD_INT 10500
13792: PPUSH
13793: CALL_OW 67
// solar_recharge_percent := 100 ;
13797: LD_ADDR_OWVAR 79
13801: PUSH
13802: LD_INT 100
13804: ST_TO_ADDR
// end ;
13805: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
13806: LD_EXP 24
13810: PUSH
13811: LD_EXP 48
13815: AND
13816: IFFALSE 14055
13818: GO 13820
13820: DISABLE
13821: LD_INT 0
13823: PPUSH
13824: PPUSH
13825: PPUSH
// begin tmp := [ ] ;
13826: LD_ADDR_VAR 0 3
13830: PUSH
13831: EMPTY
13832: ST_TO_ADDR
// for i := 1 to 6 do
13833: LD_ADDR_VAR 0 1
13837: PUSH
13838: DOUBLE
13839: LD_INT 1
13841: DEC
13842: ST_TO_ADDR
13843: LD_INT 6
13845: PUSH
13846: FOR_TO
13847: IFFALSE 13952
// begin uc_nation := nation_nature ;
13849: LD_ADDR_OWVAR 21
13853: PUSH
13854: LD_INT 0
13856: ST_TO_ADDR
// uc_side := 0 ;
13857: LD_ADDR_OWVAR 20
13861: PUSH
13862: LD_INT 0
13864: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13865: LD_ADDR_OWVAR 29
13869: PUSH
13870: LD_INT 12
13872: PUSH
13873: LD_INT 12
13875: PUSH
13876: EMPTY
13877: LIST
13878: LIST
13879: ST_TO_ADDR
// hc_agressivity := 20 ;
13880: LD_ADDR_OWVAR 35
13884: PUSH
13885: LD_INT 20
13887: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
13888: LD_ADDR_OWVAR 28
13892: PUSH
13893: LD_INT 17
13895: ST_TO_ADDR
// hc_gallery :=  ;
13896: LD_ADDR_OWVAR 33
13900: PUSH
13901: LD_STRING 
13903: ST_TO_ADDR
// hc_name :=  ;
13904: LD_ADDR_OWVAR 26
13908: PUSH
13909: LD_STRING 
13911: ST_TO_ADDR
// un := CreateHuman ;
13912: LD_ADDR_VAR 0 2
13916: PUSH
13917: CALL_OW 44
13921: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
13922: LD_VAR 0 2
13926: PPUSH
13927: LD_INT 1
13929: PPUSH
13930: CALL_OW 51
// tmp := tmp ^ un ;
13934: LD_ADDR_VAR 0 3
13938: PUSH
13939: LD_VAR 0 3
13943: PUSH
13944: LD_VAR 0 2
13948: ADD
13949: ST_TO_ADDR
// end ;
13950: GO 13846
13952: POP
13953: POP
// repeat wait ( 0 0$1 ) ;
13954: LD_INT 35
13956: PPUSH
13957: CALL_OW 67
// for un in tmp do
13961: LD_ADDR_VAR 0 2
13965: PUSH
13966: LD_VAR 0 3
13970: PUSH
13971: FOR_IN
13972: IFFALSE 14046
// begin if IsDead ( un ) then
13974: LD_VAR 0 2
13978: PPUSH
13979: CALL_OW 301
13983: IFFALSE 14003
// begin tmp := tmp diff un ;
13985: LD_ADDR_VAR 0 3
13989: PUSH
13990: LD_VAR 0 3
13994: PUSH
13995: LD_VAR 0 2
13999: DIFF
14000: ST_TO_ADDR
// continue ;
14001: GO 13971
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
14003: LD_VAR 0 2
14007: PPUSH
14008: LD_INT 3
14010: PUSH
14011: LD_INT 22
14013: PUSH
14014: LD_INT 0
14016: PUSH
14017: EMPTY
14018: LIST
14019: LIST
14020: PUSH
14021: EMPTY
14022: LIST
14023: LIST
14024: PPUSH
14025: CALL_OW 69
14029: PPUSH
14030: LD_VAR 0 2
14034: PPUSH
14035: CALL_OW 74
14039: PPUSH
14040: CALL_OW 115
// end ;
14044: GO 13971
14046: POP
14047: POP
// until not tmp ;
14048: LD_VAR 0 3
14052: NOT
14053: IFFALSE 13954
// end ;
14055: PPOPN 3
14057: END
// every 0 0$1 trigger StreamModeActive and sTroll do
14058: LD_EXP 24
14062: PUSH
14063: LD_EXP 49
14067: AND
14068: IFFALSE 14122
14070: GO 14072
14072: DISABLE
// begin ToLua ( displayTroll(); ) ;
14073: LD_STRING displayTroll();
14075: PPUSH
14076: CALL_OW 559
// wait ( 3 3$00 ) ;
14080: LD_INT 6300
14082: PPUSH
14083: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14087: LD_STRING hideTroll();
14089: PPUSH
14090: CALL_OW 559
// wait ( 1 1$00 ) ;
14094: LD_INT 2100
14096: PPUSH
14097: CALL_OW 67
// ToLua ( displayTroll(); ) ;
14101: LD_STRING displayTroll();
14103: PPUSH
14104: CALL_OW 559
// wait ( 1 1$00 ) ;
14108: LD_INT 2100
14110: PPUSH
14111: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14115: LD_STRING hideTroll();
14117: PPUSH
14118: CALL_OW 559
// end ;
14122: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
14123: LD_EXP 24
14127: PUSH
14128: LD_EXP 50
14132: AND
14133: IFFALSE 14196
14135: GO 14137
14137: DISABLE
14138: LD_INT 0
14140: PPUSH
// begin p := 0 ;
14141: LD_ADDR_VAR 0 1
14145: PUSH
14146: LD_INT 0
14148: ST_TO_ADDR
// repeat game_speed := 1 ;
14149: LD_ADDR_OWVAR 65
14153: PUSH
14154: LD_INT 1
14156: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14157: LD_INT 35
14159: PPUSH
14160: CALL_OW 67
// p := p + 1 ;
14164: LD_ADDR_VAR 0 1
14168: PUSH
14169: LD_VAR 0 1
14173: PUSH
14174: LD_INT 1
14176: PLUS
14177: ST_TO_ADDR
// until p >= 60 ;
14178: LD_VAR 0 1
14182: PUSH
14183: LD_INT 60
14185: GREATEREQUAL
14186: IFFALSE 14149
// game_speed := 4 ;
14188: LD_ADDR_OWVAR 65
14192: PUSH
14193: LD_INT 4
14195: ST_TO_ADDR
// end ;
14196: PPOPN 1
14198: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
14199: LD_EXP 24
14203: PUSH
14204: LD_EXP 51
14208: AND
14209: IFFALSE 14355
14211: GO 14213
14213: DISABLE
14214: LD_INT 0
14216: PPUSH
14217: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14218: LD_ADDR_VAR 0 1
14222: PUSH
14223: LD_INT 22
14225: PUSH
14226: LD_OWVAR 2
14230: PUSH
14231: EMPTY
14232: LIST
14233: LIST
14234: PUSH
14235: LD_INT 2
14237: PUSH
14238: LD_INT 30
14240: PUSH
14241: LD_INT 0
14243: PUSH
14244: EMPTY
14245: LIST
14246: LIST
14247: PUSH
14248: LD_INT 30
14250: PUSH
14251: LD_INT 1
14253: PUSH
14254: EMPTY
14255: LIST
14256: LIST
14257: PUSH
14258: EMPTY
14259: LIST
14260: LIST
14261: LIST
14262: PUSH
14263: EMPTY
14264: LIST
14265: LIST
14266: PPUSH
14267: CALL_OW 69
14271: ST_TO_ADDR
// if not depot then
14272: LD_VAR 0 1
14276: NOT
14277: IFFALSE 14281
// exit ;
14279: GO 14355
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
14281: LD_ADDR_VAR 0 2
14285: PUSH
14286: LD_VAR 0 1
14290: PUSH
14291: LD_INT 1
14293: PPUSH
14294: LD_VAR 0 1
14298: PPUSH
14299: CALL_OW 12
14303: ARRAY
14304: PPUSH
14305: CALL_OW 274
14309: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
14310: LD_VAR 0 2
14314: PPUSH
14315: LD_INT 1
14317: PPUSH
14318: LD_INT 0
14320: PPUSH
14321: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
14325: LD_VAR 0 2
14329: PPUSH
14330: LD_INT 2
14332: PPUSH
14333: LD_INT 0
14335: PPUSH
14336: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
14340: LD_VAR 0 2
14344: PPUSH
14345: LD_INT 3
14347: PPUSH
14348: LD_INT 0
14350: PPUSH
14351: CALL_OW 277
// end ;
14355: PPOPN 2
14357: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
14358: LD_EXP 24
14362: PUSH
14363: LD_EXP 52
14367: AND
14368: IFFALSE 14465
14370: GO 14372
14372: DISABLE
14373: LD_INT 0
14375: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14376: LD_ADDR_VAR 0 1
14380: PUSH
14381: LD_INT 22
14383: PUSH
14384: LD_OWVAR 2
14388: PUSH
14389: EMPTY
14390: LIST
14391: LIST
14392: PUSH
14393: LD_INT 21
14395: PUSH
14396: LD_INT 1
14398: PUSH
14399: EMPTY
14400: LIST
14401: LIST
14402: PUSH
14403: LD_INT 3
14405: PUSH
14406: LD_INT 23
14408: PUSH
14409: LD_INT 0
14411: PUSH
14412: EMPTY
14413: LIST
14414: LIST
14415: PUSH
14416: EMPTY
14417: LIST
14418: LIST
14419: PUSH
14420: EMPTY
14421: LIST
14422: LIST
14423: LIST
14424: PPUSH
14425: CALL_OW 69
14429: ST_TO_ADDR
// if not tmp then
14430: LD_VAR 0 1
14434: NOT
14435: IFFALSE 14439
// exit ;
14437: GO 14465
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
14439: LD_VAR 0 1
14443: PUSH
14444: LD_INT 1
14446: PPUSH
14447: LD_VAR 0 1
14451: PPUSH
14452: CALL_OW 12
14456: ARRAY
14457: PPUSH
14458: LD_INT 200
14460: PPUSH
14461: CALL_OW 234
// end ;
14465: PPOPN 1
14467: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
14468: LD_EXP 24
14472: PUSH
14473: LD_EXP 53
14477: AND
14478: IFFALSE 14557
14480: GO 14482
14482: DISABLE
14483: LD_INT 0
14485: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
14486: LD_ADDR_VAR 0 1
14490: PUSH
14491: LD_INT 22
14493: PUSH
14494: LD_OWVAR 2
14498: PUSH
14499: EMPTY
14500: LIST
14501: LIST
14502: PUSH
14503: LD_INT 21
14505: PUSH
14506: LD_INT 2
14508: PUSH
14509: EMPTY
14510: LIST
14511: LIST
14512: PUSH
14513: EMPTY
14514: LIST
14515: LIST
14516: PPUSH
14517: CALL_OW 69
14521: ST_TO_ADDR
// if not tmp then
14522: LD_VAR 0 1
14526: NOT
14527: IFFALSE 14531
// exit ;
14529: GO 14557
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
14531: LD_VAR 0 1
14535: PUSH
14536: LD_INT 1
14538: PPUSH
14539: LD_VAR 0 1
14543: PPUSH
14544: CALL_OW 12
14548: ARRAY
14549: PPUSH
14550: LD_INT 60
14552: PPUSH
14553: CALL_OW 234
// end ;
14557: PPOPN 1
14559: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
14560: LD_EXP 24
14564: PUSH
14565: LD_EXP 54
14569: AND
14570: IFFALSE 14669
14572: GO 14574
14574: DISABLE
14575: LD_INT 0
14577: PPUSH
14578: PPUSH
// begin enable ;
14579: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
14580: LD_ADDR_VAR 0 1
14584: PUSH
14585: LD_INT 22
14587: PUSH
14588: LD_OWVAR 2
14592: PUSH
14593: EMPTY
14594: LIST
14595: LIST
14596: PUSH
14597: LD_INT 61
14599: PUSH
14600: EMPTY
14601: LIST
14602: PUSH
14603: LD_INT 33
14605: PUSH
14606: LD_INT 2
14608: PUSH
14609: EMPTY
14610: LIST
14611: LIST
14612: PUSH
14613: EMPTY
14614: LIST
14615: LIST
14616: LIST
14617: PPUSH
14618: CALL_OW 69
14622: ST_TO_ADDR
// if not tmp then
14623: LD_VAR 0 1
14627: NOT
14628: IFFALSE 14632
// exit ;
14630: GO 14669
// for i in tmp do
14632: LD_ADDR_VAR 0 2
14636: PUSH
14637: LD_VAR 0 1
14641: PUSH
14642: FOR_IN
14643: IFFALSE 14667
// if IsControledBy ( i ) then
14645: LD_VAR 0 2
14649: PPUSH
14650: CALL_OW 312
14654: IFFALSE 14665
// ComUnlink ( i ) ;
14656: LD_VAR 0 2
14660: PPUSH
14661: CALL_OW 136
14665: GO 14642
14667: POP
14668: POP
// end ;
14669: PPOPN 2
14671: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
14672: LD_EXP 24
14676: PUSH
14677: LD_EXP 55
14681: AND
14682: IFFALSE 14822
14684: GO 14686
14686: DISABLE
14687: LD_INT 0
14689: PPUSH
14690: PPUSH
// begin ToLua ( displayPowell(); ) ;
14691: LD_STRING displayPowell();
14693: PPUSH
14694: CALL_OW 559
// uc_side := 0 ;
14698: LD_ADDR_OWVAR 20
14702: PUSH
14703: LD_INT 0
14705: ST_TO_ADDR
// uc_nation := 2 ;
14706: LD_ADDR_OWVAR 21
14710: PUSH
14711: LD_INT 2
14713: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
14714: LD_ADDR_OWVAR 37
14718: PUSH
14719: LD_INT 14
14721: ST_TO_ADDR
// vc_engine := engine_siberite ;
14722: LD_ADDR_OWVAR 39
14726: PUSH
14727: LD_INT 3
14729: ST_TO_ADDR
// vc_control := control_apeman ;
14730: LD_ADDR_OWVAR 38
14734: PUSH
14735: LD_INT 5
14737: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
14738: LD_ADDR_OWVAR 40
14742: PUSH
14743: LD_INT 29
14745: ST_TO_ADDR
// un := CreateVehicle ;
14746: LD_ADDR_VAR 0 2
14750: PUSH
14751: CALL_OW 45
14755: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14756: LD_VAR 0 2
14760: PPUSH
14761: LD_INT 1
14763: PPUSH
14764: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14768: LD_INT 35
14770: PPUSH
14771: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14775: LD_VAR 0 2
14779: PPUSH
14780: LD_INT 22
14782: PUSH
14783: LD_OWVAR 2
14787: PUSH
14788: EMPTY
14789: LIST
14790: LIST
14791: PPUSH
14792: CALL_OW 69
14796: PPUSH
14797: LD_VAR 0 2
14801: PPUSH
14802: CALL_OW 74
14806: PPUSH
14807: CALL_OW 115
// until IsDead ( un ) ;
14811: LD_VAR 0 2
14815: PPUSH
14816: CALL_OW 301
14820: IFFALSE 14768
// end ;
14822: PPOPN 2
14824: END
// every 0 0$1 trigger StreamModeActive and sStu do
14825: LD_EXP 24
14829: PUSH
14830: LD_EXP 63
14834: AND
14835: IFFALSE 14851
14837: GO 14839
14839: DISABLE
// begin ToLua ( displayStucuk(); ) ;
14840: LD_STRING displayStucuk();
14842: PPUSH
14843: CALL_OW 559
// ResetFog ;
14847: CALL_OW 335
// end ;
14851: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
14852: LD_EXP 24
14856: PUSH
14857: LD_EXP 56
14861: AND
14862: IFFALSE 15003
14864: GO 14866
14866: DISABLE
14867: LD_INT 0
14869: PPUSH
14870: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14871: LD_ADDR_VAR 0 2
14875: PUSH
14876: LD_INT 22
14878: PUSH
14879: LD_OWVAR 2
14883: PUSH
14884: EMPTY
14885: LIST
14886: LIST
14887: PUSH
14888: LD_INT 21
14890: PUSH
14891: LD_INT 1
14893: PUSH
14894: EMPTY
14895: LIST
14896: LIST
14897: PUSH
14898: EMPTY
14899: LIST
14900: LIST
14901: PPUSH
14902: CALL_OW 69
14906: ST_TO_ADDR
// if not tmp then
14907: LD_VAR 0 2
14911: NOT
14912: IFFALSE 14916
// exit ;
14914: GO 15003
// un := tmp [ rand ( 1 , tmp ) ] ;
14916: LD_ADDR_VAR 0 1
14920: PUSH
14921: LD_VAR 0 2
14925: PUSH
14926: LD_INT 1
14928: PPUSH
14929: LD_VAR 0 2
14933: PPUSH
14934: CALL_OW 12
14938: ARRAY
14939: ST_TO_ADDR
// SetSide ( un , 0 ) ;
14940: LD_VAR 0 1
14944: PPUSH
14945: LD_INT 0
14947: PPUSH
14948: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
14952: LD_VAR 0 1
14956: PPUSH
14957: LD_OWVAR 3
14961: PUSH
14962: LD_VAR 0 1
14966: DIFF
14967: PPUSH
14968: LD_VAR 0 1
14972: PPUSH
14973: CALL_OW 74
14977: PPUSH
14978: CALL_OW 115
// wait ( 0 0$20 ) ;
14982: LD_INT 700
14984: PPUSH
14985: CALL_OW 67
// SetSide ( un , your_side ) ;
14989: LD_VAR 0 1
14993: PPUSH
14994: LD_OWVAR 2
14998: PPUSH
14999: CALL_OW 235
// end ;
15003: PPOPN 2
15005: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
15006: LD_EXP 24
15010: PUSH
15011: LD_EXP 57
15015: AND
15016: IFFALSE 15122
15018: GO 15020
15020: DISABLE
15021: LD_INT 0
15023: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15024: LD_ADDR_VAR 0 1
15028: PUSH
15029: LD_INT 22
15031: PUSH
15032: LD_OWVAR 2
15036: PUSH
15037: EMPTY
15038: LIST
15039: LIST
15040: PUSH
15041: LD_INT 2
15043: PUSH
15044: LD_INT 30
15046: PUSH
15047: LD_INT 0
15049: PUSH
15050: EMPTY
15051: LIST
15052: LIST
15053: PUSH
15054: LD_INT 30
15056: PUSH
15057: LD_INT 1
15059: PUSH
15060: EMPTY
15061: LIST
15062: LIST
15063: PUSH
15064: EMPTY
15065: LIST
15066: LIST
15067: LIST
15068: PUSH
15069: EMPTY
15070: LIST
15071: LIST
15072: PPUSH
15073: CALL_OW 69
15077: ST_TO_ADDR
// if not depot then
15078: LD_VAR 0 1
15082: NOT
15083: IFFALSE 15087
// exit ;
15085: GO 15122
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
15087: LD_VAR 0 1
15091: PUSH
15092: LD_INT 1
15094: ARRAY
15095: PPUSH
15096: CALL_OW 250
15100: PPUSH
15101: LD_VAR 0 1
15105: PUSH
15106: LD_INT 1
15108: ARRAY
15109: PPUSH
15110: CALL_OW 251
15114: PPUSH
15115: LD_INT 70
15117: PPUSH
15118: CALL_OW 495
// end ;
15122: PPOPN 1
15124: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
15125: LD_EXP 24
15129: PUSH
15130: LD_EXP 58
15134: AND
15135: IFFALSE 15346
15137: GO 15139
15139: DISABLE
15140: LD_INT 0
15142: PPUSH
15143: PPUSH
15144: PPUSH
15145: PPUSH
15146: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15147: LD_ADDR_VAR 0 5
15151: PUSH
15152: LD_INT 22
15154: PUSH
15155: LD_OWVAR 2
15159: PUSH
15160: EMPTY
15161: LIST
15162: LIST
15163: PUSH
15164: LD_INT 21
15166: PUSH
15167: LD_INT 1
15169: PUSH
15170: EMPTY
15171: LIST
15172: LIST
15173: PUSH
15174: EMPTY
15175: LIST
15176: LIST
15177: PPUSH
15178: CALL_OW 69
15182: ST_TO_ADDR
// if not tmp then
15183: LD_VAR 0 5
15187: NOT
15188: IFFALSE 15192
// exit ;
15190: GO 15346
// for i in tmp do
15192: LD_ADDR_VAR 0 1
15196: PUSH
15197: LD_VAR 0 5
15201: PUSH
15202: FOR_IN
15203: IFFALSE 15344
// begin d := rand ( 0 , 5 ) ;
15205: LD_ADDR_VAR 0 4
15209: PUSH
15210: LD_INT 0
15212: PPUSH
15213: LD_INT 5
15215: PPUSH
15216: CALL_OW 12
15220: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
15221: LD_ADDR_VAR 0 2
15225: PUSH
15226: LD_VAR 0 1
15230: PPUSH
15231: CALL_OW 250
15235: PPUSH
15236: LD_VAR 0 4
15240: PPUSH
15241: LD_INT 3
15243: PPUSH
15244: LD_INT 12
15246: PPUSH
15247: CALL_OW 12
15251: PPUSH
15252: CALL_OW 272
15256: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
15257: LD_ADDR_VAR 0 3
15261: PUSH
15262: LD_VAR 0 1
15266: PPUSH
15267: CALL_OW 251
15271: PPUSH
15272: LD_VAR 0 4
15276: PPUSH
15277: LD_INT 3
15279: PPUSH
15280: LD_INT 12
15282: PPUSH
15283: CALL_OW 12
15287: PPUSH
15288: CALL_OW 273
15292: ST_TO_ADDR
// if ValidHex ( x , y ) then
15293: LD_VAR 0 2
15297: PPUSH
15298: LD_VAR 0 3
15302: PPUSH
15303: CALL_OW 488
15307: IFFALSE 15342
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
15309: LD_VAR 0 1
15313: PPUSH
15314: LD_VAR 0 2
15318: PPUSH
15319: LD_VAR 0 3
15323: PPUSH
15324: LD_INT 3
15326: PPUSH
15327: LD_INT 6
15329: PPUSH
15330: CALL_OW 12
15334: PPUSH
15335: LD_INT 1
15337: PPUSH
15338: CALL_OW 483
// end ;
15342: GO 15202
15344: POP
15345: POP
// end ;
15346: PPOPN 5
15348: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
15349: LD_EXP 24
15353: PUSH
15354: LD_EXP 59
15358: AND
15359: IFFALSE 15453
15361: GO 15363
15363: DISABLE
15364: LD_INT 0
15366: PPUSH
15367: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
15368: LD_ADDR_VAR 0 2
15372: PUSH
15373: LD_INT 22
15375: PUSH
15376: LD_OWVAR 2
15380: PUSH
15381: EMPTY
15382: LIST
15383: LIST
15384: PUSH
15385: LD_INT 32
15387: PUSH
15388: LD_INT 1
15390: PUSH
15391: EMPTY
15392: LIST
15393: LIST
15394: PUSH
15395: LD_INT 21
15397: PUSH
15398: LD_INT 2
15400: PUSH
15401: EMPTY
15402: LIST
15403: LIST
15404: PUSH
15405: EMPTY
15406: LIST
15407: LIST
15408: LIST
15409: PPUSH
15410: CALL_OW 69
15414: ST_TO_ADDR
// if not tmp then
15415: LD_VAR 0 2
15419: NOT
15420: IFFALSE 15424
// exit ;
15422: GO 15453
// for i in tmp do
15424: LD_ADDR_VAR 0 1
15428: PUSH
15429: LD_VAR 0 2
15433: PUSH
15434: FOR_IN
15435: IFFALSE 15451
// SetFuel ( i , 0 ) ;
15437: LD_VAR 0 1
15441: PPUSH
15442: LD_INT 0
15444: PPUSH
15445: CALL_OW 240
15449: GO 15434
15451: POP
15452: POP
// end ;
15453: PPOPN 2
15455: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
15456: LD_EXP 24
15460: PUSH
15461: LD_EXP 60
15465: AND
15466: IFFALSE 15532
15468: GO 15470
15470: DISABLE
15471: LD_INT 0
15473: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15474: LD_ADDR_VAR 0 1
15478: PUSH
15479: LD_INT 22
15481: PUSH
15482: LD_OWVAR 2
15486: PUSH
15487: EMPTY
15488: LIST
15489: LIST
15490: PUSH
15491: LD_INT 30
15493: PUSH
15494: LD_INT 29
15496: PUSH
15497: EMPTY
15498: LIST
15499: LIST
15500: PUSH
15501: EMPTY
15502: LIST
15503: LIST
15504: PPUSH
15505: CALL_OW 69
15509: ST_TO_ADDR
// if not tmp then
15510: LD_VAR 0 1
15514: NOT
15515: IFFALSE 15519
// exit ;
15517: GO 15532
// DestroyUnit ( tmp [ 1 ] ) ;
15519: LD_VAR 0 1
15523: PUSH
15524: LD_INT 1
15526: ARRAY
15527: PPUSH
15528: CALL_OW 65
// end ;
15532: PPOPN 1
15534: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
15535: LD_EXP 24
15539: PUSH
15540: LD_EXP 62
15544: AND
15545: IFFALSE 15674
15547: GO 15549
15549: DISABLE
15550: LD_INT 0
15552: PPUSH
// begin uc_side := 0 ;
15553: LD_ADDR_OWVAR 20
15557: PUSH
15558: LD_INT 0
15560: ST_TO_ADDR
// uc_nation := nation_arabian ;
15561: LD_ADDR_OWVAR 21
15565: PUSH
15566: LD_INT 2
15568: ST_TO_ADDR
// hc_gallery :=  ;
15569: LD_ADDR_OWVAR 33
15573: PUSH
15574: LD_STRING 
15576: ST_TO_ADDR
// hc_name :=  ;
15577: LD_ADDR_OWVAR 26
15581: PUSH
15582: LD_STRING 
15584: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
15585: LD_INT 1
15587: PPUSH
15588: LD_INT 11
15590: PPUSH
15591: LD_INT 10
15593: PPUSH
15594: CALL_OW 380
// un := CreateHuman ;
15598: LD_ADDR_VAR 0 1
15602: PUSH
15603: CALL_OW 44
15607: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15608: LD_VAR 0 1
15612: PPUSH
15613: LD_INT 1
15615: PPUSH
15616: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15620: LD_INT 35
15622: PPUSH
15623: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15627: LD_VAR 0 1
15631: PPUSH
15632: LD_INT 22
15634: PUSH
15635: LD_OWVAR 2
15639: PUSH
15640: EMPTY
15641: LIST
15642: LIST
15643: PPUSH
15644: CALL_OW 69
15648: PPUSH
15649: LD_VAR 0 1
15653: PPUSH
15654: CALL_OW 74
15658: PPUSH
15659: CALL_OW 115
// until IsDead ( un ) ;
15663: LD_VAR 0 1
15667: PPUSH
15668: CALL_OW 301
15672: IFFALSE 15620
// end ;
15674: PPOPN 1
15676: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
15677: LD_EXP 24
15681: PUSH
15682: LD_EXP 64
15686: AND
15687: IFFALSE 15699
15689: GO 15691
15691: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
15692: LD_STRING earthquake(getX(game), 0, 32)
15694: PPUSH
15695: CALL_OW 559
15699: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
15700: LD_EXP 24
15704: PUSH
15705: LD_EXP 65
15709: AND
15710: IFFALSE 15801
15712: GO 15714
15714: DISABLE
15715: LD_INT 0
15717: PPUSH
// begin enable ;
15718: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
15719: LD_ADDR_VAR 0 1
15723: PUSH
15724: LD_INT 22
15726: PUSH
15727: LD_OWVAR 2
15731: PUSH
15732: EMPTY
15733: LIST
15734: LIST
15735: PUSH
15736: LD_INT 21
15738: PUSH
15739: LD_INT 2
15741: PUSH
15742: EMPTY
15743: LIST
15744: LIST
15745: PUSH
15746: LD_INT 33
15748: PUSH
15749: LD_INT 3
15751: PUSH
15752: EMPTY
15753: LIST
15754: LIST
15755: PUSH
15756: EMPTY
15757: LIST
15758: LIST
15759: LIST
15760: PPUSH
15761: CALL_OW 69
15765: ST_TO_ADDR
// if not tmp then
15766: LD_VAR 0 1
15770: NOT
15771: IFFALSE 15775
// exit ;
15773: GO 15801
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15775: LD_VAR 0 1
15779: PUSH
15780: LD_INT 1
15782: PPUSH
15783: LD_VAR 0 1
15787: PPUSH
15788: CALL_OW 12
15792: ARRAY
15793: PPUSH
15794: LD_INT 1
15796: PPUSH
15797: CALL_OW 234
// end ;
15801: PPOPN 1
15803: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
15804: LD_EXP 24
15808: PUSH
15809: LD_EXP 66
15813: AND
15814: IFFALSE 15955
15816: GO 15818
15818: DISABLE
15819: LD_INT 0
15821: PPUSH
15822: PPUSH
15823: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15824: LD_ADDR_VAR 0 3
15828: PUSH
15829: LD_INT 22
15831: PUSH
15832: LD_OWVAR 2
15836: PUSH
15837: EMPTY
15838: LIST
15839: LIST
15840: PUSH
15841: LD_INT 25
15843: PUSH
15844: LD_INT 1
15846: PUSH
15847: EMPTY
15848: LIST
15849: LIST
15850: PUSH
15851: EMPTY
15852: LIST
15853: LIST
15854: PPUSH
15855: CALL_OW 69
15859: ST_TO_ADDR
// if not tmp then
15860: LD_VAR 0 3
15864: NOT
15865: IFFALSE 15869
// exit ;
15867: GO 15955
// un := tmp [ rand ( 1 , tmp ) ] ;
15869: LD_ADDR_VAR 0 2
15873: PUSH
15874: LD_VAR 0 3
15878: PUSH
15879: LD_INT 1
15881: PPUSH
15882: LD_VAR 0 3
15886: PPUSH
15887: CALL_OW 12
15891: ARRAY
15892: ST_TO_ADDR
// if Crawls ( un ) then
15893: LD_VAR 0 2
15897: PPUSH
15898: CALL_OW 318
15902: IFFALSE 15913
// ComWalk ( un ) ;
15904: LD_VAR 0 2
15908: PPUSH
15909: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
15913: LD_VAR 0 2
15917: PPUSH
15918: LD_INT 9
15920: PPUSH
15921: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
15925: LD_INT 28
15927: PPUSH
15928: LD_OWVAR 2
15932: PPUSH
15933: LD_INT 2
15935: PPUSH
15936: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
15940: LD_INT 29
15942: PPUSH
15943: LD_OWVAR 2
15947: PPUSH
15948: LD_INT 2
15950: PPUSH
15951: CALL_OW 322
// end ;
15955: PPOPN 3
15957: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
15958: LD_EXP 24
15962: PUSH
15963: LD_EXP 67
15967: AND
15968: IFFALSE 16079
15970: GO 15972
15972: DISABLE
15973: LD_INT 0
15975: PPUSH
15976: PPUSH
15977: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15978: LD_ADDR_VAR 0 3
15982: PUSH
15983: LD_INT 22
15985: PUSH
15986: LD_OWVAR 2
15990: PUSH
15991: EMPTY
15992: LIST
15993: LIST
15994: PUSH
15995: LD_INT 25
15997: PUSH
15998: LD_INT 1
16000: PUSH
16001: EMPTY
16002: LIST
16003: LIST
16004: PUSH
16005: EMPTY
16006: LIST
16007: LIST
16008: PPUSH
16009: CALL_OW 69
16013: ST_TO_ADDR
// if not tmp then
16014: LD_VAR 0 3
16018: NOT
16019: IFFALSE 16023
// exit ;
16021: GO 16079
// un := tmp [ rand ( 1 , tmp ) ] ;
16023: LD_ADDR_VAR 0 2
16027: PUSH
16028: LD_VAR 0 3
16032: PUSH
16033: LD_INT 1
16035: PPUSH
16036: LD_VAR 0 3
16040: PPUSH
16041: CALL_OW 12
16045: ARRAY
16046: ST_TO_ADDR
// if Crawls ( un ) then
16047: LD_VAR 0 2
16051: PPUSH
16052: CALL_OW 318
16056: IFFALSE 16067
// ComWalk ( un ) ;
16058: LD_VAR 0 2
16062: PPUSH
16063: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16067: LD_VAR 0 2
16071: PPUSH
16072: LD_INT 8
16074: PPUSH
16075: CALL_OW 336
// end ;
16079: PPOPN 3
16081: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
16082: LD_EXP 24
16086: PUSH
16087: LD_EXP 68
16091: AND
16092: IFFALSE 16236
16094: GO 16096
16096: DISABLE
16097: LD_INT 0
16099: PPUSH
16100: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
16101: LD_ADDR_VAR 0 2
16105: PUSH
16106: LD_INT 22
16108: PUSH
16109: LD_OWVAR 2
16113: PUSH
16114: EMPTY
16115: LIST
16116: LIST
16117: PUSH
16118: LD_INT 21
16120: PUSH
16121: LD_INT 2
16123: PUSH
16124: EMPTY
16125: LIST
16126: LIST
16127: PUSH
16128: LD_INT 2
16130: PUSH
16131: LD_INT 34
16133: PUSH
16134: LD_INT 12
16136: PUSH
16137: EMPTY
16138: LIST
16139: LIST
16140: PUSH
16141: LD_INT 34
16143: PUSH
16144: LD_INT 51
16146: PUSH
16147: EMPTY
16148: LIST
16149: LIST
16150: PUSH
16151: LD_INT 34
16153: PUSH
16154: LD_INT 32
16156: PUSH
16157: EMPTY
16158: LIST
16159: LIST
16160: PUSH
16161: EMPTY
16162: LIST
16163: LIST
16164: LIST
16165: LIST
16166: PUSH
16167: EMPTY
16168: LIST
16169: LIST
16170: LIST
16171: PPUSH
16172: CALL_OW 69
16176: ST_TO_ADDR
// if not tmp then
16177: LD_VAR 0 2
16181: NOT
16182: IFFALSE 16186
// exit ;
16184: GO 16236
// for i in tmp do
16186: LD_ADDR_VAR 0 1
16190: PUSH
16191: LD_VAR 0 2
16195: PUSH
16196: FOR_IN
16197: IFFALSE 16234
// if GetCargo ( i , mat_artifact ) = 0 then
16199: LD_VAR 0 1
16203: PPUSH
16204: LD_INT 4
16206: PPUSH
16207: CALL_OW 289
16211: PUSH
16212: LD_INT 0
16214: EQUAL
16215: IFFALSE 16232
// SetCargo ( i , mat_siberit , 100 ) ;
16217: LD_VAR 0 1
16221: PPUSH
16222: LD_INT 3
16224: PPUSH
16225: LD_INT 100
16227: PPUSH
16228: CALL_OW 290
16232: GO 16196
16234: POP
16235: POP
// end ;
16236: PPOPN 2
16238: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
16239: LD_EXP 24
16243: PUSH
16244: LD_EXP 69
16248: AND
16249: IFFALSE 16432
16251: GO 16253
16253: DISABLE
16254: LD_INT 0
16256: PPUSH
16257: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16258: LD_ADDR_VAR 0 2
16262: PUSH
16263: LD_INT 22
16265: PUSH
16266: LD_OWVAR 2
16270: PUSH
16271: EMPTY
16272: LIST
16273: LIST
16274: PPUSH
16275: CALL_OW 69
16279: ST_TO_ADDR
// if not tmp then
16280: LD_VAR 0 2
16284: NOT
16285: IFFALSE 16289
// exit ;
16287: GO 16432
// for i := 1 to 2 do
16289: LD_ADDR_VAR 0 1
16293: PUSH
16294: DOUBLE
16295: LD_INT 1
16297: DEC
16298: ST_TO_ADDR
16299: LD_INT 2
16301: PUSH
16302: FOR_TO
16303: IFFALSE 16430
// begin uc_side := your_side ;
16305: LD_ADDR_OWVAR 20
16309: PUSH
16310: LD_OWVAR 2
16314: ST_TO_ADDR
// uc_nation := nation_american ;
16315: LD_ADDR_OWVAR 21
16319: PUSH
16320: LD_INT 1
16322: ST_TO_ADDR
// vc_chassis := us_morphling ;
16323: LD_ADDR_OWVAR 37
16327: PUSH
16328: LD_INT 5
16330: ST_TO_ADDR
// vc_engine := engine_siberite ;
16331: LD_ADDR_OWVAR 39
16335: PUSH
16336: LD_INT 3
16338: ST_TO_ADDR
// vc_control := control_computer ;
16339: LD_ADDR_OWVAR 38
16343: PUSH
16344: LD_INT 3
16346: ST_TO_ADDR
// vc_weapon := us_double_laser ;
16347: LD_ADDR_OWVAR 40
16351: PUSH
16352: LD_INT 10
16354: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
16355: LD_VAR 0 2
16359: PUSH
16360: LD_INT 1
16362: ARRAY
16363: PPUSH
16364: CALL_OW 310
16368: NOT
16369: IFFALSE 16416
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
16371: CALL_OW 45
16375: PPUSH
16376: LD_VAR 0 2
16380: PUSH
16381: LD_INT 1
16383: ARRAY
16384: PPUSH
16385: CALL_OW 250
16389: PPUSH
16390: LD_VAR 0 2
16394: PUSH
16395: LD_INT 1
16397: ARRAY
16398: PPUSH
16399: CALL_OW 251
16403: PPUSH
16404: LD_INT 12
16406: PPUSH
16407: LD_INT 1
16409: PPUSH
16410: CALL_OW 50
16414: GO 16428
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
16416: CALL_OW 45
16420: PPUSH
16421: LD_INT 1
16423: PPUSH
16424: CALL_OW 51
// end ;
16428: GO 16302
16430: POP
16431: POP
// end ;
16432: PPOPN 2
16434: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
16435: LD_EXP 24
16439: PUSH
16440: LD_EXP 70
16444: AND
16445: IFFALSE 16667
16447: GO 16449
16449: DISABLE
16450: LD_INT 0
16452: PPUSH
16453: PPUSH
16454: PPUSH
16455: PPUSH
16456: PPUSH
16457: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16458: LD_ADDR_VAR 0 6
16462: PUSH
16463: LD_INT 22
16465: PUSH
16466: LD_OWVAR 2
16470: PUSH
16471: EMPTY
16472: LIST
16473: LIST
16474: PUSH
16475: LD_INT 21
16477: PUSH
16478: LD_INT 1
16480: PUSH
16481: EMPTY
16482: LIST
16483: LIST
16484: PUSH
16485: LD_INT 3
16487: PUSH
16488: LD_INT 23
16490: PUSH
16491: LD_INT 0
16493: PUSH
16494: EMPTY
16495: LIST
16496: LIST
16497: PUSH
16498: EMPTY
16499: LIST
16500: LIST
16501: PUSH
16502: EMPTY
16503: LIST
16504: LIST
16505: LIST
16506: PPUSH
16507: CALL_OW 69
16511: ST_TO_ADDR
// if not tmp then
16512: LD_VAR 0 6
16516: NOT
16517: IFFALSE 16521
// exit ;
16519: GO 16667
// s1 := rand ( 1 , 4 ) ;
16521: LD_ADDR_VAR 0 2
16525: PUSH
16526: LD_INT 1
16528: PPUSH
16529: LD_INT 4
16531: PPUSH
16532: CALL_OW 12
16536: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
16537: LD_ADDR_VAR 0 4
16541: PUSH
16542: LD_VAR 0 6
16546: PUSH
16547: LD_INT 1
16549: ARRAY
16550: PPUSH
16551: LD_VAR 0 2
16555: PPUSH
16556: CALL_OW 259
16560: ST_TO_ADDR
// if s1 = 1 then
16561: LD_VAR 0 2
16565: PUSH
16566: LD_INT 1
16568: EQUAL
16569: IFFALSE 16589
// s2 := rand ( 2 , 4 ) else
16571: LD_ADDR_VAR 0 3
16575: PUSH
16576: LD_INT 2
16578: PPUSH
16579: LD_INT 4
16581: PPUSH
16582: CALL_OW 12
16586: ST_TO_ADDR
16587: GO 16597
// s2 := 1 ;
16589: LD_ADDR_VAR 0 3
16593: PUSH
16594: LD_INT 1
16596: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
16597: LD_ADDR_VAR 0 5
16601: PUSH
16602: LD_VAR 0 6
16606: PUSH
16607: LD_INT 1
16609: ARRAY
16610: PPUSH
16611: LD_VAR 0 3
16615: PPUSH
16616: CALL_OW 259
16620: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
16621: LD_VAR 0 6
16625: PUSH
16626: LD_INT 1
16628: ARRAY
16629: PPUSH
16630: LD_VAR 0 2
16634: PPUSH
16635: LD_VAR 0 5
16639: PPUSH
16640: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
16644: LD_VAR 0 6
16648: PUSH
16649: LD_INT 1
16651: ARRAY
16652: PPUSH
16653: LD_VAR 0 3
16657: PPUSH
16658: LD_VAR 0 4
16662: PPUSH
16663: CALL_OW 237
// end ;
16667: PPOPN 6
16669: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
16670: LD_EXP 24
16674: PUSH
16675: LD_EXP 71
16679: AND
16680: IFFALSE 16759
16682: GO 16684
16684: DISABLE
16685: LD_INT 0
16687: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
16688: LD_ADDR_VAR 0 1
16692: PUSH
16693: LD_INT 22
16695: PUSH
16696: LD_OWVAR 2
16700: PUSH
16701: EMPTY
16702: LIST
16703: LIST
16704: PUSH
16705: LD_INT 30
16707: PUSH
16708: LD_INT 3
16710: PUSH
16711: EMPTY
16712: LIST
16713: LIST
16714: PUSH
16715: EMPTY
16716: LIST
16717: LIST
16718: PPUSH
16719: CALL_OW 69
16723: ST_TO_ADDR
// if not tmp then
16724: LD_VAR 0 1
16728: NOT
16729: IFFALSE 16733
// exit ;
16731: GO 16759
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16733: LD_VAR 0 1
16737: PUSH
16738: LD_INT 1
16740: PPUSH
16741: LD_VAR 0 1
16745: PPUSH
16746: CALL_OW 12
16750: ARRAY
16751: PPUSH
16752: LD_INT 1
16754: PPUSH
16755: CALL_OW 234
// end ;
16759: PPOPN 1
16761: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
16762: LD_EXP 24
16766: PUSH
16767: LD_EXP 72
16771: AND
16772: IFFALSE 16884
16774: GO 16776
16776: DISABLE
16777: LD_INT 0
16779: PPUSH
16780: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
16781: LD_ADDR_VAR 0 2
16785: PUSH
16786: LD_INT 22
16788: PUSH
16789: LD_OWVAR 2
16793: PUSH
16794: EMPTY
16795: LIST
16796: LIST
16797: PUSH
16798: LD_INT 2
16800: PUSH
16801: LD_INT 30
16803: PUSH
16804: LD_INT 27
16806: PUSH
16807: EMPTY
16808: LIST
16809: LIST
16810: PUSH
16811: LD_INT 30
16813: PUSH
16814: LD_INT 26
16816: PUSH
16817: EMPTY
16818: LIST
16819: LIST
16820: PUSH
16821: LD_INT 30
16823: PUSH
16824: LD_INT 28
16826: PUSH
16827: EMPTY
16828: LIST
16829: LIST
16830: PUSH
16831: EMPTY
16832: LIST
16833: LIST
16834: LIST
16835: LIST
16836: PUSH
16837: EMPTY
16838: LIST
16839: LIST
16840: PPUSH
16841: CALL_OW 69
16845: ST_TO_ADDR
// if not tmp then
16846: LD_VAR 0 2
16850: NOT
16851: IFFALSE 16855
// exit ;
16853: GO 16884
// for i in tmp do
16855: LD_ADDR_VAR 0 1
16859: PUSH
16860: LD_VAR 0 2
16864: PUSH
16865: FOR_IN
16866: IFFALSE 16882
// SetLives ( i , 1 ) ;
16868: LD_VAR 0 1
16872: PPUSH
16873: LD_INT 1
16875: PPUSH
16876: CALL_OW 234
16880: GO 16865
16882: POP
16883: POP
// end ;
16884: PPOPN 2
16886: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
16887: LD_EXP 24
16891: PUSH
16892: LD_EXP 73
16896: AND
16897: IFFALSE 17184
16899: GO 16901
16901: DISABLE
16902: LD_INT 0
16904: PPUSH
16905: PPUSH
16906: PPUSH
// begin i := rand ( 1 , 7 ) ;
16907: LD_ADDR_VAR 0 1
16911: PUSH
16912: LD_INT 1
16914: PPUSH
16915: LD_INT 7
16917: PPUSH
16918: CALL_OW 12
16922: ST_TO_ADDR
// case i of 1 :
16923: LD_VAR 0 1
16927: PUSH
16928: LD_INT 1
16930: DOUBLE
16931: EQUAL
16932: IFTRUE 16936
16934: GO 16946
16936: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
16937: LD_STRING earthquake(getX(game), 0, 32)
16939: PPUSH
16940: CALL_OW 559
16944: GO 17184
16946: LD_INT 2
16948: DOUBLE
16949: EQUAL
16950: IFTRUE 16954
16952: GO 16968
16954: POP
// begin ToLua ( displayStucuk(); ) ;
16955: LD_STRING displayStucuk();
16957: PPUSH
16958: CALL_OW 559
// ResetFog ;
16962: CALL_OW 335
// end ; 3 :
16966: GO 17184
16968: LD_INT 3
16970: DOUBLE
16971: EQUAL
16972: IFTRUE 16976
16974: GO 17080
16976: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16977: LD_ADDR_VAR 0 2
16981: PUSH
16982: LD_INT 22
16984: PUSH
16985: LD_OWVAR 2
16989: PUSH
16990: EMPTY
16991: LIST
16992: LIST
16993: PUSH
16994: LD_INT 25
16996: PUSH
16997: LD_INT 1
16999: PUSH
17000: EMPTY
17001: LIST
17002: LIST
17003: PUSH
17004: EMPTY
17005: LIST
17006: LIST
17007: PPUSH
17008: CALL_OW 69
17012: ST_TO_ADDR
// if not tmp then
17013: LD_VAR 0 2
17017: NOT
17018: IFFALSE 17022
// exit ;
17020: GO 17184
// un := tmp [ rand ( 1 , tmp ) ] ;
17022: LD_ADDR_VAR 0 3
17026: PUSH
17027: LD_VAR 0 2
17031: PUSH
17032: LD_INT 1
17034: PPUSH
17035: LD_VAR 0 2
17039: PPUSH
17040: CALL_OW 12
17044: ARRAY
17045: ST_TO_ADDR
// if Crawls ( un ) then
17046: LD_VAR 0 3
17050: PPUSH
17051: CALL_OW 318
17055: IFFALSE 17066
// ComWalk ( un ) ;
17057: LD_VAR 0 3
17061: PPUSH
17062: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17066: LD_VAR 0 3
17070: PPUSH
17071: LD_INT 8
17073: PPUSH
17074: CALL_OW 336
// end ; 4 :
17078: GO 17184
17080: LD_INT 4
17082: DOUBLE
17083: EQUAL
17084: IFTRUE 17088
17086: GO 17162
17088: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17089: LD_ADDR_VAR 0 2
17093: PUSH
17094: LD_INT 22
17096: PUSH
17097: LD_OWVAR 2
17101: PUSH
17102: EMPTY
17103: LIST
17104: LIST
17105: PUSH
17106: LD_INT 30
17108: PUSH
17109: LD_INT 29
17111: PUSH
17112: EMPTY
17113: LIST
17114: LIST
17115: PUSH
17116: EMPTY
17117: LIST
17118: LIST
17119: PPUSH
17120: CALL_OW 69
17124: ST_TO_ADDR
// if not tmp then
17125: LD_VAR 0 2
17129: NOT
17130: IFFALSE 17134
// exit ;
17132: GO 17184
// CenterNowOnUnits ( tmp [ 1 ] ) ;
17134: LD_VAR 0 2
17138: PUSH
17139: LD_INT 1
17141: ARRAY
17142: PPUSH
17143: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
17147: LD_VAR 0 2
17151: PUSH
17152: LD_INT 1
17154: ARRAY
17155: PPUSH
17156: CALL_OW 65
// end ; 5 .. 7 :
17160: GO 17184
17162: LD_INT 5
17164: DOUBLE
17165: GREATEREQUAL
17166: IFFALSE 17174
17168: LD_INT 7
17170: DOUBLE
17171: LESSEQUAL
17172: IFTRUE 17176
17174: GO 17183
17176: POP
// StreamSibBomb ; end ;
17177: CALL 13421 0 0
17181: GO 17184
17183: POP
// end ;
17184: PPOPN 3
17186: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
17187: LD_EXP 24
17191: PUSH
17192: LD_EXP 74
17196: AND
17197: IFFALSE 17353
17199: GO 17201
17201: DISABLE
17202: LD_INT 0
17204: PPUSH
17205: PPUSH
17206: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
17207: LD_ADDR_VAR 0 2
17211: PUSH
17212: LD_INT 81
17214: PUSH
17215: LD_OWVAR 2
17219: PUSH
17220: EMPTY
17221: LIST
17222: LIST
17223: PUSH
17224: LD_INT 2
17226: PUSH
17227: LD_INT 21
17229: PUSH
17230: LD_INT 1
17232: PUSH
17233: EMPTY
17234: LIST
17235: LIST
17236: PUSH
17237: LD_INT 21
17239: PUSH
17240: LD_INT 2
17242: PUSH
17243: EMPTY
17244: LIST
17245: LIST
17246: PUSH
17247: EMPTY
17248: LIST
17249: LIST
17250: LIST
17251: PUSH
17252: EMPTY
17253: LIST
17254: LIST
17255: PPUSH
17256: CALL_OW 69
17260: ST_TO_ADDR
// if not tmp then
17261: LD_VAR 0 2
17265: NOT
17266: IFFALSE 17270
// exit ;
17268: GO 17353
// p := 0 ;
17270: LD_ADDR_VAR 0 3
17274: PUSH
17275: LD_INT 0
17277: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17278: LD_INT 35
17280: PPUSH
17281: CALL_OW 67
// p := p + 1 ;
17285: LD_ADDR_VAR 0 3
17289: PUSH
17290: LD_VAR 0 3
17294: PUSH
17295: LD_INT 1
17297: PLUS
17298: ST_TO_ADDR
// for i in tmp do
17299: LD_ADDR_VAR 0 1
17303: PUSH
17304: LD_VAR 0 2
17308: PUSH
17309: FOR_IN
17310: IFFALSE 17341
// if GetLives ( i ) < 1000 then
17312: LD_VAR 0 1
17316: PPUSH
17317: CALL_OW 256
17321: PUSH
17322: LD_INT 1000
17324: LESS
17325: IFFALSE 17339
// SetLives ( i , 1000 ) ;
17327: LD_VAR 0 1
17331: PPUSH
17332: LD_INT 1000
17334: PPUSH
17335: CALL_OW 234
17339: GO 17309
17341: POP
17342: POP
// until p > 20 ;
17343: LD_VAR 0 3
17347: PUSH
17348: LD_INT 20
17350: GREATER
17351: IFFALSE 17278
// end ;
17353: PPOPN 3
17355: END
// every 0 0$1 trigger StreamModeActive and sTime do
17356: LD_EXP 24
17360: PUSH
17361: LD_EXP 75
17365: AND
17366: IFFALSE 17401
17368: GO 17370
17370: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
17371: LD_INT 28
17373: PPUSH
17374: LD_OWVAR 2
17378: PPUSH
17379: LD_INT 2
17381: PPUSH
17382: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
17386: LD_INT 30
17388: PPUSH
17389: LD_OWVAR 2
17393: PPUSH
17394: LD_INT 2
17396: PPUSH
17397: CALL_OW 322
// end ;
17401: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
17402: LD_EXP 24
17406: PUSH
17407: LD_EXP 76
17411: AND
17412: IFFALSE 17533
17414: GO 17416
17416: DISABLE
17417: LD_INT 0
17419: PPUSH
17420: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17421: LD_ADDR_VAR 0 2
17425: PUSH
17426: LD_INT 22
17428: PUSH
17429: LD_OWVAR 2
17433: PUSH
17434: EMPTY
17435: LIST
17436: LIST
17437: PUSH
17438: LD_INT 21
17440: PUSH
17441: LD_INT 1
17443: PUSH
17444: EMPTY
17445: LIST
17446: LIST
17447: PUSH
17448: LD_INT 3
17450: PUSH
17451: LD_INT 23
17453: PUSH
17454: LD_INT 0
17456: PUSH
17457: EMPTY
17458: LIST
17459: LIST
17460: PUSH
17461: EMPTY
17462: LIST
17463: LIST
17464: PUSH
17465: EMPTY
17466: LIST
17467: LIST
17468: LIST
17469: PPUSH
17470: CALL_OW 69
17474: ST_TO_ADDR
// if not tmp then
17475: LD_VAR 0 2
17479: NOT
17480: IFFALSE 17484
// exit ;
17482: GO 17533
// for i in tmp do
17484: LD_ADDR_VAR 0 1
17488: PUSH
17489: LD_VAR 0 2
17493: PUSH
17494: FOR_IN
17495: IFFALSE 17531
// begin if Crawls ( i ) then
17497: LD_VAR 0 1
17501: PPUSH
17502: CALL_OW 318
17506: IFFALSE 17517
// ComWalk ( i ) ;
17508: LD_VAR 0 1
17512: PPUSH
17513: CALL_OW 138
// SetClass ( i , 2 ) ;
17517: LD_VAR 0 1
17521: PPUSH
17522: LD_INT 2
17524: PPUSH
17525: CALL_OW 336
// end ;
17529: GO 17494
17531: POP
17532: POP
// end ;
17533: PPOPN 2
17535: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
17536: LD_EXP 24
17540: PUSH
17541: LD_EXP 77
17545: AND
17546: IFFALSE 17834
17548: GO 17550
17550: DISABLE
17551: LD_INT 0
17553: PPUSH
17554: PPUSH
17555: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
17556: LD_OWVAR 2
17560: PPUSH
17561: LD_INT 9
17563: PPUSH
17564: LD_INT 1
17566: PPUSH
17567: LD_INT 1
17569: PPUSH
17570: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
17574: LD_INT 9
17576: PPUSH
17577: LD_OWVAR 2
17581: PPUSH
17582: CALL_OW 343
// uc_side := 9 ;
17586: LD_ADDR_OWVAR 20
17590: PUSH
17591: LD_INT 9
17593: ST_TO_ADDR
// uc_nation := 2 ;
17594: LD_ADDR_OWVAR 21
17598: PUSH
17599: LD_INT 2
17601: ST_TO_ADDR
// hc_name := Dark Warrior ;
17602: LD_ADDR_OWVAR 26
17606: PUSH
17607: LD_STRING Dark Warrior
17609: ST_TO_ADDR
// hc_gallery :=  ;
17610: LD_ADDR_OWVAR 33
17614: PUSH
17615: LD_STRING 
17617: ST_TO_ADDR
// hc_noskilllimit := true ;
17618: LD_ADDR_OWVAR 76
17622: PUSH
17623: LD_INT 1
17625: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
17626: LD_ADDR_OWVAR 31
17630: PUSH
17631: LD_INT 30
17633: PUSH
17634: LD_INT 30
17636: PUSH
17637: LD_INT 30
17639: PUSH
17640: LD_INT 30
17642: PUSH
17643: EMPTY
17644: LIST
17645: LIST
17646: LIST
17647: LIST
17648: ST_TO_ADDR
// un := CreateHuman ;
17649: LD_ADDR_VAR 0 3
17653: PUSH
17654: CALL_OW 44
17658: ST_TO_ADDR
// hc_noskilllimit := false ;
17659: LD_ADDR_OWVAR 76
17663: PUSH
17664: LD_INT 0
17666: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17667: LD_VAR 0 3
17671: PPUSH
17672: LD_INT 1
17674: PPUSH
17675: CALL_OW 51
// ToLua ( playRanger() ) ;
17679: LD_STRING playRanger()
17681: PPUSH
17682: CALL_OW 559
// p := 0 ;
17686: LD_ADDR_VAR 0 2
17690: PUSH
17691: LD_INT 0
17693: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17694: LD_INT 35
17696: PPUSH
17697: CALL_OW 67
// p := p + 1 ;
17701: LD_ADDR_VAR 0 2
17705: PUSH
17706: LD_VAR 0 2
17710: PUSH
17711: LD_INT 1
17713: PLUS
17714: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
17715: LD_VAR 0 3
17719: PPUSH
17720: CALL_OW 256
17724: PUSH
17725: LD_INT 1000
17727: LESS
17728: IFFALSE 17742
// SetLives ( un , 1000 ) ;
17730: LD_VAR 0 3
17734: PPUSH
17735: LD_INT 1000
17737: PPUSH
17738: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
17742: LD_VAR 0 3
17746: PPUSH
17747: LD_INT 81
17749: PUSH
17750: LD_OWVAR 2
17754: PUSH
17755: EMPTY
17756: LIST
17757: LIST
17758: PUSH
17759: LD_INT 91
17761: PUSH
17762: LD_VAR 0 3
17766: PUSH
17767: LD_INT 30
17769: PUSH
17770: EMPTY
17771: LIST
17772: LIST
17773: LIST
17774: PUSH
17775: EMPTY
17776: LIST
17777: LIST
17778: PPUSH
17779: CALL_OW 69
17783: PPUSH
17784: LD_VAR 0 3
17788: PPUSH
17789: CALL_OW 74
17793: PPUSH
17794: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
17798: LD_VAR 0 2
17802: PUSH
17803: LD_INT 80
17805: GREATER
17806: PUSH
17807: LD_VAR 0 3
17811: PPUSH
17812: CALL_OW 301
17816: OR
17817: IFFALSE 17694
// if un then
17819: LD_VAR 0 3
17823: IFFALSE 17834
// RemoveUnit ( un ) ;
17825: LD_VAR 0 3
17829: PPUSH
17830: CALL_OW 64
// end ;
17834: PPOPN 3
17836: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
17837: LD_EXP 78
17841: IFFALSE 17957
17843: GO 17845
17845: DISABLE
17846: LD_INT 0
17848: PPUSH
17849: PPUSH
17850: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17851: LD_ADDR_VAR 0 2
17855: PUSH
17856: LD_INT 81
17858: PUSH
17859: LD_OWVAR 2
17863: PUSH
17864: EMPTY
17865: LIST
17866: LIST
17867: PUSH
17868: LD_INT 21
17870: PUSH
17871: LD_INT 1
17873: PUSH
17874: EMPTY
17875: LIST
17876: LIST
17877: PUSH
17878: EMPTY
17879: LIST
17880: LIST
17881: PPUSH
17882: CALL_OW 69
17886: ST_TO_ADDR
// ToLua ( playComputer() ) ;
17887: LD_STRING playComputer()
17889: PPUSH
17890: CALL_OW 559
// if not tmp then
17894: LD_VAR 0 2
17898: NOT
17899: IFFALSE 17903
// exit ;
17901: GO 17957
// for i in tmp do
17903: LD_ADDR_VAR 0 1
17907: PUSH
17908: LD_VAR 0 2
17912: PUSH
17913: FOR_IN
17914: IFFALSE 17955
// for j := 1 to 4 do
17916: LD_ADDR_VAR 0 3
17920: PUSH
17921: DOUBLE
17922: LD_INT 1
17924: DEC
17925: ST_TO_ADDR
17926: LD_INT 4
17928: PUSH
17929: FOR_TO
17930: IFFALSE 17951
// SetSkill ( i , j , 10 ) ;
17932: LD_VAR 0 1
17936: PPUSH
17937: LD_VAR 0 3
17941: PPUSH
17942: LD_INT 10
17944: PPUSH
17945: CALL_OW 237
17949: GO 17929
17951: POP
17952: POP
17953: GO 17913
17955: POP
17956: POP
// end ;
17957: PPOPN 3
17959: END
// every 0 0$1 trigger s30 do var i , tmp ;
17960: LD_EXP 79
17964: IFFALSE 18033
17966: GO 17968
17968: DISABLE
17969: LD_INT 0
17971: PPUSH
17972: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17973: LD_ADDR_VAR 0 2
17977: PUSH
17978: LD_INT 22
17980: PUSH
17981: LD_OWVAR 2
17985: PUSH
17986: EMPTY
17987: LIST
17988: LIST
17989: PPUSH
17990: CALL_OW 69
17994: ST_TO_ADDR
// if not tmp then
17995: LD_VAR 0 2
17999: NOT
18000: IFFALSE 18004
// exit ;
18002: GO 18033
// for i in tmp do
18004: LD_ADDR_VAR 0 1
18008: PUSH
18009: LD_VAR 0 2
18013: PUSH
18014: FOR_IN
18015: IFFALSE 18031
// SetLives ( i , 300 ) ;
18017: LD_VAR 0 1
18021: PPUSH
18022: LD_INT 300
18024: PPUSH
18025: CALL_OW 234
18029: GO 18014
18031: POP
18032: POP
// end ;
18033: PPOPN 2
18035: END
// every 0 0$1 trigger s60 do var i , tmp ;
18036: LD_EXP 80
18040: IFFALSE 18109
18042: GO 18044
18044: DISABLE
18045: LD_INT 0
18047: PPUSH
18048: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18049: LD_ADDR_VAR 0 2
18053: PUSH
18054: LD_INT 22
18056: PUSH
18057: LD_OWVAR 2
18061: PUSH
18062: EMPTY
18063: LIST
18064: LIST
18065: PPUSH
18066: CALL_OW 69
18070: ST_TO_ADDR
// if not tmp then
18071: LD_VAR 0 2
18075: NOT
18076: IFFALSE 18080
// exit ;
18078: GO 18109
// for i in tmp do
18080: LD_ADDR_VAR 0 1
18084: PUSH
18085: LD_VAR 0 2
18089: PUSH
18090: FOR_IN
18091: IFFALSE 18107
// SetLives ( i , 600 ) ;
18093: LD_VAR 0 1
18097: PPUSH
18098: LD_INT 600
18100: PPUSH
18101: CALL_OW 234
18105: GO 18090
18107: POP
18108: POP
// end ;
18109: PPOPN 2
18111: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18112: LD_INT 0
18114: PPUSH
// case cmd of 301 :
18115: LD_VAR 0 1
18119: PUSH
18120: LD_INT 301
18122: DOUBLE
18123: EQUAL
18124: IFTRUE 18128
18126: GO 18160
18128: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
18129: LD_VAR 0 6
18133: PPUSH
18134: LD_VAR 0 7
18138: PPUSH
18139: LD_VAR 0 8
18143: PPUSH
18144: LD_VAR 0 4
18148: PPUSH
18149: LD_VAR 0 5
18153: PPUSH
18154: CALL 19361 0 5
18158: GO 18281
18160: LD_INT 302
18162: DOUBLE
18163: EQUAL
18164: IFTRUE 18168
18166: GO 18205
18168: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
18169: LD_VAR 0 6
18173: PPUSH
18174: LD_VAR 0 7
18178: PPUSH
18179: LD_VAR 0 8
18183: PPUSH
18184: LD_VAR 0 9
18188: PPUSH
18189: LD_VAR 0 4
18193: PPUSH
18194: LD_VAR 0 5
18198: PPUSH
18199: CALL 19452 0 6
18203: GO 18281
18205: LD_INT 303
18207: DOUBLE
18208: EQUAL
18209: IFTRUE 18213
18211: GO 18250
18213: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
18214: LD_VAR 0 6
18218: PPUSH
18219: LD_VAR 0 7
18223: PPUSH
18224: LD_VAR 0 8
18228: PPUSH
18229: LD_VAR 0 9
18233: PPUSH
18234: LD_VAR 0 4
18238: PPUSH
18239: LD_VAR 0 5
18243: PPUSH
18244: CALL 18286 0 6
18248: GO 18281
18250: LD_INT 304
18252: DOUBLE
18253: EQUAL
18254: IFTRUE 18258
18256: GO 18280
18258: POP
// hHackTeleport ( unit , x , y ) ; end ;
18259: LD_VAR 0 2
18263: PPUSH
18264: LD_VAR 0 4
18268: PPUSH
18269: LD_VAR 0 5
18273: PPUSH
18274: CALL 20045 0 3
18278: GO 18281
18280: POP
// end ;
18281: LD_VAR 0 12
18285: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
18286: LD_INT 0
18288: PPUSH
18289: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
18290: LD_VAR 0 1
18294: PUSH
18295: LD_INT 1
18297: LESS
18298: PUSH
18299: LD_VAR 0 1
18303: PUSH
18304: LD_INT 3
18306: GREATER
18307: OR
18308: PUSH
18309: LD_VAR 0 5
18313: PPUSH
18314: LD_VAR 0 6
18318: PPUSH
18319: CALL_OW 428
18323: OR
18324: IFFALSE 18328
// exit ;
18326: GO 19048
// uc_side := your_side ;
18328: LD_ADDR_OWVAR 20
18332: PUSH
18333: LD_OWVAR 2
18337: ST_TO_ADDR
// uc_nation := nation ;
18338: LD_ADDR_OWVAR 21
18342: PUSH
18343: LD_VAR 0 1
18347: ST_TO_ADDR
// bc_level = 1 ;
18348: LD_ADDR_OWVAR 43
18352: PUSH
18353: LD_INT 1
18355: ST_TO_ADDR
// case btype of 1 :
18356: LD_VAR 0 2
18360: PUSH
18361: LD_INT 1
18363: DOUBLE
18364: EQUAL
18365: IFTRUE 18369
18367: GO 18380
18369: POP
// bc_type := b_depot ; 2 :
18370: LD_ADDR_OWVAR 42
18374: PUSH
18375: LD_INT 0
18377: ST_TO_ADDR
18378: GO 18992
18380: LD_INT 2
18382: DOUBLE
18383: EQUAL
18384: IFTRUE 18388
18386: GO 18399
18388: POP
// bc_type := b_warehouse ; 3 :
18389: LD_ADDR_OWVAR 42
18393: PUSH
18394: LD_INT 1
18396: ST_TO_ADDR
18397: GO 18992
18399: LD_INT 3
18401: DOUBLE
18402: EQUAL
18403: IFTRUE 18407
18405: GO 18418
18407: POP
// bc_type := b_lab ; 4 .. 9 :
18408: LD_ADDR_OWVAR 42
18412: PUSH
18413: LD_INT 6
18415: ST_TO_ADDR
18416: GO 18992
18418: LD_INT 4
18420: DOUBLE
18421: GREATEREQUAL
18422: IFFALSE 18430
18424: LD_INT 9
18426: DOUBLE
18427: LESSEQUAL
18428: IFTRUE 18432
18430: GO 18484
18432: POP
// begin bc_type := b_lab_half ;
18433: LD_ADDR_OWVAR 42
18437: PUSH
18438: LD_INT 7
18440: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
18441: LD_ADDR_OWVAR 44
18445: PUSH
18446: LD_INT 10
18448: PUSH
18449: LD_INT 11
18451: PUSH
18452: LD_INT 12
18454: PUSH
18455: LD_INT 15
18457: PUSH
18458: LD_INT 14
18460: PUSH
18461: LD_INT 13
18463: PUSH
18464: EMPTY
18465: LIST
18466: LIST
18467: LIST
18468: LIST
18469: LIST
18470: LIST
18471: PUSH
18472: LD_VAR 0 2
18476: PUSH
18477: LD_INT 3
18479: MINUS
18480: ARRAY
18481: ST_TO_ADDR
// end ; 10 .. 13 :
18482: GO 18992
18484: LD_INT 10
18486: DOUBLE
18487: GREATEREQUAL
18488: IFFALSE 18496
18490: LD_INT 13
18492: DOUBLE
18493: LESSEQUAL
18494: IFTRUE 18498
18496: GO 18575
18498: POP
// begin bc_type := b_lab_full ;
18499: LD_ADDR_OWVAR 42
18503: PUSH
18504: LD_INT 8
18506: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
18507: LD_ADDR_OWVAR 44
18511: PUSH
18512: LD_INT 10
18514: PUSH
18515: LD_INT 12
18517: PUSH
18518: LD_INT 14
18520: PUSH
18521: LD_INT 13
18523: PUSH
18524: EMPTY
18525: LIST
18526: LIST
18527: LIST
18528: LIST
18529: PUSH
18530: LD_VAR 0 2
18534: PUSH
18535: LD_INT 9
18537: MINUS
18538: ARRAY
18539: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
18540: LD_ADDR_OWVAR 45
18544: PUSH
18545: LD_INT 11
18547: PUSH
18548: LD_INT 15
18550: PUSH
18551: LD_INT 12
18553: PUSH
18554: LD_INT 15
18556: PUSH
18557: EMPTY
18558: LIST
18559: LIST
18560: LIST
18561: LIST
18562: PUSH
18563: LD_VAR 0 2
18567: PUSH
18568: LD_INT 9
18570: MINUS
18571: ARRAY
18572: ST_TO_ADDR
// end ; 14 :
18573: GO 18992
18575: LD_INT 14
18577: DOUBLE
18578: EQUAL
18579: IFTRUE 18583
18581: GO 18594
18583: POP
// bc_type := b_workshop ; 15 :
18584: LD_ADDR_OWVAR 42
18588: PUSH
18589: LD_INT 2
18591: ST_TO_ADDR
18592: GO 18992
18594: LD_INT 15
18596: DOUBLE
18597: EQUAL
18598: IFTRUE 18602
18600: GO 18613
18602: POP
// bc_type := b_factory ; 16 :
18603: LD_ADDR_OWVAR 42
18607: PUSH
18608: LD_INT 3
18610: ST_TO_ADDR
18611: GO 18992
18613: LD_INT 16
18615: DOUBLE
18616: EQUAL
18617: IFTRUE 18621
18619: GO 18632
18621: POP
// bc_type := b_ext_gun ; 17 :
18622: LD_ADDR_OWVAR 42
18626: PUSH
18627: LD_INT 17
18629: ST_TO_ADDR
18630: GO 18992
18632: LD_INT 17
18634: DOUBLE
18635: EQUAL
18636: IFTRUE 18640
18638: GO 18668
18640: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
18641: LD_ADDR_OWVAR 42
18645: PUSH
18646: LD_INT 19
18648: PUSH
18649: LD_INT 23
18651: PUSH
18652: LD_INT 19
18654: PUSH
18655: EMPTY
18656: LIST
18657: LIST
18658: LIST
18659: PUSH
18660: LD_VAR 0 1
18664: ARRAY
18665: ST_TO_ADDR
18666: GO 18992
18668: LD_INT 18
18670: DOUBLE
18671: EQUAL
18672: IFTRUE 18676
18674: GO 18687
18676: POP
// bc_type := b_ext_radar ; 19 :
18677: LD_ADDR_OWVAR 42
18681: PUSH
18682: LD_INT 20
18684: ST_TO_ADDR
18685: GO 18992
18687: LD_INT 19
18689: DOUBLE
18690: EQUAL
18691: IFTRUE 18695
18693: GO 18706
18695: POP
// bc_type := b_ext_radio ; 20 :
18696: LD_ADDR_OWVAR 42
18700: PUSH
18701: LD_INT 22
18703: ST_TO_ADDR
18704: GO 18992
18706: LD_INT 20
18708: DOUBLE
18709: EQUAL
18710: IFTRUE 18714
18712: GO 18725
18714: POP
// bc_type := b_ext_siberium ; 21 :
18715: LD_ADDR_OWVAR 42
18719: PUSH
18720: LD_INT 21
18722: ST_TO_ADDR
18723: GO 18992
18725: LD_INT 21
18727: DOUBLE
18728: EQUAL
18729: IFTRUE 18733
18731: GO 18744
18733: POP
// bc_type := b_ext_computer ; 22 :
18734: LD_ADDR_OWVAR 42
18738: PUSH
18739: LD_INT 24
18741: ST_TO_ADDR
18742: GO 18992
18744: LD_INT 22
18746: DOUBLE
18747: EQUAL
18748: IFTRUE 18752
18750: GO 18763
18752: POP
// bc_type := b_ext_track ; 23 :
18753: LD_ADDR_OWVAR 42
18757: PUSH
18758: LD_INT 16
18760: ST_TO_ADDR
18761: GO 18992
18763: LD_INT 23
18765: DOUBLE
18766: EQUAL
18767: IFTRUE 18771
18769: GO 18782
18771: POP
// bc_type := b_ext_laser ; 24 :
18772: LD_ADDR_OWVAR 42
18776: PUSH
18777: LD_INT 25
18779: ST_TO_ADDR
18780: GO 18992
18782: LD_INT 24
18784: DOUBLE
18785: EQUAL
18786: IFTRUE 18790
18788: GO 18801
18790: POP
// bc_type := b_control_tower ; 25 :
18791: LD_ADDR_OWVAR 42
18795: PUSH
18796: LD_INT 36
18798: ST_TO_ADDR
18799: GO 18992
18801: LD_INT 25
18803: DOUBLE
18804: EQUAL
18805: IFTRUE 18809
18807: GO 18820
18809: POP
// bc_type := b_breastwork ; 26 :
18810: LD_ADDR_OWVAR 42
18814: PUSH
18815: LD_INT 31
18817: ST_TO_ADDR
18818: GO 18992
18820: LD_INT 26
18822: DOUBLE
18823: EQUAL
18824: IFTRUE 18828
18826: GO 18839
18828: POP
// bc_type := b_bunker ; 27 :
18829: LD_ADDR_OWVAR 42
18833: PUSH
18834: LD_INT 32
18836: ST_TO_ADDR
18837: GO 18992
18839: LD_INT 27
18841: DOUBLE
18842: EQUAL
18843: IFTRUE 18847
18845: GO 18858
18847: POP
// bc_type := b_turret ; 28 :
18848: LD_ADDR_OWVAR 42
18852: PUSH
18853: LD_INT 33
18855: ST_TO_ADDR
18856: GO 18992
18858: LD_INT 28
18860: DOUBLE
18861: EQUAL
18862: IFTRUE 18866
18864: GO 18877
18866: POP
// bc_type := b_armoury ; 29 :
18867: LD_ADDR_OWVAR 42
18871: PUSH
18872: LD_INT 4
18874: ST_TO_ADDR
18875: GO 18992
18877: LD_INT 29
18879: DOUBLE
18880: EQUAL
18881: IFTRUE 18885
18883: GO 18896
18885: POP
// bc_type := b_barracks ; 30 :
18886: LD_ADDR_OWVAR 42
18890: PUSH
18891: LD_INT 5
18893: ST_TO_ADDR
18894: GO 18992
18896: LD_INT 30
18898: DOUBLE
18899: EQUAL
18900: IFTRUE 18904
18902: GO 18915
18904: POP
// bc_type := b_solar_power ; 31 :
18905: LD_ADDR_OWVAR 42
18909: PUSH
18910: LD_INT 27
18912: ST_TO_ADDR
18913: GO 18992
18915: LD_INT 31
18917: DOUBLE
18918: EQUAL
18919: IFTRUE 18923
18921: GO 18934
18923: POP
// bc_type := b_oil_power ; 32 :
18924: LD_ADDR_OWVAR 42
18928: PUSH
18929: LD_INT 26
18931: ST_TO_ADDR
18932: GO 18992
18934: LD_INT 32
18936: DOUBLE
18937: EQUAL
18938: IFTRUE 18942
18940: GO 18953
18942: POP
// bc_type := b_siberite_power ; 33 :
18943: LD_ADDR_OWVAR 42
18947: PUSH
18948: LD_INT 28
18950: ST_TO_ADDR
18951: GO 18992
18953: LD_INT 33
18955: DOUBLE
18956: EQUAL
18957: IFTRUE 18961
18959: GO 18972
18961: POP
// bc_type := b_oil_mine ; 34 :
18962: LD_ADDR_OWVAR 42
18966: PUSH
18967: LD_INT 29
18969: ST_TO_ADDR
18970: GO 18992
18972: LD_INT 34
18974: DOUBLE
18975: EQUAL
18976: IFTRUE 18980
18978: GO 18991
18980: POP
// bc_type := b_siberite_mine ; end ;
18981: LD_ADDR_OWVAR 42
18985: PUSH
18986: LD_INT 30
18988: ST_TO_ADDR
18989: GO 18992
18991: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
18992: LD_ADDR_VAR 0 8
18996: PUSH
18997: LD_VAR 0 5
19001: PPUSH
19002: LD_VAR 0 6
19006: PPUSH
19007: LD_VAR 0 3
19011: PPUSH
19012: CALL_OW 47
19016: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
19017: LD_OWVAR 42
19021: PUSH
19022: LD_INT 32
19024: PUSH
19025: LD_INT 33
19027: PUSH
19028: EMPTY
19029: LIST
19030: LIST
19031: IN
19032: IFFALSE 19048
// PlaceWeaponTurret ( b , weapon ) ;
19034: LD_VAR 0 8
19038: PPUSH
19039: LD_VAR 0 4
19043: PPUSH
19044: CALL_OW 431
// end ;
19048: LD_VAR 0 7
19052: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
19053: LD_INT 0
19055: PPUSH
19056: PPUSH
19057: PPUSH
19058: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19059: LD_ADDR_VAR 0 4
19063: PUSH
19064: LD_INT 22
19066: PUSH
19067: LD_OWVAR 2
19071: PUSH
19072: EMPTY
19073: LIST
19074: LIST
19075: PUSH
19076: LD_INT 2
19078: PUSH
19079: LD_INT 30
19081: PUSH
19082: LD_INT 0
19084: PUSH
19085: EMPTY
19086: LIST
19087: LIST
19088: PUSH
19089: LD_INT 30
19091: PUSH
19092: LD_INT 1
19094: PUSH
19095: EMPTY
19096: LIST
19097: LIST
19098: PUSH
19099: EMPTY
19100: LIST
19101: LIST
19102: LIST
19103: PUSH
19104: EMPTY
19105: LIST
19106: LIST
19107: PPUSH
19108: CALL_OW 69
19112: ST_TO_ADDR
// if not tmp then
19113: LD_VAR 0 4
19117: NOT
19118: IFFALSE 19122
// exit ;
19120: GO 19181
// for i in tmp do
19122: LD_ADDR_VAR 0 2
19126: PUSH
19127: LD_VAR 0 4
19131: PUSH
19132: FOR_IN
19133: IFFALSE 19179
// for j = 1 to 3 do
19135: LD_ADDR_VAR 0 3
19139: PUSH
19140: DOUBLE
19141: LD_INT 1
19143: DEC
19144: ST_TO_ADDR
19145: LD_INT 3
19147: PUSH
19148: FOR_TO
19149: IFFALSE 19175
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
19151: LD_VAR 0 2
19155: PPUSH
19156: CALL_OW 274
19160: PPUSH
19161: LD_VAR 0 3
19165: PPUSH
19166: LD_INT 99999
19168: PPUSH
19169: CALL_OW 277
19173: GO 19148
19175: POP
19176: POP
19177: GO 19132
19179: POP
19180: POP
// end ;
19181: LD_VAR 0 1
19185: RET
// export function hHackSetLevel10 ; var i , j ; begin
19186: LD_INT 0
19188: PPUSH
19189: PPUSH
19190: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19191: LD_ADDR_VAR 0 2
19195: PUSH
19196: LD_INT 21
19198: PUSH
19199: LD_INT 1
19201: PUSH
19202: EMPTY
19203: LIST
19204: LIST
19205: PPUSH
19206: CALL_OW 69
19210: PUSH
19211: FOR_IN
19212: IFFALSE 19264
// if IsSelected ( i ) then
19214: LD_VAR 0 2
19218: PPUSH
19219: CALL_OW 306
19223: IFFALSE 19262
// begin for j := 1 to 4 do
19225: LD_ADDR_VAR 0 3
19229: PUSH
19230: DOUBLE
19231: LD_INT 1
19233: DEC
19234: ST_TO_ADDR
19235: LD_INT 4
19237: PUSH
19238: FOR_TO
19239: IFFALSE 19260
// SetSkill ( i , j , 10 ) ;
19241: LD_VAR 0 2
19245: PPUSH
19246: LD_VAR 0 3
19250: PPUSH
19251: LD_INT 10
19253: PPUSH
19254: CALL_OW 237
19258: GO 19238
19260: POP
19261: POP
// end ;
19262: GO 19211
19264: POP
19265: POP
// end ;
19266: LD_VAR 0 1
19270: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
19271: LD_INT 0
19273: PPUSH
19274: PPUSH
19275: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
19276: LD_ADDR_VAR 0 2
19280: PUSH
19281: LD_INT 22
19283: PUSH
19284: LD_OWVAR 2
19288: PUSH
19289: EMPTY
19290: LIST
19291: LIST
19292: PUSH
19293: LD_INT 21
19295: PUSH
19296: LD_INT 1
19298: PUSH
19299: EMPTY
19300: LIST
19301: LIST
19302: PUSH
19303: EMPTY
19304: LIST
19305: LIST
19306: PPUSH
19307: CALL_OW 69
19311: PUSH
19312: FOR_IN
19313: IFFALSE 19354
// begin for j := 1 to 4 do
19315: LD_ADDR_VAR 0 3
19319: PUSH
19320: DOUBLE
19321: LD_INT 1
19323: DEC
19324: ST_TO_ADDR
19325: LD_INT 4
19327: PUSH
19328: FOR_TO
19329: IFFALSE 19350
// SetSkill ( i , j , 10 ) ;
19331: LD_VAR 0 2
19335: PPUSH
19336: LD_VAR 0 3
19340: PPUSH
19341: LD_INT 10
19343: PPUSH
19344: CALL_OW 237
19348: GO 19328
19350: POP
19351: POP
// end ;
19352: GO 19312
19354: POP
19355: POP
// end ;
19356: LD_VAR 0 1
19360: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
19361: LD_INT 0
19363: PPUSH
// uc_side := your_side ;
19364: LD_ADDR_OWVAR 20
19368: PUSH
19369: LD_OWVAR 2
19373: ST_TO_ADDR
// uc_nation := nation ;
19374: LD_ADDR_OWVAR 21
19378: PUSH
19379: LD_VAR 0 1
19383: ST_TO_ADDR
// InitHc ;
19384: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
19388: LD_INT 0
19390: PPUSH
19391: LD_VAR 0 2
19395: PPUSH
19396: LD_VAR 0 3
19400: PPUSH
19401: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
19405: LD_VAR 0 4
19409: PPUSH
19410: LD_VAR 0 5
19414: PPUSH
19415: CALL_OW 428
19419: PUSH
19420: LD_INT 0
19422: EQUAL
19423: IFFALSE 19447
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
19425: CALL_OW 44
19429: PPUSH
19430: LD_VAR 0 4
19434: PPUSH
19435: LD_VAR 0 5
19439: PPUSH
19440: LD_INT 1
19442: PPUSH
19443: CALL_OW 48
// end ;
19447: LD_VAR 0 6
19451: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
19452: LD_INT 0
19454: PPUSH
19455: PPUSH
// uc_side := your_side ;
19456: LD_ADDR_OWVAR 20
19460: PUSH
19461: LD_OWVAR 2
19465: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
19466: LD_VAR 0 1
19470: PUSH
19471: LD_INT 1
19473: PUSH
19474: LD_INT 2
19476: PUSH
19477: LD_INT 3
19479: PUSH
19480: LD_INT 4
19482: PUSH
19483: LD_INT 5
19485: PUSH
19486: EMPTY
19487: LIST
19488: LIST
19489: LIST
19490: LIST
19491: LIST
19492: IN
19493: IFFALSE 19505
// uc_nation := nation_american else
19495: LD_ADDR_OWVAR 21
19499: PUSH
19500: LD_INT 1
19502: ST_TO_ADDR
19503: GO 19548
// if chassis in [ 11 , 12 , 13 , 14 ] then
19505: LD_VAR 0 1
19509: PUSH
19510: LD_INT 11
19512: PUSH
19513: LD_INT 12
19515: PUSH
19516: LD_INT 13
19518: PUSH
19519: LD_INT 14
19521: PUSH
19522: EMPTY
19523: LIST
19524: LIST
19525: LIST
19526: LIST
19527: IN
19528: IFFALSE 19540
// uc_nation := nation_arabian else
19530: LD_ADDR_OWVAR 21
19534: PUSH
19535: LD_INT 2
19537: ST_TO_ADDR
19538: GO 19548
// uc_nation := nation_russian ;
19540: LD_ADDR_OWVAR 21
19544: PUSH
19545: LD_INT 3
19547: ST_TO_ADDR
// vc_chassis := chassis ;
19548: LD_ADDR_OWVAR 37
19552: PUSH
19553: LD_VAR 0 1
19557: ST_TO_ADDR
// vc_engine := engine ;
19558: LD_ADDR_OWVAR 39
19562: PUSH
19563: LD_VAR 0 2
19567: ST_TO_ADDR
// vc_control := control ;
19568: LD_ADDR_OWVAR 38
19572: PUSH
19573: LD_VAR 0 3
19577: ST_TO_ADDR
// vc_weapon := weapon ;
19578: LD_ADDR_OWVAR 40
19582: PUSH
19583: LD_VAR 0 4
19587: ST_TO_ADDR
// un := CreateVehicle ;
19588: LD_ADDR_VAR 0 8
19592: PUSH
19593: CALL_OW 45
19597: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
19598: LD_VAR 0 8
19602: PPUSH
19603: LD_INT 0
19605: PPUSH
19606: LD_INT 5
19608: PPUSH
19609: CALL_OW 12
19613: PPUSH
19614: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
19618: LD_VAR 0 8
19622: PPUSH
19623: LD_VAR 0 5
19627: PPUSH
19628: LD_VAR 0 6
19632: PPUSH
19633: LD_INT 1
19635: PPUSH
19636: CALL_OW 48
// end ;
19640: LD_VAR 0 7
19644: RET
// export hInvincible ; every 1 do
19645: GO 19647
19647: DISABLE
// hInvincible := [ ] ;
19648: LD_ADDR_EXP 81
19652: PUSH
19653: EMPTY
19654: ST_TO_ADDR
19655: END
// every 10 do var i ;
19656: GO 19658
19658: DISABLE
19659: LD_INT 0
19661: PPUSH
// begin enable ;
19662: ENABLE
// if not hInvincible then
19663: LD_EXP 81
19667: NOT
19668: IFFALSE 19672
// exit ;
19670: GO 19716
// for i in hInvincible do
19672: LD_ADDR_VAR 0 1
19676: PUSH
19677: LD_EXP 81
19681: PUSH
19682: FOR_IN
19683: IFFALSE 19714
// if GetLives ( i ) < 1000 then
19685: LD_VAR 0 1
19689: PPUSH
19690: CALL_OW 256
19694: PUSH
19695: LD_INT 1000
19697: LESS
19698: IFFALSE 19712
// SetLives ( i , 1000 ) ;
19700: LD_VAR 0 1
19704: PPUSH
19705: LD_INT 1000
19707: PPUSH
19708: CALL_OW 234
19712: GO 19682
19714: POP
19715: POP
// end ;
19716: PPOPN 1
19718: END
// export function hHackInvincible ; var i ; begin
19719: LD_INT 0
19721: PPUSH
19722: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
19723: LD_ADDR_VAR 0 2
19727: PUSH
19728: LD_INT 2
19730: PUSH
19731: LD_INT 21
19733: PUSH
19734: LD_INT 1
19736: PUSH
19737: EMPTY
19738: LIST
19739: LIST
19740: PUSH
19741: LD_INT 21
19743: PUSH
19744: LD_INT 2
19746: PUSH
19747: EMPTY
19748: LIST
19749: LIST
19750: PUSH
19751: EMPTY
19752: LIST
19753: LIST
19754: LIST
19755: PPUSH
19756: CALL_OW 69
19760: PUSH
19761: FOR_IN
19762: IFFALSE 19823
// if IsSelected ( i ) then
19764: LD_VAR 0 2
19768: PPUSH
19769: CALL_OW 306
19773: IFFALSE 19821
// begin if i in hInvincible then
19775: LD_VAR 0 2
19779: PUSH
19780: LD_EXP 81
19784: IN
19785: IFFALSE 19805
// hInvincible := hInvincible diff i else
19787: LD_ADDR_EXP 81
19791: PUSH
19792: LD_EXP 81
19796: PUSH
19797: LD_VAR 0 2
19801: DIFF
19802: ST_TO_ADDR
19803: GO 19821
// hInvincible := hInvincible union i ;
19805: LD_ADDR_EXP 81
19809: PUSH
19810: LD_EXP 81
19814: PUSH
19815: LD_VAR 0 2
19819: UNION
19820: ST_TO_ADDR
// end ;
19821: GO 19761
19823: POP
19824: POP
// end ;
19825: LD_VAR 0 1
19829: RET
// export function hHackInvisible ; var i , j ; begin
19830: LD_INT 0
19832: PPUSH
19833: PPUSH
19834: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19835: LD_ADDR_VAR 0 2
19839: PUSH
19840: LD_INT 21
19842: PUSH
19843: LD_INT 1
19845: PUSH
19846: EMPTY
19847: LIST
19848: LIST
19849: PPUSH
19850: CALL_OW 69
19854: PUSH
19855: FOR_IN
19856: IFFALSE 19880
// if IsSelected ( i ) then
19858: LD_VAR 0 2
19862: PPUSH
19863: CALL_OW 306
19867: IFFALSE 19878
// ComForceInvisible ( i ) ;
19869: LD_VAR 0 2
19873: PPUSH
19874: CALL_OW 496
19878: GO 19855
19880: POP
19881: POP
// end ;
19882: LD_VAR 0 1
19886: RET
// export function hHackChangeYourSide ; begin
19887: LD_INT 0
19889: PPUSH
// if your_side = 8 then
19890: LD_OWVAR 2
19894: PUSH
19895: LD_INT 8
19897: EQUAL
19898: IFFALSE 19910
// your_side := 0 else
19900: LD_ADDR_OWVAR 2
19904: PUSH
19905: LD_INT 0
19907: ST_TO_ADDR
19908: GO 19924
// your_side := your_side + 1 ;
19910: LD_ADDR_OWVAR 2
19914: PUSH
19915: LD_OWVAR 2
19919: PUSH
19920: LD_INT 1
19922: PLUS
19923: ST_TO_ADDR
// end ;
19924: LD_VAR 0 1
19928: RET
// export function hHackChangeUnitSide ; var i , j ; begin
19929: LD_INT 0
19931: PPUSH
19932: PPUSH
19933: PPUSH
// for i in all_units do
19934: LD_ADDR_VAR 0 2
19938: PUSH
19939: LD_OWVAR 3
19943: PUSH
19944: FOR_IN
19945: IFFALSE 20023
// if IsSelected ( i ) then
19947: LD_VAR 0 2
19951: PPUSH
19952: CALL_OW 306
19956: IFFALSE 20021
// begin j := GetSide ( i ) ;
19958: LD_ADDR_VAR 0 3
19962: PUSH
19963: LD_VAR 0 2
19967: PPUSH
19968: CALL_OW 255
19972: ST_TO_ADDR
// if j = 8 then
19973: LD_VAR 0 3
19977: PUSH
19978: LD_INT 8
19980: EQUAL
19981: IFFALSE 19993
// j := 0 else
19983: LD_ADDR_VAR 0 3
19987: PUSH
19988: LD_INT 0
19990: ST_TO_ADDR
19991: GO 20007
// j := j + 1 ;
19993: LD_ADDR_VAR 0 3
19997: PUSH
19998: LD_VAR 0 3
20002: PUSH
20003: LD_INT 1
20005: PLUS
20006: ST_TO_ADDR
// SetSide ( i , j ) ;
20007: LD_VAR 0 2
20011: PPUSH
20012: LD_VAR 0 3
20016: PPUSH
20017: CALL_OW 235
// end ;
20021: GO 19944
20023: POP
20024: POP
// end ;
20025: LD_VAR 0 1
20029: RET
// export function hHackFog ; begin
20030: LD_INT 0
20032: PPUSH
// FogOff ( true ) ;
20033: LD_INT 1
20035: PPUSH
20036: CALL_OW 344
// end ;
20040: LD_VAR 0 1
20044: RET
// export function hHackTeleport ( unit , x , y ) ; begin
20045: LD_INT 0
20047: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
20048: LD_VAR 0 1
20052: PPUSH
20053: LD_VAR 0 2
20057: PPUSH
20058: LD_VAR 0 3
20062: PPUSH
20063: LD_INT 1
20065: PPUSH
20066: LD_INT 1
20068: PPUSH
20069: CALL_OW 483
// CenterOnXY ( x , y ) ;
20073: LD_VAR 0 2
20077: PPUSH
20078: LD_VAR 0 3
20082: PPUSH
20083: CALL_OW 84
// end ;
20087: LD_VAR 0 4
20091: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
20092: LD_INT 0
20094: PPUSH
20095: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
20096: LD_VAR 0 1
20100: NOT
20101: PUSH
20102: LD_VAR 0 2
20106: PPUSH
20107: LD_VAR 0 3
20111: PPUSH
20112: CALL_OW 488
20116: NOT
20117: OR
20118: PUSH
20119: LD_VAR 0 1
20123: PPUSH
20124: CALL_OW 266
20128: PUSH
20129: LD_INT 3
20131: NONEQUAL
20132: PUSH
20133: LD_VAR 0 1
20137: PPUSH
20138: CALL_OW 247
20142: PUSH
20143: LD_INT 1
20145: EQUAL
20146: NOT
20147: AND
20148: OR
20149: IFFALSE 20153
// exit ;
20151: GO 20302
// if GetType ( factory ) = unit_human then
20153: LD_VAR 0 1
20157: PPUSH
20158: CALL_OW 247
20162: PUSH
20163: LD_INT 1
20165: EQUAL
20166: IFFALSE 20183
// factory := IsInUnit ( factory ) ;
20168: LD_ADDR_VAR 0 1
20172: PUSH
20173: LD_VAR 0 1
20177: PPUSH
20178: CALL_OW 310
20182: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
20183: LD_VAR 0 1
20187: PPUSH
20188: CALL_OW 266
20192: PUSH
20193: LD_INT 3
20195: NONEQUAL
20196: IFFALSE 20200
// exit ;
20198: GO 20302
// if HexInfo ( x , y ) = factory then
20200: LD_VAR 0 2
20204: PPUSH
20205: LD_VAR 0 3
20209: PPUSH
20210: CALL_OW 428
20214: PUSH
20215: LD_VAR 0 1
20219: EQUAL
20220: IFFALSE 20247
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
20222: LD_ADDR_EXP 82
20226: PUSH
20227: LD_EXP 82
20231: PPUSH
20232: LD_VAR 0 1
20236: PPUSH
20237: LD_INT 0
20239: PPUSH
20240: CALL_OW 1
20244: ST_TO_ADDR
20245: GO 20298
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
20247: LD_ADDR_EXP 82
20251: PUSH
20252: LD_EXP 82
20256: PPUSH
20257: LD_VAR 0 1
20261: PPUSH
20262: LD_VAR 0 1
20266: PPUSH
20267: CALL_OW 255
20271: PUSH
20272: LD_VAR 0 1
20276: PUSH
20277: LD_VAR 0 2
20281: PUSH
20282: LD_VAR 0 3
20286: PUSH
20287: EMPTY
20288: LIST
20289: LIST
20290: LIST
20291: LIST
20292: PPUSH
20293: CALL_OW 1
20297: ST_TO_ADDR
// UpdateFactoryWaypoints ;
20298: CALL 20307 0 0
// end ;
20302: LD_VAR 0 4
20306: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
20307: LD_INT 0
20309: PPUSH
20310: PPUSH
20311: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
20312: LD_STRING resetFactoryWaypoint();
20314: PPUSH
20315: CALL_OW 559
// if factoryWaypoints then
20319: LD_EXP 82
20323: IFFALSE 20449
// begin list := PrepareArray ( factoryWaypoints ) ;
20325: LD_ADDR_VAR 0 3
20329: PUSH
20330: LD_EXP 82
20334: PPUSH
20335: CALL 67041 0 1
20339: ST_TO_ADDR
// for i := 1 to list do
20340: LD_ADDR_VAR 0 2
20344: PUSH
20345: DOUBLE
20346: LD_INT 1
20348: DEC
20349: ST_TO_ADDR
20350: LD_VAR 0 3
20354: PUSH
20355: FOR_TO
20356: IFFALSE 20447
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
20358: LD_STRING setFactoryWaypointXY(
20360: PUSH
20361: LD_VAR 0 3
20365: PUSH
20366: LD_VAR 0 2
20370: ARRAY
20371: PUSH
20372: LD_INT 1
20374: ARRAY
20375: STR
20376: PUSH
20377: LD_STRING ,
20379: STR
20380: PUSH
20381: LD_VAR 0 3
20385: PUSH
20386: LD_VAR 0 2
20390: ARRAY
20391: PUSH
20392: LD_INT 2
20394: ARRAY
20395: STR
20396: PUSH
20397: LD_STRING ,
20399: STR
20400: PUSH
20401: LD_VAR 0 3
20405: PUSH
20406: LD_VAR 0 2
20410: ARRAY
20411: PUSH
20412: LD_INT 3
20414: ARRAY
20415: STR
20416: PUSH
20417: LD_STRING ,
20419: STR
20420: PUSH
20421: LD_VAR 0 3
20425: PUSH
20426: LD_VAR 0 2
20430: ARRAY
20431: PUSH
20432: LD_INT 4
20434: ARRAY
20435: STR
20436: PUSH
20437: LD_STRING )
20439: STR
20440: PPUSH
20441: CALL_OW 559
20445: GO 20355
20447: POP
20448: POP
// end ; end ;
20449: LD_VAR 0 1
20453: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
20454: LD_INT 0
20456: PPUSH
// if HexInfo ( x , y ) = warehouse then
20457: LD_VAR 0 2
20461: PPUSH
20462: LD_VAR 0 3
20466: PPUSH
20467: CALL_OW 428
20471: PUSH
20472: LD_VAR 0 1
20476: EQUAL
20477: IFFALSE 20504
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
20479: LD_ADDR_EXP 83
20483: PUSH
20484: LD_EXP 83
20488: PPUSH
20489: LD_VAR 0 1
20493: PPUSH
20494: LD_INT 0
20496: PPUSH
20497: CALL_OW 1
20501: ST_TO_ADDR
20502: GO 20555
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
20504: LD_ADDR_EXP 83
20508: PUSH
20509: LD_EXP 83
20513: PPUSH
20514: LD_VAR 0 1
20518: PPUSH
20519: LD_VAR 0 1
20523: PPUSH
20524: CALL_OW 255
20528: PUSH
20529: LD_VAR 0 1
20533: PUSH
20534: LD_VAR 0 2
20538: PUSH
20539: LD_VAR 0 3
20543: PUSH
20544: EMPTY
20545: LIST
20546: LIST
20547: LIST
20548: LIST
20549: PPUSH
20550: CALL_OW 1
20554: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
20555: CALL 20564 0 0
// end ;
20559: LD_VAR 0 4
20563: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
20564: LD_INT 0
20566: PPUSH
20567: PPUSH
20568: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
20569: LD_STRING resetWarehouseGatheringPoints();
20571: PPUSH
20572: CALL_OW 559
// if warehouseGatheringPoints then
20576: LD_EXP 83
20580: IFFALSE 20706
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
20582: LD_ADDR_VAR 0 3
20586: PUSH
20587: LD_EXP 83
20591: PPUSH
20592: CALL 67041 0 1
20596: ST_TO_ADDR
// for i := 1 to list do
20597: LD_ADDR_VAR 0 2
20601: PUSH
20602: DOUBLE
20603: LD_INT 1
20605: DEC
20606: ST_TO_ADDR
20607: LD_VAR 0 3
20611: PUSH
20612: FOR_TO
20613: IFFALSE 20704
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
20615: LD_STRING setWarehouseGatheringPointXY(
20617: PUSH
20618: LD_VAR 0 3
20622: PUSH
20623: LD_VAR 0 2
20627: ARRAY
20628: PUSH
20629: LD_INT 1
20631: ARRAY
20632: STR
20633: PUSH
20634: LD_STRING ,
20636: STR
20637: PUSH
20638: LD_VAR 0 3
20642: PUSH
20643: LD_VAR 0 2
20647: ARRAY
20648: PUSH
20649: LD_INT 2
20651: ARRAY
20652: STR
20653: PUSH
20654: LD_STRING ,
20656: STR
20657: PUSH
20658: LD_VAR 0 3
20662: PUSH
20663: LD_VAR 0 2
20667: ARRAY
20668: PUSH
20669: LD_INT 3
20671: ARRAY
20672: STR
20673: PUSH
20674: LD_STRING ,
20676: STR
20677: PUSH
20678: LD_VAR 0 3
20682: PUSH
20683: LD_VAR 0 2
20687: ARRAY
20688: PUSH
20689: LD_INT 4
20691: ARRAY
20692: STR
20693: PUSH
20694: LD_STRING )
20696: STR
20697: PPUSH
20698: CALL_OW 559
20702: GO 20612
20704: POP
20705: POP
// end ; end ;
20706: LD_VAR 0 1
20710: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
20711: LD_EXP 83
20715: IFFALSE 21402
20717: GO 20719
20719: DISABLE
20720: LD_INT 0
20722: PPUSH
20723: PPUSH
20724: PPUSH
20725: PPUSH
20726: PPUSH
20727: PPUSH
20728: PPUSH
20729: PPUSH
20730: PPUSH
// begin enable ;
20731: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
20732: LD_ADDR_VAR 0 3
20736: PUSH
20737: LD_EXP 83
20741: PPUSH
20742: CALL 67041 0 1
20746: ST_TO_ADDR
// if not list then
20747: LD_VAR 0 3
20751: NOT
20752: IFFALSE 20756
// exit ;
20754: GO 21402
// for i := 1 to list do
20756: LD_ADDR_VAR 0 1
20760: PUSH
20761: DOUBLE
20762: LD_INT 1
20764: DEC
20765: ST_TO_ADDR
20766: LD_VAR 0 3
20770: PUSH
20771: FOR_TO
20772: IFFALSE 21400
// begin depot := list [ i ] [ 2 ] ;
20774: LD_ADDR_VAR 0 8
20778: PUSH
20779: LD_VAR 0 3
20783: PUSH
20784: LD_VAR 0 1
20788: ARRAY
20789: PUSH
20790: LD_INT 2
20792: ARRAY
20793: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
20794: LD_ADDR_VAR 0 5
20798: PUSH
20799: LD_VAR 0 3
20803: PUSH
20804: LD_VAR 0 1
20808: ARRAY
20809: PUSH
20810: LD_INT 1
20812: ARRAY
20813: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
20814: LD_VAR 0 8
20818: PPUSH
20819: CALL_OW 301
20823: PUSH
20824: LD_VAR 0 5
20828: PUSH
20829: LD_VAR 0 8
20833: PPUSH
20834: CALL_OW 255
20838: NONEQUAL
20839: OR
20840: IFFALSE 20869
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
20842: LD_ADDR_EXP 83
20846: PUSH
20847: LD_EXP 83
20851: PPUSH
20852: LD_VAR 0 8
20856: PPUSH
20857: LD_INT 0
20859: PPUSH
20860: CALL_OW 1
20864: ST_TO_ADDR
// exit ;
20865: POP
20866: POP
20867: GO 21402
// end ; x := list [ i ] [ 3 ] ;
20869: LD_ADDR_VAR 0 6
20873: PUSH
20874: LD_VAR 0 3
20878: PUSH
20879: LD_VAR 0 1
20883: ARRAY
20884: PUSH
20885: LD_INT 3
20887: ARRAY
20888: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
20889: LD_ADDR_VAR 0 7
20893: PUSH
20894: LD_VAR 0 3
20898: PUSH
20899: LD_VAR 0 1
20903: ARRAY
20904: PUSH
20905: LD_INT 4
20907: ARRAY
20908: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
20909: LD_ADDR_VAR 0 9
20913: PUSH
20914: LD_VAR 0 6
20918: PPUSH
20919: LD_VAR 0 7
20923: PPUSH
20924: LD_INT 16
20926: PPUSH
20927: CALL 65625 0 3
20931: ST_TO_ADDR
// if not cratesNearbyPoint then
20932: LD_VAR 0 9
20936: NOT
20937: IFFALSE 20943
// exit ;
20939: POP
20940: POP
20941: GO 21402
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
20943: LD_ADDR_VAR 0 4
20947: PUSH
20948: LD_INT 22
20950: PUSH
20951: LD_VAR 0 5
20955: PUSH
20956: EMPTY
20957: LIST
20958: LIST
20959: PUSH
20960: LD_INT 3
20962: PUSH
20963: LD_INT 60
20965: PUSH
20966: EMPTY
20967: LIST
20968: PUSH
20969: EMPTY
20970: LIST
20971: LIST
20972: PUSH
20973: LD_INT 91
20975: PUSH
20976: LD_VAR 0 8
20980: PUSH
20981: LD_INT 6
20983: PUSH
20984: EMPTY
20985: LIST
20986: LIST
20987: LIST
20988: PUSH
20989: LD_INT 2
20991: PUSH
20992: LD_INT 25
20994: PUSH
20995: LD_INT 2
20997: PUSH
20998: EMPTY
20999: LIST
21000: LIST
21001: PUSH
21002: LD_INT 25
21004: PUSH
21005: LD_INT 16
21007: PUSH
21008: EMPTY
21009: LIST
21010: LIST
21011: PUSH
21012: EMPTY
21013: LIST
21014: LIST
21015: LIST
21016: PUSH
21017: EMPTY
21018: LIST
21019: LIST
21020: LIST
21021: LIST
21022: PPUSH
21023: CALL_OW 69
21027: PUSH
21028: LD_VAR 0 8
21032: PPUSH
21033: CALL_OW 313
21037: PPUSH
21038: LD_INT 3
21040: PUSH
21041: LD_INT 60
21043: PUSH
21044: EMPTY
21045: LIST
21046: PUSH
21047: EMPTY
21048: LIST
21049: LIST
21050: PUSH
21051: LD_INT 2
21053: PUSH
21054: LD_INT 25
21056: PUSH
21057: LD_INT 2
21059: PUSH
21060: EMPTY
21061: LIST
21062: LIST
21063: PUSH
21064: LD_INT 25
21066: PUSH
21067: LD_INT 16
21069: PUSH
21070: EMPTY
21071: LIST
21072: LIST
21073: PUSH
21074: EMPTY
21075: LIST
21076: LIST
21077: LIST
21078: PUSH
21079: EMPTY
21080: LIST
21081: LIST
21082: PPUSH
21083: CALL_OW 72
21087: UNION
21088: ST_TO_ADDR
// if tmp then
21089: LD_VAR 0 4
21093: IFFALSE 21173
// begin tmp := ShrinkArray ( tmp , 3 ) ;
21095: LD_ADDR_VAR 0 4
21099: PUSH
21100: LD_VAR 0 4
21104: PPUSH
21105: LD_INT 3
21107: PPUSH
21108: CALL 63592 0 2
21112: ST_TO_ADDR
// for j in tmp do
21113: LD_ADDR_VAR 0 2
21117: PUSH
21118: LD_VAR 0 4
21122: PUSH
21123: FOR_IN
21124: IFFALSE 21167
// begin if IsInUnit ( j ) then
21126: LD_VAR 0 2
21130: PPUSH
21131: CALL_OW 310
21135: IFFALSE 21146
// ComExit ( j ) ;
21137: LD_VAR 0 2
21141: PPUSH
21142: CALL 63675 0 1
// AddComCollect ( j , x , y ) ;
21146: LD_VAR 0 2
21150: PPUSH
21151: LD_VAR 0 6
21155: PPUSH
21156: LD_VAR 0 7
21160: PPUSH
21161: CALL_OW 177
// end ;
21165: GO 21123
21167: POP
21168: POP
// exit ;
21169: POP
21170: POP
21171: GO 21402
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
21173: LD_ADDR_VAR 0 4
21177: PUSH
21178: LD_INT 22
21180: PUSH
21181: LD_VAR 0 5
21185: PUSH
21186: EMPTY
21187: LIST
21188: LIST
21189: PUSH
21190: LD_INT 91
21192: PUSH
21193: LD_VAR 0 8
21197: PUSH
21198: LD_INT 8
21200: PUSH
21201: EMPTY
21202: LIST
21203: LIST
21204: LIST
21205: PUSH
21206: LD_INT 2
21208: PUSH
21209: LD_INT 34
21211: PUSH
21212: LD_INT 12
21214: PUSH
21215: EMPTY
21216: LIST
21217: LIST
21218: PUSH
21219: LD_INT 34
21221: PUSH
21222: LD_INT 51
21224: PUSH
21225: EMPTY
21226: LIST
21227: LIST
21228: PUSH
21229: LD_INT 34
21231: PUSH
21232: LD_INT 32
21234: PUSH
21235: EMPTY
21236: LIST
21237: LIST
21238: PUSH
21239: LD_INT 34
21241: PUSH
21242: LD_EXP 96
21246: PUSH
21247: EMPTY
21248: LIST
21249: LIST
21250: PUSH
21251: EMPTY
21252: LIST
21253: LIST
21254: LIST
21255: LIST
21256: LIST
21257: PUSH
21258: EMPTY
21259: LIST
21260: LIST
21261: LIST
21262: PPUSH
21263: CALL_OW 69
21267: ST_TO_ADDR
// if tmp then
21268: LD_VAR 0 4
21272: IFFALSE 21398
// begin for j in tmp do
21274: LD_ADDR_VAR 0 2
21278: PUSH
21279: LD_VAR 0 4
21283: PUSH
21284: FOR_IN
21285: IFFALSE 21396
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
21287: LD_VAR 0 2
21291: PPUSH
21292: CALL_OW 262
21296: PUSH
21297: LD_INT 3
21299: EQUAL
21300: PUSH
21301: LD_VAR 0 2
21305: PPUSH
21306: CALL_OW 261
21310: PUSH
21311: LD_INT 20
21313: GREATER
21314: OR
21315: PUSH
21316: LD_VAR 0 2
21320: PPUSH
21321: CALL_OW 314
21325: NOT
21326: AND
21327: PUSH
21328: LD_VAR 0 2
21332: PPUSH
21333: CALL_OW 263
21337: PUSH
21338: LD_INT 1
21340: NONEQUAL
21341: PUSH
21342: LD_VAR 0 2
21346: PPUSH
21347: CALL_OW 311
21351: OR
21352: AND
21353: IFFALSE 21394
// begin ComCollect ( j , x , y ) ;
21355: LD_VAR 0 2
21359: PPUSH
21360: LD_VAR 0 6
21364: PPUSH
21365: LD_VAR 0 7
21369: PPUSH
21370: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
21374: LD_VAR 0 2
21378: PPUSH
21379: LD_VAR 0 8
21383: PPUSH
21384: CALL_OW 172
// exit ;
21388: POP
21389: POP
21390: POP
21391: POP
21392: GO 21402
// end ;
21394: GO 21284
21396: POP
21397: POP
// end ; end ;
21398: GO 20771
21400: POP
21401: POP
// end ; end_of_file
21402: PPOPN 9
21404: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
21405: LD_INT 0
21407: PPUSH
21408: PPUSH
21409: PPUSH
21410: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
21411: LD_VAR 0 1
21415: PPUSH
21416: CALL_OW 264
21420: PUSH
21421: LD_EXP 99
21425: EQUAL
21426: IFFALSE 21498
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
21428: LD_INT 68
21430: PPUSH
21431: LD_VAR 0 1
21435: PPUSH
21436: CALL_OW 255
21440: PPUSH
21441: CALL_OW 321
21445: PUSH
21446: LD_INT 2
21448: EQUAL
21449: IFFALSE 21461
// eff := 70 else
21451: LD_ADDR_VAR 0 4
21455: PUSH
21456: LD_INT 70
21458: ST_TO_ADDR
21459: GO 21469
// eff := 30 ;
21461: LD_ADDR_VAR 0 4
21465: PUSH
21466: LD_INT 30
21468: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
21469: LD_VAR 0 1
21473: PPUSH
21474: CALL_OW 250
21478: PPUSH
21479: LD_VAR 0 1
21483: PPUSH
21484: CALL_OW 251
21488: PPUSH
21489: LD_VAR 0 4
21493: PPUSH
21494: CALL_OW 495
// end ; end ;
21498: LD_VAR 0 2
21502: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
21503: LD_INT 0
21505: PPUSH
// end ;
21506: LD_VAR 0 4
21510: RET
// export function SOS_Command ( cmd ) ; begin
21511: LD_INT 0
21513: PPUSH
// end ;
21514: LD_VAR 0 2
21518: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
21519: LD_INT 0
21521: PPUSH
// end ;
21522: LD_VAR 0 6
21526: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
21527: LD_INT 0
21529: PPUSH
21530: PPUSH
// if not vehicle or not factory then
21531: LD_VAR 0 1
21535: NOT
21536: PUSH
21537: LD_VAR 0 2
21541: NOT
21542: OR
21543: IFFALSE 21547
// exit ;
21545: GO 21778
// if factoryWaypoints >= factory then
21547: LD_EXP 82
21551: PUSH
21552: LD_VAR 0 2
21556: GREATEREQUAL
21557: IFFALSE 21778
// if factoryWaypoints [ factory ] then
21559: LD_EXP 82
21563: PUSH
21564: LD_VAR 0 2
21568: ARRAY
21569: IFFALSE 21778
// begin if GetControl ( vehicle ) = control_manual then
21571: LD_VAR 0 1
21575: PPUSH
21576: CALL_OW 263
21580: PUSH
21581: LD_INT 1
21583: EQUAL
21584: IFFALSE 21665
// begin driver := IsDrivenBy ( vehicle ) ;
21586: LD_ADDR_VAR 0 4
21590: PUSH
21591: LD_VAR 0 1
21595: PPUSH
21596: CALL_OW 311
21600: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21601: LD_VAR 0 4
21605: PPUSH
21606: LD_EXP 82
21610: PUSH
21611: LD_VAR 0 2
21615: ARRAY
21616: PUSH
21617: LD_INT 3
21619: ARRAY
21620: PPUSH
21621: LD_EXP 82
21625: PUSH
21626: LD_VAR 0 2
21630: ARRAY
21631: PUSH
21632: LD_INT 4
21634: ARRAY
21635: PPUSH
21636: CALL_OW 171
// AddComExitVehicle ( driver ) ;
21640: LD_VAR 0 4
21644: PPUSH
21645: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
21649: LD_VAR 0 4
21653: PPUSH
21654: LD_VAR 0 2
21658: PPUSH
21659: CALL_OW 180
// end else
21663: GO 21778
// if GetControl ( vehicle ) = control_remote then
21665: LD_VAR 0 1
21669: PPUSH
21670: CALL_OW 263
21674: PUSH
21675: LD_INT 2
21677: EQUAL
21678: IFFALSE 21739
// begin wait ( 0 0$2 ) ;
21680: LD_INT 70
21682: PPUSH
21683: CALL_OW 67
// if Connect ( vehicle ) then
21687: LD_VAR 0 1
21691: PPUSH
21692: CALL 33986 0 1
21696: IFFALSE 21737
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21698: LD_VAR 0 1
21702: PPUSH
21703: LD_EXP 82
21707: PUSH
21708: LD_VAR 0 2
21712: ARRAY
21713: PUSH
21714: LD_INT 3
21716: ARRAY
21717: PPUSH
21718: LD_EXP 82
21722: PUSH
21723: LD_VAR 0 2
21727: ARRAY
21728: PUSH
21729: LD_INT 4
21731: ARRAY
21732: PPUSH
21733: CALL_OW 171
// end else
21737: GO 21778
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21739: LD_VAR 0 1
21743: PPUSH
21744: LD_EXP 82
21748: PUSH
21749: LD_VAR 0 2
21753: ARRAY
21754: PUSH
21755: LD_INT 3
21757: ARRAY
21758: PPUSH
21759: LD_EXP 82
21763: PUSH
21764: LD_VAR 0 2
21768: ARRAY
21769: PUSH
21770: LD_INT 4
21772: ARRAY
21773: PPUSH
21774: CALL_OW 171
// end ; end ;
21778: LD_VAR 0 3
21782: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
21783: LD_INT 0
21785: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
21786: LD_VAR 0 1
21790: PUSH
21791: LD_INT 250
21793: EQUAL
21794: PUSH
21795: LD_VAR 0 2
21799: PPUSH
21800: CALL_OW 264
21804: PUSH
21805: LD_EXP 102
21809: EQUAL
21810: AND
21811: IFFALSE 21832
// MinerPlaceMine ( unit , x , y ) ;
21813: LD_VAR 0 2
21817: PPUSH
21818: LD_VAR 0 4
21822: PPUSH
21823: LD_VAR 0 5
21827: PPUSH
21828: CALL 24231 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
21832: LD_VAR 0 1
21836: PUSH
21837: LD_INT 251
21839: EQUAL
21840: PUSH
21841: LD_VAR 0 2
21845: PPUSH
21846: CALL_OW 264
21850: PUSH
21851: LD_EXP 102
21855: EQUAL
21856: AND
21857: IFFALSE 21878
// MinerDetonateMine ( unit , x , y ) ;
21859: LD_VAR 0 2
21863: PPUSH
21864: LD_VAR 0 4
21868: PPUSH
21869: LD_VAR 0 5
21873: PPUSH
21874: CALL 24508 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
21878: LD_VAR 0 1
21882: PUSH
21883: LD_INT 252
21885: EQUAL
21886: PUSH
21887: LD_VAR 0 2
21891: PPUSH
21892: CALL_OW 264
21896: PUSH
21897: LD_EXP 102
21901: EQUAL
21902: AND
21903: IFFALSE 21924
// MinerCreateMinefield ( unit , x , y ) ;
21905: LD_VAR 0 2
21909: PPUSH
21910: LD_VAR 0 4
21914: PPUSH
21915: LD_VAR 0 5
21919: PPUSH
21920: CALL 24925 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
21924: LD_VAR 0 1
21928: PUSH
21929: LD_INT 253
21931: EQUAL
21932: PUSH
21933: LD_VAR 0 2
21937: PPUSH
21938: CALL_OW 257
21942: PUSH
21943: LD_INT 5
21945: EQUAL
21946: AND
21947: IFFALSE 21968
// ComBinocular ( unit , x , y ) ;
21949: LD_VAR 0 2
21953: PPUSH
21954: LD_VAR 0 4
21958: PPUSH
21959: LD_VAR 0 5
21963: PPUSH
21964: CALL 25296 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
21968: LD_VAR 0 1
21972: PUSH
21973: LD_INT 254
21975: EQUAL
21976: PUSH
21977: LD_VAR 0 2
21981: PPUSH
21982: CALL_OW 264
21986: PUSH
21987: LD_EXP 97
21991: EQUAL
21992: AND
21993: PUSH
21994: LD_VAR 0 3
21998: PPUSH
21999: CALL_OW 263
22003: PUSH
22004: LD_INT 3
22006: EQUAL
22007: AND
22008: IFFALSE 22024
// HackDestroyVehicle ( unit , selectedUnit ) ;
22010: LD_VAR 0 2
22014: PPUSH
22015: LD_VAR 0 3
22019: PPUSH
22020: CALL 23591 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
22024: LD_VAR 0 1
22028: PUSH
22029: LD_INT 255
22031: EQUAL
22032: PUSH
22033: LD_VAR 0 2
22037: PPUSH
22038: CALL_OW 264
22042: PUSH
22043: LD_INT 14
22045: PUSH
22046: LD_INT 53
22048: PUSH
22049: EMPTY
22050: LIST
22051: LIST
22052: IN
22053: AND
22054: PUSH
22055: LD_VAR 0 4
22059: PPUSH
22060: LD_VAR 0 5
22064: PPUSH
22065: CALL_OW 488
22069: AND
22070: IFFALSE 22094
// CutTreeXYR ( unit , x , y , 12 ) ;
22072: LD_VAR 0 2
22076: PPUSH
22077: LD_VAR 0 4
22081: PPUSH
22082: LD_VAR 0 5
22086: PPUSH
22087: LD_INT 12
22089: PPUSH
22090: CALL 22157 0 4
// if cmd = 256 then
22094: LD_VAR 0 1
22098: PUSH
22099: LD_INT 256
22101: EQUAL
22102: IFFALSE 22123
// SetFactoryWaypoint ( unit , x , y ) ;
22104: LD_VAR 0 2
22108: PPUSH
22109: LD_VAR 0 4
22113: PPUSH
22114: LD_VAR 0 5
22118: PPUSH
22119: CALL 20092 0 3
// if cmd = 257 then
22123: LD_VAR 0 1
22127: PUSH
22128: LD_INT 257
22130: EQUAL
22131: IFFALSE 22152
// SetWarehouseGatheringPoint ( unit , x , y ) ;
22133: LD_VAR 0 2
22137: PPUSH
22138: LD_VAR 0 4
22142: PPUSH
22143: LD_VAR 0 5
22147: PPUSH
22148: CALL 20454 0 3
// end ;
22152: LD_VAR 0 6
22156: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
22157: LD_INT 0
22159: PPUSH
22160: PPUSH
22161: PPUSH
22162: PPUSH
22163: PPUSH
22164: PPUSH
22165: PPUSH
22166: PPUSH
22167: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
22168: LD_VAR 0 1
22172: NOT
22173: PUSH
22174: LD_VAR 0 2
22178: PPUSH
22179: LD_VAR 0 3
22183: PPUSH
22184: CALL_OW 488
22188: NOT
22189: OR
22190: PUSH
22191: LD_VAR 0 4
22195: NOT
22196: OR
22197: IFFALSE 22201
// exit ;
22199: GO 22541
// list := [ ] ;
22201: LD_ADDR_VAR 0 13
22205: PUSH
22206: EMPTY
22207: ST_TO_ADDR
// if x - r < 0 then
22208: LD_VAR 0 2
22212: PUSH
22213: LD_VAR 0 4
22217: MINUS
22218: PUSH
22219: LD_INT 0
22221: LESS
22222: IFFALSE 22234
// min_x := 0 else
22224: LD_ADDR_VAR 0 7
22228: PUSH
22229: LD_INT 0
22231: ST_TO_ADDR
22232: GO 22250
// min_x := x - r ;
22234: LD_ADDR_VAR 0 7
22238: PUSH
22239: LD_VAR 0 2
22243: PUSH
22244: LD_VAR 0 4
22248: MINUS
22249: ST_TO_ADDR
// if y - r < 0 then
22250: LD_VAR 0 3
22254: PUSH
22255: LD_VAR 0 4
22259: MINUS
22260: PUSH
22261: LD_INT 0
22263: LESS
22264: IFFALSE 22276
// min_y := 0 else
22266: LD_ADDR_VAR 0 8
22270: PUSH
22271: LD_INT 0
22273: ST_TO_ADDR
22274: GO 22292
// min_y := y - r ;
22276: LD_ADDR_VAR 0 8
22280: PUSH
22281: LD_VAR 0 3
22285: PUSH
22286: LD_VAR 0 4
22290: MINUS
22291: ST_TO_ADDR
// max_x := x + r ;
22292: LD_ADDR_VAR 0 9
22296: PUSH
22297: LD_VAR 0 2
22301: PUSH
22302: LD_VAR 0 4
22306: PLUS
22307: ST_TO_ADDR
// max_y := y + r ;
22308: LD_ADDR_VAR 0 10
22312: PUSH
22313: LD_VAR 0 3
22317: PUSH
22318: LD_VAR 0 4
22322: PLUS
22323: ST_TO_ADDR
// for _x = min_x to max_x do
22324: LD_ADDR_VAR 0 11
22328: PUSH
22329: DOUBLE
22330: LD_VAR 0 7
22334: DEC
22335: ST_TO_ADDR
22336: LD_VAR 0 9
22340: PUSH
22341: FOR_TO
22342: IFFALSE 22459
// for _y = min_y to max_y do
22344: LD_ADDR_VAR 0 12
22348: PUSH
22349: DOUBLE
22350: LD_VAR 0 8
22354: DEC
22355: ST_TO_ADDR
22356: LD_VAR 0 10
22360: PUSH
22361: FOR_TO
22362: IFFALSE 22455
// begin if not ValidHex ( _x , _y ) then
22364: LD_VAR 0 11
22368: PPUSH
22369: LD_VAR 0 12
22373: PPUSH
22374: CALL_OW 488
22378: NOT
22379: IFFALSE 22383
// continue ;
22381: GO 22361
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
22383: LD_VAR 0 11
22387: PPUSH
22388: LD_VAR 0 12
22392: PPUSH
22393: CALL_OW 351
22397: PUSH
22398: LD_VAR 0 11
22402: PPUSH
22403: LD_VAR 0 12
22407: PPUSH
22408: CALL_OW 554
22412: AND
22413: IFFALSE 22453
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
22415: LD_ADDR_VAR 0 13
22419: PUSH
22420: LD_VAR 0 13
22424: PPUSH
22425: LD_VAR 0 13
22429: PUSH
22430: LD_INT 1
22432: PLUS
22433: PPUSH
22434: LD_VAR 0 11
22438: PUSH
22439: LD_VAR 0 12
22443: PUSH
22444: EMPTY
22445: LIST
22446: LIST
22447: PPUSH
22448: CALL_OW 2
22452: ST_TO_ADDR
// end ;
22453: GO 22361
22455: POP
22456: POP
22457: GO 22341
22459: POP
22460: POP
// if not list then
22461: LD_VAR 0 13
22465: NOT
22466: IFFALSE 22470
// exit ;
22468: GO 22541
// for i in list do
22470: LD_ADDR_VAR 0 6
22474: PUSH
22475: LD_VAR 0 13
22479: PUSH
22480: FOR_IN
22481: IFFALSE 22539
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
22483: LD_VAR 0 1
22487: PPUSH
22488: LD_STRING M
22490: PUSH
22491: LD_VAR 0 6
22495: PUSH
22496: LD_INT 1
22498: ARRAY
22499: PUSH
22500: LD_VAR 0 6
22504: PUSH
22505: LD_INT 2
22507: ARRAY
22508: PUSH
22509: LD_INT 0
22511: PUSH
22512: LD_INT 0
22514: PUSH
22515: LD_INT 0
22517: PUSH
22518: LD_INT 0
22520: PUSH
22521: EMPTY
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: PUSH
22530: EMPTY
22531: LIST
22532: PPUSH
22533: CALL_OW 447
22537: GO 22480
22539: POP
22540: POP
// end ;
22541: LD_VAR 0 5
22545: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
22546: LD_EXP 85
22550: NOT
22551: IFFALSE 22601
22553: GO 22555
22555: DISABLE
// begin initHack := true ;
22556: LD_ADDR_EXP 85
22560: PUSH
22561: LD_INT 1
22563: ST_TO_ADDR
// hackTanks := [ ] ;
22564: LD_ADDR_EXP 86
22568: PUSH
22569: EMPTY
22570: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
22571: LD_ADDR_EXP 87
22575: PUSH
22576: EMPTY
22577: ST_TO_ADDR
// hackLimit := 3 ;
22578: LD_ADDR_EXP 88
22582: PUSH
22583: LD_INT 3
22585: ST_TO_ADDR
// hackDist := 12 ;
22586: LD_ADDR_EXP 89
22590: PUSH
22591: LD_INT 12
22593: ST_TO_ADDR
// hackCounter := [ ] ;
22594: LD_ADDR_EXP 90
22598: PUSH
22599: EMPTY
22600: ST_TO_ADDR
// end ;
22601: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
22602: LD_EXP 85
22606: PUSH
22607: LD_INT 34
22609: PUSH
22610: LD_EXP 97
22614: PUSH
22615: EMPTY
22616: LIST
22617: LIST
22618: PPUSH
22619: CALL_OW 69
22623: AND
22624: IFFALSE 22879
22626: GO 22628
22628: DISABLE
22629: LD_INT 0
22631: PPUSH
22632: PPUSH
// begin enable ;
22633: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
22634: LD_ADDR_VAR 0 1
22638: PUSH
22639: LD_INT 34
22641: PUSH
22642: LD_EXP 97
22646: PUSH
22647: EMPTY
22648: LIST
22649: LIST
22650: PPUSH
22651: CALL_OW 69
22655: PUSH
22656: FOR_IN
22657: IFFALSE 22877
// begin if not i in hackTanks then
22659: LD_VAR 0 1
22663: PUSH
22664: LD_EXP 86
22668: IN
22669: NOT
22670: IFFALSE 22753
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
22672: LD_ADDR_EXP 86
22676: PUSH
22677: LD_EXP 86
22681: PPUSH
22682: LD_EXP 86
22686: PUSH
22687: LD_INT 1
22689: PLUS
22690: PPUSH
22691: LD_VAR 0 1
22695: PPUSH
22696: CALL_OW 1
22700: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
22701: LD_ADDR_EXP 87
22705: PUSH
22706: LD_EXP 87
22710: PPUSH
22711: LD_EXP 87
22715: PUSH
22716: LD_INT 1
22718: PLUS
22719: PPUSH
22720: EMPTY
22721: PPUSH
22722: CALL_OW 1
22726: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
22727: LD_ADDR_EXP 90
22731: PUSH
22732: LD_EXP 90
22736: PPUSH
22737: LD_EXP 90
22741: PUSH
22742: LD_INT 1
22744: PLUS
22745: PPUSH
22746: EMPTY
22747: PPUSH
22748: CALL_OW 1
22752: ST_TO_ADDR
// end ; if not IsOk ( i ) then
22753: LD_VAR 0 1
22757: PPUSH
22758: CALL_OW 302
22762: NOT
22763: IFFALSE 22776
// begin HackUnlinkAll ( i ) ;
22765: LD_VAR 0 1
22769: PPUSH
22770: CALL 22882 0 1
// continue ;
22774: GO 22656
// end ; HackCheckCapturedStatus ( i ) ;
22776: LD_VAR 0 1
22780: PPUSH
22781: CALL 23325 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
22785: LD_ADDR_VAR 0 2
22789: PUSH
22790: LD_INT 81
22792: PUSH
22793: LD_VAR 0 1
22797: PPUSH
22798: CALL_OW 255
22802: PUSH
22803: EMPTY
22804: LIST
22805: LIST
22806: PUSH
22807: LD_INT 33
22809: PUSH
22810: LD_INT 3
22812: PUSH
22813: EMPTY
22814: LIST
22815: LIST
22816: PUSH
22817: LD_INT 91
22819: PUSH
22820: LD_VAR 0 1
22824: PUSH
22825: LD_EXP 89
22829: PUSH
22830: EMPTY
22831: LIST
22832: LIST
22833: LIST
22834: PUSH
22835: LD_INT 50
22837: PUSH
22838: EMPTY
22839: LIST
22840: PUSH
22841: EMPTY
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: PPUSH
22847: CALL_OW 69
22851: ST_TO_ADDR
// if not tmp then
22852: LD_VAR 0 2
22856: NOT
22857: IFFALSE 22861
// continue ;
22859: GO 22656
// HackLink ( i , tmp ) ;
22861: LD_VAR 0 1
22865: PPUSH
22866: LD_VAR 0 2
22870: PPUSH
22871: CALL 23018 0 2
// end ;
22875: GO 22656
22877: POP
22878: POP
// end ;
22879: PPOPN 2
22881: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
22882: LD_INT 0
22884: PPUSH
22885: PPUSH
22886: PPUSH
// if not hack in hackTanks then
22887: LD_VAR 0 1
22891: PUSH
22892: LD_EXP 86
22896: IN
22897: NOT
22898: IFFALSE 22902
// exit ;
22900: GO 23013
// index := GetElementIndex ( hackTanks , hack ) ;
22902: LD_ADDR_VAR 0 4
22906: PUSH
22907: LD_EXP 86
22911: PPUSH
22912: LD_VAR 0 1
22916: PPUSH
22917: CALL 30800 0 2
22921: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
22922: LD_EXP 87
22926: PUSH
22927: LD_VAR 0 4
22931: ARRAY
22932: IFFALSE 23013
// begin for i in hackTanksCaptured [ index ] do
22934: LD_ADDR_VAR 0 3
22938: PUSH
22939: LD_EXP 87
22943: PUSH
22944: LD_VAR 0 4
22948: ARRAY
22949: PUSH
22950: FOR_IN
22951: IFFALSE 22977
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
22953: LD_VAR 0 3
22957: PUSH
22958: LD_INT 1
22960: ARRAY
22961: PPUSH
22962: LD_VAR 0 3
22966: PUSH
22967: LD_INT 2
22969: ARRAY
22970: PPUSH
22971: CALL_OW 235
22975: GO 22950
22977: POP
22978: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
22979: LD_ADDR_EXP 87
22983: PUSH
22984: LD_EXP 87
22988: PPUSH
22989: LD_VAR 0 4
22993: PPUSH
22994: EMPTY
22995: PPUSH
22996: CALL_OW 1
23000: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
23001: LD_VAR 0 1
23005: PPUSH
23006: LD_INT 0
23008: PPUSH
23009: CALL_OW 505
// end ; end ;
23013: LD_VAR 0 2
23017: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
23018: LD_INT 0
23020: PPUSH
23021: PPUSH
23022: PPUSH
// if not hack in hackTanks or not vehicles then
23023: LD_VAR 0 1
23027: PUSH
23028: LD_EXP 86
23032: IN
23033: NOT
23034: PUSH
23035: LD_VAR 0 2
23039: NOT
23040: OR
23041: IFFALSE 23045
// exit ;
23043: GO 23320
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
23045: LD_ADDR_VAR 0 2
23049: PUSH
23050: LD_VAR 0 1
23054: PPUSH
23055: LD_VAR 0 2
23059: PPUSH
23060: LD_INT 1
23062: PPUSH
23063: LD_INT 1
23065: PPUSH
23066: CALL 31450 0 4
23070: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
23071: LD_ADDR_VAR 0 5
23075: PUSH
23076: LD_EXP 86
23080: PPUSH
23081: LD_VAR 0 1
23085: PPUSH
23086: CALL 30800 0 2
23090: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
23091: LD_EXP 87
23095: PUSH
23096: LD_VAR 0 5
23100: ARRAY
23101: PUSH
23102: LD_EXP 88
23106: LESS
23107: IFFALSE 23296
// begin for i := 1 to vehicles do
23109: LD_ADDR_VAR 0 4
23113: PUSH
23114: DOUBLE
23115: LD_INT 1
23117: DEC
23118: ST_TO_ADDR
23119: LD_VAR 0 2
23123: PUSH
23124: FOR_TO
23125: IFFALSE 23294
// begin if hackTanksCaptured [ index ] = hackLimit then
23127: LD_EXP 87
23131: PUSH
23132: LD_VAR 0 5
23136: ARRAY
23137: PUSH
23138: LD_EXP 88
23142: EQUAL
23143: IFFALSE 23147
// break ;
23145: GO 23294
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
23147: LD_ADDR_EXP 90
23151: PUSH
23152: LD_EXP 90
23156: PPUSH
23157: LD_VAR 0 5
23161: PPUSH
23162: LD_EXP 90
23166: PUSH
23167: LD_VAR 0 5
23171: ARRAY
23172: PUSH
23173: LD_INT 1
23175: PLUS
23176: PPUSH
23177: CALL_OW 1
23181: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
23182: LD_ADDR_EXP 87
23186: PUSH
23187: LD_EXP 87
23191: PPUSH
23192: LD_VAR 0 5
23196: PUSH
23197: LD_EXP 87
23201: PUSH
23202: LD_VAR 0 5
23206: ARRAY
23207: PUSH
23208: LD_INT 1
23210: PLUS
23211: PUSH
23212: EMPTY
23213: LIST
23214: LIST
23215: PPUSH
23216: LD_VAR 0 2
23220: PUSH
23221: LD_VAR 0 4
23225: ARRAY
23226: PUSH
23227: LD_VAR 0 2
23231: PUSH
23232: LD_VAR 0 4
23236: ARRAY
23237: PPUSH
23238: CALL_OW 255
23242: PUSH
23243: EMPTY
23244: LIST
23245: LIST
23246: PPUSH
23247: CALL 31015 0 3
23251: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
23252: LD_VAR 0 2
23256: PUSH
23257: LD_VAR 0 4
23261: ARRAY
23262: PPUSH
23263: LD_VAR 0 1
23267: PPUSH
23268: CALL_OW 255
23272: PPUSH
23273: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
23277: LD_VAR 0 2
23281: PUSH
23282: LD_VAR 0 4
23286: ARRAY
23287: PPUSH
23288: CALL_OW 141
// end ;
23292: GO 23124
23294: POP
23295: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23296: LD_VAR 0 1
23300: PPUSH
23301: LD_EXP 87
23305: PUSH
23306: LD_VAR 0 5
23310: ARRAY
23311: PUSH
23312: LD_INT 0
23314: PLUS
23315: PPUSH
23316: CALL_OW 505
// end ;
23320: LD_VAR 0 3
23324: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
23325: LD_INT 0
23327: PPUSH
23328: PPUSH
23329: PPUSH
23330: PPUSH
// if not hack in hackTanks then
23331: LD_VAR 0 1
23335: PUSH
23336: LD_EXP 86
23340: IN
23341: NOT
23342: IFFALSE 23346
// exit ;
23344: GO 23586
// index := GetElementIndex ( hackTanks , hack ) ;
23346: LD_ADDR_VAR 0 4
23350: PUSH
23351: LD_EXP 86
23355: PPUSH
23356: LD_VAR 0 1
23360: PPUSH
23361: CALL 30800 0 2
23365: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
23366: LD_ADDR_VAR 0 3
23370: PUSH
23371: DOUBLE
23372: LD_EXP 87
23376: PUSH
23377: LD_VAR 0 4
23381: ARRAY
23382: INC
23383: ST_TO_ADDR
23384: LD_INT 1
23386: PUSH
23387: FOR_DOWNTO
23388: IFFALSE 23560
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
23390: LD_ADDR_VAR 0 5
23394: PUSH
23395: LD_EXP 87
23399: PUSH
23400: LD_VAR 0 4
23404: ARRAY
23405: PUSH
23406: LD_VAR 0 3
23410: ARRAY
23411: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
23412: LD_VAR 0 5
23416: PUSH
23417: LD_INT 1
23419: ARRAY
23420: PPUSH
23421: CALL_OW 302
23425: NOT
23426: PUSH
23427: LD_VAR 0 5
23431: PUSH
23432: LD_INT 1
23434: ARRAY
23435: PPUSH
23436: CALL_OW 255
23440: PUSH
23441: LD_VAR 0 1
23445: PPUSH
23446: CALL_OW 255
23450: NONEQUAL
23451: OR
23452: IFFALSE 23558
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
23454: LD_VAR 0 5
23458: PUSH
23459: LD_INT 1
23461: ARRAY
23462: PPUSH
23463: CALL_OW 305
23467: PUSH
23468: LD_VAR 0 5
23472: PUSH
23473: LD_INT 1
23475: ARRAY
23476: PPUSH
23477: CALL_OW 255
23481: PUSH
23482: LD_VAR 0 1
23486: PPUSH
23487: CALL_OW 255
23491: EQUAL
23492: AND
23493: IFFALSE 23517
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
23495: LD_VAR 0 5
23499: PUSH
23500: LD_INT 1
23502: ARRAY
23503: PPUSH
23504: LD_VAR 0 5
23508: PUSH
23509: LD_INT 2
23511: ARRAY
23512: PPUSH
23513: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
23517: LD_ADDR_EXP 87
23521: PUSH
23522: LD_EXP 87
23526: PPUSH
23527: LD_VAR 0 4
23531: PPUSH
23532: LD_EXP 87
23536: PUSH
23537: LD_VAR 0 4
23541: ARRAY
23542: PPUSH
23543: LD_VAR 0 3
23547: PPUSH
23548: CALL_OW 3
23552: PPUSH
23553: CALL_OW 1
23557: ST_TO_ADDR
// end ; end ;
23558: GO 23387
23560: POP
23561: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23562: LD_VAR 0 1
23566: PPUSH
23567: LD_EXP 87
23571: PUSH
23572: LD_VAR 0 4
23576: ARRAY
23577: PUSH
23578: LD_INT 0
23580: PLUS
23581: PPUSH
23582: CALL_OW 505
// end ;
23586: LD_VAR 0 2
23590: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
23591: LD_INT 0
23593: PPUSH
23594: PPUSH
23595: PPUSH
23596: PPUSH
// if not hack in hackTanks then
23597: LD_VAR 0 1
23601: PUSH
23602: LD_EXP 86
23606: IN
23607: NOT
23608: IFFALSE 23612
// exit ;
23610: GO 23697
// index := GetElementIndex ( hackTanks , hack ) ;
23612: LD_ADDR_VAR 0 5
23616: PUSH
23617: LD_EXP 86
23621: PPUSH
23622: LD_VAR 0 1
23626: PPUSH
23627: CALL 30800 0 2
23631: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
23632: LD_ADDR_VAR 0 4
23636: PUSH
23637: DOUBLE
23638: LD_INT 1
23640: DEC
23641: ST_TO_ADDR
23642: LD_EXP 87
23646: PUSH
23647: LD_VAR 0 5
23651: ARRAY
23652: PUSH
23653: FOR_TO
23654: IFFALSE 23695
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
23656: LD_EXP 87
23660: PUSH
23661: LD_VAR 0 5
23665: ARRAY
23666: PUSH
23667: LD_VAR 0 4
23671: ARRAY
23672: PUSH
23673: LD_INT 1
23675: ARRAY
23676: PUSH
23677: LD_VAR 0 2
23681: EQUAL
23682: IFFALSE 23693
// KillUnit ( vehicle ) ;
23684: LD_VAR 0 2
23688: PPUSH
23689: CALL_OW 66
23693: GO 23653
23695: POP
23696: POP
// end ;
23697: LD_VAR 0 3
23701: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
23702: LD_EXP 91
23706: NOT
23707: IFFALSE 23742
23709: GO 23711
23711: DISABLE
// begin initMiner := true ;
23712: LD_ADDR_EXP 91
23716: PUSH
23717: LD_INT 1
23719: ST_TO_ADDR
// minersList := [ ] ;
23720: LD_ADDR_EXP 92
23724: PUSH
23725: EMPTY
23726: ST_TO_ADDR
// minerMinesList := [ ] ;
23727: LD_ADDR_EXP 93
23731: PUSH
23732: EMPTY
23733: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
23734: LD_ADDR_EXP 94
23738: PUSH
23739: LD_INT 5
23741: ST_TO_ADDR
// end ;
23742: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
23743: LD_EXP 91
23747: PUSH
23748: LD_INT 34
23750: PUSH
23751: LD_EXP 102
23755: PUSH
23756: EMPTY
23757: LIST
23758: LIST
23759: PPUSH
23760: CALL_OW 69
23764: AND
23765: IFFALSE 24228
23767: GO 23769
23769: DISABLE
23770: LD_INT 0
23772: PPUSH
23773: PPUSH
23774: PPUSH
23775: PPUSH
// begin enable ;
23776: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
23777: LD_ADDR_VAR 0 1
23781: PUSH
23782: LD_INT 34
23784: PUSH
23785: LD_EXP 102
23789: PUSH
23790: EMPTY
23791: LIST
23792: LIST
23793: PPUSH
23794: CALL_OW 69
23798: PUSH
23799: FOR_IN
23800: IFFALSE 23872
// begin if not i in minersList then
23802: LD_VAR 0 1
23806: PUSH
23807: LD_EXP 92
23811: IN
23812: NOT
23813: IFFALSE 23870
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
23815: LD_ADDR_EXP 92
23819: PUSH
23820: LD_EXP 92
23824: PPUSH
23825: LD_EXP 92
23829: PUSH
23830: LD_INT 1
23832: PLUS
23833: PPUSH
23834: LD_VAR 0 1
23838: PPUSH
23839: CALL_OW 1
23843: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
23844: LD_ADDR_EXP 93
23848: PUSH
23849: LD_EXP 93
23853: PPUSH
23854: LD_EXP 93
23858: PUSH
23859: LD_INT 1
23861: PLUS
23862: PPUSH
23863: EMPTY
23864: PPUSH
23865: CALL_OW 1
23869: ST_TO_ADDR
// end end ;
23870: GO 23799
23872: POP
23873: POP
// for i := minerMinesList downto 1 do
23874: LD_ADDR_VAR 0 1
23878: PUSH
23879: DOUBLE
23880: LD_EXP 93
23884: INC
23885: ST_TO_ADDR
23886: LD_INT 1
23888: PUSH
23889: FOR_DOWNTO
23890: IFFALSE 24226
// begin if IsLive ( minersList [ i ] ) then
23892: LD_EXP 92
23896: PUSH
23897: LD_VAR 0 1
23901: ARRAY
23902: PPUSH
23903: CALL_OW 300
23907: IFFALSE 23935
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
23909: LD_EXP 92
23913: PUSH
23914: LD_VAR 0 1
23918: ARRAY
23919: PPUSH
23920: LD_EXP 93
23924: PUSH
23925: LD_VAR 0 1
23929: ARRAY
23930: PPUSH
23931: CALL_OW 505
// if not minerMinesList [ i ] then
23935: LD_EXP 93
23939: PUSH
23940: LD_VAR 0 1
23944: ARRAY
23945: NOT
23946: IFFALSE 23950
// continue ;
23948: GO 23889
// for j := minerMinesList [ i ] downto 1 do
23950: LD_ADDR_VAR 0 2
23954: PUSH
23955: DOUBLE
23956: LD_EXP 93
23960: PUSH
23961: LD_VAR 0 1
23965: ARRAY
23966: INC
23967: ST_TO_ADDR
23968: LD_INT 1
23970: PUSH
23971: FOR_DOWNTO
23972: IFFALSE 24222
// begin side := GetSide ( minersList [ i ] ) ;
23974: LD_ADDR_VAR 0 3
23978: PUSH
23979: LD_EXP 92
23983: PUSH
23984: LD_VAR 0 1
23988: ARRAY
23989: PPUSH
23990: CALL_OW 255
23994: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
23995: LD_ADDR_VAR 0 4
23999: PUSH
24000: LD_EXP 93
24004: PUSH
24005: LD_VAR 0 1
24009: ARRAY
24010: PUSH
24011: LD_VAR 0 2
24015: ARRAY
24016: PUSH
24017: LD_INT 1
24019: ARRAY
24020: PPUSH
24021: LD_EXP 93
24025: PUSH
24026: LD_VAR 0 1
24030: ARRAY
24031: PUSH
24032: LD_VAR 0 2
24036: ARRAY
24037: PUSH
24038: LD_INT 2
24040: ARRAY
24041: PPUSH
24042: CALL_OW 428
24046: ST_TO_ADDR
// if not tmp then
24047: LD_VAR 0 4
24051: NOT
24052: IFFALSE 24056
// continue ;
24054: GO 23971
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
24056: LD_VAR 0 4
24060: PUSH
24061: LD_INT 81
24063: PUSH
24064: LD_VAR 0 3
24068: PUSH
24069: EMPTY
24070: LIST
24071: LIST
24072: PPUSH
24073: CALL_OW 69
24077: IN
24078: PUSH
24079: LD_EXP 93
24083: PUSH
24084: LD_VAR 0 1
24088: ARRAY
24089: PUSH
24090: LD_VAR 0 2
24094: ARRAY
24095: PUSH
24096: LD_INT 1
24098: ARRAY
24099: PPUSH
24100: LD_EXP 93
24104: PUSH
24105: LD_VAR 0 1
24109: ARRAY
24110: PUSH
24111: LD_VAR 0 2
24115: ARRAY
24116: PUSH
24117: LD_INT 2
24119: ARRAY
24120: PPUSH
24121: CALL_OW 458
24125: AND
24126: IFFALSE 24220
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
24128: LD_EXP 93
24132: PUSH
24133: LD_VAR 0 1
24137: ARRAY
24138: PUSH
24139: LD_VAR 0 2
24143: ARRAY
24144: PUSH
24145: LD_INT 1
24147: ARRAY
24148: PPUSH
24149: LD_EXP 93
24153: PUSH
24154: LD_VAR 0 1
24158: ARRAY
24159: PUSH
24160: LD_VAR 0 2
24164: ARRAY
24165: PUSH
24166: LD_INT 2
24168: ARRAY
24169: PPUSH
24170: LD_VAR 0 3
24174: PPUSH
24175: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
24179: LD_ADDR_EXP 93
24183: PUSH
24184: LD_EXP 93
24188: PPUSH
24189: LD_VAR 0 1
24193: PPUSH
24194: LD_EXP 93
24198: PUSH
24199: LD_VAR 0 1
24203: ARRAY
24204: PPUSH
24205: LD_VAR 0 2
24209: PPUSH
24210: CALL_OW 3
24214: PPUSH
24215: CALL_OW 1
24219: ST_TO_ADDR
// end ; end ;
24220: GO 23971
24222: POP
24223: POP
// end ;
24224: GO 23889
24226: POP
24227: POP
// end ;
24228: PPOPN 4
24230: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
24231: LD_INT 0
24233: PPUSH
24234: PPUSH
// result := false ;
24235: LD_ADDR_VAR 0 4
24239: PUSH
24240: LD_INT 0
24242: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
24243: LD_VAR 0 1
24247: PPUSH
24248: CALL_OW 264
24252: PUSH
24253: LD_EXP 102
24257: EQUAL
24258: NOT
24259: IFFALSE 24263
// exit ;
24261: GO 24503
// index := GetElementIndex ( minersList , unit ) ;
24263: LD_ADDR_VAR 0 5
24267: PUSH
24268: LD_EXP 92
24272: PPUSH
24273: LD_VAR 0 1
24277: PPUSH
24278: CALL 30800 0 2
24282: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
24283: LD_EXP 93
24287: PUSH
24288: LD_VAR 0 5
24292: ARRAY
24293: PUSH
24294: LD_EXP 94
24298: GREATEREQUAL
24299: IFFALSE 24303
// exit ;
24301: GO 24503
// ComMoveXY ( unit , x , y ) ;
24303: LD_VAR 0 1
24307: PPUSH
24308: LD_VAR 0 2
24312: PPUSH
24313: LD_VAR 0 3
24317: PPUSH
24318: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24322: LD_INT 35
24324: PPUSH
24325: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
24329: LD_VAR 0 1
24333: PPUSH
24334: LD_VAR 0 2
24338: PPUSH
24339: LD_VAR 0 3
24343: PPUSH
24344: CALL 62086 0 3
24348: NOT
24349: PUSH
24350: LD_VAR 0 1
24354: PPUSH
24355: CALL_OW 314
24359: AND
24360: IFFALSE 24364
// exit ;
24362: GO 24503
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
24364: LD_VAR 0 2
24368: PPUSH
24369: LD_VAR 0 3
24373: PPUSH
24374: CALL_OW 428
24378: PUSH
24379: LD_VAR 0 1
24383: EQUAL
24384: PUSH
24385: LD_VAR 0 1
24389: PPUSH
24390: CALL_OW 314
24394: NOT
24395: AND
24396: IFFALSE 24322
// PlaySoundXY ( x , y , PlantMine ) ;
24398: LD_VAR 0 2
24402: PPUSH
24403: LD_VAR 0 3
24407: PPUSH
24408: LD_STRING PlantMine
24410: PPUSH
24411: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
24415: LD_VAR 0 2
24419: PPUSH
24420: LD_VAR 0 3
24424: PPUSH
24425: LD_VAR 0 1
24429: PPUSH
24430: CALL_OW 255
24434: PPUSH
24435: LD_INT 0
24437: PPUSH
24438: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
24442: LD_ADDR_EXP 93
24446: PUSH
24447: LD_EXP 93
24451: PPUSH
24452: LD_VAR 0 5
24456: PUSH
24457: LD_EXP 93
24461: PUSH
24462: LD_VAR 0 5
24466: ARRAY
24467: PUSH
24468: LD_INT 1
24470: PLUS
24471: PUSH
24472: EMPTY
24473: LIST
24474: LIST
24475: PPUSH
24476: LD_VAR 0 2
24480: PUSH
24481: LD_VAR 0 3
24485: PUSH
24486: EMPTY
24487: LIST
24488: LIST
24489: PPUSH
24490: CALL 31015 0 3
24494: ST_TO_ADDR
// result := true ;
24495: LD_ADDR_VAR 0 4
24499: PUSH
24500: LD_INT 1
24502: ST_TO_ADDR
// end ;
24503: LD_VAR 0 4
24507: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
24508: LD_INT 0
24510: PPUSH
24511: PPUSH
24512: PPUSH
// if not unit in minersList then
24513: LD_VAR 0 1
24517: PUSH
24518: LD_EXP 92
24522: IN
24523: NOT
24524: IFFALSE 24528
// exit ;
24526: GO 24920
// index := GetElementIndex ( minersList , unit ) ;
24528: LD_ADDR_VAR 0 6
24532: PUSH
24533: LD_EXP 92
24537: PPUSH
24538: LD_VAR 0 1
24542: PPUSH
24543: CALL 30800 0 2
24547: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
24548: LD_ADDR_VAR 0 5
24552: PUSH
24553: DOUBLE
24554: LD_EXP 93
24558: PUSH
24559: LD_VAR 0 6
24563: ARRAY
24564: INC
24565: ST_TO_ADDR
24566: LD_INT 1
24568: PUSH
24569: FOR_DOWNTO
24570: IFFALSE 24731
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
24572: LD_EXP 93
24576: PUSH
24577: LD_VAR 0 6
24581: ARRAY
24582: PUSH
24583: LD_VAR 0 5
24587: ARRAY
24588: PUSH
24589: LD_INT 1
24591: ARRAY
24592: PUSH
24593: LD_VAR 0 2
24597: EQUAL
24598: PUSH
24599: LD_EXP 93
24603: PUSH
24604: LD_VAR 0 6
24608: ARRAY
24609: PUSH
24610: LD_VAR 0 5
24614: ARRAY
24615: PUSH
24616: LD_INT 2
24618: ARRAY
24619: PUSH
24620: LD_VAR 0 3
24624: EQUAL
24625: AND
24626: IFFALSE 24729
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24628: LD_EXP 93
24632: PUSH
24633: LD_VAR 0 6
24637: ARRAY
24638: PUSH
24639: LD_VAR 0 5
24643: ARRAY
24644: PUSH
24645: LD_INT 1
24647: ARRAY
24648: PPUSH
24649: LD_EXP 93
24653: PUSH
24654: LD_VAR 0 6
24658: ARRAY
24659: PUSH
24660: LD_VAR 0 5
24664: ARRAY
24665: PUSH
24666: LD_INT 2
24668: ARRAY
24669: PPUSH
24670: LD_VAR 0 1
24674: PPUSH
24675: CALL_OW 255
24679: PPUSH
24680: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24684: LD_ADDR_EXP 93
24688: PUSH
24689: LD_EXP 93
24693: PPUSH
24694: LD_VAR 0 6
24698: PPUSH
24699: LD_EXP 93
24703: PUSH
24704: LD_VAR 0 6
24708: ARRAY
24709: PPUSH
24710: LD_VAR 0 5
24714: PPUSH
24715: CALL_OW 3
24719: PPUSH
24720: CALL_OW 1
24724: ST_TO_ADDR
// exit ;
24725: POP
24726: POP
24727: GO 24920
// end ; end ;
24729: GO 24569
24731: POP
24732: POP
// for i := minerMinesList [ index ] downto 1 do
24733: LD_ADDR_VAR 0 5
24737: PUSH
24738: DOUBLE
24739: LD_EXP 93
24743: PUSH
24744: LD_VAR 0 6
24748: ARRAY
24749: INC
24750: ST_TO_ADDR
24751: LD_INT 1
24753: PUSH
24754: FOR_DOWNTO
24755: IFFALSE 24918
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
24757: LD_EXP 93
24761: PUSH
24762: LD_VAR 0 6
24766: ARRAY
24767: PUSH
24768: LD_VAR 0 5
24772: ARRAY
24773: PUSH
24774: LD_INT 1
24776: ARRAY
24777: PPUSH
24778: LD_EXP 93
24782: PUSH
24783: LD_VAR 0 6
24787: ARRAY
24788: PUSH
24789: LD_VAR 0 5
24793: ARRAY
24794: PUSH
24795: LD_INT 2
24797: ARRAY
24798: PPUSH
24799: LD_VAR 0 2
24803: PPUSH
24804: LD_VAR 0 3
24808: PPUSH
24809: CALL_OW 298
24813: PUSH
24814: LD_INT 6
24816: LESS
24817: IFFALSE 24916
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24819: LD_EXP 93
24823: PUSH
24824: LD_VAR 0 6
24828: ARRAY
24829: PUSH
24830: LD_VAR 0 5
24834: ARRAY
24835: PUSH
24836: LD_INT 1
24838: ARRAY
24839: PPUSH
24840: LD_EXP 93
24844: PUSH
24845: LD_VAR 0 6
24849: ARRAY
24850: PUSH
24851: LD_VAR 0 5
24855: ARRAY
24856: PUSH
24857: LD_INT 2
24859: ARRAY
24860: PPUSH
24861: LD_VAR 0 1
24865: PPUSH
24866: CALL_OW 255
24870: PPUSH
24871: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24875: LD_ADDR_EXP 93
24879: PUSH
24880: LD_EXP 93
24884: PPUSH
24885: LD_VAR 0 6
24889: PPUSH
24890: LD_EXP 93
24894: PUSH
24895: LD_VAR 0 6
24899: ARRAY
24900: PPUSH
24901: LD_VAR 0 5
24905: PPUSH
24906: CALL_OW 3
24910: PPUSH
24911: CALL_OW 1
24915: ST_TO_ADDR
// end ; end ;
24916: GO 24754
24918: POP
24919: POP
// end ;
24920: LD_VAR 0 4
24924: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
24925: LD_INT 0
24927: PPUSH
24928: PPUSH
24929: PPUSH
24930: PPUSH
24931: PPUSH
24932: PPUSH
24933: PPUSH
24934: PPUSH
24935: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
24936: LD_VAR 0 1
24940: PPUSH
24941: CALL_OW 264
24945: PUSH
24946: LD_EXP 102
24950: EQUAL
24951: NOT
24952: PUSH
24953: LD_VAR 0 1
24957: PUSH
24958: LD_EXP 92
24962: IN
24963: NOT
24964: OR
24965: IFFALSE 24969
// exit ;
24967: GO 25291
// index := GetElementIndex ( minersList , unit ) ;
24969: LD_ADDR_VAR 0 6
24973: PUSH
24974: LD_EXP 92
24978: PPUSH
24979: LD_VAR 0 1
24983: PPUSH
24984: CALL 30800 0 2
24988: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
24989: LD_ADDR_VAR 0 8
24993: PUSH
24994: LD_EXP 94
24998: PUSH
24999: LD_EXP 93
25003: PUSH
25004: LD_VAR 0 6
25008: ARRAY
25009: MINUS
25010: ST_TO_ADDR
// if not minesFreeAmount then
25011: LD_VAR 0 8
25015: NOT
25016: IFFALSE 25020
// exit ;
25018: GO 25291
// tmp := [ ] ;
25020: LD_ADDR_VAR 0 7
25024: PUSH
25025: EMPTY
25026: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
25027: LD_ADDR_VAR 0 5
25031: PUSH
25032: DOUBLE
25033: LD_INT 1
25035: DEC
25036: ST_TO_ADDR
25037: LD_VAR 0 8
25041: PUSH
25042: FOR_TO
25043: IFFALSE 25238
// begin _d := rand ( 0 , 5 ) ;
25045: LD_ADDR_VAR 0 11
25049: PUSH
25050: LD_INT 0
25052: PPUSH
25053: LD_INT 5
25055: PPUSH
25056: CALL_OW 12
25060: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
25061: LD_ADDR_VAR 0 12
25065: PUSH
25066: LD_INT 2
25068: PPUSH
25069: LD_INT 6
25071: PPUSH
25072: CALL_OW 12
25076: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
25077: LD_ADDR_VAR 0 9
25081: PUSH
25082: LD_VAR 0 2
25086: PPUSH
25087: LD_VAR 0 11
25091: PPUSH
25092: LD_VAR 0 12
25096: PPUSH
25097: CALL_OW 272
25101: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
25102: LD_ADDR_VAR 0 10
25106: PUSH
25107: LD_VAR 0 3
25111: PPUSH
25112: LD_VAR 0 11
25116: PPUSH
25117: LD_VAR 0 12
25121: PPUSH
25122: CALL_OW 273
25126: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
25127: LD_VAR 0 9
25131: PPUSH
25132: LD_VAR 0 10
25136: PPUSH
25137: CALL_OW 488
25141: PUSH
25142: LD_VAR 0 9
25146: PUSH
25147: LD_VAR 0 10
25151: PUSH
25152: EMPTY
25153: LIST
25154: LIST
25155: PUSH
25156: LD_VAR 0 7
25160: IN
25161: NOT
25162: AND
25163: PUSH
25164: LD_VAR 0 9
25168: PPUSH
25169: LD_VAR 0 10
25173: PPUSH
25174: CALL_OW 458
25178: NOT
25179: AND
25180: IFFALSE 25222
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
25182: LD_ADDR_VAR 0 7
25186: PUSH
25187: LD_VAR 0 7
25191: PPUSH
25192: LD_VAR 0 7
25196: PUSH
25197: LD_INT 1
25199: PLUS
25200: PPUSH
25201: LD_VAR 0 9
25205: PUSH
25206: LD_VAR 0 10
25210: PUSH
25211: EMPTY
25212: LIST
25213: LIST
25214: PPUSH
25215: CALL_OW 1
25219: ST_TO_ADDR
25220: GO 25236
// i := i - 1 ;
25222: LD_ADDR_VAR 0 5
25226: PUSH
25227: LD_VAR 0 5
25231: PUSH
25232: LD_INT 1
25234: MINUS
25235: ST_TO_ADDR
// end ;
25236: GO 25042
25238: POP
25239: POP
// for i in tmp do
25240: LD_ADDR_VAR 0 5
25244: PUSH
25245: LD_VAR 0 7
25249: PUSH
25250: FOR_IN
25251: IFFALSE 25289
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
25253: LD_VAR 0 1
25257: PPUSH
25258: LD_VAR 0 5
25262: PUSH
25263: LD_INT 1
25265: ARRAY
25266: PPUSH
25267: LD_VAR 0 5
25271: PUSH
25272: LD_INT 2
25274: ARRAY
25275: PPUSH
25276: CALL 24231 0 3
25280: NOT
25281: IFFALSE 25287
// exit ;
25283: POP
25284: POP
25285: GO 25291
25287: GO 25250
25289: POP
25290: POP
// end ;
25291: LD_VAR 0 4
25295: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
25296: LD_INT 0
25298: PPUSH
25299: PPUSH
25300: PPUSH
25301: PPUSH
25302: PPUSH
25303: PPUSH
25304: PPUSH
// if not GetClass ( unit ) = class_sniper then
25305: LD_VAR 0 1
25309: PPUSH
25310: CALL_OW 257
25314: PUSH
25315: LD_INT 5
25317: EQUAL
25318: NOT
25319: IFFALSE 25323
// exit ;
25321: GO 25711
// dist := 8 ;
25323: LD_ADDR_VAR 0 5
25327: PUSH
25328: LD_INT 8
25330: ST_TO_ADDR
// viewRange := 12 ;
25331: LD_ADDR_VAR 0 7
25335: PUSH
25336: LD_INT 12
25338: ST_TO_ADDR
// side := GetSide ( unit ) ;
25339: LD_ADDR_VAR 0 6
25343: PUSH
25344: LD_VAR 0 1
25348: PPUSH
25349: CALL_OW 255
25353: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
25354: LD_INT 61
25356: PPUSH
25357: LD_VAR 0 6
25361: PPUSH
25362: CALL_OW 321
25366: PUSH
25367: LD_INT 2
25369: EQUAL
25370: IFFALSE 25380
// viewRange := 16 ;
25372: LD_ADDR_VAR 0 7
25376: PUSH
25377: LD_INT 16
25379: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
25380: LD_VAR 0 1
25384: PPUSH
25385: LD_VAR 0 2
25389: PPUSH
25390: LD_VAR 0 3
25394: PPUSH
25395: CALL_OW 297
25399: PUSH
25400: LD_VAR 0 5
25404: GREATER
25405: IFFALSE 25484
// begin ComMoveXY ( unit , x , y ) ;
25407: LD_VAR 0 1
25411: PPUSH
25412: LD_VAR 0 2
25416: PPUSH
25417: LD_VAR 0 3
25421: PPUSH
25422: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25426: LD_INT 35
25428: PPUSH
25429: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
25433: LD_VAR 0 1
25437: PPUSH
25438: LD_VAR 0 2
25442: PPUSH
25443: LD_VAR 0 3
25447: PPUSH
25448: CALL 62086 0 3
25452: NOT
25453: IFFALSE 25457
// exit ;
25455: GO 25711
// until GetDistUnitXY ( unit , x , y ) < dist ;
25457: LD_VAR 0 1
25461: PPUSH
25462: LD_VAR 0 2
25466: PPUSH
25467: LD_VAR 0 3
25471: PPUSH
25472: CALL_OW 297
25476: PUSH
25477: LD_VAR 0 5
25481: LESS
25482: IFFALSE 25426
// end ; ComTurnXY ( unit , x , y ) ;
25484: LD_VAR 0 1
25488: PPUSH
25489: LD_VAR 0 2
25493: PPUSH
25494: LD_VAR 0 3
25498: PPUSH
25499: CALL_OW 118
// wait ( 5 ) ;
25503: LD_INT 5
25505: PPUSH
25506: CALL_OW 67
// _d := GetDir ( unit ) ;
25510: LD_ADDR_VAR 0 10
25514: PUSH
25515: LD_VAR 0 1
25519: PPUSH
25520: CALL_OW 254
25524: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
25525: LD_ADDR_VAR 0 8
25529: PUSH
25530: LD_VAR 0 1
25534: PPUSH
25535: CALL_OW 250
25539: PPUSH
25540: LD_VAR 0 10
25544: PPUSH
25545: LD_VAR 0 5
25549: PPUSH
25550: CALL_OW 272
25554: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
25555: LD_ADDR_VAR 0 9
25559: PUSH
25560: LD_VAR 0 1
25564: PPUSH
25565: CALL_OW 251
25569: PPUSH
25570: LD_VAR 0 10
25574: PPUSH
25575: LD_VAR 0 5
25579: PPUSH
25580: CALL_OW 273
25584: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25585: LD_VAR 0 8
25589: PPUSH
25590: LD_VAR 0 9
25594: PPUSH
25595: CALL_OW 488
25599: NOT
25600: IFFALSE 25604
// exit ;
25602: GO 25711
// ComAnimCustom ( unit , 1 ) ;
25604: LD_VAR 0 1
25608: PPUSH
25609: LD_INT 1
25611: PPUSH
25612: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
25616: LD_VAR 0 8
25620: PPUSH
25621: LD_VAR 0 9
25625: PPUSH
25626: LD_VAR 0 6
25630: PPUSH
25631: LD_VAR 0 7
25635: PPUSH
25636: CALL_OW 330
// repeat wait ( 1 ) ;
25640: LD_INT 1
25642: PPUSH
25643: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
25647: LD_VAR 0 1
25651: PPUSH
25652: CALL_OW 316
25656: PUSH
25657: LD_VAR 0 1
25661: PPUSH
25662: CALL_OW 314
25666: OR
25667: PUSH
25668: LD_VAR 0 1
25672: PPUSH
25673: CALL_OW 302
25677: NOT
25678: OR
25679: PUSH
25680: LD_VAR 0 1
25684: PPUSH
25685: CALL_OW 301
25689: OR
25690: IFFALSE 25640
// RemoveSeeing ( _x , _y , side ) ;
25692: LD_VAR 0 8
25696: PPUSH
25697: LD_VAR 0 9
25701: PPUSH
25702: LD_VAR 0 6
25706: PPUSH
25707: CALL_OW 331
// end ; end_of_file
25711: LD_VAR 0 4
25715: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export function InitGlobalVariables ; begin
25716: LD_INT 0
25718: PPUSH
// ar_miner := 81 ;
25719: LD_ADDR_EXP 102
25723: PUSH
25724: LD_INT 81
25726: ST_TO_ADDR
// ar_crane := 88 ;
25727: LD_ADDR_EXP 101
25731: PUSH
25732: LD_INT 88
25734: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
25735: LD_ADDR_EXP 96
25739: PUSH
25740: LD_INT 89
25742: ST_TO_ADDR
// us_hack := 99 ;
25743: LD_ADDR_EXP 97
25747: PUSH
25748: LD_INT 99
25750: ST_TO_ADDR
// us_artillery := 97 ;
25751: LD_ADDR_EXP 98
25755: PUSH
25756: LD_INT 97
25758: ST_TO_ADDR
// ar_bio_bomb := 91 ;
25759: LD_ADDR_EXP 99
25763: PUSH
25764: LD_INT 91
25766: ST_TO_ADDR
// ar_mortar := 92 ;
25767: LD_ADDR_EXP 100
25771: PUSH
25772: LD_INT 92
25774: ST_TO_ADDR
// ru_flamethrower := 93 ;
25775: LD_ADDR_EXP 103
25779: PUSH
25780: LD_INT 93
25782: ST_TO_ADDR
// ru_radar := 98 ;
25783: LD_ADDR_EXP 95
25787: PUSH
25788: LD_INT 98
25790: ST_TO_ADDR
// tech_Artillery := 80 ;
25791: LD_ADDR_EXP 104
25795: PUSH
25796: LD_INT 80
25798: ST_TO_ADDR
// tech_RadMat := 81 ;
25799: LD_ADDR_EXP 105
25803: PUSH
25804: LD_INT 81
25806: ST_TO_ADDR
// tech_BasicTools := 82 ;
25807: LD_ADDR_EXP 106
25811: PUSH
25812: LD_INT 82
25814: ST_TO_ADDR
// tech_Cargo := 83 ;
25815: LD_ADDR_EXP 107
25819: PUSH
25820: LD_INT 83
25822: ST_TO_ADDR
// tech_Track := 84 ;
25823: LD_ADDR_EXP 108
25827: PUSH
25828: LD_INT 84
25830: ST_TO_ADDR
// tech_Crane := 85 ;
25831: LD_ADDR_EXP 109
25835: PUSH
25836: LD_INT 85
25838: ST_TO_ADDR
// tech_Bulldozer := 86 ;
25839: LD_ADDR_EXP 110
25843: PUSH
25844: LD_INT 86
25846: ST_TO_ADDR
// tech_Hovercraft := 87 ;
25847: LD_ADDR_EXP 111
25851: PUSH
25852: LD_INT 87
25854: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
25855: LD_ADDR_EXP 112
25859: PUSH
25860: LD_INT 88
25862: ST_TO_ADDR
// end ;
25863: LD_VAR 0 1
25867: RET
// every 1 do
25868: GO 25870
25870: DISABLE
// InitGlobalVariables ; end_of_file
25871: CALL 25716 0 0
25875: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
25876: LD_INT 0
25878: PPUSH
25879: PPUSH
// if exist_mode then
25880: LD_VAR 0 2
25884: IFFALSE 25909
// unit := CreateCharacter ( prefix & ident ) else
25886: LD_ADDR_VAR 0 5
25890: PUSH
25891: LD_VAR 0 3
25895: PUSH
25896: LD_VAR 0 1
25900: STR
25901: PPUSH
25902: CALL_OW 34
25906: ST_TO_ADDR
25907: GO 25924
// unit := NewCharacter ( ident ) ;
25909: LD_ADDR_VAR 0 5
25913: PUSH
25914: LD_VAR 0 1
25918: PPUSH
25919: CALL_OW 25
25923: ST_TO_ADDR
// result := unit ;
25924: LD_ADDR_VAR 0 4
25928: PUSH
25929: LD_VAR 0 5
25933: ST_TO_ADDR
// end ;
25934: LD_VAR 0 4
25938: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
25939: LD_INT 0
25941: PPUSH
25942: PPUSH
// if not side or not nation then
25943: LD_VAR 0 1
25947: NOT
25948: PUSH
25949: LD_VAR 0 2
25953: NOT
25954: OR
25955: IFFALSE 25959
// exit ;
25957: GO 26727
// case nation of nation_american :
25959: LD_VAR 0 2
25963: PUSH
25964: LD_INT 1
25966: DOUBLE
25967: EQUAL
25968: IFTRUE 25972
25970: GO 26186
25972: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
25973: LD_ADDR_VAR 0 4
25977: PUSH
25978: LD_INT 35
25980: PUSH
25981: LD_INT 45
25983: PUSH
25984: LD_INT 46
25986: PUSH
25987: LD_INT 47
25989: PUSH
25990: LD_INT 82
25992: PUSH
25993: LD_INT 83
25995: PUSH
25996: LD_INT 84
25998: PUSH
25999: LD_INT 85
26001: PUSH
26002: LD_INT 86
26004: PUSH
26005: LD_INT 1
26007: PUSH
26008: LD_INT 2
26010: PUSH
26011: LD_INT 6
26013: PUSH
26014: LD_INT 15
26016: PUSH
26017: LD_INT 16
26019: PUSH
26020: LD_INT 7
26022: PUSH
26023: LD_INT 12
26025: PUSH
26026: LD_INT 13
26028: PUSH
26029: LD_INT 10
26031: PUSH
26032: LD_INT 14
26034: PUSH
26035: LD_INT 20
26037: PUSH
26038: LD_INT 21
26040: PUSH
26041: LD_INT 22
26043: PUSH
26044: LD_INT 25
26046: PUSH
26047: LD_INT 32
26049: PUSH
26050: LD_INT 27
26052: PUSH
26053: LD_INT 36
26055: PUSH
26056: LD_INT 69
26058: PUSH
26059: LD_INT 39
26061: PUSH
26062: LD_INT 34
26064: PUSH
26065: LD_INT 40
26067: PUSH
26068: LD_INT 48
26070: PUSH
26071: LD_INT 49
26073: PUSH
26074: LD_INT 50
26076: PUSH
26077: LD_INT 51
26079: PUSH
26080: LD_INT 52
26082: PUSH
26083: LD_INT 53
26085: PUSH
26086: LD_INT 54
26088: PUSH
26089: LD_INT 55
26091: PUSH
26092: LD_INT 56
26094: PUSH
26095: LD_INT 57
26097: PUSH
26098: LD_INT 58
26100: PUSH
26101: LD_INT 59
26103: PUSH
26104: LD_INT 60
26106: PUSH
26107: LD_INT 61
26109: PUSH
26110: LD_INT 62
26112: PUSH
26113: LD_INT 80
26115: PUSH
26116: LD_INT 82
26118: PUSH
26119: LD_INT 83
26121: PUSH
26122: LD_INT 84
26124: PUSH
26125: LD_INT 85
26127: PUSH
26128: LD_INT 86
26130: PUSH
26131: EMPTY
26132: LIST
26133: LIST
26134: LIST
26135: LIST
26136: LIST
26137: LIST
26138: LIST
26139: LIST
26140: LIST
26141: LIST
26142: LIST
26143: LIST
26144: LIST
26145: LIST
26146: LIST
26147: LIST
26148: LIST
26149: LIST
26150: LIST
26151: LIST
26152: LIST
26153: LIST
26154: LIST
26155: LIST
26156: LIST
26157: LIST
26158: LIST
26159: LIST
26160: LIST
26161: LIST
26162: LIST
26163: LIST
26164: LIST
26165: LIST
26166: LIST
26167: LIST
26168: LIST
26169: LIST
26170: LIST
26171: LIST
26172: LIST
26173: LIST
26174: LIST
26175: LIST
26176: LIST
26177: LIST
26178: LIST
26179: LIST
26180: LIST
26181: LIST
26182: LIST
26183: ST_TO_ADDR
26184: GO 26651
26186: LD_INT 2
26188: DOUBLE
26189: EQUAL
26190: IFTRUE 26194
26192: GO 26420
26194: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
26195: LD_ADDR_VAR 0 4
26199: PUSH
26200: LD_INT 35
26202: PUSH
26203: LD_INT 45
26205: PUSH
26206: LD_INT 46
26208: PUSH
26209: LD_INT 47
26211: PUSH
26212: LD_INT 82
26214: PUSH
26215: LD_INT 83
26217: PUSH
26218: LD_INT 84
26220: PUSH
26221: LD_INT 85
26223: PUSH
26224: LD_INT 87
26226: PUSH
26227: LD_INT 70
26229: PUSH
26230: LD_INT 1
26232: PUSH
26233: LD_INT 11
26235: PUSH
26236: LD_INT 3
26238: PUSH
26239: LD_INT 4
26241: PUSH
26242: LD_INT 5
26244: PUSH
26245: LD_INT 6
26247: PUSH
26248: LD_INT 15
26250: PUSH
26251: LD_INT 18
26253: PUSH
26254: LD_INT 7
26256: PUSH
26257: LD_INT 17
26259: PUSH
26260: LD_INT 8
26262: PUSH
26263: LD_INT 20
26265: PUSH
26266: LD_INT 21
26268: PUSH
26269: LD_INT 22
26271: PUSH
26272: LD_INT 72
26274: PUSH
26275: LD_INT 26
26277: PUSH
26278: LD_INT 69
26280: PUSH
26281: LD_INT 39
26283: PUSH
26284: LD_INT 40
26286: PUSH
26287: LD_INT 41
26289: PUSH
26290: LD_INT 42
26292: PUSH
26293: LD_INT 43
26295: PUSH
26296: LD_INT 48
26298: PUSH
26299: LD_INT 49
26301: PUSH
26302: LD_INT 50
26304: PUSH
26305: LD_INT 51
26307: PUSH
26308: LD_INT 52
26310: PUSH
26311: LD_INT 53
26313: PUSH
26314: LD_INT 54
26316: PUSH
26317: LD_INT 55
26319: PUSH
26320: LD_INT 56
26322: PUSH
26323: LD_INT 60
26325: PUSH
26326: LD_INT 61
26328: PUSH
26329: LD_INT 62
26331: PUSH
26332: LD_INT 66
26334: PUSH
26335: LD_INT 67
26337: PUSH
26338: LD_INT 68
26340: PUSH
26341: LD_INT 81
26343: PUSH
26344: LD_INT 82
26346: PUSH
26347: LD_INT 83
26349: PUSH
26350: LD_INT 84
26352: PUSH
26353: LD_INT 85
26355: PUSH
26356: LD_INT 87
26358: PUSH
26359: LD_INT 88
26361: PUSH
26362: EMPTY
26363: LIST
26364: LIST
26365: LIST
26366: LIST
26367: LIST
26368: LIST
26369: LIST
26370: LIST
26371: LIST
26372: LIST
26373: LIST
26374: LIST
26375: LIST
26376: LIST
26377: LIST
26378: LIST
26379: LIST
26380: LIST
26381: LIST
26382: LIST
26383: LIST
26384: LIST
26385: LIST
26386: LIST
26387: LIST
26388: LIST
26389: LIST
26390: LIST
26391: LIST
26392: LIST
26393: LIST
26394: LIST
26395: LIST
26396: LIST
26397: LIST
26398: LIST
26399: LIST
26400: LIST
26401: LIST
26402: LIST
26403: LIST
26404: LIST
26405: LIST
26406: LIST
26407: LIST
26408: LIST
26409: LIST
26410: LIST
26411: LIST
26412: LIST
26413: LIST
26414: LIST
26415: LIST
26416: LIST
26417: ST_TO_ADDR
26418: GO 26651
26420: LD_INT 3
26422: DOUBLE
26423: EQUAL
26424: IFTRUE 26428
26426: GO 26650
26428: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
26429: LD_ADDR_VAR 0 4
26433: PUSH
26434: LD_INT 46
26436: PUSH
26437: LD_INT 47
26439: PUSH
26440: LD_INT 1
26442: PUSH
26443: LD_INT 2
26445: PUSH
26446: LD_INT 82
26448: PUSH
26449: LD_INT 83
26451: PUSH
26452: LD_INT 84
26454: PUSH
26455: LD_INT 85
26457: PUSH
26458: LD_INT 86
26460: PUSH
26461: LD_INT 11
26463: PUSH
26464: LD_INT 9
26466: PUSH
26467: LD_INT 20
26469: PUSH
26470: LD_INT 19
26472: PUSH
26473: LD_INT 21
26475: PUSH
26476: LD_INT 24
26478: PUSH
26479: LD_INT 22
26481: PUSH
26482: LD_INT 25
26484: PUSH
26485: LD_INT 28
26487: PUSH
26488: LD_INT 29
26490: PUSH
26491: LD_INT 30
26493: PUSH
26494: LD_INT 31
26496: PUSH
26497: LD_INT 37
26499: PUSH
26500: LD_INT 38
26502: PUSH
26503: LD_INT 32
26505: PUSH
26506: LD_INT 27
26508: PUSH
26509: LD_INT 33
26511: PUSH
26512: LD_INT 69
26514: PUSH
26515: LD_INT 39
26517: PUSH
26518: LD_INT 34
26520: PUSH
26521: LD_INT 40
26523: PUSH
26524: LD_INT 71
26526: PUSH
26527: LD_INT 23
26529: PUSH
26530: LD_INT 44
26532: PUSH
26533: LD_INT 48
26535: PUSH
26536: LD_INT 49
26538: PUSH
26539: LD_INT 50
26541: PUSH
26542: LD_INT 51
26544: PUSH
26545: LD_INT 52
26547: PUSH
26548: LD_INT 53
26550: PUSH
26551: LD_INT 54
26553: PUSH
26554: LD_INT 55
26556: PUSH
26557: LD_INT 56
26559: PUSH
26560: LD_INT 57
26562: PUSH
26563: LD_INT 58
26565: PUSH
26566: LD_INT 59
26568: PUSH
26569: LD_INT 63
26571: PUSH
26572: LD_INT 64
26574: PUSH
26575: LD_INT 65
26577: PUSH
26578: LD_INT 82
26580: PUSH
26581: LD_INT 83
26583: PUSH
26584: LD_INT 84
26586: PUSH
26587: LD_INT 85
26589: PUSH
26590: LD_INT 86
26592: PUSH
26593: EMPTY
26594: LIST
26595: LIST
26596: LIST
26597: LIST
26598: LIST
26599: LIST
26600: LIST
26601: LIST
26602: LIST
26603: LIST
26604: LIST
26605: LIST
26606: LIST
26607: LIST
26608: LIST
26609: LIST
26610: LIST
26611: LIST
26612: LIST
26613: LIST
26614: LIST
26615: LIST
26616: LIST
26617: LIST
26618: LIST
26619: LIST
26620: LIST
26621: LIST
26622: LIST
26623: LIST
26624: LIST
26625: LIST
26626: LIST
26627: LIST
26628: LIST
26629: LIST
26630: LIST
26631: LIST
26632: LIST
26633: LIST
26634: LIST
26635: LIST
26636: LIST
26637: LIST
26638: LIST
26639: LIST
26640: LIST
26641: LIST
26642: LIST
26643: LIST
26644: LIST
26645: LIST
26646: LIST
26647: ST_TO_ADDR
26648: GO 26651
26650: POP
// if state > - 1 and state < 3 then
26651: LD_VAR 0 3
26655: PUSH
26656: LD_INT 1
26658: NEG
26659: GREATER
26660: PUSH
26661: LD_VAR 0 3
26665: PUSH
26666: LD_INT 3
26668: LESS
26669: AND
26670: IFFALSE 26727
// for i in result do
26672: LD_ADDR_VAR 0 5
26676: PUSH
26677: LD_VAR 0 4
26681: PUSH
26682: FOR_IN
26683: IFFALSE 26725
// if GetTech ( i , side ) <> state then
26685: LD_VAR 0 5
26689: PPUSH
26690: LD_VAR 0 1
26694: PPUSH
26695: CALL_OW 321
26699: PUSH
26700: LD_VAR 0 3
26704: NONEQUAL
26705: IFFALSE 26723
// result := result diff i ;
26707: LD_ADDR_VAR 0 4
26711: PUSH
26712: LD_VAR 0 4
26716: PUSH
26717: LD_VAR 0 5
26721: DIFF
26722: ST_TO_ADDR
26723: GO 26682
26725: POP
26726: POP
// end ;
26727: LD_VAR 0 4
26731: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
26732: LD_INT 0
26734: PPUSH
26735: PPUSH
26736: PPUSH
// result := true ;
26737: LD_ADDR_VAR 0 3
26741: PUSH
26742: LD_INT 1
26744: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
26745: LD_ADDR_VAR 0 5
26749: PUSH
26750: LD_VAR 0 2
26754: PPUSH
26755: CALL_OW 480
26759: ST_TO_ADDR
// if not tmp then
26760: LD_VAR 0 5
26764: NOT
26765: IFFALSE 26769
// exit ;
26767: GO 26818
// for i in tmp do
26769: LD_ADDR_VAR 0 4
26773: PUSH
26774: LD_VAR 0 5
26778: PUSH
26779: FOR_IN
26780: IFFALSE 26816
// if GetTech ( i , side ) <> state_researched then
26782: LD_VAR 0 4
26786: PPUSH
26787: LD_VAR 0 1
26791: PPUSH
26792: CALL_OW 321
26796: PUSH
26797: LD_INT 2
26799: NONEQUAL
26800: IFFALSE 26814
// begin result := false ;
26802: LD_ADDR_VAR 0 3
26806: PUSH
26807: LD_INT 0
26809: ST_TO_ADDR
// exit ;
26810: POP
26811: POP
26812: GO 26818
// end ;
26814: GO 26779
26816: POP
26817: POP
// end ;
26818: LD_VAR 0 3
26822: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
26823: LD_INT 0
26825: PPUSH
26826: PPUSH
26827: PPUSH
26828: PPUSH
26829: PPUSH
26830: PPUSH
26831: PPUSH
26832: PPUSH
26833: PPUSH
26834: PPUSH
26835: PPUSH
26836: PPUSH
26837: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
26838: LD_VAR 0 1
26842: NOT
26843: PUSH
26844: LD_VAR 0 1
26848: PPUSH
26849: CALL_OW 257
26853: PUSH
26854: LD_INT 9
26856: NONEQUAL
26857: OR
26858: IFFALSE 26862
// exit ;
26860: GO 27435
// side := GetSide ( unit ) ;
26862: LD_ADDR_VAR 0 9
26866: PUSH
26867: LD_VAR 0 1
26871: PPUSH
26872: CALL_OW 255
26876: ST_TO_ADDR
// tech_space := tech_spacanom ;
26877: LD_ADDR_VAR 0 12
26881: PUSH
26882: LD_INT 29
26884: ST_TO_ADDR
// tech_time := tech_taurad ;
26885: LD_ADDR_VAR 0 13
26889: PUSH
26890: LD_INT 28
26892: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
26893: LD_ADDR_VAR 0 11
26897: PUSH
26898: LD_VAR 0 1
26902: PPUSH
26903: CALL_OW 310
26907: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
26908: LD_VAR 0 11
26912: PPUSH
26913: CALL_OW 247
26917: PUSH
26918: LD_INT 2
26920: EQUAL
26921: IFFALSE 26925
// exit ;
26923: GO 27435
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26925: LD_ADDR_VAR 0 8
26929: PUSH
26930: LD_INT 81
26932: PUSH
26933: LD_VAR 0 9
26937: PUSH
26938: EMPTY
26939: LIST
26940: LIST
26941: PUSH
26942: LD_INT 3
26944: PUSH
26945: LD_INT 21
26947: PUSH
26948: LD_INT 3
26950: PUSH
26951: EMPTY
26952: LIST
26953: LIST
26954: PUSH
26955: EMPTY
26956: LIST
26957: LIST
26958: PUSH
26959: EMPTY
26960: LIST
26961: LIST
26962: PPUSH
26963: CALL_OW 69
26967: ST_TO_ADDR
// if not tmp then
26968: LD_VAR 0 8
26972: NOT
26973: IFFALSE 26977
// exit ;
26975: GO 27435
// if in_unit then
26977: LD_VAR 0 11
26981: IFFALSE 27005
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
26983: LD_ADDR_VAR 0 10
26987: PUSH
26988: LD_VAR 0 8
26992: PPUSH
26993: LD_VAR 0 11
26997: PPUSH
26998: CALL_OW 74
27002: ST_TO_ADDR
27003: GO 27025
// enemy := NearestUnitToUnit ( tmp , unit ) ;
27005: LD_ADDR_VAR 0 10
27009: PUSH
27010: LD_VAR 0 8
27014: PPUSH
27015: LD_VAR 0 1
27019: PPUSH
27020: CALL_OW 74
27024: ST_TO_ADDR
// if not enemy then
27025: LD_VAR 0 10
27029: NOT
27030: IFFALSE 27034
// exit ;
27032: GO 27435
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
27034: LD_VAR 0 11
27038: PUSH
27039: LD_VAR 0 11
27043: PPUSH
27044: LD_VAR 0 10
27048: PPUSH
27049: CALL_OW 296
27053: PUSH
27054: LD_INT 13
27056: GREATER
27057: AND
27058: PUSH
27059: LD_VAR 0 1
27063: PPUSH
27064: LD_VAR 0 10
27068: PPUSH
27069: CALL_OW 296
27073: PUSH
27074: LD_INT 12
27076: GREATER
27077: OR
27078: IFFALSE 27082
// exit ;
27080: GO 27435
// missile := [ 1 ] ;
27082: LD_ADDR_VAR 0 14
27086: PUSH
27087: LD_INT 1
27089: PUSH
27090: EMPTY
27091: LIST
27092: ST_TO_ADDR
// if Researched ( side , tech_space ) then
27093: LD_VAR 0 9
27097: PPUSH
27098: LD_VAR 0 12
27102: PPUSH
27103: CALL_OW 325
27107: IFFALSE 27136
// missile := Replace ( missile , missile + 1 , 2 ) ;
27109: LD_ADDR_VAR 0 14
27113: PUSH
27114: LD_VAR 0 14
27118: PPUSH
27119: LD_VAR 0 14
27123: PUSH
27124: LD_INT 1
27126: PLUS
27127: PPUSH
27128: LD_INT 2
27130: PPUSH
27131: CALL_OW 1
27135: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
27136: LD_VAR 0 9
27140: PPUSH
27141: LD_VAR 0 13
27145: PPUSH
27146: CALL_OW 325
27150: PUSH
27151: LD_VAR 0 10
27155: PPUSH
27156: CALL_OW 255
27160: PPUSH
27161: LD_VAR 0 13
27165: PPUSH
27166: CALL_OW 325
27170: NOT
27171: AND
27172: IFFALSE 27201
// missile := Replace ( missile , missile + 1 , 3 ) ;
27174: LD_ADDR_VAR 0 14
27178: PUSH
27179: LD_VAR 0 14
27183: PPUSH
27184: LD_VAR 0 14
27188: PUSH
27189: LD_INT 1
27191: PLUS
27192: PPUSH
27193: LD_INT 3
27195: PPUSH
27196: CALL_OW 1
27200: ST_TO_ADDR
// if missile < 2 then
27201: LD_VAR 0 14
27205: PUSH
27206: LD_INT 2
27208: LESS
27209: IFFALSE 27213
// exit ;
27211: GO 27435
// x := GetX ( enemy ) ;
27213: LD_ADDR_VAR 0 4
27217: PUSH
27218: LD_VAR 0 10
27222: PPUSH
27223: CALL_OW 250
27227: ST_TO_ADDR
// y := GetY ( enemy ) ;
27228: LD_ADDR_VAR 0 5
27232: PUSH
27233: LD_VAR 0 10
27237: PPUSH
27238: CALL_OW 251
27242: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
27243: LD_ADDR_VAR 0 6
27247: PUSH
27248: LD_VAR 0 4
27252: PUSH
27253: LD_INT 1
27255: NEG
27256: PPUSH
27257: LD_INT 1
27259: PPUSH
27260: CALL_OW 12
27264: PLUS
27265: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
27266: LD_ADDR_VAR 0 7
27270: PUSH
27271: LD_VAR 0 5
27275: PUSH
27276: LD_INT 1
27278: NEG
27279: PPUSH
27280: LD_INT 1
27282: PPUSH
27283: CALL_OW 12
27287: PLUS
27288: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27289: LD_VAR 0 6
27293: PPUSH
27294: LD_VAR 0 7
27298: PPUSH
27299: CALL_OW 488
27303: NOT
27304: IFFALSE 27326
// begin _x := x ;
27306: LD_ADDR_VAR 0 6
27310: PUSH
27311: LD_VAR 0 4
27315: ST_TO_ADDR
// _y := y ;
27316: LD_ADDR_VAR 0 7
27320: PUSH
27321: LD_VAR 0 5
27325: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
27326: LD_ADDR_VAR 0 3
27330: PUSH
27331: LD_INT 1
27333: PPUSH
27334: LD_VAR 0 14
27338: PPUSH
27339: CALL_OW 12
27343: ST_TO_ADDR
// case i of 1 :
27344: LD_VAR 0 3
27348: PUSH
27349: LD_INT 1
27351: DOUBLE
27352: EQUAL
27353: IFTRUE 27357
27355: GO 27374
27357: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
27358: LD_VAR 0 1
27362: PPUSH
27363: LD_VAR 0 10
27367: PPUSH
27368: CALL_OW 115
27372: GO 27435
27374: LD_INT 2
27376: DOUBLE
27377: EQUAL
27378: IFTRUE 27382
27380: GO 27404
27382: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
27383: LD_VAR 0 1
27387: PPUSH
27388: LD_VAR 0 6
27392: PPUSH
27393: LD_VAR 0 7
27397: PPUSH
27398: CALL_OW 153
27402: GO 27435
27404: LD_INT 3
27406: DOUBLE
27407: EQUAL
27408: IFTRUE 27412
27410: GO 27434
27412: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
27413: LD_VAR 0 1
27417: PPUSH
27418: LD_VAR 0 6
27422: PPUSH
27423: LD_VAR 0 7
27427: PPUSH
27428: CALL_OW 154
27432: GO 27435
27434: POP
// end ;
27435: LD_VAR 0 2
27439: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
27440: LD_INT 0
27442: PPUSH
27443: PPUSH
27444: PPUSH
27445: PPUSH
27446: PPUSH
27447: PPUSH
// if not unit or not building then
27448: LD_VAR 0 1
27452: NOT
27453: PUSH
27454: LD_VAR 0 2
27458: NOT
27459: OR
27460: IFFALSE 27464
// exit ;
27462: GO 27622
// x := GetX ( building ) ;
27464: LD_ADDR_VAR 0 5
27468: PUSH
27469: LD_VAR 0 2
27473: PPUSH
27474: CALL_OW 250
27478: ST_TO_ADDR
// y := GetY ( building ) ;
27479: LD_ADDR_VAR 0 6
27483: PUSH
27484: LD_VAR 0 2
27488: PPUSH
27489: CALL_OW 251
27493: ST_TO_ADDR
// for i = 0 to 5 do
27494: LD_ADDR_VAR 0 4
27498: PUSH
27499: DOUBLE
27500: LD_INT 0
27502: DEC
27503: ST_TO_ADDR
27504: LD_INT 5
27506: PUSH
27507: FOR_TO
27508: IFFALSE 27620
// begin _x := ShiftX ( x , i , 3 ) ;
27510: LD_ADDR_VAR 0 7
27514: PUSH
27515: LD_VAR 0 5
27519: PPUSH
27520: LD_VAR 0 4
27524: PPUSH
27525: LD_INT 3
27527: PPUSH
27528: CALL_OW 272
27532: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
27533: LD_ADDR_VAR 0 8
27537: PUSH
27538: LD_VAR 0 6
27542: PPUSH
27543: LD_VAR 0 4
27547: PPUSH
27548: LD_INT 3
27550: PPUSH
27551: CALL_OW 273
27555: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27556: LD_VAR 0 7
27560: PPUSH
27561: LD_VAR 0 8
27565: PPUSH
27566: CALL_OW 488
27570: NOT
27571: IFFALSE 27575
// continue ;
27573: GO 27507
// if HexInfo ( _x , _y ) = 0 then
27575: LD_VAR 0 7
27579: PPUSH
27580: LD_VAR 0 8
27584: PPUSH
27585: CALL_OW 428
27589: PUSH
27590: LD_INT 0
27592: EQUAL
27593: IFFALSE 27618
// begin ComMoveXY ( unit , _x , _y ) ;
27595: LD_VAR 0 1
27599: PPUSH
27600: LD_VAR 0 7
27604: PPUSH
27605: LD_VAR 0 8
27609: PPUSH
27610: CALL_OW 111
// exit ;
27614: POP
27615: POP
27616: GO 27622
// end ; end ;
27618: GO 27507
27620: POP
27621: POP
// end ;
27622: LD_VAR 0 3
27626: RET
// export function ScanBase ( side , base_area ) ; begin
27627: LD_INT 0
27629: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
27630: LD_ADDR_VAR 0 3
27634: PUSH
27635: LD_VAR 0 2
27639: PPUSH
27640: LD_INT 81
27642: PUSH
27643: LD_VAR 0 1
27647: PUSH
27648: EMPTY
27649: LIST
27650: LIST
27651: PPUSH
27652: CALL_OW 70
27656: ST_TO_ADDR
// end ;
27657: LD_VAR 0 3
27661: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
27662: LD_INT 0
27664: PPUSH
27665: PPUSH
27666: PPUSH
27667: PPUSH
// result := false ;
27668: LD_ADDR_VAR 0 2
27672: PUSH
27673: LD_INT 0
27675: ST_TO_ADDR
// side := GetSide ( unit ) ;
27676: LD_ADDR_VAR 0 3
27680: PUSH
27681: LD_VAR 0 1
27685: PPUSH
27686: CALL_OW 255
27690: ST_TO_ADDR
// nat := GetNation ( unit ) ;
27691: LD_ADDR_VAR 0 4
27695: PUSH
27696: LD_VAR 0 1
27700: PPUSH
27701: CALL_OW 248
27705: ST_TO_ADDR
// case nat of 1 :
27706: LD_VAR 0 4
27710: PUSH
27711: LD_INT 1
27713: DOUBLE
27714: EQUAL
27715: IFTRUE 27719
27717: GO 27730
27719: POP
// tech := tech_lassight ; 2 :
27720: LD_ADDR_VAR 0 5
27724: PUSH
27725: LD_INT 12
27727: ST_TO_ADDR
27728: GO 27769
27730: LD_INT 2
27732: DOUBLE
27733: EQUAL
27734: IFTRUE 27738
27736: GO 27749
27738: POP
// tech := tech_mortar ; 3 :
27739: LD_ADDR_VAR 0 5
27743: PUSH
27744: LD_INT 41
27746: ST_TO_ADDR
27747: GO 27769
27749: LD_INT 3
27751: DOUBLE
27752: EQUAL
27753: IFTRUE 27757
27755: GO 27768
27757: POP
// tech := tech_bazooka ; end ;
27758: LD_ADDR_VAR 0 5
27762: PUSH
27763: LD_INT 44
27765: ST_TO_ADDR
27766: GO 27769
27768: POP
// if Researched ( side , tech ) then
27769: LD_VAR 0 3
27773: PPUSH
27774: LD_VAR 0 5
27778: PPUSH
27779: CALL_OW 325
27783: IFFALSE 27810
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
27785: LD_ADDR_VAR 0 2
27789: PUSH
27790: LD_INT 5
27792: PUSH
27793: LD_INT 8
27795: PUSH
27796: LD_INT 9
27798: PUSH
27799: EMPTY
27800: LIST
27801: LIST
27802: LIST
27803: PUSH
27804: LD_VAR 0 4
27808: ARRAY
27809: ST_TO_ADDR
// end ;
27810: LD_VAR 0 2
27814: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
27815: LD_INT 0
27817: PPUSH
27818: PPUSH
27819: PPUSH
// if not mines then
27820: LD_VAR 0 2
27824: NOT
27825: IFFALSE 27829
// exit ;
27827: GO 27973
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27829: LD_ADDR_VAR 0 5
27833: PUSH
27834: LD_INT 81
27836: PUSH
27837: LD_VAR 0 1
27841: PUSH
27842: EMPTY
27843: LIST
27844: LIST
27845: PUSH
27846: LD_INT 3
27848: PUSH
27849: LD_INT 21
27851: PUSH
27852: LD_INT 3
27854: PUSH
27855: EMPTY
27856: LIST
27857: LIST
27858: PUSH
27859: EMPTY
27860: LIST
27861: LIST
27862: PUSH
27863: EMPTY
27864: LIST
27865: LIST
27866: PPUSH
27867: CALL_OW 69
27871: ST_TO_ADDR
// for i in mines do
27872: LD_ADDR_VAR 0 4
27876: PUSH
27877: LD_VAR 0 2
27881: PUSH
27882: FOR_IN
27883: IFFALSE 27971
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
27885: LD_VAR 0 4
27889: PUSH
27890: LD_INT 1
27892: ARRAY
27893: PPUSH
27894: LD_VAR 0 4
27898: PUSH
27899: LD_INT 2
27901: ARRAY
27902: PPUSH
27903: CALL_OW 458
27907: NOT
27908: IFFALSE 27912
// continue ;
27910: GO 27882
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
27912: LD_VAR 0 4
27916: PUSH
27917: LD_INT 1
27919: ARRAY
27920: PPUSH
27921: LD_VAR 0 4
27925: PUSH
27926: LD_INT 2
27928: ARRAY
27929: PPUSH
27930: CALL_OW 428
27934: PUSH
27935: LD_VAR 0 5
27939: IN
27940: IFFALSE 27969
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
27942: LD_VAR 0 4
27946: PUSH
27947: LD_INT 1
27949: ARRAY
27950: PPUSH
27951: LD_VAR 0 4
27955: PUSH
27956: LD_INT 2
27958: ARRAY
27959: PPUSH
27960: LD_VAR 0 1
27964: PPUSH
27965: CALL_OW 456
// end ;
27969: GO 27882
27971: POP
27972: POP
// end ;
27973: LD_VAR 0 3
27977: RET
// export function Count ( array ) ; var i ; begin
27978: LD_INT 0
27980: PPUSH
27981: PPUSH
// result := 0 ;
27982: LD_ADDR_VAR 0 2
27986: PUSH
27987: LD_INT 0
27989: ST_TO_ADDR
// for i in array do
27990: LD_ADDR_VAR 0 3
27994: PUSH
27995: LD_VAR 0 1
27999: PUSH
28000: FOR_IN
28001: IFFALSE 28025
// if i then
28003: LD_VAR 0 3
28007: IFFALSE 28023
// result := result + 1 ;
28009: LD_ADDR_VAR 0 2
28013: PUSH
28014: LD_VAR 0 2
28018: PUSH
28019: LD_INT 1
28021: PLUS
28022: ST_TO_ADDR
28023: GO 28000
28025: POP
28026: POP
// end ;
28027: LD_VAR 0 2
28031: RET
// export function IsEmpty ( building ) ; begin
28032: LD_INT 0
28034: PPUSH
// if not building then
28035: LD_VAR 0 1
28039: NOT
28040: IFFALSE 28044
// exit ;
28042: GO 28087
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
28044: LD_ADDR_VAR 0 2
28048: PUSH
28049: LD_VAR 0 1
28053: PUSH
28054: LD_INT 22
28056: PUSH
28057: LD_VAR 0 1
28061: PPUSH
28062: CALL_OW 255
28066: PUSH
28067: EMPTY
28068: LIST
28069: LIST
28070: PUSH
28071: LD_INT 58
28073: PUSH
28074: EMPTY
28075: LIST
28076: PUSH
28077: EMPTY
28078: LIST
28079: LIST
28080: PPUSH
28081: CALL_OW 69
28085: IN
28086: ST_TO_ADDR
// end ;
28087: LD_VAR 0 2
28091: RET
// export function IsNotFull ( building ) ; var places ; begin
28092: LD_INT 0
28094: PPUSH
28095: PPUSH
// if not building then
28096: LD_VAR 0 1
28100: NOT
28101: IFFALSE 28105
// exit ;
28103: GO 28276
// result := false ;
28105: LD_ADDR_VAR 0 2
28109: PUSH
28110: LD_INT 0
28112: ST_TO_ADDR
// places := 0 ;
28113: LD_ADDR_VAR 0 3
28117: PUSH
28118: LD_INT 0
28120: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
28121: LD_VAR 0 1
28125: PPUSH
28126: CALL_OW 266
28130: PUSH
28131: LD_INT 0
28133: DOUBLE
28134: EQUAL
28135: IFTRUE 28193
28137: LD_INT 1
28139: DOUBLE
28140: EQUAL
28141: IFTRUE 28193
28143: LD_INT 6
28145: DOUBLE
28146: EQUAL
28147: IFTRUE 28193
28149: LD_INT 7
28151: DOUBLE
28152: EQUAL
28153: IFTRUE 28193
28155: LD_INT 8
28157: DOUBLE
28158: EQUAL
28159: IFTRUE 28193
28161: LD_INT 4
28163: DOUBLE
28164: EQUAL
28165: IFTRUE 28193
28167: LD_INT 5
28169: DOUBLE
28170: EQUAL
28171: IFTRUE 28193
28173: LD_INT 2
28175: DOUBLE
28176: EQUAL
28177: IFTRUE 28193
28179: LD_INT 3
28181: DOUBLE
28182: EQUAL
28183: IFTRUE 28193
28185: LD_INT 35
28187: DOUBLE
28188: EQUAL
28189: IFTRUE 28193
28191: GO 28204
28193: POP
// places := 6 ; b_bunker , b_breastwork :
28194: LD_ADDR_VAR 0 3
28198: PUSH
28199: LD_INT 6
28201: ST_TO_ADDR
28202: GO 28249
28204: LD_INT 32
28206: DOUBLE
28207: EQUAL
28208: IFTRUE 28218
28210: LD_INT 31
28212: DOUBLE
28213: EQUAL
28214: IFTRUE 28218
28216: GO 28229
28218: POP
// places := 1 ; b_control_tower :
28219: LD_ADDR_VAR 0 3
28223: PUSH
28224: LD_INT 1
28226: ST_TO_ADDR
28227: GO 28249
28229: LD_INT 36
28231: DOUBLE
28232: EQUAL
28233: IFTRUE 28237
28235: GO 28248
28237: POP
// places := 3 ; end ;
28238: LD_ADDR_VAR 0 3
28242: PUSH
28243: LD_INT 3
28245: ST_TO_ADDR
28246: GO 28249
28248: POP
// if places then
28249: LD_VAR 0 3
28253: IFFALSE 28276
// result := UnitsInside ( building ) < places ;
28255: LD_ADDR_VAR 0 2
28259: PUSH
28260: LD_VAR 0 1
28264: PPUSH
28265: CALL_OW 313
28269: PUSH
28270: LD_VAR 0 3
28274: LESS
28275: ST_TO_ADDR
// end ;
28276: LD_VAR 0 2
28280: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
28281: LD_INT 0
28283: PPUSH
28284: PPUSH
28285: PPUSH
28286: PPUSH
// tmp := [ ] ;
28287: LD_ADDR_VAR 0 3
28291: PUSH
28292: EMPTY
28293: ST_TO_ADDR
// list := [ ] ;
28294: LD_ADDR_VAR 0 5
28298: PUSH
28299: EMPTY
28300: ST_TO_ADDR
// for i = 16 to 25 do
28301: LD_ADDR_VAR 0 4
28305: PUSH
28306: DOUBLE
28307: LD_INT 16
28309: DEC
28310: ST_TO_ADDR
28311: LD_INT 25
28313: PUSH
28314: FOR_TO
28315: IFFALSE 28388
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
28317: LD_ADDR_VAR 0 3
28321: PUSH
28322: LD_VAR 0 3
28326: PUSH
28327: LD_INT 22
28329: PUSH
28330: LD_VAR 0 1
28334: PPUSH
28335: CALL_OW 255
28339: PUSH
28340: EMPTY
28341: LIST
28342: LIST
28343: PUSH
28344: LD_INT 91
28346: PUSH
28347: LD_VAR 0 1
28351: PUSH
28352: LD_INT 6
28354: PUSH
28355: EMPTY
28356: LIST
28357: LIST
28358: LIST
28359: PUSH
28360: LD_INT 30
28362: PUSH
28363: LD_VAR 0 4
28367: PUSH
28368: EMPTY
28369: LIST
28370: LIST
28371: PUSH
28372: EMPTY
28373: LIST
28374: LIST
28375: LIST
28376: PUSH
28377: EMPTY
28378: LIST
28379: PPUSH
28380: CALL_OW 69
28384: ADD
28385: ST_TO_ADDR
28386: GO 28314
28388: POP
28389: POP
// for i = 1 to tmp do
28390: LD_ADDR_VAR 0 4
28394: PUSH
28395: DOUBLE
28396: LD_INT 1
28398: DEC
28399: ST_TO_ADDR
28400: LD_VAR 0 3
28404: PUSH
28405: FOR_TO
28406: IFFALSE 28494
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
28408: LD_ADDR_VAR 0 5
28412: PUSH
28413: LD_VAR 0 5
28417: PUSH
28418: LD_VAR 0 3
28422: PUSH
28423: LD_VAR 0 4
28427: ARRAY
28428: PPUSH
28429: CALL_OW 266
28433: PUSH
28434: LD_VAR 0 3
28438: PUSH
28439: LD_VAR 0 4
28443: ARRAY
28444: PPUSH
28445: CALL_OW 250
28449: PUSH
28450: LD_VAR 0 3
28454: PUSH
28455: LD_VAR 0 4
28459: ARRAY
28460: PPUSH
28461: CALL_OW 251
28465: PUSH
28466: LD_VAR 0 3
28470: PUSH
28471: LD_VAR 0 4
28475: ARRAY
28476: PPUSH
28477: CALL_OW 254
28481: PUSH
28482: EMPTY
28483: LIST
28484: LIST
28485: LIST
28486: LIST
28487: PUSH
28488: EMPTY
28489: LIST
28490: ADD
28491: ST_TO_ADDR
28492: GO 28405
28494: POP
28495: POP
// result := list ;
28496: LD_ADDR_VAR 0 2
28500: PUSH
28501: LD_VAR 0 5
28505: ST_TO_ADDR
// end ;
28506: LD_VAR 0 2
28510: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
28511: LD_INT 0
28513: PPUSH
28514: PPUSH
28515: PPUSH
28516: PPUSH
28517: PPUSH
28518: PPUSH
28519: PPUSH
// if not factory then
28520: LD_VAR 0 1
28524: NOT
28525: IFFALSE 28529
// exit ;
28527: GO 29122
// if control = control_apeman then
28529: LD_VAR 0 4
28533: PUSH
28534: LD_INT 5
28536: EQUAL
28537: IFFALSE 28646
// begin tmp := UnitsInside ( factory ) ;
28539: LD_ADDR_VAR 0 8
28543: PUSH
28544: LD_VAR 0 1
28548: PPUSH
28549: CALL_OW 313
28553: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
28554: LD_VAR 0 8
28558: PPUSH
28559: LD_INT 25
28561: PUSH
28562: LD_INT 12
28564: PUSH
28565: EMPTY
28566: LIST
28567: LIST
28568: PPUSH
28569: CALL_OW 72
28573: NOT
28574: IFFALSE 28584
// control := control_manual ;
28576: LD_ADDR_VAR 0 4
28580: PUSH
28581: LD_INT 1
28583: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
28584: LD_ADDR_VAR 0 8
28588: PUSH
28589: LD_VAR 0 1
28593: PPUSH
28594: CALL 28281 0 1
28598: ST_TO_ADDR
// if tmp then
28599: LD_VAR 0 8
28603: IFFALSE 28646
// begin for i in tmp do
28605: LD_ADDR_VAR 0 7
28609: PUSH
28610: LD_VAR 0 8
28614: PUSH
28615: FOR_IN
28616: IFFALSE 28644
// if i [ 1 ] = b_ext_radio then
28618: LD_VAR 0 7
28622: PUSH
28623: LD_INT 1
28625: ARRAY
28626: PUSH
28627: LD_INT 22
28629: EQUAL
28630: IFFALSE 28642
// begin control := control_remote ;
28632: LD_ADDR_VAR 0 4
28636: PUSH
28637: LD_INT 2
28639: ST_TO_ADDR
// break ;
28640: GO 28644
// end ;
28642: GO 28615
28644: POP
28645: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28646: LD_VAR 0 1
28650: PPUSH
28651: LD_VAR 0 2
28655: PPUSH
28656: LD_VAR 0 3
28660: PPUSH
28661: LD_VAR 0 4
28665: PPUSH
28666: LD_VAR 0 5
28670: PPUSH
28671: CALL_OW 448
28675: IFFALSE 28710
// begin result := [ chassis , engine , control , weapon ] ;
28677: LD_ADDR_VAR 0 6
28681: PUSH
28682: LD_VAR 0 2
28686: PUSH
28687: LD_VAR 0 3
28691: PUSH
28692: LD_VAR 0 4
28696: PUSH
28697: LD_VAR 0 5
28701: PUSH
28702: EMPTY
28703: LIST
28704: LIST
28705: LIST
28706: LIST
28707: ST_TO_ADDR
// exit ;
28708: GO 29122
// end ; _chassis := AvailableChassisList ( factory ) ;
28710: LD_ADDR_VAR 0 9
28714: PUSH
28715: LD_VAR 0 1
28719: PPUSH
28720: CALL_OW 475
28724: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
28725: LD_ADDR_VAR 0 11
28729: PUSH
28730: LD_VAR 0 1
28734: PPUSH
28735: CALL_OW 476
28739: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
28740: LD_ADDR_VAR 0 12
28744: PUSH
28745: LD_VAR 0 1
28749: PPUSH
28750: CALL_OW 477
28754: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
28755: LD_ADDR_VAR 0 10
28759: PUSH
28760: LD_VAR 0 1
28764: PPUSH
28765: CALL_OW 478
28769: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
28770: LD_VAR 0 9
28774: NOT
28775: PUSH
28776: LD_VAR 0 11
28780: NOT
28781: OR
28782: PUSH
28783: LD_VAR 0 12
28787: NOT
28788: OR
28789: PUSH
28790: LD_VAR 0 10
28794: NOT
28795: OR
28796: IFFALSE 28831
// begin result := [ chassis , engine , control , weapon ] ;
28798: LD_ADDR_VAR 0 6
28802: PUSH
28803: LD_VAR 0 2
28807: PUSH
28808: LD_VAR 0 3
28812: PUSH
28813: LD_VAR 0 4
28817: PUSH
28818: LD_VAR 0 5
28822: PUSH
28823: EMPTY
28824: LIST
28825: LIST
28826: LIST
28827: LIST
28828: ST_TO_ADDR
// exit ;
28829: GO 29122
// end ; if not chassis in _chassis then
28831: LD_VAR 0 2
28835: PUSH
28836: LD_VAR 0 9
28840: IN
28841: NOT
28842: IFFALSE 28868
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
28844: LD_ADDR_VAR 0 2
28848: PUSH
28849: LD_VAR 0 9
28853: PUSH
28854: LD_INT 1
28856: PPUSH
28857: LD_VAR 0 9
28861: PPUSH
28862: CALL_OW 12
28866: ARRAY
28867: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
28868: LD_VAR 0 2
28872: PPUSH
28873: LD_VAR 0 3
28877: PPUSH
28878: CALL 29127 0 2
28882: NOT
28883: IFFALSE 28942
// repeat engine := _engine [ 1 ] ;
28885: LD_ADDR_VAR 0 3
28889: PUSH
28890: LD_VAR 0 11
28894: PUSH
28895: LD_INT 1
28897: ARRAY
28898: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
28899: LD_ADDR_VAR 0 11
28903: PUSH
28904: LD_VAR 0 11
28908: PPUSH
28909: LD_INT 1
28911: PPUSH
28912: CALL_OW 3
28916: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
28917: LD_VAR 0 2
28921: PPUSH
28922: LD_VAR 0 3
28926: PPUSH
28927: CALL 29127 0 2
28931: PUSH
28932: LD_VAR 0 11
28936: PUSH
28937: EMPTY
28938: EQUAL
28939: OR
28940: IFFALSE 28885
// if not control in _control then
28942: LD_VAR 0 4
28946: PUSH
28947: LD_VAR 0 12
28951: IN
28952: NOT
28953: IFFALSE 28979
// control := _control [ rand ( 1 , _control ) ] ;
28955: LD_ADDR_VAR 0 4
28959: PUSH
28960: LD_VAR 0 12
28964: PUSH
28965: LD_INT 1
28967: PPUSH
28968: LD_VAR 0 12
28972: PPUSH
28973: CALL_OW 12
28977: ARRAY
28978: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
28979: LD_VAR 0 2
28983: PPUSH
28984: LD_VAR 0 5
28988: PPUSH
28989: CALL 29347 0 2
28993: NOT
28994: IFFALSE 29053
// repeat weapon := _weapon [ 1 ] ;
28996: LD_ADDR_VAR 0 5
29000: PUSH
29001: LD_VAR 0 10
29005: PUSH
29006: LD_INT 1
29008: ARRAY
29009: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
29010: LD_ADDR_VAR 0 10
29014: PUSH
29015: LD_VAR 0 10
29019: PPUSH
29020: LD_INT 1
29022: PPUSH
29023: CALL_OW 3
29027: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
29028: LD_VAR 0 2
29032: PPUSH
29033: LD_VAR 0 5
29037: PPUSH
29038: CALL 29347 0 2
29042: PUSH
29043: LD_VAR 0 10
29047: PUSH
29048: EMPTY
29049: EQUAL
29050: OR
29051: IFFALSE 28996
// result := [ ] ;
29053: LD_ADDR_VAR 0 6
29057: PUSH
29058: EMPTY
29059: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29060: LD_VAR 0 1
29064: PPUSH
29065: LD_VAR 0 2
29069: PPUSH
29070: LD_VAR 0 3
29074: PPUSH
29075: LD_VAR 0 4
29079: PPUSH
29080: LD_VAR 0 5
29084: PPUSH
29085: CALL_OW 448
29089: IFFALSE 29122
// result := [ chassis , engine , control , weapon ] ;
29091: LD_ADDR_VAR 0 6
29095: PUSH
29096: LD_VAR 0 2
29100: PUSH
29101: LD_VAR 0 3
29105: PUSH
29106: LD_VAR 0 4
29110: PUSH
29111: LD_VAR 0 5
29115: PUSH
29116: EMPTY
29117: LIST
29118: LIST
29119: LIST
29120: LIST
29121: ST_TO_ADDR
// end ;
29122: LD_VAR 0 6
29126: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
29127: LD_INT 0
29129: PPUSH
// if not chassis or not engine then
29130: LD_VAR 0 1
29134: NOT
29135: PUSH
29136: LD_VAR 0 2
29140: NOT
29141: OR
29142: IFFALSE 29146
// exit ;
29144: GO 29342
// case engine of engine_solar :
29146: LD_VAR 0 2
29150: PUSH
29151: LD_INT 2
29153: DOUBLE
29154: EQUAL
29155: IFTRUE 29159
29157: GO 29197
29159: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
29160: LD_ADDR_VAR 0 3
29164: PUSH
29165: LD_INT 11
29167: PUSH
29168: LD_INT 12
29170: PUSH
29171: LD_INT 13
29173: PUSH
29174: LD_INT 14
29176: PUSH
29177: LD_INT 1
29179: PUSH
29180: LD_INT 2
29182: PUSH
29183: LD_INT 3
29185: PUSH
29186: EMPTY
29187: LIST
29188: LIST
29189: LIST
29190: LIST
29191: LIST
29192: LIST
29193: LIST
29194: ST_TO_ADDR
29195: GO 29326
29197: LD_INT 1
29199: DOUBLE
29200: EQUAL
29201: IFTRUE 29205
29203: GO 29267
29205: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
29206: LD_ADDR_VAR 0 3
29210: PUSH
29211: LD_INT 11
29213: PUSH
29214: LD_INT 12
29216: PUSH
29217: LD_INT 13
29219: PUSH
29220: LD_INT 14
29222: PUSH
29223: LD_INT 1
29225: PUSH
29226: LD_INT 2
29228: PUSH
29229: LD_INT 3
29231: PUSH
29232: LD_INT 4
29234: PUSH
29235: LD_INT 5
29237: PUSH
29238: LD_INT 21
29240: PUSH
29241: LD_INT 23
29243: PUSH
29244: LD_INT 22
29246: PUSH
29247: LD_INT 24
29249: PUSH
29250: EMPTY
29251: LIST
29252: LIST
29253: LIST
29254: LIST
29255: LIST
29256: LIST
29257: LIST
29258: LIST
29259: LIST
29260: LIST
29261: LIST
29262: LIST
29263: LIST
29264: ST_TO_ADDR
29265: GO 29326
29267: LD_INT 3
29269: DOUBLE
29270: EQUAL
29271: IFTRUE 29275
29273: GO 29325
29275: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29276: LD_ADDR_VAR 0 3
29280: PUSH
29281: LD_INT 13
29283: PUSH
29284: LD_INT 14
29286: PUSH
29287: LD_INT 2
29289: PUSH
29290: LD_INT 3
29292: PUSH
29293: LD_INT 4
29295: PUSH
29296: LD_INT 5
29298: PUSH
29299: LD_INT 21
29301: PUSH
29302: LD_INT 22
29304: PUSH
29305: LD_INT 23
29307: PUSH
29308: LD_INT 24
29310: PUSH
29311: EMPTY
29312: LIST
29313: LIST
29314: LIST
29315: LIST
29316: LIST
29317: LIST
29318: LIST
29319: LIST
29320: LIST
29321: LIST
29322: ST_TO_ADDR
29323: GO 29326
29325: POP
// result := ( chassis in result ) ;
29326: LD_ADDR_VAR 0 3
29330: PUSH
29331: LD_VAR 0 1
29335: PUSH
29336: LD_VAR 0 3
29340: IN
29341: ST_TO_ADDR
// end ;
29342: LD_VAR 0 3
29346: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
29347: LD_INT 0
29349: PPUSH
// if not chassis or not weapon then
29350: LD_VAR 0 1
29354: NOT
29355: PUSH
29356: LD_VAR 0 2
29360: NOT
29361: OR
29362: IFFALSE 29366
// exit ;
29364: GO 30428
// case weapon of us_machine_gun :
29366: LD_VAR 0 2
29370: PUSH
29371: LD_INT 2
29373: DOUBLE
29374: EQUAL
29375: IFTRUE 29379
29377: GO 29409
29379: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
29380: LD_ADDR_VAR 0 3
29384: PUSH
29385: LD_INT 1
29387: PUSH
29388: LD_INT 2
29390: PUSH
29391: LD_INT 3
29393: PUSH
29394: LD_INT 4
29396: PUSH
29397: LD_INT 5
29399: PUSH
29400: EMPTY
29401: LIST
29402: LIST
29403: LIST
29404: LIST
29405: LIST
29406: ST_TO_ADDR
29407: GO 30412
29409: LD_INT 3
29411: DOUBLE
29412: EQUAL
29413: IFTRUE 29417
29415: GO 29447
29417: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
29418: LD_ADDR_VAR 0 3
29422: PUSH
29423: LD_INT 1
29425: PUSH
29426: LD_INT 2
29428: PUSH
29429: LD_INT 3
29431: PUSH
29432: LD_INT 4
29434: PUSH
29435: LD_INT 5
29437: PUSH
29438: EMPTY
29439: LIST
29440: LIST
29441: LIST
29442: LIST
29443: LIST
29444: ST_TO_ADDR
29445: GO 30412
29447: LD_INT 11
29449: DOUBLE
29450: EQUAL
29451: IFTRUE 29455
29453: GO 29485
29455: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
29456: LD_ADDR_VAR 0 3
29460: PUSH
29461: LD_INT 1
29463: PUSH
29464: LD_INT 2
29466: PUSH
29467: LD_INT 3
29469: PUSH
29470: LD_INT 4
29472: PUSH
29473: LD_INT 5
29475: PUSH
29476: EMPTY
29477: LIST
29478: LIST
29479: LIST
29480: LIST
29481: LIST
29482: ST_TO_ADDR
29483: GO 30412
29485: LD_INT 4
29487: DOUBLE
29488: EQUAL
29489: IFTRUE 29493
29491: GO 29519
29493: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
29494: LD_ADDR_VAR 0 3
29498: PUSH
29499: LD_INT 2
29501: PUSH
29502: LD_INT 3
29504: PUSH
29505: LD_INT 4
29507: PUSH
29508: LD_INT 5
29510: PUSH
29511: EMPTY
29512: LIST
29513: LIST
29514: LIST
29515: LIST
29516: ST_TO_ADDR
29517: GO 30412
29519: LD_INT 5
29521: DOUBLE
29522: EQUAL
29523: IFTRUE 29527
29525: GO 29553
29527: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
29528: LD_ADDR_VAR 0 3
29532: PUSH
29533: LD_INT 2
29535: PUSH
29536: LD_INT 3
29538: PUSH
29539: LD_INT 4
29541: PUSH
29542: LD_INT 5
29544: PUSH
29545: EMPTY
29546: LIST
29547: LIST
29548: LIST
29549: LIST
29550: ST_TO_ADDR
29551: GO 30412
29553: LD_INT 9
29555: DOUBLE
29556: EQUAL
29557: IFTRUE 29561
29559: GO 29587
29561: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
29562: LD_ADDR_VAR 0 3
29566: PUSH
29567: LD_INT 2
29569: PUSH
29570: LD_INT 3
29572: PUSH
29573: LD_INT 4
29575: PUSH
29576: LD_INT 5
29578: PUSH
29579: EMPTY
29580: LIST
29581: LIST
29582: LIST
29583: LIST
29584: ST_TO_ADDR
29585: GO 30412
29587: LD_INT 7
29589: DOUBLE
29590: EQUAL
29591: IFTRUE 29595
29593: GO 29621
29595: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
29596: LD_ADDR_VAR 0 3
29600: PUSH
29601: LD_INT 2
29603: PUSH
29604: LD_INT 3
29606: PUSH
29607: LD_INT 4
29609: PUSH
29610: LD_INT 5
29612: PUSH
29613: EMPTY
29614: LIST
29615: LIST
29616: LIST
29617: LIST
29618: ST_TO_ADDR
29619: GO 30412
29621: LD_INT 12
29623: DOUBLE
29624: EQUAL
29625: IFTRUE 29629
29627: GO 29655
29629: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
29630: LD_ADDR_VAR 0 3
29634: PUSH
29635: LD_INT 2
29637: PUSH
29638: LD_INT 3
29640: PUSH
29641: LD_INT 4
29643: PUSH
29644: LD_INT 5
29646: PUSH
29647: EMPTY
29648: LIST
29649: LIST
29650: LIST
29651: LIST
29652: ST_TO_ADDR
29653: GO 30412
29655: LD_INT 13
29657: DOUBLE
29658: EQUAL
29659: IFTRUE 29663
29661: GO 29689
29663: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
29664: LD_ADDR_VAR 0 3
29668: PUSH
29669: LD_INT 2
29671: PUSH
29672: LD_INT 3
29674: PUSH
29675: LD_INT 4
29677: PUSH
29678: LD_INT 5
29680: PUSH
29681: EMPTY
29682: LIST
29683: LIST
29684: LIST
29685: LIST
29686: ST_TO_ADDR
29687: GO 30412
29689: LD_INT 14
29691: DOUBLE
29692: EQUAL
29693: IFTRUE 29697
29695: GO 29715
29697: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
29698: LD_ADDR_VAR 0 3
29702: PUSH
29703: LD_INT 4
29705: PUSH
29706: LD_INT 5
29708: PUSH
29709: EMPTY
29710: LIST
29711: LIST
29712: ST_TO_ADDR
29713: GO 30412
29715: LD_INT 6
29717: DOUBLE
29718: EQUAL
29719: IFTRUE 29723
29721: GO 29741
29723: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
29724: LD_ADDR_VAR 0 3
29728: PUSH
29729: LD_INT 4
29731: PUSH
29732: LD_INT 5
29734: PUSH
29735: EMPTY
29736: LIST
29737: LIST
29738: ST_TO_ADDR
29739: GO 30412
29741: LD_INT 10
29743: DOUBLE
29744: EQUAL
29745: IFTRUE 29749
29747: GO 29767
29749: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
29750: LD_ADDR_VAR 0 3
29754: PUSH
29755: LD_INT 4
29757: PUSH
29758: LD_INT 5
29760: PUSH
29761: EMPTY
29762: LIST
29763: LIST
29764: ST_TO_ADDR
29765: GO 30412
29767: LD_INT 22
29769: DOUBLE
29770: EQUAL
29771: IFTRUE 29775
29773: GO 29801
29775: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
29776: LD_ADDR_VAR 0 3
29780: PUSH
29781: LD_INT 11
29783: PUSH
29784: LD_INT 12
29786: PUSH
29787: LD_INT 13
29789: PUSH
29790: LD_INT 14
29792: PUSH
29793: EMPTY
29794: LIST
29795: LIST
29796: LIST
29797: LIST
29798: ST_TO_ADDR
29799: GO 30412
29801: LD_INT 23
29803: DOUBLE
29804: EQUAL
29805: IFTRUE 29809
29807: GO 29835
29809: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
29810: LD_ADDR_VAR 0 3
29814: PUSH
29815: LD_INT 11
29817: PUSH
29818: LD_INT 12
29820: PUSH
29821: LD_INT 13
29823: PUSH
29824: LD_INT 14
29826: PUSH
29827: EMPTY
29828: LIST
29829: LIST
29830: LIST
29831: LIST
29832: ST_TO_ADDR
29833: GO 30412
29835: LD_INT 24
29837: DOUBLE
29838: EQUAL
29839: IFTRUE 29843
29841: GO 29869
29843: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
29844: LD_ADDR_VAR 0 3
29848: PUSH
29849: LD_INT 11
29851: PUSH
29852: LD_INT 12
29854: PUSH
29855: LD_INT 13
29857: PUSH
29858: LD_INT 14
29860: PUSH
29861: EMPTY
29862: LIST
29863: LIST
29864: LIST
29865: LIST
29866: ST_TO_ADDR
29867: GO 30412
29869: LD_INT 30
29871: DOUBLE
29872: EQUAL
29873: IFTRUE 29877
29875: GO 29903
29877: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
29878: LD_ADDR_VAR 0 3
29882: PUSH
29883: LD_INT 11
29885: PUSH
29886: LD_INT 12
29888: PUSH
29889: LD_INT 13
29891: PUSH
29892: LD_INT 14
29894: PUSH
29895: EMPTY
29896: LIST
29897: LIST
29898: LIST
29899: LIST
29900: ST_TO_ADDR
29901: GO 30412
29903: LD_INT 25
29905: DOUBLE
29906: EQUAL
29907: IFTRUE 29911
29909: GO 29929
29911: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
29912: LD_ADDR_VAR 0 3
29916: PUSH
29917: LD_INT 13
29919: PUSH
29920: LD_INT 14
29922: PUSH
29923: EMPTY
29924: LIST
29925: LIST
29926: ST_TO_ADDR
29927: GO 30412
29929: LD_INT 27
29931: DOUBLE
29932: EQUAL
29933: IFTRUE 29937
29935: GO 29955
29937: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
29938: LD_ADDR_VAR 0 3
29942: PUSH
29943: LD_INT 13
29945: PUSH
29946: LD_INT 14
29948: PUSH
29949: EMPTY
29950: LIST
29951: LIST
29952: ST_TO_ADDR
29953: GO 30412
29955: LD_EXP 100
29959: DOUBLE
29960: EQUAL
29961: IFTRUE 29965
29963: GO 29991
29965: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
29966: LD_ADDR_VAR 0 3
29970: PUSH
29971: LD_INT 11
29973: PUSH
29974: LD_INT 12
29976: PUSH
29977: LD_INT 13
29979: PUSH
29980: LD_INT 14
29982: PUSH
29983: EMPTY
29984: LIST
29985: LIST
29986: LIST
29987: LIST
29988: ST_TO_ADDR
29989: GO 30412
29991: LD_INT 28
29993: DOUBLE
29994: EQUAL
29995: IFTRUE 29999
29997: GO 30017
29999: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
30000: LD_ADDR_VAR 0 3
30004: PUSH
30005: LD_INT 13
30007: PUSH
30008: LD_INT 14
30010: PUSH
30011: EMPTY
30012: LIST
30013: LIST
30014: ST_TO_ADDR
30015: GO 30412
30017: LD_INT 29
30019: DOUBLE
30020: EQUAL
30021: IFTRUE 30025
30023: GO 30043
30025: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
30026: LD_ADDR_VAR 0 3
30030: PUSH
30031: LD_INT 13
30033: PUSH
30034: LD_INT 14
30036: PUSH
30037: EMPTY
30038: LIST
30039: LIST
30040: ST_TO_ADDR
30041: GO 30412
30043: LD_INT 31
30045: DOUBLE
30046: EQUAL
30047: IFTRUE 30051
30049: GO 30069
30051: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
30052: LD_ADDR_VAR 0 3
30056: PUSH
30057: LD_INT 13
30059: PUSH
30060: LD_INT 14
30062: PUSH
30063: EMPTY
30064: LIST
30065: LIST
30066: ST_TO_ADDR
30067: GO 30412
30069: LD_INT 26
30071: DOUBLE
30072: EQUAL
30073: IFTRUE 30077
30075: GO 30095
30077: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
30078: LD_ADDR_VAR 0 3
30082: PUSH
30083: LD_INT 13
30085: PUSH
30086: LD_INT 14
30088: PUSH
30089: EMPTY
30090: LIST
30091: LIST
30092: ST_TO_ADDR
30093: GO 30412
30095: LD_INT 42
30097: DOUBLE
30098: EQUAL
30099: IFTRUE 30103
30101: GO 30129
30103: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
30104: LD_ADDR_VAR 0 3
30108: PUSH
30109: LD_INT 21
30111: PUSH
30112: LD_INT 22
30114: PUSH
30115: LD_INT 23
30117: PUSH
30118: LD_INT 24
30120: PUSH
30121: EMPTY
30122: LIST
30123: LIST
30124: LIST
30125: LIST
30126: ST_TO_ADDR
30127: GO 30412
30129: LD_INT 43
30131: DOUBLE
30132: EQUAL
30133: IFTRUE 30137
30135: GO 30163
30137: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
30138: LD_ADDR_VAR 0 3
30142: PUSH
30143: LD_INT 21
30145: PUSH
30146: LD_INT 22
30148: PUSH
30149: LD_INT 23
30151: PUSH
30152: LD_INT 24
30154: PUSH
30155: EMPTY
30156: LIST
30157: LIST
30158: LIST
30159: LIST
30160: ST_TO_ADDR
30161: GO 30412
30163: LD_INT 44
30165: DOUBLE
30166: EQUAL
30167: IFTRUE 30171
30169: GO 30197
30171: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
30172: LD_ADDR_VAR 0 3
30176: PUSH
30177: LD_INT 21
30179: PUSH
30180: LD_INT 22
30182: PUSH
30183: LD_INT 23
30185: PUSH
30186: LD_INT 24
30188: PUSH
30189: EMPTY
30190: LIST
30191: LIST
30192: LIST
30193: LIST
30194: ST_TO_ADDR
30195: GO 30412
30197: LD_INT 45
30199: DOUBLE
30200: EQUAL
30201: IFTRUE 30205
30203: GO 30231
30205: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
30206: LD_ADDR_VAR 0 3
30210: PUSH
30211: LD_INT 21
30213: PUSH
30214: LD_INT 22
30216: PUSH
30217: LD_INT 23
30219: PUSH
30220: LD_INT 24
30222: PUSH
30223: EMPTY
30224: LIST
30225: LIST
30226: LIST
30227: LIST
30228: ST_TO_ADDR
30229: GO 30412
30231: LD_INT 49
30233: DOUBLE
30234: EQUAL
30235: IFTRUE 30239
30237: GO 30265
30239: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
30240: LD_ADDR_VAR 0 3
30244: PUSH
30245: LD_INT 21
30247: PUSH
30248: LD_INT 22
30250: PUSH
30251: LD_INT 23
30253: PUSH
30254: LD_INT 24
30256: PUSH
30257: EMPTY
30258: LIST
30259: LIST
30260: LIST
30261: LIST
30262: ST_TO_ADDR
30263: GO 30412
30265: LD_INT 51
30267: DOUBLE
30268: EQUAL
30269: IFTRUE 30273
30271: GO 30299
30273: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
30274: LD_ADDR_VAR 0 3
30278: PUSH
30279: LD_INT 21
30281: PUSH
30282: LD_INT 22
30284: PUSH
30285: LD_INT 23
30287: PUSH
30288: LD_INT 24
30290: PUSH
30291: EMPTY
30292: LIST
30293: LIST
30294: LIST
30295: LIST
30296: ST_TO_ADDR
30297: GO 30412
30299: LD_INT 52
30301: DOUBLE
30302: EQUAL
30303: IFTRUE 30307
30305: GO 30333
30307: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
30308: LD_ADDR_VAR 0 3
30312: PUSH
30313: LD_INT 21
30315: PUSH
30316: LD_INT 22
30318: PUSH
30319: LD_INT 23
30321: PUSH
30322: LD_INT 24
30324: PUSH
30325: EMPTY
30326: LIST
30327: LIST
30328: LIST
30329: LIST
30330: ST_TO_ADDR
30331: GO 30412
30333: LD_INT 53
30335: DOUBLE
30336: EQUAL
30337: IFTRUE 30341
30339: GO 30359
30341: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
30342: LD_ADDR_VAR 0 3
30346: PUSH
30347: LD_INT 23
30349: PUSH
30350: LD_INT 24
30352: PUSH
30353: EMPTY
30354: LIST
30355: LIST
30356: ST_TO_ADDR
30357: GO 30412
30359: LD_INT 46
30361: DOUBLE
30362: EQUAL
30363: IFTRUE 30367
30365: GO 30385
30367: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
30368: LD_ADDR_VAR 0 3
30372: PUSH
30373: LD_INT 23
30375: PUSH
30376: LD_INT 24
30378: PUSH
30379: EMPTY
30380: LIST
30381: LIST
30382: ST_TO_ADDR
30383: GO 30412
30385: LD_INT 47
30387: DOUBLE
30388: EQUAL
30389: IFTRUE 30393
30391: GO 30411
30393: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30394: LD_ADDR_VAR 0 3
30398: PUSH
30399: LD_INT 23
30401: PUSH
30402: LD_INT 24
30404: PUSH
30405: EMPTY
30406: LIST
30407: LIST
30408: ST_TO_ADDR
30409: GO 30412
30411: POP
// result := ( chassis in result ) ;
30412: LD_ADDR_VAR 0 3
30416: PUSH
30417: LD_VAR 0 1
30421: PUSH
30422: LD_VAR 0 3
30426: IN
30427: ST_TO_ADDR
// end ;
30428: LD_VAR 0 3
30432: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
30433: LD_INT 0
30435: PPUSH
30436: PPUSH
30437: PPUSH
30438: PPUSH
30439: PPUSH
30440: PPUSH
30441: PPUSH
// result := array ;
30442: LD_ADDR_VAR 0 5
30446: PUSH
30447: LD_VAR 0 1
30451: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
30452: LD_VAR 0 1
30456: NOT
30457: PUSH
30458: LD_VAR 0 2
30462: NOT
30463: OR
30464: PUSH
30465: LD_VAR 0 3
30469: NOT
30470: OR
30471: PUSH
30472: LD_VAR 0 2
30476: PUSH
30477: LD_VAR 0 1
30481: GREATER
30482: OR
30483: PUSH
30484: LD_VAR 0 3
30488: PUSH
30489: LD_VAR 0 1
30493: GREATER
30494: OR
30495: IFFALSE 30499
// exit ;
30497: GO 30795
// if direction then
30499: LD_VAR 0 4
30503: IFFALSE 30567
// begin d := 1 ;
30505: LD_ADDR_VAR 0 9
30509: PUSH
30510: LD_INT 1
30512: ST_TO_ADDR
// if i_from > i_to then
30513: LD_VAR 0 2
30517: PUSH
30518: LD_VAR 0 3
30522: GREATER
30523: IFFALSE 30549
// length := ( array - i_from ) + i_to else
30525: LD_ADDR_VAR 0 11
30529: PUSH
30530: LD_VAR 0 1
30534: PUSH
30535: LD_VAR 0 2
30539: MINUS
30540: PUSH
30541: LD_VAR 0 3
30545: PLUS
30546: ST_TO_ADDR
30547: GO 30565
// length := i_to - i_from ;
30549: LD_ADDR_VAR 0 11
30553: PUSH
30554: LD_VAR 0 3
30558: PUSH
30559: LD_VAR 0 2
30563: MINUS
30564: ST_TO_ADDR
// end else
30565: GO 30628
// begin d := - 1 ;
30567: LD_ADDR_VAR 0 9
30571: PUSH
30572: LD_INT 1
30574: NEG
30575: ST_TO_ADDR
// if i_from > i_to then
30576: LD_VAR 0 2
30580: PUSH
30581: LD_VAR 0 3
30585: GREATER
30586: IFFALSE 30606
// length := i_from - i_to else
30588: LD_ADDR_VAR 0 11
30592: PUSH
30593: LD_VAR 0 2
30597: PUSH
30598: LD_VAR 0 3
30602: MINUS
30603: ST_TO_ADDR
30604: GO 30628
// length := ( array - i_to ) + i_from ;
30606: LD_ADDR_VAR 0 11
30610: PUSH
30611: LD_VAR 0 1
30615: PUSH
30616: LD_VAR 0 3
30620: MINUS
30621: PUSH
30622: LD_VAR 0 2
30626: PLUS
30627: ST_TO_ADDR
// end ; if not length then
30628: LD_VAR 0 11
30632: NOT
30633: IFFALSE 30637
// exit ;
30635: GO 30795
// tmp := array ;
30637: LD_ADDR_VAR 0 10
30641: PUSH
30642: LD_VAR 0 1
30646: ST_TO_ADDR
// for i = 1 to length do
30647: LD_ADDR_VAR 0 6
30651: PUSH
30652: DOUBLE
30653: LD_INT 1
30655: DEC
30656: ST_TO_ADDR
30657: LD_VAR 0 11
30661: PUSH
30662: FOR_TO
30663: IFFALSE 30783
// begin for j = 1 to array do
30665: LD_ADDR_VAR 0 7
30669: PUSH
30670: DOUBLE
30671: LD_INT 1
30673: DEC
30674: ST_TO_ADDR
30675: LD_VAR 0 1
30679: PUSH
30680: FOR_TO
30681: IFFALSE 30769
// begin k := j + d ;
30683: LD_ADDR_VAR 0 8
30687: PUSH
30688: LD_VAR 0 7
30692: PUSH
30693: LD_VAR 0 9
30697: PLUS
30698: ST_TO_ADDR
// if k > array then
30699: LD_VAR 0 8
30703: PUSH
30704: LD_VAR 0 1
30708: GREATER
30709: IFFALSE 30719
// k := 1 ;
30711: LD_ADDR_VAR 0 8
30715: PUSH
30716: LD_INT 1
30718: ST_TO_ADDR
// if not k then
30719: LD_VAR 0 8
30723: NOT
30724: IFFALSE 30736
// k := array ;
30726: LD_ADDR_VAR 0 8
30730: PUSH
30731: LD_VAR 0 1
30735: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
30736: LD_ADDR_VAR 0 10
30740: PUSH
30741: LD_VAR 0 10
30745: PPUSH
30746: LD_VAR 0 8
30750: PPUSH
30751: LD_VAR 0 1
30755: PUSH
30756: LD_VAR 0 7
30760: ARRAY
30761: PPUSH
30762: CALL_OW 1
30766: ST_TO_ADDR
// end ;
30767: GO 30680
30769: POP
30770: POP
// array := tmp ;
30771: LD_ADDR_VAR 0 1
30775: PUSH
30776: LD_VAR 0 10
30780: ST_TO_ADDR
// end ;
30781: GO 30662
30783: POP
30784: POP
// result := array ;
30785: LD_ADDR_VAR 0 5
30789: PUSH
30790: LD_VAR 0 1
30794: ST_TO_ADDR
// end ;
30795: LD_VAR 0 5
30799: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
30800: LD_INT 0
30802: PPUSH
30803: PPUSH
// result := 0 ;
30804: LD_ADDR_VAR 0 3
30808: PUSH
30809: LD_INT 0
30811: ST_TO_ADDR
// if not array or not value in array then
30812: LD_VAR 0 1
30816: NOT
30817: PUSH
30818: LD_VAR 0 2
30822: PUSH
30823: LD_VAR 0 1
30827: IN
30828: NOT
30829: OR
30830: IFFALSE 30834
// exit ;
30832: GO 30888
// for i = 1 to array do
30834: LD_ADDR_VAR 0 4
30838: PUSH
30839: DOUBLE
30840: LD_INT 1
30842: DEC
30843: ST_TO_ADDR
30844: LD_VAR 0 1
30848: PUSH
30849: FOR_TO
30850: IFFALSE 30886
// if value = array [ i ] then
30852: LD_VAR 0 2
30856: PUSH
30857: LD_VAR 0 1
30861: PUSH
30862: LD_VAR 0 4
30866: ARRAY
30867: EQUAL
30868: IFFALSE 30884
// begin result := i ;
30870: LD_ADDR_VAR 0 3
30874: PUSH
30875: LD_VAR 0 4
30879: ST_TO_ADDR
// exit ;
30880: POP
30881: POP
30882: GO 30888
// end ;
30884: GO 30849
30886: POP
30887: POP
// end ;
30888: LD_VAR 0 3
30892: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
30893: LD_INT 0
30895: PPUSH
// vc_chassis := chassis ;
30896: LD_ADDR_OWVAR 37
30900: PUSH
30901: LD_VAR 0 1
30905: ST_TO_ADDR
// vc_engine := engine ;
30906: LD_ADDR_OWVAR 39
30910: PUSH
30911: LD_VAR 0 2
30915: ST_TO_ADDR
// vc_control := control ;
30916: LD_ADDR_OWVAR 38
30920: PUSH
30921: LD_VAR 0 3
30925: ST_TO_ADDR
// vc_weapon := weapon ;
30926: LD_ADDR_OWVAR 40
30930: PUSH
30931: LD_VAR 0 4
30935: ST_TO_ADDR
// vc_fuel_battery := fuel ;
30936: LD_ADDR_OWVAR 41
30940: PUSH
30941: LD_VAR 0 5
30945: ST_TO_ADDR
// end ;
30946: LD_VAR 0 6
30950: RET
// export function WantPlant ( unit ) ; var task ; begin
30951: LD_INT 0
30953: PPUSH
30954: PPUSH
// result := false ;
30955: LD_ADDR_VAR 0 2
30959: PUSH
30960: LD_INT 0
30962: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
30963: LD_ADDR_VAR 0 3
30967: PUSH
30968: LD_VAR 0 1
30972: PPUSH
30973: CALL_OW 437
30977: ST_TO_ADDR
// if task then
30978: LD_VAR 0 3
30982: IFFALSE 31010
// if task [ 1 ] [ 1 ] = p then
30984: LD_VAR 0 3
30988: PUSH
30989: LD_INT 1
30991: ARRAY
30992: PUSH
30993: LD_INT 1
30995: ARRAY
30996: PUSH
30997: LD_STRING p
30999: EQUAL
31000: IFFALSE 31010
// result := true ;
31002: LD_ADDR_VAR 0 2
31006: PUSH
31007: LD_INT 1
31009: ST_TO_ADDR
// end ;
31010: LD_VAR 0 2
31014: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
31015: LD_INT 0
31017: PPUSH
31018: PPUSH
31019: PPUSH
31020: PPUSH
// if pos < 1 then
31021: LD_VAR 0 2
31025: PUSH
31026: LD_INT 1
31028: LESS
31029: IFFALSE 31033
// exit ;
31031: GO 31336
// if pos = 1 then
31033: LD_VAR 0 2
31037: PUSH
31038: LD_INT 1
31040: EQUAL
31041: IFFALSE 31074
// result := Replace ( arr , pos [ 1 ] , value ) else
31043: LD_ADDR_VAR 0 4
31047: PUSH
31048: LD_VAR 0 1
31052: PPUSH
31053: LD_VAR 0 2
31057: PUSH
31058: LD_INT 1
31060: ARRAY
31061: PPUSH
31062: LD_VAR 0 3
31066: PPUSH
31067: CALL_OW 1
31071: ST_TO_ADDR
31072: GO 31336
// begin tmp := arr ;
31074: LD_ADDR_VAR 0 6
31078: PUSH
31079: LD_VAR 0 1
31083: ST_TO_ADDR
// s_arr := [ tmp ] ;
31084: LD_ADDR_VAR 0 7
31088: PUSH
31089: LD_VAR 0 6
31093: PUSH
31094: EMPTY
31095: LIST
31096: ST_TO_ADDR
// for i = 1 to pos - 1 do
31097: LD_ADDR_VAR 0 5
31101: PUSH
31102: DOUBLE
31103: LD_INT 1
31105: DEC
31106: ST_TO_ADDR
31107: LD_VAR 0 2
31111: PUSH
31112: LD_INT 1
31114: MINUS
31115: PUSH
31116: FOR_TO
31117: IFFALSE 31162
// begin tmp := tmp [ pos [ i ] ] ;
31119: LD_ADDR_VAR 0 6
31123: PUSH
31124: LD_VAR 0 6
31128: PUSH
31129: LD_VAR 0 2
31133: PUSH
31134: LD_VAR 0 5
31138: ARRAY
31139: ARRAY
31140: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
31141: LD_ADDR_VAR 0 7
31145: PUSH
31146: LD_VAR 0 7
31150: PUSH
31151: LD_VAR 0 6
31155: PUSH
31156: EMPTY
31157: LIST
31158: ADD
31159: ST_TO_ADDR
// end ;
31160: GO 31116
31162: POP
31163: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
31164: LD_ADDR_VAR 0 6
31168: PUSH
31169: LD_VAR 0 6
31173: PPUSH
31174: LD_VAR 0 2
31178: PUSH
31179: LD_VAR 0 2
31183: ARRAY
31184: PPUSH
31185: LD_VAR 0 3
31189: PPUSH
31190: CALL_OW 1
31194: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
31195: LD_ADDR_VAR 0 7
31199: PUSH
31200: LD_VAR 0 7
31204: PPUSH
31205: LD_VAR 0 7
31209: PPUSH
31210: LD_VAR 0 6
31214: PPUSH
31215: CALL_OW 1
31219: ST_TO_ADDR
// for i = s_arr downto 2 do
31220: LD_ADDR_VAR 0 5
31224: PUSH
31225: DOUBLE
31226: LD_VAR 0 7
31230: INC
31231: ST_TO_ADDR
31232: LD_INT 2
31234: PUSH
31235: FOR_DOWNTO
31236: IFFALSE 31320
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
31238: LD_ADDR_VAR 0 6
31242: PUSH
31243: LD_VAR 0 7
31247: PUSH
31248: LD_VAR 0 5
31252: PUSH
31253: LD_INT 1
31255: MINUS
31256: ARRAY
31257: PPUSH
31258: LD_VAR 0 2
31262: PUSH
31263: LD_VAR 0 5
31267: PUSH
31268: LD_INT 1
31270: MINUS
31271: ARRAY
31272: PPUSH
31273: LD_VAR 0 7
31277: PUSH
31278: LD_VAR 0 5
31282: ARRAY
31283: PPUSH
31284: CALL_OW 1
31288: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
31289: LD_ADDR_VAR 0 7
31293: PUSH
31294: LD_VAR 0 7
31298: PPUSH
31299: LD_VAR 0 5
31303: PUSH
31304: LD_INT 1
31306: MINUS
31307: PPUSH
31308: LD_VAR 0 6
31312: PPUSH
31313: CALL_OW 1
31317: ST_TO_ADDR
// end ;
31318: GO 31235
31320: POP
31321: POP
// result := s_arr [ 1 ] ;
31322: LD_ADDR_VAR 0 4
31326: PUSH
31327: LD_VAR 0 7
31331: PUSH
31332: LD_INT 1
31334: ARRAY
31335: ST_TO_ADDR
// end ; end ;
31336: LD_VAR 0 4
31340: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
31341: LD_INT 0
31343: PPUSH
31344: PPUSH
// if not list then
31345: LD_VAR 0 1
31349: NOT
31350: IFFALSE 31354
// exit ;
31352: GO 31445
// i := list [ pos1 ] ;
31354: LD_ADDR_VAR 0 5
31358: PUSH
31359: LD_VAR 0 1
31363: PUSH
31364: LD_VAR 0 2
31368: ARRAY
31369: ST_TO_ADDR
// if not i then
31370: LD_VAR 0 5
31374: NOT
31375: IFFALSE 31379
// exit ;
31377: GO 31445
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
31379: LD_ADDR_VAR 0 1
31383: PUSH
31384: LD_VAR 0 1
31388: PPUSH
31389: LD_VAR 0 2
31393: PPUSH
31394: LD_VAR 0 1
31398: PUSH
31399: LD_VAR 0 3
31403: ARRAY
31404: PPUSH
31405: CALL_OW 1
31409: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
31410: LD_ADDR_VAR 0 1
31414: PUSH
31415: LD_VAR 0 1
31419: PPUSH
31420: LD_VAR 0 3
31424: PPUSH
31425: LD_VAR 0 5
31429: PPUSH
31430: CALL_OW 1
31434: ST_TO_ADDR
// result := list ;
31435: LD_ADDR_VAR 0 4
31439: PUSH
31440: LD_VAR 0 1
31444: ST_TO_ADDR
// end ;
31445: LD_VAR 0 4
31449: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
31450: LD_INT 0
31452: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
31453: LD_ADDR_VAR 0 5
31457: PUSH
31458: LD_VAR 0 1
31462: PPUSH
31463: CALL_OW 250
31467: PPUSH
31468: LD_VAR 0 1
31472: PPUSH
31473: CALL_OW 251
31477: PPUSH
31478: LD_VAR 0 2
31482: PPUSH
31483: LD_VAR 0 3
31487: PPUSH
31488: LD_VAR 0 4
31492: PPUSH
31493: CALL 31503 0 5
31497: ST_TO_ADDR
// end ;
31498: LD_VAR 0 5
31502: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
31503: LD_INT 0
31505: PPUSH
31506: PPUSH
31507: PPUSH
31508: PPUSH
// if not list then
31509: LD_VAR 0 3
31513: NOT
31514: IFFALSE 31518
// exit ;
31516: GO 31906
// result := [ ] ;
31518: LD_ADDR_VAR 0 6
31522: PUSH
31523: EMPTY
31524: ST_TO_ADDR
// for i in list do
31525: LD_ADDR_VAR 0 7
31529: PUSH
31530: LD_VAR 0 3
31534: PUSH
31535: FOR_IN
31536: IFFALSE 31738
// begin tmp := GetDistUnitXY ( i , x , y ) ;
31538: LD_ADDR_VAR 0 9
31542: PUSH
31543: LD_VAR 0 7
31547: PPUSH
31548: LD_VAR 0 1
31552: PPUSH
31553: LD_VAR 0 2
31557: PPUSH
31558: CALL_OW 297
31562: ST_TO_ADDR
// if not result then
31563: LD_VAR 0 6
31567: NOT
31568: IFFALSE 31594
// result := [ [ i , tmp ] ] else
31570: LD_ADDR_VAR 0 6
31574: PUSH
31575: LD_VAR 0 7
31579: PUSH
31580: LD_VAR 0 9
31584: PUSH
31585: EMPTY
31586: LIST
31587: LIST
31588: PUSH
31589: EMPTY
31590: LIST
31591: ST_TO_ADDR
31592: GO 31736
// begin if result [ result ] [ 2 ] < tmp then
31594: LD_VAR 0 6
31598: PUSH
31599: LD_VAR 0 6
31603: ARRAY
31604: PUSH
31605: LD_INT 2
31607: ARRAY
31608: PUSH
31609: LD_VAR 0 9
31613: LESS
31614: IFFALSE 31656
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
31616: LD_ADDR_VAR 0 6
31620: PUSH
31621: LD_VAR 0 6
31625: PPUSH
31626: LD_VAR 0 6
31630: PUSH
31631: LD_INT 1
31633: PLUS
31634: PPUSH
31635: LD_VAR 0 7
31639: PUSH
31640: LD_VAR 0 9
31644: PUSH
31645: EMPTY
31646: LIST
31647: LIST
31648: PPUSH
31649: CALL_OW 2
31653: ST_TO_ADDR
31654: GO 31736
// for j = 1 to result do
31656: LD_ADDR_VAR 0 8
31660: PUSH
31661: DOUBLE
31662: LD_INT 1
31664: DEC
31665: ST_TO_ADDR
31666: LD_VAR 0 6
31670: PUSH
31671: FOR_TO
31672: IFFALSE 31734
// begin if tmp < result [ j ] [ 2 ] then
31674: LD_VAR 0 9
31678: PUSH
31679: LD_VAR 0 6
31683: PUSH
31684: LD_VAR 0 8
31688: ARRAY
31689: PUSH
31690: LD_INT 2
31692: ARRAY
31693: LESS
31694: IFFALSE 31732
// begin result := Insert ( result , j , [ i , tmp ] ) ;
31696: LD_ADDR_VAR 0 6
31700: PUSH
31701: LD_VAR 0 6
31705: PPUSH
31706: LD_VAR 0 8
31710: PPUSH
31711: LD_VAR 0 7
31715: PUSH
31716: LD_VAR 0 9
31720: PUSH
31721: EMPTY
31722: LIST
31723: LIST
31724: PPUSH
31725: CALL_OW 2
31729: ST_TO_ADDR
// break ;
31730: GO 31734
// end ; end ;
31732: GO 31671
31734: POP
31735: POP
// end ; end ;
31736: GO 31535
31738: POP
31739: POP
// if result and not asc then
31740: LD_VAR 0 6
31744: PUSH
31745: LD_VAR 0 4
31749: NOT
31750: AND
31751: IFFALSE 31826
// begin tmp := result ;
31753: LD_ADDR_VAR 0 9
31757: PUSH
31758: LD_VAR 0 6
31762: ST_TO_ADDR
// for i = tmp downto 1 do
31763: LD_ADDR_VAR 0 7
31767: PUSH
31768: DOUBLE
31769: LD_VAR 0 9
31773: INC
31774: ST_TO_ADDR
31775: LD_INT 1
31777: PUSH
31778: FOR_DOWNTO
31779: IFFALSE 31824
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
31781: LD_ADDR_VAR 0 6
31785: PUSH
31786: LD_VAR 0 6
31790: PPUSH
31791: LD_VAR 0 9
31795: PUSH
31796: LD_VAR 0 7
31800: MINUS
31801: PUSH
31802: LD_INT 1
31804: PLUS
31805: PPUSH
31806: LD_VAR 0 9
31810: PUSH
31811: LD_VAR 0 7
31815: ARRAY
31816: PPUSH
31817: CALL_OW 1
31821: ST_TO_ADDR
31822: GO 31778
31824: POP
31825: POP
// end ; tmp := [ ] ;
31826: LD_ADDR_VAR 0 9
31830: PUSH
31831: EMPTY
31832: ST_TO_ADDR
// if mode then
31833: LD_VAR 0 5
31837: IFFALSE 31906
// begin for i = 1 to result do
31839: LD_ADDR_VAR 0 7
31843: PUSH
31844: DOUBLE
31845: LD_INT 1
31847: DEC
31848: ST_TO_ADDR
31849: LD_VAR 0 6
31853: PUSH
31854: FOR_TO
31855: IFFALSE 31894
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
31857: LD_ADDR_VAR 0 9
31861: PUSH
31862: LD_VAR 0 9
31866: PPUSH
31867: LD_VAR 0 7
31871: PPUSH
31872: LD_VAR 0 6
31876: PUSH
31877: LD_VAR 0 7
31881: ARRAY
31882: PUSH
31883: LD_INT 1
31885: ARRAY
31886: PPUSH
31887: CALL_OW 1
31891: ST_TO_ADDR
31892: GO 31854
31894: POP
31895: POP
// result := tmp ;
31896: LD_ADDR_VAR 0 6
31900: PUSH
31901: LD_VAR 0 9
31905: ST_TO_ADDR
// end ; end ;
31906: LD_VAR 0 6
31910: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
31911: LD_INT 0
31913: PPUSH
31914: PPUSH
31915: PPUSH
31916: PPUSH
31917: PPUSH
31918: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
31919: LD_ADDR_VAR 0 5
31923: PUSH
31924: LD_INT 0
31926: PUSH
31927: LD_INT 0
31929: PUSH
31930: LD_INT 0
31932: PUSH
31933: EMPTY
31934: PUSH
31935: EMPTY
31936: LIST
31937: LIST
31938: LIST
31939: LIST
31940: ST_TO_ADDR
// if not x or not y then
31941: LD_VAR 0 2
31945: NOT
31946: PUSH
31947: LD_VAR 0 3
31951: NOT
31952: OR
31953: IFFALSE 31957
// exit ;
31955: GO 33609
// if not range then
31957: LD_VAR 0 4
31961: NOT
31962: IFFALSE 31972
// range := 10 ;
31964: LD_ADDR_VAR 0 4
31968: PUSH
31969: LD_INT 10
31971: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31972: LD_ADDR_VAR 0 8
31976: PUSH
31977: LD_INT 81
31979: PUSH
31980: LD_VAR 0 1
31984: PUSH
31985: EMPTY
31986: LIST
31987: LIST
31988: PUSH
31989: LD_INT 92
31991: PUSH
31992: LD_VAR 0 2
31996: PUSH
31997: LD_VAR 0 3
32001: PUSH
32002: LD_VAR 0 4
32006: PUSH
32007: EMPTY
32008: LIST
32009: LIST
32010: LIST
32011: LIST
32012: PUSH
32013: LD_INT 3
32015: PUSH
32016: LD_INT 21
32018: PUSH
32019: LD_INT 3
32021: PUSH
32022: EMPTY
32023: LIST
32024: LIST
32025: PUSH
32026: EMPTY
32027: LIST
32028: LIST
32029: PUSH
32030: EMPTY
32031: LIST
32032: LIST
32033: LIST
32034: PPUSH
32035: CALL_OW 69
32039: ST_TO_ADDR
// if not tmp then
32040: LD_VAR 0 8
32044: NOT
32045: IFFALSE 32049
// exit ;
32047: GO 33609
// for i in tmp do
32049: LD_ADDR_VAR 0 6
32053: PUSH
32054: LD_VAR 0 8
32058: PUSH
32059: FOR_IN
32060: IFFALSE 33584
// begin points := [ 0 , 0 , 0 ] ;
32062: LD_ADDR_VAR 0 9
32066: PUSH
32067: LD_INT 0
32069: PUSH
32070: LD_INT 0
32072: PUSH
32073: LD_INT 0
32075: PUSH
32076: EMPTY
32077: LIST
32078: LIST
32079: LIST
32080: ST_TO_ADDR
// bpoints := 1 ;
32081: LD_ADDR_VAR 0 10
32085: PUSH
32086: LD_INT 1
32088: ST_TO_ADDR
// case GetType ( i ) of unit_human :
32089: LD_VAR 0 6
32093: PPUSH
32094: CALL_OW 247
32098: PUSH
32099: LD_INT 1
32101: DOUBLE
32102: EQUAL
32103: IFTRUE 32107
32105: GO 32685
32107: POP
// begin if GetClass ( i ) = 1 then
32108: LD_VAR 0 6
32112: PPUSH
32113: CALL_OW 257
32117: PUSH
32118: LD_INT 1
32120: EQUAL
32121: IFFALSE 32142
// points := [ 10 , 5 , 3 ] ;
32123: LD_ADDR_VAR 0 9
32127: PUSH
32128: LD_INT 10
32130: PUSH
32131: LD_INT 5
32133: PUSH
32134: LD_INT 3
32136: PUSH
32137: EMPTY
32138: LIST
32139: LIST
32140: LIST
32141: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
32142: LD_VAR 0 6
32146: PPUSH
32147: CALL_OW 257
32151: PUSH
32152: LD_INT 2
32154: PUSH
32155: LD_INT 3
32157: PUSH
32158: LD_INT 4
32160: PUSH
32161: EMPTY
32162: LIST
32163: LIST
32164: LIST
32165: IN
32166: IFFALSE 32187
// points := [ 3 , 2 , 1 ] ;
32168: LD_ADDR_VAR 0 9
32172: PUSH
32173: LD_INT 3
32175: PUSH
32176: LD_INT 2
32178: PUSH
32179: LD_INT 1
32181: PUSH
32182: EMPTY
32183: LIST
32184: LIST
32185: LIST
32186: ST_TO_ADDR
// if GetClass ( i ) = 5 then
32187: LD_VAR 0 6
32191: PPUSH
32192: CALL_OW 257
32196: PUSH
32197: LD_INT 5
32199: EQUAL
32200: IFFALSE 32221
// points := [ 130 , 5 , 2 ] ;
32202: LD_ADDR_VAR 0 9
32206: PUSH
32207: LD_INT 130
32209: PUSH
32210: LD_INT 5
32212: PUSH
32213: LD_INT 2
32215: PUSH
32216: EMPTY
32217: LIST
32218: LIST
32219: LIST
32220: ST_TO_ADDR
// if GetClass ( i ) = 8 then
32221: LD_VAR 0 6
32225: PPUSH
32226: CALL_OW 257
32230: PUSH
32231: LD_INT 8
32233: EQUAL
32234: IFFALSE 32255
// points := [ 35 , 35 , 30 ] ;
32236: LD_ADDR_VAR 0 9
32240: PUSH
32241: LD_INT 35
32243: PUSH
32244: LD_INT 35
32246: PUSH
32247: LD_INT 30
32249: PUSH
32250: EMPTY
32251: LIST
32252: LIST
32253: LIST
32254: ST_TO_ADDR
// if GetClass ( i ) = 9 then
32255: LD_VAR 0 6
32259: PPUSH
32260: CALL_OW 257
32264: PUSH
32265: LD_INT 9
32267: EQUAL
32268: IFFALSE 32289
// points := [ 20 , 55 , 40 ] ;
32270: LD_ADDR_VAR 0 9
32274: PUSH
32275: LD_INT 20
32277: PUSH
32278: LD_INT 55
32280: PUSH
32281: LD_INT 40
32283: PUSH
32284: EMPTY
32285: LIST
32286: LIST
32287: LIST
32288: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
32289: LD_VAR 0 6
32293: PPUSH
32294: CALL_OW 257
32298: PUSH
32299: LD_INT 12
32301: PUSH
32302: LD_INT 16
32304: PUSH
32305: EMPTY
32306: LIST
32307: LIST
32308: IN
32309: IFFALSE 32330
// points := [ 5 , 3 , 2 ] ;
32311: LD_ADDR_VAR 0 9
32315: PUSH
32316: LD_INT 5
32318: PUSH
32319: LD_INT 3
32321: PUSH
32322: LD_INT 2
32324: PUSH
32325: EMPTY
32326: LIST
32327: LIST
32328: LIST
32329: ST_TO_ADDR
// if GetClass ( i ) = 17 then
32330: LD_VAR 0 6
32334: PPUSH
32335: CALL_OW 257
32339: PUSH
32340: LD_INT 17
32342: EQUAL
32343: IFFALSE 32364
// points := [ 100 , 50 , 75 ] ;
32345: LD_ADDR_VAR 0 9
32349: PUSH
32350: LD_INT 100
32352: PUSH
32353: LD_INT 50
32355: PUSH
32356: LD_INT 75
32358: PUSH
32359: EMPTY
32360: LIST
32361: LIST
32362: LIST
32363: ST_TO_ADDR
// if GetClass ( i ) = 15 then
32364: LD_VAR 0 6
32368: PPUSH
32369: CALL_OW 257
32373: PUSH
32374: LD_INT 15
32376: EQUAL
32377: IFFALSE 32398
// points := [ 10 , 5 , 3 ] ;
32379: LD_ADDR_VAR 0 9
32383: PUSH
32384: LD_INT 10
32386: PUSH
32387: LD_INT 5
32389: PUSH
32390: LD_INT 3
32392: PUSH
32393: EMPTY
32394: LIST
32395: LIST
32396: LIST
32397: ST_TO_ADDR
// if GetClass ( i ) = 14 then
32398: LD_VAR 0 6
32402: PPUSH
32403: CALL_OW 257
32407: PUSH
32408: LD_INT 14
32410: EQUAL
32411: IFFALSE 32432
// points := [ 10 , 0 , 0 ] ;
32413: LD_ADDR_VAR 0 9
32417: PUSH
32418: LD_INT 10
32420: PUSH
32421: LD_INT 0
32423: PUSH
32424: LD_INT 0
32426: PUSH
32427: EMPTY
32428: LIST
32429: LIST
32430: LIST
32431: ST_TO_ADDR
// if GetClass ( i ) = 11 then
32432: LD_VAR 0 6
32436: PPUSH
32437: CALL_OW 257
32441: PUSH
32442: LD_INT 11
32444: EQUAL
32445: IFFALSE 32466
// points := [ 30 , 10 , 5 ] ;
32447: LD_ADDR_VAR 0 9
32451: PUSH
32452: LD_INT 30
32454: PUSH
32455: LD_INT 10
32457: PUSH
32458: LD_INT 5
32460: PUSH
32461: EMPTY
32462: LIST
32463: LIST
32464: LIST
32465: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
32466: LD_VAR 0 1
32470: PPUSH
32471: LD_INT 5
32473: PPUSH
32474: CALL_OW 321
32478: PUSH
32479: LD_INT 2
32481: EQUAL
32482: IFFALSE 32499
// bpoints := bpoints * 1.8 ;
32484: LD_ADDR_VAR 0 10
32488: PUSH
32489: LD_VAR 0 10
32493: PUSH
32494: LD_REAL  1.80000000000000E+0000
32497: MUL
32498: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
32499: LD_VAR 0 6
32503: PPUSH
32504: CALL_OW 257
32508: PUSH
32509: LD_INT 1
32511: PUSH
32512: LD_INT 2
32514: PUSH
32515: LD_INT 3
32517: PUSH
32518: LD_INT 4
32520: PUSH
32521: EMPTY
32522: LIST
32523: LIST
32524: LIST
32525: LIST
32526: IN
32527: PUSH
32528: LD_VAR 0 1
32532: PPUSH
32533: LD_INT 51
32535: PPUSH
32536: CALL_OW 321
32540: PUSH
32541: LD_INT 2
32543: EQUAL
32544: AND
32545: IFFALSE 32562
// bpoints := bpoints * 1.2 ;
32547: LD_ADDR_VAR 0 10
32551: PUSH
32552: LD_VAR 0 10
32556: PUSH
32557: LD_REAL  1.20000000000000E+0000
32560: MUL
32561: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
32562: LD_VAR 0 6
32566: PPUSH
32567: CALL_OW 257
32571: PUSH
32572: LD_INT 5
32574: PUSH
32575: LD_INT 7
32577: PUSH
32578: LD_INT 9
32580: PUSH
32581: EMPTY
32582: LIST
32583: LIST
32584: LIST
32585: IN
32586: PUSH
32587: LD_VAR 0 1
32591: PPUSH
32592: LD_INT 52
32594: PPUSH
32595: CALL_OW 321
32599: PUSH
32600: LD_INT 2
32602: EQUAL
32603: AND
32604: IFFALSE 32621
// bpoints := bpoints * 1.5 ;
32606: LD_ADDR_VAR 0 10
32610: PUSH
32611: LD_VAR 0 10
32615: PUSH
32616: LD_REAL  1.50000000000000E+0000
32619: MUL
32620: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
32621: LD_VAR 0 1
32625: PPUSH
32626: LD_INT 66
32628: PPUSH
32629: CALL_OW 321
32633: PUSH
32634: LD_INT 2
32636: EQUAL
32637: IFFALSE 32654
// bpoints := bpoints * 1.1 ;
32639: LD_ADDR_VAR 0 10
32643: PUSH
32644: LD_VAR 0 10
32648: PUSH
32649: LD_REAL  1.10000000000000E+0000
32652: MUL
32653: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
32654: LD_ADDR_VAR 0 10
32658: PUSH
32659: LD_VAR 0 10
32663: PUSH
32664: LD_VAR 0 6
32668: PPUSH
32669: LD_INT 1
32671: PPUSH
32672: CALL_OW 259
32676: PUSH
32677: LD_REAL  1.15000000000000E+0000
32680: MUL
32681: MUL
32682: ST_TO_ADDR
// end ; unit_vehicle :
32683: GO 33513
32685: LD_INT 2
32687: DOUBLE
32688: EQUAL
32689: IFTRUE 32693
32691: GO 33501
32693: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
32694: LD_VAR 0 6
32698: PPUSH
32699: CALL_OW 264
32703: PUSH
32704: LD_INT 2
32706: PUSH
32707: LD_INT 42
32709: PUSH
32710: LD_INT 24
32712: PUSH
32713: EMPTY
32714: LIST
32715: LIST
32716: LIST
32717: IN
32718: IFFALSE 32739
// points := [ 25 , 5 , 3 ] ;
32720: LD_ADDR_VAR 0 9
32724: PUSH
32725: LD_INT 25
32727: PUSH
32728: LD_INT 5
32730: PUSH
32731: LD_INT 3
32733: PUSH
32734: EMPTY
32735: LIST
32736: LIST
32737: LIST
32738: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
32739: LD_VAR 0 6
32743: PPUSH
32744: CALL_OW 264
32748: PUSH
32749: LD_INT 4
32751: PUSH
32752: LD_INT 43
32754: PUSH
32755: LD_INT 25
32757: PUSH
32758: EMPTY
32759: LIST
32760: LIST
32761: LIST
32762: IN
32763: IFFALSE 32784
// points := [ 40 , 15 , 5 ] ;
32765: LD_ADDR_VAR 0 9
32769: PUSH
32770: LD_INT 40
32772: PUSH
32773: LD_INT 15
32775: PUSH
32776: LD_INT 5
32778: PUSH
32779: EMPTY
32780: LIST
32781: LIST
32782: LIST
32783: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
32784: LD_VAR 0 6
32788: PPUSH
32789: CALL_OW 264
32793: PUSH
32794: LD_INT 3
32796: PUSH
32797: LD_INT 23
32799: PUSH
32800: EMPTY
32801: LIST
32802: LIST
32803: IN
32804: IFFALSE 32825
// points := [ 7 , 25 , 8 ] ;
32806: LD_ADDR_VAR 0 9
32810: PUSH
32811: LD_INT 7
32813: PUSH
32814: LD_INT 25
32816: PUSH
32817: LD_INT 8
32819: PUSH
32820: EMPTY
32821: LIST
32822: LIST
32823: LIST
32824: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
32825: LD_VAR 0 6
32829: PPUSH
32830: CALL_OW 264
32834: PUSH
32835: LD_INT 5
32837: PUSH
32838: LD_INT 27
32840: PUSH
32841: LD_INT 44
32843: PUSH
32844: EMPTY
32845: LIST
32846: LIST
32847: LIST
32848: IN
32849: IFFALSE 32870
// points := [ 14 , 50 , 16 ] ;
32851: LD_ADDR_VAR 0 9
32855: PUSH
32856: LD_INT 14
32858: PUSH
32859: LD_INT 50
32861: PUSH
32862: LD_INT 16
32864: PUSH
32865: EMPTY
32866: LIST
32867: LIST
32868: LIST
32869: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
32870: LD_VAR 0 6
32874: PPUSH
32875: CALL_OW 264
32879: PUSH
32880: LD_INT 6
32882: PUSH
32883: LD_INT 46
32885: PUSH
32886: EMPTY
32887: LIST
32888: LIST
32889: IN
32890: IFFALSE 32911
// points := [ 32 , 120 , 70 ] ;
32892: LD_ADDR_VAR 0 9
32896: PUSH
32897: LD_INT 32
32899: PUSH
32900: LD_INT 120
32902: PUSH
32903: LD_INT 70
32905: PUSH
32906: EMPTY
32907: LIST
32908: LIST
32909: LIST
32910: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
32911: LD_VAR 0 6
32915: PPUSH
32916: CALL_OW 264
32920: PUSH
32921: LD_INT 7
32923: PUSH
32924: LD_INT 28
32926: PUSH
32927: LD_INT 45
32929: PUSH
32930: LD_EXP 100
32934: PUSH
32935: EMPTY
32936: LIST
32937: LIST
32938: LIST
32939: LIST
32940: IN
32941: IFFALSE 32962
// points := [ 35 , 20 , 45 ] ;
32943: LD_ADDR_VAR 0 9
32947: PUSH
32948: LD_INT 35
32950: PUSH
32951: LD_INT 20
32953: PUSH
32954: LD_INT 45
32956: PUSH
32957: EMPTY
32958: LIST
32959: LIST
32960: LIST
32961: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
32962: LD_VAR 0 6
32966: PPUSH
32967: CALL_OW 264
32971: PUSH
32972: LD_INT 47
32974: PUSH
32975: EMPTY
32976: LIST
32977: IN
32978: IFFALSE 32999
// points := [ 67 , 45 , 75 ] ;
32980: LD_ADDR_VAR 0 9
32984: PUSH
32985: LD_INT 67
32987: PUSH
32988: LD_INT 45
32990: PUSH
32991: LD_INT 75
32993: PUSH
32994: EMPTY
32995: LIST
32996: LIST
32997: LIST
32998: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
32999: LD_VAR 0 6
33003: PPUSH
33004: CALL_OW 264
33008: PUSH
33009: LD_INT 26
33011: PUSH
33012: EMPTY
33013: LIST
33014: IN
33015: IFFALSE 33036
// points := [ 120 , 30 , 80 ] ;
33017: LD_ADDR_VAR 0 9
33021: PUSH
33022: LD_INT 120
33024: PUSH
33025: LD_INT 30
33027: PUSH
33028: LD_INT 80
33030: PUSH
33031: EMPTY
33032: LIST
33033: LIST
33034: LIST
33035: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
33036: LD_VAR 0 6
33040: PPUSH
33041: CALL_OW 264
33045: PUSH
33046: LD_INT 22
33048: PUSH
33049: EMPTY
33050: LIST
33051: IN
33052: IFFALSE 33073
// points := [ 40 , 1 , 1 ] ;
33054: LD_ADDR_VAR 0 9
33058: PUSH
33059: LD_INT 40
33061: PUSH
33062: LD_INT 1
33064: PUSH
33065: LD_INT 1
33067: PUSH
33068: EMPTY
33069: LIST
33070: LIST
33071: LIST
33072: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
33073: LD_VAR 0 6
33077: PPUSH
33078: CALL_OW 264
33082: PUSH
33083: LD_INT 29
33085: PUSH
33086: EMPTY
33087: LIST
33088: IN
33089: IFFALSE 33110
// points := [ 70 , 200 , 400 ] ;
33091: LD_ADDR_VAR 0 9
33095: PUSH
33096: LD_INT 70
33098: PUSH
33099: LD_INT 200
33101: PUSH
33102: LD_INT 400
33104: PUSH
33105: EMPTY
33106: LIST
33107: LIST
33108: LIST
33109: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
33110: LD_VAR 0 6
33114: PPUSH
33115: CALL_OW 264
33119: PUSH
33120: LD_INT 14
33122: PUSH
33123: LD_INT 53
33125: PUSH
33126: EMPTY
33127: LIST
33128: LIST
33129: IN
33130: IFFALSE 33151
// points := [ 40 , 10 , 20 ] ;
33132: LD_ADDR_VAR 0 9
33136: PUSH
33137: LD_INT 40
33139: PUSH
33140: LD_INT 10
33142: PUSH
33143: LD_INT 20
33145: PUSH
33146: EMPTY
33147: LIST
33148: LIST
33149: LIST
33150: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
33151: LD_VAR 0 6
33155: PPUSH
33156: CALL_OW 264
33160: PUSH
33161: LD_INT 9
33163: PUSH
33164: EMPTY
33165: LIST
33166: IN
33167: IFFALSE 33188
// points := [ 5 , 70 , 20 ] ;
33169: LD_ADDR_VAR 0 9
33173: PUSH
33174: LD_INT 5
33176: PUSH
33177: LD_INT 70
33179: PUSH
33180: LD_INT 20
33182: PUSH
33183: EMPTY
33184: LIST
33185: LIST
33186: LIST
33187: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
33188: LD_VAR 0 6
33192: PPUSH
33193: CALL_OW 264
33197: PUSH
33198: LD_INT 10
33200: PUSH
33201: EMPTY
33202: LIST
33203: IN
33204: IFFALSE 33225
// points := [ 35 , 110 , 70 ] ;
33206: LD_ADDR_VAR 0 9
33210: PUSH
33211: LD_INT 35
33213: PUSH
33214: LD_INT 110
33216: PUSH
33217: LD_INT 70
33219: PUSH
33220: EMPTY
33221: LIST
33222: LIST
33223: LIST
33224: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
33225: LD_VAR 0 6
33229: PPUSH
33230: CALL_OW 265
33234: PUSH
33235: LD_INT 25
33237: EQUAL
33238: IFFALSE 33259
// points := [ 80 , 65 , 100 ] ;
33240: LD_ADDR_VAR 0 9
33244: PUSH
33245: LD_INT 80
33247: PUSH
33248: LD_INT 65
33250: PUSH
33251: LD_INT 100
33253: PUSH
33254: EMPTY
33255: LIST
33256: LIST
33257: LIST
33258: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
33259: LD_VAR 0 6
33263: PPUSH
33264: CALL_OW 263
33268: PUSH
33269: LD_INT 1
33271: EQUAL
33272: IFFALSE 33307
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
33274: LD_ADDR_VAR 0 10
33278: PUSH
33279: LD_VAR 0 10
33283: PUSH
33284: LD_VAR 0 6
33288: PPUSH
33289: CALL_OW 311
33293: PPUSH
33294: LD_INT 3
33296: PPUSH
33297: CALL_OW 259
33301: PUSH
33302: LD_INT 4
33304: MUL
33305: MUL
33306: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
33307: LD_VAR 0 6
33311: PPUSH
33312: CALL_OW 263
33316: PUSH
33317: LD_INT 2
33319: EQUAL
33320: IFFALSE 33371
// begin j := IsControledBy ( i ) ;
33322: LD_ADDR_VAR 0 7
33326: PUSH
33327: LD_VAR 0 6
33331: PPUSH
33332: CALL_OW 312
33336: ST_TO_ADDR
// if j then
33337: LD_VAR 0 7
33341: IFFALSE 33371
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
33343: LD_ADDR_VAR 0 10
33347: PUSH
33348: LD_VAR 0 10
33352: PUSH
33353: LD_VAR 0 7
33357: PPUSH
33358: LD_INT 3
33360: PPUSH
33361: CALL_OW 259
33365: PUSH
33366: LD_INT 3
33368: MUL
33369: MUL
33370: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
33371: LD_VAR 0 6
33375: PPUSH
33376: CALL_OW 264
33380: PUSH
33381: LD_INT 5
33383: PUSH
33384: LD_INT 6
33386: PUSH
33387: LD_INT 46
33389: PUSH
33390: LD_INT 44
33392: PUSH
33393: LD_INT 47
33395: PUSH
33396: LD_INT 45
33398: PUSH
33399: LD_INT 28
33401: PUSH
33402: LD_INT 7
33404: PUSH
33405: LD_INT 27
33407: PUSH
33408: LD_INT 29
33410: PUSH
33411: EMPTY
33412: LIST
33413: LIST
33414: LIST
33415: LIST
33416: LIST
33417: LIST
33418: LIST
33419: LIST
33420: LIST
33421: LIST
33422: IN
33423: PUSH
33424: LD_VAR 0 1
33428: PPUSH
33429: LD_INT 52
33431: PPUSH
33432: CALL_OW 321
33436: PUSH
33437: LD_INT 2
33439: EQUAL
33440: AND
33441: IFFALSE 33458
// bpoints := bpoints * 1.2 ;
33443: LD_ADDR_VAR 0 10
33447: PUSH
33448: LD_VAR 0 10
33452: PUSH
33453: LD_REAL  1.20000000000000E+0000
33456: MUL
33457: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
33458: LD_VAR 0 6
33462: PPUSH
33463: CALL_OW 264
33467: PUSH
33468: LD_INT 6
33470: PUSH
33471: LD_INT 46
33473: PUSH
33474: LD_INT 47
33476: PUSH
33477: EMPTY
33478: LIST
33479: LIST
33480: LIST
33481: IN
33482: IFFALSE 33499
// bpoints := bpoints * 1.2 ;
33484: LD_ADDR_VAR 0 10
33488: PUSH
33489: LD_VAR 0 10
33493: PUSH
33494: LD_REAL  1.20000000000000E+0000
33497: MUL
33498: ST_TO_ADDR
// end ; unit_building :
33499: GO 33513
33501: LD_INT 3
33503: DOUBLE
33504: EQUAL
33505: IFTRUE 33509
33507: GO 33512
33509: POP
// ; end ;
33510: GO 33513
33512: POP
// for j = 1 to 3 do
33513: LD_ADDR_VAR 0 7
33517: PUSH
33518: DOUBLE
33519: LD_INT 1
33521: DEC
33522: ST_TO_ADDR
33523: LD_INT 3
33525: PUSH
33526: FOR_TO
33527: IFFALSE 33580
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
33529: LD_ADDR_VAR 0 5
33533: PUSH
33534: LD_VAR 0 5
33538: PPUSH
33539: LD_VAR 0 7
33543: PPUSH
33544: LD_VAR 0 5
33548: PUSH
33549: LD_VAR 0 7
33553: ARRAY
33554: PUSH
33555: LD_VAR 0 9
33559: PUSH
33560: LD_VAR 0 7
33564: ARRAY
33565: PUSH
33566: LD_VAR 0 10
33570: MUL
33571: PLUS
33572: PPUSH
33573: CALL_OW 1
33577: ST_TO_ADDR
33578: GO 33526
33580: POP
33581: POP
// end ;
33582: GO 32059
33584: POP
33585: POP
// result := Replace ( result , 4 , tmp ) ;
33586: LD_ADDR_VAR 0 5
33590: PUSH
33591: LD_VAR 0 5
33595: PPUSH
33596: LD_INT 4
33598: PPUSH
33599: LD_VAR 0 8
33603: PPUSH
33604: CALL_OW 1
33608: ST_TO_ADDR
// end ;
33609: LD_VAR 0 5
33613: RET
// export function DangerAtRange ( unit , range ) ; begin
33614: LD_INT 0
33616: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
33617: LD_ADDR_VAR 0 3
33621: PUSH
33622: LD_VAR 0 1
33626: PPUSH
33627: CALL_OW 255
33631: PPUSH
33632: LD_VAR 0 1
33636: PPUSH
33637: CALL_OW 250
33641: PPUSH
33642: LD_VAR 0 1
33646: PPUSH
33647: CALL_OW 251
33651: PPUSH
33652: LD_VAR 0 2
33656: PPUSH
33657: CALL 31911 0 4
33661: ST_TO_ADDR
// end ;
33662: LD_VAR 0 3
33666: RET
// export function DangerInArea ( side , area ) ; begin
33667: LD_INT 0
33669: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
33670: LD_ADDR_VAR 0 3
33674: PUSH
33675: LD_VAR 0 2
33679: PPUSH
33680: LD_INT 81
33682: PUSH
33683: LD_VAR 0 1
33687: PUSH
33688: EMPTY
33689: LIST
33690: LIST
33691: PPUSH
33692: CALL_OW 70
33696: ST_TO_ADDR
// end ;
33697: LD_VAR 0 3
33701: RET
// export function IsExtension ( b ) ; begin
33702: LD_INT 0
33704: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
33705: LD_ADDR_VAR 0 2
33709: PUSH
33710: LD_VAR 0 1
33714: PUSH
33715: LD_INT 23
33717: PUSH
33718: LD_INT 20
33720: PUSH
33721: LD_INT 22
33723: PUSH
33724: LD_INT 17
33726: PUSH
33727: LD_INT 24
33729: PUSH
33730: LD_INT 21
33732: PUSH
33733: LD_INT 19
33735: PUSH
33736: LD_INT 16
33738: PUSH
33739: LD_INT 25
33741: PUSH
33742: LD_INT 18
33744: PUSH
33745: EMPTY
33746: LIST
33747: LIST
33748: LIST
33749: LIST
33750: LIST
33751: LIST
33752: LIST
33753: LIST
33754: LIST
33755: LIST
33756: IN
33757: ST_TO_ADDR
// end ;
33758: LD_VAR 0 2
33762: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
33763: LD_INT 0
33765: PPUSH
33766: PPUSH
33767: PPUSH
// result := [ ] ;
33768: LD_ADDR_VAR 0 4
33772: PUSH
33773: EMPTY
33774: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
33775: LD_ADDR_VAR 0 5
33779: PUSH
33780: LD_VAR 0 2
33784: PPUSH
33785: LD_INT 21
33787: PUSH
33788: LD_INT 3
33790: PUSH
33791: EMPTY
33792: LIST
33793: LIST
33794: PPUSH
33795: CALL_OW 70
33799: ST_TO_ADDR
// if not tmp then
33800: LD_VAR 0 5
33804: NOT
33805: IFFALSE 33809
// exit ;
33807: GO 33873
// if checkLink then
33809: LD_VAR 0 3
33813: IFFALSE 33863
// begin for i in tmp do
33815: LD_ADDR_VAR 0 6
33819: PUSH
33820: LD_VAR 0 5
33824: PUSH
33825: FOR_IN
33826: IFFALSE 33861
// if GetBase ( i ) <> base then
33828: LD_VAR 0 6
33832: PPUSH
33833: CALL_OW 274
33837: PUSH
33838: LD_VAR 0 1
33842: NONEQUAL
33843: IFFALSE 33859
// ComLinkToBase ( base , i ) ;
33845: LD_VAR 0 1
33849: PPUSH
33850: LD_VAR 0 6
33854: PPUSH
33855: CALL_OW 169
33859: GO 33825
33861: POP
33862: POP
// end ; result := tmp ;
33863: LD_ADDR_VAR 0 4
33867: PUSH
33868: LD_VAR 0 5
33872: ST_TO_ADDR
// end ;
33873: LD_VAR 0 4
33877: RET
// export function ComComplete ( units , b ) ; var i ; begin
33878: LD_INT 0
33880: PPUSH
33881: PPUSH
// if not units then
33882: LD_VAR 0 1
33886: NOT
33887: IFFALSE 33891
// exit ;
33889: GO 33981
// for i in units do
33891: LD_ADDR_VAR 0 4
33895: PUSH
33896: LD_VAR 0 1
33900: PUSH
33901: FOR_IN
33902: IFFALSE 33979
// if BuildingStatus ( b ) = bs_build then
33904: LD_VAR 0 2
33908: PPUSH
33909: CALL_OW 461
33913: PUSH
33914: LD_INT 1
33916: EQUAL
33917: IFFALSE 33977
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
33919: LD_VAR 0 4
33923: PPUSH
33924: LD_STRING h
33926: PUSH
33927: LD_VAR 0 2
33931: PPUSH
33932: CALL_OW 250
33936: PUSH
33937: LD_VAR 0 2
33941: PPUSH
33942: CALL_OW 251
33946: PUSH
33947: LD_VAR 0 2
33951: PUSH
33952: LD_INT 0
33954: PUSH
33955: LD_INT 0
33957: PUSH
33958: LD_INT 0
33960: PUSH
33961: EMPTY
33962: LIST
33963: LIST
33964: LIST
33965: LIST
33966: LIST
33967: LIST
33968: LIST
33969: PUSH
33970: EMPTY
33971: LIST
33972: PPUSH
33973: CALL_OW 446
33977: GO 33901
33979: POP
33980: POP
// end ;
33981: LD_VAR 0 3
33985: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
33986: LD_INT 0
33988: PPUSH
33989: PPUSH
33990: PPUSH
33991: PPUSH
33992: PPUSH
33993: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
33994: LD_VAR 0 1
33998: NOT
33999: PUSH
34000: LD_VAR 0 1
34004: PPUSH
34005: CALL_OW 263
34009: PUSH
34010: LD_INT 2
34012: NONEQUAL
34013: OR
34014: IFFALSE 34018
// exit ;
34016: GO 34334
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
34018: LD_ADDR_VAR 0 6
34022: PUSH
34023: LD_INT 22
34025: PUSH
34026: LD_VAR 0 1
34030: PPUSH
34031: CALL_OW 255
34035: PUSH
34036: EMPTY
34037: LIST
34038: LIST
34039: PUSH
34040: LD_INT 2
34042: PUSH
34043: LD_INT 30
34045: PUSH
34046: LD_INT 36
34048: PUSH
34049: EMPTY
34050: LIST
34051: LIST
34052: PUSH
34053: LD_INT 34
34055: PUSH
34056: LD_INT 31
34058: PUSH
34059: EMPTY
34060: LIST
34061: LIST
34062: PUSH
34063: EMPTY
34064: LIST
34065: LIST
34066: LIST
34067: PUSH
34068: EMPTY
34069: LIST
34070: LIST
34071: PPUSH
34072: CALL_OW 69
34076: ST_TO_ADDR
// if not tmp then
34077: LD_VAR 0 6
34081: NOT
34082: IFFALSE 34086
// exit ;
34084: GO 34334
// result := [ ] ;
34086: LD_ADDR_VAR 0 2
34090: PUSH
34091: EMPTY
34092: ST_TO_ADDR
// for i in tmp do
34093: LD_ADDR_VAR 0 3
34097: PUSH
34098: LD_VAR 0 6
34102: PUSH
34103: FOR_IN
34104: IFFALSE 34175
// begin t := UnitsInside ( i ) ;
34106: LD_ADDR_VAR 0 4
34110: PUSH
34111: LD_VAR 0 3
34115: PPUSH
34116: CALL_OW 313
34120: ST_TO_ADDR
// if t then
34121: LD_VAR 0 4
34125: IFFALSE 34173
// for j in t do
34127: LD_ADDR_VAR 0 7
34131: PUSH
34132: LD_VAR 0 4
34136: PUSH
34137: FOR_IN
34138: IFFALSE 34171
// result := Replace ( result , result + 1 , j ) ;
34140: LD_ADDR_VAR 0 2
34144: PUSH
34145: LD_VAR 0 2
34149: PPUSH
34150: LD_VAR 0 2
34154: PUSH
34155: LD_INT 1
34157: PLUS
34158: PPUSH
34159: LD_VAR 0 7
34163: PPUSH
34164: CALL_OW 1
34168: ST_TO_ADDR
34169: GO 34137
34171: POP
34172: POP
// end ;
34173: GO 34103
34175: POP
34176: POP
// if not result then
34177: LD_VAR 0 2
34181: NOT
34182: IFFALSE 34186
// exit ;
34184: GO 34334
// mech := result [ 1 ] ;
34186: LD_ADDR_VAR 0 5
34190: PUSH
34191: LD_VAR 0 2
34195: PUSH
34196: LD_INT 1
34198: ARRAY
34199: ST_TO_ADDR
// if result > 1 then
34200: LD_VAR 0 2
34204: PUSH
34205: LD_INT 1
34207: GREATER
34208: IFFALSE 34320
// begin for i = 2 to result do
34210: LD_ADDR_VAR 0 3
34214: PUSH
34215: DOUBLE
34216: LD_INT 2
34218: DEC
34219: ST_TO_ADDR
34220: LD_VAR 0 2
34224: PUSH
34225: FOR_TO
34226: IFFALSE 34318
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
34228: LD_ADDR_VAR 0 4
34232: PUSH
34233: LD_VAR 0 2
34237: PUSH
34238: LD_VAR 0 3
34242: ARRAY
34243: PPUSH
34244: LD_INT 3
34246: PPUSH
34247: CALL_OW 259
34251: PUSH
34252: LD_VAR 0 2
34256: PUSH
34257: LD_VAR 0 3
34261: ARRAY
34262: PPUSH
34263: CALL_OW 432
34267: MINUS
34268: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
34269: LD_VAR 0 4
34273: PUSH
34274: LD_VAR 0 5
34278: PPUSH
34279: LD_INT 3
34281: PPUSH
34282: CALL_OW 259
34286: PUSH
34287: LD_VAR 0 5
34291: PPUSH
34292: CALL_OW 432
34296: MINUS
34297: GREATEREQUAL
34298: IFFALSE 34316
// mech := result [ i ] ;
34300: LD_ADDR_VAR 0 5
34304: PUSH
34305: LD_VAR 0 2
34309: PUSH
34310: LD_VAR 0 3
34314: ARRAY
34315: ST_TO_ADDR
// end ;
34316: GO 34225
34318: POP
34319: POP
// end ; ComLinkTo ( vehicle , mech ) ;
34320: LD_VAR 0 1
34324: PPUSH
34325: LD_VAR 0 5
34329: PPUSH
34330: CALL_OW 135
// end ;
34334: LD_VAR 0 2
34338: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
34339: LD_INT 0
34341: PPUSH
34342: PPUSH
34343: PPUSH
34344: PPUSH
34345: PPUSH
34346: PPUSH
34347: PPUSH
34348: PPUSH
34349: PPUSH
34350: PPUSH
34351: PPUSH
34352: PPUSH
34353: PPUSH
// result := [ ] ;
34354: LD_ADDR_VAR 0 7
34358: PUSH
34359: EMPTY
34360: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
34361: LD_VAR 0 1
34365: PPUSH
34366: CALL_OW 266
34370: PUSH
34371: LD_INT 0
34373: PUSH
34374: LD_INT 1
34376: PUSH
34377: EMPTY
34378: LIST
34379: LIST
34380: IN
34381: NOT
34382: IFFALSE 34386
// exit ;
34384: GO 36020
// if name then
34386: LD_VAR 0 3
34390: IFFALSE 34406
// SetBName ( base_dep , name ) ;
34392: LD_VAR 0 1
34396: PPUSH
34397: LD_VAR 0 3
34401: PPUSH
34402: CALL_OW 500
// base := GetBase ( base_dep ) ;
34406: LD_ADDR_VAR 0 15
34410: PUSH
34411: LD_VAR 0 1
34415: PPUSH
34416: CALL_OW 274
34420: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
34421: LD_ADDR_VAR 0 16
34425: PUSH
34426: LD_VAR 0 1
34430: PPUSH
34431: CALL_OW 255
34435: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
34436: LD_ADDR_VAR 0 17
34440: PUSH
34441: LD_VAR 0 1
34445: PPUSH
34446: CALL_OW 248
34450: ST_TO_ADDR
// if sources then
34451: LD_VAR 0 5
34455: IFFALSE 34502
// for i = 1 to 3 do
34457: LD_ADDR_VAR 0 8
34461: PUSH
34462: DOUBLE
34463: LD_INT 1
34465: DEC
34466: ST_TO_ADDR
34467: LD_INT 3
34469: PUSH
34470: FOR_TO
34471: IFFALSE 34500
// AddResourceType ( base , i , sources [ i ] ) ;
34473: LD_VAR 0 15
34477: PPUSH
34478: LD_VAR 0 8
34482: PPUSH
34483: LD_VAR 0 5
34487: PUSH
34488: LD_VAR 0 8
34492: ARRAY
34493: PPUSH
34494: CALL_OW 276
34498: GO 34470
34500: POP
34501: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
34502: LD_ADDR_VAR 0 18
34506: PUSH
34507: LD_VAR 0 15
34511: PPUSH
34512: LD_VAR 0 2
34516: PPUSH
34517: LD_INT 1
34519: PPUSH
34520: CALL 33763 0 3
34524: ST_TO_ADDR
// InitHc ;
34525: CALL_OW 19
// InitUc ;
34529: CALL_OW 18
// uc_side := side ;
34533: LD_ADDR_OWVAR 20
34537: PUSH
34538: LD_VAR 0 16
34542: ST_TO_ADDR
// uc_nation := nation ;
34543: LD_ADDR_OWVAR 21
34547: PUSH
34548: LD_VAR 0 17
34552: ST_TO_ADDR
// if buildings then
34553: LD_VAR 0 18
34557: IFFALSE 35879
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
34559: LD_ADDR_VAR 0 19
34563: PUSH
34564: LD_VAR 0 18
34568: PPUSH
34569: LD_INT 2
34571: PUSH
34572: LD_INT 30
34574: PUSH
34575: LD_INT 29
34577: PUSH
34578: EMPTY
34579: LIST
34580: LIST
34581: PUSH
34582: LD_INT 30
34584: PUSH
34585: LD_INT 30
34587: PUSH
34588: EMPTY
34589: LIST
34590: LIST
34591: PUSH
34592: EMPTY
34593: LIST
34594: LIST
34595: LIST
34596: PPUSH
34597: CALL_OW 72
34601: ST_TO_ADDR
// if tmp then
34602: LD_VAR 0 19
34606: IFFALSE 34654
// for i in tmp do
34608: LD_ADDR_VAR 0 8
34612: PUSH
34613: LD_VAR 0 19
34617: PUSH
34618: FOR_IN
34619: IFFALSE 34652
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
34621: LD_VAR 0 8
34625: PPUSH
34626: CALL_OW 250
34630: PPUSH
34631: LD_VAR 0 8
34635: PPUSH
34636: CALL_OW 251
34640: PPUSH
34641: LD_VAR 0 16
34645: PPUSH
34646: CALL_OW 441
34650: GO 34618
34652: POP
34653: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
34654: LD_VAR 0 18
34658: PPUSH
34659: LD_INT 2
34661: PUSH
34662: LD_INT 30
34664: PUSH
34665: LD_INT 32
34667: PUSH
34668: EMPTY
34669: LIST
34670: LIST
34671: PUSH
34672: LD_INT 30
34674: PUSH
34675: LD_INT 33
34677: PUSH
34678: EMPTY
34679: LIST
34680: LIST
34681: PUSH
34682: EMPTY
34683: LIST
34684: LIST
34685: LIST
34686: PPUSH
34687: CALL_OW 72
34691: IFFALSE 34779
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
34693: LD_ADDR_VAR 0 8
34697: PUSH
34698: LD_VAR 0 18
34702: PPUSH
34703: LD_INT 2
34705: PUSH
34706: LD_INT 30
34708: PUSH
34709: LD_INT 32
34711: PUSH
34712: EMPTY
34713: LIST
34714: LIST
34715: PUSH
34716: LD_INT 30
34718: PUSH
34719: LD_INT 33
34721: PUSH
34722: EMPTY
34723: LIST
34724: LIST
34725: PUSH
34726: EMPTY
34727: LIST
34728: LIST
34729: LIST
34730: PPUSH
34731: CALL_OW 72
34735: PUSH
34736: FOR_IN
34737: IFFALSE 34777
// begin if not GetBWeapon ( i ) then
34739: LD_VAR 0 8
34743: PPUSH
34744: CALL_OW 269
34748: NOT
34749: IFFALSE 34775
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
34751: LD_VAR 0 8
34755: PPUSH
34756: LD_VAR 0 8
34760: PPUSH
34761: LD_VAR 0 2
34765: PPUSH
34766: CALL 36025 0 2
34770: PPUSH
34771: CALL_OW 431
// end ;
34775: GO 34736
34777: POP
34778: POP
// end ; for i = 1 to personel do
34779: LD_ADDR_VAR 0 8
34783: PUSH
34784: DOUBLE
34785: LD_INT 1
34787: DEC
34788: ST_TO_ADDR
34789: LD_VAR 0 6
34793: PUSH
34794: FOR_TO
34795: IFFALSE 35859
// begin if i > 4 then
34797: LD_VAR 0 8
34801: PUSH
34802: LD_INT 4
34804: GREATER
34805: IFFALSE 34809
// break ;
34807: GO 35859
// case i of 1 :
34809: LD_VAR 0 8
34813: PUSH
34814: LD_INT 1
34816: DOUBLE
34817: EQUAL
34818: IFTRUE 34822
34820: GO 34902
34822: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
34823: LD_ADDR_VAR 0 12
34827: PUSH
34828: LD_VAR 0 18
34832: PPUSH
34833: LD_INT 22
34835: PUSH
34836: LD_VAR 0 16
34840: PUSH
34841: EMPTY
34842: LIST
34843: LIST
34844: PUSH
34845: LD_INT 58
34847: PUSH
34848: EMPTY
34849: LIST
34850: PUSH
34851: LD_INT 2
34853: PUSH
34854: LD_INT 30
34856: PUSH
34857: LD_INT 32
34859: PUSH
34860: EMPTY
34861: LIST
34862: LIST
34863: PUSH
34864: LD_INT 30
34866: PUSH
34867: LD_INT 4
34869: PUSH
34870: EMPTY
34871: LIST
34872: LIST
34873: PUSH
34874: LD_INT 30
34876: PUSH
34877: LD_INT 5
34879: PUSH
34880: EMPTY
34881: LIST
34882: LIST
34883: PUSH
34884: EMPTY
34885: LIST
34886: LIST
34887: LIST
34888: LIST
34889: PUSH
34890: EMPTY
34891: LIST
34892: LIST
34893: LIST
34894: PPUSH
34895: CALL_OW 72
34899: ST_TO_ADDR
34900: GO 35124
34902: LD_INT 2
34904: DOUBLE
34905: EQUAL
34906: IFTRUE 34910
34908: GO 34972
34910: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
34911: LD_ADDR_VAR 0 12
34915: PUSH
34916: LD_VAR 0 18
34920: PPUSH
34921: LD_INT 22
34923: PUSH
34924: LD_VAR 0 16
34928: PUSH
34929: EMPTY
34930: LIST
34931: LIST
34932: PUSH
34933: LD_INT 2
34935: PUSH
34936: LD_INT 30
34938: PUSH
34939: LD_INT 0
34941: PUSH
34942: EMPTY
34943: LIST
34944: LIST
34945: PUSH
34946: LD_INT 30
34948: PUSH
34949: LD_INT 1
34951: PUSH
34952: EMPTY
34953: LIST
34954: LIST
34955: PUSH
34956: EMPTY
34957: LIST
34958: LIST
34959: LIST
34960: PUSH
34961: EMPTY
34962: LIST
34963: LIST
34964: PPUSH
34965: CALL_OW 72
34969: ST_TO_ADDR
34970: GO 35124
34972: LD_INT 3
34974: DOUBLE
34975: EQUAL
34976: IFTRUE 34980
34978: GO 35042
34980: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
34981: LD_ADDR_VAR 0 12
34985: PUSH
34986: LD_VAR 0 18
34990: PPUSH
34991: LD_INT 22
34993: PUSH
34994: LD_VAR 0 16
34998: PUSH
34999: EMPTY
35000: LIST
35001: LIST
35002: PUSH
35003: LD_INT 2
35005: PUSH
35006: LD_INT 30
35008: PUSH
35009: LD_INT 2
35011: PUSH
35012: EMPTY
35013: LIST
35014: LIST
35015: PUSH
35016: LD_INT 30
35018: PUSH
35019: LD_INT 3
35021: PUSH
35022: EMPTY
35023: LIST
35024: LIST
35025: PUSH
35026: EMPTY
35027: LIST
35028: LIST
35029: LIST
35030: PUSH
35031: EMPTY
35032: LIST
35033: LIST
35034: PPUSH
35035: CALL_OW 72
35039: ST_TO_ADDR
35040: GO 35124
35042: LD_INT 4
35044: DOUBLE
35045: EQUAL
35046: IFTRUE 35050
35048: GO 35123
35050: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
35051: LD_ADDR_VAR 0 12
35055: PUSH
35056: LD_VAR 0 18
35060: PPUSH
35061: LD_INT 22
35063: PUSH
35064: LD_VAR 0 16
35068: PUSH
35069: EMPTY
35070: LIST
35071: LIST
35072: PUSH
35073: LD_INT 2
35075: PUSH
35076: LD_INT 30
35078: PUSH
35079: LD_INT 6
35081: PUSH
35082: EMPTY
35083: LIST
35084: LIST
35085: PUSH
35086: LD_INT 30
35088: PUSH
35089: LD_INT 7
35091: PUSH
35092: EMPTY
35093: LIST
35094: LIST
35095: PUSH
35096: LD_INT 30
35098: PUSH
35099: LD_INT 8
35101: PUSH
35102: EMPTY
35103: LIST
35104: LIST
35105: PUSH
35106: EMPTY
35107: LIST
35108: LIST
35109: LIST
35110: LIST
35111: PUSH
35112: EMPTY
35113: LIST
35114: LIST
35115: PPUSH
35116: CALL_OW 72
35120: ST_TO_ADDR
35121: GO 35124
35123: POP
// if i = 1 then
35124: LD_VAR 0 8
35128: PUSH
35129: LD_INT 1
35131: EQUAL
35132: IFFALSE 35243
// begin tmp := [ ] ;
35134: LD_ADDR_VAR 0 19
35138: PUSH
35139: EMPTY
35140: ST_TO_ADDR
// for j in f do
35141: LD_ADDR_VAR 0 9
35145: PUSH
35146: LD_VAR 0 12
35150: PUSH
35151: FOR_IN
35152: IFFALSE 35225
// if GetBType ( j ) = b_bunker then
35154: LD_VAR 0 9
35158: PPUSH
35159: CALL_OW 266
35163: PUSH
35164: LD_INT 32
35166: EQUAL
35167: IFFALSE 35194
// tmp := Insert ( tmp , 1 , j ) else
35169: LD_ADDR_VAR 0 19
35173: PUSH
35174: LD_VAR 0 19
35178: PPUSH
35179: LD_INT 1
35181: PPUSH
35182: LD_VAR 0 9
35186: PPUSH
35187: CALL_OW 2
35191: ST_TO_ADDR
35192: GO 35223
// tmp := Insert ( tmp , tmp + 1 , j ) ;
35194: LD_ADDR_VAR 0 19
35198: PUSH
35199: LD_VAR 0 19
35203: PPUSH
35204: LD_VAR 0 19
35208: PUSH
35209: LD_INT 1
35211: PLUS
35212: PPUSH
35213: LD_VAR 0 9
35217: PPUSH
35218: CALL_OW 2
35222: ST_TO_ADDR
35223: GO 35151
35225: POP
35226: POP
// if tmp then
35227: LD_VAR 0 19
35231: IFFALSE 35243
// f := tmp ;
35233: LD_ADDR_VAR 0 12
35237: PUSH
35238: LD_VAR 0 19
35242: ST_TO_ADDR
// end ; x := personel [ i ] ;
35243: LD_ADDR_VAR 0 13
35247: PUSH
35248: LD_VAR 0 6
35252: PUSH
35253: LD_VAR 0 8
35257: ARRAY
35258: ST_TO_ADDR
// if x = - 1 then
35259: LD_VAR 0 13
35263: PUSH
35264: LD_INT 1
35266: NEG
35267: EQUAL
35268: IFFALSE 35477
// begin for j in f do
35270: LD_ADDR_VAR 0 9
35274: PUSH
35275: LD_VAR 0 12
35279: PUSH
35280: FOR_IN
35281: IFFALSE 35473
// repeat InitHc ;
35283: CALL_OW 19
// if GetBType ( j ) = b_barracks then
35287: LD_VAR 0 9
35291: PPUSH
35292: CALL_OW 266
35296: PUSH
35297: LD_INT 5
35299: EQUAL
35300: IFFALSE 35370
// begin if UnitsInside ( j ) < 3 then
35302: LD_VAR 0 9
35306: PPUSH
35307: CALL_OW 313
35311: PUSH
35312: LD_INT 3
35314: LESS
35315: IFFALSE 35351
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35317: LD_INT 0
35319: PPUSH
35320: LD_INT 5
35322: PUSH
35323: LD_INT 8
35325: PUSH
35326: LD_INT 9
35328: PUSH
35329: EMPTY
35330: LIST
35331: LIST
35332: LIST
35333: PUSH
35334: LD_VAR 0 17
35338: ARRAY
35339: PPUSH
35340: LD_VAR 0 4
35344: PPUSH
35345: CALL_OW 380
35349: GO 35368
// PrepareHuman ( false , i , skill ) ;
35351: LD_INT 0
35353: PPUSH
35354: LD_VAR 0 8
35358: PPUSH
35359: LD_VAR 0 4
35363: PPUSH
35364: CALL_OW 380
// end else
35368: GO 35387
// PrepareHuman ( false , i , skill ) ;
35370: LD_INT 0
35372: PPUSH
35373: LD_VAR 0 8
35377: PPUSH
35378: LD_VAR 0 4
35382: PPUSH
35383: CALL_OW 380
// un := CreateHuman ;
35387: LD_ADDR_VAR 0 14
35391: PUSH
35392: CALL_OW 44
35396: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35397: LD_ADDR_VAR 0 7
35401: PUSH
35402: LD_VAR 0 7
35406: PPUSH
35407: LD_INT 1
35409: PPUSH
35410: LD_VAR 0 14
35414: PPUSH
35415: CALL_OW 2
35419: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
35420: LD_VAR 0 14
35424: PPUSH
35425: LD_VAR 0 9
35429: PPUSH
35430: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
35434: LD_VAR 0 9
35438: PPUSH
35439: CALL_OW 313
35443: PUSH
35444: LD_INT 6
35446: EQUAL
35447: PUSH
35448: LD_VAR 0 9
35452: PPUSH
35453: CALL_OW 266
35457: PUSH
35458: LD_INT 32
35460: PUSH
35461: LD_INT 31
35463: PUSH
35464: EMPTY
35465: LIST
35466: LIST
35467: IN
35468: OR
35469: IFFALSE 35283
35471: GO 35280
35473: POP
35474: POP
// end else
35475: GO 35857
// for j = 1 to x do
35477: LD_ADDR_VAR 0 9
35481: PUSH
35482: DOUBLE
35483: LD_INT 1
35485: DEC
35486: ST_TO_ADDR
35487: LD_VAR 0 13
35491: PUSH
35492: FOR_TO
35493: IFFALSE 35855
// begin InitHc ;
35495: CALL_OW 19
// if not f then
35499: LD_VAR 0 12
35503: NOT
35504: IFFALSE 35593
// begin PrepareHuman ( false , i , skill ) ;
35506: LD_INT 0
35508: PPUSH
35509: LD_VAR 0 8
35513: PPUSH
35514: LD_VAR 0 4
35518: PPUSH
35519: CALL_OW 380
// un := CreateHuman ;
35523: LD_ADDR_VAR 0 14
35527: PUSH
35528: CALL_OW 44
35532: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35533: LD_ADDR_VAR 0 7
35537: PUSH
35538: LD_VAR 0 7
35542: PPUSH
35543: LD_INT 1
35545: PPUSH
35546: LD_VAR 0 14
35550: PPUSH
35551: CALL_OW 2
35555: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35556: LD_VAR 0 14
35560: PPUSH
35561: LD_VAR 0 1
35565: PPUSH
35566: CALL_OW 250
35570: PPUSH
35571: LD_VAR 0 1
35575: PPUSH
35576: CALL_OW 251
35580: PPUSH
35581: LD_INT 10
35583: PPUSH
35584: LD_INT 0
35586: PPUSH
35587: CALL_OW 50
// continue ;
35591: GO 35492
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
35593: LD_VAR 0 12
35597: PUSH
35598: LD_INT 1
35600: ARRAY
35601: PPUSH
35602: CALL_OW 313
35606: PUSH
35607: LD_VAR 0 12
35611: PUSH
35612: LD_INT 1
35614: ARRAY
35615: PPUSH
35616: CALL_OW 266
35620: PUSH
35621: LD_INT 32
35623: PUSH
35624: LD_INT 31
35626: PUSH
35627: EMPTY
35628: LIST
35629: LIST
35630: IN
35631: AND
35632: PUSH
35633: LD_VAR 0 12
35637: PUSH
35638: LD_INT 1
35640: ARRAY
35641: PPUSH
35642: CALL_OW 313
35646: PUSH
35647: LD_INT 6
35649: EQUAL
35650: OR
35651: IFFALSE 35671
// f := Delete ( f , 1 ) ;
35653: LD_ADDR_VAR 0 12
35657: PUSH
35658: LD_VAR 0 12
35662: PPUSH
35663: LD_INT 1
35665: PPUSH
35666: CALL_OW 3
35670: ST_TO_ADDR
// if not f then
35671: LD_VAR 0 12
35675: NOT
35676: IFFALSE 35694
// begin x := x + 2 ;
35678: LD_ADDR_VAR 0 13
35682: PUSH
35683: LD_VAR 0 13
35687: PUSH
35688: LD_INT 2
35690: PLUS
35691: ST_TO_ADDR
// continue ;
35692: GO 35492
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
35694: LD_VAR 0 12
35698: PUSH
35699: LD_INT 1
35701: ARRAY
35702: PPUSH
35703: CALL_OW 266
35707: PUSH
35708: LD_INT 5
35710: EQUAL
35711: IFFALSE 35785
// begin if UnitsInside ( f [ 1 ] ) < 3 then
35713: LD_VAR 0 12
35717: PUSH
35718: LD_INT 1
35720: ARRAY
35721: PPUSH
35722: CALL_OW 313
35726: PUSH
35727: LD_INT 3
35729: LESS
35730: IFFALSE 35766
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35732: LD_INT 0
35734: PPUSH
35735: LD_INT 5
35737: PUSH
35738: LD_INT 8
35740: PUSH
35741: LD_INT 9
35743: PUSH
35744: EMPTY
35745: LIST
35746: LIST
35747: LIST
35748: PUSH
35749: LD_VAR 0 17
35753: ARRAY
35754: PPUSH
35755: LD_VAR 0 4
35759: PPUSH
35760: CALL_OW 380
35764: GO 35783
// PrepareHuman ( false , i , skill ) ;
35766: LD_INT 0
35768: PPUSH
35769: LD_VAR 0 8
35773: PPUSH
35774: LD_VAR 0 4
35778: PPUSH
35779: CALL_OW 380
// end else
35783: GO 35802
// PrepareHuman ( false , i , skill ) ;
35785: LD_INT 0
35787: PPUSH
35788: LD_VAR 0 8
35792: PPUSH
35793: LD_VAR 0 4
35797: PPUSH
35798: CALL_OW 380
// un := CreateHuman ;
35802: LD_ADDR_VAR 0 14
35806: PUSH
35807: CALL_OW 44
35811: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35812: LD_ADDR_VAR 0 7
35816: PUSH
35817: LD_VAR 0 7
35821: PPUSH
35822: LD_INT 1
35824: PPUSH
35825: LD_VAR 0 14
35829: PPUSH
35830: CALL_OW 2
35834: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
35835: LD_VAR 0 14
35839: PPUSH
35840: LD_VAR 0 12
35844: PUSH
35845: LD_INT 1
35847: ARRAY
35848: PPUSH
35849: CALL_OW 52
// end ;
35853: GO 35492
35855: POP
35856: POP
// end ;
35857: GO 34794
35859: POP
35860: POP
// result := result ^ buildings ;
35861: LD_ADDR_VAR 0 7
35865: PUSH
35866: LD_VAR 0 7
35870: PUSH
35871: LD_VAR 0 18
35875: ADD
35876: ST_TO_ADDR
// end else
35877: GO 36020
// begin for i = 1 to personel do
35879: LD_ADDR_VAR 0 8
35883: PUSH
35884: DOUBLE
35885: LD_INT 1
35887: DEC
35888: ST_TO_ADDR
35889: LD_VAR 0 6
35893: PUSH
35894: FOR_TO
35895: IFFALSE 36018
// begin if i > 4 then
35897: LD_VAR 0 8
35901: PUSH
35902: LD_INT 4
35904: GREATER
35905: IFFALSE 35909
// break ;
35907: GO 36018
// x := personel [ i ] ;
35909: LD_ADDR_VAR 0 13
35913: PUSH
35914: LD_VAR 0 6
35918: PUSH
35919: LD_VAR 0 8
35923: ARRAY
35924: ST_TO_ADDR
// if x = - 1 then
35925: LD_VAR 0 13
35929: PUSH
35930: LD_INT 1
35932: NEG
35933: EQUAL
35934: IFFALSE 35938
// continue ;
35936: GO 35894
// PrepareHuman ( false , i , skill ) ;
35938: LD_INT 0
35940: PPUSH
35941: LD_VAR 0 8
35945: PPUSH
35946: LD_VAR 0 4
35950: PPUSH
35951: CALL_OW 380
// un := CreateHuman ;
35955: LD_ADDR_VAR 0 14
35959: PUSH
35960: CALL_OW 44
35964: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35965: LD_VAR 0 14
35969: PPUSH
35970: LD_VAR 0 1
35974: PPUSH
35975: CALL_OW 250
35979: PPUSH
35980: LD_VAR 0 1
35984: PPUSH
35985: CALL_OW 251
35989: PPUSH
35990: LD_INT 10
35992: PPUSH
35993: LD_INT 0
35995: PPUSH
35996: CALL_OW 50
// result := result ^ un ;
36000: LD_ADDR_VAR 0 7
36004: PUSH
36005: LD_VAR 0 7
36009: PUSH
36010: LD_VAR 0 14
36014: ADD
36015: ST_TO_ADDR
// end ;
36016: GO 35894
36018: POP
36019: POP
// end ; end ;
36020: LD_VAR 0 7
36024: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
36025: LD_INT 0
36027: PPUSH
36028: PPUSH
36029: PPUSH
36030: PPUSH
36031: PPUSH
36032: PPUSH
36033: PPUSH
36034: PPUSH
36035: PPUSH
36036: PPUSH
36037: PPUSH
36038: PPUSH
36039: PPUSH
36040: PPUSH
36041: PPUSH
36042: PPUSH
// result := false ;
36043: LD_ADDR_VAR 0 3
36047: PUSH
36048: LD_INT 0
36050: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
36051: LD_VAR 0 1
36055: NOT
36056: PUSH
36057: LD_VAR 0 1
36061: PPUSH
36062: CALL_OW 266
36066: PUSH
36067: LD_INT 32
36069: PUSH
36070: LD_INT 33
36072: PUSH
36073: EMPTY
36074: LIST
36075: LIST
36076: IN
36077: NOT
36078: OR
36079: IFFALSE 36083
// exit ;
36081: GO 37192
// nat := GetNation ( tower ) ;
36083: LD_ADDR_VAR 0 12
36087: PUSH
36088: LD_VAR 0 1
36092: PPUSH
36093: CALL_OW 248
36097: ST_TO_ADDR
// side := GetSide ( tower ) ;
36098: LD_ADDR_VAR 0 16
36102: PUSH
36103: LD_VAR 0 1
36107: PPUSH
36108: CALL_OW 255
36112: ST_TO_ADDR
// x := GetX ( tower ) ;
36113: LD_ADDR_VAR 0 10
36117: PUSH
36118: LD_VAR 0 1
36122: PPUSH
36123: CALL_OW 250
36127: ST_TO_ADDR
// y := GetY ( tower ) ;
36128: LD_ADDR_VAR 0 11
36132: PUSH
36133: LD_VAR 0 1
36137: PPUSH
36138: CALL_OW 251
36142: ST_TO_ADDR
// if not x or not y then
36143: LD_VAR 0 10
36147: NOT
36148: PUSH
36149: LD_VAR 0 11
36153: NOT
36154: OR
36155: IFFALSE 36159
// exit ;
36157: GO 37192
// weapon := 0 ;
36159: LD_ADDR_VAR 0 18
36163: PUSH
36164: LD_INT 0
36166: ST_TO_ADDR
// fac_list := [ ] ;
36167: LD_ADDR_VAR 0 17
36171: PUSH
36172: EMPTY
36173: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
36174: LD_ADDR_VAR 0 6
36178: PUSH
36179: LD_VAR 0 1
36183: PPUSH
36184: CALL_OW 274
36188: PPUSH
36189: LD_VAR 0 2
36193: PPUSH
36194: LD_INT 0
36196: PPUSH
36197: CALL 33763 0 3
36201: PPUSH
36202: LD_INT 30
36204: PUSH
36205: LD_INT 3
36207: PUSH
36208: EMPTY
36209: LIST
36210: LIST
36211: PPUSH
36212: CALL_OW 72
36216: ST_TO_ADDR
// if not factories then
36217: LD_VAR 0 6
36221: NOT
36222: IFFALSE 36226
// exit ;
36224: GO 37192
// for i in factories do
36226: LD_ADDR_VAR 0 8
36230: PUSH
36231: LD_VAR 0 6
36235: PUSH
36236: FOR_IN
36237: IFFALSE 36262
// fac_list := fac_list union AvailableWeaponList ( i ) ;
36239: LD_ADDR_VAR 0 17
36243: PUSH
36244: LD_VAR 0 17
36248: PUSH
36249: LD_VAR 0 8
36253: PPUSH
36254: CALL_OW 478
36258: UNION
36259: ST_TO_ADDR
36260: GO 36236
36262: POP
36263: POP
// if not fac_list then
36264: LD_VAR 0 17
36268: NOT
36269: IFFALSE 36273
// exit ;
36271: GO 37192
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
36273: LD_ADDR_VAR 0 5
36277: PUSH
36278: LD_INT 4
36280: PUSH
36281: LD_INT 5
36283: PUSH
36284: LD_INT 9
36286: PUSH
36287: LD_INT 10
36289: PUSH
36290: LD_INT 6
36292: PUSH
36293: LD_INT 7
36295: PUSH
36296: LD_INT 11
36298: PUSH
36299: EMPTY
36300: LIST
36301: LIST
36302: LIST
36303: LIST
36304: LIST
36305: LIST
36306: LIST
36307: PUSH
36308: LD_INT 27
36310: PUSH
36311: LD_INT 28
36313: PUSH
36314: LD_INT 26
36316: PUSH
36317: LD_INT 30
36319: PUSH
36320: EMPTY
36321: LIST
36322: LIST
36323: LIST
36324: LIST
36325: PUSH
36326: LD_INT 43
36328: PUSH
36329: LD_INT 44
36331: PUSH
36332: LD_INT 46
36334: PUSH
36335: LD_INT 45
36337: PUSH
36338: LD_INT 47
36340: PUSH
36341: LD_INT 49
36343: PUSH
36344: EMPTY
36345: LIST
36346: LIST
36347: LIST
36348: LIST
36349: LIST
36350: LIST
36351: PUSH
36352: EMPTY
36353: LIST
36354: LIST
36355: LIST
36356: PUSH
36357: LD_VAR 0 12
36361: ARRAY
36362: ST_TO_ADDR
// list := list isect fac_list ;
36363: LD_ADDR_VAR 0 5
36367: PUSH
36368: LD_VAR 0 5
36372: PUSH
36373: LD_VAR 0 17
36377: ISECT
36378: ST_TO_ADDR
// if not list then
36379: LD_VAR 0 5
36383: NOT
36384: IFFALSE 36388
// exit ;
36386: GO 37192
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
36388: LD_VAR 0 12
36392: PUSH
36393: LD_INT 3
36395: EQUAL
36396: PUSH
36397: LD_INT 49
36399: PUSH
36400: LD_VAR 0 5
36404: IN
36405: AND
36406: PUSH
36407: LD_INT 31
36409: PPUSH
36410: LD_VAR 0 16
36414: PPUSH
36415: CALL_OW 321
36419: PUSH
36420: LD_INT 2
36422: EQUAL
36423: AND
36424: IFFALSE 36484
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
36426: LD_INT 22
36428: PUSH
36429: LD_VAR 0 16
36433: PUSH
36434: EMPTY
36435: LIST
36436: LIST
36437: PUSH
36438: LD_INT 35
36440: PUSH
36441: LD_INT 49
36443: PUSH
36444: EMPTY
36445: LIST
36446: LIST
36447: PUSH
36448: LD_INT 91
36450: PUSH
36451: LD_VAR 0 1
36455: PUSH
36456: LD_INT 10
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: LIST
36463: PUSH
36464: EMPTY
36465: LIST
36466: LIST
36467: LIST
36468: PPUSH
36469: CALL_OW 69
36473: NOT
36474: IFFALSE 36484
// weapon := ru_time_lapser ;
36476: LD_ADDR_VAR 0 18
36480: PUSH
36481: LD_INT 49
36483: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
36484: LD_VAR 0 12
36488: PUSH
36489: LD_INT 1
36491: PUSH
36492: LD_INT 2
36494: PUSH
36495: EMPTY
36496: LIST
36497: LIST
36498: IN
36499: PUSH
36500: LD_INT 11
36502: PUSH
36503: LD_VAR 0 5
36507: IN
36508: PUSH
36509: LD_INT 30
36511: PUSH
36512: LD_VAR 0 5
36516: IN
36517: OR
36518: AND
36519: PUSH
36520: LD_INT 6
36522: PPUSH
36523: LD_VAR 0 16
36527: PPUSH
36528: CALL_OW 321
36532: PUSH
36533: LD_INT 2
36535: EQUAL
36536: AND
36537: IFFALSE 36702
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
36539: LD_INT 22
36541: PUSH
36542: LD_VAR 0 16
36546: PUSH
36547: EMPTY
36548: LIST
36549: LIST
36550: PUSH
36551: LD_INT 2
36553: PUSH
36554: LD_INT 35
36556: PUSH
36557: LD_INT 11
36559: PUSH
36560: EMPTY
36561: LIST
36562: LIST
36563: PUSH
36564: LD_INT 35
36566: PUSH
36567: LD_INT 30
36569: PUSH
36570: EMPTY
36571: LIST
36572: LIST
36573: PUSH
36574: EMPTY
36575: LIST
36576: LIST
36577: LIST
36578: PUSH
36579: LD_INT 91
36581: PUSH
36582: LD_VAR 0 1
36586: PUSH
36587: LD_INT 18
36589: PUSH
36590: EMPTY
36591: LIST
36592: LIST
36593: LIST
36594: PUSH
36595: EMPTY
36596: LIST
36597: LIST
36598: LIST
36599: PPUSH
36600: CALL_OW 69
36604: NOT
36605: PUSH
36606: LD_INT 22
36608: PUSH
36609: LD_VAR 0 16
36613: PUSH
36614: EMPTY
36615: LIST
36616: LIST
36617: PUSH
36618: LD_INT 2
36620: PUSH
36621: LD_INT 30
36623: PUSH
36624: LD_INT 32
36626: PUSH
36627: EMPTY
36628: LIST
36629: LIST
36630: PUSH
36631: LD_INT 30
36633: PUSH
36634: LD_INT 33
36636: PUSH
36637: EMPTY
36638: LIST
36639: LIST
36640: PUSH
36641: EMPTY
36642: LIST
36643: LIST
36644: LIST
36645: PUSH
36646: LD_INT 91
36648: PUSH
36649: LD_VAR 0 1
36653: PUSH
36654: LD_INT 12
36656: PUSH
36657: EMPTY
36658: LIST
36659: LIST
36660: LIST
36661: PUSH
36662: EMPTY
36663: LIST
36664: LIST
36665: LIST
36666: PUSH
36667: EMPTY
36668: LIST
36669: PPUSH
36670: CALL_OW 69
36674: PUSH
36675: LD_INT 2
36677: GREATER
36678: AND
36679: IFFALSE 36702
// weapon := [ us_radar , ar_radar ] [ nat ] ;
36681: LD_ADDR_VAR 0 18
36685: PUSH
36686: LD_INT 11
36688: PUSH
36689: LD_INT 30
36691: PUSH
36692: EMPTY
36693: LIST
36694: LIST
36695: PUSH
36696: LD_VAR 0 12
36700: ARRAY
36701: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
36702: LD_VAR 0 18
36706: NOT
36707: PUSH
36708: LD_INT 40
36710: PPUSH
36711: LD_VAR 0 16
36715: PPUSH
36716: CALL_OW 321
36720: PUSH
36721: LD_INT 2
36723: EQUAL
36724: AND
36725: PUSH
36726: LD_INT 7
36728: PUSH
36729: LD_VAR 0 5
36733: IN
36734: PUSH
36735: LD_INT 28
36737: PUSH
36738: LD_VAR 0 5
36742: IN
36743: OR
36744: PUSH
36745: LD_INT 45
36747: PUSH
36748: LD_VAR 0 5
36752: IN
36753: OR
36754: AND
36755: IFFALSE 37009
// begin hex := GetHexInfo ( x , y ) ;
36757: LD_ADDR_VAR 0 4
36761: PUSH
36762: LD_VAR 0 10
36766: PPUSH
36767: LD_VAR 0 11
36771: PPUSH
36772: CALL_OW 546
36776: ST_TO_ADDR
// if hex [ 1 ] then
36777: LD_VAR 0 4
36781: PUSH
36782: LD_INT 1
36784: ARRAY
36785: IFFALSE 36789
// exit ;
36787: GO 37192
// height := hex [ 2 ] ;
36789: LD_ADDR_VAR 0 15
36793: PUSH
36794: LD_VAR 0 4
36798: PUSH
36799: LD_INT 2
36801: ARRAY
36802: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
36803: LD_ADDR_VAR 0 14
36807: PUSH
36808: LD_INT 0
36810: PUSH
36811: LD_INT 2
36813: PUSH
36814: LD_INT 3
36816: PUSH
36817: LD_INT 5
36819: PUSH
36820: EMPTY
36821: LIST
36822: LIST
36823: LIST
36824: LIST
36825: ST_TO_ADDR
// for i in tmp do
36826: LD_ADDR_VAR 0 8
36830: PUSH
36831: LD_VAR 0 14
36835: PUSH
36836: FOR_IN
36837: IFFALSE 37007
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
36839: LD_ADDR_VAR 0 9
36843: PUSH
36844: LD_VAR 0 10
36848: PPUSH
36849: LD_VAR 0 8
36853: PPUSH
36854: LD_INT 5
36856: PPUSH
36857: CALL_OW 272
36861: PUSH
36862: LD_VAR 0 11
36866: PPUSH
36867: LD_VAR 0 8
36871: PPUSH
36872: LD_INT 5
36874: PPUSH
36875: CALL_OW 273
36879: PUSH
36880: EMPTY
36881: LIST
36882: LIST
36883: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
36884: LD_VAR 0 9
36888: PUSH
36889: LD_INT 1
36891: ARRAY
36892: PPUSH
36893: LD_VAR 0 9
36897: PUSH
36898: LD_INT 2
36900: ARRAY
36901: PPUSH
36902: CALL_OW 488
36906: IFFALSE 37005
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
36908: LD_ADDR_VAR 0 4
36912: PUSH
36913: LD_VAR 0 9
36917: PUSH
36918: LD_INT 1
36920: ARRAY
36921: PPUSH
36922: LD_VAR 0 9
36926: PUSH
36927: LD_INT 2
36929: ARRAY
36930: PPUSH
36931: CALL_OW 546
36935: ST_TO_ADDR
// if hex [ 1 ] then
36936: LD_VAR 0 4
36940: PUSH
36941: LD_INT 1
36943: ARRAY
36944: IFFALSE 36948
// continue ;
36946: GO 36836
// h := hex [ 2 ] ;
36948: LD_ADDR_VAR 0 13
36952: PUSH
36953: LD_VAR 0 4
36957: PUSH
36958: LD_INT 2
36960: ARRAY
36961: ST_TO_ADDR
// if h + 7 < height then
36962: LD_VAR 0 13
36966: PUSH
36967: LD_INT 7
36969: PLUS
36970: PUSH
36971: LD_VAR 0 15
36975: LESS
36976: IFFALSE 37005
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
36978: LD_ADDR_VAR 0 18
36982: PUSH
36983: LD_INT 7
36985: PUSH
36986: LD_INT 28
36988: PUSH
36989: LD_INT 45
36991: PUSH
36992: EMPTY
36993: LIST
36994: LIST
36995: LIST
36996: PUSH
36997: LD_VAR 0 12
37001: ARRAY
37002: ST_TO_ADDR
// break ;
37003: GO 37007
// end ; end ; end ;
37005: GO 36836
37007: POP
37008: POP
// end ; if not weapon then
37009: LD_VAR 0 18
37013: NOT
37014: IFFALSE 37074
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
37016: LD_ADDR_VAR 0 5
37020: PUSH
37021: LD_VAR 0 5
37025: PUSH
37026: LD_INT 11
37028: PUSH
37029: LD_INT 30
37031: PUSH
37032: LD_INT 49
37034: PUSH
37035: EMPTY
37036: LIST
37037: LIST
37038: LIST
37039: DIFF
37040: ST_TO_ADDR
// if not list then
37041: LD_VAR 0 5
37045: NOT
37046: IFFALSE 37050
// exit ;
37048: GO 37192
// weapon := list [ rand ( 1 , list ) ] ;
37050: LD_ADDR_VAR 0 18
37054: PUSH
37055: LD_VAR 0 5
37059: PUSH
37060: LD_INT 1
37062: PPUSH
37063: LD_VAR 0 5
37067: PPUSH
37068: CALL_OW 12
37072: ARRAY
37073: ST_TO_ADDR
// end ; if weapon then
37074: LD_VAR 0 18
37078: IFFALSE 37192
// begin tmp := CostOfWeapon ( weapon ) ;
37080: LD_ADDR_VAR 0 14
37084: PUSH
37085: LD_VAR 0 18
37089: PPUSH
37090: CALL_OW 451
37094: ST_TO_ADDR
// j := GetBase ( tower ) ;
37095: LD_ADDR_VAR 0 9
37099: PUSH
37100: LD_VAR 0 1
37104: PPUSH
37105: CALL_OW 274
37109: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
37110: LD_VAR 0 9
37114: PPUSH
37115: LD_INT 1
37117: PPUSH
37118: CALL_OW 275
37122: PUSH
37123: LD_VAR 0 14
37127: PUSH
37128: LD_INT 1
37130: ARRAY
37131: GREATEREQUAL
37132: PUSH
37133: LD_VAR 0 9
37137: PPUSH
37138: LD_INT 2
37140: PPUSH
37141: CALL_OW 275
37145: PUSH
37146: LD_VAR 0 14
37150: PUSH
37151: LD_INT 2
37153: ARRAY
37154: GREATEREQUAL
37155: AND
37156: PUSH
37157: LD_VAR 0 9
37161: PPUSH
37162: LD_INT 3
37164: PPUSH
37165: CALL_OW 275
37169: PUSH
37170: LD_VAR 0 14
37174: PUSH
37175: LD_INT 3
37177: ARRAY
37178: GREATEREQUAL
37179: AND
37180: IFFALSE 37192
// result := weapon ;
37182: LD_ADDR_VAR 0 3
37186: PUSH
37187: LD_VAR 0 18
37191: ST_TO_ADDR
// end ; end ;
37192: LD_VAR 0 3
37196: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
37197: LD_INT 0
37199: PPUSH
37200: PPUSH
// result := true ;
37201: LD_ADDR_VAR 0 3
37205: PUSH
37206: LD_INT 1
37208: ST_TO_ADDR
// if array1 = array2 then
37209: LD_VAR 0 1
37213: PUSH
37214: LD_VAR 0 2
37218: EQUAL
37219: IFFALSE 37279
// begin for i = 1 to array1 do
37221: LD_ADDR_VAR 0 4
37225: PUSH
37226: DOUBLE
37227: LD_INT 1
37229: DEC
37230: ST_TO_ADDR
37231: LD_VAR 0 1
37235: PUSH
37236: FOR_TO
37237: IFFALSE 37275
// if array1 [ i ] <> array2 [ i ] then
37239: LD_VAR 0 1
37243: PUSH
37244: LD_VAR 0 4
37248: ARRAY
37249: PUSH
37250: LD_VAR 0 2
37254: PUSH
37255: LD_VAR 0 4
37259: ARRAY
37260: NONEQUAL
37261: IFFALSE 37273
// begin result := false ;
37263: LD_ADDR_VAR 0 3
37267: PUSH
37268: LD_INT 0
37270: ST_TO_ADDR
// break ;
37271: GO 37275
// end ;
37273: GO 37236
37275: POP
37276: POP
// end else
37277: GO 37287
// result := false ;
37279: LD_ADDR_VAR 0 3
37283: PUSH
37284: LD_INT 0
37286: ST_TO_ADDR
// end ;
37287: LD_VAR 0 3
37291: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
37292: LD_INT 0
37294: PPUSH
37295: PPUSH
// if not array1 or not array2 then
37296: LD_VAR 0 1
37300: NOT
37301: PUSH
37302: LD_VAR 0 2
37306: NOT
37307: OR
37308: IFFALSE 37312
// exit ;
37310: GO 37376
// result := true ;
37312: LD_ADDR_VAR 0 3
37316: PUSH
37317: LD_INT 1
37319: ST_TO_ADDR
// for i = 1 to array1 do
37320: LD_ADDR_VAR 0 4
37324: PUSH
37325: DOUBLE
37326: LD_INT 1
37328: DEC
37329: ST_TO_ADDR
37330: LD_VAR 0 1
37334: PUSH
37335: FOR_TO
37336: IFFALSE 37374
// if array1 [ i ] <> array2 [ i ] then
37338: LD_VAR 0 1
37342: PUSH
37343: LD_VAR 0 4
37347: ARRAY
37348: PUSH
37349: LD_VAR 0 2
37353: PUSH
37354: LD_VAR 0 4
37358: ARRAY
37359: NONEQUAL
37360: IFFALSE 37372
// begin result := false ;
37362: LD_ADDR_VAR 0 3
37366: PUSH
37367: LD_INT 0
37369: ST_TO_ADDR
// break ;
37370: GO 37374
// end ;
37372: GO 37335
37374: POP
37375: POP
// end ;
37376: LD_VAR 0 3
37380: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
37381: LD_INT 0
37383: PPUSH
37384: PPUSH
37385: PPUSH
// pom := GetBase ( fac ) ;
37386: LD_ADDR_VAR 0 5
37390: PUSH
37391: LD_VAR 0 1
37395: PPUSH
37396: CALL_OW 274
37400: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
37401: LD_ADDR_VAR 0 4
37405: PUSH
37406: LD_VAR 0 2
37410: PUSH
37411: LD_INT 1
37413: ARRAY
37414: PPUSH
37415: LD_VAR 0 2
37419: PUSH
37420: LD_INT 2
37422: ARRAY
37423: PPUSH
37424: LD_VAR 0 2
37428: PUSH
37429: LD_INT 3
37431: ARRAY
37432: PPUSH
37433: LD_VAR 0 2
37437: PUSH
37438: LD_INT 4
37440: ARRAY
37441: PPUSH
37442: CALL_OW 449
37446: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37447: LD_ADDR_VAR 0 3
37451: PUSH
37452: LD_VAR 0 5
37456: PPUSH
37457: LD_INT 1
37459: PPUSH
37460: CALL_OW 275
37464: PUSH
37465: LD_VAR 0 4
37469: PUSH
37470: LD_INT 1
37472: ARRAY
37473: GREATEREQUAL
37474: PUSH
37475: LD_VAR 0 5
37479: PPUSH
37480: LD_INT 2
37482: PPUSH
37483: CALL_OW 275
37487: PUSH
37488: LD_VAR 0 4
37492: PUSH
37493: LD_INT 2
37495: ARRAY
37496: GREATEREQUAL
37497: AND
37498: PUSH
37499: LD_VAR 0 5
37503: PPUSH
37504: LD_INT 3
37506: PPUSH
37507: CALL_OW 275
37511: PUSH
37512: LD_VAR 0 4
37516: PUSH
37517: LD_INT 3
37519: ARRAY
37520: GREATEREQUAL
37521: AND
37522: ST_TO_ADDR
// end ;
37523: LD_VAR 0 3
37527: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
37528: LD_INT 0
37530: PPUSH
37531: PPUSH
37532: PPUSH
37533: PPUSH
// pom := GetBase ( building ) ;
37534: LD_ADDR_VAR 0 3
37538: PUSH
37539: LD_VAR 0 1
37543: PPUSH
37544: CALL_OW 274
37548: ST_TO_ADDR
// if not pom then
37549: LD_VAR 0 3
37553: NOT
37554: IFFALSE 37558
// exit ;
37556: GO 37728
// btype := GetBType ( building ) ;
37558: LD_ADDR_VAR 0 5
37562: PUSH
37563: LD_VAR 0 1
37567: PPUSH
37568: CALL_OW 266
37572: ST_TO_ADDR
// if btype = b_armoury then
37573: LD_VAR 0 5
37577: PUSH
37578: LD_INT 4
37580: EQUAL
37581: IFFALSE 37591
// btype := b_barracks ;
37583: LD_ADDR_VAR 0 5
37587: PUSH
37588: LD_INT 5
37590: ST_TO_ADDR
// if btype = b_depot then
37591: LD_VAR 0 5
37595: PUSH
37596: LD_INT 0
37598: EQUAL
37599: IFFALSE 37609
// btype := b_warehouse ;
37601: LD_ADDR_VAR 0 5
37605: PUSH
37606: LD_INT 1
37608: ST_TO_ADDR
// if btype = b_workshop then
37609: LD_VAR 0 5
37613: PUSH
37614: LD_INT 2
37616: EQUAL
37617: IFFALSE 37627
// btype := b_factory ;
37619: LD_ADDR_VAR 0 5
37623: PUSH
37624: LD_INT 3
37626: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37627: LD_ADDR_VAR 0 4
37631: PUSH
37632: LD_VAR 0 5
37636: PPUSH
37637: LD_VAR 0 1
37641: PPUSH
37642: CALL_OW 248
37646: PPUSH
37647: CALL_OW 450
37651: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37652: LD_ADDR_VAR 0 2
37656: PUSH
37657: LD_VAR 0 3
37661: PPUSH
37662: LD_INT 1
37664: PPUSH
37665: CALL_OW 275
37669: PUSH
37670: LD_VAR 0 4
37674: PUSH
37675: LD_INT 1
37677: ARRAY
37678: GREATEREQUAL
37679: PUSH
37680: LD_VAR 0 3
37684: PPUSH
37685: LD_INT 2
37687: PPUSH
37688: CALL_OW 275
37692: PUSH
37693: LD_VAR 0 4
37697: PUSH
37698: LD_INT 2
37700: ARRAY
37701: GREATEREQUAL
37702: AND
37703: PUSH
37704: LD_VAR 0 3
37708: PPUSH
37709: LD_INT 3
37711: PPUSH
37712: CALL_OW 275
37716: PUSH
37717: LD_VAR 0 4
37721: PUSH
37722: LD_INT 3
37724: ARRAY
37725: GREATEREQUAL
37726: AND
37727: ST_TO_ADDR
// end ;
37728: LD_VAR 0 2
37732: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
37733: LD_INT 0
37735: PPUSH
37736: PPUSH
37737: PPUSH
// pom := GetBase ( building ) ;
37738: LD_ADDR_VAR 0 4
37742: PUSH
37743: LD_VAR 0 1
37747: PPUSH
37748: CALL_OW 274
37752: ST_TO_ADDR
// if not pom then
37753: LD_VAR 0 4
37757: NOT
37758: IFFALSE 37762
// exit ;
37760: GO 37863
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37762: LD_ADDR_VAR 0 5
37766: PUSH
37767: LD_VAR 0 2
37771: PPUSH
37772: LD_VAR 0 1
37776: PPUSH
37777: CALL_OW 248
37781: PPUSH
37782: CALL_OW 450
37786: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37787: LD_ADDR_VAR 0 3
37791: PUSH
37792: LD_VAR 0 4
37796: PPUSH
37797: LD_INT 1
37799: PPUSH
37800: CALL_OW 275
37804: PUSH
37805: LD_VAR 0 5
37809: PUSH
37810: LD_INT 1
37812: ARRAY
37813: GREATEREQUAL
37814: PUSH
37815: LD_VAR 0 4
37819: PPUSH
37820: LD_INT 2
37822: PPUSH
37823: CALL_OW 275
37827: PUSH
37828: LD_VAR 0 5
37832: PUSH
37833: LD_INT 2
37835: ARRAY
37836: GREATEREQUAL
37837: AND
37838: PUSH
37839: LD_VAR 0 4
37843: PPUSH
37844: LD_INT 3
37846: PPUSH
37847: CALL_OW 275
37851: PUSH
37852: LD_VAR 0 5
37856: PUSH
37857: LD_INT 3
37859: ARRAY
37860: GREATEREQUAL
37861: AND
37862: ST_TO_ADDR
// end ;
37863: LD_VAR 0 3
37867: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
37868: LD_INT 0
37870: PPUSH
37871: PPUSH
37872: PPUSH
37873: PPUSH
37874: PPUSH
37875: PPUSH
37876: PPUSH
37877: PPUSH
37878: PPUSH
37879: PPUSH
37880: PPUSH
// result := false ;
37881: LD_ADDR_VAR 0 8
37885: PUSH
37886: LD_INT 0
37888: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
37889: LD_VAR 0 5
37893: NOT
37894: PUSH
37895: LD_VAR 0 1
37899: NOT
37900: OR
37901: PUSH
37902: LD_VAR 0 2
37906: NOT
37907: OR
37908: PUSH
37909: LD_VAR 0 3
37913: NOT
37914: OR
37915: IFFALSE 37919
// exit ;
37917: GO 38733
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
37919: LD_ADDR_VAR 0 14
37923: PUSH
37924: LD_VAR 0 1
37928: PPUSH
37929: LD_VAR 0 2
37933: PPUSH
37934: LD_VAR 0 3
37938: PPUSH
37939: LD_VAR 0 4
37943: PPUSH
37944: LD_VAR 0 5
37948: PUSH
37949: LD_INT 1
37951: ARRAY
37952: PPUSH
37953: CALL_OW 248
37957: PPUSH
37958: LD_INT 0
37960: PPUSH
37961: CALL 39970 0 6
37965: ST_TO_ADDR
// if not hexes then
37966: LD_VAR 0 14
37970: NOT
37971: IFFALSE 37975
// exit ;
37973: GO 38733
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
37975: LD_ADDR_VAR 0 17
37979: PUSH
37980: LD_VAR 0 5
37984: PPUSH
37985: LD_INT 22
37987: PUSH
37988: LD_VAR 0 13
37992: PPUSH
37993: CALL_OW 255
37997: PUSH
37998: EMPTY
37999: LIST
38000: LIST
38001: PUSH
38002: LD_INT 2
38004: PUSH
38005: LD_INT 30
38007: PUSH
38008: LD_INT 0
38010: PUSH
38011: EMPTY
38012: LIST
38013: LIST
38014: PUSH
38015: LD_INT 30
38017: PUSH
38018: LD_INT 1
38020: PUSH
38021: EMPTY
38022: LIST
38023: LIST
38024: PUSH
38025: EMPTY
38026: LIST
38027: LIST
38028: LIST
38029: PUSH
38030: EMPTY
38031: LIST
38032: LIST
38033: PPUSH
38034: CALL_OW 72
38038: ST_TO_ADDR
// for i = 1 to hexes do
38039: LD_ADDR_VAR 0 9
38043: PUSH
38044: DOUBLE
38045: LD_INT 1
38047: DEC
38048: ST_TO_ADDR
38049: LD_VAR 0 14
38053: PUSH
38054: FOR_TO
38055: IFFALSE 38731
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38057: LD_ADDR_VAR 0 13
38061: PUSH
38062: LD_VAR 0 14
38066: PUSH
38067: LD_VAR 0 9
38071: ARRAY
38072: PUSH
38073: LD_INT 1
38075: ARRAY
38076: PPUSH
38077: LD_VAR 0 14
38081: PUSH
38082: LD_VAR 0 9
38086: ARRAY
38087: PUSH
38088: LD_INT 2
38090: ARRAY
38091: PPUSH
38092: CALL_OW 428
38096: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
38097: LD_VAR 0 14
38101: PUSH
38102: LD_VAR 0 9
38106: ARRAY
38107: PUSH
38108: LD_INT 1
38110: ARRAY
38111: PPUSH
38112: LD_VAR 0 14
38116: PUSH
38117: LD_VAR 0 9
38121: ARRAY
38122: PUSH
38123: LD_INT 2
38125: ARRAY
38126: PPUSH
38127: CALL_OW 351
38131: PUSH
38132: LD_VAR 0 14
38136: PUSH
38137: LD_VAR 0 9
38141: ARRAY
38142: PUSH
38143: LD_INT 1
38145: ARRAY
38146: PPUSH
38147: LD_VAR 0 14
38151: PUSH
38152: LD_VAR 0 9
38156: ARRAY
38157: PUSH
38158: LD_INT 2
38160: ARRAY
38161: PPUSH
38162: CALL_OW 488
38166: NOT
38167: OR
38168: PUSH
38169: LD_VAR 0 13
38173: PPUSH
38174: CALL_OW 247
38178: PUSH
38179: LD_INT 3
38181: EQUAL
38182: OR
38183: IFFALSE 38189
// exit ;
38185: POP
38186: POP
38187: GO 38733
// if not tmp then
38189: LD_VAR 0 13
38193: NOT
38194: IFFALSE 38198
// continue ;
38196: GO 38054
// result := true ;
38198: LD_ADDR_VAR 0 8
38202: PUSH
38203: LD_INT 1
38205: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
38206: LD_VAR 0 6
38210: PUSH
38211: LD_VAR 0 13
38215: PPUSH
38216: CALL_OW 247
38220: PUSH
38221: LD_INT 2
38223: EQUAL
38224: AND
38225: PUSH
38226: LD_VAR 0 13
38230: PPUSH
38231: CALL_OW 263
38235: PUSH
38236: LD_INT 1
38238: EQUAL
38239: AND
38240: IFFALSE 38404
// begin if IsDrivenBy ( tmp ) then
38242: LD_VAR 0 13
38246: PPUSH
38247: CALL_OW 311
38251: IFFALSE 38255
// continue ;
38253: GO 38054
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
38255: LD_VAR 0 6
38259: PPUSH
38260: LD_INT 3
38262: PUSH
38263: LD_INT 60
38265: PUSH
38266: EMPTY
38267: LIST
38268: PUSH
38269: EMPTY
38270: LIST
38271: LIST
38272: PUSH
38273: LD_INT 3
38275: PUSH
38276: LD_INT 55
38278: PUSH
38279: EMPTY
38280: LIST
38281: PUSH
38282: EMPTY
38283: LIST
38284: LIST
38285: PUSH
38286: EMPTY
38287: LIST
38288: LIST
38289: PPUSH
38290: CALL_OW 72
38294: IFFALSE 38402
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
38296: LD_ADDR_VAR 0 18
38300: PUSH
38301: LD_VAR 0 6
38305: PPUSH
38306: LD_INT 3
38308: PUSH
38309: LD_INT 60
38311: PUSH
38312: EMPTY
38313: LIST
38314: PUSH
38315: EMPTY
38316: LIST
38317: LIST
38318: PUSH
38319: LD_INT 3
38321: PUSH
38322: LD_INT 55
38324: PUSH
38325: EMPTY
38326: LIST
38327: PUSH
38328: EMPTY
38329: LIST
38330: LIST
38331: PUSH
38332: EMPTY
38333: LIST
38334: LIST
38335: PPUSH
38336: CALL_OW 72
38340: PUSH
38341: LD_INT 1
38343: ARRAY
38344: ST_TO_ADDR
// if IsInUnit ( driver ) then
38345: LD_VAR 0 18
38349: PPUSH
38350: CALL_OW 310
38354: IFFALSE 38365
// ComExit ( driver ) ;
38356: LD_VAR 0 18
38360: PPUSH
38361: CALL 63675 0 1
// AddComEnterUnit ( driver , tmp ) ;
38365: LD_VAR 0 18
38369: PPUSH
38370: LD_VAR 0 13
38374: PPUSH
38375: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
38379: LD_VAR 0 18
38383: PPUSH
38384: LD_VAR 0 7
38388: PPUSH
38389: CALL_OW 173
// AddComExitVehicle ( driver ) ;
38393: LD_VAR 0 18
38397: PPUSH
38398: CALL_OW 181
// end ; continue ;
38402: GO 38054
// end ; if not cleaners or not tmp in cleaners then
38404: LD_VAR 0 6
38408: NOT
38409: PUSH
38410: LD_VAR 0 13
38414: PUSH
38415: LD_VAR 0 6
38419: IN
38420: NOT
38421: OR
38422: IFFALSE 38729
// begin if dep then
38424: LD_VAR 0 17
38428: IFFALSE 38564
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
38430: LD_ADDR_VAR 0 16
38434: PUSH
38435: LD_VAR 0 17
38439: PUSH
38440: LD_INT 1
38442: ARRAY
38443: PPUSH
38444: CALL_OW 250
38448: PPUSH
38449: LD_VAR 0 17
38453: PUSH
38454: LD_INT 1
38456: ARRAY
38457: PPUSH
38458: CALL_OW 254
38462: PPUSH
38463: LD_INT 5
38465: PPUSH
38466: CALL_OW 272
38470: PUSH
38471: LD_VAR 0 17
38475: PUSH
38476: LD_INT 1
38478: ARRAY
38479: PPUSH
38480: CALL_OW 251
38484: PPUSH
38485: LD_VAR 0 17
38489: PUSH
38490: LD_INT 1
38492: ARRAY
38493: PPUSH
38494: CALL_OW 254
38498: PPUSH
38499: LD_INT 5
38501: PPUSH
38502: CALL_OW 273
38506: PUSH
38507: EMPTY
38508: LIST
38509: LIST
38510: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
38511: LD_VAR 0 16
38515: PUSH
38516: LD_INT 1
38518: ARRAY
38519: PPUSH
38520: LD_VAR 0 16
38524: PUSH
38525: LD_INT 2
38527: ARRAY
38528: PPUSH
38529: CALL_OW 488
38533: IFFALSE 38564
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
38535: LD_VAR 0 13
38539: PPUSH
38540: LD_VAR 0 16
38544: PUSH
38545: LD_INT 1
38547: ARRAY
38548: PPUSH
38549: LD_VAR 0 16
38553: PUSH
38554: LD_INT 2
38556: ARRAY
38557: PPUSH
38558: CALL_OW 111
// continue ;
38562: GO 38054
// end ; end ; r := GetDir ( tmp ) ;
38564: LD_ADDR_VAR 0 15
38568: PUSH
38569: LD_VAR 0 13
38573: PPUSH
38574: CALL_OW 254
38578: ST_TO_ADDR
// if r = 5 then
38579: LD_VAR 0 15
38583: PUSH
38584: LD_INT 5
38586: EQUAL
38587: IFFALSE 38597
// r := 0 ;
38589: LD_ADDR_VAR 0 15
38593: PUSH
38594: LD_INT 0
38596: ST_TO_ADDR
// for j = r to 5 do
38597: LD_ADDR_VAR 0 10
38601: PUSH
38602: DOUBLE
38603: LD_VAR 0 15
38607: DEC
38608: ST_TO_ADDR
38609: LD_INT 5
38611: PUSH
38612: FOR_TO
38613: IFFALSE 38727
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
38615: LD_ADDR_VAR 0 11
38619: PUSH
38620: LD_VAR 0 13
38624: PPUSH
38625: CALL_OW 250
38629: PPUSH
38630: LD_VAR 0 10
38634: PPUSH
38635: LD_INT 2
38637: PPUSH
38638: CALL_OW 272
38642: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
38643: LD_ADDR_VAR 0 12
38647: PUSH
38648: LD_VAR 0 13
38652: PPUSH
38653: CALL_OW 251
38657: PPUSH
38658: LD_VAR 0 10
38662: PPUSH
38663: LD_INT 2
38665: PPUSH
38666: CALL_OW 273
38670: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
38671: LD_VAR 0 11
38675: PPUSH
38676: LD_VAR 0 12
38680: PPUSH
38681: CALL_OW 488
38685: PUSH
38686: LD_VAR 0 11
38690: PPUSH
38691: LD_VAR 0 12
38695: PPUSH
38696: CALL_OW 428
38700: NOT
38701: AND
38702: IFFALSE 38725
// begin ComMoveXY ( tmp , _x , _y ) ;
38704: LD_VAR 0 13
38708: PPUSH
38709: LD_VAR 0 11
38713: PPUSH
38714: LD_VAR 0 12
38718: PPUSH
38719: CALL_OW 111
// break ;
38723: GO 38727
// end ; end ;
38725: GO 38612
38727: POP
38728: POP
// end ; end ;
38729: GO 38054
38731: POP
38732: POP
// end ;
38733: LD_VAR 0 8
38737: RET
// export function BuildingTechInvented ( side , btype ) ; begin
38738: LD_INT 0
38740: PPUSH
// result := true ;
38741: LD_ADDR_VAR 0 3
38745: PUSH
38746: LD_INT 1
38748: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
38749: LD_VAR 0 2
38753: PUSH
38754: LD_INT 24
38756: DOUBLE
38757: EQUAL
38758: IFTRUE 38768
38760: LD_INT 33
38762: DOUBLE
38763: EQUAL
38764: IFTRUE 38768
38766: GO 38793
38768: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
38769: LD_ADDR_VAR 0 3
38773: PUSH
38774: LD_INT 32
38776: PPUSH
38777: LD_VAR 0 1
38781: PPUSH
38782: CALL_OW 321
38786: PUSH
38787: LD_INT 2
38789: EQUAL
38790: ST_TO_ADDR
38791: GO 39113
38793: LD_INT 20
38795: DOUBLE
38796: EQUAL
38797: IFTRUE 38801
38799: GO 38826
38801: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
38802: LD_ADDR_VAR 0 3
38806: PUSH
38807: LD_INT 6
38809: PPUSH
38810: LD_VAR 0 1
38814: PPUSH
38815: CALL_OW 321
38819: PUSH
38820: LD_INT 2
38822: EQUAL
38823: ST_TO_ADDR
38824: GO 39113
38826: LD_INT 22
38828: DOUBLE
38829: EQUAL
38830: IFTRUE 38840
38832: LD_INT 36
38834: DOUBLE
38835: EQUAL
38836: IFTRUE 38840
38838: GO 38865
38840: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
38841: LD_ADDR_VAR 0 3
38845: PUSH
38846: LD_INT 15
38848: PPUSH
38849: LD_VAR 0 1
38853: PPUSH
38854: CALL_OW 321
38858: PUSH
38859: LD_INT 2
38861: EQUAL
38862: ST_TO_ADDR
38863: GO 39113
38865: LD_INT 30
38867: DOUBLE
38868: EQUAL
38869: IFTRUE 38873
38871: GO 38898
38873: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
38874: LD_ADDR_VAR 0 3
38878: PUSH
38879: LD_INT 20
38881: PPUSH
38882: LD_VAR 0 1
38886: PPUSH
38887: CALL_OW 321
38891: PUSH
38892: LD_INT 2
38894: EQUAL
38895: ST_TO_ADDR
38896: GO 39113
38898: LD_INT 28
38900: DOUBLE
38901: EQUAL
38902: IFTRUE 38912
38904: LD_INT 21
38906: DOUBLE
38907: EQUAL
38908: IFTRUE 38912
38910: GO 38937
38912: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
38913: LD_ADDR_VAR 0 3
38917: PUSH
38918: LD_INT 21
38920: PPUSH
38921: LD_VAR 0 1
38925: PPUSH
38926: CALL_OW 321
38930: PUSH
38931: LD_INT 2
38933: EQUAL
38934: ST_TO_ADDR
38935: GO 39113
38937: LD_INT 16
38939: DOUBLE
38940: EQUAL
38941: IFTRUE 38945
38943: GO 38972
38945: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
38946: LD_ADDR_VAR 0 3
38950: PUSH
38951: LD_EXP 108
38955: PPUSH
38956: LD_VAR 0 1
38960: PPUSH
38961: CALL_OW 321
38965: PUSH
38966: LD_INT 2
38968: EQUAL
38969: ST_TO_ADDR
38970: GO 39113
38972: LD_INT 19
38974: DOUBLE
38975: EQUAL
38976: IFTRUE 38986
38978: LD_INT 23
38980: DOUBLE
38981: EQUAL
38982: IFTRUE 38986
38984: GO 39013
38986: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
38987: LD_ADDR_VAR 0 3
38991: PUSH
38992: LD_EXP 107
38996: PPUSH
38997: LD_VAR 0 1
39001: PPUSH
39002: CALL_OW 321
39006: PUSH
39007: LD_INT 2
39009: EQUAL
39010: ST_TO_ADDR
39011: GO 39113
39013: LD_INT 17
39015: DOUBLE
39016: EQUAL
39017: IFTRUE 39021
39019: GO 39046
39021: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
39022: LD_ADDR_VAR 0 3
39026: PUSH
39027: LD_INT 39
39029: PPUSH
39030: LD_VAR 0 1
39034: PPUSH
39035: CALL_OW 321
39039: PUSH
39040: LD_INT 2
39042: EQUAL
39043: ST_TO_ADDR
39044: GO 39113
39046: LD_INT 18
39048: DOUBLE
39049: EQUAL
39050: IFTRUE 39054
39052: GO 39079
39054: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
39055: LD_ADDR_VAR 0 3
39059: PUSH
39060: LD_INT 40
39062: PPUSH
39063: LD_VAR 0 1
39067: PPUSH
39068: CALL_OW 321
39072: PUSH
39073: LD_INT 2
39075: EQUAL
39076: ST_TO_ADDR
39077: GO 39113
39079: LD_INT 27
39081: DOUBLE
39082: EQUAL
39083: IFTRUE 39087
39085: GO 39112
39087: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
39088: LD_ADDR_VAR 0 3
39092: PUSH
39093: LD_INT 35
39095: PPUSH
39096: LD_VAR 0 1
39100: PPUSH
39101: CALL_OW 321
39105: PUSH
39106: LD_INT 2
39108: EQUAL
39109: ST_TO_ADDR
39110: GO 39113
39112: POP
// end ;
39113: LD_VAR 0 3
39117: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
39118: LD_INT 0
39120: PPUSH
39121: PPUSH
39122: PPUSH
39123: PPUSH
39124: PPUSH
39125: PPUSH
39126: PPUSH
39127: PPUSH
39128: PPUSH
39129: PPUSH
39130: PPUSH
// result := false ;
39131: LD_ADDR_VAR 0 6
39135: PUSH
39136: LD_INT 0
39138: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
39139: LD_VAR 0 1
39143: NOT
39144: PUSH
39145: LD_VAR 0 1
39149: PPUSH
39150: CALL_OW 266
39154: PUSH
39155: LD_INT 0
39157: PUSH
39158: LD_INT 1
39160: PUSH
39161: EMPTY
39162: LIST
39163: LIST
39164: IN
39165: NOT
39166: OR
39167: PUSH
39168: LD_VAR 0 2
39172: NOT
39173: OR
39174: PUSH
39175: LD_VAR 0 5
39179: PUSH
39180: LD_INT 0
39182: PUSH
39183: LD_INT 1
39185: PUSH
39186: LD_INT 2
39188: PUSH
39189: LD_INT 3
39191: PUSH
39192: LD_INT 4
39194: PUSH
39195: LD_INT 5
39197: PUSH
39198: EMPTY
39199: LIST
39200: LIST
39201: LIST
39202: LIST
39203: LIST
39204: LIST
39205: IN
39206: NOT
39207: OR
39208: PUSH
39209: LD_VAR 0 3
39213: PPUSH
39214: LD_VAR 0 4
39218: PPUSH
39219: CALL_OW 488
39223: NOT
39224: OR
39225: IFFALSE 39229
// exit ;
39227: GO 39965
// side := GetSide ( depot ) ;
39229: LD_ADDR_VAR 0 9
39233: PUSH
39234: LD_VAR 0 1
39238: PPUSH
39239: CALL_OW 255
39243: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
39244: LD_VAR 0 9
39248: PPUSH
39249: LD_VAR 0 2
39253: PPUSH
39254: CALL 38738 0 2
39258: NOT
39259: IFFALSE 39263
// exit ;
39261: GO 39965
// pom := GetBase ( depot ) ;
39263: LD_ADDR_VAR 0 10
39267: PUSH
39268: LD_VAR 0 1
39272: PPUSH
39273: CALL_OW 274
39277: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
39278: LD_ADDR_VAR 0 11
39282: PUSH
39283: LD_VAR 0 2
39287: PPUSH
39288: LD_VAR 0 1
39292: PPUSH
39293: CALL_OW 248
39297: PPUSH
39298: CALL_OW 450
39302: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
39303: LD_VAR 0 10
39307: PPUSH
39308: LD_INT 1
39310: PPUSH
39311: CALL_OW 275
39315: PUSH
39316: LD_VAR 0 11
39320: PUSH
39321: LD_INT 1
39323: ARRAY
39324: GREATEREQUAL
39325: PUSH
39326: LD_VAR 0 10
39330: PPUSH
39331: LD_INT 2
39333: PPUSH
39334: CALL_OW 275
39338: PUSH
39339: LD_VAR 0 11
39343: PUSH
39344: LD_INT 2
39346: ARRAY
39347: GREATEREQUAL
39348: AND
39349: PUSH
39350: LD_VAR 0 10
39354: PPUSH
39355: LD_INT 3
39357: PPUSH
39358: CALL_OW 275
39362: PUSH
39363: LD_VAR 0 11
39367: PUSH
39368: LD_INT 3
39370: ARRAY
39371: GREATEREQUAL
39372: AND
39373: NOT
39374: IFFALSE 39378
// exit ;
39376: GO 39965
// if GetBType ( depot ) = b_depot then
39378: LD_VAR 0 1
39382: PPUSH
39383: CALL_OW 266
39387: PUSH
39388: LD_INT 0
39390: EQUAL
39391: IFFALSE 39403
// dist := 28 else
39393: LD_ADDR_VAR 0 14
39397: PUSH
39398: LD_INT 28
39400: ST_TO_ADDR
39401: GO 39411
// dist := 36 ;
39403: LD_ADDR_VAR 0 14
39407: PUSH
39408: LD_INT 36
39410: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
39411: LD_VAR 0 1
39415: PPUSH
39416: LD_VAR 0 3
39420: PPUSH
39421: LD_VAR 0 4
39425: PPUSH
39426: CALL_OW 297
39430: PUSH
39431: LD_VAR 0 14
39435: GREATER
39436: IFFALSE 39440
// exit ;
39438: GO 39965
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
39440: LD_ADDR_VAR 0 12
39444: PUSH
39445: LD_VAR 0 2
39449: PPUSH
39450: LD_VAR 0 3
39454: PPUSH
39455: LD_VAR 0 4
39459: PPUSH
39460: LD_VAR 0 5
39464: PPUSH
39465: LD_VAR 0 1
39469: PPUSH
39470: CALL_OW 248
39474: PPUSH
39475: LD_INT 0
39477: PPUSH
39478: CALL 39970 0 6
39482: ST_TO_ADDR
// if not hexes then
39483: LD_VAR 0 12
39487: NOT
39488: IFFALSE 39492
// exit ;
39490: GO 39965
// hex := GetHexInfo ( x , y ) ;
39492: LD_ADDR_VAR 0 15
39496: PUSH
39497: LD_VAR 0 3
39501: PPUSH
39502: LD_VAR 0 4
39506: PPUSH
39507: CALL_OW 546
39511: ST_TO_ADDR
// if hex [ 1 ] then
39512: LD_VAR 0 15
39516: PUSH
39517: LD_INT 1
39519: ARRAY
39520: IFFALSE 39524
// exit ;
39522: GO 39965
// height := hex [ 2 ] ;
39524: LD_ADDR_VAR 0 13
39528: PUSH
39529: LD_VAR 0 15
39533: PUSH
39534: LD_INT 2
39536: ARRAY
39537: ST_TO_ADDR
// for i = 1 to hexes do
39538: LD_ADDR_VAR 0 7
39542: PUSH
39543: DOUBLE
39544: LD_INT 1
39546: DEC
39547: ST_TO_ADDR
39548: LD_VAR 0 12
39552: PUSH
39553: FOR_TO
39554: IFFALSE 39884
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
39556: LD_VAR 0 12
39560: PUSH
39561: LD_VAR 0 7
39565: ARRAY
39566: PUSH
39567: LD_INT 1
39569: ARRAY
39570: PPUSH
39571: LD_VAR 0 12
39575: PUSH
39576: LD_VAR 0 7
39580: ARRAY
39581: PUSH
39582: LD_INT 2
39584: ARRAY
39585: PPUSH
39586: CALL_OW 488
39590: NOT
39591: PUSH
39592: LD_VAR 0 12
39596: PUSH
39597: LD_VAR 0 7
39601: ARRAY
39602: PUSH
39603: LD_INT 1
39605: ARRAY
39606: PPUSH
39607: LD_VAR 0 12
39611: PUSH
39612: LD_VAR 0 7
39616: ARRAY
39617: PUSH
39618: LD_INT 2
39620: ARRAY
39621: PPUSH
39622: CALL_OW 428
39626: PUSH
39627: LD_INT 0
39629: GREATER
39630: OR
39631: PUSH
39632: LD_VAR 0 12
39636: PUSH
39637: LD_VAR 0 7
39641: ARRAY
39642: PUSH
39643: LD_INT 1
39645: ARRAY
39646: PPUSH
39647: LD_VAR 0 12
39651: PUSH
39652: LD_VAR 0 7
39656: ARRAY
39657: PUSH
39658: LD_INT 2
39660: ARRAY
39661: PPUSH
39662: CALL_OW 351
39666: OR
39667: IFFALSE 39673
// exit ;
39669: POP
39670: POP
39671: GO 39965
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39673: LD_ADDR_VAR 0 8
39677: PUSH
39678: LD_VAR 0 12
39682: PUSH
39683: LD_VAR 0 7
39687: ARRAY
39688: PUSH
39689: LD_INT 1
39691: ARRAY
39692: PPUSH
39693: LD_VAR 0 12
39697: PUSH
39698: LD_VAR 0 7
39702: ARRAY
39703: PUSH
39704: LD_INT 2
39706: ARRAY
39707: PPUSH
39708: CALL_OW 546
39712: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
39713: LD_VAR 0 8
39717: PUSH
39718: LD_INT 1
39720: ARRAY
39721: PUSH
39722: LD_VAR 0 8
39726: PUSH
39727: LD_INT 2
39729: ARRAY
39730: PUSH
39731: LD_VAR 0 13
39735: PUSH
39736: LD_INT 2
39738: PLUS
39739: GREATER
39740: OR
39741: PUSH
39742: LD_VAR 0 8
39746: PUSH
39747: LD_INT 2
39749: ARRAY
39750: PUSH
39751: LD_VAR 0 13
39755: PUSH
39756: LD_INT 2
39758: MINUS
39759: LESS
39760: OR
39761: PUSH
39762: LD_VAR 0 8
39766: PUSH
39767: LD_INT 3
39769: ARRAY
39770: PUSH
39771: LD_INT 0
39773: PUSH
39774: LD_INT 8
39776: PUSH
39777: LD_INT 9
39779: PUSH
39780: LD_INT 10
39782: PUSH
39783: LD_INT 11
39785: PUSH
39786: LD_INT 12
39788: PUSH
39789: LD_INT 13
39791: PUSH
39792: LD_INT 16
39794: PUSH
39795: LD_INT 17
39797: PUSH
39798: LD_INT 18
39800: PUSH
39801: LD_INT 19
39803: PUSH
39804: LD_INT 20
39806: PUSH
39807: LD_INT 21
39809: PUSH
39810: EMPTY
39811: LIST
39812: LIST
39813: LIST
39814: LIST
39815: LIST
39816: LIST
39817: LIST
39818: LIST
39819: LIST
39820: LIST
39821: LIST
39822: LIST
39823: LIST
39824: IN
39825: NOT
39826: OR
39827: PUSH
39828: LD_VAR 0 8
39832: PUSH
39833: LD_INT 5
39835: ARRAY
39836: NOT
39837: OR
39838: PUSH
39839: LD_VAR 0 8
39843: PUSH
39844: LD_INT 6
39846: ARRAY
39847: PUSH
39848: LD_INT 1
39850: PUSH
39851: LD_INT 2
39853: PUSH
39854: LD_INT 7
39856: PUSH
39857: LD_INT 9
39859: PUSH
39860: LD_INT 10
39862: PUSH
39863: LD_INT 11
39865: PUSH
39866: EMPTY
39867: LIST
39868: LIST
39869: LIST
39870: LIST
39871: LIST
39872: LIST
39873: IN
39874: NOT
39875: OR
39876: IFFALSE 39882
// exit ;
39878: POP
39879: POP
39880: GO 39965
// end ;
39882: GO 39553
39884: POP
39885: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
39886: LD_VAR 0 9
39890: PPUSH
39891: LD_VAR 0 3
39895: PPUSH
39896: LD_VAR 0 4
39900: PPUSH
39901: LD_INT 20
39903: PPUSH
39904: CALL 31911 0 4
39908: PUSH
39909: LD_INT 4
39911: ARRAY
39912: IFFALSE 39916
// exit ;
39914: GO 39965
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
39916: LD_VAR 0 2
39920: PUSH
39921: LD_INT 29
39923: PUSH
39924: LD_INT 30
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: IN
39931: PUSH
39932: LD_VAR 0 3
39936: PPUSH
39937: LD_VAR 0 4
39941: PPUSH
39942: LD_VAR 0 9
39946: PPUSH
39947: CALL_OW 440
39951: NOT
39952: AND
39953: IFFALSE 39957
// exit ;
39955: GO 39965
// result := true ;
39957: LD_ADDR_VAR 0 6
39961: PUSH
39962: LD_INT 1
39964: ST_TO_ADDR
// end ;
39965: LD_VAR 0 6
39969: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
39970: LD_INT 0
39972: PPUSH
39973: PPUSH
39974: PPUSH
39975: PPUSH
39976: PPUSH
39977: PPUSH
39978: PPUSH
39979: PPUSH
39980: PPUSH
39981: PPUSH
39982: PPUSH
39983: PPUSH
39984: PPUSH
39985: PPUSH
39986: PPUSH
39987: PPUSH
39988: PPUSH
39989: PPUSH
39990: PPUSH
39991: PPUSH
39992: PPUSH
39993: PPUSH
39994: PPUSH
39995: PPUSH
39996: PPUSH
39997: PPUSH
39998: PPUSH
39999: PPUSH
40000: PPUSH
40001: PPUSH
40002: PPUSH
40003: PPUSH
40004: PPUSH
40005: PPUSH
40006: PPUSH
40007: PPUSH
40008: PPUSH
40009: PPUSH
40010: PPUSH
40011: PPUSH
40012: PPUSH
40013: PPUSH
40014: PPUSH
40015: PPUSH
40016: PPUSH
40017: PPUSH
40018: PPUSH
40019: PPUSH
40020: PPUSH
40021: PPUSH
40022: PPUSH
40023: PPUSH
40024: PPUSH
40025: PPUSH
40026: PPUSH
40027: PPUSH
40028: PPUSH
40029: PPUSH
// result = [ ] ;
40030: LD_ADDR_VAR 0 7
40034: PUSH
40035: EMPTY
40036: ST_TO_ADDR
// temp_list = [ ] ;
40037: LD_ADDR_VAR 0 9
40041: PUSH
40042: EMPTY
40043: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
40044: LD_VAR 0 4
40048: PUSH
40049: LD_INT 0
40051: PUSH
40052: LD_INT 1
40054: PUSH
40055: LD_INT 2
40057: PUSH
40058: LD_INT 3
40060: PUSH
40061: LD_INT 4
40063: PUSH
40064: LD_INT 5
40066: PUSH
40067: EMPTY
40068: LIST
40069: LIST
40070: LIST
40071: LIST
40072: LIST
40073: LIST
40074: IN
40075: NOT
40076: PUSH
40077: LD_VAR 0 1
40081: PUSH
40082: LD_INT 0
40084: PUSH
40085: LD_INT 1
40087: PUSH
40088: EMPTY
40089: LIST
40090: LIST
40091: IN
40092: PUSH
40093: LD_VAR 0 5
40097: PUSH
40098: LD_INT 1
40100: PUSH
40101: LD_INT 2
40103: PUSH
40104: LD_INT 3
40106: PUSH
40107: EMPTY
40108: LIST
40109: LIST
40110: LIST
40111: IN
40112: NOT
40113: AND
40114: OR
40115: IFFALSE 40119
// exit ;
40117: GO 58510
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
40119: LD_VAR 0 1
40123: PUSH
40124: LD_INT 6
40126: PUSH
40127: LD_INT 7
40129: PUSH
40130: LD_INT 8
40132: PUSH
40133: LD_INT 13
40135: PUSH
40136: LD_INT 12
40138: PUSH
40139: LD_INT 15
40141: PUSH
40142: LD_INT 11
40144: PUSH
40145: LD_INT 14
40147: PUSH
40148: LD_INT 10
40150: PUSH
40151: EMPTY
40152: LIST
40153: LIST
40154: LIST
40155: LIST
40156: LIST
40157: LIST
40158: LIST
40159: LIST
40160: LIST
40161: IN
40162: IFFALSE 40172
// btype = b_lab ;
40164: LD_ADDR_VAR 0 1
40168: PUSH
40169: LD_INT 6
40171: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
40172: LD_VAR 0 6
40176: PUSH
40177: LD_INT 0
40179: PUSH
40180: LD_INT 1
40182: PUSH
40183: LD_INT 2
40185: PUSH
40186: EMPTY
40187: LIST
40188: LIST
40189: LIST
40190: IN
40191: NOT
40192: PUSH
40193: LD_VAR 0 1
40197: PUSH
40198: LD_INT 0
40200: PUSH
40201: LD_INT 1
40203: PUSH
40204: LD_INT 2
40206: PUSH
40207: LD_INT 3
40209: PUSH
40210: LD_INT 6
40212: PUSH
40213: LD_INT 36
40215: PUSH
40216: LD_INT 4
40218: PUSH
40219: LD_INT 5
40221: PUSH
40222: LD_INT 31
40224: PUSH
40225: LD_INT 32
40227: PUSH
40228: LD_INT 33
40230: PUSH
40231: EMPTY
40232: LIST
40233: LIST
40234: LIST
40235: LIST
40236: LIST
40237: LIST
40238: LIST
40239: LIST
40240: LIST
40241: LIST
40242: LIST
40243: IN
40244: NOT
40245: PUSH
40246: LD_VAR 0 6
40250: PUSH
40251: LD_INT 1
40253: EQUAL
40254: AND
40255: OR
40256: PUSH
40257: LD_VAR 0 1
40261: PUSH
40262: LD_INT 2
40264: PUSH
40265: LD_INT 3
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: IN
40272: NOT
40273: PUSH
40274: LD_VAR 0 6
40278: PUSH
40279: LD_INT 2
40281: EQUAL
40282: AND
40283: OR
40284: IFFALSE 40294
// mode = 0 ;
40286: LD_ADDR_VAR 0 6
40290: PUSH
40291: LD_INT 0
40293: ST_TO_ADDR
// case mode of 0 :
40294: LD_VAR 0 6
40298: PUSH
40299: LD_INT 0
40301: DOUBLE
40302: EQUAL
40303: IFTRUE 40307
40305: GO 51760
40307: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40308: LD_ADDR_VAR 0 11
40312: PUSH
40313: LD_INT 0
40315: PUSH
40316: LD_INT 0
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: PUSH
40323: LD_INT 0
40325: PUSH
40326: LD_INT 1
40328: NEG
40329: PUSH
40330: EMPTY
40331: LIST
40332: LIST
40333: PUSH
40334: LD_INT 1
40336: PUSH
40337: LD_INT 0
40339: PUSH
40340: EMPTY
40341: LIST
40342: LIST
40343: PUSH
40344: LD_INT 1
40346: PUSH
40347: LD_INT 1
40349: PUSH
40350: EMPTY
40351: LIST
40352: LIST
40353: PUSH
40354: LD_INT 0
40356: PUSH
40357: LD_INT 1
40359: PUSH
40360: EMPTY
40361: LIST
40362: LIST
40363: PUSH
40364: LD_INT 1
40366: NEG
40367: PUSH
40368: LD_INT 0
40370: PUSH
40371: EMPTY
40372: LIST
40373: LIST
40374: PUSH
40375: LD_INT 1
40377: NEG
40378: PUSH
40379: LD_INT 1
40381: NEG
40382: PUSH
40383: EMPTY
40384: LIST
40385: LIST
40386: PUSH
40387: LD_INT 1
40389: NEG
40390: PUSH
40391: LD_INT 2
40393: NEG
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: PUSH
40399: LD_INT 0
40401: PUSH
40402: LD_INT 2
40404: NEG
40405: PUSH
40406: EMPTY
40407: LIST
40408: LIST
40409: PUSH
40410: LD_INT 1
40412: PUSH
40413: LD_INT 1
40415: NEG
40416: PUSH
40417: EMPTY
40418: LIST
40419: LIST
40420: PUSH
40421: LD_INT 1
40423: PUSH
40424: LD_INT 2
40426: PUSH
40427: EMPTY
40428: LIST
40429: LIST
40430: PUSH
40431: LD_INT 0
40433: PUSH
40434: LD_INT 2
40436: PUSH
40437: EMPTY
40438: LIST
40439: LIST
40440: PUSH
40441: LD_INT 1
40443: NEG
40444: PUSH
40445: LD_INT 1
40447: PUSH
40448: EMPTY
40449: LIST
40450: LIST
40451: PUSH
40452: LD_INT 1
40454: PUSH
40455: LD_INT 3
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: PUSH
40462: LD_INT 0
40464: PUSH
40465: LD_INT 3
40467: PUSH
40468: EMPTY
40469: LIST
40470: LIST
40471: PUSH
40472: LD_INT 1
40474: NEG
40475: PUSH
40476: LD_INT 2
40478: PUSH
40479: EMPTY
40480: LIST
40481: LIST
40482: PUSH
40483: EMPTY
40484: LIST
40485: LIST
40486: LIST
40487: LIST
40488: LIST
40489: LIST
40490: LIST
40491: LIST
40492: LIST
40493: LIST
40494: LIST
40495: LIST
40496: LIST
40497: LIST
40498: LIST
40499: LIST
40500: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40501: LD_ADDR_VAR 0 12
40505: PUSH
40506: LD_INT 0
40508: PUSH
40509: LD_INT 0
40511: PUSH
40512: EMPTY
40513: LIST
40514: LIST
40515: PUSH
40516: LD_INT 0
40518: PUSH
40519: LD_INT 1
40521: NEG
40522: PUSH
40523: EMPTY
40524: LIST
40525: LIST
40526: PUSH
40527: LD_INT 1
40529: PUSH
40530: LD_INT 0
40532: PUSH
40533: EMPTY
40534: LIST
40535: LIST
40536: PUSH
40537: LD_INT 1
40539: PUSH
40540: LD_INT 1
40542: PUSH
40543: EMPTY
40544: LIST
40545: LIST
40546: PUSH
40547: LD_INT 0
40549: PUSH
40550: LD_INT 1
40552: PUSH
40553: EMPTY
40554: LIST
40555: LIST
40556: PUSH
40557: LD_INT 1
40559: NEG
40560: PUSH
40561: LD_INT 0
40563: PUSH
40564: EMPTY
40565: LIST
40566: LIST
40567: PUSH
40568: LD_INT 1
40570: NEG
40571: PUSH
40572: LD_INT 1
40574: NEG
40575: PUSH
40576: EMPTY
40577: LIST
40578: LIST
40579: PUSH
40580: LD_INT 1
40582: PUSH
40583: LD_INT 1
40585: NEG
40586: PUSH
40587: EMPTY
40588: LIST
40589: LIST
40590: PUSH
40591: LD_INT 2
40593: PUSH
40594: LD_INT 0
40596: PUSH
40597: EMPTY
40598: LIST
40599: LIST
40600: PUSH
40601: LD_INT 2
40603: PUSH
40604: LD_INT 1
40606: PUSH
40607: EMPTY
40608: LIST
40609: LIST
40610: PUSH
40611: LD_INT 1
40613: NEG
40614: PUSH
40615: LD_INT 1
40617: PUSH
40618: EMPTY
40619: LIST
40620: LIST
40621: PUSH
40622: LD_INT 2
40624: NEG
40625: PUSH
40626: LD_INT 0
40628: PUSH
40629: EMPTY
40630: LIST
40631: LIST
40632: PUSH
40633: LD_INT 2
40635: NEG
40636: PUSH
40637: LD_INT 1
40639: NEG
40640: PUSH
40641: EMPTY
40642: LIST
40643: LIST
40644: PUSH
40645: LD_INT 2
40647: NEG
40648: PUSH
40649: LD_INT 1
40651: PUSH
40652: EMPTY
40653: LIST
40654: LIST
40655: PUSH
40656: LD_INT 3
40658: NEG
40659: PUSH
40660: LD_INT 0
40662: PUSH
40663: EMPTY
40664: LIST
40665: LIST
40666: PUSH
40667: LD_INT 3
40669: NEG
40670: PUSH
40671: LD_INT 1
40673: NEG
40674: PUSH
40675: EMPTY
40676: LIST
40677: LIST
40678: PUSH
40679: EMPTY
40680: LIST
40681: LIST
40682: LIST
40683: LIST
40684: LIST
40685: LIST
40686: LIST
40687: LIST
40688: LIST
40689: LIST
40690: LIST
40691: LIST
40692: LIST
40693: LIST
40694: LIST
40695: LIST
40696: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40697: LD_ADDR_VAR 0 13
40701: PUSH
40702: LD_INT 0
40704: PUSH
40705: LD_INT 0
40707: PUSH
40708: EMPTY
40709: LIST
40710: LIST
40711: PUSH
40712: LD_INT 0
40714: PUSH
40715: LD_INT 1
40717: NEG
40718: PUSH
40719: EMPTY
40720: LIST
40721: LIST
40722: PUSH
40723: LD_INT 1
40725: PUSH
40726: LD_INT 0
40728: PUSH
40729: EMPTY
40730: LIST
40731: LIST
40732: PUSH
40733: LD_INT 1
40735: PUSH
40736: LD_INT 1
40738: PUSH
40739: EMPTY
40740: LIST
40741: LIST
40742: PUSH
40743: LD_INT 0
40745: PUSH
40746: LD_INT 1
40748: PUSH
40749: EMPTY
40750: LIST
40751: LIST
40752: PUSH
40753: LD_INT 1
40755: NEG
40756: PUSH
40757: LD_INT 0
40759: PUSH
40760: EMPTY
40761: LIST
40762: LIST
40763: PUSH
40764: LD_INT 1
40766: NEG
40767: PUSH
40768: LD_INT 1
40770: NEG
40771: PUSH
40772: EMPTY
40773: LIST
40774: LIST
40775: PUSH
40776: LD_INT 1
40778: NEG
40779: PUSH
40780: LD_INT 2
40782: NEG
40783: PUSH
40784: EMPTY
40785: LIST
40786: LIST
40787: PUSH
40788: LD_INT 2
40790: PUSH
40791: LD_INT 1
40793: PUSH
40794: EMPTY
40795: LIST
40796: LIST
40797: PUSH
40798: LD_INT 2
40800: PUSH
40801: LD_INT 2
40803: PUSH
40804: EMPTY
40805: LIST
40806: LIST
40807: PUSH
40808: LD_INT 1
40810: PUSH
40811: LD_INT 2
40813: PUSH
40814: EMPTY
40815: LIST
40816: LIST
40817: PUSH
40818: LD_INT 2
40820: NEG
40821: PUSH
40822: LD_INT 1
40824: NEG
40825: PUSH
40826: EMPTY
40827: LIST
40828: LIST
40829: PUSH
40830: LD_INT 2
40832: NEG
40833: PUSH
40834: LD_INT 2
40836: NEG
40837: PUSH
40838: EMPTY
40839: LIST
40840: LIST
40841: PUSH
40842: LD_INT 2
40844: NEG
40845: PUSH
40846: LD_INT 3
40848: NEG
40849: PUSH
40850: EMPTY
40851: LIST
40852: LIST
40853: PUSH
40854: LD_INT 3
40856: NEG
40857: PUSH
40858: LD_INT 2
40860: NEG
40861: PUSH
40862: EMPTY
40863: LIST
40864: LIST
40865: PUSH
40866: LD_INT 3
40868: NEG
40869: PUSH
40870: LD_INT 3
40872: NEG
40873: PUSH
40874: EMPTY
40875: LIST
40876: LIST
40877: PUSH
40878: EMPTY
40879: LIST
40880: LIST
40881: LIST
40882: LIST
40883: LIST
40884: LIST
40885: LIST
40886: LIST
40887: LIST
40888: LIST
40889: LIST
40890: LIST
40891: LIST
40892: LIST
40893: LIST
40894: LIST
40895: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40896: LD_ADDR_VAR 0 14
40900: PUSH
40901: LD_INT 0
40903: PUSH
40904: LD_INT 0
40906: PUSH
40907: EMPTY
40908: LIST
40909: LIST
40910: PUSH
40911: LD_INT 0
40913: PUSH
40914: LD_INT 1
40916: NEG
40917: PUSH
40918: EMPTY
40919: LIST
40920: LIST
40921: PUSH
40922: LD_INT 1
40924: PUSH
40925: LD_INT 0
40927: PUSH
40928: EMPTY
40929: LIST
40930: LIST
40931: PUSH
40932: LD_INT 1
40934: PUSH
40935: LD_INT 1
40937: PUSH
40938: EMPTY
40939: LIST
40940: LIST
40941: PUSH
40942: LD_INT 0
40944: PUSH
40945: LD_INT 1
40947: PUSH
40948: EMPTY
40949: LIST
40950: LIST
40951: PUSH
40952: LD_INT 1
40954: NEG
40955: PUSH
40956: LD_INT 0
40958: PUSH
40959: EMPTY
40960: LIST
40961: LIST
40962: PUSH
40963: LD_INT 1
40965: NEG
40966: PUSH
40967: LD_INT 1
40969: NEG
40970: PUSH
40971: EMPTY
40972: LIST
40973: LIST
40974: PUSH
40975: LD_INT 1
40977: NEG
40978: PUSH
40979: LD_INT 2
40981: NEG
40982: PUSH
40983: EMPTY
40984: LIST
40985: LIST
40986: PUSH
40987: LD_INT 0
40989: PUSH
40990: LD_INT 2
40992: NEG
40993: PUSH
40994: EMPTY
40995: LIST
40996: LIST
40997: PUSH
40998: LD_INT 1
41000: PUSH
41001: LD_INT 1
41003: NEG
41004: PUSH
41005: EMPTY
41006: LIST
41007: LIST
41008: PUSH
41009: LD_INT 1
41011: PUSH
41012: LD_INT 2
41014: PUSH
41015: EMPTY
41016: LIST
41017: LIST
41018: PUSH
41019: LD_INT 0
41021: PUSH
41022: LD_INT 2
41024: PUSH
41025: EMPTY
41026: LIST
41027: LIST
41028: PUSH
41029: LD_INT 1
41031: NEG
41032: PUSH
41033: LD_INT 1
41035: PUSH
41036: EMPTY
41037: LIST
41038: LIST
41039: PUSH
41040: LD_INT 1
41042: NEG
41043: PUSH
41044: LD_INT 3
41046: NEG
41047: PUSH
41048: EMPTY
41049: LIST
41050: LIST
41051: PUSH
41052: LD_INT 0
41054: PUSH
41055: LD_INT 3
41057: NEG
41058: PUSH
41059: EMPTY
41060: LIST
41061: LIST
41062: PUSH
41063: LD_INT 1
41065: PUSH
41066: LD_INT 2
41068: NEG
41069: PUSH
41070: EMPTY
41071: LIST
41072: LIST
41073: PUSH
41074: EMPTY
41075: LIST
41076: LIST
41077: LIST
41078: LIST
41079: LIST
41080: LIST
41081: LIST
41082: LIST
41083: LIST
41084: LIST
41085: LIST
41086: LIST
41087: LIST
41088: LIST
41089: LIST
41090: LIST
41091: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41092: LD_ADDR_VAR 0 15
41096: PUSH
41097: LD_INT 0
41099: PUSH
41100: LD_INT 0
41102: PUSH
41103: EMPTY
41104: LIST
41105: LIST
41106: PUSH
41107: LD_INT 0
41109: PUSH
41110: LD_INT 1
41112: NEG
41113: PUSH
41114: EMPTY
41115: LIST
41116: LIST
41117: PUSH
41118: LD_INT 1
41120: PUSH
41121: LD_INT 0
41123: PUSH
41124: EMPTY
41125: LIST
41126: LIST
41127: PUSH
41128: LD_INT 1
41130: PUSH
41131: LD_INT 1
41133: PUSH
41134: EMPTY
41135: LIST
41136: LIST
41137: PUSH
41138: LD_INT 0
41140: PUSH
41141: LD_INT 1
41143: PUSH
41144: EMPTY
41145: LIST
41146: LIST
41147: PUSH
41148: LD_INT 1
41150: NEG
41151: PUSH
41152: LD_INT 0
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: PUSH
41159: LD_INT 1
41161: NEG
41162: PUSH
41163: LD_INT 1
41165: NEG
41166: PUSH
41167: EMPTY
41168: LIST
41169: LIST
41170: PUSH
41171: LD_INT 1
41173: PUSH
41174: LD_INT 1
41176: NEG
41177: PUSH
41178: EMPTY
41179: LIST
41180: LIST
41181: PUSH
41182: LD_INT 2
41184: PUSH
41185: LD_INT 0
41187: PUSH
41188: EMPTY
41189: LIST
41190: LIST
41191: PUSH
41192: LD_INT 2
41194: PUSH
41195: LD_INT 1
41197: PUSH
41198: EMPTY
41199: LIST
41200: LIST
41201: PUSH
41202: LD_INT 1
41204: NEG
41205: PUSH
41206: LD_INT 1
41208: PUSH
41209: EMPTY
41210: LIST
41211: LIST
41212: PUSH
41213: LD_INT 2
41215: NEG
41216: PUSH
41217: LD_INT 0
41219: PUSH
41220: EMPTY
41221: LIST
41222: LIST
41223: PUSH
41224: LD_INT 2
41226: NEG
41227: PUSH
41228: LD_INT 1
41230: NEG
41231: PUSH
41232: EMPTY
41233: LIST
41234: LIST
41235: PUSH
41236: LD_INT 2
41238: PUSH
41239: LD_INT 1
41241: NEG
41242: PUSH
41243: EMPTY
41244: LIST
41245: LIST
41246: PUSH
41247: LD_INT 3
41249: PUSH
41250: LD_INT 0
41252: PUSH
41253: EMPTY
41254: LIST
41255: LIST
41256: PUSH
41257: LD_INT 3
41259: PUSH
41260: LD_INT 1
41262: PUSH
41263: EMPTY
41264: LIST
41265: LIST
41266: PUSH
41267: EMPTY
41268: LIST
41269: LIST
41270: LIST
41271: LIST
41272: LIST
41273: LIST
41274: LIST
41275: LIST
41276: LIST
41277: LIST
41278: LIST
41279: LIST
41280: LIST
41281: LIST
41282: LIST
41283: LIST
41284: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41285: LD_ADDR_VAR 0 16
41289: PUSH
41290: LD_INT 0
41292: PUSH
41293: LD_INT 0
41295: PUSH
41296: EMPTY
41297: LIST
41298: LIST
41299: PUSH
41300: LD_INT 0
41302: PUSH
41303: LD_INT 1
41305: NEG
41306: PUSH
41307: EMPTY
41308: LIST
41309: LIST
41310: PUSH
41311: LD_INT 1
41313: PUSH
41314: LD_INT 0
41316: PUSH
41317: EMPTY
41318: LIST
41319: LIST
41320: PUSH
41321: LD_INT 1
41323: PUSH
41324: LD_INT 1
41326: PUSH
41327: EMPTY
41328: LIST
41329: LIST
41330: PUSH
41331: LD_INT 0
41333: PUSH
41334: LD_INT 1
41336: PUSH
41337: EMPTY
41338: LIST
41339: LIST
41340: PUSH
41341: LD_INT 1
41343: NEG
41344: PUSH
41345: LD_INT 0
41347: PUSH
41348: EMPTY
41349: LIST
41350: LIST
41351: PUSH
41352: LD_INT 1
41354: NEG
41355: PUSH
41356: LD_INT 1
41358: NEG
41359: PUSH
41360: EMPTY
41361: LIST
41362: LIST
41363: PUSH
41364: LD_INT 1
41366: NEG
41367: PUSH
41368: LD_INT 2
41370: NEG
41371: PUSH
41372: EMPTY
41373: LIST
41374: LIST
41375: PUSH
41376: LD_INT 2
41378: PUSH
41379: LD_INT 1
41381: PUSH
41382: EMPTY
41383: LIST
41384: LIST
41385: PUSH
41386: LD_INT 2
41388: PUSH
41389: LD_INT 2
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: PUSH
41396: LD_INT 1
41398: PUSH
41399: LD_INT 2
41401: PUSH
41402: EMPTY
41403: LIST
41404: LIST
41405: PUSH
41406: LD_INT 2
41408: NEG
41409: PUSH
41410: LD_INT 1
41412: NEG
41413: PUSH
41414: EMPTY
41415: LIST
41416: LIST
41417: PUSH
41418: LD_INT 2
41420: NEG
41421: PUSH
41422: LD_INT 2
41424: NEG
41425: PUSH
41426: EMPTY
41427: LIST
41428: LIST
41429: PUSH
41430: LD_INT 3
41432: PUSH
41433: LD_INT 2
41435: PUSH
41436: EMPTY
41437: LIST
41438: LIST
41439: PUSH
41440: LD_INT 3
41442: PUSH
41443: LD_INT 3
41445: PUSH
41446: EMPTY
41447: LIST
41448: LIST
41449: PUSH
41450: LD_INT 2
41452: PUSH
41453: LD_INT 3
41455: PUSH
41456: EMPTY
41457: LIST
41458: LIST
41459: PUSH
41460: EMPTY
41461: LIST
41462: LIST
41463: LIST
41464: LIST
41465: LIST
41466: LIST
41467: LIST
41468: LIST
41469: LIST
41470: LIST
41471: LIST
41472: LIST
41473: LIST
41474: LIST
41475: LIST
41476: LIST
41477: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41478: LD_ADDR_VAR 0 17
41482: PUSH
41483: LD_INT 0
41485: PUSH
41486: LD_INT 0
41488: PUSH
41489: EMPTY
41490: LIST
41491: LIST
41492: PUSH
41493: LD_INT 0
41495: PUSH
41496: LD_INT 1
41498: NEG
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: PUSH
41504: LD_INT 1
41506: PUSH
41507: LD_INT 0
41509: PUSH
41510: EMPTY
41511: LIST
41512: LIST
41513: PUSH
41514: LD_INT 1
41516: PUSH
41517: LD_INT 1
41519: PUSH
41520: EMPTY
41521: LIST
41522: LIST
41523: PUSH
41524: LD_INT 0
41526: PUSH
41527: LD_INT 1
41529: PUSH
41530: EMPTY
41531: LIST
41532: LIST
41533: PUSH
41534: LD_INT 1
41536: NEG
41537: PUSH
41538: LD_INT 0
41540: PUSH
41541: EMPTY
41542: LIST
41543: LIST
41544: PUSH
41545: LD_INT 1
41547: NEG
41548: PUSH
41549: LD_INT 1
41551: NEG
41552: PUSH
41553: EMPTY
41554: LIST
41555: LIST
41556: PUSH
41557: LD_INT 1
41559: NEG
41560: PUSH
41561: LD_INT 2
41563: NEG
41564: PUSH
41565: EMPTY
41566: LIST
41567: LIST
41568: PUSH
41569: LD_INT 0
41571: PUSH
41572: LD_INT 2
41574: NEG
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PUSH
41580: LD_INT 1
41582: PUSH
41583: LD_INT 1
41585: NEG
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: PUSH
41591: LD_INT 2
41593: PUSH
41594: LD_INT 0
41596: PUSH
41597: EMPTY
41598: LIST
41599: LIST
41600: PUSH
41601: LD_INT 2
41603: PUSH
41604: LD_INT 1
41606: PUSH
41607: EMPTY
41608: LIST
41609: LIST
41610: PUSH
41611: LD_INT 2
41613: PUSH
41614: LD_INT 2
41616: PUSH
41617: EMPTY
41618: LIST
41619: LIST
41620: PUSH
41621: LD_INT 1
41623: PUSH
41624: LD_INT 2
41626: PUSH
41627: EMPTY
41628: LIST
41629: LIST
41630: PUSH
41631: LD_INT 0
41633: PUSH
41634: LD_INT 2
41636: PUSH
41637: EMPTY
41638: LIST
41639: LIST
41640: PUSH
41641: LD_INT 1
41643: NEG
41644: PUSH
41645: LD_INT 1
41647: PUSH
41648: EMPTY
41649: LIST
41650: LIST
41651: PUSH
41652: LD_INT 2
41654: NEG
41655: PUSH
41656: LD_INT 0
41658: PUSH
41659: EMPTY
41660: LIST
41661: LIST
41662: PUSH
41663: LD_INT 2
41665: NEG
41666: PUSH
41667: LD_INT 1
41669: NEG
41670: PUSH
41671: EMPTY
41672: LIST
41673: LIST
41674: PUSH
41675: LD_INT 2
41677: NEG
41678: PUSH
41679: LD_INT 2
41681: NEG
41682: PUSH
41683: EMPTY
41684: LIST
41685: LIST
41686: PUSH
41687: EMPTY
41688: LIST
41689: LIST
41690: LIST
41691: LIST
41692: LIST
41693: LIST
41694: LIST
41695: LIST
41696: LIST
41697: LIST
41698: LIST
41699: LIST
41700: LIST
41701: LIST
41702: LIST
41703: LIST
41704: LIST
41705: LIST
41706: LIST
41707: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41708: LD_ADDR_VAR 0 18
41712: PUSH
41713: LD_INT 0
41715: PUSH
41716: LD_INT 0
41718: PUSH
41719: EMPTY
41720: LIST
41721: LIST
41722: PUSH
41723: LD_INT 0
41725: PUSH
41726: LD_INT 1
41728: NEG
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: PUSH
41734: LD_INT 1
41736: PUSH
41737: LD_INT 0
41739: PUSH
41740: EMPTY
41741: LIST
41742: LIST
41743: PUSH
41744: LD_INT 1
41746: PUSH
41747: LD_INT 1
41749: PUSH
41750: EMPTY
41751: LIST
41752: LIST
41753: PUSH
41754: LD_INT 0
41756: PUSH
41757: LD_INT 1
41759: PUSH
41760: EMPTY
41761: LIST
41762: LIST
41763: PUSH
41764: LD_INT 1
41766: NEG
41767: PUSH
41768: LD_INT 0
41770: PUSH
41771: EMPTY
41772: LIST
41773: LIST
41774: PUSH
41775: LD_INT 1
41777: NEG
41778: PUSH
41779: LD_INT 1
41781: NEG
41782: PUSH
41783: EMPTY
41784: LIST
41785: LIST
41786: PUSH
41787: LD_INT 1
41789: NEG
41790: PUSH
41791: LD_INT 2
41793: NEG
41794: PUSH
41795: EMPTY
41796: LIST
41797: LIST
41798: PUSH
41799: LD_INT 0
41801: PUSH
41802: LD_INT 2
41804: NEG
41805: PUSH
41806: EMPTY
41807: LIST
41808: LIST
41809: PUSH
41810: LD_INT 1
41812: PUSH
41813: LD_INT 1
41815: NEG
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: PUSH
41821: LD_INT 2
41823: PUSH
41824: LD_INT 0
41826: PUSH
41827: EMPTY
41828: LIST
41829: LIST
41830: PUSH
41831: LD_INT 2
41833: PUSH
41834: LD_INT 1
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: PUSH
41841: LD_INT 2
41843: PUSH
41844: LD_INT 2
41846: PUSH
41847: EMPTY
41848: LIST
41849: LIST
41850: PUSH
41851: LD_INT 1
41853: PUSH
41854: LD_INT 2
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: PUSH
41861: LD_INT 0
41863: PUSH
41864: LD_INT 2
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: PUSH
41871: LD_INT 1
41873: NEG
41874: PUSH
41875: LD_INT 1
41877: PUSH
41878: EMPTY
41879: LIST
41880: LIST
41881: PUSH
41882: LD_INT 2
41884: NEG
41885: PUSH
41886: LD_INT 0
41888: PUSH
41889: EMPTY
41890: LIST
41891: LIST
41892: PUSH
41893: LD_INT 2
41895: NEG
41896: PUSH
41897: LD_INT 1
41899: NEG
41900: PUSH
41901: EMPTY
41902: LIST
41903: LIST
41904: PUSH
41905: LD_INT 2
41907: NEG
41908: PUSH
41909: LD_INT 2
41911: NEG
41912: PUSH
41913: EMPTY
41914: LIST
41915: LIST
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: LIST
41921: LIST
41922: LIST
41923: LIST
41924: LIST
41925: LIST
41926: LIST
41927: LIST
41928: LIST
41929: LIST
41930: LIST
41931: LIST
41932: LIST
41933: LIST
41934: LIST
41935: LIST
41936: LIST
41937: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41938: LD_ADDR_VAR 0 19
41942: PUSH
41943: LD_INT 0
41945: PUSH
41946: LD_INT 0
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: PUSH
41953: LD_INT 0
41955: PUSH
41956: LD_INT 1
41958: NEG
41959: PUSH
41960: EMPTY
41961: LIST
41962: LIST
41963: PUSH
41964: LD_INT 1
41966: PUSH
41967: LD_INT 0
41969: PUSH
41970: EMPTY
41971: LIST
41972: LIST
41973: PUSH
41974: LD_INT 1
41976: PUSH
41977: LD_INT 1
41979: PUSH
41980: EMPTY
41981: LIST
41982: LIST
41983: PUSH
41984: LD_INT 0
41986: PUSH
41987: LD_INT 1
41989: PUSH
41990: EMPTY
41991: LIST
41992: LIST
41993: PUSH
41994: LD_INT 1
41996: NEG
41997: PUSH
41998: LD_INT 0
42000: PUSH
42001: EMPTY
42002: LIST
42003: LIST
42004: PUSH
42005: LD_INT 1
42007: NEG
42008: PUSH
42009: LD_INT 1
42011: NEG
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: PUSH
42017: LD_INT 1
42019: NEG
42020: PUSH
42021: LD_INT 2
42023: NEG
42024: PUSH
42025: EMPTY
42026: LIST
42027: LIST
42028: PUSH
42029: LD_INT 0
42031: PUSH
42032: LD_INT 2
42034: NEG
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: PUSH
42040: LD_INT 1
42042: PUSH
42043: LD_INT 1
42045: NEG
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: PUSH
42051: LD_INT 2
42053: PUSH
42054: LD_INT 0
42056: PUSH
42057: EMPTY
42058: LIST
42059: LIST
42060: PUSH
42061: LD_INT 2
42063: PUSH
42064: LD_INT 1
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: PUSH
42071: LD_INT 2
42073: PUSH
42074: LD_INT 2
42076: PUSH
42077: EMPTY
42078: LIST
42079: LIST
42080: PUSH
42081: LD_INT 1
42083: PUSH
42084: LD_INT 2
42086: PUSH
42087: EMPTY
42088: LIST
42089: LIST
42090: PUSH
42091: LD_INT 0
42093: PUSH
42094: LD_INT 2
42096: PUSH
42097: EMPTY
42098: LIST
42099: LIST
42100: PUSH
42101: LD_INT 1
42103: NEG
42104: PUSH
42105: LD_INT 1
42107: PUSH
42108: EMPTY
42109: LIST
42110: LIST
42111: PUSH
42112: LD_INT 2
42114: NEG
42115: PUSH
42116: LD_INT 0
42118: PUSH
42119: EMPTY
42120: LIST
42121: LIST
42122: PUSH
42123: LD_INT 2
42125: NEG
42126: PUSH
42127: LD_INT 1
42129: NEG
42130: PUSH
42131: EMPTY
42132: LIST
42133: LIST
42134: PUSH
42135: LD_INT 2
42137: NEG
42138: PUSH
42139: LD_INT 2
42141: NEG
42142: PUSH
42143: EMPTY
42144: LIST
42145: LIST
42146: PUSH
42147: EMPTY
42148: LIST
42149: LIST
42150: LIST
42151: LIST
42152: LIST
42153: LIST
42154: LIST
42155: LIST
42156: LIST
42157: LIST
42158: LIST
42159: LIST
42160: LIST
42161: LIST
42162: LIST
42163: LIST
42164: LIST
42165: LIST
42166: LIST
42167: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42168: LD_ADDR_VAR 0 20
42172: PUSH
42173: LD_INT 0
42175: PUSH
42176: LD_INT 0
42178: PUSH
42179: EMPTY
42180: LIST
42181: LIST
42182: PUSH
42183: LD_INT 0
42185: PUSH
42186: LD_INT 1
42188: NEG
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: PUSH
42194: LD_INT 1
42196: PUSH
42197: LD_INT 0
42199: PUSH
42200: EMPTY
42201: LIST
42202: LIST
42203: PUSH
42204: LD_INT 1
42206: PUSH
42207: LD_INT 1
42209: PUSH
42210: EMPTY
42211: LIST
42212: LIST
42213: PUSH
42214: LD_INT 0
42216: PUSH
42217: LD_INT 1
42219: PUSH
42220: EMPTY
42221: LIST
42222: LIST
42223: PUSH
42224: LD_INT 1
42226: NEG
42227: PUSH
42228: LD_INT 0
42230: PUSH
42231: EMPTY
42232: LIST
42233: LIST
42234: PUSH
42235: LD_INT 1
42237: NEG
42238: PUSH
42239: LD_INT 1
42241: NEG
42242: PUSH
42243: EMPTY
42244: LIST
42245: LIST
42246: PUSH
42247: LD_INT 1
42249: NEG
42250: PUSH
42251: LD_INT 2
42253: NEG
42254: PUSH
42255: EMPTY
42256: LIST
42257: LIST
42258: PUSH
42259: LD_INT 0
42261: PUSH
42262: LD_INT 2
42264: NEG
42265: PUSH
42266: EMPTY
42267: LIST
42268: LIST
42269: PUSH
42270: LD_INT 1
42272: PUSH
42273: LD_INT 1
42275: NEG
42276: PUSH
42277: EMPTY
42278: LIST
42279: LIST
42280: PUSH
42281: LD_INT 2
42283: PUSH
42284: LD_INT 0
42286: PUSH
42287: EMPTY
42288: LIST
42289: LIST
42290: PUSH
42291: LD_INT 2
42293: PUSH
42294: LD_INT 1
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: PUSH
42301: LD_INT 2
42303: PUSH
42304: LD_INT 2
42306: PUSH
42307: EMPTY
42308: LIST
42309: LIST
42310: PUSH
42311: LD_INT 1
42313: PUSH
42314: LD_INT 2
42316: PUSH
42317: EMPTY
42318: LIST
42319: LIST
42320: PUSH
42321: LD_INT 0
42323: PUSH
42324: LD_INT 2
42326: PUSH
42327: EMPTY
42328: LIST
42329: LIST
42330: PUSH
42331: LD_INT 1
42333: NEG
42334: PUSH
42335: LD_INT 1
42337: PUSH
42338: EMPTY
42339: LIST
42340: LIST
42341: PUSH
42342: LD_INT 2
42344: NEG
42345: PUSH
42346: LD_INT 0
42348: PUSH
42349: EMPTY
42350: LIST
42351: LIST
42352: PUSH
42353: LD_INT 2
42355: NEG
42356: PUSH
42357: LD_INT 1
42359: NEG
42360: PUSH
42361: EMPTY
42362: LIST
42363: LIST
42364: PUSH
42365: LD_INT 2
42367: NEG
42368: PUSH
42369: LD_INT 2
42371: NEG
42372: PUSH
42373: EMPTY
42374: LIST
42375: LIST
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: LIST
42381: LIST
42382: LIST
42383: LIST
42384: LIST
42385: LIST
42386: LIST
42387: LIST
42388: LIST
42389: LIST
42390: LIST
42391: LIST
42392: LIST
42393: LIST
42394: LIST
42395: LIST
42396: LIST
42397: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42398: LD_ADDR_VAR 0 21
42402: PUSH
42403: LD_INT 0
42405: PUSH
42406: LD_INT 0
42408: PUSH
42409: EMPTY
42410: LIST
42411: LIST
42412: PUSH
42413: LD_INT 0
42415: PUSH
42416: LD_INT 1
42418: NEG
42419: PUSH
42420: EMPTY
42421: LIST
42422: LIST
42423: PUSH
42424: LD_INT 1
42426: PUSH
42427: LD_INT 0
42429: PUSH
42430: EMPTY
42431: LIST
42432: LIST
42433: PUSH
42434: LD_INT 1
42436: PUSH
42437: LD_INT 1
42439: PUSH
42440: EMPTY
42441: LIST
42442: LIST
42443: PUSH
42444: LD_INT 0
42446: PUSH
42447: LD_INT 1
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: PUSH
42454: LD_INT 1
42456: NEG
42457: PUSH
42458: LD_INT 0
42460: PUSH
42461: EMPTY
42462: LIST
42463: LIST
42464: PUSH
42465: LD_INT 1
42467: NEG
42468: PUSH
42469: LD_INT 1
42471: NEG
42472: PUSH
42473: EMPTY
42474: LIST
42475: LIST
42476: PUSH
42477: LD_INT 1
42479: NEG
42480: PUSH
42481: LD_INT 2
42483: NEG
42484: PUSH
42485: EMPTY
42486: LIST
42487: LIST
42488: PUSH
42489: LD_INT 0
42491: PUSH
42492: LD_INT 2
42494: NEG
42495: PUSH
42496: EMPTY
42497: LIST
42498: LIST
42499: PUSH
42500: LD_INT 1
42502: PUSH
42503: LD_INT 1
42505: NEG
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: PUSH
42511: LD_INT 2
42513: PUSH
42514: LD_INT 0
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: PUSH
42521: LD_INT 2
42523: PUSH
42524: LD_INT 1
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: PUSH
42531: LD_INT 2
42533: PUSH
42534: LD_INT 2
42536: PUSH
42537: EMPTY
42538: LIST
42539: LIST
42540: PUSH
42541: LD_INT 1
42543: PUSH
42544: LD_INT 2
42546: PUSH
42547: EMPTY
42548: LIST
42549: LIST
42550: PUSH
42551: LD_INT 0
42553: PUSH
42554: LD_INT 2
42556: PUSH
42557: EMPTY
42558: LIST
42559: LIST
42560: PUSH
42561: LD_INT 1
42563: NEG
42564: PUSH
42565: LD_INT 1
42567: PUSH
42568: EMPTY
42569: LIST
42570: LIST
42571: PUSH
42572: LD_INT 2
42574: NEG
42575: PUSH
42576: LD_INT 0
42578: PUSH
42579: EMPTY
42580: LIST
42581: LIST
42582: PUSH
42583: LD_INT 2
42585: NEG
42586: PUSH
42587: LD_INT 1
42589: NEG
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: PUSH
42595: LD_INT 2
42597: NEG
42598: PUSH
42599: LD_INT 2
42601: NEG
42602: PUSH
42603: EMPTY
42604: LIST
42605: LIST
42606: PUSH
42607: EMPTY
42608: LIST
42609: LIST
42610: LIST
42611: LIST
42612: LIST
42613: LIST
42614: LIST
42615: LIST
42616: LIST
42617: LIST
42618: LIST
42619: LIST
42620: LIST
42621: LIST
42622: LIST
42623: LIST
42624: LIST
42625: LIST
42626: LIST
42627: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42628: LD_ADDR_VAR 0 22
42632: PUSH
42633: LD_INT 0
42635: PUSH
42636: LD_INT 0
42638: PUSH
42639: EMPTY
42640: LIST
42641: LIST
42642: PUSH
42643: LD_INT 0
42645: PUSH
42646: LD_INT 1
42648: NEG
42649: PUSH
42650: EMPTY
42651: LIST
42652: LIST
42653: PUSH
42654: LD_INT 1
42656: PUSH
42657: LD_INT 0
42659: PUSH
42660: EMPTY
42661: LIST
42662: LIST
42663: PUSH
42664: LD_INT 1
42666: PUSH
42667: LD_INT 1
42669: PUSH
42670: EMPTY
42671: LIST
42672: LIST
42673: PUSH
42674: LD_INT 0
42676: PUSH
42677: LD_INT 1
42679: PUSH
42680: EMPTY
42681: LIST
42682: LIST
42683: PUSH
42684: LD_INT 1
42686: NEG
42687: PUSH
42688: LD_INT 0
42690: PUSH
42691: EMPTY
42692: LIST
42693: LIST
42694: PUSH
42695: LD_INT 1
42697: NEG
42698: PUSH
42699: LD_INT 1
42701: NEG
42702: PUSH
42703: EMPTY
42704: LIST
42705: LIST
42706: PUSH
42707: LD_INT 1
42709: NEG
42710: PUSH
42711: LD_INT 2
42713: NEG
42714: PUSH
42715: EMPTY
42716: LIST
42717: LIST
42718: PUSH
42719: LD_INT 0
42721: PUSH
42722: LD_INT 2
42724: NEG
42725: PUSH
42726: EMPTY
42727: LIST
42728: LIST
42729: PUSH
42730: LD_INT 1
42732: PUSH
42733: LD_INT 1
42735: NEG
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: PUSH
42741: LD_INT 2
42743: PUSH
42744: LD_INT 0
42746: PUSH
42747: EMPTY
42748: LIST
42749: LIST
42750: PUSH
42751: LD_INT 2
42753: PUSH
42754: LD_INT 1
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: PUSH
42761: LD_INT 2
42763: PUSH
42764: LD_INT 2
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: PUSH
42771: LD_INT 1
42773: PUSH
42774: LD_INT 2
42776: PUSH
42777: EMPTY
42778: LIST
42779: LIST
42780: PUSH
42781: LD_INT 0
42783: PUSH
42784: LD_INT 2
42786: PUSH
42787: EMPTY
42788: LIST
42789: LIST
42790: PUSH
42791: LD_INT 1
42793: NEG
42794: PUSH
42795: LD_INT 1
42797: PUSH
42798: EMPTY
42799: LIST
42800: LIST
42801: PUSH
42802: LD_INT 2
42804: NEG
42805: PUSH
42806: LD_INT 0
42808: PUSH
42809: EMPTY
42810: LIST
42811: LIST
42812: PUSH
42813: LD_INT 2
42815: NEG
42816: PUSH
42817: LD_INT 1
42819: NEG
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: PUSH
42825: LD_INT 2
42827: NEG
42828: PUSH
42829: LD_INT 2
42831: NEG
42832: PUSH
42833: EMPTY
42834: LIST
42835: LIST
42836: PUSH
42837: EMPTY
42838: LIST
42839: LIST
42840: LIST
42841: LIST
42842: LIST
42843: LIST
42844: LIST
42845: LIST
42846: LIST
42847: LIST
42848: LIST
42849: LIST
42850: LIST
42851: LIST
42852: LIST
42853: LIST
42854: LIST
42855: LIST
42856: LIST
42857: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
42858: LD_ADDR_VAR 0 23
42862: PUSH
42863: LD_INT 0
42865: PUSH
42866: LD_INT 0
42868: PUSH
42869: EMPTY
42870: LIST
42871: LIST
42872: PUSH
42873: LD_INT 0
42875: PUSH
42876: LD_INT 1
42878: NEG
42879: PUSH
42880: EMPTY
42881: LIST
42882: LIST
42883: PUSH
42884: LD_INT 1
42886: PUSH
42887: LD_INT 0
42889: PUSH
42890: EMPTY
42891: LIST
42892: LIST
42893: PUSH
42894: LD_INT 1
42896: PUSH
42897: LD_INT 1
42899: PUSH
42900: EMPTY
42901: LIST
42902: LIST
42903: PUSH
42904: LD_INT 0
42906: PUSH
42907: LD_INT 1
42909: PUSH
42910: EMPTY
42911: LIST
42912: LIST
42913: PUSH
42914: LD_INT 1
42916: NEG
42917: PUSH
42918: LD_INT 0
42920: PUSH
42921: EMPTY
42922: LIST
42923: LIST
42924: PUSH
42925: LD_INT 1
42927: NEG
42928: PUSH
42929: LD_INT 1
42931: NEG
42932: PUSH
42933: EMPTY
42934: LIST
42935: LIST
42936: PUSH
42937: LD_INT 1
42939: NEG
42940: PUSH
42941: LD_INT 2
42943: NEG
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: PUSH
42949: LD_INT 0
42951: PUSH
42952: LD_INT 2
42954: NEG
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: PUSH
42960: LD_INT 1
42962: PUSH
42963: LD_INT 1
42965: NEG
42966: PUSH
42967: EMPTY
42968: LIST
42969: LIST
42970: PUSH
42971: LD_INT 2
42973: PUSH
42974: LD_INT 0
42976: PUSH
42977: EMPTY
42978: LIST
42979: LIST
42980: PUSH
42981: LD_INT 2
42983: PUSH
42984: LD_INT 1
42986: PUSH
42987: EMPTY
42988: LIST
42989: LIST
42990: PUSH
42991: LD_INT 2
42993: PUSH
42994: LD_INT 2
42996: PUSH
42997: EMPTY
42998: LIST
42999: LIST
43000: PUSH
43001: LD_INT 1
43003: PUSH
43004: LD_INT 2
43006: PUSH
43007: EMPTY
43008: LIST
43009: LIST
43010: PUSH
43011: LD_INT 0
43013: PUSH
43014: LD_INT 2
43016: PUSH
43017: EMPTY
43018: LIST
43019: LIST
43020: PUSH
43021: LD_INT 1
43023: NEG
43024: PUSH
43025: LD_INT 1
43027: PUSH
43028: EMPTY
43029: LIST
43030: LIST
43031: PUSH
43032: LD_INT 2
43034: NEG
43035: PUSH
43036: LD_INT 0
43038: PUSH
43039: EMPTY
43040: LIST
43041: LIST
43042: PUSH
43043: LD_INT 2
43045: NEG
43046: PUSH
43047: LD_INT 1
43049: NEG
43050: PUSH
43051: EMPTY
43052: LIST
43053: LIST
43054: PUSH
43055: LD_INT 2
43057: NEG
43058: PUSH
43059: LD_INT 2
43061: NEG
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: PUSH
43067: LD_INT 2
43069: NEG
43070: PUSH
43071: LD_INT 3
43073: NEG
43074: PUSH
43075: EMPTY
43076: LIST
43077: LIST
43078: PUSH
43079: LD_INT 1
43081: NEG
43082: PUSH
43083: LD_INT 3
43085: NEG
43086: PUSH
43087: EMPTY
43088: LIST
43089: LIST
43090: PUSH
43091: LD_INT 1
43093: PUSH
43094: LD_INT 2
43096: NEG
43097: PUSH
43098: EMPTY
43099: LIST
43100: LIST
43101: PUSH
43102: LD_INT 2
43104: PUSH
43105: LD_INT 1
43107: NEG
43108: PUSH
43109: EMPTY
43110: LIST
43111: LIST
43112: PUSH
43113: EMPTY
43114: LIST
43115: LIST
43116: LIST
43117: LIST
43118: LIST
43119: LIST
43120: LIST
43121: LIST
43122: LIST
43123: LIST
43124: LIST
43125: LIST
43126: LIST
43127: LIST
43128: LIST
43129: LIST
43130: LIST
43131: LIST
43132: LIST
43133: LIST
43134: LIST
43135: LIST
43136: LIST
43137: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
43138: LD_ADDR_VAR 0 24
43142: PUSH
43143: LD_INT 0
43145: PUSH
43146: LD_INT 0
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: PUSH
43153: LD_INT 0
43155: PUSH
43156: LD_INT 1
43158: NEG
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: PUSH
43164: LD_INT 1
43166: PUSH
43167: LD_INT 0
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: PUSH
43174: LD_INT 1
43176: PUSH
43177: LD_INT 1
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: PUSH
43184: LD_INT 0
43186: PUSH
43187: LD_INT 1
43189: PUSH
43190: EMPTY
43191: LIST
43192: LIST
43193: PUSH
43194: LD_INT 1
43196: NEG
43197: PUSH
43198: LD_INT 0
43200: PUSH
43201: EMPTY
43202: LIST
43203: LIST
43204: PUSH
43205: LD_INT 1
43207: NEG
43208: PUSH
43209: LD_INT 1
43211: NEG
43212: PUSH
43213: EMPTY
43214: LIST
43215: LIST
43216: PUSH
43217: LD_INT 1
43219: NEG
43220: PUSH
43221: LD_INT 2
43223: NEG
43224: PUSH
43225: EMPTY
43226: LIST
43227: LIST
43228: PUSH
43229: LD_INT 0
43231: PUSH
43232: LD_INT 2
43234: NEG
43235: PUSH
43236: EMPTY
43237: LIST
43238: LIST
43239: PUSH
43240: LD_INT 1
43242: PUSH
43243: LD_INT 1
43245: NEG
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: PUSH
43251: LD_INT 2
43253: PUSH
43254: LD_INT 0
43256: PUSH
43257: EMPTY
43258: LIST
43259: LIST
43260: PUSH
43261: LD_INT 2
43263: PUSH
43264: LD_INT 1
43266: PUSH
43267: EMPTY
43268: LIST
43269: LIST
43270: PUSH
43271: LD_INT 2
43273: PUSH
43274: LD_INT 2
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: PUSH
43281: LD_INT 1
43283: PUSH
43284: LD_INT 2
43286: PUSH
43287: EMPTY
43288: LIST
43289: LIST
43290: PUSH
43291: LD_INT 0
43293: PUSH
43294: LD_INT 2
43296: PUSH
43297: EMPTY
43298: LIST
43299: LIST
43300: PUSH
43301: LD_INT 1
43303: NEG
43304: PUSH
43305: LD_INT 1
43307: PUSH
43308: EMPTY
43309: LIST
43310: LIST
43311: PUSH
43312: LD_INT 2
43314: NEG
43315: PUSH
43316: LD_INT 0
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: PUSH
43323: LD_INT 2
43325: NEG
43326: PUSH
43327: LD_INT 1
43329: NEG
43330: PUSH
43331: EMPTY
43332: LIST
43333: LIST
43334: PUSH
43335: LD_INT 2
43337: NEG
43338: PUSH
43339: LD_INT 2
43341: NEG
43342: PUSH
43343: EMPTY
43344: LIST
43345: LIST
43346: PUSH
43347: LD_INT 1
43349: PUSH
43350: LD_INT 2
43352: NEG
43353: PUSH
43354: EMPTY
43355: LIST
43356: LIST
43357: PUSH
43358: LD_INT 2
43360: PUSH
43361: LD_INT 1
43363: NEG
43364: PUSH
43365: EMPTY
43366: LIST
43367: LIST
43368: PUSH
43369: LD_INT 3
43371: PUSH
43372: LD_INT 1
43374: PUSH
43375: EMPTY
43376: LIST
43377: LIST
43378: PUSH
43379: LD_INT 3
43381: PUSH
43382: LD_INT 2
43384: PUSH
43385: EMPTY
43386: LIST
43387: LIST
43388: PUSH
43389: EMPTY
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: LIST
43395: LIST
43396: LIST
43397: LIST
43398: LIST
43399: LIST
43400: LIST
43401: LIST
43402: LIST
43403: LIST
43404: LIST
43405: LIST
43406: LIST
43407: LIST
43408: LIST
43409: LIST
43410: LIST
43411: LIST
43412: LIST
43413: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
43414: LD_ADDR_VAR 0 25
43418: PUSH
43419: LD_INT 0
43421: PUSH
43422: LD_INT 0
43424: PUSH
43425: EMPTY
43426: LIST
43427: LIST
43428: PUSH
43429: LD_INT 0
43431: PUSH
43432: LD_INT 1
43434: NEG
43435: PUSH
43436: EMPTY
43437: LIST
43438: LIST
43439: PUSH
43440: LD_INT 1
43442: PUSH
43443: LD_INT 0
43445: PUSH
43446: EMPTY
43447: LIST
43448: LIST
43449: PUSH
43450: LD_INT 1
43452: PUSH
43453: LD_INT 1
43455: PUSH
43456: EMPTY
43457: LIST
43458: LIST
43459: PUSH
43460: LD_INT 0
43462: PUSH
43463: LD_INT 1
43465: PUSH
43466: EMPTY
43467: LIST
43468: LIST
43469: PUSH
43470: LD_INT 1
43472: NEG
43473: PUSH
43474: LD_INT 0
43476: PUSH
43477: EMPTY
43478: LIST
43479: LIST
43480: PUSH
43481: LD_INT 1
43483: NEG
43484: PUSH
43485: LD_INT 1
43487: NEG
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: PUSH
43493: LD_INT 1
43495: NEG
43496: PUSH
43497: LD_INT 2
43499: NEG
43500: PUSH
43501: EMPTY
43502: LIST
43503: LIST
43504: PUSH
43505: LD_INT 0
43507: PUSH
43508: LD_INT 2
43510: NEG
43511: PUSH
43512: EMPTY
43513: LIST
43514: LIST
43515: PUSH
43516: LD_INT 1
43518: PUSH
43519: LD_INT 1
43521: NEG
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: PUSH
43527: LD_INT 2
43529: PUSH
43530: LD_INT 0
43532: PUSH
43533: EMPTY
43534: LIST
43535: LIST
43536: PUSH
43537: LD_INT 2
43539: PUSH
43540: LD_INT 1
43542: PUSH
43543: EMPTY
43544: LIST
43545: LIST
43546: PUSH
43547: LD_INT 2
43549: PUSH
43550: LD_INT 2
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: PUSH
43557: LD_INT 1
43559: PUSH
43560: LD_INT 2
43562: PUSH
43563: EMPTY
43564: LIST
43565: LIST
43566: PUSH
43567: LD_INT 0
43569: PUSH
43570: LD_INT 2
43572: PUSH
43573: EMPTY
43574: LIST
43575: LIST
43576: PUSH
43577: LD_INT 1
43579: NEG
43580: PUSH
43581: LD_INT 1
43583: PUSH
43584: EMPTY
43585: LIST
43586: LIST
43587: PUSH
43588: LD_INT 2
43590: NEG
43591: PUSH
43592: LD_INT 0
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: PUSH
43599: LD_INT 2
43601: NEG
43602: PUSH
43603: LD_INT 1
43605: NEG
43606: PUSH
43607: EMPTY
43608: LIST
43609: LIST
43610: PUSH
43611: LD_INT 2
43613: NEG
43614: PUSH
43615: LD_INT 2
43617: NEG
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: PUSH
43623: LD_INT 3
43625: PUSH
43626: LD_INT 1
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: PUSH
43633: LD_INT 3
43635: PUSH
43636: LD_INT 2
43638: PUSH
43639: EMPTY
43640: LIST
43641: LIST
43642: PUSH
43643: LD_INT 2
43645: PUSH
43646: LD_INT 3
43648: PUSH
43649: EMPTY
43650: LIST
43651: LIST
43652: PUSH
43653: LD_INT 1
43655: PUSH
43656: LD_INT 3
43658: PUSH
43659: EMPTY
43660: LIST
43661: LIST
43662: PUSH
43663: EMPTY
43664: LIST
43665: LIST
43666: LIST
43667: LIST
43668: LIST
43669: LIST
43670: LIST
43671: LIST
43672: LIST
43673: LIST
43674: LIST
43675: LIST
43676: LIST
43677: LIST
43678: LIST
43679: LIST
43680: LIST
43681: LIST
43682: LIST
43683: LIST
43684: LIST
43685: LIST
43686: LIST
43687: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43688: LD_ADDR_VAR 0 26
43692: PUSH
43693: LD_INT 0
43695: PUSH
43696: LD_INT 0
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: PUSH
43703: LD_INT 0
43705: PUSH
43706: LD_INT 1
43708: NEG
43709: PUSH
43710: EMPTY
43711: LIST
43712: LIST
43713: PUSH
43714: LD_INT 1
43716: PUSH
43717: LD_INT 0
43719: PUSH
43720: EMPTY
43721: LIST
43722: LIST
43723: PUSH
43724: LD_INT 1
43726: PUSH
43727: LD_INT 1
43729: PUSH
43730: EMPTY
43731: LIST
43732: LIST
43733: PUSH
43734: LD_INT 0
43736: PUSH
43737: LD_INT 1
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: PUSH
43744: LD_INT 1
43746: NEG
43747: PUSH
43748: LD_INT 0
43750: PUSH
43751: EMPTY
43752: LIST
43753: LIST
43754: PUSH
43755: LD_INT 1
43757: NEG
43758: PUSH
43759: LD_INT 1
43761: NEG
43762: PUSH
43763: EMPTY
43764: LIST
43765: LIST
43766: PUSH
43767: LD_INT 1
43769: NEG
43770: PUSH
43771: LD_INT 2
43773: NEG
43774: PUSH
43775: EMPTY
43776: LIST
43777: LIST
43778: PUSH
43779: LD_INT 0
43781: PUSH
43782: LD_INT 2
43784: NEG
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: PUSH
43790: LD_INT 1
43792: PUSH
43793: LD_INT 1
43795: NEG
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: PUSH
43801: LD_INT 2
43803: PUSH
43804: LD_INT 0
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: LD_INT 2
43813: PUSH
43814: LD_INT 1
43816: PUSH
43817: EMPTY
43818: LIST
43819: LIST
43820: PUSH
43821: LD_INT 2
43823: PUSH
43824: LD_INT 2
43826: PUSH
43827: EMPTY
43828: LIST
43829: LIST
43830: PUSH
43831: LD_INT 1
43833: PUSH
43834: LD_INT 2
43836: PUSH
43837: EMPTY
43838: LIST
43839: LIST
43840: PUSH
43841: LD_INT 0
43843: PUSH
43844: LD_INT 2
43846: PUSH
43847: EMPTY
43848: LIST
43849: LIST
43850: PUSH
43851: LD_INT 1
43853: NEG
43854: PUSH
43855: LD_INT 1
43857: PUSH
43858: EMPTY
43859: LIST
43860: LIST
43861: PUSH
43862: LD_INT 2
43864: NEG
43865: PUSH
43866: LD_INT 0
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: PUSH
43873: LD_INT 2
43875: NEG
43876: PUSH
43877: LD_INT 1
43879: NEG
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: PUSH
43885: LD_INT 2
43887: NEG
43888: PUSH
43889: LD_INT 2
43891: NEG
43892: PUSH
43893: EMPTY
43894: LIST
43895: LIST
43896: PUSH
43897: LD_INT 2
43899: PUSH
43900: LD_INT 3
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: PUSH
43907: LD_INT 1
43909: PUSH
43910: LD_INT 3
43912: PUSH
43913: EMPTY
43914: LIST
43915: LIST
43916: PUSH
43917: LD_INT 1
43919: NEG
43920: PUSH
43921: LD_INT 2
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: PUSH
43928: LD_INT 2
43930: NEG
43931: PUSH
43932: LD_INT 1
43934: PUSH
43935: EMPTY
43936: LIST
43937: LIST
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: LIST
43943: LIST
43944: LIST
43945: LIST
43946: LIST
43947: LIST
43948: LIST
43949: LIST
43950: LIST
43951: LIST
43952: LIST
43953: LIST
43954: LIST
43955: LIST
43956: LIST
43957: LIST
43958: LIST
43959: LIST
43960: LIST
43961: LIST
43962: LIST
43963: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43964: LD_ADDR_VAR 0 27
43968: PUSH
43969: LD_INT 0
43971: PUSH
43972: LD_INT 0
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 0
43981: PUSH
43982: LD_INT 1
43984: NEG
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 1
43992: PUSH
43993: LD_INT 0
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: PUSH
44000: LD_INT 1
44002: PUSH
44003: LD_INT 1
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: PUSH
44010: LD_INT 0
44012: PUSH
44013: LD_INT 1
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: PUSH
44020: LD_INT 1
44022: NEG
44023: PUSH
44024: LD_INT 0
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: PUSH
44031: LD_INT 1
44033: NEG
44034: PUSH
44035: LD_INT 1
44037: NEG
44038: PUSH
44039: EMPTY
44040: LIST
44041: LIST
44042: PUSH
44043: LD_INT 1
44045: NEG
44046: PUSH
44047: LD_INT 2
44049: NEG
44050: PUSH
44051: EMPTY
44052: LIST
44053: LIST
44054: PUSH
44055: LD_INT 0
44057: PUSH
44058: LD_INT 2
44060: NEG
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: PUSH
44066: LD_INT 1
44068: PUSH
44069: LD_INT 1
44071: NEG
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: PUSH
44077: LD_INT 2
44079: PUSH
44080: LD_INT 0
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: LD_INT 2
44089: PUSH
44090: LD_INT 1
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: LD_INT 2
44099: PUSH
44100: LD_INT 2
44102: PUSH
44103: EMPTY
44104: LIST
44105: LIST
44106: PUSH
44107: LD_INT 1
44109: PUSH
44110: LD_INT 2
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: PUSH
44117: LD_INT 0
44119: PUSH
44120: LD_INT 2
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: PUSH
44127: LD_INT 1
44129: NEG
44130: PUSH
44131: LD_INT 1
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: PUSH
44138: LD_INT 2
44140: NEG
44141: PUSH
44142: LD_INT 0
44144: PUSH
44145: EMPTY
44146: LIST
44147: LIST
44148: PUSH
44149: LD_INT 2
44151: NEG
44152: PUSH
44153: LD_INT 1
44155: NEG
44156: PUSH
44157: EMPTY
44158: LIST
44159: LIST
44160: PUSH
44161: LD_INT 2
44163: NEG
44164: PUSH
44165: LD_INT 2
44167: NEG
44168: PUSH
44169: EMPTY
44170: LIST
44171: LIST
44172: PUSH
44173: LD_INT 1
44175: NEG
44176: PUSH
44177: LD_INT 2
44179: PUSH
44180: EMPTY
44181: LIST
44182: LIST
44183: PUSH
44184: LD_INT 2
44186: NEG
44187: PUSH
44188: LD_INT 1
44190: PUSH
44191: EMPTY
44192: LIST
44193: LIST
44194: PUSH
44195: LD_INT 3
44197: NEG
44198: PUSH
44199: LD_INT 1
44201: NEG
44202: PUSH
44203: EMPTY
44204: LIST
44205: LIST
44206: PUSH
44207: LD_INT 3
44209: NEG
44210: PUSH
44211: LD_INT 2
44213: NEG
44214: PUSH
44215: EMPTY
44216: LIST
44217: LIST
44218: PUSH
44219: EMPTY
44220: LIST
44221: LIST
44222: LIST
44223: LIST
44224: LIST
44225: LIST
44226: LIST
44227: LIST
44228: LIST
44229: LIST
44230: LIST
44231: LIST
44232: LIST
44233: LIST
44234: LIST
44235: LIST
44236: LIST
44237: LIST
44238: LIST
44239: LIST
44240: LIST
44241: LIST
44242: LIST
44243: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44244: LD_ADDR_VAR 0 28
44248: PUSH
44249: LD_INT 0
44251: PUSH
44252: LD_INT 0
44254: PUSH
44255: EMPTY
44256: LIST
44257: LIST
44258: PUSH
44259: LD_INT 0
44261: PUSH
44262: LD_INT 1
44264: NEG
44265: PUSH
44266: EMPTY
44267: LIST
44268: LIST
44269: PUSH
44270: LD_INT 1
44272: PUSH
44273: LD_INT 0
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: PUSH
44280: LD_INT 1
44282: PUSH
44283: LD_INT 1
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: PUSH
44290: LD_INT 0
44292: PUSH
44293: LD_INT 1
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: PUSH
44300: LD_INT 1
44302: NEG
44303: PUSH
44304: LD_INT 0
44306: PUSH
44307: EMPTY
44308: LIST
44309: LIST
44310: PUSH
44311: LD_INT 1
44313: NEG
44314: PUSH
44315: LD_INT 1
44317: NEG
44318: PUSH
44319: EMPTY
44320: LIST
44321: LIST
44322: PUSH
44323: LD_INT 1
44325: NEG
44326: PUSH
44327: LD_INT 2
44329: NEG
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: PUSH
44335: LD_INT 0
44337: PUSH
44338: LD_INT 2
44340: NEG
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: PUSH
44346: LD_INT 1
44348: PUSH
44349: LD_INT 1
44351: NEG
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: PUSH
44357: LD_INT 2
44359: PUSH
44360: LD_INT 0
44362: PUSH
44363: EMPTY
44364: LIST
44365: LIST
44366: PUSH
44367: LD_INT 2
44369: PUSH
44370: LD_INT 1
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: PUSH
44377: LD_INT 2
44379: PUSH
44380: LD_INT 2
44382: PUSH
44383: EMPTY
44384: LIST
44385: LIST
44386: PUSH
44387: LD_INT 1
44389: PUSH
44390: LD_INT 2
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: PUSH
44397: LD_INT 0
44399: PUSH
44400: LD_INT 2
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: PUSH
44407: LD_INT 1
44409: NEG
44410: PUSH
44411: LD_INT 1
44413: PUSH
44414: EMPTY
44415: LIST
44416: LIST
44417: PUSH
44418: LD_INT 2
44420: NEG
44421: PUSH
44422: LD_INT 0
44424: PUSH
44425: EMPTY
44426: LIST
44427: LIST
44428: PUSH
44429: LD_INT 2
44431: NEG
44432: PUSH
44433: LD_INT 1
44435: NEG
44436: PUSH
44437: EMPTY
44438: LIST
44439: LIST
44440: PUSH
44441: LD_INT 2
44443: NEG
44444: PUSH
44445: LD_INT 2
44447: NEG
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: PUSH
44453: LD_INT 2
44455: NEG
44456: PUSH
44457: LD_INT 3
44459: NEG
44460: PUSH
44461: EMPTY
44462: LIST
44463: LIST
44464: PUSH
44465: LD_INT 1
44467: NEG
44468: PUSH
44469: LD_INT 3
44471: NEG
44472: PUSH
44473: EMPTY
44474: LIST
44475: LIST
44476: PUSH
44477: LD_INT 3
44479: NEG
44480: PUSH
44481: LD_INT 1
44483: NEG
44484: PUSH
44485: EMPTY
44486: LIST
44487: LIST
44488: PUSH
44489: LD_INT 3
44491: NEG
44492: PUSH
44493: LD_INT 2
44495: NEG
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: PUSH
44501: EMPTY
44502: LIST
44503: LIST
44504: LIST
44505: LIST
44506: LIST
44507: LIST
44508: LIST
44509: LIST
44510: LIST
44511: LIST
44512: LIST
44513: LIST
44514: LIST
44515: LIST
44516: LIST
44517: LIST
44518: LIST
44519: LIST
44520: LIST
44521: LIST
44522: LIST
44523: LIST
44524: LIST
44525: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44526: LD_ADDR_VAR 0 29
44530: PUSH
44531: LD_INT 0
44533: PUSH
44534: LD_INT 0
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: PUSH
44541: LD_INT 0
44543: PUSH
44544: LD_INT 1
44546: NEG
44547: PUSH
44548: EMPTY
44549: LIST
44550: LIST
44551: PUSH
44552: LD_INT 1
44554: PUSH
44555: LD_INT 0
44557: PUSH
44558: EMPTY
44559: LIST
44560: LIST
44561: PUSH
44562: LD_INT 1
44564: PUSH
44565: LD_INT 1
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: PUSH
44572: LD_INT 0
44574: PUSH
44575: LD_INT 1
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: PUSH
44582: LD_INT 1
44584: NEG
44585: PUSH
44586: LD_INT 0
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: PUSH
44593: LD_INT 1
44595: NEG
44596: PUSH
44597: LD_INT 1
44599: NEG
44600: PUSH
44601: EMPTY
44602: LIST
44603: LIST
44604: PUSH
44605: LD_INT 1
44607: NEG
44608: PUSH
44609: LD_INT 2
44611: NEG
44612: PUSH
44613: EMPTY
44614: LIST
44615: LIST
44616: PUSH
44617: LD_INT 0
44619: PUSH
44620: LD_INT 2
44622: NEG
44623: PUSH
44624: EMPTY
44625: LIST
44626: LIST
44627: PUSH
44628: LD_INT 1
44630: PUSH
44631: LD_INT 1
44633: NEG
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: PUSH
44639: LD_INT 2
44641: PUSH
44642: LD_INT 0
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: PUSH
44649: LD_INT 2
44651: PUSH
44652: LD_INT 1
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: PUSH
44659: LD_INT 1
44661: PUSH
44662: LD_INT 2
44664: PUSH
44665: EMPTY
44666: LIST
44667: LIST
44668: PUSH
44669: LD_INT 0
44671: PUSH
44672: LD_INT 2
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: PUSH
44679: LD_INT 1
44681: NEG
44682: PUSH
44683: LD_INT 1
44685: PUSH
44686: EMPTY
44687: LIST
44688: LIST
44689: PUSH
44690: LD_INT 2
44692: NEG
44693: PUSH
44694: LD_INT 1
44696: NEG
44697: PUSH
44698: EMPTY
44699: LIST
44700: LIST
44701: PUSH
44702: LD_INT 2
44704: NEG
44705: PUSH
44706: LD_INT 2
44708: NEG
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: PUSH
44714: LD_INT 2
44716: NEG
44717: PUSH
44718: LD_INT 3
44720: NEG
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: PUSH
44726: LD_INT 2
44728: PUSH
44729: LD_INT 1
44731: NEG
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: PUSH
44737: LD_INT 3
44739: PUSH
44740: LD_INT 1
44742: PUSH
44743: EMPTY
44744: LIST
44745: LIST
44746: PUSH
44747: LD_INT 1
44749: PUSH
44750: LD_INT 3
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: PUSH
44757: LD_INT 1
44759: NEG
44760: PUSH
44761: LD_INT 2
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: PUSH
44768: LD_INT 3
44770: NEG
44771: PUSH
44772: LD_INT 2
44774: NEG
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: LIST
44784: LIST
44785: LIST
44786: LIST
44787: LIST
44788: LIST
44789: LIST
44790: LIST
44791: LIST
44792: LIST
44793: LIST
44794: LIST
44795: LIST
44796: LIST
44797: LIST
44798: LIST
44799: LIST
44800: LIST
44801: LIST
44802: LIST
44803: LIST
44804: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44805: LD_ADDR_VAR 0 30
44809: PUSH
44810: LD_INT 0
44812: PUSH
44813: LD_INT 0
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: PUSH
44820: LD_INT 0
44822: PUSH
44823: LD_INT 1
44825: NEG
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: PUSH
44831: LD_INT 1
44833: PUSH
44834: LD_INT 0
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: PUSH
44841: LD_INT 1
44843: PUSH
44844: LD_INT 1
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: PUSH
44851: LD_INT 0
44853: PUSH
44854: LD_INT 1
44856: PUSH
44857: EMPTY
44858: LIST
44859: LIST
44860: PUSH
44861: LD_INT 1
44863: NEG
44864: PUSH
44865: LD_INT 0
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: PUSH
44872: LD_INT 1
44874: NEG
44875: PUSH
44876: LD_INT 1
44878: NEG
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: PUSH
44884: LD_INT 1
44886: NEG
44887: PUSH
44888: LD_INT 2
44890: NEG
44891: PUSH
44892: EMPTY
44893: LIST
44894: LIST
44895: PUSH
44896: LD_INT 0
44898: PUSH
44899: LD_INT 2
44901: NEG
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: PUSH
44907: LD_INT 1
44909: PUSH
44910: LD_INT 1
44912: NEG
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: PUSH
44918: LD_INT 2
44920: PUSH
44921: LD_INT 0
44923: PUSH
44924: EMPTY
44925: LIST
44926: LIST
44927: PUSH
44928: LD_INT 2
44930: PUSH
44931: LD_INT 1
44933: PUSH
44934: EMPTY
44935: LIST
44936: LIST
44937: PUSH
44938: LD_INT 2
44940: PUSH
44941: LD_INT 2
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: PUSH
44948: LD_INT 1
44950: PUSH
44951: LD_INT 2
44953: PUSH
44954: EMPTY
44955: LIST
44956: LIST
44957: PUSH
44958: LD_INT 1
44960: NEG
44961: PUSH
44962: LD_INT 1
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: PUSH
44969: LD_INT 2
44971: NEG
44972: PUSH
44973: LD_INT 0
44975: PUSH
44976: EMPTY
44977: LIST
44978: LIST
44979: PUSH
44980: LD_INT 2
44982: NEG
44983: PUSH
44984: LD_INT 1
44986: NEG
44987: PUSH
44988: EMPTY
44989: LIST
44990: LIST
44991: PUSH
44992: LD_INT 1
44994: NEG
44995: PUSH
44996: LD_INT 3
44998: NEG
44999: PUSH
45000: EMPTY
45001: LIST
45002: LIST
45003: PUSH
45004: LD_INT 1
45006: PUSH
45007: LD_INT 2
45009: NEG
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: PUSH
45015: LD_INT 3
45017: PUSH
45018: LD_INT 2
45020: PUSH
45021: EMPTY
45022: LIST
45023: LIST
45024: PUSH
45025: LD_INT 2
45027: PUSH
45028: LD_INT 3
45030: PUSH
45031: EMPTY
45032: LIST
45033: LIST
45034: PUSH
45035: LD_INT 2
45037: NEG
45038: PUSH
45039: LD_INT 1
45041: PUSH
45042: EMPTY
45043: LIST
45044: LIST
45045: PUSH
45046: LD_INT 3
45048: NEG
45049: PUSH
45050: LD_INT 1
45052: NEG
45053: PUSH
45054: EMPTY
45055: LIST
45056: LIST
45057: PUSH
45058: EMPTY
45059: LIST
45060: LIST
45061: LIST
45062: LIST
45063: LIST
45064: LIST
45065: LIST
45066: LIST
45067: LIST
45068: LIST
45069: LIST
45070: LIST
45071: LIST
45072: LIST
45073: LIST
45074: LIST
45075: LIST
45076: LIST
45077: LIST
45078: LIST
45079: LIST
45080: LIST
45081: LIST
45082: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45083: LD_ADDR_VAR 0 31
45087: PUSH
45088: LD_INT 0
45090: PUSH
45091: LD_INT 0
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: PUSH
45098: LD_INT 0
45100: PUSH
45101: LD_INT 1
45103: NEG
45104: PUSH
45105: EMPTY
45106: LIST
45107: LIST
45108: PUSH
45109: LD_INT 1
45111: PUSH
45112: LD_INT 0
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: PUSH
45119: LD_INT 1
45121: PUSH
45122: LD_INT 1
45124: PUSH
45125: EMPTY
45126: LIST
45127: LIST
45128: PUSH
45129: LD_INT 0
45131: PUSH
45132: LD_INT 1
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: PUSH
45139: LD_INT 1
45141: NEG
45142: PUSH
45143: LD_INT 0
45145: PUSH
45146: EMPTY
45147: LIST
45148: LIST
45149: PUSH
45150: LD_INT 1
45152: NEG
45153: PUSH
45154: LD_INT 1
45156: NEG
45157: PUSH
45158: EMPTY
45159: LIST
45160: LIST
45161: PUSH
45162: LD_INT 1
45164: NEG
45165: PUSH
45166: LD_INT 2
45168: NEG
45169: PUSH
45170: EMPTY
45171: LIST
45172: LIST
45173: PUSH
45174: LD_INT 1
45176: PUSH
45177: LD_INT 1
45179: NEG
45180: PUSH
45181: EMPTY
45182: LIST
45183: LIST
45184: PUSH
45185: LD_INT 2
45187: PUSH
45188: LD_INT 0
45190: PUSH
45191: EMPTY
45192: LIST
45193: LIST
45194: PUSH
45195: LD_INT 2
45197: PUSH
45198: LD_INT 1
45200: PUSH
45201: EMPTY
45202: LIST
45203: LIST
45204: PUSH
45205: LD_INT 2
45207: PUSH
45208: LD_INT 2
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: PUSH
45215: LD_INT 1
45217: PUSH
45218: LD_INT 2
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: LD_INT 0
45227: PUSH
45228: LD_INT 2
45230: PUSH
45231: EMPTY
45232: LIST
45233: LIST
45234: PUSH
45235: LD_INT 1
45237: NEG
45238: PUSH
45239: LD_INT 1
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: PUSH
45246: LD_INT 2
45248: NEG
45249: PUSH
45250: LD_INT 1
45252: NEG
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PUSH
45258: LD_INT 2
45260: NEG
45261: PUSH
45262: LD_INT 2
45264: NEG
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: PUSH
45270: LD_INT 2
45272: NEG
45273: PUSH
45274: LD_INT 3
45276: NEG
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: PUSH
45282: LD_INT 2
45284: PUSH
45285: LD_INT 1
45287: NEG
45288: PUSH
45289: EMPTY
45290: LIST
45291: LIST
45292: PUSH
45293: LD_INT 3
45295: PUSH
45296: LD_INT 1
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: PUSH
45303: LD_INT 1
45305: PUSH
45306: LD_INT 3
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: PUSH
45313: LD_INT 1
45315: NEG
45316: PUSH
45317: LD_INT 2
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: PUSH
45324: LD_INT 3
45326: NEG
45327: PUSH
45328: LD_INT 2
45330: NEG
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: LIST
45340: LIST
45341: LIST
45342: LIST
45343: LIST
45344: LIST
45345: LIST
45346: LIST
45347: LIST
45348: LIST
45349: LIST
45350: LIST
45351: LIST
45352: LIST
45353: LIST
45354: LIST
45355: LIST
45356: LIST
45357: LIST
45358: LIST
45359: LIST
45360: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45361: LD_ADDR_VAR 0 32
45365: PUSH
45366: LD_INT 0
45368: PUSH
45369: LD_INT 0
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: PUSH
45376: LD_INT 0
45378: PUSH
45379: LD_INT 1
45381: NEG
45382: PUSH
45383: EMPTY
45384: LIST
45385: LIST
45386: PUSH
45387: LD_INT 1
45389: PUSH
45390: LD_INT 0
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: PUSH
45397: LD_INT 1
45399: PUSH
45400: LD_INT 1
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: PUSH
45407: LD_INT 0
45409: PUSH
45410: LD_INT 1
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: PUSH
45417: LD_INT 1
45419: NEG
45420: PUSH
45421: LD_INT 0
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: PUSH
45428: LD_INT 1
45430: NEG
45431: PUSH
45432: LD_INT 1
45434: NEG
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: LD_INT 1
45442: NEG
45443: PUSH
45444: LD_INT 2
45446: NEG
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: LD_INT 0
45454: PUSH
45455: LD_INT 2
45457: NEG
45458: PUSH
45459: EMPTY
45460: LIST
45461: LIST
45462: PUSH
45463: LD_INT 1
45465: PUSH
45466: LD_INT 1
45468: NEG
45469: PUSH
45470: EMPTY
45471: LIST
45472: LIST
45473: PUSH
45474: LD_INT 2
45476: PUSH
45477: LD_INT 1
45479: PUSH
45480: EMPTY
45481: LIST
45482: LIST
45483: PUSH
45484: LD_INT 2
45486: PUSH
45487: LD_INT 2
45489: PUSH
45490: EMPTY
45491: LIST
45492: LIST
45493: PUSH
45494: LD_INT 1
45496: PUSH
45497: LD_INT 2
45499: PUSH
45500: EMPTY
45501: LIST
45502: LIST
45503: PUSH
45504: LD_INT 0
45506: PUSH
45507: LD_INT 2
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: PUSH
45514: LD_INT 1
45516: NEG
45517: PUSH
45518: LD_INT 1
45520: PUSH
45521: EMPTY
45522: LIST
45523: LIST
45524: PUSH
45525: LD_INT 2
45527: NEG
45528: PUSH
45529: LD_INT 0
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: PUSH
45536: LD_INT 2
45538: NEG
45539: PUSH
45540: LD_INT 1
45542: NEG
45543: PUSH
45544: EMPTY
45545: LIST
45546: LIST
45547: PUSH
45548: LD_INT 1
45550: NEG
45551: PUSH
45552: LD_INT 3
45554: NEG
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: LD_INT 1
45562: PUSH
45563: LD_INT 2
45565: NEG
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: PUSH
45571: LD_INT 3
45573: PUSH
45574: LD_INT 2
45576: PUSH
45577: EMPTY
45578: LIST
45579: LIST
45580: PUSH
45581: LD_INT 2
45583: PUSH
45584: LD_INT 3
45586: PUSH
45587: EMPTY
45588: LIST
45589: LIST
45590: PUSH
45591: LD_INT 2
45593: NEG
45594: PUSH
45595: LD_INT 1
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PUSH
45602: LD_INT 3
45604: NEG
45605: PUSH
45606: LD_INT 1
45608: NEG
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: LIST
45618: LIST
45619: LIST
45620: LIST
45621: LIST
45622: LIST
45623: LIST
45624: LIST
45625: LIST
45626: LIST
45627: LIST
45628: LIST
45629: LIST
45630: LIST
45631: LIST
45632: LIST
45633: LIST
45634: LIST
45635: LIST
45636: LIST
45637: LIST
45638: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45639: LD_ADDR_VAR 0 33
45643: PUSH
45644: LD_INT 0
45646: PUSH
45647: LD_INT 0
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: PUSH
45654: LD_INT 0
45656: PUSH
45657: LD_INT 1
45659: NEG
45660: PUSH
45661: EMPTY
45662: LIST
45663: LIST
45664: PUSH
45665: LD_INT 1
45667: PUSH
45668: LD_INT 0
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: PUSH
45675: LD_INT 1
45677: PUSH
45678: LD_INT 1
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PUSH
45685: LD_INT 0
45687: PUSH
45688: LD_INT 1
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: LD_INT 1
45697: NEG
45698: PUSH
45699: LD_INT 0
45701: PUSH
45702: EMPTY
45703: LIST
45704: LIST
45705: PUSH
45706: LD_INT 1
45708: NEG
45709: PUSH
45710: LD_INT 1
45712: NEG
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: PUSH
45718: LD_INT 1
45720: NEG
45721: PUSH
45722: LD_INT 2
45724: NEG
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: PUSH
45730: LD_INT 1
45732: PUSH
45733: LD_INT 1
45735: NEG
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: PUSH
45741: LD_INT 2
45743: PUSH
45744: LD_INT 0
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: PUSH
45751: LD_INT 2
45753: PUSH
45754: LD_INT 1
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: PUSH
45761: LD_INT 1
45763: PUSH
45764: LD_INT 2
45766: PUSH
45767: EMPTY
45768: LIST
45769: LIST
45770: PUSH
45771: LD_INT 0
45773: PUSH
45774: LD_INT 2
45776: PUSH
45777: EMPTY
45778: LIST
45779: LIST
45780: PUSH
45781: LD_INT 1
45783: NEG
45784: PUSH
45785: LD_INT 1
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: PUSH
45792: LD_INT 2
45794: NEG
45795: PUSH
45796: LD_INT 0
45798: PUSH
45799: EMPTY
45800: LIST
45801: LIST
45802: PUSH
45803: LD_INT 2
45805: NEG
45806: PUSH
45807: LD_INT 1
45809: NEG
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: PUSH
45815: LD_INT 2
45817: NEG
45818: PUSH
45819: LD_INT 2
45821: NEG
45822: PUSH
45823: EMPTY
45824: LIST
45825: LIST
45826: PUSH
45827: LD_INT 2
45829: NEG
45830: PUSH
45831: LD_INT 3
45833: NEG
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: PUSH
45839: LD_INT 2
45841: PUSH
45842: LD_INT 1
45844: NEG
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: PUSH
45850: LD_INT 3
45852: PUSH
45853: LD_INT 1
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 1
45862: PUSH
45863: LD_INT 3
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: LD_INT 1
45872: NEG
45873: PUSH
45874: LD_INT 2
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: PUSH
45881: LD_INT 3
45883: NEG
45884: PUSH
45885: LD_INT 2
45887: NEG
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: LIST
45899: LIST
45900: LIST
45901: LIST
45902: LIST
45903: LIST
45904: LIST
45905: LIST
45906: LIST
45907: LIST
45908: LIST
45909: LIST
45910: LIST
45911: LIST
45912: LIST
45913: LIST
45914: LIST
45915: LIST
45916: LIST
45917: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45918: LD_ADDR_VAR 0 34
45922: PUSH
45923: LD_INT 0
45925: PUSH
45926: LD_INT 0
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: LD_INT 0
45935: PUSH
45936: LD_INT 1
45938: NEG
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: PUSH
45944: LD_INT 1
45946: PUSH
45947: LD_INT 0
45949: PUSH
45950: EMPTY
45951: LIST
45952: LIST
45953: PUSH
45954: LD_INT 1
45956: PUSH
45957: LD_INT 1
45959: PUSH
45960: EMPTY
45961: LIST
45962: LIST
45963: PUSH
45964: LD_INT 0
45966: PUSH
45967: LD_INT 1
45969: PUSH
45970: EMPTY
45971: LIST
45972: LIST
45973: PUSH
45974: LD_INT 1
45976: NEG
45977: PUSH
45978: LD_INT 0
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: PUSH
45985: LD_INT 1
45987: NEG
45988: PUSH
45989: LD_INT 1
45991: NEG
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: PUSH
45997: LD_INT 1
45999: NEG
46000: PUSH
46001: LD_INT 2
46003: NEG
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: PUSH
46009: LD_INT 0
46011: PUSH
46012: LD_INT 2
46014: NEG
46015: PUSH
46016: EMPTY
46017: LIST
46018: LIST
46019: PUSH
46020: LD_INT 1
46022: PUSH
46023: LD_INT 1
46025: NEG
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: PUSH
46031: LD_INT 2
46033: PUSH
46034: LD_INT 1
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: LD_INT 2
46043: PUSH
46044: LD_INT 2
46046: PUSH
46047: EMPTY
46048: LIST
46049: LIST
46050: PUSH
46051: LD_INT 1
46053: PUSH
46054: LD_INT 2
46056: PUSH
46057: EMPTY
46058: LIST
46059: LIST
46060: PUSH
46061: LD_INT 1
46063: NEG
46064: PUSH
46065: LD_INT 1
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: PUSH
46072: LD_INT 2
46074: NEG
46075: PUSH
46076: LD_INT 0
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: PUSH
46083: LD_INT 2
46085: NEG
46086: PUSH
46087: LD_INT 1
46089: NEG
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: PUSH
46095: LD_INT 2
46097: NEG
46098: PUSH
46099: LD_INT 2
46101: NEG
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: PUSH
46107: LD_INT 1
46109: NEG
46110: PUSH
46111: LD_INT 3
46113: NEG
46114: PUSH
46115: EMPTY
46116: LIST
46117: LIST
46118: PUSH
46119: LD_INT 1
46121: PUSH
46122: LD_INT 2
46124: NEG
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 3
46132: PUSH
46133: LD_INT 2
46135: PUSH
46136: EMPTY
46137: LIST
46138: LIST
46139: PUSH
46140: LD_INT 2
46142: PUSH
46143: LD_INT 3
46145: PUSH
46146: EMPTY
46147: LIST
46148: LIST
46149: PUSH
46150: LD_INT 2
46152: NEG
46153: PUSH
46154: LD_INT 1
46156: PUSH
46157: EMPTY
46158: LIST
46159: LIST
46160: PUSH
46161: LD_INT 3
46163: NEG
46164: PUSH
46165: LD_INT 1
46167: NEG
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: PUSH
46173: EMPTY
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: LIST
46190: LIST
46191: LIST
46192: LIST
46193: LIST
46194: LIST
46195: LIST
46196: LIST
46197: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46198: LD_ADDR_VAR 0 35
46202: PUSH
46203: LD_INT 0
46205: PUSH
46206: LD_INT 0
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PUSH
46213: LD_INT 0
46215: PUSH
46216: LD_INT 1
46218: NEG
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 1
46226: PUSH
46227: LD_INT 0
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: PUSH
46234: LD_INT 1
46236: PUSH
46237: LD_INT 1
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: PUSH
46244: LD_INT 0
46246: PUSH
46247: LD_INT 1
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: PUSH
46254: LD_INT 1
46256: NEG
46257: PUSH
46258: LD_INT 0
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: PUSH
46265: LD_INT 1
46267: NEG
46268: PUSH
46269: LD_INT 1
46271: NEG
46272: PUSH
46273: EMPTY
46274: LIST
46275: LIST
46276: PUSH
46277: LD_INT 2
46279: PUSH
46280: LD_INT 1
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: PUSH
46287: LD_INT 2
46289: NEG
46290: PUSH
46291: LD_INT 1
46293: NEG
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: LIST
46303: LIST
46304: LIST
46305: LIST
46306: LIST
46307: LIST
46308: LIST
46309: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46310: LD_ADDR_VAR 0 36
46314: PUSH
46315: LD_INT 0
46317: PUSH
46318: LD_INT 0
46320: PUSH
46321: EMPTY
46322: LIST
46323: LIST
46324: PUSH
46325: LD_INT 0
46327: PUSH
46328: LD_INT 1
46330: NEG
46331: PUSH
46332: EMPTY
46333: LIST
46334: LIST
46335: PUSH
46336: LD_INT 1
46338: PUSH
46339: LD_INT 0
46341: PUSH
46342: EMPTY
46343: LIST
46344: LIST
46345: PUSH
46346: LD_INT 1
46348: PUSH
46349: LD_INT 1
46351: PUSH
46352: EMPTY
46353: LIST
46354: LIST
46355: PUSH
46356: LD_INT 0
46358: PUSH
46359: LD_INT 1
46361: PUSH
46362: EMPTY
46363: LIST
46364: LIST
46365: PUSH
46366: LD_INT 1
46368: NEG
46369: PUSH
46370: LD_INT 0
46372: PUSH
46373: EMPTY
46374: LIST
46375: LIST
46376: PUSH
46377: LD_INT 1
46379: NEG
46380: PUSH
46381: LD_INT 1
46383: NEG
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: PUSH
46389: LD_INT 1
46391: NEG
46392: PUSH
46393: LD_INT 2
46395: NEG
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: PUSH
46401: LD_INT 1
46403: PUSH
46404: LD_INT 2
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: LIST
46415: LIST
46416: LIST
46417: LIST
46418: LIST
46419: LIST
46420: LIST
46421: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46422: LD_ADDR_VAR 0 37
46426: PUSH
46427: LD_INT 0
46429: PUSH
46430: LD_INT 0
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: LD_INT 0
46439: PUSH
46440: LD_INT 1
46442: NEG
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: PUSH
46448: LD_INT 1
46450: PUSH
46451: LD_INT 0
46453: PUSH
46454: EMPTY
46455: LIST
46456: LIST
46457: PUSH
46458: LD_INT 1
46460: PUSH
46461: LD_INT 1
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: PUSH
46468: LD_INT 0
46470: PUSH
46471: LD_INT 1
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 1
46480: NEG
46481: PUSH
46482: LD_INT 0
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: PUSH
46489: LD_INT 1
46491: NEG
46492: PUSH
46493: LD_INT 1
46495: NEG
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: PUSH
46501: LD_INT 1
46503: PUSH
46504: LD_INT 1
46506: NEG
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: PUSH
46512: LD_INT 1
46514: NEG
46515: PUSH
46516: LD_INT 1
46518: PUSH
46519: EMPTY
46520: LIST
46521: LIST
46522: PUSH
46523: EMPTY
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46534: LD_ADDR_VAR 0 38
46538: PUSH
46539: LD_INT 0
46541: PUSH
46542: LD_INT 0
46544: PUSH
46545: EMPTY
46546: LIST
46547: LIST
46548: PUSH
46549: LD_INT 0
46551: PUSH
46552: LD_INT 1
46554: NEG
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: PUSH
46560: LD_INT 1
46562: PUSH
46563: LD_INT 0
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: PUSH
46570: LD_INT 1
46572: PUSH
46573: LD_INT 1
46575: PUSH
46576: EMPTY
46577: LIST
46578: LIST
46579: PUSH
46580: LD_INT 0
46582: PUSH
46583: LD_INT 1
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: PUSH
46590: LD_INT 1
46592: NEG
46593: PUSH
46594: LD_INT 0
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: PUSH
46601: LD_INT 1
46603: NEG
46604: PUSH
46605: LD_INT 1
46607: NEG
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: LD_INT 2
46615: PUSH
46616: LD_INT 1
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 2
46625: NEG
46626: PUSH
46627: LD_INT 1
46629: NEG
46630: PUSH
46631: EMPTY
46632: LIST
46633: LIST
46634: PUSH
46635: EMPTY
46636: LIST
46637: LIST
46638: LIST
46639: LIST
46640: LIST
46641: LIST
46642: LIST
46643: LIST
46644: LIST
46645: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46646: LD_ADDR_VAR 0 39
46650: PUSH
46651: LD_INT 0
46653: PUSH
46654: LD_INT 0
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: PUSH
46661: LD_INT 0
46663: PUSH
46664: LD_INT 1
46666: NEG
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: PUSH
46672: LD_INT 1
46674: PUSH
46675: LD_INT 0
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: LD_INT 1
46684: PUSH
46685: LD_INT 1
46687: PUSH
46688: EMPTY
46689: LIST
46690: LIST
46691: PUSH
46692: LD_INT 0
46694: PUSH
46695: LD_INT 1
46697: PUSH
46698: EMPTY
46699: LIST
46700: LIST
46701: PUSH
46702: LD_INT 1
46704: NEG
46705: PUSH
46706: LD_INT 0
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: PUSH
46713: LD_INT 1
46715: NEG
46716: PUSH
46717: LD_INT 1
46719: NEG
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: PUSH
46725: LD_INT 1
46727: NEG
46728: PUSH
46729: LD_INT 2
46731: NEG
46732: PUSH
46733: EMPTY
46734: LIST
46735: LIST
46736: PUSH
46737: LD_INT 1
46739: PUSH
46740: LD_INT 2
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: PUSH
46747: EMPTY
46748: LIST
46749: LIST
46750: LIST
46751: LIST
46752: LIST
46753: LIST
46754: LIST
46755: LIST
46756: LIST
46757: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46758: LD_ADDR_VAR 0 40
46762: PUSH
46763: LD_INT 0
46765: PUSH
46766: LD_INT 0
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: PUSH
46773: LD_INT 0
46775: PUSH
46776: LD_INT 1
46778: NEG
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: PUSH
46784: LD_INT 1
46786: PUSH
46787: LD_INT 0
46789: PUSH
46790: EMPTY
46791: LIST
46792: LIST
46793: PUSH
46794: LD_INT 1
46796: PUSH
46797: LD_INT 1
46799: PUSH
46800: EMPTY
46801: LIST
46802: LIST
46803: PUSH
46804: LD_INT 0
46806: PUSH
46807: LD_INT 1
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: PUSH
46814: LD_INT 1
46816: NEG
46817: PUSH
46818: LD_INT 0
46820: PUSH
46821: EMPTY
46822: LIST
46823: LIST
46824: PUSH
46825: LD_INT 1
46827: NEG
46828: PUSH
46829: LD_INT 1
46831: NEG
46832: PUSH
46833: EMPTY
46834: LIST
46835: LIST
46836: PUSH
46837: LD_INT 1
46839: PUSH
46840: LD_INT 1
46842: NEG
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: PUSH
46848: LD_INT 1
46850: NEG
46851: PUSH
46852: LD_INT 1
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: LIST
46863: LIST
46864: LIST
46865: LIST
46866: LIST
46867: LIST
46868: LIST
46869: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46870: LD_ADDR_VAR 0 41
46874: PUSH
46875: LD_INT 0
46877: PUSH
46878: LD_INT 0
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: PUSH
46885: LD_INT 0
46887: PUSH
46888: LD_INT 1
46890: NEG
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: PUSH
46896: LD_INT 1
46898: PUSH
46899: LD_INT 0
46901: PUSH
46902: EMPTY
46903: LIST
46904: LIST
46905: PUSH
46906: LD_INT 1
46908: PUSH
46909: LD_INT 1
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: PUSH
46916: LD_INT 0
46918: PUSH
46919: LD_INT 1
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: PUSH
46926: LD_INT 1
46928: NEG
46929: PUSH
46930: LD_INT 0
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: PUSH
46937: LD_INT 1
46939: NEG
46940: PUSH
46941: LD_INT 1
46943: NEG
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: PUSH
46949: LD_INT 1
46951: NEG
46952: PUSH
46953: LD_INT 2
46955: NEG
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 1
46963: PUSH
46964: LD_INT 1
46966: NEG
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: PUSH
46972: LD_INT 2
46974: PUSH
46975: LD_INT 0
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: LD_INT 2
46984: PUSH
46985: LD_INT 1
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: PUSH
46992: LD_INT 2
46994: PUSH
46995: LD_INT 2
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: LD_INT 1
47004: PUSH
47005: LD_INT 2
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: LD_INT 1
47014: NEG
47015: PUSH
47016: LD_INT 1
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: LD_INT 2
47025: NEG
47026: PUSH
47027: LD_INT 0
47029: PUSH
47030: EMPTY
47031: LIST
47032: LIST
47033: PUSH
47034: LD_INT 2
47036: NEG
47037: PUSH
47038: LD_INT 1
47040: NEG
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 2
47048: NEG
47049: PUSH
47050: LD_INT 2
47052: NEG
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 2
47060: NEG
47061: PUSH
47062: LD_INT 3
47064: NEG
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: LD_INT 2
47072: PUSH
47073: LD_INT 1
47075: NEG
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: PUSH
47081: LD_INT 3
47083: PUSH
47084: LD_INT 0
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: PUSH
47091: LD_INT 3
47093: PUSH
47094: LD_INT 1
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: PUSH
47101: LD_INT 3
47103: PUSH
47104: LD_INT 2
47106: PUSH
47107: EMPTY
47108: LIST
47109: LIST
47110: PUSH
47111: LD_INT 3
47113: PUSH
47114: LD_INT 3
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: PUSH
47121: LD_INT 2
47123: PUSH
47124: LD_INT 3
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: PUSH
47131: LD_INT 2
47133: NEG
47134: PUSH
47135: LD_INT 1
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: PUSH
47142: LD_INT 3
47144: NEG
47145: PUSH
47146: LD_INT 0
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: LD_INT 3
47155: NEG
47156: PUSH
47157: LD_INT 1
47159: NEG
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: PUSH
47165: LD_INT 3
47167: NEG
47168: PUSH
47169: LD_INT 2
47171: NEG
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: PUSH
47177: LD_INT 3
47179: NEG
47180: PUSH
47181: LD_INT 3
47183: NEG
47184: PUSH
47185: EMPTY
47186: LIST
47187: LIST
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: LIST
47193: LIST
47194: LIST
47195: LIST
47196: LIST
47197: LIST
47198: LIST
47199: LIST
47200: LIST
47201: LIST
47202: LIST
47203: LIST
47204: LIST
47205: LIST
47206: LIST
47207: LIST
47208: LIST
47209: LIST
47210: LIST
47211: LIST
47212: LIST
47213: LIST
47214: LIST
47215: LIST
47216: LIST
47217: LIST
47218: LIST
47219: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47220: LD_ADDR_VAR 0 42
47224: PUSH
47225: LD_INT 0
47227: PUSH
47228: LD_INT 0
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: PUSH
47235: LD_INT 0
47237: PUSH
47238: LD_INT 1
47240: NEG
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: LD_INT 1
47248: PUSH
47249: LD_INT 0
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 1
47258: PUSH
47259: LD_INT 1
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: LD_INT 0
47268: PUSH
47269: LD_INT 1
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 1
47278: NEG
47279: PUSH
47280: LD_INT 0
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: LD_INT 1
47289: NEG
47290: PUSH
47291: LD_INT 1
47293: NEG
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PUSH
47299: LD_INT 1
47301: NEG
47302: PUSH
47303: LD_INT 2
47305: NEG
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: PUSH
47311: LD_INT 0
47313: PUSH
47314: LD_INT 2
47316: NEG
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: PUSH
47322: LD_INT 1
47324: PUSH
47325: LD_INT 1
47327: NEG
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 2
47335: PUSH
47336: LD_INT 1
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 2
47345: PUSH
47346: LD_INT 2
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: LD_INT 1
47355: PUSH
47356: LD_INT 2
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 0
47365: PUSH
47366: LD_INT 2
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: LD_INT 1
47375: NEG
47376: PUSH
47377: LD_INT 1
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: PUSH
47384: LD_INT 2
47386: NEG
47387: PUSH
47388: LD_INT 1
47390: NEG
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: PUSH
47396: LD_INT 2
47398: NEG
47399: PUSH
47400: LD_INT 2
47402: NEG
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: PUSH
47408: LD_INT 2
47410: NEG
47411: PUSH
47412: LD_INT 3
47414: NEG
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: PUSH
47420: LD_INT 1
47422: NEG
47423: PUSH
47424: LD_INT 3
47426: NEG
47427: PUSH
47428: EMPTY
47429: LIST
47430: LIST
47431: PUSH
47432: LD_INT 0
47434: PUSH
47435: LD_INT 3
47437: NEG
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: PUSH
47443: LD_INT 1
47445: PUSH
47446: LD_INT 2
47448: NEG
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: PUSH
47454: LD_INT 3
47456: PUSH
47457: LD_INT 2
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: LD_INT 3
47466: PUSH
47467: LD_INT 3
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: PUSH
47474: LD_INT 2
47476: PUSH
47477: LD_INT 3
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: PUSH
47484: LD_INT 1
47486: PUSH
47487: LD_INT 3
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: PUSH
47494: LD_INT 0
47496: PUSH
47497: LD_INT 3
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: LD_INT 1
47506: NEG
47507: PUSH
47508: LD_INT 2
47510: PUSH
47511: EMPTY
47512: LIST
47513: LIST
47514: PUSH
47515: LD_INT 3
47517: NEG
47518: PUSH
47519: LD_INT 2
47521: NEG
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: LD_INT 3
47529: NEG
47530: PUSH
47531: LD_INT 3
47533: NEG
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: LIST
47543: LIST
47544: LIST
47545: LIST
47546: LIST
47547: LIST
47548: LIST
47549: LIST
47550: LIST
47551: LIST
47552: LIST
47553: LIST
47554: LIST
47555: LIST
47556: LIST
47557: LIST
47558: LIST
47559: LIST
47560: LIST
47561: LIST
47562: LIST
47563: LIST
47564: LIST
47565: LIST
47566: LIST
47567: LIST
47568: LIST
47569: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47570: LD_ADDR_VAR 0 43
47574: PUSH
47575: LD_INT 0
47577: PUSH
47578: LD_INT 0
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: LD_INT 0
47587: PUSH
47588: LD_INT 1
47590: NEG
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: PUSH
47596: LD_INT 1
47598: PUSH
47599: LD_INT 0
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: PUSH
47606: LD_INT 1
47608: PUSH
47609: LD_INT 1
47611: PUSH
47612: EMPTY
47613: LIST
47614: LIST
47615: PUSH
47616: LD_INT 0
47618: PUSH
47619: LD_INT 1
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: PUSH
47626: LD_INT 1
47628: NEG
47629: PUSH
47630: LD_INT 0
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: PUSH
47637: LD_INT 1
47639: NEG
47640: PUSH
47641: LD_INT 1
47643: NEG
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: PUSH
47649: LD_INT 1
47651: NEG
47652: PUSH
47653: LD_INT 2
47655: NEG
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 0
47663: PUSH
47664: LD_INT 2
47666: NEG
47667: PUSH
47668: EMPTY
47669: LIST
47670: LIST
47671: PUSH
47672: LD_INT 1
47674: PUSH
47675: LD_INT 1
47677: NEG
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: LD_INT 2
47685: PUSH
47686: LD_INT 0
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: LD_INT 2
47695: PUSH
47696: LD_INT 1
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: PUSH
47703: LD_INT 1
47705: PUSH
47706: LD_INT 2
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: PUSH
47713: LD_INT 0
47715: PUSH
47716: LD_INT 2
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: PUSH
47723: LD_INT 1
47725: NEG
47726: PUSH
47727: LD_INT 1
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: PUSH
47734: LD_INT 2
47736: NEG
47737: PUSH
47738: LD_INT 0
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: LD_INT 2
47747: NEG
47748: PUSH
47749: LD_INT 1
47751: NEG
47752: PUSH
47753: EMPTY
47754: LIST
47755: LIST
47756: PUSH
47757: LD_INT 1
47759: NEG
47760: PUSH
47761: LD_INT 3
47763: NEG
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: PUSH
47769: LD_INT 0
47771: PUSH
47772: LD_INT 3
47774: NEG
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: LD_INT 1
47782: PUSH
47783: LD_INT 2
47785: NEG
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 2
47793: PUSH
47794: LD_INT 1
47796: NEG
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: LD_INT 3
47804: PUSH
47805: LD_INT 0
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 3
47814: PUSH
47815: LD_INT 1
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 1
47824: PUSH
47825: LD_INT 3
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: LD_INT 0
47834: PUSH
47835: LD_INT 3
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: PUSH
47842: LD_INT 1
47844: NEG
47845: PUSH
47846: LD_INT 2
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: LD_INT 2
47855: NEG
47856: PUSH
47857: LD_INT 1
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: PUSH
47864: LD_INT 3
47866: NEG
47867: PUSH
47868: LD_INT 0
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 3
47877: NEG
47878: PUSH
47879: LD_INT 1
47881: NEG
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: LIST
47891: LIST
47892: LIST
47893: LIST
47894: LIST
47895: LIST
47896: LIST
47897: LIST
47898: LIST
47899: LIST
47900: LIST
47901: LIST
47902: LIST
47903: LIST
47904: LIST
47905: LIST
47906: LIST
47907: LIST
47908: LIST
47909: LIST
47910: LIST
47911: LIST
47912: LIST
47913: LIST
47914: LIST
47915: LIST
47916: LIST
47917: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47918: LD_ADDR_VAR 0 44
47922: PUSH
47923: LD_INT 0
47925: PUSH
47926: LD_INT 0
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: PUSH
47933: LD_INT 0
47935: PUSH
47936: LD_INT 1
47938: NEG
47939: PUSH
47940: EMPTY
47941: LIST
47942: LIST
47943: PUSH
47944: LD_INT 1
47946: PUSH
47947: LD_INT 0
47949: PUSH
47950: EMPTY
47951: LIST
47952: LIST
47953: PUSH
47954: LD_INT 1
47956: PUSH
47957: LD_INT 1
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: PUSH
47964: LD_INT 0
47966: PUSH
47967: LD_INT 1
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: LD_INT 1
47976: NEG
47977: PUSH
47978: LD_INT 0
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: LD_INT 1
47987: NEG
47988: PUSH
47989: LD_INT 1
47991: NEG
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: PUSH
47997: LD_INT 1
47999: NEG
48000: PUSH
48001: LD_INT 2
48003: NEG
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: LD_INT 1
48011: PUSH
48012: LD_INT 1
48014: NEG
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: PUSH
48020: LD_INT 2
48022: PUSH
48023: LD_INT 0
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: LD_INT 2
48032: PUSH
48033: LD_INT 1
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: PUSH
48040: LD_INT 2
48042: PUSH
48043: LD_INT 2
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 1
48052: PUSH
48053: LD_INT 2
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: PUSH
48060: LD_INT 1
48062: NEG
48063: PUSH
48064: LD_INT 1
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: PUSH
48071: LD_INT 2
48073: NEG
48074: PUSH
48075: LD_INT 0
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: PUSH
48082: LD_INT 2
48084: NEG
48085: PUSH
48086: LD_INT 1
48088: NEG
48089: PUSH
48090: EMPTY
48091: LIST
48092: LIST
48093: PUSH
48094: LD_INT 2
48096: NEG
48097: PUSH
48098: LD_INT 2
48100: NEG
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: PUSH
48106: LD_INT 2
48108: NEG
48109: PUSH
48110: LD_INT 3
48112: NEG
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: LD_INT 2
48120: PUSH
48121: LD_INT 1
48123: NEG
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: PUSH
48129: LD_INT 3
48131: PUSH
48132: LD_INT 0
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: PUSH
48139: LD_INT 3
48141: PUSH
48142: LD_INT 1
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: LD_INT 3
48151: PUSH
48152: LD_INT 2
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: PUSH
48159: LD_INT 3
48161: PUSH
48162: LD_INT 3
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: PUSH
48169: LD_INT 2
48171: PUSH
48172: LD_INT 3
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: PUSH
48179: LD_INT 2
48181: NEG
48182: PUSH
48183: LD_INT 1
48185: PUSH
48186: EMPTY
48187: LIST
48188: LIST
48189: PUSH
48190: LD_INT 3
48192: NEG
48193: PUSH
48194: LD_INT 0
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: PUSH
48201: LD_INT 3
48203: NEG
48204: PUSH
48205: LD_INT 1
48207: NEG
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: PUSH
48213: LD_INT 3
48215: NEG
48216: PUSH
48217: LD_INT 2
48219: NEG
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: PUSH
48225: LD_INT 3
48227: NEG
48228: PUSH
48229: LD_INT 3
48231: NEG
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: PUSH
48237: EMPTY
48238: LIST
48239: LIST
48240: LIST
48241: LIST
48242: LIST
48243: LIST
48244: LIST
48245: LIST
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: LIST
48251: LIST
48252: LIST
48253: LIST
48254: LIST
48255: LIST
48256: LIST
48257: LIST
48258: LIST
48259: LIST
48260: LIST
48261: LIST
48262: LIST
48263: LIST
48264: LIST
48265: LIST
48266: LIST
48267: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48268: LD_ADDR_VAR 0 45
48272: PUSH
48273: LD_INT 0
48275: PUSH
48276: LD_INT 0
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: PUSH
48283: LD_INT 0
48285: PUSH
48286: LD_INT 1
48288: NEG
48289: PUSH
48290: EMPTY
48291: LIST
48292: LIST
48293: PUSH
48294: LD_INT 1
48296: PUSH
48297: LD_INT 0
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: PUSH
48304: LD_INT 1
48306: PUSH
48307: LD_INT 1
48309: PUSH
48310: EMPTY
48311: LIST
48312: LIST
48313: PUSH
48314: LD_INT 0
48316: PUSH
48317: LD_INT 1
48319: PUSH
48320: EMPTY
48321: LIST
48322: LIST
48323: PUSH
48324: LD_INT 1
48326: NEG
48327: PUSH
48328: LD_INT 0
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: PUSH
48335: LD_INT 1
48337: NEG
48338: PUSH
48339: LD_INT 1
48341: NEG
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: PUSH
48347: LD_INT 1
48349: NEG
48350: PUSH
48351: LD_INT 2
48353: NEG
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: PUSH
48359: LD_INT 0
48361: PUSH
48362: LD_INT 2
48364: NEG
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: LD_INT 1
48372: PUSH
48373: LD_INT 1
48375: NEG
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: LD_INT 2
48383: PUSH
48384: LD_INT 1
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: LD_INT 2
48393: PUSH
48394: LD_INT 2
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 1
48403: PUSH
48404: LD_INT 2
48406: PUSH
48407: EMPTY
48408: LIST
48409: LIST
48410: PUSH
48411: LD_INT 0
48413: PUSH
48414: LD_INT 2
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: PUSH
48421: LD_INT 1
48423: NEG
48424: PUSH
48425: LD_INT 1
48427: PUSH
48428: EMPTY
48429: LIST
48430: LIST
48431: PUSH
48432: LD_INT 2
48434: NEG
48435: PUSH
48436: LD_INT 1
48438: NEG
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: LD_INT 2
48446: NEG
48447: PUSH
48448: LD_INT 2
48450: NEG
48451: PUSH
48452: EMPTY
48453: LIST
48454: LIST
48455: PUSH
48456: LD_INT 2
48458: NEG
48459: PUSH
48460: LD_INT 3
48462: NEG
48463: PUSH
48464: EMPTY
48465: LIST
48466: LIST
48467: PUSH
48468: LD_INT 1
48470: NEG
48471: PUSH
48472: LD_INT 3
48474: NEG
48475: PUSH
48476: EMPTY
48477: LIST
48478: LIST
48479: PUSH
48480: LD_INT 0
48482: PUSH
48483: LD_INT 3
48485: NEG
48486: PUSH
48487: EMPTY
48488: LIST
48489: LIST
48490: PUSH
48491: LD_INT 1
48493: PUSH
48494: LD_INT 2
48496: NEG
48497: PUSH
48498: EMPTY
48499: LIST
48500: LIST
48501: PUSH
48502: LD_INT 3
48504: PUSH
48505: LD_INT 2
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: LD_INT 3
48514: PUSH
48515: LD_INT 3
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: LD_INT 2
48524: PUSH
48525: LD_INT 3
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: PUSH
48532: LD_INT 1
48534: PUSH
48535: LD_INT 3
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: LD_INT 0
48544: PUSH
48545: LD_INT 3
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 1
48554: NEG
48555: PUSH
48556: LD_INT 2
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: LD_INT 3
48565: NEG
48566: PUSH
48567: LD_INT 2
48569: NEG
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: PUSH
48575: LD_INT 3
48577: NEG
48578: PUSH
48579: LD_INT 3
48581: NEG
48582: PUSH
48583: EMPTY
48584: LIST
48585: LIST
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: LIST
48591: LIST
48592: LIST
48593: LIST
48594: LIST
48595: LIST
48596: LIST
48597: LIST
48598: LIST
48599: LIST
48600: LIST
48601: LIST
48602: LIST
48603: LIST
48604: LIST
48605: LIST
48606: LIST
48607: LIST
48608: LIST
48609: LIST
48610: LIST
48611: LIST
48612: LIST
48613: LIST
48614: LIST
48615: LIST
48616: LIST
48617: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48618: LD_ADDR_VAR 0 46
48622: PUSH
48623: LD_INT 0
48625: PUSH
48626: LD_INT 0
48628: PUSH
48629: EMPTY
48630: LIST
48631: LIST
48632: PUSH
48633: LD_INT 0
48635: PUSH
48636: LD_INT 1
48638: NEG
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: PUSH
48644: LD_INT 1
48646: PUSH
48647: LD_INT 0
48649: PUSH
48650: EMPTY
48651: LIST
48652: LIST
48653: PUSH
48654: LD_INT 1
48656: PUSH
48657: LD_INT 1
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: PUSH
48664: LD_INT 0
48666: PUSH
48667: LD_INT 1
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: PUSH
48674: LD_INT 1
48676: NEG
48677: PUSH
48678: LD_INT 0
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: PUSH
48685: LD_INT 1
48687: NEG
48688: PUSH
48689: LD_INT 1
48691: NEG
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: PUSH
48697: LD_INT 1
48699: NEG
48700: PUSH
48701: LD_INT 2
48703: NEG
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: LD_INT 0
48711: PUSH
48712: LD_INT 2
48714: NEG
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: PUSH
48720: LD_INT 1
48722: PUSH
48723: LD_INT 1
48725: NEG
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: PUSH
48731: LD_INT 2
48733: PUSH
48734: LD_INT 0
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: LD_INT 2
48743: PUSH
48744: LD_INT 1
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: PUSH
48751: LD_INT 1
48753: PUSH
48754: LD_INT 2
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: PUSH
48761: LD_INT 0
48763: PUSH
48764: LD_INT 2
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: LD_INT 1
48773: NEG
48774: PUSH
48775: LD_INT 1
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: LD_INT 2
48784: NEG
48785: PUSH
48786: LD_INT 0
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: PUSH
48793: LD_INT 2
48795: NEG
48796: PUSH
48797: LD_INT 1
48799: NEG
48800: PUSH
48801: EMPTY
48802: LIST
48803: LIST
48804: PUSH
48805: LD_INT 1
48807: NEG
48808: PUSH
48809: LD_INT 3
48811: NEG
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: LD_INT 0
48819: PUSH
48820: LD_INT 3
48822: NEG
48823: PUSH
48824: EMPTY
48825: LIST
48826: LIST
48827: PUSH
48828: LD_INT 1
48830: PUSH
48831: LD_INT 2
48833: NEG
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: PUSH
48839: LD_INT 2
48841: PUSH
48842: LD_INT 1
48844: NEG
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: LD_INT 3
48852: PUSH
48853: LD_INT 0
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: LD_INT 3
48862: PUSH
48863: LD_INT 1
48865: PUSH
48866: EMPTY
48867: LIST
48868: LIST
48869: PUSH
48870: LD_INT 1
48872: PUSH
48873: LD_INT 3
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: PUSH
48880: LD_INT 0
48882: PUSH
48883: LD_INT 3
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: PUSH
48890: LD_INT 1
48892: NEG
48893: PUSH
48894: LD_INT 2
48896: PUSH
48897: EMPTY
48898: LIST
48899: LIST
48900: PUSH
48901: LD_INT 2
48903: NEG
48904: PUSH
48905: LD_INT 1
48907: PUSH
48908: EMPTY
48909: LIST
48910: LIST
48911: PUSH
48912: LD_INT 3
48914: NEG
48915: PUSH
48916: LD_INT 0
48918: PUSH
48919: EMPTY
48920: LIST
48921: LIST
48922: PUSH
48923: LD_INT 3
48925: NEG
48926: PUSH
48927: LD_INT 1
48929: NEG
48930: PUSH
48931: EMPTY
48932: LIST
48933: LIST
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: LIST
48939: LIST
48940: LIST
48941: LIST
48942: LIST
48943: LIST
48944: LIST
48945: LIST
48946: LIST
48947: LIST
48948: LIST
48949: LIST
48950: LIST
48951: LIST
48952: LIST
48953: LIST
48954: LIST
48955: LIST
48956: LIST
48957: LIST
48958: LIST
48959: LIST
48960: LIST
48961: LIST
48962: LIST
48963: LIST
48964: LIST
48965: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48966: LD_ADDR_VAR 0 47
48970: PUSH
48971: LD_INT 0
48973: PUSH
48974: LD_INT 0
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: PUSH
48981: LD_INT 0
48983: PUSH
48984: LD_INT 1
48986: NEG
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: LD_INT 1
48994: PUSH
48995: LD_INT 0
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: PUSH
49002: LD_INT 1
49004: PUSH
49005: LD_INT 1
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: PUSH
49012: LD_INT 0
49014: PUSH
49015: LD_INT 1
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: PUSH
49022: LD_INT 1
49024: NEG
49025: PUSH
49026: LD_INT 0
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: PUSH
49033: LD_INT 1
49035: NEG
49036: PUSH
49037: LD_INT 1
49039: NEG
49040: PUSH
49041: EMPTY
49042: LIST
49043: LIST
49044: PUSH
49045: LD_INT 1
49047: NEG
49048: PUSH
49049: LD_INT 2
49051: NEG
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: PUSH
49057: LD_INT 0
49059: PUSH
49060: LD_INT 2
49062: NEG
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: LD_INT 1
49070: PUSH
49071: LD_INT 1
49073: NEG
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: LD_INT 2
49081: NEG
49082: PUSH
49083: LD_INT 1
49085: NEG
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PUSH
49091: LD_INT 2
49093: NEG
49094: PUSH
49095: LD_INT 2
49097: NEG
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: LIST
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: LIST
49116: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49117: LD_ADDR_VAR 0 48
49121: PUSH
49122: LD_INT 0
49124: PUSH
49125: LD_INT 0
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: PUSH
49132: LD_INT 0
49134: PUSH
49135: LD_INT 1
49137: NEG
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: PUSH
49143: LD_INT 1
49145: PUSH
49146: LD_INT 0
49148: PUSH
49149: EMPTY
49150: LIST
49151: LIST
49152: PUSH
49153: LD_INT 1
49155: PUSH
49156: LD_INT 1
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: PUSH
49163: LD_INT 0
49165: PUSH
49166: LD_INT 1
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: PUSH
49173: LD_INT 1
49175: NEG
49176: PUSH
49177: LD_INT 0
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: PUSH
49184: LD_INT 1
49186: NEG
49187: PUSH
49188: LD_INT 1
49190: NEG
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: PUSH
49196: LD_INT 1
49198: NEG
49199: PUSH
49200: LD_INT 2
49202: NEG
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 0
49210: PUSH
49211: LD_INT 2
49213: NEG
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: PUSH
49219: LD_INT 1
49221: PUSH
49222: LD_INT 1
49224: NEG
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: PUSH
49230: LD_INT 2
49232: PUSH
49233: LD_INT 0
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: PUSH
49240: LD_INT 2
49242: PUSH
49243: LD_INT 1
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: LIST
49254: LIST
49255: LIST
49256: LIST
49257: LIST
49258: LIST
49259: LIST
49260: LIST
49261: LIST
49262: LIST
49263: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49264: LD_ADDR_VAR 0 49
49268: PUSH
49269: LD_INT 0
49271: PUSH
49272: LD_INT 0
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: PUSH
49279: LD_INT 0
49281: PUSH
49282: LD_INT 1
49284: NEG
49285: PUSH
49286: EMPTY
49287: LIST
49288: LIST
49289: PUSH
49290: LD_INT 1
49292: PUSH
49293: LD_INT 0
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: PUSH
49300: LD_INT 1
49302: PUSH
49303: LD_INT 1
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: PUSH
49310: LD_INT 0
49312: PUSH
49313: LD_INT 1
49315: PUSH
49316: EMPTY
49317: LIST
49318: LIST
49319: PUSH
49320: LD_INT 1
49322: NEG
49323: PUSH
49324: LD_INT 0
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: PUSH
49331: LD_INT 1
49333: NEG
49334: PUSH
49335: LD_INT 1
49337: NEG
49338: PUSH
49339: EMPTY
49340: LIST
49341: LIST
49342: PUSH
49343: LD_INT 1
49345: PUSH
49346: LD_INT 1
49348: NEG
49349: PUSH
49350: EMPTY
49351: LIST
49352: LIST
49353: PUSH
49354: LD_INT 2
49356: PUSH
49357: LD_INT 0
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: PUSH
49364: LD_INT 2
49366: PUSH
49367: LD_INT 1
49369: PUSH
49370: EMPTY
49371: LIST
49372: LIST
49373: PUSH
49374: LD_INT 2
49376: PUSH
49377: LD_INT 2
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: PUSH
49384: LD_INT 1
49386: PUSH
49387: LD_INT 2
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: LIST
49401: LIST
49402: LIST
49403: LIST
49404: LIST
49405: LIST
49406: LIST
49407: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49408: LD_ADDR_VAR 0 50
49412: PUSH
49413: LD_INT 0
49415: PUSH
49416: LD_INT 0
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: PUSH
49423: LD_INT 0
49425: PUSH
49426: LD_INT 1
49428: NEG
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: PUSH
49434: LD_INT 1
49436: PUSH
49437: LD_INT 0
49439: PUSH
49440: EMPTY
49441: LIST
49442: LIST
49443: PUSH
49444: LD_INT 1
49446: PUSH
49447: LD_INT 1
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: PUSH
49454: LD_INT 0
49456: PUSH
49457: LD_INT 1
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: PUSH
49464: LD_INT 1
49466: NEG
49467: PUSH
49468: LD_INT 0
49470: PUSH
49471: EMPTY
49472: LIST
49473: LIST
49474: PUSH
49475: LD_INT 1
49477: NEG
49478: PUSH
49479: LD_INT 1
49481: NEG
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: PUSH
49487: LD_INT 2
49489: PUSH
49490: LD_INT 1
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: PUSH
49497: LD_INT 2
49499: PUSH
49500: LD_INT 2
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: LD_INT 1
49509: PUSH
49510: LD_INT 2
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: PUSH
49517: LD_INT 0
49519: PUSH
49520: LD_INT 2
49522: PUSH
49523: EMPTY
49524: LIST
49525: LIST
49526: PUSH
49527: LD_INT 1
49529: NEG
49530: PUSH
49531: LD_INT 1
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: LIST
49542: LIST
49543: LIST
49544: LIST
49545: LIST
49546: LIST
49547: LIST
49548: LIST
49549: LIST
49550: LIST
49551: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49552: LD_ADDR_VAR 0 51
49556: PUSH
49557: LD_INT 0
49559: PUSH
49560: LD_INT 0
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: LD_INT 0
49569: PUSH
49570: LD_INT 1
49572: NEG
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: PUSH
49578: LD_INT 1
49580: PUSH
49581: LD_INT 0
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: PUSH
49588: LD_INT 1
49590: PUSH
49591: LD_INT 1
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: PUSH
49598: LD_INT 0
49600: PUSH
49601: LD_INT 1
49603: PUSH
49604: EMPTY
49605: LIST
49606: LIST
49607: PUSH
49608: LD_INT 1
49610: NEG
49611: PUSH
49612: LD_INT 0
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: PUSH
49619: LD_INT 1
49621: NEG
49622: PUSH
49623: LD_INT 1
49625: NEG
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: LD_INT 1
49633: PUSH
49634: LD_INT 2
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 0
49643: PUSH
49644: LD_INT 2
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 1
49653: NEG
49654: PUSH
49655: LD_INT 1
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PUSH
49662: LD_INT 2
49664: NEG
49665: PUSH
49666: LD_INT 0
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 2
49675: NEG
49676: PUSH
49677: LD_INT 1
49679: NEG
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: LIST
49689: LIST
49690: LIST
49691: LIST
49692: LIST
49693: LIST
49694: LIST
49695: LIST
49696: LIST
49697: LIST
49698: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49699: LD_ADDR_VAR 0 52
49703: PUSH
49704: LD_INT 0
49706: PUSH
49707: LD_INT 0
49709: PUSH
49710: EMPTY
49711: LIST
49712: LIST
49713: PUSH
49714: LD_INT 0
49716: PUSH
49717: LD_INT 1
49719: NEG
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: PUSH
49725: LD_INT 1
49727: PUSH
49728: LD_INT 0
49730: PUSH
49731: EMPTY
49732: LIST
49733: LIST
49734: PUSH
49735: LD_INT 1
49737: PUSH
49738: LD_INT 1
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: LD_INT 0
49747: PUSH
49748: LD_INT 1
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: LD_INT 1
49757: NEG
49758: PUSH
49759: LD_INT 0
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 1
49768: NEG
49769: PUSH
49770: LD_INT 1
49772: NEG
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: PUSH
49778: LD_INT 1
49780: NEG
49781: PUSH
49782: LD_INT 2
49784: NEG
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: PUSH
49790: LD_INT 1
49792: NEG
49793: PUSH
49794: LD_INT 1
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: PUSH
49801: LD_INT 2
49803: NEG
49804: PUSH
49805: LD_INT 0
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: LD_INT 2
49814: NEG
49815: PUSH
49816: LD_INT 1
49818: NEG
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: PUSH
49824: LD_INT 2
49826: NEG
49827: PUSH
49828: LD_INT 2
49830: NEG
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: LIST
49840: LIST
49841: LIST
49842: LIST
49843: LIST
49844: LIST
49845: LIST
49846: LIST
49847: LIST
49848: LIST
49849: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49850: LD_ADDR_VAR 0 53
49854: PUSH
49855: LD_INT 0
49857: PUSH
49858: LD_INT 0
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: PUSH
49865: LD_INT 0
49867: PUSH
49868: LD_INT 1
49870: NEG
49871: PUSH
49872: EMPTY
49873: LIST
49874: LIST
49875: PUSH
49876: LD_INT 1
49878: PUSH
49879: LD_INT 0
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: LD_INT 1
49888: PUSH
49889: LD_INT 1
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 0
49898: PUSH
49899: LD_INT 1
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: LD_INT 1
49908: NEG
49909: PUSH
49910: LD_INT 0
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: PUSH
49917: LD_INT 1
49919: NEG
49920: PUSH
49921: LD_INT 1
49923: NEG
49924: PUSH
49925: EMPTY
49926: LIST
49927: LIST
49928: PUSH
49929: LD_INT 1
49931: NEG
49932: PUSH
49933: LD_INT 2
49935: NEG
49936: PUSH
49937: EMPTY
49938: LIST
49939: LIST
49940: PUSH
49941: LD_INT 0
49943: PUSH
49944: LD_INT 2
49946: NEG
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: LD_INT 1
49954: PUSH
49955: LD_INT 1
49957: NEG
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: PUSH
49963: LD_INT 2
49965: PUSH
49966: LD_INT 0
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: PUSH
49973: LD_INT 2
49975: PUSH
49976: LD_INT 1
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: PUSH
49983: LD_INT 2
49985: PUSH
49986: LD_INT 2
49988: PUSH
49989: EMPTY
49990: LIST
49991: LIST
49992: PUSH
49993: LD_INT 1
49995: PUSH
49996: LD_INT 2
49998: PUSH
49999: EMPTY
50000: LIST
50001: LIST
50002: PUSH
50003: LD_INT 0
50005: PUSH
50006: LD_INT 2
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: PUSH
50013: LD_INT 1
50015: NEG
50016: PUSH
50017: LD_INT 1
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: PUSH
50024: LD_INT 2
50026: NEG
50027: PUSH
50028: LD_INT 0
50030: PUSH
50031: EMPTY
50032: LIST
50033: LIST
50034: PUSH
50035: LD_INT 2
50037: NEG
50038: PUSH
50039: LD_INT 1
50041: NEG
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: PUSH
50047: LD_INT 2
50049: NEG
50050: PUSH
50051: LD_INT 2
50053: NEG
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: PUSH
50059: EMPTY
50060: LIST
50061: LIST
50062: LIST
50063: LIST
50064: LIST
50065: LIST
50066: LIST
50067: LIST
50068: LIST
50069: LIST
50070: LIST
50071: LIST
50072: LIST
50073: LIST
50074: LIST
50075: LIST
50076: LIST
50077: LIST
50078: LIST
50079: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50080: LD_ADDR_VAR 0 54
50084: PUSH
50085: LD_INT 0
50087: PUSH
50088: LD_INT 0
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: LD_INT 0
50097: PUSH
50098: LD_INT 1
50100: NEG
50101: PUSH
50102: EMPTY
50103: LIST
50104: LIST
50105: PUSH
50106: LD_INT 1
50108: PUSH
50109: LD_INT 0
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: PUSH
50116: LD_INT 1
50118: PUSH
50119: LD_INT 1
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: LD_INT 0
50128: PUSH
50129: LD_INT 1
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: LD_INT 1
50138: NEG
50139: PUSH
50140: LD_INT 0
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: LD_INT 1
50149: NEG
50150: PUSH
50151: LD_INT 1
50153: NEG
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: PUSH
50159: LD_INT 1
50161: NEG
50162: PUSH
50163: LD_INT 2
50165: NEG
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: PUSH
50171: LD_INT 0
50173: PUSH
50174: LD_INT 2
50176: NEG
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: LD_INT 1
50184: PUSH
50185: LD_INT 1
50187: NEG
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 2
50195: PUSH
50196: LD_INT 0
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: PUSH
50203: LD_INT 2
50205: PUSH
50206: LD_INT 1
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: PUSH
50213: LD_INT 2
50215: PUSH
50216: LD_INT 2
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 1
50225: PUSH
50226: LD_INT 2
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: PUSH
50233: LD_INT 0
50235: PUSH
50236: LD_INT 2
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PUSH
50243: LD_INT 1
50245: NEG
50246: PUSH
50247: LD_INT 1
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: PUSH
50254: LD_INT 2
50256: NEG
50257: PUSH
50258: LD_INT 0
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: PUSH
50265: LD_INT 2
50267: NEG
50268: PUSH
50269: LD_INT 1
50271: NEG
50272: PUSH
50273: EMPTY
50274: LIST
50275: LIST
50276: PUSH
50277: LD_INT 2
50279: NEG
50280: PUSH
50281: LD_INT 2
50283: NEG
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: LIST
50293: LIST
50294: LIST
50295: LIST
50296: LIST
50297: LIST
50298: LIST
50299: LIST
50300: LIST
50301: LIST
50302: LIST
50303: LIST
50304: LIST
50305: LIST
50306: LIST
50307: LIST
50308: LIST
50309: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50310: LD_ADDR_VAR 0 55
50314: PUSH
50315: LD_INT 0
50317: PUSH
50318: LD_INT 0
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: LD_INT 0
50327: PUSH
50328: LD_INT 1
50330: NEG
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: PUSH
50336: LD_INT 1
50338: PUSH
50339: LD_INT 0
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: PUSH
50346: LD_INT 1
50348: PUSH
50349: LD_INT 1
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: PUSH
50356: LD_INT 0
50358: PUSH
50359: LD_INT 1
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: PUSH
50366: LD_INT 1
50368: NEG
50369: PUSH
50370: LD_INT 0
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PUSH
50377: LD_INT 1
50379: NEG
50380: PUSH
50381: LD_INT 1
50383: NEG
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PUSH
50389: LD_INT 1
50391: NEG
50392: PUSH
50393: LD_INT 2
50395: NEG
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: PUSH
50401: LD_INT 0
50403: PUSH
50404: LD_INT 2
50406: NEG
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: PUSH
50412: LD_INT 1
50414: PUSH
50415: LD_INT 1
50417: NEG
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: PUSH
50423: LD_INT 2
50425: PUSH
50426: LD_INT 0
50428: PUSH
50429: EMPTY
50430: LIST
50431: LIST
50432: PUSH
50433: LD_INT 2
50435: PUSH
50436: LD_INT 1
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: LD_INT 2
50445: PUSH
50446: LD_INT 2
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: LD_INT 1
50455: PUSH
50456: LD_INT 2
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: PUSH
50463: LD_INT 0
50465: PUSH
50466: LD_INT 2
50468: PUSH
50469: EMPTY
50470: LIST
50471: LIST
50472: PUSH
50473: LD_INT 1
50475: NEG
50476: PUSH
50477: LD_INT 1
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 2
50486: NEG
50487: PUSH
50488: LD_INT 0
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: LD_INT 2
50497: NEG
50498: PUSH
50499: LD_INT 1
50501: NEG
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: PUSH
50507: LD_INT 2
50509: NEG
50510: PUSH
50511: LD_INT 2
50513: NEG
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: LIST
50523: LIST
50524: LIST
50525: LIST
50526: LIST
50527: LIST
50528: LIST
50529: LIST
50530: LIST
50531: LIST
50532: LIST
50533: LIST
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50540: LD_ADDR_VAR 0 56
50544: PUSH
50545: LD_INT 0
50547: PUSH
50548: LD_INT 0
50550: PUSH
50551: EMPTY
50552: LIST
50553: LIST
50554: PUSH
50555: LD_INT 0
50557: PUSH
50558: LD_INT 1
50560: NEG
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: PUSH
50566: LD_INT 1
50568: PUSH
50569: LD_INT 0
50571: PUSH
50572: EMPTY
50573: LIST
50574: LIST
50575: PUSH
50576: LD_INT 1
50578: PUSH
50579: LD_INT 1
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: PUSH
50586: LD_INT 0
50588: PUSH
50589: LD_INT 1
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: LD_INT 1
50598: NEG
50599: PUSH
50600: LD_INT 0
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: LD_INT 1
50609: NEG
50610: PUSH
50611: LD_INT 1
50613: NEG
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: PUSH
50619: LD_INT 1
50621: NEG
50622: PUSH
50623: LD_INT 2
50625: NEG
50626: PUSH
50627: EMPTY
50628: LIST
50629: LIST
50630: PUSH
50631: LD_INT 0
50633: PUSH
50634: LD_INT 2
50636: NEG
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 1
50644: PUSH
50645: LD_INT 1
50647: NEG
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: LD_INT 2
50655: PUSH
50656: LD_INT 0
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: PUSH
50663: LD_INT 2
50665: PUSH
50666: LD_INT 1
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: PUSH
50673: LD_INT 2
50675: PUSH
50676: LD_INT 2
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: PUSH
50683: LD_INT 1
50685: PUSH
50686: LD_INT 2
50688: PUSH
50689: EMPTY
50690: LIST
50691: LIST
50692: PUSH
50693: LD_INT 0
50695: PUSH
50696: LD_INT 2
50698: PUSH
50699: EMPTY
50700: LIST
50701: LIST
50702: PUSH
50703: LD_INT 1
50705: NEG
50706: PUSH
50707: LD_INT 1
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: PUSH
50714: LD_INT 2
50716: NEG
50717: PUSH
50718: LD_INT 0
50720: PUSH
50721: EMPTY
50722: LIST
50723: LIST
50724: PUSH
50725: LD_INT 2
50727: NEG
50728: PUSH
50729: LD_INT 1
50731: NEG
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: PUSH
50737: LD_INT 2
50739: NEG
50740: PUSH
50741: LD_INT 2
50743: NEG
50744: PUSH
50745: EMPTY
50746: LIST
50747: LIST
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: LIST
50753: LIST
50754: LIST
50755: LIST
50756: LIST
50757: LIST
50758: LIST
50759: LIST
50760: LIST
50761: LIST
50762: LIST
50763: LIST
50764: LIST
50765: LIST
50766: LIST
50767: LIST
50768: LIST
50769: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50770: LD_ADDR_VAR 0 57
50774: PUSH
50775: LD_INT 0
50777: PUSH
50778: LD_INT 0
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 0
50787: PUSH
50788: LD_INT 1
50790: NEG
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 1
50798: PUSH
50799: LD_INT 0
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 1
50808: PUSH
50809: LD_INT 1
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: PUSH
50816: LD_INT 0
50818: PUSH
50819: LD_INT 1
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: LD_INT 1
50828: NEG
50829: PUSH
50830: LD_INT 0
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: PUSH
50837: LD_INT 1
50839: NEG
50840: PUSH
50841: LD_INT 1
50843: NEG
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: PUSH
50849: LD_INT 1
50851: NEG
50852: PUSH
50853: LD_INT 2
50855: NEG
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: PUSH
50861: LD_INT 0
50863: PUSH
50864: LD_INT 2
50866: NEG
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: LD_INT 1
50874: PUSH
50875: LD_INT 1
50877: NEG
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: PUSH
50883: LD_INT 2
50885: PUSH
50886: LD_INT 0
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: PUSH
50893: LD_INT 2
50895: PUSH
50896: LD_INT 1
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: LD_INT 2
50905: PUSH
50906: LD_INT 2
50908: PUSH
50909: EMPTY
50910: LIST
50911: LIST
50912: PUSH
50913: LD_INT 1
50915: PUSH
50916: LD_INT 2
50918: PUSH
50919: EMPTY
50920: LIST
50921: LIST
50922: PUSH
50923: LD_INT 0
50925: PUSH
50926: LD_INT 2
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: PUSH
50933: LD_INT 1
50935: NEG
50936: PUSH
50937: LD_INT 1
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: PUSH
50944: LD_INT 2
50946: NEG
50947: PUSH
50948: LD_INT 0
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: PUSH
50955: LD_INT 2
50957: NEG
50958: PUSH
50959: LD_INT 1
50961: NEG
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: PUSH
50967: LD_INT 2
50969: NEG
50970: PUSH
50971: LD_INT 2
50973: NEG
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: LIST
50992: LIST
50993: LIST
50994: LIST
50995: LIST
50996: LIST
50997: LIST
50998: LIST
50999: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51000: LD_ADDR_VAR 0 58
51004: PUSH
51005: LD_INT 0
51007: PUSH
51008: LD_INT 0
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: PUSH
51015: LD_INT 0
51017: PUSH
51018: LD_INT 1
51020: NEG
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PUSH
51026: LD_INT 1
51028: PUSH
51029: LD_INT 0
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PUSH
51036: LD_INT 1
51038: PUSH
51039: LD_INT 1
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 0
51048: PUSH
51049: LD_INT 1
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 1
51058: NEG
51059: PUSH
51060: LD_INT 0
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: PUSH
51067: LD_INT 1
51069: NEG
51070: PUSH
51071: LD_INT 1
51073: NEG
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: PUSH
51079: LD_INT 1
51081: NEG
51082: PUSH
51083: LD_INT 2
51085: NEG
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: PUSH
51091: LD_INT 0
51093: PUSH
51094: LD_INT 2
51096: NEG
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 1
51104: PUSH
51105: LD_INT 1
51107: NEG
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: LD_INT 2
51115: PUSH
51116: LD_INT 0
51118: PUSH
51119: EMPTY
51120: LIST
51121: LIST
51122: PUSH
51123: LD_INT 2
51125: PUSH
51126: LD_INT 1
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: PUSH
51133: LD_INT 2
51135: PUSH
51136: LD_INT 2
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 1
51145: PUSH
51146: LD_INT 2
51148: PUSH
51149: EMPTY
51150: LIST
51151: LIST
51152: PUSH
51153: LD_INT 0
51155: PUSH
51156: LD_INT 2
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 1
51165: NEG
51166: PUSH
51167: LD_INT 1
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PUSH
51174: LD_INT 2
51176: NEG
51177: PUSH
51178: LD_INT 0
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 2
51187: NEG
51188: PUSH
51189: LD_INT 1
51191: NEG
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 2
51199: NEG
51200: PUSH
51201: LD_INT 2
51203: NEG
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: LIST
51218: LIST
51219: LIST
51220: LIST
51221: LIST
51222: LIST
51223: LIST
51224: LIST
51225: LIST
51226: LIST
51227: LIST
51228: LIST
51229: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51230: LD_ADDR_VAR 0 59
51234: PUSH
51235: LD_INT 0
51237: PUSH
51238: LD_INT 0
51240: PUSH
51241: EMPTY
51242: LIST
51243: LIST
51244: PUSH
51245: LD_INT 0
51247: PUSH
51248: LD_INT 1
51250: NEG
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: PUSH
51256: LD_INT 1
51258: PUSH
51259: LD_INT 0
51261: PUSH
51262: EMPTY
51263: LIST
51264: LIST
51265: PUSH
51266: LD_INT 1
51268: PUSH
51269: LD_INT 1
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: PUSH
51276: LD_INT 0
51278: PUSH
51279: LD_INT 1
51281: PUSH
51282: EMPTY
51283: LIST
51284: LIST
51285: PUSH
51286: LD_INT 1
51288: NEG
51289: PUSH
51290: LD_INT 0
51292: PUSH
51293: EMPTY
51294: LIST
51295: LIST
51296: PUSH
51297: LD_INT 1
51299: NEG
51300: PUSH
51301: LD_INT 1
51303: NEG
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: LIST
51315: LIST
51316: LIST
51317: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51318: LD_ADDR_VAR 0 60
51322: PUSH
51323: LD_INT 0
51325: PUSH
51326: LD_INT 0
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PUSH
51333: LD_INT 0
51335: PUSH
51336: LD_INT 1
51338: NEG
51339: PUSH
51340: EMPTY
51341: LIST
51342: LIST
51343: PUSH
51344: LD_INT 1
51346: PUSH
51347: LD_INT 0
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: PUSH
51354: LD_INT 1
51356: PUSH
51357: LD_INT 1
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: PUSH
51364: LD_INT 0
51366: PUSH
51367: LD_INT 1
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: PUSH
51374: LD_INT 1
51376: NEG
51377: PUSH
51378: LD_INT 0
51380: PUSH
51381: EMPTY
51382: LIST
51383: LIST
51384: PUSH
51385: LD_INT 1
51387: NEG
51388: PUSH
51389: LD_INT 1
51391: NEG
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: LIST
51401: LIST
51402: LIST
51403: LIST
51404: LIST
51405: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51406: LD_ADDR_VAR 0 61
51410: PUSH
51411: LD_INT 0
51413: PUSH
51414: LD_INT 0
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 0
51423: PUSH
51424: LD_INT 1
51426: NEG
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: LD_INT 1
51434: PUSH
51435: LD_INT 0
51437: PUSH
51438: EMPTY
51439: LIST
51440: LIST
51441: PUSH
51442: LD_INT 1
51444: PUSH
51445: LD_INT 1
51447: PUSH
51448: EMPTY
51449: LIST
51450: LIST
51451: PUSH
51452: LD_INT 0
51454: PUSH
51455: LD_INT 1
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 1
51464: NEG
51465: PUSH
51466: LD_INT 0
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: PUSH
51473: LD_INT 1
51475: NEG
51476: PUSH
51477: LD_INT 1
51479: NEG
51480: PUSH
51481: EMPTY
51482: LIST
51483: LIST
51484: PUSH
51485: EMPTY
51486: LIST
51487: LIST
51488: LIST
51489: LIST
51490: LIST
51491: LIST
51492: LIST
51493: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51494: LD_ADDR_VAR 0 62
51498: PUSH
51499: LD_INT 0
51501: PUSH
51502: LD_INT 0
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: PUSH
51509: LD_INT 0
51511: PUSH
51512: LD_INT 1
51514: NEG
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 1
51522: PUSH
51523: LD_INT 0
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: LD_INT 1
51532: PUSH
51533: LD_INT 1
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: PUSH
51540: LD_INT 0
51542: PUSH
51543: LD_INT 1
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: PUSH
51550: LD_INT 1
51552: NEG
51553: PUSH
51554: LD_INT 0
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: LD_INT 1
51563: NEG
51564: PUSH
51565: LD_INT 1
51567: NEG
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: LIST
51577: LIST
51578: LIST
51579: LIST
51580: LIST
51581: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51582: LD_ADDR_VAR 0 63
51586: PUSH
51587: LD_INT 0
51589: PUSH
51590: LD_INT 0
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: PUSH
51597: LD_INT 0
51599: PUSH
51600: LD_INT 1
51602: NEG
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: PUSH
51608: LD_INT 1
51610: PUSH
51611: LD_INT 0
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: PUSH
51618: LD_INT 1
51620: PUSH
51621: LD_INT 1
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: PUSH
51628: LD_INT 0
51630: PUSH
51631: LD_INT 1
51633: PUSH
51634: EMPTY
51635: LIST
51636: LIST
51637: PUSH
51638: LD_INT 1
51640: NEG
51641: PUSH
51642: LD_INT 0
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: PUSH
51649: LD_INT 1
51651: NEG
51652: PUSH
51653: LD_INT 1
51655: NEG
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: LIST
51665: LIST
51666: LIST
51667: LIST
51668: LIST
51669: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51670: LD_ADDR_VAR 0 64
51674: PUSH
51675: LD_INT 0
51677: PUSH
51678: LD_INT 0
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 0
51687: PUSH
51688: LD_INT 1
51690: NEG
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: LD_INT 1
51698: PUSH
51699: LD_INT 0
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: PUSH
51706: LD_INT 1
51708: PUSH
51709: LD_INT 1
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: PUSH
51716: LD_INT 0
51718: PUSH
51719: LD_INT 1
51721: PUSH
51722: EMPTY
51723: LIST
51724: LIST
51725: PUSH
51726: LD_INT 1
51728: NEG
51729: PUSH
51730: LD_INT 0
51732: PUSH
51733: EMPTY
51734: LIST
51735: LIST
51736: PUSH
51737: LD_INT 1
51739: NEG
51740: PUSH
51741: LD_INT 1
51743: NEG
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: LIST
51753: LIST
51754: LIST
51755: LIST
51756: LIST
51757: ST_TO_ADDR
// end ; 1 :
51758: GO 57655
51760: LD_INT 1
51762: DOUBLE
51763: EQUAL
51764: IFTRUE 51768
51766: GO 54391
51768: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51769: LD_ADDR_VAR 0 11
51773: PUSH
51774: LD_INT 1
51776: NEG
51777: PUSH
51778: LD_INT 3
51780: NEG
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: PUSH
51786: LD_INT 0
51788: PUSH
51789: LD_INT 3
51791: NEG
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: PUSH
51797: LD_INT 1
51799: PUSH
51800: LD_INT 2
51802: NEG
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PUSH
51808: EMPTY
51809: LIST
51810: LIST
51811: LIST
51812: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51813: LD_ADDR_VAR 0 12
51817: PUSH
51818: LD_INT 2
51820: PUSH
51821: LD_INT 1
51823: NEG
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: LD_INT 3
51831: PUSH
51832: LD_INT 0
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_INT 3
51841: PUSH
51842: LD_INT 1
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: PUSH
51849: EMPTY
51850: LIST
51851: LIST
51852: LIST
51853: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51854: LD_ADDR_VAR 0 13
51858: PUSH
51859: LD_INT 3
51861: PUSH
51862: LD_INT 2
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: PUSH
51869: LD_INT 3
51871: PUSH
51872: LD_INT 3
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: PUSH
51879: LD_INT 2
51881: PUSH
51882: LD_INT 3
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: LIST
51893: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51894: LD_ADDR_VAR 0 14
51898: PUSH
51899: LD_INT 1
51901: PUSH
51902: LD_INT 3
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: PUSH
51909: LD_INT 0
51911: PUSH
51912: LD_INT 3
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: PUSH
51919: LD_INT 1
51921: NEG
51922: PUSH
51923: LD_INT 2
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: PUSH
51930: EMPTY
51931: LIST
51932: LIST
51933: LIST
51934: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51935: LD_ADDR_VAR 0 15
51939: PUSH
51940: LD_INT 2
51942: NEG
51943: PUSH
51944: LD_INT 1
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: PUSH
51951: LD_INT 3
51953: NEG
51954: PUSH
51955: LD_INT 0
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: LD_INT 3
51964: NEG
51965: PUSH
51966: LD_INT 1
51968: NEG
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: LIST
51978: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51979: LD_ADDR_VAR 0 16
51983: PUSH
51984: LD_INT 2
51986: NEG
51987: PUSH
51988: LD_INT 3
51990: NEG
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: PUSH
51996: LD_INT 3
51998: NEG
51999: PUSH
52000: LD_INT 2
52002: NEG
52003: PUSH
52004: EMPTY
52005: LIST
52006: LIST
52007: PUSH
52008: LD_INT 3
52010: NEG
52011: PUSH
52012: LD_INT 3
52014: NEG
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: PUSH
52020: EMPTY
52021: LIST
52022: LIST
52023: LIST
52024: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52025: LD_ADDR_VAR 0 17
52029: PUSH
52030: LD_INT 1
52032: NEG
52033: PUSH
52034: LD_INT 3
52036: NEG
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: PUSH
52042: LD_INT 0
52044: PUSH
52045: LD_INT 3
52047: NEG
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: PUSH
52053: LD_INT 1
52055: PUSH
52056: LD_INT 2
52058: NEG
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: EMPTY
52065: LIST
52066: LIST
52067: LIST
52068: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52069: LD_ADDR_VAR 0 18
52073: PUSH
52074: LD_INT 2
52076: PUSH
52077: LD_INT 1
52079: NEG
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: PUSH
52085: LD_INT 3
52087: PUSH
52088: LD_INT 0
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: PUSH
52095: LD_INT 3
52097: PUSH
52098: LD_INT 1
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: LIST
52109: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52110: LD_ADDR_VAR 0 19
52114: PUSH
52115: LD_INT 3
52117: PUSH
52118: LD_INT 2
52120: PUSH
52121: EMPTY
52122: LIST
52123: LIST
52124: PUSH
52125: LD_INT 3
52127: PUSH
52128: LD_INT 3
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: PUSH
52135: LD_INT 2
52137: PUSH
52138: LD_INT 3
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: LIST
52149: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52150: LD_ADDR_VAR 0 20
52154: PUSH
52155: LD_INT 1
52157: PUSH
52158: LD_INT 3
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: PUSH
52165: LD_INT 0
52167: PUSH
52168: LD_INT 3
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: LD_INT 1
52177: NEG
52178: PUSH
52179: LD_INT 2
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: LIST
52190: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52191: LD_ADDR_VAR 0 21
52195: PUSH
52196: LD_INT 2
52198: NEG
52199: PUSH
52200: LD_INT 1
52202: PUSH
52203: EMPTY
52204: LIST
52205: LIST
52206: PUSH
52207: LD_INT 3
52209: NEG
52210: PUSH
52211: LD_INT 0
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: PUSH
52218: LD_INT 3
52220: NEG
52221: PUSH
52222: LD_INT 1
52224: NEG
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: LIST
52234: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52235: LD_ADDR_VAR 0 22
52239: PUSH
52240: LD_INT 2
52242: NEG
52243: PUSH
52244: LD_INT 3
52246: NEG
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: PUSH
52252: LD_INT 3
52254: NEG
52255: PUSH
52256: LD_INT 2
52258: NEG
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: LD_INT 3
52266: NEG
52267: PUSH
52268: LD_INT 3
52270: NEG
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: LIST
52280: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
52281: LD_ADDR_VAR 0 23
52285: PUSH
52286: LD_INT 0
52288: PUSH
52289: LD_INT 3
52291: NEG
52292: PUSH
52293: EMPTY
52294: LIST
52295: LIST
52296: PUSH
52297: LD_INT 1
52299: NEG
52300: PUSH
52301: LD_INT 4
52303: NEG
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: PUSH
52309: LD_INT 1
52311: PUSH
52312: LD_INT 3
52314: NEG
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: PUSH
52320: EMPTY
52321: LIST
52322: LIST
52323: LIST
52324: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
52325: LD_ADDR_VAR 0 24
52329: PUSH
52330: LD_INT 3
52332: PUSH
52333: LD_INT 0
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: LD_INT 3
52342: PUSH
52343: LD_INT 1
52345: NEG
52346: PUSH
52347: EMPTY
52348: LIST
52349: LIST
52350: PUSH
52351: LD_INT 4
52353: PUSH
52354: LD_INT 1
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: LIST
52365: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
52366: LD_ADDR_VAR 0 25
52370: PUSH
52371: LD_INT 3
52373: PUSH
52374: LD_INT 3
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: LD_INT 4
52383: PUSH
52384: LD_INT 3
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: LD_INT 3
52393: PUSH
52394: LD_INT 4
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: LIST
52405: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
52406: LD_ADDR_VAR 0 26
52410: PUSH
52411: LD_INT 0
52413: PUSH
52414: LD_INT 3
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: LD_INT 1
52423: PUSH
52424: LD_INT 4
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: PUSH
52431: LD_INT 1
52433: NEG
52434: PUSH
52435: LD_INT 3
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: LIST
52446: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
52447: LD_ADDR_VAR 0 27
52451: PUSH
52452: LD_INT 3
52454: NEG
52455: PUSH
52456: LD_INT 0
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: PUSH
52463: LD_INT 3
52465: NEG
52466: PUSH
52467: LD_INT 1
52469: PUSH
52470: EMPTY
52471: LIST
52472: LIST
52473: PUSH
52474: LD_INT 4
52476: NEG
52477: PUSH
52478: LD_INT 1
52480: NEG
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: LIST
52490: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
52491: LD_ADDR_VAR 0 28
52495: PUSH
52496: LD_INT 3
52498: NEG
52499: PUSH
52500: LD_INT 3
52502: NEG
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 3
52510: NEG
52511: PUSH
52512: LD_INT 4
52514: NEG
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 4
52522: NEG
52523: PUSH
52524: LD_INT 3
52526: NEG
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: LIST
52536: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
52537: LD_ADDR_VAR 0 29
52541: PUSH
52542: LD_INT 1
52544: NEG
52545: PUSH
52546: LD_INT 3
52548: NEG
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: LD_INT 0
52556: PUSH
52557: LD_INT 3
52559: NEG
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: LD_INT 1
52567: PUSH
52568: LD_INT 2
52570: NEG
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: LD_INT 1
52578: NEG
52579: PUSH
52580: LD_INT 4
52582: NEG
52583: PUSH
52584: EMPTY
52585: LIST
52586: LIST
52587: PUSH
52588: LD_INT 0
52590: PUSH
52591: LD_INT 4
52593: NEG
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: LD_INT 1
52601: PUSH
52602: LD_INT 3
52604: NEG
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: PUSH
52610: LD_INT 1
52612: NEG
52613: PUSH
52614: LD_INT 5
52616: NEG
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: PUSH
52622: LD_INT 0
52624: PUSH
52625: LD_INT 5
52627: NEG
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: LD_INT 1
52635: PUSH
52636: LD_INT 4
52638: NEG
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: PUSH
52644: LD_INT 1
52646: NEG
52647: PUSH
52648: LD_INT 6
52650: NEG
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: PUSH
52656: LD_INT 0
52658: PUSH
52659: LD_INT 6
52661: NEG
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: PUSH
52667: LD_INT 1
52669: PUSH
52670: LD_INT 5
52672: NEG
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: LIST
52687: LIST
52688: LIST
52689: LIST
52690: LIST
52691: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
52692: LD_ADDR_VAR 0 30
52696: PUSH
52697: LD_INT 2
52699: PUSH
52700: LD_INT 1
52702: NEG
52703: PUSH
52704: EMPTY
52705: LIST
52706: LIST
52707: PUSH
52708: LD_INT 3
52710: PUSH
52711: LD_INT 0
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: LD_INT 3
52720: PUSH
52721: LD_INT 1
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: PUSH
52728: LD_INT 3
52730: PUSH
52731: LD_INT 1
52733: NEG
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PUSH
52739: LD_INT 4
52741: PUSH
52742: LD_INT 0
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: PUSH
52749: LD_INT 4
52751: PUSH
52752: LD_INT 1
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: PUSH
52759: LD_INT 4
52761: PUSH
52762: LD_INT 1
52764: NEG
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: PUSH
52770: LD_INT 5
52772: PUSH
52773: LD_INT 0
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: PUSH
52780: LD_INT 5
52782: PUSH
52783: LD_INT 1
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: PUSH
52790: LD_INT 5
52792: PUSH
52793: LD_INT 1
52795: NEG
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: PUSH
52801: LD_INT 6
52803: PUSH
52804: LD_INT 0
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: PUSH
52811: LD_INT 6
52813: PUSH
52814: LD_INT 1
52816: PUSH
52817: EMPTY
52818: LIST
52819: LIST
52820: PUSH
52821: EMPTY
52822: LIST
52823: LIST
52824: LIST
52825: LIST
52826: LIST
52827: LIST
52828: LIST
52829: LIST
52830: LIST
52831: LIST
52832: LIST
52833: LIST
52834: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
52835: LD_ADDR_VAR 0 31
52839: PUSH
52840: LD_INT 3
52842: PUSH
52843: LD_INT 2
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: PUSH
52850: LD_INT 3
52852: PUSH
52853: LD_INT 3
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: PUSH
52860: LD_INT 2
52862: PUSH
52863: LD_INT 3
52865: PUSH
52866: EMPTY
52867: LIST
52868: LIST
52869: PUSH
52870: LD_INT 4
52872: PUSH
52873: LD_INT 3
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: PUSH
52880: LD_INT 4
52882: PUSH
52883: LD_INT 4
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: PUSH
52890: LD_INT 3
52892: PUSH
52893: LD_INT 4
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: PUSH
52900: LD_INT 5
52902: PUSH
52903: LD_INT 4
52905: PUSH
52906: EMPTY
52907: LIST
52908: LIST
52909: PUSH
52910: LD_INT 5
52912: PUSH
52913: LD_INT 5
52915: PUSH
52916: EMPTY
52917: LIST
52918: LIST
52919: PUSH
52920: LD_INT 4
52922: PUSH
52923: LD_INT 5
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: PUSH
52930: LD_INT 6
52932: PUSH
52933: LD_INT 5
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: PUSH
52940: LD_INT 6
52942: PUSH
52943: LD_INT 6
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: LD_INT 5
52952: PUSH
52953: LD_INT 6
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: PUSH
52960: EMPTY
52961: LIST
52962: LIST
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: LIST
52968: LIST
52969: LIST
52970: LIST
52971: LIST
52972: LIST
52973: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
52974: LD_ADDR_VAR 0 32
52978: PUSH
52979: LD_INT 1
52981: PUSH
52982: LD_INT 3
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: LD_INT 0
52991: PUSH
52992: LD_INT 3
52994: PUSH
52995: EMPTY
52996: LIST
52997: LIST
52998: PUSH
52999: LD_INT 1
53001: NEG
53002: PUSH
53003: LD_INT 2
53005: PUSH
53006: EMPTY
53007: LIST
53008: LIST
53009: PUSH
53010: LD_INT 1
53012: PUSH
53013: LD_INT 4
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: PUSH
53020: LD_INT 0
53022: PUSH
53023: LD_INT 4
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: PUSH
53030: LD_INT 1
53032: NEG
53033: PUSH
53034: LD_INT 3
53036: PUSH
53037: EMPTY
53038: LIST
53039: LIST
53040: PUSH
53041: LD_INT 1
53043: PUSH
53044: LD_INT 5
53046: PUSH
53047: EMPTY
53048: LIST
53049: LIST
53050: PUSH
53051: LD_INT 0
53053: PUSH
53054: LD_INT 5
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: PUSH
53061: LD_INT 1
53063: NEG
53064: PUSH
53065: LD_INT 4
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: LD_INT 1
53074: PUSH
53075: LD_INT 6
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: LD_INT 0
53084: PUSH
53085: LD_INT 6
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 1
53094: NEG
53095: PUSH
53096: LD_INT 5
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: LIST
53107: LIST
53108: LIST
53109: LIST
53110: LIST
53111: LIST
53112: LIST
53113: LIST
53114: LIST
53115: LIST
53116: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
53117: LD_ADDR_VAR 0 33
53121: PUSH
53122: LD_INT 2
53124: NEG
53125: PUSH
53126: LD_INT 1
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PUSH
53133: LD_INT 3
53135: NEG
53136: PUSH
53137: LD_INT 0
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: LD_INT 3
53146: NEG
53147: PUSH
53148: LD_INT 1
53150: NEG
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 3
53158: NEG
53159: PUSH
53160: LD_INT 1
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: PUSH
53167: LD_INT 4
53169: NEG
53170: PUSH
53171: LD_INT 0
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: LD_INT 4
53180: NEG
53181: PUSH
53182: LD_INT 1
53184: NEG
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: PUSH
53190: LD_INT 4
53192: NEG
53193: PUSH
53194: LD_INT 1
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: PUSH
53201: LD_INT 5
53203: NEG
53204: PUSH
53205: LD_INT 0
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: PUSH
53212: LD_INT 5
53214: NEG
53215: PUSH
53216: LD_INT 1
53218: NEG
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: LD_INT 5
53226: NEG
53227: PUSH
53228: LD_INT 1
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: PUSH
53235: LD_INT 6
53237: NEG
53238: PUSH
53239: LD_INT 0
53241: PUSH
53242: EMPTY
53243: LIST
53244: LIST
53245: PUSH
53246: LD_INT 6
53248: NEG
53249: PUSH
53250: LD_INT 1
53252: NEG
53253: PUSH
53254: EMPTY
53255: LIST
53256: LIST
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: LIST
53262: LIST
53263: LIST
53264: LIST
53265: LIST
53266: LIST
53267: LIST
53268: LIST
53269: LIST
53270: LIST
53271: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
53272: LD_ADDR_VAR 0 34
53276: PUSH
53277: LD_INT 2
53279: NEG
53280: PUSH
53281: LD_INT 3
53283: NEG
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: PUSH
53289: LD_INT 3
53291: NEG
53292: PUSH
53293: LD_INT 2
53295: NEG
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: LD_INT 3
53303: NEG
53304: PUSH
53305: LD_INT 3
53307: NEG
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_INT 3
53315: NEG
53316: PUSH
53317: LD_INT 4
53319: NEG
53320: PUSH
53321: EMPTY
53322: LIST
53323: LIST
53324: PUSH
53325: LD_INT 4
53327: NEG
53328: PUSH
53329: LD_INT 3
53331: NEG
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: PUSH
53337: LD_INT 4
53339: NEG
53340: PUSH
53341: LD_INT 4
53343: NEG
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: LD_INT 4
53351: NEG
53352: PUSH
53353: LD_INT 5
53355: NEG
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: LD_INT 5
53363: NEG
53364: PUSH
53365: LD_INT 4
53367: NEG
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: LD_INT 5
53375: NEG
53376: PUSH
53377: LD_INT 5
53379: NEG
53380: PUSH
53381: EMPTY
53382: LIST
53383: LIST
53384: PUSH
53385: LD_INT 5
53387: NEG
53388: PUSH
53389: LD_INT 6
53391: NEG
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: PUSH
53397: LD_INT 6
53399: NEG
53400: PUSH
53401: LD_INT 5
53403: NEG
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 6
53411: NEG
53412: PUSH
53413: LD_INT 6
53415: NEG
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: LIST
53429: LIST
53430: LIST
53431: LIST
53432: LIST
53433: LIST
53434: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
53435: LD_ADDR_VAR 0 41
53439: PUSH
53440: LD_INT 0
53442: PUSH
53443: LD_INT 2
53445: NEG
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: PUSH
53451: LD_INT 1
53453: NEG
53454: PUSH
53455: LD_INT 3
53457: NEG
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: PUSH
53463: LD_INT 1
53465: PUSH
53466: LD_INT 2
53468: NEG
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: LIST
53478: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
53479: LD_ADDR_VAR 0 42
53483: PUSH
53484: LD_INT 2
53486: PUSH
53487: LD_INT 0
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: LD_INT 2
53496: PUSH
53497: LD_INT 1
53499: NEG
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: LD_INT 3
53507: PUSH
53508: LD_INT 1
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: LIST
53519: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
53520: LD_ADDR_VAR 0 43
53524: PUSH
53525: LD_INT 2
53527: PUSH
53528: LD_INT 2
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: PUSH
53535: LD_INT 3
53537: PUSH
53538: LD_INT 2
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: PUSH
53545: LD_INT 2
53547: PUSH
53548: LD_INT 3
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: LIST
53559: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
53560: LD_ADDR_VAR 0 44
53564: PUSH
53565: LD_INT 0
53567: PUSH
53568: LD_INT 2
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: PUSH
53575: LD_INT 1
53577: PUSH
53578: LD_INT 3
53580: PUSH
53581: EMPTY
53582: LIST
53583: LIST
53584: PUSH
53585: LD_INT 1
53587: NEG
53588: PUSH
53589: LD_INT 2
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: LIST
53600: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53601: LD_ADDR_VAR 0 45
53605: PUSH
53606: LD_INT 2
53608: NEG
53609: PUSH
53610: LD_INT 0
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: LD_INT 2
53619: NEG
53620: PUSH
53621: LD_INT 1
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: PUSH
53628: LD_INT 3
53630: NEG
53631: PUSH
53632: LD_INT 1
53634: NEG
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: LIST
53644: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
53645: LD_ADDR_VAR 0 46
53649: PUSH
53650: LD_INT 2
53652: NEG
53653: PUSH
53654: LD_INT 2
53656: NEG
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: PUSH
53662: LD_INT 2
53664: NEG
53665: PUSH
53666: LD_INT 3
53668: NEG
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: PUSH
53674: LD_INT 3
53676: NEG
53677: PUSH
53678: LD_INT 2
53680: NEG
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: LIST
53690: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
53691: LD_ADDR_VAR 0 47
53695: PUSH
53696: LD_INT 2
53698: NEG
53699: PUSH
53700: LD_INT 3
53702: NEG
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: LD_INT 1
53710: NEG
53711: PUSH
53712: LD_INT 3
53714: NEG
53715: PUSH
53716: EMPTY
53717: LIST
53718: LIST
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53724: LD_ADDR_VAR 0 48
53728: PUSH
53729: LD_INT 1
53731: PUSH
53732: LD_INT 2
53734: NEG
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: LD_INT 2
53742: PUSH
53743: LD_INT 1
53745: NEG
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
53755: LD_ADDR_VAR 0 49
53759: PUSH
53760: LD_INT 3
53762: PUSH
53763: LD_INT 1
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PUSH
53770: LD_INT 3
53772: PUSH
53773: LD_INT 2
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: EMPTY
53781: LIST
53782: LIST
53783: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
53784: LD_ADDR_VAR 0 50
53788: PUSH
53789: LD_INT 2
53791: PUSH
53792: LD_INT 3
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: LD_INT 1
53801: PUSH
53802: LD_INT 3
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53813: LD_ADDR_VAR 0 51
53817: PUSH
53818: LD_INT 1
53820: NEG
53821: PUSH
53822: LD_INT 2
53824: PUSH
53825: EMPTY
53826: LIST
53827: LIST
53828: PUSH
53829: LD_INT 2
53831: NEG
53832: PUSH
53833: LD_INT 1
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53844: LD_ADDR_VAR 0 52
53848: PUSH
53849: LD_INT 3
53851: NEG
53852: PUSH
53853: LD_INT 1
53855: NEG
53856: PUSH
53857: EMPTY
53858: LIST
53859: LIST
53860: PUSH
53861: LD_INT 3
53863: NEG
53864: PUSH
53865: LD_INT 2
53867: NEG
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53877: LD_ADDR_VAR 0 53
53881: PUSH
53882: LD_INT 1
53884: NEG
53885: PUSH
53886: LD_INT 3
53888: NEG
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 0
53896: PUSH
53897: LD_INT 3
53899: NEG
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: PUSH
53905: LD_INT 1
53907: PUSH
53908: LD_INT 2
53910: NEG
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: EMPTY
53917: LIST
53918: LIST
53919: LIST
53920: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53921: LD_ADDR_VAR 0 54
53925: PUSH
53926: LD_INT 2
53928: PUSH
53929: LD_INT 1
53931: NEG
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: LD_INT 3
53939: PUSH
53940: LD_INT 0
53942: PUSH
53943: EMPTY
53944: LIST
53945: LIST
53946: PUSH
53947: LD_INT 3
53949: PUSH
53950: LD_INT 1
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: LIST
53961: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53962: LD_ADDR_VAR 0 55
53966: PUSH
53967: LD_INT 3
53969: PUSH
53970: LD_INT 2
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: PUSH
53977: LD_INT 3
53979: PUSH
53980: LD_INT 3
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: PUSH
53987: LD_INT 2
53989: PUSH
53990: LD_INT 3
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: LIST
54001: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54002: LD_ADDR_VAR 0 56
54006: PUSH
54007: LD_INT 1
54009: PUSH
54010: LD_INT 3
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: PUSH
54017: LD_INT 0
54019: PUSH
54020: LD_INT 3
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: LD_INT 1
54029: NEG
54030: PUSH
54031: LD_INT 2
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: LIST
54042: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54043: LD_ADDR_VAR 0 57
54047: PUSH
54048: LD_INT 2
54050: NEG
54051: PUSH
54052: LD_INT 1
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 3
54061: NEG
54062: PUSH
54063: LD_INT 0
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: LD_INT 3
54072: NEG
54073: PUSH
54074: LD_INT 1
54076: NEG
54077: PUSH
54078: EMPTY
54079: LIST
54080: LIST
54081: PUSH
54082: EMPTY
54083: LIST
54084: LIST
54085: LIST
54086: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54087: LD_ADDR_VAR 0 58
54091: PUSH
54092: LD_INT 2
54094: NEG
54095: PUSH
54096: LD_INT 3
54098: NEG
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: PUSH
54104: LD_INT 3
54106: NEG
54107: PUSH
54108: LD_INT 2
54110: NEG
54111: PUSH
54112: EMPTY
54113: LIST
54114: LIST
54115: PUSH
54116: LD_INT 3
54118: NEG
54119: PUSH
54120: LD_INT 3
54122: NEG
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: LIST
54132: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
54133: LD_ADDR_VAR 0 59
54137: PUSH
54138: LD_INT 1
54140: NEG
54141: PUSH
54142: LD_INT 2
54144: NEG
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_INT 0
54152: PUSH
54153: LD_INT 2
54155: NEG
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: PUSH
54161: LD_INT 1
54163: PUSH
54164: LD_INT 1
54166: NEG
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: PUSH
54172: EMPTY
54173: LIST
54174: LIST
54175: LIST
54176: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54177: LD_ADDR_VAR 0 60
54181: PUSH
54182: LD_INT 1
54184: PUSH
54185: LD_INT 1
54187: NEG
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: PUSH
54193: LD_INT 2
54195: PUSH
54196: LD_INT 0
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PUSH
54203: LD_INT 2
54205: PUSH
54206: LD_INT 1
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: LIST
54217: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54218: LD_ADDR_VAR 0 61
54222: PUSH
54223: LD_INT 2
54225: PUSH
54226: LD_INT 1
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: LD_INT 2
54235: PUSH
54236: LD_INT 2
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: LD_INT 1
54245: PUSH
54246: LD_INT 2
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: LIST
54257: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54258: LD_ADDR_VAR 0 62
54262: PUSH
54263: LD_INT 1
54265: PUSH
54266: LD_INT 2
54268: PUSH
54269: EMPTY
54270: LIST
54271: LIST
54272: PUSH
54273: LD_INT 0
54275: PUSH
54276: LD_INT 2
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: PUSH
54283: LD_INT 1
54285: NEG
54286: PUSH
54287: LD_INT 1
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: LIST
54298: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54299: LD_ADDR_VAR 0 63
54303: PUSH
54304: LD_INT 1
54306: NEG
54307: PUSH
54308: LD_INT 1
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 2
54317: NEG
54318: PUSH
54319: LD_INT 0
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: PUSH
54326: LD_INT 2
54328: NEG
54329: PUSH
54330: LD_INT 1
54332: NEG
54333: PUSH
54334: EMPTY
54335: LIST
54336: LIST
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: LIST
54342: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54343: LD_ADDR_VAR 0 64
54347: PUSH
54348: LD_INT 1
54350: NEG
54351: PUSH
54352: LD_INT 2
54354: NEG
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: LD_INT 2
54362: NEG
54363: PUSH
54364: LD_INT 1
54366: NEG
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 2
54374: NEG
54375: PUSH
54376: LD_INT 2
54378: NEG
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: LIST
54388: ST_TO_ADDR
// end ; 2 :
54389: GO 57655
54391: LD_INT 2
54393: DOUBLE
54394: EQUAL
54395: IFTRUE 54399
54397: GO 57654
54399: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
54400: LD_ADDR_VAR 0 29
54404: PUSH
54405: LD_INT 4
54407: PUSH
54408: LD_INT 0
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: PUSH
54415: LD_INT 4
54417: PUSH
54418: LD_INT 1
54420: NEG
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: PUSH
54426: LD_INT 5
54428: PUSH
54429: LD_INT 0
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: LD_INT 5
54438: PUSH
54439: LD_INT 1
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: PUSH
54446: LD_INT 4
54448: PUSH
54449: LD_INT 1
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: LD_INT 3
54458: PUSH
54459: LD_INT 0
54461: PUSH
54462: EMPTY
54463: LIST
54464: LIST
54465: PUSH
54466: LD_INT 3
54468: PUSH
54469: LD_INT 1
54471: NEG
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: PUSH
54477: LD_INT 3
54479: PUSH
54480: LD_INT 2
54482: NEG
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: LD_INT 5
54490: PUSH
54491: LD_INT 2
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: PUSH
54498: LD_INT 3
54500: PUSH
54501: LD_INT 3
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: PUSH
54508: LD_INT 3
54510: PUSH
54511: LD_INT 2
54513: PUSH
54514: EMPTY
54515: LIST
54516: LIST
54517: PUSH
54518: LD_INT 4
54520: PUSH
54521: LD_INT 3
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: PUSH
54528: LD_INT 4
54530: PUSH
54531: LD_INT 4
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: PUSH
54538: LD_INT 3
54540: PUSH
54541: LD_INT 4
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: PUSH
54548: LD_INT 2
54550: PUSH
54551: LD_INT 3
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: PUSH
54558: LD_INT 2
54560: PUSH
54561: LD_INT 2
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: PUSH
54568: LD_INT 4
54570: PUSH
54571: LD_INT 2
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: PUSH
54578: LD_INT 2
54580: PUSH
54581: LD_INT 4
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: PUSH
54588: LD_INT 0
54590: PUSH
54591: LD_INT 4
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: PUSH
54598: LD_INT 0
54600: PUSH
54601: LD_INT 3
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: PUSH
54608: LD_INT 1
54610: PUSH
54611: LD_INT 4
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 1
54620: PUSH
54621: LD_INT 5
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: PUSH
54628: LD_INT 0
54630: PUSH
54631: LD_INT 5
54633: PUSH
54634: EMPTY
54635: LIST
54636: LIST
54637: PUSH
54638: LD_INT 1
54640: NEG
54641: PUSH
54642: LD_INT 4
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: LD_INT 1
54651: NEG
54652: PUSH
54653: LD_INT 3
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: LD_INT 2
54662: PUSH
54663: LD_INT 5
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 2
54672: NEG
54673: PUSH
54674: LD_INT 3
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 3
54683: NEG
54684: PUSH
54685: LD_INT 0
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: PUSH
54692: LD_INT 3
54694: NEG
54695: PUSH
54696: LD_INT 1
54698: NEG
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: PUSH
54704: LD_INT 2
54706: NEG
54707: PUSH
54708: LD_INT 0
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: PUSH
54715: LD_INT 2
54717: NEG
54718: PUSH
54719: LD_INT 1
54721: PUSH
54722: EMPTY
54723: LIST
54724: LIST
54725: PUSH
54726: LD_INT 3
54728: NEG
54729: PUSH
54730: LD_INT 1
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: PUSH
54737: LD_INT 4
54739: NEG
54740: PUSH
54741: LD_INT 0
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: PUSH
54748: LD_INT 4
54750: NEG
54751: PUSH
54752: LD_INT 1
54754: NEG
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: LD_INT 4
54762: NEG
54763: PUSH
54764: LD_INT 2
54766: NEG
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: PUSH
54772: LD_INT 2
54774: NEG
54775: PUSH
54776: LD_INT 2
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: PUSH
54783: LD_INT 4
54785: NEG
54786: PUSH
54787: LD_INT 4
54789: NEG
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: LD_INT 4
54797: NEG
54798: PUSH
54799: LD_INT 5
54801: NEG
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: LD_INT 3
54809: NEG
54810: PUSH
54811: LD_INT 4
54813: NEG
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: LD_INT 3
54821: NEG
54822: PUSH
54823: LD_INT 3
54825: NEG
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PUSH
54831: LD_INT 4
54833: NEG
54834: PUSH
54835: LD_INT 3
54837: NEG
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: LD_INT 5
54845: NEG
54846: PUSH
54847: LD_INT 4
54849: NEG
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: PUSH
54855: LD_INT 5
54857: NEG
54858: PUSH
54859: LD_INT 5
54861: NEG
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: PUSH
54867: LD_INT 3
54869: NEG
54870: PUSH
54871: LD_INT 5
54873: NEG
54874: PUSH
54875: EMPTY
54876: LIST
54877: LIST
54878: PUSH
54879: LD_INT 5
54881: NEG
54882: PUSH
54883: LD_INT 3
54885: NEG
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: LIST
54895: LIST
54896: LIST
54897: LIST
54898: LIST
54899: LIST
54900: LIST
54901: LIST
54902: LIST
54903: LIST
54904: LIST
54905: LIST
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: LIST
54911: LIST
54912: LIST
54913: LIST
54914: LIST
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: LIST
54926: LIST
54927: LIST
54928: LIST
54929: LIST
54930: LIST
54931: LIST
54932: LIST
54933: LIST
54934: LIST
54935: LIST
54936: LIST
54937: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
54938: LD_ADDR_VAR 0 30
54942: PUSH
54943: LD_INT 4
54945: PUSH
54946: LD_INT 4
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: PUSH
54953: LD_INT 4
54955: PUSH
54956: LD_INT 3
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 5
54965: PUSH
54966: LD_INT 4
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: LD_INT 5
54975: PUSH
54976: LD_INT 5
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: LD_INT 4
54985: PUSH
54986: LD_INT 5
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: PUSH
54993: LD_INT 3
54995: PUSH
54996: LD_INT 4
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PUSH
55003: LD_INT 3
55005: PUSH
55006: LD_INT 3
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 5
55015: PUSH
55016: LD_INT 3
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: LD_INT 3
55025: PUSH
55026: LD_INT 5
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: LD_INT 0
55035: PUSH
55036: LD_INT 3
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: PUSH
55043: LD_INT 0
55045: PUSH
55046: LD_INT 2
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: LD_INT 1
55055: PUSH
55056: LD_INT 3
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PUSH
55063: LD_INT 1
55065: PUSH
55066: LD_INT 4
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: LD_INT 0
55075: PUSH
55076: LD_INT 4
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: LD_INT 1
55085: NEG
55086: PUSH
55087: LD_INT 3
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: PUSH
55094: LD_INT 1
55096: NEG
55097: PUSH
55098: LD_INT 2
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: PUSH
55105: LD_INT 2
55107: PUSH
55108: LD_INT 4
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: PUSH
55115: LD_INT 2
55117: NEG
55118: PUSH
55119: LD_INT 2
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: LD_INT 4
55128: NEG
55129: PUSH
55130: LD_INT 0
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: LD_INT 4
55139: NEG
55140: PUSH
55141: LD_INT 1
55143: NEG
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: PUSH
55149: LD_INT 3
55151: NEG
55152: PUSH
55153: LD_INT 0
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: LD_INT 3
55162: NEG
55163: PUSH
55164: LD_INT 1
55166: PUSH
55167: EMPTY
55168: LIST
55169: LIST
55170: PUSH
55171: LD_INT 4
55173: NEG
55174: PUSH
55175: LD_INT 1
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PUSH
55182: LD_INT 5
55184: NEG
55185: PUSH
55186: LD_INT 0
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: PUSH
55193: LD_INT 5
55195: NEG
55196: PUSH
55197: LD_INT 1
55199: NEG
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: LD_INT 5
55207: NEG
55208: PUSH
55209: LD_INT 2
55211: NEG
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: PUSH
55217: LD_INT 3
55219: NEG
55220: PUSH
55221: LD_INT 2
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: PUSH
55228: LD_INT 3
55230: NEG
55231: PUSH
55232: LD_INT 3
55234: NEG
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: LD_INT 3
55242: NEG
55243: PUSH
55244: LD_INT 4
55246: NEG
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: PUSH
55252: LD_INT 2
55254: NEG
55255: PUSH
55256: LD_INT 3
55258: NEG
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 2
55266: NEG
55267: PUSH
55268: LD_INT 2
55270: NEG
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: PUSH
55276: LD_INT 3
55278: NEG
55279: PUSH
55280: LD_INT 2
55282: NEG
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: PUSH
55288: LD_INT 4
55290: NEG
55291: PUSH
55292: LD_INT 3
55294: NEG
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: PUSH
55300: LD_INT 4
55302: NEG
55303: PUSH
55304: LD_INT 4
55306: NEG
55307: PUSH
55308: EMPTY
55309: LIST
55310: LIST
55311: PUSH
55312: LD_INT 2
55314: NEG
55315: PUSH
55316: LD_INT 4
55318: NEG
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: PUSH
55324: LD_INT 4
55326: NEG
55327: PUSH
55328: LD_INT 2
55330: NEG
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: PUSH
55336: LD_INT 0
55338: PUSH
55339: LD_INT 4
55341: NEG
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: PUSH
55347: LD_INT 0
55349: PUSH
55350: LD_INT 5
55352: NEG
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: PUSH
55358: LD_INT 1
55360: PUSH
55361: LD_INT 4
55363: NEG
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: PUSH
55369: LD_INT 1
55371: PUSH
55372: LD_INT 3
55374: NEG
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PUSH
55380: LD_INT 0
55382: PUSH
55383: LD_INT 3
55385: NEG
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: LD_INT 1
55393: NEG
55394: PUSH
55395: LD_INT 4
55397: NEG
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: LD_INT 1
55405: NEG
55406: PUSH
55407: LD_INT 5
55409: NEG
55410: PUSH
55411: EMPTY
55412: LIST
55413: LIST
55414: PUSH
55415: LD_INT 2
55417: PUSH
55418: LD_INT 3
55420: NEG
55421: PUSH
55422: EMPTY
55423: LIST
55424: LIST
55425: PUSH
55426: LD_INT 2
55428: NEG
55429: PUSH
55430: LD_INT 5
55432: NEG
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: LIST
55442: LIST
55443: LIST
55444: LIST
55445: LIST
55446: LIST
55447: LIST
55448: LIST
55449: LIST
55450: LIST
55451: LIST
55452: LIST
55453: LIST
55454: LIST
55455: LIST
55456: LIST
55457: LIST
55458: LIST
55459: LIST
55460: LIST
55461: LIST
55462: LIST
55463: LIST
55464: LIST
55465: LIST
55466: LIST
55467: LIST
55468: LIST
55469: LIST
55470: LIST
55471: LIST
55472: LIST
55473: LIST
55474: LIST
55475: LIST
55476: LIST
55477: LIST
55478: LIST
55479: LIST
55480: LIST
55481: LIST
55482: LIST
55483: LIST
55484: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
55485: LD_ADDR_VAR 0 31
55489: PUSH
55490: LD_INT 0
55492: PUSH
55493: LD_INT 4
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 0
55502: PUSH
55503: LD_INT 3
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: PUSH
55510: LD_INT 1
55512: PUSH
55513: LD_INT 4
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: LD_INT 1
55522: PUSH
55523: LD_INT 5
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PUSH
55530: LD_INT 0
55532: PUSH
55533: LD_INT 5
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: LD_INT 1
55542: NEG
55543: PUSH
55544: LD_INT 4
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: LD_INT 1
55553: NEG
55554: PUSH
55555: LD_INT 3
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: PUSH
55562: LD_INT 2
55564: PUSH
55565: LD_INT 5
55567: PUSH
55568: EMPTY
55569: LIST
55570: LIST
55571: PUSH
55572: LD_INT 2
55574: NEG
55575: PUSH
55576: LD_INT 3
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PUSH
55583: LD_INT 3
55585: NEG
55586: PUSH
55587: LD_INT 0
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: LD_INT 3
55596: NEG
55597: PUSH
55598: LD_INT 1
55600: NEG
55601: PUSH
55602: EMPTY
55603: LIST
55604: LIST
55605: PUSH
55606: LD_INT 2
55608: NEG
55609: PUSH
55610: LD_INT 0
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: PUSH
55617: LD_INT 2
55619: NEG
55620: PUSH
55621: LD_INT 1
55623: PUSH
55624: EMPTY
55625: LIST
55626: LIST
55627: PUSH
55628: LD_INT 3
55630: NEG
55631: PUSH
55632: LD_INT 1
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 4
55641: NEG
55642: PUSH
55643: LD_INT 0
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: PUSH
55650: LD_INT 4
55652: NEG
55653: PUSH
55654: LD_INT 1
55656: NEG
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: PUSH
55662: LD_INT 4
55664: NEG
55665: PUSH
55666: LD_INT 2
55668: NEG
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: LD_INT 2
55676: NEG
55677: PUSH
55678: LD_INT 2
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: PUSH
55685: LD_INT 4
55687: NEG
55688: PUSH
55689: LD_INT 4
55691: NEG
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: PUSH
55697: LD_INT 4
55699: NEG
55700: PUSH
55701: LD_INT 5
55703: NEG
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: LD_INT 3
55711: NEG
55712: PUSH
55713: LD_INT 4
55715: NEG
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: PUSH
55721: LD_INT 3
55723: NEG
55724: PUSH
55725: LD_INT 3
55727: NEG
55728: PUSH
55729: EMPTY
55730: LIST
55731: LIST
55732: PUSH
55733: LD_INT 4
55735: NEG
55736: PUSH
55737: LD_INT 3
55739: NEG
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: LD_INT 5
55747: NEG
55748: PUSH
55749: LD_INT 4
55751: NEG
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: LD_INT 5
55759: NEG
55760: PUSH
55761: LD_INT 5
55763: NEG
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: LD_INT 3
55771: NEG
55772: PUSH
55773: LD_INT 5
55775: NEG
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: PUSH
55781: LD_INT 5
55783: NEG
55784: PUSH
55785: LD_INT 3
55787: NEG
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: PUSH
55793: LD_INT 0
55795: PUSH
55796: LD_INT 3
55798: NEG
55799: PUSH
55800: EMPTY
55801: LIST
55802: LIST
55803: PUSH
55804: LD_INT 0
55806: PUSH
55807: LD_INT 4
55809: NEG
55810: PUSH
55811: EMPTY
55812: LIST
55813: LIST
55814: PUSH
55815: LD_INT 1
55817: PUSH
55818: LD_INT 3
55820: NEG
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: LD_INT 1
55828: PUSH
55829: LD_INT 2
55831: NEG
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 0
55839: PUSH
55840: LD_INT 2
55842: NEG
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: PUSH
55848: LD_INT 1
55850: NEG
55851: PUSH
55852: LD_INT 3
55854: NEG
55855: PUSH
55856: EMPTY
55857: LIST
55858: LIST
55859: PUSH
55860: LD_INT 1
55862: NEG
55863: PUSH
55864: LD_INT 4
55866: NEG
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: PUSH
55872: LD_INT 2
55874: PUSH
55875: LD_INT 2
55877: NEG
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: PUSH
55883: LD_INT 2
55885: NEG
55886: PUSH
55887: LD_INT 4
55889: NEG
55890: PUSH
55891: EMPTY
55892: LIST
55893: LIST
55894: PUSH
55895: LD_INT 4
55897: PUSH
55898: LD_INT 0
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: PUSH
55905: LD_INT 4
55907: PUSH
55908: LD_INT 1
55910: NEG
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: PUSH
55916: LD_INT 5
55918: PUSH
55919: LD_INT 0
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: PUSH
55926: LD_INT 5
55928: PUSH
55929: LD_INT 1
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: PUSH
55936: LD_INT 4
55938: PUSH
55939: LD_INT 1
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 3
55948: PUSH
55949: LD_INT 0
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 3
55958: PUSH
55959: LD_INT 1
55961: NEG
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: LD_INT 3
55969: PUSH
55970: LD_INT 2
55972: NEG
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: PUSH
55978: LD_INT 5
55980: PUSH
55981: LD_INT 2
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: LIST
55997: LIST
55998: LIST
55999: LIST
56000: LIST
56001: LIST
56002: LIST
56003: LIST
56004: LIST
56005: LIST
56006: LIST
56007: LIST
56008: LIST
56009: LIST
56010: LIST
56011: LIST
56012: LIST
56013: LIST
56014: LIST
56015: LIST
56016: LIST
56017: LIST
56018: LIST
56019: LIST
56020: LIST
56021: LIST
56022: LIST
56023: LIST
56024: LIST
56025: LIST
56026: LIST
56027: LIST
56028: LIST
56029: LIST
56030: LIST
56031: LIST
56032: LIST
56033: LIST
56034: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
56035: LD_ADDR_VAR 0 32
56039: PUSH
56040: LD_INT 4
56042: NEG
56043: PUSH
56044: LD_INT 0
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: LD_INT 4
56053: NEG
56054: PUSH
56055: LD_INT 1
56057: NEG
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: PUSH
56063: LD_INT 3
56065: NEG
56066: PUSH
56067: LD_INT 0
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PUSH
56074: LD_INT 3
56076: NEG
56077: PUSH
56078: LD_INT 1
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: PUSH
56085: LD_INT 4
56087: NEG
56088: PUSH
56089: LD_INT 1
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: PUSH
56096: LD_INT 5
56098: NEG
56099: PUSH
56100: LD_INT 0
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: PUSH
56107: LD_INT 5
56109: NEG
56110: PUSH
56111: LD_INT 1
56113: NEG
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: LD_INT 5
56121: NEG
56122: PUSH
56123: LD_INT 2
56125: NEG
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: LD_INT 3
56133: NEG
56134: PUSH
56135: LD_INT 2
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: LD_INT 3
56144: NEG
56145: PUSH
56146: LD_INT 3
56148: NEG
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: PUSH
56154: LD_INT 3
56156: NEG
56157: PUSH
56158: LD_INT 4
56160: NEG
56161: PUSH
56162: EMPTY
56163: LIST
56164: LIST
56165: PUSH
56166: LD_INT 2
56168: NEG
56169: PUSH
56170: LD_INT 3
56172: NEG
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: PUSH
56178: LD_INT 2
56180: NEG
56181: PUSH
56182: LD_INT 2
56184: NEG
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PUSH
56190: LD_INT 3
56192: NEG
56193: PUSH
56194: LD_INT 2
56196: NEG
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 4
56204: NEG
56205: PUSH
56206: LD_INT 3
56208: NEG
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: PUSH
56214: LD_INT 4
56216: NEG
56217: PUSH
56218: LD_INT 4
56220: NEG
56221: PUSH
56222: EMPTY
56223: LIST
56224: LIST
56225: PUSH
56226: LD_INT 2
56228: NEG
56229: PUSH
56230: LD_INT 4
56232: NEG
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: PUSH
56238: LD_INT 4
56240: NEG
56241: PUSH
56242: LD_INT 2
56244: NEG
56245: PUSH
56246: EMPTY
56247: LIST
56248: LIST
56249: PUSH
56250: LD_INT 0
56252: PUSH
56253: LD_INT 4
56255: NEG
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: PUSH
56261: LD_INT 0
56263: PUSH
56264: LD_INT 5
56266: NEG
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: LD_INT 1
56274: PUSH
56275: LD_INT 4
56277: NEG
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PUSH
56283: LD_INT 1
56285: PUSH
56286: LD_INT 3
56288: NEG
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: PUSH
56294: LD_INT 0
56296: PUSH
56297: LD_INT 3
56299: NEG
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: PUSH
56305: LD_INT 1
56307: NEG
56308: PUSH
56309: LD_INT 4
56311: NEG
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: LD_INT 1
56319: NEG
56320: PUSH
56321: LD_INT 5
56323: NEG
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: LD_INT 2
56331: PUSH
56332: LD_INT 3
56334: NEG
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PUSH
56340: LD_INT 2
56342: NEG
56343: PUSH
56344: LD_INT 5
56346: NEG
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: PUSH
56352: LD_INT 3
56354: PUSH
56355: LD_INT 0
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 3
56364: PUSH
56365: LD_INT 1
56367: NEG
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 4
56375: PUSH
56376: LD_INT 0
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 4
56385: PUSH
56386: LD_INT 1
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: LD_INT 3
56395: PUSH
56396: LD_INT 1
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: PUSH
56403: LD_INT 2
56405: PUSH
56406: LD_INT 0
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: PUSH
56413: LD_INT 2
56415: PUSH
56416: LD_INT 1
56418: NEG
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 2
56426: PUSH
56427: LD_INT 2
56429: NEG
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: PUSH
56435: LD_INT 4
56437: PUSH
56438: LD_INT 2
56440: PUSH
56441: EMPTY
56442: LIST
56443: LIST
56444: PUSH
56445: LD_INT 4
56447: PUSH
56448: LD_INT 4
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PUSH
56455: LD_INT 4
56457: PUSH
56458: LD_INT 3
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: PUSH
56465: LD_INT 5
56467: PUSH
56468: LD_INT 4
56470: PUSH
56471: EMPTY
56472: LIST
56473: LIST
56474: PUSH
56475: LD_INT 5
56477: PUSH
56478: LD_INT 5
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: LD_INT 4
56487: PUSH
56488: LD_INT 5
56490: PUSH
56491: EMPTY
56492: LIST
56493: LIST
56494: PUSH
56495: LD_INT 3
56497: PUSH
56498: LD_INT 4
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: PUSH
56505: LD_INT 3
56507: PUSH
56508: LD_INT 3
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: LD_INT 5
56517: PUSH
56518: LD_INT 3
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: PUSH
56525: LD_INT 3
56527: PUSH
56528: LD_INT 5
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: EMPTY
56536: LIST
56537: LIST
56538: LIST
56539: LIST
56540: LIST
56541: LIST
56542: LIST
56543: LIST
56544: LIST
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: LIST
56550: LIST
56551: LIST
56552: LIST
56553: LIST
56554: LIST
56555: LIST
56556: LIST
56557: LIST
56558: LIST
56559: LIST
56560: LIST
56561: LIST
56562: LIST
56563: LIST
56564: LIST
56565: LIST
56566: LIST
56567: LIST
56568: LIST
56569: LIST
56570: LIST
56571: LIST
56572: LIST
56573: LIST
56574: LIST
56575: LIST
56576: LIST
56577: LIST
56578: LIST
56579: LIST
56580: LIST
56581: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
56582: LD_ADDR_VAR 0 33
56586: PUSH
56587: LD_INT 4
56589: NEG
56590: PUSH
56591: LD_INT 4
56593: NEG
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: PUSH
56599: LD_INT 4
56601: NEG
56602: PUSH
56603: LD_INT 5
56605: NEG
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: LD_INT 3
56613: NEG
56614: PUSH
56615: LD_INT 4
56617: NEG
56618: PUSH
56619: EMPTY
56620: LIST
56621: LIST
56622: PUSH
56623: LD_INT 3
56625: NEG
56626: PUSH
56627: LD_INT 3
56629: NEG
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: PUSH
56635: LD_INT 4
56637: NEG
56638: PUSH
56639: LD_INT 3
56641: NEG
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: PUSH
56647: LD_INT 5
56649: NEG
56650: PUSH
56651: LD_INT 4
56653: NEG
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: PUSH
56659: LD_INT 5
56661: NEG
56662: PUSH
56663: LD_INT 5
56665: NEG
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: PUSH
56671: LD_INT 3
56673: NEG
56674: PUSH
56675: LD_INT 5
56677: NEG
56678: PUSH
56679: EMPTY
56680: LIST
56681: LIST
56682: PUSH
56683: LD_INT 5
56685: NEG
56686: PUSH
56687: LD_INT 3
56689: NEG
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: PUSH
56695: LD_INT 0
56697: PUSH
56698: LD_INT 3
56700: NEG
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PUSH
56706: LD_INT 0
56708: PUSH
56709: LD_INT 4
56711: NEG
56712: PUSH
56713: EMPTY
56714: LIST
56715: LIST
56716: PUSH
56717: LD_INT 1
56719: PUSH
56720: LD_INT 3
56722: NEG
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: LD_INT 1
56730: PUSH
56731: LD_INT 2
56733: NEG
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: PUSH
56739: LD_INT 0
56741: PUSH
56742: LD_INT 2
56744: NEG
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: PUSH
56750: LD_INT 1
56752: NEG
56753: PUSH
56754: LD_INT 3
56756: NEG
56757: PUSH
56758: EMPTY
56759: LIST
56760: LIST
56761: PUSH
56762: LD_INT 1
56764: NEG
56765: PUSH
56766: LD_INT 4
56768: NEG
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: PUSH
56774: LD_INT 2
56776: PUSH
56777: LD_INT 2
56779: NEG
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: PUSH
56785: LD_INT 2
56787: NEG
56788: PUSH
56789: LD_INT 4
56791: NEG
56792: PUSH
56793: EMPTY
56794: LIST
56795: LIST
56796: PUSH
56797: LD_INT 4
56799: PUSH
56800: LD_INT 0
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: PUSH
56807: LD_INT 4
56809: PUSH
56810: LD_INT 1
56812: NEG
56813: PUSH
56814: EMPTY
56815: LIST
56816: LIST
56817: PUSH
56818: LD_INT 5
56820: PUSH
56821: LD_INT 0
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: LD_INT 5
56830: PUSH
56831: LD_INT 1
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: PUSH
56838: LD_INT 4
56840: PUSH
56841: LD_INT 1
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: LD_INT 3
56850: PUSH
56851: LD_INT 0
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 3
56860: PUSH
56861: LD_INT 1
56863: NEG
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: PUSH
56869: LD_INT 3
56871: PUSH
56872: LD_INT 2
56874: NEG
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: PUSH
56880: LD_INT 5
56882: PUSH
56883: LD_INT 2
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: PUSH
56890: LD_INT 3
56892: PUSH
56893: LD_INT 3
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: PUSH
56900: LD_INT 3
56902: PUSH
56903: LD_INT 2
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: PUSH
56910: LD_INT 4
56912: PUSH
56913: LD_INT 3
56915: PUSH
56916: EMPTY
56917: LIST
56918: LIST
56919: PUSH
56920: LD_INT 4
56922: PUSH
56923: LD_INT 4
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: PUSH
56930: LD_INT 3
56932: PUSH
56933: LD_INT 4
56935: PUSH
56936: EMPTY
56937: LIST
56938: LIST
56939: PUSH
56940: LD_INT 2
56942: PUSH
56943: LD_INT 3
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: PUSH
56950: LD_INT 2
56952: PUSH
56953: LD_INT 2
56955: PUSH
56956: EMPTY
56957: LIST
56958: LIST
56959: PUSH
56960: LD_INT 4
56962: PUSH
56963: LD_INT 2
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: PUSH
56970: LD_INT 2
56972: PUSH
56973: LD_INT 4
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: PUSH
56980: LD_INT 0
56982: PUSH
56983: LD_INT 4
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: PUSH
56990: LD_INT 0
56992: PUSH
56993: LD_INT 3
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: PUSH
57000: LD_INT 1
57002: PUSH
57003: LD_INT 4
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: PUSH
57010: LD_INT 1
57012: PUSH
57013: LD_INT 5
57015: PUSH
57016: EMPTY
57017: LIST
57018: LIST
57019: PUSH
57020: LD_INT 0
57022: PUSH
57023: LD_INT 5
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: LD_INT 1
57032: NEG
57033: PUSH
57034: LD_INT 4
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PUSH
57041: LD_INT 1
57043: NEG
57044: PUSH
57045: LD_INT 3
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: PUSH
57052: LD_INT 2
57054: PUSH
57055: LD_INT 5
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: PUSH
57062: LD_INT 2
57064: NEG
57065: PUSH
57066: LD_INT 3
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: LIST
57077: LIST
57078: LIST
57079: LIST
57080: LIST
57081: LIST
57082: LIST
57083: LIST
57084: LIST
57085: LIST
57086: LIST
57087: LIST
57088: LIST
57089: LIST
57090: LIST
57091: LIST
57092: LIST
57093: LIST
57094: LIST
57095: LIST
57096: LIST
57097: LIST
57098: LIST
57099: LIST
57100: LIST
57101: LIST
57102: LIST
57103: LIST
57104: LIST
57105: LIST
57106: LIST
57107: LIST
57108: LIST
57109: LIST
57110: LIST
57111: LIST
57112: LIST
57113: LIST
57114: LIST
57115: LIST
57116: LIST
57117: LIST
57118: LIST
57119: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
57120: LD_ADDR_VAR 0 34
57124: PUSH
57125: LD_INT 0
57127: PUSH
57128: LD_INT 4
57130: NEG
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: PUSH
57136: LD_INT 0
57138: PUSH
57139: LD_INT 5
57141: NEG
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: PUSH
57147: LD_INT 1
57149: PUSH
57150: LD_INT 4
57152: NEG
57153: PUSH
57154: EMPTY
57155: LIST
57156: LIST
57157: PUSH
57158: LD_INT 1
57160: PUSH
57161: LD_INT 3
57163: NEG
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: PUSH
57169: LD_INT 0
57171: PUSH
57172: LD_INT 3
57174: NEG
57175: PUSH
57176: EMPTY
57177: LIST
57178: LIST
57179: PUSH
57180: LD_INT 1
57182: NEG
57183: PUSH
57184: LD_INT 4
57186: NEG
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PUSH
57192: LD_INT 1
57194: NEG
57195: PUSH
57196: LD_INT 5
57198: NEG
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: PUSH
57204: LD_INT 2
57206: PUSH
57207: LD_INT 3
57209: NEG
57210: PUSH
57211: EMPTY
57212: LIST
57213: LIST
57214: PUSH
57215: LD_INT 2
57217: NEG
57218: PUSH
57219: LD_INT 5
57221: NEG
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: PUSH
57227: LD_INT 3
57229: PUSH
57230: LD_INT 0
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: PUSH
57237: LD_INT 3
57239: PUSH
57240: LD_INT 1
57242: NEG
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: PUSH
57248: LD_INT 4
57250: PUSH
57251: LD_INT 0
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: PUSH
57258: LD_INT 4
57260: PUSH
57261: LD_INT 1
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: PUSH
57268: LD_INT 3
57270: PUSH
57271: LD_INT 1
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: PUSH
57278: LD_INT 2
57280: PUSH
57281: LD_INT 0
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: PUSH
57288: LD_INT 2
57290: PUSH
57291: LD_INT 1
57293: NEG
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: PUSH
57299: LD_INT 2
57301: PUSH
57302: LD_INT 2
57304: NEG
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: PUSH
57310: LD_INT 4
57312: PUSH
57313: LD_INT 2
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: PUSH
57320: LD_INT 4
57322: PUSH
57323: LD_INT 4
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 4
57332: PUSH
57333: LD_INT 3
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: LD_INT 5
57342: PUSH
57343: LD_INT 4
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: LD_INT 5
57352: PUSH
57353: LD_INT 5
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: PUSH
57360: LD_INT 4
57362: PUSH
57363: LD_INT 5
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: PUSH
57370: LD_INT 3
57372: PUSH
57373: LD_INT 4
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PUSH
57380: LD_INT 3
57382: PUSH
57383: LD_INT 3
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: PUSH
57390: LD_INT 5
57392: PUSH
57393: LD_INT 3
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: PUSH
57400: LD_INT 3
57402: PUSH
57403: LD_INT 5
57405: PUSH
57406: EMPTY
57407: LIST
57408: LIST
57409: PUSH
57410: LD_INT 0
57412: PUSH
57413: LD_INT 3
57415: PUSH
57416: EMPTY
57417: LIST
57418: LIST
57419: PUSH
57420: LD_INT 0
57422: PUSH
57423: LD_INT 2
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: PUSH
57430: LD_INT 1
57432: PUSH
57433: LD_INT 3
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: PUSH
57440: LD_INT 1
57442: PUSH
57443: LD_INT 4
57445: PUSH
57446: EMPTY
57447: LIST
57448: LIST
57449: PUSH
57450: LD_INT 0
57452: PUSH
57453: LD_INT 4
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: PUSH
57460: LD_INT 1
57462: NEG
57463: PUSH
57464: LD_INT 3
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: PUSH
57471: LD_INT 1
57473: NEG
57474: PUSH
57475: LD_INT 2
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: PUSH
57482: LD_INT 2
57484: PUSH
57485: LD_INT 4
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: PUSH
57492: LD_INT 2
57494: NEG
57495: PUSH
57496: LD_INT 2
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: PUSH
57503: LD_INT 4
57505: NEG
57506: PUSH
57507: LD_INT 0
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 4
57516: NEG
57517: PUSH
57518: LD_INT 1
57520: NEG
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: LD_INT 3
57528: NEG
57529: PUSH
57530: LD_INT 0
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: LD_INT 3
57539: NEG
57540: PUSH
57541: LD_INT 1
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: PUSH
57548: LD_INT 4
57550: NEG
57551: PUSH
57552: LD_INT 1
57554: PUSH
57555: EMPTY
57556: LIST
57557: LIST
57558: PUSH
57559: LD_INT 5
57561: NEG
57562: PUSH
57563: LD_INT 0
57565: PUSH
57566: EMPTY
57567: LIST
57568: LIST
57569: PUSH
57570: LD_INT 5
57572: NEG
57573: PUSH
57574: LD_INT 1
57576: NEG
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: PUSH
57582: LD_INT 5
57584: NEG
57585: PUSH
57586: LD_INT 2
57588: NEG
57589: PUSH
57590: EMPTY
57591: LIST
57592: LIST
57593: PUSH
57594: LD_INT 3
57596: NEG
57597: PUSH
57598: LD_INT 2
57600: PUSH
57601: EMPTY
57602: LIST
57603: LIST
57604: PUSH
57605: EMPTY
57606: LIST
57607: LIST
57608: LIST
57609: LIST
57610: LIST
57611: LIST
57612: LIST
57613: LIST
57614: LIST
57615: LIST
57616: LIST
57617: LIST
57618: LIST
57619: LIST
57620: LIST
57621: LIST
57622: LIST
57623: LIST
57624: LIST
57625: LIST
57626: LIST
57627: LIST
57628: LIST
57629: LIST
57630: LIST
57631: LIST
57632: LIST
57633: LIST
57634: LIST
57635: LIST
57636: LIST
57637: LIST
57638: LIST
57639: LIST
57640: LIST
57641: LIST
57642: LIST
57643: LIST
57644: LIST
57645: LIST
57646: LIST
57647: LIST
57648: LIST
57649: LIST
57650: LIST
57651: ST_TO_ADDR
// end ; end ;
57652: GO 57655
57654: POP
// case btype of b_depot , b_warehouse :
57655: LD_VAR 0 1
57659: PUSH
57660: LD_INT 0
57662: DOUBLE
57663: EQUAL
57664: IFTRUE 57674
57666: LD_INT 1
57668: DOUBLE
57669: EQUAL
57670: IFTRUE 57674
57672: GO 57875
57674: POP
// case nation of nation_american :
57675: LD_VAR 0 5
57679: PUSH
57680: LD_INT 1
57682: DOUBLE
57683: EQUAL
57684: IFTRUE 57688
57686: GO 57744
57688: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
57689: LD_ADDR_VAR 0 9
57693: PUSH
57694: LD_VAR 0 11
57698: PUSH
57699: LD_VAR 0 12
57703: PUSH
57704: LD_VAR 0 13
57708: PUSH
57709: LD_VAR 0 14
57713: PUSH
57714: LD_VAR 0 15
57718: PUSH
57719: LD_VAR 0 16
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: LIST
57728: LIST
57729: LIST
57730: LIST
57731: PUSH
57732: LD_VAR 0 4
57736: PUSH
57737: LD_INT 1
57739: PLUS
57740: ARRAY
57741: ST_TO_ADDR
57742: GO 57873
57744: LD_INT 2
57746: DOUBLE
57747: EQUAL
57748: IFTRUE 57752
57750: GO 57808
57752: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
57753: LD_ADDR_VAR 0 9
57757: PUSH
57758: LD_VAR 0 17
57762: PUSH
57763: LD_VAR 0 18
57767: PUSH
57768: LD_VAR 0 19
57772: PUSH
57773: LD_VAR 0 20
57777: PUSH
57778: LD_VAR 0 21
57782: PUSH
57783: LD_VAR 0 22
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: LIST
57792: LIST
57793: LIST
57794: LIST
57795: PUSH
57796: LD_VAR 0 4
57800: PUSH
57801: LD_INT 1
57803: PLUS
57804: ARRAY
57805: ST_TO_ADDR
57806: GO 57873
57808: LD_INT 3
57810: DOUBLE
57811: EQUAL
57812: IFTRUE 57816
57814: GO 57872
57816: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
57817: LD_ADDR_VAR 0 9
57821: PUSH
57822: LD_VAR 0 23
57826: PUSH
57827: LD_VAR 0 24
57831: PUSH
57832: LD_VAR 0 25
57836: PUSH
57837: LD_VAR 0 26
57841: PUSH
57842: LD_VAR 0 27
57846: PUSH
57847: LD_VAR 0 28
57851: PUSH
57852: EMPTY
57853: LIST
57854: LIST
57855: LIST
57856: LIST
57857: LIST
57858: LIST
57859: PUSH
57860: LD_VAR 0 4
57864: PUSH
57865: LD_INT 1
57867: PLUS
57868: ARRAY
57869: ST_TO_ADDR
57870: GO 57873
57872: POP
57873: GO 58428
57875: LD_INT 2
57877: DOUBLE
57878: EQUAL
57879: IFTRUE 57889
57881: LD_INT 3
57883: DOUBLE
57884: EQUAL
57885: IFTRUE 57889
57887: GO 57945
57889: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
57890: LD_ADDR_VAR 0 9
57894: PUSH
57895: LD_VAR 0 29
57899: PUSH
57900: LD_VAR 0 30
57904: PUSH
57905: LD_VAR 0 31
57909: PUSH
57910: LD_VAR 0 32
57914: PUSH
57915: LD_VAR 0 33
57919: PUSH
57920: LD_VAR 0 34
57924: PUSH
57925: EMPTY
57926: LIST
57927: LIST
57928: LIST
57929: LIST
57930: LIST
57931: LIST
57932: PUSH
57933: LD_VAR 0 4
57937: PUSH
57938: LD_INT 1
57940: PLUS
57941: ARRAY
57942: ST_TO_ADDR
57943: GO 58428
57945: LD_INT 16
57947: DOUBLE
57948: EQUAL
57949: IFTRUE 58007
57951: LD_INT 17
57953: DOUBLE
57954: EQUAL
57955: IFTRUE 58007
57957: LD_INT 18
57959: DOUBLE
57960: EQUAL
57961: IFTRUE 58007
57963: LD_INT 19
57965: DOUBLE
57966: EQUAL
57967: IFTRUE 58007
57969: LD_INT 22
57971: DOUBLE
57972: EQUAL
57973: IFTRUE 58007
57975: LD_INT 20
57977: DOUBLE
57978: EQUAL
57979: IFTRUE 58007
57981: LD_INT 21
57983: DOUBLE
57984: EQUAL
57985: IFTRUE 58007
57987: LD_INT 23
57989: DOUBLE
57990: EQUAL
57991: IFTRUE 58007
57993: LD_INT 24
57995: DOUBLE
57996: EQUAL
57997: IFTRUE 58007
57999: LD_INT 25
58001: DOUBLE
58002: EQUAL
58003: IFTRUE 58007
58005: GO 58063
58007: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
58008: LD_ADDR_VAR 0 9
58012: PUSH
58013: LD_VAR 0 35
58017: PUSH
58018: LD_VAR 0 36
58022: PUSH
58023: LD_VAR 0 37
58027: PUSH
58028: LD_VAR 0 38
58032: PUSH
58033: LD_VAR 0 39
58037: PUSH
58038: LD_VAR 0 40
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: LIST
58047: LIST
58048: LIST
58049: LIST
58050: PUSH
58051: LD_VAR 0 4
58055: PUSH
58056: LD_INT 1
58058: PLUS
58059: ARRAY
58060: ST_TO_ADDR
58061: GO 58428
58063: LD_INT 6
58065: DOUBLE
58066: EQUAL
58067: IFTRUE 58119
58069: LD_INT 7
58071: DOUBLE
58072: EQUAL
58073: IFTRUE 58119
58075: LD_INT 8
58077: DOUBLE
58078: EQUAL
58079: IFTRUE 58119
58081: LD_INT 13
58083: DOUBLE
58084: EQUAL
58085: IFTRUE 58119
58087: LD_INT 12
58089: DOUBLE
58090: EQUAL
58091: IFTRUE 58119
58093: LD_INT 15
58095: DOUBLE
58096: EQUAL
58097: IFTRUE 58119
58099: LD_INT 11
58101: DOUBLE
58102: EQUAL
58103: IFTRUE 58119
58105: LD_INT 14
58107: DOUBLE
58108: EQUAL
58109: IFTRUE 58119
58111: LD_INT 10
58113: DOUBLE
58114: EQUAL
58115: IFTRUE 58119
58117: GO 58175
58119: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
58120: LD_ADDR_VAR 0 9
58124: PUSH
58125: LD_VAR 0 41
58129: PUSH
58130: LD_VAR 0 42
58134: PUSH
58135: LD_VAR 0 43
58139: PUSH
58140: LD_VAR 0 44
58144: PUSH
58145: LD_VAR 0 45
58149: PUSH
58150: LD_VAR 0 46
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: LIST
58159: LIST
58160: LIST
58161: LIST
58162: PUSH
58163: LD_VAR 0 4
58167: PUSH
58168: LD_INT 1
58170: PLUS
58171: ARRAY
58172: ST_TO_ADDR
58173: GO 58428
58175: LD_INT 36
58177: DOUBLE
58178: EQUAL
58179: IFTRUE 58183
58181: GO 58239
58183: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
58184: LD_ADDR_VAR 0 9
58188: PUSH
58189: LD_VAR 0 47
58193: PUSH
58194: LD_VAR 0 48
58198: PUSH
58199: LD_VAR 0 49
58203: PUSH
58204: LD_VAR 0 50
58208: PUSH
58209: LD_VAR 0 51
58213: PUSH
58214: LD_VAR 0 52
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: LIST
58223: LIST
58224: LIST
58225: LIST
58226: PUSH
58227: LD_VAR 0 4
58231: PUSH
58232: LD_INT 1
58234: PLUS
58235: ARRAY
58236: ST_TO_ADDR
58237: GO 58428
58239: LD_INT 4
58241: DOUBLE
58242: EQUAL
58243: IFTRUE 58265
58245: LD_INT 5
58247: DOUBLE
58248: EQUAL
58249: IFTRUE 58265
58251: LD_INT 34
58253: DOUBLE
58254: EQUAL
58255: IFTRUE 58265
58257: LD_INT 37
58259: DOUBLE
58260: EQUAL
58261: IFTRUE 58265
58263: GO 58321
58265: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
58266: LD_ADDR_VAR 0 9
58270: PUSH
58271: LD_VAR 0 53
58275: PUSH
58276: LD_VAR 0 54
58280: PUSH
58281: LD_VAR 0 55
58285: PUSH
58286: LD_VAR 0 56
58290: PUSH
58291: LD_VAR 0 57
58295: PUSH
58296: LD_VAR 0 58
58300: PUSH
58301: EMPTY
58302: LIST
58303: LIST
58304: LIST
58305: LIST
58306: LIST
58307: LIST
58308: PUSH
58309: LD_VAR 0 4
58313: PUSH
58314: LD_INT 1
58316: PLUS
58317: ARRAY
58318: ST_TO_ADDR
58319: GO 58428
58321: LD_INT 31
58323: DOUBLE
58324: EQUAL
58325: IFTRUE 58371
58327: LD_INT 32
58329: DOUBLE
58330: EQUAL
58331: IFTRUE 58371
58333: LD_INT 33
58335: DOUBLE
58336: EQUAL
58337: IFTRUE 58371
58339: LD_INT 27
58341: DOUBLE
58342: EQUAL
58343: IFTRUE 58371
58345: LD_INT 26
58347: DOUBLE
58348: EQUAL
58349: IFTRUE 58371
58351: LD_INT 28
58353: DOUBLE
58354: EQUAL
58355: IFTRUE 58371
58357: LD_INT 29
58359: DOUBLE
58360: EQUAL
58361: IFTRUE 58371
58363: LD_INT 30
58365: DOUBLE
58366: EQUAL
58367: IFTRUE 58371
58369: GO 58427
58371: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
58372: LD_ADDR_VAR 0 9
58376: PUSH
58377: LD_VAR 0 59
58381: PUSH
58382: LD_VAR 0 60
58386: PUSH
58387: LD_VAR 0 61
58391: PUSH
58392: LD_VAR 0 62
58396: PUSH
58397: LD_VAR 0 63
58401: PUSH
58402: LD_VAR 0 64
58406: PUSH
58407: EMPTY
58408: LIST
58409: LIST
58410: LIST
58411: LIST
58412: LIST
58413: LIST
58414: PUSH
58415: LD_VAR 0 4
58419: PUSH
58420: LD_INT 1
58422: PLUS
58423: ARRAY
58424: ST_TO_ADDR
58425: GO 58428
58427: POP
// temp_list2 = [ ] ;
58428: LD_ADDR_VAR 0 10
58432: PUSH
58433: EMPTY
58434: ST_TO_ADDR
// for i in temp_list do
58435: LD_ADDR_VAR 0 8
58439: PUSH
58440: LD_VAR 0 9
58444: PUSH
58445: FOR_IN
58446: IFFALSE 58498
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
58448: LD_ADDR_VAR 0 10
58452: PUSH
58453: LD_VAR 0 10
58457: PUSH
58458: LD_VAR 0 8
58462: PUSH
58463: LD_INT 1
58465: ARRAY
58466: PUSH
58467: LD_VAR 0 2
58471: PLUS
58472: PUSH
58473: LD_VAR 0 8
58477: PUSH
58478: LD_INT 2
58480: ARRAY
58481: PUSH
58482: LD_VAR 0 3
58486: PLUS
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: PUSH
58492: EMPTY
58493: LIST
58494: ADD
58495: ST_TO_ADDR
58496: GO 58445
58498: POP
58499: POP
// result = temp_list2 ;
58500: LD_ADDR_VAR 0 7
58504: PUSH
58505: LD_VAR 0 10
58509: ST_TO_ADDR
// end ;
58510: LD_VAR 0 7
58514: RET
// export function EnemyInRange ( unit , dist ) ; begin
58515: LD_INT 0
58517: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
58518: LD_ADDR_VAR 0 3
58522: PUSH
58523: LD_VAR 0 1
58527: PPUSH
58528: CALL_OW 255
58532: PPUSH
58533: LD_VAR 0 1
58537: PPUSH
58538: CALL_OW 250
58542: PPUSH
58543: LD_VAR 0 1
58547: PPUSH
58548: CALL_OW 251
58552: PPUSH
58553: LD_VAR 0 2
58557: PPUSH
58558: CALL 31911 0 4
58562: PUSH
58563: LD_INT 4
58565: ARRAY
58566: ST_TO_ADDR
// end ;
58567: LD_VAR 0 3
58571: RET
// export function PlayerSeeMe ( unit ) ; begin
58572: LD_INT 0
58574: PPUSH
// result := See ( your_side , unit ) ;
58575: LD_ADDR_VAR 0 2
58579: PUSH
58580: LD_OWVAR 2
58584: PPUSH
58585: LD_VAR 0 1
58589: PPUSH
58590: CALL_OW 292
58594: ST_TO_ADDR
// end ;
58595: LD_VAR 0 2
58599: RET
// export function ReverseDir ( unit ) ; begin
58600: LD_INT 0
58602: PPUSH
// if not unit then
58603: LD_VAR 0 1
58607: NOT
58608: IFFALSE 58612
// exit ;
58610: GO 58635
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
58612: LD_ADDR_VAR 0 2
58616: PUSH
58617: LD_VAR 0 1
58621: PPUSH
58622: CALL_OW 254
58626: PUSH
58627: LD_INT 3
58629: PLUS
58630: PUSH
58631: LD_INT 6
58633: MOD
58634: ST_TO_ADDR
// end ;
58635: LD_VAR 0 2
58639: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
58640: LD_INT 0
58642: PPUSH
58643: PPUSH
58644: PPUSH
58645: PPUSH
58646: PPUSH
// if not hexes then
58647: LD_VAR 0 2
58651: NOT
58652: IFFALSE 58656
// exit ;
58654: GO 58804
// dist := 9999 ;
58656: LD_ADDR_VAR 0 5
58660: PUSH
58661: LD_INT 9999
58663: ST_TO_ADDR
// for i = 1 to hexes do
58664: LD_ADDR_VAR 0 4
58668: PUSH
58669: DOUBLE
58670: LD_INT 1
58672: DEC
58673: ST_TO_ADDR
58674: LD_VAR 0 2
58678: PUSH
58679: FOR_TO
58680: IFFALSE 58792
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
58682: LD_VAR 0 1
58686: PPUSH
58687: LD_VAR 0 2
58691: PUSH
58692: LD_VAR 0 4
58696: ARRAY
58697: PUSH
58698: LD_INT 1
58700: ARRAY
58701: PPUSH
58702: LD_VAR 0 2
58706: PUSH
58707: LD_VAR 0 4
58711: ARRAY
58712: PUSH
58713: LD_INT 2
58715: ARRAY
58716: PPUSH
58717: CALL_OW 297
58721: PUSH
58722: LD_VAR 0 5
58726: LESS
58727: IFFALSE 58790
// begin hex := hexes [ i ] ;
58729: LD_ADDR_VAR 0 7
58733: PUSH
58734: LD_VAR 0 2
58738: PUSH
58739: LD_VAR 0 4
58743: ARRAY
58744: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
58745: LD_ADDR_VAR 0 5
58749: PUSH
58750: LD_VAR 0 1
58754: PPUSH
58755: LD_VAR 0 2
58759: PUSH
58760: LD_VAR 0 4
58764: ARRAY
58765: PUSH
58766: LD_INT 1
58768: ARRAY
58769: PPUSH
58770: LD_VAR 0 2
58774: PUSH
58775: LD_VAR 0 4
58779: ARRAY
58780: PUSH
58781: LD_INT 2
58783: ARRAY
58784: PPUSH
58785: CALL_OW 297
58789: ST_TO_ADDR
// end ; end ;
58790: GO 58679
58792: POP
58793: POP
// result := hex ;
58794: LD_ADDR_VAR 0 3
58798: PUSH
58799: LD_VAR 0 7
58803: ST_TO_ADDR
// end ;
58804: LD_VAR 0 3
58808: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
58809: LD_INT 0
58811: PPUSH
58812: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
58813: LD_VAR 0 1
58817: NOT
58818: PUSH
58819: LD_VAR 0 1
58823: PUSH
58824: LD_INT 21
58826: PUSH
58827: LD_INT 2
58829: PUSH
58830: EMPTY
58831: LIST
58832: LIST
58833: PUSH
58834: LD_INT 23
58836: PUSH
58837: LD_INT 2
58839: PUSH
58840: EMPTY
58841: LIST
58842: LIST
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: PPUSH
58848: CALL_OW 69
58852: IN
58853: NOT
58854: OR
58855: IFFALSE 58859
// exit ;
58857: GO 58906
// for i = 1 to 3 do
58859: LD_ADDR_VAR 0 3
58863: PUSH
58864: DOUBLE
58865: LD_INT 1
58867: DEC
58868: ST_TO_ADDR
58869: LD_INT 3
58871: PUSH
58872: FOR_TO
58873: IFFALSE 58904
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
58875: LD_VAR 0 1
58879: PPUSH
58880: CALL_OW 250
58884: PPUSH
58885: LD_VAR 0 1
58889: PPUSH
58890: CALL_OW 251
58894: PPUSH
58895: LD_INT 1
58897: PPUSH
58898: CALL_OW 453
58902: GO 58872
58904: POP
58905: POP
// end ;
58906: LD_VAR 0 2
58910: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
58911: LD_INT 0
58913: PPUSH
58914: PPUSH
58915: PPUSH
58916: PPUSH
58917: PPUSH
58918: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
58919: LD_VAR 0 1
58923: NOT
58924: PUSH
58925: LD_VAR 0 2
58929: NOT
58930: OR
58931: PUSH
58932: LD_VAR 0 1
58936: PPUSH
58937: CALL_OW 314
58941: OR
58942: IFFALSE 58946
// exit ;
58944: GO 59387
// x := GetX ( enemy_unit ) ;
58946: LD_ADDR_VAR 0 7
58950: PUSH
58951: LD_VAR 0 2
58955: PPUSH
58956: CALL_OW 250
58960: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
58961: LD_ADDR_VAR 0 8
58965: PUSH
58966: LD_VAR 0 2
58970: PPUSH
58971: CALL_OW 251
58975: ST_TO_ADDR
// if not x or not y then
58976: LD_VAR 0 7
58980: NOT
58981: PUSH
58982: LD_VAR 0 8
58986: NOT
58987: OR
58988: IFFALSE 58992
// exit ;
58990: GO 59387
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
58992: LD_ADDR_VAR 0 6
58996: PUSH
58997: LD_VAR 0 7
59001: PPUSH
59002: LD_INT 0
59004: PPUSH
59005: LD_INT 4
59007: PPUSH
59008: CALL_OW 272
59012: PUSH
59013: LD_VAR 0 8
59017: PPUSH
59018: LD_INT 0
59020: PPUSH
59021: LD_INT 4
59023: PPUSH
59024: CALL_OW 273
59028: PUSH
59029: EMPTY
59030: LIST
59031: LIST
59032: PUSH
59033: LD_VAR 0 7
59037: PPUSH
59038: LD_INT 1
59040: PPUSH
59041: LD_INT 4
59043: PPUSH
59044: CALL_OW 272
59048: PUSH
59049: LD_VAR 0 8
59053: PPUSH
59054: LD_INT 1
59056: PPUSH
59057: LD_INT 4
59059: PPUSH
59060: CALL_OW 273
59064: PUSH
59065: EMPTY
59066: LIST
59067: LIST
59068: PUSH
59069: LD_VAR 0 7
59073: PPUSH
59074: LD_INT 2
59076: PPUSH
59077: LD_INT 4
59079: PPUSH
59080: CALL_OW 272
59084: PUSH
59085: LD_VAR 0 8
59089: PPUSH
59090: LD_INT 2
59092: PPUSH
59093: LD_INT 4
59095: PPUSH
59096: CALL_OW 273
59100: PUSH
59101: EMPTY
59102: LIST
59103: LIST
59104: PUSH
59105: LD_VAR 0 7
59109: PPUSH
59110: LD_INT 3
59112: PPUSH
59113: LD_INT 4
59115: PPUSH
59116: CALL_OW 272
59120: PUSH
59121: LD_VAR 0 8
59125: PPUSH
59126: LD_INT 3
59128: PPUSH
59129: LD_INT 4
59131: PPUSH
59132: CALL_OW 273
59136: PUSH
59137: EMPTY
59138: LIST
59139: LIST
59140: PUSH
59141: LD_VAR 0 7
59145: PPUSH
59146: LD_INT 4
59148: PPUSH
59149: LD_INT 4
59151: PPUSH
59152: CALL_OW 272
59156: PUSH
59157: LD_VAR 0 8
59161: PPUSH
59162: LD_INT 4
59164: PPUSH
59165: LD_INT 4
59167: PPUSH
59168: CALL_OW 273
59172: PUSH
59173: EMPTY
59174: LIST
59175: LIST
59176: PUSH
59177: LD_VAR 0 7
59181: PPUSH
59182: LD_INT 5
59184: PPUSH
59185: LD_INT 4
59187: PPUSH
59188: CALL_OW 272
59192: PUSH
59193: LD_VAR 0 8
59197: PPUSH
59198: LD_INT 5
59200: PPUSH
59201: LD_INT 4
59203: PPUSH
59204: CALL_OW 273
59208: PUSH
59209: EMPTY
59210: LIST
59211: LIST
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: LIST
59217: LIST
59218: LIST
59219: LIST
59220: ST_TO_ADDR
// for i = tmp downto 1 do
59221: LD_ADDR_VAR 0 4
59225: PUSH
59226: DOUBLE
59227: LD_VAR 0 6
59231: INC
59232: ST_TO_ADDR
59233: LD_INT 1
59235: PUSH
59236: FOR_DOWNTO
59237: IFFALSE 59338
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
59239: LD_VAR 0 6
59243: PUSH
59244: LD_VAR 0 4
59248: ARRAY
59249: PUSH
59250: LD_INT 1
59252: ARRAY
59253: PPUSH
59254: LD_VAR 0 6
59258: PUSH
59259: LD_VAR 0 4
59263: ARRAY
59264: PUSH
59265: LD_INT 2
59267: ARRAY
59268: PPUSH
59269: CALL_OW 488
59273: NOT
59274: PUSH
59275: LD_VAR 0 6
59279: PUSH
59280: LD_VAR 0 4
59284: ARRAY
59285: PUSH
59286: LD_INT 1
59288: ARRAY
59289: PPUSH
59290: LD_VAR 0 6
59294: PUSH
59295: LD_VAR 0 4
59299: ARRAY
59300: PUSH
59301: LD_INT 2
59303: ARRAY
59304: PPUSH
59305: CALL_OW 428
59309: PUSH
59310: LD_INT 0
59312: NONEQUAL
59313: OR
59314: IFFALSE 59336
// tmp := Delete ( tmp , i ) ;
59316: LD_ADDR_VAR 0 6
59320: PUSH
59321: LD_VAR 0 6
59325: PPUSH
59326: LD_VAR 0 4
59330: PPUSH
59331: CALL_OW 3
59335: ST_TO_ADDR
59336: GO 59236
59338: POP
59339: POP
// j := GetClosestHex ( unit , tmp ) ;
59340: LD_ADDR_VAR 0 5
59344: PUSH
59345: LD_VAR 0 1
59349: PPUSH
59350: LD_VAR 0 6
59354: PPUSH
59355: CALL 58640 0 2
59359: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
59360: LD_VAR 0 1
59364: PPUSH
59365: LD_VAR 0 5
59369: PUSH
59370: LD_INT 1
59372: ARRAY
59373: PPUSH
59374: LD_VAR 0 5
59378: PUSH
59379: LD_INT 2
59381: ARRAY
59382: PPUSH
59383: CALL_OW 111
// end ;
59387: LD_VAR 0 3
59391: RET
// export function PrepareApemanSoldier ( ) ; begin
59392: LD_INT 0
59394: PPUSH
// uc_nation := 0 ;
59395: LD_ADDR_OWVAR 21
59399: PUSH
59400: LD_INT 0
59402: ST_TO_ADDR
// hc_sex := sex_male ;
59403: LD_ADDR_OWVAR 27
59407: PUSH
59408: LD_INT 1
59410: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
59411: LD_ADDR_OWVAR 28
59415: PUSH
59416: LD_INT 15
59418: ST_TO_ADDR
// hc_gallery :=  ;
59419: LD_ADDR_OWVAR 33
59423: PUSH
59424: LD_STRING 
59426: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59427: LD_ADDR_OWVAR 31
59431: PUSH
59432: LD_INT 0
59434: PPUSH
59435: LD_INT 3
59437: PPUSH
59438: CALL_OW 12
59442: PUSH
59443: LD_INT 0
59445: PPUSH
59446: LD_INT 3
59448: PPUSH
59449: CALL_OW 12
59453: PUSH
59454: LD_INT 0
59456: PUSH
59457: LD_INT 0
59459: PUSH
59460: EMPTY
59461: LIST
59462: LIST
59463: LIST
59464: LIST
59465: ST_TO_ADDR
// end ;
59466: LD_VAR 0 1
59470: RET
// export function PrepareApemanEngineer ( ) ; begin
59471: LD_INT 0
59473: PPUSH
// uc_nation := 0 ;
59474: LD_ADDR_OWVAR 21
59478: PUSH
59479: LD_INT 0
59481: ST_TO_ADDR
// hc_sex := sex_male ;
59482: LD_ADDR_OWVAR 27
59486: PUSH
59487: LD_INT 1
59489: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
59490: LD_ADDR_OWVAR 28
59494: PUSH
59495: LD_INT 16
59497: ST_TO_ADDR
// hc_gallery :=  ;
59498: LD_ADDR_OWVAR 33
59502: PUSH
59503: LD_STRING 
59505: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59506: LD_ADDR_OWVAR 31
59510: PUSH
59511: LD_INT 0
59513: PPUSH
59514: LD_INT 3
59516: PPUSH
59517: CALL_OW 12
59521: PUSH
59522: LD_INT 0
59524: PPUSH
59525: LD_INT 3
59527: PPUSH
59528: CALL_OW 12
59532: PUSH
59533: LD_INT 0
59535: PUSH
59536: LD_INT 0
59538: PUSH
59539: EMPTY
59540: LIST
59541: LIST
59542: LIST
59543: LIST
59544: ST_TO_ADDR
// end ;
59545: LD_VAR 0 1
59549: RET
// export function PrepareApeman ( agressivity ) ; begin
59550: LD_INT 0
59552: PPUSH
// uc_side := 0 ;
59553: LD_ADDR_OWVAR 20
59557: PUSH
59558: LD_INT 0
59560: ST_TO_ADDR
// uc_nation := 0 ;
59561: LD_ADDR_OWVAR 21
59565: PUSH
59566: LD_INT 0
59568: ST_TO_ADDR
// hc_sex := sex_male ;
59569: LD_ADDR_OWVAR 27
59573: PUSH
59574: LD_INT 1
59576: ST_TO_ADDR
// hc_class := class_apeman ;
59577: LD_ADDR_OWVAR 28
59581: PUSH
59582: LD_INT 12
59584: ST_TO_ADDR
// hc_gallery :=  ;
59585: LD_ADDR_OWVAR 33
59589: PUSH
59590: LD_STRING 
59592: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
59593: LD_ADDR_OWVAR 35
59597: PUSH
59598: LD_VAR 0 1
59602: NEG
59603: PPUSH
59604: LD_VAR 0 1
59608: PPUSH
59609: CALL_OW 12
59613: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59614: LD_ADDR_OWVAR 31
59618: PUSH
59619: LD_INT 0
59621: PPUSH
59622: LD_INT 3
59624: PPUSH
59625: CALL_OW 12
59629: PUSH
59630: LD_INT 0
59632: PPUSH
59633: LD_INT 3
59635: PPUSH
59636: CALL_OW 12
59640: PUSH
59641: LD_INT 0
59643: PUSH
59644: LD_INT 0
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: LIST
59651: LIST
59652: ST_TO_ADDR
// end ;
59653: LD_VAR 0 2
59657: RET
// export function PrepareTiger ( agressivity ) ; begin
59658: LD_INT 0
59660: PPUSH
// uc_side := 0 ;
59661: LD_ADDR_OWVAR 20
59665: PUSH
59666: LD_INT 0
59668: ST_TO_ADDR
// uc_nation := 0 ;
59669: LD_ADDR_OWVAR 21
59673: PUSH
59674: LD_INT 0
59676: ST_TO_ADDR
// hc_class := class_tiger ;
59677: LD_ADDR_OWVAR 28
59681: PUSH
59682: LD_INT 14
59684: ST_TO_ADDR
// hc_gallery :=  ;
59685: LD_ADDR_OWVAR 33
59689: PUSH
59690: LD_STRING 
59692: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
59693: LD_ADDR_OWVAR 35
59697: PUSH
59698: LD_VAR 0 1
59702: NEG
59703: PPUSH
59704: LD_VAR 0 1
59708: PPUSH
59709: CALL_OW 12
59713: ST_TO_ADDR
// end ;
59714: LD_VAR 0 2
59718: RET
// export function PrepareEnchidna ( ) ; begin
59719: LD_INT 0
59721: PPUSH
// uc_side := 0 ;
59722: LD_ADDR_OWVAR 20
59726: PUSH
59727: LD_INT 0
59729: ST_TO_ADDR
// uc_nation := 0 ;
59730: LD_ADDR_OWVAR 21
59734: PUSH
59735: LD_INT 0
59737: ST_TO_ADDR
// hc_class := class_baggie ;
59738: LD_ADDR_OWVAR 28
59742: PUSH
59743: LD_INT 13
59745: ST_TO_ADDR
// hc_gallery :=  ;
59746: LD_ADDR_OWVAR 33
59750: PUSH
59751: LD_STRING 
59753: ST_TO_ADDR
// end ;
59754: LD_VAR 0 1
59758: RET
// export function PrepareFrog ( ) ; begin
59759: LD_INT 0
59761: PPUSH
// uc_side := 0 ;
59762: LD_ADDR_OWVAR 20
59766: PUSH
59767: LD_INT 0
59769: ST_TO_ADDR
// uc_nation := 0 ;
59770: LD_ADDR_OWVAR 21
59774: PUSH
59775: LD_INT 0
59777: ST_TO_ADDR
// hc_class := class_frog ;
59778: LD_ADDR_OWVAR 28
59782: PUSH
59783: LD_INT 19
59785: ST_TO_ADDR
// hc_gallery :=  ;
59786: LD_ADDR_OWVAR 33
59790: PUSH
59791: LD_STRING 
59793: ST_TO_ADDR
// end ;
59794: LD_VAR 0 1
59798: RET
// export function PrepareFish ( ) ; begin
59799: LD_INT 0
59801: PPUSH
// uc_side := 0 ;
59802: LD_ADDR_OWVAR 20
59806: PUSH
59807: LD_INT 0
59809: ST_TO_ADDR
// uc_nation := 0 ;
59810: LD_ADDR_OWVAR 21
59814: PUSH
59815: LD_INT 0
59817: ST_TO_ADDR
// hc_class := class_fish ;
59818: LD_ADDR_OWVAR 28
59822: PUSH
59823: LD_INT 20
59825: ST_TO_ADDR
// hc_gallery :=  ;
59826: LD_ADDR_OWVAR 33
59830: PUSH
59831: LD_STRING 
59833: ST_TO_ADDR
// end ;
59834: LD_VAR 0 1
59838: RET
// export function PrepareBird ( ) ; begin
59839: LD_INT 0
59841: PPUSH
// uc_side := 0 ;
59842: LD_ADDR_OWVAR 20
59846: PUSH
59847: LD_INT 0
59849: ST_TO_ADDR
// uc_nation := 0 ;
59850: LD_ADDR_OWVAR 21
59854: PUSH
59855: LD_INT 0
59857: ST_TO_ADDR
// hc_class := class_phororhacos ;
59858: LD_ADDR_OWVAR 28
59862: PUSH
59863: LD_INT 18
59865: ST_TO_ADDR
// hc_gallery :=  ;
59866: LD_ADDR_OWVAR 33
59870: PUSH
59871: LD_STRING 
59873: ST_TO_ADDR
// end ;
59874: LD_VAR 0 1
59878: RET
// export function PrepareHorse ( ) ; begin
59879: LD_INT 0
59881: PPUSH
// uc_side := 0 ;
59882: LD_ADDR_OWVAR 20
59886: PUSH
59887: LD_INT 0
59889: ST_TO_ADDR
// uc_nation := 0 ;
59890: LD_ADDR_OWVAR 21
59894: PUSH
59895: LD_INT 0
59897: ST_TO_ADDR
// hc_class := class_horse ;
59898: LD_ADDR_OWVAR 28
59902: PUSH
59903: LD_INT 21
59905: ST_TO_ADDR
// hc_gallery :=  ;
59906: LD_ADDR_OWVAR 33
59910: PUSH
59911: LD_STRING 
59913: ST_TO_ADDR
// end ;
59914: LD_VAR 0 1
59918: RET
// export function PrepareMastodont ( ) ; begin
59919: LD_INT 0
59921: PPUSH
// uc_side := 0 ;
59922: LD_ADDR_OWVAR 20
59926: PUSH
59927: LD_INT 0
59929: ST_TO_ADDR
// uc_nation := 0 ;
59930: LD_ADDR_OWVAR 21
59934: PUSH
59935: LD_INT 0
59937: ST_TO_ADDR
// vc_chassis := class_mastodont ;
59938: LD_ADDR_OWVAR 37
59942: PUSH
59943: LD_INT 31
59945: ST_TO_ADDR
// vc_control := control_rider ;
59946: LD_ADDR_OWVAR 38
59950: PUSH
59951: LD_INT 4
59953: ST_TO_ADDR
// end ;
59954: LD_VAR 0 1
59958: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
59959: LD_INT 0
59961: PPUSH
59962: PPUSH
59963: PPUSH
// uc_side = 0 ;
59964: LD_ADDR_OWVAR 20
59968: PUSH
59969: LD_INT 0
59971: ST_TO_ADDR
// uc_nation = 0 ;
59972: LD_ADDR_OWVAR 21
59976: PUSH
59977: LD_INT 0
59979: ST_TO_ADDR
// InitHc_All ( ) ;
59980: CALL_OW 584
// InitVc ;
59984: CALL_OW 20
// if mastodonts then
59988: LD_VAR 0 6
59992: IFFALSE 60059
// for i = 1 to mastodonts do
59994: LD_ADDR_VAR 0 11
59998: PUSH
59999: DOUBLE
60000: LD_INT 1
60002: DEC
60003: ST_TO_ADDR
60004: LD_VAR 0 6
60008: PUSH
60009: FOR_TO
60010: IFFALSE 60057
// begin vc_chassis := 31 ;
60012: LD_ADDR_OWVAR 37
60016: PUSH
60017: LD_INT 31
60019: ST_TO_ADDR
// vc_control := control_rider ;
60020: LD_ADDR_OWVAR 38
60024: PUSH
60025: LD_INT 4
60027: ST_TO_ADDR
// animal := CreateVehicle ;
60028: LD_ADDR_VAR 0 12
60032: PUSH
60033: CALL_OW 45
60037: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60038: LD_VAR 0 12
60042: PPUSH
60043: LD_VAR 0 8
60047: PPUSH
60048: LD_INT 0
60050: PPUSH
60051: CALL 62194 0 3
// end ;
60055: GO 60009
60057: POP
60058: POP
// if horses then
60059: LD_VAR 0 5
60063: IFFALSE 60130
// for i = 1 to horses do
60065: LD_ADDR_VAR 0 11
60069: PUSH
60070: DOUBLE
60071: LD_INT 1
60073: DEC
60074: ST_TO_ADDR
60075: LD_VAR 0 5
60079: PUSH
60080: FOR_TO
60081: IFFALSE 60128
// begin hc_class := 21 ;
60083: LD_ADDR_OWVAR 28
60087: PUSH
60088: LD_INT 21
60090: ST_TO_ADDR
// hc_gallery :=  ;
60091: LD_ADDR_OWVAR 33
60095: PUSH
60096: LD_STRING 
60098: ST_TO_ADDR
// animal := CreateHuman ;
60099: LD_ADDR_VAR 0 12
60103: PUSH
60104: CALL_OW 44
60108: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60109: LD_VAR 0 12
60113: PPUSH
60114: LD_VAR 0 8
60118: PPUSH
60119: LD_INT 0
60121: PPUSH
60122: CALL 62194 0 3
// end ;
60126: GO 60080
60128: POP
60129: POP
// if birds then
60130: LD_VAR 0 1
60134: IFFALSE 60201
// for i = 1 to birds do
60136: LD_ADDR_VAR 0 11
60140: PUSH
60141: DOUBLE
60142: LD_INT 1
60144: DEC
60145: ST_TO_ADDR
60146: LD_VAR 0 1
60150: PUSH
60151: FOR_TO
60152: IFFALSE 60199
// begin hc_class = 18 ;
60154: LD_ADDR_OWVAR 28
60158: PUSH
60159: LD_INT 18
60161: ST_TO_ADDR
// hc_gallery =  ;
60162: LD_ADDR_OWVAR 33
60166: PUSH
60167: LD_STRING 
60169: ST_TO_ADDR
// animal := CreateHuman ;
60170: LD_ADDR_VAR 0 12
60174: PUSH
60175: CALL_OW 44
60179: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60180: LD_VAR 0 12
60184: PPUSH
60185: LD_VAR 0 8
60189: PPUSH
60190: LD_INT 0
60192: PPUSH
60193: CALL 62194 0 3
// end ;
60197: GO 60151
60199: POP
60200: POP
// if tigers then
60201: LD_VAR 0 2
60205: IFFALSE 60289
// for i = 1 to tigers do
60207: LD_ADDR_VAR 0 11
60211: PUSH
60212: DOUBLE
60213: LD_INT 1
60215: DEC
60216: ST_TO_ADDR
60217: LD_VAR 0 2
60221: PUSH
60222: FOR_TO
60223: IFFALSE 60287
// begin hc_class = class_tiger ;
60225: LD_ADDR_OWVAR 28
60229: PUSH
60230: LD_INT 14
60232: ST_TO_ADDR
// hc_gallery =  ;
60233: LD_ADDR_OWVAR 33
60237: PUSH
60238: LD_STRING 
60240: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
60241: LD_ADDR_OWVAR 35
60245: PUSH
60246: LD_INT 7
60248: NEG
60249: PPUSH
60250: LD_INT 7
60252: PPUSH
60253: CALL_OW 12
60257: ST_TO_ADDR
// animal := CreateHuman ;
60258: LD_ADDR_VAR 0 12
60262: PUSH
60263: CALL_OW 44
60267: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60268: LD_VAR 0 12
60272: PPUSH
60273: LD_VAR 0 8
60277: PPUSH
60278: LD_INT 0
60280: PPUSH
60281: CALL 62194 0 3
// end ;
60285: GO 60222
60287: POP
60288: POP
// if apemans then
60289: LD_VAR 0 3
60293: IFFALSE 60416
// for i = 1 to apemans do
60295: LD_ADDR_VAR 0 11
60299: PUSH
60300: DOUBLE
60301: LD_INT 1
60303: DEC
60304: ST_TO_ADDR
60305: LD_VAR 0 3
60309: PUSH
60310: FOR_TO
60311: IFFALSE 60414
// begin hc_class = class_apeman ;
60313: LD_ADDR_OWVAR 28
60317: PUSH
60318: LD_INT 12
60320: ST_TO_ADDR
// hc_gallery =  ;
60321: LD_ADDR_OWVAR 33
60325: PUSH
60326: LD_STRING 
60328: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
60329: LD_ADDR_OWVAR 35
60333: PUSH
60334: LD_INT 2
60336: NEG
60337: PPUSH
60338: LD_INT 2
60340: PPUSH
60341: CALL_OW 12
60345: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
60346: LD_ADDR_OWVAR 31
60350: PUSH
60351: LD_INT 1
60353: PPUSH
60354: LD_INT 3
60356: PPUSH
60357: CALL_OW 12
60361: PUSH
60362: LD_INT 1
60364: PPUSH
60365: LD_INT 3
60367: PPUSH
60368: CALL_OW 12
60372: PUSH
60373: LD_INT 0
60375: PUSH
60376: LD_INT 0
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: LIST
60383: LIST
60384: ST_TO_ADDR
// animal := CreateHuman ;
60385: LD_ADDR_VAR 0 12
60389: PUSH
60390: CALL_OW 44
60394: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60395: LD_VAR 0 12
60399: PPUSH
60400: LD_VAR 0 8
60404: PPUSH
60405: LD_INT 0
60407: PPUSH
60408: CALL 62194 0 3
// end ;
60412: GO 60310
60414: POP
60415: POP
// if enchidnas then
60416: LD_VAR 0 4
60420: IFFALSE 60487
// for i = 1 to enchidnas do
60422: LD_ADDR_VAR 0 11
60426: PUSH
60427: DOUBLE
60428: LD_INT 1
60430: DEC
60431: ST_TO_ADDR
60432: LD_VAR 0 4
60436: PUSH
60437: FOR_TO
60438: IFFALSE 60485
// begin hc_class = 13 ;
60440: LD_ADDR_OWVAR 28
60444: PUSH
60445: LD_INT 13
60447: ST_TO_ADDR
// hc_gallery =  ;
60448: LD_ADDR_OWVAR 33
60452: PUSH
60453: LD_STRING 
60455: ST_TO_ADDR
// animal := CreateHuman ;
60456: LD_ADDR_VAR 0 12
60460: PUSH
60461: CALL_OW 44
60465: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60466: LD_VAR 0 12
60470: PPUSH
60471: LD_VAR 0 8
60475: PPUSH
60476: LD_INT 0
60478: PPUSH
60479: CALL 62194 0 3
// end ;
60483: GO 60437
60485: POP
60486: POP
// if fishes then
60487: LD_VAR 0 7
60491: IFFALSE 60558
// for i = 1 to fishes do
60493: LD_ADDR_VAR 0 11
60497: PUSH
60498: DOUBLE
60499: LD_INT 1
60501: DEC
60502: ST_TO_ADDR
60503: LD_VAR 0 7
60507: PUSH
60508: FOR_TO
60509: IFFALSE 60556
// begin hc_class = 20 ;
60511: LD_ADDR_OWVAR 28
60515: PUSH
60516: LD_INT 20
60518: ST_TO_ADDR
// hc_gallery =  ;
60519: LD_ADDR_OWVAR 33
60523: PUSH
60524: LD_STRING 
60526: ST_TO_ADDR
// animal := CreateHuman ;
60527: LD_ADDR_VAR 0 12
60531: PUSH
60532: CALL_OW 44
60536: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
60537: LD_VAR 0 12
60541: PPUSH
60542: LD_VAR 0 9
60546: PPUSH
60547: LD_INT 0
60549: PPUSH
60550: CALL 62194 0 3
// end ;
60554: GO 60508
60556: POP
60557: POP
// end ;
60558: LD_VAR 0 10
60562: RET
// export function WantHeal ( sci , unit ) ; begin
60563: LD_INT 0
60565: PPUSH
// if GetTaskList ( sci ) > 0 then
60566: LD_VAR 0 1
60570: PPUSH
60571: CALL_OW 437
60575: PUSH
60576: LD_INT 0
60578: GREATER
60579: IFFALSE 60649
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
60581: LD_VAR 0 1
60585: PPUSH
60586: CALL_OW 437
60590: PUSH
60591: LD_INT 1
60593: ARRAY
60594: PUSH
60595: LD_INT 1
60597: ARRAY
60598: PUSH
60599: LD_STRING l
60601: EQUAL
60602: PUSH
60603: LD_VAR 0 1
60607: PPUSH
60608: CALL_OW 437
60612: PUSH
60613: LD_INT 1
60615: ARRAY
60616: PUSH
60617: LD_INT 4
60619: ARRAY
60620: PUSH
60621: LD_VAR 0 2
60625: EQUAL
60626: AND
60627: IFFALSE 60639
// result := true else
60629: LD_ADDR_VAR 0 3
60633: PUSH
60634: LD_INT 1
60636: ST_TO_ADDR
60637: GO 60647
// result := false ;
60639: LD_ADDR_VAR 0 3
60643: PUSH
60644: LD_INT 0
60646: ST_TO_ADDR
// end else
60647: GO 60657
// result := false ;
60649: LD_ADDR_VAR 0 3
60653: PUSH
60654: LD_INT 0
60656: ST_TO_ADDR
// end ;
60657: LD_VAR 0 3
60661: RET
// export function HealTarget ( sci ) ; begin
60662: LD_INT 0
60664: PPUSH
// if not sci then
60665: LD_VAR 0 1
60669: NOT
60670: IFFALSE 60674
// exit ;
60672: GO 60739
// result := 0 ;
60674: LD_ADDR_VAR 0 2
60678: PUSH
60679: LD_INT 0
60681: ST_TO_ADDR
// if GetTaskList ( sci ) then
60682: LD_VAR 0 1
60686: PPUSH
60687: CALL_OW 437
60691: IFFALSE 60739
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
60693: LD_VAR 0 1
60697: PPUSH
60698: CALL_OW 437
60702: PUSH
60703: LD_INT 1
60705: ARRAY
60706: PUSH
60707: LD_INT 1
60709: ARRAY
60710: PUSH
60711: LD_STRING l
60713: EQUAL
60714: IFFALSE 60739
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
60716: LD_ADDR_VAR 0 2
60720: PUSH
60721: LD_VAR 0 1
60725: PPUSH
60726: CALL_OW 437
60730: PUSH
60731: LD_INT 1
60733: ARRAY
60734: PUSH
60735: LD_INT 4
60737: ARRAY
60738: ST_TO_ADDR
// end ;
60739: LD_VAR 0 2
60743: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
60744: LD_INT 0
60746: PPUSH
60747: PPUSH
60748: PPUSH
60749: PPUSH
// if not base_units then
60750: LD_VAR 0 1
60754: NOT
60755: IFFALSE 60759
// exit ;
60757: GO 60846
// result := false ;
60759: LD_ADDR_VAR 0 2
60763: PUSH
60764: LD_INT 0
60766: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
60767: LD_ADDR_VAR 0 5
60771: PUSH
60772: LD_VAR 0 1
60776: PPUSH
60777: LD_INT 21
60779: PUSH
60780: LD_INT 3
60782: PUSH
60783: EMPTY
60784: LIST
60785: LIST
60786: PPUSH
60787: CALL_OW 72
60791: ST_TO_ADDR
// if not tmp then
60792: LD_VAR 0 5
60796: NOT
60797: IFFALSE 60801
// exit ;
60799: GO 60846
// for i in tmp do
60801: LD_ADDR_VAR 0 3
60805: PUSH
60806: LD_VAR 0 5
60810: PUSH
60811: FOR_IN
60812: IFFALSE 60844
// begin result := EnemyInRange ( i , 22 ) ;
60814: LD_ADDR_VAR 0 2
60818: PUSH
60819: LD_VAR 0 3
60823: PPUSH
60824: LD_INT 22
60826: PPUSH
60827: CALL 58515 0 2
60831: ST_TO_ADDR
// if result then
60832: LD_VAR 0 2
60836: IFFALSE 60842
// exit ;
60838: POP
60839: POP
60840: GO 60846
// end ;
60842: GO 60811
60844: POP
60845: POP
// end ;
60846: LD_VAR 0 2
60850: RET
// export function FilterByTag ( units , tag ) ; begin
60851: LD_INT 0
60853: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
60854: LD_ADDR_VAR 0 3
60858: PUSH
60859: LD_VAR 0 1
60863: PPUSH
60864: LD_INT 120
60866: PUSH
60867: LD_VAR 0 2
60871: PUSH
60872: EMPTY
60873: LIST
60874: LIST
60875: PPUSH
60876: CALL_OW 72
60880: ST_TO_ADDR
// end ;
60881: LD_VAR 0 3
60885: RET
// export function IsDriver ( un ) ; begin
60886: LD_INT 0
60888: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
60889: LD_ADDR_VAR 0 2
60893: PUSH
60894: LD_VAR 0 1
60898: PUSH
60899: LD_INT 55
60901: PUSH
60902: EMPTY
60903: LIST
60904: PPUSH
60905: CALL_OW 69
60909: IN
60910: ST_TO_ADDR
// end ;
60911: LD_VAR 0 2
60915: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
60916: LD_INT 0
60918: PPUSH
60919: PPUSH
// list := [ ] ;
60920: LD_ADDR_VAR 0 5
60924: PUSH
60925: EMPTY
60926: ST_TO_ADDR
// case d of 0 :
60927: LD_VAR 0 3
60931: PUSH
60932: LD_INT 0
60934: DOUBLE
60935: EQUAL
60936: IFTRUE 60940
60938: GO 61073
60940: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
60941: LD_ADDR_VAR 0 5
60945: PUSH
60946: LD_VAR 0 1
60950: PUSH
60951: LD_INT 4
60953: MINUS
60954: PUSH
60955: LD_VAR 0 2
60959: PUSH
60960: LD_INT 4
60962: MINUS
60963: PUSH
60964: LD_INT 2
60966: PUSH
60967: EMPTY
60968: LIST
60969: LIST
60970: LIST
60971: PUSH
60972: LD_VAR 0 1
60976: PUSH
60977: LD_INT 3
60979: MINUS
60980: PUSH
60981: LD_VAR 0 2
60985: PUSH
60986: LD_INT 1
60988: PUSH
60989: EMPTY
60990: LIST
60991: LIST
60992: LIST
60993: PUSH
60994: LD_VAR 0 1
60998: PUSH
60999: LD_INT 4
61001: PLUS
61002: PUSH
61003: LD_VAR 0 2
61007: PUSH
61008: LD_INT 4
61010: PUSH
61011: EMPTY
61012: LIST
61013: LIST
61014: LIST
61015: PUSH
61016: LD_VAR 0 1
61020: PUSH
61021: LD_INT 3
61023: PLUS
61024: PUSH
61025: LD_VAR 0 2
61029: PUSH
61030: LD_INT 3
61032: PLUS
61033: PUSH
61034: LD_INT 5
61036: PUSH
61037: EMPTY
61038: LIST
61039: LIST
61040: LIST
61041: PUSH
61042: LD_VAR 0 1
61046: PUSH
61047: LD_VAR 0 2
61051: PUSH
61052: LD_INT 4
61054: PLUS
61055: PUSH
61056: LD_INT 0
61058: PUSH
61059: EMPTY
61060: LIST
61061: LIST
61062: LIST
61063: PUSH
61064: EMPTY
61065: LIST
61066: LIST
61067: LIST
61068: LIST
61069: LIST
61070: ST_TO_ADDR
// end ; 1 :
61071: GO 61771
61073: LD_INT 1
61075: DOUBLE
61076: EQUAL
61077: IFTRUE 61081
61079: GO 61214
61081: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
61082: LD_ADDR_VAR 0 5
61086: PUSH
61087: LD_VAR 0 1
61091: PUSH
61092: LD_VAR 0 2
61096: PUSH
61097: LD_INT 4
61099: MINUS
61100: PUSH
61101: LD_INT 3
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: LIST
61108: PUSH
61109: LD_VAR 0 1
61113: PUSH
61114: LD_INT 3
61116: MINUS
61117: PUSH
61118: LD_VAR 0 2
61122: PUSH
61123: LD_INT 3
61125: MINUS
61126: PUSH
61127: LD_INT 2
61129: PUSH
61130: EMPTY
61131: LIST
61132: LIST
61133: LIST
61134: PUSH
61135: LD_VAR 0 1
61139: PUSH
61140: LD_INT 4
61142: MINUS
61143: PUSH
61144: LD_VAR 0 2
61148: PUSH
61149: LD_INT 1
61151: PUSH
61152: EMPTY
61153: LIST
61154: LIST
61155: LIST
61156: PUSH
61157: LD_VAR 0 1
61161: PUSH
61162: LD_VAR 0 2
61166: PUSH
61167: LD_INT 3
61169: PLUS
61170: PUSH
61171: LD_INT 0
61173: PUSH
61174: EMPTY
61175: LIST
61176: LIST
61177: LIST
61178: PUSH
61179: LD_VAR 0 1
61183: PUSH
61184: LD_INT 4
61186: PLUS
61187: PUSH
61188: LD_VAR 0 2
61192: PUSH
61193: LD_INT 4
61195: PLUS
61196: PUSH
61197: LD_INT 5
61199: PUSH
61200: EMPTY
61201: LIST
61202: LIST
61203: LIST
61204: PUSH
61205: EMPTY
61206: LIST
61207: LIST
61208: LIST
61209: LIST
61210: LIST
61211: ST_TO_ADDR
// end ; 2 :
61212: GO 61771
61214: LD_INT 2
61216: DOUBLE
61217: EQUAL
61218: IFTRUE 61222
61220: GO 61351
61222: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
61223: LD_ADDR_VAR 0 5
61227: PUSH
61228: LD_VAR 0 1
61232: PUSH
61233: LD_VAR 0 2
61237: PUSH
61238: LD_INT 3
61240: MINUS
61241: PUSH
61242: LD_INT 3
61244: PUSH
61245: EMPTY
61246: LIST
61247: LIST
61248: LIST
61249: PUSH
61250: LD_VAR 0 1
61254: PUSH
61255: LD_INT 4
61257: PLUS
61258: PUSH
61259: LD_VAR 0 2
61263: PUSH
61264: LD_INT 4
61266: PUSH
61267: EMPTY
61268: LIST
61269: LIST
61270: LIST
61271: PUSH
61272: LD_VAR 0 1
61276: PUSH
61277: LD_VAR 0 2
61281: PUSH
61282: LD_INT 4
61284: PLUS
61285: PUSH
61286: LD_INT 0
61288: PUSH
61289: EMPTY
61290: LIST
61291: LIST
61292: LIST
61293: PUSH
61294: LD_VAR 0 1
61298: PUSH
61299: LD_INT 3
61301: MINUS
61302: PUSH
61303: LD_VAR 0 2
61307: PUSH
61308: LD_INT 1
61310: PUSH
61311: EMPTY
61312: LIST
61313: LIST
61314: LIST
61315: PUSH
61316: LD_VAR 0 1
61320: PUSH
61321: LD_INT 4
61323: MINUS
61324: PUSH
61325: LD_VAR 0 2
61329: PUSH
61330: LD_INT 4
61332: MINUS
61333: PUSH
61334: LD_INT 2
61336: PUSH
61337: EMPTY
61338: LIST
61339: LIST
61340: LIST
61341: PUSH
61342: EMPTY
61343: LIST
61344: LIST
61345: LIST
61346: LIST
61347: LIST
61348: ST_TO_ADDR
// end ; 3 :
61349: GO 61771
61351: LD_INT 3
61353: DOUBLE
61354: EQUAL
61355: IFTRUE 61359
61357: GO 61492
61359: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
61360: LD_ADDR_VAR 0 5
61364: PUSH
61365: LD_VAR 0 1
61369: PUSH
61370: LD_INT 3
61372: PLUS
61373: PUSH
61374: LD_VAR 0 2
61378: PUSH
61379: LD_INT 4
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: LIST
61386: PUSH
61387: LD_VAR 0 1
61391: PUSH
61392: LD_INT 4
61394: PLUS
61395: PUSH
61396: LD_VAR 0 2
61400: PUSH
61401: LD_INT 4
61403: PLUS
61404: PUSH
61405: LD_INT 5
61407: PUSH
61408: EMPTY
61409: LIST
61410: LIST
61411: LIST
61412: PUSH
61413: LD_VAR 0 1
61417: PUSH
61418: LD_INT 4
61420: MINUS
61421: PUSH
61422: LD_VAR 0 2
61426: PUSH
61427: LD_INT 1
61429: PUSH
61430: EMPTY
61431: LIST
61432: LIST
61433: LIST
61434: PUSH
61435: LD_VAR 0 1
61439: PUSH
61440: LD_VAR 0 2
61444: PUSH
61445: LD_INT 4
61447: MINUS
61448: PUSH
61449: LD_INT 3
61451: PUSH
61452: EMPTY
61453: LIST
61454: LIST
61455: LIST
61456: PUSH
61457: LD_VAR 0 1
61461: PUSH
61462: LD_INT 3
61464: MINUS
61465: PUSH
61466: LD_VAR 0 2
61470: PUSH
61471: LD_INT 3
61473: MINUS
61474: PUSH
61475: LD_INT 2
61477: PUSH
61478: EMPTY
61479: LIST
61480: LIST
61481: LIST
61482: PUSH
61483: EMPTY
61484: LIST
61485: LIST
61486: LIST
61487: LIST
61488: LIST
61489: ST_TO_ADDR
// end ; 4 :
61490: GO 61771
61492: LD_INT 4
61494: DOUBLE
61495: EQUAL
61496: IFTRUE 61500
61498: GO 61633
61500: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
61501: LD_ADDR_VAR 0 5
61505: PUSH
61506: LD_VAR 0 1
61510: PUSH
61511: LD_VAR 0 2
61515: PUSH
61516: LD_INT 4
61518: PLUS
61519: PUSH
61520: LD_INT 0
61522: PUSH
61523: EMPTY
61524: LIST
61525: LIST
61526: LIST
61527: PUSH
61528: LD_VAR 0 1
61532: PUSH
61533: LD_INT 3
61535: PLUS
61536: PUSH
61537: LD_VAR 0 2
61541: PUSH
61542: LD_INT 3
61544: PLUS
61545: PUSH
61546: LD_INT 5
61548: PUSH
61549: EMPTY
61550: LIST
61551: LIST
61552: LIST
61553: PUSH
61554: LD_VAR 0 1
61558: PUSH
61559: LD_INT 4
61561: PLUS
61562: PUSH
61563: LD_VAR 0 2
61567: PUSH
61568: LD_INT 4
61570: PUSH
61571: EMPTY
61572: LIST
61573: LIST
61574: LIST
61575: PUSH
61576: LD_VAR 0 1
61580: PUSH
61581: LD_VAR 0 2
61585: PUSH
61586: LD_INT 3
61588: MINUS
61589: PUSH
61590: LD_INT 3
61592: PUSH
61593: EMPTY
61594: LIST
61595: LIST
61596: LIST
61597: PUSH
61598: LD_VAR 0 1
61602: PUSH
61603: LD_INT 4
61605: MINUS
61606: PUSH
61607: LD_VAR 0 2
61611: PUSH
61612: LD_INT 4
61614: MINUS
61615: PUSH
61616: LD_INT 2
61618: PUSH
61619: EMPTY
61620: LIST
61621: LIST
61622: LIST
61623: PUSH
61624: EMPTY
61625: LIST
61626: LIST
61627: LIST
61628: LIST
61629: LIST
61630: ST_TO_ADDR
// end ; 5 :
61631: GO 61771
61633: LD_INT 5
61635: DOUBLE
61636: EQUAL
61637: IFTRUE 61641
61639: GO 61770
61641: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
61642: LD_ADDR_VAR 0 5
61646: PUSH
61647: LD_VAR 0 1
61651: PUSH
61652: LD_INT 4
61654: MINUS
61655: PUSH
61656: LD_VAR 0 2
61660: PUSH
61661: LD_INT 1
61663: PUSH
61664: EMPTY
61665: LIST
61666: LIST
61667: LIST
61668: PUSH
61669: LD_VAR 0 1
61673: PUSH
61674: LD_VAR 0 2
61678: PUSH
61679: LD_INT 4
61681: MINUS
61682: PUSH
61683: LD_INT 3
61685: PUSH
61686: EMPTY
61687: LIST
61688: LIST
61689: LIST
61690: PUSH
61691: LD_VAR 0 1
61695: PUSH
61696: LD_INT 4
61698: PLUS
61699: PUSH
61700: LD_VAR 0 2
61704: PUSH
61705: LD_INT 4
61707: PLUS
61708: PUSH
61709: LD_INT 5
61711: PUSH
61712: EMPTY
61713: LIST
61714: LIST
61715: LIST
61716: PUSH
61717: LD_VAR 0 1
61721: PUSH
61722: LD_INT 3
61724: PLUS
61725: PUSH
61726: LD_VAR 0 2
61730: PUSH
61731: LD_INT 4
61733: PUSH
61734: EMPTY
61735: LIST
61736: LIST
61737: LIST
61738: PUSH
61739: LD_VAR 0 1
61743: PUSH
61744: LD_VAR 0 2
61748: PUSH
61749: LD_INT 3
61751: PLUS
61752: PUSH
61753: LD_INT 0
61755: PUSH
61756: EMPTY
61757: LIST
61758: LIST
61759: LIST
61760: PUSH
61761: EMPTY
61762: LIST
61763: LIST
61764: LIST
61765: LIST
61766: LIST
61767: ST_TO_ADDR
// end ; end ;
61768: GO 61771
61770: POP
// result := list ;
61771: LD_ADDR_VAR 0 4
61775: PUSH
61776: LD_VAR 0 5
61780: ST_TO_ADDR
// end ;
61781: LD_VAR 0 4
61785: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
61786: LD_INT 0
61788: PPUSH
61789: PPUSH
61790: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
61791: LD_VAR 0 1
61795: NOT
61796: PUSH
61797: LD_VAR 0 2
61801: PUSH
61802: LD_INT 1
61804: PUSH
61805: LD_INT 2
61807: PUSH
61808: LD_INT 3
61810: PUSH
61811: LD_INT 4
61813: PUSH
61814: EMPTY
61815: LIST
61816: LIST
61817: LIST
61818: LIST
61819: IN
61820: NOT
61821: OR
61822: IFFALSE 61826
// exit ;
61824: GO 61918
// tmp := [ ] ;
61826: LD_ADDR_VAR 0 5
61830: PUSH
61831: EMPTY
61832: ST_TO_ADDR
// for i in units do
61833: LD_ADDR_VAR 0 4
61837: PUSH
61838: LD_VAR 0 1
61842: PUSH
61843: FOR_IN
61844: IFFALSE 61887
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
61846: LD_ADDR_VAR 0 5
61850: PUSH
61851: LD_VAR 0 5
61855: PPUSH
61856: LD_VAR 0 5
61860: PUSH
61861: LD_INT 1
61863: PLUS
61864: PPUSH
61865: LD_VAR 0 4
61869: PPUSH
61870: LD_VAR 0 2
61874: PPUSH
61875: CALL_OW 259
61879: PPUSH
61880: CALL_OW 2
61884: ST_TO_ADDR
61885: GO 61843
61887: POP
61888: POP
// if not tmp then
61889: LD_VAR 0 5
61893: NOT
61894: IFFALSE 61898
// exit ;
61896: GO 61918
// result := SortListByListDesc ( units , tmp ) ;
61898: LD_ADDR_VAR 0 3
61902: PUSH
61903: LD_VAR 0 1
61907: PPUSH
61908: LD_VAR 0 5
61912: PPUSH
61913: CALL_OW 77
61917: ST_TO_ADDR
// end ;
61918: LD_VAR 0 3
61922: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
61923: LD_INT 0
61925: PPUSH
61926: PPUSH
61927: PPUSH
// result := false ;
61928: LD_ADDR_VAR 0 3
61932: PUSH
61933: LD_INT 0
61935: ST_TO_ADDR
// x := GetX ( building ) ;
61936: LD_ADDR_VAR 0 4
61940: PUSH
61941: LD_VAR 0 2
61945: PPUSH
61946: CALL_OW 250
61950: ST_TO_ADDR
// y := GetY ( building ) ;
61951: LD_ADDR_VAR 0 5
61955: PUSH
61956: LD_VAR 0 2
61960: PPUSH
61961: CALL_OW 251
61965: ST_TO_ADDR
// if not building or not x or not y then
61966: LD_VAR 0 2
61970: NOT
61971: PUSH
61972: LD_VAR 0 4
61976: NOT
61977: OR
61978: PUSH
61979: LD_VAR 0 5
61983: NOT
61984: OR
61985: IFFALSE 61989
// exit ;
61987: GO 62081
// if GetTaskList ( unit ) then
61989: LD_VAR 0 1
61993: PPUSH
61994: CALL_OW 437
61998: IFFALSE 62081
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62000: LD_STRING e
62002: PUSH
62003: LD_VAR 0 1
62007: PPUSH
62008: CALL_OW 437
62012: PUSH
62013: LD_INT 1
62015: ARRAY
62016: PUSH
62017: LD_INT 1
62019: ARRAY
62020: EQUAL
62021: PUSH
62022: LD_VAR 0 4
62026: PUSH
62027: LD_VAR 0 1
62031: PPUSH
62032: CALL_OW 437
62036: PUSH
62037: LD_INT 1
62039: ARRAY
62040: PUSH
62041: LD_INT 2
62043: ARRAY
62044: EQUAL
62045: AND
62046: PUSH
62047: LD_VAR 0 5
62051: PUSH
62052: LD_VAR 0 1
62056: PPUSH
62057: CALL_OW 437
62061: PUSH
62062: LD_INT 1
62064: ARRAY
62065: PUSH
62066: LD_INT 3
62068: ARRAY
62069: EQUAL
62070: AND
62071: IFFALSE 62081
// result := true end ;
62073: LD_ADDR_VAR 0 3
62077: PUSH
62078: LD_INT 1
62080: ST_TO_ADDR
// end ;
62081: LD_VAR 0 3
62085: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
62086: LD_INT 0
62088: PPUSH
// result := false ;
62089: LD_ADDR_VAR 0 4
62093: PUSH
62094: LD_INT 0
62096: ST_TO_ADDR
// if GetTaskList ( unit ) then
62097: LD_VAR 0 1
62101: PPUSH
62102: CALL_OW 437
62106: IFFALSE 62189
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62108: LD_STRING M
62110: PUSH
62111: LD_VAR 0 1
62115: PPUSH
62116: CALL_OW 437
62120: PUSH
62121: LD_INT 1
62123: ARRAY
62124: PUSH
62125: LD_INT 1
62127: ARRAY
62128: EQUAL
62129: PUSH
62130: LD_VAR 0 2
62134: PUSH
62135: LD_VAR 0 1
62139: PPUSH
62140: CALL_OW 437
62144: PUSH
62145: LD_INT 1
62147: ARRAY
62148: PUSH
62149: LD_INT 2
62151: ARRAY
62152: EQUAL
62153: AND
62154: PUSH
62155: LD_VAR 0 3
62159: PUSH
62160: LD_VAR 0 1
62164: PPUSH
62165: CALL_OW 437
62169: PUSH
62170: LD_INT 1
62172: ARRAY
62173: PUSH
62174: LD_INT 3
62176: ARRAY
62177: EQUAL
62178: AND
62179: IFFALSE 62189
// result := true ;
62181: LD_ADDR_VAR 0 4
62185: PUSH
62186: LD_INT 1
62188: ST_TO_ADDR
// end ; end ;
62189: LD_VAR 0 4
62193: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
62194: LD_INT 0
62196: PPUSH
62197: PPUSH
62198: PPUSH
62199: PPUSH
// if not unit or not area then
62200: LD_VAR 0 1
62204: NOT
62205: PUSH
62206: LD_VAR 0 2
62210: NOT
62211: OR
62212: IFFALSE 62216
// exit ;
62214: GO 62380
// tmp := AreaToList ( area , i ) ;
62216: LD_ADDR_VAR 0 6
62220: PUSH
62221: LD_VAR 0 2
62225: PPUSH
62226: LD_VAR 0 5
62230: PPUSH
62231: CALL_OW 517
62235: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
62236: LD_ADDR_VAR 0 5
62240: PUSH
62241: DOUBLE
62242: LD_INT 1
62244: DEC
62245: ST_TO_ADDR
62246: LD_VAR 0 6
62250: PUSH
62251: LD_INT 1
62253: ARRAY
62254: PUSH
62255: FOR_TO
62256: IFFALSE 62378
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
62258: LD_ADDR_VAR 0 7
62262: PUSH
62263: LD_VAR 0 6
62267: PUSH
62268: LD_INT 1
62270: ARRAY
62271: PUSH
62272: LD_VAR 0 5
62276: ARRAY
62277: PUSH
62278: LD_VAR 0 6
62282: PUSH
62283: LD_INT 2
62285: ARRAY
62286: PUSH
62287: LD_VAR 0 5
62291: ARRAY
62292: PUSH
62293: EMPTY
62294: LIST
62295: LIST
62296: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
62297: LD_VAR 0 7
62301: PUSH
62302: LD_INT 1
62304: ARRAY
62305: PPUSH
62306: LD_VAR 0 7
62310: PUSH
62311: LD_INT 2
62313: ARRAY
62314: PPUSH
62315: CALL_OW 428
62319: PUSH
62320: LD_INT 0
62322: EQUAL
62323: IFFALSE 62376
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
62325: LD_VAR 0 1
62329: PPUSH
62330: LD_VAR 0 7
62334: PUSH
62335: LD_INT 1
62337: ARRAY
62338: PPUSH
62339: LD_VAR 0 7
62343: PUSH
62344: LD_INT 2
62346: ARRAY
62347: PPUSH
62348: LD_VAR 0 3
62352: PPUSH
62353: CALL_OW 48
// result := IsPlaced ( unit ) ;
62357: LD_ADDR_VAR 0 4
62361: PUSH
62362: LD_VAR 0 1
62366: PPUSH
62367: CALL_OW 305
62371: ST_TO_ADDR
// exit ;
62372: POP
62373: POP
62374: GO 62380
// end ; end ;
62376: GO 62255
62378: POP
62379: POP
// end ;
62380: LD_VAR 0 4
62384: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
62385: LD_INT 0
62387: PPUSH
62388: PPUSH
62389: PPUSH
// if not side or side > 8 then
62390: LD_VAR 0 1
62394: NOT
62395: PUSH
62396: LD_VAR 0 1
62400: PUSH
62401: LD_INT 8
62403: GREATER
62404: OR
62405: IFFALSE 62409
// exit ;
62407: GO 62596
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
62409: LD_ADDR_VAR 0 4
62413: PUSH
62414: LD_INT 22
62416: PUSH
62417: LD_VAR 0 1
62421: PUSH
62422: EMPTY
62423: LIST
62424: LIST
62425: PUSH
62426: LD_INT 21
62428: PUSH
62429: LD_INT 3
62431: PUSH
62432: EMPTY
62433: LIST
62434: LIST
62435: PUSH
62436: EMPTY
62437: LIST
62438: LIST
62439: PPUSH
62440: CALL_OW 69
62444: ST_TO_ADDR
// if not tmp then
62445: LD_VAR 0 4
62449: NOT
62450: IFFALSE 62454
// exit ;
62452: GO 62596
// enable_addtolog := true ;
62454: LD_ADDR_OWVAR 81
62458: PUSH
62459: LD_INT 1
62461: ST_TO_ADDR
// AddToLog ( [ ) ;
62462: LD_STRING [
62464: PPUSH
62465: CALL_OW 561
// for i in tmp do
62469: LD_ADDR_VAR 0 3
62473: PUSH
62474: LD_VAR 0 4
62478: PUSH
62479: FOR_IN
62480: IFFALSE 62587
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
62482: LD_STRING [
62484: PUSH
62485: LD_VAR 0 3
62489: PPUSH
62490: CALL_OW 266
62494: STR
62495: PUSH
62496: LD_STRING , 
62498: STR
62499: PUSH
62500: LD_VAR 0 3
62504: PPUSH
62505: CALL_OW 250
62509: STR
62510: PUSH
62511: LD_STRING , 
62513: STR
62514: PUSH
62515: LD_VAR 0 3
62519: PPUSH
62520: CALL_OW 251
62524: STR
62525: PUSH
62526: LD_STRING , 
62528: STR
62529: PUSH
62530: LD_VAR 0 3
62534: PPUSH
62535: CALL_OW 254
62539: STR
62540: PUSH
62541: LD_STRING , 
62543: STR
62544: PUSH
62545: LD_VAR 0 3
62549: PPUSH
62550: LD_INT 1
62552: PPUSH
62553: CALL_OW 268
62557: STR
62558: PUSH
62559: LD_STRING , 
62561: STR
62562: PUSH
62563: LD_VAR 0 3
62567: PPUSH
62568: LD_INT 2
62570: PPUSH
62571: CALL_OW 268
62575: STR
62576: PUSH
62577: LD_STRING ],
62579: STR
62580: PPUSH
62581: CALL_OW 561
// end ;
62585: GO 62479
62587: POP
62588: POP
// AddToLog ( ]; ) ;
62589: LD_STRING ];
62591: PPUSH
62592: CALL_OW 561
// end ;
62596: LD_VAR 0 2
62600: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
62601: LD_INT 0
62603: PPUSH
62604: PPUSH
62605: PPUSH
62606: PPUSH
62607: PPUSH
// if not area or not rate or not max then
62608: LD_VAR 0 1
62612: NOT
62613: PUSH
62614: LD_VAR 0 2
62618: NOT
62619: OR
62620: PUSH
62621: LD_VAR 0 4
62625: NOT
62626: OR
62627: IFFALSE 62631
// exit ;
62629: GO 62820
// while 1 do
62631: LD_INT 1
62633: IFFALSE 62820
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
62635: LD_ADDR_VAR 0 9
62639: PUSH
62640: LD_VAR 0 1
62644: PPUSH
62645: LD_INT 1
62647: PPUSH
62648: CALL_OW 287
62652: PUSH
62653: LD_INT 10
62655: MUL
62656: ST_TO_ADDR
// r := rate / 10 ;
62657: LD_ADDR_VAR 0 7
62661: PUSH
62662: LD_VAR 0 2
62666: PUSH
62667: LD_INT 10
62669: DIVREAL
62670: ST_TO_ADDR
// time := 1 1$00 ;
62671: LD_ADDR_VAR 0 8
62675: PUSH
62676: LD_INT 2100
62678: ST_TO_ADDR
// if amount < min then
62679: LD_VAR 0 9
62683: PUSH
62684: LD_VAR 0 3
62688: LESS
62689: IFFALSE 62707
// r := r * 2 else
62691: LD_ADDR_VAR 0 7
62695: PUSH
62696: LD_VAR 0 7
62700: PUSH
62701: LD_INT 2
62703: MUL
62704: ST_TO_ADDR
62705: GO 62733
// if amount > max then
62707: LD_VAR 0 9
62711: PUSH
62712: LD_VAR 0 4
62716: GREATER
62717: IFFALSE 62733
// r := r / 2 ;
62719: LD_ADDR_VAR 0 7
62723: PUSH
62724: LD_VAR 0 7
62728: PUSH
62729: LD_INT 2
62731: DIVREAL
62732: ST_TO_ADDR
// time := time / r ;
62733: LD_ADDR_VAR 0 8
62737: PUSH
62738: LD_VAR 0 8
62742: PUSH
62743: LD_VAR 0 7
62747: DIVREAL
62748: ST_TO_ADDR
// if time < 0 then
62749: LD_VAR 0 8
62753: PUSH
62754: LD_INT 0
62756: LESS
62757: IFFALSE 62774
// time := time * - 1 ;
62759: LD_ADDR_VAR 0 8
62763: PUSH
62764: LD_VAR 0 8
62768: PUSH
62769: LD_INT 1
62771: NEG
62772: MUL
62773: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
62774: LD_VAR 0 8
62778: PUSH
62779: LD_INT 35
62781: PPUSH
62782: LD_INT 875
62784: PPUSH
62785: CALL_OW 12
62789: PLUS
62790: PPUSH
62791: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
62795: LD_INT 1
62797: PPUSH
62798: LD_INT 5
62800: PPUSH
62801: CALL_OW 12
62805: PPUSH
62806: LD_VAR 0 1
62810: PPUSH
62811: LD_INT 1
62813: PPUSH
62814: CALL_OW 55
// end ;
62818: GO 62631
// end ;
62820: LD_VAR 0 5
62824: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
62825: LD_INT 0
62827: PPUSH
62828: PPUSH
62829: PPUSH
62830: PPUSH
62831: PPUSH
62832: PPUSH
62833: PPUSH
62834: PPUSH
// if not turrets or not factories then
62835: LD_VAR 0 1
62839: NOT
62840: PUSH
62841: LD_VAR 0 2
62845: NOT
62846: OR
62847: IFFALSE 62851
// exit ;
62849: GO 63158
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
62851: LD_ADDR_VAR 0 10
62855: PUSH
62856: LD_INT 5
62858: PUSH
62859: LD_INT 6
62861: PUSH
62862: EMPTY
62863: LIST
62864: LIST
62865: PUSH
62866: LD_INT 2
62868: PUSH
62869: LD_INT 4
62871: PUSH
62872: EMPTY
62873: LIST
62874: LIST
62875: PUSH
62876: LD_INT 3
62878: PUSH
62879: LD_INT 5
62881: PUSH
62882: EMPTY
62883: LIST
62884: LIST
62885: PUSH
62886: EMPTY
62887: LIST
62888: LIST
62889: LIST
62890: PUSH
62891: LD_INT 24
62893: PUSH
62894: LD_INT 25
62896: PUSH
62897: EMPTY
62898: LIST
62899: LIST
62900: PUSH
62901: LD_INT 23
62903: PUSH
62904: LD_INT 27
62906: PUSH
62907: EMPTY
62908: LIST
62909: LIST
62910: PUSH
62911: EMPTY
62912: LIST
62913: LIST
62914: PUSH
62915: LD_INT 42
62917: PUSH
62918: LD_INT 43
62920: PUSH
62921: EMPTY
62922: LIST
62923: LIST
62924: PUSH
62925: LD_INT 44
62927: PUSH
62928: LD_INT 46
62930: PUSH
62931: EMPTY
62932: LIST
62933: LIST
62934: PUSH
62935: LD_INT 45
62937: PUSH
62938: LD_INT 47
62940: PUSH
62941: EMPTY
62942: LIST
62943: LIST
62944: PUSH
62945: EMPTY
62946: LIST
62947: LIST
62948: LIST
62949: PUSH
62950: EMPTY
62951: LIST
62952: LIST
62953: LIST
62954: ST_TO_ADDR
// result := [ ] ;
62955: LD_ADDR_VAR 0 3
62959: PUSH
62960: EMPTY
62961: ST_TO_ADDR
// for i in turrets do
62962: LD_ADDR_VAR 0 4
62966: PUSH
62967: LD_VAR 0 1
62971: PUSH
62972: FOR_IN
62973: IFFALSE 63156
// begin nat := GetNation ( i ) ;
62975: LD_ADDR_VAR 0 7
62979: PUSH
62980: LD_VAR 0 4
62984: PPUSH
62985: CALL_OW 248
62989: ST_TO_ADDR
// weapon := 0 ;
62990: LD_ADDR_VAR 0 8
62994: PUSH
62995: LD_INT 0
62997: ST_TO_ADDR
// if not nat then
62998: LD_VAR 0 7
63002: NOT
63003: IFFALSE 63007
// continue ;
63005: GO 62972
// for j in list [ nat ] do
63007: LD_ADDR_VAR 0 5
63011: PUSH
63012: LD_VAR 0 10
63016: PUSH
63017: LD_VAR 0 7
63021: ARRAY
63022: PUSH
63023: FOR_IN
63024: IFFALSE 63065
// if GetBWeapon ( i ) = j [ 1 ] then
63026: LD_VAR 0 4
63030: PPUSH
63031: CALL_OW 269
63035: PUSH
63036: LD_VAR 0 5
63040: PUSH
63041: LD_INT 1
63043: ARRAY
63044: EQUAL
63045: IFFALSE 63063
// begin weapon := j [ 2 ] ;
63047: LD_ADDR_VAR 0 8
63051: PUSH
63052: LD_VAR 0 5
63056: PUSH
63057: LD_INT 2
63059: ARRAY
63060: ST_TO_ADDR
// break ;
63061: GO 63065
// end ;
63063: GO 63023
63065: POP
63066: POP
// if not weapon then
63067: LD_VAR 0 8
63071: NOT
63072: IFFALSE 63076
// continue ;
63074: GO 62972
// for k in factories do
63076: LD_ADDR_VAR 0 6
63080: PUSH
63081: LD_VAR 0 2
63085: PUSH
63086: FOR_IN
63087: IFFALSE 63152
// begin weapons := AvailableWeaponList ( k ) ;
63089: LD_ADDR_VAR 0 9
63093: PUSH
63094: LD_VAR 0 6
63098: PPUSH
63099: CALL_OW 478
63103: ST_TO_ADDR
// if not weapons then
63104: LD_VAR 0 9
63108: NOT
63109: IFFALSE 63113
// continue ;
63111: GO 63086
// if weapon in weapons then
63113: LD_VAR 0 8
63117: PUSH
63118: LD_VAR 0 9
63122: IN
63123: IFFALSE 63150
// begin result := [ i , weapon ] ;
63125: LD_ADDR_VAR 0 3
63129: PUSH
63130: LD_VAR 0 4
63134: PUSH
63135: LD_VAR 0 8
63139: PUSH
63140: EMPTY
63141: LIST
63142: LIST
63143: ST_TO_ADDR
// exit ;
63144: POP
63145: POP
63146: POP
63147: POP
63148: GO 63158
// end ; end ;
63150: GO 63086
63152: POP
63153: POP
// end ;
63154: GO 62972
63156: POP
63157: POP
// end ;
63158: LD_VAR 0 3
63162: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
63163: LD_INT 0
63165: PPUSH
// if not side or side > 8 then
63166: LD_VAR 0 3
63170: NOT
63171: PUSH
63172: LD_VAR 0 3
63176: PUSH
63177: LD_INT 8
63179: GREATER
63180: OR
63181: IFFALSE 63185
// exit ;
63183: GO 63244
// if not range then
63185: LD_VAR 0 4
63189: NOT
63190: IFFALSE 63201
// range := - 12 ;
63192: LD_ADDR_VAR 0 4
63196: PUSH
63197: LD_INT 12
63199: NEG
63200: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
63201: LD_VAR 0 1
63205: PPUSH
63206: LD_VAR 0 2
63210: PPUSH
63211: LD_VAR 0 3
63215: PPUSH
63216: LD_VAR 0 4
63220: PPUSH
63221: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
63225: LD_VAR 0 1
63229: PPUSH
63230: LD_VAR 0 2
63234: PPUSH
63235: LD_VAR 0 3
63239: PPUSH
63240: CALL_OW 331
// end ;
63244: LD_VAR 0 5
63248: RET
// export function Video ( mode ) ; begin
63249: LD_INT 0
63251: PPUSH
// ingame_video = mode ;
63252: LD_ADDR_OWVAR 52
63256: PUSH
63257: LD_VAR 0 1
63261: ST_TO_ADDR
// interface_hidden = mode ;
63262: LD_ADDR_OWVAR 54
63266: PUSH
63267: LD_VAR 0 1
63271: ST_TO_ADDR
// end ;
63272: LD_VAR 0 2
63276: RET
// export function Join ( array , element ) ; begin
63277: LD_INT 0
63279: PPUSH
// result := Replace ( array , array + 1 , element ) ;
63280: LD_ADDR_VAR 0 3
63284: PUSH
63285: LD_VAR 0 1
63289: PPUSH
63290: LD_VAR 0 1
63294: PUSH
63295: LD_INT 1
63297: PLUS
63298: PPUSH
63299: LD_VAR 0 2
63303: PPUSH
63304: CALL_OW 1
63308: ST_TO_ADDR
// end ;
63309: LD_VAR 0 3
63313: RET
// export function JoinUnion ( array , element ) ; begin
63314: LD_INT 0
63316: PPUSH
// result := array union element ;
63317: LD_ADDR_VAR 0 3
63321: PUSH
63322: LD_VAR 0 1
63326: PUSH
63327: LD_VAR 0 2
63331: UNION
63332: ST_TO_ADDR
// end ;
63333: LD_VAR 0 3
63337: RET
// export function GetBehemoths ( side ) ; begin
63338: LD_INT 0
63340: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
63341: LD_ADDR_VAR 0 2
63345: PUSH
63346: LD_INT 22
63348: PUSH
63349: LD_VAR 0 1
63353: PUSH
63354: EMPTY
63355: LIST
63356: LIST
63357: PUSH
63358: LD_INT 31
63360: PUSH
63361: LD_INT 25
63363: PUSH
63364: EMPTY
63365: LIST
63366: LIST
63367: PUSH
63368: EMPTY
63369: LIST
63370: LIST
63371: PPUSH
63372: CALL_OW 69
63376: ST_TO_ADDR
// end ;
63377: LD_VAR 0 2
63381: RET
// export function Shuffle ( array ) ; var i , index ; begin
63382: LD_INT 0
63384: PPUSH
63385: PPUSH
63386: PPUSH
// result := [ ] ;
63387: LD_ADDR_VAR 0 2
63391: PUSH
63392: EMPTY
63393: ST_TO_ADDR
// if not array then
63394: LD_VAR 0 1
63398: NOT
63399: IFFALSE 63403
// exit ;
63401: GO 63502
// Randomize ;
63403: CALL_OW 10
// for i = array downto 1 do
63407: LD_ADDR_VAR 0 3
63411: PUSH
63412: DOUBLE
63413: LD_VAR 0 1
63417: INC
63418: ST_TO_ADDR
63419: LD_INT 1
63421: PUSH
63422: FOR_DOWNTO
63423: IFFALSE 63500
// begin index := rand ( 1 , array ) ;
63425: LD_ADDR_VAR 0 4
63429: PUSH
63430: LD_INT 1
63432: PPUSH
63433: LD_VAR 0 1
63437: PPUSH
63438: CALL_OW 12
63442: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
63443: LD_ADDR_VAR 0 2
63447: PUSH
63448: LD_VAR 0 2
63452: PPUSH
63453: LD_VAR 0 2
63457: PUSH
63458: LD_INT 1
63460: PLUS
63461: PPUSH
63462: LD_VAR 0 1
63466: PUSH
63467: LD_VAR 0 4
63471: ARRAY
63472: PPUSH
63473: CALL_OW 2
63477: ST_TO_ADDR
// array := Delete ( array , index ) ;
63478: LD_ADDR_VAR 0 1
63482: PUSH
63483: LD_VAR 0 1
63487: PPUSH
63488: LD_VAR 0 4
63492: PPUSH
63493: CALL_OW 3
63497: ST_TO_ADDR
// end ;
63498: GO 63422
63500: POP
63501: POP
// end ;
63502: LD_VAR 0 2
63506: RET
// export function GetBaseMaterials ( base ) ; begin
63507: LD_INT 0
63509: PPUSH
// result := [ 0 , 0 , 0 ] ;
63510: LD_ADDR_VAR 0 2
63514: PUSH
63515: LD_INT 0
63517: PUSH
63518: LD_INT 0
63520: PUSH
63521: LD_INT 0
63523: PUSH
63524: EMPTY
63525: LIST
63526: LIST
63527: LIST
63528: ST_TO_ADDR
// if not base then
63529: LD_VAR 0 1
63533: NOT
63534: IFFALSE 63538
// exit ;
63536: GO 63587
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
63538: LD_ADDR_VAR 0 2
63542: PUSH
63543: LD_VAR 0 1
63547: PPUSH
63548: LD_INT 1
63550: PPUSH
63551: CALL_OW 275
63555: PUSH
63556: LD_VAR 0 1
63560: PPUSH
63561: LD_INT 2
63563: PPUSH
63564: CALL_OW 275
63568: PUSH
63569: LD_VAR 0 1
63573: PPUSH
63574: LD_INT 3
63576: PPUSH
63577: CALL_OW 275
63581: PUSH
63582: EMPTY
63583: LIST
63584: LIST
63585: LIST
63586: ST_TO_ADDR
// end ;
63587: LD_VAR 0 2
63591: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
63592: LD_INT 0
63594: PPUSH
63595: PPUSH
// result := array ;
63596: LD_ADDR_VAR 0 3
63600: PUSH
63601: LD_VAR 0 1
63605: ST_TO_ADDR
// if size >= result then
63606: LD_VAR 0 2
63610: PUSH
63611: LD_VAR 0 3
63615: GREATEREQUAL
63616: IFFALSE 63620
// exit ;
63618: GO 63670
// if size then
63620: LD_VAR 0 2
63624: IFFALSE 63670
// for i := array downto size do
63626: LD_ADDR_VAR 0 4
63630: PUSH
63631: DOUBLE
63632: LD_VAR 0 1
63636: INC
63637: ST_TO_ADDR
63638: LD_VAR 0 2
63642: PUSH
63643: FOR_DOWNTO
63644: IFFALSE 63668
// result := Delete ( result , result ) ;
63646: LD_ADDR_VAR 0 3
63650: PUSH
63651: LD_VAR 0 3
63655: PPUSH
63656: LD_VAR 0 3
63660: PPUSH
63661: CALL_OW 3
63665: ST_TO_ADDR
63666: GO 63643
63668: POP
63669: POP
// end ;
63670: LD_VAR 0 3
63674: RET
// export function ComExit ( unit ) ; var tmp ; begin
63675: LD_INT 0
63677: PPUSH
63678: PPUSH
// if not IsInUnit ( unit ) then
63679: LD_VAR 0 1
63683: PPUSH
63684: CALL_OW 310
63688: NOT
63689: IFFALSE 63693
// exit ;
63691: GO 63753
// tmp := IsInUnit ( unit ) ;
63693: LD_ADDR_VAR 0 3
63697: PUSH
63698: LD_VAR 0 1
63702: PPUSH
63703: CALL_OW 310
63707: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
63708: LD_VAR 0 3
63712: PPUSH
63713: CALL_OW 247
63717: PUSH
63718: LD_INT 2
63720: EQUAL
63721: IFFALSE 63734
// ComExitVehicle ( unit ) else
63723: LD_VAR 0 1
63727: PPUSH
63728: CALL_OW 121
63732: GO 63743
// ComExitBuilding ( unit ) ;
63734: LD_VAR 0 1
63738: PPUSH
63739: CALL_OW 122
// result := tmp ;
63743: LD_ADDR_VAR 0 2
63747: PUSH
63748: LD_VAR 0 3
63752: ST_TO_ADDR
// end ;
63753: LD_VAR 0 2
63757: RET
// export function ComExitAll ( units ) ; var i ; begin
63758: LD_INT 0
63760: PPUSH
63761: PPUSH
// if not units then
63762: LD_VAR 0 1
63766: NOT
63767: IFFALSE 63771
// exit ;
63769: GO 63797
// for i in units do
63771: LD_ADDR_VAR 0 3
63775: PUSH
63776: LD_VAR 0 1
63780: PUSH
63781: FOR_IN
63782: IFFALSE 63795
// ComExit ( i ) ;
63784: LD_VAR 0 3
63788: PPUSH
63789: CALL 63675 0 1
63793: GO 63781
63795: POP
63796: POP
// end ;
63797: LD_VAR 0 2
63801: RET
// export function ResetHc ; begin
63802: LD_INT 0
63804: PPUSH
// InitHc ;
63805: CALL_OW 19
// hc_importance := 0 ;
63809: LD_ADDR_OWVAR 32
63813: PUSH
63814: LD_INT 0
63816: ST_TO_ADDR
// end ;
63817: LD_VAR 0 1
63821: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
63822: LD_INT 0
63824: PPUSH
63825: PPUSH
63826: PPUSH
// _x := ( x1 + x2 ) div 2 ;
63827: LD_ADDR_VAR 0 6
63831: PUSH
63832: LD_VAR 0 1
63836: PUSH
63837: LD_VAR 0 3
63841: PLUS
63842: PUSH
63843: LD_INT 2
63845: DIV
63846: ST_TO_ADDR
// if _x < 0 then
63847: LD_VAR 0 6
63851: PUSH
63852: LD_INT 0
63854: LESS
63855: IFFALSE 63872
// _x := _x * - 1 ;
63857: LD_ADDR_VAR 0 6
63861: PUSH
63862: LD_VAR 0 6
63866: PUSH
63867: LD_INT 1
63869: NEG
63870: MUL
63871: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
63872: LD_ADDR_VAR 0 7
63876: PUSH
63877: LD_VAR 0 2
63881: PUSH
63882: LD_VAR 0 4
63886: PLUS
63887: PUSH
63888: LD_INT 2
63890: DIV
63891: ST_TO_ADDR
// if _y < 0 then
63892: LD_VAR 0 7
63896: PUSH
63897: LD_INT 0
63899: LESS
63900: IFFALSE 63917
// _y := _y * - 1 ;
63902: LD_ADDR_VAR 0 7
63906: PUSH
63907: LD_VAR 0 7
63911: PUSH
63912: LD_INT 1
63914: NEG
63915: MUL
63916: ST_TO_ADDR
// result := [ _x , _y ] ;
63917: LD_ADDR_VAR 0 5
63921: PUSH
63922: LD_VAR 0 6
63926: PUSH
63927: LD_VAR 0 7
63931: PUSH
63932: EMPTY
63933: LIST
63934: LIST
63935: ST_TO_ADDR
// end ;
63936: LD_VAR 0 5
63940: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
63941: LD_INT 0
63943: PPUSH
63944: PPUSH
63945: PPUSH
63946: PPUSH
// task := GetTaskList ( unit ) ;
63947: LD_ADDR_VAR 0 7
63951: PUSH
63952: LD_VAR 0 1
63956: PPUSH
63957: CALL_OW 437
63961: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
63962: LD_VAR 0 7
63966: NOT
63967: PUSH
63968: LD_VAR 0 1
63972: PPUSH
63973: LD_VAR 0 2
63977: PPUSH
63978: CALL_OW 308
63982: NOT
63983: AND
63984: IFFALSE 63988
// exit ;
63986: GO 64106
// if IsInArea ( unit , area ) then
63988: LD_VAR 0 1
63992: PPUSH
63993: LD_VAR 0 2
63997: PPUSH
63998: CALL_OW 308
64002: IFFALSE 64020
// begin ComMoveToArea ( unit , goAway ) ;
64004: LD_VAR 0 1
64008: PPUSH
64009: LD_VAR 0 3
64013: PPUSH
64014: CALL_OW 113
// exit ;
64018: GO 64106
// end ; if task [ 1 ] [ 1 ] <> M then
64020: LD_VAR 0 7
64024: PUSH
64025: LD_INT 1
64027: ARRAY
64028: PUSH
64029: LD_INT 1
64031: ARRAY
64032: PUSH
64033: LD_STRING M
64035: NONEQUAL
64036: IFFALSE 64040
// exit ;
64038: GO 64106
// x := task [ 1 ] [ 2 ] ;
64040: LD_ADDR_VAR 0 5
64044: PUSH
64045: LD_VAR 0 7
64049: PUSH
64050: LD_INT 1
64052: ARRAY
64053: PUSH
64054: LD_INT 2
64056: ARRAY
64057: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
64058: LD_ADDR_VAR 0 6
64062: PUSH
64063: LD_VAR 0 7
64067: PUSH
64068: LD_INT 1
64070: ARRAY
64071: PUSH
64072: LD_INT 3
64074: ARRAY
64075: ST_TO_ADDR
// if InArea ( x , y , area ) then
64076: LD_VAR 0 5
64080: PPUSH
64081: LD_VAR 0 6
64085: PPUSH
64086: LD_VAR 0 2
64090: PPUSH
64091: CALL_OW 309
64095: IFFALSE 64106
// ComStop ( unit ) ;
64097: LD_VAR 0 1
64101: PPUSH
64102: CALL_OW 141
// end ;
64106: LD_VAR 0 4
64110: RET
// export function Abs ( value ) ; begin
64111: LD_INT 0
64113: PPUSH
// result := value ;
64114: LD_ADDR_VAR 0 2
64118: PUSH
64119: LD_VAR 0 1
64123: ST_TO_ADDR
// if value < 0 then
64124: LD_VAR 0 1
64128: PUSH
64129: LD_INT 0
64131: LESS
64132: IFFALSE 64149
// result := value * - 1 ;
64134: LD_ADDR_VAR 0 2
64138: PUSH
64139: LD_VAR 0 1
64143: PUSH
64144: LD_INT 1
64146: NEG
64147: MUL
64148: ST_TO_ADDR
// end ;
64149: LD_VAR 0 2
64153: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
64154: LD_INT 0
64156: PPUSH
64157: PPUSH
64158: PPUSH
64159: PPUSH
64160: PPUSH
64161: PPUSH
64162: PPUSH
64163: PPUSH
// if not unit or not building then
64164: LD_VAR 0 1
64168: NOT
64169: PUSH
64170: LD_VAR 0 2
64174: NOT
64175: OR
64176: IFFALSE 64180
// exit ;
64178: GO 64406
// x := GetX ( building ) ;
64180: LD_ADDR_VAR 0 4
64184: PUSH
64185: LD_VAR 0 2
64189: PPUSH
64190: CALL_OW 250
64194: ST_TO_ADDR
// y := GetY ( building ) ;
64195: LD_ADDR_VAR 0 6
64199: PUSH
64200: LD_VAR 0 2
64204: PPUSH
64205: CALL_OW 251
64209: ST_TO_ADDR
// d := GetDir ( building ) ;
64210: LD_ADDR_VAR 0 8
64214: PUSH
64215: LD_VAR 0 2
64219: PPUSH
64220: CALL_OW 254
64224: ST_TO_ADDR
// r := 4 ;
64225: LD_ADDR_VAR 0 9
64229: PUSH
64230: LD_INT 4
64232: ST_TO_ADDR
// for i := 1 to 5 do
64233: LD_ADDR_VAR 0 10
64237: PUSH
64238: DOUBLE
64239: LD_INT 1
64241: DEC
64242: ST_TO_ADDR
64243: LD_INT 5
64245: PUSH
64246: FOR_TO
64247: IFFALSE 64404
// begin _x := ShiftX ( x , d , r + i ) ;
64249: LD_ADDR_VAR 0 5
64253: PUSH
64254: LD_VAR 0 4
64258: PPUSH
64259: LD_VAR 0 8
64263: PPUSH
64264: LD_VAR 0 9
64268: PUSH
64269: LD_VAR 0 10
64273: PLUS
64274: PPUSH
64275: CALL_OW 272
64279: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
64280: LD_ADDR_VAR 0 7
64284: PUSH
64285: LD_VAR 0 6
64289: PPUSH
64290: LD_VAR 0 8
64294: PPUSH
64295: LD_VAR 0 9
64299: PUSH
64300: LD_VAR 0 10
64304: PLUS
64305: PPUSH
64306: CALL_OW 273
64310: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
64311: LD_VAR 0 5
64315: PPUSH
64316: LD_VAR 0 7
64320: PPUSH
64321: CALL_OW 488
64325: PUSH
64326: LD_VAR 0 5
64330: PPUSH
64331: LD_VAR 0 7
64335: PPUSH
64336: CALL_OW 428
64340: PPUSH
64341: CALL_OW 247
64345: PUSH
64346: LD_INT 3
64348: PUSH
64349: LD_INT 2
64351: PUSH
64352: EMPTY
64353: LIST
64354: LIST
64355: IN
64356: NOT
64357: AND
64358: IFFALSE 64402
// begin ComMoveXY ( unit , _x , _y ) ;
64360: LD_VAR 0 1
64364: PPUSH
64365: LD_VAR 0 5
64369: PPUSH
64370: LD_VAR 0 7
64374: PPUSH
64375: CALL_OW 111
// result := [ _x , _y ] ;
64379: LD_ADDR_VAR 0 3
64383: PUSH
64384: LD_VAR 0 5
64388: PUSH
64389: LD_VAR 0 7
64393: PUSH
64394: EMPTY
64395: LIST
64396: LIST
64397: ST_TO_ADDR
// exit ;
64398: POP
64399: POP
64400: GO 64406
// end ; end ;
64402: GO 64246
64404: POP
64405: POP
// end ;
64406: LD_VAR 0 3
64410: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
64411: LD_INT 0
64413: PPUSH
64414: PPUSH
64415: PPUSH
// result := 0 ;
64416: LD_ADDR_VAR 0 3
64420: PUSH
64421: LD_INT 0
64423: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
64424: LD_VAR 0 1
64428: PUSH
64429: LD_INT 0
64431: LESS
64432: PUSH
64433: LD_VAR 0 1
64437: PUSH
64438: LD_INT 8
64440: GREATER
64441: OR
64442: PUSH
64443: LD_VAR 0 2
64447: PUSH
64448: LD_INT 0
64450: LESS
64451: OR
64452: PUSH
64453: LD_VAR 0 2
64457: PUSH
64458: LD_INT 8
64460: GREATER
64461: OR
64462: IFFALSE 64466
// exit ;
64464: GO 64541
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
64466: LD_ADDR_VAR 0 4
64470: PUSH
64471: LD_INT 22
64473: PUSH
64474: LD_VAR 0 2
64478: PUSH
64479: EMPTY
64480: LIST
64481: LIST
64482: PPUSH
64483: CALL_OW 69
64487: PUSH
64488: FOR_IN
64489: IFFALSE 64539
// begin un := UnitShoot ( i ) ;
64491: LD_ADDR_VAR 0 5
64495: PUSH
64496: LD_VAR 0 4
64500: PPUSH
64501: CALL_OW 504
64505: ST_TO_ADDR
// if GetSide ( un ) = side1 then
64506: LD_VAR 0 5
64510: PPUSH
64511: CALL_OW 255
64515: PUSH
64516: LD_VAR 0 1
64520: EQUAL
64521: IFFALSE 64537
// begin result := un ;
64523: LD_ADDR_VAR 0 3
64527: PUSH
64528: LD_VAR 0 5
64532: ST_TO_ADDR
// exit ;
64533: POP
64534: POP
64535: GO 64541
// end ; end ;
64537: GO 64488
64539: POP
64540: POP
// end ;
64541: LD_VAR 0 3
64545: RET
// export function GetCargoBay ( units ) ; begin
64546: LD_INT 0
64548: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
64549: LD_ADDR_VAR 0 2
64553: PUSH
64554: LD_VAR 0 1
64558: PPUSH
64559: LD_INT 2
64561: PUSH
64562: LD_INT 34
64564: PUSH
64565: LD_INT 12
64567: PUSH
64568: EMPTY
64569: LIST
64570: LIST
64571: PUSH
64572: LD_INT 34
64574: PUSH
64575: LD_INT 51
64577: PUSH
64578: EMPTY
64579: LIST
64580: LIST
64581: PUSH
64582: LD_INT 34
64584: PUSH
64585: LD_INT 32
64587: PUSH
64588: EMPTY
64589: LIST
64590: LIST
64591: PUSH
64592: LD_INT 34
64594: PUSH
64595: LD_EXP 96
64599: PUSH
64600: EMPTY
64601: LIST
64602: LIST
64603: PUSH
64604: EMPTY
64605: LIST
64606: LIST
64607: LIST
64608: LIST
64609: LIST
64610: PPUSH
64611: CALL_OW 72
64615: ST_TO_ADDR
// end ;
64616: LD_VAR 0 2
64620: RET
// export function Negate ( value ) ; begin
64621: LD_INT 0
64623: PPUSH
// result := not value ;
64624: LD_ADDR_VAR 0 2
64628: PUSH
64629: LD_VAR 0 1
64633: NOT
64634: ST_TO_ADDR
// end ;
64635: LD_VAR 0 2
64639: RET
// export function Inc ( value ) ; begin
64640: LD_INT 0
64642: PPUSH
// result := value + 1 ;
64643: LD_ADDR_VAR 0 2
64647: PUSH
64648: LD_VAR 0 1
64652: PUSH
64653: LD_INT 1
64655: PLUS
64656: ST_TO_ADDR
// end ;
64657: LD_VAR 0 2
64661: RET
// export function Dec ( value ) ; begin
64662: LD_INT 0
64664: PPUSH
// result := value - 1 ;
64665: LD_ADDR_VAR 0 2
64669: PUSH
64670: LD_VAR 0 1
64674: PUSH
64675: LD_INT 1
64677: MINUS
64678: ST_TO_ADDR
// end ;
64679: LD_VAR 0 2
64683: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
64684: LD_INT 0
64686: PPUSH
64687: PPUSH
64688: PPUSH
64689: PPUSH
64690: PPUSH
64691: PPUSH
64692: PPUSH
64693: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
64694: LD_VAR 0 1
64698: PPUSH
64699: LD_VAR 0 2
64703: PPUSH
64704: CALL_OW 488
64708: NOT
64709: PUSH
64710: LD_VAR 0 3
64714: PPUSH
64715: LD_VAR 0 4
64719: PPUSH
64720: CALL_OW 488
64724: NOT
64725: OR
64726: IFFALSE 64739
// begin result := - 1 ;
64728: LD_ADDR_VAR 0 5
64732: PUSH
64733: LD_INT 1
64735: NEG
64736: ST_TO_ADDR
// exit ;
64737: GO 64974
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
64739: LD_ADDR_VAR 0 12
64743: PUSH
64744: LD_VAR 0 1
64748: PPUSH
64749: LD_VAR 0 2
64753: PPUSH
64754: LD_VAR 0 3
64758: PPUSH
64759: LD_VAR 0 4
64763: PPUSH
64764: CALL 63822 0 4
64768: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
64769: LD_ADDR_VAR 0 11
64773: PUSH
64774: LD_VAR 0 1
64778: PPUSH
64779: LD_VAR 0 2
64783: PPUSH
64784: LD_VAR 0 12
64788: PUSH
64789: LD_INT 1
64791: ARRAY
64792: PPUSH
64793: LD_VAR 0 12
64797: PUSH
64798: LD_INT 2
64800: ARRAY
64801: PPUSH
64802: CALL_OW 298
64806: ST_TO_ADDR
// distance := 9999 ;
64807: LD_ADDR_VAR 0 10
64811: PUSH
64812: LD_INT 9999
64814: ST_TO_ADDR
// for i := 0 to 5 do
64815: LD_ADDR_VAR 0 6
64819: PUSH
64820: DOUBLE
64821: LD_INT 0
64823: DEC
64824: ST_TO_ADDR
64825: LD_INT 5
64827: PUSH
64828: FOR_TO
64829: IFFALSE 64972
// begin _x := ShiftX ( x1 , i , centerDist ) ;
64831: LD_ADDR_VAR 0 7
64835: PUSH
64836: LD_VAR 0 1
64840: PPUSH
64841: LD_VAR 0 6
64845: PPUSH
64846: LD_VAR 0 11
64850: PPUSH
64851: CALL_OW 272
64855: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
64856: LD_ADDR_VAR 0 8
64860: PUSH
64861: LD_VAR 0 2
64865: PPUSH
64866: LD_VAR 0 6
64870: PPUSH
64871: LD_VAR 0 11
64875: PPUSH
64876: CALL_OW 273
64880: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
64881: LD_VAR 0 7
64885: PPUSH
64886: LD_VAR 0 8
64890: PPUSH
64891: CALL_OW 488
64895: NOT
64896: IFFALSE 64900
// continue ;
64898: GO 64828
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
64900: LD_ADDR_VAR 0 9
64904: PUSH
64905: LD_VAR 0 12
64909: PUSH
64910: LD_INT 1
64912: ARRAY
64913: PPUSH
64914: LD_VAR 0 12
64918: PUSH
64919: LD_INT 2
64921: ARRAY
64922: PPUSH
64923: LD_VAR 0 7
64927: PPUSH
64928: LD_VAR 0 8
64932: PPUSH
64933: CALL_OW 298
64937: ST_TO_ADDR
// if tmp < distance then
64938: LD_VAR 0 9
64942: PUSH
64943: LD_VAR 0 10
64947: LESS
64948: IFFALSE 64970
// begin result := i ;
64950: LD_ADDR_VAR 0 5
64954: PUSH
64955: LD_VAR 0 6
64959: ST_TO_ADDR
// distance := tmp ;
64960: LD_ADDR_VAR 0 10
64964: PUSH
64965: LD_VAR 0 9
64969: ST_TO_ADDR
// end ; end ;
64970: GO 64828
64972: POP
64973: POP
// end ;
64974: LD_VAR 0 5
64978: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64979: LD_INT 0
64981: PPUSH
64982: PPUSH
// if not driver or not IsInUnit ( driver ) then
64983: LD_VAR 0 1
64987: NOT
64988: PUSH
64989: LD_VAR 0 1
64993: PPUSH
64994: CALL_OW 310
64998: NOT
64999: OR
65000: IFFALSE 65004
// exit ;
65002: GO 65094
// vehicle := IsInUnit ( driver ) ;
65004: LD_ADDR_VAR 0 3
65008: PUSH
65009: LD_VAR 0 1
65013: PPUSH
65014: CALL_OW 310
65018: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65019: LD_VAR 0 1
65023: PPUSH
65024: LD_STRING \
65026: PUSH
65027: LD_INT 0
65029: PUSH
65030: LD_INT 0
65032: PUSH
65033: LD_INT 0
65035: PUSH
65036: LD_INT 0
65038: PUSH
65039: LD_INT 0
65041: PUSH
65042: LD_INT 0
65044: PUSH
65045: EMPTY
65046: LIST
65047: LIST
65048: LIST
65049: LIST
65050: LIST
65051: LIST
65052: LIST
65053: PUSH
65054: LD_STRING E
65056: PUSH
65057: LD_INT 0
65059: PUSH
65060: LD_INT 0
65062: PUSH
65063: LD_VAR 0 3
65067: PUSH
65068: LD_INT 0
65070: PUSH
65071: LD_INT 0
65073: PUSH
65074: LD_INT 0
65076: PUSH
65077: EMPTY
65078: LIST
65079: LIST
65080: LIST
65081: LIST
65082: LIST
65083: LIST
65084: LIST
65085: PUSH
65086: EMPTY
65087: LIST
65088: LIST
65089: PPUSH
65090: CALL_OW 446
// end ;
65094: LD_VAR 0 2
65098: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65099: LD_INT 0
65101: PPUSH
65102: PPUSH
// if not driver or not IsInUnit ( driver ) then
65103: LD_VAR 0 1
65107: NOT
65108: PUSH
65109: LD_VAR 0 1
65113: PPUSH
65114: CALL_OW 310
65118: NOT
65119: OR
65120: IFFALSE 65124
// exit ;
65122: GO 65214
// vehicle := IsInUnit ( driver ) ;
65124: LD_ADDR_VAR 0 3
65128: PUSH
65129: LD_VAR 0 1
65133: PPUSH
65134: CALL_OW 310
65138: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65139: LD_VAR 0 1
65143: PPUSH
65144: LD_STRING \
65146: PUSH
65147: LD_INT 0
65149: PUSH
65150: LD_INT 0
65152: PUSH
65153: LD_INT 0
65155: PUSH
65156: LD_INT 0
65158: PUSH
65159: LD_INT 0
65161: PUSH
65162: LD_INT 0
65164: PUSH
65165: EMPTY
65166: LIST
65167: LIST
65168: LIST
65169: LIST
65170: LIST
65171: LIST
65172: LIST
65173: PUSH
65174: LD_STRING E
65176: PUSH
65177: LD_INT 0
65179: PUSH
65180: LD_INT 0
65182: PUSH
65183: LD_VAR 0 3
65187: PUSH
65188: LD_INT 0
65190: PUSH
65191: LD_INT 0
65193: PUSH
65194: LD_INT 0
65196: PUSH
65197: EMPTY
65198: LIST
65199: LIST
65200: LIST
65201: LIST
65202: LIST
65203: LIST
65204: LIST
65205: PUSH
65206: EMPTY
65207: LIST
65208: LIST
65209: PPUSH
65210: CALL_OW 447
// end ;
65214: LD_VAR 0 2
65218: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
65219: LD_INT 0
65221: PPUSH
65222: PPUSH
65223: PPUSH
// tmp := [ ] ;
65224: LD_ADDR_VAR 0 5
65228: PUSH
65229: EMPTY
65230: ST_TO_ADDR
// for i in units do
65231: LD_ADDR_VAR 0 4
65235: PUSH
65236: LD_VAR 0 1
65240: PUSH
65241: FOR_IN
65242: IFFALSE 65280
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
65244: LD_ADDR_VAR 0 5
65248: PUSH
65249: LD_VAR 0 5
65253: PPUSH
65254: LD_VAR 0 5
65258: PUSH
65259: LD_INT 1
65261: PLUS
65262: PPUSH
65263: LD_VAR 0 4
65267: PPUSH
65268: CALL_OW 256
65272: PPUSH
65273: CALL_OW 2
65277: ST_TO_ADDR
65278: GO 65241
65280: POP
65281: POP
// if not tmp then
65282: LD_VAR 0 5
65286: NOT
65287: IFFALSE 65291
// exit ;
65289: GO 65339
// if asc then
65291: LD_VAR 0 2
65295: IFFALSE 65319
// result := SortListByListAsc ( units , tmp ) else
65297: LD_ADDR_VAR 0 3
65301: PUSH
65302: LD_VAR 0 1
65306: PPUSH
65307: LD_VAR 0 5
65311: PPUSH
65312: CALL_OW 76
65316: ST_TO_ADDR
65317: GO 65339
// result := SortListByListDesc ( units , tmp ) ;
65319: LD_ADDR_VAR 0 3
65323: PUSH
65324: LD_VAR 0 1
65328: PPUSH
65329: LD_VAR 0 5
65333: PPUSH
65334: CALL_OW 77
65338: ST_TO_ADDR
// end ;
65339: LD_VAR 0 3
65343: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
65344: LD_INT 0
65346: PPUSH
65347: PPUSH
// task := GetTaskList ( mech ) ;
65348: LD_ADDR_VAR 0 4
65352: PUSH
65353: LD_VAR 0 1
65357: PPUSH
65358: CALL_OW 437
65362: ST_TO_ADDR
// if not task then
65363: LD_VAR 0 4
65367: NOT
65368: IFFALSE 65372
// exit ;
65370: GO 65414
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
65372: LD_ADDR_VAR 0 3
65376: PUSH
65377: LD_VAR 0 4
65381: PUSH
65382: LD_INT 1
65384: ARRAY
65385: PUSH
65386: LD_INT 1
65388: ARRAY
65389: PUSH
65390: LD_STRING r
65392: EQUAL
65393: PUSH
65394: LD_VAR 0 4
65398: PUSH
65399: LD_INT 1
65401: ARRAY
65402: PUSH
65403: LD_INT 4
65405: ARRAY
65406: PUSH
65407: LD_VAR 0 2
65411: EQUAL
65412: AND
65413: ST_TO_ADDR
// end ;
65414: LD_VAR 0 3
65418: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
65419: LD_INT 0
65421: PPUSH
// SetDir ( unit , d ) ;
65422: LD_VAR 0 1
65426: PPUSH
65427: LD_VAR 0 4
65431: PPUSH
65432: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
65436: LD_VAR 0 1
65440: PPUSH
65441: LD_VAR 0 2
65445: PPUSH
65446: LD_VAR 0 3
65450: PPUSH
65451: LD_VAR 0 5
65455: PPUSH
65456: CALL_OW 48
// end ;
65460: LD_VAR 0 6
65464: RET
// export function ToNaturalNumber ( number ) ; begin
65465: LD_INT 0
65467: PPUSH
// result := number div 1 ;
65468: LD_ADDR_VAR 0 2
65472: PUSH
65473: LD_VAR 0 1
65477: PUSH
65478: LD_INT 1
65480: DIV
65481: ST_TO_ADDR
// if number < 0 then
65482: LD_VAR 0 1
65486: PUSH
65487: LD_INT 0
65489: LESS
65490: IFFALSE 65500
// result := 0 ;
65492: LD_ADDR_VAR 0 2
65496: PUSH
65497: LD_INT 0
65499: ST_TO_ADDR
// end ;
65500: LD_VAR 0 2
65504: RET
// export function SortByClass ( units , class ) ; var un ; begin
65505: LD_INT 0
65507: PPUSH
65508: PPUSH
// if not units or not class then
65509: LD_VAR 0 1
65513: NOT
65514: PUSH
65515: LD_VAR 0 2
65519: NOT
65520: OR
65521: IFFALSE 65525
// exit ;
65523: GO 65620
// result := [ ] ;
65525: LD_ADDR_VAR 0 3
65529: PUSH
65530: EMPTY
65531: ST_TO_ADDR
// for un in units do
65532: LD_ADDR_VAR 0 4
65536: PUSH
65537: LD_VAR 0 1
65541: PUSH
65542: FOR_IN
65543: IFFALSE 65618
// if GetClass ( un ) = class then
65545: LD_VAR 0 4
65549: PPUSH
65550: CALL_OW 257
65554: PUSH
65555: LD_VAR 0 2
65559: EQUAL
65560: IFFALSE 65587
// result := Insert ( result , 1 , un ) else
65562: LD_ADDR_VAR 0 3
65566: PUSH
65567: LD_VAR 0 3
65571: PPUSH
65572: LD_INT 1
65574: PPUSH
65575: LD_VAR 0 4
65579: PPUSH
65580: CALL_OW 2
65584: ST_TO_ADDR
65585: GO 65616
// result := Replace ( result , result + 1 , un ) ;
65587: LD_ADDR_VAR 0 3
65591: PUSH
65592: LD_VAR 0 3
65596: PPUSH
65597: LD_VAR 0 3
65601: PUSH
65602: LD_INT 1
65604: PLUS
65605: PPUSH
65606: LD_VAR 0 4
65610: PPUSH
65611: CALL_OW 1
65615: ST_TO_ADDR
65616: GO 65542
65618: POP
65619: POP
// end ;
65620: LD_VAR 0 3
65624: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
65625: LD_INT 0
65627: PPUSH
65628: PPUSH
65629: PPUSH
65630: PPUSH
65631: PPUSH
65632: PPUSH
65633: PPUSH
// result := [ ] ;
65634: LD_ADDR_VAR 0 4
65638: PUSH
65639: EMPTY
65640: ST_TO_ADDR
// if x - r < 0 then
65641: LD_VAR 0 1
65645: PUSH
65646: LD_VAR 0 3
65650: MINUS
65651: PUSH
65652: LD_INT 0
65654: LESS
65655: IFFALSE 65667
// min_x := 0 else
65657: LD_ADDR_VAR 0 8
65661: PUSH
65662: LD_INT 0
65664: ST_TO_ADDR
65665: GO 65683
// min_x := x - r ;
65667: LD_ADDR_VAR 0 8
65671: PUSH
65672: LD_VAR 0 1
65676: PUSH
65677: LD_VAR 0 3
65681: MINUS
65682: ST_TO_ADDR
// if y - r < 0 then
65683: LD_VAR 0 2
65687: PUSH
65688: LD_VAR 0 3
65692: MINUS
65693: PUSH
65694: LD_INT 0
65696: LESS
65697: IFFALSE 65709
// min_y := 0 else
65699: LD_ADDR_VAR 0 7
65703: PUSH
65704: LD_INT 0
65706: ST_TO_ADDR
65707: GO 65725
// min_y := y - r ;
65709: LD_ADDR_VAR 0 7
65713: PUSH
65714: LD_VAR 0 2
65718: PUSH
65719: LD_VAR 0 3
65723: MINUS
65724: ST_TO_ADDR
// max_x := x + r ;
65725: LD_ADDR_VAR 0 9
65729: PUSH
65730: LD_VAR 0 1
65734: PUSH
65735: LD_VAR 0 3
65739: PLUS
65740: ST_TO_ADDR
// max_y := y + r ;
65741: LD_ADDR_VAR 0 10
65745: PUSH
65746: LD_VAR 0 2
65750: PUSH
65751: LD_VAR 0 3
65755: PLUS
65756: ST_TO_ADDR
// for _x = min_x to max_x do
65757: LD_ADDR_VAR 0 5
65761: PUSH
65762: DOUBLE
65763: LD_VAR 0 8
65767: DEC
65768: ST_TO_ADDR
65769: LD_VAR 0 9
65773: PUSH
65774: FOR_TO
65775: IFFALSE 65876
// for _y = min_y to max_y do
65777: LD_ADDR_VAR 0 6
65781: PUSH
65782: DOUBLE
65783: LD_VAR 0 7
65787: DEC
65788: ST_TO_ADDR
65789: LD_VAR 0 10
65793: PUSH
65794: FOR_TO
65795: IFFALSE 65872
// begin if not ValidHex ( _x , _y ) then
65797: LD_VAR 0 5
65801: PPUSH
65802: LD_VAR 0 6
65806: PPUSH
65807: CALL_OW 488
65811: NOT
65812: IFFALSE 65816
// continue ;
65814: GO 65794
// if GetResourceTypeXY ( _x , _y ) then
65816: LD_VAR 0 5
65820: PPUSH
65821: LD_VAR 0 6
65825: PPUSH
65826: CALL_OW 283
65830: IFFALSE 65870
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
65832: LD_ADDR_VAR 0 4
65836: PUSH
65837: LD_VAR 0 4
65841: PPUSH
65842: LD_VAR 0 4
65846: PUSH
65847: LD_INT 1
65849: PLUS
65850: PPUSH
65851: LD_VAR 0 5
65855: PUSH
65856: LD_VAR 0 6
65860: PUSH
65861: EMPTY
65862: LIST
65863: LIST
65864: PPUSH
65865: CALL_OW 1
65869: ST_TO_ADDR
// end ;
65870: GO 65794
65872: POP
65873: POP
65874: GO 65774
65876: POP
65877: POP
// end ;
65878: LD_VAR 0 4
65882: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
65883: LD_INT 0
65885: PPUSH
65886: PPUSH
65887: PPUSH
65888: PPUSH
65889: PPUSH
65890: PPUSH
65891: PPUSH
65892: PPUSH
// if not units then
65893: LD_VAR 0 1
65897: NOT
65898: IFFALSE 65902
// exit ;
65900: GO 66428
// result := UnitFilter ( units , [ f_ok ] ) ;
65902: LD_ADDR_VAR 0 3
65906: PUSH
65907: LD_VAR 0 1
65911: PPUSH
65912: LD_INT 50
65914: PUSH
65915: EMPTY
65916: LIST
65917: PPUSH
65918: CALL_OW 72
65922: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
65923: LD_ADDR_VAR 0 8
65927: PUSH
65928: LD_VAR 0 1
65932: PUSH
65933: LD_INT 1
65935: ARRAY
65936: PPUSH
65937: CALL_OW 255
65941: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
65942: LD_ADDR_VAR 0 10
65946: PUSH
65947: LD_INT 29
65949: PUSH
65950: LD_EXP 99
65954: PUSH
65955: LD_INT 49
65957: PUSH
65958: EMPTY
65959: LIST
65960: LIST
65961: LIST
65962: ST_TO_ADDR
// if not result then
65963: LD_VAR 0 3
65967: NOT
65968: IFFALSE 65972
// exit ;
65970: GO 66428
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
65972: LD_ADDR_VAR 0 5
65976: PUSH
65977: LD_INT 81
65979: PUSH
65980: LD_VAR 0 8
65984: PUSH
65985: EMPTY
65986: LIST
65987: LIST
65988: PPUSH
65989: CALL_OW 69
65993: ST_TO_ADDR
// for i in result do
65994: LD_ADDR_VAR 0 4
65998: PUSH
65999: LD_VAR 0 3
66003: PUSH
66004: FOR_IN
66005: IFFALSE 66426
// begin tag := GetTag ( i ) + 1 ;
66007: LD_ADDR_VAR 0 9
66011: PUSH
66012: LD_VAR 0 4
66016: PPUSH
66017: CALL_OW 110
66021: PUSH
66022: LD_INT 1
66024: PLUS
66025: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
66026: LD_ADDR_VAR 0 7
66030: PUSH
66031: LD_VAR 0 4
66035: PPUSH
66036: CALL_OW 250
66040: PPUSH
66041: LD_VAR 0 4
66045: PPUSH
66046: CALL_OW 251
66050: PPUSH
66051: LD_INT 6
66053: PPUSH
66054: CALL 65625 0 3
66058: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
66059: LD_VAR 0 4
66063: PPUSH
66064: CALL_OW 247
66068: PUSH
66069: LD_INT 2
66071: EQUAL
66072: PUSH
66073: LD_VAR 0 7
66077: AND
66078: PUSH
66079: LD_VAR 0 4
66083: PPUSH
66084: CALL_OW 264
66088: PUSH
66089: LD_VAR 0 10
66093: IN
66094: NOT
66095: AND
66096: IFFALSE 66135
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
66098: LD_VAR 0 4
66102: PPUSH
66103: LD_VAR 0 7
66107: PUSH
66108: LD_INT 1
66110: ARRAY
66111: PUSH
66112: LD_INT 1
66114: ARRAY
66115: PPUSH
66116: LD_VAR 0 7
66120: PUSH
66121: LD_INT 1
66123: ARRAY
66124: PUSH
66125: LD_INT 2
66127: ARRAY
66128: PPUSH
66129: CALL_OW 116
66133: GO 66424
// if path > tag then
66135: LD_VAR 0 2
66139: PUSH
66140: LD_VAR 0 9
66144: GREATER
66145: IFFALSE 66353
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
66147: LD_ADDR_VAR 0 6
66151: PUSH
66152: LD_VAR 0 5
66156: PPUSH
66157: LD_INT 91
66159: PUSH
66160: LD_VAR 0 4
66164: PUSH
66165: LD_INT 8
66167: PUSH
66168: EMPTY
66169: LIST
66170: LIST
66171: LIST
66172: PPUSH
66173: CALL_OW 72
66177: ST_TO_ADDR
// if nearEnemy then
66178: LD_VAR 0 6
66182: IFFALSE 66251
// begin if GetWeapon ( i ) = ru_time_lapser then
66184: LD_VAR 0 4
66188: PPUSH
66189: CALL_OW 264
66193: PUSH
66194: LD_INT 49
66196: EQUAL
66197: IFFALSE 66225
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
66199: LD_VAR 0 4
66203: PPUSH
66204: LD_VAR 0 6
66208: PPUSH
66209: LD_VAR 0 4
66213: PPUSH
66214: CALL_OW 74
66218: PPUSH
66219: CALL_OW 112
66223: GO 66249
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
66225: LD_VAR 0 4
66229: PPUSH
66230: LD_VAR 0 6
66234: PPUSH
66235: LD_VAR 0 4
66239: PPUSH
66240: CALL_OW 74
66244: PPUSH
66245: CALL_OW 115
// end else
66249: GO 66351
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
66251: LD_VAR 0 4
66255: PPUSH
66256: LD_VAR 0 2
66260: PUSH
66261: LD_VAR 0 9
66265: ARRAY
66266: PUSH
66267: LD_INT 1
66269: ARRAY
66270: PPUSH
66271: LD_VAR 0 2
66275: PUSH
66276: LD_VAR 0 9
66280: ARRAY
66281: PUSH
66282: LD_INT 2
66284: ARRAY
66285: PPUSH
66286: CALL_OW 297
66290: PUSH
66291: LD_INT 6
66293: GREATER
66294: IFFALSE 66337
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
66296: LD_VAR 0 4
66300: PPUSH
66301: LD_VAR 0 2
66305: PUSH
66306: LD_VAR 0 9
66310: ARRAY
66311: PUSH
66312: LD_INT 1
66314: ARRAY
66315: PPUSH
66316: LD_VAR 0 2
66320: PUSH
66321: LD_VAR 0 9
66325: ARRAY
66326: PUSH
66327: LD_INT 2
66329: ARRAY
66330: PPUSH
66331: CALL_OW 114
66335: GO 66351
// SetTag ( i , tag ) ;
66337: LD_VAR 0 4
66341: PPUSH
66342: LD_VAR 0 9
66346: PPUSH
66347: CALL_OW 109
// end else
66351: GO 66424
// if enemy then
66353: LD_VAR 0 5
66357: IFFALSE 66424
// begin if GetWeapon ( i ) = ru_time_lapser then
66359: LD_VAR 0 4
66363: PPUSH
66364: CALL_OW 264
66368: PUSH
66369: LD_INT 49
66371: EQUAL
66372: IFFALSE 66400
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
66374: LD_VAR 0 4
66378: PPUSH
66379: LD_VAR 0 5
66383: PPUSH
66384: LD_VAR 0 4
66388: PPUSH
66389: CALL_OW 74
66393: PPUSH
66394: CALL_OW 112
66398: GO 66424
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
66400: LD_VAR 0 4
66404: PPUSH
66405: LD_VAR 0 5
66409: PPUSH
66410: LD_VAR 0 4
66414: PPUSH
66415: CALL_OW 74
66419: PPUSH
66420: CALL_OW 115
// end ; end ;
66424: GO 66004
66426: POP
66427: POP
// end ;
66428: LD_VAR 0 3
66432: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
66433: LD_INT 0
66435: PPUSH
66436: PPUSH
66437: PPUSH
// if not unit or IsInUnit ( unit ) then
66438: LD_VAR 0 1
66442: NOT
66443: PUSH
66444: LD_VAR 0 1
66448: PPUSH
66449: CALL_OW 310
66453: OR
66454: IFFALSE 66458
// exit ;
66456: GO 66549
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
66458: LD_ADDR_VAR 0 4
66462: PUSH
66463: LD_VAR 0 1
66467: PPUSH
66468: CALL_OW 250
66472: PPUSH
66473: LD_VAR 0 2
66477: PPUSH
66478: LD_INT 1
66480: PPUSH
66481: CALL_OW 272
66485: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
66486: LD_ADDR_VAR 0 5
66490: PUSH
66491: LD_VAR 0 1
66495: PPUSH
66496: CALL_OW 251
66500: PPUSH
66501: LD_VAR 0 2
66505: PPUSH
66506: LD_INT 1
66508: PPUSH
66509: CALL_OW 273
66513: ST_TO_ADDR
// if ValidHex ( x , y ) then
66514: LD_VAR 0 4
66518: PPUSH
66519: LD_VAR 0 5
66523: PPUSH
66524: CALL_OW 488
66528: IFFALSE 66549
// ComTurnXY ( unit , x , y ) ;
66530: LD_VAR 0 1
66534: PPUSH
66535: LD_VAR 0 4
66539: PPUSH
66540: LD_VAR 0 5
66544: PPUSH
66545: CALL_OW 118
// end ;
66549: LD_VAR 0 3
66553: RET
// export function SeeUnits ( side , units ) ; var i ; begin
66554: LD_INT 0
66556: PPUSH
66557: PPUSH
// result := false ;
66558: LD_ADDR_VAR 0 3
66562: PUSH
66563: LD_INT 0
66565: ST_TO_ADDR
// if not units then
66566: LD_VAR 0 2
66570: NOT
66571: IFFALSE 66575
// exit ;
66573: GO 66620
// for i in units do
66575: LD_ADDR_VAR 0 4
66579: PUSH
66580: LD_VAR 0 2
66584: PUSH
66585: FOR_IN
66586: IFFALSE 66618
// if See ( side , i ) then
66588: LD_VAR 0 1
66592: PPUSH
66593: LD_VAR 0 4
66597: PPUSH
66598: CALL_OW 292
66602: IFFALSE 66616
// begin result := true ;
66604: LD_ADDR_VAR 0 3
66608: PUSH
66609: LD_INT 1
66611: ST_TO_ADDR
// exit ;
66612: POP
66613: POP
66614: GO 66620
// end ;
66616: GO 66585
66618: POP
66619: POP
// end ;
66620: LD_VAR 0 3
66624: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
66625: LD_INT 0
66627: PPUSH
66628: PPUSH
66629: PPUSH
66630: PPUSH
// if not unit or not points then
66631: LD_VAR 0 1
66635: NOT
66636: PUSH
66637: LD_VAR 0 2
66641: NOT
66642: OR
66643: IFFALSE 66647
// exit ;
66645: GO 66737
// dist := 99999 ;
66647: LD_ADDR_VAR 0 5
66651: PUSH
66652: LD_INT 99999
66654: ST_TO_ADDR
// for i in points do
66655: LD_ADDR_VAR 0 4
66659: PUSH
66660: LD_VAR 0 2
66664: PUSH
66665: FOR_IN
66666: IFFALSE 66735
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
66668: LD_ADDR_VAR 0 6
66672: PUSH
66673: LD_VAR 0 1
66677: PPUSH
66678: LD_VAR 0 4
66682: PUSH
66683: LD_INT 1
66685: ARRAY
66686: PPUSH
66687: LD_VAR 0 4
66691: PUSH
66692: LD_INT 2
66694: ARRAY
66695: PPUSH
66696: CALL_OW 297
66700: ST_TO_ADDR
// if tmpDist < dist then
66701: LD_VAR 0 6
66705: PUSH
66706: LD_VAR 0 5
66710: LESS
66711: IFFALSE 66733
// begin result := i ;
66713: LD_ADDR_VAR 0 3
66717: PUSH
66718: LD_VAR 0 4
66722: ST_TO_ADDR
// dist := tmpDist ;
66723: LD_ADDR_VAR 0 5
66727: PUSH
66728: LD_VAR 0 6
66732: ST_TO_ADDR
// end ; end ;
66733: GO 66665
66735: POP
66736: POP
// end ;
66737: LD_VAR 0 3
66741: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
66742: LD_INT 0
66744: PPUSH
// uc_side := side ;
66745: LD_ADDR_OWVAR 20
66749: PUSH
66750: LD_VAR 0 1
66754: ST_TO_ADDR
// uc_nation := 3 ;
66755: LD_ADDR_OWVAR 21
66759: PUSH
66760: LD_INT 3
66762: ST_TO_ADDR
// vc_chassis := 25 ;
66763: LD_ADDR_OWVAR 37
66767: PUSH
66768: LD_INT 25
66770: ST_TO_ADDR
// vc_engine := engine_siberite ;
66771: LD_ADDR_OWVAR 39
66775: PUSH
66776: LD_INT 3
66778: ST_TO_ADDR
// vc_control := control_computer ;
66779: LD_ADDR_OWVAR 38
66783: PUSH
66784: LD_INT 3
66786: ST_TO_ADDR
// vc_weapon := 59 ;
66787: LD_ADDR_OWVAR 40
66791: PUSH
66792: LD_INT 59
66794: ST_TO_ADDR
// result := CreateVehicle ;
66795: LD_ADDR_VAR 0 5
66799: PUSH
66800: CALL_OW 45
66804: ST_TO_ADDR
// SetDir ( result , d ) ;
66805: LD_VAR 0 5
66809: PPUSH
66810: LD_VAR 0 4
66814: PPUSH
66815: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
66819: LD_VAR 0 5
66823: PPUSH
66824: LD_VAR 0 2
66828: PPUSH
66829: LD_VAR 0 3
66833: PPUSH
66834: LD_INT 0
66836: PPUSH
66837: CALL_OW 48
// end ;
66841: LD_VAR 0 5
66845: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
66846: LD_INT 0
66848: PPUSH
66849: PPUSH
66850: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
66851: LD_ADDR_VAR 0 2
66855: PUSH
66856: LD_INT 0
66858: PUSH
66859: LD_INT 0
66861: PUSH
66862: LD_INT 0
66864: PUSH
66865: LD_INT 0
66867: PUSH
66868: EMPTY
66869: LIST
66870: LIST
66871: LIST
66872: LIST
66873: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
66874: LD_VAR 0 1
66878: NOT
66879: PUSH
66880: LD_VAR 0 1
66884: PPUSH
66885: CALL_OW 264
66889: PUSH
66890: LD_INT 12
66892: PUSH
66893: LD_INT 51
66895: PUSH
66896: LD_INT 32
66898: PUSH
66899: LD_EXP 96
66903: PUSH
66904: EMPTY
66905: LIST
66906: LIST
66907: LIST
66908: LIST
66909: IN
66910: NOT
66911: OR
66912: IFFALSE 66916
// exit ;
66914: GO 67014
// for i := 1 to 3 do
66916: LD_ADDR_VAR 0 3
66920: PUSH
66921: DOUBLE
66922: LD_INT 1
66924: DEC
66925: ST_TO_ADDR
66926: LD_INT 3
66928: PUSH
66929: FOR_TO
66930: IFFALSE 67012
// begin tmp := GetCargo ( cargo , i ) ;
66932: LD_ADDR_VAR 0 4
66936: PUSH
66937: LD_VAR 0 1
66941: PPUSH
66942: LD_VAR 0 3
66946: PPUSH
66947: CALL_OW 289
66951: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
66952: LD_ADDR_VAR 0 2
66956: PUSH
66957: LD_VAR 0 2
66961: PPUSH
66962: LD_VAR 0 3
66966: PPUSH
66967: LD_VAR 0 4
66971: PPUSH
66972: CALL_OW 1
66976: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
66977: LD_ADDR_VAR 0 2
66981: PUSH
66982: LD_VAR 0 2
66986: PPUSH
66987: LD_INT 4
66989: PPUSH
66990: LD_VAR 0 2
66994: PUSH
66995: LD_INT 4
66997: ARRAY
66998: PUSH
66999: LD_VAR 0 4
67003: PLUS
67004: PPUSH
67005: CALL_OW 1
67009: ST_TO_ADDR
// end ;
67010: GO 66929
67012: POP
67013: POP
// end ;
67014: LD_VAR 0 2
67018: RET
// export function Length ( array ) ; begin
67019: LD_INT 0
67021: PPUSH
// result := array + 0 ;
67022: LD_ADDR_VAR 0 2
67026: PUSH
67027: LD_VAR 0 1
67031: PUSH
67032: LD_INT 0
67034: PLUS
67035: ST_TO_ADDR
// end ;
67036: LD_VAR 0 2
67040: RET
// export function PrepareArray ( array ) ; begin
67041: LD_INT 0
67043: PPUSH
// result := array diff 0 ;
67044: LD_ADDR_VAR 0 2
67048: PUSH
67049: LD_VAR 0 1
67053: PUSH
67054: LD_INT 0
67056: DIFF
67057: ST_TO_ADDR
// if not result [ 1 ] then
67058: LD_VAR 0 2
67062: PUSH
67063: LD_INT 1
67065: ARRAY
67066: NOT
67067: IFFALSE 67087
// result := Delete ( result , 1 ) ;
67069: LD_ADDR_VAR 0 2
67073: PUSH
67074: LD_VAR 0 2
67078: PPUSH
67079: LD_INT 1
67081: PPUSH
67082: CALL_OW 3
67086: ST_TO_ADDR
// end ; end_of_file
67087: LD_VAR 0 2
67091: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
67092: LD_VAR 0 1
67096: PPUSH
67097: LD_VAR 0 2
67101: PPUSH
67102: LD_VAR 0 3
67106: PPUSH
67107: LD_VAR 0 4
67111: PPUSH
67112: LD_VAR 0 5
67116: PPUSH
67117: LD_VAR 0 6
67121: PPUSH
67122: CALL 5805 0 6
// end ;
67126: PPOPN 6
67128: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
67129: LD_INT 0
67131: PPUSH
// begin if not units then
67132: LD_VAR 0 1
67136: NOT
67137: IFFALSE 67141
// exit ;
67139: GO 67141
// end ;
67141: PPOPN 7
67143: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
67144: CALL 5776 0 0
// end ; end_of_file
67148: PPOPN 1
67150: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
67151: LD_VAR 0 1
67155: PUSH
67156: LD_INT 200
67158: DOUBLE
67159: GREATEREQUAL
67160: IFFALSE 67168
67162: LD_INT 299
67164: DOUBLE
67165: LESSEQUAL
67166: IFTRUE 67170
67168: GO 67202
67170: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
67171: LD_VAR 0 1
67175: PPUSH
67176: LD_VAR 0 2
67180: PPUSH
67181: LD_VAR 0 3
67185: PPUSH
67186: LD_VAR 0 4
67190: PPUSH
67191: LD_VAR 0 5
67195: PPUSH
67196: CALL 21783 0 5
67200: GO 67279
67202: LD_INT 300
67204: DOUBLE
67205: GREATEREQUAL
67206: IFFALSE 67214
67208: LD_INT 399
67210: DOUBLE
67211: LESSEQUAL
67212: IFTRUE 67216
67214: GO 67278
67216: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
67217: LD_VAR 0 1
67221: PPUSH
67222: LD_VAR 0 2
67226: PPUSH
67227: LD_VAR 0 3
67231: PPUSH
67232: LD_VAR 0 4
67236: PPUSH
67237: LD_VAR 0 5
67241: PPUSH
67242: LD_VAR 0 6
67246: PPUSH
67247: LD_VAR 0 7
67251: PPUSH
67252: LD_VAR 0 8
67256: PPUSH
67257: LD_VAR 0 9
67261: PPUSH
67262: LD_VAR 0 10
67266: PPUSH
67267: LD_VAR 0 11
67271: PPUSH
67272: CALL 18112 0 11
67276: GO 67279
67278: POP
// end ;
67279: PPOPN 11
67281: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
67282: LD_VAR 0 1
67286: PPUSH
67287: LD_VAR 0 2
67291: PPUSH
67292: LD_VAR 0 3
67296: PPUSH
67297: LD_VAR 0 4
67301: PPUSH
67302: LD_VAR 0 5
67306: PPUSH
67307: CALL 21519 0 5
// end ;
67311: PPOPN 5
67313: END
