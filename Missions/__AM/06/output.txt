// export JMM , Gladstone , Denis , Lisa , Frank , Bobby , Cyrus , Brown , Donaldson , Mike ; export others , randomsDelta ; export apemans , yourApemans ; export yourVehicles ; export DeltaDoctor ; export Harisson ; export selectedPeople ; export baseCorrect ; export cutscene ; export lab ; export resources ; export mission_prefix , mission_prefix_prev ; starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// FogOff ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 344
// baseCorrect := 0 ;
  15: LD_ADDR_EXP 19
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// cutscene := 1 ;
  23: LD_ADDR_EXP 20
  27: PUSH
  28: LD_INT 1
  30: ST_TO_ADDR
// apemans := [ ] ;
  31: LD_ADDR_EXP 13
  35: PUSH
  36: EMPTY
  37: ST_TO_ADDR
// yourApemans := [ ] ;
  38: LD_ADDR_EXP 14
  42: PUSH
  43: EMPTY
  44: ST_TO_ADDR
// yourVehicles := [ ] ;
  45: LD_ADDR_EXP 15
  49: PUSH
  50: EMPTY
  51: ST_TO_ADDR
// randomsDelta := [ ] ;
  52: LD_ADDR_EXP 12
  56: PUSH
  57: EMPTY
  58: ST_TO_ADDR
// resources := [ ] ;
  59: LD_ADDR_EXP 22
  63: PUSH
  64: EMPTY
  65: ST_TO_ADDR
// mission_prefix := 06_ ;
  66: LD_ADDR_EXP 23
  70: PUSH
  71: LD_STRING 06_
  73: ST_TO_ADDR
// mission_prefix_prev := 05_ ;
  74: LD_ADDR_EXP 24
  78: PUSH
  79: LD_STRING 05_
  81: ST_TO_ADDR
// PrepareDeltaBase ;
  82: CALL 2389 0 0
// CreateNature ;
  86: CALL 170 0 0
// LoadVehicles ;
  90: CALL 1530 0 0
// PrepareHeroes ;
  94: CALL 299 0 0
// PrepareRandoms ;
  98: CALL 1795 0 0
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
 102: LD_ADDR_EXP 21
 106: PUSH
 107: LD_INT 22
 109: PUSH
 110: LD_INT 1
 112: PUSH
 113: EMPTY
 114: LIST
 115: LIST
 116: PUSH
 117: LD_INT 2
 119: PUSH
 120: LD_INT 30
 122: PUSH
 123: LD_INT 6
 125: PUSH
 126: EMPTY
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 30
 132: PUSH
 133: LD_INT 7
 135: PUSH
 136: EMPTY
 137: LIST
 138: LIST
 139: PUSH
 140: LD_INT 30
 142: PUSH
 143: LD_INT 8
 145: PUSH
 146: EMPTY
 147: LIST
 148: LIST
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: LIST
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: PPUSH
 160: CALL_OW 69
 164: ST_TO_ADDR
// Action ;
 165: CALL 3303 0 0
// end ;
 169: END
// export function CreateNature ; var i ; begin
 170: LD_INT 0
 172: PPUSH
 173: PPUSH
// uc_side := 0 ;
 174: LD_ADDR_OWVAR 20
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// uc_nation := 0 ;
 182: LD_ADDR_OWVAR 21
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// for i = 1 to 4 do
 190: LD_ADDR_VAR 0 2
 194: PUSH
 195: DOUBLE
 196: LD_INT 1
 198: DEC
 199: ST_TO_ADDR
 200: LD_INT 4
 202: PUSH
 203: FOR_TO
 204: IFFALSE 292
// begin hc_gallery :=  ;
 206: LD_ADDR_OWVAR 33
 210: PUSH
 211: LD_STRING 
 213: ST_TO_ADDR
// hc_name :=  ;
 214: LD_ADDR_OWVAR 26
 218: PUSH
 219: LD_STRING 
 221: ST_TO_ADDR
// hc_agressivity := 0 ;
 222: LD_ADDR_OWVAR 35
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// hc_attr := [ rand ( 10 , 11 ) , rand ( 10 , 12 ) ] ;
 230: LD_ADDR_OWVAR 29
 234: PUSH
 235: LD_INT 10
 237: PPUSH
 238: LD_INT 11
 240: PPUSH
 241: CALL_OW 12
 245: PUSH
 246: LD_INT 10
 248: PPUSH
 249: LD_INT 12
 251: PPUSH
 252: CALL_OW 12
 256: PUSH
 257: EMPTY
 258: LIST
 259: LIST
 260: ST_TO_ADDR
// hc_class := class_apeman ;
 261: LD_ADDR_OWVAR 28
 265: PUSH
 266: LD_INT 12
 268: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , 22 , 18 , 20 , false ) ;
 269: CALL_OW 44
 273: PPUSH
 274: LD_INT 22
 276: PPUSH
 277: LD_INT 18
 279: PPUSH
 280: LD_INT 20
 282: PPUSH
 283: LD_INT 0
 285: PPUSH
 286: CALL_OW 50
// end ;
 290: GO 203
 292: POP
 293: POP
// end ; end_of_file
 294: LD_VAR 0 1
 298: RET
// export function PrepareHeroes ; var i , tmp , ape , test ; begin
 299: LD_INT 0
 301: PPUSH
 302: PPUSH
 303: PPUSH
 304: PPUSH
 305: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
 306: LD_ADDR_VAR 0 3
 310: PUSH
 311: LD_INT 22
 313: PUSH
 314: LD_INT 1
 316: PUSH
 317: EMPTY
 318: LIST
 319: LIST
 320: PUSH
 321: LD_INT 21
 323: PUSH
 324: LD_INT 3
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: PUSH
 331: LD_INT 30
 333: PUSH
 334: LD_INT 0
 336: PUSH
 337: EMPTY
 338: LIST
 339: LIST
 340: PUSH
 341: EMPTY
 342: LIST
 343: LIST
 344: LIST
 345: PPUSH
 346: CALL_OW 69
 350: ST_TO_ADDR
// if tmp then
 351: LD_VAR 0 3
 355: IFFALSE 373
// SetBName ( tmp [ 1 ] , delta ) ;
 357: LD_VAR 0 3
 361: PUSH
 362: LD_INT 1
 364: ARRAY
 365: PPUSH
 366: LD_STRING delta
 368: PPUSH
 369: CALL_OW 500
// uc_side := 1 ;
 373: LD_ADDR_OWVAR 20
 377: PUSH
 378: LD_INT 1
 380: ST_TO_ADDR
// uc_nation := 1 ;
 381: LD_ADDR_OWVAR 21
 385: PUSH
 386: LD_INT 1
 388: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , true , mission_prefix_prev ) ;
 389: LD_ADDR_EXP 1
 393: PUSH
 394: LD_STRING JMM
 396: PPUSH
 397: LD_INT 1
 399: PPUSH
 400: LD_EXP 24
 404: PPUSH
 405: CALL 26401 0 3
 409: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
 410: LD_ADDR_EXP 17
 414: PUSH
 415: LD_STRING Harisson
 417: PPUSH
 418: LD_INT 0
 420: PPUSH
 421: LD_STRING 
 423: PPUSH
 424: CALL 26401 0 3
 428: ST_TO_ADDR
// PlaceUnitXYR ( JMM , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 429: LD_EXP 1
 433: PPUSH
 434: LD_VAR 0 3
 438: PUSH
 439: LD_INT 1
 441: ARRAY
 442: PPUSH
 443: CALL_OW 250
 447: PPUSH
 448: LD_VAR 0 3
 452: PUSH
 453: LD_INT 1
 455: ARRAY
 456: PPUSH
 457: CALL_OW 251
 461: PPUSH
 462: LD_INT 5
 464: PPUSH
 465: LD_INT 0
 467: PPUSH
 468: CALL_OW 50
// SetClass ( JMM , 1 ) ;
 472: LD_EXP 1
 476: PPUSH
 477: LD_INT 1
 479: PPUSH
 480: CALL_OW 336
// Gladstone := PrepareUnit ( Gladstone , true , mission_prefix_prev ) ;
 484: LD_ADDR_EXP 2
 488: PUSH
 489: LD_STRING Gladstone
 491: PPUSH
 492: LD_INT 1
 494: PPUSH
 495: LD_EXP 24
 499: PPUSH
 500: CALL 26401 0 3
 504: ST_TO_ADDR
// PlaceUnitXYR ( Gladstone , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 505: LD_EXP 2
 509: PPUSH
 510: LD_VAR 0 3
 514: PUSH
 515: LD_INT 1
 517: ARRAY
 518: PPUSH
 519: CALL_OW 250
 523: PPUSH
 524: LD_VAR 0 3
 528: PUSH
 529: LD_INT 1
 531: ARRAY
 532: PPUSH
 533: CALL_OW 251
 537: PPUSH
 538: LD_INT 5
 540: PPUSH
 541: LD_INT 0
 543: PPUSH
 544: CALL_OW 50
// SetClass ( Gladstone , 4 ) ;
 548: LD_EXP 2
 552: PPUSH
 553: LD_INT 4
 555: PPUSH
 556: CALL_OW 336
// Denis := PrepareUnit ( Denis , true , mission_prefix_prev ) ;
 560: LD_ADDR_EXP 3
 564: PUSH
 565: LD_STRING Denis
 567: PPUSH
 568: LD_INT 1
 570: PPUSH
 571: LD_EXP 24
 575: PPUSH
 576: CALL 26401 0 3
 580: ST_TO_ADDR
// PlaceUnitXYR ( Denis , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 581: LD_EXP 3
 585: PPUSH
 586: LD_VAR 0 3
 590: PUSH
 591: LD_INT 1
 593: ARRAY
 594: PPUSH
 595: CALL_OW 250
 599: PPUSH
 600: LD_VAR 0 3
 604: PUSH
 605: LD_INT 1
 607: ARRAY
 608: PPUSH
 609: CALL_OW 251
 613: PPUSH
 614: LD_INT 5
 616: PPUSH
 617: LD_INT 0
 619: PPUSH
 620: CALL_OW 50
// SetClass ( Denis , 4 ) ;
 624: LD_EXP 3
 628: PPUSH
 629: LD_INT 4
 631: PPUSH
 632: CALL_OW 336
// Mike := PrepareUnit ( Mike , true , mission_prefix_prev ) ;
 636: LD_ADDR_EXP 10
 640: PUSH
 641: LD_STRING Mike
 643: PPUSH
 644: LD_INT 1
 646: PPUSH
 647: LD_EXP 24
 651: PPUSH
 652: CALL 26401 0 3
 656: ST_TO_ADDR
// PlaceUnitXYR ( Mike , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 657: LD_EXP 10
 661: PPUSH
 662: LD_VAR 0 3
 666: PUSH
 667: LD_INT 1
 669: ARRAY
 670: PPUSH
 671: CALL_OW 250
 675: PPUSH
 676: LD_VAR 0 3
 680: PUSH
 681: LD_INT 1
 683: ARRAY
 684: PPUSH
 685: CALL_OW 251
 689: PPUSH
 690: LD_INT 5
 692: PPUSH
 693: LD_INT 0
 695: PPUSH
 696: CALL_OW 50
// if LoadVariable ( FrankInDelta , 0 ) = 1 then
 700: LD_STRING FrankInDelta
 702: PPUSH
 703: LD_INT 0
 705: PPUSH
 706: CALL_OW 30
 710: PUSH
 711: LD_INT 1
 713: EQUAL
 714: IFFALSE 792
// begin Frank := PrepareUnit ( Frank , true , mission_prefix_prev ) ;
 716: LD_ADDR_EXP 5
 720: PUSH
 721: LD_STRING Frank
 723: PPUSH
 724: LD_INT 1
 726: PPUSH
 727: LD_EXP 24
 731: PPUSH
 732: CALL 26401 0 3
 736: ST_TO_ADDR
// PlaceUnitXYR ( Frank , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 737: LD_EXP 5
 741: PPUSH
 742: LD_VAR 0 3
 746: PUSH
 747: LD_INT 1
 749: ARRAY
 750: PPUSH
 751: CALL_OW 250
 755: PPUSH
 756: LD_VAR 0 3
 760: PUSH
 761: LD_INT 1
 763: ARRAY
 764: PPUSH
 765: CALL_OW 251
 769: PPUSH
 770: LD_INT 5
 772: PPUSH
 773: LD_INT 0
 775: PPUSH
 776: CALL_OW 50
// SetClass ( Frank , 1 ) ;
 780: LD_EXP 5
 784: PPUSH
 785: LD_INT 1
 787: PPUSH
 788: CALL_OW 336
// end ; if LoadVariable ( LisaInDelta , 0 ) = 1 then
 792: LD_STRING LisaInDelta
 794: PPUSH
 795: LD_INT 0
 797: PPUSH
 798: CALL_OW 30
 802: PUSH
 803: LD_INT 1
 805: EQUAL
 806: IFFALSE 884
// begin Lisa := PrepareUnit ( Lisa , true , mission_prefix_prev ) ;
 808: LD_ADDR_EXP 4
 812: PUSH
 813: LD_STRING Lisa
 815: PPUSH
 816: LD_INT 1
 818: PPUSH
 819: LD_EXP 24
 823: PPUSH
 824: CALL 26401 0 3
 828: ST_TO_ADDR
// PlaceUnitXYR ( Lisa , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 829: LD_EXP 4
 833: PPUSH
 834: LD_VAR 0 3
 838: PUSH
 839: LD_INT 1
 841: ARRAY
 842: PPUSH
 843: CALL_OW 250
 847: PPUSH
 848: LD_VAR 0 3
 852: PUSH
 853: LD_INT 1
 855: ARRAY
 856: PPUSH
 857: CALL_OW 251
 861: PPUSH
 862: LD_INT 5
 864: PPUSH
 865: LD_INT 0
 867: PPUSH
 868: CALL_OW 50
// SetClass ( Lisa , 1 ) ;
 872: LD_EXP 4
 876: PPUSH
 877: LD_INT 1
 879: PPUSH
 880: CALL_OW 336
// end ; if LoadVariable ( BobbyInDelta , 0 ) = 1 then
 884: LD_STRING BobbyInDelta
 886: PPUSH
 887: LD_INT 0
 889: PPUSH
 890: CALL_OW 30
 894: PUSH
 895: LD_INT 1
 897: EQUAL
 898: IFFALSE 976
// begin Bobby := PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 900: LD_ADDR_EXP 6
 904: PUSH
 905: LD_STRING Bobby
 907: PPUSH
 908: LD_INT 1
 910: PPUSH
 911: LD_EXP 24
 915: PPUSH
 916: CALL 26401 0 3
 920: ST_TO_ADDR
// PlaceUnitXYR ( Bobby , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 921: LD_EXP 6
 925: PPUSH
 926: LD_VAR 0 3
 930: PUSH
 931: LD_INT 1
 933: ARRAY
 934: PPUSH
 935: CALL_OW 250
 939: PPUSH
 940: LD_VAR 0 3
 944: PUSH
 945: LD_INT 1
 947: ARRAY
 948: PPUSH
 949: CALL_OW 251
 953: PPUSH
 954: LD_INT 5
 956: PPUSH
 957: LD_INT 0
 959: PPUSH
 960: CALL_OW 50
// SetClass ( Bobby , 1 ) ;
 964: LD_EXP 6
 968: PPUSH
 969: LD_INT 1
 971: PPUSH
 972: CALL_OW 336
// end ; if LoadVariable ( CyrusInDelta , 0 ) = 1 then
 976: LD_STRING CyrusInDelta
 978: PPUSH
 979: LD_INT 0
 981: PPUSH
 982: CALL_OW 30
 986: PUSH
 987: LD_INT 1
 989: EQUAL
 990: IFFALSE 1068
// begin Cyrus := PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
 992: LD_ADDR_EXP 7
 996: PUSH
 997: LD_STRING Cyrus
 999: PPUSH
1000: LD_INT 1
1002: PPUSH
1003: LD_EXP 24
1007: PPUSH
1008: CALL 26401 0 3
1012: ST_TO_ADDR
// PlaceUnitXYR ( Cyrus , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1013: LD_EXP 7
1017: PPUSH
1018: LD_VAR 0 3
1022: PUSH
1023: LD_INT 1
1025: ARRAY
1026: PPUSH
1027: CALL_OW 250
1031: PPUSH
1032: LD_VAR 0 3
1036: PUSH
1037: LD_INT 1
1039: ARRAY
1040: PPUSH
1041: CALL_OW 251
1045: PPUSH
1046: LD_INT 5
1048: PPUSH
1049: LD_INT 0
1051: PPUSH
1052: CALL_OW 50
// SetClass ( Cyrus , 1 ) ;
1056: LD_EXP 7
1060: PPUSH
1061: LD_INT 1
1063: PPUSH
1064: CALL_OW 336
// end ; if LoadVariable ( DonaldsonInDelta , 0 ) = 1 then
1068: LD_STRING DonaldsonInDelta
1070: PPUSH
1071: LD_INT 0
1073: PPUSH
1074: CALL_OW 30
1078: PUSH
1079: LD_INT 1
1081: EQUAL
1082: IFFALSE 1160
// begin Donaldson := PrepareUnit ( Donaldson , true , mission_prefix_prev ) ;
1084: LD_ADDR_EXP 9
1088: PUSH
1089: LD_STRING Donaldson
1091: PPUSH
1092: LD_INT 1
1094: PPUSH
1095: LD_EXP 24
1099: PPUSH
1100: CALL 26401 0 3
1104: ST_TO_ADDR
// PlaceUnitXYR ( Donaldson , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1105: LD_EXP 9
1109: PPUSH
1110: LD_VAR 0 3
1114: PUSH
1115: LD_INT 1
1117: ARRAY
1118: PPUSH
1119: CALL_OW 250
1123: PPUSH
1124: LD_VAR 0 3
1128: PUSH
1129: LD_INT 1
1131: ARRAY
1132: PPUSH
1133: CALL_OW 251
1137: PPUSH
1138: LD_INT 5
1140: PPUSH
1141: LD_INT 0
1143: PPUSH
1144: CALL_OW 50
// SetClass ( Donaldson , 1 ) ;
1148: LD_EXP 9
1152: PPUSH
1153: LD_INT 1
1155: PPUSH
1156: CALL_OW 336
// end ; if LoadVariable ( BrownInDelta , 0 ) = 1 then
1160: LD_STRING BrownInDelta
1162: PPUSH
1163: LD_INT 0
1165: PPUSH
1166: CALL_OW 30
1170: PUSH
1171: LD_INT 1
1173: EQUAL
1174: IFFALSE 1252
// begin Brown := PrepareUnit ( Brown , true , mission_prefix_prev ) ;
1176: LD_ADDR_EXP 8
1180: PUSH
1181: LD_STRING Brown
1183: PPUSH
1184: LD_INT 1
1186: PPUSH
1187: LD_EXP 24
1191: PPUSH
1192: CALL 26401 0 3
1196: ST_TO_ADDR
// PlaceUnitXYR ( Brown , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1197: LD_EXP 8
1201: PPUSH
1202: LD_VAR 0 3
1206: PUSH
1207: LD_INT 1
1209: ARRAY
1210: PPUSH
1211: CALL_OW 250
1215: PPUSH
1216: LD_VAR 0 3
1220: PUSH
1221: LD_INT 1
1223: ARRAY
1224: PPUSH
1225: CALL_OW 251
1229: PPUSH
1230: LD_INT 5
1232: PPUSH
1233: LD_INT 0
1235: PPUSH
1236: CALL_OW 50
// SetClass ( Brown , 2 ) ;
1240: LD_EXP 8
1244: PPUSH
1245: LD_INT 2
1247: PPUSH
1248: CALL_OW 336
// end ; others := CreateCharacterSet ( othersInDelta ) ;
1252: LD_ADDR_EXP 11
1256: PUSH
1257: LD_STRING othersInDelta
1259: PPUSH
1260: CALL_OW 31
1264: ST_TO_ADDR
// for i in others do
1265: LD_ADDR_VAR 0 2
1269: PUSH
1270: LD_EXP 11
1274: PUSH
1275: FOR_IN
1276: IFFALSE 1323
// PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1278: LD_VAR 0 2
1282: PPUSH
1283: LD_VAR 0 3
1287: PUSH
1288: LD_INT 1
1290: ARRAY
1291: PPUSH
1292: CALL_OW 250
1296: PPUSH
1297: LD_VAR 0 3
1301: PUSH
1302: LD_INT 1
1304: ARRAY
1305: PPUSH
1306: CALL_OW 251
1310: PPUSH
1311: LD_INT 35
1313: PPUSH
1314: LD_INT 0
1316: PPUSH
1317: CALL_OW 50
1321: GO 1275
1323: POP
1324: POP
// apemans := CreateCharacterSet ( apeInDelta ) ;
1325: LD_ADDR_EXP 13
1329: PUSH
1330: LD_STRING apeInDelta
1332: PPUSH
1333: CALL_OW 31
1337: ST_TO_ADDR
// uc_nation := 0 ;
1338: LD_ADDR_OWVAR 21
1342: PUSH
1343: LD_INT 0
1345: ST_TO_ADDR
// if apemans > 5 then
1346: LD_EXP 13
1350: PUSH
1351: LD_INT 5
1353: GREATER
1354: IFFALSE 1449
// begin for i := 1 to 5 do
1356: LD_ADDR_VAR 0 2
1360: PUSH
1361: DOUBLE
1362: LD_INT 1
1364: DEC
1365: ST_TO_ADDR
1366: LD_INT 5
1368: PUSH
1369: FOR_TO
1370: IFFALSE 1445
// begin PlaceUnitXYR ( apemans [ i ] , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1372: LD_EXP 13
1376: PUSH
1377: LD_VAR 0 2
1381: ARRAY
1382: PPUSH
1383: LD_VAR 0 3
1387: PUSH
1388: LD_INT 1
1390: ARRAY
1391: PPUSH
1392: CALL_OW 250
1396: PPUSH
1397: LD_VAR 0 3
1401: PUSH
1402: LD_INT 1
1404: ARRAY
1405: PPUSH
1406: CALL_OW 251
1410: PPUSH
1411: LD_INT 50
1413: PPUSH
1414: LD_INT 0
1416: PPUSH
1417: CALL_OW 50
// yourApemans := yourApemans ^ apemans [ i ] ;
1421: LD_ADDR_EXP 14
1425: PUSH
1426: LD_EXP 14
1430: PUSH
1431: LD_EXP 13
1435: PUSH
1436: LD_VAR 0 2
1440: ARRAY
1441: ADD
1442: ST_TO_ADDR
// end ;
1443: GO 1369
1445: POP
1446: POP
// end else
1447: GO 1525
// begin for i in apemans do
1449: LD_ADDR_VAR 0 2
1453: PUSH
1454: LD_EXP 13
1458: PUSH
1459: FOR_IN
1460: IFFALSE 1523
// begin PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1462: LD_VAR 0 2
1466: PPUSH
1467: LD_VAR 0 3
1471: PUSH
1472: LD_INT 1
1474: ARRAY
1475: PPUSH
1476: CALL_OW 250
1480: PPUSH
1481: LD_VAR 0 3
1485: PUSH
1486: LD_INT 1
1488: ARRAY
1489: PPUSH
1490: CALL_OW 251
1494: PPUSH
1495: LD_INT 50
1497: PPUSH
1498: LD_INT 0
1500: PPUSH
1501: CALL_OW 50
// yourApemans := yourApemans ^ i ;
1505: LD_ADDR_EXP 14
1509: PUSH
1510: LD_EXP 14
1514: PUSH
1515: LD_VAR 0 2
1519: ADD
1520: ST_TO_ADDR
// end ;
1521: GO 1459
1523: POP
1524: POP
// end ; end ;
1525: LD_VAR 0 1
1529: RET
// export function LoadVehicles ; var i , j , veh , tmp , vehicles ; begin
1530: LD_INT 0
1532: PPUSH
1533: PPUSH
1534: PPUSH
1535: PPUSH
1536: PPUSH
1537: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1538: LD_ADDR_VAR 0 5
1542: PUSH
1543: LD_INT 22
1545: PUSH
1546: LD_INT 1
1548: PUSH
1549: EMPTY
1550: LIST
1551: LIST
1552: PUSH
1553: LD_INT 21
1555: PUSH
1556: LD_INT 3
1558: PUSH
1559: EMPTY
1560: LIST
1561: LIST
1562: PUSH
1563: LD_INT 30
1565: PUSH
1566: LD_INT 0
1568: PUSH
1569: EMPTY
1570: LIST
1571: LIST
1572: PUSH
1573: EMPTY
1574: LIST
1575: LIST
1576: LIST
1577: PPUSH
1578: CALL_OW 69
1582: ST_TO_ADDR
// uc_side := 1 ;
1583: LD_ADDR_OWVAR 20
1587: PUSH
1588: LD_INT 1
1590: ST_TO_ADDR
// vehicles := LoadVariable ( vehiclesInDelta , [ ] ) ;
1591: LD_ADDR_VAR 0 6
1595: PUSH
1596: LD_STRING vehiclesInDelta
1598: PPUSH
1599: EMPTY
1600: PPUSH
1601: CALL_OW 30
1605: ST_TO_ADDR
// for i := 1 to Count ( vehicles ) div 4 do
1606: LD_ADDR_VAR 0 2
1610: PUSH
1611: DOUBLE
1612: LD_INT 1
1614: DEC
1615: ST_TO_ADDR
1616: LD_VAR 0 6
1620: PPUSH
1621: CALL 28503 0 1
1625: PUSH
1626: LD_INT 4
1628: DIV
1629: PUSH
1630: FOR_TO
1631: IFFALSE 1788
// begin uc_nation := vehicles [ 1 ] ;
1633: LD_ADDR_OWVAR 21
1637: PUSH
1638: LD_VAR 0 6
1642: PUSH
1643: LD_INT 1
1645: ARRAY
1646: ST_TO_ADDR
// vc_chassis := vehicles [ 2 ] ;
1647: LD_ADDR_OWVAR 37
1651: PUSH
1652: LD_VAR 0 6
1656: PUSH
1657: LD_INT 2
1659: ARRAY
1660: ST_TO_ADDR
// vc_engine := vehicles [ 3 ] ;
1661: LD_ADDR_OWVAR 39
1665: PUSH
1666: LD_VAR 0 6
1670: PUSH
1671: LD_INT 3
1673: ARRAY
1674: ST_TO_ADDR
// vc_control := vehicles [ 4 ] ;
1675: LD_ADDR_OWVAR 38
1679: PUSH
1680: LD_VAR 0 6
1684: PUSH
1685: LD_INT 4
1687: ARRAY
1688: ST_TO_ADDR
// vc_weapon := vehicles [ 5 ] ;
1689: LD_ADDR_OWVAR 40
1693: PUSH
1694: LD_VAR 0 6
1698: PUSH
1699: LD_INT 5
1701: ARRAY
1702: ST_TO_ADDR
// veh := CreateVehicle ;
1703: LD_ADDR_VAR 0 4
1707: PUSH
1708: CALL_OW 45
1712: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1713: LD_VAR 0 4
1717: PPUSH
1718: LD_INT 0
1720: PPUSH
1721: LD_INT 5
1723: PPUSH
1724: CALL_OW 12
1728: PPUSH
1729: CALL_OW 233
// PlaceUnitArea ( veh , parkingArea , false ) ;
1733: LD_VAR 0 4
1737: PPUSH
1738: LD_INT 4
1740: PPUSH
1741: LD_INT 0
1743: PPUSH
1744: CALL_OW 49
// for j := 1 to 5 do
1748: LD_ADDR_VAR 0 3
1752: PUSH
1753: DOUBLE
1754: LD_INT 1
1756: DEC
1757: ST_TO_ADDR
1758: LD_INT 5
1760: PUSH
1761: FOR_TO
1762: IFFALSE 1784
// vehicles := Delete ( vehicles , 1 ) ;
1764: LD_ADDR_VAR 0 6
1768: PUSH
1769: LD_VAR 0 6
1773: PPUSH
1774: LD_INT 1
1776: PPUSH
1777: CALL_OW 3
1781: ST_TO_ADDR
1782: GO 1761
1784: POP
1785: POP
// end ;
1786: GO 1630
1788: POP
1789: POP
// end ;
1790: LD_VAR 0 1
1794: RET
// export function PrepareRandoms ; var i , un , tmp , filter ; begin
1795: LD_INT 0
1797: PPUSH
1798: PPUSH
1799: PPUSH
1800: PPUSH
1801: PPUSH
// uc_side := 1 ;
1802: LD_ADDR_OWVAR 20
1806: PUSH
1807: LD_INT 1
1809: ST_TO_ADDR
// uc_nation := 1 ;
1810: LD_ADDR_OWVAR 21
1814: PUSH
1815: LD_INT 1
1817: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1818: LD_ADDR_VAR 0 4
1822: PUSH
1823: LD_INT 22
1825: PUSH
1826: LD_INT 1
1828: PUSH
1829: EMPTY
1830: LIST
1831: LIST
1832: PUSH
1833: LD_INT 21
1835: PUSH
1836: LD_INT 3
1838: PUSH
1839: EMPTY
1840: LIST
1841: LIST
1842: PUSH
1843: LD_INT 30
1845: PUSH
1846: LD_INT 0
1848: PUSH
1849: EMPTY
1850: LIST
1851: LIST
1852: PUSH
1853: EMPTY
1854: LIST
1855: LIST
1856: LIST
1857: PPUSH
1858: CALL_OW 69
1862: ST_TO_ADDR
// deltaDoctor := ( FilterAllunits ( [ [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] ) ;
1863: LD_ADDR_EXP 16
1867: PUSH
1868: LD_INT 22
1870: PUSH
1871: LD_INT 1
1873: PUSH
1874: EMPTY
1875: LIST
1876: LIST
1877: PUSH
1878: LD_INT 25
1880: PUSH
1881: LD_INT 4
1883: PUSH
1884: EMPTY
1885: LIST
1886: LIST
1887: PUSH
1888: LD_INT 26
1890: PUSH
1891: LD_INT 1
1893: PUSH
1894: EMPTY
1895: LIST
1896: LIST
1897: PUSH
1898: EMPTY
1899: LIST
1900: LIST
1901: LIST
1902: PUSH
1903: EMPTY
1904: LIST
1905: PPUSH
1906: CALL_OW 69
1910: PUSH
1911: LD_EXP 1
1915: PUSH
1916: LD_EXP 7
1920: PUSH
1921: LD_EXP 6
1925: PUSH
1926: LD_EXP 5
1930: PUSH
1931: LD_EXP 2
1935: PUSH
1936: LD_EXP 3
1940: PUSH
1941: LD_EXP 8
1945: PUSH
1946: EMPTY
1947: LIST
1948: LIST
1949: LIST
1950: LIST
1951: LIST
1952: LIST
1953: LIST
1954: DIFF
1955: ST_TO_ADDR
// if not deltaDoctor then
1956: LD_EXP 16
1960: NOT
1961: IFFALSE 2112
// begin filter := FilterAllunits ( [ [ [ f_side , 1 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] ;
1963: LD_ADDR_VAR 0 5
1967: PUSH
1968: LD_INT 22
1970: PUSH
1971: LD_INT 1
1973: PUSH
1974: EMPTY
1975: LIST
1976: LIST
1977: PUSH
1978: LD_INT 26
1980: PUSH
1981: LD_INT 1
1983: PUSH
1984: EMPTY
1985: LIST
1986: LIST
1987: PUSH
1988: EMPTY
1989: LIST
1990: LIST
1991: PUSH
1992: EMPTY
1993: LIST
1994: PPUSH
1995: CALL_OW 69
1999: PUSH
2000: LD_EXP 1
2004: PUSH
2005: LD_EXP 7
2009: PUSH
2010: LD_EXP 6
2014: PUSH
2015: LD_EXP 5
2019: PUSH
2020: LD_EXP 2
2024: PUSH
2025: LD_EXP 3
2029: PUSH
2030: LD_EXP 8
2034: PUSH
2035: EMPTY
2036: LIST
2037: LIST
2038: LIST
2039: LIST
2040: LIST
2041: LIST
2042: LIST
2043: DIFF
2044: ST_TO_ADDR
// if filter then
2045: LD_VAR 0 5
2049: IFFALSE 2110
// for i in filter do
2051: LD_ADDR_VAR 0 2
2055: PUSH
2056: LD_VAR 0 5
2060: PUSH
2061: FOR_IN
2062: IFFALSE 2108
// if GetSkill ( i , 4 ) >= 4 then
2064: LD_VAR 0 2
2068: PPUSH
2069: LD_INT 4
2071: PPUSH
2072: CALL_OW 259
2076: PUSH
2077: LD_INT 4
2079: GREATEREQUAL
2080: IFFALSE 2106
// begin deltaDoctor := i ;
2082: LD_ADDR_EXP 16
2086: PUSH
2087: LD_VAR 0 2
2091: ST_TO_ADDR
// SetClass ( deltaDoctor , 4 ) ;
2092: LD_EXP 16
2096: PPUSH
2097: LD_INT 4
2099: PPUSH
2100: CALL_OW 336
// break ;
2104: GO 2108
// end ;
2106: GO 2061
2108: POP
2109: POP
// end else
2110: GO 2126
// deltaDoctor := deltaDoctor [ 1 ] ;
2112: LD_ADDR_EXP 16
2116: PUSH
2117: LD_EXP 16
2121: PUSH
2122: LD_INT 1
2124: ARRAY
2125: ST_TO_ADDR
// for i := 1 to 7 do
2126: LD_ADDR_VAR 0 2
2130: PUSH
2131: DOUBLE
2132: LD_INT 1
2134: DEC
2135: ST_TO_ADDR
2136: LD_INT 7
2138: PUSH
2139: FOR_TO
2140: IFFALSE 2277
// begin hc_gallery :=  ;
2142: LD_ADDR_OWVAR 33
2146: PUSH
2147: LD_STRING 
2149: ST_TO_ADDR
// hc_name :=  ;
2150: LD_ADDR_OWVAR 26
2154: PUSH
2155: LD_STRING 
2157: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 3 , 5 ) ) ;
2158: LD_INT 0
2160: PPUSH
2161: LD_INT 1
2163: PUSH
2164: LD_INT 2
2166: PUSH
2167: LD_INT 3
2169: PUSH
2170: LD_INT 4
2172: PUSH
2173: EMPTY
2174: LIST
2175: LIST
2176: LIST
2177: LIST
2178: PUSH
2179: LD_INT 1
2181: PPUSH
2182: LD_INT 4
2184: PPUSH
2185: CALL_OW 12
2189: ARRAY
2190: PPUSH
2191: LD_INT 3
2193: PPUSH
2194: LD_INT 5
2196: PPUSH
2197: CALL_OW 12
2201: PPUSH
2202: CALL_OW 380
// un := CreateHuman ;
2206: LD_ADDR_VAR 0 3
2210: PUSH
2211: CALL_OW 44
2215: ST_TO_ADDR
// randomsDelta := randomsDelta ^ un ;
2216: LD_ADDR_EXP 12
2220: PUSH
2221: LD_EXP 12
2225: PUSH
2226: LD_VAR 0 3
2230: ADD
2231: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
2232: LD_VAR 0 3
2236: PPUSH
2237: LD_VAR 0 4
2241: PUSH
2242: LD_INT 1
2244: ARRAY
2245: PPUSH
2246: CALL_OW 250
2250: PPUSH
2251: LD_VAR 0 4
2255: PUSH
2256: LD_INT 1
2258: ARRAY
2259: PPUSH
2260: CALL_OW 251
2264: PPUSH
2265: LD_INT 15
2267: PPUSH
2268: LD_INT 0
2270: PPUSH
2271: CALL_OW 50
// end ;
2275: GO 2139
2277: POP
2278: POP
// if deltaDoctor then
2279: LD_EXP 16
2283: IFFALSE 2287
// exit ;
2285: GO 2384
// hc_gallery := Dawkins ;
2287: LD_ADDR_OWVAR 33
2291: PUSH
2292: LD_STRING Dawkins
2294: ST_TO_ADDR
// hc_face_number := 1 ;
2295: LD_ADDR_OWVAR 34
2299: PUSH
2300: LD_INT 1
2302: ST_TO_ADDR
// hc_name := Dr. Adam Charles Dawkins ;
2303: LD_ADDR_OWVAR 26
2307: PUSH
2308: LD_STRING Dr. Adam Charles Dawkins
2310: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 5 ) ;
2311: LD_INT 1
2313: PPUSH
2314: LD_INT 4
2316: PPUSH
2317: LD_INT 5
2319: PPUSH
2320: CALL_OW 380
// deltaDoctor := CreateHuman ;
2324: LD_ADDR_EXP 16
2328: PUSH
2329: CALL_OW 44
2333: ST_TO_ADDR
// PlaceUnitXYR ( deltaDoctor , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
2334: LD_EXP 16
2338: PPUSH
2339: LD_VAR 0 4
2343: PUSH
2344: LD_INT 1
2346: ARRAY
2347: PPUSH
2348: CALL_OW 250
2352: PPUSH
2353: LD_VAR 0 4
2357: PUSH
2358: LD_INT 1
2360: ARRAY
2361: PPUSH
2362: CALL_OW 251
2366: PPUSH
2367: LD_INT 5
2369: PPUSH
2370: LD_INT 0
2372: PPUSH
2373: CALL_OW 50
// ToLua ( enableBioCharacter(BIO_ADAM) ) ;
2377: LD_STRING enableBioCharacter(BIO_ADAM)
2379: PPUSH
2380: CALL_OW 559
// end ; end_of_file
2384: LD_VAR 0 1
2388: RET
// export function PrepareDeltaBase ; var i , j , building , buildings , lab , tmp ; begin
2389: LD_INT 0
2391: PPUSH
2392: PPUSH
2393: PPUSH
2394: PPUSH
2395: PPUSH
2396: PPUSH
2397: PPUSH
// buildings := LoadVariable ( buildingsInDelta , [ ] ) ;
2398: LD_ADDR_VAR 0 5
2402: PUSH
2403: LD_STRING buildingsInDelta
2405: PPUSH
2406: EMPTY
2407: PPUSH
2408: CALL_OW 30
2412: ST_TO_ADDR
// SetResourceVisibility ( 68 , 40 , 1 ) ;
2413: LD_INT 68
2415: PPUSH
2416: LD_INT 40
2418: PPUSH
2419: LD_INT 1
2421: PPUSH
2422: CALL_OW 441
// uc_side := 1 ;
2426: LD_ADDR_OWVAR 20
2430: PUSH
2431: LD_INT 1
2433: ST_TO_ADDR
// uc_nation := 1 ;
2434: LD_ADDR_OWVAR 21
2438: PUSH
2439: LD_INT 1
2441: ST_TO_ADDR
// for i := 1 to buildings do
2442: LD_ADDR_VAR 0 2
2446: PUSH
2447: DOUBLE
2448: LD_INT 1
2450: DEC
2451: ST_TO_ADDR
2452: LD_VAR 0 5
2456: PUSH
2457: FOR_TO
2458: IFFALSE 2759
// begin InitBc ;
2460: CALL_OW 21
// bc_type := buildings [ i ] [ 1 ] ;
2464: LD_ADDR_OWVAR 42
2468: PUSH
2469: LD_VAR 0 5
2473: PUSH
2474: LD_VAR 0 2
2478: ARRAY
2479: PUSH
2480: LD_INT 1
2482: ARRAY
2483: ST_TO_ADDR
// bc_level := buildings [ i ] [ 2 ] ;
2484: LD_ADDR_OWVAR 43
2488: PUSH
2489: LD_VAR 0 5
2493: PUSH
2494: LD_VAR 0 2
2498: ARRAY
2499: PUSH
2500: LD_INT 2
2502: ARRAY
2503: ST_TO_ADDR
// if bc_type in [ b_lab , b_lab_half , b_lab_full ] then
2504: LD_OWVAR 42
2508: PUSH
2509: LD_INT 6
2511: PUSH
2512: LD_INT 7
2514: PUSH
2515: LD_INT 8
2517: PUSH
2518: EMPTY
2519: LIST
2520: LIST
2521: LIST
2522: IN
2523: IFFALSE 2647
// begin bc_kind1 := b_lab_basic ;
2525: LD_ADDR_OWVAR 44
2529: PUSH
2530: LD_INT 9
2532: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2533: LD_ADDR_OWVAR 45
2537: PUSH
2538: LD_INT 9
2540: ST_TO_ADDR
// if buildings [ i ] [ 6 ] then
2541: LD_VAR 0 5
2545: PUSH
2546: LD_VAR 0 2
2550: ARRAY
2551: PUSH
2552: LD_INT 6
2554: ARRAY
2555: IFFALSE 2623
// begin bc_kind1 := buildings [ i ] [ 6 ] ;
2557: LD_ADDR_OWVAR 44
2561: PUSH
2562: LD_VAR 0 5
2566: PUSH
2567: LD_VAR 0 2
2571: ARRAY
2572: PUSH
2573: LD_INT 6
2575: ARRAY
2576: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2577: LD_ADDR_OWVAR 45
2581: PUSH
2582: LD_INT 9
2584: ST_TO_ADDR
// if buildings [ i ] [ 7 ] then
2585: LD_VAR 0 5
2589: PUSH
2590: LD_VAR 0 2
2594: ARRAY
2595: PUSH
2596: LD_INT 7
2598: ARRAY
2599: IFFALSE 2621
// bc_kind2 := buildings [ i ] [ 7 ] ;
2601: LD_ADDR_OWVAR 45
2605: PUSH
2606: LD_VAR 0 5
2610: PUSH
2611: LD_VAR 0 2
2615: ARRAY
2616: PUSH
2617: LD_INT 7
2619: ARRAY
2620: ST_TO_ADDR
// end else
2621: GO 2647
// begin bc_type := b_lab ;
2623: LD_ADDR_OWVAR 42
2627: PUSH
2628: LD_INT 6
2630: ST_TO_ADDR
// bc_kind1 := b_lab_basic ;
2631: LD_ADDR_OWVAR 44
2635: PUSH
2636: LD_INT 9
2638: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2639: LD_ADDR_OWVAR 45
2643: PUSH
2644: LD_INT 9
2646: ST_TO_ADDR
// end ; end ; building := CreateAndPlaceBuildingXYD ( buildings [ i ] [ 3 ] , buildings [ i ] [ 4 ] , buildings [ i ] [ 5 ] ) ;
2647: LD_ADDR_VAR 0 4
2651: PUSH
2652: LD_VAR 0 5
2656: PUSH
2657: LD_VAR 0 2
2661: ARRAY
2662: PUSH
2663: LD_INT 3
2665: ARRAY
2666: PPUSH
2667: LD_VAR 0 5
2671: PUSH
2672: LD_VAR 0 2
2676: ARRAY
2677: PUSH
2678: LD_INT 4
2680: ARRAY
2681: PPUSH
2682: LD_VAR 0 5
2686: PUSH
2687: LD_VAR 0 2
2691: ARRAY
2692: PUSH
2693: LD_INT 5
2695: ARRAY
2696: PPUSH
2697: CALL_OW 47
2701: ST_TO_ADDR
// if GetBType ( building ) = b_bunker and buildings [ i ] [ 8 ] then
2702: LD_VAR 0 4
2706: PPUSH
2707: CALL_OW 266
2711: PUSH
2712: LD_INT 32
2714: EQUAL
2715: PUSH
2716: LD_VAR 0 5
2720: PUSH
2721: LD_VAR 0 2
2725: ARRAY
2726: PUSH
2727: LD_INT 8
2729: ARRAY
2730: AND
2731: IFFALSE 2757
// PlaceWeaponTurret ( building , buildings [ i ] [ 8 ] ) ;
2733: LD_VAR 0 4
2737: PPUSH
2738: LD_VAR 0 5
2742: PUSH
2743: LD_VAR 0 2
2747: ARRAY
2748: PUSH
2749: LD_INT 8
2751: ARRAY
2752: PPUSH
2753: CALL_OW 431
// end ;
2757: GO 2457
2759: POP
2760: POP
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
2761: LD_ADDR_VAR 0 6
2765: PUSH
2766: LD_INT 22
2768: PUSH
2769: LD_INT 1
2771: PUSH
2772: EMPTY
2773: LIST
2774: LIST
2775: PUSH
2776: LD_INT 2
2778: PUSH
2779: LD_INT 30
2781: PUSH
2782: LD_INT 6
2784: PUSH
2785: EMPTY
2786: LIST
2787: LIST
2788: PUSH
2789: LD_INT 30
2791: PUSH
2792: LD_INT 7
2794: PUSH
2795: EMPTY
2796: LIST
2797: LIST
2798: PUSH
2799: LD_INT 30
2801: PUSH
2802: LD_INT 8
2804: PUSH
2805: EMPTY
2806: LIST
2807: LIST
2808: PUSH
2809: EMPTY
2810: LIST
2811: LIST
2812: LIST
2813: LIST
2814: PUSH
2815: EMPTY
2816: LIST
2817: LIST
2818: PPUSH
2819: CALL_OW 69
2823: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) ;
2824: LD_ADDR_VAR 0 7
2828: PUSH
2829: LD_INT 22
2831: PUSH
2832: LD_INT 1
2834: PUSH
2835: EMPTY
2836: LIST
2837: LIST
2838: PUSH
2839: LD_INT 30
2841: PUSH
2842: LD_INT 0
2844: PUSH
2845: EMPTY
2846: LIST
2847: LIST
2848: PUSH
2849: EMPTY
2850: LIST
2851: LIST
2852: PPUSH
2853: CALL_OW 69
2857: ST_TO_ADDR
// if lab and tmp then
2858: LD_VAR 0 6
2862: PUSH
2863: LD_VAR 0 7
2867: AND
2868: IFFALSE 2878
// baseCorrect := 1 ;
2870: LD_ADDR_EXP 19
2874: PUSH
2875: LD_INT 1
2877: ST_TO_ADDR
// if not baseCorrect then
2878: LD_EXP 19
2882: NOT
2883: IFFALSE 3298
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
2885: LD_ADDR_VAR 0 2
2889: PUSH
2890: LD_INT 22
2892: PUSH
2893: LD_INT 1
2895: PUSH
2896: EMPTY
2897: LIST
2898: LIST
2899: PUSH
2900: LD_INT 21
2902: PUSH
2903: LD_INT 3
2905: PUSH
2906: EMPTY
2907: LIST
2908: LIST
2909: PUSH
2910: EMPTY
2911: LIST
2912: LIST
2913: PPUSH
2914: CALL_OW 69
2918: PUSH
2919: FOR_IN
2920: IFFALSE 2933
// RemoveUnit ( i ) ;
2922: LD_VAR 0 2
2926: PPUSH
2927: CALL_OW 64
2931: GO 2919
2933: POP
2934: POP
// uc_nation := 1 ;
2935: LD_ADDR_OWVAR 21
2939: PUSH
2940: LD_INT 1
2942: ST_TO_ADDR
// uc_side := 1 ;
2943: LD_ADDR_OWVAR 20
2947: PUSH
2948: LD_INT 1
2950: ST_TO_ADDR
// bc_level := 5 ;
2951: LD_ADDR_OWVAR 43
2955: PUSH
2956: LD_INT 5
2958: ST_TO_ADDR
// bc_type := b_depot ;
2959: LD_ADDR_OWVAR 42
2963: PUSH
2964: LD_INT 0
2966: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 50 , 22 , 0 ) ;
2967: LD_INT 50
2969: PPUSH
2970: LD_INT 22
2972: PPUSH
2973: LD_INT 0
2975: PPUSH
2976: CALL_OW 47
// bc_type = b_bunker ;
2980: LD_ADDR_OWVAR 42
2984: PUSH
2985: LD_INT 32
2987: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( 68 , 24 , 4 ) ;
2988: LD_ADDR_VAR 0 4
2992: PUSH
2993: LD_INT 68
2995: PPUSH
2996: LD_INT 24
2998: PPUSH
2999: LD_INT 4
3001: PPUSH
3002: CALL_OW 47
3006: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ rand ( 1 , 2 ) ] ) ;
3007: LD_VAR 0 4
3011: PPUSH
3012: LD_INT 4
3014: PUSH
3015: LD_INT 11
3017: PUSH
3018: EMPTY
3019: LIST
3020: LIST
3021: PUSH
3022: LD_INT 1
3024: PPUSH
3025: LD_INT 2
3027: PPUSH
3028: CALL_OW 12
3032: ARRAY
3033: PPUSH
3034: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 71 , 34 , 4 ) ;
3038: LD_ADDR_VAR 0 4
3042: PUSH
3043: LD_INT 71
3045: PPUSH
3046: LD_INT 34
3048: PPUSH
3049: LD_INT 4
3051: PPUSH
3052: CALL_OW 47
3056: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ rand ( 1 , 2 ) ] ) ;
3057: LD_VAR 0 4
3061: PPUSH
3062: LD_INT 4
3064: PUSH
3065: LD_INT 11
3067: PUSH
3068: EMPTY
3069: LIST
3070: LIST
3071: PUSH
3072: LD_INT 1
3074: PPUSH
3075: LD_INT 2
3077: PPUSH
3078: CALL_OW 12
3082: ARRAY
3083: PPUSH
3084: CALL_OW 431
// bc_type := b_breastwork ;
3088: LD_ADDR_OWVAR 42
3092: PUSH
3093: LD_INT 31
3095: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 51 , 7 , 3 ) ;
3096: LD_INT 51
3098: PPUSH
3099: LD_INT 7
3101: PPUSH
3102: LD_INT 3
3104: PPUSH
3105: CALL_OW 47
// bc_type := b_oil_mine ;
3109: LD_ADDR_OWVAR 42
3113: PUSH
3114: LD_INT 29
3116: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 68 , 40 , 1 ) ;
3117: LD_INT 68
3119: PPUSH
3120: LD_INT 40
3122: PPUSH
3123: LD_INT 1
3125: PPUSH
3126: CALL_OW 47
// bc_type := b_factory ;
3130: LD_ADDR_OWVAR 42
3134: PUSH
3135: LD_INT 3
3137: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 20 , 2 ) ;
3138: LD_INT 38
3140: PPUSH
3141: LD_INT 20
3143: PPUSH
3144: LD_INT 2
3146: PPUSH
3147: CALL_OW 47
// bc_type := b_ext_noncombat ;
3151: LD_ADDR_OWVAR 42
3155: PUSH
3156: LD_INT 19
3158: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 24 , 2 ) ;
3159: LD_INT 38
3161: PPUSH
3162: LD_INT 24
3164: PPUSH
3165: LD_INT 2
3167: PPUSH
3168: CALL_OW 47
// bc_type := b_ext_radar ;
3172: LD_ADDR_OWVAR 42
3176: PUSH
3177: LD_INT 20
3179: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 35 , 20 , 1 ) ;
3180: LD_INT 35
3182: PPUSH
3183: LD_INT 20
3185: PPUSH
3186: LD_INT 1
3188: PPUSH
3189: CALL_OW 47
// bc_type := b_armoury ;
3193: LD_ADDR_OWVAR 42
3197: PUSH
3198: LD_INT 4
3200: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 33 , 28 , 1 ) ;
3201: LD_INT 33
3203: PPUSH
3204: LD_INT 28
3206: PPUSH
3207: LD_INT 1
3209: PPUSH
3210: CALL_OW 47
// bc_type := b_solar_power ;
3214: LD_ADDR_OWVAR 42
3218: PUSH
3219: LD_INT 27
3221: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 46 , 12 , 1 ) ;
3222: LD_INT 46
3224: PPUSH
3225: LD_INT 12
3227: PPUSH
3228: LD_INT 1
3230: PPUSH
3231: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 48 , 11 , 2 ) ;
3235: LD_INT 48
3237: PPUSH
3238: LD_INT 11
3240: PPUSH
3241: LD_INT 2
3243: PPUSH
3244: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 35 , 12 , 3 ) ;
3248: LD_INT 35
3250: PPUSH
3251: LD_INT 12
3253: PPUSH
3254: LD_INT 3
3256: PPUSH
3257: CALL_OW 47
// bc_type := b_lab_half ;
3261: LD_ADDR_OWVAR 42
3265: PUSH
3266: LD_INT 7
3268: ST_TO_ADDR
// bc_kind1 := b_lab_opto ;
3269: LD_ADDR_OWVAR 44
3273: PUSH
3274: LD_INT 15
3276: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
3277: LD_ADDR_OWVAR 45
3281: PUSH
3282: LD_INT 9
3284: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 42 , 15 , 2 ) ;
3285: LD_INT 42
3287: PPUSH
3288: LD_INT 15
3290: PPUSH
3291: LD_INT 2
3293: PPUSH
3294: CALL_OW 47
// end ; end ; end_of_file
3298: LD_VAR 0 1
3302: RET
// export function Action ; var i , j , tmp ; begin
3303: LD_INT 0
3305: PPUSH
3306: PPUSH
3307: PPUSH
3308: PPUSH
// InGameOn ;
3309: CALL_OW 8
// if lab then
3313: LD_EXP 21
3317: IFFALSE 3334
// CenterNowOnUnits ( lab [ 1 ] ) else
3319: LD_EXP 21
3323: PUSH
3324: LD_INT 1
3326: ARRAY
3327: PPUSH
3328: CALL_OW 87
3332: GO 3343
// CenterOnUnits ( JMM ) ;
3334: LD_EXP 1
3338: PPUSH
3339: CALL_OW 85
// if IsOK ( Denis ) then
3343: LD_EXP 3
3347: PPUSH
3348: CALL_OW 302
3352: IFFALSE 3380
// begin SetTech ( tech_radar , 1 , state_researched ) ;
3354: LD_INT 6
3356: PPUSH
3357: LD_INT 1
3359: PPUSH
3360: LD_INT 2
3362: PPUSH
3363: CALL_OW 322
// SetRestrict ( b_ext_radar , 1 , true ) ;
3367: LD_INT 20
3369: PPUSH
3370: LD_INT 1
3372: PPUSH
3373: LD_INT 1
3375: PPUSH
3376: CALL_OW 324
// end ; CenterNowOnUnits ( JMM ) ;
3380: LD_EXP 1
3384: PPUSH
3385: CALL_OW 87
// ComTurnUnit ( JMM , DeltaDoctor ) ;
3389: LD_EXP 1
3393: PPUSH
3394: LD_EXP 16
3398: PPUSH
3399: CALL_OW 119
// repeat wait ( 0 0$1 ) ;
3403: LD_INT 35
3405: PPUSH
3406: CALL_OW 67
// ComMoveUnit ( DeltaDoctor , JMM ) ;
3410: LD_EXP 16
3414: PPUSH
3415: LD_EXP 1
3419: PPUSH
3420: CALL_OW 112
// until GetDistUnits ( JMM , DeltaDoctor ) < 5 ;
3424: LD_EXP 1
3428: PPUSH
3429: LD_EXP 16
3433: PPUSH
3434: CALL_OW 296
3438: PUSH
3439: LD_INT 5
3441: LESS
3442: IFFALSE 3403
// ComTurnUnit ( DeltaDoctor , JMM ) ;
3444: LD_EXP 16
3448: PPUSH
3449: LD_EXP 1
3453: PPUSH
3454: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
3458: LD_EXP 1
3462: PPUSH
3463: LD_STRING D1-JMM-1
3465: PPUSH
3466: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-1 ) ;
3470: LD_EXP 16
3474: PPUSH
3475: LD_STRING D1-Sci-1
3477: PPUSH
3478: CALL_OW 88
// ComEnterUnit ( [ JMM , DeltaDoctor , Denis ] , lab [ 1 ] ) ;
3482: LD_EXP 1
3486: PUSH
3487: LD_EXP 16
3491: PUSH
3492: LD_EXP 3
3496: PUSH
3497: EMPTY
3498: LIST
3499: LIST
3500: LIST
3501: PPUSH
3502: LD_EXP 21
3506: PUSH
3507: LD_INT 1
3509: ARRAY
3510: PPUSH
3511: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
3515: LD_INT 35
3517: PPUSH
3518: CALL_OW 67
// until IsInUnit ( JMM ) and IsInUnit ( DeltaDoctor ) ;
3522: LD_EXP 1
3526: PPUSH
3527: CALL_OW 310
3531: PUSH
3532: LD_EXP 16
3536: PPUSH
3537: CALL_OW 310
3541: AND
3542: IFFALSE 3515
// CenterNowOnUnits ( lab [ 1 ] ) ;
3544: LD_EXP 21
3548: PUSH
3549: LD_INT 1
3551: ARRAY
3552: PPUSH
3553: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
3557: LD_EXP 1
3561: PPUSH
3562: LD_STRING D1-JMM-2
3564: PPUSH
3565: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-2 ) ;
3569: LD_EXP 16
3573: PPUSH
3574: LD_STRING D1-Sci-2
3576: PPUSH
3577: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
3581: LD_EXP 1
3585: PPUSH
3586: LD_STRING D1-JMM-3
3588: PPUSH
3589: CALL_OW 88
// if IsOK ( Denis ) then
3593: LD_EXP 3
3597: PPUSH
3598: CALL_OW 302
3602: IFFALSE 3618
// Say ( DeltaDoctor , D1-Sci-3 ) else
3604: LD_EXP 16
3608: PPUSH
3609: LD_STRING D1-Sci-3
3611: PPUSH
3612: CALL_OW 88
3616: GO 3630
// Say ( DeltaDoctor , D1-Sci-3a ) ;
3618: LD_EXP 16
3622: PPUSH
3623: LD_STRING D1-Sci-3a
3625: PPUSH
3626: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
3630: LD_EXP 1
3634: PPUSH
3635: LD_STRING D1-JMM-4
3637: PPUSH
3638: CALL_OW 88
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
3642: LD_ADDR_VAR 0 4
3646: PUSH
3647: LD_INT 22
3649: PUSH
3650: LD_INT 1
3652: PUSH
3653: EMPTY
3654: LIST
3655: LIST
3656: PUSH
3657: LD_INT 25
3659: PUSH
3660: LD_INT 4
3662: PUSH
3663: EMPTY
3664: LIST
3665: LIST
3666: PUSH
3667: LD_INT 3
3669: PUSH
3670: LD_INT 54
3672: PUSH
3673: EMPTY
3674: LIST
3675: PUSH
3676: EMPTY
3677: LIST
3678: LIST
3679: PUSH
3680: EMPTY
3681: LIST
3682: LIST
3683: LIST
3684: PPUSH
3685: CALL_OW 69
3689: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 0 ] ) do
3690: LD_ADDR_VAR 0 2
3694: PUSH
3695: LD_INT 22
3697: PUSH
3698: LD_INT 0
3700: PUSH
3701: EMPTY
3702: LIST
3703: LIST
3704: PPUSH
3705: CALL_OW 69
3709: PUSH
3710: FOR_IN
3711: IFFALSE 3761
// for j in tmp do
3713: LD_ADDR_VAR 0 3
3717: PUSH
3718: LD_VAR 0 4
3722: PUSH
3723: FOR_IN
3724: IFFALSE 3757
// AddComTameXY ( j , GetX ( i ) , GetY ( i ) ) ;
3726: LD_VAR 0 3
3730: PPUSH
3731: LD_VAR 0 2
3735: PPUSH
3736: CALL_OW 250
3740: PPUSH
3741: LD_VAR 0 2
3745: PPUSH
3746: CALL_OW 251
3750: PPUSH
3751: CALL_OW 191
3755: GO 3723
3757: POP
3758: POP
3759: GO 3710
3761: POP
3762: POP
// Say ( DeltaDoctor , D1-Sci-4 ) ;
3763: LD_EXP 16
3767: PPUSH
3768: LD_STRING D1-Sci-4
3770: PPUSH
3771: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
3775: LD_EXP 1
3779: PPUSH
3780: LD_STRING D1-JMM-5
3782: PPUSH
3783: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-5 ) ;
3787: LD_EXP 16
3791: PPUSH
3792: LD_STRING D1-Sci-5
3794: PPUSH
3795: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
3799: LD_EXP 1
3803: PPUSH
3804: LD_STRING D1-JMM-6
3806: PPUSH
3807: CALL_OW 88
// SayRadio ( Harisson , D1-Har-6 ) ;
3811: LD_EXP 17
3815: PPUSH
3816: LD_STRING D1-Har-6
3818: PPUSH
3819: CALL_OW 94
// Say ( JMM , D1-JMM-7 ) ;
3823: LD_EXP 1
3827: PPUSH
3828: LD_STRING D1-JMM-7
3830: PPUSH
3831: CALL_OW 88
// SayRadio ( Harisson , D1-Har-7 ) ;
3835: LD_EXP 17
3839: PPUSH
3840: LD_STRING D1-Har-7
3842: PPUSH
3843: CALL_OW 94
// if IsOK ( Denis ) then
3847: LD_EXP 3
3851: PPUSH
3852: CALL_OW 302
3856: IFFALSE 3870
// Say ( JMM , D1-JMM-8 ) ;
3858: LD_EXP 1
3862: PPUSH
3863: LD_STRING D1-JMM-8
3865: PPUSH
3866: CALL_OW 88
// Say ( JMM , D1-JMM-8a ) ;
3870: LD_EXP 1
3874: PPUSH
3875: LD_STRING D1-JMM-8a
3877: PPUSH
3878: CALL_OW 88
// SayRadio ( Harisson , D1-Har-8 ) ;
3882: LD_EXP 17
3886: PPUSH
3887: LD_STRING D1-Har-8
3889: PPUSH
3890: CALL_OW 94
// Say ( JMM , D1-JMM-9 ) ;
3894: LD_EXP 1
3898: PPUSH
3899: LD_STRING D1-JMM-9
3901: PPUSH
3902: CALL_OW 88
// SayRadio ( Harisson , D1-Har-9 ) ;
3906: LD_EXP 17
3910: PPUSH
3911: LD_STRING D1-Har-9
3913: PPUSH
3914: CALL_OW 94
// Say ( JMM , D1-JMM-10 ) ;
3918: LD_EXP 1
3922: PPUSH
3923: LD_STRING D1-JMM-10
3925: PPUSH
3926: CALL_OW 88
// if IsOK ( Denis ) then
3930: LD_EXP 3
3934: PPUSH
3935: CALL_OW 302
3939: IFFALSE 3953
// Say ( JMM , D1-JMM-10a ) ;
3941: LD_EXP 1
3945: PPUSH
3946: LD_STRING D1-JMM-10a
3948: PPUSH
3949: CALL_OW 88
// SelectDeltaCharacters ;
3953: CALL 4437 0 0
// SetResourceType ( GetBase ( lab [ 1 ] ) , 1 , 150 ) ;
3957: LD_EXP 21
3961: PUSH
3962: LD_INT 1
3964: ARRAY
3965: PPUSH
3966: CALL_OW 274
3970: PPUSH
3971: LD_INT 1
3973: PPUSH
3974: LD_INT 150
3976: PPUSH
3977: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) then
3981: LD_INT 22
3983: PUSH
3984: LD_INT 1
3986: PUSH
3987: EMPTY
3988: LIST
3989: LIST
3990: PUSH
3991: LD_INT 30
3993: PUSH
3994: LD_INT 29
3996: PUSH
3997: EMPTY
3998: LIST
3999: LIST
4000: PUSH
4001: EMPTY
4002: LIST
4003: LIST
4004: PPUSH
4005: CALL_OW 69
4009: IFFALSE 4035
// SetResourceType ( GetBase ( lab [ 1 ] ) , 2 , 300 ) ;
4011: LD_EXP 21
4015: PUSH
4016: LD_INT 1
4018: ARRAY
4019: PPUSH
4020: CALL_OW 274
4024: PPUSH
4025: LD_INT 2
4027: PPUSH
4028: LD_INT 300
4030: PPUSH
4031: CALL_OW 277
// InGameOff ;
4035: CALL_OW 9
// Query ( Q1 ) ;
4039: LD_STRING Q1
4041: PPUSH
4042: CALL_OW 97
// SetAreaMapShow ( ExitArea , 1 ) ;
4046: LD_INT 3
4048: PPUSH
4049: LD_INT 1
4051: PPUSH
4052: CALL_OW 424
// if IsInUnit ( JMM ) then
4056: LD_EXP 1
4060: PPUSH
4061: CALL_OW 310
4065: IFFALSE 4076
// ComExitBuilding ( JMM ) ;
4067: LD_EXP 1
4071: PPUSH
4072: CALL_OW 122
// end ;
4076: LD_VAR 0 1
4080: RET
// every 0 0$1 trigger FilterUnitsExceptArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do var i , cargoType ;
4081: LD_INT 3
4083: PPUSH
4084: LD_INT 22
4086: PUSH
4087: LD_INT 1
4089: PUSH
4090: EMPTY
4091: LIST
4092: LIST
4093: PUSH
4094: LD_INT 21
4096: PUSH
4097: LD_INT 1
4099: PUSH
4100: EMPTY
4101: LIST
4102: LIST
4103: PUSH
4104: EMPTY
4105: LIST
4106: LIST
4107: PPUSH
4108: CALL_OW 71
4112: PUSH
4113: LD_INT 0
4115: EQUAL
4116: IFFALSE 4434
4118: GO 4120
4120: DISABLE
4121: LD_INT 0
4123: PPUSH
4124: PPUSH
// begin SaveDeltaCharacters ;
4125: CALL 4809 0 0
// if FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) then
4129: LD_INT 3
4131: PPUSH
4132: LD_INT 21
4134: PUSH
4135: LD_INT 2
4137: PUSH
4138: EMPTY
4139: LIST
4140: LIST
4141: PUSH
4142: LD_INT 3
4144: PUSH
4145: LD_INT 58
4147: PUSH
4148: EMPTY
4149: LIST
4150: PUSH
4151: EMPTY
4152: LIST
4153: LIST
4154: PUSH
4155: EMPTY
4156: LIST
4157: LIST
4158: PPUSH
4159: CALL_OW 70
4163: IFFALSE 4420
// begin for i in FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) do
4165: LD_ADDR_VAR 0 1
4169: PUSH
4170: LD_INT 3
4172: PPUSH
4173: LD_INT 21
4175: PUSH
4176: LD_INT 2
4178: PUSH
4179: EMPTY
4180: LIST
4181: LIST
4182: PUSH
4183: LD_INT 3
4185: PUSH
4186: LD_INT 58
4188: PUSH
4189: EMPTY
4190: LIST
4191: PUSH
4192: EMPTY
4193: LIST
4194: LIST
4195: PUSH
4196: EMPTY
4197: LIST
4198: LIST
4199: PPUSH
4200: CALL_OW 70
4204: PUSH
4205: FOR_IN
4206: IFFALSE 4418
// begin cargoType := GetCargoType ( i ) ;
4208: LD_ADDR_VAR 0 2
4212: PUSH
4213: LD_VAR 0 1
4217: PPUSH
4218: CALL_OW 288
4222: ST_TO_ADDR
// if GetWeapon ( i ) = us_cargo_bay then
4223: LD_VAR 0 1
4227: PPUSH
4228: CALL_OW 264
4232: PUSH
4233: LD_INT 12
4235: EQUAL
4236: IFFALSE 4333
// yourVehicles := yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , cargoType , GetCargo ( i , cargoType ) ] ] else
4238: LD_ADDR_EXP 15
4242: PUSH
4243: LD_EXP 15
4247: PUSH
4248: LD_VAR 0 1
4252: PPUSH
4253: CALL_OW 248
4257: PUSH
4258: LD_VAR 0 1
4262: PPUSH
4263: CALL_OW 265
4267: PUSH
4268: LD_VAR 0 1
4272: PPUSH
4273: CALL_OW 262
4277: PUSH
4278: LD_VAR 0 1
4282: PPUSH
4283: CALL_OW 263
4287: PUSH
4288: LD_VAR 0 1
4292: PPUSH
4293: CALL_OW 264
4297: PUSH
4298: LD_VAR 0 2
4302: PUSH
4303: LD_VAR 0 1
4307: PPUSH
4308: LD_VAR 0 2
4312: PPUSH
4313: CALL_OW 289
4317: PUSH
4318: EMPTY
4319: LIST
4320: LIST
4321: LIST
4322: LIST
4323: LIST
4324: LIST
4325: LIST
4326: PUSH
4327: EMPTY
4328: LIST
4329: ADD
4330: ST_TO_ADDR
4331: GO 4404
// yourVehicles := yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ] ;
4333: LD_ADDR_EXP 15
4337: PUSH
4338: LD_EXP 15
4342: PUSH
4343: LD_VAR 0 1
4347: PPUSH
4348: CALL_OW 248
4352: PUSH
4353: LD_VAR 0 1
4357: PPUSH
4358: CALL_OW 265
4362: PUSH
4363: LD_VAR 0 1
4367: PPUSH
4368: CALL_OW 262
4372: PUSH
4373: LD_VAR 0 1
4377: PPUSH
4378: CALL_OW 263
4382: PUSH
4383: LD_VAR 0 1
4387: PPUSH
4388: CALL_OW 264
4392: PUSH
4393: EMPTY
4394: LIST
4395: LIST
4396: LIST
4397: LIST
4398: LIST
4399: PUSH
4400: EMPTY
4401: LIST
4402: ADD
4403: ST_TO_ADDR
// SaveVariable ( yourVehicles , 06_VehiclesIn06_1 ) ;
4404: LD_EXP 15
4408: PPUSH
4409: LD_STRING 06_VehiclesIn06_1
4411: PPUSH
4412: CALL_OW 39
// end ;
4416: GO 4205
4418: POP
4419: POP
// end ; SaveCargos ;
4420: CALL 5589 0 0
// ChangeMap ( 6 , %_cont ) ;
4424: LD_INT 6
4426: PPUSH
4427: LD_STRING %_cont
4429: PPUSH
4430: CALL_OW 340
// end ; end_of_file
4434: PPOPN 2
4436: END
// export function SelectDeltaCharacters ; var i , yourPeople ; begin
4437: LD_INT 0
4439: PPUSH
4440: PPUSH
4441: PPUSH
// selectedPeople := [ ] ;
4442: LD_ADDR_EXP 18
4446: PUSH
4447: EMPTY
4448: ST_TO_ADDR
// yourPeople := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , DeltaDoctor , Denis ] ;
4449: LD_ADDR_VAR 0 3
4453: PUSH
4454: LD_INT 22
4456: PUSH
4457: LD_INT 1
4459: PUSH
4460: EMPTY
4461: LIST
4462: LIST
4463: PUSH
4464: LD_INT 21
4466: PUSH
4467: LD_INT 1
4469: PUSH
4470: EMPTY
4471: LIST
4472: LIST
4473: PUSH
4474: LD_INT 2
4476: PUSH
4477: LD_INT 25
4479: PUSH
4480: LD_INT 1
4482: PUSH
4483: EMPTY
4484: LIST
4485: LIST
4486: PUSH
4487: LD_INT 25
4489: PUSH
4490: LD_INT 2
4492: PUSH
4493: EMPTY
4494: LIST
4495: LIST
4496: PUSH
4497: LD_INT 25
4499: PUSH
4500: LD_INT 3
4502: PUSH
4503: EMPTY
4504: LIST
4505: LIST
4506: PUSH
4507: LD_INT 25
4509: PUSH
4510: LD_INT 4
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: PUSH
4517: EMPTY
4518: LIST
4519: LIST
4520: LIST
4521: LIST
4522: LIST
4523: PUSH
4524: EMPTY
4525: LIST
4526: LIST
4527: LIST
4528: PPUSH
4529: CALL_OW 69
4533: PUSH
4534: LD_EXP 1
4538: PUSH
4539: LD_EXP 16
4543: PUSH
4544: LD_EXP 3
4548: PUSH
4549: EMPTY
4550: LIST
4551: LIST
4552: LIST
4553: DIFF
4554: ST_TO_ADDR
// selectedPeople := CharacterSelection ( text , 5 , 5 , [ sel_change_class , JMM , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ yourPeople ^ [ sel_dont_change_class , sel_not_changeable , Denis , DeltaDoctor ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
4555: LD_ADDR_EXP 18
4559: PUSH
4560: LD_STRING text
4562: PPUSH
4563: LD_INT 5
4565: PPUSH
4566: LD_INT 5
4568: PPUSH
4569: LD_INT -5
4571: PUSH
4572: LD_EXP 1
4576: PUSH
4577: LD_INT -6
4579: PUSH
4580: LD_INT -2
4582: PUSH
4583: LD_INT -3
4585: PUSH
4586: LD_INT -5
4588: PUSH
4589: EMPTY
4590: LIST
4591: LIST
4592: LIST
4593: LIST
4594: LIST
4595: LIST
4596: PUSH
4597: LD_VAR 0 3
4601: ADD
4602: PUSH
4603: LD_INT -6
4605: PUSH
4606: LD_INT -4
4608: PUSH
4609: LD_EXP 3
4613: PUSH
4614: LD_EXP 16
4618: PUSH
4619: EMPTY
4620: LIST
4621: LIST
4622: LIST
4623: LIST
4624: ADD
4625: PPUSH
4626: LD_INT 1
4628: PUSH
4629: LD_INT 3
4631: PUSH
4632: LD_INT 2
4634: PUSH
4635: LD_INT 1
4637: PUSH
4638: EMPTY
4639: LIST
4640: LIST
4641: PUSH
4642: LD_INT 4
4644: PUSH
4645: EMPTY
4646: LIST
4647: LIST
4648: LIST
4649: LIST
4650: PPUSH
4651: CALL_OW 42
4655: ST_TO_ADDR
// ComStop ( selectedPeople ) ;
4656: LD_EXP 18
4660: PPUSH
4661: CALL_OW 141
// SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 4 ) ;
4665: LD_INT 22
4667: PUSH
4668: LD_INT 1
4670: PUSH
4671: EMPTY
4672: LIST
4673: LIST
4674: PUSH
4675: LD_INT 21
4677: PUSH
4678: LD_INT 1
4680: PUSH
4681: EMPTY
4682: LIST
4683: LIST
4684: PUSH
4685: EMPTY
4686: LIST
4687: LIST
4688: PPUSH
4689: CALL_OW 69
4693: PPUSH
4694: LD_INT 4
4696: PPUSH
4697: CALL_OW 235
// for i in selectedPeople do
4701: LD_ADDR_VAR 0 2
4705: PUSH
4706: LD_EXP 18
4710: PUSH
4711: FOR_IN
4712: IFFALSE 4728
// SetSide ( i , 1 ) ;
4714: LD_VAR 0 2
4718: PPUSH
4719: LD_INT 1
4721: PPUSH
4722: CALL_OW 235
4726: GO 4711
4728: POP
4729: POP
// for i in yourApemans do
4730: LD_ADDR_VAR 0 2
4734: PUSH
4735: LD_EXP 14
4739: PUSH
4740: FOR_IN
4741: IFFALSE 4757
// SetSide ( i , 1 ) ;
4743: LD_VAR 0 2
4747: PPUSH
4748: LD_INT 1
4750: PPUSH
4751: CALL_OW 235
4755: GO 4740
4757: POP
4758: POP
// if Mike then
4759: LD_EXP 10
4763: IFFALSE 4777
// SetSide ( Mike , 1 ) ;
4765: LD_EXP 10
4769: PPUSH
4770: LD_INT 1
4772: PPUSH
4773: CALL_OW 235
// SetSide ( JMM , 1 ) ;
4777: LD_EXP 1
4781: PPUSH
4782: LD_INT 1
4784: PPUSH
4785: CALL_OW 235
// SetSkill ( yourApemans , 2 , 3 ) ;
4789: LD_EXP 14
4793: PPUSH
4794: LD_INT 2
4796: PPUSH
4797: LD_INT 3
4799: PPUSH
4800: CALL_OW 237
// end ;
4804: LD_VAR 0 1
4808: RET
// export function SaveDeltaCharacters ; begin
4809: LD_INT 0
4811: PPUSH
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
4812: LD_EXP 1
4816: PPUSH
4817: LD_EXP 23
4821: PUSH
4822: LD_STRING JMM
4824: STR
4825: PPUSH
4826: CALL_OW 38
// SaveCharacters ( DeltaDoctor , DeltaDoctor ) ;
4830: LD_EXP 16
4834: PPUSH
4835: LD_STRING DeltaDoctor
4837: PPUSH
4838: CALL_OW 38
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
4842: LD_EXP 3
4846: PPUSH
4847: LD_EXP 23
4851: PUSH
4852: LD_STRING Denis
4854: STR
4855: PPUSH
4856: CALL_OW 38
// if Lisa in selectedPeople then
4860: LD_EXP 4
4864: PUSH
4865: LD_EXP 18
4869: IN
4870: IFFALSE 4902
// begin SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
4872: LD_EXP 4
4876: PPUSH
4877: LD_EXP 23
4881: PUSH
4882: LD_STRING Lisa
4884: STR
4885: PPUSH
4886: CALL_OW 38
// SaveVariable ( 1 , LisaIn06 ) ;
4890: LD_INT 1
4892: PPUSH
4893: LD_STRING LisaIn06
4895: PPUSH
4896: CALL_OW 39
// end else
4900: GO 4923
// if IsOk ( Lisa ) then
4902: LD_EXP 4
4906: PPUSH
4907: CALL_OW 302
4911: IFFALSE 4923
// SaveVariable ( 1 , LisaStayInDelta ) ;
4913: LD_INT 1
4915: PPUSH
4916: LD_STRING LisaStayInDelta
4918: PPUSH
4919: CALL_OW 39
// if Bobby in selectedPeople then
4923: LD_EXP 6
4927: PUSH
4928: LD_EXP 18
4932: IN
4933: IFFALSE 4965
// begin SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
4935: LD_EXP 6
4939: PPUSH
4940: LD_EXP 23
4944: PUSH
4945: LD_STRING Bobby
4947: STR
4948: PPUSH
4949: CALL_OW 38
// SaveVariable ( 1 , BobbyIn06 ) ;
4953: LD_INT 1
4955: PPUSH
4956: LD_STRING BobbyIn06
4958: PPUSH
4959: CALL_OW 39
// end else
4963: GO 4986
// if IsOk ( Bobby ) then
4965: LD_EXP 6
4969: PPUSH
4970: CALL_OW 302
4974: IFFALSE 4986
// SaveVariable ( 1 , BobbyStayInDelta ) ;
4976: LD_INT 1
4978: PPUSH
4979: LD_STRING BobbyStayInDelta
4981: PPUSH
4982: CALL_OW 39
// if Cyrus in selectedPeople then
4986: LD_EXP 7
4990: PUSH
4991: LD_EXP 18
4995: IN
4996: IFFALSE 5028
// begin SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
4998: LD_EXP 7
5002: PPUSH
5003: LD_EXP 23
5007: PUSH
5008: LD_STRING Cyrus
5010: STR
5011: PPUSH
5012: CALL_OW 38
// SaveVariable ( 1 , CyrusIn06 ) ;
5016: LD_INT 1
5018: PPUSH
5019: LD_STRING CyrusIn06
5021: PPUSH
5022: CALL_OW 39
// end else
5026: GO 5049
// if IsOk ( Cyrus ) then
5028: LD_EXP 7
5032: PPUSH
5033: CALL_OW 302
5037: IFFALSE 5049
// SaveVariable ( 1 , CyrusStayInDelta ) ;
5039: LD_INT 1
5041: PPUSH
5042: LD_STRING CyrusStayInDelta
5044: PPUSH
5045: CALL_OW 39
// if Frank in selectedPeople then
5049: LD_EXP 5
5053: PUSH
5054: LD_EXP 18
5058: IN
5059: IFFALSE 5091
// begin SaveCharacters ( Frank , mission_prefix & Frank ) ;
5061: LD_EXP 5
5065: PPUSH
5066: LD_EXP 23
5070: PUSH
5071: LD_STRING Frank
5073: STR
5074: PPUSH
5075: CALL_OW 38
// SaveVariable ( 1 , FrankIn06 ) ;
5079: LD_INT 1
5081: PPUSH
5082: LD_STRING FrankIn06
5084: PPUSH
5085: CALL_OW 39
// end else
5089: GO 5112
// if IsOk ( Frank ) then
5091: LD_EXP 5
5095: PPUSH
5096: CALL_OW 302
5100: IFFALSE 5112
// SaveVariable ( 1 , FrankStayInDelta ) ;
5102: LD_INT 1
5104: PPUSH
5105: LD_STRING FrankStayInDelta
5107: PPUSH
5108: CALL_OW 39
// if Brown in selectedPeople then
5112: LD_EXP 8
5116: PUSH
5117: LD_EXP 18
5121: IN
5122: IFFALSE 5154
// begin SaveCharacters ( Brown , mission_prefix & Brown ) ;
5124: LD_EXP 8
5128: PPUSH
5129: LD_EXP 23
5133: PUSH
5134: LD_STRING Brown
5136: STR
5137: PPUSH
5138: CALL_OW 38
// SaveVariable ( 1 , BrownIn06 ) ;
5142: LD_INT 1
5144: PPUSH
5145: LD_STRING BrownIn06
5147: PPUSH
5148: CALL_OW 39
// end else
5152: GO 5175
// if IsOk ( Brown ) then
5154: LD_EXP 8
5158: PPUSH
5159: CALL_OW 302
5163: IFFALSE 5175
// SaveVariable ( 1 , BrownStayInDelta ) ;
5165: LD_INT 1
5167: PPUSH
5168: LD_STRING BrownStayInDelta
5170: PPUSH
5171: CALL_OW 39
// if Donaldson in selectedPeople then
5175: LD_EXP 9
5179: PUSH
5180: LD_EXP 18
5184: IN
5185: IFFALSE 5217
// begin SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
5187: LD_EXP 9
5191: PPUSH
5192: LD_EXP 23
5196: PUSH
5197: LD_STRING Donaldson
5199: STR
5200: PPUSH
5201: CALL_OW 38
// SaveVariable ( 1 , DonaldsonIn06 ) ;
5205: LD_INT 1
5207: PPUSH
5208: LD_STRING DonaldsonIn06
5210: PPUSH
5211: CALL_OW 39
// end else
5215: GO 5238
// if IsOk ( Donaldson ) then
5217: LD_EXP 9
5221: PPUSH
5222: CALL_OW 302
5226: IFFALSE 5238
// SaveVariable ( 1 , DonaldsonStayInDelta ) ;
5228: LD_INT 1
5230: PPUSH
5231: LD_STRING DonaldsonStayInDelta
5233: PPUSH
5234: CALL_OW 39
// if Gladstone in selectedPeople then
5238: LD_EXP 2
5242: PUSH
5243: LD_EXP 18
5247: IN
5248: IFFALSE 5280
// begin SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
5250: LD_EXP 2
5254: PPUSH
5255: LD_EXP 23
5259: PUSH
5260: LD_STRING Gladstone
5262: STR
5263: PPUSH
5264: CALL_OW 38
// SaveVariable ( 1 , GladstoneIn06 ) ;
5268: LD_INT 1
5270: PPUSH
5271: LD_STRING GladstoneIn06
5273: PPUSH
5274: CALL_OW 39
// end else
5278: GO 5301
// if IsOk ( Gladstone ) then
5280: LD_EXP 2
5284: PPUSH
5285: CALL_OW 302
5289: IFFALSE 5301
// SaveVariable ( 1 , GladstoneStayInDelta ) ;
5291: LD_INT 1
5293: PPUSH
5294: LD_STRING GladstoneStayInDelta
5296: PPUSH
5297: CALL_OW 39
// if Mike then
5301: LD_EXP 10
5305: IFFALSE 5325
// SaveCharacters ( Mike , mission_prefix & Mike ) ;
5307: LD_EXP 10
5311: PPUSH
5312: LD_EXP 23
5316: PUSH
5317: LD_STRING Mike
5319: STR
5320: PPUSH
5321: CALL_OW 38
// selectedPeople := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ;
5325: LD_ADDR_EXP 18
5329: PUSH
5330: LD_INT 22
5332: PUSH
5333: LD_INT 1
5335: PUSH
5336: EMPTY
5337: LIST
5338: LIST
5339: PUSH
5340: LD_INT 23
5342: PUSH
5343: LD_INT 1
5345: PUSH
5346: EMPTY
5347: LIST
5348: LIST
5349: PUSH
5350: LD_INT 21
5352: PUSH
5353: LD_INT 1
5355: PUSH
5356: EMPTY
5357: LIST
5358: LIST
5359: PUSH
5360: EMPTY
5361: LIST
5362: LIST
5363: LIST
5364: PPUSH
5365: CALL_OW 69
5369: ST_TO_ADDR
// SaveCharacters ( yourApemans , ApeIn06 ) ;
5370: LD_EXP 14
5374: PPUSH
5375: LD_STRING ApeIn06
5377: PPUSH
5378: CALL_OW 38
// SaveCharacters ( selectedPeople diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis ] , OthersIn06 ) ;
5382: LD_EXP 18
5386: PUSH
5387: LD_EXP 1
5391: PUSH
5392: LD_EXP 4
5396: PUSH
5397: LD_EXP 6
5401: PUSH
5402: LD_EXP 7
5406: PUSH
5407: LD_EXP 5
5411: PUSH
5412: LD_EXP 8
5416: PUSH
5417: LD_EXP 9
5421: PUSH
5422: LD_EXP 2
5426: PUSH
5427: LD_EXP 3
5431: PUSH
5432: EMPTY
5433: LIST
5434: LIST
5435: LIST
5436: LIST
5437: LIST
5438: LIST
5439: LIST
5440: LIST
5441: LIST
5442: DIFF
5443: PPUSH
5444: LD_STRING OthersIn06
5446: PPUSH
5447: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ DeltaDoctor , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis ] , OthersStayInDelta ) ;
5451: LD_INT 22
5453: PUSH
5454: LD_INT 4
5456: PUSH
5457: EMPTY
5458: LIST
5459: LIST
5460: PUSH
5461: LD_INT 2
5463: PUSH
5464: LD_INT 25
5466: PUSH
5467: LD_INT 1
5469: PUSH
5470: EMPTY
5471: LIST
5472: LIST
5473: PUSH
5474: LD_INT 25
5476: PUSH
5477: LD_INT 2
5479: PUSH
5480: EMPTY
5481: LIST
5482: LIST
5483: PUSH
5484: LD_INT 25
5486: PUSH
5487: LD_INT 3
5489: PUSH
5490: EMPTY
5491: LIST
5492: LIST
5493: PUSH
5494: LD_INT 25
5496: PUSH
5497: LD_INT 4
5499: PUSH
5500: EMPTY
5501: LIST
5502: LIST
5503: PUSH
5504: EMPTY
5505: LIST
5506: LIST
5507: LIST
5508: LIST
5509: LIST
5510: PUSH
5511: EMPTY
5512: LIST
5513: LIST
5514: PPUSH
5515: CALL_OW 69
5519: PUSH
5520: LD_EXP 16
5524: PUSH
5525: LD_EXP 4
5529: PUSH
5530: LD_EXP 6
5534: PUSH
5535: LD_EXP 7
5539: PUSH
5540: LD_EXP 5
5544: PUSH
5545: LD_EXP 8
5549: PUSH
5550: LD_EXP 9
5554: PUSH
5555: LD_EXP 2
5559: PUSH
5560: LD_EXP 3
5564: PUSH
5565: EMPTY
5566: LIST
5567: LIST
5568: LIST
5569: LIST
5570: LIST
5571: LIST
5572: LIST
5573: LIST
5574: LIST
5575: DIFF
5576: PPUSH
5577: LD_STRING OthersStayInDelta
5579: PPUSH
5580: CALL_OW 38
// end ;
5584: LD_VAR 0 1
5588: RET
// export function SaveCargos ; var i ; begin
5589: LD_INT 0
5591: PPUSH
5592: PPUSH
// for i in FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) do
5593: LD_ADDR_VAR 0 2
5597: PUSH
5598: LD_INT 3
5600: PPUSH
5601: LD_INT 22
5603: PUSH
5604: LD_INT 1
5606: PUSH
5607: EMPTY
5608: LIST
5609: LIST
5610: PUSH
5611: LD_INT 34
5613: PUSH
5614: LD_INT 12
5616: PUSH
5617: EMPTY
5618: LIST
5619: LIST
5620: PUSH
5621: EMPTY
5622: LIST
5623: LIST
5624: PPUSH
5625: CALL_OW 70
5629: PUSH
5630: FOR_IN
5631: IFFALSE 5659
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
5633: LD_ADDR_EXP 22
5637: PUSH
5638: LD_EXP 22
5642: PUSH
5643: LD_VAR 0 2
5647: PPUSH
5648: CALL 67668 0 1
5652: PUSH
5653: EMPTY
5654: LIST
5655: ADD
5656: ST_TO_ADDR
5657: GO 5630
5659: POP
5660: POP
// SaveVariable ( resources , 06_ResourcesInCargo06_1 ) ;
5661: LD_EXP 22
5665: PPUSH
5666: LD_STRING 06_ResourcesInCargo06_1
5668: PPUSH
5669: CALL_OW 39
// end ; end_of_file
5673: LD_VAR 0 1
5677: RET
// on Command ( comandid ) do var i ;
5678: LD_INT 0
5680: PPUSH
// begin if comandid = 65 then
5681: LD_VAR 0 1
5685: PUSH
5686: LD_INT 65
5688: EQUAL
5689: IFFALSE 5730
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
5691: LD_ADDR_VAR 0 2
5695: PUSH
5696: LD_INT 22
5698: PUSH
5699: LD_INT 1
5701: PUSH
5702: EMPTY
5703: LIST
5704: LIST
5705: PUSH
5706: EMPTY
5707: LIST
5708: PPUSH
5709: CALL_OW 69
5713: PUSH
5714: FOR_IN
5715: IFFALSE 5728
// ComStop ( i ) ;
5717: LD_VAR 0 2
5721: PPUSH
5722: CALL_OW 141
5726: GO 5714
5728: POP
5729: POP
// end ;
5730: PPOPN 2
5732: END
// on ApemanTamed ( apeman , human ) do var tmp ;
5733: LD_INT 0
5735: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
5736: LD_ADDR_VAR 0 3
5740: PUSH
5741: LD_INT 22
5743: PUSH
5744: LD_INT 1
5746: PUSH
5747: EMPTY
5748: LIST
5749: LIST
5750: PUSH
5751: LD_INT 21
5753: PUSH
5754: LD_INT 3
5756: PUSH
5757: EMPTY
5758: LIST
5759: LIST
5760: PUSH
5761: LD_INT 30
5763: PUSH
5764: LD_INT 0
5766: PUSH
5767: EMPTY
5768: LIST
5769: LIST
5770: PUSH
5771: EMPTY
5772: LIST
5773: LIST
5774: LIST
5775: PPUSH
5776: CALL_OW 69
5780: ST_TO_ADDR
// if not tmp then
5781: LD_VAR 0 3
5785: NOT
5786: IFFALSE 5790
// exit ;
5788: GO 5820
// ComEnterUnit ( apeman , tmp [ 1 ] ) ;
5790: LD_VAR 0 1
5794: PPUSH
5795: LD_VAR 0 3
5799: PUSH
5800: LD_INT 1
5802: ARRAY
5803: PPUSH
5804: CALL_OW 120
// SetSide ( apeman , 4 ) ;
5808: LD_VAR 0 1
5812: PPUSH
5813: LD_INT 4
5815: PPUSH
5816: CALL_OW 235
// end ;
5820: PPOPN 3
5822: END
// on UnitDestroyed ( un ) do begin if un = JMM then
5823: LD_VAR 0 1
5827: PUSH
5828: LD_EXP 1
5832: EQUAL
5833: IFFALSE 5842
// YouLost ( JMM ) ;
5835: LD_STRING JMM
5837: PPUSH
5838: CALL_OW 104
// SOS_UnitDestroyed ( un ) ;
5842: LD_VAR 0 1
5846: PPUSH
5847: CALL 21673 0 1
// end ;
5851: PPOPN 1
5853: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
5854: LD_VAR 0 1
5858: PPUSH
5859: LD_VAR 0 2
5863: PPUSH
5864: CALL 21793 0 2
// end ; end_of_file
5868: PPOPN 2
5870: END
// export globalGameSaveCounter ; every 0 0$1 do
5871: GO 5873
5873: DISABLE
// begin enable ;
5874: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
5875: LD_STRING updateTimer(
5877: PUSH
5878: LD_OWVAR 1
5882: STR
5883: PUSH
5884: LD_STRING );
5886: STR
5887: PPUSH
5888: CALL_OW 559
// end ;
5892: END
// every 0 0$1 do
5893: GO 5895
5895: DISABLE
// begin globalGameSaveCounter := 0 ;
5896: LD_ADDR_EXP 25
5900: PUSH
5901: LD_INT 0
5903: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
5904: LD_STRING setGameSaveCounter(0)
5906: PPUSH
5907: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
5911: LD_STRING initStreamRollete();
5913: PPUSH
5914: CALL_OW 559
// InitStreamMode ;
5918: CALL 7244 0 0
// DefineStreamItems ( false ) ;
5922: LD_INT 0
5924: PPUSH
5925: CALL 7708 0 1
// end ;
5929: END
// export function SOS_MapStart ( ) ; begin
5930: LD_INT 0
5932: PPUSH
// if streamModeActive then
5933: LD_EXP 26
5937: IFFALSE 5946
// DefineStreamItems ( true ) ;
5939: LD_INT 1
5941: PPUSH
5942: CALL 7708 0 1
// UpdateLuaVariables ( ) ;
5946: CALL 5963 0 0
// UpdateFactoryWaypoints ( ) ;
5950: CALL 20577 0 0
// UpdateWarehouseGatheringPoints ( ) ;
5954: CALL 20834 0 0
// end ;
5958: LD_VAR 0 1
5962: RET
// function UpdateLuaVariables ( ) ; begin
5963: LD_INT 0
5965: PPUSH
// if globalGameSaveCounter then
5966: LD_EXP 25
5970: IFFALSE 6004
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
5972: LD_ADDR_EXP 25
5976: PUSH
5977: LD_EXP 25
5981: PPUSH
5982: CALL 65464 0 1
5986: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
5987: LD_STRING setGameSaveCounter(
5989: PUSH
5990: LD_EXP 25
5994: STR
5995: PUSH
5996: LD_STRING )
5998: STR
5999: PPUSH
6000: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
6004: LD_STRING setGameDifficulty(
6006: PUSH
6007: LD_OWVAR 67
6011: STR
6012: PUSH
6013: LD_STRING )
6015: STR
6016: PPUSH
6017: CALL_OW 559
// end ;
6021: LD_VAR 0 1
6025: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
6026: LD_INT 0
6028: PPUSH
// if p2 = stream_mode then
6029: LD_VAR 0 2
6033: PUSH
6034: LD_INT 100
6036: EQUAL
6037: IFFALSE 7040
// begin if not StreamModeActive then
6039: LD_EXP 26
6043: NOT
6044: IFFALSE 6054
// StreamModeActive := true ;
6046: LD_ADDR_EXP 26
6050: PUSH
6051: LD_INT 1
6053: ST_TO_ADDR
// if p3 = 0 then
6054: LD_VAR 0 3
6058: PUSH
6059: LD_INT 0
6061: EQUAL
6062: IFFALSE 6068
// InitStreamMode ;
6064: CALL 7244 0 0
// if p3 = 1 then
6068: LD_VAR 0 3
6072: PUSH
6073: LD_INT 1
6075: EQUAL
6076: IFFALSE 6086
// sRocket := true ;
6078: LD_ADDR_EXP 31
6082: PUSH
6083: LD_INT 1
6085: ST_TO_ADDR
// if p3 = 2 then
6086: LD_VAR 0 3
6090: PUSH
6091: LD_INT 2
6093: EQUAL
6094: IFFALSE 6104
// sSpeed := true ;
6096: LD_ADDR_EXP 30
6100: PUSH
6101: LD_INT 1
6103: ST_TO_ADDR
// if p3 = 3 then
6104: LD_VAR 0 3
6108: PUSH
6109: LD_INT 3
6111: EQUAL
6112: IFFALSE 6122
// sEngine := true ;
6114: LD_ADDR_EXP 32
6118: PUSH
6119: LD_INT 1
6121: ST_TO_ADDR
// if p3 = 4 then
6122: LD_VAR 0 3
6126: PUSH
6127: LD_INT 4
6129: EQUAL
6130: IFFALSE 6140
// sSpec := true ;
6132: LD_ADDR_EXP 29
6136: PUSH
6137: LD_INT 1
6139: ST_TO_ADDR
// if p3 = 5 then
6140: LD_VAR 0 3
6144: PUSH
6145: LD_INT 5
6147: EQUAL
6148: IFFALSE 6158
// sLevel := true ;
6150: LD_ADDR_EXP 33
6154: PUSH
6155: LD_INT 1
6157: ST_TO_ADDR
// if p3 = 6 then
6158: LD_VAR 0 3
6162: PUSH
6163: LD_INT 6
6165: EQUAL
6166: IFFALSE 6176
// sArmoury := true ;
6168: LD_ADDR_EXP 34
6172: PUSH
6173: LD_INT 1
6175: ST_TO_ADDR
// if p3 = 7 then
6176: LD_VAR 0 3
6180: PUSH
6181: LD_INT 7
6183: EQUAL
6184: IFFALSE 6194
// sRadar := true ;
6186: LD_ADDR_EXP 35
6190: PUSH
6191: LD_INT 1
6193: ST_TO_ADDR
// if p3 = 8 then
6194: LD_VAR 0 3
6198: PUSH
6199: LD_INT 8
6201: EQUAL
6202: IFFALSE 6212
// sBunker := true ;
6204: LD_ADDR_EXP 36
6208: PUSH
6209: LD_INT 1
6211: ST_TO_ADDR
// if p3 = 9 then
6212: LD_VAR 0 3
6216: PUSH
6217: LD_INT 9
6219: EQUAL
6220: IFFALSE 6230
// sHack := true ;
6222: LD_ADDR_EXP 37
6226: PUSH
6227: LD_INT 1
6229: ST_TO_ADDR
// if p3 = 10 then
6230: LD_VAR 0 3
6234: PUSH
6235: LD_INT 10
6237: EQUAL
6238: IFFALSE 6248
// sFire := true ;
6240: LD_ADDR_EXP 38
6244: PUSH
6245: LD_INT 1
6247: ST_TO_ADDR
// if p3 = 11 then
6248: LD_VAR 0 3
6252: PUSH
6253: LD_INT 11
6255: EQUAL
6256: IFFALSE 6266
// sRefresh := true ;
6258: LD_ADDR_EXP 39
6262: PUSH
6263: LD_INT 1
6265: ST_TO_ADDR
// if p3 = 12 then
6266: LD_VAR 0 3
6270: PUSH
6271: LD_INT 12
6273: EQUAL
6274: IFFALSE 6284
// sExp := true ;
6276: LD_ADDR_EXP 40
6280: PUSH
6281: LD_INT 1
6283: ST_TO_ADDR
// if p3 = 13 then
6284: LD_VAR 0 3
6288: PUSH
6289: LD_INT 13
6291: EQUAL
6292: IFFALSE 6302
// sDepot := true ;
6294: LD_ADDR_EXP 41
6298: PUSH
6299: LD_INT 1
6301: ST_TO_ADDR
// if p3 = 14 then
6302: LD_VAR 0 3
6306: PUSH
6307: LD_INT 14
6309: EQUAL
6310: IFFALSE 6320
// sFlag := true ;
6312: LD_ADDR_EXP 42
6316: PUSH
6317: LD_INT 1
6319: ST_TO_ADDR
// if p3 = 15 then
6320: LD_VAR 0 3
6324: PUSH
6325: LD_INT 15
6327: EQUAL
6328: IFFALSE 6338
// sKamikadze := true ;
6330: LD_ADDR_EXP 50
6334: PUSH
6335: LD_INT 1
6337: ST_TO_ADDR
// if p3 = 16 then
6338: LD_VAR 0 3
6342: PUSH
6343: LD_INT 16
6345: EQUAL
6346: IFFALSE 6356
// sTroll := true ;
6348: LD_ADDR_EXP 51
6352: PUSH
6353: LD_INT 1
6355: ST_TO_ADDR
// if p3 = 17 then
6356: LD_VAR 0 3
6360: PUSH
6361: LD_INT 17
6363: EQUAL
6364: IFFALSE 6374
// sSlow := true ;
6366: LD_ADDR_EXP 52
6370: PUSH
6371: LD_INT 1
6373: ST_TO_ADDR
// if p3 = 18 then
6374: LD_VAR 0 3
6378: PUSH
6379: LD_INT 18
6381: EQUAL
6382: IFFALSE 6392
// sLack := true ;
6384: LD_ADDR_EXP 53
6388: PUSH
6389: LD_INT 1
6391: ST_TO_ADDR
// if p3 = 19 then
6392: LD_VAR 0 3
6396: PUSH
6397: LD_INT 19
6399: EQUAL
6400: IFFALSE 6410
// sTank := true ;
6402: LD_ADDR_EXP 55
6406: PUSH
6407: LD_INT 1
6409: ST_TO_ADDR
// if p3 = 20 then
6410: LD_VAR 0 3
6414: PUSH
6415: LD_INT 20
6417: EQUAL
6418: IFFALSE 6428
// sRemote := true ;
6420: LD_ADDR_EXP 56
6424: PUSH
6425: LD_INT 1
6427: ST_TO_ADDR
// if p3 = 21 then
6428: LD_VAR 0 3
6432: PUSH
6433: LD_INT 21
6435: EQUAL
6436: IFFALSE 6446
// sPowell := true ;
6438: LD_ADDR_EXP 57
6442: PUSH
6443: LD_INT 1
6445: ST_TO_ADDR
// if p3 = 22 then
6446: LD_VAR 0 3
6450: PUSH
6451: LD_INT 22
6453: EQUAL
6454: IFFALSE 6464
// sTeleport := true ;
6456: LD_ADDR_EXP 60
6460: PUSH
6461: LD_INT 1
6463: ST_TO_ADDR
// if p3 = 23 then
6464: LD_VAR 0 3
6468: PUSH
6469: LD_INT 23
6471: EQUAL
6472: IFFALSE 6482
// sOilTower := true ;
6474: LD_ADDR_EXP 62
6478: PUSH
6479: LD_INT 1
6481: ST_TO_ADDR
// if p3 = 24 then
6482: LD_VAR 0 3
6486: PUSH
6487: LD_INT 24
6489: EQUAL
6490: IFFALSE 6500
// sShovel := true ;
6492: LD_ADDR_EXP 63
6496: PUSH
6497: LD_INT 1
6499: ST_TO_ADDR
// if p3 = 25 then
6500: LD_VAR 0 3
6504: PUSH
6505: LD_INT 25
6507: EQUAL
6508: IFFALSE 6518
// sSheik := true ;
6510: LD_ADDR_EXP 64
6514: PUSH
6515: LD_INT 1
6517: ST_TO_ADDR
// if p3 = 26 then
6518: LD_VAR 0 3
6522: PUSH
6523: LD_INT 26
6525: EQUAL
6526: IFFALSE 6536
// sEarthquake := true ;
6528: LD_ADDR_EXP 66
6532: PUSH
6533: LD_INT 1
6535: ST_TO_ADDR
// if p3 = 27 then
6536: LD_VAR 0 3
6540: PUSH
6541: LD_INT 27
6543: EQUAL
6544: IFFALSE 6554
// sAI := true ;
6546: LD_ADDR_EXP 67
6550: PUSH
6551: LD_INT 1
6553: ST_TO_ADDR
// if p3 = 28 then
6554: LD_VAR 0 3
6558: PUSH
6559: LD_INT 28
6561: EQUAL
6562: IFFALSE 6572
// sCargo := true ;
6564: LD_ADDR_EXP 70
6568: PUSH
6569: LD_INT 1
6571: ST_TO_ADDR
// if p3 = 29 then
6572: LD_VAR 0 3
6576: PUSH
6577: LD_INT 29
6579: EQUAL
6580: IFFALSE 6590
// sDLaser := true ;
6582: LD_ADDR_EXP 71
6586: PUSH
6587: LD_INT 1
6589: ST_TO_ADDR
// if p3 = 30 then
6590: LD_VAR 0 3
6594: PUSH
6595: LD_INT 30
6597: EQUAL
6598: IFFALSE 6608
// sExchange := true ;
6600: LD_ADDR_EXP 72
6604: PUSH
6605: LD_INT 1
6607: ST_TO_ADDR
// if p3 = 31 then
6608: LD_VAR 0 3
6612: PUSH
6613: LD_INT 31
6615: EQUAL
6616: IFFALSE 6626
// sFac := true ;
6618: LD_ADDR_EXP 73
6622: PUSH
6623: LD_INT 1
6625: ST_TO_ADDR
// if p3 = 32 then
6626: LD_VAR 0 3
6630: PUSH
6631: LD_INT 32
6633: EQUAL
6634: IFFALSE 6644
// sPower := true ;
6636: LD_ADDR_EXP 74
6640: PUSH
6641: LD_INT 1
6643: ST_TO_ADDR
// if p3 = 33 then
6644: LD_VAR 0 3
6648: PUSH
6649: LD_INT 33
6651: EQUAL
6652: IFFALSE 6662
// sRandom := true ;
6654: LD_ADDR_EXP 75
6658: PUSH
6659: LD_INT 1
6661: ST_TO_ADDR
// if p3 = 34 then
6662: LD_VAR 0 3
6666: PUSH
6667: LD_INT 34
6669: EQUAL
6670: IFFALSE 6680
// sShield := true ;
6672: LD_ADDR_EXP 76
6676: PUSH
6677: LD_INT 1
6679: ST_TO_ADDR
// if p3 = 35 then
6680: LD_VAR 0 3
6684: PUSH
6685: LD_INT 35
6687: EQUAL
6688: IFFALSE 6698
// sTime := true ;
6690: LD_ADDR_EXP 77
6694: PUSH
6695: LD_INT 1
6697: ST_TO_ADDR
// if p3 = 36 then
6698: LD_VAR 0 3
6702: PUSH
6703: LD_INT 36
6705: EQUAL
6706: IFFALSE 6716
// sTools := true ;
6708: LD_ADDR_EXP 78
6712: PUSH
6713: LD_INT 1
6715: ST_TO_ADDR
// if p3 = 101 then
6716: LD_VAR 0 3
6720: PUSH
6721: LD_INT 101
6723: EQUAL
6724: IFFALSE 6734
// sSold := true ;
6726: LD_ADDR_EXP 43
6730: PUSH
6731: LD_INT 1
6733: ST_TO_ADDR
// if p3 = 102 then
6734: LD_VAR 0 3
6738: PUSH
6739: LD_INT 102
6741: EQUAL
6742: IFFALSE 6752
// sDiff := true ;
6744: LD_ADDR_EXP 44
6748: PUSH
6749: LD_INT 1
6751: ST_TO_ADDR
// if p3 = 103 then
6752: LD_VAR 0 3
6756: PUSH
6757: LD_INT 103
6759: EQUAL
6760: IFFALSE 6770
// sFog := true ;
6762: LD_ADDR_EXP 47
6766: PUSH
6767: LD_INT 1
6769: ST_TO_ADDR
// if p3 = 104 then
6770: LD_VAR 0 3
6774: PUSH
6775: LD_INT 104
6777: EQUAL
6778: IFFALSE 6788
// sReset := true ;
6780: LD_ADDR_EXP 48
6784: PUSH
6785: LD_INT 1
6787: ST_TO_ADDR
// if p3 = 105 then
6788: LD_VAR 0 3
6792: PUSH
6793: LD_INT 105
6795: EQUAL
6796: IFFALSE 6806
// sSun := true ;
6798: LD_ADDR_EXP 49
6802: PUSH
6803: LD_INT 1
6805: ST_TO_ADDR
// if p3 = 106 then
6806: LD_VAR 0 3
6810: PUSH
6811: LD_INT 106
6813: EQUAL
6814: IFFALSE 6824
// sTiger := true ;
6816: LD_ADDR_EXP 45
6820: PUSH
6821: LD_INT 1
6823: ST_TO_ADDR
// if p3 = 107 then
6824: LD_VAR 0 3
6828: PUSH
6829: LD_INT 107
6831: EQUAL
6832: IFFALSE 6842
// sBomb := true ;
6834: LD_ADDR_EXP 46
6838: PUSH
6839: LD_INT 1
6841: ST_TO_ADDR
// if p3 = 108 then
6842: LD_VAR 0 3
6846: PUSH
6847: LD_INT 108
6849: EQUAL
6850: IFFALSE 6860
// sWound := true ;
6852: LD_ADDR_EXP 54
6856: PUSH
6857: LD_INT 1
6859: ST_TO_ADDR
// if p3 = 109 then
6860: LD_VAR 0 3
6864: PUSH
6865: LD_INT 109
6867: EQUAL
6868: IFFALSE 6878
// sBetray := true ;
6870: LD_ADDR_EXP 58
6874: PUSH
6875: LD_INT 1
6877: ST_TO_ADDR
// if p3 = 110 then
6878: LD_VAR 0 3
6882: PUSH
6883: LD_INT 110
6885: EQUAL
6886: IFFALSE 6896
// sContamin := true ;
6888: LD_ADDR_EXP 59
6892: PUSH
6893: LD_INT 1
6895: ST_TO_ADDR
// if p3 = 111 then
6896: LD_VAR 0 3
6900: PUSH
6901: LD_INT 111
6903: EQUAL
6904: IFFALSE 6914
// sOil := true ;
6906: LD_ADDR_EXP 61
6910: PUSH
6911: LD_INT 1
6913: ST_TO_ADDR
// if p3 = 112 then
6914: LD_VAR 0 3
6918: PUSH
6919: LD_INT 112
6921: EQUAL
6922: IFFALSE 6932
// sStu := true ;
6924: LD_ADDR_EXP 65
6928: PUSH
6929: LD_INT 1
6931: ST_TO_ADDR
// if p3 = 113 then
6932: LD_VAR 0 3
6936: PUSH
6937: LD_INT 113
6939: EQUAL
6940: IFFALSE 6950
// sBazooka := true ;
6942: LD_ADDR_EXP 68
6946: PUSH
6947: LD_INT 1
6949: ST_TO_ADDR
// if p3 = 114 then
6950: LD_VAR 0 3
6954: PUSH
6955: LD_INT 114
6957: EQUAL
6958: IFFALSE 6968
// sMortar := true ;
6960: LD_ADDR_EXP 69
6964: PUSH
6965: LD_INT 1
6967: ST_TO_ADDR
// if p3 = 115 then
6968: LD_VAR 0 3
6972: PUSH
6973: LD_INT 115
6975: EQUAL
6976: IFFALSE 6986
// sRanger := true ;
6978: LD_ADDR_EXP 79
6982: PUSH
6983: LD_INT 1
6985: ST_TO_ADDR
// if p3 = 116 then
6986: LD_VAR 0 3
6990: PUSH
6991: LD_INT 116
6993: EQUAL
6994: IFFALSE 7004
// sComputer := true ;
6996: LD_ADDR_EXP 80
7000: PUSH
7001: LD_INT 1
7003: ST_TO_ADDR
// if p3 = 117 then
7004: LD_VAR 0 3
7008: PUSH
7009: LD_INT 117
7011: EQUAL
7012: IFFALSE 7022
// s30 := true ;
7014: LD_ADDR_EXP 81
7018: PUSH
7019: LD_INT 1
7021: ST_TO_ADDR
// if p3 = 118 then
7022: LD_VAR 0 3
7026: PUSH
7027: LD_INT 118
7029: EQUAL
7030: IFFALSE 7040
// s60 := true ;
7032: LD_ADDR_EXP 82
7036: PUSH
7037: LD_INT 1
7039: ST_TO_ADDR
// end ; if p2 = hack_mode then
7040: LD_VAR 0 2
7044: PUSH
7045: LD_INT 101
7047: EQUAL
7048: IFFALSE 7176
// begin case p3 of 1 :
7050: LD_VAR 0 3
7054: PUSH
7055: LD_INT 1
7057: DOUBLE
7058: EQUAL
7059: IFTRUE 7063
7061: GO 7070
7063: POP
// hHackUnlimitedResources ; 2 :
7064: CALL 19323 0 0
7068: GO 7176
7070: LD_INT 2
7072: DOUBLE
7073: EQUAL
7074: IFTRUE 7078
7076: GO 7085
7078: POP
// hHackSetLevel10 ; 3 :
7079: CALL 19456 0 0
7083: GO 7176
7085: LD_INT 3
7087: DOUBLE
7088: EQUAL
7089: IFTRUE 7093
7091: GO 7100
7093: POP
// hHackSetLevel10YourUnits ; 4 :
7094: CALL 19541 0 0
7098: GO 7176
7100: LD_INT 4
7102: DOUBLE
7103: EQUAL
7104: IFTRUE 7108
7106: GO 7115
7108: POP
// hHackInvincible ; 5 :
7109: CALL 19989 0 0
7113: GO 7176
7115: LD_INT 5
7117: DOUBLE
7118: EQUAL
7119: IFTRUE 7123
7121: GO 7130
7123: POP
// hHackInvisible ; 6 :
7124: CALL 20100 0 0
7128: GO 7176
7130: LD_INT 6
7132: DOUBLE
7133: EQUAL
7134: IFTRUE 7138
7136: GO 7145
7138: POP
// hHackChangeYourSide ; 7 :
7139: CALL 20157 0 0
7143: GO 7176
7145: LD_INT 7
7147: DOUBLE
7148: EQUAL
7149: IFTRUE 7153
7151: GO 7160
7153: POP
// hHackChangeUnitSide ; 8 :
7154: CALL 20199 0 0
7158: GO 7176
7160: LD_INT 8
7162: DOUBLE
7163: EQUAL
7164: IFTRUE 7168
7166: GO 7175
7168: POP
// hHackFog ; end ;
7169: CALL 20300 0 0
7173: GO 7176
7175: POP
// end ; if p2 = game_save_mode then
7176: LD_VAR 0 2
7180: PUSH
7181: LD_INT 102
7183: EQUAL
7184: IFFALSE 7239
// begin if p3 = 1 then
7186: LD_VAR 0 3
7190: PUSH
7191: LD_INT 1
7193: EQUAL
7194: IFFALSE 7206
// globalGameSaveCounter := p4 ;
7196: LD_ADDR_EXP 25
7200: PUSH
7201: LD_VAR 0 4
7205: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
7206: LD_VAR 0 3
7210: PUSH
7211: LD_INT 2
7213: EQUAL
7214: PUSH
7215: LD_EXP 25
7219: AND
7220: IFFALSE 7239
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
7222: LD_STRING setGameSaveCounter(
7224: PUSH
7225: LD_EXP 25
7229: STR
7230: PUSH
7231: LD_STRING )
7233: STR
7234: PPUSH
7235: CALL_OW 559
// end ; end ;
7239: LD_VAR 0 7
7243: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
7244: LD_INT 0
7246: PPUSH
// streamModeActive := false ;
7247: LD_ADDR_EXP 26
7251: PUSH
7252: LD_INT 0
7254: ST_TO_ADDR
// normalCounter := 36 ;
7255: LD_ADDR_EXP 27
7259: PUSH
7260: LD_INT 36
7262: ST_TO_ADDR
// hardcoreCounter := 18 ;
7263: LD_ADDR_EXP 28
7267: PUSH
7268: LD_INT 18
7270: ST_TO_ADDR
// sRocket := false ;
7271: LD_ADDR_EXP 31
7275: PUSH
7276: LD_INT 0
7278: ST_TO_ADDR
// sSpeed := false ;
7279: LD_ADDR_EXP 30
7283: PUSH
7284: LD_INT 0
7286: ST_TO_ADDR
// sEngine := false ;
7287: LD_ADDR_EXP 32
7291: PUSH
7292: LD_INT 0
7294: ST_TO_ADDR
// sSpec := false ;
7295: LD_ADDR_EXP 29
7299: PUSH
7300: LD_INT 0
7302: ST_TO_ADDR
// sLevel := false ;
7303: LD_ADDR_EXP 33
7307: PUSH
7308: LD_INT 0
7310: ST_TO_ADDR
// sArmoury := false ;
7311: LD_ADDR_EXP 34
7315: PUSH
7316: LD_INT 0
7318: ST_TO_ADDR
// sRadar := false ;
7319: LD_ADDR_EXP 35
7323: PUSH
7324: LD_INT 0
7326: ST_TO_ADDR
// sBunker := false ;
7327: LD_ADDR_EXP 36
7331: PUSH
7332: LD_INT 0
7334: ST_TO_ADDR
// sHack := false ;
7335: LD_ADDR_EXP 37
7339: PUSH
7340: LD_INT 0
7342: ST_TO_ADDR
// sFire := false ;
7343: LD_ADDR_EXP 38
7347: PUSH
7348: LD_INT 0
7350: ST_TO_ADDR
// sRefresh := false ;
7351: LD_ADDR_EXP 39
7355: PUSH
7356: LD_INT 0
7358: ST_TO_ADDR
// sExp := false ;
7359: LD_ADDR_EXP 40
7363: PUSH
7364: LD_INT 0
7366: ST_TO_ADDR
// sDepot := false ;
7367: LD_ADDR_EXP 41
7371: PUSH
7372: LD_INT 0
7374: ST_TO_ADDR
// sFlag := false ;
7375: LD_ADDR_EXP 42
7379: PUSH
7380: LD_INT 0
7382: ST_TO_ADDR
// sKamikadze := false ;
7383: LD_ADDR_EXP 50
7387: PUSH
7388: LD_INT 0
7390: ST_TO_ADDR
// sTroll := false ;
7391: LD_ADDR_EXP 51
7395: PUSH
7396: LD_INT 0
7398: ST_TO_ADDR
// sSlow := false ;
7399: LD_ADDR_EXP 52
7403: PUSH
7404: LD_INT 0
7406: ST_TO_ADDR
// sLack := false ;
7407: LD_ADDR_EXP 53
7411: PUSH
7412: LD_INT 0
7414: ST_TO_ADDR
// sTank := false ;
7415: LD_ADDR_EXP 55
7419: PUSH
7420: LD_INT 0
7422: ST_TO_ADDR
// sRemote := false ;
7423: LD_ADDR_EXP 56
7427: PUSH
7428: LD_INT 0
7430: ST_TO_ADDR
// sPowell := false ;
7431: LD_ADDR_EXP 57
7435: PUSH
7436: LD_INT 0
7438: ST_TO_ADDR
// sTeleport := false ;
7439: LD_ADDR_EXP 60
7443: PUSH
7444: LD_INT 0
7446: ST_TO_ADDR
// sOilTower := false ;
7447: LD_ADDR_EXP 62
7451: PUSH
7452: LD_INT 0
7454: ST_TO_ADDR
// sShovel := false ;
7455: LD_ADDR_EXP 63
7459: PUSH
7460: LD_INT 0
7462: ST_TO_ADDR
// sSheik := false ;
7463: LD_ADDR_EXP 64
7467: PUSH
7468: LD_INT 0
7470: ST_TO_ADDR
// sEarthquake := false ;
7471: LD_ADDR_EXP 66
7475: PUSH
7476: LD_INT 0
7478: ST_TO_ADDR
// sAI := false ;
7479: LD_ADDR_EXP 67
7483: PUSH
7484: LD_INT 0
7486: ST_TO_ADDR
// sCargo := false ;
7487: LD_ADDR_EXP 70
7491: PUSH
7492: LD_INT 0
7494: ST_TO_ADDR
// sDLaser := false ;
7495: LD_ADDR_EXP 71
7499: PUSH
7500: LD_INT 0
7502: ST_TO_ADDR
// sExchange := false ;
7503: LD_ADDR_EXP 72
7507: PUSH
7508: LD_INT 0
7510: ST_TO_ADDR
// sFac := false ;
7511: LD_ADDR_EXP 73
7515: PUSH
7516: LD_INT 0
7518: ST_TO_ADDR
// sPower := false ;
7519: LD_ADDR_EXP 74
7523: PUSH
7524: LD_INT 0
7526: ST_TO_ADDR
// sRandom := false ;
7527: LD_ADDR_EXP 75
7531: PUSH
7532: LD_INT 0
7534: ST_TO_ADDR
// sShield := false ;
7535: LD_ADDR_EXP 76
7539: PUSH
7540: LD_INT 0
7542: ST_TO_ADDR
// sTime := false ;
7543: LD_ADDR_EXP 77
7547: PUSH
7548: LD_INT 0
7550: ST_TO_ADDR
// sTools := false ;
7551: LD_ADDR_EXP 78
7555: PUSH
7556: LD_INT 0
7558: ST_TO_ADDR
// sSold := false ;
7559: LD_ADDR_EXP 43
7563: PUSH
7564: LD_INT 0
7566: ST_TO_ADDR
// sDiff := false ;
7567: LD_ADDR_EXP 44
7571: PUSH
7572: LD_INT 0
7574: ST_TO_ADDR
// sFog := false ;
7575: LD_ADDR_EXP 47
7579: PUSH
7580: LD_INT 0
7582: ST_TO_ADDR
// sReset := false ;
7583: LD_ADDR_EXP 48
7587: PUSH
7588: LD_INT 0
7590: ST_TO_ADDR
// sSun := false ;
7591: LD_ADDR_EXP 49
7595: PUSH
7596: LD_INT 0
7598: ST_TO_ADDR
// sTiger := false ;
7599: LD_ADDR_EXP 45
7603: PUSH
7604: LD_INT 0
7606: ST_TO_ADDR
// sBomb := false ;
7607: LD_ADDR_EXP 46
7611: PUSH
7612: LD_INT 0
7614: ST_TO_ADDR
// sWound := false ;
7615: LD_ADDR_EXP 54
7619: PUSH
7620: LD_INT 0
7622: ST_TO_ADDR
// sBetray := false ;
7623: LD_ADDR_EXP 58
7627: PUSH
7628: LD_INT 0
7630: ST_TO_ADDR
// sContamin := false ;
7631: LD_ADDR_EXP 59
7635: PUSH
7636: LD_INT 0
7638: ST_TO_ADDR
// sOil := false ;
7639: LD_ADDR_EXP 61
7643: PUSH
7644: LD_INT 0
7646: ST_TO_ADDR
// sStu := false ;
7647: LD_ADDR_EXP 65
7651: PUSH
7652: LD_INT 0
7654: ST_TO_ADDR
// sBazooka := false ;
7655: LD_ADDR_EXP 68
7659: PUSH
7660: LD_INT 0
7662: ST_TO_ADDR
// sMortar := false ;
7663: LD_ADDR_EXP 69
7667: PUSH
7668: LD_INT 0
7670: ST_TO_ADDR
// sRanger := false ;
7671: LD_ADDR_EXP 79
7675: PUSH
7676: LD_INT 0
7678: ST_TO_ADDR
// sComputer := false ;
7679: LD_ADDR_EXP 80
7683: PUSH
7684: LD_INT 0
7686: ST_TO_ADDR
// s30 := false ;
7687: LD_ADDR_EXP 81
7691: PUSH
7692: LD_INT 0
7694: ST_TO_ADDR
// s60 := false ;
7695: LD_ADDR_EXP 82
7699: PUSH
7700: LD_INT 0
7702: ST_TO_ADDR
// end ;
7703: LD_VAR 0 1
7707: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
7708: LD_INT 0
7710: PPUSH
7711: PPUSH
7712: PPUSH
7713: PPUSH
7714: PPUSH
7715: PPUSH
7716: PPUSH
// result := [ ] ;
7717: LD_ADDR_VAR 0 2
7721: PUSH
7722: EMPTY
7723: ST_TO_ADDR
// if campaign_id = 1 then
7724: LD_OWVAR 69
7728: PUSH
7729: LD_INT 1
7731: EQUAL
7732: IFFALSE 10898
// begin case mission_number of 1 :
7734: LD_OWVAR 70
7738: PUSH
7739: LD_INT 1
7741: DOUBLE
7742: EQUAL
7743: IFTRUE 7747
7745: GO 7823
7747: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
7748: LD_ADDR_VAR 0 2
7752: PUSH
7753: LD_INT 2
7755: PUSH
7756: LD_INT 4
7758: PUSH
7759: LD_INT 11
7761: PUSH
7762: LD_INT 12
7764: PUSH
7765: LD_INT 15
7767: PUSH
7768: LD_INT 16
7770: PUSH
7771: LD_INT 22
7773: PUSH
7774: LD_INT 23
7776: PUSH
7777: LD_INT 26
7779: PUSH
7780: EMPTY
7781: LIST
7782: LIST
7783: LIST
7784: LIST
7785: LIST
7786: LIST
7787: LIST
7788: LIST
7789: LIST
7790: PUSH
7791: LD_INT 101
7793: PUSH
7794: LD_INT 102
7796: PUSH
7797: LD_INT 106
7799: PUSH
7800: LD_INT 116
7802: PUSH
7803: LD_INT 117
7805: PUSH
7806: LD_INT 118
7808: PUSH
7809: EMPTY
7810: LIST
7811: LIST
7812: LIST
7813: LIST
7814: LIST
7815: LIST
7816: PUSH
7817: EMPTY
7818: LIST
7819: LIST
7820: ST_TO_ADDR
7821: GO 10896
7823: LD_INT 2
7825: DOUBLE
7826: EQUAL
7827: IFTRUE 7831
7829: GO 7915
7831: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
7832: LD_ADDR_VAR 0 2
7836: PUSH
7837: LD_INT 2
7839: PUSH
7840: LD_INT 4
7842: PUSH
7843: LD_INT 11
7845: PUSH
7846: LD_INT 12
7848: PUSH
7849: LD_INT 15
7851: PUSH
7852: LD_INT 16
7854: PUSH
7855: LD_INT 22
7857: PUSH
7858: LD_INT 23
7860: PUSH
7861: LD_INT 26
7863: PUSH
7864: EMPTY
7865: LIST
7866: LIST
7867: LIST
7868: LIST
7869: LIST
7870: LIST
7871: LIST
7872: LIST
7873: LIST
7874: PUSH
7875: LD_INT 101
7877: PUSH
7878: LD_INT 102
7880: PUSH
7881: LD_INT 105
7883: PUSH
7884: LD_INT 106
7886: PUSH
7887: LD_INT 108
7889: PUSH
7890: LD_INT 116
7892: PUSH
7893: LD_INT 117
7895: PUSH
7896: LD_INT 118
7898: PUSH
7899: EMPTY
7900: LIST
7901: LIST
7902: LIST
7903: LIST
7904: LIST
7905: LIST
7906: LIST
7907: LIST
7908: PUSH
7909: EMPTY
7910: LIST
7911: LIST
7912: ST_TO_ADDR
7913: GO 10896
7915: LD_INT 3
7917: DOUBLE
7918: EQUAL
7919: IFTRUE 7923
7921: GO 8011
7923: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
7924: LD_ADDR_VAR 0 2
7928: PUSH
7929: LD_INT 2
7931: PUSH
7932: LD_INT 4
7934: PUSH
7935: LD_INT 5
7937: PUSH
7938: LD_INT 11
7940: PUSH
7941: LD_INT 12
7943: PUSH
7944: LD_INT 15
7946: PUSH
7947: LD_INT 16
7949: PUSH
7950: LD_INT 22
7952: PUSH
7953: LD_INT 26
7955: PUSH
7956: LD_INT 36
7958: PUSH
7959: EMPTY
7960: LIST
7961: LIST
7962: LIST
7963: LIST
7964: LIST
7965: LIST
7966: LIST
7967: LIST
7968: LIST
7969: LIST
7970: PUSH
7971: LD_INT 101
7973: PUSH
7974: LD_INT 102
7976: PUSH
7977: LD_INT 105
7979: PUSH
7980: LD_INT 106
7982: PUSH
7983: LD_INT 108
7985: PUSH
7986: LD_INT 116
7988: PUSH
7989: LD_INT 117
7991: PUSH
7992: LD_INT 118
7994: PUSH
7995: EMPTY
7996: LIST
7997: LIST
7998: LIST
7999: LIST
8000: LIST
8001: LIST
8002: LIST
8003: LIST
8004: PUSH
8005: EMPTY
8006: LIST
8007: LIST
8008: ST_TO_ADDR
8009: GO 10896
8011: LD_INT 4
8013: DOUBLE
8014: EQUAL
8015: IFTRUE 8019
8017: GO 8115
8019: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
8020: LD_ADDR_VAR 0 2
8024: PUSH
8025: LD_INT 2
8027: PUSH
8028: LD_INT 4
8030: PUSH
8031: LD_INT 5
8033: PUSH
8034: LD_INT 8
8036: PUSH
8037: LD_INT 11
8039: PUSH
8040: LD_INT 12
8042: PUSH
8043: LD_INT 15
8045: PUSH
8046: LD_INT 16
8048: PUSH
8049: LD_INT 22
8051: PUSH
8052: LD_INT 23
8054: PUSH
8055: LD_INT 26
8057: PUSH
8058: LD_INT 36
8060: PUSH
8061: EMPTY
8062: LIST
8063: LIST
8064: LIST
8065: LIST
8066: LIST
8067: LIST
8068: LIST
8069: LIST
8070: LIST
8071: LIST
8072: LIST
8073: LIST
8074: PUSH
8075: LD_INT 101
8077: PUSH
8078: LD_INT 102
8080: PUSH
8081: LD_INT 105
8083: PUSH
8084: LD_INT 106
8086: PUSH
8087: LD_INT 108
8089: PUSH
8090: LD_INT 116
8092: PUSH
8093: LD_INT 117
8095: PUSH
8096: LD_INT 118
8098: PUSH
8099: EMPTY
8100: LIST
8101: LIST
8102: LIST
8103: LIST
8104: LIST
8105: LIST
8106: LIST
8107: LIST
8108: PUSH
8109: EMPTY
8110: LIST
8111: LIST
8112: ST_TO_ADDR
8113: GO 10896
8115: LD_INT 5
8117: DOUBLE
8118: EQUAL
8119: IFTRUE 8123
8121: GO 8235
8123: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
8124: LD_ADDR_VAR 0 2
8128: PUSH
8129: LD_INT 2
8131: PUSH
8132: LD_INT 4
8134: PUSH
8135: LD_INT 5
8137: PUSH
8138: LD_INT 6
8140: PUSH
8141: LD_INT 8
8143: PUSH
8144: LD_INT 11
8146: PUSH
8147: LD_INT 12
8149: PUSH
8150: LD_INT 15
8152: PUSH
8153: LD_INT 16
8155: PUSH
8156: LD_INT 22
8158: PUSH
8159: LD_INT 23
8161: PUSH
8162: LD_INT 25
8164: PUSH
8165: LD_INT 26
8167: PUSH
8168: LD_INT 36
8170: PUSH
8171: EMPTY
8172: LIST
8173: LIST
8174: LIST
8175: LIST
8176: LIST
8177: LIST
8178: LIST
8179: LIST
8180: LIST
8181: LIST
8182: LIST
8183: LIST
8184: LIST
8185: LIST
8186: PUSH
8187: LD_INT 101
8189: PUSH
8190: LD_INT 102
8192: PUSH
8193: LD_INT 105
8195: PUSH
8196: LD_INT 106
8198: PUSH
8199: LD_INT 108
8201: PUSH
8202: LD_INT 109
8204: PUSH
8205: LD_INT 112
8207: PUSH
8208: LD_INT 116
8210: PUSH
8211: LD_INT 117
8213: PUSH
8214: LD_INT 118
8216: PUSH
8217: EMPTY
8218: LIST
8219: LIST
8220: LIST
8221: LIST
8222: LIST
8223: LIST
8224: LIST
8225: LIST
8226: LIST
8227: LIST
8228: PUSH
8229: EMPTY
8230: LIST
8231: LIST
8232: ST_TO_ADDR
8233: GO 10896
8235: LD_INT 6
8237: DOUBLE
8238: EQUAL
8239: IFTRUE 8243
8241: GO 8375
8243: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
8244: LD_ADDR_VAR 0 2
8248: PUSH
8249: LD_INT 2
8251: PUSH
8252: LD_INT 4
8254: PUSH
8255: LD_INT 5
8257: PUSH
8258: LD_INT 6
8260: PUSH
8261: LD_INT 8
8263: PUSH
8264: LD_INT 11
8266: PUSH
8267: LD_INT 12
8269: PUSH
8270: LD_INT 15
8272: PUSH
8273: LD_INT 16
8275: PUSH
8276: LD_INT 20
8278: PUSH
8279: LD_INT 21
8281: PUSH
8282: LD_INT 22
8284: PUSH
8285: LD_INT 23
8287: PUSH
8288: LD_INT 25
8290: PUSH
8291: LD_INT 26
8293: PUSH
8294: LD_INT 30
8296: PUSH
8297: LD_INT 31
8299: PUSH
8300: LD_INT 32
8302: PUSH
8303: LD_INT 36
8305: PUSH
8306: EMPTY
8307: LIST
8308: LIST
8309: LIST
8310: LIST
8311: LIST
8312: LIST
8313: LIST
8314: LIST
8315: LIST
8316: LIST
8317: LIST
8318: LIST
8319: LIST
8320: LIST
8321: LIST
8322: LIST
8323: LIST
8324: LIST
8325: LIST
8326: PUSH
8327: LD_INT 101
8329: PUSH
8330: LD_INT 102
8332: PUSH
8333: LD_INT 105
8335: PUSH
8336: LD_INT 106
8338: PUSH
8339: LD_INT 108
8341: PUSH
8342: LD_INT 109
8344: PUSH
8345: LD_INT 112
8347: PUSH
8348: LD_INT 116
8350: PUSH
8351: LD_INT 117
8353: PUSH
8354: LD_INT 118
8356: PUSH
8357: EMPTY
8358: LIST
8359: LIST
8360: LIST
8361: LIST
8362: LIST
8363: LIST
8364: LIST
8365: LIST
8366: LIST
8367: LIST
8368: PUSH
8369: EMPTY
8370: LIST
8371: LIST
8372: ST_TO_ADDR
8373: GO 10896
8375: LD_INT 7
8377: DOUBLE
8378: EQUAL
8379: IFTRUE 8383
8381: GO 8495
8383: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
8384: LD_ADDR_VAR 0 2
8388: PUSH
8389: LD_INT 2
8391: PUSH
8392: LD_INT 4
8394: PUSH
8395: LD_INT 5
8397: PUSH
8398: LD_INT 7
8400: PUSH
8401: LD_INT 11
8403: PUSH
8404: LD_INT 12
8406: PUSH
8407: LD_INT 15
8409: PUSH
8410: LD_INT 16
8412: PUSH
8413: LD_INT 20
8415: PUSH
8416: LD_INT 21
8418: PUSH
8419: LD_INT 22
8421: PUSH
8422: LD_INT 23
8424: PUSH
8425: LD_INT 25
8427: PUSH
8428: LD_INT 26
8430: PUSH
8431: EMPTY
8432: LIST
8433: LIST
8434: LIST
8435: LIST
8436: LIST
8437: LIST
8438: LIST
8439: LIST
8440: LIST
8441: LIST
8442: LIST
8443: LIST
8444: LIST
8445: LIST
8446: PUSH
8447: LD_INT 101
8449: PUSH
8450: LD_INT 102
8452: PUSH
8453: LD_INT 103
8455: PUSH
8456: LD_INT 105
8458: PUSH
8459: LD_INT 106
8461: PUSH
8462: LD_INT 108
8464: PUSH
8465: LD_INT 112
8467: PUSH
8468: LD_INT 116
8470: PUSH
8471: LD_INT 117
8473: PUSH
8474: LD_INT 118
8476: PUSH
8477: EMPTY
8478: LIST
8479: LIST
8480: LIST
8481: LIST
8482: LIST
8483: LIST
8484: LIST
8485: LIST
8486: LIST
8487: LIST
8488: PUSH
8489: EMPTY
8490: LIST
8491: LIST
8492: ST_TO_ADDR
8493: GO 10896
8495: LD_INT 8
8497: DOUBLE
8498: EQUAL
8499: IFTRUE 8503
8501: GO 8643
8503: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
8504: LD_ADDR_VAR 0 2
8508: PUSH
8509: LD_INT 2
8511: PUSH
8512: LD_INT 4
8514: PUSH
8515: LD_INT 5
8517: PUSH
8518: LD_INT 6
8520: PUSH
8521: LD_INT 7
8523: PUSH
8524: LD_INT 8
8526: PUSH
8527: LD_INT 11
8529: PUSH
8530: LD_INT 12
8532: PUSH
8533: LD_INT 15
8535: PUSH
8536: LD_INT 16
8538: PUSH
8539: LD_INT 20
8541: PUSH
8542: LD_INT 21
8544: PUSH
8545: LD_INT 22
8547: PUSH
8548: LD_INT 23
8550: PUSH
8551: LD_INT 25
8553: PUSH
8554: LD_INT 26
8556: PUSH
8557: LD_INT 30
8559: PUSH
8560: LD_INT 31
8562: PUSH
8563: LD_INT 32
8565: PUSH
8566: LD_INT 36
8568: PUSH
8569: EMPTY
8570: LIST
8571: LIST
8572: LIST
8573: LIST
8574: LIST
8575: LIST
8576: LIST
8577: LIST
8578: LIST
8579: LIST
8580: LIST
8581: LIST
8582: LIST
8583: LIST
8584: LIST
8585: LIST
8586: LIST
8587: LIST
8588: LIST
8589: LIST
8590: PUSH
8591: LD_INT 101
8593: PUSH
8594: LD_INT 102
8596: PUSH
8597: LD_INT 103
8599: PUSH
8600: LD_INT 105
8602: PUSH
8603: LD_INT 106
8605: PUSH
8606: LD_INT 108
8608: PUSH
8609: LD_INT 109
8611: PUSH
8612: LD_INT 112
8614: PUSH
8615: LD_INT 116
8617: PUSH
8618: LD_INT 117
8620: PUSH
8621: LD_INT 118
8623: PUSH
8624: EMPTY
8625: LIST
8626: LIST
8627: LIST
8628: LIST
8629: LIST
8630: LIST
8631: LIST
8632: LIST
8633: LIST
8634: LIST
8635: LIST
8636: PUSH
8637: EMPTY
8638: LIST
8639: LIST
8640: ST_TO_ADDR
8641: GO 10896
8643: LD_INT 9
8645: DOUBLE
8646: EQUAL
8647: IFTRUE 8651
8649: GO 8799
8651: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
8652: LD_ADDR_VAR 0 2
8656: PUSH
8657: LD_INT 2
8659: PUSH
8660: LD_INT 4
8662: PUSH
8663: LD_INT 5
8665: PUSH
8666: LD_INT 6
8668: PUSH
8669: LD_INT 7
8671: PUSH
8672: LD_INT 8
8674: PUSH
8675: LD_INT 11
8677: PUSH
8678: LD_INT 12
8680: PUSH
8681: LD_INT 15
8683: PUSH
8684: LD_INT 16
8686: PUSH
8687: LD_INT 20
8689: PUSH
8690: LD_INT 21
8692: PUSH
8693: LD_INT 22
8695: PUSH
8696: LD_INT 23
8698: PUSH
8699: LD_INT 25
8701: PUSH
8702: LD_INT 26
8704: PUSH
8705: LD_INT 28
8707: PUSH
8708: LD_INT 30
8710: PUSH
8711: LD_INT 31
8713: PUSH
8714: LD_INT 32
8716: PUSH
8717: LD_INT 36
8719: PUSH
8720: EMPTY
8721: LIST
8722: LIST
8723: LIST
8724: LIST
8725: LIST
8726: LIST
8727: LIST
8728: LIST
8729: LIST
8730: LIST
8731: LIST
8732: LIST
8733: LIST
8734: LIST
8735: LIST
8736: LIST
8737: LIST
8738: LIST
8739: LIST
8740: LIST
8741: LIST
8742: PUSH
8743: LD_INT 101
8745: PUSH
8746: LD_INT 102
8748: PUSH
8749: LD_INT 103
8751: PUSH
8752: LD_INT 105
8754: PUSH
8755: LD_INT 106
8757: PUSH
8758: LD_INT 108
8760: PUSH
8761: LD_INT 109
8763: PUSH
8764: LD_INT 112
8766: PUSH
8767: LD_INT 114
8769: PUSH
8770: LD_INT 116
8772: PUSH
8773: LD_INT 117
8775: PUSH
8776: LD_INT 118
8778: PUSH
8779: EMPTY
8780: LIST
8781: LIST
8782: LIST
8783: LIST
8784: LIST
8785: LIST
8786: LIST
8787: LIST
8788: LIST
8789: LIST
8790: LIST
8791: LIST
8792: PUSH
8793: EMPTY
8794: LIST
8795: LIST
8796: ST_TO_ADDR
8797: GO 10896
8799: LD_INT 10
8801: DOUBLE
8802: EQUAL
8803: IFTRUE 8807
8805: GO 9003
8807: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
8808: LD_ADDR_VAR 0 2
8812: PUSH
8813: LD_INT 2
8815: PUSH
8816: LD_INT 4
8818: PUSH
8819: LD_INT 5
8821: PUSH
8822: LD_INT 6
8824: PUSH
8825: LD_INT 7
8827: PUSH
8828: LD_INT 8
8830: PUSH
8831: LD_INT 9
8833: PUSH
8834: LD_INT 10
8836: PUSH
8837: LD_INT 11
8839: PUSH
8840: LD_INT 12
8842: PUSH
8843: LD_INT 13
8845: PUSH
8846: LD_INT 14
8848: PUSH
8849: LD_INT 15
8851: PUSH
8852: LD_INT 16
8854: PUSH
8855: LD_INT 17
8857: PUSH
8858: LD_INT 18
8860: PUSH
8861: LD_INT 19
8863: PUSH
8864: LD_INT 20
8866: PUSH
8867: LD_INT 21
8869: PUSH
8870: LD_INT 22
8872: PUSH
8873: LD_INT 23
8875: PUSH
8876: LD_INT 24
8878: PUSH
8879: LD_INT 25
8881: PUSH
8882: LD_INT 26
8884: PUSH
8885: LD_INT 28
8887: PUSH
8888: LD_INT 30
8890: PUSH
8891: LD_INT 31
8893: PUSH
8894: LD_INT 32
8896: PUSH
8897: LD_INT 36
8899: PUSH
8900: EMPTY
8901: LIST
8902: LIST
8903: LIST
8904: LIST
8905: LIST
8906: LIST
8907: LIST
8908: LIST
8909: LIST
8910: LIST
8911: LIST
8912: LIST
8913: LIST
8914: LIST
8915: LIST
8916: LIST
8917: LIST
8918: LIST
8919: LIST
8920: LIST
8921: LIST
8922: LIST
8923: LIST
8924: LIST
8925: LIST
8926: LIST
8927: LIST
8928: LIST
8929: LIST
8930: PUSH
8931: LD_INT 101
8933: PUSH
8934: LD_INT 102
8936: PUSH
8937: LD_INT 103
8939: PUSH
8940: LD_INT 104
8942: PUSH
8943: LD_INT 105
8945: PUSH
8946: LD_INT 106
8948: PUSH
8949: LD_INT 107
8951: PUSH
8952: LD_INT 108
8954: PUSH
8955: LD_INT 109
8957: PUSH
8958: LD_INT 110
8960: PUSH
8961: LD_INT 111
8963: PUSH
8964: LD_INT 112
8966: PUSH
8967: LD_INT 114
8969: PUSH
8970: LD_INT 116
8972: PUSH
8973: LD_INT 117
8975: PUSH
8976: LD_INT 118
8978: PUSH
8979: EMPTY
8980: LIST
8981: LIST
8982: LIST
8983: LIST
8984: LIST
8985: LIST
8986: LIST
8987: LIST
8988: LIST
8989: LIST
8990: LIST
8991: LIST
8992: LIST
8993: LIST
8994: LIST
8995: LIST
8996: PUSH
8997: EMPTY
8998: LIST
8999: LIST
9000: ST_TO_ADDR
9001: GO 10896
9003: LD_INT 11
9005: DOUBLE
9006: EQUAL
9007: IFTRUE 9011
9009: GO 9215
9011: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
9012: LD_ADDR_VAR 0 2
9016: PUSH
9017: LD_INT 2
9019: PUSH
9020: LD_INT 3
9022: PUSH
9023: LD_INT 4
9025: PUSH
9026: LD_INT 5
9028: PUSH
9029: LD_INT 6
9031: PUSH
9032: LD_INT 7
9034: PUSH
9035: LD_INT 8
9037: PUSH
9038: LD_INT 9
9040: PUSH
9041: LD_INT 10
9043: PUSH
9044: LD_INT 11
9046: PUSH
9047: LD_INT 12
9049: PUSH
9050: LD_INT 13
9052: PUSH
9053: LD_INT 14
9055: PUSH
9056: LD_INT 15
9058: PUSH
9059: LD_INT 16
9061: PUSH
9062: LD_INT 17
9064: PUSH
9065: LD_INT 18
9067: PUSH
9068: LD_INT 19
9070: PUSH
9071: LD_INT 20
9073: PUSH
9074: LD_INT 21
9076: PUSH
9077: LD_INT 22
9079: PUSH
9080: LD_INT 23
9082: PUSH
9083: LD_INT 24
9085: PUSH
9086: LD_INT 25
9088: PUSH
9089: LD_INT 26
9091: PUSH
9092: LD_INT 28
9094: PUSH
9095: LD_INT 30
9097: PUSH
9098: LD_INT 31
9100: PUSH
9101: LD_INT 32
9103: PUSH
9104: LD_INT 34
9106: PUSH
9107: LD_INT 36
9109: PUSH
9110: EMPTY
9111: LIST
9112: LIST
9113: LIST
9114: LIST
9115: LIST
9116: LIST
9117: LIST
9118: LIST
9119: LIST
9120: LIST
9121: LIST
9122: LIST
9123: LIST
9124: LIST
9125: LIST
9126: LIST
9127: LIST
9128: LIST
9129: LIST
9130: LIST
9131: LIST
9132: LIST
9133: LIST
9134: LIST
9135: LIST
9136: LIST
9137: LIST
9138: LIST
9139: LIST
9140: LIST
9141: LIST
9142: PUSH
9143: LD_INT 101
9145: PUSH
9146: LD_INT 102
9148: PUSH
9149: LD_INT 103
9151: PUSH
9152: LD_INT 104
9154: PUSH
9155: LD_INT 105
9157: PUSH
9158: LD_INT 106
9160: PUSH
9161: LD_INT 107
9163: PUSH
9164: LD_INT 108
9166: PUSH
9167: LD_INT 109
9169: PUSH
9170: LD_INT 110
9172: PUSH
9173: LD_INT 111
9175: PUSH
9176: LD_INT 112
9178: PUSH
9179: LD_INT 114
9181: PUSH
9182: LD_INT 116
9184: PUSH
9185: LD_INT 117
9187: PUSH
9188: LD_INT 118
9190: PUSH
9191: EMPTY
9192: LIST
9193: LIST
9194: LIST
9195: LIST
9196: LIST
9197: LIST
9198: LIST
9199: LIST
9200: LIST
9201: LIST
9202: LIST
9203: LIST
9204: LIST
9205: LIST
9206: LIST
9207: LIST
9208: PUSH
9209: EMPTY
9210: LIST
9211: LIST
9212: ST_TO_ADDR
9213: GO 10896
9215: LD_INT 12
9217: DOUBLE
9218: EQUAL
9219: IFTRUE 9223
9221: GO 9443
9223: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
9224: LD_ADDR_VAR 0 2
9228: PUSH
9229: LD_INT 1
9231: PUSH
9232: LD_INT 2
9234: PUSH
9235: LD_INT 3
9237: PUSH
9238: LD_INT 4
9240: PUSH
9241: LD_INT 5
9243: PUSH
9244: LD_INT 6
9246: PUSH
9247: LD_INT 7
9249: PUSH
9250: LD_INT 8
9252: PUSH
9253: LD_INT 9
9255: PUSH
9256: LD_INT 10
9258: PUSH
9259: LD_INT 11
9261: PUSH
9262: LD_INT 12
9264: PUSH
9265: LD_INT 13
9267: PUSH
9268: LD_INT 14
9270: PUSH
9271: LD_INT 15
9273: PUSH
9274: LD_INT 16
9276: PUSH
9277: LD_INT 17
9279: PUSH
9280: LD_INT 18
9282: PUSH
9283: LD_INT 19
9285: PUSH
9286: LD_INT 20
9288: PUSH
9289: LD_INT 21
9291: PUSH
9292: LD_INT 22
9294: PUSH
9295: LD_INT 23
9297: PUSH
9298: LD_INT 24
9300: PUSH
9301: LD_INT 25
9303: PUSH
9304: LD_INT 26
9306: PUSH
9307: LD_INT 27
9309: PUSH
9310: LD_INT 28
9312: PUSH
9313: LD_INT 30
9315: PUSH
9316: LD_INT 31
9318: PUSH
9319: LD_INT 32
9321: PUSH
9322: LD_INT 33
9324: PUSH
9325: LD_INT 34
9327: PUSH
9328: LD_INT 36
9330: PUSH
9331: EMPTY
9332: LIST
9333: LIST
9334: LIST
9335: LIST
9336: LIST
9337: LIST
9338: LIST
9339: LIST
9340: LIST
9341: LIST
9342: LIST
9343: LIST
9344: LIST
9345: LIST
9346: LIST
9347: LIST
9348: LIST
9349: LIST
9350: LIST
9351: LIST
9352: LIST
9353: LIST
9354: LIST
9355: LIST
9356: LIST
9357: LIST
9358: LIST
9359: LIST
9360: LIST
9361: LIST
9362: LIST
9363: LIST
9364: LIST
9365: LIST
9366: PUSH
9367: LD_INT 101
9369: PUSH
9370: LD_INT 102
9372: PUSH
9373: LD_INT 103
9375: PUSH
9376: LD_INT 104
9378: PUSH
9379: LD_INT 105
9381: PUSH
9382: LD_INT 106
9384: PUSH
9385: LD_INT 107
9387: PUSH
9388: LD_INT 108
9390: PUSH
9391: LD_INT 109
9393: PUSH
9394: LD_INT 110
9396: PUSH
9397: LD_INT 111
9399: PUSH
9400: LD_INT 112
9402: PUSH
9403: LD_INT 113
9405: PUSH
9406: LD_INT 114
9408: PUSH
9409: LD_INT 116
9411: PUSH
9412: LD_INT 117
9414: PUSH
9415: LD_INT 118
9417: PUSH
9418: EMPTY
9419: LIST
9420: LIST
9421: LIST
9422: LIST
9423: LIST
9424: LIST
9425: LIST
9426: LIST
9427: LIST
9428: LIST
9429: LIST
9430: LIST
9431: LIST
9432: LIST
9433: LIST
9434: LIST
9435: LIST
9436: PUSH
9437: EMPTY
9438: LIST
9439: LIST
9440: ST_TO_ADDR
9441: GO 10896
9443: LD_INT 13
9445: DOUBLE
9446: EQUAL
9447: IFTRUE 9451
9449: GO 9659
9451: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
9452: LD_ADDR_VAR 0 2
9456: PUSH
9457: LD_INT 1
9459: PUSH
9460: LD_INT 2
9462: PUSH
9463: LD_INT 3
9465: PUSH
9466: LD_INT 4
9468: PUSH
9469: LD_INT 5
9471: PUSH
9472: LD_INT 8
9474: PUSH
9475: LD_INT 9
9477: PUSH
9478: LD_INT 10
9480: PUSH
9481: LD_INT 11
9483: PUSH
9484: LD_INT 12
9486: PUSH
9487: LD_INT 14
9489: PUSH
9490: LD_INT 15
9492: PUSH
9493: LD_INT 16
9495: PUSH
9496: LD_INT 17
9498: PUSH
9499: LD_INT 18
9501: PUSH
9502: LD_INT 19
9504: PUSH
9505: LD_INT 20
9507: PUSH
9508: LD_INT 21
9510: PUSH
9511: LD_INT 22
9513: PUSH
9514: LD_INT 23
9516: PUSH
9517: LD_INT 24
9519: PUSH
9520: LD_INT 25
9522: PUSH
9523: LD_INT 26
9525: PUSH
9526: LD_INT 27
9528: PUSH
9529: LD_INT 28
9531: PUSH
9532: LD_INT 30
9534: PUSH
9535: LD_INT 31
9537: PUSH
9538: LD_INT 32
9540: PUSH
9541: LD_INT 33
9543: PUSH
9544: LD_INT 34
9546: PUSH
9547: LD_INT 36
9549: PUSH
9550: EMPTY
9551: LIST
9552: LIST
9553: LIST
9554: LIST
9555: LIST
9556: LIST
9557: LIST
9558: LIST
9559: LIST
9560: LIST
9561: LIST
9562: LIST
9563: LIST
9564: LIST
9565: LIST
9566: LIST
9567: LIST
9568: LIST
9569: LIST
9570: LIST
9571: LIST
9572: LIST
9573: LIST
9574: LIST
9575: LIST
9576: LIST
9577: LIST
9578: LIST
9579: LIST
9580: LIST
9581: LIST
9582: PUSH
9583: LD_INT 101
9585: PUSH
9586: LD_INT 102
9588: PUSH
9589: LD_INT 103
9591: PUSH
9592: LD_INT 104
9594: PUSH
9595: LD_INT 105
9597: PUSH
9598: LD_INT 106
9600: PUSH
9601: LD_INT 107
9603: PUSH
9604: LD_INT 108
9606: PUSH
9607: LD_INT 109
9609: PUSH
9610: LD_INT 110
9612: PUSH
9613: LD_INT 111
9615: PUSH
9616: LD_INT 112
9618: PUSH
9619: LD_INT 113
9621: PUSH
9622: LD_INT 114
9624: PUSH
9625: LD_INT 116
9627: PUSH
9628: LD_INT 117
9630: PUSH
9631: LD_INT 118
9633: PUSH
9634: EMPTY
9635: LIST
9636: LIST
9637: LIST
9638: LIST
9639: LIST
9640: LIST
9641: LIST
9642: LIST
9643: LIST
9644: LIST
9645: LIST
9646: LIST
9647: LIST
9648: LIST
9649: LIST
9650: LIST
9651: LIST
9652: PUSH
9653: EMPTY
9654: LIST
9655: LIST
9656: ST_TO_ADDR
9657: GO 10896
9659: LD_INT 14
9661: DOUBLE
9662: EQUAL
9663: IFTRUE 9667
9665: GO 9891
9667: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
9668: LD_ADDR_VAR 0 2
9672: PUSH
9673: LD_INT 1
9675: PUSH
9676: LD_INT 2
9678: PUSH
9679: LD_INT 3
9681: PUSH
9682: LD_INT 4
9684: PUSH
9685: LD_INT 5
9687: PUSH
9688: LD_INT 6
9690: PUSH
9691: LD_INT 7
9693: PUSH
9694: LD_INT 8
9696: PUSH
9697: LD_INT 9
9699: PUSH
9700: LD_INT 10
9702: PUSH
9703: LD_INT 11
9705: PUSH
9706: LD_INT 12
9708: PUSH
9709: LD_INT 13
9711: PUSH
9712: LD_INT 14
9714: PUSH
9715: LD_INT 15
9717: PUSH
9718: LD_INT 16
9720: PUSH
9721: LD_INT 17
9723: PUSH
9724: LD_INT 18
9726: PUSH
9727: LD_INT 19
9729: PUSH
9730: LD_INT 20
9732: PUSH
9733: LD_INT 21
9735: PUSH
9736: LD_INT 22
9738: PUSH
9739: LD_INT 23
9741: PUSH
9742: LD_INT 24
9744: PUSH
9745: LD_INT 25
9747: PUSH
9748: LD_INT 26
9750: PUSH
9751: LD_INT 27
9753: PUSH
9754: LD_INT 28
9756: PUSH
9757: LD_INT 29
9759: PUSH
9760: LD_INT 30
9762: PUSH
9763: LD_INT 31
9765: PUSH
9766: LD_INT 32
9768: PUSH
9769: LD_INT 33
9771: PUSH
9772: LD_INT 34
9774: PUSH
9775: LD_INT 36
9777: PUSH
9778: EMPTY
9779: LIST
9780: LIST
9781: LIST
9782: LIST
9783: LIST
9784: LIST
9785: LIST
9786: LIST
9787: LIST
9788: LIST
9789: LIST
9790: LIST
9791: LIST
9792: LIST
9793: LIST
9794: LIST
9795: LIST
9796: LIST
9797: LIST
9798: LIST
9799: LIST
9800: LIST
9801: LIST
9802: LIST
9803: LIST
9804: LIST
9805: LIST
9806: LIST
9807: LIST
9808: LIST
9809: LIST
9810: LIST
9811: LIST
9812: LIST
9813: LIST
9814: PUSH
9815: LD_INT 101
9817: PUSH
9818: LD_INT 102
9820: PUSH
9821: LD_INT 103
9823: PUSH
9824: LD_INT 104
9826: PUSH
9827: LD_INT 105
9829: PUSH
9830: LD_INT 106
9832: PUSH
9833: LD_INT 107
9835: PUSH
9836: LD_INT 108
9838: PUSH
9839: LD_INT 109
9841: PUSH
9842: LD_INT 110
9844: PUSH
9845: LD_INT 111
9847: PUSH
9848: LD_INT 112
9850: PUSH
9851: LD_INT 113
9853: PUSH
9854: LD_INT 114
9856: PUSH
9857: LD_INT 116
9859: PUSH
9860: LD_INT 117
9862: PUSH
9863: LD_INT 118
9865: PUSH
9866: EMPTY
9867: LIST
9868: LIST
9869: LIST
9870: LIST
9871: LIST
9872: LIST
9873: LIST
9874: LIST
9875: LIST
9876: LIST
9877: LIST
9878: LIST
9879: LIST
9880: LIST
9881: LIST
9882: LIST
9883: LIST
9884: PUSH
9885: EMPTY
9886: LIST
9887: LIST
9888: ST_TO_ADDR
9889: GO 10896
9891: LD_INT 15
9893: DOUBLE
9894: EQUAL
9895: IFTRUE 9899
9897: GO 10123
9899: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
9900: LD_ADDR_VAR 0 2
9904: PUSH
9905: LD_INT 1
9907: PUSH
9908: LD_INT 2
9910: PUSH
9911: LD_INT 3
9913: PUSH
9914: LD_INT 4
9916: PUSH
9917: LD_INT 5
9919: PUSH
9920: LD_INT 6
9922: PUSH
9923: LD_INT 7
9925: PUSH
9926: LD_INT 8
9928: PUSH
9929: LD_INT 9
9931: PUSH
9932: LD_INT 10
9934: PUSH
9935: LD_INT 11
9937: PUSH
9938: LD_INT 12
9940: PUSH
9941: LD_INT 13
9943: PUSH
9944: LD_INT 14
9946: PUSH
9947: LD_INT 15
9949: PUSH
9950: LD_INT 16
9952: PUSH
9953: LD_INT 17
9955: PUSH
9956: LD_INT 18
9958: PUSH
9959: LD_INT 19
9961: PUSH
9962: LD_INT 20
9964: PUSH
9965: LD_INT 21
9967: PUSH
9968: LD_INT 22
9970: PUSH
9971: LD_INT 23
9973: PUSH
9974: LD_INT 24
9976: PUSH
9977: LD_INT 25
9979: PUSH
9980: LD_INT 26
9982: PUSH
9983: LD_INT 27
9985: PUSH
9986: LD_INT 28
9988: PUSH
9989: LD_INT 29
9991: PUSH
9992: LD_INT 30
9994: PUSH
9995: LD_INT 31
9997: PUSH
9998: LD_INT 32
10000: PUSH
10001: LD_INT 33
10003: PUSH
10004: LD_INT 34
10006: PUSH
10007: LD_INT 36
10009: PUSH
10010: EMPTY
10011: LIST
10012: LIST
10013: LIST
10014: LIST
10015: LIST
10016: LIST
10017: LIST
10018: LIST
10019: LIST
10020: LIST
10021: LIST
10022: LIST
10023: LIST
10024: LIST
10025: LIST
10026: LIST
10027: LIST
10028: LIST
10029: LIST
10030: LIST
10031: LIST
10032: LIST
10033: LIST
10034: LIST
10035: LIST
10036: LIST
10037: LIST
10038: LIST
10039: LIST
10040: LIST
10041: LIST
10042: LIST
10043: LIST
10044: LIST
10045: LIST
10046: PUSH
10047: LD_INT 101
10049: PUSH
10050: LD_INT 102
10052: PUSH
10053: LD_INT 103
10055: PUSH
10056: LD_INT 104
10058: PUSH
10059: LD_INT 105
10061: PUSH
10062: LD_INT 106
10064: PUSH
10065: LD_INT 107
10067: PUSH
10068: LD_INT 108
10070: PUSH
10071: LD_INT 109
10073: PUSH
10074: LD_INT 110
10076: PUSH
10077: LD_INT 111
10079: PUSH
10080: LD_INT 112
10082: PUSH
10083: LD_INT 113
10085: PUSH
10086: LD_INT 114
10088: PUSH
10089: LD_INT 116
10091: PUSH
10092: LD_INT 117
10094: PUSH
10095: LD_INT 118
10097: PUSH
10098: EMPTY
10099: LIST
10100: LIST
10101: LIST
10102: LIST
10103: LIST
10104: LIST
10105: LIST
10106: LIST
10107: LIST
10108: LIST
10109: LIST
10110: LIST
10111: LIST
10112: LIST
10113: LIST
10114: LIST
10115: LIST
10116: PUSH
10117: EMPTY
10118: LIST
10119: LIST
10120: ST_TO_ADDR
10121: GO 10896
10123: LD_INT 16
10125: DOUBLE
10126: EQUAL
10127: IFTRUE 10131
10129: GO 10267
10131: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
10132: LD_ADDR_VAR 0 2
10136: PUSH
10137: LD_INT 2
10139: PUSH
10140: LD_INT 4
10142: PUSH
10143: LD_INT 5
10145: PUSH
10146: LD_INT 7
10148: PUSH
10149: LD_INT 11
10151: PUSH
10152: LD_INT 12
10154: PUSH
10155: LD_INT 15
10157: PUSH
10158: LD_INT 16
10160: PUSH
10161: LD_INT 20
10163: PUSH
10164: LD_INT 21
10166: PUSH
10167: LD_INT 22
10169: PUSH
10170: LD_INT 23
10172: PUSH
10173: LD_INT 25
10175: PUSH
10176: LD_INT 26
10178: PUSH
10179: LD_INT 30
10181: PUSH
10182: LD_INT 31
10184: PUSH
10185: LD_INT 32
10187: PUSH
10188: LD_INT 33
10190: PUSH
10191: LD_INT 34
10193: PUSH
10194: EMPTY
10195: LIST
10196: LIST
10197: LIST
10198: LIST
10199: LIST
10200: LIST
10201: LIST
10202: LIST
10203: LIST
10204: LIST
10205: LIST
10206: LIST
10207: LIST
10208: LIST
10209: LIST
10210: LIST
10211: LIST
10212: LIST
10213: LIST
10214: PUSH
10215: LD_INT 101
10217: PUSH
10218: LD_INT 102
10220: PUSH
10221: LD_INT 103
10223: PUSH
10224: LD_INT 106
10226: PUSH
10227: LD_INT 108
10229: PUSH
10230: LD_INT 112
10232: PUSH
10233: LD_INT 113
10235: PUSH
10236: LD_INT 114
10238: PUSH
10239: LD_INT 116
10241: PUSH
10242: LD_INT 117
10244: PUSH
10245: LD_INT 118
10247: PUSH
10248: EMPTY
10249: LIST
10250: LIST
10251: LIST
10252: LIST
10253: LIST
10254: LIST
10255: LIST
10256: LIST
10257: LIST
10258: LIST
10259: LIST
10260: PUSH
10261: EMPTY
10262: LIST
10263: LIST
10264: ST_TO_ADDR
10265: GO 10896
10267: LD_INT 17
10269: DOUBLE
10270: EQUAL
10271: IFTRUE 10275
10273: GO 10499
10275: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
10276: LD_ADDR_VAR 0 2
10280: PUSH
10281: LD_INT 1
10283: PUSH
10284: LD_INT 2
10286: PUSH
10287: LD_INT 3
10289: PUSH
10290: LD_INT 4
10292: PUSH
10293: LD_INT 5
10295: PUSH
10296: LD_INT 6
10298: PUSH
10299: LD_INT 7
10301: PUSH
10302: LD_INT 8
10304: PUSH
10305: LD_INT 9
10307: PUSH
10308: LD_INT 10
10310: PUSH
10311: LD_INT 11
10313: PUSH
10314: LD_INT 12
10316: PUSH
10317: LD_INT 13
10319: PUSH
10320: LD_INT 14
10322: PUSH
10323: LD_INT 15
10325: PUSH
10326: LD_INT 16
10328: PUSH
10329: LD_INT 17
10331: PUSH
10332: LD_INT 18
10334: PUSH
10335: LD_INT 19
10337: PUSH
10338: LD_INT 20
10340: PUSH
10341: LD_INT 21
10343: PUSH
10344: LD_INT 22
10346: PUSH
10347: LD_INT 23
10349: PUSH
10350: LD_INT 24
10352: PUSH
10353: LD_INT 25
10355: PUSH
10356: LD_INT 26
10358: PUSH
10359: LD_INT 27
10361: PUSH
10362: LD_INT 28
10364: PUSH
10365: LD_INT 29
10367: PUSH
10368: LD_INT 30
10370: PUSH
10371: LD_INT 31
10373: PUSH
10374: LD_INT 32
10376: PUSH
10377: LD_INT 33
10379: PUSH
10380: LD_INT 34
10382: PUSH
10383: LD_INT 36
10385: PUSH
10386: EMPTY
10387: LIST
10388: LIST
10389: LIST
10390: LIST
10391: LIST
10392: LIST
10393: LIST
10394: LIST
10395: LIST
10396: LIST
10397: LIST
10398: LIST
10399: LIST
10400: LIST
10401: LIST
10402: LIST
10403: LIST
10404: LIST
10405: LIST
10406: LIST
10407: LIST
10408: LIST
10409: LIST
10410: LIST
10411: LIST
10412: LIST
10413: LIST
10414: LIST
10415: LIST
10416: LIST
10417: LIST
10418: LIST
10419: LIST
10420: LIST
10421: LIST
10422: PUSH
10423: LD_INT 101
10425: PUSH
10426: LD_INT 102
10428: PUSH
10429: LD_INT 103
10431: PUSH
10432: LD_INT 104
10434: PUSH
10435: LD_INT 105
10437: PUSH
10438: LD_INT 106
10440: PUSH
10441: LD_INT 107
10443: PUSH
10444: LD_INT 108
10446: PUSH
10447: LD_INT 109
10449: PUSH
10450: LD_INT 110
10452: PUSH
10453: LD_INT 111
10455: PUSH
10456: LD_INT 112
10458: PUSH
10459: LD_INT 113
10461: PUSH
10462: LD_INT 114
10464: PUSH
10465: LD_INT 116
10467: PUSH
10468: LD_INT 117
10470: PUSH
10471: LD_INT 118
10473: PUSH
10474: EMPTY
10475: LIST
10476: LIST
10477: LIST
10478: LIST
10479: LIST
10480: LIST
10481: LIST
10482: LIST
10483: LIST
10484: LIST
10485: LIST
10486: LIST
10487: LIST
10488: LIST
10489: LIST
10490: LIST
10491: LIST
10492: PUSH
10493: EMPTY
10494: LIST
10495: LIST
10496: ST_TO_ADDR
10497: GO 10896
10499: LD_INT 18
10501: DOUBLE
10502: EQUAL
10503: IFTRUE 10507
10505: GO 10655
10507: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
10508: LD_ADDR_VAR 0 2
10512: PUSH
10513: LD_INT 2
10515: PUSH
10516: LD_INT 4
10518: PUSH
10519: LD_INT 5
10521: PUSH
10522: LD_INT 7
10524: PUSH
10525: LD_INT 11
10527: PUSH
10528: LD_INT 12
10530: PUSH
10531: LD_INT 15
10533: PUSH
10534: LD_INT 16
10536: PUSH
10537: LD_INT 20
10539: PUSH
10540: LD_INT 21
10542: PUSH
10543: LD_INT 22
10545: PUSH
10546: LD_INT 23
10548: PUSH
10549: LD_INT 25
10551: PUSH
10552: LD_INT 26
10554: PUSH
10555: LD_INT 30
10557: PUSH
10558: LD_INT 31
10560: PUSH
10561: LD_INT 32
10563: PUSH
10564: LD_INT 33
10566: PUSH
10567: LD_INT 34
10569: PUSH
10570: LD_INT 35
10572: PUSH
10573: LD_INT 36
10575: PUSH
10576: EMPTY
10577: LIST
10578: LIST
10579: LIST
10580: LIST
10581: LIST
10582: LIST
10583: LIST
10584: LIST
10585: LIST
10586: LIST
10587: LIST
10588: LIST
10589: LIST
10590: LIST
10591: LIST
10592: LIST
10593: LIST
10594: LIST
10595: LIST
10596: LIST
10597: LIST
10598: PUSH
10599: LD_INT 101
10601: PUSH
10602: LD_INT 102
10604: PUSH
10605: LD_INT 103
10607: PUSH
10608: LD_INT 106
10610: PUSH
10611: LD_INT 108
10613: PUSH
10614: LD_INT 112
10616: PUSH
10617: LD_INT 113
10619: PUSH
10620: LD_INT 114
10622: PUSH
10623: LD_INT 115
10625: PUSH
10626: LD_INT 116
10628: PUSH
10629: LD_INT 117
10631: PUSH
10632: LD_INT 118
10634: PUSH
10635: EMPTY
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: LIST
10641: LIST
10642: LIST
10643: LIST
10644: LIST
10645: LIST
10646: LIST
10647: LIST
10648: PUSH
10649: EMPTY
10650: LIST
10651: LIST
10652: ST_TO_ADDR
10653: GO 10896
10655: LD_INT 19
10657: DOUBLE
10658: EQUAL
10659: IFTRUE 10663
10661: GO 10895
10663: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
10664: LD_ADDR_VAR 0 2
10668: PUSH
10669: LD_INT 1
10671: PUSH
10672: LD_INT 2
10674: PUSH
10675: LD_INT 3
10677: PUSH
10678: LD_INT 4
10680: PUSH
10681: LD_INT 5
10683: PUSH
10684: LD_INT 6
10686: PUSH
10687: LD_INT 7
10689: PUSH
10690: LD_INT 8
10692: PUSH
10693: LD_INT 9
10695: PUSH
10696: LD_INT 10
10698: PUSH
10699: LD_INT 11
10701: PUSH
10702: LD_INT 12
10704: PUSH
10705: LD_INT 13
10707: PUSH
10708: LD_INT 14
10710: PUSH
10711: LD_INT 15
10713: PUSH
10714: LD_INT 16
10716: PUSH
10717: LD_INT 17
10719: PUSH
10720: LD_INT 18
10722: PUSH
10723: LD_INT 19
10725: PUSH
10726: LD_INT 20
10728: PUSH
10729: LD_INT 21
10731: PUSH
10732: LD_INT 22
10734: PUSH
10735: LD_INT 23
10737: PUSH
10738: LD_INT 24
10740: PUSH
10741: LD_INT 25
10743: PUSH
10744: LD_INT 26
10746: PUSH
10747: LD_INT 27
10749: PUSH
10750: LD_INT 28
10752: PUSH
10753: LD_INT 29
10755: PUSH
10756: LD_INT 30
10758: PUSH
10759: LD_INT 31
10761: PUSH
10762: LD_INT 32
10764: PUSH
10765: LD_INT 33
10767: PUSH
10768: LD_INT 34
10770: PUSH
10771: LD_INT 35
10773: PUSH
10774: LD_INT 36
10776: PUSH
10777: EMPTY
10778: LIST
10779: LIST
10780: LIST
10781: LIST
10782: LIST
10783: LIST
10784: LIST
10785: LIST
10786: LIST
10787: LIST
10788: LIST
10789: LIST
10790: LIST
10791: LIST
10792: LIST
10793: LIST
10794: LIST
10795: LIST
10796: LIST
10797: LIST
10798: LIST
10799: LIST
10800: LIST
10801: LIST
10802: LIST
10803: LIST
10804: LIST
10805: LIST
10806: LIST
10807: LIST
10808: LIST
10809: LIST
10810: LIST
10811: LIST
10812: LIST
10813: LIST
10814: PUSH
10815: LD_INT 101
10817: PUSH
10818: LD_INT 102
10820: PUSH
10821: LD_INT 103
10823: PUSH
10824: LD_INT 104
10826: PUSH
10827: LD_INT 105
10829: PUSH
10830: LD_INT 106
10832: PUSH
10833: LD_INT 107
10835: PUSH
10836: LD_INT 108
10838: PUSH
10839: LD_INT 109
10841: PUSH
10842: LD_INT 110
10844: PUSH
10845: LD_INT 111
10847: PUSH
10848: LD_INT 112
10850: PUSH
10851: LD_INT 113
10853: PUSH
10854: LD_INT 114
10856: PUSH
10857: LD_INT 115
10859: PUSH
10860: LD_INT 116
10862: PUSH
10863: LD_INT 117
10865: PUSH
10866: LD_INT 118
10868: PUSH
10869: EMPTY
10870: LIST
10871: LIST
10872: LIST
10873: LIST
10874: LIST
10875: LIST
10876: LIST
10877: LIST
10878: LIST
10879: LIST
10880: LIST
10881: LIST
10882: LIST
10883: LIST
10884: LIST
10885: LIST
10886: LIST
10887: LIST
10888: PUSH
10889: EMPTY
10890: LIST
10891: LIST
10892: ST_TO_ADDR
10893: GO 10896
10895: POP
// end else
10896: GO 11127
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
10898: LD_ADDR_VAR 0 2
10902: PUSH
10903: LD_INT 1
10905: PUSH
10906: LD_INT 2
10908: PUSH
10909: LD_INT 3
10911: PUSH
10912: LD_INT 4
10914: PUSH
10915: LD_INT 5
10917: PUSH
10918: LD_INT 6
10920: PUSH
10921: LD_INT 7
10923: PUSH
10924: LD_INT 8
10926: PUSH
10927: LD_INT 9
10929: PUSH
10930: LD_INT 10
10932: PUSH
10933: LD_INT 11
10935: PUSH
10936: LD_INT 12
10938: PUSH
10939: LD_INT 13
10941: PUSH
10942: LD_INT 14
10944: PUSH
10945: LD_INT 15
10947: PUSH
10948: LD_INT 16
10950: PUSH
10951: LD_INT 17
10953: PUSH
10954: LD_INT 18
10956: PUSH
10957: LD_INT 19
10959: PUSH
10960: LD_INT 20
10962: PUSH
10963: LD_INT 21
10965: PUSH
10966: LD_INT 22
10968: PUSH
10969: LD_INT 23
10971: PUSH
10972: LD_INT 24
10974: PUSH
10975: LD_INT 25
10977: PUSH
10978: LD_INT 26
10980: PUSH
10981: LD_INT 27
10983: PUSH
10984: LD_INT 28
10986: PUSH
10987: LD_INT 29
10989: PUSH
10990: LD_INT 30
10992: PUSH
10993: LD_INT 31
10995: PUSH
10996: LD_INT 32
10998: PUSH
10999: LD_INT 33
11001: PUSH
11002: LD_INT 34
11004: PUSH
11005: LD_INT 35
11007: PUSH
11008: LD_INT 36
11010: PUSH
11011: EMPTY
11012: LIST
11013: LIST
11014: LIST
11015: LIST
11016: LIST
11017: LIST
11018: LIST
11019: LIST
11020: LIST
11021: LIST
11022: LIST
11023: LIST
11024: LIST
11025: LIST
11026: LIST
11027: LIST
11028: LIST
11029: LIST
11030: LIST
11031: LIST
11032: LIST
11033: LIST
11034: LIST
11035: LIST
11036: LIST
11037: LIST
11038: LIST
11039: LIST
11040: LIST
11041: LIST
11042: LIST
11043: LIST
11044: LIST
11045: LIST
11046: LIST
11047: LIST
11048: PUSH
11049: LD_INT 101
11051: PUSH
11052: LD_INT 102
11054: PUSH
11055: LD_INT 103
11057: PUSH
11058: LD_INT 104
11060: PUSH
11061: LD_INT 105
11063: PUSH
11064: LD_INT 106
11066: PUSH
11067: LD_INT 107
11069: PUSH
11070: LD_INT 108
11072: PUSH
11073: LD_INT 109
11075: PUSH
11076: LD_INT 110
11078: PUSH
11079: LD_INT 111
11081: PUSH
11082: LD_INT 112
11084: PUSH
11085: LD_INT 113
11087: PUSH
11088: LD_INT 114
11090: PUSH
11091: LD_INT 115
11093: PUSH
11094: LD_INT 116
11096: PUSH
11097: LD_INT 117
11099: PUSH
11100: LD_INT 118
11102: PUSH
11103: EMPTY
11104: LIST
11105: LIST
11106: LIST
11107: LIST
11108: LIST
11109: LIST
11110: LIST
11111: LIST
11112: LIST
11113: LIST
11114: LIST
11115: LIST
11116: LIST
11117: LIST
11118: LIST
11119: LIST
11120: LIST
11121: LIST
11122: PUSH
11123: EMPTY
11124: LIST
11125: LIST
11126: ST_TO_ADDR
// if result then
11127: LD_VAR 0 2
11131: IFFALSE 11917
// begin normal :=  ;
11133: LD_ADDR_VAR 0 5
11137: PUSH
11138: LD_STRING 
11140: ST_TO_ADDR
// hardcore :=  ;
11141: LD_ADDR_VAR 0 6
11145: PUSH
11146: LD_STRING 
11148: ST_TO_ADDR
// active :=  ;
11149: LD_ADDR_VAR 0 7
11153: PUSH
11154: LD_STRING 
11156: ST_TO_ADDR
// for i = 1 to normalCounter do
11157: LD_ADDR_VAR 0 8
11161: PUSH
11162: DOUBLE
11163: LD_INT 1
11165: DEC
11166: ST_TO_ADDR
11167: LD_EXP 27
11171: PUSH
11172: FOR_TO
11173: IFFALSE 11274
// begin tmp := 0 ;
11175: LD_ADDR_VAR 0 3
11179: PUSH
11180: LD_STRING 0
11182: ST_TO_ADDR
// if result [ 1 ] then
11183: LD_VAR 0 2
11187: PUSH
11188: LD_INT 1
11190: ARRAY
11191: IFFALSE 11256
// if result [ 1 ] [ 1 ] = i then
11193: LD_VAR 0 2
11197: PUSH
11198: LD_INT 1
11200: ARRAY
11201: PUSH
11202: LD_INT 1
11204: ARRAY
11205: PUSH
11206: LD_VAR 0 8
11210: EQUAL
11211: IFFALSE 11256
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
11213: LD_ADDR_VAR 0 2
11217: PUSH
11218: LD_VAR 0 2
11222: PPUSH
11223: LD_INT 1
11225: PPUSH
11226: LD_VAR 0 2
11230: PUSH
11231: LD_INT 1
11233: ARRAY
11234: PPUSH
11235: LD_INT 1
11237: PPUSH
11238: CALL_OW 3
11242: PPUSH
11243: CALL_OW 1
11247: ST_TO_ADDR
// tmp := 1 ;
11248: LD_ADDR_VAR 0 3
11252: PUSH
11253: LD_STRING 1
11255: ST_TO_ADDR
// end ; normal := normal & tmp ;
11256: LD_ADDR_VAR 0 5
11260: PUSH
11261: LD_VAR 0 5
11265: PUSH
11266: LD_VAR 0 3
11270: STR
11271: ST_TO_ADDR
// end ;
11272: GO 11172
11274: POP
11275: POP
// for i = 1 to hardcoreCounter do
11276: LD_ADDR_VAR 0 8
11280: PUSH
11281: DOUBLE
11282: LD_INT 1
11284: DEC
11285: ST_TO_ADDR
11286: LD_EXP 28
11290: PUSH
11291: FOR_TO
11292: IFFALSE 11397
// begin tmp := 0 ;
11294: LD_ADDR_VAR 0 3
11298: PUSH
11299: LD_STRING 0
11301: ST_TO_ADDR
// if result [ 2 ] then
11302: LD_VAR 0 2
11306: PUSH
11307: LD_INT 2
11309: ARRAY
11310: IFFALSE 11379
// if result [ 2 ] [ 1 ] = 100 + i then
11312: LD_VAR 0 2
11316: PUSH
11317: LD_INT 2
11319: ARRAY
11320: PUSH
11321: LD_INT 1
11323: ARRAY
11324: PUSH
11325: LD_INT 100
11327: PUSH
11328: LD_VAR 0 8
11332: PLUS
11333: EQUAL
11334: IFFALSE 11379
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
11336: LD_ADDR_VAR 0 2
11340: PUSH
11341: LD_VAR 0 2
11345: PPUSH
11346: LD_INT 2
11348: PPUSH
11349: LD_VAR 0 2
11353: PUSH
11354: LD_INT 2
11356: ARRAY
11357: PPUSH
11358: LD_INT 1
11360: PPUSH
11361: CALL_OW 3
11365: PPUSH
11366: CALL_OW 1
11370: ST_TO_ADDR
// tmp := 1 ;
11371: LD_ADDR_VAR 0 3
11375: PUSH
11376: LD_STRING 1
11378: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
11379: LD_ADDR_VAR 0 6
11383: PUSH
11384: LD_VAR 0 6
11388: PUSH
11389: LD_VAR 0 3
11393: STR
11394: ST_TO_ADDR
// end ;
11395: GO 11291
11397: POP
11398: POP
// if isGameLoad then
11399: LD_VAR 0 1
11403: IFFALSE 11878
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
11405: LD_ADDR_VAR 0 4
11409: PUSH
11410: LD_EXP 31
11414: PUSH
11415: LD_EXP 30
11419: PUSH
11420: LD_EXP 32
11424: PUSH
11425: LD_EXP 29
11429: PUSH
11430: LD_EXP 33
11434: PUSH
11435: LD_EXP 34
11439: PUSH
11440: LD_EXP 35
11444: PUSH
11445: LD_EXP 36
11449: PUSH
11450: LD_EXP 37
11454: PUSH
11455: LD_EXP 38
11459: PUSH
11460: LD_EXP 39
11464: PUSH
11465: LD_EXP 40
11469: PUSH
11470: LD_EXP 41
11474: PUSH
11475: LD_EXP 42
11479: PUSH
11480: LD_EXP 50
11484: PUSH
11485: LD_EXP 51
11489: PUSH
11490: LD_EXP 52
11494: PUSH
11495: LD_EXP 53
11499: PUSH
11500: LD_EXP 55
11504: PUSH
11505: LD_EXP 56
11509: PUSH
11510: LD_EXP 57
11514: PUSH
11515: LD_EXP 60
11519: PUSH
11520: LD_EXP 62
11524: PUSH
11525: LD_EXP 63
11529: PUSH
11530: LD_EXP 64
11534: PUSH
11535: LD_EXP 66
11539: PUSH
11540: LD_EXP 67
11544: PUSH
11545: LD_EXP 70
11549: PUSH
11550: LD_EXP 71
11554: PUSH
11555: LD_EXP 72
11559: PUSH
11560: LD_EXP 73
11564: PUSH
11565: LD_EXP 74
11569: PUSH
11570: LD_EXP 75
11574: PUSH
11575: LD_EXP 76
11579: PUSH
11580: LD_EXP 77
11584: PUSH
11585: LD_EXP 78
11589: PUSH
11590: LD_EXP 43
11594: PUSH
11595: LD_EXP 44
11599: PUSH
11600: LD_EXP 47
11604: PUSH
11605: LD_EXP 48
11609: PUSH
11610: LD_EXP 49
11614: PUSH
11615: LD_EXP 45
11619: PUSH
11620: LD_EXP 46
11624: PUSH
11625: LD_EXP 54
11629: PUSH
11630: LD_EXP 58
11634: PUSH
11635: LD_EXP 59
11639: PUSH
11640: LD_EXP 61
11644: PUSH
11645: LD_EXP 65
11649: PUSH
11650: LD_EXP 68
11654: PUSH
11655: LD_EXP 69
11659: PUSH
11660: LD_EXP 79
11664: PUSH
11665: LD_EXP 80
11669: PUSH
11670: LD_EXP 81
11674: PUSH
11675: LD_EXP 82
11679: PUSH
11680: EMPTY
11681: LIST
11682: LIST
11683: LIST
11684: LIST
11685: LIST
11686: LIST
11687: LIST
11688: LIST
11689: LIST
11690: LIST
11691: LIST
11692: LIST
11693: LIST
11694: LIST
11695: LIST
11696: LIST
11697: LIST
11698: LIST
11699: LIST
11700: LIST
11701: LIST
11702: LIST
11703: LIST
11704: LIST
11705: LIST
11706: LIST
11707: LIST
11708: LIST
11709: LIST
11710: LIST
11711: LIST
11712: LIST
11713: LIST
11714: LIST
11715: LIST
11716: LIST
11717: LIST
11718: LIST
11719: LIST
11720: LIST
11721: LIST
11722: LIST
11723: LIST
11724: LIST
11725: LIST
11726: LIST
11727: LIST
11728: LIST
11729: LIST
11730: LIST
11731: LIST
11732: LIST
11733: LIST
11734: LIST
11735: ST_TO_ADDR
// tmp :=  ;
11736: LD_ADDR_VAR 0 3
11740: PUSH
11741: LD_STRING 
11743: ST_TO_ADDR
// for i = 1 to normalCounter do
11744: LD_ADDR_VAR 0 8
11748: PUSH
11749: DOUBLE
11750: LD_INT 1
11752: DEC
11753: ST_TO_ADDR
11754: LD_EXP 27
11758: PUSH
11759: FOR_TO
11760: IFFALSE 11796
// begin if flags [ i ] then
11762: LD_VAR 0 4
11766: PUSH
11767: LD_VAR 0 8
11771: ARRAY
11772: IFFALSE 11794
// tmp := tmp & i & ; ;
11774: LD_ADDR_VAR 0 3
11778: PUSH
11779: LD_VAR 0 3
11783: PUSH
11784: LD_VAR 0 8
11788: STR
11789: PUSH
11790: LD_STRING ;
11792: STR
11793: ST_TO_ADDR
// end ;
11794: GO 11759
11796: POP
11797: POP
// for i = 1 to hardcoreCounter do
11798: LD_ADDR_VAR 0 8
11802: PUSH
11803: DOUBLE
11804: LD_INT 1
11806: DEC
11807: ST_TO_ADDR
11808: LD_EXP 28
11812: PUSH
11813: FOR_TO
11814: IFFALSE 11860
// begin if flags [ normalCounter + i ] then
11816: LD_VAR 0 4
11820: PUSH
11821: LD_EXP 27
11825: PUSH
11826: LD_VAR 0 8
11830: PLUS
11831: ARRAY
11832: IFFALSE 11858
// tmp := tmp & ( 100 + i ) & ; ;
11834: LD_ADDR_VAR 0 3
11838: PUSH
11839: LD_VAR 0 3
11843: PUSH
11844: LD_INT 100
11846: PUSH
11847: LD_VAR 0 8
11851: PLUS
11852: STR
11853: PUSH
11854: LD_STRING ;
11856: STR
11857: ST_TO_ADDR
// end ;
11858: GO 11813
11860: POP
11861: POP
// if tmp then
11862: LD_VAR 0 3
11866: IFFALSE 11878
// active := tmp ;
11868: LD_ADDR_VAR 0 7
11872: PUSH
11873: LD_VAR 0 3
11877: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
11878: LD_STRING getStreamItemsFromMission("
11880: PUSH
11881: LD_VAR 0 5
11885: STR
11886: PUSH
11887: LD_STRING ","
11889: STR
11890: PUSH
11891: LD_VAR 0 6
11895: STR
11896: PUSH
11897: LD_STRING ","
11899: STR
11900: PUSH
11901: LD_VAR 0 7
11905: STR
11906: PUSH
11907: LD_STRING ")
11909: STR
11910: PPUSH
11911: CALL_OW 559
// end else
11915: GO 11924
// ToLua ( getStreamItemsFromMission("","","") ) ;
11917: LD_STRING getStreamItemsFromMission("","","")
11919: PPUSH
11920: CALL_OW 559
// end ;
11924: LD_VAR 0 2
11928: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
11929: LD_EXP 26
11933: PUSH
11934: LD_EXP 31
11938: AND
11939: IFFALSE 12063
11941: GO 11943
11943: DISABLE
11944: LD_INT 0
11946: PPUSH
11947: PPUSH
// begin enable ;
11948: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
11949: LD_ADDR_VAR 0 2
11953: PUSH
11954: LD_INT 22
11956: PUSH
11957: LD_OWVAR 2
11961: PUSH
11962: EMPTY
11963: LIST
11964: LIST
11965: PUSH
11966: LD_INT 2
11968: PUSH
11969: LD_INT 34
11971: PUSH
11972: LD_INT 7
11974: PUSH
11975: EMPTY
11976: LIST
11977: LIST
11978: PUSH
11979: LD_INT 34
11981: PUSH
11982: LD_INT 45
11984: PUSH
11985: EMPTY
11986: LIST
11987: LIST
11988: PUSH
11989: LD_INT 34
11991: PUSH
11992: LD_INT 28
11994: PUSH
11995: EMPTY
11996: LIST
11997: LIST
11998: PUSH
11999: LD_INT 34
12001: PUSH
12002: LD_INT 47
12004: PUSH
12005: EMPTY
12006: LIST
12007: LIST
12008: PUSH
12009: EMPTY
12010: LIST
12011: LIST
12012: LIST
12013: LIST
12014: LIST
12015: PUSH
12016: EMPTY
12017: LIST
12018: LIST
12019: PPUSH
12020: CALL_OW 69
12024: ST_TO_ADDR
// if not tmp then
12025: LD_VAR 0 2
12029: NOT
12030: IFFALSE 12034
// exit ;
12032: GO 12063
// for i in tmp do
12034: LD_ADDR_VAR 0 1
12038: PUSH
12039: LD_VAR 0 2
12043: PUSH
12044: FOR_IN
12045: IFFALSE 12061
// begin SetLives ( i , 0 ) ;
12047: LD_VAR 0 1
12051: PPUSH
12052: LD_INT 0
12054: PPUSH
12055: CALL_OW 234
// end ;
12059: GO 12044
12061: POP
12062: POP
// end ;
12063: PPOPN 2
12065: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
12066: LD_EXP 26
12070: PUSH
12071: LD_EXP 32
12075: AND
12076: IFFALSE 12160
12078: GO 12080
12080: DISABLE
12081: LD_INT 0
12083: PPUSH
12084: PPUSH
// begin enable ;
12085: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
12086: LD_ADDR_VAR 0 2
12090: PUSH
12091: LD_INT 22
12093: PUSH
12094: LD_OWVAR 2
12098: PUSH
12099: EMPTY
12100: LIST
12101: LIST
12102: PUSH
12103: LD_INT 32
12105: PUSH
12106: LD_INT 3
12108: PUSH
12109: EMPTY
12110: LIST
12111: LIST
12112: PUSH
12113: EMPTY
12114: LIST
12115: LIST
12116: PPUSH
12117: CALL_OW 69
12121: ST_TO_ADDR
// if not tmp then
12122: LD_VAR 0 2
12126: NOT
12127: IFFALSE 12131
// exit ;
12129: GO 12160
// for i in tmp do
12131: LD_ADDR_VAR 0 1
12135: PUSH
12136: LD_VAR 0 2
12140: PUSH
12141: FOR_IN
12142: IFFALSE 12158
// begin SetLives ( i , 0 ) ;
12144: LD_VAR 0 1
12148: PPUSH
12149: LD_INT 0
12151: PPUSH
12152: CALL_OW 234
// end ;
12156: GO 12141
12158: POP
12159: POP
// end ;
12160: PPOPN 2
12162: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
12163: LD_EXP 26
12167: PUSH
12168: LD_EXP 29
12172: AND
12173: IFFALSE 12266
12175: GO 12177
12177: DISABLE
12178: LD_INT 0
12180: PPUSH
// begin enable ;
12181: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
12182: LD_ADDR_VAR 0 1
12186: PUSH
12187: LD_INT 22
12189: PUSH
12190: LD_OWVAR 2
12194: PUSH
12195: EMPTY
12196: LIST
12197: LIST
12198: PUSH
12199: LD_INT 2
12201: PUSH
12202: LD_INT 25
12204: PUSH
12205: LD_INT 5
12207: PUSH
12208: EMPTY
12209: LIST
12210: LIST
12211: PUSH
12212: LD_INT 25
12214: PUSH
12215: LD_INT 9
12217: PUSH
12218: EMPTY
12219: LIST
12220: LIST
12221: PUSH
12222: LD_INT 25
12224: PUSH
12225: LD_INT 8
12227: PUSH
12228: EMPTY
12229: LIST
12230: LIST
12231: PUSH
12232: EMPTY
12233: LIST
12234: LIST
12235: LIST
12236: LIST
12237: PUSH
12238: EMPTY
12239: LIST
12240: LIST
12241: PPUSH
12242: CALL_OW 69
12246: PUSH
12247: FOR_IN
12248: IFFALSE 12264
// begin SetClass ( i , 1 ) ;
12250: LD_VAR 0 1
12254: PPUSH
12255: LD_INT 1
12257: PPUSH
12258: CALL_OW 336
// end ;
12262: GO 12247
12264: POP
12265: POP
// end ;
12266: PPOPN 1
12268: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
12269: LD_EXP 26
12273: PUSH
12274: LD_EXP 30
12278: AND
12279: PUSH
12280: LD_OWVAR 65
12284: PUSH
12285: LD_INT 7
12287: LESS
12288: AND
12289: IFFALSE 12303
12291: GO 12293
12293: DISABLE
// begin enable ;
12294: ENABLE
// game_speed := 7 ;
12295: LD_ADDR_OWVAR 65
12299: PUSH
12300: LD_INT 7
12302: ST_TO_ADDR
// end ;
12303: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
12304: LD_EXP 26
12308: PUSH
12309: LD_EXP 33
12313: AND
12314: IFFALSE 12516
12316: GO 12318
12318: DISABLE
12319: LD_INT 0
12321: PPUSH
12322: PPUSH
12323: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
12324: LD_ADDR_VAR 0 3
12328: PUSH
12329: LD_INT 81
12331: PUSH
12332: LD_OWVAR 2
12336: PUSH
12337: EMPTY
12338: LIST
12339: LIST
12340: PUSH
12341: LD_INT 21
12343: PUSH
12344: LD_INT 1
12346: PUSH
12347: EMPTY
12348: LIST
12349: LIST
12350: PUSH
12351: EMPTY
12352: LIST
12353: LIST
12354: PPUSH
12355: CALL_OW 69
12359: ST_TO_ADDR
// if not tmp then
12360: LD_VAR 0 3
12364: NOT
12365: IFFALSE 12369
// exit ;
12367: GO 12516
// if tmp > 5 then
12369: LD_VAR 0 3
12373: PUSH
12374: LD_INT 5
12376: GREATER
12377: IFFALSE 12389
// k := 5 else
12379: LD_ADDR_VAR 0 2
12383: PUSH
12384: LD_INT 5
12386: ST_TO_ADDR
12387: GO 12399
// k := tmp ;
12389: LD_ADDR_VAR 0 2
12393: PUSH
12394: LD_VAR 0 3
12398: ST_TO_ADDR
// for i := 1 to k do
12399: LD_ADDR_VAR 0 1
12403: PUSH
12404: DOUBLE
12405: LD_INT 1
12407: DEC
12408: ST_TO_ADDR
12409: LD_VAR 0 2
12413: PUSH
12414: FOR_TO
12415: IFFALSE 12514
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
12417: LD_VAR 0 3
12421: PUSH
12422: LD_VAR 0 1
12426: ARRAY
12427: PPUSH
12428: LD_VAR 0 1
12432: PUSH
12433: LD_INT 4
12435: MOD
12436: PUSH
12437: LD_INT 1
12439: PLUS
12440: PPUSH
12441: CALL_OW 259
12445: PUSH
12446: LD_INT 10
12448: LESS
12449: IFFALSE 12512
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
12451: LD_VAR 0 3
12455: PUSH
12456: LD_VAR 0 1
12460: ARRAY
12461: PPUSH
12462: LD_VAR 0 1
12466: PUSH
12467: LD_INT 4
12469: MOD
12470: PUSH
12471: LD_INT 1
12473: PLUS
12474: PPUSH
12475: LD_VAR 0 3
12479: PUSH
12480: LD_VAR 0 1
12484: ARRAY
12485: PPUSH
12486: LD_VAR 0 1
12490: PUSH
12491: LD_INT 4
12493: MOD
12494: PUSH
12495: LD_INT 1
12497: PLUS
12498: PPUSH
12499: CALL_OW 259
12503: PUSH
12504: LD_INT 1
12506: PLUS
12507: PPUSH
12508: CALL_OW 237
12512: GO 12414
12514: POP
12515: POP
// end ;
12516: PPOPN 3
12518: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
12519: LD_EXP 26
12523: PUSH
12524: LD_EXP 34
12528: AND
12529: IFFALSE 12549
12531: GO 12533
12533: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
12534: LD_INT 4
12536: PPUSH
12537: LD_OWVAR 2
12541: PPUSH
12542: LD_INT 0
12544: PPUSH
12545: CALL_OW 324
12549: END
// every 0 0$1 trigger StreamModeActive and sShovel do
12550: LD_EXP 26
12554: PUSH
12555: LD_EXP 63
12559: AND
12560: IFFALSE 12580
12562: GO 12564
12564: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
12565: LD_INT 19
12567: PPUSH
12568: LD_OWVAR 2
12572: PPUSH
12573: LD_INT 0
12575: PPUSH
12576: CALL_OW 324
12580: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
12581: LD_EXP 26
12585: PUSH
12586: LD_EXP 35
12590: AND
12591: IFFALSE 12693
12593: GO 12595
12595: DISABLE
12596: LD_INT 0
12598: PPUSH
12599: PPUSH
// begin enable ;
12600: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
12601: LD_ADDR_VAR 0 2
12605: PUSH
12606: LD_INT 22
12608: PUSH
12609: LD_OWVAR 2
12613: PUSH
12614: EMPTY
12615: LIST
12616: LIST
12617: PUSH
12618: LD_INT 2
12620: PUSH
12621: LD_INT 34
12623: PUSH
12624: LD_INT 11
12626: PUSH
12627: EMPTY
12628: LIST
12629: LIST
12630: PUSH
12631: LD_INT 34
12633: PUSH
12634: LD_INT 30
12636: PUSH
12637: EMPTY
12638: LIST
12639: LIST
12640: PUSH
12641: EMPTY
12642: LIST
12643: LIST
12644: LIST
12645: PUSH
12646: EMPTY
12647: LIST
12648: LIST
12649: PPUSH
12650: CALL_OW 69
12654: ST_TO_ADDR
// if not tmp then
12655: LD_VAR 0 2
12659: NOT
12660: IFFALSE 12664
// exit ;
12662: GO 12693
// for i in tmp do
12664: LD_ADDR_VAR 0 1
12668: PUSH
12669: LD_VAR 0 2
12673: PUSH
12674: FOR_IN
12675: IFFALSE 12691
// begin SetLives ( i , 0 ) ;
12677: LD_VAR 0 1
12681: PPUSH
12682: LD_INT 0
12684: PPUSH
12685: CALL_OW 234
// end ;
12689: GO 12674
12691: POP
12692: POP
// end ;
12693: PPOPN 2
12695: END
// every 0 0$1 trigger StreamModeActive and sBunker do
12696: LD_EXP 26
12700: PUSH
12701: LD_EXP 36
12705: AND
12706: IFFALSE 12726
12708: GO 12710
12710: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
12711: LD_INT 32
12713: PPUSH
12714: LD_OWVAR 2
12718: PPUSH
12719: LD_INT 0
12721: PPUSH
12722: CALL_OW 324
12726: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
12727: LD_EXP 26
12731: PUSH
12732: LD_EXP 37
12736: AND
12737: IFFALSE 12918
12739: GO 12741
12741: DISABLE
12742: LD_INT 0
12744: PPUSH
12745: PPUSH
12746: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
12747: LD_ADDR_VAR 0 2
12751: PUSH
12752: LD_INT 22
12754: PUSH
12755: LD_OWVAR 2
12759: PUSH
12760: EMPTY
12761: LIST
12762: LIST
12763: PUSH
12764: LD_INT 33
12766: PUSH
12767: LD_INT 3
12769: PUSH
12770: EMPTY
12771: LIST
12772: LIST
12773: PUSH
12774: EMPTY
12775: LIST
12776: LIST
12777: PPUSH
12778: CALL_OW 69
12782: ST_TO_ADDR
// if not tmp then
12783: LD_VAR 0 2
12787: NOT
12788: IFFALSE 12792
// exit ;
12790: GO 12918
// side := 0 ;
12792: LD_ADDR_VAR 0 3
12796: PUSH
12797: LD_INT 0
12799: ST_TO_ADDR
// for i := 1 to 8 do
12800: LD_ADDR_VAR 0 1
12804: PUSH
12805: DOUBLE
12806: LD_INT 1
12808: DEC
12809: ST_TO_ADDR
12810: LD_INT 8
12812: PUSH
12813: FOR_TO
12814: IFFALSE 12862
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
12816: LD_OWVAR 2
12820: PUSH
12821: LD_VAR 0 1
12825: NONEQUAL
12826: PUSH
12827: LD_OWVAR 2
12831: PPUSH
12832: LD_VAR 0 1
12836: PPUSH
12837: CALL_OW 81
12841: PUSH
12842: LD_INT 2
12844: EQUAL
12845: AND
12846: IFFALSE 12860
// begin side := i ;
12848: LD_ADDR_VAR 0 3
12852: PUSH
12853: LD_VAR 0 1
12857: ST_TO_ADDR
// break ;
12858: GO 12862
// end ;
12860: GO 12813
12862: POP
12863: POP
// if not side then
12864: LD_VAR 0 3
12868: NOT
12869: IFFALSE 12873
// exit ;
12871: GO 12918
// for i := 1 to tmp do
12873: LD_ADDR_VAR 0 1
12877: PUSH
12878: DOUBLE
12879: LD_INT 1
12881: DEC
12882: ST_TO_ADDR
12883: LD_VAR 0 2
12887: PUSH
12888: FOR_TO
12889: IFFALSE 12916
// if Prob ( 60 ) then
12891: LD_INT 60
12893: PPUSH
12894: CALL_OW 13
12898: IFFALSE 12914
// SetSide ( i , side ) ;
12900: LD_VAR 0 1
12904: PPUSH
12905: LD_VAR 0 3
12909: PPUSH
12910: CALL_OW 235
12914: GO 12888
12916: POP
12917: POP
// end ;
12918: PPOPN 3
12920: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
12921: LD_EXP 26
12925: PUSH
12926: LD_EXP 39
12930: AND
12931: IFFALSE 13050
12933: GO 12935
12935: DISABLE
12936: LD_INT 0
12938: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
12939: LD_ADDR_VAR 0 1
12943: PUSH
12944: LD_INT 22
12946: PUSH
12947: LD_OWVAR 2
12951: PUSH
12952: EMPTY
12953: LIST
12954: LIST
12955: PUSH
12956: LD_INT 21
12958: PUSH
12959: LD_INT 1
12961: PUSH
12962: EMPTY
12963: LIST
12964: LIST
12965: PUSH
12966: LD_INT 3
12968: PUSH
12969: LD_INT 23
12971: PUSH
12972: LD_INT 0
12974: PUSH
12975: EMPTY
12976: LIST
12977: LIST
12978: PUSH
12979: EMPTY
12980: LIST
12981: LIST
12982: PUSH
12983: EMPTY
12984: LIST
12985: LIST
12986: LIST
12987: PPUSH
12988: CALL_OW 69
12992: PUSH
12993: FOR_IN
12994: IFFALSE 13048
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
12996: LD_VAR 0 1
13000: PPUSH
13001: CALL_OW 257
13005: PUSH
13006: LD_INT 1
13008: PUSH
13009: LD_INT 2
13011: PUSH
13012: LD_INT 3
13014: PUSH
13015: LD_INT 4
13017: PUSH
13018: EMPTY
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: IN
13024: IFFALSE 13046
// SetClass ( un , rand ( 1 , 4 ) ) ;
13026: LD_VAR 0 1
13030: PPUSH
13031: LD_INT 1
13033: PPUSH
13034: LD_INT 4
13036: PPUSH
13037: CALL_OW 12
13041: PPUSH
13042: CALL_OW 336
13046: GO 12993
13048: POP
13049: POP
// end ;
13050: PPOPN 1
13052: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
13053: LD_EXP 26
13057: PUSH
13058: LD_EXP 38
13062: AND
13063: IFFALSE 13142
13065: GO 13067
13067: DISABLE
13068: LD_INT 0
13070: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13071: LD_ADDR_VAR 0 1
13075: PUSH
13076: LD_INT 22
13078: PUSH
13079: LD_OWVAR 2
13083: PUSH
13084: EMPTY
13085: LIST
13086: LIST
13087: PUSH
13088: LD_INT 21
13090: PUSH
13091: LD_INT 3
13093: PUSH
13094: EMPTY
13095: LIST
13096: LIST
13097: PUSH
13098: EMPTY
13099: LIST
13100: LIST
13101: PPUSH
13102: CALL_OW 69
13106: ST_TO_ADDR
// if not tmp then
13107: LD_VAR 0 1
13111: NOT
13112: IFFALSE 13116
// exit ;
13114: GO 13142
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
13116: LD_VAR 0 1
13120: PUSH
13121: LD_INT 1
13123: PPUSH
13124: LD_VAR 0 1
13128: PPUSH
13129: CALL_OW 12
13133: ARRAY
13134: PPUSH
13135: LD_INT 100
13137: PPUSH
13138: CALL_OW 234
// end ;
13142: PPOPN 1
13144: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
13145: LD_EXP 26
13149: PUSH
13150: LD_EXP 40
13154: AND
13155: IFFALSE 13253
13157: GO 13159
13159: DISABLE
13160: LD_INT 0
13162: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13163: LD_ADDR_VAR 0 1
13167: PUSH
13168: LD_INT 22
13170: PUSH
13171: LD_OWVAR 2
13175: PUSH
13176: EMPTY
13177: LIST
13178: LIST
13179: PUSH
13180: LD_INT 21
13182: PUSH
13183: LD_INT 1
13185: PUSH
13186: EMPTY
13187: LIST
13188: LIST
13189: PUSH
13190: EMPTY
13191: LIST
13192: LIST
13193: PPUSH
13194: CALL_OW 69
13198: ST_TO_ADDR
// if not tmp then
13199: LD_VAR 0 1
13203: NOT
13204: IFFALSE 13208
// exit ;
13206: GO 13253
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
13208: LD_VAR 0 1
13212: PUSH
13213: LD_INT 1
13215: PPUSH
13216: LD_VAR 0 1
13220: PPUSH
13221: CALL_OW 12
13225: ARRAY
13226: PPUSH
13227: LD_INT 1
13229: PPUSH
13230: LD_INT 4
13232: PPUSH
13233: CALL_OW 12
13237: PPUSH
13238: LD_INT 3000
13240: PPUSH
13241: LD_INT 9000
13243: PPUSH
13244: CALL_OW 12
13248: PPUSH
13249: CALL_OW 492
// end ;
13253: PPOPN 1
13255: END
// every 0 0$1 trigger StreamModeActive and sDepot do
13256: LD_EXP 26
13260: PUSH
13261: LD_EXP 41
13265: AND
13266: IFFALSE 13286
13268: GO 13270
13270: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
13271: LD_INT 1
13273: PPUSH
13274: LD_OWVAR 2
13278: PPUSH
13279: LD_INT 0
13281: PPUSH
13282: CALL_OW 324
13286: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
13287: LD_EXP 26
13291: PUSH
13292: LD_EXP 42
13296: AND
13297: IFFALSE 13380
13299: GO 13301
13301: DISABLE
13302: LD_INT 0
13304: PPUSH
13305: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13306: LD_ADDR_VAR 0 2
13310: PUSH
13311: LD_INT 22
13313: PUSH
13314: LD_OWVAR 2
13318: PUSH
13319: EMPTY
13320: LIST
13321: LIST
13322: PUSH
13323: LD_INT 21
13325: PUSH
13326: LD_INT 3
13328: PUSH
13329: EMPTY
13330: LIST
13331: LIST
13332: PUSH
13333: EMPTY
13334: LIST
13335: LIST
13336: PPUSH
13337: CALL_OW 69
13341: ST_TO_ADDR
// if not tmp then
13342: LD_VAR 0 2
13346: NOT
13347: IFFALSE 13351
// exit ;
13349: GO 13380
// for i in tmp do
13351: LD_ADDR_VAR 0 1
13355: PUSH
13356: LD_VAR 0 2
13360: PUSH
13361: FOR_IN
13362: IFFALSE 13378
// SetBLevel ( i , 10 ) ;
13364: LD_VAR 0 1
13368: PPUSH
13369: LD_INT 10
13371: PPUSH
13372: CALL_OW 241
13376: GO 13361
13378: POP
13379: POP
// end ;
13380: PPOPN 2
13382: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
13383: LD_EXP 26
13387: PUSH
13388: LD_EXP 43
13392: AND
13393: IFFALSE 13504
13395: GO 13397
13397: DISABLE
13398: LD_INT 0
13400: PPUSH
13401: PPUSH
13402: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13403: LD_ADDR_VAR 0 3
13407: PUSH
13408: LD_INT 22
13410: PUSH
13411: LD_OWVAR 2
13415: PUSH
13416: EMPTY
13417: LIST
13418: LIST
13419: PUSH
13420: LD_INT 25
13422: PUSH
13423: LD_INT 1
13425: PUSH
13426: EMPTY
13427: LIST
13428: LIST
13429: PUSH
13430: EMPTY
13431: LIST
13432: LIST
13433: PPUSH
13434: CALL_OW 69
13438: ST_TO_ADDR
// if not tmp then
13439: LD_VAR 0 3
13443: NOT
13444: IFFALSE 13448
// exit ;
13446: GO 13504
// un := tmp [ rand ( 1 , tmp ) ] ;
13448: LD_ADDR_VAR 0 2
13452: PUSH
13453: LD_VAR 0 3
13457: PUSH
13458: LD_INT 1
13460: PPUSH
13461: LD_VAR 0 3
13465: PPUSH
13466: CALL_OW 12
13470: ARRAY
13471: ST_TO_ADDR
// if Crawls ( un ) then
13472: LD_VAR 0 2
13476: PPUSH
13477: CALL_OW 318
13481: IFFALSE 13492
// ComWalk ( un ) ;
13483: LD_VAR 0 2
13487: PPUSH
13488: CALL_OW 138
// SetClass ( un , class_sniper ) ;
13492: LD_VAR 0 2
13496: PPUSH
13497: LD_INT 5
13499: PPUSH
13500: CALL_OW 336
// end ;
13504: PPOPN 3
13506: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
13507: LD_EXP 26
13511: PUSH
13512: LD_EXP 44
13516: AND
13517: PUSH
13518: LD_OWVAR 67
13522: PUSH
13523: LD_INT 4
13525: LESS
13526: AND
13527: IFFALSE 13546
13529: GO 13531
13531: DISABLE
// begin Difficulty := Difficulty + 1 ;
13532: LD_ADDR_OWVAR 67
13536: PUSH
13537: LD_OWVAR 67
13541: PUSH
13542: LD_INT 1
13544: PLUS
13545: ST_TO_ADDR
// end ;
13546: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
13547: LD_EXP 26
13551: PUSH
13552: LD_EXP 45
13556: AND
13557: IFFALSE 13660
13559: GO 13561
13561: DISABLE
13562: LD_INT 0
13564: PPUSH
// begin for i := 1 to 5 do
13565: LD_ADDR_VAR 0 1
13569: PUSH
13570: DOUBLE
13571: LD_INT 1
13573: DEC
13574: ST_TO_ADDR
13575: LD_INT 5
13577: PUSH
13578: FOR_TO
13579: IFFALSE 13658
// begin uc_nation := nation_nature ;
13581: LD_ADDR_OWVAR 21
13585: PUSH
13586: LD_INT 0
13588: ST_TO_ADDR
// uc_side := 0 ;
13589: LD_ADDR_OWVAR 20
13593: PUSH
13594: LD_INT 0
13596: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13597: LD_ADDR_OWVAR 29
13601: PUSH
13602: LD_INT 12
13604: PUSH
13605: LD_INT 12
13607: PUSH
13608: EMPTY
13609: LIST
13610: LIST
13611: ST_TO_ADDR
// hc_agressivity := 20 ;
13612: LD_ADDR_OWVAR 35
13616: PUSH
13617: LD_INT 20
13619: ST_TO_ADDR
// hc_class := class_tiger ;
13620: LD_ADDR_OWVAR 28
13624: PUSH
13625: LD_INT 14
13627: ST_TO_ADDR
// hc_gallery :=  ;
13628: LD_ADDR_OWVAR 33
13632: PUSH
13633: LD_STRING 
13635: ST_TO_ADDR
// hc_name :=  ;
13636: LD_ADDR_OWVAR 26
13640: PUSH
13641: LD_STRING 
13643: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
13644: CALL_OW 44
13648: PPUSH
13649: LD_INT 0
13651: PPUSH
13652: CALL_OW 51
// end ;
13656: GO 13578
13658: POP
13659: POP
// end ;
13660: PPOPN 1
13662: END
// every 0 0$1 trigger StreamModeActive and sBomb do
13663: LD_EXP 26
13667: PUSH
13668: LD_EXP 46
13672: AND
13673: IFFALSE 13682
13675: GO 13677
13677: DISABLE
// StreamSibBomb ;
13678: CALL 13683 0 0
13682: END
// export function StreamSibBomb ; var i , x , y ; begin
13683: LD_INT 0
13685: PPUSH
13686: PPUSH
13687: PPUSH
13688: PPUSH
// result := false ;
13689: LD_ADDR_VAR 0 1
13693: PUSH
13694: LD_INT 0
13696: ST_TO_ADDR
// for i := 1 to 16 do
13697: LD_ADDR_VAR 0 2
13701: PUSH
13702: DOUBLE
13703: LD_INT 1
13705: DEC
13706: ST_TO_ADDR
13707: LD_INT 16
13709: PUSH
13710: FOR_TO
13711: IFFALSE 13910
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13713: LD_ADDR_VAR 0 3
13717: PUSH
13718: LD_INT 10
13720: PUSH
13721: LD_INT 20
13723: PUSH
13724: LD_INT 30
13726: PUSH
13727: LD_INT 40
13729: PUSH
13730: LD_INT 50
13732: PUSH
13733: LD_INT 60
13735: PUSH
13736: LD_INT 70
13738: PUSH
13739: LD_INT 80
13741: PUSH
13742: LD_INT 90
13744: PUSH
13745: LD_INT 100
13747: PUSH
13748: LD_INT 110
13750: PUSH
13751: LD_INT 120
13753: PUSH
13754: LD_INT 130
13756: PUSH
13757: LD_INT 140
13759: PUSH
13760: LD_INT 150
13762: PUSH
13763: EMPTY
13764: LIST
13765: LIST
13766: LIST
13767: LIST
13768: LIST
13769: LIST
13770: LIST
13771: LIST
13772: LIST
13773: LIST
13774: LIST
13775: LIST
13776: LIST
13777: LIST
13778: LIST
13779: PUSH
13780: LD_INT 1
13782: PPUSH
13783: LD_INT 15
13785: PPUSH
13786: CALL_OW 12
13790: ARRAY
13791: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13792: LD_ADDR_VAR 0 4
13796: PUSH
13797: LD_INT 10
13799: PUSH
13800: LD_INT 20
13802: PUSH
13803: LD_INT 30
13805: PUSH
13806: LD_INT 40
13808: PUSH
13809: LD_INT 50
13811: PUSH
13812: LD_INT 60
13814: PUSH
13815: LD_INT 70
13817: PUSH
13818: LD_INT 80
13820: PUSH
13821: LD_INT 90
13823: PUSH
13824: LD_INT 100
13826: PUSH
13827: LD_INT 110
13829: PUSH
13830: LD_INT 120
13832: PUSH
13833: LD_INT 130
13835: PUSH
13836: LD_INT 140
13838: PUSH
13839: LD_INT 150
13841: PUSH
13842: EMPTY
13843: LIST
13844: LIST
13845: LIST
13846: LIST
13847: LIST
13848: LIST
13849: LIST
13850: LIST
13851: LIST
13852: LIST
13853: LIST
13854: LIST
13855: LIST
13856: LIST
13857: LIST
13858: PUSH
13859: LD_INT 1
13861: PPUSH
13862: LD_INT 15
13864: PPUSH
13865: CALL_OW 12
13869: ARRAY
13870: ST_TO_ADDR
// if ValidHex ( x , y ) then
13871: LD_VAR 0 3
13875: PPUSH
13876: LD_VAR 0 4
13880: PPUSH
13881: CALL_OW 488
13885: IFFALSE 13908
// begin result := [ x , y ] ;
13887: LD_ADDR_VAR 0 1
13891: PUSH
13892: LD_VAR 0 3
13896: PUSH
13897: LD_VAR 0 4
13901: PUSH
13902: EMPTY
13903: LIST
13904: LIST
13905: ST_TO_ADDR
// break ;
13906: GO 13910
// end ; end ;
13908: GO 13710
13910: POP
13911: POP
// if result then
13912: LD_VAR 0 1
13916: IFFALSE 13976
// begin ToLua ( playSibBomb() ) ;
13918: LD_STRING playSibBomb()
13920: PPUSH
13921: CALL_OW 559
// wait ( 0 0$14 ) ;
13925: LD_INT 490
13927: PPUSH
13928: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
13932: LD_VAR 0 1
13936: PUSH
13937: LD_INT 1
13939: ARRAY
13940: PPUSH
13941: LD_VAR 0 1
13945: PUSH
13946: LD_INT 2
13948: ARRAY
13949: PPUSH
13950: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
13954: LD_VAR 0 1
13958: PUSH
13959: LD_INT 1
13961: ARRAY
13962: PPUSH
13963: LD_VAR 0 1
13967: PUSH
13968: LD_INT 2
13970: ARRAY
13971: PPUSH
13972: CALL_OW 429
// end ; end ;
13976: LD_VAR 0 1
13980: RET
// every 0 0$1 trigger StreamModeActive and sReset do
13981: LD_EXP 26
13985: PUSH
13986: LD_EXP 48
13990: AND
13991: IFFALSE 14003
13993: GO 13995
13995: DISABLE
// YouLost (  ) ;
13996: LD_STRING 
13998: PPUSH
13999: CALL_OW 104
14003: END
// every 0 0$1 trigger StreamModeActive and sFog do
14004: LD_EXP 26
14008: PUSH
14009: LD_EXP 47
14013: AND
14014: IFFALSE 14028
14016: GO 14018
14018: DISABLE
// FogOff ( your_side ) ;
14019: LD_OWVAR 2
14023: PPUSH
14024: CALL_OW 344
14028: END
// every 0 0$1 trigger StreamModeActive and sSun do
14029: LD_EXP 26
14033: PUSH
14034: LD_EXP 49
14038: AND
14039: IFFALSE 14067
14041: GO 14043
14043: DISABLE
// begin solar_recharge_percent := 0 ;
14044: LD_ADDR_OWVAR 79
14048: PUSH
14049: LD_INT 0
14051: ST_TO_ADDR
// wait ( 5 5$00 ) ;
14052: LD_INT 10500
14054: PPUSH
14055: CALL_OW 67
// solar_recharge_percent := 100 ;
14059: LD_ADDR_OWVAR 79
14063: PUSH
14064: LD_INT 100
14066: ST_TO_ADDR
// end ;
14067: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
14068: LD_EXP 26
14072: PUSH
14073: LD_EXP 50
14077: AND
14078: IFFALSE 14317
14080: GO 14082
14082: DISABLE
14083: LD_INT 0
14085: PPUSH
14086: PPUSH
14087: PPUSH
// begin tmp := [ ] ;
14088: LD_ADDR_VAR 0 3
14092: PUSH
14093: EMPTY
14094: ST_TO_ADDR
// for i := 1 to 6 do
14095: LD_ADDR_VAR 0 1
14099: PUSH
14100: DOUBLE
14101: LD_INT 1
14103: DEC
14104: ST_TO_ADDR
14105: LD_INT 6
14107: PUSH
14108: FOR_TO
14109: IFFALSE 14214
// begin uc_nation := nation_nature ;
14111: LD_ADDR_OWVAR 21
14115: PUSH
14116: LD_INT 0
14118: ST_TO_ADDR
// uc_side := 0 ;
14119: LD_ADDR_OWVAR 20
14123: PUSH
14124: LD_INT 0
14126: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14127: LD_ADDR_OWVAR 29
14131: PUSH
14132: LD_INT 12
14134: PUSH
14135: LD_INT 12
14137: PUSH
14138: EMPTY
14139: LIST
14140: LIST
14141: ST_TO_ADDR
// hc_agressivity := 20 ;
14142: LD_ADDR_OWVAR 35
14146: PUSH
14147: LD_INT 20
14149: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
14150: LD_ADDR_OWVAR 28
14154: PUSH
14155: LD_INT 17
14157: ST_TO_ADDR
// hc_gallery :=  ;
14158: LD_ADDR_OWVAR 33
14162: PUSH
14163: LD_STRING 
14165: ST_TO_ADDR
// hc_name :=  ;
14166: LD_ADDR_OWVAR 26
14170: PUSH
14171: LD_STRING 
14173: ST_TO_ADDR
// un := CreateHuman ;
14174: LD_ADDR_VAR 0 2
14178: PUSH
14179: CALL_OW 44
14183: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
14184: LD_VAR 0 2
14188: PPUSH
14189: LD_INT 1
14191: PPUSH
14192: CALL_OW 51
// tmp := tmp ^ un ;
14196: LD_ADDR_VAR 0 3
14200: PUSH
14201: LD_VAR 0 3
14205: PUSH
14206: LD_VAR 0 2
14210: ADD
14211: ST_TO_ADDR
// end ;
14212: GO 14108
14214: POP
14215: POP
// repeat wait ( 0 0$1 ) ;
14216: LD_INT 35
14218: PPUSH
14219: CALL_OW 67
// for un in tmp do
14223: LD_ADDR_VAR 0 2
14227: PUSH
14228: LD_VAR 0 3
14232: PUSH
14233: FOR_IN
14234: IFFALSE 14308
// begin if IsDead ( un ) then
14236: LD_VAR 0 2
14240: PPUSH
14241: CALL_OW 301
14245: IFFALSE 14265
// begin tmp := tmp diff un ;
14247: LD_ADDR_VAR 0 3
14251: PUSH
14252: LD_VAR 0 3
14256: PUSH
14257: LD_VAR 0 2
14261: DIFF
14262: ST_TO_ADDR
// continue ;
14263: GO 14233
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
14265: LD_VAR 0 2
14269: PPUSH
14270: LD_INT 3
14272: PUSH
14273: LD_INT 22
14275: PUSH
14276: LD_INT 0
14278: PUSH
14279: EMPTY
14280: LIST
14281: LIST
14282: PUSH
14283: EMPTY
14284: LIST
14285: LIST
14286: PPUSH
14287: CALL_OW 69
14291: PPUSH
14292: LD_VAR 0 2
14296: PPUSH
14297: CALL_OW 74
14301: PPUSH
14302: CALL_OW 115
// end ;
14306: GO 14233
14308: POP
14309: POP
// until not tmp ;
14310: LD_VAR 0 3
14314: NOT
14315: IFFALSE 14216
// end ;
14317: PPOPN 3
14319: END
// every 0 0$1 trigger StreamModeActive and sTroll do
14320: LD_EXP 26
14324: PUSH
14325: LD_EXP 51
14329: AND
14330: IFFALSE 14384
14332: GO 14334
14334: DISABLE
// begin ToLua ( displayTroll(); ) ;
14335: LD_STRING displayTroll();
14337: PPUSH
14338: CALL_OW 559
// wait ( 3 3$00 ) ;
14342: LD_INT 6300
14344: PPUSH
14345: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14349: LD_STRING hideTroll();
14351: PPUSH
14352: CALL_OW 559
// wait ( 1 1$00 ) ;
14356: LD_INT 2100
14358: PPUSH
14359: CALL_OW 67
// ToLua ( displayTroll(); ) ;
14363: LD_STRING displayTroll();
14365: PPUSH
14366: CALL_OW 559
// wait ( 1 1$00 ) ;
14370: LD_INT 2100
14372: PPUSH
14373: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14377: LD_STRING hideTroll();
14379: PPUSH
14380: CALL_OW 559
// end ;
14384: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
14385: LD_EXP 26
14389: PUSH
14390: LD_EXP 52
14394: AND
14395: IFFALSE 14458
14397: GO 14399
14399: DISABLE
14400: LD_INT 0
14402: PPUSH
// begin p := 0 ;
14403: LD_ADDR_VAR 0 1
14407: PUSH
14408: LD_INT 0
14410: ST_TO_ADDR
// repeat game_speed := 1 ;
14411: LD_ADDR_OWVAR 65
14415: PUSH
14416: LD_INT 1
14418: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14419: LD_INT 35
14421: PPUSH
14422: CALL_OW 67
// p := p + 1 ;
14426: LD_ADDR_VAR 0 1
14430: PUSH
14431: LD_VAR 0 1
14435: PUSH
14436: LD_INT 1
14438: PLUS
14439: ST_TO_ADDR
// until p >= 60 ;
14440: LD_VAR 0 1
14444: PUSH
14445: LD_INT 60
14447: GREATEREQUAL
14448: IFFALSE 14411
// game_speed := 4 ;
14450: LD_ADDR_OWVAR 65
14454: PUSH
14455: LD_INT 4
14457: ST_TO_ADDR
// end ;
14458: PPOPN 1
14460: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
14461: LD_EXP 26
14465: PUSH
14466: LD_EXP 53
14470: AND
14471: IFFALSE 14617
14473: GO 14475
14475: DISABLE
14476: LD_INT 0
14478: PPUSH
14479: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14480: LD_ADDR_VAR 0 1
14484: PUSH
14485: LD_INT 22
14487: PUSH
14488: LD_OWVAR 2
14492: PUSH
14493: EMPTY
14494: LIST
14495: LIST
14496: PUSH
14497: LD_INT 2
14499: PUSH
14500: LD_INT 30
14502: PUSH
14503: LD_INT 0
14505: PUSH
14506: EMPTY
14507: LIST
14508: LIST
14509: PUSH
14510: LD_INT 30
14512: PUSH
14513: LD_INT 1
14515: PUSH
14516: EMPTY
14517: LIST
14518: LIST
14519: PUSH
14520: EMPTY
14521: LIST
14522: LIST
14523: LIST
14524: PUSH
14525: EMPTY
14526: LIST
14527: LIST
14528: PPUSH
14529: CALL_OW 69
14533: ST_TO_ADDR
// if not depot then
14534: LD_VAR 0 1
14538: NOT
14539: IFFALSE 14543
// exit ;
14541: GO 14617
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
14543: LD_ADDR_VAR 0 2
14547: PUSH
14548: LD_VAR 0 1
14552: PUSH
14553: LD_INT 1
14555: PPUSH
14556: LD_VAR 0 1
14560: PPUSH
14561: CALL_OW 12
14565: ARRAY
14566: PPUSH
14567: CALL_OW 274
14571: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
14572: LD_VAR 0 2
14576: PPUSH
14577: LD_INT 1
14579: PPUSH
14580: LD_INT 0
14582: PPUSH
14583: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
14587: LD_VAR 0 2
14591: PPUSH
14592: LD_INT 2
14594: PPUSH
14595: LD_INT 0
14597: PPUSH
14598: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
14602: LD_VAR 0 2
14606: PPUSH
14607: LD_INT 3
14609: PPUSH
14610: LD_INT 0
14612: PPUSH
14613: CALL_OW 277
// end ;
14617: PPOPN 2
14619: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
14620: LD_EXP 26
14624: PUSH
14625: LD_EXP 54
14629: AND
14630: IFFALSE 14727
14632: GO 14634
14634: DISABLE
14635: LD_INT 0
14637: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14638: LD_ADDR_VAR 0 1
14642: PUSH
14643: LD_INT 22
14645: PUSH
14646: LD_OWVAR 2
14650: PUSH
14651: EMPTY
14652: LIST
14653: LIST
14654: PUSH
14655: LD_INT 21
14657: PUSH
14658: LD_INT 1
14660: PUSH
14661: EMPTY
14662: LIST
14663: LIST
14664: PUSH
14665: LD_INT 3
14667: PUSH
14668: LD_INT 23
14670: PUSH
14671: LD_INT 0
14673: PUSH
14674: EMPTY
14675: LIST
14676: LIST
14677: PUSH
14678: EMPTY
14679: LIST
14680: LIST
14681: PUSH
14682: EMPTY
14683: LIST
14684: LIST
14685: LIST
14686: PPUSH
14687: CALL_OW 69
14691: ST_TO_ADDR
// if not tmp then
14692: LD_VAR 0 1
14696: NOT
14697: IFFALSE 14701
// exit ;
14699: GO 14727
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
14701: LD_VAR 0 1
14705: PUSH
14706: LD_INT 1
14708: PPUSH
14709: LD_VAR 0 1
14713: PPUSH
14714: CALL_OW 12
14718: ARRAY
14719: PPUSH
14720: LD_INT 200
14722: PPUSH
14723: CALL_OW 234
// end ;
14727: PPOPN 1
14729: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
14730: LD_EXP 26
14734: PUSH
14735: LD_EXP 55
14739: AND
14740: IFFALSE 14819
14742: GO 14744
14744: DISABLE
14745: LD_INT 0
14747: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
14748: LD_ADDR_VAR 0 1
14752: PUSH
14753: LD_INT 22
14755: PUSH
14756: LD_OWVAR 2
14760: PUSH
14761: EMPTY
14762: LIST
14763: LIST
14764: PUSH
14765: LD_INT 21
14767: PUSH
14768: LD_INT 2
14770: PUSH
14771: EMPTY
14772: LIST
14773: LIST
14774: PUSH
14775: EMPTY
14776: LIST
14777: LIST
14778: PPUSH
14779: CALL_OW 69
14783: ST_TO_ADDR
// if not tmp then
14784: LD_VAR 0 1
14788: NOT
14789: IFFALSE 14793
// exit ;
14791: GO 14819
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
14793: LD_VAR 0 1
14797: PUSH
14798: LD_INT 1
14800: PPUSH
14801: LD_VAR 0 1
14805: PPUSH
14806: CALL_OW 12
14810: ARRAY
14811: PPUSH
14812: LD_INT 60
14814: PPUSH
14815: CALL_OW 234
// end ;
14819: PPOPN 1
14821: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
14822: LD_EXP 26
14826: PUSH
14827: LD_EXP 56
14831: AND
14832: IFFALSE 14931
14834: GO 14836
14836: DISABLE
14837: LD_INT 0
14839: PPUSH
14840: PPUSH
// begin enable ;
14841: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
14842: LD_ADDR_VAR 0 1
14846: PUSH
14847: LD_INT 22
14849: PUSH
14850: LD_OWVAR 2
14854: PUSH
14855: EMPTY
14856: LIST
14857: LIST
14858: PUSH
14859: LD_INT 61
14861: PUSH
14862: EMPTY
14863: LIST
14864: PUSH
14865: LD_INT 33
14867: PUSH
14868: LD_INT 2
14870: PUSH
14871: EMPTY
14872: LIST
14873: LIST
14874: PUSH
14875: EMPTY
14876: LIST
14877: LIST
14878: LIST
14879: PPUSH
14880: CALL_OW 69
14884: ST_TO_ADDR
// if not tmp then
14885: LD_VAR 0 1
14889: NOT
14890: IFFALSE 14894
// exit ;
14892: GO 14931
// for i in tmp do
14894: LD_ADDR_VAR 0 2
14898: PUSH
14899: LD_VAR 0 1
14903: PUSH
14904: FOR_IN
14905: IFFALSE 14929
// if IsControledBy ( i ) then
14907: LD_VAR 0 2
14911: PPUSH
14912: CALL_OW 312
14916: IFFALSE 14927
// ComUnlink ( i ) ;
14918: LD_VAR 0 2
14922: PPUSH
14923: CALL_OW 136
14927: GO 14904
14929: POP
14930: POP
// end ;
14931: PPOPN 2
14933: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
14934: LD_EXP 26
14938: PUSH
14939: LD_EXP 57
14943: AND
14944: IFFALSE 15084
14946: GO 14948
14948: DISABLE
14949: LD_INT 0
14951: PPUSH
14952: PPUSH
// begin ToLua ( displayPowell(); ) ;
14953: LD_STRING displayPowell();
14955: PPUSH
14956: CALL_OW 559
// uc_side := 0 ;
14960: LD_ADDR_OWVAR 20
14964: PUSH
14965: LD_INT 0
14967: ST_TO_ADDR
// uc_nation := 2 ;
14968: LD_ADDR_OWVAR 21
14972: PUSH
14973: LD_INT 2
14975: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
14976: LD_ADDR_OWVAR 37
14980: PUSH
14981: LD_INT 14
14983: ST_TO_ADDR
// vc_engine := engine_siberite ;
14984: LD_ADDR_OWVAR 39
14988: PUSH
14989: LD_INT 3
14991: ST_TO_ADDR
// vc_control := control_apeman ;
14992: LD_ADDR_OWVAR 38
14996: PUSH
14997: LD_INT 5
14999: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
15000: LD_ADDR_OWVAR 40
15004: PUSH
15005: LD_INT 29
15007: ST_TO_ADDR
// un := CreateVehicle ;
15008: LD_ADDR_VAR 0 2
15012: PUSH
15013: CALL_OW 45
15017: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15018: LD_VAR 0 2
15022: PPUSH
15023: LD_INT 1
15025: PPUSH
15026: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15030: LD_INT 35
15032: PPUSH
15033: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15037: LD_VAR 0 2
15041: PPUSH
15042: LD_INT 22
15044: PUSH
15045: LD_OWVAR 2
15049: PUSH
15050: EMPTY
15051: LIST
15052: LIST
15053: PPUSH
15054: CALL_OW 69
15058: PPUSH
15059: LD_VAR 0 2
15063: PPUSH
15064: CALL_OW 74
15068: PPUSH
15069: CALL_OW 115
// until IsDead ( un ) ;
15073: LD_VAR 0 2
15077: PPUSH
15078: CALL_OW 301
15082: IFFALSE 15030
// end ;
15084: PPOPN 2
15086: END
// every 0 0$1 trigger StreamModeActive and sStu do
15087: LD_EXP 26
15091: PUSH
15092: LD_EXP 65
15096: AND
15097: IFFALSE 15113
15099: GO 15101
15101: DISABLE
// begin ToLua ( displayStucuk(); ) ;
15102: LD_STRING displayStucuk();
15104: PPUSH
15105: CALL_OW 559
// ResetFog ;
15109: CALL_OW 335
// end ;
15113: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
15114: LD_EXP 26
15118: PUSH
15119: LD_EXP 58
15123: AND
15124: IFFALSE 15265
15126: GO 15128
15128: DISABLE
15129: LD_INT 0
15131: PPUSH
15132: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15133: LD_ADDR_VAR 0 2
15137: PUSH
15138: LD_INT 22
15140: PUSH
15141: LD_OWVAR 2
15145: PUSH
15146: EMPTY
15147: LIST
15148: LIST
15149: PUSH
15150: LD_INT 21
15152: PUSH
15153: LD_INT 1
15155: PUSH
15156: EMPTY
15157: LIST
15158: LIST
15159: PUSH
15160: EMPTY
15161: LIST
15162: LIST
15163: PPUSH
15164: CALL_OW 69
15168: ST_TO_ADDR
// if not tmp then
15169: LD_VAR 0 2
15173: NOT
15174: IFFALSE 15178
// exit ;
15176: GO 15265
// un := tmp [ rand ( 1 , tmp ) ] ;
15178: LD_ADDR_VAR 0 1
15182: PUSH
15183: LD_VAR 0 2
15187: PUSH
15188: LD_INT 1
15190: PPUSH
15191: LD_VAR 0 2
15195: PPUSH
15196: CALL_OW 12
15200: ARRAY
15201: ST_TO_ADDR
// SetSide ( un , 0 ) ;
15202: LD_VAR 0 1
15206: PPUSH
15207: LD_INT 0
15209: PPUSH
15210: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
15214: LD_VAR 0 1
15218: PPUSH
15219: LD_OWVAR 3
15223: PUSH
15224: LD_VAR 0 1
15228: DIFF
15229: PPUSH
15230: LD_VAR 0 1
15234: PPUSH
15235: CALL_OW 74
15239: PPUSH
15240: CALL_OW 115
// wait ( 0 0$20 ) ;
15244: LD_INT 700
15246: PPUSH
15247: CALL_OW 67
// SetSide ( un , your_side ) ;
15251: LD_VAR 0 1
15255: PPUSH
15256: LD_OWVAR 2
15260: PPUSH
15261: CALL_OW 235
// end ;
15265: PPOPN 2
15267: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
15268: LD_EXP 26
15272: PUSH
15273: LD_EXP 59
15277: AND
15278: IFFALSE 15384
15280: GO 15282
15282: DISABLE
15283: LD_INT 0
15285: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15286: LD_ADDR_VAR 0 1
15290: PUSH
15291: LD_INT 22
15293: PUSH
15294: LD_OWVAR 2
15298: PUSH
15299: EMPTY
15300: LIST
15301: LIST
15302: PUSH
15303: LD_INT 2
15305: PUSH
15306: LD_INT 30
15308: PUSH
15309: LD_INT 0
15311: PUSH
15312: EMPTY
15313: LIST
15314: LIST
15315: PUSH
15316: LD_INT 30
15318: PUSH
15319: LD_INT 1
15321: PUSH
15322: EMPTY
15323: LIST
15324: LIST
15325: PUSH
15326: EMPTY
15327: LIST
15328: LIST
15329: LIST
15330: PUSH
15331: EMPTY
15332: LIST
15333: LIST
15334: PPUSH
15335: CALL_OW 69
15339: ST_TO_ADDR
// if not depot then
15340: LD_VAR 0 1
15344: NOT
15345: IFFALSE 15349
// exit ;
15347: GO 15384
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
15349: LD_VAR 0 1
15353: PUSH
15354: LD_INT 1
15356: ARRAY
15357: PPUSH
15358: CALL_OW 250
15362: PPUSH
15363: LD_VAR 0 1
15367: PUSH
15368: LD_INT 1
15370: ARRAY
15371: PPUSH
15372: CALL_OW 251
15376: PPUSH
15377: LD_INT 70
15379: PPUSH
15380: CALL_OW 495
// end ;
15384: PPOPN 1
15386: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
15387: LD_EXP 26
15391: PUSH
15392: LD_EXP 60
15396: AND
15397: IFFALSE 15608
15399: GO 15401
15401: DISABLE
15402: LD_INT 0
15404: PPUSH
15405: PPUSH
15406: PPUSH
15407: PPUSH
15408: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15409: LD_ADDR_VAR 0 5
15413: PUSH
15414: LD_INT 22
15416: PUSH
15417: LD_OWVAR 2
15421: PUSH
15422: EMPTY
15423: LIST
15424: LIST
15425: PUSH
15426: LD_INT 21
15428: PUSH
15429: LD_INT 1
15431: PUSH
15432: EMPTY
15433: LIST
15434: LIST
15435: PUSH
15436: EMPTY
15437: LIST
15438: LIST
15439: PPUSH
15440: CALL_OW 69
15444: ST_TO_ADDR
// if not tmp then
15445: LD_VAR 0 5
15449: NOT
15450: IFFALSE 15454
// exit ;
15452: GO 15608
// for i in tmp do
15454: LD_ADDR_VAR 0 1
15458: PUSH
15459: LD_VAR 0 5
15463: PUSH
15464: FOR_IN
15465: IFFALSE 15606
// begin d := rand ( 0 , 5 ) ;
15467: LD_ADDR_VAR 0 4
15471: PUSH
15472: LD_INT 0
15474: PPUSH
15475: LD_INT 5
15477: PPUSH
15478: CALL_OW 12
15482: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
15483: LD_ADDR_VAR 0 2
15487: PUSH
15488: LD_VAR 0 1
15492: PPUSH
15493: CALL_OW 250
15497: PPUSH
15498: LD_VAR 0 4
15502: PPUSH
15503: LD_INT 3
15505: PPUSH
15506: LD_INT 12
15508: PPUSH
15509: CALL_OW 12
15513: PPUSH
15514: CALL_OW 272
15518: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
15519: LD_ADDR_VAR 0 3
15523: PUSH
15524: LD_VAR 0 1
15528: PPUSH
15529: CALL_OW 251
15533: PPUSH
15534: LD_VAR 0 4
15538: PPUSH
15539: LD_INT 3
15541: PPUSH
15542: LD_INT 12
15544: PPUSH
15545: CALL_OW 12
15549: PPUSH
15550: CALL_OW 273
15554: ST_TO_ADDR
// if ValidHex ( x , y ) then
15555: LD_VAR 0 2
15559: PPUSH
15560: LD_VAR 0 3
15564: PPUSH
15565: CALL_OW 488
15569: IFFALSE 15604
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
15571: LD_VAR 0 1
15575: PPUSH
15576: LD_VAR 0 2
15580: PPUSH
15581: LD_VAR 0 3
15585: PPUSH
15586: LD_INT 3
15588: PPUSH
15589: LD_INT 6
15591: PPUSH
15592: CALL_OW 12
15596: PPUSH
15597: LD_INT 1
15599: PPUSH
15600: CALL_OW 483
// end ;
15604: GO 15464
15606: POP
15607: POP
// end ;
15608: PPOPN 5
15610: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
15611: LD_EXP 26
15615: PUSH
15616: LD_EXP 61
15620: AND
15621: IFFALSE 15715
15623: GO 15625
15625: DISABLE
15626: LD_INT 0
15628: PPUSH
15629: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
15630: LD_ADDR_VAR 0 2
15634: PUSH
15635: LD_INT 22
15637: PUSH
15638: LD_OWVAR 2
15642: PUSH
15643: EMPTY
15644: LIST
15645: LIST
15646: PUSH
15647: LD_INT 32
15649: PUSH
15650: LD_INT 1
15652: PUSH
15653: EMPTY
15654: LIST
15655: LIST
15656: PUSH
15657: LD_INT 21
15659: PUSH
15660: LD_INT 2
15662: PUSH
15663: EMPTY
15664: LIST
15665: LIST
15666: PUSH
15667: EMPTY
15668: LIST
15669: LIST
15670: LIST
15671: PPUSH
15672: CALL_OW 69
15676: ST_TO_ADDR
// if not tmp then
15677: LD_VAR 0 2
15681: NOT
15682: IFFALSE 15686
// exit ;
15684: GO 15715
// for i in tmp do
15686: LD_ADDR_VAR 0 1
15690: PUSH
15691: LD_VAR 0 2
15695: PUSH
15696: FOR_IN
15697: IFFALSE 15713
// SetFuel ( i , 0 ) ;
15699: LD_VAR 0 1
15703: PPUSH
15704: LD_INT 0
15706: PPUSH
15707: CALL_OW 240
15711: GO 15696
15713: POP
15714: POP
// end ;
15715: PPOPN 2
15717: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
15718: LD_EXP 26
15722: PUSH
15723: LD_EXP 62
15727: AND
15728: IFFALSE 15794
15730: GO 15732
15732: DISABLE
15733: LD_INT 0
15735: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15736: LD_ADDR_VAR 0 1
15740: PUSH
15741: LD_INT 22
15743: PUSH
15744: LD_OWVAR 2
15748: PUSH
15749: EMPTY
15750: LIST
15751: LIST
15752: PUSH
15753: LD_INT 30
15755: PUSH
15756: LD_INT 29
15758: PUSH
15759: EMPTY
15760: LIST
15761: LIST
15762: PUSH
15763: EMPTY
15764: LIST
15765: LIST
15766: PPUSH
15767: CALL_OW 69
15771: ST_TO_ADDR
// if not tmp then
15772: LD_VAR 0 1
15776: NOT
15777: IFFALSE 15781
// exit ;
15779: GO 15794
// DestroyUnit ( tmp [ 1 ] ) ;
15781: LD_VAR 0 1
15785: PUSH
15786: LD_INT 1
15788: ARRAY
15789: PPUSH
15790: CALL_OW 65
// end ;
15794: PPOPN 1
15796: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
15797: LD_EXP 26
15801: PUSH
15802: LD_EXP 64
15806: AND
15807: IFFALSE 15936
15809: GO 15811
15811: DISABLE
15812: LD_INT 0
15814: PPUSH
// begin uc_side := 0 ;
15815: LD_ADDR_OWVAR 20
15819: PUSH
15820: LD_INT 0
15822: ST_TO_ADDR
// uc_nation := nation_arabian ;
15823: LD_ADDR_OWVAR 21
15827: PUSH
15828: LD_INT 2
15830: ST_TO_ADDR
// hc_gallery :=  ;
15831: LD_ADDR_OWVAR 33
15835: PUSH
15836: LD_STRING 
15838: ST_TO_ADDR
// hc_name :=  ;
15839: LD_ADDR_OWVAR 26
15843: PUSH
15844: LD_STRING 
15846: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
15847: LD_INT 1
15849: PPUSH
15850: LD_INT 11
15852: PPUSH
15853: LD_INT 10
15855: PPUSH
15856: CALL_OW 380
// un := CreateHuman ;
15860: LD_ADDR_VAR 0 1
15864: PUSH
15865: CALL_OW 44
15869: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15870: LD_VAR 0 1
15874: PPUSH
15875: LD_INT 1
15877: PPUSH
15878: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15882: LD_INT 35
15884: PPUSH
15885: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15889: LD_VAR 0 1
15893: PPUSH
15894: LD_INT 22
15896: PUSH
15897: LD_OWVAR 2
15901: PUSH
15902: EMPTY
15903: LIST
15904: LIST
15905: PPUSH
15906: CALL_OW 69
15910: PPUSH
15911: LD_VAR 0 1
15915: PPUSH
15916: CALL_OW 74
15920: PPUSH
15921: CALL_OW 115
// until IsDead ( un ) ;
15925: LD_VAR 0 1
15929: PPUSH
15930: CALL_OW 301
15934: IFFALSE 15882
// end ;
15936: PPOPN 1
15938: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
15939: LD_EXP 26
15943: PUSH
15944: LD_EXP 66
15948: AND
15949: IFFALSE 15961
15951: GO 15953
15953: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
15954: LD_STRING earthquake(getX(game), 0, 32)
15956: PPUSH
15957: CALL_OW 559
15961: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
15962: LD_EXP 26
15966: PUSH
15967: LD_EXP 67
15971: AND
15972: IFFALSE 16063
15974: GO 15976
15976: DISABLE
15977: LD_INT 0
15979: PPUSH
// begin enable ;
15980: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
15981: LD_ADDR_VAR 0 1
15985: PUSH
15986: LD_INT 22
15988: PUSH
15989: LD_OWVAR 2
15993: PUSH
15994: EMPTY
15995: LIST
15996: LIST
15997: PUSH
15998: LD_INT 21
16000: PUSH
16001: LD_INT 2
16003: PUSH
16004: EMPTY
16005: LIST
16006: LIST
16007: PUSH
16008: LD_INT 33
16010: PUSH
16011: LD_INT 3
16013: PUSH
16014: EMPTY
16015: LIST
16016: LIST
16017: PUSH
16018: EMPTY
16019: LIST
16020: LIST
16021: LIST
16022: PPUSH
16023: CALL_OW 69
16027: ST_TO_ADDR
// if not tmp then
16028: LD_VAR 0 1
16032: NOT
16033: IFFALSE 16037
// exit ;
16035: GO 16063
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16037: LD_VAR 0 1
16041: PUSH
16042: LD_INT 1
16044: PPUSH
16045: LD_VAR 0 1
16049: PPUSH
16050: CALL_OW 12
16054: ARRAY
16055: PPUSH
16056: LD_INT 1
16058: PPUSH
16059: CALL_OW 234
// end ;
16063: PPOPN 1
16065: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
16066: LD_EXP 26
16070: PUSH
16071: LD_EXP 68
16075: AND
16076: IFFALSE 16217
16078: GO 16080
16080: DISABLE
16081: LD_INT 0
16083: PPUSH
16084: PPUSH
16085: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16086: LD_ADDR_VAR 0 3
16090: PUSH
16091: LD_INT 22
16093: PUSH
16094: LD_OWVAR 2
16098: PUSH
16099: EMPTY
16100: LIST
16101: LIST
16102: PUSH
16103: LD_INT 25
16105: PUSH
16106: LD_INT 1
16108: PUSH
16109: EMPTY
16110: LIST
16111: LIST
16112: PUSH
16113: EMPTY
16114: LIST
16115: LIST
16116: PPUSH
16117: CALL_OW 69
16121: ST_TO_ADDR
// if not tmp then
16122: LD_VAR 0 3
16126: NOT
16127: IFFALSE 16131
// exit ;
16129: GO 16217
// un := tmp [ rand ( 1 , tmp ) ] ;
16131: LD_ADDR_VAR 0 2
16135: PUSH
16136: LD_VAR 0 3
16140: PUSH
16141: LD_INT 1
16143: PPUSH
16144: LD_VAR 0 3
16148: PPUSH
16149: CALL_OW 12
16153: ARRAY
16154: ST_TO_ADDR
// if Crawls ( un ) then
16155: LD_VAR 0 2
16159: PPUSH
16160: CALL_OW 318
16164: IFFALSE 16175
// ComWalk ( un ) ;
16166: LD_VAR 0 2
16170: PPUSH
16171: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
16175: LD_VAR 0 2
16179: PPUSH
16180: LD_INT 9
16182: PPUSH
16183: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
16187: LD_INT 28
16189: PPUSH
16190: LD_OWVAR 2
16194: PPUSH
16195: LD_INT 2
16197: PPUSH
16198: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
16202: LD_INT 29
16204: PPUSH
16205: LD_OWVAR 2
16209: PPUSH
16210: LD_INT 2
16212: PPUSH
16213: CALL_OW 322
// end ;
16217: PPOPN 3
16219: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
16220: LD_EXP 26
16224: PUSH
16225: LD_EXP 69
16229: AND
16230: IFFALSE 16341
16232: GO 16234
16234: DISABLE
16235: LD_INT 0
16237: PPUSH
16238: PPUSH
16239: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16240: LD_ADDR_VAR 0 3
16244: PUSH
16245: LD_INT 22
16247: PUSH
16248: LD_OWVAR 2
16252: PUSH
16253: EMPTY
16254: LIST
16255: LIST
16256: PUSH
16257: LD_INT 25
16259: PUSH
16260: LD_INT 1
16262: PUSH
16263: EMPTY
16264: LIST
16265: LIST
16266: PUSH
16267: EMPTY
16268: LIST
16269: LIST
16270: PPUSH
16271: CALL_OW 69
16275: ST_TO_ADDR
// if not tmp then
16276: LD_VAR 0 3
16280: NOT
16281: IFFALSE 16285
// exit ;
16283: GO 16341
// un := tmp [ rand ( 1 , tmp ) ] ;
16285: LD_ADDR_VAR 0 2
16289: PUSH
16290: LD_VAR 0 3
16294: PUSH
16295: LD_INT 1
16297: PPUSH
16298: LD_VAR 0 3
16302: PPUSH
16303: CALL_OW 12
16307: ARRAY
16308: ST_TO_ADDR
// if Crawls ( un ) then
16309: LD_VAR 0 2
16313: PPUSH
16314: CALL_OW 318
16318: IFFALSE 16329
// ComWalk ( un ) ;
16320: LD_VAR 0 2
16324: PPUSH
16325: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16329: LD_VAR 0 2
16333: PPUSH
16334: LD_INT 8
16336: PPUSH
16337: CALL_OW 336
// end ;
16341: PPOPN 3
16343: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
16344: LD_EXP 26
16348: PUSH
16349: LD_EXP 70
16353: AND
16354: IFFALSE 16498
16356: GO 16358
16358: DISABLE
16359: LD_INT 0
16361: PPUSH
16362: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
16363: LD_ADDR_VAR 0 2
16367: PUSH
16368: LD_INT 22
16370: PUSH
16371: LD_OWVAR 2
16375: PUSH
16376: EMPTY
16377: LIST
16378: LIST
16379: PUSH
16380: LD_INT 21
16382: PUSH
16383: LD_INT 2
16385: PUSH
16386: EMPTY
16387: LIST
16388: LIST
16389: PUSH
16390: LD_INT 2
16392: PUSH
16393: LD_INT 34
16395: PUSH
16396: LD_INT 12
16398: PUSH
16399: EMPTY
16400: LIST
16401: LIST
16402: PUSH
16403: LD_INT 34
16405: PUSH
16406: LD_INT 51
16408: PUSH
16409: EMPTY
16410: LIST
16411: LIST
16412: PUSH
16413: LD_INT 34
16415: PUSH
16416: LD_INT 32
16418: PUSH
16419: EMPTY
16420: LIST
16421: LIST
16422: PUSH
16423: EMPTY
16424: LIST
16425: LIST
16426: LIST
16427: LIST
16428: PUSH
16429: EMPTY
16430: LIST
16431: LIST
16432: LIST
16433: PPUSH
16434: CALL_OW 69
16438: ST_TO_ADDR
// if not tmp then
16439: LD_VAR 0 2
16443: NOT
16444: IFFALSE 16448
// exit ;
16446: GO 16498
// for i in tmp do
16448: LD_ADDR_VAR 0 1
16452: PUSH
16453: LD_VAR 0 2
16457: PUSH
16458: FOR_IN
16459: IFFALSE 16496
// if GetCargo ( i , mat_artifact ) = 0 then
16461: LD_VAR 0 1
16465: PPUSH
16466: LD_INT 4
16468: PPUSH
16469: CALL_OW 289
16473: PUSH
16474: LD_INT 0
16476: EQUAL
16477: IFFALSE 16494
// SetCargo ( i , mat_siberit , 100 ) ;
16479: LD_VAR 0 1
16483: PPUSH
16484: LD_INT 3
16486: PPUSH
16487: LD_INT 100
16489: PPUSH
16490: CALL_OW 290
16494: GO 16458
16496: POP
16497: POP
// end ;
16498: PPOPN 2
16500: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
16501: LD_EXP 26
16505: PUSH
16506: LD_EXP 71
16510: AND
16511: IFFALSE 16694
16513: GO 16515
16515: DISABLE
16516: LD_INT 0
16518: PPUSH
16519: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16520: LD_ADDR_VAR 0 2
16524: PUSH
16525: LD_INT 22
16527: PUSH
16528: LD_OWVAR 2
16532: PUSH
16533: EMPTY
16534: LIST
16535: LIST
16536: PPUSH
16537: CALL_OW 69
16541: ST_TO_ADDR
// if not tmp then
16542: LD_VAR 0 2
16546: NOT
16547: IFFALSE 16551
// exit ;
16549: GO 16694
// for i := 1 to 2 do
16551: LD_ADDR_VAR 0 1
16555: PUSH
16556: DOUBLE
16557: LD_INT 1
16559: DEC
16560: ST_TO_ADDR
16561: LD_INT 2
16563: PUSH
16564: FOR_TO
16565: IFFALSE 16692
// begin uc_side := your_side ;
16567: LD_ADDR_OWVAR 20
16571: PUSH
16572: LD_OWVAR 2
16576: ST_TO_ADDR
// uc_nation := nation_american ;
16577: LD_ADDR_OWVAR 21
16581: PUSH
16582: LD_INT 1
16584: ST_TO_ADDR
// vc_chassis := us_morphling ;
16585: LD_ADDR_OWVAR 37
16589: PUSH
16590: LD_INT 5
16592: ST_TO_ADDR
// vc_engine := engine_siberite ;
16593: LD_ADDR_OWVAR 39
16597: PUSH
16598: LD_INT 3
16600: ST_TO_ADDR
// vc_control := control_computer ;
16601: LD_ADDR_OWVAR 38
16605: PUSH
16606: LD_INT 3
16608: ST_TO_ADDR
// vc_weapon := us_double_laser ;
16609: LD_ADDR_OWVAR 40
16613: PUSH
16614: LD_INT 10
16616: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
16617: LD_VAR 0 2
16621: PUSH
16622: LD_INT 1
16624: ARRAY
16625: PPUSH
16626: CALL_OW 310
16630: NOT
16631: IFFALSE 16678
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
16633: CALL_OW 45
16637: PPUSH
16638: LD_VAR 0 2
16642: PUSH
16643: LD_INT 1
16645: ARRAY
16646: PPUSH
16647: CALL_OW 250
16651: PPUSH
16652: LD_VAR 0 2
16656: PUSH
16657: LD_INT 1
16659: ARRAY
16660: PPUSH
16661: CALL_OW 251
16665: PPUSH
16666: LD_INT 12
16668: PPUSH
16669: LD_INT 1
16671: PPUSH
16672: CALL_OW 50
16676: GO 16690
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
16678: CALL_OW 45
16682: PPUSH
16683: LD_INT 1
16685: PPUSH
16686: CALL_OW 51
// end ;
16690: GO 16564
16692: POP
16693: POP
// end ;
16694: PPOPN 2
16696: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
16697: LD_EXP 26
16701: PUSH
16702: LD_EXP 72
16706: AND
16707: IFFALSE 16929
16709: GO 16711
16711: DISABLE
16712: LD_INT 0
16714: PPUSH
16715: PPUSH
16716: PPUSH
16717: PPUSH
16718: PPUSH
16719: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16720: LD_ADDR_VAR 0 6
16724: PUSH
16725: LD_INT 22
16727: PUSH
16728: LD_OWVAR 2
16732: PUSH
16733: EMPTY
16734: LIST
16735: LIST
16736: PUSH
16737: LD_INT 21
16739: PUSH
16740: LD_INT 1
16742: PUSH
16743: EMPTY
16744: LIST
16745: LIST
16746: PUSH
16747: LD_INT 3
16749: PUSH
16750: LD_INT 23
16752: PUSH
16753: LD_INT 0
16755: PUSH
16756: EMPTY
16757: LIST
16758: LIST
16759: PUSH
16760: EMPTY
16761: LIST
16762: LIST
16763: PUSH
16764: EMPTY
16765: LIST
16766: LIST
16767: LIST
16768: PPUSH
16769: CALL_OW 69
16773: ST_TO_ADDR
// if not tmp then
16774: LD_VAR 0 6
16778: NOT
16779: IFFALSE 16783
// exit ;
16781: GO 16929
// s1 := rand ( 1 , 4 ) ;
16783: LD_ADDR_VAR 0 2
16787: PUSH
16788: LD_INT 1
16790: PPUSH
16791: LD_INT 4
16793: PPUSH
16794: CALL_OW 12
16798: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
16799: LD_ADDR_VAR 0 4
16803: PUSH
16804: LD_VAR 0 6
16808: PUSH
16809: LD_INT 1
16811: ARRAY
16812: PPUSH
16813: LD_VAR 0 2
16817: PPUSH
16818: CALL_OW 259
16822: ST_TO_ADDR
// if s1 = 1 then
16823: LD_VAR 0 2
16827: PUSH
16828: LD_INT 1
16830: EQUAL
16831: IFFALSE 16851
// s2 := rand ( 2 , 4 ) else
16833: LD_ADDR_VAR 0 3
16837: PUSH
16838: LD_INT 2
16840: PPUSH
16841: LD_INT 4
16843: PPUSH
16844: CALL_OW 12
16848: ST_TO_ADDR
16849: GO 16859
// s2 := 1 ;
16851: LD_ADDR_VAR 0 3
16855: PUSH
16856: LD_INT 1
16858: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
16859: LD_ADDR_VAR 0 5
16863: PUSH
16864: LD_VAR 0 6
16868: PUSH
16869: LD_INT 1
16871: ARRAY
16872: PPUSH
16873: LD_VAR 0 3
16877: PPUSH
16878: CALL_OW 259
16882: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
16883: LD_VAR 0 6
16887: PUSH
16888: LD_INT 1
16890: ARRAY
16891: PPUSH
16892: LD_VAR 0 2
16896: PPUSH
16897: LD_VAR 0 5
16901: PPUSH
16902: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
16906: LD_VAR 0 6
16910: PUSH
16911: LD_INT 1
16913: ARRAY
16914: PPUSH
16915: LD_VAR 0 3
16919: PPUSH
16920: LD_VAR 0 4
16924: PPUSH
16925: CALL_OW 237
// end ;
16929: PPOPN 6
16931: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
16932: LD_EXP 26
16936: PUSH
16937: LD_EXP 73
16941: AND
16942: IFFALSE 17021
16944: GO 16946
16946: DISABLE
16947: LD_INT 0
16949: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
16950: LD_ADDR_VAR 0 1
16954: PUSH
16955: LD_INT 22
16957: PUSH
16958: LD_OWVAR 2
16962: PUSH
16963: EMPTY
16964: LIST
16965: LIST
16966: PUSH
16967: LD_INT 30
16969: PUSH
16970: LD_INT 3
16972: PUSH
16973: EMPTY
16974: LIST
16975: LIST
16976: PUSH
16977: EMPTY
16978: LIST
16979: LIST
16980: PPUSH
16981: CALL_OW 69
16985: ST_TO_ADDR
// if not tmp then
16986: LD_VAR 0 1
16990: NOT
16991: IFFALSE 16995
// exit ;
16993: GO 17021
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16995: LD_VAR 0 1
16999: PUSH
17000: LD_INT 1
17002: PPUSH
17003: LD_VAR 0 1
17007: PPUSH
17008: CALL_OW 12
17012: ARRAY
17013: PPUSH
17014: LD_INT 1
17016: PPUSH
17017: CALL_OW 234
// end ;
17021: PPOPN 1
17023: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
17024: LD_EXP 26
17028: PUSH
17029: LD_EXP 74
17033: AND
17034: IFFALSE 17146
17036: GO 17038
17038: DISABLE
17039: LD_INT 0
17041: PPUSH
17042: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
17043: LD_ADDR_VAR 0 2
17047: PUSH
17048: LD_INT 22
17050: PUSH
17051: LD_OWVAR 2
17055: PUSH
17056: EMPTY
17057: LIST
17058: LIST
17059: PUSH
17060: LD_INT 2
17062: PUSH
17063: LD_INT 30
17065: PUSH
17066: LD_INT 27
17068: PUSH
17069: EMPTY
17070: LIST
17071: LIST
17072: PUSH
17073: LD_INT 30
17075: PUSH
17076: LD_INT 26
17078: PUSH
17079: EMPTY
17080: LIST
17081: LIST
17082: PUSH
17083: LD_INT 30
17085: PUSH
17086: LD_INT 28
17088: PUSH
17089: EMPTY
17090: LIST
17091: LIST
17092: PUSH
17093: EMPTY
17094: LIST
17095: LIST
17096: LIST
17097: LIST
17098: PUSH
17099: EMPTY
17100: LIST
17101: LIST
17102: PPUSH
17103: CALL_OW 69
17107: ST_TO_ADDR
// if not tmp then
17108: LD_VAR 0 2
17112: NOT
17113: IFFALSE 17117
// exit ;
17115: GO 17146
// for i in tmp do
17117: LD_ADDR_VAR 0 1
17121: PUSH
17122: LD_VAR 0 2
17126: PUSH
17127: FOR_IN
17128: IFFALSE 17144
// SetLives ( i , 1 ) ;
17130: LD_VAR 0 1
17134: PPUSH
17135: LD_INT 1
17137: PPUSH
17138: CALL_OW 234
17142: GO 17127
17144: POP
17145: POP
// end ;
17146: PPOPN 2
17148: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
17149: LD_EXP 26
17153: PUSH
17154: LD_EXP 75
17158: AND
17159: IFFALSE 17446
17161: GO 17163
17163: DISABLE
17164: LD_INT 0
17166: PPUSH
17167: PPUSH
17168: PPUSH
// begin i := rand ( 1 , 7 ) ;
17169: LD_ADDR_VAR 0 1
17173: PUSH
17174: LD_INT 1
17176: PPUSH
17177: LD_INT 7
17179: PPUSH
17180: CALL_OW 12
17184: ST_TO_ADDR
// case i of 1 :
17185: LD_VAR 0 1
17189: PUSH
17190: LD_INT 1
17192: DOUBLE
17193: EQUAL
17194: IFTRUE 17198
17196: GO 17208
17198: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
17199: LD_STRING earthquake(getX(game), 0, 32)
17201: PPUSH
17202: CALL_OW 559
17206: GO 17446
17208: LD_INT 2
17210: DOUBLE
17211: EQUAL
17212: IFTRUE 17216
17214: GO 17230
17216: POP
// begin ToLua ( displayStucuk(); ) ;
17217: LD_STRING displayStucuk();
17219: PPUSH
17220: CALL_OW 559
// ResetFog ;
17224: CALL_OW 335
// end ; 3 :
17228: GO 17446
17230: LD_INT 3
17232: DOUBLE
17233: EQUAL
17234: IFTRUE 17238
17236: GO 17342
17238: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17239: LD_ADDR_VAR 0 2
17243: PUSH
17244: LD_INT 22
17246: PUSH
17247: LD_OWVAR 2
17251: PUSH
17252: EMPTY
17253: LIST
17254: LIST
17255: PUSH
17256: LD_INT 25
17258: PUSH
17259: LD_INT 1
17261: PUSH
17262: EMPTY
17263: LIST
17264: LIST
17265: PUSH
17266: EMPTY
17267: LIST
17268: LIST
17269: PPUSH
17270: CALL_OW 69
17274: ST_TO_ADDR
// if not tmp then
17275: LD_VAR 0 2
17279: NOT
17280: IFFALSE 17284
// exit ;
17282: GO 17446
// un := tmp [ rand ( 1 , tmp ) ] ;
17284: LD_ADDR_VAR 0 3
17288: PUSH
17289: LD_VAR 0 2
17293: PUSH
17294: LD_INT 1
17296: PPUSH
17297: LD_VAR 0 2
17301: PPUSH
17302: CALL_OW 12
17306: ARRAY
17307: ST_TO_ADDR
// if Crawls ( un ) then
17308: LD_VAR 0 3
17312: PPUSH
17313: CALL_OW 318
17317: IFFALSE 17328
// ComWalk ( un ) ;
17319: LD_VAR 0 3
17323: PPUSH
17324: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17328: LD_VAR 0 3
17332: PPUSH
17333: LD_INT 8
17335: PPUSH
17336: CALL_OW 336
// end ; 4 :
17340: GO 17446
17342: LD_INT 4
17344: DOUBLE
17345: EQUAL
17346: IFTRUE 17350
17348: GO 17424
17350: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17351: LD_ADDR_VAR 0 2
17355: PUSH
17356: LD_INT 22
17358: PUSH
17359: LD_OWVAR 2
17363: PUSH
17364: EMPTY
17365: LIST
17366: LIST
17367: PUSH
17368: LD_INT 30
17370: PUSH
17371: LD_INT 29
17373: PUSH
17374: EMPTY
17375: LIST
17376: LIST
17377: PUSH
17378: EMPTY
17379: LIST
17380: LIST
17381: PPUSH
17382: CALL_OW 69
17386: ST_TO_ADDR
// if not tmp then
17387: LD_VAR 0 2
17391: NOT
17392: IFFALSE 17396
// exit ;
17394: GO 17446
// CenterNowOnUnits ( tmp [ 1 ] ) ;
17396: LD_VAR 0 2
17400: PUSH
17401: LD_INT 1
17403: ARRAY
17404: PPUSH
17405: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
17409: LD_VAR 0 2
17413: PUSH
17414: LD_INT 1
17416: ARRAY
17417: PPUSH
17418: CALL_OW 65
// end ; 5 .. 7 :
17422: GO 17446
17424: LD_INT 5
17426: DOUBLE
17427: GREATEREQUAL
17428: IFFALSE 17436
17430: LD_INT 7
17432: DOUBLE
17433: LESSEQUAL
17434: IFTRUE 17438
17436: GO 17445
17438: POP
// StreamSibBomb ; end ;
17439: CALL 13683 0 0
17443: GO 17446
17445: POP
// end ;
17446: PPOPN 3
17448: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
17449: LD_EXP 26
17453: PUSH
17454: LD_EXP 76
17458: AND
17459: IFFALSE 17615
17461: GO 17463
17463: DISABLE
17464: LD_INT 0
17466: PPUSH
17467: PPUSH
17468: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
17469: LD_ADDR_VAR 0 2
17473: PUSH
17474: LD_INT 81
17476: PUSH
17477: LD_OWVAR 2
17481: PUSH
17482: EMPTY
17483: LIST
17484: LIST
17485: PUSH
17486: LD_INT 2
17488: PUSH
17489: LD_INT 21
17491: PUSH
17492: LD_INT 1
17494: PUSH
17495: EMPTY
17496: LIST
17497: LIST
17498: PUSH
17499: LD_INT 21
17501: PUSH
17502: LD_INT 2
17504: PUSH
17505: EMPTY
17506: LIST
17507: LIST
17508: PUSH
17509: EMPTY
17510: LIST
17511: LIST
17512: LIST
17513: PUSH
17514: EMPTY
17515: LIST
17516: LIST
17517: PPUSH
17518: CALL_OW 69
17522: ST_TO_ADDR
// if not tmp then
17523: LD_VAR 0 2
17527: NOT
17528: IFFALSE 17532
// exit ;
17530: GO 17615
// p := 0 ;
17532: LD_ADDR_VAR 0 3
17536: PUSH
17537: LD_INT 0
17539: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17540: LD_INT 35
17542: PPUSH
17543: CALL_OW 67
// p := p + 1 ;
17547: LD_ADDR_VAR 0 3
17551: PUSH
17552: LD_VAR 0 3
17556: PUSH
17557: LD_INT 1
17559: PLUS
17560: ST_TO_ADDR
// for i in tmp do
17561: LD_ADDR_VAR 0 1
17565: PUSH
17566: LD_VAR 0 2
17570: PUSH
17571: FOR_IN
17572: IFFALSE 17603
// if GetLives ( i ) < 1000 then
17574: LD_VAR 0 1
17578: PPUSH
17579: CALL_OW 256
17583: PUSH
17584: LD_INT 1000
17586: LESS
17587: IFFALSE 17601
// SetLives ( i , 1000 ) ;
17589: LD_VAR 0 1
17593: PPUSH
17594: LD_INT 1000
17596: PPUSH
17597: CALL_OW 234
17601: GO 17571
17603: POP
17604: POP
// until p > 20 ;
17605: LD_VAR 0 3
17609: PUSH
17610: LD_INT 20
17612: GREATER
17613: IFFALSE 17540
// end ;
17615: PPOPN 3
17617: END
// every 0 0$1 trigger StreamModeActive and sTime do
17618: LD_EXP 26
17622: PUSH
17623: LD_EXP 77
17627: AND
17628: IFFALSE 17663
17630: GO 17632
17632: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
17633: LD_INT 28
17635: PPUSH
17636: LD_OWVAR 2
17640: PPUSH
17641: LD_INT 2
17643: PPUSH
17644: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
17648: LD_INT 30
17650: PPUSH
17651: LD_OWVAR 2
17655: PPUSH
17656: LD_INT 2
17658: PPUSH
17659: CALL_OW 322
// end ;
17663: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
17664: LD_EXP 26
17668: PUSH
17669: LD_EXP 78
17673: AND
17674: IFFALSE 17795
17676: GO 17678
17678: DISABLE
17679: LD_INT 0
17681: PPUSH
17682: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17683: LD_ADDR_VAR 0 2
17687: PUSH
17688: LD_INT 22
17690: PUSH
17691: LD_OWVAR 2
17695: PUSH
17696: EMPTY
17697: LIST
17698: LIST
17699: PUSH
17700: LD_INT 21
17702: PUSH
17703: LD_INT 1
17705: PUSH
17706: EMPTY
17707: LIST
17708: LIST
17709: PUSH
17710: LD_INT 3
17712: PUSH
17713: LD_INT 23
17715: PUSH
17716: LD_INT 0
17718: PUSH
17719: EMPTY
17720: LIST
17721: LIST
17722: PUSH
17723: EMPTY
17724: LIST
17725: LIST
17726: PUSH
17727: EMPTY
17728: LIST
17729: LIST
17730: LIST
17731: PPUSH
17732: CALL_OW 69
17736: ST_TO_ADDR
// if not tmp then
17737: LD_VAR 0 2
17741: NOT
17742: IFFALSE 17746
// exit ;
17744: GO 17795
// for i in tmp do
17746: LD_ADDR_VAR 0 1
17750: PUSH
17751: LD_VAR 0 2
17755: PUSH
17756: FOR_IN
17757: IFFALSE 17793
// begin if Crawls ( i ) then
17759: LD_VAR 0 1
17763: PPUSH
17764: CALL_OW 318
17768: IFFALSE 17779
// ComWalk ( i ) ;
17770: LD_VAR 0 1
17774: PPUSH
17775: CALL_OW 138
// SetClass ( i , 2 ) ;
17779: LD_VAR 0 1
17783: PPUSH
17784: LD_INT 2
17786: PPUSH
17787: CALL_OW 336
// end ;
17791: GO 17756
17793: POP
17794: POP
// end ;
17795: PPOPN 2
17797: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
17798: LD_EXP 26
17802: PUSH
17803: LD_EXP 79
17807: AND
17808: IFFALSE 18096
17810: GO 17812
17812: DISABLE
17813: LD_INT 0
17815: PPUSH
17816: PPUSH
17817: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
17818: LD_OWVAR 2
17822: PPUSH
17823: LD_INT 9
17825: PPUSH
17826: LD_INT 1
17828: PPUSH
17829: LD_INT 1
17831: PPUSH
17832: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
17836: LD_INT 9
17838: PPUSH
17839: LD_OWVAR 2
17843: PPUSH
17844: CALL_OW 343
// uc_side := 9 ;
17848: LD_ADDR_OWVAR 20
17852: PUSH
17853: LD_INT 9
17855: ST_TO_ADDR
// uc_nation := 2 ;
17856: LD_ADDR_OWVAR 21
17860: PUSH
17861: LD_INT 2
17863: ST_TO_ADDR
// hc_name := Dark Warrior ;
17864: LD_ADDR_OWVAR 26
17868: PUSH
17869: LD_STRING Dark Warrior
17871: ST_TO_ADDR
// hc_gallery :=  ;
17872: LD_ADDR_OWVAR 33
17876: PUSH
17877: LD_STRING 
17879: ST_TO_ADDR
// hc_noskilllimit := true ;
17880: LD_ADDR_OWVAR 76
17884: PUSH
17885: LD_INT 1
17887: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
17888: LD_ADDR_OWVAR 31
17892: PUSH
17893: LD_INT 30
17895: PUSH
17896: LD_INT 30
17898: PUSH
17899: LD_INT 30
17901: PUSH
17902: LD_INT 30
17904: PUSH
17905: EMPTY
17906: LIST
17907: LIST
17908: LIST
17909: LIST
17910: ST_TO_ADDR
// un := CreateHuman ;
17911: LD_ADDR_VAR 0 3
17915: PUSH
17916: CALL_OW 44
17920: ST_TO_ADDR
// hc_noskilllimit := false ;
17921: LD_ADDR_OWVAR 76
17925: PUSH
17926: LD_INT 0
17928: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17929: LD_VAR 0 3
17933: PPUSH
17934: LD_INT 1
17936: PPUSH
17937: CALL_OW 51
// ToLua ( playRanger() ) ;
17941: LD_STRING playRanger()
17943: PPUSH
17944: CALL_OW 559
// p := 0 ;
17948: LD_ADDR_VAR 0 2
17952: PUSH
17953: LD_INT 0
17955: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17956: LD_INT 35
17958: PPUSH
17959: CALL_OW 67
// p := p + 1 ;
17963: LD_ADDR_VAR 0 2
17967: PUSH
17968: LD_VAR 0 2
17972: PUSH
17973: LD_INT 1
17975: PLUS
17976: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
17977: LD_VAR 0 3
17981: PPUSH
17982: CALL_OW 256
17986: PUSH
17987: LD_INT 1000
17989: LESS
17990: IFFALSE 18004
// SetLives ( un , 1000 ) ;
17992: LD_VAR 0 3
17996: PPUSH
17997: LD_INT 1000
17999: PPUSH
18000: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
18004: LD_VAR 0 3
18008: PPUSH
18009: LD_INT 81
18011: PUSH
18012: LD_OWVAR 2
18016: PUSH
18017: EMPTY
18018: LIST
18019: LIST
18020: PUSH
18021: LD_INT 91
18023: PUSH
18024: LD_VAR 0 3
18028: PUSH
18029: LD_INT 30
18031: PUSH
18032: EMPTY
18033: LIST
18034: LIST
18035: LIST
18036: PUSH
18037: EMPTY
18038: LIST
18039: LIST
18040: PPUSH
18041: CALL_OW 69
18045: PPUSH
18046: LD_VAR 0 3
18050: PPUSH
18051: CALL_OW 74
18055: PPUSH
18056: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
18060: LD_VAR 0 2
18064: PUSH
18065: LD_INT 80
18067: GREATER
18068: PUSH
18069: LD_VAR 0 3
18073: PPUSH
18074: CALL_OW 301
18078: OR
18079: IFFALSE 17956
// if un then
18081: LD_VAR 0 3
18085: IFFALSE 18096
// RemoveUnit ( un ) ;
18087: LD_VAR 0 3
18091: PPUSH
18092: CALL_OW 64
// end ;
18096: PPOPN 3
18098: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
18099: LD_EXP 80
18103: IFFALSE 18219
18105: GO 18107
18107: DISABLE
18108: LD_INT 0
18110: PPUSH
18111: PPUSH
18112: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
18113: LD_ADDR_VAR 0 2
18117: PUSH
18118: LD_INT 81
18120: PUSH
18121: LD_OWVAR 2
18125: PUSH
18126: EMPTY
18127: LIST
18128: LIST
18129: PUSH
18130: LD_INT 21
18132: PUSH
18133: LD_INT 1
18135: PUSH
18136: EMPTY
18137: LIST
18138: LIST
18139: PUSH
18140: EMPTY
18141: LIST
18142: LIST
18143: PPUSH
18144: CALL_OW 69
18148: ST_TO_ADDR
// ToLua ( playComputer() ) ;
18149: LD_STRING playComputer()
18151: PPUSH
18152: CALL_OW 559
// if not tmp then
18156: LD_VAR 0 2
18160: NOT
18161: IFFALSE 18165
// exit ;
18163: GO 18219
// for i in tmp do
18165: LD_ADDR_VAR 0 1
18169: PUSH
18170: LD_VAR 0 2
18174: PUSH
18175: FOR_IN
18176: IFFALSE 18217
// for j := 1 to 4 do
18178: LD_ADDR_VAR 0 3
18182: PUSH
18183: DOUBLE
18184: LD_INT 1
18186: DEC
18187: ST_TO_ADDR
18188: LD_INT 4
18190: PUSH
18191: FOR_TO
18192: IFFALSE 18213
// SetSkill ( i , j , 10 ) ;
18194: LD_VAR 0 1
18198: PPUSH
18199: LD_VAR 0 3
18203: PPUSH
18204: LD_INT 10
18206: PPUSH
18207: CALL_OW 237
18211: GO 18191
18213: POP
18214: POP
18215: GO 18175
18217: POP
18218: POP
// end ;
18219: PPOPN 3
18221: END
// every 0 0$1 trigger s30 do var i , tmp ;
18222: LD_EXP 81
18226: IFFALSE 18295
18228: GO 18230
18230: DISABLE
18231: LD_INT 0
18233: PPUSH
18234: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18235: LD_ADDR_VAR 0 2
18239: PUSH
18240: LD_INT 22
18242: PUSH
18243: LD_OWVAR 2
18247: PUSH
18248: EMPTY
18249: LIST
18250: LIST
18251: PPUSH
18252: CALL_OW 69
18256: ST_TO_ADDR
// if not tmp then
18257: LD_VAR 0 2
18261: NOT
18262: IFFALSE 18266
// exit ;
18264: GO 18295
// for i in tmp do
18266: LD_ADDR_VAR 0 1
18270: PUSH
18271: LD_VAR 0 2
18275: PUSH
18276: FOR_IN
18277: IFFALSE 18293
// SetLives ( i , 300 ) ;
18279: LD_VAR 0 1
18283: PPUSH
18284: LD_INT 300
18286: PPUSH
18287: CALL_OW 234
18291: GO 18276
18293: POP
18294: POP
// end ;
18295: PPOPN 2
18297: END
// every 0 0$1 trigger s60 do var i , tmp ;
18298: LD_EXP 82
18302: IFFALSE 18371
18304: GO 18306
18306: DISABLE
18307: LD_INT 0
18309: PPUSH
18310: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18311: LD_ADDR_VAR 0 2
18315: PUSH
18316: LD_INT 22
18318: PUSH
18319: LD_OWVAR 2
18323: PUSH
18324: EMPTY
18325: LIST
18326: LIST
18327: PPUSH
18328: CALL_OW 69
18332: ST_TO_ADDR
// if not tmp then
18333: LD_VAR 0 2
18337: NOT
18338: IFFALSE 18342
// exit ;
18340: GO 18371
// for i in tmp do
18342: LD_ADDR_VAR 0 1
18346: PUSH
18347: LD_VAR 0 2
18351: PUSH
18352: FOR_IN
18353: IFFALSE 18369
// SetLives ( i , 600 ) ;
18355: LD_VAR 0 1
18359: PPUSH
18360: LD_INT 600
18362: PPUSH
18363: CALL_OW 234
18367: GO 18352
18369: POP
18370: POP
// end ;
18371: PPOPN 2
18373: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18374: LD_INT 0
18376: PPUSH
// case cmd of 301 :
18377: LD_VAR 0 1
18381: PUSH
18382: LD_INT 301
18384: DOUBLE
18385: EQUAL
18386: IFTRUE 18390
18388: GO 18422
18390: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
18391: LD_VAR 0 6
18395: PPUSH
18396: LD_VAR 0 7
18400: PPUSH
18401: LD_VAR 0 8
18405: PPUSH
18406: LD_VAR 0 4
18410: PPUSH
18411: LD_VAR 0 5
18415: PPUSH
18416: CALL 19631 0 5
18420: GO 18543
18422: LD_INT 302
18424: DOUBLE
18425: EQUAL
18426: IFTRUE 18430
18428: GO 18467
18430: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
18431: LD_VAR 0 6
18435: PPUSH
18436: LD_VAR 0 7
18440: PPUSH
18441: LD_VAR 0 8
18445: PPUSH
18446: LD_VAR 0 9
18450: PPUSH
18451: LD_VAR 0 4
18455: PPUSH
18456: LD_VAR 0 5
18460: PPUSH
18461: CALL 19722 0 6
18465: GO 18543
18467: LD_INT 303
18469: DOUBLE
18470: EQUAL
18471: IFTRUE 18475
18473: GO 18512
18475: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
18476: LD_VAR 0 6
18480: PPUSH
18481: LD_VAR 0 7
18485: PPUSH
18486: LD_VAR 0 8
18490: PPUSH
18491: LD_VAR 0 9
18495: PPUSH
18496: LD_VAR 0 4
18500: PPUSH
18501: LD_VAR 0 5
18505: PPUSH
18506: CALL 18548 0 6
18510: GO 18543
18512: LD_INT 304
18514: DOUBLE
18515: EQUAL
18516: IFTRUE 18520
18518: GO 18542
18520: POP
// hHackTeleport ( unit , x , y ) ; end ;
18521: LD_VAR 0 2
18525: PPUSH
18526: LD_VAR 0 4
18530: PPUSH
18531: LD_VAR 0 5
18535: PPUSH
18536: CALL 20315 0 3
18540: GO 18543
18542: POP
// end ;
18543: LD_VAR 0 12
18547: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
18548: LD_INT 0
18550: PPUSH
18551: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
18552: LD_VAR 0 1
18556: PUSH
18557: LD_INT 1
18559: LESS
18560: PUSH
18561: LD_VAR 0 1
18565: PUSH
18566: LD_INT 3
18568: GREATER
18569: OR
18570: PUSH
18571: LD_VAR 0 5
18575: PPUSH
18576: LD_VAR 0 6
18580: PPUSH
18581: CALL_OW 428
18585: OR
18586: IFFALSE 18590
// exit ;
18588: GO 19318
// uc_side := your_side ;
18590: LD_ADDR_OWVAR 20
18594: PUSH
18595: LD_OWVAR 2
18599: ST_TO_ADDR
// uc_nation := nation ;
18600: LD_ADDR_OWVAR 21
18604: PUSH
18605: LD_VAR 0 1
18609: ST_TO_ADDR
// bc_level = 1 ;
18610: LD_ADDR_OWVAR 43
18614: PUSH
18615: LD_INT 1
18617: ST_TO_ADDR
// case btype of 1 :
18618: LD_VAR 0 2
18622: PUSH
18623: LD_INT 1
18625: DOUBLE
18626: EQUAL
18627: IFTRUE 18631
18629: GO 18642
18631: POP
// bc_type := b_depot ; 2 :
18632: LD_ADDR_OWVAR 42
18636: PUSH
18637: LD_INT 0
18639: ST_TO_ADDR
18640: GO 19262
18642: LD_INT 2
18644: DOUBLE
18645: EQUAL
18646: IFTRUE 18650
18648: GO 18661
18650: POP
// bc_type := b_warehouse ; 3 :
18651: LD_ADDR_OWVAR 42
18655: PUSH
18656: LD_INT 1
18658: ST_TO_ADDR
18659: GO 19262
18661: LD_INT 3
18663: DOUBLE
18664: EQUAL
18665: IFTRUE 18669
18667: GO 18680
18669: POP
// bc_type := b_lab ; 4 .. 9 :
18670: LD_ADDR_OWVAR 42
18674: PUSH
18675: LD_INT 6
18677: ST_TO_ADDR
18678: GO 19262
18680: LD_INT 4
18682: DOUBLE
18683: GREATEREQUAL
18684: IFFALSE 18692
18686: LD_INT 9
18688: DOUBLE
18689: LESSEQUAL
18690: IFTRUE 18694
18692: GO 18754
18694: POP
// begin bc_type := b_lab_half ;
18695: LD_ADDR_OWVAR 42
18699: PUSH
18700: LD_INT 7
18702: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
18703: LD_ADDR_OWVAR 44
18707: PUSH
18708: LD_INT 10
18710: PUSH
18711: LD_INT 11
18713: PUSH
18714: LD_INT 12
18716: PUSH
18717: LD_INT 15
18719: PUSH
18720: LD_INT 14
18722: PUSH
18723: LD_INT 13
18725: PUSH
18726: EMPTY
18727: LIST
18728: LIST
18729: LIST
18730: LIST
18731: LIST
18732: LIST
18733: PUSH
18734: LD_VAR 0 2
18738: PUSH
18739: LD_INT 3
18741: MINUS
18742: ARRAY
18743: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
18744: LD_ADDR_OWVAR 45
18748: PUSH
18749: LD_INT 9
18751: ST_TO_ADDR
// end ; 10 .. 13 :
18752: GO 19262
18754: LD_INT 10
18756: DOUBLE
18757: GREATEREQUAL
18758: IFFALSE 18766
18760: LD_INT 13
18762: DOUBLE
18763: LESSEQUAL
18764: IFTRUE 18768
18766: GO 18845
18768: POP
// begin bc_type := b_lab_full ;
18769: LD_ADDR_OWVAR 42
18773: PUSH
18774: LD_INT 8
18776: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
18777: LD_ADDR_OWVAR 44
18781: PUSH
18782: LD_INT 10
18784: PUSH
18785: LD_INT 12
18787: PUSH
18788: LD_INT 14
18790: PUSH
18791: LD_INT 13
18793: PUSH
18794: EMPTY
18795: LIST
18796: LIST
18797: LIST
18798: LIST
18799: PUSH
18800: LD_VAR 0 2
18804: PUSH
18805: LD_INT 9
18807: MINUS
18808: ARRAY
18809: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
18810: LD_ADDR_OWVAR 45
18814: PUSH
18815: LD_INT 11
18817: PUSH
18818: LD_INT 15
18820: PUSH
18821: LD_INT 12
18823: PUSH
18824: LD_INT 15
18826: PUSH
18827: EMPTY
18828: LIST
18829: LIST
18830: LIST
18831: LIST
18832: PUSH
18833: LD_VAR 0 2
18837: PUSH
18838: LD_INT 9
18840: MINUS
18841: ARRAY
18842: ST_TO_ADDR
// end ; 14 :
18843: GO 19262
18845: LD_INT 14
18847: DOUBLE
18848: EQUAL
18849: IFTRUE 18853
18851: GO 18864
18853: POP
// bc_type := b_workshop ; 15 :
18854: LD_ADDR_OWVAR 42
18858: PUSH
18859: LD_INT 2
18861: ST_TO_ADDR
18862: GO 19262
18864: LD_INT 15
18866: DOUBLE
18867: EQUAL
18868: IFTRUE 18872
18870: GO 18883
18872: POP
// bc_type := b_factory ; 16 :
18873: LD_ADDR_OWVAR 42
18877: PUSH
18878: LD_INT 3
18880: ST_TO_ADDR
18881: GO 19262
18883: LD_INT 16
18885: DOUBLE
18886: EQUAL
18887: IFTRUE 18891
18889: GO 18902
18891: POP
// bc_type := b_ext_gun ; 17 :
18892: LD_ADDR_OWVAR 42
18896: PUSH
18897: LD_INT 17
18899: ST_TO_ADDR
18900: GO 19262
18902: LD_INT 17
18904: DOUBLE
18905: EQUAL
18906: IFTRUE 18910
18908: GO 18938
18910: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
18911: LD_ADDR_OWVAR 42
18915: PUSH
18916: LD_INT 19
18918: PUSH
18919: LD_INT 23
18921: PUSH
18922: LD_INT 19
18924: PUSH
18925: EMPTY
18926: LIST
18927: LIST
18928: LIST
18929: PUSH
18930: LD_VAR 0 1
18934: ARRAY
18935: ST_TO_ADDR
18936: GO 19262
18938: LD_INT 18
18940: DOUBLE
18941: EQUAL
18942: IFTRUE 18946
18944: GO 18957
18946: POP
// bc_type := b_ext_radar ; 19 :
18947: LD_ADDR_OWVAR 42
18951: PUSH
18952: LD_INT 20
18954: ST_TO_ADDR
18955: GO 19262
18957: LD_INT 19
18959: DOUBLE
18960: EQUAL
18961: IFTRUE 18965
18963: GO 18976
18965: POP
// bc_type := b_ext_radio ; 20 :
18966: LD_ADDR_OWVAR 42
18970: PUSH
18971: LD_INT 22
18973: ST_TO_ADDR
18974: GO 19262
18976: LD_INT 20
18978: DOUBLE
18979: EQUAL
18980: IFTRUE 18984
18982: GO 18995
18984: POP
// bc_type := b_ext_siberium ; 21 :
18985: LD_ADDR_OWVAR 42
18989: PUSH
18990: LD_INT 21
18992: ST_TO_ADDR
18993: GO 19262
18995: LD_INT 21
18997: DOUBLE
18998: EQUAL
18999: IFTRUE 19003
19001: GO 19014
19003: POP
// bc_type := b_ext_computer ; 22 :
19004: LD_ADDR_OWVAR 42
19008: PUSH
19009: LD_INT 24
19011: ST_TO_ADDR
19012: GO 19262
19014: LD_INT 22
19016: DOUBLE
19017: EQUAL
19018: IFTRUE 19022
19020: GO 19033
19022: POP
// bc_type := b_ext_track ; 23 :
19023: LD_ADDR_OWVAR 42
19027: PUSH
19028: LD_INT 16
19030: ST_TO_ADDR
19031: GO 19262
19033: LD_INT 23
19035: DOUBLE
19036: EQUAL
19037: IFTRUE 19041
19039: GO 19052
19041: POP
// bc_type := b_ext_laser ; 24 :
19042: LD_ADDR_OWVAR 42
19046: PUSH
19047: LD_INT 25
19049: ST_TO_ADDR
19050: GO 19262
19052: LD_INT 24
19054: DOUBLE
19055: EQUAL
19056: IFTRUE 19060
19058: GO 19071
19060: POP
// bc_type := b_control_tower ; 25 :
19061: LD_ADDR_OWVAR 42
19065: PUSH
19066: LD_INT 36
19068: ST_TO_ADDR
19069: GO 19262
19071: LD_INT 25
19073: DOUBLE
19074: EQUAL
19075: IFTRUE 19079
19077: GO 19090
19079: POP
// bc_type := b_breastwork ; 26 :
19080: LD_ADDR_OWVAR 42
19084: PUSH
19085: LD_INT 31
19087: ST_TO_ADDR
19088: GO 19262
19090: LD_INT 26
19092: DOUBLE
19093: EQUAL
19094: IFTRUE 19098
19096: GO 19109
19098: POP
// bc_type := b_bunker ; 27 :
19099: LD_ADDR_OWVAR 42
19103: PUSH
19104: LD_INT 32
19106: ST_TO_ADDR
19107: GO 19262
19109: LD_INT 27
19111: DOUBLE
19112: EQUAL
19113: IFTRUE 19117
19115: GO 19128
19117: POP
// bc_type := b_turret ; 28 :
19118: LD_ADDR_OWVAR 42
19122: PUSH
19123: LD_INT 33
19125: ST_TO_ADDR
19126: GO 19262
19128: LD_INT 28
19130: DOUBLE
19131: EQUAL
19132: IFTRUE 19136
19134: GO 19147
19136: POP
// bc_type := b_armoury ; 29 :
19137: LD_ADDR_OWVAR 42
19141: PUSH
19142: LD_INT 4
19144: ST_TO_ADDR
19145: GO 19262
19147: LD_INT 29
19149: DOUBLE
19150: EQUAL
19151: IFTRUE 19155
19153: GO 19166
19155: POP
// bc_type := b_barracks ; 30 :
19156: LD_ADDR_OWVAR 42
19160: PUSH
19161: LD_INT 5
19163: ST_TO_ADDR
19164: GO 19262
19166: LD_INT 30
19168: DOUBLE
19169: EQUAL
19170: IFTRUE 19174
19172: GO 19185
19174: POP
// bc_type := b_solar_power ; 31 :
19175: LD_ADDR_OWVAR 42
19179: PUSH
19180: LD_INT 27
19182: ST_TO_ADDR
19183: GO 19262
19185: LD_INT 31
19187: DOUBLE
19188: EQUAL
19189: IFTRUE 19193
19191: GO 19204
19193: POP
// bc_type := b_oil_power ; 32 :
19194: LD_ADDR_OWVAR 42
19198: PUSH
19199: LD_INT 26
19201: ST_TO_ADDR
19202: GO 19262
19204: LD_INT 32
19206: DOUBLE
19207: EQUAL
19208: IFTRUE 19212
19210: GO 19223
19212: POP
// bc_type := b_siberite_power ; 33 :
19213: LD_ADDR_OWVAR 42
19217: PUSH
19218: LD_INT 28
19220: ST_TO_ADDR
19221: GO 19262
19223: LD_INT 33
19225: DOUBLE
19226: EQUAL
19227: IFTRUE 19231
19229: GO 19242
19231: POP
// bc_type := b_oil_mine ; 34 :
19232: LD_ADDR_OWVAR 42
19236: PUSH
19237: LD_INT 29
19239: ST_TO_ADDR
19240: GO 19262
19242: LD_INT 34
19244: DOUBLE
19245: EQUAL
19246: IFTRUE 19250
19248: GO 19261
19250: POP
// bc_type := b_siberite_mine ; end ;
19251: LD_ADDR_OWVAR 42
19255: PUSH
19256: LD_INT 30
19258: ST_TO_ADDR
19259: GO 19262
19261: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
19262: LD_ADDR_VAR 0 8
19266: PUSH
19267: LD_VAR 0 5
19271: PPUSH
19272: LD_VAR 0 6
19276: PPUSH
19277: LD_VAR 0 3
19281: PPUSH
19282: CALL_OW 47
19286: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
19287: LD_OWVAR 42
19291: PUSH
19292: LD_INT 32
19294: PUSH
19295: LD_INT 33
19297: PUSH
19298: EMPTY
19299: LIST
19300: LIST
19301: IN
19302: IFFALSE 19318
// PlaceWeaponTurret ( b , weapon ) ;
19304: LD_VAR 0 8
19308: PPUSH
19309: LD_VAR 0 4
19313: PPUSH
19314: CALL_OW 431
// end ;
19318: LD_VAR 0 7
19322: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
19323: LD_INT 0
19325: PPUSH
19326: PPUSH
19327: PPUSH
19328: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19329: LD_ADDR_VAR 0 4
19333: PUSH
19334: LD_INT 22
19336: PUSH
19337: LD_OWVAR 2
19341: PUSH
19342: EMPTY
19343: LIST
19344: LIST
19345: PUSH
19346: LD_INT 2
19348: PUSH
19349: LD_INT 30
19351: PUSH
19352: LD_INT 0
19354: PUSH
19355: EMPTY
19356: LIST
19357: LIST
19358: PUSH
19359: LD_INT 30
19361: PUSH
19362: LD_INT 1
19364: PUSH
19365: EMPTY
19366: LIST
19367: LIST
19368: PUSH
19369: EMPTY
19370: LIST
19371: LIST
19372: LIST
19373: PUSH
19374: EMPTY
19375: LIST
19376: LIST
19377: PPUSH
19378: CALL_OW 69
19382: ST_TO_ADDR
// if not tmp then
19383: LD_VAR 0 4
19387: NOT
19388: IFFALSE 19392
// exit ;
19390: GO 19451
// for i in tmp do
19392: LD_ADDR_VAR 0 2
19396: PUSH
19397: LD_VAR 0 4
19401: PUSH
19402: FOR_IN
19403: IFFALSE 19449
// for j = 1 to 3 do
19405: LD_ADDR_VAR 0 3
19409: PUSH
19410: DOUBLE
19411: LD_INT 1
19413: DEC
19414: ST_TO_ADDR
19415: LD_INT 3
19417: PUSH
19418: FOR_TO
19419: IFFALSE 19445
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
19421: LD_VAR 0 2
19425: PPUSH
19426: CALL_OW 274
19430: PPUSH
19431: LD_VAR 0 3
19435: PPUSH
19436: LD_INT 99999
19438: PPUSH
19439: CALL_OW 277
19443: GO 19418
19445: POP
19446: POP
19447: GO 19402
19449: POP
19450: POP
// end ;
19451: LD_VAR 0 1
19455: RET
// export function hHackSetLevel10 ; var i , j ; begin
19456: LD_INT 0
19458: PPUSH
19459: PPUSH
19460: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19461: LD_ADDR_VAR 0 2
19465: PUSH
19466: LD_INT 21
19468: PUSH
19469: LD_INT 1
19471: PUSH
19472: EMPTY
19473: LIST
19474: LIST
19475: PPUSH
19476: CALL_OW 69
19480: PUSH
19481: FOR_IN
19482: IFFALSE 19534
// if IsSelected ( i ) then
19484: LD_VAR 0 2
19488: PPUSH
19489: CALL_OW 306
19493: IFFALSE 19532
// begin for j := 1 to 4 do
19495: LD_ADDR_VAR 0 3
19499: PUSH
19500: DOUBLE
19501: LD_INT 1
19503: DEC
19504: ST_TO_ADDR
19505: LD_INT 4
19507: PUSH
19508: FOR_TO
19509: IFFALSE 19530
// SetSkill ( i , j , 10 ) ;
19511: LD_VAR 0 2
19515: PPUSH
19516: LD_VAR 0 3
19520: PPUSH
19521: LD_INT 10
19523: PPUSH
19524: CALL_OW 237
19528: GO 19508
19530: POP
19531: POP
// end ;
19532: GO 19481
19534: POP
19535: POP
// end ;
19536: LD_VAR 0 1
19540: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
19541: LD_INT 0
19543: PPUSH
19544: PPUSH
19545: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
19546: LD_ADDR_VAR 0 2
19550: PUSH
19551: LD_INT 22
19553: PUSH
19554: LD_OWVAR 2
19558: PUSH
19559: EMPTY
19560: LIST
19561: LIST
19562: PUSH
19563: LD_INT 21
19565: PUSH
19566: LD_INT 1
19568: PUSH
19569: EMPTY
19570: LIST
19571: LIST
19572: PUSH
19573: EMPTY
19574: LIST
19575: LIST
19576: PPUSH
19577: CALL_OW 69
19581: PUSH
19582: FOR_IN
19583: IFFALSE 19624
// begin for j := 1 to 4 do
19585: LD_ADDR_VAR 0 3
19589: PUSH
19590: DOUBLE
19591: LD_INT 1
19593: DEC
19594: ST_TO_ADDR
19595: LD_INT 4
19597: PUSH
19598: FOR_TO
19599: IFFALSE 19620
// SetSkill ( i , j , 10 ) ;
19601: LD_VAR 0 2
19605: PPUSH
19606: LD_VAR 0 3
19610: PPUSH
19611: LD_INT 10
19613: PPUSH
19614: CALL_OW 237
19618: GO 19598
19620: POP
19621: POP
// end ;
19622: GO 19582
19624: POP
19625: POP
// end ;
19626: LD_VAR 0 1
19630: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
19631: LD_INT 0
19633: PPUSH
// uc_side := your_side ;
19634: LD_ADDR_OWVAR 20
19638: PUSH
19639: LD_OWVAR 2
19643: ST_TO_ADDR
// uc_nation := nation ;
19644: LD_ADDR_OWVAR 21
19648: PUSH
19649: LD_VAR 0 1
19653: ST_TO_ADDR
// InitHc ;
19654: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
19658: LD_INT 0
19660: PPUSH
19661: LD_VAR 0 2
19665: PPUSH
19666: LD_VAR 0 3
19670: PPUSH
19671: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
19675: LD_VAR 0 4
19679: PPUSH
19680: LD_VAR 0 5
19684: PPUSH
19685: CALL_OW 428
19689: PUSH
19690: LD_INT 0
19692: EQUAL
19693: IFFALSE 19717
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
19695: CALL_OW 44
19699: PPUSH
19700: LD_VAR 0 4
19704: PPUSH
19705: LD_VAR 0 5
19709: PPUSH
19710: LD_INT 1
19712: PPUSH
19713: CALL_OW 48
// end ;
19717: LD_VAR 0 6
19721: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
19722: LD_INT 0
19724: PPUSH
19725: PPUSH
// uc_side := your_side ;
19726: LD_ADDR_OWVAR 20
19730: PUSH
19731: LD_OWVAR 2
19735: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
19736: LD_VAR 0 1
19740: PUSH
19741: LD_INT 1
19743: PUSH
19744: LD_INT 2
19746: PUSH
19747: LD_INT 3
19749: PUSH
19750: LD_INT 4
19752: PUSH
19753: LD_INT 5
19755: PUSH
19756: EMPTY
19757: LIST
19758: LIST
19759: LIST
19760: LIST
19761: LIST
19762: IN
19763: IFFALSE 19775
// uc_nation := nation_american else
19765: LD_ADDR_OWVAR 21
19769: PUSH
19770: LD_INT 1
19772: ST_TO_ADDR
19773: GO 19818
// if chassis in [ 11 , 12 , 13 , 14 ] then
19775: LD_VAR 0 1
19779: PUSH
19780: LD_INT 11
19782: PUSH
19783: LD_INT 12
19785: PUSH
19786: LD_INT 13
19788: PUSH
19789: LD_INT 14
19791: PUSH
19792: EMPTY
19793: LIST
19794: LIST
19795: LIST
19796: LIST
19797: IN
19798: IFFALSE 19810
// uc_nation := nation_arabian else
19800: LD_ADDR_OWVAR 21
19804: PUSH
19805: LD_INT 2
19807: ST_TO_ADDR
19808: GO 19818
// uc_nation := nation_russian ;
19810: LD_ADDR_OWVAR 21
19814: PUSH
19815: LD_INT 3
19817: ST_TO_ADDR
// vc_chassis := chassis ;
19818: LD_ADDR_OWVAR 37
19822: PUSH
19823: LD_VAR 0 1
19827: ST_TO_ADDR
// vc_engine := engine ;
19828: LD_ADDR_OWVAR 39
19832: PUSH
19833: LD_VAR 0 2
19837: ST_TO_ADDR
// vc_control := control ;
19838: LD_ADDR_OWVAR 38
19842: PUSH
19843: LD_VAR 0 3
19847: ST_TO_ADDR
// vc_weapon := weapon ;
19848: LD_ADDR_OWVAR 40
19852: PUSH
19853: LD_VAR 0 4
19857: ST_TO_ADDR
// un := CreateVehicle ;
19858: LD_ADDR_VAR 0 8
19862: PUSH
19863: CALL_OW 45
19867: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
19868: LD_VAR 0 8
19872: PPUSH
19873: LD_INT 0
19875: PPUSH
19876: LD_INT 5
19878: PPUSH
19879: CALL_OW 12
19883: PPUSH
19884: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
19888: LD_VAR 0 8
19892: PPUSH
19893: LD_VAR 0 5
19897: PPUSH
19898: LD_VAR 0 6
19902: PPUSH
19903: LD_INT 1
19905: PPUSH
19906: CALL_OW 48
// end ;
19910: LD_VAR 0 7
19914: RET
// export hInvincible ; every 1 do
19915: GO 19917
19917: DISABLE
// hInvincible := [ ] ;
19918: LD_ADDR_EXP 83
19922: PUSH
19923: EMPTY
19924: ST_TO_ADDR
19925: END
// every 10 do var i ;
19926: GO 19928
19928: DISABLE
19929: LD_INT 0
19931: PPUSH
// begin enable ;
19932: ENABLE
// if not hInvincible then
19933: LD_EXP 83
19937: NOT
19938: IFFALSE 19942
// exit ;
19940: GO 19986
// for i in hInvincible do
19942: LD_ADDR_VAR 0 1
19946: PUSH
19947: LD_EXP 83
19951: PUSH
19952: FOR_IN
19953: IFFALSE 19984
// if GetLives ( i ) < 1000 then
19955: LD_VAR 0 1
19959: PPUSH
19960: CALL_OW 256
19964: PUSH
19965: LD_INT 1000
19967: LESS
19968: IFFALSE 19982
// SetLives ( i , 1000 ) ;
19970: LD_VAR 0 1
19974: PPUSH
19975: LD_INT 1000
19977: PPUSH
19978: CALL_OW 234
19982: GO 19952
19984: POP
19985: POP
// end ;
19986: PPOPN 1
19988: END
// export function hHackInvincible ; var i ; begin
19989: LD_INT 0
19991: PPUSH
19992: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
19993: LD_ADDR_VAR 0 2
19997: PUSH
19998: LD_INT 2
20000: PUSH
20001: LD_INT 21
20003: PUSH
20004: LD_INT 1
20006: PUSH
20007: EMPTY
20008: LIST
20009: LIST
20010: PUSH
20011: LD_INT 21
20013: PUSH
20014: LD_INT 2
20016: PUSH
20017: EMPTY
20018: LIST
20019: LIST
20020: PUSH
20021: EMPTY
20022: LIST
20023: LIST
20024: LIST
20025: PPUSH
20026: CALL_OW 69
20030: PUSH
20031: FOR_IN
20032: IFFALSE 20093
// if IsSelected ( i ) then
20034: LD_VAR 0 2
20038: PPUSH
20039: CALL_OW 306
20043: IFFALSE 20091
// begin if i in hInvincible then
20045: LD_VAR 0 2
20049: PUSH
20050: LD_EXP 83
20054: IN
20055: IFFALSE 20075
// hInvincible := hInvincible diff i else
20057: LD_ADDR_EXP 83
20061: PUSH
20062: LD_EXP 83
20066: PUSH
20067: LD_VAR 0 2
20071: DIFF
20072: ST_TO_ADDR
20073: GO 20091
// hInvincible := hInvincible union i ;
20075: LD_ADDR_EXP 83
20079: PUSH
20080: LD_EXP 83
20084: PUSH
20085: LD_VAR 0 2
20089: UNION
20090: ST_TO_ADDR
// end ;
20091: GO 20031
20093: POP
20094: POP
// end ;
20095: LD_VAR 0 1
20099: RET
// export function hHackInvisible ; var i , j ; begin
20100: LD_INT 0
20102: PPUSH
20103: PPUSH
20104: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20105: LD_ADDR_VAR 0 2
20109: PUSH
20110: LD_INT 21
20112: PUSH
20113: LD_INT 1
20115: PUSH
20116: EMPTY
20117: LIST
20118: LIST
20119: PPUSH
20120: CALL_OW 69
20124: PUSH
20125: FOR_IN
20126: IFFALSE 20150
// if IsSelected ( i ) then
20128: LD_VAR 0 2
20132: PPUSH
20133: CALL_OW 306
20137: IFFALSE 20148
// ComForceInvisible ( i ) ;
20139: LD_VAR 0 2
20143: PPUSH
20144: CALL_OW 496
20148: GO 20125
20150: POP
20151: POP
// end ;
20152: LD_VAR 0 1
20156: RET
// export function hHackChangeYourSide ; begin
20157: LD_INT 0
20159: PPUSH
// if your_side = 8 then
20160: LD_OWVAR 2
20164: PUSH
20165: LD_INT 8
20167: EQUAL
20168: IFFALSE 20180
// your_side := 0 else
20170: LD_ADDR_OWVAR 2
20174: PUSH
20175: LD_INT 0
20177: ST_TO_ADDR
20178: GO 20194
// your_side := your_side + 1 ;
20180: LD_ADDR_OWVAR 2
20184: PUSH
20185: LD_OWVAR 2
20189: PUSH
20190: LD_INT 1
20192: PLUS
20193: ST_TO_ADDR
// end ;
20194: LD_VAR 0 1
20198: RET
// export function hHackChangeUnitSide ; var i , j ; begin
20199: LD_INT 0
20201: PPUSH
20202: PPUSH
20203: PPUSH
// for i in all_units do
20204: LD_ADDR_VAR 0 2
20208: PUSH
20209: LD_OWVAR 3
20213: PUSH
20214: FOR_IN
20215: IFFALSE 20293
// if IsSelected ( i ) then
20217: LD_VAR 0 2
20221: PPUSH
20222: CALL_OW 306
20226: IFFALSE 20291
// begin j := GetSide ( i ) ;
20228: LD_ADDR_VAR 0 3
20232: PUSH
20233: LD_VAR 0 2
20237: PPUSH
20238: CALL_OW 255
20242: ST_TO_ADDR
// if j = 8 then
20243: LD_VAR 0 3
20247: PUSH
20248: LD_INT 8
20250: EQUAL
20251: IFFALSE 20263
// j := 0 else
20253: LD_ADDR_VAR 0 3
20257: PUSH
20258: LD_INT 0
20260: ST_TO_ADDR
20261: GO 20277
// j := j + 1 ;
20263: LD_ADDR_VAR 0 3
20267: PUSH
20268: LD_VAR 0 3
20272: PUSH
20273: LD_INT 1
20275: PLUS
20276: ST_TO_ADDR
// SetSide ( i , j ) ;
20277: LD_VAR 0 2
20281: PPUSH
20282: LD_VAR 0 3
20286: PPUSH
20287: CALL_OW 235
// end ;
20291: GO 20214
20293: POP
20294: POP
// end ;
20295: LD_VAR 0 1
20299: RET
// export function hHackFog ; begin
20300: LD_INT 0
20302: PPUSH
// FogOff ( true ) ;
20303: LD_INT 1
20305: PPUSH
20306: CALL_OW 344
// end ;
20310: LD_VAR 0 1
20314: RET
// export function hHackTeleport ( unit , x , y ) ; begin
20315: LD_INT 0
20317: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
20318: LD_VAR 0 1
20322: PPUSH
20323: LD_VAR 0 2
20327: PPUSH
20328: LD_VAR 0 3
20332: PPUSH
20333: LD_INT 1
20335: PPUSH
20336: LD_INT 1
20338: PPUSH
20339: CALL_OW 483
// CenterOnXY ( x , y ) ;
20343: LD_VAR 0 2
20347: PPUSH
20348: LD_VAR 0 3
20352: PPUSH
20353: CALL_OW 84
// end ;
20357: LD_VAR 0 4
20361: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
20362: LD_INT 0
20364: PPUSH
20365: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
20366: LD_VAR 0 1
20370: NOT
20371: PUSH
20372: LD_VAR 0 2
20376: PPUSH
20377: LD_VAR 0 3
20381: PPUSH
20382: CALL_OW 488
20386: NOT
20387: OR
20388: PUSH
20389: LD_VAR 0 1
20393: PPUSH
20394: CALL_OW 266
20398: PUSH
20399: LD_INT 3
20401: NONEQUAL
20402: PUSH
20403: LD_VAR 0 1
20407: PPUSH
20408: CALL_OW 247
20412: PUSH
20413: LD_INT 1
20415: EQUAL
20416: NOT
20417: AND
20418: OR
20419: IFFALSE 20423
// exit ;
20421: GO 20572
// if GetType ( factory ) = unit_human then
20423: LD_VAR 0 1
20427: PPUSH
20428: CALL_OW 247
20432: PUSH
20433: LD_INT 1
20435: EQUAL
20436: IFFALSE 20453
// factory := IsInUnit ( factory ) ;
20438: LD_ADDR_VAR 0 1
20442: PUSH
20443: LD_VAR 0 1
20447: PPUSH
20448: CALL_OW 310
20452: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
20453: LD_VAR 0 1
20457: PPUSH
20458: CALL_OW 266
20462: PUSH
20463: LD_INT 3
20465: NONEQUAL
20466: IFFALSE 20470
// exit ;
20468: GO 20572
// if HexInfo ( x , y ) = factory then
20470: LD_VAR 0 2
20474: PPUSH
20475: LD_VAR 0 3
20479: PPUSH
20480: CALL_OW 428
20484: PUSH
20485: LD_VAR 0 1
20489: EQUAL
20490: IFFALSE 20517
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
20492: LD_ADDR_EXP 84
20496: PUSH
20497: LD_EXP 84
20501: PPUSH
20502: LD_VAR 0 1
20506: PPUSH
20507: LD_INT 0
20509: PPUSH
20510: CALL_OW 1
20514: ST_TO_ADDR
20515: GO 20568
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
20517: LD_ADDR_EXP 84
20521: PUSH
20522: LD_EXP 84
20526: PPUSH
20527: LD_VAR 0 1
20531: PPUSH
20532: LD_VAR 0 1
20536: PPUSH
20537: CALL_OW 255
20541: PUSH
20542: LD_VAR 0 1
20546: PUSH
20547: LD_VAR 0 2
20551: PUSH
20552: LD_VAR 0 3
20556: PUSH
20557: EMPTY
20558: LIST
20559: LIST
20560: LIST
20561: LIST
20562: PPUSH
20563: CALL_OW 1
20567: ST_TO_ADDR
// UpdateFactoryWaypoints ;
20568: CALL 20577 0 0
// end ;
20572: LD_VAR 0 4
20576: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
20577: LD_INT 0
20579: PPUSH
20580: PPUSH
20581: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
20582: LD_STRING resetFactoryWaypoint();
20584: PPUSH
20585: CALL_OW 559
// if factoryWaypoints then
20589: LD_EXP 84
20593: IFFALSE 20719
// begin list := PrepareArray ( factoryWaypoints ) ;
20595: LD_ADDR_VAR 0 3
20599: PUSH
20600: LD_EXP 84
20604: PPUSH
20605: CALL 67861 0 1
20609: ST_TO_ADDR
// for i := 1 to list do
20610: LD_ADDR_VAR 0 2
20614: PUSH
20615: DOUBLE
20616: LD_INT 1
20618: DEC
20619: ST_TO_ADDR
20620: LD_VAR 0 3
20624: PUSH
20625: FOR_TO
20626: IFFALSE 20717
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
20628: LD_STRING setFactoryWaypointXY(
20630: PUSH
20631: LD_VAR 0 3
20635: PUSH
20636: LD_VAR 0 2
20640: ARRAY
20641: PUSH
20642: LD_INT 1
20644: ARRAY
20645: STR
20646: PUSH
20647: LD_STRING ,
20649: STR
20650: PUSH
20651: LD_VAR 0 3
20655: PUSH
20656: LD_VAR 0 2
20660: ARRAY
20661: PUSH
20662: LD_INT 2
20664: ARRAY
20665: STR
20666: PUSH
20667: LD_STRING ,
20669: STR
20670: PUSH
20671: LD_VAR 0 3
20675: PUSH
20676: LD_VAR 0 2
20680: ARRAY
20681: PUSH
20682: LD_INT 3
20684: ARRAY
20685: STR
20686: PUSH
20687: LD_STRING ,
20689: STR
20690: PUSH
20691: LD_VAR 0 3
20695: PUSH
20696: LD_VAR 0 2
20700: ARRAY
20701: PUSH
20702: LD_INT 4
20704: ARRAY
20705: STR
20706: PUSH
20707: LD_STRING )
20709: STR
20710: PPUSH
20711: CALL_OW 559
20715: GO 20625
20717: POP
20718: POP
// end ; end ;
20719: LD_VAR 0 1
20723: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
20724: LD_INT 0
20726: PPUSH
// if HexInfo ( x , y ) = warehouse then
20727: LD_VAR 0 2
20731: PPUSH
20732: LD_VAR 0 3
20736: PPUSH
20737: CALL_OW 428
20741: PUSH
20742: LD_VAR 0 1
20746: EQUAL
20747: IFFALSE 20774
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
20749: LD_ADDR_EXP 85
20753: PUSH
20754: LD_EXP 85
20758: PPUSH
20759: LD_VAR 0 1
20763: PPUSH
20764: LD_INT 0
20766: PPUSH
20767: CALL_OW 1
20771: ST_TO_ADDR
20772: GO 20825
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
20774: LD_ADDR_EXP 85
20778: PUSH
20779: LD_EXP 85
20783: PPUSH
20784: LD_VAR 0 1
20788: PPUSH
20789: LD_VAR 0 1
20793: PPUSH
20794: CALL_OW 255
20798: PUSH
20799: LD_VAR 0 1
20803: PUSH
20804: LD_VAR 0 2
20808: PUSH
20809: LD_VAR 0 3
20813: PUSH
20814: EMPTY
20815: LIST
20816: LIST
20817: LIST
20818: LIST
20819: PPUSH
20820: CALL_OW 1
20824: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
20825: CALL 20834 0 0
// end ;
20829: LD_VAR 0 4
20833: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
20834: LD_INT 0
20836: PPUSH
20837: PPUSH
20838: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
20839: LD_STRING resetWarehouseGatheringPoints();
20841: PPUSH
20842: CALL_OW 559
// if warehouseGatheringPoints then
20846: LD_EXP 85
20850: IFFALSE 20976
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
20852: LD_ADDR_VAR 0 3
20856: PUSH
20857: LD_EXP 85
20861: PPUSH
20862: CALL 67861 0 1
20866: ST_TO_ADDR
// for i := 1 to list do
20867: LD_ADDR_VAR 0 2
20871: PUSH
20872: DOUBLE
20873: LD_INT 1
20875: DEC
20876: ST_TO_ADDR
20877: LD_VAR 0 3
20881: PUSH
20882: FOR_TO
20883: IFFALSE 20974
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
20885: LD_STRING setWarehouseGatheringPointXY(
20887: PUSH
20888: LD_VAR 0 3
20892: PUSH
20893: LD_VAR 0 2
20897: ARRAY
20898: PUSH
20899: LD_INT 1
20901: ARRAY
20902: STR
20903: PUSH
20904: LD_STRING ,
20906: STR
20907: PUSH
20908: LD_VAR 0 3
20912: PUSH
20913: LD_VAR 0 2
20917: ARRAY
20918: PUSH
20919: LD_INT 2
20921: ARRAY
20922: STR
20923: PUSH
20924: LD_STRING ,
20926: STR
20927: PUSH
20928: LD_VAR 0 3
20932: PUSH
20933: LD_VAR 0 2
20937: ARRAY
20938: PUSH
20939: LD_INT 3
20941: ARRAY
20942: STR
20943: PUSH
20944: LD_STRING ,
20946: STR
20947: PUSH
20948: LD_VAR 0 3
20952: PUSH
20953: LD_VAR 0 2
20957: ARRAY
20958: PUSH
20959: LD_INT 4
20961: ARRAY
20962: STR
20963: PUSH
20964: LD_STRING )
20966: STR
20967: PPUSH
20968: CALL_OW 559
20972: GO 20882
20974: POP
20975: POP
// end ; end ;
20976: LD_VAR 0 1
20980: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
20981: LD_EXP 85
20985: IFFALSE 21670
20987: GO 20989
20989: DISABLE
20990: LD_INT 0
20992: PPUSH
20993: PPUSH
20994: PPUSH
20995: PPUSH
20996: PPUSH
20997: PPUSH
20998: PPUSH
20999: PPUSH
21000: PPUSH
// begin enable ;
21001: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
21002: LD_ADDR_VAR 0 3
21006: PUSH
21007: LD_EXP 85
21011: PPUSH
21012: CALL 67861 0 1
21016: ST_TO_ADDR
// if not list then
21017: LD_VAR 0 3
21021: NOT
21022: IFFALSE 21026
// exit ;
21024: GO 21670
// for i := 1 to list do
21026: LD_ADDR_VAR 0 1
21030: PUSH
21031: DOUBLE
21032: LD_INT 1
21034: DEC
21035: ST_TO_ADDR
21036: LD_VAR 0 3
21040: PUSH
21041: FOR_TO
21042: IFFALSE 21668
// begin depot := list [ i ] [ 2 ] ;
21044: LD_ADDR_VAR 0 8
21048: PUSH
21049: LD_VAR 0 3
21053: PUSH
21054: LD_VAR 0 1
21058: ARRAY
21059: PUSH
21060: LD_INT 2
21062: ARRAY
21063: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
21064: LD_ADDR_VAR 0 5
21068: PUSH
21069: LD_VAR 0 3
21073: PUSH
21074: LD_VAR 0 1
21078: ARRAY
21079: PUSH
21080: LD_INT 1
21082: ARRAY
21083: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
21084: LD_VAR 0 8
21088: PPUSH
21089: CALL_OW 301
21093: PUSH
21094: LD_VAR 0 5
21098: PUSH
21099: LD_VAR 0 8
21103: PPUSH
21104: CALL_OW 255
21108: NONEQUAL
21109: OR
21110: IFFALSE 21139
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
21112: LD_ADDR_EXP 85
21116: PUSH
21117: LD_EXP 85
21121: PPUSH
21122: LD_VAR 0 8
21126: PPUSH
21127: LD_INT 0
21129: PPUSH
21130: CALL_OW 1
21134: ST_TO_ADDR
// exit ;
21135: POP
21136: POP
21137: GO 21670
// end ; x := list [ i ] [ 3 ] ;
21139: LD_ADDR_VAR 0 6
21143: PUSH
21144: LD_VAR 0 3
21148: PUSH
21149: LD_VAR 0 1
21153: ARRAY
21154: PUSH
21155: LD_INT 3
21157: ARRAY
21158: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
21159: LD_ADDR_VAR 0 7
21163: PUSH
21164: LD_VAR 0 3
21168: PUSH
21169: LD_VAR 0 1
21173: ARRAY
21174: PUSH
21175: LD_INT 4
21177: ARRAY
21178: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
21179: LD_ADDR_VAR 0 9
21183: PUSH
21184: LD_VAR 0 6
21188: PPUSH
21189: LD_VAR 0 7
21193: PPUSH
21194: LD_INT 16
21196: PPUSH
21197: CALL 66449 0 3
21201: ST_TO_ADDR
// if not cratesNearbyPoint then
21202: LD_VAR 0 9
21206: NOT
21207: IFFALSE 21213
// exit ;
21209: POP
21210: POP
21211: GO 21670
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
21213: LD_ADDR_VAR 0 4
21217: PUSH
21218: LD_INT 22
21220: PUSH
21221: LD_VAR 0 5
21225: PUSH
21226: EMPTY
21227: LIST
21228: LIST
21229: PUSH
21230: LD_INT 3
21232: PUSH
21233: LD_INT 60
21235: PUSH
21236: EMPTY
21237: LIST
21238: PUSH
21239: EMPTY
21240: LIST
21241: LIST
21242: PUSH
21243: LD_INT 91
21245: PUSH
21246: LD_VAR 0 8
21250: PUSH
21251: LD_INT 6
21253: PUSH
21254: EMPTY
21255: LIST
21256: LIST
21257: LIST
21258: PUSH
21259: LD_INT 2
21261: PUSH
21262: LD_INT 25
21264: PUSH
21265: LD_INT 2
21267: PUSH
21268: EMPTY
21269: LIST
21270: LIST
21271: PUSH
21272: LD_INT 25
21274: PUSH
21275: LD_INT 16
21277: PUSH
21278: EMPTY
21279: LIST
21280: LIST
21281: PUSH
21282: EMPTY
21283: LIST
21284: LIST
21285: LIST
21286: PUSH
21287: EMPTY
21288: LIST
21289: LIST
21290: LIST
21291: LIST
21292: PPUSH
21293: CALL_OW 69
21297: PUSH
21298: LD_VAR 0 8
21302: PPUSH
21303: CALL_OW 313
21307: PPUSH
21308: LD_INT 3
21310: PUSH
21311: LD_INT 60
21313: PUSH
21314: EMPTY
21315: LIST
21316: PUSH
21317: EMPTY
21318: LIST
21319: LIST
21320: PUSH
21321: LD_INT 2
21323: PUSH
21324: LD_INT 25
21326: PUSH
21327: LD_INT 2
21329: PUSH
21330: EMPTY
21331: LIST
21332: LIST
21333: PUSH
21334: LD_INT 25
21336: PUSH
21337: LD_INT 16
21339: PUSH
21340: EMPTY
21341: LIST
21342: LIST
21343: PUSH
21344: EMPTY
21345: LIST
21346: LIST
21347: LIST
21348: PUSH
21349: EMPTY
21350: LIST
21351: LIST
21352: PPUSH
21353: CALL_OW 72
21357: UNION
21358: ST_TO_ADDR
// if tmp then
21359: LD_VAR 0 4
21363: IFFALSE 21443
// begin tmp := ShrinkArray ( tmp , 3 ) ;
21365: LD_ADDR_VAR 0 4
21369: PUSH
21370: LD_VAR 0 4
21374: PPUSH
21375: LD_INT 3
21377: PPUSH
21378: CALL 64418 0 2
21382: ST_TO_ADDR
// for j in tmp do
21383: LD_ADDR_VAR 0 2
21387: PUSH
21388: LD_VAR 0 4
21392: PUSH
21393: FOR_IN
21394: IFFALSE 21437
// begin if IsInUnit ( j ) then
21396: LD_VAR 0 2
21400: PPUSH
21401: CALL_OW 310
21405: IFFALSE 21416
// ComExit ( j ) ;
21407: LD_VAR 0 2
21411: PPUSH
21412: CALL 64501 0 1
// AddComCollect ( j , x , y ) ;
21416: LD_VAR 0 2
21420: PPUSH
21421: LD_VAR 0 6
21425: PPUSH
21426: LD_VAR 0 7
21430: PPUSH
21431: CALL_OW 177
// end ;
21435: GO 21393
21437: POP
21438: POP
// exit ;
21439: POP
21440: POP
21441: GO 21670
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
21443: LD_ADDR_VAR 0 4
21447: PUSH
21448: LD_INT 22
21450: PUSH
21451: LD_VAR 0 5
21455: PUSH
21456: EMPTY
21457: LIST
21458: LIST
21459: PUSH
21460: LD_INT 91
21462: PUSH
21463: LD_VAR 0 8
21467: PUSH
21468: LD_INT 8
21470: PUSH
21471: EMPTY
21472: LIST
21473: LIST
21474: LIST
21475: PUSH
21476: LD_INT 2
21478: PUSH
21479: LD_INT 34
21481: PUSH
21482: LD_INT 12
21484: PUSH
21485: EMPTY
21486: LIST
21487: LIST
21488: PUSH
21489: LD_INT 34
21491: PUSH
21492: LD_INT 51
21494: PUSH
21495: EMPTY
21496: LIST
21497: LIST
21498: PUSH
21499: LD_INT 34
21501: PUSH
21502: LD_INT 32
21504: PUSH
21505: EMPTY
21506: LIST
21507: LIST
21508: PUSH
21509: LD_INT 34
21511: PUSH
21512: LD_INT 89
21514: PUSH
21515: EMPTY
21516: LIST
21517: LIST
21518: PUSH
21519: EMPTY
21520: LIST
21521: LIST
21522: LIST
21523: LIST
21524: LIST
21525: PUSH
21526: EMPTY
21527: LIST
21528: LIST
21529: LIST
21530: PPUSH
21531: CALL_OW 69
21535: ST_TO_ADDR
// if tmp then
21536: LD_VAR 0 4
21540: IFFALSE 21666
// begin for j in tmp do
21542: LD_ADDR_VAR 0 2
21546: PUSH
21547: LD_VAR 0 4
21551: PUSH
21552: FOR_IN
21553: IFFALSE 21664
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
21555: LD_VAR 0 2
21559: PPUSH
21560: CALL_OW 262
21564: PUSH
21565: LD_INT 3
21567: EQUAL
21568: PUSH
21569: LD_VAR 0 2
21573: PPUSH
21574: CALL_OW 261
21578: PUSH
21579: LD_INT 20
21581: GREATER
21582: OR
21583: PUSH
21584: LD_VAR 0 2
21588: PPUSH
21589: CALL_OW 314
21593: NOT
21594: AND
21595: PUSH
21596: LD_VAR 0 2
21600: PPUSH
21601: CALL_OW 263
21605: PUSH
21606: LD_INT 1
21608: NONEQUAL
21609: PUSH
21610: LD_VAR 0 2
21614: PPUSH
21615: CALL_OW 311
21619: OR
21620: AND
21621: IFFALSE 21662
// begin ComCollect ( j , x , y ) ;
21623: LD_VAR 0 2
21627: PPUSH
21628: LD_VAR 0 6
21632: PPUSH
21633: LD_VAR 0 7
21637: PPUSH
21638: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
21642: LD_VAR 0 2
21646: PPUSH
21647: LD_VAR 0 8
21651: PPUSH
21652: CALL_OW 172
// exit ;
21656: POP
21657: POP
21658: POP
21659: POP
21660: GO 21670
// end ;
21662: GO 21552
21664: POP
21665: POP
// end ; end ;
21666: GO 21041
21668: POP
21669: POP
// end ; end_of_file
21670: PPOPN 9
21672: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
21673: LD_INT 0
21675: PPUSH
21676: PPUSH
21677: PPUSH
21678: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
21679: LD_VAR 0 1
21683: PPUSH
21684: CALL_OW 264
21688: PUSH
21689: LD_INT 91
21691: EQUAL
21692: IFFALSE 21764
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
21694: LD_INT 68
21696: PPUSH
21697: LD_VAR 0 1
21701: PPUSH
21702: CALL_OW 255
21706: PPUSH
21707: CALL_OW 321
21711: PUSH
21712: LD_INT 2
21714: EQUAL
21715: IFFALSE 21727
// eff := 70 else
21717: LD_ADDR_VAR 0 4
21721: PUSH
21722: LD_INT 70
21724: ST_TO_ADDR
21725: GO 21735
// eff := 30 ;
21727: LD_ADDR_VAR 0 4
21731: PUSH
21732: LD_INT 30
21734: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
21735: LD_VAR 0 1
21739: PPUSH
21740: CALL_OW 250
21744: PPUSH
21745: LD_VAR 0 1
21749: PPUSH
21750: CALL_OW 251
21754: PPUSH
21755: LD_VAR 0 4
21759: PPUSH
21760: CALL_OW 495
// end ; end ;
21764: LD_VAR 0 2
21768: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
21769: LD_INT 0
21771: PPUSH
// end ;
21772: LD_VAR 0 4
21776: RET
// export function SOS_Command ( cmd ) ; begin
21777: LD_INT 0
21779: PPUSH
// end ;
21780: LD_VAR 0 2
21784: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
21785: LD_INT 0
21787: PPUSH
// end ;
21788: LD_VAR 0 6
21792: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
21793: LD_INT 0
21795: PPUSH
21796: PPUSH
// if not vehicle or not factory then
21797: LD_VAR 0 1
21801: NOT
21802: PUSH
21803: LD_VAR 0 2
21807: NOT
21808: OR
21809: IFFALSE 21813
// exit ;
21811: GO 22044
// if factoryWaypoints >= factory then
21813: LD_EXP 84
21817: PUSH
21818: LD_VAR 0 2
21822: GREATEREQUAL
21823: IFFALSE 22044
// if factoryWaypoints [ factory ] then
21825: LD_EXP 84
21829: PUSH
21830: LD_VAR 0 2
21834: ARRAY
21835: IFFALSE 22044
// begin if GetControl ( vehicle ) = control_manual then
21837: LD_VAR 0 1
21841: PPUSH
21842: CALL_OW 263
21846: PUSH
21847: LD_INT 1
21849: EQUAL
21850: IFFALSE 21931
// begin driver := IsDrivenBy ( vehicle ) ;
21852: LD_ADDR_VAR 0 4
21856: PUSH
21857: LD_VAR 0 1
21861: PPUSH
21862: CALL_OW 311
21866: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21867: LD_VAR 0 4
21871: PPUSH
21872: LD_EXP 84
21876: PUSH
21877: LD_VAR 0 2
21881: ARRAY
21882: PUSH
21883: LD_INT 3
21885: ARRAY
21886: PPUSH
21887: LD_EXP 84
21891: PUSH
21892: LD_VAR 0 2
21896: ARRAY
21897: PUSH
21898: LD_INT 4
21900: ARRAY
21901: PPUSH
21902: CALL_OW 171
// AddComExitVehicle ( driver ) ;
21906: LD_VAR 0 4
21910: PPUSH
21911: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
21915: LD_VAR 0 4
21919: PPUSH
21920: LD_VAR 0 2
21924: PPUSH
21925: CALL_OW 180
// end else
21929: GO 22044
// if GetControl ( vehicle ) = control_remote then
21931: LD_VAR 0 1
21935: PPUSH
21936: CALL_OW 263
21940: PUSH
21941: LD_INT 2
21943: EQUAL
21944: IFFALSE 22005
// begin wait ( 0 0$2 ) ;
21946: LD_INT 70
21948: PPUSH
21949: CALL_OW 67
// if Connect ( vehicle ) then
21953: LD_VAR 0 1
21957: PPUSH
21958: CALL 34709 0 1
21962: IFFALSE 22003
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21964: LD_VAR 0 1
21968: PPUSH
21969: LD_EXP 84
21973: PUSH
21974: LD_VAR 0 2
21978: ARRAY
21979: PUSH
21980: LD_INT 3
21982: ARRAY
21983: PPUSH
21984: LD_EXP 84
21988: PUSH
21989: LD_VAR 0 2
21993: ARRAY
21994: PUSH
21995: LD_INT 4
21997: ARRAY
21998: PPUSH
21999: CALL_OW 171
// end else
22003: GO 22044
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
22005: LD_VAR 0 1
22009: PPUSH
22010: LD_EXP 84
22014: PUSH
22015: LD_VAR 0 2
22019: ARRAY
22020: PUSH
22021: LD_INT 3
22023: ARRAY
22024: PPUSH
22025: LD_EXP 84
22029: PUSH
22030: LD_VAR 0 2
22034: ARRAY
22035: PUSH
22036: LD_INT 4
22038: ARRAY
22039: PPUSH
22040: CALL_OW 171
// end ; end ;
22044: LD_VAR 0 3
22048: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
22049: LD_INT 0
22051: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
22052: LD_VAR 0 1
22056: PUSH
22057: LD_INT 250
22059: EQUAL
22060: PUSH
22061: LD_VAR 0 2
22065: PPUSH
22066: CALL_OW 264
22070: PUSH
22071: LD_INT 81
22073: EQUAL
22074: AND
22075: IFFALSE 22096
// MinerPlaceMine ( unit , x , y ) ;
22077: LD_VAR 0 2
22081: PPUSH
22082: LD_VAR 0 4
22086: PPUSH
22087: LD_VAR 0 5
22091: PPUSH
22092: CALL 24920 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
22096: LD_VAR 0 1
22100: PUSH
22101: LD_INT 251
22103: EQUAL
22104: PUSH
22105: LD_VAR 0 2
22109: PPUSH
22110: CALL_OW 264
22114: PUSH
22115: LD_INT 81
22117: EQUAL
22118: AND
22119: IFFALSE 22140
// MinerDetonateMine ( unit , x , y ) ;
22121: LD_VAR 0 2
22125: PPUSH
22126: LD_VAR 0 4
22130: PPUSH
22131: LD_VAR 0 5
22135: PPUSH
22136: CALL 25195 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
22140: LD_VAR 0 1
22144: PUSH
22145: LD_INT 252
22147: EQUAL
22148: PUSH
22149: LD_VAR 0 2
22153: PPUSH
22154: CALL_OW 264
22158: PUSH
22159: LD_INT 81
22161: EQUAL
22162: AND
22163: IFFALSE 22184
// MinerCreateMinefield ( unit , x , y ) ;
22165: LD_VAR 0 2
22169: PPUSH
22170: LD_VAR 0 4
22174: PPUSH
22175: LD_VAR 0 5
22179: PPUSH
22180: CALL 25612 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
22184: LD_VAR 0 1
22188: PUSH
22189: LD_INT 253
22191: EQUAL
22192: PUSH
22193: LD_VAR 0 2
22197: PPUSH
22198: CALL_OW 257
22202: PUSH
22203: LD_INT 5
22205: EQUAL
22206: AND
22207: IFFALSE 22228
// ComBinocular ( unit , x , y ) ;
22209: LD_VAR 0 2
22213: PPUSH
22214: LD_VAR 0 4
22218: PPUSH
22219: LD_VAR 0 5
22223: PPUSH
22224: CALL 25981 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
22228: LD_VAR 0 1
22232: PUSH
22233: LD_INT 254
22235: EQUAL
22236: PUSH
22237: LD_VAR 0 2
22241: PPUSH
22242: CALL_OW 264
22246: PUSH
22247: LD_INT 99
22249: EQUAL
22250: AND
22251: PUSH
22252: LD_VAR 0 3
22256: PPUSH
22257: CALL_OW 263
22261: PUSH
22262: LD_INT 3
22264: EQUAL
22265: AND
22266: IFFALSE 22282
// HackDestroyVehicle ( unit , selectedUnit ) ;
22268: LD_VAR 0 2
22272: PPUSH
22273: LD_VAR 0 3
22277: PPUSH
22278: CALL 24284 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
22282: LD_VAR 0 1
22286: PUSH
22287: LD_INT 255
22289: EQUAL
22290: PUSH
22291: LD_VAR 0 2
22295: PPUSH
22296: CALL_OW 264
22300: PUSH
22301: LD_INT 14
22303: PUSH
22304: LD_INT 53
22306: PUSH
22307: EMPTY
22308: LIST
22309: LIST
22310: IN
22311: AND
22312: PUSH
22313: LD_VAR 0 4
22317: PPUSH
22318: LD_VAR 0 5
22322: PPUSH
22323: CALL_OW 488
22327: AND
22328: IFFALSE 22352
// CutTreeXYR ( unit , x , y , 12 ) ;
22330: LD_VAR 0 2
22334: PPUSH
22335: LD_VAR 0 4
22339: PPUSH
22340: LD_VAR 0 5
22344: PPUSH
22345: LD_INT 12
22347: PPUSH
22348: CALL 22447 0 4
// if cmd = 256 then
22352: LD_VAR 0 1
22356: PUSH
22357: LD_INT 256
22359: EQUAL
22360: IFFALSE 22381
// SetFactoryWaypoint ( unit , x , y ) ;
22362: LD_VAR 0 2
22366: PPUSH
22367: LD_VAR 0 4
22371: PPUSH
22372: LD_VAR 0 5
22376: PPUSH
22377: CALL 20362 0 3
// if cmd = 257 then
22381: LD_VAR 0 1
22385: PUSH
22386: LD_INT 257
22388: EQUAL
22389: IFFALSE 22410
// SetWarehouseGatheringPoint ( unit , x , y ) ;
22391: LD_VAR 0 2
22395: PPUSH
22396: LD_VAR 0 4
22400: PPUSH
22401: LD_VAR 0 5
22405: PPUSH
22406: CALL 20724 0 3
// if cmd = 258 then
22410: LD_VAR 0 1
22414: PUSH
22415: LD_INT 258
22417: EQUAL
22418: IFFALSE 22442
// BurnTreeXYR ( unit , x , y , 8 ) ;
22420: LD_VAR 0 2
22424: PPUSH
22425: LD_VAR 0 4
22429: PPUSH
22430: LD_VAR 0 5
22434: PPUSH
22435: LD_INT 8
22437: PPUSH
22438: CALL 22841 0 4
// end ;
22442: LD_VAR 0 6
22446: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
22447: LD_INT 0
22449: PPUSH
22450: PPUSH
22451: PPUSH
22452: PPUSH
22453: PPUSH
22454: PPUSH
22455: PPUSH
22456: PPUSH
22457: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
22458: LD_VAR 0 1
22462: PPUSH
22463: CALL_OW 302
22467: NOT
22468: PUSH
22469: LD_VAR 0 2
22473: PPUSH
22474: LD_VAR 0 3
22478: PPUSH
22479: CALL_OW 488
22483: NOT
22484: OR
22485: PUSH
22486: LD_VAR 0 4
22490: NOT
22491: OR
22492: IFFALSE 22496
// exit ;
22494: GO 22836
// list := [ ] ;
22496: LD_ADDR_VAR 0 13
22500: PUSH
22501: EMPTY
22502: ST_TO_ADDR
// if x - r < 0 then
22503: LD_VAR 0 2
22507: PUSH
22508: LD_VAR 0 4
22512: MINUS
22513: PUSH
22514: LD_INT 0
22516: LESS
22517: IFFALSE 22529
// min_x := 0 else
22519: LD_ADDR_VAR 0 7
22523: PUSH
22524: LD_INT 0
22526: ST_TO_ADDR
22527: GO 22545
// min_x := x - r ;
22529: LD_ADDR_VAR 0 7
22533: PUSH
22534: LD_VAR 0 2
22538: PUSH
22539: LD_VAR 0 4
22543: MINUS
22544: ST_TO_ADDR
// if y - r < 0 then
22545: LD_VAR 0 3
22549: PUSH
22550: LD_VAR 0 4
22554: MINUS
22555: PUSH
22556: LD_INT 0
22558: LESS
22559: IFFALSE 22571
// min_y := 0 else
22561: LD_ADDR_VAR 0 8
22565: PUSH
22566: LD_INT 0
22568: ST_TO_ADDR
22569: GO 22587
// min_y := y - r ;
22571: LD_ADDR_VAR 0 8
22575: PUSH
22576: LD_VAR 0 3
22580: PUSH
22581: LD_VAR 0 4
22585: MINUS
22586: ST_TO_ADDR
// max_x := x + r ;
22587: LD_ADDR_VAR 0 9
22591: PUSH
22592: LD_VAR 0 2
22596: PUSH
22597: LD_VAR 0 4
22601: PLUS
22602: ST_TO_ADDR
// max_y := y + r ;
22603: LD_ADDR_VAR 0 10
22607: PUSH
22608: LD_VAR 0 3
22612: PUSH
22613: LD_VAR 0 4
22617: PLUS
22618: ST_TO_ADDR
// for _x = min_x to max_x do
22619: LD_ADDR_VAR 0 11
22623: PUSH
22624: DOUBLE
22625: LD_VAR 0 7
22629: DEC
22630: ST_TO_ADDR
22631: LD_VAR 0 9
22635: PUSH
22636: FOR_TO
22637: IFFALSE 22754
// for _y = min_y to max_y do
22639: LD_ADDR_VAR 0 12
22643: PUSH
22644: DOUBLE
22645: LD_VAR 0 8
22649: DEC
22650: ST_TO_ADDR
22651: LD_VAR 0 10
22655: PUSH
22656: FOR_TO
22657: IFFALSE 22750
// begin if not ValidHex ( _x , _y ) then
22659: LD_VAR 0 11
22663: PPUSH
22664: LD_VAR 0 12
22668: PPUSH
22669: CALL_OW 488
22673: NOT
22674: IFFALSE 22678
// continue ;
22676: GO 22656
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
22678: LD_VAR 0 11
22682: PPUSH
22683: LD_VAR 0 12
22687: PPUSH
22688: CALL_OW 351
22692: PUSH
22693: LD_VAR 0 11
22697: PPUSH
22698: LD_VAR 0 12
22702: PPUSH
22703: CALL_OW 554
22707: AND
22708: IFFALSE 22748
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
22710: LD_ADDR_VAR 0 13
22714: PUSH
22715: LD_VAR 0 13
22719: PPUSH
22720: LD_VAR 0 13
22724: PUSH
22725: LD_INT 1
22727: PLUS
22728: PPUSH
22729: LD_VAR 0 11
22733: PUSH
22734: LD_VAR 0 12
22738: PUSH
22739: EMPTY
22740: LIST
22741: LIST
22742: PPUSH
22743: CALL_OW 2
22747: ST_TO_ADDR
// end ;
22748: GO 22656
22750: POP
22751: POP
22752: GO 22636
22754: POP
22755: POP
// if not list then
22756: LD_VAR 0 13
22760: NOT
22761: IFFALSE 22765
// exit ;
22763: GO 22836
// for i in list do
22765: LD_ADDR_VAR 0 6
22769: PUSH
22770: LD_VAR 0 13
22774: PUSH
22775: FOR_IN
22776: IFFALSE 22834
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
22778: LD_VAR 0 1
22782: PPUSH
22783: LD_STRING M
22785: PUSH
22786: LD_VAR 0 6
22790: PUSH
22791: LD_INT 1
22793: ARRAY
22794: PUSH
22795: LD_VAR 0 6
22799: PUSH
22800: LD_INT 2
22802: ARRAY
22803: PUSH
22804: LD_INT 0
22806: PUSH
22807: LD_INT 0
22809: PUSH
22810: LD_INT 0
22812: PUSH
22813: LD_INT 0
22815: PUSH
22816: EMPTY
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: PUSH
22825: EMPTY
22826: LIST
22827: PPUSH
22828: CALL_OW 447
22832: GO 22775
22834: POP
22835: POP
// end ;
22836: LD_VAR 0 5
22840: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
22841: LD_INT 0
22843: PPUSH
22844: PPUSH
22845: PPUSH
22846: PPUSH
22847: PPUSH
22848: PPUSH
22849: PPUSH
22850: PPUSH
22851: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
22852: LD_VAR 0 1
22856: PPUSH
22857: CALL_OW 302
22861: NOT
22862: PUSH
22863: LD_VAR 0 2
22867: PPUSH
22868: LD_VAR 0 3
22872: PPUSH
22873: CALL_OW 488
22877: NOT
22878: OR
22879: PUSH
22880: LD_VAR 0 4
22884: NOT
22885: OR
22886: IFFALSE 22890
// exit ;
22888: GO 23238
// list := [ ] ;
22890: LD_ADDR_VAR 0 13
22894: PUSH
22895: EMPTY
22896: ST_TO_ADDR
// if x - r < 0 then
22897: LD_VAR 0 2
22901: PUSH
22902: LD_VAR 0 4
22906: MINUS
22907: PUSH
22908: LD_INT 0
22910: LESS
22911: IFFALSE 22923
// min_x := 0 else
22913: LD_ADDR_VAR 0 7
22917: PUSH
22918: LD_INT 0
22920: ST_TO_ADDR
22921: GO 22939
// min_x := x - r ;
22923: LD_ADDR_VAR 0 7
22927: PUSH
22928: LD_VAR 0 2
22932: PUSH
22933: LD_VAR 0 4
22937: MINUS
22938: ST_TO_ADDR
// if y - r < 0 then
22939: LD_VAR 0 3
22943: PUSH
22944: LD_VAR 0 4
22948: MINUS
22949: PUSH
22950: LD_INT 0
22952: LESS
22953: IFFALSE 22965
// min_y := 0 else
22955: LD_ADDR_VAR 0 8
22959: PUSH
22960: LD_INT 0
22962: ST_TO_ADDR
22963: GO 22981
// min_y := y - r ;
22965: LD_ADDR_VAR 0 8
22969: PUSH
22970: LD_VAR 0 3
22974: PUSH
22975: LD_VAR 0 4
22979: MINUS
22980: ST_TO_ADDR
// max_x := x + r ;
22981: LD_ADDR_VAR 0 9
22985: PUSH
22986: LD_VAR 0 2
22990: PUSH
22991: LD_VAR 0 4
22995: PLUS
22996: ST_TO_ADDR
// max_y := y + r ;
22997: LD_ADDR_VAR 0 10
23001: PUSH
23002: LD_VAR 0 3
23006: PUSH
23007: LD_VAR 0 4
23011: PLUS
23012: ST_TO_ADDR
// for _x = min_x to max_x do
23013: LD_ADDR_VAR 0 11
23017: PUSH
23018: DOUBLE
23019: LD_VAR 0 7
23023: DEC
23024: ST_TO_ADDR
23025: LD_VAR 0 9
23029: PUSH
23030: FOR_TO
23031: IFFALSE 23148
// for _y = min_y to max_y do
23033: LD_ADDR_VAR 0 12
23037: PUSH
23038: DOUBLE
23039: LD_VAR 0 8
23043: DEC
23044: ST_TO_ADDR
23045: LD_VAR 0 10
23049: PUSH
23050: FOR_TO
23051: IFFALSE 23144
// begin if not ValidHex ( _x , _y ) then
23053: LD_VAR 0 11
23057: PPUSH
23058: LD_VAR 0 12
23062: PPUSH
23063: CALL_OW 488
23067: NOT
23068: IFFALSE 23072
// continue ;
23070: GO 23050
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
23072: LD_VAR 0 11
23076: PPUSH
23077: LD_VAR 0 12
23081: PPUSH
23082: CALL_OW 351
23086: PUSH
23087: LD_VAR 0 11
23091: PPUSH
23092: LD_VAR 0 12
23096: PPUSH
23097: CALL_OW 554
23101: AND
23102: IFFALSE 23142
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23104: LD_ADDR_VAR 0 13
23108: PUSH
23109: LD_VAR 0 13
23113: PPUSH
23114: LD_VAR 0 13
23118: PUSH
23119: LD_INT 1
23121: PLUS
23122: PPUSH
23123: LD_VAR 0 11
23127: PUSH
23128: LD_VAR 0 12
23132: PUSH
23133: EMPTY
23134: LIST
23135: LIST
23136: PPUSH
23137: CALL_OW 2
23141: ST_TO_ADDR
// end ;
23142: GO 23050
23144: POP
23145: POP
23146: GO 23030
23148: POP
23149: POP
// if not list then
23150: LD_VAR 0 13
23154: NOT
23155: IFFALSE 23159
// exit ;
23157: GO 23238
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
23159: LD_ADDR_VAR 0 13
23163: PUSH
23164: LD_VAR 0 1
23168: PPUSH
23169: LD_VAR 0 13
23173: PPUSH
23174: LD_INT 1
23176: PPUSH
23177: LD_INT 1
23179: PPUSH
23180: CALL 31851 0 4
23184: ST_TO_ADDR
// ComStop ( flame ) ;
23185: LD_VAR 0 1
23189: PPUSH
23190: CALL_OW 141
// for i in list do
23194: LD_ADDR_VAR 0 6
23198: PUSH
23199: LD_VAR 0 13
23203: PUSH
23204: FOR_IN
23205: IFFALSE 23236
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
23207: LD_VAR 0 1
23211: PPUSH
23212: LD_VAR 0 6
23216: PUSH
23217: LD_INT 1
23219: ARRAY
23220: PPUSH
23221: LD_VAR 0 6
23225: PUSH
23226: LD_INT 2
23228: ARRAY
23229: PPUSH
23230: CALL_OW 176
23234: GO 23204
23236: POP
23237: POP
// end ;
23238: LD_VAR 0 5
23242: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
23243: LD_EXP 87
23247: NOT
23248: IFFALSE 23298
23250: GO 23252
23252: DISABLE
// begin initHack := true ;
23253: LD_ADDR_EXP 87
23257: PUSH
23258: LD_INT 1
23260: ST_TO_ADDR
// hackTanks := [ ] ;
23261: LD_ADDR_EXP 88
23265: PUSH
23266: EMPTY
23267: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
23268: LD_ADDR_EXP 89
23272: PUSH
23273: EMPTY
23274: ST_TO_ADDR
// hackLimit := 3 ;
23275: LD_ADDR_EXP 90
23279: PUSH
23280: LD_INT 3
23282: ST_TO_ADDR
// hackDist := 12 ;
23283: LD_ADDR_EXP 91
23287: PUSH
23288: LD_INT 12
23290: ST_TO_ADDR
// hackCounter := [ ] ;
23291: LD_ADDR_EXP 92
23295: PUSH
23296: EMPTY
23297: ST_TO_ADDR
// end ;
23298: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
23299: LD_EXP 87
23303: PUSH
23304: LD_INT 34
23306: PUSH
23307: LD_INT 99
23309: PUSH
23310: EMPTY
23311: LIST
23312: LIST
23313: PPUSH
23314: CALL_OW 69
23318: AND
23319: IFFALSE 23572
23321: GO 23323
23323: DISABLE
23324: LD_INT 0
23326: PPUSH
23327: PPUSH
// begin enable ;
23328: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
23329: LD_ADDR_VAR 0 1
23333: PUSH
23334: LD_INT 34
23336: PUSH
23337: LD_INT 99
23339: PUSH
23340: EMPTY
23341: LIST
23342: LIST
23343: PPUSH
23344: CALL_OW 69
23348: PUSH
23349: FOR_IN
23350: IFFALSE 23570
// begin if not i in hackTanks then
23352: LD_VAR 0 1
23356: PUSH
23357: LD_EXP 88
23361: IN
23362: NOT
23363: IFFALSE 23446
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
23365: LD_ADDR_EXP 88
23369: PUSH
23370: LD_EXP 88
23374: PPUSH
23375: LD_EXP 88
23379: PUSH
23380: LD_INT 1
23382: PLUS
23383: PPUSH
23384: LD_VAR 0 1
23388: PPUSH
23389: CALL_OW 1
23393: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
23394: LD_ADDR_EXP 89
23398: PUSH
23399: LD_EXP 89
23403: PPUSH
23404: LD_EXP 89
23408: PUSH
23409: LD_INT 1
23411: PLUS
23412: PPUSH
23413: EMPTY
23414: PPUSH
23415: CALL_OW 1
23419: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
23420: LD_ADDR_EXP 92
23424: PUSH
23425: LD_EXP 92
23429: PPUSH
23430: LD_EXP 92
23434: PUSH
23435: LD_INT 1
23437: PLUS
23438: PPUSH
23439: EMPTY
23440: PPUSH
23441: CALL_OW 1
23445: ST_TO_ADDR
// end ; if not IsOk ( i ) then
23446: LD_VAR 0 1
23450: PPUSH
23451: CALL_OW 302
23455: NOT
23456: IFFALSE 23469
// begin HackUnlinkAll ( i ) ;
23458: LD_VAR 0 1
23462: PPUSH
23463: CALL 23575 0 1
// continue ;
23467: GO 23349
// end ; HackCheckCapturedStatus ( i ) ;
23469: LD_VAR 0 1
23473: PPUSH
23474: CALL 24018 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
23478: LD_ADDR_VAR 0 2
23482: PUSH
23483: LD_INT 81
23485: PUSH
23486: LD_VAR 0 1
23490: PPUSH
23491: CALL_OW 255
23495: PUSH
23496: EMPTY
23497: LIST
23498: LIST
23499: PUSH
23500: LD_INT 33
23502: PUSH
23503: LD_INT 3
23505: PUSH
23506: EMPTY
23507: LIST
23508: LIST
23509: PUSH
23510: LD_INT 91
23512: PUSH
23513: LD_VAR 0 1
23517: PUSH
23518: LD_EXP 91
23522: PUSH
23523: EMPTY
23524: LIST
23525: LIST
23526: LIST
23527: PUSH
23528: LD_INT 50
23530: PUSH
23531: EMPTY
23532: LIST
23533: PUSH
23534: EMPTY
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: PPUSH
23540: CALL_OW 69
23544: ST_TO_ADDR
// if not tmp then
23545: LD_VAR 0 2
23549: NOT
23550: IFFALSE 23554
// continue ;
23552: GO 23349
// HackLink ( i , tmp ) ;
23554: LD_VAR 0 1
23558: PPUSH
23559: LD_VAR 0 2
23563: PPUSH
23564: CALL 23711 0 2
// end ;
23568: GO 23349
23570: POP
23571: POP
// end ;
23572: PPOPN 2
23574: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
23575: LD_INT 0
23577: PPUSH
23578: PPUSH
23579: PPUSH
// if not hack in hackTanks then
23580: LD_VAR 0 1
23584: PUSH
23585: LD_EXP 88
23589: IN
23590: NOT
23591: IFFALSE 23595
// exit ;
23593: GO 23706
// index := GetElementIndex ( hackTanks , hack ) ;
23595: LD_ADDR_VAR 0 4
23599: PUSH
23600: LD_EXP 88
23604: PPUSH
23605: LD_VAR 0 1
23609: PPUSH
23610: CALL 31148 0 2
23614: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
23615: LD_EXP 89
23619: PUSH
23620: LD_VAR 0 4
23624: ARRAY
23625: IFFALSE 23706
// begin for i in hackTanksCaptured [ index ] do
23627: LD_ADDR_VAR 0 3
23631: PUSH
23632: LD_EXP 89
23636: PUSH
23637: LD_VAR 0 4
23641: ARRAY
23642: PUSH
23643: FOR_IN
23644: IFFALSE 23670
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
23646: LD_VAR 0 3
23650: PUSH
23651: LD_INT 1
23653: ARRAY
23654: PPUSH
23655: LD_VAR 0 3
23659: PUSH
23660: LD_INT 2
23662: ARRAY
23663: PPUSH
23664: CALL_OW 235
23668: GO 23643
23670: POP
23671: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
23672: LD_ADDR_EXP 89
23676: PUSH
23677: LD_EXP 89
23681: PPUSH
23682: LD_VAR 0 4
23686: PPUSH
23687: EMPTY
23688: PPUSH
23689: CALL_OW 1
23693: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
23694: LD_VAR 0 1
23698: PPUSH
23699: LD_INT 0
23701: PPUSH
23702: CALL_OW 505
// end ; end ;
23706: LD_VAR 0 2
23710: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
23711: LD_INT 0
23713: PPUSH
23714: PPUSH
23715: PPUSH
// if not hack in hackTanks or not vehicles then
23716: LD_VAR 0 1
23720: PUSH
23721: LD_EXP 88
23725: IN
23726: NOT
23727: PUSH
23728: LD_VAR 0 2
23732: NOT
23733: OR
23734: IFFALSE 23738
// exit ;
23736: GO 24013
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
23738: LD_ADDR_VAR 0 2
23742: PUSH
23743: LD_VAR 0 1
23747: PPUSH
23748: LD_VAR 0 2
23752: PPUSH
23753: LD_INT 1
23755: PPUSH
23756: LD_INT 1
23758: PPUSH
23759: CALL 31798 0 4
23763: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
23764: LD_ADDR_VAR 0 5
23768: PUSH
23769: LD_EXP 88
23773: PPUSH
23774: LD_VAR 0 1
23778: PPUSH
23779: CALL 31148 0 2
23783: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
23784: LD_EXP 89
23788: PUSH
23789: LD_VAR 0 5
23793: ARRAY
23794: PUSH
23795: LD_EXP 90
23799: LESS
23800: IFFALSE 23989
// begin for i := 1 to vehicles do
23802: LD_ADDR_VAR 0 4
23806: PUSH
23807: DOUBLE
23808: LD_INT 1
23810: DEC
23811: ST_TO_ADDR
23812: LD_VAR 0 2
23816: PUSH
23817: FOR_TO
23818: IFFALSE 23987
// begin if hackTanksCaptured [ index ] = hackLimit then
23820: LD_EXP 89
23824: PUSH
23825: LD_VAR 0 5
23829: ARRAY
23830: PUSH
23831: LD_EXP 90
23835: EQUAL
23836: IFFALSE 23840
// break ;
23838: GO 23987
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
23840: LD_ADDR_EXP 92
23844: PUSH
23845: LD_EXP 92
23849: PPUSH
23850: LD_VAR 0 5
23854: PPUSH
23855: LD_EXP 92
23859: PUSH
23860: LD_VAR 0 5
23864: ARRAY
23865: PUSH
23866: LD_INT 1
23868: PLUS
23869: PPUSH
23870: CALL_OW 1
23874: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
23875: LD_ADDR_EXP 89
23879: PUSH
23880: LD_EXP 89
23884: PPUSH
23885: LD_VAR 0 5
23889: PUSH
23890: LD_EXP 89
23894: PUSH
23895: LD_VAR 0 5
23899: ARRAY
23900: PUSH
23901: LD_INT 1
23903: PLUS
23904: PUSH
23905: EMPTY
23906: LIST
23907: LIST
23908: PPUSH
23909: LD_VAR 0 2
23913: PUSH
23914: LD_VAR 0 4
23918: ARRAY
23919: PUSH
23920: LD_VAR 0 2
23924: PUSH
23925: LD_VAR 0 4
23929: ARRAY
23930: PPUSH
23931: CALL_OW 255
23935: PUSH
23936: EMPTY
23937: LIST
23938: LIST
23939: PPUSH
23940: CALL 31363 0 3
23944: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
23945: LD_VAR 0 2
23949: PUSH
23950: LD_VAR 0 4
23954: ARRAY
23955: PPUSH
23956: LD_VAR 0 1
23960: PPUSH
23961: CALL_OW 255
23965: PPUSH
23966: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
23970: LD_VAR 0 2
23974: PUSH
23975: LD_VAR 0 4
23979: ARRAY
23980: PPUSH
23981: CALL_OW 141
// end ;
23985: GO 23817
23987: POP
23988: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23989: LD_VAR 0 1
23993: PPUSH
23994: LD_EXP 89
23998: PUSH
23999: LD_VAR 0 5
24003: ARRAY
24004: PUSH
24005: LD_INT 0
24007: PLUS
24008: PPUSH
24009: CALL_OW 505
// end ;
24013: LD_VAR 0 3
24017: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
24018: LD_INT 0
24020: PPUSH
24021: PPUSH
24022: PPUSH
24023: PPUSH
// if not hack in hackTanks then
24024: LD_VAR 0 1
24028: PUSH
24029: LD_EXP 88
24033: IN
24034: NOT
24035: IFFALSE 24039
// exit ;
24037: GO 24279
// index := GetElementIndex ( hackTanks , hack ) ;
24039: LD_ADDR_VAR 0 4
24043: PUSH
24044: LD_EXP 88
24048: PPUSH
24049: LD_VAR 0 1
24053: PPUSH
24054: CALL 31148 0 2
24058: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
24059: LD_ADDR_VAR 0 3
24063: PUSH
24064: DOUBLE
24065: LD_EXP 89
24069: PUSH
24070: LD_VAR 0 4
24074: ARRAY
24075: INC
24076: ST_TO_ADDR
24077: LD_INT 1
24079: PUSH
24080: FOR_DOWNTO
24081: IFFALSE 24253
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
24083: LD_ADDR_VAR 0 5
24087: PUSH
24088: LD_EXP 89
24092: PUSH
24093: LD_VAR 0 4
24097: ARRAY
24098: PUSH
24099: LD_VAR 0 3
24103: ARRAY
24104: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
24105: LD_VAR 0 5
24109: PUSH
24110: LD_INT 1
24112: ARRAY
24113: PPUSH
24114: CALL_OW 302
24118: NOT
24119: PUSH
24120: LD_VAR 0 5
24124: PUSH
24125: LD_INT 1
24127: ARRAY
24128: PPUSH
24129: CALL_OW 255
24133: PUSH
24134: LD_VAR 0 1
24138: PPUSH
24139: CALL_OW 255
24143: NONEQUAL
24144: OR
24145: IFFALSE 24251
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
24147: LD_VAR 0 5
24151: PUSH
24152: LD_INT 1
24154: ARRAY
24155: PPUSH
24156: CALL_OW 305
24160: PUSH
24161: LD_VAR 0 5
24165: PUSH
24166: LD_INT 1
24168: ARRAY
24169: PPUSH
24170: CALL_OW 255
24174: PUSH
24175: LD_VAR 0 1
24179: PPUSH
24180: CALL_OW 255
24184: EQUAL
24185: AND
24186: IFFALSE 24210
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
24188: LD_VAR 0 5
24192: PUSH
24193: LD_INT 1
24195: ARRAY
24196: PPUSH
24197: LD_VAR 0 5
24201: PUSH
24202: LD_INT 2
24204: ARRAY
24205: PPUSH
24206: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
24210: LD_ADDR_EXP 89
24214: PUSH
24215: LD_EXP 89
24219: PPUSH
24220: LD_VAR 0 4
24224: PPUSH
24225: LD_EXP 89
24229: PUSH
24230: LD_VAR 0 4
24234: ARRAY
24235: PPUSH
24236: LD_VAR 0 3
24240: PPUSH
24241: CALL_OW 3
24245: PPUSH
24246: CALL_OW 1
24250: ST_TO_ADDR
// end ; end ;
24251: GO 24080
24253: POP
24254: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24255: LD_VAR 0 1
24259: PPUSH
24260: LD_EXP 89
24264: PUSH
24265: LD_VAR 0 4
24269: ARRAY
24270: PUSH
24271: LD_INT 0
24273: PLUS
24274: PPUSH
24275: CALL_OW 505
// end ;
24279: LD_VAR 0 2
24283: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
24284: LD_INT 0
24286: PPUSH
24287: PPUSH
24288: PPUSH
24289: PPUSH
// if not hack in hackTanks then
24290: LD_VAR 0 1
24294: PUSH
24295: LD_EXP 88
24299: IN
24300: NOT
24301: IFFALSE 24305
// exit ;
24303: GO 24390
// index := GetElementIndex ( hackTanks , hack ) ;
24305: LD_ADDR_VAR 0 5
24309: PUSH
24310: LD_EXP 88
24314: PPUSH
24315: LD_VAR 0 1
24319: PPUSH
24320: CALL 31148 0 2
24324: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
24325: LD_ADDR_VAR 0 4
24329: PUSH
24330: DOUBLE
24331: LD_INT 1
24333: DEC
24334: ST_TO_ADDR
24335: LD_EXP 89
24339: PUSH
24340: LD_VAR 0 5
24344: ARRAY
24345: PUSH
24346: FOR_TO
24347: IFFALSE 24388
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
24349: LD_EXP 89
24353: PUSH
24354: LD_VAR 0 5
24358: ARRAY
24359: PUSH
24360: LD_VAR 0 4
24364: ARRAY
24365: PUSH
24366: LD_INT 1
24368: ARRAY
24369: PUSH
24370: LD_VAR 0 2
24374: EQUAL
24375: IFFALSE 24386
// KillUnit ( vehicle ) ;
24377: LD_VAR 0 2
24381: PPUSH
24382: CALL_OW 66
24386: GO 24346
24388: POP
24389: POP
// end ;
24390: LD_VAR 0 3
24394: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
24395: LD_EXP 93
24399: NOT
24400: IFFALSE 24435
24402: GO 24404
24404: DISABLE
// begin initMiner := true ;
24405: LD_ADDR_EXP 93
24409: PUSH
24410: LD_INT 1
24412: ST_TO_ADDR
// minersList := [ ] ;
24413: LD_ADDR_EXP 94
24417: PUSH
24418: EMPTY
24419: ST_TO_ADDR
// minerMinesList := [ ] ;
24420: LD_ADDR_EXP 95
24424: PUSH
24425: EMPTY
24426: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
24427: LD_ADDR_EXP 96
24431: PUSH
24432: LD_INT 5
24434: ST_TO_ADDR
// end ;
24435: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
24436: LD_EXP 93
24440: PUSH
24441: LD_INT 34
24443: PUSH
24444: LD_INT 81
24446: PUSH
24447: EMPTY
24448: LIST
24449: LIST
24450: PPUSH
24451: CALL_OW 69
24455: AND
24456: IFFALSE 24917
24458: GO 24460
24460: DISABLE
24461: LD_INT 0
24463: PPUSH
24464: PPUSH
24465: PPUSH
24466: PPUSH
// begin enable ;
24467: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
24468: LD_ADDR_VAR 0 1
24472: PUSH
24473: LD_INT 34
24475: PUSH
24476: LD_INT 81
24478: PUSH
24479: EMPTY
24480: LIST
24481: LIST
24482: PPUSH
24483: CALL_OW 69
24487: PUSH
24488: FOR_IN
24489: IFFALSE 24561
// begin if not i in minersList then
24491: LD_VAR 0 1
24495: PUSH
24496: LD_EXP 94
24500: IN
24501: NOT
24502: IFFALSE 24559
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
24504: LD_ADDR_EXP 94
24508: PUSH
24509: LD_EXP 94
24513: PPUSH
24514: LD_EXP 94
24518: PUSH
24519: LD_INT 1
24521: PLUS
24522: PPUSH
24523: LD_VAR 0 1
24527: PPUSH
24528: CALL_OW 1
24532: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
24533: LD_ADDR_EXP 95
24537: PUSH
24538: LD_EXP 95
24542: PPUSH
24543: LD_EXP 95
24547: PUSH
24548: LD_INT 1
24550: PLUS
24551: PPUSH
24552: EMPTY
24553: PPUSH
24554: CALL_OW 1
24558: ST_TO_ADDR
// end end ;
24559: GO 24488
24561: POP
24562: POP
// for i := minerMinesList downto 1 do
24563: LD_ADDR_VAR 0 1
24567: PUSH
24568: DOUBLE
24569: LD_EXP 95
24573: INC
24574: ST_TO_ADDR
24575: LD_INT 1
24577: PUSH
24578: FOR_DOWNTO
24579: IFFALSE 24915
// begin if IsLive ( minersList [ i ] ) then
24581: LD_EXP 94
24585: PUSH
24586: LD_VAR 0 1
24590: ARRAY
24591: PPUSH
24592: CALL_OW 300
24596: IFFALSE 24624
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
24598: LD_EXP 94
24602: PUSH
24603: LD_VAR 0 1
24607: ARRAY
24608: PPUSH
24609: LD_EXP 95
24613: PUSH
24614: LD_VAR 0 1
24618: ARRAY
24619: PPUSH
24620: CALL_OW 505
// if not minerMinesList [ i ] then
24624: LD_EXP 95
24628: PUSH
24629: LD_VAR 0 1
24633: ARRAY
24634: NOT
24635: IFFALSE 24639
// continue ;
24637: GO 24578
// for j := minerMinesList [ i ] downto 1 do
24639: LD_ADDR_VAR 0 2
24643: PUSH
24644: DOUBLE
24645: LD_EXP 95
24649: PUSH
24650: LD_VAR 0 1
24654: ARRAY
24655: INC
24656: ST_TO_ADDR
24657: LD_INT 1
24659: PUSH
24660: FOR_DOWNTO
24661: IFFALSE 24911
// begin side := GetSide ( minersList [ i ] ) ;
24663: LD_ADDR_VAR 0 3
24667: PUSH
24668: LD_EXP 94
24672: PUSH
24673: LD_VAR 0 1
24677: ARRAY
24678: PPUSH
24679: CALL_OW 255
24683: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
24684: LD_ADDR_VAR 0 4
24688: PUSH
24689: LD_EXP 95
24693: PUSH
24694: LD_VAR 0 1
24698: ARRAY
24699: PUSH
24700: LD_VAR 0 2
24704: ARRAY
24705: PUSH
24706: LD_INT 1
24708: ARRAY
24709: PPUSH
24710: LD_EXP 95
24714: PUSH
24715: LD_VAR 0 1
24719: ARRAY
24720: PUSH
24721: LD_VAR 0 2
24725: ARRAY
24726: PUSH
24727: LD_INT 2
24729: ARRAY
24730: PPUSH
24731: CALL_OW 428
24735: ST_TO_ADDR
// if not tmp then
24736: LD_VAR 0 4
24740: NOT
24741: IFFALSE 24745
// continue ;
24743: GO 24660
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
24745: LD_VAR 0 4
24749: PUSH
24750: LD_INT 81
24752: PUSH
24753: LD_VAR 0 3
24757: PUSH
24758: EMPTY
24759: LIST
24760: LIST
24761: PPUSH
24762: CALL_OW 69
24766: IN
24767: PUSH
24768: LD_EXP 95
24772: PUSH
24773: LD_VAR 0 1
24777: ARRAY
24778: PUSH
24779: LD_VAR 0 2
24783: ARRAY
24784: PUSH
24785: LD_INT 1
24787: ARRAY
24788: PPUSH
24789: LD_EXP 95
24793: PUSH
24794: LD_VAR 0 1
24798: ARRAY
24799: PUSH
24800: LD_VAR 0 2
24804: ARRAY
24805: PUSH
24806: LD_INT 2
24808: ARRAY
24809: PPUSH
24810: CALL_OW 458
24814: AND
24815: IFFALSE 24909
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
24817: LD_EXP 95
24821: PUSH
24822: LD_VAR 0 1
24826: ARRAY
24827: PUSH
24828: LD_VAR 0 2
24832: ARRAY
24833: PUSH
24834: LD_INT 1
24836: ARRAY
24837: PPUSH
24838: LD_EXP 95
24842: PUSH
24843: LD_VAR 0 1
24847: ARRAY
24848: PUSH
24849: LD_VAR 0 2
24853: ARRAY
24854: PUSH
24855: LD_INT 2
24857: ARRAY
24858: PPUSH
24859: LD_VAR 0 3
24863: PPUSH
24864: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
24868: LD_ADDR_EXP 95
24872: PUSH
24873: LD_EXP 95
24877: PPUSH
24878: LD_VAR 0 1
24882: PPUSH
24883: LD_EXP 95
24887: PUSH
24888: LD_VAR 0 1
24892: ARRAY
24893: PPUSH
24894: LD_VAR 0 2
24898: PPUSH
24899: CALL_OW 3
24903: PPUSH
24904: CALL_OW 1
24908: ST_TO_ADDR
// end ; end ;
24909: GO 24660
24911: POP
24912: POP
// end ;
24913: GO 24578
24915: POP
24916: POP
// end ;
24917: PPOPN 4
24919: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
24920: LD_INT 0
24922: PPUSH
24923: PPUSH
// result := false ;
24924: LD_ADDR_VAR 0 4
24928: PUSH
24929: LD_INT 0
24931: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
24932: LD_VAR 0 1
24936: PPUSH
24937: CALL_OW 264
24941: PUSH
24942: LD_INT 81
24944: EQUAL
24945: NOT
24946: IFFALSE 24950
// exit ;
24948: GO 25190
// index := GetElementIndex ( minersList , unit ) ;
24950: LD_ADDR_VAR 0 5
24954: PUSH
24955: LD_EXP 94
24959: PPUSH
24960: LD_VAR 0 1
24964: PPUSH
24965: CALL 31148 0 2
24969: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
24970: LD_EXP 95
24974: PUSH
24975: LD_VAR 0 5
24979: ARRAY
24980: PUSH
24981: LD_EXP 96
24985: GREATEREQUAL
24986: IFFALSE 24990
// exit ;
24988: GO 25190
// ComMoveXY ( unit , x , y ) ;
24990: LD_VAR 0 1
24994: PPUSH
24995: LD_VAR 0 2
24999: PPUSH
25000: LD_VAR 0 3
25004: PPUSH
25005: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25009: LD_INT 35
25011: PPUSH
25012: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
25016: LD_VAR 0 1
25020: PPUSH
25021: LD_VAR 0 2
25025: PPUSH
25026: LD_VAR 0 3
25030: PPUSH
25031: CALL 62900 0 3
25035: NOT
25036: PUSH
25037: LD_VAR 0 1
25041: PPUSH
25042: CALL_OW 314
25046: AND
25047: IFFALSE 25051
// exit ;
25049: GO 25190
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
25051: LD_VAR 0 2
25055: PPUSH
25056: LD_VAR 0 3
25060: PPUSH
25061: CALL_OW 428
25065: PUSH
25066: LD_VAR 0 1
25070: EQUAL
25071: PUSH
25072: LD_VAR 0 1
25076: PPUSH
25077: CALL_OW 314
25081: NOT
25082: AND
25083: IFFALSE 25009
// PlaySoundXY ( x , y , PlantMine ) ;
25085: LD_VAR 0 2
25089: PPUSH
25090: LD_VAR 0 3
25094: PPUSH
25095: LD_STRING PlantMine
25097: PPUSH
25098: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
25102: LD_VAR 0 2
25106: PPUSH
25107: LD_VAR 0 3
25111: PPUSH
25112: LD_VAR 0 1
25116: PPUSH
25117: CALL_OW 255
25121: PPUSH
25122: LD_INT 0
25124: PPUSH
25125: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
25129: LD_ADDR_EXP 95
25133: PUSH
25134: LD_EXP 95
25138: PPUSH
25139: LD_VAR 0 5
25143: PUSH
25144: LD_EXP 95
25148: PUSH
25149: LD_VAR 0 5
25153: ARRAY
25154: PUSH
25155: LD_INT 1
25157: PLUS
25158: PUSH
25159: EMPTY
25160: LIST
25161: LIST
25162: PPUSH
25163: LD_VAR 0 2
25167: PUSH
25168: LD_VAR 0 3
25172: PUSH
25173: EMPTY
25174: LIST
25175: LIST
25176: PPUSH
25177: CALL 31363 0 3
25181: ST_TO_ADDR
// result := true ;
25182: LD_ADDR_VAR 0 4
25186: PUSH
25187: LD_INT 1
25189: ST_TO_ADDR
// end ;
25190: LD_VAR 0 4
25194: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
25195: LD_INT 0
25197: PPUSH
25198: PPUSH
25199: PPUSH
// if not unit in minersList then
25200: LD_VAR 0 1
25204: PUSH
25205: LD_EXP 94
25209: IN
25210: NOT
25211: IFFALSE 25215
// exit ;
25213: GO 25607
// index := GetElementIndex ( minersList , unit ) ;
25215: LD_ADDR_VAR 0 6
25219: PUSH
25220: LD_EXP 94
25224: PPUSH
25225: LD_VAR 0 1
25229: PPUSH
25230: CALL 31148 0 2
25234: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
25235: LD_ADDR_VAR 0 5
25239: PUSH
25240: DOUBLE
25241: LD_EXP 95
25245: PUSH
25246: LD_VAR 0 6
25250: ARRAY
25251: INC
25252: ST_TO_ADDR
25253: LD_INT 1
25255: PUSH
25256: FOR_DOWNTO
25257: IFFALSE 25418
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
25259: LD_EXP 95
25263: PUSH
25264: LD_VAR 0 6
25268: ARRAY
25269: PUSH
25270: LD_VAR 0 5
25274: ARRAY
25275: PUSH
25276: LD_INT 1
25278: ARRAY
25279: PUSH
25280: LD_VAR 0 2
25284: EQUAL
25285: PUSH
25286: LD_EXP 95
25290: PUSH
25291: LD_VAR 0 6
25295: ARRAY
25296: PUSH
25297: LD_VAR 0 5
25301: ARRAY
25302: PUSH
25303: LD_INT 2
25305: ARRAY
25306: PUSH
25307: LD_VAR 0 3
25311: EQUAL
25312: AND
25313: IFFALSE 25416
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25315: LD_EXP 95
25319: PUSH
25320: LD_VAR 0 6
25324: ARRAY
25325: PUSH
25326: LD_VAR 0 5
25330: ARRAY
25331: PUSH
25332: LD_INT 1
25334: ARRAY
25335: PPUSH
25336: LD_EXP 95
25340: PUSH
25341: LD_VAR 0 6
25345: ARRAY
25346: PUSH
25347: LD_VAR 0 5
25351: ARRAY
25352: PUSH
25353: LD_INT 2
25355: ARRAY
25356: PPUSH
25357: LD_VAR 0 1
25361: PPUSH
25362: CALL_OW 255
25366: PPUSH
25367: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25371: LD_ADDR_EXP 95
25375: PUSH
25376: LD_EXP 95
25380: PPUSH
25381: LD_VAR 0 6
25385: PPUSH
25386: LD_EXP 95
25390: PUSH
25391: LD_VAR 0 6
25395: ARRAY
25396: PPUSH
25397: LD_VAR 0 5
25401: PPUSH
25402: CALL_OW 3
25406: PPUSH
25407: CALL_OW 1
25411: ST_TO_ADDR
// exit ;
25412: POP
25413: POP
25414: GO 25607
// end ; end ;
25416: GO 25256
25418: POP
25419: POP
// for i := minerMinesList [ index ] downto 1 do
25420: LD_ADDR_VAR 0 5
25424: PUSH
25425: DOUBLE
25426: LD_EXP 95
25430: PUSH
25431: LD_VAR 0 6
25435: ARRAY
25436: INC
25437: ST_TO_ADDR
25438: LD_INT 1
25440: PUSH
25441: FOR_DOWNTO
25442: IFFALSE 25605
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
25444: LD_EXP 95
25448: PUSH
25449: LD_VAR 0 6
25453: ARRAY
25454: PUSH
25455: LD_VAR 0 5
25459: ARRAY
25460: PUSH
25461: LD_INT 1
25463: ARRAY
25464: PPUSH
25465: LD_EXP 95
25469: PUSH
25470: LD_VAR 0 6
25474: ARRAY
25475: PUSH
25476: LD_VAR 0 5
25480: ARRAY
25481: PUSH
25482: LD_INT 2
25484: ARRAY
25485: PPUSH
25486: LD_VAR 0 2
25490: PPUSH
25491: LD_VAR 0 3
25495: PPUSH
25496: CALL_OW 298
25500: PUSH
25501: LD_INT 6
25503: LESS
25504: IFFALSE 25603
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25506: LD_EXP 95
25510: PUSH
25511: LD_VAR 0 6
25515: ARRAY
25516: PUSH
25517: LD_VAR 0 5
25521: ARRAY
25522: PUSH
25523: LD_INT 1
25525: ARRAY
25526: PPUSH
25527: LD_EXP 95
25531: PUSH
25532: LD_VAR 0 6
25536: ARRAY
25537: PUSH
25538: LD_VAR 0 5
25542: ARRAY
25543: PUSH
25544: LD_INT 2
25546: ARRAY
25547: PPUSH
25548: LD_VAR 0 1
25552: PPUSH
25553: CALL_OW 255
25557: PPUSH
25558: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25562: LD_ADDR_EXP 95
25566: PUSH
25567: LD_EXP 95
25571: PPUSH
25572: LD_VAR 0 6
25576: PPUSH
25577: LD_EXP 95
25581: PUSH
25582: LD_VAR 0 6
25586: ARRAY
25587: PPUSH
25588: LD_VAR 0 5
25592: PPUSH
25593: CALL_OW 3
25597: PPUSH
25598: CALL_OW 1
25602: ST_TO_ADDR
// end ; end ;
25603: GO 25441
25605: POP
25606: POP
// end ;
25607: LD_VAR 0 4
25611: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
25612: LD_INT 0
25614: PPUSH
25615: PPUSH
25616: PPUSH
25617: PPUSH
25618: PPUSH
25619: PPUSH
25620: PPUSH
25621: PPUSH
25622: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
25623: LD_VAR 0 1
25627: PPUSH
25628: CALL_OW 264
25632: PUSH
25633: LD_INT 81
25635: EQUAL
25636: NOT
25637: PUSH
25638: LD_VAR 0 1
25642: PUSH
25643: LD_EXP 94
25647: IN
25648: NOT
25649: OR
25650: IFFALSE 25654
// exit ;
25652: GO 25976
// index := GetElementIndex ( minersList , unit ) ;
25654: LD_ADDR_VAR 0 6
25658: PUSH
25659: LD_EXP 94
25663: PPUSH
25664: LD_VAR 0 1
25668: PPUSH
25669: CALL 31148 0 2
25673: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
25674: LD_ADDR_VAR 0 8
25678: PUSH
25679: LD_EXP 96
25683: PUSH
25684: LD_EXP 95
25688: PUSH
25689: LD_VAR 0 6
25693: ARRAY
25694: MINUS
25695: ST_TO_ADDR
// if not minesFreeAmount then
25696: LD_VAR 0 8
25700: NOT
25701: IFFALSE 25705
// exit ;
25703: GO 25976
// tmp := [ ] ;
25705: LD_ADDR_VAR 0 7
25709: PUSH
25710: EMPTY
25711: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
25712: LD_ADDR_VAR 0 5
25716: PUSH
25717: DOUBLE
25718: LD_INT 1
25720: DEC
25721: ST_TO_ADDR
25722: LD_VAR 0 8
25726: PUSH
25727: FOR_TO
25728: IFFALSE 25923
// begin _d := rand ( 0 , 5 ) ;
25730: LD_ADDR_VAR 0 11
25734: PUSH
25735: LD_INT 0
25737: PPUSH
25738: LD_INT 5
25740: PPUSH
25741: CALL_OW 12
25745: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
25746: LD_ADDR_VAR 0 12
25750: PUSH
25751: LD_INT 2
25753: PPUSH
25754: LD_INT 6
25756: PPUSH
25757: CALL_OW 12
25761: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
25762: LD_ADDR_VAR 0 9
25766: PUSH
25767: LD_VAR 0 2
25771: PPUSH
25772: LD_VAR 0 11
25776: PPUSH
25777: LD_VAR 0 12
25781: PPUSH
25782: CALL_OW 272
25786: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
25787: LD_ADDR_VAR 0 10
25791: PUSH
25792: LD_VAR 0 3
25796: PPUSH
25797: LD_VAR 0 11
25801: PPUSH
25802: LD_VAR 0 12
25806: PPUSH
25807: CALL_OW 273
25811: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
25812: LD_VAR 0 9
25816: PPUSH
25817: LD_VAR 0 10
25821: PPUSH
25822: CALL_OW 488
25826: PUSH
25827: LD_VAR 0 9
25831: PUSH
25832: LD_VAR 0 10
25836: PUSH
25837: EMPTY
25838: LIST
25839: LIST
25840: PUSH
25841: LD_VAR 0 7
25845: IN
25846: NOT
25847: AND
25848: PUSH
25849: LD_VAR 0 9
25853: PPUSH
25854: LD_VAR 0 10
25858: PPUSH
25859: CALL_OW 458
25863: NOT
25864: AND
25865: IFFALSE 25907
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
25867: LD_ADDR_VAR 0 7
25871: PUSH
25872: LD_VAR 0 7
25876: PPUSH
25877: LD_VAR 0 7
25881: PUSH
25882: LD_INT 1
25884: PLUS
25885: PPUSH
25886: LD_VAR 0 9
25890: PUSH
25891: LD_VAR 0 10
25895: PUSH
25896: EMPTY
25897: LIST
25898: LIST
25899: PPUSH
25900: CALL_OW 1
25904: ST_TO_ADDR
25905: GO 25921
// i := i - 1 ;
25907: LD_ADDR_VAR 0 5
25911: PUSH
25912: LD_VAR 0 5
25916: PUSH
25917: LD_INT 1
25919: MINUS
25920: ST_TO_ADDR
// end ;
25921: GO 25727
25923: POP
25924: POP
// for i in tmp do
25925: LD_ADDR_VAR 0 5
25929: PUSH
25930: LD_VAR 0 7
25934: PUSH
25935: FOR_IN
25936: IFFALSE 25974
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
25938: LD_VAR 0 1
25942: PPUSH
25943: LD_VAR 0 5
25947: PUSH
25948: LD_INT 1
25950: ARRAY
25951: PPUSH
25952: LD_VAR 0 5
25956: PUSH
25957: LD_INT 2
25959: ARRAY
25960: PPUSH
25961: CALL 24920 0 3
25965: NOT
25966: IFFALSE 25972
// exit ;
25968: POP
25969: POP
25970: GO 25976
25972: GO 25935
25974: POP
25975: POP
// end ;
25976: LD_VAR 0 4
25980: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
25981: LD_INT 0
25983: PPUSH
25984: PPUSH
25985: PPUSH
25986: PPUSH
25987: PPUSH
25988: PPUSH
25989: PPUSH
// if not GetClass ( unit ) = class_sniper then
25990: LD_VAR 0 1
25994: PPUSH
25995: CALL_OW 257
25999: PUSH
26000: LD_INT 5
26002: EQUAL
26003: NOT
26004: IFFALSE 26008
// exit ;
26006: GO 26396
// dist := 8 ;
26008: LD_ADDR_VAR 0 5
26012: PUSH
26013: LD_INT 8
26015: ST_TO_ADDR
// viewRange := 12 ;
26016: LD_ADDR_VAR 0 7
26020: PUSH
26021: LD_INT 12
26023: ST_TO_ADDR
// side := GetSide ( unit ) ;
26024: LD_ADDR_VAR 0 6
26028: PUSH
26029: LD_VAR 0 1
26033: PPUSH
26034: CALL_OW 255
26038: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
26039: LD_INT 61
26041: PPUSH
26042: LD_VAR 0 6
26046: PPUSH
26047: CALL_OW 321
26051: PUSH
26052: LD_INT 2
26054: EQUAL
26055: IFFALSE 26065
// viewRange := 16 ;
26057: LD_ADDR_VAR 0 7
26061: PUSH
26062: LD_INT 16
26064: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
26065: LD_VAR 0 1
26069: PPUSH
26070: LD_VAR 0 2
26074: PPUSH
26075: LD_VAR 0 3
26079: PPUSH
26080: CALL_OW 297
26084: PUSH
26085: LD_VAR 0 5
26089: GREATER
26090: IFFALSE 26169
// begin ComMoveXY ( unit , x , y ) ;
26092: LD_VAR 0 1
26096: PPUSH
26097: LD_VAR 0 2
26101: PPUSH
26102: LD_VAR 0 3
26106: PPUSH
26107: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26111: LD_INT 35
26113: PPUSH
26114: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
26118: LD_VAR 0 1
26122: PPUSH
26123: LD_VAR 0 2
26127: PPUSH
26128: LD_VAR 0 3
26132: PPUSH
26133: CALL 62900 0 3
26137: NOT
26138: IFFALSE 26142
// exit ;
26140: GO 26396
// until GetDistUnitXY ( unit , x , y ) < dist ;
26142: LD_VAR 0 1
26146: PPUSH
26147: LD_VAR 0 2
26151: PPUSH
26152: LD_VAR 0 3
26156: PPUSH
26157: CALL_OW 297
26161: PUSH
26162: LD_VAR 0 5
26166: LESS
26167: IFFALSE 26111
// end ; ComTurnXY ( unit , x , y ) ;
26169: LD_VAR 0 1
26173: PPUSH
26174: LD_VAR 0 2
26178: PPUSH
26179: LD_VAR 0 3
26183: PPUSH
26184: CALL_OW 118
// wait ( 5 ) ;
26188: LD_INT 5
26190: PPUSH
26191: CALL_OW 67
// _d := GetDir ( unit ) ;
26195: LD_ADDR_VAR 0 10
26199: PUSH
26200: LD_VAR 0 1
26204: PPUSH
26205: CALL_OW 254
26209: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
26210: LD_ADDR_VAR 0 8
26214: PUSH
26215: LD_VAR 0 1
26219: PPUSH
26220: CALL_OW 250
26224: PPUSH
26225: LD_VAR 0 10
26229: PPUSH
26230: LD_VAR 0 5
26234: PPUSH
26235: CALL_OW 272
26239: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
26240: LD_ADDR_VAR 0 9
26244: PUSH
26245: LD_VAR 0 1
26249: PPUSH
26250: CALL_OW 251
26254: PPUSH
26255: LD_VAR 0 10
26259: PPUSH
26260: LD_VAR 0 5
26264: PPUSH
26265: CALL_OW 273
26269: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26270: LD_VAR 0 8
26274: PPUSH
26275: LD_VAR 0 9
26279: PPUSH
26280: CALL_OW 488
26284: NOT
26285: IFFALSE 26289
// exit ;
26287: GO 26396
// ComAnimCustom ( unit , 1 ) ;
26289: LD_VAR 0 1
26293: PPUSH
26294: LD_INT 1
26296: PPUSH
26297: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
26301: LD_VAR 0 8
26305: PPUSH
26306: LD_VAR 0 9
26310: PPUSH
26311: LD_VAR 0 6
26315: PPUSH
26316: LD_VAR 0 7
26320: PPUSH
26321: CALL_OW 330
// repeat wait ( 1 ) ;
26325: LD_INT 1
26327: PPUSH
26328: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
26332: LD_VAR 0 1
26336: PPUSH
26337: CALL_OW 316
26341: PUSH
26342: LD_VAR 0 1
26346: PPUSH
26347: CALL_OW 314
26351: OR
26352: PUSH
26353: LD_VAR 0 1
26357: PPUSH
26358: CALL_OW 302
26362: NOT
26363: OR
26364: PUSH
26365: LD_VAR 0 1
26369: PPUSH
26370: CALL_OW 301
26374: OR
26375: IFFALSE 26325
// RemoveSeeing ( _x , _y , side ) ;
26377: LD_VAR 0 8
26381: PPUSH
26382: LD_VAR 0 9
26386: PPUSH
26387: LD_VAR 0 6
26391: PPUSH
26392: CALL_OW 331
// end ; end_of_file
26396: LD_VAR 0 4
26400: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
26401: LD_INT 0
26403: PPUSH
26404: PPUSH
// if exist_mode then
26405: LD_VAR 0 2
26409: IFFALSE 26434
// unit := CreateCharacter ( prefix & ident ) else
26411: LD_ADDR_VAR 0 5
26415: PUSH
26416: LD_VAR 0 3
26420: PUSH
26421: LD_VAR 0 1
26425: STR
26426: PPUSH
26427: CALL_OW 34
26431: ST_TO_ADDR
26432: GO 26449
// unit := NewCharacter ( ident ) ;
26434: LD_ADDR_VAR 0 5
26438: PUSH
26439: LD_VAR 0 1
26443: PPUSH
26444: CALL_OW 25
26448: ST_TO_ADDR
// result := unit ;
26449: LD_ADDR_VAR 0 4
26453: PUSH
26454: LD_VAR 0 5
26458: ST_TO_ADDR
// end ;
26459: LD_VAR 0 4
26463: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
26464: LD_INT 0
26466: PPUSH
26467: PPUSH
// if not side or not nation then
26468: LD_VAR 0 1
26472: NOT
26473: PUSH
26474: LD_VAR 0 2
26478: NOT
26479: OR
26480: IFFALSE 26484
// exit ;
26482: GO 27252
// case nation of nation_american :
26484: LD_VAR 0 2
26488: PUSH
26489: LD_INT 1
26491: DOUBLE
26492: EQUAL
26493: IFTRUE 26497
26495: GO 26711
26497: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
26498: LD_ADDR_VAR 0 4
26502: PUSH
26503: LD_INT 35
26505: PUSH
26506: LD_INT 45
26508: PUSH
26509: LD_INT 46
26511: PUSH
26512: LD_INT 47
26514: PUSH
26515: LD_INT 82
26517: PUSH
26518: LD_INT 83
26520: PUSH
26521: LD_INT 84
26523: PUSH
26524: LD_INT 85
26526: PUSH
26527: LD_INT 86
26529: PUSH
26530: LD_INT 1
26532: PUSH
26533: LD_INT 2
26535: PUSH
26536: LD_INT 6
26538: PUSH
26539: LD_INT 15
26541: PUSH
26542: LD_INT 16
26544: PUSH
26545: LD_INT 7
26547: PUSH
26548: LD_INT 12
26550: PUSH
26551: LD_INT 13
26553: PUSH
26554: LD_INT 10
26556: PUSH
26557: LD_INT 14
26559: PUSH
26560: LD_INT 20
26562: PUSH
26563: LD_INT 21
26565: PUSH
26566: LD_INT 22
26568: PUSH
26569: LD_INT 25
26571: PUSH
26572: LD_INT 32
26574: PUSH
26575: LD_INT 27
26577: PUSH
26578: LD_INT 36
26580: PUSH
26581: LD_INT 69
26583: PUSH
26584: LD_INT 39
26586: PUSH
26587: LD_INT 34
26589: PUSH
26590: LD_INT 40
26592: PUSH
26593: LD_INT 48
26595: PUSH
26596: LD_INT 49
26598: PUSH
26599: LD_INT 50
26601: PUSH
26602: LD_INT 51
26604: PUSH
26605: LD_INT 52
26607: PUSH
26608: LD_INT 53
26610: PUSH
26611: LD_INT 54
26613: PUSH
26614: LD_INT 55
26616: PUSH
26617: LD_INT 56
26619: PUSH
26620: LD_INT 57
26622: PUSH
26623: LD_INT 58
26625: PUSH
26626: LD_INT 59
26628: PUSH
26629: LD_INT 60
26631: PUSH
26632: LD_INT 61
26634: PUSH
26635: LD_INT 62
26637: PUSH
26638: LD_INT 80
26640: PUSH
26641: LD_INT 82
26643: PUSH
26644: LD_INT 83
26646: PUSH
26647: LD_INT 84
26649: PUSH
26650: LD_INT 85
26652: PUSH
26653: LD_INT 86
26655: PUSH
26656: EMPTY
26657: LIST
26658: LIST
26659: LIST
26660: LIST
26661: LIST
26662: LIST
26663: LIST
26664: LIST
26665: LIST
26666: LIST
26667: LIST
26668: LIST
26669: LIST
26670: LIST
26671: LIST
26672: LIST
26673: LIST
26674: LIST
26675: LIST
26676: LIST
26677: LIST
26678: LIST
26679: LIST
26680: LIST
26681: LIST
26682: LIST
26683: LIST
26684: LIST
26685: LIST
26686: LIST
26687: LIST
26688: LIST
26689: LIST
26690: LIST
26691: LIST
26692: LIST
26693: LIST
26694: LIST
26695: LIST
26696: LIST
26697: LIST
26698: LIST
26699: LIST
26700: LIST
26701: LIST
26702: LIST
26703: LIST
26704: LIST
26705: LIST
26706: LIST
26707: LIST
26708: ST_TO_ADDR
26709: GO 27176
26711: LD_INT 2
26713: DOUBLE
26714: EQUAL
26715: IFTRUE 26719
26717: GO 26945
26719: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
26720: LD_ADDR_VAR 0 4
26724: PUSH
26725: LD_INT 35
26727: PUSH
26728: LD_INT 45
26730: PUSH
26731: LD_INT 46
26733: PUSH
26734: LD_INT 47
26736: PUSH
26737: LD_INT 82
26739: PUSH
26740: LD_INT 83
26742: PUSH
26743: LD_INT 84
26745: PUSH
26746: LD_INT 85
26748: PUSH
26749: LD_INT 87
26751: PUSH
26752: LD_INT 70
26754: PUSH
26755: LD_INT 1
26757: PUSH
26758: LD_INT 11
26760: PUSH
26761: LD_INT 3
26763: PUSH
26764: LD_INT 4
26766: PUSH
26767: LD_INT 5
26769: PUSH
26770: LD_INT 6
26772: PUSH
26773: LD_INT 15
26775: PUSH
26776: LD_INT 18
26778: PUSH
26779: LD_INT 7
26781: PUSH
26782: LD_INT 17
26784: PUSH
26785: LD_INT 8
26787: PUSH
26788: LD_INT 20
26790: PUSH
26791: LD_INT 21
26793: PUSH
26794: LD_INT 22
26796: PUSH
26797: LD_INT 72
26799: PUSH
26800: LD_INT 26
26802: PUSH
26803: LD_INT 69
26805: PUSH
26806: LD_INT 39
26808: PUSH
26809: LD_INT 40
26811: PUSH
26812: LD_INT 41
26814: PUSH
26815: LD_INT 42
26817: PUSH
26818: LD_INT 43
26820: PUSH
26821: LD_INT 48
26823: PUSH
26824: LD_INT 49
26826: PUSH
26827: LD_INT 50
26829: PUSH
26830: LD_INT 51
26832: PUSH
26833: LD_INT 52
26835: PUSH
26836: LD_INT 53
26838: PUSH
26839: LD_INT 54
26841: PUSH
26842: LD_INT 55
26844: PUSH
26845: LD_INT 56
26847: PUSH
26848: LD_INT 60
26850: PUSH
26851: LD_INT 61
26853: PUSH
26854: LD_INT 62
26856: PUSH
26857: LD_INT 66
26859: PUSH
26860: LD_INT 67
26862: PUSH
26863: LD_INT 68
26865: PUSH
26866: LD_INT 81
26868: PUSH
26869: LD_INT 82
26871: PUSH
26872: LD_INT 83
26874: PUSH
26875: LD_INT 84
26877: PUSH
26878: LD_INT 85
26880: PUSH
26881: LD_INT 87
26883: PUSH
26884: LD_INT 88
26886: PUSH
26887: EMPTY
26888: LIST
26889: LIST
26890: LIST
26891: LIST
26892: LIST
26893: LIST
26894: LIST
26895: LIST
26896: LIST
26897: LIST
26898: LIST
26899: LIST
26900: LIST
26901: LIST
26902: LIST
26903: LIST
26904: LIST
26905: LIST
26906: LIST
26907: LIST
26908: LIST
26909: LIST
26910: LIST
26911: LIST
26912: LIST
26913: LIST
26914: LIST
26915: LIST
26916: LIST
26917: LIST
26918: LIST
26919: LIST
26920: LIST
26921: LIST
26922: LIST
26923: LIST
26924: LIST
26925: LIST
26926: LIST
26927: LIST
26928: LIST
26929: LIST
26930: LIST
26931: LIST
26932: LIST
26933: LIST
26934: LIST
26935: LIST
26936: LIST
26937: LIST
26938: LIST
26939: LIST
26940: LIST
26941: LIST
26942: ST_TO_ADDR
26943: GO 27176
26945: LD_INT 3
26947: DOUBLE
26948: EQUAL
26949: IFTRUE 26953
26951: GO 27175
26953: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
26954: LD_ADDR_VAR 0 4
26958: PUSH
26959: LD_INT 46
26961: PUSH
26962: LD_INT 47
26964: PUSH
26965: LD_INT 1
26967: PUSH
26968: LD_INT 2
26970: PUSH
26971: LD_INT 82
26973: PUSH
26974: LD_INT 83
26976: PUSH
26977: LD_INT 84
26979: PUSH
26980: LD_INT 85
26982: PUSH
26983: LD_INT 86
26985: PUSH
26986: LD_INT 11
26988: PUSH
26989: LD_INT 9
26991: PUSH
26992: LD_INT 20
26994: PUSH
26995: LD_INT 19
26997: PUSH
26998: LD_INT 21
27000: PUSH
27001: LD_INT 24
27003: PUSH
27004: LD_INT 22
27006: PUSH
27007: LD_INT 25
27009: PUSH
27010: LD_INT 28
27012: PUSH
27013: LD_INT 29
27015: PUSH
27016: LD_INT 30
27018: PUSH
27019: LD_INT 31
27021: PUSH
27022: LD_INT 37
27024: PUSH
27025: LD_INT 38
27027: PUSH
27028: LD_INT 32
27030: PUSH
27031: LD_INT 27
27033: PUSH
27034: LD_INT 33
27036: PUSH
27037: LD_INT 69
27039: PUSH
27040: LD_INT 39
27042: PUSH
27043: LD_INT 34
27045: PUSH
27046: LD_INT 40
27048: PUSH
27049: LD_INT 71
27051: PUSH
27052: LD_INT 23
27054: PUSH
27055: LD_INT 44
27057: PUSH
27058: LD_INT 48
27060: PUSH
27061: LD_INT 49
27063: PUSH
27064: LD_INT 50
27066: PUSH
27067: LD_INT 51
27069: PUSH
27070: LD_INT 52
27072: PUSH
27073: LD_INT 53
27075: PUSH
27076: LD_INT 54
27078: PUSH
27079: LD_INT 55
27081: PUSH
27082: LD_INT 56
27084: PUSH
27085: LD_INT 57
27087: PUSH
27088: LD_INT 58
27090: PUSH
27091: LD_INT 59
27093: PUSH
27094: LD_INT 63
27096: PUSH
27097: LD_INT 64
27099: PUSH
27100: LD_INT 65
27102: PUSH
27103: LD_INT 82
27105: PUSH
27106: LD_INT 83
27108: PUSH
27109: LD_INT 84
27111: PUSH
27112: LD_INT 85
27114: PUSH
27115: LD_INT 86
27117: PUSH
27118: EMPTY
27119: LIST
27120: LIST
27121: LIST
27122: LIST
27123: LIST
27124: LIST
27125: LIST
27126: LIST
27127: LIST
27128: LIST
27129: LIST
27130: LIST
27131: LIST
27132: LIST
27133: LIST
27134: LIST
27135: LIST
27136: LIST
27137: LIST
27138: LIST
27139: LIST
27140: LIST
27141: LIST
27142: LIST
27143: LIST
27144: LIST
27145: LIST
27146: LIST
27147: LIST
27148: LIST
27149: LIST
27150: LIST
27151: LIST
27152: LIST
27153: LIST
27154: LIST
27155: LIST
27156: LIST
27157: LIST
27158: LIST
27159: LIST
27160: LIST
27161: LIST
27162: LIST
27163: LIST
27164: LIST
27165: LIST
27166: LIST
27167: LIST
27168: LIST
27169: LIST
27170: LIST
27171: LIST
27172: ST_TO_ADDR
27173: GO 27176
27175: POP
// if state > - 1 and state < 3 then
27176: LD_VAR 0 3
27180: PUSH
27181: LD_INT 1
27183: NEG
27184: GREATER
27185: PUSH
27186: LD_VAR 0 3
27190: PUSH
27191: LD_INT 3
27193: LESS
27194: AND
27195: IFFALSE 27252
// for i in result do
27197: LD_ADDR_VAR 0 5
27201: PUSH
27202: LD_VAR 0 4
27206: PUSH
27207: FOR_IN
27208: IFFALSE 27250
// if GetTech ( i , side ) <> state then
27210: LD_VAR 0 5
27214: PPUSH
27215: LD_VAR 0 1
27219: PPUSH
27220: CALL_OW 321
27224: PUSH
27225: LD_VAR 0 3
27229: NONEQUAL
27230: IFFALSE 27248
// result := result diff i ;
27232: LD_ADDR_VAR 0 4
27236: PUSH
27237: LD_VAR 0 4
27241: PUSH
27242: LD_VAR 0 5
27246: DIFF
27247: ST_TO_ADDR
27248: GO 27207
27250: POP
27251: POP
// end ;
27252: LD_VAR 0 4
27256: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
27257: LD_INT 0
27259: PPUSH
27260: PPUSH
27261: PPUSH
// result := true ;
27262: LD_ADDR_VAR 0 3
27266: PUSH
27267: LD_INT 1
27269: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
27270: LD_ADDR_VAR 0 5
27274: PUSH
27275: LD_VAR 0 2
27279: PPUSH
27280: CALL_OW 480
27284: ST_TO_ADDR
// if not tmp then
27285: LD_VAR 0 5
27289: NOT
27290: IFFALSE 27294
// exit ;
27292: GO 27343
// for i in tmp do
27294: LD_ADDR_VAR 0 4
27298: PUSH
27299: LD_VAR 0 5
27303: PUSH
27304: FOR_IN
27305: IFFALSE 27341
// if GetTech ( i , side ) <> state_researched then
27307: LD_VAR 0 4
27311: PPUSH
27312: LD_VAR 0 1
27316: PPUSH
27317: CALL_OW 321
27321: PUSH
27322: LD_INT 2
27324: NONEQUAL
27325: IFFALSE 27339
// begin result := false ;
27327: LD_ADDR_VAR 0 3
27331: PUSH
27332: LD_INT 0
27334: ST_TO_ADDR
// exit ;
27335: POP
27336: POP
27337: GO 27343
// end ;
27339: GO 27304
27341: POP
27342: POP
// end ;
27343: LD_VAR 0 3
27347: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
27348: LD_INT 0
27350: PPUSH
27351: PPUSH
27352: PPUSH
27353: PPUSH
27354: PPUSH
27355: PPUSH
27356: PPUSH
27357: PPUSH
27358: PPUSH
27359: PPUSH
27360: PPUSH
27361: PPUSH
27362: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
27363: LD_VAR 0 1
27367: NOT
27368: PUSH
27369: LD_VAR 0 1
27373: PPUSH
27374: CALL_OW 257
27378: PUSH
27379: LD_INT 9
27381: NONEQUAL
27382: OR
27383: IFFALSE 27387
// exit ;
27385: GO 27960
// side := GetSide ( unit ) ;
27387: LD_ADDR_VAR 0 9
27391: PUSH
27392: LD_VAR 0 1
27396: PPUSH
27397: CALL_OW 255
27401: ST_TO_ADDR
// tech_space := tech_spacanom ;
27402: LD_ADDR_VAR 0 12
27406: PUSH
27407: LD_INT 29
27409: ST_TO_ADDR
// tech_time := tech_taurad ;
27410: LD_ADDR_VAR 0 13
27414: PUSH
27415: LD_INT 28
27417: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
27418: LD_ADDR_VAR 0 11
27422: PUSH
27423: LD_VAR 0 1
27427: PPUSH
27428: CALL_OW 310
27432: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
27433: LD_VAR 0 11
27437: PPUSH
27438: CALL_OW 247
27442: PUSH
27443: LD_INT 2
27445: EQUAL
27446: IFFALSE 27450
// exit ;
27448: GO 27960
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27450: LD_ADDR_VAR 0 8
27454: PUSH
27455: LD_INT 81
27457: PUSH
27458: LD_VAR 0 9
27462: PUSH
27463: EMPTY
27464: LIST
27465: LIST
27466: PUSH
27467: LD_INT 3
27469: PUSH
27470: LD_INT 21
27472: PUSH
27473: LD_INT 3
27475: PUSH
27476: EMPTY
27477: LIST
27478: LIST
27479: PUSH
27480: EMPTY
27481: LIST
27482: LIST
27483: PUSH
27484: EMPTY
27485: LIST
27486: LIST
27487: PPUSH
27488: CALL_OW 69
27492: ST_TO_ADDR
// if not tmp then
27493: LD_VAR 0 8
27497: NOT
27498: IFFALSE 27502
// exit ;
27500: GO 27960
// if in_unit then
27502: LD_VAR 0 11
27506: IFFALSE 27530
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
27508: LD_ADDR_VAR 0 10
27512: PUSH
27513: LD_VAR 0 8
27517: PPUSH
27518: LD_VAR 0 11
27522: PPUSH
27523: CALL_OW 74
27527: ST_TO_ADDR
27528: GO 27550
// enemy := NearestUnitToUnit ( tmp , unit ) ;
27530: LD_ADDR_VAR 0 10
27534: PUSH
27535: LD_VAR 0 8
27539: PPUSH
27540: LD_VAR 0 1
27544: PPUSH
27545: CALL_OW 74
27549: ST_TO_ADDR
// if not enemy then
27550: LD_VAR 0 10
27554: NOT
27555: IFFALSE 27559
// exit ;
27557: GO 27960
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
27559: LD_VAR 0 11
27563: PUSH
27564: LD_VAR 0 11
27568: PPUSH
27569: LD_VAR 0 10
27573: PPUSH
27574: CALL_OW 296
27578: PUSH
27579: LD_INT 13
27581: GREATER
27582: AND
27583: PUSH
27584: LD_VAR 0 1
27588: PPUSH
27589: LD_VAR 0 10
27593: PPUSH
27594: CALL_OW 296
27598: PUSH
27599: LD_INT 12
27601: GREATER
27602: OR
27603: IFFALSE 27607
// exit ;
27605: GO 27960
// missile := [ 1 ] ;
27607: LD_ADDR_VAR 0 14
27611: PUSH
27612: LD_INT 1
27614: PUSH
27615: EMPTY
27616: LIST
27617: ST_TO_ADDR
// if Researched ( side , tech_space ) then
27618: LD_VAR 0 9
27622: PPUSH
27623: LD_VAR 0 12
27627: PPUSH
27628: CALL_OW 325
27632: IFFALSE 27661
// missile := Replace ( missile , missile + 1 , 2 ) ;
27634: LD_ADDR_VAR 0 14
27638: PUSH
27639: LD_VAR 0 14
27643: PPUSH
27644: LD_VAR 0 14
27648: PUSH
27649: LD_INT 1
27651: PLUS
27652: PPUSH
27653: LD_INT 2
27655: PPUSH
27656: CALL_OW 1
27660: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
27661: LD_VAR 0 9
27665: PPUSH
27666: LD_VAR 0 13
27670: PPUSH
27671: CALL_OW 325
27675: PUSH
27676: LD_VAR 0 10
27680: PPUSH
27681: CALL_OW 255
27685: PPUSH
27686: LD_VAR 0 13
27690: PPUSH
27691: CALL_OW 325
27695: NOT
27696: AND
27697: IFFALSE 27726
// missile := Replace ( missile , missile + 1 , 3 ) ;
27699: LD_ADDR_VAR 0 14
27703: PUSH
27704: LD_VAR 0 14
27708: PPUSH
27709: LD_VAR 0 14
27713: PUSH
27714: LD_INT 1
27716: PLUS
27717: PPUSH
27718: LD_INT 3
27720: PPUSH
27721: CALL_OW 1
27725: ST_TO_ADDR
// if missile < 2 then
27726: LD_VAR 0 14
27730: PUSH
27731: LD_INT 2
27733: LESS
27734: IFFALSE 27738
// exit ;
27736: GO 27960
// x := GetX ( enemy ) ;
27738: LD_ADDR_VAR 0 4
27742: PUSH
27743: LD_VAR 0 10
27747: PPUSH
27748: CALL_OW 250
27752: ST_TO_ADDR
// y := GetY ( enemy ) ;
27753: LD_ADDR_VAR 0 5
27757: PUSH
27758: LD_VAR 0 10
27762: PPUSH
27763: CALL_OW 251
27767: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
27768: LD_ADDR_VAR 0 6
27772: PUSH
27773: LD_VAR 0 4
27777: PUSH
27778: LD_INT 1
27780: NEG
27781: PPUSH
27782: LD_INT 1
27784: PPUSH
27785: CALL_OW 12
27789: PLUS
27790: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
27791: LD_ADDR_VAR 0 7
27795: PUSH
27796: LD_VAR 0 5
27800: PUSH
27801: LD_INT 1
27803: NEG
27804: PPUSH
27805: LD_INT 1
27807: PPUSH
27808: CALL_OW 12
27812: PLUS
27813: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27814: LD_VAR 0 6
27818: PPUSH
27819: LD_VAR 0 7
27823: PPUSH
27824: CALL_OW 488
27828: NOT
27829: IFFALSE 27851
// begin _x := x ;
27831: LD_ADDR_VAR 0 6
27835: PUSH
27836: LD_VAR 0 4
27840: ST_TO_ADDR
// _y := y ;
27841: LD_ADDR_VAR 0 7
27845: PUSH
27846: LD_VAR 0 5
27850: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
27851: LD_ADDR_VAR 0 3
27855: PUSH
27856: LD_INT 1
27858: PPUSH
27859: LD_VAR 0 14
27863: PPUSH
27864: CALL_OW 12
27868: ST_TO_ADDR
// case i of 1 :
27869: LD_VAR 0 3
27873: PUSH
27874: LD_INT 1
27876: DOUBLE
27877: EQUAL
27878: IFTRUE 27882
27880: GO 27899
27882: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
27883: LD_VAR 0 1
27887: PPUSH
27888: LD_VAR 0 10
27892: PPUSH
27893: CALL_OW 115
27897: GO 27960
27899: LD_INT 2
27901: DOUBLE
27902: EQUAL
27903: IFTRUE 27907
27905: GO 27929
27907: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
27908: LD_VAR 0 1
27912: PPUSH
27913: LD_VAR 0 6
27917: PPUSH
27918: LD_VAR 0 7
27922: PPUSH
27923: CALL_OW 153
27927: GO 27960
27929: LD_INT 3
27931: DOUBLE
27932: EQUAL
27933: IFTRUE 27937
27935: GO 27959
27937: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
27938: LD_VAR 0 1
27942: PPUSH
27943: LD_VAR 0 6
27947: PPUSH
27948: LD_VAR 0 7
27952: PPUSH
27953: CALL_OW 154
27957: GO 27960
27959: POP
// end ;
27960: LD_VAR 0 2
27964: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
27965: LD_INT 0
27967: PPUSH
27968: PPUSH
27969: PPUSH
27970: PPUSH
27971: PPUSH
27972: PPUSH
// if not unit or not building then
27973: LD_VAR 0 1
27977: NOT
27978: PUSH
27979: LD_VAR 0 2
27983: NOT
27984: OR
27985: IFFALSE 27989
// exit ;
27987: GO 28147
// x := GetX ( building ) ;
27989: LD_ADDR_VAR 0 5
27993: PUSH
27994: LD_VAR 0 2
27998: PPUSH
27999: CALL_OW 250
28003: ST_TO_ADDR
// y := GetY ( building ) ;
28004: LD_ADDR_VAR 0 6
28008: PUSH
28009: LD_VAR 0 2
28013: PPUSH
28014: CALL_OW 251
28018: ST_TO_ADDR
// for i = 0 to 5 do
28019: LD_ADDR_VAR 0 4
28023: PUSH
28024: DOUBLE
28025: LD_INT 0
28027: DEC
28028: ST_TO_ADDR
28029: LD_INT 5
28031: PUSH
28032: FOR_TO
28033: IFFALSE 28145
// begin _x := ShiftX ( x , i , 3 ) ;
28035: LD_ADDR_VAR 0 7
28039: PUSH
28040: LD_VAR 0 5
28044: PPUSH
28045: LD_VAR 0 4
28049: PPUSH
28050: LD_INT 3
28052: PPUSH
28053: CALL_OW 272
28057: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
28058: LD_ADDR_VAR 0 8
28062: PUSH
28063: LD_VAR 0 6
28067: PPUSH
28068: LD_VAR 0 4
28072: PPUSH
28073: LD_INT 3
28075: PPUSH
28076: CALL_OW 273
28080: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28081: LD_VAR 0 7
28085: PPUSH
28086: LD_VAR 0 8
28090: PPUSH
28091: CALL_OW 488
28095: NOT
28096: IFFALSE 28100
// continue ;
28098: GO 28032
// if HexInfo ( _x , _y ) = 0 then
28100: LD_VAR 0 7
28104: PPUSH
28105: LD_VAR 0 8
28109: PPUSH
28110: CALL_OW 428
28114: PUSH
28115: LD_INT 0
28117: EQUAL
28118: IFFALSE 28143
// begin ComMoveXY ( unit , _x , _y ) ;
28120: LD_VAR 0 1
28124: PPUSH
28125: LD_VAR 0 7
28129: PPUSH
28130: LD_VAR 0 8
28134: PPUSH
28135: CALL_OW 111
// exit ;
28139: POP
28140: POP
28141: GO 28147
// end ; end ;
28143: GO 28032
28145: POP
28146: POP
// end ;
28147: LD_VAR 0 3
28151: RET
// export function ScanBase ( side , base_area ) ; begin
28152: LD_INT 0
28154: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
28155: LD_ADDR_VAR 0 3
28159: PUSH
28160: LD_VAR 0 2
28164: PPUSH
28165: LD_INT 81
28167: PUSH
28168: LD_VAR 0 1
28172: PUSH
28173: EMPTY
28174: LIST
28175: LIST
28176: PPUSH
28177: CALL_OW 70
28181: ST_TO_ADDR
// end ;
28182: LD_VAR 0 3
28186: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
28187: LD_INT 0
28189: PPUSH
28190: PPUSH
28191: PPUSH
28192: PPUSH
// result := false ;
28193: LD_ADDR_VAR 0 2
28197: PUSH
28198: LD_INT 0
28200: ST_TO_ADDR
// side := GetSide ( unit ) ;
28201: LD_ADDR_VAR 0 3
28205: PUSH
28206: LD_VAR 0 1
28210: PPUSH
28211: CALL_OW 255
28215: ST_TO_ADDR
// nat := GetNation ( unit ) ;
28216: LD_ADDR_VAR 0 4
28220: PUSH
28221: LD_VAR 0 1
28225: PPUSH
28226: CALL_OW 248
28230: ST_TO_ADDR
// case nat of 1 :
28231: LD_VAR 0 4
28235: PUSH
28236: LD_INT 1
28238: DOUBLE
28239: EQUAL
28240: IFTRUE 28244
28242: GO 28255
28244: POP
// tech := tech_lassight ; 2 :
28245: LD_ADDR_VAR 0 5
28249: PUSH
28250: LD_INT 12
28252: ST_TO_ADDR
28253: GO 28294
28255: LD_INT 2
28257: DOUBLE
28258: EQUAL
28259: IFTRUE 28263
28261: GO 28274
28263: POP
// tech := tech_mortar ; 3 :
28264: LD_ADDR_VAR 0 5
28268: PUSH
28269: LD_INT 41
28271: ST_TO_ADDR
28272: GO 28294
28274: LD_INT 3
28276: DOUBLE
28277: EQUAL
28278: IFTRUE 28282
28280: GO 28293
28282: POP
// tech := tech_bazooka ; end ;
28283: LD_ADDR_VAR 0 5
28287: PUSH
28288: LD_INT 44
28290: ST_TO_ADDR
28291: GO 28294
28293: POP
// if Researched ( side , tech ) then
28294: LD_VAR 0 3
28298: PPUSH
28299: LD_VAR 0 5
28303: PPUSH
28304: CALL_OW 325
28308: IFFALSE 28335
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
28310: LD_ADDR_VAR 0 2
28314: PUSH
28315: LD_INT 5
28317: PUSH
28318: LD_INT 8
28320: PUSH
28321: LD_INT 9
28323: PUSH
28324: EMPTY
28325: LIST
28326: LIST
28327: LIST
28328: PUSH
28329: LD_VAR 0 4
28333: ARRAY
28334: ST_TO_ADDR
// end ;
28335: LD_VAR 0 2
28339: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
28340: LD_INT 0
28342: PPUSH
28343: PPUSH
28344: PPUSH
// if not mines then
28345: LD_VAR 0 2
28349: NOT
28350: IFFALSE 28354
// exit ;
28352: GO 28498
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28354: LD_ADDR_VAR 0 5
28358: PUSH
28359: LD_INT 81
28361: PUSH
28362: LD_VAR 0 1
28366: PUSH
28367: EMPTY
28368: LIST
28369: LIST
28370: PUSH
28371: LD_INT 3
28373: PUSH
28374: LD_INT 21
28376: PUSH
28377: LD_INT 3
28379: PUSH
28380: EMPTY
28381: LIST
28382: LIST
28383: PUSH
28384: EMPTY
28385: LIST
28386: LIST
28387: PUSH
28388: EMPTY
28389: LIST
28390: LIST
28391: PPUSH
28392: CALL_OW 69
28396: ST_TO_ADDR
// for i in mines do
28397: LD_ADDR_VAR 0 4
28401: PUSH
28402: LD_VAR 0 2
28406: PUSH
28407: FOR_IN
28408: IFFALSE 28496
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
28410: LD_VAR 0 4
28414: PUSH
28415: LD_INT 1
28417: ARRAY
28418: PPUSH
28419: LD_VAR 0 4
28423: PUSH
28424: LD_INT 2
28426: ARRAY
28427: PPUSH
28428: CALL_OW 458
28432: NOT
28433: IFFALSE 28437
// continue ;
28435: GO 28407
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
28437: LD_VAR 0 4
28441: PUSH
28442: LD_INT 1
28444: ARRAY
28445: PPUSH
28446: LD_VAR 0 4
28450: PUSH
28451: LD_INT 2
28453: ARRAY
28454: PPUSH
28455: CALL_OW 428
28459: PUSH
28460: LD_VAR 0 5
28464: IN
28465: IFFALSE 28494
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
28467: LD_VAR 0 4
28471: PUSH
28472: LD_INT 1
28474: ARRAY
28475: PPUSH
28476: LD_VAR 0 4
28480: PUSH
28481: LD_INT 2
28483: ARRAY
28484: PPUSH
28485: LD_VAR 0 1
28489: PPUSH
28490: CALL_OW 456
// end ;
28494: GO 28407
28496: POP
28497: POP
// end ;
28498: LD_VAR 0 3
28502: RET
// export function Count ( array ) ; begin
28503: LD_INT 0
28505: PPUSH
// result := array + 0 ;
28506: LD_ADDR_VAR 0 2
28510: PUSH
28511: LD_VAR 0 1
28515: PUSH
28516: LD_INT 0
28518: PLUS
28519: ST_TO_ADDR
// end ;
28520: LD_VAR 0 2
28524: RET
// export function IsEmpty ( building ) ; begin
28525: LD_INT 0
28527: PPUSH
// if not building then
28528: LD_VAR 0 1
28532: NOT
28533: IFFALSE 28537
// exit ;
28535: GO 28580
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
28537: LD_ADDR_VAR 0 2
28541: PUSH
28542: LD_VAR 0 1
28546: PUSH
28547: LD_INT 22
28549: PUSH
28550: LD_VAR 0 1
28554: PPUSH
28555: CALL_OW 255
28559: PUSH
28560: EMPTY
28561: LIST
28562: LIST
28563: PUSH
28564: LD_INT 58
28566: PUSH
28567: EMPTY
28568: LIST
28569: PUSH
28570: EMPTY
28571: LIST
28572: LIST
28573: PPUSH
28574: CALL_OW 69
28578: IN
28579: ST_TO_ADDR
// end ;
28580: LD_VAR 0 2
28584: RET
// export function IsNotFull ( building ) ; var places ; begin
28585: LD_INT 0
28587: PPUSH
28588: PPUSH
// if not building then
28589: LD_VAR 0 1
28593: NOT
28594: IFFALSE 28598
// exit ;
28596: GO 28626
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
28598: LD_ADDR_VAR 0 2
28602: PUSH
28603: LD_VAR 0 1
28607: PPUSH
28608: LD_INT 3
28610: PUSH
28611: LD_INT 62
28613: PUSH
28614: EMPTY
28615: LIST
28616: PUSH
28617: EMPTY
28618: LIST
28619: LIST
28620: PPUSH
28621: CALL_OW 72
28625: ST_TO_ADDR
// end ;
28626: LD_VAR 0 2
28630: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
28631: LD_INT 0
28633: PPUSH
28634: PPUSH
28635: PPUSH
28636: PPUSH
// tmp := [ ] ;
28637: LD_ADDR_VAR 0 3
28641: PUSH
28642: EMPTY
28643: ST_TO_ADDR
// list := [ ] ;
28644: LD_ADDR_VAR 0 5
28648: PUSH
28649: EMPTY
28650: ST_TO_ADDR
// for i = 16 to 25 do
28651: LD_ADDR_VAR 0 4
28655: PUSH
28656: DOUBLE
28657: LD_INT 16
28659: DEC
28660: ST_TO_ADDR
28661: LD_INT 25
28663: PUSH
28664: FOR_TO
28665: IFFALSE 28738
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
28667: LD_ADDR_VAR 0 3
28671: PUSH
28672: LD_VAR 0 3
28676: PUSH
28677: LD_INT 22
28679: PUSH
28680: LD_VAR 0 1
28684: PPUSH
28685: CALL_OW 255
28689: PUSH
28690: EMPTY
28691: LIST
28692: LIST
28693: PUSH
28694: LD_INT 91
28696: PUSH
28697: LD_VAR 0 1
28701: PUSH
28702: LD_INT 6
28704: PUSH
28705: EMPTY
28706: LIST
28707: LIST
28708: LIST
28709: PUSH
28710: LD_INT 30
28712: PUSH
28713: LD_VAR 0 4
28717: PUSH
28718: EMPTY
28719: LIST
28720: LIST
28721: PUSH
28722: EMPTY
28723: LIST
28724: LIST
28725: LIST
28726: PUSH
28727: EMPTY
28728: LIST
28729: PPUSH
28730: CALL_OW 69
28734: ADD
28735: ST_TO_ADDR
28736: GO 28664
28738: POP
28739: POP
// for i = 1 to tmp do
28740: LD_ADDR_VAR 0 4
28744: PUSH
28745: DOUBLE
28746: LD_INT 1
28748: DEC
28749: ST_TO_ADDR
28750: LD_VAR 0 3
28754: PUSH
28755: FOR_TO
28756: IFFALSE 28844
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
28758: LD_ADDR_VAR 0 5
28762: PUSH
28763: LD_VAR 0 5
28767: PUSH
28768: LD_VAR 0 3
28772: PUSH
28773: LD_VAR 0 4
28777: ARRAY
28778: PPUSH
28779: CALL_OW 266
28783: PUSH
28784: LD_VAR 0 3
28788: PUSH
28789: LD_VAR 0 4
28793: ARRAY
28794: PPUSH
28795: CALL_OW 250
28799: PUSH
28800: LD_VAR 0 3
28804: PUSH
28805: LD_VAR 0 4
28809: ARRAY
28810: PPUSH
28811: CALL_OW 251
28815: PUSH
28816: LD_VAR 0 3
28820: PUSH
28821: LD_VAR 0 4
28825: ARRAY
28826: PPUSH
28827: CALL_OW 254
28831: PUSH
28832: EMPTY
28833: LIST
28834: LIST
28835: LIST
28836: LIST
28837: PUSH
28838: EMPTY
28839: LIST
28840: ADD
28841: ST_TO_ADDR
28842: GO 28755
28844: POP
28845: POP
// result := list ;
28846: LD_ADDR_VAR 0 2
28850: PUSH
28851: LD_VAR 0 5
28855: ST_TO_ADDR
// end ;
28856: LD_VAR 0 2
28860: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
28861: LD_INT 0
28863: PPUSH
28864: PPUSH
28865: PPUSH
28866: PPUSH
28867: PPUSH
28868: PPUSH
28869: PPUSH
// if not factory then
28870: LD_VAR 0 1
28874: NOT
28875: IFFALSE 28879
// exit ;
28877: GO 29472
// if control = control_apeman then
28879: LD_VAR 0 4
28883: PUSH
28884: LD_INT 5
28886: EQUAL
28887: IFFALSE 28996
// begin tmp := UnitsInside ( factory ) ;
28889: LD_ADDR_VAR 0 8
28893: PUSH
28894: LD_VAR 0 1
28898: PPUSH
28899: CALL_OW 313
28903: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
28904: LD_VAR 0 8
28908: PPUSH
28909: LD_INT 25
28911: PUSH
28912: LD_INT 12
28914: PUSH
28915: EMPTY
28916: LIST
28917: LIST
28918: PPUSH
28919: CALL_OW 72
28923: NOT
28924: IFFALSE 28934
// control := control_manual ;
28926: LD_ADDR_VAR 0 4
28930: PUSH
28931: LD_INT 1
28933: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
28934: LD_ADDR_VAR 0 8
28938: PUSH
28939: LD_VAR 0 1
28943: PPUSH
28944: CALL 28631 0 1
28948: ST_TO_ADDR
// if tmp then
28949: LD_VAR 0 8
28953: IFFALSE 28996
// begin for i in tmp do
28955: LD_ADDR_VAR 0 7
28959: PUSH
28960: LD_VAR 0 8
28964: PUSH
28965: FOR_IN
28966: IFFALSE 28994
// if i [ 1 ] = b_ext_radio then
28968: LD_VAR 0 7
28972: PUSH
28973: LD_INT 1
28975: ARRAY
28976: PUSH
28977: LD_INT 22
28979: EQUAL
28980: IFFALSE 28992
// begin control := control_remote ;
28982: LD_ADDR_VAR 0 4
28986: PUSH
28987: LD_INT 2
28989: ST_TO_ADDR
// break ;
28990: GO 28994
// end ;
28992: GO 28965
28994: POP
28995: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28996: LD_VAR 0 1
29000: PPUSH
29001: LD_VAR 0 2
29005: PPUSH
29006: LD_VAR 0 3
29010: PPUSH
29011: LD_VAR 0 4
29015: PPUSH
29016: LD_VAR 0 5
29020: PPUSH
29021: CALL_OW 448
29025: IFFALSE 29060
// begin result := [ chassis , engine , control , weapon ] ;
29027: LD_ADDR_VAR 0 6
29031: PUSH
29032: LD_VAR 0 2
29036: PUSH
29037: LD_VAR 0 3
29041: PUSH
29042: LD_VAR 0 4
29046: PUSH
29047: LD_VAR 0 5
29051: PUSH
29052: EMPTY
29053: LIST
29054: LIST
29055: LIST
29056: LIST
29057: ST_TO_ADDR
// exit ;
29058: GO 29472
// end ; _chassis := AvailableChassisList ( factory ) ;
29060: LD_ADDR_VAR 0 9
29064: PUSH
29065: LD_VAR 0 1
29069: PPUSH
29070: CALL_OW 475
29074: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
29075: LD_ADDR_VAR 0 11
29079: PUSH
29080: LD_VAR 0 1
29084: PPUSH
29085: CALL_OW 476
29089: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
29090: LD_ADDR_VAR 0 12
29094: PUSH
29095: LD_VAR 0 1
29099: PPUSH
29100: CALL_OW 477
29104: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
29105: LD_ADDR_VAR 0 10
29109: PUSH
29110: LD_VAR 0 1
29114: PPUSH
29115: CALL_OW 478
29119: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
29120: LD_VAR 0 9
29124: NOT
29125: PUSH
29126: LD_VAR 0 11
29130: NOT
29131: OR
29132: PUSH
29133: LD_VAR 0 12
29137: NOT
29138: OR
29139: PUSH
29140: LD_VAR 0 10
29144: NOT
29145: OR
29146: IFFALSE 29181
// begin result := [ chassis , engine , control , weapon ] ;
29148: LD_ADDR_VAR 0 6
29152: PUSH
29153: LD_VAR 0 2
29157: PUSH
29158: LD_VAR 0 3
29162: PUSH
29163: LD_VAR 0 4
29167: PUSH
29168: LD_VAR 0 5
29172: PUSH
29173: EMPTY
29174: LIST
29175: LIST
29176: LIST
29177: LIST
29178: ST_TO_ADDR
// exit ;
29179: GO 29472
// end ; if not chassis in _chassis then
29181: LD_VAR 0 2
29185: PUSH
29186: LD_VAR 0 9
29190: IN
29191: NOT
29192: IFFALSE 29218
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
29194: LD_ADDR_VAR 0 2
29198: PUSH
29199: LD_VAR 0 9
29203: PUSH
29204: LD_INT 1
29206: PPUSH
29207: LD_VAR 0 9
29211: PPUSH
29212: CALL_OW 12
29216: ARRAY
29217: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
29218: LD_VAR 0 2
29222: PPUSH
29223: LD_VAR 0 3
29227: PPUSH
29228: CALL 29477 0 2
29232: NOT
29233: IFFALSE 29292
// repeat engine := _engine [ 1 ] ;
29235: LD_ADDR_VAR 0 3
29239: PUSH
29240: LD_VAR 0 11
29244: PUSH
29245: LD_INT 1
29247: ARRAY
29248: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
29249: LD_ADDR_VAR 0 11
29253: PUSH
29254: LD_VAR 0 11
29258: PPUSH
29259: LD_INT 1
29261: PPUSH
29262: CALL_OW 3
29266: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
29267: LD_VAR 0 2
29271: PPUSH
29272: LD_VAR 0 3
29276: PPUSH
29277: CALL 29477 0 2
29281: PUSH
29282: LD_VAR 0 11
29286: PUSH
29287: EMPTY
29288: EQUAL
29289: OR
29290: IFFALSE 29235
// if not control in _control then
29292: LD_VAR 0 4
29296: PUSH
29297: LD_VAR 0 12
29301: IN
29302: NOT
29303: IFFALSE 29329
// control := _control [ rand ( 1 , _control ) ] ;
29305: LD_ADDR_VAR 0 4
29309: PUSH
29310: LD_VAR 0 12
29314: PUSH
29315: LD_INT 1
29317: PPUSH
29318: LD_VAR 0 12
29322: PPUSH
29323: CALL_OW 12
29327: ARRAY
29328: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
29329: LD_VAR 0 2
29333: PPUSH
29334: LD_VAR 0 5
29338: PPUSH
29339: CALL 29697 0 2
29343: NOT
29344: IFFALSE 29403
// repeat weapon := _weapon [ 1 ] ;
29346: LD_ADDR_VAR 0 5
29350: PUSH
29351: LD_VAR 0 10
29355: PUSH
29356: LD_INT 1
29358: ARRAY
29359: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
29360: LD_ADDR_VAR 0 10
29364: PUSH
29365: LD_VAR 0 10
29369: PPUSH
29370: LD_INT 1
29372: PPUSH
29373: CALL_OW 3
29377: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
29378: LD_VAR 0 2
29382: PPUSH
29383: LD_VAR 0 5
29387: PPUSH
29388: CALL 29697 0 2
29392: PUSH
29393: LD_VAR 0 10
29397: PUSH
29398: EMPTY
29399: EQUAL
29400: OR
29401: IFFALSE 29346
// result := [ ] ;
29403: LD_ADDR_VAR 0 6
29407: PUSH
29408: EMPTY
29409: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29410: LD_VAR 0 1
29414: PPUSH
29415: LD_VAR 0 2
29419: PPUSH
29420: LD_VAR 0 3
29424: PPUSH
29425: LD_VAR 0 4
29429: PPUSH
29430: LD_VAR 0 5
29434: PPUSH
29435: CALL_OW 448
29439: IFFALSE 29472
// result := [ chassis , engine , control , weapon ] ;
29441: LD_ADDR_VAR 0 6
29445: PUSH
29446: LD_VAR 0 2
29450: PUSH
29451: LD_VAR 0 3
29455: PUSH
29456: LD_VAR 0 4
29460: PUSH
29461: LD_VAR 0 5
29465: PUSH
29466: EMPTY
29467: LIST
29468: LIST
29469: LIST
29470: LIST
29471: ST_TO_ADDR
// end ;
29472: LD_VAR 0 6
29476: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
29477: LD_INT 0
29479: PPUSH
// if not chassis or not engine then
29480: LD_VAR 0 1
29484: NOT
29485: PUSH
29486: LD_VAR 0 2
29490: NOT
29491: OR
29492: IFFALSE 29496
// exit ;
29494: GO 29692
// case engine of engine_solar :
29496: LD_VAR 0 2
29500: PUSH
29501: LD_INT 2
29503: DOUBLE
29504: EQUAL
29505: IFTRUE 29509
29507: GO 29547
29509: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
29510: LD_ADDR_VAR 0 3
29514: PUSH
29515: LD_INT 11
29517: PUSH
29518: LD_INT 12
29520: PUSH
29521: LD_INT 13
29523: PUSH
29524: LD_INT 14
29526: PUSH
29527: LD_INT 1
29529: PUSH
29530: LD_INT 2
29532: PUSH
29533: LD_INT 3
29535: PUSH
29536: EMPTY
29537: LIST
29538: LIST
29539: LIST
29540: LIST
29541: LIST
29542: LIST
29543: LIST
29544: ST_TO_ADDR
29545: GO 29676
29547: LD_INT 1
29549: DOUBLE
29550: EQUAL
29551: IFTRUE 29555
29553: GO 29617
29555: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
29556: LD_ADDR_VAR 0 3
29560: PUSH
29561: LD_INT 11
29563: PUSH
29564: LD_INT 12
29566: PUSH
29567: LD_INT 13
29569: PUSH
29570: LD_INT 14
29572: PUSH
29573: LD_INT 1
29575: PUSH
29576: LD_INT 2
29578: PUSH
29579: LD_INT 3
29581: PUSH
29582: LD_INT 4
29584: PUSH
29585: LD_INT 5
29587: PUSH
29588: LD_INT 21
29590: PUSH
29591: LD_INT 23
29593: PUSH
29594: LD_INT 22
29596: PUSH
29597: LD_INT 24
29599: PUSH
29600: EMPTY
29601: LIST
29602: LIST
29603: LIST
29604: LIST
29605: LIST
29606: LIST
29607: LIST
29608: LIST
29609: LIST
29610: LIST
29611: LIST
29612: LIST
29613: LIST
29614: ST_TO_ADDR
29615: GO 29676
29617: LD_INT 3
29619: DOUBLE
29620: EQUAL
29621: IFTRUE 29625
29623: GO 29675
29625: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29626: LD_ADDR_VAR 0 3
29630: PUSH
29631: LD_INT 13
29633: PUSH
29634: LD_INT 14
29636: PUSH
29637: LD_INT 2
29639: PUSH
29640: LD_INT 3
29642: PUSH
29643: LD_INT 4
29645: PUSH
29646: LD_INT 5
29648: PUSH
29649: LD_INT 21
29651: PUSH
29652: LD_INT 22
29654: PUSH
29655: LD_INT 23
29657: PUSH
29658: LD_INT 24
29660: PUSH
29661: EMPTY
29662: LIST
29663: LIST
29664: LIST
29665: LIST
29666: LIST
29667: LIST
29668: LIST
29669: LIST
29670: LIST
29671: LIST
29672: ST_TO_ADDR
29673: GO 29676
29675: POP
// result := ( chassis in result ) ;
29676: LD_ADDR_VAR 0 3
29680: PUSH
29681: LD_VAR 0 1
29685: PUSH
29686: LD_VAR 0 3
29690: IN
29691: ST_TO_ADDR
// end ;
29692: LD_VAR 0 3
29696: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
29697: LD_INT 0
29699: PPUSH
// if not chassis or not weapon then
29700: LD_VAR 0 1
29704: NOT
29705: PUSH
29706: LD_VAR 0 2
29710: NOT
29711: OR
29712: IFFALSE 29716
// exit ;
29714: GO 30776
// case weapon of us_machine_gun :
29716: LD_VAR 0 2
29720: PUSH
29721: LD_INT 2
29723: DOUBLE
29724: EQUAL
29725: IFTRUE 29729
29727: GO 29759
29729: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
29730: LD_ADDR_VAR 0 3
29734: PUSH
29735: LD_INT 1
29737: PUSH
29738: LD_INT 2
29740: PUSH
29741: LD_INT 3
29743: PUSH
29744: LD_INT 4
29746: PUSH
29747: LD_INT 5
29749: PUSH
29750: EMPTY
29751: LIST
29752: LIST
29753: LIST
29754: LIST
29755: LIST
29756: ST_TO_ADDR
29757: GO 30760
29759: LD_INT 3
29761: DOUBLE
29762: EQUAL
29763: IFTRUE 29767
29765: GO 29797
29767: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
29768: LD_ADDR_VAR 0 3
29772: PUSH
29773: LD_INT 1
29775: PUSH
29776: LD_INT 2
29778: PUSH
29779: LD_INT 3
29781: PUSH
29782: LD_INT 4
29784: PUSH
29785: LD_INT 5
29787: PUSH
29788: EMPTY
29789: LIST
29790: LIST
29791: LIST
29792: LIST
29793: LIST
29794: ST_TO_ADDR
29795: GO 30760
29797: LD_INT 11
29799: DOUBLE
29800: EQUAL
29801: IFTRUE 29805
29803: GO 29835
29805: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
29806: LD_ADDR_VAR 0 3
29810: PUSH
29811: LD_INT 1
29813: PUSH
29814: LD_INT 2
29816: PUSH
29817: LD_INT 3
29819: PUSH
29820: LD_INT 4
29822: PUSH
29823: LD_INT 5
29825: PUSH
29826: EMPTY
29827: LIST
29828: LIST
29829: LIST
29830: LIST
29831: LIST
29832: ST_TO_ADDR
29833: GO 30760
29835: LD_INT 4
29837: DOUBLE
29838: EQUAL
29839: IFTRUE 29843
29841: GO 29869
29843: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
29844: LD_ADDR_VAR 0 3
29848: PUSH
29849: LD_INT 2
29851: PUSH
29852: LD_INT 3
29854: PUSH
29855: LD_INT 4
29857: PUSH
29858: LD_INT 5
29860: PUSH
29861: EMPTY
29862: LIST
29863: LIST
29864: LIST
29865: LIST
29866: ST_TO_ADDR
29867: GO 30760
29869: LD_INT 5
29871: DOUBLE
29872: EQUAL
29873: IFTRUE 29877
29875: GO 29903
29877: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
29878: LD_ADDR_VAR 0 3
29882: PUSH
29883: LD_INT 2
29885: PUSH
29886: LD_INT 3
29888: PUSH
29889: LD_INT 4
29891: PUSH
29892: LD_INT 5
29894: PUSH
29895: EMPTY
29896: LIST
29897: LIST
29898: LIST
29899: LIST
29900: ST_TO_ADDR
29901: GO 30760
29903: LD_INT 9
29905: DOUBLE
29906: EQUAL
29907: IFTRUE 29911
29909: GO 29937
29911: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
29912: LD_ADDR_VAR 0 3
29916: PUSH
29917: LD_INT 2
29919: PUSH
29920: LD_INT 3
29922: PUSH
29923: LD_INT 4
29925: PUSH
29926: LD_INT 5
29928: PUSH
29929: EMPTY
29930: LIST
29931: LIST
29932: LIST
29933: LIST
29934: ST_TO_ADDR
29935: GO 30760
29937: LD_INT 7
29939: DOUBLE
29940: EQUAL
29941: IFTRUE 29945
29943: GO 29971
29945: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
29946: LD_ADDR_VAR 0 3
29950: PUSH
29951: LD_INT 2
29953: PUSH
29954: LD_INT 3
29956: PUSH
29957: LD_INT 4
29959: PUSH
29960: LD_INT 5
29962: PUSH
29963: EMPTY
29964: LIST
29965: LIST
29966: LIST
29967: LIST
29968: ST_TO_ADDR
29969: GO 30760
29971: LD_INT 12
29973: DOUBLE
29974: EQUAL
29975: IFTRUE 29979
29977: GO 30005
29979: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
29980: LD_ADDR_VAR 0 3
29984: PUSH
29985: LD_INT 2
29987: PUSH
29988: LD_INT 3
29990: PUSH
29991: LD_INT 4
29993: PUSH
29994: LD_INT 5
29996: PUSH
29997: EMPTY
29998: LIST
29999: LIST
30000: LIST
30001: LIST
30002: ST_TO_ADDR
30003: GO 30760
30005: LD_INT 13
30007: DOUBLE
30008: EQUAL
30009: IFTRUE 30013
30011: GO 30039
30013: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
30014: LD_ADDR_VAR 0 3
30018: PUSH
30019: LD_INT 2
30021: PUSH
30022: LD_INT 3
30024: PUSH
30025: LD_INT 4
30027: PUSH
30028: LD_INT 5
30030: PUSH
30031: EMPTY
30032: LIST
30033: LIST
30034: LIST
30035: LIST
30036: ST_TO_ADDR
30037: GO 30760
30039: LD_INT 14
30041: DOUBLE
30042: EQUAL
30043: IFTRUE 30047
30045: GO 30065
30047: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
30048: LD_ADDR_VAR 0 3
30052: PUSH
30053: LD_INT 4
30055: PUSH
30056: LD_INT 5
30058: PUSH
30059: EMPTY
30060: LIST
30061: LIST
30062: ST_TO_ADDR
30063: GO 30760
30065: LD_INT 6
30067: DOUBLE
30068: EQUAL
30069: IFTRUE 30073
30071: GO 30091
30073: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
30074: LD_ADDR_VAR 0 3
30078: PUSH
30079: LD_INT 4
30081: PUSH
30082: LD_INT 5
30084: PUSH
30085: EMPTY
30086: LIST
30087: LIST
30088: ST_TO_ADDR
30089: GO 30760
30091: LD_INT 10
30093: DOUBLE
30094: EQUAL
30095: IFTRUE 30099
30097: GO 30117
30099: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
30100: LD_ADDR_VAR 0 3
30104: PUSH
30105: LD_INT 4
30107: PUSH
30108: LD_INT 5
30110: PUSH
30111: EMPTY
30112: LIST
30113: LIST
30114: ST_TO_ADDR
30115: GO 30760
30117: LD_INT 22
30119: DOUBLE
30120: EQUAL
30121: IFTRUE 30125
30123: GO 30151
30125: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
30126: LD_ADDR_VAR 0 3
30130: PUSH
30131: LD_INT 11
30133: PUSH
30134: LD_INT 12
30136: PUSH
30137: LD_INT 13
30139: PUSH
30140: LD_INT 14
30142: PUSH
30143: EMPTY
30144: LIST
30145: LIST
30146: LIST
30147: LIST
30148: ST_TO_ADDR
30149: GO 30760
30151: LD_INT 23
30153: DOUBLE
30154: EQUAL
30155: IFTRUE 30159
30157: GO 30185
30159: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
30160: LD_ADDR_VAR 0 3
30164: PUSH
30165: LD_INT 11
30167: PUSH
30168: LD_INT 12
30170: PUSH
30171: LD_INT 13
30173: PUSH
30174: LD_INT 14
30176: PUSH
30177: EMPTY
30178: LIST
30179: LIST
30180: LIST
30181: LIST
30182: ST_TO_ADDR
30183: GO 30760
30185: LD_INT 24
30187: DOUBLE
30188: EQUAL
30189: IFTRUE 30193
30191: GO 30219
30193: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
30194: LD_ADDR_VAR 0 3
30198: PUSH
30199: LD_INT 11
30201: PUSH
30202: LD_INT 12
30204: PUSH
30205: LD_INT 13
30207: PUSH
30208: LD_INT 14
30210: PUSH
30211: EMPTY
30212: LIST
30213: LIST
30214: LIST
30215: LIST
30216: ST_TO_ADDR
30217: GO 30760
30219: LD_INT 30
30221: DOUBLE
30222: EQUAL
30223: IFTRUE 30227
30225: GO 30253
30227: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
30228: LD_ADDR_VAR 0 3
30232: PUSH
30233: LD_INT 11
30235: PUSH
30236: LD_INT 12
30238: PUSH
30239: LD_INT 13
30241: PUSH
30242: LD_INT 14
30244: PUSH
30245: EMPTY
30246: LIST
30247: LIST
30248: LIST
30249: LIST
30250: ST_TO_ADDR
30251: GO 30760
30253: LD_INT 25
30255: DOUBLE
30256: EQUAL
30257: IFTRUE 30261
30259: GO 30279
30261: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
30262: LD_ADDR_VAR 0 3
30266: PUSH
30267: LD_INT 13
30269: PUSH
30270: LD_INT 14
30272: PUSH
30273: EMPTY
30274: LIST
30275: LIST
30276: ST_TO_ADDR
30277: GO 30760
30279: LD_INT 27
30281: DOUBLE
30282: EQUAL
30283: IFTRUE 30287
30285: GO 30305
30287: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
30288: LD_ADDR_VAR 0 3
30292: PUSH
30293: LD_INT 13
30295: PUSH
30296: LD_INT 14
30298: PUSH
30299: EMPTY
30300: LIST
30301: LIST
30302: ST_TO_ADDR
30303: GO 30760
30305: LD_INT 92
30307: DOUBLE
30308: EQUAL
30309: IFTRUE 30313
30311: GO 30339
30313: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
30314: LD_ADDR_VAR 0 3
30318: PUSH
30319: LD_INT 11
30321: PUSH
30322: LD_INT 12
30324: PUSH
30325: LD_INT 13
30327: PUSH
30328: LD_INT 14
30330: PUSH
30331: EMPTY
30332: LIST
30333: LIST
30334: LIST
30335: LIST
30336: ST_TO_ADDR
30337: GO 30760
30339: LD_INT 28
30341: DOUBLE
30342: EQUAL
30343: IFTRUE 30347
30345: GO 30365
30347: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
30348: LD_ADDR_VAR 0 3
30352: PUSH
30353: LD_INT 13
30355: PUSH
30356: LD_INT 14
30358: PUSH
30359: EMPTY
30360: LIST
30361: LIST
30362: ST_TO_ADDR
30363: GO 30760
30365: LD_INT 29
30367: DOUBLE
30368: EQUAL
30369: IFTRUE 30373
30371: GO 30391
30373: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
30374: LD_ADDR_VAR 0 3
30378: PUSH
30379: LD_INT 13
30381: PUSH
30382: LD_INT 14
30384: PUSH
30385: EMPTY
30386: LIST
30387: LIST
30388: ST_TO_ADDR
30389: GO 30760
30391: LD_INT 31
30393: DOUBLE
30394: EQUAL
30395: IFTRUE 30399
30397: GO 30417
30399: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
30400: LD_ADDR_VAR 0 3
30404: PUSH
30405: LD_INT 13
30407: PUSH
30408: LD_INT 14
30410: PUSH
30411: EMPTY
30412: LIST
30413: LIST
30414: ST_TO_ADDR
30415: GO 30760
30417: LD_INT 26
30419: DOUBLE
30420: EQUAL
30421: IFTRUE 30425
30423: GO 30443
30425: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
30426: LD_ADDR_VAR 0 3
30430: PUSH
30431: LD_INT 13
30433: PUSH
30434: LD_INT 14
30436: PUSH
30437: EMPTY
30438: LIST
30439: LIST
30440: ST_TO_ADDR
30441: GO 30760
30443: LD_INT 42
30445: DOUBLE
30446: EQUAL
30447: IFTRUE 30451
30449: GO 30477
30451: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
30452: LD_ADDR_VAR 0 3
30456: PUSH
30457: LD_INT 21
30459: PUSH
30460: LD_INT 22
30462: PUSH
30463: LD_INT 23
30465: PUSH
30466: LD_INT 24
30468: PUSH
30469: EMPTY
30470: LIST
30471: LIST
30472: LIST
30473: LIST
30474: ST_TO_ADDR
30475: GO 30760
30477: LD_INT 43
30479: DOUBLE
30480: EQUAL
30481: IFTRUE 30485
30483: GO 30511
30485: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
30486: LD_ADDR_VAR 0 3
30490: PUSH
30491: LD_INT 21
30493: PUSH
30494: LD_INT 22
30496: PUSH
30497: LD_INT 23
30499: PUSH
30500: LD_INT 24
30502: PUSH
30503: EMPTY
30504: LIST
30505: LIST
30506: LIST
30507: LIST
30508: ST_TO_ADDR
30509: GO 30760
30511: LD_INT 44
30513: DOUBLE
30514: EQUAL
30515: IFTRUE 30519
30517: GO 30545
30519: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
30520: LD_ADDR_VAR 0 3
30524: PUSH
30525: LD_INT 21
30527: PUSH
30528: LD_INT 22
30530: PUSH
30531: LD_INT 23
30533: PUSH
30534: LD_INT 24
30536: PUSH
30537: EMPTY
30538: LIST
30539: LIST
30540: LIST
30541: LIST
30542: ST_TO_ADDR
30543: GO 30760
30545: LD_INT 45
30547: DOUBLE
30548: EQUAL
30549: IFTRUE 30553
30551: GO 30579
30553: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
30554: LD_ADDR_VAR 0 3
30558: PUSH
30559: LD_INT 21
30561: PUSH
30562: LD_INT 22
30564: PUSH
30565: LD_INT 23
30567: PUSH
30568: LD_INT 24
30570: PUSH
30571: EMPTY
30572: LIST
30573: LIST
30574: LIST
30575: LIST
30576: ST_TO_ADDR
30577: GO 30760
30579: LD_INT 49
30581: DOUBLE
30582: EQUAL
30583: IFTRUE 30587
30585: GO 30613
30587: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
30588: LD_ADDR_VAR 0 3
30592: PUSH
30593: LD_INT 21
30595: PUSH
30596: LD_INT 22
30598: PUSH
30599: LD_INT 23
30601: PUSH
30602: LD_INT 24
30604: PUSH
30605: EMPTY
30606: LIST
30607: LIST
30608: LIST
30609: LIST
30610: ST_TO_ADDR
30611: GO 30760
30613: LD_INT 51
30615: DOUBLE
30616: EQUAL
30617: IFTRUE 30621
30619: GO 30647
30621: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
30622: LD_ADDR_VAR 0 3
30626: PUSH
30627: LD_INT 21
30629: PUSH
30630: LD_INT 22
30632: PUSH
30633: LD_INT 23
30635: PUSH
30636: LD_INT 24
30638: PUSH
30639: EMPTY
30640: LIST
30641: LIST
30642: LIST
30643: LIST
30644: ST_TO_ADDR
30645: GO 30760
30647: LD_INT 52
30649: DOUBLE
30650: EQUAL
30651: IFTRUE 30655
30653: GO 30681
30655: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
30656: LD_ADDR_VAR 0 3
30660: PUSH
30661: LD_INT 21
30663: PUSH
30664: LD_INT 22
30666: PUSH
30667: LD_INT 23
30669: PUSH
30670: LD_INT 24
30672: PUSH
30673: EMPTY
30674: LIST
30675: LIST
30676: LIST
30677: LIST
30678: ST_TO_ADDR
30679: GO 30760
30681: LD_INT 53
30683: DOUBLE
30684: EQUAL
30685: IFTRUE 30689
30687: GO 30707
30689: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
30690: LD_ADDR_VAR 0 3
30694: PUSH
30695: LD_INT 23
30697: PUSH
30698: LD_INT 24
30700: PUSH
30701: EMPTY
30702: LIST
30703: LIST
30704: ST_TO_ADDR
30705: GO 30760
30707: LD_INT 46
30709: DOUBLE
30710: EQUAL
30711: IFTRUE 30715
30713: GO 30733
30715: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
30716: LD_ADDR_VAR 0 3
30720: PUSH
30721: LD_INT 23
30723: PUSH
30724: LD_INT 24
30726: PUSH
30727: EMPTY
30728: LIST
30729: LIST
30730: ST_TO_ADDR
30731: GO 30760
30733: LD_INT 47
30735: DOUBLE
30736: EQUAL
30737: IFTRUE 30741
30739: GO 30759
30741: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30742: LD_ADDR_VAR 0 3
30746: PUSH
30747: LD_INT 23
30749: PUSH
30750: LD_INT 24
30752: PUSH
30753: EMPTY
30754: LIST
30755: LIST
30756: ST_TO_ADDR
30757: GO 30760
30759: POP
// result := ( chassis in result ) ;
30760: LD_ADDR_VAR 0 3
30764: PUSH
30765: LD_VAR 0 1
30769: PUSH
30770: LD_VAR 0 3
30774: IN
30775: ST_TO_ADDR
// end ;
30776: LD_VAR 0 3
30780: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
30781: LD_INT 0
30783: PPUSH
30784: PPUSH
30785: PPUSH
30786: PPUSH
30787: PPUSH
30788: PPUSH
30789: PPUSH
// result := array ;
30790: LD_ADDR_VAR 0 5
30794: PUSH
30795: LD_VAR 0 1
30799: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
30800: LD_VAR 0 1
30804: NOT
30805: PUSH
30806: LD_VAR 0 2
30810: NOT
30811: OR
30812: PUSH
30813: LD_VAR 0 3
30817: NOT
30818: OR
30819: PUSH
30820: LD_VAR 0 2
30824: PUSH
30825: LD_VAR 0 1
30829: GREATER
30830: OR
30831: PUSH
30832: LD_VAR 0 3
30836: PUSH
30837: LD_VAR 0 1
30841: GREATER
30842: OR
30843: IFFALSE 30847
// exit ;
30845: GO 31143
// if direction then
30847: LD_VAR 0 4
30851: IFFALSE 30915
// begin d := 1 ;
30853: LD_ADDR_VAR 0 9
30857: PUSH
30858: LD_INT 1
30860: ST_TO_ADDR
// if i_from > i_to then
30861: LD_VAR 0 2
30865: PUSH
30866: LD_VAR 0 3
30870: GREATER
30871: IFFALSE 30897
// length := ( array - i_from ) + i_to else
30873: LD_ADDR_VAR 0 11
30877: PUSH
30878: LD_VAR 0 1
30882: PUSH
30883: LD_VAR 0 2
30887: MINUS
30888: PUSH
30889: LD_VAR 0 3
30893: PLUS
30894: ST_TO_ADDR
30895: GO 30913
// length := i_to - i_from ;
30897: LD_ADDR_VAR 0 11
30901: PUSH
30902: LD_VAR 0 3
30906: PUSH
30907: LD_VAR 0 2
30911: MINUS
30912: ST_TO_ADDR
// end else
30913: GO 30976
// begin d := - 1 ;
30915: LD_ADDR_VAR 0 9
30919: PUSH
30920: LD_INT 1
30922: NEG
30923: ST_TO_ADDR
// if i_from > i_to then
30924: LD_VAR 0 2
30928: PUSH
30929: LD_VAR 0 3
30933: GREATER
30934: IFFALSE 30954
// length := i_from - i_to else
30936: LD_ADDR_VAR 0 11
30940: PUSH
30941: LD_VAR 0 2
30945: PUSH
30946: LD_VAR 0 3
30950: MINUS
30951: ST_TO_ADDR
30952: GO 30976
// length := ( array - i_to ) + i_from ;
30954: LD_ADDR_VAR 0 11
30958: PUSH
30959: LD_VAR 0 1
30963: PUSH
30964: LD_VAR 0 3
30968: MINUS
30969: PUSH
30970: LD_VAR 0 2
30974: PLUS
30975: ST_TO_ADDR
// end ; if not length then
30976: LD_VAR 0 11
30980: NOT
30981: IFFALSE 30985
// exit ;
30983: GO 31143
// tmp := array ;
30985: LD_ADDR_VAR 0 10
30989: PUSH
30990: LD_VAR 0 1
30994: ST_TO_ADDR
// for i = 1 to length do
30995: LD_ADDR_VAR 0 6
30999: PUSH
31000: DOUBLE
31001: LD_INT 1
31003: DEC
31004: ST_TO_ADDR
31005: LD_VAR 0 11
31009: PUSH
31010: FOR_TO
31011: IFFALSE 31131
// begin for j = 1 to array do
31013: LD_ADDR_VAR 0 7
31017: PUSH
31018: DOUBLE
31019: LD_INT 1
31021: DEC
31022: ST_TO_ADDR
31023: LD_VAR 0 1
31027: PUSH
31028: FOR_TO
31029: IFFALSE 31117
// begin k := j + d ;
31031: LD_ADDR_VAR 0 8
31035: PUSH
31036: LD_VAR 0 7
31040: PUSH
31041: LD_VAR 0 9
31045: PLUS
31046: ST_TO_ADDR
// if k > array then
31047: LD_VAR 0 8
31051: PUSH
31052: LD_VAR 0 1
31056: GREATER
31057: IFFALSE 31067
// k := 1 ;
31059: LD_ADDR_VAR 0 8
31063: PUSH
31064: LD_INT 1
31066: ST_TO_ADDR
// if not k then
31067: LD_VAR 0 8
31071: NOT
31072: IFFALSE 31084
// k := array ;
31074: LD_ADDR_VAR 0 8
31078: PUSH
31079: LD_VAR 0 1
31083: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
31084: LD_ADDR_VAR 0 10
31088: PUSH
31089: LD_VAR 0 10
31093: PPUSH
31094: LD_VAR 0 8
31098: PPUSH
31099: LD_VAR 0 1
31103: PUSH
31104: LD_VAR 0 7
31108: ARRAY
31109: PPUSH
31110: CALL_OW 1
31114: ST_TO_ADDR
// end ;
31115: GO 31028
31117: POP
31118: POP
// array := tmp ;
31119: LD_ADDR_VAR 0 1
31123: PUSH
31124: LD_VAR 0 10
31128: ST_TO_ADDR
// end ;
31129: GO 31010
31131: POP
31132: POP
// result := array ;
31133: LD_ADDR_VAR 0 5
31137: PUSH
31138: LD_VAR 0 1
31142: ST_TO_ADDR
// end ;
31143: LD_VAR 0 5
31147: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
31148: LD_INT 0
31150: PPUSH
31151: PPUSH
// result := 0 ;
31152: LD_ADDR_VAR 0 3
31156: PUSH
31157: LD_INT 0
31159: ST_TO_ADDR
// if not array or not value in array then
31160: LD_VAR 0 1
31164: NOT
31165: PUSH
31166: LD_VAR 0 2
31170: PUSH
31171: LD_VAR 0 1
31175: IN
31176: NOT
31177: OR
31178: IFFALSE 31182
// exit ;
31180: GO 31236
// for i = 1 to array do
31182: LD_ADDR_VAR 0 4
31186: PUSH
31187: DOUBLE
31188: LD_INT 1
31190: DEC
31191: ST_TO_ADDR
31192: LD_VAR 0 1
31196: PUSH
31197: FOR_TO
31198: IFFALSE 31234
// if value = array [ i ] then
31200: LD_VAR 0 2
31204: PUSH
31205: LD_VAR 0 1
31209: PUSH
31210: LD_VAR 0 4
31214: ARRAY
31215: EQUAL
31216: IFFALSE 31232
// begin result := i ;
31218: LD_ADDR_VAR 0 3
31222: PUSH
31223: LD_VAR 0 4
31227: ST_TO_ADDR
// exit ;
31228: POP
31229: POP
31230: GO 31236
// end ;
31232: GO 31197
31234: POP
31235: POP
// end ;
31236: LD_VAR 0 3
31240: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
31241: LD_INT 0
31243: PPUSH
// vc_chassis := chassis ;
31244: LD_ADDR_OWVAR 37
31248: PUSH
31249: LD_VAR 0 1
31253: ST_TO_ADDR
// vc_engine := engine ;
31254: LD_ADDR_OWVAR 39
31258: PUSH
31259: LD_VAR 0 2
31263: ST_TO_ADDR
// vc_control := control ;
31264: LD_ADDR_OWVAR 38
31268: PUSH
31269: LD_VAR 0 3
31273: ST_TO_ADDR
// vc_weapon := weapon ;
31274: LD_ADDR_OWVAR 40
31278: PUSH
31279: LD_VAR 0 4
31283: ST_TO_ADDR
// vc_fuel_battery := fuel ;
31284: LD_ADDR_OWVAR 41
31288: PUSH
31289: LD_VAR 0 5
31293: ST_TO_ADDR
// end ;
31294: LD_VAR 0 6
31298: RET
// export function WantPlant ( unit ) ; var task ; begin
31299: LD_INT 0
31301: PPUSH
31302: PPUSH
// result := false ;
31303: LD_ADDR_VAR 0 2
31307: PUSH
31308: LD_INT 0
31310: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
31311: LD_ADDR_VAR 0 3
31315: PUSH
31316: LD_VAR 0 1
31320: PPUSH
31321: CALL_OW 437
31325: ST_TO_ADDR
// if task then
31326: LD_VAR 0 3
31330: IFFALSE 31358
// if task [ 1 ] [ 1 ] = p then
31332: LD_VAR 0 3
31336: PUSH
31337: LD_INT 1
31339: ARRAY
31340: PUSH
31341: LD_INT 1
31343: ARRAY
31344: PUSH
31345: LD_STRING p
31347: EQUAL
31348: IFFALSE 31358
// result := true ;
31350: LD_ADDR_VAR 0 2
31354: PUSH
31355: LD_INT 1
31357: ST_TO_ADDR
// end ;
31358: LD_VAR 0 2
31362: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
31363: LD_INT 0
31365: PPUSH
31366: PPUSH
31367: PPUSH
31368: PPUSH
// if pos < 1 then
31369: LD_VAR 0 2
31373: PUSH
31374: LD_INT 1
31376: LESS
31377: IFFALSE 31381
// exit ;
31379: GO 31684
// if pos = 1 then
31381: LD_VAR 0 2
31385: PUSH
31386: LD_INT 1
31388: EQUAL
31389: IFFALSE 31422
// result := Replace ( arr , pos [ 1 ] , value ) else
31391: LD_ADDR_VAR 0 4
31395: PUSH
31396: LD_VAR 0 1
31400: PPUSH
31401: LD_VAR 0 2
31405: PUSH
31406: LD_INT 1
31408: ARRAY
31409: PPUSH
31410: LD_VAR 0 3
31414: PPUSH
31415: CALL_OW 1
31419: ST_TO_ADDR
31420: GO 31684
// begin tmp := arr ;
31422: LD_ADDR_VAR 0 6
31426: PUSH
31427: LD_VAR 0 1
31431: ST_TO_ADDR
// s_arr := [ tmp ] ;
31432: LD_ADDR_VAR 0 7
31436: PUSH
31437: LD_VAR 0 6
31441: PUSH
31442: EMPTY
31443: LIST
31444: ST_TO_ADDR
// for i = 1 to pos - 1 do
31445: LD_ADDR_VAR 0 5
31449: PUSH
31450: DOUBLE
31451: LD_INT 1
31453: DEC
31454: ST_TO_ADDR
31455: LD_VAR 0 2
31459: PUSH
31460: LD_INT 1
31462: MINUS
31463: PUSH
31464: FOR_TO
31465: IFFALSE 31510
// begin tmp := tmp [ pos [ i ] ] ;
31467: LD_ADDR_VAR 0 6
31471: PUSH
31472: LD_VAR 0 6
31476: PUSH
31477: LD_VAR 0 2
31481: PUSH
31482: LD_VAR 0 5
31486: ARRAY
31487: ARRAY
31488: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
31489: LD_ADDR_VAR 0 7
31493: PUSH
31494: LD_VAR 0 7
31498: PUSH
31499: LD_VAR 0 6
31503: PUSH
31504: EMPTY
31505: LIST
31506: ADD
31507: ST_TO_ADDR
// end ;
31508: GO 31464
31510: POP
31511: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
31512: LD_ADDR_VAR 0 6
31516: PUSH
31517: LD_VAR 0 6
31521: PPUSH
31522: LD_VAR 0 2
31526: PUSH
31527: LD_VAR 0 2
31531: ARRAY
31532: PPUSH
31533: LD_VAR 0 3
31537: PPUSH
31538: CALL_OW 1
31542: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
31543: LD_ADDR_VAR 0 7
31547: PUSH
31548: LD_VAR 0 7
31552: PPUSH
31553: LD_VAR 0 7
31557: PPUSH
31558: LD_VAR 0 6
31562: PPUSH
31563: CALL_OW 1
31567: ST_TO_ADDR
// for i = s_arr downto 2 do
31568: LD_ADDR_VAR 0 5
31572: PUSH
31573: DOUBLE
31574: LD_VAR 0 7
31578: INC
31579: ST_TO_ADDR
31580: LD_INT 2
31582: PUSH
31583: FOR_DOWNTO
31584: IFFALSE 31668
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
31586: LD_ADDR_VAR 0 6
31590: PUSH
31591: LD_VAR 0 7
31595: PUSH
31596: LD_VAR 0 5
31600: PUSH
31601: LD_INT 1
31603: MINUS
31604: ARRAY
31605: PPUSH
31606: LD_VAR 0 2
31610: PUSH
31611: LD_VAR 0 5
31615: PUSH
31616: LD_INT 1
31618: MINUS
31619: ARRAY
31620: PPUSH
31621: LD_VAR 0 7
31625: PUSH
31626: LD_VAR 0 5
31630: ARRAY
31631: PPUSH
31632: CALL_OW 1
31636: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
31637: LD_ADDR_VAR 0 7
31641: PUSH
31642: LD_VAR 0 7
31646: PPUSH
31647: LD_VAR 0 5
31651: PUSH
31652: LD_INT 1
31654: MINUS
31655: PPUSH
31656: LD_VAR 0 6
31660: PPUSH
31661: CALL_OW 1
31665: ST_TO_ADDR
// end ;
31666: GO 31583
31668: POP
31669: POP
// result := s_arr [ 1 ] ;
31670: LD_ADDR_VAR 0 4
31674: PUSH
31675: LD_VAR 0 7
31679: PUSH
31680: LD_INT 1
31682: ARRAY
31683: ST_TO_ADDR
// end ; end ;
31684: LD_VAR 0 4
31688: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
31689: LD_INT 0
31691: PPUSH
31692: PPUSH
// if not list then
31693: LD_VAR 0 1
31697: NOT
31698: IFFALSE 31702
// exit ;
31700: GO 31793
// i := list [ pos1 ] ;
31702: LD_ADDR_VAR 0 5
31706: PUSH
31707: LD_VAR 0 1
31711: PUSH
31712: LD_VAR 0 2
31716: ARRAY
31717: ST_TO_ADDR
// if not i then
31718: LD_VAR 0 5
31722: NOT
31723: IFFALSE 31727
// exit ;
31725: GO 31793
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
31727: LD_ADDR_VAR 0 1
31731: PUSH
31732: LD_VAR 0 1
31736: PPUSH
31737: LD_VAR 0 2
31741: PPUSH
31742: LD_VAR 0 1
31746: PUSH
31747: LD_VAR 0 3
31751: ARRAY
31752: PPUSH
31753: CALL_OW 1
31757: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
31758: LD_ADDR_VAR 0 1
31762: PUSH
31763: LD_VAR 0 1
31767: PPUSH
31768: LD_VAR 0 3
31772: PPUSH
31773: LD_VAR 0 5
31777: PPUSH
31778: CALL_OW 1
31782: ST_TO_ADDR
// result := list ;
31783: LD_ADDR_VAR 0 4
31787: PUSH
31788: LD_VAR 0 1
31792: ST_TO_ADDR
// end ;
31793: LD_VAR 0 4
31797: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
31798: LD_INT 0
31800: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
31801: LD_ADDR_VAR 0 5
31805: PUSH
31806: LD_VAR 0 1
31810: PPUSH
31811: CALL_OW 250
31815: PPUSH
31816: LD_VAR 0 1
31820: PPUSH
31821: CALL_OW 251
31825: PPUSH
31826: LD_VAR 0 2
31830: PPUSH
31831: LD_VAR 0 3
31835: PPUSH
31836: LD_VAR 0 4
31840: PPUSH
31841: CALL 32219 0 5
31845: ST_TO_ADDR
// end ;
31846: LD_VAR 0 5
31850: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
31851: LD_INT 0
31853: PPUSH
31854: PPUSH
31855: PPUSH
31856: PPUSH
// if not list or not unit then
31857: LD_VAR 0 2
31861: NOT
31862: PUSH
31863: LD_VAR 0 1
31867: NOT
31868: OR
31869: IFFALSE 31873
// exit ;
31871: GO 32214
// result := [ ] ;
31873: LD_ADDR_VAR 0 5
31877: PUSH
31878: EMPTY
31879: ST_TO_ADDR
// for i in list do
31880: LD_ADDR_VAR 0 6
31884: PUSH
31885: LD_VAR 0 2
31889: PUSH
31890: FOR_IN
31891: IFFALSE 32109
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
31893: LD_ADDR_VAR 0 8
31897: PUSH
31898: LD_VAR 0 1
31902: PPUSH
31903: LD_VAR 0 6
31907: PUSH
31908: LD_INT 1
31910: ARRAY
31911: PPUSH
31912: LD_VAR 0 6
31916: PUSH
31917: LD_INT 2
31919: ARRAY
31920: PPUSH
31921: CALL_OW 297
31925: ST_TO_ADDR
// if not Count ( result ) then
31926: LD_VAR 0 5
31930: PPUSH
31931: CALL 28503 0 1
31935: NOT
31936: IFFALSE 31969
// begin result := Join ( result , [ i , tmp ] ) ;
31938: LD_ADDR_VAR 0 5
31942: PUSH
31943: LD_VAR 0 5
31947: PPUSH
31948: LD_VAR 0 6
31952: PUSH
31953: LD_VAR 0 8
31957: PUSH
31958: EMPTY
31959: LIST
31960: LIST
31961: PPUSH
31962: CALL 64103 0 2
31966: ST_TO_ADDR
// continue ;
31967: GO 31890
// end ; if result [ result ] [ 2 ] <= tmp then
31969: LD_VAR 0 5
31973: PUSH
31974: LD_VAR 0 5
31978: ARRAY
31979: PUSH
31980: LD_INT 2
31982: ARRAY
31983: PUSH
31984: LD_VAR 0 8
31988: LESSEQUAL
31989: IFFALSE 32022
// result := Join ( result , [ i , tmp ] ) else
31991: LD_ADDR_VAR 0 5
31995: PUSH
31996: LD_VAR 0 5
32000: PPUSH
32001: LD_VAR 0 6
32005: PUSH
32006: LD_VAR 0 8
32010: PUSH
32011: EMPTY
32012: LIST
32013: LIST
32014: PPUSH
32015: CALL 64103 0 2
32019: ST_TO_ADDR
32020: GO 32107
// begin for j := 1 to Count ( result ) do
32022: LD_ADDR_VAR 0 7
32026: PUSH
32027: DOUBLE
32028: LD_INT 1
32030: DEC
32031: ST_TO_ADDR
32032: LD_VAR 0 5
32036: PPUSH
32037: CALL 28503 0 1
32041: PUSH
32042: FOR_TO
32043: IFFALSE 32105
// begin if tmp < result [ j ] [ 2 ] then
32045: LD_VAR 0 8
32049: PUSH
32050: LD_VAR 0 5
32054: PUSH
32055: LD_VAR 0 7
32059: ARRAY
32060: PUSH
32061: LD_INT 2
32063: ARRAY
32064: LESS
32065: IFFALSE 32103
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32067: LD_ADDR_VAR 0 5
32071: PUSH
32072: LD_VAR 0 5
32076: PPUSH
32077: LD_VAR 0 7
32081: PPUSH
32082: LD_VAR 0 6
32086: PUSH
32087: LD_VAR 0 8
32091: PUSH
32092: EMPTY
32093: LIST
32094: LIST
32095: PPUSH
32096: CALL_OW 2
32100: ST_TO_ADDR
// break ;
32101: GO 32105
// end ; end ;
32103: GO 32042
32105: POP
32106: POP
// end ; end ;
32107: GO 31890
32109: POP
32110: POP
// if result and not asc then
32111: LD_VAR 0 5
32115: PUSH
32116: LD_VAR 0 3
32120: NOT
32121: AND
32122: IFFALSE 32139
// result := ReverseArray ( result ) ;
32124: LD_ADDR_VAR 0 5
32128: PUSH
32129: LD_VAR 0 5
32133: PPUSH
32134: CALL 59379 0 1
32138: ST_TO_ADDR
// tmp := [ ] ;
32139: LD_ADDR_VAR 0 8
32143: PUSH
32144: EMPTY
32145: ST_TO_ADDR
// if mode then
32146: LD_VAR 0 4
32150: IFFALSE 32214
// begin for i := 1 to result do
32152: LD_ADDR_VAR 0 6
32156: PUSH
32157: DOUBLE
32158: LD_INT 1
32160: DEC
32161: ST_TO_ADDR
32162: LD_VAR 0 5
32166: PUSH
32167: FOR_TO
32168: IFFALSE 32202
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
32170: LD_ADDR_VAR 0 8
32174: PUSH
32175: LD_VAR 0 8
32179: PPUSH
32180: LD_VAR 0 5
32184: PUSH
32185: LD_VAR 0 6
32189: ARRAY
32190: PUSH
32191: LD_INT 1
32193: ARRAY
32194: PPUSH
32195: CALL 64103 0 2
32199: ST_TO_ADDR
32200: GO 32167
32202: POP
32203: POP
// result := tmp ;
32204: LD_ADDR_VAR 0 5
32208: PUSH
32209: LD_VAR 0 8
32213: ST_TO_ADDR
// end ; end ;
32214: LD_VAR 0 5
32218: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
32219: LD_INT 0
32221: PPUSH
32222: PPUSH
32223: PPUSH
32224: PPUSH
// if not list then
32225: LD_VAR 0 3
32229: NOT
32230: IFFALSE 32234
// exit ;
32232: GO 32622
// result := [ ] ;
32234: LD_ADDR_VAR 0 6
32238: PUSH
32239: EMPTY
32240: ST_TO_ADDR
// for i in list do
32241: LD_ADDR_VAR 0 7
32245: PUSH
32246: LD_VAR 0 3
32250: PUSH
32251: FOR_IN
32252: IFFALSE 32454
// begin tmp := GetDistUnitXY ( i , x , y ) ;
32254: LD_ADDR_VAR 0 9
32258: PUSH
32259: LD_VAR 0 7
32263: PPUSH
32264: LD_VAR 0 1
32268: PPUSH
32269: LD_VAR 0 2
32273: PPUSH
32274: CALL_OW 297
32278: ST_TO_ADDR
// if not result then
32279: LD_VAR 0 6
32283: NOT
32284: IFFALSE 32310
// result := [ [ i , tmp ] ] else
32286: LD_ADDR_VAR 0 6
32290: PUSH
32291: LD_VAR 0 7
32295: PUSH
32296: LD_VAR 0 9
32300: PUSH
32301: EMPTY
32302: LIST
32303: LIST
32304: PUSH
32305: EMPTY
32306: LIST
32307: ST_TO_ADDR
32308: GO 32452
// begin if result [ result ] [ 2 ] < tmp then
32310: LD_VAR 0 6
32314: PUSH
32315: LD_VAR 0 6
32319: ARRAY
32320: PUSH
32321: LD_INT 2
32323: ARRAY
32324: PUSH
32325: LD_VAR 0 9
32329: LESS
32330: IFFALSE 32372
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
32332: LD_ADDR_VAR 0 6
32336: PUSH
32337: LD_VAR 0 6
32341: PPUSH
32342: LD_VAR 0 6
32346: PUSH
32347: LD_INT 1
32349: PLUS
32350: PPUSH
32351: LD_VAR 0 7
32355: PUSH
32356: LD_VAR 0 9
32360: PUSH
32361: EMPTY
32362: LIST
32363: LIST
32364: PPUSH
32365: CALL_OW 2
32369: ST_TO_ADDR
32370: GO 32452
// for j = 1 to result do
32372: LD_ADDR_VAR 0 8
32376: PUSH
32377: DOUBLE
32378: LD_INT 1
32380: DEC
32381: ST_TO_ADDR
32382: LD_VAR 0 6
32386: PUSH
32387: FOR_TO
32388: IFFALSE 32450
// begin if tmp < result [ j ] [ 2 ] then
32390: LD_VAR 0 9
32394: PUSH
32395: LD_VAR 0 6
32399: PUSH
32400: LD_VAR 0 8
32404: ARRAY
32405: PUSH
32406: LD_INT 2
32408: ARRAY
32409: LESS
32410: IFFALSE 32448
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32412: LD_ADDR_VAR 0 6
32416: PUSH
32417: LD_VAR 0 6
32421: PPUSH
32422: LD_VAR 0 8
32426: PPUSH
32427: LD_VAR 0 7
32431: PUSH
32432: LD_VAR 0 9
32436: PUSH
32437: EMPTY
32438: LIST
32439: LIST
32440: PPUSH
32441: CALL_OW 2
32445: ST_TO_ADDR
// break ;
32446: GO 32450
// end ; end ;
32448: GO 32387
32450: POP
32451: POP
// end ; end ;
32452: GO 32251
32454: POP
32455: POP
// if result and not asc then
32456: LD_VAR 0 6
32460: PUSH
32461: LD_VAR 0 4
32465: NOT
32466: AND
32467: IFFALSE 32542
// begin tmp := result ;
32469: LD_ADDR_VAR 0 9
32473: PUSH
32474: LD_VAR 0 6
32478: ST_TO_ADDR
// for i = tmp downto 1 do
32479: LD_ADDR_VAR 0 7
32483: PUSH
32484: DOUBLE
32485: LD_VAR 0 9
32489: INC
32490: ST_TO_ADDR
32491: LD_INT 1
32493: PUSH
32494: FOR_DOWNTO
32495: IFFALSE 32540
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
32497: LD_ADDR_VAR 0 6
32501: PUSH
32502: LD_VAR 0 6
32506: PPUSH
32507: LD_VAR 0 9
32511: PUSH
32512: LD_VAR 0 7
32516: MINUS
32517: PUSH
32518: LD_INT 1
32520: PLUS
32521: PPUSH
32522: LD_VAR 0 9
32526: PUSH
32527: LD_VAR 0 7
32531: ARRAY
32532: PPUSH
32533: CALL_OW 1
32537: ST_TO_ADDR
32538: GO 32494
32540: POP
32541: POP
// end ; tmp := [ ] ;
32542: LD_ADDR_VAR 0 9
32546: PUSH
32547: EMPTY
32548: ST_TO_ADDR
// if mode then
32549: LD_VAR 0 5
32553: IFFALSE 32622
// begin for i = 1 to result do
32555: LD_ADDR_VAR 0 7
32559: PUSH
32560: DOUBLE
32561: LD_INT 1
32563: DEC
32564: ST_TO_ADDR
32565: LD_VAR 0 6
32569: PUSH
32570: FOR_TO
32571: IFFALSE 32610
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
32573: LD_ADDR_VAR 0 9
32577: PUSH
32578: LD_VAR 0 9
32582: PPUSH
32583: LD_VAR 0 7
32587: PPUSH
32588: LD_VAR 0 6
32592: PUSH
32593: LD_VAR 0 7
32597: ARRAY
32598: PUSH
32599: LD_INT 1
32601: ARRAY
32602: PPUSH
32603: CALL_OW 1
32607: ST_TO_ADDR
32608: GO 32570
32610: POP
32611: POP
// result := tmp ;
32612: LD_ADDR_VAR 0 6
32616: PUSH
32617: LD_VAR 0 9
32621: ST_TO_ADDR
// end ; end ;
32622: LD_VAR 0 6
32626: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
32627: LD_INT 0
32629: PPUSH
32630: PPUSH
32631: PPUSH
32632: PPUSH
32633: PPUSH
32634: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
32635: LD_ADDR_VAR 0 5
32639: PUSH
32640: LD_INT 0
32642: PUSH
32643: LD_INT 0
32645: PUSH
32646: LD_INT 0
32648: PUSH
32649: EMPTY
32650: PUSH
32651: EMPTY
32652: LIST
32653: LIST
32654: LIST
32655: LIST
32656: ST_TO_ADDR
// if not x or not y then
32657: LD_VAR 0 2
32661: NOT
32662: PUSH
32663: LD_VAR 0 3
32667: NOT
32668: OR
32669: IFFALSE 32673
// exit ;
32671: GO 34323
// if not range then
32673: LD_VAR 0 4
32677: NOT
32678: IFFALSE 32688
// range := 10 ;
32680: LD_ADDR_VAR 0 4
32684: PUSH
32685: LD_INT 10
32687: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32688: LD_ADDR_VAR 0 8
32692: PUSH
32693: LD_INT 81
32695: PUSH
32696: LD_VAR 0 1
32700: PUSH
32701: EMPTY
32702: LIST
32703: LIST
32704: PUSH
32705: LD_INT 92
32707: PUSH
32708: LD_VAR 0 2
32712: PUSH
32713: LD_VAR 0 3
32717: PUSH
32718: LD_VAR 0 4
32722: PUSH
32723: EMPTY
32724: LIST
32725: LIST
32726: LIST
32727: LIST
32728: PUSH
32729: LD_INT 3
32731: PUSH
32732: LD_INT 21
32734: PUSH
32735: LD_INT 3
32737: PUSH
32738: EMPTY
32739: LIST
32740: LIST
32741: PUSH
32742: EMPTY
32743: LIST
32744: LIST
32745: PUSH
32746: EMPTY
32747: LIST
32748: LIST
32749: LIST
32750: PPUSH
32751: CALL_OW 69
32755: ST_TO_ADDR
// if not tmp then
32756: LD_VAR 0 8
32760: NOT
32761: IFFALSE 32765
// exit ;
32763: GO 34323
// for i in tmp do
32765: LD_ADDR_VAR 0 6
32769: PUSH
32770: LD_VAR 0 8
32774: PUSH
32775: FOR_IN
32776: IFFALSE 34298
// begin points := [ 0 , 0 , 0 ] ;
32778: LD_ADDR_VAR 0 9
32782: PUSH
32783: LD_INT 0
32785: PUSH
32786: LD_INT 0
32788: PUSH
32789: LD_INT 0
32791: PUSH
32792: EMPTY
32793: LIST
32794: LIST
32795: LIST
32796: ST_TO_ADDR
// bpoints := 1 ;
32797: LD_ADDR_VAR 0 10
32801: PUSH
32802: LD_INT 1
32804: ST_TO_ADDR
// case GetType ( i ) of unit_human :
32805: LD_VAR 0 6
32809: PPUSH
32810: CALL_OW 247
32814: PUSH
32815: LD_INT 1
32817: DOUBLE
32818: EQUAL
32819: IFTRUE 32823
32821: GO 33401
32823: POP
// begin if GetClass ( i ) = 1 then
32824: LD_VAR 0 6
32828: PPUSH
32829: CALL_OW 257
32833: PUSH
32834: LD_INT 1
32836: EQUAL
32837: IFFALSE 32858
// points := [ 10 , 5 , 3 ] ;
32839: LD_ADDR_VAR 0 9
32843: PUSH
32844: LD_INT 10
32846: PUSH
32847: LD_INT 5
32849: PUSH
32850: LD_INT 3
32852: PUSH
32853: EMPTY
32854: LIST
32855: LIST
32856: LIST
32857: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
32858: LD_VAR 0 6
32862: PPUSH
32863: CALL_OW 257
32867: PUSH
32868: LD_INT 2
32870: PUSH
32871: LD_INT 3
32873: PUSH
32874: LD_INT 4
32876: PUSH
32877: EMPTY
32878: LIST
32879: LIST
32880: LIST
32881: IN
32882: IFFALSE 32903
// points := [ 3 , 2 , 1 ] ;
32884: LD_ADDR_VAR 0 9
32888: PUSH
32889: LD_INT 3
32891: PUSH
32892: LD_INT 2
32894: PUSH
32895: LD_INT 1
32897: PUSH
32898: EMPTY
32899: LIST
32900: LIST
32901: LIST
32902: ST_TO_ADDR
// if GetClass ( i ) = 5 then
32903: LD_VAR 0 6
32907: PPUSH
32908: CALL_OW 257
32912: PUSH
32913: LD_INT 5
32915: EQUAL
32916: IFFALSE 32937
// points := [ 130 , 5 , 2 ] ;
32918: LD_ADDR_VAR 0 9
32922: PUSH
32923: LD_INT 130
32925: PUSH
32926: LD_INT 5
32928: PUSH
32929: LD_INT 2
32931: PUSH
32932: EMPTY
32933: LIST
32934: LIST
32935: LIST
32936: ST_TO_ADDR
// if GetClass ( i ) = 8 then
32937: LD_VAR 0 6
32941: PPUSH
32942: CALL_OW 257
32946: PUSH
32947: LD_INT 8
32949: EQUAL
32950: IFFALSE 32971
// points := [ 35 , 35 , 30 ] ;
32952: LD_ADDR_VAR 0 9
32956: PUSH
32957: LD_INT 35
32959: PUSH
32960: LD_INT 35
32962: PUSH
32963: LD_INT 30
32965: PUSH
32966: EMPTY
32967: LIST
32968: LIST
32969: LIST
32970: ST_TO_ADDR
// if GetClass ( i ) = 9 then
32971: LD_VAR 0 6
32975: PPUSH
32976: CALL_OW 257
32980: PUSH
32981: LD_INT 9
32983: EQUAL
32984: IFFALSE 33005
// points := [ 20 , 55 , 40 ] ;
32986: LD_ADDR_VAR 0 9
32990: PUSH
32991: LD_INT 20
32993: PUSH
32994: LD_INT 55
32996: PUSH
32997: LD_INT 40
32999: PUSH
33000: EMPTY
33001: LIST
33002: LIST
33003: LIST
33004: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
33005: LD_VAR 0 6
33009: PPUSH
33010: CALL_OW 257
33014: PUSH
33015: LD_INT 12
33017: PUSH
33018: LD_INT 16
33020: PUSH
33021: EMPTY
33022: LIST
33023: LIST
33024: IN
33025: IFFALSE 33046
// points := [ 5 , 3 , 2 ] ;
33027: LD_ADDR_VAR 0 9
33031: PUSH
33032: LD_INT 5
33034: PUSH
33035: LD_INT 3
33037: PUSH
33038: LD_INT 2
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: LIST
33045: ST_TO_ADDR
// if GetClass ( i ) = 17 then
33046: LD_VAR 0 6
33050: PPUSH
33051: CALL_OW 257
33055: PUSH
33056: LD_INT 17
33058: EQUAL
33059: IFFALSE 33080
// points := [ 100 , 50 , 75 ] ;
33061: LD_ADDR_VAR 0 9
33065: PUSH
33066: LD_INT 100
33068: PUSH
33069: LD_INT 50
33071: PUSH
33072: LD_INT 75
33074: PUSH
33075: EMPTY
33076: LIST
33077: LIST
33078: LIST
33079: ST_TO_ADDR
// if GetClass ( i ) = 15 then
33080: LD_VAR 0 6
33084: PPUSH
33085: CALL_OW 257
33089: PUSH
33090: LD_INT 15
33092: EQUAL
33093: IFFALSE 33114
// points := [ 10 , 5 , 3 ] ;
33095: LD_ADDR_VAR 0 9
33099: PUSH
33100: LD_INT 10
33102: PUSH
33103: LD_INT 5
33105: PUSH
33106: LD_INT 3
33108: PUSH
33109: EMPTY
33110: LIST
33111: LIST
33112: LIST
33113: ST_TO_ADDR
// if GetClass ( i ) = 14 then
33114: LD_VAR 0 6
33118: PPUSH
33119: CALL_OW 257
33123: PUSH
33124: LD_INT 14
33126: EQUAL
33127: IFFALSE 33148
// points := [ 10 , 0 , 0 ] ;
33129: LD_ADDR_VAR 0 9
33133: PUSH
33134: LD_INT 10
33136: PUSH
33137: LD_INT 0
33139: PUSH
33140: LD_INT 0
33142: PUSH
33143: EMPTY
33144: LIST
33145: LIST
33146: LIST
33147: ST_TO_ADDR
// if GetClass ( i ) = 11 then
33148: LD_VAR 0 6
33152: PPUSH
33153: CALL_OW 257
33157: PUSH
33158: LD_INT 11
33160: EQUAL
33161: IFFALSE 33182
// points := [ 30 , 10 , 5 ] ;
33163: LD_ADDR_VAR 0 9
33167: PUSH
33168: LD_INT 30
33170: PUSH
33171: LD_INT 10
33173: PUSH
33174: LD_INT 5
33176: PUSH
33177: EMPTY
33178: LIST
33179: LIST
33180: LIST
33181: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
33182: LD_VAR 0 1
33186: PPUSH
33187: LD_INT 5
33189: PPUSH
33190: CALL_OW 321
33194: PUSH
33195: LD_INT 2
33197: EQUAL
33198: IFFALSE 33215
// bpoints := bpoints * 1.8 ;
33200: LD_ADDR_VAR 0 10
33204: PUSH
33205: LD_VAR 0 10
33209: PUSH
33210: LD_REAL  1.80000000000000E+0000
33213: MUL
33214: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
33215: LD_VAR 0 6
33219: PPUSH
33220: CALL_OW 257
33224: PUSH
33225: LD_INT 1
33227: PUSH
33228: LD_INT 2
33230: PUSH
33231: LD_INT 3
33233: PUSH
33234: LD_INT 4
33236: PUSH
33237: EMPTY
33238: LIST
33239: LIST
33240: LIST
33241: LIST
33242: IN
33243: PUSH
33244: LD_VAR 0 1
33248: PPUSH
33249: LD_INT 51
33251: PPUSH
33252: CALL_OW 321
33256: PUSH
33257: LD_INT 2
33259: EQUAL
33260: AND
33261: IFFALSE 33278
// bpoints := bpoints * 1.2 ;
33263: LD_ADDR_VAR 0 10
33267: PUSH
33268: LD_VAR 0 10
33272: PUSH
33273: LD_REAL  1.20000000000000E+0000
33276: MUL
33277: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
33278: LD_VAR 0 6
33282: PPUSH
33283: CALL_OW 257
33287: PUSH
33288: LD_INT 5
33290: PUSH
33291: LD_INT 7
33293: PUSH
33294: LD_INT 9
33296: PUSH
33297: EMPTY
33298: LIST
33299: LIST
33300: LIST
33301: IN
33302: PUSH
33303: LD_VAR 0 1
33307: PPUSH
33308: LD_INT 52
33310: PPUSH
33311: CALL_OW 321
33315: PUSH
33316: LD_INT 2
33318: EQUAL
33319: AND
33320: IFFALSE 33337
// bpoints := bpoints * 1.5 ;
33322: LD_ADDR_VAR 0 10
33326: PUSH
33327: LD_VAR 0 10
33331: PUSH
33332: LD_REAL  1.50000000000000E+0000
33335: MUL
33336: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
33337: LD_VAR 0 1
33341: PPUSH
33342: LD_INT 66
33344: PPUSH
33345: CALL_OW 321
33349: PUSH
33350: LD_INT 2
33352: EQUAL
33353: IFFALSE 33370
// bpoints := bpoints * 1.1 ;
33355: LD_ADDR_VAR 0 10
33359: PUSH
33360: LD_VAR 0 10
33364: PUSH
33365: LD_REAL  1.10000000000000E+0000
33368: MUL
33369: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
33370: LD_ADDR_VAR 0 10
33374: PUSH
33375: LD_VAR 0 10
33379: PUSH
33380: LD_VAR 0 6
33384: PPUSH
33385: LD_INT 1
33387: PPUSH
33388: CALL_OW 259
33392: PUSH
33393: LD_REAL  1.15000000000000E+0000
33396: MUL
33397: MUL
33398: ST_TO_ADDR
// end ; unit_vehicle :
33399: GO 34227
33401: LD_INT 2
33403: DOUBLE
33404: EQUAL
33405: IFTRUE 33409
33407: GO 34215
33409: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
33410: LD_VAR 0 6
33414: PPUSH
33415: CALL_OW 264
33419: PUSH
33420: LD_INT 2
33422: PUSH
33423: LD_INT 42
33425: PUSH
33426: LD_INT 24
33428: PUSH
33429: EMPTY
33430: LIST
33431: LIST
33432: LIST
33433: IN
33434: IFFALSE 33455
// points := [ 25 , 5 , 3 ] ;
33436: LD_ADDR_VAR 0 9
33440: PUSH
33441: LD_INT 25
33443: PUSH
33444: LD_INT 5
33446: PUSH
33447: LD_INT 3
33449: PUSH
33450: EMPTY
33451: LIST
33452: LIST
33453: LIST
33454: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
33455: LD_VAR 0 6
33459: PPUSH
33460: CALL_OW 264
33464: PUSH
33465: LD_INT 4
33467: PUSH
33468: LD_INT 43
33470: PUSH
33471: LD_INT 25
33473: PUSH
33474: EMPTY
33475: LIST
33476: LIST
33477: LIST
33478: IN
33479: IFFALSE 33500
// points := [ 40 , 15 , 5 ] ;
33481: LD_ADDR_VAR 0 9
33485: PUSH
33486: LD_INT 40
33488: PUSH
33489: LD_INT 15
33491: PUSH
33492: LD_INT 5
33494: PUSH
33495: EMPTY
33496: LIST
33497: LIST
33498: LIST
33499: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
33500: LD_VAR 0 6
33504: PPUSH
33505: CALL_OW 264
33509: PUSH
33510: LD_INT 3
33512: PUSH
33513: LD_INT 23
33515: PUSH
33516: EMPTY
33517: LIST
33518: LIST
33519: IN
33520: IFFALSE 33541
// points := [ 7 , 25 , 8 ] ;
33522: LD_ADDR_VAR 0 9
33526: PUSH
33527: LD_INT 7
33529: PUSH
33530: LD_INT 25
33532: PUSH
33533: LD_INT 8
33535: PUSH
33536: EMPTY
33537: LIST
33538: LIST
33539: LIST
33540: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
33541: LD_VAR 0 6
33545: PPUSH
33546: CALL_OW 264
33550: PUSH
33551: LD_INT 5
33553: PUSH
33554: LD_INT 27
33556: PUSH
33557: LD_INT 44
33559: PUSH
33560: EMPTY
33561: LIST
33562: LIST
33563: LIST
33564: IN
33565: IFFALSE 33586
// points := [ 14 , 50 , 16 ] ;
33567: LD_ADDR_VAR 0 9
33571: PUSH
33572: LD_INT 14
33574: PUSH
33575: LD_INT 50
33577: PUSH
33578: LD_INT 16
33580: PUSH
33581: EMPTY
33582: LIST
33583: LIST
33584: LIST
33585: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
33586: LD_VAR 0 6
33590: PPUSH
33591: CALL_OW 264
33595: PUSH
33596: LD_INT 6
33598: PUSH
33599: LD_INT 46
33601: PUSH
33602: EMPTY
33603: LIST
33604: LIST
33605: IN
33606: IFFALSE 33627
// points := [ 32 , 120 , 70 ] ;
33608: LD_ADDR_VAR 0 9
33612: PUSH
33613: LD_INT 32
33615: PUSH
33616: LD_INT 120
33618: PUSH
33619: LD_INT 70
33621: PUSH
33622: EMPTY
33623: LIST
33624: LIST
33625: LIST
33626: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
33627: LD_VAR 0 6
33631: PPUSH
33632: CALL_OW 264
33636: PUSH
33637: LD_INT 7
33639: PUSH
33640: LD_INT 28
33642: PUSH
33643: LD_INT 45
33645: PUSH
33646: LD_INT 92
33648: PUSH
33649: EMPTY
33650: LIST
33651: LIST
33652: LIST
33653: LIST
33654: IN
33655: IFFALSE 33676
// points := [ 35 , 20 , 45 ] ;
33657: LD_ADDR_VAR 0 9
33661: PUSH
33662: LD_INT 35
33664: PUSH
33665: LD_INT 20
33667: PUSH
33668: LD_INT 45
33670: PUSH
33671: EMPTY
33672: LIST
33673: LIST
33674: LIST
33675: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
33676: LD_VAR 0 6
33680: PPUSH
33681: CALL_OW 264
33685: PUSH
33686: LD_INT 47
33688: PUSH
33689: EMPTY
33690: LIST
33691: IN
33692: IFFALSE 33713
// points := [ 67 , 45 , 75 ] ;
33694: LD_ADDR_VAR 0 9
33698: PUSH
33699: LD_INT 67
33701: PUSH
33702: LD_INT 45
33704: PUSH
33705: LD_INT 75
33707: PUSH
33708: EMPTY
33709: LIST
33710: LIST
33711: LIST
33712: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
33713: LD_VAR 0 6
33717: PPUSH
33718: CALL_OW 264
33722: PUSH
33723: LD_INT 26
33725: PUSH
33726: EMPTY
33727: LIST
33728: IN
33729: IFFALSE 33750
// points := [ 120 , 30 , 80 ] ;
33731: LD_ADDR_VAR 0 9
33735: PUSH
33736: LD_INT 120
33738: PUSH
33739: LD_INT 30
33741: PUSH
33742: LD_INT 80
33744: PUSH
33745: EMPTY
33746: LIST
33747: LIST
33748: LIST
33749: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
33750: LD_VAR 0 6
33754: PPUSH
33755: CALL_OW 264
33759: PUSH
33760: LD_INT 22
33762: PUSH
33763: EMPTY
33764: LIST
33765: IN
33766: IFFALSE 33787
// points := [ 40 , 1 , 1 ] ;
33768: LD_ADDR_VAR 0 9
33772: PUSH
33773: LD_INT 40
33775: PUSH
33776: LD_INT 1
33778: PUSH
33779: LD_INT 1
33781: PUSH
33782: EMPTY
33783: LIST
33784: LIST
33785: LIST
33786: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
33787: LD_VAR 0 6
33791: PPUSH
33792: CALL_OW 264
33796: PUSH
33797: LD_INT 29
33799: PUSH
33800: EMPTY
33801: LIST
33802: IN
33803: IFFALSE 33824
// points := [ 70 , 200 , 400 ] ;
33805: LD_ADDR_VAR 0 9
33809: PUSH
33810: LD_INT 70
33812: PUSH
33813: LD_INT 200
33815: PUSH
33816: LD_INT 400
33818: PUSH
33819: EMPTY
33820: LIST
33821: LIST
33822: LIST
33823: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
33824: LD_VAR 0 6
33828: PPUSH
33829: CALL_OW 264
33833: PUSH
33834: LD_INT 14
33836: PUSH
33837: LD_INT 53
33839: PUSH
33840: EMPTY
33841: LIST
33842: LIST
33843: IN
33844: IFFALSE 33865
// points := [ 40 , 10 , 20 ] ;
33846: LD_ADDR_VAR 0 9
33850: PUSH
33851: LD_INT 40
33853: PUSH
33854: LD_INT 10
33856: PUSH
33857: LD_INT 20
33859: PUSH
33860: EMPTY
33861: LIST
33862: LIST
33863: LIST
33864: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
33865: LD_VAR 0 6
33869: PPUSH
33870: CALL_OW 264
33874: PUSH
33875: LD_INT 9
33877: PUSH
33878: EMPTY
33879: LIST
33880: IN
33881: IFFALSE 33902
// points := [ 5 , 70 , 20 ] ;
33883: LD_ADDR_VAR 0 9
33887: PUSH
33888: LD_INT 5
33890: PUSH
33891: LD_INT 70
33893: PUSH
33894: LD_INT 20
33896: PUSH
33897: EMPTY
33898: LIST
33899: LIST
33900: LIST
33901: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
33902: LD_VAR 0 6
33906: PPUSH
33907: CALL_OW 264
33911: PUSH
33912: LD_INT 10
33914: PUSH
33915: EMPTY
33916: LIST
33917: IN
33918: IFFALSE 33939
// points := [ 35 , 110 , 70 ] ;
33920: LD_ADDR_VAR 0 9
33924: PUSH
33925: LD_INT 35
33927: PUSH
33928: LD_INT 110
33930: PUSH
33931: LD_INT 70
33933: PUSH
33934: EMPTY
33935: LIST
33936: LIST
33937: LIST
33938: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
33939: LD_VAR 0 6
33943: PPUSH
33944: CALL_OW 265
33948: PUSH
33949: LD_INT 25
33951: EQUAL
33952: IFFALSE 33973
// points := [ 80 , 65 , 100 ] ;
33954: LD_ADDR_VAR 0 9
33958: PUSH
33959: LD_INT 80
33961: PUSH
33962: LD_INT 65
33964: PUSH
33965: LD_INT 100
33967: PUSH
33968: EMPTY
33969: LIST
33970: LIST
33971: LIST
33972: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
33973: LD_VAR 0 6
33977: PPUSH
33978: CALL_OW 263
33982: PUSH
33983: LD_INT 1
33985: EQUAL
33986: IFFALSE 34021
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
33988: LD_ADDR_VAR 0 10
33992: PUSH
33993: LD_VAR 0 10
33997: PUSH
33998: LD_VAR 0 6
34002: PPUSH
34003: CALL_OW 311
34007: PPUSH
34008: LD_INT 3
34010: PPUSH
34011: CALL_OW 259
34015: PUSH
34016: LD_INT 4
34018: MUL
34019: MUL
34020: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
34021: LD_VAR 0 6
34025: PPUSH
34026: CALL_OW 263
34030: PUSH
34031: LD_INT 2
34033: EQUAL
34034: IFFALSE 34085
// begin j := IsControledBy ( i ) ;
34036: LD_ADDR_VAR 0 7
34040: PUSH
34041: LD_VAR 0 6
34045: PPUSH
34046: CALL_OW 312
34050: ST_TO_ADDR
// if j then
34051: LD_VAR 0 7
34055: IFFALSE 34085
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
34057: LD_ADDR_VAR 0 10
34061: PUSH
34062: LD_VAR 0 10
34066: PUSH
34067: LD_VAR 0 7
34071: PPUSH
34072: LD_INT 3
34074: PPUSH
34075: CALL_OW 259
34079: PUSH
34080: LD_INT 3
34082: MUL
34083: MUL
34084: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
34085: LD_VAR 0 6
34089: PPUSH
34090: CALL_OW 264
34094: PUSH
34095: LD_INT 5
34097: PUSH
34098: LD_INT 6
34100: PUSH
34101: LD_INT 46
34103: PUSH
34104: LD_INT 44
34106: PUSH
34107: LD_INT 47
34109: PUSH
34110: LD_INT 45
34112: PUSH
34113: LD_INT 28
34115: PUSH
34116: LD_INT 7
34118: PUSH
34119: LD_INT 27
34121: PUSH
34122: LD_INT 29
34124: PUSH
34125: EMPTY
34126: LIST
34127: LIST
34128: LIST
34129: LIST
34130: LIST
34131: LIST
34132: LIST
34133: LIST
34134: LIST
34135: LIST
34136: IN
34137: PUSH
34138: LD_VAR 0 1
34142: PPUSH
34143: LD_INT 52
34145: PPUSH
34146: CALL_OW 321
34150: PUSH
34151: LD_INT 2
34153: EQUAL
34154: AND
34155: IFFALSE 34172
// bpoints := bpoints * 1.2 ;
34157: LD_ADDR_VAR 0 10
34161: PUSH
34162: LD_VAR 0 10
34166: PUSH
34167: LD_REAL  1.20000000000000E+0000
34170: MUL
34171: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
34172: LD_VAR 0 6
34176: PPUSH
34177: CALL_OW 264
34181: PUSH
34182: LD_INT 6
34184: PUSH
34185: LD_INT 46
34187: PUSH
34188: LD_INT 47
34190: PUSH
34191: EMPTY
34192: LIST
34193: LIST
34194: LIST
34195: IN
34196: IFFALSE 34213
// bpoints := bpoints * 1.2 ;
34198: LD_ADDR_VAR 0 10
34202: PUSH
34203: LD_VAR 0 10
34207: PUSH
34208: LD_REAL  1.20000000000000E+0000
34211: MUL
34212: ST_TO_ADDR
// end ; unit_building :
34213: GO 34227
34215: LD_INT 3
34217: DOUBLE
34218: EQUAL
34219: IFTRUE 34223
34221: GO 34226
34223: POP
// ; end ;
34224: GO 34227
34226: POP
// for j = 1 to 3 do
34227: LD_ADDR_VAR 0 7
34231: PUSH
34232: DOUBLE
34233: LD_INT 1
34235: DEC
34236: ST_TO_ADDR
34237: LD_INT 3
34239: PUSH
34240: FOR_TO
34241: IFFALSE 34294
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
34243: LD_ADDR_VAR 0 5
34247: PUSH
34248: LD_VAR 0 5
34252: PPUSH
34253: LD_VAR 0 7
34257: PPUSH
34258: LD_VAR 0 5
34262: PUSH
34263: LD_VAR 0 7
34267: ARRAY
34268: PUSH
34269: LD_VAR 0 9
34273: PUSH
34274: LD_VAR 0 7
34278: ARRAY
34279: PUSH
34280: LD_VAR 0 10
34284: MUL
34285: PLUS
34286: PPUSH
34287: CALL_OW 1
34291: ST_TO_ADDR
34292: GO 34240
34294: POP
34295: POP
// end ;
34296: GO 32775
34298: POP
34299: POP
// result := Replace ( result , 4 , tmp ) ;
34300: LD_ADDR_VAR 0 5
34304: PUSH
34305: LD_VAR 0 5
34309: PPUSH
34310: LD_INT 4
34312: PPUSH
34313: LD_VAR 0 8
34317: PPUSH
34318: CALL_OW 1
34322: ST_TO_ADDR
// end ;
34323: LD_VAR 0 5
34327: RET
// export function DangerAtRange ( unit , range ) ; begin
34328: LD_INT 0
34330: PPUSH
// if not unit then
34331: LD_VAR 0 1
34335: NOT
34336: IFFALSE 34340
// exit ;
34338: GO 34385
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
34340: LD_ADDR_VAR 0 3
34344: PUSH
34345: LD_VAR 0 1
34349: PPUSH
34350: CALL_OW 255
34354: PPUSH
34355: LD_VAR 0 1
34359: PPUSH
34360: CALL_OW 250
34364: PPUSH
34365: LD_VAR 0 1
34369: PPUSH
34370: CALL_OW 251
34374: PPUSH
34375: LD_VAR 0 2
34379: PPUSH
34380: CALL 32627 0 4
34384: ST_TO_ADDR
// end ;
34385: LD_VAR 0 3
34389: RET
// export function DangerInArea ( side , area ) ; begin
34390: LD_INT 0
34392: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
34393: LD_ADDR_VAR 0 3
34397: PUSH
34398: LD_VAR 0 2
34402: PPUSH
34403: LD_INT 81
34405: PUSH
34406: LD_VAR 0 1
34410: PUSH
34411: EMPTY
34412: LIST
34413: LIST
34414: PPUSH
34415: CALL_OW 70
34419: ST_TO_ADDR
// end ;
34420: LD_VAR 0 3
34424: RET
// export function IsExtension ( b ) ; begin
34425: LD_INT 0
34427: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
34428: LD_ADDR_VAR 0 2
34432: PUSH
34433: LD_VAR 0 1
34437: PUSH
34438: LD_INT 23
34440: PUSH
34441: LD_INT 20
34443: PUSH
34444: LD_INT 22
34446: PUSH
34447: LD_INT 17
34449: PUSH
34450: LD_INT 24
34452: PUSH
34453: LD_INT 21
34455: PUSH
34456: LD_INT 19
34458: PUSH
34459: LD_INT 16
34461: PUSH
34462: LD_INT 25
34464: PUSH
34465: LD_INT 18
34467: PUSH
34468: EMPTY
34469: LIST
34470: LIST
34471: LIST
34472: LIST
34473: LIST
34474: LIST
34475: LIST
34476: LIST
34477: LIST
34478: LIST
34479: IN
34480: ST_TO_ADDR
// end ;
34481: LD_VAR 0 2
34485: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
34486: LD_INT 0
34488: PPUSH
34489: PPUSH
34490: PPUSH
// result := [ ] ;
34491: LD_ADDR_VAR 0 4
34495: PUSH
34496: EMPTY
34497: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
34498: LD_ADDR_VAR 0 5
34502: PUSH
34503: LD_VAR 0 2
34507: PPUSH
34508: LD_INT 21
34510: PUSH
34511: LD_INT 3
34513: PUSH
34514: EMPTY
34515: LIST
34516: LIST
34517: PPUSH
34518: CALL_OW 70
34522: ST_TO_ADDR
// if not tmp then
34523: LD_VAR 0 5
34527: NOT
34528: IFFALSE 34532
// exit ;
34530: GO 34596
// if checkLink then
34532: LD_VAR 0 3
34536: IFFALSE 34586
// begin for i in tmp do
34538: LD_ADDR_VAR 0 6
34542: PUSH
34543: LD_VAR 0 5
34547: PUSH
34548: FOR_IN
34549: IFFALSE 34584
// if GetBase ( i ) <> base then
34551: LD_VAR 0 6
34555: PPUSH
34556: CALL_OW 274
34560: PUSH
34561: LD_VAR 0 1
34565: NONEQUAL
34566: IFFALSE 34582
// ComLinkToBase ( base , i ) ;
34568: LD_VAR 0 1
34572: PPUSH
34573: LD_VAR 0 6
34577: PPUSH
34578: CALL_OW 169
34582: GO 34548
34584: POP
34585: POP
// end ; result := tmp ;
34586: LD_ADDR_VAR 0 4
34590: PUSH
34591: LD_VAR 0 5
34595: ST_TO_ADDR
// end ;
34596: LD_VAR 0 4
34600: RET
// export function ComComplete ( units , b ) ; var i ; begin
34601: LD_INT 0
34603: PPUSH
34604: PPUSH
// if not units then
34605: LD_VAR 0 1
34609: NOT
34610: IFFALSE 34614
// exit ;
34612: GO 34704
// for i in units do
34614: LD_ADDR_VAR 0 4
34618: PUSH
34619: LD_VAR 0 1
34623: PUSH
34624: FOR_IN
34625: IFFALSE 34702
// if BuildingStatus ( b ) = bs_build then
34627: LD_VAR 0 2
34631: PPUSH
34632: CALL_OW 461
34636: PUSH
34637: LD_INT 1
34639: EQUAL
34640: IFFALSE 34700
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
34642: LD_VAR 0 4
34646: PPUSH
34647: LD_STRING h
34649: PUSH
34650: LD_VAR 0 2
34654: PPUSH
34655: CALL_OW 250
34659: PUSH
34660: LD_VAR 0 2
34664: PPUSH
34665: CALL_OW 251
34669: PUSH
34670: LD_VAR 0 2
34674: PUSH
34675: LD_INT 0
34677: PUSH
34678: LD_INT 0
34680: PUSH
34681: LD_INT 0
34683: PUSH
34684: EMPTY
34685: LIST
34686: LIST
34687: LIST
34688: LIST
34689: LIST
34690: LIST
34691: LIST
34692: PUSH
34693: EMPTY
34694: LIST
34695: PPUSH
34696: CALL_OW 446
34700: GO 34624
34702: POP
34703: POP
// end ;
34704: LD_VAR 0 3
34708: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
34709: LD_INT 0
34711: PPUSH
34712: PPUSH
34713: PPUSH
34714: PPUSH
34715: PPUSH
34716: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
34717: LD_VAR 0 1
34721: NOT
34722: PUSH
34723: LD_VAR 0 1
34727: PPUSH
34728: CALL_OW 263
34732: PUSH
34733: LD_INT 2
34735: NONEQUAL
34736: OR
34737: IFFALSE 34741
// exit ;
34739: GO 35057
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
34741: LD_ADDR_VAR 0 6
34745: PUSH
34746: LD_INT 22
34748: PUSH
34749: LD_VAR 0 1
34753: PPUSH
34754: CALL_OW 255
34758: PUSH
34759: EMPTY
34760: LIST
34761: LIST
34762: PUSH
34763: LD_INT 2
34765: PUSH
34766: LD_INT 30
34768: PUSH
34769: LD_INT 36
34771: PUSH
34772: EMPTY
34773: LIST
34774: LIST
34775: PUSH
34776: LD_INT 34
34778: PUSH
34779: LD_INT 31
34781: PUSH
34782: EMPTY
34783: LIST
34784: LIST
34785: PUSH
34786: EMPTY
34787: LIST
34788: LIST
34789: LIST
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: PPUSH
34795: CALL_OW 69
34799: ST_TO_ADDR
// if not tmp then
34800: LD_VAR 0 6
34804: NOT
34805: IFFALSE 34809
// exit ;
34807: GO 35057
// result := [ ] ;
34809: LD_ADDR_VAR 0 2
34813: PUSH
34814: EMPTY
34815: ST_TO_ADDR
// for i in tmp do
34816: LD_ADDR_VAR 0 3
34820: PUSH
34821: LD_VAR 0 6
34825: PUSH
34826: FOR_IN
34827: IFFALSE 34898
// begin t := UnitsInside ( i ) ;
34829: LD_ADDR_VAR 0 4
34833: PUSH
34834: LD_VAR 0 3
34838: PPUSH
34839: CALL_OW 313
34843: ST_TO_ADDR
// if t then
34844: LD_VAR 0 4
34848: IFFALSE 34896
// for j in t do
34850: LD_ADDR_VAR 0 7
34854: PUSH
34855: LD_VAR 0 4
34859: PUSH
34860: FOR_IN
34861: IFFALSE 34894
// result := Replace ( result , result + 1 , j ) ;
34863: LD_ADDR_VAR 0 2
34867: PUSH
34868: LD_VAR 0 2
34872: PPUSH
34873: LD_VAR 0 2
34877: PUSH
34878: LD_INT 1
34880: PLUS
34881: PPUSH
34882: LD_VAR 0 7
34886: PPUSH
34887: CALL_OW 1
34891: ST_TO_ADDR
34892: GO 34860
34894: POP
34895: POP
// end ;
34896: GO 34826
34898: POP
34899: POP
// if not result then
34900: LD_VAR 0 2
34904: NOT
34905: IFFALSE 34909
// exit ;
34907: GO 35057
// mech := result [ 1 ] ;
34909: LD_ADDR_VAR 0 5
34913: PUSH
34914: LD_VAR 0 2
34918: PUSH
34919: LD_INT 1
34921: ARRAY
34922: ST_TO_ADDR
// if result > 1 then
34923: LD_VAR 0 2
34927: PUSH
34928: LD_INT 1
34930: GREATER
34931: IFFALSE 35043
// begin for i = 2 to result do
34933: LD_ADDR_VAR 0 3
34937: PUSH
34938: DOUBLE
34939: LD_INT 2
34941: DEC
34942: ST_TO_ADDR
34943: LD_VAR 0 2
34947: PUSH
34948: FOR_TO
34949: IFFALSE 35041
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
34951: LD_ADDR_VAR 0 4
34955: PUSH
34956: LD_VAR 0 2
34960: PUSH
34961: LD_VAR 0 3
34965: ARRAY
34966: PPUSH
34967: LD_INT 3
34969: PPUSH
34970: CALL_OW 259
34974: PUSH
34975: LD_VAR 0 2
34979: PUSH
34980: LD_VAR 0 3
34984: ARRAY
34985: PPUSH
34986: CALL_OW 432
34990: MINUS
34991: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
34992: LD_VAR 0 4
34996: PUSH
34997: LD_VAR 0 5
35001: PPUSH
35002: LD_INT 3
35004: PPUSH
35005: CALL_OW 259
35009: PUSH
35010: LD_VAR 0 5
35014: PPUSH
35015: CALL_OW 432
35019: MINUS
35020: GREATEREQUAL
35021: IFFALSE 35039
// mech := result [ i ] ;
35023: LD_ADDR_VAR 0 5
35027: PUSH
35028: LD_VAR 0 2
35032: PUSH
35033: LD_VAR 0 3
35037: ARRAY
35038: ST_TO_ADDR
// end ;
35039: GO 34948
35041: POP
35042: POP
// end ; ComLinkTo ( vehicle , mech ) ;
35043: LD_VAR 0 1
35047: PPUSH
35048: LD_VAR 0 5
35052: PPUSH
35053: CALL_OW 135
// end ;
35057: LD_VAR 0 2
35061: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
35062: LD_INT 0
35064: PPUSH
35065: PPUSH
35066: PPUSH
35067: PPUSH
35068: PPUSH
35069: PPUSH
35070: PPUSH
35071: PPUSH
35072: PPUSH
35073: PPUSH
35074: PPUSH
35075: PPUSH
35076: PPUSH
// result := [ ] ;
35077: LD_ADDR_VAR 0 7
35081: PUSH
35082: EMPTY
35083: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
35084: LD_VAR 0 1
35088: PPUSH
35089: CALL_OW 266
35093: PUSH
35094: LD_INT 0
35096: PUSH
35097: LD_INT 1
35099: PUSH
35100: EMPTY
35101: LIST
35102: LIST
35103: IN
35104: NOT
35105: IFFALSE 35109
// exit ;
35107: GO 36743
// if name then
35109: LD_VAR 0 3
35113: IFFALSE 35129
// SetBName ( base_dep , name ) ;
35115: LD_VAR 0 1
35119: PPUSH
35120: LD_VAR 0 3
35124: PPUSH
35125: CALL_OW 500
// base := GetBase ( base_dep ) ;
35129: LD_ADDR_VAR 0 15
35133: PUSH
35134: LD_VAR 0 1
35138: PPUSH
35139: CALL_OW 274
35143: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
35144: LD_ADDR_VAR 0 16
35148: PUSH
35149: LD_VAR 0 1
35153: PPUSH
35154: CALL_OW 255
35158: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
35159: LD_ADDR_VAR 0 17
35163: PUSH
35164: LD_VAR 0 1
35168: PPUSH
35169: CALL_OW 248
35173: ST_TO_ADDR
// if sources then
35174: LD_VAR 0 5
35178: IFFALSE 35225
// for i = 1 to 3 do
35180: LD_ADDR_VAR 0 8
35184: PUSH
35185: DOUBLE
35186: LD_INT 1
35188: DEC
35189: ST_TO_ADDR
35190: LD_INT 3
35192: PUSH
35193: FOR_TO
35194: IFFALSE 35223
// AddResourceType ( base , i , sources [ i ] ) ;
35196: LD_VAR 0 15
35200: PPUSH
35201: LD_VAR 0 8
35205: PPUSH
35206: LD_VAR 0 5
35210: PUSH
35211: LD_VAR 0 8
35215: ARRAY
35216: PPUSH
35217: CALL_OW 276
35221: GO 35193
35223: POP
35224: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
35225: LD_ADDR_VAR 0 18
35229: PUSH
35230: LD_VAR 0 15
35234: PPUSH
35235: LD_VAR 0 2
35239: PPUSH
35240: LD_INT 1
35242: PPUSH
35243: CALL 34486 0 3
35247: ST_TO_ADDR
// InitHc ;
35248: CALL_OW 19
// InitUc ;
35252: CALL_OW 18
// uc_side := side ;
35256: LD_ADDR_OWVAR 20
35260: PUSH
35261: LD_VAR 0 16
35265: ST_TO_ADDR
// uc_nation := nation ;
35266: LD_ADDR_OWVAR 21
35270: PUSH
35271: LD_VAR 0 17
35275: ST_TO_ADDR
// if buildings then
35276: LD_VAR 0 18
35280: IFFALSE 36602
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
35282: LD_ADDR_VAR 0 19
35286: PUSH
35287: LD_VAR 0 18
35291: PPUSH
35292: LD_INT 2
35294: PUSH
35295: LD_INT 30
35297: PUSH
35298: LD_INT 29
35300: PUSH
35301: EMPTY
35302: LIST
35303: LIST
35304: PUSH
35305: LD_INT 30
35307: PUSH
35308: LD_INT 30
35310: PUSH
35311: EMPTY
35312: LIST
35313: LIST
35314: PUSH
35315: EMPTY
35316: LIST
35317: LIST
35318: LIST
35319: PPUSH
35320: CALL_OW 72
35324: ST_TO_ADDR
// if tmp then
35325: LD_VAR 0 19
35329: IFFALSE 35377
// for i in tmp do
35331: LD_ADDR_VAR 0 8
35335: PUSH
35336: LD_VAR 0 19
35340: PUSH
35341: FOR_IN
35342: IFFALSE 35375
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
35344: LD_VAR 0 8
35348: PPUSH
35349: CALL_OW 250
35353: PPUSH
35354: LD_VAR 0 8
35358: PPUSH
35359: CALL_OW 251
35363: PPUSH
35364: LD_VAR 0 16
35368: PPUSH
35369: CALL_OW 441
35373: GO 35341
35375: POP
35376: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
35377: LD_VAR 0 18
35381: PPUSH
35382: LD_INT 2
35384: PUSH
35385: LD_INT 30
35387: PUSH
35388: LD_INT 32
35390: PUSH
35391: EMPTY
35392: LIST
35393: LIST
35394: PUSH
35395: LD_INT 30
35397: PUSH
35398: LD_INT 33
35400: PUSH
35401: EMPTY
35402: LIST
35403: LIST
35404: PUSH
35405: EMPTY
35406: LIST
35407: LIST
35408: LIST
35409: PPUSH
35410: CALL_OW 72
35414: IFFALSE 35502
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
35416: LD_ADDR_VAR 0 8
35420: PUSH
35421: LD_VAR 0 18
35425: PPUSH
35426: LD_INT 2
35428: PUSH
35429: LD_INT 30
35431: PUSH
35432: LD_INT 32
35434: PUSH
35435: EMPTY
35436: LIST
35437: LIST
35438: PUSH
35439: LD_INT 30
35441: PUSH
35442: LD_INT 33
35444: PUSH
35445: EMPTY
35446: LIST
35447: LIST
35448: PUSH
35449: EMPTY
35450: LIST
35451: LIST
35452: LIST
35453: PPUSH
35454: CALL_OW 72
35458: PUSH
35459: FOR_IN
35460: IFFALSE 35500
// begin if not GetBWeapon ( i ) then
35462: LD_VAR 0 8
35466: PPUSH
35467: CALL_OW 269
35471: NOT
35472: IFFALSE 35498
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
35474: LD_VAR 0 8
35478: PPUSH
35479: LD_VAR 0 8
35483: PPUSH
35484: LD_VAR 0 2
35488: PPUSH
35489: CALL 36748 0 2
35493: PPUSH
35494: CALL_OW 431
// end ;
35498: GO 35459
35500: POP
35501: POP
// end ; for i = 1 to personel do
35502: LD_ADDR_VAR 0 8
35506: PUSH
35507: DOUBLE
35508: LD_INT 1
35510: DEC
35511: ST_TO_ADDR
35512: LD_VAR 0 6
35516: PUSH
35517: FOR_TO
35518: IFFALSE 36582
// begin if i > 4 then
35520: LD_VAR 0 8
35524: PUSH
35525: LD_INT 4
35527: GREATER
35528: IFFALSE 35532
// break ;
35530: GO 36582
// case i of 1 :
35532: LD_VAR 0 8
35536: PUSH
35537: LD_INT 1
35539: DOUBLE
35540: EQUAL
35541: IFTRUE 35545
35543: GO 35625
35545: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
35546: LD_ADDR_VAR 0 12
35550: PUSH
35551: LD_VAR 0 18
35555: PPUSH
35556: LD_INT 22
35558: PUSH
35559: LD_VAR 0 16
35563: PUSH
35564: EMPTY
35565: LIST
35566: LIST
35567: PUSH
35568: LD_INT 58
35570: PUSH
35571: EMPTY
35572: LIST
35573: PUSH
35574: LD_INT 2
35576: PUSH
35577: LD_INT 30
35579: PUSH
35580: LD_INT 32
35582: PUSH
35583: EMPTY
35584: LIST
35585: LIST
35586: PUSH
35587: LD_INT 30
35589: PUSH
35590: LD_INT 4
35592: PUSH
35593: EMPTY
35594: LIST
35595: LIST
35596: PUSH
35597: LD_INT 30
35599: PUSH
35600: LD_INT 5
35602: PUSH
35603: EMPTY
35604: LIST
35605: LIST
35606: PUSH
35607: EMPTY
35608: LIST
35609: LIST
35610: LIST
35611: LIST
35612: PUSH
35613: EMPTY
35614: LIST
35615: LIST
35616: LIST
35617: PPUSH
35618: CALL_OW 72
35622: ST_TO_ADDR
35623: GO 35847
35625: LD_INT 2
35627: DOUBLE
35628: EQUAL
35629: IFTRUE 35633
35631: GO 35695
35633: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
35634: LD_ADDR_VAR 0 12
35638: PUSH
35639: LD_VAR 0 18
35643: PPUSH
35644: LD_INT 22
35646: PUSH
35647: LD_VAR 0 16
35651: PUSH
35652: EMPTY
35653: LIST
35654: LIST
35655: PUSH
35656: LD_INT 2
35658: PUSH
35659: LD_INT 30
35661: PUSH
35662: LD_INT 0
35664: PUSH
35665: EMPTY
35666: LIST
35667: LIST
35668: PUSH
35669: LD_INT 30
35671: PUSH
35672: LD_INT 1
35674: PUSH
35675: EMPTY
35676: LIST
35677: LIST
35678: PUSH
35679: EMPTY
35680: LIST
35681: LIST
35682: LIST
35683: PUSH
35684: EMPTY
35685: LIST
35686: LIST
35687: PPUSH
35688: CALL_OW 72
35692: ST_TO_ADDR
35693: GO 35847
35695: LD_INT 3
35697: DOUBLE
35698: EQUAL
35699: IFTRUE 35703
35701: GO 35765
35703: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
35704: LD_ADDR_VAR 0 12
35708: PUSH
35709: LD_VAR 0 18
35713: PPUSH
35714: LD_INT 22
35716: PUSH
35717: LD_VAR 0 16
35721: PUSH
35722: EMPTY
35723: LIST
35724: LIST
35725: PUSH
35726: LD_INT 2
35728: PUSH
35729: LD_INT 30
35731: PUSH
35732: LD_INT 2
35734: PUSH
35735: EMPTY
35736: LIST
35737: LIST
35738: PUSH
35739: LD_INT 30
35741: PUSH
35742: LD_INT 3
35744: PUSH
35745: EMPTY
35746: LIST
35747: LIST
35748: PUSH
35749: EMPTY
35750: LIST
35751: LIST
35752: LIST
35753: PUSH
35754: EMPTY
35755: LIST
35756: LIST
35757: PPUSH
35758: CALL_OW 72
35762: ST_TO_ADDR
35763: GO 35847
35765: LD_INT 4
35767: DOUBLE
35768: EQUAL
35769: IFTRUE 35773
35771: GO 35846
35773: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
35774: LD_ADDR_VAR 0 12
35778: PUSH
35779: LD_VAR 0 18
35783: PPUSH
35784: LD_INT 22
35786: PUSH
35787: LD_VAR 0 16
35791: PUSH
35792: EMPTY
35793: LIST
35794: LIST
35795: PUSH
35796: LD_INT 2
35798: PUSH
35799: LD_INT 30
35801: PUSH
35802: LD_INT 6
35804: PUSH
35805: EMPTY
35806: LIST
35807: LIST
35808: PUSH
35809: LD_INT 30
35811: PUSH
35812: LD_INT 7
35814: PUSH
35815: EMPTY
35816: LIST
35817: LIST
35818: PUSH
35819: LD_INT 30
35821: PUSH
35822: LD_INT 8
35824: PUSH
35825: EMPTY
35826: LIST
35827: LIST
35828: PUSH
35829: EMPTY
35830: LIST
35831: LIST
35832: LIST
35833: LIST
35834: PUSH
35835: EMPTY
35836: LIST
35837: LIST
35838: PPUSH
35839: CALL_OW 72
35843: ST_TO_ADDR
35844: GO 35847
35846: POP
// if i = 1 then
35847: LD_VAR 0 8
35851: PUSH
35852: LD_INT 1
35854: EQUAL
35855: IFFALSE 35966
// begin tmp := [ ] ;
35857: LD_ADDR_VAR 0 19
35861: PUSH
35862: EMPTY
35863: ST_TO_ADDR
// for j in f do
35864: LD_ADDR_VAR 0 9
35868: PUSH
35869: LD_VAR 0 12
35873: PUSH
35874: FOR_IN
35875: IFFALSE 35948
// if GetBType ( j ) = b_bunker then
35877: LD_VAR 0 9
35881: PPUSH
35882: CALL_OW 266
35886: PUSH
35887: LD_INT 32
35889: EQUAL
35890: IFFALSE 35917
// tmp := Insert ( tmp , 1 , j ) else
35892: LD_ADDR_VAR 0 19
35896: PUSH
35897: LD_VAR 0 19
35901: PPUSH
35902: LD_INT 1
35904: PPUSH
35905: LD_VAR 0 9
35909: PPUSH
35910: CALL_OW 2
35914: ST_TO_ADDR
35915: GO 35946
// tmp := Insert ( tmp , tmp + 1 , j ) ;
35917: LD_ADDR_VAR 0 19
35921: PUSH
35922: LD_VAR 0 19
35926: PPUSH
35927: LD_VAR 0 19
35931: PUSH
35932: LD_INT 1
35934: PLUS
35935: PPUSH
35936: LD_VAR 0 9
35940: PPUSH
35941: CALL_OW 2
35945: ST_TO_ADDR
35946: GO 35874
35948: POP
35949: POP
// if tmp then
35950: LD_VAR 0 19
35954: IFFALSE 35966
// f := tmp ;
35956: LD_ADDR_VAR 0 12
35960: PUSH
35961: LD_VAR 0 19
35965: ST_TO_ADDR
// end ; x := personel [ i ] ;
35966: LD_ADDR_VAR 0 13
35970: PUSH
35971: LD_VAR 0 6
35975: PUSH
35976: LD_VAR 0 8
35980: ARRAY
35981: ST_TO_ADDR
// if x = - 1 then
35982: LD_VAR 0 13
35986: PUSH
35987: LD_INT 1
35989: NEG
35990: EQUAL
35991: IFFALSE 36200
// begin for j in f do
35993: LD_ADDR_VAR 0 9
35997: PUSH
35998: LD_VAR 0 12
36002: PUSH
36003: FOR_IN
36004: IFFALSE 36196
// repeat InitHc ;
36006: CALL_OW 19
// if GetBType ( j ) = b_barracks then
36010: LD_VAR 0 9
36014: PPUSH
36015: CALL_OW 266
36019: PUSH
36020: LD_INT 5
36022: EQUAL
36023: IFFALSE 36093
// begin if UnitsInside ( j ) < 3 then
36025: LD_VAR 0 9
36029: PPUSH
36030: CALL_OW 313
36034: PUSH
36035: LD_INT 3
36037: LESS
36038: IFFALSE 36074
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36040: LD_INT 0
36042: PPUSH
36043: LD_INT 5
36045: PUSH
36046: LD_INT 8
36048: PUSH
36049: LD_INT 9
36051: PUSH
36052: EMPTY
36053: LIST
36054: LIST
36055: LIST
36056: PUSH
36057: LD_VAR 0 17
36061: ARRAY
36062: PPUSH
36063: LD_VAR 0 4
36067: PPUSH
36068: CALL_OW 380
36072: GO 36091
// PrepareHuman ( false , i , skill ) ;
36074: LD_INT 0
36076: PPUSH
36077: LD_VAR 0 8
36081: PPUSH
36082: LD_VAR 0 4
36086: PPUSH
36087: CALL_OW 380
// end else
36091: GO 36110
// PrepareHuman ( false , i , skill ) ;
36093: LD_INT 0
36095: PPUSH
36096: LD_VAR 0 8
36100: PPUSH
36101: LD_VAR 0 4
36105: PPUSH
36106: CALL_OW 380
// un := CreateHuman ;
36110: LD_ADDR_VAR 0 14
36114: PUSH
36115: CALL_OW 44
36119: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36120: LD_ADDR_VAR 0 7
36124: PUSH
36125: LD_VAR 0 7
36129: PPUSH
36130: LD_INT 1
36132: PPUSH
36133: LD_VAR 0 14
36137: PPUSH
36138: CALL_OW 2
36142: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
36143: LD_VAR 0 14
36147: PPUSH
36148: LD_VAR 0 9
36152: PPUSH
36153: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
36157: LD_VAR 0 9
36161: PPUSH
36162: CALL_OW 313
36166: PUSH
36167: LD_INT 6
36169: EQUAL
36170: PUSH
36171: LD_VAR 0 9
36175: PPUSH
36176: CALL_OW 266
36180: PUSH
36181: LD_INT 32
36183: PUSH
36184: LD_INT 31
36186: PUSH
36187: EMPTY
36188: LIST
36189: LIST
36190: IN
36191: OR
36192: IFFALSE 36006
36194: GO 36003
36196: POP
36197: POP
// end else
36198: GO 36580
// for j = 1 to x do
36200: LD_ADDR_VAR 0 9
36204: PUSH
36205: DOUBLE
36206: LD_INT 1
36208: DEC
36209: ST_TO_ADDR
36210: LD_VAR 0 13
36214: PUSH
36215: FOR_TO
36216: IFFALSE 36578
// begin InitHc ;
36218: CALL_OW 19
// if not f then
36222: LD_VAR 0 12
36226: NOT
36227: IFFALSE 36316
// begin PrepareHuman ( false , i , skill ) ;
36229: LD_INT 0
36231: PPUSH
36232: LD_VAR 0 8
36236: PPUSH
36237: LD_VAR 0 4
36241: PPUSH
36242: CALL_OW 380
// un := CreateHuman ;
36246: LD_ADDR_VAR 0 14
36250: PUSH
36251: CALL_OW 44
36255: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36256: LD_ADDR_VAR 0 7
36260: PUSH
36261: LD_VAR 0 7
36265: PPUSH
36266: LD_INT 1
36268: PPUSH
36269: LD_VAR 0 14
36273: PPUSH
36274: CALL_OW 2
36278: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36279: LD_VAR 0 14
36283: PPUSH
36284: LD_VAR 0 1
36288: PPUSH
36289: CALL_OW 250
36293: PPUSH
36294: LD_VAR 0 1
36298: PPUSH
36299: CALL_OW 251
36303: PPUSH
36304: LD_INT 10
36306: PPUSH
36307: LD_INT 0
36309: PPUSH
36310: CALL_OW 50
// continue ;
36314: GO 36215
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
36316: LD_VAR 0 12
36320: PUSH
36321: LD_INT 1
36323: ARRAY
36324: PPUSH
36325: CALL_OW 313
36329: PUSH
36330: LD_VAR 0 12
36334: PUSH
36335: LD_INT 1
36337: ARRAY
36338: PPUSH
36339: CALL_OW 266
36343: PUSH
36344: LD_INT 32
36346: PUSH
36347: LD_INT 31
36349: PUSH
36350: EMPTY
36351: LIST
36352: LIST
36353: IN
36354: AND
36355: PUSH
36356: LD_VAR 0 12
36360: PUSH
36361: LD_INT 1
36363: ARRAY
36364: PPUSH
36365: CALL_OW 313
36369: PUSH
36370: LD_INT 6
36372: EQUAL
36373: OR
36374: IFFALSE 36394
// f := Delete ( f , 1 ) ;
36376: LD_ADDR_VAR 0 12
36380: PUSH
36381: LD_VAR 0 12
36385: PPUSH
36386: LD_INT 1
36388: PPUSH
36389: CALL_OW 3
36393: ST_TO_ADDR
// if not f then
36394: LD_VAR 0 12
36398: NOT
36399: IFFALSE 36417
// begin x := x + 2 ;
36401: LD_ADDR_VAR 0 13
36405: PUSH
36406: LD_VAR 0 13
36410: PUSH
36411: LD_INT 2
36413: PLUS
36414: ST_TO_ADDR
// continue ;
36415: GO 36215
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
36417: LD_VAR 0 12
36421: PUSH
36422: LD_INT 1
36424: ARRAY
36425: PPUSH
36426: CALL_OW 266
36430: PUSH
36431: LD_INT 5
36433: EQUAL
36434: IFFALSE 36508
// begin if UnitsInside ( f [ 1 ] ) < 3 then
36436: LD_VAR 0 12
36440: PUSH
36441: LD_INT 1
36443: ARRAY
36444: PPUSH
36445: CALL_OW 313
36449: PUSH
36450: LD_INT 3
36452: LESS
36453: IFFALSE 36489
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36455: LD_INT 0
36457: PPUSH
36458: LD_INT 5
36460: PUSH
36461: LD_INT 8
36463: PUSH
36464: LD_INT 9
36466: PUSH
36467: EMPTY
36468: LIST
36469: LIST
36470: LIST
36471: PUSH
36472: LD_VAR 0 17
36476: ARRAY
36477: PPUSH
36478: LD_VAR 0 4
36482: PPUSH
36483: CALL_OW 380
36487: GO 36506
// PrepareHuman ( false , i , skill ) ;
36489: LD_INT 0
36491: PPUSH
36492: LD_VAR 0 8
36496: PPUSH
36497: LD_VAR 0 4
36501: PPUSH
36502: CALL_OW 380
// end else
36506: GO 36525
// PrepareHuman ( false , i , skill ) ;
36508: LD_INT 0
36510: PPUSH
36511: LD_VAR 0 8
36515: PPUSH
36516: LD_VAR 0 4
36520: PPUSH
36521: CALL_OW 380
// un := CreateHuman ;
36525: LD_ADDR_VAR 0 14
36529: PUSH
36530: CALL_OW 44
36534: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36535: LD_ADDR_VAR 0 7
36539: PUSH
36540: LD_VAR 0 7
36544: PPUSH
36545: LD_INT 1
36547: PPUSH
36548: LD_VAR 0 14
36552: PPUSH
36553: CALL_OW 2
36557: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
36558: LD_VAR 0 14
36562: PPUSH
36563: LD_VAR 0 12
36567: PUSH
36568: LD_INT 1
36570: ARRAY
36571: PPUSH
36572: CALL_OW 52
// end ;
36576: GO 36215
36578: POP
36579: POP
// end ;
36580: GO 35517
36582: POP
36583: POP
// result := result ^ buildings ;
36584: LD_ADDR_VAR 0 7
36588: PUSH
36589: LD_VAR 0 7
36593: PUSH
36594: LD_VAR 0 18
36598: ADD
36599: ST_TO_ADDR
// end else
36600: GO 36743
// begin for i = 1 to personel do
36602: LD_ADDR_VAR 0 8
36606: PUSH
36607: DOUBLE
36608: LD_INT 1
36610: DEC
36611: ST_TO_ADDR
36612: LD_VAR 0 6
36616: PUSH
36617: FOR_TO
36618: IFFALSE 36741
// begin if i > 4 then
36620: LD_VAR 0 8
36624: PUSH
36625: LD_INT 4
36627: GREATER
36628: IFFALSE 36632
// break ;
36630: GO 36741
// x := personel [ i ] ;
36632: LD_ADDR_VAR 0 13
36636: PUSH
36637: LD_VAR 0 6
36641: PUSH
36642: LD_VAR 0 8
36646: ARRAY
36647: ST_TO_ADDR
// if x = - 1 then
36648: LD_VAR 0 13
36652: PUSH
36653: LD_INT 1
36655: NEG
36656: EQUAL
36657: IFFALSE 36661
// continue ;
36659: GO 36617
// PrepareHuman ( false , i , skill ) ;
36661: LD_INT 0
36663: PPUSH
36664: LD_VAR 0 8
36668: PPUSH
36669: LD_VAR 0 4
36673: PPUSH
36674: CALL_OW 380
// un := CreateHuman ;
36678: LD_ADDR_VAR 0 14
36682: PUSH
36683: CALL_OW 44
36687: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36688: LD_VAR 0 14
36692: PPUSH
36693: LD_VAR 0 1
36697: PPUSH
36698: CALL_OW 250
36702: PPUSH
36703: LD_VAR 0 1
36707: PPUSH
36708: CALL_OW 251
36712: PPUSH
36713: LD_INT 10
36715: PPUSH
36716: LD_INT 0
36718: PPUSH
36719: CALL_OW 50
// result := result ^ un ;
36723: LD_ADDR_VAR 0 7
36727: PUSH
36728: LD_VAR 0 7
36732: PUSH
36733: LD_VAR 0 14
36737: ADD
36738: ST_TO_ADDR
// end ;
36739: GO 36617
36741: POP
36742: POP
// end ; end ;
36743: LD_VAR 0 7
36747: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
36748: LD_INT 0
36750: PPUSH
36751: PPUSH
36752: PPUSH
36753: PPUSH
36754: PPUSH
36755: PPUSH
36756: PPUSH
36757: PPUSH
36758: PPUSH
36759: PPUSH
36760: PPUSH
36761: PPUSH
36762: PPUSH
36763: PPUSH
36764: PPUSH
36765: PPUSH
// result := false ;
36766: LD_ADDR_VAR 0 3
36770: PUSH
36771: LD_INT 0
36773: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
36774: LD_VAR 0 1
36778: NOT
36779: PUSH
36780: LD_VAR 0 1
36784: PPUSH
36785: CALL_OW 266
36789: PUSH
36790: LD_INT 32
36792: PUSH
36793: LD_INT 33
36795: PUSH
36796: EMPTY
36797: LIST
36798: LIST
36799: IN
36800: NOT
36801: OR
36802: IFFALSE 36806
// exit ;
36804: GO 37915
// nat := GetNation ( tower ) ;
36806: LD_ADDR_VAR 0 12
36810: PUSH
36811: LD_VAR 0 1
36815: PPUSH
36816: CALL_OW 248
36820: ST_TO_ADDR
// side := GetSide ( tower ) ;
36821: LD_ADDR_VAR 0 16
36825: PUSH
36826: LD_VAR 0 1
36830: PPUSH
36831: CALL_OW 255
36835: ST_TO_ADDR
// x := GetX ( tower ) ;
36836: LD_ADDR_VAR 0 10
36840: PUSH
36841: LD_VAR 0 1
36845: PPUSH
36846: CALL_OW 250
36850: ST_TO_ADDR
// y := GetY ( tower ) ;
36851: LD_ADDR_VAR 0 11
36855: PUSH
36856: LD_VAR 0 1
36860: PPUSH
36861: CALL_OW 251
36865: ST_TO_ADDR
// if not x or not y then
36866: LD_VAR 0 10
36870: NOT
36871: PUSH
36872: LD_VAR 0 11
36876: NOT
36877: OR
36878: IFFALSE 36882
// exit ;
36880: GO 37915
// weapon := 0 ;
36882: LD_ADDR_VAR 0 18
36886: PUSH
36887: LD_INT 0
36889: ST_TO_ADDR
// fac_list := [ ] ;
36890: LD_ADDR_VAR 0 17
36894: PUSH
36895: EMPTY
36896: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
36897: LD_ADDR_VAR 0 6
36901: PUSH
36902: LD_VAR 0 1
36906: PPUSH
36907: CALL_OW 274
36911: PPUSH
36912: LD_VAR 0 2
36916: PPUSH
36917: LD_INT 0
36919: PPUSH
36920: CALL 34486 0 3
36924: PPUSH
36925: LD_INT 30
36927: PUSH
36928: LD_INT 3
36930: PUSH
36931: EMPTY
36932: LIST
36933: LIST
36934: PPUSH
36935: CALL_OW 72
36939: ST_TO_ADDR
// if not factories then
36940: LD_VAR 0 6
36944: NOT
36945: IFFALSE 36949
// exit ;
36947: GO 37915
// for i in factories do
36949: LD_ADDR_VAR 0 8
36953: PUSH
36954: LD_VAR 0 6
36958: PUSH
36959: FOR_IN
36960: IFFALSE 36985
// fac_list := fac_list union AvailableWeaponList ( i ) ;
36962: LD_ADDR_VAR 0 17
36966: PUSH
36967: LD_VAR 0 17
36971: PUSH
36972: LD_VAR 0 8
36976: PPUSH
36977: CALL_OW 478
36981: UNION
36982: ST_TO_ADDR
36983: GO 36959
36985: POP
36986: POP
// if not fac_list then
36987: LD_VAR 0 17
36991: NOT
36992: IFFALSE 36996
// exit ;
36994: GO 37915
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
36996: LD_ADDR_VAR 0 5
37000: PUSH
37001: LD_INT 4
37003: PUSH
37004: LD_INT 5
37006: PUSH
37007: LD_INT 9
37009: PUSH
37010: LD_INT 10
37012: PUSH
37013: LD_INT 6
37015: PUSH
37016: LD_INT 7
37018: PUSH
37019: LD_INT 11
37021: PUSH
37022: EMPTY
37023: LIST
37024: LIST
37025: LIST
37026: LIST
37027: LIST
37028: LIST
37029: LIST
37030: PUSH
37031: LD_INT 27
37033: PUSH
37034: LD_INT 28
37036: PUSH
37037: LD_INT 26
37039: PUSH
37040: LD_INT 30
37042: PUSH
37043: EMPTY
37044: LIST
37045: LIST
37046: LIST
37047: LIST
37048: PUSH
37049: LD_INT 43
37051: PUSH
37052: LD_INT 44
37054: PUSH
37055: LD_INT 46
37057: PUSH
37058: LD_INT 45
37060: PUSH
37061: LD_INT 47
37063: PUSH
37064: LD_INT 49
37066: PUSH
37067: EMPTY
37068: LIST
37069: LIST
37070: LIST
37071: LIST
37072: LIST
37073: LIST
37074: PUSH
37075: EMPTY
37076: LIST
37077: LIST
37078: LIST
37079: PUSH
37080: LD_VAR 0 12
37084: ARRAY
37085: ST_TO_ADDR
// list := list isect fac_list ;
37086: LD_ADDR_VAR 0 5
37090: PUSH
37091: LD_VAR 0 5
37095: PUSH
37096: LD_VAR 0 17
37100: ISECT
37101: ST_TO_ADDR
// if not list then
37102: LD_VAR 0 5
37106: NOT
37107: IFFALSE 37111
// exit ;
37109: GO 37915
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
37111: LD_VAR 0 12
37115: PUSH
37116: LD_INT 3
37118: EQUAL
37119: PUSH
37120: LD_INT 49
37122: PUSH
37123: LD_VAR 0 5
37127: IN
37128: AND
37129: PUSH
37130: LD_INT 31
37132: PPUSH
37133: LD_VAR 0 16
37137: PPUSH
37138: CALL_OW 321
37142: PUSH
37143: LD_INT 2
37145: EQUAL
37146: AND
37147: IFFALSE 37207
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
37149: LD_INT 22
37151: PUSH
37152: LD_VAR 0 16
37156: PUSH
37157: EMPTY
37158: LIST
37159: LIST
37160: PUSH
37161: LD_INT 35
37163: PUSH
37164: LD_INT 49
37166: PUSH
37167: EMPTY
37168: LIST
37169: LIST
37170: PUSH
37171: LD_INT 91
37173: PUSH
37174: LD_VAR 0 1
37178: PUSH
37179: LD_INT 10
37181: PUSH
37182: EMPTY
37183: LIST
37184: LIST
37185: LIST
37186: PUSH
37187: EMPTY
37188: LIST
37189: LIST
37190: LIST
37191: PPUSH
37192: CALL_OW 69
37196: NOT
37197: IFFALSE 37207
// weapon := ru_time_lapser ;
37199: LD_ADDR_VAR 0 18
37203: PUSH
37204: LD_INT 49
37206: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
37207: LD_VAR 0 12
37211: PUSH
37212: LD_INT 1
37214: PUSH
37215: LD_INT 2
37217: PUSH
37218: EMPTY
37219: LIST
37220: LIST
37221: IN
37222: PUSH
37223: LD_INT 11
37225: PUSH
37226: LD_VAR 0 5
37230: IN
37231: PUSH
37232: LD_INT 30
37234: PUSH
37235: LD_VAR 0 5
37239: IN
37240: OR
37241: AND
37242: PUSH
37243: LD_INT 6
37245: PPUSH
37246: LD_VAR 0 16
37250: PPUSH
37251: CALL_OW 321
37255: PUSH
37256: LD_INT 2
37258: EQUAL
37259: AND
37260: IFFALSE 37425
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
37262: LD_INT 22
37264: PUSH
37265: LD_VAR 0 16
37269: PUSH
37270: EMPTY
37271: LIST
37272: LIST
37273: PUSH
37274: LD_INT 2
37276: PUSH
37277: LD_INT 35
37279: PUSH
37280: LD_INT 11
37282: PUSH
37283: EMPTY
37284: LIST
37285: LIST
37286: PUSH
37287: LD_INT 35
37289: PUSH
37290: LD_INT 30
37292: PUSH
37293: EMPTY
37294: LIST
37295: LIST
37296: PUSH
37297: EMPTY
37298: LIST
37299: LIST
37300: LIST
37301: PUSH
37302: LD_INT 91
37304: PUSH
37305: LD_VAR 0 1
37309: PUSH
37310: LD_INT 18
37312: PUSH
37313: EMPTY
37314: LIST
37315: LIST
37316: LIST
37317: PUSH
37318: EMPTY
37319: LIST
37320: LIST
37321: LIST
37322: PPUSH
37323: CALL_OW 69
37327: NOT
37328: PUSH
37329: LD_INT 22
37331: PUSH
37332: LD_VAR 0 16
37336: PUSH
37337: EMPTY
37338: LIST
37339: LIST
37340: PUSH
37341: LD_INT 2
37343: PUSH
37344: LD_INT 30
37346: PUSH
37347: LD_INT 32
37349: PUSH
37350: EMPTY
37351: LIST
37352: LIST
37353: PUSH
37354: LD_INT 30
37356: PUSH
37357: LD_INT 33
37359: PUSH
37360: EMPTY
37361: LIST
37362: LIST
37363: PUSH
37364: EMPTY
37365: LIST
37366: LIST
37367: LIST
37368: PUSH
37369: LD_INT 91
37371: PUSH
37372: LD_VAR 0 1
37376: PUSH
37377: LD_INT 12
37379: PUSH
37380: EMPTY
37381: LIST
37382: LIST
37383: LIST
37384: PUSH
37385: EMPTY
37386: LIST
37387: LIST
37388: LIST
37389: PUSH
37390: EMPTY
37391: LIST
37392: PPUSH
37393: CALL_OW 69
37397: PUSH
37398: LD_INT 2
37400: GREATER
37401: AND
37402: IFFALSE 37425
// weapon := [ us_radar , ar_radar ] [ nat ] ;
37404: LD_ADDR_VAR 0 18
37408: PUSH
37409: LD_INT 11
37411: PUSH
37412: LD_INT 30
37414: PUSH
37415: EMPTY
37416: LIST
37417: LIST
37418: PUSH
37419: LD_VAR 0 12
37423: ARRAY
37424: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
37425: LD_VAR 0 18
37429: NOT
37430: PUSH
37431: LD_INT 40
37433: PPUSH
37434: LD_VAR 0 16
37438: PPUSH
37439: CALL_OW 321
37443: PUSH
37444: LD_INT 2
37446: EQUAL
37447: AND
37448: PUSH
37449: LD_INT 7
37451: PUSH
37452: LD_VAR 0 5
37456: IN
37457: PUSH
37458: LD_INT 28
37460: PUSH
37461: LD_VAR 0 5
37465: IN
37466: OR
37467: PUSH
37468: LD_INT 45
37470: PUSH
37471: LD_VAR 0 5
37475: IN
37476: OR
37477: AND
37478: IFFALSE 37732
// begin hex := GetHexInfo ( x , y ) ;
37480: LD_ADDR_VAR 0 4
37484: PUSH
37485: LD_VAR 0 10
37489: PPUSH
37490: LD_VAR 0 11
37494: PPUSH
37495: CALL_OW 546
37499: ST_TO_ADDR
// if hex [ 1 ] then
37500: LD_VAR 0 4
37504: PUSH
37505: LD_INT 1
37507: ARRAY
37508: IFFALSE 37512
// exit ;
37510: GO 37915
// height := hex [ 2 ] ;
37512: LD_ADDR_VAR 0 15
37516: PUSH
37517: LD_VAR 0 4
37521: PUSH
37522: LD_INT 2
37524: ARRAY
37525: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
37526: LD_ADDR_VAR 0 14
37530: PUSH
37531: LD_INT 0
37533: PUSH
37534: LD_INT 2
37536: PUSH
37537: LD_INT 3
37539: PUSH
37540: LD_INT 5
37542: PUSH
37543: EMPTY
37544: LIST
37545: LIST
37546: LIST
37547: LIST
37548: ST_TO_ADDR
// for i in tmp do
37549: LD_ADDR_VAR 0 8
37553: PUSH
37554: LD_VAR 0 14
37558: PUSH
37559: FOR_IN
37560: IFFALSE 37730
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
37562: LD_ADDR_VAR 0 9
37566: PUSH
37567: LD_VAR 0 10
37571: PPUSH
37572: LD_VAR 0 8
37576: PPUSH
37577: LD_INT 5
37579: PPUSH
37580: CALL_OW 272
37584: PUSH
37585: LD_VAR 0 11
37589: PPUSH
37590: LD_VAR 0 8
37594: PPUSH
37595: LD_INT 5
37597: PPUSH
37598: CALL_OW 273
37602: PUSH
37603: EMPTY
37604: LIST
37605: LIST
37606: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
37607: LD_VAR 0 9
37611: PUSH
37612: LD_INT 1
37614: ARRAY
37615: PPUSH
37616: LD_VAR 0 9
37620: PUSH
37621: LD_INT 2
37623: ARRAY
37624: PPUSH
37625: CALL_OW 488
37629: IFFALSE 37728
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
37631: LD_ADDR_VAR 0 4
37635: PUSH
37636: LD_VAR 0 9
37640: PUSH
37641: LD_INT 1
37643: ARRAY
37644: PPUSH
37645: LD_VAR 0 9
37649: PUSH
37650: LD_INT 2
37652: ARRAY
37653: PPUSH
37654: CALL_OW 546
37658: ST_TO_ADDR
// if hex [ 1 ] then
37659: LD_VAR 0 4
37663: PUSH
37664: LD_INT 1
37666: ARRAY
37667: IFFALSE 37671
// continue ;
37669: GO 37559
// h := hex [ 2 ] ;
37671: LD_ADDR_VAR 0 13
37675: PUSH
37676: LD_VAR 0 4
37680: PUSH
37681: LD_INT 2
37683: ARRAY
37684: ST_TO_ADDR
// if h + 7 < height then
37685: LD_VAR 0 13
37689: PUSH
37690: LD_INT 7
37692: PLUS
37693: PUSH
37694: LD_VAR 0 15
37698: LESS
37699: IFFALSE 37728
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
37701: LD_ADDR_VAR 0 18
37705: PUSH
37706: LD_INT 7
37708: PUSH
37709: LD_INT 28
37711: PUSH
37712: LD_INT 45
37714: PUSH
37715: EMPTY
37716: LIST
37717: LIST
37718: LIST
37719: PUSH
37720: LD_VAR 0 12
37724: ARRAY
37725: ST_TO_ADDR
// break ;
37726: GO 37730
// end ; end ; end ;
37728: GO 37559
37730: POP
37731: POP
// end ; if not weapon then
37732: LD_VAR 0 18
37736: NOT
37737: IFFALSE 37797
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
37739: LD_ADDR_VAR 0 5
37743: PUSH
37744: LD_VAR 0 5
37748: PUSH
37749: LD_INT 11
37751: PUSH
37752: LD_INT 30
37754: PUSH
37755: LD_INT 49
37757: PUSH
37758: EMPTY
37759: LIST
37760: LIST
37761: LIST
37762: DIFF
37763: ST_TO_ADDR
// if not list then
37764: LD_VAR 0 5
37768: NOT
37769: IFFALSE 37773
// exit ;
37771: GO 37915
// weapon := list [ rand ( 1 , list ) ] ;
37773: LD_ADDR_VAR 0 18
37777: PUSH
37778: LD_VAR 0 5
37782: PUSH
37783: LD_INT 1
37785: PPUSH
37786: LD_VAR 0 5
37790: PPUSH
37791: CALL_OW 12
37795: ARRAY
37796: ST_TO_ADDR
// end ; if weapon then
37797: LD_VAR 0 18
37801: IFFALSE 37915
// begin tmp := CostOfWeapon ( weapon ) ;
37803: LD_ADDR_VAR 0 14
37807: PUSH
37808: LD_VAR 0 18
37812: PPUSH
37813: CALL_OW 451
37817: ST_TO_ADDR
// j := GetBase ( tower ) ;
37818: LD_ADDR_VAR 0 9
37822: PUSH
37823: LD_VAR 0 1
37827: PPUSH
37828: CALL_OW 274
37832: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
37833: LD_VAR 0 9
37837: PPUSH
37838: LD_INT 1
37840: PPUSH
37841: CALL_OW 275
37845: PUSH
37846: LD_VAR 0 14
37850: PUSH
37851: LD_INT 1
37853: ARRAY
37854: GREATEREQUAL
37855: PUSH
37856: LD_VAR 0 9
37860: PPUSH
37861: LD_INT 2
37863: PPUSH
37864: CALL_OW 275
37868: PUSH
37869: LD_VAR 0 14
37873: PUSH
37874: LD_INT 2
37876: ARRAY
37877: GREATEREQUAL
37878: AND
37879: PUSH
37880: LD_VAR 0 9
37884: PPUSH
37885: LD_INT 3
37887: PPUSH
37888: CALL_OW 275
37892: PUSH
37893: LD_VAR 0 14
37897: PUSH
37898: LD_INT 3
37900: ARRAY
37901: GREATEREQUAL
37902: AND
37903: IFFALSE 37915
// result := weapon ;
37905: LD_ADDR_VAR 0 3
37909: PUSH
37910: LD_VAR 0 18
37914: ST_TO_ADDR
// end ; end ;
37915: LD_VAR 0 3
37919: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
37920: LD_INT 0
37922: PPUSH
37923: PPUSH
// result := true ;
37924: LD_ADDR_VAR 0 3
37928: PUSH
37929: LD_INT 1
37931: ST_TO_ADDR
// if array1 = array2 then
37932: LD_VAR 0 1
37936: PUSH
37937: LD_VAR 0 2
37941: EQUAL
37942: IFFALSE 38002
// begin for i = 1 to array1 do
37944: LD_ADDR_VAR 0 4
37948: PUSH
37949: DOUBLE
37950: LD_INT 1
37952: DEC
37953: ST_TO_ADDR
37954: LD_VAR 0 1
37958: PUSH
37959: FOR_TO
37960: IFFALSE 37998
// if array1 [ i ] <> array2 [ i ] then
37962: LD_VAR 0 1
37966: PUSH
37967: LD_VAR 0 4
37971: ARRAY
37972: PUSH
37973: LD_VAR 0 2
37977: PUSH
37978: LD_VAR 0 4
37982: ARRAY
37983: NONEQUAL
37984: IFFALSE 37996
// begin result := false ;
37986: LD_ADDR_VAR 0 3
37990: PUSH
37991: LD_INT 0
37993: ST_TO_ADDR
// break ;
37994: GO 37998
// end ;
37996: GO 37959
37998: POP
37999: POP
// end else
38000: GO 38010
// result := false ;
38002: LD_ADDR_VAR 0 3
38006: PUSH
38007: LD_INT 0
38009: ST_TO_ADDR
// end ;
38010: LD_VAR 0 3
38014: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
38015: LD_INT 0
38017: PPUSH
38018: PPUSH
// if not array1 or not array2 then
38019: LD_VAR 0 1
38023: NOT
38024: PUSH
38025: LD_VAR 0 2
38029: NOT
38030: OR
38031: IFFALSE 38035
// exit ;
38033: GO 38099
// result := true ;
38035: LD_ADDR_VAR 0 3
38039: PUSH
38040: LD_INT 1
38042: ST_TO_ADDR
// for i = 1 to array1 do
38043: LD_ADDR_VAR 0 4
38047: PUSH
38048: DOUBLE
38049: LD_INT 1
38051: DEC
38052: ST_TO_ADDR
38053: LD_VAR 0 1
38057: PUSH
38058: FOR_TO
38059: IFFALSE 38097
// if array1 [ i ] <> array2 [ i ] then
38061: LD_VAR 0 1
38065: PUSH
38066: LD_VAR 0 4
38070: ARRAY
38071: PUSH
38072: LD_VAR 0 2
38076: PUSH
38077: LD_VAR 0 4
38081: ARRAY
38082: NONEQUAL
38083: IFFALSE 38095
// begin result := false ;
38085: LD_ADDR_VAR 0 3
38089: PUSH
38090: LD_INT 0
38092: ST_TO_ADDR
// break ;
38093: GO 38097
// end ;
38095: GO 38058
38097: POP
38098: POP
// end ;
38099: LD_VAR 0 3
38103: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
38104: LD_INT 0
38106: PPUSH
38107: PPUSH
38108: PPUSH
// pom := GetBase ( fac ) ;
38109: LD_ADDR_VAR 0 5
38113: PUSH
38114: LD_VAR 0 1
38118: PPUSH
38119: CALL_OW 274
38123: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
38124: LD_ADDR_VAR 0 4
38128: PUSH
38129: LD_VAR 0 2
38133: PUSH
38134: LD_INT 1
38136: ARRAY
38137: PPUSH
38138: LD_VAR 0 2
38142: PUSH
38143: LD_INT 2
38145: ARRAY
38146: PPUSH
38147: LD_VAR 0 2
38151: PUSH
38152: LD_INT 3
38154: ARRAY
38155: PPUSH
38156: LD_VAR 0 2
38160: PUSH
38161: LD_INT 4
38163: ARRAY
38164: PPUSH
38165: CALL_OW 449
38169: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38170: LD_ADDR_VAR 0 3
38174: PUSH
38175: LD_VAR 0 5
38179: PPUSH
38180: LD_INT 1
38182: PPUSH
38183: CALL_OW 275
38187: PUSH
38188: LD_VAR 0 4
38192: PUSH
38193: LD_INT 1
38195: ARRAY
38196: GREATEREQUAL
38197: PUSH
38198: LD_VAR 0 5
38202: PPUSH
38203: LD_INT 2
38205: PPUSH
38206: CALL_OW 275
38210: PUSH
38211: LD_VAR 0 4
38215: PUSH
38216: LD_INT 2
38218: ARRAY
38219: GREATEREQUAL
38220: AND
38221: PUSH
38222: LD_VAR 0 5
38226: PPUSH
38227: LD_INT 3
38229: PPUSH
38230: CALL_OW 275
38234: PUSH
38235: LD_VAR 0 4
38239: PUSH
38240: LD_INT 3
38242: ARRAY
38243: GREATEREQUAL
38244: AND
38245: ST_TO_ADDR
// end ;
38246: LD_VAR 0 3
38250: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
38251: LD_INT 0
38253: PPUSH
38254: PPUSH
38255: PPUSH
38256: PPUSH
// pom := GetBase ( building ) ;
38257: LD_ADDR_VAR 0 3
38261: PUSH
38262: LD_VAR 0 1
38266: PPUSH
38267: CALL_OW 274
38271: ST_TO_ADDR
// if not pom then
38272: LD_VAR 0 3
38276: NOT
38277: IFFALSE 38281
// exit ;
38279: GO 38451
// btype := GetBType ( building ) ;
38281: LD_ADDR_VAR 0 5
38285: PUSH
38286: LD_VAR 0 1
38290: PPUSH
38291: CALL_OW 266
38295: ST_TO_ADDR
// if btype = b_armoury then
38296: LD_VAR 0 5
38300: PUSH
38301: LD_INT 4
38303: EQUAL
38304: IFFALSE 38314
// btype := b_barracks ;
38306: LD_ADDR_VAR 0 5
38310: PUSH
38311: LD_INT 5
38313: ST_TO_ADDR
// if btype = b_depot then
38314: LD_VAR 0 5
38318: PUSH
38319: LD_INT 0
38321: EQUAL
38322: IFFALSE 38332
// btype := b_warehouse ;
38324: LD_ADDR_VAR 0 5
38328: PUSH
38329: LD_INT 1
38331: ST_TO_ADDR
// if btype = b_workshop then
38332: LD_VAR 0 5
38336: PUSH
38337: LD_INT 2
38339: EQUAL
38340: IFFALSE 38350
// btype := b_factory ;
38342: LD_ADDR_VAR 0 5
38346: PUSH
38347: LD_INT 3
38349: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38350: LD_ADDR_VAR 0 4
38354: PUSH
38355: LD_VAR 0 5
38359: PPUSH
38360: LD_VAR 0 1
38364: PPUSH
38365: CALL_OW 248
38369: PPUSH
38370: CALL_OW 450
38374: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38375: LD_ADDR_VAR 0 2
38379: PUSH
38380: LD_VAR 0 3
38384: PPUSH
38385: LD_INT 1
38387: PPUSH
38388: CALL_OW 275
38392: PUSH
38393: LD_VAR 0 4
38397: PUSH
38398: LD_INT 1
38400: ARRAY
38401: GREATEREQUAL
38402: PUSH
38403: LD_VAR 0 3
38407: PPUSH
38408: LD_INT 2
38410: PPUSH
38411: CALL_OW 275
38415: PUSH
38416: LD_VAR 0 4
38420: PUSH
38421: LD_INT 2
38423: ARRAY
38424: GREATEREQUAL
38425: AND
38426: PUSH
38427: LD_VAR 0 3
38431: PPUSH
38432: LD_INT 3
38434: PPUSH
38435: CALL_OW 275
38439: PUSH
38440: LD_VAR 0 4
38444: PUSH
38445: LD_INT 3
38447: ARRAY
38448: GREATEREQUAL
38449: AND
38450: ST_TO_ADDR
// end ;
38451: LD_VAR 0 2
38455: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
38456: LD_INT 0
38458: PPUSH
38459: PPUSH
38460: PPUSH
// pom := GetBase ( building ) ;
38461: LD_ADDR_VAR 0 4
38465: PUSH
38466: LD_VAR 0 1
38470: PPUSH
38471: CALL_OW 274
38475: ST_TO_ADDR
// if not pom then
38476: LD_VAR 0 4
38480: NOT
38481: IFFALSE 38485
// exit ;
38483: GO 38586
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38485: LD_ADDR_VAR 0 5
38489: PUSH
38490: LD_VAR 0 2
38494: PPUSH
38495: LD_VAR 0 1
38499: PPUSH
38500: CALL_OW 248
38504: PPUSH
38505: CALL_OW 450
38509: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38510: LD_ADDR_VAR 0 3
38514: PUSH
38515: LD_VAR 0 4
38519: PPUSH
38520: LD_INT 1
38522: PPUSH
38523: CALL_OW 275
38527: PUSH
38528: LD_VAR 0 5
38532: PUSH
38533: LD_INT 1
38535: ARRAY
38536: GREATEREQUAL
38537: PUSH
38538: LD_VAR 0 4
38542: PPUSH
38543: LD_INT 2
38545: PPUSH
38546: CALL_OW 275
38550: PUSH
38551: LD_VAR 0 5
38555: PUSH
38556: LD_INT 2
38558: ARRAY
38559: GREATEREQUAL
38560: AND
38561: PUSH
38562: LD_VAR 0 4
38566: PPUSH
38567: LD_INT 3
38569: PPUSH
38570: CALL_OW 275
38574: PUSH
38575: LD_VAR 0 5
38579: PUSH
38580: LD_INT 3
38582: ARRAY
38583: GREATEREQUAL
38584: AND
38585: ST_TO_ADDR
// end ;
38586: LD_VAR 0 3
38590: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
38591: LD_INT 0
38593: PPUSH
38594: PPUSH
38595: PPUSH
38596: PPUSH
38597: PPUSH
38598: PPUSH
38599: PPUSH
38600: PPUSH
38601: PPUSH
38602: PPUSH
38603: PPUSH
// result := false ;
38604: LD_ADDR_VAR 0 8
38608: PUSH
38609: LD_INT 0
38611: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
38612: LD_VAR 0 5
38616: NOT
38617: PUSH
38618: LD_VAR 0 1
38622: NOT
38623: OR
38624: PUSH
38625: LD_VAR 0 2
38629: NOT
38630: OR
38631: PUSH
38632: LD_VAR 0 3
38636: NOT
38637: OR
38638: IFFALSE 38642
// exit ;
38640: GO 39456
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
38642: LD_ADDR_VAR 0 14
38646: PUSH
38647: LD_VAR 0 1
38651: PPUSH
38652: LD_VAR 0 2
38656: PPUSH
38657: LD_VAR 0 3
38661: PPUSH
38662: LD_VAR 0 4
38666: PPUSH
38667: LD_VAR 0 5
38671: PUSH
38672: LD_INT 1
38674: ARRAY
38675: PPUSH
38676: CALL_OW 248
38680: PPUSH
38681: LD_INT 0
38683: PPUSH
38684: CALL 40709 0 6
38688: ST_TO_ADDR
// if not hexes then
38689: LD_VAR 0 14
38693: NOT
38694: IFFALSE 38698
// exit ;
38696: GO 39456
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
38698: LD_ADDR_VAR 0 17
38702: PUSH
38703: LD_VAR 0 5
38707: PPUSH
38708: LD_INT 22
38710: PUSH
38711: LD_VAR 0 13
38715: PPUSH
38716: CALL_OW 255
38720: PUSH
38721: EMPTY
38722: LIST
38723: LIST
38724: PUSH
38725: LD_INT 2
38727: PUSH
38728: LD_INT 30
38730: PUSH
38731: LD_INT 0
38733: PUSH
38734: EMPTY
38735: LIST
38736: LIST
38737: PUSH
38738: LD_INT 30
38740: PUSH
38741: LD_INT 1
38743: PUSH
38744: EMPTY
38745: LIST
38746: LIST
38747: PUSH
38748: EMPTY
38749: LIST
38750: LIST
38751: LIST
38752: PUSH
38753: EMPTY
38754: LIST
38755: LIST
38756: PPUSH
38757: CALL_OW 72
38761: ST_TO_ADDR
// for i = 1 to hexes do
38762: LD_ADDR_VAR 0 9
38766: PUSH
38767: DOUBLE
38768: LD_INT 1
38770: DEC
38771: ST_TO_ADDR
38772: LD_VAR 0 14
38776: PUSH
38777: FOR_TO
38778: IFFALSE 39454
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38780: LD_ADDR_VAR 0 13
38784: PUSH
38785: LD_VAR 0 14
38789: PUSH
38790: LD_VAR 0 9
38794: ARRAY
38795: PUSH
38796: LD_INT 1
38798: ARRAY
38799: PPUSH
38800: LD_VAR 0 14
38804: PUSH
38805: LD_VAR 0 9
38809: ARRAY
38810: PUSH
38811: LD_INT 2
38813: ARRAY
38814: PPUSH
38815: CALL_OW 428
38819: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
38820: LD_VAR 0 14
38824: PUSH
38825: LD_VAR 0 9
38829: ARRAY
38830: PUSH
38831: LD_INT 1
38833: ARRAY
38834: PPUSH
38835: LD_VAR 0 14
38839: PUSH
38840: LD_VAR 0 9
38844: ARRAY
38845: PUSH
38846: LD_INT 2
38848: ARRAY
38849: PPUSH
38850: CALL_OW 351
38854: PUSH
38855: LD_VAR 0 14
38859: PUSH
38860: LD_VAR 0 9
38864: ARRAY
38865: PUSH
38866: LD_INT 1
38868: ARRAY
38869: PPUSH
38870: LD_VAR 0 14
38874: PUSH
38875: LD_VAR 0 9
38879: ARRAY
38880: PUSH
38881: LD_INT 2
38883: ARRAY
38884: PPUSH
38885: CALL_OW 488
38889: NOT
38890: OR
38891: PUSH
38892: LD_VAR 0 13
38896: PPUSH
38897: CALL_OW 247
38901: PUSH
38902: LD_INT 3
38904: EQUAL
38905: OR
38906: IFFALSE 38912
// exit ;
38908: POP
38909: POP
38910: GO 39456
// if not tmp then
38912: LD_VAR 0 13
38916: NOT
38917: IFFALSE 38921
// continue ;
38919: GO 38777
// result := true ;
38921: LD_ADDR_VAR 0 8
38925: PUSH
38926: LD_INT 1
38928: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
38929: LD_VAR 0 6
38933: PUSH
38934: LD_VAR 0 13
38938: PPUSH
38939: CALL_OW 247
38943: PUSH
38944: LD_INT 2
38946: EQUAL
38947: AND
38948: PUSH
38949: LD_VAR 0 13
38953: PPUSH
38954: CALL_OW 263
38958: PUSH
38959: LD_INT 1
38961: EQUAL
38962: AND
38963: IFFALSE 39127
// begin if IsDrivenBy ( tmp ) then
38965: LD_VAR 0 13
38969: PPUSH
38970: CALL_OW 311
38974: IFFALSE 38978
// continue ;
38976: GO 38777
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
38978: LD_VAR 0 6
38982: PPUSH
38983: LD_INT 3
38985: PUSH
38986: LD_INT 60
38988: PUSH
38989: EMPTY
38990: LIST
38991: PUSH
38992: EMPTY
38993: LIST
38994: LIST
38995: PUSH
38996: LD_INT 3
38998: PUSH
38999: LD_INT 55
39001: PUSH
39002: EMPTY
39003: LIST
39004: PUSH
39005: EMPTY
39006: LIST
39007: LIST
39008: PUSH
39009: EMPTY
39010: LIST
39011: LIST
39012: PPUSH
39013: CALL_OW 72
39017: IFFALSE 39125
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
39019: LD_ADDR_VAR 0 18
39023: PUSH
39024: LD_VAR 0 6
39028: PPUSH
39029: LD_INT 3
39031: PUSH
39032: LD_INT 60
39034: PUSH
39035: EMPTY
39036: LIST
39037: PUSH
39038: EMPTY
39039: LIST
39040: LIST
39041: PUSH
39042: LD_INT 3
39044: PUSH
39045: LD_INT 55
39047: PUSH
39048: EMPTY
39049: LIST
39050: PUSH
39051: EMPTY
39052: LIST
39053: LIST
39054: PUSH
39055: EMPTY
39056: LIST
39057: LIST
39058: PPUSH
39059: CALL_OW 72
39063: PUSH
39064: LD_INT 1
39066: ARRAY
39067: ST_TO_ADDR
// if IsInUnit ( driver ) then
39068: LD_VAR 0 18
39072: PPUSH
39073: CALL_OW 310
39077: IFFALSE 39088
// ComExit ( driver ) ;
39079: LD_VAR 0 18
39083: PPUSH
39084: CALL 64501 0 1
// AddComEnterUnit ( driver , tmp ) ;
39088: LD_VAR 0 18
39092: PPUSH
39093: LD_VAR 0 13
39097: PPUSH
39098: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
39102: LD_VAR 0 18
39106: PPUSH
39107: LD_VAR 0 7
39111: PPUSH
39112: CALL_OW 173
// AddComExitVehicle ( driver ) ;
39116: LD_VAR 0 18
39120: PPUSH
39121: CALL_OW 181
// end ; continue ;
39125: GO 38777
// end ; if not cleaners or not tmp in cleaners then
39127: LD_VAR 0 6
39131: NOT
39132: PUSH
39133: LD_VAR 0 13
39137: PUSH
39138: LD_VAR 0 6
39142: IN
39143: NOT
39144: OR
39145: IFFALSE 39452
// begin if dep then
39147: LD_VAR 0 17
39151: IFFALSE 39287
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
39153: LD_ADDR_VAR 0 16
39157: PUSH
39158: LD_VAR 0 17
39162: PUSH
39163: LD_INT 1
39165: ARRAY
39166: PPUSH
39167: CALL_OW 250
39171: PPUSH
39172: LD_VAR 0 17
39176: PUSH
39177: LD_INT 1
39179: ARRAY
39180: PPUSH
39181: CALL_OW 254
39185: PPUSH
39186: LD_INT 5
39188: PPUSH
39189: CALL_OW 272
39193: PUSH
39194: LD_VAR 0 17
39198: PUSH
39199: LD_INT 1
39201: ARRAY
39202: PPUSH
39203: CALL_OW 251
39207: PPUSH
39208: LD_VAR 0 17
39212: PUSH
39213: LD_INT 1
39215: ARRAY
39216: PPUSH
39217: CALL_OW 254
39221: PPUSH
39222: LD_INT 5
39224: PPUSH
39225: CALL_OW 273
39229: PUSH
39230: EMPTY
39231: LIST
39232: LIST
39233: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
39234: LD_VAR 0 16
39238: PUSH
39239: LD_INT 1
39241: ARRAY
39242: PPUSH
39243: LD_VAR 0 16
39247: PUSH
39248: LD_INT 2
39250: ARRAY
39251: PPUSH
39252: CALL_OW 488
39256: IFFALSE 39287
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
39258: LD_VAR 0 13
39262: PPUSH
39263: LD_VAR 0 16
39267: PUSH
39268: LD_INT 1
39270: ARRAY
39271: PPUSH
39272: LD_VAR 0 16
39276: PUSH
39277: LD_INT 2
39279: ARRAY
39280: PPUSH
39281: CALL_OW 111
// continue ;
39285: GO 38777
// end ; end ; r := GetDir ( tmp ) ;
39287: LD_ADDR_VAR 0 15
39291: PUSH
39292: LD_VAR 0 13
39296: PPUSH
39297: CALL_OW 254
39301: ST_TO_ADDR
// if r = 5 then
39302: LD_VAR 0 15
39306: PUSH
39307: LD_INT 5
39309: EQUAL
39310: IFFALSE 39320
// r := 0 ;
39312: LD_ADDR_VAR 0 15
39316: PUSH
39317: LD_INT 0
39319: ST_TO_ADDR
// for j = r to 5 do
39320: LD_ADDR_VAR 0 10
39324: PUSH
39325: DOUBLE
39326: LD_VAR 0 15
39330: DEC
39331: ST_TO_ADDR
39332: LD_INT 5
39334: PUSH
39335: FOR_TO
39336: IFFALSE 39450
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
39338: LD_ADDR_VAR 0 11
39342: PUSH
39343: LD_VAR 0 13
39347: PPUSH
39348: CALL_OW 250
39352: PPUSH
39353: LD_VAR 0 10
39357: PPUSH
39358: LD_INT 2
39360: PPUSH
39361: CALL_OW 272
39365: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
39366: LD_ADDR_VAR 0 12
39370: PUSH
39371: LD_VAR 0 13
39375: PPUSH
39376: CALL_OW 251
39380: PPUSH
39381: LD_VAR 0 10
39385: PPUSH
39386: LD_INT 2
39388: PPUSH
39389: CALL_OW 273
39393: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
39394: LD_VAR 0 11
39398: PPUSH
39399: LD_VAR 0 12
39403: PPUSH
39404: CALL_OW 488
39408: PUSH
39409: LD_VAR 0 11
39413: PPUSH
39414: LD_VAR 0 12
39418: PPUSH
39419: CALL_OW 428
39423: NOT
39424: AND
39425: IFFALSE 39448
// begin ComMoveXY ( tmp , _x , _y ) ;
39427: LD_VAR 0 13
39431: PPUSH
39432: LD_VAR 0 11
39436: PPUSH
39437: LD_VAR 0 12
39441: PPUSH
39442: CALL_OW 111
// break ;
39446: GO 39450
// end ; end ;
39448: GO 39335
39450: POP
39451: POP
// end ; end ;
39452: GO 38777
39454: POP
39455: POP
// end ;
39456: LD_VAR 0 8
39460: RET
// export function BuildingTechInvented ( side , btype ) ; begin
39461: LD_INT 0
39463: PPUSH
// result := true ;
39464: LD_ADDR_VAR 0 3
39468: PUSH
39469: LD_INT 1
39471: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
39472: LD_VAR 0 2
39476: PUSH
39477: LD_INT 24
39479: DOUBLE
39480: EQUAL
39481: IFTRUE 39491
39483: LD_INT 33
39485: DOUBLE
39486: EQUAL
39487: IFTRUE 39491
39489: GO 39516
39491: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
39492: LD_ADDR_VAR 0 3
39496: PUSH
39497: LD_INT 32
39499: PPUSH
39500: LD_VAR 0 1
39504: PPUSH
39505: CALL_OW 321
39509: PUSH
39510: LD_INT 2
39512: EQUAL
39513: ST_TO_ADDR
39514: GO 39832
39516: LD_INT 20
39518: DOUBLE
39519: EQUAL
39520: IFTRUE 39524
39522: GO 39549
39524: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
39525: LD_ADDR_VAR 0 3
39529: PUSH
39530: LD_INT 6
39532: PPUSH
39533: LD_VAR 0 1
39537: PPUSH
39538: CALL_OW 321
39542: PUSH
39543: LD_INT 2
39545: EQUAL
39546: ST_TO_ADDR
39547: GO 39832
39549: LD_INT 22
39551: DOUBLE
39552: EQUAL
39553: IFTRUE 39563
39555: LD_INT 36
39557: DOUBLE
39558: EQUAL
39559: IFTRUE 39563
39561: GO 39588
39563: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
39564: LD_ADDR_VAR 0 3
39568: PUSH
39569: LD_INT 15
39571: PPUSH
39572: LD_VAR 0 1
39576: PPUSH
39577: CALL_OW 321
39581: PUSH
39582: LD_INT 2
39584: EQUAL
39585: ST_TO_ADDR
39586: GO 39832
39588: LD_INT 30
39590: DOUBLE
39591: EQUAL
39592: IFTRUE 39596
39594: GO 39621
39596: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
39597: LD_ADDR_VAR 0 3
39601: PUSH
39602: LD_INT 20
39604: PPUSH
39605: LD_VAR 0 1
39609: PPUSH
39610: CALL_OW 321
39614: PUSH
39615: LD_INT 2
39617: EQUAL
39618: ST_TO_ADDR
39619: GO 39832
39621: LD_INT 28
39623: DOUBLE
39624: EQUAL
39625: IFTRUE 39635
39627: LD_INT 21
39629: DOUBLE
39630: EQUAL
39631: IFTRUE 39635
39633: GO 39660
39635: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
39636: LD_ADDR_VAR 0 3
39640: PUSH
39641: LD_INT 21
39643: PPUSH
39644: LD_VAR 0 1
39648: PPUSH
39649: CALL_OW 321
39653: PUSH
39654: LD_INT 2
39656: EQUAL
39657: ST_TO_ADDR
39658: GO 39832
39660: LD_INT 16
39662: DOUBLE
39663: EQUAL
39664: IFTRUE 39668
39666: GO 39693
39668: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
39669: LD_ADDR_VAR 0 3
39673: PUSH
39674: LD_INT 84
39676: PPUSH
39677: LD_VAR 0 1
39681: PPUSH
39682: CALL_OW 321
39686: PUSH
39687: LD_INT 2
39689: EQUAL
39690: ST_TO_ADDR
39691: GO 39832
39693: LD_INT 19
39695: DOUBLE
39696: EQUAL
39697: IFTRUE 39707
39699: LD_INT 23
39701: DOUBLE
39702: EQUAL
39703: IFTRUE 39707
39705: GO 39732
39707: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
39708: LD_ADDR_VAR 0 3
39712: PUSH
39713: LD_INT 83
39715: PPUSH
39716: LD_VAR 0 1
39720: PPUSH
39721: CALL_OW 321
39725: PUSH
39726: LD_INT 2
39728: EQUAL
39729: ST_TO_ADDR
39730: GO 39832
39732: LD_INT 17
39734: DOUBLE
39735: EQUAL
39736: IFTRUE 39740
39738: GO 39765
39740: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
39741: LD_ADDR_VAR 0 3
39745: PUSH
39746: LD_INT 39
39748: PPUSH
39749: LD_VAR 0 1
39753: PPUSH
39754: CALL_OW 321
39758: PUSH
39759: LD_INT 2
39761: EQUAL
39762: ST_TO_ADDR
39763: GO 39832
39765: LD_INT 18
39767: DOUBLE
39768: EQUAL
39769: IFTRUE 39773
39771: GO 39798
39773: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
39774: LD_ADDR_VAR 0 3
39778: PUSH
39779: LD_INT 40
39781: PPUSH
39782: LD_VAR 0 1
39786: PPUSH
39787: CALL_OW 321
39791: PUSH
39792: LD_INT 2
39794: EQUAL
39795: ST_TO_ADDR
39796: GO 39832
39798: LD_INT 27
39800: DOUBLE
39801: EQUAL
39802: IFTRUE 39806
39804: GO 39831
39806: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
39807: LD_ADDR_VAR 0 3
39811: PUSH
39812: LD_INT 35
39814: PPUSH
39815: LD_VAR 0 1
39819: PPUSH
39820: CALL_OW 321
39824: PUSH
39825: LD_INT 2
39827: EQUAL
39828: ST_TO_ADDR
39829: GO 39832
39831: POP
// end ;
39832: LD_VAR 0 3
39836: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
39837: LD_INT 0
39839: PPUSH
39840: PPUSH
39841: PPUSH
39842: PPUSH
39843: PPUSH
39844: PPUSH
39845: PPUSH
39846: PPUSH
39847: PPUSH
39848: PPUSH
39849: PPUSH
// result := false ;
39850: LD_ADDR_VAR 0 6
39854: PUSH
39855: LD_INT 0
39857: ST_TO_ADDR
// if btype = b_depot then
39858: LD_VAR 0 2
39862: PUSH
39863: LD_INT 0
39865: EQUAL
39866: IFFALSE 39878
// begin result := true ;
39868: LD_ADDR_VAR 0 6
39872: PUSH
39873: LD_INT 1
39875: ST_TO_ADDR
// exit ;
39876: GO 40704
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
39878: LD_VAR 0 1
39882: NOT
39883: PUSH
39884: LD_VAR 0 1
39888: PPUSH
39889: CALL_OW 266
39893: PUSH
39894: LD_INT 0
39896: PUSH
39897: LD_INT 1
39899: PUSH
39900: EMPTY
39901: LIST
39902: LIST
39903: IN
39904: NOT
39905: OR
39906: PUSH
39907: LD_VAR 0 2
39911: NOT
39912: OR
39913: PUSH
39914: LD_VAR 0 5
39918: PUSH
39919: LD_INT 0
39921: PUSH
39922: LD_INT 1
39924: PUSH
39925: LD_INT 2
39927: PUSH
39928: LD_INT 3
39930: PUSH
39931: LD_INT 4
39933: PUSH
39934: LD_INT 5
39936: PUSH
39937: EMPTY
39938: LIST
39939: LIST
39940: LIST
39941: LIST
39942: LIST
39943: LIST
39944: IN
39945: NOT
39946: OR
39947: PUSH
39948: LD_VAR 0 3
39952: PPUSH
39953: LD_VAR 0 4
39957: PPUSH
39958: CALL_OW 488
39962: NOT
39963: OR
39964: IFFALSE 39968
// exit ;
39966: GO 40704
// side := GetSide ( depot ) ;
39968: LD_ADDR_VAR 0 9
39972: PUSH
39973: LD_VAR 0 1
39977: PPUSH
39978: CALL_OW 255
39982: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
39983: LD_VAR 0 9
39987: PPUSH
39988: LD_VAR 0 2
39992: PPUSH
39993: CALL 39461 0 2
39997: NOT
39998: IFFALSE 40002
// exit ;
40000: GO 40704
// pom := GetBase ( depot ) ;
40002: LD_ADDR_VAR 0 10
40006: PUSH
40007: LD_VAR 0 1
40011: PPUSH
40012: CALL_OW 274
40016: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
40017: LD_ADDR_VAR 0 11
40021: PUSH
40022: LD_VAR 0 2
40026: PPUSH
40027: LD_VAR 0 1
40031: PPUSH
40032: CALL_OW 248
40036: PPUSH
40037: CALL_OW 450
40041: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
40042: LD_VAR 0 10
40046: PPUSH
40047: LD_INT 1
40049: PPUSH
40050: CALL_OW 275
40054: PUSH
40055: LD_VAR 0 11
40059: PUSH
40060: LD_INT 1
40062: ARRAY
40063: GREATEREQUAL
40064: PUSH
40065: LD_VAR 0 10
40069: PPUSH
40070: LD_INT 2
40072: PPUSH
40073: CALL_OW 275
40077: PUSH
40078: LD_VAR 0 11
40082: PUSH
40083: LD_INT 2
40085: ARRAY
40086: GREATEREQUAL
40087: AND
40088: PUSH
40089: LD_VAR 0 10
40093: PPUSH
40094: LD_INT 3
40096: PPUSH
40097: CALL_OW 275
40101: PUSH
40102: LD_VAR 0 11
40106: PUSH
40107: LD_INT 3
40109: ARRAY
40110: GREATEREQUAL
40111: AND
40112: NOT
40113: IFFALSE 40117
// exit ;
40115: GO 40704
// if GetBType ( depot ) = b_depot then
40117: LD_VAR 0 1
40121: PPUSH
40122: CALL_OW 266
40126: PUSH
40127: LD_INT 0
40129: EQUAL
40130: IFFALSE 40142
// dist := 28 else
40132: LD_ADDR_VAR 0 14
40136: PUSH
40137: LD_INT 28
40139: ST_TO_ADDR
40140: GO 40150
// dist := 36 ;
40142: LD_ADDR_VAR 0 14
40146: PUSH
40147: LD_INT 36
40149: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
40150: LD_VAR 0 1
40154: PPUSH
40155: LD_VAR 0 3
40159: PPUSH
40160: LD_VAR 0 4
40164: PPUSH
40165: CALL_OW 297
40169: PUSH
40170: LD_VAR 0 14
40174: GREATER
40175: IFFALSE 40179
// exit ;
40177: GO 40704
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
40179: LD_ADDR_VAR 0 12
40183: PUSH
40184: LD_VAR 0 2
40188: PPUSH
40189: LD_VAR 0 3
40193: PPUSH
40194: LD_VAR 0 4
40198: PPUSH
40199: LD_VAR 0 5
40203: PPUSH
40204: LD_VAR 0 1
40208: PPUSH
40209: CALL_OW 248
40213: PPUSH
40214: LD_INT 0
40216: PPUSH
40217: CALL 40709 0 6
40221: ST_TO_ADDR
// if not hexes then
40222: LD_VAR 0 12
40226: NOT
40227: IFFALSE 40231
// exit ;
40229: GO 40704
// hex := GetHexInfo ( x , y ) ;
40231: LD_ADDR_VAR 0 15
40235: PUSH
40236: LD_VAR 0 3
40240: PPUSH
40241: LD_VAR 0 4
40245: PPUSH
40246: CALL_OW 546
40250: ST_TO_ADDR
// if hex [ 1 ] then
40251: LD_VAR 0 15
40255: PUSH
40256: LD_INT 1
40258: ARRAY
40259: IFFALSE 40263
// exit ;
40261: GO 40704
// height := hex [ 2 ] ;
40263: LD_ADDR_VAR 0 13
40267: PUSH
40268: LD_VAR 0 15
40272: PUSH
40273: LD_INT 2
40275: ARRAY
40276: ST_TO_ADDR
// for i = 1 to hexes do
40277: LD_ADDR_VAR 0 7
40281: PUSH
40282: DOUBLE
40283: LD_INT 1
40285: DEC
40286: ST_TO_ADDR
40287: LD_VAR 0 12
40291: PUSH
40292: FOR_TO
40293: IFFALSE 40623
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
40295: LD_VAR 0 12
40299: PUSH
40300: LD_VAR 0 7
40304: ARRAY
40305: PUSH
40306: LD_INT 1
40308: ARRAY
40309: PPUSH
40310: LD_VAR 0 12
40314: PUSH
40315: LD_VAR 0 7
40319: ARRAY
40320: PUSH
40321: LD_INT 2
40323: ARRAY
40324: PPUSH
40325: CALL_OW 488
40329: NOT
40330: PUSH
40331: LD_VAR 0 12
40335: PUSH
40336: LD_VAR 0 7
40340: ARRAY
40341: PUSH
40342: LD_INT 1
40344: ARRAY
40345: PPUSH
40346: LD_VAR 0 12
40350: PUSH
40351: LD_VAR 0 7
40355: ARRAY
40356: PUSH
40357: LD_INT 2
40359: ARRAY
40360: PPUSH
40361: CALL_OW 428
40365: PUSH
40366: LD_INT 0
40368: GREATER
40369: OR
40370: PUSH
40371: LD_VAR 0 12
40375: PUSH
40376: LD_VAR 0 7
40380: ARRAY
40381: PUSH
40382: LD_INT 1
40384: ARRAY
40385: PPUSH
40386: LD_VAR 0 12
40390: PUSH
40391: LD_VAR 0 7
40395: ARRAY
40396: PUSH
40397: LD_INT 2
40399: ARRAY
40400: PPUSH
40401: CALL_OW 351
40405: OR
40406: IFFALSE 40412
// exit ;
40408: POP
40409: POP
40410: GO 40704
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40412: LD_ADDR_VAR 0 8
40416: PUSH
40417: LD_VAR 0 12
40421: PUSH
40422: LD_VAR 0 7
40426: ARRAY
40427: PUSH
40428: LD_INT 1
40430: ARRAY
40431: PPUSH
40432: LD_VAR 0 12
40436: PUSH
40437: LD_VAR 0 7
40441: ARRAY
40442: PUSH
40443: LD_INT 2
40445: ARRAY
40446: PPUSH
40447: CALL_OW 546
40451: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
40452: LD_VAR 0 8
40456: PUSH
40457: LD_INT 1
40459: ARRAY
40460: PUSH
40461: LD_VAR 0 8
40465: PUSH
40466: LD_INT 2
40468: ARRAY
40469: PUSH
40470: LD_VAR 0 13
40474: PUSH
40475: LD_INT 2
40477: PLUS
40478: GREATER
40479: OR
40480: PUSH
40481: LD_VAR 0 8
40485: PUSH
40486: LD_INT 2
40488: ARRAY
40489: PUSH
40490: LD_VAR 0 13
40494: PUSH
40495: LD_INT 2
40497: MINUS
40498: LESS
40499: OR
40500: PUSH
40501: LD_VAR 0 8
40505: PUSH
40506: LD_INT 3
40508: ARRAY
40509: PUSH
40510: LD_INT 0
40512: PUSH
40513: LD_INT 8
40515: PUSH
40516: LD_INT 9
40518: PUSH
40519: LD_INT 10
40521: PUSH
40522: LD_INT 11
40524: PUSH
40525: LD_INT 12
40527: PUSH
40528: LD_INT 13
40530: PUSH
40531: LD_INT 16
40533: PUSH
40534: LD_INT 17
40536: PUSH
40537: LD_INT 18
40539: PUSH
40540: LD_INT 19
40542: PUSH
40543: LD_INT 20
40545: PUSH
40546: LD_INT 21
40548: PUSH
40549: EMPTY
40550: LIST
40551: LIST
40552: LIST
40553: LIST
40554: LIST
40555: LIST
40556: LIST
40557: LIST
40558: LIST
40559: LIST
40560: LIST
40561: LIST
40562: LIST
40563: IN
40564: NOT
40565: OR
40566: PUSH
40567: LD_VAR 0 8
40571: PUSH
40572: LD_INT 5
40574: ARRAY
40575: NOT
40576: OR
40577: PUSH
40578: LD_VAR 0 8
40582: PUSH
40583: LD_INT 6
40585: ARRAY
40586: PUSH
40587: LD_INT 1
40589: PUSH
40590: LD_INT 2
40592: PUSH
40593: LD_INT 7
40595: PUSH
40596: LD_INT 9
40598: PUSH
40599: LD_INT 10
40601: PUSH
40602: LD_INT 11
40604: PUSH
40605: EMPTY
40606: LIST
40607: LIST
40608: LIST
40609: LIST
40610: LIST
40611: LIST
40612: IN
40613: NOT
40614: OR
40615: IFFALSE 40621
// exit ;
40617: POP
40618: POP
40619: GO 40704
// end ;
40621: GO 40292
40623: POP
40624: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
40625: LD_VAR 0 9
40629: PPUSH
40630: LD_VAR 0 3
40634: PPUSH
40635: LD_VAR 0 4
40639: PPUSH
40640: LD_INT 20
40642: PPUSH
40643: CALL 32627 0 4
40647: PUSH
40648: LD_INT 4
40650: ARRAY
40651: IFFALSE 40655
// exit ;
40653: GO 40704
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
40655: LD_VAR 0 2
40659: PUSH
40660: LD_INT 29
40662: PUSH
40663: LD_INT 30
40665: PUSH
40666: EMPTY
40667: LIST
40668: LIST
40669: IN
40670: PUSH
40671: LD_VAR 0 3
40675: PPUSH
40676: LD_VAR 0 4
40680: PPUSH
40681: LD_VAR 0 9
40685: PPUSH
40686: CALL_OW 440
40690: NOT
40691: AND
40692: IFFALSE 40696
// exit ;
40694: GO 40704
// result := true ;
40696: LD_ADDR_VAR 0 6
40700: PUSH
40701: LD_INT 1
40703: ST_TO_ADDR
// end ;
40704: LD_VAR 0 6
40708: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
40709: LD_INT 0
40711: PPUSH
40712: PPUSH
40713: PPUSH
40714: PPUSH
40715: PPUSH
40716: PPUSH
40717: PPUSH
40718: PPUSH
40719: PPUSH
40720: PPUSH
40721: PPUSH
40722: PPUSH
40723: PPUSH
40724: PPUSH
40725: PPUSH
40726: PPUSH
40727: PPUSH
40728: PPUSH
40729: PPUSH
40730: PPUSH
40731: PPUSH
40732: PPUSH
40733: PPUSH
40734: PPUSH
40735: PPUSH
40736: PPUSH
40737: PPUSH
40738: PPUSH
40739: PPUSH
40740: PPUSH
40741: PPUSH
40742: PPUSH
40743: PPUSH
40744: PPUSH
40745: PPUSH
40746: PPUSH
40747: PPUSH
40748: PPUSH
40749: PPUSH
40750: PPUSH
40751: PPUSH
40752: PPUSH
40753: PPUSH
40754: PPUSH
40755: PPUSH
40756: PPUSH
40757: PPUSH
40758: PPUSH
40759: PPUSH
40760: PPUSH
40761: PPUSH
40762: PPUSH
40763: PPUSH
40764: PPUSH
40765: PPUSH
40766: PPUSH
40767: PPUSH
40768: PPUSH
// result = [ ] ;
40769: LD_ADDR_VAR 0 7
40773: PUSH
40774: EMPTY
40775: ST_TO_ADDR
// temp_list = [ ] ;
40776: LD_ADDR_VAR 0 9
40780: PUSH
40781: EMPTY
40782: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
40783: LD_VAR 0 4
40787: PUSH
40788: LD_INT 0
40790: PUSH
40791: LD_INT 1
40793: PUSH
40794: LD_INT 2
40796: PUSH
40797: LD_INT 3
40799: PUSH
40800: LD_INT 4
40802: PUSH
40803: LD_INT 5
40805: PUSH
40806: EMPTY
40807: LIST
40808: LIST
40809: LIST
40810: LIST
40811: LIST
40812: LIST
40813: IN
40814: NOT
40815: PUSH
40816: LD_VAR 0 1
40820: PUSH
40821: LD_INT 0
40823: PUSH
40824: LD_INT 1
40826: PUSH
40827: EMPTY
40828: LIST
40829: LIST
40830: IN
40831: PUSH
40832: LD_VAR 0 5
40836: PUSH
40837: LD_INT 1
40839: PUSH
40840: LD_INT 2
40842: PUSH
40843: LD_INT 3
40845: PUSH
40846: EMPTY
40847: LIST
40848: LIST
40849: LIST
40850: IN
40851: NOT
40852: AND
40853: OR
40854: IFFALSE 40858
// exit ;
40856: GO 59249
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
40858: LD_VAR 0 1
40862: PUSH
40863: LD_INT 6
40865: PUSH
40866: LD_INT 7
40868: PUSH
40869: LD_INT 8
40871: PUSH
40872: LD_INT 13
40874: PUSH
40875: LD_INT 12
40877: PUSH
40878: LD_INT 15
40880: PUSH
40881: LD_INT 11
40883: PUSH
40884: LD_INT 14
40886: PUSH
40887: LD_INT 10
40889: PUSH
40890: EMPTY
40891: LIST
40892: LIST
40893: LIST
40894: LIST
40895: LIST
40896: LIST
40897: LIST
40898: LIST
40899: LIST
40900: IN
40901: IFFALSE 40911
// btype = b_lab ;
40903: LD_ADDR_VAR 0 1
40907: PUSH
40908: LD_INT 6
40910: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
40911: LD_VAR 0 6
40915: PUSH
40916: LD_INT 0
40918: PUSH
40919: LD_INT 1
40921: PUSH
40922: LD_INT 2
40924: PUSH
40925: EMPTY
40926: LIST
40927: LIST
40928: LIST
40929: IN
40930: NOT
40931: PUSH
40932: LD_VAR 0 1
40936: PUSH
40937: LD_INT 0
40939: PUSH
40940: LD_INT 1
40942: PUSH
40943: LD_INT 2
40945: PUSH
40946: LD_INT 3
40948: PUSH
40949: LD_INT 6
40951: PUSH
40952: LD_INT 36
40954: PUSH
40955: LD_INT 4
40957: PUSH
40958: LD_INT 5
40960: PUSH
40961: LD_INT 31
40963: PUSH
40964: LD_INT 32
40966: PUSH
40967: LD_INT 33
40969: PUSH
40970: EMPTY
40971: LIST
40972: LIST
40973: LIST
40974: LIST
40975: LIST
40976: LIST
40977: LIST
40978: LIST
40979: LIST
40980: LIST
40981: LIST
40982: IN
40983: NOT
40984: PUSH
40985: LD_VAR 0 6
40989: PUSH
40990: LD_INT 1
40992: EQUAL
40993: AND
40994: OR
40995: PUSH
40996: LD_VAR 0 1
41000: PUSH
41001: LD_INT 2
41003: PUSH
41004: LD_INT 3
41006: PUSH
41007: EMPTY
41008: LIST
41009: LIST
41010: IN
41011: NOT
41012: PUSH
41013: LD_VAR 0 6
41017: PUSH
41018: LD_INT 2
41020: EQUAL
41021: AND
41022: OR
41023: IFFALSE 41033
// mode = 0 ;
41025: LD_ADDR_VAR 0 6
41029: PUSH
41030: LD_INT 0
41032: ST_TO_ADDR
// case mode of 0 :
41033: LD_VAR 0 6
41037: PUSH
41038: LD_INT 0
41040: DOUBLE
41041: EQUAL
41042: IFTRUE 41046
41044: GO 52499
41046: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41047: LD_ADDR_VAR 0 11
41051: PUSH
41052: LD_INT 0
41054: PUSH
41055: LD_INT 0
41057: PUSH
41058: EMPTY
41059: LIST
41060: LIST
41061: PUSH
41062: LD_INT 0
41064: PUSH
41065: LD_INT 1
41067: NEG
41068: PUSH
41069: EMPTY
41070: LIST
41071: LIST
41072: PUSH
41073: LD_INT 1
41075: PUSH
41076: LD_INT 0
41078: PUSH
41079: EMPTY
41080: LIST
41081: LIST
41082: PUSH
41083: LD_INT 1
41085: PUSH
41086: LD_INT 1
41088: PUSH
41089: EMPTY
41090: LIST
41091: LIST
41092: PUSH
41093: LD_INT 0
41095: PUSH
41096: LD_INT 1
41098: PUSH
41099: EMPTY
41100: LIST
41101: LIST
41102: PUSH
41103: LD_INT 1
41105: NEG
41106: PUSH
41107: LD_INT 0
41109: PUSH
41110: EMPTY
41111: LIST
41112: LIST
41113: PUSH
41114: LD_INT 1
41116: NEG
41117: PUSH
41118: LD_INT 1
41120: NEG
41121: PUSH
41122: EMPTY
41123: LIST
41124: LIST
41125: PUSH
41126: LD_INT 1
41128: NEG
41129: PUSH
41130: LD_INT 2
41132: NEG
41133: PUSH
41134: EMPTY
41135: LIST
41136: LIST
41137: PUSH
41138: LD_INT 0
41140: PUSH
41141: LD_INT 2
41143: NEG
41144: PUSH
41145: EMPTY
41146: LIST
41147: LIST
41148: PUSH
41149: LD_INT 1
41151: PUSH
41152: LD_INT 1
41154: NEG
41155: PUSH
41156: EMPTY
41157: LIST
41158: LIST
41159: PUSH
41160: LD_INT 1
41162: PUSH
41163: LD_INT 2
41165: PUSH
41166: EMPTY
41167: LIST
41168: LIST
41169: PUSH
41170: LD_INT 0
41172: PUSH
41173: LD_INT 2
41175: PUSH
41176: EMPTY
41177: LIST
41178: LIST
41179: PUSH
41180: LD_INT 1
41182: NEG
41183: PUSH
41184: LD_INT 1
41186: PUSH
41187: EMPTY
41188: LIST
41189: LIST
41190: PUSH
41191: LD_INT 1
41193: PUSH
41194: LD_INT 3
41196: PUSH
41197: EMPTY
41198: LIST
41199: LIST
41200: PUSH
41201: LD_INT 0
41203: PUSH
41204: LD_INT 3
41206: PUSH
41207: EMPTY
41208: LIST
41209: LIST
41210: PUSH
41211: LD_INT 1
41213: NEG
41214: PUSH
41215: LD_INT 2
41217: PUSH
41218: EMPTY
41219: LIST
41220: LIST
41221: PUSH
41222: EMPTY
41223: LIST
41224: LIST
41225: LIST
41226: LIST
41227: LIST
41228: LIST
41229: LIST
41230: LIST
41231: LIST
41232: LIST
41233: LIST
41234: LIST
41235: LIST
41236: LIST
41237: LIST
41238: LIST
41239: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41240: LD_ADDR_VAR 0 12
41244: PUSH
41245: LD_INT 0
41247: PUSH
41248: LD_INT 0
41250: PUSH
41251: EMPTY
41252: LIST
41253: LIST
41254: PUSH
41255: LD_INT 0
41257: PUSH
41258: LD_INT 1
41260: NEG
41261: PUSH
41262: EMPTY
41263: LIST
41264: LIST
41265: PUSH
41266: LD_INT 1
41268: PUSH
41269: LD_INT 0
41271: PUSH
41272: EMPTY
41273: LIST
41274: LIST
41275: PUSH
41276: LD_INT 1
41278: PUSH
41279: LD_INT 1
41281: PUSH
41282: EMPTY
41283: LIST
41284: LIST
41285: PUSH
41286: LD_INT 0
41288: PUSH
41289: LD_INT 1
41291: PUSH
41292: EMPTY
41293: LIST
41294: LIST
41295: PUSH
41296: LD_INT 1
41298: NEG
41299: PUSH
41300: LD_INT 0
41302: PUSH
41303: EMPTY
41304: LIST
41305: LIST
41306: PUSH
41307: LD_INT 1
41309: NEG
41310: PUSH
41311: LD_INT 1
41313: NEG
41314: PUSH
41315: EMPTY
41316: LIST
41317: LIST
41318: PUSH
41319: LD_INT 1
41321: PUSH
41322: LD_INT 1
41324: NEG
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: LD_INT 2
41332: PUSH
41333: LD_INT 0
41335: PUSH
41336: EMPTY
41337: LIST
41338: LIST
41339: PUSH
41340: LD_INT 2
41342: PUSH
41343: LD_INT 1
41345: PUSH
41346: EMPTY
41347: LIST
41348: LIST
41349: PUSH
41350: LD_INT 1
41352: NEG
41353: PUSH
41354: LD_INT 1
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PUSH
41361: LD_INT 2
41363: NEG
41364: PUSH
41365: LD_INT 0
41367: PUSH
41368: EMPTY
41369: LIST
41370: LIST
41371: PUSH
41372: LD_INT 2
41374: NEG
41375: PUSH
41376: LD_INT 1
41378: NEG
41379: PUSH
41380: EMPTY
41381: LIST
41382: LIST
41383: PUSH
41384: LD_INT 2
41386: NEG
41387: PUSH
41388: LD_INT 1
41390: PUSH
41391: EMPTY
41392: LIST
41393: LIST
41394: PUSH
41395: LD_INT 3
41397: NEG
41398: PUSH
41399: LD_INT 0
41401: PUSH
41402: EMPTY
41403: LIST
41404: LIST
41405: PUSH
41406: LD_INT 3
41408: NEG
41409: PUSH
41410: LD_INT 1
41412: NEG
41413: PUSH
41414: EMPTY
41415: LIST
41416: LIST
41417: PUSH
41418: EMPTY
41419: LIST
41420: LIST
41421: LIST
41422: LIST
41423: LIST
41424: LIST
41425: LIST
41426: LIST
41427: LIST
41428: LIST
41429: LIST
41430: LIST
41431: LIST
41432: LIST
41433: LIST
41434: LIST
41435: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41436: LD_ADDR_VAR 0 13
41440: PUSH
41441: LD_INT 0
41443: PUSH
41444: LD_INT 0
41446: PUSH
41447: EMPTY
41448: LIST
41449: LIST
41450: PUSH
41451: LD_INT 0
41453: PUSH
41454: LD_INT 1
41456: NEG
41457: PUSH
41458: EMPTY
41459: LIST
41460: LIST
41461: PUSH
41462: LD_INT 1
41464: PUSH
41465: LD_INT 0
41467: PUSH
41468: EMPTY
41469: LIST
41470: LIST
41471: PUSH
41472: LD_INT 1
41474: PUSH
41475: LD_INT 1
41477: PUSH
41478: EMPTY
41479: LIST
41480: LIST
41481: PUSH
41482: LD_INT 0
41484: PUSH
41485: LD_INT 1
41487: PUSH
41488: EMPTY
41489: LIST
41490: LIST
41491: PUSH
41492: LD_INT 1
41494: NEG
41495: PUSH
41496: LD_INT 0
41498: PUSH
41499: EMPTY
41500: LIST
41501: LIST
41502: PUSH
41503: LD_INT 1
41505: NEG
41506: PUSH
41507: LD_INT 1
41509: NEG
41510: PUSH
41511: EMPTY
41512: LIST
41513: LIST
41514: PUSH
41515: LD_INT 1
41517: NEG
41518: PUSH
41519: LD_INT 2
41521: NEG
41522: PUSH
41523: EMPTY
41524: LIST
41525: LIST
41526: PUSH
41527: LD_INT 2
41529: PUSH
41530: LD_INT 1
41532: PUSH
41533: EMPTY
41534: LIST
41535: LIST
41536: PUSH
41537: LD_INT 2
41539: PUSH
41540: LD_INT 2
41542: PUSH
41543: EMPTY
41544: LIST
41545: LIST
41546: PUSH
41547: LD_INT 1
41549: PUSH
41550: LD_INT 2
41552: PUSH
41553: EMPTY
41554: LIST
41555: LIST
41556: PUSH
41557: LD_INT 2
41559: NEG
41560: PUSH
41561: LD_INT 1
41563: NEG
41564: PUSH
41565: EMPTY
41566: LIST
41567: LIST
41568: PUSH
41569: LD_INT 2
41571: NEG
41572: PUSH
41573: LD_INT 2
41575: NEG
41576: PUSH
41577: EMPTY
41578: LIST
41579: LIST
41580: PUSH
41581: LD_INT 2
41583: NEG
41584: PUSH
41585: LD_INT 3
41587: NEG
41588: PUSH
41589: EMPTY
41590: LIST
41591: LIST
41592: PUSH
41593: LD_INT 3
41595: NEG
41596: PUSH
41597: LD_INT 2
41599: NEG
41600: PUSH
41601: EMPTY
41602: LIST
41603: LIST
41604: PUSH
41605: LD_INT 3
41607: NEG
41608: PUSH
41609: LD_INT 3
41611: NEG
41612: PUSH
41613: EMPTY
41614: LIST
41615: LIST
41616: PUSH
41617: EMPTY
41618: LIST
41619: LIST
41620: LIST
41621: LIST
41622: LIST
41623: LIST
41624: LIST
41625: LIST
41626: LIST
41627: LIST
41628: LIST
41629: LIST
41630: LIST
41631: LIST
41632: LIST
41633: LIST
41634: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41635: LD_ADDR_VAR 0 14
41639: PUSH
41640: LD_INT 0
41642: PUSH
41643: LD_INT 0
41645: PUSH
41646: EMPTY
41647: LIST
41648: LIST
41649: PUSH
41650: LD_INT 0
41652: PUSH
41653: LD_INT 1
41655: NEG
41656: PUSH
41657: EMPTY
41658: LIST
41659: LIST
41660: PUSH
41661: LD_INT 1
41663: PUSH
41664: LD_INT 0
41666: PUSH
41667: EMPTY
41668: LIST
41669: LIST
41670: PUSH
41671: LD_INT 1
41673: PUSH
41674: LD_INT 1
41676: PUSH
41677: EMPTY
41678: LIST
41679: LIST
41680: PUSH
41681: LD_INT 0
41683: PUSH
41684: LD_INT 1
41686: PUSH
41687: EMPTY
41688: LIST
41689: LIST
41690: PUSH
41691: LD_INT 1
41693: NEG
41694: PUSH
41695: LD_INT 0
41697: PUSH
41698: EMPTY
41699: LIST
41700: LIST
41701: PUSH
41702: LD_INT 1
41704: NEG
41705: PUSH
41706: LD_INT 1
41708: NEG
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: PUSH
41714: LD_INT 1
41716: NEG
41717: PUSH
41718: LD_INT 2
41720: NEG
41721: PUSH
41722: EMPTY
41723: LIST
41724: LIST
41725: PUSH
41726: LD_INT 0
41728: PUSH
41729: LD_INT 2
41731: NEG
41732: PUSH
41733: EMPTY
41734: LIST
41735: LIST
41736: PUSH
41737: LD_INT 1
41739: PUSH
41740: LD_INT 1
41742: NEG
41743: PUSH
41744: EMPTY
41745: LIST
41746: LIST
41747: PUSH
41748: LD_INT 1
41750: PUSH
41751: LD_INT 2
41753: PUSH
41754: EMPTY
41755: LIST
41756: LIST
41757: PUSH
41758: LD_INT 0
41760: PUSH
41761: LD_INT 2
41763: PUSH
41764: EMPTY
41765: LIST
41766: LIST
41767: PUSH
41768: LD_INT 1
41770: NEG
41771: PUSH
41772: LD_INT 1
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: PUSH
41779: LD_INT 1
41781: NEG
41782: PUSH
41783: LD_INT 3
41785: NEG
41786: PUSH
41787: EMPTY
41788: LIST
41789: LIST
41790: PUSH
41791: LD_INT 0
41793: PUSH
41794: LD_INT 3
41796: NEG
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: PUSH
41802: LD_INT 1
41804: PUSH
41805: LD_INT 2
41807: NEG
41808: PUSH
41809: EMPTY
41810: LIST
41811: LIST
41812: PUSH
41813: EMPTY
41814: LIST
41815: LIST
41816: LIST
41817: LIST
41818: LIST
41819: LIST
41820: LIST
41821: LIST
41822: LIST
41823: LIST
41824: LIST
41825: LIST
41826: LIST
41827: LIST
41828: LIST
41829: LIST
41830: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41831: LD_ADDR_VAR 0 15
41835: PUSH
41836: LD_INT 0
41838: PUSH
41839: LD_INT 0
41841: PUSH
41842: EMPTY
41843: LIST
41844: LIST
41845: PUSH
41846: LD_INT 0
41848: PUSH
41849: LD_INT 1
41851: NEG
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: PUSH
41857: LD_INT 1
41859: PUSH
41860: LD_INT 0
41862: PUSH
41863: EMPTY
41864: LIST
41865: LIST
41866: PUSH
41867: LD_INT 1
41869: PUSH
41870: LD_INT 1
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: PUSH
41877: LD_INT 0
41879: PUSH
41880: LD_INT 1
41882: PUSH
41883: EMPTY
41884: LIST
41885: LIST
41886: PUSH
41887: LD_INT 1
41889: NEG
41890: PUSH
41891: LD_INT 0
41893: PUSH
41894: EMPTY
41895: LIST
41896: LIST
41897: PUSH
41898: LD_INT 1
41900: NEG
41901: PUSH
41902: LD_INT 1
41904: NEG
41905: PUSH
41906: EMPTY
41907: LIST
41908: LIST
41909: PUSH
41910: LD_INT 1
41912: PUSH
41913: LD_INT 1
41915: NEG
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: PUSH
41921: LD_INT 2
41923: PUSH
41924: LD_INT 0
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: PUSH
41931: LD_INT 2
41933: PUSH
41934: LD_INT 1
41936: PUSH
41937: EMPTY
41938: LIST
41939: LIST
41940: PUSH
41941: LD_INT 1
41943: NEG
41944: PUSH
41945: LD_INT 1
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: PUSH
41952: LD_INT 2
41954: NEG
41955: PUSH
41956: LD_INT 0
41958: PUSH
41959: EMPTY
41960: LIST
41961: LIST
41962: PUSH
41963: LD_INT 2
41965: NEG
41966: PUSH
41967: LD_INT 1
41969: NEG
41970: PUSH
41971: EMPTY
41972: LIST
41973: LIST
41974: PUSH
41975: LD_INT 2
41977: PUSH
41978: LD_INT 1
41980: NEG
41981: PUSH
41982: EMPTY
41983: LIST
41984: LIST
41985: PUSH
41986: LD_INT 3
41988: PUSH
41989: LD_INT 0
41991: PUSH
41992: EMPTY
41993: LIST
41994: LIST
41995: PUSH
41996: LD_INT 3
41998: PUSH
41999: LD_INT 1
42001: PUSH
42002: EMPTY
42003: LIST
42004: LIST
42005: PUSH
42006: EMPTY
42007: LIST
42008: LIST
42009: LIST
42010: LIST
42011: LIST
42012: LIST
42013: LIST
42014: LIST
42015: LIST
42016: LIST
42017: LIST
42018: LIST
42019: LIST
42020: LIST
42021: LIST
42022: LIST
42023: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42024: LD_ADDR_VAR 0 16
42028: PUSH
42029: LD_INT 0
42031: PUSH
42032: LD_INT 0
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: PUSH
42039: LD_INT 0
42041: PUSH
42042: LD_INT 1
42044: NEG
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: PUSH
42050: LD_INT 1
42052: PUSH
42053: LD_INT 0
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: PUSH
42060: LD_INT 1
42062: PUSH
42063: LD_INT 1
42065: PUSH
42066: EMPTY
42067: LIST
42068: LIST
42069: PUSH
42070: LD_INT 0
42072: PUSH
42073: LD_INT 1
42075: PUSH
42076: EMPTY
42077: LIST
42078: LIST
42079: PUSH
42080: LD_INT 1
42082: NEG
42083: PUSH
42084: LD_INT 0
42086: PUSH
42087: EMPTY
42088: LIST
42089: LIST
42090: PUSH
42091: LD_INT 1
42093: NEG
42094: PUSH
42095: LD_INT 1
42097: NEG
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: PUSH
42103: LD_INT 1
42105: NEG
42106: PUSH
42107: LD_INT 2
42109: NEG
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: PUSH
42115: LD_INT 2
42117: PUSH
42118: LD_INT 1
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: PUSH
42125: LD_INT 2
42127: PUSH
42128: LD_INT 2
42130: PUSH
42131: EMPTY
42132: LIST
42133: LIST
42134: PUSH
42135: LD_INT 1
42137: PUSH
42138: LD_INT 2
42140: PUSH
42141: EMPTY
42142: LIST
42143: LIST
42144: PUSH
42145: LD_INT 2
42147: NEG
42148: PUSH
42149: LD_INT 1
42151: NEG
42152: PUSH
42153: EMPTY
42154: LIST
42155: LIST
42156: PUSH
42157: LD_INT 2
42159: NEG
42160: PUSH
42161: LD_INT 2
42163: NEG
42164: PUSH
42165: EMPTY
42166: LIST
42167: LIST
42168: PUSH
42169: LD_INT 3
42171: PUSH
42172: LD_INT 2
42174: PUSH
42175: EMPTY
42176: LIST
42177: LIST
42178: PUSH
42179: LD_INT 3
42181: PUSH
42182: LD_INT 3
42184: PUSH
42185: EMPTY
42186: LIST
42187: LIST
42188: PUSH
42189: LD_INT 2
42191: PUSH
42192: LD_INT 3
42194: PUSH
42195: EMPTY
42196: LIST
42197: LIST
42198: PUSH
42199: EMPTY
42200: LIST
42201: LIST
42202: LIST
42203: LIST
42204: LIST
42205: LIST
42206: LIST
42207: LIST
42208: LIST
42209: LIST
42210: LIST
42211: LIST
42212: LIST
42213: LIST
42214: LIST
42215: LIST
42216: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42217: LD_ADDR_VAR 0 17
42221: PUSH
42222: LD_INT 0
42224: PUSH
42225: LD_INT 0
42227: PUSH
42228: EMPTY
42229: LIST
42230: LIST
42231: PUSH
42232: LD_INT 0
42234: PUSH
42235: LD_INT 1
42237: NEG
42238: PUSH
42239: EMPTY
42240: LIST
42241: LIST
42242: PUSH
42243: LD_INT 1
42245: PUSH
42246: LD_INT 0
42248: PUSH
42249: EMPTY
42250: LIST
42251: LIST
42252: PUSH
42253: LD_INT 1
42255: PUSH
42256: LD_INT 1
42258: PUSH
42259: EMPTY
42260: LIST
42261: LIST
42262: PUSH
42263: LD_INT 0
42265: PUSH
42266: LD_INT 1
42268: PUSH
42269: EMPTY
42270: LIST
42271: LIST
42272: PUSH
42273: LD_INT 1
42275: NEG
42276: PUSH
42277: LD_INT 0
42279: PUSH
42280: EMPTY
42281: LIST
42282: LIST
42283: PUSH
42284: LD_INT 1
42286: NEG
42287: PUSH
42288: LD_INT 1
42290: NEG
42291: PUSH
42292: EMPTY
42293: LIST
42294: LIST
42295: PUSH
42296: LD_INT 1
42298: NEG
42299: PUSH
42300: LD_INT 2
42302: NEG
42303: PUSH
42304: EMPTY
42305: LIST
42306: LIST
42307: PUSH
42308: LD_INT 0
42310: PUSH
42311: LD_INT 2
42313: NEG
42314: PUSH
42315: EMPTY
42316: LIST
42317: LIST
42318: PUSH
42319: LD_INT 1
42321: PUSH
42322: LD_INT 1
42324: NEG
42325: PUSH
42326: EMPTY
42327: LIST
42328: LIST
42329: PUSH
42330: LD_INT 2
42332: PUSH
42333: LD_INT 0
42335: PUSH
42336: EMPTY
42337: LIST
42338: LIST
42339: PUSH
42340: LD_INT 2
42342: PUSH
42343: LD_INT 1
42345: PUSH
42346: EMPTY
42347: LIST
42348: LIST
42349: PUSH
42350: LD_INT 2
42352: PUSH
42353: LD_INT 2
42355: PUSH
42356: EMPTY
42357: LIST
42358: LIST
42359: PUSH
42360: LD_INT 1
42362: PUSH
42363: LD_INT 2
42365: PUSH
42366: EMPTY
42367: LIST
42368: LIST
42369: PUSH
42370: LD_INT 0
42372: PUSH
42373: LD_INT 2
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: PUSH
42380: LD_INT 1
42382: NEG
42383: PUSH
42384: LD_INT 1
42386: PUSH
42387: EMPTY
42388: LIST
42389: LIST
42390: PUSH
42391: LD_INT 2
42393: NEG
42394: PUSH
42395: LD_INT 0
42397: PUSH
42398: EMPTY
42399: LIST
42400: LIST
42401: PUSH
42402: LD_INT 2
42404: NEG
42405: PUSH
42406: LD_INT 1
42408: NEG
42409: PUSH
42410: EMPTY
42411: LIST
42412: LIST
42413: PUSH
42414: LD_INT 2
42416: NEG
42417: PUSH
42418: LD_INT 2
42420: NEG
42421: PUSH
42422: EMPTY
42423: LIST
42424: LIST
42425: PUSH
42426: EMPTY
42427: LIST
42428: LIST
42429: LIST
42430: LIST
42431: LIST
42432: LIST
42433: LIST
42434: LIST
42435: LIST
42436: LIST
42437: LIST
42438: LIST
42439: LIST
42440: LIST
42441: LIST
42442: LIST
42443: LIST
42444: LIST
42445: LIST
42446: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42447: LD_ADDR_VAR 0 18
42451: PUSH
42452: LD_INT 0
42454: PUSH
42455: LD_INT 0
42457: PUSH
42458: EMPTY
42459: LIST
42460: LIST
42461: PUSH
42462: LD_INT 0
42464: PUSH
42465: LD_INT 1
42467: NEG
42468: PUSH
42469: EMPTY
42470: LIST
42471: LIST
42472: PUSH
42473: LD_INT 1
42475: PUSH
42476: LD_INT 0
42478: PUSH
42479: EMPTY
42480: LIST
42481: LIST
42482: PUSH
42483: LD_INT 1
42485: PUSH
42486: LD_INT 1
42488: PUSH
42489: EMPTY
42490: LIST
42491: LIST
42492: PUSH
42493: LD_INT 0
42495: PUSH
42496: LD_INT 1
42498: PUSH
42499: EMPTY
42500: LIST
42501: LIST
42502: PUSH
42503: LD_INT 1
42505: NEG
42506: PUSH
42507: LD_INT 0
42509: PUSH
42510: EMPTY
42511: LIST
42512: LIST
42513: PUSH
42514: LD_INT 1
42516: NEG
42517: PUSH
42518: LD_INT 1
42520: NEG
42521: PUSH
42522: EMPTY
42523: LIST
42524: LIST
42525: PUSH
42526: LD_INT 1
42528: NEG
42529: PUSH
42530: LD_INT 2
42532: NEG
42533: PUSH
42534: EMPTY
42535: LIST
42536: LIST
42537: PUSH
42538: LD_INT 0
42540: PUSH
42541: LD_INT 2
42543: NEG
42544: PUSH
42545: EMPTY
42546: LIST
42547: LIST
42548: PUSH
42549: LD_INT 1
42551: PUSH
42552: LD_INT 1
42554: NEG
42555: PUSH
42556: EMPTY
42557: LIST
42558: LIST
42559: PUSH
42560: LD_INT 2
42562: PUSH
42563: LD_INT 0
42565: PUSH
42566: EMPTY
42567: LIST
42568: LIST
42569: PUSH
42570: LD_INT 2
42572: PUSH
42573: LD_INT 1
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: PUSH
42580: LD_INT 2
42582: PUSH
42583: LD_INT 2
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: PUSH
42590: LD_INT 1
42592: PUSH
42593: LD_INT 2
42595: PUSH
42596: EMPTY
42597: LIST
42598: LIST
42599: PUSH
42600: LD_INT 0
42602: PUSH
42603: LD_INT 2
42605: PUSH
42606: EMPTY
42607: LIST
42608: LIST
42609: PUSH
42610: LD_INT 1
42612: NEG
42613: PUSH
42614: LD_INT 1
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: PUSH
42621: LD_INT 2
42623: NEG
42624: PUSH
42625: LD_INT 0
42627: PUSH
42628: EMPTY
42629: LIST
42630: LIST
42631: PUSH
42632: LD_INT 2
42634: NEG
42635: PUSH
42636: LD_INT 1
42638: NEG
42639: PUSH
42640: EMPTY
42641: LIST
42642: LIST
42643: PUSH
42644: LD_INT 2
42646: NEG
42647: PUSH
42648: LD_INT 2
42650: NEG
42651: PUSH
42652: EMPTY
42653: LIST
42654: LIST
42655: PUSH
42656: EMPTY
42657: LIST
42658: LIST
42659: LIST
42660: LIST
42661: LIST
42662: LIST
42663: LIST
42664: LIST
42665: LIST
42666: LIST
42667: LIST
42668: LIST
42669: LIST
42670: LIST
42671: LIST
42672: LIST
42673: LIST
42674: LIST
42675: LIST
42676: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42677: LD_ADDR_VAR 0 19
42681: PUSH
42682: LD_INT 0
42684: PUSH
42685: LD_INT 0
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: PUSH
42692: LD_INT 0
42694: PUSH
42695: LD_INT 1
42697: NEG
42698: PUSH
42699: EMPTY
42700: LIST
42701: LIST
42702: PUSH
42703: LD_INT 1
42705: PUSH
42706: LD_INT 0
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: PUSH
42713: LD_INT 1
42715: PUSH
42716: LD_INT 1
42718: PUSH
42719: EMPTY
42720: LIST
42721: LIST
42722: PUSH
42723: LD_INT 0
42725: PUSH
42726: LD_INT 1
42728: PUSH
42729: EMPTY
42730: LIST
42731: LIST
42732: PUSH
42733: LD_INT 1
42735: NEG
42736: PUSH
42737: LD_INT 0
42739: PUSH
42740: EMPTY
42741: LIST
42742: LIST
42743: PUSH
42744: LD_INT 1
42746: NEG
42747: PUSH
42748: LD_INT 1
42750: NEG
42751: PUSH
42752: EMPTY
42753: LIST
42754: LIST
42755: PUSH
42756: LD_INT 1
42758: NEG
42759: PUSH
42760: LD_INT 2
42762: NEG
42763: PUSH
42764: EMPTY
42765: LIST
42766: LIST
42767: PUSH
42768: LD_INT 0
42770: PUSH
42771: LD_INT 2
42773: NEG
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PUSH
42779: LD_INT 1
42781: PUSH
42782: LD_INT 1
42784: NEG
42785: PUSH
42786: EMPTY
42787: LIST
42788: LIST
42789: PUSH
42790: LD_INT 2
42792: PUSH
42793: LD_INT 0
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: PUSH
42800: LD_INT 2
42802: PUSH
42803: LD_INT 1
42805: PUSH
42806: EMPTY
42807: LIST
42808: LIST
42809: PUSH
42810: LD_INT 2
42812: PUSH
42813: LD_INT 2
42815: PUSH
42816: EMPTY
42817: LIST
42818: LIST
42819: PUSH
42820: LD_INT 1
42822: PUSH
42823: LD_INT 2
42825: PUSH
42826: EMPTY
42827: LIST
42828: LIST
42829: PUSH
42830: LD_INT 0
42832: PUSH
42833: LD_INT 2
42835: PUSH
42836: EMPTY
42837: LIST
42838: LIST
42839: PUSH
42840: LD_INT 1
42842: NEG
42843: PUSH
42844: LD_INT 1
42846: PUSH
42847: EMPTY
42848: LIST
42849: LIST
42850: PUSH
42851: LD_INT 2
42853: NEG
42854: PUSH
42855: LD_INT 0
42857: PUSH
42858: EMPTY
42859: LIST
42860: LIST
42861: PUSH
42862: LD_INT 2
42864: NEG
42865: PUSH
42866: LD_INT 1
42868: NEG
42869: PUSH
42870: EMPTY
42871: LIST
42872: LIST
42873: PUSH
42874: LD_INT 2
42876: NEG
42877: PUSH
42878: LD_INT 2
42880: NEG
42881: PUSH
42882: EMPTY
42883: LIST
42884: LIST
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: LIST
42890: LIST
42891: LIST
42892: LIST
42893: LIST
42894: LIST
42895: LIST
42896: LIST
42897: LIST
42898: LIST
42899: LIST
42900: LIST
42901: LIST
42902: LIST
42903: LIST
42904: LIST
42905: LIST
42906: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42907: LD_ADDR_VAR 0 20
42911: PUSH
42912: LD_INT 0
42914: PUSH
42915: LD_INT 0
42917: PUSH
42918: EMPTY
42919: LIST
42920: LIST
42921: PUSH
42922: LD_INT 0
42924: PUSH
42925: LD_INT 1
42927: NEG
42928: PUSH
42929: EMPTY
42930: LIST
42931: LIST
42932: PUSH
42933: LD_INT 1
42935: PUSH
42936: LD_INT 0
42938: PUSH
42939: EMPTY
42940: LIST
42941: LIST
42942: PUSH
42943: LD_INT 1
42945: PUSH
42946: LD_INT 1
42948: PUSH
42949: EMPTY
42950: LIST
42951: LIST
42952: PUSH
42953: LD_INT 0
42955: PUSH
42956: LD_INT 1
42958: PUSH
42959: EMPTY
42960: LIST
42961: LIST
42962: PUSH
42963: LD_INT 1
42965: NEG
42966: PUSH
42967: LD_INT 0
42969: PUSH
42970: EMPTY
42971: LIST
42972: LIST
42973: PUSH
42974: LD_INT 1
42976: NEG
42977: PUSH
42978: LD_INT 1
42980: NEG
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: PUSH
42986: LD_INT 1
42988: NEG
42989: PUSH
42990: LD_INT 2
42992: NEG
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: PUSH
42998: LD_INT 0
43000: PUSH
43001: LD_INT 2
43003: NEG
43004: PUSH
43005: EMPTY
43006: LIST
43007: LIST
43008: PUSH
43009: LD_INT 1
43011: PUSH
43012: LD_INT 1
43014: NEG
43015: PUSH
43016: EMPTY
43017: LIST
43018: LIST
43019: PUSH
43020: LD_INT 2
43022: PUSH
43023: LD_INT 0
43025: PUSH
43026: EMPTY
43027: LIST
43028: LIST
43029: PUSH
43030: LD_INT 2
43032: PUSH
43033: LD_INT 1
43035: PUSH
43036: EMPTY
43037: LIST
43038: LIST
43039: PUSH
43040: LD_INT 2
43042: PUSH
43043: LD_INT 2
43045: PUSH
43046: EMPTY
43047: LIST
43048: LIST
43049: PUSH
43050: LD_INT 1
43052: PUSH
43053: LD_INT 2
43055: PUSH
43056: EMPTY
43057: LIST
43058: LIST
43059: PUSH
43060: LD_INT 0
43062: PUSH
43063: LD_INT 2
43065: PUSH
43066: EMPTY
43067: LIST
43068: LIST
43069: PUSH
43070: LD_INT 1
43072: NEG
43073: PUSH
43074: LD_INT 1
43076: PUSH
43077: EMPTY
43078: LIST
43079: LIST
43080: PUSH
43081: LD_INT 2
43083: NEG
43084: PUSH
43085: LD_INT 0
43087: PUSH
43088: EMPTY
43089: LIST
43090: LIST
43091: PUSH
43092: LD_INT 2
43094: NEG
43095: PUSH
43096: LD_INT 1
43098: NEG
43099: PUSH
43100: EMPTY
43101: LIST
43102: LIST
43103: PUSH
43104: LD_INT 2
43106: NEG
43107: PUSH
43108: LD_INT 2
43110: NEG
43111: PUSH
43112: EMPTY
43113: LIST
43114: LIST
43115: PUSH
43116: EMPTY
43117: LIST
43118: LIST
43119: LIST
43120: LIST
43121: LIST
43122: LIST
43123: LIST
43124: LIST
43125: LIST
43126: LIST
43127: LIST
43128: LIST
43129: LIST
43130: LIST
43131: LIST
43132: LIST
43133: LIST
43134: LIST
43135: LIST
43136: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43137: LD_ADDR_VAR 0 21
43141: PUSH
43142: LD_INT 0
43144: PUSH
43145: LD_INT 0
43147: PUSH
43148: EMPTY
43149: LIST
43150: LIST
43151: PUSH
43152: LD_INT 0
43154: PUSH
43155: LD_INT 1
43157: NEG
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: PUSH
43163: LD_INT 1
43165: PUSH
43166: LD_INT 0
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: PUSH
43173: LD_INT 1
43175: PUSH
43176: LD_INT 1
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: PUSH
43183: LD_INT 0
43185: PUSH
43186: LD_INT 1
43188: PUSH
43189: EMPTY
43190: LIST
43191: LIST
43192: PUSH
43193: LD_INT 1
43195: NEG
43196: PUSH
43197: LD_INT 0
43199: PUSH
43200: EMPTY
43201: LIST
43202: LIST
43203: PUSH
43204: LD_INT 1
43206: NEG
43207: PUSH
43208: LD_INT 1
43210: NEG
43211: PUSH
43212: EMPTY
43213: LIST
43214: LIST
43215: PUSH
43216: LD_INT 1
43218: NEG
43219: PUSH
43220: LD_INT 2
43222: NEG
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: PUSH
43228: LD_INT 0
43230: PUSH
43231: LD_INT 2
43233: NEG
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: PUSH
43239: LD_INT 1
43241: PUSH
43242: LD_INT 1
43244: NEG
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: PUSH
43250: LD_INT 2
43252: PUSH
43253: LD_INT 0
43255: PUSH
43256: EMPTY
43257: LIST
43258: LIST
43259: PUSH
43260: LD_INT 2
43262: PUSH
43263: LD_INT 1
43265: PUSH
43266: EMPTY
43267: LIST
43268: LIST
43269: PUSH
43270: LD_INT 2
43272: PUSH
43273: LD_INT 2
43275: PUSH
43276: EMPTY
43277: LIST
43278: LIST
43279: PUSH
43280: LD_INT 1
43282: PUSH
43283: LD_INT 2
43285: PUSH
43286: EMPTY
43287: LIST
43288: LIST
43289: PUSH
43290: LD_INT 0
43292: PUSH
43293: LD_INT 2
43295: PUSH
43296: EMPTY
43297: LIST
43298: LIST
43299: PUSH
43300: LD_INT 1
43302: NEG
43303: PUSH
43304: LD_INT 1
43306: PUSH
43307: EMPTY
43308: LIST
43309: LIST
43310: PUSH
43311: LD_INT 2
43313: NEG
43314: PUSH
43315: LD_INT 0
43317: PUSH
43318: EMPTY
43319: LIST
43320: LIST
43321: PUSH
43322: LD_INT 2
43324: NEG
43325: PUSH
43326: LD_INT 1
43328: NEG
43329: PUSH
43330: EMPTY
43331: LIST
43332: LIST
43333: PUSH
43334: LD_INT 2
43336: NEG
43337: PUSH
43338: LD_INT 2
43340: NEG
43341: PUSH
43342: EMPTY
43343: LIST
43344: LIST
43345: PUSH
43346: EMPTY
43347: LIST
43348: LIST
43349: LIST
43350: LIST
43351: LIST
43352: LIST
43353: LIST
43354: LIST
43355: LIST
43356: LIST
43357: LIST
43358: LIST
43359: LIST
43360: LIST
43361: LIST
43362: LIST
43363: LIST
43364: LIST
43365: LIST
43366: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43367: LD_ADDR_VAR 0 22
43371: PUSH
43372: LD_INT 0
43374: PUSH
43375: LD_INT 0
43377: PUSH
43378: EMPTY
43379: LIST
43380: LIST
43381: PUSH
43382: LD_INT 0
43384: PUSH
43385: LD_INT 1
43387: NEG
43388: PUSH
43389: EMPTY
43390: LIST
43391: LIST
43392: PUSH
43393: LD_INT 1
43395: PUSH
43396: LD_INT 0
43398: PUSH
43399: EMPTY
43400: LIST
43401: LIST
43402: PUSH
43403: LD_INT 1
43405: PUSH
43406: LD_INT 1
43408: PUSH
43409: EMPTY
43410: LIST
43411: LIST
43412: PUSH
43413: LD_INT 0
43415: PUSH
43416: LD_INT 1
43418: PUSH
43419: EMPTY
43420: LIST
43421: LIST
43422: PUSH
43423: LD_INT 1
43425: NEG
43426: PUSH
43427: LD_INT 0
43429: PUSH
43430: EMPTY
43431: LIST
43432: LIST
43433: PUSH
43434: LD_INT 1
43436: NEG
43437: PUSH
43438: LD_INT 1
43440: NEG
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: PUSH
43446: LD_INT 1
43448: NEG
43449: PUSH
43450: LD_INT 2
43452: NEG
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: PUSH
43458: LD_INT 0
43460: PUSH
43461: LD_INT 2
43463: NEG
43464: PUSH
43465: EMPTY
43466: LIST
43467: LIST
43468: PUSH
43469: LD_INT 1
43471: PUSH
43472: LD_INT 1
43474: NEG
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: PUSH
43480: LD_INT 2
43482: PUSH
43483: LD_INT 0
43485: PUSH
43486: EMPTY
43487: LIST
43488: LIST
43489: PUSH
43490: LD_INT 2
43492: PUSH
43493: LD_INT 1
43495: PUSH
43496: EMPTY
43497: LIST
43498: LIST
43499: PUSH
43500: LD_INT 2
43502: PUSH
43503: LD_INT 2
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: PUSH
43510: LD_INT 1
43512: PUSH
43513: LD_INT 2
43515: PUSH
43516: EMPTY
43517: LIST
43518: LIST
43519: PUSH
43520: LD_INT 0
43522: PUSH
43523: LD_INT 2
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: PUSH
43530: LD_INT 1
43532: NEG
43533: PUSH
43534: LD_INT 1
43536: PUSH
43537: EMPTY
43538: LIST
43539: LIST
43540: PUSH
43541: LD_INT 2
43543: NEG
43544: PUSH
43545: LD_INT 0
43547: PUSH
43548: EMPTY
43549: LIST
43550: LIST
43551: PUSH
43552: LD_INT 2
43554: NEG
43555: PUSH
43556: LD_INT 1
43558: NEG
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: PUSH
43564: LD_INT 2
43566: NEG
43567: PUSH
43568: LD_INT 2
43570: NEG
43571: PUSH
43572: EMPTY
43573: LIST
43574: LIST
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: LIST
43580: LIST
43581: LIST
43582: LIST
43583: LIST
43584: LIST
43585: LIST
43586: LIST
43587: LIST
43588: LIST
43589: LIST
43590: LIST
43591: LIST
43592: LIST
43593: LIST
43594: LIST
43595: LIST
43596: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43597: LD_ADDR_VAR 0 23
43601: PUSH
43602: LD_INT 0
43604: PUSH
43605: LD_INT 0
43607: PUSH
43608: EMPTY
43609: LIST
43610: LIST
43611: PUSH
43612: LD_INT 0
43614: PUSH
43615: LD_INT 1
43617: NEG
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: PUSH
43623: LD_INT 1
43625: PUSH
43626: LD_INT 0
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: PUSH
43633: LD_INT 1
43635: PUSH
43636: LD_INT 1
43638: PUSH
43639: EMPTY
43640: LIST
43641: LIST
43642: PUSH
43643: LD_INT 0
43645: PUSH
43646: LD_INT 1
43648: PUSH
43649: EMPTY
43650: LIST
43651: LIST
43652: PUSH
43653: LD_INT 1
43655: NEG
43656: PUSH
43657: LD_INT 0
43659: PUSH
43660: EMPTY
43661: LIST
43662: LIST
43663: PUSH
43664: LD_INT 1
43666: NEG
43667: PUSH
43668: LD_INT 1
43670: NEG
43671: PUSH
43672: EMPTY
43673: LIST
43674: LIST
43675: PUSH
43676: LD_INT 1
43678: NEG
43679: PUSH
43680: LD_INT 2
43682: NEG
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: PUSH
43688: LD_INT 0
43690: PUSH
43691: LD_INT 2
43693: NEG
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PUSH
43699: LD_INT 1
43701: PUSH
43702: LD_INT 1
43704: NEG
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: PUSH
43710: LD_INT 2
43712: PUSH
43713: LD_INT 0
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: PUSH
43720: LD_INT 2
43722: PUSH
43723: LD_INT 1
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: PUSH
43730: LD_INT 2
43732: PUSH
43733: LD_INT 2
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: PUSH
43740: LD_INT 1
43742: PUSH
43743: LD_INT 2
43745: PUSH
43746: EMPTY
43747: LIST
43748: LIST
43749: PUSH
43750: LD_INT 0
43752: PUSH
43753: LD_INT 2
43755: PUSH
43756: EMPTY
43757: LIST
43758: LIST
43759: PUSH
43760: LD_INT 1
43762: NEG
43763: PUSH
43764: LD_INT 1
43766: PUSH
43767: EMPTY
43768: LIST
43769: LIST
43770: PUSH
43771: LD_INT 2
43773: NEG
43774: PUSH
43775: LD_INT 0
43777: PUSH
43778: EMPTY
43779: LIST
43780: LIST
43781: PUSH
43782: LD_INT 2
43784: NEG
43785: PUSH
43786: LD_INT 1
43788: NEG
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: PUSH
43794: LD_INT 2
43796: NEG
43797: PUSH
43798: LD_INT 2
43800: NEG
43801: PUSH
43802: EMPTY
43803: LIST
43804: LIST
43805: PUSH
43806: LD_INT 2
43808: NEG
43809: PUSH
43810: LD_INT 3
43812: NEG
43813: PUSH
43814: EMPTY
43815: LIST
43816: LIST
43817: PUSH
43818: LD_INT 1
43820: NEG
43821: PUSH
43822: LD_INT 3
43824: NEG
43825: PUSH
43826: EMPTY
43827: LIST
43828: LIST
43829: PUSH
43830: LD_INT 1
43832: PUSH
43833: LD_INT 2
43835: NEG
43836: PUSH
43837: EMPTY
43838: LIST
43839: LIST
43840: PUSH
43841: LD_INT 2
43843: PUSH
43844: LD_INT 1
43846: NEG
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: PUSH
43852: EMPTY
43853: LIST
43854: LIST
43855: LIST
43856: LIST
43857: LIST
43858: LIST
43859: LIST
43860: LIST
43861: LIST
43862: LIST
43863: LIST
43864: LIST
43865: LIST
43866: LIST
43867: LIST
43868: LIST
43869: LIST
43870: LIST
43871: LIST
43872: LIST
43873: LIST
43874: LIST
43875: LIST
43876: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
43877: LD_ADDR_VAR 0 24
43881: PUSH
43882: LD_INT 0
43884: PUSH
43885: LD_INT 0
43887: PUSH
43888: EMPTY
43889: LIST
43890: LIST
43891: PUSH
43892: LD_INT 0
43894: PUSH
43895: LD_INT 1
43897: NEG
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: PUSH
43903: LD_INT 1
43905: PUSH
43906: LD_INT 0
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: PUSH
43913: LD_INT 1
43915: PUSH
43916: LD_INT 1
43918: PUSH
43919: EMPTY
43920: LIST
43921: LIST
43922: PUSH
43923: LD_INT 0
43925: PUSH
43926: LD_INT 1
43928: PUSH
43929: EMPTY
43930: LIST
43931: LIST
43932: PUSH
43933: LD_INT 1
43935: NEG
43936: PUSH
43937: LD_INT 0
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: PUSH
43944: LD_INT 1
43946: NEG
43947: PUSH
43948: LD_INT 1
43950: NEG
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: PUSH
43956: LD_INT 1
43958: NEG
43959: PUSH
43960: LD_INT 2
43962: NEG
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: PUSH
43968: LD_INT 0
43970: PUSH
43971: LD_INT 2
43973: NEG
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 1
43981: PUSH
43982: LD_INT 1
43984: NEG
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 2
43992: PUSH
43993: LD_INT 0
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: PUSH
44000: LD_INT 2
44002: PUSH
44003: LD_INT 1
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: PUSH
44010: LD_INT 2
44012: PUSH
44013: LD_INT 2
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: PUSH
44020: LD_INT 1
44022: PUSH
44023: LD_INT 2
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: PUSH
44030: LD_INT 0
44032: PUSH
44033: LD_INT 2
44035: PUSH
44036: EMPTY
44037: LIST
44038: LIST
44039: PUSH
44040: LD_INT 1
44042: NEG
44043: PUSH
44044: LD_INT 1
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: PUSH
44051: LD_INT 2
44053: NEG
44054: PUSH
44055: LD_INT 0
44057: PUSH
44058: EMPTY
44059: LIST
44060: LIST
44061: PUSH
44062: LD_INT 2
44064: NEG
44065: PUSH
44066: LD_INT 1
44068: NEG
44069: PUSH
44070: EMPTY
44071: LIST
44072: LIST
44073: PUSH
44074: LD_INT 2
44076: NEG
44077: PUSH
44078: LD_INT 2
44080: NEG
44081: PUSH
44082: EMPTY
44083: LIST
44084: LIST
44085: PUSH
44086: LD_INT 1
44088: PUSH
44089: LD_INT 2
44091: NEG
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: LD_INT 2
44099: PUSH
44100: LD_INT 1
44102: NEG
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: LD_INT 3
44110: PUSH
44111: LD_INT 1
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: PUSH
44118: LD_INT 3
44120: PUSH
44121: LD_INT 2
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: PUSH
44128: EMPTY
44129: LIST
44130: LIST
44131: LIST
44132: LIST
44133: LIST
44134: LIST
44135: LIST
44136: LIST
44137: LIST
44138: LIST
44139: LIST
44140: LIST
44141: LIST
44142: LIST
44143: LIST
44144: LIST
44145: LIST
44146: LIST
44147: LIST
44148: LIST
44149: LIST
44150: LIST
44151: LIST
44152: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
44153: LD_ADDR_VAR 0 25
44157: PUSH
44158: LD_INT 0
44160: PUSH
44161: LD_INT 0
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: PUSH
44168: LD_INT 0
44170: PUSH
44171: LD_INT 1
44173: NEG
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: PUSH
44179: LD_INT 1
44181: PUSH
44182: LD_INT 0
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: PUSH
44189: LD_INT 1
44191: PUSH
44192: LD_INT 1
44194: PUSH
44195: EMPTY
44196: LIST
44197: LIST
44198: PUSH
44199: LD_INT 0
44201: PUSH
44202: LD_INT 1
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: PUSH
44209: LD_INT 1
44211: NEG
44212: PUSH
44213: LD_INT 0
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PUSH
44220: LD_INT 1
44222: NEG
44223: PUSH
44224: LD_INT 1
44226: NEG
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: PUSH
44232: LD_INT 1
44234: NEG
44235: PUSH
44236: LD_INT 2
44238: NEG
44239: PUSH
44240: EMPTY
44241: LIST
44242: LIST
44243: PUSH
44244: LD_INT 0
44246: PUSH
44247: LD_INT 2
44249: NEG
44250: PUSH
44251: EMPTY
44252: LIST
44253: LIST
44254: PUSH
44255: LD_INT 1
44257: PUSH
44258: LD_INT 1
44260: NEG
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: PUSH
44266: LD_INT 2
44268: PUSH
44269: LD_INT 0
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: PUSH
44276: LD_INT 2
44278: PUSH
44279: LD_INT 1
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: PUSH
44286: LD_INT 2
44288: PUSH
44289: LD_INT 2
44291: PUSH
44292: EMPTY
44293: LIST
44294: LIST
44295: PUSH
44296: LD_INT 1
44298: PUSH
44299: LD_INT 2
44301: PUSH
44302: EMPTY
44303: LIST
44304: LIST
44305: PUSH
44306: LD_INT 0
44308: PUSH
44309: LD_INT 2
44311: PUSH
44312: EMPTY
44313: LIST
44314: LIST
44315: PUSH
44316: LD_INT 1
44318: NEG
44319: PUSH
44320: LD_INT 1
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: PUSH
44327: LD_INT 2
44329: NEG
44330: PUSH
44331: LD_INT 0
44333: PUSH
44334: EMPTY
44335: LIST
44336: LIST
44337: PUSH
44338: LD_INT 2
44340: NEG
44341: PUSH
44342: LD_INT 1
44344: NEG
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: PUSH
44350: LD_INT 2
44352: NEG
44353: PUSH
44354: LD_INT 2
44356: NEG
44357: PUSH
44358: EMPTY
44359: LIST
44360: LIST
44361: PUSH
44362: LD_INT 3
44364: PUSH
44365: LD_INT 1
44367: PUSH
44368: EMPTY
44369: LIST
44370: LIST
44371: PUSH
44372: LD_INT 3
44374: PUSH
44375: LD_INT 2
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: PUSH
44382: LD_INT 2
44384: PUSH
44385: LD_INT 3
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: PUSH
44392: LD_INT 1
44394: PUSH
44395: LD_INT 3
44397: PUSH
44398: EMPTY
44399: LIST
44400: LIST
44401: PUSH
44402: EMPTY
44403: LIST
44404: LIST
44405: LIST
44406: LIST
44407: LIST
44408: LIST
44409: LIST
44410: LIST
44411: LIST
44412: LIST
44413: LIST
44414: LIST
44415: LIST
44416: LIST
44417: LIST
44418: LIST
44419: LIST
44420: LIST
44421: LIST
44422: LIST
44423: LIST
44424: LIST
44425: LIST
44426: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44427: LD_ADDR_VAR 0 26
44431: PUSH
44432: LD_INT 0
44434: PUSH
44435: LD_INT 0
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PUSH
44442: LD_INT 0
44444: PUSH
44445: LD_INT 1
44447: NEG
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: PUSH
44453: LD_INT 1
44455: PUSH
44456: LD_INT 0
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: PUSH
44463: LD_INT 1
44465: PUSH
44466: LD_INT 1
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: PUSH
44473: LD_INT 0
44475: PUSH
44476: LD_INT 1
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: PUSH
44483: LD_INT 1
44485: NEG
44486: PUSH
44487: LD_INT 0
44489: PUSH
44490: EMPTY
44491: LIST
44492: LIST
44493: PUSH
44494: LD_INT 1
44496: NEG
44497: PUSH
44498: LD_INT 1
44500: NEG
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: PUSH
44506: LD_INT 1
44508: NEG
44509: PUSH
44510: LD_INT 2
44512: NEG
44513: PUSH
44514: EMPTY
44515: LIST
44516: LIST
44517: PUSH
44518: LD_INT 0
44520: PUSH
44521: LD_INT 2
44523: NEG
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: PUSH
44529: LD_INT 1
44531: PUSH
44532: LD_INT 1
44534: NEG
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: PUSH
44540: LD_INT 2
44542: PUSH
44543: LD_INT 0
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: LD_INT 2
44552: PUSH
44553: LD_INT 1
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: PUSH
44560: LD_INT 2
44562: PUSH
44563: LD_INT 2
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: PUSH
44570: LD_INT 1
44572: PUSH
44573: LD_INT 2
44575: PUSH
44576: EMPTY
44577: LIST
44578: LIST
44579: PUSH
44580: LD_INT 0
44582: PUSH
44583: LD_INT 2
44585: PUSH
44586: EMPTY
44587: LIST
44588: LIST
44589: PUSH
44590: LD_INT 1
44592: NEG
44593: PUSH
44594: LD_INT 1
44596: PUSH
44597: EMPTY
44598: LIST
44599: LIST
44600: PUSH
44601: LD_INT 2
44603: NEG
44604: PUSH
44605: LD_INT 0
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: PUSH
44612: LD_INT 2
44614: NEG
44615: PUSH
44616: LD_INT 1
44618: NEG
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: PUSH
44624: LD_INT 2
44626: NEG
44627: PUSH
44628: LD_INT 2
44630: NEG
44631: PUSH
44632: EMPTY
44633: LIST
44634: LIST
44635: PUSH
44636: LD_INT 2
44638: PUSH
44639: LD_INT 3
44641: PUSH
44642: EMPTY
44643: LIST
44644: LIST
44645: PUSH
44646: LD_INT 1
44648: PUSH
44649: LD_INT 3
44651: PUSH
44652: EMPTY
44653: LIST
44654: LIST
44655: PUSH
44656: LD_INT 1
44658: NEG
44659: PUSH
44660: LD_INT 2
44662: PUSH
44663: EMPTY
44664: LIST
44665: LIST
44666: PUSH
44667: LD_INT 2
44669: NEG
44670: PUSH
44671: LD_INT 1
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: LIST
44682: LIST
44683: LIST
44684: LIST
44685: LIST
44686: LIST
44687: LIST
44688: LIST
44689: LIST
44690: LIST
44691: LIST
44692: LIST
44693: LIST
44694: LIST
44695: LIST
44696: LIST
44697: LIST
44698: LIST
44699: LIST
44700: LIST
44701: LIST
44702: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44703: LD_ADDR_VAR 0 27
44707: PUSH
44708: LD_INT 0
44710: PUSH
44711: LD_INT 0
44713: PUSH
44714: EMPTY
44715: LIST
44716: LIST
44717: PUSH
44718: LD_INT 0
44720: PUSH
44721: LD_INT 1
44723: NEG
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: PUSH
44729: LD_INT 1
44731: PUSH
44732: LD_INT 0
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: PUSH
44739: LD_INT 1
44741: PUSH
44742: LD_INT 1
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: PUSH
44749: LD_INT 0
44751: PUSH
44752: LD_INT 1
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: PUSH
44759: LD_INT 1
44761: NEG
44762: PUSH
44763: LD_INT 0
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: PUSH
44770: LD_INT 1
44772: NEG
44773: PUSH
44774: LD_INT 1
44776: NEG
44777: PUSH
44778: EMPTY
44779: LIST
44780: LIST
44781: PUSH
44782: LD_INT 1
44784: NEG
44785: PUSH
44786: LD_INT 2
44788: NEG
44789: PUSH
44790: EMPTY
44791: LIST
44792: LIST
44793: PUSH
44794: LD_INT 0
44796: PUSH
44797: LD_INT 2
44799: NEG
44800: PUSH
44801: EMPTY
44802: LIST
44803: LIST
44804: PUSH
44805: LD_INT 1
44807: PUSH
44808: LD_INT 1
44810: NEG
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: PUSH
44816: LD_INT 2
44818: PUSH
44819: LD_INT 0
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: PUSH
44826: LD_INT 2
44828: PUSH
44829: LD_INT 1
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: PUSH
44836: LD_INT 2
44838: PUSH
44839: LD_INT 2
44841: PUSH
44842: EMPTY
44843: LIST
44844: LIST
44845: PUSH
44846: LD_INT 1
44848: PUSH
44849: LD_INT 2
44851: PUSH
44852: EMPTY
44853: LIST
44854: LIST
44855: PUSH
44856: LD_INT 0
44858: PUSH
44859: LD_INT 2
44861: PUSH
44862: EMPTY
44863: LIST
44864: LIST
44865: PUSH
44866: LD_INT 1
44868: NEG
44869: PUSH
44870: LD_INT 1
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: PUSH
44877: LD_INT 2
44879: NEG
44880: PUSH
44881: LD_INT 0
44883: PUSH
44884: EMPTY
44885: LIST
44886: LIST
44887: PUSH
44888: LD_INT 2
44890: NEG
44891: PUSH
44892: LD_INT 1
44894: NEG
44895: PUSH
44896: EMPTY
44897: LIST
44898: LIST
44899: PUSH
44900: LD_INT 2
44902: NEG
44903: PUSH
44904: LD_INT 2
44906: NEG
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: PUSH
44912: LD_INT 1
44914: NEG
44915: PUSH
44916: LD_INT 2
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: PUSH
44923: LD_INT 2
44925: NEG
44926: PUSH
44927: LD_INT 1
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: PUSH
44934: LD_INT 3
44936: NEG
44937: PUSH
44938: LD_INT 1
44940: NEG
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: PUSH
44946: LD_INT 3
44948: NEG
44949: PUSH
44950: LD_INT 2
44952: NEG
44953: PUSH
44954: EMPTY
44955: LIST
44956: LIST
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: LIST
44962: LIST
44963: LIST
44964: LIST
44965: LIST
44966: LIST
44967: LIST
44968: LIST
44969: LIST
44970: LIST
44971: LIST
44972: LIST
44973: LIST
44974: LIST
44975: LIST
44976: LIST
44977: LIST
44978: LIST
44979: LIST
44980: LIST
44981: LIST
44982: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44983: LD_ADDR_VAR 0 28
44987: PUSH
44988: LD_INT 0
44990: PUSH
44991: LD_INT 0
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: PUSH
44998: LD_INT 0
45000: PUSH
45001: LD_INT 1
45003: NEG
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: PUSH
45009: LD_INT 1
45011: PUSH
45012: LD_INT 0
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: PUSH
45019: LD_INT 1
45021: PUSH
45022: LD_INT 1
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: PUSH
45029: LD_INT 0
45031: PUSH
45032: LD_INT 1
45034: PUSH
45035: EMPTY
45036: LIST
45037: LIST
45038: PUSH
45039: LD_INT 1
45041: NEG
45042: PUSH
45043: LD_INT 0
45045: PUSH
45046: EMPTY
45047: LIST
45048: LIST
45049: PUSH
45050: LD_INT 1
45052: NEG
45053: PUSH
45054: LD_INT 1
45056: NEG
45057: PUSH
45058: EMPTY
45059: LIST
45060: LIST
45061: PUSH
45062: LD_INT 1
45064: NEG
45065: PUSH
45066: LD_INT 2
45068: NEG
45069: PUSH
45070: EMPTY
45071: LIST
45072: LIST
45073: PUSH
45074: LD_INT 0
45076: PUSH
45077: LD_INT 2
45079: NEG
45080: PUSH
45081: EMPTY
45082: LIST
45083: LIST
45084: PUSH
45085: LD_INT 1
45087: PUSH
45088: LD_INT 1
45090: NEG
45091: PUSH
45092: EMPTY
45093: LIST
45094: LIST
45095: PUSH
45096: LD_INT 2
45098: PUSH
45099: LD_INT 0
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: PUSH
45106: LD_INT 2
45108: PUSH
45109: LD_INT 1
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: PUSH
45116: LD_INT 2
45118: PUSH
45119: LD_INT 2
45121: PUSH
45122: EMPTY
45123: LIST
45124: LIST
45125: PUSH
45126: LD_INT 1
45128: PUSH
45129: LD_INT 2
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: PUSH
45136: LD_INT 0
45138: PUSH
45139: LD_INT 2
45141: PUSH
45142: EMPTY
45143: LIST
45144: LIST
45145: PUSH
45146: LD_INT 1
45148: NEG
45149: PUSH
45150: LD_INT 1
45152: PUSH
45153: EMPTY
45154: LIST
45155: LIST
45156: PUSH
45157: LD_INT 2
45159: NEG
45160: PUSH
45161: LD_INT 0
45163: PUSH
45164: EMPTY
45165: LIST
45166: LIST
45167: PUSH
45168: LD_INT 2
45170: NEG
45171: PUSH
45172: LD_INT 1
45174: NEG
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: PUSH
45180: LD_INT 2
45182: NEG
45183: PUSH
45184: LD_INT 2
45186: NEG
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: PUSH
45192: LD_INT 2
45194: NEG
45195: PUSH
45196: LD_INT 3
45198: NEG
45199: PUSH
45200: EMPTY
45201: LIST
45202: LIST
45203: PUSH
45204: LD_INT 1
45206: NEG
45207: PUSH
45208: LD_INT 3
45210: NEG
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: PUSH
45216: LD_INT 3
45218: NEG
45219: PUSH
45220: LD_INT 1
45222: NEG
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: PUSH
45228: LD_INT 3
45230: NEG
45231: PUSH
45232: LD_INT 2
45234: NEG
45235: PUSH
45236: EMPTY
45237: LIST
45238: LIST
45239: PUSH
45240: EMPTY
45241: LIST
45242: LIST
45243: LIST
45244: LIST
45245: LIST
45246: LIST
45247: LIST
45248: LIST
45249: LIST
45250: LIST
45251: LIST
45252: LIST
45253: LIST
45254: LIST
45255: LIST
45256: LIST
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: LIST
45263: LIST
45264: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45265: LD_ADDR_VAR 0 29
45269: PUSH
45270: LD_INT 0
45272: PUSH
45273: LD_INT 0
45275: PUSH
45276: EMPTY
45277: LIST
45278: LIST
45279: PUSH
45280: LD_INT 0
45282: PUSH
45283: LD_INT 1
45285: NEG
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: PUSH
45291: LD_INT 1
45293: PUSH
45294: LD_INT 0
45296: PUSH
45297: EMPTY
45298: LIST
45299: LIST
45300: PUSH
45301: LD_INT 1
45303: PUSH
45304: LD_INT 1
45306: PUSH
45307: EMPTY
45308: LIST
45309: LIST
45310: PUSH
45311: LD_INT 0
45313: PUSH
45314: LD_INT 1
45316: PUSH
45317: EMPTY
45318: LIST
45319: LIST
45320: PUSH
45321: LD_INT 1
45323: NEG
45324: PUSH
45325: LD_INT 0
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: PUSH
45332: LD_INT 1
45334: NEG
45335: PUSH
45336: LD_INT 1
45338: NEG
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: PUSH
45344: LD_INT 1
45346: NEG
45347: PUSH
45348: LD_INT 2
45350: NEG
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: LD_INT 0
45358: PUSH
45359: LD_INT 2
45361: NEG
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: PUSH
45367: LD_INT 1
45369: PUSH
45370: LD_INT 1
45372: NEG
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: LD_INT 2
45380: PUSH
45381: LD_INT 0
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PUSH
45388: LD_INT 2
45390: PUSH
45391: LD_INT 1
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: PUSH
45398: LD_INT 1
45400: PUSH
45401: LD_INT 2
45403: PUSH
45404: EMPTY
45405: LIST
45406: LIST
45407: PUSH
45408: LD_INT 0
45410: PUSH
45411: LD_INT 2
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: PUSH
45418: LD_INT 1
45420: NEG
45421: PUSH
45422: LD_INT 1
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: PUSH
45429: LD_INT 2
45431: NEG
45432: PUSH
45433: LD_INT 1
45435: NEG
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: LD_INT 2
45443: NEG
45444: PUSH
45445: LD_INT 2
45447: NEG
45448: PUSH
45449: EMPTY
45450: LIST
45451: LIST
45452: PUSH
45453: LD_INT 2
45455: NEG
45456: PUSH
45457: LD_INT 3
45459: NEG
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: LD_INT 2
45467: PUSH
45468: LD_INT 1
45470: NEG
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: PUSH
45476: LD_INT 3
45478: PUSH
45479: LD_INT 1
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: PUSH
45486: LD_INT 1
45488: PUSH
45489: LD_INT 3
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: PUSH
45496: LD_INT 1
45498: NEG
45499: PUSH
45500: LD_INT 2
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: PUSH
45507: LD_INT 3
45509: NEG
45510: PUSH
45511: LD_INT 2
45513: NEG
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: LIST
45534: LIST
45535: LIST
45536: LIST
45537: LIST
45538: LIST
45539: LIST
45540: LIST
45541: LIST
45542: LIST
45543: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45544: LD_ADDR_VAR 0 30
45548: PUSH
45549: LD_INT 0
45551: PUSH
45552: LD_INT 0
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: PUSH
45559: LD_INT 0
45561: PUSH
45562: LD_INT 1
45564: NEG
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: PUSH
45570: LD_INT 1
45572: PUSH
45573: LD_INT 0
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: PUSH
45580: LD_INT 1
45582: PUSH
45583: LD_INT 1
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: LD_INT 0
45592: PUSH
45593: LD_INT 1
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: PUSH
45600: LD_INT 1
45602: NEG
45603: PUSH
45604: LD_INT 0
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: LD_INT 1
45613: NEG
45614: PUSH
45615: LD_INT 1
45617: NEG
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: PUSH
45623: LD_INT 1
45625: NEG
45626: PUSH
45627: LD_INT 2
45629: NEG
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: PUSH
45635: LD_INT 0
45637: PUSH
45638: LD_INT 2
45640: NEG
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: LD_INT 1
45648: PUSH
45649: LD_INT 1
45651: NEG
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PUSH
45657: LD_INT 2
45659: PUSH
45660: LD_INT 0
45662: PUSH
45663: EMPTY
45664: LIST
45665: LIST
45666: PUSH
45667: LD_INT 2
45669: PUSH
45670: LD_INT 1
45672: PUSH
45673: EMPTY
45674: LIST
45675: LIST
45676: PUSH
45677: LD_INT 2
45679: PUSH
45680: LD_INT 2
45682: PUSH
45683: EMPTY
45684: LIST
45685: LIST
45686: PUSH
45687: LD_INT 1
45689: PUSH
45690: LD_INT 2
45692: PUSH
45693: EMPTY
45694: LIST
45695: LIST
45696: PUSH
45697: LD_INT 1
45699: NEG
45700: PUSH
45701: LD_INT 1
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: PUSH
45708: LD_INT 2
45710: NEG
45711: PUSH
45712: LD_INT 0
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: PUSH
45719: LD_INT 2
45721: NEG
45722: PUSH
45723: LD_INT 1
45725: NEG
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: PUSH
45731: LD_INT 1
45733: NEG
45734: PUSH
45735: LD_INT 3
45737: NEG
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: PUSH
45743: LD_INT 1
45745: PUSH
45746: LD_INT 2
45748: NEG
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: PUSH
45754: LD_INT 3
45756: PUSH
45757: LD_INT 2
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: PUSH
45764: LD_INT 2
45766: PUSH
45767: LD_INT 3
45769: PUSH
45770: EMPTY
45771: LIST
45772: LIST
45773: PUSH
45774: LD_INT 2
45776: NEG
45777: PUSH
45778: LD_INT 1
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: PUSH
45785: LD_INT 3
45787: NEG
45788: PUSH
45789: LD_INT 1
45791: NEG
45792: PUSH
45793: EMPTY
45794: LIST
45795: LIST
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: LIST
45801: LIST
45802: LIST
45803: LIST
45804: LIST
45805: LIST
45806: LIST
45807: LIST
45808: LIST
45809: LIST
45810: LIST
45811: LIST
45812: LIST
45813: LIST
45814: LIST
45815: LIST
45816: LIST
45817: LIST
45818: LIST
45819: LIST
45820: LIST
45821: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45822: LD_ADDR_VAR 0 31
45826: PUSH
45827: LD_INT 0
45829: PUSH
45830: LD_INT 0
45832: PUSH
45833: EMPTY
45834: LIST
45835: LIST
45836: PUSH
45837: LD_INT 0
45839: PUSH
45840: LD_INT 1
45842: NEG
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: PUSH
45848: LD_INT 1
45850: PUSH
45851: LD_INT 0
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: PUSH
45858: LD_INT 1
45860: PUSH
45861: LD_INT 1
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: PUSH
45868: LD_INT 0
45870: PUSH
45871: LD_INT 1
45873: PUSH
45874: EMPTY
45875: LIST
45876: LIST
45877: PUSH
45878: LD_INT 1
45880: NEG
45881: PUSH
45882: LD_INT 0
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: PUSH
45889: LD_INT 1
45891: NEG
45892: PUSH
45893: LD_INT 1
45895: NEG
45896: PUSH
45897: EMPTY
45898: LIST
45899: LIST
45900: PUSH
45901: LD_INT 1
45903: NEG
45904: PUSH
45905: LD_INT 2
45907: NEG
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: PUSH
45913: LD_INT 1
45915: PUSH
45916: LD_INT 1
45918: NEG
45919: PUSH
45920: EMPTY
45921: LIST
45922: LIST
45923: PUSH
45924: LD_INT 2
45926: PUSH
45927: LD_INT 0
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: PUSH
45934: LD_INT 2
45936: PUSH
45937: LD_INT 1
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: PUSH
45944: LD_INT 2
45946: PUSH
45947: LD_INT 2
45949: PUSH
45950: EMPTY
45951: LIST
45952: LIST
45953: PUSH
45954: LD_INT 1
45956: PUSH
45957: LD_INT 2
45959: PUSH
45960: EMPTY
45961: LIST
45962: LIST
45963: PUSH
45964: LD_INT 0
45966: PUSH
45967: LD_INT 2
45969: PUSH
45970: EMPTY
45971: LIST
45972: LIST
45973: PUSH
45974: LD_INT 1
45976: NEG
45977: PUSH
45978: LD_INT 1
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: PUSH
45985: LD_INT 2
45987: NEG
45988: PUSH
45989: LD_INT 1
45991: NEG
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: PUSH
45997: LD_INT 2
45999: NEG
46000: PUSH
46001: LD_INT 2
46003: NEG
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: PUSH
46009: LD_INT 2
46011: NEG
46012: PUSH
46013: LD_INT 3
46015: NEG
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: PUSH
46021: LD_INT 2
46023: PUSH
46024: LD_INT 1
46026: NEG
46027: PUSH
46028: EMPTY
46029: LIST
46030: LIST
46031: PUSH
46032: LD_INT 3
46034: PUSH
46035: LD_INT 1
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: PUSH
46042: LD_INT 1
46044: PUSH
46045: LD_INT 3
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: LD_INT 1
46054: NEG
46055: PUSH
46056: LD_INT 2
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: PUSH
46063: LD_INT 3
46065: NEG
46066: PUSH
46067: LD_INT 2
46069: NEG
46070: PUSH
46071: EMPTY
46072: LIST
46073: LIST
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: LIST
46079: LIST
46080: LIST
46081: LIST
46082: LIST
46083: LIST
46084: LIST
46085: LIST
46086: LIST
46087: LIST
46088: LIST
46089: LIST
46090: LIST
46091: LIST
46092: LIST
46093: LIST
46094: LIST
46095: LIST
46096: LIST
46097: LIST
46098: LIST
46099: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46100: LD_ADDR_VAR 0 32
46104: PUSH
46105: LD_INT 0
46107: PUSH
46108: LD_INT 0
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: PUSH
46115: LD_INT 0
46117: PUSH
46118: LD_INT 1
46120: NEG
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: PUSH
46126: LD_INT 1
46128: PUSH
46129: LD_INT 0
46131: PUSH
46132: EMPTY
46133: LIST
46134: LIST
46135: PUSH
46136: LD_INT 1
46138: PUSH
46139: LD_INT 1
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: PUSH
46146: LD_INT 0
46148: PUSH
46149: LD_INT 1
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: PUSH
46156: LD_INT 1
46158: NEG
46159: PUSH
46160: LD_INT 0
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: PUSH
46167: LD_INT 1
46169: NEG
46170: PUSH
46171: LD_INT 1
46173: NEG
46174: PUSH
46175: EMPTY
46176: LIST
46177: LIST
46178: PUSH
46179: LD_INT 1
46181: NEG
46182: PUSH
46183: LD_INT 2
46185: NEG
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: PUSH
46191: LD_INT 0
46193: PUSH
46194: LD_INT 2
46196: NEG
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: LD_INT 1
46204: PUSH
46205: LD_INT 1
46207: NEG
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PUSH
46213: LD_INT 2
46215: PUSH
46216: LD_INT 1
46218: PUSH
46219: EMPTY
46220: LIST
46221: LIST
46222: PUSH
46223: LD_INT 2
46225: PUSH
46226: LD_INT 2
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: PUSH
46233: LD_INT 1
46235: PUSH
46236: LD_INT 2
46238: PUSH
46239: EMPTY
46240: LIST
46241: LIST
46242: PUSH
46243: LD_INT 0
46245: PUSH
46246: LD_INT 2
46248: PUSH
46249: EMPTY
46250: LIST
46251: LIST
46252: PUSH
46253: LD_INT 1
46255: NEG
46256: PUSH
46257: LD_INT 1
46259: PUSH
46260: EMPTY
46261: LIST
46262: LIST
46263: PUSH
46264: LD_INT 2
46266: NEG
46267: PUSH
46268: LD_INT 0
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: PUSH
46275: LD_INT 2
46277: NEG
46278: PUSH
46279: LD_INT 1
46281: NEG
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: PUSH
46287: LD_INT 1
46289: NEG
46290: PUSH
46291: LD_INT 3
46293: NEG
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: PUSH
46299: LD_INT 1
46301: PUSH
46302: LD_INT 2
46304: NEG
46305: PUSH
46306: EMPTY
46307: LIST
46308: LIST
46309: PUSH
46310: LD_INT 3
46312: PUSH
46313: LD_INT 2
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: PUSH
46320: LD_INT 2
46322: PUSH
46323: LD_INT 3
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: LD_INT 2
46332: NEG
46333: PUSH
46334: LD_INT 1
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: PUSH
46341: LD_INT 3
46343: NEG
46344: PUSH
46345: LD_INT 1
46347: NEG
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: PUSH
46353: EMPTY
46354: LIST
46355: LIST
46356: LIST
46357: LIST
46358: LIST
46359: LIST
46360: LIST
46361: LIST
46362: LIST
46363: LIST
46364: LIST
46365: LIST
46366: LIST
46367: LIST
46368: LIST
46369: LIST
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46378: LD_ADDR_VAR 0 33
46382: PUSH
46383: LD_INT 0
46385: PUSH
46386: LD_INT 0
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: PUSH
46393: LD_INT 0
46395: PUSH
46396: LD_INT 1
46398: NEG
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: LD_INT 1
46406: PUSH
46407: LD_INT 0
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: LD_INT 1
46416: PUSH
46417: LD_INT 1
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: LD_INT 0
46426: PUSH
46427: LD_INT 1
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: PUSH
46434: LD_INT 1
46436: NEG
46437: PUSH
46438: LD_INT 0
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: LD_INT 1
46447: NEG
46448: PUSH
46449: LD_INT 1
46451: NEG
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: LD_INT 1
46459: NEG
46460: PUSH
46461: LD_INT 2
46463: NEG
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: PUSH
46469: LD_INT 1
46471: PUSH
46472: LD_INT 1
46474: NEG
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: LD_INT 2
46482: PUSH
46483: LD_INT 0
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: PUSH
46490: LD_INT 2
46492: PUSH
46493: LD_INT 1
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 1
46502: PUSH
46503: LD_INT 2
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: LD_INT 0
46512: PUSH
46513: LD_INT 2
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: PUSH
46520: LD_INT 1
46522: NEG
46523: PUSH
46524: LD_INT 1
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: LD_INT 2
46533: NEG
46534: PUSH
46535: LD_INT 0
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 2
46544: NEG
46545: PUSH
46546: LD_INT 1
46548: NEG
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: LD_INT 2
46556: NEG
46557: PUSH
46558: LD_INT 2
46560: NEG
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: PUSH
46566: LD_INT 2
46568: NEG
46569: PUSH
46570: LD_INT 3
46572: NEG
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: LD_INT 2
46580: PUSH
46581: LD_INT 1
46583: NEG
46584: PUSH
46585: EMPTY
46586: LIST
46587: LIST
46588: PUSH
46589: LD_INT 3
46591: PUSH
46592: LD_INT 1
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: PUSH
46599: LD_INT 1
46601: PUSH
46602: LD_INT 3
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: PUSH
46609: LD_INT 1
46611: NEG
46612: PUSH
46613: LD_INT 2
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: LD_INT 3
46622: NEG
46623: PUSH
46624: LD_INT 2
46626: NEG
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: LIST
46636: LIST
46637: LIST
46638: LIST
46639: LIST
46640: LIST
46641: LIST
46642: LIST
46643: LIST
46644: LIST
46645: LIST
46646: LIST
46647: LIST
46648: LIST
46649: LIST
46650: LIST
46651: LIST
46652: LIST
46653: LIST
46654: LIST
46655: LIST
46656: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46657: LD_ADDR_VAR 0 34
46661: PUSH
46662: LD_INT 0
46664: PUSH
46665: LD_INT 0
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: PUSH
46672: LD_INT 0
46674: PUSH
46675: LD_INT 1
46677: NEG
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: PUSH
46683: LD_INT 1
46685: PUSH
46686: LD_INT 0
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 1
46695: PUSH
46696: LD_INT 1
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: PUSH
46703: LD_INT 0
46705: PUSH
46706: LD_INT 1
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: PUSH
46713: LD_INT 1
46715: NEG
46716: PUSH
46717: LD_INT 0
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PUSH
46724: LD_INT 1
46726: NEG
46727: PUSH
46728: LD_INT 1
46730: NEG
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: LD_INT 1
46738: NEG
46739: PUSH
46740: LD_INT 2
46742: NEG
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: PUSH
46748: LD_INT 0
46750: PUSH
46751: LD_INT 2
46753: NEG
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 1
46761: PUSH
46762: LD_INT 1
46764: NEG
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: LD_INT 2
46772: PUSH
46773: LD_INT 1
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: PUSH
46780: LD_INT 2
46782: PUSH
46783: LD_INT 2
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: LD_INT 1
46792: PUSH
46793: LD_INT 2
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: PUSH
46800: LD_INT 1
46802: NEG
46803: PUSH
46804: LD_INT 1
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 2
46813: NEG
46814: PUSH
46815: LD_INT 0
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 2
46824: NEG
46825: PUSH
46826: LD_INT 1
46828: NEG
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PUSH
46834: LD_INT 2
46836: NEG
46837: PUSH
46838: LD_INT 2
46840: NEG
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PUSH
46846: LD_INT 1
46848: NEG
46849: PUSH
46850: LD_INT 3
46852: NEG
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: PUSH
46858: LD_INT 1
46860: PUSH
46861: LD_INT 2
46863: NEG
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: LD_INT 3
46871: PUSH
46872: LD_INT 2
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: LD_INT 2
46881: PUSH
46882: LD_INT 3
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: PUSH
46889: LD_INT 2
46891: NEG
46892: PUSH
46893: LD_INT 1
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 3
46902: NEG
46903: PUSH
46904: LD_INT 1
46906: NEG
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: LIST
46916: LIST
46917: LIST
46918: LIST
46919: LIST
46920: LIST
46921: LIST
46922: LIST
46923: LIST
46924: LIST
46925: LIST
46926: LIST
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46937: LD_ADDR_VAR 0 35
46941: PUSH
46942: LD_INT 0
46944: PUSH
46945: LD_INT 0
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: PUSH
46952: LD_INT 0
46954: PUSH
46955: LD_INT 1
46957: NEG
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: PUSH
46963: LD_INT 1
46965: PUSH
46966: LD_INT 0
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: LD_INT 1
46975: PUSH
46976: LD_INT 1
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: PUSH
46983: LD_INT 0
46985: PUSH
46986: LD_INT 1
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: LD_INT 1
46995: NEG
46996: PUSH
46997: LD_INT 0
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: PUSH
47004: LD_INT 1
47006: NEG
47007: PUSH
47008: LD_INT 1
47010: NEG
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: LD_INT 2
47018: PUSH
47019: LD_INT 1
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PUSH
47026: LD_INT 2
47028: NEG
47029: PUSH
47030: LD_INT 1
47032: NEG
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: PUSH
47038: EMPTY
47039: LIST
47040: LIST
47041: LIST
47042: LIST
47043: LIST
47044: LIST
47045: LIST
47046: LIST
47047: LIST
47048: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47049: LD_ADDR_VAR 0 36
47053: PUSH
47054: LD_INT 0
47056: PUSH
47057: LD_INT 0
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: LD_INT 0
47066: PUSH
47067: LD_INT 1
47069: NEG
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: PUSH
47075: LD_INT 1
47077: PUSH
47078: LD_INT 0
47080: PUSH
47081: EMPTY
47082: LIST
47083: LIST
47084: PUSH
47085: LD_INT 1
47087: PUSH
47088: LD_INT 1
47090: PUSH
47091: EMPTY
47092: LIST
47093: LIST
47094: PUSH
47095: LD_INT 0
47097: PUSH
47098: LD_INT 1
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: PUSH
47105: LD_INT 1
47107: NEG
47108: PUSH
47109: LD_INT 0
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: LD_INT 1
47118: NEG
47119: PUSH
47120: LD_INT 1
47122: NEG
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: PUSH
47128: LD_INT 1
47130: NEG
47131: PUSH
47132: LD_INT 2
47134: NEG
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: PUSH
47140: LD_INT 1
47142: PUSH
47143: LD_INT 2
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: LIST
47154: LIST
47155: LIST
47156: LIST
47157: LIST
47158: LIST
47159: LIST
47160: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47161: LD_ADDR_VAR 0 37
47165: PUSH
47166: LD_INT 0
47168: PUSH
47169: LD_INT 0
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 0
47178: PUSH
47179: LD_INT 1
47181: NEG
47182: PUSH
47183: EMPTY
47184: LIST
47185: LIST
47186: PUSH
47187: LD_INT 1
47189: PUSH
47190: LD_INT 0
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 1
47199: PUSH
47200: LD_INT 1
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: PUSH
47207: LD_INT 0
47209: PUSH
47210: LD_INT 1
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: PUSH
47217: LD_INT 1
47219: NEG
47220: PUSH
47221: LD_INT 0
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: PUSH
47228: LD_INT 1
47230: NEG
47231: PUSH
47232: LD_INT 1
47234: NEG
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: PUSH
47240: LD_INT 1
47242: PUSH
47243: LD_INT 1
47245: NEG
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: PUSH
47251: LD_INT 1
47253: NEG
47254: PUSH
47255: LD_INT 1
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: LIST
47266: LIST
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: LIST
47272: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47273: LD_ADDR_VAR 0 38
47277: PUSH
47278: LD_INT 0
47280: PUSH
47281: LD_INT 0
47283: PUSH
47284: EMPTY
47285: LIST
47286: LIST
47287: PUSH
47288: LD_INT 0
47290: PUSH
47291: LD_INT 1
47293: NEG
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PUSH
47299: LD_INT 1
47301: PUSH
47302: LD_INT 0
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: PUSH
47309: LD_INT 1
47311: PUSH
47312: LD_INT 1
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: PUSH
47319: LD_INT 0
47321: PUSH
47322: LD_INT 1
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: PUSH
47329: LD_INT 1
47331: NEG
47332: PUSH
47333: LD_INT 0
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: PUSH
47340: LD_INT 1
47342: NEG
47343: PUSH
47344: LD_INT 1
47346: NEG
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: PUSH
47352: LD_INT 2
47354: PUSH
47355: LD_INT 1
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: PUSH
47362: LD_INT 2
47364: NEG
47365: PUSH
47366: LD_INT 1
47368: NEG
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: LIST
47378: LIST
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: LIST
47384: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47385: LD_ADDR_VAR 0 39
47389: PUSH
47390: LD_INT 0
47392: PUSH
47393: LD_INT 0
47395: PUSH
47396: EMPTY
47397: LIST
47398: LIST
47399: PUSH
47400: LD_INT 0
47402: PUSH
47403: LD_INT 1
47405: NEG
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: PUSH
47411: LD_INT 1
47413: PUSH
47414: LD_INT 0
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: PUSH
47421: LD_INT 1
47423: PUSH
47424: LD_INT 1
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: PUSH
47431: LD_INT 0
47433: PUSH
47434: LD_INT 1
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PUSH
47441: LD_INT 1
47443: NEG
47444: PUSH
47445: LD_INT 0
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 1
47454: NEG
47455: PUSH
47456: LD_INT 1
47458: NEG
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: LD_INT 1
47466: NEG
47467: PUSH
47468: LD_INT 2
47470: NEG
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: PUSH
47476: LD_INT 1
47478: PUSH
47479: LD_INT 2
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: LIST
47490: LIST
47491: LIST
47492: LIST
47493: LIST
47494: LIST
47495: LIST
47496: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47497: LD_ADDR_VAR 0 40
47501: PUSH
47502: LD_INT 0
47504: PUSH
47505: LD_INT 0
47507: PUSH
47508: EMPTY
47509: LIST
47510: LIST
47511: PUSH
47512: LD_INT 0
47514: PUSH
47515: LD_INT 1
47517: NEG
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: PUSH
47523: LD_INT 1
47525: PUSH
47526: LD_INT 0
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: PUSH
47533: LD_INT 1
47535: PUSH
47536: LD_INT 1
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: PUSH
47543: LD_INT 0
47545: PUSH
47546: LD_INT 1
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: LD_INT 1
47555: NEG
47556: PUSH
47557: LD_INT 0
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: PUSH
47564: LD_INT 1
47566: NEG
47567: PUSH
47568: LD_INT 1
47570: NEG
47571: PUSH
47572: EMPTY
47573: LIST
47574: LIST
47575: PUSH
47576: LD_INT 1
47578: PUSH
47579: LD_INT 1
47581: NEG
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: PUSH
47587: LD_INT 1
47589: NEG
47590: PUSH
47591: LD_INT 1
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: LIST
47602: LIST
47603: LIST
47604: LIST
47605: LIST
47606: LIST
47607: LIST
47608: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47609: LD_ADDR_VAR 0 41
47613: PUSH
47614: LD_INT 0
47616: PUSH
47617: LD_INT 0
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: LD_INT 0
47626: PUSH
47627: LD_INT 1
47629: NEG
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: LD_INT 1
47637: PUSH
47638: LD_INT 0
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: PUSH
47645: LD_INT 1
47647: PUSH
47648: LD_INT 1
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: PUSH
47655: LD_INT 0
47657: PUSH
47658: LD_INT 1
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: PUSH
47665: LD_INT 1
47667: NEG
47668: PUSH
47669: LD_INT 0
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: PUSH
47676: LD_INT 1
47678: NEG
47679: PUSH
47680: LD_INT 1
47682: NEG
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: LD_INT 1
47690: NEG
47691: PUSH
47692: LD_INT 2
47694: NEG
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: LD_INT 1
47702: PUSH
47703: LD_INT 1
47705: NEG
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: PUSH
47711: LD_INT 2
47713: PUSH
47714: LD_INT 0
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: PUSH
47721: LD_INT 2
47723: PUSH
47724: LD_INT 1
47726: PUSH
47727: EMPTY
47728: LIST
47729: LIST
47730: PUSH
47731: LD_INT 2
47733: PUSH
47734: LD_INT 2
47736: PUSH
47737: EMPTY
47738: LIST
47739: LIST
47740: PUSH
47741: LD_INT 1
47743: PUSH
47744: LD_INT 2
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: PUSH
47751: LD_INT 1
47753: NEG
47754: PUSH
47755: LD_INT 1
47757: PUSH
47758: EMPTY
47759: LIST
47760: LIST
47761: PUSH
47762: LD_INT 2
47764: NEG
47765: PUSH
47766: LD_INT 0
47768: PUSH
47769: EMPTY
47770: LIST
47771: LIST
47772: PUSH
47773: LD_INT 2
47775: NEG
47776: PUSH
47777: LD_INT 1
47779: NEG
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 2
47787: NEG
47788: PUSH
47789: LD_INT 2
47791: NEG
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: PUSH
47797: LD_INT 2
47799: NEG
47800: PUSH
47801: LD_INT 3
47803: NEG
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: PUSH
47809: LD_INT 2
47811: PUSH
47812: LD_INT 1
47814: NEG
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 3
47822: PUSH
47823: LD_INT 0
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: PUSH
47830: LD_INT 3
47832: PUSH
47833: LD_INT 1
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 3
47842: PUSH
47843: LD_INT 2
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: PUSH
47850: LD_INT 3
47852: PUSH
47853: LD_INT 3
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: PUSH
47860: LD_INT 2
47862: PUSH
47863: LD_INT 3
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: PUSH
47870: LD_INT 2
47872: NEG
47873: PUSH
47874: LD_INT 1
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PUSH
47881: LD_INT 3
47883: NEG
47884: PUSH
47885: LD_INT 0
47887: PUSH
47888: EMPTY
47889: LIST
47890: LIST
47891: PUSH
47892: LD_INT 3
47894: NEG
47895: PUSH
47896: LD_INT 1
47898: NEG
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: LD_INT 3
47906: NEG
47907: PUSH
47908: LD_INT 2
47910: NEG
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: PUSH
47916: LD_INT 3
47918: NEG
47919: PUSH
47920: LD_INT 3
47922: NEG
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: LIST
47937: LIST
47938: LIST
47939: LIST
47940: LIST
47941: LIST
47942: LIST
47943: LIST
47944: LIST
47945: LIST
47946: LIST
47947: LIST
47948: LIST
47949: LIST
47950: LIST
47951: LIST
47952: LIST
47953: LIST
47954: LIST
47955: LIST
47956: LIST
47957: LIST
47958: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47959: LD_ADDR_VAR 0 42
47963: PUSH
47964: LD_INT 0
47966: PUSH
47967: LD_INT 0
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: LD_INT 0
47976: PUSH
47977: LD_INT 1
47979: NEG
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: LD_INT 1
47987: PUSH
47988: LD_INT 0
47990: PUSH
47991: EMPTY
47992: LIST
47993: LIST
47994: PUSH
47995: LD_INT 1
47997: PUSH
47998: LD_INT 1
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: PUSH
48005: LD_INT 0
48007: PUSH
48008: LD_INT 1
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: PUSH
48015: LD_INT 1
48017: NEG
48018: PUSH
48019: LD_INT 0
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: PUSH
48026: LD_INT 1
48028: NEG
48029: PUSH
48030: LD_INT 1
48032: NEG
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: PUSH
48038: LD_INT 1
48040: NEG
48041: PUSH
48042: LD_INT 2
48044: NEG
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 0
48052: PUSH
48053: LD_INT 2
48055: NEG
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PUSH
48061: LD_INT 1
48063: PUSH
48064: LD_INT 1
48066: NEG
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: PUSH
48072: LD_INT 2
48074: PUSH
48075: LD_INT 1
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: PUSH
48082: LD_INT 2
48084: PUSH
48085: LD_INT 2
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: LD_INT 1
48094: PUSH
48095: LD_INT 2
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: LD_INT 0
48104: PUSH
48105: LD_INT 2
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: PUSH
48112: LD_INT 1
48114: NEG
48115: PUSH
48116: LD_INT 1
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 2
48125: NEG
48126: PUSH
48127: LD_INT 1
48129: NEG
48130: PUSH
48131: EMPTY
48132: LIST
48133: LIST
48134: PUSH
48135: LD_INT 2
48137: NEG
48138: PUSH
48139: LD_INT 2
48141: NEG
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: PUSH
48147: LD_INT 2
48149: NEG
48150: PUSH
48151: LD_INT 3
48153: NEG
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: PUSH
48159: LD_INT 1
48161: NEG
48162: PUSH
48163: LD_INT 3
48165: NEG
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: PUSH
48171: LD_INT 0
48173: PUSH
48174: LD_INT 3
48176: NEG
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PUSH
48182: LD_INT 1
48184: PUSH
48185: LD_INT 2
48187: NEG
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: PUSH
48193: LD_INT 3
48195: PUSH
48196: LD_INT 2
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: PUSH
48203: LD_INT 3
48205: PUSH
48206: LD_INT 3
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: PUSH
48213: LD_INT 2
48215: PUSH
48216: LD_INT 3
48218: PUSH
48219: EMPTY
48220: LIST
48221: LIST
48222: PUSH
48223: LD_INT 1
48225: PUSH
48226: LD_INT 3
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: PUSH
48233: LD_INT 0
48235: PUSH
48236: LD_INT 3
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: PUSH
48243: LD_INT 1
48245: NEG
48246: PUSH
48247: LD_INT 2
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: PUSH
48254: LD_INT 3
48256: NEG
48257: PUSH
48258: LD_INT 2
48260: NEG
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: PUSH
48266: LD_INT 3
48268: NEG
48269: PUSH
48270: LD_INT 3
48272: NEG
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: LIST
48282: LIST
48283: LIST
48284: LIST
48285: LIST
48286: LIST
48287: LIST
48288: LIST
48289: LIST
48290: LIST
48291: LIST
48292: LIST
48293: LIST
48294: LIST
48295: LIST
48296: LIST
48297: LIST
48298: LIST
48299: LIST
48300: LIST
48301: LIST
48302: LIST
48303: LIST
48304: LIST
48305: LIST
48306: LIST
48307: LIST
48308: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48309: LD_ADDR_VAR 0 43
48313: PUSH
48314: LD_INT 0
48316: PUSH
48317: LD_INT 0
48319: PUSH
48320: EMPTY
48321: LIST
48322: LIST
48323: PUSH
48324: LD_INT 0
48326: PUSH
48327: LD_INT 1
48329: NEG
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: PUSH
48335: LD_INT 1
48337: PUSH
48338: LD_INT 0
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: PUSH
48345: LD_INT 1
48347: PUSH
48348: LD_INT 1
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: PUSH
48355: LD_INT 0
48357: PUSH
48358: LD_INT 1
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: PUSH
48365: LD_INT 1
48367: NEG
48368: PUSH
48369: LD_INT 0
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: PUSH
48376: LD_INT 1
48378: NEG
48379: PUSH
48380: LD_INT 1
48382: NEG
48383: PUSH
48384: EMPTY
48385: LIST
48386: LIST
48387: PUSH
48388: LD_INT 1
48390: NEG
48391: PUSH
48392: LD_INT 2
48394: NEG
48395: PUSH
48396: EMPTY
48397: LIST
48398: LIST
48399: PUSH
48400: LD_INT 0
48402: PUSH
48403: LD_INT 2
48405: NEG
48406: PUSH
48407: EMPTY
48408: LIST
48409: LIST
48410: PUSH
48411: LD_INT 1
48413: PUSH
48414: LD_INT 1
48416: NEG
48417: PUSH
48418: EMPTY
48419: LIST
48420: LIST
48421: PUSH
48422: LD_INT 2
48424: PUSH
48425: LD_INT 0
48427: PUSH
48428: EMPTY
48429: LIST
48430: LIST
48431: PUSH
48432: LD_INT 2
48434: PUSH
48435: LD_INT 1
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: PUSH
48442: LD_INT 1
48444: PUSH
48445: LD_INT 2
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: PUSH
48452: LD_INT 0
48454: PUSH
48455: LD_INT 2
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: PUSH
48462: LD_INT 1
48464: NEG
48465: PUSH
48466: LD_INT 1
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: PUSH
48473: LD_INT 2
48475: NEG
48476: PUSH
48477: LD_INT 0
48479: PUSH
48480: EMPTY
48481: LIST
48482: LIST
48483: PUSH
48484: LD_INT 2
48486: NEG
48487: PUSH
48488: LD_INT 1
48490: NEG
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: LD_INT 1
48498: NEG
48499: PUSH
48500: LD_INT 3
48502: NEG
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: LD_INT 0
48510: PUSH
48511: LD_INT 3
48513: NEG
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 1
48521: PUSH
48522: LD_INT 2
48524: NEG
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: LD_INT 2
48532: PUSH
48533: LD_INT 1
48535: NEG
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: LD_INT 3
48543: PUSH
48544: LD_INT 0
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: PUSH
48551: LD_INT 3
48553: PUSH
48554: LD_INT 1
48556: PUSH
48557: EMPTY
48558: LIST
48559: LIST
48560: PUSH
48561: LD_INT 1
48563: PUSH
48564: LD_INT 3
48566: PUSH
48567: EMPTY
48568: LIST
48569: LIST
48570: PUSH
48571: LD_INT 0
48573: PUSH
48574: LD_INT 3
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: PUSH
48581: LD_INT 1
48583: NEG
48584: PUSH
48585: LD_INT 2
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: PUSH
48592: LD_INT 2
48594: NEG
48595: PUSH
48596: LD_INT 1
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 3
48605: NEG
48606: PUSH
48607: LD_INT 0
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: PUSH
48614: LD_INT 3
48616: NEG
48617: PUSH
48618: LD_INT 1
48620: NEG
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: LIST
48630: LIST
48631: LIST
48632: LIST
48633: LIST
48634: LIST
48635: LIST
48636: LIST
48637: LIST
48638: LIST
48639: LIST
48640: LIST
48641: LIST
48642: LIST
48643: LIST
48644: LIST
48645: LIST
48646: LIST
48647: LIST
48648: LIST
48649: LIST
48650: LIST
48651: LIST
48652: LIST
48653: LIST
48654: LIST
48655: LIST
48656: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48657: LD_ADDR_VAR 0 44
48661: PUSH
48662: LD_INT 0
48664: PUSH
48665: LD_INT 0
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: PUSH
48672: LD_INT 0
48674: PUSH
48675: LD_INT 1
48677: NEG
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: PUSH
48683: LD_INT 1
48685: PUSH
48686: LD_INT 0
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: LD_INT 1
48695: PUSH
48696: LD_INT 1
48698: PUSH
48699: EMPTY
48700: LIST
48701: LIST
48702: PUSH
48703: LD_INT 0
48705: PUSH
48706: LD_INT 1
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: PUSH
48713: LD_INT 1
48715: NEG
48716: PUSH
48717: LD_INT 0
48719: PUSH
48720: EMPTY
48721: LIST
48722: LIST
48723: PUSH
48724: LD_INT 1
48726: NEG
48727: PUSH
48728: LD_INT 1
48730: NEG
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: PUSH
48736: LD_INT 1
48738: NEG
48739: PUSH
48740: LD_INT 2
48742: NEG
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: PUSH
48748: LD_INT 1
48750: PUSH
48751: LD_INT 1
48753: NEG
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PUSH
48759: LD_INT 2
48761: PUSH
48762: LD_INT 0
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: LD_INT 2
48771: PUSH
48772: LD_INT 1
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: PUSH
48779: LD_INT 2
48781: PUSH
48782: LD_INT 2
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: PUSH
48789: LD_INT 1
48791: PUSH
48792: LD_INT 2
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: LD_INT 1
48801: NEG
48802: PUSH
48803: LD_INT 1
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: PUSH
48810: LD_INT 2
48812: NEG
48813: PUSH
48814: LD_INT 0
48816: PUSH
48817: EMPTY
48818: LIST
48819: LIST
48820: PUSH
48821: LD_INT 2
48823: NEG
48824: PUSH
48825: LD_INT 1
48827: NEG
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: LD_INT 2
48835: NEG
48836: PUSH
48837: LD_INT 2
48839: NEG
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: PUSH
48845: LD_INT 2
48847: NEG
48848: PUSH
48849: LD_INT 3
48851: NEG
48852: PUSH
48853: EMPTY
48854: LIST
48855: LIST
48856: PUSH
48857: LD_INT 2
48859: PUSH
48860: LD_INT 1
48862: NEG
48863: PUSH
48864: EMPTY
48865: LIST
48866: LIST
48867: PUSH
48868: LD_INT 3
48870: PUSH
48871: LD_INT 0
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: PUSH
48878: LD_INT 3
48880: PUSH
48881: LD_INT 1
48883: PUSH
48884: EMPTY
48885: LIST
48886: LIST
48887: PUSH
48888: LD_INT 3
48890: PUSH
48891: LD_INT 2
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: PUSH
48898: LD_INT 3
48900: PUSH
48901: LD_INT 3
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: LD_INT 2
48910: PUSH
48911: LD_INT 3
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: PUSH
48918: LD_INT 2
48920: NEG
48921: PUSH
48922: LD_INT 1
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PUSH
48929: LD_INT 3
48931: NEG
48932: PUSH
48933: LD_INT 0
48935: PUSH
48936: EMPTY
48937: LIST
48938: LIST
48939: PUSH
48940: LD_INT 3
48942: NEG
48943: PUSH
48944: LD_INT 1
48946: NEG
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: LD_INT 3
48954: NEG
48955: PUSH
48956: LD_INT 2
48958: NEG
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: PUSH
48964: LD_INT 3
48966: NEG
48967: PUSH
48968: LD_INT 3
48970: NEG
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: LIST
48980: LIST
48981: LIST
48982: LIST
48983: LIST
48984: LIST
48985: LIST
48986: LIST
48987: LIST
48988: LIST
48989: LIST
48990: LIST
48991: LIST
48992: LIST
48993: LIST
48994: LIST
48995: LIST
48996: LIST
48997: LIST
48998: LIST
48999: LIST
49000: LIST
49001: LIST
49002: LIST
49003: LIST
49004: LIST
49005: LIST
49006: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49007: LD_ADDR_VAR 0 45
49011: PUSH
49012: LD_INT 0
49014: PUSH
49015: LD_INT 0
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: PUSH
49022: LD_INT 0
49024: PUSH
49025: LD_INT 1
49027: NEG
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: PUSH
49033: LD_INT 1
49035: PUSH
49036: LD_INT 0
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: LD_INT 1
49045: PUSH
49046: LD_INT 1
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: LD_INT 0
49055: PUSH
49056: LD_INT 1
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: LD_INT 1
49065: NEG
49066: PUSH
49067: LD_INT 0
49069: PUSH
49070: EMPTY
49071: LIST
49072: LIST
49073: PUSH
49074: LD_INT 1
49076: NEG
49077: PUSH
49078: LD_INT 1
49080: NEG
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: PUSH
49086: LD_INT 1
49088: NEG
49089: PUSH
49090: LD_INT 2
49092: NEG
49093: PUSH
49094: EMPTY
49095: LIST
49096: LIST
49097: PUSH
49098: LD_INT 0
49100: PUSH
49101: LD_INT 2
49103: NEG
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: PUSH
49109: LD_INT 1
49111: PUSH
49112: LD_INT 1
49114: NEG
49115: PUSH
49116: EMPTY
49117: LIST
49118: LIST
49119: PUSH
49120: LD_INT 2
49122: PUSH
49123: LD_INT 1
49125: PUSH
49126: EMPTY
49127: LIST
49128: LIST
49129: PUSH
49130: LD_INT 2
49132: PUSH
49133: LD_INT 2
49135: PUSH
49136: EMPTY
49137: LIST
49138: LIST
49139: PUSH
49140: LD_INT 1
49142: PUSH
49143: LD_INT 2
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: PUSH
49150: LD_INT 0
49152: PUSH
49153: LD_INT 2
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: PUSH
49160: LD_INT 1
49162: NEG
49163: PUSH
49164: LD_INT 1
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: PUSH
49171: LD_INT 2
49173: NEG
49174: PUSH
49175: LD_INT 1
49177: NEG
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: PUSH
49183: LD_INT 2
49185: NEG
49186: PUSH
49187: LD_INT 2
49189: NEG
49190: PUSH
49191: EMPTY
49192: LIST
49193: LIST
49194: PUSH
49195: LD_INT 2
49197: NEG
49198: PUSH
49199: LD_INT 3
49201: NEG
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: PUSH
49207: LD_INT 1
49209: NEG
49210: PUSH
49211: LD_INT 3
49213: NEG
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: PUSH
49219: LD_INT 0
49221: PUSH
49222: LD_INT 3
49224: NEG
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: PUSH
49230: LD_INT 1
49232: PUSH
49233: LD_INT 2
49235: NEG
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 3
49243: PUSH
49244: LD_INT 2
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: PUSH
49251: LD_INT 3
49253: PUSH
49254: LD_INT 3
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: LD_INT 2
49263: PUSH
49264: LD_INT 3
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: PUSH
49271: LD_INT 1
49273: PUSH
49274: LD_INT 3
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: LD_INT 0
49283: PUSH
49284: LD_INT 3
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: PUSH
49291: LD_INT 1
49293: NEG
49294: PUSH
49295: LD_INT 2
49297: PUSH
49298: EMPTY
49299: LIST
49300: LIST
49301: PUSH
49302: LD_INT 3
49304: NEG
49305: PUSH
49306: LD_INT 2
49308: NEG
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: PUSH
49314: LD_INT 3
49316: NEG
49317: PUSH
49318: LD_INT 3
49320: NEG
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: LIST
49330: LIST
49331: LIST
49332: LIST
49333: LIST
49334: LIST
49335: LIST
49336: LIST
49337: LIST
49338: LIST
49339: LIST
49340: LIST
49341: LIST
49342: LIST
49343: LIST
49344: LIST
49345: LIST
49346: LIST
49347: LIST
49348: LIST
49349: LIST
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: LIST
49356: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49357: LD_ADDR_VAR 0 46
49361: PUSH
49362: LD_INT 0
49364: PUSH
49365: LD_INT 0
49367: PUSH
49368: EMPTY
49369: LIST
49370: LIST
49371: PUSH
49372: LD_INT 0
49374: PUSH
49375: LD_INT 1
49377: NEG
49378: PUSH
49379: EMPTY
49380: LIST
49381: LIST
49382: PUSH
49383: LD_INT 1
49385: PUSH
49386: LD_INT 0
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: PUSH
49393: LD_INT 1
49395: PUSH
49396: LD_INT 1
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: PUSH
49403: LD_INT 0
49405: PUSH
49406: LD_INT 1
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: PUSH
49413: LD_INT 1
49415: NEG
49416: PUSH
49417: LD_INT 0
49419: PUSH
49420: EMPTY
49421: LIST
49422: LIST
49423: PUSH
49424: LD_INT 1
49426: NEG
49427: PUSH
49428: LD_INT 1
49430: NEG
49431: PUSH
49432: EMPTY
49433: LIST
49434: LIST
49435: PUSH
49436: LD_INT 1
49438: NEG
49439: PUSH
49440: LD_INT 2
49442: NEG
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 0
49450: PUSH
49451: LD_INT 2
49453: NEG
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: PUSH
49459: LD_INT 1
49461: PUSH
49462: LD_INT 1
49464: NEG
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: PUSH
49470: LD_INT 2
49472: PUSH
49473: LD_INT 0
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: LD_INT 2
49482: PUSH
49483: LD_INT 1
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: PUSH
49490: LD_INT 1
49492: PUSH
49493: LD_INT 2
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: PUSH
49500: LD_INT 0
49502: PUSH
49503: LD_INT 2
49505: PUSH
49506: EMPTY
49507: LIST
49508: LIST
49509: PUSH
49510: LD_INT 1
49512: NEG
49513: PUSH
49514: LD_INT 1
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: LD_INT 2
49523: NEG
49524: PUSH
49525: LD_INT 0
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: PUSH
49532: LD_INT 2
49534: NEG
49535: PUSH
49536: LD_INT 1
49538: NEG
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 1
49546: NEG
49547: PUSH
49548: LD_INT 3
49550: NEG
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: PUSH
49556: LD_INT 0
49558: PUSH
49559: LD_INT 3
49561: NEG
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: LD_INT 1
49569: PUSH
49570: LD_INT 2
49572: NEG
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: PUSH
49578: LD_INT 2
49580: PUSH
49581: LD_INT 1
49583: NEG
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PUSH
49589: LD_INT 3
49591: PUSH
49592: LD_INT 0
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: PUSH
49599: LD_INT 3
49601: PUSH
49602: LD_INT 1
49604: PUSH
49605: EMPTY
49606: LIST
49607: LIST
49608: PUSH
49609: LD_INT 1
49611: PUSH
49612: LD_INT 3
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: PUSH
49619: LD_INT 0
49621: PUSH
49622: LD_INT 3
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 1
49631: NEG
49632: PUSH
49633: LD_INT 2
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: LD_INT 2
49642: NEG
49643: PUSH
49644: LD_INT 1
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 3
49653: NEG
49654: PUSH
49655: LD_INT 0
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PUSH
49662: LD_INT 3
49664: NEG
49665: PUSH
49666: LD_INT 1
49668: NEG
49669: PUSH
49670: EMPTY
49671: LIST
49672: LIST
49673: PUSH
49674: EMPTY
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: LIST
49682: LIST
49683: LIST
49684: LIST
49685: LIST
49686: LIST
49687: LIST
49688: LIST
49689: LIST
49690: LIST
49691: LIST
49692: LIST
49693: LIST
49694: LIST
49695: LIST
49696: LIST
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: LIST
49703: LIST
49704: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49705: LD_ADDR_VAR 0 47
49709: PUSH
49710: LD_INT 0
49712: PUSH
49713: LD_INT 0
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: PUSH
49720: LD_INT 0
49722: PUSH
49723: LD_INT 1
49725: NEG
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: LD_INT 1
49733: PUSH
49734: LD_INT 0
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PUSH
49741: LD_INT 1
49743: PUSH
49744: LD_INT 1
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 0
49753: PUSH
49754: LD_INT 1
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: PUSH
49761: LD_INT 1
49763: NEG
49764: PUSH
49765: LD_INT 0
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: PUSH
49772: LD_INT 1
49774: NEG
49775: PUSH
49776: LD_INT 1
49778: NEG
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: LD_INT 1
49786: NEG
49787: PUSH
49788: LD_INT 2
49790: NEG
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: LD_INT 0
49798: PUSH
49799: LD_INT 2
49801: NEG
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: LD_INT 1
49809: PUSH
49810: LD_INT 1
49812: NEG
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 2
49820: NEG
49821: PUSH
49822: LD_INT 1
49824: NEG
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: PUSH
49830: LD_INT 2
49832: NEG
49833: PUSH
49834: LD_INT 2
49836: NEG
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: LIST
49846: LIST
49847: LIST
49848: LIST
49849: LIST
49850: LIST
49851: LIST
49852: LIST
49853: LIST
49854: LIST
49855: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49856: LD_ADDR_VAR 0 48
49860: PUSH
49861: LD_INT 0
49863: PUSH
49864: LD_INT 0
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: PUSH
49871: LD_INT 0
49873: PUSH
49874: LD_INT 1
49876: NEG
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: PUSH
49882: LD_INT 1
49884: PUSH
49885: LD_INT 0
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: LD_INT 1
49894: PUSH
49895: LD_INT 1
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: PUSH
49902: LD_INT 0
49904: PUSH
49905: LD_INT 1
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: PUSH
49912: LD_INT 1
49914: NEG
49915: PUSH
49916: LD_INT 0
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: PUSH
49923: LD_INT 1
49925: NEG
49926: PUSH
49927: LD_INT 1
49929: NEG
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: PUSH
49935: LD_INT 1
49937: NEG
49938: PUSH
49939: LD_INT 2
49941: NEG
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: LD_INT 0
49949: PUSH
49950: LD_INT 2
49952: NEG
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PUSH
49958: LD_INT 1
49960: PUSH
49961: LD_INT 1
49963: NEG
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 2
49971: PUSH
49972: LD_INT 0
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 2
49981: PUSH
49982: LD_INT 1
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: EMPTY
49990: LIST
49991: LIST
49992: LIST
49993: LIST
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50003: LD_ADDR_VAR 0 49
50007: PUSH
50008: LD_INT 0
50010: PUSH
50011: LD_INT 0
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: PUSH
50018: LD_INT 0
50020: PUSH
50021: LD_INT 1
50023: NEG
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: LD_INT 1
50031: PUSH
50032: LD_INT 0
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: PUSH
50039: LD_INT 1
50041: PUSH
50042: LD_INT 1
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: PUSH
50049: LD_INT 0
50051: PUSH
50052: LD_INT 1
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: PUSH
50059: LD_INT 1
50061: NEG
50062: PUSH
50063: LD_INT 0
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 1
50072: NEG
50073: PUSH
50074: LD_INT 1
50076: NEG
50077: PUSH
50078: EMPTY
50079: LIST
50080: LIST
50081: PUSH
50082: LD_INT 1
50084: PUSH
50085: LD_INT 1
50087: NEG
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: PUSH
50093: LD_INT 2
50095: PUSH
50096: LD_INT 0
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: PUSH
50103: LD_INT 2
50105: PUSH
50106: LD_INT 1
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: PUSH
50113: LD_INT 2
50115: PUSH
50116: LD_INT 2
50118: PUSH
50119: EMPTY
50120: LIST
50121: LIST
50122: PUSH
50123: LD_INT 1
50125: PUSH
50126: LD_INT 2
50128: PUSH
50129: EMPTY
50130: LIST
50131: LIST
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: LIST
50137: LIST
50138: LIST
50139: LIST
50140: LIST
50141: LIST
50142: LIST
50143: LIST
50144: LIST
50145: LIST
50146: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50147: LD_ADDR_VAR 0 50
50151: PUSH
50152: LD_INT 0
50154: PUSH
50155: LD_INT 0
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: PUSH
50162: LD_INT 0
50164: PUSH
50165: LD_INT 1
50167: NEG
50168: PUSH
50169: EMPTY
50170: LIST
50171: LIST
50172: PUSH
50173: LD_INT 1
50175: PUSH
50176: LD_INT 0
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: LD_INT 1
50185: PUSH
50186: LD_INT 1
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 0
50195: PUSH
50196: LD_INT 1
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: PUSH
50203: LD_INT 1
50205: NEG
50206: PUSH
50207: LD_INT 0
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: PUSH
50214: LD_INT 1
50216: NEG
50217: PUSH
50218: LD_INT 1
50220: NEG
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: PUSH
50226: LD_INT 2
50228: PUSH
50229: LD_INT 1
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: LD_INT 2
50238: PUSH
50239: LD_INT 2
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: PUSH
50246: LD_INT 1
50248: PUSH
50249: LD_INT 2
50251: PUSH
50252: EMPTY
50253: LIST
50254: LIST
50255: PUSH
50256: LD_INT 0
50258: PUSH
50259: LD_INT 2
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: PUSH
50266: LD_INT 1
50268: NEG
50269: PUSH
50270: LD_INT 1
50272: PUSH
50273: EMPTY
50274: LIST
50275: LIST
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: LIST
50281: LIST
50282: LIST
50283: LIST
50284: LIST
50285: LIST
50286: LIST
50287: LIST
50288: LIST
50289: LIST
50290: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50291: LD_ADDR_VAR 0 51
50295: PUSH
50296: LD_INT 0
50298: PUSH
50299: LD_INT 0
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: PUSH
50306: LD_INT 0
50308: PUSH
50309: LD_INT 1
50311: NEG
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: PUSH
50317: LD_INT 1
50319: PUSH
50320: LD_INT 0
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: PUSH
50327: LD_INT 1
50329: PUSH
50330: LD_INT 1
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: PUSH
50337: LD_INT 0
50339: PUSH
50340: LD_INT 1
50342: PUSH
50343: EMPTY
50344: LIST
50345: LIST
50346: PUSH
50347: LD_INT 1
50349: NEG
50350: PUSH
50351: LD_INT 0
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 1
50360: NEG
50361: PUSH
50362: LD_INT 1
50364: NEG
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: PUSH
50370: LD_INT 1
50372: PUSH
50373: LD_INT 2
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 0
50382: PUSH
50383: LD_INT 2
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: PUSH
50390: LD_INT 1
50392: NEG
50393: PUSH
50394: LD_INT 1
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: PUSH
50401: LD_INT 2
50403: NEG
50404: PUSH
50405: LD_INT 0
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: PUSH
50412: LD_INT 2
50414: NEG
50415: PUSH
50416: LD_INT 1
50418: NEG
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: PUSH
50424: EMPTY
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50438: LD_ADDR_VAR 0 52
50442: PUSH
50443: LD_INT 0
50445: PUSH
50446: LD_INT 0
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: LD_INT 0
50455: PUSH
50456: LD_INT 1
50458: NEG
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PUSH
50464: LD_INT 1
50466: PUSH
50467: LD_INT 0
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: PUSH
50474: LD_INT 1
50476: PUSH
50477: LD_INT 1
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 0
50486: PUSH
50487: LD_INT 1
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: LD_INT 1
50496: NEG
50497: PUSH
50498: LD_INT 0
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 1
50507: NEG
50508: PUSH
50509: LD_INT 1
50511: NEG
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: LD_INT 1
50519: NEG
50520: PUSH
50521: LD_INT 2
50523: NEG
50524: PUSH
50525: EMPTY
50526: LIST
50527: LIST
50528: PUSH
50529: LD_INT 1
50531: NEG
50532: PUSH
50533: LD_INT 1
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: PUSH
50540: LD_INT 2
50542: NEG
50543: PUSH
50544: LD_INT 0
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: LD_INT 2
50553: NEG
50554: PUSH
50555: LD_INT 1
50557: NEG
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: PUSH
50563: LD_INT 2
50565: NEG
50566: PUSH
50567: LD_INT 2
50569: NEG
50570: PUSH
50571: EMPTY
50572: LIST
50573: LIST
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: LIST
50579: LIST
50580: LIST
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50589: LD_ADDR_VAR 0 53
50593: PUSH
50594: LD_INT 0
50596: PUSH
50597: LD_INT 0
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: LD_INT 0
50606: PUSH
50607: LD_INT 1
50609: NEG
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PUSH
50615: LD_INT 1
50617: PUSH
50618: LD_INT 0
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PUSH
50625: LD_INT 1
50627: PUSH
50628: LD_INT 1
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: PUSH
50635: LD_INT 0
50637: PUSH
50638: LD_INT 1
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: PUSH
50645: LD_INT 1
50647: NEG
50648: PUSH
50649: LD_INT 0
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: PUSH
50656: LD_INT 1
50658: NEG
50659: PUSH
50660: LD_INT 1
50662: NEG
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: PUSH
50668: LD_INT 1
50670: NEG
50671: PUSH
50672: LD_INT 2
50674: NEG
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: PUSH
50680: LD_INT 0
50682: PUSH
50683: LD_INT 2
50685: NEG
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: LD_INT 1
50693: PUSH
50694: LD_INT 1
50696: NEG
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: PUSH
50702: LD_INT 2
50704: PUSH
50705: LD_INT 0
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: PUSH
50712: LD_INT 2
50714: PUSH
50715: LD_INT 1
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: LD_INT 2
50724: PUSH
50725: LD_INT 2
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: LD_INT 1
50734: PUSH
50735: LD_INT 2
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: PUSH
50742: LD_INT 0
50744: PUSH
50745: LD_INT 2
50747: PUSH
50748: EMPTY
50749: LIST
50750: LIST
50751: PUSH
50752: LD_INT 1
50754: NEG
50755: PUSH
50756: LD_INT 1
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 2
50765: NEG
50766: PUSH
50767: LD_INT 0
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 2
50776: NEG
50777: PUSH
50778: LD_INT 1
50780: NEG
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PUSH
50786: LD_INT 2
50788: NEG
50789: PUSH
50790: LD_INT 2
50792: NEG
50793: PUSH
50794: EMPTY
50795: LIST
50796: LIST
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: LIST
50808: LIST
50809: LIST
50810: LIST
50811: LIST
50812: LIST
50813: LIST
50814: LIST
50815: LIST
50816: LIST
50817: LIST
50818: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50819: LD_ADDR_VAR 0 54
50823: PUSH
50824: LD_INT 0
50826: PUSH
50827: LD_INT 0
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: PUSH
50834: LD_INT 0
50836: PUSH
50837: LD_INT 1
50839: NEG
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: LD_INT 1
50847: PUSH
50848: LD_INT 0
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 1
50857: PUSH
50858: LD_INT 1
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: PUSH
50865: LD_INT 0
50867: PUSH
50868: LD_INT 1
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: PUSH
50875: LD_INT 1
50877: NEG
50878: PUSH
50879: LD_INT 0
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 1
50888: NEG
50889: PUSH
50890: LD_INT 1
50892: NEG
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: PUSH
50898: LD_INT 1
50900: NEG
50901: PUSH
50902: LD_INT 2
50904: NEG
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: PUSH
50910: LD_INT 0
50912: PUSH
50913: LD_INT 2
50915: NEG
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PUSH
50921: LD_INT 1
50923: PUSH
50924: LD_INT 1
50926: NEG
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: PUSH
50932: LD_INT 2
50934: PUSH
50935: LD_INT 0
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: LD_INT 2
50944: PUSH
50945: LD_INT 1
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: LD_INT 2
50954: PUSH
50955: LD_INT 2
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 1
50964: PUSH
50965: LD_INT 2
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: LD_INT 0
50974: PUSH
50975: LD_INT 2
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: PUSH
50982: LD_INT 1
50984: NEG
50985: PUSH
50986: LD_INT 1
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: LD_INT 2
50995: NEG
50996: PUSH
50997: LD_INT 0
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: PUSH
51004: LD_INT 2
51006: NEG
51007: PUSH
51008: LD_INT 1
51010: NEG
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: LD_INT 2
51018: NEG
51019: PUSH
51020: LD_INT 2
51022: NEG
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: LIST
51032: LIST
51033: LIST
51034: LIST
51035: LIST
51036: LIST
51037: LIST
51038: LIST
51039: LIST
51040: LIST
51041: LIST
51042: LIST
51043: LIST
51044: LIST
51045: LIST
51046: LIST
51047: LIST
51048: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51049: LD_ADDR_VAR 0 55
51053: PUSH
51054: LD_INT 0
51056: PUSH
51057: LD_INT 0
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: PUSH
51064: LD_INT 0
51066: PUSH
51067: LD_INT 1
51069: NEG
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: PUSH
51075: LD_INT 1
51077: PUSH
51078: LD_INT 0
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: LD_INT 1
51087: PUSH
51088: LD_INT 1
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: LD_INT 0
51097: PUSH
51098: LD_INT 1
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PUSH
51105: LD_INT 1
51107: NEG
51108: PUSH
51109: LD_INT 0
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: PUSH
51116: LD_INT 1
51118: NEG
51119: PUSH
51120: LD_INT 1
51122: NEG
51123: PUSH
51124: EMPTY
51125: LIST
51126: LIST
51127: PUSH
51128: LD_INT 1
51130: NEG
51131: PUSH
51132: LD_INT 2
51134: NEG
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PUSH
51140: LD_INT 0
51142: PUSH
51143: LD_INT 2
51145: NEG
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: LD_INT 1
51153: PUSH
51154: LD_INT 1
51156: NEG
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: LD_INT 2
51164: PUSH
51165: LD_INT 0
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: LD_INT 2
51174: PUSH
51175: LD_INT 1
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: PUSH
51182: LD_INT 2
51184: PUSH
51185: LD_INT 2
51187: PUSH
51188: EMPTY
51189: LIST
51190: LIST
51191: PUSH
51192: LD_INT 1
51194: PUSH
51195: LD_INT 2
51197: PUSH
51198: EMPTY
51199: LIST
51200: LIST
51201: PUSH
51202: LD_INT 0
51204: PUSH
51205: LD_INT 2
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: PUSH
51212: LD_INT 1
51214: NEG
51215: PUSH
51216: LD_INT 1
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: LD_INT 2
51225: NEG
51226: PUSH
51227: LD_INT 0
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: PUSH
51234: LD_INT 2
51236: NEG
51237: PUSH
51238: LD_INT 1
51240: NEG
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: LD_INT 2
51248: NEG
51249: PUSH
51250: LD_INT 2
51252: NEG
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: LIST
51262: LIST
51263: LIST
51264: LIST
51265: LIST
51266: LIST
51267: LIST
51268: LIST
51269: LIST
51270: LIST
51271: LIST
51272: LIST
51273: LIST
51274: LIST
51275: LIST
51276: LIST
51277: LIST
51278: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51279: LD_ADDR_VAR 0 56
51283: PUSH
51284: LD_INT 0
51286: PUSH
51287: LD_INT 0
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: LD_INT 0
51296: PUSH
51297: LD_INT 1
51299: NEG
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PUSH
51305: LD_INT 1
51307: PUSH
51308: LD_INT 0
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PUSH
51315: LD_INT 1
51317: PUSH
51318: LD_INT 1
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 0
51327: PUSH
51328: LD_INT 1
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 1
51337: NEG
51338: PUSH
51339: LD_INT 0
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: PUSH
51346: LD_INT 1
51348: NEG
51349: PUSH
51350: LD_INT 1
51352: NEG
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: PUSH
51358: LD_INT 1
51360: NEG
51361: PUSH
51362: LD_INT 2
51364: NEG
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: LD_INT 0
51372: PUSH
51373: LD_INT 2
51375: NEG
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: LD_INT 1
51383: PUSH
51384: LD_INT 1
51386: NEG
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: PUSH
51392: LD_INT 2
51394: PUSH
51395: LD_INT 0
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 2
51404: PUSH
51405: LD_INT 1
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 2
51414: PUSH
51415: LD_INT 2
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: LD_INT 1
51424: PUSH
51425: LD_INT 2
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: LD_INT 0
51434: PUSH
51435: LD_INT 2
51437: PUSH
51438: EMPTY
51439: LIST
51440: LIST
51441: PUSH
51442: LD_INT 1
51444: NEG
51445: PUSH
51446: LD_INT 1
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 2
51455: NEG
51456: PUSH
51457: LD_INT 0
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: PUSH
51464: LD_INT 2
51466: NEG
51467: PUSH
51468: LD_INT 1
51470: NEG
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 2
51478: NEG
51479: PUSH
51480: LD_INT 2
51482: NEG
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: PUSH
51488: EMPTY
51489: LIST
51490: LIST
51491: LIST
51492: LIST
51493: LIST
51494: LIST
51495: LIST
51496: LIST
51497: LIST
51498: LIST
51499: LIST
51500: LIST
51501: LIST
51502: LIST
51503: LIST
51504: LIST
51505: LIST
51506: LIST
51507: LIST
51508: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51509: LD_ADDR_VAR 0 57
51513: PUSH
51514: LD_INT 0
51516: PUSH
51517: LD_INT 0
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 0
51526: PUSH
51527: LD_INT 1
51529: NEG
51530: PUSH
51531: EMPTY
51532: LIST
51533: LIST
51534: PUSH
51535: LD_INT 1
51537: PUSH
51538: LD_INT 0
51540: PUSH
51541: EMPTY
51542: LIST
51543: LIST
51544: PUSH
51545: LD_INT 1
51547: PUSH
51548: LD_INT 1
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: LD_INT 0
51557: PUSH
51558: LD_INT 1
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: PUSH
51565: LD_INT 1
51567: NEG
51568: PUSH
51569: LD_INT 0
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: PUSH
51576: LD_INT 1
51578: NEG
51579: PUSH
51580: LD_INT 1
51582: NEG
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PUSH
51588: LD_INT 1
51590: NEG
51591: PUSH
51592: LD_INT 2
51594: NEG
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 0
51602: PUSH
51603: LD_INT 2
51605: NEG
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_INT 1
51613: PUSH
51614: LD_INT 1
51616: NEG
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: LD_INT 2
51624: PUSH
51625: LD_INT 0
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 2
51634: PUSH
51635: LD_INT 1
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: PUSH
51642: LD_INT 2
51644: PUSH
51645: LD_INT 2
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: PUSH
51652: LD_INT 1
51654: PUSH
51655: LD_INT 2
51657: PUSH
51658: EMPTY
51659: LIST
51660: LIST
51661: PUSH
51662: LD_INT 0
51664: PUSH
51665: LD_INT 2
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: PUSH
51672: LD_INT 1
51674: NEG
51675: PUSH
51676: LD_INT 1
51678: PUSH
51679: EMPTY
51680: LIST
51681: LIST
51682: PUSH
51683: LD_INT 2
51685: NEG
51686: PUSH
51687: LD_INT 0
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 2
51696: NEG
51697: PUSH
51698: LD_INT 1
51700: NEG
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: PUSH
51706: LD_INT 2
51708: NEG
51709: PUSH
51710: LD_INT 2
51712: NEG
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: LIST
51722: LIST
51723: LIST
51724: LIST
51725: LIST
51726: LIST
51727: LIST
51728: LIST
51729: LIST
51730: LIST
51731: LIST
51732: LIST
51733: LIST
51734: LIST
51735: LIST
51736: LIST
51737: LIST
51738: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51739: LD_ADDR_VAR 0 58
51743: PUSH
51744: LD_INT 0
51746: PUSH
51747: LD_INT 0
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: PUSH
51754: LD_INT 0
51756: PUSH
51757: LD_INT 1
51759: NEG
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: PUSH
51765: LD_INT 1
51767: PUSH
51768: LD_INT 0
51770: PUSH
51771: EMPTY
51772: LIST
51773: LIST
51774: PUSH
51775: LD_INT 1
51777: PUSH
51778: LD_INT 1
51780: PUSH
51781: EMPTY
51782: LIST
51783: LIST
51784: PUSH
51785: LD_INT 0
51787: PUSH
51788: LD_INT 1
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: PUSH
51795: LD_INT 1
51797: NEG
51798: PUSH
51799: LD_INT 0
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: PUSH
51806: LD_INT 1
51808: NEG
51809: PUSH
51810: LD_INT 1
51812: NEG
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: PUSH
51818: LD_INT 1
51820: NEG
51821: PUSH
51822: LD_INT 2
51824: NEG
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: LD_INT 0
51832: PUSH
51833: LD_INT 2
51835: NEG
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: PUSH
51841: LD_INT 1
51843: PUSH
51844: LD_INT 1
51846: NEG
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: PUSH
51852: LD_INT 2
51854: PUSH
51855: LD_INT 0
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 2
51864: PUSH
51865: LD_INT 1
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: LD_INT 2
51874: PUSH
51875: LD_INT 2
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: LD_INT 1
51884: PUSH
51885: LD_INT 2
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PUSH
51892: LD_INT 0
51894: PUSH
51895: LD_INT 2
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 1
51904: NEG
51905: PUSH
51906: LD_INT 1
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: LD_INT 2
51915: NEG
51916: PUSH
51917: LD_INT 0
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: PUSH
51924: LD_INT 2
51926: NEG
51927: PUSH
51928: LD_INT 1
51930: NEG
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: LD_INT 2
51938: NEG
51939: PUSH
51940: LD_INT 2
51942: NEG
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: LIST
51952: LIST
51953: LIST
51954: LIST
51955: LIST
51956: LIST
51957: LIST
51958: LIST
51959: LIST
51960: LIST
51961: LIST
51962: LIST
51963: LIST
51964: LIST
51965: LIST
51966: LIST
51967: LIST
51968: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51969: LD_ADDR_VAR 0 59
51973: PUSH
51974: LD_INT 0
51976: PUSH
51977: LD_INT 0
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: PUSH
51984: LD_INT 0
51986: PUSH
51987: LD_INT 1
51989: NEG
51990: PUSH
51991: EMPTY
51992: LIST
51993: LIST
51994: PUSH
51995: LD_INT 1
51997: PUSH
51998: LD_INT 0
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: PUSH
52005: LD_INT 1
52007: PUSH
52008: LD_INT 1
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: PUSH
52015: LD_INT 0
52017: PUSH
52018: LD_INT 1
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 1
52027: NEG
52028: PUSH
52029: LD_INT 0
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: PUSH
52036: LD_INT 1
52038: NEG
52039: PUSH
52040: LD_INT 1
52042: NEG
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: LIST
52052: LIST
52053: LIST
52054: LIST
52055: LIST
52056: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52057: LD_ADDR_VAR 0 60
52061: PUSH
52062: LD_INT 0
52064: PUSH
52065: LD_INT 0
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: PUSH
52072: LD_INT 0
52074: PUSH
52075: LD_INT 1
52077: NEG
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: PUSH
52083: LD_INT 1
52085: PUSH
52086: LD_INT 0
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: PUSH
52093: LD_INT 1
52095: PUSH
52096: LD_INT 1
52098: PUSH
52099: EMPTY
52100: LIST
52101: LIST
52102: PUSH
52103: LD_INT 0
52105: PUSH
52106: LD_INT 1
52108: PUSH
52109: EMPTY
52110: LIST
52111: LIST
52112: PUSH
52113: LD_INT 1
52115: NEG
52116: PUSH
52117: LD_INT 0
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: LD_INT 1
52126: NEG
52127: PUSH
52128: LD_INT 1
52130: NEG
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: LIST
52140: LIST
52141: LIST
52142: LIST
52143: LIST
52144: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52145: LD_ADDR_VAR 0 61
52149: PUSH
52150: LD_INT 0
52152: PUSH
52153: LD_INT 0
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: PUSH
52160: LD_INT 0
52162: PUSH
52163: LD_INT 1
52165: NEG
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: PUSH
52171: LD_INT 1
52173: PUSH
52174: LD_INT 0
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: PUSH
52181: LD_INT 1
52183: PUSH
52184: LD_INT 1
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: PUSH
52191: LD_INT 0
52193: PUSH
52194: LD_INT 1
52196: PUSH
52197: EMPTY
52198: LIST
52199: LIST
52200: PUSH
52201: LD_INT 1
52203: NEG
52204: PUSH
52205: LD_INT 0
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: PUSH
52212: LD_INT 1
52214: NEG
52215: PUSH
52216: LD_INT 1
52218: NEG
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: LIST
52228: LIST
52229: LIST
52230: LIST
52231: LIST
52232: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52233: LD_ADDR_VAR 0 62
52237: PUSH
52238: LD_INT 0
52240: PUSH
52241: LD_INT 0
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 0
52250: PUSH
52251: LD_INT 1
52253: NEG
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: LD_INT 1
52261: PUSH
52262: LD_INT 0
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 1
52271: PUSH
52272: LD_INT 1
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 0
52281: PUSH
52282: LD_INT 1
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 1
52291: NEG
52292: PUSH
52293: LD_INT 0
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 1
52302: NEG
52303: PUSH
52304: LD_INT 1
52306: NEG
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: LIST
52316: LIST
52317: LIST
52318: LIST
52319: LIST
52320: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52321: LD_ADDR_VAR 0 63
52325: PUSH
52326: LD_INT 0
52328: PUSH
52329: LD_INT 0
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: PUSH
52336: LD_INT 0
52338: PUSH
52339: LD_INT 1
52341: NEG
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: PUSH
52347: LD_INT 1
52349: PUSH
52350: LD_INT 0
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: PUSH
52357: LD_INT 1
52359: PUSH
52360: LD_INT 1
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: PUSH
52367: LD_INT 0
52369: PUSH
52370: LD_INT 1
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: PUSH
52377: LD_INT 1
52379: NEG
52380: PUSH
52381: LD_INT 0
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: LD_INT 1
52390: NEG
52391: PUSH
52392: LD_INT 1
52394: NEG
52395: PUSH
52396: EMPTY
52397: LIST
52398: LIST
52399: PUSH
52400: EMPTY
52401: LIST
52402: LIST
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: LIST
52408: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52409: LD_ADDR_VAR 0 64
52413: PUSH
52414: LD_INT 0
52416: PUSH
52417: LD_INT 0
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 0
52426: PUSH
52427: LD_INT 1
52429: NEG
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 1
52437: PUSH
52438: LD_INT 0
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: LD_INT 1
52447: PUSH
52448: LD_INT 1
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: LD_INT 0
52457: PUSH
52458: LD_INT 1
52460: PUSH
52461: EMPTY
52462: LIST
52463: LIST
52464: PUSH
52465: LD_INT 1
52467: NEG
52468: PUSH
52469: LD_INT 0
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: LD_INT 1
52478: NEG
52479: PUSH
52480: LD_INT 1
52482: NEG
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: LIST
52492: LIST
52493: LIST
52494: LIST
52495: LIST
52496: ST_TO_ADDR
// end ; 1 :
52497: GO 58394
52499: LD_INT 1
52501: DOUBLE
52502: EQUAL
52503: IFTRUE 52507
52505: GO 55130
52507: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52508: LD_ADDR_VAR 0 11
52512: PUSH
52513: LD_INT 1
52515: NEG
52516: PUSH
52517: LD_INT 3
52519: NEG
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: PUSH
52525: LD_INT 0
52527: PUSH
52528: LD_INT 3
52530: NEG
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 1
52538: PUSH
52539: LD_INT 2
52541: NEG
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: PUSH
52547: EMPTY
52548: LIST
52549: LIST
52550: LIST
52551: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52552: LD_ADDR_VAR 0 12
52556: PUSH
52557: LD_INT 2
52559: PUSH
52560: LD_INT 1
52562: NEG
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: LD_INT 3
52570: PUSH
52571: LD_INT 0
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: PUSH
52578: LD_INT 3
52580: PUSH
52581: LD_INT 1
52583: PUSH
52584: EMPTY
52585: LIST
52586: LIST
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: LIST
52592: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52593: LD_ADDR_VAR 0 13
52597: PUSH
52598: LD_INT 3
52600: PUSH
52601: LD_INT 2
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: PUSH
52608: LD_INT 3
52610: PUSH
52611: LD_INT 3
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: PUSH
52618: LD_INT 2
52620: PUSH
52621: LD_INT 3
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: LIST
52632: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52633: LD_ADDR_VAR 0 14
52637: PUSH
52638: LD_INT 1
52640: PUSH
52641: LD_INT 3
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: PUSH
52648: LD_INT 0
52650: PUSH
52651: LD_INT 3
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 1
52660: NEG
52661: PUSH
52662: LD_INT 2
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: LIST
52673: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52674: LD_ADDR_VAR 0 15
52678: PUSH
52679: LD_INT 2
52681: NEG
52682: PUSH
52683: LD_INT 1
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: PUSH
52690: LD_INT 3
52692: NEG
52693: PUSH
52694: LD_INT 0
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: LD_INT 3
52703: NEG
52704: PUSH
52705: LD_INT 1
52707: NEG
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: LIST
52717: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52718: LD_ADDR_VAR 0 16
52722: PUSH
52723: LD_INT 2
52725: NEG
52726: PUSH
52727: LD_INT 3
52729: NEG
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: PUSH
52735: LD_INT 3
52737: NEG
52738: PUSH
52739: LD_INT 2
52741: NEG
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: PUSH
52747: LD_INT 3
52749: NEG
52750: PUSH
52751: LD_INT 3
52753: NEG
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: LIST
52763: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52764: LD_ADDR_VAR 0 17
52768: PUSH
52769: LD_INT 1
52771: NEG
52772: PUSH
52773: LD_INT 3
52775: NEG
52776: PUSH
52777: EMPTY
52778: LIST
52779: LIST
52780: PUSH
52781: LD_INT 0
52783: PUSH
52784: LD_INT 3
52786: NEG
52787: PUSH
52788: EMPTY
52789: LIST
52790: LIST
52791: PUSH
52792: LD_INT 1
52794: PUSH
52795: LD_INT 2
52797: NEG
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: LIST
52807: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52808: LD_ADDR_VAR 0 18
52812: PUSH
52813: LD_INT 2
52815: PUSH
52816: LD_INT 1
52818: NEG
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: PUSH
52824: LD_INT 3
52826: PUSH
52827: LD_INT 0
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: PUSH
52834: LD_INT 3
52836: PUSH
52837: LD_INT 1
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: LIST
52848: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52849: LD_ADDR_VAR 0 19
52853: PUSH
52854: LD_INT 3
52856: PUSH
52857: LD_INT 2
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: PUSH
52864: LD_INT 3
52866: PUSH
52867: LD_INT 3
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: PUSH
52874: LD_INT 2
52876: PUSH
52877: LD_INT 3
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: LIST
52888: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52889: LD_ADDR_VAR 0 20
52893: PUSH
52894: LD_INT 1
52896: PUSH
52897: LD_INT 3
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: PUSH
52904: LD_INT 0
52906: PUSH
52907: LD_INT 3
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: LD_INT 1
52916: NEG
52917: PUSH
52918: LD_INT 2
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: LIST
52929: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52930: LD_ADDR_VAR 0 21
52934: PUSH
52935: LD_INT 2
52937: NEG
52938: PUSH
52939: LD_INT 1
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: PUSH
52946: LD_INT 3
52948: NEG
52949: PUSH
52950: LD_INT 0
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: LD_INT 3
52959: NEG
52960: PUSH
52961: LD_INT 1
52963: NEG
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: LIST
52973: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52974: LD_ADDR_VAR 0 22
52978: PUSH
52979: LD_INT 2
52981: NEG
52982: PUSH
52983: LD_INT 3
52985: NEG
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PUSH
52991: LD_INT 3
52993: NEG
52994: PUSH
52995: LD_INT 2
52997: NEG
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: LD_INT 3
53005: NEG
53006: PUSH
53007: LD_INT 3
53009: NEG
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: LIST
53019: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
53020: LD_ADDR_VAR 0 23
53024: PUSH
53025: LD_INT 0
53027: PUSH
53028: LD_INT 3
53030: NEG
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: PUSH
53036: LD_INT 1
53038: NEG
53039: PUSH
53040: LD_INT 4
53042: NEG
53043: PUSH
53044: EMPTY
53045: LIST
53046: LIST
53047: PUSH
53048: LD_INT 1
53050: PUSH
53051: LD_INT 3
53053: NEG
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: LIST
53063: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
53064: LD_ADDR_VAR 0 24
53068: PUSH
53069: LD_INT 3
53071: PUSH
53072: LD_INT 0
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 3
53081: PUSH
53082: LD_INT 1
53084: NEG
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: LD_INT 4
53092: PUSH
53093: LD_INT 1
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: PUSH
53100: EMPTY
53101: LIST
53102: LIST
53103: LIST
53104: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
53105: LD_ADDR_VAR 0 25
53109: PUSH
53110: LD_INT 3
53112: PUSH
53113: LD_INT 3
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: PUSH
53120: LD_INT 4
53122: PUSH
53123: LD_INT 3
53125: PUSH
53126: EMPTY
53127: LIST
53128: LIST
53129: PUSH
53130: LD_INT 3
53132: PUSH
53133: LD_INT 4
53135: PUSH
53136: EMPTY
53137: LIST
53138: LIST
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: LIST
53144: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
53145: LD_ADDR_VAR 0 26
53149: PUSH
53150: LD_INT 0
53152: PUSH
53153: LD_INT 3
53155: PUSH
53156: EMPTY
53157: LIST
53158: LIST
53159: PUSH
53160: LD_INT 1
53162: PUSH
53163: LD_INT 4
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: PUSH
53170: LD_INT 1
53172: NEG
53173: PUSH
53174: LD_INT 3
53176: PUSH
53177: EMPTY
53178: LIST
53179: LIST
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: LIST
53185: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
53186: LD_ADDR_VAR 0 27
53190: PUSH
53191: LD_INT 3
53193: NEG
53194: PUSH
53195: LD_INT 0
53197: PUSH
53198: EMPTY
53199: LIST
53200: LIST
53201: PUSH
53202: LD_INT 3
53204: NEG
53205: PUSH
53206: LD_INT 1
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: PUSH
53213: LD_INT 4
53215: NEG
53216: PUSH
53217: LD_INT 1
53219: NEG
53220: PUSH
53221: EMPTY
53222: LIST
53223: LIST
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: LIST
53229: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
53230: LD_ADDR_VAR 0 28
53234: PUSH
53235: LD_INT 3
53237: NEG
53238: PUSH
53239: LD_INT 3
53241: NEG
53242: PUSH
53243: EMPTY
53244: LIST
53245: LIST
53246: PUSH
53247: LD_INT 3
53249: NEG
53250: PUSH
53251: LD_INT 4
53253: NEG
53254: PUSH
53255: EMPTY
53256: LIST
53257: LIST
53258: PUSH
53259: LD_INT 4
53261: NEG
53262: PUSH
53263: LD_INT 3
53265: NEG
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: LIST
53275: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
53276: LD_ADDR_VAR 0 29
53280: PUSH
53281: LD_INT 1
53283: NEG
53284: PUSH
53285: LD_INT 3
53287: NEG
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: PUSH
53293: LD_INT 0
53295: PUSH
53296: LD_INT 3
53298: NEG
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: PUSH
53304: LD_INT 1
53306: PUSH
53307: LD_INT 2
53309: NEG
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: PUSH
53315: LD_INT 1
53317: NEG
53318: PUSH
53319: LD_INT 4
53321: NEG
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: LD_INT 0
53329: PUSH
53330: LD_INT 4
53332: NEG
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: LD_INT 1
53340: PUSH
53341: LD_INT 3
53343: NEG
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: LD_INT 1
53351: NEG
53352: PUSH
53353: LD_INT 5
53355: NEG
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: LD_INT 0
53363: PUSH
53364: LD_INT 5
53366: NEG
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PUSH
53372: LD_INT 1
53374: PUSH
53375: LD_INT 4
53377: NEG
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 1
53385: NEG
53386: PUSH
53387: LD_INT 6
53389: NEG
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: PUSH
53395: LD_INT 0
53397: PUSH
53398: LD_INT 6
53400: NEG
53401: PUSH
53402: EMPTY
53403: LIST
53404: LIST
53405: PUSH
53406: LD_INT 1
53408: PUSH
53409: LD_INT 5
53411: NEG
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: LIST
53421: LIST
53422: LIST
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: LIST
53429: LIST
53430: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
53431: LD_ADDR_VAR 0 30
53435: PUSH
53436: LD_INT 2
53438: PUSH
53439: LD_INT 1
53441: NEG
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: PUSH
53447: LD_INT 3
53449: PUSH
53450: LD_INT 0
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: PUSH
53457: LD_INT 3
53459: PUSH
53460: LD_INT 1
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: PUSH
53467: LD_INT 3
53469: PUSH
53470: LD_INT 1
53472: NEG
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: PUSH
53478: LD_INT 4
53480: PUSH
53481: LD_INT 0
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: PUSH
53488: LD_INT 4
53490: PUSH
53491: LD_INT 1
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: LD_INT 4
53500: PUSH
53501: LD_INT 1
53503: NEG
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: LD_INT 5
53511: PUSH
53512: LD_INT 0
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: PUSH
53519: LD_INT 5
53521: PUSH
53522: LD_INT 1
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: PUSH
53529: LD_INT 5
53531: PUSH
53532: LD_INT 1
53534: NEG
53535: PUSH
53536: EMPTY
53537: LIST
53538: LIST
53539: PUSH
53540: LD_INT 6
53542: PUSH
53543: LD_INT 0
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: PUSH
53550: LD_INT 6
53552: PUSH
53553: LD_INT 1
53555: PUSH
53556: EMPTY
53557: LIST
53558: LIST
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: LIST
53564: LIST
53565: LIST
53566: LIST
53567: LIST
53568: LIST
53569: LIST
53570: LIST
53571: LIST
53572: LIST
53573: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
53574: LD_ADDR_VAR 0 31
53578: PUSH
53579: LD_INT 3
53581: PUSH
53582: LD_INT 2
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 3
53591: PUSH
53592: LD_INT 3
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: PUSH
53599: LD_INT 2
53601: PUSH
53602: LD_INT 3
53604: PUSH
53605: EMPTY
53606: LIST
53607: LIST
53608: PUSH
53609: LD_INT 4
53611: PUSH
53612: LD_INT 3
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: PUSH
53619: LD_INT 4
53621: PUSH
53622: LD_INT 4
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: LD_INT 3
53631: PUSH
53632: LD_INT 4
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: PUSH
53639: LD_INT 5
53641: PUSH
53642: LD_INT 4
53644: PUSH
53645: EMPTY
53646: LIST
53647: LIST
53648: PUSH
53649: LD_INT 5
53651: PUSH
53652: LD_INT 5
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: LD_INT 4
53661: PUSH
53662: LD_INT 5
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: PUSH
53669: LD_INT 6
53671: PUSH
53672: LD_INT 5
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: PUSH
53679: LD_INT 6
53681: PUSH
53682: LD_INT 6
53684: PUSH
53685: EMPTY
53686: LIST
53687: LIST
53688: PUSH
53689: LD_INT 5
53691: PUSH
53692: LD_INT 6
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: LIST
53703: LIST
53704: LIST
53705: LIST
53706: LIST
53707: LIST
53708: LIST
53709: LIST
53710: LIST
53711: LIST
53712: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
53713: LD_ADDR_VAR 0 32
53717: PUSH
53718: LD_INT 1
53720: PUSH
53721: LD_INT 3
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 0
53730: PUSH
53731: LD_INT 3
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: LD_INT 1
53740: NEG
53741: PUSH
53742: LD_INT 2
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 1
53751: PUSH
53752: LD_INT 4
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: LD_INT 0
53761: PUSH
53762: LD_INT 4
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PUSH
53769: LD_INT 1
53771: NEG
53772: PUSH
53773: LD_INT 3
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: LD_INT 1
53782: PUSH
53783: LD_INT 5
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: PUSH
53790: LD_INT 0
53792: PUSH
53793: LD_INT 5
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: PUSH
53800: LD_INT 1
53802: NEG
53803: PUSH
53804: LD_INT 4
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: PUSH
53811: LD_INT 1
53813: PUSH
53814: LD_INT 6
53816: PUSH
53817: EMPTY
53818: LIST
53819: LIST
53820: PUSH
53821: LD_INT 0
53823: PUSH
53824: LD_INT 6
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: PUSH
53831: LD_INT 1
53833: NEG
53834: PUSH
53835: LD_INT 5
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: LIST
53846: LIST
53847: LIST
53848: LIST
53849: LIST
53850: LIST
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
53856: LD_ADDR_VAR 0 33
53860: PUSH
53861: LD_INT 2
53863: NEG
53864: PUSH
53865: LD_INT 1
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: PUSH
53872: LD_INT 3
53874: NEG
53875: PUSH
53876: LD_INT 0
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: PUSH
53883: LD_INT 3
53885: NEG
53886: PUSH
53887: LD_INT 1
53889: NEG
53890: PUSH
53891: EMPTY
53892: LIST
53893: LIST
53894: PUSH
53895: LD_INT 3
53897: NEG
53898: PUSH
53899: LD_INT 1
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: LD_INT 4
53908: NEG
53909: PUSH
53910: LD_INT 0
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 4
53919: NEG
53920: PUSH
53921: LD_INT 1
53923: NEG
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: PUSH
53929: LD_INT 4
53931: NEG
53932: PUSH
53933: LD_INT 1
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: LD_INT 5
53942: NEG
53943: PUSH
53944: LD_INT 0
53946: PUSH
53947: EMPTY
53948: LIST
53949: LIST
53950: PUSH
53951: LD_INT 5
53953: NEG
53954: PUSH
53955: LD_INT 1
53957: NEG
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PUSH
53963: LD_INT 5
53965: NEG
53966: PUSH
53967: LD_INT 1
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: PUSH
53974: LD_INT 6
53976: NEG
53977: PUSH
53978: LD_INT 0
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 6
53987: NEG
53988: PUSH
53989: LD_INT 1
53991: NEG
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: LIST
54001: LIST
54002: LIST
54003: LIST
54004: LIST
54005: LIST
54006: LIST
54007: LIST
54008: LIST
54009: LIST
54010: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
54011: LD_ADDR_VAR 0 34
54015: PUSH
54016: LD_INT 2
54018: NEG
54019: PUSH
54020: LD_INT 3
54022: NEG
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: LD_INT 3
54030: NEG
54031: PUSH
54032: LD_INT 2
54034: NEG
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: LD_INT 3
54042: NEG
54043: PUSH
54044: LD_INT 3
54046: NEG
54047: PUSH
54048: EMPTY
54049: LIST
54050: LIST
54051: PUSH
54052: LD_INT 3
54054: NEG
54055: PUSH
54056: LD_INT 4
54058: NEG
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 4
54066: NEG
54067: PUSH
54068: LD_INT 3
54070: NEG
54071: PUSH
54072: EMPTY
54073: LIST
54074: LIST
54075: PUSH
54076: LD_INT 4
54078: NEG
54079: PUSH
54080: LD_INT 4
54082: NEG
54083: PUSH
54084: EMPTY
54085: LIST
54086: LIST
54087: PUSH
54088: LD_INT 4
54090: NEG
54091: PUSH
54092: LD_INT 5
54094: NEG
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: LD_INT 5
54102: NEG
54103: PUSH
54104: LD_INT 4
54106: NEG
54107: PUSH
54108: EMPTY
54109: LIST
54110: LIST
54111: PUSH
54112: LD_INT 5
54114: NEG
54115: PUSH
54116: LD_INT 5
54118: NEG
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: PUSH
54124: LD_INT 5
54126: NEG
54127: PUSH
54128: LD_INT 6
54130: NEG
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: LD_INT 6
54138: NEG
54139: PUSH
54140: LD_INT 5
54142: NEG
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: PUSH
54148: LD_INT 6
54150: NEG
54151: PUSH
54152: LD_INT 6
54154: NEG
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: LIST
54164: LIST
54165: LIST
54166: LIST
54167: LIST
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: LIST
54173: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
54174: LD_ADDR_VAR 0 41
54178: PUSH
54179: LD_INT 0
54181: PUSH
54182: LD_INT 2
54184: NEG
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: LD_INT 1
54192: NEG
54193: PUSH
54194: LD_INT 3
54196: NEG
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: LD_INT 1
54204: PUSH
54205: LD_INT 2
54207: NEG
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: LIST
54217: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
54218: LD_ADDR_VAR 0 42
54222: PUSH
54223: LD_INT 2
54225: PUSH
54226: LD_INT 0
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: LD_INT 2
54235: PUSH
54236: LD_INT 1
54238: NEG
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: LD_INT 3
54246: PUSH
54247: LD_INT 1
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: LIST
54258: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
54259: LD_ADDR_VAR 0 43
54263: PUSH
54264: LD_INT 2
54266: PUSH
54267: LD_INT 2
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: LD_INT 3
54276: PUSH
54277: LD_INT 2
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: LD_INT 2
54286: PUSH
54287: LD_INT 3
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: LIST
54298: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
54299: LD_ADDR_VAR 0 44
54303: PUSH
54304: LD_INT 0
54306: PUSH
54307: LD_INT 2
54309: PUSH
54310: EMPTY
54311: LIST
54312: LIST
54313: PUSH
54314: LD_INT 1
54316: PUSH
54317: LD_INT 3
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: PUSH
54324: LD_INT 1
54326: NEG
54327: PUSH
54328: LD_INT 2
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: LIST
54339: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54340: LD_ADDR_VAR 0 45
54344: PUSH
54345: LD_INT 2
54347: NEG
54348: PUSH
54349: LD_INT 0
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 2
54358: NEG
54359: PUSH
54360: LD_INT 1
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: PUSH
54367: LD_INT 3
54369: NEG
54370: PUSH
54371: LD_INT 1
54373: NEG
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: PUSH
54379: EMPTY
54380: LIST
54381: LIST
54382: LIST
54383: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
54384: LD_ADDR_VAR 0 46
54388: PUSH
54389: LD_INT 2
54391: NEG
54392: PUSH
54393: LD_INT 2
54395: NEG
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: LD_INT 2
54403: NEG
54404: PUSH
54405: LD_INT 3
54407: NEG
54408: PUSH
54409: EMPTY
54410: LIST
54411: LIST
54412: PUSH
54413: LD_INT 3
54415: NEG
54416: PUSH
54417: LD_INT 2
54419: NEG
54420: PUSH
54421: EMPTY
54422: LIST
54423: LIST
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: LIST
54429: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
54430: LD_ADDR_VAR 0 47
54434: PUSH
54435: LD_INT 2
54437: NEG
54438: PUSH
54439: LD_INT 3
54441: NEG
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: LD_INT 1
54449: NEG
54450: PUSH
54451: LD_INT 3
54453: NEG
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54463: LD_ADDR_VAR 0 48
54467: PUSH
54468: LD_INT 1
54470: PUSH
54471: LD_INT 2
54473: NEG
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: LD_INT 2
54481: PUSH
54482: LD_INT 1
54484: NEG
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
54494: LD_ADDR_VAR 0 49
54498: PUSH
54499: LD_INT 3
54501: PUSH
54502: LD_INT 1
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: PUSH
54509: LD_INT 3
54511: PUSH
54512: LD_INT 2
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
54523: LD_ADDR_VAR 0 50
54527: PUSH
54528: LD_INT 2
54530: PUSH
54531: LD_INT 3
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: PUSH
54538: LD_INT 1
54540: PUSH
54541: LD_INT 3
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54552: LD_ADDR_VAR 0 51
54556: PUSH
54557: LD_INT 1
54559: NEG
54560: PUSH
54561: LD_INT 2
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: PUSH
54568: LD_INT 2
54570: NEG
54571: PUSH
54572: LD_INT 1
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54583: LD_ADDR_VAR 0 52
54587: PUSH
54588: LD_INT 3
54590: NEG
54591: PUSH
54592: LD_INT 1
54594: NEG
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: PUSH
54600: LD_INT 3
54602: NEG
54603: PUSH
54604: LD_INT 2
54606: NEG
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54616: LD_ADDR_VAR 0 53
54620: PUSH
54621: LD_INT 1
54623: NEG
54624: PUSH
54625: LD_INT 3
54627: NEG
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PUSH
54633: LD_INT 0
54635: PUSH
54636: LD_INT 3
54638: NEG
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: PUSH
54644: LD_INT 1
54646: PUSH
54647: LD_INT 2
54649: NEG
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: LIST
54659: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54660: LD_ADDR_VAR 0 54
54664: PUSH
54665: LD_INT 2
54667: PUSH
54668: LD_INT 1
54670: NEG
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 3
54678: PUSH
54679: LD_INT 0
54681: PUSH
54682: EMPTY
54683: LIST
54684: LIST
54685: PUSH
54686: LD_INT 3
54688: PUSH
54689: LD_INT 1
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: LIST
54700: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54701: LD_ADDR_VAR 0 55
54705: PUSH
54706: LD_INT 3
54708: PUSH
54709: LD_INT 2
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: LD_INT 3
54718: PUSH
54719: LD_INT 3
54721: PUSH
54722: EMPTY
54723: LIST
54724: LIST
54725: PUSH
54726: LD_INT 2
54728: PUSH
54729: LD_INT 3
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: LIST
54740: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54741: LD_ADDR_VAR 0 56
54745: PUSH
54746: LD_INT 1
54748: PUSH
54749: LD_INT 3
54751: PUSH
54752: EMPTY
54753: LIST
54754: LIST
54755: PUSH
54756: LD_INT 0
54758: PUSH
54759: LD_INT 3
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: LD_INT 1
54768: NEG
54769: PUSH
54770: LD_INT 2
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: LIST
54781: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54782: LD_ADDR_VAR 0 57
54786: PUSH
54787: LD_INT 2
54789: NEG
54790: PUSH
54791: LD_INT 1
54793: PUSH
54794: EMPTY
54795: LIST
54796: LIST
54797: PUSH
54798: LD_INT 3
54800: NEG
54801: PUSH
54802: LD_INT 0
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: LD_INT 3
54811: NEG
54812: PUSH
54813: LD_INT 1
54815: NEG
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: LIST
54825: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54826: LD_ADDR_VAR 0 58
54830: PUSH
54831: LD_INT 2
54833: NEG
54834: PUSH
54835: LD_INT 3
54837: NEG
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: LD_INT 3
54845: NEG
54846: PUSH
54847: LD_INT 2
54849: NEG
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: PUSH
54855: LD_INT 3
54857: NEG
54858: PUSH
54859: LD_INT 3
54861: NEG
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: LIST
54871: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
54872: LD_ADDR_VAR 0 59
54876: PUSH
54877: LD_INT 1
54879: NEG
54880: PUSH
54881: LD_INT 2
54883: NEG
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: LD_INT 0
54891: PUSH
54892: LD_INT 2
54894: NEG
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 1
54902: PUSH
54903: LD_INT 1
54905: NEG
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: LIST
54915: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54916: LD_ADDR_VAR 0 60
54920: PUSH
54921: LD_INT 1
54923: PUSH
54924: LD_INT 1
54926: NEG
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: LD_INT 2
54934: PUSH
54935: LD_INT 0
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 2
54944: PUSH
54945: LD_INT 1
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: EMPTY
54953: LIST
54954: LIST
54955: LIST
54956: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54957: LD_ADDR_VAR 0 61
54961: PUSH
54962: LD_INT 2
54964: PUSH
54965: LD_INT 1
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: PUSH
54972: LD_INT 2
54974: PUSH
54975: LD_INT 2
54977: PUSH
54978: EMPTY
54979: LIST
54980: LIST
54981: PUSH
54982: LD_INT 1
54984: PUSH
54985: LD_INT 2
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: LIST
54996: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54997: LD_ADDR_VAR 0 62
55001: PUSH
55002: LD_INT 1
55004: PUSH
55005: LD_INT 2
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: PUSH
55012: LD_INT 0
55014: PUSH
55015: LD_INT 2
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: PUSH
55022: LD_INT 1
55024: NEG
55025: PUSH
55026: LD_INT 1
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: LIST
55037: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55038: LD_ADDR_VAR 0 63
55042: PUSH
55043: LD_INT 1
55045: NEG
55046: PUSH
55047: LD_INT 1
55049: PUSH
55050: EMPTY
55051: LIST
55052: LIST
55053: PUSH
55054: LD_INT 2
55056: NEG
55057: PUSH
55058: LD_INT 0
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: LD_INT 2
55067: NEG
55068: PUSH
55069: LD_INT 1
55071: NEG
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: LIST
55081: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55082: LD_ADDR_VAR 0 64
55086: PUSH
55087: LD_INT 1
55089: NEG
55090: PUSH
55091: LD_INT 2
55093: NEG
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: PUSH
55099: LD_INT 2
55101: NEG
55102: PUSH
55103: LD_INT 1
55105: NEG
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: PUSH
55111: LD_INT 2
55113: NEG
55114: PUSH
55115: LD_INT 2
55117: NEG
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: LIST
55127: ST_TO_ADDR
// end ; 2 :
55128: GO 58394
55130: LD_INT 2
55132: DOUBLE
55133: EQUAL
55134: IFTRUE 55138
55136: GO 58393
55138: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
55139: LD_ADDR_VAR 0 29
55143: PUSH
55144: LD_INT 4
55146: PUSH
55147: LD_INT 0
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: LD_INT 4
55156: PUSH
55157: LD_INT 1
55159: NEG
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: PUSH
55165: LD_INT 5
55167: PUSH
55168: LD_INT 0
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: LD_INT 5
55177: PUSH
55178: LD_INT 1
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: LD_INT 4
55187: PUSH
55188: LD_INT 1
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: PUSH
55195: LD_INT 3
55197: PUSH
55198: LD_INT 0
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: LD_INT 3
55207: PUSH
55208: LD_INT 1
55210: NEG
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: LD_INT 3
55218: PUSH
55219: LD_INT 2
55221: NEG
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: PUSH
55227: LD_INT 5
55229: PUSH
55230: LD_INT 2
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 3
55239: PUSH
55240: LD_INT 3
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: LD_INT 3
55249: PUSH
55250: LD_INT 2
55252: PUSH
55253: EMPTY
55254: LIST
55255: LIST
55256: PUSH
55257: LD_INT 4
55259: PUSH
55260: LD_INT 3
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: PUSH
55267: LD_INT 4
55269: PUSH
55270: LD_INT 4
55272: PUSH
55273: EMPTY
55274: LIST
55275: LIST
55276: PUSH
55277: LD_INT 3
55279: PUSH
55280: LD_INT 4
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: LD_INT 2
55289: PUSH
55290: LD_INT 3
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 2
55299: PUSH
55300: LD_INT 2
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: LD_INT 4
55309: PUSH
55310: LD_INT 2
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: LD_INT 2
55319: PUSH
55320: LD_INT 4
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: LD_INT 0
55329: PUSH
55330: LD_INT 4
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: PUSH
55337: LD_INT 0
55339: PUSH
55340: LD_INT 3
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: PUSH
55347: LD_INT 1
55349: PUSH
55350: LD_INT 4
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: LD_INT 1
55359: PUSH
55360: LD_INT 5
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: PUSH
55367: LD_INT 0
55369: PUSH
55370: LD_INT 5
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: LD_INT 1
55379: NEG
55380: PUSH
55381: LD_INT 4
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: LD_INT 1
55390: NEG
55391: PUSH
55392: LD_INT 3
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 2
55401: PUSH
55402: LD_INT 5
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 2
55411: NEG
55412: PUSH
55413: LD_INT 3
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: PUSH
55420: LD_INT 3
55422: NEG
55423: PUSH
55424: LD_INT 0
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: PUSH
55431: LD_INT 3
55433: NEG
55434: PUSH
55435: LD_INT 1
55437: NEG
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: LD_INT 2
55445: NEG
55446: PUSH
55447: LD_INT 0
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: LD_INT 2
55456: NEG
55457: PUSH
55458: LD_INT 1
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: LD_INT 3
55467: NEG
55468: PUSH
55469: LD_INT 1
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: LD_INT 4
55478: NEG
55479: PUSH
55480: LD_INT 0
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: PUSH
55487: LD_INT 4
55489: NEG
55490: PUSH
55491: LD_INT 1
55493: NEG
55494: PUSH
55495: EMPTY
55496: LIST
55497: LIST
55498: PUSH
55499: LD_INT 4
55501: NEG
55502: PUSH
55503: LD_INT 2
55505: NEG
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 2
55513: NEG
55514: PUSH
55515: LD_INT 2
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: LD_INT 4
55524: NEG
55525: PUSH
55526: LD_INT 4
55528: NEG
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: PUSH
55534: LD_INT 4
55536: NEG
55537: PUSH
55538: LD_INT 5
55540: NEG
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 3
55548: NEG
55549: PUSH
55550: LD_INT 4
55552: NEG
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: PUSH
55558: LD_INT 3
55560: NEG
55561: PUSH
55562: LD_INT 3
55564: NEG
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: LD_INT 4
55572: NEG
55573: PUSH
55574: LD_INT 3
55576: NEG
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: LD_INT 5
55584: NEG
55585: PUSH
55586: LD_INT 4
55588: NEG
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: LD_INT 5
55596: NEG
55597: PUSH
55598: LD_INT 5
55600: NEG
55601: PUSH
55602: EMPTY
55603: LIST
55604: LIST
55605: PUSH
55606: LD_INT 3
55608: NEG
55609: PUSH
55610: LD_INT 5
55612: NEG
55613: PUSH
55614: EMPTY
55615: LIST
55616: LIST
55617: PUSH
55618: LD_INT 5
55620: NEG
55621: PUSH
55622: LD_INT 3
55624: NEG
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: LIST
55634: LIST
55635: LIST
55636: LIST
55637: LIST
55638: LIST
55639: LIST
55640: LIST
55641: LIST
55642: LIST
55643: LIST
55644: LIST
55645: LIST
55646: LIST
55647: LIST
55648: LIST
55649: LIST
55650: LIST
55651: LIST
55652: LIST
55653: LIST
55654: LIST
55655: LIST
55656: LIST
55657: LIST
55658: LIST
55659: LIST
55660: LIST
55661: LIST
55662: LIST
55663: LIST
55664: LIST
55665: LIST
55666: LIST
55667: LIST
55668: LIST
55669: LIST
55670: LIST
55671: LIST
55672: LIST
55673: LIST
55674: LIST
55675: LIST
55676: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
55677: LD_ADDR_VAR 0 30
55681: PUSH
55682: LD_INT 4
55684: PUSH
55685: LD_INT 4
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: PUSH
55692: LD_INT 4
55694: PUSH
55695: LD_INT 3
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PUSH
55702: LD_INT 5
55704: PUSH
55705: LD_INT 4
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: PUSH
55712: LD_INT 5
55714: PUSH
55715: LD_INT 5
55717: PUSH
55718: EMPTY
55719: LIST
55720: LIST
55721: PUSH
55722: LD_INT 4
55724: PUSH
55725: LD_INT 5
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: PUSH
55732: LD_INT 3
55734: PUSH
55735: LD_INT 4
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: PUSH
55742: LD_INT 3
55744: PUSH
55745: LD_INT 3
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: LD_INT 5
55754: PUSH
55755: LD_INT 3
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: PUSH
55762: LD_INT 3
55764: PUSH
55765: LD_INT 5
55767: PUSH
55768: EMPTY
55769: LIST
55770: LIST
55771: PUSH
55772: LD_INT 0
55774: PUSH
55775: LD_INT 3
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: PUSH
55782: LD_INT 0
55784: PUSH
55785: LD_INT 2
55787: PUSH
55788: EMPTY
55789: LIST
55790: LIST
55791: PUSH
55792: LD_INT 1
55794: PUSH
55795: LD_INT 3
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PUSH
55802: LD_INT 1
55804: PUSH
55805: LD_INT 4
55807: PUSH
55808: EMPTY
55809: LIST
55810: LIST
55811: PUSH
55812: LD_INT 0
55814: PUSH
55815: LD_INT 4
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: LD_INT 1
55824: NEG
55825: PUSH
55826: LD_INT 3
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: PUSH
55833: LD_INT 1
55835: NEG
55836: PUSH
55837: LD_INT 2
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: PUSH
55844: LD_INT 2
55846: PUSH
55847: LD_INT 4
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: LD_INT 2
55856: NEG
55857: PUSH
55858: LD_INT 2
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: PUSH
55865: LD_INT 4
55867: NEG
55868: PUSH
55869: LD_INT 0
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: LD_INT 4
55878: NEG
55879: PUSH
55880: LD_INT 1
55882: NEG
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: PUSH
55888: LD_INT 3
55890: NEG
55891: PUSH
55892: LD_INT 0
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: LD_INT 3
55901: NEG
55902: PUSH
55903: LD_INT 1
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: LD_INT 4
55912: NEG
55913: PUSH
55914: LD_INT 1
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: PUSH
55921: LD_INT 5
55923: NEG
55924: PUSH
55925: LD_INT 0
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: LD_INT 5
55934: NEG
55935: PUSH
55936: LD_INT 1
55938: NEG
55939: PUSH
55940: EMPTY
55941: LIST
55942: LIST
55943: PUSH
55944: LD_INT 5
55946: NEG
55947: PUSH
55948: LD_INT 2
55950: NEG
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 3
55958: NEG
55959: PUSH
55960: LD_INT 2
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: LD_INT 3
55969: NEG
55970: PUSH
55971: LD_INT 3
55973: NEG
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: PUSH
55979: LD_INT 3
55981: NEG
55982: PUSH
55983: LD_INT 4
55985: NEG
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: PUSH
55991: LD_INT 2
55993: NEG
55994: PUSH
55995: LD_INT 3
55997: NEG
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PUSH
56003: LD_INT 2
56005: NEG
56006: PUSH
56007: LD_INT 2
56009: NEG
56010: PUSH
56011: EMPTY
56012: LIST
56013: LIST
56014: PUSH
56015: LD_INT 3
56017: NEG
56018: PUSH
56019: LD_INT 2
56021: NEG
56022: PUSH
56023: EMPTY
56024: LIST
56025: LIST
56026: PUSH
56027: LD_INT 4
56029: NEG
56030: PUSH
56031: LD_INT 3
56033: NEG
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: PUSH
56039: LD_INT 4
56041: NEG
56042: PUSH
56043: LD_INT 4
56045: NEG
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: LD_INT 2
56053: NEG
56054: PUSH
56055: LD_INT 4
56057: NEG
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: PUSH
56063: LD_INT 4
56065: NEG
56066: PUSH
56067: LD_INT 2
56069: NEG
56070: PUSH
56071: EMPTY
56072: LIST
56073: LIST
56074: PUSH
56075: LD_INT 0
56077: PUSH
56078: LD_INT 4
56080: NEG
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: PUSH
56086: LD_INT 0
56088: PUSH
56089: LD_INT 5
56091: NEG
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: PUSH
56097: LD_INT 1
56099: PUSH
56100: LD_INT 4
56102: NEG
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: PUSH
56108: LD_INT 1
56110: PUSH
56111: LD_INT 3
56113: NEG
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: LD_INT 0
56121: PUSH
56122: LD_INT 3
56124: NEG
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: PUSH
56130: LD_INT 1
56132: NEG
56133: PUSH
56134: LD_INT 4
56136: NEG
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: LD_INT 1
56144: NEG
56145: PUSH
56146: LD_INT 5
56148: NEG
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: PUSH
56154: LD_INT 2
56156: PUSH
56157: LD_INT 3
56159: NEG
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: PUSH
56165: LD_INT 2
56167: NEG
56168: PUSH
56169: LD_INT 5
56171: NEG
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: LIST
56181: LIST
56182: LIST
56183: LIST
56184: LIST
56185: LIST
56186: LIST
56187: LIST
56188: LIST
56189: LIST
56190: LIST
56191: LIST
56192: LIST
56193: LIST
56194: LIST
56195: LIST
56196: LIST
56197: LIST
56198: LIST
56199: LIST
56200: LIST
56201: LIST
56202: LIST
56203: LIST
56204: LIST
56205: LIST
56206: LIST
56207: LIST
56208: LIST
56209: LIST
56210: LIST
56211: LIST
56212: LIST
56213: LIST
56214: LIST
56215: LIST
56216: LIST
56217: LIST
56218: LIST
56219: LIST
56220: LIST
56221: LIST
56222: LIST
56223: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
56224: LD_ADDR_VAR 0 31
56228: PUSH
56229: LD_INT 0
56231: PUSH
56232: LD_INT 4
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: PUSH
56239: LD_INT 0
56241: PUSH
56242: LD_INT 3
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PUSH
56249: LD_INT 1
56251: PUSH
56252: LD_INT 4
56254: PUSH
56255: EMPTY
56256: LIST
56257: LIST
56258: PUSH
56259: LD_INT 1
56261: PUSH
56262: LD_INT 5
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: PUSH
56269: LD_INT 0
56271: PUSH
56272: LD_INT 5
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: PUSH
56279: LD_INT 1
56281: NEG
56282: PUSH
56283: LD_INT 4
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: PUSH
56290: LD_INT 1
56292: NEG
56293: PUSH
56294: LD_INT 3
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PUSH
56301: LD_INT 2
56303: PUSH
56304: LD_INT 5
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 2
56313: NEG
56314: PUSH
56315: LD_INT 3
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: LD_INT 3
56324: NEG
56325: PUSH
56326: LD_INT 0
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: LD_INT 3
56335: NEG
56336: PUSH
56337: LD_INT 1
56339: NEG
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: PUSH
56345: LD_INT 2
56347: NEG
56348: PUSH
56349: LD_INT 0
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: PUSH
56356: LD_INT 2
56358: NEG
56359: PUSH
56360: LD_INT 1
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: PUSH
56367: LD_INT 3
56369: NEG
56370: PUSH
56371: LD_INT 1
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: PUSH
56378: LD_INT 4
56380: NEG
56381: PUSH
56382: LD_INT 0
56384: PUSH
56385: EMPTY
56386: LIST
56387: LIST
56388: PUSH
56389: LD_INT 4
56391: NEG
56392: PUSH
56393: LD_INT 1
56395: NEG
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: PUSH
56401: LD_INT 4
56403: NEG
56404: PUSH
56405: LD_INT 2
56407: NEG
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: PUSH
56413: LD_INT 2
56415: NEG
56416: PUSH
56417: LD_INT 2
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 4
56426: NEG
56427: PUSH
56428: LD_INT 4
56430: NEG
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: PUSH
56436: LD_INT 4
56438: NEG
56439: PUSH
56440: LD_INT 5
56442: NEG
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: PUSH
56448: LD_INT 3
56450: NEG
56451: PUSH
56452: LD_INT 4
56454: NEG
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: LD_INT 3
56462: NEG
56463: PUSH
56464: LD_INT 3
56466: NEG
56467: PUSH
56468: EMPTY
56469: LIST
56470: LIST
56471: PUSH
56472: LD_INT 4
56474: NEG
56475: PUSH
56476: LD_INT 3
56478: NEG
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: PUSH
56484: LD_INT 5
56486: NEG
56487: PUSH
56488: LD_INT 4
56490: NEG
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: LD_INT 5
56498: NEG
56499: PUSH
56500: LD_INT 5
56502: NEG
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: LD_INT 3
56510: NEG
56511: PUSH
56512: LD_INT 5
56514: NEG
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: PUSH
56520: LD_INT 5
56522: NEG
56523: PUSH
56524: LD_INT 3
56526: NEG
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: LD_INT 0
56534: PUSH
56535: LD_INT 3
56537: NEG
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PUSH
56543: LD_INT 0
56545: PUSH
56546: LD_INT 4
56548: NEG
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PUSH
56554: LD_INT 1
56556: PUSH
56557: LD_INT 3
56559: NEG
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 1
56567: PUSH
56568: LD_INT 2
56570: NEG
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: LD_INT 0
56578: PUSH
56579: LD_INT 2
56581: NEG
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: LD_INT 1
56589: NEG
56590: PUSH
56591: LD_INT 3
56593: NEG
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: PUSH
56599: LD_INT 1
56601: NEG
56602: PUSH
56603: LD_INT 4
56605: NEG
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: LD_INT 2
56613: PUSH
56614: LD_INT 2
56616: NEG
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PUSH
56622: LD_INT 2
56624: NEG
56625: PUSH
56626: LD_INT 4
56628: NEG
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: PUSH
56634: LD_INT 4
56636: PUSH
56637: LD_INT 0
56639: PUSH
56640: EMPTY
56641: LIST
56642: LIST
56643: PUSH
56644: LD_INT 4
56646: PUSH
56647: LD_INT 1
56649: NEG
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: LD_INT 5
56657: PUSH
56658: LD_INT 0
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: LD_INT 5
56667: PUSH
56668: LD_INT 1
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PUSH
56675: LD_INT 4
56677: PUSH
56678: LD_INT 1
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PUSH
56685: LD_INT 3
56687: PUSH
56688: LD_INT 0
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: PUSH
56695: LD_INT 3
56697: PUSH
56698: LD_INT 1
56700: NEG
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PUSH
56706: LD_INT 3
56708: PUSH
56709: LD_INT 2
56711: NEG
56712: PUSH
56713: EMPTY
56714: LIST
56715: LIST
56716: PUSH
56717: LD_INT 5
56719: PUSH
56720: LD_INT 2
56722: PUSH
56723: EMPTY
56724: LIST
56725: LIST
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: LIST
56731: LIST
56732: LIST
56733: LIST
56734: LIST
56735: LIST
56736: LIST
56737: LIST
56738: LIST
56739: LIST
56740: LIST
56741: LIST
56742: LIST
56743: LIST
56744: LIST
56745: LIST
56746: LIST
56747: LIST
56748: LIST
56749: LIST
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: LIST
56755: LIST
56756: LIST
56757: LIST
56758: LIST
56759: LIST
56760: LIST
56761: LIST
56762: LIST
56763: LIST
56764: LIST
56765: LIST
56766: LIST
56767: LIST
56768: LIST
56769: LIST
56770: LIST
56771: LIST
56772: LIST
56773: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
56774: LD_ADDR_VAR 0 32
56778: PUSH
56779: LD_INT 4
56781: NEG
56782: PUSH
56783: LD_INT 0
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: PUSH
56790: LD_INT 4
56792: NEG
56793: PUSH
56794: LD_INT 1
56796: NEG
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: PUSH
56802: LD_INT 3
56804: NEG
56805: PUSH
56806: LD_INT 0
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: PUSH
56813: LD_INT 3
56815: NEG
56816: PUSH
56817: LD_INT 1
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: PUSH
56824: LD_INT 4
56826: NEG
56827: PUSH
56828: LD_INT 1
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: LD_INT 5
56837: NEG
56838: PUSH
56839: LD_INT 0
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: LD_INT 5
56848: NEG
56849: PUSH
56850: LD_INT 1
56852: NEG
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 5
56860: NEG
56861: PUSH
56862: LD_INT 2
56864: NEG
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: LD_INT 3
56872: NEG
56873: PUSH
56874: LD_INT 2
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 3
56883: NEG
56884: PUSH
56885: LD_INT 3
56887: NEG
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: PUSH
56893: LD_INT 3
56895: NEG
56896: PUSH
56897: LD_INT 4
56899: NEG
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 2
56907: NEG
56908: PUSH
56909: LD_INT 3
56911: NEG
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: LD_INT 2
56919: NEG
56920: PUSH
56921: LD_INT 2
56923: NEG
56924: PUSH
56925: EMPTY
56926: LIST
56927: LIST
56928: PUSH
56929: LD_INT 3
56931: NEG
56932: PUSH
56933: LD_INT 2
56935: NEG
56936: PUSH
56937: EMPTY
56938: LIST
56939: LIST
56940: PUSH
56941: LD_INT 4
56943: NEG
56944: PUSH
56945: LD_INT 3
56947: NEG
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: PUSH
56953: LD_INT 4
56955: NEG
56956: PUSH
56957: LD_INT 4
56959: NEG
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: PUSH
56965: LD_INT 2
56967: NEG
56968: PUSH
56969: LD_INT 4
56971: NEG
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: PUSH
56977: LD_INT 4
56979: NEG
56980: PUSH
56981: LD_INT 2
56983: NEG
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: PUSH
56989: LD_INT 0
56991: PUSH
56992: LD_INT 4
56994: NEG
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: PUSH
57000: LD_INT 0
57002: PUSH
57003: LD_INT 5
57005: NEG
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: PUSH
57011: LD_INT 1
57013: PUSH
57014: LD_INT 4
57016: NEG
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PUSH
57022: LD_INT 1
57024: PUSH
57025: LD_INT 3
57027: NEG
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: LD_INT 0
57035: PUSH
57036: LD_INT 3
57038: NEG
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: PUSH
57044: LD_INT 1
57046: NEG
57047: PUSH
57048: LD_INT 4
57050: NEG
57051: PUSH
57052: EMPTY
57053: LIST
57054: LIST
57055: PUSH
57056: LD_INT 1
57058: NEG
57059: PUSH
57060: LD_INT 5
57062: NEG
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: PUSH
57068: LD_INT 2
57070: PUSH
57071: LD_INT 3
57073: NEG
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: PUSH
57079: LD_INT 2
57081: NEG
57082: PUSH
57083: LD_INT 5
57085: NEG
57086: PUSH
57087: EMPTY
57088: LIST
57089: LIST
57090: PUSH
57091: LD_INT 3
57093: PUSH
57094: LD_INT 0
57096: PUSH
57097: EMPTY
57098: LIST
57099: LIST
57100: PUSH
57101: LD_INT 3
57103: PUSH
57104: LD_INT 1
57106: NEG
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 4
57114: PUSH
57115: LD_INT 0
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 4
57124: PUSH
57125: LD_INT 1
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: PUSH
57132: LD_INT 3
57134: PUSH
57135: LD_INT 1
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: LD_INT 2
57144: PUSH
57145: LD_INT 0
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PUSH
57152: LD_INT 2
57154: PUSH
57155: LD_INT 1
57157: NEG
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: PUSH
57163: LD_INT 2
57165: PUSH
57166: LD_INT 2
57168: NEG
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: LD_INT 4
57176: PUSH
57177: LD_INT 2
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PUSH
57184: LD_INT 4
57186: PUSH
57187: LD_INT 4
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: LD_INT 4
57196: PUSH
57197: LD_INT 3
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: PUSH
57204: LD_INT 5
57206: PUSH
57207: LD_INT 4
57209: PUSH
57210: EMPTY
57211: LIST
57212: LIST
57213: PUSH
57214: LD_INT 5
57216: PUSH
57217: LD_INT 5
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: PUSH
57224: LD_INT 4
57226: PUSH
57227: LD_INT 5
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: PUSH
57234: LD_INT 3
57236: PUSH
57237: LD_INT 4
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: PUSH
57244: LD_INT 3
57246: PUSH
57247: LD_INT 3
57249: PUSH
57250: EMPTY
57251: LIST
57252: LIST
57253: PUSH
57254: LD_INT 5
57256: PUSH
57257: LD_INT 3
57259: PUSH
57260: EMPTY
57261: LIST
57262: LIST
57263: PUSH
57264: LD_INT 3
57266: PUSH
57267: LD_INT 5
57269: PUSH
57270: EMPTY
57271: LIST
57272: LIST
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: LIST
57278: LIST
57279: LIST
57280: LIST
57281: LIST
57282: LIST
57283: LIST
57284: LIST
57285: LIST
57286: LIST
57287: LIST
57288: LIST
57289: LIST
57290: LIST
57291: LIST
57292: LIST
57293: LIST
57294: LIST
57295: LIST
57296: LIST
57297: LIST
57298: LIST
57299: LIST
57300: LIST
57301: LIST
57302: LIST
57303: LIST
57304: LIST
57305: LIST
57306: LIST
57307: LIST
57308: LIST
57309: LIST
57310: LIST
57311: LIST
57312: LIST
57313: LIST
57314: LIST
57315: LIST
57316: LIST
57317: LIST
57318: LIST
57319: LIST
57320: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
57321: LD_ADDR_VAR 0 33
57325: PUSH
57326: LD_INT 4
57328: NEG
57329: PUSH
57330: LD_INT 4
57332: NEG
57333: PUSH
57334: EMPTY
57335: LIST
57336: LIST
57337: PUSH
57338: LD_INT 4
57340: NEG
57341: PUSH
57342: LD_INT 5
57344: NEG
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: LD_INT 3
57352: NEG
57353: PUSH
57354: LD_INT 4
57356: NEG
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 3
57364: NEG
57365: PUSH
57366: LD_INT 3
57368: NEG
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: LD_INT 4
57376: NEG
57377: PUSH
57378: LD_INT 3
57380: NEG
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: PUSH
57386: LD_INT 5
57388: NEG
57389: PUSH
57390: LD_INT 4
57392: NEG
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: PUSH
57398: LD_INT 5
57400: NEG
57401: PUSH
57402: LD_INT 5
57404: NEG
57405: PUSH
57406: EMPTY
57407: LIST
57408: LIST
57409: PUSH
57410: LD_INT 3
57412: NEG
57413: PUSH
57414: LD_INT 5
57416: NEG
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: PUSH
57422: LD_INT 5
57424: NEG
57425: PUSH
57426: LD_INT 3
57428: NEG
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: PUSH
57434: LD_INT 0
57436: PUSH
57437: LD_INT 3
57439: NEG
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: PUSH
57445: LD_INT 0
57447: PUSH
57448: LD_INT 4
57450: NEG
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: PUSH
57456: LD_INT 1
57458: PUSH
57459: LD_INT 3
57461: NEG
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: PUSH
57467: LD_INT 1
57469: PUSH
57470: LD_INT 2
57472: NEG
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: PUSH
57478: LD_INT 0
57480: PUSH
57481: LD_INT 2
57483: NEG
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: LD_INT 1
57491: NEG
57492: PUSH
57493: LD_INT 3
57495: NEG
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: PUSH
57501: LD_INT 1
57503: NEG
57504: PUSH
57505: LD_INT 4
57507: NEG
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: PUSH
57513: LD_INT 2
57515: PUSH
57516: LD_INT 2
57518: NEG
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: PUSH
57524: LD_INT 2
57526: NEG
57527: PUSH
57528: LD_INT 4
57530: NEG
57531: PUSH
57532: EMPTY
57533: LIST
57534: LIST
57535: PUSH
57536: LD_INT 4
57538: PUSH
57539: LD_INT 0
57541: PUSH
57542: EMPTY
57543: LIST
57544: LIST
57545: PUSH
57546: LD_INT 4
57548: PUSH
57549: LD_INT 1
57551: NEG
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: PUSH
57557: LD_INT 5
57559: PUSH
57560: LD_INT 0
57562: PUSH
57563: EMPTY
57564: LIST
57565: LIST
57566: PUSH
57567: LD_INT 5
57569: PUSH
57570: LD_INT 1
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: LD_INT 4
57579: PUSH
57580: LD_INT 1
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: PUSH
57587: LD_INT 3
57589: PUSH
57590: LD_INT 0
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: PUSH
57597: LD_INT 3
57599: PUSH
57600: LD_INT 1
57602: NEG
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 3
57610: PUSH
57611: LD_INT 2
57613: NEG
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: LD_INT 5
57621: PUSH
57622: LD_INT 2
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: LD_INT 3
57631: PUSH
57632: LD_INT 3
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: PUSH
57639: LD_INT 3
57641: PUSH
57642: LD_INT 2
57644: PUSH
57645: EMPTY
57646: LIST
57647: LIST
57648: PUSH
57649: LD_INT 4
57651: PUSH
57652: LD_INT 3
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: PUSH
57659: LD_INT 4
57661: PUSH
57662: LD_INT 4
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: PUSH
57669: LD_INT 3
57671: PUSH
57672: LD_INT 4
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: PUSH
57679: LD_INT 2
57681: PUSH
57682: LD_INT 3
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: LD_INT 2
57691: PUSH
57692: LD_INT 2
57694: PUSH
57695: EMPTY
57696: LIST
57697: LIST
57698: PUSH
57699: LD_INT 4
57701: PUSH
57702: LD_INT 2
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: PUSH
57709: LD_INT 2
57711: PUSH
57712: LD_INT 4
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: LD_INT 0
57721: PUSH
57722: LD_INT 4
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: PUSH
57729: LD_INT 0
57731: PUSH
57732: LD_INT 3
57734: PUSH
57735: EMPTY
57736: LIST
57737: LIST
57738: PUSH
57739: LD_INT 1
57741: PUSH
57742: LD_INT 4
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: PUSH
57749: LD_INT 1
57751: PUSH
57752: LD_INT 5
57754: PUSH
57755: EMPTY
57756: LIST
57757: LIST
57758: PUSH
57759: LD_INT 0
57761: PUSH
57762: LD_INT 5
57764: PUSH
57765: EMPTY
57766: LIST
57767: LIST
57768: PUSH
57769: LD_INT 1
57771: NEG
57772: PUSH
57773: LD_INT 4
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: LD_INT 1
57782: NEG
57783: PUSH
57784: LD_INT 3
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: LD_INT 2
57793: PUSH
57794: LD_INT 5
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: PUSH
57801: LD_INT 2
57803: NEG
57804: PUSH
57805: LD_INT 3
57807: PUSH
57808: EMPTY
57809: LIST
57810: LIST
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: LIST
57816: LIST
57817: LIST
57818: LIST
57819: LIST
57820: LIST
57821: LIST
57822: LIST
57823: LIST
57824: LIST
57825: LIST
57826: LIST
57827: LIST
57828: LIST
57829: LIST
57830: LIST
57831: LIST
57832: LIST
57833: LIST
57834: LIST
57835: LIST
57836: LIST
57837: LIST
57838: LIST
57839: LIST
57840: LIST
57841: LIST
57842: LIST
57843: LIST
57844: LIST
57845: LIST
57846: LIST
57847: LIST
57848: LIST
57849: LIST
57850: LIST
57851: LIST
57852: LIST
57853: LIST
57854: LIST
57855: LIST
57856: LIST
57857: LIST
57858: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
57859: LD_ADDR_VAR 0 34
57863: PUSH
57864: LD_INT 0
57866: PUSH
57867: LD_INT 4
57869: NEG
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 0
57877: PUSH
57878: LD_INT 5
57880: NEG
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: PUSH
57886: LD_INT 1
57888: PUSH
57889: LD_INT 4
57891: NEG
57892: PUSH
57893: EMPTY
57894: LIST
57895: LIST
57896: PUSH
57897: LD_INT 1
57899: PUSH
57900: LD_INT 3
57902: NEG
57903: PUSH
57904: EMPTY
57905: LIST
57906: LIST
57907: PUSH
57908: LD_INT 0
57910: PUSH
57911: LD_INT 3
57913: NEG
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: PUSH
57919: LD_INT 1
57921: NEG
57922: PUSH
57923: LD_INT 4
57925: NEG
57926: PUSH
57927: EMPTY
57928: LIST
57929: LIST
57930: PUSH
57931: LD_INT 1
57933: NEG
57934: PUSH
57935: LD_INT 5
57937: NEG
57938: PUSH
57939: EMPTY
57940: LIST
57941: LIST
57942: PUSH
57943: LD_INT 2
57945: PUSH
57946: LD_INT 3
57948: NEG
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: PUSH
57954: LD_INT 2
57956: NEG
57957: PUSH
57958: LD_INT 5
57960: NEG
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: LD_INT 3
57968: PUSH
57969: LD_INT 0
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: PUSH
57976: LD_INT 3
57978: PUSH
57979: LD_INT 1
57981: NEG
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: PUSH
57987: LD_INT 4
57989: PUSH
57990: LD_INT 0
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: PUSH
57997: LD_INT 4
57999: PUSH
58000: LD_INT 1
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: PUSH
58007: LD_INT 3
58009: PUSH
58010: LD_INT 1
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: PUSH
58017: LD_INT 2
58019: PUSH
58020: LD_INT 0
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: PUSH
58027: LD_INT 2
58029: PUSH
58030: LD_INT 1
58032: NEG
58033: PUSH
58034: EMPTY
58035: LIST
58036: LIST
58037: PUSH
58038: LD_INT 2
58040: PUSH
58041: LD_INT 2
58043: NEG
58044: PUSH
58045: EMPTY
58046: LIST
58047: LIST
58048: PUSH
58049: LD_INT 4
58051: PUSH
58052: LD_INT 2
58054: PUSH
58055: EMPTY
58056: LIST
58057: LIST
58058: PUSH
58059: LD_INT 4
58061: PUSH
58062: LD_INT 4
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: PUSH
58069: LD_INT 4
58071: PUSH
58072: LD_INT 3
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: PUSH
58079: LD_INT 5
58081: PUSH
58082: LD_INT 4
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: PUSH
58089: LD_INT 5
58091: PUSH
58092: LD_INT 5
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: PUSH
58099: LD_INT 4
58101: PUSH
58102: LD_INT 5
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: PUSH
58109: LD_INT 3
58111: PUSH
58112: LD_INT 4
58114: PUSH
58115: EMPTY
58116: LIST
58117: LIST
58118: PUSH
58119: LD_INT 3
58121: PUSH
58122: LD_INT 3
58124: PUSH
58125: EMPTY
58126: LIST
58127: LIST
58128: PUSH
58129: LD_INT 5
58131: PUSH
58132: LD_INT 3
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PUSH
58139: LD_INT 3
58141: PUSH
58142: LD_INT 5
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: PUSH
58149: LD_INT 0
58151: PUSH
58152: LD_INT 3
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: PUSH
58159: LD_INT 0
58161: PUSH
58162: LD_INT 2
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: LD_INT 1
58171: PUSH
58172: LD_INT 3
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PUSH
58179: LD_INT 1
58181: PUSH
58182: LD_INT 4
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: PUSH
58189: LD_INT 0
58191: PUSH
58192: LD_INT 4
58194: PUSH
58195: EMPTY
58196: LIST
58197: LIST
58198: PUSH
58199: LD_INT 1
58201: NEG
58202: PUSH
58203: LD_INT 3
58205: PUSH
58206: EMPTY
58207: LIST
58208: LIST
58209: PUSH
58210: LD_INT 1
58212: NEG
58213: PUSH
58214: LD_INT 2
58216: PUSH
58217: EMPTY
58218: LIST
58219: LIST
58220: PUSH
58221: LD_INT 2
58223: PUSH
58224: LD_INT 4
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: PUSH
58231: LD_INT 2
58233: NEG
58234: PUSH
58235: LD_INT 2
58237: PUSH
58238: EMPTY
58239: LIST
58240: LIST
58241: PUSH
58242: LD_INT 4
58244: NEG
58245: PUSH
58246: LD_INT 0
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: PUSH
58253: LD_INT 4
58255: NEG
58256: PUSH
58257: LD_INT 1
58259: NEG
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: PUSH
58265: LD_INT 3
58267: NEG
58268: PUSH
58269: LD_INT 0
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 3
58278: NEG
58279: PUSH
58280: LD_INT 1
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PUSH
58287: LD_INT 4
58289: NEG
58290: PUSH
58291: LD_INT 1
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: PUSH
58298: LD_INT 5
58300: NEG
58301: PUSH
58302: LD_INT 0
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: PUSH
58309: LD_INT 5
58311: NEG
58312: PUSH
58313: LD_INT 1
58315: NEG
58316: PUSH
58317: EMPTY
58318: LIST
58319: LIST
58320: PUSH
58321: LD_INT 5
58323: NEG
58324: PUSH
58325: LD_INT 2
58327: NEG
58328: PUSH
58329: EMPTY
58330: LIST
58331: LIST
58332: PUSH
58333: LD_INT 3
58335: NEG
58336: PUSH
58337: LD_INT 2
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: LIST
58348: LIST
58349: LIST
58350: LIST
58351: LIST
58352: LIST
58353: LIST
58354: LIST
58355: LIST
58356: LIST
58357: LIST
58358: LIST
58359: LIST
58360: LIST
58361: LIST
58362: LIST
58363: LIST
58364: LIST
58365: LIST
58366: LIST
58367: LIST
58368: LIST
58369: LIST
58370: LIST
58371: LIST
58372: LIST
58373: LIST
58374: LIST
58375: LIST
58376: LIST
58377: LIST
58378: LIST
58379: LIST
58380: LIST
58381: LIST
58382: LIST
58383: LIST
58384: LIST
58385: LIST
58386: LIST
58387: LIST
58388: LIST
58389: LIST
58390: ST_TO_ADDR
// end ; end ;
58391: GO 58394
58393: POP
// case btype of b_depot , b_warehouse :
58394: LD_VAR 0 1
58398: PUSH
58399: LD_INT 0
58401: DOUBLE
58402: EQUAL
58403: IFTRUE 58413
58405: LD_INT 1
58407: DOUBLE
58408: EQUAL
58409: IFTRUE 58413
58411: GO 58614
58413: POP
// case nation of nation_american :
58414: LD_VAR 0 5
58418: PUSH
58419: LD_INT 1
58421: DOUBLE
58422: EQUAL
58423: IFTRUE 58427
58425: GO 58483
58427: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
58428: LD_ADDR_VAR 0 9
58432: PUSH
58433: LD_VAR 0 11
58437: PUSH
58438: LD_VAR 0 12
58442: PUSH
58443: LD_VAR 0 13
58447: PUSH
58448: LD_VAR 0 14
58452: PUSH
58453: LD_VAR 0 15
58457: PUSH
58458: LD_VAR 0 16
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: LIST
58467: LIST
58468: LIST
58469: LIST
58470: PUSH
58471: LD_VAR 0 4
58475: PUSH
58476: LD_INT 1
58478: PLUS
58479: ARRAY
58480: ST_TO_ADDR
58481: GO 58612
58483: LD_INT 2
58485: DOUBLE
58486: EQUAL
58487: IFTRUE 58491
58489: GO 58547
58491: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
58492: LD_ADDR_VAR 0 9
58496: PUSH
58497: LD_VAR 0 17
58501: PUSH
58502: LD_VAR 0 18
58506: PUSH
58507: LD_VAR 0 19
58511: PUSH
58512: LD_VAR 0 20
58516: PUSH
58517: LD_VAR 0 21
58521: PUSH
58522: LD_VAR 0 22
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: LIST
58531: LIST
58532: LIST
58533: LIST
58534: PUSH
58535: LD_VAR 0 4
58539: PUSH
58540: LD_INT 1
58542: PLUS
58543: ARRAY
58544: ST_TO_ADDR
58545: GO 58612
58547: LD_INT 3
58549: DOUBLE
58550: EQUAL
58551: IFTRUE 58555
58553: GO 58611
58555: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
58556: LD_ADDR_VAR 0 9
58560: PUSH
58561: LD_VAR 0 23
58565: PUSH
58566: LD_VAR 0 24
58570: PUSH
58571: LD_VAR 0 25
58575: PUSH
58576: LD_VAR 0 26
58580: PUSH
58581: LD_VAR 0 27
58585: PUSH
58586: LD_VAR 0 28
58590: PUSH
58591: EMPTY
58592: LIST
58593: LIST
58594: LIST
58595: LIST
58596: LIST
58597: LIST
58598: PUSH
58599: LD_VAR 0 4
58603: PUSH
58604: LD_INT 1
58606: PLUS
58607: ARRAY
58608: ST_TO_ADDR
58609: GO 58612
58611: POP
58612: GO 59167
58614: LD_INT 2
58616: DOUBLE
58617: EQUAL
58618: IFTRUE 58628
58620: LD_INT 3
58622: DOUBLE
58623: EQUAL
58624: IFTRUE 58628
58626: GO 58684
58628: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
58629: LD_ADDR_VAR 0 9
58633: PUSH
58634: LD_VAR 0 29
58638: PUSH
58639: LD_VAR 0 30
58643: PUSH
58644: LD_VAR 0 31
58648: PUSH
58649: LD_VAR 0 32
58653: PUSH
58654: LD_VAR 0 33
58658: PUSH
58659: LD_VAR 0 34
58663: PUSH
58664: EMPTY
58665: LIST
58666: LIST
58667: LIST
58668: LIST
58669: LIST
58670: LIST
58671: PUSH
58672: LD_VAR 0 4
58676: PUSH
58677: LD_INT 1
58679: PLUS
58680: ARRAY
58681: ST_TO_ADDR
58682: GO 59167
58684: LD_INT 16
58686: DOUBLE
58687: EQUAL
58688: IFTRUE 58746
58690: LD_INT 17
58692: DOUBLE
58693: EQUAL
58694: IFTRUE 58746
58696: LD_INT 18
58698: DOUBLE
58699: EQUAL
58700: IFTRUE 58746
58702: LD_INT 19
58704: DOUBLE
58705: EQUAL
58706: IFTRUE 58746
58708: LD_INT 22
58710: DOUBLE
58711: EQUAL
58712: IFTRUE 58746
58714: LD_INT 20
58716: DOUBLE
58717: EQUAL
58718: IFTRUE 58746
58720: LD_INT 21
58722: DOUBLE
58723: EQUAL
58724: IFTRUE 58746
58726: LD_INT 23
58728: DOUBLE
58729: EQUAL
58730: IFTRUE 58746
58732: LD_INT 24
58734: DOUBLE
58735: EQUAL
58736: IFTRUE 58746
58738: LD_INT 25
58740: DOUBLE
58741: EQUAL
58742: IFTRUE 58746
58744: GO 58802
58746: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
58747: LD_ADDR_VAR 0 9
58751: PUSH
58752: LD_VAR 0 35
58756: PUSH
58757: LD_VAR 0 36
58761: PUSH
58762: LD_VAR 0 37
58766: PUSH
58767: LD_VAR 0 38
58771: PUSH
58772: LD_VAR 0 39
58776: PUSH
58777: LD_VAR 0 40
58781: PUSH
58782: EMPTY
58783: LIST
58784: LIST
58785: LIST
58786: LIST
58787: LIST
58788: LIST
58789: PUSH
58790: LD_VAR 0 4
58794: PUSH
58795: LD_INT 1
58797: PLUS
58798: ARRAY
58799: ST_TO_ADDR
58800: GO 59167
58802: LD_INT 6
58804: DOUBLE
58805: EQUAL
58806: IFTRUE 58858
58808: LD_INT 7
58810: DOUBLE
58811: EQUAL
58812: IFTRUE 58858
58814: LD_INT 8
58816: DOUBLE
58817: EQUAL
58818: IFTRUE 58858
58820: LD_INT 13
58822: DOUBLE
58823: EQUAL
58824: IFTRUE 58858
58826: LD_INT 12
58828: DOUBLE
58829: EQUAL
58830: IFTRUE 58858
58832: LD_INT 15
58834: DOUBLE
58835: EQUAL
58836: IFTRUE 58858
58838: LD_INT 11
58840: DOUBLE
58841: EQUAL
58842: IFTRUE 58858
58844: LD_INT 14
58846: DOUBLE
58847: EQUAL
58848: IFTRUE 58858
58850: LD_INT 10
58852: DOUBLE
58853: EQUAL
58854: IFTRUE 58858
58856: GO 58914
58858: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
58859: LD_ADDR_VAR 0 9
58863: PUSH
58864: LD_VAR 0 41
58868: PUSH
58869: LD_VAR 0 42
58873: PUSH
58874: LD_VAR 0 43
58878: PUSH
58879: LD_VAR 0 44
58883: PUSH
58884: LD_VAR 0 45
58888: PUSH
58889: LD_VAR 0 46
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: LIST
58898: LIST
58899: LIST
58900: LIST
58901: PUSH
58902: LD_VAR 0 4
58906: PUSH
58907: LD_INT 1
58909: PLUS
58910: ARRAY
58911: ST_TO_ADDR
58912: GO 59167
58914: LD_INT 36
58916: DOUBLE
58917: EQUAL
58918: IFTRUE 58922
58920: GO 58978
58922: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
58923: LD_ADDR_VAR 0 9
58927: PUSH
58928: LD_VAR 0 47
58932: PUSH
58933: LD_VAR 0 48
58937: PUSH
58938: LD_VAR 0 49
58942: PUSH
58943: LD_VAR 0 50
58947: PUSH
58948: LD_VAR 0 51
58952: PUSH
58953: LD_VAR 0 52
58957: PUSH
58958: EMPTY
58959: LIST
58960: LIST
58961: LIST
58962: LIST
58963: LIST
58964: LIST
58965: PUSH
58966: LD_VAR 0 4
58970: PUSH
58971: LD_INT 1
58973: PLUS
58974: ARRAY
58975: ST_TO_ADDR
58976: GO 59167
58978: LD_INT 4
58980: DOUBLE
58981: EQUAL
58982: IFTRUE 59004
58984: LD_INT 5
58986: DOUBLE
58987: EQUAL
58988: IFTRUE 59004
58990: LD_INT 34
58992: DOUBLE
58993: EQUAL
58994: IFTRUE 59004
58996: LD_INT 37
58998: DOUBLE
58999: EQUAL
59000: IFTRUE 59004
59002: GO 59060
59004: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
59005: LD_ADDR_VAR 0 9
59009: PUSH
59010: LD_VAR 0 53
59014: PUSH
59015: LD_VAR 0 54
59019: PUSH
59020: LD_VAR 0 55
59024: PUSH
59025: LD_VAR 0 56
59029: PUSH
59030: LD_VAR 0 57
59034: PUSH
59035: LD_VAR 0 58
59039: PUSH
59040: EMPTY
59041: LIST
59042: LIST
59043: LIST
59044: LIST
59045: LIST
59046: LIST
59047: PUSH
59048: LD_VAR 0 4
59052: PUSH
59053: LD_INT 1
59055: PLUS
59056: ARRAY
59057: ST_TO_ADDR
59058: GO 59167
59060: LD_INT 31
59062: DOUBLE
59063: EQUAL
59064: IFTRUE 59110
59066: LD_INT 32
59068: DOUBLE
59069: EQUAL
59070: IFTRUE 59110
59072: LD_INT 33
59074: DOUBLE
59075: EQUAL
59076: IFTRUE 59110
59078: LD_INT 27
59080: DOUBLE
59081: EQUAL
59082: IFTRUE 59110
59084: LD_INT 26
59086: DOUBLE
59087: EQUAL
59088: IFTRUE 59110
59090: LD_INT 28
59092: DOUBLE
59093: EQUAL
59094: IFTRUE 59110
59096: LD_INT 29
59098: DOUBLE
59099: EQUAL
59100: IFTRUE 59110
59102: LD_INT 30
59104: DOUBLE
59105: EQUAL
59106: IFTRUE 59110
59108: GO 59166
59110: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
59111: LD_ADDR_VAR 0 9
59115: PUSH
59116: LD_VAR 0 59
59120: PUSH
59121: LD_VAR 0 60
59125: PUSH
59126: LD_VAR 0 61
59130: PUSH
59131: LD_VAR 0 62
59135: PUSH
59136: LD_VAR 0 63
59140: PUSH
59141: LD_VAR 0 64
59145: PUSH
59146: EMPTY
59147: LIST
59148: LIST
59149: LIST
59150: LIST
59151: LIST
59152: LIST
59153: PUSH
59154: LD_VAR 0 4
59158: PUSH
59159: LD_INT 1
59161: PLUS
59162: ARRAY
59163: ST_TO_ADDR
59164: GO 59167
59166: POP
// temp_list2 = [ ] ;
59167: LD_ADDR_VAR 0 10
59171: PUSH
59172: EMPTY
59173: ST_TO_ADDR
// for i in temp_list do
59174: LD_ADDR_VAR 0 8
59178: PUSH
59179: LD_VAR 0 9
59183: PUSH
59184: FOR_IN
59185: IFFALSE 59237
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
59187: LD_ADDR_VAR 0 10
59191: PUSH
59192: LD_VAR 0 10
59196: PUSH
59197: LD_VAR 0 8
59201: PUSH
59202: LD_INT 1
59204: ARRAY
59205: PUSH
59206: LD_VAR 0 2
59210: PLUS
59211: PUSH
59212: LD_VAR 0 8
59216: PUSH
59217: LD_INT 2
59219: ARRAY
59220: PUSH
59221: LD_VAR 0 3
59225: PLUS
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: PUSH
59231: EMPTY
59232: LIST
59233: ADD
59234: ST_TO_ADDR
59235: GO 59184
59237: POP
59238: POP
// result = temp_list2 ;
59239: LD_ADDR_VAR 0 7
59243: PUSH
59244: LD_VAR 0 10
59248: ST_TO_ADDR
// end ;
59249: LD_VAR 0 7
59253: RET
// export function EnemyInRange ( unit , dist ) ; begin
59254: LD_INT 0
59256: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
59257: LD_ADDR_VAR 0 3
59261: PUSH
59262: LD_VAR 0 1
59266: PPUSH
59267: CALL_OW 255
59271: PPUSH
59272: LD_VAR 0 1
59276: PPUSH
59277: CALL_OW 250
59281: PPUSH
59282: LD_VAR 0 1
59286: PPUSH
59287: CALL_OW 251
59291: PPUSH
59292: LD_VAR 0 2
59296: PPUSH
59297: CALL 32627 0 4
59301: PUSH
59302: LD_INT 4
59304: ARRAY
59305: ST_TO_ADDR
// end ;
59306: LD_VAR 0 3
59310: RET
// export function PlayerSeeMe ( unit ) ; begin
59311: LD_INT 0
59313: PPUSH
// result := See ( your_side , unit ) ;
59314: LD_ADDR_VAR 0 2
59318: PUSH
59319: LD_OWVAR 2
59323: PPUSH
59324: LD_VAR 0 1
59328: PPUSH
59329: CALL_OW 292
59333: ST_TO_ADDR
// end ;
59334: LD_VAR 0 2
59338: RET
// export function ReverseDir ( unit ) ; begin
59339: LD_INT 0
59341: PPUSH
// if not unit then
59342: LD_VAR 0 1
59346: NOT
59347: IFFALSE 59351
// exit ;
59349: GO 59374
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
59351: LD_ADDR_VAR 0 2
59355: PUSH
59356: LD_VAR 0 1
59360: PPUSH
59361: CALL_OW 254
59365: PUSH
59366: LD_INT 3
59368: PLUS
59369: PUSH
59370: LD_INT 6
59372: MOD
59373: ST_TO_ADDR
// end ;
59374: LD_VAR 0 2
59378: RET
// export function ReverseArray ( array ) ; var i ; begin
59379: LD_INT 0
59381: PPUSH
59382: PPUSH
// if not array then
59383: LD_VAR 0 1
59387: NOT
59388: IFFALSE 59392
// exit ;
59390: GO 59447
// result := [ ] ;
59392: LD_ADDR_VAR 0 2
59396: PUSH
59397: EMPTY
59398: ST_TO_ADDR
// for i := array downto 1 do
59399: LD_ADDR_VAR 0 3
59403: PUSH
59404: DOUBLE
59405: LD_VAR 0 1
59409: INC
59410: ST_TO_ADDR
59411: LD_INT 1
59413: PUSH
59414: FOR_DOWNTO
59415: IFFALSE 59445
// result := Join ( result , array [ i ] ) ;
59417: LD_ADDR_VAR 0 2
59421: PUSH
59422: LD_VAR 0 2
59426: PPUSH
59427: LD_VAR 0 1
59431: PUSH
59432: LD_VAR 0 3
59436: ARRAY
59437: PPUSH
59438: CALL 64103 0 2
59442: ST_TO_ADDR
59443: GO 59414
59445: POP
59446: POP
// end ;
59447: LD_VAR 0 2
59451: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
59452: LD_INT 0
59454: PPUSH
59455: PPUSH
59456: PPUSH
59457: PPUSH
59458: PPUSH
59459: PPUSH
// if not unit or not hexes then
59460: LD_VAR 0 1
59464: NOT
59465: PUSH
59466: LD_VAR 0 2
59470: NOT
59471: OR
59472: IFFALSE 59476
// exit ;
59474: GO 59599
// dist := 9999 ;
59476: LD_ADDR_VAR 0 5
59480: PUSH
59481: LD_INT 9999
59483: ST_TO_ADDR
// for i = 1 to hexes do
59484: LD_ADDR_VAR 0 4
59488: PUSH
59489: DOUBLE
59490: LD_INT 1
59492: DEC
59493: ST_TO_ADDR
59494: LD_VAR 0 2
59498: PUSH
59499: FOR_TO
59500: IFFALSE 59587
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
59502: LD_ADDR_VAR 0 6
59506: PUSH
59507: LD_VAR 0 1
59511: PPUSH
59512: LD_VAR 0 2
59516: PUSH
59517: LD_VAR 0 4
59521: ARRAY
59522: PUSH
59523: LD_INT 1
59525: ARRAY
59526: PPUSH
59527: LD_VAR 0 2
59531: PUSH
59532: LD_VAR 0 4
59536: ARRAY
59537: PUSH
59538: LD_INT 2
59540: ARRAY
59541: PPUSH
59542: CALL_OW 297
59546: ST_TO_ADDR
// if tdist < dist then
59547: LD_VAR 0 6
59551: PUSH
59552: LD_VAR 0 5
59556: LESS
59557: IFFALSE 59585
// begin hex := hexes [ i ] ;
59559: LD_ADDR_VAR 0 8
59563: PUSH
59564: LD_VAR 0 2
59568: PUSH
59569: LD_VAR 0 4
59573: ARRAY
59574: ST_TO_ADDR
// dist := tdist ;
59575: LD_ADDR_VAR 0 5
59579: PUSH
59580: LD_VAR 0 6
59584: ST_TO_ADDR
// end ; end ;
59585: GO 59499
59587: POP
59588: POP
// result := hex ;
59589: LD_ADDR_VAR 0 3
59593: PUSH
59594: LD_VAR 0 8
59598: ST_TO_ADDR
// end ;
59599: LD_VAR 0 3
59603: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
59604: LD_INT 0
59606: PPUSH
59607: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
59608: LD_VAR 0 1
59612: NOT
59613: PUSH
59614: LD_VAR 0 1
59618: PUSH
59619: LD_INT 21
59621: PUSH
59622: LD_INT 2
59624: PUSH
59625: EMPTY
59626: LIST
59627: LIST
59628: PUSH
59629: LD_INT 23
59631: PUSH
59632: LD_INT 2
59634: PUSH
59635: EMPTY
59636: LIST
59637: LIST
59638: PUSH
59639: EMPTY
59640: LIST
59641: LIST
59642: PPUSH
59643: CALL_OW 69
59647: IN
59648: NOT
59649: OR
59650: IFFALSE 59654
// exit ;
59652: GO 59701
// for i = 1 to 3 do
59654: LD_ADDR_VAR 0 3
59658: PUSH
59659: DOUBLE
59660: LD_INT 1
59662: DEC
59663: ST_TO_ADDR
59664: LD_INT 3
59666: PUSH
59667: FOR_TO
59668: IFFALSE 59699
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
59670: LD_VAR 0 1
59674: PPUSH
59675: CALL_OW 250
59679: PPUSH
59680: LD_VAR 0 1
59684: PPUSH
59685: CALL_OW 251
59689: PPUSH
59690: LD_INT 1
59692: PPUSH
59693: CALL_OW 453
59697: GO 59667
59699: POP
59700: POP
// end ;
59701: LD_VAR 0 2
59705: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
59706: LD_INT 0
59708: PPUSH
59709: PPUSH
59710: PPUSH
59711: PPUSH
59712: PPUSH
59713: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
59714: LD_VAR 0 1
59718: NOT
59719: PUSH
59720: LD_VAR 0 2
59724: NOT
59725: OR
59726: PUSH
59727: LD_VAR 0 1
59731: PPUSH
59732: CALL_OW 314
59736: OR
59737: IFFALSE 59741
// exit ;
59739: GO 60208
// if GetLives ( i ) < 250 then
59741: LD_VAR 0 4
59745: PPUSH
59746: CALL_OW 256
59750: PUSH
59751: LD_INT 250
59753: LESS
59754: IFFALSE 59767
// begin ComAutodestruct ( i ) ;
59756: LD_VAR 0 4
59760: PPUSH
59761: CALL 59604 0 1
// exit ;
59765: GO 60208
// end ; x := GetX ( enemy_unit ) ;
59767: LD_ADDR_VAR 0 7
59771: PUSH
59772: LD_VAR 0 2
59776: PPUSH
59777: CALL_OW 250
59781: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
59782: LD_ADDR_VAR 0 8
59786: PUSH
59787: LD_VAR 0 2
59791: PPUSH
59792: CALL_OW 251
59796: ST_TO_ADDR
// if not x or not y then
59797: LD_VAR 0 7
59801: NOT
59802: PUSH
59803: LD_VAR 0 8
59807: NOT
59808: OR
59809: IFFALSE 59813
// exit ;
59811: GO 60208
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
59813: LD_ADDR_VAR 0 6
59817: PUSH
59818: LD_VAR 0 7
59822: PPUSH
59823: LD_INT 0
59825: PPUSH
59826: LD_INT 4
59828: PPUSH
59829: CALL_OW 272
59833: PUSH
59834: LD_VAR 0 8
59838: PPUSH
59839: LD_INT 0
59841: PPUSH
59842: LD_INT 4
59844: PPUSH
59845: CALL_OW 273
59849: PUSH
59850: EMPTY
59851: LIST
59852: LIST
59853: PUSH
59854: LD_VAR 0 7
59858: PPUSH
59859: LD_INT 1
59861: PPUSH
59862: LD_INT 4
59864: PPUSH
59865: CALL_OW 272
59869: PUSH
59870: LD_VAR 0 8
59874: PPUSH
59875: LD_INT 1
59877: PPUSH
59878: LD_INT 4
59880: PPUSH
59881: CALL_OW 273
59885: PUSH
59886: EMPTY
59887: LIST
59888: LIST
59889: PUSH
59890: LD_VAR 0 7
59894: PPUSH
59895: LD_INT 2
59897: PPUSH
59898: LD_INT 4
59900: PPUSH
59901: CALL_OW 272
59905: PUSH
59906: LD_VAR 0 8
59910: PPUSH
59911: LD_INT 2
59913: PPUSH
59914: LD_INT 4
59916: PPUSH
59917: CALL_OW 273
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PUSH
59926: LD_VAR 0 7
59930: PPUSH
59931: LD_INT 3
59933: PPUSH
59934: LD_INT 4
59936: PPUSH
59937: CALL_OW 272
59941: PUSH
59942: LD_VAR 0 8
59946: PPUSH
59947: LD_INT 3
59949: PPUSH
59950: LD_INT 4
59952: PPUSH
59953: CALL_OW 273
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: LD_VAR 0 7
59966: PPUSH
59967: LD_INT 4
59969: PPUSH
59970: LD_INT 4
59972: PPUSH
59973: CALL_OW 272
59977: PUSH
59978: LD_VAR 0 8
59982: PPUSH
59983: LD_INT 4
59985: PPUSH
59986: LD_INT 4
59988: PPUSH
59989: CALL_OW 273
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: LD_VAR 0 7
60002: PPUSH
60003: LD_INT 5
60005: PPUSH
60006: LD_INT 4
60008: PPUSH
60009: CALL_OW 272
60013: PUSH
60014: LD_VAR 0 8
60018: PPUSH
60019: LD_INT 5
60021: PPUSH
60022: LD_INT 4
60024: PPUSH
60025: CALL_OW 273
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: PUSH
60034: EMPTY
60035: LIST
60036: LIST
60037: LIST
60038: LIST
60039: LIST
60040: LIST
60041: ST_TO_ADDR
// for i = tmp downto 1 do
60042: LD_ADDR_VAR 0 4
60046: PUSH
60047: DOUBLE
60048: LD_VAR 0 6
60052: INC
60053: ST_TO_ADDR
60054: LD_INT 1
60056: PUSH
60057: FOR_DOWNTO
60058: IFFALSE 60159
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
60060: LD_VAR 0 6
60064: PUSH
60065: LD_VAR 0 4
60069: ARRAY
60070: PUSH
60071: LD_INT 1
60073: ARRAY
60074: PPUSH
60075: LD_VAR 0 6
60079: PUSH
60080: LD_VAR 0 4
60084: ARRAY
60085: PUSH
60086: LD_INT 2
60088: ARRAY
60089: PPUSH
60090: CALL_OW 488
60094: NOT
60095: PUSH
60096: LD_VAR 0 6
60100: PUSH
60101: LD_VAR 0 4
60105: ARRAY
60106: PUSH
60107: LD_INT 1
60109: ARRAY
60110: PPUSH
60111: LD_VAR 0 6
60115: PUSH
60116: LD_VAR 0 4
60120: ARRAY
60121: PUSH
60122: LD_INT 2
60124: ARRAY
60125: PPUSH
60126: CALL_OW 428
60130: PUSH
60131: LD_INT 0
60133: NONEQUAL
60134: OR
60135: IFFALSE 60157
// tmp := Delete ( tmp , i ) ;
60137: LD_ADDR_VAR 0 6
60141: PUSH
60142: LD_VAR 0 6
60146: PPUSH
60147: LD_VAR 0 4
60151: PPUSH
60152: CALL_OW 3
60156: ST_TO_ADDR
60157: GO 60057
60159: POP
60160: POP
// j := GetClosestHex ( unit , tmp ) ;
60161: LD_ADDR_VAR 0 5
60165: PUSH
60166: LD_VAR 0 1
60170: PPUSH
60171: LD_VAR 0 6
60175: PPUSH
60176: CALL 59452 0 2
60180: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
60181: LD_VAR 0 1
60185: PPUSH
60186: LD_VAR 0 5
60190: PUSH
60191: LD_INT 1
60193: ARRAY
60194: PPUSH
60195: LD_VAR 0 5
60199: PUSH
60200: LD_INT 2
60202: ARRAY
60203: PPUSH
60204: CALL_OW 111
// end ;
60208: LD_VAR 0 3
60212: RET
// export function PrepareApemanSoldier ( ) ; begin
60213: LD_INT 0
60215: PPUSH
// uc_nation := 0 ;
60216: LD_ADDR_OWVAR 21
60220: PUSH
60221: LD_INT 0
60223: ST_TO_ADDR
// hc_sex := sex_male ;
60224: LD_ADDR_OWVAR 27
60228: PUSH
60229: LD_INT 1
60231: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
60232: LD_ADDR_OWVAR 28
60236: PUSH
60237: LD_INT 15
60239: ST_TO_ADDR
// hc_gallery :=  ;
60240: LD_ADDR_OWVAR 33
60244: PUSH
60245: LD_STRING 
60247: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60248: LD_ADDR_OWVAR 31
60252: PUSH
60253: LD_INT 0
60255: PPUSH
60256: LD_INT 3
60258: PPUSH
60259: CALL_OW 12
60263: PUSH
60264: LD_INT 0
60266: PPUSH
60267: LD_INT 3
60269: PPUSH
60270: CALL_OW 12
60274: PUSH
60275: LD_INT 0
60277: PUSH
60278: LD_INT 0
60280: PUSH
60281: EMPTY
60282: LIST
60283: LIST
60284: LIST
60285: LIST
60286: ST_TO_ADDR
// end ;
60287: LD_VAR 0 1
60291: RET
// export function PrepareApemanEngineer ( ) ; begin
60292: LD_INT 0
60294: PPUSH
// uc_nation := 0 ;
60295: LD_ADDR_OWVAR 21
60299: PUSH
60300: LD_INT 0
60302: ST_TO_ADDR
// hc_sex := sex_male ;
60303: LD_ADDR_OWVAR 27
60307: PUSH
60308: LD_INT 1
60310: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
60311: LD_ADDR_OWVAR 28
60315: PUSH
60316: LD_INT 16
60318: ST_TO_ADDR
// hc_gallery :=  ;
60319: LD_ADDR_OWVAR 33
60323: PUSH
60324: LD_STRING 
60326: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60327: LD_ADDR_OWVAR 31
60331: PUSH
60332: LD_INT 0
60334: PPUSH
60335: LD_INT 3
60337: PPUSH
60338: CALL_OW 12
60342: PUSH
60343: LD_INT 0
60345: PPUSH
60346: LD_INT 3
60348: PPUSH
60349: CALL_OW 12
60353: PUSH
60354: LD_INT 0
60356: PUSH
60357: LD_INT 0
60359: PUSH
60360: EMPTY
60361: LIST
60362: LIST
60363: LIST
60364: LIST
60365: ST_TO_ADDR
// end ;
60366: LD_VAR 0 1
60370: RET
// export function PrepareApeman ( agressivity ) ; begin
60371: LD_INT 0
60373: PPUSH
// uc_side := 0 ;
60374: LD_ADDR_OWVAR 20
60378: PUSH
60379: LD_INT 0
60381: ST_TO_ADDR
// uc_nation := 0 ;
60382: LD_ADDR_OWVAR 21
60386: PUSH
60387: LD_INT 0
60389: ST_TO_ADDR
// hc_sex := sex_male ;
60390: LD_ADDR_OWVAR 27
60394: PUSH
60395: LD_INT 1
60397: ST_TO_ADDR
// hc_class := class_apeman ;
60398: LD_ADDR_OWVAR 28
60402: PUSH
60403: LD_INT 12
60405: ST_TO_ADDR
// hc_gallery :=  ;
60406: LD_ADDR_OWVAR 33
60410: PUSH
60411: LD_STRING 
60413: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
60414: LD_ADDR_OWVAR 35
60418: PUSH
60419: LD_VAR 0 1
60423: NEG
60424: PPUSH
60425: LD_VAR 0 1
60429: PPUSH
60430: CALL_OW 12
60434: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60435: LD_ADDR_OWVAR 31
60439: PUSH
60440: LD_INT 0
60442: PPUSH
60443: LD_INT 3
60445: PPUSH
60446: CALL_OW 12
60450: PUSH
60451: LD_INT 0
60453: PPUSH
60454: LD_INT 3
60456: PPUSH
60457: CALL_OW 12
60461: PUSH
60462: LD_INT 0
60464: PUSH
60465: LD_INT 0
60467: PUSH
60468: EMPTY
60469: LIST
60470: LIST
60471: LIST
60472: LIST
60473: ST_TO_ADDR
// end ;
60474: LD_VAR 0 2
60478: RET
// export function PrepareTiger ( agressivity ) ; begin
60479: LD_INT 0
60481: PPUSH
// uc_side := 0 ;
60482: LD_ADDR_OWVAR 20
60486: PUSH
60487: LD_INT 0
60489: ST_TO_ADDR
// uc_nation := 0 ;
60490: LD_ADDR_OWVAR 21
60494: PUSH
60495: LD_INT 0
60497: ST_TO_ADDR
// hc_class := class_tiger ;
60498: LD_ADDR_OWVAR 28
60502: PUSH
60503: LD_INT 14
60505: ST_TO_ADDR
// hc_gallery :=  ;
60506: LD_ADDR_OWVAR 33
60510: PUSH
60511: LD_STRING 
60513: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
60514: LD_ADDR_OWVAR 35
60518: PUSH
60519: LD_VAR 0 1
60523: NEG
60524: PPUSH
60525: LD_VAR 0 1
60529: PPUSH
60530: CALL_OW 12
60534: ST_TO_ADDR
// end ;
60535: LD_VAR 0 2
60539: RET
// export function PrepareEnchidna ( ) ; begin
60540: LD_INT 0
60542: PPUSH
// uc_side := 0 ;
60543: LD_ADDR_OWVAR 20
60547: PUSH
60548: LD_INT 0
60550: ST_TO_ADDR
// uc_nation := 0 ;
60551: LD_ADDR_OWVAR 21
60555: PUSH
60556: LD_INT 0
60558: ST_TO_ADDR
// hc_class := class_baggie ;
60559: LD_ADDR_OWVAR 28
60563: PUSH
60564: LD_INT 13
60566: ST_TO_ADDR
// hc_gallery :=  ;
60567: LD_ADDR_OWVAR 33
60571: PUSH
60572: LD_STRING 
60574: ST_TO_ADDR
// end ;
60575: LD_VAR 0 1
60579: RET
// export function PrepareFrog ( ) ; begin
60580: LD_INT 0
60582: PPUSH
// uc_side := 0 ;
60583: LD_ADDR_OWVAR 20
60587: PUSH
60588: LD_INT 0
60590: ST_TO_ADDR
// uc_nation := 0 ;
60591: LD_ADDR_OWVAR 21
60595: PUSH
60596: LD_INT 0
60598: ST_TO_ADDR
// hc_class := class_frog ;
60599: LD_ADDR_OWVAR 28
60603: PUSH
60604: LD_INT 19
60606: ST_TO_ADDR
// hc_gallery :=  ;
60607: LD_ADDR_OWVAR 33
60611: PUSH
60612: LD_STRING 
60614: ST_TO_ADDR
// end ;
60615: LD_VAR 0 1
60619: RET
// export function PrepareFish ( ) ; begin
60620: LD_INT 0
60622: PPUSH
// uc_side := 0 ;
60623: LD_ADDR_OWVAR 20
60627: PUSH
60628: LD_INT 0
60630: ST_TO_ADDR
// uc_nation := 0 ;
60631: LD_ADDR_OWVAR 21
60635: PUSH
60636: LD_INT 0
60638: ST_TO_ADDR
// hc_class := class_fish ;
60639: LD_ADDR_OWVAR 28
60643: PUSH
60644: LD_INT 20
60646: ST_TO_ADDR
// hc_gallery :=  ;
60647: LD_ADDR_OWVAR 33
60651: PUSH
60652: LD_STRING 
60654: ST_TO_ADDR
// end ;
60655: LD_VAR 0 1
60659: RET
// export function PrepareBird ( ) ; begin
60660: LD_INT 0
60662: PPUSH
// uc_side := 0 ;
60663: LD_ADDR_OWVAR 20
60667: PUSH
60668: LD_INT 0
60670: ST_TO_ADDR
// uc_nation := 0 ;
60671: LD_ADDR_OWVAR 21
60675: PUSH
60676: LD_INT 0
60678: ST_TO_ADDR
// hc_class := class_phororhacos ;
60679: LD_ADDR_OWVAR 28
60683: PUSH
60684: LD_INT 18
60686: ST_TO_ADDR
// hc_gallery :=  ;
60687: LD_ADDR_OWVAR 33
60691: PUSH
60692: LD_STRING 
60694: ST_TO_ADDR
// end ;
60695: LD_VAR 0 1
60699: RET
// export function PrepareHorse ( ) ; begin
60700: LD_INT 0
60702: PPUSH
// uc_side := 0 ;
60703: LD_ADDR_OWVAR 20
60707: PUSH
60708: LD_INT 0
60710: ST_TO_ADDR
// uc_nation := 0 ;
60711: LD_ADDR_OWVAR 21
60715: PUSH
60716: LD_INT 0
60718: ST_TO_ADDR
// hc_class := class_horse ;
60719: LD_ADDR_OWVAR 28
60723: PUSH
60724: LD_INT 21
60726: ST_TO_ADDR
// hc_gallery :=  ;
60727: LD_ADDR_OWVAR 33
60731: PUSH
60732: LD_STRING 
60734: ST_TO_ADDR
// end ;
60735: LD_VAR 0 1
60739: RET
// export function PrepareMastodont ( ) ; begin
60740: LD_INT 0
60742: PPUSH
// uc_side := 0 ;
60743: LD_ADDR_OWVAR 20
60747: PUSH
60748: LD_INT 0
60750: ST_TO_ADDR
// uc_nation := 0 ;
60751: LD_ADDR_OWVAR 21
60755: PUSH
60756: LD_INT 0
60758: ST_TO_ADDR
// vc_chassis := class_mastodont ;
60759: LD_ADDR_OWVAR 37
60763: PUSH
60764: LD_INT 31
60766: ST_TO_ADDR
// vc_control := control_rider ;
60767: LD_ADDR_OWVAR 38
60771: PUSH
60772: LD_INT 4
60774: ST_TO_ADDR
// end ;
60775: LD_VAR 0 1
60779: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
60780: LD_INT 0
60782: PPUSH
60783: PPUSH
60784: PPUSH
// uc_side = 0 ;
60785: LD_ADDR_OWVAR 20
60789: PUSH
60790: LD_INT 0
60792: ST_TO_ADDR
// uc_nation = 0 ;
60793: LD_ADDR_OWVAR 21
60797: PUSH
60798: LD_INT 0
60800: ST_TO_ADDR
// InitHc_All ( ) ;
60801: CALL_OW 584
// InitVc ;
60805: CALL_OW 20
// if mastodonts then
60809: LD_VAR 0 6
60813: IFFALSE 60880
// for i = 1 to mastodonts do
60815: LD_ADDR_VAR 0 11
60819: PUSH
60820: DOUBLE
60821: LD_INT 1
60823: DEC
60824: ST_TO_ADDR
60825: LD_VAR 0 6
60829: PUSH
60830: FOR_TO
60831: IFFALSE 60878
// begin vc_chassis := 31 ;
60833: LD_ADDR_OWVAR 37
60837: PUSH
60838: LD_INT 31
60840: ST_TO_ADDR
// vc_control := control_rider ;
60841: LD_ADDR_OWVAR 38
60845: PUSH
60846: LD_INT 4
60848: ST_TO_ADDR
// animal := CreateVehicle ;
60849: LD_ADDR_VAR 0 12
60853: PUSH
60854: CALL_OW 45
60858: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60859: LD_VAR 0 12
60863: PPUSH
60864: LD_VAR 0 8
60868: PPUSH
60869: LD_INT 0
60871: PPUSH
60872: CALL 63008 0 3
// end ;
60876: GO 60830
60878: POP
60879: POP
// if horses then
60880: LD_VAR 0 5
60884: IFFALSE 60951
// for i = 1 to horses do
60886: LD_ADDR_VAR 0 11
60890: PUSH
60891: DOUBLE
60892: LD_INT 1
60894: DEC
60895: ST_TO_ADDR
60896: LD_VAR 0 5
60900: PUSH
60901: FOR_TO
60902: IFFALSE 60949
// begin hc_class := 21 ;
60904: LD_ADDR_OWVAR 28
60908: PUSH
60909: LD_INT 21
60911: ST_TO_ADDR
// hc_gallery :=  ;
60912: LD_ADDR_OWVAR 33
60916: PUSH
60917: LD_STRING 
60919: ST_TO_ADDR
// animal := CreateHuman ;
60920: LD_ADDR_VAR 0 12
60924: PUSH
60925: CALL_OW 44
60929: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60930: LD_VAR 0 12
60934: PPUSH
60935: LD_VAR 0 8
60939: PPUSH
60940: LD_INT 0
60942: PPUSH
60943: CALL 63008 0 3
// end ;
60947: GO 60901
60949: POP
60950: POP
// if birds then
60951: LD_VAR 0 1
60955: IFFALSE 61022
// for i = 1 to birds do
60957: LD_ADDR_VAR 0 11
60961: PUSH
60962: DOUBLE
60963: LD_INT 1
60965: DEC
60966: ST_TO_ADDR
60967: LD_VAR 0 1
60971: PUSH
60972: FOR_TO
60973: IFFALSE 61020
// begin hc_class := 18 ;
60975: LD_ADDR_OWVAR 28
60979: PUSH
60980: LD_INT 18
60982: ST_TO_ADDR
// hc_gallery =  ;
60983: LD_ADDR_OWVAR 33
60987: PUSH
60988: LD_STRING 
60990: ST_TO_ADDR
// animal := CreateHuman ;
60991: LD_ADDR_VAR 0 12
60995: PUSH
60996: CALL_OW 44
61000: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61001: LD_VAR 0 12
61005: PPUSH
61006: LD_VAR 0 8
61010: PPUSH
61011: LD_INT 0
61013: PPUSH
61014: CALL 63008 0 3
// end ;
61018: GO 60972
61020: POP
61021: POP
// if tigers then
61022: LD_VAR 0 2
61026: IFFALSE 61110
// for i = 1 to tigers do
61028: LD_ADDR_VAR 0 11
61032: PUSH
61033: DOUBLE
61034: LD_INT 1
61036: DEC
61037: ST_TO_ADDR
61038: LD_VAR 0 2
61042: PUSH
61043: FOR_TO
61044: IFFALSE 61108
// begin hc_class = class_tiger ;
61046: LD_ADDR_OWVAR 28
61050: PUSH
61051: LD_INT 14
61053: ST_TO_ADDR
// hc_gallery =  ;
61054: LD_ADDR_OWVAR 33
61058: PUSH
61059: LD_STRING 
61061: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
61062: LD_ADDR_OWVAR 35
61066: PUSH
61067: LD_INT 7
61069: NEG
61070: PPUSH
61071: LD_INT 7
61073: PPUSH
61074: CALL_OW 12
61078: ST_TO_ADDR
// animal := CreateHuman ;
61079: LD_ADDR_VAR 0 12
61083: PUSH
61084: CALL_OW 44
61088: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61089: LD_VAR 0 12
61093: PPUSH
61094: LD_VAR 0 8
61098: PPUSH
61099: LD_INT 0
61101: PPUSH
61102: CALL 63008 0 3
// end ;
61106: GO 61043
61108: POP
61109: POP
// if apemans then
61110: LD_VAR 0 3
61114: IFFALSE 61237
// for i = 1 to apemans do
61116: LD_ADDR_VAR 0 11
61120: PUSH
61121: DOUBLE
61122: LD_INT 1
61124: DEC
61125: ST_TO_ADDR
61126: LD_VAR 0 3
61130: PUSH
61131: FOR_TO
61132: IFFALSE 61235
// begin hc_class = class_apeman ;
61134: LD_ADDR_OWVAR 28
61138: PUSH
61139: LD_INT 12
61141: ST_TO_ADDR
// hc_gallery =  ;
61142: LD_ADDR_OWVAR 33
61146: PUSH
61147: LD_STRING 
61149: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
61150: LD_ADDR_OWVAR 35
61154: PUSH
61155: LD_INT 2
61157: NEG
61158: PPUSH
61159: LD_INT 2
61161: PPUSH
61162: CALL_OW 12
61166: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
61167: LD_ADDR_OWVAR 31
61171: PUSH
61172: LD_INT 1
61174: PPUSH
61175: LD_INT 3
61177: PPUSH
61178: CALL_OW 12
61182: PUSH
61183: LD_INT 1
61185: PPUSH
61186: LD_INT 3
61188: PPUSH
61189: CALL_OW 12
61193: PUSH
61194: LD_INT 0
61196: PUSH
61197: LD_INT 0
61199: PUSH
61200: EMPTY
61201: LIST
61202: LIST
61203: LIST
61204: LIST
61205: ST_TO_ADDR
// animal := CreateHuman ;
61206: LD_ADDR_VAR 0 12
61210: PUSH
61211: CALL_OW 44
61215: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61216: LD_VAR 0 12
61220: PPUSH
61221: LD_VAR 0 8
61225: PPUSH
61226: LD_INT 0
61228: PPUSH
61229: CALL 63008 0 3
// end ;
61233: GO 61131
61235: POP
61236: POP
// if enchidnas then
61237: LD_VAR 0 4
61241: IFFALSE 61308
// for i = 1 to enchidnas do
61243: LD_ADDR_VAR 0 11
61247: PUSH
61248: DOUBLE
61249: LD_INT 1
61251: DEC
61252: ST_TO_ADDR
61253: LD_VAR 0 4
61257: PUSH
61258: FOR_TO
61259: IFFALSE 61306
// begin hc_class = 13 ;
61261: LD_ADDR_OWVAR 28
61265: PUSH
61266: LD_INT 13
61268: ST_TO_ADDR
// hc_gallery =  ;
61269: LD_ADDR_OWVAR 33
61273: PUSH
61274: LD_STRING 
61276: ST_TO_ADDR
// animal := CreateHuman ;
61277: LD_ADDR_VAR 0 12
61281: PUSH
61282: CALL_OW 44
61286: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61287: LD_VAR 0 12
61291: PPUSH
61292: LD_VAR 0 8
61296: PPUSH
61297: LD_INT 0
61299: PPUSH
61300: CALL 63008 0 3
// end ;
61304: GO 61258
61306: POP
61307: POP
// if fishes then
61308: LD_VAR 0 7
61312: IFFALSE 61379
// for i = 1 to fishes do
61314: LD_ADDR_VAR 0 11
61318: PUSH
61319: DOUBLE
61320: LD_INT 1
61322: DEC
61323: ST_TO_ADDR
61324: LD_VAR 0 7
61328: PUSH
61329: FOR_TO
61330: IFFALSE 61377
// begin hc_class = 20 ;
61332: LD_ADDR_OWVAR 28
61336: PUSH
61337: LD_INT 20
61339: ST_TO_ADDR
// hc_gallery =  ;
61340: LD_ADDR_OWVAR 33
61344: PUSH
61345: LD_STRING 
61347: ST_TO_ADDR
// animal := CreateHuman ;
61348: LD_ADDR_VAR 0 12
61352: PUSH
61353: CALL_OW 44
61357: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
61358: LD_VAR 0 12
61362: PPUSH
61363: LD_VAR 0 9
61367: PPUSH
61368: LD_INT 0
61370: PPUSH
61371: CALL 63008 0 3
// end ;
61375: GO 61329
61377: POP
61378: POP
// end ;
61379: LD_VAR 0 10
61383: RET
// export function WantHeal ( sci , unit ) ; begin
61384: LD_INT 0
61386: PPUSH
// if GetTaskList ( sci ) > 0 then
61387: LD_VAR 0 1
61391: PPUSH
61392: CALL_OW 437
61396: PUSH
61397: LD_INT 0
61399: GREATER
61400: IFFALSE 61470
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
61402: LD_VAR 0 1
61406: PPUSH
61407: CALL_OW 437
61411: PUSH
61412: LD_INT 1
61414: ARRAY
61415: PUSH
61416: LD_INT 1
61418: ARRAY
61419: PUSH
61420: LD_STRING l
61422: EQUAL
61423: PUSH
61424: LD_VAR 0 1
61428: PPUSH
61429: CALL_OW 437
61433: PUSH
61434: LD_INT 1
61436: ARRAY
61437: PUSH
61438: LD_INT 4
61440: ARRAY
61441: PUSH
61442: LD_VAR 0 2
61446: EQUAL
61447: AND
61448: IFFALSE 61460
// result := true else
61450: LD_ADDR_VAR 0 3
61454: PUSH
61455: LD_INT 1
61457: ST_TO_ADDR
61458: GO 61468
// result := false ;
61460: LD_ADDR_VAR 0 3
61464: PUSH
61465: LD_INT 0
61467: ST_TO_ADDR
// end else
61468: GO 61478
// result := false ;
61470: LD_ADDR_VAR 0 3
61474: PUSH
61475: LD_INT 0
61477: ST_TO_ADDR
// end ;
61478: LD_VAR 0 3
61482: RET
// export function HealTarget ( sci ) ; begin
61483: LD_INT 0
61485: PPUSH
// if not sci then
61486: LD_VAR 0 1
61490: NOT
61491: IFFALSE 61495
// exit ;
61493: GO 61560
// result := 0 ;
61495: LD_ADDR_VAR 0 2
61499: PUSH
61500: LD_INT 0
61502: ST_TO_ADDR
// if GetTaskList ( sci ) then
61503: LD_VAR 0 1
61507: PPUSH
61508: CALL_OW 437
61512: IFFALSE 61560
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
61514: LD_VAR 0 1
61518: PPUSH
61519: CALL_OW 437
61523: PUSH
61524: LD_INT 1
61526: ARRAY
61527: PUSH
61528: LD_INT 1
61530: ARRAY
61531: PUSH
61532: LD_STRING l
61534: EQUAL
61535: IFFALSE 61560
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
61537: LD_ADDR_VAR 0 2
61541: PUSH
61542: LD_VAR 0 1
61546: PPUSH
61547: CALL_OW 437
61551: PUSH
61552: LD_INT 1
61554: ARRAY
61555: PUSH
61556: LD_INT 4
61558: ARRAY
61559: ST_TO_ADDR
// end ;
61560: LD_VAR 0 2
61564: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
61565: LD_INT 0
61567: PPUSH
61568: PPUSH
61569: PPUSH
61570: PPUSH
// if not base_units then
61571: LD_VAR 0 1
61575: NOT
61576: IFFALSE 61580
// exit ;
61578: GO 61667
// result := false ;
61580: LD_ADDR_VAR 0 2
61584: PUSH
61585: LD_INT 0
61587: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
61588: LD_ADDR_VAR 0 5
61592: PUSH
61593: LD_VAR 0 1
61597: PPUSH
61598: LD_INT 21
61600: PUSH
61601: LD_INT 3
61603: PUSH
61604: EMPTY
61605: LIST
61606: LIST
61607: PPUSH
61608: CALL_OW 72
61612: ST_TO_ADDR
// if not tmp then
61613: LD_VAR 0 5
61617: NOT
61618: IFFALSE 61622
// exit ;
61620: GO 61667
// for i in tmp do
61622: LD_ADDR_VAR 0 3
61626: PUSH
61627: LD_VAR 0 5
61631: PUSH
61632: FOR_IN
61633: IFFALSE 61665
// begin result := EnemyInRange ( i , 22 ) ;
61635: LD_ADDR_VAR 0 2
61639: PUSH
61640: LD_VAR 0 3
61644: PPUSH
61645: LD_INT 22
61647: PPUSH
61648: CALL 59254 0 2
61652: ST_TO_ADDR
// if result then
61653: LD_VAR 0 2
61657: IFFALSE 61663
// exit ;
61659: POP
61660: POP
61661: GO 61667
// end ;
61663: GO 61632
61665: POP
61666: POP
// end ;
61667: LD_VAR 0 2
61671: RET
// export function FilterByTag ( units , tag ) ; begin
61672: LD_INT 0
61674: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
61675: LD_ADDR_VAR 0 3
61679: PUSH
61680: LD_VAR 0 1
61684: PPUSH
61685: LD_INT 120
61687: PUSH
61688: LD_VAR 0 2
61692: PUSH
61693: EMPTY
61694: LIST
61695: LIST
61696: PPUSH
61697: CALL_OW 72
61701: ST_TO_ADDR
// end ;
61702: LD_VAR 0 3
61706: RET
// export function IsDriver ( un ) ; begin
61707: LD_INT 0
61709: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
61710: LD_ADDR_VAR 0 2
61714: PUSH
61715: LD_VAR 0 1
61719: PUSH
61720: LD_INT 55
61722: PUSH
61723: EMPTY
61724: LIST
61725: PPUSH
61726: CALL_OW 69
61730: IN
61731: ST_TO_ADDR
// end ;
61732: LD_VAR 0 2
61736: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
61737: LD_INT 0
61739: PPUSH
61740: PPUSH
// list := [ ] ;
61741: LD_ADDR_VAR 0 5
61745: PUSH
61746: EMPTY
61747: ST_TO_ADDR
// case d of 0 :
61748: LD_VAR 0 3
61752: PUSH
61753: LD_INT 0
61755: DOUBLE
61756: EQUAL
61757: IFTRUE 61761
61759: GO 61894
61761: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
61762: LD_ADDR_VAR 0 5
61766: PUSH
61767: LD_VAR 0 1
61771: PUSH
61772: LD_INT 4
61774: MINUS
61775: PUSH
61776: LD_VAR 0 2
61780: PUSH
61781: LD_INT 4
61783: MINUS
61784: PUSH
61785: LD_INT 2
61787: PUSH
61788: EMPTY
61789: LIST
61790: LIST
61791: LIST
61792: PUSH
61793: LD_VAR 0 1
61797: PUSH
61798: LD_INT 3
61800: MINUS
61801: PUSH
61802: LD_VAR 0 2
61806: PUSH
61807: LD_INT 1
61809: PUSH
61810: EMPTY
61811: LIST
61812: LIST
61813: LIST
61814: PUSH
61815: LD_VAR 0 1
61819: PUSH
61820: LD_INT 4
61822: PLUS
61823: PUSH
61824: LD_VAR 0 2
61828: PUSH
61829: LD_INT 4
61831: PUSH
61832: EMPTY
61833: LIST
61834: LIST
61835: LIST
61836: PUSH
61837: LD_VAR 0 1
61841: PUSH
61842: LD_INT 3
61844: PLUS
61845: PUSH
61846: LD_VAR 0 2
61850: PUSH
61851: LD_INT 3
61853: PLUS
61854: PUSH
61855: LD_INT 5
61857: PUSH
61858: EMPTY
61859: LIST
61860: LIST
61861: LIST
61862: PUSH
61863: LD_VAR 0 1
61867: PUSH
61868: LD_VAR 0 2
61872: PUSH
61873: LD_INT 4
61875: PLUS
61876: PUSH
61877: LD_INT 0
61879: PUSH
61880: EMPTY
61881: LIST
61882: LIST
61883: LIST
61884: PUSH
61885: EMPTY
61886: LIST
61887: LIST
61888: LIST
61889: LIST
61890: LIST
61891: ST_TO_ADDR
// end ; 1 :
61892: GO 62592
61894: LD_INT 1
61896: DOUBLE
61897: EQUAL
61898: IFTRUE 61902
61900: GO 62035
61902: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
61903: LD_ADDR_VAR 0 5
61907: PUSH
61908: LD_VAR 0 1
61912: PUSH
61913: LD_VAR 0 2
61917: PUSH
61918: LD_INT 4
61920: MINUS
61921: PUSH
61922: LD_INT 3
61924: PUSH
61925: EMPTY
61926: LIST
61927: LIST
61928: LIST
61929: PUSH
61930: LD_VAR 0 1
61934: PUSH
61935: LD_INT 3
61937: MINUS
61938: PUSH
61939: LD_VAR 0 2
61943: PUSH
61944: LD_INT 3
61946: MINUS
61947: PUSH
61948: LD_INT 2
61950: PUSH
61951: EMPTY
61952: LIST
61953: LIST
61954: LIST
61955: PUSH
61956: LD_VAR 0 1
61960: PUSH
61961: LD_INT 4
61963: MINUS
61964: PUSH
61965: LD_VAR 0 2
61969: PUSH
61970: LD_INT 1
61972: PUSH
61973: EMPTY
61974: LIST
61975: LIST
61976: LIST
61977: PUSH
61978: LD_VAR 0 1
61982: PUSH
61983: LD_VAR 0 2
61987: PUSH
61988: LD_INT 3
61990: PLUS
61991: PUSH
61992: LD_INT 0
61994: PUSH
61995: EMPTY
61996: LIST
61997: LIST
61998: LIST
61999: PUSH
62000: LD_VAR 0 1
62004: PUSH
62005: LD_INT 4
62007: PLUS
62008: PUSH
62009: LD_VAR 0 2
62013: PUSH
62014: LD_INT 4
62016: PLUS
62017: PUSH
62018: LD_INT 5
62020: PUSH
62021: EMPTY
62022: LIST
62023: LIST
62024: LIST
62025: PUSH
62026: EMPTY
62027: LIST
62028: LIST
62029: LIST
62030: LIST
62031: LIST
62032: ST_TO_ADDR
// end ; 2 :
62033: GO 62592
62035: LD_INT 2
62037: DOUBLE
62038: EQUAL
62039: IFTRUE 62043
62041: GO 62172
62043: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
62044: LD_ADDR_VAR 0 5
62048: PUSH
62049: LD_VAR 0 1
62053: PUSH
62054: LD_VAR 0 2
62058: PUSH
62059: LD_INT 3
62061: MINUS
62062: PUSH
62063: LD_INT 3
62065: PUSH
62066: EMPTY
62067: LIST
62068: LIST
62069: LIST
62070: PUSH
62071: LD_VAR 0 1
62075: PUSH
62076: LD_INT 4
62078: PLUS
62079: PUSH
62080: LD_VAR 0 2
62084: PUSH
62085: LD_INT 4
62087: PUSH
62088: EMPTY
62089: LIST
62090: LIST
62091: LIST
62092: PUSH
62093: LD_VAR 0 1
62097: PUSH
62098: LD_VAR 0 2
62102: PUSH
62103: LD_INT 4
62105: PLUS
62106: PUSH
62107: LD_INT 0
62109: PUSH
62110: EMPTY
62111: LIST
62112: LIST
62113: LIST
62114: PUSH
62115: LD_VAR 0 1
62119: PUSH
62120: LD_INT 3
62122: MINUS
62123: PUSH
62124: LD_VAR 0 2
62128: PUSH
62129: LD_INT 1
62131: PUSH
62132: EMPTY
62133: LIST
62134: LIST
62135: LIST
62136: PUSH
62137: LD_VAR 0 1
62141: PUSH
62142: LD_INT 4
62144: MINUS
62145: PUSH
62146: LD_VAR 0 2
62150: PUSH
62151: LD_INT 4
62153: MINUS
62154: PUSH
62155: LD_INT 2
62157: PUSH
62158: EMPTY
62159: LIST
62160: LIST
62161: LIST
62162: PUSH
62163: EMPTY
62164: LIST
62165: LIST
62166: LIST
62167: LIST
62168: LIST
62169: ST_TO_ADDR
// end ; 3 :
62170: GO 62592
62172: LD_INT 3
62174: DOUBLE
62175: EQUAL
62176: IFTRUE 62180
62178: GO 62313
62180: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
62181: LD_ADDR_VAR 0 5
62185: PUSH
62186: LD_VAR 0 1
62190: PUSH
62191: LD_INT 3
62193: PLUS
62194: PUSH
62195: LD_VAR 0 2
62199: PUSH
62200: LD_INT 4
62202: PUSH
62203: EMPTY
62204: LIST
62205: LIST
62206: LIST
62207: PUSH
62208: LD_VAR 0 1
62212: PUSH
62213: LD_INT 4
62215: PLUS
62216: PUSH
62217: LD_VAR 0 2
62221: PUSH
62222: LD_INT 4
62224: PLUS
62225: PUSH
62226: LD_INT 5
62228: PUSH
62229: EMPTY
62230: LIST
62231: LIST
62232: LIST
62233: PUSH
62234: LD_VAR 0 1
62238: PUSH
62239: LD_INT 4
62241: MINUS
62242: PUSH
62243: LD_VAR 0 2
62247: PUSH
62248: LD_INT 1
62250: PUSH
62251: EMPTY
62252: LIST
62253: LIST
62254: LIST
62255: PUSH
62256: LD_VAR 0 1
62260: PUSH
62261: LD_VAR 0 2
62265: PUSH
62266: LD_INT 4
62268: MINUS
62269: PUSH
62270: LD_INT 3
62272: PUSH
62273: EMPTY
62274: LIST
62275: LIST
62276: LIST
62277: PUSH
62278: LD_VAR 0 1
62282: PUSH
62283: LD_INT 3
62285: MINUS
62286: PUSH
62287: LD_VAR 0 2
62291: PUSH
62292: LD_INT 3
62294: MINUS
62295: PUSH
62296: LD_INT 2
62298: PUSH
62299: EMPTY
62300: LIST
62301: LIST
62302: LIST
62303: PUSH
62304: EMPTY
62305: LIST
62306: LIST
62307: LIST
62308: LIST
62309: LIST
62310: ST_TO_ADDR
// end ; 4 :
62311: GO 62592
62313: LD_INT 4
62315: DOUBLE
62316: EQUAL
62317: IFTRUE 62321
62319: GO 62454
62321: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
62322: LD_ADDR_VAR 0 5
62326: PUSH
62327: LD_VAR 0 1
62331: PUSH
62332: LD_VAR 0 2
62336: PUSH
62337: LD_INT 4
62339: PLUS
62340: PUSH
62341: LD_INT 0
62343: PUSH
62344: EMPTY
62345: LIST
62346: LIST
62347: LIST
62348: PUSH
62349: LD_VAR 0 1
62353: PUSH
62354: LD_INT 3
62356: PLUS
62357: PUSH
62358: LD_VAR 0 2
62362: PUSH
62363: LD_INT 3
62365: PLUS
62366: PUSH
62367: LD_INT 5
62369: PUSH
62370: EMPTY
62371: LIST
62372: LIST
62373: LIST
62374: PUSH
62375: LD_VAR 0 1
62379: PUSH
62380: LD_INT 4
62382: PLUS
62383: PUSH
62384: LD_VAR 0 2
62388: PUSH
62389: LD_INT 4
62391: PUSH
62392: EMPTY
62393: LIST
62394: LIST
62395: LIST
62396: PUSH
62397: LD_VAR 0 1
62401: PUSH
62402: LD_VAR 0 2
62406: PUSH
62407: LD_INT 3
62409: MINUS
62410: PUSH
62411: LD_INT 3
62413: PUSH
62414: EMPTY
62415: LIST
62416: LIST
62417: LIST
62418: PUSH
62419: LD_VAR 0 1
62423: PUSH
62424: LD_INT 4
62426: MINUS
62427: PUSH
62428: LD_VAR 0 2
62432: PUSH
62433: LD_INT 4
62435: MINUS
62436: PUSH
62437: LD_INT 2
62439: PUSH
62440: EMPTY
62441: LIST
62442: LIST
62443: LIST
62444: PUSH
62445: EMPTY
62446: LIST
62447: LIST
62448: LIST
62449: LIST
62450: LIST
62451: ST_TO_ADDR
// end ; 5 :
62452: GO 62592
62454: LD_INT 5
62456: DOUBLE
62457: EQUAL
62458: IFTRUE 62462
62460: GO 62591
62462: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
62463: LD_ADDR_VAR 0 5
62467: PUSH
62468: LD_VAR 0 1
62472: PUSH
62473: LD_INT 4
62475: MINUS
62476: PUSH
62477: LD_VAR 0 2
62481: PUSH
62482: LD_INT 1
62484: PUSH
62485: EMPTY
62486: LIST
62487: LIST
62488: LIST
62489: PUSH
62490: LD_VAR 0 1
62494: PUSH
62495: LD_VAR 0 2
62499: PUSH
62500: LD_INT 4
62502: MINUS
62503: PUSH
62504: LD_INT 3
62506: PUSH
62507: EMPTY
62508: LIST
62509: LIST
62510: LIST
62511: PUSH
62512: LD_VAR 0 1
62516: PUSH
62517: LD_INT 4
62519: PLUS
62520: PUSH
62521: LD_VAR 0 2
62525: PUSH
62526: LD_INT 4
62528: PLUS
62529: PUSH
62530: LD_INT 5
62532: PUSH
62533: EMPTY
62534: LIST
62535: LIST
62536: LIST
62537: PUSH
62538: LD_VAR 0 1
62542: PUSH
62543: LD_INT 3
62545: PLUS
62546: PUSH
62547: LD_VAR 0 2
62551: PUSH
62552: LD_INT 4
62554: PUSH
62555: EMPTY
62556: LIST
62557: LIST
62558: LIST
62559: PUSH
62560: LD_VAR 0 1
62564: PUSH
62565: LD_VAR 0 2
62569: PUSH
62570: LD_INT 3
62572: PLUS
62573: PUSH
62574: LD_INT 0
62576: PUSH
62577: EMPTY
62578: LIST
62579: LIST
62580: LIST
62581: PUSH
62582: EMPTY
62583: LIST
62584: LIST
62585: LIST
62586: LIST
62587: LIST
62588: ST_TO_ADDR
// end ; end ;
62589: GO 62592
62591: POP
// result := list ;
62592: LD_ADDR_VAR 0 4
62596: PUSH
62597: LD_VAR 0 5
62601: ST_TO_ADDR
// end ;
62602: LD_VAR 0 4
62606: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
62607: LD_INT 0
62609: PPUSH
62610: PPUSH
62611: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
62612: LD_VAR 0 1
62616: NOT
62617: PUSH
62618: LD_VAR 0 2
62622: PUSH
62623: LD_INT 1
62625: PUSH
62626: LD_INT 2
62628: PUSH
62629: LD_INT 3
62631: PUSH
62632: LD_INT 4
62634: PUSH
62635: EMPTY
62636: LIST
62637: LIST
62638: LIST
62639: LIST
62640: IN
62641: NOT
62642: OR
62643: IFFALSE 62647
// exit ;
62645: GO 62730
// tmp := [ ] ;
62647: LD_ADDR_VAR 0 5
62651: PUSH
62652: EMPTY
62653: ST_TO_ADDR
// for i in units do
62654: LD_ADDR_VAR 0 4
62658: PUSH
62659: LD_VAR 0 1
62663: PUSH
62664: FOR_IN
62665: IFFALSE 62699
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
62667: LD_ADDR_VAR 0 5
62671: PUSH
62672: LD_VAR 0 5
62676: PPUSH
62677: LD_VAR 0 4
62681: PPUSH
62682: LD_VAR 0 2
62686: PPUSH
62687: CALL_OW 259
62691: PPUSH
62692: CALL 64103 0 2
62696: ST_TO_ADDR
62697: GO 62664
62699: POP
62700: POP
// if not tmp then
62701: LD_VAR 0 5
62705: NOT
62706: IFFALSE 62710
// exit ;
62708: GO 62730
// result := SortListByListDesc ( units , tmp ) ;
62710: LD_ADDR_VAR 0 3
62714: PUSH
62715: LD_VAR 0 1
62719: PPUSH
62720: LD_VAR 0 5
62724: PPUSH
62725: CALL_OW 77
62729: ST_TO_ADDR
// end ;
62730: LD_VAR 0 3
62734: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
62735: LD_INT 0
62737: PPUSH
62738: PPUSH
62739: PPUSH
// result := false ;
62740: LD_ADDR_VAR 0 3
62744: PUSH
62745: LD_INT 0
62747: ST_TO_ADDR
// if not building then
62748: LD_VAR 0 2
62752: NOT
62753: IFFALSE 62757
// exit ;
62755: GO 62895
// x := GetX ( building ) ;
62757: LD_ADDR_VAR 0 4
62761: PUSH
62762: LD_VAR 0 2
62766: PPUSH
62767: CALL_OW 250
62771: ST_TO_ADDR
// y := GetY ( building ) ;
62772: LD_ADDR_VAR 0 5
62776: PUSH
62777: LD_VAR 0 2
62781: PPUSH
62782: CALL_OW 251
62786: ST_TO_ADDR
// if not x or not y then
62787: LD_VAR 0 4
62791: NOT
62792: PUSH
62793: LD_VAR 0 5
62797: NOT
62798: OR
62799: IFFALSE 62803
// exit ;
62801: GO 62895
// if GetTaskList ( unit ) then
62803: LD_VAR 0 1
62807: PPUSH
62808: CALL_OW 437
62812: IFFALSE 62895
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62814: LD_STRING e
62816: PUSH
62817: LD_VAR 0 1
62821: PPUSH
62822: CALL_OW 437
62826: PUSH
62827: LD_INT 1
62829: ARRAY
62830: PUSH
62831: LD_INT 1
62833: ARRAY
62834: EQUAL
62835: PUSH
62836: LD_VAR 0 4
62840: PUSH
62841: LD_VAR 0 1
62845: PPUSH
62846: CALL_OW 437
62850: PUSH
62851: LD_INT 1
62853: ARRAY
62854: PUSH
62855: LD_INT 2
62857: ARRAY
62858: EQUAL
62859: AND
62860: PUSH
62861: LD_VAR 0 5
62865: PUSH
62866: LD_VAR 0 1
62870: PPUSH
62871: CALL_OW 437
62875: PUSH
62876: LD_INT 1
62878: ARRAY
62879: PUSH
62880: LD_INT 3
62882: ARRAY
62883: EQUAL
62884: AND
62885: IFFALSE 62895
// result := true end ;
62887: LD_ADDR_VAR 0 3
62891: PUSH
62892: LD_INT 1
62894: ST_TO_ADDR
// end ;
62895: LD_VAR 0 3
62899: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
62900: LD_INT 0
62902: PPUSH
// result := false ;
62903: LD_ADDR_VAR 0 4
62907: PUSH
62908: LD_INT 0
62910: ST_TO_ADDR
// if GetTaskList ( unit ) then
62911: LD_VAR 0 1
62915: PPUSH
62916: CALL_OW 437
62920: IFFALSE 63003
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62922: LD_STRING M
62924: PUSH
62925: LD_VAR 0 1
62929: PPUSH
62930: CALL_OW 437
62934: PUSH
62935: LD_INT 1
62937: ARRAY
62938: PUSH
62939: LD_INT 1
62941: ARRAY
62942: EQUAL
62943: PUSH
62944: LD_VAR 0 2
62948: PUSH
62949: LD_VAR 0 1
62953: PPUSH
62954: CALL_OW 437
62958: PUSH
62959: LD_INT 1
62961: ARRAY
62962: PUSH
62963: LD_INT 2
62965: ARRAY
62966: EQUAL
62967: AND
62968: PUSH
62969: LD_VAR 0 3
62973: PUSH
62974: LD_VAR 0 1
62978: PPUSH
62979: CALL_OW 437
62983: PUSH
62984: LD_INT 1
62986: ARRAY
62987: PUSH
62988: LD_INT 3
62990: ARRAY
62991: EQUAL
62992: AND
62993: IFFALSE 63003
// result := true ;
62995: LD_ADDR_VAR 0 4
62999: PUSH
63000: LD_INT 1
63002: ST_TO_ADDR
// end ; end ;
63003: LD_VAR 0 4
63007: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
63008: LD_INT 0
63010: PPUSH
63011: PPUSH
63012: PPUSH
63013: PPUSH
// if not unit or not area then
63014: LD_VAR 0 1
63018: NOT
63019: PUSH
63020: LD_VAR 0 2
63024: NOT
63025: OR
63026: IFFALSE 63030
// exit ;
63028: GO 63206
// tmp := AreaToList ( area , i ) ;
63030: LD_ADDR_VAR 0 6
63034: PUSH
63035: LD_VAR 0 2
63039: PPUSH
63040: LD_VAR 0 5
63044: PPUSH
63045: CALL_OW 517
63049: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
63050: LD_ADDR_VAR 0 5
63054: PUSH
63055: DOUBLE
63056: LD_INT 1
63058: DEC
63059: ST_TO_ADDR
63060: LD_VAR 0 6
63064: PUSH
63065: LD_INT 1
63067: ARRAY
63068: PUSH
63069: FOR_TO
63070: IFFALSE 63204
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
63072: LD_ADDR_VAR 0 7
63076: PUSH
63077: LD_VAR 0 6
63081: PUSH
63082: LD_INT 1
63084: ARRAY
63085: PUSH
63086: LD_VAR 0 5
63090: ARRAY
63091: PUSH
63092: LD_VAR 0 6
63096: PUSH
63097: LD_INT 2
63099: ARRAY
63100: PUSH
63101: LD_VAR 0 5
63105: ARRAY
63106: PUSH
63107: EMPTY
63108: LIST
63109: LIST
63110: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
63111: LD_INT 92
63113: PUSH
63114: LD_VAR 0 7
63118: PUSH
63119: LD_INT 1
63121: ARRAY
63122: PUSH
63123: LD_VAR 0 7
63127: PUSH
63128: LD_INT 2
63130: ARRAY
63131: PUSH
63132: LD_INT 2
63134: PUSH
63135: EMPTY
63136: LIST
63137: LIST
63138: LIST
63139: LIST
63140: PPUSH
63141: CALL_OW 69
63145: PUSH
63146: LD_INT 0
63148: EQUAL
63149: IFFALSE 63202
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
63151: LD_VAR 0 1
63155: PPUSH
63156: LD_VAR 0 7
63160: PUSH
63161: LD_INT 1
63163: ARRAY
63164: PPUSH
63165: LD_VAR 0 7
63169: PUSH
63170: LD_INT 2
63172: ARRAY
63173: PPUSH
63174: LD_VAR 0 3
63178: PPUSH
63179: CALL_OW 48
// result := IsPlaced ( unit ) ;
63183: LD_ADDR_VAR 0 4
63187: PUSH
63188: LD_VAR 0 1
63192: PPUSH
63193: CALL_OW 305
63197: ST_TO_ADDR
// exit ;
63198: POP
63199: POP
63200: GO 63206
// end ; end ;
63202: GO 63069
63204: POP
63205: POP
// end ;
63206: LD_VAR 0 4
63210: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
63211: LD_INT 0
63213: PPUSH
63214: PPUSH
63215: PPUSH
// if not side or side > 8 then
63216: LD_VAR 0 1
63220: NOT
63221: PUSH
63222: LD_VAR 0 1
63226: PUSH
63227: LD_INT 8
63229: GREATER
63230: OR
63231: IFFALSE 63235
// exit ;
63233: GO 63422
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
63235: LD_ADDR_VAR 0 4
63239: PUSH
63240: LD_INT 22
63242: PUSH
63243: LD_VAR 0 1
63247: PUSH
63248: EMPTY
63249: LIST
63250: LIST
63251: PUSH
63252: LD_INT 21
63254: PUSH
63255: LD_INT 3
63257: PUSH
63258: EMPTY
63259: LIST
63260: LIST
63261: PUSH
63262: EMPTY
63263: LIST
63264: LIST
63265: PPUSH
63266: CALL_OW 69
63270: ST_TO_ADDR
// if not tmp then
63271: LD_VAR 0 4
63275: NOT
63276: IFFALSE 63280
// exit ;
63278: GO 63422
// enable_addtolog := true ;
63280: LD_ADDR_OWVAR 81
63284: PUSH
63285: LD_INT 1
63287: ST_TO_ADDR
// AddToLog ( [ ) ;
63288: LD_STRING [
63290: PPUSH
63291: CALL_OW 561
// for i in tmp do
63295: LD_ADDR_VAR 0 3
63299: PUSH
63300: LD_VAR 0 4
63304: PUSH
63305: FOR_IN
63306: IFFALSE 63413
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
63308: LD_STRING [
63310: PUSH
63311: LD_VAR 0 3
63315: PPUSH
63316: CALL_OW 266
63320: STR
63321: PUSH
63322: LD_STRING , 
63324: STR
63325: PUSH
63326: LD_VAR 0 3
63330: PPUSH
63331: CALL_OW 250
63335: STR
63336: PUSH
63337: LD_STRING , 
63339: STR
63340: PUSH
63341: LD_VAR 0 3
63345: PPUSH
63346: CALL_OW 251
63350: STR
63351: PUSH
63352: LD_STRING , 
63354: STR
63355: PUSH
63356: LD_VAR 0 3
63360: PPUSH
63361: CALL_OW 254
63365: STR
63366: PUSH
63367: LD_STRING , 
63369: STR
63370: PUSH
63371: LD_VAR 0 3
63375: PPUSH
63376: LD_INT 1
63378: PPUSH
63379: CALL_OW 268
63383: STR
63384: PUSH
63385: LD_STRING , 
63387: STR
63388: PUSH
63389: LD_VAR 0 3
63393: PPUSH
63394: LD_INT 2
63396: PPUSH
63397: CALL_OW 268
63401: STR
63402: PUSH
63403: LD_STRING ],
63405: STR
63406: PPUSH
63407: CALL_OW 561
// end ;
63411: GO 63305
63413: POP
63414: POP
// AddToLog ( ]; ) ;
63415: LD_STRING ];
63417: PPUSH
63418: CALL_OW 561
// end ;
63422: LD_VAR 0 2
63426: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
63427: LD_INT 0
63429: PPUSH
63430: PPUSH
63431: PPUSH
63432: PPUSH
63433: PPUSH
// if not area or not rate or not max then
63434: LD_VAR 0 1
63438: NOT
63439: PUSH
63440: LD_VAR 0 2
63444: NOT
63445: OR
63446: PUSH
63447: LD_VAR 0 4
63451: NOT
63452: OR
63453: IFFALSE 63457
// exit ;
63455: GO 63646
// while 1 do
63457: LD_INT 1
63459: IFFALSE 63646
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
63461: LD_ADDR_VAR 0 9
63465: PUSH
63466: LD_VAR 0 1
63470: PPUSH
63471: LD_INT 1
63473: PPUSH
63474: CALL_OW 287
63478: PUSH
63479: LD_INT 10
63481: MUL
63482: ST_TO_ADDR
// r := rate / 10 ;
63483: LD_ADDR_VAR 0 7
63487: PUSH
63488: LD_VAR 0 2
63492: PUSH
63493: LD_INT 10
63495: DIVREAL
63496: ST_TO_ADDR
// time := 1 1$00 ;
63497: LD_ADDR_VAR 0 8
63501: PUSH
63502: LD_INT 2100
63504: ST_TO_ADDR
// if amount < min then
63505: LD_VAR 0 9
63509: PUSH
63510: LD_VAR 0 3
63514: LESS
63515: IFFALSE 63533
// r := r * 2 else
63517: LD_ADDR_VAR 0 7
63521: PUSH
63522: LD_VAR 0 7
63526: PUSH
63527: LD_INT 2
63529: MUL
63530: ST_TO_ADDR
63531: GO 63559
// if amount > max then
63533: LD_VAR 0 9
63537: PUSH
63538: LD_VAR 0 4
63542: GREATER
63543: IFFALSE 63559
// r := r / 2 ;
63545: LD_ADDR_VAR 0 7
63549: PUSH
63550: LD_VAR 0 7
63554: PUSH
63555: LD_INT 2
63557: DIVREAL
63558: ST_TO_ADDR
// time := time / r ;
63559: LD_ADDR_VAR 0 8
63563: PUSH
63564: LD_VAR 0 8
63568: PUSH
63569: LD_VAR 0 7
63573: DIVREAL
63574: ST_TO_ADDR
// if time < 0 then
63575: LD_VAR 0 8
63579: PUSH
63580: LD_INT 0
63582: LESS
63583: IFFALSE 63600
// time := time * - 1 ;
63585: LD_ADDR_VAR 0 8
63589: PUSH
63590: LD_VAR 0 8
63594: PUSH
63595: LD_INT 1
63597: NEG
63598: MUL
63599: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
63600: LD_VAR 0 8
63604: PUSH
63605: LD_INT 35
63607: PPUSH
63608: LD_INT 875
63610: PPUSH
63611: CALL_OW 12
63615: PLUS
63616: PPUSH
63617: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
63621: LD_INT 1
63623: PPUSH
63624: LD_INT 5
63626: PPUSH
63627: CALL_OW 12
63631: PPUSH
63632: LD_VAR 0 1
63636: PPUSH
63637: LD_INT 1
63639: PPUSH
63640: CALL_OW 55
// end ;
63644: GO 63457
// end ;
63646: LD_VAR 0 5
63650: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
63651: LD_INT 0
63653: PPUSH
63654: PPUSH
63655: PPUSH
63656: PPUSH
63657: PPUSH
63658: PPUSH
63659: PPUSH
63660: PPUSH
// if not turrets or not factories then
63661: LD_VAR 0 1
63665: NOT
63666: PUSH
63667: LD_VAR 0 2
63671: NOT
63672: OR
63673: IFFALSE 63677
// exit ;
63675: GO 63984
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
63677: LD_ADDR_VAR 0 10
63681: PUSH
63682: LD_INT 5
63684: PUSH
63685: LD_INT 6
63687: PUSH
63688: EMPTY
63689: LIST
63690: LIST
63691: PUSH
63692: LD_INT 2
63694: PUSH
63695: LD_INT 4
63697: PUSH
63698: EMPTY
63699: LIST
63700: LIST
63701: PUSH
63702: LD_INT 3
63704: PUSH
63705: LD_INT 5
63707: PUSH
63708: EMPTY
63709: LIST
63710: LIST
63711: PUSH
63712: EMPTY
63713: LIST
63714: LIST
63715: LIST
63716: PUSH
63717: LD_INT 24
63719: PUSH
63720: LD_INT 25
63722: PUSH
63723: EMPTY
63724: LIST
63725: LIST
63726: PUSH
63727: LD_INT 23
63729: PUSH
63730: LD_INT 27
63732: PUSH
63733: EMPTY
63734: LIST
63735: LIST
63736: PUSH
63737: EMPTY
63738: LIST
63739: LIST
63740: PUSH
63741: LD_INT 42
63743: PUSH
63744: LD_INT 43
63746: PUSH
63747: EMPTY
63748: LIST
63749: LIST
63750: PUSH
63751: LD_INT 44
63753: PUSH
63754: LD_INT 46
63756: PUSH
63757: EMPTY
63758: LIST
63759: LIST
63760: PUSH
63761: LD_INT 45
63763: PUSH
63764: LD_INT 47
63766: PUSH
63767: EMPTY
63768: LIST
63769: LIST
63770: PUSH
63771: EMPTY
63772: LIST
63773: LIST
63774: LIST
63775: PUSH
63776: EMPTY
63777: LIST
63778: LIST
63779: LIST
63780: ST_TO_ADDR
// result := [ ] ;
63781: LD_ADDR_VAR 0 3
63785: PUSH
63786: EMPTY
63787: ST_TO_ADDR
// for i in turrets do
63788: LD_ADDR_VAR 0 4
63792: PUSH
63793: LD_VAR 0 1
63797: PUSH
63798: FOR_IN
63799: IFFALSE 63982
// begin nat := GetNation ( i ) ;
63801: LD_ADDR_VAR 0 7
63805: PUSH
63806: LD_VAR 0 4
63810: PPUSH
63811: CALL_OW 248
63815: ST_TO_ADDR
// weapon := 0 ;
63816: LD_ADDR_VAR 0 8
63820: PUSH
63821: LD_INT 0
63823: ST_TO_ADDR
// if not nat then
63824: LD_VAR 0 7
63828: NOT
63829: IFFALSE 63833
// continue ;
63831: GO 63798
// for j in list [ nat ] do
63833: LD_ADDR_VAR 0 5
63837: PUSH
63838: LD_VAR 0 10
63842: PUSH
63843: LD_VAR 0 7
63847: ARRAY
63848: PUSH
63849: FOR_IN
63850: IFFALSE 63891
// if GetBWeapon ( i ) = j [ 1 ] then
63852: LD_VAR 0 4
63856: PPUSH
63857: CALL_OW 269
63861: PUSH
63862: LD_VAR 0 5
63866: PUSH
63867: LD_INT 1
63869: ARRAY
63870: EQUAL
63871: IFFALSE 63889
// begin weapon := j [ 2 ] ;
63873: LD_ADDR_VAR 0 8
63877: PUSH
63878: LD_VAR 0 5
63882: PUSH
63883: LD_INT 2
63885: ARRAY
63886: ST_TO_ADDR
// break ;
63887: GO 63891
// end ;
63889: GO 63849
63891: POP
63892: POP
// if not weapon then
63893: LD_VAR 0 8
63897: NOT
63898: IFFALSE 63902
// continue ;
63900: GO 63798
// for k in factories do
63902: LD_ADDR_VAR 0 6
63906: PUSH
63907: LD_VAR 0 2
63911: PUSH
63912: FOR_IN
63913: IFFALSE 63978
// begin weapons := AvailableWeaponList ( k ) ;
63915: LD_ADDR_VAR 0 9
63919: PUSH
63920: LD_VAR 0 6
63924: PPUSH
63925: CALL_OW 478
63929: ST_TO_ADDR
// if not weapons then
63930: LD_VAR 0 9
63934: NOT
63935: IFFALSE 63939
// continue ;
63937: GO 63912
// if weapon in weapons then
63939: LD_VAR 0 8
63943: PUSH
63944: LD_VAR 0 9
63948: IN
63949: IFFALSE 63976
// begin result := [ i , weapon ] ;
63951: LD_ADDR_VAR 0 3
63955: PUSH
63956: LD_VAR 0 4
63960: PUSH
63961: LD_VAR 0 8
63965: PUSH
63966: EMPTY
63967: LIST
63968: LIST
63969: ST_TO_ADDR
// exit ;
63970: POP
63971: POP
63972: POP
63973: POP
63974: GO 63984
// end ; end ;
63976: GO 63912
63978: POP
63979: POP
// end ;
63980: GO 63798
63982: POP
63983: POP
// end ;
63984: LD_VAR 0 3
63988: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
63989: LD_INT 0
63991: PPUSH
// if not side or side > 8 then
63992: LD_VAR 0 3
63996: NOT
63997: PUSH
63998: LD_VAR 0 3
64002: PUSH
64003: LD_INT 8
64005: GREATER
64006: OR
64007: IFFALSE 64011
// exit ;
64009: GO 64070
// if not range then
64011: LD_VAR 0 4
64015: NOT
64016: IFFALSE 64027
// range := - 12 ;
64018: LD_ADDR_VAR 0 4
64022: PUSH
64023: LD_INT 12
64025: NEG
64026: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
64027: LD_VAR 0 1
64031: PPUSH
64032: LD_VAR 0 2
64036: PPUSH
64037: LD_VAR 0 3
64041: PPUSH
64042: LD_VAR 0 4
64046: PPUSH
64047: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
64051: LD_VAR 0 1
64055: PPUSH
64056: LD_VAR 0 2
64060: PPUSH
64061: LD_VAR 0 3
64065: PPUSH
64066: CALL_OW 331
// end ;
64070: LD_VAR 0 5
64074: RET
// export function Video ( mode ) ; begin
64075: LD_INT 0
64077: PPUSH
// ingame_video = mode ;
64078: LD_ADDR_OWVAR 52
64082: PUSH
64083: LD_VAR 0 1
64087: ST_TO_ADDR
// interface_hidden = mode ;
64088: LD_ADDR_OWVAR 54
64092: PUSH
64093: LD_VAR 0 1
64097: ST_TO_ADDR
// end ;
64098: LD_VAR 0 2
64102: RET
// export function Join ( array , element ) ; begin
64103: LD_INT 0
64105: PPUSH
// result := Replace ( array , array + 1 , element ) ;
64106: LD_ADDR_VAR 0 3
64110: PUSH
64111: LD_VAR 0 1
64115: PPUSH
64116: LD_VAR 0 1
64120: PUSH
64121: LD_INT 1
64123: PLUS
64124: PPUSH
64125: LD_VAR 0 2
64129: PPUSH
64130: CALL_OW 1
64134: ST_TO_ADDR
// end ;
64135: LD_VAR 0 3
64139: RET
// export function JoinUnion ( array , element ) ; begin
64140: LD_INT 0
64142: PPUSH
// result := array union element ;
64143: LD_ADDR_VAR 0 3
64147: PUSH
64148: LD_VAR 0 1
64152: PUSH
64153: LD_VAR 0 2
64157: UNION
64158: ST_TO_ADDR
// end ;
64159: LD_VAR 0 3
64163: RET
// export function GetBehemoths ( side ) ; begin
64164: LD_INT 0
64166: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
64167: LD_ADDR_VAR 0 2
64171: PUSH
64172: LD_INT 22
64174: PUSH
64175: LD_VAR 0 1
64179: PUSH
64180: EMPTY
64181: LIST
64182: LIST
64183: PUSH
64184: LD_INT 31
64186: PUSH
64187: LD_INT 25
64189: PUSH
64190: EMPTY
64191: LIST
64192: LIST
64193: PUSH
64194: EMPTY
64195: LIST
64196: LIST
64197: PPUSH
64198: CALL_OW 69
64202: ST_TO_ADDR
// end ;
64203: LD_VAR 0 2
64207: RET
// export function Shuffle ( array ) ; var i , index ; begin
64208: LD_INT 0
64210: PPUSH
64211: PPUSH
64212: PPUSH
// result := [ ] ;
64213: LD_ADDR_VAR 0 2
64217: PUSH
64218: EMPTY
64219: ST_TO_ADDR
// if not array then
64220: LD_VAR 0 1
64224: NOT
64225: IFFALSE 64229
// exit ;
64227: GO 64328
// Randomize ;
64229: CALL_OW 10
// for i = array downto 1 do
64233: LD_ADDR_VAR 0 3
64237: PUSH
64238: DOUBLE
64239: LD_VAR 0 1
64243: INC
64244: ST_TO_ADDR
64245: LD_INT 1
64247: PUSH
64248: FOR_DOWNTO
64249: IFFALSE 64326
// begin index := rand ( 1 , array ) ;
64251: LD_ADDR_VAR 0 4
64255: PUSH
64256: LD_INT 1
64258: PPUSH
64259: LD_VAR 0 1
64263: PPUSH
64264: CALL_OW 12
64268: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
64269: LD_ADDR_VAR 0 2
64273: PUSH
64274: LD_VAR 0 2
64278: PPUSH
64279: LD_VAR 0 2
64283: PUSH
64284: LD_INT 1
64286: PLUS
64287: PPUSH
64288: LD_VAR 0 1
64292: PUSH
64293: LD_VAR 0 4
64297: ARRAY
64298: PPUSH
64299: CALL_OW 2
64303: ST_TO_ADDR
// array := Delete ( array , index ) ;
64304: LD_ADDR_VAR 0 1
64308: PUSH
64309: LD_VAR 0 1
64313: PPUSH
64314: LD_VAR 0 4
64318: PPUSH
64319: CALL_OW 3
64323: ST_TO_ADDR
// end ;
64324: GO 64248
64326: POP
64327: POP
// end ;
64328: LD_VAR 0 2
64332: RET
// export function GetBaseMaterials ( base ) ; begin
64333: LD_INT 0
64335: PPUSH
// result := [ 0 , 0 , 0 ] ;
64336: LD_ADDR_VAR 0 2
64340: PUSH
64341: LD_INT 0
64343: PUSH
64344: LD_INT 0
64346: PUSH
64347: LD_INT 0
64349: PUSH
64350: EMPTY
64351: LIST
64352: LIST
64353: LIST
64354: ST_TO_ADDR
// if not base then
64355: LD_VAR 0 1
64359: NOT
64360: IFFALSE 64364
// exit ;
64362: GO 64413
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
64364: LD_ADDR_VAR 0 2
64368: PUSH
64369: LD_VAR 0 1
64373: PPUSH
64374: LD_INT 1
64376: PPUSH
64377: CALL_OW 275
64381: PUSH
64382: LD_VAR 0 1
64386: PPUSH
64387: LD_INT 2
64389: PPUSH
64390: CALL_OW 275
64394: PUSH
64395: LD_VAR 0 1
64399: PPUSH
64400: LD_INT 3
64402: PPUSH
64403: CALL_OW 275
64407: PUSH
64408: EMPTY
64409: LIST
64410: LIST
64411: LIST
64412: ST_TO_ADDR
// end ;
64413: LD_VAR 0 2
64417: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
64418: LD_INT 0
64420: PPUSH
64421: PPUSH
// result := array ;
64422: LD_ADDR_VAR 0 3
64426: PUSH
64427: LD_VAR 0 1
64431: ST_TO_ADDR
// if size >= result then
64432: LD_VAR 0 2
64436: PUSH
64437: LD_VAR 0 3
64441: GREATEREQUAL
64442: IFFALSE 64446
// exit ;
64444: GO 64496
// if size then
64446: LD_VAR 0 2
64450: IFFALSE 64496
// for i := array downto size do
64452: LD_ADDR_VAR 0 4
64456: PUSH
64457: DOUBLE
64458: LD_VAR 0 1
64462: INC
64463: ST_TO_ADDR
64464: LD_VAR 0 2
64468: PUSH
64469: FOR_DOWNTO
64470: IFFALSE 64494
// result := Delete ( result , result ) ;
64472: LD_ADDR_VAR 0 3
64476: PUSH
64477: LD_VAR 0 3
64481: PPUSH
64482: LD_VAR 0 3
64486: PPUSH
64487: CALL_OW 3
64491: ST_TO_ADDR
64492: GO 64469
64494: POP
64495: POP
// end ;
64496: LD_VAR 0 3
64500: RET
// export function ComExit ( unit ) ; var tmp ; begin
64501: LD_INT 0
64503: PPUSH
64504: PPUSH
// if not IsInUnit ( unit ) then
64505: LD_VAR 0 1
64509: PPUSH
64510: CALL_OW 310
64514: NOT
64515: IFFALSE 64519
// exit ;
64517: GO 64579
// tmp := IsInUnit ( unit ) ;
64519: LD_ADDR_VAR 0 3
64523: PUSH
64524: LD_VAR 0 1
64528: PPUSH
64529: CALL_OW 310
64533: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
64534: LD_VAR 0 3
64538: PPUSH
64539: CALL_OW 247
64543: PUSH
64544: LD_INT 2
64546: EQUAL
64547: IFFALSE 64560
// ComExitVehicle ( unit ) else
64549: LD_VAR 0 1
64553: PPUSH
64554: CALL_OW 121
64558: GO 64569
// ComExitBuilding ( unit ) ;
64560: LD_VAR 0 1
64564: PPUSH
64565: CALL_OW 122
// result := tmp ;
64569: LD_ADDR_VAR 0 2
64573: PUSH
64574: LD_VAR 0 3
64578: ST_TO_ADDR
// end ;
64579: LD_VAR 0 2
64583: RET
// export function ComExitAll ( units ) ; var i ; begin
64584: LD_INT 0
64586: PPUSH
64587: PPUSH
// if not units then
64588: LD_VAR 0 1
64592: NOT
64593: IFFALSE 64597
// exit ;
64595: GO 64623
// for i in units do
64597: LD_ADDR_VAR 0 3
64601: PUSH
64602: LD_VAR 0 1
64606: PUSH
64607: FOR_IN
64608: IFFALSE 64621
// ComExit ( i ) ;
64610: LD_VAR 0 3
64614: PPUSH
64615: CALL 64501 0 1
64619: GO 64607
64621: POP
64622: POP
// end ;
64623: LD_VAR 0 2
64627: RET
// export function ResetHc ; begin
64628: LD_INT 0
64630: PPUSH
// InitHc ;
64631: CALL_OW 19
// hc_importance := 0 ;
64635: LD_ADDR_OWVAR 32
64639: PUSH
64640: LD_INT 0
64642: ST_TO_ADDR
// end ;
64643: LD_VAR 0 1
64647: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
64648: LD_INT 0
64650: PPUSH
64651: PPUSH
64652: PPUSH
// _x := ( x1 + x2 ) div 2 ;
64653: LD_ADDR_VAR 0 6
64657: PUSH
64658: LD_VAR 0 1
64662: PUSH
64663: LD_VAR 0 3
64667: PLUS
64668: PUSH
64669: LD_INT 2
64671: DIV
64672: ST_TO_ADDR
// if _x < 0 then
64673: LD_VAR 0 6
64677: PUSH
64678: LD_INT 0
64680: LESS
64681: IFFALSE 64698
// _x := _x * - 1 ;
64683: LD_ADDR_VAR 0 6
64687: PUSH
64688: LD_VAR 0 6
64692: PUSH
64693: LD_INT 1
64695: NEG
64696: MUL
64697: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
64698: LD_ADDR_VAR 0 7
64702: PUSH
64703: LD_VAR 0 2
64707: PUSH
64708: LD_VAR 0 4
64712: PLUS
64713: PUSH
64714: LD_INT 2
64716: DIV
64717: ST_TO_ADDR
// if _y < 0 then
64718: LD_VAR 0 7
64722: PUSH
64723: LD_INT 0
64725: LESS
64726: IFFALSE 64743
// _y := _y * - 1 ;
64728: LD_ADDR_VAR 0 7
64732: PUSH
64733: LD_VAR 0 7
64737: PUSH
64738: LD_INT 1
64740: NEG
64741: MUL
64742: ST_TO_ADDR
// result := [ _x , _y ] ;
64743: LD_ADDR_VAR 0 5
64747: PUSH
64748: LD_VAR 0 6
64752: PUSH
64753: LD_VAR 0 7
64757: PUSH
64758: EMPTY
64759: LIST
64760: LIST
64761: ST_TO_ADDR
// end ;
64762: LD_VAR 0 5
64766: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
64767: LD_INT 0
64769: PPUSH
64770: PPUSH
64771: PPUSH
64772: PPUSH
// task := GetTaskList ( unit ) ;
64773: LD_ADDR_VAR 0 7
64777: PUSH
64778: LD_VAR 0 1
64782: PPUSH
64783: CALL_OW 437
64787: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
64788: LD_VAR 0 7
64792: NOT
64793: PUSH
64794: LD_VAR 0 1
64798: PPUSH
64799: LD_VAR 0 2
64803: PPUSH
64804: CALL_OW 308
64808: NOT
64809: AND
64810: IFFALSE 64814
// exit ;
64812: GO 64932
// if IsInArea ( unit , area ) then
64814: LD_VAR 0 1
64818: PPUSH
64819: LD_VAR 0 2
64823: PPUSH
64824: CALL_OW 308
64828: IFFALSE 64846
// begin ComMoveToArea ( unit , goAway ) ;
64830: LD_VAR 0 1
64834: PPUSH
64835: LD_VAR 0 3
64839: PPUSH
64840: CALL_OW 113
// exit ;
64844: GO 64932
// end ; if task [ 1 ] [ 1 ] <> M then
64846: LD_VAR 0 7
64850: PUSH
64851: LD_INT 1
64853: ARRAY
64854: PUSH
64855: LD_INT 1
64857: ARRAY
64858: PUSH
64859: LD_STRING M
64861: NONEQUAL
64862: IFFALSE 64866
// exit ;
64864: GO 64932
// x := task [ 1 ] [ 2 ] ;
64866: LD_ADDR_VAR 0 5
64870: PUSH
64871: LD_VAR 0 7
64875: PUSH
64876: LD_INT 1
64878: ARRAY
64879: PUSH
64880: LD_INT 2
64882: ARRAY
64883: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
64884: LD_ADDR_VAR 0 6
64888: PUSH
64889: LD_VAR 0 7
64893: PUSH
64894: LD_INT 1
64896: ARRAY
64897: PUSH
64898: LD_INT 3
64900: ARRAY
64901: ST_TO_ADDR
// if InArea ( x , y , area ) then
64902: LD_VAR 0 5
64906: PPUSH
64907: LD_VAR 0 6
64911: PPUSH
64912: LD_VAR 0 2
64916: PPUSH
64917: CALL_OW 309
64921: IFFALSE 64932
// ComStop ( unit ) ;
64923: LD_VAR 0 1
64927: PPUSH
64928: CALL_OW 141
// end ;
64932: LD_VAR 0 4
64936: RET
// export function Abs ( value ) ; begin
64937: LD_INT 0
64939: PPUSH
// result := value ;
64940: LD_ADDR_VAR 0 2
64944: PUSH
64945: LD_VAR 0 1
64949: ST_TO_ADDR
// if value < 0 then
64950: LD_VAR 0 1
64954: PUSH
64955: LD_INT 0
64957: LESS
64958: IFFALSE 64975
// result := value * - 1 ;
64960: LD_ADDR_VAR 0 2
64964: PUSH
64965: LD_VAR 0 1
64969: PUSH
64970: LD_INT 1
64972: NEG
64973: MUL
64974: ST_TO_ADDR
// end ;
64975: LD_VAR 0 2
64979: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
64980: LD_INT 0
64982: PPUSH
64983: PPUSH
64984: PPUSH
64985: PPUSH
64986: PPUSH
64987: PPUSH
64988: PPUSH
64989: PPUSH
// if not unit or not building then
64990: LD_VAR 0 1
64994: NOT
64995: PUSH
64996: LD_VAR 0 2
65000: NOT
65001: OR
65002: IFFALSE 65006
// exit ;
65004: GO 65232
// x := GetX ( building ) ;
65006: LD_ADDR_VAR 0 4
65010: PUSH
65011: LD_VAR 0 2
65015: PPUSH
65016: CALL_OW 250
65020: ST_TO_ADDR
// y := GetY ( building ) ;
65021: LD_ADDR_VAR 0 6
65025: PUSH
65026: LD_VAR 0 2
65030: PPUSH
65031: CALL_OW 251
65035: ST_TO_ADDR
// d := GetDir ( building ) ;
65036: LD_ADDR_VAR 0 8
65040: PUSH
65041: LD_VAR 0 2
65045: PPUSH
65046: CALL_OW 254
65050: ST_TO_ADDR
// r := 4 ;
65051: LD_ADDR_VAR 0 9
65055: PUSH
65056: LD_INT 4
65058: ST_TO_ADDR
// for i := 1 to 5 do
65059: LD_ADDR_VAR 0 10
65063: PUSH
65064: DOUBLE
65065: LD_INT 1
65067: DEC
65068: ST_TO_ADDR
65069: LD_INT 5
65071: PUSH
65072: FOR_TO
65073: IFFALSE 65230
// begin _x := ShiftX ( x , d , r + i ) ;
65075: LD_ADDR_VAR 0 5
65079: PUSH
65080: LD_VAR 0 4
65084: PPUSH
65085: LD_VAR 0 8
65089: PPUSH
65090: LD_VAR 0 9
65094: PUSH
65095: LD_VAR 0 10
65099: PLUS
65100: PPUSH
65101: CALL_OW 272
65105: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
65106: LD_ADDR_VAR 0 7
65110: PUSH
65111: LD_VAR 0 6
65115: PPUSH
65116: LD_VAR 0 8
65120: PPUSH
65121: LD_VAR 0 9
65125: PUSH
65126: LD_VAR 0 10
65130: PLUS
65131: PPUSH
65132: CALL_OW 273
65136: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
65137: LD_VAR 0 5
65141: PPUSH
65142: LD_VAR 0 7
65146: PPUSH
65147: CALL_OW 488
65151: PUSH
65152: LD_VAR 0 5
65156: PPUSH
65157: LD_VAR 0 7
65161: PPUSH
65162: CALL_OW 428
65166: PPUSH
65167: CALL_OW 247
65171: PUSH
65172: LD_INT 3
65174: PUSH
65175: LD_INT 2
65177: PUSH
65178: EMPTY
65179: LIST
65180: LIST
65181: IN
65182: NOT
65183: AND
65184: IFFALSE 65228
// begin ComMoveXY ( unit , _x , _y ) ;
65186: LD_VAR 0 1
65190: PPUSH
65191: LD_VAR 0 5
65195: PPUSH
65196: LD_VAR 0 7
65200: PPUSH
65201: CALL_OW 111
// result := [ _x , _y ] ;
65205: LD_ADDR_VAR 0 3
65209: PUSH
65210: LD_VAR 0 5
65214: PUSH
65215: LD_VAR 0 7
65219: PUSH
65220: EMPTY
65221: LIST
65222: LIST
65223: ST_TO_ADDR
// exit ;
65224: POP
65225: POP
65226: GO 65232
// end ; end ;
65228: GO 65072
65230: POP
65231: POP
// end ;
65232: LD_VAR 0 3
65236: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
65237: LD_INT 0
65239: PPUSH
65240: PPUSH
65241: PPUSH
// result := 0 ;
65242: LD_ADDR_VAR 0 3
65246: PUSH
65247: LD_INT 0
65249: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
65250: LD_VAR 0 1
65254: PUSH
65255: LD_INT 0
65257: LESS
65258: PUSH
65259: LD_VAR 0 1
65263: PUSH
65264: LD_INT 8
65266: GREATER
65267: OR
65268: PUSH
65269: LD_VAR 0 2
65273: PUSH
65274: LD_INT 0
65276: LESS
65277: OR
65278: PUSH
65279: LD_VAR 0 2
65283: PUSH
65284: LD_INT 8
65286: GREATER
65287: OR
65288: IFFALSE 65292
// exit ;
65290: GO 65367
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
65292: LD_ADDR_VAR 0 4
65296: PUSH
65297: LD_INT 22
65299: PUSH
65300: LD_VAR 0 2
65304: PUSH
65305: EMPTY
65306: LIST
65307: LIST
65308: PPUSH
65309: CALL_OW 69
65313: PUSH
65314: FOR_IN
65315: IFFALSE 65365
// begin un := UnitShoot ( i ) ;
65317: LD_ADDR_VAR 0 5
65321: PUSH
65322: LD_VAR 0 4
65326: PPUSH
65327: CALL_OW 504
65331: ST_TO_ADDR
// if GetSide ( un ) = side1 then
65332: LD_VAR 0 5
65336: PPUSH
65337: CALL_OW 255
65341: PUSH
65342: LD_VAR 0 1
65346: EQUAL
65347: IFFALSE 65363
// begin result := un ;
65349: LD_ADDR_VAR 0 3
65353: PUSH
65354: LD_VAR 0 5
65358: ST_TO_ADDR
// exit ;
65359: POP
65360: POP
65361: GO 65367
// end ; end ;
65363: GO 65314
65365: POP
65366: POP
// end ;
65367: LD_VAR 0 3
65371: RET
// export function GetCargoBay ( units ) ; begin
65372: LD_INT 0
65374: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
65375: LD_ADDR_VAR 0 2
65379: PUSH
65380: LD_VAR 0 1
65384: PPUSH
65385: LD_INT 2
65387: PUSH
65388: LD_INT 34
65390: PUSH
65391: LD_INT 12
65393: PUSH
65394: EMPTY
65395: LIST
65396: LIST
65397: PUSH
65398: LD_INT 34
65400: PUSH
65401: LD_INT 51
65403: PUSH
65404: EMPTY
65405: LIST
65406: LIST
65407: PUSH
65408: LD_INT 34
65410: PUSH
65411: LD_INT 32
65413: PUSH
65414: EMPTY
65415: LIST
65416: LIST
65417: PUSH
65418: LD_INT 34
65420: PUSH
65421: LD_INT 89
65423: PUSH
65424: EMPTY
65425: LIST
65426: LIST
65427: PUSH
65428: EMPTY
65429: LIST
65430: LIST
65431: LIST
65432: LIST
65433: LIST
65434: PPUSH
65435: CALL_OW 72
65439: ST_TO_ADDR
// end ;
65440: LD_VAR 0 2
65444: RET
// export function Negate ( value ) ; begin
65445: LD_INT 0
65447: PPUSH
// result := not value ;
65448: LD_ADDR_VAR 0 2
65452: PUSH
65453: LD_VAR 0 1
65457: NOT
65458: ST_TO_ADDR
// end ;
65459: LD_VAR 0 2
65463: RET
// export function Inc ( value ) ; begin
65464: LD_INT 0
65466: PPUSH
// result := value + 1 ;
65467: LD_ADDR_VAR 0 2
65471: PUSH
65472: LD_VAR 0 1
65476: PUSH
65477: LD_INT 1
65479: PLUS
65480: ST_TO_ADDR
// end ;
65481: LD_VAR 0 2
65485: RET
// export function Dec ( value ) ; begin
65486: LD_INT 0
65488: PPUSH
// result := value - 1 ;
65489: LD_ADDR_VAR 0 2
65493: PUSH
65494: LD_VAR 0 1
65498: PUSH
65499: LD_INT 1
65501: MINUS
65502: ST_TO_ADDR
// end ;
65503: LD_VAR 0 2
65507: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
65508: LD_INT 0
65510: PPUSH
65511: PPUSH
65512: PPUSH
65513: PPUSH
65514: PPUSH
65515: PPUSH
65516: PPUSH
65517: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
65518: LD_VAR 0 1
65522: PPUSH
65523: LD_VAR 0 2
65527: PPUSH
65528: CALL_OW 488
65532: NOT
65533: PUSH
65534: LD_VAR 0 3
65538: PPUSH
65539: LD_VAR 0 4
65543: PPUSH
65544: CALL_OW 488
65548: NOT
65549: OR
65550: IFFALSE 65563
// begin result := - 1 ;
65552: LD_ADDR_VAR 0 5
65556: PUSH
65557: LD_INT 1
65559: NEG
65560: ST_TO_ADDR
// exit ;
65561: GO 65798
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
65563: LD_ADDR_VAR 0 12
65567: PUSH
65568: LD_VAR 0 1
65572: PPUSH
65573: LD_VAR 0 2
65577: PPUSH
65578: LD_VAR 0 3
65582: PPUSH
65583: LD_VAR 0 4
65587: PPUSH
65588: CALL 64648 0 4
65592: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
65593: LD_ADDR_VAR 0 11
65597: PUSH
65598: LD_VAR 0 1
65602: PPUSH
65603: LD_VAR 0 2
65607: PPUSH
65608: LD_VAR 0 12
65612: PUSH
65613: LD_INT 1
65615: ARRAY
65616: PPUSH
65617: LD_VAR 0 12
65621: PUSH
65622: LD_INT 2
65624: ARRAY
65625: PPUSH
65626: CALL_OW 298
65630: ST_TO_ADDR
// distance := 9999 ;
65631: LD_ADDR_VAR 0 10
65635: PUSH
65636: LD_INT 9999
65638: ST_TO_ADDR
// for i := 0 to 5 do
65639: LD_ADDR_VAR 0 6
65643: PUSH
65644: DOUBLE
65645: LD_INT 0
65647: DEC
65648: ST_TO_ADDR
65649: LD_INT 5
65651: PUSH
65652: FOR_TO
65653: IFFALSE 65796
// begin _x := ShiftX ( x1 , i , centerDist ) ;
65655: LD_ADDR_VAR 0 7
65659: PUSH
65660: LD_VAR 0 1
65664: PPUSH
65665: LD_VAR 0 6
65669: PPUSH
65670: LD_VAR 0 11
65674: PPUSH
65675: CALL_OW 272
65679: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
65680: LD_ADDR_VAR 0 8
65684: PUSH
65685: LD_VAR 0 2
65689: PPUSH
65690: LD_VAR 0 6
65694: PPUSH
65695: LD_VAR 0 11
65699: PPUSH
65700: CALL_OW 273
65704: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
65705: LD_VAR 0 7
65709: PPUSH
65710: LD_VAR 0 8
65714: PPUSH
65715: CALL_OW 488
65719: NOT
65720: IFFALSE 65724
// continue ;
65722: GO 65652
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
65724: LD_ADDR_VAR 0 9
65728: PUSH
65729: LD_VAR 0 12
65733: PUSH
65734: LD_INT 1
65736: ARRAY
65737: PPUSH
65738: LD_VAR 0 12
65742: PUSH
65743: LD_INT 2
65745: ARRAY
65746: PPUSH
65747: LD_VAR 0 7
65751: PPUSH
65752: LD_VAR 0 8
65756: PPUSH
65757: CALL_OW 298
65761: ST_TO_ADDR
// if tmp < distance then
65762: LD_VAR 0 9
65766: PUSH
65767: LD_VAR 0 10
65771: LESS
65772: IFFALSE 65794
// begin result := i ;
65774: LD_ADDR_VAR 0 5
65778: PUSH
65779: LD_VAR 0 6
65783: ST_TO_ADDR
// distance := tmp ;
65784: LD_ADDR_VAR 0 10
65788: PUSH
65789: LD_VAR 0 9
65793: ST_TO_ADDR
// end ; end ;
65794: GO 65652
65796: POP
65797: POP
// end ;
65798: LD_VAR 0 5
65802: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65803: LD_INT 0
65805: PPUSH
65806: PPUSH
// if not driver or not IsInUnit ( driver ) then
65807: LD_VAR 0 1
65811: NOT
65812: PUSH
65813: LD_VAR 0 1
65817: PPUSH
65818: CALL_OW 310
65822: NOT
65823: OR
65824: IFFALSE 65828
// exit ;
65826: GO 65918
// vehicle := IsInUnit ( driver ) ;
65828: LD_ADDR_VAR 0 3
65832: PUSH
65833: LD_VAR 0 1
65837: PPUSH
65838: CALL_OW 310
65842: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65843: LD_VAR 0 1
65847: PPUSH
65848: LD_STRING \
65850: PUSH
65851: LD_INT 0
65853: PUSH
65854: LD_INT 0
65856: PUSH
65857: LD_INT 0
65859: PUSH
65860: LD_INT 0
65862: PUSH
65863: LD_INT 0
65865: PUSH
65866: LD_INT 0
65868: PUSH
65869: EMPTY
65870: LIST
65871: LIST
65872: LIST
65873: LIST
65874: LIST
65875: LIST
65876: LIST
65877: PUSH
65878: LD_STRING E
65880: PUSH
65881: LD_INT 0
65883: PUSH
65884: LD_INT 0
65886: PUSH
65887: LD_VAR 0 3
65891: PUSH
65892: LD_INT 0
65894: PUSH
65895: LD_INT 0
65897: PUSH
65898: LD_INT 0
65900: PUSH
65901: EMPTY
65902: LIST
65903: LIST
65904: LIST
65905: LIST
65906: LIST
65907: LIST
65908: LIST
65909: PUSH
65910: EMPTY
65911: LIST
65912: LIST
65913: PPUSH
65914: CALL_OW 446
// end ;
65918: LD_VAR 0 2
65922: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65923: LD_INT 0
65925: PPUSH
65926: PPUSH
// if not driver or not IsInUnit ( driver ) then
65927: LD_VAR 0 1
65931: NOT
65932: PUSH
65933: LD_VAR 0 1
65937: PPUSH
65938: CALL_OW 310
65942: NOT
65943: OR
65944: IFFALSE 65948
// exit ;
65946: GO 66038
// vehicle := IsInUnit ( driver ) ;
65948: LD_ADDR_VAR 0 3
65952: PUSH
65953: LD_VAR 0 1
65957: PPUSH
65958: CALL_OW 310
65962: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65963: LD_VAR 0 1
65967: PPUSH
65968: LD_STRING \
65970: PUSH
65971: LD_INT 0
65973: PUSH
65974: LD_INT 0
65976: PUSH
65977: LD_INT 0
65979: PUSH
65980: LD_INT 0
65982: PUSH
65983: LD_INT 0
65985: PUSH
65986: LD_INT 0
65988: PUSH
65989: EMPTY
65990: LIST
65991: LIST
65992: LIST
65993: LIST
65994: LIST
65995: LIST
65996: LIST
65997: PUSH
65998: LD_STRING E
66000: PUSH
66001: LD_INT 0
66003: PUSH
66004: LD_INT 0
66006: PUSH
66007: LD_VAR 0 3
66011: PUSH
66012: LD_INT 0
66014: PUSH
66015: LD_INT 0
66017: PUSH
66018: LD_INT 0
66020: PUSH
66021: EMPTY
66022: LIST
66023: LIST
66024: LIST
66025: LIST
66026: LIST
66027: LIST
66028: LIST
66029: PUSH
66030: EMPTY
66031: LIST
66032: LIST
66033: PPUSH
66034: CALL_OW 447
// end ;
66038: LD_VAR 0 2
66042: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
66043: LD_INT 0
66045: PPUSH
66046: PPUSH
66047: PPUSH
// tmp := [ ] ;
66048: LD_ADDR_VAR 0 5
66052: PUSH
66053: EMPTY
66054: ST_TO_ADDR
// for i in units do
66055: LD_ADDR_VAR 0 4
66059: PUSH
66060: LD_VAR 0 1
66064: PUSH
66065: FOR_IN
66066: IFFALSE 66104
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
66068: LD_ADDR_VAR 0 5
66072: PUSH
66073: LD_VAR 0 5
66077: PPUSH
66078: LD_VAR 0 5
66082: PUSH
66083: LD_INT 1
66085: PLUS
66086: PPUSH
66087: LD_VAR 0 4
66091: PPUSH
66092: CALL_OW 256
66096: PPUSH
66097: CALL_OW 2
66101: ST_TO_ADDR
66102: GO 66065
66104: POP
66105: POP
// if not tmp then
66106: LD_VAR 0 5
66110: NOT
66111: IFFALSE 66115
// exit ;
66113: GO 66163
// if asc then
66115: LD_VAR 0 2
66119: IFFALSE 66143
// result := SortListByListAsc ( units , tmp ) else
66121: LD_ADDR_VAR 0 3
66125: PUSH
66126: LD_VAR 0 1
66130: PPUSH
66131: LD_VAR 0 5
66135: PPUSH
66136: CALL_OW 76
66140: ST_TO_ADDR
66141: GO 66163
// result := SortListByListDesc ( units , tmp ) ;
66143: LD_ADDR_VAR 0 3
66147: PUSH
66148: LD_VAR 0 1
66152: PPUSH
66153: LD_VAR 0 5
66157: PPUSH
66158: CALL_OW 77
66162: ST_TO_ADDR
// end ;
66163: LD_VAR 0 3
66167: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
66168: LD_INT 0
66170: PPUSH
66171: PPUSH
// task := GetTaskList ( mech ) ;
66172: LD_ADDR_VAR 0 4
66176: PUSH
66177: LD_VAR 0 1
66181: PPUSH
66182: CALL_OW 437
66186: ST_TO_ADDR
// if not task then
66187: LD_VAR 0 4
66191: NOT
66192: IFFALSE 66196
// exit ;
66194: GO 66238
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
66196: LD_ADDR_VAR 0 3
66200: PUSH
66201: LD_VAR 0 4
66205: PUSH
66206: LD_INT 1
66208: ARRAY
66209: PUSH
66210: LD_INT 1
66212: ARRAY
66213: PUSH
66214: LD_STRING r
66216: EQUAL
66217: PUSH
66218: LD_VAR 0 4
66222: PUSH
66223: LD_INT 1
66225: ARRAY
66226: PUSH
66227: LD_INT 4
66229: ARRAY
66230: PUSH
66231: LD_VAR 0 2
66235: EQUAL
66236: AND
66237: ST_TO_ADDR
// end ;
66238: LD_VAR 0 3
66242: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
66243: LD_INT 0
66245: PPUSH
// SetDir ( unit , d ) ;
66246: LD_VAR 0 1
66250: PPUSH
66251: LD_VAR 0 4
66255: PPUSH
66256: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
66260: LD_VAR 0 1
66264: PPUSH
66265: LD_VAR 0 2
66269: PPUSH
66270: LD_VAR 0 3
66274: PPUSH
66275: LD_VAR 0 5
66279: PPUSH
66280: CALL_OW 48
// end ;
66284: LD_VAR 0 6
66288: RET
// export function ToNaturalNumber ( number ) ; begin
66289: LD_INT 0
66291: PPUSH
// result := number div 1 ;
66292: LD_ADDR_VAR 0 2
66296: PUSH
66297: LD_VAR 0 1
66301: PUSH
66302: LD_INT 1
66304: DIV
66305: ST_TO_ADDR
// if number < 0 then
66306: LD_VAR 0 1
66310: PUSH
66311: LD_INT 0
66313: LESS
66314: IFFALSE 66324
// result := 0 ;
66316: LD_ADDR_VAR 0 2
66320: PUSH
66321: LD_INT 0
66323: ST_TO_ADDR
// end ;
66324: LD_VAR 0 2
66328: RET
// export function SortByClass ( units , class ) ; var un ; begin
66329: LD_INT 0
66331: PPUSH
66332: PPUSH
// if not units or not class then
66333: LD_VAR 0 1
66337: NOT
66338: PUSH
66339: LD_VAR 0 2
66343: NOT
66344: OR
66345: IFFALSE 66349
// exit ;
66347: GO 66444
// result := [ ] ;
66349: LD_ADDR_VAR 0 3
66353: PUSH
66354: EMPTY
66355: ST_TO_ADDR
// for un in units do
66356: LD_ADDR_VAR 0 4
66360: PUSH
66361: LD_VAR 0 1
66365: PUSH
66366: FOR_IN
66367: IFFALSE 66442
// if GetClass ( un ) = class then
66369: LD_VAR 0 4
66373: PPUSH
66374: CALL_OW 257
66378: PUSH
66379: LD_VAR 0 2
66383: EQUAL
66384: IFFALSE 66411
// result := Insert ( result , 1 , un ) else
66386: LD_ADDR_VAR 0 3
66390: PUSH
66391: LD_VAR 0 3
66395: PPUSH
66396: LD_INT 1
66398: PPUSH
66399: LD_VAR 0 4
66403: PPUSH
66404: CALL_OW 2
66408: ST_TO_ADDR
66409: GO 66440
// result := Replace ( result , result + 1 , un ) ;
66411: LD_ADDR_VAR 0 3
66415: PUSH
66416: LD_VAR 0 3
66420: PPUSH
66421: LD_VAR 0 3
66425: PUSH
66426: LD_INT 1
66428: PLUS
66429: PPUSH
66430: LD_VAR 0 4
66434: PPUSH
66435: CALL_OW 1
66439: ST_TO_ADDR
66440: GO 66366
66442: POP
66443: POP
// end ;
66444: LD_VAR 0 3
66448: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
66449: LD_INT 0
66451: PPUSH
66452: PPUSH
66453: PPUSH
66454: PPUSH
66455: PPUSH
66456: PPUSH
66457: PPUSH
// result := [ ] ;
66458: LD_ADDR_VAR 0 4
66462: PUSH
66463: EMPTY
66464: ST_TO_ADDR
// if x - r < 0 then
66465: LD_VAR 0 1
66469: PUSH
66470: LD_VAR 0 3
66474: MINUS
66475: PUSH
66476: LD_INT 0
66478: LESS
66479: IFFALSE 66491
// min_x := 0 else
66481: LD_ADDR_VAR 0 8
66485: PUSH
66486: LD_INT 0
66488: ST_TO_ADDR
66489: GO 66507
// min_x := x - r ;
66491: LD_ADDR_VAR 0 8
66495: PUSH
66496: LD_VAR 0 1
66500: PUSH
66501: LD_VAR 0 3
66505: MINUS
66506: ST_TO_ADDR
// if y - r < 0 then
66507: LD_VAR 0 2
66511: PUSH
66512: LD_VAR 0 3
66516: MINUS
66517: PUSH
66518: LD_INT 0
66520: LESS
66521: IFFALSE 66533
// min_y := 0 else
66523: LD_ADDR_VAR 0 7
66527: PUSH
66528: LD_INT 0
66530: ST_TO_ADDR
66531: GO 66549
// min_y := y - r ;
66533: LD_ADDR_VAR 0 7
66537: PUSH
66538: LD_VAR 0 2
66542: PUSH
66543: LD_VAR 0 3
66547: MINUS
66548: ST_TO_ADDR
// max_x := x + r ;
66549: LD_ADDR_VAR 0 9
66553: PUSH
66554: LD_VAR 0 1
66558: PUSH
66559: LD_VAR 0 3
66563: PLUS
66564: ST_TO_ADDR
// max_y := y + r ;
66565: LD_ADDR_VAR 0 10
66569: PUSH
66570: LD_VAR 0 2
66574: PUSH
66575: LD_VAR 0 3
66579: PLUS
66580: ST_TO_ADDR
// for _x = min_x to max_x do
66581: LD_ADDR_VAR 0 5
66585: PUSH
66586: DOUBLE
66587: LD_VAR 0 8
66591: DEC
66592: ST_TO_ADDR
66593: LD_VAR 0 9
66597: PUSH
66598: FOR_TO
66599: IFFALSE 66700
// for _y = min_y to max_y do
66601: LD_ADDR_VAR 0 6
66605: PUSH
66606: DOUBLE
66607: LD_VAR 0 7
66611: DEC
66612: ST_TO_ADDR
66613: LD_VAR 0 10
66617: PUSH
66618: FOR_TO
66619: IFFALSE 66696
// begin if not ValidHex ( _x , _y ) then
66621: LD_VAR 0 5
66625: PPUSH
66626: LD_VAR 0 6
66630: PPUSH
66631: CALL_OW 488
66635: NOT
66636: IFFALSE 66640
// continue ;
66638: GO 66618
// if GetResourceTypeXY ( _x , _y ) then
66640: LD_VAR 0 5
66644: PPUSH
66645: LD_VAR 0 6
66649: PPUSH
66650: CALL_OW 283
66654: IFFALSE 66694
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
66656: LD_ADDR_VAR 0 4
66660: PUSH
66661: LD_VAR 0 4
66665: PPUSH
66666: LD_VAR 0 4
66670: PUSH
66671: LD_INT 1
66673: PLUS
66674: PPUSH
66675: LD_VAR 0 5
66679: PUSH
66680: LD_VAR 0 6
66684: PUSH
66685: EMPTY
66686: LIST
66687: LIST
66688: PPUSH
66689: CALL_OW 1
66693: ST_TO_ADDR
// end ;
66694: GO 66618
66696: POP
66697: POP
66698: GO 66598
66700: POP
66701: POP
// end ;
66702: LD_VAR 0 4
66706: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
66707: LD_INT 0
66709: PPUSH
66710: PPUSH
66711: PPUSH
66712: PPUSH
66713: PPUSH
66714: PPUSH
66715: PPUSH
66716: PPUSH
// if not units then
66717: LD_VAR 0 1
66721: NOT
66722: IFFALSE 66726
// exit ;
66724: GO 67250
// result := UnitFilter ( units , [ f_ok ] ) ;
66726: LD_ADDR_VAR 0 3
66730: PUSH
66731: LD_VAR 0 1
66735: PPUSH
66736: LD_INT 50
66738: PUSH
66739: EMPTY
66740: LIST
66741: PPUSH
66742: CALL_OW 72
66746: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
66747: LD_ADDR_VAR 0 8
66751: PUSH
66752: LD_VAR 0 1
66756: PUSH
66757: LD_INT 1
66759: ARRAY
66760: PPUSH
66761: CALL_OW 255
66765: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
66766: LD_ADDR_VAR 0 10
66770: PUSH
66771: LD_INT 29
66773: PUSH
66774: LD_INT 91
66776: PUSH
66777: LD_INT 49
66779: PUSH
66780: EMPTY
66781: LIST
66782: LIST
66783: LIST
66784: ST_TO_ADDR
// if not result then
66785: LD_VAR 0 3
66789: NOT
66790: IFFALSE 66794
// exit ;
66792: GO 67250
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
66794: LD_ADDR_VAR 0 5
66798: PUSH
66799: LD_INT 81
66801: PUSH
66802: LD_VAR 0 8
66806: PUSH
66807: EMPTY
66808: LIST
66809: LIST
66810: PPUSH
66811: CALL_OW 69
66815: ST_TO_ADDR
// for i in result do
66816: LD_ADDR_VAR 0 4
66820: PUSH
66821: LD_VAR 0 3
66825: PUSH
66826: FOR_IN
66827: IFFALSE 67248
// begin tag := GetTag ( i ) + 1 ;
66829: LD_ADDR_VAR 0 9
66833: PUSH
66834: LD_VAR 0 4
66838: PPUSH
66839: CALL_OW 110
66843: PUSH
66844: LD_INT 1
66846: PLUS
66847: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
66848: LD_ADDR_VAR 0 7
66852: PUSH
66853: LD_VAR 0 4
66857: PPUSH
66858: CALL_OW 250
66862: PPUSH
66863: LD_VAR 0 4
66867: PPUSH
66868: CALL_OW 251
66872: PPUSH
66873: LD_INT 6
66875: PPUSH
66876: CALL 66449 0 3
66880: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
66881: LD_VAR 0 4
66885: PPUSH
66886: CALL_OW 247
66890: PUSH
66891: LD_INT 2
66893: EQUAL
66894: PUSH
66895: LD_VAR 0 7
66899: AND
66900: PUSH
66901: LD_VAR 0 4
66905: PPUSH
66906: CALL_OW 264
66910: PUSH
66911: LD_VAR 0 10
66915: IN
66916: NOT
66917: AND
66918: IFFALSE 66957
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
66920: LD_VAR 0 4
66924: PPUSH
66925: LD_VAR 0 7
66929: PUSH
66930: LD_INT 1
66932: ARRAY
66933: PUSH
66934: LD_INT 1
66936: ARRAY
66937: PPUSH
66938: LD_VAR 0 7
66942: PUSH
66943: LD_INT 1
66945: ARRAY
66946: PUSH
66947: LD_INT 2
66949: ARRAY
66950: PPUSH
66951: CALL_OW 116
66955: GO 67246
// if path > tag then
66957: LD_VAR 0 2
66961: PUSH
66962: LD_VAR 0 9
66966: GREATER
66967: IFFALSE 67175
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
66969: LD_ADDR_VAR 0 6
66973: PUSH
66974: LD_VAR 0 5
66978: PPUSH
66979: LD_INT 91
66981: PUSH
66982: LD_VAR 0 4
66986: PUSH
66987: LD_INT 8
66989: PUSH
66990: EMPTY
66991: LIST
66992: LIST
66993: LIST
66994: PPUSH
66995: CALL_OW 72
66999: ST_TO_ADDR
// if nearEnemy then
67000: LD_VAR 0 6
67004: IFFALSE 67073
// begin if GetWeapon ( i ) = ru_time_lapser then
67006: LD_VAR 0 4
67010: PPUSH
67011: CALL_OW 264
67015: PUSH
67016: LD_INT 49
67018: EQUAL
67019: IFFALSE 67047
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
67021: LD_VAR 0 4
67025: PPUSH
67026: LD_VAR 0 6
67030: PPUSH
67031: LD_VAR 0 4
67035: PPUSH
67036: CALL_OW 74
67040: PPUSH
67041: CALL_OW 112
67045: GO 67071
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
67047: LD_VAR 0 4
67051: PPUSH
67052: LD_VAR 0 6
67056: PPUSH
67057: LD_VAR 0 4
67061: PPUSH
67062: CALL_OW 74
67066: PPUSH
67067: CALL 68175 0 2
// end else
67071: GO 67173
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
67073: LD_VAR 0 4
67077: PPUSH
67078: LD_VAR 0 2
67082: PUSH
67083: LD_VAR 0 9
67087: ARRAY
67088: PUSH
67089: LD_INT 1
67091: ARRAY
67092: PPUSH
67093: LD_VAR 0 2
67097: PUSH
67098: LD_VAR 0 9
67102: ARRAY
67103: PUSH
67104: LD_INT 2
67106: ARRAY
67107: PPUSH
67108: CALL_OW 297
67112: PUSH
67113: LD_INT 6
67115: GREATER
67116: IFFALSE 67159
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
67118: LD_VAR 0 4
67122: PPUSH
67123: LD_VAR 0 2
67127: PUSH
67128: LD_VAR 0 9
67132: ARRAY
67133: PUSH
67134: LD_INT 1
67136: ARRAY
67137: PPUSH
67138: LD_VAR 0 2
67142: PUSH
67143: LD_VAR 0 9
67147: ARRAY
67148: PUSH
67149: LD_INT 2
67151: ARRAY
67152: PPUSH
67153: CALL_OW 114
67157: GO 67173
// SetTag ( i , tag ) ;
67159: LD_VAR 0 4
67163: PPUSH
67164: LD_VAR 0 9
67168: PPUSH
67169: CALL_OW 109
// end else
67173: GO 67246
// if enemy then
67175: LD_VAR 0 5
67179: IFFALSE 67246
// begin if GetWeapon ( i ) = ru_time_lapser then
67181: LD_VAR 0 4
67185: PPUSH
67186: CALL_OW 264
67190: PUSH
67191: LD_INT 49
67193: EQUAL
67194: IFFALSE 67222
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
67196: LD_VAR 0 4
67200: PPUSH
67201: LD_VAR 0 5
67205: PPUSH
67206: LD_VAR 0 4
67210: PPUSH
67211: CALL_OW 74
67215: PPUSH
67216: CALL_OW 112
67220: GO 67246
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
67222: LD_VAR 0 4
67226: PPUSH
67227: LD_VAR 0 5
67231: PPUSH
67232: LD_VAR 0 4
67236: PPUSH
67237: CALL_OW 74
67241: PPUSH
67242: CALL 68175 0 2
// end ; end ;
67246: GO 66826
67248: POP
67249: POP
// end ;
67250: LD_VAR 0 3
67254: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
67255: LD_INT 0
67257: PPUSH
67258: PPUSH
67259: PPUSH
// if not unit or IsInUnit ( unit ) then
67260: LD_VAR 0 1
67264: NOT
67265: PUSH
67266: LD_VAR 0 1
67270: PPUSH
67271: CALL_OW 310
67275: OR
67276: IFFALSE 67280
// exit ;
67278: GO 67371
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
67280: LD_ADDR_VAR 0 4
67284: PUSH
67285: LD_VAR 0 1
67289: PPUSH
67290: CALL_OW 250
67294: PPUSH
67295: LD_VAR 0 2
67299: PPUSH
67300: LD_INT 1
67302: PPUSH
67303: CALL_OW 272
67307: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
67308: LD_ADDR_VAR 0 5
67312: PUSH
67313: LD_VAR 0 1
67317: PPUSH
67318: CALL_OW 251
67322: PPUSH
67323: LD_VAR 0 2
67327: PPUSH
67328: LD_INT 1
67330: PPUSH
67331: CALL_OW 273
67335: ST_TO_ADDR
// if ValidHex ( x , y ) then
67336: LD_VAR 0 4
67340: PPUSH
67341: LD_VAR 0 5
67345: PPUSH
67346: CALL_OW 488
67350: IFFALSE 67371
// ComTurnXY ( unit , x , y ) ;
67352: LD_VAR 0 1
67356: PPUSH
67357: LD_VAR 0 4
67361: PPUSH
67362: LD_VAR 0 5
67366: PPUSH
67367: CALL_OW 118
// end ;
67371: LD_VAR 0 3
67375: RET
// export function SeeUnits ( side , units ) ; var i ; begin
67376: LD_INT 0
67378: PPUSH
67379: PPUSH
// result := false ;
67380: LD_ADDR_VAR 0 3
67384: PUSH
67385: LD_INT 0
67387: ST_TO_ADDR
// if not units then
67388: LD_VAR 0 2
67392: NOT
67393: IFFALSE 67397
// exit ;
67395: GO 67442
// for i in units do
67397: LD_ADDR_VAR 0 4
67401: PUSH
67402: LD_VAR 0 2
67406: PUSH
67407: FOR_IN
67408: IFFALSE 67440
// if See ( side , i ) then
67410: LD_VAR 0 1
67414: PPUSH
67415: LD_VAR 0 4
67419: PPUSH
67420: CALL_OW 292
67424: IFFALSE 67438
// begin result := true ;
67426: LD_ADDR_VAR 0 3
67430: PUSH
67431: LD_INT 1
67433: ST_TO_ADDR
// exit ;
67434: POP
67435: POP
67436: GO 67442
// end ;
67438: GO 67407
67440: POP
67441: POP
// end ;
67442: LD_VAR 0 3
67446: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
67447: LD_INT 0
67449: PPUSH
67450: PPUSH
67451: PPUSH
67452: PPUSH
// if not unit or not points then
67453: LD_VAR 0 1
67457: NOT
67458: PUSH
67459: LD_VAR 0 2
67463: NOT
67464: OR
67465: IFFALSE 67469
// exit ;
67467: GO 67559
// dist := 99999 ;
67469: LD_ADDR_VAR 0 5
67473: PUSH
67474: LD_INT 99999
67476: ST_TO_ADDR
// for i in points do
67477: LD_ADDR_VAR 0 4
67481: PUSH
67482: LD_VAR 0 2
67486: PUSH
67487: FOR_IN
67488: IFFALSE 67557
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
67490: LD_ADDR_VAR 0 6
67494: PUSH
67495: LD_VAR 0 1
67499: PPUSH
67500: LD_VAR 0 4
67504: PUSH
67505: LD_INT 1
67507: ARRAY
67508: PPUSH
67509: LD_VAR 0 4
67513: PUSH
67514: LD_INT 2
67516: ARRAY
67517: PPUSH
67518: CALL_OW 297
67522: ST_TO_ADDR
// if tmpDist < dist then
67523: LD_VAR 0 6
67527: PUSH
67528: LD_VAR 0 5
67532: LESS
67533: IFFALSE 67555
// begin result := i ;
67535: LD_ADDR_VAR 0 3
67539: PUSH
67540: LD_VAR 0 4
67544: ST_TO_ADDR
// dist := tmpDist ;
67545: LD_ADDR_VAR 0 5
67549: PUSH
67550: LD_VAR 0 6
67554: ST_TO_ADDR
// end ; end ;
67555: GO 67487
67557: POP
67558: POP
// end ;
67559: LD_VAR 0 3
67563: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
67564: LD_INT 0
67566: PPUSH
// uc_side := side ;
67567: LD_ADDR_OWVAR 20
67571: PUSH
67572: LD_VAR 0 1
67576: ST_TO_ADDR
// uc_nation := 3 ;
67577: LD_ADDR_OWVAR 21
67581: PUSH
67582: LD_INT 3
67584: ST_TO_ADDR
// vc_chassis := 25 ;
67585: LD_ADDR_OWVAR 37
67589: PUSH
67590: LD_INT 25
67592: ST_TO_ADDR
// vc_engine := engine_siberite ;
67593: LD_ADDR_OWVAR 39
67597: PUSH
67598: LD_INT 3
67600: ST_TO_ADDR
// vc_control := control_computer ;
67601: LD_ADDR_OWVAR 38
67605: PUSH
67606: LD_INT 3
67608: ST_TO_ADDR
// vc_weapon := 59 ;
67609: LD_ADDR_OWVAR 40
67613: PUSH
67614: LD_INT 59
67616: ST_TO_ADDR
// result := CreateVehicle ;
67617: LD_ADDR_VAR 0 5
67621: PUSH
67622: CALL_OW 45
67626: ST_TO_ADDR
// SetDir ( result , d ) ;
67627: LD_VAR 0 5
67631: PPUSH
67632: LD_VAR 0 4
67636: PPUSH
67637: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
67641: LD_VAR 0 5
67645: PPUSH
67646: LD_VAR 0 2
67650: PPUSH
67651: LD_VAR 0 3
67655: PPUSH
67656: LD_INT 0
67658: PPUSH
67659: CALL_OW 48
// end ;
67663: LD_VAR 0 5
67667: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
67668: LD_INT 0
67670: PPUSH
67671: PPUSH
67672: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
67673: LD_ADDR_VAR 0 2
67677: PUSH
67678: LD_INT 0
67680: PUSH
67681: LD_INT 0
67683: PUSH
67684: LD_INT 0
67686: PUSH
67687: LD_INT 0
67689: PUSH
67690: EMPTY
67691: LIST
67692: LIST
67693: LIST
67694: LIST
67695: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
67696: LD_VAR 0 1
67700: NOT
67701: PUSH
67702: LD_VAR 0 1
67706: PPUSH
67707: CALL_OW 264
67711: PUSH
67712: LD_INT 12
67714: PUSH
67715: LD_INT 51
67717: PUSH
67718: LD_INT 32
67720: PUSH
67721: LD_INT 89
67723: PUSH
67724: EMPTY
67725: LIST
67726: LIST
67727: LIST
67728: LIST
67729: IN
67730: NOT
67731: OR
67732: IFFALSE 67736
// exit ;
67734: GO 67834
// for i := 1 to 3 do
67736: LD_ADDR_VAR 0 3
67740: PUSH
67741: DOUBLE
67742: LD_INT 1
67744: DEC
67745: ST_TO_ADDR
67746: LD_INT 3
67748: PUSH
67749: FOR_TO
67750: IFFALSE 67832
// begin tmp := GetCargo ( cargo , i ) ;
67752: LD_ADDR_VAR 0 4
67756: PUSH
67757: LD_VAR 0 1
67761: PPUSH
67762: LD_VAR 0 3
67766: PPUSH
67767: CALL_OW 289
67771: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
67772: LD_ADDR_VAR 0 2
67776: PUSH
67777: LD_VAR 0 2
67781: PPUSH
67782: LD_VAR 0 3
67786: PPUSH
67787: LD_VAR 0 4
67791: PPUSH
67792: CALL_OW 1
67796: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
67797: LD_ADDR_VAR 0 2
67801: PUSH
67802: LD_VAR 0 2
67806: PPUSH
67807: LD_INT 4
67809: PPUSH
67810: LD_VAR 0 2
67814: PUSH
67815: LD_INT 4
67817: ARRAY
67818: PUSH
67819: LD_VAR 0 4
67823: PLUS
67824: PPUSH
67825: CALL_OW 1
67829: ST_TO_ADDR
// end ;
67830: GO 67749
67832: POP
67833: POP
// end ;
67834: LD_VAR 0 2
67838: RET
// export function Length ( array ) ; begin
67839: LD_INT 0
67841: PPUSH
// result := array + 0 ;
67842: LD_ADDR_VAR 0 2
67846: PUSH
67847: LD_VAR 0 1
67851: PUSH
67852: LD_INT 0
67854: PLUS
67855: ST_TO_ADDR
// end ;
67856: LD_VAR 0 2
67860: RET
// export function PrepareArray ( array ) ; begin
67861: LD_INT 0
67863: PPUSH
// result := array diff 0 ;
67864: LD_ADDR_VAR 0 2
67868: PUSH
67869: LD_VAR 0 1
67873: PUSH
67874: LD_INT 0
67876: DIFF
67877: ST_TO_ADDR
// if not result [ 1 ] then
67878: LD_VAR 0 2
67882: PUSH
67883: LD_INT 1
67885: ARRAY
67886: NOT
67887: IFFALSE 67907
// result := Delete ( result , 1 ) ;
67889: LD_ADDR_VAR 0 2
67893: PUSH
67894: LD_VAR 0 2
67898: PPUSH
67899: LD_INT 1
67901: PPUSH
67902: CALL_OW 3
67906: ST_TO_ADDR
// end ;
67907: LD_VAR 0 2
67911: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
67912: LD_INT 0
67914: PPUSH
67915: PPUSH
67916: PPUSH
67917: PPUSH
// sibRocketRange := 25 ;
67918: LD_ADDR_VAR 0 6
67922: PUSH
67923: LD_INT 25
67925: ST_TO_ADDR
// result := false ;
67926: LD_ADDR_VAR 0 4
67930: PUSH
67931: LD_INT 0
67933: ST_TO_ADDR
// for i := 0 to 5 do
67934: LD_ADDR_VAR 0 5
67938: PUSH
67939: DOUBLE
67940: LD_INT 0
67942: DEC
67943: ST_TO_ADDR
67944: LD_INT 5
67946: PUSH
67947: FOR_TO
67948: IFFALSE 68015
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
67950: LD_VAR 0 1
67954: PPUSH
67955: LD_VAR 0 5
67959: PPUSH
67960: LD_VAR 0 6
67964: PPUSH
67965: CALL_OW 272
67969: PPUSH
67970: LD_VAR 0 2
67974: PPUSH
67975: LD_VAR 0 5
67979: PPUSH
67980: LD_VAR 0 6
67984: PPUSH
67985: CALL_OW 273
67989: PPUSH
67990: LD_VAR 0 3
67994: PPUSH
67995: CALL_OW 309
67999: IFFALSE 68013
// begin result := true ;
68001: LD_ADDR_VAR 0 4
68005: PUSH
68006: LD_INT 1
68008: ST_TO_ADDR
// exit ;
68009: POP
68010: POP
68011: GO 68017
// end ;
68013: GO 67947
68015: POP
68016: POP
// end ;
68017: LD_VAR 0 4
68021: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
68022: LD_INT 0
68024: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
68025: LD_VAR 0 1
68029: PPUSH
68030: LD_VAR 0 2
68034: PPUSH
68035: LD_INT 0
68037: PPUSH
68038: LD_INT 0
68040: PPUSH
68041: LD_INT 1
68043: PPUSH
68044: LD_INT 0
68046: PPUSH
68047: CALL_OW 587
// end ;
68051: LD_VAR 0 3
68055: RET
// export function CenterOnNow ( unit ) ; begin
68056: LD_INT 0
68058: PPUSH
// result := IsInUnit ( unit ) ;
68059: LD_ADDR_VAR 0 2
68063: PUSH
68064: LD_VAR 0 1
68068: PPUSH
68069: CALL_OW 310
68073: ST_TO_ADDR
// if not result then
68074: LD_VAR 0 2
68078: NOT
68079: IFFALSE 68091
// result := unit ;
68081: LD_ADDR_VAR 0 2
68085: PUSH
68086: LD_VAR 0 1
68090: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
68091: LD_VAR 0 1
68095: PPUSH
68096: CALL_OW 87
// end ;
68100: LD_VAR 0 2
68104: RET
// export function ComMoveHex ( unit , hex ) ; begin
68105: LD_INT 0
68107: PPUSH
// if not hex then
68108: LD_VAR 0 2
68112: NOT
68113: IFFALSE 68117
// exit ;
68115: GO 68170
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
68117: LD_VAR 0 2
68121: PUSH
68122: LD_INT 1
68124: ARRAY
68125: PPUSH
68126: LD_VAR 0 2
68130: PUSH
68131: LD_INT 2
68133: ARRAY
68134: PPUSH
68135: CALL_OW 428
68139: IFFALSE 68143
// exit ;
68141: GO 68170
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
68143: LD_VAR 0 1
68147: PPUSH
68148: LD_VAR 0 2
68152: PUSH
68153: LD_INT 1
68155: ARRAY
68156: PPUSH
68157: LD_VAR 0 2
68161: PUSH
68162: LD_INT 2
68164: ARRAY
68165: PPUSH
68166: CALL_OW 111
// end ;
68170: LD_VAR 0 3
68174: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
68175: LD_INT 0
68177: PPUSH
68178: PPUSH
68179: PPUSH
// if not unit or not enemy then
68180: LD_VAR 0 1
68184: NOT
68185: PUSH
68186: LD_VAR 0 2
68190: NOT
68191: OR
68192: IFFALSE 68196
// exit ;
68194: GO 68320
// x := GetX ( enemy ) ;
68196: LD_ADDR_VAR 0 4
68200: PUSH
68201: LD_VAR 0 2
68205: PPUSH
68206: CALL_OW 250
68210: ST_TO_ADDR
// y := GetY ( enemy ) ;
68211: LD_ADDR_VAR 0 5
68215: PUSH
68216: LD_VAR 0 2
68220: PPUSH
68221: CALL_OW 251
68225: ST_TO_ADDR
// if ValidHex ( x , y ) then
68226: LD_VAR 0 4
68230: PPUSH
68231: LD_VAR 0 5
68235: PPUSH
68236: CALL_OW 488
68240: IFFALSE 68320
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
68242: LD_VAR 0 2
68246: PPUSH
68247: CALL_OW 247
68251: PUSH
68252: LD_INT 3
68254: PUSH
68255: LD_INT 2
68257: PUSH
68258: EMPTY
68259: LIST
68260: LIST
68261: IN
68262: PUSH
68263: LD_VAR 0 1
68267: PPUSH
68268: CALL_OW 255
68272: PPUSH
68273: LD_VAR 0 2
68277: PPUSH
68278: CALL_OW 292
68282: AND
68283: IFFALSE 68301
// ComAttackUnit ( unit , enemy ) else
68285: LD_VAR 0 1
68289: PPUSH
68290: LD_VAR 0 2
68294: PPUSH
68295: CALL_OW 115
68299: GO 68320
// ComAgressiveMove ( unit , x , y ) ;
68301: LD_VAR 0 1
68305: PPUSH
68306: LD_VAR 0 4
68310: PPUSH
68311: LD_VAR 0 5
68315: PPUSH
68316: CALL_OW 114
// end ; end_of_file
68320: LD_VAR 0 3
68324: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
68325: LD_VAR 0 1
68329: PPUSH
68330: LD_VAR 0 2
68334: PPUSH
68335: LD_VAR 0 3
68339: PPUSH
68340: LD_VAR 0 4
68344: PPUSH
68345: LD_VAR 0 5
68349: PPUSH
68350: LD_VAR 0 6
68354: PPUSH
68355: CALL 6026 0 6
// end ;
68359: PPOPN 6
68361: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
68362: LD_INT 0
68364: PPUSH
// begin if not units then
68365: LD_VAR 0 1
68369: NOT
68370: IFFALSE 68374
// exit ;
68372: GO 68374
// end ;
68374: PPOPN 7
68376: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
68377: CALL 5930 0 0
// end ; end_of_file
68381: PPOPN 1
68383: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
68384: LD_VAR 0 1
68388: PUSH
68389: LD_INT 200
68391: DOUBLE
68392: GREATEREQUAL
68393: IFFALSE 68401
68395: LD_INT 299
68397: DOUBLE
68398: LESSEQUAL
68399: IFTRUE 68403
68401: GO 68435
68403: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
68404: LD_VAR 0 1
68408: PPUSH
68409: LD_VAR 0 2
68413: PPUSH
68414: LD_VAR 0 3
68418: PPUSH
68419: LD_VAR 0 4
68423: PPUSH
68424: LD_VAR 0 5
68428: PPUSH
68429: CALL 22049 0 5
68433: GO 68512
68435: LD_INT 300
68437: DOUBLE
68438: GREATEREQUAL
68439: IFFALSE 68447
68441: LD_INT 399
68443: DOUBLE
68444: LESSEQUAL
68445: IFTRUE 68449
68447: GO 68511
68449: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
68450: LD_VAR 0 1
68454: PPUSH
68455: LD_VAR 0 2
68459: PPUSH
68460: LD_VAR 0 3
68464: PPUSH
68465: LD_VAR 0 4
68469: PPUSH
68470: LD_VAR 0 5
68474: PPUSH
68475: LD_VAR 0 6
68479: PPUSH
68480: LD_VAR 0 7
68484: PPUSH
68485: LD_VAR 0 8
68489: PPUSH
68490: LD_VAR 0 9
68494: PPUSH
68495: LD_VAR 0 10
68499: PPUSH
68500: LD_VAR 0 11
68504: PPUSH
68505: CALL 18374 0 11
68509: GO 68512
68511: POP
// end ;
68512: PPOPN 11
68514: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
68515: LD_VAR 0 1
68519: PPUSH
68520: LD_VAR 0 2
68524: PPUSH
68525: LD_VAR 0 3
68529: PPUSH
68530: LD_VAR 0 4
68534: PPUSH
68535: LD_VAR 0 5
68539: PPUSH
68540: CALL 21785 0 5
// end ;
68544: PPOPN 5
68546: END
