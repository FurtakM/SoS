// export JMM , Gladstone , Denis , Lisa , Frank , Bobby , Cyrus , Brown , Donaldson , Mike ; export others , randomsDelta ; export apemans , yourApemans ; export yourVehicles ; export DeltaDoctor ; export Harisson ; export selectedPeople ; export baseCorrect ; export cutscene ; export lab ; export resources ; export mission_prefix , mission_prefix_prev ; starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// FogOff ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 344
// baseCorrect := 0 ;
  15: LD_ADDR_EXP 19
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// cutscene := 1 ;
  23: LD_ADDR_EXP 20
  27: PUSH
  28: LD_INT 1
  30: ST_TO_ADDR
// apemans := [ ] ;
  31: LD_ADDR_EXP 13
  35: PUSH
  36: EMPTY
  37: ST_TO_ADDR
// yourApemans := [ ] ;
  38: LD_ADDR_EXP 14
  42: PUSH
  43: EMPTY
  44: ST_TO_ADDR
// yourVehicles := [ ] ;
  45: LD_ADDR_EXP 15
  49: PUSH
  50: EMPTY
  51: ST_TO_ADDR
// randomsDelta := [ ] ;
  52: LD_ADDR_EXP 12
  56: PUSH
  57: EMPTY
  58: ST_TO_ADDR
// resources := [ ] ;
  59: LD_ADDR_EXP 22
  63: PUSH
  64: EMPTY
  65: ST_TO_ADDR
// mission_prefix := 06_ ;
  66: LD_ADDR_EXP 23
  70: PUSH
  71: LD_STRING 06_
  73: ST_TO_ADDR
// mission_prefix_prev := 05_ ;
  74: LD_ADDR_EXP 24
  78: PUSH
  79: LD_STRING 05_
  81: ST_TO_ADDR
// PrepareDeltaBase ;
  82: CALL 2389 0 0
// CreateNature ;
  86: CALL 170 0 0
// LoadVehicles ;
  90: CALL 1530 0 0
// PrepareHeroes ;
  94: CALL 299 0 0
// PrepareRandoms ;
  98: CALL 1795 0 0
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
 102: LD_ADDR_EXP 21
 106: PUSH
 107: LD_INT 22
 109: PUSH
 110: LD_INT 1
 112: PUSH
 113: EMPTY
 114: LIST
 115: LIST
 116: PUSH
 117: LD_INT 2
 119: PUSH
 120: LD_INT 30
 122: PUSH
 123: LD_INT 6
 125: PUSH
 126: EMPTY
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 30
 132: PUSH
 133: LD_INT 7
 135: PUSH
 136: EMPTY
 137: LIST
 138: LIST
 139: PUSH
 140: LD_INT 30
 142: PUSH
 143: LD_INT 8
 145: PUSH
 146: EMPTY
 147: LIST
 148: LIST
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: LIST
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: PPUSH
 160: CALL_OW 69
 164: ST_TO_ADDR
// Action ;
 165: CALL 3303 0 0
// end ;
 169: END
// export function CreateNature ; var i ; begin
 170: LD_INT 0
 172: PPUSH
 173: PPUSH
// uc_side := 0 ;
 174: LD_ADDR_OWVAR 20
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// uc_nation := 0 ;
 182: LD_ADDR_OWVAR 21
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// for i = 1 to 4 do
 190: LD_ADDR_VAR 0 2
 194: PUSH
 195: DOUBLE
 196: LD_INT 1
 198: DEC
 199: ST_TO_ADDR
 200: LD_INT 4
 202: PUSH
 203: FOR_TO
 204: IFFALSE 292
// begin hc_gallery :=  ;
 206: LD_ADDR_OWVAR 33
 210: PUSH
 211: LD_STRING 
 213: ST_TO_ADDR
// hc_name :=  ;
 214: LD_ADDR_OWVAR 26
 218: PUSH
 219: LD_STRING 
 221: ST_TO_ADDR
// hc_agressivity := 0 ;
 222: LD_ADDR_OWVAR 35
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// hc_attr := [ rand ( 10 , 11 ) , rand ( 10 , 12 ) ] ;
 230: LD_ADDR_OWVAR 29
 234: PUSH
 235: LD_INT 10
 237: PPUSH
 238: LD_INT 11
 240: PPUSH
 241: CALL_OW 12
 245: PUSH
 246: LD_INT 10
 248: PPUSH
 249: LD_INT 12
 251: PPUSH
 252: CALL_OW 12
 256: PUSH
 257: EMPTY
 258: LIST
 259: LIST
 260: ST_TO_ADDR
// hc_class := class_apeman ;
 261: LD_ADDR_OWVAR 28
 265: PUSH
 266: LD_INT 12
 268: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , 22 , 18 , 20 , false ) ;
 269: CALL_OW 44
 273: PPUSH
 274: LD_INT 22
 276: PPUSH
 277: LD_INT 18
 279: PPUSH
 280: LD_INT 20
 282: PPUSH
 283: LD_INT 0
 285: PPUSH
 286: CALL_OW 50
// end ;
 290: GO 203
 292: POP
 293: POP
// end ; end_of_file
 294: LD_VAR 0 1
 298: RET
// export function PrepareHeroes ; var i , tmp , ape , test ; begin
 299: LD_INT 0
 301: PPUSH
 302: PPUSH
 303: PPUSH
 304: PPUSH
 305: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
 306: LD_ADDR_VAR 0 3
 310: PUSH
 311: LD_INT 22
 313: PUSH
 314: LD_INT 1
 316: PUSH
 317: EMPTY
 318: LIST
 319: LIST
 320: PUSH
 321: LD_INT 21
 323: PUSH
 324: LD_INT 3
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: PUSH
 331: LD_INT 30
 333: PUSH
 334: LD_INT 0
 336: PUSH
 337: EMPTY
 338: LIST
 339: LIST
 340: PUSH
 341: EMPTY
 342: LIST
 343: LIST
 344: LIST
 345: PPUSH
 346: CALL_OW 69
 350: ST_TO_ADDR
// if tmp then
 351: LD_VAR 0 3
 355: IFFALSE 373
// SetBName ( tmp [ 1 ] , delta ) ;
 357: LD_VAR 0 3
 361: PUSH
 362: LD_INT 1
 364: ARRAY
 365: PPUSH
 366: LD_STRING delta
 368: PPUSH
 369: CALL_OW 500
// uc_side := 1 ;
 373: LD_ADDR_OWVAR 20
 377: PUSH
 378: LD_INT 1
 380: ST_TO_ADDR
// uc_nation := 1 ;
 381: LD_ADDR_OWVAR 21
 385: PUSH
 386: LD_INT 1
 388: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , true , mission_prefix_prev ) ;
 389: LD_ADDR_EXP 1
 393: PUSH
 394: LD_STRING JMM
 396: PPUSH
 397: LD_INT 1
 399: PPUSH
 400: LD_EXP 24
 404: PPUSH
 405: CALL 25962 0 3
 409: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
 410: LD_ADDR_EXP 17
 414: PUSH
 415: LD_STRING Harisson
 417: PPUSH
 418: LD_INT 0
 420: PPUSH
 421: LD_STRING 
 423: PPUSH
 424: CALL 25962 0 3
 428: ST_TO_ADDR
// PlaceUnitXYR ( JMM , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 429: LD_EXP 1
 433: PPUSH
 434: LD_VAR 0 3
 438: PUSH
 439: LD_INT 1
 441: ARRAY
 442: PPUSH
 443: CALL_OW 250
 447: PPUSH
 448: LD_VAR 0 3
 452: PUSH
 453: LD_INT 1
 455: ARRAY
 456: PPUSH
 457: CALL_OW 251
 461: PPUSH
 462: LD_INT 5
 464: PPUSH
 465: LD_INT 0
 467: PPUSH
 468: CALL_OW 50
// SetClass ( JMM , 1 ) ;
 472: LD_EXP 1
 476: PPUSH
 477: LD_INT 1
 479: PPUSH
 480: CALL_OW 336
// Gladstone := PrepareUnit ( Gladstone , true , mission_prefix_prev ) ;
 484: LD_ADDR_EXP 2
 488: PUSH
 489: LD_STRING Gladstone
 491: PPUSH
 492: LD_INT 1
 494: PPUSH
 495: LD_EXP 24
 499: PPUSH
 500: CALL 25962 0 3
 504: ST_TO_ADDR
// PlaceUnitXYR ( Gladstone , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 505: LD_EXP 2
 509: PPUSH
 510: LD_VAR 0 3
 514: PUSH
 515: LD_INT 1
 517: ARRAY
 518: PPUSH
 519: CALL_OW 250
 523: PPUSH
 524: LD_VAR 0 3
 528: PUSH
 529: LD_INT 1
 531: ARRAY
 532: PPUSH
 533: CALL_OW 251
 537: PPUSH
 538: LD_INT 5
 540: PPUSH
 541: LD_INT 0
 543: PPUSH
 544: CALL_OW 50
// SetClass ( Gladstone , 4 ) ;
 548: LD_EXP 2
 552: PPUSH
 553: LD_INT 4
 555: PPUSH
 556: CALL_OW 336
// Denis := PrepareUnit ( Denis , true , mission_prefix_prev ) ;
 560: LD_ADDR_EXP 3
 564: PUSH
 565: LD_STRING Denis
 567: PPUSH
 568: LD_INT 1
 570: PPUSH
 571: LD_EXP 24
 575: PPUSH
 576: CALL 25962 0 3
 580: ST_TO_ADDR
// PlaceUnitXYR ( Denis , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 581: LD_EXP 3
 585: PPUSH
 586: LD_VAR 0 3
 590: PUSH
 591: LD_INT 1
 593: ARRAY
 594: PPUSH
 595: CALL_OW 250
 599: PPUSH
 600: LD_VAR 0 3
 604: PUSH
 605: LD_INT 1
 607: ARRAY
 608: PPUSH
 609: CALL_OW 251
 613: PPUSH
 614: LD_INT 5
 616: PPUSH
 617: LD_INT 0
 619: PPUSH
 620: CALL_OW 50
// SetClass ( Denis , 4 ) ;
 624: LD_EXP 3
 628: PPUSH
 629: LD_INT 4
 631: PPUSH
 632: CALL_OW 336
// Mike := PrepareUnit ( Mike , true , mission_prefix_prev ) ;
 636: LD_ADDR_EXP 10
 640: PUSH
 641: LD_STRING Mike
 643: PPUSH
 644: LD_INT 1
 646: PPUSH
 647: LD_EXP 24
 651: PPUSH
 652: CALL 25962 0 3
 656: ST_TO_ADDR
// PlaceUnitXYR ( Mike , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 657: LD_EXP 10
 661: PPUSH
 662: LD_VAR 0 3
 666: PUSH
 667: LD_INT 1
 669: ARRAY
 670: PPUSH
 671: CALL_OW 250
 675: PPUSH
 676: LD_VAR 0 3
 680: PUSH
 681: LD_INT 1
 683: ARRAY
 684: PPUSH
 685: CALL_OW 251
 689: PPUSH
 690: LD_INT 5
 692: PPUSH
 693: LD_INT 0
 695: PPUSH
 696: CALL_OW 50
// if LoadVariable ( FrankInDelta , 0 ) = 1 then
 700: LD_STRING FrankInDelta
 702: PPUSH
 703: LD_INT 0
 705: PPUSH
 706: CALL_OW 30
 710: PUSH
 711: LD_INT 1
 713: EQUAL
 714: IFFALSE 792
// begin Frank := PrepareUnit ( Frank , true , mission_prefix_prev ) ;
 716: LD_ADDR_EXP 5
 720: PUSH
 721: LD_STRING Frank
 723: PPUSH
 724: LD_INT 1
 726: PPUSH
 727: LD_EXP 24
 731: PPUSH
 732: CALL 25962 0 3
 736: ST_TO_ADDR
// PlaceUnitXYR ( Frank , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 737: LD_EXP 5
 741: PPUSH
 742: LD_VAR 0 3
 746: PUSH
 747: LD_INT 1
 749: ARRAY
 750: PPUSH
 751: CALL_OW 250
 755: PPUSH
 756: LD_VAR 0 3
 760: PUSH
 761: LD_INT 1
 763: ARRAY
 764: PPUSH
 765: CALL_OW 251
 769: PPUSH
 770: LD_INT 5
 772: PPUSH
 773: LD_INT 0
 775: PPUSH
 776: CALL_OW 50
// SetClass ( Frank , 1 ) ;
 780: LD_EXP 5
 784: PPUSH
 785: LD_INT 1
 787: PPUSH
 788: CALL_OW 336
// end ; if LoadVariable ( LisaInDelta , 0 ) = 1 then
 792: LD_STRING LisaInDelta
 794: PPUSH
 795: LD_INT 0
 797: PPUSH
 798: CALL_OW 30
 802: PUSH
 803: LD_INT 1
 805: EQUAL
 806: IFFALSE 884
// begin Lisa := PrepareUnit ( Lisa , true , mission_prefix_prev ) ;
 808: LD_ADDR_EXP 4
 812: PUSH
 813: LD_STRING Lisa
 815: PPUSH
 816: LD_INT 1
 818: PPUSH
 819: LD_EXP 24
 823: PPUSH
 824: CALL 25962 0 3
 828: ST_TO_ADDR
// PlaceUnitXYR ( Lisa , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 829: LD_EXP 4
 833: PPUSH
 834: LD_VAR 0 3
 838: PUSH
 839: LD_INT 1
 841: ARRAY
 842: PPUSH
 843: CALL_OW 250
 847: PPUSH
 848: LD_VAR 0 3
 852: PUSH
 853: LD_INT 1
 855: ARRAY
 856: PPUSH
 857: CALL_OW 251
 861: PPUSH
 862: LD_INT 5
 864: PPUSH
 865: LD_INT 0
 867: PPUSH
 868: CALL_OW 50
// SetClass ( Lisa , 1 ) ;
 872: LD_EXP 4
 876: PPUSH
 877: LD_INT 1
 879: PPUSH
 880: CALL_OW 336
// end ; if LoadVariable ( BobbyInDelta , 0 ) = 1 then
 884: LD_STRING BobbyInDelta
 886: PPUSH
 887: LD_INT 0
 889: PPUSH
 890: CALL_OW 30
 894: PUSH
 895: LD_INT 1
 897: EQUAL
 898: IFFALSE 976
// begin Bobby := PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 900: LD_ADDR_EXP 6
 904: PUSH
 905: LD_STRING Bobby
 907: PPUSH
 908: LD_INT 1
 910: PPUSH
 911: LD_EXP 24
 915: PPUSH
 916: CALL 25962 0 3
 920: ST_TO_ADDR
// PlaceUnitXYR ( Bobby , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 921: LD_EXP 6
 925: PPUSH
 926: LD_VAR 0 3
 930: PUSH
 931: LD_INT 1
 933: ARRAY
 934: PPUSH
 935: CALL_OW 250
 939: PPUSH
 940: LD_VAR 0 3
 944: PUSH
 945: LD_INT 1
 947: ARRAY
 948: PPUSH
 949: CALL_OW 251
 953: PPUSH
 954: LD_INT 5
 956: PPUSH
 957: LD_INT 0
 959: PPUSH
 960: CALL_OW 50
// SetClass ( Bobby , 1 ) ;
 964: LD_EXP 6
 968: PPUSH
 969: LD_INT 1
 971: PPUSH
 972: CALL_OW 336
// end ; if LoadVariable ( CyrusInDelta , 0 ) = 1 then
 976: LD_STRING CyrusInDelta
 978: PPUSH
 979: LD_INT 0
 981: PPUSH
 982: CALL_OW 30
 986: PUSH
 987: LD_INT 1
 989: EQUAL
 990: IFFALSE 1068
// begin Cyrus := PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
 992: LD_ADDR_EXP 7
 996: PUSH
 997: LD_STRING Cyrus
 999: PPUSH
1000: LD_INT 1
1002: PPUSH
1003: LD_EXP 24
1007: PPUSH
1008: CALL 25962 0 3
1012: ST_TO_ADDR
// PlaceUnitXYR ( Cyrus , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1013: LD_EXP 7
1017: PPUSH
1018: LD_VAR 0 3
1022: PUSH
1023: LD_INT 1
1025: ARRAY
1026: PPUSH
1027: CALL_OW 250
1031: PPUSH
1032: LD_VAR 0 3
1036: PUSH
1037: LD_INT 1
1039: ARRAY
1040: PPUSH
1041: CALL_OW 251
1045: PPUSH
1046: LD_INT 5
1048: PPUSH
1049: LD_INT 0
1051: PPUSH
1052: CALL_OW 50
// SetClass ( Cyrus , 1 ) ;
1056: LD_EXP 7
1060: PPUSH
1061: LD_INT 1
1063: PPUSH
1064: CALL_OW 336
// end ; if LoadVariable ( DonaldsonInDelta , 0 ) = 1 then
1068: LD_STRING DonaldsonInDelta
1070: PPUSH
1071: LD_INT 0
1073: PPUSH
1074: CALL_OW 30
1078: PUSH
1079: LD_INT 1
1081: EQUAL
1082: IFFALSE 1160
// begin Donaldson := PrepareUnit ( Donaldson , true , mission_prefix_prev ) ;
1084: LD_ADDR_EXP 9
1088: PUSH
1089: LD_STRING Donaldson
1091: PPUSH
1092: LD_INT 1
1094: PPUSH
1095: LD_EXP 24
1099: PPUSH
1100: CALL 25962 0 3
1104: ST_TO_ADDR
// PlaceUnitXYR ( Donaldson , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1105: LD_EXP 9
1109: PPUSH
1110: LD_VAR 0 3
1114: PUSH
1115: LD_INT 1
1117: ARRAY
1118: PPUSH
1119: CALL_OW 250
1123: PPUSH
1124: LD_VAR 0 3
1128: PUSH
1129: LD_INT 1
1131: ARRAY
1132: PPUSH
1133: CALL_OW 251
1137: PPUSH
1138: LD_INT 5
1140: PPUSH
1141: LD_INT 0
1143: PPUSH
1144: CALL_OW 50
// SetClass ( Donaldson , 1 ) ;
1148: LD_EXP 9
1152: PPUSH
1153: LD_INT 1
1155: PPUSH
1156: CALL_OW 336
// end ; if LoadVariable ( BrownInDelta , 0 ) = 1 then
1160: LD_STRING BrownInDelta
1162: PPUSH
1163: LD_INT 0
1165: PPUSH
1166: CALL_OW 30
1170: PUSH
1171: LD_INT 1
1173: EQUAL
1174: IFFALSE 1252
// begin Brown := PrepareUnit ( Brown , true , mission_prefix_prev ) ;
1176: LD_ADDR_EXP 8
1180: PUSH
1181: LD_STRING Brown
1183: PPUSH
1184: LD_INT 1
1186: PPUSH
1187: LD_EXP 24
1191: PPUSH
1192: CALL 25962 0 3
1196: ST_TO_ADDR
// PlaceUnitXYR ( Brown , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1197: LD_EXP 8
1201: PPUSH
1202: LD_VAR 0 3
1206: PUSH
1207: LD_INT 1
1209: ARRAY
1210: PPUSH
1211: CALL_OW 250
1215: PPUSH
1216: LD_VAR 0 3
1220: PUSH
1221: LD_INT 1
1223: ARRAY
1224: PPUSH
1225: CALL_OW 251
1229: PPUSH
1230: LD_INT 5
1232: PPUSH
1233: LD_INT 0
1235: PPUSH
1236: CALL_OW 50
// SetClass ( Brown , 2 ) ;
1240: LD_EXP 8
1244: PPUSH
1245: LD_INT 2
1247: PPUSH
1248: CALL_OW 336
// end ; others := CreateCharacterSet ( othersInDelta ) ;
1252: LD_ADDR_EXP 11
1256: PUSH
1257: LD_STRING othersInDelta
1259: PPUSH
1260: CALL_OW 31
1264: ST_TO_ADDR
// for i in others do
1265: LD_ADDR_VAR 0 2
1269: PUSH
1270: LD_EXP 11
1274: PUSH
1275: FOR_IN
1276: IFFALSE 1323
// PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1278: LD_VAR 0 2
1282: PPUSH
1283: LD_VAR 0 3
1287: PUSH
1288: LD_INT 1
1290: ARRAY
1291: PPUSH
1292: CALL_OW 250
1296: PPUSH
1297: LD_VAR 0 3
1301: PUSH
1302: LD_INT 1
1304: ARRAY
1305: PPUSH
1306: CALL_OW 251
1310: PPUSH
1311: LD_INT 35
1313: PPUSH
1314: LD_INT 0
1316: PPUSH
1317: CALL_OW 50
1321: GO 1275
1323: POP
1324: POP
// apemans := CreateCharacterSet ( apeInDelta ) ;
1325: LD_ADDR_EXP 13
1329: PUSH
1330: LD_STRING apeInDelta
1332: PPUSH
1333: CALL_OW 31
1337: ST_TO_ADDR
// uc_nation := 0 ;
1338: LD_ADDR_OWVAR 21
1342: PUSH
1343: LD_INT 0
1345: ST_TO_ADDR
// if apemans > 5 then
1346: LD_EXP 13
1350: PUSH
1351: LD_INT 5
1353: GREATER
1354: IFFALSE 1449
// begin for i := 1 to 5 do
1356: LD_ADDR_VAR 0 2
1360: PUSH
1361: DOUBLE
1362: LD_INT 1
1364: DEC
1365: ST_TO_ADDR
1366: LD_INT 5
1368: PUSH
1369: FOR_TO
1370: IFFALSE 1445
// begin PlaceUnitXYR ( apemans [ i ] , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1372: LD_EXP 13
1376: PUSH
1377: LD_VAR 0 2
1381: ARRAY
1382: PPUSH
1383: LD_VAR 0 3
1387: PUSH
1388: LD_INT 1
1390: ARRAY
1391: PPUSH
1392: CALL_OW 250
1396: PPUSH
1397: LD_VAR 0 3
1401: PUSH
1402: LD_INT 1
1404: ARRAY
1405: PPUSH
1406: CALL_OW 251
1410: PPUSH
1411: LD_INT 50
1413: PPUSH
1414: LD_INT 0
1416: PPUSH
1417: CALL_OW 50
// yourApemans := yourApemans ^ apemans [ i ] ;
1421: LD_ADDR_EXP 14
1425: PUSH
1426: LD_EXP 14
1430: PUSH
1431: LD_EXP 13
1435: PUSH
1436: LD_VAR 0 2
1440: ARRAY
1441: ADD
1442: ST_TO_ADDR
// end ;
1443: GO 1369
1445: POP
1446: POP
// end else
1447: GO 1525
// begin for i in apemans do
1449: LD_ADDR_VAR 0 2
1453: PUSH
1454: LD_EXP 13
1458: PUSH
1459: FOR_IN
1460: IFFALSE 1523
// begin PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1462: LD_VAR 0 2
1466: PPUSH
1467: LD_VAR 0 3
1471: PUSH
1472: LD_INT 1
1474: ARRAY
1475: PPUSH
1476: CALL_OW 250
1480: PPUSH
1481: LD_VAR 0 3
1485: PUSH
1486: LD_INT 1
1488: ARRAY
1489: PPUSH
1490: CALL_OW 251
1494: PPUSH
1495: LD_INT 50
1497: PPUSH
1498: LD_INT 0
1500: PPUSH
1501: CALL_OW 50
// yourApemans := yourApemans ^ i ;
1505: LD_ADDR_EXP 14
1509: PUSH
1510: LD_EXP 14
1514: PUSH
1515: LD_VAR 0 2
1519: ADD
1520: ST_TO_ADDR
// end ;
1521: GO 1459
1523: POP
1524: POP
// end ; end ;
1525: LD_VAR 0 1
1529: RET
// export function LoadVehicles ; var i , j , veh , tmp , vehicles ; begin
1530: LD_INT 0
1532: PPUSH
1533: PPUSH
1534: PPUSH
1535: PPUSH
1536: PPUSH
1537: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1538: LD_ADDR_VAR 0 5
1542: PUSH
1543: LD_INT 22
1545: PUSH
1546: LD_INT 1
1548: PUSH
1549: EMPTY
1550: LIST
1551: LIST
1552: PUSH
1553: LD_INT 21
1555: PUSH
1556: LD_INT 3
1558: PUSH
1559: EMPTY
1560: LIST
1561: LIST
1562: PUSH
1563: LD_INT 30
1565: PUSH
1566: LD_INT 0
1568: PUSH
1569: EMPTY
1570: LIST
1571: LIST
1572: PUSH
1573: EMPTY
1574: LIST
1575: LIST
1576: LIST
1577: PPUSH
1578: CALL_OW 69
1582: ST_TO_ADDR
// uc_side := 1 ;
1583: LD_ADDR_OWVAR 20
1587: PUSH
1588: LD_INT 1
1590: ST_TO_ADDR
// vehicles := LoadVariable ( vehiclesInDelta , [ ] ) ;
1591: LD_ADDR_VAR 0 6
1595: PUSH
1596: LD_STRING vehiclesInDelta
1598: PPUSH
1599: EMPTY
1600: PPUSH
1601: CALL_OW 30
1605: ST_TO_ADDR
// for i := 1 to Count ( vehicles ) div 4 do
1606: LD_ADDR_VAR 0 2
1610: PUSH
1611: DOUBLE
1612: LD_INT 1
1614: DEC
1615: ST_TO_ADDR
1616: LD_VAR 0 6
1620: PPUSH
1621: CALL 28064 0 1
1625: PUSH
1626: LD_INT 4
1628: DIV
1629: PUSH
1630: FOR_TO
1631: IFFALSE 1788
// begin uc_nation := vehicles [ 1 ] ;
1633: LD_ADDR_OWVAR 21
1637: PUSH
1638: LD_VAR 0 6
1642: PUSH
1643: LD_INT 1
1645: ARRAY
1646: ST_TO_ADDR
// vc_chassis := vehicles [ 2 ] ;
1647: LD_ADDR_OWVAR 37
1651: PUSH
1652: LD_VAR 0 6
1656: PUSH
1657: LD_INT 2
1659: ARRAY
1660: ST_TO_ADDR
// vc_engine := vehicles [ 3 ] ;
1661: LD_ADDR_OWVAR 39
1665: PUSH
1666: LD_VAR 0 6
1670: PUSH
1671: LD_INT 3
1673: ARRAY
1674: ST_TO_ADDR
// vc_control := vehicles [ 4 ] ;
1675: LD_ADDR_OWVAR 38
1679: PUSH
1680: LD_VAR 0 6
1684: PUSH
1685: LD_INT 4
1687: ARRAY
1688: ST_TO_ADDR
// vc_weapon := vehicles [ 5 ] ;
1689: LD_ADDR_OWVAR 40
1693: PUSH
1694: LD_VAR 0 6
1698: PUSH
1699: LD_INT 5
1701: ARRAY
1702: ST_TO_ADDR
// veh := CreateVehicle ;
1703: LD_ADDR_VAR 0 4
1707: PUSH
1708: CALL_OW 45
1712: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1713: LD_VAR 0 4
1717: PPUSH
1718: LD_INT 0
1720: PPUSH
1721: LD_INT 5
1723: PPUSH
1724: CALL_OW 12
1728: PPUSH
1729: CALL_OW 233
// PlaceUnitArea ( veh , parkingArea , false ) ;
1733: LD_VAR 0 4
1737: PPUSH
1738: LD_INT 4
1740: PPUSH
1741: LD_INT 0
1743: PPUSH
1744: CALL_OW 49
// for j := 1 to 5 do
1748: LD_ADDR_VAR 0 3
1752: PUSH
1753: DOUBLE
1754: LD_INT 1
1756: DEC
1757: ST_TO_ADDR
1758: LD_INT 5
1760: PUSH
1761: FOR_TO
1762: IFFALSE 1784
// vehicles := Delete ( vehicles , 1 ) ;
1764: LD_ADDR_VAR 0 6
1768: PUSH
1769: LD_VAR 0 6
1773: PPUSH
1774: LD_INT 1
1776: PPUSH
1777: CALL_OW 3
1781: ST_TO_ADDR
1782: GO 1761
1784: POP
1785: POP
// end ;
1786: GO 1630
1788: POP
1789: POP
// end ;
1790: LD_VAR 0 1
1794: RET
// export function PrepareRandoms ; var i , un , tmp , filter ; begin
1795: LD_INT 0
1797: PPUSH
1798: PPUSH
1799: PPUSH
1800: PPUSH
1801: PPUSH
// uc_side := 1 ;
1802: LD_ADDR_OWVAR 20
1806: PUSH
1807: LD_INT 1
1809: ST_TO_ADDR
// uc_nation := 1 ;
1810: LD_ADDR_OWVAR 21
1814: PUSH
1815: LD_INT 1
1817: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1818: LD_ADDR_VAR 0 4
1822: PUSH
1823: LD_INT 22
1825: PUSH
1826: LD_INT 1
1828: PUSH
1829: EMPTY
1830: LIST
1831: LIST
1832: PUSH
1833: LD_INT 21
1835: PUSH
1836: LD_INT 3
1838: PUSH
1839: EMPTY
1840: LIST
1841: LIST
1842: PUSH
1843: LD_INT 30
1845: PUSH
1846: LD_INT 0
1848: PUSH
1849: EMPTY
1850: LIST
1851: LIST
1852: PUSH
1853: EMPTY
1854: LIST
1855: LIST
1856: LIST
1857: PPUSH
1858: CALL_OW 69
1862: ST_TO_ADDR
// deltaDoctor := ( FilterAllunits ( [ [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] ) ;
1863: LD_ADDR_EXP 16
1867: PUSH
1868: LD_INT 22
1870: PUSH
1871: LD_INT 1
1873: PUSH
1874: EMPTY
1875: LIST
1876: LIST
1877: PUSH
1878: LD_INT 25
1880: PUSH
1881: LD_INT 4
1883: PUSH
1884: EMPTY
1885: LIST
1886: LIST
1887: PUSH
1888: LD_INT 26
1890: PUSH
1891: LD_INT 1
1893: PUSH
1894: EMPTY
1895: LIST
1896: LIST
1897: PUSH
1898: EMPTY
1899: LIST
1900: LIST
1901: LIST
1902: PUSH
1903: EMPTY
1904: LIST
1905: PPUSH
1906: CALL_OW 69
1910: PUSH
1911: LD_EXP 1
1915: PUSH
1916: LD_EXP 7
1920: PUSH
1921: LD_EXP 6
1925: PUSH
1926: LD_EXP 5
1930: PUSH
1931: LD_EXP 2
1935: PUSH
1936: LD_EXP 3
1940: PUSH
1941: LD_EXP 8
1945: PUSH
1946: EMPTY
1947: LIST
1948: LIST
1949: LIST
1950: LIST
1951: LIST
1952: LIST
1953: LIST
1954: DIFF
1955: ST_TO_ADDR
// if not deltaDoctor then
1956: LD_EXP 16
1960: NOT
1961: IFFALSE 2112
// begin filter := FilterAllunits ( [ [ [ f_side , 1 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] ;
1963: LD_ADDR_VAR 0 5
1967: PUSH
1968: LD_INT 22
1970: PUSH
1971: LD_INT 1
1973: PUSH
1974: EMPTY
1975: LIST
1976: LIST
1977: PUSH
1978: LD_INT 26
1980: PUSH
1981: LD_INT 1
1983: PUSH
1984: EMPTY
1985: LIST
1986: LIST
1987: PUSH
1988: EMPTY
1989: LIST
1990: LIST
1991: PUSH
1992: EMPTY
1993: LIST
1994: PPUSH
1995: CALL_OW 69
1999: PUSH
2000: LD_EXP 1
2004: PUSH
2005: LD_EXP 7
2009: PUSH
2010: LD_EXP 6
2014: PUSH
2015: LD_EXP 5
2019: PUSH
2020: LD_EXP 2
2024: PUSH
2025: LD_EXP 3
2029: PUSH
2030: LD_EXP 8
2034: PUSH
2035: EMPTY
2036: LIST
2037: LIST
2038: LIST
2039: LIST
2040: LIST
2041: LIST
2042: LIST
2043: DIFF
2044: ST_TO_ADDR
// if filter then
2045: LD_VAR 0 5
2049: IFFALSE 2110
// for i in filter do
2051: LD_ADDR_VAR 0 2
2055: PUSH
2056: LD_VAR 0 5
2060: PUSH
2061: FOR_IN
2062: IFFALSE 2108
// if GetSkill ( i , 4 ) >= 4 then
2064: LD_VAR 0 2
2068: PPUSH
2069: LD_INT 4
2071: PPUSH
2072: CALL_OW 259
2076: PUSH
2077: LD_INT 4
2079: GREATEREQUAL
2080: IFFALSE 2106
// begin deltaDoctor := i ;
2082: LD_ADDR_EXP 16
2086: PUSH
2087: LD_VAR 0 2
2091: ST_TO_ADDR
// SetClass ( deltaDoctor , 4 ) ;
2092: LD_EXP 16
2096: PPUSH
2097: LD_INT 4
2099: PPUSH
2100: CALL_OW 336
// break ;
2104: GO 2108
// end ;
2106: GO 2061
2108: POP
2109: POP
// end else
2110: GO 2126
// deltaDoctor := deltaDoctor [ 1 ] ;
2112: LD_ADDR_EXP 16
2116: PUSH
2117: LD_EXP 16
2121: PUSH
2122: LD_INT 1
2124: ARRAY
2125: ST_TO_ADDR
// for i := 1 to 7 do
2126: LD_ADDR_VAR 0 2
2130: PUSH
2131: DOUBLE
2132: LD_INT 1
2134: DEC
2135: ST_TO_ADDR
2136: LD_INT 7
2138: PUSH
2139: FOR_TO
2140: IFFALSE 2277
// begin hc_gallery :=  ;
2142: LD_ADDR_OWVAR 33
2146: PUSH
2147: LD_STRING 
2149: ST_TO_ADDR
// hc_name :=  ;
2150: LD_ADDR_OWVAR 26
2154: PUSH
2155: LD_STRING 
2157: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 3 , 5 ) ) ;
2158: LD_INT 0
2160: PPUSH
2161: LD_INT 1
2163: PUSH
2164: LD_INT 2
2166: PUSH
2167: LD_INT 3
2169: PUSH
2170: LD_INT 4
2172: PUSH
2173: EMPTY
2174: LIST
2175: LIST
2176: LIST
2177: LIST
2178: PUSH
2179: LD_INT 1
2181: PPUSH
2182: LD_INT 4
2184: PPUSH
2185: CALL_OW 12
2189: ARRAY
2190: PPUSH
2191: LD_INT 3
2193: PPUSH
2194: LD_INT 5
2196: PPUSH
2197: CALL_OW 12
2201: PPUSH
2202: CALL_OW 380
// un := CreateHuman ;
2206: LD_ADDR_VAR 0 3
2210: PUSH
2211: CALL_OW 44
2215: ST_TO_ADDR
// randomsDelta := randomsDelta ^ un ;
2216: LD_ADDR_EXP 12
2220: PUSH
2221: LD_EXP 12
2225: PUSH
2226: LD_VAR 0 3
2230: ADD
2231: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
2232: LD_VAR 0 3
2236: PPUSH
2237: LD_VAR 0 4
2241: PUSH
2242: LD_INT 1
2244: ARRAY
2245: PPUSH
2246: CALL_OW 250
2250: PPUSH
2251: LD_VAR 0 4
2255: PUSH
2256: LD_INT 1
2258: ARRAY
2259: PPUSH
2260: CALL_OW 251
2264: PPUSH
2265: LD_INT 15
2267: PPUSH
2268: LD_INT 0
2270: PPUSH
2271: CALL_OW 50
// end ;
2275: GO 2139
2277: POP
2278: POP
// if deltaDoctor then
2279: LD_EXP 16
2283: IFFALSE 2287
// exit ;
2285: GO 2384
// hc_gallery := Dawkins ;
2287: LD_ADDR_OWVAR 33
2291: PUSH
2292: LD_STRING Dawkins
2294: ST_TO_ADDR
// hc_face_number := 1 ;
2295: LD_ADDR_OWVAR 34
2299: PUSH
2300: LD_INT 1
2302: ST_TO_ADDR
// hc_name := Dr. Adam Charles Dawkins ;
2303: LD_ADDR_OWVAR 26
2307: PUSH
2308: LD_STRING Dr. Adam Charles Dawkins
2310: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 5 ) ;
2311: LD_INT 1
2313: PPUSH
2314: LD_INT 4
2316: PPUSH
2317: LD_INT 5
2319: PPUSH
2320: CALL_OW 380
// deltaDoctor := CreateHuman ;
2324: LD_ADDR_EXP 16
2328: PUSH
2329: CALL_OW 44
2333: ST_TO_ADDR
// PlaceUnitXYR ( deltaDoctor , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
2334: LD_EXP 16
2338: PPUSH
2339: LD_VAR 0 4
2343: PUSH
2344: LD_INT 1
2346: ARRAY
2347: PPUSH
2348: CALL_OW 250
2352: PPUSH
2353: LD_VAR 0 4
2357: PUSH
2358: LD_INT 1
2360: ARRAY
2361: PPUSH
2362: CALL_OW 251
2366: PPUSH
2367: LD_INT 5
2369: PPUSH
2370: LD_INT 0
2372: PPUSH
2373: CALL_OW 50
// ToLua ( enableBioCharacter(BIO_ADAM) ) ;
2377: LD_STRING enableBioCharacter(BIO_ADAM)
2379: PPUSH
2380: CALL_OW 559
// end ; end_of_file
2384: LD_VAR 0 1
2388: RET
// export function PrepareDeltaBase ; var i , j , building , buildings , lab , tmp ; begin
2389: LD_INT 0
2391: PPUSH
2392: PPUSH
2393: PPUSH
2394: PPUSH
2395: PPUSH
2396: PPUSH
2397: PPUSH
// buildings := LoadVariable ( buildingsInDelta , [ ] ) ;
2398: LD_ADDR_VAR 0 5
2402: PUSH
2403: LD_STRING buildingsInDelta
2405: PPUSH
2406: EMPTY
2407: PPUSH
2408: CALL_OW 30
2412: ST_TO_ADDR
// SetResourceVisibility ( 68 , 40 , 1 ) ;
2413: LD_INT 68
2415: PPUSH
2416: LD_INT 40
2418: PPUSH
2419: LD_INT 1
2421: PPUSH
2422: CALL_OW 441
// uc_side := 1 ;
2426: LD_ADDR_OWVAR 20
2430: PUSH
2431: LD_INT 1
2433: ST_TO_ADDR
// uc_nation := 1 ;
2434: LD_ADDR_OWVAR 21
2438: PUSH
2439: LD_INT 1
2441: ST_TO_ADDR
// for i := 1 to buildings do
2442: LD_ADDR_VAR 0 2
2446: PUSH
2447: DOUBLE
2448: LD_INT 1
2450: DEC
2451: ST_TO_ADDR
2452: LD_VAR 0 5
2456: PUSH
2457: FOR_TO
2458: IFFALSE 2759
// begin InitBc ;
2460: CALL_OW 21
// bc_type := buildings [ i ] [ 1 ] ;
2464: LD_ADDR_OWVAR 42
2468: PUSH
2469: LD_VAR 0 5
2473: PUSH
2474: LD_VAR 0 2
2478: ARRAY
2479: PUSH
2480: LD_INT 1
2482: ARRAY
2483: ST_TO_ADDR
// bc_level := buildings [ i ] [ 2 ] ;
2484: LD_ADDR_OWVAR 43
2488: PUSH
2489: LD_VAR 0 5
2493: PUSH
2494: LD_VAR 0 2
2498: ARRAY
2499: PUSH
2500: LD_INT 2
2502: ARRAY
2503: ST_TO_ADDR
// if bc_type in [ b_lab , b_lab_half , b_lab_full ] then
2504: LD_OWVAR 42
2508: PUSH
2509: LD_INT 6
2511: PUSH
2512: LD_INT 7
2514: PUSH
2515: LD_INT 8
2517: PUSH
2518: EMPTY
2519: LIST
2520: LIST
2521: LIST
2522: IN
2523: IFFALSE 2647
// begin bc_kind1 := b_lab_basic ;
2525: LD_ADDR_OWVAR 44
2529: PUSH
2530: LD_INT 9
2532: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2533: LD_ADDR_OWVAR 45
2537: PUSH
2538: LD_INT 9
2540: ST_TO_ADDR
// if buildings [ i ] [ 6 ] then
2541: LD_VAR 0 5
2545: PUSH
2546: LD_VAR 0 2
2550: ARRAY
2551: PUSH
2552: LD_INT 6
2554: ARRAY
2555: IFFALSE 2623
// begin bc_kind1 := buildings [ i ] [ 6 ] ;
2557: LD_ADDR_OWVAR 44
2561: PUSH
2562: LD_VAR 0 5
2566: PUSH
2567: LD_VAR 0 2
2571: ARRAY
2572: PUSH
2573: LD_INT 6
2575: ARRAY
2576: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2577: LD_ADDR_OWVAR 45
2581: PUSH
2582: LD_INT 9
2584: ST_TO_ADDR
// if buildings [ i ] [ 7 ] then
2585: LD_VAR 0 5
2589: PUSH
2590: LD_VAR 0 2
2594: ARRAY
2595: PUSH
2596: LD_INT 7
2598: ARRAY
2599: IFFALSE 2621
// bc_kind2 := buildings [ i ] [ 7 ] ;
2601: LD_ADDR_OWVAR 45
2605: PUSH
2606: LD_VAR 0 5
2610: PUSH
2611: LD_VAR 0 2
2615: ARRAY
2616: PUSH
2617: LD_INT 7
2619: ARRAY
2620: ST_TO_ADDR
// end else
2621: GO 2647
// begin bc_type := b_lab ;
2623: LD_ADDR_OWVAR 42
2627: PUSH
2628: LD_INT 6
2630: ST_TO_ADDR
// bc_kind1 := b_lab_basic ;
2631: LD_ADDR_OWVAR 44
2635: PUSH
2636: LD_INT 9
2638: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2639: LD_ADDR_OWVAR 45
2643: PUSH
2644: LD_INT 9
2646: ST_TO_ADDR
// end ; end ; building := CreateAndPlaceBuildingXYD ( buildings [ i ] [ 3 ] , buildings [ i ] [ 4 ] , buildings [ i ] [ 5 ] ) ;
2647: LD_ADDR_VAR 0 4
2651: PUSH
2652: LD_VAR 0 5
2656: PUSH
2657: LD_VAR 0 2
2661: ARRAY
2662: PUSH
2663: LD_INT 3
2665: ARRAY
2666: PPUSH
2667: LD_VAR 0 5
2671: PUSH
2672: LD_VAR 0 2
2676: ARRAY
2677: PUSH
2678: LD_INT 4
2680: ARRAY
2681: PPUSH
2682: LD_VAR 0 5
2686: PUSH
2687: LD_VAR 0 2
2691: ARRAY
2692: PUSH
2693: LD_INT 5
2695: ARRAY
2696: PPUSH
2697: CALL_OW 47
2701: ST_TO_ADDR
// if GetBType ( building ) = b_bunker and buildings [ i ] [ 8 ] then
2702: LD_VAR 0 4
2706: PPUSH
2707: CALL_OW 266
2711: PUSH
2712: LD_INT 32
2714: EQUAL
2715: PUSH
2716: LD_VAR 0 5
2720: PUSH
2721: LD_VAR 0 2
2725: ARRAY
2726: PUSH
2727: LD_INT 8
2729: ARRAY
2730: AND
2731: IFFALSE 2757
// PlaceWeaponTurret ( building , buildings [ i ] [ 8 ] ) ;
2733: LD_VAR 0 4
2737: PPUSH
2738: LD_VAR 0 5
2742: PUSH
2743: LD_VAR 0 2
2747: ARRAY
2748: PUSH
2749: LD_INT 8
2751: ARRAY
2752: PPUSH
2753: CALL_OW 431
// end ;
2757: GO 2457
2759: POP
2760: POP
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
2761: LD_ADDR_VAR 0 6
2765: PUSH
2766: LD_INT 22
2768: PUSH
2769: LD_INT 1
2771: PUSH
2772: EMPTY
2773: LIST
2774: LIST
2775: PUSH
2776: LD_INT 2
2778: PUSH
2779: LD_INT 30
2781: PUSH
2782: LD_INT 6
2784: PUSH
2785: EMPTY
2786: LIST
2787: LIST
2788: PUSH
2789: LD_INT 30
2791: PUSH
2792: LD_INT 7
2794: PUSH
2795: EMPTY
2796: LIST
2797: LIST
2798: PUSH
2799: LD_INT 30
2801: PUSH
2802: LD_INT 8
2804: PUSH
2805: EMPTY
2806: LIST
2807: LIST
2808: PUSH
2809: EMPTY
2810: LIST
2811: LIST
2812: LIST
2813: LIST
2814: PUSH
2815: EMPTY
2816: LIST
2817: LIST
2818: PPUSH
2819: CALL_OW 69
2823: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) ;
2824: LD_ADDR_VAR 0 7
2828: PUSH
2829: LD_INT 22
2831: PUSH
2832: LD_INT 1
2834: PUSH
2835: EMPTY
2836: LIST
2837: LIST
2838: PUSH
2839: LD_INT 30
2841: PUSH
2842: LD_INT 0
2844: PUSH
2845: EMPTY
2846: LIST
2847: LIST
2848: PUSH
2849: EMPTY
2850: LIST
2851: LIST
2852: PPUSH
2853: CALL_OW 69
2857: ST_TO_ADDR
// if lab and tmp then
2858: LD_VAR 0 6
2862: PUSH
2863: LD_VAR 0 7
2867: AND
2868: IFFALSE 2878
// baseCorrect := 1 ;
2870: LD_ADDR_EXP 19
2874: PUSH
2875: LD_INT 1
2877: ST_TO_ADDR
// if not baseCorrect then
2878: LD_EXP 19
2882: NOT
2883: IFFALSE 3298
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
2885: LD_ADDR_VAR 0 2
2889: PUSH
2890: LD_INT 22
2892: PUSH
2893: LD_INT 1
2895: PUSH
2896: EMPTY
2897: LIST
2898: LIST
2899: PUSH
2900: LD_INT 21
2902: PUSH
2903: LD_INT 3
2905: PUSH
2906: EMPTY
2907: LIST
2908: LIST
2909: PUSH
2910: EMPTY
2911: LIST
2912: LIST
2913: PPUSH
2914: CALL_OW 69
2918: PUSH
2919: FOR_IN
2920: IFFALSE 2933
// RemoveUnit ( i ) ;
2922: LD_VAR 0 2
2926: PPUSH
2927: CALL_OW 64
2931: GO 2919
2933: POP
2934: POP
// uc_nation := 1 ;
2935: LD_ADDR_OWVAR 21
2939: PUSH
2940: LD_INT 1
2942: ST_TO_ADDR
// uc_side := 1 ;
2943: LD_ADDR_OWVAR 20
2947: PUSH
2948: LD_INT 1
2950: ST_TO_ADDR
// bc_level := 5 ;
2951: LD_ADDR_OWVAR 43
2955: PUSH
2956: LD_INT 5
2958: ST_TO_ADDR
// bc_type := b_depot ;
2959: LD_ADDR_OWVAR 42
2963: PUSH
2964: LD_INT 0
2966: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 50 , 22 , 0 ) ;
2967: LD_INT 50
2969: PPUSH
2970: LD_INT 22
2972: PPUSH
2973: LD_INT 0
2975: PPUSH
2976: CALL_OW 47
// bc_type = b_bunker ;
2980: LD_ADDR_OWVAR 42
2984: PUSH
2985: LD_INT 32
2987: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( 68 , 24 , 4 ) ;
2988: LD_ADDR_VAR 0 4
2992: PUSH
2993: LD_INT 68
2995: PPUSH
2996: LD_INT 24
2998: PPUSH
2999: LD_INT 4
3001: PPUSH
3002: CALL_OW 47
3006: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ rand ( 1 , 2 ) ] ) ;
3007: LD_VAR 0 4
3011: PPUSH
3012: LD_INT 4
3014: PUSH
3015: LD_INT 11
3017: PUSH
3018: EMPTY
3019: LIST
3020: LIST
3021: PUSH
3022: LD_INT 1
3024: PPUSH
3025: LD_INT 2
3027: PPUSH
3028: CALL_OW 12
3032: ARRAY
3033: PPUSH
3034: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 71 , 34 , 4 ) ;
3038: LD_ADDR_VAR 0 4
3042: PUSH
3043: LD_INT 71
3045: PPUSH
3046: LD_INT 34
3048: PPUSH
3049: LD_INT 4
3051: PPUSH
3052: CALL_OW 47
3056: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ rand ( 1 , 2 ) ] ) ;
3057: LD_VAR 0 4
3061: PPUSH
3062: LD_INT 4
3064: PUSH
3065: LD_INT 11
3067: PUSH
3068: EMPTY
3069: LIST
3070: LIST
3071: PUSH
3072: LD_INT 1
3074: PPUSH
3075: LD_INT 2
3077: PPUSH
3078: CALL_OW 12
3082: ARRAY
3083: PPUSH
3084: CALL_OW 431
// bc_type := b_breastwork ;
3088: LD_ADDR_OWVAR 42
3092: PUSH
3093: LD_INT 31
3095: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 51 , 7 , 3 ) ;
3096: LD_INT 51
3098: PPUSH
3099: LD_INT 7
3101: PPUSH
3102: LD_INT 3
3104: PPUSH
3105: CALL_OW 47
// bc_type := b_oil_mine ;
3109: LD_ADDR_OWVAR 42
3113: PUSH
3114: LD_INT 29
3116: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 68 , 40 , 1 ) ;
3117: LD_INT 68
3119: PPUSH
3120: LD_INT 40
3122: PPUSH
3123: LD_INT 1
3125: PPUSH
3126: CALL_OW 47
// bc_type := b_factory ;
3130: LD_ADDR_OWVAR 42
3134: PUSH
3135: LD_INT 3
3137: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 20 , 2 ) ;
3138: LD_INT 38
3140: PPUSH
3141: LD_INT 20
3143: PPUSH
3144: LD_INT 2
3146: PPUSH
3147: CALL_OW 47
// bc_type := b_ext_noncombat ;
3151: LD_ADDR_OWVAR 42
3155: PUSH
3156: LD_INT 19
3158: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 24 , 2 ) ;
3159: LD_INT 38
3161: PPUSH
3162: LD_INT 24
3164: PPUSH
3165: LD_INT 2
3167: PPUSH
3168: CALL_OW 47
// bc_type := b_ext_radar ;
3172: LD_ADDR_OWVAR 42
3176: PUSH
3177: LD_INT 20
3179: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 35 , 20 , 1 ) ;
3180: LD_INT 35
3182: PPUSH
3183: LD_INT 20
3185: PPUSH
3186: LD_INT 1
3188: PPUSH
3189: CALL_OW 47
// bc_type := b_armoury ;
3193: LD_ADDR_OWVAR 42
3197: PUSH
3198: LD_INT 4
3200: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 33 , 28 , 1 ) ;
3201: LD_INT 33
3203: PPUSH
3204: LD_INT 28
3206: PPUSH
3207: LD_INT 1
3209: PPUSH
3210: CALL_OW 47
// bc_type := b_solar_power ;
3214: LD_ADDR_OWVAR 42
3218: PUSH
3219: LD_INT 27
3221: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 46 , 12 , 1 ) ;
3222: LD_INT 46
3224: PPUSH
3225: LD_INT 12
3227: PPUSH
3228: LD_INT 1
3230: PPUSH
3231: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 48 , 11 , 2 ) ;
3235: LD_INT 48
3237: PPUSH
3238: LD_INT 11
3240: PPUSH
3241: LD_INT 2
3243: PPUSH
3244: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 35 , 12 , 3 ) ;
3248: LD_INT 35
3250: PPUSH
3251: LD_INT 12
3253: PPUSH
3254: LD_INT 3
3256: PPUSH
3257: CALL_OW 47
// bc_type := b_lab_half ;
3261: LD_ADDR_OWVAR 42
3265: PUSH
3266: LD_INT 7
3268: ST_TO_ADDR
// bc_kind1 := b_lab_opto ;
3269: LD_ADDR_OWVAR 44
3273: PUSH
3274: LD_INT 15
3276: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
3277: LD_ADDR_OWVAR 45
3281: PUSH
3282: LD_INT 9
3284: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 42 , 15 , 2 ) ;
3285: LD_INT 42
3287: PPUSH
3288: LD_INT 15
3290: PPUSH
3291: LD_INT 2
3293: PPUSH
3294: CALL_OW 47
// end ; end ; end_of_file
3298: LD_VAR 0 1
3302: RET
// export function Action ; var i , j , tmp ; begin
3303: LD_INT 0
3305: PPUSH
3306: PPUSH
3307: PPUSH
3308: PPUSH
// InGameOn ;
3309: CALL_OW 8
// if lab then
3313: LD_EXP 21
3317: IFFALSE 3334
// CenterNowOnUnits ( lab [ 1 ] ) else
3319: LD_EXP 21
3323: PUSH
3324: LD_INT 1
3326: ARRAY
3327: PPUSH
3328: CALL_OW 87
3332: GO 3343
// CenterOnUnits ( JMM ) ;
3334: LD_EXP 1
3338: PPUSH
3339: CALL_OW 85
// if IsOK ( Denis ) then
3343: LD_EXP 3
3347: PPUSH
3348: CALL_OW 302
3352: IFFALSE 3380
// begin SetTech ( tech_radar , 1 , state_researched ) ;
3354: LD_INT 6
3356: PPUSH
3357: LD_INT 1
3359: PPUSH
3360: LD_INT 2
3362: PPUSH
3363: CALL_OW 322
// SetRestrict ( b_ext_radar , 1 , true ) ;
3367: LD_INT 20
3369: PPUSH
3370: LD_INT 1
3372: PPUSH
3373: LD_INT 1
3375: PPUSH
3376: CALL_OW 324
// end ; CenterNowOnUnits ( JMM ) ;
3380: LD_EXP 1
3384: PPUSH
3385: CALL_OW 87
// ComTurnUnit ( JMM , DeltaDoctor ) ;
3389: LD_EXP 1
3393: PPUSH
3394: LD_EXP 16
3398: PPUSH
3399: CALL_OW 119
// repeat wait ( 0 0$1 ) ;
3403: LD_INT 35
3405: PPUSH
3406: CALL_OW 67
// ComMoveUnit ( DeltaDoctor , JMM ) ;
3410: LD_EXP 16
3414: PPUSH
3415: LD_EXP 1
3419: PPUSH
3420: CALL_OW 112
// until GetDistUnits ( JMM , DeltaDoctor ) < 5 ;
3424: LD_EXP 1
3428: PPUSH
3429: LD_EXP 16
3433: PPUSH
3434: CALL_OW 296
3438: PUSH
3439: LD_INT 5
3441: LESS
3442: IFFALSE 3403
// ComTurnUnit ( DeltaDoctor , JMM ) ;
3444: LD_EXP 16
3448: PPUSH
3449: LD_EXP 1
3453: PPUSH
3454: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
3458: LD_EXP 1
3462: PPUSH
3463: LD_STRING D1-JMM-1
3465: PPUSH
3466: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-1 ) ;
3470: LD_EXP 16
3474: PPUSH
3475: LD_STRING D1-Sci-1
3477: PPUSH
3478: CALL_OW 88
// ComEnterUnit ( [ JMM , DeltaDoctor , Denis ] , lab [ 1 ] ) ;
3482: LD_EXP 1
3486: PUSH
3487: LD_EXP 16
3491: PUSH
3492: LD_EXP 3
3496: PUSH
3497: EMPTY
3498: LIST
3499: LIST
3500: LIST
3501: PPUSH
3502: LD_EXP 21
3506: PUSH
3507: LD_INT 1
3509: ARRAY
3510: PPUSH
3511: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
3515: LD_INT 35
3517: PPUSH
3518: CALL_OW 67
// until IsInUnit ( JMM ) and IsInUnit ( DeltaDoctor ) ;
3522: LD_EXP 1
3526: PPUSH
3527: CALL_OW 310
3531: PUSH
3532: LD_EXP 16
3536: PPUSH
3537: CALL_OW 310
3541: AND
3542: IFFALSE 3515
// CenterNowOnUnits ( lab [ 1 ] ) ;
3544: LD_EXP 21
3548: PUSH
3549: LD_INT 1
3551: ARRAY
3552: PPUSH
3553: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
3557: LD_EXP 1
3561: PPUSH
3562: LD_STRING D1-JMM-2
3564: PPUSH
3565: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-2 ) ;
3569: LD_EXP 16
3573: PPUSH
3574: LD_STRING D1-Sci-2
3576: PPUSH
3577: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
3581: LD_EXP 1
3585: PPUSH
3586: LD_STRING D1-JMM-3
3588: PPUSH
3589: CALL_OW 88
// if IsOK ( Denis ) then
3593: LD_EXP 3
3597: PPUSH
3598: CALL_OW 302
3602: IFFALSE 3618
// Say ( DeltaDoctor , D1-Sci-3 ) else
3604: LD_EXP 16
3608: PPUSH
3609: LD_STRING D1-Sci-3
3611: PPUSH
3612: CALL_OW 88
3616: GO 3630
// Say ( DeltaDoctor , D1-Sci-3a ) ;
3618: LD_EXP 16
3622: PPUSH
3623: LD_STRING D1-Sci-3a
3625: PPUSH
3626: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
3630: LD_EXP 1
3634: PPUSH
3635: LD_STRING D1-JMM-4
3637: PPUSH
3638: CALL_OW 88
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
3642: LD_ADDR_VAR 0 4
3646: PUSH
3647: LD_INT 22
3649: PUSH
3650: LD_INT 1
3652: PUSH
3653: EMPTY
3654: LIST
3655: LIST
3656: PUSH
3657: LD_INT 25
3659: PUSH
3660: LD_INT 4
3662: PUSH
3663: EMPTY
3664: LIST
3665: LIST
3666: PUSH
3667: LD_INT 3
3669: PUSH
3670: LD_INT 54
3672: PUSH
3673: EMPTY
3674: LIST
3675: PUSH
3676: EMPTY
3677: LIST
3678: LIST
3679: PUSH
3680: EMPTY
3681: LIST
3682: LIST
3683: LIST
3684: PPUSH
3685: CALL_OW 69
3689: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 0 ] ) do
3690: LD_ADDR_VAR 0 2
3694: PUSH
3695: LD_INT 22
3697: PUSH
3698: LD_INT 0
3700: PUSH
3701: EMPTY
3702: LIST
3703: LIST
3704: PPUSH
3705: CALL_OW 69
3709: PUSH
3710: FOR_IN
3711: IFFALSE 3761
// for j in tmp do
3713: LD_ADDR_VAR 0 3
3717: PUSH
3718: LD_VAR 0 4
3722: PUSH
3723: FOR_IN
3724: IFFALSE 3757
// AddComTameXY ( j , GetX ( i ) , GetY ( i ) ) ;
3726: LD_VAR 0 3
3730: PPUSH
3731: LD_VAR 0 2
3735: PPUSH
3736: CALL_OW 250
3740: PPUSH
3741: LD_VAR 0 2
3745: PPUSH
3746: CALL_OW 251
3750: PPUSH
3751: CALL_OW 191
3755: GO 3723
3757: POP
3758: POP
3759: GO 3710
3761: POP
3762: POP
// Say ( DeltaDoctor , D1-Sci-4 ) ;
3763: LD_EXP 16
3767: PPUSH
3768: LD_STRING D1-Sci-4
3770: PPUSH
3771: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
3775: LD_EXP 1
3779: PPUSH
3780: LD_STRING D1-JMM-5
3782: PPUSH
3783: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-5 ) ;
3787: LD_EXP 16
3791: PPUSH
3792: LD_STRING D1-Sci-5
3794: PPUSH
3795: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
3799: LD_EXP 1
3803: PPUSH
3804: LD_STRING D1-JMM-6
3806: PPUSH
3807: CALL_OW 88
// SayRadio ( Harisson , D1-Har-6 ) ;
3811: LD_EXP 17
3815: PPUSH
3816: LD_STRING D1-Har-6
3818: PPUSH
3819: CALL_OW 94
// Say ( JMM , D1-JMM-7 ) ;
3823: LD_EXP 1
3827: PPUSH
3828: LD_STRING D1-JMM-7
3830: PPUSH
3831: CALL_OW 88
// SayRadio ( Harisson , D1-Har-7 ) ;
3835: LD_EXP 17
3839: PPUSH
3840: LD_STRING D1-Har-7
3842: PPUSH
3843: CALL_OW 94
// if IsOK ( Denis ) then
3847: LD_EXP 3
3851: PPUSH
3852: CALL_OW 302
3856: IFFALSE 3870
// Say ( JMM , D1-JMM-8 ) ;
3858: LD_EXP 1
3862: PPUSH
3863: LD_STRING D1-JMM-8
3865: PPUSH
3866: CALL_OW 88
// Say ( JMM , D1-JMM-8a ) ;
3870: LD_EXP 1
3874: PPUSH
3875: LD_STRING D1-JMM-8a
3877: PPUSH
3878: CALL_OW 88
// SayRadio ( Harisson , D1-Har-8 ) ;
3882: LD_EXP 17
3886: PPUSH
3887: LD_STRING D1-Har-8
3889: PPUSH
3890: CALL_OW 94
// Say ( JMM , D1-JMM-9 ) ;
3894: LD_EXP 1
3898: PPUSH
3899: LD_STRING D1-JMM-9
3901: PPUSH
3902: CALL_OW 88
// SayRadio ( Harisson , D1-Har-9 ) ;
3906: LD_EXP 17
3910: PPUSH
3911: LD_STRING D1-Har-9
3913: PPUSH
3914: CALL_OW 94
// Say ( JMM , D1-JMM-10 ) ;
3918: LD_EXP 1
3922: PPUSH
3923: LD_STRING D1-JMM-10
3925: PPUSH
3926: CALL_OW 88
// if IsOK ( Denis ) then
3930: LD_EXP 3
3934: PPUSH
3935: CALL_OW 302
3939: IFFALSE 3953
// Say ( JMM , D1-JMM-10a ) ;
3941: LD_EXP 1
3945: PPUSH
3946: LD_STRING D1-JMM-10a
3948: PPUSH
3949: CALL_OW 88
// SelectDeltaCharacters ;
3953: CALL 4437 0 0
// SetResourceType ( GetBase ( lab [ 1 ] ) , 1 , 150 ) ;
3957: LD_EXP 21
3961: PUSH
3962: LD_INT 1
3964: ARRAY
3965: PPUSH
3966: CALL_OW 274
3970: PPUSH
3971: LD_INT 1
3973: PPUSH
3974: LD_INT 150
3976: PPUSH
3977: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) then
3981: LD_INT 22
3983: PUSH
3984: LD_INT 1
3986: PUSH
3987: EMPTY
3988: LIST
3989: LIST
3990: PUSH
3991: LD_INT 30
3993: PUSH
3994: LD_INT 29
3996: PUSH
3997: EMPTY
3998: LIST
3999: LIST
4000: PUSH
4001: EMPTY
4002: LIST
4003: LIST
4004: PPUSH
4005: CALL_OW 69
4009: IFFALSE 4035
// SetResourceType ( GetBase ( lab [ 1 ] ) , 2 , 300 ) ;
4011: LD_EXP 21
4015: PUSH
4016: LD_INT 1
4018: ARRAY
4019: PPUSH
4020: CALL_OW 274
4024: PPUSH
4025: LD_INT 2
4027: PPUSH
4028: LD_INT 300
4030: PPUSH
4031: CALL_OW 277
// InGameOff ;
4035: CALL_OW 9
// Query ( Q1 ) ;
4039: LD_STRING Q1
4041: PPUSH
4042: CALL_OW 97
// SetAreaMapShow ( ExitArea , 1 ) ;
4046: LD_INT 3
4048: PPUSH
4049: LD_INT 1
4051: PPUSH
4052: CALL_OW 424
// if IsInUnit ( JMM ) then
4056: LD_EXP 1
4060: PPUSH
4061: CALL_OW 310
4065: IFFALSE 4076
// ComExitBuilding ( JMM ) ;
4067: LD_EXP 1
4071: PPUSH
4072: CALL_OW 122
// end ;
4076: LD_VAR 0 1
4080: RET
// every 0 0$1 trigger FilterUnitsExceptArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do var i , cargoType ;
4081: LD_INT 3
4083: PPUSH
4084: LD_INT 22
4086: PUSH
4087: LD_INT 1
4089: PUSH
4090: EMPTY
4091: LIST
4092: LIST
4093: PUSH
4094: LD_INT 21
4096: PUSH
4097: LD_INT 1
4099: PUSH
4100: EMPTY
4101: LIST
4102: LIST
4103: PUSH
4104: EMPTY
4105: LIST
4106: LIST
4107: PPUSH
4108: CALL_OW 71
4112: PUSH
4113: LD_INT 0
4115: EQUAL
4116: IFFALSE 4434
4118: GO 4120
4120: DISABLE
4121: LD_INT 0
4123: PPUSH
4124: PPUSH
// begin SaveDeltaCharacters ;
4125: CALL 4809 0 0
// if FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) then
4129: LD_INT 3
4131: PPUSH
4132: LD_INT 21
4134: PUSH
4135: LD_INT 2
4137: PUSH
4138: EMPTY
4139: LIST
4140: LIST
4141: PUSH
4142: LD_INT 3
4144: PUSH
4145: LD_INT 58
4147: PUSH
4148: EMPTY
4149: LIST
4150: PUSH
4151: EMPTY
4152: LIST
4153: LIST
4154: PUSH
4155: EMPTY
4156: LIST
4157: LIST
4158: PPUSH
4159: CALL_OW 70
4163: IFFALSE 4420
// begin for i in FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) do
4165: LD_ADDR_VAR 0 1
4169: PUSH
4170: LD_INT 3
4172: PPUSH
4173: LD_INT 21
4175: PUSH
4176: LD_INT 2
4178: PUSH
4179: EMPTY
4180: LIST
4181: LIST
4182: PUSH
4183: LD_INT 3
4185: PUSH
4186: LD_INT 58
4188: PUSH
4189: EMPTY
4190: LIST
4191: PUSH
4192: EMPTY
4193: LIST
4194: LIST
4195: PUSH
4196: EMPTY
4197: LIST
4198: LIST
4199: PPUSH
4200: CALL_OW 70
4204: PUSH
4205: FOR_IN
4206: IFFALSE 4418
// begin cargoType := GetCargoType ( i ) ;
4208: LD_ADDR_VAR 0 2
4212: PUSH
4213: LD_VAR 0 1
4217: PPUSH
4218: CALL_OW 288
4222: ST_TO_ADDR
// if GetWeapon ( i ) = us_cargo_bay then
4223: LD_VAR 0 1
4227: PPUSH
4228: CALL_OW 264
4232: PUSH
4233: LD_INT 12
4235: EQUAL
4236: IFFALSE 4333
// yourVehicles := yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , cargoType , GetCargo ( i , cargoType ) ] ] else
4238: LD_ADDR_EXP 15
4242: PUSH
4243: LD_EXP 15
4247: PUSH
4248: LD_VAR 0 1
4252: PPUSH
4253: CALL_OW 248
4257: PUSH
4258: LD_VAR 0 1
4262: PPUSH
4263: CALL_OW 265
4267: PUSH
4268: LD_VAR 0 1
4272: PPUSH
4273: CALL_OW 262
4277: PUSH
4278: LD_VAR 0 1
4282: PPUSH
4283: CALL_OW 263
4287: PUSH
4288: LD_VAR 0 1
4292: PPUSH
4293: CALL_OW 264
4297: PUSH
4298: LD_VAR 0 2
4302: PUSH
4303: LD_VAR 0 1
4307: PPUSH
4308: LD_VAR 0 2
4312: PPUSH
4313: CALL_OW 289
4317: PUSH
4318: EMPTY
4319: LIST
4320: LIST
4321: LIST
4322: LIST
4323: LIST
4324: LIST
4325: LIST
4326: PUSH
4327: EMPTY
4328: LIST
4329: ADD
4330: ST_TO_ADDR
4331: GO 4404
// yourVehicles := yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ] ;
4333: LD_ADDR_EXP 15
4337: PUSH
4338: LD_EXP 15
4342: PUSH
4343: LD_VAR 0 1
4347: PPUSH
4348: CALL_OW 248
4352: PUSH
4353: LD_VAR 0 1
4357: PPUSH
4358: CALL_OW 265
4362: PUSH
4363: LD_VAR 0 1
4367: PPUSH
4368: CALL_OW 262
4372: PUSH
4373: LD_VAR 0 1
4377: PPUSH
4378: CALL_OW 263
4382: PUSH
4383: LD_VAR 0 1
4387: PPUSH
4388: CALL_OW 264
4392: PUSH
4393: EMPTY
4394: LIST
4395: LIST
4396: LIST
4397: LIST
4398: LIST
4399: PUSH
4400: EMPTY
4401: LIST
4402: ADD
4403: ST_TO_ADDR
// SaveVariable ( yourVehicles , 06_VehiclesIn06_1 ) ;
4404: LD_EXP 15
4408: PPUSH
4409: LD_STRING 06_VehiclesIn06_1
4411: PPUSH
4412: CALL_OW 39
// end ;
4416: GO 4205
4418: POP
4419: POP
// end ; SaveCargos ;
4420: CALL 5589 0 0
// ChangeMap ( 6 , %_cont ) ;
4424: LD_INT 6
4426: PPUSH
4427: LD_STRING %_cont
4429: PPUSH
4430: CALL_OW 340
// end ; end_of_file
4434: PPOPN 2
4436: END
// export function SelectDeltaCharacters ; var i , yourPeople ; begin
4437: LD_INT 0
4439: PPUSH
4440: PPUSH
4441: PPUSH
// selectedPeople := [ ] ;
4442: LD_ADDR_EXP 18
4446: PUSH
4447: EMPTY
4448: ST_TO_ADDR
// yourPeople := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , DeltaDoctor , Denis ] ;
4449: LD_ADDR_VAR 0 3
4453: PUSH
4454: LD_INT 22
4456: PUSH
4457: LD_INT 1
4459: PUSH
4460: EMPTY
4461: LIST
4462: LIST
4463: PUSH
4464: LD_INT 21
4466: PUSH
4467: LD_INT 1
4469: PUSH
4470: EMPTY
4471: LIST
4472: LIST
4473: PUSH
4474: LD_INT 2
4476: PUSH
4477: LD_INT 25
4479: PUSH
4480: LD_INT 1
4482: PUSH
4483: EMPTY
4484: LIST
4485: LIST
4486: PUSH
4487: LD_INT 25
4489: PUSH
4490: LD_INT 2
4492: PUSH
4493: EMPTY
4494: LIST
4495: LIST
4496: PUSH
4497: LD_INT 25
4499: PUSH
4500: LD_INT 3
4502: PUSH
4503: EMPTY
4504: LIST
4505: LIST
4506: PUSH
4507: LD_INT 25
4509: PUSH
4510: LD_INT 4
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: PUSH
4517: EMPTY
4518: LIST
4519: LIST
4520: LIST
4521: LIST
4522: LIST
4523: PUSH
4524: EMPTY
4525: LIST
4526: LIST
4527: LIST
4528: PPUSH
4529: CALL_OW 69
4533: PUSH
4534: LD_EXP 1
4538: PUSH
4539: LD_EXP 16
4543: PUSH
4544: LD_EXP 3
4548: PUSH
4549: EMPTY
4550: LIST
4551: LIST
4552: LIST
4553: DIFF
4554: ST_TO_ADDR
// selectedPeople := CharacterSelection ( text , 5 , 5 , [ sel_change_class , JMM , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ yourPeople ^ [ sel_dont_change_class , sel_not_changeable , Denis , DeltaDoctor ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
4555: LD_ADDR_EXP 18
4559: PUSH
4560: LD_STRING text
4562: PPUSH
4563: LD_INT 5
4565: PPUSH
4566: LD_INT 5
4568: PPUSH
4569: LD_INT -5
4571: PUSH
4572: LD_EXP 1
4576: PUSH
4577: LD_INT -6
4579: PUSH
4580: LD_INT -2
4582: PUSH
4583: LD_INT -3
4585: PUSH
4586: LD_INT -5
4588: PUSH
4589: EMPTY
4590: LIST
4591: LIST
4592: LIST
4593: LIST
4594: LIST
4595: LIST
4596: PUSH
4597: LD_VAR 0 3
4601: ADD
4602: PUSH
4603: LD_INT -6
4605: PUSH
4606: LD_INT -4
4608: PUSH
4609: LD_EXP 3
4613: PUSH
4614: LD_EXP 16
4618: PUSH
4619: EMPTY
4620: LIST
4621: LIST
4622: LIST
4623: LIST
4624: ADD
4625: PPUSH
4626: LD_INT 1
4628: PUSH
4629: LD_INT 3
4631: PUSH
4632: LD_INT 2
4634: PUSH
4635: LD_INT 1
4637: PUSH
4638: EMPTY
4639: LIST
4640: LIST
4641: PUSH
4642: LD_INT 4
4644: PUSH
4645: EMPTY
4646: LIST
4647: LIST
4648: LIST
4649: LIST
4650: PPUSH
4651: CALL_OW 42
4655: ST_TO_ADDR
// ComStop ( selectedPeople ) ;
4656: LD_EXP 18
4660: PPUSH
4661: CALL_OW 141
// SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 4 ) ;
4665: LD_INT 22
4667: PUSH
4668: LD_INT 1
4670: PUSH
4671: EMPTY
4672: LIST
4673: LIST
4674: PUSH
4675: LD_INT 21
4677: PUSH
4678: LD_INT 1
4680: PUSH
4681: EMPTY
4682: LIST
4683: LIST
4684: PUSH
4685: EMPTY
4686: LIST
4687: LIST
4688: PPUSH
4689: CALL_OW 69
4693: PPUSH
4694: LD_INT 4
4696: PPUSH
4697: CALL_OW 235
// for i in selectedPeople do
4701: LD_ADDR_VAR 0 2
4705: PUSH
4706: LD_EXP 18
4710: PUSH
4711: FOR_IN
4712: IFFALSE 4728
// SetSide ( i , 1 ) ;
4714: LD_VAR 0 2
4718: PPUSH
4719: LD_INT 1
4721: PPUSH
4722: CALL_OW 235
4726: GO 4711
4728: POP
4729: POP
// for i in yourApemans do
4730: LD_ADDR_VAR 0 2
4734: PUSH
4735: LD_EXP 14
4739: PUSH
4740: FOR_IN
4741: IFFALSE 4757
// SetSide ( i , 1 ) ;
4743: LD_VAR 0 2
4747: PPUSH
4748: LD_INT 1
4750: PPUSH
4751: CALL_OW 235
4755: GO 4740
4757: POP
4758: POP
// if Mike then
4759: LD_EXP 10
4763: IFFALSE 4777
// SetSide ( Mike , 1 ) ;
4765: LD_EXP 10
4769: PPUSH
4770: LD_INT 1
4772: PPUSH
4773: CALL_OW 235
// SetSide ( JMM , 1 ) ;
4777: LD_EXP 1
4781: PPUSH
4782: LD_INT 1
4784: PPUSH
4785: CALL_OW 235
// SetSkill ( yourApemans , 2 , 3 ) ;
4789: LD_EXP 14
4793: PPUSH
4794: LD_INT 2
4796: PPUSH
4797: LD_INT 3
4799: PPUSH
4800: CALL_OW 237
// end ;
4804: LD_VAR 0 1
4808: RET
// export function SaveDeltaCharacters ; begin
4809: LD_INT 0
4811: PPUSH
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
4812: LD_EXP 1
4816: PPUSH
4817: LD_EXP 23
4821: PUSH
4822: LD_STRING JMM
4824: STR
4825: PPUSH
4826: CALL_OW 38
// SaveCharacters ( DeltaDoctor , DeltaDoctor ) ;
4830: LD_EXP 16
4834: PPUSH
4835: LD_STRING DeltaDoctor
4837: PPUSH
4838: CALL_OW 38
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
4842: LD_EXP 3
4846: PPUSH
4847: LD_EXP 23
4851: PUSH
4852: LD_STRING Denis
4854: STR
4855: PPUSH
4856: CALL_OW 38
// if Lisa in selectedPeople then
4860: LD_EXP 4
4864: PUSH
4865: LD_EXP 18
4869: IN
4870: IFFALSE 4902
// begin SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
4872: LD_EXP 4
4876: PPUSH
4877: LD_EXP 23
4881: PUSH
4882: LD_STRING Lisa
4884: STR
4885: PPUSH
4886: CALL_OW 38
// SaveVariable ( 1 , LisaIn06 ) ;
4890: LD_INT 1
4892: PPUSH
4893: LD_STRING LisaIn06
4895: PPUSH
4896: CALL_OW 39
// end else
4900: GO 4923
// if IsOk ( Lisa ) then
4902: LD_EXP 4
4906: PPUSH
4907: CALL_OW 302
4911: IFFALSE 4923
// SaveVariable ( 1 , LisaStayInDelta ) ;
4913: LD_INT 1
4915: PPUSH
4916: LD_STRING LisaStayInDelta
4918: PPUSH
4919: CALL_OW 39
// if Bobby in selectedPeople then
4923: LD_EXP 6
4927: PUSH
4928: LD_EXP 18
4932: IN
4933: IFFALSE 4965
// begin SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
4935: LD_EXP 6
4939: PPUSH
4940: LD_EXP 23
4944: PUSH
4945: LD_STRING Bobby
4947: STR
4948: PPUSH
4949: CALL_OW 38
// SaveVariable ( 1 , BobbyIn06 ) ;
4953: LD_INT 1
4955: PPUSH
4956: LD_STRING BobbyIn06
4958: PPUSH
4959: CALL_OW 39
// end else
4963: GO 4986
// if IsOk ( Bobby ) then
4965: LD_EXP 6
4969: PPUSH
4970: CALL_OW 302
4974: IFFALSE 4986
// SaveVariable ( 1 , BobbyStayInDelta ) ;
4976: LD_INT 1
4978: PPUSH
4979: LD_STRING BobbyStayInDelta
4981: PPUSH
4982: CALL_OW 39
// if Cyrus in selectedPeople then
4986: LD_EXP 7
4990: PUSH
4991: LD_EXP 18
4995: IN
4996: IFFALSE 5028
// begin SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
4998: LD_EXP 7
5002: PPUSH
5003: LD_EXP 23
5007: PUSH
5008: LD_STRING Cyrus
5010: STR
5011: PPUSH
5012: CALL_OW 38
// SaveVariable ( 1 , CyrusIn06 ) ;
5016: LD_INT 1
5018: PPUSH
5019: LD_STRING CyrusIn06
5021: PPUSH
5022: CALL_OW 39
// end else
5026: GO 5049
// if IsOk ( Cyrus ) then
5028: LD_EXP 7
5032: PPUSH
5033: CALL_OW 302
5037: IFFALSE 5049
// SaveVariable ( 1 , CyrusStayInDelta ) ;
5039: LD_INT 1
5041: PPUSH
5042: LD_STRING CyrusStayInDelta
5044: PPUSH
5045: CALL_OW 39
// if Frank in selectedPeople then
5049: LD_EXP 5
5053: PUSH
5054: LD_EXP 18
5058: IN
5059: IFFALSE 5091
// begin SaveCharacters ( Frank , mission_prefix & Frank ) ;
5061: LD_EXP 5
5065: PPUSH
5066: LD_EXP 23
5070: PUSH
5071: LD_STRING Frank
5073: STR
5074: PPUSH
5075: CALL_OW 38
// SaveVariable ( 1 , FrankIn06 ) ;
5079: LD_INT 1
5081: PPUSH
5082: LD_STRING FrankIn06
5084: PPUSH
5085: CALL_OW 39
// end else
5089: GO 5112
// if IsOk ( Frank ) then
5091: LD_EXP 5
5095: PPUSH
5096: CALL_OW 302
5100: IFFALSE 5112
// SaveVariable ( 1 , FrankStayInDelta ) ;
5102: LD_INT 1
5104: PPUSH
5105: LD_STRING FrankStayInDelta
5107: PPUSH
5108: CALL_OW 39
// if Brown in selectedPeople then
5112: LD_EXP 8
5116: PUSH
5117: LD_EXP 18
5121: IN
5122: IFFALSE 5154
// begin SaveCharacters ( Brown , mission_prefix & Brown ) ;
5124: LD_EXP 8
5128: PPUSH
5129: LD_EXP 23
5133: PUSH
5134: LD_STRING Brown
5136: STR
5137: PPUSH
5138: CALL_OW 38
// SaveVariable ( 1 , BrownIn06 ) ;
5142: LD_INT 1
5144: PPUSH
5145: LD_STRING BrownIn06
5147: PPUSH
5148: CALL_OW 39
// end else
5152: GO 5175
// if IsOk ( Brown ) then
5154: LD_EXP 8
5158: PPUSH
5159: CALL_OW 302
5163: IFFALSE 5175
// SaveVariable ( 1 , BrownStayInDelta ) ;
5165: LD_INT 1
5167: PPUSH
5168: LD_STRING BrownStayInDelta
5170: PPUSH
5171: CALL_OW 39
// if Donaldson in selectedPeople then
5175: LD_EXP 9
5179: PUSH
5180: LD_EXP 18
5184: IN
5185: IFFALSE 5217
// begin SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
5187: LD_EXP 9
5191: PPUSH
5192: LD_EXP 23
5196: PUSH
5197: LD_STRING Donaldson
5199: STR
5200: PPUSH
5201: CALL_OW 38
// SaveVariable ( 1 , DonaldsonIn06 ) ;
5205: LD_INT 1
5207: PPUSH
5208: LD_STRING DonaldsonIn06
5210: PPUSH
5211: CALL_OW 39
// end else
5215: GO 5238
// if IsOk ( Donaldson ) then
5217: LD_EXP 9
5221: PPUSH
5222: CALL_OW 302
5226: IFFALSE 5238
// SaveVariable ( 1 , DonaldsonStayInDelta ) ;
5228: LD_INT 1
5230: PPUSH
5231: LD_STRING DonaldsonStayInDelta
5233: PPUSH
5234: CALL_OW 39
// if Gladstone in selectedPeople then
5238: LD_EXP 2
5242: PUSH
5243: LD_EXP 18
5247: IN
5248: IFFALSE 5280
// begin SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
5250: LD_EXP 2
5254: PPUSH
5255: LD_EXP 23
5259: PUSH
5260: LD_STRING Gladstone
5262: STR
5263: PPUSH
5264: CALL_OW 38
// SaveVariable ( 1 , GladstoneIn06 ) ;
5268: LD_INT 1
5270: PPUSH
5271: LD_STRING GladstoneIn06
5273: PPUSH
5274: CALL_OW 39
// end else
5278: GO 5301
// if IsOk ( Gladstone ) then
5280: LD_EXP 2
5284: PPUSH
5285: CALL_OW 302
5289: IFFALSE 5301
// SaveVariable ( 1 , GladstoneStayInDelta ) ;
5291: LD_INT 1
5293: PPUSH
5294: LD_STRING GladstoneStayInDelta
5296: PPUSH
5297: CALL_OW 39
// if Mike then
5301: LD_EXP 10
5305: IFFALSE 5325
// SaveCharacters ( Mike , mission_prefix & Mike ) ;
5307: LD_EXP 10
5311: PPUSH
5312: LD_EXP 23
5316: PUSH
5317: LD_STRING Mike
5319: STR
5320: PPUSH
5321: CALL_OW 38
// selectedPeople := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ;
5325: LD_ADDR_EXP 18
5329: PUSH
5330: LD_INT 22
5332: PUSH
5333: LD_INT 1
5335: PUSH
5336: EMPTY
5337: LIST
5338: LIST
5339: PUSH
5340: LD_INT 23
5342: PUSH
5343: LD_INT 1
5345: PUSH
5346: EMPTY
5347: LIST
5348: LIST
5349: PUSH
5350: LD_INT 21
5352: PUSH
5353: LD_INT 1
5355: PUSH
5356: EMPTY
5357: LIST
5358: LIST
5359: PUSH
5360: EMPTY
5361: LIST
5362: LIST
5363: LIST
5364: PPUSH
5365: CALL_OW 69
5369: ST_TO_ADDR
// SaveCharacters ( yourApemans , ApeIn06 ) ;
5370: LD_EXP 14
5374: PPUSH
5375: LD_STRING ApeIn06
5377: PPUSH
5378: CALL_OW 38
// SaveCharacters ( selectedPeople diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis ] , OthersIn06 ) ;
5382: LD_EXP 18
5386: PUSH
5387: LD_EXP 1
5391: PUSH
5392: LD_EXP 4
5396: PUSH
5397: LD_EXP 6
5401: PUSH
5402: LD_EXP 7
5406: PUSH
5407: LD_EXP 5
5411: PUSH
5412: LD_EXP 8
5416: PUSH
5417: LD_EXP 9
5421: PUSH
5422: LD_EXP 2
5426: PUSH
5427: LD_EXP 3
5431: PUSH
5432: EMPTY
5433: LIST
5434: LIST
5435: LIST
5436: LIST
5437: LIST
5438: LIST
5439: LIST
5440: LIST
5441: LIST
5442: DIFF
5443: PPUSH
5444: LD_STRING OthersIn06
5446: PPUSH
5447: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ DeltaDoctor , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis ] , OthersStayInDelta ) ;
5451: LD_INT 22
5453: PUSH
5454: LD_INT 4
5456: PUSH
5457: EMPTY
5458: LIST
5459: LIST
5460: PUSH
5461: LD_INT 2
5463: PUSH
5464: LD_INT 25
5466: PUSH
5467: LD_INT 1
5469: PUSH
5470: EMPTY
5471: LIST
5472: LIST
5473: PUSH
5474: LD_INT 25
5476: PUSH
5477: LD_INT 2
5479: PUSH
5480: EMPTY
5481: LIST
5482: LIST
5483: PUSH
5484: LD_INT 25
5486: PUSH
5487: LD_INT 3
5489: PUSH
5490: EMPTY
5491: LIST
5492: LIST
5493: PUSH
5494: LD_INT 25
5496: PUSH
5497: LD_INT 4
5499: PUSH
5500: EMPTY
5501: LIST
5502: LIST
5503: PUSH
5504: EMPTY
5505: LIST
5506: LIST
5507: LIST
5508: LIST
5509: LIST
5510: PUSH
5511: EMPTY
5512: LIST
5513: LIST
5514: PPUSH
5515: CALL_OW 69
5519: PUSH
5520: LD_EXP 16
5524: PUSH
5525: LD_EXP 4
5529: PUSH
5530: LD_EXP 6
5534: PUSH
5535: LD_EXP 7
5539: PUSH
5540: LD_EXP 5
5544: PUSH
5545: LD_EXP 8
5549: PUSH
5550: LD_EXP 9
5554: PUSH
5555: LD_EXP 2
5559: PUSH
5560: LD_EXP 3
5564: PUSH
5565: EMPTY
5566: LIST
5567: LIST
5568: LIST
5569: LIST
5570: LIST
5571: LIST
5572: LIST
5573: LIST
5574: LIST
5575: DIFF
5576: PPUSH
5577: LD_STRING OthersStayInDelta
5579: PPUSH
5580: CALL_OW 38
// end ;
5584: LD_VAR 0 1
5588: RET
// export function SaveCargos ; var i ; begin
5589: LD_INT 0
5591: PPUSH
5592: PPUSH
// for i in FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) do
5593: LD_ADDR_VAR 0 2
5597: PUSH
5598: LD_INT 3
5600: PPUSH
5601: LD_INT 22
5603: PUSH
5604: LD_INT 1
5606: PUSH
5607: EMPTY
5608: LIST
5609: LIST
5610: PUSH
5611: LD_INT 34
5613: PUSH
5614: LD_INT 12
5616: PUSH
5617: EMPTY
5618: LIST
5619: LIST
5620: PUSH
5621: EMPTY
5622: LIST
5623: LIST
5624: PPUSH
5625: CALL_OW 70
5629: PUSH
5630: FOR_IN
5631: IFFALSE 5659
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
5633: LD_ADDR_EXP 22
5637: PUSH
5638: LD_EXP 22
5642: PUSH
5643: LD_VAR 0 2
5647: PPUSH
5648: CALL 66848 0 1
5652: PUSH
5653: EMPTY
5654: LIST
5655: ADD
5656: ST_TO_ADDR
5657: GO 5630
5659: POP
5660: POP
// SaveVariable ( resources , 06_ResourcesInCargo06_1 ) ;
5661: LD_EXP 22
5665: PPUSH
5666: LD_STRING 06_ResourcesInCargo06_1
5668: PPUSH
5669: CALL_OW 39
// end ; end_of_file
5673: LD_VAR 0 1
5677: RET
// on Command ( comandid ) do var i ;
5678: LD_INT 0
5680: PPUSH
// begin if comandid = 65 then
5681: LD_VAR 0 1
5685: PUSH
5686: LD_INT 65
5688: EQUAL
5689: IFFALSE 5730
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
5691: LD_ADDR_VAR 0 2
5695: PUSH
5696: LD_INT 22
5698: PUSH
5699: LD_INT 1
5701: PUSH
5702: EMPTY
5703: LIST
5704: LIST
5705: PUSH
5706: EMPTY
5707: LIST
5708: PPUSH
5709: CALL_OW 69
5713: PUSH
5714: FOR_IN
5715: IFFALSE 5728
// ComStop ( i ) ;
5717: LD_VAR 0 2
5721: PPUSH
5722: CALL_OW 141
5726: GO 5714
5728: POP
5729: POP
// end ;
5730: PPOPN 2
5732: END
// on ApemanTamed ( apeman , human ) do var tmp ;
5733: LD_INT 0
5735: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
5736: LD_ADDR_VAR 0 3
5740: PUSH
5741: LD_INT 22
5743: PUSH
5744: LD_INT 1
5746: PUSH
5747: EMPTY
5748: LIST
5749: LIST
5750: PUSH
5751: LD_INT 21
5753: PUSH
5754: LD_INT 3
5756: PUSH
5757: EMPTY
5758: LIST
5759: LIST
5760: PUSH
5761: LD_INT 30
5763: PUSH
5764: LD_INT 0
5766: PUSH
5767: EMPTY
5768: LIST
5769: LIST
5770: PUSH
5771: EMPTY
5772: LIST
5773: LIST
5774: LIST
5775: PPUSH
5776: CALL_OW 69
5780: ST_TO_ADDR
// if not tmp then
5781: LD_VAR 0 3
5785: NOT
5786: IFFALSE 5790
// exit ;
5788: GO 5820
// ComEnterUnit ( apeman , tmp [ 1 ] ) ;
5790: LD_VAR 0 1
5794: PPUSH
5795: LD_VAR 0 3
5799: PUSH
5800: LD_INT 1
5802: ARRAY
5803: PPUSH
5804: CALL_OW 120
// SetSide ( apeman , 4 ) ;
5808: LD_VAR 0 1
5812: PPUSH
5813: LD_INT 4
5815: PPUSH
5816: CALL_OW 235
// end ;
5820: PPOPN 3
5822: END
// on UnitDestroyed ( un ) do begin if un = JMM then
5823: LD_VAR 0 1
5827: PUSH
5828: LD_EXP 1
5832: EQUAL
5833: IFFALSE 5842
// YouLost ( JMM ) ;
5835: LD_STRING JMM
5837: PPUSH
5838: CALL_OW 104
// SOS_UnitDestroyed ( un ) ;
5842: LD_VAR 0 1
5846: PPUSH
5847: CALL 21673 0 1
// end ;
5851: PPOPN 1
5853: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
5854: LD_VAR 0 1
5858: PPUSH
5859: LD_VAR 0 2
5863: PPUSH
5864: CALL 21793 0 2
// end ; end_of_file
5868: PPOPN 2
5870: END
// export globalGameSaveCounter ; every 0 0$1 do
5871: GO 5873
5873: DISABLE
// begin enable ;
5874: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
5875: LD_STRING updateTimer(
5877: PUSH
5878: LD_OWVAR 1
5882: STR
5883: PUSH
5884: LD_STRING );
5886: STR
5887: PPUSH
5888: CALL_OW 559
// end ;
5892: END
// every 0 0$1 do
5893: GO 5895
5895: DISABLE
// begin globalGameSaveCounter := 0 ;
5896: LD_ADDR_EXP 25
5900: PUSH
5901: LD_INT 0
5903: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
5904: LD_STRING setGameSaveCounter(0)
5906: PPUSH
5907: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
5911: LD_STRING initStreamRollete();
5913: PPUSH
5914: CALL_OW 559
// InitStreamMode ;
5918: CALL 7244 0 0
// DefineStreamItems ( false ) ;
5922: LD_INT 0
5924: PPUSH
5925: CALL 7708 0 1
// end ;
5929: END
// export function SOS_MapStart ( ) ; begin
5930: LD_INT 0
5932: PPUSH
// if streamModeActive then
5933: LD_EXP 26
5937: IFFALSE 5946
// DefineStreamItems ( true ) ;
5939: LD_INT 1
5941: PPUSH
5942: CALL 7708 0 1
// UpdateLuaVariables ( ) ;
5946: CALL 5963 0 0
// UpdateFactoryWaypoints ( ) ;
5950: CALL 20577 0 0
// UpdateWarehouseGatheringPoints ( ) ;
5954: CALL 20834 0 0
// end ;
5958: LD_VAR 0 1
5962: RET
// function UpdateLuaVariables ( ) ; begin
5963: LD_INT 0
5965: PPUSH
// if globalGameSaveCounter then
5966: LD_EXP 25
5970: IFFALSE 6004
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
5972: LD_ADDR_EXP 25
5976: PUSH
5977: LD_EXP 25
5981: PPUSH
5982: CALL 64644 0 1
5986: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
5987: LD_STRING setGameSaveCounter(
5989: PUSH
5990: LD_EXP 25
5994: STR
5995: PUSH
5996: LD_STRING )
5998: STR
5999: PPUSH
6000: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
6004: LD_STRING setGameDifficulty(
6006: PUSH
6007: LD_OWVAR 67
6011: STR
6012: PUSH
6013: LD_STRING )
6015: STR
6016: PPUSH
6017: CALL_OW 559
// end ;
6021: LD_VAR 0 1
6025: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
6026: LD_INT 0
6028: PPUSH
// if p2 = stream_mode then
6029: LD_VAR 0 2
6033: PUSH
6034: LD_INT 100
6036: EQUAL
6037: IFFALSE 7040
// begin if not StreamModeActive then
6039: LD_EXP 26
6043: NOT
6044: IFFALSE 6054
// StreamModeActive := true ;
6046: LD_ADDR_EXP 26
6050: PUSH
6051: LD_INT 1
6053: ST_TO_ADDR
// if p3 = 0 then
6054: LD_VAR 0 3
6058: PUSH
6059: LD_INT 0
6061: EQUAL
6062: IFFALSE 6068
// InitStreamMode ;
6064: CALL 7244 0 0
// if p3 = 1 then
6068: LD_VAR 0 3
6072: PUSH
6073: LD_INT 1
6075: EQUAL
6076: IFFALSE 6086
// sRocket := true ;
6078: LD_ADDR_EXP 31
6082: PUSH
6083: LD_INT 1
6085: ST_TO_ADDR
// if p3 = 2 then
6086: LD_VAR 0 3
6090: PUSH
6091: LD_INT 2
6093: EQUAL
6094: IFFALSE 6104
// sSpeed := true ;
6096: LD_ADDR_EXP 30
6100: PUSH
6101: LD_INT 1
6103: ST_TO_ADDR
// if p3 = 3 then
6104: LD_VAR 0 3
6108: PUSH
6109: LD_INT 3
6111: EQUAL
6112: IFFALSE 6122
// sEngine := true ;
6114: LD_ADDR_EXP 32
6118: PUSH
6119: LD_INT 1
6121: ST_TO_ADDR
// if p3 = 4 then
6122: LD_VAR 0 3
6126: PUSH
6127: LD_INT 4
6129: EQUAL
6130: IFFALSE 6140
// sSpec := true ;
6132: LD_ADDR_EXP 29
6136: PUSH
6137: LD_INT 1
6139: ST_TO_ADDR
// if p3 = 5 then
6140: LD_VAR 0 3
6144: PUSH
6145: LD_INT 5
6147: EQUAL
6148: IFFALSE 6158
// sLevel := true ;
6150: LD_ADDR_EXP 33
6154: PUSH
6155: LD_INT 1
6157: ST_TO_ADDR
// if p3 = 6 then
6158: LD_VAR 0 3
6162: PUSH
6163: LD_INT 6
6165: EQUAL
6166: IFFALSE 6176
// sArmoury := true ;
6168: LD_ADDR_EXP 34
6172: PUSH
6173: LD_INT 1
6175: ST_TO_ADDR
// if p3 = 7 then
6176: LD_VAR 0 3
6180: PUSH
6181: LD_INT 7
6183: EQUAL
6184: IFFALSE 6194
// sRadar := true ;
6186: LD_ADDR_EXP 35
6190: PUSH
6191: LD_INT 1
6193: ST_TO_ADDR
// if p3 = 8 then
6194: LD_VAR 0 3
6198: PUSH
6199: LD_INT 8
6201: EQUAL
6202: IFFALSE 6212
// sBunker := true ;
6204: LD_ADDR_EXP 36
6208: PUSH
6209: LD_INT 1
6211: ST_TO_ADDR
// if p3 = 9 then
6212: LD_VAR 0 3
6216: PUSH
6217: LD_INT 9
6219: EQUAL
6220: IFFALSE 6230
// sHack := true ;
6222: LD_ADDR_EXP 37
6226: PUSH
6227: LD_INT 1
6229: ST_TO_ADDR
// if p3 = 10 then
6230: LD_VAR 0 3
6234: PUSH
6235: LD_INT 10
6237: EQUAL
6238: IFFALSE 6248
// sFire := true ;
6240: LD_ADDR_EXP 38
6244: PUSH
6245: LD_INT 1
6247: ST_TO_ADDR
// if p3 = 11 then
6248: LD_VAR 0 3
6252: PUSH
6253: LD_INT 11
6255: EQUAL
6256: IFFALSE 6266
// sRefresh := true ;
6258: LD_ADDR_EXP 39
6262: PUSH
6263: LD_INT 1
6265: ST_TO_ADDR
// if p3 = 12 then
6266: LD_VAR 0 3
6270: PUSH
6271: LD_INT 12
6273: EQUAL
6274: IFFALSE 6284
// sExp := true ;
6276: LD_ADDR_EXP 40
6280: PUSH
6281: LD_INT 1
6283: ST_TO_ADDR
// if p3 = 13 then
6284: LD_VAR 0 3
6288: PUSH
6289: LD_INT 13
6291: EQUAL
6292: IFFALSE 6302
// sDepot := true ;
6294: LD_ADDR_EXP 41
6298: PUSH
6299: LD_INT 1
6301: ST_TO_ADDR
// if p3 = 14 then
6302: LD_VAR 0 3
6306: PUSH
6307: LD_INT 14
6309: EQUAL
6310: IFFALSE 6320
// sFlag := true ;
6312: LD_ADDR_EXP 42
6316: PUSH
6317: LD_INT 1
6319: ST_TO_ADDR
// if p3 = 15 then
6320: LD_VAR 0 3
6324: PUSH
6325: LD_INT 15
6327: EQUAL
6328: IFFALSE 6338
// sKamikadze := true ;
6330: LD_ADDR_EXP 50
6334: PUSH
6335: LD_INT 1
6337: ST_TO_ADDR
// if p3 = 16 then
6338: LD_VAR 0 3
6342: PUSH
6343: LD_INT 16
6345: EQUAL
6346: IFFALSE 6356
// sTroll := true ;
6348: LD_ADDR_EXP 51
6352: PUSH
6353: LD_INT 1
6355: ST_TO_ADDR
// if p3 = 17 then
6356: LD_VAR 0 3
6360: PUSH
6361: LD_INT 17
6363: EQUAL
6364: IFFALSE 6374
// sSlow := true ;
6366: LD_ADDR_EXP 52
6370: PUSH
6371: LD_INT 1
6373: ST_TO_ADDR
// if p3 = 18 then
6374: LD_VAR 0 3
6378: PUSH
6379: LD_INT 18
6381: EQUAL
6382: IFFALSE 6392
// sLack := true ;
6384: LD_ADDR_EXP 53
6388: PUSH
6389: LD_INT 1
6391: ST_TO_ADDR
// if p3 = 19 then
6392: LD_VAR 0 3
6396: PUSH
6397: LD_INT 19
6399: EQUAL
6400: IFFALSE 6410
// sTank := true ;
6402: LD_ADDR_EXP 55
6406: PUSH
6407: LD_INT 1
6409: ST_TO_ADDR
// if p3 = 20 then
6410: LD_VAR 0 3
6414: PUSH
6415: LD_INT 20
6417: EQUAL
6418: IFFALSE 6428
// sRemote := true ;
6420: LD_ADDR_EXP 56
6424: PUSH
6425: LD_INT 1
6427: ST_TO_ADDR
// if p3 = 21 then
6428: LD_VAR 0 3
6432: PUSH
6433: LD_INT 21
6435: EQUAL
6436: IFFALSE 6446
// sPowell := true ;
6438: LD_ADDR_EXP 57
6442: PUSH
6443: LD_INT 1
6445: ST_TO_ADDR
// if p3 = 22 then
6446: LD_VAR 0 3
6450: PUSH
6451: LD_INT 22
6453: EQUAL
6454: IFFALSE 6464
// sTeleport := true ;
6456: LD_ADDR_EXP 60
6460: PUSH
6461: LD_INT 1
6463: ST_TO_ADDR
// if p3 = 23 then
6464: LD_VAR 0 3
6468: PUSH
6469: LD_INT 23
6471: EQUAL
6472: IFFALSE 6482
// sOilTower := true ;
6474: LD_ADDR_EXP 62
6478: PUSH
6479: LD_INT 1
6481: ST_TO_ADDR
// if p3 = 24 then
6482: LD_VAR 0 3
6486: PUSH
6487: LD_INT 24
6489: EQUAL
6490: IFFALSE 6500
// sShovel := true ;
6492: LD_ADDR_EXP 63
6496: PUSH
6497: LD_INT 1
6499: ST_TO_ADDR
// if p3 = 25 then
6500: LD_VAR 0 3
6504: PUSH
6505: LD_INT 25
6507: EQUAL
6508: IFFALSE 6518
// sSheik := true ;
6510: LD_ADDR_EXP 64
6514: PUSH
6515: LD_INT 1
6517: ST_TO_ADDR
// if p3 = 26 then
6518: LD_VAR 0 3
6522: PUSH
6523: LD_INT 26
6525: EQUAL
6526: IFFALSE 6536
// sEarthquake := true ;
6528: LD_ADDR_EXP 66
6532: PUSH
6533: LD_INT 1
6535: ST_TO_ADDR
// if p3 = 27 then
6536: LD_VAR 0 3
6540: PUSH
6541: LD_INT 27
6543: EQUAL
6544: IFFALSE 6554
// sAI := true ;
6546: LD_ADDR_EXP 67
6550: PUSH
6551: LD_INT 1
6553: ST_TO_ADDR
// if p3 = 28 then
6554: LD_VAR 0 3
6558: PUSH
6559: LD_INT 28
6561: EQUAL
6562: IFFALSE 6572
// sCargo := true ;
6564: LD_ADDR_EXP 70
6568: PUSH
6569: LD_INT 1
6571: ST_TO_ADDR
// if p3 = 29 then
6572: LD_VAR 0 3
6576: PUSH
6577: LD_INT 29
6579: EQUAL
6580: IFFALSE 6590
// sDLaser := true ;
6582: LD_ADDR_EXP 71
6586: PUSH
6587: LD_INT 1
6589: ST_TO_ADDR
// if p3 = 30 then
6590: LD_VAR 0 3
6594: PUSH
6595: LD_INT 30
6597: EQUAL
6598: IFFALSE 6608
// sExchange := true ;
6600: LD_ADDR_EXP 72
6604: PUSH
6605: LD_INT 1
6607: ST_TO_ADDR
// if p3 = 31 then
6608: LD_VAR 0 3
6612: PUSH
6613: LD_INT 31
6615: EQUAL
6616: IFFALSE 6626
// sFac := true ;
6618: LD_ADDR_EXP 73
6622: PUSH
6623: LD_INT 1
6625: ST_TO_ADDR
// if p3 = 32 then
6626: LD_VAR 0 3
6630: PUSH
6631: LD_INT 32
6633: EQUAL
6634: IFFALSE 6644
// sPower := true ;
6636: LD_ADDR_EXP 74
6640: PUSH
6641: LD_INT 1
6643: ST_TO_ADDR
// if p3 = 33 then
6644: LD_VAR 0 3
6648: PUSH
6649: LD_INT 33
6651: EQUAL
6652: IFFALSE 6662
// sRandom := true ;
6654: LD_ADDR_EXP 75
6658: PUSH
6659: LD_INT 1
6661: ST_TO_ADDR
// if p3 = 34 then
6662: LD_VAR 0 3
6666: PUSH
6667: LD_INT 34
6669: EQUAL
6670: IFFALSE 6680
// sShield := true ;
6672: LD_ADDR_EXP 76
6676: PUSH
6677: LD_INT 1
6679: ST_TO_ADDR
// if p3 = 35 then
6680: LD_VAR 0 3
6684: PUSH
6685: LD_INT 35
6687: EQUAL
6688: IFFALSE 6698
// sTime := true ;
6690: LD_ADDR_EXP 77
6694: PUSH
6695: LD_INT 1
6697: ST_TO_ADDR
// if p3 = 36 then
6698: LD_VAR 0 3
6702: PUSH
6703: LD_INT 36
6705: EQUAL
6706: IFFALSE 6716
// sTools := true ;
6708: LD_ADDR_EXP 78
6712: PUSH
6713: LD_INT 1
6715: ST_TO_ADDR
// if p3 = 101 then
6716: LD_VAR 0 3
6720: PUSH
6721: LD_INT 101
6723: EQUAL
6724: IFFALSE 6734
// sSold := true ;
6726: LD_ADDR_EXP 43
6730: PUSH
6731: LD_INT 1
6733: ST_TO_ADDR
// if p3 = 102 then
6734: LD_VAR 0 3
6738: PUSH
6739: LD_INT 102
6741: EQUAL
6742: IFFALSE 6752
// sDiff := true ;
6744: LD_ADDR_EXP 44
6748: PUSH
6749: LD_INT 1
6751: ST_TO_ADDR
// if p3 = 103 then
6752: LD_VAR 0 3
6756: PUSH
6757: LD_INT 103
6759: EQUAL
6760: IFFALSE 6770
// sFog := true ;
6762: LD_ADDR_EXP 47
6766: PUSH
6767: LD_INT 1
6769: ST_TO_ADDR
// if p3 = 104 then
6770: LD_VAR 0 3
6774: PUSH
6775: LD_INT 104
6777: EQUAL
6778: IFFALSE 6788
// sReset := true ;
6780: LD_ADDR_EXP 48
6784: PUSH
6785: LD_INT 1
6787: ST_TO_ADDR
// if p3 = 105 then
6788: LD_VAR 0 3
6792: PUSH
6793: LD_INT 105
6795: EQUAL
6796: IFFALSE 6806
// sSun := true ;
6798: LD_ADDR_EXP 49
6802: PUSH
6803: LD_INT 1
6805: ST_TO_ADDR
// if p3 = 106 then
6806: LD_VAR 0 3
6810: PUSH
6811: LD_INT 106
6813: EQUAL
6814: IFFALSE 6824
// sTiger := true ;
6816: LD_ADDR_EXP 45
6820: PUSH
6821: LD_INT 1
6823: ST_TO_ADDR
// if p3 = 107 then
6824: LD_VAR 0 3
6828: PUSH
6829: LD_INT 107
6831: EQUAL
6832: IFFALSE 6842
// sBomb := true ;
6834: LD_ADDR_EXP 46
6838: PUSH
6839: LD_INT 1
6841: ST_TO_ADDR
// if p3 = 108 then
6842: LD_VAR 0 3
6846: PUSH
6847: LD_INT 108
6849: EQUAL
6850: IFFALSE 6860
// sWound := true ;
6852: LD_ADDR_EXP 54
6856: PUSH
6857: LD_INT 1
6859: ST_TO_ADDR
// if p3 = 109 then
6860: LD_VAR 0 3
6864: PUSH
6865: LD_INT 109
6867: EQUAL
6868: IFFALSE 6878
// sBetray := true ;
6870: LD_ADDR_EXP 58
6874: PUSH
6875: LD_INT 1
6877: ST_TO_ADDR
// if p3 = 110 then
6878: LD_VAR 0 3
6882: PUSH
6883: LD_INT 110
6885: EQUAL
6886: IFFALSE 6896
// sContamin := true ;
6888: LD_ADDR_EXP 59
6892: PUSH
6893: LD_INT 1
6895: ST_TO_ADDR
// if p3 = 111 then
6896: LD_VAR 0 3
6900: PUSH
6901: LD_INT 111
6903: EQUAL
6904: IFFALSE 6914
// sOil := true ;
6906: LD_ADDR_EXP 61
6910: PUSH
6911: LD_INT 1
6913: ST_TO_ADDR
// if p3 = 112 then
6914: LD_VAR 0 3
6918: PUSH
6919: LD_INT 112
6921: EQUAL
6922: IFFALSE 6932
// sStu := true ;
6924: LD_ADDR_EXP 65
6928: PUSH
6929: LD_INT 1
6931: ST_TO_ADDR
// if p3 = 113 then
6932: LD_VAR 0 3
6936: PUSH
6937: LD_INT 113
6939: EQUAL
6940: IFFALSE 6950
// sBazooka := true ;
6942: LD_ADDR_EXP 68
6946: PUSH
6947: LD_INT 1
6949: ST_TO_ADDR
// if p3 = 114 then
6950: LD_VAR 0 3
6954: PUSH
6955: LD_INT 114
6957: EQUAL
6958: IFFALSE 6968
// sMortar := true ;
6960: LD_ADDR_EXP 69
6964: PUSH
6965: LD_INT 1
6967: ST_TO_ADDR
// if p3 = 115 then
6968: LD_VAR 0 3
6972: PUSH
6973: LD_INT 115
6975: EQUAL
6976: IFFALSE 6986
// sRanger := true ;
6978: LD_ADDR_EXP 79
6982: PUSH
6983: LD_INT 1
6985: ST_TO_ADDR
// if p3 = 116 then
6986: LD_VAR 0 3
6990: PUSH
6991: LD_INT 116
6993: EQUAL
6994: IFFALSE 7004
// sComputer := true ;
6996: LD_ADDR_EXP 80
7000: PUSH
7001: LD_INT 1
7003: ST_TO_ADDR
// if p3 = 117 then
7004: LD_VAR 0 3
7008: PUSH
7009: LD_INT 117
7011: EQUAL
7012: IFFALSE 7022
// s30 := true ;
7014: LD_ADDR_EXP 81
7018: PUSH
7019: LD_INT 1
7021: ST_TO_ADDR
// if p3 = 118 then
7022: LD_VAR 0 3
7026: PUSH
7027: LD_INT 118
7029: EQUAL
7030: IFFALSE 7040
// s60 := true ;
7032: LD_ADDR_EXP 82
7036: PUSH
7037: LD_INT 1
7039: ST_TO_ADDR
// end ; if p2 = hack_mode then
7040: LD_VAR 0 2
7044: PUSH
7045: LD_INT 101
7047: EQUAL
7048: IFFALSE 7176
// begin case p3 of 1 :
7050: LD_VAR 0 3
7054: PUSH
7055: LD_INT 1
7057: DOUBLE
7058: EQUAL
7059: IFTRUE 7063
7061: GO 7070
7063: POP
// hHackUnlimitedResources ; 2 :
7064: CALL 19323 0 0
7068: GO 7176
7070: LD_INT 2
7072: DOUBLE
7073: EQUAL
7074: IFTRUE 7078
7076: GO 7085
7078: POP
// hHackSetLevel10 ; 3 :
7079: CALL 19456 0 0
7083: GO 7176
7085: LD_INT 3
7087: DOUBLE
7088: EQUAL
7089: IFTRUE 7093
7091: GO 7100
7093: POP
// hHackSetLevel10YourUnits ; 4 :
7094: CALL 19541 0 0
7098: GO 7176
7100: LD_INT 4
7102: DOUBLE
7103: EQUAL
7104: IFTRUE 7108
7106: GO 7115
7108: POP
// hHackInvincible ; 5 :
7109: CALL 19989 0 0
7113: GO 7176
7115: LD_INT 5
7117: DOUBLE
7118: EQUAL
7119: IFTRUE 7123
7121: GO 7130
7123: POP
// hHackInvisible ; 6 :
7124: CALL 20100 0 0
7128: GO 7176
7130: LD_INT 6
7132: DOUBLE
7133: EQUAL
7134: IFTRUE 7138
7136: GO 7145
7138: POP
// hHackChangeYourSide ; 7 :
7139: CALL 20157 0 0
7143: GO 7176
7145: LD_INT 7
7147: DOUBLE
7148: EQUAL
7149: IFTRUE 7153
7151: GO 7160
7153: POP
// hHackChangeUnitSide ; 8 :
7154: CALL 20199 0 0
7158: GO 7176
7160: LD_INT 8
7162: DOUBLE
7163: EQUAL
7164: IFTRUE 7168
7166: GO 7175
7168: POP
// hHackFog ; end ;
7169: CALL 20300 0 0
7173: GO 7176
7175: POP
// end ; if p2 = game_save_mode then
7176: LD_VAR 0 2
7180: PUSH
7181: LD_INT 102
7183: EQUAL
7184: IFFALSE 7239
// begin if p3 = 1 then
7186: LD_VAR 0 3
7190: PUSH
7191: LD_INT 1
7193: EQUAL
7194: IFFALSE 7206
// globalGameSaveCounter := p4 ;
7196: LD_ADDR_EXP 25
7200: PUSH
7201: LD_VAR 0 4
7205: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
7206: LD_VAR 0 3
7210: PUSH
7211: LD_INT 2
7213: EQUAL
7214: PUSH
7215: LD_EXP 25
7219: AND
7220: IFFALSE 7239
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
7222: LD_STRING setGameSaveCounter(
7224: PUSH
7225: LD_EXP 25
7229: STR
7230: PUSH
7231: LD_STRING )
7233: STR
7234: PPUSH
7235: CALL_OW 559
// end ; end ;
7239: LD_VAR 0 7
7243: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
7244: LD_INT 0
7246: PPUSH
// streamModeActive := false ;
7247: LD_ADDR_EXP 26
7251: PUSH
7252: LD_INT 0
7254: ST_TO_ADDR
// normalCounter := 36 ;
7255: LD_ADDR_EXP 27
7259: PUSH
7260: LD_INT 36
7262: ST_TO_ADDR
// hardcoreCounter := 18 ;
7263: LD_ADDR_EXP 28
7267: PUSH
7268: LD_INT 18
7270: ST_TO_ADDR
// sRocket := false ;
7271: LD_ADDR_EXP 31
7275: PUSH
7276: LD_INT 0
7278: ST_TO_ADDR
// sSpeed := false ;
7279: LD_ADDR_EXP 30
7283: PUSH
7284: LD_INT 0
7286: ST_TO_ADDR
// sEngine := false ;
7287: LD_ADDR_EXP 32
7291: PUSH
7292: LD_INT 0
7294: ST_TO_ADDR
// sSpec := false ;
7295: LD_ADDR_EXP 29
7299: PUSH
7300: LD_INT 0
7302: ST_TO_ADDR
// sLevel := false ;
7303: LD_ADDR_EXP 33
7307: PUSH
7308: LD_INT 0
7310: ST_TO_ADDR
// sArmoury := false ;
7311: LD_ADDR_EXP 34
7315: PUSH
7316: LD_INT 0
7318: ST_TO_ADDR
// sRadar := false ;
7319: LD_ADDR_EXP 35
7323: PUSH
7324: LD_INT 0
7326: ST_TO_ADDR
// sBunker := false ;
7327: LD_ADDR_EXP 36
7331: PUSH
7332: LD_INT 0
7334: ST_TO_ADDR
// sHack := false ;
7335: LD_ADDR_EXP 37
7339: PUSH
7340: LD_INT 0
7342: ST_TO_ADDR
// sFire := false ;
7343: LD_ADDR_EXP 38
7347: PUSH
7348: LD_INT 0
7350: ST_TO_ADDR
// sRefresh := false ;
7351: LD_ADDR_EXP 39
7355: PUSH
7356: LD_INT 0
7358: ST_TO_ADDR
// sExp := false ;
7359: LD_ADDR_EXP 40
7363: PUSH
7364: LD_INT 0
7366: ST_TO_ADDR
// sDepot := false ;
7367: LD_ADDR_EXP 41
7371: PUSH
7372: LD_INT 0
7374: ST_TO_ADDR
// sFlag := false ;
7375: LD_ADDR_EXP 42
7379: PUSH
7380: LD_INT 0
7382: ST_TO_ADDR
// sKamikadze := false ;
7383: LD_ADDR_EXP 50
7387: PUSH
7388: LD_INT 0
7390: ST_TO_ADDR
// sTroll := false ;
7391: LD_ADDR_EXP 51
7395: PUSH
7396: LD_INT 0
7398: ST_TO_ADDR
// sSlow := false ;
7399: LD_ADDR_EXP 52
7403: PUSH
7404: LD_INT 0
7406: ST_TO_ADDR
// sLack := false ;
7407: LD_ADDR_EXP 53
7411: PUSH
7412: LD_INT 0
7414: ST_TO_ADDR
// sTank := false ;
7415: LD_ADDR_EXP 55
7419: PUSH
7420: LD_INT 0
7422: ST_TO_ADDR
// sRemote := false ;
7423: LD_ADDR_EXP 56
7427: PUSH
7428: LD_INT 0
7430: ST_TO_ADDR
// sPowell := false ;
7431: LD_ADDR_EXP 57
7435: PUSH
7436: LD_INT 0
7438: ST_TO_ADDR
// sTeleport := false ;
7439: LD_ADDR_EXP 60
7443: PUSH
7444: LD_INT 0
7446: ST_TO_ADDR
// sOilTower := false ;
7447: LD_ADDR_EXP 62
7451: PUSH
7452: LD_INT 0
7454: ST_TO_ADDR
// sShovel := false ;
7455: LD_ADDR_EXP 63
7459: PUSH
7460: LD_INT 0
7462: ST_TO_ADDR
// sSheik := false ;
7463: LD_ADDR_EXP 64
7467: PUSH
7468: LD_INT 0
7470: ST_TO_ADDR
// sEarthquake := false ;
7471: LD_ADDR_EXP 66
7475: PUSH
7476: LD_INT 0
7478: ST_TO_ADDR
// sAI := false ;
7479: LD_ADDR_EXP 67
7483: PUSH
7484: LD_INT 0
7486: ST_TO_ADDR
// sCargo := false ;
7487: LD_ADDR_EXP 70
7491: PUSH
7492: LD_INT 0
7494: ST_TO_ADDR
// sDLaser := false ;
7495: LD_ADDR_EXP 71
7499: PUSH
7500: LD_INT 0
7502: ST_TO_ADDR
// sExchange := false ;
7503: LD_ADDR_EXP 72
7507: PUSH
7508: LD_INT 0
7510: ST_TO_ADDR
// sFac := false ;
7511: LD_ADDR_EXP 73
7515: PUSH
7516: LD_INT 0
7518: ST_TO_ADDR
// sPower := false ;
7519: LD_ADDR_EXP 74
7523: PUSH
7524: LD_INT 0
7526: ST_TO_ADDR
// sRandom := false ;
7527: LD_ADDR_EXP 75
7531: PUSH
7532: LD_INT 0
7534: ST_TO_ADDR
// sShield := false ;
7535: LD_ADDR_EXP 76
7539: PUSH
7540: LD_INT 0
7542: ST_TO_ADDR
// sTime := false ;
7543: LD_ADDR_EXP 77
7547: PUSH
7548: LD_INT 0
7550: ST_TO_ADDR
// sTools := false ;
7551: LD_ADDR_EXP 78
7555: PUSH
7556: LD_INT 0
7558: ST_TO_ADDR
// sSold := false ;
7559: LD_ADDR_EXP 43
7563: PUSH
7564: LD_INT 0
7566: ST_TO_ADDR
// sDiff := false ;
7567: LD_ADDR_EXP 44
7571: PUSH
7572: LD_INT 0
7574: ST_TO_ADDR
// sFog := false ;
7575: LD_ADDR_EXP 47
7579: PUSH
7580: LD_INT 0
7582: ST_TO_ADDR
// sReset := false ;
7583: LD_ADDR_EXP 48
7587: PUSH
7588: LD_INT 0
7590: ST_TO_ADDR
// sSun := false ;
7591: LD_ADDR_EXP 49
7595: PUSH
7596: LD_INT 0
7598: ST_TO_ADDR
// sTiger := false ;
7599: LD_ADDR_EXP 45
7603: PUSH
7604: LD_INT 0
7606: ST_TO_ADDR
// sBomb := false ;
7607: LD_ADDR_EXP 46
7611: PUSH
7612: LD_INT 0
7614: ST_TO_ADDR
// sWound := false ;
7615: LD_ADDR_EXP 54
7619: PUSH
7620: LD_INT 0
7622: ST_TO_ADDR
// sBetray := false ;
7623: LD_ADDR_EXP 58
7627: PUSH
7628: LD_INT 0
7630: ST_TO_ADDR
// sContamin := false ;
7631: LD_ADDR_EXP 59
7635: PUSH
7636: LD_INT 0
7638: ST_TO_ADDR
// sOil := false ;
7639: LD_ADDR_EXP 61
7643: PUSH
7644: LD_INT 0
7646: ST_TO_ADDR
// sStu := false ;
7647: LD_ADDR_EXP 65
7651: PUSH
7652: LD_INT 0
7654: ST_TO_ADDR
// sBazooka := false ;
7655: LD_ADDR_EXP 68
7659: PUSH
7660: LD_INT 0
7662: ST_TO_ADDR
// sMortar := false ;
7663: LD_ADDR_EXP 69
7667: PUSH
7668: LD_INT 0
7670: ST_TO_ADDR
// sRanger := false ;
7671: LD_ADDR_EXP 79
7675: PUSH
7676: LD_INT 0
7678: ST_TO_ADDR
// sComputer := false ;
7679: LD_ADDR_EXP 80
7683: PUSH
7684: LD_INT 0
7686: ST_TO_ADDR
// s30 := false ;
7687: LD_ADDR_EXP 81
7691: PUSH
7692: LD_INT 0
7694: ST_TO_ADDR
// s60 := false ;
7695: LD_ADDR_EXP 82
7699: PUSH
7700: LD_INT 0
7702: ST_TO_ADDR
// end ;
7703: LD_VAR 0 1
7707: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
7708: LD_INT 0
7710: PPUSH
7711: PPUSH
7712: PPUSH
7713: PPUSH
7714: PPUSH
7715: PPUSH
7716: PPUSH
// result := [ ] ;
7717: LD_ADDR_VAR 0 2
7721: PUSH
7722: EMPTY
7723: ST_TO_ADDR
// if campaign_id = 1 then
7724: LD_OWVAR 69
7728: PUSH
7729: LD_INT 1
7731: EQUAL
7732: IFFALSE 10898
// begin case mission_number of 1 :
7734: LD_OWVAR 70
7738: PUSH
7739: LD_INT 1
7741: DOUBLE
7742: EQUAL
7743: IFTRUE 7747
7745: GO 7823
7747: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
7748: LD_ADDR_VAR 0 2
7752: PUSH
7753: LD_INT 2
7755: PUSH
7756: LD_INT 4
7758: PUSH
7759: LD_INT 11
7761: PUSH
7762: LD_INT 12
7764: PUSH
7765: LD_INT 15
7767: PUSH
7768: LD_INT 16
7770: PUSH
7771: LD_INT 22
7773: PUSH
7774: LD_INT 23
7776: PUSH
7777: LD_INT 26
7779: PUSH
7780: EMPTY
7781: LIST
7782: LIST
7783: LIST
7784: LIST
7785: LIST
7786: LIST
7787: LIST
7788: LIST
7789: LIST
7790: PUSH
7791: LD_INT 101
7793: PUSH
7794: LD_INT 102
7796: PUSH
7797: LD_INT 106
7799: PUSH
7800: LD_INT 116
7802: PUSH
7803: LD_INT 117
7805: PUSH
7806: LD_INT 118
7808: PUSH
7809: EMPTY
7810: LIST
7811: LIST
7812: LIST
7813: LIST
7814: LIST
7815: LIST
7816: PUSH
7817: EMPTY
7818: LIST
7819: LIST
7820: ST_TO_ADDR
7821: GO 10896
7823: LD_INT 2
7825: DOUBLE
7826: EQUAL
7827: IFTRUE 7831
7829: GO 7915
7831: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
7832: LD_ADDR_VAR 0 2
7836: PUSH
7837: LD_INT 2
7839: PUSH
7840: LD_INT 4
7842: PUSH
7843: LD_INT 11
7845: PUSH
7846: LD_INT 12
7848: PUSH
7849: LD_INT 15
7851: PUSH
7852: LD_INT 16
7854: PUSH
7855: LD_INT 22
7857: PUSH
7858: LD_INT 23
7860: PUSH
7861: LD_INT 26
7863: PUSH
7864: EMPTY
7865: LIST
7866: LIST
7867: LIST
7868: LIST
7869: LIST
7870: LIST
7871: LIST
7872: LIST
7873: LIST
7874: PUSH
7875: LD_INT 101
7877: PUSH
7878: LD_INT 102
7880: PUSH
7881: LD_INT 105
7883: PUSH
7884: LD_INT 106
7886: PUSH
7887: LD_INT 108
7889: PUSH
7890: LD_INT 116
7892: PUSH
7893: LD_INT 117
7895: PUSH
7896: LD_INT 118
7898: PUSH
7899: EMPTY
7900: LIST
7901: LIST
7902: LIST
7903: LIST
7904: LIST
7905: LIST
7906: LIST
7907: LIST
7908: PUSH
7909: EMPTY
7910: LIST
7911: LIST
7912: ST_TO_ADDR
7913: GO 10896
7915: LD_INT 3
7917: DOUBLE
7918: EQUAL
7919: IFTRUE 7923
7921: GO 8011
7923: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
7924: LD_ADDR_VAR 0 2
7928: PUSH
7929: LD_INT 2
7931: PUSH
7932: LD_INT 4
7934: PUSH
7935: LD_INT 5
7937: PUSH
7938: LD_INT 11
7940: PUSH
7941: LD_INT 12
7943: PUSH
7944: LD_INT 15
7946: PUSH
7947: LD_INT 16
7949: PUSH
7950: LD_INT 22
7952: PUSH
7953: LD_INT 26
7955: PUSH
7956: LD_INT 36
7958: PUSH
7959: EMPTY
7960: LIST
7961: LIST
7962: LIST
7963: LIST
7964: LIST
7965: LIST
7966: LIST
7967: LIST
7968: LIST
7969: LIST
7970: PUSH
7971: LD_INT 101
7973: PUSH
7974: LD_INT 102
7976: PUSH
7977: LD_INT 105
7979: PUSH
7980: LD_INT 106
7982: PUSH
7983: LD_INT 108
7985: PUSH
7986: LD_INT 116
7988: PUSH
7989: LD_INT 117
7991: PUSH
7992: LD_INT 118
7994: PUSH
7995: EMPTY
7996: LIST
7997: LIST
7998: LIST
7999: LIST
8000: LIST
8001: LIST
8002: LIST
8003: LIST
8004: PUSH
8005: EMPTY
8006: LIST
8007: LIST
8008: ST_TO_ADDR
8009: GO 10896
8011: LD_INT 4
8013: DOUBLE
8014: EQUAL
8015: IFTRUE 8019
8017: GO 8115
8019: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
8020: LD_ADDR_VAR 0 2
8024: PUSH
8025: LD_INT 2
8027: PUSH
8028: LD_INT 4
8030: PUSH
8031: LD_INT 5
8033: PUSH
8034: LD_INT 8
8036: PUSH
8037: LD_INT 11
8039: PUSH
8040: LD_INT 12
8042: PUSH
8043: LD_INT 15
8045: PUSH
8046: LD_INT 16
8048: PUSH
8049: LD_INT 22
8051: PUSH
8052: LD_INT 23
8054: PUSH
8055: LD_INT 26
8057: PUSH
8058: LD_INT 36
8060: PUSH
8061: EMPTY
8062: LIST
8063: LIST
8064: LIST
8065: LIST
8066: LIST
8067: LIST
8068: LIST
8069: LIST
8070: LIST
8071: LIST
8072: LIST
8073: LIST
8074: PUSH
8075: LD_INT 101
8077: PUSH
8078: LD_INT 102
8080: PUSH
8081: LD_INT 105
8083: PUSH
8084: LD_INT 106
8086: PUSH
8087: LD_INT 108
8089: PUSH
8090: LD_INT 116
8092: PUSH
8093: LD_INT 117
8095: PUSH
8096: LD_INT 118
8098: PUSH
8099: EMPTY
8100: LIST
8101: LIST
8102: LIST
8103: LIST
8104: LIST
8105: LIST
8106: LIST
8107: LIST
8108: PUSH
8109: EMPTY
8110: LIST
8111: LIST
8112: ST_TO_ADDR
8113: GO 10896
8115: LD_INT 5
8117: DOUBLE
8118: EQUAL
8119: IFTRUE 8123
8121: GO 8235
8123: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
8124: LD_ADDR_VAR 0 2
8128: PUSH
8129: LD_INT 2
8131: PUSH
8132: LD_INT 4
8134: PUSH
8135: LD_INT 5
8137: PUSH
8138: LD_INT 6
8140: PUSH
8141: LD_INT 8
8143: PUSH
8144: LD_INT 11
8146: PUSH
8147: LD_INT 12
8149: PUSH
8150: LD_INT 15
8152: PUSH
8153: LD_INT 16
8155: PUSH
8156: LD_INT 22
8158: PUSH
8159: LD_INT 23
8161: PUSH
8162: LD_INT 25
8164: PUSH
8165: LD_INT 26
8167: PUSH
8168: LD_INT 36
8170: PUSH
8171: EMPTY
8172: LIST
8173: LIST
8174: LIST
8175: LIST
8176: LIST
8177: LIST
8178: LIST
8179: LIST
8180: LIST
8181: LIST
8182: LIST
8183: LIST
8184: LIST
8185: LIST
8186: PUSH
8187: LD_INT 101
8189: PUSH
8190: LD_INT 102
8192: PUSH
8193: LD_INT 105
8195: PUSH
8196: LD_INT 106
8198: PUSH
8199: LD_INT 108
8201: PUSH
8202: LD_INT 109
8204: PUSH
8205: LD_INT 112
8207: PUSH
8208: LD_INT 116
8210: PUSH
8211: LD_INT 117
8213: PUSH
8214: LD_INT 118
8216: PUSH
8217: EMPTY
8218: LIST
8219: LIST
8220: LIST
8221: LIST
8222: LIST
8223: LIST
8224: LIST
8225: LIST
8226: LIST
8227: LIST
8228: PUSH
8229: EMPTY
8230: LIST
8231: LIST
8232: ST_TO_ADDR
8233: GO 10896
8235: LD_INT 6
8237: DOUBLE
8238: EQUAL
8239: IFTRUE 8243
8241: GO 8375
8243: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
8244: LD_ADDR_VAR 0 2
8248: PUSH
8249: LD_INT 2
8251: PUSH
8252: LD_INT 4
8254: PUSH
8255: LD_INT 5
8257: PUSH
8258: LD_INT 6
8260: PUSH
8261: LD_INT 8
8263: PUSH
8264: LD_INT 11
8266: PUSH
8267: LD_INT 12
8269: PUSH
8270: LD_INT 15
8272: PUSH
8273: LD_INT 16
8275: PUSH
8276: LD_INT 20
8278: PUSH
8279: LD_INT 21
8281: PUSH
8282: LD_INT 22
8284: PUSH
8285: LD_INT 23
8287: PUSH
8288: LD_INT 25
8290: PUSH
8291: LD_INT 26
8293: PUSH
8294: LD_INT 30
8296: PUSH
8297: LD_INT 31
8299: PUSH
8300: LD_INT 32
8302: PUSH
8303: LD_INT 36
8305: PUSH
8306: EMPTY
8307: LIST
8308: LIST
8309: LIST
8310: LIST
8311: LIST
8312: LIST
8313: LIST
8314: LIST
8315: LIST
8316: LIST
8317: LIST
8318: LIST
8319: LIST
8320: LIST
8321: LIST
8322: LIST
8323: LIST
8324: LIST
8325: LIST
8326: PUSH
8327: LD_INT 101
8329: PUSH
8330: LD_INT 102
8332: PUSH
8333: LD_INT 105
8335: PUSH
8336: LD_INT 106
8338: PUSH
8339: LD_INT 108
8341: PUSH
8342: LD_INT 109
8344: PUSH
8345: LD_INT 112
8347: PUSH
8348: LD_INT 116
8350: PUSH
8351: LD_INT 117
8353: PUSH
8354: LD_INT 118
8356: PUSH
8357: EMPTY
8358: LIST
8359: LIST
8360: LIST
8361: LIST
8362: LIST
8363: LIST
8364: LIST
8365: LIST
8366: LIST
8367: LIST
8368: PUSH
8369: EMPTY
8370: LIST
8371: LIST
8372: ST_TO_ADDR
8373: GO 10896
8375: LD_INT 7
8377: DOUBLE
8378: EQUAL
8379: IFTRUE 8383
8381: GO 8495
8383: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
8384: LD_ADDR_VAR 0 2
8388: PUSH
8389: LD_INT 2
8391: PUSH
8392: LD_INT 4
8394: PUSH
8395: LD_INT 5
8397: PUSH
8398: LD_INT 7
8400: PUSH
8401: LD_INT 11
8403: PUSH
8404: LD_INT 12
8406: PUSH
8407: LD_INT 15
8409: PUSH
8410: LD_INT 16
8412: PUSH
8413: LD_INT 20
8415: PUSH
8416: LD_INT 21
8418: PUSH
8419: LD_INT 22
8421: PUSH
8422: LD_INT 23
8424: PUSH
8425: LD_INT 25
8427: PUSH
8428: LD_INT 26
8430: PUSH
8431: EMPTY
8432: LIST
8433: LIST
8434: LIST
8435: LIST
8436: LIST
8437: LIST
8438: LIST
8439: LIST
8440: LIST
8441: LIST
8442: LIST
8443: LIST
8444: LIST
8445: LIST
8446: PUSH
8447: LD_INT 101
8449: PUSH
8450: LD_INT 102
8452: PUSH
8453: LD_INT 103
8455: PUSH
8456: LD_INT 105
8458: PUSH
8459: LD_INT 106
8461: PUSH
8462: LD_INT 108
8464: PUSH
8465: LD_INT 112
8467: PUSH
8468: LD_INT 116
8470: PUSH
8471: LD_INT 117
8473: PUSH
8474: LD_INT 118
8476: PUSH
8477: EMPTY
8478: LIST
8479: LIST
8480: LIST
8481: LIST
8482: LIST
8483: LIST
8484: LIST
8485: LIST
8486: LIST
8487: LIST
8488: PUSH
8489: EMPTY
8490: LIST
8491: LIST
8492: ST_TO_ADDR
8493: GO 10896
8495: LD_INT 8
8497: DOUBLE
8498: EQUAL
8499: IFTRUE 8503
8501: GO 8643
8503: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
8504: LD_ADDR_VAR 0 2
8508: PUSH
8509: LD_INT 2
8511: PUSH
8512: LD_INT 4
8514: PUSH
8515: LD_INT 5
8517: PUSH
8518: LD_INT 6
8520: PUSH
8521: LD_INT 7
8523: PUSH
8524: LD_INT 8
8526: PUSH
8527: LD_INT 11
8529: PUSH
8530: LD_INT 12
8532: PUSH
8533: LD_INT 15
8535: PUSH
8536: LD_INT 16
8538: PUSH
8539: LD_INT 20
8541: PUSH
8542: LD_INT 21
8544: PUSH
8545: LD_INT 22
8547: PUSH
8548: LD_INT 23
8550: PUSH
8551: LD_INT 25
8553: PUSH
8554: LD_INT 26
8556: PUSH
8557: LD_INT 30
8559: PUSH
8560: LD_INT 31
8562: PUSH
8563: LD_INT 32
8565: PUSH
8566: LD_INT 36
8568: PUSH
8569: EMPTY
8570: LIST
8571: LIST
8572: LIST
8573: LIST
8574: LIST
8575: LIST
8576: LIST
8577: LIST
8578: LIST
8579: LIST
8580: LIST
8581: LIST
8582: LIST
8583: LIST
8584: LIST
8585: LIST
8586: LIST
8587: LIST
8588: LIST
8589: LIST
8590: PUSH
8591: LD_INT 101
8593: PUSH
8594: LD_INT 102
8596: PUSH
8597: LD_INT 103
8599: PUSH
8600: LD_INT 105
8602: PUSH
8603: LD_INT 106
8605: PUSH
8606: LD_INT 108
8608: PUSH
8609: LD_INT 109
8611: PUSH
8612: LD_INT 112
8614: PUSH
8615: LD_INT 116
8617: PUSH
8618: LD_INT 117
8620: PUSH
8621: LD_INT 118
8623: PUSH
8624: EMPTY
8625: LIST
8626: LIST
8627: LIST
8628: LIST
8629: LIST
8630: LIST
8631: LIST
8632: LIST
8633: LIST
8634: LIST
8635: LIST
8636: PUSH
8637: EMPTY
8638: LIST
8639: LIST
8640: ST_TO_ADDR
8641: GO 10896
8643: LD_INT 9
8645: DOUBLE
8646: EQUAL
8647: IFTRUE 8651
8649: GO 8799
8651: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
8652: LD_ADDR_VAR 0 2
8656: PUSH
8657: LD_INT 2
8659: PUSH
8660: LD_INT 4
8662: PUSH
8663: LD_INT 5
8665: PUSH
8666: LD_INT 6
8668: PUSH
8669: LD_INT 7
8671: PUSH
8672: LD_INT 8
8674: PUSH
8675: LD_INT 11
8677: PUSH
8678: LD_INT 12
8680: PUSH
8681: LD_INT 15
8683: PUSH
8684: LD_INT 16
8686: PUSH
8687: LD_INT 20
8689: PUSH
8690: LD_INT 21
8692: PUSH
8693: LD_INT 22
8695: PUSH
8696: LD_INT 23
8698: PUSH
8699: LD_INT 25
8701: PUSH
8702: LD_INT 26
8704: PUSH
8705: LD_INT 28
8707: PUSH
8708: LD_INT 30
8710: PUSH
8711: LD_INT 31
8713: PUSH
8714: LD_INT 32
8716: PUSH
8717: LD_INT 36
8719: PUSH
8720: EMPTY
8721: LIST
8722: LIST
8723: LIST
8724: LIST
8725: LIST
8726: LIST
8727: LIST
8728: LIST
8729: LIST
8730: LIST
8731: LIST
8732: LIST
8733: LIST
8734: LIST
8735: LIST
8736: LIST
8737: LIST
8738: LIST
8739: LIST
8740: LIST
8741: LIST
8742: PUSH
8743: LD_INT 101
8745: PUSH
8746: LD_INT 102
8748: PUSH
8749: LD_INT 103
8751: PUSH
8752: LD_INT 105
8754: PUSH
8755: LD_INT 106
8757: PUSH
8758: LD_INT 108
8760: PUSH
8761: LD_INT 109
8763: PUSH
8764: LD_INT 112
8766: PUSH
8767: LD_INT 114
8769: PUSH
8770: LD_INT 116
8772: PUSH
8773: LD_INT 117
8775: PUSH
8776: LD_INT 118
8778: PUSH
8779: EMPTY
8780: LIST
8781: LIST
8782: LIST
8783: LIST
8784: LIST
8785: LIST
8786: LIST
8787: LIST
8788: LIST
8789: LIST
8790: LIST
8791: LIST
8792: PUSH
8793: EMPTY
8794: LIST
8795: LIST
8796: ST_TO_ADDR
8797: GO 10896
8799: LD_INT 10
8801: DOUBLE
8802: EQUAL
8803: IFTRUE 8807
8805: GO 9003
8807: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
8808: LD_ADDR_VAR 0 2
8812: PUSH
8813: LD_INT 2
8815: PUSH
8816: LD_INT 4
8818: PUSH
8819: LD_INT 5
8821: PUSH
8822: LD_INT 6
8824: PUSH
8825: LD_INT 7
8827: PUSH
8828: LD_INT 8
8830: PUSH
8831: LD_INT 9
8833: PUSH
8834: LD_INT 10
8836: PUSH
8837: LD_INT 11
8839: PUSH
8840: LD_INT 12
8842: PUSH
8843: LD_INT 13
8845: PUSH
8846: LD_INT 14
8848: PUSH
8849: LD_INT 15
8851: PUSH
8852: LD_INT 16
8854: PUSH
8855: LD_INT 17
8857: PUSH
8858: LD_INT 18
8860: PUSH
8861: LD_INT 19
8863: PUSH
8864: LD_INT 20
8866: PUSH
8867: LD_INT 21
8869: PUSH
8870: LD_INT 22
8872: PUSH
8873: LD_INT 23
8875: PUSH
8876: LD_INT 24
8878: PUSH
8879: LD_INT 25
8881: PUSH
8882: LD_INT 26
8884: PUSH
8885: LD_INT 28
8887: PUSH
8888: LD_INT 30
8890: PUSH
8891: LD_INT 31
8893: PUSH
8894: LD_INT 32
8896: PUSH
8897: LD_INT 36
8899: PUSH
8900: EMPTY
8901: LIST
8902: LIST
8903: LIST
8904: LIST
8905: LIST
8906: LIST
8907: LIST
8908: LIST
8909: LIST
8910: LIST
8911: LIST
8912: LIST
8913: LIST
8914: LIST
8915: LIST
8916: LIST
8917: LIST
8918: LIST
8919: LIST
8920: LIST
8921: LIST
8922: LIST
8923: LIST
8924: LIST
8925: LIST
8926: LIST
8927: LIST
8928: LIST
8929: LIST
8930: PUSH
8931: LD_INT 101
8933: PUSH
8934: LD_INT 102
8936: PUSH
8937: LD_INT 103
8939: PUSH
8940: LD_INT 104
8942: PUSH
8943: LD_INT 105
8945: PUSH
8946: LD_INT 106
8948: PUSH
8949: LD_INT 107
8951: PUSH
8952: LD_INT 108
8954: PUSH
8955: LD_INT 109
8957: PUSH
8958: LD_INT 110
8960: PUSH
8961: LD_INT 111
8963: PUSH
8964: LD_INT 112
8966: PUSH
8967: LD_INT 114
8969: PUSH
8970: LD_INT 116
8972: PUSH
8973: LD_INT 117
8975: PUSH
8976: LD_INT 118
8978: PUSH
8979: EMPTY
8980: LIST
8981: LIST
8982: LIST
8983: LIST
8984: LIST
8985: LIST
8986: LIST
8987: LIST
8988: LIST
8989: LIST
8990: LIST
8991: LIST
8992: LIST
8993: LIST
8994: LIST
8995: LIST
8996: PUSH
8997: EMPTY
8998: LIST
8999: LIST
9000: ST_TO_ADDR
9001: GO 10896
9003: LD_INT 11
9005: DOUBLE
9006: EQUAL
9007: IFTRUE 9011
9009: GO 9215
9011: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
9012: LD_ADDR_VAR 0 2
9016: PUSH
9017: LD_INT 2
9019: PUSH
9020: LD_INT 3
9022: PUSH
9023: LD_INT 4
9025: PUSH
9026: LD_INT 5
9028: PUSH
9029: LD_INT 6
9031: PUSH
9032: LD_INT 7
9034: PUSH
9035: LD_INT 8
9037: PUSH
9038: LD_INT 9
9040: PUSH
9041: LD_INT 10
9043: PUSH
9044: LD_INT 11
9046: PUSH
9047: LD_INT 12
9049: PUSH
9050: LD_INT 13
9052: PUSH
9053: LD_INT 14
9055: PUSH
9056: LD_INT 15
9058: PUSH
9059: LD_INT 16
9061: PUSH
9062: LD_INT 17
9064: PUSH
9065: LD_INT 18
9067: PUSH
9068: LD_INT 19
9070: PUSH
9071: LD_INT 20
9073: PUSH
9074: LD_INT 21
9076: PUSH
9077: LD_INT 22
9079: PUSH
9080: LD_INT 23
9082: PUSH
9083: LD_INT 24
9085: PUSH
9086: LD_INT 25
9088: PUSH
9089: LD_INT 26
9091: PUSH
9092: LD_INT 28
9094: PUSH
9095: LD_INT 30
9097: PUSH
9098: LD_INT 31
9100: PUSH
9101: LD_INT 32
9103: PUSH
9104: LD_INT 34
9106: PUSH
9107: LD_INT 36
9109: PUSH
9110: EMPTY
9111: LIST
9112: LIST
9113: LIST
9114: LIST
9115: LIST
9116: LIST
9117: LIST
9118: LIST
9119: LIST
9120: LIST
9121: LIST
9122: LIST
9123: LIST
9124: LIST
9125: LIST
9126: LIST
9127: LIST
9128: LIST
9129: LIST
9130: LIST
9131: LIST
9132: LIST
9133: LIST
9134: LIST
9135: LIST
9136: LIST
9137: LIST
9138: LIST
9139: LIST
9140: LIST
9141: LIST
9142: PUSH
9143: LD_INT 101
9145: PUSH
9146: LD_INT 102
9148: PUSH
9149: LD_INT 103
9151: PUSH
9152: LD_INT 104
9154: PUSH
9155: LD_INT 105
9157: PUSH
9158: LD_INT 106
9160: PUSH
9161: LD_INT 107
9163: PUSH
9164: LD_INT 108
9166: PUSH
9167: LD_INT 109
9169: PUSH
9170: LD_INT 110
9172: PUSH
9173: LD_INT 111
9175: PUSH
9176: LD_INT 112
9178: PUSH
9179: LD_INT 114
9181: PUSH
9182: LD_INT 116
9184: PUSH
9185: LD_INT 117
9187: PUSH
9188: LD_INT 118
9190: PUSH
9191: EMPTY
9192: LIST
9193: LIST
9194: LIST
9195: LIST
9196: LIST
9197: LIST
9198: LIST
9199: LIST
9200: LIST
9201: LIST
9202: LIST
9203: LIST
9204: LIST
9205: LIST
9206: LIST
9207: LIST
9208: PUSH
9209: EMPTY
9210: LIST
9211: LIST
9212: ST_TO_ADDR
9213: GO 10896
9215: LD_INT 12
9217: DOUBLE
9218: EQUAL
9219: IFTRUE 9223
9221: GO 9443
9223: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
9224: LD_ADDR_VAR 0 2
9228: PUSH
9229: LD_INT 1
9231: PUSH
9232: LD_INT 2
9234: PUSH
9235: LD_INT 3
9237: PUSH
9238: LD_INT 4
9240: PUSH
9241: LD_INT 5
9243: PUSH
9244: LD_INT 6
9246: PUSH
9247: LD_INT 7
9249: PUSH
9250: LD_INT 8
9252: PUSH
9253: LD_INT 9
9255: PUSH
9256: LD_INT 10
9258: PUSH
9259: LD_INT 11
9261: PUSH
9262: LD_INT 12
9264: PUSH
9265: LD_INT 13
9267: PUSH
9268: LD_INT 14
9270: PUSH
9271: LD_INT 15
9273: PUSH
9274: LD_INT 16
9276: PUSH
9277: LD_INT 17
9279: PUSH
9280: LD_INT 18
9282: PUSH
9283: LD_INT 19
9285: PUSH
9286: LD_INT 20
9288: PUSH
9289: LD_INT 21
9291: PUSH
9292: LD_INT 22
9294: PUSH
9295: LD_INT 23
9297: PUSH
9298: LD_INT 24
9300: PUSH
9301: LD_INT 25
9303: PUSH
9304: LD_INT 26
9306: PUSH
9307: LD_INT 27
9309: PUSH
9310: LD_INT 28
9312: PUSH
9313: LD_INT 30
9315: PUSH
9316: LD_INT 31
9318: PUSH
9319: LD_INT 32
9321: PUSH
9322: LD_INT 33
9324: PUSH
9325: LD_INT 34
9327: PUSH
9328: LD_INT 36
9330: PUSH
9331: EMPTY
9332: LIST
9333: LIST
9334: LIST
9335: LIST
9336: LIST
9337: LIST
9338: LIST
9339: LIST
9340: LIST
9341: LIST
9342: LIST
9343: LIST
9344: LIST
9345: LIST
9346: LIST
9347: LIST
9348: LIST
9349: LIST
9350: LIST
9351: LIST
9352: LIST
9353: LIST
9354: LIST
9355: LIST
9356: LIST
9357: LIST
9358: LIST
9359: LIST
9360: LIST
9361: LIST
9362: LIST
9363: LIST
9364: LIST
9365: LIST
9366: PUSH
9367: LD_INT 101
9369: PUSH
9370: LD_INT 102
9372: PUSH
9373: LD_INT 103
9375: PUSH
9376: LD_INT 104
9378: PUSH
9379: LD_INT 105
9381: PUSH
9382: LD_INT 106
9384: PUSH
9385: LD_INT 107
9387: PUSH
9388: LD_INT 108
9390: PUSH
9391: LD_INT 109
9393: PUSH
9394: LD_INT 110
9396: PUSH
9397: LD_INT 111
9399: PUSH
9400: LD_INT 112
9402: PUSH
9403: LD_INT 113
9405: PUSH
9406: LD_INT 114
9408: PUSH
9409: LD_INT 116
9411: PUSH
9412: LD_INT 117
9414: PUSH
9415: LD_INT 118
9417: PUSH
9418: EMPTY
9419: LIST
9420: LIST
9421: LIST
9422: LIST
9423: LIST
9424: LIST
9425: LIST
9426: LIST
9427: LIST
9428: LIST
9429: LIST
9430: LIST
9431: LIST
9432: LIST
9433: LIST
9434: LIST
9435: LIST
9436: PUSH
9437: EMPTY
9438: LIST
9439: LIST
9440: ST_TO_ADDR
9441: GO 10896
9443: LD_INT 13
9445: DOUBLE
9446: EQUAL
9447: IFTRUE 9451
9449: GO 9659
9451: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
9452: LD_ADDR_VAR 0 2
9456: PUSH
9457: LD_INT 1
9459: PUSH
9460: LD_INT 2
9462: PUSH
9463: LD_INT 3
9465: PUSH
9466: LD_INT 4
9468: PUSH
9469: LD_INT 5
9471: PUSH
9472: LD_INT 8
9474: PUSH
9475: LD_INT 9
9477: PUSH
9478: LD_INT 10
9480: PUSH
9481: LD_INT 11
9483: PUSH
9484: LD_INT 12
9486: PUSH
9487: LD_INT 14
9489: PUSH
9490: LD_INT 15
9492: PUSH
9493: LD_INT 16
9495: PUSH
9496: LD_INT 17
9498: PUSH
9499: LD_INT 18
9501: PUSH
9502: LD_INT 19
9504: PUSH
9505: LD_INT 20
9507: PUSH
9508: LD_INT 21
9510: PUSH
9511: LD_INT 22
9513: PUSH
9514: LD_INT 23
9516: PUSH
9517: LD_INT 24
9519: PUSH
9520: LD_INT 25
9522: PUSH
9523: LD_INT 26
9525: PUSH
9526: LD_INT 27
9528: PUSH
9529: LD_INT 28
9531: PUSH
9532: LD_INT 30
9534: PUSH
9535: LD_INT 31
9537: PUSH
9538: LD_INT 32
9540: PUSH
9541: LD_INT 33
9543: PUSH
9544: LD_INT 34
9546: PUSH
9547: LD_INT 36
9549: PUSH
9550: EMPTY
9551: LIST
9552: LIST
9553: LIST
9554: LIST
9555: LIST
9556: LIST
9557: LIST
9558: LIST
9559: LIST
9560: LIST
9561: LIST
9562: LIST
9563: LIST
9564: LIST
9565: LIST
9566: LIST
9567: LIST
9568: LIST
9569: LIST
9570: LIST
9571: LIST
9572: LIST
9573: LIST
9574: LIST
9575: LIST
9576: LIST
9577: LIST
9578: LIST
9579: LIST
9580: LIST
9581: LIST
9582: PUSH
9583: LD_INT 101
9585: PUSH
9586: LD_INT 102
9588: PUSH
9589: LD_INT 103
9591: PUSH
9592: LD_INT 104
9594: PUSH
9595: LD_INT 105
9597: PUSH
9598: LD_INT 106
9600: PUSH
9601: LD_INT 107
9603: PUSH
9604: LD_INT 108
9606: PUSH
9607: LD_INT 109
9609: PUSH
9610: LD_INT 110
9612: PUSH
9613: LD_INT 111
9615: PUSH
9616: LD_INT 112
9618: PUSH
9619: LD_INT 113
9621: PUSH
9622: LD_INT 114
9624: PUSH
9625: LD_INT 116
9627: PUSH
9628: LD_INT 117
9630: PUSH
9631: LD_INT 118
9633: PUSH
9634: EMPTY
9635: LIST
9636: LIST
9637: LIST
9638: LIST
9639: LIST
9640: LIST
9641: LIST
9642: LIST
9643: LIST
9644: LIST
9645: LIST
9646: LIST
9647: LIST
9648: LIST
9649: LIST
9650: LIST
9651: LIST
9652: PUSH
9653: EMPTY
9654: LIST
9655: LIST
9656: ST_TO_ADDR
9657: GO 10896
9659: LD_INT 14
9661: DOUBLE
9662: EQUAL
9663: IFTRUE 9667
9665: GO 9891
9667: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
9668: LD_ADDR_VAR 0 2
9672: PUSH
9673: LD_INT 1
9675: PUSH
9676: LD_INT 2
9678: PUSH
9679: LD_INT 3
9681: PUSH
9682: LD_INT 4
9684: PUSH
9685: LD_INT 5
9687: PUSH
9688: LD_INT 6
9690: PUSH
9691: LD_INT 7
9693: PUSH
9694: LD_INT 8
9696: PUSH
9697: LD_INT 9
9699: PUSH
9700: LD_INT 10
9702: PUSH
9703: LD_INT 11
9705: PUSH
9706: LD_INT 12
9708: PUSH
9709: LD_INT 13
9711: PUSH
9712: LD_INT 14
9714: PUSH
9715: LD_INT 15
9717: PUSH
9718: LD_INT 16
9720: PUSH
9721: LD_INT 17
9723: PUSH
9724: LD_INT 18
9726: PUSH
9727: LD_INT 19
9729: PUSH
9730: LD_INT 20
9732: PUSH
9733: LD_INT 21
9735: PUSH
9736: LD_INT 22
9738: PUSH
9739: LD_INT 23
9741: PUSH
9742: LD_INT 24
9744: PUSH
9745: LD_INT 25
9747: PUSH
9748: LD_INT 26
9750: PUSH
9751: LD_INT 27
9753: PUSH
9754: LD_INT 28
9756: PUSH
9757: LD_INT 29
9759: PUSH
9760: LD_INT 30
9762: PUSH
9763: LD_INT 31
9765: PUSH
9766: LD_INT 32
9768: PUSH
9769: LD_INT 33
9771: PUSH
9772: LD_INT 34
9774: PUSH
9775: LD_INT 36
9777: PUSH
9778: EMPTY
9779: LIST
9780: LIST
9781: LIST
9782: LIST
9783: LIST
9784: LIST
9785: LIST
9786: LIST
9787: LIST
9788: LIST
9789: LIST
9790: LIST
9791: LIST
9792: LIST
9793: LIST
9794: LIST
9795: LIST
9796: LIST
9797: LIST
9798: LIST
9799: LIST
9800: LIST
9801: LIST
9802: LIST
9803: LIST
9804: LIST
9805: LIST
9806: LIST
9807: LIST
9808: LIST
9809: LIST
9810: LIST
9811: LIST
9812: LIST
9813: LIST
9814: PUSH
9815: LD_INT 101
9817: PUSH
9818: LD_INT 102
9820: PUSH
9821: LD_INT 103
9823: PUSH
9824: LD_INT 104
9826: PUSH
9827: LD_INT 105
9829: PUSH
9830: LD_INT 106
9832: PUSH
9833: LD_INT 107
9835: PUSH
9836: LD_INT 108
9838: PUSH
9839: LD_INT 109
9841: PUSH
9842: LD_INT 110
9844: PUSH
9845: LD_INT 111
9847: PUSH
9848: LD_INT 112
9850: PUSH
9851: LD_INT 113
9853: PUSH
9854: LD_INT 114
9856: PUSH
9857: LD_INT 116
9859: PUSH
9860: LD_INT 117
9862: PUSH
9863: LD_INT 118
9865: PUSH
9866: EMPTY
9867: LIST
9868: LIST
9869: LIST
9870: LIST
9871: LIST
9872: LIST
9873: LIST
9874: LIST
9875: LIST
9876: LIST
9877: LIST
9878: LIST
9879: LIST
9880: LIST
9881: LIST
9882: LIST
9883: LIST
9884: PUSH
9885: EMPTY
9886: LIST
9887: LIST
9888: ST_TO_ADDR
9889: GO 10896
9891: LD_INT 15
9893: DOUBLE
9894: EQUAL
9895: IFTRUE 9899
9897: GO 10123
9899: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
9900: LD_ADDR_VAR 0 2
9904: PUSH
9905: LD_INT 1
9907: PUSH
9908: LD_INT 2
9910: PUSH
9911: LD_INT 3
9913: PUSH
9914: LD_INT 4
9916: PUSH
9917: LD_INT 5
9919: PUSH
9920: LD_INT 6
9922: PUSH
9923: LD_INT 7
9925: PUSH
9926: LD_INT 8
9928: PUSH
9929: LD_INT 9
9931: PUSH
9932: LD_INT 10
9934: PUSH
9935: LD_INT 11
9937: PUSH
9938: LD_INT 12
9940: PUSH
9941: LD_INT 13
9943: PUSH
9944: LD_INT 14
9946: PUSH
9947: LD_INT 15
9949: PUSH
9950: LD_INT 16
9952: PUSH
9953: LD_INT 17
9955: PUSH
9956: LD_INT 18
9958: PUSH
9959: LD_INT 19
9961: PUSH
9962: LD_INT 20
9964: PUSH
9965: LD_INT 21
9967: PUSH
9968: LD_INT 22
9970: PUSH
9971: LD_INT 23
9973: PUSH
9974: LD_INT 24
9976: PUSH
9977: LD_INT 25
9979: PUSH
9980: LD_INT 26
9982: PUSH
9983: LD_INT 27
9985: PUSH
9986: LD_INT 28
9988: PUSH
9989: LD_INT 29
9991: PUSH
9992: LD_INT 30
9994: PUSH
9995: LD_INT 31
9997: PUSH
9998: LD_INT 32
10000: PUSH
10001: LD_INT 33
10003: PUSH
10004: LD_INT 34
10006: PUSH
10007: LD_INT 36
10009: PUSH
10010: EMPTY
10011: LIST
10012: LIST
10013: LIST
10014: LIST
10015: LIST
10016: LIST
10017: LIST
10018: LIST
10019: LIST
10020: LIST
10021: LIST
10022: LIST
10023: LIST
10024: LIST
10025: LIST
10026: LIST
10027: LIST
10028: LIST
10029: LIST
10030: LIST
10031: LIST
10032: LIST
10033: LIST
10034: LIST
10035: LIST
10036: LIST
10037: LIST
10038: LIST
10039: LIST
10040: LIST
10041: LIST
10042: LIST
10043: LIST
10044: LIST
10045: LIST
10046: PUSH
10047: LD_INT 101
10049: PUSH
10050: LD_INT 102
10052: PUSH
10053: LD_INT 103
10055: PUSH
10056: LD_INT 104
10058: PUSH
10059: LD_INT 105
10061: PUSH
10062: LD_INT 106
10064: PUSH
10065: LD_INT 107
10067: PUSH
10068: LD_INT 108
10070: PUSH
10071: LD_INT 109
10073: PUSH
10074: LD_INT 110
10076: PUSH
10077: LD_INT 111
10079: PUSH
10080: LD_INT 112
10082: PUSH
10083: LD_INT 113
10085: PUSH
10086: LD_INT 114
10088: PUSH
10089: LD_INT 116
10091: PUSH
10092: LD_INT 117
10094: PUSH
10095: LD_INT 118
10097: PUSH
10098: EMPTY
10099: LIST
10100: LIST
10101: LIST
10102: LIST
10103: LIST
10104: LIST
10105: LIST
10106: LIST
10107: LIST
10108: LIST
10109: LIST
10110: LIST
10111: LIST
10112: LIST
10113: LIST
10114: LIST
10115: LIST
10116: PUSH
10117: EMPTY
10118: LIST
10119: LIST
10120: ST_TO_ADDR
10121: GO 10896
10123: LD_INT 16
10125: DOUBLE
10126: EQUAL
10127: IFTRUE 10131
10129: GO 10267
10131: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
10132: LD_ADDR_VAR 0 2
10136: PUSH
10137: LD_INT 2
10139: PUSH
10140: LD_INT 4
10142: PUSH
10143: LD_INT 5
10145: PUSH
10146: LD_INT 7
10148: PUSH
10149: LD_INT 11
10151: PUSH
10152: LD_INT 12
10154: PUSH
10155: LD_INT 15
10157: PUSH
10158: LD_INT 16
10160: PUSH
10161: LD_INT 20
10163: PUSH
10164: LD_INT 21
10166: PUSH
10167: LD_INT 22
10169: PUSH
10170: LD_INT 23
10172: PUSH
10173: LD_INT 25
10175: PUSH
10176: LD_INT 26
10178: PUSH
10179: LD_INT 30
10181: PUSH
10182: LD_INT 31
10184: PUSH
10185: LD_INT 32
10187: PUSH
10188: LD_INT 33
10190: PUSH
10191: LD_INT 34
10193: PUSH
10194: EMPTY
10195: LIST
10196: LIST
10197: LIST
10198: LIST
10199: LIST
10200: LIST
10201: LIST
10202: LIST
10203: LIST
10204: LIST
10205: LIST
10206: LIST
10207: LIST
10208: LIST
10209: LIST
10210: LIST
10211: LIST
10212: LIST
10213: LIST
10214: PUSH
10215: LD_INT 101
10217: PUSH
10218: LD_INT 102
10220: PUSH
10221: LD_INT 103
10223: PUSH
10224: LD_INT 106
10226: PUSH
10227: LD_INT 108
10229: PUSH
10230: LD_INT 112
10232: PUSH
10233: LD_INT 113
10235: PUSH
10236: LD_INT 114
10238: PUSH
10239: LD_INT 116
10241: PUSH
10242: LD_INT 117
10244: PUSH
10245: LD_INT 118
10247: PUSH
10248: EMPTY
10249: LIST
10250: LIST
10251: LIST
10252: LIST
10253: LIST
10254: LIST
10255: LIST
10256: LIST
10257: LIST
10258: LIST
10259: LIST
10260: PUSH
10261: EMPTY
10262: LIST
10263: LIST
10264: ST_TO_ADDR
10265: GO 10896
10267: LD_INT 17
10269: DOUBLE
10270: EQUAL
10271: IFTRUE 10275
10273: GO 10499
10275: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
10276: LD_ADDR_VAR 0 2
10280: PUSH
10281: LD_INT 1
10283: PUSH
10284: LD_INT 2
10286: PUSH
10287: LD_INT 3
10289: PUSH
10290: LD_INT 4
10292: PUSH
10293: LD_INT 5
10295: PUSH
10296: LD_INT 6
10298: PUSH
10299: LD_INT 7
10301: PUSH
10302: LD_INT 8
10304: PUSH
10305: LD_INT 9
10307: PUSH
10308: LD_INT 10
10310: PUSH
10311: LD_INT 11
10313: PUSH
10314: LD_INT 12
10316: PUSH
10317: LD_INT 13
10319: PUSH
10320: LD_INT 14
10322: PUSH
10323: LD_INT 15
10325: PUSH
10326: LD_INT 16
10328: PUSH
10329: LD_INT 17
10331: PUSH
10332: LD_INT 18
10334: PUSH
10335: LD_INT 19
10337: PUSH
10338: LD_INT 20
10340: PUSH
10341: LD_INT 21
10343: PUSH
10344: LD_INT 22
10346: PUSH
10347: LD_INT 23
10349: PUSH
10350: LD_INT 24
10352: PUSH
10353: LD_INT 25
10355: PUSH
10356: LD_INT 26
10358: PUSH
10359: LD_INT 27
10361: PUSH
10362: LD_INT 28
10364: PUSH
10365: LD_INT 29
10367: PUSH
10368: LD_INT 30
10370: PUSH
10371: LD_INT 31
10373: PUSH
10374: LD_INT 32
10376: PUSH
10377: LD_INT 33
10379: PUSH
10380: LD_INT 34
10382: PUSH
10383: LD_INT 36
10385: PUSH
10386: EMPTY
10387: LIST
10388: LIST
10389: LIST
10390: LIST
10391: LIST
10392: LIST
10393: LIST
10394: LIST
10395: LIST
10396: LIST
10397: LIST
10398: LIST
10399: LIST
10400: LIST
10401: LIST
10402: LIST
10403: LIST
10404: LIST
10405: LIST
10406: LIST
10407: LIST
10408: LIST
10409: LIST
10410: LIST
10411: LIST
10412: LIST
10413: LIST
10414: LIST
10415: LIST
10416: LIST
10417: LIST
10418: LIST
10419: LIST
10420: LIST
10421: LIST
10422: PUSH
10423: LD_INT 101
10425: PUSH
10426: LD_INT 102
10428: PUSH
10429: LD_INT 103
10431: PUSH
10432: LD_INT 104
10434: PUSH
10435: LD_INT 105
10437: PUSH
10438: LD_INT 106
10440: PUSH
10441: LD_INT 107
10443: PUSH
10444: LD_INT 108
10446: PUSH
10447: LD_INT 109
10449: PUSH
10450: LD_INT 110
10452: PUSH
10453: LD_INT 111
10455: PUSH
10456: LD_INT 112
10458: PUSH
10459: LD_INT 113
10461: PUSH
10462: LD_INT 114
10464: PUSH
10465: LD_INT 116
10467: PUSH
10468: LD_INT 117
10470: PUSH
10471: LD_INT 118
10473: PUSH
10474: EMPTY
10475: LIST
10476: LIST
10477: LIST
10478: LIST
10479: LIST
10480: LIST
10481: LIST
10482: LIST
10483: LIST
10484: LIST
10485: LIST
10486: LIST
10487: LIST
10488: LIST
10489: LIST
10490: LIST
10491: LIST
10492: PUSH
10493: EMPTY
10494: LIST
10495: LIST
10496: ST_TO_ADDR
10497: GO 10896
10499: LD_INT 18
10501: DOUBLE
10502: EQUAL
10503: IFTRUE 10507
10505: GO 10655
10507: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
10508: LD_ADDR_VAR 0 2
10512: PUSH
10513: LD_INT 2
10515: PUSH
10516: LD_INT 4
10518: PUSH
10519: LD_INT 5
10521: PUSH
10522: LD_INT 7
10524: PUSH
10525: LD_INT 11
10527: PUSH
10528: LD_INT 12
10530: PUSH
10531: LD_INT 15
10533: PUSH
10534: LD_INT 16
10536: PUSH
10537: LD_INT 20
10539: PUSH
10540: LD_INT 21
10542: PUSH
10543: LD_INT 22
10545: PUSH
10546: LD_INT 23
10548: PUSH
10549: LD_INT 25
10551: PUSH
10552: LD_INT 26
10554: PUSH
10555: LD_INT 30
10557: PUSH
10558: LD_INT 31
10560: PUSH
10561: LD_INT 32
10563: PUSH
10564: LD_INT 33
10566: PUSH
10567: LD_INT 34
10569: PUSH
10570: LD_INT 35
10572: PUSH
10573: LD_INT 36
10575: PUSH
10576: EMPTY
10577: LIST
10578: LIST
10579: LIST
10580: LIST
10581: LIST
10582: LIST
10583: LIST
10584: LIST
10585: LIST
10586: LIST
10587: LIST
10588: LIST
10589: LIST
10590: LIST
10591: LIST
10592: LIST
10593: LIST
10594: LIST
10595: LIST
10596: LIST
10597: LIST
10598: PUSH
10599: LD_INT 101
10601: PUSH
10602: LD_INT 102
10604: PUSH
10605: LD_INT 103
10607: PUSH
10608: LD_INT 106
10610: PUSH
10611: LD_INT 108
10613: PUSH
10614: LD_INT 112
10616: PUSH
10617: LD_INT 113
10619: PUSH
10620: LD_INT 114
10622: PUSH
10623: LD_INT 115
10625: PUSH
10626: LD_INT 116
10628: PUSH
10629: LD_INT 117
10631: PUSH
10632: LD_INT 118
10634: PUSH
10635: EMPTY
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: LIST
10641: LIST
10642: LIST
10643: LIST
10644: LIST
10645: LIST
10646: LIST
10647: LIST
10648: PUSH
10649: EMPTY
10650: LIST
10651: LIST
10652: ST_TO_ADDR
10653: GO 10896
10655: LD_INT 19
10657: DOUBLE
10658: EQUAL
10659: IFTRUE 10663
10661: GO 10895
10663: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
10664: LD_ADDR_VAR 0 2
10668: PUSH
10669: LD_INT 1
10671: PUSH
10672: LD_INT 2
10674: PUSH
10675: LD_INT 3
10677: PUSH
10678: LD_INT 4
10680: PUSH
10681: LD_INT 5
10683: PUSH
10684: LD_INT 6
10686: PUSH
10687: LD_INT 7
10689: PUSH
10690: LD_INT 8
10692: PUSH
10693: LD_INT 9
10695: PUSH
10696: LD_INT 10
10698: PUSH
10699: LD_INT 11
10701: PUSH
10702: LD_INT 12
10704: PUSH
10705: LD_INT 13
10707: PUSH
10708: LD_INT 14
10710: PUSH
10711: LD_INT 15
10713: PUSH
10714: LD_INT 16
10716: PUSH
10717: LD_INT 17
10719: PUSH
10720: LD_INT 18
10722: PUSH
10723: LD_INT 19
10725: PUSH
10726: LD_INT 20
10728: PUSH
10729: LD_INT 21
10731: PUSH
10732: LD_INT 22
10734: PUSH
10735: LD_INT 23
10737: PUSH
10738: LD_INT 24
10740: PUSH
10741: LD_INT 25
10743: PUSH
10744: LD_INT 26
10746: PUSH
10747: LD_INT 27
10749: PUSH
10750: LD_INT 28
10752: PUSH
10753: LD_INT 29
10755: PUSH
10756: LD_INT 30
10758: PUSH
10759: LD_INT 31
10761: PUSH
10762: LD_INT 32
10764: PUSH
10765: LD_INT 33
10767: PUSH
10768: LD_INT 34
10770: PUSH
10771: LD_INT 35
10773: PUSH
10774: LD_INT 36
10776: PUSH
10777: EMPTY
10778: LIST
10779: LIST
10780: LIST
10781: LIST
10782: LIST
10783: LIST
10784: LIST
10785: LIST
10786: LIST
10787: LIST
10788: LIST
10789: LIST
10790: LIST
10791: LIST
10792: LIST
10793: LIST
10794: LIST
10795: LIST
10796: LIST
10797: LIST
10798: LIST
10799: LIST
10800: LIST
10801: LIST
10802: LIST
10803: LIST
10804: LIST
10805: LIST
10806: LIST
10807: LIST
10808: LIST
10809: LIST
10810: LIST
10811: LIST
10812: LIST
10813: LIST
10814: PUSH
10815: LD_INT 101
10817: PUSH
10818: LD_INT 102
10820: PUSH
10821: LD_INT 103
10823: PUSH
10824: LD_INT 104
10826: PUSH
10827: LD_INT 105
10829: PUSH
10830: LD_INT 106
10832: PUSH
10833: LD_INT 107
10835: PUSH
10836: LD_INT 108
10838: PUSH
10839: LD_INT 109
10841: PUSH
10842: LD_INT 110
10844: PUSH
10845: LD_INT 111
10847: PUSH
10848: LD_INT 112
10850: PUSH
10851: LD_INT 113
10853: PUSH
10854: LD_INT 114
10856: PUSH
10857: LD_INT 115
10859: PUSH
10860: LD_INT 116
10862: PUSH
10863: LD_INT 117
10865: PUSH
10866: LD_INT 118
10868: PUSH
10869: EMPTY
10870: LIST
10871: LIST
10872: LIST
10873: LIST
10874: LIST
10875: LIST
10876: LIST
10877: LIST
10878: LIST
10879: LIST
10880: LIST
10881: LIST
10882: LIST
10883: LIST
10884: LIST
10885: LIST
10886: LIST
10887: LIST
10888: PUSH
10889: EMPTY
10890: LIST
10891: LIST
10892: ST_TO_ADDR
10893: GO 10896
10895: POP
// end else
10896: GO 11127
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
10898: LD_ADDR_VAR 0 2
10902: PUSH
10903: LD_INT 1
10905: PUSH
10906: LD_INT 2
10908: PUSH
10909: LD_INT 3
10911: PUSH
10912: LD_INT 4
10914: PUSH
10915: LD_INT 5
10917: PUSH
10918: LD_INT 6
10920: PUSH
10921: LD_INT 7
10923: PUSH
10924: LD_INT 8
10926: PUSH
10927: LD_INT 9
10929: PUSH
10930: LD_INT 10
10932: PUSH
10933: LD_INT 11
10935: PUSH
10936: LD_INT 12
10938: PUSH
10939: LD_INT 13
10941: PUSH
10942: LD_INT 14
10944: PUSH
10945: LD_INT 15
10947: PUSH
10948: LD_INT 16
10950: PUSH
10951: LD_INT 17
10953: PUSH
10954: LD_INT 18
10956: PUSH
10957: LD_INT 19
10959: PUSH
10960: LD_INT 20
10962: PUSH
10963: LD_INT 21
10965: PUSH
10966: LD_INT 22
10968: PUSH
10969: LD_INT 23
10971: PUSH
10972: LD_INT 24
10974: PUSH
10975: LD_INT 25
10977: PUSH
10978: LD_INT 26
10980: PUSH
10981: LD_INT 27
10983: PUSH
10984: LD_INT 28
10986: PUSH
10987: LD_INT 29
10989: PUSH
10990: LD_INT 30
10992: PUSH
10993: LD_INT 31
10995: PUSH
10996: LD_INT 32
10998: PUSH
10999: LD_INT 33
11001: PUSH
11002: LD_INT 34
11004: PUSH
11005: LD_INT 35
11007: PUSH
11008: LD_INT 36
11010: PUSH
11011: EMPTY
11012: LIST
11013: LIST
11014: LIST
11015: LIST
11016: LIST
11017: LIST
11018: LIST
11019: LIST
11020: LIST
11021: LIST
11022: LIST
11023: LIST
11024: LIST
11025: LIST
11026: LIST
11027: LIST
11028: LIST
11029: LIST
11030: LIST
11031: LIST
11032: LIST
11033: LIST
11034: LIST
11035: LIST
11036: LIST
11037: LIST
11038: LIST
11039: LIST
11040: LIST
11041: LIST
11042: LIST
11043: LIST
11044: LIST
11045: LIST
11046: LIST
11047: LIST
11048: PUSH
11049: LD_INT 101
11051: PUSH
11052: LD_INT 102
11054: PUSH
11055: LD_INT 103
11057: PUSH
11058: LD_INT 104
11060: PUSH
11061: LD_INT 105
11063: PUSH
11064: LD_INT 106
11066: PUSH
11067: LD_INT 107
11069: PUSH
11070: LD_INT 108
11072: PUSH
11073: LD_INT 109
11075: PUSH
11076: LD_INT 110
11078: PUSH
11079: LD_INT 111
11081: PUSH
11082: LD_INT 112
11084: PUSH
11085: LD_INT 113
11087: PUSH
11088: LD_INT 114
11090: PUSH
11091: LD_INT 115
11093: PUSH
11094: LD_INT 116
11096: PUSH
11097: LD_INT 117
11099: PUSH
11100: LD_INT 118
11102: PUSH
11103: EMPTY
11104: LIST
11105: LIST
11106: LIST
11107: LIST
11108: LIST
11109: LIST
11110: LIST
11111: LIST
11112: LIST
11113: LIST
11114: LIST
11115: LIST
11116: LIST
11117: LIST
11118: LIST
11119: LIST
11120: LIST
11121: LIST
11122: PUSH
11123: EMPTY
11124: LIST
11125: LIST
11126: ST_TO_ADDR
// if result then
11127: LD_VAR 0 2
11131: IFFALSE 11917
// begin normal :=  ;
11133: LD_ADDR_VAR 0 5
11137: PUSH
11138: LD_STRING 
11140: ST_TO_ADDR
// hardcore :=  ;
11141: LD_ADDR_VAR 0 6
11145: PUSH
11146: LD_STRING 
11148: ST_TO_ADDR
// active :=  ;
11149: LD_ADDR_VAR 0 7
11153: PUSH
11154: LD_STRING 
11156: ST_TO_ADDR
// for i = 1 to normalCounter do
11157: LD_ADDR_VAR 0 8
11161: PUSH
11162: DOUBLE
11163: LD_INT 1
11165: DEC
11166: ST_TO_ADDR
11167: LD_EXP 27
11171: PUSH
11172: FOR_TO
11173: IFFALSE 11274
// begin tmp := 0 ;
11175: LD_ADDR_VAR 0 3
11179: PUSH
11180: LD_STRING 0
11182: ST_TO_ADDR
// if result [ 1 ] then
11183: LD_VAR 0 2
11187: PUSH
11188: LD_INT 1
11190: ARRAY
11191: IFFALSE 11256
// if result [ 1 ] [ 1 ] = i then
11193: LD_VAR 0 2
11197: PUSH
11198: LD_INT 1
11200: ARRAY
11201: PUSH
11202: LD_INT 1
11204: ARRAY
11205: PUSH
11206: LD_VAR 0 8
11210: EQUAL
11211: IFFALSE 11256
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
11213: LD_ADDR_VAR 0 2
11217: PUSH
11218: LD_VAR 0 2
11222: PPUSH
11223: LD_INT 1
11225: PPUSH
11226: LD_VAR 0 2
11230: PUSH
11231: LD_INT 1
11233: ARRAY
11234: PPUSH
11235: LD_INT 1
11237: PPUSH
11238: CALL_OW 3
11242: PPUSH
11243: CALL_OW 1
11247: ST_TO_ADDR
// tmp := 1 ;
11248: LD_ADDR_VAR 0 3
11252: PUSH
11253: LD_STRING 1
11255: ST_TO_ADDR
// end ; normal := normal & tmp ;
11256: LD_ADDR_VAR 0 5
11260: PUSH
11261: LD_VAR 0 5
11265: PUSH
11266: LD_VAR 0 3
11270: STR
11271: ST_TO_ADDR
// end ;
11272: GO 11172
11274: POP
11275: POP
// for i = 1 to hardcoreCounter do
11276: LD_ADDR_VAR 0 8
11280: PUSH
11281: DOUBLE
11282: LD_INT 1
11284: DEC
11285: ST_TO_ADDR
11286: LD_EXP 28
11290: PUSH
11291: FOR_TO
11292: IFFALSE 11397
// begin tmp := 0 ;
11294: LD_ADDR_VAR 0 3
11298: PUSH
11299: LD_STRING 0
11301: ST_TO_ADDR
// if result [ 2 ] then
11302: LD_VAR 0 2
11306: PUSH
11307: LD_INT 2
11309: ARRAY
11310: IFFALSE 11379
// if result [ 2 ] [ 1 ] = 100 + i then
11312: LD_VAR 0 2
11316: PUSH
11317: LD_INT 2
11319: ARRAY
11320: PUSH
11321: LD_INT 1
11323: ARRAY
11324: PUSH
11325: LD_INT 100
11327: PUSH
11328: LD_VAR 0 8
11332: PLUS
11333: EQUAL
11334: IFFALSE 11379
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
11336: LD_ADDR_VAR 0 2
11340: PUSH
11341: LD_VAR 0 2
11345: PPUSH
11346: LD_INT 2
11348: PPUSH
11349: LD_VAR 0 2
11353: PUSH
11354: LD_INT 2
11356: ARRAY
11357: PPUSH
11358: LD_INT 1
11360: PPUSH
11361: CALL_OW 3
11365: PPUSH
11366: CALL_OW 1
11370: ST_TO_ADDR
// tmp := 1 ;
11371: LD_ADDR_VAR 0 3
11375: PUSH
11376: LD_STRING 1
11378: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
11379: LD_ADDR_VAR 0 6
11383: PUSH
11384: LD_VAR 0 6
11388: PUSH
11389: LD_VAR 0 3
11393: STR
11394: ST_TO_ADDR
// end ;
11395: GO 11291
11397: POP
11398: POP
// if isGameLoad then
11399: LD_VAR 0 1
11403: IFFALSE 11878
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
11405: LD_ADDR_VAR 0 4
11409: PUSH
11410: LD_EXP 31
11414: PUSH
11415: LD_EXP 30
11419: PUSH
11420: LD_EXP 32
11424: PUSH
11425: LD_EXP 29
11429: PUSH
11430: LD_EXP 33
11434: PUSH
11435: LD_EXP 34
11439: PUSH
11440: LD_EXP 35
11444: PUSH
11445: LD_EXP 36
11449: PUSH
11450: LD_EXP 37
11454: PUSH
11455: LD_EXP 38
11459: PUSH
11460: LD_EXP 39
11464: PUSH
11465: LD_EXP 40
11469: PUSH
11470: LD_EXP 41
11474: PUSH
11475: LD_EXP 42
11479: PUSH
11480: LD_EXP 50
11484: PUSH
11485: LD_EXP 51
11489: PUSH
11490: LD_EXP 52
11494: PUSH
11495: LD_EXP 53
11499: PUSH
11500: LD_EXP 55
11504: PUSH
11505: LD_EXP 56
11509: PUSH
11510: LD_EXP 57
11514: PUSH
11515: LD_EXP 60
11519: PUSH
11520: LD_EXP 62
11524: PUSH
11525: LD_EXP 63
11529: PUSH
11530: LD_EXP 64
11534: PUSH
11535: LD_EXP 66
11539: PUSH
11540: LD_EXP 67
11544: PUSH
11545: LD_EXP 70
11549: PUSH
11550: LD_EXP 71
11554: PUSH
11555: LD_EXP 72
11559: PUSH
11560: LD_EXP 73
11564: PUSH
11565: LD_EXP 74
11569: PUSH
11570: LD_EXP 75
11574: PUSH
11575: LD_EXP 76
11579: PUSH
11580: LD_EXP 77
11584: PUSH
11585: LD_EXP 78
11589: PUSH
11590: LD_EXP 43
11594: PUSH
11595: LD_EXP 44
11599: PUSH
11600: LD_EXP 47
11604: PUSH
11605: LD_EXP 48
11609: PUSH
11610: LD_EXP 49
11614: PUSH
11615: LD_EXP 45
11619: PUSH
11620: LD_EXP 46
11624: PUSH
11625: LD_EXP 54
11629: PUSH
11630: LD_EXP 58
11634: PUSH
11635: LD_EXP 59
11639: PUSH
11640: LD_EXP 61
11644: PUSH
11645: LD_EXP 65
11649: PUSH
11650: LD_EXP 68
11654: PUSH
11655: LD_EXP 69
11659: PUSH
11660: LD_EXP 79
11664: PUSH
11665: LD_EXP 80
11669: PUSH
11670: LD_EXP 81
11674: PUSH
11675: LD_EXP 82
11679: PUSH
11680: EMPTY
11681: LIST
11682: LIST
11683: LIST
11684: LIST
11685: LIST
11686: LIST
11687: LIST
11688: LIST
11689: LIST
11690: LIST
11691: LIST
11692: LIST
11693: LIST
11694: LIST
11695: LIST
11696: LIST
11697: LIST
11698: LIST
11699: LIST
11700: LIST
11701: LIST
11702: LIST
11703: LIST
11704: LIST
11705: LIST
11706: LIST
11707: LIST
11708: LIST
11709: LIST
11710: LIST
11711: LIST
11712: LIST
11713: LIST
11714: LIST
11715: LIST
11716: LIST
11717: LIST
11718: LIST
11719: LIST
11720: LIST
11721: LIST
11722: LIST
11723: LIST
11724: LIST
11725: LIST
11726: LIST
11727: LIST
11728: LIST
11729: LIST
11730: LIST
11731: LIST
11732: LIST
11733: LIST
11734: LIST
11735: ST_TO_ADDR
// tmp :=  ;
11736: LD_ADDR_VAR 0 3
11740: PUSH
11741: LD_STRING 
11743: ST_TO_ADDR
// for i = 1 to normalCounter do
11744: LD_ADDR_VAR 0 8
11748: PUSH
11749: DOUBLE
11750: LD_INT 1
11752: DEC
11753: ST_TO_ADDR
11754: LD_EXP 27
11758: PUSH
11759: FOR_TO
11760: IFFALSE 11796
// begin if flags [ i ] then
11762: LD_VAR 0 4
11766: PUSH
11767: LD_VAR 0 8
11771: ARRAY
11772: IFFALSE 11794
// tmp := tmp & i & ; ;
11774: LD_ADDR_VAR 0 3
11778: PUSH
11779: LD_VAR 0 3
11783: PUSH
11784: LD_VAR 0 8
11788: STR
11789: PUSH
11790: LD_STRING ;
11792: STR
11793: ST_TO_ADDR
// end ;
11794: GO 11759
11796: POP
11797: POP
// for i = 1 to hardcoreCounter do
11798: LD_ADDR_VAR 0 8
11802: PUSH
11803: DOUBLE
11804: LD_INT 1
11806: DEC
11807: ST_TO_ADDR
11808: LD_EXP 28
11812: PUSH
11813: FOR_TO
11814: IFFALSE 11860
// begin if flags [ normalCounter + i ] then
11816: LD_VAR 0 4
11820: PUSH
11821: LD_EXP 27
11825: PUSH
11826: LD_VAR 0 8
11830: PLUS
11831: ARRAY
11832: IFFALSE 11858
// tmp := tmp & ( 100 + i ) & ; ;
11834: LD_ADDR_VAR 0 3
11838: PUSH
11839: LD_VAR 0 3
11843: PUSH
11844: LD_INT 100
11846: PUSH
11847: LD_VAR 0 8
11851: PLUS
11852: STR
11853: PUSH
11854: LD_STRING ;
11856: STR
11857: ST_TO_ADDR
// end ;
11858: GO 11813
11860: POP
11861: POP
// if tmp then
11862: LD_VAR 0 3
11866: IFFALSE 11878
// active := tmp ;
11868: LD_ADDR_VAR 0 7
11872: PUSH
11873: LD_VAR 0 3
11877: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
11878: LD_STRING getStreamItemsFromMission("
11880: PUSH
11881: LD_VAR 0 5
11885: STR
11886: PUSH
11887: LD_STRING ","
11889: STR
11890: PUSH
11891: LD_VAR 0 6
11895: STR
11896: PUSH
11897: LD_STRING ","
11899: STR
11900: PUSH
11901: LD_VAR 0 7
11905: STR
11906: PUSH
11907: LD_STRING ")
11909: STR
11910: PPUSH
11911: CALL_OW 559
// end else
11915: GO 11924
// ToLua ( getStreamItemsFromMission("","","") ) ;
11917: LD_STRING getStreamItemsFromMission("","","")
11919: PPUSH
11920: CALL_OW 559
// end ;
11924: LD_VAR 0 2
11928: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
11929: LD_EXP 26
11933: PUSH
11934: LD_EXP 31
11938: AND
11939: IFFALSE 12063
11941: GO 11943
11943: DISABLE
11944: LD_INT 0
11946: PPUSH
11947: PPUSH
// begin enable ;
11948: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
11949: LD_ADDR_VAR 0 2
11953: PUSH
11954: LD_INT 22
11956: PUSH
11957: LD_OWVAR 2
11961: PUSH
11962: EMPTY
11963: LIST
11964: LIST
11965: PUSH
11966: LD_INT 2
11968: PUSH
11969: LD_INT 34
11971: PUSH
11972: LD_INT 7
11974: PUSH
11975: EMPTY
11976: LIST
11977: LIST
11978: PUSH
11979: LD_INT 34
11981: PUSH
11982: LD_INT 45
11984: PUSH
11985: EMPTY
11986: LIST
11987: LIST
11988: PUSH
11989: LD_INT 34
11991: PUSH
11992: LD_INT 28
11994: PUSH
11995: EMPTY
11996: LIST
11997: LIST
11998: PUSH
11999: LD_INT 34
12001: PUSH
12002: LD_INT 47
12004: PUSH
12005: EMPTY
12006: LIST
12007: LIST
12008: PUSH
12009: EMPTY
12010: LIST
12011: LIST
12012: LIST
12013: LIST
12014: LIST
12015: PUSH
12016: EMPTY
12017: LIST
12018: LIST
12019: PPUSH
12020: CALL_OW 69
12024: ST_TO_ADDR
// if not tmp then
12025: LD_VAR 0 2
12029: NOT
12030: IFFALSE 12034
// exit ;
12032: GO 12063
// for i in tmp do
12034: LD_ADDR_VAR 0 1
12038: PUSH
12039: LD_VAR 0 2
12043: PUSH
12044: FOR_IN
12045: IFFALSE 12061
// begin SetLives ( i , 0 ) ;
12047: LD_VAR 0 1
12051: PPUSH
12052: LD_INT 0
12054: PPUSH
12055: CALL_OW 234
// end ;
12059: GO 12044
12061: POP
12062: POP
// end ;
12063: PPOPN 2
12065: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
12066: LD_EXP 26
12070: PUSH
12071: LD_EXP 32
12075: AND
12076: IFFALSE 12160
12078: GO 12080
12080: DISABLE
12081: LD_INT 0
12083: PPUSH
12084: PPUSH
// begin enable ;
12085: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
12086: LD_ADDR_VAR 0 2
12090: PUSH
12091: LD_INT 22
12093: PUSH
12094: LD_OWVAR 2
12098: PUSH
12099: EMPTY
12100: LIST
12101: LIST
12102: PUSH
12103: LD_INT 32
12105: PUSH
12106: LD_INT 3
12108: PUSH
12109: EMPTY
12110: LIST
12111: LIST
12112: PUSH
12113: EMPTY
12114: LIST
12115: LIST
12116: PPUSH
12117: CALL_OW 69
12121: ST_TO_ADDR
// if not tmp then
12122: LD_VAR 0 2
12126: NOT
12127: IFFALSE 12131
// exit ;
12129: GO 12160
// for i in tmp do
12131: LD_ADDR_VAR 0 1
12135: PUSH
12136: LD_VAR 0 2
12140: PUSH
12141: FOR_IN
12142: IFFALSE 12158
// begin SetLives ( i , 0 ) ;
12144: LD_VAR 0 1
12148: PPUSH
12149: LD_INT 0
12151: PPUSH
12152: CALL_OW 234
// end ;
12156: GO 12141
12158: POP
12159: POP
// end ;
12160: PPOPN 2
12162: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
12163: LD_EXP 26
12167: PUSH
12168: LD_EXP 29
12172: AND
12173: IFFALSE 12266
12175: GO 12177
12177: DISABLE
12178: LD_INT 0
12180: PPUSH
// begin enable ;
12181: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
12182: LD_ADDR_VAR 0 1
12186: PUSH
12187: LD_INT 22
12189: PUSH
12190: LD_OWVAR 2
12194: PUSH
12195: EMPTY
12196: LIST
12197: LIST
12198: PUSH
12199: LD_INT 2
12201: PUSH
12202: LD_INT 25
12204: PUSH
12205: LD_INT 5
12207: PUSH
12208: EMPTY
12209: LIST
12210: LIST
12211: PUSH
12212: LD_INT 25
12214: PUSH
12215: LD_INT 9
12217: PUSH
12218: EMPTY
12219: LIST
12220: LIST
12221: PUSH
12222: LD_INT 25
12224: PUSH
12225: LD_INT 8
12227: PUSH
12228: EMPTY
12229: LIST
12230: LIST
12231: PUSH
12232: EMPTY
12233: LIST
12234: LIST
12235: LIST
12236: LIST
12237: PUSH
12238: EMPTY
12239: LIST
12240: LIST
12241: PPUSH
12242: CALL_OW 69
12246: PUSH
12247: FOR_IN
12248: IFFALSE 12264
// begin SetClass ( i , 1 ) ;
12250: LD_VAR 0 1
12254: PPUSH
12255: LD_INT 1
12257: PPUSH
12258: CALL_OW 336
// end ;
12262: GO 12247
12264: POP
12265: POP
// end ;
12266: PPOPN 1
12268: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
12269: LD_EXP 26
12273: PUSH
12274: LD_EXP 30
12278: AND
12279: PUSH
12280: LD_OWVAR 65
12284: PUSH
12285: LD_INT 7
12287: LESS
12288: AND
12289: IFFALSE 12303
12291: GO 12293
12293: DISABLE
// begin enable ;
12294: ENABLE
// game_speed := 7 ;
12295: LD_ADDR_OWVAR 65
12299: PUSH
12300: LD_INT 7
12302: ST_TO_ADDR
// end ;
12303: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
12304: LD_EXP 26
12308: PUSH
12309: LD_EXP 33
12313: AND
12314: IFFALSE 12516
12316: GO 12318
12318: DISABLE
12319: LD_INT 0
12321: PPUSH
12322: PPUSH
12323: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
12324: LD_ADDR_VAR 0 3
12328: PUSH
12329: LD_INT 81
12331: PUSH
12332: LD_OWVAR 2
12336: PUSH
12337: EMPTY
12338: LIST
12339: LIST
12340: PUSH
12341: LD_INT 21
12343: PUSH
12344: LD_INT 1
12346: PUSH
12347: EMPTY
12348: LIST
12349: LIST
12350: PUSH
12351: EMPTY
12352: LIST
12353: LIST
12354: PPUSH
12355: CALL_OW 69
12359: ST_TO_ADDR
// if not tmp then
12360: LD_VAR 0 3
12364: NOT
12365: IFFALSE 12369
// exit ;
12367: GO 12516
// if tmp > 5 then
12369: LD_VAR 0 3
12373: PUSH
12374: LD_INT 5
12376: GREATER
12377: IFFALSE 12389
// k := 5 else
12379: LD_ADDR_VAR 0 2
12383: PUSH
12384: LD_INT 5
12386: ST_TO_ADDR
12387: GO 12399
// k := tmp ;
12389: LD_ADDR_VAR 0 2
12393: PUSH
12394: LD_VAR 0 3
12398: ST_TO_ADDR
// for i := 1 to k do
12399: LD_ADDR_VAR 0 1
12403: PUSH
12404: DOUBLE
12405: LD_INT 1
12407: DEC
12408: ST_TO_ADDR
12409: LD_VAR 0 2
12413: PUSH
12414: FOR_TO
12415: IFFALSE 12514
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
12417: LD_VAR 0 3
12421: PUSH
12422: LD_VAR 0 1
12426: ARRAY
12427: PPUSH
12428: LD_VAR 0 1
12432: PUSH
12433: LD_INT 4
12435: MOD
12436: PUSH
12437: LD_INT 1
12439: PLUS
12440: PPUSH
12441: CALL_OW 259
12445: PUSH
12446: LD_INT 10
12448: LESS
12449: IFFALSE 12512
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
12451: LD_VAR 0 3
12455: PUSH
12456: LD_VAR 0 1
12460: ARRAY
12461: PPUSH
12462: LD_VAR 0 1
12466: PUSH
12467: LD_INT 4
12469: MOD
12470: PUSH
12471: LD_INT 1
12473: PLUS
12474: PPUSH
12475: LD_VAR 0 3
12479: PUSH
12480: LD_VAR 0 1
12484: ARRAY
12485: PPUSH
12486: LD_VAR 0 1
12490: PUSH
12491: LD_INT 4
12493: MOD
12494: PUSH
12495: LD_INT 1
12497: PLUS
12498: PPUSH
12499: CALL_OW 259
12503: PUSH
12504: LD_INT 1
12506: PLUS
12507: PPUSH
12508: CALL_OW 237
12512: GO 12414
12514: POP
12515: POP
// end ;
12516: PPOPN 3
12518: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
12519: LD_EXP 26
12523: PUSH
12524: LD_EXP 34
12528: AND
12529: IFFALSE 12549
12531: GO 12533
12533: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
12534: LD_INT 4
12536: PPUSH
12537: LD_OWVAR 2
12541: PPUSH
12542: LD_INT 0
12544: PPUSH
12545: CALL_OW 324
12549: END
// every 0 0$1 trigger StreamModeActive and sShovel do
12550: LD_EXP 26
12554: PUSH
12555: LD_EXP 63
12559: AND
12560: IFFALSE 12580
12562: GO 12564
12564: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
12565: LD_INT 19
12567: PPUSH
12568: LD_OWVAR 2
12572: PPUSH
12573: LD_INT 0
12575: PPUSH
12576: CALL_OW 324
12580: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
12581: LD_EXP 26
12585: PUSH
12586: LD_EXP 35
12590: AND
12591: IFFALSE 12693
12593: GO 12595
12595: DISABLE
12596: LD_INT 0
12598: PPUSH
12599: PPUSH
// begin enable ;
12600: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
12601: LD_ADDR_VAR 0 2
12605: PUSH
12606: LD_INT 22
12608: PUSH
12609: LD_OWVAR 2
12613: PUSH
12614: EMPTY
12615: LIST
12616: LIST
12617: PUSH
12618: LD_INT 2
12620: PUSH
12621: LD_INT 34
12623: PUSH
12624: LD_INT 11
12626: PUSH
12627: EMPTY
12628: LIST
12629: LIST
12630: PUSH
12631: LD_INT 34
12633: PUSH
12634: LD_INT 30
12636: PUSH
12637: EMPTY
12638: LIST
12639: LIST
12640: PUSH
12641: EMPTY
12642: LIST
12643: LIST
12644: LIST
12645: PUSH
12646: EMPTY
12647: LIST
12648: LIST
12649: PPUSH
12650: CALL_OW 69
12654: ST_TO_ADDR
// if not tmp then
12655: LD_VAR 0 2
12659: NOT
12660: IFFALSE 12664
// exit ;
12662: GO 12693
// for i in tmp do
12664: LD_ADDR_VAR 0 1
12668: PUSH
12669: LD_VAR 0 2
12673: PUSH
12674: FOR_IN
12675: IFFALSE 12691
// begin SetLives ( i , 0 ) ;
12677: LD_VAR 0 1
12681: PPUSH
12682: LD_INT 0
12684: PPUSH
12685: CALL_OW 234
// end ;
12689: GO 12674
12691: POP
12692: POP
// end ;
12693: PPOPN 2
12695: END
// every 0 0$1 trigger StreamModeActive and sBunker do
12696: LD_EXP 26
12700: PUSH
12701: LD_EXP 36
12705: AND
12706: IFFALSE 12726
12708: GO 12710
12710: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
12711: LD_INT 32
12713: PPUSH
12714: LD_OWVAR 2
12718: PPUSH
12719: LD_INT 0
12721: PPUSH
12722: CALL_OW 324
12726: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
12727: LD_EXP 26
12731: PUSH
12732: LD_EXP 37
12736: AND
12737: IFFALSE 12918
12739: GO 12741
12741: DISABLE
12742: LD_INT 0
12744: PPUSH
12745: PPUSH
12746: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
12747: LD_ADDR_VAR 0 2
12751: PUSH
12752: LD_INT 22
12754: PUSH
12755: LD_OWVAR 2
12759: PUSH
12760: EMPTY
12761: LIST
12762: LIST
12763: PUSH
12764: LD_INT 33
12766: PUSH
12767: LD_INT 3
12769: PUSH
12770: EMPTY
12771: LIST
12772: LIST
12773: PUSH
12774: EMPTY
12775: LIST
12776: LIST
12777: PPUSH
12778: CALL_OW 69
12782: ST_TO_ADDR
// if not tmp then
12783: LD_VAR 0 2
12787: NOT
12788: IFFALSE 12792
// exit ;
12790: GO 12918
// side := 0 ;
12792: LD_ADDR_VAR 0 3
12796: PUSH
12797: LD_INT 0
12799: ST_TO_ADDR
// for i := 1 to 8 do
12800: LD_ADDR_VAR 0 1
12804: PUSH
12805: DOUBLE
12806: LD_INT 1
12808: DEC
12809: ST_TO_ADDR
12810: LD_INT 8
12812: PUSH
12813: FOR_TO
12814: IFFALSE 12862
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
12816: LD_OWVAR 2
12820: PUSH
12821: LD_VAR 0 1
12825: NONEQUAL
12826: PUSH
12827: LD_OWVAR 2
12831: PPUSH
12832: LD_VAR 0 1
12836: PPUSH
12837: CALL_OW 81
12841: PUSH
12842: LD_INT 2
12844: EQUAL
12845: AND
12846: IFFALSE 12860
// begin side := i ;
12848: LD_ADDR_VAR 0 3
12852: PUSH
12853: LD_VAR 0 1
12857: ST_TO_ADDR
// break ;
12858: GO 12862
// end ;
12860: GO 12813
12862: POP
12863: POP
// if not side then
12864: LD_VAR 0 3
12868: NOT
12869: IFFALSE 12873
// exit ;
12871: GO 12918
// for i := 1 to tmp do
12873: LD_ADDR_VAR 0 1
12877: PUSH
12878: DOUBLE
12879: LD_INT 1
12881: DEC
12882: ST_TO_ADDR
12883: LD_VAR 0 2
12887: PUSH
12888: FOR_TO
12889: IFFALSE 12916
// if Prob ( 60 ) then
12891: LD_INT 60
12893: PPUSH
12894: CALL_OW 13
12898: IFFALSE 12914
// SetSide ( i , side ) ;
12900: LD_VAR 0 1
12904: PPUSH
12905: LD_VAR 0 3
12909: PPUSH
12910: CALL_OW 235
12914: GO 12888
12916: POP
12917: POP
// end ;
12918: PPOPN 3
12920: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
12921: LD_EXP 26
12925: PUSH
12926: LD_EXP 39
12930: AND
12931: IFFALSE 13050
12933: GO 12935
12935: DISABLE
12936: LD_INT 0
12938: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
12939: LD_ADDR_VAR 0 1
12943: PUSH
12944: LD_INT 22
12946: PUSH
12947: LD_OWVAR 2
12951: PUSH
12952: EMPTY
12953: LIST
12954: LIST
12955: PUSH
12956: LD_INT 21
12958: PUSH
12959: LD_INT 1
12961: PUSH
12962: EMPTY
12963: LIST
12964: LIST
12965: PUSH
12966: LD_INT 3
12968: PUSH
12969: LD_INT 23
12971: PUSH
12972: LD_INT 0
12974: PUSH
12975: EMPTY
12976: LIST
12977: LIST
12978: PUSH
12979: EMPTY
12980: LIST
12981: LIST
12982: PUSH
12983: EMPTY
12984: LIST
12985: LIST
12986: LIST
12987: PPUSH
12988: CALL_OW 69
12992: PUSH
12993: FOR_IN
12994: IFFALSE 13048
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
12996: LD_VAR 0 1
13000: PPUSH
13001: CALL_OW 257
13005: PUSH
13006: LD_INT 1
13008: PUSH
13009: LD_INT 2
13011: PUSH
13012: LD_INT 3
13014: PUSH
13015: LD_INT 4
13017: PUSH
13018: EMPTY
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: IN
13024: IFFALSE 13046
// SetClass ( un , rand ( 1 , 4 ) ) ;
13026: LD_VAR 0 1
13030: PPUSH
13031: LD_INT 1
13033: PPUSH
13034: LD_INT 4
13036: PPUSH
13037: CALL_OW 12
13041: PPUSH
13042: CALL_OW 336
13046: GO 12993
13048: POP
13049: POP
// end ;
13050: PPOPN 1
13052: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
13053: LD_EXP 26
13057: PUSH
13058: LD_EXP 38
13062: AND
13063: IFFALSE 13142
13065: GO 13067
13067: DISABLE
13068: LD_INT 0
13070: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13071: LD_ADDR_VAR 0 1
13075: PUSH
13076: LD_INT 22
13078: PUSH
13079: LD_OWVAR 2
13083: PUSH
13084: EMPTY
13085: LIST
13086: LIST
13087: PUSH
13088: LD_INT 21
13090: PUSH
13091: LD_INT 3
13093: PUSH
13094: EMPTY
13095: LIST
13096: LIST
13097: PUSH
13098: EMPTY
13099: LIST
13100: LIST
13101: PPUSH
13102: CALL_OW 69
13106: ST_TO_ADDR
// if not tmp then
13107: LD_VAR 0 1
13111: NOT
13112: IFFALSE 13116
// exit ;
13114: GO 13142
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
13116: LD_VAR 0 1
13120: PUSH
13121: LD_INT 1
13123: PPUSH
13124: LD_VAR 0 1
13128: PPUSH
13129: CALL_OW 12
13133: ARRAY
13134: PPUSH
13135: LD_INT 100
13137: PPUSH
13138: CALL_OW 234
// end ;
13142: PPOPN 1
13144: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
13145: LD_EXP 26
13149: PUSH
13150: LD_EXP 40
13154: AND
13155: IFFALSE 13253
13157: GO 13159
13159: DISABLE
13160: LD_INT 0
13162: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13163: LD_ADDR_VAR 0 1
13167: PUSH
13168: LD_INT 22
13170: PUSH
13171: LD_OWVAR 2
13175: PUSH
13176: EMPTY
13177: LIST
13178: LIST
13179: PUSH
13180: LD_INT 21
13182: PUSH
13183: LD_INT 1
13185: PUSH
13186: EMPTY
13187: LIST
13188: LIST
13189: PUSH
13190: EMPTY
13191: LIST
13192: LIST
13193: PPUSH
13194: CALL_OW 69
13198: ST_TO_ADDR
// if not tmp then
13199: LD_VAR 0 1
13203: NOT
13204: IFFALSE 13208
// exit ;
13206: GO 13253
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
13208: LD_VAR 0 1
13212: PUSH
13213: LD_INT 1
13215: PPUSH
13216: LD_VAR 0 1
13220: PPUSH
13221: CALL_OW 12
13225: ARRAY
13226: PPUSH
13227: LD_INT 1
13229: PPUSH
13230: LD_INT 4
13232: PPUSH
13233: CALL_OW 12
13237: PPUSH
13238: LD_INT 3000
13240: PPUSH
13241: LD_INT 9000
13243: PPUSH
13244: CALL_OW 12
13248: PPUSH
13249: CALL_OW 492
// end ;
13253: PPOPN 1
13255: END
// every 0 0$1 trigger StreamModeActive and sDepot do
13256: LD_EXP 26
13260: PUSH
13261: LD_EXP 41
13265: AND
13266: IFFALSE 13286
13268: GO 13270
13270: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
13271: LD_INT 1
13273: PPUSH
13274: LD_OWVAR 2
13278: PPUSH
13279: LD_INT 0
13281: PPUSH
13282: CALL_OW 324
13286: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
13287: LD_EXP 26
13291: PUSH
13292: LD_EXP 42
13296: AND
13297: IFFALSE 13380
13299: GO 13301
13301: DISABLE
13302: LD_INT 0
13304: PPUSH
13305: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13306: LD_ADDR_VAR 0 2
13310: PUSH
13311: LD_INT 22
13313: PUSH
13314: LD_OWVAR 2
13318: PUSH
13319: EMPTY
13320: LIST
13321: LIST
13322: PUSH
13323: LD_INT 21
13325: PUSH
13326: LD_INT 3
13328: PUSH
13329: EMPTY
13330: LIST
13331: LIST
13332: PUSH
13333: EMPTY
13334: LIST
13335: LIST
13336: PPUSH
13337: CALL_OW 69
13341: ST_TO_ADDR
// if not tmp then
13342: LD_VAR 0 2
13346: NOT
13347: IFFALSE 13351
// exit ;
13349: GO 13380
// for i in tmp do
13351: LD_ADDR_VAR 0 1
13355: PUSH
13356: LD_VAR 0 2
13360: PUSH
13361: FOR_IN
13362: IFFALSE 13378
// SetBLevel ( i , 10 ) ;
13364: LD_VAR 0 1
13368: PPUSH
13369: LD_INT 10
13371: PPUSH
13372: CALL_OW 241
13376: GO 13361
13378: POP
13379: POP
// end ;
13380: PPOPN 2
13382: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
13383: LD_EXP 26
13387: PUSH
13388: LD_EXP 43
13392: AND
13393: IFFALSE 13504
13395: GO 13397
13397: DISABLE
13398: LD_INT 0
13400: PPUSH
13401: PPUSH
13402: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13403: LD_ADDR_VAR 0 3
13407: PUSH
13408: LD_INT 22
13410: PUSH
13411: LD_OWVAR 2
13415: PUSH
13416: EMPTY
13417: LIST
13418: LIST
13419: PUSH
13420: LD_INT 25
13422: PUSH
13423: LD_INT 1
13425: PUSH
13426: EMPTY
13427: LIST
13428: LIST
13429: PUSH
13430: EMPTY
13431: LIST
13432: LIST
13433: PPUSH
13434: CALL_OW 69
13438: ST_TO_ADDR
// if not tmp then
13439: LD_VAR 0 3
13443: NOT
13444: IFFALSE 13448
// exit ;
13446: GO 13504
// un := tmp [ rand ( 1 , tmp ) ] ;
13448: LD_ADDR_VAR 0 2
13452: PUSH
13453: LD_VAR 0 3
13457: PUSH
13458: LD_INT 1
13460: PPUSH
13461: LD_VAR 0 3
13465: PPUSH
13466: CALL_OW 12
13470: ARRAY
13471: ST_TO_ADDR
// if Crawls ( un ) then
13472: LD_VAR 0 2
13476: PPUSH
13477: CALL_OW 318
13481: IFFALSE 13492
// ComWalk ( un ) ;
13483: LD_VAR 0 2
13487: PPUSH
13488: CALL_OW 138
// SetClass ( un , class_sniper ) ;
13492: LD_VAR 0 2
13496: PPUSH
13497: LD_INT 5
13499: PPUSH
13500: CALL_OW 336
// end ;
13504: PPOPN 3
13506: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
13507: LD_EXP 26
13511: PUSH
13512: LD_EXP 44
13516: AND
13517: PUSH
13518: LD_OWVAR 67
13522: PUSH
13523: LD_INT 4
13525: LESS
13526: AND
13527: IFFALSE 13546
13529: GO 13531
13531: DISABLE
// begin Difficulty := Difficulty + 1 ;
13532: LD_ADDR_OWVAR 67
13536: PUSH
13537: LD_OWVAR 67
13541: PUSH
13542: LD_INT 1
13544: PLUS
13545: ST_TO_ADDR
// end ;
13546: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
13547: LD_EXP 26
13551: PUSH
13552: LD_EXP 45
13556: AND
13557: IFFALSE 13660
13559: GO 13561
13561: DISABLE
13562: LD_INT 0
13564: PPUSH
// begin for i := 1 to 5 do
13565: LD_ADDR_VAR 0 1
13569: PUSH
13570: DOUBLE
13571: LD_INT 1
13573: DEC
13574: ST_TO_ADDR
13575: LD_INT 5
13577: PUSH
13578: FOR_TO
13579: IFFALSE 13658
// begin uc_nation := nation_nature ;
13581: LD_ADDR_OWVAR 21
13585: PUSH
13586: LD_INT 0
13588: ST_TO_ADDR
// uc_side := 0 ;
13589: LD_ADDR_OWVAR 20
13593: PUSH
13594: LD_INT 0
13596: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13597: LD_ADDR_OWVAR 29
13601: PUSH
13602: LD_INT 12
13604: PUSH
13605: LD_INT 12
13607: PUSH
13608: EMPTY
13609: LIST
13610: LIST
13611: ST_TO_ADDR
// hc_agressivity := 20 ;
13612: LD_ADDR_OWVAR 35
13616: PUSH
13617: LD_INT 20
13619: ST_TO_ADDR
// hc_class := class_tiger ;
13620: LD_ADDR_OWVAR 28
13624: PUSH
13625: LD_INT 14
13627: ST_TO_ADDR
// hc_gallery :=  ;
13628: LD_ADDR_OWVAR 33
13632: PUSH
13633: LD_STRING 
13635: ST_TO_ADDR
// hc_name :=  ;
13636: LD_ADDR_OWVAR 26
13640: PUSH
13641: LD_STRING 
13643: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
13644: CALL_OW 44
13648: PPUSH
13649: LD_INT 0
13651: PPUSH
13652: CALL_OW 51
// end ;
13656: GO 13578
13658: POP
13659: POP
// end ;
13660: PPOPN 1
13662: END
// every 0 0$1 trigger StreamModeActive and sBomb do
13663: LD_EXP 26
13667: PUSH
13668: LD_EXP 46
13672: AND
13673: IFFALSE 13682
13675: GO 13677
13677: DISABLE
// StreamSibBomb ;
13678: CALL 13683 0 0
13682: END
// export function StreamSibBomb ; var i , x , y ; begin
13683: LD_INT 0
13685: PPUSH
13686: PPUSH
13687: PPUSH
13688: PPUSH
// result := false ;
13689: LD_ADDR_VAR 0 1
13693: PUSH
13694: LD_INT 0
13696: ST_TO_ADDR
// for i := 1 to 16 do
13697: LD_ADDR_VAR 0 2
13701: PUSH
13702: DOUBLE
13703: LD_INT 1
13705: DEC
13706: ST_TO_ADDR
13707: LD_INT 16
13709: PUSH
13710: FOR_TO
13711: IFFALSE 13910
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13713: LD_ADDR_VAR 0 3
13717: PUSH
13718: LD_INT 10
13720: PUSH
13721: LD_INT 20
13723: PUSH
13724: LD_INT 30
13726: PUSH
13727: LD_INT 40
13729: PUSH
13730: LD_INT 50
13732: PUSH
13733: LD_INT 60
13735: PUSH
13736: LD_INT 70
13738: PUSH
13739: LD_INT 80
13741: PUSH
13742: LD_INT 90
13744: PUSH
13745: LD_INT 100
13747: PUSH
13748: LD_INT 110
13750: PUSH
13751: LD_INT 120
13753: PUSH
13754: LD_INT 130
13756: PUSH
13757: LD_INT 140
13759: PUSH
13760: LD_INT 150
13762: PUSH
13763: EMPTY
13764: LIST
13765: LIST
13766: LIST
13767: LIST
13768: LIST
13769: LIST
13770: LIST
13771: LIST
13772: LIST
13773: LIST
13774: LIST
13775: LIST
13776: LIST
13777: LIST
13778: LIST
13779: PUSH
13780: LD_INT 1
13782: PPUSH
13783: LD_INT 15
13785: PPUSH
13786: CALL_OW 12
13790: ARRAY
13791: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13792: LD_ADDR_VAR 0 4
13796: PUSH
13797: LD_INT 10
13799: PUSH
13800: LD_INT 20
13802: PUSH
13803: LD_INT 30
13805: PUSH
13806: LD_INT 40
13808: PUSH
13809: LD_INT 50
13811: PUSH
13812: LD_INT 60
13814: PUSH
13815: LD_INT 70
13817: PUSH
13818: LD_INT 80
13820: PUSH
13821: LD_INT 90
13823: PUSH
13824: LD_INT 100
13826: PUSH
13827: LD_INT 110
13829: PUSH
13830: LD_INT 120
13832: PUSH
13833: LD_INT 130
13835: PUSH
13836: LD_INT 140
13838: PUSH
13839: LD_INT 150
13841: PUSH
13842: EMPTY
13843: LIST
13844: LIST
13845: LIST
13846: LIST
13847: LIST
13848: LIST
13849: LIST
13850: LIST
13851: LIST
13852: LIST
13853: LIST
13854: LIST
13855: LIST
13856: LIST
13857: LIST
13858: PUSH
13859: LD_INT 1
13861: PPUSH
13862: LD_INT 15
13864: PPUSH
13865: CALL_OW 12
13869: ARRAY
13870: ST_TO_ADDR
// if ValidHex ( x , y ) then
13871: LD_VAR 0 3
13875: PPUSH
13876: LD_VAR 0 4
13880: PPUSH
13881: CALL_OW 488
13885: IFFALSE 13908
// begin result := [ x , y ] ;
13887: LD_ADDR_VAR 0 1
13891: PUSH
13892: LD_VAR 0 3
13896: PUSH
13897: LD_VAR 0 4
13901: PUSH
13902: EMPTY
13903: LIST
13904: LIST
13905: ST_TO_ADDR
// break ;
13906: GO 13910
// end ; end ;
13908: GO 13710
13910: POP
13911: POP
// if result then
13912: LD_VAR 0 1
13916: IFFALSE 13976
// begin ToLua ( playSibBomb() ) ;
13918: LD_STRING playSibBomb()
13920: PPUSH
13921: CALL_OW 559
// wait ( 0 0$14 ) ;
13925: LD_INT 490
13927: PPUSH
13928: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
13932: LD_VAR 0 1
13936: PUSH
13937: LD_INT 1
13939: ARRAY
13940: PPUSH
13941: LD_VAR 0 1
13945: PUSH
13946: LD_INT 2
13948: ARRAY
13949: PPUSH
13950: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
13954: LD_VAR 0 1
13958: PUSH
13959: LD_INT 1
13961: ARRAY
13962: PPUSH
13963: LD_VAR 0 1
13967: PUSH
13968: LD_INT 2
13970: ARRAY
13971: PPUSH
13972: CALL_OW 429
// end ; end ;
13976: LD_VAR 0 1
13980: RET
// every 0 0$1 trigger StreamModeActive and sReset do
13981: LD_EXP 26
13985: PUSH
13986: LD_EXP 48
13990: AND
13991: IFFALSE 14003
13993: GO 13995
13995: DISABLE
// YouLost (  ) ;
13996: LD_STRING 
13998: PPUSH
13999: CALL_OW 104
14003: END
// every 0 0$1 trigger StreamModeActive and sFog do
14004: LD_EXP 26
14008: PUSH
14009: LD_EXP 47
14013: AND
14014: IFFALSE 14028
14016: GO 14018
14018: DISABLE
// FogOff ( your_side ) ;
14019: LD_OWVAR 2
14023: PPUSH
14024: CALL_OW 344
14028: END
// every 0 0$1 trigger StreamModeActive and sSun do
14029: LD_EXP 26
14033: PUSH
14034: LD_EXP 49
14038: AND
14039: IFFALSE 14067
14041: GO 14043
14043: DISABLE
// begin solar_recharge_percent := 0 ;
14044: LD_ADDR_OWVAR 79
14048: PUSH
14049: LD_INT 0
14051: ST_TO_ADDR
// wait ( 5 5$00 ) ;
14052: LD_INT 10500
14054: PPUSH
14055: CALL_OW 67
// solar_recharge_percent := 100 ;
14059: LD_ADDR_OWVAR 79
14063: PUSH
14064: LD_INT 100
14066: ST_TO_ADDR
// end ;
14067: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
14068: LD_EXP 26
14072: PUSH
14073: LD_EXP 50
14077: AND
14078: IFFALSE 14317
14080: GO 14082
14082: DISABLE
14083: LD_INT 0
14085: PPUSH
14086: PPUSH
14087: PPUSH
// begin tmp := [ ] ;
14088: LD_ADDR_VAR 0 3
14092: PUSH
14093: EMPTY
14094: ST_TO_ADDR
// for i := 1 to 6 do
14095: LD_ADDR_VAR 0 1
14099: PUSH
14100: DOUBLE
14101: LD_INT 1
14103: DEC
14104: ST_TO_ADDR
14105: LD_INT 6
14107: PUSH
14108: FOR_TO
14109: IFFALSE 14214
// begin uc_nation := nation_nature ;
14111: LD_ADDR_OWVAR 21
14115: PUSH
14116: LD_INT 0
14118: ST_TO_ADDR
// uc_side := 0 ;
14119: LD_ADDR_OWVAR 20
14123: PUSH
14124: LD_INT 0
14126: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14127: LD_ADDR_OWVAR 29
14131: PUSH
14132: LD_INT 12
14134: PUSH
14135: LD_INT 12
14137: PUSH
14138: EMPTY
14139: LIST
14140: LIST
14141: ST_TO_ADDR
// hc_agressivity := 20 ;
14142: LD_ADDR_OWVAR 35
14146: PUSH
14147: LD_INT 20
14149: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
14150: LD_ADDR_OWVAR 28
14154: PUSH
14155: LD_INT 17
14157: ST_TO_ADDR
// hc_gallery :=  ;
14158: LD_ADDR_OWVAR 33
14162: PUSH
14163: LD_STRING 
14165: ST_TO_ADDR
// hc_name :=  ;
14166: LD_ADDR_OWVAR 26
14170: PUSH
14171: LD_STRING 
14173: ST_TO_ADDR
// un := CreateHuman ;
14174: LD_ADDR_VAR 0 2
14178: PUSH
14179: CALL_OW 44
14183: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
14184: LD_VAR 0 2
14188: PPUSH
14189: LD_INT 1
14191: PPUSH
14192: CALL_OW 51
// tmp := tmp ^ un ;
14196: LD_ADDR_VAR 0 3
14200: PUSH
14201: LD_VAR 0 3
14205: PUSH
14206: LD_VAR 0 2
14210: ADD
14211: ST_TO_ADDR
// end ;
14212: GO 14108
14214: POP
14215: POP
// repeat wait ( 0 0$1 ) ;
14216: LD_INT 35
14218: PPUSH
14219: CALL_OW 67
// for un in tmp do
14223: LD_ADDR_VAR 0 2
14227: PUSH
14228: LD_VAR 0 3
14232: PUSH
14233: FOR_IN
14234: IFFALSE 14308
// begin if IsDead ( un ) then
14236: LD_VAR 0 2
14240: PPUSH
14241: CALL_OW 301
14245: IFFALSE 14265
// begin tmp := tmp diff un ;
14247: LD_ADDR_VAR 0 3
14251: PUSH
14252: LD_VAR 0 3
14256: PUSH
14257: LD_VAR 0 2
14261: DIFF
14262: ST_TO_ADDR
// continue ;
14263: GO 14233
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
14265: LD_VAR 0 2
14269: PPUSH
14270: LD_INT 3
14272: PUSH
14273: LD_INT 22
14275: PUSH
14276: LD_INT 0
14278: PUSH
14279: EMPTY
14280: LIST
14281: LIST
14282: PUSH
14283: EMPTY
14284: LIST
14285: LIST
14286: PPUSH
14287: CALL_OW 69
14291: PPUSH
14292: LD_VAR 0 2
14296: PPUSH
14297: CALL_OW 74
14301: PPUSH
14302: CALL_OW 115
// end ;
14306: GO 14233
14308: POP
14309: POP
// until not tmp ;
14310: LD_VAR 0 3
14314: NOT
14315: IFFALSE 14216
// end ;
14317: PPOPN 3
14319: END
// every 0 0$1 trigger StreamModeActive and sTroll do
14320: LD_EXP 26
14324: PUSH
14325: LD_EXP 51
14329: AND
14330: IFFALSE 14384
14332: GO 14334
14334: DISABLE
// begin ToLua ( displayTroll(); ) ;
14335: LD_STRING displayTroll();
14337: PPUSH
14338: CALL_OW 559
// wait ( 3 3$00 ) ;
14342: LD_INT 6300
14344: PPUSH
14345: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14349: LD_STRING hideTroll();
14351: PPUSH
14352: CALL_OW 559
// wait ( 1 1$00 ) ;
14356: LD_INT 2100
14358: PPUSH
14359: CALL_OW 67
// ToLua ( displayTroll(); ) ;
14363: LD_STRING displayTroll();
14365: PPUSH
14366: CALL_OW 559
// wait ( 1 1$00 ) ;
14370: LD_INT 2100
14372: PPUSH
14373: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14377: LD_STRING hideTroll();
14379: PPUSH
14380: CALL_OW 559
// end ;
14384: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
14385: LD_EXP 26
14389: PUSH
14390: LD_EXP 52
14394: AND
14395: IFFALSE 14458
14397: GO 14399
14399: DISABLE
14400: LD_INT 0
14402: PPUSH
// begin p := 0 ;
14403: LD_ADDR_VAR 0 1
14407: PUSH
14408: LD_INT 0
14410: ST_TO_ADDR
// repeat game_speed := 1 ;
14411: LD_ADDR_OWVAR 65
14415: PUSH
14416: LD_INT 1
14418: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14419: LD_INT 35
14421: PPUSH
14422: CALL_OW 67
// p := p + 1 ;
14426: LD_ADDR_VAR 0 1
14430: PUSH
14431: LD_VAR 0 1
14435: PUSH
14436: LD_INT 1
14438: PLUS
14439: ST_TO_ADDR
// until p >= 60 ;
14440: LD_VAR 0 1
14444: PUSH
14445: LD_INT 60
14447: GREATEREQUAL
14448: IFFALSE 14411
// game_speed := 4 ;
14450: LD_ADDR_OWVAR 65
14454: PUSH
14455: LD_INT 4
14457: ST_TO_ADDR
// end ;
14458: PPOPN 1
14460: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
14461: LD_EXP 26
14465: PUSH
14466: LD_EXP 53
14470: AND
14471: IFFALSE 14617
14473: GO 14475
14475: DISABLE
14476: LD_INT 0
14478: PPUSH
14479: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14480: LD_ADDR_VAR 0 1
14484: PUSH
14485: LD_INT 22
14487: PUSH
14488: LD_OWVAR 2
14492: PUSH
14493: EMPTY
14494: LIST
14495: LIST
14496: PUSH
14497: LD_INT 2
14499: PUSH
14500: LD_INT 30
14502: PUSH
14503: LD_INT 0
14505: PUSH
14506: EMPTY
14507: LIST
14508: LIST
14509: PUSH
14510: LD_INT 30
14512: PUSH
14513: LD_INT 1
14515: PUSH
14516: EMPTY
14517: LIST
14518: LIST
14519: PUSH
14520: EMPTY
14521: LIST
14522: LIST
14523: LIST
14524: PUSH
14525: EMPTY
14526: LIST
14527: LIST
14528: PPUSH
14529: CALL_OW 69
14533: ST_TO_ADDR
// if not depot then
14534: LD_VAR 0 1
14538: NOT
14539: IFFALSE 14543
// exit ;
14541: GO 14617
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
14543: LD_ADDR_VAR 0 2
14547: PUSH
14548: LD_VAR 0 1
14552: PUSH
14553: LD_INT 1
14555: PPUSH
14556: LD_VAR 0 1
14560: PPUSH
14561: CALL_OW 12
14565: ARRAY
14566: PPUSH
14567: CALL_OW 274
14571: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
14572: LD_VAR 0 2
14576: PPUSH
14577: LD_INT 1
14579: PPUSH
14580: LD_INT 0
14582: PPUSH
14583: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
14587: LD_VAR 0 2
14591: PPUSH
14592: LD_INT 2
14594: PPUSH
14595: LD_INT 0
14597: PPUSH
14598: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
14602: LD_VAR 0 2
14606: PPUSH
14607: LD_INT 3
14609: PPUSH
14610: LD_INT 0
14612: PPUSH
14613: CALL_OW 277
// end ;
14617: PPOPN 2
14619: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
14620: LD_EXP 26
14624: PUSH
14625: LD_EXP 54
14629: AND
14630: IFFALSE 14727
14632: GO 14634
14634: DISABLE
14635: LD_INT 0
14637: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14638: LD_ADDR_VAR 0 1
14642: PUSH
14643: LD_INT 22
14645: PUSH
14646: LD_OWVAR 2
14650: PUSH
14651: EMPTY
14652: LIST
14653: LIST
14654: PUSH
14655: LD_INT 21
14657: PUSH
14658: LD_INT 1
14660: PUSH
14661: EMPTY
14662: LIST
14663: LIST
14664: PUSH
14665: LD_INT 3
14667: PUSH
14668: LD_INT 23
14670: PUSH
14671: LD_INT 0
14673: PUSH
14674: EMPTY
14675: LIST
14676: LIST
14677: PUSH
14678: EMPTY
14679: LIST
14680: LIST
14681: PUSH
14682: EMPTY
14683: LIST
14684: LIST
14685: LIST
14686: PPUSH
14687: CALL_OW 69
14691: ST_TO_ADDR
// if not tmp then
14692: LD_VAR 0 1
14696: NOT
14697: IFFALSE 14701
// exit ;
14699: GO 14727
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
14701: LD_VAR 0 1
14705: PUSH
14706: LD_INT 1
14708: PPUSH
14709: LD_VAR 0 1
14713: PPUSH
14714: CALL_OW 12
14718: ARRAY
14719: PPUSH
14720: LD_INT 200
14722: PPUSH
14723: CALL_OW 234
// end ;
14727: PPOPN 1
14729: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
14730: LD_EXP 26
14734: PUSH
14735: LD_EXP 55
14739: AND
14740: IFFALSE 14819
14742: GO 14744
14744: DISABLE
14745: LD_INT 0
14747: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
14748: LD_ADDR_VAR 0 1
14752: PUSH
14753: LD_INT 22
14755: PUSH
14756: LD_OWVAR 2
14760: PUSH
14761: EMPTY
14762: LIST
14763: LIST
14764: PUSH
14765: LD_INT 21
14767: PUSH
14768: LD_INT 2
14770: PUSH
14771: EMPTY
14772: LIST
14773: LIST
14774: PUSH
14775: EMPTY
14776: LIST
14777: LIST
14778: PPUSH
14779: CALL_OW 69
14783: ST_TO_ADDR
// if not tmp then
14784: LD_VAR 0 1
14788: NOT
14789: IFFALSE 14793
// exit ;
14791: GO 14819
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
14793: LD_VAR 0 1
14797: PUSH
14798: LD_INT 1
14800: PPUSH
14801: LD_VAR 0 1
14805: PPUSH
14806: CALL_OW 12
14810: ARRAY
14811: PPUSH
14812: LD_INT 60
14814: PPUSH
14815: CALL_OW 234
// end ;
14819: PPOPN 1
14821: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
14822: LD_EXP 26
14826: PUSH
14827: LD_EXP 56
14831: AND
14832: IFFALSE 14931
14834: GO 14836
14836: DISABLE
14837: LD_INT 0
14839: PPUSH
14840: PPUSH
// begin enable ;
14841: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
14842: LD_ADDR_VAR 0 1
14846: PUSH
14847: LD_INT 22
14849: PUSH
14850: LD_OWVAR 2
14854: PUSH
14855: EMPTY
14856: LIST
14857: LIST
14858: PUSH
14859: LD_INT 61
14861: PUSH
14862: EMPTY
14863: LIST
14864: PUSH
14865: LD_INT 33
14867: PUSH
14868: LD_INT 2
14870: PUSH
14871: EMPTY
14872: LIST
14873: LIST
14874: PUSH
14875: EMPTY
14876: LIST
14877: LIST
14878: LIST
14879: PPUSH
14880: CALL_OW 69
14884: ST_TO_ADDR
// if not tmp then
14885: LD_VAR 0 1
14889: NOT
14890: IFFALSE 14894
// exit ;
14892: GO 14931
// for i in tmp do
14894: LD_ADDR_VAR 0 2
14898: PUSH
14899: LD_VAR 0 1
14903: PUSH
14904: FOR_IN
14905: IFFALSE 14929
// if IsControledBy ( i ) then
14907: LD_VAR 0 2
14911: PPUSH
14912: CALL_OW 312
14916: IFFALSE 14927
// ComUnlink ( i ) ;
14918: LD_VAR 0 2
14922: PPUSH
14923: CALL_OW 136
14927: GO 14904
14929: POP
14930: POP
// end ;
14931: PPOPN 2
14933: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
14934: LD_EXP 26
14938: PUSH
14939: LD_EXP 57
14943: AND
14944: IFFALSE 15084
14946: GO 14948
14948: DISABLE
14949: LD_INT 0
14951: PPUSH
14952: PPUSH
// begin ToLua ( displayPowell(); ) ;
14953: LD_STRING displayPowell();
14955: PPUSH
14956: CALL_OW 559
// uc_side := 0 ;
14960: LD_ADDR_OWVAR 20
14964: PUSH
14965: LD_INT 0
14967: ST_TO_ADDR
// uc_nation := 2 ;
14968: LD_ADDR_OWVAR 21
14972: PUSH
14973: LD_INT 2
14975: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
14976: LD_ADDR_OWVAR 37
14980: PUSH
14981: LD_INT 14
14983: ST_TO_ADDR
// vc_engine := engine_siberite ;
14984: LD_ADDR_OWVAR 39
14988: PUSH
14989: LD_INT 3
14991: ST_TO_ADDR
// vc_control := control_apeman ;
14992: LD_ADDR_OWVAR 38
14996: PUSH
14997: LD_INT 5
14999: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
15000: LD_ADDR_OWVAR 40
15004: PUSH
15005: LD_INT 29
15007: ST_TO_ADDR
// un := CreateVehicle ;
15008: LD_ADDR_VAR 0 2
15012: PUSH
15013: CALL_OW 45
15017: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15018: LD_VAR 0 2
15022: PPUSH
15023: LD_INT 1
15025: PPUSH
15026: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15030: LD_INT 35
15032: PPUSH
15033: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15037: LD_VAR 0 2
15041: PPUSH
15042: LD_INT 22
15044: PUSH
15045: LD_OWVAR 2
15049: PUSH
15050: EMPTY
15051: LIST
15052: LIST
15053: PPUSH
15054: CALL_OW 69
15058: PPUSH
15059: LD_VAR 0 2
15063: PPUSH
15064: CALL_OW 74
15068: PPUSH
15069: CALL_OW 115
// until IsDead ( un ) ;
15073: LD_VAR 0 2
15077: PPUSH
15078: CALL_OW 301
15082: IFFALSE 15030
// end ;
15084: PPOPN 2
15086: END
// every 0 0$1 trigger StreamModeActive and sStu do
15087: LD_EXP 26
15091: PUSH
15092: LD_EXP 65
15096: AND
15097: IFFALSE 15113
15099: GO 15101
15101: DISABLE
// begin ToLua ( displayStucuk(); ) ;
15102: LD_STRING displayStucuk();
15104: PPUSH
15105: CALL_OW 559
// ResetFog ;
15109: CALL_OW 335
// end ;
15113: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
15114: LD_EXP 26
15118: PUSH
15119: LD_EXP 58
15123: AND
15124: IFFALSE 15265
15126: GO 15128
15128: DISABLE
15129: LD_INT 0
15131: PPUSH
15132: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15133: LD_ADDR_VAR 0 2
15137: PUSH
15138: LD_INT 22
15140: PUSH
15141: LD_OWVAR 2
15145: PUSH
15146: EMPTY
15147: LIST
15148: LIST
15149: PUSH
15150: LD_INT 21
15152: PUSH
15153: LD_INT 1
15155: PUSH
15156: EMPTY
15157: LIST
15158: LIST
15159: PUSH
15160: EMPTY
15161: LIST
15162: LIST
15163: PPUSH
15164: CALL_OW 69
15168: ST_TO_ADDR
// if not tmp then
15169: LD_VAR 0 2
15173: NOT
15174: IFFALSE 15178
// exit ;
15176: GO 15265
// un := tmp [ rand ( 1 , tmp ) ] ;
15178: LD_ADDR_VAR 0 1
15182: PUSH
15183: LD_VAR 0 2
15187: PUSH
15188: LD_INT 1
15190: PPUSH
15191: LD_VAR 0 2
15195: PPUSH
15196: CALL_OW 12
15200: ARRAY
15201: ST_TO_ADDR
// SetSide ( un , 0 ) ;
15202: LD_VAR 0 1
15206: PPUSH
15207: LD_INT 0
15209: PPUSH
15210: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
15214: LD_VAR 0 1
15218: PPUSH
15219: LD_OWVAR 3
15223: PUSH
15224: LD_VAR 0 1
15228: DIFF
15229: PPUSH
15230: LD_VAR 0 1
15234: PPUSH
15235: CALL_OW 74
15239: PPUSH
15240: CALL_OW 115
// wait ( 0 0$20 ) ;
15244: LD_INT 700
15246: PPUSH
15247: CALL_OW 67
// SetSide ( un , your_side ) ;
15251: LD_VAR 0 1
15255: PPUSH
15256: LD_OWVAR 2
15260: PPUSH
15261: CALL_OW 235
// end ;
15265: PPOPN 2
15267: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
15268: LD_EXP 26
15272: PUSH
15273: LD_EXP 59
15277: AND
15278: IFFALSE 15384
15280: GO 15282
15282: DISABLE
15283: LD_INT 0
15285: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15286: LD_ADDR_VAR 0 1
15290: PUSH
15291: LD_INT 22
15293: PUSH
15294: LD_OWVAR 2
15298: PUSH
15299: EMPTY
15300: LIST
15301: LIST
15302: PUSH
15303: LD_INT 2
15305: PUSH
15306: LD_INT 30
15308: PUSH
15309: LD_INT 0
15311: PUSH
15312: EMPTY
15313: LIST
15314: LIST
15315: PUSH
15316: LD_INT 30
15318: PUSH
15319: LD_INT 1
15321: PUSH
15322: EMPTY
15323: LIST
15324: LIST
15325: PUSH
15326: EMPTY
15327: LIST
15328: LIST
15329: LIST
15330: PUSH
15331: EMPTY
15332: LIST
15333: LIST
15334: PPUSH
15335: CALL_OW 69
15339: ST_TO_ADDR
// if not depot then
15340: LD_VAR 0 1
15344: NOT
15345: IFFALSE 15349
// exit ;
15347: GO 15384
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
15349: LD_VAR 0 1
15353: PUSH
15354: LD_INT 1
15356: ARRAY
15357: PPUSH
15358: CALL_OW 250
15362: PPUSH
15363: LD_VAR 0 1
15367: PUSH
15368: LD_INT 1
15370: ARRAY
15371: PPUSH
15372: CALL_OW 251
15376: PPUSH
15377: LD_INT 70
15379: PPUSH
15380: CALL_OW 495
// end ;
15384: PPOPN 1
15386: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
15387: LD_EXP 26
15391: PUSH
15392: LD_EXP 60
15396: AND
15397: IFFALSE 15608
15399: GO 15401
15401: DISABLE
15402: LD_INT 0
15404: PPUSH
15405: PPUSH
15406: PPUSH
15407: PPUSH
15408: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15409: LD_ADDR_VAR 0 5
15413: PUSH
15414: LD_INT 22
15416: PUSH
15417: LD_OWVAR 2
15421: PUSH
15422: EMPTY
15423: LIST
15424: LIST
15425: PUSH
15426: LD_INT 21
15428: PUSH
15429: LD_INT 1
15431: PUSH
15432: EMPTY
15433: LIST
15434: LIST
15435: PUSH
15436: EMPTY
15437: LIST
15438: LIST
15439: PPUSH
15440: CALL_OW 69
15444: ST_TO_ADDR
// if not tmp then
15445: LD_VAR 0 5
15449: NOT
15450: IFFALSE 15454
// exit ;
15452: GO 15608
// for i in tmp do
15454: LD_ADDR_VAR 0 1
15458: PUSH
15459: LD_VAR 0 5
15463: PUSH
15464: FOR_IN
15465: IFFALSE 15606
// begin d := rand ( 0 , 5 ) ;
15467: LD_ADDR_VAR 0 4
15471: PUSH
15472: LD_INT 0
15474: PPUSH
15475: LD_INT 5
15477: PPUSH
15478: CALL_OW 12
15482: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
15483: LD_ADDR_VAR 0 2
15487: PUSH
15488: LD_VAR 0 1
15492: PPUSH
15493: CALL_OW 250
15497: PPUSH
15498: LD_VAR 0 4
15502: PPUSH
15503: LD_INT 3
15505: PPUSH
15506: LD_INT 12
15508: PPUSH
15509: CALL_OW 12
15513: PPUSH
15514: CALL_OW 272
15518: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
15519: LD_ADDR_VAR 0 3
15523: PUSH
15524: LD_VAR 0 1
15528: PPUSH
15529: CALL_OW 251
15533: PPUSH
15534: LD_VAR 0 4
15538: PPUSH
15539: LD_INT 3
15541: PPUSH
15542: LD_INT 12
15544: PPUSH
15545: CALL_OW 12
15549: PPUSH
15550: CALL_OW 273
15554: ST_TO_ADDR
// if ValidHex ( x , y ) then
15555: LD_VAR 0 2
15559: PPUSH
15560: LD_VAR 0 3
15564: PPUSH
15565: CALL_OW 488
15569: IFFALSE 15604
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
15571: LD_VAR 0 1
15575: PPUSH
15576: LD_VAR 0 2
15580: PPUSH
15581: LD_VAR 0 3
15585: PPUSH
15586: LD_INT 3
15588: PPUSH
15589: LD_INT 6
15591: PPUSH
15592: CALL_OW 12
15596: PPUSH
15597: LD_INT 1
15599: PPUSH
15600: CALL_OW 483
// end ;
15604: GO 15464
15606: POP
15607: POP
// end ;
15608: PPOPN 5
15610: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
15611: LD_EXP 26
15615: PUSH
15616: LD_EXP 61
15620: AND
15621: IFFALSE 15715
15623: GO 15625
15625: DISABLE
15626: LD_INT 0
15628: PPUSH
15629: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
15630: LD_ADDR_VAR 0 2
15634: PUSH
15635: LD_INT 22
15637: PUSH
15638: LD_OWVAR 2
15642: PUSH
15643: EMPTY
15644: LIST
15645: LIST
15646: PUSH
15647: LD_INT 32
15649: PUSH
15650: LD_INT 1
15652: PUSH
15653: EMPTY
15654: LIST
15655: LIST
15656: PUSH
15657: LD_INT 21
15659: PUSH
15660: LD_INT 2
15662: PUSH
15663: EMPTY
15664: LIST
15665: LIST
15666: PUSH
15667: EMPTY
15668: LIST
15669: LIST
15670: LIST
15671: PPUSH
15672: CALL_OW 69
15676: ST_TO_ADDR
// if not tmp then
15677: LD_VAR 0 2
15681: NOT
15682: IFFALSE 15686
// exit ;
15684: GO 15715
// for i in tmp do
15686: LD_ADDR_VAR 0 1
15690: PUSH
15691: LD_VAR 0 2
15695: PUSH
15696: FOR_IN
15697: IFFALSE 15713
// SetFuel ( i , 0 ) ;
15699: LD_VAR 0 1
15703: PPUSH
15704: LD_INT 0
15706: PPUSH
15707: CALL_OW 240
15711: GO 15696
15713: POP
15714: POP
// end ;
15715: PPOPN 2
15717: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
15718: LD_EXP 26
15722: PUSH
15723: LD_EXP 62
15727: AND
15728: IFFALSE 15794
15730: GO 15732
15732: DISABLE
15733: LD_INT 0
15735: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15736: LD_ADDR_VAR 0 1
15740: PUSH
15741: LD_INT 22
15743: PUSH
15744: LD_OWVAR 2
15748: PUSH
15749: EMPTY
15750: LIST
15751: LIST
15752: PUSH
15753: LD_INT 30
15755: PUSH
15756: LD_INT 29
15758: PUSH
15759: EMPTY
15760: LIST
15761: LIST
15762: PUSH
15763: EMPTY
15764: LIST
15765: LIST
15766: PPUSH
15767: CALL_OW 69
15771: ST_TO_ADDR
// if not tmp then
15772: LD_VAR 0 1
15776: NOT
15777: IFFALSE 15781
// exit ;
15779: GO 15794
// DestroyUnit ( tmp [ 1 ] ) ;
15781: LD_VAR 0 1
15785: PUSH
15786: LD_INT 1
15788: ARRAY
15789: PPUSH
15790: CALL_OW 65
// end ;
15794: PPOPN 1
15796: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
15797: LD_EXP 26
15801: PUSH
15802: LD_EXP 64
15806: AND
15807: IFFALSE 15936
15809: GO 15811
15811: DISABLE
15812: LD_INT 0
15814: PPUSH
// begin uc_side := 0 ;
15815: LD_ADDR_OWVAR 20
15819: PUSH
15820: LD_INT 0
15822: ST_TO_ADDR
// uc_nation := nation_arabian ;
15823: LD_ADDR_OWVAR 21
15827: PUSH
15828: LD_INT 2
15830: ST_TO_ADDR
// hc_gallery :=  ;
15831: LD_ADDR_OWVAR 33
15835: PUSH
15836: LD_STRING 
15838: ST_TO_ADDR
// hc_name :=  ;
15839: LD_ADDR_OWVAR 26
15843: PUSH
15844: LD_STRING 
15846: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
15847: LD_INT 1
15849: PPUSH
15850: LD_INT 11
15852: PPUSH
15853: LD_INT 10
15855: PPUSH
15856: CALL_OW 380
// un := CreateHuman ;
15860: LD_ADDR_VAR 0 1
15864: PUSH
15865: CALL_OW 44
15869: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15870: LD_VAR 0 1
15874: PPUSH
15875: LD_INT 1
15877: PPUSH
15878: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15882: LD_INT 35
15884: PPUSH
15885: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15889: LD_VAR 0 1
15893: PPUSH
15894: LD_INT 22
15896: PUSH
15897: LD_OWVAR 2
15901: PUSH
15902: EMPTY
15903: LIST
15904: LIST
15905: PPUSH
15906: CALL_OW 69
15910: PPUSH
15911: LD_VAR 0 1
15915: PPUSH
15916: CALL_OW 74
15920: PPUSH
15921: CALL_OW 115
// until IsDead ( un ) ;
15925: LD_VAR 0 1
15929: PPUSH
15930: CALL_OW 301
15934: IFFALSE 15882
// end ;
15936: PPOPN 1
15938: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
15939: LD_EXP 26
15943: PUSH
15944: LD_EXP 66
15948: AND
15949: IFFALSE 15961
15951: GO 15953
15953: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
15954: LD_STRING earthquake(getX(game), 0, 32)
15956: PPUSH
15957: CALL_OW 559
15961: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
15962: LD_EXP 26
15966: PUSH
15967: LD_EXP 67
15971: AND
15972: IFFALSE 16063
15974: GO 15976
15976: DISABLE
15977: LD_INT 0
15979: PPUSH
// begin enable ;
15980: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
15981: LD_ADDR_VAR 0 1
15985: PUSH
15986: LD_INT 22
15988: PUSH
15989: LD_OWVAR 2
15993: PUSH
15994: EMPTY
15995: LIST
15996: LIST
15997: PUSH
15998: LD_INT 21
16000: PUSH
16001: LD_INT 2
16003: PUSH
16004: EMPTY
16005: LIST
16006: LIST
16007: PUSH
16008: LD_INT 33
16010: PUSH
16011: LD_INT 3
16013: PUSH
16014: EMPTY
16015: LIST
16016: LIST
16017: PUSH
16018: EMPTY
16019: LIST
16020: LIST
16021: LIST
16022: PPUSH
16023: CALL_OW 69
16027: ST_TO_ADDR
// if not tmp then
16028: LD_VAR 0 1
16032: NOT
16033: IFFALSE 16037
// exit ;
16035: GO 16063
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16037: LD_VAR 0 1
16041: PUSH
16042: LD_INT 1
16044: PPUSH
16045: LD_VAR 0 1
16049: PPUSH
16050: CALL_OW 12
16054: ARRAY
16055: PPUSH
16056: LD_INT 1
16058: PPUSH
16059: CALL_OW 234
// end ;
16063: PPOPN 1
16065: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
16066: LD_EXP 26
16070: PUSH
16071: LD_EXP 68
16075: AND
16076: IFFALSE 16217
16078: GO 16080
16080: DISABLE
16081: LD_INT 0
16083: PPUSH
16084: PPUSH
16085: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16086: LD_ADDR_VAR 0 3
16090: PUSH
16091: LD_INT 22
16093: PUSH
16094: LD_OWVAR 2
16098: PUSH
16099: EMPTY
16100: LIST
16101: LIST
16102: PUSH
16103: LD_INT 25
16105: PUSH
16106: LD_INT 1
16108: PUSH
16109: EMPTY
16110: LIST
16111: LIST
16112: PUSH
16113: EMPTY
16114: LIST
16115: LIST
16116: PPUSH
16117: CALL_OW 69
16121: ST_TO_ADDR
// if not tmp then
16122: LD_VAR 0 3
16126: NOT
16127: IFFALSE 16131
// exit ;
16129: GO 16217
// un := tmp [ rand ( 1 , tmp ) ] ;
16131: LD_ADDR_VAR 0 2
16135: PUSH
16136: LD_VAR 0 3
16140: PUSH
16141: LD_INT 1
16143: PPUSH
16144: LD_VAR 0 3
16148: PPUSH
16149: CALL_OW 12
16153: ARRAY
16154: ST_TO_ADDR
// if Crawls ( un ) then
16155: LD_VAR 0 2
16159: PPUSH
16160: CALL_OW 318
16164: IFFALSE 16175
// ComWalk ( un ) ;
16166: LD_VAR 0 2
16170: PPUSH
16171: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
16175: LD_VAR 0 2
16179: PPUSH
16180: LD_INT 9
16182: PPUSH
16183: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
16187: LD_INT 28
16189: PPUSH
16190: LD_OWVAR 2
16194: PPUSH
16195: LD_INT 2
16197: PPUSH
16198: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
16202: LD_INT 29
16204: PPUSH
16205: LD_OWVAR 2
16209: PPUSH
16210: LD_INT 2
16212: PPUSH
16213: CALL_OW 322
// end ;
16217: PPOPN 3
16219: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
16220: LD_EXP 26
16224: PUSH
16225: LD_EXP 69
16229: AND
16230: IFFALSE 16341
16232: GO 16234
16234: DISABLE
16235: LD_INT 0
16237: PPUSH
16238: PPUSH
16239: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16240: LD_ADDR_VAR 0 3
16244: PUSH
16245: LD_INT 22
16247: PUSH
16248: LD_OWVAR 2
16252: PUSH
16253: EMPTY
16254: LIST
16255: LIST
16256: PUSH
16257: LD_INT 25
16259: PUSH
16260: LD_INT 1
16262: PUSH
16263: EMPTY
16264: LIST
16265: LIST
16266: PUSH
16267: EMPTY
16268: LIST
16269: LIST
16270: PPUSH
16271: CALL_OW 69
16275: ST_TO_ADDR
// if not tmp then
16276: LD_VAR 0 3
16280: NOT
16281: IFFALSE 16285
// exit ;
16283: GO 16341
// un := tmp [ rand ( 1 , tmp ) ] ;
16285: LD_ADDR_VAR 0 2
16289: PUSH
16290: LD_VAR 0 3
16294: PUSH
16295: LD_INT 1
16297: PPUSH
16298: LD_VAR 0 3
16302: PPUSH
16303: CALL_OW 12
16307: ARRAY
16308: ST_TO_ADDR
// if Crawls ( un ) then
16309: LD_VAR 0 2
16313: PPUSH
16314: CALL_OW 318
16318: IFFALSE 16329
// ComWalk ( un ) ;
16320: LD_VAR 0 2
16324: PPUSH
16325: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16329: LD_VAR 0 2
16333: PPUSH
16334: LD_INT 8
16336: PPUSH
16337: CALL_OW 336
// end ;
16341: PPOPN 3
16343: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
16344: LD_EXP 26
16348: PUSH
16349: LD_EXP 70
16353: AND
16354: IFFALSE 16498
16356: GO 16358
16358: DISABLE
16359: LD_INT 0
16361: PPUSH
16362: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
16363: LD_ADDR_VAR 0 2
16367: PUSH
16368: LD_INT 22
16370: PUSH
16371: LD_OWVAR 2
16375: PUSH
16376: EMPTY
16377: LIST
16378: LIST
16379: PUSH
16380: LD_INT 21
16382: PUSH
16383: LD_INT 2
16385: PUSH
16386: EMPTY
16387: LIST
16388: LIST
16389: PUSH
16390: LD_INT 2
16392: PUSH
16393: LD_INT 34
16395: PUSH
16396: LD_INT 12
16398: PUSH
16399: EMPTY
16400: LIST
16401: LIST
16402: PUSH
16403: LD_INT 34
16405: PUSH
16406: LD_INT 51
16408: PUSH
16409: EMPTY
16410: LIST
16411: LIST
16412: PUSH
16413: LD_INT 34
16415: PUSH
16416: LD_INT 32
16418: PUSH
16419: EMPTY
16420: LIST
16421: LIST
16422: PUSH
16423: EMPTY
16424: LIST
16425: LIST
16426: LIST
16427: LIST
16428: PUSH
16429: EMPTY
16430: LIST
16431: LIST
16432: LIST
16433: PPUSH
16434: CALL_OW 69
16438: ST_TO_ADDR
// if not tmp then
16439: LD_VAR 0 2
16443: NOT
16444: IFFALSE 16448
// exit ;
16446: GO 16498
// for i in tmp do
16448: LD_ADDR_VAR 0 1
16452: PUSH
16453: LD_VAR 0 2
16457: PUSH
16458: FOR_IN
16459: IFFALSE 16496
// if GetCargo ( i , mat_artifact ) = 0 then
16461: LD_VAR 0 1
16465: PPUSH
16466: LD_INT 4
16468: PPUSH
16469: CALL_OW 289
16473: PUSH
16474: LD_INT 0
16476: EQUAL
16477: IFFALSE 16494
// SetCargo ( i , mat_siberit , 100 ) ;
16479: LD_VAR 0 1
16483: PPUSH
16484: LD_INT 3
16486: PPUSH
16487: LD_INT 100
16489: PPUSH
16490: CALL_OW 290
16494: GO 16458
16496: POP
16497: POP
// end ;
16498: PPOPN 2
16500: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
16501: LD_EXP 26
16505: PUSH
16506: LD_EXP 71
16510: AND
16511: IFFALSE 16694
16513: GO 16515
16515: DISABLE
16516: LD_INT 0
16518: PPUSH
16519: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16520: LD_ADDR_VAR 0 2
16524: PUSH
16525: LD_INT 22
16527: PUSH
16528: LD_OWVAR 2
16532: PUSH
16533: EMPTY
16534: LIST
16535: LIST
16536: PPUSH
16537: CALL_OW 69
16541: ST_TO_ADDR
// if not tmp then
16542: LD_VAR 0 2
16546: NOT
16547: IFFALSE 16551
// exit ;
16549: GO 16694
// for i := 1 to 2 do
16551: LD_ADDR_VAR 0 1
16555: PUSH
16556: DOUBLE
16557: LD_INT 1
16559: DEC
16560: ST_TO_ADDR
16561: LD_INT 2
16563: PUSH
16564: FOR_TO
16565: IFFALSE 16692
// begin uc_side := your_side ;
16567: LD_ADDR_OWVAR 20
16571: PUSH
16572: LD_OWVAR 2
16576: ST_TO_ADDR
// uc_nation := nation_american ;
16577: LD_ADDR_OWVAR 21
16581: PUSH
16582: LD_INT 1
16584: ST_TO_ADDR
// vc_chassis := us_morphling ;
16585: LD_ADDR_OWVAR 37
16589: PUSH
16590: LD_INT 5
16592: ST_TO_ADDR
// vc_engine := engine_siberite ;
16593: LD_ADDR_OWVAR 39
16597: PUSH
16598: LD_INT 3
16600: ST_TO_ADDR
// vc_control := control_computer ;
16601: LD_ADDR_OWVAR 38
16605: PUSH
16606: LD_INT 3
16608: ST_TO_ADDR
// vc_weapon := us_double_laser ;
16609: LD_ADDR_OWVAR 40
16613: PUSH
16614: LD_INT 10
16616: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
16617: LD_VAR 0 2
16621: PUSH
16622: LD_INT 1
16624: ARRAY
16625: PPUSH
16626: CALL_OW 310
16630: NOT
16631: IFFALSE 16678
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
16633: CALL_OW 45
16637: PPUSH
16638: LD_VAR 0 2
16642: PUSH
16643: LD_INT 1
16645: ARRAY
16646: PPUSH
16647: CALL_OW 250
16651: PPUSH
16652: LD_VAR 0 2
16656: PUSH
16657: LD_INT 1
16659: ARRAY
16660: PPUSH
16661: CALL_OW 251
16665: PPUSH
16666: LD_INT 12
16668: PPUSH
16669: LD_INT 1
16671: PPUSH
16672: CALL_OW 50
16676: GO 16690
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
16678: CALL_OW 45
16682: PPUSH
16683: LD_INT 1
16685: PPUSH
16686: CALL_OW 51
// end ;
16690: GO 16564
16692: POP
16693: POP
// end ;
16694: PPOPN 2
16696: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
16697: LD_EXP 26
16701: PUSH
16702: LD_EXP 72
16706: AND
16707: IFFALSE 16929
16709: GO 16711
16711: DISABLE
16712: LD_INT 0
16714: PPUSH
16715: PPUSH
16716: PPUSH
16717: PPUSH
16718: PPUSH
16719: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16720: LD_ADDR_VAR 0 6
16724: PUSH
16725: LD_INT 22
16727: PUSH
16728: LD_OWVAR 2
16732: PUSH
16733: EMPTY
16734: LIST
16735: LIST
16736: PUSH
16737: LD_INT 21
16739: PUSH
16740: LD_INT 1
16742: PUSH
16743: EMPTY
16744: LIST
16745: LIST
16746: PUSH
16747: LD_INT 3
16749: PUSH
16750: LD_INT 23
16752: PUSH
16753: LD_INT 0
16755: PUSH
16756: EMPTY
16757: LIST
16758: LIST
16759: PUSH
16760: EMPTY
16761: LIST
16762: LIST
16763: PUSH
16764: EMPTY
16765: LIST
16766: LIST
16767: LIST
16768: PPUSH
16769: CALL_OW 69
16773: ST_TO_ADDR
// if not tmp then
16774: LD_VAR 0 6
16778: NOT
16779: IFFALSE 16783
// exit ;
16781: GO 16929
// s1 := rand ( 1 , 4 ) ;
16783: LD_ADDR_VAR 0 2
16787: PUSH
16788: LD_INT 1
16790: PPUSH
16791: LD_INT 4
16793: PPUSH
16794: CALL_OW 12
16798: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
16799: LD_ADDR_VAR 0 4
16803: PUSH
16804: LD_VAR 0 6
16808: PUSH
16809: LD_INT 1
16811: ARRAY
16812: PPUSH
16813: LD_VAR 0 2
16817: PPUSH
16818: CALL_OW 259
16822: ST_TO_ADDR
// if s1 = 1 then
16823: LD_VAR 0 2
16827: PUSH
16828: LD_INT 1
16830: EQUAL
16831: IFFALSE 16851
// s2 := rand ( 2 , 4 ) else
16833: LD_ADDR_VAR 0 3
16837: PUSH
16838: LD_INT 2
16840: PPUSH
16841: LD_INT 4
16843: PPUSH
16844: CALL_OW 12
16848: ST_TO_ADDR
16849: GO 16859
// s2 := 1 ;
16851: LD_ADDR_VAR 0 3
16855: PUSH
16856: LD_INT 1
16858: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
16859: LD_ADDR_VAR 0 5
16863: PUSH
16864: LD_VAR 0 6
16868: PUSH
16869: LD_INT 1
16871: ARRAY
16872: PPUSH
16873: LD_VAR 0 3
16877: PPUSH
16878: CALL_OW 259
16882: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
16883: LD_VAR 0 6
16887: PUSH
16888: LD_INT 1
16890: ARRAY
16891: PPUSH
16892: LD_VAR 0 2
16896: PPUSH
16897: LD_VAR 0 5
16901: PPUSH
16902: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
16906: LD_VAR 0 6
16910: PUSH
16911: LD_INT 1
16913: ARRAY
16914: PPUSH
16915: LD_VAR 0 3
16919: PPUSH
16920: LD_VAR 0 4
16924: PPUSH
16925: CALL_OW 237
// end ;
16929: PPOPN 6
16931: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
16932: LD_EXP 26
16936: PUSH
16937: LD_EXP 73
16941: AND
16942: IFFALSE 17021
16944: GO 16946
16946: DISABLE
16947: LD_INT 0
16949: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
16950: LD_ADDR_VAR 0 1
16954: PUSH
16955: LD_INT 22
16957: PUSH
16958: LD_OWVAR 2
16962: PUSH
16963: EMPTY
16964: LIST
16965: LIST
16966: PUSH
16967: LD_INT 30
16969: PUSH
16970: LD_INT 3
16972: PUSH
16973: EMPTY
16974: LIST
16975: LIST
16976: PUSH
16977: EMPTY
16978: LIST
16979: LIST
16980: PPUSH
16981: CALL_OW 69
16985: ST_TO_ADDR
// if not tmp then
16986: LD_VAR 0 1
16990: NOT
16991: IFFALSE 16995
// exit ;
16993: GO 17021
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16995: LD_VAR 0 1
16999: PUSH
17000: LD_INT 1
17002: PPUSH
17003: LD_VAR 0 1
17007: PPUSH
17008: CALL_OW 12
17012: ARRAY
17013: PPUSH
17014: LD_INT 1
17016: PPUSH
17017: CALL_OW 234
// end ;
17021: PPOPN 1
17023: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
17024: LD_EXP 26
17028: PUSH
17029: LD_EXP 74
17033: AND
17034: IFFALSE 17146
17036: GO 17038
17038: DISABLE
17039: LD_INT 0
17041: PPUSH
17042: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
17043: LD_ADDR_VAR 0 2
17047: PUSH
17048: LD_INT 22
17050: PUSH
17051: LD_OWVAR 2
17055: PUSH
17056: EMPTY
17057: LIST
17058: LIST
17059: PUSH
17060: LD_INT 2
17062: PUSH
17063: LD_INT 30
17065: PUSH
17066: LD_INT 27
17068: PUSH
17069: EMPTY
17070: LIST
17071: LIST
17072: PUSH
17073: LD_INT 30
17075: PUSH
17076: LD_INT 26
17078: PUSH
17079: EMPTY
17080: LIST
17081: LIST
17082: PUSH
17083: LD_INT 30
17085: PUSH
17086: LD_INT 28
17088: PUSH
17089: EMPTY
17090: LIST
17091: LIST
17092: PUSH
17093: EMPTY
17094: LIST
17095: LIST
17096: LIST
17097: LIST
17098: PUSH
17099: EMPTY
17100: LIST
17101: LIST
17102: PPUSH
17103: CALL_OW 69
17107: ST_TO_ADDR
// if not tmp then
17108: LD_VAR 0 2
17112: NOT
17113: IFFALSE 17117
// exit ;
17115: GO 17146
// for i in tmp do
17117: LD_ADDR_VAR 0 1
17121: PUSH
17122: LD_VAR 0 2
17126: PUSH
17127: FOR_IN
17128: IFFALSE 17144
// SetLives ( i , 1 ) ;
17130: LD_VAR 0 1
17134: PPUSH
17135: LD_INT 1
17137: PPUSH
17138: CALL_OW 234
17142: GO 17127
17144: POP
17145: POP
// end ;
17146: PPOPN 2
17148: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
17149: LD_EXP 26
17153: PUSH
17154: LD_EXP 75
17158: AND
17159: IFFALSE 17446
17161: GO 17163
17163: DISABLE
17164: LD_INT 0
17166: PPUSH
17167: PPUSH
17168: PPUSH
// begin i := rand ( 1 , 7 ) ;
17169: LD_ADDR_VAR 0 1
17173: PUSH
17174: LD_INT 1
17176: PPUSH
17177: LD_INT 7
17179: PPUSH
17180: CALL_OW 12
17184: ST_TO_ADDR
// case i of 1 :
17185: LD_VAR 0 1
17189: PUSH
17190: LD_INT 1
17192: DOUBLE
17193: EQUAL
17194: IFTRUE 17198
17196: GO 17208
17198: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
17199: LD_STRING earthquake(getX(game), 0, 32)
17201: PPUSH
17202: CALL_OW 559
17206: GO 17446
17208: LD_INT 2
17210: DOUBLE
17211: EQUAL
17212: IFTRUE 17216
17214: GO 17230
17216: POP
// begin ToLua ( displayStucuk(); ) ;
17217: LD_STRING displayStucuk();
17219: PPUSH
17220: CALL_OW 559
// ResetFog ;
17224: CALL_OW 335
// end ; 3 :
17228: GO 17446
17230: LD_INT 3
17232: DOUBLE
17233: EQUAL
17234: IFTRUE 17238
17236: GO 17342
17238: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17239: LD_ADDR_VAR 0 2
17243: PUSH
17244: LD_INT 22
17246: PUSH
17247: LD_OWVAR 2
17251: PUSH
17252: EMPTY
17253: LIST
17254: LIST
17255: PUSH
17256: LD_INT 25
17258: PUSH
17259: LD_INT 1
17261: PUSH
17262: EMPTY
17263: LIST
17264: LIST
17265: PUSH
17266: EMPTY
17267: LIST
17268: LIST
17269: PPUSH
17270: CALL_OW 69
17274: ST_TO_ADDR
// if not tmp then
17275: LD_VAR 0 2
17279: NOT
17280: IFFALSE 17284
// exit ;
17282: GO 17446
// un := tmp [ rand ( 1 , tmp ) ] ;
17284: LD_ADDR_VAR 0 3
17288: PUSH
17289: LD_VAR 0 2
17293: PUSH
17294: LD_INT 1
17296: PPUSH
17297: LD_VAR 0 2
17301: PPUSH
17302: CALL_OW 12
17306: ARRAY
17307: ST_TO_ADDR
// if Crawls ( un ) then
17308: LD_VAR 0 3
17312: PPUSH
17313: CALL_OW 318
17317: IFFALSE 17328
// ComWalk ( un ) ;
17319: LD_VAR 0 3
17323: PPUSH
17324: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17328: LD_VAR 0 3
17332: PPUSH
17333: LD_INT 8
17335: PPUSH
17336: CALL_OW 336
// end ; 4 :
17340: GO 17446
17342: LD_INT 4
17344: DOUBLE
17345: EQUAL
17346: IFTRUE 17350
17348: GO 17424
17350: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17351: LD_ADDR_VAR 0 2
17355: PUSH
17356: LD_INT 22
17358: PUSH
17359: LD_OWVAR 2
17363: PUSH
17364: EMPTY
17365: LIST
17366: LIST
17367: PUSH
17368: LD_INT 30
17370: PUSH
17371: LD_INT 29
17373: PUSH
17374: EMPTY
17375: LIST
17376: LIST
17377: PUSH
17378: EMPTY
17379: LIST
17380: LIST
17381: PPUSH
17382: CALL_OW 69
17386: ST_TO_ADDR
// if not tmp then
17387: LD_VAR 0 2
17391: NOT
17392: IFFALSE 17396
// exit ;
17394: GO 17446
// CenterNowOnUnits ( tmp [ 1 ] ) ;
17396: LD_VAR 0 2
17400: PUSH
17401: LD_INT 1
17403: ARRAY
17404: PPUSH
17405: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
17409: LD_VAR 0 2
17413: PUSH
17414: LD_INT 1
17416: ARRAY
17417: PPUSH
17418: CALL_OW 65
// end ; 5 .. 7 :
17422: GO 17446
17424: LD_INT 5
17426: DOUBLE
17427: GREATEREQUAL
17428: IFFALSE 17436
17430: LD_INT 7
17432: DOUBLE
17433: LESSEQUAL
17434: IFTRUE 17438
17436: GO 17445
17438: POP
// StreamSibBomb ; end ;
17439: CALL 13683 0 0
17443: GO 17446
17445: POP
// end ;
17446: PPOPN 3
17448: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
17449: LD_EXP 26
17453: PUSH
17454: LD_EXP 76
17458: AND
17459: IFFALSE 17615
17461: GO 17463
17463: DISABLE
17464: LD_INT 0
17466: PPUSH
17467: PPUSH
17468: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
17469: LD_ADDR_VAR 0 2
17473: PUSH
17474: LD_INT 81
17476: PUSH
17477: LD_OWVAR 2
17481: PUSH
17482: EMPTY
17483: LIST
17484: LIST
17485: PUSH
17486: LD_INT 2
17488: PUSH
17489: LD_INT 21
17491: PUSH
17492: LD_INT 1
17494: PUSH
17495: EMPTY
17496: LIST
17497: LIST
17498: PUSH
17499: LD_INT 21
17501: PUSH
17502: LD_INT 2
17504: PUSH
17505: EMPTY
17506: LIST
17507: LIST
17508: PUSH
17509: EMPTY
17510: LIST
17511: LIST
17512: LIST
17513: PUSH
17514: EMPTY
17515: LIST
17516: LIST
17517: PPUSH
17518: CALL_OW 69
17522: ST_TO_ADDR
// if not tmp then
17523: LD_VAR 0 2
17527: NOT
17528: IFFALSE 17532
// exit ;
17530: GO 17615
// p := 0 ;
17532: LD_ADDR_VAR 0 3
17536: PUSH
17537: LD_INT 0
17539: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17540: LD_INT 35
17542: PPUSH
17543: CALL_OW 67
// p := p + 1 ;
17547: LD_ADDR_VAR 0 3
17551: PUSH
17552: LD_VAR 0 3
17556: PUSH
17557: LD_INT 1
17559: PLUS
17560: ST_TO_ADDR
// for i in tmp do
17561: LD_ADDR_VAR 0 1
17565: PUSH
17566: LD_VAR 0 2
17570: PUSH
17571: FOR_IN
17572: IFFALSE 17603
// if GetLives ( i ) < 1000 then
17574: LD_VAR 0 1
17578: PPUSH
17579: CALL_OW 256
17583: PUSH
17584: LD_INT 1000
17586: LESS
17587: IFFALSE 17601
// SetLives ( i , 1000 ) ;
17589: LD_VAR 0 1
17593: PPUSH
17594: LD_INT 1000
17596: PPUSH
17597: CALL_OW 234
17601: GO 17571
17603: POP
17604: POP
// until p > 20 ;
17605: LD_VAR 0 3
17609: PUSH
17610: LD_INT 20
17612: GREATER
17613: IFFALSE 17540
// end ;
17615: PPOPN 3
17617: END
// every 0 0$1 trigger StreamModeActive and sTime do
17618: LD_EXP 26
17622: PUSH
17623: LD_EXP 77
17627: AND
17628: IFFALSE 17663
17630: GO 17632
17632: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
17633: LD_INT 28
17635: PPUSH
17636: LD_OWVAR 2
17640: PPUSH
17641: LD_INT 2
17643: PPUSH
17644: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
17648: LD_INT 30
17650: PPUSH
17651: LD_OWVAR 2
17655: PPUSH
17656: LD_INT 2
17658: PPUSH
17659: CALL_OW 322
// end ;
17663: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
17664: LD_EXP 26
17668: PUSH
17669: LD_EXP 78
17673: AND
17674: IFFALSE 17795
17676: GO 17678
17678: DISABLE
17679: LD_INT 0
17681: PPUSH
17682: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17683: LD_ADDR_VAR 0 2
17687: PUSH
17688: LD_INT 22
17690: PUSH
17691: LD_OWVAR 2
17695: PUSH
17696: EMPTY
17697: LIST
17698: LIST
17699: PUSH
17700: LD_INT 21
17702: PUSH
17703: LD_INT 1
17705: PUSH
17706: EMPTY
17707: LIST
17708: LIST
17709: PUSH
17710: LD_INT 3
17712: PUSH
17713: LD_INT 23
17715: PUSH
17716: LD_INT 0
17718: PUSH
17719: EMPTY
17720: LIST
17721: LIST
17722: PUSH
17723: EMPTY
17724: LIST
17725: LIST
17726: PUSH
17727: EMPTY
17728: LIST
17729: LIST
17730: LIST
17731: PPUSH
17732: CALL_OW 69
17736: ST_TO_ADDR
// if not tmp then
17737: LD_VAR 0 2
17741: NOT
17742: IFFALSE 17746
// exit ;
17744: GO 17795
// for i in tmp do
17746: LD_ADDR_VAR 0 1
17750: PUSH
17751: LD_VAR 0 2
17755: PUSH
17756: FOR_IN
17757: IFFALSE 17793
// begin if Crawls ( i ) then
17759: LD_VAR 0 1
17763: PPUSH
17764: CALL_OW 318
17768: IFFALSE 17779
// ComWalk ( i ) ;
17770: LD_VAR 0 1
17774: PPUSH
17775: CALL_OW 138
// SetClass ( i , 2 ) ;
17779: LD_VAR 0 1
17783: PPUSH
17784: LD_INT 2
17786: PPUSH
17787: CALL_OW 336
// end ;
17791: GO 17756
17793: POP
17794: POP
// end ;
17795: PPOPN 2
17797: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
17798: LD_EXP 26
17802: PUSH
17803: LD_EXP 79
17807: AND
17808: IFFALSE 18096
17810: GO 17812
17812: DISABLE
17813: LD_INT 0
17815: PPUSH
17816: PPUSH
17817: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
17818: LD_OWVAR 2
17822: PPUSH
17823: LD_INT 9
17825: PPUSH
17826: LD_INT 1
17828: PPUSH
17829: LD_INT 1
17831: PPUSH
17832: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
17836: LD_INT 9
17838: PPUSH
17839: LD_OWVAR 2
17843: PPUSH
17844: CALL_OW 343
// uc_side := 9 ;
17848: LD_ADDR_OWVAR 20
17852: PUSH
17853: LD_INT 9
17855: ST_TO_ADDR
// uc_nation := 2 ;
17856: LD_ADDR_OWVAR 21
17860: PUSH
17861: LD_INT 2
17863: ST_TO_ADDR
// hc_name := Dark Warrior ;
17864: LD_ADDR_OWVAR 26
17868: PUSH
17869: LD_STRING Dark Warrior
17871: ST_TO_ADDR
// hc_gallery :=  ;
17872: LD_ADDR_OWVAR 33
17876: PUSH
17877: LD_STRING 
17879: ST_TO_ADDR
// hc_noskilllimit := true ;
17880: LD_ADDR_OWVAR 76
17884: PUSH
17885: LD_INT 1
17887: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
17888: LD_ADDR_OWVAR 31
17892: PUSH
17893: LD_INT 30
17895: PUSH
17896: LD_INT 30
17898: PUSH
17899: LD_INT 30
17901: PUSH
17902: LD_INT 30
17904: PUSH
17905: EMPTY
17906: LIST
17907: LIST
17908: LIST
17909: LIST
17910: ST_TO_ADDR
// un := CreateHuman ;
17911: LD_ADDR_VAR 0 3
17915: PUSH
17916: CALL_OW 44
17920: ST_TO_ADDR
// hc_noskilllimit := false ;
17921: LD_ADDR_OWVAR 76
17925: PUSH
17926: LD_INT 0
17928: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17929: LD_VAR 0 3
17933: PPUSH
17934: LD_INT 1
17936: PPUSH
17937: CALL_OW 51
// ToLua ( playRanger() ) ;
17941: LD_STRING playRanger()
17943: PPUSH
17944: CALL_OW 559
// p := 0 ;
17948: LD_ADDR_VAR 0 2
17952: PUSH
17953: LD_INT 0
17955: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17956: LD_INT 35
17958: PPUSH
17959: CALL_OW 67
// p := p + 1 ;
17963: LD_ADDR_VAR 0 2
17967: PUSH
17968: LD_VAR 0 2
17972: PUSH
17973: LD_INT 1
17975: PLUS
17976: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
17977: LD_VAR 0 3
17981: PPUSH
17982: CALL_OW 256
17986: PUSH
17987: LD_INT 1000
17989: LESS
17990: IFFALSE 18004
// SetLives ( un , 1000 ) ;
17992: LD_VAR 0 3
17996: PPUSH
17997: LD_INT 1000
17999: PPUSH
18000: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
18004: LD_VAR 0 3
18008: PPUSH
18009: LD_INT 81
18011: PUSH
18012: LD_OWVAR 2
18016: PUSH
18017: EMPTY
18018: LIST
18019: LIST
18020: PUSH
18021: LD_INT 91
18023: PUSH
18024: LD_VAR 0 3
18028: PUSH
18029: LD_INT 30
18031: PUSH
18032: EMPTY
18033: LIST
18034: LIST
18035: LIST
18036: PUSH
18037: EMPTY
18038: LIST
18039: LIST
18040: PPUSH
18041: CALL_OW 69
18045: PPUSH
18046: LD_VAR 0 3
18050: PPUSH
18051: CALL_OW 74
18055: PPUSH
18056: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
18060: LD_VAR 0 2
18064: PUSH
18065: LD_INT 80
18067: GREATER
18068: PUSH
18069: LD_VAR 0 3
18073: PPUSH
18074: CALL_OW 301
18078: OR
18079: IFFALSE 17956
// if un then
18081: LD_VAR 0 3
18085: IFFALSE 18096
// RemoveUnit ( un ) ;
18087: LD_VAR 0 3
18091: PPUSH
18092: CALL_OW 64
// end ;
18096: PPOPN 3
18098: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
18099: LD_EXP 80
18103: IFFALSE 18219
18105: GO 18107
18107: DISABLE
18108: LD_INT 0
18110: PPUSH
18111: PPUSH
18112: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
18113: LD_ADDR_VAR 0 2
18117: PUSH
18118: LD_INT 81
18120: PUSH
18121: LD_OWVAR 2
18125: PUSH
18126: EMPTY
18127: LIST
18128: LIST
18129: PUSH
18130: LD_INT 21
18132: PUSH
18133: LD_INT 1
18135: PUSH
18136: EMPTY
18137: LIST
18138: LIST
18139: PUSH
18140: EMPTY
18141: LIST
18142: LIST
18143: PPUSH
18144: CALL_OW 69
18148: ST_TO_ADDR
// ToLua ( playComputer() ) ;
18149: LD_STRING playComputer()
18151: PPUSH
18152: CALL_OW 559
// if not tmp then
18156: LD_VAR 0 2
18160: NOT
18161: IFFALSE 18165
// exit ;
18163: GO 18219
// for i in tmp do
18165: LD_ADDR_VAR 0 1
18169: PUSH
18170: LD_VAR 0 2
18174: PUSH
18175: FOR_IN
18176: IFFALSE 18217
// for j := 1 to 4 do
18178: LD_ADDR_VAR 0 3
18182: PUSH
18183: DOUBLE
18184: LD_INT 1
18186: DEC
18187: ST_TO_ADDR
18188: LD_INT 4
18190: PUSH
18191: FOR_TO
18192: IFFALSE 18213
// SetSkill ( i , j , 10 ) ;
18194: LD_VAR 0 1
18198: PPUSH
18199: LD_VAR 0 3
18203: PPUSH
18204: LD_INT 10
18206: PPUSH
18207: CALL_OW 237
18211: GO 18191
18213: POP
18214: POP
18215: GO 18175
18217: POP
18218: POP
// end ;
18219: PPOPN 3
18221: END
// every 0 0$1 trigger s30 do var i , tmp ;
18222: LD_EXP 81
18226: IFFALSE 18295
18228: GO 18230
18230: DISABLE
18231: LD_INT 0
18233: PPUSH
18234: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18235: LD_ADDR_VAR 0 2
18239: PUSH
18240: LD_INT 22
18242: PUSH
18243: LD_OWVAR 2
18247: PUSH
18248: EMPTY
18249: LIST
18250: LIST
18251: PPUSH
18252: CALL_OW 69
18256: ST_TO_ADDR
// if not tmp then
18257: LD_VAR 0 2
18261: NOT
18262: IFFALSE 18266
// exit ;
18264: GO 18295
// for i in tmp do
18266: LD_ADDR_VAR 0 1
18270: PUSH
18271: LD_VAR 0 2
18275: PUSH
18276: FOR_IN
18277: IFFALSE 18293
// SetLives ( i , 300 ) ;
18279: LD_VAR 0 1
18283: PPUSH
18284: LD_INT 300
18286: PPUSH
18287: CALL_OW 234
18291: GO 18276
18293: POP
18294: POP
// end ;
18295: PPOPN 2
18297: END
// every 0 0$1 trigger s60 do var i , tmp ;
18298: LD_EXP 82
18302: IFFALSE 18371
18304: GO 18306
18306: DISABLE
18307: LD_INT 0
18309: PPUSH
18310: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18311: LD_ADDR_VAR 0 2
18315: PUSH
18316: LD_INT 22
18318: PUSH
18319: LD_OWVAR 2
18323: PUSH
18324: EMPTY
18325: LIST
18326: LIST
18327: PPUSH
18328: CALL_OW 69
18332: ST_TO_ADDR
// if not tmp then
18333: LD_VAR 0 2
18337: NOT
18338: IFFALSE 18342
// exit ;
18340: GO 18371
// for i in tmp do
18342: LD_ADDR_VAR 0 1
18346: PUSH
18347: LD_VAR 0 2
18351: PUSH
18352: FOR_IN
18353: IFFALSE 18369
// SetLives ( i , 600 ) ;
18355: LD_VAR 0 1
18359: PPUSH
18360: LD_INT 600
18362: PPUSH
18363: CALL_OW 234
18367: GO 18352
18369: POP
18370: POP
// end ;
18371: PPOPN 2
18373: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18374: LD_INT 0
18376: PPUSH
// case cmd of 301 :
18377: LD_VAR 0 1
18381: PUSH
18382: LD_INT 301
18384: DOUBLE
18385: EQUAL
18386: IFTRUE 18390
18388: GO 18422
18390: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
18391: LD_VAR 0 6
18395: PPUSH
18396: LD_VAR 0 7
18400: PPUSH
18401: LD_VAR 0 8
18405: PPUSH
18406: LD_VAR 0 4
18410: PPUSH
18411: LD_VAR 0 5
18415: PPUSH
18416: CALL 19631 0 5
18420: GO 18543
18422: LD_INT 302
18424: DOUBLE
18425: EQUAL
18426: IFTRUE 18430
18428: GO 18467
18430: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
18431: LD_VAR 0 6
18435: PPUSH
18436: LD_VAR 0 7
18440: PPUSH
18441: LD_VAR 0 8
18445: PPUSH
18446: LD_VAR 0 9
18450: PPUSH
18451: LD_VAR 0 4
18455: PPUSH
18456: LD_VAR 0 5
18460: PPUSH
18461: CALL 19722 0 6
18465: GO 18543
18467: LD_INT 303
18469: DOUBLE
18470: EQUAL
18471: IFTRUE 18475
18473: GO 18512
18475: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
18476: LD_VAR 0 6
18480: PPUSH
18481: LD_VAR 0 7
18485: PPUSH
18486: LD_VAR 0 8
18490: PPUSH
18491: LD_VAR 0 9
18495: PPUSH
18496: LD_VAR 0 4
18500: PPUSH
18501: LD_VAR 0 5
18505: PPUSH
18506: CALL 18548 0 6
18510: GO 18543
18512: LD_INT 304
18514: DOUBLE
18515: EQUAL
18516: IFTRUE 18520
18518: GO 18542
18520: POP
// hHackTeleport ( unit , x , y ) ; end ;
18521: LD_VAR 0 2
18525: PPUSH
18526: LD_VAR 0 4
18530: PPUSH
18531: LD_VAR 0 5
18535: PPUSH
18536: CALL 20315 0 3
18540: GO 18543
18542: POP
// end ;
18543: LD_VAR 0 12
18547: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
18548: LD_INT 0
18550: PPUSH
18551: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
18552: LD_VAR 0 1
18556: PUSH
18557: LD_INT 1
18559: LESS
18560: PUSH
18561: LD_VAR 0 1
18565: PUSH
18566: LD_INT 3
18568: GREATER
18569: OR
18570: PUSH
18571: LD_VAR 0 5
18575: PPUSH
18576: LD_VAR 0 6
18580: PPUSH
18581: CALL_OW 428
18585: OR
18586: IFFALSE 18590
// exit ;
18588: GO 19318
// uc_side := your_side ;
18590: LD_ADDR_OWVAR 20
18594: PUSH
18595: LD_OWVAR 2
18599: ST_TO_ADDR
// uc_nation := nation ;
18600: LD_ADDR_OWVAR 21
18604: PUSH
18605: LD_VAR 0 1
18609: ST_TO_ADDR
// bc_level = 1 ;
18610: LD_ADDR_OWVAR 43
18614: PUSH
18615: LD_INT 1
18617: ST_TO_ADDR
// case btype of 1 :
18618: LD_VAR 0 2
18622: PUSH
18623: LD_INT 1
18625: DOUBLE
18626: EQUAL
18627: IFTRUE 18631
18629: GO 18642
18631: POP
// bc_type := b_depot ; 2 :
18632: LD_ADDR_OWVAR 42
18636: PUSH
18637: LD_INT 0
18639: ST_TO_ADDR
18640: GO 19262
18642: LD_INT 2
18644: DOUBLE
18645: EQUAL
18646: IFTRUE 18650
18648: GO 18661
18650: POP
// bc_type := b_warehouse ; 3 :
18651: LD_ADDR_OWVAR 42
18655: PUSH
18656: LD_INT 1
18658: ST_TO_ADDR
18659: GO 19262
18661: LD_INT 3
18663: DOUBLE
18664: EQUAL
18665: IFTRUE 18669
18667: GO 18680
18669: POP
// bc_type := b_lab ; 4 .. 9 :
18670: LD_ADDR_OWVAR 42
18674: PUSH
18675: LD_INT 6
18677: ST_TO_ADDR
18678: GO 19262
18680: LD_INT 4
18682: DOUBLE
18683: GREATEREQUAL
18684: IFFALSE 18692
18686: LD_INT 9
18688: DOUBLE
18689: LESSEQUAL
18690: IFTRUE 18694
18692: GO 18754
18694: POP
// begin bc_type := b_lab_half ;
18695: LD_ADDR_OWVAR 42
18699: PUSH
18700: LD_INT 7
18702: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
18703: LD_ADDR_OWVAR 44
18707: PUSH
18708: LD_INT 10
18710: PUSH
18711: LD_INT 11
18713: PUSH
18714: LD_INT 12
18716: PUSH
18717: LD_INT 15
18719: PUSH
18720: LD_INT 14
18722: PUSH
18723: LD_INT 13
18725: PUSH
18726: EMPTY
18727: LIST
18728: LIST
18729: LIST
18730: LIST
18731: LIST
18732: LIST
18733: PUSH
18734: LD_VAR 0 2
18738: PUSH
18739: LD_INT 3
18741: MINUS
18742: ARRAY
18743: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
18744: LD_ADDR_OWVAR 45
18748: PUSH
18749: LD_INT 9
18751: ST_TO_ADDR
// end ; 10 .. 13 :
18752: GO 19262
18754: LD_INT 10
18756: DOUBLE
18757: GREATEREQUAL
18758: IFFALSE 18766
18760: LD_INT 13
18762: DOUBLE
18763: LESSEQUAL
18764: IFTRUE 18768
18766: GO 18845
18768: POP
// begin bc_type := b_lab_full ;
18769: LD_ADDR_OWVAR 42
18773: PUSH
18774: LD_INT 8
18776: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
18777: LD_ADDR_OWVAR 44
18781: PUSH
18782: LD_INT 10
18784: PUSH
18785: LD_INT 12
18787: PUSH
18788: LD_INT 14
18790: PUSH
18791: LD_INT 13
18793: PUSH
18794: EMPTY
18795: LIST
18796: LIST
18797: LIST
18798: LIST
18799: PUSH
18800: LD_VAR 0 2
18804: PUSH
18805: LD_INT 9
18807: MINUS
18808: ARRAY
18809: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
18810: LD_ADDR_OWVAR 45
18814: PUSH
18815: LD_INT 11
18817: PUSH
18818: LD_INT 15
18820: PUSH
18821: LD_INT 12
18823: PUSH
18824: LD_INT 15
18826: PUSH
18827: EMPTY
18828: LIST
18829: LIST
18830: LIST
18831: LIST
18832: PUSH
18833: LD_VAR 0 2
18837: PUSH
18838: LD_INT 9
18840: MINUS
18841: ARRAY
18842: ST_TO_ADDR
// end ; 14 :
18843: GO 19262
18845: LD_INT 14
18847: DOUBLE
18848: EQUAL
18849: IFTRUE 18853
18851: GO 18864
18853: POP
// bc_type := b_workshop ; 15 :
18854: LD_ADDR_OWVAR 42
18858: PUSH
18859: LD_INT 2
18861: ST_TO_ADDR
18862: GO 19262
18864: LD_INT 15
18866: DOUBLE
18867: EQUAL
18868: IFTRUE 18872
18870: GO 18883
18872: POP
// bc_type := b_factory ; 16 :
18873: LD_ADDR_OWVAR 42
18877: PUSH
18878: LD_INT 3
18880: ST_TO_ADDR
18881: GO 19262
18883: LD_INT 16
18885: DOUBLE
18886: EQUAL
18887: IFTRUE 18891
18889: GO 18902
18891: POP
// bc_type := b_ext_gun ; 17 :
18892: LD_ADDR_OWVAR 42
18896: PUSH
18897: LD_INT 17
18899: ST_TO_ADDR
18900: GO 19262
18902: LD_INT 17
18904: DOUBLE
18905: EQUAL
18906: IFTRUE 18910
18908: GO 18938
18910: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
18911: LD_ADDR_OWVAR 42
18915: PUSH
18916: LD_INT 19
18918: PUSH
18919: LD_INT 23
18921: PUSH
18922: LD_INT 19
18924: PUSH
18925: EMPTY
18926: LIST
18927: LIST
18928: LIST
18929: PUSH
18930: LD_VAR 0 1
18934: ARRAY
18935: ST_TO_ADDR
18936: GO 19262
18938: LD_INT 18
18940: DOUBLE
18941: EQUAL
18942: IFTRUE 18946
18944: GO 18957
18946: POP
// bc_type := b_ext_radar ; 19 :
18947: LD_ADDR_OWVAR 42
18951: PUSH
18952: LD_INT 20
18954: ST_TO_ADDR
18955: GO 19262
18957: LD_INT 19
18959: DOUBLE
18960: EQUAL
18961: IFTRUE 18965
18963: GO 18976
18965: POP
// bc_type := b_ext_radio ; 20 :
18966: LD_ADDR_OWVAR 42
18970: PUSH
18971: LD_INT 22
18973: ST_TO_ADDR
18974: GO 19262
18976: LD_INT 20
18978: DOUBLE
18979: EQUAL
18980: IFTRUE 18984
18982: GO 18995
18984: POP
// bc_type := b_ext_siberium ; 21 :
18985: LD_ADDR_OWVAR 42
18989: PUSH
18990: LD_INT 21
18992: ST_TO_ADDR
18993: GO 19262
18995: LD_INT 21
18997: DOUBLE
18998: EQUAL
18999: IFTRUE 19003
19001: GO 19014
19003: POP
// bc_type := b_ext_computer ; 22 :
19004: LD_ADDR_OWVAR 42
19008: PUSH
19009: LD_INT 24
19011: ST_TO_ADDR
19012: GO 19262
19014: LD_INT 22
19016: DOUBLE
19017: EQUAL
19018: IFTRUE 19022
19020: GO 19033
19022: POP
// bc_type := b_ext_track ; 23 :
19023: LD_ADDR_OWVAR 42
19027: PUSH
19028: LD_INT 16
19030: ST_TO_ADDR
19031: GO 19262
19033: LD_INT 23
19035: DOUBLE
19036: EQUAL
19037: IFTRUE 19041
19039: GO 19052
19041: POP
// bc_type := b_ext_laser ; 24 :
19042: LD_ADDR_OWVAR 42
19046: PUSH
19047: LD_INT 25
19049: ST_TO_ADDR
19050: GO 19262
19052: LD_INT 24
19054: DOUBLE
19055: EQUAL
19056: IFTRUE 19060
19058: GO 19071
19060: POP
// bc_type := b_control_tower ; 25 :
19061: LD_ADDR_OWVAR 42
19065: PUSH
19066: LD_INT 36
19068: ST_TO_ADDR
19069: GO 19262
19071: LD_INT 25
19073: DOUBLE
19074: EQUAL
19075: IFTRUE 19079
19077: GO 19090
19079: POP
// bc_type := b_breastwork ; 26 :
19080: LD_ADDR_OWVAR 42
19084: PUSH
19085: LD_INT 31
19087: ST_TO_ADDR
19088: GO 19262
19090: LD_INT 26
19092: DOUBLE
19093: EQUAL
19094: IFTRUE 19098
19096: GO 19109
19098: POP
// bc_type := b_bunker ; 27 :
19099: LD_ADDR_OWVAR 42
19103: PUSH
19104: LD_INT 32
19106: ST_TO_ADDR
19107: GO 19262
19109: LD_INT 27
19111: DOUBLE
19112: EQUAL
19113: IFTRUE 19117
19115: GO 19128
19117: POP
// bc_type := b_turret ; 28 :
19118: LD_ADDR_OWVAR 42
19122: PUSH
19123: LD_INT 33
19125: ST_TO_ADDR
19126: GO 19262
19128: LD_INT 28
19130: DOUBLE
19131: EQUAL
19132: IFTRUE 19136
19134: GO 19147
19136: POP
// bc_type := b_armoury ; 29 :
19137: LD_ADDR_OWVAR 42
19141: PUSH
19142: LD_INT 4
19144: ST_TO_ADDR
19145: GO 19262
19147: LD_INT 29
19149: DOUBLE
19150: EQUAL
19151: IFTRUE 19155
19153: GO 19166
19155: POP
// bc_type := b_barracks ; 30 :
19156: LD_ADDR_OWVAR 42
19160: PUSH
19161: LD_INT 5
19163: ST_TO_ADDR
19164: GO 19262
19166: LD_INT 30
19168: DOUBLE
19169: EQUAL
19170: IFTRUE 19174
19172: GO 19185
19174: POP
// bc_type := b_solar_power ; 31 :
19175: LD_ADDR_OWVAR 42
19179: PUSH
19180: LD_INT 27
19182: ST_TO_ADDR
19183: GO 19262
19185: LD_INT 31
19187: DOUBLE
19188: EQUAL
19189: IFTRUE 19193
19191: GO 19204
19193: POP
// bc_type := b_oil_power ; 32 :
19194: LD_ADDR_OWVAR 42
19198: PUSH
19199: LD_INT 26
19201: ST_TO_ADDR
19202: GO 19262
19204: LD_INT 32
19206: DOUBLE
19207: EQUAL
19208: IFTRUE 19212
19210: GO 19223
19212: POP
// bc_type := b_siberite_power ; 33 :
19213: LD_ADDR_OWVAR 42
19217: PUSH
19218: LD_INT 28
19220: ST_TO_ADDR
19221: GO 19262
19223: LD_INT 33
19225: DOUBLE
19226: EQUAL
19227: IFTRUE 19231
19229: GO 19242
19231: POP
// bc_type := b_oil_mine ; 34 :
19232: LD_ADDR_OWVAR 42
19236: PUSH
19237: LD_INT 29
19239: ST_TO_ADDR
19240: GO 19262
19242: LD_INT 34
19244: DOUBLE
19245: EQUAL
19246: IFTRUE 19250
19248: GO 19261
19250: POP
// bc_type := b_siberite_mine ; end ;
19251: LD_ADDR_OWVAR 42
19255: PUSH
19256: LD_INT 30
19258: ST_TO_ADDR
19259: GO 19262
19261: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
19262: LD_ADDR_VAR 0 8
19266: PUSH
19267: LD_VAR 0 5
19271: PPUSH
19272: LD_VAR 0 6
19276: PPUSH
19277: LD_VAR 0 3
19281: PPUSH
19282: CALL_OW 47
19286: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
19287: LD_OWVAR 42
19291: PUSH
19292: LD_INT 32
19294: PUSH
19295: LD_INT 33
19297: PUSH
19298: EMPTY
19299: LIST
19300: LIST
19301: IN
19302: IFFALSE 19318
// PlaceWeaponTurret ( b , weapon ) ;
19304: LD_VAR 0 8
19308: PPUSH
19309: LD_VAR 0 4
19313: PPUSH
19314: CALL_OW 431
// end ;
19318: LD_VAR 0 7
19322: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
19323: LD_INT 0
19325: PPUSH
19326: PPUSH
19327: PPUSH
19328: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19329: LD_ADDR_VAR 0 4
19333: PUSH
19334: LD_INT 22
19336: PUSH
19337: LD_OWVAR 2
19341: PUSH
19342: EMPTY
19343: LIST
19344: LIST
19345: PUSH
19346: LD_INT 2
19348: PUSH
19349: LD_INT 30
19351: PUSH
19352: LD_INT 0
19354: PUSH
19355: EMPTY
19356: LIST
19357: LIST
19358: PUSH
19359: LD_INT 30
19361: PUSH
19362: LD_INT 1
19364: PUSH
19365: EMPTY
19366: LIST
19367: LIST
19368: PUSH
19369: EMPTY
19370: LIST
19371: LIST
19372: LIST
19373: PUSH
19374: EMPTY
19375: LIST
19376: LIST
19377: PPUSH
19378: CALL_OW 69
19382: ST_TO_ADDR
// if not tmp then
19383: LD_VAR 0 4
19387: NOT
19388: IFFALSE 19392
// exit ;
19390: GO 19451
// for i in tmp do
19392: LD_ADDR_VAR 0 2
19396: PUSH
19397: LD_VAR 0 4
19401: PUSH
19402: FOR_IN
19403: IFFALSE 19449
// for j = 1 to 3 do
19405: LD_ADDR_VAR 0 3
19409: PUSH
19410: DOUBLE
19411: LD_INT 1
19413: DEC
19414: ST_TO_ADDR
19415: LD_INT 3
19417: PUSH
19418: FOR_TO
19419: IFFALSE 19445
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
19421: LD_VAR 0 2
19425: PPUSH
19426: CALL_OW 274
19430: PPUSH
19431: LD_VAR 0 3
19435: PPUSH
19436: LD_INT 99999
19438: PPUSH
19439: CALL_OW 277
19443: GO 19418
19445: POP
19446: POP
19447: GO 19402
19449: POP
19450: POP
// end ;
19451: LD_VAR 0 1
19455: RET
// export function hHackSetLevel10 ; var i , j ; begin
19456: LD_INT 0
19458: PPUSH
19459: PPUSH
19460: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19461: LD_ADDR_VAR 0 2
19465: PUSH
19466: LD_INT 21
19468: PUSH
19469: LD_INT 1
19471: PUSH
19472: EMPTY
19473: LIST
19474: LIST
19475: PPUSH
19476: CALL_OW 69
19480: PUSH
19481: FOR_IN
19482: IFFALSE 19534
// if IsSelected ( i ) then
19484: LD_VAR 0 2
19488: PPUSH
19489: CALL_OW 306
19493: IFFALSE 19532
// begin for j := 1 to 4 do
19495: LD_ADDR_VAR 0 3
19499: PUSH
19500: DOUBLE
19501: LD_INT 1
19503: DEC
19504: ST_TO_ADDR
19505: LD_INT 4
19507: PUSH
19508: FOR_TO
19509: IFFALSE 19530
// SetSkill ( i , j , 10 ) ;
19511: LD_VAR 0 2
19515: PPUSH
19516: LD_VAR 0 3
19520: PPUSH
19521: LD_INT 10
19523: PPUSH
19524: CALL_OW 237
19528: GO 19508
19530: POP
19531: POP
// end ;
19532: GO 19481
19534: POP
19535: POP
// end ;
19536: LD_VAR 0 1
19540: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
19541: LD_INT 0
19543: PPUSH
19544: PPUSH
19545: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
19546: LD_ADDR_VAR 0 2
19550: PUSH
19551: LD_INT 22
19553: PUSH
19554: LD_OWVAR 2
19558: PUSH
19559: EMPTY
19560: LIST
19561: LIST
19562: PUSH
19563: LD_INT 21
19565: PUSH
19566: LD_INT 1
19568: PUSH
19569: EMPTY
19570: LIST
19571: LIST
19572: PUSH
19573: EMPTY
19574: LIST
19575: LIST
19576: PPUSH
19577: CALL_OW 69
19581: PUSH
19582: FOR_IN
19583: IFFALSE 19624
// begin for j := 1 to 4 do
19585: LD_ADDR_VAR 0 3
19589: PUSH
19590: DOUBLE
19591: LD_INT 1
19593: DEC
19594: ST_TO_ADDR
19595: LD_INT 4
19597: PUSH
19598: FOR_TO
19599: IFFALSE 19620
// SetSkill ( i , j , 10 ) ;
19601: LD_VAR 0 2
19605: PPUSH
19606: LD_VAR 0 3
19610: PPUSH
19611: LD_INT 10
19613: PPUSH
19614: CALL_OW 237
19618: GO 19598
19620: POP
19621: POP
// end ;
19622: GO 19582
19624: POP
19625: POP
// end ;
19626: LD_VAR 0 1
19630: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
19631: LD_INT 0
19633: PPUSH
// uc_side := your_side ;
19634: LD_ADDR_OWVAR 20
19638: PUSH
19639: LD_OWVAR 2
19643: ST_TO_ADDR
// uc_nation := nation ;
19644: LD_ADDR_OWVAR 21
19648: PUSH
19649: LD_VAR 0 1
19653: ST_TO_ADDR
// InitHc ;
19654: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
19658: LD_INT 0
19660: PPUSH
19661: LD_VAR 0 2
19665: PPUSH
19666: LD_VAR 0 3
19670: PPUSH
19671: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
19675: LD_VAR 0 4
19679: PPUSH
19680: LD_VAR 0 5
19684: PPUSH
19685: CALL_OW 428
19689: PUSH
19690: LD_INT 0
19692: EQUAL
19693: IFFALSE 19717
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
19695: CALL_OW 44
19699: PPUSH
19700: LD_VAR 0 4
19704: PPUSH
19705: LD_VAR 0 5
19709: PPUSH
19710: LD_INT 1
19712: PPUSH
19713: CALL_OW 48
// end ;
19717: LD_VAR 0 6
19721: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
19722: LD_INT 0
19724: PPUSH
19725: PPUSH
// uc_side := your_side ;
19726: LD_ADDR_OWVAR 20
19730: PUSH
19731: LD_OWVAR 2
19735: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
19736: LD_VAR 0 1
19740: PUSH
19741: LD_INT 1
19743: PUSH
19744: LD_INT 2
19746: PUSH
19747: LD_INT 3
19749: PUSH
19750: LD_INT 4
19752: PUSH
19753: LD_INT 5
19755: PUSH
19756: EMPTY
19757: LIST
19758: LIST
19759: LIST
19760: LIST
19761: LIST
19762: IN
19763: IFFALSE 19775
// uc_nation := nation_american else
19765: LD_ADDR_OWVAR 21
19769: PUSH
19770: LD_INT 1
19772: ST_TO_ADDR
19773: GO 19818
// if chassis in [ 11 , 12 , 13 , 14 ] then
19775: LD_VAR 0 1
19779: PUSH
19780: LD_INT 11
19782: PUSH
19783: LD_INT 12
19785: PUSH
19786: LD_INT 13
19788: PUSH
19789: LD_INT 14
19791: PUSH
19792: EMPTY
19793: LIST
19794: LIST
19795: LIST
19796: LIST
19797: IN
19798: IFFALSE 19810
// uc_nation := nation_arabian else
19800: LD_ADDR_OWVAR 21
19804: PUSH
19805: LD_INT 2
19807: ST_TO_ADDR
19808: GO 19818
// uc_nation := nation_russian ;
19810: LD_ADDR_OWVAR 21
19814: PUSH
19815: LD_INT 3
19817: ST_TO_ADDR
// vc_chassis := chassis ;
19818: LD_ADDR_OWVAR 37
19822: PUSH
19823: LD_VAR 0 1
19827: ST_TO_ADDR
// vc_engine := engine ;
19828: LD_ADDR_OWVAR 39
19832: PUSH
19833: LD_VAR 0 2
19837: ST_TO_ADDR
// vc_control := control ;
19838: LD_ADDR_OWVAR 38
19842: PUSH
19843: LD_VAR 0 3
19847: ST_TO_ADDR
// vc_weapon := weapon ;
19848: LD_ADDR_OWVAR 40
19852: PUSH
19853: LD_VAR 0 4
19857: ST_TO_ADDR
// un := CreateVehicle ;
19858: LD_ADDR_VAR 0 8
19862: PUSH
19863: CALL_OW 45
19867: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
19868: LD_VAR 0 8
19872: PPUSH
19873: LD_INT 0
19875: PPUSH
19876: LD_INT 5
19878: PPUSH
19879: CALL_OW 12
19883: PPUSH
19884: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
19888: LD_VAR 0 8
19892: PPUSH
19893: LD_VAR 0 5
19897: PPUSH
19898: LD_VAR 0 6
19902: PPUSH
19903: LD_INT 1
19905: PPUSH
19906: CALL_OW 48
// end ;
19910: LD_VAR 0 7
19914: RET
// export hInvincible ; every 1 do
19915: GO 19917
19917: DISABLE
// hInvincible := [ ] ;
19918: LD_ADDR_EXP 83
19922: PUSH
19923: EMPTY
19924: ST_TO_ADDR
19925: END
// every 10 do var i ;
19926: GO 19928
19928: DISABLE
19929: LD_INT 0
19931: PPUSH
// begin enable ;
19932: ENABLE
// if not hInvincible then
19933: LD_EXP 83
19937: NOT
19938: IFFALSE 19942
// exit ;
19940: GO 19986
// for i in hInvincible do
19942: LD_ADDR_VAR 0 1
19946: PUSH
19947: LD_EXP 83
19951: PUSH
19952: FOR_IN
19953: IFFALSE 19984
// if GetLives ( i ) < 1000 then
19955: LD_VAR 0 1
19959: PPUSH
19960: CALL_OW 256
19964: PUSH
19965: LD_INT 1000
19967: LESS
19968: IFFALSE 19982
// SetLives ( i , 1000 ) ;
19970: LD_VAR 0 1
19974: PPUSH
19975: LD_INT 1000
19977: PPUSH
19978: CALL_OW 234
19982: GO 19952
19984: POP
19985: POP
// end ;
19986: PPOPN 1
19988: END
// export function hHackInvincible ; var i ; begin
19989: LD_INT 0
19991: PPUSH
19992: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
19993: LD_ADDR_VAR 0 2
19997: PUSH
19998: LD_INT 2
20000: PUSH
20001: LD_INT 21
20003: PUSH
20004: LD_INT 1
20006: PUSH
20007: EMPTY
20008: LIST
20009: LIST
20010: PUSH
20011: LD_INT 21
20013: PUSH
20014: LD_INT 2
20016: PUSH
20017: EMPTY
20018: LIST
20019: LIST
20020: PUSH
20021: EMPTY
20022: LIST
20023: LIST
20024: LIST
20025: PPUSH
20026: CALL_OW 69
20030: PUSH
20031: FOR_IN
20032: IFFALSE 20093
// if IsSelected ( i ) then
20034: LD_VAR 0 2
20038: PPUSH
20039: CALL_OW 306
20043: IFFALSE 20091
// begin if i in hInvincible then
20045: LD_VAR 0 2
20049: PUSH
20050: LD_EXP 83
20054: IN
20055: IFFALSE 20075
// hInvincible := hInvincible diff i else
20057: LD_ADDR_EXP 83
20061: PUSH
20062: LD_EXP 83
20066: PUSH
20067: LD_VAR 0 2
20071: DIFF
20072: ST_TO_ADDR
20073: GO 20091
// hInvincible := hInvincible union i ;
20075: LD_ADDR_EXP 83
20079: PUSH
20080: LD_EXP 83
20084: PUSH
20085: LD_VAR 0 2
20089: UNION
20090: ST_TO_ADDR
// end ;
20091: GO 20031
20093: POP
20094: POP
// end ;
20095: LD_VAR 0 1
20099: RET
// export function hHackInvisible ; var i , j ; begin
20100: LD_INT 0
20102: PPUSH
20103: PPUSH
20104: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20105: LD_ADDR_VAR 0 2
20109: PUSH
20110: LD_INT 21
20112: PUSH
20113: LD_INT 1
20115: PUSH
20116: EMPTY
20117: LIST
20118: LIST
20119: PPUSH
20120: CALL_OW 69
20124: PUSH
20125: FOR_IN
20126: IFFALSE 20150
// if IsSelected ( i ) then
20128: LD_VAR 0 2
20132: PPUSH
20133: CALL_OW 306
20137: IFFALSE 20148
// ComForceInvisible ( i ) ;
20139: LD_VAR 0 2
20143: PPUSH
20144: CALL_OW 496
20148: GO 20125
20150: POP
20151: POP
// end ;
20152: LD_VAR 0 1
20156: RET
// export function hHackChangeYourSide ; begin
20157: LD_INT 0
20159: PPUSH
// if your_side = 8 then
20160: LD_OWVAR 2
20164: PUSH
20165: LD_INT 8
20167: EQUAL
20168: IFFALSE 20180
// your_side := 0 else
20170: LD_ADDR_OWVAR 2
20174: PUSH
20175: LD_INT 0
20177: ST_TO_ADDR
20178: GO 20194
// your_side := your_side + 1 ;
20180: LD_ADDR_OWVAR 2
20184: PUSH
20185: LD_OWVAR 2
20189: PUSH
20190: LD_INT 1
20192: PLUS
20193: ST_TO_ADDR
// end ;
20194: LD_VAR 0 1
20198: RET
// export function hHackChangeUnitSide ; var i , j ; begin
20199: LD_INT 0
20201: PPUSH
20202: PPUSH
20203: PPUSH
// for i in all_units do
20204: LD_ADDR_VAR 0 2
20208: PUSH
20209: LD_OWVAR 3
20213: PUSH
20214: FOR_IN
20215: IFFALSE 20293
// if IsSelected ( i ) then
20217: LD_VAR 0 2
20221: PPUSH
20222: CALL_OW 306
20226: IFFALSE 20291
// begin j := GetSide ( i ) ;
20228: LD_ADDR_VAR 0 3
20232: PUSH
20233: LD_VAR 0 2
20237: PPUSH
20238: CALL_OW 255
20242: ST_TO_ADDR
// if j = 8 then
20243: LD_VAR 0 3
20247: PUSH
20248: LD_INT 8
20250: EQUAL
20251: IFFALSE 20263
// j := 0 else
20253: LD_ADDR_VAR 0 3
20257: PUSH
20258: LD_INT 0
20260: ST_TO_ADDR
20261: GO 20277
// j := j + 1 ;
20263: LD_ADDR_VAR 0 3
20267: PUSH
20268: LD_VAR 0 3
20272: PUSH
20273: LD_INT 1
20275: PLUS
20276: ST_TO_ADDR
// SetSide ( i , j ) ;
20277: LD_VAR 0 2
20281: PPUSH
20282: LD_VAR 0 3
20286: PPUSH
20287: CALL_OW 235
// end ;
20291: GO 20214
20293: POP
20294: POP
// end ;
20295: LD_VAR 0 1
20299: RET
// export function hHackFog ; begin
20300: LD_INT 0
20302: PPUSH
// FogOff ( true ) ;
20303: LD_INT 1
20305: PPUSH
20306: CALL_OW 344
// end ;
20310: LD_VAR 0 1
20314: RET
// export function hHackTeleport ( unit , x , y ) ; begin
20315: LD_INT 0
20317: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
20318: LD_VAR 0 1
20322: PPUSH
20323: LD_VAR 0 2
20327: PPUSH
20328: LD_VAR 0 3
20332: PPUSH
20333: LD_INT 1
20335: PPUSH
20336: LD_INT 1
20338: PPUSH
20339: CALL_OW 483
// CenterOnXY ( x , y ) ;
20343: LD_VAR 0 2
20347: PPUSH
20348: LD_VAR 0 3
20352: PPUSH
20353: CALL_OW 84
// end ;
20357: LD_VAR 0 4
20361: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
20362: LD_INT 0
20364: PPUSH
20365: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
20366: LD_VAR 0 1
20370: NOT
20371: PUSH
20372: LD_VAR 0 2
20376: PPUSH
20377: LD_VAR 0 3
20381: PPUSH
20382: CALL_OW 488
20386: NOT
20387: OR
20388: PUSH
20389: LD_VAR 0 1
20393: PPUSH
20394: CALL_OW 266
20398: PUSH
20399: LD_INT 3
20401: NONEQUAL
20402: PUSH
20403: LD_VAR 0 1
20407: PPUSH
20408: CALL_OW 247
20412: PUSH
20413: LD_INT 1
20415: EQUAL
20416: NOT
20417: AND
20418: OR
20419: IFFALSE 20423
// exit ;
20421: GO 20572
// if GetType ( factory ) = unit_human then
20423: LD_VAR 0 1
20427: PPUSH
20428: CALL_OW 247
20432: PUSH
20433: LD_INT 1
20435: EQUAL
20436: IFFALSE 20453
// factory := IsInUnit ( factory ) ;
20438: LD_ADDR_VAR 0 1
20442: PUSH
20443: LD_VAR 0 1
20447: PPUSH
20448: CALL_OW 310
20452: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
20453: LD_VAR 0 1
20457: PPUSH
20458: CALL_OW 266
20462: PUSH
20463: LD_INT 3
20465: NONEQUAL
20466: IFFALSE 20470
// exit ;
20468: GO 20572
// if HexInfo ( x , y ) = factory then
20470: LD_VAR 0 2
20474: PPUSH
20475: LD_VAR 0 3
20479: PPUSH
20480: CALL_OW 428
20484: PUSH
20485: LD_VAR 0 1
20489: EQUAL
20490: IFFALSE 20517
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
20492: LD_ADDR_EXP 84
20496: PUSH
20497: LD_EXP 84
20501: PPUSH
20502: LD_VAR 0 1
20506: PPUSH
20507: LD_INT 0
20509: PPUSH
20510: CALL_OW 1
20514: ST_TO_ADDR
20515: GO 20568
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
20517: LD_ADDR_EXP 84
20521: PUSH
20522: LD_EXP 84
20526: PPUSH
20527: LD_VAR 0 1
20531: PPUSH
20532: LD_VAR 0 1
20536: PPUSH
20537: CALL_OW 255
20541: PUSH
20542: LD_VAR 0 1
20546: PUSH
20547: LD_VAR 0 2
20551: PUSH
20552: LD_VAR 0 3
20556: PUSH
20557: EMPTY
20558: LIST
20559: LIST
20560: LIST
20561: LIST
20562: PPUSH
20563: CALL_OW 1
20567: ST_TO_ADDR
// UpdateFactoryWaypoints ;
20568: CALL 20577 0 0
// end ;
20572: LD_VAR 0 4
20576: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
20577: LD_INT 0
20579: PPUSH
20580: PPUSH
20581: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
20582: LD_STRING resetFactoryWaypoint();
20584: PPUSH
20585: CALL_OW 559
// if factoryWaypoints then
20589: LD_EXP 84
20593: IFFALSE 20719
// begin list := PrepareArray ( factoryWaypoints ) ;
20595: LD_ADDR_VAR 0 3
20599: PUSH
20600: LD_EXP 84
20604: PPUSH
20605: CALL 67041 0 1
20609: ST_TO_ADDR
// for i := 1 to list do
20610: LD_ADDR_VAR 0 2
20614: PUSH
20615: DOUBLE
20616: LD_INT 1
20618: DEC
20619: ST_TO_ADDR
20620: LD_VAR 0 3
20624: PUSH
20625: FOR_TO
20626: IFFALSE 20717
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
20628: LD_STRING setFactoryWaypointXY(
20630: PUSH
20631: LD_VAR 0 3
20635: PUSH
20636: LD_VAR 0 2
20640: ARRAY
20641: PUSH
20642: LD_INT 1
20644: ARRAY
20645: STR
20646: PUSH
20647: LD_STRING ,
20649: STR
20650: PUSH
20651: LD_VAR 0 3
20655: PUSH
20656: LD_VAR 0 2
20660: ARRAY
20661: PUSH
20662: LD_INT 2
20664: ARRAY
20665: STR
20666: PUSH
20667: LD_STRING ,
20669: STR
20670: PUSH
20671: LD_VAR 0 3
20675: PUSH
20676: LD_VAR 0 2
20680: ARRAY
20681: PUSH
20682: LD_INT 3
20684: ARRAY
20685: STR
20686: PUSH
20687: LD_STRING ,
20689: STR
20690: PUSH
20691: LD_VAR 0 3
20695: PUSH
20696: LD_VAR 0 2
20700: ARRAY
20701: PUSH
20702: LD_INT 4
20704: ARRAY
20705: STR
20706: PUSH
20707: LD_STRING )
20709: STR
20710: PPUSH
20711: CALL_OW 559
20715: GO 20625
20717: POP
20718: POP
// end ; end ;
20719: LD_VAR 0 1
20723: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
20724: LD_INT 0
20726: PPUSH
// if HexInfo ( x , y ) = warehouse then
20727: LD_VAR 0 2
20731: PPUSH
20732: LD_VAR 0 3
20736: PPUSH
20737: CALL_OW 428
20741: PUSH
20742: LD_VAR 0 1
20746: EQUAL
20747: IFFALSE 20774
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
20749: LD_ADDR_EXP 85
20753: PUSH
20754: LD_EXP 85
20758: PPUSH
20759: LD_VAR 0 1
20763: PPUSH
20764: LD_INT 0
20766: PPUSH
20767: CALL_OW 1
20771: ST_TO_ADDR
20772: GO 20825
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
20774: LD_ADDR_EXP 85
20778: PUSH
20779: LD_EXP 85
20783: PPUSH
20784: LD_VAR 0 1
20788: PPUSH
20789: LD_VAR 0 1
20793: PPUSH
20794: CALL_OW 255
20798: PUSH
20799: LD_VAR 0 1
20803: PUSH
20804: LD_VAR 0 2
20808: PUSH
20809: LD_VAR 0 3
20813: PUSH
20814: EMPTY
20815: LIST
20816: LIST
20817: LIST
20818: LIST
20819: PPUSH
20820: CALL_OW 1
20824: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
20825: CALL 20834 0 0
// end ;
20829: LD_VAR 0 4
20833: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
20834: LD_INT 0
20836: PPUSH
20837: PPUSH
20838: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
20839: LD_STRING resetWarehouseGatheringPoints();
20841: PPUSH
20842: CALL_OW 559
// if warehouseGatheringPoints then
20846: LD_EXP 85
20850: IFFALSE 20976
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
20852: LD_ADDR_VAR 0 3
20856: PUSH
20857: LD_EXP 85
20861: PPUSH
20862: CALL 67041 0 1
20866: ST_TO_ADDR
// for i := 1 to list do
20867: LD_ADDR_VAR 0 2
20871: PUSH
20872: DOUBLE
20873: LD_INT 1
20875: DEC
20876: ST_TO_ADDR
20877: LD_VAR 0 3
20881: PUSH
20882: FOR_TO
20883: IFFALSE 20974
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
20885: LD_STRING setWarehouseGatheringPointXY(
20887: PUSH
20888: LD_VAR 0 3
20892: PUSH
20893: LD_VAR 0 2
20897: ARRAY
20898: PUSH
20899: LD_INT 1
20901: ARRAY
20902: STR
20903: PUSH
20904: LD_STRING ,
20906: STR
20907: PUSH
20908: LD_VAR 0 3
20912: PUSH
20913: LD_VAR 0 2
20917: ARRAY
20918: PUSH
20919: LD_INT 2
20921: ARRAY
20922: STR
20923: PUSH
20924: LD_STRING ,
20926: STR
20927: PUSH
20928: LD_VAR 0 3
20932: PUSH
20933: LD_VAR 0 2
20937: ARRAY
20938: PUSH
20939: LD_INT 3
20941: ARRAY
20942: STR
20943: PUSH
20944: LD_STRING ,
20946: STR
20947: PUSH
20948: LD_VAR 0 3
20952: PUSH
20953: LD_VAR 0 2
20957: ARRAY
20958: PUSH
20959: LD_INT 4
20961: ARRAY
20962: STR
20963: PUSH
20964: LD_STRING )
20966: STR
20967: PPUSH
20968: CALL_OW 559
20972: GO 20882
20974: POP
20975: POP
// end ; end ;
20976: LD_VAR 0 1
20980: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
20981: LD_EXP 85
20985: IFFALSE 21670
20987: GO 20989
20989: DISABLE
20990: LD_INT 0
20992: PPUSH
20993: PPUSH
20994: PPUSH
20995: PPUSH
20996: PPUSH
20997: PPUSH
20998: PPUSH
20999: PPUSH
21000: PPUSH
// begin enable ;
21001: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
21002: LD_ADDR_VAR 0 3
21006: PUSH
21007: LD_EXP 85
21011: PPUSH
21012: CALL 67041 0 1
21016: ST_TO_ADDR
// if not list then
21017: LD_VAR 0 3
21021: NOT
21022: IFFALSE 21026
// exit ;
21024: GO 21670
// for i := 1 to list do
21026: LD_ADDR_VAR 0 1
21030: PUSH
21031: DOUBLE
21032: LD_INT 1
21034: DEC
21035: ST_TO_ADDR
21036: LD_VAR 0 3
21040: PUSH
21041: FOR_TO
21042: IFFALSE 21668
// begin depot := list [ i ] [ 2 ] ;
21044: LD_ADDR_VAR 0 8
21048: PUSH
21049: LD_VAR 0 3
21053: PUSH
21054: LD_VAR 0 1
21058: ARRAY
21059: PUSH
21060: LD_INT 2
21062: ARRAY
21063: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
21064: LD_ADDR_VAR 0 5
21068: PUSH
21069: LD_VAR 0 3
21073: PUSH
21074: LD_VAR 0 1
21078: ARRAY
21079: PUSH
21080: LD_INT 1
21082: ARRAY
21083: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
21084: LD_VAR 0 8
21088: PPUSH
21089: CALL_OW 301
21093: PUSH
21094: LD_VAR 0 5
21098: PUSH
21099: LD_VAR 0 8
21103: PPUSH
21104: CALL_OW 255
21108: NONEQUAL
21109: OR
21110: IFFALSE 21139
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
21112: LD_ADDR_EXP 85
21116: PUSH
21117: LD_EXP 85
21121: PPUSH
21122: LD_VAR 0 8
21126: PPUSH
21127: LD_INT 0
21129: PPUSH
21130: CALL_OW 1
21134: ST_TO_ADDR
// exit ;
21135: POP
21136: POP
21137: GO 21670
// end ; x := list [ i ] [ 3 ] ;
21139: LD_ADDR_VAR 0 6
21143: PUSH
21144: LD_VAR 0 3
21148: PUSH
21149: LD_VAR 0 1
21153: ARRAY
21154: PUSH
21155: LD_INT 3
21157: ARRAY
21158: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
21159: LD_ADDR_VAR 0 7
21163: PUSH
21164: LD_VAR 0 3
21168: PUSH
21169: LD_VAR 0 1
21173: ARRAY
21174: PUSH
21175: LD_INT 4
21177: ARRAY
21178: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
21179: LD_ADDR_VAR 0 9
21183: PUSH
21184: LD_VAR 0 6
21188: PPUSH
21189: LD_VAR 0 7
21193: PPUSH
21194: LD_INT 16
21196: PPUSH
21197: CALL 65629 0 3
21201: ST_TO_ADDR
// if not cratesNearbyPoint then
21202: LD_VAR 0 9
21206: NOT
21207: IFFALSE 21213
// exit ;
21209: POP
21210: POP
21211: GO 21670
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
21213: LD_ADDR_VAR 0 4
21217: PUSH
21218: LD_INT 22
21220: PUSH
21221: LD_VAR 0 5
21225: PUSH
21226: EMPTY
21227: LIST
21228: LIST
21229: PUSH
21230: LD_INT 3
21232: PUSH
21233: LD_INT 60
21235: PUSH
21236: EMPTY
21237: LIST
21238: PUSH
21239: EMPTY
21240: LIST
21241: LIST
21242: PUSH
21243: LD_INT 91
21245: PUSH
21246: LD_VAR 0 8
21250: PUSH
21251: LD_INT 6
21253: PUSH
21254: EMPTY
21255: LIST
21256: LIST
21257: LIST
21258: PUSH
21259: LD_INT 2
21261: PUSH
21262: LD_INT 25
21264: PUSH
21265: LD_INT 2
21267: PUSH
21268: EMPTY
21269: LIST
21270: LIST
21271: PUSH
21272: LD_INT 25
21274: PUSH
21275: LD_INT 16
21277: PUSH
21278: EMPTY
21279: LIST
21280: LIST
21281: PUSH
21282: EMPTY
21283: LIST
21284: LIST
21285: LIST
21286: PUSH
21287: EMPTY
21288: LIST
21289: LIST
21290: LIST
21291: LIST
21292: PPUSH
21293: CALL_OW 69
21297: PUSH
21298: LD_VAR 0 8
21302: PPUSH
21303: CALL_OW 313
21307: PPUSH
21308: LD_INT 3
21310: PUSH
21311: LD_INT 60
21313: PUSH
21314: EMPTY
21315: LIST
21316: PUSH
21317: EMPTY
21318: LIST
21319: LIST
21320: PUSH
21321: LD_INT 2
21323: PUSH
21324: LD_INT 25
21326: PUSH
21327: LD_INT 2
21329: PUSH
21330: EMPTY
21331: LIST
21332: LIST
21333: PUSH
21334: LD_INT 25
21336: PUSH
21337: LD_INT 16
21339: PUSH
21340: EMPTY
21341: LIST
21342: LIST
21343: PUSH
21344: EMPTY
21345: LIST
21346: LIST
21347: LIST
21348: PUSH
21349: EMPTY
21350: LIST
21351: LIST
21352: PPUSH
21353: CALL_OW 72
21357: UNION
21358: ST_TO_ADDR
// if tmp then
21359: LD_VAR 0 4
21363: IFFALSE 21443
// begin tmp := ShrinkArray ( tmp , 3 ) ;
21365: LD_ADDR_VAR 0 4
21369: PUSH
21370: LD_VAR 0 4
21374: PPUSH
21375: LD_INT 3
21377: PPUSH
21378: CALL 63598 0 2
21382: ST_TO_ADDR
// for j in tmp do
21383: LD_ADDR_VAR 0 2
21387: PUSH
21388: LD_VAR 0 4
21392: PUSH
21393: FOR_IN
21394: IFFALSE 21437
// begin if IsInUnit ( j ) then
21396: LD_VAR 0 2
21400: PPUSH
21401: CALL_OW 310
21405: IFFALSE 21416
// ComExit ( j ) ;
21407: LD_VAR 0 2
21411: PPUSH
21412: CALL 63681 0 1
// AddComCollect ( j , x , y ) ;
21416: LD_VAR 0 2
21420: PPUSH
21421: LD_VAR 0 6
21425: PPUSH
21426: LD_VAR 0 7
21430: PPUSH
21431: CALL_OW 177
// end ;
21435: GO 21393
21437: POP
21438: POP
// exit ;
21439: POP
21440: POP
21441: GO 21670
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
21443: LD_ADDR_VAR 0 4
21447: PUSH
21448: LD_INT 22
21450: PUSH
21451: LD_VAR 0 5
21455: PUSH
21456: EMPTY
21457: LIST
21458: LIST
21459: PUSH
21460: LD_INT 91
21462: PUSH
21463: LD_VAR 0 8
21467: PUSH
21468: LD_INT 8
21470: PUSH
21471: EMPTY
21472: LIST
21473: LIST
21474: LIST
21475: PUSH
21476: LD_INT 2
21478: PUSH
21479: LD_INT 34
21481: PUSH
21482: LD_INT 12
21484: PUSH
21485: EMPTY
21486: LIST
21487: LIST
21488: PUSH
21489: LD_INT 34
21491: PUSH
21492: LD_INT 51
21494: PUSH
21495: EMPTY
21496: LIST
21497: LIST
21498: PUSH
21499: LD_INT 34
21501: PUSH
21502: LD_INT 32
21504: PUSH
21505: EMPTY
21506: LIST
21507: LIST
21508: PUSH
21509: LD_INT 34
21511: PUSH
21512: LD_INT 89
21514: PUSH
21515: EMPTY
21516: LIST
21517: LIST
21518: PUSH
21519: EMPTY
21520: LIST
21521: LIST
21522: LIST
21523: LIST
21524: LIST
21525: PUSH
21526: EMPTY
21527: LIST
21528: LIST
21529: LIST
21530: PPUSH
21531: CALL_OW 69
21535: ST_TO_ADDR
// if tmp then
21536: LD_VAR 0 4
21540: IFFALSE 21666
// begin for j in tmp do
21542: LD_ADDR_VAR 0 2
21546: PUSH
21547: LD_VAR 0 4
21551: PUSH
21552: FOR_IN
21553: IFFALSE 21664
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
21555: LD_VAR 0 2
21559: PPUSH
21560: CALL_OW 262
21564: PUSH
21565: LD_INT 3
21567: EQUAL
21568: PUSH
21569: LD_VAR 0 2
21573: PPUSH
21574: CALL_OW 261
21578: PUSH
21579: LD_INT 20
21581: GREATER
21582: OR
21583: PUSH
21584: LD_VAR 0 2
21588: PPUSH
21589: CALL_OW 314
21593: NOT
21594: AND
21595: PUSH
21596: LD_VAR 0 2
21600: PPUSH
21601: CALL_OW 263
21605: PUSH
21606: LD_INT 1
21608: NONEQUAL
21609: PUSH
21610: LD_VAR 0 2
21614: PPUSH
21615: CALL_OW 311
21619: OR
21620: AND
21621: IFFALSE 21662
// begin ComCollect ( j , x , y ) ;
21623: LD_VAR 0 2
21627: PPUSH
21628: LD_VAR 0 6
21632: PPUSH
21633: LD_VAR 0 7
21637: PPUSH
21638: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
21642: LD_VAR 0 2
21646: PPUSH
21647: LD_VAR 0 8
21651: PPUSH
21652: CALL_OW 172
// exit ;
21656: POP
21657: POP
21658: POP
21659: POP
21660: GO 21670
// end ;
21662: GO 21552
21664: POP
21665: POP
// end ; end ;
21666: GO 21041
21668: POP
21669: POP
// end ; end_of_file
21670: PPOPN 9
21672: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
21673: LD_INT 0
21675: PPUSH
21676: PPUSH
21677: PPUSH
21678: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
21679: LD_VAR 0 1
21683: PPUSH
21684: CALL_OW 264
21688: PUSH
21689: LD_INT 91
21691: EQUAL
21692: IFFALSE 21764
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
21694: LD_INT 68
21696: PPUSH
21697: LD_VAR 0 1
21701: PPUSH
21702: CALL_OW 255
21706: PPUSH
21707: CALL_OW 321
21711: PUSH
21712: LD_INT 2
21714: EQUAL
21715: IFFALSE 21727
// eff := 70 else
21717: LD_ADDR_VAR 0 4
21721: PUSH
21722: LD_INT 70
21724: ST_TO_ADDR
21725: GO 21735
// eff := 30 ;
21727: LD_ADDR_VAR 0 4
21731: PUSH
21732: LD_INT 30
21734: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
21735: LD_VAR 0 1
21739: PPUSH
21740: CALL_OW 250
21744: PPUSH
21745: LD_VAR 0 1
21749: PPUSH
21750: CALL_OW 251
21754: PPUSH
21755: LD_VAR 0 4
21759: PPUSH
21760: CALL_OW 495
// end ; end ;
21764: LD_VAR 0 2
21768: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
21769: LD_INT 0
21771: PPUSH
// end ;
21772: LD_VAR 0 4
21776: RET
// export function SOS_Command ( cmd ) ; begin
21777: LD_INT 0
21779: PPUSH
// end ;
21780: LD_VAR 0 2
21784: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
21785: LD_INT 0
21787: PPUSH
// end ;
21788: LD_VAR 0 6
21792: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
21793: LD_INT 0
21795: PPUSH
21796: PPUSH
// if not vehicle or not factory then
21797: LD_VAR 0 1
21801: NOT
21802: PUSH
21803: LD_VAR 0 2
21807: NOT
21808: OR
21809: IFFALSE 21813
// exit ;
21811: GO 22044
// if factoryWaypoints >= factory then
21813: LD_EXP 84
21817: PUSH
21818: LD_VAR 0 2
21822: GREATEREQUAL
21823: IFFALSE 22044
// if factoryWaypoints [ factory ] then
21825: LD_EXP 84
21829: PUSH
21830: LD_VAR 0 2
21834: ARRAY
21835: IFFALSE 22044
// begin if GetControl ( vehicle ) = control_manual then
21837: LD_VAR 0 1
21841: PPUSH
21842: CALL_OW 263
21846: PUSH
21847: LD_INT 1
21849: EQUAL
21850: IFFALSE 21931
// begin driver := IsDrivenBy ( vehicle ) ;
21852: LD_ADDR_VAR 0 4
21856: PUSH
21857: LD_VAR 0 1
21861: PPUSH
21862: CALL_OW 311
21866: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21867: LD_VAR 0 4
21871: PPUSH
21872: LD_EXP 84
21876: PUSH
21877: LD_VAR 0 2
21881: ARRAY
21882: PUSH
21883: LD_INT 3
21885: ARRAY
21886: PPUSH
21887: LD_EXP 84
21891: PUSH
21892: LD_VAR 0 2
21896: ARRAY
21897: PUSH
21898: LD_INT 4
21900: ARRAY
21901: PPUSH
21902: CALL_OW 171
// AddComExitVehicle ( driver ) ;
21906: LD_VAR 0 4
21910: PPUSH
21911: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
21915: LD_VAR 0 4
21919: PPUSH
21920: LD_VAR 0 2
21924: PPUSH
21925: CALL_OW 180
// end else
21929: GO 22044
// if GetControl ( vehicle ) = control_remote then
21931: LD_VAR 0 1
21935: PPUSH
21936: CALL_OW 263
21940: PUSH
21941: LD_INT 2
21943: EQUAL
21944: IFFALSE 22005
// begin wait ( 0 0$2 ) ;
21946: LD_INT 70
21948: PPUSH
21949: CALL_OW 67
// if Connect ( vehicle ) then
21953: LD_VAR 0 1
21957: PPUSH
21958: CALL 33902 0 1
21962: IFFALSE 22003
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21964: LD_VAR 0 1
21968: PPUSH
21969: LD_EXP 84
21973: PUSH
21974: LD_VAR 0 2
21978: ARRAY
21979: PUSH
21980: LD_INT 3
21982: ARRAY
21983: PPUSH
21984: LD_EXP 84
21988: PUSH
21989: LD_VAR 0 2
21993: ARRAY
21994: PUSH
21995: LD_INT 4
21997: ARRAY
21998: PPUSH
21999: CALL_OW 171
// end else
22003: GO 22044
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
22005: LD_VAR 0 1
22009: PPUSH
22010: LD_EXP 84
22014: PUSH
22015: LD_VAR 0 2
22019: ARRAY
22020: PUSH
22021: LD_INT 3
22023: ARRAY
22024: PPUSH
22025: LD_EXP 84
22029: PUSH
22030: LD_VAR 0 2
22034: ARRAY
22035: PUSH
22036: LD_INT 4
22038: ARRAY
22039: PPUSH
22040: CALL_OW 171
// end ; end ;
22044: LD_VAR 0 3
22048: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
22049: LD_INT 0
22051: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
22052: LD_VAR 0 1
22056: PUSH
22057: LD_INT 250
22059: EQUAL
22060: PUSH
22061: LD_VAR 0 2
22065: PPUSH
22066: CALL_OW 264
22070: PUSH
22071: LD_INT 81
22073: EQUAL
22074: AND
22075: IFFALSE 22096
// MinerPlaceMine ( unit , x , y ) ;
22077: LD_VAR 0 2
22081: PPUSH
22082: LD_VAR 0 4
22086: PPUSH
22087: LD_VAR 0 5
22091: PPUSH
22092: CALL 24481 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
22096: LD_VAR 0 1
22100: PUSH
22101: LD_INT 251
22103: EQUAL
22104: PUSH
22105: LD_VAR 0 2
22109: PPUSH
22110: CALL_OW 264
22114: PUSH
22115: LD_INT 81
22117: EQUAL
22118: AND
22119: IFFALSE 22140
// MinerDetonateMine ( unit , x , y ) ;
22121: LD_VAR 0 2
22125: PPUSH
22126: LD_VAR 0 4
22130: PPUSH
22131: LD_VAR 0 5
22135: PPUSH
22136: CALL 24756 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
22140: LD_VAR 0 1
22144: PUSH
22145: LD_INT 252
22147: EQUAL
22148: PUSH
22149: LD_VAR 0 2
22153: PPUSH
22154: CALL_OW 264
22158: PUSH
22159: LD_INT 81
22161: EQUAL
22162: AND
22163: IFFALSE 22184
// MinerCreateMinefield ( unit , x , y ) ;
22165: LD_VAR 0 2
22169: PPUSH
22170: LD_VAR 0 4
22174: PPUSH
22175: LD_VAR 0 5
22179: PPUSH
22180: CALL 25173 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
22184: LD_VAR 0 1
22188: PUSH
22189: LD_INT 253
22191: EQUAL
22192: PUSH
22193: LD_VAR 0 2
22197: PPUSH
22198: CALL_OW 257
22202: PUSH
22203: LD_INT 5
22205: EQUAL
22206: AND
22207: IFFALSE 22228
// ComBinocular ( unit , x , y ) ;
22209: LD_VAR 0 2
22213: PPUSH
22214: LD_VAR 0 4
22218: PPUSH
22219: LD_VAR 0 5
22223: PPUSH
22224: CALL 25542 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
22228: LD_VAR 0 1
22232: PUSH
22233: LD_INT 254
22235: EQUAL
22236: PUSH
22237: LD_VAR 0 2
22241: PPUSH
22242: CALL_OW 264
22246: PUSH
22247: LD_INT 99
22249: EQUAL
22250: AND
22251: PUSH
22252: LD_VAR 0 3
22256: PPUSH
22257: CALL_OW 263
22261: PUSH
22262: LD_INT 3
22264: EQUAL
22265: AND
22266: IFFALSE 22282
// HackDestroyVehicle ( unit , selectedUnit ) ;
22268: LD_VAR 0 2
22272: PPUSH
22273: LD_VAR 0 3
22277: PPUSH
22278: CALL 23845 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
22282: LD_VAR 0 1
22286: PUSH
22287: LD_INT 255
22289: EQUAL
22290: PUSH
22291: LD_VAR 0 2
22295: PPUSH
22296: CALL_OW 264
22300: PUSH
22301: LD_INT 14
22303: PUSH
22304: LD_INT 53
22306: PUSH
22307: EMPTY
22308: LIST
22309: LIST
22310: IN
22311: AND
22312: PUSH
22313: LD_VAR 0 4
22317: PPUSH
22318: LD_VAR 0 5
22322: PPUSH
22323: CALL_OW 488
22327: AND
22328: IFFALSE 22352
// CutTreeXYR ( unit , x , y , 12 ) ;
22330: LD_VAR 0 2
22334: PPUSH
22335: LD_VAR 0 4
22339: PPUSH
22340: LD_VAR 0 5
22344: PPUSH
22345: LD_INT 12
22347: PPUSH
22348: CALL 22415 0 4
// if cmd = 256 then
22352: LD_VAR 0 1
22356: PUSH
22357: LD_INT 256
22359: EQUAL
22360: IFFALSE 22381
// SetFactoryWaypoint ( unit , x , y ) ;
22362: LD_VAR 0 2
22366: PPUSH
22367: LD_VAR 0 4
22371: PPUSH
22372: LD_VAR 0 5
22376: PPUSH
22377: CALL 20362 0 3
// if cmd = 257 then
22381: LD_VAR 0 1
22385: PUSH
22386: LD_INT 257
22388: EQUAL
22389: IFFALSE 22410
// SetWarehouseGatheringPoint ( unit , x , y ) ;
22391: LD_VAR 0 2
22395: PPUSH
22396: LD_VAR 0 4
22400: PPUSH
22401: LD_VAR 0 5
22405: PPUSH
22406: CALL 20724 0 3
// end ;
22410: LD_VAR 0 6
22414: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
22415: LD_INT 0
22417: PPUSH
22418: PPUSH
22419: PPUSH
22420: PPUSH
22421: PPUSH
22422: PPUSH
22423: PPUSH
22424: PPUSH
22425: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
22426: LD_VAR 0 1
22430: NOT
22431: PUSH
22432: LD_VAR 0 2
22436: PPUSH
22437: LD_VAR 0 3
22441: PPUSH
22442: CALL_OW 488
22446: NOT
22447: OR
22448: PUSH
22449: LD_VAR 0 4
22453: NOT
22454: OR
22455: IFFALSE 22459
// exit ;
22457: GO 22799
// list := [ ] ;
22459: LD_ADDR_VAR 0 13
22463: PUSH
22464: EMPTY
22465: ST_TO_ADDR
// if x - r < 0 then
22466: LD_VAR 0 2
22470: PUSH
22471: LD_VAR 0 4
22475: MINUS
22476: PUSH
22477: LD_INT 0
22479: LESS
22480: IFFALSE 22492
// min_x := 0 else
22482: LD_ADDR_VAR 0 7
22486: PUSH
22487: LD_INT 0
22489: ST_TO_ADDR
22490: GO 22508
// min_x := x - r ;
22492: LD_ADDR_VAR 0 7
22496: PUSH
22497: LD_VAR 0 2
22501: PUSH
22502: LD_VAR 0 4
22506: MINUS
22507: ST_TO_ADDR
// if y - r < 0 then
22508: LD_VAR 0 3
22512: PUSH
22513: LD_VAR 0 4
22517: MINUS
22518: PUSH
22519: LD_INT 0
22521: LESS
22522: IFFALSE 22534
// min_y := 0 else
22524: LD_ADDR_VAR 0 8
22528: PUSH
22529: LD_INT 0
22531: ST_TO_ADDR
22532: GO 22550
// min_y := y - r ;
22534: LD_ADDR_VAR 0 8
22538: PUSH
22539: LD_VAR 0 3
22543: PUSH
22544: LD_VAR 0 4
22548: MINUS
22549: ST_TO_ADDR
// max_x := x + r ;
22550: LD_ADDR_VAR 0 9
22554: PUSH
22555: LD_VAR 0 2
22559: PUSH
22560: LD_VAR 0 4
22564: PLUS
22565: ST_TO_ADDR
// max_y := y + r ;
22566: LD_ADDR_VAR 0 10
22570: PUSH
22571: LD_VAR 0 3
22575: PUSH
22576: LD_VAR 0 4
22580: PLUS
22581: ST_TO_ADDR
// for _x = min_x to max_x do
22582: LD_ADDR_VAR 0 11
22586: PUSH
22587: DOUBLE
22588: LD_VAR 0 7
22592: DEC
22593: ST_TO_ADDR
22594: LD_VAR 0 9
22598: PUSH
22599: FOR_TO
22600: IFFALSE 22717
// for _y = min_y to max_y do
22602: LD_ADDR_VAR 0 12
22606: PUSH
22607: DOUBLE
22608: LD_VAR 0 8
22612: DEC
22613: ST_TO_ADDR
22614: LD_VAR 0 10
22618: PUSH
22619: FOR_TO
22620: IFFALSE 22713
// begin if not ValidHex ( _x , _y ) then
22622: LD_VAR 0 11
22626: PPUSH
22627: LD_VAR 0 12
22631: PPUSH
22632: CALL_OW 488
22636: NOT
22637: IFFALSE 22641
// continue ;
22639: GO 22619
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
22641: LD_VAR 0 11
22645: PPUSH
22646: LD_VAR 0 12
22650: PPUSH
22651: CALL_OW 351
22655: PUSH
22656: LD_VAR 0 11
22660: PPUSH
22661: LD_VAR 0 12
22665: PPUSH
22666: CALL_OW 554
22670: AND
22671: IFFALSE 22711
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
22673: LD_ADDR_VAR 0 13
22677: PUSH
22678: LD_VAR 0 13
22682: PPUSH
22683: LD_VAR 0 13
22687: PUSH
22688: LD_INT 1
22690: PLUS
22691: PPUSH
22692: LD_VAR 0 11
22696: PUSH
22697: LD_VAR 0 12
22701: PUSH
22702: EMPTY
22703: LIST
22704: LIST
22705: PPUSH
22706: CALL_OW 2
22710: ST_TO_ADDR
// end ;
22711: GO 22619
22713: POP
22714: POP
22715: GO 22599
22717: POP
22718: POP
// if not list then
22719: LD_VAR 0 13
22723: NOT
22724: IFFALSE 22728
// exit ;
22726: GO 22799
// for i in list do
22728: LD_ADDR_VAR 0 6
22732: PUSH
22733: LD_VAR 0 13
22737: PUSH
22738: FOR_IN
22739: IFFALSE 22797
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
22741: LD_VAR 0 1
22745: PPUSH
22746: LD_STRING M
22748: PUSH
22749: LD_VAR 0 6
22753: PUSH
22754: LD_INT 1
22756: ARRAY
22757: PUSH
22758: LD_VAR 0 6
22762: PUSH
22763: LD_INT 2
22765: ARRAY
22766: PUSH
22767: LD_INT 0
22769: PUSH
22770: LD_INT 0
22772: PUSH
22773: LD_INT 0
22775: PUSH
22776: LD_INT 0
22778: PUSH
22779: EMPTY
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: LIST
22785: LIST
22786: LIST
22787: PUSH
22788: EMPTY
22789: LIST
22790: PPUSH
22791: CALL_OW 447
22795: GO 22738
22797: POP
22798: POP
// end ;
22799: LD_VAR 0 5
22803: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
22804: LD_EXP 87
22808: NOT
22809: IFFALSE 22859
22811: GO 22813
22813: DISABLE
// begin initHack := true ;
22814: LD_ADDR_EXP 87
22818: PUSH
22819: LD_INT 1
22821: ST_TO_ADDR
// hackTanks := [ ] ;
22822: LD_ADDR_EXP 88
22826: PUSH
22827: EMPTY
22828: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
22829: LD_ADDR_EXP 89
22833: PUSH
22834: EMPTY
22835: ST_TO_ADDR
// hackLimit := 3 ;
22836: LD_ADDR_EXP 90
22840: PUSH
22841: LD_INT 3
22843: ST_TO_ADDR
// hackDist := 12 ;
22844: LD_ADDR_EXP 91
22848: PUSH
22849: LD_INT 12
22851: ST_TO_ADDR
// hackCounter := [ ] ;
22852: LD_ADDR_EXP 92
22856: PUSH
22857: EMPTY
22858: ST_TO_ADDR
// end ;
22859: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
22860: LD_EXP 87
22864: PUSH
22865: LD_INT 34
22867: PUSH
22868: LD_INT 99
22870: PUSH
22871: EMPTY
22872: LIST
22873: LIST
22874: PPUSH
22875: CALL_OW 69
22879: AND
22880: IFFALSE 23133
22882: GO 22884
22884: DISABLE
22885: LD_INT 0
22887: PPUSH
22888: PPUSH
// begin enable ;
22889: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
22890: LD_ADDR_VAR 0 1
22894: PUSH
22895: LD_INT 34
22897: PUSH
22898: LD_INT 99
22900: PUSH
22901: EMPTY
22902: LIST
22903: LIST
22904: PPUSH
22905: CALL_OW 69
22909: PUSH
22910: FOR_IN
22911: IFFALSE 23131
// begin if not i in hackTanks then
22913: LD_VAR 0 1
22917: PUSH
22918: LD_EXP 88
22922: IN
22923: NOT
22924: IFFALSE 23007
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
22926: LD_ADDR_EXP 88
22930: PUSH
22931: LD_EXP 88
22935: PPUSH
22936: LD_EXP 88
22940: PUSH
22941: LD_INT 1
22943: PLUS
22944: PPUSH
22945: LD_VAR 0 1
22949: PPUSH
22950: CALL_OW 1
22954: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
22955: LD_ADDR_EXP 89
22959: PUSH
22960: LD_EXP 89
22964: PPUSH
22965: LD_EXP 89
22969: PUSH
22970: LD_INT 1
22972: PLUS
22973: PPUSH
22974: EMPTY
22975: PPUSH
22976: CALL_OW 1
22980: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
22981: LD_ADDR_EXP 92
22985: PUSH
22986: LD_EXP 92
22990: PPUSH
22991: LD_EXP 92
22995: PUSH
22996: LD_INT 1
22998: PLUS
22999: PPUSH
23000: EMPTY
23001: PPUSH
23002: CALL_OW 1
23006: ST_TO_ADDR
// end ; if not IsOk ( i ) then
23007: LD_VAR 0 1
23011: PPUSH
23012: CALL_OW 302
23016: NOT
23017: IFFALSE 23030
// begin HackUnlinkAll ( i ) ;
23019: LD_VAR 0 1
23023: PPUSH
23024: CALL 23136 0 1
// continue ;
23028: GO 22910
// end ; HackCheckCapturedStatus ( i ) ;
23030: LD_VAR 0 1
23034: PPUSH
23035: CALL 23579 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
23039: LD_ADDR_VAR 0 2
23043: PUSH
23044: LD_INT 81
23046: PUSH
23047: LD_VAR 0 1
23051: PPUSH
23052: CALL_OW 255
23056: PUSH
23057: EMPTY
23058: LIST
23059: LIST
23060: PUSH
23061: LD_INT 33
23063: PUSH
23064: LD_INT 3
23066: PUSH
23067: EMPTY
23068: LIST
23069: LIST
23070: PUSH
23071: LD_INT 91
23073: PUSH
23074: LD_VAR 0 1
23078: PUSH
23079: LD_EXP 91
23083: PUSH
23084: EMPTY
23085: LIST
23086: LIST
23087: LIST
23088: PUSH
23089: LD_INT 50
23091: PUSH
23092: EMPTY
23093: LIST
23094: PUSH
23095: EMPTY
23096: LIST
23097: LIST
23098: LIST
23099: LIST
23100: PPUSH
23101: CALL_OW 69
23105: ST_TO_ADDR
// if not tmp then
23106: LD_VAR 0 2
23110: NOT
23111: IFFALSE 23115
// continue ;
23113: GO 22910
// HackLink ( i , tmp ) ;
23115: LD_VAR 0 1
23119: PPUSH
23120: LD_VAR 0 2
23124: PPUSH
23125: CALL 23272 0 2
// end ;
23129: GO 22910
23131: POP
23132: POP
// end ;
23133: PPOPN 2
23135: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
23136: LD_INT 0
23138: PPUSH
23139: PPUSH
23140: PPUSH
// if not hack in hackTanks then
23141: LD_VAR 0 1
23145: PUSH
23146: LD_EXP 88
23150: IN
23151: NOT
23152: IFFALSE 23156
// exit ;
23154: GO 23267
// index := GetElementIndex ( hackTanks , hack ) ;
23156: LD_ADDR_VAR 0 4
23160: PUSH
23161: LD_EXP 88
23165: PPUSH
23166: LD_VAR 0 1
23170: PPUSH
23171: CALL 30709 0 2
23175: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
23176: LD_EXP 89
23180: PUSH
23181: LD_VAR 0 4
23185: ARRAY
23186: IFFALSE 23267
// begin for i in hackTanksCaptured [ index ] do
23188: LD_ADDR_VAR 0 3
23192: PUSH
23193: LD_EXP 89
23197: PUSH
23198: LD_VAR 0 4
23202: ARRAY
23203: PUSH
23204: FOR_IN
23205: IFFALSE 23231
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
23207: LD_VAR 0 3
23211: PUSH
23212: LD_INT 1
23214: ARRAY
23215: PPUSH
23216: LD_VAR 0 3
23220: PUSH
23221: LD_INT 2
23223: ARRAY
23224: PPUSH
23225: CALL_OW 235
23229: GO 23204
23231: POP
23232: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
23233: LD_ADDR_EXP 89
23237: PUSH
23238: LD_EXP 89
23242: PPUSH
23243: LD_VAR 0 4
23247: PPUSH
23248: EMPTY
23249: PPUSH
23250: CALL_OW 1
23254: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
23255: LD_VAR 0 1
23259: PPUSH
23260: LD_INT 0
23262: PPUSH
23263: CALL_OW 505
// end ; end ;
23267: LD_VAR 0 2
23271: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
23272: LD_INT 0
23274: PPUSH
23275: PPUSH
23276: PPUSH
// if not hack in hackTanks or not vehicles then
23277: LD_VAR 0 1
23281: PUSH
23282: LD_EXP 88
23286: IN
23287: NOT
23288: PUSH
23289: LD_VAR 0 2
23293: NOT
23294: OR
23295: IFFALSE 23299
// exit ;
23297: GO 23574
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
23299: LD_ADDR_VAR 0 2
23303: PUSH
23304: LD_VAR 0 1
23308: PPUSH
23309: LD_VAR 0 2
23313: PPUSH
23314: LD_INT 1
23316: PPUSH
23317: LD_INT 1
23319: PPUSH
23320: CALL 31359 0 4
23324: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
23325: LD_ADDR_VAR 0 5
23329: PUSH
23330: LD_EXP 88
23334: PPUSH
23335: LD_VAR 0 1
23339: PPUSH
23340: CALL 30709 0 2
23344: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
23345: LD_EXP 89
23349: PUSH
23350: LD_VAR 0 5
23354: ARRAY
23355: PUSH
23356: LD_EXP 90
23360: LESS
23361: IFFALSE 23550
// begin for i := 1 to vehicles do
23363: LD_ADDR_VAR 0 4
23367: PUSH
23368: DOUBLE
23369: LD_INT 1
23371: DEC
23372: ST_TO_ADDR
23373: LD_VAR 0 2
23377: PUSH
23378: FOR_TO
23379: IFFALSE 23548
// begin if hackTanksCaptured [ index ] = hackLimit then
23381: LD_EXP 89
23385: PUSH
23386: LD_VAR 0 5
23390: ARRAY
23391: PUSH
23392: LD_EXP 90
23396: EQUAL
23397: IFFALSE 23401
// break ;
23399: GO 23548
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
23401: LD_ADDR_EXP 92
23405: PUSH
23406: LD_EXP 92
23410: PPUSH
23411: LD_VAR 0 5
23415: PPUSH
23416: LD_EXP 92
23420: PUSH
23421: LD_VAR 0 5
23425: ARRAY
23426: PUSH
23427: LD_INT 1
23429: PLUS
23430: PPUSH
23431: CALL_OW 1
23435: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
23436: LD_ADDR_EXP 89
23440: PUSH
23441: LD_EXP 89
23445: PPUSH
23446: LD_VAR 0 5
23450: PUSH
23451: LD_EXP 89
23455: PUSH
23456: LD_VAR 0 5
23460: ARRAY
23461: PUSH
23462: LD_INT 1
23464: PLUS
23465: PUSH
23466: EMPTY
23467: LIST
23468: LIST
23469: PPUSH
23470: LD_VAR 0 2
23474: PUSH
23475: LD_VAR 0 4
23479: ARRAY
23480: PUSH
23481: LD_VAR 0 2
23485: PUSH
23486: LD_VAR 0 4
23490: ARRAY
23491: PPUSH
23492: CALL_OW 255
23496: PUSH
23497: EMPTY
23498: LIST
23499: LIST
23500: PPUSH
23501: CALL 30924 0 3
23505: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
23506: LD_VAR 0 2
23510: PUSH
23511: LD_VAR 0 4
23515: ARRAY
23516: PPUSH
23517: LD_VAR 0 1
23521: PPUSH
23522: CALL_OW 255
23526: PPUSH
23527: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
23531: LD_VAR 0 2
23535: PUSH
23536: LD_VAR 0 4
23540: ARRAY
23541: PPUSH
23542: CALL_OW 141
// end ;
23546: GO 23378
23548: POP
23549: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23550: LD_VAR 0 1
23554: PPUSH
23555: LD_EXP 89
23559: PUSH
23560: LD_VAR 0 5
23564: ARRAY
23565: PUSH
23566: LD_INT 0
23568: PLUS
23569: PPUSH
23570: CALL_OW 505
// end ;
23574: LD_VAR 0 3
23578: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
23579: LD_INT 0
23581: PPUSH
23582: PPUSH
23583: PPUSH
23584: PPUSH
// if not hack in hackTanks then
23585: LD_VAR 0 1
23589: PUSH
23590: LD_EXP 88
23594: IN
23595: NOT
23596: IFFALSE 23600
// exit ;
23598: GO 23840
// index := GetElementIndex ( hackTanks , hack ) ;
23600: LD_ADDR_VAR 0 4
23604: PUSH
23605: LD_EXP 88
23609: PPUSH
23610: LD_VAR 0 1
23614: PPUSH
23615: CALL 30709 0 2
23619: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
23620: LD_ADDR_VAR 0 3
23624: PUSH
23625: DOUBLE
23626: LD_EXP 89
23630: PUSH
23631: LD_VAR 0 4
23635: ARRAY
23636: INC
23637: ST_TO_ADDR
23638: LD_INT 1
23640: PUSH
23641: FOR_DOWNTO
23642: IFFALSE 23814
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
23644: LD_ADDR_VAR 0 5
23648: PUSH
23649: LD_EXP 89
23653: PUSH
23654: LD_VAR 0 4
23658: ARRAY
23659: PUSH
23660: LD_VAR 0 3
23664: ARRAY
23665: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
23666: LD_VAR 0 5
23670: PUSH
23671: LD_INT 1
23673: ARRAY
23674: PPUSH
23675: CALL_OW 302
23679: NOT
23680: PUSH
23681: LD_VAR 0 5
23685: PUSH
23686: LD_INT 1
23688: ARRAY
23689: PPUSH
23690: CALL_OW 255
23694: PUSH
23695: LD_VAR 0 1
23699: PPUSH
23700: CALL_OW 255
23704: NONEQUAL
23705: OR
23706: IFFALSE 23812
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
23708: LD_VAR 0 5
23712: PUSH
23713: LD_INT 1
23715: ARRAY
23716: PPUSH
23717: CALL_OW 305
23721: PUSH
23722: LD_VAR 0 5
23726: PUSH
23727: LD_INT 1
23729: ARRAY
23730: PPUSH
23731: CALL_OW 255
23735: PUSH
23736: LD_VAR 0 1
23740: PPUSH
23741: CALL_OW 255
23745: EQUAL
23746: AND
23747: IFFALSE 23771
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
23749: LD_VAR 0 5
23753: PUSH
23754: LD_INT 1
23756: ARRAY
23757: PPUSH
23758: LD_VAR 0 5
23762: PUSH
23763: LD_INT 2
23765: ARRAY
23766: PPUSH
23767: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
23771: LD_ADDR_EXP 89
23775: PUSH
23776: LD_EXP 89
23780: PPUSH
23781: LD_VAR 0 4
23785: PPUSH
23786: LD_EXP 89
23790: PUSH
23791: LD_VAR 0 4
23795: ARRAY
23796: PPUSH
23797: LD_VAR 0 3
23801: PPUSH
23802: CALL_OW 3
23806: PPUSH
23807: CALL_OW 1
23811: ST_TO_ADDR
// end ; end ;
23812: GO 23641
23814: POP
23815: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23816: LD_VAR 0 1
23820: PPUSH
23821: LD_EXP 89
23825: PUSH
23826: LD_VAR 0 4
23830: ARRAY
23831: PUSH
23832: LD_INT 0
23834: PLUS
23835: PPUSH
23836: CALL_OW 505
// end ;
23840: LD_VAR 0 2
23844: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
23845: LD_INT 0
23847: PPUSH
23848: PPUSH
23849: PPUSH
23850: PPUSH
// if not hack in hackTanks then
23851: LD_VAR 0 1
23855: PUSH
23856: LD_EXP 88
23860: IN
23861: NOT
23862: IFFALSE 23866
// exit ;
23864: GO 23951
// index := GetElementIndex ( hackTanks , hack ) ;
23866: LD_ADDR_VAR 0 5
23870: PUSH
23871: LD_EXP 88
23875: PPUSH
23876: LD_VAR 0 1
23880: PPUSH
23881: CALL 30709 0 2
23885: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
23886: LD_ADDR_VAR 0 4
23890: PUSH
23891: DOUBLE
23892: LD_INT 1
23894: DEC
23895: ST_TO_ADDR
23896: LD_EXP 89
23900: PUSH
23901: LD_VAR 0 5
23905: ARRAY
23906: PUSH
23907: FOR_TO
23908: IFFALSE 23949
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
23910: LD_EXP 89
23914: PUSH
23915: LD_VAR 0 5
23919: ARRAY
23920: PUSH
23921: LD_VAR 0 4
23925: ARRAY
23926: PUSH
23927: LD_INT 1
23929: ARRAY
23930: PUSH
23931: LD_VAR 0 2
23935: EQUAL
23936: IFFALSE 23947
// KillUnit ( vehicle ) ;
23938: LD_VAR 0 2
23942: PPUSH
23943: CALL_OW 66
23947: GO 23907
23949: POP
23950: POP
// end ;
23951: LD_VAR 0 3
23955: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
23956: LD_EXP 93
23960: NOT
23961: IFFALSE 23996
23963: GO 23965
23965: DISABLE
// begin initMiner := true ;
23966: LD_ADDR_EXP 93
23970: PUSH
23971: LD_INT 1
23973: ST_TO_ADDR
// minersList := [ ] ;
23974: LD_ADDR_EXP 94
23978: PUSH
23979: EMPTY
23980: ST_TO_ADDR
// minerMinesList := [ ] ;
23981: LD_ADDR_EXP 95
23985: PUSH
23986: EMPTY
23987: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
23988: LD_ADDR_EXP 96
23992: PUSH
23993: LD_INT 5
23995: ST_TO_ADDR
// end ;
23996: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
23997: LD_EXP 93
24001: PUSH
24002: LD_INT 34
24004: PUSH
24005: LD_INT 81
24007: PUSH
24008: EMPTY
24009: LIST
24010: LIST
24011: PPUSH
24012: CALL_OW 69
24016: AND
24017: IFFALSE 24478
24019: GO 24021
24021: DISABLE
24022: LD_INT 0
24024: PPUSH
24025: PPUSH
24026: PPUSH
24027: PPUSH
// begin enable ;
24028: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
24029: LD_ADDR_VAR 0 1
24033: PUSH
24034: LD_INT 34
24036: PUSH
24037: LD_INT 81
24039: PUSH
24040: EMPTY
24041: LIST
24042: LIST
24043: PPUSH
24044: CALL_OW 69
24048: PUSH
24049: FOR_IN
24050: IFFALSE 24122
// begin if not i in minersList then
24052: LD_VAR 0 1
24056: PUSH
24057: LD_EXP 94
24061: IN
24062: NOT
24063: IFFALSE 24120
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
24065: LD_ADDR_EXP 94
24069: PUSH
24070: LD_EXP 94
24074: PPUSH
24075: LD_EXP 94
24079: PUSH
24080: LD_INT 1
24082: PLUS
24083: PPUSH
24084: LD_VAR 0 1
24088: PPUSH
24089: CALL_OW 1
24093: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
24094: LD_ADDR_EXP 95
24098: PUSH
24099: LD_EXP 95
24103: PPUSH
24104: LD_EXP 95
24108: PUSH
24109: LD_INT 1
24111: PLUS
24112: PPUSH
24113: EMPTY
24114: PPUSH
24115: CALL_OW 1
24119: ST_TO_ADDR
// end end ;
24120: GO 24049
24122: POP
24123: POP
// for i := minerMinesList downto 1 do
24124: LD_ADDR_VAR 0 1
24128: PUSH
24129: DOUBLE
24130: LD_EXP 95
24134: INC
24135: ST_TO_ADDR
24136: LD_INT 1
24138: PUSH
24139: FOR_DOWNTO
24140: IFFALSE 24476
// begin if IsLive ( minersList [ i ] ) then
24142: LD_EXP 94
24146: PUSH
24147: LD_VAR 0 1
24151: ARRAY
24152: PPUSH
24153: CALL_OW 300
24157: IFFALSE 24185
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
24159: LD_EXP 94
24163: PUSH
24164: LD_VAR 0 1
24168: ARRAY
24169: PPUSH
24170: LD_EXP 95
24174: PUSH
24175: LD_VAR 0 1
24179: ARRAY
24180: PPUSH
24181: CALL_OW 505
// if not minerMinesList [ i ] then
24185: LD_EXP 95
24189: PUSH
24190: LD_VAR 0 1
24194: ARRAY
24195: NOT
24196: IFFALSE 24200
// continue ;
24198: GO 24139
// for j := minerMinesList [ i ] downto 1 do
24200: LD_ADDR_VAR 0 2
24204: PUSH
24205: DOUBLE
24206: LD_EXP 95
24210: PUSH
24211: LD_VAR 0 1
24215: ARRAY
24216: INC
24217: ST_TO_ADDR
24218: LD_INT 1
24220: PUSH
24221: FOR_DOWNTO
24222: IFFALSE 24472
// begin side := GetSide ( minersList [ i ] ) ;
24224: LD_ADDR_VAR 0 3
24228: PUSH
24229: LD_EXP 94
24233: PUSH
24234: LD_VAR 0 1
24238: ARRAY
24239: PPUSH
24240: CALL_OW 255
24244: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
24245: LD_ADDR_VAR 0 4
24249: PUSH
24250: LD_EXP 95
24254: PUSH
24255: LD_VAR 0 1
24259: ARRAY
24260: PUSH
24261: LD_VAR 0 2
24265: ARRAY
24266: PUSH
24267: LD_INT 1
24269: ARRAY
24270: PPUSH
24271: LD_EXP 95
24275: PUSH
24276: LD_VAR 0 1
24280: ARRAY
24281: PUSH
24282: LD_VAR 0 2
24286: ARRAY
24287: PUSH
24288: LD_INT 2
24290: ARRAY
24291: PPUSH
24292: CALL_OW 428
24296: ST_TO_ADDR
// if not tmp then
24297: LD_VAR 0 4
24301: NOT
24302: IFFALSE 24306
// continue ;
24304: GO 24221
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
24306: LD_VAR 0 4
24310: PUSH
24311: LD_INT 81
24313: PUSH
24314: LD_VAR 0 3
24318: PUSH
24319: EMPTY
24320: LIST
24321: LIST
24322: PPUSH
24323: CALL_OW 69
24327: IN
24328: PUSH
24329: LD_EXP 95
24333: PUSH
24334: LD_VAR 0 1
24338: ARRAY
24339: PUSH
24340: LD_VAR 0 2
24344: ARRAY
24345: PUSH
24346: LD_INT 1
24348: ARRAY
24349: PPUSH
24350: LD_EXP 95
24354: PUSH
24355: LD_VAR 0 1
24359: ARRAY
24360: PUSH
24361: LD_VAR 0 2
24365: ARRAY
24366: PUSH
24367: LD_INT 2
24369: ARRAY
24370: PPUSH
24371: CALL_OW 458
24375: AND
24376: IFFALSE 24470
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
24378: LD_EXP 95
24382: PUSH
24383: LD_VAR 0 1
24387: ARRAY
24388: PUSH
24389: LD_VAR 0 2
24393: ARRAY
24394: PUSH
24395: LD_INT 1
24397: ARRAY
24398: PPUSH
24399: LD_EXP 95
24403: PUSH
24404: LD_VAR 0 1
24408: ARRAY
24409: PUSH
24410: LD_VAR 0 2
24414: ARRAY
24415: PUSH
24416: LD_INT 2
24418: ARRAY
24419: PPUSH
24420: LD_VAR 0 3
24424: PPUSH
24425: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
24429: LD_ADDR_EXP 95
24433: PUSH
24434: LD_EXP 95
24438: PPUSH
24439: LD_VAR 0 1
24443: PPUSH
24444: LD_EXP 95
24448: PUSH
24449: LD_VAR 0 1
24453: ARRAY
24454: PPUSH
24455: LD_VAR 0 2
24459: PPUSH
24460: CALL_OW 3
24464: PPUSH
24465: CALL_OW 1
24469: ST_TO_ADDR
// end ; end ;
24470: GO 24221
24472: POP
24473: POP
// end ;
24474: GO 24139
24476: POP
24477: POP
// end ;
24478: PPOPN 4
24480: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
24481: LD_INT 0
24483: PPUSH
24484: PPUSH
// result := false ;
24485: LD_ADDR_VAR 0 4
24489: PUSH
24490: LD_INT 0
24492: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
24493: LD_VAR 0 1
24497: PPUSH
24498: CALL_OW 264
24502: PUSH
24503: LD_INT 81
24505: EQUAL
24506: NOT
24507: IFFALSE 24511
// exit ;
24509: GO 24751
// index := GetElementIndex ( minersList , unit ) ;
24511: LD_ADDR_VAR 0 5
24515: PUSH
24516: LD_EXP 94
24520: PPUSH
24521: LD_VAR 0 1
24525: PPUSH
24526: CALL 30709 0 2
24530: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
24531: LD_EXP 95
24535: PUSH
24536: LD_VAR 0 5
24540: ARRAY
24541: PUSH
24542: LD_EXP 96
24546: GREATEREQUAL
24547: IFFALSE 24551
// exit ;
24549: GO 24751
// ComMoveXY ( unit , x , y ) ;
24551: LD_VAR 0 1
24555: PPUSH
24556: LD_VAR 0 2
24560: PPUSH
24561: LD_VAR 0 3
24565: PPUSH
24566: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24570: LD_INT 35
24572: PPUSH
24573: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
24577: LD_VAR 0 1
24581: PPUSH
24582: LD_VAR 0 2
24586: PPUSH
24587: LD_VAR 0 3
24591: PPUSH
24592: CALL 62093 0 3
24596: NOT
24597: PUSH
24598: LD_VAR 0 1
24602: PPUSH
24603: CALL_OW 314
24607: AND
24608: IFFALSE 24612
// exit ;
24610: GO 24751
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
24612: LD_VAR 0 2
24616: PPUSH
24617: LD_VAR 0 3
24621: PPUSH
24622: CALL_OW 428
24626: PUSH
24627: LD_VAR 0 1
24631: EQUAL
24632: PUSH
24633: LD_VAR 0 1
24637: PPUSH
24638: CALL_OW 314
24642: NOT
24643: AND
24644: IFFALSE 24570
// PlaySoundXY ( x , y , PlantMine ) ;
24646: LD_VAR 0 2
24650: PPUSH
24651: LD_VAR 0 3
24655: PPUSH
24656: LD_STRING PlantMine
24658: PPUSH
24659: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
24663: LD_VAR 0 2
24667: PPUSH
24668: LD_VAR 0 3
24672: PPUSH
24673: LD_VAR 0 1
24677: PPUSH
24678: CALL_OW 255
24682: PPUSH
24683: LD_INT 0
24685: PPUSH
24686: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
24690: LD_ADDR_EXP 95
24694: PUSH
24695: LD_EXP 95
24699: PPUSH
24700: LD_VAR 0 5
24704: PUSH
24705: LD_EXP 95
24709: PUSH
24710: LD_VAR 0 5
24714: ARRAY
24715: PUSH
24716: LD_INT 1
24718: PLUS
24719: PUSH
24720: EMPTY
24721: LIST
24722: LIST
24723: PPUSH
24724: LD_VAR 0 2
24728: PUSH
24729: LD_VAR 0 3
24733: PUSH
24734: EMPTY
24735: LIST
24736: LIST
24737: PPUSH
24738: CALL 30924 0 3
24742: ST_TO_ADDR
// result := true ;
24743: LD_ADDR_VAR 0 4
24747: PUSH
24748: LD_INT 1
24750: ST_TO_ADDR
// end ;
24751: LD_VAR 0 4
24755: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
24756: LD_INT 0
24758: PPUSH
24759: PPUSH
24760: PPUSH
// if not unit in minersList then
24761: LD_VAR 0 1
24765: PUSH
24766: LD_EXP 94
24770: IN
24771: NOT
24772: IFFALSE 24776
// exit ;
24774: GO 25168
// index := GetElementIndex ( minersList , unit ) ;
24776: LD_ADDR_VAR 0 6
24780: PUSH
24781: LD_EXP 94
24785: PPUSH
24786: LD_VAR 0 1
24790: PPUSH
24791: CALL 30709 0 2
24795: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
24796: LD_ADDR_VAR 0 5
24800: PUSH
24801: DOUBLE
24802: LD_EXP 95
24806: PUSH
24807: LD_VAR 0 6
24811: ARRAY
24812: INC
24813: ST_TO_ADDR
24814: LD_INT 1
24816: PUSH
24817: FOR_DOWNTO
24818: IFFALSE 24979
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
24820: LD_EXP 95
24824: PUSH
24825: LD_VAR 0 6
24829: ARRAY
24830: PUSH
24831: LD_VAR 0 5
24835: ARRAY
24836: PUSH
24837: LD_INT 1
24839: ARRAY
24840: PUSH
24841: LD_VAR 0 2
24845: EQUAL
24846: PUSH
24847: LD_EXP 95
24851: PUSH
24852: LD_VAR 0 6
24856: ARRAY
24857: PUSH
24858: LD_VAR 0 5
24862: ARRAY
24863: PUSH
24864: LD_INT 2
24866: ARRAY
24867: PUSH
24868: LD_VAR 0 3
24872: EQUAL
24873: AND
24874: IFFALSE 24977
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24876: LD_EXP 95
24880: PUSH
24881: LD_VAR 0 6
24885: ARRAY
24886: PUSH
24887: LD_VAR 0 5
24891: ARRAY
24892: PUSH
24893: LD_INT 1
24895: ARRAY
24896: PPUSH
24897: LD_EXP 95
24901: PUSH
24902: LD_VAR 0 6
24906: ARRAY
24907: PUSH
24908: LD_VAR 0 5
24912: ARRAY
24913: PUSH
24914: LD_INT 2
24916: ARRAY
24917: PPUSH
24918: LD_VAR 0 1
24922: PPUSH
24923: CALL_OW 255
24927: PPUSH
24928: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24932: LD_ADDR_EXP 95
24936: PUSH
24937: LD_EXP 95
24941: PPUSH
24942: LD_VAR 0 6
24946: PPUSH
24947: LD_EXP 95
24951: PUSH
24952: LD_VAR 0 6
24956: ARRAY
24957: PPUSH
24958: LD_VAR 0 5
24962: PPUSH
24963: CALL_OW 3
24967: PPUSH
24968: CALL_OW 1
24972: ST_TO_ADDR
// exit ;
24973: POP
24974: POP
24975: GO 25168
// end ; end ;
24977: GO 24817
24979: POP
24980: POP
// for i := minerMinesList [ index ] downto 1 do
24981: LD_ADDR_VAR 0 5
24985: PUSH
24986: DOUBLE
24987: LD_EXP 95
24991: PUSH
24992: LD_VAR 0 6
24996: ARRAY
24997: INC
24998: ST_TO_ADDR
24999: LD_INT 1
25001: PUSH
25002: FOR_DOWNTO
25003: IFFALSE 25166
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
25005: LD_EXP 95
25009: PUSH
25010: LD_VAR 0 6
25014: ARRAY
25015: PUSH
25016: LD_VAR 0 5
25020: ARRAY
25021: PUSH
25022: LD_INT 1
25024: ARRAY
25025: PPUSH
25026: LD_EXP 95
25030: PUSH
25031: LD_VAR 0 6
25035: ARRAY
25036: PUSH
25037: LD_VAR 0 5
25041: ARRAY
25042: PUSH
25043: LD_INT 2
25045: ARRAY
25046: PPUSH
25047: LD_VAR 0 2
25051: PPUSH
25052: LD_VAR 0 3
25056: PPUSH
25057: CALL_OW 298
25061: PUSH
25062: LD_INT 6
25064: LESS
25065: IFFALSE 25164
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25067: LD_EXP 95
25071: PUSH
25072: LD_VAR 0 6
25076: ARRAY
25077: PUSH
25078: LD_VAR 0 5
25082: ARRAY
25083: PUSH
25084: LD_INT 1
25086: ARRAY
25087: PPUSH
25088: LD_EXP 95
25092: PUSH
25093: LD_VAR 0 6
25097: ARRAY
25098: PUSH
25099: LD_VAR 0 5
25103: ARRAY
25104: PUSH
25105: LD_INT 2
25107: ARRAY
25108: PPUSH
25109: LD_VAR 0 1
25113: PPUSH
25114: CALL_OW 255
25118: PPUSH
25119: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25123: LD_ADDR_EXP 95
25127: PUSH
25128: LD_EXP 95
25132: PPUSH
25133: LD_VAR 0 6
25137: PPUSH
25138: LD_EXP 95
25142: PUSH
25143: LD_VAR 0 6
25147: ARRAY
25148: PPUSH
25149: LD_VAR 0 5
25153: PPUSH
25154: CALL_OW 3
25158: PPUSH
25159: CALL_OW 1
25163: ST_TO_ADDR
// end ; end ;
25164: GO 25002
25166: POP
25167: POP
// end ;
25168: LD_VAR 0 4
25172: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
25173: LD_INT 0
25175: PPUSH
25176: PPUSH
25177: PPUSH
25178: PPUSH
25179: PPUSH
25180: PPUSH
25181: PPUSH
25182: PPUSH
25183: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
25184: LD_VAR 0 1
25188: PPUSH
25189: CALL_OW 264
25193: PUSH
25194: LD_INT 81
25196: EQUAL
25197: NOT
25198: PUSH
25199: LD_VAR 0 1
25203: PUSH
25204: LD_EXP 94
25208: IN
25209: NOT
25210: OR
25211: IFFALSE 25215
// exit ;
25213: GO 25537
// index := GetElementIndex ( minersList , unit ) ;
25215: LD_ADDR_VAR 0 6
25219: PUSH
25220: LD_EXP 94
25224: PPUSH
25225: LD_VAR 0 1
25229: PPUSH
25230: CALL 30709 0 2
25234: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
25235: LD_ADDR_VAR 0 8
25239: PUSH
25240: LD_EXP 96
25244: PUSH
25245: LD_EXP 95
25249: PUSH
25250: LD_VAR 0 6
25254: ARRAY
25255: MINUS
25256: ST_TO_ADDR
// if not minesFreeAmount then
25257: LD_VAR 0 8
25261: NOT
25262: IFFALSE 25266
// exit ;
25264: GO 25537
// tmp := [ ] ;
25266: LD_ADDR_VAR 0 7
25270: PUSH
25271: EMPTY
25272: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
25273: LD_ADDR_VAR 0 5
25277: PUSH
25278: DOUBLE
25279: LD_INT 1
25281: DEC
25282: ST_TO_ADDR
25283: LD_VAR 0 8
25287: PUSH
25288: FOR_TO
25289: IFFALSE 25484
// begin _d := rand ( 0 , 5 ) ;
25291: LD_ADDR_VAR 0 11
25295: PUSH
25296: LD_INT 0
25298: PPUSH
25299: LD_INT 5
25301: PPUSH
25302: CALL_OW 12
25306: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
25307: LD_ADDR_VAR 0 12
25311: PUSH
25312: LD_INT 2
25314: PPUSH
25315: LD_INT 6
25317: PPUSH
25318: CALL_OW 12
25322: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
25323: LD_ADDR_VAR 0 9
25327: PUSH
25328: LD_VAR 0 2
25332: PPUSH
25333: LD_VAR 0 11
25337: PPUSH
25338: LD_VAR 0 12
25342: PPUSH
25343: CALL_OW 272
25347: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
25348: LD_ADDR_VAR 0 10
25352: PUSH
25353: LD_VAR 0 3
25357: PPUSH
25358: LD_VAR 0 11
25362: PPUSH
25363: LD_VAR 0 12
25367: PPUSH
25368: CALL_OW 273
25372: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
25373: LD_VAR 0 9
25377: PPUSH
25378: LD_VAR 0 10
25382: PPUSH
25383: CALL_OW 488
25387: PUSH
25388: LD_VAR 0 9
25392: PUSH
25393: LD_VAR 0 10
25397: PUSH
25398: EMPTY
25399: LIST
25400: LIST
25401: PUSH
25402: LD_VAR 0 7
25406: IN
25407: NOT
25408: AND
25409: PUSH
25410: LD_VAR 0 9
25414: PPUSH
25415: LD_VAR 0 10
25419: PPUSH
25420: CALL_OW 458
25424: NOT
25425: AND
25426: IFFALSE 25468
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
25428: LD_ADDR_VAR 0 7
25432: PUSH
25433: LD_VAR 0 7
25437: PPUSH
25438: LD_VAR 0 7
25442: PUSH
25443: LD_INT 1
25445: PLUS
25446: PPUSH
25447: LD_VAR 0 9
25451: PUSH
25452: LD_VAR 0 10
25456: PUSH
25457: EMPTY
25458: LIST
25459: LIST
25460: PPUSH
25461: CALL_OW 1
25465: ST_TO_ADDR
25466: GO 25482
// i := i - 1 ;
25468: LD_ADDR_VAR 0 5
25472: PUSH
25473: LD_VAR 0 5
25477: PUSH
25478: LD_INT 1
25480: MINUS
25481: ST_TO_ADDR
// end ;
25482: GO 25288
25484: POP
25485: POP
// for i in tmp do
25486: LD_ADDR_VAR 0 5
25490: PUSH
25491: LD_VAR 0 7
25495: PUSH
25496: FOR_IN
25497: IFFALSE 25535
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
25499: LD_VAR 0 1
25503: PPUSH
25504: LD_VAR 0 5
25508: PUSH
25509: LD_INT 1
25511: ARRAY
25512: PPUSH
25513: LD_VAR 0 5
25517: PUSH
25518: LD_INT 2
25520: ARRAY
25521: PPUSH
25522: CALL 24481 0 3
25526: NOT
25527: IFFALSE 25533
// exit ;
25529: POP
25530: POP
25531: GO 25537
25533: GO 25496
25535: POP
25536: POP
// end ;
25537: LD_VAR 0 4
25541: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
25542: LD_INT 0
25544: PPUSH
25545: PPUSH
25546: PPUSH
25547: PPUSH
25548: PPUSH
25549: PPUSH
25550: PPUSH
// if not GetClass ( unit ) = class_sniper then
25551: LD_VAR 0 1
25555: PPUSH
25556: CALL_OW 257
25560: PUSH
25561: LD_INT 5
25563: EQUAL
25564: NOT
25565: IFFALSE 25569
// exit ;
25567: GO 25957
// dist := 8 ;
25569: LD_ADDR_VAR 0 5
25573: PUSH
25574: LD_INT 8
25576: ST_TO_ADDR
// viewRange := 12 ;
25577: LD_ADDR_VAR 0 7
25581: PUSH
25582: LD_INT 12
25584: ST_TO_ADDR
// side := GetSide ( unit ) ;
25585: LD_ADDR_VAR 0 6
25589: PUSH
25590: LD_VAR 0 1
25594: PPUSH
25595: CALL_OW 255
25599: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
25600: LD_INT 61
25602: PPUSH
25603: LD_VAR 0 6
25607: PPUSH
25608: CALL_OW 321
25612: PUSH
25613: LD_INT 2
25615: EQUAL
25616: IFFALSE 25626
// viewRange := 16 ;
25618: LD_ADDR_VAR 0 7
25622: PUSH
25623: LD_INT 16
25625: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
25626: LD_VAR 0 1
25630: PPUSH
25631: LD_VAR 0 2
25635: PPUSH
25636: LD_VAR 0 3
25640: PPUSH
25641: CALL_OW 297
25645: PUSH
25646: LD_VAR 0 5
25650: GREATER
25651: IFFALSE 25730
// begin ComMoveXY ( unit , x , y ) ;
25653: LD_VAR 0 1
25657: PPUSH
25658: LD_VAR 0 2
25662: PPUSH
25663: LD_VAR 0 3
25667: PPUSH
25668: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25672: LD_INT 35
25674: PPUSH
25675: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
25679: LD_VAR 0 1
25683: PPUSH
25684: LD_VAR 0 2
25688: PPUSH
25689: LD_VAR 0 3
25693: PPUSH
25694: CALL 62093 0 3
25698: NOT
25699: IFFALSE 25703
// exit ;
25701: GO 25957
// until GetDistUnitXY ( unit , x , y ) < dist ;
25703: LD_VAR 0 1
25707: PPUSH
25708: LD_VAR 0 2
25712: PPUSH
25713: LD_VAR 0 3
25717: PPUSH
25718: CALL_OW 297
25722: PUSH
25723: LD_VAR 0 5
25727: LESS
25728: IFFALSE 25672
// end ; ComTurnXY ( unit , x , y ) ;
25730: LD_VAR 0 1
25734: PPUSH
25735: LD_VAR 0 2
25739: PPUSH
25740: LD_VAR 0 3
25744: PPUSH
25745: CALL_OW 118
// wait ( 5 ) ;
25749: LD_INT 5
25751: PPUSH
25752: CALL_OW 67
// _d := GetDir ( unit ) ;
25756: LD_ADDR_VAR 0 10
25760: PUSH
25761: LD_VAR 0 1
25765: PPUSH
25766: CALL_OW 254
25770: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
25771: LD_ADDR_VAR 0 8
25775: PUSH
25776: LD_VAR 0 1
25780: PPUSH
25781: CALL_OW 250
25785: PPUSH
25786: LD_VAR 0 10
25790: PPUSH
25791: LD_VAR 0 5
25795: PPUSH
25796: CALL_OW 272
25800: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
25801: LD_ADDR_VAR 0 9
25805: PUSH
25806: LD_VAR 0 1
25810: PPUSH
25811: CALL_OW 251
25815: PPUSH
25816: LD_VAR 0 10
25820: PPUSH
25821: LD_VAR 0 5
25825: PPUSH
25826: CALL_OW 273
25830: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25831: LD_VAR 0 8
25835: PPUSH
25836: LD_VAR 0 9
25840: PPUSH
25841: CALL_OW 488
25845: NOT
25846: IFFALSE 25850
// exit ;
25848: GO 25957
// ComAnimCustom ( unit , 1 ) ;
25850: LD_VAR 0 1
25854: PPUSH
25855: LD_INT 1
25857: PPUSH
25858: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
25862: LD_VAR 0 8
25866: PPUSH
25867: LD_VAR 0 9
25871: PPUSH
25872: LD_VAR 0 6
25876: PPUSH
25877: LD_VAR 0 7
25881: PPUSH
25882: CALL_OW 330
// repeat wait ( 1 ) ;
25886: LD_INT 1
25888: PPUSH
25889: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
25893: LD_VAR 0 1
25897: PPUSH
25898: CALL_OW 316
25902: PUSH
25903: LD_VAR 0 1
25907: PPUSH
25908: CALL_OW 314
25912: OR
25913: PUSH
25914: LD_VAR 0 1
25918: PPUSH
25919: CALL_OW 302
25923: NOT
25924: OR
25925: PUSH
25926: LD_VAR 0 1
25930: PPUSH
25931: CALL_OW 301
25935: OR
25936: IFFALSE 25886
// RemoveSeeing ( _x , _y , side ) ;
25938: LD_VAR 0 8
25942: PPUSH
25943: LD_VAR 0 9
25947: PPUSH
25948: LD_VAR 0 6
25952: PPUSH
25953: CALL_OW 331
// end ; end_of_file
25957: LD_VAR 0 4
25961: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
25962: LD_INT 0
25964: PPUSH
25965: PPUSH
// if exist_mode then
25966: LD_VAR 0 2
25970: IFFALSE 25995
// unit := CreateCharacter ( prefix & ident ) else
25972: LD_ADDR_VAR 0 5
25976: PUSH
25977: LD_VAR 0 3
25981: PUSH
25982: LD_VAR 0 1
25986: STR
25987: PPUSH
25988: CALL_OW 34
25992: ST_TO_ADDR
25993: GO 26010
// unit := NewCharacter ( ident ) ;
25995: LD_ADDR_VAR 0 5
25999: PUSH
26000: LD_VAR 0 1
26004: PPUSH
26005: CALL_OW 25
26009: ST_TO_ADDR
// result := unit ;
26010: LD_ADDR_VAR 0 4
26014: PUSH
26015: LD_VAR 0 5
26019: ST_TO_ADDR
// end ;
26020: LD_VAR 0 4
26024: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
26025: LD_INT 0
26027: PPUSH
26028: PPUSH
// if not side or not nation then
26029: LD_VAR 0 1
26033: NOT
26034: PUSH
26035: LD_VAR 0 2
26039: NOT
26040: OR
26041: IFFALSE 26045
// exit ;
26043: GO 26813
// case nation of nation_american :
26045: LD_VAR 0 2
26049: PUSH
26050: LD_INT 1
26052: DOUBLE
26053: EQUAL
26054: IFTRUE 26058
26056: GO 26272
26058: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
26059: LD_ADDR_VAR 0 4
26063: PUSH
26064: LD_INT 35
26066: PUSH
26067: LD_INT 45
26069: PUSH
26070: LD_INT 46
26072: PUSH
26073: LD_INT 47
26075: PUSH
26076: LD_INT 82
26078: PUSH
26079: LD_INT 83
26081: PUSH
26082: LD_INT 84
26084: PUSH
26085: LD_INT 85
26087: PUSH
26088: LD_INT 86
26090: PUSH
26091: LD_INT 1
26093: PUSH
26094: LD_INT 2
26096: PUSH
26097: LD_INT 6
26099: PUSH
26100: LD_INT 15
26102: PUSH
26103: LD_INT 16
26105: PUSH
26106: LD_INT 7
26108: PUSH
26109: LD_INT 12
26111: PUSH
26112: LD_INT 13
26114: PUSH
26115: LD_INT 10
26117: PUSH
26118: LD_INT 14
26120: PUSH
26121: LD_INT 20
26123: PUSH
26124: LD_INT 21
26126: PUSH
26127: LD_INT 22
26129: PUSH
26130: LD_INT 25
26132: PUSH
26133: LD_INT 32
26135: PUSH
26136: LD_INT 27
26138: PUSH
26139: LD_INT 36
26141: PUSH
26142: LD_INT 69
26144: PUSH
26145: LD_INT 39
26147: PUSH
26148: LD_INT 34
26150: PUSH
26151: LD_INT 40
26153: PUSH
26154: LD_INT 48
26156: PUSH
26157: LD_INT 49
26159: PUSH
26160: LD_INT 50
26162: PUSH
26163: LD_INT 51
26165: PUSH
26166: LD_INT 52
26168: PUSH
26169: LD_INT 53
26171: PUSH
26172: LD_INT 54
26174: PUSH
26175: LD_INT 55
26177: PUSH
26178: LD_INT 56
26180: PUSH
26181: LD_INT 57
26183: PUSH
26184: LD_INT 58
26186: PUSH
26187: LD_INT 59
26189: PUSH
26190: LD_INT 60
26192: PUSH
26193: LD_INT 61
26195: PUSH
26196: LD_INT 62
26198: PUSH
26199: LD_INT 80
26201: PUSH
26202: LD_INT 82
26204: PUSH
26205: LD_INT 83
26207: PUSH
26208: LD_INT 84
26210: PUSH
26211: LD_INT 85
26213: PUSH
26214: LD_INT 86
26216: PUSH
26217: EMPTY
26218: LIST
26219: LIST
26220: LIST
26221: LIST
26222: LIST
26223: LIST
26224: LIST
26225: LIST
26226: LIST
26227: LIST
26228: LIST
26229: LIST
26230: LIST
26231: LIST
26232: LIST
26233: LIST
26234: LIST
26235: LIST
26236: LIST
26237: LIST
26238: LIST
26239: LIST
26240: LIST
26241: LIST
26242: LIST
26243: LIST
26244: LIST
26245: LIST
26246: LIST
26247: LIST
26248: LIST
26249: LIST
26250: LIST
26251: LIST
26252: LIST
26253: LIST
26254: LIST
26255: LIST
26256: LIST
26257: LIST
26258: LIST
26259: LIST
26260: LIST
26261: LIST
26262: LIST
26263: LIST
26264: LIST
26265: LIST
26266: LIST
26267: LIST
26268: LIST
26269: ST_TO_ADDR
26270: GO 26737
26272: LD_INT 2
26274: DOUBLE
26275: EQUAL
26276: IFTRUE 26280
26278: GO 26506
26280: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
26281: LD_ADDR_VAR 0 4
26285: PUSH
26286: LD_INT 35
26288: PUSH
26289: LD_INT 45
26291: PUSH
26292: LD_INT 46
26294: PUSH
26295: LD_INT 47
26297: PUSH
26298: LD_INT 82
26300: PUSH
26301: LD_INT 83
26303: PUSH
26304: LD_INT 84
26306: PUSH
26307: LD_INT 85
26309: PUSH
26310: LD_INT 87
26312: PUSH
26313: LD_INT 70
26315: PUSH
26316: LD_INT 1
26318: PUSH
26319: LD_INT 11
26321: PUSH
26322: LD_INT 3
26324: PUSH
26325: LD_INT 4
26327: PUSH
26328: LD_INT 5
26330: PUSH
26331: LD_INT 6
26333: PUSH
26334: LD_INT 15
26336: PUSH
26337: LD_INT 18
26339: PUSH
26340: LD_INT 7
26342: PUSH
26343: LD_INT 17
26345: PUSH
26346: LD_INT 8
26348: PUSH
26349: LD_INT 20
26351: PUSH
26352: LD_INT 21
26354: PUSH
26355: LD_INT 22
26357: PUSH
26358: LD_INT 72
26360: PUSH
26361: LD_INT 26
26363: PUSH
26364: LD_INT 69
26366: PUSH
26367: LD_INT 39
26369: PUSH
26370: LD_INT 40
26372: PUSH
26373: LD_INT 41
26375: PUSH
26376: LD_INT 42
26378: PUSH
26379: LD_INT 43
26381: PUSH
26382: LD_INT 48
26384: PUSH
26385: LD_INT 49
26387: PUSH
26388: LD_INT 50
26390: PUSH
26391: LD_INT 51
26393: PUSH
26394: LD_INT 52
26396: PUSH
26397: LD_INT 53
26399: PUSH
26400: LD_INT 54
26402: PUSH
26403: LD_INT 55
26405: PUSH
26406: LD_INT 56
26408: PUSH
26409: LD_INT 60
26411: PUSH
26412: LD_INT 61
26414: PUSH
26415: LD_INT 62
26417: PUSH
26418: LD_INT 66
26420: PUSH
26421: LD_INT 67
26423: PUSH
26424: LD_INT 68
26426: PUSH
26427: LD_INT 81
26429: PUSH
26430: LD_INT 82
26432: PUSH
26433: LD_INT 83
26435: PUSH
26436: LD_INT 84
26438: PUSH
26439: LD_INT 85
26441: PUSH
26442: LD_INT 87
26444: PUSH
26445: LD_INT 88
26447: PUSH
26448: EMPTY
26449: LIST
26450: LIST
26451: LIST
26452: LIST
26453: LIST
26454: LIST
26455: LIST
26456: LIST
26457: LIST
26458: LIST
26459: LIST
26460: LIST
26461: LIST
26462: LIST
26463: LIST
26464: LIST
26465: LIST
26466: LIST
26467: LIST
26468: LIST
26469: LIST
26470: LIST
26471: LIST
26472: LIST
26473: LIST
26474: LIST
26475: LIST
26476: LIST
26477: LIST
26478: LIST
26479: LIST
26480: LIST
26481: LIST
26482: LIST
26483: LIST
26484: LIST
26485: LIST
26486: LIST
26487: LIST
26488: LIST
26489: LIST
26490: LIST
26491: LIST
26492: LIST
26493: LIST
26494: LIST
26495: LIST
26496: LIST
26497: LIST
26498: LIST
26499: LIST
26500: LIST
26501: LIST
26502: LIST
26503: ST_TO_ADDR
26504: GO 26737
26506: LD_INT 3
26508: DOUBLE
26509: EQUAL
26510: IFTRUE 26514
26512: GO 26736
26514: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
26515: LD_ADDR_VAR 0 4
26519: PUSH
26520: LD_INT 46
26522: PUSH
26523: LD_INT 47
26525: PUSH
26526: LD_INT 1
26528: PUSH
26529: LD_INT 2
26531: PUSH
26532: LD_INT 82
26534: PUSH
26535: LD_INT 83
26537: PUSH
26538: LD_INT 84
26540: PUSH
26541: LD_INT 85
26543: PUSH
26544: LD_INT 86
26546: PUSH
26547: LD_INT 11
26549: PUSH
26550: LD_INT 9
26552: PUSH
26553: LD_INT 20
26555: PUSH
26556: LD_INT 19
26558: PUSH
26559: LD_INT 21
26561: PUSH
26562: LD_INT 24
26564: PUSH
26565: LD_INT 22
26567: PUSH
26568: LD_INT 25
26570: PUSH
26571: LD_INT 28
26573: PUSH
26574: LD_INT 29
26576: PUSH
26577: LD_INT 30
26579: PUSH
26580: LD_INT 31
26582: PUSH
26583: LD_INT 37
26585: PUSH
26586: LD_INT 38
26588: PUSH
26589: LD_INT 32
26591: PUSH
26592: LD_INT 27
26594: PUSH
26595: LD_INT 33
26597: PUSH
26598: LD_INT 69
26600: PUSH
26601: LD_INT 39
26603: PUSH
26604: LD_INT 34
26606: PUSH
26607: LD_INT 40
26609: PUSH
26610: LD_INT 71
26612: PUSH
26613: LD_INT 23
26615: PUSH
26616: LD_INT 44
26618: PUSH
26619: LD_INT 48
26621: PUSH
26622: LD_INT 49
26624: PUSH
26625: LD_INT 50
26627: PUSH
26628: LD_INT 51
26630: PUSH
26631: LD_INT 52
26633: PUSH
26634: LD_INT 53
26636: PUSH
26637: LD_INT 54
26639: PUSH
26640: LD_INT 55
26642: PUSH
26643: LD_INT 56
26645: PUSH
26646: LD_INT 57
26648: PUSH
26649: LD_INT 58
26651: PUSH
26652: LD_INT 59
26654: PUSH
26655: LD_INT 63
26657: PUSH
26658: LD_INT 64
26660: PUSH
26661: LD_INT 65
26663: PUSH
26664: LD_INT 82
26666: PUSH
26667: LD_INT 83
26669: PUSH
26670: LD_INT 84
26672: PUSH
26673: LD_INT 85
26675: PUSH
26676: LD_INT 86
26678: PUSH
26679: EMPTY
26680: LIST
26681: LIST
26682: LIST
26683: LIST
26684: LIST
26685: LIST
26686: LIST
26687: LIST
26688: LIST
26689: LIST
26690: LIST
26691: LIST
26692: LIST
26693: LIST
26694: LIST
26695: LIST
26696: LIST
26697: LIST
26698: LIST
26699: LIST
26700: LIST
26701: LIST
26702: LIST
26703: LIST
26704: LIST
26705: LIST
26706: LIST
26707: LIST
26708: LIST
26709: LIST
26710: LIST
26711: LIST
26712: LIST
26713: LIST
26714: LIST
26715: LIST
26716: LIST
26717: LIST
26718: LIST
26719: LIST
26720: LIST
26721: LIST
26722: LIST
26723: LIST
26724: LIST
26725: LIST
26726: LIST
26727: LIST
26728: LIST
26729: LIST
26730: LIST
26731: LIST
26732: LIST
26733: ST_TO_ADDR
26734: GO 26737
26736: POP
// if state > - 1 and state < 3 then
26737: LD_VAR 0 3
26741: PUSH
26742: LD_INT 1
26744: NEG
26745: GREATER
26746: PUSH
26747: LD_VAR 0 3
26751: PUSH
26752: LD_INT 3
26754: LESS
26755: AND
26756: IFFALSE 26813
// for i in result do
26758: LD_ADDR_VAR 0 5
26762: PUSH
26763: LD_VAR 0 4
26767: PUSH
26768: FOR_IN
26769: IFFALSE 26811
// if GetTech ( i , side ) <> state then
26771: LD_VAR 0 5
26775: PPUSH
26776: LD_VAR 0 1
26780: PPUSH
26781: CALL_OW 321
26785: PUSH
26786: LD_VAR 0 3
26790: NONEQUAL
26791: IFFALSE 26809
// result := result diff i ;
26793: LD_ADDR_VAR 0 4
26797: PUSH
26798: LD_VAR 0 4
26802: PUSH
26803: LD_VAR 0 5
26807: DIFF
26808: ST_TO_ADDR
26809: GO 26768
26811: POP
26812: POP
// end ;
26813: LD_VAR 0 4
26817: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
26818: LD_INT 0
26820: PPUSH
26821: PPUSH
26822: PPUSH
// result := true ;
26823: LD_ADDR_VAR 0 3
26827: PUSH
26828: LD_INT 1
26830: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
26831: LD_ADDR_VAR 0 5
26835: PUSH
26836: LD_VAR 0 2
26840: PPUSH
26841: CALL_OW 480
26845: ST_TO_ADDR
// if not tmp then
26846: LD_VAR 0 5
26850: NOT
26851: IFFALSE 26855
// exit ;
26853: GO 26904
// for i in tmp do
26855: LD_ADDR_VAR 0 4
26859: PUSH
26860: LD_VAR 0 5
26864: PUSH
26865: FOR_IN
26866: IFFALSE 26902
// if GetTech ( i , side ) <> state_researched then
26868: LD_VAR 0 4
26872: PPUSH
26873: LD_VAR 0 1
26877: PPUSH
26878: CALL_OW 321
26882: PUSH
26883: LD_INT 2
26885: NONEQUAL
26886: IFFALSE 26900
// begin result := false ;
26888: LD_ADDR_VAR 0 3
26892: PUSH
26893: LD_INT 0
26895: ST_TO_ADDR
// exit ;
26896: POP
26897: POP
26898: GO 26904
// end ;
26900: GO 26865
26902: POP
26903: POP
// end ;
26904: LD_VAR 0 3
26908: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
26909: LD_INT 0
26911: PPUSH
26912: PPUSH
26913: PPUSH
26914: PPUSH
26915: PPUSH
26916: PPUSH
26917: PPUSH
26918: PPUSH
26919: PPUSH
26920: PPUSH
26921: PPUSH
26922: PPUSH
26923: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
26924: LD_VAR 0 1
26928: NOT
26929: PUSH
26930: LD_VAR 0 1
26934: PPUSH
26935: CALL_OW 257
26939: PUSH
26940: LD_INT 9
26942: NONEQUAL
26943: OR
26944: IFFALSE 26948
// exit ;
26946: GO 27521
// side := GetSide ( unit ) ;
26948: LD_ADDR_VAR 0 9
26952: PUSH
26953: LD_VAR 0 1
26957: PPUSH
26958: CALL_OW 255
26962: ST_TO_ADDR
// tech_space := tech_spacanom ;
26963: LD_ADDR_VAR 0 12
26967: PUSH
26968: LD_INT 29
26970: ST_TO_ADDR
// tech_time := tech_taurad ;
26971: LD_ADDR_VAR 0 13
26975: PUSH
26976: LD_INT 28
26978: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
26979: LD_ADDR_VAR 0 11
26983: PUSH
26984: LD_VAR 0 1
26988: PPUSH
26989: CALL_OW 310
26993: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
26994: LD_VAR 0 11
26998: PPUSH
26999: CALL_OW 247
27003: PUSH
27004: LD_INT 2
27006: EQUAL
27007: IFFALSE 27011
// exit ;
27009: GO 27521
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27011: LD_ADDR_VAR 0 8
27015: PUSH
27016: LD_INT 81
27018: PUSH
27019: LD_VAR 0 9
27023: PUSH
27024: EMPTY
27025: LIST
27026: LIST
27027: PUSH
27028: LD_INT 3
27030: PUSH
27031: LD_INT 21
27033: PUSH
27034: LD_INT 3
27036: PUSH
27037: EMPTY
27038: LIST
27039: LIST
27040: PUSH
27041: EMPTY
27042: LIST
27043: LIST
27044: PUSH
27045: EMPTY
27046: LIST
27047: LIST
27048: PPUSH
27049: CALL_OW 69
27053: ST_TO_ADDR
// if not tmp then
27054: LD_VAR 0 8
27058: NOT
27059: IFFALSE 27063
// exit ;
27061: GO 27521
// if in_unit then
27063: LD_VAR 0 11
27067: IFFALSE 27091
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
27069: LD_ADDR_VAR 0 10
27073: PUSH
27074: LD_VAR 0 8
27078: PPUSH
27079: LD_VAR 0 11
27083: PPUSH
27084: CALL_OW 74
27088: ST_TO_ADDR
27089: GO 27111
// enemy := NearestUnitToUnit ( tmp , unit ) ;
27091: LD_ADDR_VAR 0 10
27095: PUSH
27096: LD_VAR 0 8
27100: PPUSH
27101: LD_VAR 0 1
27105: PPUSH
27106: CALL_OW 74
27110: ST_TO_ADDR
// if not enemy then
27111: LD_VAR 0 10
27115: NOT
27116: IFFALSE 27120
// exit ;
27118: GO 27521
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
27120: LD_VAR 0 11
27124: PUSH
27125: LD_VAR 0 11
27129: PPUSH
27130: LD_VAR 0 10
27134: PPUSH
27135: CALL_OW 296
27139: PUSH
27140: LD_INT 13
27142: GREATER
27143: AND
27144: PUSH
27145: LD_VAR 0 1
27149: PPUSH
27150: LD_VAR 0 10
27154: PPUSH
27155: CALL_OW 296
27159: PUSH
27160: LD_INT 12
27162: GREATER
27163: OR
27164: IFFALSE 27168
// exit ;
27166: GO 27521
// missile := [ 1 ] ;
27168: LD_ADDR_VAR 0 14
27172: PUSH
27173: LD_INT 1
27175: PUSH
27176: EMPTY
27177: LIST
27178: ST_TO_ADDR
// if Researched ( side , tech_space ) then
27179: LD_VAR 0 9
27183: PPUSH
27184: LD_VAR 0 12
27188: PPUSH
27189: CALL_OW 325
27193: IFFALSE 27222
// missile := Replace ( missile , missile + 1 , 2 ) ;
27195: LD_ADDR_VAR 0 14
27199: PUSH
27200: LD_VAR 0 14
27204: PPUSH
27205: LD_VAR 0 14
27209: PUSH
27210: LD_INT 1
27212: PLUS
27213: PPUSH
27214: LD_INT 2
27216: PPUSH
27217: CALL_OW 1
27221: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
27222: LD_VAR 0 9
27226: PPUSH
27227: LD_VAR 0 13
27231: PPUSH
27232: CALL_OW 325
27236: PUSH
27237: LD_VAR 0 10
27241: PPUSH
27242: CALL_OW 255
27246: PPUSH
27247: LD_VAR 0 13
27251: PPUSH
27252: CALL_OW 325
27256: NOT
27257: AND
27258: IFFALSE 27287
// missile := Replace ( missile , missile + 1 , 3 ) ;
27260: LD_ADDR_VAR 0 14
27264: PUSH
27265: LD_VAR 0 14
27269: PPUSH
27270: LD_VAR 0 14
27274: PUSH
27275: LD_INT 1
27277: PLUS
27278: PPUSH
27279: LD_INT 3
27281: PPUSH
27282: CALL_OW 1
27286: ST_TO_ADDR
// if missile < 2 then
27287: LD_VAR 0 14
27291: PUSH
27292: LD_INT 2
27294: LESS
27295: IFFALSE 27299
// exit ;
27297: GO 27521
// x := GetX ( enemy ) ;
27299: LD_ADDR_VAR 0 4
27303: PUSH
27304: LD_VAR 0 10
27308: PPUSH
27309: CALL_OW 250
27313: ST_TO_ADDR
// y := GetY ( enemy ) ;
27314: LD_ADDR_VAR 0 5
27318: PUSH
27319: LD_VAR 0 10
27323: PPUSH
27324: CALL_OW 251
27328: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
27329: LD_ADDR_VAR 0 6
27333: PUSH
27334: LD_VAR 0 4
27338: PUSH
27339: LD_INT 1
27341: NEG
27342: PPUSH
27343: LD_INT 1
27345: PPUSH
27346: CALL_OW 12
27350: PLUS
27351: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
27352: LD_ADDR_VAR 0 7
27356: PUSH
27357: LD_VAR 0 5
27361: PUSH
27362: LD_INT 1
27364: NEG
27365: PPUSH
27366: LD_INT 1
27368: PPUSH
27369: CALL_OW 12
27373: PLUS
27374: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27375: LD_VAR 0 6
27379: PPUSH
27380: LD_VAR 0 7
27384: PPUSH
27385: CALL_OW 488
27389: NOT
27390: IFFALSE 27412
// begin _x := x ;
27392: LD_ADDR_VAR 0 6
27396: PUSH
27397: LD_VAR 0 4
27401: ST_TO_ADDR
// _y := y ;
27402: LD_ADDR_VAR 0 7
27406: PUSH
27407: LD_VAR 0 5
27411: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
27412: LD_ADDR_VAR 0 3
27416: PUSH
27417: LD_INT 1
27419: PPUSH
27420: LD_VAR 0 14
27424: PPUSH
27425: CALL_OW 12
27429: ST_TO_ADDR
// case i of 1 :
27430: LD_VAR 0 3
27434: PUSH
27435: LD_INT 1
27437: DOUBLE
27438: EQUAL
27439: IFTRUE 27443
27441: GO 27460
27443: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
27444: LD_VAR 0 1
27448: PPUSH
27449: LD_VAR 0 10
27453: PPUSH
27454: CALL_OW 115
27458: GO 27521
27460: LD_INT 2
27462: DOUBLE
27463: EQUAL
27464: IFTRUE 27468
27466: GO 27490
27468: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
27469: LD_VAR 0 1
27473: PPUSH
27474: LD_VAR 0 6
27478: PPUSH
27479: LD_VAR 0 7
27483: PPUSH
27484: CALL_OW 153
27488: GO 27521
27490: LD_INT 3
27492: DOUBLE
27493: EQUAL
27494: IFTRUE 27498
27496: GO 27520
27498: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
27499: LD_VAR 0 1
27503: PPUSH
27504: LD_VAR 0 6
27508: PPUSH
27509: LD_VAR 0 7
27513: PPUSH
27514: CALL_OW 154
27518: GO 27521
27520: POP
// end ;
27521: LD_VAR 0 2
27525: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
27526: LD_INT 0
27528: PPUSH
27529: PPUSH
27530: PPUSH
27531: PPUSH
27532: PPUSH
27533: PPUSH
// if not unit or not building then
27534: LD_VAR 0 1
27538: NOT
27539: PUSH
27540: LD_VAR 0 2
27544: NOT
27545: OR
27546: IFFALSE 27550
// exit ;
27548: GO 27708
// x := GetX ( building ) ;
27550: LD_ADDR_VAR 0 5
27554: PUSH
27555: LD_VAR 0 2
27559: PPUSH
27560: CALL_OW 250
27564: ST_TO_ADDR
// y := GetY ( building ) ;
27565: LD_ADDR_VAR 0 6
27569: PUSH
27570: LD_VAR 0 2
27574: PPUSH
27575: CALL_OW 251
27579: ST_TO_ADDR
// for i = 0 to 5 do
27580: LD_ADDR_VAR 0 4
27584: PUSH
27585: DOUBLE
27586: LD_INT 0
27588: DEC
27589: ST_TO_ADDR
27590: LD_INT 5
27592: PUSH
27593: FOR_TO
27594: IFFALSE 27706
// begin _x := ShiftX ( x , i , 3 ) ;
27596: LD_ADDR_VAR 0 7
27600: PUSH
27601: LD_VAR 0 5
27605: PPUSH
27606: LD_VAR 0 4
27610: PPUSH
27611: LD_INT 3
27613: PPUSH
27614: CALL_OW 272
27618: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
27619: LD_ADDR_VAR 0 8
27623: PUSH
27624: LD_VAR 0 6
27628: PPUSH
27629: LD_VAR 0 4
27633: PPUSH
27634: LD_INT 3
27636: PPUSH
27637: CALL_OW 273
27641: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27642: LD_VAR 0 7
27646: PPUSH
27647: LD_VAR 0 8
27651: PPUSH
27652: CALL_OW 488
27656: NOT
27657: IFFALSE 27661
// continue ;
27659: GO 27593
// if HexInfo ( _x , _y ) = 0 then
27661: LD_VAR 0 7
27665: PPUSH
27666: LD_VAR 0 8
27670: PPUSH
27671: CALL_OW 428
27675: PUSH
27676: LD_INT 0
27678: EQUAL
27679: IFFALSE 27704
// begin ComMoveXY ( unit , _x , _y ) ;
27681: LD_VAR 0 1
27685: PPUSH
27686: LD_VAR 0 7
27690: PPUSH
27691: LD_VAR 0 8
27695: PPUSH
27696: CALL_OW 111
// exit ;
27700: POP
27701: POP
27702: GO 27708
// end ; end ;
27704: GO 27593
27706: POP
27707: POP
// end ;
27708: LD_VAR 0 3
27712: RET
// export function ScanBase ( side , base_area ) ; begin
27713: LD_INT 0
27715: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
27716: LD_ADDR_VAR 0 3
27720: PUSH
27721: LD_VAR 0 2
27725: PPUSH
27726: LD_INT 81
27728: PUSH
27729: LD_VAR 0 1
27733: PUSH
27734: EMPTY
27735: LIST
27736: LIST
27737: PPUSH
27738: CALL_OW 70
27742: ST_TO_ADDR
// end ;
27743: LD_VAR 0 3
27747: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
27748: LD_INT 0
27750: PPUSH
27751: PPUSH
27752: PPUSH
27753: PPUSH
// result := false ;
27754: LD_ADDR_VAR 0 2
27758: PUSH
27759: LD_INT 0
27761: ST_TO_ADDR
// side := GetSide ( unit ) ;
27762: LD_ADDR_VAR 0 3
27766: PUSH
27767: LD_VAR 0 1
27771: PPUSH
27772: CALL_OW 255
27776: ST_TO_ADDR
// nat := GetNation ( unit ) ;
27777: LD_ADDR_VAR 0 4
27781: PUSH
27782: LD_VAR 0 1
27786: PPUSH
27787: CALL_OW 248
27791: ST_TO_ADDR
// case nat of 1 :
27792: LD_VAR 0 4
27796: PUSH
27797: LD_INT 1
27799: DOUBLE
27800: EQUAL
27801: IFTRUE 27805
27803: GO 27816
27805: POP
// tech := tech_lassight ; 2 :
27806: LD_ADDR_VAR 0 5
27810: PUSH
27811: LD_INT 12
27813: ST_TO_ADDR
27814: GO 27855
27816: LD_INT 2
27818: DOUBLE
27819: EQUAL
27820: IFTRUE 27824
27822: GO 27835
27824: POP
// tech := tech_mortar ; 3 :
27825: LD_ADDR_VAR 0 5
27829: PUSH
27830: LD_INT 41
27832: ST_TO_ADDR
27833: GO 27855
27835: LD_INT 3
27837: DOUBLE
27838: EQUAL
27839: IFTRUE 27843
27841: GO 27854
27843: POP
// tech := tech_bazooka ; end ;
27844: LD_ADDR_VAR 0 5
27848: PUSH
27849: LD_INT 44
27851: ST_TO_ADDR
27852: GO 27855
27854: POP
// if Researched ( side , tech ) then
27855: LD_VAR 0 3
27859: PPUSH
27860: LD_VAR 0 5
27864: PPUSH
27865: CALL_OW 325
27869: IFFALSE 27896
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
27871: LD_ADDR_VAR 0 2
27875: PUSH
27876: LD_INT 5
27878: PUSH
27879: LD_INT 8
27881: PUSH
27882: LD_INT 9
27884: PUSH
27885: EMPTY
27886: LIST
27887: LIST
27888: LIST
27889: PUSH
27890: LD_VAR 0 4
27894: ARRAY
27895: ST_TO_ADDR
// end ;
27896: LD_VAR 0 2
27900: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
27901: LD_INT 0
27903: PPUSH
27904: PPUSH
27905: PPUSH
// if not mines then
27906: LD_VAR 0 2
27910: NOT
27911: IFFALSE 27915
// exit ;
27913: GO 28059
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27915: LD_ADDR_VAR 0 5
27919: PUSH
27920: LD_INT 81
27922: PUSH
27923: LD_VAR 0 1
27927: PUSH
27928: EMPTY
27929: LIST
27930: LIST
27931: PUSH
27932: LD_INT 3
27934: PUSH
27935: LD_INT 21
27937: PUSH
27938: LD_INT 3
27940: PUSH
27941: EMPTY
27942: LIST
27943: LIST
27944: PUSH
27945: EMPTY
27946: LIST
27947: LIST
27948: PUSH
27949: EMPTY
27950: LIST
27951: LIST
27952: PPUSH
27953: CALL_OW 69
27957: ST_TO_ADDR
// for i in mines do
27958: LD_ADDR_VAR 0 4
27962: PUSH
27963: LD_VAR 0 2
27967: PUSH
27968: FOR_IN
27969: IFFALSE 28057
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
27971: LD_VAR 0 4
27975: PUSH
27976: LD_INT 1
27978: ARRAY
27979: PPUSH
27980: LD_VAR 0 4
27984: PUSH
27985: LD_INT 2
27987: ARRAY
27988: PPUSH
27989: CALL_OW 458
27993: NOT
27994: IFFALSE 27998
// continue ;
27996: GO 27968
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
27998: LD_VAR 0 4
28002: PUSH
28003: LD_INT 1
28005: ARRAY
28006: PPUSH
28007: LD_VAR 0 4
28011: PUSH
28012: LD_INT 2
28014: ARRAY
28015: PPUSH
28016: CALL_OW 428
28020: PUSH
28021: LD_VAR 0 5
28025: IN
28026: IFFALSE 28055
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
28028: LD_VAR 0 4
28032: PUSH
28033: LD_INT 1
28035: ARRAY
28036: PPUSH
28037: LD_VAR 0 4
28041: PUSH
28042: LD_INT 2
28044: ARRAY
28045: PPUSH
28046: LD_VAR 0 1
28050: PPUSH
28051: CALL_OW 456
// end ;
28055: GO 27968
28057: POP
28058: POP
// end ;
28059: LD_VAR 0 3
28063: RET
// export function Count ( array ) ; begin
28064: LD_INT 0
28066: PPUSH
// result := array + 0 ;
28067: LD_ADDR_VAR 0 2
28071: PUSH
28072: LD_VAR 0 1
28076: PUSH
28077: LD_INT 0
28079: PLUS
28080: ST_TO_ADDR
// end ;
28081: LD_VAR 0 2
28085: RET
// export function IsEmpty ( building ) ; begin
28086: LD_INT 0
28088: PPUSH
// if not building then
28089: LD_VAR 0 1
28093: NOT
28094: IFFALSE 28098
// exit ;
28096: GO 28141
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
28098: LD_ADDR_VAR 0 2
28102: PUSH
28103: LD_VAR 0 1
28107: PUSH
28108: LD_INT 22
28110: PUSH
28111: LD_VAR 0 1
28115: PPUSH
28116: CALL_OW 255
28120: PUSH
28121: EMPTY
28122: LIST
28123: LIST
28124: PUSH
28125: LD_INT 58
28127: PUSH
28128: EMPTY
28129: LIST
28130: PUSH
28131: EMPTY
28132: LIST
28133: LIST
28134: PPUSH
28135: CALL_OW 69
28139: IN
28140: ST_TO_ADDR
// end ;
28141: LD_VAR 0 2
28145: RET
// export function IsNotFull ( building ) ; var places ; begin
28146: LD_INT 0
28148: PPUSH
28149: PPUSH
// if not building then
28150: LD_VAR 0 1
28154: NOT
28155: IFFALSE 28159
// exit ;
28157: GO 28187
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
28159: LD_ADDR_VAR 0 2
28163: PUSH
28164: LD_VAR 0 1
28168: PPUSH
28169: LD_INT 3
28171: PUSH
28172: LD_INT 62
28174: PUSH
28175: EMPTY
28176: LIST
28177: PUSH
28178: EMPTY
28179: LIST
28180: LIST
28181: PPUSH
28182: CALL_OW 72
28186: ST_TO_ADDR
// end ;
28187: LD_VAR 0 2
28191: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
28192: LD_INT 0
28194: PPUSH
28195: PPUSH
28196: PPUSH
28197: PPUSH
// tmp := [ ] ;
28198: LD_ADDR_VAR 0 3
28202: PUSH
28203: EMPTY
28204: ST_TO_ADDR
// list := [ ] ;
28205: LD_ADDR_VAR 0 5
28209: PUSH
28210: EMPTY
28211: ST_TO_ADDR
// for i = 16 to 25 do
28212: LD_ADDR_VAR 0 4
28216: PUSH
28217: DOUBLE
28218: LD_INT 16
28220: DEC
28221: ST_TO_ADDR
28222: LD_INT 25
28224: PUSH
28225: FOR_TO
28226: IFFALSE 28299
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
28228: LD_ADDR_VAR 0 3
28232: PUSH
28233: LD_VAR 0 3
28237: PUSH
28238: LD_INT 22
28240: PUSH
28241: LD_VAR 0 1
28245: PPUSH
28246: CALL_OW 255
28250: PUSH
28251: EMPTY
28252: LIST
28253: LIST
28254: PUSH
28255: LD_INT 91
28257: PUSH
28258: LD_VAR 0 1
28262: PUSH
28263: LD_INT 6
28265: PUSH
28266: EMPTY
28267: LIST
28268: LIST
28269: LIST
28270: PUSH
28271: LD_INT 30
28273: PUSH
28274: LD_VAR 0 4
28278: PUSH
28279: EMPTY
28280: LIST
28281: LIST
28282: PUSH
28283: EMPTY
28284: LIST
28285: LIST
28286: LIST
28287: PUSH
28288: EMPTY
28289: LIST
28290: PPUSH
28291: CALL_OW 69
28295: ADD
28296: ST_TO_ADDR
28297: GO 28225
28299: POP
28300: POP
// for i = 1 to tmp do
28301: LD_ADDR_VAR 0 4
28305: PUSH
28306: DOUBLE
28307: LD_INT 1
28309: DEC
28310: ST_TO_ADDR
28311: LD_VAR 0 3
28315: PUSH
28316: FOR_TO
28317: IFFALSE 28405
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
28319: LD_ADDR_VAR 0 5
28323: PUSH
28324: LD_VAR 0 5
28328: PUSH
28329: LD_VAR 0 3
28333: PUSH
28334: LD_VAR 0 4
28338: ARRAY
28339: PPUSH
28340: CALL_OW 266
28344: PUSH
28345: LD_VAR 0 3
28349: PUSH
28350: LD_VAR 0 4
28354: ARRAY
28355: PPUSH
28356: CALL_OW 250
28360: PUSH
28361: LD_VAR 0 3
28365: PUSH
28366: LD_VAR 0 4
28370: ARRAY
28371: PPUSH
28372: CALL_OW 251
28376: PUSH
28377: LD_VAR 0 3
28381: PUSH
28382: LD_VAR 0 4
28386: ARRAY
28387: PPUSH
28388: CALL_OW 254
28392: PUSH
28393: EMPTY
28394: LIST
28395: LIST
28396: LIST
28397: LIST
28398: PUSH
28399: EMPTY
28400: LIST
28401: ADD
28402: ST_TO_ADDR
28403: GO 28316
28405: POP
28406: POP
// result := list ;
28407: LD_ADDR_VAR 0 2
28411: PUSH
28412: LD_VAR 0 5
28416: ST_TO_ADDR
// end ;
28417: LD_VAR 0 2
28421: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
28422: LD_INT 0
28424: PPUSH
28425: PPUSH
28426: PPUSH
28427: PPUSH
28428: PPUSH
28429: PPUSH
28430: PPUSH
// if not factory then
28431: LD_VAR 0 1
28435: NOT
28436: IFFALSE 28440
// exit ;
28438: GO 29033
// if control = control_apeman then
28440: LD_VAR 0 4
28444: PUSH
28445: LD_INT 5
28447: EQUAL
28448: IFFALSE 28557
// begin tmp := UnitsInside ( factory ) ;
28450: LD_ADDR_VAR 0 8
28454: PUSH
28455: LD_VAR 0 1
28459: PPUSH
28460: CALL_OW 313
28464: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
28465: LD_VAR 0 8
28469: PPUSH
28470: LD_INT 25
28472: PUSH
28473: LD_INT 12
28475: PUSH
28476: EMPTY
28477: LIST
28478: LIST
28479: PPUSH
28480: CALL_OW 72
28484: NOT
28485: IFFALSE 28495
// control := control_manual ;
28487: LD_ADDR_VAR 0 4
28491: PUSH
28492: LD_INT 1
28494: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
28495: LD_ADDR_VAR 0 8
28499: PUSH
28500: LD_VAR 0 1
28504: PPUSH
28505: CALL 28192 0 1
28509: ST_TO_ADDR
// if tmp then
28510: LD_VAR 0 8
28514: IFFALSE 28557
// begin for i in tmp do
28516: LD_ADDR_VAR 0 7
28520: PUSH
28521: LD_VAR 0 8
28525: PUSH
28526: FOR_IN
28527: IFFALSE 28555
// if i [ 1 ] = b_ext_radio then
28529: LD_VAR 0 7
28533: PUSH
28534: LD_INT 1
28536: ARRAY
28537: PUSH
28538: LD_INT 22
28540: EQUAL
28541: IFFALSE 28553
// begin control := control_remote ;
28543: LD_ADDR_VAR 0 4
28547: PUSH
28548: LD_INT 2
28550: ST_TO_ADDR
// break ;
28551: GO 28555
// end ;
28553: GO 28526
28555: POP
28556: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28557: LD_VAR 0 1
28561: PPUSH
28562: LD_VAR 0 2
28566: PPUSH
28567: LD_VAR 0 3
28571: PPUSH
28572: LD_VAR 0 4
28576: PPUSH
28577: LD_VAR 0 5
28581: PPUSH
28582: CALL_OW 448
28586: IFFALSE 28621
// begin result := [ chassis , engine , control , weapon ] ;
28588: LD_ADDR_VAR 0 6
28592: PUSH
28593: LD_VAR 0 2
28597: PUSH
28598: LD_VAR 0 3
28602: PUSH
28603: LD_VAR 0 4
28607: PUSH
28608: LD_VAR 0 5
28612: PUSH
28613: EMPTY
28614: LIST
28615: LIST
28616: LIST
28617: LIST
28618: ST_TO_ADDR
// exit ;
28619: GO 29033
// end ; _chassis := AvailableChassisList ( factory ) ;
28621: LD_ADDR_VAR 0 9
28625: PUSH
28626: LD_VAR 0 1
28630: PPUSH
28631: CALL_OW 475
28635: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
28636: LD_ADDR_VAR 0 11
28640: PUSH
28641: LD_VAR 0 1
28645: PPUSH
28646: CALL_OW 476
28650: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
28651: LD_ADDR_VAR 0 12
28655: PUSH
28656: LD_VAR 0 1
28660: PPUSH
28661: CALL_OW 477
28665: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
28666: LD_ADDR_VAR 0 10
28670: PUSH
28671: LD_VAR 0 1
28675: PPUSH
28676: CALL_OW 478
28680: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
28681: LD_VAR 0 9
28685: NOT
28686: PUSH
28687: LD_VAR 0 11
28691: NOT
28692: OR
28693: PUSH
28694: LD_VAR 0 12
28698: NOT
28699: OR
28700: PUSH
28701: LD_VAR 0 10
28705: NOT
28706: OR
28707: IFFALSE 28742
// begin result := [ chassis , engine , control , weapon ] ;
28709: LD_ADDR_VAR 0 6
28713: PUSH
28714: LD_VAR 0 2
28718: PUSH
28719: LD_VAR 0 3
28723: PUSH
28724: LD_VAR 0 4
28728: PUSH
28729: LD_VAR 0 5
28733: PUSH
28734: EMPTY
28735: LIST
28736: LIST
28737: LIST
28738: LIST
28739: ST_TO_ADDR
// exit ;
28740: GO 29033
// end ; if not chassis in _chassis then
28742: LD_VAR 0 2
28746: PUSH
28747: LD_VAR 0 9
28751: IN
28752: NOT
28753: IFFALSE 28779
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
28755: LD_ADDR_VAR 0 2
28759: PUSH
28760: LD_VAR 0 9
28764: PUSH
28765: LD_INT 1
28767: PPUSH
28768: LD_VAR 0 9
28772: PPUSH
28773: CALL_OW 12
28777: ARRAY
28778: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
28779: LD_VAR 0 2
28783: PPUSH
28784: LD_VAR 0 3
28788: PPUSH
28789: CALL 29038 0 2
28793: NOT
28794: IFFALSE 28853
// repeat engine := _engine [ 1 ] ;
28796: LD_ADDR_VAR 0 3
28800: PUSH
28801: LD_VAR 0 11
28805: PUSH
28806: LD_INT 1
28808: ARRAY
28809: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
28810: LD_ADDR_VAR 0 11
28814: PUSH
28815: LD_VAR 0 11
28819: PPUSH
28820: LD_INT 1
28822: PPUSH
28823: CALL_OW 3
28827: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
28828: LD_VAR 0 2
28832: PPUSH
28833: LD_VAR 0 3
28837: PPUSH
28838: CALL 29038 0 2
28842: PUSH
28843: LD_VAR 0 11
28847: PUSH
28848: EMPTY
28849: EQUAL
28850: OR
28851: IFFALSE 28796
// if not control in _control then
28853: LD_VAR 0 4
28857: PUSH
28858: LD_VAR 0 12
28862: IN
28863: NOT
28864: IFFALSE 28890
// control := _control [ rand ( 1 , _control ) ] ;
28866: LD_ADDR_VAR 0 4
28870: PUSH
28871: LD_VAR 0 12
28875: PUSH
28876: LD_INT 1
28878: PPUSH
28879: LD_VAR 0 12
28883: PPUSH
28884: CALL_OW 12
28888: ARRAY
28889: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
28890: LD_VAR 0 2
28894: PPUSH
28895: LD_VAR 0 5
28899: PPUSH
28900: CALL 29258 0 2
28904: NOT
28905: IFFALSE 28964
// repeat weapon := _weapon [ 1 ] ;
28907: LD_ADDR_VAR 0 5
28911: PUSH
28912: LD_VAR 0 10
28916: PUSH
28917: LD_INT 1
28919: ARRAY
28920: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
28921: LD_ADDR_VAR 0 10
28925: PUSH
28926: LD_VAR 0 10
28930: PPUSH
28931: LD_INT 1
28933: PPUSH
28934: CALL_OW 3
28938: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
28939: LD_VAR 0 2
28943: PPUSH
28944: LD_VAR 0 5
28948: PPUSH
28949: CALL 29258 0 2
28953: PUSH
28954: LD_VAR 0 10
28958: PUSH
28959: EMPTY
28960: EQUAL
28961: OR
28962: IFFALSE 28907
// result := [ ] ;
28964: LD_ADDR_VAR 0 6
28968: PUSH
28969: EMPTY
28970: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28971: LD_VAR 0 1
28975: PPUSH
28976: LD_VAR 0 2
28980: PPUSH
28981: LD_VAR 0 3
28985: PPUSH
28986: LD_VAR 0 4
28990: PPUSH
28991: LD_VAR 0 5
28995: PPUSH
28996: CALL_OW 448
29000: IFFALSE 29033
// result := [ chassis , engine , control , weapon ] ;
29002: LD_ADDR_VAR 0 6
29006: PUSH
29007: LD_VAR 0 2
29011: PUSH
29012: LD_VAR 0 3
29016: PUSH
29017: LD_VAR 0 4
29021: PUSH
29022: LD_VAR 0 5
29026: PUSH
29027: EMPTY
29028: LIST
29029: LIST
29030: LIST
29031: LIST
29032: ST_TO_ADDR
// end ;
29033: LD_VAR 0 6
29037: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
29038: LD_INT 0
29040: PPUSH
// if not chassis or not engine then
29041: LD_VAR 0 1
29045: NOT
29046: PUSH
29047: LD_VAR 0 2
29051: NOT
29052: OR
29053: IFFALSE 29057
// exit ;
29055: GO 29253
// case engine of engine_solar :
29057: LD_VAR 0 2
29061: PUSH
29062: LD_INT 2
29064: DOUBLE
29065: EQUAL
29066: IFTRUE 29070
29068: GO 29108
29070: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
29071: LD_ADDR_VAR 0 3
29075: PUSH
29076: LD_INT 11
29078: PUSH
29079: LD_INT 12
29081: PUSH
29082: LD_INT 13
29084: PUSH
29085: LD_INT 14
29087: PUSH
29088: LD_INT 1
29090: PUSH
29091: LD_INT 2
29093: PUSH
29094: LD_INT 3
29096: PUSH
29097: EMPTY
29098: LIST
29099: LIST
29100: LIST
29101: LIST
29102: LIST
29103: LIST
29104: LIST
29105: ST_TO_ADDR
29106: GO 29237
29108: LD_INT 1
29110: DOUBLE
29111: EQUAL
29112: IFTRUE 29116
29114: GO 29178
29116: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
29117: LD_ADDR_VAR 0 3
29121: PUSH
29122: LD_INT 11
29124: PUSH
29125: LD_INT 12
29127: PUSH
29128: LD_INT 13
29130: PUSH
29131: LD_INT 14
29133: PUSH
29134: LD_INT 1
29136: PUSH
29137: LD_INT 2
29139: PUSH
29140: LD_INT 3
29142: PUSH
29143: LD_INT 4
29145: PUSH
29146: LD_INT 5
29148: PUSH
29149: LD_INT 21
29151: PUSH
29152: LD_INT 23
29154: PUSH
29155: LD_INT 22
29157: PUSH
29158: LD_INT 24
29160: PUSH
29161: EMPTY
29162: LIST
29163: LIST
29164: LIST
29165: LIST
29166: LIST
29167: LIST
29168: LIST
29169: LIST
29170: LIST
29171: LIST
29172: LIST
29173: LIST
29174: LIST
29175: ST_TO_ADDR
29176: GO 29237
29178: LD_INT 3
29180: DOUBLE
29181: EQUAL
29182: IFTRUE 29186
29184: GO 29236
29186: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29187: LD_ADDR_VAR 0 3
29191: PUSH
29192: LD_INT 13
29194: PUSH
29195: LD_INT 14
29197: PUSH
29198: LD_INT 2
29200: PUSH
29201: LD_INT 3
29203: PUSH
29204: LD_INT 4
29206: PUSH
29207: LD_INT 5
29209: PUSH
29210: LD_INT 21
29212: PUSH
29213: LD_INT 22
29215: PUSH
29216: LD_INT 23
29218: PUSH
29219: LD_INT 24
29221: PUSH
29222: EMPTY
29223: LIST
29224: LIST
29225: LIST
29226: LIST
29227: LIST
29228: LIST
29229: LIST
29230: LIST
29231: LIST
29232: LIST
29233: ST_TO_ADDR
29234: GO 29237
29236: POP
// result := ( chassis in result ) ;
29237: LD_ADDR_VAR 0 3
29241: PUSH
29242: LD_VAR 0 1
29246: PUSH
29247: LD_VAR 0 3
29251: IN
29252: ST_TO_ADDR
// end ;
29253: LD_VAR 0 3
29257: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
29258: LD_INT 0
29260: PPUSH
// if not chassis or not weapon then
29261: LD_VAR 0 1
29265: NOT
29266: PUSH
29267: LD_VAR 0 2
29271: NOT
29272: OR
29273: IFFALSE 29277
// exit ;
29275: GO 30337
// case weapon of us_machine_gun :
29277: LD_VAR 0 2
29281: PUSH
29282: LD_INT 2
29284: DOUBLE
29285: EQUAL
29286: IFTRUE 29290
29288: GO 29320
29290: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
29291: LD_ADDR_VAR 0 3
29295: PUSH
29296: LD_INT 1
29298: PUSH
29299: LD_INT 2
29301: PUSH
29302: LD_INT 3
29304: PUSH
29305: LD_INT 4
29307: PUSH
29308: LD_INT 5
29310: PUSH
29311: EMPTY
29312: LIST
29313: LIST
29314: LIST
29315: LIST
29316: LIST
29317: ST_TO_ADDR
29318: GO 30321
29320: LD_INT 3
29322: DOUBLE
29323: EQUAL
29324: IFTRUE 29328
29326: GO 29358
29328: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
29329: LD_ADDR_VAR 0 3
29333: PUSH
29334: LD_INT 1
29336: PUSH
29337: LD_INT 2
29339: PUSH
29340: LD_INT 3
29342: PUSH
29343: LD_INT 4
29345: PUSH
29346: LD_INT 5
29348: PUSH
29349: EMPTY
29350: LIST
29351: LIST
29352: LIST
29353: LIST
29354: LIST
29355: ST_TO_ADDR
29356: GO 30321
29358: LD_INT 11
29360: DOUBLE
29361: EQUAL
29362: IFTRUE 29366
29364: GO 29396
29366: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
29367: LD_ADDR_VAR 0 3
29371: PUSH
29372: LD_INT 1
29374: PUSH
29375: LD_INT 2
29377: PUSH
29378: LD_INT 3
29380: PUSH
29381: LD_INT 4
29383: PUSH
29384: LD_INT 5
29386: PUSH
29387: EMPTY
29388: LIST
29389: LIST
29390: LIST
29391: LIST
29392: LIST
29393: ST_TO_ADDR
29394: GO 30321
29396: LD_INT 4
29398: DOUBLE
29399: EQUAL
29400: IFTRUE 29404
29402: GO 29430
29404: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
29405: LD_ADDR_VAR 0 3
29409: PUSH
29410: LD_INT 2
29412: PUSH
29413: LD_INT 3
29415: PUSH
29416: LD_INT 4
29418: PUSH
29419: LD_INT 5
29421: PUSH
29422: EMPTY
29423: LIST
29424: LIST
29425: LIST
29426: LIST
29427: ST_TO_ADDR
29428: GO 30321
29430: LD_INT 5
29432: DOUBLE
29433: EQUAL
29434: IFTRUE 29438
29436: GO 29464
29438: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
29439: LD_ADDR_VAR 0 3
29443: PUSH
29444: LD_INT 2
29446: PUSH
29447: LD_INT 3
29449: PUSH
29450: LD_INT 4
29452: PUSH
29453: LD_INT 5
29455: PUSH
29456: EMPTY
29457: LIST
29458: LIST
29459: LIST
29460: LIST
29461: ST_TO_ADDR
29462: GO 30321
29464: LD_INT 9
29466: DOUBLE
29467: EQUAL
29468: IFTRUE 29472
29470: GO 29498
29472: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
29473: LD_ADDR_VAR 0 3
29477: PUSH
29478: LD_INT 2
29480: PUSH
29481: LD_INT 3
29483: PUSH
29484: LD_INT 4
29486: PUSH
29487: LD_INT 5
29489: PUSH
29490: EMPTY
29491: LIST
29492: LIST
29493: LIST
29494: LIST
29495: ST_TO_ADDR
29496: GO 30321
29498: LD_INT 7
29500: DOUBLE
29501: EQUAL
29502: IFTRUE 29506
29504: GO 29532
29506: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
29507: LD_ADDR_VAR 0 3
29511: PUSH
29512: LD_INT 2
29514: PUSH
29515: LD_INT 3
29517: PUSH
29518: LD_INT 4
29520: PUSH
29521: LD_INT 5
29523: PUSH
29524: EMPTY
29525: LIST
29526: LIST
29527: LIST
29528: LIST
29529: ST_TO_ADDR
29530: GO 30321
29532: LD_INT 12
29534: DOUBLE
29535: EQUAL
29536: IFTRUE 29540
29538: GO 29566
29540: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
29541: LD_ADDR_VAR 0 3
29545: PUSH
29546: LD_INT 2
29548: PUSH
29549: LD_INT 3
29551: PUSH
29552: LD_INT 4
29554: PUSH
29555: LD_INT 5
29557: PUSH
29558: EMPTY
29559: LIST
29560: LIST
29561: LIST
29562: LIST
29563: ST_TO_ADDR
29564: GO 30321
29566: LD_INT 13
29568: DOUBLE
29569: EQUAL
29570: IFTRUE 29574
29572: GO 29600
29574: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
29575: LD_ADDR_VAR 0 3
29579: PUSH
29580: LD_INT 2
29582: PUSH
29583: LD_INT 3
29585: PUSH
29586: LD_INT 4
29588: PUSH
29589: LD_INT 5
29591: PUSH
29592: EMPTY
29593: LIST
29594: LIST
29595: LIST
29596: LIST
29597: ST_TO_ADDR
29598: GO 30321
29600: LD_INT 14
29602: DOUBLE
29603: EQUAL
29604: IFTRUE 29608
29606: GO 29626
29608: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
29609: LD_ADDR_VAR 0 3
29613: PUSH
29614: LD_INT 4
29616: PUSH
29617: LD_INT 5
29619: PUSH
29620: EMPTY
29621: LIST
29622: LIST
29623: ST_TO_ADDR
29624: GO 30321
29626: LD_INT 6
29628: DOUBLE
29629: EQUAL
29630: IFTRUE 29634
29632: GO 29652
29634: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
29635: LD_ADDR_VAR 0 3
29639: PUSH
29640: LD_INT 4
29642: PUSH
29643: LD_INT 5
29645: PUSH
29646: EMPTY
29647: LIST
29648: LIST
29649: ST_TO_ADDR
29650: GO 30321
29652: LD_INT 10
29654: DOUBLE
29655: EQUAL
29656: IFTRUE 29660
29658: GO 29678
29660: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
29661: LD_ADDR_VAR 0 3
29665: PUSH
29666: LD_INT 4
29668: PUSH
29669: LD_INT 5
29671: PUSH
29672: EMPTY
29673: LIST
29674: LIST
29675: ST_TO_ADDR
29676: GO 30321
29678: LD_INT 22
29680: DOUBLE
29681: EQUAL
29682: IFTRUE 29686
29684: GO 29712
29686: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
29687: LD_ADDR_VAR 0 3
29691: PUSH
29692: LD_INT 11
29694: PUSH
29695: LD_INT 12
29697: PUSH
29698: LD_INT 13
29700: PUSH
29701: LD_INT 14
29703: PUSH
29704: EMPTY
29705: LIST
29706: LIST
29707: LIST
29708: LIST
29709: ST_TO_ADDR
29710: GO 30321
29712: LD_INT 23
29714: DOUBLE
29715: EQUAL
29716: IFTRUE 29720
29718: GO 29746
29720: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
29721: LD_ADDR_VAR 0 3
29725: PUSH
29726: LD_INT 11
29728: PUSH
29729: LD_INT 12
29731: PUSH
29732: LD_INT 13
29734: PUSH
29735: LD_INT 14
29737: PUSH
29738: EMPTY
29739: LIST
29740: LIST
29741: LIST
29742: LIST
29743: ST_TO_ADDR
29744: GO 30321
29746: LD_INT 24
29748: DOUBLE
29749: EQUAL
29750: IFTRUE 29754
29752: GO 29780
29754: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
29755: LD_ADDR_VAR 0 3
29759: PUSH
29760: LD_INT 11
29762: PUSH
29763: LD_INT 12
29765: PUSH
29766: LD_INT 13
29768: PUSH
29769: LD_INT 14
29771: PUSH
29772: EMPTY
29773: LIST
29774: LIST
29775: LIST
29776: LIST
29777: ST_TO_ADDR
29778: GO 30321
29780: LD_INT 30
29782: DOUBLE
29783: EQUAL
29784: IFTRUE 29788
29786: GO 29814
29788: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
29789: LD_ADDR_VAR 0 3
29793: PUSH
29794: LD_INT 11
29796: PUSH
29797: LD_INT 12
29799: PUSH
29800: LD_INT 13
29802: PUSH
29803: LD_INT 14
29805: PUSH
29806: EMPTY
29807: LIST
29808: LIST
29809: LIST
29810: LIST
29811: ST_TO_ADDR
29812: GO 30321
29814: LD_INT 25
29816: DOUBLE
29817: EQUAL
29818: IFTRUE 29822
29820: GO 29840
29822: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
29823: LD_ADDR_VAR 0 3
29827: PUSH
29828: LD_INT 13
29830: PUSH
29831: LD_INT 14
29833: PUSH
29834: EMPTY
29835: LIST
29836: LIST
29837: ST_TO_ADDR
29838: GO 30321
29840: LD_INT 27
29842: DOUBLE
29843: EQUAL
29844: IFTRUE 29848
29846: GO 29866
29848: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
29849: LD_ADDR_VAR 0 3
29853: PUSH
29854: LD_INT 13
29856: PUSH
29857: LD_INT 14
29859: PUSH
29860: EMPTY
29861: LIST
29862: LIST
29863: ST_TO_ADDR
29864: GO 30321
29866: LD_INT 92
29868: DOUBLE
29869: EQUAL
29870: IFTRUE 29874
29872: GO 29900
29874: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
29875: LD_ADDR_VAR 0 3
29879: PUSH
29880: LD_INT 11
29882: PUSH
29883: LD_INT 12
29885: PUSH
29886: LD_INT 13
29888: PUSH
29889: LD_INT 14
29891: PUSH
29892: EMPTY
29893: LIST
29894: LIST
29895: LIST
29896: LIST
29897: ST_TO_ADDR
29898: GO 30321
29900: LD_INT 28
29902: DOUBLE
29903: EQUAL
29904: IFTRUE 29908
29906: GO 29926
29908: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
29909: LD_ADDR_VAR 0 3
29913: PUSH
29914: LD_INT 13
29916: PUSH
29917: LD_INT 14
29919: PUSH
29920: EMPTY
29921: LIST
29922: LIST
29923: ST_TO_ADDR
29924: GO 30321
29926: LD_INT 29
29928: DOUBLE
29929: EQUAL
29930: IFTRUE 29934
29932: GO 29952
29934: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
29935: LD_ADDR_VAR 0 3
29939: PUSH
29940: LD_INT 13
29942: PUSH
29943: LD_INT 14
29945: PUSH
29946: EMPTY
29947: LIST
29948: LIST
29949: ST_TO_ADDR
29950: GO 30321
29952: LD_INT 31
29954: DOUBLE
29955: EQUAL
29956: IFTRUE 29960
29958: GO 29978
29960: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
29961: LD_ADDR_VAR 0 3
29965: PUSH
29966: LD_INT 13
29968: PUSH
29969: LD_INT 14
29971: PUSH
29972: EMPTY
29973: LIST
29974: LIST
29975: ST_TO_ADDR
29976: GO 30321
29978: LD_INT 26
29980: DOUBLE
29981: EQUAL
29982: IFTRUE 29986
29984: GO 30004
29986: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
29987: LD_ADDR_VAR 0 3
29991: PUSH
29992: LD_INT 13
29994: PUSH
29995: LD_INT 14
29997: PUSH
29998: EMPTY
29999: LIST
30000: LIST
30001: ST_TO_ADDR
30002: GO 30321
30004: LD_INT 42
30006: DOUBLE
30007: EQUAL
30008: IFTRUE 30012
30010: GO 30038
30012: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
30013: LD_ADDR_VAR 0 3
30017: PUSH
30018: LD_INT 21
30020: PUSH
30021: LD_INT 22
30023: PUSH
30024: LD_INT 23
30026: PUSH
30027: LD_INT 24
30029: PUSH
30030: EMPTY
30031: LIST
30032: LIST
30033: LIST
30034: LIST
30035: ST_TO_ADDR
30036: GO 30321
30038: LD_INT 43
30040: DOUBLE
30041: EQUAL
30042: IFTRUE 30046
30044: GO 30072
30046: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
30047: LD_ADDR_VAR 0 3
30051: PUSH
30052: LD_INT 21
30054: PUSH
30055: LD_INT 22
30057: PUSH
30058: LD_INT 23
30060: PUSH
30061: LD_INT 24
30063: PUSH
30064: EMPTY
30065: LIST
30066: LIST
30067: LIST
30068: LIST
30069: ST_TO_ADDR
30070: GO 30321
30072: LD_INT 44
30074: DOUBLE
30075: EQUAL
30076: IFTRUE 30080
30078: GO 30106
30080: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
30081: LD_ADDR_VAR 0 3
30085: PUSH
30086: LD_INT 21
30088: PUSH
30089: LD_INT 22
30091: PUSH
30092: LD_INT 23
30094: PUSH
30095: LD_INT 24
30097: PUSH
30098: EMPTY
30099: LIST
30100: LIST
30101: LIST
30102: LIST
30103: ST_TO_ADDR
30104: GO 30321
30106: LD_INT 45
30108: DOUBLE
30109: EQUAL
30110: IFTRUE 30114
30112: GO 30140
30114: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
30115: LD_ADDR_VAR 0 3
30119: PUSH
30120: LD_INT 21
30122: PUSH
30123: LD_INT 22
30125: PUSH
30126: LD_INT 23
30128: PUSH
30129: LD_INT 24
30131: PUSH
30132: EMPTY
30133: LIST
30134: LIST
30135: LIST
30136: LIST
30137: ST_TO_ADDR
30138: GO 30321
30140: LD_INT 49
30142: DOUBLE
30143: EQUAL
30144: IFTRUE 30148
30146: GO 30174
30148: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
30149: LD_ADDR_VAR 0 3
30153: PUSH
30154: LD_INT 21
30156: PUSH
30157: LD_INT 22
30159: PUSH
30160: LD_INT 23
30162: PUSH
30163: LD_INT 24
30165: PUSH
30166: EMPTY
30167: LIST
30168: LIST
30169: LIST
30170: LIST
30171: ST_TO_ADDR
30172: GO 30321
30174: LD_INT 51
30176: DOUBLE
30177: EQUAL
30178: IFTRUE 30182
30180: GO 30208
30182: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
30183: LD_ADDR_VAR 0 3
30187: PUSH
30188: LD_INT 21
30190: PUSH
30191: LD_INT 22
30193: PUSH
30194: LD_INT 23
30196: PUSH
30197: LD_INT 24
30199: PUSH
30200: EMPTY
30201: LIST
30202: LIST
30203: LIST
30204: LIST
30205: ST_TO_ADDR
30206: GO 30321
30208: LD_INT 52
30210: DOUBLE
30211: EQUAL
30212: IFTRUE 30216
30214: GO 30242
30216: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
30217: LD_ADDR_VAR 0 3
30221: PUSH
30222: LD_INT 21
30224: PUSH
30225: LD_INT 22
30227: PUSH
30228: LD_INT 23
30230: PUSH
30231: LD_INT 24
30233: PUSH
30234: EMPTY
30235: LIST
30236: LIST
30237: LIST
30238: LIST
30239: ST_TO_ADDR
30240: GO 30321
30242: LD_INT 53
30244: DOUBLE
30245: EQUAL
30246: IFTRUE 30250
30248: GO 30268
30250: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
30251: LD_ADDR_VAR 0 3
30255: PUSH
30256: LD_INT 23
30258: PUSH
30259: LD_INT 24
30261: PUSH
30262: EMPTY
30263: LIST
30264: LIST
30265: ST_TO_ADDR
30266: GO 30321
30268: LD_INT 46
30270: DOUBLE
30271: EQUAL
30272: IFTRUE 30276
30274: GO 30294
30276: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
30277: LD_ADDR_VAR 0 3
30281: PUSH
30282: LD_INT 23
30284: PUSH
30285: LD_INT 24
30287: PUSH
30288: EMPTY
30289: LIST
30290: LIST
30291: ST_TO_ADDR
30292: GO 30321
30294: LD_INT 47
30296: DOUBLE
30297: EQUAL
30298: IFTRUE 30302
30300: GO 30320
30302: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30303: LD_ADDR_VAR 0 3
30307: PUSH
30308: LD_INT 23
30310: PUSH
30311: LD_INT 24
30313: PUSH
30314: EMPTY
30315: LIST
30316: LIST
30317: ST_TO_ADDR
30318: GO 30321
30320: POP
// result := ( chassis in result ) ;
30321: LD_ADDR_VAR 0 3
30325: PUSH
30326: LD_VAR 0 1
30330: PUSH
30331: LD_VAR 0 3
30335: IN
30336: ST_TO_ADDR
// end ;
30337: LD_VAR 0 3
30341: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
30342: LD_INT 0
30344: PPUSH
30345: PPUSH
30346: PPUSH
30347: PPUSH
30348: PPUSH
30349: PPUSH
30350: PPUSH
// result := array ;
30351: LD_ADDR_VAR 0 5
30355: PUSH
30356: LD_VAR 0 1
30360: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
30361: LD_VAR 0 1
30365: NOT
30366: PUSH
30367: LD_VAR 0 2
30371: NOT
30372: OR
30373: PUSH
30374: LD_VAR 0 3
30378: NOT
30379: OR
30380: PUSH
30381: LD_VAR 0 2
30385: PUSH
30386: LD_VAR 0 1
30390: GREATER
30391: OR
30392: PUSH
30393: LD_VAR 0 3
30397: PUSH
30398: LD_VAR 0 1
30402: GREATER
30403: OR
30404: IFFALSE 30408
// exit ;
30406: GO 30704
// if direction then
30408: LD_VAR 0 4
30412: IFFALSE 30476
// begin d := 1 ;
30414: LD_ADDR_VAR 0 9
30418: PUSH
30419: LD_INT 1
30421: ST_TO_ADDR
// if i_from > i_to then
30422: LD_VAR 0 2
30426: PUSH
30427: LD_VAR 0 3
30431: GREATER
30432: IFFALSE 30458
// length := ( array - i_from ) + i_to else
30434: LD_ADDR_VAR 0 11
30438: PUSH
30439: LD_VAR 0 1
30443: PUSH
30444: LD_VAR 0 2
30448: MINUS
30449: PUSH
30450: LD_VAR 0 3
30454: PLUS
30455: ST_TO_ADDR
30456: GO 30474
// length := i_to - i_from ;
30458: LD_ADDR_VAR 0 11
30462: PUSH
30463: LD_VAR 0 3
30467: PUSH
30468: LD_VAR 0 2
30472: MINUS
30473: ST_TO_ADDR
// end else
30474: GO 30537
// begin d := - 1 ;
30476: LD_ADDR_VAR 0 9
30480: PUSH
30481: LD_INT 1
30483: NEG
30484: ST_TO_ADDR
// if i_from > i_to then
30485: LD_VAR 0 2
30489: PUSH
30490: LD_VAR 0 3
30494: GREATER
30495: IFFALSE 30515
// length := i_from - i_to else
30497: LD_ADDR_VAR 0 11
30501: PUSH
30502: LD_VAR 0 2
30506: PUSH
30507: LD_VAR 0 3
30511: MINUS
30512: ST_TO_ADDR
30513: GO 30537
// length := ( array - i_to ) + i_from ;
30515: LD_ADDR_VAR 0 11
30519: PUSH
30520: LD_VAR 0 1
30524: PUSH
30525: LD_VAR 0 3
30529: MINUS
30530: PUSH
30531: LD_VAR 0 2
30535: PLUS
30536: ST_TO_ADDR
// end ; if not length then
30537: LD_VAR 0 11
30541: NOT
30542: IFFALSE 30546
// exit ;
30544: GO 30704
// tmp := array ;
30546: LD_ADDR_VAR 0 10
30550: PUSH
30551: LD_VAR 0 1
30555: ST_TO_ADDR
// for i = 1 to length do
30556: LD_ADDR_VAR 0 6
30560: PUSH
30561: DOUBLE
30562: LD_INT 1
30564: DEC
30565: ST_TO_ADDR
30566: LD_VAR 0 11
30570: PUSH
30571: FOR_TO
30572: IFFALSE 30692
// begin for j = 1 to array do
30574: LD_ADDR_VAR 0 7
30578: PUSH
30579: DOUBLE
30580: LD_INT 1
30582: DEC
30583: ST_TO_ADDR
30584: LD_VAR 0 1
30588: PUSH
30589: FOR_TO
30590: IFFALSE 30678
// begin k := j + d ;
30592: LD_ADDR_VAR 0 8
30596: PUSH
30597: LD_VAR 0 7
30601: PUSH
30602: LD_VAR 0 9
30606: PLUS
30607: ST_TO_ADDR
// if k > array then
30608: LD_VAR 0 8
30612: PUSH
30613: LD_VAR 0 1
30617: GREATER
30618: IFFALSE 30628
// k := 1 ;
30620: LD_ADDR_VAR 0 8
30624: PUSH
30625: LD_INT 1
30627: ST_TO_ADDR
// if not k then
30628: LD_VAR 0 8
30632: NOT
30633: IFFALSE 30645
// k := array ;
30635: LD_ADDR_VAR 0 8
30639: PUSH
30640: LD_VAR 0 1
30644: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
30645: LD_ADDR_VAR 0 10
30649: PUSH
30650: LD_VAR 0 10
30654: PPUSH
30655: LD_VAR 0 8
30659: PPUSH
30660: LD_VAR 0 1
30664: PUSH
30665: LD_VAR 0 7
30669: ARRAY
30670: PPUSH
30671: CALL_OW 1
30675: ST_TO_ADDR
// end ;
30676: GO 30589
30678: POP
30679: POP
// array := tmp ;
30680: LD_ADDR_VAR 0 1
30684: PUSH
30685: LD_VAR 0 10
30689: ST_TO_ADDR
// end ;
30690: GO 30571
30692: POP
30693: POP
// result := array ;
30694: LD_ADDR_VAR 0 5
30698: PUSH
30699: LD_VAR 0 1
30703: ST_TO_ADDR
// end ;
30704: LD_VAR 0 5
30708: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
30709: LD_INT 0
30711: PPUSH
30712: PPUSH
// result := 0 ;
30713: LD_ADDR_VAR 0 3
30717: PUSH
30718: LD_INT 0
30720: ST_TO_ADDR
// if not array or not value in array then
30721: LD_VAR 0 1
30725: NOT
30726: PUSH
30727: LD_VAR 0 2
30731: PUSH
30732: LD_VAR 0 1
30736: IN
30737: NOT
30738: OR
30739: IFFALSE 30743
// exit ;
30741: GO 30797
// for i = 1 to array do
30743: LD_ADDR_VAR 0 4
30747: PUSH
30748: DOUBLE
30749: LD_INT 1
30751: DEC
30752: ST_TO_ADDR
30753: LD_VAR 0 1
30757: PUSH
30758: FOR_TO
30759: IFFALSE 30795
// if value = array [ i ] then
30761: LD_VAR 0 2
30765: PUSH
30766: LD_VAR 0 1
30770: PUSH
30771: LD_VAR 0 4
30775: ARRAY
30776: EQUAL
30777: IFFALSE 30793
// begin result := i ;
30779: LD_ADDR_VAR 0 3
30783: PUSH
30784: LD_VAR 0 4
30788: ST_TO_ADDR
// exit ;
30789: POP
30790: POP
30791: GO 30797
// end ;
30793: GO 30758
30795: POP
30796: POP
// end ;
30797: LD_VAR 0 3
30801: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
30802: LD_INT 0
30804: PPUSH
// vc_chassis := chassis ;
30805: LD_ADDR_OWVAR 37
30809: PUSH
30810: LD_VAR 0 1
30814: ST_TO_ADDR
// vc_engine := engine ;
30815: LD_ADDR_OWVAR 39
30819: PUSH
30820: LD_VAR 0 2
30824: ST_TO_ADDR
// vc_control := control ;
30825: LD_ADDR_OWVAR 38
30829: PUSH
30830: LD_VAR 0 3
30834: ST_TO_ADDR
// vc_weapon := weapon ;
30835: LD_ADDR_OWVAR 40
30839: PUSH
30840: LD_VAR 0 4
30844: ST_TO_ADDR
// vc_fuel_battery := fuel ;
30845: LD_ADDR_OWVAR 41
30849: PUSH
30850: LD_VAR 0 5
30854: ST_TO_ADDR
// end ;
30855: LD_VAR 0 6
30859: RET
// export function WantPlant ( unit ) ; var task ; begin
30860: LD_INT 0
30862: PPUSH
30863: PPUSH
// result := false ;
30864: LD_ADDR_VAR 0 2
30868: PUSH
30869: LD_INT 0
30871: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
30872: LD_ADDR_VAR 0 3
30876: PUSH
30877: LD_VAR 0 1
30881: PPUSH
30882: CALL_OW 437
30886: ST_TO_ADDR
// if task then
30887: LD_VAR 0 3
30891: IFFALSE 30919
// if task [ 1 ] [ 1 ] = p then
30893: LD_VAR 0 3
30897: PUSH
30898: LD_INT 1
30900: ARRAY
30901: PUSH
30902: LD_INT 1
30904: ARRAY
30905: PUSH
30906: LD_STRING p
30908: EQUAL
30909: IFFALSE 30919
// result := true ;
30911: LD_ADDR_VAR 0 2
30915: PUSH
30916: LD_INT 1
30918: ST_TO_ADDR
// end ;
30919: LD_VAR 0 2
30923: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
30924: LD_INT 0
30926: PPUSH
30927: PPUSH
30928: PPUSH
30929: PPUSH
// if pos < 1 then
30930: LD_VAR 0 2
30934: PUSH
30935: LD_INT 1
30937: LESS
30938: IFFALSE 30942
// exit ;
30940: GO 31245
// if pos = 1 then
30942: LD_VAR 0 2
30946: PUSH
30947: LD_INT 1
30949: EQUAL
30950: IFFALSE 30983
// result := Replace ( arr , pos [ 1 ] , value ) else
30952: LD_ADDR_VAR 0 4
30956: PUSH
30957: LD_VAR 0 1
30961: PPUSH
30962: LD_VAR 0 2
30966: PUSH
30967: LD_INT 1
30969: ARRAY
30970: PPUSH
30971: LD_VAR 0 3
30975: PPUSH
30976: CALL_OW 1
30980: ST_TO_ADDR
30981: GO 31245
// begin tmp := arr ;
30983: LD_ADDR_VAR 0 6
30987: PUSH
30988: LD_VAR 0 1
30992: ST_TO_ADDR
// s_arr := [ tmp ] ;
30993: LD_ADDR_VAR 0 7
30997: PUSH
30998: LD_VAR 0 6
31002: PUSH
31003: EMPTY
31004: LIST
31005: ST_TO_ADDR
// for i = 1 to pos - 1 do
31006: LD_ADDR_VAR 0 5
31010: PUSH
31011: DOUBLE
31012: LD_INT 1
31014: DEC
31015: ST_TO_ADDR
31016: LD_VAR 0 2
31020: PUSH
31021: LD_INT 1
31023: MINUS
31024: PUSH
31025: FOR_TO
31026: IFFALSE 31071
// begin tmp := tmp [ pos [ i ] ] ;
31028: LD_ADDR_VAR 0 6
31032: PUSH
31033: LD_VAR 0 6
31037: PUSH
31038: LD_VAR 0 2
31042: PUSH
31043: LD_VAR 0 5
31047: ARRAY
31048: ARRAY
31049: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
31050: LD_ADDR_VAR 0 7
31054: PUSH
31055: LD_VAR 0 7
31059: PUSH
31060: LD_VAR 0 6
31064: PUSH
31065: EMPTY
31066: LIST
31067: ADD
31068: ST_TO_ADDR
// end ;
31069: GO 31025
31071: POP
31072: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
31073: LD_ADDR_VAR 0 6
31077: PUSH
31078: LD_VAR 0 6
31082: PPUSH
31083: LD_VAR 0 2
31087: PUSH
31088: LD_VAR 0 2
31092: ARRAY
31093: PPUSH
31094: LD_VAR 0 3
31098: PPUSH
31099: CALL_OW 1
31103: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
31104: LD_ADDR_VAR 0 7
31108: PUSH
31109: LD_VAR 0 7
31113: PPUSH
31114: LD_VAR 0 7
31118: PPUSH
31119: LD_VAR 0 6
31123: PPUSH
31124: CALL_OW 1
31128: ST_TO_ADDR
// for i = s_arr downto 2 do
31129: LD_ADDR_VAR 0 5
31133: PUSH
31134: DOUBLE
31135: LD_VAR 0 7
31139: INC
31140: ST_TO_ADDR
31141: LD_INT 2
31143: PUSH
31144: FOR_DOWNTO
31145: IFFALSE 31229
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
31147: LD_ADDR_VAR 0 6
31151: PUSH
31152: LD_VAR 0 7
31156: PUSH
31157: LD_VAR 0 5
31161: PUSH
31162: LD_INT 1
31164: MINUS
31165: ARRAY
31166: PPUSH
31167: LD_VAR 0 2
31171: PUSH
31172: LD_VAR 0 5
31176: PUSH
31177: LD_INT 1
31179: MINUS
31180: ARRAY
31181: PPUSH
31182: LD_VAR 0 7
31186: PUSH
31187: LD_VAR 0 5
31191: ARRAY
31192: PPUSH
31193: CALL_OW 1
31197: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
31198: LD_ADDR_VAR 0 7
31202: PUSH
31203: LD_VAR 0 7
31207: PPUSH
31208: LD_VAR 0 5
31212: PUSH
31213: LD_INT 1
31215: MINUS
31216: PPUSH
31217: LD_VAR 0 6
31221: PPUSH
31222: CALL_OW 1
31226: ST_TO_ADDR
// end ;
31227: GO 31144
31229: POP
31230: POP
// result := s_arr [ 1 ] ;
31231: LD_ADDR_VAR 0 4
31235: PUSH
31236: LD_VAR 0 7
31240: PUSH
31241: LD_INT 1
31243: ARRAY
31244: ST_TO_ADDR
// end ; end ;
31245: LD_VAR 0 4
31249: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
31250: LD_INT 0
31252: PPUSH
31253: PPUSH
// if not list then
31254: LD_VAR 0 1
31258: NOT
31259: IFFALSE 31263
// exit ;
31261: GO 31354
// i := list [ pos1 ] ;
31263: LD_ADDR_VAR 0 5
31267: PUSH
31268: LD_VAR 0 1
31272: PUSH
31273: LD_VAR 0 2
31277: ARRAY
31278: ST_TO_ADDR
// if not i then
31279: LD_VAR 0 5
31283: NOT
31284: IFFALSE 31288
// exit ;
31286: GO 31354
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
31288: LD_ADDR_VAR 0 1
31292: PUSH
31293: LD_VAR 0 1
31297: PPUSH
31298: LD_VAR 0 2
31302: PPUSH
31303: LD_VAR 0 1
31307: PUSH
31308: LD_VAR 0 3
31312: ARRAY
31313: PPUSH
31314: CALL_OW 1
31318: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
31319: LD_ADDR_VAR 0 1
31323: PUSH
31324: LD_VAR 0 1
31328: PPUSH
31329: LD_VAR 0 3
31333: PPUSH
31334: LD_VAR 0 5
31338: PPUSH
31339: CALL_OW 1
31343: ST_TO_ADDR
// result := list ;
31344: LD_ADDR_VAR 0 4
31348: PUSH
31349: LD_VAR 0 1
31353: ST_TO_ADDR
// end ;
31354: LD_VAR 0 4
31358: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
31359: LD_INT 0
31361: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
31362: LD_ADDR_VAR 0 5
31366: PUSH
31367: LD_VAR 0 1
31371: PPUSH
31372: CALL_OW 250
31376: PPUSH
31377: LD_VAR 0 1
31381: PPUSH
31382: CALL_OW 251
31386: PPUSH
31387: LD_VAR 0 2
31391: PPUSH
31392: LD_VAR 0 3
31396: PPUSH
31397: LD_VAR 0 4
31401: PPUSH
31402: CALL 31412 0 5
31406: ST_TO_ADDR
// end ;
31407: LD_VAR 0 5
31411: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
31412: LD_INT 0
31414: PPUSH
31415: PPUSH
31416: PPUSH
31417: PPUSH
// if not list then
31418: LD_VAR 0 3
31422: NOT
31423: IFFALSE 31427
// exit ;
31425: GO 31815
// result := [ ] ;
31427: LD_ADDR_VAR 0 6
31431: PUSH
31432: EMPTY
31433: ST_TO_ADDR
// for i in list do
31434: LD_ADDR_VAR 0 7
31438: PUSH
31439: LD_VAR 0 3
31443: PUSH
31444: FOR_IN
31445: IFFALSE 31647
// begin tmp := GetDistUnitXY ( i , x , y ) ;
31447: LD_ADDR_VAR 0 9
31451: PUSH
31452: LD_VAR 0 7
31456: PPUSH
31457: LD_VAR 0 1
31461: PPUSH
31462: LD_VAR 0 2
31466: PPUSH
31467: CALL_OW 297
31471: ST_TO_ADDR
// if not result then
31472: LD_VAR 0 6
31476: NOT
31477: IFFALSE 31503
// result := [ [ i , tmp ] ] else
31479: LD_ADDR_VAR 0 6
31483: PUSH
31484: LD_VAR 0 7
31488: PUSH
31489: LD_VAR 0 9
31493: PUSH
31494: EMPTY
31495: LIST
31496: LIST
31497: PUSH
31498: EMPTY
31499: LIST
31500: ST_TO_ADDR
31501: GO 31645
// begin if result [ result ] [ 2 ] < tmp then
31503: LD_VAR 0 6
31507: PUSH
31508: LD_VAR 0 6
31512: ARRAY
31513: PUSH
31514: LD_INT 2
31516: ARRAY
31517: PUSH
31518: LD_VAR 0 9
31522: LESS
31523: IFFALSE 31565
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
31525: LD_ADDR_VAR 0 6
31529: PUSH
31530: LD_VAR 0 6
31534: PPUSH
31535: LD_VAR 0 6
31539: PUSH
31540: LD_INT 1
31542: PLUS
31543: PPUSH
31544: LD_VAR 0 7
31548: PUSH
31549: LD_VAR 0 9
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: PPUSH
31558: CALL_OW 2
31562: ST_TO_ADDR
31563: GO 31645
// for j = 1 to result do
31565: LD_ADDR_VAR 0 8
31569: PUSH
31570: DOUBLE
31571: LD_INT 1
31573: DEC
31574: ST_TO_ADDR
31575: LD_VAR 0 6
31579: PUSH
31580: FOR_TO
31581: IFFALSE 31643
// begin if tmp < result [ j ] [ 2 ] then
31583: LD_VAR 0 9
31587: PUSH
31588: LD_VAR 0 6
31592: PUSH
31593: LD_VAR 0 8
31597: ARRAY
31598: PUSH
31599: LD_INT 2
31601: ARRAY
31602: LESS
31603: IFFALSE 31641
// begin result := Insert ( result , j , [ i , tmp ] ) ;
31605: LD_ADDR_VAR 0 6
31609: PUSH
31610: LD_VAR 0 6
31614: PPUSH
31615: LD_VAR 0 8
31619: PPUSH
31620: LD_VAR 0 7
31624: PUSH
31625: LD_VAR 0 9
31629: PUSH
31630: EMPTY
31631: LIST
31632: LIST
31633: PPUSH
31634: CALL_OW 2
31638: ST_TO_ADDR
// break ;
31639: GO 31643
// end ; end ;
31641: GO 31580
31643: POP
31644: POP
// end ; end ;
31645: GO 31444
31647: POP
31648: POP
// if result and not asc then
31649: LD_VAR 0 6
31653: PUSH
31654: LD_VAR 0 4
31658: NOT
31659: AND
31660: IFFALSE 31735
// begin tmp := result ;
31662: LD_ADDR_VAR 0 9
31666: PUSH
31667: LD_VAR 0 6
31671: ST_TO_ADDR
// for i = tmp downto 1 do
31672: LD_ADDR_VAR 0 7
31676: PUSH
31677: DOUBLE
31678: LD_VAR 0 9
31682: INC
31683: ST_TO_ADDR
31684: LD_INT 1
31686: PUSH
31687: FOR_DOWNTO
31688: IFFALSE 31733
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
31690: LD_ADDR_VAR 0 6
31694: PUSH
31695: LD_VAR 0 6
31699: PPUSH
31700: LD_VAR 0 9
31704: PUSH
31705: LD_VAR 0 7
31709: MINUS
31710: PUSH
31711: LD_INT 1
31713: PLUS
31714: PPUSH
31715: LD_VAR 0 9
31719: PUSH
31720: LD_VAR 0 7
31724: ARRAY
31725: PPUSH
31726: CALL_OW 1
31730: ST_TO_ADDR
31731: GO 31687
31733: POP
31734: POP
// end ; tmp := [ ] ;
31735: LD_ADDR_VAR 0 9
31739: PUSH
31740: EMPTY
31741: ST_TO_ADDR
// if mode then
31742: LD_VAR 0 5
31746: IFFALSE 31815
// begin for i = 1 to result do
31748: LD_ADDR_VAR 0 7
31752: PUSH
31753: DOUBLE
31754: LD_INT 1
31756: DEC
31757: ST_TO_ADDR
31758: LD_VAR 0 6
31762: PUSH
31763: FOR_TO
31764: IFFALSE 31803
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
31766: LD_ADDR_VAR 0 9
31770: PUSH
31771: LD_VAR 0 9
31775: PPUSH
31776: LD_VAR 0 7
31780: PPUSH
31781: LD_VAR 0 6
31785: PUSH
31786: LD_VAR 0 7
31790: ARRAY
31791: PUSH
31792: LD_INT 1
31794: ARRAY
31795: PPUSH
31796: CALL_OW 1
31800: ST_TO_ADDR
31801: GO 31763
31803: POP
31804: POP
// result := tmp ;
31805: LD_ADDR_VAR 0 6
31809: PUSH
31810: LD_VAR 0 9
31814: ST_TO_ADDR
// end ; end ;
31815: LD_VAR 0 6
31819: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
31820: LD_INT 0
31822: PPUSH
31823: PPUSH
31824: PPUSH
31825: PPUSH
31826: PPUSH
31827: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
31828: LD_ADDR_VAR 0 5
31832: PUSH
31833: LD_INT 0
31835: PUSH
31836: LD_INT 0
31838: PUSH
31839: LD_INT 0
31841: PUSH
31842: EMPTY
31843: PUSH
31844: EMPTY
31845: LIST
31846: LIST
31847: LIST
31848: LIST
31849: ST_TO_ADDR
// if not x or not y then
31850: LD_VAR 0 2
31854: NOT
31855: PUSH
31856: LD_VAR 0 3
31860: NOT
31861: OR
31862: IFFALSE 31866
// exit ;
31864: GO 33516
// if not range then
31866: LD_VAR 0 4
31870: NOT
31871: IFFALSE 31881
// range := 10 ;
31873: LD_ADDR_VAR 0 4
31877: PUSH
31878: LD_INT 10
31880: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31881: LD_ADDR_VAR 0 8
31885: PUSH
31886: LD_INT 81
31888: PUSH
31889: LD_VAR 0 1
31893: PUSH
31894: EMPTY
31895: LIST
31896: LIST
31897: PUSH
31898: LD_INT 92
31900: PUSH
31901: LD_VAR 0 2
31905: PUSH
31906: LD_VAR 0 3
31910: PUSH
31911: LD_VAR 0 4
31915: PUSH
31916: EMPTY
31917: LIST
31918: LIST
31919: LIST
31920: LIST
31921: PUSH
31922: LD_INT 3
31924: PUSH
31925: LD_INT 21
31927: PUSH
31928: LD_INT 3
31930: PUSH
31931: EMPTY
31932: LIST
31933: LIST
31934: PUSH
31935: EMPTY
31936: LIST
31937: LIST
31938: PUSH
31939: EMPTY
31940: LIST
31941: LIST
31942: LIST
31943: PPUSH
31944: CALL_OW 69
31948: ST_TO_ADDR
// if not tmp then
31949: LD_VAR 0 8
31953: NOT
31954: IFFALSE 31958
// exit ;
31956: GO 33516
// for i in tmp do
31958: LD_ADDR_VAR 0 6
31962: PUSH
31963: LD_VAR 0 8
31967: PUSH
31968: FOR_IN
31969: IFFALSE 33491
// begin points := [ 0 , 0 , 0 ] ;
31971: LD_ADDR_VAR 0 9
31975: PUSH
31976: LD_INT 0
31978: PUSH
31979: LD_INT 0
31981: PUSH
31982: LD_INT 0
31984: PUSH
31985: EMPTY
31986: LIST
31987: LIST
31988: LIST
31989: ST_TO_ADDR
// bpoints := 1 ;
31990: LD_ADDR_VAR 0 10
31994: PUSH
31995: LD_INT 1
31997: ST_TO_ADDR
// case GetType ( i ) of unit_human :
31998: LD_VAR 0 6
32002: PPUSH
32003: CALL_OW 247
32007: PUSH
32008: LD_INT 1
32010: DOUBLE
32011: EQUAL
32012: IFTRUE 32016
32014: GO 32594
32016: POP
// begin if GetClass ( i ) = 1 then
32017: LD_VAR 0 6
32021: PPUSH
32022: CALL_OW 257
32026: PUSH
32027: LD_INT 1
32029: EQUAL
32030: IFFALSE 32051
// points := [ 10 , 5 , 3 ] ;
32032: LD_ADDR_VAR 0 9
32036: PUSH
32037: LD_INT 10
32039: PUSH
32040: LD_INT 5
32042: PUSH
32043: LD_INT 3
32045: PUSH
32046: EMPTY
32047: LIST
32048: LIST
32049: LIST
32050: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
32051: LD_VAR 0 6
32055: PPUSH
32056: CALL_OW 257
32060: PUSH
32061: LD_INT 2
32063: PUSH
32064: LD_INT 3
32066: PUSH
32067: LD_INT 4
32069: PUSH
32070: EMPTY
32071: LIST
32072: LIST
32073: LIST
32074: IN
32075: IFFALSE 32096
// points := [ 3 , 2 , 1 ] ;
32077: LD_ADDR_VAR 0 9
32081: PUSH
32082: LD_INT 3
32084: PUSH
32085: LD_INT 2
32087: PUSH
32088: LD_INT 1
32090: PUSH
32091: EMPTY
32092: LIST
32093: LIST
32094: LIST
32095: ST_TO_ADDR
// if GetClass ( i ) = 5 then
32096: LD_VAR 0 6
32100: PPUSH
32101: CALL_OW 257
32105: PUSH
32106: LD_INT 5
32108: EQUAL
32109: IFFALSE 32130
// points := [ 130 , 5 , 2 ] ;
32111: LD_ADDR_VAR 0 9
32115: PUSH
32116: LD_INT 130
32118: PUSH
32119: LD_INT 5
32121: PUSH
32122: LD_INT 2
32124: PUSH
32125: EMPTY
32126: LIST
32127: LIST
32128: LIST
32129: ST_TO_ADDR
// if GetClass ( i ) = 8 then
32130: LD_VAR 0 6
32134: PPUSH
32135: CALL_OW 257
32139: PUSH
32140: LD_INT 8
32142: EQUAL
32143: IFFALSE 32164
// points := [ 35 , 35 , 30 ] ;
32145: LD_ADDR_VAR 0 9
32149: PUSH
32150: LD_INT 35
32152: PUSH
32153: LD_INT 35
32155: PUSH
32156: LD_INT 30
32158: PUSH
32159: EMPTY
32160: LIST
32161: LIST
32162: LIST
32163: ST_TO_ADDR
// if GetClass ( i ) = 9 then
32164: LD_VAR 0 6
32168: PPUSH
32169: CALL_OW 257
32173: PUSH
32174: LD_INT 9
32176: EQUAL
32177: IFFALSE 32198
// points := [ 20 , 55 , 40 ] ;
32179: LD_ADDR_VAR 0 9
32183: PUSH
32184: LD_INT 20
32186: PUSH
32187: LD_INT 55
32189: PUSH
32190: LD_INT 40
32192: PUSH
32193: EMPTY
32194: LIST
32195: LIST
32196: LIST
32197: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
32198: LD_VAR 0 6
32202: PPUSH
32203: CALL_OW 257
32207: PUSH
32208: LD_INT 12
32210: PUSH
32211: LD_INT 16
32213: PUSH
32214: EMPTY
32215: LIST
32216: LIST
32217: IN
32218: IFFALSE 32239
// points := [ 5 , 3 , 2 ] ;
32220: LD_ADDR_VAR 0 9
32224: PUSH
32225: LD_INT 5
32227: PUSH
32228: LD_INT 3
32230: PUSH
32231: LD_INT 2
32233: PUSH
32234: EMPTY
32235: LIST
32236: LIST
32237: LIST
32238: ST_TO_ADDR
// if GetClass ( i ) = 17 then
32239: LD_VAR 0 6
32243: PPUSH
32244: CALL_OW 257
32248: PUSH
32249: LD_INT 17
32251: EQUAL
32252: IFFALSE 32273
// points := [ 100 , 50 , 75 ] ;
32254: LD_ADDR_VAR 0 9
32258: PUSH
32259: LD_INT 100
32261: PUSH
32262: LD_INT 50
32264: PUSH
32265: LD_INT 75
32267: PUSH
32268: EMPTY
32269: LIST
32270: LIST
32271: LIST
32272: ST_TO_ADDR
// if GetClass ( i ) = 15 then
32273: LD_VAR 0 6
32277: PPUSH
32278: CALL_OW 257
32282: PUSH
32283: LD_INT 15
32285: EQUAL
32286: IFFALSE 32307
// points := [ 10 , 5 , 3 ] ;
32288: LD_ADDR_VAR 0 9
32292: PUSH
32293: LD_INT 10
32295: PUSH
32296: LD_INT 5
32298: PUSH
32299: LD_INT 3
32301: PUSH
32302: EMPTY
32303: LIST
32304: LIST
32305: LIST
32306: ST_TO_ADDR
// if GetClass ( i ) = 14 then
32307: LD_VAR 0 6
32311: PPUSH
32312: CALL_OW 257
32316: PUSH
32317: LD_INT 14
32319: EQUAL
32320: IFFALSE 32341
// points := [ 10 , 0 , 0 ] ;
32322: LD_ADDR_VAR 0 9
32326: PUSH
32327: LD_INT 10
32329: PUSH
32330: LD_INT 0
32332: PUSH
32333: LD_INT 0
32335: PUSH
32336: EMPTY
32337: LIST
32338: LIST
32339: LIST
32340: ST_TO_ADDR
// if GetClass ( i ) = 11 then
32341: LD_VAR 0 6
32345: PPUSH
32346: CALL_OW 257
32350: PUSH
32351: LD_INT 11
32353: EQUAL
32354: IFFALSE 32375
// points := [ 30 , 10 , 5 ] ;
32356: LD_ADDR_VAR 0 9
32360: PUSH
32361: LD_INT 30
32363: PUSH
32364: LD_INT 10
32366: PUSH
32367: LD_INT 5
32369: PUSH
32370: EMPTY
32371: LIST
32372: LIST
32373: LIST
32374: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
32375: LD_VAR 0 1
32379: PPUSH
32380: LD_INT 5
32382: PPUSH
32383: CALL_OW 321
32387: PUSH
32388: LD_INT 2
32390: EQUAL
32391: IFFALSE 32408
// bpoints := bpoints * 1.8 ;
32393: LD_ADDR_VAR 0 10
32397: PUSH
32398: LD_VAR 0 10
32402: PUSH
32403: LD_REAL  1.80000000000000E+0000
32406: MUL
32407: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
32408: LD_VAR 0 6
32412: PPUSH
32413: CALL_OW 257
32417: PUSH
32418: LD_INT 1
32420: PUSH
32421: LD_INT 2
32423: PUSH
32424: LD_INT 3
32426: PUSH
32427: LD_INT 4
32429: PUSH
32430: EMPTY
32431: LIST
32432: LIST
32433: LIST
32434: LIST
32435: IN
32436: PUSH
32437: LD_VAR 0 1
32441: PPUSH
32442: LD_INT 51
32444: PPUSH
32445: CALL_OW 321
32449: PUSH
32450: LD_INT 2
32452: EQUAL
32453: AND
32454: IFFALSE 32471
// bpoints := bpoints * 1.2 ;
32456: LD_ADDR_VAR 0 10
32460: PUSH
32461: LD_VAR 0 10
32465: PUSH
32466: LD_REAL  1.20000000000000E+0000
32469: MUL
32470: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
32471: LD_VAR 0 6
32475: PPUSH
32476: CALL_OW 257
32480: PUSH
32481: LD_INT 5
32483: PUSH
32484: LD_INT 7
32486: PUSH
32487: LD_INT 9
32489: PUSH
32490: EMPTY
32491: LIST
32492: LIST
32493: LIST
32494: IN
32495: PUSH
32496: LD_VAR 0 1
32500: PPUSH
32501: LD_INT 52
32503: PPUSH
32504: CALL_OW 321
32508: PUSH
32509: LD_INT 2
32511: EQUAL
32512: AND
32513: IFFALSE 32530
// bpoints := bpoints * 1.5 ;
32515: LD_ADDR_VAR 0 10
32519: PUSH
32520: LD_VAR 0 10
32524: PUSH
32525: LD_REAL  1.50000000000000E+0000
32528: MUL
32529: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
32530: LD_VAR 0 1
32534: PPUSH
32535: LD_INT 66
32537: PPUSH
32538: CALL_OW 321
32542: PUSH
32543: LD_INT 2
32545: EQUAL
32546: IFFALSE 32563
// bpoints := bpoints * 1.1 ;
32548: LD_ADDR_VAR 0 10
32552: PUSH
32553: LD_VAR 0 10
32557: PUSH
32558: LD_REAL  1.10000000000000E+0000
32561: MUL
32562: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
32563: LD_ADDR_VAR 0 10
32567: PUSH
32568: LD_VAR 0 10
32572: PUSH
32573: LD_VAR 0 6
32577: PPUSH
32578: LD_INT 1
32580: PPUSH
32581: CALL_OW 259
32585: PUSH
32586: LD_REAL  1.15000000000000E+0000
32589: MUL
32590: MUL
32591: ST_TO_ADDR
// end ; unit_vehicle :
32592: GO 33420
32594: LD_INT 2
32596: DOUBLE
32597: EQUAL
32598: IFTRUE 32602
32600: GO 33408
32602: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
32603: LD_VAR 0 6
32607: PPUSH
32608: CALL_OW 264
32612: PUSH
32613: LD_INT 2
32615: PUSH
32616: LD_INT 42
32618: PUSH
32619: LD_INT 24
32621: PUSH
32622: EMPTY
32623: LIST
32624: LIST
32625: LIST
32626: IN
32627: IFFALSE 32648
// points := [ 25 , 5 , 3 ] ;
32629: LD_ADDR_VAR 0 9
32633: PUSH
32634: LD_INT 25
32636: PUSH
32637: LD_INT 5
32639: PUSH
32640: LD_INT 3
32642: PUSH
32643: EMPTY
32644: LIST
32645: LIST
32646: LIST
32647: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
32648: LD_VAR 0 6
32652: PPUSH
32653: CALL_OW 264
32657: PUSH
32658: LD_INT 4
32660: PUSH
32661: LD_INT 43
32663: PUSH
32664: LD_INT 25
32666: PUSH
32667: EMPTY
32668: LIST
32669: LIST
32670: LIST
32671: IN
32672: IFFALSE 32693
// points := [ 40 , 15 , 5 ] ;
32674: LD_ADDR_VAR 0 9
32678: PUSH
32679: LD_INT 40
32681: PUSH
32682: LD_INT 15
32684: PUSH
32685: LD_INT 5
32687: PUSH
32688: EMPTY
32689: LIST
32690: LIST
32691: LIST
32692: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
32693: LD_VAR 0 6
32697: PPUSH
32698: CALL_OW 264
32702: PUSH
32703: LD_INT 3
32705: PUSH
32706: LD_INT 23
32708: PUSH
32709: EMPTY
32710: LIST
32711: LIST
32712: IN
32713: IFFALSE 32734
// points := [ 7 , 25 , 8 ] ;
32715: LD_ADDR_VAR 0 9
32719: PUSH
32720: LD_INT 7
32722: PUSH
32723: LD_INT 25
32725: PUSH
32726: LD_INT 8
32728: PUSH
32729: EMPTY
32730: LIST
32731: LIST
32732: LIST
32733: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
32734: LD_VAR 0 6
32738: PPUSH
32739: CALL_OW 264
32743: PUSH
32744: LD_INT 5
32746: PUSH
32747: LD_INT 27
32749: PUSH
32750: LD_INT 44
32752: PUSH
32753: EMPTY
32754: LIST
32755: LIST
32756: LIST
32757: IN
32758: IFFALSE 32779
// points := [ 14 , 50 , 16 ] ;
32760: LD_ADDR_VAR 0 9
32764: PUSH
32765: LD_INT 14
32767: PUSH
32768: LD_INT 50
32770: PUSH
32771: LD_INT 16
32773: PUSH
32774: EMPTY
32775: LIST
32776: LIST
32777: LIST
32778: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
32779: LD_VAR 0 6
32783: PPUSH
32784: CALL_OW 264
32788: PUSH
32789: LD_INT 6
32791: PUSH
32792: LD_INT 46
32794: PUSH
32795: EMPTY
32796: LIST
32797: LIST
32798: IN
32799: IFFALSE 32820
// points := [ 32 , 120 , 70 ] ;
32801: LD_ADDR_VAR 0 9
32805: PUSH
32806: LD_INT 32
32808: PUSH
32809: LD_INT 120
32811: PUSH
32812: LD_INT 70
32814: PUSH
32815: EMPTY
32816: LIST
32817: LIST
32818: LIST
32819: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
32820: LD_VAR 0 6
32824: PPUSH
32825: CALL_OW 264
32829: PUSH
32830: LD_INT 7
32832: PUSH
32833: LD_INT 28
32835: PUSH
32836: LD_INT 45
32838: PUSH
32839: LD_INT 92
32841: PUSH
32842: EMPTY
32843: LIST
32844: LIST
32845: LIST
32846: LIST
32847: IN
32848: IFFALSE 32869
// points := [ 35 , 20 , 45 ] ;
32850: LD_ADDR_VAR 0 9
32854: PUSH
32855: LD_INT 35
32857: PUSH
32858: LD_INT 20
32860: PUSH
32861: LD_INT 45
32863: PUSH
32864: EMPTY
32865: LIST
32866: LIST
32867: LIST
32868: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
32869: LD_VAR 0 6
32873: PPUSH
32874: CALL_OW 264
32878: PUSH
32879: LD_INT 47
32881: PUSH
32882: EMPTY
32883: LIST
32884: IN
32885: IFFALSE 32906
// points := [ 67 , 45 , 75 ] ;
32887: LD_ADDR_VAR 0 9
32891: PUSH
32892: LD_INT 67
32894: PUSH
32895: LD_INT 45
32897: PUSH
32898: LD_INT 75
32900: PUSH
32901: EMPTY
32902: LIST
32903: LIST
32904: LIST
32905: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
32906: LD_VAR 0 6
32910: PPUSH
32911: CALL_OW 264
32915: PUSH
32916: LD_INT 26
32918: PUSH
32919: EMPTY
32920: LIST
32921: IN
32922: IFFALSE 32943
// points := [ 120 , 30 , 80 ] ;
32924: LD_ADDR_VAR 0 9
32928: PUSH
32929: LD_INT 120
32931: PUSH
32932: LD_INT 30
32934: PUSH
32935: LD_INT 80
32937: PUSH
32938: EMPTY
32939: LIST
32940: LIST
32941: LIST
32942: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
32943: LD_VAR 0 6
32947: PPUSH
32948: CALL_OW 264
32952: PUSH
32953: LD_INT 22
32955: PUSH
32956: EMPTY
32957: LIST
32958: IN
32959: IFFALSE 32980
// points := [ 40 , 1 , 1 ] ;
32961: LD_ADDR_VAR 0 9
32965: PUSH
32966: LD_INT 40
32968: PUSH
32969: LD_INT 1
32971: PUSH
32972: LD_INT 1
32974: PUSH
32975: EMPTY
32976: LIST
32977: LIST
32978: LIST
32979: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
32980: LD_VAR 0 6
32984: PPUSH
32985: CALL_OW 264
32989: PUSH
32990: LD_INT 29
32992: PUSH
32993: EMPTY
32994: LIST
32995: IN
32996: IFFALSE 33017
// points := [ 70 , 200 , 400 ] ;
32998: LD_ADDR_VAR 0 9
33002: PUSH
33003: LD_INT 70
33005: PUSH
33006: LD_INT 200
33008: PUSH
33009: LD_INT 400
33011: PUSH
33012: EMPTY
33013: LIST
33014: LIST
33015: LIST
33016: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
33017: LD_VAR 0 6
33021: PPUSH
33022: CALL_OW 264
33026: PUSH
33027: LD_INT 14
33029: PUSH
33030: LD_INT 53
33032: PUSH
33033: EMPTY
33034: LIST
33035: LIST
33036: IN
33037: IFFALSE 33058
// points := [ 40 , 10 , 20 ] ;
33039: LD_ADDR_VAR 0 9
33043: PUSH
33044: LD_INT 40
33046: PUSH
33047: LD_INT 10
33049: PUSH
33050: LD_INT 20
33052: PUSH
33053: EMPTY
33054: LIST
33055: LIST
33056: LIST
33057: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
33058: LD_VAR 0 6
33062: PPUSH
33063: CALL_OW 264
33067: PUSH
33068: LD_INT 9
33070: PUSH
33071: EMPTY
33072: LIST
33073: IN
33074: IFFALSE 33095
// points := [ 5 , 70 , 20 ] ;
33076: LD_ADDR_VAR 0 9
33080: PUSH
33081: LD_INT 5
33083: PUSH
33084: LD_INT 70
33086: PUSH
33087: LD_INT 20
33089: PUSH
33090: EMPTY
33091: LIST
33092: LIST
33093: LIST
33094: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
33095: LD_VAR 0 6
33099: PPUSH
33100: CALL_OW 264
33104: PUSH
33105: LD_INT 10
33107: PUSH
33108: EMPTY
33109: LIST
33110: IN
33111: IFFALSE 33132
// points := [ 35 , 110 , 70 ] ;
33113: LD_ADDR_VAR 0 9
33117: PUSH
33118: LD_INT 35
33120: PUSH
33121: LD_INT 110
33123: PUSH
33124: LD_INT 70
33126: PUSH
33127: EMPTY
33128: LIST
33129: LIST
33130: LIST
33131: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
33132: LD_VAR 0 6
33136: PPUSH
33137: CALL_OW 265
33141: PUSH
33142: LD_INT 25
33144: EQUAL
33145: IFFALSE 33166
// points := [ 80 , 65 , 100 ] ;
33147: LD_ADDR_VAR 0 9
33151: PUSH
33152: LD_INT 80
33154: PUSH
33155: LD_INT 65
33157: PUSH
33158: LD_INT 100
33160: PUSH
33161: EMPTY
33162: LIST
33163: LIST
33164: LIST
33165: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
33166: LD_VAR 0 6
33170: PPUSH
33171: CALL_OW 263
33175: PUSH
33176: LD_INT 1
33178: EQUAL
33179: IFFALSE 33214
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
33181: LD_ADDR_VAR 0 10
33185: PUSH
33186: LD_VAR 0 10
33190: PUSH
33191: LD_VAR 0 6
33195: PPUSH
33196: CALL_OW 311
33200: PPUSH
33201: LD_INT 3
33203: PPUSH
33204: CALL_OW 259
33208: PUSH
33209: LD_INT 4
33211: MUL
33212: MUL
33213: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
33214: LD_VAR 0 6
33218: PPUSH
33219: CALL_OW 263
33223: PUSH
33224: LD_INT 2
33226: EQUAL
33227: IFFALSE 33278
// begin j := IsControledBy ( i ) ;
33229: LD_ADDR_VAR 0 7
33233: PUSH
33234: LD_VAR 0 6
33238: PPUSH
33239: CALL_OW 312
33243: ST_TO_ADDR
// if j then
33244: LD_VAR 0 7
33248: IFFALSE 33278
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
33250: LD_ADDR_VAR 0 10
33254: PUSH
33255: LD_VAR 0 10
33259: PUSH
33260: LD_VAR 0 7
33264: PPUSH
33265: LD_INT 3
33267: PPUSH
33268: CALL_OW 259
33272: PUSH
33273: LD_INT 3
33275: MUL
33276: MUL
33277: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
33278: LD_VAR 0 6
33282: PPUSH
33283: CALL_OW 264
33287: PUSH
33288: LD_INT 5
33290: PUSH
33291: LD_INT 6
33293: PUSH
33294: LD_INT 46
33296: PUSH
33297: LD_INT 44
33299: PUSH
33300: LD_INT 47
33302: PUSH
33303: LD_INT 45
33305: PUSH
33306: LD_INT 28
33308: PUSH
33309: LD_INT 7
33311: PUSH
33312: LD_INT 27
33314: PUSH
33315: LD_INT 29
33317: PUSH
33318: EMPTY
33319: LIST
33320: LIST
33321: LIST
33322: LIST
33323: LIST
33324: LIST
33325: LIST
33326: LIST
33327: LIST
33328: LIST
33329: IN
33330: PUSH
33331: LD_VAR 0 1
33335: PPUSH
33336: LD_INT 52
33338: PPUSH
33339: CALL_OW 321
33343: PUSH
33344: LD_INT 2
33346: EQUAL
33347: AND
33348: IFFALSE 33365
// bpoints := bpoints * 1.2 ;
33350: LD_ADDR_VAR 0 10
33354: PUSH
33355: LD_VAR 0 10
33359: PUSH
33360: LD_REAL  1.20000000000000E+0000
33363: MUL
33364: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
33365: LD_VAR 0 6
33369: PPUSH
33370: CALL_OW 264
33374: PUSH
33375: LD_INT 6
33377: PUSH
33378: LD_INT 46
33380: PUSH
33381: LD_INT 47
33383: PUSH
33384: EMPTY
33385: LIST
33386: LIST
33387: LIST
33388: IN
33389: IFFALSE 33406
// bpoints := bpoints * 1.2 ;
33391: LD_ADDR_VAR 0 10
33395: PUSH
33396: LD_VAR 0 10
33400: PUSH
33401: LD_REAL  1.20000000000000E+0000
33404: MUL
33405: ST_TO_ADDR
// end ; unit_building :
33406: GO 33420
33408: LD_INT 3
33410: DOUBLE
33411: EQUAL
33412: IFTRUE 33416
33414: GO 33419
33416: POP
// ; end ;
33417: GO 33420
33419: POP
// for j = 1 to 3 do
33420: LD_ADDR_VAR 0 7
33424: PUSH
33425: DOUBLE
33426: LD_INT 1
33428: DEC
33429: ST_TO_ADDR
33430: LD_INT 3
33432: PUSH
33433: FOR_TO
33434: IFFALSE 33487
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
33436: LD_ADDR_VAR 0 5
33440: PUSH
33441: LD_VAR 0 5
33445: PPUSH
33446: LD_VAR 0 7
33450: PPUSH
33451: LD_VAR 0 5
33455: PUSH
33456: LD_VAR 0 7
33460: ARRAY
33461: PUSH
33462: LD_VAR 0 9
33466: PUSH
33467: LD_VAR 0 7
33471: ARRAY
33472: PUSH
33473: LD_VAR 0 10
33477: MUL
33478: PLUS
33479: PPUSH
33480: CALL_OW 1
33484: ST_TO_ADDR
33485: GO 33433
33487: POP
33488: POP
// end ;
33489: GO 31968
33491: POP
33492: POP
// result := Replace ( result , 4 , tmp ) ;
33493: LD_ADDR_VAR 0 5
33497: PUSH
33498: LD_VAR 0 5
33502: PPUSH
33503: LD_INT 4
33505: PPUSH
33506: LD_VAR 0 8
33510: PPUSH
33511: CALL_OW 1
33515: ST_TO_ADDR
// end ;
33516: LD_VAR 0 5
33520: RET
// export function DangerAtRange ( unit , range ) ; begin
33521: LD_INT 0
33523: PPUSH
// if not unit then
33524: LD_VAR 0 1
33528: NOT
33529: IFFALSE 33533
// exit ;
33531: GO 33578
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
33533: LD_ADDR_VAR 0 3
33537: PUSH
33538: LD_VAR 0 1
33542: PPUSH
33543: CALL_OW 255
33547: PPUSH
33548: LD_VAR 0 1
33552: PPUSH
33553: CALL_OW 250
33557: PPUSH
33558: LD_VAR 0 1
33562: PPUSH
33563: CALL_OW 251
33567: PPUSH
33568: LD_VAR 0 2
33572: PPUSH
33573: CALL 31820 0 4
33577: ST_TO_ADDR
// end ;
33578: LD_VAR 0 3
33582: RET
// export function DangerInArea ( side , area ) ; begin
33583: LD_INT 0
33585: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
33586: LD_ADDR_VAR 0 3
33590: PUSH
33591: LD_VAR 0 2
33595: PPUSH
33596: LD_INT 81
33598: PUSH
33599: LD_VAR 0 1
33603: PUSH
33604: EMPTY
33605: LIST
33606: LIST
33607: PPUSH
33608: CALL_OW 70
33612: ST_TO_ADDR
// end ;
33613: LD_VAR 0 3
33617: RET
// export function IsExtension ( b ) ; begin
33618: LD_INT 0
33620: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
33621: LD_ADDR_VAR 0 2
33625: PUSH
33626: LD_VAR 0 1
33630: PUSH
33631: LD_INT 23
33633: PUSH
33634: LD_INT 20
33636: PUSH
33637: LD_INT 22
33639: PUSH
33640: LD_INT 17
33642: PUSH
33643: LD_INT 24
33645: PUSH
33646: LD_INT 21
33648: PUSH
33649: LD_INT 19
33651: PUSH
33652: LD_INT 16
33654: PUSH
33655: LD_INT 25
33657: PUSH
33658: LD_INT 18
33660: PUSH
33661: EMPTY
33662: LIST
33663: LIST
33664: LIST
33665: LIST
33666: LIST
33667: LIST
33668: LIST
33669: LIST
33670: LIST
33671: LIST
33672: IN
33673: ST_TO_ADDR
// end ;
33674: LD_VAR 0 2
33678: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
33679: LD_INT 0
33681: PPUSH
33682: PPUSH
33683: PPUSH
// result := [ ] ;
33684: LD_ADDR_VAR 0 4
33688: PUSH
33689: EMPTY
33690: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
33691: LD_ADDR_VAR 0 5
33695: PUSH
33696: LD_VAR 0 2
33700: PPUSH
33701: LD_INT 21
33703: PUSH
33704: LD_INT 3
33706: PUSH
33707: EMPTY
33708: LIST
33709: LIST
33710: PPUSH
33711: CALL_OW 70
33715: ST_TO_ADDR
// if not tmp then
33716: LD_VAR 0 5
33720: NOT
33721: IFFALSE 33725
// exit ;
33723: GO 33789
// if checkLink then
33725: LD_VAR 0 3
33729: IFFALSE 33779
// begin for i in tmp do
33731: LD_ADDR_VAR 0 6
33735: PUSH
33736: LD_VAR 0 5
33740: PUSH
33741: FOR_IN
33742: IFFALSE 33777
// if GetBase ( i ) <> base then
33744: LD_VAR 0 6
33748: PPUSH
33749: CALL_OW 274
33753: PUSH
33754: LD_VAR 0 1
33758: NONEQUAL
33759: IFFALSE 33775
// ComLinkToBase ( base , i ) ;
33761: LD_VAR 0 1
33765: PPUSH
33766: LD_VAR 0 6
33770: PPUSH
33771: CALL_OW 169
33775: GO 33741
33777: POP
33778: POP
// end ; result := tmp ;
33779: LD_ADDR_VAR 0 4
33783: PUSH
33784: LD_VAR 0 5
33788: ST_TO_ADDR
// end ;
33789: LD_VAR 0 4
33793: RET
// export function ComComplete ( units , b ) ; var i ; begin
33794: LD_INT 0
33796: PPUSH
33797: PPUSH
// if not units then
33798: LD_VAR 0 1
33802: NOT
33803: IFFALSE 33807
// exit ;
33805: GO 33897
// for i in units do
33807: LD_ADDR_VAR 0 4
33811: PUSH
33812: LD_VAR 0 1
33816: PUSH
33817: FOR_IN
33818: IFFALSE 33895
// if BuildingStatus ( b ) = bs_build then
33820: LD_VAR 0 2
33824: PPUSH
33825: CALL_OW 461
33829: PUSH
33830: LD_INT 1
33832: EQUAL
33833: IFFALSE 33893
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
33835: LD_VAR 0 4
33839: PPUSH
33840: LD_STRING h
33842: PUSH
33843: LD_VAR 0 2
33847: PPUSH
33848: CALL_OW 250
33852: PUSH
33853: LD_VAR 0 2
33857: PPUSH
33858: CALL_OW 251
33862: PUSH
33863: LD_VAR 0 2
33867: PUSH
33868: LD_INT 0
33870: PUSH
33871: LD_INT 0
33873: PUSH
33874: LD_INT 0
33876: PUSH
33877: EMPTY
33878: LIST
33879: LIST
33880: LIST
33881: LIST
33882: LIST
33883: LIST
33884: LIST
33885: PUSH
33886: EMPTY
33887: LIST
33888: PPUSH
33889: CALL_OW 446
33893: GO 33817
33895: POP
33896: POP
// end ;
33897: LD_VAR 0 3
33901: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
33902: LD_INT 0
33904: PPUSH
33905: PPUSH
33906: PPUSH
33907: PPUSH
33908: PPUSH
33909: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
33910: LD_VAR 0 1
33914: NOT
33915: PUSH
33916: LD_VAR 0 1
33920: PPUSH
33921: CALL_OW 263
33925: PUSH
33926: LD_INT 2
33928: NONEQUAL
33929: OR
33930: IFFALSE 33934
// exit ;
33932: GO 34250
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
33934: LD_ADDR_VAR 0 6
33938: PUSH
33939: LD_INT 22
33941: PUSH
33942: LD_VAR 0 1
33946: PPUSH
33947: CALL_OW 255
33951: PUSH
33952: EMPTY
33953: LIST
33954: LIST
33955: PUSH
33956: LD_INT 2
33958: PUSH
33959: LD_INT 30
33961: PUSH
33962: LD_INT 36
33964: PUSH
33965: EMPTY
33966: LIST
33967: LIST
33968: PUSH
33969: LD_INT 34
33971: PUSH
33972: LD_INT 31
33974: PUSH
33975: EMPTY
33976: LIST
33977: LIST
33978: PUSH
33979: EMPTY
33980: LIST
33981: LIST
33982: LIST
33983: PUSH
33984: EMPTY
33985: LIST
33986: LIST
33987: PPUSH
33988: CALL_OW 69
33992: ST_TO_ADDR
// if not tmp then
33993: LD_VAR 0 6
33997: NOT
33998: IFFALSE 34002
// exit ;
34000: GO 34250
// result := [ ] ;
34002: LD_ADDR_VAR 0 2
34006: PUSH
34007: EMPTY
34008: ST_TO_ADDR
// for i in tmp do
34009: LD_ADDR_VAR 0 3
34013: PUSH
34014: LD_VAR 0 6
34018: PUSH
34019: FOR_IN
34020: IFFALSE 34091
// begin t := UnitsInside ( i ) ;
34022: LD_ADDR_VAR 0 4
34026: PUSH
34027: LD_VAR 0 3
34031: PPUSH
34032: CALL_OW 313
34036: ST_TO_ADDR
// if t then
34037: LD_VAR 0 4
34041: IFFALSE 34089
// for j in t do
34043: LD_ADDR_VAR 0 7
34047: PUSH
34048: LD_VAR 0 4
34052: PUSH
34053: FOR_IN
34054: IFFALSE 34087
// result := Replace ( result , result + 1 , j ) ;
34056: LD_ADDR_VAR 0 2
34060: PUSH
34061: LD_VAR 0 2
34065: PPUSH
34066: LD_VAR 0 2
34070: PUSH
34071: LD_INT 1
34073: PLUS
34074: PPUSH
34075: LD_VAR 0 7
34079: PPUSH
34080: CALL_OW 1
34084: ST_TO_ADDR
34085: GO 34053
34087: POP
34088: POP
// end ;
34089: GO 34019
34091: POP
34092: POP
// if not result then
34093: LD_VAR 0 2
34097: NOT
34098: IFFALSE 34102
// exit ;
34100: GO 34250
// mech := result [ 1 ] ;
34102: LD_ADDR_VAR 0 5
34106: PUSH
34107: LD_VAR 0 2
34111: PUSH
34112: LD_INT 1
34114: ARRAY
34115: ST_TO_ADDR
// if result > 1 then
34116: LD_VAR 0 2
34120: PUSH
34121: LD_INT 1
34123: GREATER
34124: IFFALSE 34236
// begin for i = 2 to result do
34126: LD_ADDR_VAR 0 3
34130: PUSH
34131: DOUBLE
34132: LD_INT 2
34134: DEC
34135: ST_TO_ADDR
34136: LD_VAR 0 2
34140: PUSH
34141: FOR_TO
34142: IFFALSE 34234
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
34144: LD_ADDR_VAR 0 4
34148: PUSH
34149: LD_VAR 0 2
34153: PUSH
34154: LD_VAR 0 3
34158: ARRAY
34159: PPUSH
34160: LD_INT 3
34162: PPUSH
34163: CALL_OW 259
34167: PUSH
34168: LD_VAR 0 2
34172: PUSH
34173: LD_VAR 0 3
34177: ARRAY
34178: PPUSH
34179: CALL_OW 432
34183: MINUS
34184: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
34185: LD_VAR 0 4
34189: PUSH
34190: LD_VAR 0 5
34194: PPUSH
34195: LD_INT 3
34197: PPUSH
34198: CALL_OW 259
34202: PUSH
34203: LD_VAR 0 5
34207: PPUSH
34208: CALL_OW 432
34212: MINUS
34213: GREATEREQUAL
34214: IFFALSE 34232
// mech := result [ i ] ;
34216: LD_ADDR_VAR 0 5
34220: PUSH
34221: LD_VAR 0 2
34225: PUSH
34226: LD_VAR 0 3
34230: ARRAY
34231: ST_TO_ADDR
// end ;
34232: GO 34141
34234: POP
34235: POP
// end ; ComLinkTo ( vehicle , mech ) ;
34236: LD_VAR 0 1
34240: PPUSH
34241: LD_VAR 0 5
34245: PPUSH
34246: CALL_OW 135
// end ;
34250: LD_VAR 0 2
34254: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
34255: LD_INT 0
34257: PPUSH
34258: PPUSH
34259: PPUSH
34260: PPUSH
34261: PPUSH
34262: PPUSH
34263: PPUSH
34264: PPUSH
34265: PPUSH
34266: PPUSH
34267: PPUSH
34268: PPUSH
34269: PPUSH
// result := [ ] ;
34270: LD_ADDR_VAR 0 7
34274: PUSH
34275: EMPTY
34276: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
34277: LD_VAR 0 1
34281: PPUSH
34282: CALL_OW 266
34286: PUSH
34287: LD_INT 0
34289: PUSH
34290: LD_INT 1
34292: PUSH
34293: EMPTY
34294: LIST
34295: LIST
34296: IN
34297: NOT
34298: IFFALSE 34302
// exit ;
34300: GO 35936
// if name then
34302: LD_VAR 0 3
34306: IFFALSE 34322
// SetBName ( base_dep , name ) ;
34308: LD_VAR 0 1
34312: PPUSH
34313: LD_VAR 0 3
34317: PPUSH
34318: CALL_OW 500
// base := GetBase ( base_dep ) ;
34322: LD_ADDR_VAR 0 15
34326: PUSH
34327: LD_VAR 0 1
34331: PPUSH
34332: CALL_OW 274
34336: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
34337: LD_ADDR_VAR 0 16
34341: PUSH
34342: LD_VAR 0 1
34346: PPUSH
34347: CALL_OW 255
34351: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
34352: LD_ADDR_VAR 0 17
34356: PUSH
34357: LD_VAR 0 1
34361: PPUSH
34362: CALL_OW 248
34366: ST_TO_ADDR
// if sources then
34367: LD_VAR 0 5
34371: IFFALSE 34418
// for i = 1 to 3 do
34373: LD_ADDR_VAR 0 8
34377: PUSH
34378: DOUBLE
34379: LD_INT 1
34381: DEC
34382: ST_TO_ADDR
34383: LD_INT 3
34385: PUSH
34386: FOR_TO
34387: IFFALSE 34416
// AddResourceType ( base , i , sources [ i ] ) ;
34389: LD_VAR 0 15
34393: PPUSH
34394: LD_VAR 0 8
34398: PPUSH
34399: LD_VAR 0 5
34403: PUSH
34404: LD_VAR 0 8
34408: ARRAY
34409: PPUSH
34410: CALL_OW 276
34414: GO 34386
34416: POP
34417: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
34418: LD_ADDR_VAR 0 18
34422: PUSH
34423: LD_VAR 0 15
34427: PPUSH
34428: LD_VAR 0 2
34432: PPUSH
34433: LD_INT 1
34435: PPUSH
34436: CALL 33679 0 3
34440: ST_TO_ADDR
// InitHc ;
34441: CALL_OW 19
// InitUc ;
34445: CALL_OW 18
// uc_side := side ;
34449: LD_ADDR_OWVAR 20
34453: PUSH
34454: LD_VAR 0 16
34458: ST_TO_ADDR
// uc_nation := nation ;
34459: LD_ADDR_OWVAR 21
34463: PUSH
34464: LD_VAR 0 17
34468: ST_TO_ADDR
// if buildings then
34469: LD_VAR 0 18
34473: IFFALSE 35795
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
34475: LD_ADDR_VAR 0 19
34479: PUSH
34480: LD_VAR 0 18
34484: PPUSH
34485: LD_INT 2
34487: PUSH
34488: LD_INT 30
34490: PUSH
34491: LD_INT 29
34493: PUSH
34494: EMPTY
34495: LIST
34496: LIST
34497: PUSH
34498: LD_INT 30
34500: PUSH
34501: LD_INT 30
34503: PUSH
34504: EMPTY
34505: LIST
34506: LIST
34507: PUSH
34508: EMPTY
34509: LIST
34510: LIST
34511: LIST
34512: PPUSH
34513: CALL_OW 72
34517: ST_TO_ADDR
// if tmp then
34518: LD_VAR 0 19
34522: IFFALSE 34570
// for i in tmp do
34524: LD_ADDR_VAR 0 8
34528: PUSH
34529: LD_VAR 0 19
34533: PUSH
34534: FOR_IN
34535: IFFALSE 34568
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
34537: LD_VAR 0 8
34541: PPUSH
34542: CALL_OW 250
34546: PPUSH
34547: LD_VAR 0 8
34551: PPUSH
34552: CALL_OW 251
34556: PPUSH
34557: LD_VAR 0 16
34561: PPUSH
34562: CALL_OW 441
34566: GO 34534
34568: POP
34569: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
34570: LD_VAR 0 18
34574: PPUSH
34575: LD_INT 2
34577: PUSH
34578: LD_INT 30
34580: PUSH
34581: LD_INT 32
34583: PUSH
34584: EMPTY
34585: LIST
34586: LIST
34587: PUSH
34588: LD_INT 30
34590: PUSH
34591: LD_INT 33
34593: PUSH
34594: EMPTY
34595: LIST
34596: LIST
34597: PUSH
34598: EMPTY
34599: LIST
34600: LIST
34601: LIST
34602: PPUSH
34603: CALL_OW 72
34607: IFFALSE 34695
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
34609: LD_ADDR_VAR 0 8
34613: PUSH
34614: LD_VAR 0 18
34618: PPUSH
34619: LD_INT 2
34621: PUSH
34622: LD_INT 30
34624: PUSH
34625: LD_INT 32
34627: PUSH
34628: EMPTY
34629: LIST
34630: LIST
34631: PUSH
34632: LD_INT 30
34634: PUSH
34635: LD_INT 33
34637: PUSH
34638: EMPTY
34639: LIST
34640: LIST
34641: PUSH
34642: EMPTY
34643: LIST
34644: LIST
34645: LIST
34646: PPUSH
34647: CALL_OW 72
34651: PUSH
34652: FOR_IN
34653: IFFALSE 34693
// begin if not GetBWeapon ( i ) then
34655: LD_VAR 0 8
34659: PPUSH
34660: CALL_OW 269
34664: NOT
34665: IFFALSE 34691
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
34667: LD_VAR 0 8
34671: PPUSH
34672: LD_VAR 0 8
34676: PPUSH
34677: LD_VAR 0 2
34681: PPUSH
34682: CALL 35941 0 2
34686: PPUSH
34687: CALL_OW 431
// end ;
34691: GO 34652
34693: POP
34694: POP
// end ; for i = 1 to personel do
34695: LD_ADDR_VAR 0 8
34699: PUSH
34700: DOUBLE
34701: LD_INT 1
34703: DEC
34704: ST_TO_ADDR
34705: LD_VAR 0 6
34709: PUSH
34710: FOR_TO
34711: IFFALSE 35775
// begin if i > 4 then
34713: LD_VAR 0 8
34717: PUSH
34718: LD_INT 4
34720: GREATER
34721: IFFALSE 34725
// break ;
34723: GO 35775
// case i of 1 :
34725: LD_VAR 0 8
34729: PUSH
34730: LD_INT 1
34732: DOUBLE
34733: EQUAL
34734: IFTRUE 34738
34736: GO 34818
34738: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
34739: LD_ADDR_VAR 0 12
34743: PUSH
34744: LD_VAR 0 18
34748: PPUSH
34749: LD_INT 22
34751: PUSH
34752: LD_VAR 0 16
34756: PUSH
34757: EMPTY
34758: LIST
34759: LIST
34760: PUSH
34761: LD_INT 58
34763: PUSH
34764: EMPTY
34765: LIST
34766: PUSH
34767: LD_INT 2
34769: PUSH
34770: LD_INT 30
34772: PUSH
34773: LD_INT 32
34775: PUSH
34776: EMPTY
34777: LIST
34778: LIST
34779: PUSH
34780: LD_INT 30
34782: PUSH
34783: LD_INT 4
34785: PUSH
34786: EMPTY
34787: LIST
34788: LIST
34789: PUSH
34790: LD_INT 30
34792: PUSH
34793: LD_INT 5
34795: PUSH
34796: EMPTY
34797: LIST
34798: LIST
34799: PUSH
34800: EMPTY
34801: LIST
34802: LIST
34803: LIST
34804: LIST
34805: PUSH
34806: EMPTY
34807: LIST
34808: LIST
34809: LIST
34810: PPUSH
34811: CALL_OW 72
34815: ST_TO_ADDR
34816: GO 35040
34818: LD_INT 2
34820: DOUBLE
34821: EQUAL
34822: IFTRUE 34826
34824: GO 34888
34826: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
34827: LD_ADDR_VAR 0 12
34831: PUSH
34832: LD_VAR 0 18
34836: PPUSH
34837: LD_INT 22
34839: PUSH
34840: LD_VAR 0 16
34844: PUSH
34845: EMPTY
34846: LIST
34847: LIST
34848: PUSH
34849: LD_INT 2
34851: PUSH
34852: LD_INT 30
34854: PUSH
34855: LD_INT 0
34857: PUSH
34858: EMPTY
34859: LIST
34860: LIST
34861: PUSH
34862: LD_INT 30
34864: PUSH
34865: LD_INT 1
34867: PUSH
34868: EMPTY
34869: LIST
34870: LIST
34871: PUSH
34872: EMPTY
34873: LIST
34874: LIST
34875: LIST
34876: PUSH
34877: EMPTY
34878: LIST
34879: LIST
34880: PPUSH
34881: CALL_OW 72
34885: ST_TO_ADDR
34886: GO 35040
34888: LD_INT 3
34890: DOUBLE
34891: EQUAL
34892: IFTRUE 34896
34894: GO 34958
34896: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
34897: LD_ADDR_VAR 0 12
34901: PUSH
34902: LD_VAR 0 18
34906: PPUSH
34907: LD_INT 22
34909: PUSH
34910: LD_VAR 0 16
34914: PUSH
34915: EMPTY
34916: LIST
34917: LIST
34918: PUSH
34919: LD_INT 2
34921: PUSH
34922: LD_INT 30
34924: PUSH
34925: LD_INT 2
34927: PUSH
34928: EMPTY
34929: LIST
34930: LIST
34931: PUSH
34932: LD_INT 30
34934: PUSH
34935: LD_INT 3
34937: PUSH
34938: EMPTY
34939: LIST
34940: LIST
34941: PUSH
34942: EMPTY
34943: LIST
34944: LIST
34945: LIST
34946: PUSH
34947: EMPTY
34948: LIST
34949: LIST
34950: PPUSH
34951: CALL_OW 72
34955: ST_TO_ADDR
34956: GO 35040
34958: LD_INT 4
34960: DOUBLE
34961: EQUAL
34962: IFTRUE 34966
34964: GO 35039
34966: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
34967: LD_ADDR_VAR 0 12
34971: PUSH
34972: LD_VAR 0 18
34976: PPUSH
34977: LD_INT 22
34979: PUSH
34980: LD_VAR 0 16
34984: PUSH
34985: EMPTY
34986: LIST
34987: LIST
34988: PUSH
34989: LD_INT 2
34991: PUSH
34992: LD_INT 30
34994: PUSH
34995: LD_INT 6
34997: PUSH
34998: EMPTY
34999: LIST
35000: LIST
35001: PUSH
35002: LD_INT 30
35004: PUSH
35005: LD_INT 7
35007: PUSH
35008: EMPTY
35009: LIST
35010: LIST
35011: PUSH
35012: LD_INT 30
35014: PUSH
35015: LD_INT 8
35017: PUSH
35018: EMPTY
35019: LIST
35020: LIST
35021: PUSH
35022: EMPTY
35023: LIST
35024: LIST
35025: LIST
35026: LIST
35027: PUSH
35028: EMPTY
35029: LIST
35030: LIST
35031: PPUSH
35032: CALL_OW 72
35036: ST_TO_ADDR
35037: GO 35040
35039: POP
// if i = 1 then
35040: LD_VAR 0 8
35044: PUSH
35045: LD_INT 1
35047: EQUAL
35048: IFFALSE 35159
// begin tmp := [ ] ;
35050: LD_ADDR_VAR 0 19
35054: PUSH
35055: EMPTY
35056: ST_TO_ADDR
// for j in f do
35057: LD_ADDR_VAR 0 9
35061: PUSH
35062: LD_VAR 0 12
35066: PUSH
35067: FOR_IN
35068: IFFALSE 35141
// if GetBType ( j ) = b_bunker then
35070: LD_VAR 0 9
35074: PPUSH
35075: CALL_OW 266
35079: PUSH
35080: LD_INT 32
35082: EQUAL
35083: IFFALSE 35110
// tmp := Insert ( tmp , 1 , j ) else
35085: LD_ADDR_VAR 0 19
35089: PUSH
35090: LD_VAR 0 19
35094: PPUSH
35095: LD_INT 1
35097: PPUSH
35098: LD_VAR 0 9
35102: PPUSH
35103: CALL_OW 2
35107: ST_TO_ADDR
35108: GO 35139
// tmp := Insert ( tmp , tmp + 1 , j ) ;
35110: LD_ADDR_VAR 0 19
35114: PUSH
35115: LD_VAR 0 19
35119: PPUSH
35120: LD_VAR 0 19
35124: PUSH
35125: LD_INT 1
35127: PLUS
35128: PPUSH
35129: LD_VAR 0 9
35133: PPUSH
35134: CALL_OW 2
35138: ST_TO_ADDR
35139: GO 35067
35141: POP
35142: POP
// if tmp then
35143: LD_VAR 0 19
35147: IFFALSE 35159
// f := tmp ;
35149: LD_ADDR_VAR 0 12
35153: PUSH
35154: LD_VAR 0 19
35158: ST_TO_ADDR
// end ; x := personel [ i ] ;
35159: LD_ADDR_VAR 0 13
35163: PUSH
35164: LD_VAR 0 6
35168: PUSH
35169: LD_VAR 0 8
35173: ARRAY
35174: ST_TO_ADDR
// if x = - 1 then
35175: LD_VAR 0 13
35179: PUSH
35180: LD_INT 1
35182: NEG
35183: EQUAL
35184: IFFALSE 35393
// begin for j in f do
35186: LD_ADDR_VAR 0 9
35190: PUSH
35191: LD_VAR 0 12
35195: PUSH
35196: FOR_IN
35197: IFFALSE 35389
// repeat InitHc ;
35199: CALL_OW 19
// if GetBType ( j ) = b_barracks then
35203: LD_VAR 0 9
35207: PPUSH
35208: CALL_OW 266
35212: PUSH
35213: LD_INT 5
35215: EQUAL
35216: IFFALSE 35286
// begin if UnitsInside ( j ) < 3 then
35218: LD_VAR 0 9
35222: PPUSH
35223: CALL_OW 313
35227: PUSH
35228: LD_INT 3
35230: LESS
35231: IFFALSE 35267
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35233: LD_INT 0
35235: PPUSH
35236: LD_INT 5
35238: PUSH
35239: LD_INT 8
35241: PUSH
35242: LD_INT 9
35244: PUSH
35245: EMPTY
35246: LIST
35247: LIST
35248: LIST
35249: PUSH
35250: LD_VAR 0 17
35254: ARRAY
35255: PPUSH
35256: LD_VAR 0 4
35260: PPUSH
35261: CALL_OW 380
35265: GO 35284
// PrepareHuman ( false , i , skill ) ;
35267: LD_INT 0
35269: PPUSH
35270: LD_VAR 0 8
35274: PPUSH
35275: LD_VAR 0 4
35279: PPUSH
35280: CALL_OW 380
// end else
35284: GO 35303
// PrepareHuman ( false , i , skill ) ;
35286: LD_INT 0
35288: PPUSH
35289: LD_VAR 0 8
35293: PPUSH
35294: LD_VAR 0 4
35298: PPUSH
35299: CALL_OW 380
// un := CreateHuman ;
35303: LD_ADDR_VAR 0 14
35307: PUSH
35308: CALL_OW 44
35312: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35313: LD_ADDR_VAR 0 7
35317: PUSH
35318: LD_VAR 0 7
35322: PPUSH
35323: LD_INT 1
35325: PPUSH
35326: LD_VAR 0 14
35330: PPUSH
35331: CALL_OW 2
35335: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
35336: LD_VAR 0 14
35340: PPUSH
35341: LD_VAR 0 9
35345: PPUSH
35346: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
35350: LD_VAR 0 9
35354: PPUSH
35355: CALL_OW 313
35359: PUSH
35360: LD_INT 6
35362: EQUAL
35363: PUSH
35364: LD_VAR 0 9
35368: PPUSH
35369: CALL_OW 266
35373: PUSH
35374: LD_INT 32
35376: PUSH
35377: LD_INT 31
35379: PUSH
35380: EMPTY
35381: LIST
35382: LIST
35383: IN
35384: OR
35385: IFFALSE 35199
35387: GO 35196
35389: POP
35390: POP
// end else
35391: GO 35773
// for j = 1 to x do
35393: LD_ADDR_VAR 0 9
35397: PUSH
35398: DOUBLE
35399: LD_INT 1
35401: DEC
35402: ST_TO_ADDR
35403: LD_VAR 0 13
35407: PUSH
35408: FOR_TO
35409: IFFALSE 35771
// begin InitHc ;
35411: CALL_OW 19
// if not f then
35415: LD_VAR 0 12
35419: NOT
35420: IFFALSE 35509
// begin PrepareHuman ( false , i , skill ) ;
35422: LD_INT 0
35424: PPUSH
35425: LD_VAR 0 8
35429: PPUSH
35430: LD_VAR 0 4
35434: PPUSH
35435: CALL_OW 380
// un := CreateHuman ;
35439: LD_ADDR_VAR 0 14
35443: PUSH
35444: CALL_OW 44
35448: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35449: LD_ADDR_VAR 0 7
35453: PUSH
35454: LD_VAR 0 7
35458: PPUSH
35459: LD_INT 1
35461: PPUSH
35462: LD_VAR 0 14
35466: PPUSH
35467: CALL_OW 2
35471: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35472: LD_VAR 0 14
35476: PPUSH
35477: LD_VAR 0 1
35481: PPUSH
35482: CALL_OW 250
35486: PPUSH
35487: LD_VAR 0 1
35491: PPUSH
35492: CALL_OW 251
35496: PPUSH
35497: LD_INT 10
35499: PPUSH
35500: LD_INT 0
35502: PPUSH
35503: CALL_OW 50
// continue ;
35507: GO 35408
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
35509: LD_VAR 0 12
35513: PUSH
35514: LD_INT 1
35516: ARRAY
35517: PPUSH
35518: CALL_OW 313
35522: PUSH
35523: LD_VAR 0 12
35527: PUSH
35528: LD_INT 1
35530: ARRAY
35531: PPUSH
35532: CALL_OW 266
35536: PUSH
35537: LD_INT 32
35539: PUSH
35540: LD_INT 31
35542: PUSH
35543: EMPTY
35544: LIST
35545: LIST
35546: IN
35547: AND
35548: PUSH
35549: LD_VAR 0 12
35553: PUSH
35554: LD_INT 1
35556: ARRAY
35557: PPUSH
35558: CALL_OW 313
35562: PUSH
35563: LD_INT 6
35565: EQUAL
35566: OR
35567: IFFALSE 35587
// f := Delete ( f , 1 ) ;
35569: LD_ADDR_VAR 0 12
35573: PUSH
35574: LD_VAR 0 12
35578: PPUSH
35579: LD_INT 1
35581: PPUSH
35582: CALL_OW 3
35586: ST_TO_ADDR
// if not f then
35587: LD_VAR 0 12
35591: NOT
35592: IFFALSE 35610
// begin x := x + 2 ;
35594: LD_ADDR_VAR 0 13
35598: PUSH
35599: LD_VAR 0 13
35603: PUSH
35604: LD_INT 2
35606: PLUS
35607: ST_TO_ADDR
// continue ;
35608: GO 35408
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
35610: LD_VAR 0 12
35614: PUSH
35615: LD_INT 1
35617: ARRAY
35618: PPUSH
35619: CALL_OW 266
35623: PUSH
35624: LD_INT 5
35626: EQUAL
35627: IFFALSE 35701
// begin if UnitsInside ( f [ 1 ] ) < 3 then
35629: LD_VAR 0 12
35633: PUSH
35634: LD_INT 1
35636: ARRAY
35637: PPUSH
35638: CALL_OW 313
35642: PUSH
35643: LD_INT 3
35645: LESS
35646: IFFALSE 35682
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35648: LD_INT 0
35650: PPUSH
35651: LD_INT 5
35653: PUSH
35654: LD_INT 8
35656: PUSH
35657: LD_INT 9
35659: PUSH
35660: EMPTY
35661: LIST
35662: LIST
35663: LIST
35664: PUSH
35665: LD_VAR 0 17
35669: ARRAY
35670: PPUSH
35671: LD_VAR 0 4
35675: PPUSH
35676: CALL_OW 380
35680: GO 35699
// PrepareHuman ( false , i , skill ) ;
35682: LD_INT 0
35684: PPUSH
35685: LD_VAR 0 8
35689: PPUSH
35690: LD_VAR 0 4
35694: PPUSH
35695: CALL_OW 380
// end else
35699: GO 35718
// PrepareHuman ( false , i , skill ) ;
35701: LD_INT 0
35703: PPUSH
35704: LD_VAR 0 8
35708: PPUSH
35709: LD_VAR 0 4
35713: PPUSH
35714: CALL_OW 380
// un := CreateHuman ;
35718: LD_ADDR_VAR 0 14
35722: PUSH
35723: CALL_OW 44
35727: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35728: LD_ADDR_VAR 0 7
35732: PUSH
35733: LD_VAR 0 7
35737: PPUSH
35738: LD_INT 1
35740: PPUSH
35741: LD_VAR 0 14
35745: PPUSH
35746: CALL_OW 2
35750: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
35751: LD_VAR 0 14
35755: PPUSH
35756: LD_VAR 0 12
35760: PUSH
35761: LD_INT 1
35763: ARRAY
35764: PPUSH
35765: CALL_OW 52
// end ;
35769: GO 35408
35771: POP
35772: POP
// end ;
35773: GO 34710
35775: POP
35776: POP
// result := result ^ buildings ;
35777: LD_ADDR_VAR 0 7
35781: PUSH
35782: LD_VAR 0 7
35786: PUSH
35787: LD_VAR 0 18
35791: ADD
35792: ST_TO_ADDR
// end else
35793: GO 35936
// begin for i = 1 to personel do
35795: LD_ADDR_VAR 0 8
35799: PUSH
35800: DOUBLE
35801: LD_INT 1
35803: DEC
35804: ST_TO_ADDR
35805: LD_VAR 0 6
35809: PUSH
35810: FOR_TO
35811: IFFALSE 35934
// begin if i > 4 then
35813: LD_VAR 0 8
35817: PUSH
35818: LD_INT 4
35820: GREATER
35821: IFFALSE 35825
// break ;
35823: GO 35934
// x := personel [ i ] ;
35825: LD_ADDR_VAR 0 13
35829: PUSH
35830: LD_VAR 0 6
35834: PUSH
35835: LD_VAR 0 8
35839: ARRAY
35840: ST_TO_ADDR
// if x = - 1 then
35841: LD_VAR 0 13
35845: PUSH
35846: LD_INT 1
35848: NEG
35849: EQUAL
35850: IFFALSE 35854
// continue ;
35852: GO 35810
// PrepareHuman ( false , i , skill ) ;
35854: LD_INT 0
35856: PPUSH
35857: LD_VAR 0 8
35861: PPUSH
35862: LD_VAR 0 4
35866: PPUSH
35867: CALL_OW 380
// un := CreateHuman ;
35871: LD_ADDR_VAR 0 14
35875: PUSH
35876: CALL_OW 44
35880: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35881: LD_VAR 0 14
35885: PPUSH
35886: LD_VAR 0 1
35890: PPUSH
35891: CALL_OW 250
35895: PPUSH
35896: LD_VAR 0 1
35900: PPUSH
35901: CALL_OW 251
35905: PPUSH
35906: LD_INT 10
35908: PPUSH
35909: LD_INT 0
35911: PPUSH
35912: CALL_OW 50
// result := result ^ un ;
35916: LD_ADDR_VAR 0 7
35920: PUSH
35921: LD_VAR 0 7
35925: PUSH
35926: LD_VAR 0 14
35930: ADD
35931: ST_TO_ADDR
// end ;
35932: GO 35810
35934: POP
35935: POP
// end ; end ;
35936: LD_VAR 0 7
35940: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
35941: LD_INT 0
35943: PPUSH
35944: PPUSH
35945: PPUSH
35946: PPUSH
35947: PPUSH
35948: PPUSH
35949: PPUSH
35950: PPUSH
35951: PPUSH
35952: PPUSH
35953: PPUSH
35954: PPUSH
35955: PPUSH
35956: PPUSH
35957: PPUSH
35958: PPUSH
// result := false ;
35959: LD_ADDR_VAR 0 3
35963: PUSH
35964: LD_INT 0
35966: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
35967: LD_VAR 0 1
35971: NOT
35972: PUSH
35973: LD_VAR 0 1
35977: PPUSH
35978: CALL_OW 266
35982: PUSH
35983: LD_INT 32
35985: PUSH
35986: LD_INT 33
35988: PUSH
35989: EMPTY
35990: LIST
35991: LIST
35992: IN
35993: NOT
35994: OR
35995: IFFALSE 35999
// exit ;
35997: GO 37108
// nat := GetNation ( tower ) ;
35999: LD_ADDR_VAR 0 12
36003: PUSH
36004: LD_VAR 0 1
36008: PPUSH
36009: CALL_OW 248
36013: ST_TO_ADDR
// side := GetSide ( tower ) ;
36014: LD_ADDR_VAR 0 16
36018: PUSH
36019: LD_VAR 0 1
36023: PPUSH
36024: CALL_OW 255
36028: ST_TO_ADDR
// x := GetX ( tower ) ;
36029: LD_ADDR_VAR 0 10
36033: PUSH
36034: LD_VAR 0 1
36038: PPUSH
36039: CALL_OW 250
36043: ST_TO_ADDR
// y := GetY ( tower ) ;
36044: LD_ADDR_VAR 0 11
36048: PUSH
36049: LD_VAR 0 1
36053: PPUSH
36054: CALL_OW 251
36058: ST_TO_ADDR
// if not x or not y then
36059: LD_VAR 0 10
36063: NOT
36064: PUSH
36065: LD_VAR 0 11
36069: NOT
36070: OR
36071: IFFALSE 36075
// exit ;
36073: GO 37108
// weapon := 0 ;
36075: LD_ADDR_VAR 0 18
36079: PUSH
36080: LD_INT 0
36082: ST_TO_ADDR
// fac_list := [ ] ;
36083: LD_ADDR_VAR 0 17
36087: PUSH
36088: EMPTY
36089: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
36090: LD_ADDR_VAR 0 6
36094: PUSH
36095: LD_VAR 0 1
36099: PPUSH
36100: CALL_OW 274
36104: PPUSH
36105: LD_VAR 0 2
36109: PPUSH
36110: LD_INT 0
36112: PPUSH
36113: CALL 33679 0 3
36117: PPUSH
36118: LD_INT 30
36120: PUSH
36121: LD_INT 3
36123: PUSH
36124: EMPTY
36125: LIST
36126: LIST
36127: PPUSH
36128: CALL_OW 72
36132: ST_TO_ADDR
// if not factories then
36133: LD_VAR 0 6
36137: NOT
36138: IFFALSE 36142
// exit ;
36140: GO 37108
// for i in factories do
36142: LD_ADDR_VAR 0 8
36146: PUSH
36147: LD_VAR 0 6
36151: PUSH
36152: FOR_IN
36153: IFFALSE 36178
// fac_list := fac_list union AvailableWeaponList ( i ) ;
36155: LD_ADDR_VAR 0 17
36159: PUSH
36160: LD_VAR 0 17
36164: PUSH
36165: LD_VAR 0 8
36169: PPUSH
36170: CALL_OW 478
36174: UNION
36175: ST_TO_ADDR
36176: GO 36152
36178: POP
36179: POP
// if not fac_list then
36180: LD_VAR 0 17
36184: NOT
36185: IFFALSE 36189
// exit ;
36187: GO 37108
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
36189: LD_ADDR_VAR 0 5
36193: PUSH
36194: LD_INT 4
36196: PUSH
36197: LD_INT 5
36199: PUSH
36200: LD_INT 9
36202: PUSH
36203: LD_INT 10
36205: PUSH
36206: LD_INT 6
36208: PUSH
36209: LD_INT 7
36211: PUSH
36212: LD_INT 11
36214: PUSH
36215: EMPTY
36216: LIST
36217: LIST
36218: LIST
36219: LIST
36220: LIST
36221: LIST
36222: LIST
36223: PUSH
36224: LD_INT 27
36226: PUSH
36227: LD_INT 28
36229: PUSH
36230: LD_INT 26
36232: PUSH
36233: LD_INT 30
36235: PUSH
36236: EMPTY
36237: LIST
36238: LIST
36239: LIST
36240: LIST
36241: PUSH
36242: LD_INT 43
36244: PUSH
36245: LD_INT 44
36247: PUSH
36248: LD_INT 46
36250: PUSH
36251: LD_INT 45
36253: PUSH
36254: LD_INT 47
36256: PUSH
36257: LD_INT 49
36259: PUSH
36260: EMPTY
36261: LIST
36262: LIST
36263: LIST
36264: LIST
36265: LIST
36266: LIST
36267: PUSH
36268: EMPTY
36269: LIST
36270: LIST
36271: LIST
36272: PUSH
36273: LD_VAR 0 12
36277: ARRAY
36278: ST_TO_ADDR
// list := list isect fac_list ;
36279: LD_ADDR_VAR 0 5
36283: PUSH
36284: LD_VAR 0 5
36288: PUSH
36289: LD_VAR 0 17
36293: ISECT
36294: ST_TO_ADDR
// if not list then
36295: LD_VAR 0 5
36299: NOT
36300: IFFALSE 36304
// exit ;
36302: GO 37108
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
36304: LD_VAR 0 12
36308: PUSH
36309: LD_INT 3
36311: EQUAL
36312: PUSH
36313: LD_INT 49
36315: PUSH
36316: LD_VAR 0 5
36320: IN
36321: AND
36322: PUSH
36323: LD_INT 31
36325: PPUSH
36326: LD_VAR 0 16
36330: PPUSH
36331: CALL_OW 321
36335: PUSH
36336: LD_INT 2
36338: EQUAL
36339: AND
36340: IFFALSE 36400
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
36342: LD_INT 22
36344: PUSH
36345: LD_VAR 0 16
36349: PUSH
36350: EMPTY
36351: LIST
36352: LIST
36353: PUSH
36354: LD_INT 35
36356: PUSH
36357: LD_INT 49
36359: PUSH
36360: EMPTY
36361: LIST
36362: LIST
36363: PUSH
36364: LD_INT 91
36366: PUSH
36367: LD_VAR 0 1
36371: PUSH
36372: LD_INT 10
36374: PUSH
36375: EMPTY
36376: LIST
36377: LIST
36378: LIST
36379: PUSH
36380: EMPTY
36381: LIST
36382: LIST
36383: LIST
36384: PPUSH
36385: CALL_OW 69
36389: NOT
36390: IFFALSE 36400
// weapon := ru_time_lapser ;
36392: LD_ADDR_VAR 0 18
36396: PUSH
36397: LD_INT 49
36399: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
36400: LD_VAR 0 12
36404: PUSH
36405: LD_INT 1
36407: PUSH
36408: LD_INT 2
36410: PUSH
36411: EMPTY
36412: LIST
36413: LIST
36414: IN
36415: PUSH
36416: LD_INT 11
36418: PUSH
36419: LD_VAR 0 5
36423: IN
36424: PUSH
36425: LD_INT 30
36427: PUSH
36428: LD_VAR 0 5
36432: IN
36433: OR
36434: AND
36435: PUSH
36436: LD_INT 6
36438: PPUSH
36439: LD_VAR 0 16
36443: PPUSH
36444: CALL_OW 321
36448: PUSH
36449: LD_INT 2
36451: EQUAL
36452: AND
36453: IFFALSE 36618
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
36455: LD_INT 22
36457: PUSH
36458: LD_VAR 0 16
36462: PUSH
36463: EMPTY
36464: LIST
36465: LIST
36466: PUSH
36467: LD_INT 2
36469: PUSH
36470: LD_INT 35
36472: PUSH
36473: LD_INT 11
36475: PUSH
36476: EMPTY
36477: LIST
36478: LIST
36479: PUSH
36480: LD_INT 35
36482: PUSH
36483: LD_INT 30
36485: PUSH
36486: EMPTY
36487: LIST
36488: LIST
36489: PUSH
36490: EMPTY
36491: LIST
36492: LIST
36493: LIST
36494: PUSH
36495: LD_INT 91
36497: PUSH
36498: LD_VAR 0 1
36502: PUSH
36503: LD_INT 18
36505: PUSH
36506: EMPTY
36507: LIST
36508: LIST
36509: LIST
36510: PUSH
36511: EMPTY
36512: LIST
36513: LIST
36514: LIST
36515: PPUSH
36516: CALL_OW 69
36520: NOT
36521: PUSH
36522: LD_INT 22
36524: PUSH
36525: LD_VAR 0 16
36529: PUSH
36530: EMPTY
36531: LIST
36532: LIST
36533: PUSH
36534: LD_INT 2
36536: PUSH
36537: LD_INT 30
36539: PUSH
36540: LD_INT 32
36542: PUSH
36543: EMPTY
36544: LIST
36545: LIST
36546: PUSH
36547: LD_INT 30
36549: PUSH
36550: LD_INT 33
36552: PUSH
36553: EMPTY
36554: LIST
36555: LIST
36556: PUSH
36557: EMPTY
36558: LIST
36559: LIST
36560: LIST
36561: PUSH
36562: LD_INT 91
36564: PUSH
36565: LD_VAR 0 1
36569: PUSH
36570: LD_INT 12
36572: PUSH
36573: EMPTY
36574: LIST
36575: LIST
36576: LIST
36577: PUSH
36578: EMPTY
36579: LIST
36580: LIST
36581: LIST
36582: PUSH
36583: EMPTY
36584: LIST
36585: PPUSH
36586: CALL_OW 69
36590: PUSH
36591: LD_INT 2
36593: GREATER
36594: AND
36595: IFFALSE 36618
// weapon := [ us_radar , ar_radar ] [ nat ] ;
36597: LD_ADDR_VAR 0 18
36601: PUSH
36602: LD_INT 11
36604: PUSH
36605: LD_INT 30
36607: PUSH
36608: EMPTY
36609: LIST
36610: LIST
36611: PUSH
36612: LD_VAR 0 12
36616: ARRAY
36617: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
36618: LD_VAR 0 18
36622: NOT
36623: PUSH
36624: LD_INT 40
36626: PPUSH
36627: LD_VAR 0 16
36631: PPUSH
36632: CALL_OW 321
36636: PUSH
36637: LD_INT 2
36639: EQUAL
36640: AND
36641: PUSH
36642: LD_INT 7
36644: PUSH
36645: LD_VAR 0 5
36649: IN
36650: PUSH
36651: LD_INT 28
36653: PUSH
36654: LD_VAR 0 5
36658: IN
36659: OR
36660: PUSH
36661: LD_INT 45
36663: PUSH
36664: LD_VAR 0 5
36668: IN
36669: OR
36670: AND
36671: IFFALSE 36925
// begin hex := GetHexInfo ( x , y ) ;
36673: LD_ADDR_VAR 0 4
36677: PUSH
36678: LD_VAR 0 10
36682: PPUSH
36683: LD_VAR 0 11
36687: PPUSH
36688: CALL_OW 546
36692: ST_TO_ADDR
// if hex [ 1 ] then
36693: LD_VAR 0 4
36697: PUSH
36698: LD_INT 1
36700: ARRAY
36701: IFFALSE 36705
// exit ;
36703: GO 37108
// height := hex [ 2 ] ;
36705: LD_ADDR_VAR 0 15
36709: PUSH
36710: LD_VAR 0 4
36714: PUSH
36715: LD_INT 2
36717: ARRAY
36718: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
36719: LD_ADDR_VAR 0 14
36723: PUSH
36724: LD_INT 0
36726: PUSH
36727: LD_INT 2
36729: PUSH
36730: LD_INT 3
36732: PUSH
36733: LD_INT 5
36735: PUSH
36736: EMPTY
36737: LIST
36738: LIST
36739: LIST
36740: LIST
36741: ST_TO_ADDR
// for i in tmp do
36742: LD_ADDR_VAR 0 8
36746: PUSH
36747: LD_VAR 0 14
36751: PUSH
36752: FOR_IN
36753: IFFALSE 36923
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
36755: LD_ADDR_VAR 0 9
36759: PUSH
36760: LD_VAR 0 10
36764: PPUSH
36765: LD_VAR 0 8
36769: PPUSH
36770: LD_INT 5
36772: PPUSH
36773: CALL_OW 272
36777: PUSH
36778: LD_VAR 0 11
36782: PPUSH
36783: LD_VAR 0 8
36787: PPUSH
36788: LD_INT 5
36790: PPUSH
36791: CALL_OW 273
36795: PUSH
36796: EMPTY
36797: LIST
36798: LIST
36799: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
36800: LD_VAR 0 9
36804: PUSH
36805: LD_INT 1
36807: ARRAY
36808: PPUSH
36809: LD_VAR 0 9
36813: PUSH
36814: LD_INT 2
36816: ARRAY
36817: PPUSH
36818: CALL_OW 488
36822: IFFALSE 36921
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
36824: LD_ADDR_VAR 0 4
36828: PUSH
36829: LD_VAR 0 9
36833: PUSH
36834: LD_INT 1
36836: ARRAY
36837: PPUSH
36838: LD_VAR 0 9
36842: PUSH
36843: LD_INT 2
36845: ARRAY
36846: PPUSH
36847: CALL_OW 546
36851: ST_TO_ADDR
// if hex [ 1 ] then
36852: LD_VAR 0 4
36856: PUSH
36857: LD_INT 1
36859: ARRAY
36860: IFFALSE 36864
// continue ;
36862: GO 36752
// h := hex [ 2 ] ;
36864: LD_ADDR_VAR 0 13
36868: PUSH
36869: LD_VAR 0 4
36873: PUSH
36874: LD_INT 2
36876: ARRAY
36877: ST_TO_ADDR
// if h + 7 < height then
36878: LD_VAR 0 13
36882: PUSH
36883: LD_INT 7
36885: PLUS
36886: PUSH
36887: LD_VAR 0 15
36891: LESS
36892: IFFALSE 36921
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
36894: LD_ADDR_VAR 0 18
36898: PUSH
36899: LD_INT 7
36901: PUSH
36902: LD_INT 28
36904: PUSH
36905: LD_INT 45
36907: PUSH
36908: EMPTY
36909: LIST
36910: LIST
36911: LIST
36912: PUSH
36913: LD_VAR 0 12
36917: ARRAY
36918: ST_TO_ADDR
// break ;
36919: GO 36923
// end ; end ; end ;
36921: GO 36752
36923: POP
36924: POP
// end ; if not weapon then
36925: LD_VAR 0 18
36929: NOT
36930: IFFALSE 36990
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
36932: LD_ADDR_VAR 0 5
36936: PUSH
36937: LD_VAR 0 5
36941: PUSH
36942: LD_INT 11
36944: PUSH
36945: LD_INT 30
36947: PUSH
36948: LD_INT 49
36950: PUSH
36951: EMPTY
36952: LIST
36953: LIST
36954: LIST
36955: DIFF
36956: ST_TO_ADDR
// if not list then
36957: LD_VAR 0 5
36961: NOT
36962: IFFALSE 36966
// exit ;
36964: GO 37108
// weapon := list [ rand ( 1 , list ) ] ;
36966: LD_ADDR_VAR 0 18
36970: PUSH
36971: LD_VAR 0 5
36975: PUSH
36976: LD_INT 1
36978: PPUSH
36979: LD_VAR 0 5
36983: PPUSH
36984: CALL_OW 12
36988: ARRAY
36989: ST_TO_ADDR
// end ; if weapon then
36990: LD_VAR 0 18
36994: IFFALSE 37108
// begin tmp := CostOfWeapon ( weapon ) ;
36996: LD_ADDR_VAR 0 14
37000: PUSH
37001: LD_VAR 0 18
37005: PPUSH
37006: CALL_OW 451
37010: ST_TO_ADDR
// j := GetBase ( tower ) ;
37011: LD_ADDR_VAR 0 9
37015: PUSH
37016: LD_VAR 0 1
37020: PPUSH
37021: CALL_OW 274
37025: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
37026: LD_VAR 0 9
37030: PPUSH
37031: LD_INT 1
37033: PPUSH
37034: CALL_OW 275
37038: PUSH
37039: LD_VAR 0 14
37043: PUSH
37044: LD_INT 1
37046: ARRAY
37047: GREATEREQUAL
37048: PUSH
37049: LD_VAR 0 9
37053: PPUSH
37054: LD_INT 2
37056: PPUSH
37057: CALL_OW 275
37061: PUSH
37062: LD_VAR 0 14
37066: PUSH
37067: LD_INT 2
37069: ARRAY
37070: GREATEREQUAL
37071: AND
37072: PUSH
37073: LD_VAR 0 9
37077: PPUSH
37078: LD_INT 3
37080: PPUSH
37081: CALL_OW 275
37085: PUSH
37086: LD_VAR 0 14
37090: PUSH
37091: LD_INT 3
37093: ARRAY
37094: GREATEREQUAL
37095: AND
37096: IFFALSE 37108
// result := weapon ;
37098: LD_ADDR_VAR 0 3
37102: PUSH
37103: LD_VAR 0 18
37107: ST_TO_ADDR
// end ; end ;
37108: LD_VAR 0 3
37112: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
37113: LD_INT 0
37115: PPUSH
37116: PPUSH
// result := true ;
37117: LD_ADDR_VAR 0 3
37121: PUSH
37122: LD_INT 1
37124: ST_TO_ADDR
// if array1 = array2 then
37125: LD_VAR 0 1
37129: PUSH
37130: LD_VAR 0 2
37134: EQUAL
37135: IFFALSE 37195
// begin for i = 1 to array1 do
37137: LD_ADDR_VAR 0 4
37141: PUSH
37142: DOUBLE
37143: LD_INT 1
37145: DEC
37146: ST_TO_ADDR
37147: LD_VAR 0 1
37151: PUSH
37152: FOR_TO
37153: IFFALSE 37191
// if array1 [ i ] <> array2 [ i ] then
37155: LD_VAR 0 1
37159: PUSH
37160: LD_VAR 0 4
37164: ARRAY
37165: PUSH
37166: LD_VAR 0 2
37170: PUSH
37171: LD_VAR 0 4
37175: ARRAY
37176: NONEQUAL
37177: IFFALSE 37189
// begin result := false ;
37179: LD_ADDR_VAR 0 3
37183: PUSH
37184: LD_INT 0
37186: ST_TO_ADDR
// break ;
37187: GO 37191
// end ;
37189: GO 37152
37191: POP
37192: POP
// end else
37193: GO 37203
// result := false ;
37195: LD_ADDR_VAR 0 3
37199: PUSH
37200: LD_INT 0
37202: ST_TO_ADDR
// end ;
37203: LD_VAR 0 3
37207: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
37208: LD_INT 0
37210: PPUSH
37211: PPUSH
// if not array1 or not array2 then
37212: LD_VAR 0 1
37216: NOT
37217: PUSH
37218: LD_VAR 0 2
37222: NOT
37223: OR
37224: IFFALSE 37228
// exit ;
37226: GO 37292
// result := true ;
37228: LD_ADDR_VAR 0 3
37232: PUSH
37233: LD_INT 1
37235: ST_TO_ADDR
// for i = 1 to array1 do
37236: LD_ADDR_VAR 0 4
37240: PUSH
37241: DOUBLE
37242: LD_INT 1
37244: DEC
37245: ST_TO_ADDR
37246: LD_VAR 0 1
37250: PUSH
37251: FOR_TO
37252: IFFALSE 37290
// if array1 [ i ] <> array2 [ i ] then
37254: LD_VAR 0 1
37258: PUSH
37259: LD_VAR 0 4
37263: ARRAY
37264: PUSH
37265: LD_VAR 0 2
37269: PUSH
37270: LD_VAR 0 4
37274: ARRAY
37275: NONEQUAL
37276: IFFALSE 37288
// begin result := false ;
37278: LD_ADDR_VAR 0 3
37282: PUSH
37283: LD_INT 0
37285: ST_TO_ADDR
// break ;
37286: GO 37290
// end ;
37288: GO 37251
37290: POP
37291: POP
// end ;
37292: LD_VAR 0 3
37296: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
37297: LD_INT 0
37299: PPUSH
37300: PPUSH
37301: PPUSH
// pom := GetBase ( fac ) ;
37302: LD_ADDR_VAR 0 5
37306: PUSH
37307: LD_VAR 0 1
37311: PPUSH
37312: CALL_OW 274
37316: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
37317: LD_ADDR_VAR 0 4
37321: PUSH
37322: LD_VAR 0 2
37326: PUSH
37327: LD_INT 1
37329: ARRAY
37330: PPUSH
37331: LD_VAR 0 2
37335: PUSH
37336: LD_INT 2
37338: ARRAY
37339: PPUSH
37340: LD_VAR 0 2
37344: PUSH
37345: LD_INT 3
37347: ARRAY
37348: PPUSH
37349: LD_VAR 0 2
37353: PUSH
37354: LD_INT 4
37356: ARRAY
37357: PPUSH
37358: CALL_OW 449
37362: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37363: LD_ADDR_VAR 0 3
37367: PUSH
37368: LD_VAR 0 5
37372: PPUSH
37373: LD_INT 1
37375: PPUSH
37376: CALL_OW 275
37380: PUSH
37381: LD_VAR 0 4
37385: PUSH
37386: LD_INT 1
37388: ARRAY
37389: GREATEREQUAL
37390: PUSH
37391: LD_VAR 0 5
37395: PPUSH
37396: LD_INT 2
37398: PPUSH
37399: CALL_OW 275
37403: PUSH
37404: LD_VAR 0 4
37408: PUSH
37409: LD_INT 2
37411: ARRAY
37412: GREATEREQUAL
37413: AND
37414: PUSH
37415: LD_VAR 0 5
37419: PPUSH
37420: LD_INT 3
37422: PPUSH
37423: CALL_OW 275
37427: PUSH
37428: LD_VAR 0 4
37432: PUSH
37433: LD_INT 3
37435: ARRAY
37436: GREATEREQUAL
37437: AND
37438: ST_TO_ADDR
// end ;
37439: LD_VAR 0 3
37443: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
37444: LD_INT 0
37446: PPUSH
37447: PPUSH
37448: PPUSH
37449: PPUSH
// pom := GetBase ( building ) ;
37450: LD_ADDR_VAR 0 3
37454: PUSH
37455: LD_VAR 0 1
37459: PPUSH
37460: CALL_OW 274
37464: ST_TO_ADDR
// if not pom then
37465: LD_VAR 0 3
37469: NOT
37470: IFFALSE 37474
// exit ;
37472: GO 37644
// btype := GetBType ( building ) ;
37474: LD_ADDR_VAR 0 5
37478: PUSH
37479: LD_VAR 0 1
37483: PPUSH
37484: CALL_OW 266
37488: ST_TO_ADDR
// if btype = b_armoury then
37489: LD_VAR 0 5
37493: PUSH
37494: LD_INT 4
37496: EQUAL
37497: IFFALSE 37507
// btype := b_barracks ;
37499: LD_ADDR_VAR 0 5
37503: PUSH
37504: LD_INT 5
37506: ST_TO_ADDR
// if btype = b_depot then
37507: LD_VAR 0 5
37511: PUSH
37512: LD_INT 0
37514: EQUAL
37515: IFFALSE 37525
// btype := b_warehouse ;
37517: LD_ADDR_VAR 0 5
37521: PUSH
37522: LD_INT 1
37524: ST_TO_ADDR
// if btype = b_workshop then
37525: LD_VAR 0 5
37529: PUSH
37530: LD_INT 2
37532: EQUAL
37533: IFFALSE 37543
// btype := b_factory ;
37535: LD_ADDR_VAR 0 5
37539: PUSH
37540: LD_INT 3
37542: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37543: LD_ADDR_VAR 0 4
37547: PUSH
37548: LD_VAR 0 5
37552: PPUSH
37553: LD_VAR 0 1
37557: PPUSH
37558: CALL_OW 248
37562: PPUSH
37563: CALL_OW 450
37567: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37568: LD_ADDR_VAR 0 2
37572: PUSH
37573: LD_VAR 0 3
37577: PPUSH
37578: LD_INT 1
37580: PPUSH
37581: CALL_OW 275
37585: PUSH
37586: LD_VAR 0 4
37590: PUSH
37591: LD_INT 1
37593: ARRAY
37594: GREATEREQUAL
37595: PUSH
37596: LD_VAR 0 3
37600: PPUSH
37601: LD_INT 2
37603: PPUSH
37604: CALL_OW 275
37608: PUSH
37609: LD_VAR 0 4
37613: PUSH
37614: LD_INT 2
37616: ARRAY
37617: GREATEREQUAL
37618: AND
37619: PUSH
37620: LD_VAR 0 3
37624: PPUSH
37625: LD_INT 3
37627: PPUSH
37628: CALL_OW 275
37632: PUSH
37633: LD_VAR 0 4
37637: PUSH
37638: LD_INT 3
37640: ARRAY
37641: GREATEREQUAL
37642: AND
37643: ST_TO_ADDR
// end ;
37644: LD_VAR 0 2
37648: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
37649: LD_INT 0
37651: PPUSH
37652: PPUSH
37653: PPUSH
// pom := GetBase ( building ) ;
37654: LD_ADDR_VAR 0 4
37658: PUSH
37659: LD_VAR 0 1
37663: PPUSH
37664: CALL_OW 274
37668: ST_TO_ADDR
// if not pom then
37669: LD_VAR 0 4
37673: NOT
37674: IFFALSE 37678
// exit ;
37676: GO 37779
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37678: LD_ADDR_VAR 0 5
37682: PUSH
37683: LD_VAR 0 2
37687: PPUSH
37688: LD_VAR 0 1
37692: PPUSH
37693: CALL_OW 248
37697: PPUSH
37698: CALL_OW 450
37702: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37703: LD_ADDR_VAR 0 3
37707: PUSH
37708: LD_VAR 0 4
37712: PPUSH
37713: LD_INT 1
37715: PPUSH
37716: CALL_OW 275
37720: PUSH
37721: LD_VAR 0 5
37725: PUSH
37726: LD_INT 1
37728: ARRAY
37729: GREATEREQUAL
37730: PUSH
37731: LD_VAR 0 4
37735: PPUSH
37736: LD_INT 2
37738: PPUSH
37739: CALL_OW 275
37743: PUSH
37744: LD_VAR 0 5
37748: PUSH
37749: LD_INT 2
37751: ARRAY
37752: GREATEREQUAL
37753: AND
37754: PUSH
37755: LD_VAR 0 4
37759: PPUSH
37760: LD_INT 3
37762: PPUSH
37763: CALL_OW 275
37767: PUSH
37768: LD_VAR 0 5
37772: PUSH
37773: LD_INT 3
37775: ARRAY
37776: GREATEREQUAL
37777: AND
37778: ST_TO_ADDR
// end ;
37779: LD_VAR 0 3
37783: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
37784: LD_INT 0
37786: PPUSH
37787: PPUSH
37788: PPUSH
37789: PPUSH
37790: PPUSH
37791: PPUSH
37792: PPUSH
37793: PPUSH
37794: PPUSH
37795: PPUSH
37796: PPUSH
// result := false ;
37797: LD_ADDR_VAR 0 8
37801: PUSH
37802: LD_INT 0
37804: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
37805: LD_VAR 0 5
37809: NOT
37810: PUSH
37811: LD_VAR 0 1
37815: NOT
37816: OR
37817: PUSH
37818: LD_VAR 0 2
37822: NOT
37823: OR
37824: PUSH
37825: LD_VAR 0 3
37829: NOT
37830: OR
37831: IFFALSE 37835
// exit ;
37833: GO 38649
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
37835: LD_ADDR_VAR 0 14
37839: PUSH
37840: LD_VAR 0 1
37844: PPUSH
37845: LD_VAR 0 2
37849: PPUSH
37850: LD_VAR 0 3
37854: PPUSH
37855: LD_VAR 0 4
37859: PPUSH
37860: LD_VAR 0 5
37864: PUSH
37865: LD_INT 1
37867: ARRAY
37868: PPUSH
37869: CALL_OW 248
37873: PPUSH
37874: LD_INT 0
37876: PPUSH
37877: CALL 39902 0 6
37881: ST_TO_ADDR
// if not hexes then
37882: LD_VAR 0 14
37886: NOT
37887: IFFALSE 37891
// exit ;
37889: GO 38649
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
37891: LD_ADDR_VAR 0 17
37895: PUSH
37896: LD_VAR 0 5
37900: PPUSH
37901: LD_INT 22
37903: PUSH
37904: LD_VAR 0 13
37908: PPUSH
37909: CALL_OW 255
37913: PUSH
37914: EMPTY
37915: LIST
37916: LIST
37917: PUSH
37918: LD_INT 2
37920: PUSH
37921: LD_INT 30
37923: PUSH
37924: LD_INT 0
37926: PUSH
37927: EMPTY
37928: LIST
37929: LIST
37930: PUSH
37931: LD_INT 30
37933: PUSH
37934: LD_INT 1
37936: PUSH
37937: EMPTY
37938: LIST
37939: LIST
37940: PUSH
37941: EMPTY
37942: LIST
37943: LIST
37944: LIST
37945: PUSH
37946: EMPTY
37947: LIST
37948: LIST
37949: PPUSH
37950: CALL_OW 72
37954: ST_TO_ADDR
// for i = 1 to hexes do
37955: LD_ADDR_VAR 0 9
37959: PUSH
37960: DOUBLE
37961: LD_INT 1
37963: DEC
37964: ST_TO_ADDR
37965: LD_VAR 0 14
37969: PUSH
37970: FOR_TO
37971: IFFALSE 38647
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37973: LD_ADDR_VAR 0 13
37977: PUSH
37978: LD_VAR 0 14
37982: PUSH
37983: LD_VAR 0 9
37987: ARRAY
37988: PUSH
37989: LD_INT 1
37991: ARRAY
37992: PPUSH
37993: LD_VAR 0 14
37997: PUSH
37998: LD_VAR 0 9
38002: ARRAY
38003: PUSH
38004: LD_INT 2
38006: ARRAY
38007: PPUSH
38008: CALL_OW 428
38012: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
38013: LD_VAR 0 14
38017: PUSH
38018: LD_VAR 0 9
38022: ARRAY
38023: PUSH
38024: LD_INT 1
38026: ARRAY
38027: PPUSH
38028: LD_VAR 0 14
38032: PUSH
38033: LD_VAR 0 9
38037: ARRAY
38038: PUSH
38039: LD_INT 2
38041: ARRAY
38042: PPUSH
38043: CALL_OW 351
38047: PUSH
38048: LD_VAR 0 14
38052: PUSH
38053: LD_VAR 0 9
38057: ARRAY
38058: PUSH
38059: LD_INT 1
38061: ARRAY
38062: PPUSH
38063: LD_VAR 0 14
38067: PUSH
38068: LD_VAR 0 9
38072: ARRAY
38073: PUSH
38074: LD_INT 2
38076: ARRAY
38077: PPUSH
38078: CALL_OW 488
38082: NOT
38083: OR
38084: PUSH
38085: LD_VAR 0 13
38089: PPUSH
38090: CALL_OW 247
38094: PUSH
38095: LD_INT 3
38097: EQUAL
38098: OR
38099: IFFALSE 38105
// exit ;
38101: POP
38102: POP
38103: GO 38649
// if not tmp then
38105: LD_VAR 0 13
38109: NOT
38110: IFFALSE 38114
// continue ;
38112: GO 37970
// result := true ;
38114: LD_ADDR_VAR 0 8
38118: PUSH
38119: LD_INT 1
38121: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
38122: LD_VAR 0 6
38126: PUSH
38127: LD_VAR 0 13
38131: PPUSH
38132: CALL_OW 247
38136: PUSH
38137: LD_INT 2
38139: EQUAL
38140: AND
38141: PUSH
38142: LD_VAR 0 13
38146: PPUSH
38147: CALL_OW 263
38151: PUSH
38152: LD_INT 1
38154: EQUAL
38155: AND
38156: IFFALSE 38320
// begin if IsDrivenBy ( tmp ) then
38158: LD_VAR 0 13
38162: PPUSH
38163: CALL_OW 311
38167: IFFALSE 38171
// continue ;
38169: GO 37970
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
38171: LD_VAR 0 6
38175: PPUSH
38176: LD_INT 3
38178: PUSH
38179: LD_INT 60
38181: PUSH
38182: EMPTY
38183: LIST
38184: PUSH
38185: EMPTY
38186: LIST
38187: LIST
38188: PUSH
38189: LD_INT 3
38191: PUSH
38192: LD_INT 55
38194: PUSH
38195: EMPTY
38196: LIST
38197: PUSH
38198: EMPTY
38199: LIST
38200: LIST
38201: PUSH
38202: EMPTY
38203: LIST
38204: LIST
38205: PPUSH
38206: CALL_OW 72
38210: IFFALSE 38318
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
38212: LD_ADDR_VAR 0 18
38216: PUSH
38217: LD_VAR 0 6
38221: PPUSH
38222: LD_INT 3
38224: PUSH
38225: LD_INT 60
38227: PUSH
38228: EMPTY
38229: LIST
38230: PUSH
38231: EMPTY
38232: LIST
38233: LIST
38234: PUSH
38235: LD_INT 3
38237: PUSH
38238: LD_INT 55
38240: PUSH
38241: EMPTY
38242: LIST
38243: PUSH
38244: EMPTY
38245: LIST
38246: LIST
38247: PUSH
38248: EMPTY
38249: LIST
38250: LIST
38251: PPUSH
38252: CALL_OW 72
38256: PUSH
38257: LD_INT 1
38259: ARRAY
38260: ST_TO_ADDR
// if IsInUnit ( driver ) then
38261: LD_VAR 0 18
38265: PPUSH
38266: CALL_OW 310
38270: IFFALSE 38281
// ComExit ( driver ) ;
38272: LD_VAR 0 18
38276: PPUSH
38277: CALL 63681 0 1
// AddComEnterUnit ( driver , tmp ) ;
38281: LD_VAR 0 18
38285: PPUSH
38286: LD_VAR 0 13
38290: PPUSH
38291: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
38295: LD_VAR 0 18
38299: PPUSH
38300: LD_VAR 0 7
38304: PPUSH
38305: CALL_OW 173
// AddComExitVehicle ( driver ) ;
38309: LD_VAR 0 18
38313: PPUSH
38314: CALL_OW 181
// end ; continue ;
38318: GO 37970
// end ; if not cleaners or not tmp in cleaners then
38320: LD_VAR 0 6
38324: NOT
38325: PUSH
38326: LD_VAR 0 13
38330: PUSH
38331: LD_VAR 0 6
38335: IN
38336: NOT
38337: OR
38338: IFFALSE 38645
// begin if dep then
38340: LD_VAR 0 17
38344: IFFALSE 38480
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
38346: LD_ADDR_VAR 0 16
38350: PUSH
38351: LD_VAR 0 17
38355: PUSH
38356: LD_INT 1
38358: ARRAY
38359: PPUSH
38360: CALL_OW 250
38364: PPUSH
38365: LD_VAR 0 17
38369: PUSH
38370: LD_INT 1
38372: ARRAY
38373: PPUSH
38374: CALL_OW 254
38378: PPUSH
38379: LD_INT 5
38381: PPUSH
38382: CALL_OW 272
38386: PUSH
38387: LD_VAR 0 17
38391: PUSH
38392: LD_INT 1
38394: ARRAY
38395: PPUSH
38396: CALL_OW 251
38400: PPUSH
38401: LD_VAR 0 17
38405: PUSH
38406: LD_INT 1
38408: ARRAY
38409: PPUSH
38410: CALL_OW 254
38414: PPUSH
38415: LD_INT 5
38417: PPUSH
38418: CALL_OW 273
38422: PUSH
38423: EMPTY
38424: LIST
38425: LIST
38426: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
38427: LD_VAR 0 16
38431: PUSH
38432: LD_INT 1
38434: ARRAY
38435: PPUSH
38436: LD_VAR 0 16
38440: PUSH
38441: LD_INT 2
38443: ARRAY
38444: PPUSH
38445: CALL_OW 488
38449: IFFALSE 38480
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
38451: LD_VAR 0 13
38455: PPUSH
38456: LD_VAR 0 16
38460: PUSH
38461: LD_INT 1
38463: ARRAY
38464: PPUSH
38465: LD_VAR 0 16
38469: PUSH
38470: LD_INT 2
38472: ARRAY
38473: PPUSH
38474: CALL_OW 111
// continue ;
38478: GO 37970
// end ; end ; r := GetDir ( tmp ) ;
38480: LD_ADDR_VAR 0 15
38484: PUSH
38485: LD_VAR 0 13
38489: PPUSH
38490: CALL_OW 254
38494: ST_TO_ADDR
// if r = 5 then
38495: LD_VAR 0 15
38499: PUSH
38500: LD_INT 5
38502: EQUAL
38503: IFFALSE 38513
// r := 0 ;
38505: LD_ADDR_VAR 0 15
38509: PUSH
38510: LD_INT 0
38512: ST_TO_ADDR
// for j = r to 5 do
38513: LD_ADDR_VAR 0 10
38517: PUSH
38518: DOUBLE
38519: LD_VAR 0 15
38523: DEC
38524: ST_TO_ADDR
38525: LD_INT 5
38527: PUSH
38528: FOR_TO
38529: IFFALSE 38643
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
38531: LD_ADDR_VAR 0 11
38535: PUSH
38536: LD_VAR 0 13
38540: PPUSH
38541: CALL_OW 250
38545: PPUSH
38546: LD_VAR 0 10
38550: PPUSH
38551: LD_INT 2
38553: PPUSH
38554: CALL_OW 272
38558: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
38559: LD_ADDR_VAR 0 12
38563: PUSH
38564: LD_VAR 0 13
38568: PPUSH
38569: CALL_OW 251
38573: PPUSH
38574: LD_VAR 0 10
38578: PPUSH
38579: LD_INT 2
38581: PPUSH
38582: CALL_OW 273
38586: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
38587: LD_VAR 0 11
38591: PPUSH
38592: LD_VAR 0 12
38596: PPUSH
38597: CALL_OW 488
38601: PUSH
38602: LD_VAR 0 11
38606: PPUSH
38607: LD_VAR 0 12
38611: PPUSH
38612: CALL_OW 428
38616: NOT
38617: AND
38618: IFFALSE 38641
// begin ComMoveXY ( tmp , _x , _y ) ;
38620: LD_VAR 0 13
38624: PPUSH
38625: LD_VAR 0 11
38629: PPUSH
38630: LD_VAR 0 12
38634: PPUSH
38635: CALL_OW 111
// break ;
38639: GO 38643
// end ; end ;
38641: GO 38528
38643: POP
38644: POP
// end ; end ;
38645: GO 37970
38647: POP
38648: POP
// end ;
38649: LD_VAR 0 8
38653: RET
// export function BuildingTechInvented ( side , btype ) ; begin
38654: LD_INT 0
38656: PPUSH
// result := true ;
38657: LD_ADDR_VAR 0 3
38661: PUSH
38662: LD_INT 1
38664: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
38665: LD_VAR 0 2
38669: PUSH
38670: LD_INT 24
38672: DOUBLE
38673: EQUAL
38674: IFTRUE 38684
38676: LD_INT 33
38678: DOUBLE
38679: EQUAL
38680: IFTRUE 38684
38682: GO 38709
38684: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
38685: LD_ADDR_VAR 0 3
38689: PUSH
38690: LD_INT 32
38692: PPUSH
38693: LD_VAR 0 1
38697: PPUSH
38698: CALL_OW 321
38702: PUSH
38703: LD_INT 2
38705: EQUAL
38706: ST_TO_ADDR
38707: GO 39025
38709: LD_INT 20
38711: DOUBLE
38712: EQUAL
38713: IFTRUE 38717
38715: GO 38742
38717: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
38718: LD_ADDR_VAR 0 3
38722: PUSH
38723: LD_INT 6
38725: PPUSH
38726: LD_VAR 0 1
38730: PPUSH
38731: CALL_OW 321
38735: PUSH
38736: LD_INT 2
38738: EQUAL
38739: ST_TO_ADDR
38740: GO 39025
38742: LD_INT 22
38744: DOUBLE
38745: EQUAL
38746: IFTRUE 38756
38748: LD_INT 36
38750: DOUBLE
38751: EQUAL
38752: IFTRUE 38756
38754: GO 38781
38756: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
38757: LD_ADDR_VAR 0 3
38761: PUSH
38762: LD_INT 15
38764: PPUSH
38765: LD_VAR 0 1
38769: PPUSH
38770: CALL_OW 321
38774: PUSH
38775: LD_INT 2
38777: EQUAL
38778: ST_TO_ADDR
38779: GO 39025
38781: LD_INT 30
38783: DOUBLE
38784: EQUAL
38785: IFTRUE 38789
38787: GO 38814
38789: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
38790: LD_ADDR_VAR 0 3
38794: PUSH
38795: LD_INT 20
38797: PPUSH
38798: LD_VAR 0 1
38802: PPUSH
38803: CALL_OW 321
38807: PUSH
38808: LD_INT 2
38810: EQUAL
38811: ST_TO_ADDR
38812: GO 39025
38814: LD_INT 28
38816: DOUBLE
38817: EQUAL
38818: IFTRUE 38828
38820: LD_INT 21
38822: DOUBLE
38823: EQUAL
38824: IFTRUE 38828
38826: GO 38853
38828: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
38829: LD_ADDR_VAR 0 3
38833: PUSH
38834: LD_INT 21
38836: PPUSH
38837: LD_VAR 0 1
38841: PPUSH
38842: CALL_OW 321
38846: PUSH
38847: LD_INT 2
38849: EQUAL
38850: ST_TO_ADDR
38851: GO 39025
38853: LD_INT 16
38855: DOUBLE
38856: EQUAL
38857: IFTRUE 38861
38859: GO 38886
38861: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
38862: LD_ADDR_VAR 0 3
38866: PUSH
38867: LD_INT 84
38869: PPUSH
38870: LD_VAR 0 1
38874: PPUSH
38875: CALL_OW 321
38879: PUSH
38880: LD_INT 2
38882: EQUAL
38883: ST_TO_ADDR
38884: GO 39025
38886: LD_INT 19
38888: DOUBLE
38889: EQUAL
38890: IFTRUE 38900
38892: LD_INT 23
38894: DOUBLE
38895: EQUAL
38896: IFTRUE 38900
38898: GO 38925
38900: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
38901: LD_ADDR_VAR 0 3
38905: PUSH
38906: LD_INT 83
38908: PPUSH
38909: LD_VAR 0 1
38913: PPUSH
38914: CALL_OW 321
38918: PUSH
38919: LD_INT 2
38921: EQUAL
38922: ST_TO_ADDR
38923: GO 39025
38925: LD_INT 17
38927: DOUBLE
38928: EQUAL
38929: IFTRUE 38933
38931: GO 38958
38933: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
38934: LD_ADDR_VAR 0 3
38938: PUSH
38939: LD_INT 39
38941: PPUSH
38942: LD_VAR 0 1
38946: PPUSH
38947: CALL_OW 321
38951: PUSH
38952: LD_INT 2
38954: EQUAL
38955: ST_TO_ADDR
38956: GO 39025
38958: LD_INT 18
38960: DOUBLE
38961: EQUAL
38962: IFTRUE 38966
38964: GO 38991
38966: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
38967: LD_ADDR_VAR 0 3
38971: PUSH
38972: LD_INT 40
38974: PPUSH
38975: LD_VAR 0 1
38979: PPUSH
38980: CALL_OW 321
38984: PUSH
38985: LD_INT 2
38987: EQUAL
38988: ST_TO_ADDR
38989: GO 39025
38991: LD_INT 27
38993: DOUBLE
38994: EQUAL
38995: IFTRUE 38999
38997: GO 39024
38999: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
39000: LD_ADDR_VAR 0 3
39004: PUSH
39005: LD_INT 35
39007: PPUSH
39008: LD_VAR 0 1
39012: PPUSH
39013: CALL_OW 321
39017: PUSH
39018: LD_INT 2
39020: EQUAL
39021: ST_TO_ADDR
39022: GO 39025
39024: POP
// end ;
39025: LD_VAR 0 3
39029: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
39030: LD_INT 0
39032: PPUSH
39033: PPUSH
39034: PPUSH
39035: PPUSH
39036: PPUSH
39037: PPUSH
39038: PPUSH
39039: PPUSH
39040: PPUSH
39041: PPUSH
39042: PPUSH
// result := false ;
39043: LD_ADDR_VAR 0 6
39047: PUSH
39048: LD_INT 0
39050: ST_TO_ADDR
// if btype = b_depot then
39051: LD_VAR 0 2
39055: PUSH
39056: LD_INT 0
39058: EQUAL
39059: IFFALSE 39071
// begin result := true ;
39061: LD_ADDR_VAR 0 6
39065: PUSH
39066: LD_INT 1
39068: ST_TO_ADDR
// exit ;
39069: GO 39897
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
39071: LD_VAR 0 1
39075: NOT
39076: PUSH
39077: LD_VAR 0 1
39081: PPUSH
39082: CALL_OW 266
39086: PUSH
39087: LD_INT 0
39089: PUSH
39090: LD_INT 1
39092: PUSH
39093: EMPTY
39094: LIST
39095: LIST
39096: IN
39097: NOT
39098: OR
39099: PUSH
39100: LD_VAR 0 2
39104: NOT
39105: OR
39106: PUSH
39107: LD_VAR 0 5
39111: PUSH
39112: LD_INT 0
39114: PUSH
39115: LD_INT 1
39117: PUSH
39118: LD_INT 2
39120: PUSH
39121: LD_INT 3
39123: PUSH
39124: LD_INT 4
39126: PUSH
39127: LD_INT 5
39129: PUSH
39130: EMPTY
39131: LIST
39132: LIST
39133: LIST
39134: LIST
39135: LIST
39136: LIST
39137: IN
39138: NOT
39139: OR
39140: PUSH
39141: LD_VAR 0 3
39145: PPUSH
39146: LD_VAR 0 4
39150: PPUSH
39151: CALL_OW 488
39155: NOT
39156: OR
39157: IFFALSE 39161
// exit ;
39159: GO 39897
// side := GetSide ( depot ) ;
39161: LD_ADDR_VAR 0 9
39165: PUSH
39166: LD_VAR 0 1
39170: PPUSH
39171: CALL_OW 255
39175: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
39176: LD_VAR 0 9
39180: PPUSH
39181: LD_VAR 0 2
39185: PPUSH
39186: CALL 38654 0 2
39190: NOT
39191: IFFALSE 39195
// exit ;
39193: GO 39897
// pom := GetBase ( depot ) ;
39195: LD_ADDR_VAR 0 10
39199: PUSH
39200: LD_VAR 0 1
39204: PPUSH
39205: CALL_OW 274
39209: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
39210: LD_ADDR_VAR 0 11
39214: PUSH
39215: LD_VAR 0 2
39219: PPUSH
39220: LD_VAR 0 1
39224: PPUSH
39225: CALL_OW 248
39229: PPUSH
39230: CALL_OW 450
39234: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
39235: LD_VAR 0 10
39239: PPUSH
39240: LD_INT 1
39242: PPUSH
39243: CALL_OW 275
39247: PUSH
39248: LD_VAR 0 11
39252: PUSH
39253: LD_INT 1
39255: ARRAY
39256: GREATEREQUAL
39257: PUSH
39258: LD_VAR 0 10
39262: PPUSH
39263: LD_INT 2
39265: PPUSH
39266: CALL_OW 275
39270: PUSH
39271: LD_VAR 0 11
39275: PUSH
39276: LD_INT 2
39278: ARRAY
39279: GREATEREQUAL
39280: AND
39281: PUSH
39282: LD_VAR 0 10
39286: PPUSH
39287: LD_INT 3
39289: PPUSH
39290: CALL_OW 275
39294: PUSH
39295: LD_VAR 0 11
39299: PUSH
39300: LD_INT 3
39302: ARRAY
39303: GREATEREQUAL
39304: AND
39305: NOT
39306: IFFALSE 39310
// exit ;
39308: GO 39897
// if GetBType ( depot ) = b_depot then
39310: LD_VAR 0 1
39314: PPUSH
39315: CALL_OW 266
39319: PUSH
39320: LD_INT 0
39322: EQUAL
39323: IFFALSE 39335
// dist := 28 else
39325: LD_ADDR_VAR 0 14
39329: PUSH
39330: LD_INT 28
39332: ST_TO_ADDR
39333: GO 39343
// dist := 36 ;
39335: LD_ADDR_VAR 0 14
39339: PUSH
39340: LD_INT 36
39342: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
39343: LD_VAR 0 1
39347: PPUSH
39348: LD_VAR 0 3
39352: PPUSH
39353: LD_VAR 0 4
39357: PPUSH
39358: CALL_OW 297
39362: PUSH
39363: LD_VAR 0 14
39367: GREATER
39368: IFFALSE 39372
// exit ;
39370: GO 39897
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
39372: LD_ADDR_VAR 0 12
39376: PUSH
39377: LD_VAR 0 2
39381: PPUSH
39382: LD_VAR 0 3
39386: PPUSH
39387: LD_VAR 0 4
39391: PPUSH
39392: LD_VAR 0 5
39396: PPUSH
39397: LD_VAR 0 1
39401: PPUSH
39402: CALL_OW 248
39406: PPUSH
39407: LD_INT 0
39409: PPUSH
39410: CALL 39902 0 6
39414: ST_TO_ADDR
// if not hexes then
39415: LD_VAR 0 12
39419: NOT
39420: IFFALSE 39424
// exit ;
39422: GO 39897
// hex := GetHexInfo ( x , y ) ;
39424: LD_ADDR_VAR 0 15
39428: PUSH
39429: LD_VAR 0 3
39433: PPUSH
39434: LD_VAR 0 4
39438: PPUSH
39439: CALL_OW 546
39443: ST_TO_ADDR
// if hex [ 1 ] then
39444: LD_VAR 0 15
39448: PUSH
39449: LD_INT 1
39451: ARRAY
39452: IFFALSE 39456
// exit ;
39454: GO 39897
// height := hex [ 2 ] ;
39456: LD_ADDR_VAR 0 13
39460: PUSH
39461: LD_VAR 0 15
39465: PUSH
39466: LD_INT 2
39468: ARRAY
39469: ST_TO_ADDR
// for i = 1 to hexes do
39470: LD_ADDR_VAR 0 7
39474: PUSH
39475: DOUBLE
39476: LD_INT 1
39478: DEC
39479: ST_TO_ADDR
39480: LD_VAR 0 12
39484: PUSH
39485: FOR_TO
39486: IFFALSE 39816
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
39488: LD_VAR 0 12
39492: PUSH
39493: LD_VAR 0 7
39497: ARRAY
39498: PUSH
39499: LD_INT 1
39501: ARRAY
39502: PPUSH
39503: LD_VAR 0 12
39507: PUSH
39508: LD_VAR 0 7
39512: ARRAY
39513: PUSH
39514: LD_INT 2
39516: ARRAY
39517: PPUSH
39518: CALL_OW 488
39522: NOT
39523: PUSH
39524: LD_VAR 0 12
39528: PUSH
39529: LD_VAR 0 7
39533: ARRAY
39534: PUSH
39535: LD_INT 1
39537: ARRAY
39538: PPUSH
39539: LD_VAR 0 12
39543: PUSH
39544: LD_VAR 0 7
39548: ARRAY
39549: PUSH
39550: LD_INT 2
39552: ARRAY
39553: PPUSH
39554: CALL_OW 428
39558: PUSH
39559: LD_INT 0
39561: GREATER
39562: OR
39563: PUSH
39564: LD_VAR 0 12
39568: PUSH
39569: LD_VAR 0 7
39573: ARRAY
39574: PUSH
39575: LD_INT 1
39577: ARRAY
39578: PPUSH
39579: LD_VAR 0 12
39583: PUSH
39584: LD_VAR 0 7
39588: ARRAY
39589: PUSH
39590: LD_INT 2
39592: ARRAY
39593: PPUSH
39594: CALL_OW 351
39598: OR
39599: IFFALSE 39605
// exit ;
39601: POP
39602: POP
39603: GO 39897
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39605: LD_ADDR_VAR 0 8
39609: PUSH
39610: LD_VAR 0 12
39614: PUSH
39615: LD_VAR 0 7
39619: ARRAY
39620: PUSH
39621: LD_INT 1
39623: ARRAY
39624: PPUSH
39625: LD_VAR 0 12
39629: PUSH
39630: LD_VAR 0 7
39634: ARRAY
39635: PUSH
39636: LD_INT 2
39638: ARRAY
39639: PPUSH
39640: CALL_OW 546
39644: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
39645: LD_VAR 0 8
39649: PUSH
39650: LD_INT 1
39652: ARRAY
39653: PUSH
39654: LD_VAR 0 8
39658: PUSH
39659: LD_INT 2
39661: ARRAY
39662: PUSH
39663: LD_VAR 0 13
39667: PUSH
39668: LD_INT 2
39670: PLUS
39671: GREATER
39672: OR
39673: PUSH
39674: LD_VAR 0 8
39678: PUSH
39679: LD_INT 2
39681: ARRAY
39682: PUSH
39683: LD_VAR 0 13
39687: PUSH
39688: LD_INT 2
39690: MINUS
39691: LESS
39692: OR
39693: PUSH
39694: LD_VAR 0 8
39698: PUSH
39699: LD_INT 3
39701: ARRAY
39702: PUSH
39703: LD_INT 0
39705: PUSH
39706: LD_INT 8
39708: PUSH
39709: LD_INT 9
39711: PUSH
39712: LD_INT 10
39714: PUSH
39715: LD_INT 11
39717: PUSH
39718: LD_INT 12
39720: PUSH
39721: LD_INT 13
39723: PUSH
39724: LD_INT 16
39726: PUSH
39727: LD_INT 17
39729: PUSH
39730: LD_INT 18
39732: PUSH
39733: LD_INT 19
39735: PUSH
39736: LD_INT 20
39738: PUSH
39739: LD_INT 21
39741: PUSH
39742: EMPTY
39743: LIST
39744: LIST
39745: LIST
39746: LIST
39747: LIST
39748: LIST
39749: LIST
39750: LIST
39751: LIST
39752: LIST
39753: LIST
39754: LIST
39755: LIST
39756: IN
39757: NOT
39758: OR
39759: PUSH
39760: LD_VAR 0 8
39764: PUSH
39765: LD_INT 5
39767: ARRAY
39768: NOT
39769: OR
39770: PUSH
39771: LD_VAR 0 8
39775: PUSH
39776: LD_INT 6
39778: ARRAY
39779: PUSH
39780: LD_INT 1
39782: PUSH
39783: LD_INT 2
39785: PUSH
39786: LD_INT 7
39788: PUSH
39789: LD_INT 9
39791: PUSH
39792: LD_INT 10
39794: PUSH
39795: LD_INT 11
39797: PUSH
39798: EMPTY
39799: LIST
39800: LIST
39801: LIST
39802: LIST
39803: LIST
39804: LIST
39805: IN
39806: NOT
39807: OR
39808: IFFALSE 39814
// exit ;
39810: POP
39811: POP
39812: GO 39897
// end ;
39814: GO 39485
39816: POP
39817: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
39818: LD_VAR 0 9
39822: PPUSH
39823: LD_VAR 0 3
39827: PPUSH
39828: LD_VAR 0 4
39832: PPUSH
39833: LD_INT 20
39835: PPUSH
39836: CALL 31820 0 4
39840: PUSH
39841: LD_INT 4
39843: ARRAY
39844: IFFALSE 39848
// exit ;
39846: GO 39897
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
39848: LD_VAR 0 2
39852: PUSH
39853: LD_INT 29
39855: PUSH
39856: LD_INT 30
39858: PUSH
39859: EMPTY
39860: LIST
39861: LIST
39862: IN
39863: PUSH
39864: LD_VAR 0 3
39868: PPUSH
39869: LD_VAR 0 4
39873: PPUSH
39874: LD_VAR 0 9
39878: PPUSH
39879: CALL_OW 440
39883: NOT
39884: AND
39885: IFFALSE 39889
// exit ;
39887: GO 39897
// result := true ;
39889: LD_ADDR_VAR 0 6
39893: PUSH
39894: LD_INT 1
39896: ST_TO_ADDR
// end ;
39897: LD_VAR 0 6
39901: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
39902: LD_INT 0
39904: PPUSH
39905: PPUSH
39906: PPUSH
39907: PPUSH
39908: PPUSH
39909: PPUSH
39910: PPUSH
39911: PPUSH
39912: PPUSH
39913: PPUSH
39914: PPUSH
39915: PPUSH
39916: PPUSH
39917: PPUSH
39918: PPUSH
39919: PPUSH
39920: PPUSH
39921: PPUSH
39922: PPUSH
39923: PPUSH
39924: PPUSH
39925: PPUSH
39926: PPUSH
39927: PPUSH
39928: PPUSH
39929: PPUSH
39930: PPUSH
39931: PPUSH
39932: PPUSH
39933: PPUSH
39934: PPUSH
39935: PPUSH
39936: PPUSH
39937: PPUSH
39938: PPUSH
39939: PPUSH
39940: PPUSH
39941: PPUSH
39942: PPUSH
39943: PPUSH
39944: PPUSH
39945: PPUSH
39946: PPUSH
39947: PPUSH
39948: PPUSH
39949: PPUSH
39950: PPUSH
39951: PPUSH
39952: PPUSH
39953: PPUSH
39954: PPUSH
39955: PPUSH
39956: PPUSH
39957: PPUSH
39958: PPUSH
39959: PPUSH
39960: PPUSH
39961: PPUSH
// result = [ ] ;
39962: LD_ADDR_VAR 0 7
39966: PUSH
39967: EMPTY
39968: ST_TO_ADDR
// temp_list = [ ] ;
39969: LD_ADDR_VAR 0 9
39973: PUSH
39974: EMPTY
39975: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
39976: LD_VAR 0 4
39980: PUSH
39981: LD_INT 0
39983: PUSH
39984: LD_INT 1
39986: PUSH
39987: LD_INT 2
39989: PUSH
39990: LD_INT 3
39992: PUSH
39993: LD_INT 4
39995: PUSH
39996: LD_INT 5
39998: PUSH
39999: EMPTY
40000: LIST
40001: LIST
40002: LIST
40003: LIST
40004: LIST
40005: LIST
40006: IN
40007: NOT
40008: PUSH
40009: LD_VAR 0 1
40013: PUSH
40014: LD_INT 0
40016: PUSH
40017: LD_INT 1
40019: PUSH
40020: EMPTY
40021: LIST
40022: LIST
40023: IN
40024: PUSH
40025: LD_VAR 0 5
40029: PUSH
40030: LD_INT 1
40032: PUSH
40033: LD_INT 2
40035: PUSH
40036: LD_INT 3
40038: PUSH
40039: EMPTY
40040: LIST
40041: LIST
40042: LIST
40043: IN
40044: NOT
40045: AND
40046: OR
40047: IFFALSE 40051
// exit ;
40049: GO 58442
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
40051: LD_VAR 0 1
40055: PUSH
40056: LD_INT 6
40058: PUSH
40059: LD_INT 7
40061: PUSH
40062: LD_INT 8
40064: PUSH
40065: LD_INT 13
40067: PUSH
40068: LD_INT 12
40070: PUSH
40071: LD_INT 15
40073: PUSH
40074: LD_INT 11
40076: PUSH
40077: LD_INT 14
40079: PUSH
40080: LD_INT 10
40082: PUSH
40083: EMPTY
40084: LIST
40085: LIST
40086: LIST
40087: LIST
40088: LIST
40089: LIST
40090: LIST
40091: LIST
40092: LIST
40093: IN
40094: IFFALSE 40104
// btype = b_lab ;
40096: LD_ADDR_VAR 0 1
40100: PUSH
40101: LD_INT 6
40103: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
40104: LD_VAR 0 6
40108: PUSH
40109: LD_INT 0
40111: PUSH
40112: LD_INT 1
40114: PUSH
40115: LD_INT 2
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: LIST
40122: IN
40123: NOT
40124: PUSH
40125: LD_VAR 0 1
40129: PUSH
40130: LD_INT 0
40132: PUSH
40133: LD_INT 1
40135: PUSH
40136: LD_INT 2
40138: PUSH
40139: LD_INT 3
40141: PUSH
40142: LD_INT 6
40144: PUSH
40145: LD_INT 36
40147: PUSH
40148: LD_INT 4
40150: PUSH
40151: LD_INT 5
40153: PUSH
40154: LD_INT 31
40156: PUSH
40157: LD_INT 32
40159: PUSH
40160: LD_INT 33
40162: PUSH
40163: EMPTY
40164: LIST
40165: LIST
40166: LIST
40167: LIST
40168: LIST
40169: LIST
40170: LIST
40171: LIST
40172: LIST
40173: LIST
40174: LIST
40175: IN
40176: NOT
40177: PUSH
40178: LD_VAR 0 6
40182: PUSH
40183: LD_INT 1
40185: EQUAL
40186: AND
40187: OR
40188: PUSH
40189: LD_VAR 0 1
40193: PUSH
40194: LD_INT 2
40196: PUSH
40197: LD_INT 3
40199: PUSH
40200: EMPTY
40201: LIST
40202: LIST
40203: IN
40204: NOT
40205: PUSH
40206: LD_VAR 0 6
40210: PUSH
40211: LD_INT 2
40213: EQUAL
40214: AND
40215: OR
40216: IFFALSE 40226
// mode = 0 ;
40218: LD_ADDR_VAR 0 6
40222: PUSH
40223: LD_INT 0
40225: ST_TO_ADDR
// case mode of 0 :
40226: LD_VAR 0 6
40230: PUSH
40231: LD_INT 0
40233: DOUBLE
40234: EQUAL
40235: IFTRUE 40239
40237: GO 51692
40239: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40240: LD_ADDR_VAR 0 11
40244: PUSH
40245: LD_INT 0
40247: PUSH
40248: LD_INT 0
40250: PUSH
40251: EMPTY
40252: LIST
40253: LIST
40254: PUSH
40255: LD_INT 0
40257: PUSH
40258: LD_INT 1
40260: NEG
40261: PUSH
40262: EMPTY
40263: LIST
40264: LIST
40265: PUSH
40266: LD_INT 1
40268: PUSH
40269: LD_INT 0
40271: PUSH
40272: EMPTY
40273: LIST
40274: LIST
40275: PUSH
40276: LD_INT 1
40278: PUSH
40279: LD_INT 1
40281: PUSH
40282: EMPTY
40283: LIST
40284: LIST
40285: PUSH
40286: LD_INT 0
40288: PUSH
40289: LD_INT 1
40291: PUSH
40292: EMPTY
40293: LIST
40294: LIST
40295: PUSH
40296: LD_INT 1
40298: NEG
40299: PUSH
40300: LD_INT 0
40302: PUSH
40303: EMPTY
40304: LIST
40305: LIST
40306: PUSH
40307: LD_INT 1
40309: NEG
40310: PUSH
40311: LD_INT 1
40313: NEG
40314: PUSH
40315: EMPTY
40316: LIST
40317: LIST
40318: PUSH
40319: LD_INT 1
40321: NEG
40322: PUSH
40323: LD_INT 2
40325: NEG
40326: PUSH
40327: EMPTY
40328: LIST
40329: LIST
40330: PUSH
40331: LD_INT 0
40333: PUSH
40334: LD_INT 2
40336: NEG
40337: PUSH
40338: EMPTY
40339: LIST
40340: LIST
40341: PUSH
40342: LD_INT 1
40344: PUSH
40345: LD_INT 1
40347: NEG
40348: PUSH
40349: EMPTY
40350: LIST
40351: LIST
40352: PUSH
40353: LD_INT 1
40355: PUSH
40356: LD_INT 2
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: PUSH
40363: LD_INT 0
40365: PUSH
40366: LD_INT 2
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: PUSH
40373: LD_INT 1
40375: NEG
40376: PUSH
40377: LD_INT 1
40379: PUSH
40380: EMPTY
40381: LIST
40382: LIST
40383: PUSH
40384: LD_INT 1
40386: PUSH
40387: LD_INT 3
40389: PUSH
40390: EMPTY
40391: LIST
40392: LIST
40393: PUSH
40394: LD_INT 0
40396: PUSH
40397: LD_INT 3
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: PUSH
40404: LD_INT 1
40406: NEG
40407: PUSH
40408: LD_INT 2
40410: PUSH
40411: EMPTY
40412: LIST
40413: LIST
40414: PUSH
40415: EMPTY
40416: LIST
40417: LIST
40418: LIST
40419: LIST
40420: LIST
40421: LIST
40422: LIST
40423: LIST
40424: LIST
40425: LIST
40426: LIST
40427: LIST
40428: LIST
40429: LIST
40430: LIST
40431: LIST
40432: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40433: LD_ADDR_VAR 0 12
40437: PUSH
40438: LD_INT 0
40440: PUSH
40441: LD_INT 0
40443: PUSH
40444: EMPTY
40445: LIST
40446: LIST
40447: PUSH
40448: LD_INT 0
40450: PUSH
40451: LD_INT 1
40453: NEG
40454: PUSH
40455: EMPTY
40456: LIST
40457: LIST
40458: PUSH
40459: LD_INT 1
40461: PUSH
40462: LD_INT 0
40464: PUSH
40465: EMPTY
40466: LIST
40467: LIST
40468: PUSH
40469: LD_INT 1
40471: PUSH
40472: LD_INT 1
40474: PUSH
40475: EMPTY
40476: LIST
40477: LIST
40478: PUSH
40479: LD_INT 0
40481: PUSH
40482: LD_INT 1
40484: PUSH
40485: EMPTY
40486: LIST
40487: LIST
40488: PUSH
40489: LD_INT 1
40491: NEG
40492: PUSH
40493: LD_INT 0
40495: PUSH
40496: EMPTY
40497: LIST
40498: LIST
40499: PUSH
40500: LD_INT 1
40502: NEG
40503: PUSH
40504: LD_INT 1
40506: NEG
40507: PUSH
40508: EMPTY
40509: LIST
40510: LIST
40511: PUSH
40512: LD_INT 1
40514: PUSH
40515: LD_INT 1
40517: NEG
40518: PUSH
40519: EMPTY
40520: LIST
40521: LIST
40522: PUSH
40523: LD_INT 2
40525: PUSH
40526: LD_INT 0
40528: PUSH
40529: EMPTY
40530: LIST
40531: LIST
40532: PUSH
40533: LD_INT 2
40535: PUSH
40536: LD_INT 1
40538: PUSH
40539: EMPTY
40540: LIST
40541: LIST
40542: PUSH
40543: LD_INT 1
40545: NEG
40546: PUSH
40547: LD_INT 1
40549: PUSH
40550: EMPTY
40551: LIST
40552: LIST
40553: PUSH
40554: LD_INT 2
40556: NEG
40557: PUSH
40558: LD_INT 0
40560: PUSH
40561: EMPTY
40562: LIST
40563: LIST
40564: PUSH
40565: LD_INT 2
40567: NEG
40568: PUSH
40569: LD_INT 1
40571: NEG
40572: PUSH
40573: EMPTY
40574: LIST
40575: LIST
40576: PUSH
40577: LD_INT 2
40579: NEG
40580: PUSH
40581: LD_INT 1
40583: PUSH
40584: EMPTY
40585: LIST
40586: LIST
40587: PUSH
40588: LD_INT 3
40590: NEG
40591: PUSH
40592: LD_INT 0
40594: PUSH
40595: EMPTY
40596: LIST
40597: LIST
40598: PUSH
40599: LD_INT 3
40601: NEG
40602: PUSH
40603: LD_INT 1
40605: NEG
40606: PUSH
40607: EMPTY
40608: LIST
40609: LIST
40610: PUSH
40611: EMPTY
40612: LIST
40613: LIST
40614: LIST
40615: LIST
40616: LIST
40617: LIST
40618: LIST
40619: LIST
40620: LIST
40621: LIST
40622: LIST
40623: LIST
40624: LIST
40625: LIST
40626: LIST
40627: LIST
40628: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40629: LD_ADDR_VAR 0 13
40633: PUSH
40634: LD_INT 0
40636: PUSH
40637: LD_INT 0
40639: PUSH
40640: EMPTY
40641: LIST
40642: LIST
40643: PUSH
40644: LD_INT 0
40646: PUSH
40647: LD_INT 1
40649: NEG
40650: PUSH
40651: EMPTY
40652: LIST
40653: LIST
40654: PUSH
40655: LD_INT 1
40657: PUSH
40658: LD_INT 0
40660: PUSH
40661: EMPTY
40662: LIST
40663: LIST
40664: PUSH
40665: LD_INT 1
40667: PUSH
40668: LD_INT 1
40670: PUSH
40671: EMPTY
40672: LIST
40673: LIST
40674: PUSH
40675: LD_INT 0
40677: PUSH
40678: LD_INT 1
40680: PUSH
40681: EMPTY
40682: LIST
40683: LIST
40684: PUSH
40685: LD_INT 1
40687: NEG
40688: PUSH
40689: LD_INT 0
40691: PUSH
40692: EMPTY
40693: LIST
40694: LIST
40695: PUSH
40696: LD_INT 1
40698: NEG
40699: PUSH
40700: LD_INT 1
40702: NEG
40703: PUSH
40704: EMPTY
40705: LIST
40706: LIST
40707: PUSH
40708: LD_INT 1
40710: NEG
40711: PUSH
40712: LD_INT 2
40714: NEG
40715: PUSH
40716: EMPTY
40717: LIST
40718: LIST
40719: PUSH
40720: LD_INT 2
40722: PUSH
40723: LD_INT 1
40725: PUSH
40726: EMPTY
40727: LIST
40728: LIST
40729: PUSH
40730: LD_INT 2
40732: PUSH
40733: LD_INT 2
40735: PUSH
40736: EMPTY
40737: LIST
40738: LIST
40739: PUSH
40740: LD_INT 1
40742: PUSH
40743: LD_INT 2
40745: PUSH
40746: EMPTY
40747: LIST
40748: LIST
40749: PUSH
40750: LD_INT 2
40752: NEG
40753: PUSH
40754: LD_INT 1
40756: NEG
40757: PUSH
40758: EMPTY
40759: LIST
40760: LIST
40761: PUSH
40762: LD_INT 2
40764: NEG
40765: PUSH
40766: LD_INT 2
40768: NEG
40769: PUSH
40770: EMPTY
40771: LIST
40772: LIST
40773: PUSH
40774: LD_INT 2
40776: NEG
40777: PUSH
40778: LD_INT 3
40780: NEG
40781: PUSH
40782: EMPTY
40783: LIST
40784: LIST
40785: PUSH
40786: LD_INT 3
40788: NEG
40789: PUSH
40790: LD_INT 2
40792: NEG
40793: PUSH
40794: EMPTY
40795: LIST
40796: LIST
40797: PUSH
40798: LD_INT 3
40800: NEG
40801: PUSH
40802: LD_INT 3
40804: NEG
40805: PUSH
40806: EMPTY
40807: LIST
40808: LIST
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: LIST
40814: LIST
40815: LIST
40816: LIST
40817: LIST
40818: LIST
40819: LIST
40820: LIST
40821: LIST
40822: LIST
40823: LIST
40824: LIST
40825: LIST
40826: LIST
40827: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40828: LD_ADDR_VAR 0 14
40832: PUSH
40833: LD_INT 0
40835: PUSH
40836: LD_INT 0
40838: PUSH
40839: EMPTY
40840: LIST
40841: LIST
40842: PUSH
40843: LD_INT 0
40845: PUSH
40846: LD_INT 1
40848: NEG
40849: PUSH
40850: EMPTY
40851: LIST
40852: LIST
40853: PUSH
40854: LD_INT 1
40856: PUSH
40857: LD_INT 0
40859: PUSH
40860: EMPTY
40861: LIST
40862: LIST
40863: PUSH
40864: LD_INT 1
40866: PUSH
40867: LD_INT 1
40869: PUSH
40870: EMPTY
40871: LIST
40872: LIST
40873: PUSH
40874: LD_INT 0
40876: PUSH
40877: LD_INT 1
40879: PUSH
40880: EMPTY
40881: LIST
40882: LIST
40883: PUSH
40884: LD_INT 1
40886: NEG
40887: PUSH
40888: LD_INT 0
40890: PUSH
40891: EMPTY
40892: LIST
40893: LIST
40894: PUSH
40895: LD_INT 1
40897: NEG
40898: PUSH
40899: LD_INT 1
40901: NEG
40902: PUSH
40903: EMPTY
40904: LIST
40905: LIST
40906: PUSH
40907: LD_INT 1
40909: NEG
40910: PUSH
40911: LD_INT 2
40913: NEG
40914: PUSH
40915: EMPTY
40916: LIST
40917: LIST
40918: PUSH
40919: LD_INT 0
40921: PUSH
40922: LD_INT 2
40924: NEG
40925: PUSH
40926: EMPTY
40927: LIST
40928: LIST
40929: PUSH
40930: LD_INT 1
40932: PUSH
40933: LD_INT 1
40935: NEG
40936: PUSH
40937: EMPTY
40938: LIST
40939: LIST
40940: PUSH
40941: LD_INT 1
40943: PUSH
40944: LD_INT 2
40946: PUSH
40947: EMPTY
40948: LIST
40949: LIST
40950: PUSH
40951: LD_INT 0
40953: PUSH
40954: LD_INT 2
40956: PUSH
40957: EMPTY
40958: LIST
40959: LIST
40960: PUSH
40961: LD_INT 1
40963: NEG
40964: PUSH
40965: LD_INT 1
40967: PUSH
40968: EMPTY
40969: LIST
40970: LIST
40971: PUSH
40972: LD_INT 1
40974: NEG
40975: PUSH
40976: LD_INT 3
40978: NEG
40979: PUSH
40980: EMPTY
40981: LIST
40982: LIST
40983: PUSH
40984: LD_INT 0
40986: PUSH
40987: LD_INT 3
40989: NEG
40990: PUSH
40991: EMPTY
40992: LIST
40993: LIST
40994: PUSH
40995: LD_INT 1
40997: PUSH
40998: LD_INT 2
41000: NEG
41001: PUSH
41002: EMPTY
41003: LIST
41004: LIST
41005: PUSH
41006: EMPTY
41007: LIST
41008: LIST
41009: LIST
41010: LIST
41011: LIST
41012: LIST
41013: LIST
41014: LIST
41015: LIST
41016: LIST
41017: LIST
41018: LIST
41019: LIST
41020: LIST
41021: LIST
41022: LIST
41023: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41024: LD_ADDR_VAR 0 15
41028: PUSH
41029: LD_INT 0
41031: PUSH
41032: LD_INT 0
41034: PUSH
41035: EMPTY
41036: LIST
41037: LIST
41038: PUSH
41039: LD_INT 0
41041: PUSH
41042: LD_INT 1
41044: NEG
41045: PUSH
41046: EMPTY
41047: LIST
41048: LIST
41049: PUSH
41050: LD_INT 1
41052: PUSH
41053: LD_INT 0
41055: PUSH
41056: EMPTY
41057: LIST
41058: LIST
41059: PUSH
41060: LD_INT 1
41062: PUSH
41063: LD_INT 1
41065: PUSH
41066: EMPTY
41067: LIST
41068: LIST
41069: PUSH
41070: LD_INT 0
41072: PUSH
41073: LD_INT 1
41075: PUSH
41076: EMPTY
41077: LIST
41078: LIST
41079: PUSH
41080: LD_INT 1
41082: NEG
41083: PUSH
41084: LD_INT 0
41086: PUSH
41087: EMPTY
41088: LIST
41089: LIST
41090: PUSH
41091: LD_INT 1
41093: NEG
41094: PUSH
41095: LD_INT 1
41097: NEG
41098: PUSH
41099: EMPTY
41100: LIST
41101: LIST
41102: PUSH
41103: LD_INT 1
41105: PUSH
41106: LD_INT 1
41108: NEG
41109: PUSH
41110: EMPTY
41111: LIST
41112: LIST
41113: PUSH
41114: LD_INT 2
41116: PUSH
41117: LD_INT 0
41119: PUSH
41120: EMPTY
41121: LIST
41122: LIST
41123: PUSH
41124: LD_INT 2
41126: PUSH
41127: LD_INT 1
41129: PUSH
41130: EMPTY
41131: LIST
41132: LIST
41133: PUSH
41134: LD_INT 1
41136: NEG
41137: PUSH
41138: LD_INT 1
41140: PUSH
41141: EMPTY
41142: LIST
41143: LIST
41144: PUSH
41145: LD_INT 2
41147: NEG
41148: PUSH
41149: LD_INT 0
41151: PUSH
41152: EMPTY
41153: LIST
41154: LIST
41155: PUSH
41156: LD_INT 2
41158: NEG
41159: PUSH
41160: LD_INT 1
41162: NEG
41163: PUSH
41164: EMPTY
41165: LIST
41166: LIST
41167: PUSH
41168: LD_INT 2
41170: PUSH
41171: LD_INT 1
41173: NEG
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: PUSH
41179: LD_INT 3
41181: PUSH
41182: LD_INT 0
41184: PUSH
41185: EMPTY
41186: LIST
41187: LIST
41188: PUSH
41189: LD_INT 3
41191: PUSH
41192: LD_INT 1
41194: PUSH
41195: EMPTY
41196: LIST
41197: LIST
41198: PUSH
41199: EMPTY
41200: LIST
41201: LIST
41202: LIST
41203: LIST
41204: LIST
41205: LIST
41206: LIST
41207: LIST
41208: LIST
41209: LIST
41210: LIST
41211: LIST
41212: LIST
41213: LIST
41214: LIST
41215: LIST
41216: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41217: LD_ADDR_VAR 0 16
41221: PUSH
41222: LD_INT 0
41224: PUSH
41225: LD_INT 0
41227: PUSH
41228: EMPTY
41229: LIST
41230: LIST
41231: PUSH
41232: LD_INT 0
41234: PUSH
41235: LD_INT 1
41237: NEG
41238: PUSH
41239: EMPTY
41240: LIST
41241: LIST
41242: PUSH
41243: LD_INT 1
41245: PUSH
41246: LD_INT 0
41248: PUSH
41249: EMPTY
41250: LIST
41251: LIST
41252: PUSH
41253: LD_INT 1
41255: PUSH
41256: LD_INT 1
41258: PUSH
41259: EMPTY
41260: LIST
41261: LIST
41262: PUSH
41263: LD_INT 0
41265: PUSH
41266: LD_INT 1
41268: PUSH
41269: EMPTY
41270: LIST
41271: LIST
41272: PUSH
41273: LD_INT 1
41275: NEG
41276: PUSH
41277: LD_INT 0
41279: PUSH
41280: EMPTY
41281: LIST
41282: LIST
41283: PUSH
41284: LD_INT 1
41286: NEG
41287: PUSH
41288: LD_INT 1
41290: NEG
41291: PUSH
41292: EMPTY
41293: LIST
41294: LIST
41295: PUSH
41296: LD_INT 1
41298: NEG
41299: PUSH
41300: LD_INT 2
41302: NEG
41303: PUSH
41304: EMPTY
41305: LIST
41306: LIST
41307: PUSH
41308: LD_INT 2
41310: PUSH
41311: LD_INT 1
41313: PUSH
41314: EMPTY
41315: LIST
41316: LIST
41317: PUSH
41318: LD_INT 2
41320: PUSH
41321: LD_INT 2
41323: PUSH
41324: EMPTY
41325: LIST
41326: LIST
41327: PUSH
41328: LD_INT 1
41330: PUSH
41331: LD_INT 2
41333: PUSH
41334: EMPTY
41335: LIST
41336: LIST
41337: PUSH
41338: LD_INT 2
41340: NEG
41341: PUSH
41342: LD_INT 1
41344: NEG
41345: PUSH
41346: EMPTY
41347: LIST
41348: LIST
41349: PUSH
41350: LD_INT 2
41352: NEG
41353: PUSH
41354: LD_INT 2
41356: NEG
41357: PUSH
41358: EMPTY
41359: LIST
41360: LIST
41361: PUSH
41362: LD_INT 3
41364: PUSH
41365: LD_INT 2
41367: PUSH
41368: EMPTY
41369: LIST
41370: LIST
41371: PUSH
41372: LD_INT 3
41374: PUSH
41375: LD_INT 3
41377: PUSH
41378: EMPTY
41379: LIST
41380: LIST
41381: PUSH
41382: LD_INT 2
41384: PUSH
41385: LD_INT 3
41387: PUSH
41388: EMPTY
41389: LIST
41390: LIST
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: LIST
41396: LIST
41397: LIST
41398: LIST
41399: LIST
41400: LIST
41401: LIST
41402: LIST
41403: LIST
41404: LIST
41405: LIST
41406: LIST
41407: LIST
41408: LIST
41409: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41410: LD_ADDR_VAR 0 17
41414: PUSH
41415: LD_INT 0
41417: PUSH
41418: LD_INT 0
41420: PUSH
41421: EMPTY
41422: LIST
41423: LIST
41424: PUSH
41425: LD_INT 0
41427: PUSH
41428: LD_INT 1
41430: NEG
41431: PUSH
41432: EMPTY
41433: LIST
41434: LIST
41435: PUSH
41436: LD_INT 1
41438: PUSH
41439: LD_INT 0
41441: PUSH
41442: EMPTY
41443: LIST
41444: LIST
41445: PUSH
41446: LD_INT 1
41448: PUSH
41449: LD_INT 1
41451: PUSH
41452: EMPTY
41453: LIST
41454: LIST
41455: PUSH
41456: LD_INT 0
41458: PUSH
41459: LD_INT 1
41461: PUSH
41462: EMPTY
41463: LIST
41464: LIST
41465: PUSH
41466: LD_INT 1
41468: NEG
41469: PUSH
41470: LD_INT 0
41472: PUSH
41473: EMPTY
41474: LIST
41475: LIST
41476: PUSH
41477: LD_INT 1
41479: NEG
41480: PUSH
41481: LD_INT 1
41483: NEG
41484: PUSH
41485: EMPTY
41486: LIST
41487: LIST
41488: PUSH
41489: LD_INT 1
41491: NEG
41492: PUSH
41493: LD_INT 2
41495: NEG
41496: PUSH
41497: EMPTY
41498: LIST
41499: LIST
41500: PUSH
41501: LD_INT 0
41503: PUSH
41504: LD_INT 2
41506: NEG
41507: PUSH
41508: EMPTY
41509: LIST
41510: LIST
41511: PUSH
41512: LD_INT 1
41514: PUSH
41515: LD_INT 1
41517: NEG
41518: PUSH
41519: EMPTY
41520: LIST
41521: LIST
41522: PUSH
41523: LD_INT 2
41525: PUSH
41526: LD_INT 0
41528: PUSH
41529: EMPTY
41530: LIST
41531: LIST
41532: PUSH
41533: LD_INT 2
41535: PUSH
41536: LD_INT 1
41538: PUSH
41539: EMPTY
41540: LIST
41541: LIST
41542: PUSH
41543: LD_INT 2
41545: PUSH
41546: LD_INT 2
41548: PUSH
41549: EMPTY
41550: LIST
41551: LIST
41552: PUSH
41553: LD_INT 1
41555: PUSH
41556: LD_INT 2
41558: PUSH
41559: EMPTY
41560: LIST
41561: LIST
41562: PUSH
41563: LD_INT 0
41565: PUSH
41566: LD_INT 2
41568: PUSH
41569: EMPTY
41570: LIST
41571: LIST
41572: PUSH
41573: LD_INT 1
41575: NEG
41576: PUSH
41577: LD_INT 1
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: PUSH
41584: LD_INT 2
41586: NEG
41587: PUSH
41588: LD_INT 0
41590: PUSH
41591: EMPTY
41592: LIST
41593: LIST
41594: PUSH
41595: LD_INT 2
41597: NEG
41598: PUSH
41599: LD_INT 1
41601: NEG
41602: PUSH
41603: EMPTY
41604: LIST
41605: LIST
41606: PUSH
41607: LD_INT 2
41609: NEG
41610: PUSH
41611: LD_INT 2
41613: NEG
41614: PUSH
41615: EMPTY
41616: LIST
41617: LIST
41618: PUSH
41619: EMPTY
41620: LIST
41621: LIST
41622: LIST
41623: LIST
41624: LIST
41625: LIST
41626: LIST
41627: LIST
41628: LIST
41629: LIST
41630: LIST
41631: LIST
41632: LIST
41633: LIST
41634: LIST
41635: LIST
41636: LIST
41637: LIST
41638: LIST
41639: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41640: LD_ADDR_VAR 0 18
41644: PUSH
41645: LD_INT 0
41647: PUSH
41648: LD_INT 0
41650: PUSH
41651: EMPTY
41652: LIST
41653: LIST
41654: PUSH
41655: LD_INT 0
41657: PUSH
41658: LD_INT 1
41660: NEG
41661: PUSH
41662: EMPTY
41663: LIST
41664: LIST
41665: PUSH
41666: LD_INT 1
41668: PUSH
41669: LD_INT 0
41671: PUSH
41672: EMPTY
41673: LIST
41674: LIST
41675: PUSH
41676: LD_INT 1
41678: PUSH
41679: LD_INT 1
41681: PUSH
41682: EMPTY
41683: LIST
41684: LIST
41685: PUSH
41686: LD_INT 0
41688: PUSH
41689: LD_INT 1
41691: PUSH
41692: EMPTY
41693: LIST
41694: LIST
41695: PUSH
41696: LD_INT 1
41698: NEG
41699: PUSH
41700: LD_INT 0
41702: PUSH
41703: EMPTY
41704: LIST
41705: LIST
41706: PUSH
41707: LD_INT 1
41709: NEG
41710: PUSH
41711: LD_INT 1
41713: NEG
41714: PUSH
41715: EMPTY
41716: LIST
41717: LIST
41718: PUSH
41719: LD_INT 1
41721: NEG
41722: PUSH
41723: LD_INT 2
41725: NEG
41726: PUSH
41727: EMPTY
41728: LIST
41729: LIST
41730: PUSH
41731: LD_INT 0
41733: PUSH
41734: LD_INT 2
41736: NEG
41737: PUSH
41738: EMPTY
41739: LIST
41740: LIST
41741: PUSH
41742: LD_INT 1
41744: PUSH
41745: LD_INT 1
41747: NEG
41748: PUSH
41749: EMPTY
41750: LIST
41751: LIST
41752: PUSH
41753: LD_INT 2
41755: PUSH
41756: LD_INT 0
41758: PUSH
41759: EMPTY
41760: LIST
41761: LIST
41762: PUSH
41763: LD_INT 2
41765: PUSH
41766: LD_INT 1
41768: PUSH
41769: EMPTY
41770: LIST
41771: LIST
41772: PUSH
41773: LD_INT 2
41775: PUSH
41776: LD_INT 2
41778: PUSH
41779: EMPTY
41780: LIST
41781: LIST
41782: PUSH
41783: LD_INT 1
41785: PUSH
41786: LD_INT 2
41788: PUSH
41789: EMPTY
41790: LIST
41791: LIST
41792: PUSH
41793: LD_INT 0
41795: PUSH
41796: LD_INT 2
41798: PUSH
41799: EMPTY
41800: LIST
41801: LIST
41802: PUSH
41803: LD_INT 1
41805: NEG
41806: PUSH
41807: LD_INT 1
41809: PUSH
41810: EMPTY
41811: LIST
41812: LIST
41813: PUSH
41814: LD_INT 2
41816: NEG
41817: PUSH
41818: LD_INT 0
41820: PUSH
41821: EMPTY
41822: LIST
41823: LIST
41824: PUSH
41825: LD_INT 2
41827: NEG
41828: PUSH
41829: LD_INT 1
41831: NEG
41832: PUSH
41833: EMPTY
41834: LIST
41835: LIST
41836: PUSH
41837: LD_INT 2
41839: NEG
41840: PUSH
41841: LD_INT 2
41843: NEG
41844: PUSH
41845: EMPTY
41846: LIST
41847: LIST
41848: PUSH
41849: EMPTY
41850: LIST
41851: LIST
41852: LIST
41853: LIST
41854: LIST
41855: LIST
41856: LIST
41857: LIST
41858: LIST
41859: LIST
41860: LIST
41861: LIST
41862: LIST
41863: LIST
41864: LIST
41865: LIST
41866: LIST
41867: LIST
41868: LIST
41869: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41870: LD_ADDR_VAR 0 19
41874: PUSH
41875: LD_INT 0
41877: PUSH
41878: LD_INT 0
41880: PUSH
41881: EMPTY
41882: LIST
41883: LIST
41884: PUSH
41885: LD_INT 0
41887: PUSH
41888: LD_INT 1
41890: NEG
41891: PUSH
41892: EMPTY
41893: LIST
41894: LIST
41895: PUSH
41896: LD_INT 1
41898: PUSH
41899: LD_INT 0
41901: PUSH
41902: EMPTY
41903: LIST
41904: LIST
41905: PUSH
41906: LD_INT 1
41908: PUSH
41909: LD_INT 1
41911: PUSH
41912: EMPTY
41913: LIST
41914: LIST
41915: PUSH
41916: LD_INT 0
41918: PUSH
41919: LD_INT 1
41921: PUSH
41922: EMPTY
41923: LIST
41924: LIST
41925: PUSH
41926: LD_INT 1
41928: NEG
41929: PUSH
41930: LD_INT 0
41932: PUSH
41933: EMPTY
41934: LIST
41935: LIST
41936: PUSH
41937: LD_INT 1
41939: NEG
41940: PUSH
41941: LD_INT 1
41943: NEG
41944: PUSH
41945: EMPTY
41946: LIST
41947: LIST
41948: PUSH
41949: LD_INT 1
41951: NEG
41952: PUSH
41953: LD_INT 2
41955: NEG
41956: PUSH
41957: EMPTY
41958: LIST
41959: LIST
41960: PUSH
41961: LD_INT 0
41963: PUSH
41964: LD_INT 2
41966: NEG
41967: PUSH
41968: EMPTY
41969: LIST
41970: LIST
41971: PUSH
41972: LD_INT 1
41974: PUSH
41975: LD_INT 1
41977: NEG
41978: PUSH
41979: EMPTY
41980: LIST
41981: LIST
41982: PUSH
41983: LD_INT 2
41985: PUSH
41986: LD_INT 0
41988: PUSH
41989: EMPTY
41990: LIST
41991: LIST
41992: PUSH
41993: LD_INT 2
41995: PUSH
41996: LD_INT 1
41998: PUSH
41999: EMPTY
42000: LIST
42001: LIST
42002: PUSH
42003: LD_INT 2
42005: PUSH
42006: LD_INT 2
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: PUSH
42013: LD_INT 1
42015: PUSH
42016: LD_INT 2
42018: PUSH
42019: EMPTY
42020: LIST
42021: LIST
42022: PUSH
42023: LD_INT 0
42025: PUSH
42026: LD_INT 2
42028: PUSH
42029: EMPTY
42030: LIST
42031: LIST
42032: PUSH
42033: LD_INT 1
42035: NEG
42036: PUSH
42037: LD_INT 1
42039: PUSH
42040: EMPTY
42041: LIST
42042: LIST
42043: PUSH
42044: LD_INT 2
42046: NEG
42047: PUSH
42048: LD_INT 0
42050: PUSH
42051: EMPTY
42052: LIST
42053: LIST
42054: PUSH
42055: LD_INT 2
42057: NEG
42058: PUSH
42059: LD_INT 1
42061: NEG
42062: PUSH
42063: EMPTY
42064: LIST
42065: LIST
42066: PUSH
42067: LD_INT 2
42069: NEG
42070: PUSH
42071: LD_INT 2
42073: NEG
42074: PUSH
42075: EMPTY
42076: LIST
42077: LIST
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: LIST
42083: LIST
42084: LIST
42085: LIST
42086: LIST
42087: LIST
42088: LIST
42089: LIST
42090: LIST
42091: LIST
42092: LIST
42093: LIST
42094: LIST
42095: LIST
42096: LIST
42097: LIST
42098: LIST
42099: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42100: LD_ADDR_VAR 0 20
42104: PUSH
42105: LD_INT 0
42107: PUSH
42108: LD_INT 0
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: PUSH
42115: LD_INT 0
42117: PUSH
42118: LD_INT 1
42120: NEG
42121: PUSH
42122: EMPTY
42123: LIST
42124: LIST
42125: PUSH
42126: LD_INT 1
42128: PUSH
42129: LD_INT 0
42131: PUSH
42132: EMPTY
42133: LIST
42134: LIST
42135: PUSH
42136: LD_INT 1
42138: PUSH
42139: LD_INT 1
42141: PUSH
42142: EMPTY
42143: LIST
42144: LIST
42145: PUSH
42146: LD_INT 0
42148: PUSH
42149: LD_INT 1
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: PUSH
42156: LD_INT 1
42158: NEG
42159: PUSH
42160: LD_INT 0
42162: PUSH
42163: EMPTY
42164: LIST
42165: LIST
42166: PUSH
42167: LD_INT 1
42169: NEG
42170: PUSH
42171: LD_INT 1
42173: NEG
42174: PUSH
42175: EMPTY
42176: LIST
42177: LIST
42178: PUSH
42179: LD_INT 1
42181: NEG
42182: PUSH
42183: LD_INT 2
42185: NEG
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: PUSH
42191: LD_INT 0
42193: PUSH
42194: LD_INT 2
42196: NEG
42197: PUSH
42198: EMPTY
42199: LIST
42200: LIST
42201: PUSH
42202: LD_INT 1
42204: PUSH
42205: LD_INT 1
42207: NEG
42208: PUSH
42209: EMPTY
42210: LIST
42211: LIST
42212: PUSH
42213: LD_INT 2
42215: PUSH
42216: LD_INT 0
42218: PUSH
42219: EMPTY
42220: LIST
42221: LIST
42222: PUSH
42223: LD_INT 2
42225: PUSH
42226: LD_INT 1
42228: PUSH
42229: EMPTY
42230: LIST
42231: LIST
42232: PUSH
42233: LD_INT 2
42235: PUSH
42236: LD_INT 2
42238: PUSH
42239: EMPTY
42240: LIST
42241: LIST
42242: PUSH
42243: LD_INT 1
42245: PUSH
42246: LD_INT 2
42248: PUSH
42249: EMPTY
42250: LIST
42251: LIST
42252: PUSH
42253: LD_INT 0
42255: PUSH
42256: LD_INT 2
42258: PUSH
42259: EMPTY
42260: LIST
42261: LIST
42262: PUSH
42263: LD_INT 1
42265: NEG
42266: PUSH
42267: LD_INT 1
42269: PUSH
42270: EMPTY
42271: LIST
42272: LIST
42273: PUSH
42274: LD_INT 2
42276: NEG
42277: PUSH
42278: LD_INT 0
42280: PUSH
42281: EMPTY
42282: LIST
42283: LIST
42284: PUSH
42285: LD_INT 2
42287: NEG
42288: PUSH
42289: LD_INT 1
42291: NEG
42292: PUSH
42293: EMPTY
42294: LIST
42295: LIST
42296: PUSH
42297: LD_INT 2
42299: NEG
42300: PUSH
42301: LD_INT 2
42303: NEG
42304: PUSH
42305: EMPTY
42306: LIST
42307: LIST
42308: PUSH
42309: EMPTY
42310: LIST
42311: LIST
42312: LIST
42313: LIST
42314: LIST
42315: LIST
42316: LIST
42317: LIST
42318: LIST
42319: LIST
42320: LIST
42321: LIST
42322: LIST
42323: LIST
42324: LIST
42325: LIST
42326: LIST
42327: LIST
42328: LIST
42329: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42330: LD_ADDR_VAR 0 21
42334: PUSH
42335: LD_INT 0
42337: PUSH
42338: LD_INT 0
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: PUSH
42345: LD_INT 0
42347: PUSH
42348: LD_INT 1
42350: NEG
42351: PUSH
42352: EMPTY
42353: LIST
42354: LIST
42355: PUSH
42356: LD_INT 1
42358: PUSH
42359: LD_INT 0
42361: PUSH
42362: EMPTY
42363: LIST
42364: LIST
42365: PUSH
42366: LD_INT 1
42368: PUSH
42369: LD_INT 1
42371: PUSH
42372: EMPTY
42373: LIST
42374: LIST
42375: PUSH
42376: LD_INT 0
42378: PUSH
42379: LD_INT 1
42381: PUSH
42382: EMPTY
42383: LIST
42384: LIST
42385: PUSH
42386: LD_INT 1
42388: NEG
42389: PUSH
42390: LD_INT 0
42392: PUSH
42393: EMPTY
42394: LIST
42395: LIST
42396: PUSH
42397: LD_INT 1
42399: NEG
42400: PUSH
42401: LD_INT 1
42403: NEG
42404: PUSH
42405: EMPTY
42406: LIST
42407: LIST
42408: PUSH
42409: LD_INT 1
42411: NEG
42412: PUSH
42413: LD_INT 2
42415: NEG
42416: PUSH
42417: EMPTY
42418: LIST
42419: LIST
42420: PUSH
42421: LD_INT 0
42423: PUSH
42424: LD_INT 2
42426: NEG
42427: PUSH
42428: EMPTY
42429: LIST
42430: LIST
42431: PUSH
42432: LD_INT 1
42434: PUSH
42435: LD_INT 1
42437: NEG
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: PUSH
42443: LD_INT 2
42445: PUSH
42446: LD_INT 0
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: PUSH
42453: LD_INT 2
42455: PUSH
42456: LD_INT 1
42458: PUSH
42459: EMPTY
42460: LIST
42461: LIST
42462: PUSH
42463: LD_INT 2
42465: PUSH
42466: LD_INT 2
42468: PUSH
42469: EMPTY
42470: LIST
42471: LIST
42472: PUSH
42473: LD_INT 1
42475: PUSH
42476: LD_INT 2
42478: PUSH
42479: EMPTY
42480: LIST
42481: LIST
42482: PUSH
42483: LD_INT 0
42485: PUSH
42486: LD_INT 2
42488: PUSH
42489: EMPTY
42490: LIST
42491: LIST
42492: PUSH
42493: LD_INT 1
42495: NEG
42496: PUSH
42497: LD_INT 1
42499: PUSH
42500: EMPTY
42501: LIST
42502: LIST
42503: PUSH
42504: LD_INT 2
42506: NEG
42507: PUSH
42508: LD_INT 0
42510: PUSH
42511: EMPTY
42512: LIST
42513: LIST
42514: PUSH
42515: LD_INT 2
42517: NEG
42518: PUSH
42519: LD_INT 1
42521: NEG
42522: PUSH
42523: EMPTY
42524: LIST
42525: LIST
42526: PUSH
42527: LD_INT 2
42529: NEG
42530: PUSH
42531: LD_INT 2
42533: NEG
42534: PUSH
42535: EMPTY
42536: LIST
42537: LIST
42538: PUSH
42539: EMPTY
42540: LIST
42541: LIST
42542: LIST
42543: LIST
42544: LIST
42545: LIST
42546: LIST
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42560: LD_ADDR_VAR 0 22
42564: PUSH
42565: LD_INT 0
42567: PUSH
42568: LD_INT 0
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: PUSH
42575: LD_INT 0
42577: PUSH
42578: LD_INT 1
42580: NEG
42581: PUSH
42582: EMPTY
42583: LIST
42584: LIST
42585: PUSH
42586: LD_INT 1
42588: PUSH
42589: LD_INT 0
42591: PUSH
42592: EMPTY
42593: LIST
42594: LIST
42595: PUSH
42596: LD_INT 1
42598: PUSH
42599: LD_INT 1
42601: PUSH
42602: EMPTY
42603: LIST
42604: LIST
42605: PUSH
42606: LD_INT 0
42608: PUSH
42609: LD_INT 1
42611: PUSH
42612: EMPTY
42613: LIST
42614: LIST
42615: PUSH
42616: LD_INT 1
42618: NEG
42619: PUSH
42620: LD_INT 0
42622: PUSH
42623: EMPTY
42624: LIST
42625: LIST
42626: PUSH
42627: LD_INT 1
42629: NEG
42630: PUSH
42631: LD_INT 1
42633: NEG
42634: PUSH
42635: EMPTY
42636: LIST
42637: LIST
42638: PUSH
42639: LD_INT 1
42641: NEG
42642: PUSH
42643: LD_INT 2
42645: NEG
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: PUSH
42651: LD_INT 0
42653: PUSH
42654: LD_INT 2
42656: NEG
42657: PUSH
42658: EMPTY
42659: LIST
42660: LIST
42661: PUSH
42662: LD_INT 1
42664: PUSH
42665: LD_INT 1
42667: NEG
42668: PUSH
42669: EMPTY
42670: LIST
42671: LIST
42672: PUSH
42673: LD_INT 2
42675: PUSH
42676: LD_INT 0
42678: PUSH
42679: EMPTY
42680: LIST
42681: LIST
42682: PUSH
42683: LD_INT 2
42685: PUSH
42686: LD_INT 1
42688: PUSH
42689: EMPTY
42690: LIST
42691: LIST
42692: PUSH
42693: LD_INT 2
42695: PUSH
42696: LD_INT 2
42698: PUSH
42699: EMPTY
42700: LIST
42701: LIST
42702: PUSH
42703: LD_INT 1
42705: PUSH
42706: LD_INT 2
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: PUSH
42713: LD_INT 0
42715: PUSH
42716: LD_INT 2
42718: PUSH
42719: EMPTY
42720: LIST
42721: LIST
42722: PUSH
42723: LD_INT 1
42725: NEG
42726: PUSH
42727: LD_INT 1
42729: PUSH
42730: EMPTY
42731: LIST
42732: LIST
42733: PUSH
42734: LD_INT 2
42736: NEG
42737: PUSH
42738: LD_INT 0
42740: PUSH
42741: EMPTY
42742: LIST
42743: LIST
42744: PUSH
42745: LD_INT 2
42747: NEG
42748: PUSH
42749: LD_INT 1
42751: NEG
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: PUSH
42757: LD_INT 2
42759: NEG
42760: PUSH
42761: LD_INT 2
42763: NEG
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: PUSH
42769: EMPTY
42770: LIST
42771: LIST
42772: LIST
42773: LIST
42774: LIST
42775: LIST
42776: LIST
42777: LIST
42778: LIST
42779: LIST
42780: LIST
42781: LIST
42782: LIST
42783: LIST
42784: LIST
42785: LIST
42786: LIST
42787: LIST
42788: LIST
42789: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
42790: LD_ADDR_VAR 0 23
42794: PUSH
42795: LD_INT 0
42797: PUSH
42798: LD_INT 0
42800: PUSH
42801: EMPTY
42802: LIST
42803: LIST
42804: PUSH
42805: LD_INT 0
42807: PUSH
42808: LD_INT 1
42810: NEG
42811: PUSH
42812: EMPTY
42813: LIST
42814: LIST
42815: PUSH
42816: LD_INT 1
42818: PUSH
42819: LD_INT 0
42821: PUSH
42822: EMPTY
42823: LIST
42824: LIST
42825: PUSH
42826: LD_INT 1
42828: PUSH
42829: LD_INT 1
42831: PUSH
42832: EMPTY
42833: LIST
42834: LIST
42835: PUSH
42836: LD_INT 0
42838: PUSH
42839: LD_INT 1
42841: PUSH
42842: EMPTY
42843: LIST
42844: LIST
42845: PUSH
42846: LD_INT 1
42848: NEG
42849: PUSH
42850: LD_INT 0
42852: PUSH
42853: EMPTY
42854: LIST
42855: LIST
42856: PUSH
42857: LD_INT 1
42859: NEG
42860: PUSH
42861: LD_INT 1
42863: NEG
42864: PUSH
42865: EMPTY
42866: LIST
42867: LIST
42868: PUSH
42869: LD_INT 1
42871: NEG
42872: PUSH
42873: LD_INT 2
42875: NEG
42876: PUSH
42877: EMPTY
42878: LIST
42879: LIST
42880: PUSH
42881: LD_INT 0
42883: PUSH
42884: LD_INT 2
42886: NEG
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: PUSH
42892: LD_INT 1
42894: PUSH
42895: LD_INT 1
42897: NEG
42898: PUSH
42899: EMPTY
42900: LIST
42901: LIST
42902: PUSH
42903: LD_INT 2
42905: PUSH
42906: LD_INT 0
42908: PUSH
42909: EMPTY
42910: LIST
42911: LIST
42912: PUSH
42913: LD_INT 2
42915: PUSH
42916: LD_INT 1
42918: PUSH
42919: EMPTY
42920: LIST
42921: LIST
42922: PUSH
42923: LD_INT 2
42925: PUSH
42926: LD_INT 2
42928: PUSH
42929: EMPTY
42930: LIST
42931: LIST
42932: PUSH
42933: LD_INT 1
42935: PUSH
42936: LD_INT 2
42938: PUSH
42939: EMPTY
42940: LIST
42941: LIST
42942: PUSH
42943: LD_INT 0
42945: PUSH
42946: LD_INT 2
42948: PUSH
42949: EMPTY
42950: LIST
42951: LIST
42952: PUSH
42953: LD_INT 1
42955: NEG
42956: PUSH
42957: LD_INT 1
42959: PUSH
42960: EMPTY
42961: LIST
42962: LIST
42963: PUSH
42964: LD_INT 2
42966: NEG
42967: PUSH
42968: LD_INT 0
42970: PUSH
42971: EMPTY
42972: LIST
42973: LIST
42974: PUSH
42975: LD_INT 2
42977: NEG
42978: PUSH
42979: LD_INT 1
42981: NEG
42982: PUSH
42983: EMPTY
42984: LIST
42985: LIST
42986: PUSH
42987: LD_INT 2
42989: NEG
42990: PUSH
42991: LD_INT 2
42993: NEG
42994: PUSH
42995: EMPTY
42996: LIST
42997: LIST
42998: PUSH
42999: LD_INT 2
43001: NEG
43002: PUSH
43003: LD_INT 3
43005: NEG
43006: PUSH
43007: EMPTY
43008: LIST
43009: LIST
43010: PUSH
43011: LD_INT 1
43013: NEG
43014: PUSH
43015: LD_INT 3
43017: NEG
43018: PUSH
43019: EMPTY
43020: LIST
43021: LIST
43022: PUSH
43023: LD_INT 1
43025: PUSH
43026: LD_INT 2
43028: NEG
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: PUSH
43034: LD_INT 2
43036: PUSH
43037: LD_INT 1
43039: NEG
43040: PUSH
43041: EMPTY
43042: LIST
43043: LIST
43044: PUSH
43045: EMPTY
43046: LIST
43047: LIST
43048: LIST
43049: LIST
43050: LIST
43051: LIST
43052: LIST
43053: LIST
43054: LIST
43055: LIST
43056: LIST
43057: LIST
43058: LIST
43059: LIST
43060: LIST
43061: LIST
43062: LIST
43063: LIST
43064: LIST
43065: LIST
43066: LIST
43067: LIST
43068: LIST
43069: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
43070: LD_ADDR_VAR 0 24
43074: PUSH
43075: LD_INT 0
43077: PUSH
43078: LD_INT 0
43080: PUSH
43081: EMPTY
43082: LIST
43083: LIST
43084: PUSH
43085: LD_INT 0
43087: PUSH
43088: LD_INT 1
43090: NEG
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: PUSH
43096: LD_INT 1
43098: PUSH
43099: LD_INT 0
43101: PUSH
43102: EMPTY
43103: LIST
43104: LIST
43105: PUSH
43106: LD_INT 1
43108: PUSH
43109: LD_INT 1
43111: PUSH
43112: EMPTY
43113: LIST
43114: LIST
43115: PUSH
43116: LD_INT 0
43118: PUSH
43119: LD_INT 1
43121: PUSH
43122: EMPTY
43123: LIST
43124: LIST
43125: PUSH
43126: LD_INT 1
43128: NEG
43129: PUSH
43130: LD_INT 0
43132: PUSH
43133: EMPTY
43134: LIST
43135: LIST
43136: PUSH
43137: LD_INT 1
43139: NEG
43140: PUSH
43141: LD_INT 1
43143: NEG
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: PUSH
43149: LD_INT 1
43151: NEG
43152: PUSH
43153: LD_INT 2
43155: NEG
43156: PUSH
43157: EMPTY
43158: LIST
43159: LIST
43160: PUSH
43161: LD_INT 0
43163: PUSH
43164: LD_INT 2
43166: NEG
43167: PUSH
43168: EMPTY
43169: LIST
43170: LIST
43171: PUSH
43172: LD_INT 1
43174: PUSH
43175: LD_INT 1
43177: NEG
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: PUSH
43183: LD_INT 2
43185: PUSH
43186: LD_INT 0
43188: PUSH
43189: EMPTY
43190: LIST
43191: LIST
43192: PUSH
43193: LD_INT 2
43195: PUSH
43196: LD_INT 1
43198: PUSH
43199: EMPTY
43200: LIST
43201: LIST
43202: PUSH
43203: LD_INT 2
43205: PUSH
43206: LD_INT 2
43208: PUSH
43209: EMPTY
43210: LIST
43211: LIST
43212: PUSH
43213: LD_INT 1
43215: PUSH
43216: LD_INT 2
43218: PUSH
43219: EMPTY
43220: LIST
43221: LIST
43222: PUSH
43223: LD_INT 0
43225: PUSH
43226: LD_INT 2
43228: PUSH
43229: EMPTY
43230: LIST
43231: LIST
43232: PUSH
43233: LD_INT 1
43235: NEG
43236: PUSH
43237: LD_INT 1
43239: PUSH
43240: EMPTY
43241: LIST
43242: LIST
43243: PUSH
43244: LD_INT 2
43246: NEG
43247: PUSH
43248: LD_INT 0
43250: PUSH
43251: EMPTY
43252: LIST
43253: LIST
43254: PUSH
43255: LD_INT 2
43257: NEG
43258: PUSH
43259: LD_INT 1
43261: NEG
43262: PUSH
43263: EMPTY
43264: LIST
43265: LIST
43266: PUSH
43267: LD_INT 2
43269: NEG
43270: PUSH
43271: LD_INT 2
43273: NEG
43274: PUSH
43275: EMPTY
43276: LIST
43277: LIST
43278: PUSH
43279: LD_INT 1
43281: PUSH
43282: LD_INT 2
43284: NEG
43285: PUSH
43286: EMPTY
43287: LIST
43288: LIST
43289: PUSH
43290: LD_INT 2
43292: PUSH
43293: LD_INT 1
43295: NEG
43296: PUSH
43297: EMPTY
43298: LIST
43299: LIST
43300: PUSH
43301: LD_INT 3
43303: PUSH
43304: LD_INT 1
43306: PUSH
43307: EMPTY
43308: LIST
43309: LIST
43310: PUSH
43311: LD_INT 3
43313: PUSH
43314: LD_INT 2
43316: PUSH
43317: EMPTY
43318: LIST
43319: LIST
43320: PUSH
43321: EMPTY
43322: LIST
43323: LIST
43324: LIST
43325: LIST
43326: LIST
43327: LIST
43328: LIST
43329: LIST
43330: LIST
43331: LIST
43332: LIST
43333: LIST
43334: LIST
43335: LIST
43336: LIST
43337: LIST
43338: LIST
43339: LIST
43340: LIST
43341: LIST
43342: LIST
43343: LIST
43344: LIST
43345: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
43346: LD_ADDR_VAR 0 25
43350: PUSH
43351: LD_INT 0
43353: PUSH
43354: LD_INT 0
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: PUSH
43361: LD_INT 0
43363: PUSH
43364: LD_INT 1
43366: NEG
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: PUSH
43372: LD_INT 1
43374: PUSH
43375: LD_INT 0
43377: PUSH
43378: EMPTY
43379: LIST
43380: LIST
43381: PUSH
43382: LD_INT 1
43384: PUSH
43385: LD_INT 1
43387: PUSH
43388: EMPTY
43389: LIST
43390: LIST
43391: PUSH
43392: LD_INT 0
43394: PUSH
43395: LD_INT 1
43397: PUSH
43398: EMPTY
43399: LIST
43400: LIST
43401: PUSH
43402: LD_INT 1
43404: NEG
43405: PUSH
43406: LD_INT 0
43408: PUSH
43409: EMPTY
43410: LIST
43411: LIST
43412: PUSH
43413: LD_INT 1
43415: NEG
43416: PUSH
43417: LD_INT 1
43419: NEG
43420: PUSH
43421: EMPTY
43422: LIST
43423: LIST
43424: PUSH
43425: LD_INT 1
43427: NEG
43428: PUSH
43429: LD_INT 2
43431: NEG
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: PUSH
43437: LD_INT 0
43439: PUSH
43440: LD_INT 2
43442: NEG
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: PUSH
43448: LD_INT 1
43450: PUSH
43451: LD_INT 1
43453: NEG
43454: PUSH
43455: EMPTY
43456: LIST
43457: LIST
43458: PUSH
43459: LD_INT 2
43461: PUSH
43462: LD_INT 0
43464: PUSH
43465: EMPTY
43466: LIST
43467: LIST
43468: PUSH
43469: LD_INT 2
43471: PUSH
43472: LD_INT 1
43474: PUSH
43475: EMPTY
43476: LIST
43477: LIST
43478: PUSH
43479: LD_INT 2
43481: PUSH
43482: LD_INT 2
43484: PUSH
43485: EMPTY
43486: LIST
43487: LIST
43488: PUSH
43489: LD_INT 1
43491: PUSH
43492: LD_INT 2
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: PUSH
43499: LD_INT 0
43501: PUSH
43502: LD_INT 2
43504: PUSH
43505: EMPTY
43506: LIST
43507: LIST
43508: PUSH
43509: LD_INT 1
43511: NEG
43512: PUSH
43513: LD_INT 1
43515: PUSH
43516: EMPTY
43517: LIST
43518: LIST
43519: PUSH
43520: LD_INT 2
43522: NEG
43523: PUSH
43524: LD_INT 0
43526: PUSH
43527: EMPTY
43528: LIST
43529: LIST
43530: PUSH
43531: LD_INT 2
43533: NEG
43534: PUSH
43535: LD_INT 1
43537: NEG
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: PUSH
43543: LD_INT 2
43545: NEG
43546: PUSH
43547: LD_INT 2
43549: NEG
43550: PUSH
43551: EMPTY
43552: LIST
43553: LIST
43554: PUSH
43555: LD_INT 3
43557: PUSH
43558: LD_INT 1
43560: PUSH
43561: EMPTY
43562: LIST
43563: LIST
43564: PUSH
43565: LD_INT 3
43567: PUSH
43568: LD_INT 2
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: PUSH
43575: LD_INT 2
43577: PUSH
43578: LD_INT 3
43580: PUSH
43581: EMPTY
43582: LIST
43583: LIST
43584: PUSH
43585: LD_INT 1
43587: PUSH
43588: LD_INT 3
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: LIST
43599: LIST
43600: LIST
43601: LIST
43602: LIST
43603: LIST
43604: LIST
43605: LIST
43606: LIST
43607: LIST
43608: LIST
43609: LIST
43610: LIST
43611: LIST
43612: LIST
43613: LIST
43614: LIST
43615: LIST
43616: LIST
43617: LIST
43618: LIST
43619: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43620: LD_ADDR_VAR 0 26
43624: PUSH
43625: LD_INT 0
43627: PUSH
43628: LD_INT 0
43630: PUSH
43631: EMPTY
43632: LIST
43633: LIST
43634: PUSH
43635: LD_INT 0
43637: PUSH
43638: LD_INT 1
43640: NEG
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: PUSH
43646: LD_INT 1
43648: PUSH
43649: LD_INT 0
43651: PUSH
43652: EMPTY
43653: LIST
43654: LIST
43655: PUSH
43656: LD_INT 1
43658: PUSH
43659: LD_INT 1
43661: PUSH
43662: EMPTY
43663: LIST
43664: LIST
43665: PUSH
43666: LD_INT 0
43668: PUSH
43669: LD_INT 1
43671: PUSH
43672: EMPTY
43673: LIST
43674: LIST
43675: PUSH
43676: LD_INT 1
43678: NEG
43679: PUSH
43680: LD_INT 0
43682: PUSH
43683: EMPTY
43684: LIST
43685: LIST
43686: PUSH
43687: LD_INT 1
43689: NEG
43690: PUSH
43691: LD_INT 1
43693: NEG
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PUSH
43699: LD_INT 1
43701: NEG
43702: PUSH
43703: LD_INT 2
43705: NEG
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: PUSH
43711: LD_INT 0
43713: PUSH
43714: LD_INT 2
43716: NEG
43717: PUSH
43718: EMPTY
43719: LIST
43720: LIST
43721: PUSH
43722: LD_INT 1
43724: PUSH
43725: LD_INT 1
43727: NEG
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: PUSH
43733: LD_INT 2
43735: PUSH
43736: LD_INT 0
43738: PUSH
43739: EMPTY
43740: LIST
43741: LIST
43742: PUSH
43743: LD_INT 2
43745: PUSH
43746: LD_INT 1
43748: PUSH
43749: EMPTY
43750: LIST
43751: LIST
43752: PUSH
43753: LD_INT 2
43755: PUSH
43756: LD_INT 2
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PUSH
43763: LD_INT 1
43765: PUSH
43766: LD_INT 2
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: PUSH
43773: LD_INT 0
43775: PUSH
43776: LD_INT 2
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: PUSH
43783: LD_INT 1
43785: NEG
43786: PUSH
43787: LD_INT 1
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: PUSH
43794: LD_INT 2
43796: NEG
43797: PUSH
43798: LD_INT 0
43800: PUSH
43801: EMPTY
43802: LIST
43803: LIST
43804: PUSH
43805: LD_INT 2
43807: NEG
43808: PUSH
43809: LD_INT 1
43811: NEG
43812: PUSH
43813: EMPTY
43814: LIST
43815: LIST
43816: PUSH
43817: LD_INT 2
43819: NEG
43820: PUSH
43821: LD_INT 2
43823: NEG
43824: PUSH
43825: EMPTY
43826: LIST
43827: LIST
43828: PUSH
43829: LD_INT 2
43831: PUSH
43832: LD_INT 3
43834: PUSH
43835: EMPTY
43836: LIST
43837: LIST
43838: PUSH
43839: LD_INT 1
43841: PUSH
43842: LD_INT 3
43844: PUSH
43845: EMPTY
43846: LIST
43847: LIST
43848: PUSH
43849: LD_INT 1
43851: NEG
43852: PUSH
43853: LD_INT 2
43855: PUSH
43856: EMPTY
43857: LIST
43858: LIST
43859: PUSH
43860: LD_INT 2
43862: NEG
43863: PUSH
43864: LD_INT 1
43866: PUSH
43867: EMPTY
43868: LIST
43869: LIST
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: LIST
43875: LIST
43876: LIST
43877: LIST
43878: LIST
43879: LIST
43880: LIST
43881: LIST
43882: LIST
43883: LIST
43884: LIST
43885: LIST
43886: LIST
43887: LIST
43888: LIST
43889: LIST
43890: LIST
43891: LIST
43892: LIST
43893: LIST
43894: LIST
43895: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43896: LD_ADDR_VAR 0 27
43900: PUSH
43901: LD_INT 0
43903: PUSH
43904: LD_INT 0
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: PUSH
43911: LD_INT 0
43913: PUSH
43914: LD_INT 1
43916: NEG
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: PUSH
43922: LD_INT 1
43924: PUSH
43925: LD_INT 0
43927: PUSH
43928: EMPTY
43929: LIST
43930: LIST
43931: PUSH
43932: LD_INT 1
43934: PUSH
43935: LD_INT 1
43937: PUSH
43938: EMPTY
43939: LIST
43940: LIST
43941: PUSH
43942: LD_INT 0
43944: PUSH
43945: LD_INT 1
43947: PUSH
43948: EMPTY
43949: LIST
43950: LIST
43951: PUSH
43952: LD_INT 1
43954: NEG
43955: PUSH
43956: LD_INT 0
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: PUSH
43963: LD_INT 1
43965: NEG
43966: PUSH
43967: LD_INT 1
43969: NEG
43970: PUSH
43971: EMPTY
43972: LIST
43973: LIST
43974: PUSH
43975: LD_INT 1
43977: NEG
43978: PUSH
43979: LD_INT 2
43981: NEG
43982: PUSH
43983: EMPTY
43984: LIST
43985: LIST
43986: PUSH
43987: LD_INT 0
43989: PUSH
43990: LD_INT 2
43992: NEG
43993: PUSH
43994: EMPTY
43995: LIST
43996: LIST
43997: PUSH
43998: LD_INT 1
44000: PUSH
44001: LD_INT 1
44003: NEG
44004: PUSH
44005: EMPTY
44006: LIST
44007: LIST
44008: PUSH
44009: LD_INT 2
44011: PUSH
44012: LD_INT 0
44014: PUSH
44015: EMPTY
44016: LIST
44017: LIST
44018: PUSH
44019: LD_INT 2
44021: PUSH
44022: LD_INT 1
44024: PUSH
44025: EMPTY
44026: LIST
44027: LIST
44028: PUSH
44029: LD_INT 2
44031: PUSH
44032: LD_INT 2
44034: PUSH
44035: EMPTY
44036: LIST
44037: LIST
44038: PUSH
44039: LD_INT 1
44041: PUSH
44042: LD_INT 2
44044: PUSH
44045: EMPTY
44046: LIST
44047: LIST
44048: PUSH
44049: LD_INT 0
44051: PUSH
44052: LD_INT 2
44054: PUSH
44055: EMPTY
44056: LIST
44057: LIST
44058: PUSH
44059: LD_INT 1
44061: NEG
44062: PUSH
44063: LD_INT 1
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: PUSH
44070: LD_INT 2
44072: NEG
44073: PUSH
44074: LD_INT 0
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: PUSH
44081: LD_INT 2
44083: NEG
44084: PUSH
44085: LD_INT 1
44087: NEG
44088: PUSH
44089: EMPTY
44090: LIST
44091: LIST
44092: PUSH
44093: LD_INT 2
44095: NEG
44096: PUSH
44097: LD_INT 2
44099: NEG
44100: PUSH
44101: EMPTY
44102: LIST
44103: LIST
44104: PUSH
44105: LD_INT 1
44107: NEG
44108: PUSH
44109: LD_INT 2
44111: PUSH
44112: EMPTY
44113: LIST
44114: LIST
44115: PUSH
44116: LD_INT 2
44118: NEG
44119: PUSH
44120: LD_INT 1
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: PUSH
44127: LD_INT 3
44129: NEG
44130: PUSH
44131: LD_INT 1
44133: NEG
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: PUSH
44139: LD_INT 3
44141: NEG
44142: PUSH
44143: LD_INT 2
44145: NEG
44146: PUSH
44147: EMPTY
44148: LIST
44149: LIST
44150: PUSH
44151: EMPTY
44152: LIST
44153: LIST
44154: LIST
44155: LIST
44156: LIST
44157: LIST
44158: LIST
44159: LIST
44160: LIST
44161: LIST
44162: LIST
44163: LIST
44164: LIST
44165: LIST
44166: LIST
44167: LIST
44168: LIST
44169: LIST
44170: LIST
44171: LIST
44172: LIST
44173: LIST
44174: LIST
44175: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44176: LD_ADDR_VAR 0 28
44180: PUSH
44181: LD_INT 0
44183: PUSH
44184: LD_INT 0
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: PUSH
44191: LD_INT 0
44193: PUSH
44194: LD_INT 1
44196: NEG
44197: PUSH
44198: EMPTY
44199: LIST
44200: LIST
44201: PUSH
44202: LD_INT 1
44204: PUSH
44205: LD_INT 0
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: PUSH
44212: LD_INT 1
44214: PUSH
44215: LD_INT 1
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: PUSH
44222: LD_INT 0
44224: PUSH
44225: LD_INT 1
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: PUSH
44232: LD_INT 1
44234: NEG
44235: PUSH
44236: LD_INT 0
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: PUSH
44243: LD_INT 1
44245: NEG
44246: PUSH
44247: LD_INT 1
44249: NEG
44250: PUSH
44251: EMPTY
44252: LIST
44253: LIST
44254: PUSH
44255: LD_INT 1
44257: NEG
44258: PUSH
44259: LD_INT 2
44261: NEG
44262: PUSH
44263: EMPTY
44264: LIST
44265: LIST
44266: PUSH
44267: LD_INT 0
44269: PUSH
44270: LD_INT 2
44272: NEG
44273: PUSH
44274: EMPTY
44275: LIST
44276: LIST
44277: PUSH
44278: LD_INT 1
44280: PUSH
44281: LD_INT 1
44283: NEG
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: PUSH
44289: LD_INT 2
44291: PUSH
44292: LD_INT 0
44294: PUSH
44295: EMPTY
44296: LIST
44297: LIST
44298: PUSH
44299: LD_INT 2
44301: PUSH
44302: LD_INT 1
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: PUSH
44309: LD_INT 2
44311: PUSH
44312: LD_INT 2
44314: PUSH
44315: EMPTY
44316: LIST
44317: LIST
44318: PUSH
44319: LD_INT 1
44321: PUSH
44322: LD_INT 2
44324: PUSH
44325: EMPTY
44326: LIST
44327: LIST
44328: PUSH
44329: LD_INT 0
44331: PUSH
44332: LD_INT 2
44334: PUSH
44335: EMPTY
44336: LIST
44337: LIST
44338: PUSH
44339: LD_INT 1
44341: NEG
44342: PUSH
44343: LD_INT 1
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: PUSH
44350: LD_INT 2
44352: NEG
44353: PUSH
44354: LD_INT 0
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: PUSH
44361: LD_INT 2
44363: NEG
44364: PUSH
44365: LD_INT 1
44367: NEG
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: PUSH
44373: LD_INT 2
44375: NEG
44376: PUSH
44377: LD_INT 2
44379: NEG
44380: PUSH
44381: EMPTY
44382: LIST
44383: LIST
44384: PUSH
44385: LD_INT 2
44387: NEG
44388: PUSH
44389: LD_INT 3
44391: NEG
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: PUSH
44397: LD_INT 1
44399: NEG
44400: PUSH
44401: LD_INT 3
44403: NEG
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: PUSH
44409: LD_INT 3
44411: NEG
44412: PUSH
44413: LD_INT 1
44415: NEG
44416: PUSH
44417: EMPTY
44418: LIST
44419: LIST
44420: PUSH
44421: LD_INT 3
44423: NEG
44424: PUSH
44425: LD_INT 2
44427: NEG
44428: PUSH
44429: EMPTY
44430: LIST
44431: LIST
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: LIST
44437: LIST
44438: LIST
44439: LIST
44440: LIST
44441: LIST
44442: LIST
44443: LIST
44444: LIST
44445: LIST
44446: LIST
44447: LIST
44448: LIST
44449: LIST
44450: LIST
44451: LIST
44452: LIST
44453: LIST
44454: LIST
44455: LIST
44456: LIST
44457: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44458: LD_ADDR_VAR 0 29
44462: PUSH
44463: LD_INT 0
44465: PUSH
44466: LD_INT 0
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: PUSH
44473: LD_INT 0
44475: PUSH
44476: LD_INT 1
44478: NEG
44479: PUSH
44480: EMPTY
44481: LIST
44482: LIST
44483: PUSH
44484: LD_INT 1
44486: PUSH
44487: LD_INT 0
44489: PUSH
44490: EMPTY
44491: LIST
44492: LIST
44493: PUSH
44494: LD_INT 1
44496: PUSH
44497: LD_INT 1
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: PUSH
44504: LD_INT 0
44506: PUSH
44507: LD_INT 1
44509: PUSH
44510: EMPTY
44511: LIST
44512: LIST
44513: PUSH
44514: LD_INT 1
44516: NEG
44517: PUSH
44518: LD_INT 0
44520: PUSH
44521: EMPTY
44522: LIST
44523: LIST
44524: PUSH
44525: LD_INT 1
44527: NEG
44528: PUSH
44529: LD_INT 1
44531: NEG
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: PUSH
44537: LD_INT 1
44539: NEG
44540: PUSH
44541: LD_INT 2
44543: NEG
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: PUSH
44549: LD_INT 0
44551: PUSH
44552: LD_INT 2
44554: NEG
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: PUSH
44560: LD_INT 1
44562: PUSH
44563: LD_INT 1
44565: NEG
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: PUSH
44571: LD_INT 2
44573: PUSH
44574: LD_INT 0
44576: PUSH
44577: EMPTY
44578: LIST
44579: LIST
44580: PUSH
44581: LD_INT 2
44583: PUSH
44584: LD_INT 1
44586: PUSH
44587: EMPTY
44588: LIST
44589: LIST
44590: PUSH
44591: LD_INT 1
44593: PUSH
44594: LD_INT 2
44596: PUSH
44597: EMPTY
44598: LIST
44599: LIST
44600: PUSH
44601: LD_INT 0
44603: PUSH
44604: LD_INT 2
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: PUSH
44611: LD_INT 1
44613: NEG
44614: PUSH
44615: LD_INT 1
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: PUSH
44622: LD_INT 2
44624: NEG
44625: PUSH
44626: LD_INT 1
44628: NEG
44629: PUSH
44630: EMPTY
44631: LIST
44632: LIST
44633: PUSH
44634: LD_INT 2
44636: NEG
44637: PUSH
44638: LD_INT 2
44640: NEG
44641: PUSH
44642: EMPTY
44643: LIST
44644: LIST
44645: PUSH
44646: LD_INT 2
44648: NEG
44649: PUSH
44650: LD_INT 3
44652: NEG
44653: PUSH
44654: EMPTY
44655: LIST
44656: LIST
44657: PUSH
44658: LD_INT 2
44660: PUSH
44661: LD_INT 1
44663: NEG
44664: PUSH
44665: EMPTY
44666: LIST
44667: LIST
44668: PUSH
44669: LD_INT 3
44671: PUSH
44672: LD_INT 1
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: PUSH
44679: LD_INT 1
44681: PUSH
44682: LD_INT 3
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: PUSH
44689: LD_INT 1
44691: NEG
44692: PUSH
44693: LD_INT 2
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: PUSH
44700: LD_INT 3
44702: NEG
44703: PUSH
44704: LD_INT 2
44706: NEG
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: PUSH
44712: EMPTY
44713: LIST
44714: LIST
44715: LIST
44716: LIST
44717: LIST
44718: LIST
44719: LIST
44720: LIST
44721: LIST
44722: LIST
44723: LIST
44724: LIST
44725: LIST
44726: LIST
44727: LIST
44728: LIST
44729: LIST
44730: LIST
44731: LIST
44732: LIST
44733: LIST
44734: LIST
44735: LIST
44736: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44737: LD_ADDR_VAR 0 30
44741: PUSH
44742: LD_INT 0
44744: PUSH
44745: LD_INT 0
44747: PUSH
44748: EMPTY
44749: LIST
44750: LIST
44751: PUSH
44752: LD_INT 0
44754: PUSH
44755: LD_INT 1
44757: NEG
44758: PUSH
44759: EMPTY
44760: LIST
44761: LIST
44762: PUSH
44763: LD_INT 1
44765: PUSH
44766: LD_INT 0
44768: PUSH
44769: EMPTY
44770: LIST
44771: LIST
44772: PUSH
44773: LD_INT 1
44775: PUSH
44776: LD_INT 1
44778: PUSH
44779: EMPTY
44780: LIST
44781: LIST
44782: PUSH
44783: LD_INT 0
44785: PUSH
44786: LD_INT 1
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: PUSH
44793: LD_INT 1
44795: NEG
44796: PUSH
44797: LD_INT 0
44799: PUSH
44800: EMPTY
44801: LIST
44802: LIST
44803: PUSH
44804: LD_INT 1
44806: NEG
44807: PUSH
44808: LD_INT 1
44810: NEG
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: PUSH
44816: LD_INT 1
44818: NEG
44819: PUSH
44820: LD_INT 2
44822: NEG
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: PUSH
44828: LD_INT 0
44830: PUSH
44831: LD_INT 2
44833: NEG
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: PUSH
44839: LD_INT 1
44841: PUSH
44842: LD_INT 1
44844: NEG
44845: PUSH
44846: EMPTY
44847: LIST
44848: LIST
44849: PUSH
44850: LD_INT 2
44852: PUSH
44853: LD_INT 0
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: PUSH
44860: LD_INT 2
44862: PUSH
44863: LD_INT 1
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: PUSH
44870: LD_INT 2
44872: PUSH
44873: LD_INT 2
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: PUSH
44880: LD_INT 1
44882: PUSH
44883: LD_INT 2
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: PUSH
44890: LD_INT 1
44892: NEG
44893: PUSH
44894: LD_INT 1
44896: PUSH
44897: EMPTY
44898: LIST
44899: LIST
44900: PUSH
44901: LD_INT 2
44903: NEG
44904: PUSH
44905: LD_INT 0
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: PUSH
44912: LD_INT 2
44914: NEG
44915: PUSH
44916: LD_INT 1
44918: NEG
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: PUSH
44924: LD_INT 1
44926: NEG
44927: PUSH
44928: LD_INT 3
44930: NEG
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: PUSH
44936: LD_INT 1
44938: PUSH
44939: LD_INT 2
44941: NEG
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: PUSH
44947: LD_INT 3
44949: PUSH
44950: LD_INT 2
44952: PUSH
44953: EMPTY
44954: LIST
44955: LIST
44956: PUSH
44957: LD_INT 2
44959: PUSH
44960: LD_INT 3
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: PUSH
44967: LD_INT 2
44969: NEG
44970: PUSH
44971: LD_INT 1
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: LD_INT 3
44980: NEG
44981: PUSH
44982: LD_INT 1
44984: NEG
44985: PUSH
44986: EMPTY
44987: LIST
44988: LIST
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: LIST
44994: LIST
44995: LIST
44996: LIST
44997: LIST
44998: LIST
44999: LIST
45000: LIST
45001: LIST
45002: LIST
45003: LIST
45004: LIST
45005: LIST
45006: LIST
45007: LIST
45008: LIST
45009: LIST
45010: LIST
45011: LIST
45012: LIST
45013: LIST
45014: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45015: LD_ADDR_VAR 0 31
45019: PUSH
45020: LD_INT 0
45022: PUSH
45023: LD_INT 0
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: PUSH
45030: LD_INT 0
45032: PUSH
45033: LD_INT 1
45035: NEG
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 1
45043: PUSH
45044: LD_INT 0
45046: PUSH
45047: EMPTY
45048: LIST
45049: LIST
45050: PUSH
45051: LD_INT 1
45053: PUSH
45054: LD_INT 1
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: PUSH
45061: LD_INT 0
45063: PUSH
45064: LD_INT 1
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: PUSH
45071: LD_INT 1
45073: NEG
45074: PUSH
45075: LD_INT 0
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: PUSH
45082: LD_INT 1
45084: NEG
45085: PUSH
45086: LD_INT 1
45088: NEG
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: PUSH
45094: LD_INT 1
45096: NEG
45097: PUSH
45098: LD_INT 2
45100: NEG
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: PUSH
45106: LD_INT 1
45108: PUSH
45109: LD_INT 1
45111: NEG
45112: PUSH
45113: EMPTY
45114: LIST
45115: LIST
45116: PUSH
45117: LD_INT 2
45119: PUSH
45120: LD_INT 0
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: PUSH
45127: LD_INT 2
45129: PUSH
45130: LD_INT 1
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: PUSH
45137: LD_INT 2
45139: PUSH
45140: LD_INT 2
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: PUSH
45147: LD_INT 1
45149: PUSH
45150: LD_INT 2
45152: PUSH
45153: EMPTY
45154: LIST
45155: LIST
45156: PUSH
45157: LD_INT 0
45159: PUSH
45160: LD_INT 2
45162: PUSH
45163: EMPTY
45164: LIST
45165: LIST
45166: PUSH
45167: LD_INT 1
45169: NEG
45170: PUSH
45171: LD_INT 1
45173: PUSH
45174: EMPTY
45175: LIST
45176: LIST
45177: PUSH
45178: LD_INT 2
45180: NEG
45181: PUSH
45182: LD_INT 1
45184: NEG
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: PUSH
45190: LD_INT 2
45192: NEG
45193: PUSH
45194: LD_INT 2
45196: NEG
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: PUSH
45202: LD_INT 2
45204: NEG
45205: PUSH
45206: LD_INT 3
45208: NEG
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: PUSH
45214: LD_INT 2
45216: PUSH
45217: LD_INT 1
45219: NEG
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: LD_INT 3
45227: PUSH
45228: LD_INT 1
45230: PUSH
45231: EMPTY
45232: LIST
45233: LIST
45234: PUSH
45235: LD_INT 1
45237: PUSH
45238: LD_INT 3
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: PUSH
45245: LD_INT 1
45247: NEG
45248: PUSH
45249: LD_INT 2
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: PUSH
45256: LD_INT 3
45258: NEG
45259: PUSH
45260: LD_INT 2
45262: NEG
45263: PUSH
45264: EMPTY
45265: LIST
45266: LIST
45267: PUSH
45268: EMPTY
45269: LIST
45270: LIST
45271: LIST
45272: LIST
45273: LIST
45274: LIST
45275: LIST
45276: LIST
45277: LIST
45278: LIST
45279: LIST
45280: LIST
45281: LIST
45282: LIST
45283: LIST
45284: LIST
45285: LIST
45286: LIST
45287: LIST
45288: LIST
45289: LIST
45290: LIST
45291: LIST
45292: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45293: LD_ADDR_VAR 0 32
45297: PUSH
45298: LD_INT 0
45300: PUSH
45301: LD_INT 0
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: PUSH
45308: LD_INT 0
45310: PUSH
45311: LD_INT 1
45313: NEG
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: PUSH
45319: LD_INT 1
45321: PUSH
45322: LD_INT 0
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: PUSH
45329: LD_INT 1
45331: PUSH
45332: LD_INT 1
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: PUSH
45339: LD_INT 0
45341: PUSH
45342: LD_INT 1
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: PUSH
45349: LD_INT 1
45351: NEG
45352: PUSH
45353: LD_INT 0
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: PUSH
45360: LD_INT 1
45362: NEG
45363: PUSH
45364: LD_INT 1
45366: NEG
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: PUSH
45372: LD_INT 1
45374: NEG
45375: PUSH
45376: LD_INT 2
45378: NEG
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: PUSH
45384: LD_INT 0
45386: PUSH
45387: LD_INT 2
45389: NEG
45390: PUSH
45391: EMPTY
45392: LIST
45393: LIST
45394: PUSH
45395: LD_INT 1
45397: PUSH
45398: LD_INT 1
45400: NEG
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: PUSH
45406: LD_INT 2
45408: PUSH
45409: LD_INT 1
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: PUSH
45416: LD_INT 2
45418: PUSH
45419: LD_INT 2
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PUSH
45426: LD_INT 1
45428: PUSH
45429: LD_INT 2
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: PUSH
45436: LD_INT 0
45438: PUSH
45439: LD_INT 2
45441: PUSH
45442: EMPTY
45443: LIST
45444: LIST
45445: PUSH
45446: LD_INT 1
45448: NEG
45449: PUSH
45450: LD_INT 1
45452: PUSH
45453: EMPTY
45454: LIST
45455: LIST
45456: PUSH
45457: LD_INT 2
45459: NEG
45460: PUSH
45461: LD_INT 0
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: PUSH
45468: LD_INT 2
45470: NEG
45471: PUSH
45472: LD_INT 1
45474: NEG
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: PUSH
45480: LD_INT 1
45482: NEG
45483: PUSH
45484: LD_INT 3
45486: NEG
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: PUSH
45492: LD_INT 1
45494: PUSH
45495: LD_INT 2
45497: NEG
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: PUSH
45503: LD_INT 3
45505: PUSH
45506: LD_INT 2
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: PUSH
45513: LD_INT 2
45515: PUSH
45516: LD_INT 3
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: PUSH
45523: LD_INT 2
45525: NEG
45526: PUSH
45527: LD_INT 1
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: PUSH
45534: LD_INT 3
45536: NEG
45537: PUSH
45538: LD_INT 1
45540: NEG
45541: PUSH
45542: EMPTY
45543: LIST
45544: LIST
45545: PUSH
45546: EMPTY
45547: LIST
45548: LIST
45549: LIST
45550: LIST
45551: LIST
45552: LIST
45553: LIST
45554: LIST
45555: LIST
45556: LIST
45557: LIST
45558: LIST
45559: LIST
45560: LIST
45561: LIST
45562: LIST
45563: LIST
45564: LIST
45565: LIST
45566: LIST
45567: LIST
45568: LIST
45569: LIST
45570: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45571: LD_ADDR_VAR 0 33
45575: PUSH
45576: LD_INT 0
45578: PUSH
45579: LD_INT 0
45581: PUSH
45582: EMPTY
45583: LIST
45584: LIST
45585: PUSH
45586: LD_INT 0
45588: PUSH
45589: LD_INT 1
45591: NEG
45592: PUSH
45593: EMPTY
45594: LIST
45595: LIST
45596: PUSH
45597: LD_INT 1
45599: PUSH
45600: LD_INT 0
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: PUSH
45607: LD_INT 1
45609: PUSH
45610: LD_INT 1
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: PUSH
45617: LD_INT 0
45619: PUSH
45620: LD_INT 1
45622: PUSH
45623: EMPTY
45624: LIST
45625: LIST
45626: PUSH
45627: LD_INT 1
45629: NEG
45630: PUSH
45631: LD_INT 0
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: PUSH
45638: LD_INT 1
45640: NEG
45641: PUSH
45642: LD_INT 1
45644: NEG
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: PUSH
45650: LD_INT 1
45652: NEG
45653: PUSH
45654: LD_INT 2
45656: NEG
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PUSH
45662: LD_INT 1
45664: PUSH
45665: LD_INT 1
45667: NEG
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: LD_INT 2
45675: PUSH
45676: LD_INT 0
45678: PUSH
45679: EMPTY
45680: LIST
45681: LIST
45682: PUSH
45683: LD_INT 2
45685: PUSH
45686: LD_INT 1
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: PUSH
45693: LD_INT 1
45695: PUSH
45696: LD_INT 2
45698: PUSH
45699: EMPTY
45700: LIST
45701: LIST
45702: PUSH
45703: LD_INT 0
45705: PUSH
45706: LD_INT 2
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: PUSH
45713: LD_INT 1
45715: NEG
45716: PUSH
45717: LD_INT 1
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: PUSH
45724: LD_INT 2
45726: NEG
45727: PUSH
45728: LD_INT 0
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: PUSH
45735: LD_INT 2
45737: NEG
45738: PUSH
45739: LD_INT 1
45741: NEG
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: LD_INT 2
45749: NEG
45750: PUSH
45751: LD_INT 2
45753: NEG
45754: PUSH
45755: EMPTY
45756: LIST
45757: LIST
45758: PUSH
45759: LD_INT 2
45761: NEG
45762: PUSH
45763: LD_INT 3
45765: NEG
45766: PUSH
45767: EMPTY
45768: LIST
45769: LIST
45770: PUSH
45771: LD_INT 2
45773: PUSH
45774: LD_INT 1
45776: NEG
45777: PUSH
45778: EMPTY
45779: LIST
45780: LIST
45781: PUSH
45782: LD_INT 3
45784: PUSH
45785: LD_INT 1
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: PUSH
45792: LD_INT 1
45794: PUSH
45795: LD_INT 3
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: PUSH
45802: LD_INT 1
45804: NEG
45805: PUSH
45806: LD_INT 2
45808: PUSH
45809: EMPTY
45810: LIST
45811: LIST
45812: PUSH
45813: LD_INT 3
45815: NEG
45816: PUSH
45817: LD_INT 2
45819: NEG
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: EMPTY
45826: LIST
45827: LIST
45828: LIST
45829: LIST
45830: LIST
45831: LIST
45832: LIST
45833: LIST
45834: LIST
45835: LIST
45836: LIST
45837: LIST
45838: LIST
45839: LIST
45840: LIST
45841: LIST
45842: LIST
45843: LIST
45844: LIST
45845: LIST
45846: LIST
45847: LIST
45848: LIST
45849: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45850: LD_ADDR_VAR 0 34
45854: PUSH
45855: LD_INT 0
45857: PUSH
45858: LD_INT 0
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: PUSH
45865: LD_INT 0
45867: PUSH
45868: LD_INT 1
45870: NEG
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: PUSH
45876: LD_INT 1
45878: PUSH
45879: LD_INT 0
45881: PUSH
45882: EMPTY
45883: LIST
45884: LIST
45885: PUSH
45886: LD_INT 1
45888: PUSH
45889: LD_INT 1
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: PUSH
45896: LD_INT 0
45898: PUSH
45899: LD_INT 1
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: PUSH
45906: LD_INT 1
45908: NEG
45909: PUSH
45910: LD_INT 0
45912: PUSH
45913: EMPTY
45914: LIST
45915: LIST
45916: PUSH
45917: LD_INT 1
45919: NEG
45920: PUSH
45921: LD_INT 1
45923: NEG
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: PUSH
45929: LD_INT 1
45931: NEG
45932: PUSH
45933: LD_INT 2
45935: NEG
45936: PUSH
45937: EMPTY
45938: LIST
45939: LIST
45940: PUSH
45941: LD_INT 0
45943: PUSH
45944: LD_INT 2
45946: NEG
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: PUSH
45952: LD_INT 1
45954: PUSH
45955: LD_INT 1
45957: NEG
45958: PUSH
45959: EMPTY
45960: LIST
45961: LIST
45962: PUSH
45963: LD_INT 2
45965: PUSH
45966: LD_INT 1
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: LD_INT 2
45975: PUSH
45976: LD_INT 2
45978: PUSH
45979: EMPTY
45980: LIST
45981: LIST
45982: PUSH
45983: LD_INT 1
45985: PUSH
45986: LD_INT 2
45988: PUSH
45989: EMPTY
45990: LIST
45991: LIST
45992: PUSH
45993: LD_INT 1
45995: NEG
45996: PUSH
45997: LD_INT 1
45999: PUSH
46000: EMPTY
46001: LIST
46002: LIST
46003: PUSH
46004: LD_INT 2
46006: NEG
46007: PUSH
46008: LD_INT 0
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: PUSH
46015: LD_INT 2
46017: NEG
46018: PUSH
46019: LD_INT 1
46021: NEG
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: PUSH
46027: LD_INT 2
46029: NEG
46030: PUSH
46031: LD_INT 2
46033: NEG
46034: PUSH
46035: EMPTY
46036: LIST
46037: LIST
46038: PUSH
46039: LD_INT 1
46041: NEG
46042: PUSH
46043: LD_INT 3
46045: NEG
46046: PUSH
46047: EMPTY
46048: LIST
46049: LIST
46050: PUSH
46051: LD_INT 1
46053: PUSH
46054: LD_INT 2
46056: NEG
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: LD_INT 3
46064: PUSH
46065: LD_INT 2
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: PUSH
46072: LD_INT 2
46074: PUSH
46075: LD_INT 3
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: PUSH
46082: LD_INT 2
46084: NEG
46085: PUSH
46086: LD_INT 1
46088: PUSH
46089: EMPTY
46090: LIST
46091: LIST
46092: PUSH
46093: LD_INT 3
46095: NEG
46096: PUSH
46097: LD_INT 1
46099: NEG
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: PUSH
46105: EMPTY
46106: LIST
46107: LIST
46108: LIST
46109: LIST
46110: LIST
46111: LIST
46112: LIST
46113: LIST
46114: LIST
46115: LIST
46116: LIST
46117: LIST
46118: LIST
46119: LIST
46120: LIST
46121: LIST
46122: LIST
46123: LIST
46124: LIST
46125: LIST
46126: LIST
46127: LIST
46128: LIST
46129: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46130: LD_ADDR_VAR 0 35
46134: PUSH
46135: LD_INT 0
46137: PUSH
46138: LD_INT 0
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: PUSH
46145: LD_INT 0
46147: PUSH
46148: LD_INT 1
46150: NEG
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: PUSH
46156: LD_INT 1
46158: PUSH
46159: LD_INT 0
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: PUSH
46166: LD_INT 1
46168: PUSH
46169: LD_INT 1
46171: PUSH
46172: EMPTY
46173: LIST
46174: LIST
46175: PUSH
46176: LD_INT 0
46178: PUSH
46179: LD_INT 1
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: PUSH
46186: LD_INT 1
46188: NEG
46189: PUSH
46190: LD_INT 0
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: LD_INT 1
46199: NEG
46200: PUSH
46201: LD_INT 1
46203: NEG
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: PUSH
46209: LD_INT 2
46211: PUSH
46212: LD_INT 1
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: PUSH
46219: LD_INT 2
46221: NEG
46222: PUSH
46223: LD_INT 1
46225: NEG
46226: PUSH
46227: EMPTY
46228: LIST
46229: LIST
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: LIST
46235: LIST
46236: LIST
46237: LIST
46238: LIST
46239: LIST
46240: LIST
46241: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46242: LD_ADDR_VAR 0 36
46246: PUSH
46247: LD_INT 0
46249: PUSH
46250: LD_INT 0
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: PUSH
46257: LD_INT 0
46259: PUSH
46260: LD_INT 1
46262: NEG
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: PUSH
46268: LD_INT 1
46270: PUSH
46271: LD_INT 0
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: PUSH
46278: LD_INT 1
46280: PUSH
46281: LD_INT 1
46283: PUSH
46284: EMPTY
46285: LIST
46286: LIST
46287: PUSH
46288: LD_INT 0
46290: PUSH
46291: LD_INT 1
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: LD_INT 1
46300: NEG
46301: PUSH
46302: LD_INT 0
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: PUSH
46309: LD_INT 1
46311: NEG
46312: PUSH
46313: LD_INT 1
46315: NEG
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: PUSH
46321: LD_INT 1
46323: NEG
46324: PUSH
46325: LD_INT 2
46327: NEG
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: PUSH
46333: LD_INT 1
46335: PUSH
46336: LD_INT 2
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: LIST
46347: LIST
46348: LIST
46349: LIST
46350: LIST
46351: LIST
46352: LIST
46353: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46354: LD_ADDR_VAR 0 37
46358: PUSH
46359: LD_INT 0
46361: PUSH
46362: LD_INT 0
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: LD_INT 0
46371: PUSH
46372: LD_INT 1
46374: NEG
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: PUSH
46380: LD_INT 1
46382: PUSH
46383: LD_INT 0
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: LD_INT 1
46392: PUSH
46393: LD_INT 1
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: PUSH
46400: LD_INT 0
46402: PUSH
46403: LD_INT 1
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_INT 1
46412: NEG
46413: PUSH
46414: LD_INT 0
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 1
46423: NEG
46424: PUSH
46425: LD_INT 1
46427: NEG
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: PUSH
46433: LD_INT 1
46435: PUSH
46436: LD_INT 1
46438: NEG
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: PUSH
46444: LD_INT 1
46446: NEG
46447: PUSH
46448: LD_INT 1
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: LIST
46459: LIST
46460: LIST
46461: LIST
46462: LIST
46463: LIST
46464: LIST
46465: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46466: LD_ADDR_VAR 0 38
46470: PUSH
46471: LD_INT 0
46473: PUSH
46474: LD_INT 0
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 0
46483: PUSH
46484: LD_INT 1
46486: NEG
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: PUSH
46492: LD_INT 1
46494: PUSH
46495: LD_INT 0
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: PUSH
46502: LD_INT 1
46504: PUSH
46505: LD_INT 1
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: PUSH
46512: LD_INT 0
46514: PUSH
46515: LD_INT 1
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 1
46524: NEG
46525: PUSH
46526: LD_INT 0
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: LD_INT 1
46535: NEG
46536: PUSH
46537: LD_INT 1
46539: NEG
46540: PUSH
46541: EMPTY
46542: LIST
46543: LIST
46544: PUSH
46545: LD_INT 2
46547: PUSH
46548: LD_INT 1
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: PUSH
46555: LD_INT 2
46557: NEG
46558: PUSH
46559: LD_INT 1
46561: NEG
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: LIST
46571: LIST
46572: LIST
46573: LIST
46574: LIST
46575: LIST
46576: LIST
46577: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46578: LD_ADDR_VAR 0 39
46582: PUSH
46583: LD_INT 0
46585: PUSH
46586: LD_INT 0
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: PUSH
46593: LD_INT 0
46595: PUSH
46596: LD_INT 1
46598: NEG
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: PUSH
46604: LD_INT 1
46606: PUSH
46607: LD_INT 0
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: PUSH
46614: LD_INT 1
46616: PUSH
46617: LD_INT 1
46619: PUSH
46620: EMPTY
46621: LIST
46622: LIST
46623: PUSH
46624: LD_INT 0
46626: PUSH
46627: LD_INT 1
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: LD_INT 1
46636: NEG
46637: PUSH
46638: LD_INT 0
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: LD_INT 1
46647: NEG
46648: PUSH
46649: LD_INT 1
46651: NEG
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: PUSH
46657: LD_INT 1
46659: NEG
46660: PUSH
46661: LD_INT 2
46663: NEG
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: PUSH
46669: LD_INT 1
46671: PUSH
46672: LD_INT 2
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: LIST
46683: LIST
46684: LIST
46685: LIST
46686: LIST
46687: LIST
46688: LIST
46689: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46690: LD_ADDR_VAR 0 40
46694: PUSH
46695: LD_INT 0
46697: PUSH
46698: LD_INT 0
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: LD_INT 0
46707: PUSH
46708: LD_INT 1
46710: NEG
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: LD_INT 1
46718: PUSH
46719: LD_INT 0
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: PUSH
46726: LD_INT 1
46728: PUSH
46729: LD_INT 1
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: LD_INT 0
46738: PUSH
46739: LD_INT 1
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: PUSH
46746: LD_INT 1
46748: NEG
46749: PUSH
46750: LD_INT 0
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: PUSH
46757: LD_INT 1
46759: NEG
46760: PUSH
46761: LD_INT 1
46763: NEG
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PUSH
46769: LD_INT 1
46771: PUSH
46772: LD_INT 1
46774: NEG
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: PUSH
46780: LD_INT 1
46782: NEG
46783: PUSH
46784: LD_INT 1
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: EMPTY
46792: LIST
46793: LIST
46794: LIST
46795: LIST
46796: LIST
46797: LIST
46798: LIST
46799: LIST
46800: LIST
46801: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46802: LD_ADDR_VAR 0 41
46806: PUSH
46807: LD_INT 0
46809: PUSH
46810: LD_INT 0
46812: PUSH
46813: EMPTY
46814: LIST
46815: LIST
46816: PUSH
46817: LD_INT 0
46819: PUSH
46820: LD_INT 1
46822: NEG
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: PUSH
46828: LD_INT 1
46830: PUSH
46831: LD_INT 0
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: LD_INT 1
46840: PUSH
46841: LD_INT 1
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: PUSH
46848: LD_INT 0
46850: PUSH
46851: LD_INT 1
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: PUSH
46858: LD_INT 1
46860: NEG
46861: PUSH
46862: LD_INT 0
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: LD_INT 1
46871: NEG
46872: PUSH
46873: LD_INT 1
46875: NEG
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PUSH
46881: LD_INT 1
46883: NEG
46884: PUSH
46885: LD_INT 2
46887: NEG
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: PUSH
46893: LD_INT 1
46895: PUSH
46896: LD_INT 1
46898: NEG
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: PUSH
46904: LD_INT 2
46906: PUSH
46907: LD_INT 0
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: PUSH
46914: LD_INT 2
46916: PUSH
46917: LD_INT 1
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: PUSH
46924: LD_INT 2
46926: PUSH
46927: LD_INT 2
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: PUSH
46934: LD_INT 1
46936: PUSH
46937: LD_INT 2
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: LD_INT 1
46946: NEG
46947: PUSH
46948: LD_INT 1
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: LD_INT 2
46957: NEG
46958: PUSH
46959: LD_INT 0
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: PUSH
46966: LD_INT 2
46968: NEG
46969: PUSH
46970: LD_INT 1
46972: NEG
46973: PUSH
46974: EMPTY
46975: LIST
46976: LIST
46977: PUSH
46978: LD_INT 2
46980: NEG
46981: PUSH
46982: LD_INT 2
46984: NEG
46985: PUSH
46986: EMPTY
46987: LIST
46988: LIST
46989: PUSH
46990: LD_INT 2
46992: NEG
46993: PUSH
46994: LD_INT 3
46996: NEG
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: LD_INT 2
47004: PUSH
47005: LD_INT 1
47007: NEG
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: PUSH
47013: LD_INT 3
47015: PUSH
47016: LD_INT 0
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: LD_INT 3
47025: PUSH
47026: LD_INT 1
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: LD_INT 3
47035: PUSH
47036: LD_INT 2
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: LD_INT 3
47045: PUSH
47046: LD_INT 3
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: LD_INT 2
47055: PUSH
47056: LD_INT 3
47058: PUSH
47059: EMPTY
47060: LIST
47061: LIST
47062: PUSH
47063: LD_INT 2
47065: NEG
47066: PUSH
47067: LD_INT 1
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: PUSH
47074: LD_INT 3
47076: NEG
47077: PUSH
47078: LD_INT 0
47080: PUSH
47081: EMPTY
47082: LIST
47083: LIST
47084: PUSH
47085: LD_INT 3
47087: NEG
47088: PUSH
47089: LD_INT 1
47091: NEG
47092: PUSH
47093: EMPTY
47094: LIST
47095: LIST
47096: PUSH
47097: LD_INT 3
47099: NEG
47100: PUSH
47101: LD_INT 2
47103: NEG
47104: PUSH
47105: EMPTY
47106: LIST
47107: LIST
47108: PUSH
47109: LD_INT 3
47111: NEG
47112: PUSH
47113: LD_INT 3
47115: NEG
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: LIST
47125: LIST
47126: LIST
47127: LIST
47128: LIST
47129: LIST
47130: LIST
47131: LIST
47132: LIST
47133: LIST
47134: LIST
47135: LIST
47136: LIST
47137: LIST
47138: LIST
47139: LIST
47140: LIST
47141: LIST
47142: LIST
47143: LIST
47144: LIST
47145: LIST
47146: LIST
47147: LIST
47148: LIST
47149: LIST
47150: LIST
47151: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47152: LD_ADDR_VAR 0 42
47156: PUSH
47157: LD_INT 0
47159: PUSH
47160: LD_INT 0
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: PUSH
47167: LD_INT 0
47169: PUSH
47170: LD_INT 1
47172: NEG
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: PUSH
47178: LD_INT 1
47180: PUSH
47181: LD_INT 0
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: LD_INT 1
47190: PUSH
47191: LD_INT 1
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: PUSH
47198: LD_INT 0
47200: PUSH
47201: LD_INT 1
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PUSH
47208: LD_INT 1
47210: NEG
47211: PUSH
47212: LD_INT 0
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PUSH
47219: LD_INT 1
47221: NEG
47222: PUSH
47223: LD_INT 1
47225: NEG
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: LD_INT 1
47233: NEG
47234: PUSH
47235: LD_INT 2
47237: NEG
47238: PUSH
47239: EMPTY
47240: LIST
47241: LIST
47242: PUSH
47243: LD_INT 0
47245: PUSH
47246: LD_INT 2
47248: NEG
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 1
47256: PUSH
47257: LD_INT 1
47259: NEG
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 2
47267: PUSH
47268: LD_INT 1
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: PUSH
47275: LD_INT 2
47277: PUSH
47278: LD_INT 2
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: PUSH
47285: LD_INT 1
47287: PUSH
47288: LD_INT 2
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: PUSH
47295: LD_INT 0
47297: PUSH
47298: LD_INT 2
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: PUSH
47305: LD_INT 1
47307: NEG
47308: PUSH
47309: LD_INT 1
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: PUSH
47316: LD_INT 2
47318: NEG
47319: PUSH
47320: LD_INT 1
47322: NEG
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 2
47330: NEG
47331: PUSH
47332: LD_INT 2
47334: NEG
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: PUSH
47340: LD_INT 2
47342: NEG
47343: PUSH
47344: LD_INT 3
47346: NEG
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: PUSH
47352: LD_INT 1
47354: NEG
47355: PUSH
47356: LD_INT 3
47358: NEG
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: LD_INT 0
47366: PUSH
47367: LD_INT 3
47369: NEG
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: PUSH
47375: LD_INT 1
47377: PUSH
47378: LD_INT 2
47380: NEG
47381: PUSH
47382: EMPTY
47383: LIST
47384: LIST
47385: PUSH
47386: LD_INT 3
47388: PUSH
47389: LD_INT 2
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: PUSH
47396: LD_INT 3
47398: PUSH
47399: LD_INT 3
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: PUSH
47406: LD_INT 2
47408: PUSH
47409: LD_INT 3
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: LD_INT 1
47418: PUSH
47419: LD_INT 3
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PUSH
47426: LD_INT 0
47428: PUSH
47429: LD_INT 3
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: LD_INT 1
47438: NEG
47439: PUSH
47440: LD_INT 2
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: PUSH
47447: LD_INT 3
47449: NEG
47450: PUSH
47451: LD_INT 2
47453: NEG
47454: PUSH
47455: EMPTY
47456: LIST
47457: LIST
47458: PUSH
47459: LD_INT 3
47461: NEG
47462: PUSH
47463: LD_INT 3
47465: NEG
47466: PUSH
47467: EMPTY
47468: LIST
47469: LIST
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: LIST
47490: LIST
47491: LIST
47492: LIST
47493: LIST
47494: LIST
47495: LIST
47496: LIST
47497: LIST
47498: LIST
47499: LIST
47500: LIST
47501: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47502: LD_ADDR_VAR 0 43
47506: PUSH
47507: LD_INT 0
47509: PUSH
47510: LD_INT 0
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: PUSH
47517: LD_INT 0
47519: PUSH
47520: LD_INT 1
47522: NEG
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: LD_INT 1
47530: PUSH
47531: LD_INT 0
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: PUSH
47538: LD_INT 1
47540: PUSH
47541: LD_INT 1
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: PUSH
47548: LD_INT 0
47550: PUSH
47551: LD_INT 1
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PUSH
47558: LD_INT 1
47560: NEG
47561: PUSH
47562: LD_INT 0
47564: PUSH
47565: EMPTY
47566: LIST
47567: LIST
47568: PUSH
47569: LD_INT 1
47571: NEG
47572: PUSH
47573: LD_INT 1
47575: NEG
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 1
47583: NEG
47584: PUSH
47585: LD_INT 2
47587: NEG
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: PUSH
47593: LD_INT 0
47595: PUSH
47596: LD_INT 2
47598: NEG
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: PUSH
47604: LD_INT 1
47606: PUSH
47607: LD_INT 1
47609: NEG
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: LD_INT 2
47617: PUSH
47618: LD_INT 0
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: PUSH
47625: LD_INT 2
47627: PUSH
47628: LD_INT 1
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: LD_INT 1
47637: PUSH
47638: LD_INT 2
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: PUSH
47645: LD_INT 0
47647: PUSH
47648: LD_INT 2
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: PUSH
47655: LD_INT 1
47657: NEG
47658: PUSH
47659: LD_INT 1
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: LD_INT 2
47668: NEG
47669: PUSH
47670: LD_INT 0
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: PUSH
47677: LD_INT 2
47679: NEG
47680: PUSH
47681: LD_INT 1
47683: NEG
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 1
47691: NEG
47692: PUSH
47693: LD_INT 3
47695: NEG
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: PUSH
47701: LD_INT 0
47703: PUSH
47704: LD_INT 3
47706: NEG
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PUSH
47712: LD_INT 1
47714: PUSH
47715: LD_INT 2
47717: NEG
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: PUSH
47723: LD_INT 2
47725: PUSH
47726: LD_INT 1
47728: NEG
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: PUSH
47734: LD_INT 3
47736: PUSH
47737: LD_INT 0
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: LD_INT 3
47746: PUSH
47747: LD_INT 1
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: PUSH
47754: LD_INT 1
47756: PUSH
47757: LD_INT 3
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: PUSH
47764: LD_INT 0
47766: PUSH
47767: LD_INT 3
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: PUSH
47774: LD_INT 1
47776: NEG
47777: PUSH
47778: LD_INT 2
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 2
47787: NEG
47788: PUSH
47789: LD_INT 1
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: PUSH
47796: LD_INT 3
47798: NEG
47799: PUSH
47800: LD_INT 0
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: PUSH
47807: LD_INT 3
47809: NEG
47810: PUSH
47811: LD_INT 1
47813: NEG
47814: PUSH
47815: EMPTY
47816: LIST
47817: LIST
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: LIST
47823: LIST
47824: LIST
47825: LIST
47826: LIST
47827: LIST
47828: LIST
47829: LIST
47830: LIST
47831: LIST
47832: LIST
47833: LIST
47834: LIST
47835: LIST
47836: LIST
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: LIST
47849: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47850: LD_ADDR_VAR 0 44
47854: PUSH
47855: LD_INT 0
47857: PUSH
47858: LD_INT 0
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: PUSH
47865: LD_INT 0
47867: PUSH
47868: LD_INT 1
47870: NEG
47871: PUSH
47872: EMPTY
47873: LIST
47874: LIST
47875: PUSH
47876: LD_INT 1
47878: PUSH
47879: LD_INT 0
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: PUSH
47886: LD_INT 1
47888: PUSH
47889: LD_INT 1
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: LD_INT 0
47898: PUSH
47899: LD_INT 1
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: PUSH
47906: LD_INT 1
47908: NEG
47909: PUSH
47910: LD_INT 0
47912: PUSH
47913: EMPTY
47914: LIST
47915: LIST
47916: PUSH
47917: LD_INT 1
47919: NEG
47920: PUSH
47921: LD_INT 1
47923: NEG
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: LD_INT 1
47931: NEG
47932: PUSH
47933: LD_INT 2
47935: NEG
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: PUSH
47941: LD_INT 1
47943: PUSH
47944: LD_INT 1
47946: NEG
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: LD_INT 2
47954: PUSH
47955: LD_INT 0
47957: PUSH
47958: EMPTY
47959: LIST
47960: LIST
47961: PUSH
47962: LD_INT 2
47964: PUSH
47965: LD_INT 1
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: PUSH
47972: LD_INT 2
47974: PUSH
47975: LD_INT 2
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PUSH
47982: LD_INT 1
47984: PUSH
47985: LD_INT 2
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PUSH
47992: LD_INT 1
47994: NEG
47995: PUSH
47996: LD_INT 1
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: PUSH
48003: LD_INT 2
48005: NEG
48006: PUSH
48007: LD_INT 0
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: PUSH
48014: LD_INT 2
48016: NEG
48017: PUSH
48018: LD_INT 1
48020: NEG
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: PUSH
48026: LD_INT 2
48028: NEG
48029: PUSH
48030: LD_INT 2
48032: NEG
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: PUSH
48038: LD_INT 2
48040: NEG
48041: PUSH
48042: LD_INT 3
48044: NEG
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 2
48052: PUSH
48053: LD_INT 1
48055: NEG
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PUSH
48061: LD_INT 3
48063: PUSH
48064: LD_INT 0
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: PUSH
48071: LD_INT 3
48073: PUSH
48074: LD_INT 1
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: PUSH
48081: LD_INT 3
48083: PUSH
48084: LD_INT 2
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: PUSH
48091: LD_INT 3
48093: PUSH
48094: LD_INT 3
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: LD_INT 2
48103: PUSH
48104: LD_INT 3
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: PUSH
48111: LD_INT 2
48113: NEG
48114: PUSH
48115: LD_INT 1
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_INT 3
48124: NEG
48125: PUSH
48126: LD_INT 0
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 3
48135: NEG
48136: PUSH
48137: LD_INT 1
48139: NEG
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: PUSH
48145: LD_INT 3
48147: NEG
48148: PUSH
48149: LD_INT 2
48151: NEG
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: LD_INT 3
48159: NEG
48160: PUSH
48161: LD_INT 3
48163: NEG
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: LIST
48173: LIST
48174: LIST
48175: LIST
48176: LIST
48177: LIST
48178: LIST
48179: LIST
48180: LIST
48181: LIST
48182: LIST
48183: LIST
48184: LIST
48185: LIST
48186: LIST
48187: LIST
48188: LIST
48189: LIST
48190: LIST
48191: LIST
48192: LIST
48193: LIST
48194: LIST
48195: LIST
48196: LIST
48197: LIST
48198: LIST
48199: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48200: LD_ADDR_VAR 0 45
48204: PUSH
48205: LD_INT 0
48207: PUSH
48208: LD_INT 0
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: LD_INT 0
48217: PUSH
48218: LD_INT 1
48220: NEG
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: PUSH
48226: LD_INT 1
48228: PUSH
48229: LD_INT 0
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: PUSH
48236: LD_INT 1
48238: PUSH
48239: LD_INT 1
48241: PUSH
48242: EMPTY
48243: LIST
48244: LIST
48245: PUSH
48246: LD_INT 0
48248: PUSH
48249: LD_INT 1
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PUSH
48256: LD_INT 1
48258: NEG
48259: PUSH
48260: LD_INT 0
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: PUSH
48267: LD_INT 1
48269: NEG
48270: PUSH
48271: LD_INT 1
48273: NEG
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: LD_INT 1
48281: NEG
48282: PUSH
48283: LD_INT 2
48285: NEG
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 0
48293: PUSH
48294: LD_INT 2
48296: NEG
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: PUSH
48302: LD_INT 1
48304: PUSH
48305: LD_INT 1
48307: NEG
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PUSH
48313: LD_INT 2
48315: PUSH
48316: LD_INT 1
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 2
48325: PUSH
48326: LD_INT 2
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PUSH
48333: LD_INT 1
48335: PUSH
48336: LD_INT 2
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: LD_INT 0
48345: PUSH
48346: LD_INT 2
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PUSH
48353: LD_INT 1
48355: NEG
48356: PUSH
48357: LD_INT 1
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: PUSH
48364: LD_INT 2
48366: NEG
48367: PUSH
48368: LD_INT 1
48370: NEG
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: PUSH
48376: LD_INT 2
48378: NEG
48379: PUSH
48380: LD_INT 2
48382: NEG
48383: PUSH
48384: EMPTY
48385: LIST
48386: LIST
48387: PUSH
48388: LD_INT 2
48390: NEG
48391: PUSH
48392: LD_INT 3
48394: NEG
48395: PUSH
48396: EMPTY
48397: LIST
48398: LIST
48399: PUSH
48400: LD_INT 1
48402: NEG
48403: PUSH
48404: LD_INT 3
48406: NEG
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: PUSH
48412: LD_INT 0
48414: PUSH
48415: LD_INT 3
48417: NEG
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: PUSH
48423: LD_INT 1
48425: PUSH
48426: LD_INT 2
48428: NEG
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: PUSH
48434: LD_INT 3
48436: PUSH
48437: LD_INT 2
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: LD_INT 3
48446: PUSH
48447: LD_INT 3
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: LD_INT 2
48456: PUSH
48457: LD_INT 3
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: LD_INT 1
48466: PUSH
48467: LD_INT 3
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: LD_INT 0
48476: PUSH
48477: LD_INT 3
48479: PUSH
48480: EMPTY
48481: LIST
48482: LIST
48483: PUSH
48484: LD_INT 1
48486: NEG
48487: PUSH
48488: LD_INT 2
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: PUSH
48495: LD_INT 3
48497: NEG
48498: PUSH
48499: LD_INT 2
48501: NEG
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 3
48509: NEG
48510: PUSH
48511: LD_INT 3
48513: NEG
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: LIST
48523: LIST
48524: LIST
48525: LIST
48526: LIST
48527: LIST
48528: LIST
48529: LIST
48530: LIST
48531: LIST
48532: LIST
48533: LIST
48534: LIST
48535: LIST
48536: LIST
48537: LIST
48538: LIST
48539: LIST
48540: LIST
48541: LIST
48542: LIST
48543: LIST
48544: LIST
48545: LIST
48546: LIST
48547: LIST
48548: LIST
48549: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48550: LD_ADDR_VAR 0 46
48554: PUSH
48555: LD_INT 0
48557: PUSH
48558: LD_INT 0
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: LD_INT 0
48567: PUSH
48568: LD_INT 1
48570: NEG
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: PUSH
48576: LD_INT 1
48578: PUSH
48579: LD_INT 0
48581: PUSH
48582: EMPTY
48583: LIST
48584: LIST
48585: PUSH
48586: LD_INT 1
48588: PUSH
48589: LD_INT 1
48591: PUSH
48592: EMPTY
48593: LIST
48594: LIST
48595: PUSH
48596: LD_INT 0
48598: PUSH
48599: LD_INT 1
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: PUSH
48606: LD_INT 1
48608: NEG
48609: PUSH
48610: LD_INT 0
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: PUSH
48617: LD_INT 1
48619: NEG
48620: PUSH
48621: LD_INT 1
48623: NEG
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: LD_INT 1
48631: NEG
48632: PUSH
48633: LD_INT 2
48635: NEG
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: PUSH
48641: LD_INT 0
48643: PUSH
48644: LD_INT 2
48646: NEG
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: PUSH
48652: LD_INT 1
48654: PUSH
48655: LD_INT 1
48657: NEG
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: PUSH
48663: LD_INT 2
48665: PUSH
48666: LD_INT 0
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: PUSH
48673: LD_INT 2
48675: PUSH
48676: LD_INT 1
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: PUSH
48683: LD_INT 1
48685: PUSH
48686: LD_INT 2
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: LD_INT 0
48695: PUSH
48696: LD_INT 2
48698: PUSH
48699: EMPTY
48700: LIST
48701: LIST
48702: PUSH
48703: LD_INT 1
48705: NEG
48706: PUSH
48707: LD_INT 1
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: PUSH
48714: LD_INT 2
48716: NEG
48717: PUSH
48718: LD_INT 0
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: PUSH
48725: LD_INT 2
48727: NEG
48728: PUSH
48729: LD_INT 1
48731: NEG
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PUSH
48737: LD_INT 1
48739: NEG
48740: PUSH
48741: LD_INT 3
48743: NEG
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: LD_INT 0
48751: PUSH
48752: LD_INT 3
48754: NEG
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: PUSH
48760: LD_INT 1
48762: PUSH
48763: LD_INT 2
48765: NEG
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: LD_INT 2
48773: PUSH
48774: LD_INT 1
48776: NEG
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: LD_INT 3
48784: PUSH
48785: LD_INT 0
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: PUSH
48792: LD_INT 3
48794: PUSH
48795: LD_INT 1
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: PUSH
48802: LD_INT 1
48804: PUSH
48805: LD_INT 3
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PUSH
48812: LD_INT 0
48814: PUSH
48815: LD_INT 3
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: LD_INT 1
48824: NEG
48825: PUSH
48826: LD_INT 2
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: LD_INT 2
48835: NEG
48836: PUSH
48837: LD_INT 1
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: PUSH
48844: LD_INT 3
48846: NEG
48847: PUSH
48848: LD_INT 0
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 3
48857: NEG
48858: PUSH
48859: LD_INT 1
48861: NEG
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: LIST
48871: LIST
48872: LIST
48873: LIST
48874: LIST
48875: LIST
48876: LIST
48877: LIST
48878: LIST
48879: LIST
48880: LIST
48881: LIST
48882: LIST
48883: LIST
48884: LIST
48885: LIST
48886: LIST
48887: LIST
48888: LIST
48889: LIST
48890: LIST
48891: LIST
48892: LIST
48893: LIST
48894: LIST
48895: LIST
48896: LIST
48897: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48898: LD_ADDR_VAR 0 47
48902: PUSH
48903: LD_INT 0
48905: PUSH
48906: LD_INT 0
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PUSH
48913: LD_INT 0
48915: PUSH
48916: LD_INT 1
48918: NEG
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: PUSH
48924: LD_INT 1
48926: PUSH
48927: LD_INT 0
48929: PUSH
48930: EMPTY
48931: LIST
48932: LIST
48933: PUSH
48934: LD_INT 1
48936: PUSH
48937: LD_INT 1
48939: PUSH
48940: EMPTY
48941: LIST
48942: LIST
48943: PUSH
48944: LD_INT 0
48946: PUSH
48947: LD_INT 1
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: PUSH
48954: LD_INT 1
48956: NEG
48957: PUSH
48958: LD_INT 0
48960: PUSH
48961: EMPTY
48962: LIST
48963: LIST
48964: PUSH
48965: LD_INT 1
48967: NEG
48968: PUSH
48969: LD_INT 1
48971: NEG
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: LD_INT 1
48979: NEG
48980: PUSH
48981: LD_INT 2
48983: NEG
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: PUSH
48989: LD_INT 0
48991: PUSH
48992: LD_INT 2
48994: NEG
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 1
49002: PUSH
49003: LD_INT 1
49005: NEG
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: LD_INT 2
49013: NEG
49014: PUSH
49015: LD_INT 1
49017: NEG
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: LD_INT 2
49025: NEG
49026: PUSH
49027: LD_INT 2
49029: NEG
49030: PUSH
49031: EMPTY
49032: LIST
49033: LIST
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: LIST
49039: LIST
49040: LIST
49041: LIST
49042: LIST
49043: LIST
49044: LIST
49045: LIST
49046: LIST
49047: LIST
49048: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49049: LD_ADDR_VAR 0 48
49053: PUSH
49054: LD_INT 0
49056: PUSH
49057: LD_INT 0
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: PUSH
49064: LD_INT 0
49066: PUSH
49067: LD_INT 1
49069: NEG
49070: PUSH
49071: EMPTY
49072: LIST
49073: LIST
49074: PUSH
49075: LD_INT 1
49077: PUSH
49078: LD_INT 0
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: PUSH
49085: LD_INT 1
49087: PUSH
49088: LD_INT 1
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: PUSH
49095: LD_INT 0
49097: PUSH
49098: LD_INT 1
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: PUSH
49105: LD_INT 1
49107: NEG
49108: PUSH
49109: LD_INT 0
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: PUSH
49116: LD_INT 1
49118: NEG
49119: PUSH
49120: LD_INT 1
49122: NEG
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: PUSH
49128: LD_INT 1
49130: NEG
49131: PUSH
49132: LD_INT 2
49134: NEG
49135: PUSH
49136: EMPTY
49137: LIST
49138: LIST
49139: PUSH
49140: LD_INT 0
49142: PUSH
49143: LD_INT 2
49145: NEG
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PUSH
49151: LD_INT 1
49153: PUSH
49154: LD_INT 1
49156: NEG
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: LD_INT 2
49164: PUSH
49165: LD_INT 0
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: LD_INT 2
49174: PUSH
49175: LD_INT 1
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: LIST
49186: LIST
49187: LIST
49188: LIST
49189: LIST
49190: LIST
49191: LIST
49192: LIST
49193: LIST
49194: LIST
49195: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49196: LD_ADDR_VAR 0 49
49200: PUSH
49201: LD_INT 0
49203: PUSH
49204: LD_INT 0
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: PUSH
49211: LD_INT 0
49213: PUSH
49214: LD_INT 1
49216: NEG
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: PUSH
49222: LD_INT 1
49224: PUSH
49225: LD_INT 0
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 1
49234: PUSH
49235: LD_INT 1
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: PUSH
49242: LD_INT 0
49244: PUSH
49245: LD_INT 1
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 1
49254: NEG
49255: PUSH
49256: LD_INT 0
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PUSH
49263: LD_INT 1
49265: NEG
49266: PUSH
49267: LD_INT 1
49269: NEG
49270: PUSH
49271: EMPTY
49272: LIST
49273: LIST
49274: PUSH
49275: LD_INT 1
49277: PUSH
49278: LD_INT 1
49280: NEG
49281: PUSH
49282: EMPTY
49283: LIST
49284: LIST
49285: PUSH
49286: LD_INT 2
49288: PUSH
49289: LD_INT 0
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: PUSH
49296: LD_INT 2
49298: PUSH
49299: LD_INT 1
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: LD_INT 2
49308: PUSH
49309: LD_INT 2
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 1
49318: PUSH
49319: LD_INT 2
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: LIST
49330: LIST
49331: LIST
49332: LIST
49333: LIST
49334: LIST
49335: LIST
49336: LIST
49337: LIST
49338: LIST
49339: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49340: LD_ADDR_VAR 0 50
49344: PUSH
49345: LD_INT 0
49347: PUSH
49348: LD_INT 0
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: PUSH
49355: LD_INT 0
49357: PUSH
49358: LD_INT 1
49360: NEG
49361: PUSH
49362: EMPTY
49363: LIST
49364: LIST
49365: PUSH
49366: LD_INT 1
49368: PUSH
49369: LD_INT 0
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: PUSH
49376: LD_INT 1
49378: PUSH
49379: LD_INT 1
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 0
49388: PUSH
49389: LD_INT 1
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: LD_INT 1
49398: NEG
49399: PUSH
49400: LD_INT 0
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: LD_INT 1
49409: NEG
49410: PUSH
49411: LD_INT 1
49413: NEG
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: PUSH
49419: LD_INT 2
49421: PUSH
49422: LD_INT 1
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: LD_INT 2
49431: PUSH
49432: LD_INT 2
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: LD_INT 1
49441: PUSH
49442: LD_INT 2
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: PUSH
49449: LD_INT 0
49451: PUSH
49452: LD_INT 2
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: PUSH
49459: LD_INT 1
49461: NEG
49462: PUSH
49463: LD_INT 1
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: LIST
49474: LIST
49475: LIST
49476: LIST
49477: LIST
49478: LIST
49479: LIST
49480: LIST
49481: LIST
49482: LIST
49483: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49484: LD_ADDR_VAR 0 51
49488: PUSH
49489: LD_INT 0
49491: PUSH
49492: LD_INT 0
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PUSH
49499: LD_INT 0
49501: PUSH
49502: LD_INT 1
49504: NEG
49505: PUSH
49506: EMPTY
49507: LIST
49508: LIST
49509: PUSH
49510: LD_INT 1
49512: PUSH
49513: LD_INT 0
49515: PUSH
49516: EMPTY
49517: LIST
49518: LIST
49519: PUSH
49520: LD_INT 1
49522: PUSH
49523: LD_INT 1
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: PUSH
49530: LD_INT 0
49532: PUSH
49533: LD_INT 1
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: PUSH
49540: LD_INT 1
49542: NEG
49543: PUSH
49544: LD_INT 0
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: LD_INT 1
49553: NEG
49554: PUSH
49555: LD_INT 1
49557: NEG
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: PUSH
49563: LD_INT 1
49565: PUSH
49566: LD_INT 2
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: PUSH
49573: LD_INT 0
49575: PUSH
49576: LD_INT 2
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 1
49585: NEG
49586: PUSH
49587: LD_INT 1
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: LD_INT 2
49596: NEG
49597: PUSH
49598: LD_INT 0
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: PUSH
49605: LD_INT 2
49607: NEG
49608: PUSH
49609: LD_INT 1
49611: NEG
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: LIST
49621: LIST
49622: LIST
49623: LIST
49624: LIST
49625: LIST
49626: LIST
49627: LIST
49628: LIST
49629: LIST
49630: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49631: LD_ADDR_VAR 0 52
49635: PUSH
49636: LD_INT 0
49638: PUSH
49639: LD_INT 0
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: PUSH
49646: LD_INT 0
49648: PUSH
49649: LD_INT 1
49651: NEG
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: PUSH
49657: LD_INT 1
49659: PUSH
49660: LD_INT 0
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: PUSH
49667: LD_INT 1
49669: PUSH
49670: LD_INT 1
49672: PUSH
49673: EMPTY
49674: LIST
49675: LIST
49676: PUSH
49677: LD_INT 0
49679: PUSH
49680: LD_INT 1
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 1
49689: NEG
49690: PUSH
49691: LD_INT 0
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 1
49700: NEG
49701: PUSH
49702: LD_INT 1
49704: NEG
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: LD_INT 1
49712: NEG
49713: PUSH
49714: LD_INT 2
49716: NEG
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: LD_INT 1
49724: NEG
49725: PUSH
49726: LD_INT 1
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: PUSH
49733: LD_INT 2
49735: NEG
49736: PUSH
49737: LD_INT 0
49739: PUSH
49740: EMPTY
49741: LIST
49742: LIST
49743: PUSH
49744: LD_INT 2
49746: NEG
49747: PUSH
49748: LD_INT 1
49750: NEG
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: LD_INT 2
49758: NEG
49759: PUSH
49760: LD_INT 2
49762: NEG
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: LIST
49772: LIST
49773: LIST
49774: LIST
49775: LIST
49776: LIST
49777: LIST
49778: LIST
49779: LIST
49780: LIST
49781: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49782: LD_ADDR_VAR 0 53
49786: PUSH
49787: LD_INT 0
49789: PUSH
49790: LD_INT 0
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: LD_INT 0
49799: PUSH
49800: LD_INT 1
49802: NEG
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: LD_INT 1
49810: PUSH
49811: LD_INT 0
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 1
49820: PUSH
49821: LD_INT 1
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: LD_INT 0
49830: PUSH
49831: LD_INT 1
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: PUSH
49838: LD_INT 1
49840: NEG
49841: PUSH
49842: LD_INT 0
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: LD_INT 1
49851: NEG
49852: PUSH
49853: LD_INT 1
49855: NEG
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: PUSH
49861: LD_INT 1
49863: NEG
49864: PUSH
49865: LD_INT 2
49867: NEG
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PUSH
49873: LD_INT 0
49875: PUSH
49876: LD_INT 2
49878: NEG
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: PUSH
49884: LD_INT 1
49886: PUSH
49887: LD_INT 1
49889: NEG
49890: PUSH
49891: EMPTY
49892: LIST
49893: LIST
49894: PUSH
49895: LD_INT 2
49897: PUSH
49898: LD_INT 0
49900: PUSH
49901: EMPTY
49902: LIST
49903: LIST
49904: PUSH
49905: LD_INT 2
49907: PUSH
49908: LD_INT 1
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: PUSH
49915: LD_INT 2
49917: PUSH
49918: LD_INT 2
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: LD_INT 1
49927: PUSH
49928: LD_INT 2
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: PUSH
49935: LD_INT 0
49937: PUSH
49938: LD_INT 2
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: PUSH
49945: LD_INT 1
49947: NEG
49948: PUSH
49949: LD_INT 1
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: PUSH
49956: LD_INT 2
49958: NEG
49959: PUSH
49960: LD_INT 0
49962: PUSH
49963: EMPTY
49964: LIST
49965: LIST
49966: PUSH
49967: LD_INT 2
49969: NEG
49970: PUSH
49971: LD_INT 1
49973: NEG
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 2
49981: NEG
49982: PUSH
49983: LD_INT 2
49985: NEG
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: LIST
50003: LIST
50004: LIST
50005: LIST
50006: LIST
50007: LIST
50008: LIST
50009: LIST
50010: LIST
50011: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50012: LD_ADDR_VAR 0 54
50016: PUSH
50017: LD_INT 0
50019: PUSH
50020: LD_INT 0
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: PUSH
50027: LD_INT 0
50029: PUSH
50030: LD_INT 1
50032: NEG
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: PUSH
50038: LD_INT 1
50040: PUSH
50041: LD_INT 0
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: PUSH
50048: LD_INT 1
50050: PUSH
50051: LD_INT 1
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: LD_INT 0
50060: PUSH
50061: LD_INT 1
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: PUSH
50068: LD_INT 1
50070: NEG
50071: PUSH
50072: LD_INT 0
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: PUSH
50079: LD_INT 1
50081: NEG
50082: PUSH
50083: LD_INT 1
50085: NEG
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: PUSH
50091: LD_INT 1
50093: NEG
50094: PUSH
50095: LD_INT 2
50097: NEG
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: PUSH
50103: LD_INT 0
50105: PUSH
50106: LD_INT 2
50108: NEG
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PUSH
50114: LD_INT 1
50116: PUSH
50117: LD_INT 1
50119: NEG
50120: PUSH
50121: EMPTY
50122: LIST
50123: LIST
50124: PUSH
50125: LD_INT 2
50127: PUSH
50128: LD_INT 0
50130: PUSH
50131: EMPTY
50132: LIST
50133: LIST
50134: PUSH
50135: LD_INT 2
50137: PUSH
50138: LD_INT 1
50140: PUSH
50141: EMPTY
50142: LIST
50143: LIST
50144: PUSH
50145: LD_INT 2
50147: PUSH
50148: LD_INT 2
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: PUSH
50155: LD_INT 1
50157: PUSH
50158: LD_INT 2
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 0
50167: PUSH
50168: LD_INT 2
50170: PUSH
50171: EMPTY
50172: LIST
50173: LIST
50174: PUSH
50175: LD_INT 1
50177: NEG
50178: PUSH
50179: LD_INT 1
50181: PUSH
50182: EMPTY
50183: LIST
50184: LIST
50185: PUSH
50186: LD_INT 2
50188: NEG
50189: PUSH
50190: LD_INT 0
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PUSH
50197: LD_INT 2
50199: NEG
50200: PUSH
50201: LD_INT 1
50203: NEG
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: PUSH
50209: LD_INT 2
50211: NEG
50212: PUSH
50213: LD_INT 2
50215: NEG
50216: PUSH
50217: EMPTY
50218: LIST
50219: LIST
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: LIST
50234: LIST
50235: LIST
50236: LIST
50237: LIST
50238: LIST
50239: LIST
50240: LIST
50241: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50242: LD_ADDR_VAR 0 55
50246: PUSH
50247: LD_INT 0
50249: PUSH
50250: LD_INT 0
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 0
50259: PUSH
50260: LD_INT 1
50262: NEG
50263: PUSH
50264: EMPTY
50265: LIST
50266: LIST
50267: PUSH
50268: LD_INT 1
50270: PUSH
50271: LD_INT 0
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: PUSH
50278: LD_INT 1
50280: PUSH
50281: LD_INT 1
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: PUSH
50288: LD_INT 0
50290: PUSH
50291: LD_INT 1
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PUSH
50298: LD_INT 1
50300: NEG
50301: PUSH
50302: LD_INT 0
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: PUSH
50309: LD_INT 1
50311: NEG
50312: PUSH
50313: LD_INT 1
50315: NEG
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: LD_INT 1
50323: NEG
50324: PUSH
50325: LD_INT 2
50327: NEG
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: PUSH
50333: LD_INT 0
50335: PUSH
50336: LD_INT 2
50338: NEG
50339: PUSH
50340: EMPTY
50341: LIST
50342: LIST
50343: PUSH
50344: LD_INT 1
50346: PUSH
50347: LD_INT 1
50349: NEG
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: PUSH
50355: LD_INT 2
50357: PUSH
50358: LD_INT 0
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 2
50367: PUSH
50368: LD_INT 1
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: PUSH
50375: LD_INT 2
50377: PUSH
50378: LD_INT 2
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: PUSH
50385: LD_INT 1
50387: PUSH
50388: LD_INT 2
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: LD_INT 0
50397: PUSH
50398: LD_INT 2
50400: PUSH
50401: EMPTY
50402: LIST
50403: LIST
50404: PUSH
50405: LD_INT 1
50407: NEG
50408: PUSH
50409: LD_INT 1
50411: PUSH
50412: EMPTY
50413: LIST
50414: LIST
50415: PUSH
50416: LD_INT 2
50418: NEG
50419: PUSH
50420: LD_INT 0
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: LD_INT 2
50429: NEG
50430: PUSH
50431: LD_INT 1
50433: NEG
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 2
50441: NEG
50442: PUSH
50443: LD_INT 2
50445: NEG
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: LIST
50455: LIST
50456: LIST
50457: LIST
50458: LIST
50459: LIST
50460: LIST
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50472: LD_ADDR_VAR 0 56
50476: PUSH
50477: LD_INT 0
50479: PUSH
50480: LD_INT 0
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: PUSH
50487: LD_INT 0
50489: PUSH
50490: LD_INT 1
50492: NEG
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: PUSH
50498: LD_INT 1
50500: PUSH
50501: LD_INT 0
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: PUSH
50508: LD_INT 1
50510: PUSH
50511: LD_INT 1
50513: PUSH
50514: EMPTY
50515: LIST
50516: LIST
50517: PUSH
50518: LD_INT 0
50520: PUSH
50521: LD_INT 1
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: PUSH
50528: LD_INT 1
50530: NEG
50531: PUSH
50532: LD_INT 0
50534: PUSH
50535: EMPTY
50536: LIST
50537: LIST
50538: PUSH
50539: LD_INT 1
50541: NEG
50542: PUSH
50543: LD_INT 1
50545: NEG
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: LD_INT 1
50553: NEG
50554: PUSH
50555: LD_INT 2
50557: NEG
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: PUSH
50563: LD_INT 0
50565: PUSH
50566: LD_INT 2
50568: NEG
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: PUSH
50574: LD_INT 1
50576: PUSH
50577: LD_INT 1
50579: NEG
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: PUSH
50585: LD_INT 2
50587: PUSH
50588: LD_INT 0
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 2
50597: PUSH
50598: LD_INT 1
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: LD_INT 2
50607: PUSH
50608: LD_INT 2
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PUSH
50615: LD_INT 1
50617: PUSH
50618: LD_INT 2
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PUSH
50625: LD_INT 0
50627: PUSH
50628: LD_INT 2
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: PUSH
50635: LD_INT 1
50637: NEG
50638: PUSH
50639: LD_INT 1
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: PUSH
50646: LD_INT 2
50648: NEG
50649: PUSH
50650: LD_INT 0
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: PUSH
50657: LD_INT 2
50659: NEG
50660: PUSH
50661: LD_INT 1
50663: NEG
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PUSH
50669: LD_INT 2
50671: NEG
50672: PUSH
50673: LD_INT 2
50675: NEG
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: LIST
50685: LIST
50686: LIST
50687: LIST
50688: LIST
50689: LIST
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50702: LD_ADDR_VAR 0 57
50706: PUSH
50707: LD_INT 0
50709: PUSH
50710: LD_INT 0
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: LD_INT 0
50719: PUSH
50720: LD_INT 1
50722: NEG
50723: PUSH
50724: EMPTY
50725: LIST
50726: LIST
50727: PUSH
50728: LD_INT 1
50730: PUSH
50731: LD_INT 0
50733: PUSH
50734: EMPTY
50735: LIST
50736: LIST
50737: PUSH
50738: LD_INT 1
50740: PUSH
50741: LD_INT 1
50743: PUSH
50744: EMPTY
50745: LIST
50746: LIST
50747: PUSH
50748: LD_INT 0
50750: PUSH
50751: LD_INT 1
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: PUSH
50758: LD_INT 1
50760: NEG
50761: PUSH
50762: LD_INT 0
50764: PUSH
50765: EMPTY
50766: LIST
50767: LIST
50768: PUSH
50769: LD_INT 1
50771: NEG
50772: PUSH
50773: LD_INT 1
50775: NEG
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: LD_INT 1
50783: NEG
50784: PUSH
50785: LD_INT 2
50787: NEG
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: PUSH
50793: LD_INT 0
50795: PUSH
50796: LD_INT 2
50798: NEG
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: PUSH
50804: LD_INT 1
50806: PUSH
50807: LD_INT 1
50809: NEG
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: LD_INT 2
50817: PUSH
50818: LD_INT 0
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 2
50827: PUSH
50828: LD_INT 1
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: PUSH
50835: LD_INT 2
50837: PUSH
50838: LD_INT 2
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: LD_INT 1
50847: PUSH
50848: LD_INT 2
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 0
50857: PUSH
50858: LD_INT 2
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: PUSH
50865: LD_INT 1
50867: NEG
50868: PUSH
50869: LD_INT 1
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: LD_INT 2
50878: NEG
50879: PUSH
50880: LD_INT 0
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: PUSH
50887: LD_INT 2
50889: NEG
50890: PUSH
50891: LD_INT 1
50893: NEG
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: PUSH
50899: LD_INT 2
50901: NEG
50902: PUSH
50903: LD_INT 2
50905: NEG
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: LIST
50915: LIST
50916: LIST
50917: LIST
50918: LIST
50919: LIST
50920: LIST
50921: LIST
50922: LIST
50923: LIST
50924: LIST
50925: LIST
50926: LIST
50927: LIST
50928: LIST
50929: LIST
50930: LIST
50931: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50932: LD_ADDR_VAR 0 58
50936: PUSH
50937: LD_INT 0
50939: PUSH
50940: LD_INT 0
50942: PUSH
50943: EMPTY
50944: LIST
50945: LIST
50946: PUSH
50947: LD_INT 0
50949: PUSH
50950: LD_INT 1
50952: NEG
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: PUSH
50958: LD_INT 1
50960: PUSH
50961: LD_INT 0
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: PUSH
50968: LD_INT 1
50970: PUSH
50971: LD_INT 1
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: PUSH
50978: LD_INT 0
50980: PUSH
50981: LD_INT 1
50983: PUSH
50984: EMPTY
50985: LIST
50986: LIST
50987: PUSH
50988: LD_INT 1
50990: NEG
50991: PUSH
50992: LD_INT 0
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: PUSH
50999: LD_INT 1
51001: NEG
51002: PUSH
51003: LD_INT 1
51005: NEG
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: PUSH
51011: LD_INT 1
51013: NEG
51014: PUSH
51015: LD_INT 2
51017: NEG
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: PUSH
51023: LD_INT 0
51025: PUSH
51026: LD_INT 2
51028: NEG
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: PUSH
51034: LD_INT 1
51036: PUSH
51037: LD_INT 1
51039: NEG
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: LD_INT 2
51047: PUSH
51048: LD_INT 0
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: PUSH
51055: LD_INT 2
51057: PUSH
51058: LD_INT 1
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: PUSH
51065: LD_INT 2
51067: PUSH
51068: LD_INT 2
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: PUSH
51075: LD_INT 1
51077: PUSH
51078: LD_INT 2
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: LD_INT 0
51087: PUSH
51088: LD_INT 2
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: LD_INT 1
51097: NEG
51098: PUSH
51099: LD_INT 1
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: LD_INT 2
51108: NEG
51109: PUSH
51110: LD_INT 0
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: LD_INT 2
51119: NEG
51120: PUSH
51121: LD_INT 1
51123: NEG
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: LD_INT 2
51131: NEG
51132: PUSH
51133: LD_INT 2
51135: NEG
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: LIST
51145: LIST
51146: LIST
51147: LIST
51148: LIST
51149: LIST
51150: LIST
51151: LIST
51152: LIST
51153: LIST
51154: LIST
51155: LIST
51156: LIST
51157: LIST
51158: LIST
51159: LIST
51160: LIST
51161: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51162: LD_ADDR_VAR 0 59
51166: PUSH
51167: LD_INT 0
51169: PUSH
51170: LD_INT 0
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: PUSH
51177: LD_INT 0
51179: PUSH
51180: LD_INT 1
51182: NEG
51183: PUSH
51184: EMPTY
51185: LIST
51186: LIST
51187: PUSH
51188: LD_INT 1
51190: PUSH
51191: LD_INT 0
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: LD_INT 1
51200: PUSH
51201: LD_INT 1
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: LD_INT 0
51210: PUSH
51211: LD_INT 1
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: PUSH
51218: LD_INT 1
51220: NEG
51221: PUSH
51222: LD_INT 0
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: LD_INT 1
51231: NEG
51232: PUSH
51233: LD_INT 1
51235: NEG
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: PUSH
51241: EMPTY
51242: LIST
51243: LIST
51244: LIST
51245: LIST
51246: LIST
51247: LIST
51248: LIST
51249: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51250: LD_ADDR_VAR 0 60
51254: PUSH
51255: LD_INT 0
51257: PUSH
51258: LD_INT 0
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: PUSH
51265: LD_INT 0
51267: PUSH
51268: LD_INT 1
51270: NEG
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: PUSH
51276: LD_INT 1
51278: PUSH
51279: LD_INT 0
51281: PUSH
51282: EMPTY
51283: LIST
51284: LIST
51285: PUSH
51286: LD_INT 1
51288: PUSH
51289: LD_INT 1
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: PUSH
51296: LD_INT 0
51298: PUSH
51299: LD_INT 1
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: PUSH
51306: LD_INT 1
51308: NEG
51309: PUSH
51310: LD_INT 0
51312: PUSH
51313: EMPTY
51314: LIST
51315: LIST
51316: PUSH
51317: LD_INT 1
51319: NEG
51320: PUSH
51321: LD_INT 1
51323: NEG
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: LIST
51333: LIST
51334: LIST
51335: LIST
51336: LIST
51337: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51338: LD_ADDR_VAR 0 61
51342: PUSH
51343: LD_INT 0
51345: PUSH
51346: LD_INT 0
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: PUSH
51353: LD_INT 0
51355: PUSH
51356: LD_INT 1
51358: NEG
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: PUSH
51364: LD_INT 1
51366: PUSH
51367: LD_INT 0
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: PUSH
51374: LD_INT 1
51376: PUSH
51377: LD_INT 1
51379: PUSH
51380: EMPTY
51381: LIST
51382: LIST
51383: PUSH
51384: LD_INT 0
51386: PUSH
51387: LD_INT 1
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: PUSH
51394: LD_INT 1
51396: NEG
51397: PUSH
51398: LD_INT 0
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: PUSH
51405: LD_INT 1
51407: NEG
51408: PUSH
51409: LD_INT 1
51411: NEG
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: LIST
51421: LIST
51422: LIST
51423: LIST
51424: LIST
51425: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51426: LD_ADDR_VAR 0 62
51430: PUSH
51431: LD_INT 0
51433: PUSH
51434: LD_INT 0
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 0
51443: PUSH
51444: LD_INT 1
51446: NEG
51447: PUSH
51448: EMPTY
51449: LIST
51450: LIST
51451: PUSH
51452: LD_INT 1
51454: PUSH
51455: LD_INT 0
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 1
51464: PUSH
51465: LD_INT 1
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PUSH
51472: LD_INT 0
51474: PUSH
51475: LD_INT 1
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: LD_INT 1
51484: NEG
51485: PUSH
51486: LD_INT 0
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 1
51495: NEG
51496: PUSH
51497: LD_INT 1
51499: NEG
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51514: LD_ADDR_VAR 0 63
51518: PUSH
51519: LD_INT 0
51521: PUSH
51522: LD_INT 0
51524: PUSH
51525: EMPTY
51526: LIST
51527: LIST
51528: PUSH
51529: LD_INT 0
51531: PUSH
51532: LD_INT 1
51534: NEG
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: PUSH
51540: LD_INT 1
51542: PUSH
51543: LD_INT 0
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: PUSH
51550: LD_INT 1
51552: PUSH
51553: LD_INT 1
51555: PUSH
51556: EMPTY
51557: LIST
51558: LIST
51559: PUSH
51560: LD_INT 0
51562: PUSH
51563: LD_INT 1
51565: PUSH
51566: EMPTY
51567: LIST
51568: LIST
51569: PUSH
51570: LD_INT 1
51572: NEG
51573: PUSH
51574: LD_INT 0
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: PUSH
51581: LD_INT 1
51583: NEG
51584: PUSH
51585: LD_INT 1
51587: NEG
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: LIST
51597: LIST
51598: LIST
51599: LIST
51600: LIST
51601: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51602: LD_ADDR_VAR 0 64
51606: PUSH
51607: LD_INT 0
51609: PUSH
51610: LD_INT 0
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 0
51619: PUSH
51620: LD_INT 1
51622: NEG
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: PUSH
51628: LD_INT 1
51630: PUSH
51631: LD_INT 0
51633: PUSH
51634: EMPTY
51635: LIST
51636: LIST
51637: PUSH
51638: LD_INT 1
51640: PUSH
51641: LD_INT 1
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 0
51650: PUSH
51651: LD_INT 1
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: PUSH
51658: LD_INT 1
51660: NEG
51661: PUSH
51662: LD_INT 0
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PUSH
51669: LD_INT 1
51671: NEG
51672: PUSH
51673: LD_INT 1
51675: NEG
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: LIST
51685: LIST
51686: LIST
51687: LIST
51688: LIST
51689: ST_TO_ADDR
// end ; 1 :
51690: GO 57587
51692: LD_INT 1
51694: DOUBLE
51695: EQUAL
51696: IFTRUE 51700
51698: GO 54323
51700: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51701: LD_ADDR_VAR 0 11
51705: PUSH
51706: LD_INT 1
51708: NEG
51709: PUSH
51710: LD_INT 3
51712: NEG
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: PUSH
51718: LD_INT 0
51720: PUSH
51721: LD_INT 3
51723: NEG
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 1
51731: PUSH
51732: LD_INT 2
51734: NEG
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: LIST
51744: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51745: LD_ADDR_VAR 0 12
51749: PUSH
51750: LD_INT 2
51752: PUSH
51753: LD_INT 1
51755: NEG
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: LD_INT 3
51763: PUSH
51764: LD_INT 0
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 3
51773: PUSH
51774: LD_INT 1
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: EMPTY
51782: LIST
51783: LIST
51784: LIST
51785: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51786: LD_ADDR_VAR 0 13
51790: PUSH
51791: LD_INT 3
51793: PUSH
51794: LD_INT 2
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: PUSH
51801: LD_INT 3
51803: PUSH
51804: LD_INT 3
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 2
51813: PUSH
51814: LD_INT 3
51816: PUSH
51817: EMPTY
51818: LIST
51819: LIST
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: LIST
51825: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51826: LD_ADDR_VAR 0 14
51830: PUSH
51831: LD_INT 1
51833: PUSH
51834: LD_INT 3
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: PUSH
51841: LD_INT 0
51843: PUSH
51844: LD_INT 3
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: PUSH
51851: LD_INT 1
51853: NEG
51854: PUSH
51855: LD_INT 2
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: LIST
51866: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51867: LD_ADDR_VAR 0 15
51871: PUSH
51872: LD_INT 2
51874: NEG
51875: PUSH
51876: LD_INT 1
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: PUSH
51883: LD_INT 3
51885: NEG
51886: PUSH
51887: LD_INT 0
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: PUSH
51894: LD_INT 3
51896: NEG
51897: PUSH
51898: LD_INT 1
51900: NEG
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: LIST
51910: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51911: LD_ADDR_VAR 0 16
51915: PUSH
51916: LD_INT 2
51918: NEG
51919: PUSH
51920: LD_INT 3
51922: NEG
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: PUSH
51928: LD_INT 3
51930: NEG
51931: PUSH
51932: LD_INT 2
51934: NEG
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: PUSH
51940: LD_INT 3
51942: NEG
51943: PUSH
51944: LD_INT 3
51946: NEG
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: LIST
51956: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51957: LD_ADDR_VAR 0 17
51961: PUSH
51962: LD_INT 1
51964: NEG
51965: PUSH
51966: LD_INT 3
51968: NEG
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: PUSH
51974: LD_INT 0
51976: PUSH
51977: LD_INT 3
51979: NEG
51980: PUSH
51981: EMPTY
51982: LIST
51983: LIST
51984: PUSH
51985: LD_INT 1
51987: PUSH
51988: LD_INT 2
51990: NEG
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: LIST
52000: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52001: LD_ADDR_VAR 0 18
52005: PUSH
52006: LD_INT 2
52008: PUSH
52009: LD_INT 1
52011: NEG
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: PUSH
52017: LD_INT 3
52019: PUSH
52020: LD_INT 0
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: PUSH
52027: LD_INT 3
52029: PUSH
52030: LD_INT 1
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: LIST
52041: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52042: LD_ADDR_VAR 0 19
52046: PUSH
52047: LD_INT 3
52049: PUSH
52050: LD_INT 2
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: PUSH
52057: LD_INT 3
52059: PUSH
52060: LD_INT 3
52062: PUSH
52063: EMPTY
52064: LIST
52065: LIST
52066: PUSH
52067: LD_INT 2
52069: PUSH
52070: LD_INT 3
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PUSH
52077: EMPTY
52078: LIST
52079: LIST
52080: LIST
52081: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52082: LD_ADDR_VAR 0 20
52086: PUSH
52087: LD_INT 1
52089: PUSH
52090: LD_INT 3
52092: PUSH
52093: EMPTY
52094: LIST
52095: LIST
52096: PUSH
52097: LD_INT 0
52099: PUSH
52100: LD_INT 3
52102: PUSH
52103: EMPTY
52104: LIST
52105: LIST
52106: PUSH
52107: LD_INT 1
52109: NEG
52110: PUSH
52111: LD_INT 2
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PUSH
52118: EMPTY
52119: LIST
52120: LIST
52121: LIST
52122: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52123: LD_ADDR_VAR 0 21
52127: PUSH
52128: LD_INT 2
52130: NEG
52131: PUSH
52132: LD_INT 1
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: LD_INT 3
52141: NEG
52142: PUSH
52143: LD_INT 0
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: LD_INT 3
52152: NEG
52153: PUSH
52154: LD_INT 1
52156: NEG
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: LIST
52166: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52167: LD_ADDR_VAR 0 22
52171: PUSH
52172: LD_INT 2
52174: NEG
52175: PUSH
52176: LD_INT 3
52178: NEG
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: PUSH
52184: LD_INT 3
52186: NEG
52187: PUSH
52188: LD_INT 2
52190: NEG
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: PUSH
52196: LD_INT 3
52198: NEG
52199: PUSH
52200: LD_INT 3
52202: NEG
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: LIST
52212: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
52213: LD_ADDR_VAR 0 23
52217: PUSH
52218: LD_INT 0
52220: PUSH
52221: LD_INT 3
52223: NEG
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: LD_INT 1
52231: NEG
52232: PUSH
52233: LD_INT 4
52235: NEG
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: LD_INT 1
52243: PUSH
52244: LD_INT 3
52246: NEG
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: LIST
52256: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
52257: LD_ADDR_VAR 0 24
52261: PUSH
52262: LD_INT 3
52264: PUSH
52265: LD_INT 0
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: PUSH
52272: LD_INT 3
52274: PUSH
52275: LD_INT 1
52277: NEG
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: LD_INT 4
52285: PUSH
52286: LD_INT 1
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: PUSH
52293: EMPTY
52294: LIST
52295: LIST
52296: LIST
52297: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
52298: LD_ADDR_VAR 0 25
52302: PUSH
52303: LD_INT 3
52305: PUSH
52306: LD_INT 3
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: PUSH
52313: LD_INT 4
52315: PUSH
52316: LD_INT 3
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 3
52325: PUSH
52326: LD_INT 4
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: EMPTY
52334: LIST
52335: LIST
52336: LIST
52337: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
52338: LD_ADDR_VAR 0 26
52342: PUSH
52343: LD_INT 0
52345: PUSH
52346: LD_INT 3
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: PUSH
52353: LD_INT 1
52355: PUSH
52356: LD_INT 4
52358: PUSH
52359: EMPTY
52360: LIST
52361: LIST
52362: PUSH
52363: LD_INT 1
52365: NEG
52366: PUSH
52367: LD_INT 3
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: LIST
52378: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
52379: LD_ADDR_VAR 0 27
52383: PUSH
52384: LD_INT 3
52386: NEG
52387: PUSH
52388: LD_INT 0
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: PUSH
52395: LD_INT 3
52397: NEG
52398: PUSH
52399: LD_INT 1
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: PUSH
52406: LD_INT 4
52408: NEG
52409: PUSH
52410: LD_INT 1
52412: NEG
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: LIST
52422: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
52423: LD_ADDR_VAR 0 28
52427: PUSH
52428: LD_INT 3
52430: NEG
52431: PUSH
52432: LD_INT 3
52434: NEG
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: PUSH
52440: LD_INT 3
52442: NEG
52443: PUSH
52444: LD_INT 4
52446: NEG
52447: PUSH
52448: EMPTY
52449: LIST
52450: LIST
52451: PUSH
52452: LD_INT 4
52454: NEG
52455: PUSH
52456: LD_INT 3
52458: NEG
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: LIST
52468: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
52469: LD_ADDR_VAR 0 29
52473: PUSH
52474: LD_INT 1
52476: NEG
52477: PUSH
52478: LD_INT 3
52480: NEG
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: PUSH
52486: LD_INT 0
52488: PUSH
52489: LD_INT 3
52491: NEG
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: LD_INT 1
52499: PUSH
52500: LD_INT 2
52502: NEG
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 1
52510: NEG
52511: PUSH
52512: LD_INT 4
52514: NEG
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 0
52522: PUSH
52523: LD_INT 4
52525: NEG
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: PUSH
52531: LD_INT 1
52533: PUSH
52534: LD_INT 3
52536: NEG
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 1
52544: NEG
52545: PUSH
52546: LD_INT 5
52548: NEG
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: LD_INT 0
52556: PUSH
52557: LD_INT 5
52559: NEG
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: LD_INT 1
52567: PUSH
52568: LD_INT 4
52570: NEG
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: LD_INT 1
52578: NEG
52579: PUSH
52580: LD_INT 6
52582: NEG
52583: PUSH
52584: EMPTY
52585: LIST
52586: LIST
52587: PUSH
52588: LD_INT 0
52590: PUSH
52591: LD_INT 6
52593: NEG
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: LD_INT 1
52601: PUSH
52602: LD_INT 5
52604: NEG
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: LIST
52614: LIST
52615: LIST
52616: LIST
52617: LIST
52618: LIST
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
52624: LD_ADDR_VAR 0 30
52628: PUSH
52629: LD_INT 2
52631: PUSH
52632: LD_INT 1
52634: NEG
52635: PUSH
52636: EMPTY
52637: LIST
52638: LIST
52639: PUSH
52640: LD_INT 3
52642: PUSH
52643: LD_INT 0
52645: PUSH
52646: EMPTY
52647: LIST
52648: LIST
52649: PUSH
52650: LD_INT 3
52652: PUSH
52653: LD_INT 1
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: PUSH
52660: LD_INT 3
52662: PUSH
52663: LD_INT 1
52665: NEG
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: LD_INT 4
52673: PUSH
52674: LD_INT 0
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: LD_INT 4
52683: PUSH
52684: LD_INT 1
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: LD_INT 4
52693: PUSH
52694: LD_INT 1
52696: NEG
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: LD_INT 5
52704: PUSH
52705: LD_INT 0
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: LD_INT 5
52714: PUSH
52715: LD_INT 1
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: PUSH
52722: LD_INT 5
52724: PUSH
52725: LD_INT 1
52727: NEG
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: PUSH
52733: LD_INT 6
52735: PUSH
52736: LD_INT 0
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: PUSH
52743: LD_INT 6
52745: PUSH
52746: LD_INT 1
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: LIST
52757: LIST
52758: LIST
52759: LIST
52760: LIST
52761: LIST
52762: LIST
52763: LIST
52764: LIST
52765: LIST
52766: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
52767: LD_ADDR_VAR 0 31
52771: PUSH
52772: LD_INT 3
52774: PUSH
52775: LD_INT 2
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: LD_INT 3
52784: PUSH
52785: LD_INT 3
52787: PUSH
52788: EMPTY
52789: LIST
52790: LIST
52791: PUSH
52792: LD_INT 2
52794: PUSH
52795: LD_INT 3
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: PUSH
52802: LD_INT 4
52804: PUSH
52805: LD_INT 3
52807: PUSH
52808: EMPTY
52809: LIST
52810: LIST
52811: PUSH
52812: LD_INT 4
52814: PUSH
52815: LD_INT 4
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: PUSH
52822: LD_INT 3
52824: PUSH
52825: LD_INT 4
52827: PUSH
52828: EMPTY
52829: LIST
52830: LIST
52831: PUSH
52832: LD_INT 5
52834: PUSH
52835: LD_INT 4
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: PUSH
52842: LD_INT 5
52844: PUSH
52845: LD_INT 5
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: PUSH
52852: LD_INT 4
52854: PUSH
52855: LD_INT 5
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 6
52864: PUSH
52865: LD_INT 5
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 6
52874: PUSH
52875: LD_INT 6
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: LD_INT 5
52884: PUSH
52885: LD_INT 6
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: LIST
52898: LIST
52899: LIST
52900: LIST
52901: LIST
52902: LIST
52903: LIST
52904: LIST
52905: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
52906: LD_ADDR_VAR 0 32
52910: PUSH
52911: LD_INT 1
52913: PUSH
52914: LD_INT 3
52916: PUSH
52917: EMPTY
52918: LIST
52919: LIST
52920: PUSH
52921: LD_INT 0
52923: PUSH
52924: LD_INT 3
52926: PUSH
52927: EMPTY
52928: LIST
52929: LIST
52930: PUSH
52931: LD_INT 1
52933: NEG
52934: PUSH
52935: LD_INT 2
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: PUSH
52942: LD_INT 1
52944: PUSH
52945: LD_INT 4
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PUSH
52952: LD_INT 0
52954: PUSH
52955: LD_INT 4
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: LD_INT 1
52964: NEG
52965: PUSH
52966: LD_INT 3
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: LD_INT 1
52975: PUSH
52976: LD_INT 5
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: PUSH
52983: LD_INT 0
52985: PUSH
52986: LD_INT 5
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 1
52995: NEG
52996: PUSH
52997: LD_INT 4
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: PUSH
53004: LD_INT 1
53006: PUSH
53007: LD_INT 6
53009: PUSH
53010: EMPTY
53011: LIST
53012: LIST
53013: PUSH
53014: LD_INT 0
53016: PUSH
53017: LD_INT 6
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: PUSH
53024: LD_INT 1
53026: NEG
53027: PUSH
53028: LD_INT 5
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: LIST
53039: LIST
53040: LIST
53041: LIST
53042: LIST
53043: LIST
53044: LIST
53045: LIST
53046: LIST
53047: LIST
53048: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
53049: LD_ADDR_VAR 0 33
53053: PUSH
53054: LD_INT 2
53056: NEG
53057: PUSH
53058: LD_INT 1
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: PUSH
53065: LD_INT 3
53067: NEG
53068: PUSH
53069: LD_INT 0
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: PUSH
53076: LD_INT 3
53078: NEG
53079: PUSH
53080: LD_INT 1
53082: NEG
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: PUSH
53088: LD_INT 3
53090: NEG
53091: PUSH
53092: LD_INT 1
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: PUSH
53099: LD_INT 4
53101: NEG
53102: PUSH
53103: LD_INT 0
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: PUSH
53110: LD_INT 4
53112: NEG
53113: PUSH
53114: LD_INT 1
53116: NEG
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: PUSH
53122: LD_INT 4
53124: NEG
53125: PUSH
53126: LD_INT 1
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PUSH
53133: LD_INT 5
53135: NEG
53136: PUSH
53137: LD_INT 0
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: LD_INT 5
53146: NEG
53147: PUSH
53148: LD_INT 1
53150: NEG
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 5
53158: NEG
53159: PUSH
53160: LD_INT 1
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: PUSH
53167: LD_INT 6
53169: NEG
53170: PUSH
53171: LD_INT 0
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: LD_INT 6
53180: NEG
53181: PUSH
53182: LD_INT 1
53184: NEG
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: LIST
53194: LIST
53195: LIST
53196: LIST
53197: LIST
53198: LIST
53199: LIST
53200: LIST
53201: LIST
53202: LIST
53203: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
53204: LD_ADDR_VAR 0 34
53208: PUSH
53209: LD_INT 2
53211: NEG
53212: PUSH
53213: LD_INT 3
53215: NEG
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 3
53223: NEG
53224: PUSH
53225: LD_INT 2
53227: NEG
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: LD_INT 3
53235: NEG
53236: PUSH
53237: LD_INT 3
53239: NEG
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 3
53247: NEG
53248: PUSH
53249: LD_INT 4
53251: NEG
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: PUSH
53257: LD_INT 4
53259: NEG
53260: PUSH
53261: LD_INT 3
53263: NEG
53264: PUSH
53265: EMPTY
53266: LIST
53267: LIST
53268: PUSH
53269: LD_INT 4
53271: NEG
53272: PUSH
53273: LD_INT 4
53275: NEG
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: PUSH
53281: LD_INT 4
53283: NEG
53284: PUSH
53285: LD_INT 5
53287: NEG
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: PUSH
53293: LD_INT 5
53295: NEG
53296: PUSH
53297: LD_INT 4
53299: NEG
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: PUSH
53305: LD_INT 5
53307: NEG
53308: PUSH
53309: LD_INT 5
53311: NEG
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: LD_INT 5
53319: NEG
53320: PUSH
53321: LD_INT 6
53323: NEG
53324: PUSH
53325: EMPTY
53326: LIST
53327: LIST
53328: PUSH
53329: LD_INT 6
53331: NEG
53332: PUSH
53333: LD_INT 5
53335: NEG
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: PUSH
53341: LD_INT 6
53343: NEG
53344: PUSH
53345: LD_INT 6
53347: NEG
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: LIST
53357: LIST
53358: LIST
53359: LIST
53360: LIST
53361: LIST
53362: LIST
53363: LIST
53364: LIST
53365: LIST
53366: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
53367: LD_ADDR_VAR 0 41
53371: PUSH
53372: LD_INT 0
53374: PUSH
53375: LD_INT 2
53377: NEG
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 1
53385: NEG
53386: PUSH
53387: LD_INT 3
53389: NEG
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: PUSH
53395: LD_INT 1
53397: PUSH
53398: LD_INT 2
53400: NEG
53401: PUSH
53402: EMPTY
53403: LIST
53404: LIST
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: LIST
53410: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
53411: LD_ADDR_VAR 0 42
53415: PUSH
53416: LD_INT 2
53418: PUSH
53419: LD_INT 0
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: PUSH
53426: LD_INT 2
53428: PUSH
53429: LD_INT 1
53431: NEG
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: PUSH
53437: LD_INT 3
53439: PUSH
53440: LD_INT 1
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: LIST
53451: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
53452: LD_ADDR_VAR 0 43
53456: PUSH
53457: LD_INT 2
53459: PUSH
53460: LD_INT 2
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: PUSH
53467: LD_INT 3
53469: PUSH
53470: LD_INT 2
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: PUSH
53477: LD_INT 2
53479: PUSH
53480: LD_INT 3
53482: PUSH
53483: EMPTY
53484: LIST
53485: LIST
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: LIST
53491: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
53492: LD_ADDR_VAR 0 44
53496: PUSH
53497: LD_INT 0
53499: PUSH
53500: LD_INT 2
53502: PUSH
53503: EMPTY
53504: LIST
53505: LIST
53506: PUSH
53507: LD_INT 1
53509: PUSH
53510: LD_INT 3
53512: PUSH
53513: EMPTY
53514: LIST
53515: LIST
53516: PUSH
53517: LD_INT 1
53519: NEG
53520: PUSH
53521: LD_INT 2
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: LIST
53532: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53533: LD_ADDR_VAR 0 45
53537: PUSH
53538: LD_INT 2
53540: NEG
53541: PUSH
53542: LD_INT 0
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: PUSH
53549: LD_INT 2
53551: NEG
53552: PUSH
53553: LD_INT 1
53555: PUSH
53556: EMPTY
53557: LIST
53558: LIST
53559: PUSH
53560: LD_INT 3
53562: NEG
53563: PUSH
53564: LD_INT 1
53566: NEG
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: LIST
53576: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
53577: LD_ADDR_VAR 0 46
53581: PUSH
53582: LD_INT 2
53584: NEG
53585: PUSH
53586: LD_INT 2
53588: NEG
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: PUSH
53594: LD_INT 2
53596: NEG
53597: PUSH
53598: LD_INT 3
53600: NEG
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: LD_INT 3
53608: NEG
53609: PUSH
53610: LD_INT 2
53612: NEG
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: LIST
53622: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
53623: LD_ADDR_VAR 0 47
53627: PUSH
53628: LD_INT 2
53630: NEG
53631: PUSH
53632: LD_INT 3
53634: NEG
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: PUSH
53640: LD_INT 1
53642: NEG
53643: PUSH
53644: LD_INT 3
53646: NEG
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53656: LD_ADDR_VAR 0 48
53660: PUSH
53661: LD_INT 1
53663: PUSH
53664: LD_INT 2
53666: NEG
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: PUSH
53672: LD_INT 2
53674: PUSH
53675: LD_INT 1
53677: NEG
53678: PUSH
53679: EMPTY
53680: LIST
53681: LIST
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
53687: LD_ADDR_VAR 0 49
53691: PUSH
53692: LD_INT 3
53694: PUSH
53695: LD_INT 1
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: PUSH
53702: LD_INT 3
53704: PUSH
53705: LD_INT 2
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
53716: LD_ADDR_VAR 0 50
53720: PUSH
53721: LD_INT 2
53723: PUSH
53724: LD_INT 3
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: PUSH
53731: LD_INT 1
53733: PUSH
53734: LD_INT 3
53736: PUSH
53737: EMPTY
53738: LIST
53739: LIST
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53745: LD_ADDR_VAR 0 51
53749: PUSH
53750: LD_INT 1
53752: NEG
53753: PUSH
53754: LD_INT 2
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PUSH
53761: LD_INT 2
53763: NEG
53764: PUSH
53765: LD_INT 1
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53776: LD_ADDR_VAR 0 52
53780: PUSH
53781: LD_INT 3
53783: NEG
53784: PUSH
53785: LD_INT 1
53787: NEG
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: PUSH
53793: LD_INT 3
53795: NEG
53796: PUSH
53797: LD_INT 2
53799: NEG
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53809: LD_ADDR_VAR 0 53
53813: PUSH
53814: LD_INT 1
53816: NEG
53817: PUSH
53818: LD_INT 3
53820: NEG
53821: PUSH
53822: EMPTY
53823: LIST
53824: LIST
53825: PUSH
53826: LD_INT 0
53828: PUSH
53829: LD_INT 3
53831: NEG
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: PUSH
53837: LD_INT 1
53839: PUSH
53840: LD_INT 2
53842: NEG
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: LIST
53852: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53853: LD_ADDR_VAR 0 54
53857: PUSH
53858: LD_INT 2
53860: PUSH
53861: LD_INT 1
53863: NEG
53864: PUSH
53865: EMPTY
53866: LIST
53867: LIST
53868: PUSH
53869: LD_INT 3
53871: PUSH
53872: LD_INT 0
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: LD_INT 3
53881: PUSH
53882: LD_INT 1
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: LIST
53893: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53894: LD_ADDR_VAR 0 55
53898: PUSH
53899: LD_INT 3
53901: PUSH
53902: LD_INT 2
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: PUSH
53909: LD_INT 3
53911: PUSH
53912: LD_INT 3
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: PUSH
53919: LD_INT 2
53921: PUSH
53922: LD_INT 3
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: LIST
53933: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53934: LD_ADDR_VAR 0 56
53938: PUSH
53939: LD_INT 1
53941: PUSH
53942: LD_INT 3
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: LD_INT 0
53951: PUSH
53952: LD_INT 3
53954: PUSH
53955: EMPTY
53956: LIST
53957: LIST
53958: PUSH
53959: LD_INT 1
53961: NEG
53962: PUSH
53963: LD_INT 2
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: LIST
53974: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53975: LD_ADDR_VAR 0 57
53979: PUSH
53980: LD_INT 2
53982: NEG
53983: PUSH
53984: LD_INT 1
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: LD_INT 3
53993: NEG
53994: PUSH
53995: LD_INT 0
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: PUSH
54002: LD_INT 3
54004: NEG
54005: PUSH
54006: LD_INT 1
54008: NEG
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: LIST
54018: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54019: LD_ADDR_VAR 0 58
54023: PUSH
54024: LD_INT 2
54026: NEG
54027: PUSH
54028: LD_INT 3
54030: NEG
54031: PUSH
54032: EMPTY
54033: LIST
54034: LIST
54035: PUSH
54036: LD_INT 3
54038: NEG
54039: PUSH
54040: LD_INT 2
54042: NEG
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: LD_INT 3
54050: NEG
54051: PUSH
54052: LD_INT 3
54054: NEG
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: LIST
54064: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
54065: LD_ADDR_VAR 0 59
54069: PUSH
54070: LD_INT 1
54072: NEG
54073: PUSH
54074: LD_INT 2
54076: NEG
54077: PUSH
54078: EMPTY
54079: LIST
54080: LIST
54081: PUSH
54082: LD_INT 0
54084: PUSH
54085: LD_INT 2
54087: NEG
54088: PUSH
54089: EMPTY
54090: LIST
54091: LIST
54092: PUSH
54093: LD_INT 1
54095: PUSH
54096: LD_INT 1
54098: NEG
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: LIST
54108: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54109: LD_ADDR_VAR 0 60
54113: PUSH
54114: LD_INT 1
54116: PUSH
54117: LD_INT 1
54119: NEG
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: LD_INT 2
54127: PUSH
54128: LD_INT 0
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: PUSH
54135: LD_INT 2
54137: PUSH
54138: LD_INT 1
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: LIST
54149: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54150: LD_ADDR_VAR 0 61
54154: PUSH
54155: LD_INT 2
54157: PUSH
54158: LD_INT 1
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: LD_INT 2
54167: PUSH
54168: LD_INT 2
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: LD_INT 1
54177: PUSH
54178: LD_INT 2
54180: PUSH
54181: EMPTY
54182: LIST
54183: LIST
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: LIST
54189: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54190: LD_ADDR_VAR 0 62
54194: PUSH
54195: LD_INT 1
54197: PUSH
54198: LD_INT 2
54200: PUSH
54201: EMPTY
54202: LIST
54203: LIST
54204: PUSH
54205: LD_INT 0
54207: PUSH
54208: LD_INT 2
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: PUSH
54215: LD_INT 1
54217: NEG
54218: PUSH
54219: LD_INT 1
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: PUSH
54226: EMPTY
54227: LIST
54228: LIST
54229: LIST
54230: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54231: LD_ADDR_VAR 0 63
54235: PUSH
54236: LD_INT 1
54238: NEG
54239: PUSH
54240: LD_INT 1
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: PUSH
54247: LD_INT 2
54249: NEG
54250: PUSH
54251: LD_INT 0
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: PUSH
54258: LD_INT 2
54260: NEG
54261: PUSH
54262: LD_INT 1
54264: NEG
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: LIST
54274: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54275: LD_ADDR_VAR 0 64
54279: PUSH
54280: LD_INT 1
54282: NEG
54283: PUSH
54284: LD_INT 2
54286: NEG
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: PUSH
54292: LD_INT 2
54294: NEG
54295: PUSH
54296: LD_INT 1
54298: NEG
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PUSH
54304: LD_INT 2
54306: NEG
54307: PUSH
54308: LD_INT 2
54310: NEG
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: LIST
54320: ST_TO_ADDR
// end ; 2 :
54321: GO 57587
54323: LD_INT 2
54325: DOUBLE
54326: EQUAL
54327: IFTRUE 54331
54329: GO 57586
54331: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
54332: LD_ADDR_VAR 0 29
54336: PUSH
54337: LD_INT 4
54339: PUSH
54340: LD_INT 0
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: PUSH
54347: LD_INT 4
54349: PUSH
54350: LD_INT 1
54352: NEG
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: PUSH
54358: LD_INT 5
54360: PUSH
54361: LD_INT 0
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: PUSH
54368: LD_INT 5
54370: PUSH
54371: LD_INT 1
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: LD_INT 4
54380: PUSH
54381: LD_INT 1
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: PUSH
54388: LD_INT 3
54390: PUSH
54391: LD_INT 0
54393: PUSH
54394: EMPTY
54395: LIST
54396: LIST
54397: PUSH
54398: LD_INT 3
54400: PUSH
54401: LD_INT 1
54403: NEG
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: PUSH
54409: LD_INT 3
54411: PUSH
54412: LD_INT 2
54414: NEG
54415: PUSH
54416: EMPTY
54417: LIST
54418: LIST
54419: PUSH
54420: LD_INT 5
54422: PUSH
54423: LD_INT 2
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: PUSH
54430: LD_INT 3
54432: PUSH
54433: LD_INT 3
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: PUSH
54440: LD_INT 3
54442: PUSH
54443: LD_INT 2
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: PUSH
54450: LD_INT 4
54452: PUSH
54453: LD_INT 3
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: LD_INT 4
54462: PUSH
54463: LD_INT 4
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: PUSH
54470: LD_INT 3
54472: PUSH
54473: LD_INT 4
54475: PUSH
54476: EMPTY
54477: LIST
54478: LIST
54479: PUSH
54480: LD_INT 2
54482: PUSH
54483: LD_INT 3
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: LD_INT 2
54492: PUSH
54493: LD_INT 2
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: LD_INT 4
54502: PUSH
54503: LD_INT 2
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: PUSH
54510: LD_INT 2
54512: PUSH
54513: LD_INT 4
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: PUSH
54520: LD_INT 0
54522: PUSH
54523: LD_INT 4
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: PUSH
54530: LD_INT 0
54532: PUSH
54533: LD_INT 3
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: PUSH
54540: LD_INT 1
54542: PUSH
54543: LD_INT 4
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: PUSH
54550: LD_INT 1
54552: PUSH
54553: LD_INT 5
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: PUSH
54560: LD_INT 0
54562: PUSH
54563: LD_INT 5
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: PUSH
54570: LD_INT 1
54572: NEG
54573: PUSH
54574: LD_INT 4
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 1
54583: NEG
54584: PUSH
54585: LD_INT 3
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: LD_INT 2
54594: PUSH
54595: LD_INT 5
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: LD_INT 2
54604: NEG
54605: PUSH
54606: LD_INT 3
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: PUSH
54613: LD_INT 3
54615: NEG
54616: PUSH
54617: LD_INT 0
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: PUSH
54624: LD_INT 3
54626: NEG
54627: PUSH
54628: LD_INT 1
54630: NEG
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: PUSH
54636: LD_INT 2
54638: NEG
54639: PUSH
54640: LD_INT 0
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: LD_INT 2
54649: NEG
54650: PUSH
54651: LD_INT 1
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 3
54660: NEG
54661: PUSH
54662: LD_INT 1
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PUSH
54669: LD_INT 4
54671: NEG
54672: PUSH
54673: LD_INT 0
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: PUSH
54680: LD_INT 4
54682: NEG
54683: PUSH
54684: LD_INT 1
54686: NEG
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: PUSH
54692: LD_INT 4
54694: NEG
54695: PUSH
54696: LD_INT 2
54698: NEG
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: PUSH
54704: LD_INT 2
54706: NEG
54707: PUSH
54708: LD_INT 2
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: PUSH
54715: LD_INT 4
54717: NEG
54718: PUSH
54719: LD_INT 4
54721: NEG
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 4
54729: NEG
54730: PUSH
54731: LD_INT 5
54733: NEG
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: PUSH
54739: LD_INT 3
54741: NEG
54742: PUSH
54743: LD_INT 4
54745: NEG
54746: PUSH
54747: EMPTY
54748: LIST
54749: LIST
54750: PUSH
54751: LD_INT 3
54753: NEG
54754: PUSH
54755: LD_INT 3
54757: NEG
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: LD_INT 4
54765: NEG
54766: PUSH
54767: LD_INT 3
54769: NEG
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PUSH
54775: LD_INT 5
54777: NEG
54778: PUSH
54779: LD_INT 4
54781: NEG
54782: PUSH
54783: EMPTY
54784: LIST
54785: LIST
54786: PUSH
54787: LD_INT 5
54789: NEG
54790: PUSH
54791: LD_INT 5
54793: NEG
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 3
54801: NEG
54802: PUSH
54803: LD_INT 5
54805: NEG
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: LD_INT 5
54813: NEG
54814: PUSH
54815: LD_INT 3
54817: NEG
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: LIST
54827: LIST
54828: LIST
54829: LIST
54830: LIST
54831: LIST
54832: LIST
54833: LIST
54834: LIST
54835: LIST
54836: LIST
54837: LIST
54838: LIST
54839: LIST
54840: LIST
54841: LIST
54842: LIST
54843: LIST
54844: LIST
54845: LIST
54846: LIST
54847: LIST
54848: LIST
54849: LIST
54850: LIST
54851: LIST
54852: LIST
54853: LIST
54854: LIST
54855: LIST
54856: LIST
54857: LIST
54858: LIST
54859: LIST
54860: LIST
54861: LIST
54862: LIST
54863: LIST
54864: LIST
54865: LIST
54866: LIST
54867: LIST
54868: LIST
54869: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
54870: LD_ADDR_VAR 0 30
54874: PUSH
54875: LD_INT 4
54877: PUSH
54878: LD_INT 4
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: PUSH
54885: LD_INT 4
54887: PUSH
54888: LD_INT 3
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: PUSH
54895: LD_INT 5
54897: PUSH
54898: LD_INT 4
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: PUSH
54905: LD_INT 5
54907: PUSH
54908: LD_INT 5
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: PUSH
54915: LD_INT 4
54917: PUSH
54918: LD_INT 5
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: PUSH
54925: LD_INT 3
54927: PUSH
54928: LD_INT 4
54930: PUSH
54931: EMPTY
54932: LIST
54933: LIST
54934: PUSH
54935: LD_INT 3
54937: PUSH
54938: LD_INT 3
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: PUSH
54945: LD_INT 5
54947: PUSH
54948: LD_INT 3
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 3
54957: PUSH
54958: LD_INT 5
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: LD_INT 0
54967: PUSH
54968: LD_INT 3
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: PUSH
54975: LD_INT 0
54977: PUSH
54978: LD_INT 2
54980: PUSH
54981: EMPTY
54982: LIST
54983: LIST
54984: PUSH
54985: LD_INT 1
54987: PUSH
54988: LD_INT 3
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: PUSH
54995: LD_INT 1
54997: PUSH
54998: LD_INT 4
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: PUSH
55005: LD_INT 0
55007: PUSH
55008: LD_INT 4
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: PUSH
55015: LD_INT 1
55017: NEG
55018: PUSH
55019: LD_INT 3
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 1
55028: NEG
55029: PUSH
55030: LD_INT 2
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: PUSH
55037: LD_INT 2
55039: PUSH
55040: LD_INT 4
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: PUSH
55047: LD_INT 2
55049: NEG
55050: PUSH
55051: LD_INT 2
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 4
55060: NEG
55061: PUSH
55062: LD_INT 0
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 4
55071: NEG
55072: PUSH
55073: LD_INT 1
55075: NEG
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: LD_INT 3
55083: NEG
55084: PUSH
55085: LD_INT 0
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: PUSH
55092: LD_INT 3
55094: NEG
55095: PUSH
55096: LD_INT 1
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 4
55105: NEG
55106: PUSH
55107: LD_INT 1
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: PUSH
55114: LD_INT 5
55116: NEG
55117: PUSH
55118: LD_INT 0
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: PUSH
55125: LD_INT 5
55127: NEG
55128: PUSH
55129: LD_INT 1
55131: NEG
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: LD_INT 5
55139: NEG
55140: PUSH
55141: LD_INT 2
55143: NEG
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: PUSH
55149: LD_INT 3
55151: NEG
55152: PUSH
55153: LD_INT 2
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: LD_INT 3
55162: NEG
55163: PUSH
55164: LD_INT 3
55166: NEG
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PUSH
55172: LD_INT 3
55174: NEG
55175: PUSH
55176: LD_INT 4
55178: NEG
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PUSH
55184: LD_INT 2
55186: NEG
55187: PUSH
55188: LD_INT 3
55190: NEG
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: PUSH
55196: LD_INT 2
55198: NEG
55199: PUSH
55200: LD_INT 2
55202: NEG
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: LD_INT 3
55210: NEG
55211: PUSH
55212: LD_INT 2
55214: NEG
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: PUSH
55220: LD_INT 4
55222: NEG
55223: PUSH
55224: LD_INT 3
55226: NEG
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: LD_INT 4
55234: NEG
55235: PUSH
55236: LD_INT 4
55238: NEG
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PUSH
55244: LD_INT 2
55246: NEG
55247: PUSH
55248: LD_INT 4
55250: NEG
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PUSH
55256: LD_INT 4
55258: NEG
55259: PUSH
55260: LD_INT 2
55262: NEG
55263: PUSH
55264: EMPTY
55265: LIST
55266: LIST
55267: PUSH
55268: LD_INT 0
55270: PUSH
55271: LD_INT 4
55273: NEG
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: PUSH
55279: LD_INT 0
55281: PUSH
55282: LD_INT 5
55284: NEG
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: PUSH
55290: LD_INT 1
55292: PUSH
55293: LD_INT 4
55295: NEG
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: PUSH
55301: LD_INT 1
55303: PUSH
55304: LD_INT 3
55306: NEG
55307: PUSH
55308: EMPTY
55309: LIST
55310: LIST
55311: PUSH
55312: LD_INT 0
55314: PUSH
55315: LD_INT 3
55317: NEG
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: LD_INT 1
55325: NEG
55326: PUSH
55327: LD_INT 4
55329: NEG
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 1
55337: NEG
55338: PUSH
55339: LD_INT 5
55341: NEG
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: PUSH
55347: LD_INT 2
55349: PUSH
55350: LD_INT 3
55352: NEG
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: PUSH
55358: LD_INT 2
55360: NEG
55361: PUSH
55362: LD_INT 5
55364: NEG
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: PUSH
55370: EMPTY
55371: LIST
55372: LIST
55373: LIST
55374: LIST
55375: LIST
55376: LIST
55377: LIST
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: LIST
55387: LIST
55388: LIST
55389: LIST
55390: LIST
55391: LIST
55392: LIST
55393: LIST
55394: LIST
55395: LIST
55396: LIST
55397: LIST
55398: LIST
55399: LIST
55400: LIST
55401: LIST
55402: LIST
55403: LIST
55404: LIST
55405: LIST
55406: LIST
55407: LIST
55408: LIST
55409: LIST
55410: LIST
55411: LIST
55412: LIST
55413: LIST
55414: LIST
55415: LIST
55416: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
55417: LD_ADDR_VAR 0 31
55421: PUSH
55422: LD_INT 0
55424: PUSH
55425: LD_INT 4
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: LD_INT 0
55434: PUSH
55435: LD_INT 3
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: PUSH
55442: LD_INT 1
55444: PUSH
55445: LD_INT 4
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 1
55454: PUSH
55455: LD_INT 5
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: PUSH
55462: LD_INT 0
55464: PUSH
55465: LD_INT 5
55467: PUSH
55468: EMPTY
55469: LIST
55470: LIST
55471: PUSH
55472: LD_INT 1
55474: NEG
55475: PUSH
55476: LD_INT 4
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: PUSH
55483: LD_INT 1
55485: NEG
55486: PUSH
55487: LD_INT 3
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: LD_INT 2
55496: PUSH
55497: LD_INT 5
55499: PUSH
55500: EMPTY
55501: LIST
55502: LIST
55503: PUSH
55504: LD_INT 2
55506: NEG
55507: PUSH
55508: LD_INT 3
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: PUSH
55515: LD_INT 3
55517: NEG
55518: PUSH
55519: LD_INT 0
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: PUSH
55526: LD_INT 3
55528: NEG
55529: PUSH
55530: LD_INT 1
55532: NEG
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: PUSH
55538: LD_INT 2
55540: NEG
55541: PUSH
55542: LD_INT 0
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: PUSH
55549: LD_INT 2
55551: NEG
55552: PUSH
55553: LD_INT 1
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_INT 3
55562: NEG
55563: PUSH
55564: LD_INT 1
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: PUSH
55571: LD_INT 4
55573: NEG
55574: PUSH
55575: LD_INT 0
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: LD_INT 4
55584: NEG
55585: PUSH
55586: LD_INT 1
55588: NEG
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: LD_INT 4
55596: NEG
55597: PUSH
55598: LD_INT 2
55600: NEG
55601: PUSH
55602: EMPTY
55603: LIST
55604: LIST
55605: PUSH
55606: LD_INT 2
55608: NEG
55609: PUSH
55610: LD_INT 2
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: PUSH
55617: LD_INT 4
55619: NEG
55620: PUSH
55621: LD_INT 4
55623: NEG
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: LD_INT 4
55631: NEG
55632: PUSH
55633: LD_INT 5
55635: NEG
55636: PUSH
55637: EMPTY
55638: LIST
55639: LIST
55640: PUSH
55641: LD_INT 3
55643: NEG
55644: PUSH
55645: LD_INT 4
55647: NEG
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: PUSH
55653: LD_INT 3
55655: NEG
55656: PUSH
55657: LD_INT 3
55659: NEG
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: PUSH
55665: LD_INT 4
55667: NEG
55668: PUSH
55669: LD_INT 3
55671: NEG
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: LD_INT 5
55679: NEG
55680: PUSH
55681: LD_INT 4
55683: NEG
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: LD_INT 5
55691: NEG
55692: PUSH
55693: LD_INT 5
55695: NEG
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: PUSH
55701: LD_INT 3
55703: NEG
55704: PUSH
55705: LD_INT 5
55707: NEG
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: LD_INT 5
55715: NEG
55716: PUSH
55717: LD_INT 3
55719: NEG
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: LD_INT 0
55727: PUSH
55728: LD_INT 3
55730: NEG
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: LD_INT 0
55738: PUSH
55739: LD_INT 4
55741: NEG
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: LD_INT 1
55749: PUSH
55750: LD_INT 3
55752: NEG
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: LD_INT 1
55760: PUSH
55761: LD_INT 2
55763: NEG
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: LD_INT 0
55771: PUSH
55772: LD_INT 2
55774: NEG
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: LD_INT 1
55782: NEG
55783: PUSH
55784: LD_INT 3
55786: NEG
55787: PUSH
55788: EMPTY
55789: LIST
55790: LIST
55791: PUSH
55792: LD_INT 1
55794: NEG
55795: PUSH
55796: LD_INT 4
55798: NEG
55799: PUSH
55800: EMPTY
55801: LIST
55802: LIST
55803: PUSH
55804: LD_INT 2
55806: PUSH
55807: LD_INT 2
55809: NEG
55810: PUSH
55811: EMPTY
55812: LIST
55813: LIST
55814: PUSH
55815: LD_INT 2
55817: NEG
55818: PUSH
55819: LD_INT 4
55821: NEG
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: LD_INT 4
55829: PUSH
55830: LD_INT 0
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 4
55839: PUSH
55840: LD_INT 1
55842: NEG
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: PUSH
55848: LD_INT 5
55850: PUSH
55851: LD_INT 0
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: PUSH
55858: LD_INT 5
55860: PUSH
55861: LD_INT 1
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PUSH
55868: LD_INT 4
55870: PUSH
55871: LD_INT 1
55873: PUSH
55874: EMPTY
55875: LIST
55876: LIST
55877: PUSH
55878: LD_INT 3
55880: PUSH
55881: LD_INT 0
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: PUSH
55888: LD_INT 3
55890: PUSH
55891: LD_INT 1
55893: NEG
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: LD_INT 3
55901: PUSH
55902: LD_INT 2
55904: NEG
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: LD_INT 5
55912: PUSH
55913: LD_INT 2
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: LIST
55924: LIST
55925: LIST
55926: LIST
55927: LIST
55928: LIST
55929: LIST
55930: LIST
55931: LIST
55932: LIST
55933: LIST
55934: LIST
55935: LIST
55936: LIST
55937: LIST
55938: LIST
55939: LIST
55940: LIST
55941: LIST
55942: LIST
55943: LIST
55944: LIST
55945: LIST
55946: LIST
55947: LIST
55948: LIST
55949: LIST
55950: LIST
55951: LIST
55952: LIST
55953: LIST
55954: LIST
55955: LIST
55956: LIST
55957: LIST
55958: LIST
55959: LIST
55960: LIST
55961: LIST
55962: LIST
55963: LIST
55964: LIST
55965: LIST
55966: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
55967: LD_ADDR_VAR 0 32
55971: PUSH
55972: LD_INT 4
55974: NEG
55975: PUSH
55976: LD_INT 0
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: LD_INT 4
55985: NEG
55986: PUSH
55987: LD_INT 1
55989: NEG
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: LD_INT 3
55997: NEG
55998: PUSH
55999: LD_INT 0
56001: PUSH
56002: EMPTY
56003: LIST
56004: LIST
56005: PUSH
56006: LD_INT 3
56008: NEG
56009: PUSH
56010: LD_INT 1
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: PUSH
56017: LD_INT 4
56019: NEG
56020: PUSH
56021: LD_INT 1
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: LD_INT 5
56030: NEG
56031: PUSH
56032: LD_INT 0
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: PUSH
56039: LD_INT 5
56041: NEG
56042: PUSH
56043: LD_INT 1
56045: NEG
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: LD_INT 5
56053: NEG
56054: PUSH
56055: LD_INT 2
56057: NEG
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: PUSH
56063: LD_INT 3
56065: NEG
56066: PUSH
56067: LD_INT 2
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PUSH
56074: LD_INT 3
56076: NEG
56077: PUSH
56078: LD_INT 3
56080: NEG
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: PUSH
56086: LD_INT 3
56088: NEG
56089: PUSH
56090: LD_INT 4
56092: NEG
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: PUSH
56098: LD_INT 2
56100: NEG
56101: PUSH
56102: LD_INT 3
56104: NEG
56105: PUSH
56106: EMPTY
56107: LIST
56108: LIST
56109: PUSH
56110: LD_INT 2
56112: NEG
56113: PUSH
56114: LD_INT 2
56116: NEG
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: PUSH
56122: LD_INT 3
56124: NEG
56125: PUSH
56126: LD_INT 2
56128: NEG
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: PUSH
56134: LD_INT 4
56136: NEG
56137: PUSH
56138: LD_INT 3
56140: NEG
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: PUSH
56146: LD_INT 4
56148: NEG
56149: PUSH
56150: LD_INT 4
56152: NEG
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: PUSH
56158: LD_INT 2
56160: NEG
56161: PUSH
56162: LD_INT 4
56164: NEG
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: PUSH
56170: LD_INT 4
56172: NEG
56173: PUSH
56174: LD_INT 2
56176: NEG
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: LD_INT 0
56184: PUSH
56185: LD_INT 4
56187: NEG
56188: PUSH
56189: EMPTY
56190: LIST
56191: LIST
56192: PUSH
56193: LD_INT 0
56195: PUSH
56196: LD_INT 5
56198: NEG
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: PUSH
56204: LD_INT 1
56206: PUSH
56207: LD_INT 4
56209: NEG
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: LD_INT 1
56217: PUSH
56218: LD_INT 3
56220: NEG
56221: PUSH
56222: EMPTY
56223: LIST
56224: LIST
56225: PUSH
56226: LD_INT 0
56228: PUSH
56229: LD_INT 3
56231: NEG
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PUSH
56237: LD_INT 1
56239: NEG
56240: PUSH
56241: LD_INT 4
56243: NEG
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PUSH
56249: LD_INT 1
56251: NEG
56252: PUSH
56253: LD_INT 5
56255: NEG
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: PUSH
56261: LD_INT 2
56263: PUSH
56264: LD_INT 3
56266: NEG
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: LD_INT 2
56274: NEG
56275: PUSH
56276: LD_INT 5
56278: NEG
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: PUSH
56284: LD_INT 3
56286: PUSH
56287: LD_INT 0
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: PUSH
56294: LD_INT 3
56296: PUSH
56297: LD_INT 1
56299: NEG
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: PUSH
56305: LD_INT 4
56307: PUSH
56308: LD_INT 0
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: PUSH
56315: LD_INT 4
56317: PUSH
56318: LD_INT 1
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PUSH
56325: LD_INT 3
56327: PUSH
56328: LD_INT 1
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: LD_INT 2
56337: PUSH
56338: LD_INT 0
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: PUSH
56345: LD_INT 2
56347: PUSH
56348: LD_INT 1
56350: NEG
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: PUSH
56356: LD_INT 2
56358: PUSH
56359: LD_INT 2
56361: NEG
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: PUSH
56367: LD_INT 4
56369: PUSH
56370: LD_INT 2
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: PUSH
56377: LD_INT 4
56379: PUSH
56380: LD_INT 4
56382: PUSH
56383: EMPTY
56384: LIST
56385: LIST
56386: PUSH
56387: LD_INT 4
56389: PUSH
56390: LD_INT 3
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: LD_INT 5
56399: PUSH
56400: LD_INT 4
56402: PUSH
56403: EMPTY
56404: LIST
56405: LIST
56406: PUSH
56407: LD_INT 5
56409: PUSH
56410: LD_INT 5
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: PUSH
56417: LD_INT 4
56419: PUSH
56420: LD_INT 5
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: PUSH
56427: LD_INT 3
56429: PUSH
56430: LD_INT 4
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: PUSH
56437: LD_INT 3
56439: PUSH
56440: LD_INT 3
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: PUSH
56447: LD_INT 5
56449: PUSH
56450: LD_INT 3
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: PUSH
56457: LD_INT 3
56459: PUSH
56460: LD_INT 5
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: LIST
56471: LIST
56472: LIST
56473: LIST
56474: LIST
56475: LIST
56476: LIST
56477: LIST
56478: LIST
56479: LIST
56480: LIST
56481: LIST
56482: LIST
56483: LIST
56484: LIST
56485: LIST
56486: LIST
56487: LIST
56488: LIST
56489: LIST
56490: LIST
56491: LIST
56492: LIST
56493: LIST
56494: LIST
56495: LIST
56496: LIST
56497: LIST
56498: LIST
56499: LIST
56500: LIST
56501: LIST
56502: LIST
56503: LIST
56504: LIST
56505: LIST
56506: LIST
56507: LIST
56508: LIST
56509: LIST
56510: LIST
56511: LIST
56512: LIST
56513: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
56514: LD_ADDR_VAR 0 33
56518: PUSH
56519: LD_INT 4
56521: NEG
56522: PUSH
56523: LD_INT 4
56525: NEG
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PUSH
56531: LD_INT 4
56533: NEG
56534: PUSH
56535: LD_INT 5
56537: NEG
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PUSH
56543: LD_INT 3
56545: NEG
56546: PUSH
56547: LD_INT 4
56549: NEG
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 3
56557: NEG
56558: PUSH
56559: LD_INT 3
56561: NEG
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: LD_INT 4
56569: NEG
56570: PUSH
56571: LD_INT 3
56573: NEG
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: PUSH
56579: LD_INT 5
56581: NEG
56582: PUSH
56583: LD_INT 4
56585: NEG
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: PUSH
56591: LD_INT 5
56593: NEG
56594: PUSH
56595: LD_INT 5
56597: NEG
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: PUSH
56603: LD_INT 3
56605: NEG
56606: PUSH
56607: LD_INT 5
56609: NEG
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: PUSH
56615: LD_INT 5
56617: NEG
56618: PUSH
56619: LD_INT 3
56621: NEG
56622: PUSH
56623: EMPTY
56624: LIST
56625: LIST
56626: PUSH
56627: LD_INT 0
56629: PUSH
56630: LD_INT 3
56632: NEG
56633: PUSH
56634: EMPTY
56635: LIST
56636: LIST
56637: PUSH
56638: LD_INT 0
56640: PUSH
56641: LD_INT 4
56643: NEG
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: LD_INT 1
56651: PUSH
56652: LD_INT 3
56654: NEG
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: LD_INT 1
56662: PUSH
56663: LD_INT 2
56665: NEG
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: PUSH
56671: LD_INT 0
56673: PUSH
56674: LD_INT 2
56676: NEG
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: LD_INT 1
56684: NEG
56685: PUSH
56686: LD_INT 3
56688: NEG
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: PUSH
56694: LD_INT 1
56696: NEG
56697: PUSH
56698: LD_INT 4
56700: NEG
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PUSH
56706: LD_INT 2
56708: PUSH
56709: LD_INT 2
56711: NEG
56712: PUSH
56713: EMPTY
56714: LIST
56715: LIST
56716: PUSH
56717: LD_INT 2
56719: NEG
56720: PUSH
56721: LD_INT 4
56723: NEG
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: PUSH
56729: LD_INT 4
56731: PUSH
56732: LD_INT 0
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: PUSH
56739: LD_INT 4
56741: PUSH
56742: LD_INT 1
56744: NEG
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: PUSH
56750: LD_INT 5
56752: PUSH
56753: LD_INT 0
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: PUSH
56760: LD_INT 5
56762: PUSH
56763: LD_INT 1
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: LD_INT 4
56772: PUSH
56773: LD_INT 1
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: LD_INT 3
56782: PUSH
56783: LD_INT 0
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: PUSH
56790: LD_INT 3
56792: PUSH
56793: LD_INT 1
56795: NEG
56796: PUSH
56797: EMPTY
56798: LIST
56799: LIST
56800: PUSH
56801: LD_INT 3
56803: PUSH
56804: LD_INT 2
56806: NEG
56807: PUSH
56808: EMPTY
56809: LIST
56810: LIST
56811: PUSH
56812: LD_INT 5
56814: PUSH
56815: LD_INT 2
56817: PUSH
56818: EMPTY
56819: LIST
56820: LIST
56821: PUSH
56822: LD_INT 3
56824: PUSH
56825: LD_INT 3
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: PUSH
56832: LD_INT 3
56834: PUSH
56835: LD_INT 2
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: PUSH
56842: LD_INT 4
56844: PUSH
56845: LD_INT 3
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: PUSH
56852: LD_INT 4
56854: PUSH
56855: LD_INT 4
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: PUSH
56862: LD_INT 3
56864: PUSH
56865: LD_INT 4
56867: PUSH
56868: EMPTY
56869: LIST
56870: LIST
56871: PUSH
56872: LD_INT 2
56874: PUSH
56875: LD_INT 3
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 2
56884: PUSH
56885: LD_INT 2
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 4
56894: PUSH
56895: LD_INT 2
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 2
56904: PUSH
56905: LD_INT 4
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 0
56914: PUSH
56915: LD_INT 4
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: LD_INT 0
56924: PUSH
56925: LD_INT 3
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: PUSH
56932: LD_INT 1
56934: PUSH
56935: LD_INT 4
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 1
56944: PUSH
56945: LD_INT 5
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: PUSH
56952: LD_INT 0
56954: PUSH
56955: LD_INT 5
56957: PUSH
56958: EMPTY
56959: LIST
56960: LIST
56961: PUSH
56962: LD_INT 1
56964: NEG
56965: PUSH
56966: LD_INT 4
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: LD_INT 1
56975: NEG
56976: PUSH
56977: LD_INT 3
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: PUSH
56984: LD_INT 2
56986: PUSH
56987: LD_INT 5
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: PUSH
56994: LD_INT 2
56996: NEG
56997: PUSH
56998: LD_INT 3
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: LIST
57009: LIST
57010: LIST
57011: LIST
57012: LIST
57013: LIST
57014: LIST
57015: LIST
57016: LIST
57017: LIST
57018: LIST
57019: LIST
57020: LIST
57021: LIST
57022: LIST
57023: LIST
57024: LIST
57025: LIST
57026: LIST
57027: LIST
57028: LIST
57029: LIST
57030: LIST
57031: LIST
57032: LIST
57033: LIST
57034: LIST
57035: LIST
57036: LIST
57037: LIST
57038: LIST
57039: LIST
57040: LIST
57041: LIST
57042: LIST
57043: LIST
57044: LIST
57045: LIST
57046: LIST
57047: LIST
57048: LIST
57049: LIST
57050: LIST
57051: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
57052: LD_ADDR_VAR 0 34
57056: PUSH
57057: LD_INT 0
57059: PUSH
57060: LD_INT 4
57062: NEG
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: PUSH
57068: LD_INT 0
57070: PUSH
57071: LD_INT 5
57073: NEG
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: PUSH
57079: LD_INT 1
57081: PUSH
57082: LD_INT 4
57084: NEG
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: PUSH
57090: LD_INT 1
57092: PUSH
57093: LD_INT 3
57095: NEG
57096: PUSH
57097: EMPTY
57098: LIST
57099: LIST
57100: PUSH
57101: LD_INT 0
57103: PUSH
57104: LD_INT 3
57106: NEG
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 1
57114: NEG
57115: PUSH
57116: LD_INT 4
57118: NEG
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: PUSH
57124: LD_INT 1
57126: NEG
57127: PUSH
57128: LD_INT 5
57130: NEG
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: PUSH
57136: LD_INT 2
57138: PUSH
57139: LD_INT 3
57141: NEG
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: PUSH
57147: LD_INT 2
57149: NEG
57150: PUSH
57151: LD_INT 5
57153: NEG
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: LD_INT 3
57161: PUSH
57162: LD_INT 0
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: PUSH
57169: LD_INT 3
57171: PUSH
57172: LD_INT 1
57174: NEG
57175: PUSH
57176: EMPTY
57177: LIST
57178: LIST
57179: PUSH
57180: LD_INT 4
57182: PUSH
57183: LD_INT 0
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: PUSH
57190: LD_INT 4
57192: PUSH
57193: LD_INT 1
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: PUSH
57200: LD_INT 3
57202: PUSH
57203: LD_INT 1
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: LD_INT 2
57212: PUSH
57213: LD_INT 0
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: LD_INT 2
57222: PUSH
57223: LD_INT 1
57225: NEG
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: PUSH
57231: LD_INT 2
57233: PUSH
57234: LD_INT 2
57236: NEG
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: PUSH
57242: LD_INT 4
57244: PUSH
57245: LD_INT 2
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: PUSH
57252: LD_INT 4
57254: PUSH
57255: LD_INT 4
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: PUSH
57262: LD_INT 4
57264: PUSH
57265: LD_INT 3
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 5
57274: PUSH
57275: LD_INT 4
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_INT 5
57284: PUSH
57285: LD_INT 5
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: LD_INT 4
57294: PUSH
57295: LD_INT 5
57297: PUSH
57298: EMPTY
57299: LIST
57300: LIST
57301: PUSH
57302: LD_INT 3
57304: PUSH
57305: LD_INT 4
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: PUSH
57312: LD_INT 3
57314: PUSH
57315: LD_INT 3
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: LD_INT 5
57324: PUSH
57325: LD_INT 3
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: LD_INT 3
57334: PUSH
57335: LD_INT 5
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: PUSH
57342: LD_INT 0
57344: PUSH
57345: LD_INT 3
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 0
57354: PUSH
57355: LD_INT 2
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 1
57364: PUSH
57365: LD_INT 3
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: PUSH
57372: LD_INT 1
57374: PUSH
57375: LD_INT 4
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: LD_INT 0
57384: PUSH
57385: LD_INT 4
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: LD_INT 1
57394: NEG
57395: PUSH
57396: LD_INT 3
57398: PUSH
57399: EMPTY
57400: LIST
57401: LIST
57402: PUSH
57403: LD_INT 1
57405: NEG
57406: PUSH
57407: LD_INT 2
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PUSH
57414: LD_INT 2
57416: PUSH
57417: LD_INT 4
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 2
57426: NEG
57427: PUSH
57428: LD_INT 2
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: PUSH
57435: LD_INT 4
57437: NEG
57438: PUSH
57439: LD_INT 0
57441: PUSH
57442: EMPTY
57443: LIST
57444: LIST
57445: PUSH
57446: LD_INT 4
57448: NEG
57449: PUSH
57450: LD_INT 1
57452: NEG
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 3
57460: NEG
57461: PUSH
57462: LD_INT 0
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: PUSH
57469: LD_INT 3
57471: NEG
57472: PUSH
57473: LD_INT 1
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PUSH
57480: LD_INT 4
57482: NEG
57483: PUSH
57484: LD_INT 1
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: PUSH
57491: LD_INT 5
57493: NEG
57494: PUSH
57495: LD_INT 0
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: PUSH
57502: LD_INT 5
57504: NEG
57505: PUSH
57506: LD_INT 1
57508: NEG
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 5
57516: NEG
57517: PUSH
57518: LD_INT 2
57520: NEG
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: LD_INT 3
57528: NEG
57529: PUSH
57530: LD_INT 2
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: LIST
57541: LIST
57542: LIST
57543: LIST
57544: LIST
57545: LIST
57546: LIST
57547: LIST
57548: LIST
57549: LIST
57550: LIST
57551: LIST
57552: LIST
57553: LIST
57554: LIST
57555: LIST
57556: LIST
57557: LIST
57558: LIST
57559: LIST
57560: LIST
57561: LIST
57562: LIST
57563: LIST
57564: LIST
57565: LIST
57566: LIST
57567: LIST
57568: LIST
57569: LIST
57570: LIST
57571: LIST
57572: LIST
57573: LIST
57574: LIST
57575: LIST
57576: LIST
57577: LIST
57578: LIST
57579: LIST
57580: LIST
57581: LIST
57582: LIST
57583: ST_TO_ADDR
// end ; end ;
57584: GO 57587
57586: POP
// case btype of b_depot , b_warehouse :
57587: LD_VAR 0 1
57591: PUSH
57592: LD_INT 0
57594: DOUBLE
57595: EQUAL
57596: IFTRUE 57606
57598: LD_INT 1
57600: DOUBLE
57601: EQUAL
57602: IFTRUE 57606
57604: GO 57807
57606: POP
// case nation of nation_american :
57607: LD_VAR 0 5
57611: PUSH
57612: LD_INT 1
57614: DOUBLE
57615: EQUAL
57616: IFTRUE 57620
57618: GO 57676
57620: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
57621: LD_ADDR_VAR 0 9
57625: PUSH
57626: LD_VAR 0 11
57630: PUSH
57631: LD_VAR 0 12
57635: PUSH
57636: LD_VAR 0 13
57640: PUSH
57641: LD_VAR 0 14
57645: PUSH
57646: LD_VAR 0 15
57650: PUSH
57651: LD_VAR 0 16
57655: PUSH
57656: EMPTY
57657: LIST
57658: LIST
57659: LIST
57660: LIST
57661: LIST
57662: LIST
57663: PUSH
57664: LD_VAR 0 4
57668: PUSH
57669: LD_INT 1
57671: PLUS
57672: ARRAY
57673: ST_TO_ADDR
57674: GO 57805
57676: LD_INT 2
57678: DOUBLE
57679: EQUAL
57680: IFTRUE 57684
57682: GO 57740
57684: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
57685: LD_ADDR_VAR 0 9
57689: PUSH
57690: LD_VAR 0 17
57694: PUSH
57695: LD_VAR 0 18
57699: PUSH
57700: LD_VAR 0 19
57704: PUSH
57705: LD_VAR 0 20
57709: PUSH
57710: LD_VAR 0 21
57714: PUSH
57715: LD_VAR 0 22
57719: PUSH
57720: EMPTY
57721: LIST
57722: LIST
57723: LIST
57724: LIST
57725: LIST
57726: LIST
57727: PUSH
57728: LD_VAR 0 4
57732: PUSH
57733: LD_INT 1
57735: PLUS
57736: ARRAY
57737: ST_TO_ADDR
57738: GO 57805
57740: LD_INT 3
57742: DOUBLE
57743: EQUAL
57744: IFTRUE 57748
57746: GO 57804
57748: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
57749: LD_ADDR_VAR 0 9
57753: PUSH
57754: LD_VAR 0 23
57758: PUSH
57759: LD_VAR 0 24
57763: PUSH
57764: LD_VAR 0 25
57768: PUSH
57769: LD_VAR 0 26
57773: PUSH
57774: LD_VAR 0 27
57778: PUSH
57779: LD_VAR 0 28
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: LIST
57788: LIST
57789: LIST
57790: LIST
57791: PUSH
57792: LD_VAR 0 4
57796: PUSH
57797: LD_INT 1
57799: PLUS
57800: ARRAY
57801: ST_TO_ADDR
57802: GO 57805
57804: POP
57805: GO 58360
57807: LD_INT 2
57809: DOUBLE
57810: EQUAL
57811: IFTRUE 57821
57813: LD_INT 3
57815: DOUBLE
57816: EQUAL
57817: IFTRUE 57821
57819: GO 57877
57821: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
57822: LD_ADDR_VAR 0 9
57826: PUSH
57827: LD_VAR 0 29
57831: PUSH
57832: LD_VAR 0 30
57836: PUSH
57837: LD_VAR 0 31
57841: PUSH
57842: LD_VAR 0 32
57846: PUSH
57847: LD_VAR 0 33
57851: PUSH
57852: LD_VAR 0 34
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: LIST
57861: LIST
57862: LIST
57863: LIST
57864: PUSH
57865: LD_VAR 0 4
57869: PUSH
57870: LD_INT 1
57872: PLUS
57873: ARRAY
57874: ST_TO_ADDR
57875: GO 58360
57877: LD_INT 16
57879: DOUBLE
57880: EQUAL
57881: IFTRUE 57939
57883: LD_INT 17
57885: DOUBLE
57886: EQUAL
57887: IFTRUE 57939
57889: LD_INT 18
57891: DOUBLE
57892: EQUAL
57893: IFTRUE 57939
57895: LD_INT 19
57897: DOUBLE
57898: EQUAL
57899: IFTRUE 57939
57901: LD_INT 22
57903: DOUBLE
57904: EQUAL
57905: IFTRUE 57939
57907: LD_INT 20
57909: DOUBLE
57910: EQUAL
57911: IFTRUE 57939
57913: LD_INT 21
57915: DOUBLE
57916: EQUAL
57917: IFTRUE 57939
57919: LD_INT 23
57921: DOUBLE
57922: EQUAL
57923: IFTRUE 57939
57925: LD_INT 24
57927: DOUBLE
57928: EQUAL
57929: IFTRUE 57939
57931: LD_INT 25
57933: DOUBLE
57934: EQUAL
57935: IFTRUE 57939
57937: GO 57995
57939: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
57940: LD_ADDR_VAR 0 9
57944: PUSH
57945: LD_VAR 0 35
57949: PUSH
57950: LD_VAR 0 36
57954: PUSH
57955: LD_VAR 0 37
57959: PUSH
57960: LD_VAR 0 38
57964: PUSH
57965: LD_VAR 0 39
57969: PUSH
57970: LD_VAR 0 40
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: LIST
57979: LIST
57980: LIST
57981: LIST
57982: PUSH
57983: LD_VAR 0 4
57987: PUSH
57988: LD_INT 1
57990: PLUS
57991: ARRAY
57992: ST_TO_ADDR
57993: GO 58360
57995: LD_INT 6
57997: DOUBLE
57998: EQUAL
57999: IFTRUE 58051
58001: LD_INT 7
58003: DOUBLE
58004: EQUAL
58005: IFTRUE 58051
58007: LD_INT 8
58009: DOUBLE
58010: EQUAL
58011: IFTRUE 58051
58013: LD_INT 13
58015: DOUBLE
58016: EQUAL
58017: IFTRUE 58051
58019: LD_INT 12
58021: DOUBLE
58022: EQUAL
58023: IFTRUE 58051
58025: LD_INT 15
58027: DOUBLE
58028: EQUAL
58029: IFTRUE 58051
58031: LD_INT 11
58033: DOUBLE
58034: EQUAL
58035: IFTRUE 58051
58037: LD_INT 14
58039: DOUBLE
58040: EQUAL
58041: IFTRUE 58051
58043: LD_INT 10
58045: DOUBLE
58046: EQUAL
58047: IFTRUE 58051
58049: GO 58107
58051: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
58052: LD_ADDR_VAR 0 9
58056: PUSH
58057: LD_VAR 0 41
58061: PUSH
58062: LD_VAR 0 42
58066: PUSH
58067: LD_VAR 0 43
58071: PUSH
58072: LD_VAR 0 44
58076: PUSH
58077: LD_VAR 0 45
58081: PUSH
58082: LD_VAR 0 46
58086: PUSH
58087: EMPTY
58088: LIST
58089: LIST
58090: LIST
58091: LIST
58092: LIST
58093: LIST
58094: PUSH
58095: LD_VAR 0 4
58099: PUSH
58100: LD_INT 1
58102: PLUS
58103: ARRAY
58104: ST_TO_ADDR
58105: GO 58360
58107: LD_INT 36
58109: DOUBLE
58110: EQUAL
58111: IFTRUE 58115
58113: GO 58171
58115: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
58116: LD_ADDR_VAR 0 9
58120: PUSH
58121: LD_VAR 0 47
58125: PUSH
58126: LD_VAR 0 48
58130: PUSH
58131: LD_VAR 0 49
58135: PUSH
58136: LD_VAR 0 50
58140: PUSH
58141: LD_VAR 0 51
58145: PUSH
58146: LD_VAR 0 52
58150: PUSH
58151: EMPTY
58152: LIST
58153: LIST
58154: LIST
58155: LIST
58156: LIST
58157: LIST
58158: PUSH
58159: LD_VAR 0 4
58163: PUSH
58164: LD_INT 1
58166: PLUS
58167: ARRAY
58168: ST_TO_ADDR
58169: GO 58360
58171: LD_INT 4
58173: DOUBLE
58174: EQUAL
58175: IFTRUE 58197
58177: LD_INT 5
58179: DOUBLE
58180: EQUAL
58181: IFTRUE 58197
58183: LD_INT 34
58185: DOUBLE
58186: EQUAL
58187: IFTRUE 58197
58189: LD_INT 37
58191: DOUBLE
58192: EQUAL
58193: IFTRUE 58197
58195: GO 58253
58197: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
58198: LD_ADDR_VAR 0 9
58202: PUSH
58203: LD_VAR 0 53
58207: PUSH
58208: LD_VAR 0 54
58212: PUSH
58213: LD_VAR 0 55
58217: PUSH
58218: LD_VAR 0 56
58222: PUSH
58223: LD_VAR 0 57
58227: PUSH
58228: LD_VAR 0 58
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: LIST
58237: LIST
58238: LIST
58239: LIST
58240: PUSH
58241: LD_VAR 0 4
58245: PUSH
58246: LD_INT 1
58248: PLUS
58249: ARRAY
58250: ST_TO_ADDR
58251: GO 58360
58253: LD_INT 31
58255: DOUBLE
58256: EQUAL
58257: IFTRUE 58303
58259: LD_INT 32
58261: DOUBLE
58262: EQUAL
58263: IFTRUE 58303
58265: LD_INT 33
58267: DOUBLE
58268: EQUAL
58269: IFTRUE 58303
58271: LD_INT 27
58273: DOUBLE
58274: EQUAL
58275: IFTRUE 58303
58277: LD_INT 26
58279: DOUBLE
58280: EQUAL
58281: IFTRUE 58303
58283: LD_INT 28
58285: DOUBLE
58286: EQUAL
58287: IFTRUE 58303
58289: LD_INT 29
58291: DOUBLE
58292: EQUAL
58293: IFTRUE 58303
58295: LD_INT 30
58297: DOUBLE
58298: EQUAL
58299: IFTRUE 58303
58301: GO 58359
58303: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
58304: LD_ADDR_VAR 0 9
58308: PUSH
58309: LD_VAR 0 59
58313: PUSH
58314: LD_VAR 0 60
58318: PUSH
58319: LD_VAR 0 61
58323: PUSH
58324: LD_VAR 0 62
58328: PUSH
58329: LD_VAR 0 63
58333: PUSH
58334: LD_VAR 0 64
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: LIST
58343: LIST
58344: LIST
58345: LIST
58346: PUSH
58347: LD_VAR 0 4
58351: PUSH
58352: LD_INT 1
58354: PLUS
58355: ARRAY
58356: ST_TO_ADDR
58357: GO 58360
58359: POP
// temp_list2 = [ ] ;
58360: LD_ADDR_VAR 0 10
58364: PUSH
58365: EMPTY
58366: ST_TO_ADDR
// for i in temp_list do
58367: LD_ADDR_VAR 0 8
58371: PUSH
58372: LD_VAR 0 9
58376: PUSH
58377: FOR_IN
58378: IFFALSE 58430
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
58380: LD_ADDR_VAR 0 10
58384: PUSH
58385: LD_VAR 0 10
58389: PUSH
58390: LD_VAR 0 8
58394: PUSH
58395: LD_INT 1
58397: ARRAY
58398: PUSH
58399: LD_VAR 0 2
58403: PLUS
58404: PUSH
58405: LD_VAR 0 8
58409: PUSH
58410: LD_INT 2
58412: ARRAY
58413: PUSH
58414: LD_VAR 0 3
58418: PLUS
58419: PUSH
58420: EMPTY
58421: LIST
58422: LIST
58423: PUSH
58424: EMPTY
58425: LIST
58426: ADD
58427: ST_TO_ADDR
58428: GO 58377
58430: POP
58431: POP
// result = temp_list2 ;
58432: LD_ADDR_VAR 0 7
58436: PUSH
58437: LD_VAR 0 10
58441: ST_TO_ADDR
// end ;
58442: LD_VAR 0 7
58446: RET
// export function EnemyInRange ( unit , dist ) ; begin
58447: LD_INT 0
58449: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
58450: LD_ADDR_VAR 0 3
58454: PUSH
58455: LD_VAR 0 1
58459: PPUSH
58460: CALL_OW 255
58464: PPUSH
58465: LD_VAR 0 1
58469: PPUSH
58470: CALL_OW 250
58474: PPUSH
58475: LD_VAR 0 1
58479: PPUSH
58480: CALL_OW 251
58484: PPUSH
58485: LD_VAR 0 2
58489: PPUSH
58490: CALL 31820 0 4
58494: PUSH
58495: LD_INT 4
58497: ARRAY
58498: ST_TO_ADDR
// end ;
58499: LD_VAR 0 3
58503: RET
// export function PlayerSeeMe ( unit ) ; begin
58504: LD_INT 0
58506: PPUSH
// result := See ( your_side , unit ) ;
58507: LD_ADDR_VAR 0 2
58511: PUSH
58512: LD_OWVAR 2
58516: PPUSH
58517: LD_VAR 0 1
58521: PPUSH
58522: CALL_OW 292
58526: ST_TO_ADDR
// end ;
58527: LD_VAR 0 2
58531: RET
// export function ReverseDir ( unit ) ; begin
58532: LD_INT 0
58534: PPUSH
// if not unit then
58535: LD_VAR 0 1
58539: NOT
58540: IFFALSE 58544
// exit ;
58542: GO 58567
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
58544: LD_ADDR_VAR 0 2
58548: PUSH
58549: LD_VAR 0 1
58553: PPUSH
58554: CALL_OW 254
58558: PUSH
58559: LD_INT 3
58561: PLUS
58562: PUSH
58563: LD_INT 6
58565: MOD
58566: ST_TO_ADDR
// end ;
58567: LD_VAR 0 2
58571: RET
// export function ReverseArray ( array ) ; var i ; begin
58572: LD_INT 0
58574: PPUSH
58575: PPUSH
// if not array then
58576: LD_VAR 0 1
58580: NOT
58581: IFFALSE 58585
// exit ;
58583: GO 58640
// result := [ ] ;
58585: LD_ADDR_VAR 0 2
58589: PUSH
58590: EMPTY
58591: ST_TO_ADDR
// for i := array downto 1 do
58592: LD_ADDR_VAR 0 3
58596: PUSH
58597: DOUBLE
58598: LD_VAR 0 1
58602: INC
58603: ST_TO_ADDR
58604: LD_INT 1
58606: PUSH
58607: FOR_DOWNTO
58608: IFFALSE 58638
// result := Join ( result , array [ i ] ) ;
58610: LD_ADDR_VAR 0 2
58614: PUSH
58615: LD_VAR 0 2
58619: PPUSH
58620: LD_VAR 0 1
58624: PUSH
58625: LD_VAR 0 3
58629: ARRAY
58630: PPUSH
58631: CALL 63283 0 2
58635: ST_TO_ADDR
58636: GO 58607
58638: POP
58639: POP
// end ;
58640: LD_VAR 0 2
58644: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
58645: LD_INT 0
58647: PPUSH
58648: PPUSH
58649: PPUSH
58650: PPUSH
58651: PPUSH
58652: PPUSH
// if not unit or not hexes then
58653: LD_VAR 0 1
58657: NOT
58658: PUSH
58659: LD_VAR 0 2
58663: NOT
58664: OR
58665: IFFALSE 58669
// exit ;
58667: GO 58792
// dist := 9999 ;
58669: LD_ADDR_VAR 0 5
58673: PUSH
58674: LD_INT 9999
58676: ST_TO_ADDR
// for i = 1 to hexes do
58677: LD_ADDR_VAR 0 4
58681: PUSH
58682: DOUBLE
58683: LD_INT 1
58685: DEC
58686: ST_TO_ADDR
58687: LD_VAR 0 2
58691: PUSH
58692: FOR_TO
58693: IFFALSE 58780
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
58695: LD_ADDR_VAR 0 6
58699: PUSH
58700: LD_VAR 0 1
58704: PPUSH
58705: LD_VAR 0 2
58709: PUSH
58710: LD_VAR 0 4
58714: ARRAY
58715: PUSH
58716: LD_INT 1
58718: ARRAY
58719: PPUSH
58720: LD_VAR 0 2
58724: PUSH
58725: LD_VAR 0 4
58729: ARRAY
58730: PUSH
58731: LD_INT 2
58733: ARRAY
58734: PPUSH
58735: CALL_OW 297
58739: ST_TO_ADDR
// if tdist < dist then
58740: LD_VAR 0 6
58744: PUSH
58745: LD_VAR 0 5
58749: LESS
58750: IFFALSE 58778
// begin hex := hexes [ i ] ;
58752: LD_ADDR_VAR 0 8
58756: PUSH
58757: LD_VAR 0 2
58761: PUSH
58762: LD_VAR 0 4
58766: ARRAY
58767: ST_TO_ADDR
// dist := tdist ;
58768: LD_ADDR_VAR 0 5
58772: PUSH
58773: LD_VAR 0 6
58777: ST_TO_ADDR
// end ; end ;
58778: GO 58692
58780: POP
58781: POP
// result := hex ;
58782: LD_ADDR_VAR 0 3
58786: PUSH
58787: LD_VAR 0 8
58791: ST_TO_ADDR
// end ;
58792: LD_VAR 0 3
58796: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
58797: LD_INT 0
58799: PPUSH
58800: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
58801: LD_VAR 0 1
58805: NOT
58806: PUSH
58807: LD_VAR 0 1
58811: PUSH
58812: LD_INT 21
58814: PUSH
58815: LD_INT 2
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: PUSH
58822: LD_INT 23
58824: PUSH
58825: LD_INT 2
58827: PUSH
58828: EMPTY
58829: LIST
58830: LIST
58831: PUSH
58832: EMPTY
58833: LIST
58834: LIST
58835: PPUSH
58836: CALL_OW 69
58840: IN
58841: NOT
58842: OR
58843: IFFALSE 58847
// exit ;
58845: GO 58894
// for i = 1 to 3 do
58847: LD_ADDR_VAR 0 3
58851: PUSH
58852: DOUBLE
58853: LD_INT 1
58855: DEC
58856: ST_TO_ADDR
58857: LD_INT 3
58859: PUSH
58860: FOR_TO
58861: IFFALSE 58892
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
58863: LD_VAR 0 1
58867: PPUSH
58868: CALL_OW 250
58872: PPUSH
58873: LD_VAR 0 1
58877: PPUSH
58878: CALL_OW 251
58882: PPUSH
58883: LD_INT 1
58885: PPUSH
58886: CALL_OW 453
58890: GO 58860
58892: POP
58893: POP
// end ;
58894: LD_VAR 0 2
58898: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
58899: LD_INT 0
58901: PPUSH
58902: PPUSH
58903: PPUSH
58904: PPUSH
58905: PPUSH
58906: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
58907: LD_VAR 0 1
58911: NOT
58912: PUSH
58913: LD_VAR 0 2
58917: NOT
58918: OR
58919: PUSH
58920: LD_VAR 0 1
58924: PPUSH
58925: CALL_OW 314
58929: OR
58930: IFFALSE 58934
// exit ;
58932: GO 59401
// if GetLives ( i ) < 250 then
58934: LD_VAR 0 4
58938: PPUSH
58939: CALL_OW 256
58943: PUSH
58944: LD_INT 250
58946: LESS
58947: IFFALSE 58960
// begin ComAutodestruct ( i ) ;
58949: LD_VAR 0 4
58953: PPUSH
58954: CALL 58797 0 1
// exit ;
58958: GO 59401
// end ; x := GetX ( enemy_unit ) ;
58960: LD_ADDR_VAR 0 7
58964: PUSH
58965: LD_VAR 0 2
58969: PPUSH
58970: CALL_OW 250
58974: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
58975: LD_ADDR_VAR 0 8
58979: PUSH
58980: LD_VAR 0 2
58984: PPUSH
58985: CALL_OW 251
58989: ST_TO_ADDR
// if not x or not y then
58990: LD_VAR 0 7
58994: NOT
58995: PUSH
58996: LD_VAR 0 8
59000: NOT
59001: OR
59002: IFFALSE 59006
// exit ;
59004: GO 59401
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
59006: LD_ADDR_VAR 0 6
59010: PUSH
59011: LD_VAR 0 7
59015: PPUSH
59016: LD_INT 0
59018: PPUSH
59019: LD_INT 4
59021: PPUSH
59022: CALL_OW 272
59026: PUSH
59027: LD_VAR 0 8
59031: PPUSH
59032: LD_INT 0
59034: PPUSH
59035: LD_INT 4
59037: PPUSH
59038: CALL_OW 273
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: PUSH
59047: LD_VAR 0 7
59051: PPUSH
59052: LD_INT 1
59054: PPUSH
59055: LD_INT 4
59057: PPUSH
59058: CALL_OW 272
59062: PUSH
59063: LD_VAR 0 8
59067: PPUSH
59068: LD_INT 1
59070: PPUSH
59071: LD_INT 4
59073: PPUSH
59074: CALL_OW 273
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: LD_VAR 0 7
59087: PPUSH
59088: LD_INT 2
59090: PPUSH
59091: LD_INT 4
59093: PPUSH
59094: CALL_OW 272
59098: PUSH
59099: LD_VAR 0 8
59103: PPUSH
59104: LD_INT 2
59106: PPUSH
59107: LD_INT 4
59109: PPUSH
59110: CALL_OW 273
59114: PUSH
59115: EMPTY
59116: LIST
59117: LIST
59118: PUSH
59119: LD_VAR 0 7
59123: PPUSH
59124: LD_INT 3
59126: PPUSH
59127: LD_INT 4
59129: PPUSH
59130: CALL_OW 272
59134: PUSH
59135: LD_VAR 0 8
59139: PPUSH
59140: LD_INT 3
59142: PPUSH
59143: LD_INT 4
59145: PPUSH
59146: CALL_OW 273
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: PUSH
59155: LD_VAR 0 7
59159: PPUSH
59160: LD_INT 4
59162: PPUSH
59163: LD_INT 4
59165: PPUSH
59166: CALL_OW 272
59170: PUSH
59171: LD_VAR 0 8
59175: PPUSH
59176: LD_INT 4
59178: PPUSH
59179: LD_INT 4
59181: PPUSH
59182: CALL_OW 273
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: PUSH
59191: LD_VAR 0 7
59195: PPUSH
59196: LD_INT 5
59198: PPUSH
59199: LD_INT 4
59201: PPUSH
59202: CALL_OW 272
59206: PUSH
59207: LD_VAR 0 8
59211: PPUSH
59212: LD_INT 5
59214: PPUSH
59215: LD_INT 4
59217: PPUSH
59218: CALL_OW 273
59222: PUSH
59223: EMPTY
59224: LIST
59225: LIST
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: LIST
59231: LIST
59232: LIST
59233: LIST
59234: ST_TO_ADDR
// for i = tmp downto 1 do
59235: LD_ADDR_VAR 0 4
59239: PUSH
59240: DOUBLE
59241: LD_VAR 0 6
59245: INC
59246: ST_TO_ADDR
59247: LD_INT 1
59249: PUSH
59250: FOR_DOWNTO
59251: IFFALSE 59352
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
59253: LD_VAR 0 6
59257: PUSH
59258: LD_VAR 0 4
59262: ARRAY
59263: PUSH
59264: LD_INT 1
59266: ARRAY
59267: PPUSH
59268: LD_VAR 0 6
59272: PUSH
59273: LD_VAR 0 4
59277: ARRAY
59278: PUSH
59279: LD_INT 2
59281: ARRAY
59282: PPUSH
59283: CALL_OW 488
59287: NOT
59288: PUSH
59289: LD_VAR 0 6
59293: PUSH
59294: LD_VAR 0 4
59298: ARRAY
59299: PUSH
59300: LD_INT 1
59302: ARRAY
59303: PPUSH
59304: LD_VAR 0 6
59308: PUSH
59309: LD_VAR 0 4
59313: ARRAY
59314: PUSH
59315: LD_INT 2
59317: ARRAY
59318: PPUSH
59319: CALL_OW 428
59323: PUSH
59324: LD_INT 0
59326: NONEQUAL
59327: OR
59328: IFFALSE 59350
// tmp := Delete ( tmp , i ) ;
59330: LD_ADDR_VAR 0 6
59334: PUSH
59335: LD_VAR 0 6
59339: PPUSH
59340: LD_VAR 0 4
59344: PPUSH
59345: CALL_OW 3
59349: ST_TO_ADDR
59350: GO 59250
59352: POP
59353: POP
// j := GetClosestHex ( unit , tmp ) ;
59354: LD_ADDR_VAR 0 5
59358: PUSH
59359: LD_VAR 0 1
59363: PPUSH
59364: LD_VAR 0 6
59368: PPUSH
59369: CALL 58645 0 2
59373: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
59374: LD_VAR 0 1
59378: PPUSH
59379: LD_VAR 0 5
59383: PUSH
59384: LD_INT 1
59386: ARRAY
59387: PPUSH
59388: LD_VAR 0 5
59392: PUSH
59393: LD_INT 2
59395: ARRAY
59396: PPUSH
59397: CALL_OW 111
// end ;
59401: LD_VAR 0 3
59405: RET
// export function PrepareApemanSoldier ( ) ; begin
59406: LD_INT 0
59408: PPUSH
// uc_nation := 0 ;
59409: LD_ADDR_OWVAR 21
59413: PUSH
59414: LD_INT 0
59416: ST_TO_ADDR
// hc_sex := sex_male ;
59417: LD_ADDR_OWVAR 27
59421: PUSH
59422: LD_INT 1
59424: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
59425: LD_ADDR_OWVAR 28
59429: PUSH
59430: LD_INT 15
59432: ST_TO_ADDR
// hc_gallery :=  ;
59433: LD_ADDR_OWVAR 33
59437: PUSH
59438: LD_STRING 
59440: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59441: LD_ADDR_OWVAR 31
59445: PUSH
59446: LD_INT 0
59448: PPUSH
59449: LD_INT 3
59451: PPUSH
59452: CALL_OW 12
59456: PUSH
59457: LD_INT 0
59459: PPUSH
59460: LD_INT 3
59462: PPUSH
59463: CALL_OW 12
59467: PUSH
59468: LD_INT 0
59470: PUSH
59471: LD_INT 0
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: LIST
59478: LIST
59479: ST_TO_ADDR
// end ;
59480: LD_VAR 0 1
59484: RET
// export function PrepareApemanEngineer ( ) ; begin
59485: LD_INT 0
59487: PPUSH
// uc_nation := 0 ;
59488: LD_ADDR_OWVAR 21
59492: PUSH
59493: LD_INT 0
59495: ST_TO_ADDR
// hc_sex := sex_male ;
59496: LD_ADDR_OWVAR 27
59500: PUSH
59501: LD_INT 1
59503: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
59504: LD_ADDR_OWVAR 28
59508: PUSH
59509: LD_INT 16
59511: ST_TO_ADDR
// hc_gallery :=  ;
59512: LD_ADDR_OWVAR 33
59516: PUSH
59517: LD_STRING 
59519: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59520: LD_ADDR_OWVAR 31
59524: PUSH
59525: LD_INT 0
59527: PPUSH
59528: LD_INT 3
59530: PPUSH
59531: CALL_OW 12
59535: PUSH
59536: LD_INT 0
59538: PPUSH
59539: LD_INT 3
59541: PPUSH
59542: CALL_OW 12
59546: PUSH
59547: LD_INT 0
59549: PUSH
59550: LD_INT 0
59552: PUSH
59553: EMPTY
59554: LIST
59555: LIST
59556: LIST
59557: LIST
59558: ST_TO_ADDR
// end ;
59559: LD_VAR 0 1
59563: RET
// export function PrepareApeman ( agressivity ) ; begin
59564: LD_INT 0
59566: PPUSH
// uc_side := 0 ;
59567: LD_ADDR_OWVAR 20
59571: PUSH
59572: LD_INT 0
59574: ST_TO_ADDR
// uc_nation := 0 ;
59575: LD_ADDR_OWVAR 21
59579: PUSH
59580: LD_INT 0
59582: ST_TO_ADDR
// hc_sex := sex_male ;
59583: LD_ADDR_OWVAR 27
59587: PUSH
59588: LD_INT 1
59590: ST_TO_ADDR
// hc_class := class_apeman ;
59591: LD_ADDR_OWVAR 28
59595: PUSH
59596: LD_INT 12
59598: ST_TO_ADDR
// hc_gallery :=  ;
59599: LD_ADDR_OWVAR 33
59603: PUSH
59604: LD_STRING 
59606: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
59607: LD_ADDR_OWVAR 35
59611: PUSH
59612: LD_VAR 0 1
59616: NEG
59617: PPUSH
59618: LD_VAR 0 1
59622: PPUSH
59623: CALL_OW 12
59627: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59628: LD_ADDR_OWVAR 31
59632: PUSH
59633: LD_INT 0
59635: PPUSH
59636: LD_INT 3
59638: PPUSH
59639: CALL_OW 12
59643: PUSH
59644: LD_INT 0
59646: PPUSH
59647: LD_INT 3
59649: PPUSH
59650: CALL_OW 12
59654: PUSH
59655: LD_INT 0
59657: PUSH
59658: LD_INT 0
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: LIST
59665: LIST
59666: ST_TO_ADDR
// end ;
59667: LD_VAR 0 2
59671: RET
// export function PrepareTiger ( agressivity ) ; begin
59672: LD_INT 0
59674: PPUSH
// uc_side := 0 ;
59675: LD_ADDR_OWVAR 20
59679: PUSH
59680: LD_INT 0
59682: ST_TO_ADDR
// uc_nation := 0 ;
59683: LD_ADDR_OWVAR 21
59687: PUSH
59688: LD_INT 0
59690: ST_TO_ADDR
// hc_class := class_tiger ;
59691: LD_ADDR_OWVAR 28
59695: PUSH
59696: LD_INT 14
59698: ST_TO_ADDR
// hc_gallery :=  ;
59699: LD_ADDR_OWVAR 33
59703: PUSH
59704: LD_STRING 
59706: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
59707: LD_ADDR_OWVAR 35
59711: PUSH
59712: LD_VAR 0 1
59716: NEG
59717: PPUSH
59718: LD_VAR 0 1
59722: PPUSH
59723: CALL_OW 12
59727: ST_TO_ADDR
// end ;
59728: LD_VAR 0 2
59732: RET
// export function PrepareEnchidna ( ) ; begin
59733: LD_INT 0
59735: PPUSH
// uc_side := 0 ;
59736: LD_ADDR_OWVAR 20
59740: PUSH
59741: LD_INT 0
59743: ST_TO_ADDR
// uc_nation := 0 ;
59744: LD_ADDR_OWVAR 21
59748: PUSH
59749: LD_INT 0
59751: ST_TO_ADDR
// hc_class := class_baggie ;
59752: LD_ADDR_OWVAR 28
59756: PUSH
59757: LD_INT 13
59759: ST_TO_ADDR
// hc_gallery :=  ;
59760: LD_ADDR_OWVAR 33
59764: PUSH
59765: LD_STRING 
59767: ST_TO_ADDR
// end ;
59768: LD_VAR 0 1
59772: RET
// export function PrepareFrog ( ) ; begin
59773: LD_INT 0
59775: PPUSH
// uc_side := 0 ;
59776: LD_ADDR_OWVAR 20
59780: PUSH
59781: LD_INT 0
59783: ST_TO_ADDR
// uc_nation := 0 ;
59784: LD_ADDR_OWVAR 21
59788: PUSH
59789: LD_INT 0
59791: ST_TO_ADDR
// hc_class := class_frog ;
59792: LD_ADDR_OWVAR 28
59796: PUSH
59797: LD_INT 19
59799: ST_TO_ADDR
// hc_gallery :=  ;
59800: LD_ADDR_OWVAR 33
59804: PUSH
59805: LD_STRING 
59807: ST_TO_ADDR
// end ;
59808: LD_VAR 0 1
59812: RET
// export function PrepareFish ( ) ; begin
59813: LD_INT 0
59815: PPUSH
// uc_side := 0 ;
59816: LD_ADDR_OWVAR 20
59820: PUSH
59821: LD_INT 0
59823: ST_TO_ADDR
// uc_nation := 0 ;
59824: LD_ADDR_OWVAR 21
59828: PUSH
59829: LD_INT 0
59831: ST_TO_ADDR
// hc_class := class_fish ;
59832: LD_ADDR_OWVAR 28
59836: PUSH
59837: LD_INT 20
59839: ST_TO_ADDR
// hc_gallery :=  ;
59840: LD_ADDR_OWVAR 33
59844: PUSH
59845: LD_STRING 
59847: ST_TO_ADDR
// end ;
59848: LD_VAR 0 1
59852: RET
// export function PrepareBird ( ) ; begin
59853: LD_INT 0
59855: PPUSH
// uc_side := 0 ;
59856: LD_ADDR_OWVAR 20
59860: PUSH
59861: LD_INT 0
59863: ST_TO_ADDR
// uc_nation := 0 ;
59864: LD_ADDR_OWVAR 21
59868: PUSH
59869: LD_INT 0
59871: ST_TO_ADDR
// hc_class := class_phororhacos ;
59872: LD_ADDR_OWVAR 28
59876: PUSH
59877: LD_INT 18
59879: ST_TO_ADDR
// hc_gallery :=  ;
59880: LD_ADDR_OWVAR 33
59884: PUSH
59885: LD_STRING 
59887: ST_TO_ADDR
// end ;
59888: LD_VAR 0 1
59892: RET
// export function PrepareHorse ( ) ; begin
59893: LD_INT 0
59895: PPUSH
// uc_side := 0 ;
59896: LD_ADDR_OWVAR 20
59900: PUSH
59901: LD_INT 0
59903: ST_TO_ADDR
// uc_nation := 0 ;
59904: LD_ADDR_OWVAR 21
59908: PUSH
59909: LD_INT 0
59911: ST_TO_ADDR
// hc_class := class_horse ;
59912: LD_ADDR_OWVAR 28
59916: PUSH
59917: LD_INT 21
59919: ST_TO_ADDR
// hc_gallery :=  ;
59920: LD_ADDR_OWVAR 33
59924: PUSH
59925: LD_STRING 
59927: ST_TO_ADDR
// end ;
59928: LD_VAR 0 1
59932: RET
// export function PrepareMastodont ( ) ; begin
59933: LD_INT 0
59935: PPUSH
// uc_side := 0 ;
59936: LD_ADDR_OWVAR 20
59940: PUSH
59941: LD_INT 0
59943: ST_TO_ADDR
// uc_nation := 0 ;
59944: LD_ADDR_OWVAR 21
59948: PUSH
59949: LD_INT 0
59951: ST_TO_ADDR
// vc_chassis := class_mastodont ;
59952: LD_ADDR_OWVAR 37
59956: PUSH
59957: LD_INT 31
59959: ST_TO_ADDR
// vc_control := control_rider ;
59960: LD_ADDR_OWVAR 38
59964: PUSH
59965: LD_INT 4
59967: ST_TO_ADDR
// end ;
59968: LD_VAR 0 1
59972: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
59973: LD_INT 0
59975: PPUSH
59976: PPUSH
59977: PPUSH
// uc_side = 0 ;
59978: LD_ADDR_OWVAR 20
59982: PUSH
59983: LD_INT 0
59985: ST_TO_ADDR
// uc_nation = 0 ;
59986: LD_ADDR_OWVAR 21
59990: PUSH
59991: LD_INT 0
59993: ST_TO_ADDR
// InitHc_All ( ) ;
59994: CALL_OW 584
// InitVc ;
59998: CALL_OW 20
// if mastodonts then
60002: LD_VAR 0 6
60006: IFFALSE 60073
// for i = 1 to mastodonts do
60008: LD_ADDR_VAR 0 11
60012: PUSH
60013: DOUBLE
60014: LD_INT 1
60016: DEC
60017: ST_TO_ADDR
60018: LD_VAR 0 6
60022: PUSH
60023: FOR_TO
60024: IFFALSE 60071
// begin vc_chassis := 31 ;
60026: LD_ADDR_OWVAR 37
60030: PUSH
60031: LD_INT 31
60033: ST_TO_ADDR
// vc_control := control_rider ;
60034: LD_ADDR_OWVAR 38
60038: PUSH
60039: LD_INT 4
60041: ST_TO_ADDR
// animal := CreateVehicle ;
60042: LD_ADDR_VAR 0 12
60046: PUSH
60047: CALL_OW 45
60051: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60052: LD_VAR 0 12
60056: PPUSH
60057: LD_VAR 0 8
60061: PPUSH
60062: LD_INT 0
60064: PPUSH
60065: CALL 62201 0 3
// end ;
60069: GO 60023
60071: POP
60072: POP
// if horses then
60073: LD_VAR 0 5
60077: IFFALSE 60144
// for i = 1 to horses do
60079: LD_ADDR_VAR 0 11
60083: PUSH
60084: DOUBLE
60085: LD_INT 1
60087: DEC
60088: ST_TO_ADDR
60089: LD_VAR 0 5
60093: PUSH
60094: FOR_TO
60095: IFFALSE 60142
// begin hc_class := 21 ;
60097: LD_ADDR_OWVAR 28
60101: PUSH
60102: LD_INT 21
60104: ST_TO_ADDR
// hc_gallery :=  ;
60105: LD_ADDR_OWVAR 33
60109: PUSH
60110: LD_STRING 
60112: ST_TO_ADDR
// animal := CreateHuman ;
60113: LD_ADDR_VAR 0 12
60117: PUSH
60118: CALL_OW 44
60122: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60123: LD_VAR 0 12
60127: PPUSH
60128: LD_VAR 0 8
60132: PPUSH
60133: LD_INT 0
60135: PPUSH
60136: CALL 62201 0 3
// end ;
60140: GO 60094
60142: POP
60143: POP
// if birds then
60144: LD_VAR 0 1
60148: IFFALSE 60215
// for i = 1 to birds do
60150: LD_ADDR_VAR 0 11
60154: PUSH
60155: DOUBLE
60156: LD_INT 1
60158: DEC
60159: ST_TO_ADDR
60160: LD_VAR 0 1
60164: PUSH
60165: FOR_TO
60166: IFFALSE 60213
// begin hc_class := 18 ;
60168: LD_ADDR_OWVAR 28
60172: PUSH
60173: LD_INT 18
60175: ST_TO_ADDR
// hc_gallery =  ;
60176: LD_ADDR_OWVAR 33
60180: PUSH
60181: LD_STRING 
60183: ST_TO_ADDR
// animal := CreateHuman ;
60184: LD_ADDR_VAR 0 12
60188: PUSH
60189: CALL_OW 44
60193: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60194: LD_VAR 0 12
60198: PPUSH
60199: LD_VAR 0 8
60203: PPUSH
60204: LD_INT 0
60206: PPUSH
60207: CALL 62201 0 3
// end ;
60211: GO 60165
60213: POP
60214: POP
// if tigers then
60215: LD_VAR 0 2
60219: IFFALSE 60303
// for i = 1 to tigers do
60221: LD_ADDR_VAR 0 11
60225: PUSH
60226: DOUBLE
60227: LD_INT 1
60229: DEC
60230: ST_TO_ADDR
60231: LD_VAR 0 2
60235: PUSH
60236: FOR_TO
60237: IFFALSE 60301
// begin hc_class = class_tiger ;
60239: LD_ADDR_OWVAR 28
60243: PUSH
60244: LD_INT 14
60246: ST_TO_ADDR
// hc_gallery =  ;
60247: LD_ADDR_OWVAR 33
60251: PUSH
60252: LD_STRING 
60254: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
60255: LD_ADDR_OWVAR 35
60259: PUSH
60260: LD_INT 7
60262: NEG
60263: PPUSH
60264: LD_INT 7
60266: PPUSH
60267: CALL_OW 12
60271: ST_TO_ADDR
// animal := CreateHuman ;
60272: LD_ADDR_VAR 0 12
60276: PUSH
60277: CALL_OW 44
60281: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60282: LD_VAR 0 12
60286: PPUSH
60287: LD_VAR 0 8
60291: PPUSH
60292: LD_INT 0
60294: PPUSH
60295: CALL 62201 0 3
// end ;
60299: GO 60236
60301: POP
60302: POP
// if apemans then
60303: LD_VAR 0 3
60307: IFFALSE 60430
// for i = 1 to apemans do
60309: LD_ADDR_VAR 0 11
60313: PUSH
60314: DOUBLE
60315: LD_INT 1
60317: DEC
60318: ST_TO_ADDR
60319: LD_VAR 0 3
60323: PUSH
60324: FOR_TO
60325: IFFALSE 60428
// begin hc_class = class_apeman ;
60327: LD_ADDR_OWVAR 28
60331: PUSH
60332: LD_INT 12
60334: ST_TO_ADDR
// hc_gallery =  ;
60335: LD_ADDR_OWVAR 33
60339: PUSH
60340: LD_STRING 
60342: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
60343: LD_ADDR_OWVAR 35
60347: PUSH
60348: LD_INT 2
60350: NEG
60351: PPUSH
60352: LD_INT 2
60354: PPUSH
60355: CALL_OW 12
60359: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
60360: LD_ADDR_OWVAR 31
60364: PUSH
60365: LD_INT 1
60367: PPUSH
60368: LD_INT 3
60370: PPUSH
60371: CALL_OW 12
60375: PUSH
60376: LD_INT 1
60378: PPUSH
60379: LD_INT 3
60381: PPUSH
60382: CALL_OW 12
60386: PUSH
60387: LD_INT 0
60389: PUSH
60390: LD_INT 0
60392: PUSH
60393: EMPTY
60394: LIST
60395: LIST
60396: LIST
60397: LIST
60398: ST_TO_ADDR
// animal := CreateHuman ;
60399: LD_ADDR_VAR 0 12
60403: PUSH
60404: CALL_OW 44
60408: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60409: LD_VAR 0 12
60413: PPUSH
60414: LD_VAR 0 8
60418: PPUSH
60419: LD_INT 0
60421: PPUSH
60422: CALL 62201 0 3
// end ;
60426: GO 60324
60428: POP
60429: POP
// if enchidnas then
60430: LD_VAR 0 4
60434: IFFALSE 60501
// for i = 1 to enchidnas do
60436: LD_ADDR_VAR 0 11
60440: PUSH
60441: DOUBLE
60442: LD_INT 1
60444: DEC
60445: ST_TO_ADDR
60446: LD_VAR 0 4
60450: PUSH
60451: FOR_TO
60452: IFFALSE 60499
// begin hc_class = 13 ;
60454: LD_ADDR_OWVAR 28
60458: PUSH
60459: LD_INT 13
60461: ST_TO_ADDR
// hc_gallery =  ;
60462: LD_ADDR_OWVAR 33
60466: PUSH
60467: LD_STRING 
60469: ST_TO_ADDR
// animal := CreateHuman ;
60470: LD_ADDR_VAR 0 12
60474: PUSH
60475: CALL_OW 44
60479: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60480: LD_VAR 0 12
60484: PPUSH
60485: LD_VAR 0 8
60489: PPUSH
60490: LD_INT 0
60492: PPUSH
60493: CALL 62201 0 3
// end ;
60497: GO 60451
60499: POP
60500: POP
// if fishes then
60501: LD_VAR 0 7
60505: IFFALSE 60572
// for i = 1 to fishes do
60507: LD_ADDR_VAR 0 11
60511: PUSH
60512: DOUBLE
60513: LD_INT 1
60515: DEC
60516: ST_TO_ADDR
60517: LD_VAR 0 7
60521: PUSH
60522: FOR_TO
60523: IFFALSE 60570
// begin hc_class = 20 ;
60525: LD_ADDR_OWVAR 28
60529: PUSH
60530: LD_INT 20
60532: ST_TO_ADDR
// hc_gallery =  ;
60533: LD_ADDR_OWVAR 33
60537: PUSH
60538: LD_STRING 
60540: ST_TO_ADDR
// animal := CreateHuman ;
60541: LD_ADDR_VAR 0 12
60545: PUSH
60546: CALL_OW 44
60550: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
60551: LD_VAR 0 12
60555: PPUSH
60556: LD_VAR 0 9
60560: PPUSH
60561: LD_INT 0
60563: PPUSH
60564: CALL 62201 0 3
// end ;
60568: GO 60522
60570: POP
60571: POP
// end ;
60572: LD_VAR 0 10
60576: RET
// export function WantHeal ( sci , unit ) ; begin
60577: LD_INT 0
60579: PPUSH
// if GetTaskList ( sci ) > 0 then
60580: LD_VAR 0 1
60584: PPUSH
60585: CALL_OW 437
60589: PUSH
60590: LD_INT 0
60592: GREATER
60593: IFFALSE 60663
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
60595: LD_VAR 0 1
60599: PPUSH
60600: CALL_OW 437
60604: PUSH
60605: LD_INT 1
60607: ARRAY
60608: PUSH
60609: LD_INT 1
60611: ARRAY
60612: PUSH
60613: LD_STRING l
60615: EQUAL
60616: PUSH
60617: LD_VAR 0 1
60621: PPUSH
60622: CALL_OW 437
60626: PUSH
60627: LD_INT 1
60629: ARRAY
60630: PUSH
60631: LD_INT 4
60633: ARRAY
60634: PUSH
60635: LD_VAR 0 2
60639: EQUAL
60640: AND
60641: IFFALSE 60653
// result := true else
60643: LD_ADDR_VAR 0 3
60647: PUSH
60648: LD_INT 1
60650: ST_TO_ADDR
60651: GO 60661
// result := false ;
60653: LD_ADDR_VAR 0 3
60657: PUSH
60658: LD_INT 0
60660: ST_TO_ADDR
// end else
60661: GO 60671
// result := false ;
60663: LD_ADDR_VAR 0 3
60667: PUSH
60668: LD_INT 0
60670: ST_TO_ADDR
// end ;
60671: LD_VAR 0 3
60675: RET
// export function HealTarget ( sci ) ; begin
60676: LD_INT 0
60678: PPUSH
// if not sci then
60679: LD_VAR 0 1
60683: NOT
60684: IFFALSE 60688
// exit ;
60686: GO 60753
// result := 0 ;
60688: LD_ADDR_VAR 0 2
60692: PUSH
60693: LD_INT 0
60695: ST_TO_ADDR
// if GetTaskList ( sci ) then
60696: LD_VAR 0 1
60700: PPUSH
60701: CALL_OW 437
60705: IFFALSE 60753
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
60707: LD_VAR 0 1
60711: PPUSH
60712: CALL_OW 437
60716: PUSH
60717: LD_INT 1
60719: ARRAY
60720: PUSH
60721: LD_INT 1
60723: ARRAY
60724: PUSH
60725: LD_STRING l
60727: EQUAL
60728: IFFALSE 60753
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
60730: LD_ADDR_VAR 0 2
60734: PUSH
60735: LD_VAR 0 1
60739: PPUSH
60740: CALL_OW 437
60744: PUSH
60745: LD_INT 1
60747: ARRAY
60748: PUSH
60749: LD_INT 4
60751: ARRAY
60752: ST_TO_ADDR
// end ;
60753: LD_VAR 0 2
60757: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
60758: LD_INT 0
60760: PPUSH
60761: PPUSH
60762: PPUSH
60763: PPUSH
// if not base_units then
60764: LD_VAR 0 1
60768: NOT
60769: IFFALSE 60773
// exit ;
60771: GO 60860
// result := false ;
60773: LD_ADDR_VAR 0 2
60777: PUSH
60778: LD_INT 0
60780: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
60781: LD_ADDR_VAR 0 5
60785: PUSH
60786: LD_VAR 0 1
60790: PPUSH
60791: LD_INT 21
60793: PUSH
60794: LD_INT 3
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: PPUSH
60801: CALL_OW 72
60805: ST_TO_ADDR
// if not tmp then
60806: LD_VAR 0 5
60810: NOT
60811: IFFALSE 60815
// exit ;
60813: GO 60860
// for i in tmp do
60815: LD_ADDR_VAR 0 3
60819: PUSH
60820: LD_VAR 0 5
60824: PUSH
60825: FOR_IN
60826: IFFALSE 60858
// begin result := EnemyInRange ( i , 22 ) ;
60828: LD_ADDR_VAR 0 2
60832: PUSH
60833: LD_VAR 0 3
60837: PPUSH
60838: LD_INT 22
60840: PPUSH
60841: CALL 58447 0 2
60845: ST_TO_ADDR
// if result then
60846: LD_VAR 0 2
60850: IFFALSE 60856
// exit ;
60852: POP
60853: POP
60854: GO 60860
// end ;
60856: GO 60825
60858: POP
60859: POP
// end ;
60860: LD_VAR 0 2
60864: RET
// export function FilterByTag ( units , tag ) ; begin
60865: LD_INT 0
60867: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
60868: LD_ADDR_VAR 0 3
60872: PUSH
60873: LD_VAR 0 1
60877: PPUSH
60878: LD_INT 120
60880: PUSH
60881: LD_VAR 0 2
60885: PUSH
60886: EMPTY
60887: LIST
60888: LIST
60889: PPUSH
60890: CALL_OW 72
60894: ST_TO_ADDR
// end ;
60895: LD_VAR 0 3
60899: RET
// export function IsDriver ( un ) ; begin
60900: LD_INT 0
60902: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
60903: LD_ADDR_VAR 0 2
60907: PUSH
60908: LD_VAR 0 1
60912: PUSH
60913: LD_INT 55
60915: PUSH
60916: EMPTY
60917: LIST
60918: PPUSH
60919: CALL_OW 69
60923: IN
60924: ST_TO_ADDR
// end ;
60925: LD_VAR 0 2
60929: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
60930: LD_INT 0
60932: PPUSH
60933: PPUSH
// list := [ ] ;
60934: LD_ADDR_VAR 0 5
60938: PUSH
60939: EMPTY
60940: ST_TO_ADDR
// case d of 0 :
60941: LD_VAR 0 3
60945: PUSH
60946: LD_INT 0
60948: DOUBLE
60949: EQUAL
60950: IFTRUE 60954
60952: GO 61087
60954: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
60955: LD_ADDR_VAR 0 5
60959: PUSH
60960: LD_VAR 0 1
60964: PUSH
60965: LD_INT 4
60967: MINUS
60968: PUSH
60969: LD_VAR 0 2
60973: PUSH
60974: LD_INT 4
60976: MINUS
60977: PUSH
60978: LD_INT 2
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: LIST
60985: PUSH
60986: LD_VAR 0 1
60990: PUSH
60991: LD_INT 3
60993: MINUS
60994: PUSH
60995: LD_VAR 0 2
60999: PUSH
61000: LD_INT 1
61002: PUSH
61003: EMPTY
61004: LIST
61005: LIST
61006: LIST
61007: PUSH
61008: LD_VAR 0 1
61012: PUSH
61013: LD_INT 4
61015: PLUS
61016: PUSH
61017: LD_VAR 0 2
61021: PUSH
61022: LD_INT 4
61024: PUSH
61025: EMPTY
61026: LIST
61027: LIST
61028: LIST
61029: PUSH
61030: LD_VAR 0 1
61034: PUSH
61035: LD_INT 3
61037: PLUS
61038: PUSH
61039: LD_VAR 0 2
61043: PUSH
61044: LD_INT 3
61046: PLUS
61047: PUSH
61048: LD_INT 5
61050: PUSH
61051: EMPTY
61052: LIST
61053: LIST
61054: LIST
61055: PUSH
61056: LD_VAR 0 1
61060: PUSH
61061: LD_VAR 0 2
61065: PUSH
61066: LD_INT 4
61068: PLUS
61069: PUSH
61070: LD_INT 0
61072: PUSH
61073: EMPTY
61074: LIST
61075: LIST
61076: LIST
61077: PUSH
61078: EMPTY
61079: LIST
61080: LIST
61081: LIST
61082: LIST
61083: LIST
61084: ST_TO_ADDR
// end ; 1 :
61085: GO 61785
61087: LD_INT 1
61089: DOUBLE
61090: EQUAL
61091: IFTRUE 61095
61093: GO 61228
61095: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
61096: LD_ADDR_VAR 0 5
61100: PUSH
61101: LD_VAR 0 1
61105: PUSH
61106: LD_VAR 0 2
61110: PUSH
61111: LD_INT 4
61113: MINUS
61114: PUSH
61115: LD_INT 3
61117: PUSH
61118: EMPTY
61119: LIST
61120: LIST
61121: LIST
61122: PUSH
61123: LD_VAR 0 1
61127: PUSH
61128: LD_INT 3
61130: MINUS
61131: PUSH
61132: LD_VAR 0 2
61136: PUSH
61137: LD_INT 3
61139: MINUS
61140: PUSH
61141: LD_INT 2
61143: PUSH
61144: EMPTY
61145: LIST
61146: LIST
61147: LIST
61148: PUSH
61149: LD_VAR 0 1
61153: PUSH
61154: LD_INT 4
61156: MINUS
61157: PUSH
61158: LD_VAR 0 2
61162: PUSH
61163: LD_INT 1
61165: PUSH
61166: EMPTY
61167: LIST
61168: LIST
61169: LIST
61170: PUSH
61171: LD_VAR 0 1
61175: PUSH
61176: LD_VAR 0 2
61180: PUSH
61181: LD_INT 3
61183: PLUS
61184: PUSH
61185: LD_INT 0
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: LIST
61192: PUSH
61193: LD_VAR 0 1
61197: PUSH
61198: LD_INT 4
61200: PLUS
61201: PUSH
61202: LD_VAR 0 2
61206: PUSH
61207: LD_INT 4
61209: PLUS
61210: PUSH
61211: LD_INT 5
61213: PUSH
61214: EMPTY
61215: LIST
61216: LIST
61217: LIST
61218: PUSH
61219: EMPTY
61220: LIST
61221: LIST
61222: LIST
61223: LIST
61224: LIST
61225: ST_TO_ADDR
// end ; 2 :
61226: GO 61785
61228: LD_INT 2
61230: DOUBLE
61231: EQUAL
61232: IFTRUE 61236
61234: GO 61365
61236: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
61237: LD_ADDR_VAR 0 5
61241: PUSH
61242: LD_VAR 0 1
61246: PUSH
61247: LD_VAR 0 2
61251: PUSH
61252: LD_INT 3
61254: MINUS
61255: PUSH
61256: LD_INT 3
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: LIST
61263: PUSH
61264: LD_VAR 0 1
61268: PUSH
61269: LD_INT 4
61271: PLUS
61272: PUSH
61273: LD_VAR 0 2
61277: PUSH
61278: LD_INT 4
61280: PUSH
61281: EMPTY
61282: LIST
61283: LIST
61284: LIST
61285: PUSH
61286: LD_VAR 0 1
61290: PUSH
61291: LD_VAR 0 2
61295: PUSH
61296: LD_INT 4
61298: PLUS
61299: PUSH
61300: LD_INT 0
61302: PUSH
61303: EMPTY
61304: LIST
61305: LIST
61306: LIST
61307: PUSH
61308: LD_VAR 0 1
61312: PUSH
61313: LD_INT 3
61315: MINUS
61316: PUSH
61317: LD_VAR 0 2
61321: PUSH
61322: LD_INT 1
61324: PUSH
61325: EMPTY
61326: LIST
61327: LIST
61328: LIST
61329: PUSH
61330: LD_VAR 0 1
61334: PUSH
61335: LD_INT 4
61337: MINUS
61338: PUSH
61339: LD_VAR 0 2
61343: PUSH
61344: LD_INT 4
61346: MINUS
61347: PUSH
61348: LD_INT 2
61350: PUSH
61351: EMPTY
61352: LIST
61353: LIST
61354: LIST
61355: PUSH
61356: EMPTY
61357: LIST
61358: LIST
61359: LIST
61360: LIST
61361: LIST
61362: ST_TO_ADDR
// end ; 3 :
61363: GO 61785
61365: LD_INT 3
61367: DOUBLE
61368: EQUAL
61369: IFTRUE 61373
61371: GO 61506
61373: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
61374: LD_ADDR_VAR 0 5
61378: PUSH
61379: LD_VAR 0 1
61383: PUSH
61384: LD_INT 3
61386: PLUS
61387: PUSH
61388: LD_VAR 0 2
61392: PUSH
61393: LD_INT 4
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: LIST
61400: PUSH
61401: LD_VAR 0 1
61405: PUSH
61406: LD_INT 4
61408: PLUS
61409: PUSH
61410: LD_VAR 0 2
61414: PUSH
61415: LD_INT 4
61417: PLUS
61418: PUSH
61419: LD_INT 5
61421: PUSH
61422: EMPTY
61423: LIST
61424: LIST
61425: LIST
61426: PUSH
61427: LD_VAR 0 1
61431: PUSH
61432: LD_INT 4
61434: MINUS
61435: PUSH
61436: LD_VAR 0 2
61440: PUSH
61441: LD_INT 1
61443: PUSH
61444: EMPTY
61445: LIST
61446: LIST
61447: LIST
61448: PUSH
61449: LD_VAR 0 1
61453: PUSH
61454: LD_VAR 0 2
61458: PUSH
61459: LD_INT 4
61461: MINUS
61462: PUSH
61463: LD_INT 3
61465: PUSH
61466: EMPTY
61467: LIST
61468: LIST
61469: LIST
61470: PUSH
61471: LD_VAR 0 1
61475: PUSH
61476: LD_INT 3
61478: MINUS
61479: PUSH
61480: LD_VAR 0 2
61484: PUSH
61485: LD_INT 3
61487: MINUS
61488: PUSH
61489: LD_INT 2
61491: PUSH
61492: EMPTY
61493: LIST
61494: LIST
61495: LIST
61496: PUSH
61497: EMPTY
61498: LIST
61499: LIST
61500: LIST
61501: LIST
61502: LIST
61503: ST_TO_ADDR
// end ; 4 :
61504: GO 61785
61506: LD_INT 4
61508: DOUBLE
61509: EQUAL
61510: IFTRUE 61514
61512: GO 61647
61514: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
61515: LD_ADDR_VAR 0 5
61519: PUSH
61520: LD_VAR 0 1
61524: PUSH
61525: LD_VAR 0 2
61529: PUSH
61530: LD_INT 4
61532: PLUS
61533: PUSH
61534: LD_INT 0
61536: PUSH
61537: EMPTY
61538: LIST
61539: LIST
61540: LIST
61541: PUSH
61542: LD_VAR 0 1
61546: PUSH
61547: LD_INT 3
61549: PLUS
61550: PUSH
61551: LD_VAR 0 2
61555: PUSH
61556: LD_INT 3
61558: PLUS
61559: PUSH
61560: LD_INT 5
61562: PUSH
61563: EMPTY
61564: LIST
61565: LIST
61566: LIST
61567: PUSH
61568: LD_VAR 0 1
61572: PUSH
61573: LD_INT 4
61575: PLUS
61576: PUSH
61577: LD_VAR 0 2
61581: PUSH
61582: LD_INT 4
61584: PUSH
61585: EMPTY
61586: LIST
61587: LIST
61588: LIST
61589: PUSH
61590: LD_VAR 0 1
61594: PUSH
61595: LD_VAR 0 2
61599: PUSH
61600: LD_INT 3
61602: MINUS
61603: PUSH
61604: LD_INT 3
61606: PUSH
61607: EMPTY
61608: LIST
61609: LIST
61610: LIST
61611: PUSH
61612: LD_VAR 0 1
61616: PUSH
61617: LD_INT 4
61619: MINUS
61620: PUSH
61621: LD_VAR 0 2
61625: PUSH
61626: LD_INT 4
61628: MINUS
61629: PUSH
61630: LD_INT 2
61632: PUSH
61633: EMPTY
61634: LIST
61635: LIST
61636: LIST
61637: PUSH
61638: EMPTY
61639: LIST
61640: LIST
61641: LIST
61642: LIST
61643: LIST
61644: ST_TO_ADDR
// end ; 5 :
61645: GO 61785
61647: LD_INT 5
61649: DOUBLE
61650: EQUAL
61651: IFTRUE 61655
61653: GO 61784
61655: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
61656: LD_ADDR_VAR 0 5
61660: PUSH
61661: LD_VAR 0 1
61665: PUSH
61666: LD_INT 4
61668: MINUS
61669: PUSH
61670: LD_VAR 0 2
61674: PUSH
61675: LD_INT 1
61677: PUSH
61678: EMPTY
61679: LIST
61680: LIST
61681: LIST
61682: PUSH
61683: LD_VAR 0 1
61687: PUSH
61688: LD_VAR 0 2
61692: PUSH
61693: LD_INT 4
61695: MINUS
61696: PUSH
61697: LD_INT 3
61699: PUSH
61700: EMPTY
61701: LIST
61702: LIST
61703: LIST
61704: PUSH
61705: LD_VAR 0 1
61709: PUSH
61710: LD_INT 4
61712: PLUS
61713: PUSH
61714: LD_VAR 0 2
61718: PUSH
61719: LD_INT 4
61721: PLUS
61722: PUSH
61723: LD_INT 5
61725: PUSH
61726: EMPTY
61727: LIST
61728: LIST
61729: LIST
61730: PUSH
61731: LD_VAR 0 1
61735: PUSH
61736: LD_INT 3
61738: PLUS
61739: PUSH
61740: LD_VAR 0 2
61744: PUSH
61745: LD_INT 4
61747: PUSH
61748: EMPTY
61749: LIST
61750: LIST
61751: LIST
61752: PUSH
61753: LD_VAR 0 1
61757: PUSH
61758: LD_VAR 0 2
61762: PUSH
61763: LD_INT 3
61765: PLUS
61766: PUSH
61767: LD_INT 0
61769: PUSH
61770: EMPTY
61771: LIST
61772: LIST
61773: LIST
61774: PUSH
61775: EMPTY
61776: LIST
61777: LIST
61778: LIST
61779: LIST
61780: LIST
61781: ST_TO_ADDR
// end ; end ;
61782: GO 61785
61784: POP
// result := list ;
61785: LD_ADDR_VAR 0 4
61789: PUSH
61790: LD_VAR 0 5
61794: ST_TO_ADDR
// end ;
61795: LD_VAR 0 4
61799: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
61800: LD_INT 0
61802: PPUSH
61803: PPUSH
61804: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
61805: LD_VAR 0 1
61809: NOT
61810: PUSH
61811: LD_VAR 0 2
61815: PUSH
61816: LD_INT 1
61818: PUSH
61819: LD_INT 2
61821: PUSH
61822: LD_INT 3
61824: PUSH
61825: LD_INT 4
61827: PUSH
61828: EMPTY
61829: LIST
61830: LIST
61831: LIST
61832: LIST
61833: IN
61834: NOT
61835: OR
61836: IFFALSE 61840
// exit ;
61838: GO 61923
// tmp := [ ] ;
61840: LD_ADDR_VAR 0 5
61844: PUSH
61845: EMPTY
61846: ST_TO_ADDR
// for i in units do
61847: LD_ADDR_VAR 0 4
61851: PUSH
61852: LD_VAR 0 1
61856: PUSH
61857: FOR_IN
61858: IFFALSE 61892
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
61860: LD_ADDR_VAR 0 5
61864: PUSH
61865: LD_VAR 0 5
61869: PPUSH
61870: LD_VAR 0 4
61874: PPUSH
61875: LD_VAR 0 2
61879: PPUSH
61880: CALL_OW 259
61884: PPUSH
61885: CALL 63283 0 2
61889: ST_TO_ADDR
61890: GO 61857
61892: POP
61893: POP
// if not tmp then
61894: LD_VAR 0 5
61898: NOT
61899: IFFALSE 61903
// exit ;
61901: GO 61923
// result := SortListByListDesc ( units , tmp ) ;
61903: LD_ADDR_VAR 0 3
61907: PUSH
61908: LD_VAR 0 1
61912: PPUSH
61913: LD_VAR 0 5
61917: PPUSH
61918: CALL_OW 77
61922: ST_TO_ADDR
// end ;
61923: LD_VAR 0 3
61927: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
61928: LD_INT 0
61930: PPUSH
61931: PPUSH
61932: PPUSH
// result := false ;
61933: LD_ADDR_VAR 0 3
61937: PUSH
61938: LD_INT 0
61940: ST_TO_ADDR
// if not building then
61941: LD_VAR 0 2
61945: NOT
61946: IFFALSE 61950
// exit ;
61948: GO 62088
// x := GetX ( building ) ;
61950: LD_ADDR_VAR 0 4
61954: PUSH
61955: LD_VAR 0 2
61959: PPUSH
61960: CALL_OW 250
61964: ST_TO_ADDR
// y := GetY ( building ) ;
61965: LD_ADDR_VAR 0 5
61969: PUSH
61970: LD_VAR 0 2
61974: PPUSH
61975: CALL_OW 251
61979: ST_TO_ADDR
// if not x or not y then
61980: LD_VAR 0 4
61984: NOT
61985: PUSH
61986: LD_VAR 0 5
61990: NOT
61991: OR
61992: IFFALSE 61996
// exit ;
61994: GO 62088
// if GetTaskList ( unit ) then
61996: LD_VAR 0 1
62000: PPUSH
62001: CALL_OW 437
62005: IFFALSE 62088
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62007: LD_STRING e
62009: PUSH
62010: LD_VAR 0 1
62014: PPUSH
62015: CALL_OW 437
62019: PUSH
62020: LD_INT 1
62022: ARRAY
62023: PUSH
62024: LD_INT 1
62026: ARRAY
62027: EQUAL
62028: PUSH
62029: LD_VAR 0 4
62033: PUSH
62034: LD_VAR 0 1
62038: PPUSH
62039: CALL_OW 437
62043: PUSH
62044: LD_INT 1
62046: ARRAY
62047: PUSH
62048: LD_INT 2
62050: ARRAY
62051: EQUAL
62052: AND
62053: PUSH
62054: LD_VAR 0 5
62058: PUSH
62059: LD_VAR 0 1
62063: PPUSH
62064: CALL_OW 437
62068: PUSH
62069: LD_INT 1
62071: ARRAY
62072: PUSH
62073: LD_INT 3
62075: ARRAY
62076: EQUAL
62077: AND
62078: IFFALSE 62088
// result := true end ;
62080: LD_ADDR_VAR 0 3
62084: PUSH
62085: LD_INT 1
62087: ST_TO_ADDR
// end ;
62088: LD_VAR 0 3
62092: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
62093: LD_INT 0
62095: PPUSH
// result := false ;
62096: LD_ADDR_VAR 0 4
62100: PUSH
62101: LD_INT 0
62103: ST_TO_ADDR
// if GetTaskList ( unit ) then
62104: LD_VAR 0 1
62108: PPUSH
62109: CALL_OW 437
62113: IFFALSE 62196
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62115: LD_STRING M
62117: PUSH
62118: LD_VAR 0 1
62122: PPUSH
62123: CALL_OW 437
62127: PUSH
62128: LD_INT 1
62130: ARRAY
62131: PUSH
62132: LD_INT 1
62134: ARRAY
62135: EQUAL
62136: PUSH
62137: LD_VAR 0 2
62141: PUSH
62142: LD_VAR 0 1
62146: PPUSH
62147: CALL_OW 437
62151: PUSH
62152: LD_INT 1
62154: ARRAY
62155: PUSH
62156: LD_INT 2
62158: ARRAY
62159: EQUAL
62160: AND
62161: PUSH
62162: LD_VAR 0 3
62166: PUSH
62167: LD_VAR 0 1
62171: PPUSH
62172: CALL_OW 437
62176: PUSH
62177: LD_INT 1
62179: ARRAY
62180: PUSH
62181: LD_INT 3
62183: ARRAY
62184: EQUAL
62185: AND
62186: IFFALSE 62196
// result := true ;
62188: LD_ADDR_VAR 0 4
62192: PUSH
62193: LD_INT 1
62195: ST_TO_ADDR
// end ; end ;
62196: LD_VAR 0 4
62200: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
62201: LD_INT 0
62203: PPUSH
62204: PPUSH
62205: PPUSH
62206: PPUSH
// if not unit or not area then
62207: LD_VAR 0 1
62211: NOT
62212: PUSH
62213: LD_VAR 0 2
62217: NOT
62218: OR
62219: IFFALSE 62223
// exit ;
62221: GO 62386
// tmp := AreaToList ( area , i ) ;
62223: LD_ADDR_VAR 0 6
62227: PUSH
62228: LD_VAR 0 2
62232: PPUSH
62233: LD_VAR 0 5
62237: PPUSH
62238: CALL_OW 517
62242: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
62243: LD_ADDR_VAR 0 5
62247: PUSH
62248: DOUBLE
62249: LD_INT 1
62251: DEC
62252: ST_TO_ADDR
62253: LD_VAR 0 6
62257: PUSH
62258: LD_INT 1
62260: ARRAY
62261: PUSH
62262: FOR_TO
62263: IFFALSE 62384
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
62265: LD_ADDR_VAR 0 7
62269: PUSH
62270: LD_VAR 0 6
62274: PUSH
62275: LD_INT 1
62277: ARRAY
62278: PUSH
62279: LD_VAR 0 5
62283: ARRAY
62284: PUSH
62285: LD_VAR 0 6
62289: PUSH
62290: LD_INT 2
62292: ARRAY
62293: PUSH
62294: LD_VAR 0 5
62298: ARRAY
62299: PUSH
62300: EMPTY
62301: LIST
62302: LIST
62303: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
62304: LD_INT 92
62306: PUSH
62307: LD_VAR 0 7
62311: PUSH
62312: LD_INT 1
62314: ARRAY
62315: PUSH
62316: LD_VAR 0 7
62320: PUSH
62321: LD_INT 2
62323: ARRAY
62324: PUSH
62325: LD_INT 3
62327: PUSH
62328: EMPTY
62329: LIST
62330: LIST
62331: LIST
62332: LIST
62333: PPUSH
62334: CALL_OW 69
62338: PUSH
62339: LD_INT 0
62341: EQUAL
62342: IFFALSE 62382
// begin PlaceUnitArea ( unit , area , mode ) ;
62344: LD_VAR 0 1
62348: PPUSH
62349: LD_VAR 0 2
62353: PPUSH
62354: LD_VAR 0 3
62358: PPUSH
62359: CALL_OW 49
// result := IsPlaced ( unit ) ;
62363: LD_ADDR_VAR 0 4
62367: PUSH
62368: LD_VAR 0 1
62372: PPUSH
62373: CALL_OW 305
62377: ST_TO_ADDR
// exit ;
62378: POP
62379: POP
62380: GO 62386
// end ; end ;
62382: GO 62262
62384: POP
62385: POP
// end ;
62386: LD_VAR 0 4
62390: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
62391: LD_INT 0
62393: PPUSH
62394: PPUSH
62395: PPUSH
// if not side or side > 8 then
62396: LD_VAR 0 1
62400: NOT
62401: PUSH
62402: LD_VAR 0 1
62406: PUSH
62407: LD_INT 8
62409: GREATER
62410: OR
62411: IFFALSE 62415
// exit ;
62413: GO 62602
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
62415: LD_ADDR_VAR 0 4
62419: PUSH
62420: LD_INT 22
62422: PUSH
62423: LD_VAR 0 1
62427: PUSH
62428: EMPTY
62429: LIST
62430: LIST
62431: PUSH
62432: LD_INT 21
62434: PUSH
62435: LD_INT 3
62437: PUSH
62438: EMPTY
62439: LIST
62440: LIST
62441: PUSH
62442: EMPTY
62443: LIST
62444: LIST
62445: PPUSH
62446: CALL_OW 69
62450: ST_TO_ADDR
// if not tmp then
62451: LD_VAR 0 4
62455: NOT
62456: IFFALSE 62460
// exit ;
62458: GO 62602
// enable_addtolog := true ;
62460: LD_ADDR_OWVAR 81
62464: PUSH
62465: LD_INT 1
62467: ST_TO_ADDR
// AddToLog ( [ ) ;
62468: LD_STRING [
62470: PPUSH
62471: CALL_OW 561
// for i in tmp do
62475: LD_ADDR_VAR 0 3
62479: PUSH
62480: LD_VAR 0 4
62484: PUSH
62485: FOR_IN
62486: IFFALSE 62593
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
62488: LD_STRING [
62490: PUSH
62491: LD_VAR 0 3
62495: PPUSH
62496: CALL_OW 266
62500: STR
62501: PUSH
62502: LD_STRING , 
62504: STR
62505: PUSH
62506: LD_VAR 0 3
62510: PPUSH
62511: CALL_OW 250
62515: STR
62516: PUSH
62517: LD_STRING , 
62519: STR
62520: PUSH
62521: LD_VAR 0 3
62525: PPUSH
62526: CALL_OW 251
62530: STR
62531: PUSH
62532: LD_STRING , 
62534: STR
62535: PUSH
62536: LD_VAR 0 3
62540: PPUSH
62541: CALL_OW 254
62545: STR
62546: PUSH
62547: LD_STRING , 
62549: STR
62550: PUSH
62551: LD_VAR 0 3
62555: PPUSH
62556: LD_INT 1
62558: PPUSH
62559: CALL_OW 268
62563: STR
62564: PUSH
62565: LD_STRING , 
62567: STR
62568: PUSH
62569: LD_VAR 0 3
62573: PPUSH
62574: LD_INT 2
62576: PPUSH
62577: CALL_OW 268
62581: STR
62582: PUSH
62583: LD_STRING ],
62585: STR
62586: PPUSH
62587: CALL_OW 561
// end ;
62591: GO 62485
62593: POP
62594: POP
// AddToLog ( ]; ) ;
62595: LD_STRING ];
62597: PPUSH
62598: CALL_OW 561
// end ;
62602: LD_VAR 0 2
62606: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
62607: LD_INT 0
62609: PPUSH
62610: PPUSH
62611: PPUSH
62612: PPUSH
62613: PPUSH
// if not area or not rate or not max then
62614: LD_VAR 0 1
62618: NOT
62619: PUSH
62620: LD_VAR 0 2
62624: NOT
62625: OR
62626: PUSH
62627: LD_VAR 0 4
62631: NOT
62632: OR
62633: IFFALSE 62637
// exit ;
62635: GO 62826
// while 1 do
62637: LD_INT 1
62639: IFFALSE 62826
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
62641: LD_ADDR_VAR 0 9
62645: PUSH
62646: LD_VAR 0 1
62650: PPUSH
62651: LD_INT 1
62653: PPUSH
62654: CALL_OW 287
62658: PUSH
62659: LD_INT 10
62661: MUL
62662: ST_TO_ADDR
// r := rate / 10 ;
62663: LD_ADDR_VAR 0 7
62667: PUSH
62668: LD_VAR 0 2
62672: PUSH
62673: LD_INT 10
62675: DIVREAL
62676: ST_TO_ADDR
// time := 1 1$00 ;
62677: LD_ADDR_VAR 0 8
62681: PUSH
62682: LD_INT 2100
62684: ST_TO_ADDR
// if amount < min then
62685: LD_VAR 0 9
62689: PUSH
62690: LD_VAR 0 3
62694: LESS
62695: IFFALSE 62713
// r := r * 2 else
62697: LD_ADDR_VAR 0 7
62701: PUSH
62702: LD_VAR 0 7
62706: PUSH
62707: LD_INT 2
62709: MUL
62710: ST_TO_ADDR
62711: GO 62739
// if amount > max then
62713: LD_VAR 0 9
62717: PUSH
62718: LD_VAR 0 4
62722: GREATER
62723: IFFALSE 62739
// r := r / 2 ;
62725: LD_ADDR_VAR 0 7
62729: PUSH
62730: LD_VAR 0 7
62734: PUSH
62735: LD_INT 2
62737: DIVREAL
62738: ST_TO_ADDR
// time := time / r ;
62739: LD_ADDR_VAR 0 8
62743: PUSH
62744: LD_VAR 0 8
62748: PUSH
62749: LD_VAR 0 7
62753: DIVREAL
62754: ST_TO_ADDR
// if time < 0 then
62755: LD_VAR 0 8
62759: PUSH
62760: LD_INT 0
62762: LESS
62763: IFFALSE 62780
// time := time * - 1 ;
62765: LD_ADDR_VAR 0 8
62769: PUSH
62770: LD_VAR 0 8
62774: PUSH
62775: LD_INT 1
62777: NEG
62778: MUL
62779: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
62780: LD_VAR 0 8
62784: PUSH
62785: LD_INT 35
62787: PPUSH
62788: LD_INT 875
62790: PPUSH
62791: CALL_OW 12
62795: PLUS
62796: PPUSH
62797: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
62801: LD_INT 1
62803: PPUSH
62804: LD_INT 5
62806: PPUSH
62807: CALL_OW 12
62811: PPUSH
62812: LD_VAR 0 1
62816: PPUSH
62817: LD_INT 1
62819: PPUSH
62820: CALL_OW 55
// end ;
62824: GO 62637
// end ;
62826: LD_VAR 0 5
62830: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
62831: LD_INT 0
62833: PPUSH
62834: PPUSH
62835: PPUSH
62836: PPUSH
62837: PPUSH
62838: PPUSH
62839: PPUSH
62840: PPUSH
// if not turrets or not factories then
62841: LD_VAR 0 1
62845: NOT
62846: PUSH
62847: LD_VAR 0 2
62851: NOT
62852: OR
62853: IFFALSE 62857
// exit ;
62855: GO 63164
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
62857: LD_ADDR_VAR 0 10
62861: PUSH
62862: LD_INT 5
62864: PUSH
62865: LD_INT 6
62867: PUSH
62868: EMPTY
62869: LIST
62870: LIST
62871: PUSH
62872: LD_INT 2
62874: PUSH
62875: LD_INT 4
62877: PUSH
62878: EMPTY
62879: LIST
62880: LIST
62881: PUSH
62882: LD_INT 3
62884: PUSH
62885: LD_INT 5
62887: PUSH
62888: EMPTY
62889: LIST
62890: LIST
62891: PUSH
62892: EMPTY
62893: LIST
62894: LIST
62895: LIST
62896: PUSH
62897: LD_INT 24
62899: PUSH
62900: LD_INT 25
62902: PUSH
62903: EMPTY
62904: LIST
62905: LIST
62906: PUSH
62907: LD_INT 23
62909: PUSH
62910: LD_INT 27
62912: PUSH
62913: EMPTY
62914: LIST
62915: LIST
62916: PUSH
62917: EMPTY
62918: LIST
62919: LIST
62920: PUSH
62921: LD_INT 42
62923: PUSH
62924: LD_INT 43
62926: PUSH
62927: EMPTY
62928: LIST
62929: LIST
62930: PUSH
62931: LD_INT 44
62933: PUSH
62934: LD_INT 46
62936: PUSH
62937: EMPTY
62938: LIST
62939: LIST
62940: PUSH
62941: LD_INT 45
62943: PUSH
62944: LD_INT 47
62946: PUSH
62947: EMPTY
62948: LIST
62949: LIST
62950: PUSH
62951: EMPTY
62952: LIST
62953: LIST
62954: LIST
62955: PUSH
62956: EMPTY
62957: LIST
62958: LIST
62959: LIST
62960: ST_TO_ADDR
// result := [ ] ;
62961: LD_ADDR_VAR 0 3
62965: PUSH
62966: EMPTY
62967: ST_TO_ADDR
// for i in turrets do
62968: LD_ADDR_VAR 0 4
62972: PUSH
62973: LD_VAR 0 1
62977: PUSH
62978: FOR_IN
62979: IFFALSE 63162
// begin nat := GetNation ( i ) ;
62981: LD_ADDR_VAR 0 7
62985: PUSH
62986: LD_VAR 0 4
62990: PPUSH
62991: CALL_OW 248
62995: ST_TO_ADDR
// weapon := 0 ;
62996: LD_ADDR_VAR 0 8
63000: PUSH
63001: LD_INT 0
63003: ST_TO_ADDR
// if not nat then
63004: LD_VAR 0 7
63008: NOT
63009: IFFALSE 63013
// continue ;
63011: GO 62978
// for j in list [ nat ] do
63013: LD_ADDR_VAR 0 5
63017: PUSH
63018: LD_VAR 0 10
63022: PUSH
63023: LD_VAR 0 7
63027: ARRAY
63028: PUSH
63029: FOR_IN
63030: IFFALSE 63071
// if GetBWeapon ( i ) = j [ 1 ] then
63032: LD_VAR 0 4
63036: PPUSH
63037: CALL_OW 269
63041: PUSH
63042: LD_VAR 0 5
63046: PUSH
63047: LD_INT 1
63049: ARRAY
63050: EQUAL
63051: IFFALSE 63069
// begin weapon := j [ 2 ] ;
63053: LD_ADDR_VAR 0 8
63057: PUSH
63058: LD_VAR 0 5
63062: PUSH
63063: LD_INT 2
63065: ARRAY
63066: ST_TO_ADDR
// break ;
63067: GO 63071
// end ;
63069: GO 63029
63071: POP
63072: POP
// if not weapon then
63073: LD_VAR 0 8
63077: NOT
63078: IFFALSE 63082
// continue ;
63080: GO 62978
// for k in factories do
63082: LD_ADDR_VAR 0 6
63086: PUSH
63087: LD_VAR 0 2
63091: PUSH
63092: FOR_IN
63093: IFFALSE 63158
// begin weapons := AvailableWeaponList ( k ) ;
63095: LD_ADDR_VAR 0 9
63099: PUSH
63100: LD_VAR 0 6
63104: PPUSH
63105: CALL_OW 478
63109: ST_TO_ADDR
// if not weapons then
63110: LD_VAR 0 9
63114: NOT
63115: IFFALSE 63119
// continue ;
63117: GO 63092
// if weapon in weapons then
63119: LD_VAR 0 8
63123: PUSH
63124: LD_VAR 0 9
63128: IN
63129: IFFALSE 63156
// begin result := [ i , weapon ] ;
63131: LD_ADDR_VAR 0 3
63135: PUSH
63136: LD_VAR 0 4
63140: PUSH
63141: LD_VAR 0 8
63145: PUSH
63146: EMPTY
63147: LIST
63148: LIST
63149: ST_TO_ADDR
// exit ;
63150: POP
63151: POP
63152: POP
63153: POP
63154: GO 63164
// end ; end ;
63156: GO 63092
63158: POP
63159: POP
// end ;
63160: GO 62978
63162: POP
63163: POP
// end ;
63164: LD_VAR 0 3
63168: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
63169: LD_INT 0
63171: PPUSH
// if not side or side > 8 then
63172: LD_VAR 0 3
63176: NOT
63177: PUSH
63178: LD_VAR 0 3
63182: PUSH
63183: LD_INT 8
63185: GREATER
63186: OR
63187: IFFALSE 63191
// exit ;
63189: GO 63250
// if not range then
63191: LD_VAR 0 4
63195: NOT
63196: IFFALSE 63207
// range := - 12 ;
63198: LD_ADDR_VAR 0 4
63202: PUSH
63203: LD_INT 12
63205: NEG
63206: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
63207: LD_VAR 0 1
63211: PPUSH
63212: LD_VAR 0 2
63216: PPUSH
63217: LD_VAR 0 3
63221: PPUSH
63222: LD_VAR 0 4
63226: PPUSH
63227: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
63231: LD_VAR 0 1
63235: PPUSH
63236: LD_VAR 0 2
63240: PPUSH
63241: LD_VAR 0 3
63245: PPUSH
63246: CALL_OW 331
// end ;
63250: LD_VAR 0 5
63254: RET
// export function Video ( mode ) ; begin
63255: LD_INT 0
63257: PPUSH
// ingame_video = mode ;
63258: LD_ADDR_OWVAR 52
63262: PUSH
63263: LD_VAR 0 1
63267: ST_TO_ADDR
// interface_hidden = mode ;
63268: LD_ADDR_OWVAR 54
63272: PUSH
63273: LD_VAR 0 1
63277: ST_TO_ADDR
// end ;
63278: LD_VAR 0 2
63282: RET
// export function Join ( array , element ) ; begin
63283: LD_INT 0
63285: PPUSH
// result := Replace ( array , array + 1 , element ) ;
63286: LD_ADDR_VAR 0 3
63290: PUSH
63291: LD_VAR 0 1
63295: PPUSH
63296: LD_VAR 0 1
63300: PUSH
63301: LD_INT 1
63303: PLUS
63304: PPUSH
63305: LD_VAR 0 2
63309: PPUSH
63310: CALL_OW 1
63314: ST_TO_ADDR
// end ;
63315: LD_VAR 0 3
63319: RET
// export function JoinUnion ( array , element ) ; begin
63320: LD_INT 0
63322: PPUSH
// result := array union element ;
63323: LD_ADDR_VAR 0 3
63327: PUSH
63328: LD_VAR 0 1
63332: PUSH
63333: LD_VAR 0 2
63337: UNION
63338: ST_TO_ADDR
// end ;
63339: LD_VAR 0 3
63343: RET
// export function GetBehemoths ( side ) ; begin
63344: LD_INT 0
63346: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
63347: LD_ADDR_VAR 0 2
63351: PUSH
63352: LD_INT 22
63354: PUSH
63355: LD_VAR 0 1
63359: PUSH
63360: EMPTY
63361: LIST
63362: LIST
63363: PUSH
63364: LD_INT 31
63366: PUSH
63367: LD_INT 25
63369: PUSH
63370: EMPTY
63371: LIST
63372: LIST
63373: PUSH
63374: EMPTY
63375: LIST
63376: LIST
63377: PPUSH
63378: CALL_OW 69
63382: ST_TO_ADDR
// end ;
63383: LD_VAR 0 2
63387: RET
// export function Shuffle ( array ) ; var i , index ; begin
63388: LD_INT 0
63390: PPUSH
63391: PPUSH
63392: PPUSH
// result := [ ] ;
63393: LD_ADDR_VAR 0 2
63397: PUSH
63398: EMPTY
63399: ST_TO_ADDR
// if not array then
63400: LD_VAR 0 1
63404: NOT
63405: IFFALSE 63409
// exit ;
63407: GO 63508
// Randomize ;
63409: CALL_OW 10
// for i = array downto 1 do
63413: LD_ADDR_VAR 0 3
63417: PUSH
63418: DOUBLE
63419: LD_VAR 0 1
63423: INC
63424: ST_TO_ADDR
63425: LD_INT 1
63427: PUSH
63428: FOR_DOWNTO
63429: IFFALSE 63506
// begin index := rand ( 1 , array ) ;
63431: LD_ADDR_VAR 0 4
63435: PUSH
63436: LD_INT 1
63438: PPUSH
63439: LD_VAR 0 1
63443: PPUSH
63444: CALL_OW 12
63448: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
63449: LD_ADDR_VAR 0 2
63453: PUSH
63454: LD_VAR 0 2
63458: PPUSH
63459: LD_VAR 0 2
63463: PUSH
63464: LD_INT 1
63466: PLUS
63467: PPUSH
63468: LD_VAR 0 1
63472: PUSH
63473: LD_VAR 0 4
63477: ARRAY
63478: PPUSH
63479: CALL_OW 2
63483: ST_TO_ADDR
// array := Delete ( array , index ) ;
63484: LD_ADDR_VAR 0 1
63488: PUSH
63489: LD_VAR 0 1
63493: PPUSH
63494: LD_VAR 0 4
63498: PPUSH
63499: CALL_OW 3
63503: ST_TO_ADDR
// end ;
63504: GO 63428
63506: POP
63507: POP
// end ;
63508: LD_VAR 0 2
63512: RET
// export function GetBaseMaterials ( base ) ; begin
63513: LD_INT 0
63515: PPUSH
// result := [ 0 , 0 , 0 ] ;
63516: LD_ADDR_VAR 0 2
63520: PUSH
63521: LD_INT 0
63523: PUSH
63524: LD_INT 0
63526: PUSH
63527: LD_INT 0
63529: PUSH
63530: EMPTY
63531: LIST
63532: LIST
63533: LIST
63534: ST_TO_ADDR
// if not base then
63535: LD_VAR 0 1
63539: NOT
63540: IFFALSE 63544
// exit ;
63542: GO 63593
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
63544: LD_ADDR_VAR 0 2
63548: PUSH
63549: LD_VAR 0 1
63553: PPUSH
63554: LD_INT 1
63556: PPUSH
63557: CALL_OW 275
63561: PUSH
63562: LD_VAR 0 1
63566: PPUSH
63567: LD_INT 2
63569: PPUSH
63570: CALL_OW 275
63574: PUSH
63575: LD_VAR 0 1
63579: PPUSH
63580: LD_INT 3
63582: PPUSH
63583: CALL_OW 275
63587: PUSH
63588: EMPTY
63589: LIST
63590: LIST
63591: LIST
63592: ST_TO_ADDR
// end ;
63593: LD_VAR 0 2
63597: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
63598: LD_INT 0
63600: PPUSH
63601: PPUSH
// result := array ;
63602: LD_ADDR_VAR 0 3
63606: PUSH
63607: LD_VAR 0 1
63611: ST_TO_ADDR
// if size >= result then
63612: LD_VAR 0 2
63616: PUSH
63617: LD_VAR 0 3
63621: GREATEREQUAL
63622: IFFALSE 63626
// exit ;
63624: GO 63676
// if size then
63626: LD_VAR 0 2
63630: IFFALSE 63676
// for i := array downto size do
63632: LD_ADDR_VAR 0 4
63636: PUSH
63637: DOUBLE
63638: LD_VAR 0 1
63642: INC
63643: ST_TO_ADDR
63644: LD_VAR 0 2
63648: PUSH
63649: FOR_DOWNTO
63650: IFFALSE 63674
// result := Delete ( result , result ) ;
63652: LD_ADDR_VAR 0 3
63656: PUSH
63657: LD_VAR 0 3
63661: PPUSH
63662: LD_VAR 0 3
63666: PPUSH
63667: CALL_OW 3
63671: ST_TO_ADDR
63672: GO 63649
63674: POP
63675: POP
// end ;
63676: LD_VAR 0 3
63680: RET
// export function ComExit ( unit ) ; var tmp ; begin
63681: LD_INT 0
63683: PPUSH
63684: PPUSH
// if not IsInUnit ( unit ) then
63685: LD_VAR 0 1
63689: PPUSH
63690: CALL_OW 310
63694: NOT
63695: IFFALSE 63699
// exit ;
63697: GO 63759
// tmp := IsInUnit ( unit ) ;
63699: LD_ADDR_VAR 0 3
63703: PUSH
63704: LD_VAR 0 1
63708: PPUSH
63709: CALL_OW 310
63713: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
63714: LD_VAR 0 3
63718: PPUSH
63719: CALL_OW 247
63723: PUSH
63724: LD_INT 2
63726: EQUAL
63727: IFFALSE 63740
// ComExitVehicle ( unit ) else
63729: LD_VAR 0 1
63733: PPUSH
63734: CALL_OW 121
63738: GO 63749
// ComExitBuilding ( unit ) ;
63740: LD_VAR 0 1
63744: PPUSH
63745: CALL_OW 122
// result := tmp ;
63749: LD_ADDR_VAR 0 2
63753: PUSH
63754: LD_VAR 0 3
63758: ST_TO_ADDR
// end ;
63759: LD_VAR 0 2
63763: RET
// export function ComExitAll ( units ) ; var i ; begin
63764: LD_INT 0
63766: PPUSH
63767: PPUSH
// if not units then
63768: LD_VAR 0 1
63772: NOT
63773: IFFALSE 63777
// exit ;
63775: GO 63803
// for i in units do
63777: LD_ADDR_VAR 0 3
63781: PUSH
63782: LD_VAR 0 1
63786: PUSH
63787: FOR_IN
63788: IFFALSE 63801
// ComExit ( i ) ;
63790: LD_VAR 0 3
63794: PPUSH
63795: CALL 63681 0 1
63799: GO 63787
63801: POP
63802: POP
// end ;
63803: LD_VAR 0 2
63807: RET
// export function ResetHc ; begin
63808: LD_INT 0
63810: PPUSH
// InitHc ;
63811: CALL_OW 19
// hc_importance := 0 ;
63815: LD_ADDR_OWVAR 32
63819: PUSH
63820: LD_INT 0
63822: ST_TO_ADDR
// end ;
63823: LD_VAR 0 1
63827: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
63828: LD_INT 0
63830: PPUSH
63831: PPUSH
63832: PPUSH
// _x := ( x1 + x2 ) div 2 ;
63833: LD_ADDR_VAR 0 6
63837: PUSH
63838: LD_VAR 0 1
63842: PUSH
63843: LD_VAR 0 3
63847: PLUS
63848: PUSH
63849: LD_INT 2
63851: DIV
63852: ST_TO_ADDR
// if _x < 0 then
63853: LD_VAR 0 6
63857: PUSH
63858: LD_INT 0
63860: LESS
63861: IFFALSE 63878
// _x := _x * - 1 ;
63863: LD_ADDR_VAR 0 6
63867: PUSH
63868: LD_VAR 0 6
63872: PUSH
63873: LD_INT 1
63875: NEG
63876: MUL
63877: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
63878: LD_ADDR_VAR 0 7
63882: PUSH
63883: LD_VAR 0 2
63887: PUSH
63888: LD_VAR 0 4
63892: PLUS
63893: PUSH
63894: LD_INT 2
63896: DIV
63897: ST_TO_ADDR
// if _y < 0 then
63898: LD_VAR 0 7
63902: PUSH
63903: LD_INT 0
63905: LESS
63906: IFFALSE 63923
// _y := _y * - 1 ;
63908: LD_ADDR_VAR 0 7
63912: PUSH
63913: LD_VAR 0 7
63917: PUSH
63918: LD_INT 1
63920: NEG
63921: MUL
63922: ST_TO_ADDR
// result := [ _x , _y ] ;
63923: LD_ADDR_VAR 0 5
63927: PUSH
63928: LD_VAR 0 6
63932: PUSH
63933: LD_VAR 0 7
63937: PUSH
63938: EMPTY
63939: LIST
63940: LIST
63941: ST_TO_ADDR
// end ;
63942: LD_VAR 0 5
63946: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
63947: LD_INT 0
63949: PPUSH
63950: PPUSH
63951: PPUSH
63952: PPUSH
// task := GetTaskList ( unit ) ;
63953: LD_ADDR_VAR 0 7
63957: PUSH
63958: LD_VAR 0 1
63962: PPUSH
63963: CALL_OW 437
63967: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
63968: LD_VAR 0 7
63972: NOT
63973: PUSH
63974: LD_VAR 0 1
63978: PPUSH
63979: LD_VAR 0 2
63983: PPUSH
63984: CALL_OW 308
63988: NOT
63989: AND
63990: IFFALSE 63994
// exit ;
63992: GO 64112
// if IsInArea ( unit , area ) then
63994: LD_VAR 0 1
63998: PPUSH
63999: LD_VAR 0 2
64003: PPUSH
64004: CALL_OW 308
64008: IFFALSE 64026
// begin ComMoveToArea ( unit , goAway ) ;
64010: LD_VAR 0 1
64014: PPUSH
64015: LD_VAR 0 3
64019: PPUSH
64020: CALL_OW 113
// exit ;
64024: GO 64112
// end ; if task [ 1 ] [ 1 ] <> M then
64026: LD_VAR 0 7
64030: PUSH
64031: LD_INT 1
64033: ARRAY
64034: PUSH
64035: LD_INT 1
64037: ARRAY
64038: PUSH
64039: LD_STRING M
64041: NONEQUAL
64042: IFFALSE 64046
// exit ;
64044: GO 64112
// x := task [ 1 ] [ 2 ] ;
64046: LD_ADDR_VAR 0 5
64050: PUSH
64051: LD_VAR 0 7
64055: PUSH
64056: LD_INT 1
64058: ARRAY
64059: PUSH
64060: LD_INT 2
64062: ARRAY
64063: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
64064: LD_ADDR_VAR 0 6
64068: PUSH
64069: LD_VAR 0 7
64073: PUSH
64074: LD_INT 1
64076: ARRAY
64077: PUSH
64078: LD_INT 3
64080: ARRAY
64081: ST_TO_ADDR
// if InArea ( x , y , area ) then
64082: LD_VAR 0 5
64086: PPUSH
64087: LD_VAR 0 6
64091: PPUSH
64092: LD_VAR 0 2
64096: PPUSH
64097: CALL_OW 309
64101: IFFALSE 64112
// ComStop ( unit ) ;
64103: LD_VAR 0 1
64107: PPUSH
64108: CALL_OW 141
// end ;
64112: LD_VAR 0 4
64116: RET
// export function Abs ( value ) ; begin
64117: LD_INT 0
64119: PPUSH
// result := value ;
64120: LD_ADDR_VAR 0 2
64124: PUSH
64125: LD_VAR 0 1
64129: ST_TO_ADDR
// if value < 0 then
64130: LD_VAR 0 1
64134: PUSH
64135: LD_INT 0
64137: LESS
64138: IFFALSE 64155
// result := value * - 1 ;
64140: LD_ADDR_VAR 0 2
64144: PUSH
64145: LD_VAR 0 1
64149: PUSH
64150: LD_INT 1
64152: NEG
64153: MUL
64154: ST_TO_ADDR
// end ;
64155: LD_VAR 0 2
64159: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
64160: LD_INT 0
64162: PPUSH
64163: PPUSH
64164: PPUSH
64165: PPUSH
64166: PPUSH
64167: PPUSH
64168: PPUSH
64169: PPUSH
// if not unit or not building then
64170: LD_VAR 0 1
64174: NOT
64175: PUSH
64176: LD_VAR 0 2
64180: NOT
64181: OR
64182: IFFALSE 64186
// exit ;
64184: GO 64412
// x := GetX ( building ) ;
64186: LD_ADDR_VAR 0 4
64190: PUSH
64191: LD_VAR 0 2
64195: PPUSH
64196: CALL_OW 250
64200: ST_TO_ADDR
// y := GetY ( building ) ;
64201: LD_ADDR_VAR 0 6
64205: PUSH
64206: LD_VAR 0 2
64210: PPUSH
64211: CALL_OW 251
64215: ST_TO_ADDR
// d := GetDir ( building ) ;
64216: LD_ADDR_VAR 0 8
64220: PUSH
64221: LD_VAR 0 2
64225: PPUSH
64226: CALL_OW 254
64230: ST_TO_ADDR
// r := 4 ;
64231: LD_ADDR_VAR 0 9
64235: PUSH
64236: LD_INT 4
64238: ST_TO_ADDR
// for i := 1 to 5 do
64239: LD_ADDR_VAR 0 10
64243: PUSH
64244: DOUBLE
64245: LD_INT 1
64247: DEC
64248: ST_TO_ADDR
64249: LD_INT 5
64251: PUSH
64252: FOR_TO
64253: IFFALSE 64410
// begin _x := ShiftX ( x , d , r + i ) ;
64255: LD_ADDR_VAR 0 5
64259: PUSH
64260: LD_VAR 0 4
64264: PPUSH
64265: LD_VAR 0 8
64269: PPUSH
64270: LD_VAR 0 9
64274: PUSH
64275: LD_VAR 0 10
64279: PLUS
64280: PPUSH
64281: CALL_OW 272
64285: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
64286: LD_ADDR_VAR 0 7
64290: PUSH
64291: LD_VAR 0 6
64295: PPUSH
64296: LD_VAR 0 8
64300: PPUSH
64301: LD_VAR 0 9
64305: PUSH
64306: LD_VAR 0 10
64310: PLUS
64311: PPUSH
64312: CALL_OW 273
64316: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
64317: LD_VAR 0 5
64321: PPUSH
64322: LD_VAR 0 7
64326: PPUSH
64327: CALL_OW 488
64331: PUSH
64332: LD_VAR 0 5
64336: PPUSH
64337: LD_VAR 0 7
64341: PPUSH
64342: CALL_OW 428
64346: PPUSH
64347: CALL_OW 247
64351: PUSH
64352: LD_INT 3
64354: PUSH
64355: LD_INT 2
64357: PUSH
64358: EMPTY
64359: LIST
64360: LIST
64361: IN
64362: NOT
64363: AND
64364: IFFALSE 64408
// begin ComMoveXY ( unit , _x , _y ) ;
64366: LD_VAR 0 1
64370: PPUSH
64371: LD_VAR 0 5
64375: PPUSH
64376: LD_VAR 0 7
64380: PPUSH
64381: CALL_OW 111
// result := [ _x , _y ] ;
64385: LD_ADDR_VAR 0 3
64389: PUSH
64390: LD_VAR 0 5
64394: PUSH
64395: LD_VAR 0 7
64399: PUSH
64400: EMPTY
64401: LIST
64402: LIST
64403: ST_TO_ADDR
// exit ;
64404: POP
64405: POP
64406: GO 64412
// end ; end ;
64408: GO 64252
64410: POP
64411: POP
// end ;
64412: LD_VAR 0 3
64416: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
64417: LD_INT 0
64419: PPUSH
64420: PPUSH
64421: PPUSH
// result := 0 ;
64422: LD_ADDR_VAR 0 3
64426: PUSH
64427: LD_INT 0
64429: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
64430: LD_VAR 0 1
64434: PUSH
64435: LD_INT 0
64437: LESS
64438: PUSH
64439: LD_VAR 0 1
64443: PUSH
64444: LD_INT 8
64446: GREATER
64447: OR
64448: PUSH
64449: LD_VAR 0 2
64453: PUSH
64454: LD_INT 0
64456: LESS
64457: OR
64458: PUSH
64459: LD_VAR 0 2
64463: PUSH
64464: LD_INT 8
64466: GREATER
64467: OR
64468: IFFALSE 64472
// exit ;
64470: GO 64547
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
64472: LD_ADDR_VAR 0 4
64476: PUSH
64477: LD_INT 22
64479: PUSH
64480: LD_VAR 0 2
64484: PUSH
64485: EMPTY
64486: LIST
64487: LIST
64488: PPUSH
64489: CALL_OW 69
64493: PUSH
64494: FOR_IN
64495: IFFALSE 64545
// begin un := UnitShoot ( i ) ;
64497: LD_ADDR_VAR 0 5
64501: PUSH
64502: LD_VAR 0 4
64506: PPUSH
64507: CALL_OW 504
64511: ST_TO_ADDR
// if GetSide ( un ) = side1 then
64512: LD_VAR 0 5
64516: PPUSH
64517: CALL_OW 255
64521: PUSH
64522: LD_VAR 0 1
64526: EQUAL
64527: IFFALSE 64543
// begin result := un ;
64529: LD_ADDR_VAR 0 3
64533: PUSH
64534: LD_VAR 0 5
64538: ST_TO_ADDR
// exit ;
64539: POP
64540: POP
64541: GO 64547
// end ; end ;
64543: GO 64494
64545: POP
64546: POP
// end ;
64547: LD_VAR 0 3
64551: RET
// export function GetCargoBay ( units ) ; begin
64552: LD_INT 0
64554: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
64555: LD_ADDR_VAR 0 2
64559: PUSH
64560: LD_VAR 0 1
64564: PPUSH
64565: LD_INT 2
64567: PUSH
64568: LD_INT 34
64570: PUSH
64571: LD_INT 12
64573: PUSH
64574: EMPTY
64575: LIST
64576: LIST
64577: PUSH
64578: LD_INT 34
64580: PUSH
64581: LD_INT 51
64583: PUSH
64584: EMPTY
64585: LIST
64586: LIST
64587: PUSH
64588: LD_INT 34
64590: PUSH
64591: LD_INT 32
64593: PUSH
64594: EMPTY
64595: LIST
64596: LIST
64597: PUSH
64598: LD_INT 34
64600: PUSH
64601: LD_INT 89
64603: PUSH
64604: EMPTY
64605: LIST
64606: LIST
64607: PUSH
64608: EMPTY
64609: LIST
64610: LIST
64611: LIST
64612: LIST
64613: LIST
64614: PPUSH
64615: CALL_OW 72
64619: ST_TO_ADDR
// end ;
64620: LD_VAR 0 2
64624: RET
// export function Negate ( value ) ; begin
64625: LD_INT 0
64627: PPUSH
// result := not value ;
64628: LD_ADDR_VAR 0 2
64632: PUSH
64633: LD_VAR 0 1
64637: NOT
64638: ST_TO_ADDR
// end ;
64639: LD_VAR 0 2
64643: RET
// export function Inc ( value ) ; begin
64644: LD_INT 0
64646: PPUSH
// result := value + 1 ;
64647: LD_ADDR_VAR 0 2
64651: PUSH
64652: LD_VAR 0 1
64656: PUSH
64657: LD_INT 1
64659: PLUS
64660: ST_TO_ADDR
// end ;
64661: LD_VAR 0 2
64665: RET
// export function Dec ( value ) ; begin
64666: LD_INT 0
64668: PPUSH
// result := value - 1 ;
64669: LD_ADDR_VAR 0 2
64673: PUSH
64674: LD_VAR 0 1
64678: PUSH
64679: LD_INT 1
64681: MINUS
64682: ST_TO_ADDR
// end ;
64683: LD_VAR 0 2
64687: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
64688: LD_INT 0
64690: PPUSH
64691: PPUSH
64692: PPUSH
64693: PPUSH
64694: PPUSH
64695: PPUSH
64696: PPUSH
64697: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
64698: LD_VAR 0 1
64702: PPUSH
64703: LD_VAR 0 2
64707: PPUSH
64708: CALL_OW 488
64712: NOT
64713: PUSH
64714: LD_VAR 0 3
64718: PPUSH
64719: LD_VAR 0 4
64723: PPUSH
64724: CALL_OW 488
64728: NOT
64729: OR
64730: IFFALSE 64743
// begin result := - 1 ;
64732: LD_ADDR_VAR 0 5
64736: PUSH
64737: LD_INT 1
64739: NEG
64740: ST_TO_ADDR
// exit ;
64741: GO 64978
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
64743: LD_ADDR_VAR 0 12
64747: PUSH
64748: LD_VAR 0 1
64752: PPUSH
64753: LD_VAR 0 2
64757: PPUSH
64758: LD_VAR 0 3
64762: PPUSH
64763: LD_VAR 0 4
64767: PPUSH
64768: CALL 63828 0 4
64772: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
64773: LD_ADDR_VAR 0 11
64777: PUSH
64778: LD_VAR 0 1
64782: PPUSH
64783: LD_VAR 0 2
64787: PPUSH
64788: LD_VAR 0 12
64792: PUSH
64793: LD_INT 1
64795: ARRAY
64796: PPUSH
64797: LD_VAR 0 12
64801: PUSH
64802: LD_INT 2
64804: ARRAY
64805: PPUSH
64806: CALL_OW 298
64810: ST_TO_ADDR
// distance := 9999 ;
64811: LD_ADDR_VAR 0 10
64815: PUSH
64816: LD_INT 9999
64818: ST_TO_ADDR
// for i := 0 to 5 do
64819: LD_ADDR_VAR 0 6
64823: PUSH
64824: DOUBLE
64825: LD_INT 0
64827: DEC
64828: ST_TO_ADDR
64829: LD_INT 5
64831: PUSH
64832: FOR_TO
64833: IFFALSE 64976
// begin _x := ShiftX ( x1 , i , centerDist ) ;
64835: LD_ADDR_VAR 0 7
64839: PUSH
64840: LD_VAR 0 1
64844: PPUSH
64845: LD_VAR 0 6
64849: PPUSH
64850: LD_VAR 0 11
64854: PPUSH
64855: CALL_OW 272
64859: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
64860: LD_ADDR_VAR 0 8
64864: PUSH
64865: LD_VAR 0 2
64869: PPUSH
64870: LD_VAR 0 6
64874: PPUSH
64875: LD_VAR 0 11
64879: PPUSH
64880: CALL_OW 273
64884: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
64885: LD_VAR 0 7
64889: PPUSH
64890: LD_VAR 0 8
64894: PPUSH
64895: CALL_OW 488
64899: NOT
64900: IFFALSE 64904
// continue ;
64902: GO 64832
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
64904: LD_ADDR_VAR 0 9
64908: PUSH
64909: LD_VAR 0 12
64913: PUSH
64914: LD_INT 1
64916: ARRAY
64917: PPUSH
64918: LD_VAR 0 12
64922: PUSH
64923: LD_INT 2
64925: ARRAY
64926: PPUSH
64927: LD_VAR 0 7
64931: PPUSH
64932: LD_VAR 0 8
64936: PPUSH
64937: CALL_OW 298
64941: ST_TO_ADDR
// if tmp < distance then
64942: LD_VAR 0 9
64946: PUSH
64947: LD_VAR 0 10
64951: LESS
64952: IFFALSE 64974
// begin result := i ;
64954: LD_ADDR_VAR 0 5
64958: PUSH
64959: LD_VAR 0 6
64963: ST_TO_ADDR
// distance := tmp ;
64964: LD_ADDR_VAR 0 10
64968: PUSH
64969: LD_VAR 0 9
64973: ST_TO_ADDR
// end ; end ;
64974: GO 64832
64976: POP
64977: POP
// end ;
64978: LD_VAR 0 5
64982: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64983: LD_INT 0
64985: PPUSH
64986: PPUSH
// if not driver or not IsInUnit ( driver ) then
64987: LD_VAR 0 1
64991: NOT
64992: PUSH
64993: LD_VAR 0 1
64997: PPUSH
64998: CALL_OW 310
65002: NOT
65003: OR
65004: IFFALSE 65008
// exit ;
65006: GO 65098
// vehicle := IsInUnit ( driver ) ;
65008: LD_ADDR_VAR 0 3
65012: PUSH
65013: LD_VAR 0 1
65017: PPUSH
65018: CALL_OW 310
65022: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65023: LD_VAR 0 1
65027: PPUSH
65028: LD_STRING \
65030: PUSH
65031: LD_INT 0
65033: PUSH
65034: LD_INT 0
65036: PUSH
65037: LD_INT 0
65039: PUSH
65040: LD_INT 0
65042: PUSH
65043: LD_INT 0
65045: PUSH
65046: LD_INT 0
65048: PUSH
65049: EMPTY
65050: LIST
65051: LIST
65052: LIST
65053: LIST
65054: LIST
65055: LIST
65056: LIST
65057: PUSH
65058: LD_STRING E
65060: PUSH
65061: LD_INT 0
65063: PUSH
65064: LD_INT 0
65066: PUSH
65067: LD_VAR 0 3
65071: PUSH
65072: LD_INT 0
65074: PUSH
65075: LD_INT 0
65077: PUSH
65078: LD_INT 0
65080: PUSH
65081: EMPTY
65082: LIST
65083: LIST
65084: LIST
65085: LIST
65086: LIST
65087: LIST
65088: LIST
65089: PUSH
65090: EMPTY
65091: LIST
65092: LIST
65093: PPUSH
65094: CALL_OW 446
// end ;
65098: LD_VAR 0 2
65102: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65103: LD_INT 0
65105: PPUSH
65106: PPUSH
// if not driver or not IsInUnit ( driver ) then
65107: LD_VAR 0 1
65111: NOT
65112: PUSH
65113: LD_VAR 0 1
65117: PPUSH
65118: CALL_OW 310
65122: NOT
65123: OR
65124: IFFALSE 65128
// exit ;
65126: GO 65218
// vehicle := IsInUnit ( driver ) ;
65128: LD_ADDR_VAR 0 3
65132: PUSH
65133: LD_VAR 0 1
65137: PPUSH
65138: CALL_OW 310
65142: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65143: LD_VAR 0 1
65147: PPUSH
65148: LD_STRING \
65150: PUSH
65151: LD_INT 0
65153: PUSH
65154: LD_INT 0
65156: PUSH
65157: LD_INT 0
65159: PUSH
65160: LD_INT 0
65162: PUSH
65163: LD_INT 0
65165: PUSH
65166: LD_INT 0
65168: PUSH
65169: EMPTY
65170: LIST
65171: LIST
65172: LIST
65173: LIST
65174: LIST
65175: LIST
65176: LIST
65177: PUSH
65178: LD_STRING E
65180: PUSH
65181: LD_INT 0
65183: PUSH
65184: LD_INT 0
65186: PUSH
65187: LD_VAR 0 3
65191: PUSH
65192: LD_INT 0
65194: PUSH
65195: LD_INT 0
65197: PUSH
65198: LD_INT 0
65200: PUSH
65201: EMPTY
65202: LIST
65203: LIST
65204: LIST
65205: LIST
65206: LIST
65207: LIST
65208: LIST
65209: PUSH
65210: EMPTY
65211: LIST
65212: LIST
65213: PPUSH
65214: CALL_OW 447
// end ;
65218: LD_VAR 0 2
65222: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
65223: LD_INT 0
65225: PPUSH
65226: PPUSH
65227: PPUSH
// tmp := [ ] ;
65228: LD_ADDR_VAR 0 5
65232: PUSH
65233: EMPTY
65234: ST_TO_ADDR
// for i in units do
65235: LD_ADDR_VAR 0 4
65239: PUSH
65240: LD_VAR 0 1
65244: PUSH
65245: FOR_IN
65246: IFFALSE 65284
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
65248: LD_ADDR_VAR 0 5
65252: PUSH
65253: LD_VAR 0 5
65257: PPUSH
65258: LD_VAR 0 5
65262: PUSH
65263: LD_INT 1
65265: PLUS
65266: PPUSH
65267: LD_VAR 0 4
65271: PPUSH
65272: CALL_OW 256
65276: PPUSH
65277: CALL_OW 2
65281: ST_TO_ADDR
65282: GO 65245
65284: POP
65285: POP
// if not tmp then
65286: LD_VAR 0 5
65290: NOT
65291: IFFALSE 65295
// exit ;
65293: GO 65343
// if asc then
65295: LD_VAR 0 2
65299: IFFALSE 65323
// result := SortListByListAsc ( units , tmp ) else
65301: LD_ADDR_VAR 0 3
65305: PUSH
65306: LD_VAR 0 1
65310: PPUSH
65311: LD_VAR 0 5
65315: PPUSH
65316: CALL_OW 76
65320: ST_TO_ADDR
65321: GO 65343
// result := SortListByListDesc ( units , tmp ) ;
65323: LD_ADDR_VAR 0 3
65327: PUSH
65328: LD_VAR 0 1
65332: PPUSH
65333: LD_VAR 0 5
65337: PPUSH
65338: CALL_OW 77
65342: ST_TO_ADDR
// end ;
65343: LD_VAR 0 3
65347: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
65348: LD_INT 0
65350: PPUSH
65351: PPUSH
// task := GetTaskList ( mech ) ;
65352: LD_ADDR_VAR 0 4
65356: PUSH
65357: LD_VAR 0 1
65361: PPUSH
65362: CALL_OW 437
65366: ST_TO_ADDR
// if not task then
65367: LD_VAR 0 4
65371: NOT
65372: IFFALSE 65376
// exit ;
65374: GO 65418
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
65376: LD_ADDR_VAR 0 3
65380: PUSH
65381: LD_VAR 0 4
65385: PUSH
65386: LD_INT 1
65388: ARRAY
65389: PUSH
65390: LD_INT 1
65392: ARRAY
65393: PUSH
65394: LD_STRING r
65396: EQUAL
65397: PUSH
65398: LD_VAR 0 4
65402: PUSH
65403: LD_INT 1
65405: ARRAY
65406: PUSH
65407: LD_INT 4
65409: ARRAY
65410: PUSH
65411: LD_VAR 0 2
65415: EQUAL
65416: AND
65417: ST_TO_ADDR
// end ;
65418: LD_VAR 0 3
65422: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
65423: LD_INT 0
65425: PPUSH
// SetDir ( unit , d ) ;
65426: LD_VAR 0 1
65430: PPUSH
65431: LD_VAR 0 4
65435: PPUSH
65436: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
65440: LD_VAR 0 1
65444: PPUSH
65445: LD_VAR 0 2
65449: PPUSH
65450: LD_VAR 0 3
65454: PPUSH
65455: LD_VAR 0 5
65459: PPUSH
65460: CALL_OW 48
// end ;
65464: LD_VAR 0 6
65468: RET
// export function ToNaturalNumber ( number ) ; begin
65469: LD_INT 0
65471: PPUSH
// result := number div 1 ;
65472: LD_ADDR_VAR 0 2
65476: PUSH
65477: LD_VAR 0 1
65481: PUSH
65482: LD_INT 1
65484: DIV
65485: ST_TO_ADDR
// if number < 0 then
65486: LD_VAR 0 1
65490: PUSH
65491: LD_INT 0
65493: LESS
65494: IFFALSE 65504
// result := 0 ;
65496: LD_ADDR_VAR 0 2
65500: PUSH
65501: LD_INT 0
65503: ST_TO_ADDR
// end ;
65504: LD_VAR 0 2
65508: RET
// export function SortByClass ( units , class ) ; var un ; begin
65509: LD_INT 0
65511: PPUSH
65512: PPUSH
// if not units or not class then
65513: LD_VAR 0 1
65517: NOT
65518: PUSH
65519: LD_VAR 0 2
65523: NOT
65524: OR
65525: IFFALSE 65529
// exit ;
65527: GO 65624
// result := [ ] ;
65529: LD_ADDR_VAR 0 3
65533: PUSH
65534: EMPTY
65535: ST_TO_ADDR
// for un in units do
65536: LD_ADDR_VAR 0 4
65540: PUSH
65541: LD_VAR 0 1
65545: PUSH
65546: FOR_IN
65547: IFFALSE 65622
// if GetClass ( un ) = class then
65549: LD_VAR 0 4
65553: PPUSH
65554: CALL_OW 257
65558: PUSH
65559: LD_VAR 0 2
65563: EQUAL
65564: IFFALSE 65591
// result := Insert ( result , 1 , un ) else
65566: LD_ADDR_VAR 0 3
65570: PUSH
65571: LD_VAR 0 3
65575: PPUSH
65576: LD_INT 1
65578: PPUSH
65579: LD_VAR 0 4
65583: PPUSH
65584: CALL_OW 2
65588: ST_TO_ADDR
65589: GO 65620
// result := Replace ( result , result + 1 , un ) ;
65591: LD_ADDR_VAR 0 3
65595: PUSH
65596: LD_VAR 0 3
65600: PPUSH
65601: LD_VAR 0 3
65605: PUSH
65606: LD_INT 1
65608: PLUS
65609: PPUSH
65610: LD_VAR 0 4
65614: PPUSH
65615: CALL_OW 1
65619: ST_TO_ADDR
65620: GO 65546
65622: POP
65623: POP
// end ;
65624: LD_VAR 0 3
65628: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
65629: LD_INT 0
65631: PPUSH
65632: PPUSH
65633: PPUSH
65634: PPUSH
65635: PPUSH
65636: PPUSH
65637: PPUSH
// result := [ ] ;
65638: LD_ADDR_VAR 0 4
65642: PUSH
65643: EMPTY
65644: ST_TO_ADDR
// if x - r < 0 then
65645: LD_VAR 0 1
65649: PUSH
65650: LD_VAR 0 3
65654: MINUS
65655: PUSH
65656: LD_INT 0
65658: LESS
65659: IFFALSE 65671
// min_x := 0 else
65661: LD_ADDR_VAR 0 8
65665: PUSH
65666: LD_INT 0
65668: ST_TO_ADDR
65669: GO 65687
// min_x := x - r ;
65671: LD_ADDR_VAR 0 8
65675: PUSH
65676: LD_VAR 0 1
65680: PUSH
65681: LD_VAR 0 3
65685: MINUS
65686: ST_TO_ADDR
// if y - r < 0 then
65687: LD_VAR 0 2
65691: PUSH
65692: LD_VAR 0 3
65696: MINUS
65697: PUSH
65698: LD_INT 0
65700: LESS
65701: IFFALSE 65713
// min_y := 0 else
65703: LD_ADDR_VAR 0 7
65707: PUSH
65708: LD_INT 0
65710: ST_TO_ADDR
65711: GO 65729
// min_y := y - r ;
65713: LD_ADDR_VAR 0 7
65717: PUSH
65718: LD_VAR 0 2
65722: PUSH
65723: LD_VAR 0 3
65727: MINUS
65728: ST_TO_ADDR
// max_x := x + r ;
65729: LD_ADDR_VAR 0 9
65733: PUSH
65734: LD_VAR 0 1
65738: PUSH
65739: LD_VAR 0 3
65743: PLUS
65744: ST_TO_ADDR
// max_y := y + r ;
65745: LD_ADDR_VAR 0 10
65749: PUSH
65750: LD_VAR 0 2
65754: PUSH
65755: LD_VAR 0 3
65759: PLUS
65760: ST_TO_ADDR
// for _x = min_x to max_x do
65761: LD_ADDR_VAR 0 5
65765: PUSH
65766: DOUBLE
65767: LD_VAR 0 8
65771: DEC
65772: ST_TO_ADDR
65773: LD_VAR 0 9
65777: PUSH
65778: FOR_TO
65779: IFFALSE 65880
// for _y = min_y to max_y do
65781: LD_ADDR_VAR 0 6
65785: PUSH
65786: DOUBLE
65787: LD_VAR 0 7
65791: DEC
65792: ST_TO_ADDR
65793: LD_VAR 0 10
65797: PUSH
65798: FOR_TO
65799: IFFALSE 65876
// begin if not ValidHex ( _x , _y ) then
65801: LD_VAR 0 5
65805: PPUSH
65806: LD_VAR 0 6
65810: PPUSH
65811: CALL_OW 488
65815: NOT
65816: IFFALSE 65820
// continue ;
65818: GO 65798
// if GetResourceTypeXY ( _x , _y ) then
65820: LD_VAR 0 5
65824: PPUSH
65825: LD_VAR 0 6
65829: PPUSH
65830: CALL_OW 283
65834: IFFALSE 65874
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
65836: LD_ADDR_VAR 0 4
65840: PUSH
65841: LD_VAR 0 4
65845: PPUSH
65846: LD_VAR 0 4
65850: PUSH
65851: LD_INT 1
65853: PLUS
65854: PPUSH
65855: LD_VAR 0 5
65859: PUSH
65860: LD_VAR 0 6
65864: PUSH
65865: EMPTY
65866: LIST
65867: LIST
65868: PPUSH
65869: CALL_OW 1
65873: ST_TO_ADDR
// end ;
65874: GO 65798
65876: POP
65877: POP
65878: GO 65778
65880: POP
65881: POP
// end ;
65882: LD_VAR 0 4
65886: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
65887: LD_INT 0
65889: PPUSH
65890: PPUSH
65891: PPUSH
65892: PPUSH
65893: PPUSH
65894: PPUSH
65895: PPUSH
65896: PPUSH
// if not units then
65897: LD_VAR 0 1
65901: NOT
65902: IFFALSE 65906
// exit ;
65904: GO 66430
// result := UnitFilter ( units , [ f_ok ] ) ;
65906: LD_ADDR_VAR 0 3
65910: PUSH
65911: LD_VAR 0 1
65915: PPUSH
65916: LD_INT 50
65918: PUSH
65919: EMPTY
65920: LIST
65921: PPUSH
65922: CALL_OW 72
65926: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
65927: LD_ADDR_VAR 0 8
65931: PUSH
65932: LD_VAR 0 1
65936: PUSH
65937: LD_INT 1
65939: ARRAY
65940: PPUSH
65941: CALL_OW 255
65945: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
65946: LD_ADDR_VAR 0 10
65950: PUSH
65951: LD_INT 29
65953: PUSH
65954: LD_INT 91
65956: PUSH
65957: LD_INT 49
65959: PUSH
65960: EMPTY
65961: LIST
65962: LIST
65963: LIST
65964: ST_TO_ADDR
// if not result then
65965: LD_VAR 0 3
65969: NOT
65970: IFFALSE 65974
// exit ;
65972: GO 66430
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
65974: LD_ADDR_VAR 0 5
65978: PUSH
65979: LD_INT 81
65981: PUSH
65982: LD_VAR 0 8
65986: PUSH
65987: EMPTY
65988: LIST
65989: LIST
65990: PPUSH
65991: CALL_OW 69
65995: ST_TO_ADDR
// for i in result do
65996: LD_ADDR_VAR 0 4
66000: PUSH
66001: LD_VAR 0 3
66005: PUSH
66006: FOR_IN
66007: IFFALSE 66428
// begin tag := GetTag ( i ) + 1 ;
66009: LD_ADDR_VAR 0 9
66013: PUSH
66014: LD_VAR 0 4
66018: PPUSH
66019: CALL_OW 110
66023: PUSH
66024: LD_INT 1
66026: PLUS
66027: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
66028: LD_ADDR_VAR 0 7
66032: PUSH
66033: LD_VAR 0 4
66037: PPUSH
66038: CALL_OW 250
66042: PPUSH
66043: LD_VAR 0 4
66047: PPUSH
66048: CALL_OW 251
66052: PPUSH
66053: LD_INT 6
66055: PPUSH
66056: CALL 65629 0 3
66060: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
66061: LD_VAR 0 4
66065: PPUSH
66066: CALL_OW 247
66070: PUSH
66071: LD_INT 2
66073: EQUAL
66074: PUSH
66075: LD_VAR 0 7
66079: AND
66080: PUSH
66081: LD_VAR 0 4
66085: PPUSH
66086: CALL_OW 264
66090: PUSH
66091: LD_VAR 0 10
66095: IN
66096: NOT
66097: AND
66098: IFFALSE 66137
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
66100: LD_VAR 0 4
66104: PPUSH
66105: LD_VAR 0 7
66109: PUSH
66110: LD_INT 1
66112: ARRAY
66113: PUSH
66114: LD_INT 1
66116: ARRAY
66117: PPUSH
66118: LD_VAR 0 7
66122: PUSH
66123: LD_INT 1
66125: ARRAY
66126: PUSH
66127: LD_INT 2
66129: ARRAY
66130: PPUSH
66131: CALL_OW 116
66135: GO 66426
// if path > tag then
66137: LD_VAR 0 2
66141: PUSH
66142: LD_VAR 0 9
66146: GREATER
66147: IFFALSE 66355
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
66149: LD_ADDR_VAR 0 6
66153: PUSH
66154: LD_VAR 0 5
66158: PPUSH
66159: LD_INT 91
66161: PUSH
66162: LD_VAR 0 4
66166: PUSH
66167: LD_INT 8
66169: PUSH
66170: EMPTY
66171: LIST
66172: LIST
66173: LIST
66174: PPUSH
66175: CALL_OW 72
66179: ST_TO_ADDR
// if nearEnemy then
66180: LD_VAR 0 6
66184: IFFALSE 66253
// begin if GetWeapon ( i ) = ru_time_lapser then
66186: LD_VAR 0 4
66190: PPUSH
66191: CALL_OW 264
66195: PUSH
66196: LD_INT 49
66198: EQUAL
66199: IFFALSE 66227
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
66201: LD_VAR 0 4
66205: PPUSH
66206: LD_VAR 0 6
66210: PPUSH
66211: LD_VAR 0 4
66215: PPUSH
66216: CALL_OW 74
66220: PPUSH
66221: CALL_OW 112
66225: GO 66251
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
66227: LD_VAR 0 4
66231: PPUSH
66232: LD_VAR 0 6
66236: PPUSH
66237: LD_VAR 0 4
66241: PPUSH
66242: CALL_OW 74
66246: PPUSH
66247: CALL 67355 0 2
// end else
66251: GO 66353
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
66253: LD_VAR 0 4
66257: PPUSH
66258: LD_VAR 0 2
66262: PUSH
66263: LD_VAR 0 9
66267: ARRAY
66268: PUSH
66269: LD_INT 1
66271: ARRAY
66272: PPUSH
66273: LD_VAR 0 2
66277: PUSH
66278: LD_VAR 0 9
66282: ARRAY
66283: PUSH
66284: LD_INT 2
66286: ARRAY
66287: PPUSH
66288: CALL_OW 297
66292: PUSH
66293: LD_INT 6
66295: GREATER
66296: IFFALSE 66339
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
66298: LD_VAR 0 4
66302: PPUSH
66303: LD_VAR 0 2
66307: PUSH
66308: LD_VAR 0 9
66312: ARRAY
66313: PUSH
66314: LD_INT 1
66316: ARRAY
66317: PPUSH
66318: LD_VAR 0 2
66322: PUSH
66323: LD_VAR 0 9
66327: ARRAY
66328: PUSH
66329: LD_INT 2
66331: ARRAY
66332: PPUSH
66333: CALL_OW 114
66337: GO 66353
// SetTag ( i , tag ) ;
66339: LD_VAR 0 4
66343: PPUSH
66344: LD_VAR 0 9
66348: PPUSH
66349: CALL_OW 109
// end else
66353: GO 66426
// if enemy then
66355: LD_VAR 0 5
66359: IFFALSE 66426
// begin if GetWeapon ( i ) = ru_time_lapser then
66361: LD_VAR 0 4
66365: PPUSH
66366: CALL_OW 264
66370: PUSH
66371: LD_INT 49
66373: EQUAL
66374: IFFALSE 66402
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
66376: LD_VAR 0 4
66380: PPUSH
66381: LD_VAR 0 5
66385: PPUSH
66386: LD_VAR 0 4
66390: PPUSH
66391: CALL_OW 74
66395: PPUSH
66396: CALL_OW 112
66400: GO 66426
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
66402: LD_VAR 0 4
66406: PPUSH
66407: LD_VAR 0 5
66411: PPUSH
66412: LD_VAR 0 4
66416: PPUSH
66417: CALL_OW 74
66421: PPUSH
66422: CALL 67355 0 2
// end ; end ;
66426: GO 66006
66428: POP
66429: POP
// end ;
66430: LD_VAR 0 3
66434: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
66435: LD_INT 0
66437: PPUSH
66438: PPUSH
66439: PPUSH
// if not unit or IsInUnit ( unit ) then
66440: LD_VAR 0 1
66444: NOT
66445: PUSH
66446: LD_VAR 0 1
66450: PPUSH
66451: CALL_OW 310
66455: OR
66456: IFFALSE 66460
// exit ;
66458: GO 66551
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
66460: LD_ADDR_VAR 0 4
66464: PUSH
66465: LD_VAR 0 1
66469: PPUSH
66470: CALL_OW 250
66474: PPUSH
66475: LD_VAR 0 2
66479: PPUSH
66480: LD_INT 1
66482: PPUSH
66483: CALL_OW 272
66487: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
66488: LD_ADDR_VAR 0 5
66492: PUSH
66493: LD_VAR 0 1
66497: PPUSH
66498: CALL_OW 251
66502: PPUSH
66503: LD_VAR 0 2
66507: PPUSH
66508: LD_INT 1
66510: PPUSH
66511: CALL_OW 273
66515: ST_TO_ADDR
// if ValidHex ( x , y ) then
66516: LD_VAR 0 4
66520: PPUSH
66521: LD_VAR 0 5
66525: PPUSH
66526: CALL_OW 488
66530: IFFALSE 66551
// ComTurnXY ( unit , x , y ) ;
66532: LD_VAR 0 1
66536: PPUSH
66537: LD_VAR 0 4
66541: PPUSH
66542: LD_VAR 0 5
66546: PPUSH
66547: CALL_OW 118
// end ;
66551: LD_VAR 0 3
66555: RET
// export function SeeUnits ( side , units ) ; var i ; begin
66556: LD_INT 0
66558: PPUSH
66559: PPUSH
// result := false ;
66560: LD_ADDR_VAR 0 3
66564: PUSH
66565: LD_INT 0
66567: ST_TO_ADDR
// if not units then
66568: LD_VAR 0 2
66572: NOT
66573: IFFALSE 66577
// exit ;
66575: GO 66622
// for i in units do
66577: LD_ADDR_VAR 0 4
66581: PUSH
66582: LD_VAR 0 2
66586: PUSH
66587: FOR_IN
66588: IFFALSE 66620
// if See ( side , i ) then
66590: LD_VAR 0 1
66594: PPUSH
66595: LD_VAR 0 4
66599: PPUSH
66600: CALL_OW 292
66604: IFFALSE 66618
// begin result := true ;
66606: LD_ADDR_VAR 0 3
66610: PUSH
66611: LD_INT 1
66613: ST_TO_ADDR
// exit ;
66614: POP
66615: POP
66616: GO 66622
// end ;
66618: GO 66587
66620: POP
66621: POP
// end ;
66622: LD_VAR 0 3
66626: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
66627: LD_INT 0
66629: PPUSH
66630: PPUSH
66631: PPUSH
66632: PPUSH
// if not unit or not points then
66633: LD_VAR 0 1
66637: NOT
66638: PUSH
66639: LD_VAR 0 2
66643: NOT
66644: OR
66645: IFFALSE 66649
// exit ;
66647: GO 66739
// dist := 99999 ;
66649: LD_ADDR_VAR 0 5
66653: PUSH
66654: LD_INT 99999
66656: ST_TO_ADDR
// for i in points do
66657: LD_ADDR_VAR 0 4
66661: PUSH
66662: LD_VAR 0 2
66666: PUSH
66667: FOR_IN
66668: IFFALSE 66737
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
66670: LD_ADDR_VAR 0 6
66674: PUSH
66675: LD_VAR 0 1
66679: PPUSH
66680: LD_VAR 0 4
66684: PUSH
66685: LD_INT 1
66687: ARRAY
66688: PPUSH
66689: LD_VAR 0 4
66693: PUSH
66694: LD_INT 2
66696: ARRAY
66697: PPUSH
66698: CALL_OW 297
66702: ST_TO_ADDR
// if tmpDist < dist then
66703: LD_VAR 0 6
66707: PUSH
66708: LD_VAR 0 5
66712: LESS
66713: IFFALSE 66735
// begin result := i ;
66715: LD_ADDR_VAR 0 3
66719: PUSH
66720: LD_VAR 0 4
66724: ST_TO_ADDR
// dist := tmpDist ;
66725: LD_ADDR_VAR 0 5
66729: PUSH
66730: LD_VAR 0 6
66734: ST_TO_ADDR
// end ; end ;
66735: GO 66667
66737: POP
66738: POP
// end ;
66739: LD_VAR 0 3
66743: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
66744: LD_INT 0
66746: PPUSH
// uc_side := side ;
66747: LD_ADDR_OWVAR 20
66751: PUSH
66752: LD_VAR 0 1
66756: ST_TO_ADDR
// uc_nation := 3 ;
66757: LD_ADDR_OWVAR 21
66761: PUSH
66762: LD_INT 3
66764: ST_TO_ADDR
// vc_chassis := 25 ;
66765: LD_ADDR_OWVAR 37
66769: PUSH
66770: LD_INT 25
66772: ST_TO_ADDR
// vc_engine := engine_siberite ;
66773: LD_ADDR_OWVAR 39
66777: PUSH
66778: LD_INT 3
66780: ST_TO_ADDR
// vc_control := control_computer ;
66781: LD_ADDR_OWVAR 38
66785: PUSH
66786: LD_INT 3
66788: ST_TO_ADDR
// vc_weapon := 59 ;
66789: LD_ADDR_OWVAR 40
66793: PUSH
66794: LD_INT 59
66796: ST_TO_ADDR
// result := CreateVehicle ;
66797: LD_ADDR_VAR 0 5
66801: PUSH
66802: CALL_OW 45
66806: ST_TO_ADDR
// SetDir ( result , d ) ;
66807: LD_VAR 0 5
66811: PPUSH
66812: LD_VAR 0 4
66816: PPUSH
66817: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
66821: LD_VAR 0 5
66825: PPUSH
66826: LD_VAR 0 2
66830: PPUSH
66831: LD_VAR 0 3
66835: PPUSH
66836: LD_INT 0
66838: PPUSH
66839: CALL_OW 48
// end ;
66843: LD_VAR 0 5
66847: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
66848: LD_INT 0
66850: PPUSH
66851: PPUSH
66852: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
66853: LD_ADDR_VAR 0 2
66857: PUSH
66858: LD_INT 0
66860: PUSH
66861: LD_INT 0
66863: PUSH
66864: LD_INT 0
66866: PUSH
66867: LD_INT 0
66869: PUSH
66870: EMPTY
66871: LIST
66872: LIST
66873: LIST
66874: LIST
66875: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
66876: LD_VAR 0 1
66880: NOT
66881: PUSH
66882: LD_VAR 0 1
66886: PPUSH
66887: CALL_OW 264
66891: PUSH
66892: LD_INT 12
66894: PUSH
66895: LD_INT 51
66897: PUSH
66898: LD_INT 32
66900: PUSH
66901: LD_INT 89
66903: PUSH
66904: EMPTY
66905: LIST
66906: LIST
66907: LIST
66908: LIST
66909: IN
66910: NOT
66911: OR
66912: IFFALSE 66916
// exit ;
66914: GO 67014
// for i := 1 to 3 do
66916: LD_ADDR_VAR 0 3
66920: PUSH
66921: DOUBLE
66922: LD_INT 1
66924: DEC
66925: ST_TO_ADDR
66926: LD_INT 3
66928: PUSH
66929: FOR_TO
66930: IFFALSE 67012
// begin tmp := GetCargo ( cargo , i ) ;
66932: LD_ADDR_VAR 0 4
66936: PUSH
66937: LD_VAR 0 1
66941: PPUSH
66942: LD_VAR 0 3
66946: PPUSH
66947: CALL_OW 289
66951: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
66952: LD_ADDR_VAR 0 2
66956: PUSH
66957: LD_VAR 0 2
66961: PPUSH
66962: LD_VAR 0 3
66966: PPUSH
66967: LD_VAR 0 4
66971: PPUSH
66972: CALL_OW 1
66976: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
66977: LD_ADDR_VAR 0 2
66981: PUSH
66982: LD_VAR 0 2
66986: PPUSH
66987: LD_INT 4
66989: PPUSH
66990: LD_VAR 0 2
66994: PUSH
66995: LD_INT 4
66997: ARRAY
66998: PUSH
66999: LD_VAR 0 4
67003: PLUS
67004: PPUSH
67005: CALL_OW 1
67009: ST_TO_ADDR
// end ;
67010: GO 66929
67012: POP
67013: POP
// end ;
67014: LD_VAR 0 2
67018: RET
// export function Length ( array ) ; begin
67019: LD_INT 0
67021: PPUSH
// result := array + 0 ;
67022: LD_ADDR_VAR 0 2
67026: PUSH
67027: LD_VAR 0 1
67031: PUSH
67032: LD_INT 0
67034: PLUS
67035: ST_TO_ADDR
// end ;
67036: LD_VAR 0 2
67040: RET
// export function PrepareArray ( array ) ; begin
67041: LD_INT 0
67043: PPUSH
// result := array diff 0 ;
67044: LD_ADDR_VAR 0 2
67048: PUSH
67049: LD_VAR 0 1
67053: PUSH
67054: LD_INT 0
67056: DIFF
67057: ST_TO_ADDR
// if not result [ 1 ] then
67058: LD_VAR 0 2
67062: PUSH
67063: LD_INT 1
67065: ARRAY
67066: NOT
67067: IFFALSE 67087
// result := Delete ( result , 1 ) ;
67069: LD_ADDR_VAR 0 2
67073: PUSH
67074: LD_VAR 0 2
67078: PPUSH
67079: LD_INT 1
67081: PPUSH
67082: CALL_OW 3
67086: ST_TO_ADDR
// end ;
67087: LD_VAR 0 2
67091: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
67092: LD_INT 0
67094: PPUSH
67095: PPUSH
67096: PPUSH
67097: PPUSH
// sibRocketRange := 25 ;
67098: LD_ADDR_VAR 0 6
67102: PUSH
67103: LD_INT 25
67105: ST_TO_ADDR
// result := false ;
67106: LD_ADDR_VAR 0 4
67110: PUSH
67111: LD_INT 0
67113: ST_TO_ADDR
// for i := 0 to 5 do
67114: LD_ADDR_VAR 0 5
67118: PUSH
67119: DOUBLE
67120: LD_INT 0
67122: DEC
67123: ST_TO_ADDR
67124: LD_INT 5
67126: PUSH
67127: FOR_TO
67128: IFFALSE 67195
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
67130: LD_VAR 0 1
67134: PPUSH
67135: LD_VAR 0 5
67139: PPUSH
67140: LD_VAR 0 6
67144: PPUSH
67145: CALL_OW 272
67149: PPUSH
67150: LD_VAR 0 2
67154: PPUSH
67155: LD_VAR 0 5
67159: PPUSH
67160: LD_VAR 0 6
67164: PPUSH
67165: CALL_OW 273
67169: PPUSH
67170: LD_VAR 0 3
67174: PPUSH
67175: CALL_OW 309
67179: IFFALSE 67193
// begin result := true ;
67181: LD_ADDR_VAR 0 4
67185: PUSH
67186: LD_INT 1
67188: ST_TO_ADDR
// exit ;
67189: POP
67190: POP
67191: GO 67197
// end ;
67193: GO 67127
67195: POP
67196: POP
// end ;
67197: LD_VAR 0 4
67201: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
67202: LD_INT 0
67204: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
67205: LD_VAR 0 1
67209: PPUSH
67210: LD_VAR 0 2
67214: PPUSH
67215: LD_INT 0
67217: PPUSH
67218: LD_INT 0
67220: PPUSH
67221: LD_INT 1
67223: PPUSH
67224: LD_INT 0
67226: PPUSH
67227: CALL_OW 587
// end ;
67231: LD_VAR 0 3
67235: RET
// export function CenterOnNow ( unit ) ; begin
67236: LD_INT 0
67238: PPUSH
// result := IsInUnit ( unit ) ;
67239: LD_ADDR_VAR 0 2
67243: PUSH
67244: LD_VAR 0 1
67248: PPUSH
67249: CALL_OW 310
67253: ST_TO_ADDR
// if not result then
67254: LD_VAR 0 2
67258: NOT
67259: IFFALSE 67271
// result := unit ;
67261: LD_ADDR_VAR 0 2
67265: PUSH
67266: LD_VAR 0 1
67270: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
67271: LD_VAR 0 1
67275: PPUSH
67276: CALL_OW 87
// end ;
67280: LD_VAR 0 2
67284: RET
// export function ComMoveHex ( unit , hex ) ; begin
67285: LD_INT 0
67287: PPUSH
// if not hex then
67288: LD_VAR 0 2
67292: NOT
67293: IFFALSE 67297
// exit ;
67295: GO 67350
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
67297: LD_VAR 0 2
67301: PUSH
67302: LD_INT 1
67304: ARRAY
67305: PPUSH
67306: LD_VAR 0 2
67310: PUSH
67311: LD_INT 2
67313: ARRAY
67314: PPUSH
67315: CALL_OW 428
67319: IFFALSE 67323
// exit ;
67321: GO 67350
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
67323: LD_VAR 0 1
67327: PPUSH
67328: LD_VAR 0 2
67332: PUSH
67333: LD_INT 1
67335: ARRAY
67336: PPUSH
67337: LD_VAR 0 2
67341: PUSH
67342: LD_INT 2
67344: ARRAY
67345: PPUSH
67346: CALL_OW 111
// end ;
67350: LD_VAR 0 3
67354: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
67355: LD_INT 0
67357: PPUSH
67358: PPUSH
67359: PPUSH
// if not unit or not enemy then
67360: LD_VAR 0 1
67364: NOT
67365: PUSH
67366: LD_VAR 0 2
67370: NOT
67371: OR
67372: IFFALSE 67376
// exit ;
67374: GO 67500
// x := GetX ( enemy ) ;
67376: LD_ADDR_VAR 0 4
67380: PUSH
67381: LD_VAR 0 2
67385: PPUSH
67386: CALL_OW 250
67390: ST_TO_ADDR
// y := GetY ( enemy ) ;
67391: LD_ADDR_VAR 0 5
67395: PUSH
67396: LD_VAR 0 2
67400: PPUSH
67401: CALL_OW 251
67405: ST_TO_ADDR
// if ValidHex ( x , y ) then
67406: LD_VAR 0 4
67410: PPUSH
67411: LD_VAR 0 5
67415: PPUSH
67416: CALL_OW 488
67420: IFFALSE 67500
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
67422: LD_VAR 0 2
67426: PPUSH
67427: CALL_OW 247
67431: PUSH
67432: LD_INT 3
67434: PUSH
67435: LD_INT 2
67437: PUSH
67438: EMPTY
67439: LIST
67440: LIST
67441: IN
67442: PUSH
67443: LD_VAR 0 1
67447: PPUSH
67448: CALL_OW 255
67452: PPUSH
67453: LD_VAR 0 2
67457: PPUSH
67458: CALL_OW 292
67462: AND
67463: IFFALSE 67481
// ComAttackUnit ( unit , enemy ) else
67465: LD_VAR 0 1
67469: PPUSH
67470: LD_VAR 0 2
67474: PPUSH
67475: CALL_OW 115
67479: GO 67500
// ComAgressiveMove ( unit , x , y ) ;
67481: LD_VAR 0 1
67485: PPUSH
67486: LD_VAR 0 4
67490: PPUSH
67491: LD_VAR 0 5
67495: PPUSH
67496: CALL_OW 114
// end ; end_of_file
67500: LD_VAR 0 3
67504: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
67505: LD_VAR 0 1
67509: PPUSH
67510: LD_VAR 0 2
67514: PPUSH
67515: LD_VAR 0 3
67519: PPUSH
67520: LD_VAR 0 4
67524: PPUSH
67525: LD_VAR 0 5
67529: PPUSH
67530: LD_VAR 0 6
67534: PPUSH
67535: CALL 6026 0 6
// end ;
67539: PPOPN 6
67541: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
67542: LD_INT 0
67544: PPUSH
// begin if not units then
67545: LD_VAR 0 1
67549: NOT
67550: IFFALSE 67554
// exit ;
67552: GO 67554
// end ;
67554: PPOPN 7
67556: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
67557: CALL 5930 0 0
// end ; end_of_file
67561: PPOPN 1
67563: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
67564: LD_VAR 0 1
67568: PUSH
67569: LD_INT 200
67571: DOUBLE
67572: GREATEREQUAL
67573: IFFALSE 67581
67575: LD_INT 299
67577: DOUBLE
67578: LESSEQUAL
67579: IFTRUE 67583
67581: GO 67615
67583: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
67584: LD_VAR 0 1
67588: PPUSH
67589: LD_VAR 0 2
67593: PPUSH
67594: LD_VAR 0 3
67598: PPUSH
67599: LD_VAR 0 4
67603: PPUSH
67604: LD_VAR 0 5
67608: PPUSH
67609: CALL 22049 0 5
67613: GO 67692
67615: LD_INT 300
67617: DOUBLE
67618: GREATEREQUAL
67619: IFFALSE 67627
67621: LD_INT 399
67623: DOUBLE
67624: LESSEQUAL
67625: IFTRUE 67629
67627: GO 67691
67629: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
67630: LD_VAR 0 1
67634: PPUSH
67635: LD_VAR 0 2
67639: PPUSH
67640: LD_VAR 0 3
67644: PPUSH
67645: LD_VAR 0 4
67649: PPUSH
67650: LD_VAR 0 5
67654: PPUSH
67655: LD_VAR 0 6
67659: PPUSH
67660: LD_VAR 0 7
67664: PPUSH
67665: LD_VAR 0 8
67669: PPUSH
67670: LD_VAR 0 9
67674: PPUSH
67675: LD_VAR 0 10
67679: PPUSH
67680: LD_VAR 0 11
67684: PPUSH
67685: CALL 18374 0 11
67689: GO 67692
67691: POP
// end ;
67692: PPOPN 11
67694: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
67695: LD_VAR 0 1
67699: PPUSH
67700: LD_VAR 0 2
67704: PPUSH
67705: LD_VAR 0 3
67709: PPUSH
67710: LD_VAR 0 4
67714: PPUSH
67715: LD_VAR 0 5
67719: PPUSH
67720: CALL 21785 0 5
// end ;
67724: PPOPN 5
67726: END
