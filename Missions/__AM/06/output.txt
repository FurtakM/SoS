// export JMM , Gladstone , Denis , Lisa , Frank , Bobby , Cyrus , Brown , Donaldson ; export others , randomsDelta ; export apemans , yourApemans ; export yourVehicles ; export DeltaDoctor ; export Harisson ; export selectedPeople ; export baseCorrect ; export cutscene ; export lab ; export resources ; export mission_prefix , mission_prefix_prev ; starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// FogOff ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 344
// baseCorrect = 0 ;
  15: LD_ADDR_EXP 18
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// cutscene = 1 ;
  23: LD_ADDR_EXP 19
  27: PUSH
  28: LD_INT 1
  30: ST_TO_ADDR
// apemans = [ ] ;
  31: LD_ADDR_EXP 12
  35: PUSH
  36: EMPTY
  37: ST_TO_ADDR
// yourApemans = [ ] ;
  38: LD_ADDR_EXP 13
  42: PUSH
  43: EMPTY
  44: ST_TO_ADDR
// yourVehicles = [ ] ;
  45: LD_ADDR_EXP 14
  49: PUSH
  50: EMPTY
  51: ST_TO_ADDR
// randomsDelta := [ ] ;
  52: LD_ADDR_EXP 11
  56: PUSH
  57: EMPTY
  58: ST_TO_ADDR
// resources = [ ] ;
  59: LD_ADDR_EXP 21
  63: PUSH
  64: EMPTY
  65: ST_TO_ADDR
// mission_prefix := 06_ ;
  66: LD_ADDR_EXP 22
  70: PUSH
  71: LD_STRING 06_
  73: ST_TO_ADDR
// mission_prefix_prev := 05_ ;
  74: LD_ADDR_EXP 23
  78: PUSH
  79: LD_STRING 05_
  81: ST_TO_ADDR
// CreateNature ;
  82: CALL 166 0 0
// PrepareDeltaBase ;
  86: CALL 2408 0 0
// LoadVehicles ;
  90: CALL 1448 0 0
// PrepareHeroes ;
  94: CALL 287 0 0
// PrepareRandoms ;
  98: CALL 1749 0 0
// lab = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
 102: LD_ADDR_EXP 20
 106: PUSH
 107: LD_INT 22
 109: PUSH
 110: LD_INT 1
 112: PUSH
 113: EMPTY
 114: LIST
 115: LIST
 116: PUSH
 117: LD_INT 2
 119: PUSH
 120: LD_INT 30
 122: PUSH
 123: LD_INT 6
 125: PUSH
 126: EMPTY
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 30
 132: PUSH
 133: LD_INT 7
 135: PUSH
 136: EMPTY
 137: LIST
 138: LIST
 139: PUSH
 140: LD_INT 30
 142: PUSH
 143: LD_INT 8
 145: PUSH
 146: EMPTY
 147: LIST
 148: LIST
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: LIST
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: PPUSH
 160: CALL_OW 69
 164: ST_TO_ADDR
// end ;
 165: END
// export function CreateNature ; var i ; begin
 166: LD_INT 0
 168: PPUSH
 169: PPUSH
// uc_side := 0 ;
 170: LD_ADDR_OWVAR 20
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// uc_nation := 0 ;
 178: LD_ADDR_OWVAR 21
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// for i = 1 to 4 do
 186: LD_ADDR_VAR 0 2
 190: PUSH
 191: DOUBLE
 192: LD_INT 1
 194: DEC
 195: ST_TO_ADDR
 196: LD_INT 4
 198: PUSH
 199: FOR_TO
 200: IFFALSE 280
// begin hc_gallery :=  ;
 202: LD_ADDR_OWVAR 33
 206: PUSH
 207: LD_STRING 
 209: ST_TO_ADDR
// hc_name :=  ;
 210: LD_ADDR_OWVAR 26
 214: PUSH
 215: LD_STRING 
 217: ST_TO_ADDR
// hc_attr := [ rand ( 10 , 11 ) , rand ( 10 , 12 ) ] ;
 218: LD_ADDR_OWVAR 29
 222: PUSH
 223: LD_INT 10
 225: PPUSH
 226: LD_INT 11
 228: PPUSH
 229: CALL_OW 12
 233: PUSH
 234: LD_INT 10
 236: PPUSH
 237: LD_INT 12
 239: PPUSH
 240: CALL_OW 12
 244: PUSH
 245: EMPTY
 246: LIST
 247: LIST
 248: ST_TO_ADDR
// hc_class := class_apeman ;
 249: LD_ADDR_OWVAR 28
 253: PUSH
 254: LD_INT 12
 256: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , 22 , 18 , 20 , false ) ;
 257: CALL_OW 44
 261: PPUSH
 262: LD_INT 22
 264: PPUSH
 265: LD_INT 18
 267: PPUSH
 268: LD_INT 20
 270: PPUSH
 271: LD_INT 0
 273: PPUSH
 274: CALL_OW 50
// end ;
 278: GO 199
 280: POP
 281: POP
// end ; end_of_file
 282: LD_VAR 0 1
 286: RET
// export function PrepareHeroes ; var i , tmp , ape , test ; begin
 287: LD_INT 0
 289: PPUSH
 290: PPUSH
 291: PPUSH
 292: PPUSH
 293: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
 294: LD_ADDR_VAR 0 3
 298: PUSH
 299: LD_INT 22
 301: PUSH
 302: LD_INT 1
 304: PUSH
 305: EMPTY
 306: LIST
 307: LIST
 308: PUSH
 309: LD_INT 21
 311: PUSH
 312: LD_INT 3
 314: PUSH
 315: EMPTY
 316: LIST
 317: LIST
 318: PUSH
 319: LD_INT 30
 321: PUSH
 322: LD_INT 0
 324: PUSH
 325: EMPTY
 326: LIST
 327: LIST
 328: PUSH
 329: EMPTY
 330: LIST
 331: LIST
 332: LIST
 333: PPUSH
 334: CALL_OW 69
 338: ST_TO_ADDR
// SetBName ( tmp [ 1 ] , delta ) ;
 339: LD_VAR 0 3
 343: PUSH
 344: LD_INT 1
 346: ARRAY
 347: PPUSH
 348: LD_STRING delta
 350: PPUSH
 351: CALL_OW 500
// uc_side = 1 ;
 355: LD_ADDR_OWVAR 20
 359: PUSH
 360: LD_INT 1
 362: ST_TO_ADDR
// uc_nation = 1 ;
 363: LD_ADDR_OWVAR 21
 367: PUSH
 368: LD_INT 1
 370: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true , mission_prefix_prev ) ;
 371: LD_ADDR_EXP 1
 375: PUSH
 376: LD_STRING JMM
 378: PPUSH
 379: LD_INT 1
 381: PPUSH
 382: LD_EXP 23
 386: PPUSH
 387: CALL 20444 0 3
 391: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ,  ) ;
 392: LD_ADDR_EXP 16
 396: PUSH
 397: LD_STRING Harisson
 399: PPUSH
 400: LD_INT 0
 402: PPUSH
 403: LD_STRING 
 405: PPUSH
 406: CALL 20444 0 3
 410: ST_TO_ADDR
// PlaceUnitXYR ( JMM , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 411: LD_EXP 1
 415: PPUSH
 416: LD_VAR 0 3
 420: PUSH
 421: LD_INT 1
 423: ARRAY
 424: PPUSH
 425: CALL_OW 250
 429: PPUSH
 430: LD_VAR 0 3
 434: PUSH
 435: LD_INT 1
 437: ARRAY
 438: PPUSH
 439: CALL_OW 251
 443: PPUSH
 444: LD_INT 5
 446: PPUSH
 447: LD_INT 0
 449: PPUSH
 450: CALL_OW 50
// SetClass ( JMM , 1 ) ;
 454: LD_EXP 1
 458: PPUSH
 459: LD_INT 1
 461: PPUSH
 462: CALL_OW 336
// Gladstone = PrepareUnit ( Gladstone , true , mission_prefix_prev ) ;
 466: LD_ADDR_EXP 2
 470: PUSH
 471: LD_STRING Gladstone
 473: PPUSH
 474: LD_INT 1
 476: PPUSH
 477: LD_EXP 23
 481: PPUSH
 482: CALL 20444 0 3
 486: ST_TO_ADDR
// PlaceUnitXYR ( Gladstone , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 487: LD_EXP 2
 491: PPUSH
 492: LD_VAR 0 3
 496: PUSH
 497: LD_INT 1
 499: ARRAY
 500: PPUSH
 501: CALL_OW 250
 505: PPUSH
 506: LD_VAR 0 3
 510: PUSH
 511: LD_INT 1
 513: ARRAY
 514: PPUSH
 515: CALL_OW 251
 519: PPUSH
 520: LD_INT 5
 522: PPUSH
 523: LD_INT 0
 525: PPUSH
 526: CALL_OW 50
// SetClass ( Gladstone , 4 ) ;
 530: LD_EXP 2
 534: PPUSH
 535: LD_INT 4
 537: PPUSH
 538: CALL_OW 336
// Denis = PrepareUnit ( Denis , true , mission_prefix_prev ) ;
 542: LD_ADDR_EXP 3
 546: PUSH
 547: LD_STRING Denis
 549: PPUSH
 550: LD_INT 1
 552: PPUSH
 553: LD_EXP 23
 557: PPUSH
 558: CALL 20444 0 3
 562: ST_TO_ADDR
// PlaceUnitXYR ( Denis , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 563: LD_EXP 3
 567: PPUSH
 568: LD_VAR 0 3
 572: PUSH
 573: LD_INT 1
 575: ARRAY
 576: PPUSH
 577: CALL_OW 250
 581: PPUSH
 582: LD_VAR 0 3
 586: PUSH
 587: LD_INT 1
 589: ARRAY
 590: PPUSH
 591: CALL_OW 251
 595: PPUSH
 596: LD_INT 5
 598: PPUSH
 599: LD_INT 0
 601: PPUSH
 602: CALL_OW 50
// SetClass ( Denis , 4 ) ;
 606: LD_EXP 3
 610: PPUSH
 611: LD_INT 4
 613: PPUSH
 614: CALL_OW 336
// if LoadVariable ( FrankInDelta , 0 ) = 1 then
 618: LD_STRING FrankInDelta
 620: PPUSH
 621: LD_INT 0
 623: PPUSH
 624: CALL_OW 30
 628: PUSH
 629: LD_INT 1
 631: EQUAL
 632: IFFALSE 710
// begin Frank = PrepareUnit ( Frank , true , mission_prefix_prev ) ;
 634: LD_ADDR_EXP 5
 638: PUSH
 639: LD_STRING Frank
 641: PPUSH
 642: LD_INT 1
 644: PPUSH
 645: LD_EXP 23
 649: PPUSH
 650: CALL 20444 0 3
 654: ST_TO_ADDR
// PlaceUnitXYR ( Frank , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 655: LD_EXP 5
 659: PPUSH
 660: LD_VAR 0 3
 664: PUSH
 665: LD_INT 1
 667: ARRAY
 668: PPUSH
 669: CALL_OW 250
 673: PPUSH
 674: LD_VAR 0 3
 678: PUSH
 679: LD_INT 1
 681: ARRAY
 682: PPUSH
 683: CALL_OW 251
 687: PPUSH
 688: LD_INT 5
 690: PPUSH
 691: LD_INT 0
 693: PPUSH
 694: CALL_OW 50
// SetClass ( Frank , 1 ) ;
 698: LD_EXP 5
 702: PPUSH
 703: LD_INT 1
 705: PPUSH
 706: CALL_OW 336
// end ; if LoadVariable ( LisaInDelta , 0 ) = 1 then
 710: LD_STRING LisaInDelta
 712: PPUSH
 713: LD_INT 0
 715: PPUSH
 716: CALL_OW 30
 720: PUSH
 721: LD_INT 1
 723: EQUAL
 724: IFFALSE 802
// begin Lisa = PrepareUnit ( Lisa , true , mission_prefix_prev ) ;
 726: LD_ADDR_EXP 4
 730: PUSH
 731: LD_STRING Lisa
 733: PPUSH
 734: LD_INT 1
 736: PPUSH
 737: LD_EXP 23
 741: PPUSH
 742: CALL 20444 0 3
 746: ST_TO_ADDR
// PlaceUnitXYR ( Lisa , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 747: LD_EXP 4
 751: PPUSH
 752: LD_VAR 0 3
 756: PUSH
 757: LD_INT 1
 759: ARRAY
 760: PPUSH
 761: CALL_OW 250
 765: PPUSH
 766: LD_VAR 0 3
 770: PUSH
 771: LD_INT 1
 773: ARRAY
 774: PPUSH
 775: CALL_OW 251
 779: PPUSH
 780: LD_INT 5
 782: PPUSH
 783: LD_INT 0
 785: PPUSH
 786: CALL_OW 50
// SetClass ( Lisa , 1 ) ;
 790: LD_EXP 4
 794: PPUSH
 795: LD_INT 1
 797: PPUSH
 798: CALL_OW 336
// end ; if LoadVariable ( BobbyInDelta , 0 ) = 1 then
 802: LD_STRING BobbyInDelta
 804: PPUSH
 805: LD_INT 0
 807: PPUSH
 808: CALL_OW 30
 812: PUSH
 813: LD_INT 1
 815: EQUAL
 816: IFFALSE 894
// begin Bobby = PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 818: LD_ADDR_EXP 6
 822: PUSH
 823: LD_STRING Bobby
 825: PPUSH
 826: LD_INT 1
 828: PPUSH
 829: LD_EXP 23
 833: PPUSH
 834: CALL 20444 0 3
 838: ST_TO_ADDR
// PlaceUnitXYR ( Bobby , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 839: LD_EXP 6
 843: PPUSH
 844: LD_VAR 0 3
 848: PUSH
 849: LD_INT 1
 851: ARRAY
 852: PPUSH
 853: CALL_OW 250
 857: PPUSH
 858: LD_VAR 0 3
 862: PUSH
 863: LD_INT 1
 865: ARRAY
 866: PPUSH
 867: CALL_OW 251
 871: PPUSH
 872: LD_INT 5
 874: PPUSH
 875: LD_INT 0
 877: PPUSH
 878: CALL_OW 50
// SetClass ( Bobby , 1 ) ;
 882: LD_EXP 6
 886: PPUSH
 887: LD_INT 1
 889: PPUSH
 890: CALL_OW 336
// end ; if LoadVariable ( CyrusInDelta , 0 ) = 1 then
 894: LD_STRING CyrusInDelta
 896: PPUSH
 897: LD_INT 0
 899: PPUSH
 900: CALL_OW 30
 904: PUSH
 905: LD_INT 1
 907: EQUAL
 908: IFFALSE 986
// begin Cyrus = PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
 910: LD_ADDR_EXP 7
 914: PUSH
 915: LD_STRING Cyrus
 917: PPUSH
 918: LD_INT 1
 920: PPUSH
 921: LD_EXP 23
 925: PPUSH
 926: CALL 20444 0 3
 930: ST_TO_ADDR
// PlaceUnitXYR ( Cyrus , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 931: LD_EXP 7
 935: PPUSH
 936: LD_VAR 0 3
 940: PUSH
 941: LD_INT 1
 943: ARRAY
 944: PPUSH
 945: CALL_OW 250
 949: PPUSH
 950: LD_VAR 0 3
 954: PUSH
 955: LD_INT 1
 957: ARRAY
 958: PPUSH
 959: CALL_OW 251
 963: PPUSH
 964: LD_INT 5
 966: PPUSH
 967: LD_INT 0
 969: PPUSH
 970: CALL_OW 50
// SetClass ( Cyrus , 1 ) ;
 974: LD_EXP 7
 978: PPUSH
 979: LD_INT 1
 981: PPUSH
 982: CALL_OW 336
// end ; if LoadVariable ( DonaldsonInDelta , 0 ) = 1 then
 986: LD_STRING DonaldsonInDelta
 988: PPUSH
 989: LD_INT 0
 991: PPUSH
 992: CALL_OW 30
 996: PUSH
 997: LD_INT 1
 999: EQUAL
1000: IFFALSE 1078
// begin Donaldson = PrepareUnit ( Donaldson , true , mission_prefix_prev ) ;
1002: LD_ADDR_EXP 9
1006: PUSH
1007: LD_STRING Donaldson
1009: PPUSH
1010: LD_INT 1
1012: PPUSH
1013: LD_EXP 23
1017: PPUSH
1018: CALL 20444 0 3
1022: ST_TO_ADDR
// PlaceUnitXYR ( Donaldson , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1023: LD_EXP 9
1027: PPUSH
1028: LD_VAR 0 3
1032: PUSH
1033: LD_INT 1
1035: ARRAY
1036: PPUSH
1037: CALL_OW 250
1041: PPUSH
1042: LD_VAR 0 3
1046: PUSH
1047: LD_INT 1
1049: ARRAY
1050: PPUSH
1051: CALL_OW 251
1055: PPUSH
1056: LD_INT 5
1058: PPUSH
1059: LD_INT 0
1061: PPUSH
1062: CALL_OW 50
// SetClass ( Donaldson , 1 ) ;
1066: LD_EXP 9
1070: PPUSH
1071: LD_INT 1
1073: PPUSH
1074: CALL_OW 336
// end ; if LoadVariable ( BrownInDelta , 0 ) = 1 then
1078: LD_STRING BrownInDelta
1080: PPUSH
1081: LD_INT 0
1083: PPUSH
1084: CALL_OW 30
1088: PUSH
1089: LD_INT 1
1091: EQUAL
1092: IFFALSE 1170
// begin Brown = PrepareUnit ( Brown , true , mission_prefix_prev ) ;
1094: LD_ADDR_EXP 8
1098: PUSH
1099: LD_STRING Brown
1101: PPUSH
1102: LD_INT 1
1104: PPUSH
1105: LD_EXP 23
1109: PPUSH
1110: CALL 20444 0 3
1114: ST_TO_ADDR
// PlaceUnitXYR ( Brown , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1115: LD_EXP 8
1119: PPUSH
1120: LD_VAR 0 3
1124: PUSH
1125: LD_INT 1
1127: ARRAY
1128: PPUSH
1129: CALL_OW 250
1133: PPUSH
1134: LD_VAR 0 3
1138: PUSH
1139: LD_INT 1
1141: ARRAY
1142: PPUSH
1143: CALL_OW 251
1147: PPUSH
1148: LD_INT 5
1150: PPUSH
1151: LD_INT 0
1153: PPUSH
1154: CALL_OW 50
// SetClass ( Brown , 2 ) ;
1158: LD_EXP 8
1162: PPUSH
1163: LD_INT 2
1165: PPUSH
1166: CALL_OW 336
// end ; others = CreateCharacterSet ( othersInDelta ) ;
1170: LD_ADDR_EXP 10
1174: PUSH
1175: LD_STRING othersInDelta
1177: PPUSH
1178: CALL_OW 31
1182: ST_TO_ADDR
// for i in others do
1183: LD_ADDR_VAR 0 2
1187: PUSH
1188: LD_EXP 10
1192: PUSH
1193: FOR_IN
1194: IFFALSE 1241
// PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1196: LD_VAR 0 2
1200: PPUSH
1201: LD_VAR 0 3
1205: PUSH
1206: LD_INT 1
1208: ARRAY
1209: PPUSH
1210: CALL_OW 250
1214: PPUSH
1215: LD_VAR 0 3
1219: PUSH
1220: LD_INT 1
1222: ARRAY
1223: PPUSH
1224: CALL_OW 251
1228: PPUSH
1229: LD_INT 35
1231: PPUSH
1232: LD_INT 0
1234: PPUSH
1235: CALL_OW 50
1239: GO 1193
1241: POP
1242: POP
// apemans = CreateCharacterSet ( apeInDelta ) ;
1243: LD_ADDR_EXP 12
1247: PUSH
1248: LD_STRING apeInDelta
1250: PPUSH
1251: CALL_OW 31
1255: ST_TO_ADDR
// uc_nation = 0 ;
1256: LD_ADDR_OWVAR 21
1260: PUSH
1261: LD_INT 0
1263: ST_TO_ADDR
// if apemans > 5 then
1264: LD_EXP 12
1268: PUSH
1269: LD_INT 5
1271: GREATER
1272: IFFALSE 1367
// begin for i := 1 to 5 do
1274: LD_ADDR_VAR 0 2
1278: PUSH
1279: DOUBLE
1280: LD_INT 1
1282: DEC
1283: ST_TO_ADDR
1284: LD_INT 5
1286: PUSH
1287: FOR_TO
1288: IFFALSE 1363
// begin PlaceUnitXYR ( apemans [ i ] , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1290: LD_EXP 12
1294: PUSH
1295: LD_VAR 0 2
1299: ARRAY
1300: PPUSH
1301: LD_VAR 0 3
1305: PUSH
1306: LD_INT 1
1308: ARRAY
1309: PPUSH
1310: CALL_OW 250
1314: PPUSH
1315: LD_VAR 0 3
1319: PUSH
1320: LD_INT 1
1322: ARRAY
1323: PPUSH
1324: CALL_OW 251
1328: PPUSH
1329: LD_INT 50
1331: PPUSH
1332: LD_INT 0
1334: PPUSH
1335: CALL_OW 50
// yourApemans = yourApemans ^ apemans [ i ] ;
1339: LD_ADDR_EXP 13
1343: PUSH
1344: LD_EXP 13
1348: PUSH
1349: LD_EXP 12
1353: PUSH
1354: LD_VAR 0 2
1358: ARRAY
1359: ADD
1360: ST_TO_ADDR
// end ;
1361: GO 1287
1363: POP
1364: POP
// end else
1365: GO 1443
// begin for i in apemans do
1367: LD_ADDR_VAR 0 2
1371: PUSH
1372: LD_EXP 12
1376: PUSH
1377: FOR_IN
1378: IFFALSE 1441
// begin PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1380: LD_VAR 0 2
1384: PPUSH
1385: LD_VAR 0 3
1389: PUSH
1390: LD_INT 1
1392: ARRAY
1393: PPUSH
1394: CALL_OW 250
1398: PPUSH
1399: LD_VAR 0 3
1403: PUSH
1404: LD_INT 1
1406: ARRAY
1407: PPUSH
1408: CALL_OW 251
1412: PPUSH
1413: LD_INT 50
1415: PPUSH
1416: LD_INT 0
1418: PPUSH
1419: CALL_OW 50
// yourApemans = yourApemans ^ i ;
1423: LD_ADDR_EXP 13
1427: PUSH
1428: LD_EXP 13
1432: PUSH
1433: LD_VAR 0 2
1437: ADD
1438: ST_TO_ADDR
// end ;
1439: GO 1377
1441: POP
1442: POP
// end ; end ;
1443: LD_VAR 0 1
1447: RET
// export function LoadVehicles ; var i , veh , tmp , vehicles ; begin
1448: LD_INT 0
1450: PPUSH
1451: PPUSH
1452: PPUSH
1453: PPUSH
1454: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1455: LD_ADDR_VAR 0 4
1459: PUSH
1460: LD_INT 22
1462: PUSH
1463: LD_INT 1
1465: PUSH
1466: EMPTY
1467: LIST
1468: LIST
1469: PUSH
1470: LD_INT 21
1472: PUSH
1473: LD_INT 3
1475: PUSH
1476: EMPTY
1477: LIST
1478: LIST
1479: PUSH
1480: LD_INT 30
1482: PUSH
1483: LD_INT 0
1485: PUSH
1486: EMPTY
1487: LIST
1488: LIST
1489: PUSH
1490: EMPTY
1491: LIST
1492: LIST
1493: LIST
1494: PPUSH
1495: CALL_OW 69
1499: ST_TO_ADDR
// uc_side = 1 ;
1500: LD_ADDR_OWVAR 20
1504: PUSH
1505: LD_INT 1
1507: ST_TO_ADDR
// vehicles = LoadVariable ( vehiclesInDelta , [ ] ) ;
1508: LD_ADDR_VAR 0 5
1512: PUSH
1513: LD_STRING vehiclesInDelta
1515: PPUSH
1516: EMPTY
1517: PPUSH
1518: CALL_OW 30
1522: ST_TO_ADDR
// for i = 1 to vehicles do
1523: LD_ADDR_VAR 0 2
1527: PUSH
1528: DOUBLE
1529: LD_INT 1
1531: DEC
1532: ST_TO_ADDR
1533: LD_VAR 0 5
1537: PUSH
1538: FOR_TO
1539: IFFALSE 1742
// begin if vehicles [ i + 4 ] = 11 or vehicles [ i ] = 3 then
1541: LD_VAR 0 5
1545: PUSH
1546: LD_VAR 0 2
1550: PUSH
1551: LD_INT 4
1553: PLUS
1554: ARRAY
1555: PUSH
1556: LD_INT 11
1558: EQUAL
1559: PUSH
1560: LD_VAR 0 5
1564: PUSH
1565: LD_VAR 0 2
1569: ARRAY
1570: PUSH
1571: LD_INT 3
1573: EQUAL
1574: OR
1575: IFFALSE 1726
// begin uc_nation = vehicles [ i ] ;
1577: LD_ADDR_OWVAR 21
1581: PUSH
1582: LD_VAR 0 5
1586: PUSH
1587: LD_VAR 0 2
1591: ARRAY
1592: ST_TO_ADDR
// vc_chassis = vehicles [ i + 1 ] ;
1593: LD_ADDR_OWVAR 37
1597: PUSH
1598: LD_VAR 0 5
1602: PUSH
1603: LD_VAR 0 2
1607: PUSH
1608: LD_INT 1
1610: PLUS
1611: ARRAY
1612: ST_TO_ADDR
// vc_engine = vehicles [ i + 2 ] ;
1613: LD_ADDR_OWVAR 39
1617: PUSH
1618: LD_VAR 0 5
1622: PUSH
1623: LD_VAR 0 2
1627: PUSH
1628: LD_INT 2
1630: PLUS
1631: ARRAY
1632: ST_TO_ADDR
// vc_control = vehicles [ i + 3 ] ;
1633: LD_ADDR_OWVAR 38
1637: PUSH
1638: LD_VAR 0 5
1642: PUSH
1643: LD_VAR 0 2
1647: PUSH
1648: LD_INT 3
1650: PLUS
1651: ARRAY
1652: ST_TO_ADDR
// vc_weapon = vehicles [ i + 4 ] ;
1653: LD_ADDR_OWVAR 40
1657: PUSH
1658: LD_VAR 0 5
1662: PUSH
1663: LD_VAR 0 2
1667: PUSH
1668: LD_INT 4
1670: PLUS
1671: ARRAY
1672: ST_TO_ADDR
// veh = CreateVehicle ;
1673: LD_ADDR_VAR 0 3
1677: PUSH
1678: CALL_OW 45
1682: ST_TO_ADDR
// PlaceUnitXYR ( veh , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 40 , false ) ;
1683: LD_VAR 0 3
1687: PPUSH
1688: LD_VAR 0 4
1692: PUSH
1693: LD_INT 1
1695: ARRAY
1696: PPUSH
1697: CALL_OW 250
1701: PPUSH
1702: LD_VAR 0 4
1706: PUSH
1707: LD_INT 1
1709: ARRAY
1710: PPUSH
1711: CALL_OW 251
1715: PPUSH
1716: LD_INT 40
1718: PPUSH
1719: LD_INT 0
1721: PPUSH
1722: CALL_OW 50
// end ; i = i + 4 ;
1726: LD_ADDR_VAR 0 2
1730: PUSH
1731: LD_VAR 0 2
1735: PUSH
1736: LD_INT 4
1738: PLUS
1739: ST_TO_ADDR
// end ;
1740: GO 1538
1742: POP
1743: POP
// end ;
1744: LD_VAR 0 1
1748: RET
// export function PrepareRandoms ; var i , un , tmp , filter ; begin
1749: LD_INT 0
1751: PPUSH
1752: PPUSH
1753: PPUSH
1754: PPUSH
1755: PPUSH
// uc_side = 1 ;
1756: LD_ADDR_OWVAR 20
1760: PUSH
1761: LD_INT 1
1763: ST_TO_ADDR
// uc_nation = 1 ;
1764: LD_ADDR_OWVAR 21
1768: PUSH
1769: LD_INT 1
1771: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1772: LD_ADDR_VAR 0 4
1776: PUSH
1777: LD_INT 22
1779: PUSH
1780: LD_INT 1
1782: PUSH
1783: EMPTY
1784: LIST
1785: LIST
1786: PUSH
1787: LD_INT 21
1789: PUSH
1790: LD_INT 3
1792: PUSH
1793: EMPTY
1794: LIST
1795: LIST
1796: PUSH
1797: LD_INT 30
1799: PUSH
1800: LD_INT 0
1802: PUSH
1803: EMPTY
1804: LIST
1805: LIST
1806: PUSH
1807: EMPTY
1808: LIST
1809: LIST
1810: LIST
1811: PPUSH
1812: CALL_OW 69
1816: ST_TO_ADDR
// if FilterAllunits ( [ [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] then
1817: LD_INT 22
1819: PUSH
1820: LD_INT 1
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: PUSH
1827: LD_INT 25
1829: PUSH
1830: LD_INT 4
1832: PUSH
1833: EMPTY
1834: LIST
1835: LIST
1836: PUSH
1837: LD_INT 26
1839: PUSH
1840: LD_INT 1
1842: PUSH
1843: EMPTY
1844: LIST
1845: LIST
1846: PUSH
1847: EMPTY
1848: LIST
1849: LIST
1850: LIST
1851: PUSH
1852: EMPTY
1853: LIST
1854: PPUSH
1855: CALL_OW 69
1859: PUSH
1860: LD_EXP 1
1864: PUSH
1865: LD_EXP 7
1869: PUSH
1870: LD_EXP 6
1874: PUSH
1875: LD_EXP 5
1879: PUSH
1880: LD_EXP 2
1884: PUSH
1885: LD_EXP 3
1889: PUSH
1890: LD_EXP 8
1894: PUSH
1895: EMPTY
1896: LIST
1897: LIST
1898: LIST
1899: LIST
1900: LIST
1901: LIST
1902: LIST
1903: DIFF
1904: IFFALSE 2005
// deltaDoctor := ( FilterAllunits ( [ [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] ) [ 1 ] else
1906: LD_ADDR_EXP 15
1910: PUSH
1911: LD_INT 22
1913: PUSH
1914: LD_INT 1
1916: PUSH
1917: EMPTY
1918: LIST
1919: LIST
1920: PUSH
1921: LD_INT 25
1923: PUSH
1924: LD_INT 4
1926: PUSH
1927: EMPTY
1928: LIST
1929: LIST
1930: PUSH
1931: LD_INT 26
1933: PUSH
1934: LD_INT 1
1936: PUSH
1937: EMPTY
1938: LIST
1939: LIST
1940: PUSH
1941: EMPTY
1942: LIST
1943: LIST
1944: LIST
1945: PUSH
1946: EMPTY
1947: LIST
1948: PPUSH
1949: CALL_OW 69
1953: PUSH
1954: LD_EXP 1
1958: PUSH
1959: LD_EXP 7
1963: PUSH
1964: LD_EXP 6
1968: PUSH
1969: LD_EXP 5
1973: PUSH
1974: LD_EXP 2
1978: PUSH
1979: LD_EXP 3
1983: PUSH
1984: LD_EXP 8
1988: PUSH
1989: EMPTY
1990: LIST
1991: LIST
1992: LIST
1993: LIST
1994: LIST
1995: LIST
1996: LIST
1997: DIFF
1998: PUSH
1999: LD_INT 1
2001: ARRAY
2002: ST_TO_ADDR
2003: GO 2152
// begin filter := FilterAllunits ( [ [ [ f_side , 1 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] ;
2005: LD_ADDR_VAR 0 5
2009: PUSH
2010: LD_INT 22
2012: PUSH
2013: LD_INT 1
2015: PUSH
2016: EMPTY
2017: LIST
2018: LIST
2019: PUSH
2020: LD_INT 26
2022: PUSH
2023: LD_INT 1
2025: PUSH
2026: EMPTY
2027: LIST
2028: LIST
2029: PUSH
2030: EMPTY
2031: LIST
2032: LIST
2033: PUSH
2034: EMPTY
2035: LIST
2036: PPUSH
2037: CALL_OW 69
2041: PUSH
2042: LD_EXP 1
2046: PUSH
2047: LD_EXP 7
2051: PUSH
2052: LD_EXP 6
2056: PUSH
2057: LD_EXP 5
2061: PUSH
2062: LD_EXP 2
2066: PUSH
2067: LD_EXP 3
2071: PUSH
2072: LD_EXP 8
2076: PUSH
2077: EMPTY
2078: LIST
2079: LIST
2080: LIST
2081: LIST
2082: LIST
2083: LIST
2084: LIST
2085: DIFF
2086: ST_TO_ADDR
// if filter then
2087: LD_VAR 0 5
2091: IFFALSE 2152
// for i in filter do
2093: LD_ADDR_VAR 0 2
2097: PUSH
2098: LD_VAR 0 5
2102: PUSH
2103: FOR_IN
2104: IFFALSE 2150
// if GetSkill ( i , 4 ) >= 4 then
2106: LD_VAR 0 2
2110: PPUSH
2111: LD_INT 4
2113: PPUSH
2114: CALL_OW 259
2118: PUSH
2119: LD_INT 4
2121: GREATEREQUAL
2122: IFFALSE 2148
// begin deltaDoctor := i ;
2124: LD_ADDR_EXP 15
2128: PUSH
2129: LD_VAR 0 2
2133: ST_TO_ADDR
// SetClass ( deltaDoctor , 4 ) ;
2134: LD_EXP 15
2138: PPUSH
2139: LD_INT 4
2141: PPUSH
2142: CALL_OW 336
// break ;
2146: GO 2150
// end ;
2148: GO 2103
2150: POP
2151: POP
// end ; for i = 1 to 7 do
2152: LD_ADDR_VAR 0 2
2156: PUSH
2157: DOUBLE
2158: LD_INT 1
2160: DEC
2161: ST_TO_ADDR
2162: LD_INT 7
2164: PUSH
2165: FOR_TO
2166: IFFALSE 2303
// begin hc_gallery =  ;
2168: LD_ADDR_OWVAR 33
2172: PUSH
2173: LD_STRING 
2175: ST_TO_ADDR
// hc_name =  ;
2176: LD_ADDR_OWVAR 26
2180: PUSH
2181: LD_STRING 
2183: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 3 , 5 ) ) ;
2184: LD_INT 0
2186: PPUSH
2187: LD_INT 1
2189: PUSH
2190: LD_INT 2
2192: PUSH
2193: LD_INT 3
2195: PUSH
2196: LD_INT 4
2198: PUSH
2199: EMPTY
2200: LIST
2201: LIST
2202: LIST
2203: LIST
2204: PUSH
2205: LD_INT 1
2207: PPUSH
2208: LD_INT 4
2210: PPUSH
2211: CALL_OW 12
2215: ARRAY
2216: PPUSH
2217: LD_INT 3
2219: PPUSH
2220: LD_INT 5
2222: PPUSH
2223: CALL_OW 12
2227: PPUSH
2228: CALL_OW 380
// un = CreateHuman ;
2232: LD_ADDR_VAR 0 3
2236: PUSH
2237: CALL_OW 44
2241: ST_TO_ADDR
// randomsDelta := randomsDelta ^ un ;
2242: LD_ADDR_EXP 11
2246: PUSH
2247: LD_EXP 11
2251: PUSH
2252: LD_VAR 0 3
2256: ADD
2257: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
2258: LD_VAR 0 3
2262: PPUSH
2263: LD_VAR 0 4
2267: PUSH
2268: LD_INT 1
2270: ARRAY
2271: PPUSH
2272: CALL_OW 250
2276: PPUSH
2277: LD_VAR 0 4
2281: PUSH
2282: LD_INT 1
2284: ARRAY
2285: PPUSH
2286: CALL_OW 251
2290: PPUSH
2291: LD_INT 15
2293: PPUSH
2294: LD_INT 0
2296: PPUSH
2297: CALL_OW 50
// end ;
2301: GO 2165
2303: POP
2304: POP
// if deltaDoctor then
2305: LD_EXP 15
2309: IFFALSE 2313
// exit ;
2311: GO 2403
// hc_gallery = Dawkins ;
2313: LD_ADDR_OWVAR 33
2317: PUSH
2318: LD_STRING Dawkins
2320: ST_TO_ADDR
// hc_face_number := 1 ;
2321: LD_ADDR_OWVAR 34
2325: PUSH
2326: LD_INT 1
2328: ST_TO_ADDR
// hc_name = Dr. Adam Charles Dawkins ;
2329: LD_ADDR_OWVAR 26
2333: PUSH
2334: LD_STRING Dr. Adam Charles Dawkins
2336: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 6 ) ;
2337: LD_INT 1
2339: PPUSH
2340: LD_INT 4
2342: PPUSH
2343: LD_INT 6
2345: PPUSH
2346: CALL_OW 380
// deltaDoctor = CreateHuman ;
2350: LD_ADDR_EXP 15
2354: PUSH
2355: CALL_OW 44
2359: ST_TO_ADDR
// PlaceUnitXYR ( deltaDoctor , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
2360: LD_EXP 15
2364: PPUSH
2365: LD_VAR 0 4
2369: PUSH
2370: LD_INT 1
2372: ARRAY
2373: PPUSH
2374: CALL_OW 250
2378: PPUSH
2379: LD_VAR 0 4
2383: PUSH
2384: LD_INT 1
2386: ARRAY
2387: PPUSH
2388: CALL_OW 251
2392: PPUSH
2393: LD_INT 5
2395: PPUSH
2396: LD_INT 0
2398: PPUSH
2399: CALL_OW 50
// end ; end_of_file
2403: LD_VAR 0 1
2407: RET
// export function PrepareDeltaBase ; var i , j , building , buildings , lab , tmp ; begin
2408: LD_INT 0
2410: PPUSH
2411: PPUSH
2412: PPUSH
2413: PPUSH
2414: PPUSH
2415: PPUSH
2416: PPUSH
// buildings = LoadVariable ( buildingsInDelta , [ ] ) ;
2417: LD_ADDR_VAR 0 5
2421: PUSH
2422: LD_STRING buildingsInDelta
2424: PPUSH
2425: EMPTY
2426: PPUSH
2427: CALL_OW 30
2431: ST_TO_ADDR
// SetResourceVisibility ( 68 , 40 , 1 ) ;
2432: LD_INT 68
2434: PPUSH
2435: LD_INT 40
2437: PPUSH
2438: LD_INT 1
2440: PPUSH
2441: CALL_OW 441
// uc_side = 1 ;
2445: LD_ADDR_OWVAR 20
2449: PUSH
2450: LD_INT 1
2452: ST_TO_ADDR
// uc_nation = 1 ;
2453: LD_ADDR_OWVAR 21
2457: PUSH
2458: LD_INT 1
2460: ST_TO_ADDR
// for i = 1 to buildings do
2461: LD_ADDR_VAR 0 2
2465: PUSH
2466: DOUBLE
2467: LD_INT 1
2469: DEC
2470: ST_TO_ADDR
2471: LD_VAR 0 5
2475: PUSH
2476: FOR_TO
2477: IFFALSE 2775
// begin bc_type = buildings [ i ] [ 1 ] ;
2479: LD_ADDR_OWVAR 42
2483: PUSH
2484: LD_VAR 0 5
2488: PUSH
2489: LD_VAR 0 2
2493: ARRAY
2494: PUSH
2495: LD_INT 1
2497: ARRAY
2498: ST_TO_ADDR
// bc_level = buildings [ i ] [ 2 ] ;
2499: LD_ADDR_OWVAR 43
2503: PUSH
2504: LD_VAR 0 5
2508: PUSH
2509: LD_VAR 0 2
2513: ARRAY
2514: PUSH
2515: LD_INT 2
2517: ARRAY
2518: ST_TO_ADDR
// if bc_type = b_lab then
2519: LD_OWVAR 42
2523: PUSH
2524: LD_INT 6
2526: EQUAL
2527: IFFALSE 2545
// begin bc_kind1 = b_lab_basic ;
2529: LD_ADDR_OWVAR 44
2533: PUSH
2534: LD_INT 9
2536: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
2537: LD_ADDR_OWVAR 45
2541: PUSH
2542: LD_INT 9
2544: ST_TO_ADDR
// end ; if bc_type = b_lab_half or bc_type = b_lab_full then
2545: LD_OWVAR 42
2549: PUSH
2550: LD_INT 7
2552: EQUAL
2553: PUSH
2554: LD_OWVAR 42
2558: PUSH
2559: LD_INT 8
2561: EQUAL
2562: OR
2563: IFFALSE 2679
// begin if buildings [ i ] [ 6 ] then
2565: LD_VAR 0 5
2569: PUSH
2570: LD_VAR 0 2
2574: ARRAY
2575: PUSH
2576: LD_INT 6
2578: ARRAY
2579: IFFALSE 2601
// bc_kind1 = buildings [ i ] [ 6 ] ;
2581: LD_ADDR_OWVAR 44
2585: PUSH
2586: LD_VAR 0 5
2590: PUSH
2591: LD_VAR 0 2
2595: ARRAY
2596: PUSH
2597: LD_INT 6
2599: ARRAY
2600: ST_TO_ADDR
// if buildings [ i ] [ 7 ] then
2601: LD_VAR 0 5
2605: PUSH
2606: LD_VAR 0 2
2610: ARRAY
2611: PUSH
2612: LD_INT 7
2614: ARRAY
2615: IFFALSE 2637
// bc_kind2 = buildings [ i ] [ 7 ] ;
2617: LD_ADDR_OWVAR 45
2621: PUSH
2622: LD_VAR 0 5
2626: PUSH
2627: LD_VAR 0 2
2631: ARRAY
2632: PUSH
2633: LD_INT 7
2635: ARRAY
2636: ST_TO_ADDR
// if not buildings [ i ] [ 6 ] and not buildings [ i ] [ 7 ] then
2637: LD_VAR 0 5
2641: PUSH
2642: LD_VAR 0 2
2646: ARRAY
2647: PUSH
2648: LD_INT 6
2650: ARRAY
2651: NOT
2652: PUSH
2653: LD_VAR 0 5
2657: PUSH
2658: LD_VAR 0 2
2662: ARRAY
2663: PUSH
2664: LD_INT 7
2666: ARRAY
2667: NOT
2668: AND
2669: IFFALSE 2679
// bc_type := b_lab ;
2671: LD_ADDR_OWVAR 42
2675: PUSH
2676: LD_INT 6
2678: ST_TO_ADDR
// end ; building = CreateAndPlaceBuildingXYD ( buildings [ i ] [ 3 ] , buildings [ i ] [ 4 ] , buildings [ i ] [ 5 ] ) ;
2679: LD_ADDR_VAR 0 4
2683: PUSH
2684: LD_VAR 0 5
2688: PUSH
2689: LD_VAR 0 2
2693: ARRAY
2694: PUSH
2695: LD_INT 3
2697: ARRAY
2698: PPUSH
2699: LD_VAR 0 5
2703: PUSH
2704: LD_VAR 0 2
2708: ARRAY
2709: PUSH
2710: LD_INT 4
2712: ARRAY
2713: PPUSH
2714: LD_VAR 0 5
2718: PUSH
2719: LD_VAR 0 2
2723: ARRAY
2724: PUSH
2725: LD_INT 5
2727: ARRAY
2728: PPUSH
2729: CALL_OW 47
2733: ST_TO_ADDR
// if GetBType ( building ) = b_bunker then
2734: LD_VAR 0 4
2738: PPUSH
2739: CALL_OW 266
2743: PUSH
2744: LD_INT 32
2746: EQUAL
2747: IFFALSE 2773
// PlaceWeaponTurret ( building , buildings [ i ] [ 8 ] ) ;
2749: LD_VAR 0 4
2753: PPUSH
2754: LD_VAR 0 5
2758: PUSH
2759: LD_VAR 0 2
2763: ARRAY
2764: PUSH
2765: LD_INT 8
2767: ARRAY
2768: PPUSH
2769: CALL_OW 431
// end ;
2773: GO 2476
2775: POP
2776: POP
// lab = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
2777: LD_ADDR_VAR 0 6
2781: PUSH
2782: LD_INT 22
2784: PUSH
2785: LD_INT 1
2787: PUSH
2788: EMPTY
2789: LIST
2790: LIST
2791: PUSH
2792: LD_INT 2
2794: PUSH
2795: LD_INT 30
2797: PUSH
2798: LD_INT 6
2800: PUSH
2801: EMPTY
2802: LIST
2803: LIST
2804: PUSH
2805: LD_INT 30
2807: PUSH
2808: LD_INT 7
2810: PUSH
2811: EMPTY
2812: LIST
2813: LIST
2814: PUSH
2815: LD_INT 30
2817: PUSH
2818: LD_INT 8
2820: PUSH
2821: EMPTY
2822: LIST
2823: LIST
2824: PUSH
2825: EMPTY
2826: LIST
2827: LIST
2828: LIST
2829: LIST
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: PPUSH
2835: CALL_OW 69
2839: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) ;
2840: LD_ADDR_VAR 0 7
2844: PUSH
2845: LD_INT 22
2847: PUSH
2848: LD_INT 1
2850: PUSH
2851: EMPTY
2852: LIST
2853: LIST
2854: PUSH
2855: LD_INT 30
2857: PUSH
2858: LD_INT 0
2860: PUSH
2861: EMPTY
2862: LIST
2863: LIST
2864: PUSH
2865: EMPTY
2866: LIST
2867: LIST
2868: PPUSH
2869: CALL_OW 69
2873: ST_TO_ADDR
// if lab > 0 and tmp > 0 then
2874: LD_VAR 0 6
2878: PUSH
2879: LD_INT 0
2881: GREATER
2882: PUSH
2883: LD_VAR 0 7
2887: PUSH
2888: LD_INT 0
2890: GREATER
2891: AND
2892: IFFALSE 2902
// baseCorrect = 1 ;
2894: LD_ADDR_EXP 18
2898: PUSH
2899: LD_INT 1
2901: ST_TO_ADDR
// if baseCorrect = 0 then
2902: LD_EXP 18
2906: PUSH
2907: LD_INT 0
2909: EQUAL
2910: IFFALSE 3283
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
2912: LD_ADDR_VAR 0 2
2916: PUSH
2917: LD_INT 22
2919: PUSH
2920: LD_INT 1
2922: PUSH
2923: EMPTY
2924: LIST
2925: LIST
2926: PUSH
2927: LD_INT 21
2929: PUSH
2930: LD_INT 3
2932: PUSH
2933: EMPTY
2934: LIST
2935: LIST
2936: PUSH
2937: EMPTY
2938: LIST
2939: LIST
2940: PPUSH
2941: CALL_OW 69
2945: PUSH
2946: FOR_IN
2947: IFFALSE 2960
// RemoveUnit ( i ) ;
2949: LD_VAR 0 2
2953: PPUSH
2954: CALL_OW 64
2958: GO 2946
2960: POP
2961: POP
// uc_nation = 1 ;
2962: LD_ADDR_OWVAR 21
2966: PUSH
2967: LD_INT 1
2969: ST_TO_ADDR
// uc_side = 1 ;
2970: LD_ADDR_OWVAR 20
2974: PUSH
2975: LD_INT 1
2977: ST_TO_ADDR
// bc_level = 5 ;
2978: LD_ADDR_OWVAR 43
2982: PUSH
2983: LD_INT 5
2985: ST_TO_ADDR
// bc_type = b_depot ;
2986: LD_ADDR_OWVAR 42
2990: PUSH
2991: LD_INT 0
2993: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 50 , 22 , 0 ) ;
2994: LD_INT 50
2996: PPUSH
2997: LD_INT 22
2999: PPUSH
3000: LD_INT 0
3002: PPUSH
3003: CALL_OW 47
// bc_type = b_bunker ;
3007: LD_ADDR_OWVAR 42
3011: PUSH
3012: LD_INT 32
3014: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( 68 , 24 , 4 ) ;
3015: LD_ADDR_VAR 0 4
3019: PUSH
3020: LD_INT 68
3022: PPUSH
3023: LD_INT 24
3025: PPUSH
3026: LD_INT 4
3028: PPUSH
3029: CALL_OW 47
3033: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ Rand ( 1 , 2 ) ] ) ;
3034: LD_VAR 0 4
3038: PPUSH
3039: LD_INT 4
3041: PUSH
3042: LD_INT 11
3044: PUSH
3045: EMPTY
3046: LIST
3047: LIST
3048: PUSH
3049: LD_INT 1
3051: PPUSH
3052: LD_INT 2
3054: PPUSH
3055: CALL_OW 12
3059: ARRAY
3060: PPUSH
3061: CALL_OW 431
// building = CreateAndPlaceBuildingXYD ( 71 , 34 , 4 ) ;
3065: LD_ADDR_VAR 0 4
3069: PUSH
3070: LD_INT 71
3072: PPUSH
3073: LD_INT 34
3075: PPUSH
3076: LD_INT 4
3078: PPUSH
3079: CALL_OW 47
3083: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ Rand ( 1 , 2 ) ] ) ;
3084: LD_VAR 0 4
3088: PPUSH
3089: LD_INT 4
3091: PUSH
3092: LD_INT 11
3094: PUSH
3095: EMPTY
3096: LIST
3097: LIST
3098: PUSH
3099: LD_INT 1
3101: PPUSH
3102: LD_INT 2
3104: PPUSH
3105: CALL_OW 12
3109: ARRAY
3110: PPUSH
3111: CALL_OW 431
// bc_type = 31 ;
3115: LD_ADDR_OWVAR 42
3119: PUSH
3120: LD_INT 31
3122: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 51 , 7 , 3 ) ;
3123: LD_INT 51
3125: PPUSH
3126: LD_INT 7
3128: PPUSH
3129: LD_INT 3
3131: PPUSH
3132: CALL_OW 47
// bc_type = b_oil_mine ;
3136: LD_ADDR_OWVAR 42
3140: PUSH
3141: LD_INT 29
3143: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 68 , 40 , 1 ) ;
3144: LD_INT 68
3146: PPUSH
3147: LD_INT 40
3149: PPUSH
3150: LD_INT 1
3152: PPUSH
3153: CALL_OW 47
// bc_type = b_workshop ;
3157: LD_ADDR_OWVAR 42
3161: PUSH
3162: LD_INT 2
3164: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 20 , 2 ) ;
3165: LD_INT 38
3167: PPUSH
3168: LD_INT 20
3170: PPUSH
3171: LD_INT 2
3173: PPUSH
3174: CALL_OW 47
// bc_type = b_armoury ;
3178: LD_ADDR_OWVAR 42
3182: PUSH
3183: LD_INT 4
3185: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 20 , 2 ) ;
3186: LD_INT 38
3188: PPUSH
3189: LD_INT 20
3191: PPUSH
3192: LD_INT 2
3194: PPUSH
3195: CALL_OW 47
// bc_type = b_solar_power ;
3199: LD_ADDR_OWVAR 42
3203: PUSH
3204: LD_INT 27
3206: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 46 , 12 , 1 ) ;
3207: LD_INT 46
3209: PPUSH
3210: LD_INT 12
3212: PPUSH
3213: LD_INT 1
3215: PPUSH
3216: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 48 , 11 , 2 ) ;
3220: LD_INT 48
3222: PPUSH
3223: LD_INT 11
3225: PPUSH
3226: LD_INT 2
3228: PPUSH
3229: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 49 , 11 , 3 ) ;
3233: LD_INT 49
3235: PPUSH
3236: LD_INT 11
3238: PPUSH
3239: LD_INT 3
3241: PPUSH
3242: CALL_OW 47
// bc_type = b_lab_half ;
3246: LD_ADDR_OWVAR 42
3250: PUSH
3251: LD_INT 7
3253: ST_TO_ADDR
// bc_kind1 = b_lab_opto ;
3254: LD_ADDR_OWVAR 44
3258: PUSH
3259: LD_INT 15
3261: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
3262: LD_ADDR_OWVAR 45
3266: PUSH
3267: LD_INT 9
3269: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 42 , 15 , 2 ) ;
3270: LD_INT 42
3272: PPUSH
3273: LD_INT 15
3275: PPUSH
3276: LD_INT 2
3278: PPUSH
3279: CALL_OW 47
// end ; end ; end_of_file
3283: LD_VAR 0 1
3287: RET
// every 1 do var i , j , tmp ;
3288: GO 3290
3290: DISABLE
3291: LD_INT 0
3293: PPUSH
3294: PPUSH
3295: PPUSH
// begin InGameOn ;
3296: CALL_OW 8
// CenterNowOnUnits ( lab [ 1 ] ) ;
3300: LD_EXP 20
3304: PUSH
3305: LD_INT 1
3307: ARRAY
3308: PPUSH
3309: CALL_OW 87
// if IsOK ( Denis ) then
3313: LD_EXP 3
3317: PPUSH
3318: CALL_OW 302
3322: IFFALSE 3350
// begin SetTech ( tech_radar , 1 , state_researched ) ;
3324: LD_INT 6
3326: PPUSH
3327: LD_INT 1
3329: PPUSH
3330: LD_INT 2
3332: PPUSH
3333: CALL_OW 322
// SetRestrict ( b_ext_radar , 1 , true ) ;
3337: LD_INT 20
3339: PPUSH
3340: LD_INT 1
3342: PPUSH
3343: LD_INT 1
3345: PPUSH
3346: CALL_OW 324
// end ; CenterNowOnUnits ( JMM ) ;
3350: LD_EXP 1
3354: PPUSH
3355: CALL_OW 87
// ComTurnUnit ( JMM , DeltaDoctor ) ;
3359: LD_EXP 1
3363: PPUSH
3364: LD_EXP 15
3368: PPUSH
3369: CALL_OW 119
// repeat wait ( 0 0$1 ) ;
3373: LD_INT 35
3375: PPUSH
3376: CALL_OW 67
// ComMoveUnit ( DeltaDoctor , JMM ) ;
3380: LD_EXP 15
3384: PPUSH
3385: LD_EXP 1
3389: PPUSH
3390: CALL_OW 112
// until GetDistUnits ( JMM , DeltaDoctor ) < 5 ;
3394: LD_EXP 1
3398: PPUSH
3399: LD_EXP 15
3403: PPUSH
3404: CALL_OW 296
3408: PUSH
3409: LD_INT 5
3411: LESS
3412: IFFALSE 3373
// ComTurnUnit ( DeltaDoctor , JMM ) ;
3414: LD_EXP 15
3418: PPUSH
3419: LD_EXP 1
3423: PPUSH
3424: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
3428: LD_EXP 1
3432: PPUSH
3433: LD_STRING D1-JMM-1
3435: PPUSH
3436: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-1 ) ;
3440: LD_EXP 15
3444: PPUSH
3445: LD_STRING D1-Sci-1
3447: PPUSH
3448: CALL_OW 88
// ComEnterUnit ( [ JMM , DeltaDoctor , Denis ] , lab [ 1 ] ) ;
3452: LD_EXP 1
3456: PUSH
3457: LD_EXP 15
3461: PUSH
3462: LD_EXP 3
3466: PUSH
3467: EMPTY
3468: LIST
3469: LIST
3470: LIST
3471: PPUSH
3472: LD_EXP 20
3476: PUSH
3477: LD_INT 1
3479: ARRAY
3480: PPUSH
3481: CALL_OW 120
// end ;
3485: PPOPN 3
3487: END
// every 0 0$2 trigger IsInUnit ( JMM ) = lab [ 1 ] and IsInUnit ( DeltaDoctor ) = lab [ 1 ] do var i , j , tmp ;
3488: LD_EXP 1
3492: PPUSH
3493: CALL_OW 310
3497: PUSH
3498: LD_EXP 20
3502: PUSH
3503: LD_INT 1
3505: ARRAY
3506: EQUAL
3507: PUSH
3508: LD_EXP 15
3512: PPUSH
3513: CALL_OW 310
3517: PUSH
3518: LD_EXP 20
3522: PUSH
3523: LD_INT 1
3525: ARRAY
3526: EQUAL
3527: AND
3528: IFFALSE 4074
3530: GO 3532
3532: DISABLE
3533: LD_INT 0
3535: PPUSH
3536: PPUSH
3537: PPUSH
// begin CenterNowOnUnits ( lab [ 1 ] ) ;
3538: LD_EXP 20
3542: PUSH
3543: LD_INT 1
3545: ARRAY
3546: PPUSH
3547: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
3551: LD_EXP 1
3555: PPUSH
3556: LD_STRING D1-JMM-2
3558: PPUSH
3559: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-2 ) ;
3563: LD_EXP 15
3567: PPUSH
3568: LD_STRING D1-Sci-2
3570: PPUSH
3571: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
3575: LD_EXP 1
3579: PPUSH
3580: LD_STRING D1-JMM-3
3582: PPUSH
3583: CALL_OW 88
// if IsOK ( Denis ) then
3587: LD_EXP 3
3591: PPUSH
3592: CALL_OW 302
3596: IFFALSE 3612
// Say ( DeltaDoctor , D1-Sci-3 ) else
3598: LD_EXP 15
3602: PPUSH
3603: LD_STRING D1-Sci-3
3605: PPUSH
3606: CALL_OW 88
3610: GO 3624
// Say ( DeltaDoctor , D1-Sci-3a ) ;
3612: LD_EXP 15
3616: PPUSH
3617: LD_STRING D1-Sci-3a
3619: PPUSH
3620: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
3624: LD_EXP 1
3628: PPUSH
3629: LD_STRING D1-JMM-4
3631: PPUSH
3632: CALL_OW 88
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
3636: LD_ADDR_VAR 0 3
3640: PUSH
3641: LD_INT 22
3643: PUSH
3644: LD_INT 1
3646: PUSH
3647: EMPTY
3648: LIST
3649: LIST
3650: PUSH
3651: LD_INT 25
3653: PUSH
3654: LD_INT 4
3656: PUSH
3657: EMPTY
3658: LIST
3659: LIST
3660: PUSH
3661: LD_INT 3
3663: PUSH
3664: LD_INT 54
3666: PUSH
3667: EMPTY
3668: LIST
3669: PUSH
3670: EMPTY
3671: LIST
3672: LIST
3673: PUSH
3674: EMPTY
3675: LIST
3676: LIST
3677: LIST
3678: PPUSH
3679: CALL_OW 69
3683: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 0 ] ) do
3684: LD_ADDR_VAR 0 1
3688: PUSH
3689: LD_INT 22
3691: PUSH
3692: LD_INT 0
3694: PUSH
3695: EMPTY
3696: LIST
3697: LIST
3698: PPUSH
3699: CALL_OW 69
3703: PUSH
3704: FOR_IN
3705: IFFALSE 3755
// for j in tmp do
3707: LD_ADDR_VAR 0 2
3711: PUSH
3712: LD_VAR 0 3
3716: PUSH
3717: FOR_IN
3718: IFFALSE 3751
// AddComTameXY ( j , GetX ( i ) , GetY ( i ) ) ;
3720: LD_VAR 0 2
3724: PPUSH
3725: LD_VAR 0 1
3729: PPUSH
3730: CALL_OW 250
3734: PPUSH
3735: LD_VAR 0 1
3739: PPUSH
3740: CALL_OW 251
3744: PPUSH
3745: CALL_OW 191
3749: GO 3717
3751: POP
3752: POP
3753: GO 3704
3755: POP
3756: POP
// Say ( DeltaDoctor , D1-Sci-4 ) ;
3757: LD_EXP 15
3761: PPUSH
3762: LD_STRING D1-Sci-4
3764: PPUSH
3765: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
3769: LD_EXP 1
3773: PPUSH
3774: LD_STRING D1-JMM-5
3776: PPUSH
3777: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-5 ) ;
3781: LD_EXP 15
3785: PPUSH
3786: LD_STRING D1-Sci-5
3788: PPUSH
3789: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
3793: LD_EXP 1
3797: PPUSH
3798: LD_STRING D1-JMM-6
3800: PPUSH
3801: CALL_OW 88
// SayRadio ( Harisson , D1-Har-6 ) ;
3805: LD_EXP 16
3809: PPUSH
3810: LD_STRING D1-Har-6
3812: PPUSH
3813: CALL_OW 94
// Say ( JMM , D1-JMM-7 ) ;
3817: LD_EXP 1
3821: PPUSH
3822: LD_STRING D1-JMM-7
3824: PPUSH
3825: CALL_OW 88
// SayRadio ( Harisson , D1-Har-7 ) ;
3829: LD_EXP 16
3833: PPUSH
3834: LD_STRING D1-Har-7
3836: PPUSH
3837: CALL_OW 94
// if IsOK ( Denis ) then
3841: LD_EXP 3
3845: PPUSH
3846: CALL_OW 302
3850: IFFALSE 3864
// Say ( JMM , D1-JMM-8 ) ;
3852: LD_EXP 1
3856: PPUSH
3857: LD_STRING D1-JMM-8
3859: PPUSH
3860: CALL_OW 88
// Say ( JMM , D1-JMM-8a ) ;
3864: LD_EXP 1
3868: PPUSH
3869: LD_STRING D1-JMM-8a
3871: PPUSH
3872: CALL_OW 88
// SayRadio ( Harisson , D1-Har-8 ) ;
3876: LD_EXP 16
3880: PPUSH
3881: LD_STRING D1-Har-8
3883: PPUSH
3884: CALL_OW 94
// Say ( JMM , D1-JMM-9 ) ;
3888: LD_EXP 1
3892: PPUSH
3893: LD_STRING D1-JMM-9
3895: PPUSH
3896: CALL_OW 88
// SayRadio ( Harisson , D1-Har-9 ) ;
3900: LD_EXP 16
3904: PPUSH
3905: LD_STRING D1-Har-9
3907: PPUSH
3908: CALL_OW 94
// Say ( JMM , D1-JMM-10 ) ;
3912: LD_EXP 1
3916: PPUSH
3917: LD_STRING D1-JMM-10
3919: PPUSH
3920: CALL_OW 88
// if IsOK ( Denis ) then
3924: LD_EXP 3
3928: PPUSH
3929: CALL_OW 302
3933: IFFALSE 3947
// Say ( JMM , D1-JMM-10a ) ;
3935: LD_EXP 1
3939: PPUSH
3940: LD_STRING D1-JMM-10a
3942: PPUSH
3943: CALL_OW 88
// SelectDeltaCharacters ;
3947: CALL 4433 0 0
// SetResourceType ( GetBase ( lab [ 1 ] ) , 1 , 250 ) ;
3951: LD_EXP 20
3955: PUSH
3956: LD_INT 1
3958: ARRAY
3959: PPUSH
3960: CALL_OW 274
3964: PPUSH
3965: LD_INT 1
3967: PPUSH
3968: LD_INT 250
3970: PPUSH
3971: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) > 0 then
3975: LD_INT 22
3977: PUSH
3978: LD_INT 1
3980: PUSH
3981: EMPTY
3982: LIST
3983: LIST
3984: PUSH
3985: LD_INT 30
3987: PUSH
3988: LD_INT 29
3990: PUSH
3991: EMPTY
3992: LIST
3993: LIST
3994: PUSH
3995: EMPTY
3996: LIST
3997: LIST
3998: PPUSH
3999: CALL_OW 69
4003: PUSH
4004: LD_INT 0
4006: GREATER
4007: IFFALSE 4033
// SetResourceType ( GetBase ( lab [ 1 ] ) , 2 , 300 ) ;
4009: LD_EXP 20
4013: PUSH
4014: LD_INT 1
4016: ARRAY
4017: PPUSH
4018: CALL_OW 274
4022: PPUSH
4023: LD_INT 2
4025: PPUSH
4026: LD_INT 300
4028: PPUSH
4029: CALL_OW 277
// InGameOff ;
4033: CALL_OW 9
// Query ( Q1 ) ;
4037: LD_STRING Q1
4039: PPUSH
4040: CALL_OW 97
// SetAreaMapShow ( ExitArea , 1 ) ;
4044: LD_INT 3
4046: PPUSH
4047: LD_INT 1
4049: PPUSH
4050: CALL_OW 424
// if IsInUnit ( JMM ) then
4054: LD_EXP 1
4058: PPUSH
4059: CALL_OW 310
4063: IFFALSE 4074
// ComExitBuilding ( JMM ) ;
4065: LD_EXP 1
4069: PPUSH
4070: CALL_OW 122
// end ;
4074: PPOPN 3
4076: END
// every 0 0$1 trigger FilterUnitsExceptArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do var i , cargoType ;
4077: LD_INT 3
4079: PPUSH
4080: LD_INT 22
4082: PUSH
4083: LD_INT 1
4085: PUSH
4086: EMPTY
4087: LIST
4088: LIST
4089: PUSH
4090: LD_INT 21
4092: PUSH
4093: LD_INT 1
4095: PUSH
4096: EMPTY
4097: LIST
4098: LIST
4099: PUSH
4100: EMPTY
4101: LIST
4102: LIST
4103: PPUSH
4104: CALL_OW 71
4108: PUSH
4109: LD_INT 0
4111: EQUAL
4112: IFFALSE 4430
4114: GO 4116
4116: DISABLE
4117: LD_INT 0
4119: PPUSH
4120: PPUSH
// begin SaveDeltaCharacters ;
4121: CALL 4787 0 0
// if FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) then
4125: LD_INT 3
4127: PPUSH
4128: LD_INT 21
4130: PUSH
4131: LD_INT 2
4133: PUSH
4134: EMPTY
4135: LIST
4136: LIST
4137: PUSH
4138: LD_INT 3
4140: PUSH
4141: LD_INT 58
4143: PUSH
4144: EMPTY
4145: LIST
4146: PUSH
4147: EMPTY
4148: LIST
4149: LIST
4150: PUSH
4151: EMPTY
4152: LIST
4153: LIST
4154: PPUSH
4155: CALL_OW 70
4159: IFFALSE 4416
// begin for i in FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) do
4161: LD_ADDR_VAR 0 1
4165: PUSH
4166: LD_INT 3
4168: PPUSH
4169: LD_INT 21
4171: PUSH
4172: LD_INT 2
4174: PUSH
4175: EMPTY
4176: LIST
4177: LIST
4178: PUSH
4179: LD_INT 3
4181: PUSH
4182: LD_INT 58
4184: PUSH
4185: EMPTY
4186: LIST
4187: PUSH
4188: EMPTY
4189: LIST
4190: LIST
4191: PUSH
4192: EMPTY
4193: LIST
4194: LIST
4195: PPUSH
4196: CALL_OW 70
4200: PUSH
4201: FOR_IN
4202: IFFALSE 4414
// begin cargoType = GetCargoType ( i ) ;
4204: LD_ADDR_VAR 0 2
4208: PUSH
4209: LD_VAR 0 1
4213: PPUSH
4214: CALL_OW 288
4218: ST_TO_ADDR
// if GetWeapon ( i ) = us_cargo_bay then
4219: LD_VAR 0 1
4223: PPUSH
4224: CALL_OW 264
4228: PUSH
4229: LD_INT 12
4231: EQUAL
4232: IFFALSE 4329
// yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , cargoType , GetCargo ( i , cargoType ) ] ] else
4234: LD_ADDR_EXP 14
4238: PUSH
4239: LD_EXP 14
4243: PUSH
4244: LD_VAR 0 1
4248: PPUSH
4249: CALL_OW 248
4253: PUSH
4254: LD_VAR 0 1
4258: PPUSH
4259: CALL_OW 265
4263: PUSH
4264: LD_VAR 0 1
4268: PPUSH
4269: CALL_OW 262
4273: PUSH
4274: LD_VAR 0 1
4278: PPUSH
4279: CALL_OW 263
4283: PUSH
4284: LD_VAR 0 1
4288: PPUSH
4289: CALL_OW 264
4293: PUSH
4294: LD_VAR 0 2
4298: PUSH
4299: LD_VAR 0 1
4303: PPUSH
4304: LD_VAR 0 2
4308: PPUSH
4309: CALL_OW 289
4313: PUSH
4314: EMPTY
4315: LIST
4316: LIST
4317: LIST
4318: LIST
4319: LIST
4320: LIST
4321: LIST
4322: PUSH
4323: EMPTY
4324: LIST
4325: ADD
4326: ST_TO_ADDR
4327: GO 4400
// yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ] ;
4329: LD_ADDR_EXP 14
4333: PUSH
4334: LD_EXP 14
4338: PUSH
4339: LD_VAR 0 1
4343: PPUSH
4344: CALL_OW 248
4348: PUSH
4349: LD_VAR 0 1
4353: PPUSH
4354: CALL_OW 265
4358: PUSH
4359: LD_VAR 0 1
4363: PPUSH
4364: CALL_OW 262
4368: PUSH
4369: LD_VAR 0 1
4373: PPUSH
4374: CALL_OW 263
4378: PUSH
4379: LD_VAR 0 1
4383: PPUSH
4384: CALL_OW 264
4388: PUSH
4389: EMPTY
4390: LIST
4391: LIST
4392: LIST
4393: LIST
4394: LIST
4395: PUSH
4396: EMPTY
4397: LIST
4398: ADD
4399: ST_TO_ADDR
// SaveVariable ( yourVehicles , 06_VehiclesIn06_1 ) ;
4400: LD_EXP 14
4404: PPUSH
4405: LD_STRING 06_VehiclesIn06_1
4407: PPUSH
4408: CALL_OW 39
// end ;
4412: GO 4201
4414: POP
4415: POP
// end ; SaveCargos ;
4416: CALL 5543 0 0
// ChangeMap ( 6 , %_cont ) ;
4420: LD_INT 6
4422: PPUSH
4423: LD_STRING %_cont
4425: PPUSH
4426: CALL_OW 340
// end ; end_of_file
4430: PPOPN 2
4432: END
// export function SelectDeltaCharacters ; var i , yourPeople ; begin
4433: LD_INT 0
4435: PPUSH
4436: PPUSH
4437: PPUSH
// selectedPeople := [ ] ;
4438: LD_ADDR_EXP 17
4442: PUSH
4443: EMPTY
4444: ST_TO_ADDR
// yourPeople = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , DeltaDoctor , Denis ] ;
4445: LD_ADDR_VAR 0 3
4449: PUSH
4450: LD_INT 22
4452: PUSH
4453: LD_INT 1
4455: PUSH
4456: EMPTY
4457: LIST
4458: LIST
4459: PUSH
4460: LD_INT 21
4462: PUSH
4463: LD_INT 1
4465: PUSH
4466: EMPTY
4467: LIST
4468: LIST
4469: PUSH
4470: LD_INT 2
4472: PUSH
4473: LD_INT 25
4475: PUSH
4476: LD_INT 1
4478: PUSH
4479: EMPTY
4480: LIST
4481: LIST
4482: PUSH
4483: LD_INT 25
4485: PUSH
4486: LD_INT 2
4488: PUSH
4489: EMPTY
4490: LIST
4491: LIST
4492: PUSH
4493: LD_INT 25
4495: PUSH
4496: LD_INT 3
4498: PUSH
4499: EMPTY
4500: LIST
4501: LIST
4502: PUSH
4503: LD_INT 25
4505: PUSH
4506: LD_INT 4
4508: PUSH
4509: EMPTY
4510: LIST
4511: LIST
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: LIST
4517: LIST
4518: LIST
4519: PUSH
4520: EMPTY
4521: LIST
4522: LIST
4523: LIST
4524: PPUSH
4525: CALL_OW 69
4529: PUSH
4530: LD_EXP 1
4534: PUSH
4535: LD_EXP 15
4539: PUSH
4540: LD_EXP 3
4544: PUSH
4545: EMPTY
4546: LIST
4547: LIST
4548: LIST
4549: DIFF
4550: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , 5 , 5 , [ sel_change_class , JMM , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ yourPeople ^ [ sel_dont_change_class , sel_not_changeable , Denis , DeltaDoctor ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
4551: LD_ADDR_EXP 17
4555: PUSH
4556: LD_STRING text
4558: PPUSH
4559: LD_INT 5
4561: PPUSH
4562: LD_INT 5
4564: PPUSH
4565: LD_INT -5
4567: PUSH
4568: LD_EXP 1
4572: PUSH
4573: LD_INT -6
4575: PUSH
4576: LD_INT -2
4578: PUSH
4579: LD_INT -3
4581: PUSH
4582: LD_INT -5
4584: PUSH
4585: EMPTY
4586: LIST
4587: LIST
4588: LIST
4589: LIST
4590: LIST
4591: LIST
4592: PUSH
4593: LD_VAR 0 3
4597: ADD
4598: PUSH
4599: LD_INT -6
4601: PUSH
4602: LD_INT -4
4604: PUSH
4605: LD_EXP 3
4609: PUSH
4610: LD_EXP 15
4614: PUSH
4615: EMPTY
4616: LIST
4617: LIST
4618: LIST
4619: LIST
4620: ADD
4621: PPUSH
4622: LD_INT 1
4624: PUSH
4625: LD_INT 3
4627: PUSH
4628: LD_INT 2
4630: PUSH
4631: LD_INT 1
4633: PUSH
4634: EMPTY
4635: LIST
4636: LIST
4637: PUSH
4638: LD_INT 4
4640: PUSH
4641: EMPTY
4642: LIST
4643: LIST
4644: LIST
4645: LIST
4646: PPUSH
4647: CALL_OW 42
4651: ST_TO_ADDR
// ComStop ( selectedPeople ) ;
4652: LD_EXP 17
4656: PPUSH
4657: CALL_OW 141
// SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 4 ) ;
4661: LD_INT 22
4663: PUSH
4664: LD_INT 1
4666: PUSH
4667: EMPTY
4668: LIST
4669: LIST
4670: PUSH
4671: LD_INT 21
4673: PUSH
4674: LD_INT 1
4676: PUSH
4677: EMPTY
4678: LIST
4679: LIST
4680: PUSH
4681: EMPTY
4682: LIST
4683: LIST
4684: PPUSH
4685: CALL_OW 69
4689: PPUSH
4690: LD_INT 4
4692: PPUSH
4693: CALL_OW 235
// for i in selectedPeople do
4697: LD_ADDR_VAR 0 2
4701: PUSH
4702: LD_EXP 17
4706: PUSH
4707: FOR_IN
4708: IFFALSE 4724
// SetSide ( i , 1 ) ;
4710: LD_VAR 0 2
4714: PPUSH
4715: LD_INT 1
4717: PPUSH
4718: CALL_OW 235
4722: GO 4707
4724: POP
4725: POP
// for i in yourApemans do
4726: LD_ADDR_VAR 0 2
4730: PUSH
4731: LD_EXP 13
4735: PUSH
4736: FOR_IN
4737: IFFALSE 4753
// SetSide ( i , 1 ) ;
4739: LD_VAR 0 2
4743: PPUSH
4744: LD_INT 1
4746: PPUSH
4747: CALL_OW 235
4751: GO 4736
4753: POP
4754: POP
// SetSide ( JMM , 1 ) ;
4755: LD_EXP 1
4759: PPUSH
4760: LD_INT 1
4762: PPUSH
4763: CALL_OW 235
// SetSkill ( yourApemans , 2 , 5 ) ;
4767: LD_EXP 13
4771: PPUSH
4772: LD_INT 2
4774: PPUSH
4775: LD_INT 5
4777: PPUSH
4778: CALL_OW 237
// end ;
4782: LD_VAR 0 1
4786: RET
// export function SaveDeltaCharacters ; begin
4787: LD_INT 0
4789: PPUSH
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
4790: LD_EXP 1
4794: PPUSH
4795: LD_EXP 22
4799: PUSH
4800: LD_STRING JMM
4802: STR
4803: PPUSH
4804: CALL_OW 38
// SaveCharacters ( DeltaDoctor , DeltaDoctor ) ;
4808: LD_EXP 15
4812: PPUSH
4813: LD_STRING DeltaDoctor
4815: PPUSH
4816: CALL_OW 38
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
4820: LD_EXP 3
4824: PPUSH
4825: LD_EXP 22
4829: PUSH
4830: LD_STRING Denis
4832: STR
4833: PPUSH
4834: CALL_OW 38
// if Lisa in selectedPeople then
4838: LD_EXP 4
4842: PUSH
4843: LD_EXP 17
4847: IN
4848: IFFALSE 4880
// begin SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
4850: LD_EXP 4
4854: PPUSH
4855: LD_EXP 22
4859: PUSH
4860: LD_STRING Lisa
4862: STR
4863: PPUSH
4864: CALL_OW 38
// SaveVariable ( 1 , LisaIn06 ) ;
4868: LD_INT 1
4870: PPUSH
4871: LD_STRING LisaIn06
4873: PPUSH
4874: CALL_OW 39
// end else
4878: GO 4901
// if IsOk ( Lisa ) then
4880: LD_EXP 4
4884: PPUSH
4885: CALL_OW 302
4889: IFFALSE 4901
// SaveVariable ( 1 , LisaStayInDelta ) ;
4891: LD_INT 1
4893: PPUSH
4894: LD_STRING LisaStayInDelta
4896: PPUSH
4897: CALL_OW 39
// if Bobby in selectedPeople then
4901: LD_EXP 6
4905: PUSH
4906: LD_EXP 17
4910: IN
4911: IFFALSE 4943
// begin SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
4913: LD_EXP 6
4917: PPUSH
4918: LD_EXP 22
4922: PUSH
4923: LD_STRING Bobby
4925: STR
4926: PPUSH
4927: CALL_OW 38
// SaveVariable ( 1 , BobbyIn06 ) ;
4931: LD_INT 1
4933: PPUSH
4934: LD_STRING BobbyIn06
4936: PPUSH
4937: CALL_OW 39
// end else
4941: GO 4964
// if IsOk ( Bobby ) then
4943: LD_EXP 6
4947: PPUSH
4948: CALL_OW 302
4952: IFFALSE 4964
// SaveVariable ( 1 , BobbyStayInDelta ) ;
4954: LD_INT 1
4956: PPUSH
4957: LD_STRING BobbyStayInDelta
4959: PPUSH
4960: CALL_OW 39
// if Cyrus in selectedPeople then
4964: LD_EXP 7
4968: PUSH
4969: LD_EXP 17
4973: IN
4974: IFFALSE 5006
// begin SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
4976: LD_EXP 7
4980: PPUSH
4981: LD_EXP 22
4985: PUSH
4986: LD_STRING Cyrus
4988: STR
4989: PPUSH
4990: CALL_OW 38
// SaveVariable ( 1 , CyrusIn06 ) ;
4994: LD_INT 1
4996: PPUSH
4997: LD_STRING CyrusIn06
4999: PPUSH
5000: CALL_OW 39
// end else
5004: GO 5027
// if IsOk ( Cyrus ) then
5006: LD_EXP 7
5010: PPUSH
5011: CALL_OW 302
5015: IFFALSE 5027
// SaveVariable ( 1 , CyrusStayInDelta ) ;
5017: LD_INT 1
5019: PPUSH
5020: LD_STRING CyrusStayInDelta
5022: PPUSH
5023: CALL_OW 39
// if Frank in selectedPeople then
5027: LD_EXP 5
5031: PUSH
5032: LD_EXP 17
5036: IN
5037: IFFALSE 5069
// begin SaveCharacters ( Frank , mission_prefix & Frank ) ;
5039: LD_EXP 5
5043: PPUSH
5044: LD_EXP 22
5048: PUSH
5049: LD_STRING Frank
5051: STR
5052: PPUSH
5053: CALL_OW 38
// SaveVariable ( 1 , FrankIn06 ) ;
5057: LD_INT 1
5059: PPUSH
5060: LD_STRING FrankIn06
5062: PPUSH
5063: CALL_OW 39
// end else
5067: GO 5090
// if IsOk ( Frank ) then
5069: LD_EXP 5
5073: PPUSH
5074: CALL_OW 302
5078: IFFALSE 5090
// SaveVariable ( 1 , FrankStayInDelta ) ;
5080: LD_INT 1
5082: PPUSH
5083: LD_STRING FrankStayInDelta
5085: PPUSH
5086: CALL_OW 39
// if Brown in selectedPeople then
5090: LD_EXP 8
5094: PUSH
5095: LD_EXP 17
5099: IN
5100: IFFALSE 5132
// begin SaveCharacters ( Brown , mission_prefix & Brown ) ;
5102: LD_EXP 8
5106: PPUSH
5107: LD_EXP 22
5111: PUSH
5112: LD_STRING Brown
5114: STR
5115: PPUSH
5116: CALL_OW 38
// SaveVariable ( 1 , BrownIn06 ) ;
5120: LD_INT 1
5122: PPUSH
5123: LD_STRING BrownIn06
5125: PPUSH
5126: CALL_OW 39
// end else
5130: GO 5153
// if IsOk ( Brown ) then
5132: LD_EXP 8
5136: PPUSH
5137: CALL_OW 302
5141: IFFALSE 5153
// SaveVariable ( 1 , BrownStayInDelta ) ;
5143: LD_INT 1
5145: PPUSH
5146: LD_STRING BrownStayInDelta
5148: PPUSH
5149: CALL_OW 39
// if Donaldson in selectedPeople then
5153: LD_EXP 9
5157: PUSH
5158: LD_EXP 17
5162: IN
5163: IFFALSE 5195
// begin SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
5165: LD_EXP 9
5169: PPUSH
5170: LD_EXP 22
5174: PUSH
5175: LD_STRING Donaldson
5177: STR
5178: PPUSH
5179: CALL_OW 38
// SaveVariable ( 1 , DonaldsonIn06 ) ;
5183: LD_INT 1
5185: PPUSH
5186: LD_STRING DonaldsonIn06
5188: PPUSH
5189: CALL_OW 39
// end else
5193: GO 5216
// if IsOk ( Donaldson ) then
5195: LD_EXP 9
5199: PPUSH
5200: CALL_OW 302
5204: IFFALSE 5216
// SaveVariable ( 1 , DonaldsonStayInDelta ) ;
5206: LD_INT 1
5208: PPUSH
5209: LD_STRING DonaldsonStayInDelta
5211: PPUSH
5212: CALL_OW 39
// if Gladstone in selectedPeople then
5216: LD_EXP 2
5220: PUSH
5221: LD_EXP 17
5225: IN
5226: IFFALSE 5258
// begin SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
5228: LD_EXP 2
5232: PPUSH
5233: LD_EXP 22
5237: PUSH
5238: LD_STRING Gladstone
5240: STR
5241: PPUSH
5242: CALL_OW 38
// SaveVariable ( 1 , GladstoneIn06 ) ;
5246: LD_INT 1
5248: PPUSH
5249: LD_STRING GladstoneIn06
5251: PPUSH
5252: CALL_OW 39
// end else
5256: GO 5279
// if IsOk ( Gladstone ) then
5258: LD_EXP 2
5262: PPUSH
5263: CALL_OW 302
5267: IFFALSE 5279
// SaveVariable ( 1 , GladstoneStayInDelta ) ;
5269: LD_INT 1
5271: PPUSH
5272: LD_STRING GladstoneStayInDelta
5274: PPUSH
5275: CALL_OW 39
// selectedPeople := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ;
5279: LD_ADDR_EXP 17
5283: PUSH
5284: LD_INT 22
5286: PUSH
5287: LD_INT 1
5289: PUSH
5290: EMPTY
5291: LIST
5292: LIST
5293: PUSH
5294: LD_INT 23
5296: PUSH
5297: LD_INT 1
5299: PUSH
5300: EMPTY
5301: LIST
5302: LIST
5303: PUSH
5304: LD_INT 21
5306: PUSH
5307: LD_INT 1
5309: PUSH
5310: EMPTY
5311: LIST
5312: LIST
5313: PUSH
5314: EMPTY
5315: LIST
5316: LIST
5317: LIST
5318: PPUSH
5319: CALL_OW 69
5323: ST_TO_ADDR
// SaveCharacters ( yourApemans , ApeIn06 ) ;
5324: LD_EXP 13
5328: PPUSH
5329: LD_STRING ApeIn06
5331: PPUSH
5332: CALL_OW 38
// SaveCharacters ( selectedPeople diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis ] , OthersIn06 ) ;
5336: LD_EXP 17
5340: PUSH
5341: LD_EXP 1
5345: PUSH
5346: LD_EXP 4
5350: PUSH
5351: LD_EXP 6
5355: PUSH
5356: LD_EXP 7
5360: PUSH
5361: LD_EXP 5
5365: PUSH
5366: LD_EXP 8
5370: PUSH
5371: LD_EXP 9
5375: PUSH
5376: LD_EXP 2
5380: PUSH
5381: LD_EXP 3
5385: PUSH
5386: EMPTY
5387: LIST
5388: LIST
5389: LIST
5390: LIST
5391: LIST
5392: LIST
5393: LIST
5394: LIST
5395: LIST
5396: DIFF
5397: PPUSH
5398: LD_STRING OthersIn06
5400: PPUSH
5401: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ DeltaDoctor , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis ] , OthersStayInDelta ) ;
5405: LD_INT 22
5407: PUSH
5408: LD_INT 4
5410: PUSH
5411: EMPTY
5412: LIST
5413: LIST
5414: PUSH
5415: LD_INT 2
5417: PUSH
5418: LD_INT 25
5420: PUSH
5421: LD_INT 1
5423: PUSH
5424: EMPTY
5425: LIST
5426: LIST
5427: PUSH
5428: LD_INT 25
5430: PUSH
5431: LD_INT 2
5433: PUSH
5434: EMPTY
5435: LIST
5436: LIST
5437: PUSH
5438: LD_INT 25
5440: PUSH
5441: LD_INT 3
5443: PUSH
5444: EMPTY
5445: LIST
5446: LIST
5447: PUSH
5448: LD_INT 25
5450: PUSH
5451: LD_INT 4
5453: PUSH
5454: EMPTY
5455: LIST
5456: LIST
5457: PUSH
5458: EMPTY
5459: LIST
5460: LIST
5461: LIST
5462: LIST
5463: LIST
5464: PUSH
5465: EMPTY
5466: LIST
5467: LIST
5468: PPUSH
5469: CALL_OW 69
5473: PUSH
5474: LD_EXP 15
5478: PUSH
5479: LD_EXP 4
5483: PUSH
5484: LD_EXP 6
5488: PUSH
5489: LD_EXP 7
5493: PUSH
5494: LD_EXP 5
5498: PUSH
5499: LD_EXP 8
5503: PUSH
5504: LD_EXP 9
5508: PUSH
5509: LD_EXP 2
5513: PUSH
5514: LD_EXP 3
5518: PUSH
5519: EMPTY
5520: LIST
5521: LIST
5522: LIST
5523: LIST
5524: LIST
5525: LIST
5526: LIST
5527: LIST
5528: LIST
5529: DIFF
5530: PPUSH
5531: LD_STRING OthersStayInDelta
5533: PPUSH
5534: CALL_OW 38
// end ;
5538: LD_VAR 0 1
5542: RET
// export function SaveCargos ; var i ; begin
5543: LD_INT 0
5545: PPUSH
5546: PPUSH
// for i in FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) do
5547: LD_ADDR_VAR 0 2
5551: PUSH
5552: LD_INT 3
5554: PPUSH
5555: LD_INT 22
5557: PUSH
5558: LD_INT 1
5560: PUSH
5561: EMPTY
5562: LIST
5563: LIST
5564: PUSH
5565: LD_INT 34
5567: PUSH
5568: LD_INT 12
5570: PUSH
5571: EMPTY
5572: LIST
5573: LIST
5574: PUSH
5575: EMPTY
5576: LIST
5577: LIST
5578: PPUSH
5579: CALL_OW 70
5583: PUSH
5584: FOR_IN
5585: IFFALSE 5613
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
5587: LD_ADDR_EXP 21
5591: PUSH
5592: LD_EXP 21
5596: PUSH
5597: LD_VAR 0 2
5601: PPUSH
5602: CALL 5632 0 1
5606: PUSH
5607: EMPTY
5608: LIST
5609: ADD
5610: ST_TO_ADDR
5611: GO 5584
5613: POP
5614: POP
// SaveVariable ( resources , 06_ResourcesInCargo06_1 ) ;
5615: LD_EXP 21
5619: PPUSH
5620: LD_STRING 06_ResourcesInCargo06_1
5622: PPUSH
5623: CALL_OW 39
// end ;
5627: LD_VAR 0 1
5631: RET
// export function GetMultiCargo ( cargo_bay ) ; begin
5632: LD_INT 0
5634: PPUSH
// result := [ GetCargo ( cargo_bay , mat_cans ) , GetCargo ( cargo_bay , mat_oil ) , GetCargo ( cargo_bay , mat_siberit ) ] ;
5635: LD_ADDR_VAR 0 2
5639: PUSH
5640: LD_VAR 0 1
5644: PPUSH
5645: LD_INT 1
5647: PPUSH
5648: CALL_OW 289
5652: PUSH
5653: LD_VAR 0 1
5657: PPUSH
5658: LD_INT 2
5660: PPUSH
5661: CALL_OW 289
5665: PUSH
5666: LD_VAR 0 1
5670: PPUSH
5671: LD_INT 3
5673: PPUSH
5674: CALL_OW 289
5678: PUSH
5679: EMPTY
5680: LIST
5681: LIST
5682: LIST
5683: ST_TO_ADDR
// end ; end_of_file
5684: LD_VAR 0 2
5688: RET
// on Command ( comandid ) do var i ;
5689: LD_INT 0
5691: PPUSH
// begin if comandid = 65 then
5692: LD_VAR 0 1
5696: PUSH
5697: LD_INT 65
5699: EQUAL
5700: IFFALSE 5741
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
5702: LD_ADDR_VAR 0 2
5706: PUSH
5707: LD_INT 22
5709: PUSH
5710: LD_INT 1
5712: PUSH
5713: EMPTY
5714: LIST
5715: LIST
5716: PUSH
5717: EMPTY
5718: LIST
5719: PPUSH
5720: CALL_OW 69
5724: PUSH
5725: FOR_IN
5726: IFFALSE 5739
// ComStop ( i ) ;
5728: LD_VAR 0 2
5732: PPUSH
5733: CALL_OW 141
5737: GO 5725
5739: POP
5740: POP
// end ;
5741: PPOPN 2
5743: END
// on ApemanTamed ( apeman , human ) do var tmp ;
5744: LD_INT 0
5746: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
5747: LD_ADDR_VAR 0 3
5751: PUSH
5752: LD_INT 22
5754: PUSH
5755: LD_INT 1
5757: PUSH
5758: EMPTY
5759: LIST
5760: LIST
5761: PUSH
5762: LD_INT 21
5764: PUSH
5765: LD_INT 3
5767: PUSH
5768: EMPTY
5769: LIST
5770: LIST
5771: PUSH
5772: LD_INT 30
5774: PUSH
5775: LD_INT 0
5777: PUSH
5778: EMPTY
5779: LIST
5780: LIST
5781: PUSH
5782: EMPTY
5783: LIST
5784: LIST
5785: LIST
5786: PPUSH
5787: CALL_OW 69
5791: ST_TO_ADDR
// ComEnterUnit ( apeman , tmp [ 1 ] ) ;
5792: LD_VAR 0 1
5796: PPUSH
5797: LD_VAR 0 3
5801: PUSH
5802: LD_INT 1
5804: ARRAY
5805: PPUSH
5806: CALL_OW 120
// SetSide ( apeman , 4 ) ;
5810: LD_VAR 0 1
5814: PPUSH
5815: LD_INT 4
5817: PPUSH
5818: CALL_OW 235
// end ; end_of_file
5822: PPOPN 3
5824: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y ) do begin SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ;
5825: LD_VAR 0 1
5829: PPUSH
5830: LD_VAR 0 2
5834: PPUSH
5835: LD_VAR 0 3
5839: PPUSH
5840: LD_VAR 0 4
5844: PPUSH
5845: LD_VAR 0 5
5849: PPUSH
5850: CALL 18629 0 5
// end ;
5854: PPOPN 5
5856: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
5857: LD_VAR 0 2
5861: PUSH
5862: LD_INT 100
5864: EQUAL
5865: IFFALSE 6814
// begin if not StreamModeActive then
5867: LD_EXP 24
5871: NOT
5872: IFFALSE 5882
// StreamModeActive := true ;
5874: LD_ADDR_EXP 24
5878: PUSH
5879: LD_INT 1
5881: ST_TO_ADDR
// if p3 = 0 then
5882: LD_VAR 0 3
5886: PUSH
5887: LD_INT 0
5889: EQUAL
5890: IFFALSE 5896
// InitStreamMode ;
5892: CALL 7047 0 0
// if p3 = 1 then
5896: LD_VAR 0 3
5900: PUSH
5901: LD_INT 1
5903: EQUAL
5904: IFFALSE 5914
// sRocket := true ;
5906: LD_ADDR_EXP 29
5910: PUSH
5911: LD_INT 1
5913: ST_TO_ADDR
// if p3 = 2 then
5914: LD_VAR 0 3
5918: PUSH
5919: LD_INT 2
5921: EQUAL
5922: IFFALSE 5932
// sSpeed := true ;
5924: LD_ADDR_EXP 28
5928: PUSH
5929: LD_INT 1
5931: ST_TO_ADDR
// if p3 = 3 then
5932: LD_VAR 0 3
5936: PUSH
5937: LD_INT 3
5939: EQUAL
5940: IFFALSE 5950
// sEngine := true ;
5942: LD_ADDR_EXP 30
5946: PUSH
5947: LD_INT 1
5949: ST_TO_ADDR
// if p3 = 4 then
5950: LD_VAR 0 3
5954: PUSH
5955: LD_INT 4
5957: EQUAL
5958: IFFALSE 5968
// sSpec := true ;
5960: LD_ADDR_EXP 27
5964: PUSH
5965: LD_INT 1
5967: ST_TO_ADDR
// if p3 = 5 then
5968: LD_VAR 0 3
5972: PUSH
5973: LD_INT 5
5975: EQUAL
5976: IFFALSE 5986
// sLevel := true ;
5978: LD_ADDR_EXP 31
5982: PUSH
5983: LD_INT 1
5985: ST_TO_ADDR
// if p3 = 6 then
5986: LD_VAR 0 3
5990: PUSH
5991: LD_INT 6
5993: EQUAL
5994: IFFALSE 6004
// sArmoury := true ;
5996: LD_ADDR_EXP 32
6000: PUSH
6001: LD_INT 1
6003: ST_TO_ADDR
// if p3 = 7 then
6004: LD_VAR 0 3
6008: PUSH
6009: LD_INT 7
6011: EQUAL
6012: IFFALSE 6022
// sRadar := true ;
6014: LD_ADDR_EXP 33
6018: PUSH
6019: LD_INT 1
6021: ST_TO_ADDR
// if p3 = 8 then
6022: LD_VAR 0 3
6026: PUSH
6027: LD_INT 8
6029: EQUAL
6030: IFFALSE 6040
// sBunker := true ;
6032: LD_ADDR_EXP 34
6036: PUSH
6037: LD_INT 1
6039: ST_TO_ADDR
// if p3 = 9 then
6040: LD_VAR 0 3
6044: PUSH
6045: LD_INT 9
6047: EQUAL
6048: IFFALSE 6058
// sHack := true ;
6050: LD_ADDR_EXP 35
6054: PUSH
6055: LD_INT 1
6057: ST_TO_ADDR
// if p3 = 10 then
6058: LD_VAR 0 3
6062: PUSH
6063: LD_INT 10
6065: EQUAL
6066: IFFALSE 6076
// sFire := true ;
6068: LD_ADDR_EXP 36
6072: PUSH
6073: LD_INT 1
6075: ST_TO_ADDR
// if p3 = 11 then
6076: LD_VAR 0 3
6080: PUSH
6081: LD_INT 11
6083: EQUAL
6084: IFFALSE 6094
// sRefresh := true ;
6086: LD_ADDR_EXP 37
6090: PUSH
6091: LD_INT 1
6093: ST_TO_ADDR
// if p3 = 12 then
6094: LD_VAR 0 3
6098: PUSH
6099: LD_INT 12
6101: EQUAL
6102: IFFALSE 6112
// sExp := true ;
6104: LD_ADDR_EXP 38
6108: PUSH
6109: LD_INT 1
6111: ST_TO_ADDR
// if p3 = 13 then
6112: LD_VAR 0 3
6116: PUSH
6117: LD_INT 13
6119: EQUAL
6120: IFFALSE 6130
// sDepot := true ;
6122: LD_ADDR_EXP 39
6126: PUSH
6127: LD_INT 1
6129: ST_TO_ADDR
// if p3 = 14 then
6130: LD_VAR 0 3
6134: PUSH
6135: LD_INT 14
6137: EQUAL
6138: IFFALSE 6148
// sFlag := true ;
6140: LD_ADDR_EXP 40
6144: PUSH
6145: LD_INT 1
6147: ST_TO_ADDR
// if p3 = 15 then
6148: LD_VAR 0 3
6152: PUSH
6153: LD_INT 15
6155: EQUAL
6156: IFFALSE 6166
// sKamikadze := true ;
6158: LD_ADDR_EXP 48
6162: PUSH
6163: LD_INT 1
6165: ST_TO_ADDR
// if p3 = 16 then
6166: LD_VAR 0 3
6170: PUSH
6171: LD_INT 16
6173: EQUAL
6174: IFFALSE 6184
// sTroll := true ;
6176: LD_ADDR_EXP 49
6180: PUSH
6181: LD_INT 1
6183: ST_TO_ADDR
// if p3 = 17 then
6184: LD_VAR 0 3
6188: PUSH
6189: LD_INT 17
6191: EQUAL
6192: IFFALSE 6202
// sSlow := true ;
6194: LD_ADDR_EXP 50
6198: PUSH
6199: LD_INT 1
6201: ST_TO_ADDR
// if p3 = 18 then
6202: LD_VAR 0 3
6206: PUSH
6207: LD_INT 18
6209: EQUAL
6210: IFFALSE 6220
// sLack := true ;
6212: LD_ADDR_EXP 51
6216: PUSH
6217: LD_INT 1
6219: ST_TO_ADDR
// if p3 = 19 then
6220: LD_VAR 0 3
6224: PUSH
6225: LD_INT 19
6227: EQUAL
6228: IFFALSE 6238
// sTank := true ;
6230: LD_ADDR_EXP 53
6234: PUSH
6235: LD_INT 1
6237: ST_TO_ADDR
// if p3 = 20 then
6238: LD_VAR 0 3
6242: PUSH
6243: LD_INT 20
6245: EQUAL
6246: IFFALSE 6256
// sRemote := true ;
6248: LD_ADDR_EXP 54
6252: PUSH
6253: LD_INT 1
6255: ST_TO_ADDR
// if p3 = 21 then
6256: LD_VAR 0 3
6260: PUSH
6261: LD_INT 21
6263: EQUAL
6264: IFFALSE 6274
// sPowell := true ;
6266: LD_ADDR_EXP 55
6270: PUSH
6271: LD_INT 1
6273: ST_TO_ADDR
// if p3 = 22 then
6274: LD_VAR 0 3
6278: PUSH
6279: LD_INT 22
6281: EQUAL
6282: IFFALSE 6292
// sTeleport := true ;
6284: LD_ADDR_EXP 58
6288: PUSH
6289: LD_INT 1
6291: ST_TO_ADDR
// if p3 = 23 then
6292: LD_VAR 0 3
6296: PUSH
6297: LD_INT 23
6299: EQUAL
6300: IFFALSE 6310
// sOilTower := true ;
6302: LD_ADDR_EXP 60
6306: PUSH
6307: LD_INT 1
6309: ST_TO_ADDR
// if p3 = 24 then
6310: LD_VAR 0 3
6314: PUSH
6315: LD_INT 24
6317: EQUAL
6318: IFFALSE 6328
// sShovel := true ;
6320: LD_ADDR_EXP 61
6324: PUSH
6325: LD_INT 1
6327: ST_TO_ADDR
// if p3 = 25 then
6328: LD_VAR 0 3
6332: PUSH
6333: LD_INT 25
6335: EQUAL
6336: IFFALSE 6346
// sSheik := true ;
6338: LD_ADDR_EXP 62
6342: PUSH
6343: LD_INT 1
6345: ST_TO_ADDR
// if p3 = 26 then
6346: LD_VAR 0 3
6350: PUSH
6351: LD_INT 26
6353: EQUAL
6354: IFFALSE 6364
// sEarthquake := true ;
6356: LD_ADDR_EXP 64
6360: PUSH
6361: LD_INT 1
6363: ST_TO_ADDR
// if p3 = 27 then
6364: LD_VAR 0 3
6368: PUSH
6369: LD_INT 27
6371: EQUAL
6372: IFFALSE 6382
// sAI := true ;
6374: LD_ADDR_EXP 65
6378: PUSH
6379: LD_INT 1
6381: ST_TO_ADDR
// if p3 = 28 then
6382: LD_VAR 0 3
6386: PUSH
6387: LD_INT 28
6389: EQUAL
6390: IFFALSE 6400
// sCargo := true ;
6392: LD_ADDR_EXP 68
6396: PUSH
6397: LD_INT 1
6399: ST_TO_ADDR
// if p3 = 29 then
6400: LD_VAR 0 3
6404: PUSH
6405: LD_INT 29
6407: EQUAL
6408: IFFALSE 6418
// sDLaser := true ;
6410: LD_ADDR_EXP 69
6414: PUSH
6415: LD_INT 1
6417: ST_TO_ADDR
// if p3 = 30 then
6418: LD_VAR 0 3
6422: PUSH
6423: LD_INT 30
6425: EQUAL
6426: IFFALSE 6436
// sExchange := true ;
6428: LD_ADDR_EXP 70
6432: PUSH
6433: LD_INT 1
6435: ST_TO_ADDR
// if p3 = 31 then
6436: LD_VAR 0 3
6440: PUSH
6441: LD_INT 31
6443: EQUAL
6444: IFFALSE 6454
// sFac := true ;
6446: LD_ADDR_EXP 71
6450: PUSH
6451: LD_INT 1
6453: ST_TO_ADDR
// if p3 = 32 then
6454: LD_VAR 0 3
6458: PUSH
6459: LD_INT 32
6461: EQUAL
6462: IFFALSE 6472
// sPower := true ;
6464: LD_ADDR_EXP 72
6468: PUSH
6469: LD_INT 1
6471: ST_TO_ADDR
// if p3 = 33 then
6472: LD_VAR 0 3
6476: PUSH
6477: LD_INT 33
6479: EQUAL
6480: IFFALSE 6490
// sRandom := true ;
6482: LD_ADDR_EXP 73
6486: PUSH
6487: LD_INT 1
6489: ST_TO_ADDR
// if p3 = 34 then
6490: LD_VAR 0 3
6494: PUSH
6495: LD_INT 34
6497: EQUAL
6498: IFFALSE 6508
// sShield := true ;
6500: LD_ADDR_EXP 74
6504: PUSH
6505: LD_INT 1
6507: ST_TO_ADDR
// if p3 = 35 then
6508: LD_VAR 0 3
6512: PUSH
6513: LD_INT 35
6515: EQUAL
6516: IFFALSE 6526
// sTime := true ;
6518: LD_ADDR_EXP 75
6522: PUSH
6523: LD_INT 1
6525: ST_TO_ADDR
// if p3 = 36 then
6526: LD_VAR 0 3
6530: PUSH
6531: LD_INT 36
6533: EQUAL
6534: IFFALSE 6544
// sTools := true ;
6536: LD_ADDR_EXP 76
6540: PUSH
6541: LD_INT 1
6543: ST_TO_ADDR
// if p3 = 101 then
6544: LD_VAR 0 3
6548: PUSH
6549: LD_INT 101
6551: EQUAL
6552: IFFALSE 6562
// sSold := true ;
6554: LD_ADDR_EXP 41
6558: PUSH
6559: LD_INT 1
6561: ST_TO_ADDR
// if p3 = 102 then
6562: LD_VAR 0 3
6566: PUSH
6567: LD_INT 102
6569: EQUAL
6570: IFFALSE 6580
// sDiff := true ;
6572: LD_ADDR_EXP 42
6576: PUSH
6577: LD_INT 1
6579: ST_TO_ADDR
// if p3 = 103 then
6580: LD_VAR 0 3
6584: PUSH
6585: LD_INT 103
6587: EQUAL
6588: IFFALSE 6598
// sFog := true ;
6590: LD_ADDR_EXP 45
6594: PUSH
6595: LD_INT 1
6597: ST_TO_ADDR
// if p3 = 104 then
6598: LD_VAR 0 3
6602: PUSH
6603: LD_INT 104
6605: EQUAL
6606: IFFALSE 6616
// sReset := true ;
6608: LD_ADDR_EXP 46
6612: PUSH
6613: LD_INT 1
6615: ST_TO_ADDR
// if p3 = 105 then
6616: LD_VAR 0 3
6620: PUSH
6621: LD_INT 105
6623: EQUAL
6624: IFFALSE 6634
// sSun := true ;
6626: LD_ADDR_EXP 47
6630: PUSH
6631: LD_INT 1
6633: ST_TO_ADDR
// if p3 = 106 then
6634: LD_VAR 0 3
6638: PUSH
6639: LD_INT 106
6641: EQUAL
6642: IFFALSE 6652
// sTiger := true ;
6644: LD_ADDR_EXP 43
6648: PUSH
6649: LD_INT 1
6651: ST_TO_ADDR
// if p3 = 107 then
6652: LD_VAR 0 3
6656: PUSH
6657: LD_INT 107
6659: EQUAL
6660: IFFALSE 6670
// sBomb := true ;
6662: LD_ADDR_EXP 44
6666: PUSH
6667: LD_INT 1
6669: ST_TO_ADDR
// if p3 = 108 then
6670: LD_VAR 0 3
6674: PUSH
6675: LD_INT 108
6677: EQUAL
6678: IFFALSE 6688
// sWound := true ;
6680: LD_ADDR_EXP 52
6684: PUSH
6685: LD_INT 1
6687: ST_TO_ADDR
// if p3 = 109 then
6688: LD_VAR 0 3
6692: PUSH
6693: LD_INT 109
6695: EQUAL
6696: IFFALSE 6706
// sBetray := true ;
6698: LD_ADDR_EXP 56
6702: PUSH
6703: LD_INT 1
6705: ST_TO_ADDR
// if p3 = 110 then
6706: LD_VAR 0 3
6710: PUSH
6711: LD_INT 110
6713: EQUAL
6714: IFFALSE 6724
// sContamin := true ;
6716: LD_ADDR_EXP 57
6720: PUSH
6721: LD_INT 1
6723: ST_TO_ADDR
// if p3 = 111 then
6724: LD_VAR 0 3
6728: PUSH
6729: LD_INT 111
6731: EQUAL
6732: IFFALSE 6742
// sOil := true ;
6734: LD_ADDR_EXP 59
6738: PUSH
6739: LD_INT 1
6741: ST_TO_ADDR
// if p3 = 112 then
6742: LD_VAR 0 3
6746: PUSH
6747: LD_INT 112
6749: EQUAL
6750: IFFALSE 6760
// sStu := true ;
6752: LD_ADDR_EXP 63
6756: PUSH
6757: LD_INT 1
6759: ST_TO_ADDR
// if p3 = 113 then
6760: LD_VAR 0 3
6764: PUSH
6765: LD_INT 113
6767: EQUAL
6768: IFFALSE 6778
// sBazooka := true ;
6770: LD_ADDR_EXP 66
6774: PUSH
6775: LD_INT 1
6777: ST_TO_ADDR
// if p3 = 114 then
6778: LD_VAR 0 3
6782: PUSH
6783: LD_INT 114
6785: EQUAL
6786: IFFALSE 6796
// sMortar := true ;
6788: LD_ADDR_EXP 67
6792: PUSH
6793: LD_INT 1
6795: ST_TO_ADDR
// if p3 = 115 then
6796: LD_VAR 0 3
6800: PUSH
6801: LD_INT 115
6803: EQUAL
6804: IFFALSE 6814
// sRanger := true ;
6806: LD_ADDR_EXP 77
6810: PUSH
6811: LD_INT 1
6813: ST_TO_ADDR
// end ; if p2 = 101 then
6814: LD_VAR 0 2
6818: PUSH
6819: LD_INT 101
6821: EQUAL
6822: IFFALSE 7025
// begin case p3 of 1 :
6824: LD_VAR 0 3
6828: PUSH
6829: LD_INT 1
6831: DOUBLE
6832: EQUAL
6833: IFTRUE 6837
6835: GO 6844
6837: POP
// hHackUnlimitedResources ; 2 :
6838: CALL 17119 0 0
6842: GO 7025
6844: LD_INT 2
6846: DOUBLE
6847: EQUAL
6848: IFTRUE 6852
6850: GO 6859
6852: POP
// hHackSetLevel10 ; 3 :
6853: CALL 17252 0 0
6857: GO 7025
6859: LD_INT 3
6861: DOUBLE
6862: EQUAL
6863: IFTRUE 6867
6865: GO 6874
6867: POP
// hHackSetLevel10YourUnits ; 4 :
6868: CALL 17337 0 0
6872: GO 7025
6874: LD_INT 4
6876: DOUBLE
6877: EQUAL
6878: IFTRUE 6882
6880: GO 6904
6882: POP
// hHackSpawnHuman ( p4 , p5 , p6 ) ; 5 :
6883: LD_VAR 0 4
6887: PPUSH
6888: LD_VAR 0 5
6892: PPUSH
6893: LD_VAR 0 6
6897: PPUSH
6898: CALL 17427 0 3
6902: GO 7025
6904: LD_INT 5
6906: DOUBLE
6907: EQUAL
6908: IFTRUE 6912
6910: GO 6919
6912: POP
// hHackSpawnVehicle ; 6 :
6913: CALL 17488 0 0
6917: GO 7025
6919: LD_INT 6
6921: DOUBLE
6922: EQUAL
6923: IFTRUE 6927
6925: GO 6934
6927: POP
// hHackInvincible ; 7 :
6928: CALL 18034 0 0
6932: GO 7025
6934: LD_INT 7
6936: DOUBLE
6937: EQUAL
6938: IFTRUE 6942
6940: GO 6949
6942: POP
// hHackInvisible ; 8 :
6943: CALL 18145 0 0
6947: GO 7025
6949: LD_INT 8
6951: DOUBLE
6952: EQUAL
6953: IFTRUE 6957
6955: GO 6964
6957: POP
// hHackChangeYourSide ; 9 :
6958: CALL 18202 0 0
6962: GO 7025
6964: LD_INT 9
6966: DOUBLE
6967: EQUAL
6968: IFTRUE 6972
6970: GO 6979
6972: POP
// hHackChangeUnitSide ; 10 :
6973: CALL 18244 0 0
6977: GO 7025
6979: LD_INT 10
6981: DOUBLE
6982: EQUAL
6983: IFTRUE 6987
6985: GO 6994
6987: POP
// hHackFog ; 11 :
6988: CALL 18345 0 0
6992: GO 7025
6994: LD_INT 11
6996: DOUBLE
6997: EQUAL
6998: IFTRUE 7002
7000: GO 7009
7002: POP
// hHackApeman ; 12 :
7003: CALL 18360 0 0
7007: GO 7025
7009: LD_INT 12
7011: DOUBLE
7012: EQUAL
7013: IFTRUE 7017
7015: GO 7024
7017: POP
// hHackBoom ; end ;
7018: CALL 18445 0 0
7022: GO 7025
7024: POP
// end ; end ;
7025: PPOPN 6
7027: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
7028: GO 7030
7030: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
7031: LD_STRING initStreamRollete();
7033: PPUSH
7034: CALL_OW 559
// InitStreamMode ;
7038: CALL 7047 0 0
// DefineStreamItems ( ) ;
7042: CALL 7487 0 0
// end ;
7046: END
// function InitStreamMode ; begin
7047: LD_INT 0
7049: PPUSH
// streamModeActive := false ;
7050: LD_ADDR_EXP 24
7054: PUSH
7055: LD_INT 0
7057: ST_TO_ADDR
// normalCounter := 36 ;
7058: LD_ADDR_EXP 25
7062: PUSH
7063: LD_INT 36
7065: ST_TO_ADDR
// hardcoreCounter := 16 ;
7066: LD_ADDR_EXP 26
7070: PUSH
7071: LD_INT 16
7073: ST_TO_ADDR
// sRocket := false ;
7074: LD_ADDR_EXP 29
7078: PUSH
7079: LD_INT 0
7081: ST_TO_ADDR
// sSpeed := false ;
7082: LD_ADDR_EXP 28
7086: PUSH
7087: LD_INT 0
7089: ST_TO_ADDR
// sEngine := false ;
7090: LD_ADDR_EXP 30
7094: PUSH
7095: LD_INT 0
7097: ST_TO_ADDR
// sSpec := false ;
7098: LD_ADDR_EXP 27
7102: PUSH
7103: LD_INT 0
7105: ST_TO_ADDR
// sLevel := false ;
7106: LD_ADDR_EXP 31
7110: PUSH
7111: LD_INT 0
7113: ST_TO_ADDR
// sArmoury := false ;
7114: LD_ADDR_EXP 32
7118: PUSH
7119: LD_INT 0
7121: ST_TO_ADDR
// sRadar := false ;
7122: LD_ADDR_EXP 33
7126: PUSH
7127: LD_INT 0
7129: ST_TO_ADDR
// sBunker := false ;
7130: LD_ADDR_EXP 34
7134: PUSH
7135: LD_INT 0
7137: ST_TO_ADDR
// sHack := false ;
7138: LD_ADDR_EXP 35
7142: PUSH
7143: LD_INT 0
7145: ST_TO_ADDR
// sFire := false ;
7146: LD_ADDR_EXP 36
7150: PUSH
7151: LD_INT 0
7153: ST_TO_ADDR
// sRefresh := false ;
7154: LD_ADDR_EXP 37
7158: PUSH
7159: LD_INT 0
7161: ST_TO_ADDR
// sExp := false ;
7162: LD_ADDR_EXP 38
7166: PUSH
7167: LD_INT 0
7169: ST_TO_ADDR
// sDepot := false ;
7170: LD_ADDR_EXP 39
7174: PUSH
7175: LD_INT 0
7177: ST_TO_ADDR
// sFlag := false ;
7178: LD_ADDR_EXP 40
7182: PUSH
7183: LD_INT 0
7185: ST_TO_ADDR
// sKamikadze := false ;
7186: LD_ADDR_EXP 48
7190: PUSH
7191: LD_INT 0
7193: ST_TO_ADDR
// sTroll := false ;
7194: LD_ADDR_EXP 49
7198: PUSH
7199: LD_INT 0
7201: ST_TO_ADDR
// sSlow := false ;
7202: LD_ADDR_EXP 50
7206: PUSH
7207: LD_INT 0
7209: ST_TO_ADDR
// sLack := false ;
7210: LD_ADDR_EXP 51
7214: PUSH
7215: LD_INT 0
7217: ST_TO_ADDR
// sTank := false ;
7218: LD_ADDR_EXP 53
7222: PUSH
7223: LD_INT 0
7225: ST_TO_ADDR
// sRemote := false ;
7226: LD_ADDR_EXP 54
7230: PUSH
7231: LD_INT 0
7233: ST_TO_ADDR
// sPowell := false ;
7234: LD_ADDR_EXP 55
7238: PUSH
7239: LD_INT 0
7241: ST_TO_ADDR
// sTeleport := false ;
7242: LD_ADDR_EXP 58
7246: PUSH
7247: LD_INT 0
7249: ST_TO_ADDR
// sOilTower := false ;
7250: LD_ADDR_EXP 60
7254: PUSH
7255: LD_INT 0
7257: ST_TO_ADDR
// sShovel := false ;
7258: LD_ADDR_EXP 61
7262: PUSH
7263: LD_INT 0
7265: ST_TO_ADDR
// sSheik := false ;
7266: LD_ADDR_EXP 62
7270: PUSH
7271: LD_INT 0
7273: ST_TO_ADDR
// sEarthquake := false ;
7274: LD_ADDR_EXP 64
7278: PUSH
7279: LD_INT 0
7281: ST_TO_ADDR
// sAI := false ;
7282: LD_ADDR_EXP 65
7286: PUSH
7287: LD_INT 0
7289: ST_TO_ADDR
// sCargo := false ;
7290: LD_ADDR_EXP 68
7294: PUSH
7295: LD_INT 0
7297: ST_TO_ADDR
// sDLaser := false ;
7298: LD_ADDR_EXP 69
7302: PUSH
7303: LD_INT 0
7305: ST_TO_ADDR
// sExchange := false ;
7306: LD_ADDR_EXP 70
7310: PUSH
7311: LD_INT 0
7313: ST_TO_ADDR
// sFac := false ;
7314: LD_ADDR_EXP 71
7318: PUSH
7319: LD_INT 0
7321: ST_TO_ADDR
// sPower := false ;
7322: LD_ADDR_EXP 72
7326: PUSH
7327: LD_INT 0
7329: ST_TO_ADDR
// sRandom := false ;
7330: LD_ADDR_EXP 73
7334: PUSH
7335: LD_INT 0
7337: ST_TO_ADDR
// sShield := false ;
7338: LD_ADDR_EXP 74
7342: PUSH
7343: LD_INT 0
7345: ST_TO_ADDR
// sTime := false ;
7346: LD_ADDR_EXP 75
7350: PUSH
7351: LD_INT 0
7353: ST_TO_ADDR
// sTools := false ;
7354: LD_ADDR_EXP 76
7358: PUSH
7359: LD_INT 0
7361: ST_TO_ADDR
// sSold := false ;
7362: LD_ADDR_EXP 41
7366: PUSH
7367: LD_INT 0
7369: ST_TO_ADDR
// sDiff := false ;
7370: LD_ADDR_EXP 42
7374: PUSH
7375: LD_INT 0
7377: ST_TO_ADDR
// sFog := false ;
7378: LD_ADDR_EXP 45
7382: PUSH
7383: LD_INT 0
7385: ST_TO_ADDR
// sReset := false ;
7386: LD_ADDR_EXP 46
7390: PUSH
7391: LD_INT 0
7393: ST_TO_ADDR
// sSun := false ;
7394: LD_ADDR_EXP 47
7398: PUSH
7399: LD_INT 0
7401: ST_TO_ADDR
// sTiger := false ;
7402: LD_ADDR_EXP 43
7406: PUSH
7407: LD_INT 0
7409: ST_TO_ADDR
// sBomb := false ;
7410: LD_ADDR_EXP 44
7414: PUSH
7415: LD_INT 0
7417: ST_TO_ADDR
// sWound := false ;
7418: LD_ADDR_EXP 52
7422: PUSH
7423: LD_INT 0
7425: ST_TO_ADDR
// sBetray := false ;
7426: LD_ADDR_EXP 56
7430: PUSH
7431: LD_INT 0
7433: ST_TO_ADDR
// sContamin := false ;
7434: LD_ADDR_EXP 57
7438: PUSH
7439: LD_INT 0
7441: ST_TO_ADDR
// sOil := false ;
7442: LD_ADDR_EXP 59
7446: PUSH
7447: LD_INT 0
7449: ST_TO_ADDR
// sStu := false ;
7450: LD_ADDR_EXP 63
7454: PUSH
7455: LD_INT 0
7457: ST_TO_ADDR
// sBazooka := false ;
7458: LD_ADDR_EXP 66
7462: PUSH
7463: LD_INT 0
7465: ST_TO_ADDR
// sMortar := false ;
7466: LD_ADDR_EXP 67
7470: PUSH
7471: LD_INT 0
7473: ST_TO_ADDR
// sRanger := false ;
7474: LD_ADDR_EXP 77
7478: PUSH
7479: LD_INT 0
7481: ST_TO_ADDR
// end ;
7482: LD_VAR 0 1
7486: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
7487: LD_INT 0
7489: PPUSH
7490: PPUSH
7491: PPUSH
7492: PPUSH
7493: PPUSH
// result := [ ] ;
7494: LD_ADDR_VAR 0 1
7498: PUSH
7499: EMPTY
7500: ST_TO_ADDR
// if campaign_id = 1 then
7501: LD_OWVAR 69
7505: PUSH
7506: LD_INT 1
7508: EQUAL
7509: IFFALSE 10447
// begin case mission_number of 1 :
7511: LD_OWVAR 70
7515: PUSH
7516: LD_INT 1
7518: DOUBLE
7519: EQUAL
7520: IFTRUE 7524
7522: GO 7588
7524: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
7525: LD_ADDR_VAR 0 1
7529: PUSH
7530: LD_INT 2
7532: PUSH
7533: LD_INT 4
7535: PUSH
7536: LD_INT 11
7538: PUSH
7539: LD_INT 12
7541: PUSH
7542: LD_INT 15
7544: PUSH
7545: LD_INT 16
7547: PUSH
7548: LD_INT 22
7550: PUSH
7551: LD_INT 23
7553: PUSH
7554: LD_INT 26
7556: PUSH
7557: EMPTY
7558: LIST
7559: LIST
7560: LIST
7561: LIST
7562: LIST
7563: LIST
7564: LIST
7565: LIST
7566: LIST
7567: PUSH
7568: LD_INT 101
7570: PUSH
7571: LD_INT 102
7573: PUSH
7574: LD_INT 106
7576: PUSH
7577: EMPTY
7578: LIST
7579: LIST
7580: LIST
7581: PUSH
7582: EMPTY
7583: LIST
7584: LIST
7585: ST_TO_ADDR
7586: GO 10445
7588: LD_INT 2
7590: DOUBLE
7591: EQUAL
7592: IFTRUE 7596
7594: GO 7668
7596: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
7597: LD_ADDR_VAR 0 1
7601: PUSH
7602: LD_INT 2
7604: PUSH
7605: LD_INT 4
7607: PUSH
7608: LD_INT 11
7610: PUSH
7611: LD_INT 12
7613: PUSH
7614: LD_INT 15
7616: PUSH
7617: LD_INT 16
7619: PUSH
7620: LD_INT 22
7622: PUSH
7623: LD_INT 23
7625: PUSH
7626: LD_INT 26
7628: PUSH
7629: EMPTY
7630: LIST
7631: LIST
7632: LIST
7633: LIST
7634: LIST
7635: LIST
7636: LIST
7637: LIST
7638: LIST
7639: PUSH
7640: LD_INT 101
7642: PUSH
7643: LD_INT 102
7645: PUSH
7646: LD_INT 105
7648: PUSH
7649: LD_INT 106
7651: PUSH
7652: LD_INT 108
7654: PUSH
7655: EMPTY
7656: LIST
7657: LIST
7658: LIST
7659: LIST
7660: LIST
7661: PUSH
7662: EMPTY
7663: LIST
7664: LIST
7665: ST_TO_ADDR
7666: GO 10445
7668: LD_INT 3
7670: DOUBLE
7671: EQUAL
7672: IFTRUE 7676
7674: GO 7752
7676: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
7677: LD_ADDR_VAR 0 1
7681: PUSH
7682: LD_INT 2
7684: PUSH
7685: LD_INT 4
7687: PUSH
7688: LD_INT 5
7690: PUSH
7691: LD_INT 11
7693: PUSH
7694: LD_INT 12
7696: PUSH
7697: LD_INT 15
7699: PUSH
7700: LD_INT 16
7702: PUSH
7703: LD_INT 22
7705: PUSH
7706: LD_INT 26
7708: PUSH
7709: LD_INT 36
7711: PUSH
7712: EMPTY
7713: LIST
7714: LIST
7715: LIST
7716: LIST
7717: LIST
7718: LIST
7719: LIST
7720: LIST
7721: LIST
7722: LIST
7723: PUSH
7724: LD_INT 101
7726: PUSH
7727: LD_INT 102
7729: PUSH
7730: LD_INT 105
7732: PUSH
7733: LD_INT 106
7735: PUSH
7736: LD_INT 108
7738: PUSH
7739: EMPTY
7740: LIST
7741: LIST
7742: LIST
7743: LIST
7744: LIST
7745: PUSH
7746: EMPTY
7747: LIST
7748: LIST
7749: ST_TO_ADDR
7750: GO 10445
7752: LD_INT 4
7754: DOUBLE
7755: EQUAL
7756: IFTRUE 7760
7758: GO 7844
7760: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
7761: LD_ADDR_VAR 0 1
7765: PUSH
7766: LD_INT 2
7768: PUSH
7769: LD_INT 4
7771: PUSH
7772: LD_INT 5
7774: PUSH
7775: LD_INT 8
7777: PUSH
7778: LD_INT 11
7780: PUSH
7781: LD_INT 12
7783: PUSH
7784: LD_INT 15
7786: PUSH
7787: LD_INT 16
7789: PUSH
7790: LD_INT 22
7792: PUSH
7793: LD_INT 23
7795: PUSH
7796: LD_INT 26
7798: PUSH
7799: LD_INT 36
7801: PUSH
7802: EMPTY
7803: LIST
7804: LIST
7805: LIST
7806: LIST
7807: LIST
7808: LIST
7809: LIST
7810: LIST
7811: LIST
7812: LIST
7813: LIST
7814: LIST
7815: PUSH
7816: LD_INT 101
7818: PUSH
7819: LD_INT 102
7821: PUSH
7822: LD_INT 105
7824: PUSH
7825: LD_INT 106
7827: PUSH
7828: LD_INT 108
7830: PUSH
7831: EMPTY
7832: LIST
7833: LIST
7834: LIST
7835: LIST
7836: LIST
7837: PUSH
7838: EMPTY
7839: LIST
7840: LIST
7841: ST_TO_ADDR
7842: GO 10445
7844: LD_INT 5
7846: DOUBLE
7847: EQUAL
7848: IFTRUE 7852
7850: GO 7952
7852: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
7853: LD_ADDR_VAR 0 1
7857: PUSH
7858: LD_INT 2
7860: PUSH
7861: LD_INT 4
7863: PUSH
7864: LD_INT 5
7866: PUSH
7867: LD_INT 6
7869: PUSH
7870: LD_INT 8
7872: PUSH
7873: LD_INT 11
7875: PUSH
7876: LD_INT 12
7878: PUSH
7879: LD_INT 15
7881: PUSH
7882: LD_INT 16
7884: PUSH
7885: LD_INT 22
7887: PUSH
7888: LD_INT 23
7890: PUSH
7891: LD_INT 25
7893: PUSH
7894: LD_INT 26
7896: PUSH
7897: LD_INT 36
7899: PUSH
7900: EMPTY
7901: LIST
7902: LIST
7903: LIST
7904: LIST
7905: LIST
7906: LIST
7907: LIST
7908: LIST
7909: LIST
7910: LIST
7911: LIST
7912: LIST
7913: LIST
7914: LIST
7915: PUSH
7916: LD_INT 101
7918: PUSH
7919: LD_INT 102
7921: PUSH
7922: LD_INT 105
7924: PUSH
7925: LD_INT 106
7927: PUSH
7928: LD_INT 108
7930: PUSH
7931: LD_INT 109
7933: PUSH
7934: LD_INT 112
7936: PUSH
7937: EMPTY
7938: LIST
7939: LIST
7940: LIST
7941: LIST
7942: LIST
7943: LIST
7944: LIST
7945: PUSH
7946: EMPTY
7947: LIST
7948: LIST
7949: ST_TO_ADDR
7950: GO 10445
7952: LD_INT 6
7954: DOUBLE
7955: EQUAL
7956: IFTRUE 7960
7958: GO 8080
7960: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
7961: LD_ADDR_VAR 0 1
7965: PUSH
7966: LD_INT 2
7968: PUSH
7969: LD_INT 4
7971: PUSH
7972: LD_INT 5
7974: PUSH
7975: LD_INT 6
7977: PUSH
7978: LD_INT 8
7980: PUSH
7981: LD_INT 11
7983: PUSH
7984: LD_INT 12
7986: PUSH
7987: LD_INT 15
7989: PUSH
7990: LD_INT 16
7992: PUSH
7993: LD_INT 20
7995: PUSH
7996: LD_INT 21
7998: PUSH
7999: LD_INT 22
8001: PUSH
8002: LD_INT 23
8004: PUSH
8005: LD_INT 25
8007: PUSH
8008: LD_INT 26
8010: PUSH
8011: LD_INT 30
8013: PUSH
8014: LD_INT 31
8016: PUSH
8017: LD_INT 32
8019: PUSH
8020: LD_INT 36
8022: PUSH
8023: EMPTY
8024: LIST
8025: LIST
8026: LIST
8027: LIST
8028: LIST
8029: LIST
8030: LIST
8031: LIST
8032: LIST
8033: LIST
8034: LIST
8035: LIST
8036: LIST
8037: LIST
8038: LIST
8039: LIST
8040: LIST
8041: LIST
8042: LIST
8043: PUSH
8044: LD_INT 101
8046: PUSH
8047: LD_INT 102
8049: PUSH
8050: LD_INT 105
8052: PUSH
8053: LD_INT 106
8055: PUSH
8056: LD_INT 108
8058: PUSH
8059: LD_INT 109
8061: PUSH
8062: LD_INT 112
8064: PUSH
8065: EMPTY
8066: LIST
8067: LIST
8068: LIST
8069: LIST
8070: LIST
8071: LIST
8072: LIST
8073: PUSH
8074: EMPTY
8075: LIST
8076: LIST
8077: ST_TO_ADDR
8078: GO 10445
8080: LD_INT 7
8082: DOUBLE
8083: EQUAL
8084: IFTRUE 8088
8086: GO 8188
8088: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
8089: LD_ADDR_VAR 0 1
8093: PUSH
8094: LD_INT 2
8096: PUSH
8097: LD_INT 4
8099: PUSH
8100: LD_INT 5
8102: PUSH
8103: LD_INT 7
8105: PUSH
8106: LD_INT 11
8108: PUSH
8109: LD_INT 12
8111: PUSH
8112: LD_INT 15
8114: PUSH
8115: LD_INT 16
8117: PUSH
8118: LD_INT 20
8120: PUSH
8121: LD_INT 21
8123: PUSH
8124: LD_INT 22
8126: PUSH
8127: LD_INT 23
8129: PUSH
8130: LD_INT 25
8132: PUSH
8133: LD_INT 26
8135: PUSH
8136: EMPTY
8137: LIST
8138: LIST
8139: LIST
8140: LIST
8141: LIST
8142: LIST
8143: LIST
8144: LIST
8145: LIST
8146: LIST
8147: LIST
8148: LIST
8149: LIST
8150: LIST
8151: PUSH
8152: LD_INT 101
8154: PUSH
8155: LD_INT 102
8157: PUSH
8158: LD_INT 103
8160: PUSH
8161: LD_INT 105
8163: PUSH
8164: LD_INT 106
8166: PUSH
8167: LD_INT 108
8169: PUSH
8170: LD_INT 112
8172: PUSH
8173: EMPTY
8174: LIST
8175: LIST
8176: LIST
8177: LIST
8178: LIST
8179: LIST
8180: LIST
8181: PUSH
8182: EMPTY
8183: LIST
8184: LIST
8185: ST_TO_ADDR
8186: GO 10445
8188: LD_INT 8
8190: DOUBLE
8191: EQUAL
8192: IFTRUE 8196
8194: GO 8324
8196: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
8197: LD_ADDR_VAR 0 1
8201: PUSH
8202: LD_INT 2
8204: PUSH
8205: LD_INT 4
8207: PUSH
8208: LD_INT 5
8210: PUSH
8211: LD_INT 6
8213: PUSH
8214: LD_INT 7
8216: PUSH
8217: LD_INT 8
8219: PUSH
8220: LD_INT 11
8222: PUSH
8223: LD_INT 12
8225: PUSH
8226: LD_INT 15
8228: PUSH
8229: LD_INT 16
8231: PUSH
8232: LD_INT 20
8234: PUSH
8235: LD_INT 21
8237: PUSH
8238: LD_INT 22
8240: PUSH
8241: LD_INT 23
8243: PUSH
8244: LD_INT 25
8246: PUSH
8247: LD_INT 26
8249: PUSH
8250: LD_INT 30
8252: PUSH
8253: LD_INT 31
8255: PUSH
8256: LD_INT 32
8258: PUSH
8259: LD_INT 36
8261: PUSH
8262: EMPTY
8263: LIST
8264: LIST
8265: LIST
8266: LIST
8267: LIST
8268: LIST
8269: LIST
8270: LIST
8271: LIST
8272: LIST
8273: LIST
8274: LIST
8275: LIST
8276: LIST
8277: LIST
8278: LIST
8279: LIST
8280: LIST
8281: LIST
8282: LIST
8283: PUSH
8284: LD_INT 101
8286: PUSH
8287: LD_INT 102
8289: PUSH
8290: LD_INT 103
8292: PUSH
8293: LD_INT 105
8295: PUSH
8296: LD_INT 106
8298: PUSH
8299: LD_INT 108
8301: PUSH
8302: LD_INT 109
8304: PUSH
8305: LD_INT 112
8307: PUSH
8308: EMPTY
8309: LIST
8310: LIST
8311: LIST
8312: LIST
8313: LIST
8314: LIST
8315: LIST
8316: LIST
8317: PUSH
8318: EMPTY
8319: LIST
8320: LIST
8321: ST_TO_ADDR
8322: GO 10445
8324: LD_INT 9
8326: DOUBLE
8327: EQUAL
8328: IFTRUE 8332
8330: GO 8468
8332: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
8333: LD_ADDR_VAR 0 1
8337: PUSH
8338: LD_INT 2
8340: PUSH
8341: LD_INT 4
8343: PUSH
8344: LD_INT 5
8346: PUSH
8347: LD_INT 6
8349: PUSH
8350: LD_INT 7
8352: PUSH
8353: LD_INT 8
8355: PUSH
8356: LD_INT 11
8358: PUSH
8359: LD_INT 12
8361: PUSH
8362: LD_INT 15
8364: PUSH
8365: LD_INT 16
8367: PUSH
8368: LD_INT 20
8370: PUSH
8371: LD_INT 21
8373: PUSH
8374: LD_INT 22
8376: PUSH
8377: LD_INT 23
8379: PUSH
8380: LD_INT 25
8382: PUSH
8383: LD_INT 26
8385: PUSH
8386: LD_INT 28
8388: PUSH
8389: LD_INT 30
8391: PUSH
8392: LD_INT 31
8394: PUSH
8395: LD_INT 32
8397: PUSH
8398: LD_INT 36
8400: PUSH
8401: EMPTY
8402: LIST
8403: LIST
8404: LIST
8405: LIST
8406: LIST
8407: LIST
8408: LIST
8409: LIST
8410: LIST
8411: LIST
8412: LIST
8413: LIST
8414: LIST
8415: LIST
8416: LIST
8417: LIST
8418: LIST
8419: LIST
8420: LIST
8421: LIST
8422: LIST
8423: PUSH
8424: LD_INT 101
8426: PUSH
8427: LD_INT 102
8429: PUSH
8430: LD_INT 103
8432: PUSH
8433: LD_INT 105
8435: PUSH
8436: LD_INT 106
8438: PUSH
8439: LD_INT 108
8441: PUSH
8442: LD_INT 109
8444: PUSH
8445: LD_INT 112
8447: PUSH
8448: LD_INT 114
8450: PUSH
8451: EMPTY
8452: LIST
8453: LIST
8454: LIST
8455: LIST
8456: LIST
8457: LIST
8458: LIST
8459: LIST
8460: LIST
8461: PUSH
8462: EMPTY
8463: LIST
8464: LIST
8465: ST_TO_ADDR
8466: GO 10445
8468: LD_INT 10
8470: DOUBLE
8471: EQUAL
8472: IFTRUE 8476
8474: GO 8660
8476: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
8477: LD_ADDR_VAR 0 1
8481: PUSH
8482: LD_INT 2
8484: PUSH
8485: LD_INT 4
8487: PUSH
8488: LD_INT 5
8490: PUSH
8491: LD_INT 6
8493: PUSH
8494: LD_INT 7
8496: PUSH
8497: LD_INT 8
8499: PUSH
8500: LD_INT 9
8502: PUSH
8503: LD_INT 10
8505: PUSH
8506: LD_INT 11
8508: PUSH
8509: LD_INT 12
8511: PUSH
8512: LD_INT 13
8514: PUSH
8515: LD_INT 14
8517: PUSH
8518: LD_INT 15
8520: PUSH
8521: LD_INT 16
8523: PUSH
8524: LD_INT 17
8526: PUSH
8527: LD_INT 18
8529: PUSH
8530: LD_INT 19
8532: PUSH
8533: LD_INT 20
8535: PUSH
8536: LD_INT 21
8538: PUSH
8539: LD_INT 22
8541: PUSH
8542: LD_INT 23
8544: PUSH
8545: LD_INT 24
8547: PUSH
8548: LD_INT 25
8550: PUSH
8551: LD_INT 26
8553: PUSH
8554: LD_INT 28
8556: PUSH
8557: LD_INT 30
8559: PUSH
8560: LD_INT 31
8562: PUSH
8563: LD_INT 32
8565: PUSH
8566: LD_INT 36
8568: PUSH
8569: EMPTY
8570: LIST
8571: LIST
8572: LIST
8573: LIST
8574: LIST
8575: LIST
8576: LIST
8577: LIST
8578: LIST
8579: LIST
8580: LIST
8581: LIST
8582: LIST
8583: LIST
8584: LIST
8585: LIST
8586: LIST
8587: LIST
8588: LIST
8589: LIST
8590: LIST
8591: LIST
8592: LIST
8593: LIST
8594: LIST
8595: LIST
8596: LIST
8597: LIST
8598: LIST
8599: PUSH
8600: LD_INT 101
8602: PUSH
8603: LD_INT 102
8605: PUSH
8606: LD_INT 103
8608: PUSH
8609: LD_INT 104
8611: PUSH
8612: LD_INT 105
8614: PUSH
8615: LD_INT 106
8617: PUSH
8618: LD_INT 107
8620: PUSH
8621: LD_INT 108
8623: PUSH
8624: LD_INT 109
8626: PUSH
8627: LD_INT 110
8629: PUSH
8630: LD_INT 111
8632: PUSH
8633: LD_INT 112
8635: PUSH
8636: LD_INT 114
8638: PUSH
8639: EMPTY
8640: LIST
8641: LIST
8642: LIST
8643: LIST
8644: LIST
8645: LIST
8646: LIST
8647: LIST
8648: LIST
8649: LIST
8650: LIST
8651: LIST
8652: LIST
8653: PUSH
8654: EMPTY
8655: LIST
8656: LIST
8657: ST_TO_ADDR
8658: GO 10445
8660: LD_INT 11
8662: DOUBLE
8663: EQUAL
8664: IFTRUE 8668
8666: GO 8860
8668: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
8669: LD_ADDR_VAR 0 1
8673: PUSH
8674: LD_INT 2
8676: PUSH
8677: LD_INT 3
8679: PUSH
8680: LD_INT 4
8682: PUSH
8683: LD_INT 5
8685: PUSH
8686: LD_INT 6
8688: PUSH
8689: LD_INT 7
8691: PUSH
8692: LD_INT 8
8694: PUSH
8695: LD_INT 9
8697: PUSH
8698: LD_INT 10
8700: PUSH
8701: LD_INT 11
8703: PUSH
8704: LD_INT 12
8706: PUSH
8707: LD_INT 13
8709: PUSH
8710: LD_INT 14
8712: PUSH
8713: LD_INT 15
8715: PUSH
8716: LD_INT 16
8718: PUSH
8719: LD_INT 17
8721: PUSH
8722: LD_INT 18
8724: PUSH
8725: LD_INT 19
8727: PUSH
8728: LD_INT 20
8730: PUSH
8731: LD_INT 21
8733: PUSH
8734: LD_INT 22
8736: PUSH
8737: LD_INT 23
8739: PUSH
8740: LD_INT 24
8742: PUSH
8743: LD_INT 25
8745: PUSH
8746: LD_INT 26
8748: PUSH
8749: LD_INT 28
8751: PUSH
8752: LD_INT 30
8754: PUSH
8755: LD_INT 31
8757: PUSH
8758: LD_INT 32
8760: PUSH
8761: LD_INT 34
8763: PUSH
8764: LD_INT 36
8766: PUSH
8767: EMPTY
8768: LIST
8769: LIST
8770: LIST
8771: LIST
8772: LIST
8773: LIST
8774: LIST
8775: LIST
8776: LIST
8777: LIST
8778: LIST
8779: LIST
8780: LIST
8781: LIST
8782: LIST
8783: LIST
8784: LIST
8785: LIST
8786: LIST
8787: LIST
8788: LIST
8789: LIST
8790: LIST
8791: LIST
8792: LIST
8793: LIST
8794: LIST
8795: LIST
8796: LIST
8797: LIST
8798: LIST
8799: PUSH
8800: LD_INT 101
8802: PUSH
8803: LD_INT 102
8805: PUSH
8806: LD_INT 103
8808: PUSH
8809: LD_INT 104
8811: PUSH
8812: LD_INT 105
8814: PUSH
8815: LD_INT 106
8817: PUSH
8818: LD_INT 107
8820: PUSH
8821: LD_INT 108
8823: PUSH
8824: LD_INT 109
8826: PUSH
8827: LD_INT 110
8829: PUSH
8830: LD_INT 111
8832: PUSH
8833: LD_INT 112
8835: PUSH
8836: LD_INT 114
8838: PUSH
8839: EMPTY
8840: LIST
8841: LIST
8842: LIST
8843: LIST
8844: LIST
8845: LIST
8846: LIST
8847: LIST
8848: LIST
8849: LIST
8850: LIST
8851: LIST
8852: LIST
8853: PUSH
8854: EMPTY
8855: LIST
8856: LIST
8857: ST_TO_ADDR
8858: GO 10445
8860: LD_INT 12
8862: DOUBLE
8863: EQUAL
8864: IFTRUE 8868
8866: GO 9076
8868: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
8869: LD_ADDR_VAR 0 1
8873: PUSH
8874: LD_INT 1
8876: PUSH
8877: LD_INT 2
8879: PUSH
8880: LD_INT 3
8882: PUSH
8883: LD_INT 4
8885: PUSH
8886: LD_INT 5
8888: PUSH
8889: LD_INT 6
8891: PUSH
8892: LD_INT 7
8894: PUSH
8895: LD_INT 8
8897: PUSH
8898: LD_INT 9
8900: PUSH
8901: LD_INT 10
8903: PUSH
8904: LD_INT 11
8906: PUSH
8907: LD_INT 12
8909: PUSH
8910: LD_INT 13
8912: PUSH
8913: LD_INT 14
8915: PUSH
8916: LD_INT 15
8918: PUSH
8919: LD_INT 16
8921: PUSH
8922: LD_INT 17
8924: PUSH
8925: LD_INT 18
8927: PUSH
8928: LD_INT 19
8930: PUSH
8931: LD_INT 20
8933: PUSH
8934: LD_INT 21
8936: PUSH
8937: LD_INT 22
8939: PUSH
8940: LD_INT 23
8942: PUSH
8943: LD_INT 24
8945: PUSH
8946: LD_INT 25
8948: PUSH
8949: LD_INT 26
8951: PUSH
8952: LD_INT 27
8954: PUSH
8955: LD_INT 28
8957: PUSH
8958: LD_INT 30
8960: PUSH
8961: LD_INT 31
8963: PUSH
8964: LD_INT 32
8966: PUSH
8967: LD_INT 33
8969: PUSH
8970: LD_INT 34
8972: PUSH
8973: LD_INT 36
8975: PUSH
8976: EMPTY
8977: LIST
8978: LIST
8979: LIST
8980: LIST
8981: LIST
8982: LIST
8983: LIST
8984: LIST
8985: LIST
8986: LIST
8987: LIST
8988: LIST
8989: LIST
8990: LIST
8991: LIST
8992: LIST
8993: LIST
8994: LIST
8995: LIST
8996: LIST
8997: LIST
8998: LIST
8999: LIST
9000: LIST
9001: LIST
9002: LIST
9003: LIST
9004: LIST
9005: LIST
9006: LIST
9007: LIST
9008: LIST
9009: LIST
9010: LIST
9011: PUSH
9012: LD_INT 101
9014: PUSH
9015: LD_INT 102
9017: PUSH
9018: LD_INT 103
9020: PUSH
9021: LD_INT 104
9023: PUSH
9024: LD_INT 105
9026: PUSH
9027: LD_INT 106
9029: PUSH
9030: LD_INT 107
9032: PUSH
9033: LD_INT 108
9035: PUSH
9036: LD_INT 109
9038: PUSH
9039: LD_INT 110
9041: PUSH
9042: LD_INT 111
9044: PUSH
9045: LD_INT 112
9047: PUSH
9048: LD_INT 113
9050: PUSH
9051: LD_INT 114
9053: PUSH
9054: EMPTY
9055: LIST
9056: LIST
9057: LIST
9058: LIST
9059: LIST
9060: LIST
9061: LIST
9062: LIST
9063: LIST
9064: LIST
9065: LIST
9066: LIST
9067: LIST
9068: LIST
9069: PUSH
9070: EMPTY
9071: LIST
9072: LIST
9073: ST_TO_ADDR
9074: GO 10445
9076: LD_INT 13
9078: DOUBLE
9079: EQUAL
9080: IFTRUE 9084
9082: GO 9280
9084: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
9085: LD_ADDR_VAR 0 1
9089: PUSH
9090: LD_INT 1
9092: PUSH
9093: LD_INT 2
9095: PUSH
9096: LD_INT 3
9098: PUSH
9099: LD_INT 4
9101: PUSH
9102: LD_INT 5
9104: PUSH
9105: LD_INT 8
9107: PUSH
9108: LD_INT 9
9110: PUSH
9111: LD_INT 10
9113: PUSH
9114: LD_INT 11
9116: PUSH
9117: LD_INT 12
9119: PUSH
9120: LD_INT 14
9122: PUSH
9123: LD_INT 15
9125: PUSH
9126: LD_INT 16
9128: PUSH
9129: LD_INT 17
9131: PUSH
9132: LD_INT 18
9134: PUSH
9135: LD_INT 19
9137: PUSH
9138: LD_INT 20
9140: PUSH
9141: LD_INT 21
9143: PUSH
9144: LD_INT 22
9146: PUSH
9147: LD_INT 23
9149: PUSH
9150: LD_INT 24
9152: PUSH
9153: LD_INT 25
9155: PUSH
9156: LD_INT 26
9158: PUSH
9159: LD_INT 27
9161: PUSH
9162: LD_INT 28
9164: PUSH
9165: LD_INT 30
9167: PUSH
9168: LD_INT 31
9170: PUSH
9171: LD_INT 32
9173: PUSH
9174: LD_INT 33
9176: PUSH
9177: LD_INT 34
9179: PUSH
9180: LD_INT 36
9182: PUSH
9183: EMPTY
9184: LIST
9185: LIST
9186: LIST
9187: LIST
9188: LIST
9189: LIST
9190: LIST
9191: LIST
9192: LIST
9193: LIST
9194: LIST
9195: LIST
9196: LIST
9197: LIST
9198: LIST
9199: LIST
9200: LIST
9201: LIST
9202: LIST
9203: LIST
9204: LIST
9205: LIST
9206: LIST
9207: LIST
9208: LIST
9209: LIST
9210: LIST
9211: LIST
9212: LIST
9213: LIST
9214: LIST
9215: PUSH
9216: LD_INT 101
9218: PUSH
9219: LD_INT 102
9221: PUSH
9222: LD_INT 103
9224: PUSH
9225: LD_INT 104
9227: PUSH
9228: LD_INT 105
9230: PUSH
9231: LD_INT 106
9233: PUSH
9234: LD_INT 107
9236: PUSH
9237: LD_INT 108
9239: PUSH
9240: LD_INT 109
9242: PUSH
9243: LD_INT 110
9245: PUSH
9246: LD_INT 111
9248: PUSH
9249: LD_INT 112
9251: PUSH
9252: LD_INT 113
9254: PUSH
9255: LD_INT 114
9257: PUSH
9258: EMPTY
9259: LIST
9260: LIST
9261: LIST
9262: LIST
9263: LIST
9264: LIST
9265: LIST
9266: LIST
9267: LIST
9268: LIST
9269: LIST
9270: LIST
9271: LIST
9272: LIST
9273: PUSH
9274: EMPTY
9275: LIST
9276: LIST
9277: ST_TO_ADDR
9278: GO 10445
9280: LD_INT 14
9282: DOUBLE
9283: EQUAL
9284: IFTRUE 9288
9286: GO 9500
9288: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
9289: LD_ADDR_VAR 0 1
9293: PUSH
9294: LD_INT 1
9296: PUSH
9297: LD_INT 2
9299: PUSH
9300: LD_INT 3
9302: PUSH
9303: LD_INT 4
9305: PUSH
9306: LD_INT 5
9308: PUSH
9309: LD_INT 6
9311: PUSH
9312: LD_INT 7
9314: PUSH
9315: LD_INT 8
9317: PUSH
9318: LD_INT 9
9320: PUSH
9321: LD_INT 10
9323: PUSH
9324: LD_INT 11
9326: PUSH
9327: LD_INT 12
9329: PUSH
9330: LD_INT 13
9332: PUSH
9333: LD_INT 14
9335: PUSH
9336: LD_INT 15
9338: PUSH
9339: LD_INT 16
9341: PUSH
9342: LD_INT 17
9344: PUSH
9345: LD_INT 18
9347: PUSH
9348: LD_INT 19
9350: PUSH
9351: LD_INT 20
9353: PUSH
9354: LD_INT 21
9356: PUSH
9357: LD_INT 22
9359: PUSH
9360: LD_INT 23
9362: PUSH
9363: LD_INT 24
9365: PUSH
9366: LD_INT 25
9368: PUSH
9369: LD_INT 26
9371: PUSH
9372: LD_INT 27
9374: PUSH
9375: LD_INT 28
9377: PUSH
9378: LD_INT 29
9380: PUSH
9381: LD_INT 30
9383: PUSH
9384: LD_INT 31
9386: PUSH
9387: LD_INT 32
9389: PUSH
9390: LD_INT 33
9392: PUSH
9393: LD_INT 34
9395: PUSH
9396: LD_INT 36
9398: PUSH
9399: EMPTY
9400: LIST
9401: LIST
9402: LIST
9403: LIST
9404: LIST
9405: LIST
9406: LIST
9407: LIST
9408: LIST
9409: LIST
9410: LIST
9411: LIST
9412: LIST
9413: LIST
9414: LIST
9415: LIST
9416: LIST
9417: LIST
9418: LIST
9419: LIST
9420: LIST
9421: LIST
9422: LIST
9423: LIST
9424: LIST
9425: LIST
9426: LIST
9427: LIST
9428: LIST
9429: LIST
9430: LIST
9431: LIST
9432: LIST
9433: LIST
9434: LIST
9435: PUSH
9436: LD_INT 101
9438: PUSH
9439: LD_INT 102
9441: PUSH
9442: LD_INT 103
9444: PUSH
9445: LD_INT 104
9447: PUSH
9448: LD_INT 105
9450: PUSH
9451: LD_INT 106
9453: PUSH
9454: LD_INT 107
9456: PUSH
9457: LD_INT 108
9459: PUSH
9460: LD_INT 109
9462: PUSH
9463: LD_INT 110
9465: PUSH
9466: LD_INT 111
9468: PUSH
9469: LD_INT 112
9471: PUSH
9472: LD_INT 113
9474: PUSH
9475: LD_INT 114
9477: PUSH
9478: EMPTY
9479: LIST
9480: LIST
9481: LIST
9482: LIST
9483: LIST
9484: LIST
9485: LIST
9486: LIST
9487: LIST
9488: LIST
9489: LIST
9490: LIST
9491: LIST
9492: LIST
9493: PUSH
9494: EMPTY
9495: LIST
9496: LIST
9497: ST_TO_ADDR
9498: GO 10445
9500: LD_INT 15
9502: DOUBLE
9503: EQUAL
9504: IFTRUE 9508
9506: GO 9720
9508: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
9509: LD_ADDR_VAR 0 1
9513: PUSH
9514: LD_INT 1
9516: PUSH
9517: LD_INT 2
9519: PUSH
9520: LD_INT 3
9522: PUSH
9523: LD_INT 4
9525: PUSH
9526: LD_INT 5
9528: PUSH
9529: LD_INT 6
9531: PUSH
9532: LD_INT 7
9534: PUSH
9535: LD_INT 8
9537: PUSH
9538: LD_INT 9
9540: PUSH
9541: LD_INT 10
9543: PUSH
9544: LD_INT 11
9546: PUSH
9547: LD_INT 12
9549: PUSH
9550: LD_INT 13
9552: PUSH
9553: LD_INT 14
9555: PUSH
9556: LD_INT 15
9558: PUSH
9559: LD_INT 16
9561: PUSH
9562: LD_INT 17
9564: PUSH
9565: LD_INT 18
9567: PUSH
9568: LD_INT 19
9570: PUSH
9571: LD_INT 20
9573: PUSH
9574: LD_INT 21
9576: PUSH
9577: LD_INT 22
9579: PUSH
9580: LD_INT 23
9582: PUSH
9583: LD_INT 24
9585: PUSH
9586: LD_INT 25
9588: PUSH
9589: LD_INT 26
9591: PUSH
9592: LD_INT 27
9594: PUSH
9595: LD_INT 28
9597: PUSH
9598: LD_INT 29
9600: PUSH
9601: LD_INT 30
9603: PUSH
9604: LD_INT 31
9606: PUSH
9607: LD_INT 32
9609: PUSH
9610: LD_INT 33
9612: PUSH
9613: LD_INT 34
9615: PUSH
9616: LD_INT 36
9618: PUSH
9619: EMPTY
9620: LIST
9621: LIST
9622: LIST
9623: LIST
9624: LIST
9625: LIST
9626: LIST
9627: LIST
9628: LIST
9629: LIST
9630: LIST
9631: LIST
9632: LIST
9633: LIST
9634: LIST
9635: LIST
9636: LIST
9637: LIST
9638: LIST
9639: LIST
9640: LIST
9641: LIST
9642: LIST
9643: LIST
9644: LIST
9645: LIST
9646: LIST
9647: LIST
9648: LIST
9649: LIST
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: LIST
9655: PUSH
9656: LD_INT 101
9658: PUSH
9659: LD_INT 102
9661: PUSH
9662: LD_INT 103
9664: PUSH
9665: LD_INT 104
9667: PUSH
9668: LD_INT 105
9670: PUSH
9671: LD_INT 106
9673: PUSH
9674: LD_INT 107
9676: PUSH
9677: LD_INT 108
9679: PUSH
9680: LD_INT 109
9682: PUSH
9683: LD_INT 110
9685: PUSH
9686: LD_INT 111
9688: PUSH
9689: LD_INT 112
9691: PUSH
9692: LD_INT 113
9694: PUSH
9695: LD_INT 114
9697: PUSH
9698: EMPTY
9699: LIST
9700: LIST
9701: LIST
9702: LIST
9703: LIST
9704: LIST
9705: LIST
9706: LIST
9707: LIST
9708: LIST
9709: LIST
9710: LIST
9711: LIST
9712: LIST
9713: PUSH
9714: EMPTY
9715: LIST
9716: LIST
9717: ST_TO_ADDR
9718: GO 10445
9720: LD_INT 16
9722: DOUBLE
9723: EQUAL
9724: IFTRUE 9728
9726: GO 9852
9728: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
9729: LD_ADDR_VAR 0 1
9733: PUSH
9734: LD_INT 2
9736: PUSH
9737: LD_INT 4
9739: PUSH
9740: LD_INT 5
9742: PUSH
9743: LD_INT 7
9745: PUSH
9746: LD_INT 11
9748: PUSH
9749: LD_INT 12
9751: PUSH
9752: LD_INT 15
9754: PUSH
9755: LD_INT 16
9757: PUSH
9758: LD_INT 20
9760: PUSH
9761: LD_INT 21
9763: PUSH
9764: LD_INT 22
9766: PUSH
9767: LD_INT 23
9769: PUSH
9770: LD_INT 25
9772: PUSH
9773: LD_INT 26
9775: PUSH
9776: LD_INT 30
9778: PUSH
9779: LD_INT 31
9781: PUSH
9782: LD_INT 32
9784: PUSH
9785: LD_INT 33
9787: PUSH
9788: LD_INT 34
9790: PUSH
9791: EMPTY
9792: LIST
9793: LIST
9794: LIST
9795: LIST
9796: LIST
9797: LIST
9798: LIST
9799: LIST
9800: LIST
9801: LIST
9802: LIST
9803: LIST
9804: LIST
9805: LIST
9806: LIST
9807: LIST
9808: LIST
9809: LIST
9810: LIST
9811: PUSH
9812: LD_INT 101
9814: PUSH
9815: LD_INT 102
9817: PUSH
9818: LD_INT 103
9820: PUSH
9821: LD_INT 106
9823: PUSH
9824: LD_INT 108
9826: PUSH
9827: LD_INT 112
9829: PUSH
9830: LD_INT 113
9832: PUSH
9833: LD_INT 114
9835: PUSH
9836: EMPTY
9837: LIST
9838: LIST
9839: LIST
9840: LIST
9841: LIST
9842: LIST
9843: LIST
9844: LIST
9845: PUSH
9846: EMPTY
9847: LIST
9848: LIST
9849: ST_TO_ADDR
9850: GO 10445
9852: LD_INT 17
9854: DOUBLE
9855: EQUAL
9856: IFTRUE 9860
9858: GO 10072
9860: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
9861: LD_ADDR_VAR 0 1
9865: PUSH
9866: LD_INT 1
9868: PUSH
9869: LD_INT 2
9871: PUSH
9872: LD_INT 3
9874: PUSH
9875: LD_INT 4
9877: PUSH
9878: LD_INT 5
9880: PUSH
9881: LD_INT 6
9883: PUSH
9884: LD_INT 7
9886: PUSH
9887: LD_INT 8
9889: PUSH
9890: LD_INT 9
9892: PUSH
9893: LD_INT 10
9895: PUSH
9896: LD_INT 11
9898: PUSH
9899: LD_INT 12
9901: PUSH
9902: LD_INT 13
9904: PUSH
9905: LD_INT 14
9907: PUSH
9908: LD_INT 15
9910: PUSH
9911: LD_INT 16
9913: PUSH
9914: LD_INT 17
9916: PUSH
9917: LD_INT 18
9919: PUSH
9920: LD_INT 19
9922: PUSH
9923: LD_INT 20
9925: PUSH
9926: LD_INT 21
9928: PUSH
9929: LD_INT 22
9931: PUSH
9932: LD_INT 23
9934: PUSH
9935: LD_INT 24
9937: PUSH
9938: LD_INT 25
9940: PUSH
9941: LD_INT 26
9943: PUSH
9944: LD_INT 27
9946: PUSH
9947: LD_INT 28
9949: PUSH
9950: LD_INT 29
9952: PUSH
9953: LD_INT 30
9955: PUSH
9956: LD_INT 31
9958: PUSH
9959: LD_INT 32
9961: PUSH
9962: LD_INT 33
9964: PUSH
9965: LD_INT 34
9967: PUSH
9968: LD_INT 36
9970: PUSH
9971: EMPTY
9972: LIST
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: LIST
9979: LIST
9980: LIST
9981: LIST
9982: LIST
9983: LIST
9984: LIST
9985: LIST
9986: LIST
9987: LIST
9988: LIST
9989: LIST
9990: LIST
9991: LIST
9992: LIST
9993: LIST
9994: LIST
9995: LIST
9996: LIST
9997: LIST
9998: LIST
9999: LIST
10000: LIST
10001: LIST
10002: LIST
10003: LIST
10004: LIST
10005: LIST
10006: LIST
10007: PUSH
10008: LD_INT 101
10010: PUSH
10011: LD_INT 102
10013: PUSH
10014: LD_INT 103
10016: PUSH
10017: LD_INT 104
10019: PUSH
10020: LD_INT 105
10022: PUSH
10023: LD_INT 106
10025: PUSH
10026: LD_INT 107
10028: PUSH
10029: LD_INT 108
10031: PUSH
10032: LD_INT 109
10034: PUSH
10035: LD_INT 110
10037: PUSH
10038: LD_INT 111
10040: PUSH
10041: LD_INT 112
10043: PUSH
10044: LD_INT 113
10046: PUSH
10047: LD_INT 114
10049: PUSH
10050: EMPTY
10051: LIST
10052: LIST
10053: LIST
10054: LIST
10055: LIST
10056: LIST
10057: LIST
10058: LIST
10059: LIST
10060: LIST
10061: LIST
10062: LIST
10063: LIST
10064: LIST
10065: PUSH
10066: EMPTY
10067: LIST
10068: LIST
10069: ST_TO_ADDR
10070: GO 10445
10072: LD_INT 18
10074: DOUBLE
10075: EQUAL
10076: IFTRUE 10080
10078: GO 10216
10080: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
10081: LD_ADDR_VAR 0 1
10085: PUSH
10086: LD_INT 2
10088: PUSH
10089: LD_INT 4
10091: PUSH
10092: LD_INT 5
10094: PUSH
10095: LD_INT 7
10097: PUSH
10098: LD_INT 11
10100: PUSH
10101: LD_INT 12
10103: PUSH
10104: LD_INT 15
10106: PUSH
10107: LD_INT 16
10109: PUSH
10110: LD_INT 20
10112: PUSH
10113: LD_INT 21
10115: PUSH
10116: LD_INT 22
10118: PUSH
10119: LD_INT 23
10121: PUSH
10122: LD_INT 25
10124: PUSH
10125: LD_INT 26
10127: PUSH
10128: LD_INT 30
10130: PUSH
10131: LD_INT 31
10133: PUSH
10134: LD_INT 32
10136: PUSH
10137: LD_INT 33
10139: PUSH
10140: LD_INT 34
10142: PUSH
10143: LD_INT 35
10145: PUSH
10146: LD_INT 36
10148: PUSH
10149: EMPTY
10150: LIST
10151: LIST
10152: LIST
10153: LIST
10154: LIST
10155: LIST
10156: LIST
10157: LIST
10158: LIST
10159: LIST
10160: LIST
10161: LIST
10162: LIST
10163: LIST
10164: LIST
10165: LIST
10166: LIST
10167: LIST
10168: LIST
10169: LIST
10170: LIST
10171: PUSH
10172: LD_INT 101
10174: PUSH
10175: LD_INT 102
10177: PUSH
10178: LD_INT 103
10180: PUSH
10181: LD_INT 106
10183: PUSH
10184: LD_INT 108
10186: PUSH
10187: LD_INT 112
10189: PUSH
10190: LD_INT 113
10192: PUSH
10193: LD_INT 114
10195: PUSH
10196: LD_INT 115
10198: PUSH
10199: EMPTY
10200: LIST
10201: LIST
10202: LIST
10203: LIST
10204: LIST
10205: LIST
10206: LIST
10207: LIST
10208: LIST
10209: PUSH
10210: EMPTY
10211: LIST
10212: LIST
10213: ST_TO_ADDR
10214: GO 10445
10216: LD_INT 19
10218: DOUBLE
10219: EQUAL
10220: IFTRUE 10224
10222: GO 10444
10224: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
10225: LD_ADDR_VAR 0 1
10229: PUSH
10230: LD_INT 1
10232: PUSH
10233: LD_INT 2
10235: PUSH
10236: LD_INT 3
10238: PUSH
10239: LD_INT 4
10241: PUSH
10242: LD_INT 5
10244: PUSH
10245: LD_INT 6
10247: PUSH
10248: LD_INT 7
10250: PUSH
10251: LD_INT 8
10253: PUSH
10254: LD_INT 9
10256: PUSH
10257: LD_INT 10
10259: PUSH
10260: LD_INT 11
10262: PUSH
10263: LD_INT 12
10265: PUSH
10266: LD_INT 13
10268: PUSH
10269: LD_INT 14
10271: PUSH
10272: LD_INT 15
10274: PUSH
10275: LD_INT 16
10277: PUSH
10278: LD_INT 17
10280: PUSH
10281: LD_INT 18
10283: PUSH
10284: LD_INT 19
10286: PUSH
10287: LD_INT 20
10289: PUSH
10290: LD_INT 21
10292: PUSH
10293: LD_INT 22
10295: PUSH
10296: LD_INT 23
10298: PUSH
10299: LD_INT 24
10301: PUSH
10302: LD_INT 25
10304: PUSH
10305: LD_INT 26
10307: PUSH
10308: LD_INT 27
10310: PUSH
10311: LD_INT 28
10313: PUSH
10314: LD_INT 29
10316: PUSH
10317: LD_INT 30
10319: PUSH
10320: LD_INT 31
10322: PUSH
10323: LD_INT 32
10325: PUSH
10326: LD_INT 33
10328: PUSH
10329: LD_INT 34
10331: PUSH
10332: LD_INT 35
10334: PUSH
10335: LD_INT 36
10337: PUSH
10338: EMPTY
10339: LIST
10340: LIST
10341: LIST
10342: LIST
10343: LIST
10344: LIST
10345: LIST
10346: LIST
10347: LIST
10348: LIST
10349: LIST
10350: LIST
10351: LIST
10352: LIST
10353: LIST
10354: LIST
10355: LIST
10356: LIST
10357: LIST
10358: LIST
10359: LIST
10360: LIST
10361: LIST
10362: LIST
10363: LIST
10364: LIST
10365: LIST
10366: LIST
10367: LIST
10368: LIST
10369: LIST
10370: LIST
10371: LIST
10372: LIST
10373: LIST
10374: LIST
10375: PUSH
10376: LD_INT 101
10378: PUSH
10379: LD_INT 102
10381: PUSH
10382: LD_INT 103
10384: PUSH
10385: LD_INT 104
10387: PUSH
10388: LD_INT 105
10390: PUSH
10391: LD_INT 106
10393: PUSH
10394: LD_INT 107
10396: PUSH
10397: LD_INT 108
10399: PUSH
10400: LD_INT 109
10402: PUSH
10403: LD_INT 110
10405: PUSH
10406: LD_INT 111
10408: PUSH
10409: LD_INT 112
10411: PUSH
10412: LD_INT 113
10414: PUSH
10415: LD_INT 114
10417: PUSH
10418: LD_INT 115
10420: PUSH
10421: EMPTY
10422: LIST
10423: LIST
10424: LIST
10425: LIST
10426: LIST
10427: LIST
10428: LIST
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: LIST
10434: LIST
10435: LIST
10436: LIST
10437: PUSH
10438: EMPTY
10439: LIST
10440: LIST
10441: ST_TO_ADDR
10442: GO 10445
10444: POP
// end else
10445: GO 10664
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
10447: LD_ADDR_VAR 0 1
10451: PUSH
10452: LD_INT 1
10454: PUSH
10455: LD_INT 2
10457: PUSH
10458: LD_INT 3
10460: PUSH
10461: LD_INT 4
10463: PUSH
10464: LD_INT 5
10466: PUSH
10467: LD_INT 6
10469: PUSH
10470: LD_INT 7
10472: PUSH
10473: LD_INT 8
10475: PUSH
10476: LD_INT 9
10478: PUSH
10479: LD_INT 10
10481: PUSH
10482: LD_INT 11
10484: PUSH
10485: LD_INT 12
10487: PUSH
10488: LD_INT 13
10490: PUSH
10491: LD_INT 14
10493: PUSH
10494: LD_INT 15
10496: PUSH
10497: LD_INT 16
10499: PUSH
10500: LD_INT 17
10502: PUSH
10503: LD_INT 18
10505: PUSH
10506: LD_INT 19
10508: PUSH
10509: LD_INT 20
10511: PUSH
10512: LD_INT 21
10514: PUSH
10515: LD_INT 22
10517: PUSH
10518: LD_INT 23
10520: PUSH
10521: LD_INT 24
10523: PUSH
10524: LD_INT 25
10526: PUSH
10527: LD_INT 26
10529: PUSH
10530: LD_INT 27
10532: PUSH
10533: LD_INT 28
10535: PUSH
10536: LD_INT 29
10538: PUSH
10539: LD_INT 30
10541: PUSH
10542: LD_INT 31
10544: PUSH
10545: LD_INT 32
10547: PUSH
10548: LD_INT 33
10550: PUSH
10551: LD_INT 34
10553: PUSH
10554: LD_INT 35
10556: PUSH
10557: LD_INT 36
10559: PUSH
10560: EMPTY
10561: LIST
10562: LIST
10563: LIST
10564: LIST
10565: LIST
10566: LIST
10567: LIST
10568: LIST
10569: LIST
10570: LIST
10571: LIST
10572: LIST
10573: LIST
10574: LIST
10575: LIST
10576: LIST
10577: LIST
10578: LIST
10579: LIST
10580: LIST
10581: LIST
10582: LIST
10583: LIST
10584: LIST
10585: LIST
10586: LIST
10587: LIST
10588: LIST
10589: LIST
10590: LIST
10591: LIST
10592: LIST
10593: LIST
10594: LIST
10595: LIST
10596: LIST
10597: PUSH
10598: LD_INT 101
10600: PUSH
10601: LD_INT 102
10603: PUSH
10604: LD_INT 103
10606: PUSH
10607: LD_INT 104
10609: PUSH
10610: LD_INT 105
10612: PUSH
10613: LD_INT 106
10615: PUSH
10616: LD_INT 107
10618: PUSH
10619: LD_INT 108
10621: PUSH
10622: LD_INT 109
10624: PUSH
10625: LD_INT 110
10627: PUSH
10628: LD_INT 111
10630: PUSH
10631: LD_INT 112
10633: PUSH
10634: LD_INT 113
10636: PUSH
10637: LD_INT 114
10639: PUSH
10640: LD_INT 115
10642: PUSH
10643: EMPTY
10644: LIST
10645: LIST
10646: LIST
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: LIST
10652: LIST
10653: LIST
10654: LIST
10655: LIST
10656: LIST
10657: LIST
10658: LIST
10659: PUSH
10660: EMPTY
10661: LIST
10662: LIST
10663: ST_TO_ADDR
// if result then
10664: LD_VAR 0 1
10668: IFFALSE 10957
// begin normal :=  ;
10670: LD_ADDR_VAR 0 3
10674: PUSH
10675: LD_STRING 
10677: ST_TO_ADDR
// hardcore :=  ;
10678: LD_ADDR_VAR 0 4
10682: PUSH
10683: LD_STRING 
10685: ST_TO_ADDR
// for i = 1 to normalCounter do
10686: LD_ADDR_VAR 0 5
10690: PUSH
10691: DOUBLE
10692: LD_INT 1
10694: DEC
10695: ST_TO_ADDR
10696: LD_EXP 25
10700: PUSH
10701: FOR_TO
10702: IFFALSE 10803
// begin tmp := 0 ;
10704: LD_ADDR_VAR 0 2
10708: PUSH
10709: LD_STRING 0
10711: ST_TO_ADDR
// if result [ 1 ] then
10712: LD_VAR 0 1
10716: PUSH
10717: LD_INT 1
10719: ARRAY
10720: IFFALSE 10785
// if result [ 1 ] [ 1 ] = i then
10722: LD_VAR 0 1
10726: PUSH
10727: LD_INT 1
10729: ARRAY
10730: PUSH
10731: LD_INT 1
10733: ARRAY
10734: PUSH
10735: LD_VAR 0 5
10739: EQUAL
10740: IFFALSE 10785
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
10742: LD_ADDR_VAR 0 1
10746: PUSH
10747: LD_VAR 0 1
10751: PPUSH
10752: LD_INT 1
10754: PPUSH
10755: LD_VAR 0 1
10759: PUSH
10760: LD_INT 1
10762: ARRAY
10763: PPUSH
10764: LD_INT 1
10766: PPUSH
10767: CALL_OW 3
10771: PPUSH
10772: CALL_OW 1
10776: ST_TO_ADDR
// tmp := 1 ;
10777: LD_ADDR_VAR 0 2
10781: PUSH
10782: LD_STRING 1
10784: ST_TO_ADDR
// end ; normal := normal & tmp ;
10785: LD_ADDR_VAR 0 3
10789: PUSH
10790: LD_VAR 0 3
10794: PUSH
10795: LD_VAR 0 2
10799: STR
10800: ST_TO_ADDR
// end ;
10801: GO 10701
10803: POP
10804: POP
// for i = 1 to hardcoreCounter do
10805: LD_ADDR_VAR 0 5
10809: PUSH
10810: DOUBLE
10811: LD_INT 1
10813: DEC
10814: ST_TO_ADDR
10815: LD_EXP 26
10819: PUSH
10820: FOR_TO
10821: IFFALSE 10926
// begin tmp := 0 ;
10823: LD_ADDR_VAR 0 2
10827: PUSH
10828: LD_STRING 0
10830: ST_TO_ADDR
// if result [ 2 ] then
10831: LD_VAR 0 1
10835: PUSH
10836: LD_INT 2
10838: ARRAY
10839: IFFALSE 10908
// if result [ 2 ] [ 1 ] = 100 + i then
10841: LD_VAR 0 1
10845: PUSH
10846: LD_INT 2
10848: ARRAY
10849: PUSH
10850: LD_INT 1
10852: ARRAY
10853: PUSH
10854: LD_INT 100
10856: PUSH
10857: LD_VAR 0 5
10861: PLUS
10862: EQUAL
10863: IFFALSE 10908
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
10865: LD_ADDR_VAR 0 1
10869: PUSH
10870: LD_VAR 0 1
10874: PPUSH
10875: LD_INT 2
10877: PPUSH
10878: LD_VAR 0 1
10882: PUSH
10883: LD_INT 2
10885: ARRAY
10886: PPUSH
10887: LD_INT 1
10889: PPUSH
10890: CALL_OW 3
10894: PPUSH
10895: CALL_OW 1
10899: ST_TO_ADDR
// tmp := 1 ;
10900: LD_ADDR_VAR 0 2
10904: PUSH
10905: LD_STRING 1
10907: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
10908: LD_ADDR_VAR 0 4
10912: PUSH
10913: LD_VAR 0 4
10917: PUSH
10918: LD_VAR 0 2
10922: STR
10923: ST_TO_ADDR
// end ;
10924: GO 10820
10926: POP
10927: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
10928: LD_STRING getStreamItemsFromMission("
10930: PUSH
10931: LD_VAR 0 3
10935: STR
10936: PUSH
10937: LD_STRING ","
10939: STR
10940: PUSH
10941: LD_VAR 0 4
10945: STR
10946: PUSH
10947: LD_STRING ")
10949: STR
10950: PPUSH
10951: CALL_OW 559
// end else
10955: GO 10964
// ToLua ( getStreamItemsFromMission("","") ) ;
10957: LD_STRING getStreamItemsFromMission("","")
10959: PPUSH
10960: CALL_OW 559
// end ;
10964: LD_VAR 0 1
10968: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
10969: LD_EXP 24
10973: PUSH
10974: LD_EXP 29
10978: AND
10979: IFFALSE 11103
10981: GO 10983
10983: DISABLE
10984: LD_INT 0
10986: PPUSH
10987: PPUSH
// begin enable ;
10988: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
10989: LD_ADDR_VAR 0 2
10993: PUSH
10994: LD_INT 22
10996: PUSH
10997: LD_OWVAR 2
11001: PUSH
11002: EMPTY
11003: LIST
11004: LIST
11005: PUSH
11006: LD_INT 2
11008: PUSH
11009: LD_INT 34
11011: PUSH
11012: LD_INT 7
11014: PUSH
11015: EMPTY
11016: LIST
11017: LIST
11018: PUSH
11019: LD_INT 34
11021: PUSH
11022: LD_INT 45
11024: PUSH
11025: EMPTY
11026: LIST
11027: LIST
11028: PUSH
11029: LD_INT 34
11031: PUSH
11032: LD_INT 28
11034: PUSH
11035: EMPTY
11036: LIST
11037: LIST
11038: PUSH
11039: LD_INT 34
11041: PUSH
11042: LD_INT 47
11044: PUSH
11045: EMPTY
11046: LIST
11047: LIST
11048: PUSH
11049: EMPTY
11050: LIST
11051: LIST
11052: LIST
11053: LIST
11054: LIST
11055: PUSH
11056: EMPTY
11057: LIST
11058: LIST
11059: PPUSH
11060: CALL_OW 69
11064: ST_TO_ADDR
// if not tmp then
11065: LD_VAR 0 2
11069: NOT
11070: IFFALSE 11074
// exit ;
11072: GO 11103
// for i in tmp do
11074: LD_ADDR_VAR 0 1
11078: PUSH
11079: LD_VAR 0 2
11083: PUSH
11084: FOR_IN
11085: IFFALSE 11101
// begin SetLives ( i , 0 ) ;
11087: LD_VAR 0 1
11091: PPUSH
11092: LD_INT 0
11094: PPUSH
11095: CALL_OW 234
// end ;
11099: GO 11084
11101: POP
11102: POP
// end ;
11103: PPOPN 2
11105: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
11106: LD_EXP 24
11110: PUSH
11111: LD_EXP 30
11115: AND
11116: IFFALSE 11200
11118: GO 11120
11120: DISABLE
11121: LD_INT 0
11123: PPUSH
11124: PPUSH
// begin enable ;
11125: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
11126: LD_ADDR_VAR 0 2
11130: PUSH
11131: LD_INT 22
11133: PUSH
11134: LD_OWVAR 2
11138: PUSH
11139: EMPTY
11140: LIST
11141: LIST
11142: PUSH
11143: LD_INT 32
11145: PUSH
11146: LD_INT 3
11148: PUSH
11149: EMPTY
11150: LIST
11151: LIST
11152: PUSH
11153: EMPTY
11154: LIST
11155: LIST
11156: PPUSH
11157: CALL_OW 69
11161: ST_TO_ADDR
// if not tmp then
11162: LD_VAR 0 2
11166: NOT
11167: IFFALSE 11171
// exit ;
11169: GO 11200
// for i in tmp do
11171: LD_ADDR_VAR 0 1
11175: PUSH
11176: LD_VAR 0 2
11180: PUSH
11181: FOR_IN
11182: IFFALSE 11198
// begin SetLives ( i , 0 ) ;
11184: LD_VAR 0 1
11188: PPUSH
11189: LD_INT 0
11191: PPUSH
11192: CALL_OW 234
// end ;
11196: GO 11181
11198: POP
11199: POP
// end ;
11200: PPOPN 2
11202: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
11203: LD_EXP 24
11207: PUSH
11208: LD_EXP 27
11212: AND
11213: IFFALSE 11306
11215: GO 11217
11217: DISABLE
11218: LD_INT 0
11220: PPUSH
// begin enable ;
11221: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
11222: LD_ADDR_VAR 0 1
11226: PUSH
11227: LD_INT 22
11229: PUSH
11230: LD_OWVAR 2
11234: PUSH
11235: EMPTY
11236: LIST
11237: LIST
11238: PUSH
11239: LD_INT 2
11241: PUSH
11242: LD_INT 25
11244: PUSH
11245: LD_INT 5
11247: PUSH
11248: EMPTY
11249: LIST
11250: LIST
11251: PUSH
11252: LD_INT 25
11254: PUSH
11255: LD_INT 9
11257: PUSH
11258: EMPTY
11259: LIST
11260: LIST
11261: PUSH
11262: LD_INT 25
11264: PUSH
11265: LD_INT 8
11267: PUSH
11268: EMPTY
11269: LIST
11270: LIST
11271: PUSH
11272: EMPTY
11273: LIST
11274: LIST
11275: LIST
11276: LIST
11277: PUSH
11278: EMPTY
11279: LIST
11280: LIST
11281: PPUSH
11282: CALL_OW 69
11286: PUSH
11287: FOR_IN
11288: IFFALSE 11304
// begin SetClass ( i , 1 ) ;
11290: LD_VAR 0 1
11294: PPUSH
11295: LD_INT 1
11297: PPUSH
11298: CALL_OW 336
// end ;
11302: GO 11287
11304: POP
11305: POP
// end ;
11306: PPOPN 1
11308: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
11309: LD_EXP 24
11313: PUSH
11314: LD_EXP 28
11318: AND
11319: PUSH
11320: LD_OWVAR 65
11324: PUSH
11325: LD_INT 7
11327: LESS
11328: AND
11329: IFFALSE 11343
11331: GO 11333
11333: DISABLE
// begin enable ;
11334: ENABLE
// game_speed := 7 ;
11335: LD_ADDR_OWVAR 65
11339: PUSH
11340: LD_INT 7
11342: ST_TO_ADDR
// end ;
11343: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
11344: LD_EXP 24
11348: PUSH
11349: LD_EXP 31
11353: AND
11354: IFFALSE 11556
11356: GO 11358
11358: DISABLE
11359: LD_INT 0
11361: PPUSH
11362: PPUSH
11363: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
11364: LD_ADDR_VAR 0 3
11368: PUSH
11369: LD_INT 81
11371: PUSH
11372: LD_OWVAR 2
11376: PUSH
11377: EMPTY
11378: LIST
11379: LIST
11380: PUSH
11381: LD_INT 21
11383: PUSH
11384: LD_INT 1
11386: PUSH
11387: EMPTY
11388: LIST
11389: LIST
11390: PUSH
11391: EMPTY
11392: LIST
11393: LIST
11394: PPUSH
11395: CALL_OW 69
11399: ST_TO_ADDR
// if not tmp then
11400: LD_VAR 0 3
11404: NOT
11405: IFFALSE 11409
// exit ;
11407: GO 11556
// if tmp > 5 then
11409: LD_VAR 0 3
11413: PUSH
11414: LD_INT 5
11416: GREATER
11417: IFFALSE 11429
// k := 5 else
11419: LD_ADDR_VAR 0 2
11423: PUSH
11424: LD_INT 5
11426: ST_TO_ADDR
11427: GO 11439
// k := tmp ;
11429: LD_ADDR_VAR 0 2
11433: PUSH
11434: LD_VAR 0 3
11438: ST_TO_ADDR
// for i := 1 to k do
11439: LD_ADDR_VAR 0 1
11443: PUSH
11444: DOUBLE
11445: LD_INT 1
11447: DEC
11448: ST_TO_ADDR
11449: LD_VAR 0 2
11453: PUSH
11454: FOR_TO
11455: IFFALSE 11554
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
11457: LD_VAR 0 3
11461: PUSH
11462: LD_VAR 0 1
11466: ARRAY
11467: PPUSH
11468: LD_VAR 0 1
11472: PUSH
11473: LD_INT 4
11475: MOD
11476: PUSH
11477: LD_INT 1
11479: PLUS
11480: PPUSH
11481: CALL_OW 259
11485: PUSH
11486: LD_INT 10
11488: LESS
11489: IFFALSE 11552
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
11491: LD_VAR 0 3
11495: PUSH
11496: LD_VAR 0 1
11500: ARRAY
11501: PPUSH
11502: LD_VAR 0 1
11506: PUSH
11507: LD_INT 4
11509: MOD
11510: PUSH
11511: LD_INT 1
11513: PLUS
11514: PPUSH
11515: LD_VAR 0 3
11519: PUSH
11520: LD_VAR 0 1
11524: ARRAY
11525: PPUSH
11526: LD_VAR 0 1
11530: PUSH
11531: LD_INT 4
11533: MOD
11534: PUSH
11535: LD_INT 1
11537: PLUS
11538: PPUSH
11539: CALL_OW 259
11543: PUSH
11544: LD_INT 1
11546: PLUS
11547: PPUSH
11548: CALL_OW 237
11552: GO 11454
11554: POP
11555: POP
// end ;
11556: PPOPN 3
11558: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
11559: LD_EXP 24
11563: PUSH
11564: LD_EXP 32
11568: AND
11569: IFFALSE 11589
11571: GO 11573
11573: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
11574: LD_INT 4
11576: PPUSH
11577: LD_OWVAR 2
11581: PPUSH
11582: LD_INT 0
11584: PPUSH
11585: CALL_OW 324
11589: END
// every 0 0$1 trigger StreamModeActive and sShovel do
11590: LD_EXP 24
11594: PUSH
11595: LD_EXP 61
11599: AND
11600: IFFALSE 11620
11602: GO 11604
11604: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
11605: LD_INT 19
11607: PPUSH
11608: LD_OWVAR 2
11612: PPUSH
11613: LD_INT 0
11615: PPUSH
11616: CALL_OW 324
11620: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
11621: LD_EXP 24
11625: PUSH
11626: LD_EXP 33
11630: AND
11631: IFFALSE 11733
11633: GO 11635
11635: DISABLE
11636: LD_INT 0
11638: PPUSH
11639: PPUSH
// begin enable ;
11640: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
11641: LD_ADDR_VAR 0 2
11645: PUSH
11646: LD_INT 22
11648: PUSH
11649: LD_OWVAR 2
11653: PUSH
11654: EMPTY
11655: LIST
11656: LIST
11657: PUSH
11658: LD_INT 2
11660: PUSH
11661: LD_INT 34
11663: PUSH
11664: LD_INT 11
11666: PUSH
11667: EMPTY
11668: LIST
11669: LIST
11670: PUSH
11671: LD_INT 34
11673: PUSH
11674: LD_INT 30
11676: PUSH
11677: EMPTY
11678: LIST
11679: LIST
11680: PUSH
11681: EMPTY
11682: LIST
11683: LIST
11684: LIST
11685: PUSH
11686: EMPTY
11687: LIST
11688: LIST
11689: PPUSH
11690: CALL_OW 69
11694: ST_TO_ADDR
// if not tmp then
11695: LD_VAR 0 2
11699: NOT
11700: IFFALSE 11704
// exit ;
11702: GO 11733
// for i in tmp do
11704: LD_ADDR_VAR 0 1
11708: PUSH
11709: LD_VAR 0 2
11713: PUSH
11714: FOR_IN
11715: IFFALSE 11731
// begin SetLives ( i , 0 ) ;
11717: LD_VAR 0 1
11721: PPUSH
11722: LD_INT 0
11724: PPUSH
11725: CALL_OW 234
// end ;
11729: GO 11714
11731: POP
11732: POP
// end ;
11733: PPOPN 2
11735: END
// every 0 0$1 trigger StreamModeActive and sBunker do
11736: LD_EXP 24
11740: PUSH
11741: LD_EXP 34
11745: AND
11746: IFFALSE 11766
11748: GO 11750
11750: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
11751: LD_INT 32
11753: PPUSH
11754: LD_OWVAR 2
11758: PPUSH
11759: LD_INT 0
11761: PPUSH
11762: CALL_OW 324
11766: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
11767: LD_EXP 24
11771: PUSH
11772: LD_EXP 35
11776: AND
11777: IFFALSE 11958
11779: GO 11781
11781: DISABLE
11782: LD_INT 0
11784: PPUSH
11785: PPUSH
11786: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
11787: LD_ADDR_VAR 0 2
11791: PUSH
11792: LD_INT 22
11794: PUSH
11795: LD_OWVAR 2
11799: PUSH
11800: EMPTY
11801: LIST
11802: LIST
11803: PUSH
11804: LD_INT 33
11806: PUSH
11807: LD_INT 3
11809: PUSH
11810: EMPTY
11811: LIST
11812: LIST
11813: PUSH
11814: EMPTY
11815: LIST
11816: LIST
11817: PPUSH
11818: CALL_OW 69
11822: ST_TO_ADDR
// if not tmp then
11823: LD_VAR 0 2
11827: NOT
11828: IFFALSE 11832
// exit ;
11830: GO 11958
// side := 0 ;
11832: LD_ADDR_VAR 0 3
11836: PUSH
11837: LD_INT 0
11839: ST_TO_ADDR
// for i := 1 to 8 do
11840: LD_ADDR_VAR 0 1
11844: PUSH
11845: DOUBLE
11846: LD_INT 1
11848: DEC
11849: ST_TO_ADDR
11850: LD_INT 8
11852: PUSH
11853: FOR_TO
11854: IFFALSE 11902
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
11856: LD_OWVAR 2
11860: PUSH
11861: LD_VAR 0 1
11865: NONEQUAL
11866: PUSH
11867: LD_OWVAR 2
11871: PPUSH
11872: LD_VAR 0 1
11876: PPUSH
11877: CALL_OW 81
11881: PUSH
11882: LD_INT 2
11884: EQUAL
11885: AND
11886: IFFALSE 11900
// begin side := i ;
11888: LD_ADDR_VAR 0 3
11892: PUSH
11893: LD_VAR 0 1
11897: ST_TO_ADDR
// break ;
11898: GO 11902
// end ;
11900: GO 11853
11902: POP
11903: POP
// if not side then
11904: LD_VAR 0 3
11908: NOT
11909: IFFALSE 11913
// exit ;
11911: GO 11958
// for i := 1 to tmp do
11913: LD_ADDR_VAR 0 1
11917: PUSH
11918: DOUBLE
11919: LD_INT 1
11921: DEC
11922: ST_TO_ADDR
11923: LD_VAR 0 2
11927: PUSH
11928: FOR_TO
11929: IFFALSE 11956
// if Prob ( 60 ) then
11931: LD_INT 60
11933: PPUSH
11934: CALL_OW 13
11938: IFFALSE 11954
// SetSide ( i , side ) ;
11940: LD_VAR 0 1
11944: PPUSH
11945: LD_VAR 0 3
11949: PPUSH
11950: CALL_OW 235
11954: GO 11928
11956: POP
11957: POP
// end ;
11958: PPOPN 3
11960: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
11961: LD_EXP 24
11965: PUSH
11966: LD_EXP 37
11970: AND
11971: IFFALSE 12090
11973: GO 11975
11975: DISABLE
11976: LD_INT 0
11978: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
11979: LD_ADDR_VAR 0 1
11983: PUSH
11984: LD_INT 22
11986: PUSH
11987: LD_OWVAR 2
11991: PUSH
11992: EMPTY
11993: LIST
11994: LIST
11995: PUSH
11996: LD_INT 21
11998: PUSH
11999: LD_INT 1
12001: PUSH
12002: EMPTY
12003: LIST
12004: LIST
12005: PUSH
12006: LD_INT 3
12008: PUSH
12009: LD_INT 23
12011: PUSH
12012: LD_INT 0
12014: PUSH
12015: EMPTY
12016: LIST
12017: LIST
12018: PUSH
12019: EMPTY
12020: LIST
12021: LIST
12022: PUSH
12023: EMPTY
12024: LIST
12025: LIST
12026: LIST
12027: PPUSH
12028: CALL_OW 69
12032: PUSH
12033: FOR_IN
12034: IFFALSE 12088
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
12036: LD_VAR 0 1
12040: PPUSH
12041: CALL_OW 257
12045: PUSH
12046: LD_INT 1
12048: PUSH
12049: LD_INT 2
12051: PUSH
12052: LD_INT 3
12054: PUSH
12055: LD_INT 4
12057: PUSH
12058: EMPTY
12059: LIST
12060: LIST
12061: LIST
12062: LIST
12063: IN
12064: IFFALSE 12086
// SetClass ( un , rand ( 1 , 4 ) ) ;
12066: LD_VAR 0 1
12070: PPUSH
12071: LD_INT 1
12073: PPUSH
12074: LD_INT 4
12076: PPUSH
12077: CALL_OW 12
12081: PPUSH
12082: CALL_OW 336
12086: GO 12033
12088: POP
12089: POP
// end ;
12090: PPOPN 1
12092: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
12093: LD_EXP 24
12097: PUSH
12098: LD_EXP 36
12102: AND
12103: IFFALSE 12182
12105: GO 12107
12107: DISABLE
12108: LD_INT 0
12110: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12111: LD_ADDR_VAR 0 1
12115: PUSH
12116: LD_INT 22
12118: PUSH
12119: LD_OWVAR 2
12123: PUSH
12124: EMPTY
12125: LIST
12126: LIST
12127: PUSH
12128: LD_INT 21
12130: PUSH
12131: LD_INT 3
12133: PUSH
12134: EMPTY
12135: LIST
12136: LIST
12137: PUSH
12138: EMPTY
12139: LIST
12140: LIST
12141: PPUSH
12142: CALL_OW 69
12146: ST_TO_ADDR
// if not tmp then
12147: LD_VAR 0 1
12151: NOT
12152: IFFALSE 12156
// exit ;
12154: GO 12182
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
12156: LD_VAR 0 1
12160: PUSH
12161: LD_INT 1
12163: PPUSH
12164: LD_VAR 0 1
12168: PPUSH
12169: CALL_OW 12
12173: ARRAY
12174: PPUSH
12175: LD_INT 100
12177: PPUSH
12178: CALL_OW 234
// end ;
12182: PPOPN 1
12184: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
12185: LD_EXP 24
12189: PUSH
12190: LD_EXP 38
12194: AND
12195: IFFALSE 12293
12197: GO 12199
12199: DISABLE
12200: LD_INT 0
12202: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12203: LD_ADDR_VAR 0 1
12207: PUSH
12208: LD_INT 22
12210: PUSH
12211: LD_OWVAR 2
12215: PUSH
12216: EMPTY
12217: LIST
12218: LIST
12219: PUSH
12220: LD_INT 21
12222: PUSH
12223: LD_INT 1
12225: PUSH
12226: EMPTY
12227: LIST
12228: LIST
12229: PUSH
12230: EMPTY
12231: LIST
12232: LIST
12233: PPUSH
12234: CALL_OW 69
12238: ST_TO_ADDR
// if not tmp then
12239: LD_VAR 0 1
12243: NOT
12244: IFFALSE 12248
// exit ;
12246: GO 12293
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
12248: LD_VAR 0 1
12252: PUSH
12253: LD_INT 1
12255: PPUSH
12256: LD_VAR 0 1
12260: PPUSH
12261: CALL_OW 12
12265: ARRAY
12266: PPUSH
12267: LD_INT 1
12269: PPUSH
12270: LD_INT 4
12272: PPUSH
12273: CALL_OW 12
12277: PPUSH
12278: LD_INT 3000
12280: PPUSH
12281: LD_INT 9000
12283: PPUSH
12284: CALL_OW 12
12288: PPUSH
12289: CALL_OW 492
// end ;
12293: PPOPN 1
12295: END
// every 0 0$1 trigger StreamModeActive and sDepot do
12296: LD_EXP 24
12300: PUSH
12301: LD_EXP 39
12305: AND
12306: IFFALSE 12326
12308: GO 12310
12310: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
12311: LD_INT 1
12313: PPUSH
12314: LD_OWVAR 2
12318: PPUSH
12319: LD_INT 0
12321: PPUSH
12322: CALL_OW 324
12326: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
12327: LD_EXP 24
12331: PUSH
12332: LD_EXP 40
12336: AND
12337: IFFALSE 12420
12339: GO 12341
12341: DISABLE
12342: LD_INT 0
12344: PPUSH
12345: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12346: LD_ADDR_VAR 0 2
12350: PUSH
12351: LD_INT 22
12353: PUSH
12354: LD_OWVAR 2
12358: PUSH
12359: EMPTY
12360: LIST
12361: LIST
12362: PUSH
12363: LD_INT 21
12365: PUSH
12366: LD_INT 3
12368: PUSH
12369: EMPTY
12370: LIST
12371: LIST
12372: PUSH
12373: EMPTY
12374: LIST
12375: LIST
12376: PPUSH
12377: CALL_OW 69
12381: ST_TO_ADDR
// if not tmp then
12382: LD_VAR 0 2
12386: NOT
12387: IFFALSE 12391
// exit ;
12389: GO 12420
// for i in tmp do
12391: LD_ADDR_VAR 0 1
12395: PUSH
12396: LD_VAR 0 2
12400: PUSH
12401: FOR_IN
12402: IFFALSE 12418
// SetBLevel ( i , 10 ) ;
12404: LD_VAR 0 1
12408: PPUSH
12409: LD_INT 10
12411: PPUSH
12412: CALL_OW 241
12416: GO 12401
12418: POP
12419: POP
// end ;
12420: PPOPN 2
12422: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
12423: LD_EXP 24
12427: PUSH
12428: LD_EXP 41
12432: AND
12433: IFFALSE 12544
12435: GO 12437
12437: DISABLE
12438: LD_INT 0
12440: PPUSH
12441: PPUSH
12442: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12443: LD_ADDR_VAR 0 3
12447: PUSH
12448: LD_INT 22
12450: PUSH
12451: LD_OWVAR 2
12455: PUSH
12456: EMPTY
12457: LIST
12458: LIST
12459: PUSH
12460: LD_INT 25
12462: PUSH
12463: LD_INT 1
12465: PUSH
12466: EMPTY
12467: LIST
12468: LIST
12469: PUSH
12470: EMPTY
12471: LIST
12472: LIST
12473: PPUSH
12474: CALL_OW 69
12478: ST_TO_ADDR
// if not tmp then
12479: LD_VAR 0 3
12483: NOT
12484: IFFALSE 12488
// exit ;
12486: GO 12544
// un := tmp [ rand ( 1 , tmp ) ] ;
12488: LD_ADDR_VAR 0 2
12492: PUSH
12493: LD_VAR 0 3
12497: PUSH
12498: LD_INT 1
12500: PPUSH
12501: LD_VAR 0 3
12505: PPUSH
12506: CALL_OW 12
12510: ARRAY
12511: ST_TO_ADDR
// if Crawls ( un ) then
12512: LD_VAR 0 2
12516: PPUSH
12517: CALL_OW 318
12521: IFFALSE 12532
// ComWalk ( un ) ;
12523: LD_VAR 0 2
12527: PPUSH
12528: CALL_OW 138
// SetClass ( un , class_sniper ) ;
12532: LD_VAR 0 2
12536: PPUSH
12537: LD_INT 5
12539: PPUSH
12540: CALL_OW 336
// end ;
12544: PPOPN 3
12546: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
12547: LD_EXP 24
12551: PUSH
12552: LD_EXP 42
12556: AND
12557: PUSH
12558: LD_OWVAR 67
12562: PUSH
12563: LD_INT 3
12565: LESS
12566: AND
12567: IFFALSE 12586
12569: GO 12571
12571: DISABLE
// Difficulty := Difficulty + 1 ;
12572: LD_ADDR_OWVAR 67
12576: PUSH
12577: LD_OWVAR 67
12581: PUSH
12582: LD_INT 1
12584: PLUS
12585: ST_TO_ADDR
12586: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
12587: LD_EXP 24
12591: PUSH
12592: LD_EXP 43
12596: AND
12597: IFFALSE 12700
12599: GO 12601
12601: DISABLE
12602: LD_INT 0
12604: PPUSH
// begin for i := 1 to 5 do
12605: LD_ADDR_VAR 0 1
12609: PUSH
12610: DOUBLE
12611: LD_INT 1
12613: DEC
12614: ST_TO_ADDR
12615: LD_INT 5
12617: PUSH
12618: FOR_TO
12619: IFFALSE 12698
// begin uc_nation := nation_nature ;
12621: LD_ADDR_OWVAR 21
12625: PUSH
12626: LD_INT 0
12628: ST_TO_ADDR
// uc_side := 0 ;
12629: LD_ADDR_OWVAR 20
12633: PUSH
12634: LD_INT 0
12636: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12637: LD_ADDR_OWVAR 29
12641: PUSH
12642: LD_INT 12
12644: PUSH
12645: LD_INT 12
12647: PUSH
12648: EMPTY
12649: LIST
12650: LIST
12651: ST_TO_ADDR
// hc_agressivity := 20 ;
12652: LD_ADDR_OWVAR 35
12656: PUSH
12657: LD_INT 20
12659: ST_TO_ADDR
// hc_class := class_tiger ;
12660: LD_ADDR_OWVAR 28
12664: PUSH
12665: LD_INT 14
12667: ST_TO_ADDR
// hc_gallery :=  ;
12668: LD_ADDR_OWVAR 33
12672: PUSH
12673: LD_STRING 
12675: ST_TO_ADDR
// hc_name :=  ;
12676: LD_ADDR_OWVAR 26
12680: PUSH
12681: LD_STRING 
12683: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
12684: CALL_OW 44
12688: PPUSH
12689: LD_INT 0
12691: PPUSH
12692: CALL_OW 51
// end ;
12696: GO 12618
12698: POP
12699: POP
// end ;
12700: PPOPN 1
12702: END
// every 0 0$1 trigger StreamModeActive and sBomb do
12703: LD_EXP 24
12707: PUSH
12708: LD_EXP 44
12712: AND
12713: IFFALSE 12722
12715: GO 12717
12717: DISABLE
// StreamSibBomb ;
12718: CALL 12723 0 0
12722: END
// export function StreamSibBomb ; var i , x , y ; begin
12723: LD_INT 0
12725: PPUSH
12726: PPUSH
12727: PPUSH
12728: PPUSH
// result := false ;
12729: LD_ADDR_VAR 0 1
12733: PUSH
12734: LD_INT 0
12736: ST_TO_ADDR
// for i := 1 to 16 do
12737: LD_ADDR_VAR 0 2
12741: PUSH
12742: DOUBLE
12743: LD_INT 1
12745: DEC
12746: ST_TO_ADDR
12747: LD_INT 16
12749: PUSH
12750: FOR_TO
12751: IFFALSE 12950
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12753: LD_ADDR_VAR 0 3
12757: PUSH
12758: LD_INT 10
12760: PUSH
12761: LD_INT 20
12763: PUSH
12764: LD_INT 30
12766: PUSH
12767: LD_INT 40
12769: PUSH
12770: LD_INT 50
12772: PUSH
12773: LD_INT 60
12775: PUSH
12776: LD_INT 70
12778: PUSH
12779: LD_INT 80
12781: PUSH
12782: LD_INT 90
12784: PUSH
12785: LD_INT 100
12787: PUSH
12788: LD_INT 110
12790: PUSH
12791: LD_INT 120
12793: PUSH
12794: LD_INT 130
12796: PUSH
12797: LD_INT 140
12799: PUSH
12800: LD_INT 150
12802: PUSH
12803: EMPTY
12804: LIST
12805: LIST
12806: LIST
12807: LIST
12808: LIST
12809: LIST
12810: LIST
12811: LIST
12812: LIST
12813: LIST
12814: LIST
12815: LIST
12816: LIST
12817: LIST
12818: LIST
12819: PUSH
12820: LD_INT 1
12822: PPUSH
12823: LD_INT 15
12825: PPUSH
12826: CALL_OW 12
12830: ARRAY
12831: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12832: LD_ADDR_VAR 0 4
12836: PUSH
12837: LD_INT 10
12839: PUSH
12840: LD_INT 20
12842: PUSH
12843: LD_INT 30
12845: PUSH
12846: LD_INT 40
12848: PUSH
12849: LD_INT 50
12851: PUSH
12852: LD_INT 60
12854: PUSH
12855: LD_INT 70
12857: PUSH
12858: LD_INT 80
12860: PUSH
12861: LD_INT 90
12863: PUSH
12864: LD_INT 100
12866: PUSH
12867: LD_INT 110
12869: PUSH
12870: LD_INT 120
12872: PUSH
12873: LD_INT 130
12875: PUSH
12876: LD_INT 140
12878: PUSH
12879: LD_INT 150
12881: PUSH
12882: EMPTY
12883: LIST
12884: LIST
12885: LIST
12886: LIST
12887: LIST
12888: LIST
12889: LIST
12890: LIST
12891: LIST
12892: LIST
12893: LIST
12894: LIST
12895: LIST
12896: LIST
12897: LIST
12898: PUSH
12899: LD_INT 1
12901: PPUSH
12902: LD_INT 15
12904: PPUSH
12905: CALL_OW 12
12909: ARRAY
12910: ST_TO_ADDR
// if ValidHex ( x , y ) then
12911: LD_VAR 0 3
12915: PPUSH
12916: LD_VAR 0 4
12920: PPUSH
12921: CALL_OW 488
12925: IFFALSE 12948
// begin result := [ x , y ] ;
12927: LD_ADDR_VAR 0 1
12931: PUSH
12932: LD_VAR 0 3
12936: PUSH
12937: LD_VAR 0 4
12941: PUSH
12942: EMPTY
12943: LIST
12944: LIST
12945: ST_TO_ADDR
// break ;
12946: GO 12950
// end ; end ;
12948: GO 12750
12950: POP
12951: POP
// if result then
12952: LD_VAR 0 1
12956: IFFALSE 13016
// begin ToLua ( playSibBomb() ) ;
12958: LD_STRING playSibBomb()
12960: PPUSH
12961: CALL_OW 559
// wait ( 0 0$14 ) ;
12965: LD_INT 490
12967: PPUSH
12968: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
12972: LD_VAR 0 1
12976: PUSH
12977: LD_INT 1
12979: ARRAY
12980: PPUSH
12981: LD_VAR 0 1
12985: PUSH
12986: LD_INT 2
12988: ARRAY
12989: PPUSH
12990: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
12994: LD_VAR 0 1
12998: PUSH
12999: LD_INT 1
13001: ARRAY
13002: PPUSH
13003: LD_VAR 0 1
13007: PUSH
13008: LD_INT 2
13010: ARRAY
13011: PPUSH
13012: CALL_OW 429
// end ; end ;
13016: LD_VAR 0 1
13020: RET
// every 0 0$1 trigger StreamModeActive and sReset do
13021: LD_EXP 24
13025: PUSH
13026: LD_EXP 46
13030: AND
13031: IFFALSE 13043
13033: GO 13035
13035: DISABLE
// YouLost (  ) ;
13036: LD_STRING 
13038: PPUSH
13039: CALL_OW 104
13043: END
// every 0 0$1 trigger StreamModeActive and sFog do
13044: LD_EXP 24
13048: PUSH
13049: LD_EXP 45
13053: AND
13054: IFFALSE 13068
13056: GO 13058
13058: DISABLE
// FogOff ( your_side ) ;
13059: LD_OWVAR 2
13063: PPUSH
13064: CALL_OW 344
13068: END
// every 0 0$1 trigger StreamModeActive and sSun do
13069: LD_EXP 24
13073: PUSH
13074: LD_EXP 47
13078: AND
13079: IFFALSE 13107
13081: GO 13083
13083: DISABLE
// begin solar_recharge_percent := 0 ;
13084: LD_ADDR_OWVAR 79
13088: PUSH
13089: LD_INT 0
13091: ST_TO_ADDR
// wait ( 5 5$00 ) ;
13092: LD_INT 10500
13094: PPUSH
13095: CALL_OW 67
// solar_recharge_percent := 100 ;
13099: LD_ADDR_OWVAR 79
13103: PUSH
13104: LD_INT 100
13106: ST_TO_ADDR
// end ;
13107: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
13108: LD_EXP 24
13112: PUSH
13113: LD_EXP 48
13117: AND
13118: IFFALSE 13357
13120: GO 13122
13122: DISABLE
13123: LD_INT 0
13125: PPUSH
13126: PPUSH
13127: PPUSH
// begin tmp := [ ] ;
13128: LD_ADDR_VAR 0 3
13132: PUSH
13133: EMPTY
13134: ST_TO_ADDR
// for i := 1 to 6 do
13135: LD_ADDR_VAR 0 1
13139: PUSH
13140: DOUBLE
13141: LD_INT 1
13143: DEC
13144: ST_TO_ADDR
13145: LD_INT 6
13147: PUSH
13148: FOR_TO
13149: IFFALSE 13254
// begin uc_nation := nation_nature ;
13151: LD_ADDR_OWVAR 21
13155: PUSH
13156: LD_INT 0
13158: ST_TO_ADDR
// uc_side := 0 ;
13159: LD_ADDR_OWVAR 20
13163: PUSH
13164: LD_INT 0
13166: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13167: LD_ADDR_OWVAR 29
13171: PUSH
13172: LD_INT 12
13174: PUSH
13175: LD_INT 12
13177: PUSH
13178: EMPTY
13179: LIST
13180: LIST
13181: ST_TO_ADDR
// hc_agressivity := 20 ;
13182: LD_ADDR_OWVAR 35
13186: PUSH
13187: LD_INT 20
13189: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
13190: LD_ADDR_OWVAR 28
13194: PUSH
13195: LD_INT 17
13197: ST_TO_ADDR
// hc_gallery :=  ;
13198: LD_ADDR_OWVAR 33
13202: PUSH
13203: LD_STRING 
13205: ST_TO_ADDR
// hc_name :=  ;
13206: LD_ADDR_OWVAR 26
13210: PUSH
13211: LD_STRING 
13213: ST_TO_ADDR
// un := CreateHuman ;
13214: LD_ADDR_VAR 0 2
13218: PUSH
13219: CALL_OW 44
13223: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
13224: LD_VAR 0 2
13228: PPUSH
13229: LD_INT 1
13231: PPUSH
13232: CALL_OW 51
// tmp := tmp ^ un ;
13236: LD_ADDR_VAR 0 3
13240: PUSH
13241: LD_VAR 0 3
13245: PUSH
13246: LD_VAR 0 2
13250: ADD
13251: ST_TO_ADDR
// end ;
13252: GO 13148
13254: POP
13255: POP
// repeat wait ( 0 0$1 ) ;
13256: LD_INT 35
13258: PPUSH
13259: CALL_OW 67
// for un in tmp do
13263: LD_ADDR_VAR 0 2
13267: PUSH
13268: LD_VAR 0 3
13272: PUSH
13273: FOR_IN
13274: IFFALSE 13348
// begin if IsDead ( un ) then
13276: LD_VAR 0 2
13280: PPUSH
13281: CALL_OW 301
13285: IFFALSE 13305
// begin tmp := tmp diff un ;
13287: LD_ADDR_VAR 0 3
13291: PUSH
13292: LD_VAR 0 3
13296: PUSH
13297: LD_VAR 0 2
13301: DIFF
13302: ST_TO_ADDR
// continue ;
13303: GO 13273
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
13305: LD_VAR 0 2
13309: PPUSH
13310: LD_INT 3
13312: PUSH
13313: LD_INT 22
13315: PUSH
13316: LD_INT 0
13318: PUSH
13319: EMPTY
13320: LIST
13321: LIST
13322: PUSH
13323: EMPTY
13324: LIST
13325: LIST
13326: PPUSH
13327: CALL_OW 69
13331: PPUSH
13332: LD_VAR 0 2
13336: PPUSH
13337: CALL_OW 74
13341: PPUSH
13342: CALL_OW 115
// end ;
13346: GO 13273
13348: POP
13349: POP
// until not tmp ;
13350: LD_VAR 0 3
13354: NOT
13355: IFFALSE 13256
// end ;
13357: PPOPN 3
13359: END
// every 0 0$1 trigger StreamModeActive and sTroll do
13360: LD_EXP 24
13364: PUSH
13365: LD_EXP 49
13369: AND
13370: IFFALSE 13424
13372: GO 13374
13374: DISABLE
// begin ToLua ( displayTroll(); ) ;
13375: LD_STRING displayTroll();
13377: PPUSH
13378: CALL_OW 559
// wait ( 3 3$00 ) ;
13382: LD_INT 6300
13384: PPUSH
13385: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13389: LD_STRING hideTroll();
13391: PPUSH
13392: CALL_OW 559
// wait ( 1 1$00 ) ;
13396: LD_INT 2100
13398: PPUSH
13399: CALL_OW 67
// ToLua ( displayTroll(); ) ;
13403: LD_STRING displayTroll();
13405: PPUSH
13406: CALL_OW 559
// wait ( 1 1$00 ) ;
13410: LD_INT 2100
13412: PPUSH
13413: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13417: LD_STRING hideTroll();
13419: PPUSH
13420: CALL_OW 559
// end ;
13424: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
13425: LD_EXP 24
13429: PUSH
13430: LD_EXP 50
13434: AND
13435: IFFALSE 13498
13437: GO 13439
13439: DISABLE
13440: LD_INT 0
13442: PPUSH
// begin p := 0 ;
13443: LD_ADDR_VAR 0 1
13447: PUSH
13448: LD_INT 0
13450: ST_TO_ADDR
// repeat game_speed := 1 ;
13451: LD_ADDR_OWVAR 65
13455: PUSH
13456: LD_INT 1
13458: ST_TO_ADDR
// wait ( 0 0$1 ) ;
13459: LD_INT 35
13461: PPUSH
13462: CALL_OW 67
// p := p + 1 ;
13466: LD_ADDR_VAR 0 1
13470: PUSH
13471: LD_VAR 0 1
13475: PUSH
13476: LD_INT 1
13478: PLUS
13479: ST_TO_ADDR
// until p >= 60 ;
13480: LD_VAR 0 1
13484: PUSH
13485: LD_INT 60
13487: GREATEREQUAL
13488: IFFALSE 13451
// game_speed := 4 ;
13490: LD_ADDR_OWVAR 65
13494: PUSH
13495: LD_INT 4
13497: ST_TO_ADDR
// end ;
13498: PPOPN 1
13500: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
13501: LD_EXP 24
13505: PUSH
13506: LD_EXP 51
13510: AND
13511: IFFALSE 13657
13513: GO 13515
13515: DISABLE
13516: LD_INT 0
13518: PPUSH
13519: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13520: LD_ADDR_VAR 0 1
13524: PUSH
13525: LD_INT 22
13527: PUSH
13528: LD_OWVAR 2
13532: PUSH
13533: EMPTY
13534: LIST
13535: LIST
13536: PUSH
13537: LD_INT 2
13539: PUSH
13540: LD_INT 30
13542: PUSH
13543: LD_INT 0
13545: PUSH
13546: EMPTY
13547: LIST
13548: LIST
13549: PUSH
13550: LD_INT 30
13552: PUSH
13553: LD_INT 1
13555: PUSH
13556: EMPTY
13557: LIST
13558: LIST
13559: PUSH
13560: EMPTY
13561: LIST
13562: LIST
13563: LIST
13564: PUSH
13565: EMPTY
13566: LIST
13567: LIST
13568: PPUSH
13569: CALL_OW 69
13573: ST_TO_ADDR
// if not depot then
13574: LD_VAR 0 1
13578: NOT
13579: IFFALSE 13583
// exit ;
13581: GO 13657
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
13583: LD_ADDR_VAR 0 2
13587: PUSH
13588: LD_VAR 0 1
13592: PUSH
13593: LD_INT 1
13595: PPUSH
13596: LD_VAR 0 1
13600: PPUSH
13601: CALL_OW 12
13605: ARRAY
13606: PPUSH
13607: CALL_OW 274
13611: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
13612: LD_VAR 0 2
13616: PPUSH
13617: LD_INT 1
13619: PPUSH
13620: LD_INT 0
13622: PPUSH
13623: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
13627: LD_VAR 0 2
13631: PPUSH
13632: LD_INT 2
13634: PPUSH
13635: LD_INT 0
13637: PPUSH
13638: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
13642: LD_VAR 0 2
13646: PPUSH
13647: LD_INT 3
13649: PPUSH
13650: LD_INT 0
13652: PPUSH
13653: CALL_OW 277
// end ;
13657: PPOPN 2
13659: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
13660: LD_EXP 24
13664: PUSH
13665: LD_EXP 52
13669: AND
13670: IFFALSE 13767
13672: GO 13674
13674: DISABLE
13675: LD_INT 0
13677: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13678: LD_ADDR_VAR 0 1
13682: PUSH
13683: LD_INT 22
13685: PUSH
13686: LD_OWVAR 2
13690: PUSH
13691: EMPTY
13692: LIST
13693: LIST
13694: PUSH
13695: LD_INT 21
13697: PUSH
13698: LD_INT 1
13700: PUSH
13701: EMPTY
13702: LIST
13703: LIST
13704: PUSH
13705: LD_INT 3
13707: PUSH
13708: LD_INT 23
13710: PUSH
13711: LD_INT 0
13713: PUSH
13714: EMPTY
13715: LIST
13716: LIST
13717: PUSH
13718: EMPTY
13719: LIST
13720: LIST
13721: PUSH
13722: EMPTY
13723: LIST
13724: LIST
13725: LIST
13726: PPUSH
13727: CALL_OW 69
13731: ST_TO_ADDR
// if not tmp then
13732: LD_VAR 0 1
13736: NOT
13737: IFFALSE 13741
// exit ;
13739: GO 13767
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
13741: LD_VAR 0 1
13745: PUSH
13746: LD_INT 1
13748: PPUSH
13749: LD_VAR 0 1
13753: PPUSH
13754: CALL_OW 12
13758: ARRAY
13759: PPUSH
13760: LD_INT 200
13762: PPUSH
13763: CALL_OW 234
// end ;
13767: PPOPN 1
13769: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
13770: LD_EXP 24
13774: PUSH
13775: LD_EXP 53
13779: AND
13780: IFFALSE 13859
13782: GO 13784
13784: DISABLE
13785: LD_INT 0
13787: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
13788: LD_ADDR_VAR 0 1
13792: PUSH
13793: LD_INT 22
13795: PUSH
13796: LD_OWVAR 2
13800: PUSH
13801: EMPTY
13802: LIST
13803: LIST
13804: PUSH
13805: LD_INT 21
13807: PUSH
13808: LD_INT 2
13810: PUSH
13811: EMPTY
13812: LIST
13813: LIST
13814: PUSH
13815: EMPTY
13816: LIST
13817: LIST
13818: PPUSH
13819: CALL_OW 69
13823: ST_TO_ADDR
// if not tmp then
13824: LD_VAR 0 1
13828: NOT
13829: IFFALSE 13833
// exit ;
13831: GO 13859
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
13833: LD_VAR 0 1
13837: PUSH
13838: LD_INT 1
13840: PPUSH
13841: LD_VAR 0 1
13845: PPUSH
13846: CALL_OW 12
13850: ARRAY
13851: PPUSH
13852: LD_INT 60
13854: PPUSH
13855: CALL_OW 234
// end ;
13859: PPOPN 1
13861: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
13862: LD_EXP 24
13866: PUSH
13867: LD_EXP 54
13871: AND
13872: IFFALSE 13971
13874: GO 13876
13876: DISABLE
13877: LD_INT 0
13879: PPUSH
13880: PPUSH
// begin enable ;
13881: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
13882: LD_ADDR_VAR 0 1
13886: PUSH
13887: LD_INT 22
13889: PUSH
13890: LD_OWVAR 2
13894: PUSH
13895: EMPTY
13896: LIST
13897: LIST
13898: PUSH
13899: LD_INT 61
13901: PUSH
13902: EMPTY
13903: LIST
13904: PUSH
13905: LD_INT 33
13907: PUSH
13908: LD_INT 2
13910: PUSH
13911: EMPTY
13912: LIST
13913: LIST
13914: PUSH
13915: EMPTY
13916: LIST
13917: LIST
13918: LIST
13919: PPUSH
13920: CALL_OW 69
13924: ST_TO_ADDR
// if not tmp then
13925: LD_VAR 0 1
13929: NOT
13930: IFFALSE 13934
// exit ;
13932: GO 13971
// for i in tmp do
13934: LD_ADDR_VAR 0 2
13938: PUSH
13939: LD_VAR 0 1
13943: PUSH
13944: FOR_IN
13945: IFFALSE 13969
// if IsControledBy ( i ) then
13947: LD_VAR 0 2
13951: PPUSH
13952: CALL_OW 312
13956: IFFALSE 13967
// ComUnlink ( i ) ;
13958: LD_VAR 0 2
13962: PPUSH
13963: CALL_OW 136
13967: GO 13944
13969: POP
13970: POP
// end ;
13971: PPOPN 2
13973: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
13974: LD_EXP 24
13978: PUSH
13979: LD_EXP 55
13983: AND
13984: IFFALSE 14124
13986: GO 13988
13988: DISABLE
13989: LD_INT 0
13991: PPUSH
13992: PPUSH
// begin ToLua ( displayPowell(); ) ;
13993: LD_STRING displayPowell();
13995: PPUSH
13996: CALL_OW 559
// uc_side := 0 ;
14000: LD_ADDR_OWVAR 20
14004: PUSH
14005: LD_INT 0
14007: ST_TO_ADDR
// uc_nation := 2 ;
14008: LD_ADDR_OWVAR 21
14012: PUSH
14013: LD_INT 2
14015: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
14016: LD_ADDR_OWVAR 37
14020: PUSH
14021: LD_INT 14
14023: ST_TO_ADDR
// vc_engine := engine_siberite ;
14024: LD_ADDR_OWVAR 39
14028: PUSH
14029: LD_INT 3
14031: ST_TO_ADDR
// vc_control := control_apeman ;
14032: LD_ADDR_OWVAR 38
14036: PUSH
14037: LD_INT 5
14039: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
14040: LD_ADDR_OWVAR 40
14044: PUSH
14045: LD_INT 29
14047: ST_TO_ADDR
// un := CreateVehicle ;
14048: LD_ADDR_VAR 0 2
14052: PUSH
14053: CALL_OW 45
14057: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14058: LD_VAR 0 2
14062: PPUSH
14063: LD_INT 1
14065: PPUSH
14066: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14070: LD_INT 35
14072: PPUSH
14073: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14077: LD_VAR 0 2
14081: PPUSH
14082: LD_INT 22
14084: PUSH
14085: LD_OWVAR 2
14089: PUSH
14090: EMPTY
14091: LIST
14092: LIST
14093: PPUSH
14094: CALL_OW 69
14098: PPUSH
14099: LD_VAR 0 2
14103: PPUSH
14104: CALL_OW 74
14108: PPUSH
14109: CALL_OW 115
// until IsDead ( un ) ;
14113: LD_VAR 0 2
14117: PPUSH
14118: CALL_OW 301
14122: IFFALSE 14070
// end ;
14124: PPOPN 2
14126: END
// every 0 0$1 trigger StreamModeActive and sStu do
14127: LD_EXP 24
14131: PUSH
14132: LD_EXP 63
14136: AND
14137: IFFALSE 14153
14139: GO 14141
14141: DISABLE
// begin ToLua ( displayStucuk(); ) ;
14142: LD_STRING displayStucuk();
14144: PPUSH
14145: CALL_OW 559
// ResetFog ;
14149: CALL_OW 335
// end ;
14153: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
14154: LD_EXP 24
14158: PUSH
14159: LD_EXP 56
14163: AND
14164: IFFALSE 14305
14166: GO 14168
14168: DISABLE
14169: LD_INT 0
14171: PPUSH
14172: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14173: LD_ADDR_VAR 0 2
14177: PUSH
14178: LD_INT 22
14180: PUSH
14181: LD_OWVAR 2
14185: PUSH
14186: EMPTY
14187: LIST
14188: LIST
14189: PUSH
14190: LD_INT 21
14192: PUSH
14193: LD_INT 1
14195: PUSH
14196: EMPTY
14197: LIST
14198: LIST
14199: PUSH
14200: EMPTY
14201: LIST
14202: LIST
14203: PPUSH
14204: CALL_OW 69
14208: ST_TO_ADDR
// if not tmp then
14209: LD_VAR 0 2
14213: NOT
14214: IFFALSE 14218
// exit ;
14216: GO 14305
// un := tmp [ rand ( 1 , tmp ) ] ;
14218: LD_ADDR_VAR 0 1
14222: PUSH
14223: LD_VAR 0 2
14227: PUSH
14228: LD_INT 1
14230: PPUSH
14231: LD_VAR 0 2
14235: PPUSH
14236: CALL_OW 12
14240: ARRAY
14241: ST_TO_ADDR
// SetSide ( un , 0 ) ;
14242: LD_VAR 0 1
14246: PPUSH
14247: LD_INT 0
14249: PPUSH
14250: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
14254: LD_VAR 0 1
14258: PPUSH
14259: LD_OWVAR 3
14263: PUSH
14264: LD_VAR 0 1
14268: DIFF
14269: PPUSH
14270: LD_VAR 0 1
14274: PPUSH
14275: CALL_OW 74
14279: PPUSH
14280: CALL_OW 115
// wait ( 0 0$20 ) ;
14284: LD_INT 700
14286: PPUSH
14287: CALL_OW 67
// SetSide ( un , your_side ) ;
14291: LD_VAR 0 1
14295: PPUSH
14296: LD_OWVAR 2
14300: PPUSH
14301: CALL_OW 235
// end ;
14305: PPOPN 2
14307: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
14308: LD_EXP 24
14312: PUSH
14313: LD_EXP 57
14317: AND
14318: IFFALSE 14424
14320: GO 14322
14322: DISABLE
14323: LD_INT 0
14325: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14326: LD_ADDR_VAR 0 1
14330: PUSH
14331: LD_INT 22
14333: PUSH
14334: LD_OWVAR 2
14338: PUSH
14339: EMPTY
14340: LIST
14341: LIST
14342: PUSH
14343: LD_INT 2
14345: PUSH
14346: LD_INT 30
14348: PUSH
14349: LD_INT 0
14351: PUSH
14352: EMPTY
14353: LIST
14354: LIST
14355: PUSH
14356: LD_INT 30
14358: PUSH
14359: LD_INT 1
14361: PUSH
14362: EMPTY
14363: LIST
14364: LIST
14365: PUSH
14366: EMPTY
14367: LIST
14368: LIST
14369: LIST
14370: PUSH
14371: EMPTY
14372: LIST
14373: LIST
14374: PPUSH
14375: CALL_OW 69
14379: ST_TO_ADDR
// if not depot then
14380: LD_VAR 0 1
14384: NOT
14385: IFFALSE 14389
// exit ;
14387: GO 14424
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
14389: LD_VAR 0 1
14393: PUSH
14394: LD_INT 1
14396: ARRAY
14397: PPUSH
14398: CALL_OW 250
14402: PPUSH
14403: LD_VAR 0 1
14407: PUSH
14408: LD_INT 1
14410: ARRAY
14411: PPUSH
14412: CALL_OW 251
14416: PPUSH
14417: LD_INT 70
14419: PPUSH
14420: CALL_OW 495
// end ;
14424: PPOPN 1
14426: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
14427: LD_EXP 24
14431: PUSH
14432: LD_EXP 58
14436: AND
14437: IFFALSE 14648
14439: GO 14441
14441: DISABLE
14442: LD_INT 0
14444: PPUSH
14445: PPUSH
14446: PPUSH
14447: PPUSH
14448: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14449: LD_ADDR_VAR 0 5
14453: PUSH
14454: LD_INT 22
14456: PUSH
14457: LD_OWVAR 2
14461: PUSH
14462: EMPTY
14463: LIST
14464: LIST
14465: PUSH
14466: LD_INT 21
14468: PUSH
14469: LD_INT 1
14471: PUSH
14472: EMPTY
14473: LIST
14474: LIST
14475: PUSH
14476: EMPTY
14477: LIST
14478: LIST
14479: PPUSH
14480: CALL_OW 69
14484: ST_TO_ADDR
// if not tmp then
14485: LD_VAR 0 5
14489: NOT
14490: IFFALSE 14494
// exit ;
14492: GO 14648
// for i in tmp do
14494: LD_ADDR_VAR 0 1
14498: PUSH
14499: LD_VAR 0 5
14503: PUSH
14504: FOR_IN
14505: IFFALSE 14646
// begin d := rand ( 0 , 5 ) ;
14507: LD_ADDR_VAR 0 4
14511: PUSH
14512: LD_INT 0
14514: PPUSH
14515: LD_INT 5
14517: PPUSH
14518: CALL_OW 12
14522: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
14523: LD_ADDR_VAR 0 2
14527: PUSH
14528: LD_VAR 0 1
14532: PPUSH
14533: CALL_OW 250
14537: PPUSH
14538: LD_VAR 0 4
14542: PPUSH
14543: LD_INT 3
14545: PPUSH
14546: LD_INT 12
14548: PPUSH
14549: CALL_OW 12
14553: PPUSH
14554: CALL_OW 272
14558: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
14559: LD_ADDR_VAR 0 3
14563: PUSH
14564: LD_VAR 0 1
14568: PPUSH
14569: CALL_OW 251
14573: PPUSH
14574: LD_VAR 0 4
14578: PPUSH
14579: LD_INT 3
14581: PPUSH
14582: LD_INT 12
14584: PPUSH
14585: CALL_OW 12
14589: PPUSH
14590: CALL_OW 273
14594: ST_TO_ADDR
// if ValidHex ( x , y ) then
14595: LD_VAR 0 2
14599: PPUSH
14600: LD_VAR 0 3
14604: PPUSH
14605: CALL_OW 488
14609: IFFALSE 14644
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
14611: LD_VAR 0 1
14615: PPUSH
14616: LD_VAR 0 2
14620: PPUSH
14621: LD_VAR 0 3
14625: PPUSH
14626: LD_INT 3
14628: PPUSH
14629: LD_INT 6
14631: PPUSH
14632: CALL_OW 12
14636: PPUSH
14637: LD_INT 1
14639: PPUSH
14640: CALL_OW 483
// end ;
14644: GO 14504
14646: POP
14647: POP
// end ;
14648: PPOPN 5
14650: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
14651: LD_EXP 24
14655: PUSH
14656: LD_EXP 59
14660: AND
14661: IFFALSE 14755
14663: GO 14665
14665: DISABLE
14666: LD_INT 0
14668: PPUSH
14669: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
14670: LD_ADDR_VAR 0 2
14674: PUSH
14675: LD_INT 22
14677: PUSH
14678: LD_OWVAR 2
14682: PUSH
14683: EMPTY
14684: LIST
14685: LIST
14686: PUSH
14687: LD_INT 32
14689: PUSH
14690: LD_INT 1
14692: PUSH
14693: EMPTY
14694: LIST
14695: LIST
14696: PUSH
14697: LD_INT 21
14699: PUSH
14700: LD_INT 2
14702: PUSH
14703: EMPTY
14704: LIST
14705: LIST
14706: PUSH
14707: EMPTY
14708: LIST
14709: LIST
14710: LIST
14711: PPUSH
14712: CALL_OW 69
14716: ST_TO_ADDR
// if not tmp then
14717: LD_VAR 0 2
14721: NOT
14722: IFFALSE 14726
// exit ;
14724: GO 14755
// for i in tmp do
14726: LD_ADDR_VAR 0 1
14730: PUSH
14731: LD_VAR 0 2
14735: PUSH
14736: FOR_IN
14737: IFFALSE 14753
// SetFuel ( i , 0 ) ;
14739: LD_VAR 0 1
14743: PPUSH
14744: LD_INT 0
14746: PPUSH
14747: CALL_OW 240
14751: GO 14736
14753: POP
14754: POP
// end ;
14755: PPOPN 2
14757: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
14758: LD_EXP 24
14762: PUSH
14763: LD_EXP 60
14767: AND
14768: IFFALSE 14834
14770: GO 14772
14772: DISABLE
14773: LD_INT 0
14775: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14776: LD_ADDR_VAR 0 1
14780: PUSH
14781: LD_INT 22
14783: PUSH
14784: LD_OWVAR 2
14788: PUSH
14789: EMPTY
14790: LIST
14791: LIST
14792: PUSH
14793: LD_INT 30
14795: PUSH
14796: LD_INT 29
14798: PUSH
14799: EMPTY
14800: LIST
14801: LIST
14802: PUSH
14803: EMPTY
14804: LIST
14805: LIST
14806: PPUSH
14807: CALL_OW 69
14811: ST_TO_ADDR
// if not tmp then
14812: LD_VAR 0 1
14816: NOT
14817: IFFALSE 14821
// exit ;
14819: GO 14834
// DestroyUnit ( tmp [ 1 ] ) ;
14821: LD_VAR 0 1
14825: PUSH
14826: LD_INT 1
14828: ARRAY
14829: PPUSH
14830: CALL_OW 65
// end ;
14834: PPOPN 1
14836: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
14837: LD_EXP 24
14841: PUSH
14842: LD_EXP 62
14846: AND
14847: IFFALSE 14976
14849: GO 14851
14851: DISABLE
14852: LD_INT 0
14854: PPUSH
// begin uc_side := 0 ;
14855: LD_ADDR_OWVAR 20
14859: PUSH
14860: LD_INT 0
14862: ST_TO_ADDR
// uc_nation := nation_arabian ;
14863: LD_ADDR_OWVAR 21
14867: PUSH
14868: LD_INT 2
14870: ST_TO_ADDR
// hc_gallery :=  ;
14871: LD_ADDR_OWVAR 33
14875: PUSH
14876: LD_STRING 
14878: ST_TO_ADDR
// hc_name :=  ;
14879: LD_ADDR_OWVAR 26
14883: PUSH
14884: LD_STRING 
14886: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
14887: LD_INT 1
14889: PPUSH
14890: LD_INT 11
14892: PPUSH
14893: LD_INT 10
14895: PPUSH
14896: CALL_OW 380
// un := CreateHuman ;
14900: LD_ADDR_VAR 0 1
14904: PUSH
14905: CALL_OW 44
14909: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14910: LD_VAR 0 1
14914: PPUSH
14915: LD_INT 1
14917: PPUSH
14918: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14922: LD_INT 35
14924: PPUSH
14925: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14929: LD_VAR 0 1
14933: PPUSH
14934: LD_INT 22
14936: PUSH
14937: LD_OWVAR 2
14941: PUSH
14942: EMPTY
14943: LIST
14944: LIST
14945: PPUSH
14946: CALL_OW 69
14950: PPUSH
14951: LD_VAR 0 1
14955: PPUSH
14956: CALL_OW 74
14960: PPUSH
14961: CALL_OW 115
// until IsDead ( un ) ;
14965: LD_VAR 0 1
14969: PPUSH
14970: CALL_OW 301
14974: IFFALSE 14922
// end ;
14976: PPOPN 1
14978: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
14979: LD_EXP 24
14983: PUSH
14984: LD_EXP 64
14988: AND
14989: IFFALSE 15001
14991: GO 14993
14993: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
14994: LD_STRING earthquake(getX(game), 0, 32)
14996: PPUSH
14997: CALL_OW 559
15001: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
15002: LD_EXP 24
15006: PUSH
15007: LD_EXP 65
15011: AND
15012: IFFALSE 15103
15014: GO 15016
15016: DISABLE
15017: LD_INT 0
15019: PPUSH
// begin enable ;
15020: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
15021: LD_ADDR_VAR 0 1
15025: PUSH
15026: LD_INT 22
15028: PUSH
15029: LD_OWVAR 2
15033: PUSH
15034: EMPTY
15035: LIST
15036: LIST
15037: PUSH
15038: LD_INT 21
15040: PUSH
15041: LD_INT 2
15043: PUSH
15044: EMPTY
15045: LIST
15046: LIST
15047: PUSH
15048: LD_INT 33
15050: PUSH
15051: LD_INT 3
15053: PUSH
15054: EMPTY
15055: LIST
15056: LIST
15057: PUSH
15058: EMPTY
15059: LIST
15060: LIST
15061: LIST
15062: PPUSH
15063: CALL_OW 69
15067: ST_TO_ADDR
// if not tmp then
15068: LD_VAR 0 1
15072: NOT
15073: IFFALSE 15077
// exit ;
15075: GO 15103
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15077: LD_VAR 0 1
15081: PUSH
15082: LD_INT 1
15084: PPUSH
15085: LD_VAR 0 1
15089: PPUSH
15090: CALL_OW 12
15094: ARRAY
15095: PPUSH
15096: LD_INT 1
15098: PPUSH
15099: CALL_OW 234
// end ;
15103: PPOPN 1
15105: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
15106: LD_EXP 24
15110: PUSH
15111: LD_EXP 66
15115: AND
15116: IFFALSE 15257
15118: GO 15120
15120: DISABLE
15121: LD_INT 0
15123: PPUSH
15124: PPUSH
15125: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15126: LD_ADDR_VAR 0 3
15130: PUSH
15131: LD_INT 22
15133: PUSH
15134: LD_OWVAR 2
15138: PUSH
15139: EMPTY
15140: LIST
15141: LIST
15142: PUSH
15143: LD_INT 25
15145: PUSH
15146: LD_INT 1
15148: PUSH
15149: EMPTY
15150: LIST
15151: LIST
15152: PUSH
15153: EMPTY
15154: LIST
15155: LIST
15156: PPUSH
15157: CALL_OW 69
15161: ST_TO_ADDR
// if not tmp then
15162: LD_VAR 0 3
15166: NOT
15167: IFFALSE 15171
// exit ;
15169: GO 15257
// un := tmp [ rand ( 1 , tmp ) ] ;
15171: LD_ADDR_VAR 0 2
15175: PUSH
15176: LD_VAR 0 3
15180: PUSH
15181: LD_INT 1
15183: PPUSH
15184: LD_VAR 0 3
15188: PPUSH
15189: CALL_OW 12
15193: ARRAY
15194: ST_TO_ADDR
// if Crawls ( un ) then
15195: LD_VAR 0 2
15199: PPUSH
15200: CALL_OW 318
15204: IFFALSE 15215
// ComWalk ( un ) ;
15206: LD_VAR 0 2
15210: PPUSH
15211: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
15215: LD_VAR 0 2
15219: PPUSH
15220: LD_INT 9
15222: PPUSH
15223: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
15227: LD_INT 28
15229: PPUSH
15230: LD_OWVAR 2
15234: PPUSH
15235: LD_INT 2
15237: PPUSH
15238: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
15242: LD_INT 29
15244: PPUSH
15245: LD_OWVAR 2
15249: PPUSH
15250: LD_INT 2
15252: PPUSH
15253: CALL_OW 322
// end ;
15257: PPOPN 3
15259: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
15260: LD_EXP 24
15264: PUSH
15265: LD_EXP 67
15269: AND
15270: IFFALSE 15381
15272: GO 15274
15274: DISABLE
15275: LD_INT 0
15277: PPUSH
15278: PPUSH
15279: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15280: LD_ADDR_VAR 0 3
15284: PUSH
15285: LD_INT 22
15287: PUSH
15288: LD_OWVAR 2
15292: PUSH
15293: EMPTY
15294: LIST
15295: LIST
15296: PUSH
15297: LD_INT 25
15299: PUSH
15300: LD_INT 1
15302: PUSH
15303: EMPTY
15304: LIST
15305: LIST
15306: PUSH
15307: EMPTY
15308: LIST
15309: LIST
15310: PPUSH
15311: CALL_OW 69
15315: ST_TO_ADDR
// if not tmp then
15316: LD_VAR 0 3
15320: NOT
15321: IFFALSE 15325
// exit ;
15323: GO 15381
// un := tmp [ rand ( 1 , tmp ) ] ;
15325: LD_ADDR_VAR 0 2
15329: PUSH
15330: LD_VAR 0 3
15334: PUSH
15335: LD_INT 1
15337: PPUSH
15338: LD_VAR 0 3
15342: PPUSH
15343: CALL_OW 12
15347: ARRAY
15348: ST_TO_ADDR
// if Crawls ( un ) then
15349: LD_VAR 0 2
15353: PPUSH
15354: CALL_OW 318
15358: IFFALSE 15369
// ComWalk ( un ) ;
15360: LD_VAR 0 2
15364: PPUSH
15365: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15369: LD_VAR 0 2
15373: PPUSH
15374: LD_INT 8
15376: PPUSH
15377: CALL_OW 336
// end ;
15381: PPOPN 3
15383: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
15384: LD_EXP 24
15388: PUSH
15389: LD_EXP 68
15393: AND
15394: IFFALSE 15538
15396: GO 15398
15398: DISABLE
15399: LD_INT 0
15401: PPUSH
15402: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
15403: LD_ADDR_VAR 0 2
15407: PUSH
15408: LD_INT 22
15410: PUSH
15411: LD_OWVAR 2
15415: PUSH
15416: EMPTY
15417: LIST
15418: LIST
15419: PUSH
15420: LD_INT 21
15422: PUSH
15423: LD_INT 2
15425: PUSH
15426: EMPTY
15427: LIST
15428: LIST
15429: PUSH
15430: LD_INT 2
15432: PUSH
15433: LD_INT 34
15435: PUSH
15436: LD_INT 12
15438: PUSH
15439: EMPTY
15440: LIST
15441: LIST
15442: PUSH
15443: LD_INT 34
15445: PUSH
15446: LD_INT 51
15448: PUSH
15449: EMPTY
15450: LIST
15451: LIST
15452: PUSH
15453: LD_INT 34
15455: PUSH
15456: LD_INT 32
15458: PUSH
15459: EMPTY
15460: LIST
15461: LIST
15462: PUSH
15463: EMPTY
15464: LIST
15465: LIST
15466: LIST
15467: LIST
15468: PUSH
15469: EMPTY
15470: LIST
15471: LIST
15472: LIST
15473: PPUSH
15474: CALL_OW 69
15478: ST_TO_ADDR
// if not tmp then
15479: LD_VAR 0 2
15483: NOT
15484: IFFALSE 15488
// exit ;
15486: GO 15538
// for i in tmp do
15488: LD_ADDR_VAR 0 1
15492: PUSH
15493: LD_VAR 0 2
15497: PUSH
15498: FOR_IN
15499: IFFALSE 15536
// if GetCargo ( i , mat_artifact ) = 0 then
15501: LD_VAR 0 1
15505: PPUSH
15506: LD_INT 4
15508: PPUSH
15509: CALL_OW 289
15513: PUSH
15514: LD_INT 0
15516: EQUAL
15517: IFFALSE 15534
// SetCargo ( i , mat_siberit , 100 ) ;
15519: LD_VAR 0 1
15523: PPUSH
15524: LD_INT 3
15526: PPUSH
15527: LD_INT 100
15529: PPUSH
15530: CALL_OW 290
15534: GO 15498
15536: POP
15537: POP
// end ;
15538: PPOPN 2
15540: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
15541: LD_EXP 24
15545: PUSH
15546: LD_EXP 69
15550: AND
15551: IFFALSE 15734
15553: GO 15555
15555: DISABLE
15556: LD_INT 0
15558: PPUSH
15559: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
15560: LD_ADDR_VAR 0 2
15564: PUSH
15565: LD_INT 22
15567: PUSH
15568: LD_OWVAR 2
15572: PUSH
15573: EMPTY
15574: LIST
15575: LIST
15576: PPUSH
15577: CALL_OW 69
15581: ST_TO_ADDR
// if not tmp then
15582: LD_VAR 0 2
15586: NOT
15587: IFFALSE 15591
// exit ;
15589: GO 15734
// for i := 1 to 2 do
15591: LD_ADDR_VAR 0 1
15595: PUSH
15596: DOUBLE
15597: LD_INT 1
15599: DEC
15600: ST_TO_ADDR
15601: LD_INT 2
15603: PUSH
15604: FOR_TO
15605: IFFALSE 15732
// begin uc_side := your_side ;
15607: LD_ADDR_OWVAR 20
15611: PUSH
15612: LD_OWVAR 2
15616: ST_TO_ADDR
// uc_nation := nation_american ;
15617: LD_ADDR_OWVAR 21
15621: PUSH
15622: LD_INT 1
15624: ST_TO_ADDR
// vc_chassis := us_morphling ;
15625: LD_ADDR_OWVAR 37
15629: PUSH
15630: LD_INT 5
15632: ST_TO_ADDR
// vc_engine := engine_siberite ;
15633: LD_ADDR_OWVAR 39
15637: PUSH
15638: LD_INT 3
15640: ST_TO_ADDR
// vc_control := control_computer ;
15641: LD_ADDR_OWVAR 38
15645: PUSH
15646: LD_INT 3
15648: ST_TO_ADDR
// vc_weapon := us_double_laser ;
15649: LD_ADDR_OWVAR 40
15653: PUSH
15654: LD_INT 10
15656: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
15657: LD_VAR 0 2
15661: PUSH
15662: LD_INT 1
15664: ARRAY
15665: PPUSH
15666: CALL_OW 310
15670: NOT
15671: IFFALSE 15718
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
15673: CALL_OW 45
15677: PPUSH
15678: LD_VAR 0 2
15682: PUSH
15683: LD_INT 1
15685: ARRAY
15686: PPUSH
15687: CALL_OW 250
15691: PPUSH
15692: LD_VAR 0 2
15696: PUSH
15697: LD_INT 1
15699: ARRAY
15700: PPUSH
15701: CALL_OW 251
15705: PPUSH
15706: LD_INT 12
15708: PPUSH
15709: LD_INT 1
15711: PPUSH
15712: CALL_OW 50
15716: GO 15730
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
15718: CALL_OW 45
15722: PPUSH
15723: LD_INT 1
15725: PPUSH
15726: CALL_OW 51
// end ;
15730: GO 15604
15732: POP
15733: POP
// end ;
15734: PPOPN 2
15736: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
15737: LD_EXP 24
15741: PUSH
15742: LD_EXP 70
15746: AND
15747: IFFALSE 15969
15749: GO 15751
15751: DISABLE
15752: LD_INT 0
15754: PPUSH
15755: PPUSH
15756: PPUSH
15757: PPUSH
15758: PPUSH
15759: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15760: LD_ADDR_VAR 0 6
15764: PUSH
15765: LD_INT 22
15767: PUSH
15768: LD_OWVAR 2
15772: PUSH
15773: EMPTY
15774: LIST
15775: LIST
15776: PUSH
15777: LD_INT 21
15779: PUSH
15780: LD_INT 1
15782: PUSH
15783: EMPTY
15784: LIST
15785: LIST
15786: PUSH
15787: LD_INT 3
15789: PUSH
15790: LD_INT 23
15792: PUSH
15793: LD_INT 0
15795: PUSH
15796: EMPTY
15797: LIST
15798: LIST
15799: PUSH
15800: EMPTY
15801: LIST
15802: LIST
15803: PUSH
15804: EMPTY
15805: LIST
15806: LIST
15807: LIST
15808: PPUSH
15809: CALL_OW 69
15813: ST_TO_ADDR
// if not tmp then
15814: LD_VAR 0 6
15818: NOT
15819: IFFALSE 15823
// exit ;
15821: GO 15969
// s1 := rand ( 1 , 4 ) ;
15823: LD_ADDR_VAR 0 2
15827: PUSH
15828: LD_INT 1
15830: PPUSH
15831: LD_INT 4
15833: PPUSH
15834: CALL_OW 12
15838: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
15839: LD_ADDR_VAR 0 4
15843: PUSH
15844: LD_VAR 0 6
15848: PUSH
15849: LD_INT 1
15851: ARRAY
15852: PPUSH
15853: LD_VAR 0 2
15857: PPUSH
15858: CALL_OW 259
15862: ST_TO_ADDR
// if s1 = 1 then
15863: LD_VAR 0 2
15867: PUSH
15868: LD_INT 1
15870: EQUAL
15871: IFFALSE 15891
// s2 := rand ( 2 , 4 ) else
15873: LD_ADDR_VAR 0 3
15877: PUSH
15878: LD_INT 2
15880: PPUSH
15881: LD_INT 4
15883: PPUSH
15884: CALL_OW 12
15888: ST_TO_ADDR
15889: GO 15899
// s2 := 1 ;
15891: LD_ADDR_VAR 0 3
15895: PUSH
15896: LD_INT 1
15898: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
15899: LD_ADDR_VAR 0 5
15903: PUSH
15904: LD_VAR 0 6
15908: PUSH
15909: LD_INT 1
15911: ARRAY
15912: PPUSH
15913: LD_VAR 0 3
15917: PPUSH
15918: CALL_OW 259
15922: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
15923: LD_VAR 0 6
15927: PUSH
15928: LD_INT 1
15930: ARRAY
15931: PPUSH
15932: LD_VAR 0 2
15936: PPUSH
15937: LD_VAR 0 5
15941: PPUSH
15942: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
15946: LD_VAR 0 6
15950: PUSH
15951: LD_INT 1
15953: ARRAY
15954: PPUSH
15955: LD_VAR 0 3
15959: PPUSH
15960: LD_VAR 0 4
15964: PPUSH
15965: CALL_OW 237
// end ;
15969: PPOPN 6
15971: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
15972: LD_EXP 24
15976: PUSH
15977: LD_EXP 71
15981: AND
15982: IFFALSE 16061
15984: GO 15986
15986: DISABLE
15987: LD_INT 0
15989: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
15990: LD_ADDR_VAR 0 1
15994: PUSH
15995: LD_INT 22
15997: PUSH
15998: LD_OWVAR 2
16002: PUSH
16003: EMPTY
16004: LIST
16005: LIST
16006: PUSH
16007: LD_INT 30
16009: PUSH
16010: LD_INT 3
16012: PUSH
16013: EMPTY
16014: LIST
16015: LIST
16016: PUSH
16017: EMPTY
16018: LIST
16019: LIST
16020: PPUSH
16021: CALL_OW 69
16025: ST_TO_ADDR
// if not tmp then
16026: LD_VAR 0 1
16030: NOT
16031: IFFALSE 16035
// exit ;
16033: GO 16061
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16035: LD_VAR 0 1
16039: PUSH
16040: LD_INT 1
16042: PPUSH
16043: LD_VAR 0 1
16047: PPUSH
16048: CALL_OW 12
16052: ARRAY
16053: PPUSH
16054: LD_INT 1
16056: PPUSH
16057: CALL_OW 234
// end ;
16061: PPOPN 1
16063: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
16064: LD_EXP 24
16068: PUSH
16069: LD_EXP 72
16073: AND
16074: IFFALSE 16186
16076: GO 16078
16078: DISABLE
16079: LD_INT 0
16081: PPUSH
16082: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
16083: LD_ADDR_VAR 0 2
16087: PUSH
16088: LD_INT 22
16090: PUSH
16091: LD_OWVAR 2
16095: PUSH
16096: EMPTY
16097: LIST
16098: LIST
16099: PUSH
16100: LD_INT 2
16102: PUSH
16103: LD_INT 30
16105: PUSH
16106: LD_INT 27
16108: PUSH
16109: EMPTY
16110: LIST
16111: LIST
16112: PUSH
16113: LD_INT 30
16115: PUSH
16116: LD_INT 26
16118: PUSH
16119: EMPTY
16120: LIST
16121: LIST
16122: PUSH
16123: LD_INT 30
16125: PUSH
16126: LD_INT 28
16128: PUSH
16129: EMPTY
16130: LIST
16131: LIST
16132: PUSH
16133: EMPTY
16134: LIST
16135: LIST
16136: LIST
16137: LIST
16138: PUSH
16139: EMPTY
16140: LIST
16141: LIST
16142: PPUSH
16143: CALL_OW 69
16147: ST_TO_ADDR
// if not tmp then
16148: LD_VAR 0 2
16152: NOT
16153: IFFALSE 16157
// exit ;
16155: GO 16186
// for i in tmp do
16157: LD_ADDR_VAR 0 1
16161: PUSH
16162: LD_VAR 0 2
16166: PUSH
16167: FOR_IN
16168: IFFALSE 16184
// SetLives ( i , 1 ) ;
16170: LD_VAR 0 1
16174: PPUSH
16175: LD_INT 1
16177: PPUSH
16178: CALL_OW 234
16182: GO 16167
16184: POP
16185: POP
// end ;
16186: PPOPN 2
16188: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
16189: LD_EXP 24
16193: PUSH
16194: LD_EXP 73
16198: AND
16199: IFFALSE 16473
16201: GO 16203
16203: DISABLE
16204: LD_INT 0
16206: PPUSH
16207: PPUSH
16208: PPUSH
// begin i := rand ( 1 , 7 ) ;
16209: LD_ADDR_VAR 0 1
16213: PUSH
16214: LD_INT 1
16216: PPUSH
16217: LD_INT 7
16219: PPUSH
16220: CALL_OW 12
16224: ST_TO_ADDR
// case i of 1 :
16225: LD_VAR 0 1
16229: PUSH
16230: LD_INT 1
16232: DOUBLE
16233: EQUAL
16234: IFTRUE 16238
16236: GO 16248
16238: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
16239: LD_STRING earthquake(getX(game), 0, 32)
16241: PPUSH
16242: CALL_OW 559
16246: GO 16473
16248: LD_INT 2
16250: DOUBLE
16251: EQUAL
16252: IFTRUE 16256
16254: GO 16270
16256: POP
// begin ToLua ( displayStucuk(); ) ;
16257: LD_STRING displayStucuk();
16259: PPUSH
16260: CALL_OW 559
// ResetFog ;
16264: CALL_OW 335
// end ; 3 :
16268: GO 16473
16270: LD_INT 3
16272: DOUBLE
16273: EQUAL
16274: IFTRUE 16278
16276: GO 16382
16278: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16279: LD_ADDR_VAR 0 2
16283: PUSH
16284: LD_INT 22
16286: PUSH
16287: LD_OWVAR 2
16291: PUSH
16292: EMPTY
16293: LIST
16294: LIST
16295: PUSH
16296: LD_INT 25
16298: PUSH
16299: LD_INT 1
16301: PUSH
16302: EMPTY
16303: LIST
16304: LIST
16305: PUSH
16306: EMPTY
16307: LIST
16308: LIST
16309: PPUSH
16310: CALL_OW 69
16314: ST_TO_ADDR
// if not tmp then
16315: LD_VAR 0 2
16319: NOT
16320: IFFALSE 16324
// exit ;
16322: GO 16473
// un := tmp [ rand ( 1 , tmp ) ] ;
16324: LD_ADDR_VAR 0 3
16328: PUSH
16329: LD_VAR 0 2
16333: PUSH
16334: LD_INT 1
16336: PPUSH
16337: LD_VAR 0 2
16341: PPUSH
16342: CALL_OW 12
16346: ARRAY
16347: ST_TO_ADDR
// if Crawls ( un ) then
16348: LD_VAR 0 3
16352: PPUSH
16353: CALL_OW 318
16357: IFFALSE 16368
// ComWalk ( un ) ;
16359: LD_VAR 0 3
16363: PPUSH
16364: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16368: LD_VAR 0 3
16372: PPUSH
16373: LD_INT 8
16375: PPUSH
16376: CALL_OW 336
// end ; 4 :
16380: GO 16473
16382: LD_INT 4
16384: DOUBLE
16385: EQUAL
16386: IFTRUE 16390
16388: GO 16451
16390: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16391: LD_ADDR_VAR 0 2
16395: PUSH
16396: LD_INT 22
16398: PUSH
16399: LD_OWVAR 2
16403: PUSH
16404: EMPTY
16405: LIST
16406: LIST
16407: PUSH
16408: LD_INT 30
16410: PUSH
16411: LD_INT 29
16413: PUSH
16414: EMPTY
16415: LIST
16416: LIST
16417: PUSH
16418: EMPTY
16419: LIST
16420: LIST
16421: PPUSH
16422: CALL_OW 69
16426: ST_TO_ADDR
// if not tmp then
16427: LD_VAR 0 2
16431: NOT
16432: IFFALSE 16436
// exit ;
16434: GO 16473
// DestroyUnit ( tmp [ 1 ] ) ;
16436: LD_VAR 0 2
16440: PUSH
16441: LD_INT 1
16443: ARRAY
16444: PPUSH
16445: CALL_OW 65
// end ; 5 .. 7 :
16449: GO 16473
16451: LD_INT 5
16453: DOUBLE
16454: GREATEREQUAL
16455: IFFALSE 16463
16457: LD_INT 7
16459: DOUBLE
16460: LESSEQUAL
16461: IFTRUE 16465
16463: GO 16472
16465: POP
// StreamSibBomb ; end ;
16466: CALL 12723 0 0
16470: GO 16473
16472: POP
// end ;
16473: PPOPN 3
16475: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
16476: LD_EXP 24
16480: PUSH
16481: LD_EXP 74
16485: AND
16486: IFFALSE 16642
16488: GO 16490
16490: DISABLE
16491: LD_INT 0
16493: PPUSH
16494: PPUSH
16495: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
16496: LD_ADDR_VAR 0 2
16500: PUSH
16501: LD_INT 81
16503: PUSH
16504: LD_OWVAR 2
16508: PUSH
16509: EMPTY
16510: LIST
16511: LIST
16512: PUSH
16513: LD_INT 2
16515: PUSH
16516: LD_INT 21
16518: PUSH
16519: LD_INT 1
16521: PUSH
16522: EMPTY
16523: LIST
16524: LIST
16525: PUSH
16526: LD_INT 21
16528: PUSH
16529: LD_INT 2
16531: PUSH
16532: EMPTY
16533: LIST
16534: LIST
16535: PUSH
16536: EMPTY
16537: LIST
16538: LIST
16539: LIST
16540: PUSH
16541: EMPTY
16542: LIST
16543: LIST
16544: PPUSH
16545: CALL_OW 69
16549: ST_TO_ADDR
// if not tmp then
16550: LD_VAR 0 2
16554: NOT
16555: IFFALSE 16559
// exit ;
16557: GO 16642
// p := 0 ;
16559: LD_ADDR_VAR 0 3
16563: PUSH
16564: LD_INT 0
16566: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16567: LD_INT 35
16569: PPUSH
16570: CALL_OW 67
// p := p + 1 ;
16574: LD_ADDR_VAR 0 3
16578: PUSH
16579: LD_VAR 0 3
16583: PUSH
16584: LD_INT 1
16586: PLUS
16587: ST_TO_ADDR
// for i in tmp do
16588: LD_ADDR_VAR 0 1
16592: PUSH
16593: LD_VAR 0 2
16597: PUSH
16598: FOR_IN
16599: IFFALSE 16630
// if GetLives ( i ) < 1000 then
16601: LD_VAR 0 1
16605: PPUSH
16606: CALL_OW 256
16610: PUSH
16611: LD_INT 1000
16613: LESS
16614: IFFALSE 16628
// SetLives ( i , 1000 ) ;
16616: LD_VAR 0 1
16620: PPUSH
16621: LD_INT 1000
16623: PPUSH
16624: CALL_OW 234
16628: GO 16598
16630: POP
16631: POP
// until p > 20 ;
16632: LD_VAR 0 3
16636: PUSH
16637: LD_INT 20
16639: GREATER
16640: IFFALSE 16567
// end ;
16642: PPOPN 3
16644: END
// every 0 0$1 trigger StreamModeActive and sTime do
16645: LD_EXP 24
16649: PUSH
16650: LD_EXP 75
16654: AND
16655: IFFALSE 16690
16657: GO 16659
16659: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
16660: LD_INT 28
16662: PPUSH
16663: LD_OWVAR 2
16667: PPUSH
16668: LD_INT 2
16670: PPUSH
16671: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
16675: LD_INT 30
16677: PPUSH
16678: LD_OWVAR 2
16682: PPUSH
16683: LD_INT 2
16685: PPUSH
16686: CALL_OW 322
// end ;
16690: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
16691: LD_EXP 24
16695: PUSH
16696: LD_EXP 76
16700: AND
16701: IFFALSE 16822
16703: GO 16705
16705: DISABLE
16706: LD_INT 0
16708: PPUSH
16709: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16710: LD_ADDR_VAR 0 2
16714: PUSH
16715: LD_INT 22
16717: PUSH
16718: LD_OWVAR 2
16722: PUSH
16723: EMPTY
16724: LIST
16725: LIST
16726: PUSH
16727: LD_INT 21
16729: PUSH
16730: LD_INT 1
16732: PUSH
16733: EMPTY
16734: LIST
16735: LIST
16736: PUSH
16737: LD_INT 3
16739: PUSH
16740: LD_INT 23
16742: PUSH
16743: LD_INT 0
16745: PUSH
16746: EMPTY
16747: LIST
16748: LIST
16749: PUSH
16750: EMPTY
16751: LIST
16752: LIST
16753: PUSH
16754: EMPTY
16755: LIST
16756: LIST
16757: LIST
16758: PPUSH
16759: CALL_OW 69
16763: ST_TO_ADDR
// if not tmp then
16764: LD_VAR 0 2
16768: NOT
16769: IFFALSE 16773
// exit ;
16771: GO 16822
// for i in tmp do
16773: LD_ADDR_VAR 0 1
16777: PUSH
16778: LD_VAR 0 2
16782: PUSH
16783: FOR_IN
16784: IFFALSE 16820
// begin if Crawls ( i ) then
16786: LD_VAR 0 1
16790: PPUSH
16791: CALL_OW 318
16795: IFFALSE 16806
// ComWalk ( i ) ;
16797: LD_VAR 0 1
16801: PPUSH
16802: CALL_OW 138
// SetClass ( i , 2 ) ;
16806: LD_VAR 0 1
16810: PPUSH
16811: LD_INT 2
16813: PPUSH
16814: CALL_OW 336
// end ;
16818: GO 16783
16820: POP
16821: POP
// end ;
16822: PPOPN 2
16824: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
16825: LD_EXP 24
16829: PUSH
16830: LD_EXP 77
16834: AND
16835: IFFALSE 17116
16837: GO 16839
16839: DISABLE
16840: LD_INT 0
16842: PPUSH
16843: PPUSH
16844: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
16845: LD_OWVAR 2
16849: PPUSH
16850: LD_INT 9
16852: PPUSH
16853: LD_INT 1
16855: PPUSH
16856: LD_INT 1
16858: PPUSH
16859: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
16863: LD_INT 9
16865: PPUSH
16866: LD_OWVAR 2
16870: PPUSH
16871: CALL_OW 343
// uc_side := 9 ;
16875: LD_ADDR_OWVAR 20
16879: PUSH
16880: LD_INT 9
16882: ST_TO_ADDR
// uc_nation := 2 ;
16883: LD_ADDR_OWVAR 21
16887: PUSH
16888: LD_INT 2
16890: ST_TO_ADDR
// hc_name := Dark Warrior ;
16891: LD_ADDR_OWVAR 26
16895: PUSH
16896: LD_STRING Dark Warrior
16898: ST_TO_ADDR
// hc_gallery :=  ;
16899: LD_ADDR_OWVAR 33
16903: PUSH
16904: LD_STRING 
16906: ST_TO_ADDR
// hc_noskilllimit := true ;
16907: LD_ADDR_OWVAR 76
16911: PUSH
16912: LD_INT 1
16914: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
16915: LD_ADDR_OWVAR 31
16919: PUSH
16920: LD_INT 30
16922: PUSH
16923: LD_INT 30
16925: PUSH
16926: LD_INT 30
16928: PUSH
16929: LD_INT 30
16931: PUSH
16932: EMPTY
16933: LIST
16934: LIST
16935: LIST
16936: LIST
16937: ST_TO_ADDR
// un := CreateHuman ;
16938: LD_ADDR_VAR 0 3
16942: PUSH
16943: CALL_OW 44
16947: ST_TO_ADDR
// hc_noskilllimit := false ;
16948: LD_ADDR_OWVAR 76
16952: PUSH
16953: LD_INT 0
16955: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16956: LD_VAR 0 3
16960: PPUSH
16961: LD_INT 1
16963: PPUSH
16964: CALL_OW 51
// p := 0 ;
16968: LD_ADDR_VAR 0 2
16972: PUSH
16973: LD_INT 0
16975: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16976: LD_INT 35
16978: PPUSH
16979: CALL_OW 67
// p := p + 1 ;
16983: LD_ADDR_VAR 0 2
16987: PUSH
16988: LD_VAR 0 2
16992: PUSH
16993: LD_INT 1
16995: PLUS
16996: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
16997: LD_VAR 0 3
17001: PPUSH
17002: CALL_OW 256
17006: PUSH
17007: LD_INT 1000
17009: LESS
17010: IFFALSE 17024
// SetLives ( un , 1000 ) ;
17012: LD_VAR 0 3
17016: PPUSH
17017: LD_INT 1000
17019: PPUSH
17020: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
17024: LD_VAR 0 3
17028: PPUSH
17029: LD_INT 81
17031: PUSH
17032: LD_OWVAR 2
17036: PUSH
17037: EMPTY
17038: LIST
17039: LIST
17040: PUSH
17041: LD_INT 91
17043: PUSH
17044: LD_VAR 0 3
17048: PUSH
17049: LD_INT 30
17051: PUSH
17052: EMPTY
17053: LIST
17054: LIST
17055: LIST
17056: PUSH
17057: EMPTY
17058: LIST
17059: LIST
17060: PPUSH
17061: CALL_OW 69
17065: PPUSH
17066: LD_VAR 0 3
17070: PPUSH
17071: CALL_OW 74
17075: PPUSH
17076: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
17080: LD_VAR 0 2
17084: PUSH
17085: LD_INT 60
17087: GREATER
17088: PUSH
17089: LD_VAR 0 3
17093: PPUSH
17094: CALL_OW 301
17098: OR
17099: IFFALSE 16976
// if un then
17101: LD_VAR 0 3
17105: IFFALSE 17116
// RemoveUnit ( un ) ;
17107: LD_VAR 0 3
17111: PPUSH
17112: CALL_OW 64
// end ;
17116: PPOPN 3
17118: END
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
17119: LD_INT 0
17121: PPUSH
17122: PPUSH
17123: PPUSH
17124: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17125: LD_ADDR_VAR 0 4
17129: PUSH
17130: LD_INT 22
17132: PUSH
17133: LD_OWVAR 2
17137: PUSH
17138: EMPTY
17139: LIST
17140: LIST
17141: PUSH
17142: LD_INT 2
17144: PUSH
17145: LD_INT 30
17147: PUSH
17148: LD_INT 0
17150: PUSH
17151: EMPTY
17152: LIST
17153: LIST
17154: PUSH
17155: LD_INT 30
17157: PUSH
17158: LD_INT 1
17160: PUSH
17161: EMPTY
17162: LIST
17163: LIST
17164: PUSH
17165: EMPTY
17166: LIST
17167: LIST
17168: LIST
17169: PUSH
17170: EMPTY
17171: LIST
17172: LIST
17173: PPUSH
17174: CALL_OW 69
17178: ST_TO_ADDR
// if not tmp then
17179: LD_VAR 0 4
17183: NOT
17184: IFFALSE 17188
// exit ;
17186: GO 17247
// for i in tmp do
17188: LD_ADDR_VAR 0 2
17192: PUSH
17193: LD_VAR 0 4
17197: PUSH
17198: FOR_IN
17199: IFFALSE 17245
// for j = 1 to 3 do
17201: LD_ADDR_VAR 0 3
17205: PUSH
17206: DOUBLE
17207: LD_INT 1
17209: DEC
17210: ST_TO_ADDR
17211: LD_INT 3
17213: PUSH
17214: FOR_TO
17215: IFFALSE 17241
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
17217: LD_VAR 0 2
17221: PPUSH
17222: CALL_OW 274
17226: PPUSH
17227: LD_VAR 0 3
17231: PPUSH
17232: LD_INT 99999
17234: PPUSH
17235: CALL_OW 277
17239: GO 17214
17241: POP
17242: POP
17243: GO 17198
17245: POP
17246: POP
// end ;
17247: LD_VAR 0 1
17251: RET
// export function hHackSetLevel10 ; var i , j ; begin
17252: LD_INT 0
17254: PPUSH
17255: PPUSH
17256: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
17257: LD_ADDR_VAR 0 2
17261: PUSH
17262: LD_INT 21
17264: PUSH
17265: LD_INT 1
17267: PUSH
17268: EMPTY
17269: LIST
17270: LIST
17271: PPUSH
17272: CALL_OW 69
17276: PUSH
17277: FOR_IN
17278: IFFALSE 17330
// if IsSelected ( i ) then
17280: LD_VAR 0 2
17284: PPUSH
17285: CALL_OW 306
17289: IFFALSE 17328
// begin for j := 1 to 4 do
17291: LD_ADDR_VAR 0 3
17295: PUSH
17296: DOUBLE
17297: LD_INT 1
17299: DEC
17300: ST_TO_ADDR
17301: LD_INT 4
17303: PUSH
17304: FOR_TO
17305: IFFALSE 17326
// SetSkill ( i , j , 10 ) ;
17307: LD_VAR 0 2
17311: PPUSH
17312: LD_VAR 0 3
17316: PPUSH
17317: LD_INT 10
17319: PPUSH
17320: CALL_OW 237
17324: GO 17304
17326: POP
17327: POP
// end ;
17328: GO 17277
17330: POP
17331: POP
// end ;
17332: LD_VAR 0 1
17336: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
17337: LD_INT 0
17339: PPUSH
17340: PPUSH
17341: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
17342: LD_ADDR_VAR 0 2
17346: PUSH
17347: LD_INT 22
17349: PUSH
17350: LD_OWVAR 2
17354: PUSH
17355: EMPTY
17356: LIST
17357: LIST
17358: PUSH
17359: LD_INT 21
17361: PUSH
17362: LD_INT 1
17364: PUSH
17365: EMPTY
17366: LIST
17367: LIST
17368: PUSH
17369: EMPTY
17370: LIST
17371: LIST
17372: PPUSH
17373: CALL_OW 69
17377: PUSH
17378: FOR_IN
17379: IFFALSE 17420
// begin for j := 1 to 4 do
17381: LD_ADDR_VAR 0 3
17385: PUSH
17386: DOUBLE
17387: LD_INT 1
17389: DEC
17390: ST_TO_ADDR
17391: LD_INT 4
17393: PUSH
17394: FOR_TO
17395: IFFALSE 17416
// SetSkill ( i , j , 10 ) ;
17397: LD_VAR 0 2
17401: PPUSH
17402: LD_VAR 0 3
17406: PPUSH
17407: LD_INT 10
17409: PPUSH
17410: CALL_OW 237
17414: GO 17394
17416: POP
17417: POP
// end ;
17418: GO 17378
17420: POP
17421: POP
// end ;
17422: LD_VAR 0 1
17426: RET
// export function hHackSpawnHuman ( nation , class , skill ) ; begin
17427: LD_INT 0
17429: PPUSH
// uc_side := your_side ;
17430: LD_ADDR_OWVAR 20
17434: PUSH
17435: LD_OWVAR 2
17439: ST_TO_ADDR
// uc_nation := nation ;
17440: LD_ADDR_OWVAR 21
17444: PUSH
17445: LD_VAR 0 1
17449: ST_TO_ADDR
// InitHc ;
17450: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
17454: LD_INT 0
17456: PPUSH
17457: LD_VAR 0 2
17461: PPUSH
17462: LD_VAR 0 3
17466: PPUSH
17467: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
17471: CALL_OW 44
17475: PPUSH
17476: LD_INT 1
17478: PPUSH
17479: CALL_OW 51
// end ;
17483: LD_VAR 0 4
17487: RET
// export function hHackSpawnVehicle ; begin
17488: LD_INT 0
17490: PPUSH
// uc_side := your_side ;
17491: LD_ADDR_OWVAR 20
17495: PUSH
17496: LD_OWVAR 2
17500: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
17501: LD_ADDR_OWVAR 21
17505: PUSH
17506: LD_INT 1
17508: PPUSH
17509: LD_INT 3
17511: PPUSH
17512: CALL_OW 12
17516: ST_TO_ADDR
// InitVc ;
17517: CALL_OW 20
// case uc_nation of 1 :
17521: LD_OWVAR 21
17525: PUSH
17526: LD_INT 1
17528: DOUBLE
17529: EQUAL
17530: IFTRUE 17534
17532: GO 17678
17534: POP
// begin vc_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] [ rand ( 1 , 5 ) ] ;
17535: LD_ADDR_OWVAR 37
17539: PUSH
17540: LD_INT 1
17542: PUSH
17543: LD_INT 2
17545: PUSH
17546: LD_INT 3
17548: PUSH
17549: LD_INT 4
17551: PUSH
17552: LD_INT 5
17554: PUSH
17555: EMPTY
17556: LIST
17557: LIST
17558: LIST
17559: LIST
17560: LIST
17561: PUSH
17562: LD_INT 1
17564: PPUSH
17565: LD_INT 5
17567: PPUSH
17568: CALL_OW 12
17572: ARRAY
17573: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
17574: LD_ADDR_OWVAR 39
17578: PUSH
17579: LD_INT 1
17581: PPUSH
17582: LD_INT 3
17584: PPUSH
17585: CALL_OW 12
17589: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_computer ] [ rand ( 1 , 3 ) ] ;
17590: LD_ADDR_OWVAR 38
17594: PUSH
17595: LD_INT 1
17597: PUSH
17598: LD_INT 2
17600: PUSH
17601: LD_INT 3
17603: PUSH
17604: EMPTY
17605: LIST
17606: LIST
17607: LIST
17608: PUSH
17609: LD_INT 1
17611: PPUSH
17612: LD_INT 3
17614: PPUSH
17615: CALL_OW 12
17619: ARRAY
17620: ST_TO_ADDR
// vc_weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_light_gun , us_rocket_launcher , us_siberium_rocket , us_laser , us_double_laser , us_heavy_gun ] [ rand ( 1 , 9 ) ] ;
17621: LD_ADDR_OWVAR 40
17625: PUSH
17626: LD_INT 2
17628: PUSH
17629: LD_INT 4
17631: PUSH
17632: LD_INT 5
17634: PUSH
17635: LD_INT 3
17637: PUSH
17638: LD_INT 7
17640: PUSH
17641: LD_INT 8
17643: PUSH
17644: LD_INT 9
17646: PUSH
17647: LD_INT 10
17649: PUSH
17650: LD_INT 6
17652: PUSH
17653: EMPTY
17654: LIST
17655: LIST
17656: LIST
17657: LIST
17658: LIST
17659: LIST
17660: LIST
17661: LIST
17662: LIST
17663: PUSH
17664: LD_INT 1
17666: PPUSH
17667: LD_INT 9
17669: PPUSH
17670: CALL_OW 12
17674: ARRAY
17675: ST_TO_ADDR
// end ; 2 :
17676: GO 17943
17678: LD_INT 2
17680: DOUBLE
17681: EQUAL
17682: IFTRUE 17686
17684: GO 17810
17686: POP
// begin vc_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 4 ) ] ;
17687: LD_ADDR_OWVAR 37
17691: PUSH
17692: LD_INT 11
17694: PUSH
17695: LD_INT 12
17697: PUSH
17698: LD_INT 13
17700: PUSH
17701: LD_INT 14
17703: PUSH
17704: EMPTY
17705: LIST
17706: LIST
17707: LIST
17708: LIST
17709: PUSH
17710: LD_INT 1
17712: PPUSH
17713: LD_INT 4
17715: PPUSH
17716: CALL_OW 12
17720: ARRAY
17721: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
17722: LD_ADDR_OWVAR 39
17726: PUSH
17727: LD_INT 1
17729: PPUSH
17730: LD_INT 3
17732: PPUSH
17733: CALL_OW 12
17737: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] ;
17738: LD_ADDR_OWVAR 38
17742: PUSH
17743: LD_INT 1
17745: PUSH
17746: LD_INT 2
17748: PUSH
17749: LD_INT 5
17751: PUSH
17752: EMPTY
17753: LIST
17754: LIST
17755: LIST
17756: PUSH
17757: LD_INT 1
17759: PPUSH
17760: LD_INT 3
17762: PPUSH
17763: CALL_OW 12
17767: ARRAY
17768: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_flame_thrower , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 5 ) ] ;
17769: LD_ADDR_OWVAR 40
17773: PUSH
17774: LD_INT 24
17776: PUSH
17777: LD_INT 26
17779: PUSH
17780: LD_INT 27
17782: PUSH
17783: LD_INT 28
17785: PUSH
17786: LD_INT 29
17788: PUSH
17789: EMPTY
17790: LIST
17791: LIST
17792: LIST
17793: LIST
17794: LIST
17795: PUSH
17796: LD_INT 1
17798: PPUSH
17799: LD_INT 5
17801: PPUSH
17802: CALL_OW 12
17806: ARRAY
17807: ST_TO_ADDR
// end ; 3 :
17808: GO 17943
17810: LD_INT 3
17812: DOUBLE
17813: EQUAL
17814: IFTRUE 17818
17816: GO 17942
17818: POP
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
17819: LD_ADDR_OWVAR 37
17823: PUSH
17824: LD_INT 21
17826: PUSH
17827: LD_INT 23
17829: PUSH
17830: LD_INT 22
17832: PUSH
17833: LD_INT 24
17835: PUSH
17836: EMPTY
17837: LIST
17838: LIST
17839: LIST
17840: LIST
17841: PUSH
17842: LD_INT 1
17844: PPUSH
17845: LD_INT 4
17847: PPUSH
17848: CALL_OW 12
17852: ARRAY
17853: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
17854: LD_ADDR_OWVAR 39
17858: PUSH
17859: LD_INT 1
17861: PPUSH
17862: LD_INT 3
17864: PPUSH
17865: CALL_OW 12
17869: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] ;
17870: LD_ADDR_OWVAR 38
17874: PUSH
17875: LD_INT 1
17877: PUSH
17878: LD_INT 3
17880: PUSH
17881: EMPTY
17882: LIST
17883: LIST
17884: PUSH
17885: LD_INT 1
17887: PPUSH
17888: LD_INT 2
17890: PPUSH
17891: CALL_OW 12
17895: ARRAY
17896: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_siberium_rocket , ru_rocket ] [ rand ( 1 , 6 ) ] ;
17897: LD_ADDR_OWVAR 40
17901: PUSH
17902: LD_INT 42
17904: PUSH
17905: LD_INT 43
17907: PUSH
17908: LD_INT 44
17910: PUSH
17911: LD_INT 46
17913: PUSH
17914: LD_INT 48
17916: PUSH
17917: LD_INT 47
17919: PUSH
17920: EMPTY
17921: LIST
17922: LIST
17923: LIST
17924: LIST
17925: LIST
17926: LIST
17927: PUSH
17928: LD_INT 1
17930: PPUSH
17931: LD_INT 6
17933: PPUSH
17934: CALL_OW 12
17938: ARRAY
17939: ST_TO_ADDR
// end ; end ;
17940: GO 17943
17942: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
17943: CALL_OW 45
17947: PPUSH
17948: LD_INT 1
17950: PPUSH
17951: CALL_OW 51
// end ;
17955: LD_VAR 0 1
17959: RET
// export hInvincible ; every 1 do
17960: GO 17962
17962: DISABLE
// hInvincible := [ ] ;
17963: LD_ADDR_EXP 78
17967: PUSH
17968: EMPTY
17969: ST_TO_ADDR
17970: END
// every 10 do var i ;
17971: GO 17973
17973: DISABLE
17974: LD_INT 0
17976: PPUSH
// begin enable ;
17977: ENABLE
// if not hInvincible then
17978: LD_EXP 78
17982: NOT
17983: IFFALSE 17987
// exit ;
17985: GO 18031
// for i in hInvincible do
17987: LD_ADDR_VAR 0 1
17991: PUSH
17992: LD_EXP 78
17996: PUSH
17997: FOR_IN
17998: IFFALSE 18029
// if GetLives ( i ) < 1000 then
18000: LD_VAR 0 1
18004: PPUSH
18005: CALL_OW 256
18009: PUSH
18010: LD_INT 1000
18012: LESS
18013: IFFALSE 18027
// SetLives ( i , 1000 ) ;
18015: LD_VAR 0 1
18019: PPUSH
18020: LD_INT 1000
18022: PPUSH
18023: CALL_OW 234
18027: GO 17997
18029: POP
18030: POP
// end ;
18031: PPOPN 1
18033: END
// export function hHackInvincible ; var i ; begin
18034: LD_INT 0
18036: PPUSH
18037: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
18038: LD_ADDR_VAR 0 2
18042: PUSH
18043: LD_INT 2
18045: PUSH
18046: LD_INT 21
18048: PUSH
18049: LD_INT 1
18051: PUSH
18052: EMPTY
18053: LIST
18054: LIST
18055: PUSH
18056: LD_INT 21
18058: PUSH
18059: LD_INT 2
18061: PUSH
18062: EMPTY
18063: LIST
18064: LIST
18065: PUSH
18066: EMPTY
18067: LIST
18068: LIST
18069: LIST
18070: PPUSH
18071: CALL_OW 69
18075: PUSH
18076: FOR_IN
18077: IFFALSE 18138
// if IsSelected ( i ) then
18079: LD_VAR 0 2
18083: PPUSH
18084: CALL_OW 306
18088: IFFALSE 18136
// begin if i in hInvincible then
18090: LD_VAR 0 2
18094: PUSH
18095: LD_EXP 78
18099: IN
18100: IFFALSE 18120
// hInvincible := hInvincible diff i else
18102: LD_ADDR_EXP 78
18106: PUSH
18107: LD_EXP 78
18111: PUSH
18112: LD_VAR 0 2
18116: DIFF
18117: ST_TO_ADDR
18118: GO 18136
// hInvincible := hInvincible union i ;
18120: LD_ADDR_EXP 78
18124: PUSH
18125: LD_EXP 78
18129: PUSH
18130: LD_VAR 0 2
18134: UNION
18135: ST_TO_ADDR
// end ;
18136: GO 18076
18138: POP
18139: POP
// end ;
18140: LD_VAR 0 1
18144: RET
// export function hHackInvisible ; var i , j ; begin
18145: LD_INT 0
18147: PPUSH
18148: PPUSH
18149: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18150: LD_ADDR_VAR 0 2
18154: PUSH
18155: LD_INT 21
18157: PUSH
18158: LD_INT 1
18160: PUSH
18161: EMPTY
18162: LIST
18163: LIST
18164: PPUSH
18165: CALL_OW 69
18169: PUSH
18170: FOR_IN
18171: IFFALSE 18195
// if IsSelected ( i ) then
18173: LD_VAR 0 2
18177: PPUSH
18178: CALL_OW 306
18182: IFFALSE 18193
// ComForceInvisible ( i ) ;
18184: LD_VAR 0 2
18188: PPUSH
18189: CALL_OW 496
18193: GO 18170
18195: POP
18196: POP
// end ;
18197: LD_VAR 0 1
18201: RET
// export function hHackChangeYourSide ; begin
18202: LD_INT 0
18204: PPUSH
// if your_side = 8 then
18205: LD_OWVAR 2
18209: PUSH
18210: LD_INT 8
18212: EQUAL
18213: IFFALSE 18225
// your_side := 0 else
18215: LD_ADDR_OWVAR 2
18219: PUSH
18220: LD_INT 0
18222: ST_TO_ADDR
18223: GO 18239
// your_side := your_side + 1 ;
18225: LD_ADDR_OWVAR 2
18229: PUSH
18230: LD_OWVAR 2
18234: PUSH
18235: LD_INT 1
18237: PLUS
18238: ST_TO_ADDR
// end ;
18239: LD_VAR 0 1
18243: RET
// export function hHackChangeUnitSide ; var i , j ; begin
18244: LD_INT 0
18246: PPUSH
18247: PPUSH
18248: PPUSH
// for i in all_units do
18249: LD_ADDR_VAR 0 2
18253: PUSH
18254: LD_OWVAR 3
18258: PUSH
18259: FOR_IN
18260: IFFALSE 18338
// if IsSelected ( i ) then
18262: LD_VAR 0 2
18266: PPUSH
18267: CALL_OW 306
18271: IFFALSE 18336
// begin j := GetSide ( i ) ;
18273: LD_ADDR_VAR 0 3
18277: PUSH
18278: LD_VAR 0 2
18282: PPUSH
18283: CALL_OW 255
18287: ST_TO_ADDR
// if j = 8 then
18288: LD_VAR 0 3
18292: PUSH
18293: LD_INT 8
18295: EQUAL
18296: IFFALSE 18308
// j := 0 else
18298: LD_ADDR_VAR 0 3
18302: PUSH
18303: LD_INT 0
18305: ST_TO_ADDR
18306: GO 18322
// j := j + 1 ;
18308: LD_ADDR_VAR 0 3
18312: PUSH
18313: LD_VAR 0 3
18317: PUSH
18318: LD_INT 1
18320: PLUS
18321: ST_TO_ADDR
// SetSide ( i , j ) ;
18322: LD_VAR 0 2
18326: PPUSH
18327: LD_VAR 0 3
18331: PPUSH
18332: CALL_OW 235
// end ;
18336: GO 18259
18338: POP
18339: POP
// end ;
18340: LD_VAR 0 1
18344: RET
// export function hHackFog ; begin
18345: LD_INT 0
18347: PPUSH
// FogOff ( true ) ;
18348: LD_INT 1
18350: PPUSH
18351: CALL_OW 344
// end ;
18355: LD_VAR 0 1
18359: RET
// export function hHackApeman ; begin
18360: LD_INT 0
18362: PPUSH
// uc_side := your_side ;
18363: LD_ADDR_OWVAR 20
18367: PUSH
18368: LD_OWVAR 2
18372: ST_TO_ADDR
// uc_nation := 0 ;
18373: LD_ADDR_OWVAR 21
18377: PUSH
18378: LD_INT 0
18380: ST_TO_ADDR
// hc_name :=  ;
18381: LD_ADDR_OWVAR 26
18385: PUSH
18386: LD_STRING 
18388: ST_TO_ADDR
// hc_gallery :=  ;
18389: LD_ADDR_OWVAR 33
18393: PUSH
18394: LD_STRING 
18396: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
18397: LD_ADDR_OWVAR 31
18401: PUSH
18402: LD_INT 0
18404: PUSH
18405: LD_INT 0
18407: PUSH
18408: LD_INT 0
18410: PUSH
18411: LD_INT 0
18413: PUSH
18414: EMPTY
18415: LIST
18416: LIST
18417: LIST
18418: LIST
18419: ST_TO_ADDR
// hc_class := class_apeman ;
18420: LD_ADDR_OWVAR 28
18424: PUSH
18425: LD_INT 12
18427: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
18428: CALL_OW 44
18432: PPUSH
18433: LD_INT 1
18435: PPUSH
18436: CALL_OW 51
// end ;
18440: LD_VAR 0 1
18444: RET
// export function hHackBoom ; begin
18445: LD_INT 0
18447: PPUSH
// uc_side := your_side ;
18448: LD_ADDR_OWVAR 20
18452: PUSH
18453: LD_OWVAR 2
18457: ST_TO_ADDR
// uc_nation := 1 ;
18458: LD_ADDR_OWVAR 21
18462: PUSH
18463: LD_INT 1
18465: ST_TO_ADDR
// vc_chassis := us_morphling ;
18466: LD_ADDR_OWVAR 37
18470: PUSH
18471: LD_INT 5
18473: ST_TO_ADDR
// vc_engine := engine_siberite ;
18474: LD_ADDR_OWVAR 39
18478: PUSH
18479: LD_INT 3
18481: ST_TO_ADDR
// vc_control := control_computer ;
18482: LD_ADDR_OWVAR 38
18486: PUSH
18487: LD_INT 3
18489: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
18490: LD_ADDR_OWVAR 40
18494: PUSH
18495: LD_INT 8
18497: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
18498: CALL_OW 45
18502: PPUSH
18503: LD_INT 1
18505: PPUSH
18506: CALL_OW 51
// end ; end_of_file
18510: LD_VAR 0 1
18514: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
18515: LD_INT 0
18517: PPUSH
18518: PPUSH
18519: PPUSH
18520: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
18521: LD_VAR 0 1
18525: PPUSH
18526: CALL_OW 264
18530: PUSH
18531: LD_EXP 89
18535: EQUAL
18536: IFFALSE 18608
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
18538: LD_INT 68
18540: PPUSH
18541: LD_VAR 0 1
18545: PPUSH
18546: CALL_OW 255
18550: PPUSH
18551: CALL_OW 321
18555: PUSH
18556: LD_INT 2
18558: EQUAL
18559: IFFALSE 18571
// eff := 70 else
18561: LD_ADDR_VAR 0 4
18565: PUSH
18566: LD_INT 70
18568: ST_TO_ADDR
18569: GO 18579
// eff := 30 ;
18571: LD_ADDR_VAR 0 4
18575: PUSH
18576: LD_INT 30
18578: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
18579: LD_VAR 0 1
18583: PPUSH
18584: CALL_OW 250
18588: PPUSH
18589: LD_VAR 0 1
18593: PPUSH
18594: CALL_OW 251
18598: PPUSH
18599: LD_VAR 0 4
18603: PPUSH
18604: CALL_OW 495
// end ; end ;
18608: LD_VAR 0 2
18612: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
18613: LD_INT 0
18615: PPUSH
// end ;
18616: LD_VAR 0 4
18620: RET
// export function SOS_Command ( cmd ) ; begin
18621: LD_INT 0
18623: PPUSH
// end ;
18624: LD_VAR 0 2
18628: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
18629: LD_INT 0
18631: PPUSH
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
18632: LD_VAR 0 1
18636: PUSH
18637: LD_INT 254
18639: EQUAL
18640: PUSH
18641: LD_VAR 0 2
18645: PPUSH
18646: CALL_OW 264
18650: PUSH
18651: LD_EXP 87
18655: EQUAL
18656: AND
18657: PUSH
18658: LD_VAR 0 3
18662: PPUSH
18663: CALL_OW 263
18667: PUSH
18668: LD_INT 3
18670: EQUAL
18671: AND
18672: IFFALSE 18688
// HackDestroyVehicle ( unit , selectedUnit ) ;
18674: LD_VAR 0 2
18678: PPUSH
18679: LD_VAR 0 3
18683: PPUSH
18684: CALL 20197 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
18688: LD_VAR 0 1
18692: PUSH
18693: LD_INT 255
18695: EQUAL
18696: PUSH
18697: LD_VAR 0 2
18701: PPUSH
18702: CALL_OW 264
18706: PUSH
18707: LD_INT 14
18709: PUSH
18710: LD_INT 53
18712: PUSH
18713: EMPTY
18714: LIST
18715: LIST
18716: IN
18717: AND
18718: PUSH
18719: LD_VAR 0 4
18723: PPUSH
18724: LD_VAR 0 5
18728: PPUSH
18729: CALL_OW 488
18733: AND
18734: IFFALSE 18758
// CutTreeXYR ( unit , x , y , 12 ) ;
18736: LD_VAR 0 2
18740: PPUSH
18741: LD_VAR 0 4
18745: PPUSH
18746: LD_VAR 0 5
18750: PPUSH
18751: LD_INT 12
18753: PPUSH
18754: CALL 18763 0 4
// end ;
18758: LD_VAR 0 6
18762: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
18763: LD_INT 0
18765: PPUSH
18766: PPUSH
18767: PPUSH
18768: PPUSH
18769: PPUSH
18770: PPUSH
18771: PPUSH
18772: PPUSH
18773: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
18774: LD_VAR 0 1
18778: NOT
18779: PUSH
18780: LD_VAR 0 2
18784: PPUSH
18785: LD_VAR 0 3
18789: PPUSH
18790: CALL_OW 488
18794: NOT
18795: OR
18796: PUSH
18797: LD_VAR 0 4
18801: NOT
18802: OR
18803: IFFALSE 18807
// exit ;
18805: GO 19147
// list := [ ] ;
18807: LD_ADDR_VAR 0 13
18811: PUSH
18812: EMPTY
18813: ST_TO_ADDR
// if x - r < 0 then
18814: LD_VAR 0 2
18818: PUSH
18819: LD_VAR 0 4
18823: MINUS
18824: PUSH
18825: LD_INT 0
18827: LESS
18828: IFFALSE 18840
// min_x := 0 else
18830: LD_ADDR_VAR 0 7
18834: PUSH
18835: LD_INT 0
18837: ST_TO_ADDR
18838: GO 18856
// min_x := x - r ;
18840: LD_ADDR_VAR 0 7
18844: PUSH
18845: LD_VAR 0 2
18849: PUSH
18850: LD_VAR 0 4
18854: MINUS
18855: ST_TO_ADDR
// if y - r < 0 then
18856: LD_VAR 0 3
18860: PUSH
18861: LD_VAR 0 4
18865: MINUS
18866: PUSH
18867: LD_INT 0
18869: LESS
18870: IFFALSE 18882
// min_y := 0 else
18872: LD_ADDR_VAR 0 8
18876: PUSH
18877: LD_INT 0
18879: ST_TO_ADDR
18880: GO 18898
// min_y := y - r ;
18882: LD_ADDR_VAR 0 8
18886: PUSH
18887: LD_VAR 0 3
18891: PUSH
18892: LD_VAR 0 4
18896: MINUS
18897: ST_TO_ADDR
// max_x := x + r ;
18898: LD_ADDR_VAR 0 9
18902: PUSH
18903: LD_VAR 0 2
18907: PUSH
18908: LD_VAR 0 4
18912: PLUS
18913: ST_TO_ADDR
// max_y := y + r ;
18914: LD_ADDR_VAR 0 10
18918: PUSH
18919: LD_VAR 0 3
18923: PUSH
18924: LD_VAR 0 4
18928: PLUS
18929: ST_TO_ADDR
// for _x = min_x to max_x do
18930: LD_ADDR_VAR 0 11
18934: PUSH
18935: DOUBLE
18936: LD_VAR 0 7
18940: DEC
18941: ST_TO_ADDR
18942: LD_VAR 0 9
18946: PUSH
18947: FOR_TO
18948: IFFALSE 19065
// for _y = min_y to max_y do
18950: LD_ADDR_VAR 0 12
18954: PUSH
18955: DOUBLE
18956: LD_VAR 0 8
18960: DEC
18961: ST_TO_ADDR
18962: LD_VAR 0 10
18966: PUSH
18967: FOR_TO
18968: IFFALSE 19061
// begin if not ValidHex ( _x , _y ) then
18970: LD_VAR 0 11
18974: PPUSH
18975: LD_VAR 0 12
18979: PPUSH
18980: CALL_OW 488
18984: NOT
18985: IFFALSE 18989
// continue ;
18987: GO 18967
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
18989: LD_VAR 0 11
18993: PPUSH
18994: LD_VAR 0 12
18998: PPUSH
18999: CALL_OW 351
19003: PUSH
19004: LD_VAR 0 11
19008: PPUSH
19009: LD_VAR 0 12
19013: PPUSH
19014: CALL_OW 554
19018: AND
19019: IFFALSE 19059
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
19021: LD_ADDR_VAR 0 13
19025: PUSH
19026: LD_VAR 0 13
19030: PPUSH
19031: LD_VAR 0 13
19035: PUSH
19036: LD_INT 1
19038: PLUS
19039: PPUSH
19040: LD_VAR 0 11
19044: PUSH
19045: LD_VAR 0 12
19049: PUSH
19050: EMPTY
19051: LIST
19052: LIST
19053: PPUSH
19054: CALL_OW 2
19058: ST_TO_ADDR
// end ;
19059: GO 18967
19061: POP
19062: POP
19063: GO 18947
19065: POP
19066: POP
// if not list then
19067: LD_VAR 0 13
19071: NOT
19072: IFFALSE 19076
// exit ;
19074: GO 19147
// for i in list do
19076: LD_ADDR_VAR 0 6
19080: PUSH
19081: LD_VAR 0 13
19085: PUSH
19086: FOR_IN
19087: IFFALSE 19145
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
19089: LD_VAR 0 1
19093: PPUSH
19094: LD_STRING M
19096: PUSH
19097: LD_VAR 0 6
19101: PUSH
19102: LD_INT 1
19104: ARRAY
19105: PUSH
19106: LD_VAR 0 6
19110: PUSH
19111: LD_INT 2
19113: ARRAY
19114: PUSH
19115: LD_INT 0
19117: PUSH
19118: LD_INT 0
19120: PUSH
19121: LD_INT 0
19123: PUSH
19124: LD_INT 0
19126: PUSH
19127: EMPTY
19128: LIST
19129: LIST
19130: LIST
19131: LIST
19132: LIST
19133: LIST
19134: LIST
19135: PUSH
19136: EMPTY
19137: LIST
19138: PPUSH
19139: CALL_OW 447
19143: GO 19086
19145: POP
19146: POP
// end ;
19147: LD_VAR 0 5
19151: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
19152: LD_EXP 79
19156: NOT
19157: IFFALSE 19207
19159: GO 19161
19161: DISABLE
// begin initHack := true ;
19162: LD_ADDR_EXP 79
19166: PUSH
19167: LD_INT 1
19169: ST_TO_ADDR
// hackTanks := [ ] ;
19170: LD_ADDR_EXP 80
19174: PUSH
19175: EMPTY
19176: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
19177: LD_ADDR_EXP 81
19181: PUSH
19182: EMPTY
19183: ST_TO_ADDR
// hackLimit := 3 ;
19184: LD_ADDR_EXP 82
19188: PUSH
19189: LD_INT 3
19191: ST_TO_ADDR
// hackDist := 12 ;
19192: LD_ADDR_EXP 83
19196: PUSH
19197: LD_INT 12
19199: ST_TO_ADDR
// hackCounter := [ ] ;
19200: LD_ADDR_EXP 84
19204: PUSH
19205: EMPTY
19206: ST_TO_ADDR
// end ;
19207: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
19208: LD_EXP 79
19212: PUSH
19213: LD_INT 34
19215: PUSH
19216: LD_EXP 87
19220: PUSH
19221: EMPTY
19222: LIST
19223: LIST
19224: PPUSH
19225: CALL_OW 69
19229: AND
19230: IFFALSE 19485
19232: GO 19234
19234: DISABLE
19235: LD_INT 0
19237: PPUSH
19238: PPUSH
// begin enable ;
19239: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
19240: LD_ADDR_VAR 0 1
19244: PUSH
19245: LD_INT 34
19247: PUSH
19248: LD_EXP 87
19252: PUSH
19253: EMPTY
19254: LIST
19255: LIST
19256: PPUSH
19257: CALL_OW 69
19261: PUSH
19262: FOR_IN
19263: IFFALSE 19483
// begin if not i in hackTanks then
19265: LD_VAR 0 1
19269: PUSH
19270: LD_EXP 80
19274: IN
19275: NOT
19276: IFFALSE 19359
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
19278: LD_ADDR_EXP 80
19282: PUSH
19283: LD_EXP 80
19287: PPUSH
19288: LD_EXP 80
19292: PUSH
19293: LD_INT 1
19295: PLUS
19296: PPUSH
19297: LD_VAR 0 1
19301: PPUSH
19302: CALL_OW 1
19306: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
19307: LD_ADDR_EXP 81
19311: PUSH
19312: LD_EXP 81
19316: PPUSH
19317: LD_EXP 81
19321: PUSH
19322: LD_INT 1
19324: PLUS
19325: PPUSH
19326: EMPTY
19327: PPUSH
19328: CALL_OW 1
19332: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
19333: LD_ADDR_EXP 84
19337: PUSH
19338: LD_EXP 84
19342: PPUSH
19343: LD_EXP 84
19347: PUSH
19348: LD_INT 1
19350: PLUS
19351: PPUSH
19352: EMPTY
19353: PPUSH
19354: CALL_OW 1
19358: ST_TO_ADDR
// end ; if not IsOk ( i ) then
19359: LD_VAR 0 1
19363: PPUSH
19364: CALL_OW 302
19368: NOT
19369: IFFALSE 19382
// begin HackUnlinkAll ( i ) ;
19371: LD_VAR 0 1
19375: PPUSH
19376: CALL 19488 0 1
// continue ;
19380: GO 19262
// end ; HackCheckCapturedStatus ( i ) ;
19382: LD_VAR 0 1
19386: PPUSH
19387: CALL 19931 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
19391: LD_ADDR_VAR 0 2
19395: PUSH
19396: LD_INT 81
19398: PUSH
19399: LD_VAR 0 1
19403: PPUSH
19404: CALL_OW 255
19408: PUSH
19409: EMPTY
19410: LIST
19411: LIST
19412: PUSH
19413: LD_INT 33
19415: PUSH
19416: LD_INT 3
19418: PUSH
19419: EMPTY
19420: LIST
19421: LIST
19422: PUSH
19423: LD_INT 91
19425: PUSH
19426: LD_VAR 0 1
19430: PUSH
19431: LD_EXP 83
19435: PUSH
19436: EMPTY
19437: LIST
19438: LIST
19439: LIST
19440: PUSH
19441: LD_INT 50
19443: PUSH
19444: EMPTY
19445: LIST
19446: PUSH
19447: EMPTY
19448: LIST
19449: LIST
19450: LIST
19451: LIST
19452: PPUSH
19453: CALL_OW 69
19457: ST_TO_ADDR
// if not tmp then
19458: LD_VAR 0 2
19462: NOT
19463: IFFALSE 19467
// continue ;
19465: GO 19262
// HackLink ( i , tmp ) ;
19467: LD_VAR 0 1
19471: PPUSH
19472: LD_VAR 0 2
19476: PPUSH
19477: CALL 19624 0 2
// end ;
19481: GO 19262
19483: POP
19484: POP
// end ;
19485: PPOPN 2
19487: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
19488: LD_INT 0
19490: PPUSH
19491: PPUSH
19492: PPUSH
// if not hack in hackTanks then
19493: LD_VAR 0 1
19497: PUSH
19498: LD_EXP 80
19502: IN
19503: NOT
19504: IFFALSE 19508
// exit ;
19506: GO 19619
// index := GetElementIndex ( hackTanks , hack ) ;
19508: LD_ADDR_VAR 0 4
19512: PUSH
19513: LD_EXP 80
19517: PPUSH
19518: LD_VAR 0 1
19522: PPUSH
19523: CALL 25175 0 2
19527: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
19528: LD_EXP 81
19532: PUSH
19533: LD_VAR 0 4
19537: ARRAY
19538: IFFALSE 19619
// begin for i in hackTanksCaptured [ index ] do
19540: LD_ADDR_VAR 0 3
19544: PUSH
19545: LD_EXP 81
19549: PUSH
19550: LD_VAR 0 4
19554: ARRAY
19555: PUSH
19556: FOR_IN
19557: IFFALSE 19583
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
19559: LD_VAR 0 3
19563: PUSH
19564: LD_INT 1
19566: ARRAY
19567: PPUSH
19568: LD_VAR 0 3
19572: PUSH
19573: LD_INT 2
19575: ARRAY
19576: PPUSH
19577: CALL_OW 235
19581: GO 19556
19583: POP
19584: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
19585: LD_ADDR_EXP 81
19589: PUSH
19590: LD_EXP 81
19594: PPUSH
19595: LD_VAR 0 4
19599: PPUSH
19600: EMPTY
19601: PPUSH
19602: CALL_OW 1
19606: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
19607: LD_VAR 0 1
19611: PPUSH
19612: LD_INT 0
19614: PPUSH
19615: CALL_OW 505
// end ; end ;
19619: LD_VAR 0 2
19623: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
19624: LD_INT 0
19626: PPUSH
19627: PPUSH
19628: PPUSH
// if not hack in hackTanks or not vehicles then
19629: LD_VAR 0 1
19633: PUSH
19634: LD_EXP 80
19638: IN
19639: NOT
19640: PUSH
19641: LD_VAR 0 2
19645: NOT
19646: OR
19647: IFFALSE 19651
// exit ;
19649: GO 19926
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
19651: LD_ADDR_VAR 0 2
19655: PUSH
19656: LD_VAR 0 1
19660: PPUSH
19661: LD_VAR 0 2
19665: PPUSH
19666: LD_INT 1
19668: PPUSH
19669: LD_INT 1
19671: PPUSH
19672: CALL 25825 0 4
19676: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
19677: LD_ADDR_VAR 0 5
19681: PUSH
19682: LD_EXP 80
19686: PPUSH
19687: LD_VAR 0 1
19691: PPUSH
19692: CALL 25175 0 2
19696: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
19697: LD_EXP 81
19701: PUSH
19702: LD_VAR 0 5
19706: ARRAY
19707: PUSH
19708: LD_EXP 82
19712: LESS
19713: IFFALSE 19902
// begin for i := 1 to vehicles do
19715: LD_ADDR_VAR 0 4
19719: PUSH
19720: DOUBLE
19721: LD_INT 1
19723: DEC
19724: ST_TO_ADDR
19725: LD_VAR 0 2
19729: PUSH
19730: FOR_TO
19731: IFFALSE 19900
// begin if hackTanksCaptured [ index ] = hackLimit then
19733: LD_EXP 81
19737: PUSH
19738: LD_VAR 0 5
19742: ARRAY
19743: PUSH
19744: LD_EXP 82
19748: EQUAL
19749: IFFALSE 19753
// break ;
19751: GO 19900
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
19753: LD_ADDR_EXP 84
19757: PUSH
19758: LD_EXP 84
19762: PPUSH
19763: LD_VAR 0 5
19767: PPUSH
19768: LD_EXP 84
19772: PUSH
19773: LD_VAR 0 5
19777: ARRAY
19778: PUSH
19779: LD_INT 1
19781: PLUS
19782: PPUSH
19783: CALL_OW 1
19787: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
19788: LD_ADDR_EXP 81
19792: PUSH
19793: LD_EXP 81
19797: PPUSH
19798: LD_VAR 0 5
19802: PUSH
19803: LD_EXP 81
19807: PUSH
19808: LD_VAR 0 5
19812: ARRAY
19813: PUSH
19814: LD_INT 1
19816: PLUS
19817: PUSH
19818: EMPTY
19819: LIST
19820: LIST
19821: PPUSH
19822: LD_VAR 0 2
19826: PUSH
19827: LD_VAR 0 4
19831: ARRAY
19832: PUSH
19833: LD_VAR 0 2
19837: PUSH
19838: LD_VAR 0 4
19842: ARRAY
19843: PPUSH
19844: CALL_OW 255
19848: PUSH
19849: EMPTY
19850: LIST
19851: LIST
19852: PPUSH
19853: CALL 25390 0 3
19857: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
19858: LD_VAR 0 2
19862: PUSH
19863: LD_VAR 0 4
19867: ARRAY
19868: PPUSH
19869: LD_VAR 0 1
19873: PPUSH
19874: CALL_OW 255
19878: PPUSH
19879: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
19883: LD_VAR 0 2
19887: PUSH
19888: LD_VAR 0 4
19892: ARRAY
19893: PPUSH
19894: CALL_OW 141
// end ;
19898: GO 19730
19900: POP
19901: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19902: LD_VAR 0 1
19906: PPUSH
19907: LD_EXP 81
19911: PUSH
19912: LD_VAR 0 5
19916: ARRAY
19917: PUSH
19918: LD_INT 0
19920: PLUS
19921: PPUSH
19922: CALL_OW 505
// end ;
19926: LD_VAR 0 3
19930: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
19931: LD_INT 0
19933: PPUSH
19934: PPUSH
19935: PPUSH
19936: PPUSH
// if not hack in hackTanks then
19937: LD_VAR 0 1
19941: PUSH
19942: LD_EXP 80
19946: IN
19947: NOT
19948: IFFALSE 19952
// exit ;
19950: GO 20192
// index := GetElementIndex ( hackTanks , hack ) ;
19952: LD_ADDR_VAR 0 4
19956: PUSH
19957: LD_EXP 80
19961: PPUSH
19962: LD_VAR 0 1
19966: PPUSH
19967: CALL 25175 0 2
19971: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
19972: LD_ADDR_VAR 0 3
19976: PUSH
19977: DOUBLE
19978: LD_EXP 81
19982: PUSH
19983: LD_VAR 0 4
19987: ARRAY
19988: INC
19989: ST_TO_ADDR
19990: LD_INT 1
19992: PUSH
19993: FOR_DOWNTO
19994: IFFALSE 20166
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
19996: LD_ADDR_VAR 0 5
20000: PUSH
20001: LD_EXP 81
20005: PUSH
20006: LD_VAR 0 4
20010: ARRAY
20011: PUSH
20012: LD_VAR 0 3
20016: ARRAY
20017: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
20018: LD_VAR 0 5
20022: PUSH
20023: LD_INT 1
20025: ARRAY
20026: PPUSH
20027: CALL_OW 302
20031: NOT
20032: PUSH
20033: LD_VAR 0 5
20037: PUSH
20038: LD_INT 1
20040: ARRAY
20041: PPUSH
20042: CALL_OW 255
20046: PUSH
20047: LD_VAR 0 1
20051: PPUSH
20052: CALL_OW 255
20056: NONEQUAL
20057: OR
20058: IFFALSE 20164
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
20060: LD_VAR 0 5
20064: PUSH
20065: LD_INT 1
20067: ARRAY
20068: PPUSH
20069: CALL_OW 305
20073: PUSH
20074: LD_VAR 0 5
20078: PUSH
20079: LD_INT 1
20081: ARRAY
20082: PPUSH
20083: CALL_OW 255
20087: PUSH
20088: LD_VAR 0 1
20092: PPUSH
20093: CALL_OW 255
20097: EQUAL
20098: AND
20099: IFFALSE 20123
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
20101: LD_VAR 0 5
20105: PUSH
20106: LD_INT 1
20108: ARRAY
20109: PPUSH
20110: LD_VAR 0 5
20114: PUSH
20115: LD_INT 2
20117: ARRAY
20118: PPUSH
20119: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
20123: LD_ADDR_EXP 81
20127: PUSH
20128: LD_EXP 81
20132: PPUSH
20133: LD_VAR 0 4
20137: PPUSH
20138: LD_EXP 81
20142: PUSH
20143: LD_VAR 0 4
20147: ARRAY
20148: PPUSH
20149: LD_VAR 0 3
20153: PPUSH
20154: CALL_OW 3
20158: PPUSH
20159: CALL_OW 1
20163: ST_TO_ADDR
// end ; end ;
20164: GO 19993
20166: POP
20167: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
20168: LD_VAR 0 1
20172: PPUSH
20173: LD_EXP 81
20177: PUSH
20178: LD_VAR 0 4
20182: ARRAY
20183: PUSH
20184: LD_INT 0
20186: PLUS
20187: PPUSH
20188: CALL_OW 505
// end ;
20192: LD_VAR 0 2
20196: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
20197: LD_INT 0
20199: PPUSH
20200: PPUSH
20201: PPUSH
20202: PPUSH
// if not hack in hackTanks then
20203: LD_VAR 0 1
20207: PUSH
20208: LD_EXP 80
20212: IN
20213: NOT
20214: IFFALSE 20218
// exit ;
20216: GO 20303
// index := GetElementIndex ( hackTanks , hack ) ;
20218: LD_ADDR_VAR 0 5
20222: PUSH
20223: LD_EXP 80
20227: PPUSH
20228: LD_VAR 0 1
20232: PPUSH
20233: CALL 25175 0 2
20237: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
20238: LD_ADDR_VAR 0 4
20242: PUSH
20243: DOUBLE
20244: LD_INT 1
20246: DEC
20247: ST_TO_ADDR
20248: LD_EXP 81
20252: PUSH
20253: LD_VAR 0 5
20257: ARRAY
20258: PUSH
20259: FOR_TO
20260: IFFALSE 20301
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
20262: LD_EXP 81
20266: PUSH
20267: LD_VAR 0 5
20271: ARRAY
20272: PUSH
20273: LD_VAR 0 4
20277: ARRAY
20278: PUSH
20279: LD_INT 1
20281: ARRAY
20282: PUSH
20283: LD_VAR 0 2
20287: EQUAL
20288: IFFALSE 20299
// KillUnit ( vehicle ) ;
20290: LD_VAR 0 2
20294: PPUSH
20295: CALL_OW 66
20299: GO 20259
20301: POP
20302: POP
// end ; end_of_file
20303: LD_VAR 0 3
20307: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
20308: LD_INT 0
20310: PPUSH
// ar_crane := 88 ;
20311: LD_ADDR_EXP 91
20315: PUSH
20316: LD_INT 88
20318: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
20319: LD_ADDR_EXP 86
20323: PUSH
20324: LD_INT 89
20326: ST_TO_ADDR
// us_hack := 99 ;
20327: LD_ADDR_EXP 87
20331: PUSH
20332: LD_INT 99
20334: ST_TO_ADDR
// us_artillery := 97 ;
20335: LD_ADDR_EXP 88
20339: PUSH
20340: LD_INT 97
20342: ST_TO_ADDR
// ar_bio_bomb := 91 ;
20343: LD_ADDR_EXP 89
20347: PUSH
20348: LD_INT 91
20350: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
20351: LD_ADDR_EXP 90
20355: PUSH
20356: LD_INT 92
20358: ST_TO_ADDR
// ru_radar := 98 ;
20359: LD_ADDR_EXP 85
20363: PUSH
20364: LD_INT 98
20366: ST_TO_ADDR
// tech_Artillery := 80 ;
20367: LD_ADDR_EXP 92
20371: PUSH
20372: LD_INT 80
20374: ST_TO_ADDR
// tech_RadMat := 81 ;
20375: LD_ADDR_EXP 93
20379: PUSH
20380: LD_INT 81
20382: ST_TO_ADDR
// tech_BasicTools := 82 ;
20383: LD_ADDR_EXP 94
20387: PUSH
20388: LD_INT 82
20390: ST_TO_ADDR
// tech_Cargo := 83 ;
20391: LD_ADDR_EXP 95
20395: PUSH
20396: LD_INT 83
20398: ST_TO_ADDR
// tech_Track := 84 ;
20399: LD_ADDR_EXP 96
20403: PUSH
20404: LD_INT 84
20406: ST_TO_ADDR
// tech_Crane := 85 ;
20407: LD_ADDR_EXP 97
20411: PUSH
20412: LD_INT 85
20414: ST_TO_ADDR
// tech_Bulldozer := 86 ;
20415: LD_ADDR_EXP 98
20419: PUSH
20420: LD_INT 86
20422: ST_TO_ADDR
// tech_Hovercraft := 87 ;
20423: LD_ADDR_EXP 99
20427: PUSH
20428: LD_INT 87
20430: ST_TO_ADDR
// end ;
20431: LD_VAR 0 1
20435: RET
// every 1 do
20436: GO 20438
20438: DISABLE
// InitGlobalVariables ; end_of_file
20439: CALL 20308 0 0
20443: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
20444: LD_INT 0
20446: PPUSH
20447: PPUSH
// if exist_mode then
20448: LD_VAR 0 2
20452: IFFALSE 20477
// unit := CreateCharacter ( prefix & ident ) else
20454: LD_ADDR_VAR 0 5
20458: PUSH
20459: LD_VAR 0 3
20463: PUSH
20464: LD_VAR 0 1
20468: STR
20469: PPUSH
20470: CALL_OW 34
20474: ST_TO_ADDR
20475: GO 20492
// unit := NewCharacter ( ident ) ;
20477: LD_ADDR_VAR 0 5
20481: PUSH
20482: LD_VAR 0 1
20486: PPUSH
20487: CALL_OW 25
20491: ST_TO_ADDR
// result := unit ;
20492: LD_ADDR_VAR 0 4
20496: PUSH
20497: LD_VAR 0 5
20501: ST_TO_ADDR
// end ;
20502: LD_VAR 0 4
20506: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
20507: LD_INT 0
20509: PPUSH
20510: PPUSH
// if not side or not nation then
20511: LD_VAR 0 1
20515: NOT
20516: PUSH
20517: LD_VAR 0 2
20521: NOT
20522: OR
20523: IFFALSE 20527
// exit ;
20525: GO 21291
// case nation of nation_american :
20527: LD_VAR 0 2
20531: PUSH
20532: LD_INT 1
20534: DOUBLE
20535: EQUAL
20536: IFTRUE 20540
20538: GO 20754
20540: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
20541: LD_ADDR_VAR 0 4
20545: PUSH
20546: LD_INT 35
20548: PUSH
20549: LD_INT 45
20551: PUSH
20552: LD_INT 46
20554: PUSH
20555: LD_INT 47
20557: PUSH
20558: LD_INT 82
20560: PUSH
20561: LD_INT 83
20563: PUSH
20564: LD_INT 84
20566: PUSH
20567: LD_INT 85
20569: PUSH
20570: LD_INT 86
20572: PUSH
20573: LD_INT 1
20575: PUSH
20576: LD_INT 2
20578: PUSH
20579: LD_INT 6
20581: PUSH
20582: LD_INT 15
20584: PUSH
20585: LD_INT 16
20587: PUSH
20588: LD_INT 7
20590: PUSH
20591: LD_INT 12
20593: PUSH
20594: LD_INT 13
20596: PUSH
20597: LD_INT 10
20599: PUSH
20600: LD_INT 14
20602: PUSH
20603: LD_INT 20
20605: PUSH
20606: LD_INT 21
20608: PUSH
20609: LD_INT 22
20611: PUSH
20612: LD_INT 25
20614: PUSH
20615: LD_INT 32
20617: PUSH
20618: LD_INT 27
20620: PUSH
20621: LD_INT 36
20623: PUSH
20624: LD_INT 69
20626: PUSH
20627: LD_INT 39
20629: PUSH
20630: LD_INT 34
20632: PUSH
20633: LD_INT 40
20635: PUSH
20636: LD_INT 48
20638: PUSH
20639: LD_INT 49
20641: PUSH
20642: LD_INT 50
20644: PUSH
20645: LD_INT 51
20647: PUSH
20648: LD_INT 52
20650: PUSH
20651: LD_INT 53
20653: PUSH
20654: LD_INT 54
20656: PUSH
20657: LD_INT 55
20659: PUSH
20660: LD_INT 56
20662: PUSH
20663: LD_INT 57
20665: PUSH
20666: LD_INT 58
20668: PUSH
20669: LD_INT 59
20671: PUSH
20672: LD_INT 60
20674: PUSH
20675: LD_INT 61
20677: PUSH
20678: LD_INT 62
20680: PUSH
20681: LD_INT 80
20683: PUSH
20684: LD_INT 82
20686: PUSH
20687: LD_INT 83
20689: PUSH
20690: LD_INT 84
20692: PUSH
20693: LD_INT 85
20695: PUSH
20696: LD_INT 86
20698: PUSH
20699: EMPTY
20700: LIST
20701: LIST
20702: LIST
20703: LIST
20704: LIST
20705: LIST
20706: LIST
20707: LIST
20708: LIST
20709: LIST
20710: LIST
20711: LIST
20712: LIST
20713: LIST
20714: LIST
20715: LIST
20716: LIST
20717: LIST
20718: LIST
20719: LIST
20720: LIST
20721: LIST
20722: LIST
20723: LIST
20724: LIST
20725: LIST
20726: LIST
20727: LIST
20728: LIST
20729: LIST
20730: LIST
20731: LIST
20732: LIST
20733: LIST
20734: LIST
20735: LIST
20736: LIST
20737: LIST
20738: LIST
20739: LIST
20740: LIST
20741: LIST
20742: LIST
20743: LIST
20744: LIST
20745: LIST
20746: LIST
20747: LIST
20748: LIST
20749: LIST
20750: LIST
20751: ST_TO_ADDR
20752: GO 21215
20754: LD_INT 2
20756: DOUBLE
20757: EQUAL
20758: IFTRUE 20762
20760: GO 20984
20762: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
20763: LD_ADDR_VAR 0 4
20767: PUSH
20768: LD_INT 35
20770: PUSH
20771: LD_INT 45
20773: PUSH
20774: LD_INT 46
20776: PUSH
20777: LD_INT 47
20779: PUSH
20780: LD_INT 82
20782: PUSH
20783: LD_INT 83
20785: PUSH
20786: LD_INT 84
20788: PUSH
20789: LD_INT 85
20791: PUSH
20792: LD_INT 87
20794: PUSH
20795: LD_INT 70
20797: PUSH
20798: LD_INT 1
20800: PUSH
20801: LD_INT 11
20803: PUSH
20804: LD_INT 3
20806: PUSH
20807: LD_INT 4
20809: PUSH
20810: LD_INT 5
20812: PUSH
20813: LD_INT 6
20815: PUSH
20816: LD_INT 15
20818: PUSH
20819: LD_INT 18
20821: PUSH
20822: LD_INT 7
20824: PUSH
20825: LD_INT 17
20827: PUSH
20828: LD_INT 8
20830: PUSH
20831: LD_INT 20
20833: PUSH
20834: LD_INT 21
20836: PUSH
20837: LD_INT 22
20839: PUSH
20840: LD_INT 72
20842: PUSH
20843: LD_INT 26
20845: PUSH
20846: LD_INT 69
20848: PUSH
20849: LD_INT 39
20851: PUSH
20852: LD_INT 40
20854: PUSH
20855: LD_INT 41
20857: PUSH
20858: LD_INT 42
20860: PUSH
20861: LD_INT 43
20863: PUSH
20864: LD_INT 48
20866: PUSH
20867: LD_INT 49
20869: PUSH
20870: LD_INT 50
20872: PUSH
20873: LD_INT 51
20875: PUSH
20876: LD_INT 52
20878: PUSH
20879: LD_INT 53
20881: PUSH
20882: LD_INT 54
20884: PUSH
20885: LD_INT 55
20887: PUSH
20888: LD_INT 56
20890: PUSH
20891: LD_INT 60
20893: PUSH
20894: LD_INT 61
20896: PUSH
20897: LD_INT 62
20899: PUSH
20900: LD_INT 66
20902: PUSH
20903: LD_INT 67
20905: PUSH
20906: LD_INT 68
20908: PUSH
20909: LD_INT 81
20911: PUSH
20912: LD_INT 82
20914: PUSH
20915: LD_INT 83
20917: PUSH
20918: LD_INT 84
20920: PUSH
20921: LD_INT 85
20923: PUSH
20924: LD_INT 87
20926: PUSH
20927: EMPTY
20928: LIST
20929: LIST
20930: LIST
20931: LIST
20932: LIST
20933: LIST
20934: LIST
20935: LIST
20936: LIST
20937: LIST
20938: LIST
20939: LIST
20940: LIST
20941: LIST
20942: LIST
20943: LIST
20944: LIST
20945: LIST
20946: LIST
20947: LIST
20948: LIST
20949: LIST
20950: LIST
20951: LIST
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: LIST
20957: LIST
20958: LIST
20959: LIST
20960: LIST
20961: LIST
20962: LIST
20963: LIST
20964: LIST
20965: LIST
20966: LIST
20967: LIST
20968: LIST
20969: LIST
20970: LIST
20971: LIST
20972: LIST
20973: LIST
20974: LIST
20975: LIST
20976: LIST
20977: LIST
20978: LIST
20979: LIST
20980: LIST
20981: ST_TO_ADDR
20982: GO 21215
20984: LD_INT 3
20986: DOUBLE
20987: EQUAL
20988: IFTRUE 20992
20990: GO 21214
20992: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
20993: LD_ADDR_VAR 0 4
20997: PUSH
20998: LD_INT 46
21000: PUSH
21001: LD_INT 47
21003: PUSH
21004: LD_INT 1
21006: PUSH
21007: LD_INT 2
21009: PUSH
21010: LD_INT 82
21012: PUSH
21013: LD_INT 83
21015: PUSH
21016: LD_INT 84
21018: PUSH
21019: LD_INT 85
21021: PUSH
21022: LD_INT 86
21024: PUSH
21025: LD_INT 11
21027: PUSH
21028: LD_INT 9
21030: PUSH
21031: LD_INT 20
21033: PUSH
21034: LD_INT 19
21036: PUSH
21037: LD_INT 21
21039: PUSH
21040: LD_INT 24
21042: PUSH
21043: LD_INT 22
21045: PUSH
21046: LD_INT 25
21048: PUSH
21049: LD_INT 28
21051: PUSH
21052: LD_INT 29
21054: PUSH
21055: LD_INT 30
21057: PUSH
21058: LD_INT 31
21060: PUSH
21061: LD_INT 37
21063: PUSH
21064: LD_INT 38
21066: PUSH
21067: LD_INT 32
21069: PUSH
21070: LD_INT 27
21072: PUSH
21073: LD_INT 33
21075: PUSH
21076: LD_INT 69
21078: PUSH
21079: LD_INT 39
21081: PUSH
21082: LD_INT 34
21084: PUSH
21085: LD_INT 40
21087: PUSH
21088: LD_INT 71
21090: PUSH
21091: LD_INT 23
21093: PUSH
21094: LD_INT 44
21096: PUSH
21097: LD_INT 48
21099: PUSH
21100: LD_INT 49
21102: PUSH
21103: LD_INT 50
21105: PUSH
21106: LD_INT 51
21108: PUSH
21109: LD_INT 52
21111: PUSH
21112: LD_INT 53
21114: PUSH
21115: LD_INT 54
21117: PUSH
21118: LD_INT 55
21120: PUSH
21121: LD_INT 56
21123: PUSH
21124: LD_INT 57
21126: PUSH
21127: LD_INT 58
21129: PUSH
21130: LD_INT 59
21132: PUSH
21133: LD_INT 63
21135: PUSH
21136: LD_INT 64
21138: PUSH
21139: LD_INT 65
21141: PUSH
21142: LD_INT 82
21144: PUSH
21145: LD_INT 83
21147: PUSH
21148: LD_INT 84
21150: PUSH
21151: LD_INT 85
21153: PUSH
21154: LD_INT 86
21156: PUSH
21157: EMPTY
21158: LIST
21159: LIST
21160: LIST
21161: LIST
21162: LIST
21163: LIST
21164: LIST
21165: LIST
21166: LIST
21167: LIST
21168: LIST
21169: LIST
21170: LIST
21171: LIST
21172: LIST
21173: LIST
21174: LIST
21175: LIST
21176: LIST
21177: LIST
21178: LIST
21179: LIST
21180: LIST
21181: LIST
21182: LIST
21183: LIST
21184: LIST
21185: LIST
21186: LIST
21187: LIST
21188: LIST
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: LIST
21194: LIST
21195: LIST
21196: LIST
21197: LIST
21198: LIST
21199: LIST
21200: LIST
21201: LIST
21202: LIST
21203: LIST
21204: LIST
21205: LIST
21206: LIST
21207: LIST
21208: LIST
21209: LIST
21210: LIST
21211: ST_TO_ADDR
21212: GO 21215
21214: POP
// if state > - 1 and state < 3 then
21215: LD_VAR 0 3
21219: PUSH
21220: LD_INT 1
21222: NEG
21223: GREATER
21224: PUSH
21225: LD_VAR 0 3
21229: PUSH
21230: LD_INT 3
21232: LESS
21233: AND
21234: IFFALSE 21291
// for i in result do
21236: LD_ADDR_VAR 0 5
21240: PUSH
21241: LD_VAR 0 4
21245: PUSH
21246: FOR_IN
21247: IFFALSE 21289
// if GetTech ( i , side ) <> state then
21249: LD_VAR 0 5
21253: PPUSH
21254: LD_VAR 0 1
21258: PPUSH
21259: CALL_OW 321
21263: PUSH
21264: LD_VAR 0 3
21268: NONEQUAL
21269: IFFALSE 21287
// result := result diff i ;
21271: LD_ADDR_VAR 0 4
21275: PUSH
21276: LD_VAR 0 4
21280: PUSH
21281: LD_VAR 0 5
21285: DIFF
21286: ST_TO_ADDR
21287: GO 21246
21289: POP
21290: POP
// end ;
21291: LD_VAR 0 4
21295: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
21296: LD_INT 0
21298: PPUSH
21299: PPUSH
21300: PPUSH
// result := true ;
21301: LD_ADDR_VAR 0 3
21305: PUSH
21306: LD_INT 1
21308: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
21309: LD_ADDR_VAR 0 5
21313: PUSH
21314: LD_VAR 0 2
21318: PPUSH
21319: CALL_OW 480
21323: ST_TO_ADDR
// if not tmp then
21324: LD_VAR 0 5
21328: NOT
21329: IFFALSE 21333
// exit ;
21331: GO 21382
// for i in tmp do
21333: LD_ADDR_VAR 0 4
21337: PUSH
21338: LD_VAR 0 5
21342: PUSH
21343: FOR_IN
21344: IFFALSE 21380
// if GetTech ( i , side ) <> state_researched then
21346: LD_VAR 0 4
21350: PPUSH
21351: LD_VAR 0 1
21355: PPUSH
21356: CALL_OW 321
21360: PUSH
21361: LD_INT 2
21363: NONEQUAL
21364: IFFALSE 21378
// begin result := false ;
21366: LD_ADDR_VAR 0 3
21370: PUSH
21371: LD_INT 0
21373: ST_TO_ADDR
// exit ;
21374: POP
21375: POP
21376: GO 21382
// end ;
21378: GO 21343
21380: POP
21381: POP
// end ;
21382: LD_VAR 0 3
21386: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
21387: LD_INT 0
21389: PPUSH
21390: PPUSH
21391: PPUSH
21392: PPUSH
21393: PPUSH
21394: PPUSH
21395: PPUSH
21396: PPUSH
21397: PPUSH
21398: PPUSH
21399: PPUSH
21400: PPUSH
21401: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
21402: LD_VAR 0 1
21406: NOT
21407: PUSH
21408: LD_VAR 0 1
21412: PPUSH
21413: CALL_OW 257
21417: PUSH
21418: LD_INT 9
21420: NONEQUAL
21421: OR
21422: IFFALSE 21426
// exit ;
21424: GO 21999
// side := GetSide ( unit ) ;
21426: LD_ADDR_VAR 0 9
21430: PUSH
21431: LD_VAR 0 1
21435: PPUSH
21436: CALL_OW 255
21440: ST_TO_ADDR
// tech_space := tech_spacanom ;
21441: LD_ADDR_VAR 0 12
21445: PUSH
21446: LD_INT 29
21448: ST_TO_ADDR
// tech_time := tech_taurad ;
21449: LD_ADDR_VAR 0 13
21453: PUSH
21454: LD_INT 28
21456: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
21457: LD_ADDR_VAR 0 11
21461: PUSH
21462: LD_VAR 0 1
21466: PPUSH
21467: CALL_OW 310
21471: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
21472: LD_VAR 0 11
21476: PPUSH
21477: CALL_OW 247
21481: PUSH
21482: LD_INT 2
21484: EQUAL
21485: IFFALSE 21489
// exit ;
21487: GO 21999
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21489: LD_ADDR_VAR 0 8
21493: PUSH
21494: LD_INT 81
21496: PUSH
21497: LD_VAR 0 9
21501: PUSH
21502: EMPTY
21503: LIST
21504: LIST
21505: PUSH
21506: LD_INT 3
21508: PUSH
21509: LD_INT 21
21511: PUSH
21512: LD_INT 3
21514: PUSH
21515: EMPTY
21516: LIST
21517: LIST
21518: PUSH
21519: EMPTY
21520: LIST
21521: LIST
21522: PUSH
21523: EMPTY
21524: LIST
21525: LIST
21526: PPUSH
21527: CALL_OW 69
21531: ST_TO_ADDR
// if not tmp then
21532: LD_VAR 0 8
21536: NOT
21537: IFFALSE 21541
// exit ;
21539: GO 21999
// if in_unit then
21541: LD_VAR 0 11
21545: IFFALSE 21569
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
21547: LD_ADDR_VAR 0 10
21551: PUSH
21552: LD_VAR 0 8
21556: PPUSH
21557: LD_VAR 0 11
21561: PPUSH
21562: CALL_OW 74
21566: ST_TO_ADDR
21567: GO 21589
// enemy := NearestUnitToUnit ( tmp , unit ) ;
21569: LD_ADDR_VAR 0 10
21573: PUSH
21574: LD_VAR 0 8
21578: PPUSH
21579: LD_VAR 0 1
21583: PPUSH
21584: CALL_OW 74
21588: ST_TO_ADDR
// if not enemy then
21589: LD_VAR 0 10
21593: NOT
21594: IFFALSE 21598
// exit ;
21596: GO 21999
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
21598: LD_VAR 0 11
21602: PUSH
21603: LD_VAR 0 11
21607: PPUSH
21608: LD_VAR 0 10
21612: PPUSH
21613: CALL_OW 296
21617: PUSH
21618: LD_INT 13
21620: GREATER
21621: AND
21622: PUSH
21623: LD_VAR 0 1
21627: PPUSH
21628: LD_VAR 0 10
21632: PPUSH
21633: CALL_OW 296
21637: PUSH
21638: LD_INT 12
21640: GREATER
21641: OR
21642: IFFALSE 21646
// exit ;
21644: GO 21999
// missile := [ 1 ] ;
21646: LD_ADDR_VAR 0 14
21650: PUSH
21651: LD_INT 1
21653: PUSH
21654: EMPTY
21655: LIST
21656: ST_TO_ADDR
// if Researched ( side , tech_space ) then
21657: LD_VAR 0 9
21661: PPUSH
21662: LD_VAR 0 12
21666: PPUSH
21667: CALL_OW 325
21671: IFFALSE 21700
// missile := Insert ( missile , missile + 1 , 2 ) ;
21673: LD_ADDR_VAR 0 14
21677: PUSH
21678: LD_VAR 0 14
21682: PPUSH
21683: LD_VAR 0 14
21687: PUSH
21688: LD_INT 1
21690: PLUS
21691: PPUSH
21692: LD_INT 2
21694: PPUSH
21695: CALL_OW 2
21699: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
21700: LD_VAR 0 9
21704: PPUSH
21705: LD_VAR 0 13
21709: PPUSH
21710: CALL_OW 325
21714: PUSH
21715: LD_VAR 0 10
21719: PPUSH
21720: CALL_OW 255
21724: PPUSH
21725: LD_VAR 0 13
21729: PPUSH
21730: CALL_OW 325
21734: NOT
21735: AND
21736: IFFALSE 21765
// missile := Insert ( missile , missile + 1 , 3 ) ;
21738: LD_ADDR_VAR 0 14
21742: PUSH
21743: LD_VAR 0 14
21747: PPUSH
21748: LD_VAR 0 14
21752: PUSH
21753: LD_INT 1
21755: PLUS
21756: PPUSH
21757: LD_INT 3
21759: PPUSH
21760: CALL_OW 2
21764: ST_TO_ADDR
// if missile < 2 then
21765: LD_VAR 0 14
21769: PUSH
21770: LD_INT 2
21772: LESS
21773: IFFALSE 21777
// exit ;
21775: GO 21999
// x := GetX ( enemy ) ;
21777: LD_ADDR_VAR 0 4
21781: PUSH
21782: LD_VAR 0 10
21786: PPUSH
21787: CALL_OW 250
21791: ST_TO_ADDR
// y := GetY ( enemy ) ;
21792: LD_ADDR_VAR 0 5
21796: PUSH
21797: LD_VAR 0 10
21801: PPUSH
21802: CALL_OW 251
21806: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
21807: LD_ADDR_VAR 0 6
21811: PUSH
21812: LD_VAR 0 4
21816: PUSH
21817: LD_INT 1
21819: NEG
21820: PPUSH
21821: LD_INT 1
21823: PPUSH
21824: CALL_OW 12
21828: PLUS
21829: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
21830: LD_ADDR_VAR 0 7
21834: PUSH
21835: LD_VAR 0 5
21839: PUSH
21840: LD_INT 1
21842: NEG
21843: PPUSH
21844: LD_INT 1
21846: PPUSH
21847: CALL_OW 12
21851: PLUS
21852: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21853: LD_VAR 0 6
21857: PPUSH
21858: LD_VAR 0 7
21862: PPUSH
21863: CALL_OW 488
21867: NOT
21868: IFFALSE 21890
// begin _x := x ;
21870: LD_ADDR_VAR 0 6
21874: PUSH
21875: LD_VAR 0 4
21879: ST_TO_ADDR
// _y := y ;
21880: LD_ADDR_VAR 0 7
21884: PUSH
21885: LD_VAR 0 5
21889: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
21890: LD_ADDR_VAR 0 3
21894: PUSH
21895: LD_INT 1
21897: PPUSH
21898: LD_VAR 0 14
21902: PPUSH
21903: CALL_OW 12
21907: ST_TO_ADDR
// case i of 1 :
21908: LD_VAR 0 3
21912: PUSH
21913: LD_INT 1
21915: DOUBLE
21916: EQUAL
21917: IFTRUE 21921
21919: GO 21938
21921: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
21922: LD_VAR 0 1
21926: PPUSH
21927: LD_VAR 0 10
21931: PPUSH
21932: CALL_OW 115
21936: GO 21999
21938: LD_INT 2
21940: DOUBLE
21941: EQUAL
21942: IFTRUE 21946
21944: GO 21968
21946: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
21947: LD_VAR 0 1
21951: PPUSH
21952: LD_VAR 0 6
21956: PPUSH
21957: LD_VAR 0 7
21961: PPUSH
21962: CALL_OW 153
21966: GO 21999
21968: LD_INT 3
21970: DOUBLE
21971: EQUAL
21972: IFTRUE 21976
21974: GO 21998
21976: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
21977: LD_VAR 0 1
21981: PPUSH
21982: LD_VAR 0 6
21986: PPUSH
21987: LD_VAR 0 7
21991: PPUSH
21992: CALL_OW 154
21996: GO 21999
21998: POP
// end ;
21999: LD_VAR 0 2
22003: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
22004: LD_INT 0
22006: PPUSH
22007: PPUSH
22008: PPUSH
22009: PPUSH
22010: PPUSH
22011: PPUSH
// if not unit or not building then
22012: LD_VAR 0 1
22016: NOT
22017: PUSH
22018: LD_VAR 0 2
22022: NOT
22023: OR
22024: IFFALSE 22028
// exit ;
22026: GO 22186
// x := GetX ( building ) ;
22028: LD_ADDR_VAR 0 5
22032: PUSH
22033: LD_VAR 0 2
22037: PPUSH
22038: CALL_OW 250
22042: ST_TO_ADDR
// y := GetY ( building ) ;
22043: LD_ADDR_VAR 0 6
22047: PUSH
22048: LD_VAR 0 2
22052: PPUSH
22053: CALL_OW 251
22057: ST_TO_ADDR
// for i = 0 to 5 do
22058: LD_ADDR_VAR 0 4
22062: PUSH
22063: DOUBLE
22064: LD_INT 0
22066: DEC
22067: ST_TO_ADDR
22068: LD_INT 5
22070: PUSH
22071: FOR_TO
22072: IFFALSE 22184
// begin _x := ShiftX ( x , i , 3 ) ;
22074: LD_ADDR_VAR 0 7
22078: PUSH
22079: LD_VAR 0 5
22083: PPUSH
22084: LD_VAR 0 4
22088: PPUSH
22089: LD_INT 3
22091: PPUSH
22092: CALL_OW 272
22096: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
22097: LD_ADDR_VAR 0 8
22101: PUSH
22102: LD_VAR 0 6
22106: PPUSH
22107: LD_VAR 0 4
22111: PPUSH
22112: LD_INT 3
22114: PPUSH
22115: CALL_OW 273
22119: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22120: LD_VAR 0 7
22124: PPUSH
22125: LD_VAR 0 8
22129: PPUSH
22130: CALL_OW 488
22134: NOT
22135: IFFALSE 22139
// continue ;
22137: GO 22071
// if HexInfo ( _x , _y ) = 0 then
22139: LD_VAR 0 7
22143: PPUSH
22144: LD_VAR 0 8
22148: PPUSH
22149: CALL_OW 428
22153: PUSH
22154: LD_INT 0
22156: EQUAL
22157: IFFALSE 22182
// begin ComMoveXY ( unit , _x , _y ) ;
22159: LD_VAR 0 1
22163: PPUSH
22164: LD_VAR 0 7
22168: PPUSH
22169: LD_VAR 0 8
22173: PPUSH
22174: CALL_OW 111
// exit ;
22178: POP
22179: POP
22180: GO 22186
// end ; end ;
22182: GO 22071
22184: POP
22185: POP
// end ;
22186: LD_VAR 0 3
22190: RET
// export function ScanBase ( side , base_area ) ; begin
22191: LD_INT 0
22193: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
22194: LD_ADDR_VAR 0 3
22198: PUSH
22199: LD_VAR 0 2
22203: PPUSH
22204: LD_INT 81
22206: PUSH
22207: LD_VAR 0 1
22211: PUSH
22212: EMPTY
22213: LIST
22214: LIST
22215: PPUSH
22216: CALL_OW 70
22220: ST_TO_ADDR
// end ;
22221: LD_VAR 0 3
22225: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
22226: LD_INT 0
22228: PPUSH
22229: PPUSH
22230: PPUSH
22231: PPUSH
// result := false ;
22232: LD_ADDR_VAR 0 2
22236: PUSH
22237: LD_INT 0
22239: ST_TO_ADDR
// side := GetSide ( unit ) ;
22240: LD_ADDR_VAR 0 3
22244: PUSH
22245: LD_VAR 0 1
22249: PPUSH
22250: CALL_OW 255
22254: ST_TO_ADDR
// nat := GetNation ( unit ) ;
22255: LD_ADDR_VAR 0 4
22259: PUSH
22260: LD_VAR 0 1
22264: PPUSH
22265: CALL_OW 248
22269: ST_TO_ADDR
// case nat of 1 :
22270: LD_VAR 0 4
22274: PUSH
22275: LD_INT 1
22277: DOUBLE
22278: EQUAL
22279: IFTRUE 22283
22281: GO 22294
22283: POP
// tech := tech_lassight ; 2 :
22284: LD_ADDR_VAR 0 5
22288: PUSH
22289: LD_INT 12
22291: ST_TO_ADDR
22292: GO 22333
22294: LD_INT 2
22296: DOUBLE
22297: EQUAL
22298: IFTRUE 22302
22300: GO 22313
22302: POP
// tech := tech_mortar ; 3 :
22303: LD_ADDR_VAR 0 5
22307: PUSH
22308: LD_INT 41
22310: ST_TO_ADDR
22311: GO 22333
22313: LD_INT 3
22315: DOUBLE
22316: EQUAL
22317: IFTRUE 22321
22319: GO 22332
22321: POP
// tech := tech_bazooka ; end ;
22322: LD_ADDR_VAR 0 5
22326: PUSH
22327: LD_INT 44
22329: ST_TO_ADDR
22330: GO 22333
22332: POP
// if Researched ( side , tech ) then
22333: LD_VAR 0 3
22337: PPUSH
22338: LD_VAR 0 5
22342: PPUSH
22343: CALL_OW 325
22347: IFFALSE 22374
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
22349: LD_ADDR_VAR 0 2
22353: PUSH
22354: LD_INT 5
22356: PUSH
22357: LD_INT 8
22359: PUSH
22360: LD_INT 9
22362: PUSH
22363: EMPTY
22364: LIST
22365: LIST
22366: LIST
22367: PUSH
22368: LD_VAR 0 4
22372: ARRAY
22373: ST_TO_ADDR
// end ;
22374: LD_VAR 0 2
22378: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
22379: LD_INT 0
22381: PPUSH
22382: PPUSH
22383: PPUSH
// if not mines then
22384: LD_VAR 0 2
22388: NOT
22389: IFFALSE 22393
// exit ;
22391: GO 22537
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22393: LD_ADDR_VAR 0 5
22397: PUSH
22398: LD_INT 81
22400: PUSH
22401: LD_VAR 0 1
22405: PUSH
22406: EMPTY
22407: LIST
22408: LIST
22409: PUSH
22410: LD_INT 3
22412: PUSH
22413: LD_INT 21
22415: PUSH
22416: LD_INT 3
22418: PUSH
22419: EMPTY
22420: LIST
22421: LIST
22422: PUSH
22423: EMPTY
22424: LIST
22425: LIST
22426: PUSH
22427: EMPTY
22428: LIST
22429: LIST
22430: PPUSH
22431: CALL_OW 69
22435: ST_TO_ADDR
// for i in mines do
22436: LD_ADDR_VAR 0 4
22440: PUSH
22441: LD_VAR 0 2
22445: PUSH
22446: FOR_IN
22447: IFFALSE 22535
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
22449: LD_VAR 0 4
22453: PUSH
22454: LD_INT 1
22456: ARRAY
22457: PPUSH
22458: LD_VAR 0 4
22462: PUSH
22463: LD_INT 2
22465: ARRAY
22466: PPUSH
22467: CALL_OW 458
22471: NOT
22472: IFFALSE 22476
// continue ;
22474: GO 22446
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
22476: LD_VAR 0 4
22480: PUSH
22481: LD_INT 1
22483: ARRAY
22484: PPUSH
22485: LD_VAR 0 4
22489: PUSH
22490: LD_INT 2
22492: ARRAY
22493: PPUSH
22494: CALL_OW 428
22498: PUSH
22499: LD_VAR 0 5
22503: IN
22504: IFFALSE 22533
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
22506: LD_VAR 0 4
22510: PUSH
22511: LD_INT 1
22513: ARRAY
22514: PPUSH
22515: LD_VAR 0 4
22519: PUSH
22520: LD_INT 2
22522: ARRAY
22523: PPUSH
22524: LD_VAR 0 1
22528: PPUSH
22529: CALL_OW 456
// end ;
22533: GO 22446
22535: POP
22536: POP
// end ;
22537: LD_VAR 0 3
22541: RET
// export function Count ( array ) ; var i ; begin
22542: LD_INT 0
22544: PPUSH
22545: PPUSH
// result := 0 ;
22546: LD_ADDR_VAR 0 2
22550: PUSH
22551: LD_INT 0
22553: ST_TO_ADDR
// for i in array do
22554: LD_ADDR_VAR 0 3
22558: PUSH
22559: LD_VAR 0 1
22563: PUSH
22564: FOR_IN
22565: IFFALSE 22589
// if i then
22567: LD_VAR 0 3
22571: IFFALSE 22587
// result := result + 1 ;
22573: LD_ADDR_VAR 0 2
22577: PUSH
22578: LD_VAR 0 2
22582: PUSH
22583: LD_INT 1
22585: PLUS
22586: ST_TO_ADDR
22587: GO 22564
22589: POP
22590: POP
// end ;
22591: LD_VAR 0 2
22595: RET
// export function IsEmpty ( building ) ; begin
22596: LD_INT 0
22598: PPUSH
// if not building then
22599: LD_VAR 0 1
22603: NOT
22604: IFFALSE 22608
// exit ;
22606: GO 22651
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
22608: LD_ADDR_VAR 0 2
22612: PUSH
22613: LD_VAR 0 1
22617: PUSH
22618: LD_INT 22
22620: PUSH
22621: LD_VAR 0 1
22625: PPUSH
22626: CALL_OW 255
22630: PUSH
22631: EMPTY
22632: LIST
22633: LIST
22634: PUSH
22635: LD_INT 58
22637: PUSH
22638: EMPTY
22639: LIST
22640: PUSH
22641: EMPTY
22642: LIST
22643: LIST
22644: PPUSH
22645: CALL_OW 69
22649: IN
22650: ST_TO_ADDR
// end ;
22651: LD_VAR 0 2
22655: RET
// export function IsNotFull ( building ) ; begin
22656: LD_INT 0
22658: PPUSH
// if not building then
22659: LD_VAR 0 1
22663: NOT
22664: IFFALSE 22668
// exit ;
22666: GO 22687
// result := UnitsInside ( building ) < 6 ;
22668: LD_ADDR_VAR 0 2
22672: PUSH
22673: LD_VAR 0 1
22677: PPUSH
22678: CALL_OW 313
22682: PUSH
22683: LD_INT 6
22685: LESS
22686: ST_TO_ADDR
// end ;
22687: LD_VAR 0 2
22691: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
22692: LD_INT 0
22694: PPUSH
22695: PPUSH
22696: PPUSH
22697: PPUSH
// tmp := [ ] ;
22698: LD_ADDR_VAR 0 3
22702: PUSH
22703: EMPTY
22704: ST_TO_ADDR
// list := [ ] ;
22705: LD_ADDR_VAR 0 5
22709: PUSH
22710: EMPTY
22711: ST_TO_ADDR
// for i = 16 to 25 do
22712: LD_ADDR_VAR 0 4
22716: PUSH
22717: DOUBLE
22718: LD_INT 16
22720: DEC
22721: ST_TO_ADDR
22722: LD_INT 25
22724: PUSH
22725: FOR_TO
22726: IFFALSE 22799
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
22728: LD_ADDR_VAR 0 3
22732: PUSH
22733: LD_VAR 0 3
22737: PUSH
22738: LD_INT 22
22740: PUSH
22741: LD_VAR 0 1
22745: PPUSH
22746: CALL_OW 255
22750: PUSH
22751: EMPTY
22752: LIST
22753: LIST
22754: PUSH
22755: LD_INT 91
22757: PUSH
22758: LD_VAR 0 1
22762: PUSH
22763: LD_INT 6
22765: PUSH
22766: EMPTY
22767: LIST
22768: LIST
22769: LIST
22770: PUSH
22771: LD_INT 30
22773: PUSH
22774: LD_VAR 0 4
22778: PUSH
22779: EMPTY
22780: LIST
22781: LIST
22782: PUSH
22783: EMPTY
22784: LIST
22785: LIST
22786: LIST
22787: PUSH
22788: EMPTY
22789: LIST
22790: PPUSH
22791: CALL_OW 69
22795: ADD
22796: ST_TO_ADDR
22797: GO 22725
22799: POP
22800: POP
// for i = 1 to tmp do
22801: LD_ADDR_VAR 0 4
22805: PUSH
22806: DOUBLE
22807: LD_INT 1
22809: DEC
22810: ST_TO_ADDR
22811: LD_VAR 0 3
22815: PUSH
22816: FOR_TO
22817: IFFALSE 22905
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
22819: LD_ADDR_VAR 0 5
22823: PUSH
22824: LD_VAR 0 5
22828: PUSH
22829: LD_VAR 0 3
22833: PUSH
22834: LD_VAR 0 4
22838: ARRAY
22839: PPUSH
22840: CALL_OW 266
22844: PUSH
22845: LD_VAR 0 3
22849: PUSH
22850: LD_VAR 0 4
22854: ARRAY
22855: PPUSH
22856: CALL_OW 250
22860: PUSH
22861: LD_VAR 0 3
22865: PUSH
22866: LD_VAR 0 4
22870: ARRAY
22871: PPUSH
22872: CALL_OW 251
22876: PUSH
22877: LD_VAR 0 3
22881: PUSH
22882: LD_VAR 0 4
22886: ARRAY
22887: PPUSH
22888: CALL_OW 254
22892: PUSH
22893: EMPTY
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: PUSH
22899: EMPTY
22900: LIST
22901: ADD
22902: ST_TO_ADDR
22903: GO 22816
22905: POP
22906: POP
// result := list ;
22907: LD_ADDR_VAR 0 2
22911: PUSH
22912: LD_VAR 0 5
22916: ST_TO_ADDR
// end ;
22917: LD_VAR 0 2
22921: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
22922: LD_INT 0
22924: PPUSH
22925: PPUSH
22926: PPUSH
22927: PPUSH
22928: PPUSH
22929: PPUSH
22930: PPUSH
// if not factory then
22931: LD_VAR 0 1
22935: NOT
22936: IFFALSE 22940
// exit ;
22938: GO 23533
// if control = control_apeman then
22940: LD_VAR 0 4
22944: PUSH
22945: LD_INT 5
22947: EQUAL
22948: IFFALSE 23057
// begin tmp := UnitsInside ( factory ) ;
22950: LD_ADDR_VAR 0 8
22954: PUSH
22955: LD_VAR 0 1
22959: PPUSH
22960: CALL_OW 313
22964: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
22965: LD_VAR 0 8
22969: PPUSH
22970: LD_INT 25
22972: PUSH
22973: LD_INT 12
22975: PUSH
22976: EMPTY
22977: LIST
22978: LIST
22979: PPUSH
22980: CALL_OW 72
22984: NOT
22985: IFFALSE 22995
// control := control_manual ;
22987: LD_ADDR_VAR 0 4
22991: PUSH
22992: LD_INT 1
22994: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
22995: LD_ADDR_VAR 0 8
22999: PUSH
23000: LD_VAR 0 1
23004: PPUSH
23005: CALL 22692 0 1
23009: ST_TO_ADDR
// if tmp then
23010: LD_VAR 0 8
23014: IFFALSE 23057
// begin for i in tmp do
23016: LD_ADDR_VAR 0 7
23020: PUSH
23021: LD_VAR 0 8
23025: PUSH
23026: FOR_IN
23027: IFFALSE 23055
// if i [ 1 ] = b_ext_radio then
23029: LD_VAR 0 7
23033: PUSH
23034: LD_INT 1
23036: ARRAY
23037: PUSH
23038: LD_INT 22
23040: EQUAL
23041: IFFALSE 23053
// begin control := control_remote ;
23043: LD_ADDR_VAR 0 4
23047: PUSH
23048: LD_INT 2
23050: ST_TO_ADDR
// break ;
23051: GO 23055
// end ;
23053: GO 23026
23055: POP
23056: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23057: LD_VAR 0 1
23061: PPUSH
23062: LD_VAR 0 2
23066: PPUSH
23067: LD_VAR 0 3
23071: PPUSH
23072: LD_VAR 0 4
23076: PPUSH
23077: LD_VAR 0 5
23081: PPUSH
23082: CALL_OW 448
23086: IFFALSE 23121
// begin result := [ chassis , engine , control , weapon ] ;
23088: LD_ADDR_VAR 0 6
23092: PUSH
23093: LD_VAR 0 2
23097: PUSH
23098: LD_VAR 0 3
23102: PUSH
23103: LD_VAR 0 4
23107: PUSH
23108: LD_VAR 0 5
23112: PUSH
23113: EMPTY
23114: LIST
23115: LIST
23116: LIST
23117: LIST
23118: ST_TO_ADDR
// exit ;
23119: GO 23533
// end ; _chassis := AvailableChassisList ( factory ) ;
23121: LD_ADDR_VAR 0 9
23125: PUSH
23126: LD_VAR 0 1
23130: PPUSH
23131: CALL_OW 475
23135: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
23136: LD_ADDR_VAR 0 11
23140: PUSH
23141: LD_VAR 0 1
23145: PPUSH
23146: CALL_OW 476
23150: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
23151: LD_ADDR_VAR 0 12
23155: PUSH
23156: LD_VAR 0 1
23160: PPUSH
23161: CALL_OW 477
23165: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
23166: LD_ADDR_VAR 0 10
23170: PUSH
23171: LD_VAR 0 1
23175: PPUSH
23176: CALL_OW 478
23180: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
23181: LD_VAR 0 9
23185: NOT
23186: PUSH
23187: LD_VAR 0 11
23191: NOT
23192: OR
23193: PUSH
23194: LD_VAR 0 12
23198: NOT
23199: OR
23200: PUSH
23201: LD_VAR 0 10
23205: NOT
23206: OR
23207: IFFALSE 23242
// begin result := [ chassis , engine , control , weapon ] ;
23209: LD_ADDR_VAR 0 6
23213: PUSH
23214: LD_VAR 0 2
23218: PUSH
23219: LD_VAR 0 3
23223: PUSH
23224: LD_VAR 0 4
23228: PUSH
23229: LD_VAR 0 5
23233: PUSH
23234: EMPTY
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: ST_TO_ADDR
// exit ;
23240: GO 23533
// end ; if not chassis in _chassis then
23242: LD_VAR 0 2
23246: PUSH
23247: LD_VAR 0 9
23251: IN
23252: NOT
23253: IFFALSE 23279
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
23255: LD_ADDR_VAR 0 2
23259: PUSH
23260: LD_VAR 0 9
23264: PUSH
23265: LD_INT 1
23267: PPUSH
23268: LD_VAR 0 9
23272: PPUSH
23273: CALL_OW 12
23277: ARRAY
23278: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
23279: LD_VAR 0 2
23283: PPUSH
23284: LD_VAR 0 3
23288: PPUSH
23289: CALL 23538 0 2
23293: NOT
23294: IFFALSE 23353
// repeat engine := _engine [ 1 ] ;
23296: LD_ADDR_VAR 0 3
23300: PUSH
23301: LD_VAR 0 11
23305: PUSH
23306: LD_INT 1
23308: ARRAY
23309: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
23310: LD_ADDR_VAR 0 11
23314: PUSH
23315: LD_VAR 0 11
23319: PPUSH
23320: LD_INT 1
23322: PPUSH
23323: CALL_OW 3
23327: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
23328: LD_VAR 0 2
23332: PPUSH
23333: LD_VAR 0 3
23337: PPUSH
23338: CALL 23538 0 2
23342: PUSH
23343: LD_VAR 0 11
23347: PUSH
23348: EMPTY
23349: EQUAL
23350: OR
23351: IFFALSE 23296
// if not control in _control then
23353: LD_VAR 0 4
23357: PUSH
23358: LD_VAR 0 12
23362: IN
23363: NOT
23364: IFFALSE 23390
// control := _control [ rand ( 1 , _control ) ] ;
23366: LD_ADDR_VAR 0 4
23370: PUSH
23371: LD_VAR 0 12
23375: PUSH
23376: LD_INT 1
23378: PPUSH
23379: LD_VAR 0 12
23383: PPUSH
23384: CALL_OW 12
23388: ARRAY
23389: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
23390: LD_VAR 0 2
23394: PPUSH
23395: LD_VAR 0 5
23399: PPUSH
23400: CALL 23758 0 2
23404: NOT
23405: IFFALSE 23464
// repeat weapon := _weapon [ 1 ] ;
23407: LD_ADDR_VAR 0 5
23411: PUSH
23412: LD_VAR 0 10
23416: PUSH
23417: LD_INT 1
23419: ARRAY
23420: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
23421: LD_ADDR_VAR 0 10
23425: PUSH
23426: LD_VAR 0 10
23430: PPUSH
23431: LD_INT 1
23433: PPUSH
23434: CALL_OW 3
23438: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
23439: LD_VAR 0 2
23443: PPUSH
23444: LD_VAR 0 5
23448: PPUSH
23449: CALL 23758 0 2
23453: PUSH
23454: LD_VAR 0 10
23458: PUSH
23459: EMPTY
23460: EQUAL
23461: OR
23462: IFFALSE 23407
// result := [ ] ;
23464: LD_ADDR_VAR 0 6
23468: PUSH
23469: EMPTY
23470: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23471: LD_VAR 0 1
23475: PPUSH
23476: LD_VAR 0 2
23480: PPUSH
23481: LD_VAR 0 3
23485: PPUSH
23486: LD_VAR 0 4
23490: PPUSH
23491: LD_VAR 0 5
23495: PPUSH
23496: CALL_OW 448
23500: IFFALSE 23533
// result := [ chassis , engine , control , weapon ] ;
23502: LD_ADDR_VAR 0 6
23506: PUSH
23507: LD_VAR 0 2
23511: PUSH
23512: LD_VAR 0 3
23516: PUSH
23517: LD_VAR 0 4
23521: PUSH
23522: LD_VAR 0 5
23526: PUSH
23527: EMPTY
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: ST_TO_ADDR
// end ;
23533: LD_VAR 0 6
23537: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
23538: LD_INT 0
23540: PPUSH
// if not chassis or not engine then
23541: LD_VAR 0 1
23545: NOT
23546: PUSH
23547: LD_VAR 0 2
23551: NOT
23552: OR
23553: IFFALSE 23557
// exit ;
23555: GO 23753
// case engine of engine_solar :
23557: LD_VAR 0 2
23561: PUSH
23562: LD_INT 2
23564: DOUBLE
23565: EQUAL
23566: IFTRUE 23570
23568: GO 23608
23570: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
23571: LD_ADDR_VAR 0 3
23575: PUSH
23576: LD_INT 11
23578: PUSH
23579: LD_INT 12
23581: PUSH
23582: LD_INT 13
23584: PUSH
23585: LD_INT 14
23587: PUSH
23588: LD_INT 1
23590: PUSH
23591: LD_INT 2
23593: PUSH
23594: LD_INT 3
23596: PUSH
23597: EMPTY
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: ST_TO_ADDR
23606: GO 23737
23608: LD_INT 1
23610: DOUBLE
23611: EQUAL
23612: IFTRUE 23616
23614: GO 23678
23616: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
23617: LD_ADDR_VAR 0 3
23621: PUSH
23622: LD_INT 11
23624: PUSH
23625: LD_INT 12
23627: PUSH
23628: LD_INT 13
23630: PUSH
23631: LD_INT 14
23633: PUSH
23634: LD_INT 1
23636: PUSH
23637: LD_INT 2
23639: PUSH
23640: LD_INT 3
23642: PUSH
23643: LD_INT 4
23645: PUSH
23646: LD_INT 5
23648: PUSH
23649: LD_INT 21
23651: PUSH
23652: LD_INT 23
23654: PUSH
23655: LD_INT 22
23657: PUSH
23658: LD_INT 24
23660: PUSH
23661: EMPTY
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: ST_TO_ADDR
23676: GO 23737
23678: LD_INT 3
23680: DOUBLE
23681: EQUAL
23682: IFTRUE 23686
23684: GO 23736
23686: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
23687: LD_ADDR_VAR 0 3
23691: PUSH
23692: LD_INT 13
23694: PUSH
23695: LD_INT 14
23697: PUSH
23698: LD_INT 2
23700: PUSH
23701: LD_INT 3
23703: PUSH
23704: LD_INT 4
23706: PUSH
23707: LD_INT 5
23709: PUSH
23710: LD_INT 21
23712: PUSH
23713: LD_INT 22
23715: PUSH
23716: LD_INT 23
23718: PUSH
23719: LD_INT 24
23721: PUSH
23722: EMPTY
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: LIST
23729: LIST
23730: LIST
23731: LIST
23732: LIST
23733: ST_TO_ADDR
23734: GO 23737
23736: POP
// result := ( chassis in result ) ;
23737: LD_ADDR_VAR 0 3
23741: PUSH
23742: LD_VAR 0 1
23746: PUSH
23747: LD_VAR 0 3
23751: IN
23752: ST_TO_ADDR
// end ;
23753: LD_VAR 0 3
23757: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
23758: LD_INT 0
23760: PPUSH
// if not chassis or not weapon then
23761: LD_VAR 0 1
23765: NOT
23766: PUSH
23767: LD_VAR 0 2
23771: NOT
23772: OR
23773: IFFALSE 23777
// exit ;
23775: GO 24803
// case weapon of us_machine_gun :
23777: LD_VAR 0 2
23781: PUSH
23782: LD_INT 2
23784: DOUBLE
23785: EQUAL
23786: IFTRUE 23790
23788: GO 23820
23790: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
23791: LD_ADDR_VAR 0 3
23795: PUSH
23796: LD_INT 1
23798: PUSH
23799: LD_INT 2
23801: PUSH
23802: LD_INT 3
23804: PUSH
23805: LD_INT 4
23807: PUSH
23808: LD_INT 5
23810: PUSH
23811: EMPTY
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: ST_TO_ADDR
23818: GO 24787
23820: LD_INT 3
23822: DOUBLE
23823: EQUAL
23824: IFTRUE 23828
23826: GO 23858
23828: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
23829: LD_ADDR_VAR 0 3
23833: PUSH
23834: LD_INT 1
23836: PUSH
23837: LD_INT 2
23839: PUSH
23840: LD_INT 3
23842: PUSH
23843: LD_INT 4
23845: PUSH
23846: LD_INT 5
23848: PUSH
23849: EMPTY
23850: LIST
23851: LIST
23852: LIST
23853: LIST
23854: LIST
23855: ST_TO_ADDR
23856: GO 24787
23858: LD_INT 11
23860: DOUBLE
23861: EQUAL
23862: IFTRUE 23866
23864: GO 23896
23866: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
23867: LD_ADDR_VAR 0 3
23871: PUSH
23872: LD_INT 1
23874: PUSH
23875: LD_INT 2
23877: PUSH
23878: LD_INT 3
23880: PUSH
23881: LD_INT 4
23883: PUSH
23884: LD_INT 5
23886: PUSH
23887: EMPTY
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: ST_TO_ADDR
23894: GO 24787
23896: LD_INT 4
23898: DOUBLE
23899: EQUAL
23900: IFTRUE 23904
23902: GO 23930
23904: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
23905: LD_ADDR_VAR 0 3
23909: PUSH
23910: LD_INT 2
23912: PUSH
23913: LD_INT 3
23915: PUSH
23916: LD_INT 4
23918: PUSH
23919: LD_INT 5
23921: PUSH
23922: EMPTY
23923: LIST
23924: LIST
23925: LIST
23926: LIST
23927: ST_TO_ADDR
23928: GO 24787
23930: LD_INT 5
23932: DOUBLE
23933: EQUAL
23934: IFTRUE 23938
23936: GO 23964
23938: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
23939: LD_ADDR_VAR 0 3
23943: PUSH
23944: LD_INT 2
23946: PUSH
23947: LD_INT 3
23949: PUSH
23950: LD_INT 4
23952: PUSH
23953: LD_INT 5
23955: PUSH
23956: EMPTY
23957: LIST
23958: LIST
23959: LIST
23960: LIST
23961: ST_TO_ADDR
23962: GO 24787
23964: LD_INT 9
23966: DOUBLE
23967: EQUAL
23968: IFTRUE 23972
23970: GO 23998
23972: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
23973: LD_ADDR_VAR 0 3
23977: PUSH
23978: LD_INT 2
23980: PUSH
23981: LD_INT 3
23983: PUSH
23984: LD_INT 4
23986: PUSH
23987: LD_INT 5
23989: PUSH
23990: EMPTY
23991: LIST
23992: LIST
23993: LIST
23994: LIST
23995: ST_TO_ADDR
23996: GO 24787
23998: LD_INT 7
24000: DOUBLE
24001: EQUAL
24002: IFTRUE 24006
24004: GO 24032
24006: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
24007: LD_ADDR_VAR 0 3
24011: PUSH
24012: LD_INT 2
24014: PUSH
24015: LD_INT 3
24017: PUSH
24018: LD_INT 4
24020: PUSH
24021: LD_INT 5
24023: PUSH
24024: EMPTY
24025: LIST
24026: LIST
24027: LIST
24028: LIST
24029: ST_TO_ADDR
24030: GO 24787
24032: LD_INT 12
24034: DOUBLE
24035: EQUAL
24036: IFTRUE 24040
24038: GO 24066
24040: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
24041: LD_ADDR_VAR 0 3
24045: PUSH
24046: LD_INT 2
24048: PUSH
24049: LD_INT 3
24051: PUSH
24052: LD_INT 4
24054: PUSH
24055: LD_INT 5
24057: PUSH
24058: EMPTY
24059: LIST
24060: LIST
24061: LIST
24062: LIST
24063: ST_TO_ADDR
24064: GO 24787
24066: LD_INT 13
24068: DOUBLE
24069: EQUAL
24070: IFTRUE 24074
24072: GO 24100
24074: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
24075: LD_ADDR_VAR 0 3
24079: PUSH
24080: LD_INT 2
24082: PUSH
24083: LD_INT 3
24085: PUSH
24086: LD_INT 4
24088: PUSH
24089: LD_INT 5
24091: PUSH
24092: EMPTY
24093: LIST
24094: LIST
24095: LIST
24096: LIST
24097: ST_TO_ADDR
24098: GO 24787
24100: LD_INT 14
24102: DOUBLE
24103: EQUAL
24104: IFTRUE 24108
24106: GO 24126
24108: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
24109: LD_ADDR_VAR 0 3
24113: PUSH
24114: LD_INT 4
24116: PUSH
24117: LD_INT 5
24119: PUSH
24120: EMPTY
24121: LIST
24122: LIST
24123: ST_TO_ADDR
24124: GO 24787
24126: LD_INT 6
24128: DOUBLE
24129: EQUAL
24130: IFTRUE 24134
24132: GO 24152
24134: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
24135: LD_ADDR_VAR 0 3
24139: PUSH
24140: LD_INT 4
24142: PUSH
24143: LD_INT 5
24145: PUSH
24146: EMPTY
24147: LIST
24148: LIST
24149: ST_TO_ADDR
24150: GO 24787
24152: LD_INT 10
24154: DOUBLE
24155: EQUAL
24156: IFTRUE 24160
24158: GO 24178
24160: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
24161: LD_ADDR_VAR 0 3
24165: PUSH
24166: LD_INT 4
24168: PUSH
24169: LD_INT 5
24171: PUSH
24172: EMPTY
24173: LIST
24174: LIST
24175: ST_TO_ADDR
24176: GO 24787
24178: LD_INT 22
24180: DOUBLE
24181: EQUAL
24182: IFTRUE 24186
24184: GO 24212
24186: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
24187: LD_ADDR_VAR 0 3
24191: PUSH
24192: LD_INT 11
24194: PUSH
24195: LD_INT 12
24197: PUSH
24198: LD_INT 13
24200: PUSH
24201: LD_INT 14
24203: PUSH
24204: EMPTY
24205: LIST
24206: LIST
24207: LIST
24208: LIST
24209: ST_TO_ADDR
24210: GO 24787
24212: LD_INT 23
24214: DOUBLE
24215: EQUAL
24216: IFTRUE 24220
24218: GO 24246
24220: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
24221: LD_ADDR_VAR 0 3
24225: PUSH
24226: LD_INT 11
24228: PUSH
24229: LD_INT 12
24231: PUSH
24232: LD_INT 13
24234: PUSH
24235: LD_INT 14
24237: PUSH
24238: EMPTY
24239: LIST
24240: LIST
24241: LIST
24242: LIST
24243: ST_TO_ADDR
24244: GO 24787
24246: LD_INT 24
24248: DOUBLE
24249: EQUAL
24250: IFTRUE 24254
24252: GO 24280
24254: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
24255: LD_ADDR_VAR 0 3
24259: PUSH
24260: LD_INT 11
24262: PUSH
24263: LD_INT 12
24265: PUSH
24266: LD_INT 13
24268: PUSH
24269: LD_INT 14
24271: PUSH
24272: EMPTY
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: ST_TO_ADDR
24278: GO 24787
24280: LD_INT 30
24282: DOUBLE
24283: EQUAL
24284: IFTRUE 24288
24286: GO 24314
24288: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
24289: LD_ADDR_VAR 0 3
24293: PUSH
24294: LD_INT 11
24296: PUSH
24297: LD_INT 12
24299: PUSH
24300: LD_INT 13
24302: PUSH
24303: LD_INT 14
24305: PUSH
24306: EMPTY
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: ST_TO_ADDR
24312: GO 24787
24314: LD_INT 25
24316: DOUBLE
24317: EQUAL
24318: IFTRUE 24322
24320: GO 24340
24322: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
24323: LD_ADDR_VAR 0 3
24327: PUSH
24328: LD_INT 13
24330: PUSH
24331: LD_INT 14
24333: PUSH
24334: EMPTY
24335: LIST
24336: LIST
24337: ST_TO_ADDR
24338: GO 24787
24340: LD_INT 27
24342: DOUBLE
24343: EQUAL
24344: IFTRUE 24348
24346: GO 24366
24348: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
24349: LD_ADDR_VAR 0 3
24353: PUSH
24354: LD_INT 13
24356: PUSH
24357: LD_INT 14
24359: PUSH
24360: EMPTY
24361: LIST
24362: LIST
24363: ST_TO_ADDR
24364: GO 24787
24366: LD_INT 28
24368: DOUBLE
24369: EQUAL
24370: IFTRUE 24374
24372: GO 24392
24374: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
24375: LD_ADDR_VAR 0 3
24379: PUSH
24380: LD_INT 13
24382: PUSH
24383: LD_INT 14
24385: PUSH
24386: EMPTY
24387: LIST
24388: LIST
24389: ST_TO_ADDR
24390: GO 24787
24392: LD_INT 29
24394: DOUBLE
24395: EQUAL
24396: IFTRUE 24400
24398: GO 24418
24400: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
24401: LD_ADDR_VAR 0 3
24405: PUSH
24406: LD_INT 13
24408: PUSH
24409: LD_INT 14
24411: PUSH
24412: EMPTY
24413: LIST
24414: LIST
24415: ST_TO_ADDR
24416: GO 24787
24418: LD_INT 31
24420: DOUBLE
24421: EQUAL
24422: IFTRUE 24426
24424: GO 24444
24426: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
24427: LD_ADDR_VAR 0 3
24431: PUSH
24432: LD_INT 13
24434: PUSH
24435: LD_INT 14
24437: PUSH
24438: EMPTY
24439: LIST
24440: LIST
24441: ST_TO_ADDR
24442: GO 24787
24444: LD_INT 26
24446: DOUBLE
24447: EQUAL
24448: IFTRUE 24452
24450: GO 24470
24452: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
24453: LD_ADDR_VAR 0 3
24457: PUSH
24458: LD_INT 13
24460: PUSH
24461: LD_INT 14
24463: PUSH
24464: EMPTY
24465: LIST
24466: LIST
24467: ST_TO_ADDR
24468: GO 24787
24470: LD_INT 42
24472: DOUBLE
24473: EQUAL
24474: IFTRUE 24478
24476: GO 24504
24478: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
24479: LD_ADDR_VAR 0 3
24483: PUSH
24484: LD_INT 21
24486: PUSH
24487: LD_INT 22
24489: PUSH
24490: LD_INT 23
24492: PUSH
24493: LD_INT 24
24495: PUSH
24496: EMPTY
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: ST_TO_ADDR
24502: GO 24787
24504: LD_INT 43
24506: DOUBLE
24507: EQUAL
24508: IFTRUE 24512
24510: GO 24538
24512: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
24513: LD_ADDR_VAR 0 3
24517: PUSH
24518: LD_INT 21
24520: PUSH
24521: LD_INT 22
24523: PUSH
24524: LD_INT 23
24526: PUSH
24527: LD_INT 24
24529: PUSH
24530: EMPTY
24531: LIST
24532: LIST
24533: LIST
24534: LIST
24535: ST_TO_ADDR
24536: GO 24787
24538: LD_INT 44
24540: DOUBLE
24541: EQUAL
24542: IFTRUE 24546
24544: GO 24572
24546: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
24547: LD_ADDR_VAR 0 3
24551: PUSH
24552: LD_INT 21
24554: PUSH
24555: LD_INT 22
24557: PUSH
24558: LD_INT 23
24560: PUSH
24561: LD_INT 24
24563: PUSH
24564: EMPTY
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: ST_TO_ADDR
24570: GO 24787
24572: LD_INT 45
24574: DOUBLE
24575: EQUAL
24576: IFTRUE 24580
24578: GO 24606
24580: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
24581: LD_ADDR_VAR 0 3
24585: PUSH
24586: LD_INT 21
24588: PUSH
24589: LD_INT 22
24591: PUSH
24592: LD_INT 23
24594: PUSH
24595: LD_INT 24
24597: PUSH
24598: EMPTY
24599: LIST
24600: LIST
24601: LIST
24602: LIST
24603: ST_TO_ADDR
24604: GO 24787
24606: LD_INT 49
24608: DOUBLE
24609: EQUAL
24610: IFTRUE 24614
24612: GO 24640
24614: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
24615: LD_ADDR_VAR 0 3
24619: PUSH
24620: LD_INT 21
24622: PUSH
24623: LD_INT 22
24625: PUSH
24626: LD_INT 23
24628: PUSH
24629: LD_INT 24
24631: PUSH
24632: EMPTY
24633: LIST
24634: LIST
24635: LIST
24636: LIST
24637: ST_TO_ADDR
24638: GO 24787
24640: LD_INT 51
24642: DOUBLE
24643: EQUAL
24644: IFTRUE 24648
24646: GO 24674
24648: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
24649: LD_ADDR_VAR 0 3
24653: PUSH
24654: LD_INT 21
24656: PUSH
24657: LD_INT 22
24659: PUSH
24660: LD_INT 23
24662: PUSH
24663: LD_INT 24
24665: PUSH
24666: EMPTY
24667: LIST
24668: LIST
24669: LIST
24670: LIST
24671: ST_TO_ADDR
24672: GO 24787
24674: LD_INT 52
24676: DOUBLE
24677: EQUAL
24678: IFTRUE 24682
24680: GO 24708
24682: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
24683: LD_ADDR_VAR 0 3
24687: PUSH
24688: LD_INT 21
24690: PUSH
24691: LD_INT 22
24693: PUSH
24694: LD_INT 23
24696: PUSH
24697: LD_INT 24
24699: PUSH
24700: EMPTY
24701: LIST
24702: LIST
24703: LIST
24704: LIST
24705: ST_TO_ADDR
24706: GO 24787
24708: LD_INT 53
24710: DOUBLE
24711: EQUAL
24712: IFTRUE 24716
24714: GO 24734
24716: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
24717: LD_ADDR_VAR 0 3
24721: PUSH
24722: LD_INT 23
24724: PUSH
24725: LD_INT 24
24727: PUSH
24728: EMPTY
24729: LIST
24730: LIST
24731: ST_TO_ADDR
24732: GO 24787
24734: LD_INT 46
24736: DOUBLE
24737: EQUAL
24738: IFTRUE 24742
24740: GO 24760
24742: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
24743: LD_ADDR_VAR 0 3
24747: PUSH
24748: LD_INT 23
24750: PUSH
24751: LD_INT 24
24753: PUSH
24754: EMPTY
24755: LIST
24756: LIST
24757: ST_TO_ADDR
24758: GO 24787
24760: LD_INT 47
24762: DOUBLE
24763: EQUAL
24764: IFTRUE 24768
24766: GO 24786
24768: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24769: LD_ADDR_VAR 0 3
24773: PUSH
24774: LD_INT 23
24776: PUSH
24777: LD_INT 24
24779: PUSH
24780: EMPTY
24781: LIST
24782: LIST
24783: ST_TO_ADDR
24784: GO 24787
24786: POP
// result := ( chassis in result ) ;
24787: LD_ADDR_VAR 0 3
24791: PUSH
24792: LD_VAR 0 1
24796: PUSH
24797: LD_VAR 0 3
24801: IN
24802: ST_TO_ADDR
// end ;
24803: LD_VAR 0 3
24807: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
24808: LD_INT 0
24810: PPUSH
24811: PPUSH
24812: PPUSH
24813: PPUSH
24814: PPUSH
24815: PPUSH
24816: PPUSH
// result := array ;
24817: LD_ADDR_VAR 0 5
24821: PUSH
24822: LD_VAR 0 1
24826: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
24827: LD_VAR 0 1
24831: NOT
24832: PUSH
24833: LD_VAR 0 2
24837: NOT
24838: OR
24839: PUSH
24840: LD_VAR 0 3
24844: NOT
24845: OR
24846: PUSH
24847: LD_VAR 0 2
24851: PUSH
24852: LD_VAR 0 1
24856: GREATER
24857: OR
24858: PUSH
24859: LD_VAR 0 3
24863: PUSH
24864: LD_VAR 0 1
24868: GREATER
24869: OR
24870: IFFALSE 24874
// exit ;
24872: GO 25170
// if direction then
24874: LD_VAR 0 4
24878: IFFALSE 24942
// begin d := 1 ;
24880: LD_ADDR_VAR 0 9
24884: PUSH
24885: LD_INT 1
24887: ST_TO_ADDR
// if i_from > i_to then
24888: LD_VAR 0 2
24892: PUSH
24893: LD_VAR 0 3
24897: GREATER
24898: IFFALSE 24924
// length := ( array - i_from ) + i_to else
24900: LD_ADDR_VAR 0 11
24904: PUSH
24905: LD_VAR 0 1
24909: PUSH
24910: LD_VAR 0 2
24914: MINUS
24915: PUSH
24916: LD_VAR 0 3
24920: PLUS
24921: ST_TO_ADDR
24922: GO 24940
// length := i_to - i_from ;
24924: LD_ADDR_VAR 0 11
24928: PUSH
24929: LD_VAR 0 3
24933: PUSH
24934: LD_VAR 0 2
24938: MINUS
24939: ST_TO_ADDR
// end else
24940: GO 25003
// begin d := - 1 ;
24942: LD_ADDR_VAR 0 9
24946: PUSH
24947: LD_INT 1
24949: NEG
24950: ST_TO_ADDR
// if i_from > i_to then
24951: LD_VAR 0 2
24955: PUSH
24956: LD_VAR 0 3
24960: GREATER
24961: IFFALSE 24981
// length := i_from - i_to else
24963: LD_ADDR_VAR 0 11
24967: PUSH
24968: LD_VAR 0 2
24972: PUSH
24973: LD_VAR 0 3
24977: MINUS
24978: ST_TO_ADDR
24979: GO 25003
// length := ( array - i_to ) + i_from ;
24981: LD_ADDR_VAR 0 11
24985: PUSH
24986: LD_VAR 0 1
24990: PUSH
24991: LD_VAR 0 3
24995: MINUS
24996: PUSH
24997: LD_VAR 0 2
25001: PLUS
25002: ST_TO_ADDR
// end ; if not length then
25003: LD_VAR 0 11
25007: NOT
25008: IFFALSE 25012
// exit ;
25010: GO 25170
// tmp := array ;
25012: LD_ADDR_VAR 0 10
25016: PUSH
25017: LD_VAR 0 1
25021: ST_TO_ADDR
// for i = 1 to length do
25022: LD_ADDR_VAR 0 6
25026: PUSH
25027: DOUBLE
25028: LD_INT 1
25030: DEC
25031: ST_TO_ADDR
25032: LD_VAR 0 11
25036: PUSH
25037: FOR_TO
25038: IFFALSE 25158
// begin for j = 1 to array do
25040: LD_ADDR_VAR 0 7
25044: PUSH
25045: DOUBLE
25046: LD_INT 1
25048: DEC
25049: ST_TO_ADDR
25050: LD_VAR 0 1
25054: PUSH
25055: FOR_TO
25056: IFFALSE 25144
// begin k := j + d ;
25058: LD_ADDR_VAR 0 8
25062: PUSH
25063: LD_VAR 0 7
25067: PUSH
25068: LD_VAR 0 9
25072: PLUS
25073: ST_TO_ADDR
// if k > array then
25074: LD_VAR 0 8
25078: PUSH
25079: LD_VAR 0 1
25083: GREATER
25084: IFFALSE 25094
// k := 1 ;
25086: LD_ADDR_VAR 0 8
25090: PUSH
25091: LD_INT 1
25093: ST_TO_ADDR
// if not k then
25094: LD_VAR 0 8
25098: NOT
25099: IFFALSE 25111
// k := array ;
25101: LD_ADDR_VAR 0 8
25105: PUSH
25106: LD_VAR 0 1
25110: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
25111: LD_ADDR_VAR 0 10
25115: PUSH
25116: LD_VAR 0 10
25120: PPUSH
25121: LD_VAR 0 8
25125: PPUSH
25126: LD_VAR 0 1
25130: PUSH
25131: LD_VAR 0 7
25135: ARRAY
25136: PPUSH
25137: CALL_OW 1
25141: ST_TO_ADDR
// end ;
25142: GO 25055
25144: POP
25145: POP
// array := tmp ;
25146: LD_ADDR_VAR 0 1
25150: PUSH
25151: LD_VAR 0 10
25155: ST_TO_ADDR
// end ;
25156: GO 25037
25158: POP
25159: POP
// result := array ;
25160: LD_ADDR_VAR 0 5
25164: PUSH
25165: LD_VAR 0 1
25169: ST_TO_ADDR
// end ;
25170: LD_VAR 0 5
25174: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
25175: LD_INT 0
25177: PPUSH
25178: PPUSH
// result := 0 ;
25179: LD_ADDR_VAR 0 3
25183: PUSH
25184: LD_INT 0
25186: ST_TO_ADDR
// if not array or not value in array then
25187: LD_VAR 0 1
25191: NOT
25192: PUSH
25193: LD_VAR 0 2
25197: PUSH
25198: LD_VAR 0 1
25202: IN
25203: NOT
25204: OR
25205: IFFALSE 25209
// exit ;
25207: GO 25263
// for i = 1 to array do
25209: LD_ADDR_VAR 0 4
25213: PUSH
25214: DOUBLE
25215: LD_INT 1
25217: DEC
25218: ST_TO_ADDR
25219: LD_VAR 0 1
25223: PUSH
25224: FOR_TO
25225: IFFALSE 25261
// if value = array [ i ] then
25227: LD_VAR 0 2
25231: PUSH
25232: LD_VAR 0 1
25236: PUSH
25237: LD_VAR 0 4
25241: ARRAY
25242: EQUAL
25243: IFFALSE 25259
// begin result := i ;
25245: LD_ADDR_VAR 0 3
25249: PUSH
25250: LD_VAR 0 4
25254: ST_TO_ADDR
// exit ;
25255: POP
25256: POP
25257: GO 25263
// end ;
25259: GO 25224
25261: POP
25262: POP
// end ;
25263: LD_VAR 0 3
25267: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
25268: LD_INT 0
25270: PPUSH
// vc_chassis := chassis ;
25271: LD_ADDR_OWVAR 37
25275: PUSH
25276: LD_VAR 0 1
25280: ST_TO_ADDR
// vc_engine := engine ;
25281: LD_ADDR_OWVAR 39
25285: PUSH
25286: LD_VAR 0 2
25290: ST_TO_ADDR
// vc_control := control ;
25291: LD_ADDR_OWVAR 38
25295: PUSH
25296: LD_VAR 0 3
25300: ST_TO_ADDR
// vc_weapon := weapon ;
25301: LD_ADDR_OWVAR 40
25305: PUSH
25306: LD_VAR 0 4
25310: ST_TO_ADDR
// vc_fuel_battery := fuel ;
25311: LD_ADDR_OWVAR 41
25315: PUSH
25316: LD_VAR 0 5
25320: ST_TO_ADDR
// end ;
25321: LD_VAR 0 6
25325: RET
// export function WantPlant ( unit ) ; var task ; begin
25326: LD_INT 0
25328: PPUSH
25329: PPUSH
// result := false ;
25330: LD_ADDR_VAR 0 2
25334: PUSH
25335: LD_INT 0
25337: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
25338: LD_ADDR_VAR 0 3
25342: PUSH
25343: LD_VAR 0 1
25347: PPUSH
25348: CALL_OW 437
25352: ST_TO_ADDR
// if task then
25353: LD_VAR 0 3
25357: IFFALSE 25385
// if task [ 1 ] [ 1 ] = p then
25359: LD_VAR 0 3
25363: PUSH
25364: LD_INT 1
25366: ARRAY
25367: PUSH
25368: LD_INT 1
25370: ARRAY
25371: PUSH
25372: LD_STRING p
25374: EQUAL
25375: IFFALSE 25385
// result := true ;
25377: LD_ADDR_VAR 0 2
25381: PUSH
25382: LD_INT 1
25384: ST_TO_ADDR
// end ;
25385: LD_VAR 0 2
25389: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
25390: LD_INT 0
25392: PPUSH
25393: PPUSH
25394: PPUSH
25395: PPUSH
// if pos < 1 then
25396: LD_VAR 0 2
25400: PUSH
25401: LD_INT 1
25403: LESS
25404: IFFALSE 25408
// exit ;
25406: GO 25711
// if pos = 1 then
25408: LD_VAR 0 2
25412: PUSH
25413: LD_INT 1
25415: EQUAL
25416: IFFALSE 25449
// result := Replace ( arr , pos [ 1 ] , value ) else
25418: LD_ADDR_VAR 0 4
25422: PUSH
25423: LD_VAR 0 1
25427: PPUSH
25428: LD_VAR 0 2
25432: PUSH
25433: LD_INT 1
25435: ARRAY
25436: PPUSH
25437: LD_VAR 0 3
25441: PPUSH
25442: CALL_OW 1
25446: ST_TO_ADDR
25447: GO 25711
// begin tmp := arr ;
25449: LD_ADDR_VAR 0 6
25453: PUSH
25454: LD_VAR 0 1
25458: ST_TO_ADDR
// s_arr := [ tmp ] ;
25459: LD_ADDR_VAR 0 7
25463: PUSH
25464: LD_VAR 0 6
25468: PUSH
25469: EMPTY
25470: LIST
25471: ST_TO_ADDR
// for i = 1 to pos - 1 do
25472: LD_ADDR_VAR 0 5
25476: PUSH
25477: DOUBLE
25478: LD_INT 1
25480: DEC
25481: ST_TO_ADDR
25482: LD_VAR 0 2
25486: PUSH
25487: LD_INT 1
25489: MINUS
25490: PUSH
25491: FOR_TO
25492: IFFALSE 25537
// begin tmp := tmp [ pos [ i ] ] ;
25494: LD_ADDR_VAR 0 6
25498: PUSH
25499: LD_VAR 0 6
25503: PUSH
25504: LD_VAR 0 2
25508: PUSH
25509: LD_VAR 0 5
25513: ARRAY
25514: ARRAY
25515: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
25516: LD_ADDR_VAR 0 7
25520: PUSH
25521: LD_VAR 0 7
25525: PUSH
25526: LD_VAR 0 6
25530: PUSH
25531: EMPTY
25532: LIST
25533: ADD
25534: ST_TO_ADDR
// end ;
25535: GO 25491
25537: POP
25538: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
25539: LD_ADDR_VAR 0 6
25543: PUSH
25544: LD_VAR 0 6
25548: PPUSH
25549: LD_VAR 0 2
25553: PUSH
25554: LD_VAR 0 2
25558: ARRAY
25559: PPUSH
25560: LD_VAR 0 3
25564: PPUSH
25565: CALL_OW 1
25569: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
25570: LD_ADDR_VAR 0 7
25574: PUSH
25575: LD_VAR 0 7
25579: PPUSH
25580: LD_VAR 0 7
25584: PPUSH
25585: LD_VAR 0 6
25589: PPUSH
25590: CALL_OW 1
25594: ST_TO_ADDR
// for i = s_arr downto 2 do
25595: LD_ADDR_VAR 0 5
25599: PUSH
25600: DOUBLE
25601: LD_VAR 0 7
25605: INC
25606: ST_TO_ADDR
25607: LD_INT 2
25609: PUSH
25610: FOR_DOWNTO
25611: IFFALSE 25695
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
25613: LD_ADDR_VAR 0 6
25617: PUSH
25618: LD_VAR 0 7
25622: PUSH
25623: LD_VAR 0 5
25627: PUSH
25628: LD_INT 1
25630: MINUS
25631: ARRAY
25632: PPUSH
25633: LD_VAR 0 2
25637: PUSH
25638: LD_VAR 0 5
25642: PUSH
25643: LD_INT 1
25645: MINUS
25646: ARRAY
25647: PPUSH
25648: LD_VAR 0 7
25652: PUSH
25653: LD_VAR 0 5
25657: ARRAY
25658: PPUSH
25659: CALL_OW 1
25663: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
25664: LD_ADDR_VAR 0 7
25668: PUSH
25669: LD_VAR 0 7
25673: PPUSH
25674: LD_VAR 0 5
25678: PUSH
25679: LD_INT 1
25681: MINUS
25682: PPUSH
25683: LD_VAR 0 6
25687: PPUSH
25688: CALL_OW 1
25692: ST_TO_ADDR
// end ;
25693: GO 25610
25695: POP
25696: POP
// result := s_arr [ 1 ] ;
25697: LD_ADDR_VAR 0 4
25701: PUSH
25702: LD_VAR 0 7
25706: PUSH
25707: LD_INT 1
25709: ARRAY
25710: ST_TO_ADDR
// end ; end ;
25711: LD_VAR 0 4
25715: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
25716: LD_INT 0
25718: PPUSH
25719: PPUSH
// if not list then
25720: LD_VAR 0 1
25724: NOT
25725: IFFALSE 25729
// exit ;
25727: GO 25820
// i := list [ pos1 ] ;
25729: LD_ADDR_VAR 0 5
25733: PUSH
25734: LD_VAR 0 1
25738: PUSH
25739: LD_VAR 0 2
25743: ARRAY
25744: ST_TO_ADDR
// if not i then
25745: LD_VAR 0 5
25749: NOT
25750: IFFALSE 25754
// exit ;
25752: GO 25820
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
25754: LD_ADDR_VAR 0 1
25758: PUSH
25759: LD_VAR 0 1
25763: PPUSH
25764: LD_VAR 0 2
25768: PPUSH
25769: LD_VAR 0 1
25773: PUSH
25774: LD_VAR 0 3
25778: ARRAY
25779: PPUSH
25780: CALL_OW 1
25784: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
25785: LD_ADDR_VAR 0 1
25789: PUSH
25790: LD_VAR 0 1
25794: PPUSH
25795: LD_VAR 0 3
25799: PPUSH
25800: LD_VAR 0 5
25804: PPUSH
25805: CALL_OW 1
25809: ST_TO_ADDR
// result := list ;
25810: LD_ADDR_VAR 0 4
25814: PUSH
25815: LD_VAR 0 1
25819: ST_TO_ADDR
// end ;
25820: LD_VAR 0 4
25824: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
25825: LD_INT 0
25827: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
25828: LD_ADDR_VAR 0 5
25832: PUSH
25833: LD_VAR 0 1
25837: PPUSH
25838: CALL_OW 250
25842: PPUSH
25843: LD_VAR 0 1
25847: PPUSH
25848: CALL_OW 251
25852: PPUSH
25853: LD_VAR 0 2
25857: PPUSH
25858: LD_VAR 0 3
25862: PPUSH
25863: LD_VAR 0 4
25867: PPUSH
25868: CALL 25878 0 5
25872: ST_TO_ADDR
// end ;
25873: LD_VAR 0 5
25877: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
25878: LD_INT 0
25880: PPUSH
25881: PPUSH
25882: PPUSH
25883: PPUSH
// if not list then
25884: LD_VAR 0 3
25888: NOT
25889: IFFALSE 25893
// exit ;
25891: GO 26281
// result := [ ] ;
25893: LD_ADDR_VAR 0 6
25897: PUSH
25898: EMPTY
25899: ST_TO_ADDR
// for i in list do
25900: LD_ADDR_VAR 0 7
25904: PUSH
25905: LD_VAR 0 3
25909: PUSH
25910: FOR_IN
25911: IFFALSE 26113
// begin tmp := GetDistUnitXY ( i , x , y ) ;
25913: LD_ADDR_VAR 0 9
25917: PUSH
25918: LD_VAR 0 7
25922: PPUSH
25923: LD_VAR 0 1
25927: PPUSH
25928: LD_VAR 0 2
25932: PPUSH
25933: CALL_OW 297
25937: ST_TO_ADDR
// if not result then
25938: LD_VAR 0 6
25942: NOT
25943: IFFALSE 25969
// result := [ [ i , tmp ] ] else
25945: LD_ADDR_VAR 0 6
25949: PUSH
25950: LD_VAR 0 7
25954: PUSH
25955: LD_VAR 0 9
25959: PUSH
25960: EMPTY
25961: LIST
25962: LIST
25963: PUSH
25964: EMPTY
25965: LIST
25966: ST_TO_ADDR
25967: GO 26111
// begin if result [ result ] [ 2 ] < tmp then
25969: LD_VAR 0 6
25973: PUSH
25974: LD_VAR 0 6
25978: ARRAY
25979: PUSH
25980: LD_INT 2
25982: ARRAY
25983: PUSH
25984: LD_VAR 0 9
25988: LESS
25989: IFFALSE 26031
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
25991: LD_ADDR_VAR 0 6
25995: PUSH
25996: LD_VAR 0 6
26000: PPUSH
26001: LD_VAR 0 6
26005: PUSH
26006: LD_INT 1
26008: PLUS
26009: PPUSH
26010: LD_VAR 0 7
26014: PUSH
26015: LD_VAR 0 9
26019: PUSH
26020: EMPTY
26021: LIST
26022: LIST
26023: PPUSH
26024: CALL_OW 2
26028: ST_TO_ADDR
26029: GO 26111
// for j = 1 to result do
26031: LD_ADDR_VAR 0 8
26035: PUSH
26036: DOUBLE
26037: LD_INT 1
26039: DEC
26040: ST_TO_ADDR
26041: LD_VAR 0 6
26045: PUSH
26046: FOR_TO
26047: IFFALSE 26109
// begin if tmp < result [ j ] [ 2 ] then
26049: LD_VAR 0 9
26053: PUSH
26054: LD_VAR 0 6
26058: PUSH
26059: LD_VAR 0 8
26063: ARRAY
26064: PUSH
26065: LD_INT 2
26067: ARRAY
26068: LESS
26069: IFFALSE 26107
// begin result := Insert ( result , j , [ i , tmp ] ) ;
26071: LD_ADDR_VAR 0 6
26075: PUSH
26076: LD_VAR 0 6
26080: PPUSH
26081: LD_VAR 0 8
26085: PPUSH
26086: LD_VAR 0 7
26090: PUSH
26091: LD_VAR 0 9
26095: PUSH
26096: EMPTY
26097: LIST
26098: LIST
26099: PPUSH
26100: CALL_OW 2
26104: ST_TO_ADDR
// break ;
26105: GO 26109
// end ; end ;
26107: GO 26046
26109: POP
26110: POP
// end ; end ;
26111: GO 25910
26113: POP
26114: POP
// if result and not asc then
26115: LD_VAR 0 6
26119: PUSH
26120: LD_VAR 0 4
26124: NOT
26125: AND
26126: IFFALSE 26201
// begin tmp := result ;
26128: LD_ADDR_VAR 0 9
26132: PUSH
26133: LD_VAR 0 6
26137: ST_TO_ADDR
// for i = tmp downto 1 do
26138: LD_ADDR_VAR 0 7
26142: PUSH
26143: DOUBLE
26144: LD_VAR 0 9
26148: INC
26149: ST_TO_ADDR
26150: LD_INT 1
26152: PUSH
26153: FOR_DOWNTO
26154: IFFALSE 26199
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
26156: LD_ADDR_VAR 0 6
26160: PUSH
26161: LD_VAR 0 6
26165: PPUSH
26166: LD_VAR 0 9
26170: PUSH
26171: LD_VAR 0 7
26175: MINUS
26176: PUSH
26177: LD_INT 1
26179: PLUS
26180: PPUSH
26181: LD_VAR 0 9
26185: PUSH
26186: LD_VAR 0 7
26190: ARRAY
26191: PPUSH
26192: CALL_OW 1
26196: ST_TO_ADDR
26197: GO 26153
26199: POP
26200: POP
// end ; tmp := [ ] ;
26201: LD_ADDR_VAR 0 9
26205: PUSH
26206: EMPTY
26207: ST_TO_ADDR
// if mode then
26208: LD_VAR 0 5
26212: IFFALSE 26281
// begin for i = 1 to result do
26214: LD_ADDR_VAR 0 7
26218: PUSH
26219: DOUBLE
26220: LD_INT 1
26222: DEC
26223: ST_TO_ADDR
26224: LD_VAR 0 6
26228: PUSH
26229: FOR_TO
26230: IFFALSE 26269
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
26232: LD_ADDR_VAR 0 9
26236: PUSH
26237: LD_VAR 0 9
26241: PPUSH
26242: LD_VAR 0 7
26246: PPUSH
26247: LD_VAR 0 6
26251: PUSH
26252: LD_VAR 0 7
26256: ARRAY
26257: PUSH
26258: LD_INT 1
26260: ARRAY
26261: PPUSH
26262: CALL_OW 1
26266: ST_TO_ADDR
26267: GO 26229
26269: POP
26270: POP
// result := tmp ;
26271: LD_ADDR_VAR 0 6
26275: PUSH
26276: LD_VAR 0 9
26280: ST_TO_ADDR
// end ; end ;
26281: LD_VAR 0 6
26285: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
26286: LD_INT 0
26288: PPUSH
26289: PPUSH
26290: PPUSH
26291: PPUSH
26292: PPUSH
26293: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
26294: LD_ADDR_VAR 0 5
26298: PUSH
26299: LD_INT 0
26301: PUSH
26302: LD_INT 0
26304: PUSH
26305: LD_INT 0
26307: PUSH
26308: EMPTY
26309: PUSH
26310: EMPTY
26311: LIST
26312: LIST
26313: LIST
26314: LIST
26315: ST_TO_ADDR
// if not x or not y then
26316: LD_VAR 0 2
26320: NOT
26321: PUSH
26322: LD_VAR 0 3
26326: NOT
26327: OR
26328: IFFALSE 26332
// exit ;
26330: GO 27978
// if not range then
26332: LD_VAR 0 4
26336: NOT
26337: IFFALSE 26347
// range := 10 ;
26339: LD_ADDR_VAR 0 4
26343: PUSH
26344: LD_INT 10
26346: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26347: LD_ADDR_VAR 0 8
26351: PUSH
26352: LD_INT 81
26354: PUSH
26355: LD_VAR 0 1
26359: PUSH
26360: EMPTY
26361: LIST
26362: LIST
26363: PUSH
26364: LD_INT 92
26366: PUSH
26367: LD_VAR 0 2
26371: PUSH
26372: LD_VAR 0 3
26376: PUSH
26377: LD_VAR 0 4
26381: PUSH
26382: EMPTY
26383: LIST
26384: LIST
26385: LIST
26386: LIST
26387: PUSH
26388: LD_INT 3
26390: PUSH
26391: LD_INT 21
26393: PUSH
26394: LD_INT 3
26396: PUSH
26397: EMPTY
26398: LIST
26399: LIST
26400: PUSH
26401: EMPTY
26402: LIST
26403: LIST
26404: PUSH
26405: EMPTY
26406: LIST
26407: LIST
26408: LIST
26409: PPUSH
26410: CALL_OW 69
26414: ST_TO_ADDR
// if not tmp then
26415: LD_VAR 0 8
26419: NOT
26420: IFFALSE 26424
// exit ;
26422: GO 27978
// for i in tmp do
26424: LD_ADDR_VAR 0 6
26428: PUSH
26429: LD_VAR 0 8
26433: PUSH
26434: FOR_IN
26435: IFFALSE 27953
// begin points := [ 0 , 0 , 0 ] ;
26437: LD_ADDR_VAR 0 9
26441: PUSH
26442: LD_INT 0
26444: PUSH
26445: LD_INT 0
26447: PUSH
26448: LD_INT 0
26450: PUSH
26451: EMPTY
26452: LIST
26453: LIST
26454: LIST
26455: ST_TO_ADDR
// bpoints := 1 ;
26456: LD_ADDR_VAR 0 10
26460: PUSH
26461: LD_INT 1
26463: ST_TO_ADDR
// case GetType ( i ) of unit_human :
26464: LD_VAR 0 6
26468: PPUSH
26469: CALL_OW 247
26473: PUSH
26474: LD_INT 1
26476: DOUBLE
26477: EQUAL
26478: IFTRUE 26482
26480: GO 27060
26482: POP
// begin if GetClass ( i ) = 1 then
26483: LD_VAR 0 6
26487: PPUSH
26488: CALL_OW 257
26492: PUSH
26493: LD_INT 1
26495: EQUAL
26496: IFFALSE 26517
// points := [ 10 , 5 , 3 ] ;
26498: LD_ADDR_VAR 0 9
26502: PUSH
26503: LD_INT 10
26505: PUSH
26506: LD_INT 5
26508: PUSH
26509: LD_INT 3
26511: PUSH
26512: EMPTY
26513: LIST
26514: LIST
26515: LIST
26516: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
26517: LD_VAR 0 6
26521: PPUSH
26522: CALL_OW 257
26526: PUSH
26527: LD_INT 2
26529: PUSH
26530: LD_INT 3
26532: PUSH
26533: LD_INT 4
26535: PUSH
26536: EMPTY
26537: LIST
26538: LIST
26539: LIST
26540: IN
26541: IFFALSE 26562
// points := [ 3 , 2 , 1 ] ;
26543: LD_ADDR_VAR 0 9
26547: PUSH
26548: LD_INT 3
26550: PUSH
26551: LD_INT 2
26553: PUSH
26554: LD_INT 1
26556: PUSH
26557: EMPTY
26558: LIST
26559: LIST
26560: LIST
26561: ST_TO_ADDR
// if GetClass ( i ) = 5 then
26562: LD_VAR 0 6
26566: PPUSH
26567: CALL_OW 257
26571: PUSH
26572: LD_INT 5
26574: EQUAL
26575: IFFALSE 26596
// points := [ 130 , 5 , 2 ] ;
26577: LD_ADDR_VAR 0 9
26581: PUSH
26582: LD_INT 130
26584: PUSH
26585: LD_INT 5
26587: PUSH
26588: LD_INT 2
26590: PUSH
26591: EMPTY
26592: LIST
26593: LIST
26594: LIST
26595: ST_TO_ADDR
// if GetClass ( i ) = 8 then
26596: LD_VAR 0 6
26600: PPUSH
26601: CALL_OW 257
26605: PUSH
26606: LD_INT 8
26608: EQUAL
26609: IFFALSE 26630
// points := [ 35 , 35 , 30 ] ;
26611: LD_ADDR_VAR 0 9
26615: PUSH
26616: LD_INT 35
26618: PUSH
26619: LD_INT 35
26621: PUSH
26622: LD_INT 30
26624: PUSH
26625: EMPTY
26626: LIST
26627: LIST
26628: LIST
26629: ST_TO_ADDR
// if GetClass ( i ) = 9 then
26630: LD_VAR 0 6
26634: PPUSH
26635: CALL_OW 257
26639: PUSH
26640: LD_INT 9
26642: EQUAL
26643: IFFALSE 26664
// points := [ 20 , 55 , 40 ] ;
26645: LD_ADDR_VAR 0 9
26649: PUSH
26650: LD_INT 20
26652: PUSH
26653: LD_INT 55
26655: PUSH
26656: LD_INT 40
26658: PUSH
26659: EMPTY
26660: LIST
26661: LIST
26662: LIST
26663: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
26664: LD_VAR 0 6
26668: PPUSH
26669: CALL_OW 257
26673: PUSH
26674: LD_INT 12
26676: PUSH
26677: LD_INT 16
26679: PUSH
26680: EMPTY
26681: LIST
26682: LIST
26683: IN
26684: IFFALSE 26705
// points := [ 5 , 3 , 2 ] ;
26686: LD_ADDR_VAR 0 9
26690: PUSH
26691: LD_INT 5
26693: PUSH
26694: LD_INT 3
26696: PUSH
26697: LD_INT 2
26699: PUSH
26700: EMPTY
26701: LIST
26702: LIST
26703: LIST
26704: ST_TO_ADDR
// if GetClass ( i ) = 17 then
26705: LD_VAR 0 6
26709: PPUSH
26710: CALL_OW 257
26714: PUSH
26715: LD_INT 17
26717: EQUAL
26718: IFFALSE 26739
// points := [ 100 , 50 , 75 ] ;
26720: LD_ADDR_VAR 0 9
26724: PUSH
26725: LD_INT 100
26727: PUSH
26728: LD_INT 50
26730: PUSH
26731: LD_INT 75
26733: PUSH
26734: EMPTY
26735: LIST
26736: LIST
26737: LIST
26738: ST_TO_ADDR
// if GetClass ( i ) = 15 then
26739: LD_VAR 0 6
26743: PPUSH
26744: CALL_OW 257
26748: PUSH
26749: LD_INT 15
26751: EQUAL
26752: IFFALSE 26773
// points := [ 10 , 5 , 3 ] ;
26754: LD_ADDR_VAR 0 9
26758: PUSH
26759: LD_INT 10
26761: PUSH
26762: LD_INT 5
26764: PUSH
26765: LD_INT 3
26767: PUSH
26768: EMPTY
26769: LIST
26770: LIST
26771: LIST
26772: ST_TO_ADDR
// if GetClass ( i ) = 14 then
26773: LD_VAR 0 6
26777: PPUSH
26778: CALL_OW 257
26782: PUSH
26783: LD_INT 14
26785: EQUAL
26786: IFFALSE 26807
// points := [ 10 , 0 , 0 ] ;
26788: LD_ADDR_VAR 0 9
26792: PUSH
26793: LD_INT 10
26795: PUSH
26796: LD_INT 0
26798: PUSH
26799: LD_INT 0
26801: PUSH
26802: EMPTY
26803: LIST
26804: LIST
26805: LIST
26806: ST_TO_ADDR
// if GetClass ( i ) = 11 then
26807: LD_VAR 0 6
26811: PPUSH
26812: CALL_OW 257
26816: PUSH
26817: LD_INT 11
26819: EQUAL
26820: IFFALSE 26841
// points := [ 30 , 10 , 5 ] ;
26822: LD_ADDR_VAR 0 9
26826: PUSH
26827: LD_INT 30
26829: PUSH
26830: LD_INT 10
26832: PUSH
26833: LD_INT 5
26835: PUSH
26836: EMPTY
26837: LIST
26838: LIST
26839: LIST
26840: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
26841: LD_VAR 0 1
26845: PPUSH
26846: LD_INT 5
26848: PPUSH
26849: CALL_OW 321
26853: PUSH
26854: LD_INT 2
26856: EQUAL
26857: IFFALSE 26874
// bpoints := bpoints * 1.8 ;
26859: LD_ADDR_VAR 0 10
26863: PUSH
26864: LD_VAR 0 10
26868: PUSH
26869: LD_REAL  1.80000000000000E+0000
26872: MUL
26873: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
26874: LD_VAR 0 6
26878: PPUSH
26879: CALL_OW 257
26883: PUSH
26884: LD_INT 1
26886: PUSH
26887: LD_INT 2
26889: PUSH
26890: LD_INT 3
26892: PUSH
26893: LD_INT 4
26895: PUSH
26896: EMPTY
26897: LIST
26898: LIST
26899: LIST
26900: LIST
26901: IN
26902: PUSH
26903: LD_VAR 0 1
26907: PPUSH
26908: LD_INT 51
26910: PPUSH
26911: CALL_OW 321
26915: PUSH
26916: LD_INT 2
26918: EQUAL
26919: AND
26920: IFFALSE 26937
// bpoints := bpoints * 1.2 ;
26922: LD_ADDR_VAR 0 10
26926: PUSH
26927: LD_VAR 0 10
26931: PUSH
26932: LD_REAL  1.20000000000000E+0000
26935: MUL
26936: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
26937: LD_VAR 0 6
26941: PPUSH
26942: CALL_OW 257
26946: PUSH
26947: LD_INT 5
26949: PUSH
26950: LD_INT 7
26952: PUSH
26953: LD_INT 9
26955: PUSH
26956: EMPTY
26957: LIST
26958: LIST
26959: LIST
26960: IN
26961: PUSH
26962: LD_VAR 0 1
26966: PPUSH
26967: LD_INT 52
26969: PPUSH
26970: CALL_OW 321
26974: PUSH
26975: LD_INT 2
26977: EQUAL
26978: AND
26979: IFFALSE 26996
// bpoints := bpoints * 1.5 ;
26981: LD_ADDR_VAR 0 10
26985: PUSH
26986: LD_VAR 0 10
26990: PUSH
26991: LD_REAL  1.50000000000000E+0000
26994: MUL
26995: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
26996: LD_VAR 0 1
27000: PPUSH
27001: LD_INT 66
27003: PPUSH
27004: CALL_OW 321
27008: PUSH
27009: LD_INT 2
27011: EQUAL
27012: IFFALSE 27029
// bpoints := bpoints * 1.1 ;
27014: LD_ADDR_VAR 0 10
27018: PUSH
27019: LD_VAR 0 10
27023: PUSH
27024: LD_REAL  1.10000000000000E+0000
27027: MUL
27028: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
27029: LD_ADDR_VAR 0 10
27033: PUSH
27034: LD_VAR 0 10
27038: PUSH
27039: LD_VAR 0 6
27043: PPUSH
27044: LD_INT 1
27046: PPUSH
27047: CALL_OW 259
27051: PUSH
27052: LD_REAL  1.15000000000000E+0000
27055: MUL
27056: MUL
27057: ST_TO_ADDR
// end ; unit_vehicle :
27058: GO 27882
27060: LD_INT 2
27062: DOUBLE
27063: EQUAL
27064: IFTRUE 27068
27066: GO 27870
27068: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
27069: LD_VAR 0 6
27073: PPUSH
27074: CALL_OW 264
27078: PUSH
27079: LD_INT 2
27081: PUSH
27082: LD_INT 42
27084: PUSH
27085: LD_INT 24
27087: PUSH
27088: EMPTY
27089: LIST
27090: LIST
27091: LIST
27092: IN
27093: IFFALSE 27114
// points := [ 25 , 5 , 3 ] ;
27095: LD_ADDR_VAR 0 9
27099: PUSH
27100: LD_INT 25
27102: PUSH
27103: LD_INT 5
27105: PUSH
27106: LD_INT 3
27108: PUSH
27109: EMPTY
27110: LIST
27111: LIST
27112: LIST
27113: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
27114: LD_VAR 0 6
27118: PPUSH
27119: CALL_OW 264
27123: PUSH
27124: LD_INT 4
27126: PUSH
27127: LD_INT 43
27129: PUSH
27130: LD_INT 25
27132: PUSH
27133: EMPTY
27134: LIST
27135: LIST
27136: LIST
27137: IN
27138: IFFALSE 27159
// points := [ 40 , 15 , 5 ] ;
27140: LD_ADDR_VAR 0 9
27144: PUSH
27145: LD_INT 40
27147: PUSH
27148: LD_INT 15
27150: PUSH
27151: LD_INT 5
27153: PUSH
27154: EMPTY
27155: LIST
27156: LIST
27157: LIST
27158: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
27159: LD_VAR 0 6
27163: PPUSH
27164: CALL_OW 264
27168: PUSH
27169: LD_INT 3
27171: PUSH
27172: LD_INT 23
27174: PUSH
27175: EMPTY
27176: LIST
27177: LIST
27178: IN
27179: IFFALSE 27200
// points := [ 7 , 25 , 8 ] ;
27181: LD_ADDR_VAR 0 9
27185: PUSH
27186: LD_INT 7
27188: PUSH
27189: LD_INT 25
27191: PUSH
27192: LD_INT 8
27194: PUSH
27195: EMPTY
27196: LIST
27197: LIST
27198: LIST
27199: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
27200: LD_VAR 0 6
27204: PPUSH
27205: CALL_OW 264
27209: PUSH
27210: LD_INT 5
27212: PUSH
27213: LD_INT 27
27215: PUSH
27216: LD_INT 44
27218: PUSH
27219: EMPTY
27220: LIST
27221: LIST
27222: LIST
27223: IN
27224: IFFALSE 27245
// points := [ 14 , 50 , 16 ] ;
27226: LD_ADDR_VAR 0 9
27230: PUSH
27231: LD_INT 14
27233: PUSH
27234: LD_INT 50
27236: PUSH
27237: LD_INT 16
27239: PUSH
27240: EMPTY
27241: LIST
27242: LIST
27243: LIST
27244: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
27245: LD_VAR 0 6
27249: PPUSH
27250: CALL_OW 264
27254: PUSH
27255: LD_INT 6
27257: PUSH
27258: LD_INT 46
27260: PUSH
27261: EMPTY
27262: LIST
27263: LIST
27264: IN
27265: IFFALSE 27286
// points := [ 32 , 120 , 70 ] ;
27267: LD_ADDR_VAR 0 9
27271: PUSH
27272: LD_INT 32
27274: PUSH
27275: LD_INT 120
27277: PUSH
27278: LD_INT 70
27280: PUSH
27281: EMPTY
27282: LIST
27283: LIST
27284: LIST
27285: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
27286: LD_VAR 0 6
27290: PPUSH
27291: CALL_OW 264
27295: PUSH
27296: LD_INT 7
27298: PUSH
27299: LD_INT 28
27301: PUSH
27302: LD_INT 45
27304: PUSH
27305: EMPTY
27306: LIST
27307: LIST
27308: LIST
27309: IN
27310: IFFALSE 27331
// points := [ 35 , 20 , 45 ] ;
27312: LD_ADDR_VAR 0 9
27316: PUSH
27317: LD_INT 35
27319: PUSH
27320: LD_INT 20
27322: PUSH
27323: LD_INT 45
27325: PUSH
27326: EMPTY
27327: LIST
27328: LIST
27329: LIST
27330: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
27331: LD_VAR 0 6
27335: PPUSH
27336: CALL_OW 264
27340: PUSH
27341: LD_INT 47
27343: PUSH
27344: EMPTY
27345: LIST
27346: IN
27347: IFFALSE 27368
// points := [ 67 , 45 , 75 ] ;
27349: LD_ADDR_VAR 0 9
27353: PUSH
27354: LD_INT 67
27356: PUSH
27357: LD_INT 45
27359: PUSH
27360: LD_INT 75
27362: PUSH
27363: EMPTY
27364: LIST
27365: LIST
27366: LIST
27367: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
27368: LD_VAR 0 6
27372: PPUSH
27373: CALL_OW 264
27377: PUSH
27378: LD_INT 26
27380: PUSH
27381: EMPTY
27382: LIST
27383: IN
27384: IFFALSE 27405
// points := [ 120 , 30 , 80 ] ;
27386: LD_ADDR_VAR 0 9
27390: PUSH
27391: LD_INT 120
27393: PUSH
27394: LD_INT 30
27396: PUSH
27397: LD_INT 80
27399: PUSH
27400: EMPTY
27401: LIST
27402: LIST
27403: LIST
27404: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
27405: LD_VAR 0 6
27409: PPUSH
27410: CALL_OW 264
27414: PUSH
27415: LD_INT 22
27417: PUSH
27418: EMPTY
27419: LIST
27420: IN
27421: IFFALSE 27442
// points := [ 40 , 1 , 1 ] ;
27423: LD_ADDR_VAR 0 9
27427: PUSH
27428: LD_INT 40
27430: PUSH
27431: LD_INT 1
27433: PUSH
27434: LD_INT 1
27436: PUSH
27437: EMPTY
27438: LIST
27439: LIST
27440: LIST
27441: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
27442: LD_VAR 0 6
27446: PPUSH
27447: CALL_OW 264
27451: PUSH
27452: LD_INT 29
27454: PUSH
27455: EMPTY
27456: LIST
27457: IN
27458: IFFALSE 27479
// points := [ 70 , 200 , 400 ] ;
27460: LD_ADDR_VAR 0 9
27464: PUSH
27465: LD_INT 70
27467: PUSH
27468: LD_INT 200
27470: PUSH
27471: LD_INT 400
27473: PUSH
27474: EMPTY
27475: LIST
27476: LIST
27477: LIST
27478: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
27479: LD_VAR 0 6
27483: PPUSH
27484: CALL_OW 264
27488: PUSH
27489: LD_INT 14
27491: PUSH
27492: LD_INT 53
27494: PUSH
27495: EMPTY
27496: LIST
27497: LIST
27498: IN
27499: IFFALSE 27520
// points := [ 40 , 10 , 20 ] ;
27501: LD_ADDR_VAR 0 9
27505: PUSH
27506: LD_INT 40
27508: PUSH
27509: LD_INT 10
27511: PUSH
27512: LD_INT 20
27514: PUSH
27515: EMPTY
27516: LIST
27517: LIST
27518: LIST
27519: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
27520: LD_VAR 0 6
27524: PPUSH
27525: CALL_OW 264
27529: PUSH
27530: LD_INT 9
27532: PUSH
27533: EMPTY
27534: LIST
27535: IN
27536: IFFALSE 27557
// points := [ 5 , 70 , 20 ] ;
27538: LD_ADDR_VAR 0 9
27542: PUSH
27543: LD_INT 5
27545: PUSH
27546: LD_INT 70
27548: PUSH
27549: LD_INT 20
27551: PUSH
27552: EMPTY
27553: LIST
27554: LIST
27555: LIST
27556: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
27557: LD_VAR 0 6
27561: PPUSH
27562: CALL_OW 264
27566: PUSH
27567: LD_INT 10
27569: PUSH
27570: EMPTY
27571: LIST
27572: IN
27573: IFFALSE 27594
// points := [ 35 , 110 , 70 ] ;
27575: LD_ADDR_VAR 0 9
27579: PUSH
27580: LD_INT 35
27582: PUSH
27583: LD_INT 110
27585: PUSH
27586: LD_INT 70
27588: PUSH
27589: EMPTY
27590: LIST
27591: LIST
27592: LIST
27593: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
27594: LD_VAR 0 6
27598: PPUSH
27599: CALL_OW 265
27603: PUSH
27604: LD_INT 25
27606: EQUAL
27607: IFFALSE 27628
// points := [ 80 , 65 , 100 ] ;
27609: LD_ADDR_VAR 0 9
27613: PUSH
27614: LD_INT 80
27616: PUSH
27617: LD_INT 65
27619: PUSH
27620: LD_INT 100
27622: PUSH
27623: EMPTY
27624: LIST
27625: LIST
27626: LIST
27627: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
27628: LD_VAR 0 6
27632: PPUSH
27633: CALL_OW 263
27637: PUSH
27638: LD_INT 1
27640: EQUAL
27641: IFFALSE 27676
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
27643: LD_ADDR_VAR 0 10
27647: PUSH
27648: LD_VAR 0 10
27652: PUSH
27653: LD_VAR 0 6
27657: PPUSH
27658: CALL_OW 311
27662: PPUSH
27663: LD_INT 3
27665: PPUSH
27666: CALL_OW 259
27670: PUSH
27671: LD_INT 4
27673: MUL
27674: MUL
27675: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
27676: LD_VAR 0 6
27680: PPUSH
27681: CALL_OW 263
27685: PUSH
27686: LD_INT 2
27688: EQUAL
27689: IFFALSE 27740
// begin j := IsControledBy ( i ) ;
27691: LD_ADDR_VAR 0 7
27695: PUSH
27696: LD_VAR 0 6
27700: PPUSH
27701: CALL_OW 312
27705: ST_TO_ADDR
// if j then
27706: LD_VAR 0 7
27710: IFFALSE 27740
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
27712: LD_ADDR_VAR 0 10
27716: PUSH
27717: LD_VAR 0 10
27721: PUSH
27722: LD_VAR 0 7
27726: PPUSH
27727: LD_INT 3
27729: PPUSH
27730: CALL_OW 259
27734: PUSH
27735: LD_INT 3
27737: MUL
27738: MUL
27739: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
27740: LD_VAR 0 6
27744: PPUSH
27745: CALL_OW 264
27749: PUSH
27750: LD_INT 5
27752: PUSH
27753: LD_INT 6
27755: PUSH
27756: LD_INT 46
27758: PUSH
27759: LD_INT 44
27761: PUSH
27762: LD_INT 47
27764: PUSH
27765: LD_INT 45
27767: PUSH
27768: LD_INT 28
27770: PUSH
27771: LD_INT 7
27773: PUSH
27774: LD_INT 27
27776: PUSH
27777: LD_INT 29
27779: PUSH
27780: EMPTY
27781: LIST
27782: LIST
27783: LIST
27784: LIST
27785: LIST
27786: LIST
27787: LIST
27788: LIST
27789: LIST
27790: LIST
27791: IN
27792: PUSH
27793: LD_VAR 0 1
27797: PPUSH
27798: LD_INT 52
27800: PPUSH
27801: CALL_OW 321
27805: PUSH
27806: LD_INT 2
27808: EQUAL
27809: AND
27810: IFFALSE 27827
// bpoints := bpoints * 1.2 ;
27812: LD_ADDR_VAR 0 10
27816: PUSH
27817: LD_VAR 0 10
27821: PUSH
27822: LD_REAL  1.20000000000000E+0000
27825: MUL
27826: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
27827: LD_VAR 0 6
27831: PPUSH
27832: CALL_OW 264
27836: PUSH
27837: LD_INT 6
27839: PUSH
27840: LD_INT 46
27842: PUSH
27843: LD_INT 47
27845: PUSH
27846: EMPTY
27847: LIST
27848: LIST
27849: LIST
27850: IN
27851: IFFALSE 27868
// bpoints := bpoints * 1.2 ;
27853: LD_ADDR_VAR 0 10
27857: PUSH
27858: LD_VAR 0 10
27862: PUSH
27863: LD_REAL  1.20000000000000E+0000
27866: MUL
27867: ST_TO_ADDR
// end ; unit_building :
27868: GO 27882
27870: LD_INT 3
27872: DOUBLE
27873: EQUAL
27874: IFTRUE 27878
27876: GO 27881
27878: POP
// ; end ;
27879: GO 27882
27881: POP
// for j = 1 to 3 do
27882: LD_ADDR_VAR 0 7
27886: PUSH
27887: DOUBLE
27888: LD_INT 1
27890: DEC
27891: ST_TO_ADDR
27892: LD_INT 3
27894: PUSH
27895: FOR_TO
27896: IFFALSE 27949
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
27898: LD_ADDR_VAR 0 5
27902: PUSH
27903: LD_VAR 0 5
27907: PPUSH
27908: LD_VAR 0 7
27912: PPUSH
27913: LD_VAR 0 5
27917: PUSH
27918: LD_VAR 0 7
27922: ARRAY
27923: PUSH
27924: LD_VAR 0 9
27928: PUSH
27929: LD_VAR 0 7
27933: ARRAY
27934: PUSH
27935: LD_VAR 0 10
27939: MUL
27940: PLUS
27941: PPUSH
27942: CALL_OW 1
27946: ST_TO_ADDR
27947: GO 27895
27949: POP
27950: POP
// end ;
27951: GO 26434
27953: POP
27954: POP
// result := Replace ( result , 4 , tmp ) ;
27955: LD_ADDR_VAR 0 5
27959: PUSH
27960: LD_VAR 0 5
27964: PPUSH
27965: LD_INT 4
27967: PPUSH
27968: LD_VAR 0 8
27972: PPUSH
27973: CALL_OW 1
27977: ST_TO_ADDR
// end ;
27978: LD_VAR 0 5
27982: RET
// export function DangerAtRange ( unit , range ) ; begin
27983: LD_INT 0
27985: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
27986: LD_ADDR_VAR 0 3
27990: PUSH
27991: LD_VAR 0 1
27995: PPUSH
27996: CALL_OW 255
28000: PPUSH
28001: LD_VAR 0 1
28005: PPUSH
28006: CALL_OW 250
28010: PPUSH
28011: LD_VAR 0 1
28015: PPUSH
28016: CALL_OW 251
28020: PPUSH
28021: LD_VAR 0 2
28025: PPUSH
28026: CALL 26286 0 4
28030: ST_TO_ADDR
// end ;
28031: LD_VAR 0 3
28035: RET
// export function DangerInArea ( side , area ) ; begin
28036: LD_INT 0
28038: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
28039: LD_ADDR_VAR 0 3
28043: PUSH
28044: LD_VAR 0 2
28048: PPUSH
28049: LD_INT 81
28051: PUSH
28052: LD_VAR 0 1
28056: PUSH
28057: EMPTY
28058: LIST
28059: LIST
28060: PPUSH
28061: CALL_OW 70
28065: ST_TO_ADDR
// end ;
28066: LD_VAR 0 3
28070: RET
// export function IsExtension ( b ) ; begin
28071: LD_INT 0
28073: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
28074: LD_ADDR_VAR 0 2
28078: PUSH
28079: LD_VAR 0 1
28083: PUSH
28084: LD_INT 23
28086: PUSH
28087: LD_INT 20
28089: PUSH
28090: LD_INT 22
28092: PUSH
28093: LD_INT 17
28095: PUSH
28096: LD_INT 24
28098: PUSH
28099: LD_INT 21
28101: PUSH
28102: LD_INT 19
28104: PUSH
28105: LD_INT 16
28107: PUSH
28108: LD_INT 25
28110: PUSH
28111: LD_INT 18
28113: PUSH
28114: EMPTY
28115: LIST
28116: LIST
28117: LIST
28118: LIST
28119: LIST
28120: LIST
28121: LIST
28122: LIST
28123: LIST
28124: LIST
28125: IN
28126: ST_TO_ADDR
// end ;
28127: LD_VAR 0 2
28131: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
28132: LD_INT 0
28134: PPUSH
28135: PPUSH
28136: PPUSH
// result := [ ] ;
28137: LD_ADDR_VAR 0 3
28141: PUSH
28142: EMPTY
28143: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
28144: LD_ADDR_VAR 0 4
28148: PUSH
28149: LD_VAR 0 2
28153: PPUSH
28154: LD_INT 21
28156: PUSH
28157: LD_INT 3
28159: PUSH
28160: EMPTY
28161: LIST
28162: LIST
28163: PPUSH
28164: CALL_OW 70
28168: ST_TO_ADDR
// if not tmp then
28169: LD_VAR 0 4
28173: NOT
28174: IFFALSE 28178
// exit ;
28176: GO 28236
// for i in tmp do
28178: LD_ADDR_VAR 0 5
28182: PUSH
28183: LD_VAR 0 4
28187: PUSH
28188: FOR_IN
28189: IFFALSE 28224
// if GetBase ( i ) <> base then
28191: LD_VAR 0 5
28195: PPUSH
28196: CALL_OW 274
28200: PUSH
28201: LD_VAR 0 1
28205: NONEQUAL
28206: IFFALSE 28222
// ComLinkToBase ( base , i ) ;
28208: LD_VAR 0 1
28212: PPUSH
28213: LD_VAR 0 5
28217: PPUSH
28218: CALL_OW 169
28222: GO 28188
28224: POP
28225: POP
// result := tmp ;
28226: LD_ADDR_VAR 0 3
28230: PUSH
28231: LD_VAR 0 4
28235: ST_TO_ADDR
// end ;
28236: LD_VAR 0 3
28240: RET
// export function ComComplete ( unit , b ) ; var i ; begin
28241: LD_INT 0
28243: PPUSH
28244: PPUSH
// if BuildingStatus ( b ) = bs_build then
28245: LD_VAR 0 2
28249: PPUSH
28250: CALL_OW 461
28254: PUSH
28255: LD_INT 1
28257: EQUAL
28258: IFFALSE 28318
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
28260: LD_VAR 0 1
28264: PPUSH
28265: LD_STRING h
28267: PUSH
28268: LD_VAR 0 2
28272: PPUSH
28273: CALL_OW 250
28277: PUSH
28278: LD_VAR 0 2
28282: PPUSH
28283: CALL_OW 251
28287: PUSH
28288: LD_VAR 0 2
28292: PUSH
28293: LD_INT 0
28295: PUSH
28296: LD_INT 0
28298: PUSH
28299: LD_INT 0
28301: PUSH
28302: EMPTY
28303: LIST
28304: LIST
28305: LIST
28306: LIST
28307: LIST
28308: LIST
28309: LIST
28310: PUSH
28311: EMPTY
28312: LIST
28313: PPUSH
28314: CALL_OW 446
// end ;
28318: LD_VAR 0 3
28322: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
28323: LD_INT 0
28325: PPUSH
28326: PPUSH
28327: PPUSH
28328: PPUSH
28329: PPUSH
28330: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
28331: LD_VAR 0 1
28335: NOT
28336: PUSH
28337: LD_VAR 0 1
28341: PPUSH
28342: CALL_OW 263
28346: PUSH
28347: LD_INT 2
28349: EQUAL
28350: NOT
28351: OR
28352: IFFALSE 28356
// exit ;
28354: GO 28672
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
28356: LD_ADDR_VAR 0 6
28360: PUSH
28361: LD_INT 22
28363: PUSH
28364: LD_VAR 0 1
28368: PPUSH
28369: CALL_OW 255
28373: PUSH
28374: EMPTY
28375: LIST
28376: LIST
28377: PUSH
28378: LD_INT 2
28380: PUSH
28381: LD_INT 30
28383: PUSH
28384: LD_INT 36
28386: PUSH
28387: EMPTY
28388: LIST
28389: LIST
28390: PUSH
28391: LD_INT 34
28393: PUSH
28394: LD_INT 31
28396: PUSH
28397: EMPTY
28398: LIST
28399: LIST
28400: PUSH
28401: EMPTY
28402: LIST
28403: LIST
28404: LIST
28405: PUSH
28406: EMPTY
28407: LIST
28408: LIST
28409: PPUSH
28410: CALL_OW 69
28414: ST_TO_ADDR
// if not tmp then
28415: LD_VAR 0 6
28419: NOT
28420: IFFALSE 28424
// exit ;
28422: GO 28672
// result := [ ] ;
28424: LD_ADDR_VAR 0 2
28428: PUSH
28429: EMPTY
28430: ST_TO_ADDR
// for i in tmp do
28431: LD_ADDR_VAR 0 3
28435: PUSH
28436: LD_VAR 0 6
28440: PUSH
28441: FOR_IN
28442: IFFALSE 28513
// begin t := UnitsInside ( i ) ;
28444: LD_ADDR_VAR 0 4
28448: PUSH
28449: LD_VAR 0 3
28453: PPUSH
28454: CALL_OW 313
28458: ST_TO_ADDR
// if t then
28459: LD_VAR 0 4
28463: IFFALSE 28511
// for j in t do
28465: LD_ADDR_VAR 0 7
28469: PUSH
28470: LD_VAR 0 4
28474: PUSH
28475: FOR_IN
28476: IFFALSE 28509
// result := Insert ( result , result + 1 , j ) ;
28478: LD_ADDR_VAR 0 2
28482: PUSH
28483: LD_VAR 0 2
28487: PPUSH
28488: LD_VAR 0 2
28492: PUSH
28493: LD_INT 1
28495: PLUS
28496: PPUSH
28497: LD_VAR 0 7
28501: PPUSH
28502: CALL_OW 2
28506: ST_TO_ADDR
28507: GO 28475
28509: POP
28510: POP
// end ;
28511: GO 28441
28513: POP
28514: POP
// if not result then
28515: LD_VAR 0 2
28519: NOT
28520: IFFALSE 28524
// exit ;
28522: GO 28672
// mech := result [ 1 ] ;
28524: LD_ADDR_VAR 0 5
28528: PUSH
28529: LD_VAR 0 2
28533: PUSH
28534: LD_INT 1
28536: ARRAY
28537: ST_TO_ADDR
// if result > 1 then
28538: LD_VAR 0 2
28542: PUSH
28543: LD_INT 1
28545: GREATER
28546: IFFALSE 28658
// for i = 2 to result do
28548: LD_ADDR_VAR 0 3
28552: PUSH
28553: DOUBLE
28554: LD_INT 2
28556: DEC
28557: ST_TO_ADDR
28558: LD_VAR 0 2
28562: PUSH
28563: FOR_TO
28564: IFFALSE 28656
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
28566: LD_ADDR_VAR 0 4
28570: PUSH
28571: LD_VAR 0 2
28575: PUSH
28576: LD_VAR 0 3
28580: ARRAY
28581: PPUSH
28582: LD_INT 3
28584: PPUSH
28585: CALL_OW 259
28589: PUSH
28590: LD_VAR 0 2
28594: PUSH
28595: LD_VAR 0 3
28599: ARRAY
28600: PPUSH
28601: CALL_OW 432
28605: MINUS
28606: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
28607: LD_VAR 0 4
28611: PUSH
28612: LD_VAR 0 5
28616: PPUSH
28617: LD_INT 3
28619: PPUSH
28620: CALL_OW 259
28624: PUSH
28625: LD_VAR 0 5
28629: PPUSH
28630: CALL_OW 432
28634: MINUS
28635: GREATEREQUAL
28636: IFFALSE 28654
// mech := result [ i ] ;
28638: LD_ADDR_VAR 0 5
28642: PUSH
28643: LD_VAR 0 2
28647: PUSH
28648: LD_VAR 0 3
28652: ARRAY
28653: ST_TO_ADDR
// end ;
28654: GO 28563
28656: POP
28657: POP
// ComLinkTo ( vehicle , mech ) ;
28658: LD_VAR 0 1
28662: PPUSH
28663: LD_VAR 0 5
28667: PPUSH
28668: CALL_OW 135
// end ;
28672: LD_VAR 0 2
28676: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
28677: LD_INT 0
28679: PPUSH
28680: PPUSH
28681: PPUSH
28682: PPUSH
28683: PPUSH
28684: PPUSH
28685: PPUSH
28686: PPUSH
28687: PPUSH
28688: PPUSH
28689: PPUSH
28690: PPUSH
28691: PPUSH
// result := [ ] ;
28692: LD_ADDR_VAR 0 7
28696: PUSH
28697: EMPTY
28698: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
28699: LD_VAR 0 1
28703: PPUSH
28704: CALL_OW 266
28708: PUSH
28709: LD_INT 0
28711: PUSH
28712: LD_INT 1
28714: PUSH
28715: EMPTY
28716: LIST
28717: LIST
28718: IN
28719: NOT
28720: IFFALSE 28724
// exit ;
28722: GO 30355
// if name then
28724: LD_VAR 0 3
28728: IFFALSE 28744
// SetBName ( base_dep , name ) ;
28730: LD_VAR 0 1
28734: PPUSH
28735: LD_VAR 0 3
28739: PPUSH
28740: CALL_OW 500
// base := GetBase ( base_dep ) ;
28744: LD_ADDR_VAR 0 15
28748: PUSH
28749: LD_VAR 0 1
28753: PPUSH
28754: CALL_OW 274
28758: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
28759: LD_ADDR_VAR 0 16
28763: PUSH
28764: LD_VAR 0 1
28768: PPUSH
28769: CALL_OW 255
28773: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
28774: LD_ADDR_VAR 0 17
28778: PUSH
28779: LD_VAR 0 1
28783: PPUSH
28784: CALL_OW 248
28788: ST_TO_ADDR
// if sources then
28789: LD_VAR 0 5
28793: IFFALSE 28840
// for i = 1 to 3 do
28795: LD_ADDR_VAR 0 8
28799: PUSH
28800: DOUBLE
28801: LD_INT 1
28803: DEC
28804: ST_TO_ADDR
28805: LD_INT 3
28807: PUSH
28808: FOR_TO
28809: IFFALSE 28838
// AddResourceType ( base , i , sources [ i ] ) ;
28811: LD_VAR 0 15
28815: PPUSH
28816: LD_VAR 0 8
28820: PPUSH
28821: LD_VAR 0 5
28825: PUSH
28826: LD_VAR 0 8
28830: ARRAY
28831: PPUSH
28832: CALL_OW 276
28836: GO 28808
28838: POP
28839: POP
// buildings := GetBaseBuildings ( base , area ) ;
28840: LD_ADDR_VAR 0 18
28844: PUSH
28845: LD_VAR 0 15
28849: PPUSH
28850: LD_VAR 0 2
28854: PPUSH
28855: CALL 28132 0 2
28859: ST_TO_ADDR
// InitHc ;
28860: CALL_OW 19
// InitUc ;
28864: CALL_OW 18
// uc_side := side ;
28868: LD_ADDR_OWVAR 20
28872: PUSH
28873: LD_VAR 0 16
28877: ST_TO_ADDR
// uc_nation := nation ;
28878: LD_ADDR_OWVAR 21
28882: PUSH
28883: LD_VAR 0 17
28887: ST_TO_ADDR
// if buildings then
28888: LD_VAR 0 18
28892: IFFALSE 30214
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
28894: LD_ADDR_VAR 0 19
28898: PUSH
28899: LD_VAR 0 18
28903: PPUSH
28904: LD_INT 2
28906: PUSH
28907: LD_INT 30
28909: PUSH
28910: LD_INT 29
28912: PUSH
28913: EMPTY
28914: LIST
28915: LIST
28916: PUSH
28917: LD_INT 30
28919: PUSH
28920: LD_INT 30
28922: PUSH
28923: EMPTY
28924: LIST
28925: LIST
28926: PUSH
28927: EMPTY
28928: LIST
28929: LIST
28930: LIST
28931: PPUSH
28932: CALL_OW 72
28936: ST_TO_ADDR
// if tmp then
28937: LD_VAR 0 19
28941: IFFALSE 28989
// for i in tmp do
28943: LD_ADDR_VAR 0 8
28947: PUSH
28948: LD_VAR 0 19
28952: PUSH
28953: FOR_IN
28954: IFFALSE 28987
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
28956: LD_VAR 0 8
28960: PPUSH
28961: CALL_OW 250
28965: PPUSH
28966: LD_VAR 0 8
28970: PPUSH
28971: CALL_OW 251
28975: PPUSH
28976: LD_VAR 0 16
28980: PPUSH
28981: CALL_OW 441
28985: GO 28953
28987: POP
28988: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
28989: LD_VAR 0 18
28993: PPUSH
28994: LD_INT 2
28996: PUSH
28997: LD_INT 30
28999: PUSH
29000: LD_INT 32
29002: PUSH
29003: EMPTY
29004: LIST
29005: LIST
29006: PUSH
29007: LD_INT 30
29009: PUSH
29010: LD_INT 33
29012: PUSH
29013: EMPTY
29014: LIST
29015: LIST
29016: PUSH
29017: EMPTY
29018: LIST
29019: LIST
29020: LIST
29021: PPUSH
29022: CALL_OW 72
29026: IFFALSE 29114
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
29028: LD_ADDR_VAR 0 8
29032: PUSH
29033: LD_VAR 0 18
29037: PPUSH
29038: LD_INT 2
29040: PUSH
29041: LD_INT 30
29043: PUSH
29044: LD_INT 32
29046: PUSH
29047: EMPTY
29048: LIST
29049: LIST
29050: PUSH
29051: LD_INT 30
29053: PUSH
29054: LD_INT 33
29056: PUSH
29057: EMPTY
29058: LIST
29059: LIST
29060: PUSH
29061: EMPTY
29062: LIST
29063: LIST
29064: LIST
29065: PPUSH
29066: CALL_OW 72
29070: PUSH
29071: FOR_IN
29072: IFFALSE 29112
// begin if not GetBWeapon ( i ) then
29074: LD_VAR 0 8
29078: PPUSH
29079: CALL_OW 269
29083: NOT
29084: IFFALSE 29110
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
29086: LD_VAR 0 8
29090: PPUSH
29091: LD_VAR 0 8
29095: PPUSH
29096: LD_VAR 0 2
29100: PPUSH
29101: CALL 30360 0 2
29105: PPUSH
29106: CALL_OW 431
// end ;
29110: GO 29071
29112: POP
29113: POP
// end ; for i = 1 to personel do
29114: LD_ADDR_VAR 0 8
29118: PUSH
29119: DOUBLE
29120: LD_INT 1
29122: DEC
29123: ST_TO_ADDR
29124: LD_VAR 0 6
29128: PUSH
29129: FOR_TO
29130: IFFALSE 30194
// begin if i > 4 then
29132: LD_VAR 0 8
29136: PUSH
29137: LD_INT 4
29139: GREATER
29140: IFFALSE 29144
// break ;
29142: GO 30194
// case i of 1 :
29144: LD_VAR 0 8
29148: PUSH
29149: LD_INT 1
29151: DOUBLE
29152: EQUAL
29153: IFTRUE 29157
29155: GO 29237
29157: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
29158: LD_ADDR_VAR 0 12
29162: PUSH
29163: LD_VAR 0 18
29167: PPUSH
29168: LD_INT 22
29170: PUSH
29171: LD_VAR 0 16
29175: PUSH
29176: EMPTY
29177: LIST
29178: LIST
29179: PUSH
29180: LD_INT 58
29182: PUSH
29183: EMPTY
29184: LIST
29185: PUSH
29186: LD_INT 2
29188: PUSH
29189: LD_INT 30
29191: PUSH
29192: LD_INT 32
29194: PUSH
29195: EMPTY
29196: LIST
29197: LIST
29198: PUSH
29199: LD_INT 30
29201: PUSH
29202: LD_INT 4
29204: PUSH
29205: EMPTY
29206: LIST
29207: LIST
29208: PUSH
29209: LD_INT 30
29211: PUSH
29212: LD_INT 5
29214: PUSH
29215: EMPTY
29216: LIST
29217: LIST
29218: PUSH
29219: EMPTY
29220: LIST
29221: LIST
29222: LIST
29223: LIST
29224: PUSH
29225: EMPTY
29226: LIST
29227: LIST
29228: LIST
29229: PPUSH
29230: CALL_OW 72
29234: ST_TO_ADDR
29235: GO 29459
29237: LD_INT 2
29239: DOUBLE
29240: EQUAL
29241: IFTRUE 29245
29243: GO 29307
29245: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
29246: LD_ADDR_VAR 0 12
29250: PUSH
29251: LD_VAR 0 18
29255: PPUSH
29256: LD_INT 22
29258: PUSH
29259: LD_VAR 0 16
29263: PUSH
29264: EMPTY
29265: LIST
29266: LIST
29267: PUSH
29268: LD_INT 2
29270: PUSH
29271: LD_INT 30
29273: PUSH
29274: LD_INT 0
29276: PUSH
29277: EMPTY
29278: LIST
29279: LIST
29280: PUSH
29281: LD_INT 30
29283: PUSH
29284: LD_INT 1
29286: PUSH
29287: EMPTY
29288: LIST
29289: LIST
29290: PUSH
29291: EMPTY
29292: LIST
29293: LIST
29294: LIST
29295: PUSH
29296: EMPTY
29297: LIST
29298: LIST
29299: PPUSH
29300: CALL_OW 72
29304: ST_TO_ADDR
29305: GO 29459
29307: LD_INT 3
29309: DOUBLE
29310: EQUAL
29311: IFTRUE 29315
29313: GO 29377
29315: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
29316: LD_ADDR_VAR 0 12
29320: PUSH
29321: LD_VAR 0 18
29325: PPUSH
29326: LD_INT 22
29328: PUSH
29329: LD_VAR 0 16
29333: PUSH
29334: EMPTY
29335: LIST
29336: LIST
29337: PUSH
29338: LD_INT 2
29340: PUSH
29341: LD_INT 30
29343: PUSH
29344: LD_INT 2
29346: PUSH
29347: EMPTY
29348: LIST
29349: LIST
29350: PUSH
29351: LD_INT 30
29353: PUSH
29354: LD_INT 3
29356: PUSH
29357: EMPTY
29358: LIST
29359: LIST
29360: PUSH
29361: EMPTY
29362: LIST
29363: LIST
29364: LIST
29365: PUSH
29366: EMPTY
29367: LIST
29368: LIST
29369: PPUSH
29370: CALL_OW 72
29374: ST_TO_ADDR
29375: GO 29459
29377: LD_INT 4
29379: DOUBLE
29380: EQUAL
29381: IFTRUE 29385
29383: GO 29458
29385: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
29386: LD_ADDR_VAR 0 12
29390: PUSH
29391: LD_VAR 0 18
29395: PPUSH
29396: LD_INT 22
29398: PUSH
29399: LD_VAR 0 16
29403: PUSH
29404: EMPTY
29405: LIST
29406: LIST
29407: PUSH
29408: LD_INT 2
29410: PUSH
29411: LD_INT 30
29413: PUSH
29414: LD_INT 6
29416: PUSH
29417: EMPTY
29418: LIST
29419: LIST
29420: PUSH
29421: LD_INT 30
29423: PUSH
29424: LD_INT 7
29426: PUSH
29427: EMPTY
29428: LIST
29429: LIST
29430: PUSH
29431: LD_INT 30
29433: PUSH
29434: LD_INT 8
29436: PUSH
29437: EMPTY
29438: LIST
29439: LIST
29440: PUSH
29441: EMPTY
29442: LIST
29443: LIST
29444: LIST
29445: LIST
29446: PUSH
29447: EMPTY
29448: LIST
29449: LIST
29450: PPUSH
29451: CALL_OW 72
29455: ST_TO_ADDR
29456: GO 29459
29458: POP
// if i = 1 then
29459: LD_VAR 0 8
29463: PUSH
29464: LD_INT 1
29466: EQUAL
29467: IFFALSE 29578
// begin tmp := [ ] ;
29469: LD_ADDR_VAR 0 19
29473: PUSH
29474: EMPTY
29475: ST_TO_ADDR
// for j in f do
29476: LD_ADDR_VAR 0 9
29480: PUSH
29481: LD_VAR 0 12
29485: PUSH
29486: FOR_IN
29487: IFFALSE 29560
// if GetBType ( j ) = b_bunker then
29489: LD_VAR 0 9
29493: PPUSH
29494: CALL_OW 266
29498: PUSH
29499: LD_INT 32
29501: EQUAL
29502: IFFALSE 29529
// tmp := Insert ( tmp , 1 , j ) else
29504: LD_ADDR_VAR 0 19
29508: PUSH
29509: LD_VAR 0 19
29513: PPUSH
29514: LD_INT 1
29516: PPUSH
29517: LD_VAR 0 9
29521: PPUSH
29522: CALL_OW 2
29526: ST_TO_ADDR
29527: GO 29558
// tmp := Insert ( tmp , tmp + 1 , j ) ;
29529: LD_ADDR_VAR 0 19
29533: PUSH
29534: LD_VAR 0 19
29538: PPUSH
29539: LD_VAR 0 19
29543: PUSH
29544: LD_INT 1
29546: PLUS
29547: PPUSH
29548: LD_VAR 0 9
29552: PPUSH
29553: CALL_OW 2
29557: ST_TO_ADDR
29558: GO 29486
29560: POP
29561: POP
// if tmp then
29562: LD_VAR 0 19
29566: IFFALSE 29578
// f := tmp ;
29568: LD_ADDR_VAR 0 12
29572: PUSH
29573: LD_VAR 0 19
29577: ST_TO_ADDR
// end ; x := personel [ i ] ;
29578: LD_ADDR_VAR 0 13
29582: PUSH
29583: LD_VAR 0 6
29587: PUSH
29588: LD_VAR 0 8
29592: ARRAY
29593: ST_TO_ADDR
// if x = - 1 then
29594: LD_VAR 0 13
29598: PUSH
29599: LD_INT 1
29601: NEG
29602: EQUAL
29603: IFFALSE 29812
// begin for j in f do
29605: LD_ADDR_VAR 0 9
29609: PUSH
29610: LD_VAR 0 12
29614: PUSH
29615: FOR_IN
29616: IFFALSE 29808
// repeat InitHc ;
29618: CALL_OW 19
// if GetBType ( j ) = b_barracks then
29622: LD_VAR 0 9
29626: PPUSH
29627: CALL_OW 266
29631: PUSH
29632: LD_INT 5
29634: EQUAL
29635: IFFALSE 29705
// begin if UnitsInside ( j ) < 3 then
29637: LD_VAR 0 9
29641: PPUSH
29642: CALL_OW 313
29646: PUSH
29647: LD_INT 3
29649: LESS
29650: IFFALSE 29686
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
29652: LD_INT 0
29654: PPUSH
29655: LD_INT 5
29657: PUSH
29658: LD_INT 8
29660: PUSH
29661: LD_INT 9
29663: PUSH
29664: EMPTY
29665: LIST
29666: LIST
29667: LIST
29668: PUSH
29669: LD_VAR 0 17
29673: ARRAY
29674: PPUSH
29675: LD_VAR 0 4
29679: PPUSH
29680: CALL_OW 380
29684: GO 29703
// PrepareHuman ( false , i , skill ) ;
29686: LD_INT 0
29688: PPUSH
29689: LD_VAR 0 8
29693: PPUSH
29694: LD_VAR 0 4
29698: PPUSH
29699: CALL_OW 380
// end else
29703: GO 29722
// PrepareHuman ( false , i , skill ) ;
29705: LD_INT 0
29707: PPUSH
29708: LD_VAR 0 8
29712: PPUSH
29713: LD_VAR 0 4
29717: PPUSH
29718: CALL_OW 380
// un := CreateHuman ;
29722: LD_ADDR_VAR 0 14
29726: PUSH
29727: CALL_OW 44
29731: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29732: LD_ADDR_VAR 0 7
29736: PUSH
29737: LD_VAR 0 7
29741: PPUSH
29742: LD_INT 1
29744: PPUSH
29745: LD_VAR 0 14
29749: PPUSH
29750: CALL_OW 2
29754: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
29755: LD_VAR 0 14
29759: PPUSH
29760: LD_VAR 0 9
29764: PPUSH
29765: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
29769: LD_VAR 0 9
29773: PPUSH
29774: CALL_OW 313
29778: PUSH
29779: LD_INT 6
29781: EQUAL
29782: PUSH
29783: LD_VAR 0 9
29787: PPUSH
29788: CALL_OW 266
29792: PUSH
29793: LD_INT 32
29795: PUSH
29796: LD_INT 31
29798: PUSH
29799: EMPTY
29800: LIST
29801: LIST
29802: IN
29803: OR
29804: IFFALSE 29618
29806: GO 29615
29808: POP
29809: POP
// end else
29810: GO 30192
// for j = 1 to x do
29812: LD_ADDR_VAR 0 9
29816: PUSH
29817: DOUBLE
29818: LD_INT 1
29820: DEC
29821: ST_TO_ADDR
29822: LD_VAR 0 13
29826: PUSH
29827: FOR_TO
29828: IFFALSE 30190
// begin InitHc ;
29830: CALL_OW 19
// if not f then
29834: LD_VAR 0 12
29838: NOT
29839: IFFALSE 29928
// begin PrepareHuman ( false , i , skill ) ;
29841: LD_INT 0
29843: PPUSH
29844: LD_VAR 0 8
29848: PPUSH
29849: LD_VAR 0 4
29853: PPUSH
29854: CALL_OW 380
// un := CreateHuman ;
29858: LD_ADDR_VAR 0 14
29862: PUSH
29863: CALL_OW 44
29867: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29868: LD_ADDR_VAR 0 7
29872: PUSH
29873: LD_VAR 0 7
29877: PPUSH
29878: LD_INT 1
29880: PPUSH
29881: LD_VAR 0 14
29885: PPUSH
29886: CALL_OW 2
29890: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
29891: LD_VAR 0 14
29895: PPUSH
29896: LD_VAR 0 1
29900: PPUSH
29901: CALL_OW 250
29905: PPUSH
29906: LD_VAR 0 1
29910: PPUSH
29911: CALL_OW 251
29915: PPUSH
29916: LD_INT 10
29918: PPUSH
29919: LD_INT 0
29921: PPUSH
29922: CALL_OW 50
// continue ;
29926: GO 29827
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
29928: LD_VAR 0 12
29932: PUSH
29933: LD_INT 1
29935: ARRAY
29936: PPUSH
29937: CALL_OW 313
29941: PUSH
29942: LD_VAR 0 12
29946: PUSH
29947: LD_INT 1
29949: ARRAY
29950: PPUSH
29951: CALL_OW 266
29955: PUSH
29956: LD_INT 32
29958: PUSH
29959: LD_INT 31
29961: PUSH
29962: EMPTY
29963: LIST
29964: LIST
29965: IN
29966: AND
29967: PUSH
29968: LD_VAR 0 12
29972: PUSH
29973: LD_INT 1
29975: ARRAY
29976: PPUSH
29977: CALL_OW 313
29981: PUSH
29982: LD_INT 6
29984: EQUAL
29985: OR
29986: IFFALSE 30006
// f := Delete ( f , 1 ) ;
29988: LD_ADDR_VAR 0 12
29992: PUSH
29993: LD_VAR 0 12
29997: PPUSH
29998: LD_INT 1
30000: PPUSH
30001: CALL_OW 3
30005: ST_TO_ADDR
// if not f then
30006: LD_VAR 0 12
30010: NOT
30011: IFFALSE 30029
// begin x := x + 2 ;
30013: LD_ADDR_VAR 0 13
30017: PUSH
30018: LD_VAR 0 13
30022: PUSH
30023: LD_INT 2
30025: PLUS
30026: ST_TO_ADDR
// continue ;
30027: GO 29827
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
30029: LD_VAR 0 12
30033: PUSH
30034: LD_INT 1
30036: ARRAY
30037: PPUSH
30038: CALL_OW 266
30042: PUSH
30043: LD_INT 5
30045: EQUAL
30046: IFFALSE 30120
// begin if UnitsInside ( f [ 1 ] ) < 3 then
30048: LD_VAR 0 12
30052: PUSH
30053: LD_INT 1
30055: ARRAY
30056: PPUSH
30057: CALL_OW 313
30061: PUSH
30062: LD_INT 3
30064: LESS
30065: IFFALSE 30101
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30067: LD_INT 0
30069: PPUSH
30070: LD_INT 5
30072: PUSH
30073: LD_INT 8
30075: PUSH
30076: LD_INT 9
30078: PUSH
30079: EMPTY
30080: LIST
30081: LIST
30082: LIST
30083: PUSH
30084: LD_VAR 0 17
30088: ARRAY
30089: PPUSH
30090: LD_VAR 0 4
30094: PPUSH
30095: CALL_OW 380
30099: GO 30118
// PrepareHuman ( false , i , skill ) ;
30101: LD_INT 0
30103: PPUSH
30104: LD_VAR 0 8
30108: PPUSH
30109: LD_VAR 0 4
30113: PPUSH
30114: CALL_OW 380
// end else
30118: GO 30137
// PrepareHuman ( false , i , skill ) ;
30120: LD_INT 0
30122: PPUSH
30123: LD_VAR 0 8
30127: PPUSH
30128: LD_VAR 0 4
30132: PPUSH
30133: CALL_OW 380
// un := CreateHuman ;
30137: LD_ADDR_VAR 0 14
30141: PUSH
30142: CALL_OW 44
30146: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30147: LD_ADDR_VAR 0 7
30151: PUSH
30152: LD_VAR 0 7
30156: PPUSH
30157: LD_INT 1
30159: PPUSH
30160: LD_VAR 0 14
30164: PPUSH
30165: CALL_OW 2
30169: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
30170: LD_VAR 0 14
30174: PPUSH
30175: LD_VAR 0 12
30179: PUSH
30180: LD_INT 1
30182: ARRAY
30183: PPUSH
30184: CALL_OW 52
// end ;
30188: GO 29827
30190: POP
30191: POP
// end ;
30192: GO 29129
30194: POP
30195: POP
// result := result ^ buildings ;
30196: LD_ADDR_VAR 0 7
30200: PUSH
30201: LD_VAR 0 7
30205: PUSH
30206: LD_VAR 0 18
30210: ADD
30211: ST_TO_ADDR
// end else
30212: GO 30355
// begin for i = 1 to personel do
30214: LD_ADDR_VAR 0 8
30218: PUSH
30219: DOUBLE
30220: LD_INT 1
30222: DEC
30223: ST_TO_ADDR
30224: LD_VAR 0 6
30228: PUSH
30229: FOR_TO
30230: IFFALSE 30353
// begin if i > 4 then
30232: LD_VAR 0 8
30236: PUSH
30237: LD_INT 4
30239: GREATER
30240: IFFALSE 30244
// break ;
30242: GO 30353
// x := personel [ i ] ;
30244: LD_ADDR_VAR 0 13
30248: PUSH
30249: LD_VAR 0 6
30253: PUSH
30254: LD_VAR 0 8
30258: ARRAY
30259: ST_TO_ADDR
// if x = - 1 then
30260: LD_VAR 0 13
30264: PUSH
30265: LD_INT 1
30267: NEG
30268: EQUAL
30269: IFFALSE 30273
// continue ;
30271: GO 30229
// PrepareHuman ( false , i , skill ) ;
30273: LD_INT 0
30275: PPUSH
30276: LD_VAR 0 8
30280: PPUSH
30281: LD_VAR 0 4
30285: PPUSH
30286: CALL_OW 380
// un := CreateHuman ;
30290: LD_ADDR_VAR 0 14
30294: PUSH
30295: CALL_OW 44
30299: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30300: LD_VAR 0 14
30304: PPUSH
30305: LD_VAR 0 1
30309: PPUSH
30310: CALL_OW 250
30314: PPUSH
30315: LD_VAR 0 1
30319: PPUSH
30320: CALL_OW 251
30324: PPUSH
30325: LD_INT 10
30327: PPUSH
30328: LD_INT 0
30330: PPUSH
30331: CALL_OW 50
// result := result ^ un ;
30335: LD_ADDR_VAR 0 7
30339: PUSH
30340: LD_VAR 0 7
30344: PUSH
30345: LD_VAR 0 14
30349: ADD
30350: ST_TO_ADDR
// end ;
30351: GO 30229
30353: POP
30354: POP
// end ; end ;
30355: LD_VAR 0 7
30359: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
30360: LD_INT 0
30362: PPUSH
30363: PPUSH
30364: PPUSH
30365: PPUSH
30366: PPUSH
30367: PPUSH
30368: PPUSH
30369: PPUSH
30370: PPUSH
30371: PPUSH
30372: PPUSH
30373: PPUSH
30374: PPUSH
30375: PPUSH
30376: PPUSH
30377: PPUSH
// result := false ;
30378: LD_ADDR_VAR 0 3
30382: PUSH
30383: LD_INT 0
30385: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
30386: LD_VAR 0 1
30390: NOT
30391: PUSH
30392: LD_VAR 0 1
30396: PPUSH
30397: CALL_OW 266
30401: PUSH
30402: LD_INT 32
30404: PUSH
30405: LD_INT 33
30407: PUSH
30408: EMPTY
30409: LIST
30410: LIST
30411: IN
30412: NOT
30413: OR
30414: IFFALSE 30418
// exit ;
30416: GO 31554
// nat := GetNation ( tower ) ;
30418: LD_ADDR_VAR 0 12
30422: PUSH
30423: LD_VAR 0 1
30427: PPUSH
30428: CALL_OW 248
30432: ST_TO_ADDR
// side := GetSide ( tower ) ;
30433: LD_ADDR_VAR 0 16
30437: PUSH
30438: LD_VAR 0 1
30442: PPUSH
30443: CALL_OW 255
30447: ST_TO_ADDR
// x := GetX ( tower ) ;
30448: LD_ADDR_VAR 0 10
30452: PUSH
30453: LD_VAR 0 1
30457: PPUSH
30458: CALL_OW 250
30462: ST_TO_ADDR
// y := GetY ( tower ) ;
30463: LD_ADDR_VAR 0 11
30467: PUSH
30468: LD_VAR 0 1
30472: PPUSH
30473: CALL_OW 251
30477: ST_TO_ADDR
// if not x or not y then
30478: LD_VAR 0 10
30482: NOT
30483: PUSH
30484: LD_VAR 0 11
30488: NOT
30489: OR
30490: IFFALSE 30494
// exit ;
30492: GO 31554
// weapon := 0 ;
30494: LD_ADDR_VAR 0 18
30498: PUSH
30499: LD_INT 0
30501: ST_TO_ADDR
// fac_list := [ ] ;
30502: LD_ADDR_VAR 0 17
30506: PUSH
30507: EMPTY
30508: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
30509: LD_ADDR_VAR 0 6
30513: PUSH
30514: LD_VAR 0 1
30518: PPUSH
30519: CALL_OW 274
30523: PPUSH
30524: LD_VAR 0 2
30528: PPUSH
30529: CALL 28132 0 2
30533: PPUSH
30534: LD_INT 30
30536: PUSH
30537: LD_INT 3
30539: PUSH
30540: EMPTY
30541: LIST
30542: LIST
30543: PPUSH
30544: CALL_OW 72
30548: ST_TO_ADDR
// if not factories then
30549: LD_VAR 0 6
30553: NOT
30554: IFFALSE 30558
// exit ;
30556: GO 31554
// for i in factories do
30558: LD_ADDR_VAR 0 8
30562: PUSH
30563: LD_VAR 0 6
30567: PUSH
30568: FOR_IN
30569: IFFALSE 30594
// fac_list := fac_list union AvailableWeaponList ( i ) ;
30571: LD_ADDR_VAR 0 17
30575: PUSH
30576: LD_VAR 0 17
30580: PUSH
30581: LD_VAR 0 8
30585: PPUSH
30586: CALL_OW 478
30590: UNION
30591: ST_TO_ADDR
30592: GO 30568
30594: POP
30595: POP
// if not fac_list then
30596: LD_VAR 0 17
30600: NOT
30601: IFFALSE 30605
// exit ;
30603: GO 31554
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
30605: LD_ADDR_VAR 0 5
30609: PUSH
30610: LD_INT 4
30612: PUSH
30613: LD_INT 5
30615: PUSH
30616: LD_INT 9
30618: PUSH
30619: LD_INT 10
30621: PUSH
30622: LD_INT 6
30624: PUSH
30625: LD_INT 7
30627: PUSH
30628: LD_INT 11
30630: PUSH
30631: EMPTY
30632: LIST
30633: LIST
30634: LIST
30635: LIST
30636: LIST
30637: LIST
30638: LIST
30639: PUSH
30640: LD_INT 27
30642: PUSH
30643: LD_INT 28
30645: PUSH
30646: LD_INT 26
30648: PUSH
30649: LD_INT 30
30651: PUSH
30652: EMPTY
30653: LIST
30654: LIST
30655: LIST
30656: LIST
30657: PUSH
30658: LD_INT 43
30660: PUSH
30661: LD_INT 44
30663: PUSH
30664: LD_INT 46
30666: PUSH
30667: LD_INT 45
30669: PUSH
30670: LD_INT 47
30672: PUSH
30673: LD_INT 49
30675: PUSH
30676: EMPTY
30677: LIST
30678: LIST
30679: LIST
30680: LIST
30681: LIST
30682: LIST
30683: PUSH
30684: EMPTY
30685: LIST
30686: LIST
30687: LIST
30688: PUSH
30689: LD_VAR 0 12
30693: ARRAY
30694: ST_TO_ADDR
// for i in list do
30695: LD_ADDR_VAR 0 8
30699: PUSH
30700: LD_VAR 0 5
30704: PUSH
30705: FOR_IN
30706: IFFALSE 30739
// if not i in fac_list then
30708: LD_VAR 0 8
30712: PUSH
30713: LD_VAR 0 17
30717: IN
30718: NOT
30719: IFFALSE 30737
// list := list diff i ;
30721: LD_ADDR_VAR 0 5
30725: PUSH
30726: LD_VAR 0 5
30730: PUSH
30731: LD_VAR 0 8
30735: DIFF
30736: ST_TO_ADDR
30737: GO 30705
30739: POP
30740: POP
// if not list then
30741: LD_VAR 0 5
30745: NOT
30746: IFFALSE 30750
// exit ;
30748: GO 31554
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
30750: LD_VAR 0 12
30754: PUSH
30755: LD_INT 3
30757: EQUAL
30758: PUSH
30759: LD_INT 49
30761: PUSH
30762: LD_VAR 0 5
30766: IN
30767: AND
30768: PUSH
30769: LD_INT 31
30771: PPUSH
30772: LD_VAR 0 16
30776: PPUSH
30777: CALL_OW 321
30781: PUSH
30782: LD_INT 2
30784: EQUAL
30785: AND
30786: IFFALSE 30846
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
30788: LD_INT 22
30790: PUSH
30791: LD_VAR 0 16
30795: PUSH
30796: EMPTY
30797: LIST
30798: LIST
30799: PUSH
30800: LD_INT 35
30802: PUSH
30803: LD_INT 49
30805: PUSH
30806: EMPTY
30807: LIST
30808: LIST
30809: PUSH
30810: LD_INT 91
30812: PUSH
30813: LD_VAR 0 1
30817: PUSH
30818: LD_INT 10
30820: PUSH
30821: EMPTY
30822: LIST
30823: LIST
30824: LIST
30825: PUSH
30826: EMPTY
30827: LIST
30828: LIST
30829: LIST
30830: PPUSH
30831: CALL_OW 69
30835: NOT
30836: IFFALSE 30846
// weapon := ru_time_lapser ;
30838: LD_ADDR_VAR 0 18
30842: PUSH
30843: LD_INT 49
30845: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
30846: LD_VAR 0 12
30850: PUSH
30851: LD_INT 1
30853: PUSH
30854: LD_INT 2
30856: PUSH
30857: EMPTY
30858: LIST
30859: LIST
30860: IN
30861: PUSH
30862: LD_INT 11
30864: PUSH
30865: LD_VAR 0 5
30869: IN
30870: PUSH
30871: LD_INT 30
30873: PUSH
30874: LD_VAR 0 5
30878: IN
30879: OR
30880: AND
30881: PUSH
30882: LD_INT 6
30884: PPUSH
30885: LD_VAR 0 16
30889: PPUSH
30890: CALL_OW 321
30894: PUSH
30895: LD_INT 2
30897: EQUAL
30898: AND
30899: IFFALSE 31064
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
30901: LD_INT 22
30903: PUSH
30904: LD_VAR 0 16
30908: PUSH
30909: EMPTY
30910: LIST
30911: LIST
30912: PUSH
30913: LD_INT 2
30915: PUSH
30916: LD_INT 35
30918: PUSH
30919: LD_INT 11
30921: PUSH
30922: EMPTY
30923: LIST
30924: LIST
30925: PUSH
30926: LD_INT 35
30928: PUSH
30929: LD_INT 30
30931: PUSH
30932: EMPTY
30933: LIST
30934: LIST
30935: PUSH
30936: EMPTY
30937: LIST
30938: LIST
30939: LIST
30940: PUSH
30941: LD_INT 91
30943: PUSH
30944: LD_VAR 0 1
30948: PUSH
30949: LD_INT 18
30951: PUSH
30952: EMPTY
30953: LIST
30954: LIST
30955: LIST
30956: PUSH
30957: EMPTY
30958: LIST
30959: LIST
30960: LIST
30961: PPUSH
30962: CALL_OW 69
30966: NOT
30967: PUSH
30968: LD_INT 22
30970: PUSH
30971: LD_VAR 0 16
30975: PUSH
30976: EMPTY
30977: LIST
30978: LIST
30979: PUSH
30980: LD_INT 2
30982: PUSH
30983: LD_INT 30
30985: PUSH
30986: LD_INT 32
30988: PUSH
30989: EMPTY
30990: LIST
30991: LIST
30992: PUSH
30993: LD_INT 30
30995: PUSH
30996: LD_INT 33
30998: PUSH
30999: EMPTY
31000: LIST
31001: LIST
31002: PUSH
31003: EMPTY
31004: LIST
31005: LIST
31006: LIST
31007: PUSH
31008: LD_INT 91
31010: PUSH
31011: LD_VAR 0 1
31015: PUSH
31016: LD_INT 12
31018: PUSH
31019: EMPTY
31020: LIST
31021: LIST
31022: LIST
31023: PUSH
31024: EMPTY
31025: LIST
31026: LIST
31027: LIST
31028: PUSH
31029: EMPTY
31030: LIST
31031: PPUSH
31032: CALL_OW 69
31036: PUSH
31037: LD_INT 2
31039: GREATER
31040: AND
31041: IFFALSE 31064
// weapon := [ us_radar , ar_radar ] [ nat ] ;
31043: LD_ADDR_VAR 0 18
31047: PUSH
31048: LD_INT 11
31050: PUSH
31051: LD_INT 30
31053: PUSH
31054: EMPTY
31055: LIST
31056: LIST
31057: PUSH
31058: LD_VAR 0 12
31062: ARRAY
31063: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
31064: LD_VAR 0 18
31068: NOT
31069: PUSH
31070: LD_INT 40
31072: PPUSH
31073: LD_VAR 0 16
31077: PPUSH
31078: CALL_OW 321
31082: PUSH
31083: LD_INT 2
31085: EQUAL
31086: AND
31087: PUSH
31088: LD_INT 7
31090: PUSH
31091: LD_VAR 0 5
31095: IN
31096: PUSH
31097: LD_INT 28
31099: PUSH
31100: LD_VAR 0 5
31104: IN
31105: OR
31106: PUSH
31107: LD_INT 45
31109: PUSH
31110: LD_VAR 0 5
31114: IN
31115: OR
31116: AND
31117: IFFALSE 31371
// begin hex := GetHexInfo ( x , y ) ;
31119: LD_ADDR_VAR 0 4
31123: PUSH
31124: LD_VAR 0 10
31128: PPUSH
31129: LD_VAR 0 11
31133: PPUSH
31134: CALL_OW 546
31138: ST_TO_ADDR
// if hex [ 1 ] then
31139: LD_VAR 0 4
31143: PUSH
31144: LD_INT 1
31146: ARRAY
31147: IFFALSE 31151
// exit ;
31149: GO 31554
// height := hex [ 2 ] ;
31151: LD_ADDR_VAR 0 15
31155: PUSH
31156: LD_VAR 0 4
31160: PUSH
31161: LD_INT 2
31163: ARRAY
31164: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
31165: LD_ADDR_VAR 0 14
31169: PUSH
31170: LD_INT 0
31172: PUSH
31173: LD_INT 2
31175: PUSH
31176: LD_INT 3
31178: PUSH
31179: LD_INT 5
31181: PUSH
31182: EMPTY
31183: LIST
31184: LIST
31185: LIST
31186: LIST
31187: ST_TO_ADDR
// for i in tmp do
31188: LD_ADDR_VAR 0 8
31192: PUSH
31193: LD_VAR 0 14
31197: PUSH
31198: FOR_IN
31199: IFFALSE 31369
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
31201: LD_ADDR_VAR 0 9
31205: PUSH
31206: LD_VAR 0 10
31210: PPUSH
31211: LD_VAR 0 8
31215: PPUSH
31216: LD_INT 5
31218: PPUSH
31219: CALL_OW 272
31223: PUSH
31224: LD_VAR 0 11
31228: PPUSH
31229: LD_VAR 0 8
31233: PPUSH
31234: LD_INT 5
31236: PPUSH
31237: CALL_OW 273
31241: PUSH
31242: EMPTY
31243: LIST
31244: LIST
31245: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
31246: LD_VAR 0 9
31250: PUSH
31251: LD_INT 1
31253: ARRAY
31254: PPUSH
31255: LD_VAR 0 9
31259: PUSH
31260: LD_INT 2
31262: ARRAY
31263: PPUSH
31264: CALL_OW 488
31268: IFFALSE 31367
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
31270: LD_ADDR_VAR 0 4
31274: PUSH
31275: LD_VAR 0 9
31279: PUSH
31280: LD_INT 1
31282: ARRAY
31283: PPUSH
31284: LD_VAR 0 9
31288: PUSH
31289: LD_INT 2
31291: ARRAY
31292: PPUSH
31293: CALL_OW 546
31297: ST_TO_ADDR
// if hex [ 1 ] then
31298: LD_VAR 0 4
31302: PUSH
31303: LD_INT 1
31305: ARRAY
31306: IFFALSE 31310
// continue ;
31308: GO 31198
// h := hex [ 2 ] ;
31310: LD_ADDR_VAR 0 13
31314: PUSH
31315: LD_VAR 0 4
31319: PUSH
31320: LD_INT 2
31322: ARRAY
31323: ST_TO_ADDR
// if h + 7 < height then
31324: LD_VAR 0 13
31328: PUSH
31329: LD_INT 7
31331: PLUS
31332: PUSH
31333: LD_VAR 0 15
31337: LESS
31338: IFFALSE 31367
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
31340: LD_ADDR_VAR 0 18
31344: PUSH
31345: LD_INT 7
31347: PUSH
31348: LD_INT 28
31350: PUSH
31351: LD_INT 45
31353: PUSH
31354: EMPTY
31355: LIST
31356: LIST
31357: LIST
31358: PUSH
31359: LD_VAR 0 12
31363: ARRAY
31364: ST_TO_ADDR
// break ;
31365: GO 31369
// end ; end ; end ;
31367: GO 31198
31369: POP
31370: POP
// end ; if not weapon then
31371: LD_VAR 0 18
31375: NOT
31376: IFFALSE 31436
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
31378: LD_ADDR_VAR 0 5
31382: PUSH
31383: LD_VAR 0 5
31387: PUSH
31388: LD_INT 11
31390: PUSH
31391: LD_INT 30
31393: PUSH
31394: LD_INT 49
31396: PUSH
31397: EMPTY
31398: LIST
31399: LIST
31400: LIST
31401: DIFF
31402: ST_TO_ADDR
// if not list then
31403: LD_VAR 0 5
31407: NOT
31408: IFFALSE 31412
// exit ;
31410: GO 31554
// weapon := list [ rand ( 1 , list ) ] ;
31412: LD_ADDR_VAR 0 18
31416: PUSH
31417: LD_VAR 0 5
31421: PUSH
31422: LD_INT 1
31424: PPUSH
31425: LD_VAR 0 5
31429: PPUSH
31430: CALL_OW 12
31434: ARRAY
31435: ST_TO_ADDR
// end ; if weapon then
31436: LD_VAR 0 18
31440: IFFALSE 31554
// begin tmp := CostOfWeapon ( weapon ) ;
31442: LD_ADDR_VAR 0 14
31446: PUSH
31447: LD_VAR 0 18
31451: PPUSH
31452: CALL_OW 451
31456: ST_TO_ADDR
// j := GetBase ( tower ) ;
31457: LD_ADDR_VAR 0 9
31461: PUSH
31462: LD_VAR 0 1
31466: PPUSH
31467: CALL_OW 274
31471: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
31472: LD_VAR 0 9
31476: PPUSH
31477: LD_INT 1
31479: PPUSH
31480: CALL_OW 275
31484: PUSH
31485: LD_VAR 0 14
31489: PUSH
31490: LD_INT 1
31492: ARRAY
31493: GREATEREQUAL
31494: PUSH
31495: LD_VAR 0 9
31499: PPUSH
31500: LD_INT 2
31502: PPUSH
31503: CALL_OW 275
31507: PUSH
31508: LD_VAR 0 14
31512: PUSH
31513: LD_INT 2
31515: ARRAY
31516: GREATEREQUAL
31517: AND
31518: PUSH
31519: LD_VAR 0 9
31523: PPUSH
31524: LD_INT 3
31526: PPUSH
31527: CALL_OW 275
31531: PUSH
31532: LD_VAR 0 14
31536: PUSH
31537: LD_INT 3
31539: ARRAY
31540: GREATEREQUAL
31541: AND
31542: IFFALSE 31554
// result := weapon ;
31544: LD_ADDR_VAR 0 3
31548: PUSH
31549: LD_VAR 0 18
31553: ST_TO_ADDR
// end ; end ;
31554: LD_VAR 0 3
31558: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
31559: LD_INT 0
31561: PPUSH
31562: PPUSH
// result := true ;
31563: LD_ADDR_VAR 0 3
31567: PUSH
31568: LD_INT 1
31570: ST_TO_ADDR
// if array1 = array2 then
31571: LD_VAR 0 1
31575: PUSH
31576: LD_VAR 0 2
31580: EQUAL
31581: IFFALSE 31641
// begin for i = 1 to array1 do
31583: LD_ADDR_VAR 0 4
31587: PUSH
31588: DOUBLE
31589: LD_INT 1
31591: DEC
31592: ST_TO_ADDR
31593: LD_VAR 0 1
31597: PUSH
31598: FOR_TO
31599: IFFALSE 31637
// if array1 [ i ] <> array2 [ i ] then
31601: LD_VAR 0 1
31605: PUSH
31606: LD_VAR 0 4
31610: ARRAY
31611: PUSH
31612: LD_VAR 0 2
31616: PUSH
31617: LD_VAR 0 4
31621: ARRAY
31622: NONEQUAL
31623: IFFALSE 31635
// begin result := false ;
31625: LD_ADDR_VAR 0 3
31629: PUSH
31630: LD_INT 0
31632: ST_TO_ADDR
// break ;
31633: GO 31637
// end ;
31635: GO 31598
31637: POP
31638: POP
// end else
31639: GO 31649
// result := false ;
31641: LD_ADDR_VAR 0 3
31645: PUSH
31646: LD_INT 0
31648: ST_TO_ADDR
// end ;
31649: LD_VAR 0 3
31653: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
31654: LD_INT 0
31656: PPUSH
31657: PPUSH
31658: PPUSH
// pom := GetBase ( fac ) ;
31659: LD_ADDR_VAR 0 5
31663: PUSH
31664: LD_VAR 0 1
31668: PPUSH
31669: CALL_OW 274
31673: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
31674: LD_ADDR_VAR 0 4
31678: PUSH
31679: LD_VAR 0 2
31683: PUSH
31684: LD_INT 1
31686: ARRAY
31687: PPUSH
31688: LD_VAR 0 2
31692: PUSH
31693: LD_INT 2
31695: ARRAY
31696: PPUSH
31697: LD_VAR 0 2
31701: PUSH
31702: LD_INT 3
31704: ARRAY
31705: PPUSH
31706: LD_VAR 0 2
31710: PUSH
31711: LD_INT 4
31713: ARRAY
31714: PPUSH
31715: CALL_OW 449
31719: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31720: LD_ADDR_VAR 0 3
31724: PUSH
31725: LD_VAR 0 5
31729: PPUSH
31730: LD_INT 1
31732: PPUSH
31733: CALL_OW 275
31737: PUSH
31738: LD_VAR 0 4
31742: PUSH
31743: LD_INT 1
31745: ARRAY
31746: GREATEREQUAL
31747: PUSH
31748: LD_VAR 0 5
31752: PPUSH
31753: LD_INT 2
31755: PPUSH
31756: CALL_OW 275
31760: PUSH
31761: LD_VAR 0 4
31765: PUSH
31766: LD_INT 2
31768: ARRAY
31769: GREATEREQUAL
31770: AND
31771: PUSH
31772: LD_VAR 0 5
31776: PPUSH
31777: LD_INT 3
31779: PPUSH
31780: CALL_OW 275
31784: PUSH
31785: LD_VAR 0 4
31789: PUSH
31790: LD_INT 3
31792: ARRAY
31793: GREATEREQUAL
31794: AND
31795: ST_TO_ADDR
// end ;
31796: LD_VAR 0 3
31800: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
31801: LD_INT 0
31803: PPUSH
31804: PPUSH
31805: PPUSH
31806: PPUSH
// pom := GetBase ( building ) ;
31807: LD_ADDR_VAR 0 3
31811: PUSH
31812: LD_VAR 0 1
31816: PPUSH
31817: CALL_OW 274
31821: ST_TO_ADDR
// if not pom then
31822: LD_VAR 0 3
31826: NOT
31827: IFFALSE 31831
// exit ;
31829: GO 32001
// btype := GetBType ( building ) ;
31831: LD_ADDR_VAR 0 5
31835: PUSH
31836: LD_VAR 0 1
31840: PPUSH
31841: CALL_OW 266
31845: ST_TO_ADDR
// if btype = b_armoury then
31846: LD_VAR 0 5
31850: PUSH
31851: LD_INT 4
31853: EQUAL
31854: IFFALSE 31864
// btype := b_barracks ;
31856: LD_ADDR_VAR 0 5
31860: PUSH
31861: LD_INT 5
31863: ST_TO_ADDR
// if btype = b_depot then
31864: LD_VAR 0 5
31868: PUSH
31869: LD_INT 0
31871: EQUAL
31872: IFFALSE 31882
// btype := b_warehouse ;
31874: LD_ADDR_VAR 0 5
31878: PUSH
31879: LD_INT 1
31881: ST_TO_ADDR
// if btype = b_workshop then
31882: LD_VAR 0 5
31886: PUSH
31887: LD_INT 2
31889: EQUAL
31890: IFFALSE 31900
// btype := b_factory ;
31892: LD_ADDR_VAR 0 5
31896: PUSH
31897: LD_INT 3
31899: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
31900: LD_ADDR_VAR 0 4
31904: PUSH
31905: LD_VAR 0 5
31909: PPUSH
31910: LD_VAR 0 1
31914: PPUSH
31915: CALL_OW 248
31919: PPUSH
31920: CALL_OW 450
31924: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31925: LD_ADDR_VAR 0 2
31929: PUSH
31930: LD_VAR 0 3
31934: PPUSH
31935: LD_INT 1
31937: PPUSH
31938: CALL_OW 275
31942: PUSH
31943: LD_VAR 0 4
31947: PUSH
31948: LD_INT 1
31950: ARRAY
31951: GREATEREQUAL
31952: PUSH
31953: LD_VAR 0 3
31957: PPUSH
31958: LD_INT 2
31960: PPUSH
31961: CALL_OW 275
31965: PUSH
31966: LD_VAR 0 4
31970: PUSH
31971: LD_INT 2
31973: ARRAY
31974: GREATEREQUAL
31975: AND
31976: PUSH
31977: LD_VAR 0 3
31981: PPUSH
31982: LD_INT 3
31984: PPUSH
31985: CALL_OW 275
31989: PUSH
31990: LD_VAR 0 4
31994: PUSH
31995: LD_INT 3
31997: ARRAY
31998: GREATEREQUAL
31999: AND
32000: ST_TO_ADDR
// end ;
32001: LD_VAR 0 2
32005: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
32006: LD_INT 0
32008: PPUSH
32009: PPUSH
32010: PPUSH
// pom := GetBase ( building ) ;
32011: LD_ADDR_VAR 0 4
32015: PUSH
32016: LD_VAR 0 1
32020: PPUSH
32021: CALL_OW 274
32025: ST_TO_ADDR
// if not pom then
32026: LD_VAR 0 4
32030: NOT
32031: IFFALSE 32035
// exit ;
32033: GO 32136
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32035: LD_ADDR_VAR 0 5
32039: PUSH
32040: LD_VAR 0 2
32044: PPUSH
32045: LD_VAR 0 1
32049: PPUSH
32050: CALL_OW 248
32054: PPUSH
32055: CALL_OW 450
32059: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32060: LD_ADDR_VAR 0 3
32064: PUSH
32065: LD_VAR 0 4
32069: PPUSH
32070: LD_INT 1
32072: PPUSH
32073: CALL_OW 275
32077: PUSH
32078: LD_VAR 0 5
32082: PUSH
32083: LD_INT 1
32085: ARRAY
32086: GREATEREQUAL
32087: PUSH
32088: LD_VAR 0 4
32092: PPUSH
32093: LD_INT 2
32095: PPUSH
32096: CALL_OW 275
32100: PUSH
32101: LD_VAR 0 5
32105: PUSH
32106: LD_INT 2
32108: ARRAY
32109: GREATEREQUAL
32110: AND
32111: PUSH
32112: LD_VAR 0 4
32116: PPUSH
32117: LD_INT 3
32119: PPUSH
32120: CALL_OW 275
32124: PUSH
32125: LD_VAR 0 5
32129: PUSH
32130: LD_INT 3
32132: ARRAY
32133: GREATEREQUAL
32134: AND
32135: ST_TO_ADDR
// end ;
32136: LD_VAR 0 3
32140: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
32141: LD_INT 0
32143: PPUSH
32144: PPUSH
32145: PPUSH
32146: PPUSH
32147: PPUSH
32148: PPUSH
32149: PPUSH
32150: PPUSH
32151: PPUSH
32152: PPUSH
// result := false ;
32153: LD_ADDR_VAR 0 6
32157: PUSH
32158: LD_INT 0
32160: ST_TO_ADDR
// if not base or not btype or not x or not y then
32161: LD_VAR 0 1
32165: NOT
32166: PUSH
32167: LD_VAR 0 2
32171: NOT
32172: OR
32173: PUSH
32174: LD_VAR 0 3
32178: NOT
32179: OR
32180: PUSH
32181: LD_VAR 0 4
32185: NOT
32186: OR
32187: IFFALSE 32191
// exit ;
32189: GO 32800
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
32191: LD_ADDR_VAR 0 12
32195: PUSH
32196: LD_VAR 0 2
32200: PPUSH
32201: LD_VAR 0 3
32205: PPUSH
32206: LD_VAR 0 4
32210: PPUSH
32211: LD_VAR 0 5
32215: PPUSH
32216: LD_VAR 0 1
32220: PUSH
32221: LD_INT 1
32223: ARRAY
32224: PPUSH
32225: CALL_OW 248
32229: PPUSH
32230: LD_INT 0
32232: PPUSH
32233: CALL 33637 0 6
32237: ST_TO_ADDR
// if not hexes then
32238: LD_VAR 0 12
32242: NOT
32243: IFFALSE 32247
// exit ;
32245: GO 32800
// for i = 1 to hexes do
32247: LD_ADDR_VAR 0 7
32251: PUSH
32252: DOUBLE
32253: LD_INT 1
32255: DEC
32256: ST_TO_ADDR
32257: LD_VAR 0 12
32261: PUSH
32262: FOR_TO
32263: IFFALSE 32798
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
32265: LD_ADDR_VAR 0 11
32269: PUSH
32270: LD_VAR 0 12
32274: PUSH
32275: LD_VAR 0 7
32279: ARRAY
32280: PUSH
32281: LD_INT 1
32283: ARRAY
32284: PPUSH
32285: LD_VAR 0 12
32289: PUSH
32290: LD_VAR 0 7
32294: ARRAY
32295: PUSH
32296: LD_INT 2
32298: ARRAY
32299: PPUSH
32300: CALL_OW 428
32304: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
32305: LD_VAR 0 12
32309: PUSH
32310: LD_VAR 0 7
32314: ARRAY
32315: PUSH
32316: LD_INT 1
32318: ARRAY
32319: PPUSH
32320: LD_VAR 0 12
32324: PUSH
32325: LD_VAR 0 7
32329: ARRAY
32330: PUSH
32331: LD_INT 2
32333: ARRAY
32334: PPUSH
32335: CALL_OW 351
32339: PUSH
32340: LD_VAR 0 12
32344: PUSH
32345: LD_VAR 0 7
32349: ARRAY
32350: PUSH
32351: LD_INT 1
32353: ARRAY
32354: PPUSH
32355: LD_VAR 0 12
32359: PUSH
32360: LD_VAR 0 7
32364: ARRAY
32365: PUSH
32366: LD_INT 2
32368: ARRAY
32369: PPUSH
32370: CALL_OW 488
32374: NOT
32375: OR
32376: PUSH
32377: LD_VAR 0 11
32381: PPUSH
32382: CALL_OW 247
32386: PUSH
32387: LD_INT 3
32389: EQUAL
32390: OR
32391: IFFALSE 32397
// exit ;
32393: POP
32394: POP
32395: GO 32800
// if not tmp or not tmp in base then
32397: LD_VAR 0 11
32401: NOT
32402: PUSH
32403: LD_VAR 0 11
32407: PUSH
32408: LD_VAR 0 1
32412: IN
32413: NOT
32414: OR
32415: IFFALSE 32419
// continue ;
32417: GO 32262
// result := true ;
32419: LD_ADDR_VAR 0 6
32423: PUSH
32424: LD_INT 1
32426: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32427: LD_ADDR_VAR 0 15
32431: PUSH
32432: LD_VAR 0 1
32436: PPUSH
32437: LD_INT 22
32439: PUSH
32440: LD_VAR 0 11
32444: PPUSH
32445: CALL_OW 255
32449: PUSH
32450: EMPTY
32451: LIST
32452: LIST
32453: PUSH
32454: LD_INT 2
32456: PUSH
32457: LD_INT 30
32459: PUSH
32460: LD_INT 0
32462: PUSH
32463: EMPTY
32464: LIST
32465: LIST
32466: PUSH
32467: LD_INT 30
32469: PUSH
32470: LD_INT 1
32472: PUSH
32473: EMPTY
32474: LIST
32475: LIST
32476: PUSH
32477: EMPTY
32478: LIST
32479: LIST
32480: LIST
32481: PUSH
32482: EMPTY
32483: LIST
32484: LIST
32485: PPUSH
32486: CALL_OW 72
32490: ST_TO_ADDR
// if dep then
32491: LD_VAR 0 15
32495: IFFALSE 32631
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
32497: LD_ADDR_VAR 0 14
32501: PUSH
32502: LD_VAR 0 15
32506: PUSH
32507: LD_INT 1
32509: ARRAY
32510: PPUSH
32511: CALL_OW 250
32515: PPUSH
32516: LD_VAR 0 15
32520: PUSH
32521: LD_INT 1
32523: ARRAY
32524: PPUSH
32525: CALL_OW 254
32529: PPUSH
32530: LD_INT 5
32532: PPUSH
32533: CALL_OW 272
32537: PUSH
32538: LD_VAR 0 15
32542: PUSH
32543: LD_INT 1
32545: ARRAY
32546: PPUSH
32547: CALL_OW 251
32551: PPUSH
32552: LD_VAR 0 15
32556: PUSH
32557: LD_INT 1
32559: ARRAY
32560: PPUSH
32561: CALL_OW 254
32565: PPUSH
32566: LD_INT 5
32568: PPUSH
32569: CALL_OW 273
32573: PUSH
32574: EMPTY
32575: LIST
32576: LIST
32577: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
32578: LD_VAR 0 14
32582: PUSH
32583: LD_INT 1
32585: ARRAY
32586: PPUSH
32587: LD_VAR 0 14
32591: PUSH
32592: LD_INT 2
32594: ARRAY
32595: PPUSH
32596: CALL_OW 488
32600: IFFALSE 32631
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
32602: LD_VAR 0 11
32606: PPUSH
32607: LD_VAR 0 14
32611: PUSH
32612: LD_INT 1
32614: ARRAY
32615: PPUSH
32616: LD_VAR 0 14
32620: PUSH
32621: LD_INT 2
32623: ARRAY
32624: PPUSH
32625: CALL_OW 111
// continue ;
32629: GO 32262
// end ; end ; r := GetDir ( tmp ) ;
32631: LD_ADDR_VAR 0 13
32635: PUSH
32636: LD_VAR 0 11
32640: PPUSH
32641: CALL_OW 254
32645: ST_TO_ADDR
// if r = 5 then
32646: LD_VAR 0 13
32650: PUSH
32651: LD_INT 5
32653: EQUAL
32654: IFFALSE 32664
// r := 0 ;
32656: LD_ADDR_VAR 0 13
32660: PUSH
32661: LD_INT 0
32663: ST_TO_ADDR
// for j = r to 5 do
32664: LD_ADDR_VAR 0 8
32668: PUSH
32669: DOUBLE
32670: LD_VAR 0 13
32674: DEC
32675: ST_TO_ADDR
32676: LD_INT 5
32678: PUSH
32679: FOR_TO
32680: IFFALSE 32794
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
32682: LD_ADDR_VAR 0 9
32686: PUSH
32687: LD_VAR 0 11
32691: PPUSH
32692: CALL_OW 250
32696: PPUSH
32697: LD_VAR 0 8
32701: PPUSH
32702: LD_INT 2
32704: PPUSH
32705: CALL_OW 272
32709: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
32710: LD_ADDR_VAR 0 10
32714: PUSH
32715: LD_VAR 0 11
32719: PPUSH
32720: CALL_OW 251
32724: PPUSH
32725: LD_VAR 0 8
32729: PPUSH
32730: LD_INT 2
32732: PPUSH
32733: CALL_OW 273
32737: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
32738: LD_VAR 0 9
32742: PPUSH
32743: LD_VAR 0 10
32747: PPUSH
32748: CALL_OW 488
32752: PUSH
32753: LD_VAR 0 9
32757: PPUSH
32758: LD_VAR 0 10
32762: PPUSH
32763: CALL_OW 428
32767: NOT
32768: AND
32769: IFFALSE 32792
// begin ComMoveXY ( tmp , _x , _y ) ;
32771: LD_VAR 0 11
32775: PPUSH
32776: LD_VAR 0 9
32780: PPUSH
32781: LD_VAR 0 10
32785: PPUSH
32786: CALL_OW 111
// break ;
32790: GO 32794
// end ; end ;
32792: GO 32679
32794: POP
32795: POP
// end ;
32796: GO 32262
32798: POP
32799: POP
// end ;
32800: LD_VAR 0 6
32804: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
32805: LD_INT 0
32807: PPUSH
32808: PPUSH
32809: PPUSH
32810: PPUSH
32811: PPUSH
32812: PPUSH
32813: PPUSH
32814: PPUSH
32815: PPUSH
32816: PPUSH
// result := false ;
32817: LD_ADDR_VAR 0 6
32821: PUSH
32822: LD_INT 0
32824: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
32825: LD_VAR 0 1
32829: NOT
32830: PUSH
32831: LD_VAR 0 1
32835: PPUSH
32836: CALL_OW 266
32840: PUSH
32841: LD_INT 0
32843: PUSH
32844: LD_INT 1
32846: PUSH
32847: EMPTY
32848: LIST
32849: LIST
32850: IN
32851: NOT
32852: OR
32853: PUSH
32854: LD_VAR 0 2
32858: NOT
32859: OR
32860: PUSH
32861: LD_VAR 0 5
32865: PUSH
32866: LD_INT 0
32868: PUSH
32869: LD_INT 1
32871: PUSH
32872: LD_INT 2
32874: PUSH
32875: LD_INT 3
32877: PUSH
32878: LD_INT 4
32880: PUSH
32881: LD_INT 5
32883: PUSH
32884: EMPTY
32885: LIST
32886: LIST
32887: LIST
32888: LIST
32889: LIST
32890: LIST
32891: IN
32892: NOT
32893: OR
32894: PUSH
32895: LD_VAR 0 3
32899: PPUSH
32900: LD_VAR 0 4
32904: PPUSH
32905: CALL_OW 488
32909: NOT
32910: OR
32911: IFFALSE 32915
// exit ;
32913: GO 33632
// pom := GetBase ( depot ) ;
32915: LD_ADDR_VAR 0 10
32919: PUSH
32920: LD_VAR 0 1
32924: PPUSH
32925: CALL_OW 274
32929: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
32930: LD_ADDR_VAR 0 11
32934: PUSH
32935: LD_VAR 0 2
32939: PPUSH
32940: LD_VAR 0 1
32944: PPUSH
32945: CALL_OW 248
32949: PPUSH
32950: CALL_OW 450
32954: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
32955: LD_VAR 0 10
32959: PPUSH
32960: LD_INT 1
32962: PPUSH
32963: CALL_OW 275
32967: PUSH
32968: LD_VAR 0 11
32972: PUSH
32973: LD_INT 1
32975: ARRAY
32976: GREATEREQUAL
32977: PUSH
32978: LD_VAR 0 10
32982: PPUSH
32983: LD_INT 2
32985: PPUSH
32986: CALL_OW 275
32990: PUSH
32991: LD_VAR 0 11
32995: PUSH
32996: LD_INT 2
32998: ARRAY
32999: GREATEREQUAL
33000: AND
33001: PUSH
33002: LD_VAR 0 10
33006: PPUSH
33007: LD_INT 3
33009: PPUSH
33010: CALL_OW 275
33014: PUSH
33015: LD_VAR 0 11
33019: PUSH
33020: LD_INT 3
33022: ARRAY
33023: GREATEREQUAL
33024: AND
33025: NOT
33026: IFFALSE 33030
// exit ;
33028: GO 33632
// if GetBType ( depot ) = b_depot then
33030: LD_VAR 0 1
33034: PPUSH
33035: CALL_OW 266
33039: PUSH
33040: LD_INT 0
33042: EQUAL
33043: IFFALSE 33055
// dist := 28 else
33045: LD_ADDR_VAR 0 14
33049: PUSH
33050: LD_INT 28
33052: ST_TO_ADDR
33053: GO 33063
// dist := 36 ;
33055: LD_ADDR_VAR 0 14
33059: PUSH
33060: LD_INT 36
33062: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
33063: LD_VAR 0 1
33067: PPUSH
33068: LD_VAR 0 3
33072: PPUSH
33073: LD_VAR 0 4
33077: PPUSH
33078: CALL_OW 297
33082: PUSH
33083: LD_VAR 0 14
33087: GREATER
33088: IFFALSE 33092
// exit ;
33090: GO 33632
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
33092: LD_ADDR_VAR 0 12
33096: PUSH
33097: LD_VAR 0 2
33101: PPUSH
33102: LD_VAR 0 3
33106: PPUSH
33107: LD_VAR 0 4
33111: PPUSH
33112: LD_VAR 0 5
33116: PPUSH
33117: LD_VAR 0 1
33121: PPUSH
33122: CALL_OW 248
33126: PPUSH
33127: LD_INT 0
33129: PPUSH
33130: CALL 33637 0 6
33134: ST_TO_ADDR
// if not hexes then
33135: LD_VAR 0 12
33139: NOT
33140: IFFALSE 33144
// exit ;
33142: GO 33632
// hex := GetHexInfo ( x , y ) ;
33144: LD_ADDR_VAR 0 15
33148: PUSH
33149: LD_VAR 0 3
33153: PPUSH
33154: LD_VAR 0 4
33158: PPUSH
33159: CALL_OW 546
33163: ST_TO_ADDR
// if hex [ 1 ] then
33164: LD_VAR 0 15
33168: PUSH
33169: LD_INT 1
33171: ARRAY
33172: IFFALSE 33176
// exit ;
33174: GO 33632
// height := hex [ 2 ] ;
33176: LD_ADDR_VAR 0 13
33180: PUSH
33181: LD_VAR 0 15
33185: PUSH
33186: LD_INT 2
33188: ARRAY
33189: ST_TO_ADDR
// for i = 1 to hexes do
33190: LD_ADDR_VAR 0 7
33194: PUSH
33195: DOUBLE
33196: LD_INT 1
33198: DEC
33199: ST_TO_ADDR
33200: LD_VAR 0 12
33204: PUSH
33205: FOR_TO
33206: IFFALSE 33536
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
33208: LD_VAR 0 12
33212: PUSH
33213: LD_VAR 0 7
33217: ARRAY
33218: PUSH
33219: LD_INT 1
33221: ARRAY
33222: PPUSH
33223: LD_VAR 0 12
33227: PUSH
33228: LD_VAR 0 7
33232: ARRAY
33233: PUSH
33234: LD_INT 2
33236: ARRAY
33237: PPUSH
33238: CALL_OW 488
33242: NOT
33243: PUSH
33244: LD_VAR 0 12
33248: PUSH
33249: LD_VAR 0 7
33253: ARRAY
33254: PUSH
33255: LD_INT 1
33257: ARRAY
33258: PPUSH
33259: LD_VAR 0 12
33263: PUSH
33264: LD_VAR 0 7
33268: ARRAY
33269: PUSH
33270: LD_INT 2
33272: ARRAY
33273: PPUSH
33274: CALL_OW 428
33278: PUSH
33279: LD_INT 0
33281: GREATER
33282: OR
33283: PUSH
33284: LD_VAR 0 12
33288: PUSH
33289: LD_VAR 0 7
33293: ARRAY
33294: PUSH
33295: LD_INT 1
33297: ARRAY
33298: PPUSH
33299: LD_VAR 0 12
33303: PUSH
33304: LD_VAR 0 7
33308: ARRAY
33309: PUSH
33310: LD_INT 2
33312: ARRAY
33313: PPUSH
33314: CALL_OW 351
33318: OR
33319: IFFALSE 33325
// exit ;
33321: POP
33322: POP
33323: GO 33632
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33325: LD_ADDR_VAR 0 8
33329: PUSH
33330: LD_VAR 0 12
33334: PUSH
33335: LD_VAR 0 7
33339: ARRAY
33340: PUSH
33341: LD_INT 1
33343: ARRAY
33344: PPUSH
33345: LD_VAR 0 12
33349: PUSH
33350: LD_VAR 0 7
33354: ARRAY
33355: PUSH
33356: LD_INT 2
33358: ARRAY
33359: PPUSH
33360: CALL_OW 546
33364: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
33365: LD_VAR 0 8
33369: PUSH
33370: LD_INT 1
33372: ARRAY
33373: PUSH
33374: LD_VAR 0 8
33378: PUSH
33379: LD_INT 2
33381: ARRAY
33382: PUSH
33383: LD_VAR 0 13
33387: PUSH
33388: LD_INT 2
33390: PLUS
33391: GREATER
33392: OR
33393: PUSH
33394: LD_VAR 0 8
33398: PUSH
33399: LD_INT 2
33401: ARRAY
33402: PUSH
33403: LD_VAR 0 13
33407: PUSH
33408: LD_INT 2
33410: MINUS
33411: LESS
33412: OR
33413: PUSH
33414: LD_VAR 0 8
33418: PUSH
33419: LD_INT 3
33421: ARRAY
33422: PUSH
33423: LD_INT 0
33425: PUSH
33426: LD_INT 8
33428: PUSH
33429: LD_INT 9
33431: PUSH
33432: LD_INT 10
33434: PUSH
33435: LD_INT 11
33437: PUSH
33438: LD_INT 12
33440: PUSH
33441: LD_INT 13
33443: PUSH
33444: LD_INT 16
33446: PUSH
33447: LD_INT 17
33449: PUSH
33450: LD_INT 18
33452: PUSH
33453: LD_INT 19
33455: PUSH
33456: LD_INT 20
33458: PUSH
33459: LD_INT 21
33461: PUSH
33462: EMPTY
33463: LIST
33464: LIST
33465: LIST
33466: LIST
33467: LIST
33468: LIST
33469: LIST
33470: LIST
33471: LIST
33472: LIST
33473: LIST
33474: LIST
33475: LIST
33476: IN
33477: NOT
33478: OR
33479: PUSH
33480: LD_VAR 0 8
33484: PUSH
33485: LD_INT 5
33487: ARRAY
33488: NOT
33489: OR
33490: PUSH
33491: LD_VAR 0 8
33495: PUSH
33496: LD_INT 6
33498: ARRAY
33499: PUSH
33500: LD_INT 1
33502: PUSH
33503: LD_INT 2
33505: PUSH
33506: LD_INT 7
33508: PUSH
33509: LD_INT 9
33511: PUSH
33512: LD_INT 10
33514: PUSH
33515: LD_INT 11
33517: PUSH
33518: EMPTY
33519: LIST
33520: LIST
33521: LIST
33522: LIST
33523: LIST
33524: LIST
33525: IN
33526: NOT
33527: OR
33528: IFFALSE 33534
// exit ;
33530: POP
33531: POP
33532: GO 33632
// end ;
33534: GO 33205
33536: POP
33537: POP
// side := GetSide ( depot ) ;
33538: LD_ADDR_VAR 0 9
33542: PUSH
33543: LD_VAR 0 1
33547: PPUSH
33548: CALL_OW 255
33552: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
33553: LD_VAR 0 9
33557: PPUSH
33558: LD_VAR 0 3
33562: PPUSH
33563: LD_VAR 0 4
33567: PPUSH
33568: LD_INT 20
33570: PPUSH
33571: CALL 26286 0 4
33575: PUSH
33576: LD_INT 4
33578: ARRAY
33579: IFFALSE 33583
// exit ;
33581: GO 33632
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
33583: LD_VAR 0 2
33587: PUSH
33588: LD_INT 29
33590: PUSH
33591: LD_INT 30
33593: PUSH
33594: EMPTY
33595: LIST
33596: LIST
33597: IN
33598: PUSH
33599: LD_VAR 0 3
33603: PPUSH
33604: LD_VAR 0 4
33608: PPUSH
33609: LD_VAR 0 9
33613: PPUSH
33614: CALL_OW 440
33618: NOT
33619: AND
33620: IFFALSE 33624
// exit ;
33622: GO 33632
// result := true ;
33624: LD_ADDR_VAR 0 6
33628: PUSH
33629: LD_INT 1
33631: ST_TO_ADDR
// end ;
33632: LD_VAR 0 6
33636: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
33637: LD_INT 0
33639: PPUSH
33640: PPUSH
33641: PPUSH
33642: PPUSH
33643: PPUSH
33644: PPUSH
33645: PPUSH
33646: PPUSH
33647: PPUSH
33648: PPUSH
33649: PPUSH
33650: PPUSH
33651: PPUSH
33652: PPUSH
33653: PPUSH
33654: PPUSH
33655: PPUSH
33656: PPUSH
33657: PPUSH
33658: PPUSH
33659: PPUSH
33660: PPUSH
33661: PPUSH
33662: PPUSH
33663: PPUSH
33664: PPUSH
33665: PPUSH
33666: PPUSH
33667: PPUSH
33668: PPUSH
33669: PPUSH
33670: PPUSH
33671: PPUSH
33672: PPUSH
33673: PPUSH
33674: PPUSH
33675: PPUSH
33676: PPUSH
33677: PPUSH
33678: PPUSH
33679: PPUSH
33680: PPUSH
33681: PPUSH
33682: PPUSH
33683: PPUSH
33684: PPUSH
33685: PPUSH
33686: PPUSH
33687: PPUSH
33688: PPUSH
33689: PPUSH
33690: PPUSH
33691: PPUSH
33692: PPUSH
33693: PPUSH
33694: PPUSH
33695: PPUSH
33696: PPUSH
// result = [ ] ;
33697: LD_ADDR_VAR 0 7
33701: PUSH
33702: EMPTY
33703: ST_TO_ADDR
// temp_list = [ ] ;
33704: LD_ADDR_VAR 0 9
33708: PUSH
33709: EMPTY
33710: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
33711: LD_VAR 0 4
33715: PUSH
33716: LD_INT 0
33718: PUSH
33719: LD_INT 1
33721: PUSH
33722: LD_INT 2
33724: PUSH
33725: LD_INT 3
33727: PUSH
33728: LD_INT 4
33730: PUSH
33731: LD_INT 5
33733: PUSH
33734: EMPTY
33735: LIST
33736: LIST
33737: LIST
33738: LIST
33739: LIST
33740: LIST
33741: IN
33742: NOT
33743: PUSH
33744: LD_VAR 0 1
33748: PUSH
33749: LD_INT 0
33751: PUSH
33752: LD_INT 1
33754: PUSH
33755: EMPTY
33756: LIST
33757: LIST
33758: IN
33759: PUSH
33760: LD_VAR 0 5
33764: PUSH
33765: LD_INT 1
33767: PUSH
33768: LD_INT 2
33770: PUSH
33771: LD_INT 3
33773: PUSH
33774: EMPTY
33775: LIST
33776: LIST
33777: LIST
33778: IN
33779: NOT
33780: AND
33781: OR
33782: IFFALSE 33786
// exit ;
33784: GO 52177
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
33786: LD_VAR 0 1
33790: PUSH
33791: LD_INT 6
33793: PUSH
33794: LD_INT 7
33796: PUSH
33797: LD_INT 8
33799: PUSH
33800: LD_INT 13
33802: PUSH
33803: LD_INT 12
33805: PUSH
33806: LD_INT 15
33808: PUSH
33809: LD_INT 11
33811: PUSH
33812: LD_INT 14
33814: PUSH
33815: LD_INT 10
33817: PUSH
33818: EMPTY
33819: LIST
33820: LIST
33821: LIST
33822: LIST
33823: LIST
33824: LIST
33825: LIST
33826: LIST
33827: LIST
33828: IN
33829: IFFALSE 33839
// btype = b_lab ;
33831: LD_ADDR_VAR 0 1
33835: PUSH
33836: LD_INT 6
33838: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
33839: LD_VAR 0 6
33843: PUSH
33844: LD_INT 0
33846: PUSH
33847: LD_INT 1
33849: PUSH
33850: LD_INT 2
33852: PUSH
33853: EMPTY
33854: LIST
33855: LIST
33856: LIST
33857: IN
33858: NOT
33859: PUSH
33860: LD_VAR 0 1
33864: PUSH
33865: LD_INT 0
33867: PUSH
33868: LD_INT 1
33870: PUSH
33871: LD_INT 2
33873: PUSH
33874: LD_INT 3
33876: PUSH
33877: LD_INT 6
33879: PUSH
33880: LD_INT 36
33882: PUSH
33883: LD_INT 4
33885: PUSH
33886: LD_INT 5
33888: PUSH
33889: LD_INT 31
33891: PUSH
33892: LD_INT 32
33894: PUSH
33895: LD_INT 33
33897: PUSH
33898: EMPTY
33899: LIST
33900: LIST
33901: LIST
33902: LIST
33903: LIST
33904: LIST
33905: LIST
33906: LIST
33907: LIST
33908: LIST
33909: LIST
33910: IN
33911: NOT
33912: PUSH
33913: LD_VAR 0 6
33917: PUSH
33918: LD_INT 1
33920: EQUAL
33921: AND
33922: OR
33923: PUSH
33924: LD_VAR 0 1
33928: PUSH
33929: LD_INT 2
33931: PUSH
33932: LD_INT 3
33934: PUSH
33935: EMPTY
33936: LIST
33937: LIST
33938: IN
33939: NOT
33940: PUSH
33941: LD_VAR 0 6
33945: PUSH
33946: LD_INT 2
33948: EQUAL
33949: AND
33950: OR
33951: IFFALSE 33961
// mode = 0 ;
33953: LD_ADDR_VAR 0 6
33957: PUSH
33958: LD_INT 0
33960: ST_TO_ADDR
// case mode of 0 :
33961: LD_VAR 0 6
33965: PUSH
33966: LD_INT 0
33968: DOUBLE
33969: EQUAL
33970: IFTRUE 33974
33972: GO 45427
33974: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
33975: LD_ADDR_VAR 0 11
33979: PUSH
33980: LD_INT 0
33982: PUSH
33983: LD_INT 0
33985: PUSH
33986: EMPTY
33987: LIST
33988: LIST
33989: PUSH
33990: LD_INT 0
33992: PUSH
33993: LD_INT 1
33995: NEG
33996: PUSH
33997: EMPTY
33998: LIST
33999: LIST
34000: PUSH
34001: LD_INT 1
34003: PUSH
34004: LD_INT 0
34006: PUSH
34007: EMPTY
34008: LIST
34009: LIST
34010: PUSH
34011: LD_INT 1
34013: PUSH
34014: LD_INT 1
34016: PUSH
34017: EMPTY
34018: LIST
34019: LIST
34020: PUSH
34021: LD_INT 0
34023: PUSH
34024: LD_INT 1
34026: PUSH
34027: EMPTY
34028: LIST
34029: LIST
34030: PUSH
34031: LD_INT 1
34033: NEG
34034: PUSH
34035: LD_INT 0
34037: PUSH
34038: EMPTY
34039: LIST
34040: LIST
34041: PUSH
34042: LD_INT 1
34044: NEG
34045: PUSH
34046: LD_INT 1
34048: NEG
34049: PUSH
34050: EMPTY
34051: LIST
34052: LIST
34053: PUSH
34054: LD_INT 1
34056: NEG
34057: PUSH
34058: LD_INT 2
34060: NEG
34061: PUSH
34062: EMPTY
34063: LIST
34064: LIST
34065: PUSH
34066: LD_INT 0
34068: PUSH
34069: LD_INT 2
34071: NEG
34072: PUSH
34073: EMPTY
34074: LIST
34075: LIST
34076: PUSH
34077: LD_INT 1
34079: PUSH
34080: LD_INT 1
34082: NEG
34083: PUSH
34084: EMPTY
34085: LIST
34086: LIST
34087: PUSH
34088: LD_INT 1
34090: PUSH
34091: LD_INT 2
34093: PUSH
34094: EMPTY
34095: LIST
34096: LIST
34097: PUSH
34098: LD_INT 0
34100: PUSH
34101: LD_INT 2
34103: PUSH
34104: EMPTY
34105: LIST
34106: LIST
34107: PUSH
34108: LD_INT 1
34110: NEG
34111: PUSH
34112: LD_INT 1
34114: PUSH
34115: EMPTY
34116: LIST
34117: LIST
34118: PUSH
34119: LD_INT 1
34121: PUSH
34122: LD_INT 3
34124: PUSH
34125: EMPTY
34126: LIST
34127: LIST
34128: PUSH
34129: LD_INT 0
34131: PUSH
34132: LD_INT 3
34134: PUSH
34135: EMPTY
34136: LIST
34137: LIST
34138: PUSH
34139: LD_INT 1
34141: NEG
34142: PUSH
34143: LD_INT 2
34145: PUSH
34146: EMPTY
34147: LIST
34148: LIST
34149: PUSH
34150: EMPTY
34151: LIST
34152: LIST
34153: LIST
34154: LIST
34155: LIST
34156: LIST
34157: LIST
34158: LIST
34159: LIST
34160: LIST
34161: LIST
34162: LIST
34163: LIST
34164: LIST
34165: LIST
34166: LIST
34167: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34168: LD_ADDR_VAR 0 12
34172: PUSH
34173: LD_INT 0
34175: PUSH
34176: LD_INT 0
34178: PUSH
34179: EMPTY
34180: LIST
34181: LIST
34182: PUSH
34183: LD_INT 0
34185: PUSH
34186: LD_INT 1
34188: NEG
34189: PUSH
34190: EMPTY
34191: LIST
34192: LIST
34193: PUSH
34194: LD_INT 1
34196: PUSH
34197: LD_INT 0
34199: PUSH
34200: EMPTY
34201: LIST
34202: LIST
34203: PUSH
34204: LD_INT 1
34206: PUSH
34207: LD_INT 1
34209: PUSH
34210: EMPTY
34211: LIST
34212: LIST
34213: PUSH
34214: LD_INT 0
34216: PUSH
34217: LD_INT 1
34219: PUSH
34220: EMPTY
34221: LIST
34222: LIST
34223: PUSH
34224: LD_INT 1
34226: NEG
34227: PUSH
34228: LD_INT 0
34230: PUSH
34231: EMPTY
34232: LIST
34233: LIST
34234: PUSH
34235: LD_INT 1
34237: NEG
34238: PUSH
34239: LD_INT 1
34241: NEG
34242: PUSH
34243: EMPTY
34244: LIST
34245: LIST
34246: PUSH
34247: LD_INT 1
34249: PUSH
34250: LD_INT 1
34252: NEG
34253: PUSH
34254: EMPTY
34255: LIST
34256: LIST
34257: PUSH
34258: LD_INT 2
34260: PUSH
34261: LD_INT 0
34263: PUSH
34264: EMPTY
34265: LIST
34266: LIST
34267: PUSH
34268: LD_INT 2
34270: PUSH
34271: LD_INT 1
34273: PUSH
34274: EMPTY
34275: LIST
34276: LIST
34277: PUSH
34278: LD_INT 1
34280: NEG
34281: PUSH
34282: LD_INT 1
34284: PUSH
34285: EMPTY
34286: LIST
34287: LIST
34288: PUSH
34289: LD_INT 2
34291: NEG
34292: PUSH
34293: LD_INT 0
34295: PUSH
34296: EMPTY
34297: LIST
34298: LIST
34299: PUSH
34300: LD_INT 2
34302: NEG
34303: PUSH
34304: LD_INT 1
34306: NEG
34307: PUSH
34308: EMPTY
34309: LIST
34310: LIST
34311: PUSH
34312: LD_INT 2
34314: NEG
34315: PUSH
34316: LD_INT 1
34318: PUSH
34319: EMPTY
34320: LIST
34321: LIST
34322: PUSH
34323: LD_INT 3
34325: NEG
34326: PUSH
34327: LD_INT 0
34329: PUSH
34330: EMPTY
34331: LIST
34332: LIST
34333: PUSH
34334: LD_INT 3
34336: NEG
34337: PUSH
34338: LD_INT 1
34340: NEG
34341: PUSH
34342: EMPTY
34343: LIST
34344: LIST
34345: PUSH
34346: EMPTY
34347: LIST
34348: LIST
34349: LIST
34350: LIST
34351: LIST
34352: LIST
34353: LIST
34354: LIST
34355: LIST
34356: LIST
34357: LIST
34358: LIST
34359: LIST
34360: LIST
34361: LIST
34362: LIST
34363: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34364: LD_ADDR_VAR 0 13
34368: PUSH
34369: LD_INT 0
34371: PUSH
34372: LD_INT 0
34374: PUSH
34375: EMPTY
34376: LIST
34377: LIST
34378: PUSH
34379: LD_INT 0
34381: PUSH
34382: LD_INT 1
34384: NEG
34385: PUSH
34386: EMPTY
34387: LIST
34388: LIST
34389: PUSH
34390: LD_INT 1
34392: PUSH
34393: LD_INT 0
34395: PUSH
34396: EMPTY
34397: LIST
34398: LIST
34399: PUSH
34400: LD_INT 1
34402: PUSH
34403: LD_INT 1
34405: PUSH
34406: EMPTY
34407: LIST
34408: LIST
34409: PUSH
34410: LD_INT 0
34412: PUSH
34413: LD_INT 1
34415: PUSH
34416: EMPTY
34417: LIST
34418: LIST
34419: PUSH
34420: LD_INT 1
34422: NEG
34423: PUSH
34424: LD_INT 0
34426: PUSH
34427: EMPTY
34428: LIST
34429: LIST
34430: PUSH
34431: LD_INT 1
34433: NEG
34434: PUSH
34435: LD_INT 1
34437: NEG
34438: PUSH
34439: EMPTY
34440: LIST
34441: LIST
34442: PUSH
34443: LD_INT 1
34445: NEG
34446: PUSH
34447: LD_INT 2
34449: NEG
34450: PUSH
34451: EMPTY
34452: LIST
34453: LIST
34454: PUSH
34455: LD_INT 2
34457: PUSH
34458: LD_INT 1
34460: PUSH
34461: EMPTY
34462: LIST
34463: LIST
34464: PUSH
34465: LD_INT 2
34467: PUSH
34468: LD_INT 2
34470: PUSH
34471: EMPTY
34472: LIST
34473: LIST
34474: PUSH
34475: LD_INT 1
34477: PUSH
34478: LD_INT 2
34480: PUSH
34481: EMPTY
34482: LIST
34483: LIST
34484: PUSH
34485: LD_INT 2
34487: NEG
34488: PUSH
34489: LD_INT 1
34491: NEG
34492: PUSH
34493: EMPTY
34494: LIST
34495: LIST
34496: PUSH
34497: LD_INT 2
34499: NEG
34500: PUSH
34501: LD_INT 2
34503: NEG
34504: PUSH
34505: EMPTY
34506: LIST
34507: LIST
34508: PUSH
34509: LD_INT 2
34511: NEG
34512: PUSH
34513: LD_INT 3
34515: NEG
34516: PUSH
34517: EMPTY
34518: LIST
34519: LIST
34520: PUSH
34521: LD_INT 3
34523: NEG
34524: PUSH
34525: LD_INT 2
34527: NEG
34528: PUSH
34529: EMPTY
34530: LIST
34531: LIST
34532: PUSH
34533: LD_INT 3
34535: NEG
34536: PUSH
34537: LD_INT 3
34539: NEG
34540: PUSH
34541: EMPTY
34542: LIST
34543: LIST
34544: PUSH
34545: EMPTY
34546: LIST
34547: LIST
34548: LIST
34549: LIST
34550: LIST
34551: LIST
34552: LIST
34553: LIST
34554: LIST
34555: LIST
34556: LIST
34557: LIST
34558: LIST
34559: LIST
34560: LIST
34561: LIST
34562: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
34563: LD_ADDR_VAR 0 14
34567: PUSH
34568: LD_INT 0
34570: PUSH
34571: LD_INT 0
34573: PUSH
34574: EMPTY
34575: LIST
34576: LIST
34577: PUSH
34578: LD_INT 0
34580: PUSH
34581: LD_INT 1
34583: NEG
34584: PUSH
34585: EMPTY
34586: LIST
34587: LIST
34588: PUSH
34589: LD_INT 1
34591: PUSH
34592: LD_INT 0
34594: PUSH
34595: EMPTY
34596: LIST
34597: LIST
34598: PUSH
34599: LD_INT 1
34601: PUSH
34602: LD_INT 1
34604: PUSH
34605: EMPTY
34606: LIST
34607: LIST
34608: PUSH
34609: LD_INT 0
34611: PUSH
34612: LD_INT 1
34614: PUSH
34615: EMPTY
34616: LIST
34617: LIST
34618: PUSH
34619: LD_INT 1
34621: NEG
34622: PUSH
34623: LD_INT 0
34625: PUSH
34626: EMPTY
34627: LIST
34628: LIST
34629: PUSH
34630: LD_INT 1
34632: NEG
34633: PUSH
34634: LD_INT 1
34636: NEG
34637: PUSH
34638: EMPTY
34639: LIST
34640: LIST
34641: PUSH
34642: LD_INT 1
34644: NEG
34645: PUSH
34646: LD_INT 2
34648: NEG
34649: PUSH
34650: EMPTY
34651: LIST
34652: LIST
34653: PUSH
34654: LD_INT 0
34656: PUSH
34657: LD_INT 2
34659: NEG
34660: PUSH
34661: EMPTY
34662: LIST
34663: LIST
34664: PUSH
34665: LD_INT 1
34667: PUSH
34668: LD_INT 1
34670: NEG
34671: PUSH
34672: EMPTY
34673: LIST
34674: LIST
34675: PUSH
34676: LD_INT 1
34678: PUSH
34679: LD_INT 2
34681: PUSH
34682: EMPTY
34683: LIST
34684: LIST
34685: PUSH
34686: LD_INT 0
34688: PUSH
34689: LD_INT 2
34691: PUSH
34692: EMPTY
34693: LIST
34694: LIST
34695: PUSH
34696: LD_INT 1
34698: NEG
34699: PUSH
34700: LD_INT 1
34702: PUSH
34703: EMPTY
34704: LIST
34705: LIST
34706: PUSH
34707: LD_INT 1
34709: NEG
34710: PUSH
34711: LD_INT 3
34713: NEG
34714: PUSH
34715: EMPTY
34716: LIST
34717: LIST
34718: PUSH
34719: LD_INT 0
34721: PUSH
34722: LD_INT 3
34724: NEG
34725: PUSH
34726: EMPTY
34727: LIST
34728: LIST
34729: PUSH
34730: LD_INT 1
34732: PUSH
34733: LD_INT 2
34735: NEG
34736: PUSH
34737: EMPTY
34738: LIST
34739: LIST
34740: PUSH
34741: EMPTY
34742: LIST
34743: LIST
34744: LIST
34745: LIST
34746: LIST
34747: LIST
34748: LIST
34749: LIST
34750: LIST
34751: LIST
34752: LIST
34753: LIST
34754: LIST
34755: LIST
34756: LIST
34757: LIST
34758: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
34759: LD_ADDR_VAR 0 15
34763: PUSH
34764: LD_INT 0
34766: PUSH
34767: LD_INT 0
34769: PUSH
34770: EMPTY
34771: LIST
34772: LIST
34773: PUSH
34774: LD_INT 0
34776: PUSH
34777: LD_INT 1
34779: NEG
34780: PUSH
34781: EMPTY
34782: LIST
34783: LIST
34784: PUSH
34785: LD_INT 1
34787: PUSH
34788: LD_INT 0
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: PUSH
34795: LD_INT 1
34797: PUSH
34798: LD_INT 1
34800: PUSH
34801: EMPTY
34802: LIST
34803: LIST
34804: PUSH
34805: LD_INT 0
34807: PUSH
34808: LD_INT 1
34810: PUSH
34811: EMPTY
34812: LIST
34813: LIST
34814: PUSH
34815: LD_INT 1
34817: NEG
34818: PUSH
34819: LD_INT 0
34821: PUSH
34822: EMPTY
34823: LIST
34824: LIST
34825: PUSH
34826: LD_INT 1
34828: NEG
34829: PUSH
34830: LD_INT 1
34832: NEG
34833: PUSH
34834: EMPTY
34835: LIST
34836: LIST
34837: PUSH
34838: LD_INT 1
34840: PUSH
34841: LD_INT 1
34843: NEG
34844: PUSH
34845: EMPTY
34846: LIST
34847: LIST
34848: PUSH
34849: LD_INT 2
34851: PUSH
34852: LD_INT 0
34854: PUSH
34855: EMPTY
34856: LIST
34857: LIST
34858: PUSH
34859: LD_INT 2
34861: PUSH
34862: LD_INT 1
34864: PUSH
34865: EMPTY
34866: LIST
34867: LIST
34868: PUSH
34869: LD_INT 1
34871: NEG
34872: PUSH
34873: LD_INT 1
34875: PUSH
34876: EMPTY
34877: LIST
34878: LIST
34879: PUSH
34880: LD_INT 2
34882: NEG
34883: PUSH
34884: LD_INT 0
34886: PUSH
34887: EMPTY
34888: LIST
34889: LIST
34890: PUSH
34891: LD_INT 2
34893: NEG
34894: PUSH
34895: LD_INT 1
34897: NEG
34898: PUSH
34899: EMPTY
34900: LIST
34901: LIST
34902: PUSH
34903: LD_INT 2
34905: PUSH
34906: LD_INT 1
34908: NEG
34909: PUSH
34910: EMPTY
34911: LIST
34912: LIST
34913: PUSH
34914: LD_INT 3
34916: PUSH
34917: LD_INT 0
34919: PUSH
34920: EMPTY
34921: LIST
34922: LIST
34923: PUSH
34924: LD_INT 3
34926: PUSH
34927: LD_INT 1
34929: PUSH
34930: EMPTY
34931: LIST
34932: LIST
34933: PUSH
34934: EMPTY
34935: LIST
34936: LIST
34937: LIST
34938: LIST
34939: LIST
34940: LIST
34941: LIST
34942: LIST
34943: LIST
34944: LIST
34945: LIST
34946: LIST
34947: LIST
34948: LIST
34949: LIST
34950: LIST
34951: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
34952: LD_ADDR_VAR 0 16
34956: PUSH
34957: LD_INT 0
34959: PUSH
34960: LD_INT 0
34962: PUSH
34963: EMPTY
34964: LIST
34965: LIST
34966: PUSH
34967: LD_INT 0
34969: PUSH
34970: LD_INT 1
34972: NEG
34973: PUSH
34974: EMPTY
34975: LIST
34976: LIST
34977: PUSH
34978: LD_INT 1
34980: PUSH
34981: LD_INT 0
34983: PUSH
34984: EMPTY
34985: LIST
34986: LIST
34987: PUSH
34988: LD_INT 1
34990: PUSH
34991: LD_INT 1
34993: PUSH
34994: EMPTY
34995: LIST
34996: LIST
34997: PUSH
34998: LD_INT 0
35000: PUSH
35001: LD_INT 1
35003: PUSH
35004: EMPTY
35005: LIST
35006: LIST
35007: PUSH
35008: LD_INT 1
35010: NEG
35011: PUSH
35012: LD_INT 0
35014: PUSH
35015: EMPTY
35016: LIST
35017: LIST
35018: PUSH
35019: LD_INT 1
35021: NEG
35022: PUSH
35023: LD_INT 1
35025: NEG
35026: PUSH
35027: EMPTY
35028: LIST
35029: LIST
35030: PUSH
35031: LD_INT 1
35033: NEG
35034: PUSH
35035: LD_INT 2
35037: NEG
35038: PUSH
35039: EMPTY
35040: LIST
35041: LIST
35042: PUSH
35043: LD_INT 2
35045: PUSH
35046: LD_INT 1
35048: PUSH
35049: EMPTY
35050: LIST
35051: LIST
35052: PUSH
35053: LD_INT 2
35055: PUSH
35056: LD_INT 2
35058: PUSH
35059: EMPTY
35060: LIST
35061: LIST
35062: PUSH
35063: LD_INT 1
35065: PUSH
35066: LD_INT 2
35068: PUSH
35069: EMPTY
35070: LIST
35071: LIST
35072: PUSH
35073: LD_INT 2
35075: NEG
35076: PUSH
35077: LD_INT 1
35079: NEG
35080: PUSH
35081: EMPTY
35082: LIST
35083: LIST
35084: PUSH
35085: LD_INT 2
35087: NEG
35088: PUSH
35089: LD_INT 2
35091: NEG
35092: PUSH
35093: EMPTY
35094: LIST
35095: LIST
35096: PUSH
35097: LD_INT 3
35099: PUSH
35100: LD_INT 2
35102: PUSH
35103: EMPTY
35104: LIST
35105: LIST
35106: PUSH
35107: LD_INT 3
35109: PUSH
35110: LD_INT 3
35112: PUSH
35113: EMPTY
35114: LIST
35115: LIST
35116: PUSH
35117: LD_INT 2
35119: PUSH
35120: LD_INT 3
35122: PUSH
35123: EMPTY
35124: LIST
35125: LIST
35126: PUSH
35127: EMPTY
35128: LIST
35129: LIST
35130: LIST
35131: LIST
35132: LIST
35133: LIST
35134: LIST
35135: LIST
35136: LIST
35137: LIST
35138: LIST
35139: LIST
35140: LIST
35141: LIST
35142: LIST
35143: LIST
35144: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35145: LD_ADDR_VAR 0 17
35149: PUSH
35150: LD_INT 0
35152: PUSH
35153: LD_INT 0
35155: PUSH
35156: EMPTY
35157: LIST
35158: LIST
35159: PUSH
35160: LD_INT 0
35162: PUSH
35163: LD_INT 1
35165: NEG
35166: PUSH
35167: EMPTY
35168: LIST
35169: LIST
35170: PUSH
35171: LD_INT 1
35173: PUSH
35174: LD_INT 0
35176: PUSH
35177: EMPTY
35178: LIST
35179: LIST
35180: PUSH
35181: LD_INT 1
35183: PUSH
35184: LD_INT 1
35186: PUSH
35187: EMPTY
35188: LIST
35189: LIST
35190: PUSH
35191: LD_INT 0
35193: PUSH
35194: LD_INT 1
35196: PUSH
35197: EMPTY
35198: LIST
35199: LIST
35200: PUSH
35201: LD_INT 1
35203: NEG
35204: PUSH
35205: LD_INT 0
35207: PUSH
35208: EMPTY
35209: LIST
35210: LIST
35211: PUSH
35212: LD_INT 1
35214: NEG
35215: PUSH
35216: LD_INT 1
35218: NEG
35219: PUSH
35220: EMPTY
35221: LIST
35222: LIST
35223: PUSH
35224: LD_INT 1
35226: NEG
35227: PUSH
35228: LD_INT 2
35230: NEG
35231: PUSH
35232: EMPTY
35233: LIST
35234: LIST
35235: PUSH
35236: LD_INT 0
35238: PUSH
35239: LD_INT 2
35241: NEG
35242: PUSH
35243: EMPTY
35244: LIST
35245: LIST
35246: PUSH
35247: LD_INT 1
35249: PUSH
35250: LD_INT 1
35252: NEG
35253: PUSH
35254: EMPTY
35255: LIST
35256: LIST
35257: PUSH
35258: LD_INT 2
35260: PUSH
35261: LD_INT 0
35263: PUSH
35264: EMPTY
35265: LIST
35266: LIST
35267: PUSH
35268: LD_INT 2
35270: PUSH
35271: LD_INT 1
35273: PUSH
35274: EMPTY
35275: LIST
35276: LIST
35277: PUSH
35278: LD_INT 2
35280: PUSH
35281: LD_INT 2
35283: PUSH
35284: EMPTY
35285: LIST
35286: LIST
35287: PUSH
35288: LD_INT 1
35290: PUSH
35291: LD_INT 2
35293: PUSH
35294: EMPTY
35295: LIST
35296: LIST
35297: PUSH
35298: LD_INT 0
35300: PUSH
35301: LD_INT 2
35303: PUSH
35304: EMPTY
35305: LIST
35306: LIST
35307: PUSH
35308: LD_INT 1
35310: NEG
35311: PUSH
35312: LD_INT 1
35314: PUSH
35315: EMPTY
35316: LIST
35317: LIST
35318: PUSH
35319: LD_INT 2
35321: NEG
35322: PUSH
35323: LD_INT 0
35325: PUSH
35326: EMPTY
35327: LIST
35328: LIST
35329: PUSH
35330: LD_INT 2
35332: NEG
35333: PUSH
35334: LD_INT 1
35336: NEG
35337: PUSH
35338: EMPTY
35339: LIST
35340: LIST
35341: PUSH
35342: LD_INT 2
35344: NEG
35345: PUSH
35346: LD_INT 2
35348: NEG
35349: PUSH
35350: EMPTY
35351: LIST
35352: LIST
35353: PUSH
35354: EMPTY
35355: LIST
35356: LIST
35357: LIST
35358: LIST
35359: LIST
35360: LIST
35361: LIST
35362: LIST
35363: LIST
35364: LIST
35365: LIST
35366: LIST
35367: LIST
35368: LIST
35369: LIST
35370: LIST
35371: LIST
35372: LIST
35373: LIST
35374: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35375: LD_ADDR_VAR 0 18
35379: PUSH
35380: LD_INT 0
35382: PUSH
35383: LD_INT 0
35385: PUSH
35386: EMPTY
35387: LIST
35388: LIST
35389: PUSH
35390: LD_INT 0
35392: PUSH
35393: LD_INT 1
35395: NEG
35396: PUSH
35397: EMPTY
35398: LIST
35399: LIST
35400: PUSH
35401: LD_INT 1
35403: PUSH
35404: LD_INT 0
35406: PUSH
35407: EMPTY
35408: LIST
35409: LIST
35410: PUSH
35411: LD_INT 1
35413: PUSH
35414: LD_INT 1
35416: PUSH
35417: EMPTY
35418: LIST
35419: LIST
35420: PUSH
35421: LD_INT 0
35423: PUSH
35424: LD_INT 1
35426: PUSH
35427: EMPTY
35428: LIST
35429: LIST
35430: PUSH
35431: LD_INT 1
35433: NEG
35434: PUSH
35435: LD_INT 0
35437: PUSH
35438: EMPTY
35439: LIST
35440: LIST
35441: PUSH
35442: LD_INT 1
35444: NEG
35445: PUSH
35446: LD_INT 1
35448: NEG
35449: PUSH
35450: EMPTY
35451: LIST
35452: LIST
35453: PUSH
35454: LD_INT 1
35456: NEG
35457: PUSH
35458: LD_INT 2
35460: NEG
35461: PUSH
35462: EMPTY
35463: LIST
35464: LIST
35465: PUSH
35466: LD_INT 0
35468: PUSH
35469: LD_INT 2
35471: NEG
35472: PUSH
35473: EMPTY
35474: LIST
35475: LIST
35476: PUSH
35477: LD_INT 1
35479: PUSH
35480: LD_INT 1
35482: NEG
35483: PUSH
35484: EMPTY
35485: LIST
35486: LIST
35487: PUSH
35488: LD_INT 2
35490: PUSH
35491: LD_INT 0
35493: PUSH
35494: EMPTY
35495: LIST
35496: LIST
35497: PUSH
35498: LD_INT 2
35500: PUSH
35501: LD_INT 1
35503: PUSH
35504: EMPTY
35505: LIST
35506: LIST
35507: PUSH
35508: LD_INT 2
35510: PUSH
35511: LD_INT 2
35513: PUSH
35514: EMPTY
35515: LIST
35516: LIST
35517: PUSH
35518: LD_INT 1
35520: PUSH
35521: LD_INT 2
35523: PUSH
35524: EMPTY
35525: LIST
35526: LIST
35527: PUSH
35528: LD_INT 0
35530: PUSH
35531: LD_INT 2
35533: PUSH
35534: EMPTY
35535: LIST
35536: LIST
35537: PUSH
35538: LD_INT 1
35540: NEG
35541: PUSH
35542: LD_INT 1
35544: PUSH
35545: EMPTY
35546: LIST
35547: LIST
35548: PUSH
35549: LD_INT 2
35551: NEG
35552: PUSH
35553: LD_INT 0
35555: PUSH
35556: EMPTY
35557: LIST
35558: LIST
35559: PUSH
35560: LD_INT 2
35562: NEG
35563: PUSH
35564: LD_INT 1
35566: NEG
35567: PUSH
35568: EMPTY
35569: LIST
35570: LIST
35571: PUSH
35572: LD_INT 2
35574: NEG
35575: PUSH
35576: LD_INT 2
35578: NEG
35579: PUSH
35580: EMPTY
35581: LIST
35582: LIST
35583: PUSH
35584: EMPTY
35585: LIST
35586: LIST
35587: LIST
35588: LIST
35589: LIST
35590: LIST
35591: LIST
35592: LIST
35593: LIST
35594: LIST
35595: LIST
35596: LIST
35597: LIST
35598: LIST
35599: LIST
35600: LIST
35601: LIST
35602: LIST
35603: LIST
35604: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35605: LD_ADDR_VAR 0 19
35609: PUSH
35610: LD_INT 0
35612: PUSH
35613: LD_INT 0
35615: PUSH
35616: EMPTY
35617: LIST
35618: LIST
35619: PUSH
35620: LD_INT 0
35622: PUSH
35623: LD_INT 1
35625: NEG
35626: PUSH
35627: EMPTY
35628: LIST
35629: LIST
35630: PUSH
35631: LD_INT 1
35633: PUSH
35634: LD_INT 0
35636: PUSH
35637: EMPTY
35638: LIST
35639: LIST
35640: PUSH
35641: LD_INT 1
35643: PUSH
35644: LD_INT 1
35646: PUSH
35647: EMPTY
35648: LIST
35649: LIST
35650: PUSH
35651: LD_INT 0
35653: PUSH
35654: LD_INT 1
35656: PUSH
35657: EMPTY
35658: LIST
35659: LIST
35660: PUSH
35661: LD_INT 1
35663: NEG
35664: PUSH
35665: LD_INT 0
35667: PUSH
35668: EMPTY
35669: LIST
35670: LIST
35671: PUSH
35672: LD_INT 1
35674: NEG
35675: PUSH
35676: LD_INT 1
35678: NEG
35679: PUSH
35680: EMPTY
35681: LIST
35682: LIST
35683: PUSH
35684: LD_INT 1
35686: NEG
35687: PUSH
35688: LD_INT 2
35690: NEG
35691: PUSH
35692: EMPTY
35693: LIST
35694: LIST
35695: PUSH
35696: LD_INT 0
35698: PUSH
35699: LD_INT 2
35701: NEG
35702: PUSH
35703: EMPTY
35704: LIST
35705: LIST
35706: PUSH
35707: LD_INT 1
35709: PUSH
35710: LD_INT 1
35712: NEG
35713: PUSH
35714: EMPTY
35715: LIST
35716: LIST
35717: PUSH
35718: LD_INT 2
35720: PUSH
35721: LD_INT 0
35723: PUSH
35724: EMPTY
35725: LIST
35726: LIST
35727: PUSH
35728: LD_INT 2
35730: PUSH
35731: LD_INT 1
35733: PUSH
35734: EMPTY
35735: LIST
35736: LIST
35737: PUSH
35738: LD_INT 2
35740: PUSH
35741: LD_INT 2
35743: PUSH
35744: EMPTY
35745: LIST
35746: LIST
35747: PUSH
35748: LD_INT 1
35750: PUSH
35751: LD_INT 2
35753: PUSH
35754: EMPTY
35755: LIST
35756: LIST
35757: PUSH
35758: LD_INT 0
35760: PUSH
35761: LD_INT 2
35763: PUSH
35764: EMPTY
35765: LIST
35766: LIST
35767: PUSH
35768: LD_INT 1
35770: NEG
35771: PUSH
35772: LD_INT 1
35774: PUSH
35775: EMPTY
35776: LIST
35777: LIST
35778: PUSH
35779: LD_INT 2
35781: NEG
35782: PUSH
35783: LD_INT 0
35785: PUSH
35786: EMPTY
35787: LIST
35788: LIST
35789: PUSH
35790: LD_INT 2
35792: NEG
35793: PUSH
35794: LD_INT 1
35796: NEG
35797: PUSH
35798: EMPTY
35799: LIST
35800: LIST
35801: PUSH
35802: LD_INT 2
35804: NEG
35805: PUSH
35806: LD_INT 2
35808: NEG
35809: PUSH
35810: EMPTY
35811: LIST
35812: LIST
35813: PUSH
35814: EMPTY
35815: LIST
35816: LIST
35817: LIST
35818: LIST
35819: LIST
35820: LIST
35821: LIST
35822: LIST
35823: LIST
35824: LIST
35825: LIST
35826: LIST
35827: LIST
35828: LIST
35829: LIST
35830: LIST
35831: LIST
35832: LIST
35833: LIST
35834: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35835: LD_ADDR_VAR 0 20
35839: PUSH
35840: LD_INT 0
35842: PUSH
35843: LD_INT 0
35845: PUSH
35846: EMPTY
35847: LIST
35848: LIST
35849: PUSH
35850: LD_INT 0
35852: PUSH
35853: LD_INT 1
35855: NEG
35856: PUSH
35857: EMPTY
35858: LIST
35859: LIST
35860: PUSH
35861: LD_INT 1
35863: PUSH
35864: LD_INT 0
35866: PUSH
35867: EMPTY
35868: LIST
35869: LIST
35870: PUSH
35871: LD_INT 1
35873: PUSH
35874: LD_INT 1
35876: PUSH
35877: EMPTY
35878: LIST
35879: LIST
35880: PUSH
35881: LD_INT 0
35883: PUSH
35884: LD_INT 1
35886: PUSH
35887: EMPTY
35888: LIST
35889: LIST
35890: PUSH
35891: LD_INT 1
35893: NEG
35894: PUSH
35895: LD_INT 0
35897: PUSH
35898: EMPTY
35899: LIST
35900: LIST
35901: PUSH
35902: LD_INT 1
35904: NEG
35905: PUSH
35906: LD_INT 1
35908: NEG
35909: PUSH
35910: EMPTY
35911: LIST
35912: LIST
35913: PUSH
35914: LD_INT 1
35916: NEG
35917: PUSH
35918: LD_INT 2
35920: NEG
35921: PUSH
35922: EMPTY
35923: LIST
35924: LIST
35925: PUSH
35926: LD_INT 0
35928: PUSH
35929: LD_INT 2
35931: NEG
35932: PUSH
35933: EMPTY
35934: LIST
35935: LIST
35936: PUSH
35937: LD_INT 1
35939: PUSH
35940: LD_INT 1
35942: NEG
35943: PUSH
35944: EMPTY
35945: LIST
35946: LIST
35947: PUSH
35948: LD_INT 2
35950: PUSH
35951: LD_INT 0
35953: PUSH
35954: EMPTY
35955: LIST
35956: LIST
35957: PUSH
35958: LD_INT 2
35960: PUSH
35961: LD_INT 1
35963: PUSH
35964: EMPTY
35965: LIST
35966: LIST
35967: PUSH
35968: LD_INT 2
35970: PUSH
35971: LD_INT 2
35973: PUSH
35974: EMPTY
35975: LIST
35976: LIST
35977: PUSH
35978: LD_INT 1
35980: PUSH
35981: LD_INT 2
35983: PUSH
35984: EMPTY
35985: LIST
35986: LIST
35987: PUSH
35988: LD_INT 0
35990: PUSH
35991: LD_INT 2
35993: PUSH
35994: EMPTY
35995: LIST
35996: LIST
35997: PUSH
35998: LD_INT 1
36000: NEG
36001: PUSH
36002: LD_INT 1
36004: PUSH
36005: EMPTY
36006: LIST
36007: LIST
36008: PUSH
36009: LD_INT 2
36011: NEG
36012: PUSH
36013: LD_INT 0
36015: PUSH
36016: EMPTY
36017: LIST
36018: LIST
36019: PUSH
36020: LD_INT 2
36022: NEG
36023: PUSH
36024: LD_INT 1
36026: NEG
36027: PUSH
36028: EMPTY
36029: LIST
36030: LIST
36031: PUSH
36032: LD_INT 2
36034: NEG
36035: PUSH
36036: LD_INT 2
36038: NEG
36039: PUSH
36040: EMPTY
36041: LIST
36042: LIST
36043: PUSH
36044: EMPTY
36045: LIST
36046: LIST
36047: LIST
36048: LIST
36049: LIST
36050: LIST
36051: LIST
36052: LIST
36053: LIST
36054: LIST
36055: LIST
36056: LIST
36057: LIST
36058: LIST
36059: LIST
36060: LIST
36061: LIST
36062: LIST
36063: LIST
36064: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36065: LD_ADDR_VAR 0 21
36069: PUSH
36070: LD_INT 0
36072: PUSH
36073: LD_INT 0
36075: PUSH
36076: EMPTY
36077: LIST
36078: LIST
36079: PUSH
36080: LD_INT 0
36082: PUSH
36083: LD_INT 1
36085: NEG
36086: PUSH
36087: EMPTY
36088: LIST
36089: LIST
36090: PUSH
36091: LD_INT 1
36093: PUSH
36094: LD_INT 0
36096: PUSH
36097: EMPTY
36098: LIST
36099: LIST
36100: PUSH
36101: LD_INT 1
36103: PUSH
36104: LD_INT 1
36106: PUSH
36107: EMPTY
36108: LIST
36109: LIST
36110: PUSH
36111: LD_INT 0
36113: PUSH
36114: LD_INT 1
36116: PUSH
36117: EMPTY
36118: LIST
36119: LIST
36120: PUSH
36121: LD_INT 1
36123: NEG
36124: PUSH
36125: LD_INT 0
36127: PUSH
36128: EMPTY
36129: LIST
36130: LIST
36131: PUSH
36132: LD_INT 1
36134: NEG
36135: PUSH
36136: LD_INT 1
36138: NEG
36139: PUSH
36140: EMPTY
36141: LIST
36142: LIST
36143: PUSH
36144: LD_INT 1
36146: NEG
36147: PUSH
36148: LD_INT 2
36150: NEG
36151: PUSH
36152: EMPTY
36153: LIST
36154: LIST
36155: PUSH
36156: LD_INT 0
36158: PUSH
36159: LD_INT 2
36161: NEG
36162: PUSH
36163: EMPTY
36164: LIST
36165: LIST
36166: PUSH
36167: LD_INT 1
36169: PUSH
36170: LD_INT 1
36172: NEG
36173: PUSH
36174: EMPTY
36175: LIST
36176: LIST
36177: PUSH
36178: LD_INT 2
36180: PUSH
36181: LD_INT 0
36183: PUSH
36184: EMPTY
36185: LIST
36186: LIST
36187: PUSH
36188: LD_INT 2
36190: PUSH
36191: LD_INT 1
36193: PUSH
36194: EMPTY
36195: LIST
36196: LIST
36197: PUSH
36198: LD_INT 2
36200: PUSH
36201: LD_INT 2
36203: PUSH
36204: EMPTY
36205: LIST
36206: LIST
36207: PUSH
36208: LD_INT 1
36210: PUSH
36211: LD_INT 2
36213: PUSH
36214: EMPTY
36215: LIST
36216: LIST
36217: PUSH
36218: LD_INT 0
36220: PUSH
36221: LD_INT 2
36223: PUSH
36224: EMPTY
36225: LIST
36226: LIST
36227: PUSH
36228: LD_INT 1
36230: NEG
36231: PUSH
36232: LD_INT 1
36234: PUSH
36235: EMPTY
36236: LIST
36237: LIST
36238: PUSH
36239: LD_INT 2
36241: NEG
36242: PUSH
36243: LD_INT 0
36245: PUSH
36246: EMPTY
36247: LIST
36248: LIST
36249: PUSH
36250: LD_INT 2
36252: NEG
36253: PUSH
36254: LD_INT 1
36256: NEG
36257: PUSH
36258: EMPTY
36259: LIST
36260: LIST
36261: PUSH
36262: LD_INT 2
36264: NEG
36265: PUSH
36266: LD_INT 2
36268: NEG
36269: PUSH
36270: EMPTY
36271: LIST
36272: LIST
36273: PUSH
36274: EMPTY
36275: LIST
36276: LIST
36277: LIST
36278: LIST
36279: LIST
36280: LIST
36281: LIST
36282: LIST
36283: LIST
36284: LIST
36285: LIST
36286: LIST
36287: LIST
36288: LIST
36289: LIST
36290: LIST
36291: LIST
36292: LIST
36293: LIST
36294: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36295: LD_ADDR_VAR 0 22
36299: PUSH
36300: LD_INT 0
36302: PUSH
36303: LD_INT 0
36305: PUSH
36306: EMPTY
36307: LIST
36308: LIST
36309: PUSH
36310: LD_INT 0
36312: PUSH
36313: LD_INT 1
36315: NEG
36316: PUSH
36317: EMPTY
36318: LIST
36319: LIST
36320: PUSH
36321: LD_INT 1
36323: PUSH
36324: LD_INT 0
36326: PUSH
36327: EMPTY
36328: LIST
36329: LIST
36330: PUSH
36331: LD_INT 1
36333: PUSH
36334: LD_INT 1
36336: PUSH
36337: EMPTY
36338: LIST
36339: LIST
36340: PUSH
36341: LD_INT 0
36343: PUSH
36344: LD_INT 1
36346: PUSH
36347: EMPTY
36348: LIST
36349: LIST
36350: PUSH
36351: LD_INT 1
36353: NEG
36354: PUSH
36355: LD_INT 0
36357: PUSH
36358: EMPTY
36359: LIST
36360: LIST
36361: PUSH
36362: LD_INT 1
36364: NEG
36365: PUSH
36366: LD_INT 1
36368: NEG
36369: PUSH
36370: EMPTY
36371: LIST
36372: LIST
36373: PUSH
36374: LD_INT 1
36376: NEG
36377: PUSH
36378: LD_INT 2
36380: NEG
36381: PUSH
36382: EMPTY
36383: LIST
36384: LIST
36385: PUSH
36386: LD_INT 0
36388: PUSH
36389: LD_INT 2
36391: NEG
36392: PUSH
36393: EMPTY
36394: LIST
36395: LIST
36396: PUSH
36397: LD_INT 1
36399: PUSH
36400: LD_INT 1
36402: NEG
36403: PUSH
36404: EMPTY
36405: LIST
36406: LIST
36407: PUSH
36408: LD_INT 2
36410: PUSH
36411: LD_INT 0
36413: PUSH
36414: EMPTY
36415: LIST
36416: LIST
36417: PUSH
36418: LD_INT 2
36420: PUSH
36421: LD_INT 1
36423: PUSH
36424: EMPTY
36425: LIST
36426: LIST
36427: PUSH
36428: LD_INT 2
36430: PUSH
36431: LD_INT 2
36433: PUSH
36434: EMPTY
36435: LIST
36436: LIST
36437: PUSH
36438: LD_INT 1
36440: PUSH
36441: LD_INT 2
36443: PUSH
36444: EMPTY
36445: LIST
36446: LIST
36447: PUSH
36448: LD_INT 0
36450: PUSH
36451: LD_INT 2
36453: PUSH
36454: EMPTY
36455: LIST
36456: LIST
36457: PUSH
36458: LD_INT 1
36460: NEG
36461: PUSH
36462: LD_INT 1
36464: PUSH
36465: EMPTY
36466: LIST
36467: LIST
36468: PUSH
36469: LD_INT 2
36471: NEG
36472: PUSH
36473: LD_INT 0
36475: PUSH
36476: EMPTY
36477: LIST
36478: LIST
36479: PUSH
36480: LD_INT 2
36482: NEG
36483: PUSH
36484: LD_INT 1
36486: NEG
36487: PUSH
36488: EMPTY
36489: LIST
36490: LIST
36491: PUSH
36492: LD_INT 2
36494: NEG
36495: PUSH
36496: LD_INT 2
36498: NEG
36499: PUSH
36500: EMPTY
36501: LIST
36502: LIST
36503: PUSH
36504: EMPTY
36505: LIST
36506: LIST
36507: LIST
36508: LIST
36509: LIST
36510: LIST
36511: LIST
36512: LIST
36513: LIST
36514: LIST
36515: LIST
36516: LIST
36517: LIST
36518: LIST
36519: LIST
36520: LIST
36521: LIST
36522: LIST
36523: LIST
36524: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
36525: LD_ADDR_VAR 0 23
36529: PUSH
36530: LD_INT 0
36532: PUSH
36533: LD_INT 0
36535: PUSH
36536: EMPTY
36537: LIST
36538: LIST
36539: PUSH
36540: LD_INT 0
36542: PUSH
36543: LD_INT 1
36545: NEG
36546: PUSH
36547: EMPTY
36548: LIST
36549: LIST
36550: PUSH
36551: LD_INT 1
36553: PUSH
36554: LD_INT 0
36556: PUSH
36557: EMPTY
36558: LIST
36559: LIST
36560: PUSH
36561: LD_INT 1
36563: PUSH
36564: LD_INT 1
36566: PUSH
36567: EMPTY
36568: LIST
36569: LIST
36570: PUSH
36571: LD_INT 0
36573: PUSH
36574: LD_INT 1
36576: PUSH
36577: EMPTY
36578: LIST
36579: LIST
36580: PUSH
36581: LD_INT 1
36583: NEG
36584: PUSH
36585: LD_INT 0
36587: PUSH
36588: EMPTY
36589: LIST
36590: LIST
36591: PUSH
36592: LD_INT 1
36594: NEG
36595: PUSH
36596: LD_INT 1
36598: NEG
36599: PUSH
36600: EMPTY
36601: LIST
36602: LIST
36603: PUSH
36604: LD_INT 1
36606: NEG
36607: PUSH
36608: LD_INT 2
36610: NEG
36611: PUSH
36612: EMPTY
36613: LIST
36614: LIST
36615: PUSH
36616: LD_INT 0
36618: PUSH
36619: LD_INT 2
36621: NEG
36622: PUSH
36623: EMPTY
36624: LIST
36625: LIST
36626: PUSH
36627: LD_INT 1
36629: PUSH
36630: LD_INT 1
36632: NEG
36633: PUSH
36634: EMPTY
36635: LIST
36636: LIST
36637: PUSH
36638: LD_INT 2
36640: PUSH
36641: LD_INT 0
36643: PUSH
36644: EMPTY
36645: LIST
36646: LIST
36647: PUSH
36648: LD_INT 2
36650: PUSH
36651: LD_INT 1
36653: PUSH
36654: EMPTY
36655: LIST
36656: LIST
36657: PUSH
36658: LD_INT 2
36660: PUSH
36661: LD_INT 2
36663: PUSH
36664: EMPTY
36665: LIST
36666: LIST
36667: PUSH
36668: LD_INT 1
36670: PUSH
36671: LD_INT 2
36673: PUSH
36674: EMPTY
36675: LIST
36676: LIST
36677: PUSH
36678: LD_INT 0
36680: PUSH
36681: LD_INT 2
36683: PUSH
36684: EMPTY
36685: LIST
36686: LIST
36687: PUSH
36688: LD_INT 1
36690: NEG
36691: PUSH
36692: LD_INT 1
36694: PUSH
36695: EMPTY
36696: LIST
36697: LIST
36698: PUSH
36699: LD_INT 2
36701: NEG
36702: PUSH
36703: LD_INT 0
36705: PUSH
36706: EMPTY
36707: LIST
36708: LIST
36709: PUSH
36710: LD_INT 2
36712: NEG
36713: PUSH
36714: LD_INT 1
36716: NEG
36717: PUSH
36718: EMPTY
36719: LIST
36720: LIST
36721: PUSH
36722: LD_INT 2
36724: NEG
36725: PUSH
36726: LD_INT 2
36728: NEG
36729: PUSH
36730: EMPTY
36731: LIST
36732: LIST
36733: PUSH
36734: LD_INT 2
36736: NEG
36737: PUSH
36738: LD_INT 3
36740: NEG
36741: PUSH
36742: EMPTY
36743: LIST
36744: LIST
36745: PUSH
36746: LD_INT 1
36748: NEG
36749: PUSH
36750: LD_INT 3
36752: NEG
36753: PUSH
36754: EMPTY
36755: LIST
36756: LIST
36757: PUSH
36758: LD_INT 1
36760: PUSH
36761: LD_INT 2
36763: NEG
36764: PUSH
36765: EMPTY
36766: LIST
36767: LIST
36768: PUSH
36769: LD_INT 2
36771: PUSH
36772: LD_INT 1
36774: NEG
36775: PUSH
36776: EMPTY
36777: LIST
36778: LIST
36779: PUSH
36780: EMPTY
36781: LIST
36782: LIST
36783: LIST
36784: LIST
36785: LIST
36786: LIST
36787: LIST
36788: LIST
36789: LIST
36790: LIST
36791: LIST
36792: LIST
36793: LIST
36794: LIST
36795: LIST
36796: LIST
36797: LIST
36798: LIST
36799: LIST
36800: LIST
36801: LIST
36802: LIST
36803: LIST
36804: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
36805: LD_ADDR_VAR 0 24
36809: PUSH
36810: LD_INT 0
36812: PUSH
36813: LD_INT 0
36815: PUSH
36816: EMPTY
36817: LIST
36818: LIST
36819: PUSH
36820: LD_INT 0
36822: PUSH
36823: LD_INT 1
36825: NEG
36826: PUSH
36827: EMPTY
36828: LIST
36829: LIST
36830: PUSH
36831: LD_INT 1
36833: PUSH
36834: LD_INT 0
36836: PUSH
36837: EMPTY
36838: LIST
36839: LIST
36840: PUSH
36841: LD_INT 1
36843: PUSH
36844: LD_INT 1
36846: PUSH
36847: EMPTY
36848: LIST
36849: LIST
36850: PUSH
36851: LD_INT 0
36853: PUSH
36854: LD_INT 1
36856: PUSH
36857: EMPTY
36858: LIST
36859: LIST
36860: PUSH
36861: LD_INT 1
36863: NEG
36864: PUSH
36865: LD_INT 0
36867: PUSH
36868: EMPTY
36869: LIST
36870: LIST
36871: PUSH
36872: LD_INT 1
36874: NEG
36875: PUSH
36876: LD_INT 1
36878: NEG
36879: PUSH
36880: EMPTY
36881: LIST
36882: LIST
36883: PUSH
36884: LD_INT 1
36886: NEG
36887: PUSH
36888: LD_INT 2
36890: NEG
36891: PUSH
36892: EMPTY
36893: LIST
36894: LIST
36895: PUSH
36896: LD_INT 0
36898: PUSH
36899: LD_INT 2
36901: NEG
36902: PUSH
36903: EMPTY
36904: LIST
36905: LIST
36906: PUSH
36907: LD_INT 1
36909: PUSH
36910: LD_INT 1
36912: NEG
36913: PUSH
36914: EMPTY
36915: LIST
36916: LIST
36917: PUSH
36918: LD_INT 2
36920: PUSH
36921: LD_INT 0
36923: PUSH
36924: EMPTY
36925: LIST
36926: LIST
36927: PUSH
36928: LD_INT 2
36930: PUSH
36931: LD_INT 1
36933: PUSH
36934: EMPTY
36935: LIST
36936: LIST
36937: PUSH
36938: LD_INT 2
36940: PUSH
36941: LD_INT 2
36943: PUSH
36944: EMPTY
36945: LIST
36946: LIST
36947: PUSH
36948: LD_INT 1
36950: PUSH
36951: LD_INT 2
36953: PUSH
36954: EMPTY
36955: LIST
36956: LIST
36957: PUSH
36958: LD_INT 0
36960: PUSH
36961: LD_INT 2
36963: PUSH
36964: EMPTY
36965: LIST
36966: LIST
36967: PUSH
36968: LD_INT 1
36970: NEG
36971: PUSH
36972: LD_INT 1
36974: PUSH
36975: EMPTY
36976: LIST
36977: LIST
36978: PUSH
36979: LD_INT 2
36981: NEG
36982: PUSH
36983: LD_INT 0
36985: PUSH
36986: EMPTY
36987: LIST
36988: LIST
36989: PUSH
36990: LD_INT 2
36992: NEG
36993: PUSH
36994: LD_INT 1
36996: NEG
36997: PUSH
36998: EMPTY
36999: LIST
37000: LIST
37001: PUSH
37002: LD_INT 2
37004: NEG
37005: PUSH
37006: LD_INT 2
37008: NEG
37009: PUSH
37010: EMPTY
37011: LIST
37012: LIST
37013: PUSH
37014: LD_INT 1
37016: PUSH
37017: LD_INT 2
37019: NEG
37020: PUSH
37021: EMPTY
37022: LIST
37023: LIST
37024: PUSH
37025: LD_INT 2
37027: PUSH
37028: LD_INT 1
37030: NEG
37031: PUSH
37032: EMPTY
37033: LIST
37034: LIST
37035: PUSH
37036: LD_INT 3
37038: PUSH
37039: LD_INT 1
37041: PUSH
37042: EMPTY
37043: LIST
37044: LIST
37045: PUSH
37046: LD_INT 3
37048: PUSH
37049: LD_INT 2
37051: PUSH
37052: EMPTY
37053: LIST
37054: LIST
37055: PUSH
37056: EMPTY
37057: LIST
37058: LIST
37059: LIST
37060: LIST
37061: LIST
37062: LIST
37063: LIST
37064: LIST
37065: LIST
37066: LIST
37067: LIST
37068: LIST
37069: LIST
37070: LIST
37071: LIST
37072: LIST
37073: LIST
37074: LIST
37075: LIST
37076: LIST
37077: LIST
37078: LIST
37079: LIST
37080: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
37081: LD_ADDR_VAR 0 25
37085: PUSH
37086: LD_INT 0
37088: PUSH
37089: LD_INT 0
37091: PUSH
37092: EMPTY
37093: LIST
37094: LIST
37095: PUSH
37096: LD_INT 0
37098: PUSH
37099: LD_INT 1
37101: NEG
37102: PUSH
37103: EMPTY
37104: LIST
37105: LIST
37106: PUSH
37107: LD_INT 1
37109: PUSH
37110: LD_INT 0
37112: PUSH
37113: EMPTY
37114: LIST
37115: LIST
37116: PUSH
37117: LD_INT 1
37119: PUSH
37120: LD_INT 1
37122: PUSH
37123: EMPTY
37124: LIST
37125: LIST
37126: PUSH
37127: LD_INT 0
37129: PUSH
37130: LD_INT 1
37132: PUSH
37133: EMPTY
37134: LIST
37135: LIST
37136: PUSH
37137: LD_INT 1
37139: NEG
37140: PUSH
37141: LD_INT 0
37143: PUSH
37144: EMPTY
37145: LIST
37146: LIST
37147: PUSH
37148: LD_INT 1
37150: NEG
37151: PUSH
37152: LD_INT 1
37154: NEG
37155: PUSH
37156: EMPTY
37157: LIST
37158: LIST
37159: PUSH
37160: LD_INT 1
37162: NEG
37163: PUSH
37164: LD_INT 2
37166: NEG
37167: PUSH
37168: EMPTY
37169: LIST
37170: LIST
37171: PUSH
37172: LD_INT 0
37174: PUSH
37175: LD_INT 2
37177: NEG
37178: PUSH
37179: EMPTY
37180: LIST
37181: LIST
37182: PUSH
37183: LD_INT 1
37185: PUSH
37186: LD_INT 1
37188: NEG
37189: PUSH
37190: EMPTY
37191: LIST
37192: LIST
37193: PUSH
37194: LD_INT 2
37196: PUSH
37197: LD_INT 0
37199: PUSH
37200: EMPTY
37201: LIST
37202: LIST
37203: PUSH
37204: LD_INT 2
37206: PUSH
37207: LD_INT 1
37209: PUSH
37210: EMPTY
37211: LIST
37212: LIST
37213: PUSH
37214: LD_INT 2
37216: PUSH
37217: LD_INT 2
37219: PUSH
37220: EMPTY
37221: LIST
37222: LIST
37223: PUSH
37224: LD_INT 1
37226: PUSH
37227: LD_INT 2
37229: PUSH
37230: EMPTY
37231: LIST
37232: LIST
37233: PUSH
37234: LD_INT 0
37236: PUSH
37237: LD_INT 2
37239: PUSH
37240: EMPTY
37241: LIST
37242: LIST
37243: PUSH
37244: LD_INT 1
37246: NEG
37247: PUSH
37248: LD_INT 1
37250: PUSH
37251: EMPTY
37252: LIST
37253: LIST
37254: PUSH
37255: LD_INT 2
37257: NEG
37258: PUSH
37259: LD_INT 0
37261: PUSH
37262: EMPTY
37263: LIST
37264: LIST
37265: PUSH
37266: LD_INT 2
37268: NEG
37269: PUSH
37270: LD_INT 1
37272: NEG
37273: PUSH
37274: EMPTY
37275: LIST
37276: LIST
37277: PUSH
37278: LD_INT 2
37280: NEG
37281: PUSH
37282: LD_INT 2
37284: NEG
37285: PUSH
37286: EMPTY
37287: LIST
37288: LIST
37289: PUSH
37290: LD_INT 3
37292: PUSH
37293: LD_INT 1
37295: PUSH
37296: EMPTY
37297: LIST
37298: LIST
37299: PUSH
37300: LD_INT 3
37302: PUSH
37303: LD_INT 2
37305: PUSH
37306: EMPTY
37307: LIST
37308: LIST
37309: PUSH
37310: LD_INT 2
37312: PUSH
37313: LD_INT 3
37315: PUSH
37316: EMPTY
37317: LIST
37318: LIST
37319: PUSH
37320: LD_INT 1
37322: PUSH
37323: LD_INT 3
37325: PUSH
37326: EMPTY
37327: LIST
37328: LIST
37329: PUSH
37330: EMPTY
37331: LIST
37332: LIST
37333: LIST
37334: LIST
37335: LIST
37336: LIST
37337: LIST
37338: LIST
37339: LIST
37340: LIST
37341: LIST
37342: LIST
37343: LIST
37344: LIST
37345: LIST
37346: LIST
37347: LIST
37348: LIST
37349: LIST
37350: LIST
37351: LIST
37352: LIST
37353: LIST
37354: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
37355: LD_ADDR_VAR 0 26
37359: PUSH
37360: LD_INT 0
37362: PUSH
37363: LD_INT 0
37365: PUSH
37366: EMPTY
37367: LIST
37368: LIST
37369: PUSH
37370: LD_INT 0
37372: PUSH
37373: LD_INT 1
37375: NEG
37376: PUSH
37377: EMPTY
37378: LIST
37379: LIST
37380: PUSH
37381: LD_INT 1
37383: PUSH
37384: LD_INT 0
37386: PUSH
37387: EMPTY
37388: LIST
37389: LIST
37390: PUSH
37391: LD_INT 1
37393: PUSH
37394: LD_INT 1
37396: PUSH
37397: EMPTY
37398: LIST
37399: LIST
37400: PUSH
37401: LD_INT 0
37403: PUSH
37404: LD_INT 1
37406: PUSH
37407: EMPTY
37408: LIST
37409: LIST
37410: PUSH
37411: LD_INT 1
37413: NEG
37414: PUSH
37415: LD_INT 0
37417: PUSH
37418: EMPTY
37419: LIST
37420: LIST
37421: PUSH
37422: LD_INT 1
37424: NEG
37425: PUSH
37426: LD_INT 1
37428: NEG
37429: PUSH
37430: EMPTY
37431: LIST
37432: LIST
37433: PUSH
37434: LD_INT 1
37436: NEG
37437: PUSH
37438: LD_INT 2
37440: NEG
37441: PUSH
37442: EMPTY
37443: LIST
37444: LIST
37445: PUSH
37446: LD_INT 0
37448: PUSH
37449: LD_INT 2
37451: NEG
37452: PUSH
37453: EMPTY
37454: LIST
37455: LIST
37456: PUSH
37457: LD_INT 1
37459: PUSH
37460: LD_INT 1
37462: NEG
37463: PUSH
37464: EMPTY
37465: LIST
37466: LIST
37467: PUSH
37468: LD_INT 2
37470: PUSH
37471: LD_INT 0
37473: PUSH
37474: EMPTY
37475: LIST
37476: LIST
37477: PUSH
37478: LD_INT 2
37480: PUSH
37481: LD_INT 1
37483: PUSH
37484: EMPTY
37485: LIST
37486: LIST
37487: PUSH
37488: LD_INT 2
37490: PUSH
37491: LD_INT 2
37493: PUSH
37494: EMPTY
37495: LIST
37496: LIST
37497: PUSH
37498: LD_INT 1
37500: PUSH
37501: LD_INT 2
37503: PUSH
37504: EMPTY
37505: LIST
37506: LIST
37507: PUSH
37508: LD_INT 0
37510: PUSH
37511: LD_INT 2
37513: PUSH
37514: EMPTY
37515: LIST
37516: LIST
37517: PUSH
37518: LD_INT 1
37520: NEG
37521: PUSH
37522: LD_INT 1
37524: PUSH
37525: EMPTY
37526: LIST
37527: LIST
37528: PUSH
37529: LD_INT 2
37531: NEG
37532: PUSH
37533: LD_INT 0
37535: PUSH
37536: EMPTY
37537: LIST
37538: LIST
37539: PUSH
37540: LD_INT 2
37542: NEG
37543: PUSH
37544: LD_INT 1
37546: NEG
37547: PUSH
37548: EMPTY
37549: LIST
37550: LIST
37551: PUSH
37552: LD_INT 2
37554: NEG
37555: PUSH
37556: LD_INT 2
37558: NEG
37559: PUSH
37560: EMPTY
37561: LIST
37562: LIST
37563: PUSH
37564: LD_INT 2
37566: PUSH
37567: LD_INT 3
37569: PUSH
37570: EMPTY
37571: LIST
37572: LIST
37573: PUSH
37574: LD_INT 1
37576: PUSH
37577: LD_INT 3
37579: PUSH
37580: EMPTY
37581: LIST
37582: LIST
37583: PUSH
37584: LD_INT 1
37586: NEG
37587: PUSH
37588: LD_INT 2
37590: PUSH
37591: EMPTY
37592: LIST
37593: LIST
37594: PUSH
37595: LD_INT 2
37597: NEG
37598: PUSH
37599: LD_INT 1
37601: PUSH
37602: EMPTY
37603: LIST
37604: LIST
37605: PUSH
37606: EMPTY
37607: LIST
37608: LIST
37609: LIST
37610: LIST
37611: LIST
37612: LIST
37613: LIST
37614: LIST
37615: LIST
37616: LIST
37617: LIST
37618: LIST
37619: LIST
37620: LIST
37621: LIST
37622: LIST
37623: LIST
37624: LIST
37625: LIST
37626: LIST
37627: LIST
37628: LIST
37629: LIST
37630: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
37631: LD_ADDR_VAR 0 27
37635: PUSH
37636: LD_INT 0
37638: PUSH
37639: LD_INT 0
37641: PUSH
37642: EMPTY
37643: LIST
37644: LIST
37645: PUSH
37646: LD_INT 0
37648: PUSH
37649: LD_INT 1
37651: NEG
37652: PUSH
37653: EMPTY
37654: LIST
37655: LIST
37656: PUSH
37657: LD_INT 1
37659: PUSH
37660: LD_INT 0
37662: PUSH
37663: EMPTY
37664: LIST
37665: LIST
37666: PUSH
37667: LD_INT 1
37669: PUSH
37670: LD_INT 1
37672: PUSH
37673: EMPTY
37674: LIST
37675: LIST
37676: PUSH
37677: LD_INT 0
37679: PUSH
37680: LD_INT 1
37682: PUSH
37683: EMPTY
37684: LIST
37685: LIST
37686: PUSH
37687: LD_INT 1
37689: NEG
37690: PUSH
37691: LD_INT 0
37693: PUSH
37694: EMPTY
37695: LIST
37696: LIST
37697: PUSH
37698: LD_INT 1
37700: NEG
37701: PUSH
37702: LD_INT 1
37704: NEG
37705: PUSH
37706: EMPTY
37707: LIST
37708: LIST
37709: PUSH
37710: LD_INT 1
37712: NEG
37713: PUSH
37714: LD_INT 2
37716: NEG
37717: PUSH
37718: EMPTY
37719: LIST
37720: LIST
37721: PUSH
37722: LD_INT 0
37724: PUSH
37725: LD_INT 2
37727: NEG
37728: PUSH
37729: EMPTY
37730: LIST
37731: LIST
37732: PUSH
37733: LD_INT 1
37735: PUSH
37736: LD_INT 1
37738: NEG
37739: PUSH
37740: EMPTY
37741: LIST
37742: LIST
37743: PUSH
37744: LD_INT 2
37746: PUSH
37747: LD_INT 0
37749: PUSH
37750: EMPTY
37751: LIST
37752: LIST
37753: PUSH
37754: LD_INT 2
37756: PUSH
37757: LD_INT 1
37759: PUSH
37760: EMPTY
37761: LIST
37762: LIST
37763: PUSH
37764: LD_INT 2
37766: PUSH
37767: LD_INT 2
37769: PUSH
37770: EMPTY
37771: LIST
37772: LIST
37773: PUSH
37774: LD_INT 1
37776: PUSH
37777: LD_INT 2
37779: PUSH
37780: EMPTY
37781: LIST
37782: LIST
37783: PUSH
37784: LD_INT 0
37786: PUSH
37787: LD_INT 2
37789: PUSH
37790: EMPTY
37791: LIST
37792: LIST
37793: PUSH
37794: LD_INT 1
37796: NEG
37797: PUSH
37798: LD_INT 1
37800: PUSH
37801: EMPTY
37802: LIST
37803: LIST
37804: PUSH
37805: LD_INT 2
37807: NEG
37808: PUSH
37809: LD_INT 0
37811: PUSH
37812: EMPTY
37813: LIST
37814: LIST
37815: PUSH
37816: LD_INT 2
37818: NEG
37819: PUSH
37820: LD_INT 1
37822: NEG
37823: PUSH
37824: EMPTY
37825: LIST
37826: LIST
37827: PUSH
37828: LD_INT 2
37830: NEG
37831: PUSH
37832: LD_INT 2
37834: NEG
37835: PUSH
37836: EMPTY
37837: LIST
37838: LIST
37839: PUSH
37840: LD_INT 1
37842: NEG
37843: PUSH
37844: LD_INT 2
37846: PUSH
37847: EMPTY
37848: LIST
37849: LIST
37850: PUSH
37851: LD_INT 2
37853: NEG
37854: PUSH
37855: LD_INT 1
37857: PUSH
37858: EMPTY
37859: LIST
37860: LIST
37861: PUSH
37862: LD_INT 3
37864: NEG
37865: PUSH
37866: LD_INT 1
37868: NEG
37869: PUSH
37870: EMPTY
37871: LIST
37872: LIST
37873: PUSH
37874: LD_INT 3
37876: NEG
37877: PUSH
37878: LD_INT 2
37880: NEG
37881: PUSH
37882: EMPTY
37883: LIST
37884: LIST
37885: PUSH
37886: EMPTY
37887: LIST
37888: LIST
37889: LIST
37890: LIST
37891: LIST
37892: LIST
37893: LIST
37894: LIST
37895: LIST
37896: LIST
37897: LIST
37898: LIST
37899: LIST
37900: LIST
37901: LIST
37902: LIST
37903: LIST
37904: LIST
37905: LIST
37906: LIST
37907: LIST
37908: LIST
37909: LIST
37910: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
37911: LD_ADDR_VAR 0 28
37915: PUSH
37916: LD_INT 0
37918: PUSH
37919: LD_INT 0
37921: PUSH
37922: EMPTY
37923: LIST
37924: LIST
37925: PUSH
37926: LD_INT 0
37928: PUSH
37929: LD_INT 1
37931: NEG
37932: PUSH
37933: EMPTY
37934: LIST
37935: LIST
37936: PUSH
37937: LD_INT 1
37939: PUSH
37940: LD_INT 0
37942: PUSH
37943: EMPTY
37944: LIST
37945: LIST
37946: PUSH
37947: LD_INT 1
37949: PUSH
37950: LD_INT 1
37952: PUSH
37953: EMPTY
37954: LIST
37955: LIST
37956: PUSH
37957: LD_INT 0
37959: PUSH
37960: LD_INT 1
37962: PUSH
37963: EMPTY
37964: LIST
37965: LIST
37966: PUSH
37967: LD_INT 1
37969: NEG
37970: PUSH
37971: LD_INT 0
37973: PUSH
37974: EMPTY
37975: LIST
37976: LIST
37977: PUSH
37978: LD_INT 1
37980: NEG
37981: PUSH
37982: LD_INT 1
37984: NEG
37985: PUSH
37986: EMPTY
37987: LIST
37988: LIST
37989: PUSH
37990: LD_INT 1
37992: NEG
37993: PUSH
37994: LD_INT 2
37996: NEG
37997: PUSH
37998: EMPTY
37999: LIST
38000: LIST
38001: PUSH
38002: LD_INT 0
38004: PUSH
38005: LD_INT 2
38007: NEG
38008: PUSH
38009: EMPTY
38010: LIST
38011: LIST
38012: PUSH
38013: LD_INT 1
38015: PUSH
38016: LD_INT 1
38018: NEG
38019: PUSH
38020: EMPTY
38021: LIST
38022: LIST
38023: PUSH
38024: LD_INT 2
38026: PUSH
38027: LD_INT 0
38029: PUSH
38030: EMPTY
38031: LIST
38032: LIST
38033: PUSH
38034: LD_INT 2
38036: PUSH
38037: LD_INT 1
38039: PUSH
38040: EMPTY
38041: LIST
38042: LIST
38043: PUSH
38044: LD_INT 2
38046: PUSH
38047: LD_INT 2
38049: PUSH
38050: EMPTY
38051: LIST
38052: LIST
38053: PUSH
38054: LD_INT 1
38056: PUSH
38057: LD_INT 2
38059: PUSH
38060: EMPTY
38061: LIST
38062: LIST
38063: PUSH
38064: LD_INT 0
38066: PUSH
38067: LD_INT 2
38069: PUSH
38070: EMPTY
38071: LIST
38072: LIST
38073: PUSH
38074: LD_INT 1
38076: NEG
38077: PUSH
38078: LD_INT 1
38080: PUSH
38081: EMPTY
38082: LIST
38083: LIST
38084: PUSH
38085: LD_INT 2
38087: NEG
38088: PUSH
38089: LD_INT 0
38091: PUSH
38092: EMPTY
38093: LIST
38094: LIST
38095: PUSH
38096: LD_INT 2
38098: NEG
38099: PUSH
38100: LD_INT 1
38102: NEG
38103: PUSH
38104: EMPTY
38105: LIST
38106: LIST
38107: PUSH
38108: LD_INT 2
38110: NEG
38111: PUSH
38112: LD_INT 2
38114: NEG
38115: PUSH
38116: EMPTY
38117: LIST
38118: LIST
38119: PUSH
38120: LD_INT 2
38122: NEG
38123: PUSH
38124: LD_INT 3
38126: NEG
38127: PUSH
38128: EMPTY
38129: LIST
38130: LIST
38131: PUSH
38132: LD_INT 1
38134: NEG
38135: PUSH
38136: LD_INT 3
38138: NEG
38139: PUSH
38140: EMPTY
38141: LIST
38142: LIST
38143: PUSH
38144: LD_INT 3
38146: NEG
38147: PUSH
38148: LD_INT 1
38150: NEG
38151: PUSH
38152: EMPTY
38153: LIST
38154: LIST
38155: PUSH
38156: LD_INT 3
38158: NEG
38159: PUSH
38160: LD_INT 2
38162: NEG
38163: PUSH
38164: EMPTY
38165: LIST
38166: LIST
38167: PUSH
38168: EMPTY
38169: LIST
38170: LIST
38171: LIST
38172: LIST
38173: LIST
38174: LIST
38175: LIST
38176: LIST
38177: LIST
38178: LIST
38179: LIST
38180: LIST
38181: LIST
38182: LIST
38183: LIST
38184: LIST
38185: LIST
38186: LIST
38187: LIST
38188: LIST
38189: LIST
38190: LIST
38191: LIST
38192: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38193: LD_ADDR_VAR 0 29
38197: PUSH
38198: LD_INT 0
38200: PUSH
38201: LD_INT 0
38203: PUSH
38204: EMPTY
38205: LIST
38206: LIST
38207: PUSH
38208: LD_INT 0
38210: PUSH
38211: LD_INT 1
38213: NEG
38214: PUSH
38215: EMPTY
38216: LIST
38217: LIST
38218: PUSH
38219: LD_INT 1
38221: PUSH
38222: LD_INT 0
38224: PUSH
38225: EMPTY
38226: LIST
38227: LIST
38228: PUSH
38229: LD_INT 1
38231: PUSH
38232: LD_INT 1
38234: PUSH
38235: EMPTY
38236: LIST
38237: LIST
38238: PUSH
38239: LD_INT 0
38241: PUSH
38242: LD_INT 1
38244: PUSH
38245: EMPTY
38246: LIST
38247: LIST
38248: PUSH
38249: LD_INT 1
38251: NEG
38252: PUSH
38253: LD_INT 0
38255: PUSH
38256: EMPTY
38257: LIST
38258: LIST
38259: PUSH
38260: LD_INT 1
38262: NEG
38263: PUSH
38264: LD_INT 1
38266: NEG
38267: PUSH
38268: EMPTY
38269: LIST
38270: LIST
38271: PUSH
38272: LD_INT 1
38274: NEG
38275: PUSH
38276: LD_INT 2
38278: NEG
38279: PUSH
38280: EMPTY
38281: LIST
38282: LIST
38283: PUSH
38284: LD_INT 0
38286: PUSH
38287: LD_INT 2
38289: NEG
38290: PUSH
38291: EMPTY
38292: LIST
38293: LIST
38294: PUSH
38295: LD_INT 1
38297: PUSH
38298: LD_INT 1
38300: NEG
38301: PUSH
38302: EMPTY
38303: LIST
38304: LIST
38305: PUSH
38306: LD_INT 2
38308: PUSH
38309: LD_INT 0
38311: PUSH
38312: EMPTY
38313: LIST
38314: LIST
38315: PUSH
38316: LD_INT 2
38318: PUSH
38319: LD_INT 1
38321: PUSH
38322: EMPTY
38323: LIST
38324: LIST
38325: PUSH
38326: LD_INT 1
38328: PUSH
38329: LD_INT 2
38331: PUSH
38332: EMPTY
38333: LIST
38334: LIST
38335: PUSH
38336: LD_INT 0
38338: PUSH
38339: LD_INT 2
38341: PUSH
38342: EMPTY
38343: LIST
38344: LIST
38345: PUSH
38346: LD_INT 1
38348: NEG
38349: PUSH
38350: LD_INT 1
38352: PUSH
38353: EMPTY
38354: LIST
38355: LIST
38356: PUSH
38357: LD_INT 2
38359: NEG
38360: PUSH
38361: LD_INT 1
38363: NEG
38364: PUSH
38365: EMPTY
38366: LIST
38367: LIST
38368: PUSH
38369: LD_INT 2
38371: NEG
38372: PUSH
38373: LD_INT 2
38375: NEG
38376: PUSH
38377: EMPTY
38378: LIST
38379: LIST
38380: PUSH
38381: LD_INT 2
38383: NEG
38384: PUSH
38385: LD_INT 3
38387: NEG
38388: PUSH
38389: EMPTY
38390: LIST
38391: LIST
38392: PUSH
38393: LD_INT 2
38395: PUSH
38396: LD_INT 1
38398: NEG
38399: PUSH
38400: EMPTY
38401: LIST
38402: LIST
38403: PUSH
38404: LD_INT 3
38406: PUSH
38407: LD_INT 1
38409: PUSH
38410: EMPTY
38411: LIST
38412: LIST
38413: PUSH
38414: LD_INT 1
38416: PUSH
38417: LD_INT 3
38419: PUSH
38420: EMPTY
38421: LIST
38422: LIST
38423: PUSH
38424: LD_INT 1
38426: NEG
38427: PUSH
38428: LD_INT 2
38430: PUSH
38431: EMPTY
38432: LIST
38433: LIST
38434: PUSH
38435: LD_INT 3
38437: NEG
38438: PUSH
38439: LD_INT 2
38441: NEG
38442: PUSH
38443: EMPTY
38444: LIST
38445: LIST
38446: PUSH
38447: EMPTY
38448: LIST
38449: LIST
38450: LIST
38451: LIST
38452: LIST
38453: LIST
38454: LIST
38455: LIST
38456: LIST
38457: LIST
38458: LIST
38459: LIST
38460: LIST
38461: LIST
38462: LIST
38463: LIST
38464: LIST
38465: LIST
38466: LIST
38467: LIST
38468: LIST
38469: LIST
38470: LIST
38471: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38472: LD_ADDR_VAR 0 30
38476: PUSH
38477: LD_INT 0
38479: PUSH
38480: LD_INT 0
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: PUSH
38487: LD_INT 0
38489: PUSH
38490: LD_INT 1
38492: NEG
38493: PUSH
38494: EMPTY
38495: LIST
38496: LIST
38497: PUSH
38498: LD_INT 1
38500: PUSH
38501: LD_INT 0
38503: PUSH
38504: EMPTY
38505: LIST
38506: LIST
38507: PUSH
38508: LD_INT 1
38510: PUSH
38511: LD_INT 1
38513: PUSH
38514: EMPTY
38515: LIST
38516: LIST
38517: PUSH
38518: LD_INT 0
38520: PUSH
38521: LD_INT 1
38523: PUSH
38524: EMPTY
38525: LIST
38526: LIST
38527: PUSH
38528: LD_INT 1
38530: NEG
38531: PUSH
38532: LD_INT 0
38534: PUSH
38535: EMPTY
38536: LIST
38537: LIST
38538: PUSH
38539: LD_INT 1
38541: NEG
38542: PUSH
38543: LD_INT 1
38545: NEG
38546: PUSH
38547: EMPTY
38548: LIST
38549: LIST
38550: PUSH
38551: LD_INT 1
38553: NEG
38554: PUSH
38555: LD_INT 2
38557: NEG
38558: PUSH
38559: EMPTY
38560: LIST
38561: LIST
38562: PUSH
38563: LD_INT 0
38565: PUSH
38566: LD_INT 2
38568: NEG
38569: PUSH
38570: EMPTY
38571: LIST
38572: LIST
38573: PUSH
38574: LD_INT 1
38576: PUSH
38577: LD_INT 1
38579: NEG
38580: PUSH
38581: EMPTY
38582: LIST
38583: LIST
38584: PUSH
38585: LD_INT 2
38587: PUSH
38588: LD_INT 0
38590: PUSH
38591: EMPTY
38592: LIST
38593: LIST
38594: PUSH
38595: LD_INT 2
38597: PUSH
38598: LD_INT 1
38600: PUSH
38601: EMPTY
38602: LIST
38603: LIST
38604: PUSH
38605: LD_INT 2
38607: PUSH
38608: LD_INT 2
38610: PUSH
38611: EMPTY
38612: LIST
38613: LIST
38614: PUSH
38615: LD_INT 1
38617: PUSH
38618: LD_INT 2
38620: PUSH
38621: EMPTY
38622: LIST
38623: LIST
38624: PUSH
38625: LD_INT 1
38627: NEG
38628: PUSH
38629: LD_INT 1
38631: PUSH
38632: EMPTY
38633: LIST
38634: LIST
38635: PUSH
38636: LD_INT 2
38638: NEG
38639: PUSH
38640: LD_INT 0
38642: PUSH
38643: EMPTY
38644: LIST
38645: LIST
38646: PUSH
38647: LD_INT 2
38649: NEG
38650: PUSH
38651: LD_INT 1
38653: NEG
38654: PUSH
38655: EMPTY
38656: LIST
38657: LIST
38658: PUSH
38659: LD_INT 1
38661: NEG
38662: PUSH
38663: LD_INT 3
38665: NEG
38666: PUSH
38667: EMPTY
38668: LIST
38669: LIST
38670: PUSH
38671: LD_INT 1
38673: PUSH
38674: LD_INT 2
38676: NEG
38677: PUSH
38678: EMPTY
38679: LIST
38680: LIST
38681: PUSH
38682: LD_INT 3
38684: PUSH
38685: LD_INT 2
38687: PUSH
38688: EMPTY
38689: LIST
38690: LIST
38691: PUSH
38692: LD_INT 2
38694: PUSH
38695: LD_INT 3
38697: PUSH
38698: EMPTY
38699: LIST
38700: LIST
38701: PUSH
38702: LD_INT 2
38704: NEG
38705: PUSH
38706: LD_INT 1
38708: PUSH
38709: EMPTY
38710: LIST
38711: LIST
38712: PUSH
38713: LD_INT 3
38715: NEG
38716: PUSH
38717: LD_INT 1
38719: NEG
38720: PUSH
38721: EMPTY
38722: LIST
38723: LIST
38724: PUSH
38725: EMPTY
38726: LIST
38727: LIST
38728: LIST
38729: LIST
38730: LIST
38731: LIST
38732: LIST
38733: LIST
38734: LIST
38735: LIST
38736: LIST
38737: LIST
38738: LIST
38739: LIST
38740: LIST
38741: LIST
38742: LIST
38743: LIST
38744: LIST
38745: LIST
38746: LIST
38747: LIST
38748: LIST
38749: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38750: LD_ADDR_VAR 0 31
38754: PUSH
38755: LD_INT 0
38757: PUSH
38758: LD_INT 0
38760: PUSH
38761: EMPTY
38762: LIST
38763: LIST
38764: PUSH
38765: LD_INT 0
38767: PUSH
38768: LD_INT 1
38770: NEG
38771: PUSH
38772: EMPTY
38773: LIST
38774: LIST
38775: PUSH
38776: LD_INT 1
38778: PUSH
38779: LD_INT 0
38781: PUSH
38782: EMPTY
38783: LIST
38784: LIST
38785: PUSH
38786: LD_INT 1
38788: PUSH
38789: LD_INT 1
38791: PUSH
38792: EMPTY
38793: LIST
38794: LIST
38795: PUSH
38796: LD_INT 0
38798: PUSH
38799: LD_INT 1
38801: PUSH
38802: EMPTY
38803: LIST
38804: LIST
38805: PUSH
38806: LD_INT 1
38808: NEG
38809: PUSH
38810: LD_INT 0
38812: PUSH
38813: EMPTY
38814: LIST
38815: LIST
38816: PUSH
38817: LD_INT 1
38819: NEG
38820: PUSH
38821: LD_INT 1
38823: NEG
38824: PUSH
38825: EMPTY
38826: LIST
38827: LIST
38828: PUSH
38829: LD_INT 1
38831: NEG
38832: PUSH
38833: LD_INT 2
38835: NEG
38836: PUSH
38837: EMPTY
38838: LIST
38839: LIST
38840: PUSH
38841: LD_INT 1
38843: PUSH
38844: LD_INT 1
38846: NEG
38847: PUSH
38848: EMPTY
38849: LIST
38850: LIST
38851: PUSH
38852: LD_INT 2
38854: PUSH
38855: LD_INT 0
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: PUSH
38862: LD_INT 2
38864: PUSH
38865: LD_INT 1
38867: PUSH
38868: EMPTY
38869: LIST
38870: LIST
38871: PUSH
38872: LD_INT 2
38874: PUSH
38875: LD_INT 2
38877: PUSH
38878: EMPTY
38879: LIST
38880: LIST
38881: PUSH
38882: LD_INT 1
38884: PUSH
38885: LD_INT 2
38887: PUSH
38888: EMPTY
38889: LIST
38890: LIST
38891: PUSH
38892: LD_INT 0
38894: PUSH
38895: LD_INT 2
38897: PUSH
38898: EMPTY
38899: LIST
38900: LIST
38901: PUSH
38902: LD_INT 1
38904: NEG
38905: PUSH
38906: LD_INT 1
38908: PUSH
38909: EMPTY
38910: LIST
38911: LIST
38912: PUSH
38913: LD_INT 2
38915: NEG
38916: PUSH
38917: LD_INT 1
38919: NEG
38920: PUSH
38921: EMPTY
38922: LIST
38923: LIST
38924: PUSH
38925: LD_INT 2
38927: NEG
38928: PUSH
38929: LD_INT 2
38931: NEG
38932: PUSH
38933: EMPTY
38934: LIST
38935: LIST
38936: PUSH
38937: LD_INT 2
38939: NEG
38940: PUSH
38941: LD_INT 3
38943: NEG
38944: PUSH
38945: EMPTY
38946: LIST
38947: LIST
38948: PUSH
38949: LD_INT 2
38951: PUSH
38952: LD_INT 1
38954: NEG
38955: PUSH
38956: EMPTY
38957: LIST
38958: LIST
38959: PUSH
38960: LD_INT 3
38962: PUSH
38963: LD_INT 1
38965: PUSH
38966: EMPTY
38967: LIST
38968: LIST
38969: PUSH
38970: LD_INT 1
38972: PUSH
38973: LD_INT 3
38975: PUSH
38976: EMPTY
38977: LIST
38978: LIST
38979: PUSH
38980: LD_INT 1
38982: NEG
38983: PUSH
38984: LD_INT 2
38986: PUSH
38987: EMPTY
38988: LIST
38989: LIST
38990: PUSH
38991: LD_INT 3
38993: NEG
38994: PUSH
38995: LD_INT 2
38997: NEG
38998: PUSH
38999: EMPTY
39000: LIST
39001: LIST
39002: PUSH
39003: EMPTY
39004: LIST
39005: LIST
39006: LIST
39007: LIST
39008: LIST
39009: LIST
39010: LIST
39011: LIST
39012: LIST
39013: LIST
39014: LIST
39015: LIST
39016: LIST
39017: LIST
39018: LIST
39019: LIST
39020: LIST
39021: LIST
39022: LIST
39023: LIST
39024: LIST
39025: LIST
39026: LIST
39027: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39028: LD_ADDR_VAR 0 32
39032: PUSH
39033: LD_INT 0
39035: PUSH
39036: LD_INT 0
39038: PUSH
39039: EMPTY
39040: LIST
39041: LIST
39042: PUSH
39043: LD_INT 0
39045: PUSH
39046: LD_INT 1
39048: NEG
39049: PUSH
39050: EMPTY
39051: LIST
39052: LIST
39053: PUSH
39054: LD_INT 1
39056: PUSH
39057: LD_INT 0
39059: PUSH
39060: EMPTY
39061: LIST
39062: LIST
39063: PUSH
39064: LD_INT 1
39066: PUSH
39067: LD_INT 1
39069: PUSH
39070: EMPTY
39071: LIST
39072: LIST
39073: PUSH
39074: LD_INT 0
39076: PUSH
39077: LD_INT 1
39079: PUSH
39080: EMPTY
39081: LIST
39082: LIST
39083: PUSH
39084: LD_INT 1
39086: NEG
39087: PUSH
39088: LD_INT 0
39090: PUSH
39091: EMPTY
39092: LIST
39093: LIST
39094: PUSH
39095: LD_INT 1
39097: NEG
39098: PUSH
39099: LD_INT 1
39101: NEG
39102: PUSH
39103: EMPTY
39104: LIST
39105: LIST
39106: PUSH
39107: LD_INT 1
39109: NEG
39110: PUSH
39111: LD_INT 2
39113: NEG
39114: PUSH
39115: EMPTY
39116: LIST
39117: LIST
39118: PUSH
39119: LD_INT 0
39121: PUSH
39122: LD_INT 2
39124: NEG
39125: PUSH
39126: EMPTY
39127: LIST
39128: LIST
39129: PUSH
39130: LD_INT 1
39132: PUSH
39133: LD_INT 1
39135: NEG
39136: PUSH
39137: EMPTY
39138: LIST
39139: LIST
39140: PUSH
39141: LD_INT 2
39143: PUSH
39144: LD_INT 1
39146: PUSH
39147: EMPTY
39148: LIST
39149: LIST
39150: PUSH
39151: LD_INT 2
39153: PUSH
39154: LD_INT 2
39156: PUSH
39157: EMPTY
39158: LIST
39159: LIST
39160: PUSH
39161: LD_INT 1
39163: PUSH
39164: LD_INT 2
39166: PUSH
39167: EMPTY
39168: LIST
39169: LIST
39170: PUSH
39171: LD_INT 0
39173: PUSH
39174: LD_INT 2
39176: PUSH
39177: EMPTY
39178: LIST
39179: LIST
39180: PUSH
39181: LD_INT 1
39183: NEG
39184: PUSH
39185: LD_INT 1
39187: PUSH
39188: EMPTY
39189: LIST
39190: LIST
39191: PUSH
39192: LD_INT 2
39194: NEG
39195: PUSH
39196: LD_INT 0
39198: PUSH
39199: EMPTY
39200: LIST
39201: LIST
39202: PUSH
39203: LD_INT 2
39205: NEG
39206: PUSH
39207: LD_INT 1
39209: NEG
39210: PUSH
39211: EMPTY
39212: LIST
39213: LIST
39214: PUSH
39215: LD_INT 1
39217: NEG
39218: PUSH
39219: LD_INT 3
39221: NEG
39222: PUSH
39223: EMPTY
39224: LIST
39225: LIST
39226: PUSH
39227: LD_INT 1
39229: PUSH
39230: LD_INT 2
39232: NEG
39233: PUSH
39234: EMPTY
39235: LIST
39236: LIST
39237: PUSH
39238: LD_INT 3
39240: PUSH
39241: LD_INT 2
39243: PUSH
39244: EMPTY
39245: LIST
39246: LIST
39247: PUSH
39248: LD_INT 2
39250: PUSH
39251: LD_INT 3
39253: PUSH
39254: EMPTY
39255: LIST
39256: LIST
39257: PUSH
39258: LD_INT 2
39260: NEG
39261: PUSH
39262: LD_INT 1
39264: PUSH
39265: EMPTY
39266: LIST
39267: LIST
39268: PUSH
39269: LD_INT 3
39271: NEG
39272: PUSH
39273: LD_INT 1
39275: NEG
39276: PUSH
39277: EMPTY
39278: LIST
39279: LIST
39280: PUSH
39281: EMPTY
39282: LIST
39283: LIST
39284: LIST
39285: LIST
39286: LIST
39287: LIST
39288: LIST
39289: LIST
39290: LIST
39291: LIST
39292: LIST
39293: LIST
39294: LIST
39295: LIST
39296: LIST
39297: LIST
39298: LIST
39299: LIST
39300: LIST
39301: LIST
39302: LIST
39303: LIST
39304: LIST
39305: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39306: LD_ADDR_VAR 0 33
39310: PUSH
39311: LD_INT 0
39313: PUSH
39314: LD_INT 0
39316: PUSH
39317: EMPTY
39318: LIST
39319: LIST
39320: PUSH
39321: LD_INT 0
39323: PUSH
39324: LD_INT 1
39326: NEG
39327: PUSH
39328: EMPTY
39329: LIST
39330: LIST
39331: PUSH
39332: LD_INT 1
39334: PUSH
39335: LD_INT 0
39337: PUSH
39338: EMPTY
39339: LIST
39340: LIST
39341: PUSH
39342: LD_INT 1
39344: PUSH
39345: LD_INT 1
39347: PUSH
39348: EMPTY
39349: LIST
39350: LIST
39351: PUSH
39352: LD_INT 0
39354: PUSH
39355: LD_INT 1
39357: PUSH
39358: EMPTY
39359: LIST
39360: LIST
39361: PUSH
39362: LD_INT 1
39364: NEG
39365: PUSH
39366: LD_INT 0
39368: PUSH
39369: EMPTY
39370: LIST
39371: LIST
39372: PUSH
39373: LD_INT 1
39375: NEG
39376: PUSH
39377: LD_INT 1
39379: NEG
39380: PUSH
39381: EMPTY
39382: LIST
39383: LIST
39384: PUSH
39385: LD_INT 1
39387: NEG
39388: PUSH
39389: LD_INT 2
39391: NEG
39392: PUSH
39393: EMPTY
39394: LIST
39395: LIST
39396: PUSH
39397: LD_INT 1
39399: PUSH
39400: LD_INT 1
39402: NEG
39403: PUSH
39404: EMPTY
39405: LIST
39406: LIST
39407: PUSH
39408: LD_INT 2
39410: PUSH
39411: LD_INT 0
39413: PUSH
39414: EMPTY
39415: LIST
39416: LIST
39417: PUSH
39418: LD_INT 2
39420: PUSH
39421: LD_INT 1
39423: PUSH
39424: EMPTY
39425: LIST
39426: LIST
39427: PUSH
39428: LD_INT 1
39430: PUSH
39431: LD_INT 2
39433: PUSH
39434: EMPTY
39435: LIST
39436: LIST
39437: PUSH
39438: LD_INT 0
39440: PUSH
39441: LD_INT 2
39443: PUSH
39444: EMPTY
39445: LIST
39446: LIST
39447: PUSH
39448: LD_INT 1
39450: NEG
39451: PUSH
39452: LD_INT 1
39454: PUSH
39455: EMPTY
39456: LIST
39457: LIST
39458: PUSH
39459: LD_INT 2
39461: NEG
39462: PUSH
39463: LD_INT 0
39465: PUSH
39466: EMPTY
39467: LIST
39468: LIST
39469: PUSH
39470: LD_INT 2
39472: NEG
39473: PUSH
39474: LD_INT 1
39476: NEG
39477: PUSH
39478: EMPTY
39479: LIST
39480: LIST
39481: PUSH
39482: LD_INT 2
39484: NEG
39485: PUSH
39486: LD_INT 2
39488: NEG
39489: PUSH
39490: EMPTY
39491: LIST
39492: LIST
39493: PUSH
39494: LD_INT 2
39496: NEG
39497: PUSH
39498: LD_INT 3
39500: NEG
39501: PUSH
39502: EMPTY
39503: LIST
39504: LIST
39505: PUSH
39506: LD_INT 2
39508: PUSH
39509: LD_INT 1
39511: NEG
39512: PUSH
39513: EMPTY
39514: LIST
39515: LIST
39516: PUSH
39517: LD_INT 3
39519: PUSH
39520: LD_INT 1
39522: PUSH
39523: EMPTY
39524: LIST
39525: LIST
39526: PUSH
39527: LD_INT 1
39529: PUSH
39530: LD_INT 3
39532: PUSH
39533: EMPTY
39534: LIST
39535: LIST
39536: PUSH
39537: LD_INT 1
39539: NEG
39540: PUSH
39541: LD_INT 2
39543: PUSH
39544: EMPTY
39545: LIST
39546: LIST
39547: PUSH
39548: LD_INT 3
39550: NEG
39551: PUSH
39552: LD_INT 2
39554: NEG
39555: PUSH
39556: EMPTY
39557: LIST
39558: LIST
39559: PUSH
39560: EMPTY
39561: LIST
39562: LIST
39563: LIST
39564: LIST
39565: LIST
39566: LIST
39567: LIST
39568: LIST
39569: LIST
39570: LIST
39571: LIST
39572: LIST
39573: LIST
39574: LIST
39575: LIST
39576: LIST
39577: LIST
39578: LIST
39579: LIST
39580: LIST
39581: LIST
39582: LIST
39583: LIST
39584: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39585: LD_ADDR_VAR 0 34
39589: PUSH
39590: LD_INT 0
39592: PUSH
39593: LD_INT 0
39595: PUSH
39596: EMPTY
39597: LIST
39598: LIST
39599: PUSH
39600: LD_INT 0
39602: PUSH
39603: LD_INT 1
39605: NEG
39606: PUSH
39607: EMPTY
39608: LIST
39609: LIST
39610: PUSH
39611: LD_INT 1
39613: PUSH
39614: LD_INT 0
39616: PUSH
39617: EMPTY
39618: LIST
39619: LIST
39620: PUSH
39621: LD_INT 1
39623: PUSH
39624: LD_INT 1
39626: PUSH
39627: EMPTY
39628: LIST
39629: LIST
39630: PUSH
39631: LD_INT 0
39633: PUSH
39634: LD_INT 1
39636: PUSH
39637: EMPTY
39638: LIST
39639: LIST
39640: PUSH
39641: LD_INT 1
39643: NEG
39644: PUSH
39645: LD_INT 0
39647: PUSH
39648: EMPTY
39649: LIST
39650: LIST
39651: PUSH
39652: LD_INT 1
39654: NEG
39655: PUSH
39656: LD_INT 1
39658: NEG
39659: PUSH
39660: EMPTY
39661: LIST
39662: LIST
39663: PUSH
39664: LD_INT 1
39666: NEG
39667: PUSH
39668: LD_INT 2
39670: NEG
39671: PUSH
39672: EMPTY
39673: LIST
39674: LIST
39675: PUSH
39676: LD_INT 0
39678: PUSH
39679: LD_INT 2
39681: NEG
39682: PUSH
39683: EMPTY
39684: LIST
39685: LIST
39686: PUSH
39687: LD_INT 1
39689: PUSH
39690: LD_INT 1
39692: NEG
39693: PUSH
39694: EMPTY
39695: LIST
39696: LIST
39697: PUSH
39698: LD_INT 2
39700: PUSH
39701: LD_INT 1
39703: PUSH
39704: EMPTY
39705: LIST
39706: LIST
39707: PUSH
39708: LD_INT 2
39710: PUSH
39711: LD_INT 2
39713: PUSH
39714: EMPTY
39715: LIST
39716: LIST
39717: PUSH
39718: LD_INT 1
39720: PUSH
39721: LD_INT 2
39723: PUSH
39724: EMPTY
39725: LIST
39726: LIST
39727: PUSH
39728: LD_INT 1
39730: NEG
39731: PUSH
39732: LD_INT 1
39734: PUSH
39735: EMPTY
39736: LIST
39737: LIST
39738: PUSH
39739: LD_INT 2
39741: NEG
39742: PUSH
39743: LD_INT 0
39745: PUSH
39746: EMPTY
39747: LIST
39748: LIST
39749: PUSH
39750: LD_INT 2
39752: NEG
39753: PUSH
39754: LD_INT 1
39756: NEG
39757: PUSH
39758: EMPTY
39759: LIST
39760: LIST
39761: PUSH
39762: LD_INT 2
39764: NEG
39765: PUSH
39766: LD_INT 2
39768: NEG
39769: PUSH
39770: EMPTY
39771: LIST
39772: LIST
39773: PUSH
39774: LD_INT 1
39776: NEG
39777: PUSH
39778: LD_INT 3
39780: NEG
39781: PUSH
39782: EMPTY
39783: LIST
39784: LIST
39785: PUSH
39786: LD_INT 1
39788: PUSH
39789: LD_INT 2
39791: NEG
39792: PUSH
39793: EMPTY
39794: LIST
39795: LIST
39796: PUSH
39797: LD_INT 3
39799: PUSH
39800: LD_INT 2
39802: PUSH
39803: EMPTY
39804: LIST
39805: LIST
39806: PUSH
39807: LD_INT 2
39809: PUSH
39810: LD_INT 3
39812: PUSH
39813: EMPTY
39814: LIST
39815: LIST
39816: PUSH
39817: LD_INT 2
39819: NEG
39820: PUSH
39821: LD_INT 1
39823: PUSH
39824: EMPTY
39825: LIST
39826: LIST
39827: PUSH
39828: LD_INT 3
39830: NEG
39831: PUSH
39832: LD_INT 1
39834: NEG
39835: PUSH
39836: EMPTY
39837: LIST
39838: LIST
39839: PUSH
39840: EMPTY
39841: LIST
39842: LIST
39843: LIST
39844: LIST
39845: LIST
39846: LIST
39847: LIST
39848: LIST
39849: LIST
39850: LIST
39851: LIST
39852: LIST
39853: LIST
39854: LIST
39855: LIST
39856: LIST
39857: LIST
39858: LIST
39859: LIST
39860: LIST
39861: LIST
39862: LIST
39863: LIST
39864: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
39865: LD_ADDR_VAR 0 35
39869: PUSH
39870: LD_INT 0
39872: PUSH
39873: LD_INT 0
39875: PUSH
39876: EMPTY
39877: LIST
39878: LIST
39879: PUSH
39880: LD_INT 0
39882: PUSH
39883: LD_INT 1
39885: NEG
39886: PUSH
39887: EMPTY
39888: LIST
39889: LIST
39890: PUSH
39891: LD_INT 1
39893: PUSH
39894: LD_INT 0
39896: PUSH
39897: EMPTY
39898: LIST
39899: LIST
39900: PUSH
39901: LD_INT 1
39903: PUSH
39904: LD_INT 1
39906: PUSH
39907: EMPTY
39908: LIST
39909: LIST
39910: PUSH
39911: LD_INT 0
39913: PUSH
39914: LD_INT 1
39916: PUSH
39917: EMPTY
39918: LIST
39919: LIST
39920: PUSH
39921: LD_INT 1
39923: NEG
39924: PUSH
39925: LD_INT 0
39927: PUSH
39928: EMPTY
39929: LIST
39930: LIST
39931: PUSH
39932: LD_INT 1
39934: NEG
39935: PUSH
39936: LD_INT 1
39938: NEG
39939: PUSH
39940: EMPTY
39941: LIST
39942: LIST
39943: PUSH
39944: LD_INT 2
39946: PUSH
39947: LD_INT 1
39949: PUSH
39950: EMPTY
39951: LIST
39952: LIST
39953: PUSH
39954: LD_INT 2
39956: NEG
39957: PUSH
39958: LD_INT 1
39960: NEG
39961: PUSH
39962: EMPTY
39963: LIST
39964: LIST
39965: PUSH
39966: EMPTY
39967: LIST
39968: LIST
39969: LIST
39970: LIST
39971: LIST
39972: LIST
39973: LIST
39974: LIST
39975: LIST
39976: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
39977: LD_ADDR_VAR 0 36
39981: PUSH
39982: LD_INT 0
39984: PUSH
39985: LD_INT 0
39987: PUSH
39988: EMPTY
39989: LIST
39990: LIST
39991: PUSH
39992: LD_INT 0
39994: PUSH
39995: LD_INT 1
39997: NEG
39998: PUSH
39999: EMPTY
40000: LIST
40001: LIST
40002: PUSH
40003: LD_INT 1
40005: PUSH
40006: LD_INT 0
40008: PUSH
40009: EMPTY
40010: LIST
40011: LIST
40012: PUSH
40013: LD_INT 1
40015: PUSH
40016: LD_INT 1
40018: PUSH
40019: EMPTY
40020: LIST
40021: LIST
40022: PUSH
40023: LD_INT 0
40025: PUSH
40026: LD_INT 1
40028: PUSH
40029: EMPTY
40030: LIST
40031: LIST
40032: PUSH
40033: LD_INT 1
40035: NEG
40036: PUSH
40037: LD_INT 0
40039: PUSH
40040: EMPTY
40041: LIST
40042: LIST
40043: PUSH
40044: LD_INT 1
40046: NEG
40047: PUSH
40048: LD_INT 1
40050: NEG
40051: PUSH
40052: EMPTY
40053: LIST
40054: LIST
40055: PUSH
40056: LD_INT 1
40058: NEG
40059: PUSH
40060: LD_INT 2
40062: NEG
40063: PUSH
40064: EMPTY
40065: LIST
40066: LIST
40067: PUSH
40068: LD_INT 1
40070: PUSH
40071: LD_INT 2
40073: PUSH
40074: EMPTY
40075: LIST
40076: LIST
40077: PUSH
40078: EMPTY
40079: LIST
40080: LIST
40081: LIST
40082: LIST
40083: LIST
40084: LIST
40085: LIST
40086: LIST
40087: LIST
40088: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
40089: LD_ADDR_VAR 0 37
40093: PUSH
40094: LD_INT 0
40096: PUSH
40097: LD_INT 0
40099: PUSH
40100: EMPTY
40101: LIST
40102: LIST
40103: PUSH
40104: LD_INT 0
40106: PUSH
40107: LD_INT 1
40109: NEG
40110: PUSH
40111: EMPTY
40112: LIST
40113: LIST
40114: PUSH
40115: LD_INT 1
40117: PUSH
40118: LD_INT 0
40120: PUSH
40121: EMPTY
40122: LIST
40123: LIST
40124: PUSH
40125: LD_INT 1
40127: PUSH
40128: LD_INT 1
40130: PUSH
40131: EMPTY
40132: LIST
40133: LIST
40134: PUSH
40135: LD_INT 0
40137: PUSH
40138: LD_INT 1
40140: PUSH
40141: EMPTY
40142: LIST
40143: LIST
40144: PUSH
40145: LD_INT 1
40147: NEG
40148: PUSH
40149: LD_INT 0
40151: PUSH
40152: EMPTY
40153: LIST
40154: LIST
40155: PUSH
40156: LD_INT 1
40158: NEG
40159: PUSH
40160: LD_INT 1
40162: NEG
40163: PUSH
40164: EMPTY
40165: LIST
40166: LIST
40167: PUSH
40168: LD_INT 1
40170: PUSH
40171: LD_INT 1
40173: NEG
40174: PUSH
40175: EMPTY
40176: LIST
40177: LIST
40178: PUSH
40179: LD_INT 1
40181: NEG
40182: PUSH
40183: LD_INT 1
40185: PUSH
40186: EMPTY
40187: LIST
40188: LIST
40189: PUSH
40190: EMPTY
40191: LIST
40192: LIST
40193: LIST
40194: LIST
40195: LIST
40196: LIST
40197: LIST
40198: LIST
40199: LIST
40200: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40201: LD_ADDR_VAR 0 38
40205: PUSH
40206: LD_INT 0
40208: PUSH
40209: LD_INT 0
40211: PUSH
40212: EMPTY
40213: LIST
40214: LIST
40215: PUSH
40216: LD_INT 0
40218: PUSH
40219: LD_INT 1
40221: NEG
40222: PUSH
40223: EMPTY
40224: LIST
40225: LIST
40226: PUSH
40227: LD_INT 1
40229: PUSH
40230: LD_INT 0
40232: PUSH
40233: EMPTY
40234: LIST
40235: LIST
40236: PUSH
40237: LD_INT 1
40239: PUSH
40240: LD_INT 1
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: PUSH
40247: LD_INT 0
40249: PUSH
40250: LD_INT 1
40252: PUSH
40253: EMPTY
40254: LIST
40255: LIST
40256: PUSH
40257: LD_INT 1
40259: NEG
40260: PUSH
40261: LD_INT 0
40263: PUSH
40264: EMPTY
40265: LIST
40266: LIST
40267: PUSH
40268: LD_INT 1
40270: NEG
40271: PUSH
40272: LD_INT 1
40274: NEG
40275: PUSH
40276: EMPTY
40277: LIST
40278: LIST
40279: PUSH
40280: LD_INT 2
40282: PUSH
40283: LD_INT 1
40285: PUSH
40286: EMPTY
40287: LIST
40288: LIST
40289: PUSH
40290: LD_INT 2
40292: NEG
40293: PUSH
40294: LD_INT 1
40296: NEG
40297: PUSH
40298: EMPTY
40299: LIST
40300: LIST
40301: PUSH
40302: EMPTY
40303: LIST
40304: LIST
40305: LIST
40306: LIST
40307: LIST
40308: LIST
40309: LIST
40310: LIST
40311: LIST
40312: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40313: LD_ADDR_VAR 0 39
40317: PUSH
40318: LD_INT 0
40320: PUSH
40321: LD_INT 0
40323: PUSH
40324: EMPTY
40325: LIST
40326: LIST
40327: PUSH
40328: LD_INT 0
40330: PUSH
40331: LD_INT 1
40333: NEG
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: PUSH
40339: LD_INT 1
40341: PUSH
40342: LD_INT 0
40344: PUSH
40345: EMPTY
40346: LIST
40347: LIST
40348: PUSH
40349: LD_INT 1
40351: PUSH
40352: LD_INT 1
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: PUSH
40359: LD_INT 0
40361: PUSH
40362: LD_INT 1
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: PUSH
40369: LD_INT 1
40371: NEG
40372: PUSH
40373: LD_INT 0
40375: PUSH
40376: EMPTY
40377: LIST
40378: LIST
40379: PUSH
40380: LD_INT 1
40382: NEG
40383: PUSH
40384: LD_INT 1
40386: NEG
40387: PUSH
40388: EMPTY
40389: LIST
40390: LIST
40391: PUSH
40392: LD_INT 1
40394: NEG
40395: PUSH
40396: LD_INT 2
40398: NEG
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: PUSH
40404: LD_INT 1
40406: PUSH
40407: LD_INT 2
40409: PUSH
40410: EMPTY
40411: LIST
40412: LIST
40413: PUSH
40414: EMPTY
40415: LIST
40416: LIST
40417: LIST
40418: LIST
40419: LIST
40420: LIST
40421: LIST
40422: LIST
40423: LIST
40424: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
40425: LD_ADDR_VAR 0 40
40429: PUSH
40430: LD_INT 0
40432: PUSH
40433: LD_INT 0
40435: PUSH
40436: EMPTY
40437: LIST
40438: LIST
40439: PUSH
40440: LD_INT 0
40442: PUSH
40443: LD_INT 1
40445: NEG
40446: PUSH
40447: EMPTY
40448: LIST
40449: LIST
40450: PUSH
40451: LD_INT 1
40453: PUSH
40454: LD_INT 0
40456: PUSH
40457: EMPTY
40458: LIST
40459: LIST
40460: PUSH
40461: LD_INT 1
40463: PUSH
40464: LD_INT 1
40466: PUSH
40467: EMPTY
40468: LIST
40469: LIST
40470: PUSH
40471: LD_INT 0
40473: PUSH
40474: LD_INT 1
40476: PUSH
40477: EMPTY
40478: LIST
40479: LIST
40480: PUSH
40481: LD_INT 1
40483: NEG
40484: PUSH
40485: LD_INT 0
40487: PUSH
40488: EMPTY
40489: LIST
40490: LIST
40491: PUSH
40492: LD_INT 1
40494: NEG
40495: PUSH
40496: LD_INT 1
40498: NEG
40499: PUSH
40500: EMPTY
40501: LIST
40502: LIST
40503: PUSH
40504: LD_INT 1
40506: PUSH
40507: LD_INT 1
40509: NEG
40510: PUSH
40511: EMPTY
40512: LIST
40513: LIST
40514: PUSH
40515: LD_INT 1
40517: NEG
40518: PUSH
40519: LD_INT 1
40521: PUSH
40522: EMPTY
40523: LIST
40524: LIST
40525: PUSH
40526: EMPTY
40527: LIST
40528: LIST
40529: LIST
40530: LIST
40531: LIST
40532: LIST
40533: LIST
40534: LIST
40535: LIST
40536: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40537: LD_ADDR_VAR 0 41
40541: PUSH
40542: LD_INT 0
40544: PUSH
40545: LD_INT 0
40547: PUSH
40548: EMPTY
40549: LIST
40550: LIST
40551: PUSH
40552: LD_INT 0
40554: PUSH
40555: LD_INT 1
40557: NEG
40558: PUSH
40559: EMPTY
40560: LIST
40561: LIST
40562: PUSH
40563: LD_INT 1
40565: PUSH
40566: LD_INT 0
40568: PUSH
40569: EMPTY
40570: LIST
40571: LIST
40572: PUSH
40573: LD_INT 1
40575: PUSH
40576: LD_INT 1
40578: PUSH
40579: EMPTY
40580: LIST
40581: LIST
40582: PUSH
40583: LD_INT 0
40585: PUSH
40586: LD_INT 1
40588: PUSH
40589: EMPTY
40590: LIST
40591: LIST
40592: PUSH
40593: LD_INT 1
40595: NEG
40596: PUSH
40597: LD_INT 0
40599: PUSH
40600: EMPTY
40601: LIST
40602: LIST
40603: PUSH
40604: LD_INT 1
40606: NEG
40607: PUSH
40608: LD_INT 1
40610: NEG
40611: PUSH
40612: EMPTY
40613: LIST
40614: LIST
40615: PUSH
40616: LD_INT 1
40618: NEG
40619: PUSH
40620: LD_INT 2
40622: NEG
40623: PUSH
40624: EMPTY
40625: LIST
40626: LIST
40627: PUSH
40628: LD_INT 1
40630: PUSH
40631: LD_INT 1
40633: NEG
40634: PUSH
40635: EMPTY
40636: LIST
40637: LIST
40638: PUSH
40639: LD_INT 2
40641: PUSH
40642: LD_INT 0
40644: PUSH
40645: EMPTY
40646: LIST
40647: LIST
40648: PUSH
40649: LD_INT 2
40651: PUSH
40652: LD_INT 1
40654: PUSH
40655: EMPTY
40656: LIST
40657: LIST
40658: PUSH
40659: LD_INT 2
40661: PUSH
40662: LD_INT 2
40664: PUSH
40665: EMPTY
40666: LIST
40667: LIST
40668: PUSH
40669: LD_INT 1
40671: PUSH
40672: LD_INT 2
40674: PUSH
40675: EMPTY
40676: LIST
40677: LIST
40678: PUSH
40679: LD_INT 1
40681: NEG
40682: PUSH
40683: LD_INT 1
40685: PUSH
40686: EMPTY
40687: LIST
40688: LIST
40689: PUSH
40690: LD_INT 2
40692: NEG
40693: PUSH
40694: LD_INT 0
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: PUSH
40701: LD_INT 2
40703: NEG
40704: PUSH
40705: LD_INT 1
40707: NEG
40708: PUSH
40709: EMPTY
40710: LIST
40711: LIST
40712: PUSH
40713: LD_INT 2
40715: NEG
40716: PUSH
40717: LD_INT 2
40719: NEG
40720: PUSH
40721: EMPTY
40722: LIST
40723: LIST
40724: PUSH
40725: LD_INT 2
40727: NEG
40728: PUSH
40729: LD_INT 3
40731: NEG
40732: PUSH
40733: EMPTY
40734: LIST
40735: LIST
40736: PUSH
40737: LD_INT 2
40739: PUSH
40740: LD_INT 1
40742: NEG
40743: PUSH
40744: EMPTY
40745: LIST
40746: LIST
40747: PUSH
40748: LD_INT 3
40750: PUSH
40751: LD_INT 0
40753: PUSH
40754: EMPTY
40755: LIST
40756: LIST
40757: PUSH
40758: LD_INT 3
40760: PUSH
40761: LD_INT 1
40763: PUSH
40764: EMPTY
40765: LIST
40766: LIST
40767: PUSH
40768: LD_INT 3
40770: PUSH
40771: LD_INT 2
40773: PUSH
40774: EMPTY
40775: LIST
40776: LIST
40777: PUSH
40778: LD_INT 3
40780: PUSH
40781: LD_INT 3
40783: PUSH
40784: EMPTY
40785: LIST
40786: LIST
40787: PUSH
40788: LD_INT 2
40790: PUSH
40791: LD_INT 3
40793: PUSH
40794: EMPTY
40795: LIST
40796: LIST
40797: PUSH
40798: LD_INT 2
40800: NEG
40801: PUSH
40802: LD_INT 1
40804: PUSH
40805: EMPTY
40806: LIST
40807: LIST
40808: PUSH
40809: LD_INT 3
40811: NEG
40812: PUSH
40813: LD_INT 0
40815: PUSH
40816: EMPTY
40817: LIST
40818: LIST
40819: PUSH
40820: LD_INT 3
40822: NEG
40823: PUSH
40824: LD_INT 1
40826: NEG
40827: PUSH
40828: EMPTY
40829: LIST
40830: LIST
40831: PUSH
40832: LD_INT 3
40834: NEG
40835: PUSH
40836: LD_INT 2
40838: NEG
40839: PUSH
40840: EMPTY
40841: LIST
40842: LIST
40843: PUSH
40844: LD_INT 3
40846: NEG
40847: PUSH
40848: LD_INT 3
40850: NEG
40851: PUSH
40852: EMPTY
40853: LIST
40854: LIST
40855: PUSH
40856: EMPTY
40857: LIST
40858: LIST
40859: LIST
40860: LIST
40861: LIST
40862: LIST
40863: LIST
40864: LIST
40865: LIST
40866: LIST
40867: LIST
40868: LIST
40869: LIST
40870: LIST
40871: LIST
40872: LIST
40873: LIST
40874: LIST
40875: LIST
40876: LIST
40877: LIST
40878: LIST
40879: LIST
40880: LIST
40881: LIST
40882: LIST
40883: LIST
40884: LIST
40885: LIST
40886: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40887: LD_ADDR_VAR 0 42
40891: PUSH
40892: LD_INT 0
40894: PUSH
40895: LD_INT 0
40897: PUSH
40898: EMPTY
40899: LIST
40900: LIST
40901: PUSH
40902: LD_INT 0
40904: PUSH
40905: LD_INT 1
40907: NEG
40908: PUSH
40909: EMPTY
40910: LIST
40911: LIST
40912: PUSH
40913: LD_INT 1
40915: PUSH
40916: LD_INT 0
40918: PUSH
40919: EMPTY
40920: LIST
40921: LIST
40922: PUSH
40923: LD_INT 1
40925: PUSH
40926: LD_INT 1
40928: PUSH
40929: EMPTY
40930: LIST
40931: LIST
40932: PUSH
40933: LD_INT 0
40935: PUSH
40936: LD_INT 1
40938: PUSH
40939: EMPTY
40940: LIST
40941: LIST
40942: PUSH
40943: LD_INT 1
40945: NEG
40946: PUSH
40947: LD_INT 0
40949: PUSH
40950: EMPTY
40951: LIST
40952: LIST
40953: PUSH
40954: LD_INT 1
40956: NEG
40957: PUSH
40958: LD_INT 1
40960: NEG
40961: PUSH
40962: EMPTY
40963: LIST
40964: LIST
40965: PUSH
40966: LD_INT 1
40968: NEG
40969: PUSH
40970: LD_INT 2
40972: NEG
40973: PUSH
40974: EMPTY
40975: LIST
40976: LIST
40977: PUSH
40978: LD_INT 0
40980: PUSH
40981: LD_INT 2
40983: NEG
40984: PUSH
40985: EMPTY
40986: LIST
40987: LIST
40988: PUSH
40989: LD_INT 1
40991: PUSH
40992: LD_INT 1
40994: NEG
40995: PUSH
40996: EMPTY
40997: LIST
40998: LIST
40999: PUSH
41000: LD_INT 2
41002: PUSH
41003: LD_INT 1
41005: PUSH
41006: EMPTY
41007: LIST
41008: LIST
41009: PUSH
41010: LD_INT 2
41012: PUSH
41013: LD_INT 2
41015: PUSH
41016: EMPTY
41017: LIST
41018: LIST
41019: PUSH
41020: LD_INT 1
41022: PUSH
41023: LD_INT 2
41025: PUSH
41026: EMPTY
41027: LIST
41028: LIST
41029: PUSH
41030: LD_INT 0
41032: PUSH
41033: LD_INT 2
41035: PUSH
41036: EMPTY
41037: LIST
41038: LIST
41039: PUSH
41040: LD_INT 1
41042: NEG
41043: PUSH
41044: LD_INT 1
41046: PUSH
41047: EMPTY
41048: LIST
41049: LIST
41050: PUSH
41051: LD_INT 2
41053: NEG
41054: PUSH
41055: LD_INT 1
41057: NEG
41058: PUSH
41059: EMPTY
41060: LIST
41061: LIST
41062: PUSH
41063: LD_INT 2
41065: NEG
41066: PUSH
41067: LD_INT 2
41069: NEG
41070: PUSH
41071: EMPTY
41072: LIST
41073: LIST
41074: PUSH
41075: LD_INT 2
41077: NEG
41078: PUSH
41079: LD_INT 3
41081: NEG
41082: PUSH
41083: EMPTY
41084: LIST
41085: LIST
41086: PUSH
41087: LD_INT 1
41089: NEG
41090: PUSH
41091: LD_INT 3
41093: NEG
41094: PUSH
41095: EMPTY
41096: LIST
41097: LIST
41098: PUSH
41099: LD_INT 0
41101: PUSH
41102: LD_INT 3
41104: NEG
41105: PUSH
41106: EMPTY
41107: LIST
41108: LIST
41109: PUSH
41110: LD_INT 1
41112: PUSH
41113: LD_INT 2
41115: NEG
41116: PUSH
41117: EMPTY
41118: LIST
41119: LIST
41120: PUSH
41121: LD_INT 3
41123: PUSH
41124: LD_INT 2
41126: PUSH
41127: EMPTY
41128: LIST
41129: LIST
41130: PUSH
41131: LD_INT 3
41133: PUSH
41134: LD_INT 3
41136: PUSH
41137: EMPTY
41138: LIST
41139: LIST
41140: PUSH
41141: LD_INT 2
41143: PUSH
41144: LD_INT 3
41146: PUSH
41147: EMPTY
41148: LIST
41149: LIST
41150: PUSH
41151: LD_INT 1
41153: PUSH
41154: LD_INT 3
41156: PUSH
41157: EMPTY
41158: LIST
41159: LIST
41160: PUSH
41161: LD_INT 0
41163: PUSH
41164: LD_INT 3
41166: PUSH
41167: EMPTY
41168: LIST
41169: LIST
41170: PUSH
41171: LD_INT 1
41173: NEG
41174: PUSH
41175: LD_INT 2
41177: PUSH
41178: EMPTY
41179: LIST
41180: LIST
41181: PUSH
41182: LD_INT 3
41184: NEG
41185: PUSH
41186: LD_INT 2
41188: NEG
41189: PUSH
41190: EMPTY
41191: LIST
41192: LIST
41193: PUSH
41194: LD_INT 3
41196: NEG
41197: PUSH
41198: LD_INT 3
41200: NEG
41201: PUSH
41202: EMPTY
41203: LIST
41204: LIST
41205: PUSH
41206: EMPTY
41207: LIST
41208: LIST
41209: LIST
41210: LIST
41211: LIST
41212: LIST
41213: LIST
41214: LIST
41215: LIST
41216: LIST
41217: LIST
41218: LIST
41219: LIST
41220: LIST
41221: LIST
41222: LIST
41223: LIST
41224: LIST
41225: LIST
41226: LIST
41227: LIST
41228: LIST
41229: LIST
41230: LIST
41231: LIST
41232: LIST
41233: LIST
41234: LIST
41235: LIST
41236: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41237: LD_ADDR_VAR 0 43
41241: PUSH
41242: LD_INT 0
41244: PUSH
41245: LD_INT 0
41247: PUSH
41248: EMPTY
41249: LIST
41250: LIST
41251: PUSH
41252: LD_INT 0
41254: PUSH
41255: LD_INT 1
41257: NEG
41258: PUSH
41259: EMPTY
41260: LIST
41261: LIST
41262: PUSH
41263: LD_INT 1
41265: PUSH
41266: LD_INT 0
41268: PUSH
41269: EMPTY
41270: LIST
41271: LIST
41272: PUSH
41273: LD_INT 1
41275: PUSH
41276: LD_INT 1
41278: PUSH
41279: EMPTY
41280: LIST
41281: LIST
41282: PUSH
41283: LD_INT 0
41285: PUSH
41286: LD_INT 1
41288: PUSH
41289: EMPTY
41290: LIST
41291: LIST
41292: PUSH
41293: LD_INT 1
41295: NEG
41296: PUSH
41297: LD_INT 0
41299: PUSH
41300: EMPTY
41301: LIST
41302: LIST
41303: PUSH
41304: LD_INT 1
41306: NEG
41307: PUSH
41308: LD_INT 1
41310: NEG
41311: PUSH
41312: EMPTY
41313: LIST
41314: LIST
41315: PUSH
41316: LD_INT 1
41318: NEG
41319: PUSH
41320: LD_INT 2
41322: NEG
41323: PUSH
41324: EMPTY
41325: LIST
41326: LIST
41327: PUSH
41328: LD_INT 0
41330: PUSH
41331: LD_INT 2
41333: NEG
41334: PUSH
41335: EMPTY
41336: LIST
41337: LIST
41338: PUSH
41339: LD_INT 1
41341: PUSH
41342: LD_INT 1
41344: NEG
41345: PUSH
41346: EMPTY
41347: LIST
41348: LIST
41349: PUSH
41350: LD_INT 2
41352: PUSH
41353: LD_INT 0
41355: PUSH
41356: EMPTY
41357: LIST
41358: LIST
41359: PUSH
41360: LD_INT 2
41362: PUSH
41363: LD_INT 1
41365: PUSH
41366: EMPTY
41367: LIST
41368: LIST
41369: PUSH
41370: LD_INT 1
41372: PUSH
41373: LD_INT 2
41375: PUSH
41376: EMPTY
41377: LIST
41378: LIST
41379: PUSH
41380: LD_INT 0
41382: PUSH
41383: LD_INT 2
41385: PUSH
41386: EMPTY
41387: LIST
41388: LIST
41389: PUSH
41390: LD_INT 1
41392: NEG
41393: PUSH
41394: LD_INT 1
41396: PUSH
41397: EMPTY
41398: LIST
41399: LIST
41400: PUSH
41401: LD_INT 2
41403: NEG
41404: PUSH
41405: LD_INT 0
41407: PUSH
41408: EMPTY
41409: LIST
41410: LIST
41411: PUSH
41412: LD_INT 2
41414: NEG
41415: PUSH
41416: LD_INT 1
41418: NEG
41419: PUSH
41420: EMPTY
41421: LIST
41422: LIST
41423: PUSH
41424: LD_INT 1
41426: NEG
41427: PUSH
41428: LD_INT 3
41430: NEG
41431: PUSH
41432: EMPTY
41433: LIST
41434: LIST
41435: PUSH
41436: LD_INT 0
41438: PUSH
41439: LD_INT 3
41441: NEG
41442: PUSH
41443: EMPTY
41444: LIST
41445: LIST
41446: PUSH
41447: LD_INT 1
41449: PUSH
41450: LD_INT 2
41452: NEG
41453: PUSH
41454: EMPTY
41455: LIST
41456: LIST
41457: PUSH
41458: LD_INT 2
41460: PUSH
41461: LD_INT 1
41463: NEG
41464: PUSH
41465: EMPTY
41466: LIST
41467: LIST
41468: PUSH
41469: LD_INT 3
41471: PUSH
41472: LD_INT 0
41474: PUSH
41475: EMPTY
41476: LIST
41477: LIST
41478: PUSH
41479: LD_INT 3
41481: PUSH
41482: LD_INT 1
41484: PUSH
41485: EMPTY
41486: LIST
41487: LIST
41488: PUSH
41489: LD_INT 1
41491: PUSH
41492: LD_INT 3
41494: PUSH
41495: EMPTY
41496: LIST
41497: LIST
41498: PUSH
41499: LD_INT 0
41501: PUSH
41502: LD_INT 3
41504: PUSH
41505: EMPTY
41506: LIST
41507: LIST
41508: PUSH
41509: LD_INT 1
41511: NEG
41512: PUSH
41513: LD_INT 2
41515: PUSH
41516: EMPTY
41517: LIST
41518: LIST
41519: PUSH
41520: LD_INT 2
41522: NEG
41523: PUSH
41524: LD_INT 1
41526: PUSH
41527: EMPTY
41528: LIST
41529: LIST
41530: PUSH
41531: LD_INT 3
41533: NEG
41534: PUSH
41535: LD_INT 0
41537: PUSH
41538: EMPTY
41539: LIST
41540: LIST
41541: PUSH
41542: LD_INT 3
41544: NEG
41545: PUSH
41546: LD_INT 1
41548: NEG
41549: PUSH
41550: EMPTY
41551: LIST
41552: LIST
41553: PUSH
41554: EMPTY
41555: LIST
41556: LIST
41557: LIST
41558: LIST
41559: LIST
41560: LIST
41561: LIST
41562: LIST
41563: LIST
41564: LIST
41565: LIST
41566: LIST
41567: LIST
41568: LIST
41569: LIST
41570: LIST
41571: LIST
41572: LIST
41573: LIST
41574: LIST
41575: LIST
41576: LIST
41577: LIST
41578: LIST
41579: LIST
41580: LIST
41581: LIST
41582: LIST
41583: LIST
41584: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41585: LD_ADDR_VAR 0 44
41589: PUSH
41590: LD_INT 0
41592: PUSH
41593: LD_INT 0
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: PUSH
41600: LD_INT 0
41602: PUSH
41603: LD_INT 1
41605: NEG
41606: PUSH
41607: EMPTY
41608: LIST
41609: LIST
41610: PUSH
41611: LD_INT 1
41613: PUSH
41614: LD_INT 0
41616: PUSH
41617: EMPTY
41618: LIST
41619: LIST
41620: PUSH
41621: LD_INT 1
41623: PUSH
41624: LD_INT 1
41626: PUSH
41627: EMPTY
41628: LIST
41629: LIST
41630: PUSH
41631: LD_INT 0
41633: PUSH
41634: LD_INT 1
41636: PUSH
41637: EMPTY
41638: LIST
41639: LIST
41640: PUSH
41641: LD_INT 1
41643: NEG
41644: PUSH
41645: LD_INT 0
41647: PUSH
41648: EMPTY
41649: LIST
41650: LIST
41651: PUSH
41652: LD_INT 1
41654: NEG
41655: PUSH
41656: LD_INT 1
41658: NEG
41659: PUSH
41660: EMPTY
41661: LIST
41662: LIST
41663: PUSH
41664: LD_INT 1
41666: NEG
41667: PUSH
41668: LD_INT 2
41670: NEG
41671: PUSH
41672: EMPTY
41673: LIST
41674: LIST
41675: PUSH
41676: LD_INT 1
41678: PUSH
41679: LD_INT 1
41681: NEG
41682: PUSH
41683: EMPTY
41684: LIST
41685: LIST
41686: PUSH
41687: LD_INT 2
41689: PUSH
41690: LD_INT 0
41692: PUSH
41693: EMPTY
41694: LIST
41695: LIST
41696: PUSH
41697: LD_INT 2
41699: PUSH
41700: LD_INT 1
41702: PUSH
41703: EMPTY
41704: LIST
41705: LIST
41706: PUSH
41707: LD_INT 2
41709: PUSH
41710: LD_INT 2
41712: PUSH
41713: EMPTY
41714: LIST
41715: LIST
41716: PUSH
41717: LD_INT 1
41719: PUSH
41720: LD_INT 2
41722: PUSH
41723: EMPTY
41724: LIST
41725: LIST
41726: PUSH
41727: LD_INT 1
41729: NEG
41730: PUSH
41731: LD_INT 1
41733: PUSH
41734: EMPTY
41735: LIST
41736: LIST
41737: PUSH
41738: LD_INT 2
41740: NEG
41741: PUSH
41742: LD_INT 0
41744: PUSH
41745: EMPTY
41746: LIST
41747: LIST
41748: PUSH
41749: LD_INT 2
41751: NEG
41752: PUSH
41753: LD_INT 1
41755: NEG
41756: PUSH
41757: EMPTY
41758: LIST
41759: LIST
41760: PUSH
41761: LD_INT 2
41763: NEG
41764: PUSH
41765: LD_INT 2
41767: NEG
41768: PUSH
41769: EMPTY
41770: LIST
41771: LIST
41772: PUSH
41773: LD_INT 2
41775: NEG
41776: PUSH
41777: LD_INT 3
41779: NEG
41780: PUSH
41781: EMPTY
41782: LIST
41783: LIST
41784: PUSH
41785: LD_INT 2
41787: PUSH
41788: LD_INT 1
41790: NEG
41791: PUSH
41792: EMPTY
41793: LIST
41794: LIST
41795: PUSH
41796: LD_INT 3
41798: PUSH
41799: LD_INT 0
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: PUSH
41806: LD_INT 3
41808: PUSH
41809: LD_INT 1
41811: PUSH
41812: EMPTY
41813: LIST
41814: LIST
41815: PUSH
41816: LD_INT 3
41818: PUSH
41819: LD_INT 2
41821: PUSH
41822: EMPTY
41823: LIST
41824: LIST
41825: PUSH
41826: LD_INT 3
41828: PUSH
41829: LD_INT 3
41831: PUSH
41832: EMPTY
41833: LIST
41834: LIST
41835: PUSH
41836: LD_INT 2
41838: PUSH
41839: LD_INT 3
41841: PUSH
41842: EMPTY
41843: LIST
41844: LIST
41845: PUSH
41846: LD_INT 2
41848: NEG
41849: PUSH
41850: LD_INT 1
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: PUSH
41857: LD_INT 3
41859: NEG
41860: PUSH
41861: LD_INT 0
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: PUSH
41868: LD_INT 3
41870: NEG
41871: PUSH
41872: LD_INT 1
41874: NEG
41875: PUSH
41876: EMPTY
41877: LIST
41878: LIST
41879: PUSH
41880: LD_INT 3
41882: NEG
41883: PUSH
41884: LD_INT 2
41886: NEG
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: PUSH
41892: LD_INT 3
41894: NEG
41895: PUSH
41896: LD_INT 3
41898: NEG
41899: PUSH
41900: EMPTY
41901: LIST
41902: LIST
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: LIST
41908: LIST
41909: LIST
41910: LIST
41911: LIST
41912: LIST
41913: LIST
41914: LIST
41915: LIST
41916: LIST
41917: LIST
41918: LIST
41919: LIST
41920: LIST
41921: LIST
41922: LIST
41923: LIST
41924: LIST
41925: LIST
41926: LIST
41927: LIST
41928: LIST
41929: LIST
41930: LIST
41931: LIST
41932: LIST
41933: LIST
41934: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41935: LD_ADDR_VAR 0 45
41939: PUSH
41940: LD_INT 0
41942: PUSH
41943: LD_INT 0
41945: PUSH
41946: EMPTY
41947: LIST
41948: LIST
41949: PUSH
41950: LD_INT 0
41952: PUSH
41953: LD_INT 1
41955: NEG
41956: PUSH
41957: EMPTY
41958: LIST
41959: LIST
41960: PUSH
41961: LD_INT 1
41963: PUSH
41964: LD_INT 0
41966: PUSH
41967: EMPTY
41968: LIST
41969: LIST
41970: PUSH
41971: LD_INT 1
41973: PUSH
41974: LD_INT 1
41976: PUSH
41977: EMPTY
41978: LIST
41979: LIST
41980: PUSH
41981: LD_INT 0
41983: PUSH
41984: LD_INT 1
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: PUSH
41991: LD_INT 1
41993: NEG
41994: PUSH
41995: LD_INT 0
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: PUSH
42002: LD_INT 1
42004: NEG
42005: PUSH
42006: LD_INT 1
42008: NEG
42009: PUSH
42010: EMPTY
42011: LIST
42012: LIST
42013: PUSH
42014: LD_INT 1
42016: NEG
42017: PUSH
42018: LD_INT 2
42020: NEG
42021: PUSH
42022: EMPTY
42023: LIST
42024: LIST
42025: PUSH
42026: LD_INT 0
42028: PUSH
42029: LD_INT 2
42031: NEG
42032: PUSH
42033: EMPTY
42034: LIST
42035: LIST
42036: PUSH
42037: LD_INT 1
42039: PUSH
42040: LD_INT 1
42042: NEG
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: PUSH
42048: LD_INT 2
42050: PUSH
42051: LD_INT 1
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: PUSH
42058: LD_INT 2
42060: PUSH
42061: LD_INT 2
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: PUSH
42068: LD_INT 1
42070: PUSH
42071: LD_INT 2
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: PUSH
42078: LD_INT 0
42080: PUSH
42081: LD_INT 2
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: PUSH
42088: LD_INT 1
42090: NEG
42091: PUSH
42092: LD_INT 1
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: PUSH
42099: LD_INT 2
42101: NEG
42102: PUSH
42103: LD_INT 1
42105: NEG
42106: PUSH
42107: EMPTY
42108: LIST
42109: LIST
42110: PUSH
42111: LD_INT 2
42113: NEG
42114: PUSH
42115: LD_INT 2
42117: NEG
42118: PUSH
42119: EMPTY
42120: LIST
42121: LIST
42122: PUSH
42123: LD_INT 2
42125: NEG
42126: PUSH
42127: LD_INT 3
42129: NEG
42130: PUSH
42131: EMPTY
42132: LIST
42133: LIST
42134: PUSH
42135: LD_INT 1
42137: NEG
42138: PUSH
42139: LD_INT 3
42141: NEG
42142: PUSH
42143: EMPTY
42144: LIST
42145: LIST
42146: PUSH
42147: LD_INT 0
42149: PUSH
42150: LD_INT 3
42152: NEG
42153: PUSH
42154: EMPTY
42155: LIST
42156: LIST
42157: PUSH
42158: LD_INT 1
42160: PUSH
42161: LD_INT 2
42163: NEG
42164: PUSH
42165: EMPTY
42166: LIST
42167: LIST
42168: PUSH
42169: LD_INT 3
42171: PUSH
42172: LD_INT 2
42174: PUSH
42175: EMPTY
42176: LIST
42177: LIST
42178: PUSH
42179: LD_INT 3
42181: PUSH
42182: LD_INT 3
42184: PUSH
42185: EMPTY
42186: LIST
42187: LIST
42188: PUSH
42189: LD_INT 2
42191: PUSH
42192: LD_INT 3
42194: PUSH
42195: EMPTY
42196: LIST
42197: LIST
42198: PUSH
42199: LD_INT 1
42201: PUSH
42202: LD_INT 3
42204: PUSH
42205: EMPTY
42206: LIST
42207: LIST
42208: PUSH
42209: LD_INT 0
42211: PUSH
42212: LD_INT 3
42214: PUSH
42215: EMPTY
42216: LIST
42217: LIST
42218: PUSH
42219: LD_INT 1
42221: NEG
42222: PUSH
42223: LD_INT 2
42225: PUSH
42226: EMPTY
42227: LIST
42228: LIST
42229: PUSH
42230: LD_INT 3
42232: NEG
42233: PUSH
42234: LD_INT 2
42236: NEG
42237: PUSH
42238: EMPTY
42239: LIST
42240: LIST
42241: PUSH
42242: LD_INT 3
42244: NEG
42245: PUSH
42246: LD_INT 3
42248: NEG
42249: PUSH
42250: EMPTY
42251: LIST
42252: LIST
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: LIST
42258: LIST
42259: LIST
42260: LIST
42261: LIST
42262: LIST
42263: LIST
42264: LIST
42265: LIST
42266: LIST
42267: LIST
42268: LIST
42269: LIST
42270: LIST
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: LIST
42276: LIST
42277: LIST
42278: LIST
42279: LIST
42280: LIST
42281: LIST
42282: LIST
42283: LIST
42284: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42285: LD_ADDR_VAR 0 46
42289: PUSH
42290: LD_INT 0
42292: PUSH
42293: LD_INT 0
42295: PUSH
42296: EMPTY
42297: LIST
42298: LIST
42299: PUSH
42300: LD_INT 0
42302: PUSH
42303: LD_INT 1
42305: NEG
42306: PUSH
42307: EMPTY
42308: LIST
42309: LIST
42310: PUSH
42311: LD_INT 1
42313: PUSH
42314: LD_INT 0
42316: PUSH
42317: EMPTY
42318: LIST
42319: LIST
42320: PUSH
42321: LD_INT 1
42323: PUSH
42324: LD_INT 1
42326: PUSH
42327: EMPTY
42328: LIST
42329: LIST
42330: PUSH
42331: LD_INT 0
42333: PUSH
42334: LD_INT 1
42336: PUSH
42337: EMPTY
42338: LIST
42339: LIST
42340: PUSH
42341: LD_INT 1
42343: NEG
42344: PUSH
42345: LD_INT 0
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: PUSH
42352: LD_INT 1
42354: NEG
42355: PUSH
42356: LD_INT 1
42358: NEG
42359: PUSH
42360: EMPTY
42361: LIST
42362: LIST
42363: PUSH
42364: LD_INT 1
42366: NEG
42367: PUSH
42368: LD_INT 2
42370: NEG
42371: PUSH
42372: EMPTY
42373: LIST
42374: LIST
42375: PUSH
42376: LD_INT 0
42378: PUSH
42379: LD_INT 2
42381: NEG
42382: PUSH
42383: EMPTY
42384: LIST
42385: LIST
42386: PUSH
42387: LD_INT 1
42389: PUSH
42390: LD_INT 1
42392: NEG
42393: PUSH
42394: EMPTY
42395: LIST
42396: LIST
42397: PUSH
42398: LD_INT 2
42400: PUSH
42401: LD_INT 0
42403: PUSH
42404: EMPTY
42405: LIST
42406: LIST
42407: PUSH
42408: LD_INT 2
42410: PUSH
42411: LD_INT 1
42413: PUSH
42414: EMPTY
42415: LIST
42416: LIST
42417: PUSH
42418: LD_INT 1
42420: PUSH
42421: LD_INT 2
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: PUSH
42428: LD_INT 0
42430: PUSH
42431: LD_INT 2
42433: PUSH
42434: EMPTY
42435: LIST
42436: LIST
42437: PUSH
42438: LD_INT 1
42440: NEG
42441: PUSH
42442: LD_INT 1
42444: PUSH
42445: EMPTY
42446: LIST
42447: LIST
42448: PUSH
42449: LD_INT 2
42451: NEG
42452: PUSH
42453: LD_INT 0
42455: PUSH
42456: EMPTY
42457: LIST
42458: LIST
42459: PUSH
42460: LD_INT 2
42462: NEG
42463: PUSH
42464: LD_INT 1
42466: NEG
42467: PUSH
42468: EMPTY
42469: LIST
42470: LIST
42471: PUSH
42472: LD_INT 1
42474: NEG
42475: PUSH
42476: LD_INT 3
42478: NEG
42479: PUSH
42480: EMPTY
42481: LIST
42482: LIST
42483: PUSH
42484: LD_INT 0
42486: PUSH
42487: LD_INT 3
42489: NEG
42490: PUSH
42491: EMPTY
42492: LIST
42493: LIST
42494: PUSH
42495: LD_INT 1
42497: PUSH
42498: LD_INT 2
42500: NEG
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: PUSH
42506: LD_INT 2
42508: PUSH
42509: LD_INT 1
42511: NEG
42512: PUSH
42513: EMPTY
42514: LIST
42515: LIST
42516: PUSH
42517: LD_INT 3
42519: PUSH
42520: LD_INT 0
42522: PUSH
42523: EMPTY
42524: LIST
42525: LIST
42526: PUSH
42527: LD_INT 3
42529: PUSH
42530: LD_INT 1
42532: PUSH
42533: EMPTY
42534: LIST
42535: LIST
42536: PUSH
42537: LD_INT 1
42539: PUSH
42540: LD_INT 3
42542: PUSH
42543: EMPTY
42544: LIST
42545: LIST
42546: PUSH
42547: LD_INT 0
42549: PUSH
42550: LD_INT 3
42552: PUSH
42553: EMPTY
42554: LIST
42555: LIST
42556: PUSH
42557: LD_INT 1
42559: NEG
42560: PUSH
42561: LD_INT 2
42563: PUSH
42564: EMPTY
42565: LIST
42566: LIST
42567: PUSH
42568: LD_INT 2
42570: NEG
42571: PUSH
42572: LD_INT 1
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: PUSH
42579: LD_INT 3
42581: NEG
42582: PUSH
42583: LD_INT 0
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: PUSH
42590: LD_INT 3
42592: NEG
42593: PUSH
42594: LD_INT 1
42596: NEG
42597: PUSH
42598: EMPTY
42599: LIST
42600: LIST
42601: PUSH
42602: EMPTY
42603: LIST
42604: LIST
42605: LIST
42606: LIST
42607: LIST
42608: LIST
42609: LIST
42610: LIST
42611: LIST
42612: LIST
42613: LIST
42614: LIST
42615: LIST
42616: LIST
42617: LIST
42618: LIST
42619: LIST
42620: LIST
42621: LIST
42622: LIST
42623: LIST
42624: LIST
42625: LIST
42626: LIST
42627: LIST
42628: LIST
42629: LIST
42630: LIST
42631: LIST
42632: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42633: LD_ADDR_VAR 0 47
42637: PUSH
42638: LD_INT 0
42640: PUSH
42641: LD_INT 0
42643: PUSH
42644: EMPTY
42645: LIST
42646: LIST
42647: PUSH
42648: LD_INT 0
42650: PUSH
42651: LD_INT 1
42653: NEG
42654: PUSH
42655: EMPTY
42656: LIST
42657: LIST
42658: PUSH
42659: LD_INT 1
42661: PUSH
42662: LD_INT 0
42664: PUSH
42665: EMPTY
42666: LIST
42667: LIST
42668: PUSH
42669: LD_INT 1
42671: PUSH
42672: LD_INT 1
42674: PUSH
42675: EMPTY
42676: LIST
42677: LIST
42678: PUSH
42679: LD_INT 0
42681: PUSH
42682: LD_INT 1
42684: PUSH
42685: EMPTY
42686: LIST
42687: LIST
42688: PUSH
42689: LD_INT 1
42691: NEG
42692: PUSH
42693: LD_INT 0
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: PUSH
42700: LD_INT 1
42702: NEG
42703: PUSH
42704: LD_INT 1
42706: NEG
42707: PUSH
42708: EMPTY
42709: LIST
42710: LIST
42711: PUSH
42712: LD_INT 1
42714: NEG
42715: PUSH
42716: LD_INT 2
42718: NEG
42719: PUSH
42720: EMPTY
42721: LIST
42722: LIST
42723: PUSH
42724: LD_INT 0
42726: PUSH
42727: LD_INT 2
42729: NEG
42730: PUSH
42731: EMPTY
42732: LIST
42733: LIST
42734: PUSH
42735: LD_INT 1
42737: PUSH
42738: LD_INT 1
42740: NEG
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: PUSH
42746: LD_INT 2
42748: NEG
42749: PUSH
42750: LD_INT 1
42752: NEG
42753: PUSH
42754: EMPTY
42755: LIST
42756: LIST
42757: PUSH
42758: LD_INT 2
42760: NEG
42761: PUSH
42762: LD_INT 2
42764: NEG
42765: PUSH
42766: EMPTY
42767: LIST
42768: LIST
42769: PUSH
42770: EMPTY
42771: LIST
42772: LIST
42773: LIST
42774: LIST
42775: LIST
42776: LIST
42777: LIST
42778: LIST
42779: LIST
42780: LIST
42781: LIST
42782: LIST
42783: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
42784: LD_ADDR_VAR 0 48
42788: PUSH
42789: LD_INT 0
42791: PUSH
42792: LD_INT 0
42794: PUSH
42795: EMPTY
42796: LIST
42797: LIST
42798: PUSH
42799: LD_INT 0
42801: PUSH
42802: LD_INT 1
42804: NEG
42805: PUSH
42806: EMPTY
42807: LIST
42808: LIST
42809: PUSH
42810: LD_INT 1
42812: PUSH
42813: LD_INT 0
42815: PUSH
42816: EMPTY
42817: LIST
42818: LIST
42819: PUSH
42820: LD_INT 1
42822: PUSH
42823: LD_INT 1
42825: PUSH
42826: EMPTY
42827: LIST
42828: LIST
42829: PUSH
42830: LD_INT 0
42832: PUSH
42833: LD_INT 1
42835: PUSH
42836: EMPTY
42837: LIST
42838: LIST
42839: PUSH
42840: LD_INT 1
42842: NEG
42843: PUSH
42844: LD_INT 0
42846: PUSH
42847: EMPTY
42848: LIST
42849: LIST
42850: PUSH
42851: LD_INT 1
42853: NEG
42854: PUSH
42855: LD_INT 1
42857: NEG
42858: PUSH
42859: EMPTY
42860: LIST
42861: LIST
42862: PUSH
42863: LD_INT 1
42865: NEG
42866: PUSH
42867: LD_INT 2
42869: NEG
42870: PUSH
42871: EMPTY
42872: LIST
42873: LIST
42874: PUSH
42875: LD_INT 0
42877: PUSH
42878: LD_INT 2
42880: NEG
42881: PUSH
42882: EMPTY
42883: LIST
42884: LIST
42885: PUSH
42886: LD_INT 1
42888: PUSH
42889: LD_INT 1
42891: NEG
42892: PUSH
42893: EMPTY
42894: LIST
42895: LIST
42896: PUSH
42897: LD_INT 2
42899: PUSH
42900: LD_INT 0
42902: PUSH
42903: EMPTY
42904: LIST
42905: LIST
42906: PUSH
42907: LD_INT 2
42909: PUSH
42910: LD_INT 1
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: PUSH
42917: EMPTY
42918: LIST
42919: LIST
42920: LIST
42921: LIST
42922: LIST
42923: LIST
42924: LIST
42925: LIST
42926: LIST
42927: LIST
42928: LIST
42929: LIST
42930: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
42931: LD_ADDR_VAR 0 49
42935: PUSH
42936: LD_INT 0
42938: PUSH
42939: LD_INT 0
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: PUSH
42946: LD_INT 0
42948: PUSH
42949: LD_INT 1
42951: NEG
42952: PUSH
42953: EMPTY
42954: LIST
42955: LIST
42956: PUSH
42957: LD_INT 1
42959: PUSH
42960: LD_INT 0
42962: PUSH
42963: EMPTY
42964: LIST
42965: LIST
42966: PUSH
42967: LD_INT 1
42969: PUSH
42970: LD_INT 1
42972: PUSH
42973: EMPTY
42974: LIST
42975: LIST
42976: PUSH
42977: LD_INT 0
42979: PUSH
42980: LD_INT 1
42982: PUSH
42983: EMPTY
42984: LIST
42985: LIST
42986: PUSH
42987: LD_INT 1
42989: NEG
42990: PUSH
42991: LD_INT 0
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: PUSH
42998: LD_INT 1
43000: NEG
43001: PUSH
43002: LD_INT 1
43004: NEG
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: PUSH
43010: LD_INT 1
43012: PUSH
43013: LD_INT 1
43015: NEG
43016: PUSH
43017: EMPTY
43018: LIST
43019: LIST
43020: PUSH
43021: LD_INT 2
43023: PUSH
43024: LD_INT 0
43026: PUSH
43027: EMPTY
43028: LIST
43029: LIST
43030: PUSH
43031: LD_INT 2
43033: PUSH
43034: LD_INT 1
43036: PUSH
43037: EMPTY
43038: LIST
43039: LIST
43040: PUSH
43041: LD_INT 2
43043: PUSH
43044: LD_INT 2
43046: PUSH
43047: EMPTY
43048: LIST
43049: LIST
43050: PUSH
43051: LD_INT 1
43053: PUSH
43054: LD_INT 2
43056: PUSH
43057: EMPTY
43058: LIST
43059: LIST
43060: PUSH
43061: EMPTY
43062: LIST
43063: LIST
43064: LIST
43065: LIST
43066: LIST
43067: LIST
43068: LIST
43069: LIST
43070: LIST
43071: LIST
43072: LIST
43073: LIST
43074: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
43075: LD_ADDR_VAR 0 50
43079: PUSH
43080: LD_INT 0
43082: PUSH
43083: LD_INT 0
43085: PUSH
43086: EMPTY
43087: LIST
43088: LIST
43089: PUSH
43090: LD_INT 0
43092: PUSH
43093: LD_INT 1
43095: NEG
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: PUSH
43101: LD_INT 1
43103: PUSH
43104: LD_INT 0
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: PUSH
43111: LD_INT 1
43113: PUSH
43114: LD_INT 1
43116: PUSH
43117: EMPTY
43118: LIST
43119: LIST
43120: PUSH
43121: LD_INT 0
43123: PUSH
43124: LD_INT 1
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: PUSH
43131: LD_INT 1
43133: NEG
43134: PUSH
43135: LD_INT 0
43137: PUSH
43138: EMPTY
43139: LIST
43140: LIST
43141: PUSH
43142: LD_INT 1
43144: NEG
43145: PUSH
43146: LD_INT 1
43148: NEG
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: PUSH
43154: LD_INT 2
43156: PUSH
43157: LD_INT 1
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: PUSH
43164: LD_INT 2
43166: PUSH
43167: LD_INT 2
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: PUSH
43174: LD_INT 1
43176: PUSH
43177: LD_INT 2
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: PUSH
43184: LD_INT 0
43186: PUSH
43187: LD_INT 2
43189: PUSH
43190: EMPTY
43191: LIST
43192: LIST
43193: PUSH
43194: LD_INT 1
43196: NEG
43197: PUSH
43198: LD_INT 1
43200: PUSH
43201: EMPTY
43202: LIST
43203: LIST
43204: PUSH
43205: EMPTY
43206: LIST
43207: LIST
43208: LIST
43209: LIST
43210: LIST
43211: LIST
43212: LIST
43213: LIST
43214: LIST
43215: LIST
43216: LIST
43217: LIST
43218: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
43219: LD_ADDR_VAR 0 51
43223: PUSH
43224: LD_INT 0
43226: PUSH
43227: LD_INT 0
43229: PUSH
43230: EMPTY
43231: LIST
43232: LIST
43233: PUSH
43234: LD_INT 0
43236: PUSH
43237: LD_INT 1
43239: NEG
43240: PUSH
43241: EMPTY
43242: LIST
43243: LIST
43244: PUSH
43245: LD_INT 1
43247: PUSH
43248: LD_INT 0
43250: PUSH
43251: EMPTY
43252: LIST
43253: LIST
43254: PUSH
43255: LD_INT 1
43257: PUSH
43258: LD_INT 1
43260: PUSH
43261: EMPTY
43262: LIST
43263: LIST
43264: PUSH
43265: LD_INT 0
43267: PUSH
43268: LD_INT 1
43270: PUSH
43271: EMPTY
43272: LIST
43273: LIST
43274: PUSH
43275: LD_INT 1
43277: NEG
43278: PUSH
43279: LD_INT 0
43281: PUSH
43282: EMPTY
43283: LIST
43284: LIST
43285: PUSH
43286: LD_INT 1
43288: NEG
43289: PUSH
43290: LD_INT 1
43292: NEG
43293: PUSH
43294: EMPTY
43295: LIST
43296: LIST
43297: PUSH
43298: LD_INT 1
43300: PUSH
43301: LD_INT 2
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: PUSH
43308: LD_INT 0
43310: PUSH
43311: LD_INT 2
43313: PUSH
43314: EMPTY
43315: LIST
43316: LIST
43317: PUSH
43318: LD_INT 1
43320: NEG
43321: PUSH
43322: LD_INT 1
43324: PUSH
43325: EMPTY
43326: LIST
43327: LIST
43328: PUSH
43329: LD_INT 2
43331: NEG
43332: PUSH
43333: LD_INT 0
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: PUSH
43340: LD_INT 2
43342: NEG
43343: PUSH
43344: LD_INT 1
43346: NEG
43347: PUSH
43348: EMPTY
43349: LIST
43350: LIST
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: LIST
43356: LIST
43357: LIST
43358: LIST
43359: LIST
43360: LIST
43361: LIST
43362: LIST
43363: LIST
43364: LIST
43365: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43366: LD_ADDR_VAR 0 52
43370: PUSH
43371: LD_INT 0
43373: PUSH
43374: LD_INT 0
43376: PUSH
43377: EMPTY
43378: LIST
43379: LIST
43380: PUSH
43381: LD_INT 0
43383: PUSH
43384: LD_INT 1
43386: NEG
43387: PUSH
43388: EMPTY
43389: LIST
43390: LIST
43391: PUSH
43392: LD_INT 1
43394: PUSH
43395: LD_INT 0
43397: PUSH
43398: EMPTY
43399: LIST
43400: LIST
43401: PUSH
43402: LD_INT 1
43404: PUSH
43405: LD_INT 1
43407: PUSH
43408: EMPTY
43409: LIST
43410: LIST
43411: PUSH
43412: LD_INT 0
43414: PUSH
43415: LD_INT 1
43417: PUSH
43418: EMPTY
43419: LIST
43420: LIST
43421: PUSH
43422: LD_INT 1
43424: NEG
43425: PUSH
43426: LD_INT 0
43428: PUSH
43429: EMPTY
43430: LIST
43431: LIST
43432: PUSH
43433: LD_INT 1
43435: NEG
43436: PUSH
43437: LD_INT 1
43439: NEG
43440: PUSH
43441: EMPTY
43442: LIST
43443: LIST
43444: PUSH
43445: LD_INT 1
43447: NEG
43448: PUSH
43449: LD_INT 2
43451: NEG
43452: PUSH
43453: EMPTY
43454: LIST
43455: LIST
43456: PUSH
43457: LD_INT 1
43459: NEG
43460: PUSH
43461: LD_INT 1
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: PUSH
43468: LD_INT 2
43470: NEG
43471: PUSH
43472: LD_INT 0
43474: PUSH
43475: EMPTY
43476: LIST
43477: LIST
43478: PUSH
43479: LD_INT 2
43481: NEG
43482: PUSH
43483: LD_INT 1
43485: NEG
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: PUSH
43491: LD_INT 2
43493: NEG
43494: PUSH
43495: LD_INT 2
43497: NEG
43498: PUSH
43499: EMPTY
43500: LIST
43501: LIST
43502: PUSH
43503: EMPTY
43504: LIST
43505: LIST
43506: LIST
43507: LIST
43508: LIST
43509: LIST
43510: LIST
43511: LIST
43512: LIST
43513: LIST
43514: LIST
43515: LIST
43516: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43517: LD_ADDR_VAR 0 53
43521: PUSH
43522: LD_INT 0
43524: PUSH
43525: LD_INT 0
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: PUSH
43532: LD_INT 0
43534: PUSH
43535: LD_INT 1
43537: NEG
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: PUSH
43543: LD_INT 1
43545: PUSH
43546: LD_INT 0
43548: PUSH
43549: EMPTY
43550: LIST
43551: LIST
43552: PUSH
43553: LD_INT 1
43555: PUSH
43556: LD_INT 1
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PUSH
43563: LD_INT 0
43565: PUSH
43566: LD_INT 1
43568: PUSH
43569: EMPTY
43570: LIST
43571: LIST
43572: PUSH
43573: LD_INT 1
43575: NEG
43576: PUSH
43577: LD_INT 0
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: PUSH
43584: LD_INT 1
43586: NEG
43587: PUSH
43588: LD_INT 1
43590: NEG
43591: PUSH
43592: EMPTY
43593: LIST
43594: LIST
43595: PUSH
43596: LD_INT 1
43598: NEG
43599: PUSH
43600: LD_INT 2
43602: NEG
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: PUSH
43608: LD_INT 0
43610: PUSH
43611: LD_INT 2
43613: NEG
43614: PUSH
43615: EMPTY
43616: LIST
43617: LIST
43618: PUSH
43619: LD_INT 1
43621: PUSH
43622: LD_INT 1
43624: NEG
43625: PUSH
43626: EMPTY
43627: LIST
43628: LIST
43629: PUSH
43630: LD_INT 2
43632: PUSH
43633: LD_INT 0
43635: PUSH
43636: EMPTY
43637: LIST
43638: LIST
43639: PUSH
43640: LD_INT 2
43642: PUSH
43643: LD_INT 1
43645: PUSH
43646: EMPTY
43647: LIST
43648: LIST
43649: PUSH
43650: LD_INT 2
43652: PUSH
43653: LD_INT 2
43655: PUSH
43656: EMPTY
43657: LIST
43658: LIST
43659: PUSH
43660: LD_INT 1
43662: PUSH
43663: LD_INT 2
43665: PUSH
43666: EMPTY
43667: LIST
43668: LIST
43669: PUSH
43670: LD_INT 0
43672: PUSH
43673: LD_INT 2
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: PUSH
43680: LD_INT 1
43682: NEG
43683: PUSH
43684: LD_INT 1
43686: PUSH
43687: EMPTY
43688: LIST
43689: LIST
43690: PUSH
43691: LD_INT 2
43693: NEG
43694: PUSH
43695: LD_INT 0
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: PUSH
43702: LD_INT 2
43704: NEG
43705: PUSH
43706: LD_INT 1
43708: NEG
43709: PUSH
43710: EMPTY
43711: LIST
43712: LIST
43713: PUSH
43714: LD_INT 2
43716: NEG
43717: PUSH
43718: LD_INT 2
43720: NEG
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: LIST
43730: LIST
43731: LIST
43732: LIST
43733: LIST
43734: LIST
43735: LIST
43736: LIST
43737: LIST
43738: LIST
43739: LIST
43740: LIST
43741: LIST
43742: LIST
43743: LIST
43744: LIST
43745: LIST
43746: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43747: LD_ADDR_VAR 0 54
43751: PUSH
43752: LD_INT 0
43754: PUSH
43755: LD_INT 0
43757: PUSH
43758: EMPTY
43759: LIST
43760: LIST
43761: PUSH
43762: LD_INT 0
43764: PUSH
43765: LD_INT 1
43767: NEG
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: PUSH
43773: LD_INT 1
43775: PUSH
43776: LD_INT 0
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: PUSH
43783: LD_INT 1
43785: PUSH
43786: LD_INT 1
43788: PUSH
43789: EMPTY
43790: LIST
43791: LIST
43792: PUSH
43793: LD_INT 0
43795: PUSH
43796: LD_INT 1
43798: PUSH
43799: EMPTY
43800: LIST
43801: LIST
43802: PUSH
43803: LD_INT 1
43805: NEG
43806: PUSH
43807: LD_INT 0
43809: PUSH
43810: EMPTY
43811: LIST
43812: LIST
43813: PUSH
43814: LD_INT 1
43816: NEG
43817: PUSH
43818: LD_INT 1
43820: NEG
43821: PUSH
43822: EMPTY
43823: LIST
43824: LIST
43825: PUSH
43826: LD_INT 1
43828: NEG
43829: PUSH
43830: LD_INT 2
43832: NEG
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: PUSH
43838: LD_INT 0
43840: PUSH
43841: LD_INT 2
43843: NEG
43844: PUSH
43845: EMPTY
43846: LIST
43847: LIST
43848: PUSH
43849: LD_INT 1
43851: PUSH
43852: LD_INT 1
43854: NEG
43855: PUSH
43856: EMPTY
43857: LIST
43858: LIST
43859: PUSH
43860: LD_INT 2
43862: PUSH
43863: LD_INT 0
43865: PUSH
43866: EMPTY
43867: LIST
43868: LIST
43869: PUSH
43870: LD_INT 2
43872: PUSH
43873: LD_INT 1
43875: PUSH
43876: EMPTY
43877: LIST
43878: LIST
43879: PUSH
43880: LD_INT 2
43882: PUSH
43883: LD_INT 2
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: PUSH
43890: LD_INT 1
43892: PUSH
43893: LD_INT 2
43895: PUSH
43896: EMPTY
43897: LIST
43898: LIST
43899: PUSH
43900: LD_INT 0
43902: PUSH
43903: LD_INT 2
43905: PUSH
43906: EMPTY
43907: LIST
43908: LIST
43909: PUSH
43910: LD_INT 1
43912: NEG
43913: PUSH
43914: LD_INT 1
43916: PUSH
43917: EMPTY
43918: LIST
43919: LIST
43920: PUSH
43921: LD_INT 2
43923: NEG
43924: PUSH
43925: LD_INT 0
43927: PUSH
43928: EMPTY
43929: LIST
43930: LIST
43931: PUSH
43932: LD_INT 2
43934: NEG
43935: PUSH
43936: LD_INT 1
43938: NEG
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: PUSH
43944: LD_INT 2
43946: NEG
43947: PUSH
43948: LD_INT 2
43950: NEG
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: PUSH
43956: EMPTY
43957: LIST
43958: LIST
43959: LIST
43960: LIST
43961: LIST
43962: LIST
43963: LIST
43964: LIST
43965: LIST
43966: LIST
43967: LIST
43968: LIST
43969: LIST
43970: LIST
43971: LIST
43972: LIST
43973: LIST
43974: LIST
43975: LIST
43976: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43977: LD_ADDR_VAR 0 55
43981: PUSH
43982: LD_INT 0
43984: PUSH
43985: LD_INT 0
43987: PUSH
43988: EMPTY
43989: LIST
43990: LIST
43991: PUSH
43992: LD_INT 0
43994: PUSH
43995: LD_INT 1
43997: NEG
43998: PUSH
43999: EMPTY
44000: LIST
44001: LIST
44002: PUSH
44003: LD_INT 1
44005: PUSH
44006: LD_INT 0
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: PUSH
44013: LD_INT 1
44015: PUSH
44016: LD_INT 1
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: PUSH
44023: LD_INT 0
44025: PUSH
44026: LD_INT 1
44028: PUSH
44029: EMPTY
44030: LIST
44031: LIST
44032: PUSH
44033: LD_INT 1
44035: NEG
44036: PUSH
44037: LD_INT 0
44039: PUSH
44040: EMPTY
44041: LIST
44042: LIST
44043: PUSH
44044: LD_INT 1
44046: NEG
44047: PUSH
44048: LD_INT 1
44050: NEG
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 1
44058: NEG
44059: PUSH
44060: LD_INT 2
44062: NEG
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: PUSH
44068: LD_INT 0
44070: PUSH
44071: LD_INT 2
44073: NEG
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: PUSH
44079: LD_INT 1
44081: PUSH
44082: LD_INT 1
44084: NEG
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: PUSH
44090: LD_INT 2
44092: PUSH
44093: LD_INT 0
44095: PUSH
44096: EMPTY
44097: LIST
44098: LIST
44099: PUSH
44100: LD_INT 2
44102: PUSH
44103: LD_INT 1
44105: PUSH
44106: EMPTY
44107: LIST
44108: LIST
44109: PUSH
44110: LD_INT 2
44112: PUSH
44113: LD_INT 2
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: PUSH
44120: LD_INT 1
44122: PUSH
44123: LD_INT 2
44125: PUSH
44126: EMPTY
44127: LIST
44128: LIST
44129: PUSH
44130: LD_INT 0
44132: PUSH
44133: LD_INT 2
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: PUSH
44140: LD_INT 1
44142: NEG
44143: PUSH
44144: LD_INT 1
44146: PUSH
44147: EMPTY
44148: LIST
44149: LIST
44150: PUSH
44151: LD_INT 2
44153: NEG
44154: PUSH
44155: LD_INT 0
44157: PUSH
44158: EMPTY
44159: LIST
44160: LIST
44161: PUSH
44162: LD_INT 2
44164: NEG
44165: PUSH
44166: LD_INT 1
44168: NEG
44169: PUSH
44170: EMPTY
44171: LIST
44172: LIST
44173: PUSH
44174: LD_INT 2
44176: NEG
44177: PUSH
44178: LD_INT 2
44180: NEG
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: PUSH
44186: EMPTY
44187: LIST
44188: LIST
44189: LIST
44190: LIST
44191: LIST
44192: LIST
44193: LIST
44194: LIST
44195: LIST
44196: LIST
44197: LIST
44198: LIST
44199: LIST
44200: LIST
44201: LIST
44202: LIST
44203: LIST
44204: LIST
44205: LIST
44206: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44207: LD_ADDR_VAR 0 56
44211: PUSH
44212: LD_INT 0
44214: PUSH
44215: LD_INT 0
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: PUSH
44222: LD_INT 0
44224: PUSH
44225: LD_INT 1
44227: NEG
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: PUSH
44233: LD_INT 1
44235: PUSH
44236: LD_INT 0
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: PUSH
44243: LD_INT 1
44245: PUSH
44246: LD_INT 1
44248: PUSH
44249: EMPTY
44250: LIST
44251: LIST
44252: PUSH
44253: LD_INT 0
44255: PUSH
44256: LD_INT 1
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: PUSH
44263: LD_INT 1
44265: NEG
44266: PUSH
44267: LD_INT 0
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: PUSH
44274: LD_INT 1
44276: NEG
44277: PUSH
44278: LD_INT 1
44280: NEG
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: PUSH
44286: LD_INT 1
44288: NEG
44289: PUSH
44290: LD_INT 2
44292: NEG
44293: PUSH
44294: EMPTY
44295: LIST
44296: LIST
44297: PUSH
44298: LD_INT 0
44300: PUSH
44301: LD_INT 2
44303: NEG
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: PUSH
44309: LD_INT 1
44311: PUSH
44312: LD_INT 1
44314: NEG
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: LD_INT 2
44322: PUSH
44323: LD_INT 0
44325: PUSH
44326: EMPTY
44327: LIST
44328: LIST
44329: PUSH
44330: LD_INT 2
44332: PUSH
44333: LD_INT 1
44335: PUSH
44336: EMPTY
44337: LIST
44338: LIST
44339: PUSH
44340: LD_INT 2
44342: PUSH
44343: LD_INT 2
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: PUSH
44350: LD_INT 1
44352: PUSH
44353: LD_INT 2
44355: PUSH
44356: EMPTY
44357: LIST
44358: LIST
44359: PUSH
44360: LD_INT 0
44362: PUSH
44363: LD_INT 2
44365: PUSH
44366: EMPTY
44367: LIST
44368: LIST
44369: PUSH
44370: LD_INT 1
44372: NEG
44373: PUSH
44374: LD_INT 1
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: PUSH
44381: LD_INT 2
44383: NEG
44384: PUSH
44385: LD_INT 0
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: PUSH
44392: LD_INT 2
44394: NEG
44395: PUSH
44396: LD_INT 1
44398: NEG
44399: PUSH
44400: EMPTY
44401: LIST
44402: LIST
44403: PUSH
44404: LD_INT 2
44406: NEG
44407: PUSH
44408: LD_INT 2
44410: NEG
44411: PUSH
44412: EMPTY
44413: LIST
44414: LIST
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: LIST
44420: LIST
44421: LIST
44422: LIST
44423: LIST
44424: LIST
44425: LIST
44426: LIST
44427: LIST
44428: LIST
44429: LIST
44430: LIST
44431: LIST
44432: LIST
44433: LIST
44434: LIST
44435: LIST
44436: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44437: LD_ADDR_VAR 0 57
44441: PUSH
44442: LD_INT 0
44444: PUSH
44445: LD_INT 0
44447: PUSH
44448: EMPTY
44449: LIST
44450: LIST
44451: PUSH
44452: LD_INT 0
44454: PUSH
44455: LD_INT 1
44457: NEG
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: PUSH
44463: LD_INT 1
44465: PUSH
44466: LD_INT 0
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: PUSH
44473: LD_INT 1
44475: PUSH
44476: LD_INT 1
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: PUSH
44483: LD_INT 0
44485: PUSH
44486: LD_INT 1
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: PUSH
44493: LD_INT 1
44495: NEG
44496: PUSH
44497: LD_INT 0
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: PUSH
44504: LD_INT 1
44506: NEG
44507: PUSH
44508: LD_INT 1
44510: NEG
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PUSH
44516: LD_INT 1
44518: NEG
44519: PUSH
44520: LD_INT 2
44522: NEG
44523: PUSH
44524: EMPTY
44525: LIST
44526: LIST
44527: PUSH
44528: LD_INT 0
44530: PUSH
44531: LD_INT 2
44533: NEG
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: PUSH
44539: LD_INT 1
44541: PUSH
44542: LD_INT 1
44544: NEG
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: LD_INT 2
44552: PUSH
44553: LD_INT 0
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: PUSH
44560: LD_INT 2
44562: PUSH
44563: LD_INT 1
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: PUSH
44570: LD_INT 2
44572: PUSH
44573: LD_INT 2
44575: PUSH
44576: EMPTY
44577: LIST
44578: LIST
44579: PUSH
44580: LD_INT 1
44582: PUSH
44583: LD_INT 2
44585: PUSH
44586: EMPTY
44587: LIST
44588: LIST
44589: PUSH
44590: LD_INT 0
44592: PUSH
44593: LD_INT 2
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: LD_INT 1
44602: NEG
44603: PUSH
44604: LD_INT 1
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: PUSH
44611: LD_INT 2
44613: NEG
44614: PUSH
44615: LD_INT 0
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: PUSH
44622: LD_INT 2
44624: NEG
44625: PUSH
44626: LD_INT 1
44628: NEG
44629: PUSH
44630: EMPTY
44631: LIST
44632: LIST
44633: PUSH
44634: LD_INT 2
44636: NEG
44637: PUSH
44638: LD_INT 2
44640: NEG
44641: PUSH
44642: EMPTY
44643: LIST
44644: LIST
44645: PUSH
44646: EMPTY
44647: LIST
44648: LIST
44649: LIST
44650: LIST
44651: LIST
44652: LIST
44653: LIST
44654: LIST
44655: LIST
44656: LIST
44657: LIST
44658: LIST
44659: LIST
44660: LIST
44661: LIST
44662: LIST
44663: LIST
44664: LIST
44665: LIST
44666: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44667: LD_ADDR_VAR 0 58
44671: PUSH
44672: LD_INT 0
44674: PUSH
44675: LD_INT 0
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: PUSH
44682: LD_INT 0
44684: PUSH
44685: LD_INT 1
44687: NEG
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: PUSH
44693: LD_INT 1
44695: PUSH
44696: LD_INT 0
44698: PUSH
44699: EMPTY
44700: LIST
44701: LIST
44702: PUSH
44703: LD_INT 1
44705: PUSH
44706: LD_INT 1
44708: PUSH
44709: EMPTY
44710: LIST
44711: LIST
44712: PUSH
44713: LD_INT 0
44715: PUSH
44716: LD_INT 1
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: PUSH
44723: LD_INT 1
44725: NEG
44726: PUSH
44727: LD_INT 0
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: PUSH
44734: LD_INT 1
44736: NEG
44737: PUSH
44738: LD_INT 1
44740: NEG
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: LD_INT 1
44748: NEG
44749: PUSH
44750: LD_INT 2
44752: NEG
44753: PUSH
44754: EMPTY
44755: LIST
44756: LIST
44757: PUSH
44758: LD_INT 0
44760: PUSH
44761: LD_INT 2
44763: NEG
44764: PUSH
44765: EMPTY
44766: LIST
44767: LIST
44768: PUSH
44769: LD_INT 1
44771: PUSH
44772: LD_INT 1
44774: NEG
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: PUSH
44780: LD_INT 2
44782: PUSH
44783: LD_INT 0
44785: PUSH
44786: EMPTY
44787: LIST
44788: LIST
44789: PUSH
44790: LD_INT 2
44792: PUSH
44793: LD_INT 1
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: PUSH
44800: LD_INT 2
44802: PUSH
44803: LD_INT 2
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: PUSH
44810: LD_INT 1
44812: PUSH
44813: LD_INT 2
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: PUSH
44820: LD_INT 0
44822: PUSH
44823: LD_INT 2
44825: PUSH
44826: EMPTY
44827: LIST
44828: LIST
44829: PUSH
44830: LD_INT 1
44832: NEG
44833: PUSH
44834: LD_INT 1
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: PUSH
44841: LD_INT 2
44843: NEG
44844: PUSH
44845: LD_INT 0
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: PUSH
44852: LD_INT 2
44854: NEG
44855: PUSH
44856: LD_INT 1
44858: NEG
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: PUSH
44864: LD_INT 2
44866: NEG
44867: PUSH
44868: LD_INT 2
44870: NEG
44871: PUSH
44872: EMPTY
44873: LIST
44874: LIST
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: LIST
44880: LIST
44881: LIST
44882: LIST
44883: LIST
44884: LIST
44885: LIST
44886: LIST
44887: LIST
44888: LIST
44889: LIST
44890: LIST
44891: LIST
44892: LIST
44893: LIST
44894: LIST
44895: LIST
44896: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44897: LD_ADDR_VAR 0 59
44901: PUSH
44902: LD_INT 0
44904: PUSH
44905: LD_INT 0
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: PUSH
44912: LD_INT 0
44914: PUSH
44915: LD_INT 1
44917: NEG
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: PUSH
44923: LD_INT 1
44925: PUSH
44926: LD_INT 0
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: PUSH
44933: LD_INT 1
44935: PUSH
44936: LD_INT 1
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 0
44945: PUSH
44946: LD_INT 1
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: PUSH
44953: LD_INT 1
44955: NEG
44956: PUSH
44957: LD_INT 0
44959: PUSH
44960: EMPTY
44961: LIST
44962: LIST
44963: PUSH
44964: LD_INT 1
44966: NEG
44967: PUSH
44968: LD_INT 1
44970: NEG
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: PUSH
44976: EMPTY
44977: LIST
44978: LIST
44979: LIST
44980: LIST
44981: LIST
44982: LIST
44983: LIST
44984: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44985: LD_ADDR_VAR 0 60
44989: PUSH
44990: LD_INT 0
44992: PUSH
44993: LD_INT 0
44995: PUSH
44996: EMPTY
44997: LIST
44998: LIST
44999: PUSH
45000: LD_INT 0
45002: PUSH
45003: LD_INT 1
45005: NEG
45006: PUSH
45007: EMPTY
45008: LIST
45009: LIST
45010: PUSH
45011: LD_INT 1
45013: PUSH
45014: LD_INT 0
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: PUSH
45021: LD_INT 1
45023: PUSH
45024: LD_INT 1
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: PUSH
45031: LD_INT 0
45033: PUSH
45034: LD_INT 1
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 1
45043: NEG
45044: PUSH
45045: LD_INT 0
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: LD_INT 1
45054: NEG
45055: PUSH
45056: LD_INT 1
45058: NEG
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: PUSH
45064: EMPTY
45065: LIST
45066: LIST
45067: LIST
45068: LIST
45069: LIST
45070: LIST
45071: LIST
45072: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45073: LD_ADDR_VAR 0 61
45077: PUSH
45078: LD_INT 0
45080: PUSH
45081: LD_INT 0
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: PUSH
45088: LD_INT 0
45090: PUSH
45091: LD_INT 1
45093: NEG
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: PUSH
45099: LD_INT 1
45101: PUSH
45102: LD_INT 0
45104: PUSH
45105: EMPTY
45106: LIST
45107: LIST
45108: PUSH
45109: LD_INT 1
45111: PUSH
45112: LD_INT 1
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: PUSH
45119: LD_INT 0
45121: PUSH
45122: LD_INT 1
45124: PUSH
45125: EMPTY
45126: LIST
45127: LIST
45128: PUSH
45129: LD_INT 1
45131: NEG
45132: PUSH
45133: LD_INT 0
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PUSH
45140: LD_INT 1
45142: NEG
45143: PUSH
45144: LD_INT 1
45146: NEG
45147: PUSH
45148: EMPTY
45149: LIST
45150: LIST
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: LIST
45156: LIST
45157: LIST
45158: LIST
45159: LIST
45160: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45161: LD_ADDR_VAR 0 62
45165: PUSH
45166: LD_INT 0
45168: PUSH
45169: LD_INT 0
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: PUSH
45176: LD_INT 0
45178: PUSH
45179: LD_INT 1
45181: NEG
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: PUSH
45187: LD_INT 1
45189: PUSH
45190: LD_INT 0
45192: PUSH
45193: EMPTY
45194: LIST
45195: LIST
45196: PUSH
45197: LD_INT 1
45199: PUSH
45200: LD_INT 1
45202: PUSH
45203: EMPTY
45204: LIST
45205: LIST
45206: PUSH
45207: LD_INT 0
45209: PUSH
45210: LD_INT 1
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: PUSH
45217: LD_INT 1
45219: NEG
45220: PUSH
45221: LD_INT 0
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: PUSH
45228: LD_INT 1
45230: NEG
45231: PUSH
45232: LD_INT 1
45234: NEG
45235: PUSH
45236: EMPTY
45237: LIST
45238: LIST
45239: PUSH
45240: EMPTY
45241: LIST
45242: LIST
45243: LIST
45244: LIST
45245: LIST
45246: LIST
45247: LIST
45248: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45249: LD_ADDR_VAR 0 63
45253: PUSH
45254: LD_INT 0
45256: PUSH
45257: LD_INT 0
45259: PUSH
45260: EMPTY
45261: LIST
45262: LIST
45263: PUSH
45264: LD_INT 0
45266: PUSH
45267: LD_INT 1
45269: NEG
45270: PUSH
45271: EMPTY
45272: LIST
45273: LIST
45274: PUSH
45275: LD_INT 1
45277: PUSH
45278: LD_INT 0
45280: PUSH
45281: EMPTY
45282: LIST
45283: LIST
45284: PUSH
45285: LD_INT 1
45287: PUSH
45288: LD_INT 1
45290: PUSH
45291: EMPTY
45292: LIST
45293: LIST
45294: PUSH
45295: LD_INT 0
45297: PUSH
45298: LD_INT 1
45300: PUSH
45301: EMPTY
45302: LIST
45303: LIST
45304: PUSH
45305: LD_INT 1
45307: NEG
45308: PUSH
45309: LD_INT 0
45311: PUSH
45312: EMPTY
45313: LIST
45314: LIST
45315: PUSH
45316: LD_INT 1
45318: NEG
45319: PUSH
45320: LD_INT 1
45322: NEG
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45337: LD_ADDR_VAR 0 64
45341: PUSH
45342: LD_INT 0
45344: PUSH
45345: LD_INT 0
45347: PUSH
45348: EMPTY
45349: LIST
45350: LIST
45351: PUSH
45352: LD_INT 0
45354: PUSH
45355: LD_INT 1
45357: NEG
45358: PUSH
45359: EMPTY
45360: LIST
45361: LIST
45362: PUSH
45363: LD_INT 1
45365: PUSH
45366: LD_INT 0
45368: PUSH
45369: EMPTY
45370: LIST
45371: LIST
45372: PUSH
45373: LD_INT 1
45375: PUSH
45376: LD_INT 1
45378: PUSH
45379: EMPTY
45380: LIST
45381: LIST
45382: PUSH
45383: LD_INT 0
45385: PUSH
45386: LD_INT 1
45388: PUSH
45389: EMPTY
45390: LIST
45391: LIST
45392: PUSH
45393: LD_INT 1
45395: NEG
45396: PUSH
45397: LD_INT 0
45399: PUSH
45400: EMPTY
45401: LIST
45402: LIST
45403: PUSH
45404: LD_INT 1
45406: NEG
45407: PUSH
45408: LD_INT 1
45410: NEG
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: LIST
45420: LIST
45421: LIST
45422: LIST
45423: LIST
45424: ST_TO_ADDR
// end ; 1 :
45425: GO 51322
45427: LD_INT 1
45429: DOUBLE
45430: EQUAL
45431: IFTRUE 45435
45433: GO 48058
45435: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45436: LD_ADDR_VAR 0 11
45440: PUSH
45441: LD_INT 1
45443: NEG
45444: PUSH
45445: LD_INT 3
45447: NEG
45448: PUSH
45449: EMPTY
45450: LIST
45451: LIST
45452: PUSH
45453: LD_INT 0
45455: PUSH
45456: LD_INT 3
45458: NEG
45459: PUSH
45460: EMPTY
45461: LIST
45462: LIST
45463: PUSH
45464: LD_INT 1
45466: PUSH
45467: LD_INT 2
45469: NEG
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: LIST
45479: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45480: LD_ADDR_VAR 0 12
45484: PUSH
45485: LD_INT 2
45487: PUSH
45488: LD_INT 1
45490: NEG
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: PUSH
45496: LD_INT 3
45498: PUSH
45499: LD_INT 0
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: PUSH
45506: LD_INT 3
45508: PUSH
45509: LD_INT 1
45511: PUSH
45512: EMPTY
45513: LIST
45514: LIST
45515: PUSH
45516: EMPTY
45517: LIST
45518: LIST
45519: LIST
45520: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45521: LD_ADDR_VAR 0 13
45525: PUSH
45526: LD_INT 3
45528: PUSH
45529: LD_INT 2
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: PUSH
45536: LD_INT 3
45538: PUSH
45539: LD_INT 3
45541: PUSH
45542: EMPTY
45543: LIST
45544: LIST
45545: PUSH
45546: LD_INT 2
45548: PUSH
45549: LD_INT 3
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: LIST
45560: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45561: LD_ADDR_VAR 0 14
45565: PUSH
45566: LD_INT 1
45568: PUSH
45569: LD_INT 3
45571: PUSH
45572: EMPTY
45573: LIST
45574: LIST
45575: PUSH
45576: LD_INT 0
45578: PUSH
45579: LD_INT 3
45581: PUSH
45582: EMPTY
45583: LIST
45584: LIST
45585: PUSH
45586: LD_INT 1
45588: NEG
45589: PUSH
45590: LD_INT 2
45592: PUSH
45593: EMPTY
45594: LIST
45595: LIST
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: LIST
45601: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45602: LD_ADDR_VAR 0 15
45606: PUSH
45607: LD_INT 2
45609: NEG
45610: PUSH
45611: LD_INT 1
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: PUSH
45618: LD_INT 3
45620: NEG
45621: PUSH
45622: LD_INT 0
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: PUSH
45629: LD_INT 3
45631: NEG
45632: PUSH
45633: LD_INT 1
45635: NEG
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: PUSH
45641: EMPTY
45642: LIST
45643: LIST
45644: LIST
45645: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45646: LD_ADDR_VAR 0 16
45650: PUSH
45651: LD_INT 2
45653: NEG
45654: PUSH
45655: LD_INT 3
45657: NEG
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: PUSH
45663: LD_INT 3
45665: NEG
45666: PUSH
45667: LD_INT 2
45669: NEG
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: PUSH
45675: LD_INT 3
45677: NEG
45678: PUSH
45679: LD_INT 3
45681: NEG
45682: PUSH
45683: EMPTY
45684: LIST
45685: LIST
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: LIST
45691: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45692: LD_ADDR_VAR 0 17
45696: PUSH
45697: LD_INT 1
45699: NEG
45700: PUSH
45701: LD_INT 3
45703: NEG
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: PUSH
45709: LD_INT 0
45711: PUSH
45712: LD_INT 3
45714: NEG
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: PUSH
45720: LD_INT 1
45722: PUSH
45723: LD_INT 2
45725: NEG
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: LIST
45735: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45736: LD_ADDR_VAR 0 18
45740: PUSH
45741: LD_INT 2
45743: PUSH
45744: LD_INT 1
45746: NEG
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: PUSH
45752: LD_INT 3
45754: PUSH
45755: LD_INT 0
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PUSH
45762: LD_INT 3
45764: PUSH
45765: LD_INT 1
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: LIST
45776: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45777: LD_ADDR_VAR 0 19
45781: PUSH
45782: LD_INT 3
45784: PUSH
45785: LD_INT 2
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: PUSH
45792: LD_INT 3
45794: PUSH
45795: LD_INT 3
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: PUSH
45802: LD_INT 2
45804: PUSH
45805: LD_INT 3
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: LIST
45816: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45817: LD_ADDR_VAR 0 20
45821: PUSH
45822: LD_INT 1
45824: PUSH
45825: LD_INT 3
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: PUSH
45832: LD_INT 0
45834: PUSH
45835: LD_INT 3
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: PUSH
45842: LD_INT 1
45844: NEG
45845: PUSH
45846: LD_INT 2
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: LIST
45857: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45858: LD_ADDR_VAR 0 21
45862: PUSH
45863: LD_INT 2
45865: NEG
45866: PUSH
45867: LD_INT 1
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: PUSH
45874: LD_INT 3
45876: NEG
45877: PUSH
45878: LD_INT 0
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: LD_INT 3
45887: NEG
45888: PUSH
45889: LD_INT 1
45891: NEG
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: PUSH
45897: EMPTY
45898: LIST
45899: LIST
45900: LIST
45901: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45902: LD_ADDR_VAR 0 22
45906: PUSH
45907: LD_INT 2
45909: NEG
45910: PUSH
45911: LD_INT 3
45913: NEG
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: PUSH
45919: LD_INT 3
45921: NEG
45922: PUSH
45923: LD_INT 2
45925: NEG
45926: PUSH
45927: EMPTY
45928: LIST
45929: LIST
45930: PUSH
45931: LD_INT 3
45933: NEG
45934: PUSH
45935: LD_INT 3
45937: NEG
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: LIST
45947: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
45948: LD_ADDR_VAR 0 23
45952: PUSH
45953: LD_INT 0
45955: PUSH
45956: LD_INT 3
45958: NEG
45959: PUSH
45960: EMPTY
45961: LIST
45962: LIST
45963: PUSH
45964: LD_INT 1
45966: NEG
45967: PUSH
45968: LD_INT 4
45970: NEG
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: PUSH
45976: LD_INT 1
45978: PUSH
45979: LD_INT 3
45981: NEG
45982: PUSH
45983: EMPTY
45984: LIST
45985: LIST
45986: PUSH
45987: EMPTY
45988: LIST
45989: LIST
45990: LIST
45991: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
45992: LD_ADDR_VAR 0 24
45996: PUSH
45997: LD_INT 3
45999: PUSH
46000: LD_INT 0
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: PUSH
46007: LD_INT 3
46009: PUSH
46010: LD_INT 1
46012: NEG
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 4
46020: PUSH
46021: LD_INT 1
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: PUSH
46028: EMPTY
46029: LIST
46030: LIST
46031: LIST
46032: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
46033: LD_ADDR_VAR 0 25
46037: PUSH
46038: LD_INT 3
46040: PUSH
46041: LD_INT 3
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: PUSH
46048: LD_INT 4
46050: PUSH
46051: LD_INT 3
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: PUSH
46058: LD_INT 3
46060: PUSH
46061: LD_INT 4
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: LIST
46072: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
46073: LD_ADDR_VAR 0 26
46077: PUSH
46078: LD_INT 0
46080: PUSH
46081: LD_INT 3
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: PUSH
46088: LD_INT 1
46090: PUSH
46091: LD_INT 4
46093: PUSH
46094: EMPTY
46095: LIST
46096: LIST
46097: PUSH
46098: LD_INT 1
46100: NEG
46101: PUSH
46102: LD_INT 3
46104: PUSH
46105: EMPTY
46106: LIST
46107: LIST
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: LIST
46113: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
46114: LD_ADDR_VAR 0 27
46118: PUSH
46119: LD_INT 3
46121: NEG
46122: PUSH
46123: LD_INT 0
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 3
46132: NEG
46133: PUSH
46134: LD_INT 1
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 4
46143: NEG
46144: PUSH
46145: LD_INT 1
46147: NEG
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: EMPTY
46154: LIST
46155: LIST
46156: LIST
46157: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
46158: LD_ADDR_VAR 0 28
46162: PUSH
46163: LD_INT 3
46165: NEG
46166: PUSH
46167: LD_INT 3
46169: NEG
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: PUSH
46175: LD_INT 3
46177: NEG
46178: PUSH
46179: LD_INT 4
46181: NEG
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: PUSH
46187: LD_INT 4
46189: NEG
46190: PUSH
46191: LD_INT 3
46193: NEG
46194: PUSH
46195: EMPTY
46196: LIST
46197: LIST
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: LIST
46203: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
46204: LD_ADDR_VAR 0 29
46208: PUSH
46209: LD_INT 1
46211: NEG
46212: PUSH
46213: LD_INT 3
46215: NEG
46216: PUSH
46217: EMPTY
46218: LIST
46219: LIST
46220: PUSH
46221: LD_INT 0
46223: PUSH
46224: LD_INT 3
46226: NEG
46227: PUSH
46228: EMPTY
46229: LIST
46230: LIST
46231: PUSH
46232: LD_INT 1
46234: PUSH
46235: LD_INT 2
46237: NEG
46238: PUSH
46239: EMPTY
46240: LIST
46241: LIST
46242: PUSH
46243: LD_INT 1
46245: NEG
46246: PUSH
46247: LD_INT 4
46249: NEG
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: PUSH
46255: LD_INT 0
46257: PUSH
46258: LD_INT 4
46260: NEG
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: PUSH
46266: LD_INT 1
46268: PUSH
46269: LD_INT 3
46271: NEG
46272: PUSH
46273: EMPTY
46274: LIST
46275: LIST
46276: PUSH
46277: LD_INT 1
46279: NEG
46280: PUSH
46281: LD_INT 5
46283: NEG
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: PUSH
46289: LD_INT 0
46291: PUSH
46292: LD_INT 5
46294: NEG
46295: PUSH
46296: EMPTY
46297: LIST
46298: LIST
46299: PUSH
46300: LD_INT 1
46302: PUSH
46303: LD_INT 4
46305: NEG
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PUSH
46311: LD_INT 1
46313: NEG
46314: PUSH
46315: LD_INT 6
46317: NEG
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: PUSH
46323: LD_INT 0
46325: PUSH
46326: LD_INT 6
46328: NEG
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: PUSH
46334: LD_INT 1
46336: PUSH
46337: LD_INT 5
46339: NEG
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: LIST
46349: LIST
46350: LIST
46351: LIST
46352: LIST
46353: LIST
46354: LIST
46355: LIST
46356: LIST
46357: LIST
46358: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
46359: LD_ADDR_VAR 0 30
46363: PUSH
46364: LD_INT 2
46366: PUSH
46367: LD_INT 1
46369: NEG
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 3
46377: PUSH
46378: LD_INT 0
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: PUSH
46385: LD_INT 3
46387: PUSH
46388: LD_INT 1
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: LD_INT 3
46397: PUSH
46398: LD_INT 1
46400: NEG
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: PUSH
46406: LD_INT 4
46408: PUSH
46409: LD_INT 0
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: PUSH
46416: LD_INT 4
46418: PUSH
46419: LD_INT 1
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: PUSH
46426: LD_INT 4
46428: PUSH
46429: LD_INT 1
46431: NEG
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: LD_INT 5
46439: PUSH
46440: LD_INT 0
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: PUSH
46447: LD_INT 5
46449: PUSH
46450: LD_INT 1
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: LD_INT 5
46459: PUSH
46460: LD_INT 1
46462: NEG
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: PUSH
46468: LD_INT 6
46470: PUSH
46471: LD_INT 0
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 6
46480: PUSH
46481: LD_INT 1
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: LIST
46492: LIST
46493: LIST
46494: LIST
46495: LIST
46496: LIST
46497: LIST
46498: LIST
46499: LIST
46500: LIST
46501: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
46502: LD_ADDR_VAR 0 31
46506: PUSH
46507: LD_INT 3
46509: PUSH
46510: LD_INT 2
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: PUSH
46517: LD_INT 3
46519: PUSH
46520: LD_INT 3
46522: PUSH
46523: EMPTY
46524: LIST
46525: LIST
46526: PUSH
46527: LD_INT 2
46529: PUSH
46530: LD_INT 3
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: PUSH
46537: LD_INT 4
46539: PUSH
46540: LD_INT 3
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: PUSH
46547: LD_INT 4
46549: PUSH
46550: LD_INT 4
46552: PUSH
46553: EMPTY
46554: LIST
46555: LIST
46556: PUSH
46557: LD_INT 3
46559: PUSH
46560: LD_INT 4
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PUSH
46567: LD_INT 5
46569: PUSH
46570: LD_INT 4
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PUSH
46577: LD_INT 5
46579: PUSH
46580: LD_INT 5
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: PUSH
46587: LD_INT 4
46589: PUSH
46590: LD_INT 5
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: PUSH
46597: LD_INT 6
46599: PUSH
46600: LD_INT 5
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: PUSH
46607: LD_INT 6
46609: PUSH
46610: LD_INT 6
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: PUSH
46617: LD_INT 5
46619: PUSH
46620: LD_INT 6
46622: PUSH
46623: EMPTY
46624: LIST
46625: LIST
46626: PUSH
46627: EMPTY
46628: LIST
46629: LIST
46630: LIST
46631: LIST
46632: LIST
46633: LIST
46634: LIST
46635: LIST
46636: LIST
46637: LIST
46638: LIST
46639: LIST
46640: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
46641: LD_ADDR_VAR 0 32
46645: PUSH
46646: LD_INT 1
46648: PUSH
46649: LD_INT 3
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: PUSH
46656: LD_INT 0
46658: PUSH
46659: LD_INT 3
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PUSH
46666: LD_INT 1
46668: NEG
46669: PUSH
46670: LD_INT 2
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: LD_INT 1
46679: PUSH
46680: LD_INT 4
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 0
46689: PUSH
46690: LD_INT 4
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 1
46699: NEG
46700: PUSH
46701: LD_INT 3
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: PUSH
46708: LD_INT 1
46710: PUSH
46711: LD_INT 5
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: PUSH
46718: LD_INT 0
46720: PUSH
46721: LD_INT 5
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: LD_INT 1
46730: NEG
46731: PUSH
46732: LD_INT 4
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: PUSH
46739: LD_INT 1
46741: PUSH
46742: LD_INT 6
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: LD_INT 0
46751: PUSH
46752: LD_INT 6
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 1
46761: NEG
46762: PUSH
46763: LD_INT 5
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: LIST
46774: LIST
46775: LIST
46776: LIST
46777: LIST
46778: LIST
46779: LIST
46780: LIST
46781: LIST
46782: LIST
46783: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
46784: LD_ADDR_VAR 0 33
46788: PUSH
46789: LD_INT 2
46791: NEG
46792: PUSH
46793: LD_INT 1
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: PUSH
46800: LD_INT 3
46802: NEG
46803: PUSH
46804: LD_INT 0
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 3
46813: NEG
46814: PUSH
46815: LD_INT 1
46817: NEG
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: PUSH
46823: LD_INT 3
46825: NEG
46826: PUSH
46827: LD_INT 1
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PUSH
46834: LD_INT 4
46836: NEG
46837: PUSH
46838: LD_INT 0
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: PUSH
46845: LD_INT 4
46847: NEG
46848: PUSH
46849: LD_INT 1
46851: NEG
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: LD_INT 4
46859: NEG
46860: PUSH
46861: LD_INT 1
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: PUSH
46868: LD_INT 5
46870: NEG
46871: PUSH
46872: LD_INT 0
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: LD_INT 5
46881: NEG
46882: PUSH
46883: LD_INT 1
46885: NEG
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: PUSH
46891: LD_INT 5
46893: NEG
46894: PUSH
46895: LD_INT 1
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: PUSH
46902: LD_INT 6
46904: NEG
46905: PUSH
46906: LD_INT 0
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: PUSH
46913: LD_INT 6
46915: NEG
46916: PUSH
46917: LD_INT 1
46919: NEG
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PUSH
46925: EMPTY
46926: LIST
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: LIST
46937: LIST
46938: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
46939: LD_ADDR_VAR 0 34
46943: PUSH
46944: LD_INT 2
46946: NEG
46947: PUSH
46948: LD_INT 3
46950: NEG
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: LD_INT 3
46958: NEG
46959: PUSH
46960: LD_INT 2
46962: NEG
46963: PUSH
46964: EMPTY
46965: LIST
46966: LIST
46967: PUSH
46968: LD_INT 3
46970: NEG
46971: PUSH
46972: LD_INT 3
46974: NEG
46975: PUSH
46976: EMPTY
46977: LIST
46978: LIST
46979: PUSH
46980: LD_INT 3
46982: NEG
46983: PUSH
46984: LD_INT 4
46986: NEG
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: PUSH
46992: LD_INT 4
46994: NEG
46995: PUSH
46996: LD_INT 3
46998: NEG
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: PUSH
47004: LD_INT 4
47006: NEG
47007: PUSH
47008: LD_INT 4
47010: NEG
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: LD_INT 4
47018: NEG
47019: PUSH
47020: LD_INT 5
47022: NEG
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: PUSH
47028: LD_INT 5
47030: NEG
47031: PUSH
47032: LD_INT 4
47034: NEG
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: PUSH
47040: LD_INT 5
47042: NEG
47043: PUSH
47044: LD_INT 5
47046: NEG
47047: PUSH
47048: EMPTY
47049: LIST
47050: LIST
47051: PUSH
47052: LD_INT 5
47054: NEG
47055: PUSH
47056: LD_INT 6
47058: NEG
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: LD_INT 6
47066: NEG
47067: PUSH
47068: LD_INT 5
47070: NEG
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: PUSH
47076: LD_INT 6
47078: NEG
47079: PUSH
47080: LD_INT 6
47082: NEG
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: LIST
47092: LIST
47093: LIST
47094: LIST
47095: LIST
47096: LIST
47097: LIST
47098: LIST
47099: LIST
47100: LIST
47101: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
47102: LD_ADDR_VAR 0 41
47106: PUSH
47107: LD_INT 0
47109: PUSH
47110: LD_INT 2
47112: NEG
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: PUSH
47118: LD_INT 1
47120: NEG
47121: PUSH
47122: LD_INT 3
47124: NEG
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: PUSH
47130: LD_INT 1
47132: PUSH
47133: LD_INT 2
47135: NEG
47136: PUSH
47137: EMPTY
47138: LIST
47139: LIST
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: LIST
47145: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
47146: LD_ADDR_VAR 0 42
47150: PUSH
47151: LD_INT 2
47153: PUSH
47154: LD_INT 0
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: PUSH
47161: LD_INT 2
47163: PUSH
47164: LD_INT 1
47166: NEG
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: PUSH
47172: LD_INT 3
47174: PUSH
47175: LD_INT 1
47177: PUSH
47178: EMPTY
47179: LIST
47180: LIST
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: LIST
47186: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
47187: LD_ADDR_VAR 0 43
47191: PUSH
47192: LD_INT 2
47194: PUSH
47195: LD_INT 2
47197: PUSH
47198: EMPTY
47199: LIST
47200: LIST
47201: PUSH
47202: LD_INT 3
47204: PUSH
47205: LD_INT 2
47207: PUSH
47208: EMPTY
47209: LIST
47210: LIST
47211: PUSH
47212: LD_INT 2
47214: PUSH
47215: LD_INT 3
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: LIST
47226: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
47227: LD_ADDR_VAR 0 44
47231: PUSH
47232: LD_INT 0
47234: PUSH
47235: LD_INT 2
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: LD_INT 1
47244: PUSH
47245: LD_INT 3
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: LD_INT 1
47254: NEG
47255: PUSH
47256: LD_INT 2
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: LIST
47267: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47268: LD_ADDR_VAR 0 45
47272: PUSH
47273: LD_INT 2
47275: NEG
47276: PUSH
47277: LD_INT 0
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: PUSH
47284: LD_INT 2
47286: NEG
47287: PUSH
47288: LD_INT 1
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: PUSH
47295: LD_INT 3
47297: NEG
47298: PUSH
47299: LD_INT 1
47301: NEG
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: LIST
47311: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
47312: LD_ADDR_VAR 0 46
47316: PUSH
47317: LD_INT 2
47319: NEG
47320: PUSH
47321: LD_INT 2
47323: NEG
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: PUSH
47329: LD_INT 2
47331: NEG
47332: PUSH
47333: LD_INT 3
47335: NEG
47336: PUSH
47337: EMPTY
47338: LIST
47339: LIST
47340: PUSH
47341: LD_INT 3
47343: NEG
47344: PUSH
47345: LD_INT 2
47347: NEG
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: LIST
47357: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
47358: LD_ADDR_VAR 0 47
47362: PUSH
47363: LD_INT 2
47365: NEG
47366: PUSH
47367: LD_INT 3
47369: NEG
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: PUSH
47375: LD_INT 1
47377: NEG
47378: PUSH
47379: LD_INT 3
47381: NEG
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47391: LD_ADDR_VAR 0 48
47395: PUSH
47396: LD_INT 1
47398: PUSH
47399: LD_INT 2
47401: NEG
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: PUSH
47407: LD_INT 2
47409: PUSH
47410: LD_INT 1
47412: NEG
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
47422: LD_ADDR_VAR 0 49
47426: PUSH
47427: LD_INT 3
47429: PUSH
47430: LD_INT 1
47432: PUSH
47433: EMPTY
47434: LIST
47435: LIST
47436: PUSH
47437: LD_INT 3
47439: PUSH
47440: LD_INT 2
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
47451: LD_ADDR_VAR 0 50
47455: PUSH
47456: LD_INT 2
47458: PUSH
47459: LD_INT 3
47461: PUSH
47462: EMPTY
47463: LIST
47464: LIST
47465: PUSH
47466: LD_INT 1
47468: PUSH
47469: LD_INT 3
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47480: LD_ADDR_VAR 0 51
47484: PUSH
47485: LD_INT 1
47487: NEG
47488: PUSH
47489: LD_INT 2
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: LD_INT 2
47498: NEG
47499: PUSH
47500: LD_INT 1
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: PUSH
47507: EMPTY
47508: LIST
47509: LIST
47510: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47511: LD_ADDR_VAR 0 52
47515: PUSH
47516: LD_INT 3
47518: NEG
47519: PUSH
47520: LD_INT 1
47522: NEG
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: LD_INT 3
47530: NEG
47531: PUSH
47532: LD_INT 2
47534: NEG
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47544: LD_ADDR_VAR 0 53
47548: PUSH
47549: LD_INT 1
47551: NEG
47552: PUSH
47553: LD_INT 3
47555: NEG
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: LD_INT 0
47563: PUSH
47564: LD_INT 3
47566: NEG
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: PUSH
47572: LD_INT 1
47574: PUSH
47575: LD_INT 2
47577: NEG
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: LIST
47587: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47588: LD_ADDR_VAR 0 54
47592: PUSH
47593: LD_INT 2
47595: PUSH
47596: LD_INT 1
47598: NEG
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: PUSH
47604: LD_INT 3
47606: PUSH
47607: LD_INT 0
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PUSH
47614: LD_INT 3
47616: PUSH
47617: LD_INT 1
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: LIST
47628: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47629: LD_ADDR_VAR 0 55
47633: PUSH
47634: LD_INT 3
47636: PUSH
47637: LD_INT 2
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: PUSH
47644: LD_INT 3
47646: PUSH
47647: LD_INT 3
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: LD_INT 2
47656: PUSH
47657: LD_INT 3
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: LIST
47668: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47669: LD_ADDR_VAR 0 56
47673: PUSH
47674: LD_INT 1
47676: PUSH
47677: LD_INT 3
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: LD_INT 0
47686: PUSH
47687: LD_INT 3
47689: PUSH
47690: EMPTY
47691: LIST
47692: LIST
47693: PUSH
47694: LD_INT 1
47696: NEG
47697: PUSH
47698: LD_INT 2
47700: PUSH
47701: EMPTY
47702: LIST
47703: LIST
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: LIST
47709: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47710: LD_ADDR_VAR 0 57
47714: PUSH
47715: LD_INT 2
47717: NEG
47718: PUSH
47719: LD_INT 1
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: PUSH
47726: LD_INT 3
47728: NEG
47729: PUSH
47730: LD_INT 0
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: PUSH
47737: LD_INT 3
47739: NEG
47740: PUSH
47741: LD_INT 1
47743: NEG
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: PUSH
47749: EMPTY
47750: LIST
47751: LIST
47752: LIST
47753: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47754: LD_ADDR_VAR 0 58
47758: PUSH
47759: LD_INT 2
47761: NEG
47762: PUSH
47763: LD_INT 3
47765: NEG
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 3
47773: NEG
47774: PUSH
47775: LD_INT 2
47777: NEG
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: PUSH
47783: LD_INT 3
47785: NEG
47786: PUSH
47787: LD_INT 3
47789: NEG
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: LIST
47799: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
47800: LD_ADDR_VAR 0 59
47804: PUSH
47805: LD_INT 1
47807: NEG
47808: PUSH
47809: LD_INT 2
47811: NEG
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 0
47819: PUSH
47820: LD_INT 2
47822: NEG
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: PUSH
47828: LD_INT 1
47830: PUSH
47831: LD_INT 1
47833: NEG
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: LIST
47843: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
47844: LD_ADDR_VAR 0 60
47848: PUSH
47849: LD_INT 1
47851: PUSH
47852: LD_INT 1
47854: NEG
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: PUSH
47860: LD_INT 2
47862: PUSH
47863: LD_INT 0
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: PUSH
47870: LD_INT 2
47872: PUSH
47873: LD_INT 1
47875: PUSH
47876: EMPTY
47877: LIST
47878: LIST
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: LIST
47884: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
47885: LD_ADDR_VAR 0 61
47889: PUSH
47890: LD_INT 2
47892: PUSH
47893: LD_INT 1
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: PUSH
47900: LD_INT 2
47902: PUSH
47903: LD_INT 2
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: PUSH
47910: LD_INT 1
47912: PUSH
47913: LD_INT 2
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: LIST
47924: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
47925: LD_ADDR_VAR 0 62
47929: PUSH
47930: LD_INT 1
47932: PUSH
47933: LD_INT 2
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PUSH
47940: LD_INT 0
47942: PUSH
47943: LD_INT 2
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: PUSH
47950: LD_INT 1
47952: NEG
47953: PUSH
47954: LD_INT 1
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: LIST
47965: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
47966: LD_ADDR_VAR 0 63
47970: PUSH
47971: LD_INT 1
47973: NEG
47974: PUSH
47975: LD_INT 1
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PUSH
47982: LD_INT 2
47984: NEG
47985: PUSH
47986: LD_INT 0
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: PUSH
47993: LD_INT 2
47995: NEG
47996: PUSH
47997: LD_INT 1
47999: NEG
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: LIST
48009: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48010: LD_ADDR_VAR 0 64
48014: PUSH
48015: LD_INT 1
48017: NEG
48018: PUSH
48019: LD_INT 2
48021: NEG
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: PUSH
48027: LD_INT 2
48029: NEG
48030: PUSH
48031: LD_INT 1
48033: NEG
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: PUSH
48039: LD_INT 2
48041: NEG
48042: PUSH
48043: LD_INT 2
48045: NEG
48046: PUSH
48047: EMPTY
48048: LIST
48049: LIST
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: LIST
48055: ST_TO_ADDR
// end ; 2 :
48056: GO 51322
48058: LD_INT 2
48060: DOUBLE
48061: EQUAL
48062: IFTRUE 48066
48064: GO 51321
48066: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
48067: LD_ADDR_VAR 0 29
48071: PUSH
48072: LD_INT 4
48074: PUSH
48075: LD_INT 0
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: PUSH
48082: LD_INT 4
48084: PUSH
48085: LD_INT 1
48087: NEG
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: PUSH
48093: LD_INT 5
48095: PUSH
48096: LD_INT 0
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: PUSH
48103: LD_INT 5
48105: PUSH
48106: LD_INT 1
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 4
48115: PUSH
48116: LD_INT 1
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 3
48125: PUSH
48126: LD_INT 0
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 3
48135: PUSH
48136: LD_INT 1
48138: NEG
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 3
48146: PUSH
48147: LD_INT 2
48149: NEG
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PUSH
48155: LD_INT 5
48157: PUSH
48158: LD_INT 2
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: PUSH
48165: LD_INT 3
48167: PUSH
48168: LD_INT 3
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: PUSH
48175: LD_INT 3
48177: PUSH
48178: LD_INT 2
48180: PUSH
48181: EMPTY
48182: LIST
48183: LIST
48184: PUSH
48185: LD_INT 4
48187: PUSH
48188: LD_INT 3
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: PUSH
48195: LD_INT 4
48197: PUSH
48198: LD_INT 4
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: PUSH
48205: LD_INT 3
48207: PUSH
48208: LD_INT 4
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: LD_INT 2
48217: PUSH
48218: LD_INT 3
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: PUSH
48225: LD_INT 2
48227: PUSH
48228: LD_INT 2
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: PUSH
48235: LD_INT 4
48237: PUSH
48238: LD_INT 2
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: PUSH
48245: LD_INT 2
48247: PUSH
48248: LD_INT 4
48250: PUSH
48251: EMPTY
48252: LIST
48253: LIST
48254: PUSH
48255: LD_INT 0
48257: PUSH
48258: LD_INT 4
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: PUSH
48265: LD_INT 0
48267: PUSH
48268: LD_INT 3
48270: PUSH
48271: EMPTY
48272: LIST
48273: LIST
48274: PUSH
48275: LD_INT 1
48277: PUSH
48278: LD_INT 4
48280: PUSH
48281: EMPTY
48282: LIST
48283: LIST
48284: PUSH
48285: LD_INT 1
48287: PUSH
48288: LD_INT 5
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: PUSH
48295: LD_INT 0
48297: PUSH
48298: LD_INT 5
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: PUSH
48305: LD_INT 1
48307: NEG
48308: PUSH
48309: LD_INT 4
48311: PUSH
48312: EMPTY
48313: LIST
48314: LIST
48315: PUSH
48316: LD_INT 1
48318: NEG
48319: PUSH
48320: LD_INT 3
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: PUSH
48327: LD_INT 2
48329: PUSH
48330: LD_INT 5
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: LD_INT 2
48339: NEG
48340: PUSH
48341: LD_INT 3
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: LD_INT 3
48350: NEG
48351: PUSH
48352: LD_INT 0
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: PUSH
48359: LD_INT 3
48361: NEG
48362: PUSH
48363: LD_INT 1
48365: NEG
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: LD_INT 2
48373: NEG
48374: PUSH
48375: LD_INT 0
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: PUSH
48382: LD_INT 2
48384: NEG
48385: PUSH
48386: LD_INT 1
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: PUSH
48393: LD_INT 3
48395: NEG
48396: PUSH
48397: LD_INT 1
48399: PUSH
48400: EMPTY
48401: LIST
48402: LIST
48403: PUSH
48404: LD_INT 4
48406: NEG
48407: PUSH
48408: LD_INT 0
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PUSH
48415: LD_INT 4
48417: NEG
48418: PUSH
48419: LD_INT 1
48421: NEG
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: LD_INT 4
48429: NEG
48430: PUSH
48431: LD_INT 2
48433: NEG
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: PUSH
48439: LD_INT 2
48441: NEG
48442: PUSH
48443: LD_INT 2
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: PUSH
48450: LD_INT 4
48452: NEG
48453: PUSH
48454: LD_INT 4
48456: NEG
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: PUSH
48462: LD_INT 4
48464: NEG
48465: PUSH
48466: LD_INT 5
48468: NEG
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: LD_INT 3
48476: NEG
48477: PUSH
48478: LD_INT 4
48480: NEG
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 3
48488: NEG
48489: PUSH
48490: LD_INT 3
48492: NEG
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: PUSH
48498: LD_INT 4
48500: NEG
48501: PUSH
48502: LD_INT 3
48504: NEG
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PUSH
48510: LD_INT 5
48512: NEG
48513: PUSH
48514: LD_INT 4
48516: NEG
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: LD_INT 5
48524: NEG
48525: PUSH
48526: LD_INT 5
48528: NEG
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: LD_INT 3
48536: NEG
48537: PUSH
48538: LD_INT 5
48540: NEG
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: PUSH
48546: LD_INT 5
48548: NEG
48549: PUSH
48550: LD_INT 3
48552: NEG
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: LIST
48562: LIST
48563: LIST
48564: LIST
48565: LIST
48566: LIST
48567: LIST
48568: LIST
48569: LIST
48570: LIST
48571: LIST
48572: LIST
48573: LIST
48574: LIST
48575: LIST
48576: LIST
48577: LIST
48578: LIST
48579: LIST
48580: LIST
48581: LIST
48582: LIST
48583: LIST
48584: LIST
48585: LIST
48586: LIST
48587: LIST
48588: LIST
48589: LIST
48590: LIST
48591: LIST
48592: LIST
48593: LIST
48594: LIST
48595: LIST
48596: LIST
48597: LIST
48598: LIST
48599: LIST
48600: LIST
48601: LIST
48602: LIST
48603: LIST
48604: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
48605: LD_ADDR_VAR 0 30
48609: PUSH
48610: LD_INT 4
48612: PUSH
48613: LD_INT 4
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: PUSH
48620: LD_INT 4
48622: PUSH
48623: LD_INT 3
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: PUSH
48630: LD_INT 5
48632: PUSH
48633: LD_INT 4
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 5
48642: PUSH
48643: LD_INT 5
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 4
48652: PUSH
48653: LD_INT 5
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: LD_INT 3
48662: PUSH
48663: LD_INT 4
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: LD_INT 3
48672: PUSH
48673: LD_INT 3
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: PUSH
48680: LD_INT 5
48682: PUSH
48683: LD_INT 3
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: PUSH
48690: LD_INT 3
48692: PUSH
48693: LD_INT 5
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: PUSH
48700: LD_INT 0
48702: PUSH
48703: LD_INT 3
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: PUSH
48710: LD_INT 0
48712: PUSH
48713: LD_INT 2
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: PUSH
48720: LD_INT 1
48722: PUSH
48723: LD_INT 3
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: PUSH
48730: LD_INT 1
48732: PUSH
48733: LD_INT 4
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: LD_INT 0
48742: PUSH
48743: LD_INT 4
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: PUSH
48750: LD_INT 1
48752: NEG
48753: PUSH
48754: LD_INT 3
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: PUSH
48761: LD_INT 1
48763: NEG
48764: PUSH
48765: LD_INT 2
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: PUSH
48772: LD_INT 2
48774: PUSH
48775: LD_INT 4
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: LD_INT 2
48784: NEG
48785: PUSH
48786: LD_INT 2
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: PUSH
48793: LD_INT 4
48795: NEG
48796: PUSH
48797: LD_INT 0
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: LD_INT 4
48806: NEG
48807: PUSH
48808: LD_INT 1
48810: NEG
48811: PUSH
48812: EMPTY
48813: LIST
48814: LIST
48815: PUSH
48816: LD_INT 3
48818: NEG
48819: PUSH
48820: LD_INT 0
48822: PUSH
48823: EMPTY
48824: LIST
48825: LIST
48826: PUSH
48827: LD_INT 3
48829: NEG
48830: PUSH
48831: LD_INT 1
48833: PUSH
48834: EMPTY
48835: LIST
48836: LIST
48837: PUSH
48838: LD_INT 4
48840: NEG
48841: PUSH
48842: LD_INT 1
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: PUSH
48849: LD_INT 5
48851: NEG
48852: PUSH
48853: LD_INT 0
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: LD_INT 5
48862: NEG
48863: PUSH
48864: LD_INT 1
48866: NEG
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: PUSH
48872: LD_INT 5
48874: NEG
48875: PUSH
48876: LD_INT 2
48878: NEG
48879: PUSH
48880: EMPTY
48881: LIST
48882: LIST
48883: PUSH
48884: LD_INT 3
48886: NEG
48887: PUSH
48888: LD_INT 2
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: LD_INT 3
48897: NEG
48898: PUSH
48899: LD_INT 3
48901: NEG
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: PUSH
48907: LD_INT 3
48909: NEG
48910: PUSH
48911: LD_INT 4
48913: NEG
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 2
48921: NEG
48922: PUSH
48923: LD_INT 3
48925: NEG
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 2
48933: NEG
48934: PUSH
48935: LD_INT 2
48937: NEG
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: PUSH
48943: LD_INT 3
48945: NEG
48946: PUSH
48947: LD_INT 2
48949: NEG
48950: PUSH
48951: EMPTY
48952: LIST
48953: LIST
48954: PUSH
48955: LD_INT 4
48957: NEG
48958: PUSH
48959: LD_INT 3
48961: NEG
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PUSH
48967: LD_INT 4
48969: NEG
48970: PUSH
48971: LD_INT 4
48973: NEG
48974: PUSH
48975: EMPTY
48976: LIST
48977: LIST
48978: PUSH
48979: LD_INT 2
48981: NEG
48982: PUSH
48983: LD_INT 4
48985: NEG
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: PUSH
48991: LD_INT 4
48993: NEG
48994: PUSH
48995: LD_INT 2
48997: NEG
48998: PUSH
48999: EMPTY
49000: LIST
49001: LIST
49002: PUSH
49003: LD_INT 0
49005: PUSH
49006: LD_INT 4
49008: NEG
49009: PUSH
49010: EMPTY
49011: LIST
49012: LIST
49013: PUSH
49014: LD_INT 0
49016: PUSH
49017: LD_INT 5
49019: NEG
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: PUSH
49025: LD_INT 1
49027: PUSH
49028: LD_INT 4
49030: NEG
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 1
49038: PUSH
49039: LD_INT 3
49041: NEG
49042: PUSH
49043: EMPTY
49044: LIST
49045: LIST
49046: PUSH
49047: LD_INT 0
49049: PUSH
49050: LD_INT 3
49052: NEG
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 1
49060: NEG
49061: PUSH
49062: LD_INT 4
49064: NEG
49065: PUSH
49066: EMPTY
49067: LIST
49068: LIST
49069: PUSH
49070: LD_INT 1
49072: NEG
49073: PUSH
49074: LD_INT 5
49076: NEG
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: PUSH
49082: LD_INT 2
49084: PUSH
49085: LD_INT 3
49087: NEG
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: PUSH
49093: LD_INT 2
49095: NEG
49096: PUSH
49097: LD_INT 5
49099: NEG
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: LIST
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: LIST
49147: LIST
49148: LIST
49149: LIST
49150: LIST
49151: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
49152: LD_ADDR_VAR 0 31
49156: PUSH
49157: LD_INT 0
49159: PUSH
49160: LD_INT 4
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: PUSH
49167: LD_INT 0
49169: PUSH
49170: LD_INT 3
49172: PUSH
49173: EMPTY
49174: LIST
49175: LIST
49176: PUSH
49177: LD_INT 1
49179: PUSH
49180: LD_INT 4
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 1
49189: PUSH
49190: LD_INT 5
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 0
49199: PUSH
49200: LD_INT 5
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: PUSH
49207: LD_INT 1
49209: NEG
49210: PUSH
49211: LD_INT 4
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 1
49220: NEG
49221: PUSH
49222: LD_INT 3
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: LD_INT 2
49231: PUSH
49232: LD_INT 5
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: LD_INT 2
49241: NEG
49242: PUSH
49243: LD_INT 3
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: PUSH
49250: LD_INT 3
49252: NEG
49253: PUSH
49254: LD_INT 0
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: LD_INT 3
49263: NEG
49264: PUSH
49265: LD_INT 1
49267: NEG
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: LD_INT 2
49275: NEG
49276: PUSH
49277: LD_INT 0
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 2
49286: NEG
49287: PUSH
49288: LD_INT 1
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: LD_INT 3
49297: NEG
49298: PUSH
49299: LD_INT 1
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: LD_INT 4
49308: NEG
49309: PUSH
49310: LD_INT 0
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: LD_INT 4
49319: NEG
49320: PUSH
49321: LD_INT 1
49323: NEG
49324: PUSH
49325: EMPTY
49326: LIST
49327: LIST
49328: PUSH
49329: LD_INT 4
49331: NEG
49332: PUSH
49333: LD_INT 2
49335: NEG
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: PUSH
49341: LD_INT 2
49343: NEG
49344: PUSH
49345: LD_INT 2
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: PUSH
49352: LD_INT 4
49354: NEG
49355: PUSH
49356: LD_INT 4
49358: NEG
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: PUSH
49364: LD_INT 4
49366: NEG
49367: PUSH
49368: LD_INT 5
49370: NEG
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: PUSH
49376: LD_INT 3
49378: NEG
49379: PUSH
49380: LD_INT 4
49382: NEG
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PUSH
49388: LD_INT 3
49390: NEG
49391: PUSH
49392: LD_INT 3
49394: NEG
49395: PUSH
49396: EMPTY
49397: LIST
49398: LIST
49399: PUSH
49400: LD_INT 4
49402: NEG
49403: PUSH
49404: LD_INT 3
49406: NEG
49407: PUSH
49408: EMPTY
49409: LIST
49410: LIST
49411: PUSH
49412: LD_INT 5
49414: NEG
49415: PUSH
49416: LD_INT 4
49418: NEG
49419: PUSH
49420: EMPTY
49421: LIST
49422: LIST
49423: PUSH
49424: LD_INT 5
49426: NEG
49427: PUSH
49428: LD_INT 5
49430: NEG
49431: PUSH
49432: EMPTY
49433: LIST
49434: LIST
49435: PUSH
49436: LD_INT 3
49438: NEG
49439: PUSH
49440: LD_INT 5
49442: NEG
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 5
49450: NEG
49451: PUSH
49452: LD_INT 3
49454: NEG
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: PUSH
49460: LD_INT 0
49462: PUSH
49463: LD_INT 3
49465: NEG
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PUSH
49471: LD_INT 0
49473: PUSH
49474: LD_INT 4
49476: NEG
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 1
49484: PUSH
49485: LD_INT 3
49487: NEG
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: PUSH
49493: LD_INT 1
49495: PUSH
49496: LD_INT 2
49498: NEG
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: PUSH
49504: LD_INT 0
49506: PUSH
49507: LD_INT 2
49509: NEG
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: PUSH
49515: LD_INT 1
49517: NEG
49518: PUSH
49519: LD_INT 3
49521: NEG
49522: PUSH
49523: EMPTY
49524: LIST
49525: LIST
49526: PUSH
49527: LD_INT 1
49529: NEG
49530: PUSH
49531: LD_INT 4
49533: NEG
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: LD_INT 2
49541: PUSH
49542: LD_INT 2
49544: NEG
49545: PUSH
49546: EMPTY
49547: LIST
49548: LIST
49549: PUSH
49550: LD_INT 2
49552: NEG
49553: PUSH
49554: LD_INT 4
49556: NEG
49557: PUSH
49558: EMPTY
49559: LIST
49560: LIST
49561: PUSH
49562: LD_INT 4
49564: PUSH
49565: LD_INT 0
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: PUSH
49572: LD_INT 4
49574: PUSH
49575: LD_INT 1
49577: NEG
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 5
49585: PUSH
49586: LD_INT 0
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: LD_INT 5
49595: PUSH
49596: LD_INT 1
49598: PUSH
49599: EMPTY
49600: LIST
49601: LIST
49602: PUSH
49603: LD_INT 4
49605: PUSH
49606: LD_INT 1
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: PUSH
49613: LD_INT 3
49615: PUSH
49616: LD_INT 0
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: PUSH
49623: LD_INT 3
49625: PUSH
49626: LD_INT 1
49628: NEG
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: LD_INT 3
49636: PUSH
49637: LD_INT 2
49639: NEG
49640: PUSH
49641: EMPTY
49642: LIST
49643: LIST
49644: PUSH
49645: LD_INT 5
49647: PUSH
49648: LD_INT 2
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: LIST
49659: LIST
49660: LIST
49661: LIST
49662: LIST
49663: LIST
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: LIST
49682: LIST
49683: LIST
49684: LIST
49685: LIST
49686: LIST
49687: LIST
49688: LIST
49689: LIST
49690: LIST
49691: LIST
49692: LIST
49693: LIST
49694: LIST
49695: LIST
49696: LIST
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
49702: LD_ADDR_VAR 0 32
49706: PUSH
49707: LD_INT 4
49709: NEG
49710: PUSH
49711: LD_INT 0
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 4
49720: NEG
49721: PUSH
49722: LD_INT 1
49724: NEG
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: PUSH
49730: LD_INT 3
49732: NEG
49733: PUSH
49734: LD_INT 0
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PUSH
49741: LD_INT 3
49743: NEG
49744: PUSH
49745: LD_INT 1
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 4
49754: NEG
49755: PUSH
49756: LD_INT 1
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 5
49765: NEG
49766: PUSH
49767: LD_INT 0
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: LD_INT 5
49776: NEG
49777: PUSH
49778: LD_INT 1
49780: NEG
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 5
49788: NEG
49789: PUSH
49790: LD_INT 2
49792: NEG
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: PUSH
49798: LD_INT 3
49800: NEG
49801: PUSH
49802: LD_INT 2
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: PUSH
49809: LD_INT 3
49811: NEG
49812: PUSH
49813: LD_INT 3
49815: NEG
49816: PUSH
49817: EMPTY
49818: LIST
49819: LIST
49820: PUSH
49821: LD_INT 3
49823: NEG
49824: PUSH
49825: LD_INT 4
49827: NEG
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: PUSH
49833: LD_INT 2
49835: NEG
49836: PUSH
49837: LD_INT 3
49839: NEG
49840: PUSH
49841: EMPTY
49842: LIST
49843: LIST
49844: PUSH
49845: LD_INT 2
49847: NEG
49848: PUSH
49849: LD_INT 2
49851: NEG
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: PUSH
49857: LD_INT 3
49859: NEG
49860: PUSH
49861: LD_INT 2
49863: NEG
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: PUSH
49869: LD_INT 4
49871: NEG
49872: PUSH
49873: LD_INT 3
49875: NEG
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 4
49883: NEG
49884: PUSH
49885: LD_INT 4
49887: NEG
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: LD_INT 2
49895: NEG
49896: PUSH
49897: LD_INT 4
49899: NEG
49900: PUSH
49901: EMPTY
49902: LIST
49903: LIST
49904: PUSH
49905: LD_INT 4
49907: NEG
49908: PUSH
49909: LD_INT 2
49911: NEG
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: PUSH
49917: LD_INT 0
49919: PUSH
49920: LD_INT 4
49922: NEG
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: PUSH
49928: LD_INT 0
49930: PUSH
49931: LD_INT 5
49933: NEG
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: LD_INT 1
49941: PUSH
49942: LD_INT 4
49944: NEG
49945: PUSH
49946: EMPTY
49947: LIST
49948: LIST
49949: PUSH
49950: LD_INT 1
49952: PUSH
49953: LD_INT 3
49955: NEG
49956: PUSH
49957: EMPTY
49958: LIST
49959: LIST
49960: PUSH
49961: LD_INT 0
49963: PUSH
49964: LD_INT 3
49966: NEG
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: LD_INT 1
49974: NEG
49975: PUSH
49976: LD_INT 4
49978: NEG
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: PUSH
49984: LD_INT 1
49986: NEG
49987: PUSH
49988: LD_INT 5
49990: NEG
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: PUSH
49996: LD_INT 2
49998: PUSH
49999: LD_INT 3
50001: NEG
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: PUSH
50007: LD_INT 2
50009: NEG
50010: PUSH
50011: LD_INT 5
50013: NEG
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 3
50021: PUSH
50022: LD_INT 0
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: LD_INT 3
50031: PUSH
50032: LD_INT 1
50034: NEG
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: PUSH
50040: LD_INT 4
50042: PUSH
50043: LD_INT 0
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 4
50052: PUSH
50053: LD_INT 1
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 3
50062: PUSH
50063: LD_INT 1
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 2
50072: PUSH
50073: LD_INT 0
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: LD_INT 2
50082: PUSH
50083: LD_INT 1
50085: NEG
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: PUSH
50091: LD_INT 2
50093: PUSH
50094: LD_INT 2
50096: NEG
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PUSH
50102: LD_INT 4
50104: PUSH
50105: LD_INT 2
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: PUSH
50112: LD_INT 4
50114: PUSH
50115: LD_INT 4
50117: PUSH
50118: EMPTY
50119: LIST
50120: LIST
50121: PUSH
50122: LD_INT 4
50124: PUSH
50125: LD_INT 3
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: PUSH
50132: LD_INT 5
50134: PUSH
50135: LD_INT 4
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: PUSH
50142: LD_INT 5
50144: PUSH
50145: LD_INT 5
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: PUSH
50152: LD_INT 4
50154: PUSH
50155: LD_INT 5
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: PUSH
50162: LD_INT 3
50164: PUSH
50165: LD_INT 4
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 3
50174: PUSH
50175: LD_INT 3
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: LD_INT 5
50184: PUSH
50185: LD_INT 3
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: PUSH
50192: LD_INT 3
50194: PUSH
50195: LD_INT 5
50197: PUSH
50198: EMPTY
50199: LIST
50200: LIST
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: LIST
50211: LIST
50212: LIST
50213: LIST
50214: LIST
50215: LIST
50216: LIST
50217: LIST
50218: LIST
50219: LIST
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: LIST
50234: LIST
50235: LIST
50236: LIST
50237: LIST
50238: LIST
50239: LIST
50240: LIST
50241: LIST
50242: LIST
50243: LIST
50244: LIST
50245: LIST
50246: LIST
50247: LIST
50248: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
50249: LD_ADDR_VAR 0 33
50253: PUSH
50254: LD_INT 4
50256: NEG
50257: PUSH
50258: LD_INT 4
50260: NEG
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: PUSH
50266: LD_INT 4
50268: NEG
50269: PUSH
50270: LD_INT 5
50272: NEG
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: PUSH
50278: LD_INT 3
50280: NEG
50281: PUSH
50282: LD_INT 4
50284: NEG
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 3
50292: NEG
50293: PUSH
50294: LD_INT 3
50296: NEG
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 4
50304: NEG
50305: PUSH
50306: LD_INT 3
50308: NEG
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: PUSH
50314: LD_INT 5
50316: NEG
50317: PUSH
50318: LD_INT 4
50320: NEG
50321: PUSH
50322: EMPTY
50323: LIST
50324: LIST
50325: PUSH
50326: LD_INT 5
50328: NEG
50329: PUSH
50330: LD_INT 5
50332: NEG
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 3
50340: NEG
50341: PUSH
50342: LD_INT 5
50344: NEG
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: LD_INT 5
50352: NEG
50353: PUSH
50354: LD_INT 3
50356: NEG
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: LD_INT 0
50364: PUSH
50365: LD_INT 3
50367: NEG
50368: PUSH
50369: EMPTY
50370: LIST
50371: LIST
50372: PUSH
50373: LD_INT 0
50375: PUSH
50376: LD_INT 4
50378: NEG
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PUSH
50384: LD_INT 1
50386: PUSH
50387: LD_INT 3
50389: NEG
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: LD_INT 1
50397: PUSH
50398: LD_INT 2
50400: NEG
50401: PUSH
50402: EMPTY
50403: LIST
50404: LIST
50405: PUSH
50406: LD_INT 0
50408: PUSH
50409: LD_INT 2
50411: NEG
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PUSH
50417: LD_INT 1
50419: NEG
50420: PUSH
50421: LD_INT 3
50423: NEG
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 1
50431: NEG
50432: PUSH
50433: LD_INT 4
50435: NEG
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: LD_INT 2
50443: PUSH
50444: LD_INT 2
50446: NEG
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: PUSH
50452: LD_INT 2
50454: NEG
50455: PUSH
50456: LD_INT 4
50458: NEG
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PUSH
50464: LD_INT 4
50466: PUSH
50467: LD_INT 0
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: PUSH
50474: LD_INT 4
50476: PUSH
50477: LD_INT 1
50479: NEG
50480: PUSH
50481: EMPTY
50482: LIST
50483: LIST
50484: PUSH
50485: LD_INT 5
50487: PUSH
50488: LD_INT 0
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: LD_INT 5
50497: PUSH
50498: LD_INT 1
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 4
50507: PUSH
50508: LD_INT 1
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: LD_INT 3
50517: PUSH
50518: LD_INT 0
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: LD_INT 3
50527: PUSH
50528: LD_INT 1
50530: NEG
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PUSH
50536: LD_INT 3
50538: PUSH
50539: LD_INT 2
50541: NEG
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: PUSH
50547: LD_INT 5
50549: PUSH
50550: LD_INT 2
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: PUSH
50557: LD_INT 3
50559: PUSH
50560: LD_INT 3
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: PUSH
50567: LD_INT 3
50569: PUSH
50570: LD_INT 2
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: PUSH
50577: LD_INT 4
50579: PUSH
50580: LD_INT 3
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: PUSH
50587: LD_INT 4
50589: PUSH
50590: LD_INT 4
50592: PUSH
50593: EMPTY
50594: LIST
50595: LIST
50596: PUSH
50597: LD_INT 3
50599: PUSH
50600: LD_INT 4
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: LD_INT 2
50609: PUSH
50610: LD_INT 3
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: PUSH
50617: LD_INT 2
50619: PUSH
50620: LD_INT 2
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: PUSH
50627: LD_INT 4
50629: PUSH
50630: LD_INT 2
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: PUSH
50637: LD_INT 2
50639: PUSH
50640: LD_INT 4
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: PUSH
50647: LD_INT 0
50649: PUSH
50650: LD_INT 4
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: PUSH
50657: LD_INT 0
50659: PUSH
50660: LD_INT 3
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: PUSH
50667: LD_INT 1
50669: PUSH
50670: LD_INT 4
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: LD_INT 1
50679: PUSH
50680: LD_INT 5
50682: PUSH
50683: EMPTY
50684: LIST
50685: LIST
50686: PUSH
50687: LD_INT 0
50689: PUSH
50690: LD_INT 5
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: PUSH
50697: LD_INT 1
50699: NEG
50700: PUSH
50701: LD_INT 4
50703: PUSH
50704: EMPTY
50705: LIST
50706: LIST
50707: PUSH
50708: LD_INT 1
50710: NEG
50711: PUSH
50712: LD_INT 3
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: LD_INT 2
50721: PUSH
50722: LD_INT 5
50724: PUSH
50725: EMPTY
50726: LIST
50727: LIST
50728: PUSH
50729: LD_INT 2
50731: NEG
50732: PUSH
50733: LD_INT 3
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: LIST
50744: LIST
50745: LIST
50746: LIST
50747: LIST
50748: LIST
50749: LIST
50750: LIST
50751: LIST
50752: LIST
50753: LIST
50754: LIST
50755: LIST
50756: LIST
50757: LIST
50758: LIST
50759: LIST
50760: LIST
50761: LIST
50762: LIST
50763: LIST
50764: LIST
50765: LIST
50766: LIST
50767: LIST
50768: LIST
50769: LIST
50770: LIST
50771: LIST
50772: LIST
50773: LIST
50774: LIST
50775: LIST
50776: LIST
50777: LIST
50778: LIST
50779: LIST
50780: LIST
50781: LIST
50782: LIST
50783: LIST
50784: LIST
50785: LIST
50786: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
50787: LD_ADDR_VAR 0 34
50791: PUSH
50792: LD_INT 0
50794: PUSH
50795: LD_INT 4
50797: NEG
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: LD_INT 0
50805: PUSH
50806: LD_INT 5
50808: NEG
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: PUSH
50814: LD_INT 1
50816: PUSH
50817: LD_INT 4
50819: NEG
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 1
50827: PUSH
50828: LD_INT 3
50830: NEG
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 0
50838: PUSH
50839: LD_INT 3
50841: NEG
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: PUSH
50847: LD_INT 1
50849: NEG
50850: PUSH
50851: LD_INT 4
50853: NEG
50854: PUSH
50855: EMPTY
50856: LIST
50857: LIST
50858: PUSH
50859: LD_INT 1
50861: NEG
50862: PUSH
50863: LD_INT 5
50865: NEG
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: PUSH
50871: LD_INT 2
50873: PUSH
50874: LD_INT 3
50876: NEG
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: PUSH
50882: LD_INT 2
50884: NEG
50885: PUSH
50886: LD_INT 5
50888: NEG
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: PUSH
50894: LD_INT 3
50896: PUSH
50897: LD_INT 0
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: PUSH
50904: LD_INT 3
50906: PUSH
50907: LD_INT 1
50909: NEG
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: PUSH
50915: LD_INT 4
50917: PUSH
50918: LD_INT 0
50920: PUSH
50921: EMPTY
50922: LIST
50923: LIST
50924: PUSH
50925: LD_INT 4
50927: PUSH
50928: LD_INT 1
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: PUSH
50935: LD_INT 3
50937: PUSH
50938: LD_INT 1
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: PUSH
50945: LD_INT 2
50947: PUSH
50948: LD_INT 0
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: PUSH
50955: LD_INT 2
50957: PUSH
50958: LD_INT 1
50960: NEG
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: PUSH
50966: LD_INT 2
50968: PUSH
50969: LD_INT 2
50971: NEG
50972: PUSH
50973: EMPTY
50974: LIST
50975: LIST
50976: PUSH
50977: LD_INT 4
50979: PUSH
50980: LD_INT 2
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: PUSH
50987: LD_INT 4
50989: PUSH
50990: LD_INT 4
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: PUSH
50997: LD_INT 4
50999: PUSH
51000: LD_INT 3
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: PUSH
51007: LD_INT 5
51009: PUSH
51010: LD_INT 4
51012: PUSH
51013: EMPTY
51014: LIST
51015: LIST
51016: PUSH
51017: LD_INT 5
51019: PUSH
51020: LD_INT 5
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: PUSH
51027: LD_INT 4
51029: PUSH
51030: LD_INT 5
51032: PUSH
51033: EMPTY
51034: LIST
51035: LIST
51036: PUSH
51037: LD_INT 3
51039: PUSH
51040: LD_INT 4
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: PUSH
51047: LD_INT 3
51049: PUSH
51050: LD_INT 3
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: PUSH
51057: LD_INT 5
51059: PUSH
51060: LD_INT 3
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: PUSH
51067: LD_INT 3
51069: PUSH
51070: LD_INT 5
51072: PUSH
51073: EMPTY
51074: LIST
51075: LIST
51076: PUSH
51077: LD_INT 0
51079: PUSH
51080: LD_INT 3
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: PUSH
51087: LD_INT 0
51089: PUSH
51090: LD_INT 2
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: LD_INT 1
51099: PUSH
51100: LD_INT 3
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PUSH
51107: LD_INT 1
51109: PUSH
51110: LD_INT 4
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: LD_INT 0
51119: PUSH
51120: LD_INT 4
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: PUSH
51127: LD_INT 1
51129: NEG
51130: PUSH
51131: LD_INT 3
51133: PUSH
51134: EMPTY
51135: LIST
51136: LIST
51137: PUSH
51138: LD_INT 1
51140: NEG
51141: PUSH
51142: LD_INT 2
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: PUSH
51149: LD_INT 2
51151: PUSH
51152: LD_INT 4
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: LD_INT 2
51161: NEG
51162: PUSH
51163: LD_INT 2
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: PUSH
51170: LD_INT 4
51172: NEG
51173: PUSH
51174: LD_INT 0
51176: PUSH
51177: EMPTY
51178: LIST
51179: LIST
51180: PUSH
51181: LD_INT 4
51183: NEG
51184: PUSH
51185: LD_INT 1
51187: NEG
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 3
51195: NEG
51196: PUSH
51197: LD_INT 0
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: LD_INT 3
51206: NEG
51207: PUSH
51208: LD_INT 1
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: LD_INT 4
51217: NEG
51218: PUSH
51219: LD_INT 1
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PUSH
51226: LD_INT 5
51228: NEG
51229: PUSH
51230: LD_INT 0
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: PUSH
51237: LD_INT 5
51239: NEG
51240: PUSH
51241: LD_INT 1
51243: NEG
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 5
51251: NEG
51252: PUSH
51253: LD_INT 2
51255: NEG
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 3
51263: NEG
51264: PUSH
51265: LD_INT 2
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: LIST
51276: LIST
51277: LIST
51278: LIST
51279: LIST
51280: LIST
51281: LIST
51282: LIST
51283: LIST
51284: LIST
51285: LIST
51286: LIST
51287: LIST
51288: LIST
51289: LIST
51290: LIST
51291: LIST
51292: LIST
51293: LIST
51294: LIST
51295: LIST
51296: LIST
51297: LIST
51298: LIST
51299: LIST
51300: LIST
51301: LIST
51302: LIST
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: LIST
51309: LIST
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: LIST
51315: LIST
51316: LIST
51317: LIST
51318: ST_TO_ADDR
// end ; end ;
51319: GO 51322
51321: POP
// case btype of b_depot , b_warehouse :
51322: LD_VAR 0 1
51326: PUSH
51327: LD_INT 0
51329: DOUBLE
51330: EQUAL
51331: IFTRUE 51341
51333: LD_INT 1
51335: DOUBLE
51336: EQUAL
51337: IFTRUE 51341
51339: GO 51542
51341: POP
// case nation of nation_american :
51342: LD_VAR 0 5
51346: PUSH
51347: LD_INT 1
51349: DOUBLE
51350: EQUAL
51351: IFTRUE 51355
51353: GO 51411
51355: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
51356: LD_ADDR_VAR 0 9
51360: PUSH
51361: LD_VAR 0 11
51365: PUSH
51366: LD_VAR 0 12
51370: PUSH
51371: LD_VAR 0 13
51375: PUSH
51376: LD_VAR 0 14
51380: PUSH
51381: LD_VAR 0 15
51385: PUSH
51386: LD_VAR 0 16
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: LIST
51395: LIST
51396: LIST
51397: LIST
51398: PUSH
51399: LD_VAR 0 4
51403: PUSH
51404: LD_INT 1
51406: PLUS
51407: ARRAY
51408: ST_TO_ADDR
51409: GO 51540
51411: LD_INT 2
51413: DOUBLE
51414: EQUAL
51415: IFTRUE 51419
51417: GO 51475
51419: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
51420: LD_ADDR_VAR 0 9
51424: PUSH
51425: LD_VAR 0 17
51429: PUSH
51430: LD_VAR 0 18
51434: PUSH
51435: LD_VAR 0 19
51439: PUSH
51440: LD_VAR 0 20
51444: PUSH
51445: LD_VAR 0 21
51449: PUSH
51450: LD_VAR 0 22
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: LIST
51459: LIST
51460: LIST
51461: LIST
51462: PUSH
51463: LD_VAR 0 4
51467: PUSH
51468: LD_INT 1
51470: PLUS
51471: ARRAY
51472: ST_TO_ADDR
51473: GO 51540
51475: LD_INT 3
51477: DOUBLE
51478: EQUAL
51479: IFTRUE 51483
51481: GO 51539
51483: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
51484: LD_ADDR_VAR 0 9
51488: PUSH
51489: LD_VAR 0 23
51493: PUSH
51494: LD_VAR 0 24
51498: PUSH
51499: LD_VAR 0 25
51503: PUSH
51504: LD_VAR 0 26
51508: PUSH
51509: LD_VAR 0 27
51513: PUSH
51514: LD_VAR 0 28
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: PUSH
51527: LD_VAR 0 4
51531: PUSH
51532: LD_INT 1
51534: PLUS
51535: ARRAY
51536: ST_TO_ADDR
51537: GO 51540
51539: POP
51540: GO 52095
51542: LD_INT 2
51544: DOUBLE
51545: EQUAL
51546: IFTRUE 51556
51548: LD_INT 3
51550: DOUBLE
51551: EQUAL
51552: IFTRUE 51556
51554: GO 51612
51556: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
51557: LD_ADDR_VAR 0 9
51561: PUSH
51562: LD_VAR 0 29
51566: PUSH
51567: LD_VAR 0 30
51571: PUSH
51572: LD_VAR 0 31
51576: PUSH
51577: LD_VAR 0 32
51581: PUSH
51582: LD_VAR 0 33
51586: PUSH
51587: LD_VAR 0 34
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: LIST
51596: LIST
51597: LIST
51598: LIST
51599: PUSH
51600: LD_VAR 0 4
51604: PUSH
51605: LD_INT 1
51607: PLUS
51608: ARRAY
51609: ST_TO_ADDR
51610: GO 52095
51612: LD_INT 16
51614: DOUBLE
51615: EQUAL
51616: IFTRUE 51674
51618: LD_INT 17
51620: DOUBLE
51621: EQUAL
51622: IFTRUE 51674
51624: LD_INT 18
51626: DOUBLE
51627: EQUAL
51628: IFTRUE 51674
51630: LD_INT 19
51632: DOUBLE
51633: EQUAL
51634: IFTRUE 51674
51636: LD_INT 22
51638: DOUBLE
51639: EQUAL
51640: IFTRUE 51674
51642: LD_INT 20
51644: DOUBLE
51645: EQUAL
51646: IFTRUE 51674
51648: LD_INT 21
51650: DOUBLE
51651: EQUAL
51652: IFTRUE 51674
51654: LD_INT 23
51656: DOUBLE
51657: EQUAL
51658: IFTRUE 51674
51660: LD_INT 24
51662: DOUBLE
51663: EQUAL
51664: IFTRUE 51674
51666: LD_INT 25
51668: DOUBLE
51669: EQUAL
51670: IFTRUE 51674
51672: GO 51730
51674: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
51675: LD_ADDR_VAR 0 9
51679: PUSH
51680: LD_VAR 0 35
51684: PUSH
51685: LD_VAR 0 36
51689: PUSH
51690: LD_VAR 0 37
51694: PUSH
51695: LD_VAR 0 38
51699: PUSH
51700: LD_VAR 0 39
51704: PUSH
51705: LD_VAR 0 40
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: LIST
51714: LIST
51715: LIST
51716: LIST
51717: PUSH
51718: LD_VAR 0 4
51722: PUSH
51723: LD_INT 1
51725: PLUS
51726: ARRAY
51727: ST_TO_ADDR
51728: GO 52095
51730: LD_INT 6
51732: DOUBLE
51733: EQUAL
51734: IFTRUE 51786
51736: LD_INT 7
51738: DOUBLE
51739: EQUAL
51740: IFTRUE 51786
51742: LD_INT 8
51744: DOUBLE
51745: EQUAL
51746: IFTRUE 51786
51748: LD_INT 13
51750: DOUBLE
51751: EQUAL
51752: IFTRUE 51786
51754: LD_INT 12
51756: DOUBLE
51757: EQUAL
51758: IFTRUE 51786
51760: LD_INT 15
51762: DOUBLE
51763: EQUAL
51764: IFTRUE 51786
51766: LD_INT 11
51768: DOUBLE
51769: EQUAL
51770: IFTRUE 51786
51772: LD_INT 14
51774: DOUBLE
51775: EQUAL
51776: IFTRUE 51786
51778: LD_INT 10
51780: DOUBLE
51781: EQUAL
51782: IFTRUE 51786
51784: GO 51842
51786: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
51787: LD_ADDR_VAR 0 9
51791: PUSH
51792: LD_VAR 0 41
51796: PUSH
51797: LD_VAR 0 42
51801: PUSH
51802: LD_VAR 0 43
51806: PUSH
51807: LD_VAR 0 44
51811: PUSH
51812: LD_VAR 0 45
51816: PUSH
51817: LD_VAR 0 46
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: LIST
51826: LIST
51827: LIST
51828: LIST
51829: PUSH
51830: LD_VAR 0 4
51834: PUSH
51835: LD_INT 1
51837: PLUS
51838: ARRAY
51839: ST_TO_ADDR
51840: GO 52095
51842: LD_INT 36
51844: DOUBLE
51845: EQUAL
51846: IFTRUE 51850
51848: GO 51906
51850: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
51851: LD_ADDR_VAR 0 9
51855: PUSH
51856: LD_VAR 0 47
51860: PUSH
51861: LD_VAR 0 48
51865: PUSH
51866: LD_VAR 0 49
51870: PUSH
51871: LD_VAR 0 50
51875: PUSH
51876: LD_VAR 0 51
51880: PUSH
51881: LD_VAR 0 52
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: LIST
51890: LIST
51891: LIST
51892: LIST
51893: PUSH
51894: LD_VAR 0 4
51898: PUSH
51899: LD_INT 1
51901: PLUS
51902: ARRAY
51903: ST_TO_ADDR
51904: GO 52095
51906: LD_INT 4
51908: DOUBLE
51909: EQUAL
51910: IFTRUE 51932
51912: LD_INT 5
51914: DOUBLE
51915: EQUAL
51916: IFTRUE 51932
51918: LD_INT 34
51920: DOUBLE
51921: EQUAL
51922: IFTRUE 51932
51924: LD_INT 37
51926: DOUBLE
51927: EQUAL
51928: IFTRUE 51932
51930: GO 51988
51932: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
51933: LD_ADDR_VAR 0 9
51937: PUSH
51938: LD_VAR 0 53
51942: PUSH
51943: LD_VAR 0 54
51947: PUSH
51948: LD_VAR 0 55
51952: PUSH
51953: LD_VAR 0 56
51957: PUSH
51958: LD_VAR 0 57
51962: PUSH
51963: LD_VAR 0 58
51967: PUSH
51968: EMPTY
51969: LIST
51970: LIST
51971: LIST
51972: LIST
51973: LIST
51974: LIST
51975: PUSH
51976: LD_VAR 0 4
51980: PUSH
51981: LD_INT 1
51983: PLUS
51984: ARRAY
51985: ST_TO_ADDR
51986: GO 52095
51988: LD_INT 31
51990: DOUBLE
51991: EQUAL
51992: IFTRUE 52038
51994: LD_INT 32
51996: DOUBLE
51997: EQUAL
51998: IFTRUE 52038
52000: LD_INT 33
52002: DOUBLE
52003: EQUAL
52004: IFTRUE 52038
52006: LD_INT 27
52008: DOUBLE
52009: EQUAL
52010: IFTRUE 52038
52012: LD_INT 26
52014: DOUBLE
52015: EQUAL
52016: IFTRUE 52038
52018: LD_INT 28
52020: DOUBLE
52021: EQUAL
52022: IFTRUE 52038
52024: LD_INT 29
52026: DOUBLE
52027: EQUAL
52028: IFTRUE 52038
52030: LD_INT 30
52032: DOUBLE
52033: EQUAL
52034: IFTRUE 52038
52036: GO 52094
52038: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
52039: LD_ADDR_VAR 0 9
52043: PUSH
52044: LD_VAR 0 59
52048: PUSH
52049: LD_VAR 0 60
52053: PUSH
52054: LD_VAR 0 61
52058: PUSH
52059: LD_VAR 0 62
52063: PUSH
52064: LD_VAR 0 63
52068: PUSH
52069: LD_VAR 0 64
52073: PUSH
52074: EMPTY
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: LIST
52081: PUSH
52082: LD_VAR 0 4
52086: PUSH
52087: LD_INT 1
52089: PLUS
52090: ARRAY
52091: ST_TO_ADDR
52092: GO 52095
52094: POP
// temp_list2 = [ ] ;
52095: LD_ADDR_VAR 0 10
52099: PUSH
52100: EMPTY
52101: ST_TO_ADDR
// for i in temp_list do
52102: LD_ADDR_VAR 0 8
52106: PUSH
52107: LD_VAR 0 9
52111: PUSH
52112: FOR_IN
52113: IFFALSE 52165
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
52115: LD_ADDR_VAR 0 10
52119: PUSH
52120: LD_VAR 0 10
52124: PUSH
52125: LD_VAR 0 8
52129: PUSH
52130: LD_INT 1
52132: ARRAY
52133: PUSH
52134: LD_VAR 0 2
52138: PLUS
52139: PUSH
52140: LD_VAR 0 8
52144: PUSH
52145: LD_INT 2
52147: ARRAY
52148: PUSH
52149: LD_VAR 0 3
52153: PLUS
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: PUSH
52159: EMPTY
52160: LIST
52161: ADD
52162: ST_TO_ADDR
52163: GO 52112
52165: POP
52166: POP
// result = temp_list2 ;
52167: LD_ADDR_VAR 0 7
52171: PUSH
52172: LD_VAR 0 10
52176: ST_TO_ADDR
// end ;
52177: LD_VAR 0 7
52181: RET
// export function EnemyInRange ( unit , dist ) ; begin
52182: LD_INT 0
52184: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
52185: LD_ADDR_VAR 0 3
52189: PUSH
52190: LD_VAR 0 1
52194: PPUSH
52195: CALL_OW 255
52199: PPUSH
52200: LD_VAR 0 1
52204: PPUSH
52205: CALL_OW 250
52209: PPUSH
52210: LD_VAR 0 1
52214: PPUSH
52215: CALL_OW 251
52219: PPUSH
52220: LD_VAR 0 2
52224: PPUSH
52225: CALL 26286 0 4
52229: PUSH
52230: LD_INT 4
52232: ARRAY
52233: ST_TO_ADDR
// end ;
52234: LD_VAR 0 3
52238: RET
// export function PlayerSeeMe ( unit ) ; begin
52239: LD_INT 0
52241: PPUSH
// result := See ( your_side , unit ) ;
52242: LD_ADDR_VAR 0 2
52246: PUSH
52247: LD_OWVAR 2
52251: PPUSH
52252: LD_VAR 0 1
52256: PPUSH
52257: CALL_OW 292
52261: ST_TO_ADDR
// end ;
52262: LD_VAR 0 2
52266: RET
// export function ReverseDir ( unit ) ; begin
52267: LD_INT 0
52269: PPUSH
// if not unit then
52270: LD_VAR 0 1
52274: NOT
52275: IFFALSE 52279
// exit ;
52277: GO 52302
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
52279: LD_ADDR_VAR 0 2
52283: PUSH
52284: LD_VAR 0 1
52288: PPUSH
52289: CALL_OW 254
52293: PUSH
52294: LD_INT 3
52296: PLUS
52297: PUSH
52298: LD_INT 6
52300: MOD
52301: ST_TO_ADDR
// end ;
52302: LD_VAR 0 2
52306: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
52307: LD_INT 0
52309: PPUSH
52310: PPUSH
52311: PPUSH
52312: PPUSH
52313: PPUSH
// if not hexes then
52314: LD_VAR 0 2
52318: NOT
52319: IFFALSE 52323
// exit ;
52321: GO 52471
// dist := 9999 ;
52323: LD_ADDR_VAR 0 5
52327: PUSH
52328: LD_INT 9999
52330: ST_TO_ADDR
// for i = 1 to hexes do
52331: LD_ADDR_VAR 0 4
52335: PUSH
52336: DOUBLE
52337: LD_INT 1
52339: DEC
52340: ST_TO_ADDR
52341: LD_VAR 0 2
52345: PUSH
52346: FOR_TO
52347: IFFALSE 52459
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
52349: LD_VAR 0 1
52353: PPUSH
52354: LD_VAR 0 2
52358: PUSH
52359: LD_VAR 0 4
52363: ARRAY
52364: PUSH
52365: LD_INT 1
52367: ARRAY
52368: PPUSH
52369: LD_VAR 0 2
52373: PUSH
52374: LD_VAR 0 4
52378: ARRAY
52379: PUSH
52380: LD_INT 2
52382: ARRAY
52383: PPUSH
52384: CALL_OW 297
52388: PUSH
52389: LD_VAR 0 5
52393: LESS
52394: IFFALSE 52457
// begin hex := hexes [ i ] ;
52396: LD_ADDR_VAR 0 7
52400: PUSH
52401: LD_VAR 0 2
52405: PUSH
52406: LD_VAR 0 4
52410: ARRAY
52411: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52412: LD_ADDR_VAR 0 5
52416: PUSH
52417: LD_VAR 0 1
52421: PPUSH
52422: LD_VAR 0 2
52426: PUSH
52427: LD_VAR 0 4
52431: ARRAY
52432: PUSH
52433: LD_INT 1
52435: ARRAY
52436: PPUSH
52437: LD_VAR 0 2
52441: PUSH
52442: LD_VAR 0 4
52446: ARRAY
52447: PUSH
52448: LD_INT 2
52450: ARRAY
52451: PPUSH
52452: CALL_OW 297
52456: ST_TO_ADDR
// end ; end ;
52457: GO 52346
52459: POP
52460: POP
// result := hex ;
52461: LD_ADDR_VAR 0 3
52465: PUSH
52466: LD_VAR 0 7
52470: ST_TO_ADDR
// end ;
52471: LD_VAR 0 3
52475: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
52476: LD_INT 0
52478: PPUSH
52479: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
52480: LD_VAR 0 1
52484: NOT
52485: PUSH
52486: LD_VAR 0 1
52490: PUSH
52491: LD_INT 21
52493: PUSH
52494: LD_INT 2
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: PUSH
52501: LD_INT 23
52503: PUSH
52504: LD_INT 2
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PPUSH
52515: CALL_OW 69
52519: IN
52520: NOT
52521: OR
52522: IFFALSE 52526
// exit ;
52524: GO 52573
// for i = 1 to 3 do
52526: LD_ADDR_VAR 0 3
52530: PUSH
52531: DOUBLE
52532: LD_INT 1
52534: DEC
52535: ST_TO_ADDR
52536: LD_INT 3
52538: PUSH
52539: FOR_TO
52540: IFFALSE 52571
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
52542: LD_VAR 0 1
52546: PPUSH
52547: CALL_OW 250
52551: PPUSH
52552: LD_VAR 0 1
52556: PPUSH
52557: CALL_OW 251
52561: PPUSH
52562: LD_INT 1
52564: PPUSH
52565: CALL_OW 453
52569: GO 52539
52571: POP
52572: POP
// end ;
52573: LD_VAR 0 2
52577: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
52578: LD_INT 0
52580: PPUSH
52581: PPUSH
52582: PPUSH
52583: PPUSH
52584: PPUSH
52585: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
52586: LD_VAR 0 1
52590: NOT
52591: PUSH
52592: LD_VAR 0 2
52596: NOT
52597: OR
52598: PUSH
52599: LD_VAR 0 1
52603: PPUSH
52604: CALL_OW 314
52608: OR
52609: IFFALSE 52613
// exit ;
52611: GO 53054
// x := GetX ( enemy_unit ) ;
52613: LD_ADDR_VAR 0 7
52617: PUSH
52618: LD_VAR 0 2
52622: PPUSH
52623: CALL_OW 250
52627: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
52628: LD_ADDR_VAR 0 8
52632: PUSH
52633: LD_VAR 0 2
52637: PPUSH
52638: CALL_OW 251
52642: ST_TO_ADDR
// if not x or not y then
52643: LD_VAR 0 7
52647: NOT
52648: PUSH
52649: LD_VAR 0 8
52653: NOT
52654: OR
52655: IFFALSE 52659
// exit ;
52657: GO 53054
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
52659: LD_ADDR_VAR 0 6
52663: PUSH
52664: LD_VAR 0 7
52668: PPUSH
52669: LD_INT 0
52671: PPUSH
52672: LD_INT 4
52674: PPUSH
52675: CALL_OW 272
52679: PUSH
52680: LD_VAR 0 8
52684: PPUSH
52685: LD_INT 0
52687: PPUSH
52688: LD_INT 4
52690: PPUSH
52691: CALL_OW 273
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: PUSH
52700: LD_VAR 0 7
52704: PPUSH
52705: LD_INT 1
52707: PPUSH
52708: LD_INT 4
52710: PPUSH
52711: CALL_OW 272
52715: PUSH
52716: LD_VAR 0 8
52720: PPUSH
52721: LD_INT 1
52723: PPUSH
52724: LD_INT 4
52726: PPUSH
52727: CALL_OW 273
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: PUSH
52736: LD_VAR 0 7
52740: PPUSH
52741: LD_INT 2
52743: PPUSH
52744: LD_INT 4
52746: PPUSH
52747: CALL_OW 272
52751: PUSH
52752: LD_VAR 0 8
52756: PPUSH
52757: LD_INT 2
52759: PPUSH
52760: LD_INT 4
52762: PPUSH
52763: CALL_OW 273
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: PUSH
52772: LD_VAR 0 7
52776: PPUSH
52777: LD_INT 3
52779: PPUSH
52780: LD_INT 4
52782: PPUSH
52783: CALL_OW 272
52787: PUSH
52788: LD_VAR 0 8
52792: PPUSH
52793: LD_INT 3
52795: PPUSH
52796: LD_INT 4
52798: PPUSH
52799: CALL_OW 273
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: PUSH
52808: LD_VAR 0 7
52812: PPUSH
52813: LD_INT 4
52815: PPUSH
52816: LD_INT 4
52818: PPUSH
52819: CALL_OW 272
52823: PUSH
52824: LD_VAR 0 8
52828: PPUSH
52829: LD_INT 4
52831: PPUSH
52832: LD_INT 4
52834: PPUSH
52835: CALL_OW 273
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: PUSH
52844: LD_VAR 0 7
52848: PPUSH
52849: LD_INT 5
52851: PPUSH
52852: LD_INT 4
52854: PPUSH
52855: CALL_OW 272
52859: PUSH
52860: LD_VAR 0 8
52864: PPUSH
52865: LD_INT 5
52867: PPUSH
52868: LD_INT 4
52870: PPUSH
52871: CALL_OW 273
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: LIST
52884: LIST
52885: LIST
52886: LIST
52887: ST_TO_ADDR
// for i = tmp downto 1 do
52888: LD_ADDR_VAR 0 4
52892: PUSH
52893: DOUBLE
52894: LD_VAR 0 6
52898: INC
52899: ST_TO_ADDR
52900: LD_INT 1
52902: PUSH
52903: FOR_DOWNTO
52904: IFFALSE 53005
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
52906: LD_VAR 0 6
52910: PUSH
52911: LD_VAR 0 4
52915: ARRAY
52916: PUSH
52917: LD_INT 1
52919: ARRAY
52920: PPUSH
52921: LD_VAR 0 6
52925: PUSH
52926: LD_VAR 0 4
52930: ARRAY
52931: PUSH
52932: LD_INT 2
52934: ARRAY
52935: PPUSH
52936: CALL_OW 488
52940: NOT
52941: PUSH
52942: LD_VAR 0 6
52946: PUSH
52947: LD_VAR 0 4
52951: ARRAY
52952: PUSH
52953: LD_INT 1
52955: ARRAY
52956: PPUSH
52957: LD_VAR 0 6
52961: PUSH
52962: LD_VAR 0 4
52966: ARRAY
52967: PUSH
52968: LD_INT 2
52970: ARRAY
52971: PPUSH
52972: CALL_OW 428
52976: PUSH
52977: LD_INT 0
52979: NONEQUAL
52980: OR
52981: IFFALSE 53003
// tmp := Delete ( tmp , i ) ;
52983: LD_ADDR_VAR 0 6
52987: PUSH
52988: LD_VAR 0 6
52992: PPUSH
52993: LD_VAR 0 4
52997: PPUSH
52998: CALL_OW 3
53002: ST_TO_ADDR
53003: GO 52903
53005: POP
53006: POP
// j := GetClosestHex ( unit , tmp ) ;
53007: LD_ADDR_VAR 0 5
53011: PUSH
53012: LD_VAR 0 1
53016: PPUSH
53017: LD_VAR 0 6
53021: PPUSH
53022: CALL 52307 0 2
53026: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
53027: LD_VAR 0 1
53031: PPUSH
53032: LD_VAR 0 5
53036: PUSH
53037: LD_INT 1
53039: ARRAY
53040: PPUSH
53041: LD_VAR 0 5
53045: PUSH
53046: LD_INT 2
53048: ARRAY
53049: PPUSH
53050: CALL_OW 111
// end ;
53054: LD_VAR 0 3
53058: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
53059: LD_INT 0
53061: PPUSH
53062: PPUSH
53063: PPUSH
// uc_side = 0 ;
53064: LD_ADDR_OWVAR 20
53068: PUSH
53069: LD_INT 0
53071: ST_TO_ADDR
// uc_nation = 0 ;
53072: LD_ADDR_OWVAR 21
53076: PUSH
53077: LD_INT 0
53079: ST_TO_ADDR
// InitHc ;
53080: CALL_OW 19
// InitVc ;
53084: CALL_OW 20
// if mastodonts then
53088: LD_VAR 0 6
53092: IFFALSE 53159
// for i = 1 to mastodonts do
53094: LD_ADDR_VAR 0 11
53098: PUSH
53099: DOUBLE
53100: LD_INT 1
53102: DEC
53103: ST_TO_ADDR
53104: LD_VAR 0 6
53108: PUSH
53109: FOR_TO
53110: IFFALSE 53157
// begin vc_chassis := 31 ;
53112: LD_ADDR_OWVAR 37
53116: PUSH
53117: LD_INT 31
53119: ST_TO_ADDR
// vc_control := control_rider ;
53120: LD_ADDR_OWVAR 38
53124: PUSH
53125: LD_INT 4
53127: ST_TO_ADDR
// animal := CreateVehicle ;
53128: LD_ADDR_VAR 0 12
53132: PUSH
53133: CALL_OW 45
53137: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53138: LD_VAR 0 12
53142: PPUSH
53143: LD_VAR 0 8
53147: PPUSH
53148: LD_INT 0
53150: PPUSH
53151: CALL 55228 0 3
// end ;
53155: GO 53109
53157: POP
53158: POP
// if horses then
53159: LD_VAR 0 5
53163: IFFALSE 53230
// for i = 1 to horses do
53165: LD_ADDR_VAR 0 11
53169: PUSH
53170: DOUBLE
53171: LD_INT 1
53173: DEC
53174: ST_TO_ADDR
53175: LD_VAR 0 5
53179: PUSH
53180: FOR_TO
53181: IFFALSE 53228
// begin hc_class := 21 ;
53183: LD_ADDR_OWVAR 28
53187: PUSH
53188: LD_INT 21
53190: ST_TO_ADDR
// hc_gallery :=  ;
53191: LD_ADDR_OWVAR 33
53195: PUSH
53196: LD_STRING 
53198: ST_TO_ADDR
// animal := CreateHuman ;
53199: LD_ADDR_VAR 0 12
53203: PUSH
53204: CALL_OW 44
53208: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53209: LD_VAR 0 12
53213: PPUSH
53214: LD_VAR 0 8
53218: PPUSH
53219: LD_INT 0
53221: PPUSH
53222: CALL 55228 0 3
// end ;
53226: GO 53180
53228: POP
53229: POP
// if birds then
53230: LD_VAR 0 1
53234: IFFALSE 53301
// for i = 1 to birds do
53236: LD_ADDR_VAR 0 11
53240: PUSH
53241: DOUBLE
53242: LD_INT 1
53244: DEC
53245: ST_TO_ADDR
53246: LD_VAR 0 1
53250: PUSH
53251: FOR_TO
53252: IFFALSE 53299
// begin hc_class = 18 ;
53254: LD_ADDR_OWVAR 28
53258: PUSH
53259: LD_INT 18
53261: ST_TO_ADDR
// hc_gallery =  ;
53262: LD_ADDR_OWVAR 33
53266: PUSH
53267: LD_STRING 
53269: ST_TO_ADDR
// animal := CreateHuman ;
53270: LD_ADDR_VAR 0 12
53274: PUSH
53275: CALL_OW 44
53279: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53280: LD_VAR 0 12
53284: PPUSH
53285: LD_VAR 0 8
53289: PPUSH
53290: LD_INT 0
53292: PPUSH
53293: CALL 55228 0 3
// end ;
53297: GO 53251
53299: POP
53300: POP
// if tigers then
53301: LD_VAR 0 2
53305: IFFALSE 53389
// for i = 1 to tigers do
53307: LD_ADDR_VAR 0 11
53311: PUSH
53312: DOUBLE
53313: LD_INT 1
53315: DEC
53316: ST_TO_ADDR
53317: LD_VAR 0 2
53321: PUSH
53322: FOR_TO
53323: IFFALSE 53387
// begin hc_class = class_tiger ;
53325: LD_ADDR_OWVAR 28
53329: PUSH
53330: LD_INT 14
53332: ST_TO_ADDR
// hc_gallery =  ;
53333: LD_ADDR_OWVAR 33
53337: PUSH
53338: LD_STRING 
53340: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
53341: LD_ADDR_OWVAR 35
53345: PUSH
53346: LD_INT 7
53348: NEG
53349: PPUSH
53350: LD_INT 7
53352: PPUSH
53353: CALL_OW 12
53357: ST_TO_ADDR
// animal := CreateHuman ;
53358: LD_ADDR_VAR 0 12
53362: PUSH
53363: CALL_OW 44
53367: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53368: LD_VAR 0 12
53372: PPUSH
53373: LD_VAR 0 8
53377: PPUSH
53378: LD_INT 0
53380: PPUSH
53381: CALL 55228 0 3
// end ;
53385: GO 53322
53387: POP
53388: POP
// if apemans then
53389: LD_VAR 0 3
53393: IFFALSE 53516
// for i = 1 to apemans do
53395: LD_ADDR_VAR 0 11
53399: PUSH
53400: DOUBLE
53401: LD_INT 1
53403: DEC
53404: ST_TO_ADDR
53405: LD_VAR 0 3
53409: PUSH
53410: FOR_TO
53411: IFFALSE 53514
// begin hc_class = class_apeman ;
53413: LD_ADDR_OWVAR 28
53417: PUSH
53418: LD_INT 12
53420: ST_TO_ADDR
// hc_gallery =  ;
53421: LD_ADDR_OWVAR 33
53425: PUSH
53426: LD_STRING 
53428: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
53429: LD_ADDR_OWVAR 35
53433: PUSH
53434: LD_INT 5
53436: NEG
53437: PPUSH
53438: LD_INT 5
53440: PPUSH
53441: CALL_OW 12
53445: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
53446: LD_ADDR_OWVAR 31
53450: PUSH
53451: LD_INT 1
53453: PPUSH
53454: LD_INT 3
53456: PPUSH
53457: CALL_OW 12
53461: PUSH
53462: LD_INT 1
53464: PPUSH
53465: LD_INT 3
53467: PPUSH
53468: CALL_OW 12
53472: PUSH
53473: LD_INT 0
53475: PUSH
53476: LD_INT 0
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: LIST
53483: LIST
53484: ST_TO_ADDR
// animal := CreateHuman ;
53485: LD_ADDR_VAR 0 12
53489: PUSH
53490: CALL_OW 44
53494: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53495: LD_VAR 0 12
53499: PPUSH
53500: LD_VAR 0 8
53504: PPUSH
53505: LD_INT 0
53507: PPUSH
53508: CALL 55228 0 3
// end ;
53512: GO 53410
53514: POP
53515: POP
// if enchidnas then
53516: LD_VAR 0 4
53520: IFFALSE 53587
// for i = 1 to enchidnas do
53522: LD_ADDR_VAR 0 11
53526: PUSH
53527: DOUBLE
53528: LD_INT 1
53530: DEC
53531: ST_TO_ADDR
53532: LD_VAR 0 4
53536: PUSH
53537: FOR_TO
53538: IFFALSE 53585
// begin hc_class = 13 ;
53540: LD_ADDR_OWVAR 28
53544: PUSH
53545: LD_INT 13
53547: ST_TO_ADDR
// hc_gallery =  ;
53548: LD_ADDR_OWVAR 33
53552: PUSH
53553: LD_STRING 
53555: ST_TO_ADDR
// animal := CreateHuman ;
53556: LD_ADDR_VAR 0 12
53560: PUSH
53561: CALL_OW 44
53565: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53566: LD_VAR 0 12
53570: PPUSH
53571: LD_VAR 0 8
53575: PPUSH
53576: LD_INT 0
53578: PPUSH
53579: CALL 55228 0 3
// end ;
53583: GO 53537
53585: POP
53586: POP
// if fishes then
53587: LD_VAR 0 7
53591: IFFALSE 53658
// for i = 1 to fishes do
53593: LD_ADDR_VAR 0 11
53597: PUSH
53598: DOUBLE
53599: LD_INT 1
53601: DEC
53602: ST_TO_ADDR
53603: LD_VAR 0 7
53607: PUSH
53608: FOR_TO
53609: IFFALSE 53656
// begin hc_class = 20 ;
53611: LD_ADDR_OWVAR 28
53615: PUSH
53616: LD_INT 20
53618: ST_TO_ADDR
// hc_gallery =  ;
53619: LD_ADDR_OWVAR 33
53623: PUSH
53624: LD_STRING 
53626: ST_TO_ADDR
// animal := CreateHuman ;
53627: LD_ADDR_VAR 0 12
53631: PUSH
53632: CALL_OW 44
53636: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
53637: LD_VAR 0 12
53641: PPUSH
53642: LD_VAR 0 9
53646: PPUSH
53647: LD_INT 0
53649: PPUSH
53650: CALL 55228 0 3
// end ;
53654: GO 53608
53656: POP
53657: POP
// end ;
53658: LD_VAR 0 10
53662: RET
// export function WantHeal ( sci , unit ) ; begin
53663: LD_INT 0
53665: PPUSH
// if GetTaskList ( sci ) > 0 then
53666: LD_VAR 0 1
53670: PPUSH
53671: CALL_OW 437
53675: PUSH
53676: LD_INT 0
53678: GREATER
53679: IFFALSE 53749
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
53681: LD_VAR 0 1
53685: PPUSH
53686: CALL_OW 437
53690: PUSH
53691: LD_INT 1
53693: ARRAY
53694: PUSH
53695: LD_INT 1
53697: ARRAY
53698: PUSH
53699: LD_STRING l
53701: EQUAL
53702: PUSH
53703: LD_VAR 0 1
53707: PPUSH
53708: CALL_OW 437
53712: PUSH
53713: LD_INT 1
53715: ARRAY
53716: PUSH
53717: LD_INT 4
53719: ARRAY
53720: PUSH
53721: LD_VAR 0 2
53725: EQUAL
53726: AND
53727: IFFALSE 53739
// result := true else
53729: LD_ADDR_VAR 0 3
53733: PUSH
53734: LD_INT 1
53736: ST_TO_ADDR
53737: GO 53747
// result := false ;
53739: LD_ADDR_VAR 0 3
53743: PUSH
53744: LD_INT 0
53746: ST_TO_ADDR
// end else
53747: GO 53757
// result := false ;
53749: LD_ADDR_VAR 0 3
53753: PUSH
53754: LD_INT 0
53756: ST_TO_ADDR
// end ;
53757: LD_VAR 0 3
53761: RET
// export function HealTarget ( sci ) ; begin
53762: LD_INT 0
53764: PPUSH
// if not sci then
53765: LD_VAR 0 1
53769: NOT
53770: IFFALSE 53774
// exit ;
53772: GO 53839
// result := 0 ;
53774: LD_ADDR_VAR 0 2
53778: PUSH
53779: LD_INT 0
53781: ST_TO_ADDR
// if GetTaskList ( sci ) then
53782: LD_VAR 0 1
53786: PPUSH
53787: CALL_OW 437
53791: IFFALSE 53839
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
53793: LD_VAR 0 1
53797: PPUSH
53798: CALL_OW 437
53802: PUSH
53803: LD_INT 1
53805: ARRAY
53806: PUSH
53807: LD_INT 1
53809: ARRAY
53810: PUSH
53811: LD_STRING l
53813: EQUAL
53814: IFFALSE 53839
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
53816: LD_ADDR_VAR 0 2
53820: PUSH
53821: LD_VAR 0 1
53825: PPUSH
53826: CALL_OW 437
53830: PUSH
53831: LD_INT 1
53833: ARRAY
53834: PUSH
53835: LD_INT 4
53837: ARRAY
53838: ST_TO_ADDR
// end ;
53839: LD_VAR 0 2
53843: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
53844: LD_INT 0
53846: PPUSH
53847: PPUSH
53848: PPUSH
53849: PPUSH
// if not base_units then
53850: LD_VAR 0 1
53854: NOT
53855: IFFALSE 53859
// exit ;
53857: GO 53946
// result := false ;
53859: LD_ADDR_VAR 0 2
53863: PUSH
53864: LD_INT 0
53866: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
53867: LD_ADDR_VAR 0 5
53871: PUSH
53872: LD_VAR 0 1
53876: PPUSH
53877: LD_INT 21
53879: PUSH
53880: LD_INT 3
53882: PUSH
53883: EMPTY
53884: LIST
53885: LIST
53886: PPUSH
53887: CALL_OW 72
53891: ST_TO_ADDR
// if not tmp then
53892: LD_VAR 0 5
53896: NOT
53897: IFFALSE 53901
// exit ;
53899: GO 53946
// for i in tmp do
53901: LD_ADDR_VAR 0 3
53905: PUSH
53906: LD_VAR 0 5
53910: PUSH
53911: FOR_IN
53912: IFFALSE 53944
// begin result := EnemyInRange ( i , 22 ) ;
53914: LD_ADDR_VAR 0 2
53918: PUSH
53919: LD_VAR 0 3
53923: PPUSH
53924: LD_INT 22
53926: PPUSH
53927: CALL 52182 0 2
53931: ST_TO_ADDR
// if result then
53932: LD_VAR 0 2
53936: IFFALSE 53942
// exit ;
53938: POP
53939: POP
53940: GO 53946
// end ;
53942: GO 53911
53944: POP
53945: POP
// end ;
53946: LD_VAR 0 2
53950: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
53951: LD_INT 0
53953: PPUSH
53954: PPUSH
// if not units then
53955: LD_VAR 0 1
53959: NOT
53960: IFFALSE 53964
// exit ;
53962: GO 54034
// result := [ ] ;
53964: LD_ADDR_VAR 0 3
53968: PUSH
53969: EMPTY
53970: ST_TO_ADDR
// for i in units do
53971: LD_ADDR_VAR 0 4
53975: PUSH
53976: LD_VAR 0 1
53980: PUSH
53981: FOR_IN
53982: IFFALSE 54032
// if GetTag ( i ) = tag then
53984: LD_VAR 0 4
53988: PPUSH
53989: CALL_OW 110
53993: PUSH
53994: LD_VAR 0 2
53998: EQUAL
53999: IFFALSE 54030
// result := Insert ( result , result + 1 , i ) ;
54001: LD_ADDR_VAR 0 3
54005: PUSH
54006: LD_VAR 0 3
54010: PPUSH
54011: LD_VAR 0 3
54015: PUSH
54016: LD_INT 1
54018: PLUS
54019: PPUSH
54020: LD_VAR 0 4
54024: PPUSH
54025: CALL_OW 2
54029: ST_TO_ADDR
54030: GO 53981
54032: POP
54033: POP
// end ;
54034: LD_VAR 0 3
54038: RET
// export function IsDriver ( un ) ; begin
54039: LD_INT 0
54041: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
54042: LD_ADDR_VAR 0 2
54046: PUSH
54047: LD_VAR 0 1
54051: PUSH
54052: LD_INT 55
54054: PUSH
54055: EMPTY
54056: LIST
54057: PPUSH
54058: CALL_OW 69
54062: IN
54063: ST_TO_ADDR
// end ;
54064: LD_VAR 0 2
54068: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
54069: LD_INT 0
54071: PPUSH
54072: PPUSH
// list := [ ] ;
54073: LD_ADDR_VAR 0 5
54077: PUSH
54078: EMPTY
54079: ST_TO_ADDR
// case d of 0 :
54080: LD_VAR 0 3
54084: PUSH
54085: LD_INT 0
54087: DOUBLE
54088: EQUAL
54089: IFTRUE 54093
54091: GO 54226
54093: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
54094: LD_ADDR_VAR 0 5
54098: PUSH
54099: LD_VAR 0 1
54103: PUSH
54104: LD_INT 4
54106: MINUS
54107: PUSH
54108: LD_VAR 0 2
54112: PUSH
54113: LD_INT 4
54115: MINUS
54116: PUSH
54117: LD_INT 2
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: LIST
54124: PUSH
54125: LD_VAR 0 1
54129: PUSH
54130: LD_INT 3
54132: MINUS
54133: PUSH
54134: LD_VAR 0 2
54138: PUSH
54139: LD_INT 1
54141: PUSH
54142: EMPTY
54143: LIST
54144: LIST
54145: LIST
54146: PUSH
54147: LD_VAR 0 1
54151: PUSH
54152: LD_INT 4
54154: PLUS
54155: PUSH
54156: LD_VAR 0 2
54160: PUSH
54161: LD_INT 4
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: LIST
54168: PUSH
54169: LD_VAR 0 1
54173: PUSH
54174: LD_INT 3
54176: PLUS
54177: PUSH
54178: LD_VAR 0 2
54182: PUSH
54183: LD_INT 3
54185: PLUS
54186: PUSH
54187: LD_INT 5
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: LIST
54194: PUSH
54195: LD_VAR 0 1
54199: PUSH
54200: LD_VAR 0 2
54204: PUSH
54205: LD_INT 4
54207: PLUS
54208: PUSH
54209: LD_INT 0
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: LIST
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: LIST
54221: LIST
54222: LIST
54223: ST_TO_ADDR
// end ; 1 :
54224: GO 54924
54226: LD_INT 1
54228: DOUBLE
54229: EQUAL
54230: IFTRUE 54234
54232: GO 54367
54234: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
54235: LD_ADDR_VAR 0 5
54239: PUSH
54240: LD_VAR 0 1
54244: PUSH
54245: LD_VAR 0 2
54249: PUSH
54250: LD_INT 4
54252: MINUS
54253: PUSH
54254: LD_INT 3
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: LIST
54261: PUSH
54262: LD_VAR 0 1
54266: PUSH
54267: LD_INT 3
54269: MINUS
54270: PUSH
54271: LD_VAR 0 2
54275: PUSH
54276: LD_INT 3
54278: MINUS
54279: PUSH
54280: LD_INT 2
54282: PUSH
54283: EMPTY
54284: LIST
54285: LIST
54286: LIST
54287: PUSH
54288: LD_VAR 0 1
54292: PUSH
54293: LD_INT 4
54295: MINUS
54296: PUSH
54297: LD_VAR 0 2
54301: PUSH
54302: LD_INT 1
54304: PUSH
54305: EMPTY
54306: LIST
54307: LIST
54308: LIST
54309: PUSH
54310: LD_VAR 0 1
54314: PUSH
54315: LD_VAR 0 2
54319: PUSH
54320: LD_INT 3
54322: PLUS
54323: PUSH
54324: LD_INT 0
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: LIST
54331: PUSH
54332: LD_VAR 0 1
54336: PUSH
54337: LD_INT 4
54339: PLUS
54340: PUSH
54341: LD_VAR 0 2
54345: PUSH
54346: LD_INT 4
54348: PLUS
54349: PUSH
54350: LD_INT 5
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: LIST
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: LIST
54362: LIST
54363: LIST
54364: ST_TO_ADDR
// end ; 2 :
54365: GO 54924
54367: LD_INT 2
54369: DOUBLE
54370: EQUAL
54371: IFTRUE 54375
54373: GO 54504
54375: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
54376: LD_ADDR_VAR 0 5
54380: PUSH
54381: LD_VAR 0 1
54385: PUSH
54386: LD_VAR 0 2
54390: PUSH
54391: LD_INT 3
54393: MINUS
54394: PUSH
54395: LD_INT 3
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: LIST
54402: PUSH
54403: LD_VAR 0 1
54407: PUSH
54408: LD_INT 4
54410: PLUS
54411: PUSH
54412: LD_VAR 0 2
54416: PUSH
54417: LD_INT 4
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: LIST
54424: PUSH
54425: LD_VAR 0 1
54429: PUSH
54430: LD_VAR 0 2
54434: PUSH
54435: LD_INT 4
54437: PLUS
54438: PUSH
54439: LD_INT 0
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: LIST
54446: PUSH
54447: LD_VAR 0 1
54451: PUSH
54452: LD_INT 3
54454: MINUS
54455: PUSH
54456: LD_VAR 0 2
54460: PUSH
54461: LD_INT 1
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: LIST
54468: PUSH
54469: LD_VAR 0 1
54473: PUSH
54474: LD_INT 4
54476: MINUS
54477: PUSH
54478: LD_VAR 0 2
54482: PUSH
54483: LD_INT 4
54485: MINUS
54486: PUSH
54487: LD_INT 2
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: LIST
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: LIST
54499: LIST
54500: LIST
54501: ST_TO_ADDR
// end ; 3 :
54502: GO 54924
54504: LD_INT 3
54506: DOUBLE
54507: EQUAL
54508: IFTRUE 54512
54510: GO 54645
54512: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
54513: LD_ADDR_VAR 0 5
54517: PUSH
54518: LD_VAR 0 1
54522: PUSH
54523: LD_INT 3
54525: PLUS
54526: PUSH
54527: LD_VAR 0 2
54531: PUSH
54532: LD_INT 4
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: LIST
54539: PUSH
54540: LD_VAR 0 1
54544: PUSH
54545: LD_INT 4
54547: PLUS
54548: PUSH
54549: LD_VAR 0 2
54553: PUSH
54554: LD_INT 4
54556: PLUS
54557: PUSH
54558: LD_INT 5
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: LIST
54565: PUSH
54566: LD_VAR 0 1
54570: PUSH
54571: LD_INT 4
54573: MINUS
54574: PUSH
54575: LD_VAR 0 2
54579: PUSH
54580: LD_INT 1
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: LIST
54587: PUSH
54588: LD_VAR 0 1
54592: PUSH
54593: LD_VAR 0 2
54597: PUSH
54598: LD_INT 4
54600: MINUS
54601: PUSH
54602: LD_INT 3
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: LIST
54609: PUSH
54610: LD_VAR 0 1
54614: PUSH
54615: LD_INT 3
54617: MINUS
54618: PUSH
54619: LD_VAR 0 2
54623: PUSH
54624: LD_INT 3
54626: MINUS
54627: PUSH
54628: LD_INT 2
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: LIST
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: LIST
54640: LIST
54641: LIST
54642: ST_TO_ADDR
// end ; 4 :
54643: GO 54924
54645: LD_INT 4
54647: DOUBLE
54648: EQUAL
54649: IFTRUE 54653
54651: GO 54786
54653: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
54654: LD_ADDR_VAR 0 5
54658: PUSH
54659: LD_VAR 0 1
54663: PUSH
54664: LD_VAR 0 2
54668: PUSH
54669: LD_INT 4
54671: PLUS
54672: PUSH
54673: LD_INT 0
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: LIST
54680: PUSH
54681: LD_VAR 0 1
54685: PUSH
54686: LD_INT 3
54688: PLUS
54689: PUSH
54690: LD_VAR 0 2
54694: PUSH
54695: LD_INT 3
54697: PLUS
54698: PUSH
54699: LD_INT 5
54701: PUSH
54702: EMPTY
54703: LIST
54704: LIST
54705: LIST
54706: PUSH
54707: LD_VAR 0 1
54711: PUSH
54712: LD_INT 4
54714: PLUS
54715: PUSH
54716: LD_VAR 0 2
54720: PUSH
54721: LD_INT 4
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: LIST
54728: PUSH
54729: LD_VAR 0 1
54733: PUSH
54734: LD_VAR 0 2
54738: PUSH
54739: LD_INT 3
54741: MINUS
54742: PUSH
54743: LD_INT 3
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: LIST
54750: PUSH
54751: LD_VAR 0 1
54755: PUSH
54756: LD_INT 4
54758: MINUS
54759: PUSH
54760: LD_VAR 0 2
54764: PUSH
54765: LD_INT 4
54767: MINUS
54768: PUSH
54769: LD_INT 2
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: LIST
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: ST_TO_ADDR
// end ; 5 :
54784: GO 54924
54786: LD_INT 5
54788: DOUBLE
54789: EQUAL
54790: IFTRUE 54794
54792: GO 54923
54794: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
54795: LD_ADDR_VAR 0 5
54799: PUSH
54800: LD_VAR 0 1
54804: PUSH
54805: LD_INT 4
54807: MINUS
54808: PUSH
54809: LD_VAR 0 2
54813: PUSH
54814: LD_INT 1
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: LIST
54821: PUSH
54822: LD_VAR 0 1
54826: PUSH
54827: LD_VAR 0 2
54831: PUSH
54832: LD_INT 4
54834: MINUS
54835: PUSH
54836: LD_INT 3
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: LIST
54843: PUSH
54844: LD_VAR 0 1
54848: PUSH
54849: LD_INT 4
54851: PLUS
54852: PUSH
54853: LD_VAR 0 2
54857: PUSH
54858: LD_INT 4
54860: PLUS
54861: PUSH
54862: LD_INT 5
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: LIST
54869: PUSH
54870: LD_VAR 0 1
54874: PUSH
54875: LD_INT 3
54877: PLUS
54878: PUSH
54879: LD_VAR 0 2
54883: PUSH
54884: LD_INT 4
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: LIST
54891: PUSH
54892: LD_VAR 0 1
54896: PUSH
54897: LD_VAR 0 2
54901: PUSH
54902: LD_INT 3
54904: PLUS
54905: PUSH
54906: LD_INT 0
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: LIST
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: ST_TO_ADDR
// end ; end ;
54921: GO 54924
54923: POP
// result := list ;
54924: LD_ADDR_VAR 0 4
54928: PUSH
54929: LD_VAR 0 5
54933: ST_TO_ADDR
// end ;
54934: LD_VAR 0 4
54938: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
54939: LD_INT 0
54941: PPUSH
54942: PPUSH
54943: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
54944: LD_VAR 0 1
54948: NOT
54949: PUSH
54950: LD_VAR 0 2
54954: PUSH
54955: LD_INT 1
54957: PUSH
54958: LD_INT 2
54960: PUSH
54961: LD_INT 3
54963: PUSH
54964: LD_INT 4
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: LIST
54971: LIST
54972: IN
54973: NOT
54974: OR
54975: IFFALSE 54979
// exit ;
54977: GO 55071
// tmp := [ ] ;
54979: LD_ADDR_VAR 0 5
54983: PUSH
54984: EMPTY
54985: ST_TO_ADDR
// for i in units do
54986: LD_ADDR_VAR 0 4
54990: PUSH
54991: LD_VAR 0 1
54995: PUSH
54996: FOR_IN
54997: IFFALSE 55040
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
54999: LD_ADDR_VAR 0 5
55003: PUSH
55004: LD_VAR 0 5
55008: PPUSH
55009: LD_VAR 0 5
55013: PUSH
55014: LD_INT 1
55016: PLUS
55017: PPUSH
55018: LD_VAR 0 4
55022: PPUSH
55023: LD_VAR 0 2
55027: PPUSH
55028: CALL_OW 259
55032: PPUSH
55033: CALL_OW 2
55037: ST_TO_ADDR
55038: GO 54996
55040: POP
55041: POP
// if not tmp then
55042: LD_VAR 0 5
55046: NOT
55047: IFFALSE 55051
// exit ;
55049: GO 55071
// result := SortListByListDesc ( units , tmp ) ;
55051: LD_ADDR_VAR 0 3
55055: PUSH
55056: LD_VAR 0 1
55060: PPUSH
55061: LD_VAR 0 5
55065: PPUSH
55066: CALL_OW 77
55070: ST_TO_ADDR
// end ;
55071: LD_VAR 0 3
55075: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
55076: LD_INT 0
55078: PPUSH
55079: PPUSH
55080: PPUSH
// x := GetX ( building ) ;
55081: LD_ADDR_VAR 0 4
55085: PUSH
55086: LD_VAR 0 2
55090: PPUSH
55091: CALL_OW 250
55095: ST_TO_ADDR
// y := GetY ( building ) ;
55096: LD_ADDR_VAR 0 5
55100: PUSH
55101: LD_VAR 0 2
55105: PPUSH
55106: CALL_OW 251
55110: ST_TO_ADDR
// if GetTaskList ( unit ) then
55111: LD_VAR 0 1
55115: PPUSH
55116: CALL_OW 437
55120: IFFALSE 55215
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
55122: LD_STRING e
55124: PUSH
55125: LD_VAR 0 1
55129: PPUSH
55130: CALL_OW 437
55134: PUSH
55135: LD_INT 1
55137: ARRAY
55138: PUSH
55139: LD_INT 1
55141: ARRAY
55142: EQUAL
55143: PUSH
55144: LD_VAR 0 4
55148: PUSH
55149: LD_VAR 0 1
55153: PPUSH
55154: CALL_OW 437
55158: PUSH
55159: LD_INT 1
55161: ARRAY
55162: PUSH
55163: LD_INT 2
55165: ARRAY
55166: EQUAL
55167: AND
55168: PUSH
55169: LD_VAR 0 5
55173: PUSH
55174: LD_VAR 0 1
55178: PPUSH
55179: CALL_OW 437
55183: PUSH
55184: LD_INT 1
55186: ARRAY
55187: PUSH
55188: LD_INT 3
55190: ARRAY
55191: EQUAL
55192: AND
55193: IFFALSE 55205
// result := true else
55195: LD_ADDR_VAR 0 3
55199: PUSH
55200: LD_INT 1
55202: ST_TO_ADDR
55203: GO 55213
// result := false ;
55205: LD_ADDR_VAR 0 3
55209: PUSH
55210: LD_INT 0
55212: ST_TO_ADDR
// end else
55213: GO 55223
// result := false ;
55215: LD_ADDR_VAR 0 3
55219: PUSH
55220: LD_INT 0
55222: ST_TO_ADDR
// end ;
55223: LD_VAR 0 3
55227: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
55228: LD_INT 0
55230: PPUSH
55231: PPUSH
55232: PPUSH
55233: PPUSH
// if not unit or not area then
55234: LD_VAR 0 1
55238: NOT
55239: PUSH
55240: LD_VAR 0 2
55244: NOT
55245: OR
55246: IFFALSE 55250
// exit ;
55248: GO 55414
// tmp := AreaToList ( area , i ) ;
55250: LD_ADDR_VAR 0 6
55254: PUSH
55255: LD_VAR 0 2
55259: PPUSH
55260: LD_VAR 0 5
55264: PPUSH
55265: CALL_OW 517
55269: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
55270: LD_ADDR_VAR 0 5
55274: PUSH
55275: DOUBLE
55276: LD_INT 1
55278: DEC
55279: ST_TO_ADDR
55280: LD_VAR 0 6
55284: PUSH
55285: LD_INT 1
55287: ARRAY
55288: PUSH
55289: FOR_TO
55290: IFFALSE 55412
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
55292: LD_ADDR_VAR 0 7
55296: PUSH
55297: LD_VAR 0 6
55301: PUSH
55302: LD_INT 1
55304: ARRAY
55305: PUSH
55306: LD_VAR 0 5
55310: ARRAY
55311: PUSH
55312: LD_VAR 0 6
55316: PUSH
55317: LD_INT 2
55319: ARRAY
55320: PUSH
55321: LD_VAR 0 5
55325: ARRAY
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
55331: LD_VAR 0 7
55335: PUSH
55336: LD_INT 1
55338: ARRAY
55339: PPUSH
55340: LD_VAR 0 7
55344: PUSH
55345: LD_INT 2
55347: ARRAY
55348: PPUSH
55349: CALL_OW 428
55353: PUSH
55354: LD_INT 0
55356: EQUAL
55357: IFFALSE 55410
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
55359: LD_VAR 0 1
55363: PPUSH
55364: LD_VAR 0 7
55368: PUSH
55369: LD_INT 1
55371: ARRAY
55372: PPUSH
55373: LD_VAR 0 7
55377: PUSH
55378: LD_INT 2
55380: ARRAY
55381: PPUSH
55382: LD_VAR 0 3
55386: PPUSH
55387: CALL_OW 48
// result := IsPlaced ( unit ) ;
55391: LD_ADDR_VAR 0 4
55395: PUSH
55396: LD_VAR 0 1
55400: PPUSH
55401: CALL_OW 305
55405: ST_TO_ADDR
// exit ;
55406: POP
55407: POP
55408: GO 55414
// end ; end ;
55410: GO 55289
55412: POP
55413: POP
// end ;
55414: LD_VAR 0 4
55418: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
55419: LD_INT 0
55421: PPUSH
55422: PPUSH
55423: PPUSH
// if not side or side > 8 then
55424: LD_VAR 0 1
55428: NOT
55429: PUSH
55430: LD_VAR 0 1
55434: PUSH
55435: LD_INT 8
55437: GREATER
55438: OR
55439: IFFALSE 55443
// exit ;
55441: GO 55630
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
55443: LD_ADDR_VAR 0 4
55447: PUSH
55448: LD_INT 22
55450: PUSH
55451: LD_VAR 0 1
55455: PUSH
55456: EMPTY
55457: LIST
55458: LIST
55459: PUSH
55460: LD_INT 21
55462: PUSH
55463: LD_INT 3
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: PPUSH
55474: CALL_OW 69
55478: ST_TO_ADDR
// if not tmp then
55479: LD_VAR 0 4
55483: NOT
55484: IFFALSE 55488
// exit ;
55486: GO 55630
// enable_addtolog := true ;
55488: LD_ADDR_OWVAR 81
55492: PUSH
55493: LD_INT 1
55495: ST_TO_ADDR
// AddToLog ( [ ) ;
55496: LD_STRING [
55498: PPUSH
55499: CALL_OW 561
// for i in tmp do
55503: LD_ADDR_VAR 0 3
55507: PUSH
55508: LD_VAR 0 4
55512: PUSH
55513: FOR_IN
55514: IFFALSE 55621
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
55516: LD_STRING [
55518: PUSH
55519: LD_VAR 0 3
55523: PPUSH
55524: CALL_OW 266
55528: STR
55529: PUSH
55530: LD_STRING , 
55532: STR
55533: PUSH
55534: LD_VAR 0 3
55538: PPUSH
55539: CALL_OW 250
55543: STR
55544: PUSH
55545: LD_STRING , 
55547: STR
55548: PUSH
55549: LD_VAR 0 3
55553: PPUSH
55554: CALL_OW 251
55558: STR
55559: PUSH
55560: LD_STRING , 
55562: STR
55563: PUSH
55564: LD_VAR 0 3
55568: PPUSH
55569: CALL_OW 254
55573: STR
55574: PUSH
55575: LD_STRING , 
55577: STR
55578: PUSH
55579: LD_VAR 0 3
55583: PPUSH
55584: LD_INT 1
55586: PPUSH
55587: CALL_OW 268
55591: STR
55592: PUSH
55593: LD_STRING , 
55595: STR
55596: PUSH
55597: LD_VAR 0 3
55601: PPUSH
55602: LD_INT 2
55604: PPUSH
55605: CALL_OW 268
55609: STR
55610: PUSH
55611: LD_STRING ],
55613: STR
55614: PPUSH
55615: CALL_OW 561
// end ;
55619: GO 55513
55621: POP
55622: POP
// AddToLog ( ]; ) ;
55623: LD_STRING ];
55625: PPUSH
55626: CALL_OW 561
// end ;
55630: LD_VAR 0 2
55634: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
55635: LD_INT 0
55637: PPUSH
55638: PPUSH
55639: PPUSH
55640: PPUSH
55641: PPUSH
// if not area or not rate or not max then
55642: LD_VAR 0 1
55646: NOT
55647: PUSH
55648: LD_VAR 0 2
55652: NOT
55653: OR
55654: PUSH
55655: LD_VAR 0 4
55659: NOT
55660: OR
55661: IFFALSE 55665
// exit ;
55663: GO 55857
// while 1 do
55665: LD_INT 1
55667: IFFALSE 55857
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
55669: LD_ADDR_VAR 0 9
55673: PUSH
55674: LD_VAR 0 1
55678: PPUSH
55679: LD_INT 1
55681: PPUSH
55682: CALL_OW 287
55686: PUSH
55687: LD_INT 10
55689: MUL
55690: ST_TO_ADDR
// r := rate / 10 ;
55691: LD_ADDR_VAR 0 7
55695: PUSH
55696: LD_VAR 0 2
55700: PUSH
55701: LD_INT 10
55703: DIVREAL
55704: ST_TO_ADDR
// time := 1 1$00 ;
55705: LD_ADDR_VAR 0 8
55709: PUSH
55710: LD_INT 2100
55712: ST_TO_ADDR
// if amount < min then
55713: LD_VAR 0 9
55717: PUSH
55718: LD_VAR 0 3
55722: LESS
55723: IFFALSE 55741
// r := r * 2 else
55725: LD_ADDR_VAR 0 7
55729: PUSH
55730: LD_VAR 0 7
55734: PUSH
55735: LD_INT 2
55737: MUL
55738: ST_TO_ADDR
55739: GO 55767
// if amount > max then
55741: LD_VAR 0 9
55745: PUSH
55746: LD_VAR 0 4
55750: GREATER
55751: IFFALSE 55767
// r := r / 2 ;
55753: LD_ADDR_VAR 0 7
55757: PUSH
55758: LD_VAR 0 7
55762: PUSH
55763: LD_INT 2
55765: DIVREAL
55766: ST_TO_ADDR
// time := time / r ;
55767: LD_ADDR_VAR 0 8
55771: PUSH
55772: LD_VAR 0 8
55776: PUSH
55777: LD_VAR 0 7
55781: DIVREAL
55782: ST_TO_ADDR
// if time < 0 then
55783: LD_VAR 0 8
55787: PUSH
55788: LD_INT 0
55790: LESS
55791: IFFALSE 55808
// time := time * - 1 ;
55793: LD_ADDR_VAR 0 8
55797: PUSH
55798: LD_VAR 0 8
55802: PUSH
55803: LD_INT 1
55805: NEG
55806: MUL
55807: ST_TO_ADDR
// wait ( time ) ;
55808: LD_VAR 0 8
55812: PPUSH
55813: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
55817: LD_INT 35
55819: PPUSH
55820: LD_INT 875
55822: PPUSH
55823: CALL_OW 12
55827: PPUSH
55828: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
55832: LD_INT 1
55834: PPUSH
55835: LD_INT 5
55837: PPUSH
55838: CALL_OW 12
55842: PPUSH
55843: LD_VAR 0 1
55847: PPUSH
55848: LD_INT 1
55850: PPUSH
55851: CALL_OW 55
// end ;
55855: GO 55665
// end ;
55857: LD_VAR 0 5
55861: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
55862: LD_INT 0
55864: PPUSH
55865: PPUSH
55866: PPUSH
55867: PPUSH
55868: PPUSH
55869: PPUSH
55870: PPUSH
55871: PPUSH
// if not turrets or not factories then
55872: LD_VAR 0 1
55876: NOT
55877: PUSH
55878: LD_VAR 0 2
55882: NOT
55883: OR
55884: IFFALSE 55888
// exit ;
55886: GO 56195
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
55888: LD_ADDR_VAR 0 10
55892: PUSH
55893: LD_INT 5
55895: PUSH
55896: LD_INT 6
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: PUSH
55903: LD_INT 2
55905: PUSH
55906: LD_INT 4
55908: PUSH
55909: EMPTY
55910: LIST
55911: LIST
55912: PUSH
55913: LD_INT 3
55915: PUSH
55916: LD_INT 5
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: LIST
55927: PUSH
55928: LD_INT 24
55930: PUSH
55931: LD_INT 25
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: PUSH
55938: LD_INT 23
55940: PUSH
55941: LD_INT 27
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PUSH
55952: LD_INT 42
55954: PUSH
55955: LD_INT 43
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: LD_INT 44
55964: PUSH
55965: LD_INT 46
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: LD_INT 45
55974: PUSH
55975: LD_INT 47
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: LIST
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: LIST
55991: ST_TO_ADDR
// result := [ ] ;
55992: LD_ADDR_VAR 0 3
55996: PUSH
55997: EMPTY
55998: ST_TO_ADDR
// for i in turrets do
55999: LD_ADDR_VAR 0 4
56003: PUSH
56004: LD_VAR 0 1
56008: PUSH
56009: FOR_IN
56010: IFFALSE 56193
// begin nat := GetNation ( i ) ;
56012: LD_ADDR_VAR 0 7
56016: PUSH
56017: LD_VAR 0 4
56021: PPUSH
56022: CALL_OW 248
56026: ST_TO_ADDR
// weapon := 0 ;
56027: LD_ADDR_VAR 0 8
56031: PUSH
56032: LD_INT 0
56034: ST_TO_ADDR
// if not nat then
56035: LD_VAR 0 7
56039: NOT
56040: IFFALSE 56044
// continue ;
56042: GO 56009
// for j in list [ nat ] do
56044: LD_ADDR_VAR 0 5
56048: PUSH
56049: LD_VAR 0 10
56053: PUSH
56054: LD_VAR 0 7
56058: ARRAY
56059: PUSH
56060: FOR_IN
56061: IFFALSE 56102
// if GetBWeapon ( i ) = j [ 1 ] then
56063: LD_VAR 0 4
56067: PPUSH
56068: CALL_OW 269
56072: PUSH
56073: LD_VAR 0 5
56077: PUSH
56078: LD_INT 1
56080: ARRAY
56081: EQUAL
56082: IFFALSE 56100
// begin weapon := j [ 2 ] ;
56084: LD_ADDR_VAR 0 8
56088: PUSH
56089: LD_VAR 0 5
56093: PUSH
56094: LD_INT 2
56096: ARRAY
56097: ST_TO_ADDR
// break ;
56098: GO 56102
// end ;
56100: GO 56060
56102: POP
56103: POP
// if not weapon then
56104: LD_VAR 0 8
56108: NOT
56109: IFFALSE 56113
// continue ;
56111: GO 56009
// for k in factories do
56113: LD_ADDR_VAR 0 6
56117: PUSH
56118: LD_VAR 0 2
56122: PUSH
56123: FOR_IN
56124: IFFALSE 56189
// begin weapons := AvailableWeaponList ( k ) ;
56126: LD_ADDR_VAR 0 9
56130: PUSH
56131: LD_VAR 0 6
56135: PPUSH
56136: CALL_OW 478
56140: ST_TO_ADDR
// if not weapons then
56141: LD_VAR 0 9
56145: NOT
56146: IFFALSE 56150
// continue ;
56148: GO 56123
// if weapon in weapons then
56150: LD_VAR 0 8
56154: PUSH
56155: LD_VAR 0 9
56159: IN
56160: IFFALSE 56187
// begin result := [ i , weapon ] ;
56162: LD_ADDR_VAR 0 3
56166: PUSH
56167: LD_VAR 0 4
56171: PUSH
56172: LD_VAR 0 8
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: ST_TO_ADDR
// exit ;
56181: POP
56182: POP
56183: POP
56184: POP
56185: GO 56195
// end ; end ;
56187: GO 56123
56189: POP
56190: POP
// end ;
56191: GO 56009
56193: POP
56194: POP
// end ;
56195: LD_VAR 0 3
56199: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
56200: LD_INT 0
56202: PPUSH
// if not side or side > 8 then
56203: LD_VAR 0 3
56207: NOT
56208: PUSH
56209: LD_VAR 0 3
56213: PUSH
56214: LD_INT 8
56216: GREATER
56217: OR
56218: IFFALSE 56222
// exit ;
56220: GO 56281
// if not range then
56222: LD_VAR 0 4
56226: NOT
56227: IFFALSE 56238
// range := - 12 ;
56229: LD_ADDR_VAR 0 4
56233: PUSH
56234: LD_INT 12
56236: NEG
56237: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
56238: LD_VAR 0 1
56242: PPUSH
56243: LD_VAR 0 2
56247: PPUSH
56248: LD_VAR 0 3
56252: PPUSH
56253: LD_VAR 0 4
56257: PPUSH
56258: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
56262: LD_VAR 0 1
56266: PPUSH
56267: LD_VAR 0 2
56271: PPUSH
56272: LD_VAR 0 3
56276: PPUSH
56277: CALL_OW 331
// end ;
56281: LD_VAR 0 5
56285: RET
// export function Video ( mode ) ; begin
56286: LD_INT 0
56288: PPUSH
// ingame_video = mode ;
56289: LD_ADDR_OWVAR 52
56293: PUSH
56294: LD_VAR 0 1
56298: ST_TO_ADDR
// interface_hidden = mode ;
56299: LD_ADDR_OWVAR 54
56303: PUSH
56304: LD_VAR 0 1
56308: ST_TO_ADDR
// end ;
56309: LD_VAR 0 2
56313: RET
// export function Join ( array , element ) ; begin
56314: LD_INT 0
56316: PPUSH
// result := Replace ( array , array + 1 , element ) ;
56317: LD_ADDR_VAR 0 3
56321: PUSH
56322: LD_VAR 0 1
56326: PPUSH
56327: LD_VAR 0 1
56331: PUSH
56332: LD_INT 1
56334: PLUS
56335: PPUSH
56336: LD_VAR 0 2
56340: PPUSH
56341: CALL_OW 1
56345: ST_TO_ADDR
// end ;
56346: LD_VAR 0 3
56350: RET
// export function JoinUnion ( array , element ) ; begin
56351: LD_INT 0
56353: PPUSH
// result := array union element ;
56354: LD_ADDR_VAR 0 3
56358: PUSH
56359: LD_VAR 0 1
56363: PUSH
56364: LD_VAR 0 2
56368: UNION
56369: ST_TO_ADDR
// end ;
56370: LD_VAR 0 3
56374: RET
// export function GetBehemoths ( side ) ; begin
56375: LD_INT 0
56377: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
56378: LD_ADDR_VAR 0 2
56382: PUSH
56383: LD_INT 22
56385: PUSH
56386: LD_VAR 0 1
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: LD_INT 31
56397: PUSH
56398: LD_INT 25
56400: PUSH
56401: EMPTY
56402: LIST
56403: LIST
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PPUSH
56409: CALL_OW 69
56413: ST_TO_ADDR
// end ;
56414: LD_VAR 0 2
56418: RET
// export function Shuffle ( array ) ; var i , index ; begin
56419: LD_INT 0
56421: PPUSH
56422: PPUSH
56423: PPUSH
// result := [ ] ;
56424: LD_ADDR_VAR 0 2
56428: PUSH
56429: EMPTY
56430: ST_TO_ADDR
// if not array then
56431: LD_VAR 0 1
56435: NOT
56436: IFFALSE 56440
// exit ;
56438: GO 56539
// Randomize ;
56440: CALL_OW 10
// for i = array downto 1 do
56444: LD_ADDR_VAR 0 3
56448: PUSH
56449: DOUBLE
56450: LD_VAR 0 1
56454: INC
56455: ST_TO_ADDR
56456: LD_INT 1
56458: PUSH
56459: FOR_DOWNTO
56460: IFFALSE 56537
// begin index := rand ( 1 , array ) ;
56462: LD_ADDR_VAR 0 4
56466: PUSH
56467: LD_INT 1
56469: PPUSH
56470: LD_VAR 0 1
56474: PPUSH
56475: CALL_OW 12
56479: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
56480: LD_ADDR_VAR 0 2
56484: PUSH
56485: LD_VAR 0 2
56489: PPUSH
56490: LD_VAR 0 2
56494: PUSH
56495: LD_INT 1
56497: PLUS
56498: PPUSH
56499: LD_VAR 0 1
56503: PUSH
56504: LD_VAR 0 4
56508: ARRAY
56509: PPUSH
56510: CALL_OW 2
56514: ST_TO_ADDR
// array := Delete ( array , index ) ;
56515: LD_ADDR_VAR 0 1
56519: PUSH
56520: LD_VAR 0 1
56524: PPUSH
56525: LD_VAR 0 4
56529: PPUSH
56530: CALL_OW 3
56534: ST_TO_ADDR
// end ;
56535: GO 56459
56537: POP
56538: POP
// end ;
56539: LD_VAR 0 2
56543: RET
// export function GetBaseMaterials ( base ) ; begin
56544: LD_INT 0
56546: PPUSH
// result := [ 0 , 0 , 0 ] ;
56547: LD_ADDR_VAR 0 2
56551: PUSH
56552: LD_INT 0
56554: PUSH
56555: LD_INT 0
56557: PUSH
56558: LD_INT 0
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: LIST
56565: ST_TO_ADDR
// if not base then
56566: LD_VAR 0 1
56570: NOT
56571: IFFALSE 56575
// exit ;
56573: GO 56624
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
56575: LD_ADDR_VAR 0 2
56579: PUSH
56580: LD_VAR 0 1
56584: PPUSH
56585: LD_INT 1
56587: PPUSH
56588: CALL_OW 275
56592: PUSH
56593: LD_VAR 0 1
56597: PPUSH
56598: LD_INT 2
56600: PPUSH
56601: CALL_OW 275
56605: PUSH
56606: LD_VAR 0 1
56610: PPUSH
56611: LD_INT 3
56613: PPUSH
56614: CALL_OW 275
56618: PUSH
56619: EMPTY
56620: LIST
56621: LIST
56622: LIST
56623: ST_TO_ADDR
// end ;
56624: LD_VAR 0 2
56628: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
56629: LD_INT 0
56631: PPUSH
56632: PPUSH
// result := array ;
56633: LD_ADDR_VAR 0 3
56637: PUSH
56638: LD_VAR 0 1
56642: ST_TO_ADDR
// if size > 0 then
56643: LD_VAR 0 2
56647: PUSH
56648: LD_INT 0
56650: GREATER
56651: IFFALSE 56697
// for i := array downto size do
56653: LD_ADDR_VAR 0 4
56657: PUSH
56658: DOUBLE
56659: LD_VAR 0 1
56663: INC
56664: ST_TO_ADDR
56665: LD_VAR 0 2
56669: PUSH
56670: FOR_DOWNTO
56671: IFFALSE 56695
// result := Delete ( result , result ) ;
56673: LD_ADDR_VAR 0 3
56677: PUSH
56678: LD_VAR 0 3
56682: PPUSH
56683: LD_VAR 0 3
56687: PPUSH
56688: CALL_OW 3
56692: ST_TO_ADDR
56693: GO 56670
56695: POP
56696: POP
// end ;
56697: LD_VAR 0 3
56701: RET
// export function ComExit ( unit ) ; var tmp ; begin
56702: LD_INT 0
56704: PPUSH
56705: PPUSH
// if not IsInUnit ( unit ) then
56706: LD_VAR 0 1
56710: PPUSH
56711: CALL_OW 310
56715: NOT
56716: IFFALSE 56720
// exit ;
56718: GO 56780
// tmp := IsInUnit ( unit ) ;
56720: LD_ADDR_VAR 0 3
56724: PUSH
56725: LD_VAR 0 1
56729: PPUSH
56730: CALL_OW 310
56734: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
56735: LD_VAR 0 3
56739: PPUSH
56740: CALL_OW 247
56744: PUSH
56745: LD_INT 2
56747: EQUAL
56748: IFFALSE 56761
// ComExitVehicle ( unit ) else
56750: LD_VAR 0 1
56754: PPUSH
56755: CALL_OW 121
56759: GO 56770
// ComExitBuilding ( unit ) ;
56761: LD_VAR 0 1
56765: PPUSH
56766: CALL_OW 122
// result := tmp ;
56770: LD_ADDR_VAR 0 2
56774: PUSH
56775: LD_VAR 0 3
56779: ST_TO_ADDR
// end ;
56780: LD_VAR 0 2
56784: RET
// export function ResetHc ; begin
56785: LD_INT 0
56787: PPUSH
// InitHc ;
56788: CALL_OW 19
// hc_importance := 0 ;
56792: LD_ADDR_OWVAR 32
56796: PUSH
56797: LD_INT 0
56799: ST_TO_ADDR
// end ;
56800: LD_VAR 0 1
56804: RET
