// export JMM , Gladstone , Denis , Lisa , Frank , Bobby , Cyrus , Brown , Donaldson ; export others , randomsDelta ; export apemans , yourApemans ; export yourVehicles ; export DeltaDoctor ; export Harisson ; export selectedPeople ; export baseCorrect ; export cutscene ; export lab ; export resources ; export mission_prefix , mission_prefix_prev ; starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// FogOff ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 344
// baseCorrect = 0 ;
  15: LD_ADDR_EXP 18
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// cutscene = 1 ;
  23: LD_ADDR_EXP 19
  27: PUSH
  28: LD_INT 1
  30: ST_TO_ADDR
// apemans = [ ] ;
  31: LD_ADDR_EXP 12
  35: PUSH
  36: EMPTY
  37: ST_TO_ADDR
// yourApemans = [ ] ;
  38: LD_ADDR_EXP 13
  42: PUSH
  43: EMPTY
  44: ST_TO_ADDR
// yourVehicles = [ ] ;
  45: LD_ADDR_EXP 14
  49: PUSH
  50: EMPTY
  51: ST_TO_ADDR
// randomsDelta := [ ] ;
  52: LD_ADDR_EXP 11
  56: PUSH
  57: EMPTY
  58: ST_TO_ADDR
// resources = [ ] ;
  59: LD_ADDR_EXP 21
  63: PUSH
  64: EMPTY
  65: ST_TO_ADDR
// mission_prefix := 06_ ;
  66: LD_ADDR_EXP 22
  70: PUSH
  71: LD_STRING 06_
  73: ST_TO_ADDR
// mission_prefix_prev := 05_ ;
  74: LD_ADDR_EXP 23
  78: PUSH
  79: LD_STRING 05_
  81: ST_TO_ADDR
// CreateNature ;
  82: CALL 166 0 0
// PrepareDeltaBase ;
  86: CALL 2408 0 0
// LoadVehicles ;
  90: CALL 1448 0 0
// PrepareHeroes ;
  94: CALL 287 0 0
// PrepareRandoms ;
  98: CALL 1749 0 0
// lab = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
 102: LD_ADDR_EXP 20
 106: PUSH
 107: LD_INT 22
 109: PUSH
 110: LD_INT 1
 112: PUSH
 113: EMPTY
 114: LIST
 115: LIST
 116: PUSH
 117: LD_INT 2
 119: PUSH
 120: LD_INT 30
 122: PUSH
 123: LD_INT 6
 125: PUSH
 126: EMPTY
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 30
 132: PUSH
 133: LD_INT 7
 135: PUSH
 136: EMPTY
 137: LIST
 138: LIST
 139: PUSH
 140: LD_INT 30
 142: PUSH
 143: LD_INT 8
 145: PUSH
 146: EMPTY
 147: LIST
 148: LIST
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: LIST
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: PPUSH
 160: CALL_OW 69
 164: ST_TO_ADDR
// end ;
 165: END
// export function CreateNature ; var i ; begin
 166: LD_INT 0
 168: PPUSH
 169: PPUSH
// uc_side := 0 ;
 170: LD_ADDR_OWVAR 20
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// uc_nation := 0 ;
 178: LD_ADDR_OWVAR 21
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// for i = 1 to 4 do
 186: LD_ADDR_VAR 0 2
 190: PUSH
 191: DOUBLE
 192: LD_INT 1
 194: DEC
 195: ST_TO_ADDR
 196: LD_INT 4
 198: PUSH
 199: FOR_TO
 200: IFFALSE 280
// begin hc_gallery :=  ;
 202: LD_ADDR_OWVAR 33
 206: PUSH
 207: LD_STRING 
 209: ST_TO_ADDR
// hc_name :=  ;
 210: LD_ADDR_OWVAR 26
 214: PUSH
 215: LD_STRING 
 217: ST_TO_ADDR
// hc_attr := [ rand ( 10 , 11 ) , rand ( 10 , 12 ) ] ;
 218: LD_ADDR_OWVAR 29
 222: PUSH
 223: LD_INT 10
 225: PPUSH
 226: LD_INT 11
 228: PPUSH
 229: CALL_OW 12
 233: PUSH
 234: LD_INT 10
 236: PPUSH
 237: LD_INT 12
 239: PPUSH
 240: CALL_OW 12
 244: PUSH
 245: EMPTY
 246: LIST
 247: LIST
 248: ST_TO_ADDR
// hc_class := class_apeman ;
 249: LD_ADDR_OWVAR 28
 253: PUSH
 254: LD_INT 12
 256: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , 22 , 18 , 20 , false ) ;
 257: CALL_OW 44
 261: PPUSH
 262: LD_INT 22
 264: PPUSH
 265: LD_INT 18
 267: PPUSH
 268: LD_INT 20
 270: PPUSH
 271: LD_INT 0
 273: PPUSH
 274: CALL_OW 50
// end ;
 278: GO 199
 280: POP
 281: POP
// end ; end_of_file
 282: LD_VAR 0 1
 286: RET
// export function PrepareHeroes ; var i , tmp , ape , test ; begin
 287: LD_INT 0
 289: PPUSH
 290: PPUSH
 291: PPUSH
 292: PPUSH
 293: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
 294: LD_ADDR_VAR 0 3
 298: PUSH
 299: LD_INT 22
 301: PUSH
 302: LD_INT 1
 304: PUSH
 305: EMPTY
 306: LIST
 307: LIST
 308: PUSH
 309: LD_INT 21
 311: PUSH
 312: LD_INT 3
 314: PUSH
 315: EMPTY
 316: LIST
 317: LIST
 318: PUSH
 319: LD_INT 30
 321: PUSH
 322: LD_INT 0
 324: PUSH
 325: EMPTY
 326: LIST
 327: LIST
 328: PUSH
 329: EMPTY
 330: LIST
 331: LIST
 332: LIST
 333: PPUSH
 334: CALL_OW 69
 338: ST_TO_ADDR
// SetBName ( tmp [ 1 ] , delta ) ;
 339: LD_VAR 0 3
 343: PUSH
 344: LD_INT 1
 346: ARRAY
 347: PPUSH
 348: LD_STRING delta
 350: PPUSH
 351: CALL_OW 500
// uc_side = 1 ;
 355: LD_ADDR_OWVAR 20
 359: PUSH
 360: LD_INT 1
 362: ST_TO_ADDR
// uc_nation = 1 ;
 363: LD_ADDR_OWVAR 21
 367: PUSH
 368: LD_INT 1
 370: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true , mission_prefix_prev ) ;
 371: LD_ADDR_EXP 1
 375: PUSH
 376: LD_STRING JMM
 378: PPUSH
 379: LD_INT 1
 381: PPUSH
 382: LD_EXP 23
 386: PPUSH
 387: CALL 25005 0 3
 391: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ,  ) ;
 392: LD_ADDR_EXP 16
 396: PUSH
 397: LD_STRING Harisson
 399: PPUSH
 400: LD_INT 0
 402: PPUSH
 403: LD_STRING 
 405: PPUSH
 406: CALL 25005 0 3
 410: ST_TO_ADDR
// PlaceUnitXYR ( JMM , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 411: LD_EXP 1
 415: PPUSH
 416: LD_VAR 0 3
 420: PUSH
 421: LD_INT 1
 423: ARRAY
 424: PPUSH
 425: CALL_OW 250
 429: PPUSH
 430: LD_VAR 0 3
 434: PUSH
 435: LD_INT 1
 437: ARRAY
 438: PPUSH
 439: CALL_OW 251
 443: PPUSH
 444: LD_INT 5
 446: PPUSH
 447: LD_INT 0
 449: PPUSH
 450: CALL_OW 50
// SetClass ( JMM , 1 ) ;
 454: LD_EXP 1
 458: PPUSH
 459: LD_INT 1
 461: PPUSH
 462: CALL_OW 336
// Gladstone = PrepareUnit ( Gladstone , true , mission_prefix_prev ) ;
 466: LD_ADDR_EXP 2
 470: PUSH
 471: LD_STRING Gladstone
 473: PPUSH
 474: LD_INT 1
 476: PPUSH
 477: LD_EXP 23
 481: PPUSH
 482: CALL 25005 0 3
 486: ST_TO_ADDR
// PlaceUnitXYR ( Gladstone , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 487: LD_EXP 2
 491: PPUSH
 492: LD_VAR 0 3
 496: PUSH
 497: LD_INT 1
 499: ARRAY
 500: PPUSH
 501: CALL_OW 250
 505: PPUSH
 506: LD_VAR 0 3
 510: PUSH
 511: LD_INT 1
 513: ARRAY
 514: PPUSH
 515: CALL_OW 251
 519: PPUSH
 520: LD_INT 5
 522: PPUSH
 523: LD_INT 0
 525: PPUSH
 526: CALL_OW 50
// SetClass ( Gladstone , 4 ) ;
 530: LD_EXP 2
 534: PPUSH
 535: LD_INT 4
 537: PPUSH
 538: CALL_OW 336
// Denis = PrepareUnit ( Denis , true , mission_prefix_prev ) ;
 542: LD_ADDR_EXP 3
 546: PUSH
 547: LD_STRING Denis
 549: PPUSH
 550: LD_INT 1
 552: PPUSH
 553: LD_EXP 23
 557: PPUSH
 558: CALL 25005 0 3
 562: ST_TO_ADDR
// PlaceUnitXYR ( Denis , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 563: LD_EXP 3
 567: PPUSH
 568: LD_VAR 0 3
 572: PUSH
 573: LD_INT 1
 575: ARRAY
 576: PPUSH
 577: CALL_OW 250
 581: PPUSH
 582: LD_VAR 0 3
 586: PUSH
 587: LD_INT 1
 589: ARRAY
 590: PPUSH
 591: CALL_OW 251
 595: PPUSH
 596: LD_INT 5
 598: PPUSH
 599: LD_INT 0
 601: PPUSH
 602: CALL_OW 50
// SetClass ( Denis , 4 ) ;
 606: LD_EXP 3
 610: PPUSH
 611: LD_INT 4
 613: PPUSH
 614: CALL_OW 336
// if LoadVariable ( FrankInDelta , 0 ) = 1 then
 618: LD_STRING FrankInDelta
 620: PPUSH
 621: LD_INT 0
 623: PPUSH
 624: CALL_OW 30
 628: PUSH
 629: LD_INT 1
 631: EQUAL
 632: IFFALSE 710
// begin Frank = PrepareUnit ( Frank , true , mission_prefix_prev ) ;
 634: LD_ADDR_EXP 5
 638: PUSH
 639: LD_STRING Frank
 641: PPUSH
 642: LD_INT 1
 644: PPUSH
 645: LD_EXP 23
 649: PPUSH
 650: CALL 25005 0 3
 654: ST_TO_ADDR
// PlaceUnitXYR ( Frank , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 655: LD_EXP 5
 659: PPUSH
 660: LD_VAR 0 3
 664: PUSH
 665: LD_INT 1
 667: ARRAY
 668: PPUSH
 669: CALL_OW 250
 673: PPUSH
 674: LD_VAR 0 3
 678: PUSH
 679: LD_INT 1
 681: ARRAY
 682: PPUSH
 683: CALL_OW 251
 687: PPUSH
 688: LD_INT 5
 690: PPUSH
 691: LD_INT 0
 693: PPUSH
 694: CALL_OW 50
// SetClass ( Frank , 1 ) ;
 698: LD_EXP 5
 702: PPUSH
 703: LD_INT 1
 705: PPUSH
 706: CALL_OW 336
// end ; if LoadVariable ( LisaInDelta , 0 ) = 1 then
 710: LD_STRING LisaInDelta
 712: PPUSH
 713: LD_INT 0
 715: PPUSH
 716: CALL_OW 30
 720: PUSH
 721: LD_INT 1
 723: EQUAL
 724: IFFALSE 802
// begin Lisa = PrepareUnit ( Lisa , true , mission_prefix_prev ) ;
 726: LD_ADDR_EXP 4
 730: PUSH
 731: LD_STRING Lisa
 733: PPUSH
 734: LD_INT 1
 736: PPUSH
 737: LD_EXP 23
 741: PPUSH
 742: CALL 25005 0 3
 746: ST_TO_ADDR
// PlaceUnitXYR ( Lisa , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 747: LD_EXP 4
 751: PPUSH
 752: LD_VAR 0 3
 756: PUSH
 757: LD_INT 1
 759: ARRAY
 760: PPUSH
 761: CALL_OW 250
 765: PPUSH
 766: LD_VAR 0 3
 770: PUSH
 771: LD_INT 1
 773: ARRAY
 774: PPUSH
 775: CALL_OW 251
 779: PPUSH
 780: LD_INT 5
 782: PPUSH
 783: LD_INT 0
 785: PPUSH
 786: CALL_OW 50
// SetClass ( Lisa , 1 ) ;
 790: LD_EXP 4
 794: PPUSH
 795: LD_INT 1
 797: PPUSH
 798: CALL_OW 336
// end ; if LoadVariable ( BobbyInDelta , 0 ) = 1 then
 802: LD_STRING BobbyInDelta
 804: PPUSH
 805: LD_INT 0
 807: PPUSH
 808: CALL_OW 30
 812: PUSH
 813: LD_INT 1
 815: EQUAL
 816: IFFALSE 894
// begin Bobby = PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 818: LD_ADDR_EXP 6
 822: PUSH
 823: LD_STRING Bobby
 825: PPUSH
 826: LD_INT 1
 828: PPUSH
 829: LD_EXP 23
 833: PPUSH
 834: CALL 25005 0 3
 838: ST_TO_ADDR
// PlaceUnitXYR ( Bobby , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 839: LD_EXP 6
 843: PPUSH
 844: LD_VAR 0 3
 848: PUSH
 849: LD_INT 1
 851: ARRAY
 852: PPUSH
 853: CALL_OW 250
 857: PPUSH
 858: LD_VAR 0 3
 862: PUSH
 863: LD_INT 1
 865: ARRAY
 866: PPUSH
 867: CALL_OW 251
 871: PPUSH
 872: LD_INT 5
 874: PPUSH
 875: LD_INT 0
 877: PPUSH
 878: CALL_OW 50
// SetClass ( Bobby , 1 ) ;
 882: LD_EXP 6
 886: PPUSH
 887: LD_INT 1
 889: PPUSH
 890: CALL_OW 336
// end ; if LoadVariable ( CyrusInDelta , 0 ) = 1 then
 894: LD_STRING CyrusInDelta
 896: PPUSH
 897: LD_INT 0
 899: PPUSH
 900: CALL_OW 30
 904: PUSH
 905: LD_INT 1
 907: EQUAL
 908: IFFALSE 986
// begin Cyrus = PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
 910: LD_ADDR_EXP 7
 914: PUSH
 915: LD_STRING Cyrus
 917: PPUSH
 918: LD_INT 1
 920: PPUSH
 921: LD_EXP 23
 925: PPUSH
 926: CALL 25005 0 3
 930: ST_TO_ADDR
// PlaceUnitXYR ( Cyrus , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 931: LD_EXP 7
 935: PPUSH
 936: LD_VAR 0 3
 940: PUSH
 941: LD_INT 1
 943: ARRAY
 944: PPUSH
 945: CALL_OW 250
 949: PPUSH
 950: LD_VAR 0 3
 954: PUSH
 955: LD_INT 1
 957: ARRAY
 958: PPUSH
 959: CALL_OW 251
 963: PPUSH
 964: LD_INT 5
 966: PPUSH
 967: LD_INT 0
 969: PPUSH
 970: CALL_OW 50
// SetClass ( Cyrus , 1 ) ;
 974: LD_EXP 7
 978: PPUSH
 979: LD_INT 1
 981: PPUSH
 982: CALL_OW 336
// end ; if LoadVariable ( DonaldsonInDelta , 0 ) = 1 then
 986: LD_STRING DonaldsonInDelta
 988: PPUSH
 989: LD_INT 0
 991: PPUSH
 992: CALL_OW 30
 996: PUSH
 997: LD_INT 1
 999: EQUAL
1000: IFFALSE 1078
// begin Donaldson = PrepareUnit ( Donaldson , true , mission_prefix_prev ) ;
1002: LD_ADDR_EXP 9
1006: PUSH
1007: LD_STRING Donaldson
1009: PPUSH
1010: LD_INT 1
1012: PPUSH
1013: LD_EXP 23
1017: PPUSH
1018: CALL 25005 0 3
1022: ST_TO_ADDR
// PlaceUnitXYR ( Donaldson , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1023: LD_EXP 9
1027: PPUSH
1028: LD_VAR 0 3
1032: PUSH
1033: LD_INT 1
1035: ARRAY
1036: PPUSH
1037: CALL_OW 250
1041: PPUSH
1042: LD_VAR 0 3
1046: PUSH
1047: LD_INT 1
1049: ARRAY
1050: PPUSH
1051: CALL_OW 251
1055: PPUSH
1056: LD_INT 5
1058: PPUSH
1059: LD_INT 0
1061: PPUSH
1062: CALL_OW 50
// SetClass ( Donaldson , 1 ) ;
1066: LD_EXP 9
1070: PPUSH
1071: LD_INT 1
1073: PPUSH
1074: CALL_OW 336
// end ; if LoadVariable ( BrownInDelta , 0 ) = 1 then
1078: LD_STRING BrownInDelta
1080: PPUSH
1081: LD_INT 0
1083: PPUSH
1084: CALL_OW 30
1088: PUSH
1089: LD_INT 1
1091: EQUAL
1092: IFFALSE 1170
// begin Brown = PrepareUnit ( Brown , true , mission_prefix_prev ) ;
1094: LD_ADDR_EXP 8
1098: PUSH
1099: LD_STRING Brown
1101: PPUSH
1102: LD_INT 1
1104: PPUSH
1105: LD_EXP 23
1109: PPUSH
1110: CALL 25005 0 3
1114: ST_TO_ADDR
// PlaceUnitXYR ( Brown , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1115: LD_EXP 8
1119: PPUSH
1120: LD_VAR 0 3
1124: PUSH
1125: LD_INT 1
1127: ARRAY
1128: PPUSH
1129: CALL_OW 250
1133: PPUSH
1134: LD_VAR 0 3
1138: PUSH
1139: LD_INT 1
1141: ARRAY
1142: PPUSH
1143: CALL_OW 251
1147: PPUSH
1148: LD_INT 5
1150: PPUSH
1151: LD_INT 0
1153: PPUSH
1154: CALL_OW 50
// SetClass ( Brown , 2 ) ;
1158: LD_EXP 8
1162: PPUSH
1163: LD_INT 2
1165: PPUSH
1166: CALL_OW 336
// end ; others = CreateCharacterSet ( othersInDelta ) ;
1170: LD_ADDR_EXP 10
1174: PUSH
1175: LD_STRING othersInDelta
1177: PPUSH
1178: CALL_OW 31
1182: ST_TO_ADDR
// for i in others do
1183: LD_ADDR_VAR 0 2
1187: PUSH
1188: LD_EXP 10
1192: PUSH
1193: FOR_IN
1194: IFFALSE 1241
// PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1196: LD_VAR 0 2
1200: PPUSH
1201: LD_VAR 0 3
1205: PUSH
1206: LD_INT 1
1208: ARRAY
1209: PPUSH
1210: CALL_OW 250
1214: PPUSH
1215: LD_VAR 0 3
1219: PUSH
1220: LD_INT 1
1222: ARRAY
1223: PPUSH
1224: CALL_OW 251
1228: PPUSH
1229: LD_INT 35
1231: PPUSH
1232: LD_INT 0
1234: PPUSH
1235: CALL_OW 50
1239: GO 1193
1241: POP
1242: POP
// apemans = CreateCharacterSet ( apeInDelta ) ;
1243: LD_ADDR_EXP 12
1247: PUSH
1248: LD_STRING apeInDelta
1250: PPUSH
1251: CALL_OW 31
1255: ST_TO_ADDR
// uc_nation = 0 ;
1256: LD_ADDR_OWVAR 21
1260: PUSH
1261: LD_INT 0
1263: ST_TO_ADDR
// if apemans > 5 then
1264: LD_EXP 12
1268: PUSH
1269: LD_INT 5
1271: GREATER
1272: IFFALSE 1367
// begin for i := 1 to 5 do
1274: LD_ADDR_VAR 0 2
1278: PUSH
1279: DOUBLE
1280: LD_INT 1
1282: DEC
1283: ST_TO_ADDR
1284: LD_INT 5
1286: PUSH
1287: FOR_TO
1288: IFFALSE 1363
// begin PlaceUnitXYR ( apemans [ i ] , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1290: LD_EXP 12
1294: PUSH
1295: LD_VAR 0 2
1299: ARRAY
1300: PPUSH
1301: LD_VAR 0 3
1305: PUSH
1306: LD_INT 1
1308: ARRAY
1309: PPUSH
1310: CALL_OW 250
1314: PPUSH
1315: LD_VAR 0 3
1319: PUSH
1320: LD_INT 1
1322: ARRAY
1323: PPUSH
1324: CALL_OW 251
1328: PPUSH
1329: LD_INT 50
1331: PPUSH
1332: LD_INT 0
1334: PPUSH
1335: CALL_OW 50
// yourApemans = yourApemans ^ apemans [ i ] ;
1339: LD_ADDR_EXP 13
1343: PUSH
1344: LD_EXP 13
1348: PUSH
1349: LD_EXP 12
1353: PUSH
1354: LD_VAR 0 2
1358: ARRAY
1359: ADD
1360: ST_TO_ADDR
// end ;
1361: GO 1287
1363: POP
1364: POP
// end else
1365: GO 1443
// begin for i in apemans do
1367: LD_ADDR_VAR 0 2
1371: PUSH
1372: LD_EXP 12
1376: PUSH
1377: FOR_IN
1378: IFFALSE 1441
// begin PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1380: LD_VAR 0 2
1384: PPUSH
1385: LD_VAR 0 3
1389: PUSH
1390: LD_INT 1
1392: ARRAY
1393: PPUSH
1394: CALL_OW 250
1398: PPUSH
1399: LD_VAR 0 3
1403: PUSH
1404: LD_INT 1
1406: ARRAY
1407: PPUSH
1408: CALL_OW 251
1412: PPUSH
1413: LD_INT 50
1415: PPUSH
1416: LD_INT 0
1418: PPUSH
1419: CALL_OW 50
// yourApemans = yourApemans ^ i ;
1423: LD_ADDR_EXP 13
1427: PUSH
1428: LD_EXP 13
1432: PUSH
1433: LD_VAR 0 2
1437: ADD
1438: ST_TO_ADDR
// end ;
1439: GO 1377
1441: POP
1442: POP
// end ; end ;
1443: LD_VAR 0 1
1447: RET
// export function LoadVehicles ; var i , veh , tmp , vehicles ; begin
1448: LD_INT 0
1450: PPUSH
1451: PPUSH
1452: PPUSH
1453: PPUSH
1454: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1455: LD_ADDR_VAR 0 4
1459: PUSH
1460: LD_INT 22
1462: PUSH
1463: LD_INT 1
1465: PUSH
1466: EMPTY
1467: LIST
1468: LIST
1469: PUSH
1470: LD_INT 21
1472: PUSH
1473: LD_INT 3
1475: PUSH
1476: EMPTY
1477: LIST
1478: LIST
1479: PUSH
1480: LD_INT 30
1482: PUSH
1483: LD_INT 0
1485: PUSH
1486: EMPTY
1487: LIST
1488: LIST
1489: PUSH
1490: EMPTY
1491: LIST
1492: LIST
1493: LIST
1494: PPUSH
1495: CALL_OW 69
1499: ST_TO_ADDR
// uc_side = 1 ;
1500: LD_ADDR_OWVAR 20
1504: PUSH
1505: LD_INT 1
1507: ST_TO_ADDR
// vehicles = LoadVariable ( vehiclesInDelta , [ ] ) ;
1508: LD_ADDR_VAR 0 5
1512: PUSH
1513: LD_STRING vehiclesInDelta
1515: PPUSH
1516: EMPTY
1517: PPUSH
1518: CALL_OW 30
1522: ST_TO_ADDR
// for i = 1 to vehicles do
1523: LD_ADDR_VAR 0 2
1527: PUSH
1528: DOUBLE
1529: LD_INT 1
1531: DEC
1532: ST_TO_ADDR
1533: LD_VAR 0 5
1537: PUSH
1538: FOR_TO
1539: IFFALSE 1742
// begin if vehicles [ i + 4 ] = 11 or vehicles [ i ] = 3 then
1541: LD_VAR 0 5
1545: PUSH
1546: LD_VAR 0 2
1550: PUSH
1551: LD_INT 4
1553: PLUS
1554: ARRAY
1555: PUSH
1556: LD_INT 11
1558: EQUAL
1559: PUSH
1560: LD_VAR 0 5
1564: PUSH
1565: LD_VAR 0 2
1569: ARRAY
1570: PUSH
1571: LD_INT 3
1573: EQUAL
1574: OR
1575: IFFALSE 1726
// begin uc_nation = vehicles [ i ] ;
1577: LD_ADDR_OWVAR 21
1581: PUSH
1582: LD_VAR 0 5
1586: PUSH
1587: LD_VAR 0 2
1591: ARRAY
1592: ST_TO_ADDR
// vc_chassis = vehicles [ i + 1 ] ;
1593: LD_ADDR_OWVAR 37
1597: PUSH
1598: LD_VAR 0 5
1602: PUSH
1603: LD_VAR 0 2
1607: PUSH
1608: LD_INT 1
1610: PLUS
1611: ARRAY
1612: ST_TO_ADDR
// vc_engine = vehicles [ i + 2 ] ;
1613: LD_ADDR_OWVAR 39
1617: PUSH
1618: LD_VAR 0 5
1622: PUSH
1623: LD_VAR 0 2
1627: PUSH
1628: LD_INT 2
1630: PLUS
1631: ARRAY
1632: ST_TO_ADDR
// vc_control = vehicles [ i + 3 ] ;
1633: LD_ADDR_OWVAR 38
1637: PUSH
1638: LD_VAR 0 5
1642: PUSH
1643: LD_VAR 0 2
1647: PUSH
1648: LD_INT 3
1650: PLUS
1651: ARRAY
1652: ST_TO_ADDR
// vc_weapon = vehicles [ i + 4 ] ;
1653: LD_ADDR_OWVAR 40
1657: PUSH
1658: LD_VAR 0 5
1662: PUSH
1663: LD_VAR 0 2
1667: PUSH
1668: LD_INT 4
1670: PLUS
1671: ARRAY
1672: ST_TO_ADDR
// veh = CreateVehicle ;
1673: LD_ADDR_VAR 0 3
1677: PUSH
1678: CALL_OW 45
1682: ST_TO_ADDR
// PlaceUnitXYR ( veh , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 40 , false ) ;
1683: LD_VAR 0 3
1687: PPUSH
1688: LD_VAR 0 4
1692: PUSH
1693: LD_INT 1
1695: ARRAY
1696: PPUSH
1697: CALL_OW 250
1701: PPUSH
1702: LD_VAR 0 4
1706: PUSH
1707: LD_INT 1
1709: ARRAY
1710: PPUSH
1711: CALL_OW 251
1715: PPUSH
1716: LD_INT 40
1718: PPUSH
1719: LD_INT 0
1721: PPUSH
1722: CALL_OW 50
// end ; i = i + 4 ;
1726: LD_ADDR_VAR 0 2
1730: PUSH
1731: LD_VAR 0 2
1735: PUSH
1736: LD_INT 4
1738: PLUS
1739: ST_TO_ADDR
// end ;
1740: GO 1538
1742: POP
1743: POP
// end ;
1744: LD_VAR 0 1
1748: RET
// export function PrepareRandoms ; var i , un , tmp , filter ; begin
1749: LD_INT 0
1751: PPUSH
1752: PPUSH
1753: PPUSH
1754: PPUSH
1755: PPUSH
// uc_side = 1 ;
1756: LD_ADDR_OWVAR 20
1760: PUSH
1761: LD_INT 1
1763: ST_TO_ADDR
// uc_nation = 1 ;
1764: LD_ADDR_OWVAR 21
1768: PUSH
1769: LD_INT 1
1771: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1772: LD_ADDR_VAR 0 4
1776: PUSH
1777: LD_INT 22
1779: PUSH
1780: LD_INT 1
1782: PUSH
1783: EMPTY
1784: LIST
1785: LIST
1786: PUSH
1787: LD_INT 21
1789: PUSH
1790: LD_INT 3
1792: PUSH
1793: EMPTY
1794: LIST
1795: LIST
1796: PUSH
1797: LD_INT 30
1799: PUSH
1800: LD_INT 0
1802: PUSH
1803: EMPTY
1804: LIST
1805: LIST
1806: PUSH
1807: EMPTY
1808: LIST
1809: LIST
1810: LIST
1811: PPUSH
1812: CALL_OW 69
1816: ST_TO_ADDR
// if FilterAllunits ( [ [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] then
1817: LD_INT 22
1819: PUSH
1820: LD_INT 1
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: PUSH
1827: LD_INT 25
1829: PUSH
1830: LD_INT 4
1832: PUSH
1833: EMPTY
1834: LIST
1835: LIST
1836: PUSH
1837: LD_INT 26
1839: PUSH
1840: LD_INT 1
1842: PUSH
1843: EMPTY
1844: LIST
1845: LIST
1846: PUSH
1847: EMPTY
1848: LIST
1849: LIST
1850: LIST
1851: PUSH
1852: EMPTY
1853: LIST
1854: PPUSH
1855: CALL_OW 69
1859: PUSH
1860: LD_EXP 1
1864: PUSH
1865: LD_EXP 7
1869: PUSH
1870: LD_EXP 6
1874: PUSH
1875: LD_EXP 5
1879: PUSH
1880: LD_EXP 2
1884: PUSH
1885: LD_EXP 3
1889: PUSH
1890: LD_EXP 8
1894: PUSH
1895: EMPTY
1896: LIST
1897: LIST
1898: LIST
1899: LIST
1900: LIST
1901: LIST
1902: LIST
1903: DIFF
1904: IFFALSE 2005
// deltaDoctor := ( FilterAllunits ( [ [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] ) [ 1 ] else
1906: LD_ADDR_EXP 15
1910: PUSH
1911: LD_INT 22
1913: PUSH
1914: LD_INT 1
1916: PUSH
1917: EMPTY
1918: LIST
1919: LIST
1920: PUSH
1921: LD_INT 25
1923: PUSH
1924: LD_INT 4
1926: PUSH
1927: EMPTY
1928: LIST
1929: LIST
1930: PUSH
1931: LD_INT 26
1933: PUSH
1934: LD_INT 1
1936: PUSH
1937: EMPTY
1938: LIST
1939: LIST
1940: PUSH
1941: EMPTY
1942: LIST
1943: LIST
1944: LIST
1945: PUSH
1946: EMPTY
1947: LIST
1948: PPUSH
1949: CALL_OW 69
1953: PUSH
1954: LD_EXP 1
1958: PUSH
1959: LD_EXP 7
1963: PUSH
1964: LD_EXP 6
1968: PUSH
1969: LD_EXP 5
1973: PUSH
1974: LD_EXP 2
1978: PUSH
1979: LD_EXP 3
1983: PUSH
1984: LD_EXP 8
1988: PUSH
1989: EMPTY
1990: LIST
1991: LIST
1992: LIST
1993: LIST
1994: LIST
1995: LIST
1996: LIST
1997: DIFF
1998: PUSH
1999: LD_INT 1
2001: ARRAY
2002: ST_TO_ADDR
2003: GO 2152
// begin filter := FilterAllunits ( [ [ [ f_side , 1 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] ;
2005: LD_ADDR_VAR 0 5
2009: PUSH
2010: LD_INT 22
2012: PUSH
2013: LD_INT 1
2015: PUSH
2016: EMPTY
2017: LIST
2018: LIST
2019: PUSH
2020: LD_INT 26
2022: PUSH
2023: LD_INT 1
2025: PUSH
2026: EMPTY
2027: LIST
2028: LIST
2029: PUSH
2030: EMPTY
2031: LIST
2032: LIST
2033: PUSH
2034: EMPTY
2035: LIST
2036: PPUSH
2037: CALL_OW 69
2041: PUSH
2042: LD_EXP 1
2046: PUSH
2047: LD_EXP 7
2051: PUSH
2052: LD_EXP 6
2056: PUSH
2057: LD_EXP 5
2061: PUSH
2062: LD_EXP 2
2066: PUSH
2067: LD_EXP 3
2071: PUSH
2072: LD_EXP 8
2076: PUSH
2077: EMPTY
2078: LIST
2079: LIST
2080: LIST
2081: LIST
2082: LIST
2083: LIST
2084: LIST
2085: DIFF
2086: ST_TO_ADDR
// if filter then
2087: LD_VAR 0 5
2091: IFFALSE 2152
// for i in filter do
2093: LD_ADDR_VAR 0 2
2097: PUSH
2098: LD_VAR 0 5
2102: PUSH
2103: FOR_IN
2104: IFFALSE 2150
// if GetSkill ( i , 4 ) >= 4 then
2106: LD_VAR 0 2
2110: PPUSH
2111: LD_INT 4
2113: PPUSH
2114: CALL_OW 259
2118: PUSH
2119: LD_INT 4
2121: GREATEREQUAL
2122: IFFALSE 2148
// begin deltaDoctor := i ;
2124: LD_ADDR_EXP 15
2128: PUSH
2129: LD_VAR 0 2
2133: ST_TO_ADDR
// SetClass ( deltaDoctor , 4 ) ;
2134: LD_EXP 15
2138: PPUSH
2139: LD_INT 4
2141: PPUSH
2142: CALL_OW 336
// break ;
2146: GO 2150
// end ;
2148: GO 2103
2150: POP
2151: POP
// end ; for i = 1 to 7 do
2152: LD_ADDR_VAR 0 2
2156: PUSH
2157: DOUBLE
2158: LD_INT 1
2160: DEC
2161: ST_TO_ADDR
2162: LD_INT 7
2164: PUSH
2165: FOR_TO
2166: IFFALSE 2303
// begin hc_gallery =  ;
2168: LD_ADDR_OWVAR 33
2172: PUSH
2173: LD_STRING 
2175: ST_TO_ADDR
// hc_name =  ;
2176: LD_ADDR_OWVAR 26
2180: PUSH
2181: LD_STRING 
2183: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 3 , 5 ) ) ;
2184: LD_INT 0
2186: PPUSH
2187: LD_INT 1
2189: PUSH
2190: LD_INT 2
2192: PUSH
2193: LD_INT 3
2195: PUSH
2196: LD_INT 4
2198: PUSH
2199: EMPTY
2200: LIST
2201: LIST
2202: LIST
2203: LIST
2204: PUSH
2205: LD_INT 1
2207: PPUSH
2208: LD_INT 4
2210: PPUSH
2211: CALL_OW 12
2215: ARRAY
2216: PPUSH
2217: LD_INT 3
2219: PPUSH
2220: LD_INT 5
2222: PPUSH
2223: CALL_OW 12
2227: PPUSH
2228: CALL_OW 380
// un = CreateHuman ;
2232: LD_ADDR_VAR 0 3
2236: PUSH
2237: CALL_OW 44
2241: ST_TO_ADDR
// randomsDelta := randomsDelta ^ un ;
2242: LD_ADDR_EXP 11
2246: PUSH
2247: LD_EXP 11
2251: PUSH
2252: LD_VAR 0 3
2256: ADD
2257: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
2258: LD_VAR 0 3
2262: PPUSH
2263: LD_VAR 0 4
2267: PUSH
2268: LD_INT 1
2270: ARRAY
2271: PPUSH
2272: CALL_OW 250
2276: PPUSH
2277: LD_VAR 0 4
2281: PUSH
2282: LD_INT 1
2284: ARRAY
2285: PPUSH
2286: CALL_OW 251
2290: PPUSH
2291: LD_INT 15
2293: PPUSH
2294: LD_INT 0
2296: PPUSH
2297: CALL_OW 50
// end ;
2301: GO 2165
2303: POP
2304: POP
// if deltaDoctor then
2305: LD_EXP 15
2309: IFFALSE 2313
// exit ;
2311: GO 2403
// hc_gallery = Dawkins ;
2313: LD_ADDR_OWVAR 33
2317: PUSH
2318: LD_STRING Dawkins
2320: ST_TO_ADDR
// hc_face_number := 1 ;
2321: LD_ADDR_OWVAR 34
2325: PUSH
2326: LD_INT 1
2328: ST_TO_ADDR
// hc_name = Dr. Adam Charles Dawkins ;
2329: LD_ADDR_OWVAR 26
2333: PUSH
2334: LD_STRING Dr. Adam Charles Dawkins
2336: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 6 ) ;
2337: LD_INT 1
2339: PPUSH
2340: LD_INT 4
2342: PPUSH
2343: LD_INT 6
2345: PPUSH
2346: CALL_OW 380
// deltaDoctor = CreateHuman ;
2350: LD_ADDR_EXP 15
2354: PUSH
2355: CALL_OW 44
2359: ST_TO_ADDR
// PlaceUnitXYR ( deltaDoctor , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
2360: LD_EXP 15
2364: PPUSH
2365: LD_VAR 0 4
2369: PUSH
2370: LD_INT 1
2372: ARRAY
2373: PPUSH
2374: CALL_OW 250
2378: PPUSH
2379: LD_VAR 0 4
2383: PUSH
2384: LD_INT 1
2386: ARRAY
2387: PPUSH
2388: CALL_OW 251
2392: PPUSH
2393: LD_INT 5
2395: PPUSH
2396: LD_INT 0
2398: PPUSH
2399: CALL_OW 50
// end ; end_of_file
2403: LD_VAR 0 1
2407: RET
// export function PrepareDeltaBase ; var i , j , building , buildings , lab , tmp ; begin
2408: LD_INT 0
2410: PPUSH
2411: PPUSH
2412: PPUSH
2413: PPUSH
2414: PPUSH
2415: PPUSH
2416: PPUSH
// buildings = LoadVariable ( buildingsInDelta , [ ] ) ;
2417: LD_ADDR_VAR 0 5
2421: PUSH
2422: LD_STRING buildingsInDelta
2424: PPUSH
2425: EMPTY
2426: PPUSH
2427: CALL_OW 30
2431: ST_TO_ADDR
// SetResourceVisibility ( 68 , 40 , 1 ) ;
2432: LD_INT 68
2434: PPUSH
2435: LD_INT 40
2437: PPUSH
2438: LD_INT 1
2440: PPUSH
2441: CALL_OW 441
// uc_side = 1 ;
2445: LD_ADDR_OWVAR 20
2449: PUSH
2450: LD_INT 1
2452: ST_TO_ADDR
// uc_nation = 1 ;
2453: LD_ADDR_OWVAR 21
2457: PUSH
2458: LD_INT 1
2460: ST_TO_ADDR
// for i = 1 to buildings do
2461: LD_ADDR_VAR 0 2
2465: PUSH
2466: DOUBLE
2467: LD_INT 1
2469: DEC
2470: ST_TO_ADDR
2471: LD_VAR 0 5
2475: PUSH
2476: FOR_TO
2477: IFFALSE 2775
// begin bc_type = buildings [ i ] [ 1 ] ;
2479: LD_ADDR_OWVAR 42
2483: PUSH
2484: LD_VAR 0 5
2488: PUSH
2489: LD_VAR 0 2
2493: ARRAY
2494: PUSH
2495: LD_INT 1
2497: ARRAY
2498: ST_TO_ADDR
// bc_level = buildings [ i ] [ 2 ] ;
2499: LD_ADDR_OWVAR 43
2503: PUSH
2504: LD_VAR 0 5
2508: PUSH
2509: LD_VAR 0 2
2513: ARRAY
2514: PUSH
2515: LD_INT 2
2517: ARRAY
2518: ST_TO_ADDR
// if bc_type = b_lab then
2519: LD_OWVAR 42
2523: PUSH
2524: LD_INT 6
2526: EQUAL
2527: IFFALSE 2545
// begin bc_kind1 = b_lab_basic ;
2529: LD_ADDR_OWVAR 44
2533: PUSH
2534: LD_INT 9
2536: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
2537: LD_ADDR_OWVAR 45
2541: PUSH
2542: LD_INT 9
2544: ST_TO_ADDR
// end ; if bc_type = b_lab_half or bc_type = b_lab_full then
2545: LD_OWVAR 42
2549: PUSH
2550: LD_INT 7
2552: EQUAL
2553: PUSH
2554: LD_OWVAR 42
2558: PUSH
2559: LD_INT 8
2561: EQUAL
2562: OR
2563: IFFALSE 2679
// begin if buildings [ i ] [ 6 ] then
2565: LD_VAR 0 5
2569: PUSH
2570: LD_VAR 0 2
2574: ARRAY
2575: PUSH
2576: LD_INT 6
2578: ARRAY
2579: IFFALSE 2601
// bc_kind1 = buildings [ i ] [ 6 ] ;
2581: LD_ADDR_OWVAR 44
2585: PUSH
2586: LD_VAR 0 5
2590: PUSH
2591: LD_VAR 0 2
2595: ARRAY
2596: PUSH
2597: LD_INT 6
2599: ARRAY
2600: ST_TO_ADDR
// if buildings [ i ] [ 7 ] then
2601: LD_VAR 0 5
2605: PUSH
2606: LD_VAR 0 2
2610: ARRAY
2611: PUSH
2612: LD_INT 7
2614: ARRAY
2615: IFFALSE 2637
// bc_kind2 = buildings [ i ] [ 7 ] ;
2617: LD_ADDR_OWVAR 45
2621: PUSH
2622: LD_VAR 0 5
2626: PUSH
2627: LD_VAR 0 2
2631: ARRAY
2632: PUSH
2633: LD_INT 7
2635: ARRAY
2636: ST_TO_ADDR
// if not buildings [ i ] [ 6 ] and not buildings [ i ] [ 7 ] then
2637: LD_VAR 0 5
2641: PUSH
2642: LD_VAR 0 2
2646: ARRAY
2647: PUSH
2648: LD_INT 6
2650: ARRAY
2651: NOT
2652: PUSH
2653: LD_VAR 0 5
2657: PUSH
2658: LD_VAR 0 2
2662: ARRAY
2663: PUSH
2664: LD_INT 7
2666: ARRAY
2667: NOT
2668: AND
2669: IFFALSE 2679
// bc_type := b_lab ;
2671: LD_ADDR_OWVAR 42
2675: PUSH
2676: LD_INT 6
2678: ST_TO_ADDR
// end ; building = CreateAndPlaceBuildingXYD ( buildings [ i ] [ 3 ] , buildings [ i ] [ 4 ] , buildings [ i ] [ 5 ] ) ;
2679: LD_ADDR_VAR 0 4
2683: PUSH
2684: LD_VAR 0 5
2688: PUSH
2689: LD_VAR 0 2
2693: ARRAY
2694: PUSH
2695: LD_INT 3
2697: ARRAY
2698: PPUSH
2699: LD_VAR 0 5
2703: PUSH
2704: LD_VAR 0 2
2708: ARRAY
2709: PUSH
2710: LD_INT 4
2712: ARRAY
2713: PPUSH
2714: LD_VAR 0 5
2718: PUSH
2719: LD_VAR 0 2
2723: ARRAY
2724: PUSH
2725: LD_INT 5
2727: ARRAY
2728: PPUSH
2729: CALL_OW 47
2733: ST_TO_ADDR
// if GetBType ( building ) = b_bunker then
2734: LD_VAR 0 4
2738: PPUSH
2739: CALL_OW 266
2743: PUSH
2744: LD_INT 32
2746: EQUAL
2747: IFFALSE 2773
// PlaceWeaponTurret ( building , buildings [ i ] [ 8 ] ) ;
2749: LD_VAR 0 4
2753: PPUSH
2754: LD_VAR 0 5
2758: PUSH
2759: LD_VAR 0 2
2763: ARRAY
2764: PUSH
2765: LD_INT 8
2767: ARRAY
2768: PPUSH
2769: CALL_OW 431
// end ;
2773: GO 2476
2775: POP
2776: POP
// lab = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
2777: LD_ADDR_VAR 0 6
2781: PUSH
2782: LD_INT 22
2784: PUSH
2785: LD_INT 1
2787: PUSH
2788: EMPTY
2789: LIST
2790: LIST
2791: PUSH
2792: LD_INT 2
2794: PUSH
2795: LD_INT 30
2797: PUSH
2798: LD_INT 6
2800: PUSH
2801: EMPTY
2802: LIST
2803: LIST
2804: PUSH
2805: LD_INT 30
2807: PUSH
2808: LD_INT 7
2810: PUSH
2811: EMPTY
2812: LIST
2813: LIST
2814: PUSH
2815: LD_INT 30
2817: PUSH
2818: LD_INT 8
2820: PUSH
2821: EMPTY
2822: LIST
2823: LIST
2824: PUSH
2825: EMPTY
2826: LIST
2827: LIST
2828: LIST
2829: LIST
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: PPUSH
2835: CALL_OW 69
2839: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) ;
2840: LD_ADDR_VAR 0 7
2844: PUSH
2845: LD_INT 22
2847: PUSH
2848: LD_INT 1
2850: PUSH
2851: EMPTY
2852: LIST
2853: LIST
2854: PUSH
2855: LD_INT 30
2857: PUSH
2858: LD_INT 0
2860: PUSH
2861: EMPTY
2862: LIST
2863: LIST
2864: PUSH
2865: EMPTY
2866: LIST
2867: LIST
2868: PPUSH
2869: CALL_OW 69
2873: ST_TO_ADDR
// if lab > 0 and tmp > 0 then
2874: LD_VAR 0 6
2878: PUSH
2879: LD_INT 0
2881: GREATER
2882: PUSH
2883: LD_VAR 0 7
2887: PUSH
2888: LD_INT 0
2890: GREATER
2891: AND
2892: IFFALSE 2902
// baseCorrect = 1 ;
2894: LD_ADDR_EXP 18
2898: PUSH
2899: LD_INT 1
2901: ST_TO_ADDR
// if baseCorrect = 0 then
2902: LD_EXP 18
2906: PUSH
2907: LD_INT 0
2909: EQUAL
2910: IFFALSE 3283
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
2912: LD_ADDR_VAR 0 2
2916: PUSH
2917: LD_INT 22
2919: PUSH
2920: LD_INT 1
2922: PUSH
2923: EMPTY
2924: LIST
2925: LIST
2926: PUSH
2927: LD_INT 21
2929: PUSH
2930: LD_INT 3
2932: PUSH
2933: EMPTY
2934: LIST
2935: LIST
2936: PUSH
2937: EMPTY
2938: LIST
2939: LIST
2940: PPUSH
2941: CALL_OW 69
2945: PUSH
2946: FOR_IN
2947: IFFALSE 2960
// RemoveUnit ( i ) ;
2949: LD_VAR 0 2
2953: PPUSH
2954: CALL_OW 64
2958: GO 2946
2960: POP
2961: POP
// uc_nation = 1 ;
2962: LD_ADDR_OWVAR 21
2966: PUSH
2967: LD_INT 1
2969: ST_TO_ADDR
// uc_side = 1 ;
2970: LD_ADDR_OWVAR 20
2974: PUSH
2975: LD_INT 1
2977: ST_TO_ADDR
// bc_level = 5 ;
2978: LD_ADDR_OWVAR 43
2982: PUSH
2983: LD_INT 5
2985: ST_TO_ADDR
// bc_type = b_depot ;
2986: LD_ADDR_OWVAR 42
2990: PUSH
2991: LD_INT 0
2993: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 50 , 22 , 0 ) ;
2994: LD_INT 50
2996: PPUSH
2997: LD_INT 22
2999: PPUSH
3000: LD_INT 0
3002: PPUSH
3003: CALL_OW 47
// bc_type = b_bunker ;
3007: LD_ADDR_OWVAR 42
3011: PUSH
3012: LD_INT 32
3014: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( 68 , 24 , 4 ) ;
3015: LD_ADDR_VAR 0 4
3019: PUSH
3020: LD_INT 68
3022: PPUSH
3023: LD_INT 24
3025: PPUSH
3026: LD_INT 4
3028: PPUSH
3029: CALL_OW 47
3033: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ Rand ( 1 , 2 ) ] ) ;
3034: LD_VAR 0 4
3038: PPUSH
3039: LD_INT 4
3041: PUSH
3042: LD_INT 11
3044: PUSH
3045: EMPTY
3046: LIST
3047: LIST
3048: PUSH
3049: LD_INT 1
3051: PPUSH
3052: LD_INT 2
3054: PPUSH
3055: CALL_OW 12
3059: ARRAY
3060: PPUSH
3061: CALL_OW 431
// building = CreateAndPlaceBuildingXYD ( 71 , 34 , 4 ) ;
3065: LD_ADDR_VAR 0 4
3069: PUSH
3070: LD_INT 71
3072: PPUSH
3073: LD_INT 34
3075: PPUSH
3076: LD_INT 4
3078: PPUSH
3079: CALL_OW 47
3083: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ Rand ( 1 , 2 ) ] ) ;
3084: LD_VAR 0 4
3088: PPUSH
3089: LD_INT 4
3091: PUSH
3092: LD_INT 11
3094: PUSH
3095: EMPTY
3096: LIST
3097: LIST
3098: PUSH
3099: LD_INT 1
3101: PPUSH
3102: LD_INT 2
3104: PPUSH
3105: CALL_OW 12
3109: ARRAY
3110: PPUSH
3111: CALL_OW 431
// bc_type = 31 ;
3115: LD_ADDR_OWVAR 42
3119: PUSH
3120: LD_INT 31
3122: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 51 , 7 , 3 ) ;
3123: LD_INT 51
3125: PPUSH
3126: LD_INT 7
3128: PPUSH
3129: LD_INT 3
3131: PPUSH
3132: CALL_OW 47
// bc_type = b_oil_mine ;
3136: LD_ADDR_OWVAR 42
3140: PUSH
3141: LD_INT 29
3143: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 68 , 40 , 1 ) ;
3144: LD_INT 68
3146: PPUSH
3147: LD_INT 40
3149: PPUSH
3150: LD_INT 1
3152: PPUSH
3153: CALL_OW 47
// bc_type = b_workshop ;
3157: LD_ADDR_OWVAR 42
3161: PUSH
3162: LD_INT 2
3164: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 20 , 2 ) ;
3165: LD_INT 38
3167: PPUSH
3168: LD_INT 20
3170: PPUSH
3171: LD_INT 2
3173: PPUSH
3174: CALL_OW 47
// bc_type = b_armoury ;
3178: LD_ADDR_OWVAR 42
3182: PUSH
3183: LD_INT 4
3185: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 20 , 2 ) ;
3186: LD_INT 38
3188: PPUSH
3189: LD_INT 20
3191: PPUSH
3192: LD_INT 2
3194: PPUSH
3195: CALL_OW 47
// bc_type = b_solar_power ;
3199: LD_ADDR_OWVAR 42
3203: PUSH
3204: LD_INT 27
3206: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 46 , 12 , 1 ) ;
3207: LD_INT 46
3209: PPUSH
3210: LD_INT 12
3212: PPUSH
3213: LD_INT 1
3215: PPUSH
3216: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 48 , 11 , 2 ) ;
3220: LD_INT 48
3222: PPUSH
3223: LD_INT 11
3225: PPUSH
3226: LD_INT 2
3228: PPUSH
3229: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 49 , 11 , 3 ) ;
3233: LD_INT 49
3235: PPUSH
3236: LD_INT 11
3238: PPUSH
3239: LD_INT 3
3241: PPUSH
3242: CALL_OW 47
// bc_type = b_lab_half ;
3246: LD_ADDR_OWVAR 42
3250: PUSH
3251: LD_INT 7
3253: ST_TO_ADDR
// bc_kind1 = b_lab_opto ;
3254: LD_ADDR_OWVAR 44
3258: PUSH
3259: LD_INT 15
3261: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
3262: LD_ADDR_OWVAR 45
3266: PUSH
3267: LD_INT 9
3269: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 42 , 15 , 2 ) ;
3270: LD_INT 42
3272: PPUSH
3273: LD_INT 15
3275: PPUSH
3276: LD_INT 2
3278: PPUSH
3279: CALL_OW 47
// end ; end ; end_of_file
3283: LD_VAR 0 1
3287: RET
// every 1 do var i , j , tmp ;
3288: GO 3290
3290: DISABLE
3291: LD_INT 0
3293: PPUSH
3294: PPUSH
3295: PPUSH
// begin InGameOn ;
3296: CALL_OW 8
// CenterNowOnUnits ( lab [ 1 ] ) ;
3300: LD_EXP 20
3304: PUSH
3305: LD_INT 1
3307: ARRAY
3308: PPUSH
3309: CALL_OW 87
// if IsOK ( Denis ) then
3313: LD_EXP 3
3317: PPUSH
3318: CALL_OW 302
3322: IFFALSE 3350
// begin SetTech ( tech_radar , 1 , state_researched ) ;
3324: LD_INT 6
3326: PPUSH
3327: LD_INT 1
3329: PPUSH
3330: LD_INT 2
3332: PPUSH
3333: CALL_OW 322
// SetRestrict ( b_ext_radar , 1 , true ) ;
3337: LD_INT 20
3339: PPUSH
3340: LD_INT 1
3342: PPUSH
3343: LD_INT 1
3345: PPUSH
3346: CALL_OW 324
// end ; CenterNowOnUnits ( JMM ) ;
3350: LD_EXP 1
3354: PPUSH
3355: CALL_OW 87
// ComTurnUnit ( JMM , DeltaDoctor ) ;
3359: LD_EXP 1
3363: PPUSH
3364: LD_EXP 15
3368: PPUSH
3369: CALL_OW 119
// repeat wait ( 0 0$1 ) ;
3373: LD_INT 35
3375: PPUSH
3376: CALL_OW 67
// ComMoveUnit ( DeltaDoctor , JMM ) ;
3380: LD_EXP 15
3384: PPUSH
3385: LD_EXP 1
3389: PPUSH
3390: CALL_OW 112
// until GetDistUnits ( JMM , DeltaDoctor ) < 5 ;
3394: LD_EXP 1
3398: PPUSH
3399: LD_EXP 15
3403: PPUSH
3404: CALL_OW 296
3408: PUSH
3409: LD_INT 5
3411: LESS
3412: IFFALSE 3373
// ComTurnUnit ( DeltaDoctor , JMM ) ;
3414: LD_EXP 15
3418: PPUSH
3419: LD_EXP 1
3423: PPUSH
3424: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
3428: LD_EXP 1
3432: PPUSH
3433: LD_STRING D1-JMM-1
3435: PPUSH
3436: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-1 ) ;
3440: LD_EXP 15
3444: PPUSH
3445: LD_STRING D1-Sci-1
3447: PPUSH
3448: CALL_OW 88
// ComEnterUnit ( [ JMM , DeltaDoctor , Denis ] , lab [ 1 ] ) ;
3452: LD_EXP 1
3456: PUSH
3457: LD_EXP 15
3461: PUSH
3462: LD_EXP 3
3466: PUSH
3467: EMPTY
3468: LIST
3469: LIST
3470: LIST
3471: PPUSH
3472: LD_EXP 20
3476: PUSH
3477: LD_INT 1
3479: ARRAY
3480: PPUSH
3481: CALL_OW 120
// end ;
3485: PPOPN 3
3487: END
// every 0 0$2 trigger IsInUnit ( JMM ) = lab [ 1 ] and IsInUnit ( DeltaDoctor ) = lab [ 1 ] do var i , j , tmp ;
3488: LD_EXP 1
3492: PPUSH
3493: CALL_OW 310
3497: PUSH
3498: LD_EXP 20
3502: PUSH
3503: LD_INT 1
3505: ARRAY
3506: EQUAL
3507: PUSH
3508: LD_EXP 15
3512: PPUSH
3513: CALL_OW 310
3517: PUSH
3518: LD_EXP 20
3522: PUSH
3523: LD_INT 1
3525: ARRAY
3526: EQUAL
3527: AND
3528: IFFALSE 4074
3530: GO 3532
3532: DISABLE
3533: LD_INT 0
3535: PPUSH
3536: PPUSH
3537: PPUSH
// begin CenterNowOnUnits ( lab [ 1 ] ) ;
3538: LD_EXP 20
3542: PUSH
3543: LD_INT 1
3545: ARRAY
3546: PPUSH
3547: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
3551: LD_EXP 1
3555: PPUSH
3556: LD_STRING D1-JMM-2
3558: PPUSH
3559: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-2 ) ;
3563: LD_EXP 15
3567: PPUSH
3568: LD_STRING D1-Sci-2
3570: PPUSH
3571: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
3575: LD_EXP 1
3579: PPUSH
3580: LD_STRING D1-JMM-3
3582: PPUSH
3583: CALL_OW 88
// if IsOK ( Denis ) then
3587: LD_EXP 3
3591: PPUSH
3592: CALL_OW 302
3596: IFFALSE 3612
// Say ( DeltaDoctor , D1-Sci-3 ) else
3598: LD_EXP 15
3602: PPUSH
3603: LD_STRING D1-Sci-3
3605: PPUSH
3606: CALL_OW 88
3610: GO 3624
// Say ( DeltaDoctor , D1-Sci-3a ) ;
3612: LD_EXP 15
3616: PPUSH
3617: LD_STRING D1-Sci-3a
3619: PPUSH
3620: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
3624: LD_EXP 1
3628: PPUSH
3629: LD_STRING D1-JMM-4
3631: PPUSH
3632: CALL_OW 88
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
3636: LD_ADDR_VAR 0 3
3640: PUSH
3641: LD_INT 22
3643: PUSH
3644: LD_INT 1
3646: PUSH
3647: EMPTY
3648: LIST
3649: LIST
3650: PUSH
3651: LD_INT 25
3653: PUSH
3654: LD_INT 4
3656: PUSH
3657: EMPTY
3658: LIST
3659: LIST
3660: PUSH
3661: LD_INT 3
3663: PUSH
3664: LD_INT 54
3666: PUSH
3667: EMPTY
3668: LIST
3669: PUSH
3670: EMPTY
3671: LIST
3672: LIST
3673: PUSH
3674: EMPTY
3675: LIST
3676: LIST
3677: LIST
3678: PPUSH
3679: CALL_OW 69
3683: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 0 ] ) do
3684: LD_ADDR_VAR 0 1
3688: PUSH
3689: LD_INT 22
3691: PUSH
3692: LD_INT 0
3694: PUSH
3695: EMPTY
3696: LIST
3697: LIST
3698: PPUSH
3699: CALL_OW 69
3703: PUSH
3704: FOR_IN
3705: IFFALSE 3755
// for j in tmp do
3707: LD_ADDR_VAR 0 2
3711: PUSH
3712: LD_VAR 0 3
3716: PUSH
3717: FOR_IN
3718: IFFALSE 3751
// AddComTameXY ( j , GetX ( i ) , GetY ( i ) ) ;
3720: LD_VAR 0 2
3724: PPUSH
3725: LD_VAR 0 1
3729: PPUSH
3730: CALL_OW 250
3734: PPUSH
3735: LD_VAR 0 1
3739: PPUSH
3740: CALL_OW 251
3744: PPUSH
3745: CALL_OW 191
3749: GO 3717
3751: POP
3752: POP
3753: GO 3704
3755: POP
3756: POP
// Say ( DeltaDoctor , D1-Sci-4 ) ;
3757: LD_EXP 15
3761: PPUSH
3762: LD_STRING D1-Sci-4
3764: PPUSH
3765: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
3769: LD_EXP 1
3773: PPUSH
3774: LD_STRING D1-JMM-5
3776: PPUSH
3777: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-5 ) ;
3781: LD_EXP 15
3785: PPUSH
3786: LD_STRING D1-Sci-5
3788: PPUSH
3789: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
3793: LD_EXP 1
3797: PPUSH
3798: LD_STRING D1-JMM-6
3800: PPUSH
3801: CALL_OW 88
// SayRadio ( Harisson , D1-Har-6 ) ;
3805: LD_EXP 16
3809: PPUSH
3810: LD_STRING D1-Har-6
3812: PPUSH
3813: CALL_OW 94
// Say ( JMM , D1-JMM-7 ) ;
3817: LD_EXP 1
3821: PPUSH
3822: LD_STRING D1-JMM-7
3824: PPUSH
3825: CALL_OW 88
// SayRadio ( Harisson , D1-Har-7 ) ;
3829: LD_EXP 16
3833: PPUSH
3834: LD_STRING D1-Har-7
3836: PPUSH
3837: CALL_OW 94
// if IsOK ( Denis ) then
3841: LD_EXP 3
3845: PPUSH
3846: CALL_OW 302
3850: IFFALSE 3864
// Say ( JMM , D1-JMM-8 ) ;
3852: LD_EXP 1
3856: PPUSH
3857: LD_STRING D1-JMM-8
3859: PPUSH
3860: CALL_OW 88
// Say ( JMM , D1-JMM-8a ) ;
3864: LD_EXP 1
3868: PPUSH
3869: LD_STRING D1-JMM-8a
3871: PPUSH
3872: CALL_OW 88
// SayRadio ( Harisson , D1-Har-8 ) ;
3876: LD_EXP 16
3880: PPUSH
3881: LD_STRING D1-Har-8
3883: PPUSH
3884: CALL_OW 94
// Say ( JMM , D1-JMM-9 ) ;
3888: LD_EXP 1
3892: PPUSH
3893: LD_STRING D1-JMM-9
3895: PPUSH
3896: CALL_OW 88
// SayRadio ( Harisson , D1-Har-9 ) ;
3900: LD_EXP 16
3904: PPUSH
3905: LD_STRING D1-Har-9
3907: PPUSH
3908: CALL_OW 94
// Say ( JMM , D1-JMM-10 ) ;
3912: LD_EXP 1
3916: PPUSH
3917: LD_STRING D1-JMM-10
3919: PPUSH
3920: CALL_OW 88
// if IsOK ( Denis ) then
3924: LD_EXP 3
3928: PPUSH
3929: CALL_OW 302
3933: IFFALSE 3947
// Say ( JMM , D1-JMM-10a ) ;
3935: LD_EXP 1
3939: PPUSH
3940: LD_STRING D1-JMM-10a
3942: PPUSH
3943: CALL_OW 88
// SelectDeltaCharacters ;
3947: CALL 4433 0 0
// SetResourceType ( GetBase ( lab [ 1 ] ) , 1 , 150 ) ;
3951: LD_EXP 20
3955: PUSH
3956: LD_INT 1
3958: ARRAY
3959: PPUSH
3960: CALL_OW 274
3964: PPUSH
3965: LD_INT 1
3967: PPUSH
3968: LD_INT 150
3970: PPUSH
3971: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) > 0 then
3975: LD_INT 22
3977: PUSH
3978: LD_INT 1
3980: PUSH
3981: EMPTY
3982: LIST
3983: LIST
3984: PUSH
3985: LD_INT 30
3987: PUSH
3988: LD_INT 29
3990: PUSH
3991: EMPTY
3992: LIST
3993: LIST
3994: PUSH
3995: EMPTY
3996: LIST
3997: LIST
3998: PPUSH
3999: CALL_OW 69
4003: PUSH
4004: LD_INT 0
4006: GREATER
4007: IFFALSE 4033
// SetResourceType ( GetBase ( lab [ 1 ] ) , 2 , 300 ) ;
4009: LD_EXP 20
4013: PUSH
4014: LD_INT 1
4016: ARRAY
4017: PPUSH
4018: CALL_OW 274
4022: PPUSH
4023: LD_INT 2
4025: PPUSH
4026: LD_INT 300
4028: PPUSH
4029: CALL_OW 277
// InGameOff ;
4033: CALL_OW 9
// Query ( Q1 ) ;
4037: LD_STRING Q1
4039: PPUSH
4040: CALL_OW 97
// SetAreaMapShow ( ExitArea , 1 ) ;
4044: LD_INT 3
4046: PPUSH
4047: LD_INT 1
4049: PPUSH
4050: CALL_OW 424
// if IsInUnit ( JMM ) then
4054: LD_EXP 1
4058: PPUSH
4059: CALL_OW 310
4063: IFFALSE 4074
// ComExitBuilding ( JMM ) ;
4065: LD_EXP 1
4069: PPUSH
4070: CALL_OW 122
// end ;
4074: PPOPN 3
4076: END
// every 0 0$1 trigger FilterUnitsExceptArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do var i , cargoType ;
4077: LD_INT 3
4079: PPUSH
4080: LD_INT 22
4082: PUSH
4083: LD_INT 1
4085: PUSH
4086: EMPTY
4087: LIST
4088: LIST
4089: PUSH
4090: LD_INT 21
4092: PUSH
4093: LD_INT 1
4095: PUSH
4096: EMPTY
4097: LIST
4098: LIST
4099: PUSH
4100: EMPTY
4101: LIST
4102: LIST
4103: PPUSH
4104: CALL_OW 71
4108: PUSH
4109: LD_INT 0
4111: EQUAL
4112: IFFALSE 4430
4114: GO 4116
4116: DISABLE
4117: LD_INT 0
4119: PPUSH
4120: PPUSH
// begin SaveDeltaCharacters ;
4121: CALL 4787 0 0
// if FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) then
4125: LD_INT 3
4127: PPUSH
4128: LD_INT 21
4130: PUSH
4131: LD_INT 2
4133: PUSH
4134: EMPTY
4135: LIST
4136: LIST
4137: PUSH
4138: LD_INT 3
4140: PUSH
4141: LD_INT 58
4143: PUSH
4144: EMPTY
4145: LIST
4146: PUSH
4147: EMPTY
4148: LIST
4149: LIST
4150: PUSH
4151: EMPTY
4152: LIST
4153: LIST
4154: PPUSH
4155: CALL_OW 70
4159: IFFALSE 4416
// begin for i in FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) do
4161: LD_ADDR_VAR 0 1
4165: PUSH
4166: LD_INT 3
4168: PPUSH
4169: LD_INT 21
4171: PUSH
4172: LD_INT 2
4174: PUSH
4175: EMPTY
4176: LIST
4177: LIST
4178: PUSH
4179: LD_INT 3
4181: PUSH
4182: LD_INT 58
4184: PUSH
4185: EMPTY
4186: LIST
4187: PUSH
4188: EMPTY
4189: LIST
4190: LIST
4191: PUSH
4192: EMPTY
4193: LIST
4194: LIST
4195: PPUSH
4196: CALL_OW 70
4200: PUSH
4201: FOR_IN
4202: IFFALSE 4414
// begin cargoType = GetCargoType ( i ) ;
4204: LD_ADDR_VAR 0 2
4208: PUSH
4209: LD_VAR 0 1
4213: PPUSH
4214: CALL_OW 288
4218: ST_TO_ADDR
// if GetWeapon ( i ) = us_cargo_bay then
4219: LD_VAR 0 1
4223: PPUSH
4224: CALL_OW 264
4228: PUSH
4229: LD_INT 12
4231: EQUAL
4232: IFFALSE 4329
// yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , cargoType , GetCargo ( i , cargoType ) ] ] else
4234: LD_ADDR_EXP 14
4238: PUSH
4239: LD_EXP 14
4243: PUSH
4244: LD_VAR 0 1
4248: PPUSH
4249: CALL_OW 248
4253: PUSH
4254: LD_VAR 0 1
4258: PPUSH
4259: CALL_OW 265
4263: PUSH
4264: LD_VAR 0 1
4268: PPUSH
4269: CALL_OW 262
4273: PUSH
4274: LD_VAR 0 1
4278: PPUSH
4279: CALL_OW 263
4283: PUSH
4284: LD_VAR 0 1
4288: PPUSH
4289: CALL_OW 264
4293: PUSH
4294: LD_VAR 0 2
4298: PUSH
4299: LD_VAR 0 1
4303: PPUSH
4304: LD_VAR 0 2
4308: PPUSH
4309: CALL_OW 289
4313: PUSH
4314: EMPTY
4315: LIST
4316: LIST
4317: LIST
4318: LIST
4319: LIST
4320: LIST
4321: LIST
4322: PUSH
4323: EMPTY
4324: LIST
4325: ADD
4326: ST_TO_ADDR
4327: GO 4400
// yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ] ;
4329: LD_ADDR_EXP 14
4333: PUSH
4334: LD_EXP 14
4338: PUSH
4339: LD_VAR 0 1
4343: PPUSH
4344: CALL_OW 248
4348: PUSH
4349: LD_VAR 0 1
4353: PPUSH
4354: CALL_OW 265
4358: PUSH
4359: LD_VAR 0 1
4363: PPUSH
4364: CALL_OW 262
4368: PUSH
4369: LD_VAR 0 1
4373: PPUSH
4374: CALL_OW 263
4378: PUSH
4379: LD_VAR 0 1
4383: PPUSH
4384: CALL_OW 264
4388: PUSH
4389: EMPTY
4390: LIST
4391: LIST
4392: LIST
4393: LIST
4394: LIST
4395: PUSH
4396: EMPTY
4397: LIST
4398: ADD
4399: ST_TO_ADDR
// SaveVariable ( yourVehicles , 06_VehiclesIn06_1 ) ;
4400: LD_EXP 14
4404: PPUSH
4405: LD_STRING 06_VehiclesIn06_1
4407: PPUSH
4408: CALL_OW 39
// end ;
4412: GO 4201
4414: POP
4415: POP
// end ; SaveCargos ;
4416: CALL 5543 0 0
// ChangeMap ( 6 , %_cont ) ;
4420: LD_INT 6
4422: PPUSH
4423: LD_STRING %_cont
4425: PPUSH
4426: CALL_OW 340
// end ; end_of_file
4430: PPOPN 2
4432: END
// export function SelectDeltaCharacters ; var i , yourPeople ; begin
4433: LD_INT 0
4435: PPUSH
4436: PPUSH
4437: PPUSH
// selectedPeople := [ ] ;
4438: LD_ADDR_EXP 17
4442: PUSH
4443: EMPTY
4444: ST_TO_ADDR
// yourPeople = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , DeltaDoctor , Denis ] ;
4445: LD_ADDR_VAR 0 3
4449: PUSH
4450: LD_INT 22
4452: PUSH
4453: LD_INT 1
4455: PUSH
4456: EMPTY
4457: LIST
4458: LIST
4459: PUSH
4460: LD_INT 21
4462: PUSH
4463: LD_INT 1
4465: PUSH
4466: EMPTY
4467: LIST
4468: LIST
4469: PUSH
4470: LD_INT 2
4472: PUSH
4473: LD_INT 25
4475: PUSH
4476: LD_INT 1
4478: PUSH
4479: EMPTY
4480: LIST
4481: LIST
4482: PUSH
4483: LD_INT 25
4485: PUSH
4486: LD_INT 2
4488: PUSH
4489: EMPTY
4490: LIST
4491: LIST
4492: PUSH
4493: LD_INT 25
4495: PUSH
4496: LD_INT 3
4498: PUSH
4499: EMPTY
4500: LIST
4501: LIST
4502: PUSH
4503: LD_INT 25
4505: PUSH
4506: LD_INT 4
4508: PUSH
4509: EMPTY
4510: LIST
4511: LIST
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: LIST
4517: LIST
4518: LIST
4519: PUSH
4520: EMPTY
4521: LIST
4522: LIST
4523: LIST
4524: PPUSH
4525: CALL_OW 69
4529: PUSH
4530: LD_EXP 1
4534: PUSH
4535: LD_EXP 15
4539: PUSH
4540: LD_EXP 3
4544: PUSH
4545: EMPTY
4546: LIST
4547: LIST
4548: LIST
4549: DIFF
4550: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , 5 , 5 , [ sel_change_class , JMM , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ yourPeople ^ [ sel_dont_change_class , sel_not_changeable , Denis , DeltaDoctor ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
4551: LD_ADDR_EXP 17
4555: PUSH
4556: LD_STRING text
4558: PPUSH
4559: LD_INT 5
4561: PPUSH
4562: LD_INT 5
4564: PPUSH
4565: LD_INT -5
4567: PUSH
4568: LD_EXP 1
4572: PUSH
4573: LD_INT -6
4575: PUSH
4576: LD_INT -2
4578: PUSH
4579: LD_INT -3
4581: PUSH
4582: LD_INT -5
4584: PUSH
4585: EMPTY
4586: LIST
4587: LIST
4588: LIST
4589: LIST
4590: LIST
4591: LIST
4592: PUSH
4593: LD_VAR 0 3
4597: ADD
4598: PUSH
4599: LD_INT -6
4601: PUSH
4602: LD_INT -4
4604: PUSH
4605: LD_EXP 3
4609: PUSH
4610: LD_EXP 15
4614: PUSH
4615: EMPTY
4616: LIST
4617: LIST
4618: LIST
4619: LIST
4620: ADD
4621: PPUSH
4622: LD_INT 1
4624: PUSH
4625: LD_INT 3
4627: PUSH
4628: LD_INT 2
4630: PUSH
4631: LD_INT 1
4633: PUSH
4634: EMPTY
4635: LIST
4636: LIST
4637: PUSH
4638: LD_INT 4
4640: PUSH
4641: EMPTY
4642: LIST
4643: LIST
4644: LIST
4645: LIST
4646: PPUSH
4647: CALL_OW 42
4651: ST_TO_ADDR
// ComStop ( selectedPeople ) ;
4652: LD_EXP 17
4656: PPUSH
4657: CALL_OW 141
// SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 4 ) ;
4661: LD_INT 22
4663: PUSH
4664: LD_INT 1
4666: PUSH
4667: EMPTY
4668: LIST
4669: LIST
4670: PUSH
4671: LD_INT 21
4673: PUSH
4674: LD_INT 1
4676: PUSH
4677: EMPTY
4678: LIST
4679: LIST
4680: PUSH
4681: EMPTY
4682: LIST
4683: LIST
4684: PPUSH
4685: CALL_OW 69
4689: PPUSH
4690: LD_INT 4
4692: PPUSH
4693: CALL_OW 235
// for i in selectedPeople do
4697: LD_ADDR_VAR 0 2
4701: PUSH
4702: LD_EXP 17
4706: PUSH
4707: FOR_IN
4708: IFFALSE 4724
// SetSide ( i , 1 ) ;
4710: LD_VAR 0 2
4714: PPUSH
4715: LD_INT 1
4717: PPUSH
4718: CALL_OW 235
4722: GO 4707
4724: POP
4725: POP
// for i in yourApemans do
4726: LD_ADDR_VAR 0 2
4730: PUSH
4731: LD_EXP 13
4735: PUSH
4736: FOR_IN
4737: IFFALSE 4753
// SetSide ( i , 1 ) ;
4739: LD_VAR 0 2
4743: PPUSH
4744: LD_INT 1
4746: PPUSH
4747: CALL_OW 235
4751: GO 4736
4753: POP
4754: POP
// SetSide ( JMM , 1 ) ;
4755: LD_EXP 1
4759: PPUSH
4760: LD_INT 1
4762: PPUSH
4763: CALL_OW 235
// SetSkill ( yourApemans , 2 , 5 ) ;
4767: LD_EXP 13
4771: PPUSH
4772: LD_INT 2
4774: PPUSH
4775: LD_INT 5
4777: PPUSH
4778: CALL_OW 237
// end ;
4782: LD_VAR 0 1
4786: RET
// export function SaveDeltaCharacters ; begin
4787: LD_INT 0
4789: PPUSH
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
4790: LD_EXP 1
4794: PPUSH
4795: LD_EXP 22
4799: PUSH
4800: LD_STRING JMM
4802: STR
4803: PPUSH
4804: CALL_OW 38
// SaveCharacters ( DeltaDoctor , DeltaDoctor ) ;
4808: LD_EXP 15
4812: PPUSH
4813: LD_STRING DeltaDoctor
4815: PPUSH
4816: CALL_OW 38
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
4820: LD_EXP 3
4824: PPUSH
4825: LD_EXP 22
4829: PUSH
4830: LD_STRING Denis
4832: STR
4833: PPUSH
4834: CALL_OW 38
// if Lisa in selectedPeople then
4838: LD_EXP 4
4842: PUSH
4843: LD_EXP 17
4847: IN
4848: IFFALSE 4880
// begin SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
4850: LD_EXP 4
4854: PPUSH
4855: LD_EXP 22
4859: PUSH
4860: LD_STRING Lisa
4862: STR
4863: PPUSH
4864: CALL_OW 38
// SaveVariable ( 1 , LisaIn06 ) ;
4868: LD_INT 1
4870: PPUSH
4871: LD_STRING LisaIn06
4873: PPUSH
4874: CALL_OW 39
// end else
4878: GO 4901
// if IsOk ( Lisa ) then
4880: LD_EXP 4
4884: PPUSH
4885: CALL_OW 302
4889: IFFALSE 4901
// SaveVariable ( 1 , LisaStayInDelta ) ;
4891: LD_INT 1
4893: PPUSH
4894: LD_STRING LisaStayInDelta
4896: PPUSH
4897: CALL_OW 39
// if Bobby in selectedPeople then
4901: LD_EXP 6
4905: PUSH
4906: LD_EXP 17
4910: IN
4911: IFFALSE 4943
// begin SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
4913: LD_EXP 6
4917: PPUSH
4918: LD_EXP 22
4922: PUSH
4923: LD_STRING Bobby
4925: STR
4926: PPUSH
4927: CALL_OW 38
// SaveVariable ( 1 , BobbyIn06 ) ;
4931: LD_INT 1
4933: PPUSH
4934: LD_STRING BobbyIn06
4936: PPUSH
4937: CALL_OW 39
// end else
4941: GO 4964
// if IsOk ( Bobby ) then
4943: LD_EXP 6
4947: PPUSH
4948: CALL_OW 302
4952: IFFALSE 4964
// SaveVariable ( 1 , BobbyStayInDelta ) ;
4954: LD_INT 1
4956: PPUSH
4957: LD_STRING BobbyStayInDelta
4959: PPUSH
4960: CALL_OW 39
// if Cyrus in selectedPeople then
4964: LD_EXP 7
4968: PUSH
4969: LD_EXP 17
4973: IN
4974: IFFALSE 5006
// begin SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
4976: LD_EXP 7
4980: PPUSH
4981: LD_EXP 22
4985: PUSH
4986: LD_STRING Cyrus
4988: STR
4989: PPUSH
4990: CALL_OW 38
// SaveVariable ( 1 , CyrusIn06 ) ;
4994: LD_INT 1
4996: PPUSH
4997: LD_STRING CyrusIn06
4999: PPUSH
5000: CALL_OW 39
// end else
5004: GO 5027
// if IsOk ( Cyrus ) then
5006: LD_EXP 7
5010: PPUSH
5011: CALL_OW 302
5015: IFFALSE 5027
// SaveVariable ( 1 , CyrusStayInDelta ) ;
5017: LD_INT 1
5019: PPUSH
5020: LD_STRING CyrusStayInDelta
5022: PPUSH
5023: CALL_OW 39
// if Frank in selectedPeople then
5027: LD_EXP 5
5031: PUSH
5032: LD_EXP 17
5036: IN
5037: IFFALSE 5069
// begin SaveCharacters ( Frank , mission_prefix & Frank ) ;
5039: LD_EXP 5
5043: PPUSH
5044: LD_EXP 22
5048: PUSH
5049: LD_STRING Frank
5051: STR
5052: PPUSH
5053: CALL_OW 38
// SaveVariable ( 1 , FrankIn06 ) ;
5057: LD_INT 1
5059: PPUSH
5060: LD_STRING FrankIn06
5062: PPUSH
5063: CALL_OW 39
// end else
5067: GO 5090
// if IsOk ( Frank ) then
5069: LD_EXP 5
5073: PPUSH
5074: CALL_OW 302
5078: IFFALSE 5090
// SaveVariable ( 1 , FrankStayInDelta ) ;
5080: LD_INT 1
5082: PPUSH
5083: LD_STRING FrankStayInDelta
5085: PPUSH
5086: CALL_OW 39
// if Brown in selectedPeople then
5090: LD_EXP 8
5094: PUSH
5095: LD_EXP 17
5099: IN
5100: IFFALSE 5132
// begin SaveCharacters ( Brown , mission_prefix & Brown ) ;
5102: LD_EXP 8
5106: PPUSH
5107: LD_EXP 22
5111: PUSH
5112: LD_STRING Brown
5114: STR
5115: PPUSH
5116: CALL_OW 38
// SaveVariable ( 1 , BrownIn06 ) ;
5120: LD_INT 1
5122: PPUSH
5123: LD_STRING BrownIn06
5125: PPUSH
5126: CALL_OW 39
// end else
5130: GO 5153
// if IsOk ( Brown ) then
5132: LD_EXP 8
5136: PPUSH
5137: CALL_OW 302
5141: IFFALSE 5153
// SaveVariable ( 1 , BrownStayInDelta ) ;
5143: LD_INT 1
5145: PPUSH
5146: LD_STRING BrownStayInDelta
5148: PPUSH
5149: CALL_OW 39
// if Donaldson in selectedPeople then
5153: LD_EXP 9
5157: PUSH
5158: LD_EXP 17
5162: IN
5163: IFFALSE 5195
// begin SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
5165: LD_EXP 9
5169: PPUSH
5170: LD_EXP 22
5174: PUSH
5175: LD_STRING Donaldson
5177: STR
5178: PPUSH
5179: CALL_OW 38
// SaveVariable ( 1 , DonaldsonIn06 ) ;
5183: LD_INT 1
5185: PPUSH
5186: LD_STRING DonaldsonIn06
5188: PPUSH
5189: CALL_OW 39
// end else
5193: GO 5216
// if IsOk ( Donaldson ) then
5195: LD_EXP 9
5199: PPUSH
5200: CALL_OW 302
5204: IFFALSE 5216
// SaveVariable ( 1 , DonaldsonStayInDelta ) ;
5206: LD_INT 1
5208: PPUSH
5209: LD_STRING DonaldsonStayInDelta
5211: PPUSH
5212: CALL_OW 39
// if Gladstone in selectedPeople then
5216: LD_EXP 2
5220: PUSH
5221: LD_EXP 17
5225: IN
5226: IFFALSE 5258
// begin SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
5228: LD_EXP 2
5232: PPUSH
5233: LD_EXP 22
5237: PUSH
5238: LD_STRING Gladstone
5240: STR
5241: PPUSH
5242: CALL_OW 38
// SaveVariable ( 1 , GladstoneIn06 ) ;
5246: LD_INT 1
5248: PPUSH
5249: LD_STRING GladstoneIn06
5251: PPUSH
5252: CALL_OW 39
// end else
5256: GO 5279
// if IsOk ( Gladstone ) then
5258: LD_EXP 2
5262: PPUSH
5263: CALL_OW 302
5267: IFFALSE 5279
// SaveVariable ( 1 , GladstoneStayInDelta ) ;
5269: LD_INT 1
5271: PPUSH
5272: LD_STRING GladstoneStayInDelta
5274: PPUSH
5275: CALL_OW 39
// selectedPeople := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ;
5279: LD_ADDR_EXP 17
5283: PUSH
5284: LD_INT 22
5286: PUSH
5287: LD_INT 1
5289: PUSH
5290: EMPTY
5291: LIST
5292: LIST
5293: PUSH
5294: LD_INT 23
5296: PUSH
5297: LD_INT 1
5299: PUSH
5300: EMPTY
5301: LIST
5302: LIST
5303: PUSH
5304: LD_INT 21
5306: PUSH
5307: LD_INT 1
5309: PUSH
5310: EMPTY
5311: LIST
5312: LIST
5313: PUSH
5314: EMPTY
5315: LIST
5316: LIST
5317: LIST
5318: PPUSH
5319: CALL_OW 69
5323: ST_TO_ADDR
// SaveCharacters ( yourApemans , ApeIn06 ) ;
5324: LD_EXP 13
5328: PPUSH
5329: LD_STRING ApeIn06
5331: PPUSH
5332: CALL_OW 38
// SaveCharacters ( selectedPeople diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis ] , OthersIn06 ) ;
5336: LD_EXP 17
5340: PUSH
5341: LD_EXP 1
5345: PUSH
5346: LD_EXP 4
5350: PUSH
5351: LD_EXP 6
5355: PUSH
5356: LD_EXP 7
5360: PUSH
5361: LD_EXP 5
5365: PUSH
5366: LD_EXP 8
5370: PUSH
5371: LD_EXP 9
5375: PUSH
5376: LD_EXP 2
5380: PUSH
5381: LD_EXP 3
5385: PUSH
5386: EMPTY
5387: LIST
5388: LIST
5389: LIST
5390: LIST
5391: LIST
5392: LIST
5393: LIST
5394: LIST
5395: LIST
5396: DIFF
5397: PPUSH
5398: LD_STRING OthersIn06
5400: PPUSH
5401: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ DeltaDoctor , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis ] , OthersStayInDelta ) ;
5405: LD_INT 22
5407: PUSH
5408: LD_INT 4
5410: PUSH
5411: EMPTY
5412: LIST
5413: LIST
5414: PUSH
5415: LD_INT 2
5417: PUSH
5418: LD_INT 25
5420: PUSH
5421: LD_INT 1
5423: PUSH
5424: EMPTY
5425: LIST
5426: LIST
5427: PUSH
5428: LD_INT 25
5430: PUSH
5431: LD_INT 2
5433: PUSH
5434: EMPTY
5435: LIST
5436: LIST
5437: PUSH
5438: LD_INT 25
5440: PUSH
5441: LD_INT 3
5443: PUSH
5444: EMPTY
5445: LIST
5446: LIST
5447: PUSH
5448: LD_INT 25
5450: PUSH
5451: LD_INT 4
5453: PUSH
5454: EMPTY
5455: LIST
5456: LIST
5457: PUSH
5458: EMPTY
5459: LIST
5460: LIST
5461: LIST
5462: LIST
5463: LIST
5464: PUSH
5465: EMPTY
5466: LIST
5467: LIST
5468: PPUSH
5469: CALL_OW 69
5473: PUSH
5474: LD_EXP 15
5478: PUSH
5479: LD_EXP 4
5483: PUSH
5484: LD_EXP 6
5488: PUSH
5489: LD_EXP 7
5493: PUSH
5494: LD_EXP 5
5498: PUSH
5499: LD_EXP 8
5503: PUSH
5504: LD_EXP 9
5508: PUSH
5509: LD_EXP 2
5513: PUSH
5514: LD_EXP 3
5518: PUSH
5519: EMPTY
5520: LIST
5521: LIST
5522: LIST
5523: LIST
5524: LIST
5525: LIST
5526: LIST
5527: LIST
5528: LIST
5529: DIFF
5530: PPUSH
5531: LD_STRING OthersStayInDelta
5533: PPUSH
5534: CALL_OW 38
// end ;
5538: LD_VAR 0 1
5542: RET
// export function SaveCargos ; var i ; begin
5543: LD_INT 0
5545: PPUSH
5546: PPUSH
// for i in FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) do
5547: LD_ADDR_VAR 0 2
5551: PUSH
5552: LD_INT 3
5554: PPUSH
5555: LD_INT 22
5557: PUSH
5558: LD_INT 1
5560: PUSH
5561: EMPTY
5562: LIST
5563: LIST
5564: PUSH
5565: LD_INT 34
5567: PUSH
5568: LD_INT 12
5570: PUSH
5571: EMPTY
5572: LIST
5573: LIST
5574: PUSH
5575: EMPTY
5576: LIST
5577: LIST
5578: PPUSH
5579: CALL_OW 70
5583: PUSH
5584: FOR_IN
5585: IFFALSE 5613
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
5587: LD_ADDR_EXP 21
5591: PUSH
5592: LD_EXP 21
5596: PUSH
5597: LD_VAR 0 2
5601: PPUSH
5602: CALL 5632 0 1
5606: PUSH
5607: EMPTY
5608: LIST
5609: ADD
5610: ST_TO_ADDR
5611: GO 5584
5613: POP
5614: POP
// SaveVariable ( resources , 06_ResourcesInCargo06_1 ) ;
5615: LD_EXP 21
5619: PPUSH
5620: LD_STRING 06_ResourcesInCargo06_1
5622: PPUSH
5623: CALL_OW 39
// end ;
5627: LD_VAR 0 1
5631: RET
// export function GetMultiCargo ( cargo_bay ) ; begin
5632: LD_INT 0
5634: PPUSH
// result := [ GetCargo ( cargo_bay , mat_cans ) , GetCargo ( cargo_bay , mat_oil ) , GetCargo ( cargo_bay , mat_siberit ) ] ;
5635: LD_ADDR_VAR 0 2
5639: PUSH
5640: LD_VAR 0 1
5644: PPUSH
5645: LD_INT 1
5647: PPUSH
5648: CALL_OW 289
5652: PUSH
5653: LD_VAR 0 1
5657: PPUSH
5658: LD_INT 2
5660: PPUSH
5661: CALL_OW 289
5665: PUSH
5666: LD_VAR 0 1
5670: PPUSH
5671: LD_INT 3
5673: PPUSH
5674: CALL_OW 289
5678: PUSH
5679: EMPTY
5680: LIST
5681: LIST
5682: LIST
5683: ST_TO_ADDR
// end ; end_of_file
5684: LD_VAR 0 2
5688: RET
// on Command ( comandid ) do var i ;
5689: LD_INT 0
5691: PPUSH
// begin if comandid = 65 then
5692: LD_VAR 0 1
5696: PUSH
5697: LD_INT 65
5699: EQUAL
5700: IFFALSE 5741
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
5702: LD_ADDR_VAR 0 2
5706: PUSH
5707: LD_INT 22
5709: PUSH
5710: LD_INT 1
5712: PUSH
5713: EMPTY
5714: LIST
5715: LIST
5716: PUSH
5717: EMPTY
5718: LIST
5719: PPUSH
5720: CALL_OW 69
5724: PUSH
5725: FOR_IN
5726: IFFALSE 5739
// ComStop ( i ) ;
5728: LD_VAR 0 2
5732: PPUSH
5733: CALL_OW 141
5737: GO 5725
5739: POP
5740: POP
// end ;
5741: PPOPN 2
5743: END
// on ApemanTamed ( apeman , human ) do var tmp ;
5744: LD_INT 0
5746: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
5747: LD_ADDR_VAR 0 3
5751: PUSH
5752: LD_INT 22
5754: PUSH
5755: LD_INT 1
5757: PUSH
5758: EMPTY
5759: LIST
5760: LIST
5761: PUSH
5762: LD_INT 21
5764: PUSH
5765: LD_INT 3
5767: PUSH
5768: EMPTY
5769: LIST
5770: LIST
5771: PUSH
5772: LD_INT 30
5774: PUSH
5775: LD_INT 0
5777: PUSH
5778: EMPTY
5779: LIST
5780: LIST
5781: PUSH
5782: EMPTY
5783: LIST
5784: LIST
5785: LIST
5786: PPUSH
5787: CALL_OW 69
5791: ST_TO_ADDR
// if not tmp then
5792: LD_VAR 0 3
5796: NOT
5797: IFFALSE 5801
// exit ;
5799: GO 5831
// ComEnterUnit ( apeman , tmp [ 1 ] ) ;
5801: LD_VAR 0 1
5805: PPUSH
5806: LD_VAR 0 3
5810: PUSH
5811: LD_INT 1
5813: ARRAY
5814: PPUSH
5815: CALL_OW 120
// SetSide ( apeman , 4 ) ;
5819: LD_VAR 0 1
5823: PPUSH
5824: LD_INT 4
5826: PPUSH
5827: CALL_OW 235
// end ;
5831: PPOPN 3
5833: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
5834: LD_VAR 0 1
5838: PPUSH
5839: CALL 20197 0 1
// end ;
5843: PPOPN 1
5845: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
5846: LD_VAR 0 1
5850: PPUSH
5851: LD_VAR 0 2
5855: PPUSH
5856: CALL 20319 0 2
// end ; end_of_file
5860: PPOPN 2
5862: END
// every 0 0$1 do
5863: GO 5865
5865: DISABLE
// begin enable ;
5866: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
5867: LD_STRING updateTimer(
5869: PUSH
5870: LD_OWVAR 1
5874: STR
5875: PUSH
5876: LD_STRING );
5878: STR
5879: PPUSH
5880: CALL_OW 559
// end ;
5884: END
// export function SOS_MapStart ( ) ; begin
5885: LD_INT 0
5887: PPUSH
// if streamModeActive then
5888: LD_EXP 24
5892: IFFALSE 5901
// DefineStreamItems ( true ) ;
5894: LD_INT 1
5896: PPUSH
5897: CALL 7551 0 1
// UpdateFactoryWaypoints ( ) ;
5901: CALL 21135 0 0
// end ;
5905: LD_VAR 0 1
5909: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
5910: LD_INT 0
5912: PPUSH
// if p2 = 100 then
5913: LD_VAR 0 2
5917: PUSH
5918: LD_INT 100
5920: EQUAL
5921: IFFALSE 6924
// begin if not StreamModeActive then
5923: LD_EXP 24
5927: NOT
5928: IFFALSE 5938
// StreamModeActive := true ;
5930: LD_ADDR_EXP 24
5934: PUSH
5935: LD_INT 1
5937: ST_TO_ADDR
// if p3 = 0 then
5938: LD_VAR 0 3
5942: PUSH
5943: LD_INT 0
5945: EQUAL
5946: IFFALSE 5952
// InitStreamMode ;
5948: CALL 7087 0 0
// if p3 = 1 then
5952: LD_VAR 0 3
5956: PUSH
5957: LD_INT 1
5959: EQUAL
5960: IFFALSE 5970
// sRocket := true ;
5962: LD_ADDR_EXP 29
5966: PUSH
5967: LD_INT 1
5969: ST_TO_ADDR
// if p3 = 2 then
5970: LD_VAR 0 3
5974: PUSH
5975: LD_INT 2
5977: EQUAL
5978: IFFALSE 5988
// sSpeed := true ;
5980: LD_ADDR_EXP 28
5984: PUSH
5985: LD_INT 1
5987: ST_TO_ADDR
// if p3 = 3 then
5988: LD_VAR 0 3
5992: PUSH
5993: LD_INT 3
5995: EQUAL
5996: IFFALSE 6006
// sEngine := true ;
5998: LD_ADDR_EXP 30
6002: PUSH
6003: LD_INT 1
6005: ST_TO_ADDR
// if p3 = 4 then
6006: LD_VAR 0 3
6010: PUSH
6011: LD_INT 4
6013: EQUAL
6014: IFFALSE 6024
// sSpec := true ;
6016: LD_ADDR_EXP 27
6020: PUSH
6021: LD_INT 1
6023: ST_TO_ADDR
// if p3 = 5 then
6024: LD_VAR 0 3
6028: PUSH
6029: LD_INT 5
6031: EQUAL
6032: IFFALSE 6042
// sLevel := true ;
6034: LD_ADDR_EXP 31
6038: PUSH
6039: LD_INT 1
6041: ST_TO_ADDR
// if p3 = 6 then
6042: LD_VAR 0 3
6046: PUSH
6047: LD_INT 6
6049: EQUAL
6050: IFFALSE 6060
// sArmoury := true ;
6052: LD_ADDR_EXP 32
6056: PUSH
6057: LD_INT 1
6059: ST_TO_ADDR
// if p3 = 7 then
6060: LD_VAR 0 3
6064: PUSH
6065: LD_INT 7
6067: EQUAL
6068: IFFALSE 6078
// sRadar := true ;
6070: LD_ADDR_EXP 33
6074: PUSH
6075: LD_INT 1
6077: ST_TO_ADDR
// if p3 = 8 then
6078: LD_VAR 0 3
6082: PUSH
6083: LD_INT 8
6085: EQUAL
6086: IFFALSE 6096
// sBunker := true ;
6088: LD_ADDR_EXP 34
6092: PUSH
6093: LD_INT 1
6095: ST_TO_ADDR
// if p3 = 9 then
6096: LD_VAR 0 3
6100: PUSH
6101: LD_INT 9
6103: EQUAL
6104: IFFALSE 6114
// sHack := true ;
6106: LD_ADDR_EXP 35
6110: PUSH
6111: LD_INT 1
6113: ST_TO_ADDR
// if p3 = 10 then
6114: LD_VAR 0 3
6118: PUSH
6119: LD_INT 10
6121: EQUAL
6122: IFFALSE 6132
// sFire := true ;
6124: LD_ADDR_EXP 36
6128: PUSH
6129: LD_INT 1
6131: ST_TO_ADDR
// if p3 = 11 then
6132: LD_VAR 0 3
6136: PUSH
6137: LD_INT 11
6139: EQUAL
6140: IFFALSE 6150
// sRefresh := true ;
6142: LD_ADDR_EXP 37
6146: PUSH
6147: LD_INT 1
6149: ST_TO_ADDR
// if p3 = 12 then
6150: LD_VAR 0 3
6154: PUSH
6155: LD_INT 12
6157: EQUAL
6158: IFFALSE 6168
// sExp := true ;
6160: LD_ADDR_EXP 38
6164: PUSH
6165: LD_INT 1
6167: ST_TO_ADDR
// if p3 = 13 then
6168: LD_VAR 0 3
6172: PUSH
6173: LD_INT 13
6175: EQUAL
6176: IFFALSE 6186
// sDepot := true ;
6178: LD_ADDR_EXP 39
6182: PUSH
6183: LD_INT 1
6185: ST_TO_ADDR
// if p3 = 14 then
6186: LD_VAR 0 3
6190: PUSH
6191: LD_INT 14
6193: EQUAL
6194: IFFALSE 6204
// sFlag := true ;
6196: LD_ADDR_EXP 40
6200: PUSH
6201: LD_INT 1
6203: ST_TO_ADDR
// if p3 = 15 then
6204: LD_VAR 0 3
6208: PUSH
6209: LD_INT 15
6211: EQUAL
6212: IFFALSE 6222
// sKamikadze := true ;
6214: LD_ADDR_EXP 48
6218: PUSH
6219: LD_INT 1
6221: ST_TO_ADDR
// if p3 = 16 then
6222: LD_VAR 0 3
6226: PUSH
6227: LD_INT 16
6229: EQUAL
6230: IFFALSE 6240
// sTroll := true ;
6232: LD_ADDR_EXP 49
6236: PUSH
6237: LD_INT 1
6239: ST_TO_ADDR
// if p3 = 17 then
6240: LD_VAR 0 3
6244: PUSH
6245: LD_INT 17
6247: EQUAL
6248: IFFALSE 6258
// sSlow := true ;
6250: LD_ADDR_EXP 50
6254: PUSH
6255: LD_INT 1
6257: ST_TO_ADDR
// if p3 = 18 then
6258: LD_VAR 0 3
6262: PUSH
6263: LD_INT 18
6265: EQUAL
6266: IFFALSE 6276
// sLack := true ;
6268: LD_ADDR_EXP 51
6272: PUSH
6273: LD_INT 1
6275: ST_TO_ADDR
// if p3 = 19 then
6276: LD_VAR 0 3
6280: PUSH
6281: LD_INT 19
6283: EQUAL
6284: IFFALSE 6294
// sTank := true ;
6286: LD_ADDR_EXP 53
6290: PUSH
6291: LD_INT 1
6293: ST_TO_ADDR
// if p3 = 20 then
6294: LD_VAR 0 3
6298: PUSH
6299: LD_INT 20
6301: EQUAL
6302: IFFALSE 6312
// sRemote := true ;
6304: LD_ADDR_EXP 54
6308: PUSH
6309: LD_INT 1
6311: ST_TO_ADDR
// if p3 = 21 then
6312: LD_VAR 0 3
6316: PUSH
6317: LD_INT 21
6319: EQUAL
6320: IFFALSE 6330
// sPowell := true ;
6322: LD_ADDR_EXP 55
6326: PUSH
6327: LD_INT 1
6329: ST_TO_ADDR
// if p3 = 22 then
6330: LD_VAR 0 3
6334: PUSH
6335: LD_INT 22
6337: EQUAL
6338: IFFALSE 6348
// sTeleport := true ;
6340: LD_ADDR_EXP 58
6344: PUSH
6345: LD_INT 1
6347: ST_TO_ADDR
// if p3 = 23 then
6348: LD_VAR 0 3
6352: PUSH
6353: LD_INT 23
6355: EQUAL
6356: IFFALSE 6366
// sOilTower := true ;
6358: LD_ADDR_EXP 60
6362: PUSH
6363: LD_INT 1
6365: ST_TO_ADDR
// if p3 = 24 then
6366: LD_VAR 0 3
6370: PUSH
6371: LD_INT 24
6373: EQUAL
6374: IFFALSE 6384
// sShovel := true ;
6376: LD_ADDR_EXP 61
6380: PUSH
6381: LD_INT 1
6383: ST_TO_ADDR
// if p3 = 25 then
6384: LD_VAR 0 3
6388: PUSH
6389: LD_INT 25
6391: EQUAL
6392: IFFALSE 6402
// sSheik := true ;
6394: LD_ADDR_EXP 62
6398: PUSH
6399: LD_INT 1
6401: ST_TO_ADDR
// if p3 = 26 then
6402: LD_VAR 0 3
6406: PUSH
6407: LD_INT 26
6409: EQUAL
6410: IFFALSE 6420
// sEarthquake := true ;
6412: LD_ADDR_EXP 64
6416: PUSH
6417: LD_INT 1
6419: ST_TO_ADDR
// if p3 = 27 then
6420: LD_VAR 0 3
6424: PUSH
6425: LD_INT 27
6427: EQUAL
6428: IFFALSE 6438
// sAI := true ;
6430: LD_ADDR_EXP 65
6434: PUSH
6435: LD_INT 1
6437: ST_TO_ADDR
// if p3 = 28 then
6438: LD_VAR 0 3
6442: PUSH
6443: LD_INT 28
6445: EQUAL
6446: IFFALSE 6456
// sCargo := true ;
6448: LD_ADDR_EXP 68
6452: PUSH
6453: LD_INT 1
6455: ST_TO_ADDR
// if p3 = 29 then
6456: LD_VAR 0 3
6460: PUSH
6461: LD_INT 29
6463: EQUAL
6464: IFFALSE 6474
// sDLaser := true ;
6466: LD_ADDR_EXP 69
6470: PUSH
6471: LD_INT 1
6473: ST_TO_ADDR
// if p3 = 30 then
6474: LD_VAR 0 3
6478: PUSH
6479: LD_INT 30
6481: EQUAL
6482: IFFALSE 6492
// sExchange := true ;
6484: LD_ADDR_EXP 70
6488: PUSH
6489: LD_INT 1
6491: ST_TO_ADDR
// if p3 = 31 then
6492: LD_VAR 0 3
6496: PUSH
6497: LD_INT 31
6499: EQUAL
6500: IFFALSE 6510
// sFac := true ;
6502: LD_ADDR_EXP 71
6506: PUSH
6507: LD_INT 1
6509: ST_TO_ADDR
// if p3 = 32 then
6510: LD_VAR 0 3
6514: PUSH
6515: LD_INT 32
6517: EQUAL
6518: IFFALSE 6528
// sPower := true ;
6520: LD_ADDR_EXP 72
6524: PUSH
6525: LD_INT 1
6527: ST_TO_ADDR
// if p3 = 33 then
6528: LD_VAR 0 3
6532: PUSH
6533: LD_INT 33
6535: EQUAL
6536: IFFALSE 6546
// sRandom := true ;
6538: LD_ADDR_EXP 73
6542: PUSH
6543: LD_INT 1
6545: ST_TO_ADDR
// if p3 = 34 then
6546: LD_VAR 0 3
6550: PUSH
6551: LD_INT 34
6553: EQUAL
6554: IFFALSE 6564
// sShield := true ;
6556: LD_ADDR_EXP 74
6560: PUSH
6561: LD_INT 1
6563: ST_TO_ADDR
// if p3 = 35 then
6564: LD_VAR 0 3
6568: PUSH
6569: LD_INT 35
6571: EQUAL
6572: IFFALSE 6582
// sTime := true ;
6574: LD_ADDR_EXP 75
6578: PUSH
6579: LD_INT 1
6581: ST_TO_ADDR
// if p3 = 36 then
6582: LD_VAR 0 3
6586: PUSH
6587: LD_INT 36
6589: EQUAL
6590: IFFALSE 6600
// sTools := true ;
6592: LD_ADDR_EXP 76
6596: PUSH
6597: LD_INT 1
6599: ST_TO_ADDR
// if p3 = 101 then
6600: LD_VAR 0 3
6604: PUSH
6605: LD_INT 101
6607: EQUAL
6608: IFFALSE 6618
// sSold := true ;
6610: LD_ADDR_EXP 41
6614: PUSH
6615: LD_INT 1
6617: ST_TO_ADDR
// if p3 = 102 then
6618: LD_VAR 0 3
6622: PUSH
6623: LD_INT 102
6625: EQUAL
6626: IFFALSE 6636
// sDiff := true ;
6628: LD_ADDR_EXP 42
6632: PUSH
6633: LD_INT 1
6635: ST_TO_ADDR
// if p3 = 103 then
6636: LD_VAR 0 3
6640: PUSH
6641: LD_INT 103
6643: EQUAL
6644: IFFALSE 6654
// sFog := true ;
6646: LD_ADDR_EXP 45
6650: PUSH
6651: LD_INT 1
6653: ST_TO_ADDR
// if p3 = 104 then
6654: LD_VAR 0 3
6658: PUSH
6659: LD_INT 104
6661: EQUAL
6662: IFFALSE 6672
// sReset := true ;
6664: LD_ADDR_EXP 46
6668: PUSH
6669: LD_INT 1
6671: ST_TO_ADDR
// if p3 = 105 then
6672: LD_VAR 0 3
6676: PUSH
6677: LD_INT 105
6679: EQUAL
6680: IFFALSE 6690
// sSun := true ;
6682: LD_ADDR_EXP 47
6686: PUSH
6687: LD_INT 1
6689: ST_TO_ADDR
// if p3 = 106 then
6690: LD_VAR 0 3
6694: PUSH
6695: LD_INT 106
6697: EQUAL
6698: IFFALSE 6708
// sTiger := true ;
6700: LD_ADDR_EXP 43
6704: PUSH
6705: LD_INT 1
6707: ST_TO_ADDR
// if p3 = 107 then
6708: LD_VAR 0 3
6712: PUSH
6713: LD_INT 107
6715: EQUAL
6716: IFFALSE 6726
// sBomb := true ;
6718: LD_ADDR_EXP 44
6722: PUSH
6723: LD_INT 1
6725: ST_TO_ADDR
// if p3 = 108 then
6726: LD_VAR 0 3
6730: PUSH
6731: LD_INT 108
6733: EQUAL
6734: IFFALSE 6744
// sWound := true ;
6736: LD_ADDR_EXP 52
6740: PUSH
6741: LD_INT 1
6743: ST_TO_ADDR
// if p3 = 109 then
6744: LD_VAR 0 3
6748: PUSH
6749: LD_INT 109
6751: EQUAL
6752: IFFALSE 6762
// sBetray := true ;
6754: LD_ADDR_EXP 56
6758: PUSH
6759: LD_INT 1
6761: ST_TO_ADDR
// if p3 = 110 then
6762: LD_VAR 0 3
6766: PUSH
6767: LD_INT 110
6769: EQUAL
6770: IFFALSE 6780
// sContamin := true ;
6772: LD_ADDR_EXP 57
6776: PUSH
6777: LD_INT 1
6779: ST_TO_ADDR
// if p3 = 111 then
6780: LD_VAR 0 3
6784: PUSH
6785: LD_INT 111
6787: EQUAL
6788: IFFALSE 6798
// sOil := true ;
6790: LD_ADDR_EXP 59
6794: PUSH
6795: LD_INT 1
6797: ST_TO_ADDR
// if p3 = 112 then
6798: LD_VAR 0 3
6802: PUSH
6803: LD_INT 112
6805: EQUAL
6806: IFFALSE 6816
// sStu := true ;
6808: LD_ADDR_EXP 63
6812: PUSH
6813: LD_INT 1
6815: ST_TO_ADDR
// if p3 = 113 then
6816: LD_VAR 0 3
6820: PUSH
6821: LD_INT 113
6823: EQUAL
6824: IFFALSE 6834
// sBazooka := true ;
6826: LD_ADDR_EXP 66
6830: PUSH
6831: LD_INT 1
6833: ST_TO_ADDR
// if p3 = 114 then
6834: LD_VAR 0 3
6838: PUSH
6839: LD_INT 114
6841: EQUAL
6842: IFFALSE 6852
// sMortar := true ;
6844: LD_ADDR_EXP 67
6848: PUSH
6849: LD_INT 1
6851: ST_TO_ADDR
// if p3 = 115 then
6852: LD_VAR 0 3
6856: PUSH
6857: LD_INT 115
6859: EQUAL
6860: IFFALSE 6870
// sRanger := true ;
6862: LD_ADDR_EXP 77
6866: PUSH
6867: LD_INT 1
6869: ST_TO_ADDR
// if p3 = 116 then
6870: LD_VAR 0 3
6874: PUSH
6875: LD_INT 116
6877: EQUAL
6878: IFFALSE 6888
// sComputer := true ;
6880: LD_ADDR_EXP 78
6884: PUSH
6885: LD_INT 1
6887: ST_TO_ADDR
// if p3 = 117 then
6888: LD_VAR 0 3
6892: PUSH
6893: LD_INT 117
6895: EQUAL
6896: IFFALSE 6906
// s30 := true ;
6898: LD_ADDR_EXP 79
6902: PUSH
6903: LD_INT 1
6905: ST_TO_ADDR
// if p3 = 118 then
6906: LD_VAR 0 3
6910: PUSH
6911: LD_INT 118
6913: EQUAL
6914: IFFALSE 6924
// s60 := true ;
6916: LD_ADDR_EXP 80
6920: PUSH
6921: LD_INT 1
6923: ST_TO_ADDR
// end ; if p2 = 101 then
6924: LD_VAR 0 2
6928: PUSH
6929: LD_INT 101
6931: EQUAL
6932: IFFALSE 7060
// begin case p3 of 1 :
6934: LD_VAR 0 3
6938: PUSH
6939: LD_INT 1
6941: DOUBLE
6942: EQUAL
6943: IFTRUE 6947
6945: GO 6954
6947: POP
// hHackUnlimitedResources ; 2 :
6948: CALL 19158 0 0
6952: GO 7060
6954: LD_INT 2
6956: DOUBLE
6957: EQUAL
6958: IFTRUE 6962
6960: GO 6969
6962: POP
// hHackSetLevel10 ; 3 :
6963: CALL 19291 0 0
6967: GO 7060
6969: LD_INT 3
6971: DOUBLE
6972: EQUAL
6973: IFTRUE 6977
6975: GO 6984
6977: POP
// hHackSetLevel10YourUnits ; 4 :
6978: CALL 19376 0 0
6982: GO 7060
6984: LD_INT 4
6986: DOUBLE
6987: EQUAL
6988: IFTRUE 6992
6990: GO 6999
6992: POP
// hHackInvincible ; 5 :
6993: CALL 19824 0 0
6997: GO 7060
6999: LD_INT 5
7001: DOUBLE
7002: EQUAL
7003: IFTRUE 7007
7005: GO 7014
7007: POP
// hHackInvisible ; 6 :
7008: CALL 19935 0 0
7012: GO 7060
7014: LD_INT 6
7016: DOUBLE
7017: EQUAL
7018: IFTRUE 7022
7020: GO 7029
7022: POP
// hHackChangeYourSide ; 7 :
7023: CALL 19992 0 0
7027: GO 7060
7029: LD_INT 7
7031: DOUBLE
7032: EQUAL
7033: IFTRUE 7037
7035: GO 7044
7037: POP
// hHackChangeUnitSide ; 8 :
7038: CALL 20034 0 0
7042: GO 7060
7044: LD_INT 8
7046: DOUBLE
7047: EQUAL
7048: IFTRUE 7052
7050: GO 7059
7052: POP
// hHackFog ; end ;
7053: CALL 20135 0 0
7057: GO 7060
7059: POP
// end ; end ;
7060: LD_VAR 0 7
7064: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
7065: GO 7067
7067: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
7068: LD_STRING initStreamRollete();
7070: PPUSH
7071: CALL_OW 559
// InitStreamMode ;
7075: CALL 7087 0 0
// DefineStreamItems ( false ) ;
7079: LD_INT 0
7081: PPUSH
7082: CALL 7551 0 1
// end ;
7086: END
// function InitStreamMode ; begin
7087: LD_INT 0
7089: PPUSH
// streamModeActive := false ;
7090: LD_ADDR_EXP 24
7094: PUSH
7095: LD_INT 0
7097: ST_TO_ADDR
// normalCounter := 36 ;
7098: LD_ADDR_EXP 25
7102: PUSH
7103: LD_INT 36
7105: ST_TO_ADDR
// hardcoreCounter := 18 ;
7106: LD_ADDR_EXP 26
7110: PUSH
7111: LD_INT 18
7113: ST_TO_ADDR
// sRocket := false ;
7114: LD_ADDR_EXP 29
7118: PUSH
7119: LD_INT 0
7121: ST_TO_ADDR
// sSpeed := false ;
7122: LD_ADDR_EXP 28
7126: PUSH
7127: LD_INT 0
7129: ST_TO_ADDR
// sEngine := false ;
7130: LD_ADDR_EXP 30
7134: PUSH
7135: LD_INT 0
7137: ST_TO_ADDR
// sSpec := false ;
7138: LD_ADDR_EXP 27
7142: PUSH
7143: LD_INT 0
7145: ST_TO_ADDR
// sLevel := false ;
7146: LD_ADDR_EXP 31
7150: PUSH
7151: LD_INT 0
7153: ST_TO_ADDR
// sArmoury := false ;
7154: LD_ADDR_EXP 32
7158: PUSH
7159: LD_INT 0
7161: ST_TO_ADDR
// sRadar := false ;
7162: LD_ADDR_EXP 33
7166: PUSH
7167: LD_INT 0
7169: ST_TO_ADDR
// sBunker := false ;
7170: LD_ADDR_EXP 34
7174: PUSH
7175: LD_INT 0
7177: ST_TO_ADDR
// sHack := false ;
7178: LD_ADDR_EXP 35
7182: PUSH
7183: LD_INT 0
7185: ST_TO_ADDR
// sFire := false ;
7186: LD_ADDR_EXP 36
7190: PUSH
7191: LD_INT 0
7193: ST_TO_ADDR
// sRefresh := false ;
7194: LD_ADDR_EXP 37
7198: PUSH
7199: LD_INT 0
7201: ST_TO_ADDR
// sExp := false ;
7202: LD_ADDR_EXP 38
7206: PUSH
7207: LD_INT 0
7209: ST_TO_ADDR
// sDepot := false ;
7210: LD_ADDR_EXP 39
7214: PUSH
7215: LD_INT 0
7217: ST_TO_ADDR
// sFlag := false ;
7218: LD_ADDR_EXP 40
7222: PUSH
7223: LD_INT 0
7225: ST_TO_ADDR
// sKamikadze := false ;
7226: LD_ADDR_EXP 48
7230: PUSH
7231: LD_INT 0
7233: ST_TO_ADDR
// sTroll := false ;
7234: LD_ADDR_EXP 49
7238: PUSH
7239: LD_INT 0
7241: ST_TO_ADDR
// sSlow := false ;
7242: LD_ADDR_EXP 50
7246: PUSH
7247: LD_INT 0
7249: ST_TO_ADDR
// sLack := false ;
7250: LD_ADDR_EXP 51
7254: PUSH
7255: LD_INT 0
7257: ST_TO_ADDR
// sTank := false ;
7258: LD_ADDR_EXP 53
7262: PUSH
7263: LD_INT 0
7265: ST_TO_ADDR
// sRemote := false ;
7266: LD_ADDR_EXP 54
7270: PUSH
7271: LD_INT 0
7273: ST_TO_ADDR
// sPowell := false ;
7274: LD_ADDR_EXP 55
7278: PUSH
7279: LD_INT 0
7281: ST_TO_ADDR
// sTeleport := false ;
7282: LD_ADDR_EXP 58
7286: PUSH
7287: LD_INT 0
7289: ST_TO_ADDR
// sOilTower := false ;
7290: LD_ADDR_EXP 60
7294: PUSH
7295: LD_INT 0
7297: ST_TO_ADDR
// sShovel := false ;
7298: LD_ADDR_EXP 61
7302: PUSH
7303: LD_INT 0
7305: ST_TO_ADDR
// sSheik := false ;
7306: LD_ADDR_EXP 62
7310: PUSH
7311: LD_INT 0
7313: ST_TO_ADDR
// sEarthquake := false ;
7314: LD_ADDR_EXP 64
7318: PUSH
7319: LD_INT 0
7321: ST_TO_ADDR
// sAI := false ;
7322: LD_ADDR_EXP 65
7326: PUSH
7327: LD_INT 0
7329: ST_TO_ADDR
// sCargo := false ;
7330: LD_ADDR_EXP 68
7334: PUSH
7335: LD_INT 0
7337: ST_TO_ADDR
// sDLaser := false ;
7338: LD_ADDR_EXP 69
7342: PUSH
7343: LD_INT 0
7345: ST_TO_ADDR
// sExchange := false ;
7346: LD_ADDR_EXP 70
7350: PUSH
7351: LD_INT 0
7353: ST_TO_ADDR
// sFac := false ;
7354: LD_ADDR_EXP 71
7358: PUSH
7359: LD_INT 0
7361: ST_TO_ADDR
// sPower := false ;
7362: LD_ADDR_EXP 72
7366: PUSH
7367: LD_INT 0
7369: ST_TO_ADDR
// sRandom := false ;
7370: LD_ADDR_EXP 73
7374: PUSH
7375: LD_INT 0
7377: ST_TO_ADDR
// sShield := false ;
7378: LD_ADDR_EXP 74
7382: PUSH
7383: LD_INT 0
7385: ST_TO_ADDR
// sTime := false ;
7386: LD_ADDR_EXP 75
7390: PUSH
7391: LD_INT 0
7393: ST_TO_ADDR
// sTools := false ;
7394: LD_ADDR_EXP 76
7398: PUSH
7399: LD_INT 0
7401: ST_TO_ADDR
// sSold := false ;
7402: LD_ADDR_EXP 41
7406: PUSH
7407: LD_INT 0
7409: ST_TO_ADDR
// sDiff := false ;
7410: LD_ADDR_EXP 42
7414: PUSH
7415: LD_INT 0
7417: ST_TO_ADDR
// sFog := false ;
7418: LD_ADDR_EXP 45
7422: PUSH
7423: LD_INT 0
7425: ST_TO_ADDR
// sReset := false ;
7426: LD_ADDR_EXP 46
7430: PUSH
7431: LD_INT 0
7433: ST_TO_ADDR
// sSun := false ;
7434: LD_ADDR_EXP 47
7438: PUSH
7439: LD_INT 0
7441: ST_TO_ADDR
// sTiger := false ;
7442: LD_ADDR_EXP 43
7446: PUSH
7447: LD_INT 0
7449: ST_TO_ADDR
// sBomb := false ;
7450: LD_ADDR_EXP 44
7454: PUSH
7455: LD_INT 0
7457: ST_TO_ADDR
// sWound := false ;
7458: LD_ADDR_EXP 52
7462: PUSH
7463: LD_INT 0
7465: ST_TO_ADDR
// sBetray := false ;
7466: LD_ADDR_EXP 56
7470: PUSH
7471: LD_INT 0
7473: ST_TO_ADDR
// sContamin := false ;
7474: LD_ADDR_EXP 57
7478: PUSH
7479: LD_INT 0
7481: ST_TO_ADDR
// sOil := false ;
7482: LD_ADDR_EXP 59
7486: PUSH
7487: LD_INT 0
7489: ST_TO_ADDR
// sStu := false ;
7490: LD_ADDR_EXP 63
7494: PUSH
7495: LD_INT 0
7497: ST_TO_ADDR
// sBazooka := false ;
7498: LD_ADDR_EXP 66
7502: PUSH
7503: LD_INT 0
7505: ST_TO_ADDR
// sMortar := false ;
7506: LD_ADDR_EXP 67
7510: PUSH
7511: LD_INT 0
7513: ST_TO_ADDR
// sRanger := false ;
7514: LD_ADDR_EXP 77
7518: PUSH
7519: LD_INT 0
7521: ST_TO_ADDR
// sComputer := false ;
7522: LD_ADDR_EXP 78
7526: PUSH
7527: LD_INT 0
7529: ST_TO_ADDR
// s30 := false ;
7530: LD_ADDR_EXP 79
7534: PUSH
7535: LD_INT 0
7537: ST_TO_ADDR
// s60 := false ;
7538: LD_ADDR_EXP 80
7542: PUSH
7543: LD_INT 0
7545: ST_TO_ADDR
// end ;
7546: LD_VAR 0 1
7550: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
7551: LD_INT 0
7553: PPUSH
7554: PPUSH
7555: PPUSH
7556: PPUSH
7557: PPUSH
7558: PPUSH
7559: PPUSH
// result := [ ] ;
7560: LD_ADDR_VAR 0 2
7564: PUSH
7565: EMPTY
7566: ST_TO_ADDR
// if campaign_id = 1 then
7567: LD_OWVAR 69
7571: PUSH
7572: LD_INT 1
7574: EQUAL
7575: IFFALSE 10741
// begin case mission_number of 1 :
7577: LD_OWVAR 70
7581: PUSH
7582: LD_INT 1
7584: DOUBLE
7585: EQUAL
7586: IFTRUE 7590
7588: GO 7666
7590: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
7591: LD_ADDR_VAR 0 2
7595: PUSH
7596: LD_INT 2
7598: PUSH
7599: LD_INT 4
7601: PUSH
7602: LD_INT 11
7604: PUSH
7605: LD_INT 12
7607: PUSH
7608: LD_INT 15
7610: PUSH
7611: LD_INT 16
7613: PUSH
7614: LD_INT 22
7616: PUSH
7617: LD_INT 23
7619: PUSH
7620: LD_INT 26
7622: PUSH
7623: EMPTY
7624: LIST
7625: LIST
7626: LIST
7627: LIST
7628: LIST
7629: LIST
7630: LIST
7631: LIST
7632: LIST
7633: PUSH
7634: LD_INT 101
7636: PUSH
7637: LD_INT 102
7639: PUSH
7640: LD_INT 106
7642: PUSH
7643: LD_INT 116
7645: PUSH
7646: LD_INT 117
7648: PUSH
7649: LD_INT 118
7651: PUSH
7652: EMPTY
7653: LIST
7654: LIST
7655: LIST
7656: LIST
7657: LIST
7658: LIST
7659: PUSH
7660: EMPTY
7661: LIST
7662: LIST
7663: ST_TO_ADDR
7664: GO 10739
7666: LD_INT 2
7668: DOUBLE
7669: EQUAL
7670: IFTRUE 7674
7672: GO 7758
7674: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
7675: LD_ADDR_VAR 0 2
7679: PUSH
7680: LD_INT 2
7682: PUSH
7683: LD_INT 4
7685: PUSH
7686: LD_INT 11
7688: PUSH
7689: LD_INT 12
7691: PUSH
7692: LD_INT 15
7694: PUSH
7695: LD_INT 16
7697: PUSH
7698: LD_INT 22
7700: PUSH
7701: LD_INT 23
7703: PUSH
7704: LD_INT 26
7706: PUSH
7707: EMPTY
7708: LIST
7709: LIST
7710: LIST
7711: LIST
7712: LIST
7713: LIST
7714: LIST
7715: LIST
7716: LIST
7717: PUSH
7718: LD_INT 101
7720: PUSH
7721: LD_INT 102
7723: PUSH
7724: LD_INT 105
7726: PUSH
7727: LD_INT 106
7729: PUSH
7730: LD_INT 108
7732: PUSH
7733: LD_INT 116
7735: PUSH
7736: LD_INT 117
7738: PUSH
7739: LD_INT 118
7741: PUSH
7742: EMPTY
7743: LIST
7744: LIST
7745: LIST
7746: LIST
7747: LIST
7748: LIST
7749: LIST
7750: LIST
7751: PUSH
7752: EMPTY
7753: LIST
7754: LIST
7755: ST_TO_ADDR
7756: GO 10739
7758: LD_INT 3
7760: DOUBLE
7761: EQUAL
7762: IFTRUE 7766
7764: GO 7854
7766: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
7767: LD_ADDR_VAR 0 2
7771: PUSH
7772: LD_INT 2
7774: PUSH
7775: LD_INT 4
7777: PUSH
7778: LD_INT 5
7780: PUSH
7781: LD_INT 11
7783: PUSH
7784: LD_INT 12
7786: PUSH
7787: LD_INT 15
7789: PUSH
7790: LD_INT 16
7792: PUSH
7793: LD_INT 22
7795: PUSH
7796: LD_INT 26
7798: PUSH
7799: LD_INT 36
7801: PUSH
7802: EMPTY
7803: LIST
7804: LIST
7805: LIST
7806: LIST
7807: LIST
7808: LIST
7809: LIST
7810: LIST
7811: LIST
7812: LIST
7813: PUSH
7814: LD_INT 101
7816: PUSH
7817: LD_INT 102
7819: PUSH
7820: LD_INT 105
7822: PUSH
7823: LD_INT 106
7825: PUSH
7826: LD_INT 108
7828: PUSH
7829: LD_INT 116
7831: PUSH
7832: LD_INT 117
7834: PUSH
7835: LD_INT 118
7837: PUSH
7838: EMPTY
7839: LIST
7840: LIST
7841: LIST
7842: LIST
7843: LIST
7844: LIST
7845: LIST
7846: LIST
7847: PUSH
7848: EMPTY
7849: LIST
7850: LIST
7851: ST_TO_ADDR
7852: GO 10739
7854: LD_INT 4
7856: DOUBLE
7857: EQUAL
7858: IFTRUE 7862
7860: GO 7958
7862: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
7863: LD_ADDR_VAR 0 2
7867: PUSH
7868: LD_INT 2
7870: PUSH
7871: LD_INT 4
7873: PUSH
7874: LD_INT 5
7876: PUSH
7877: LD_INT 8
7879: PUSH
7880: LD_INT 11
7882: PUSH
7883: LD_INT 12
7885: PUSH
7886: LD_INT 15
7888: PUSH
7889: LD_INT 16
7891: PUSH
7892: LD_INT 22
7894: PUSH
7895: LD_INT 23
7897: PUSH
7898: LD_INT 26
7900: PUSH
7901: LD_INT 36
7903: PUSH
7904: EMPTY
7905: LIST
7906: LIST
7907: LIST
7908: LIST
7909: LIST
7910: LIST
7911: LIST
7912: LIST
7913: LIST
7914: LIST
7915: LIST
7916: LIST
7917: PUSH
7918: LD_INT 101
7920: PUSH
7921: LD_INT 102
7923: PUSH
7924: LD_INT 105
7926: PUSH
7927: LD_INT 106
7929: PUSH
7930: LD_INT 108
7932: PUSH
7933: LD_INT 116
7935: PUSH
7936: LD_INT 117
7938: PUSH
7939: LD_INT 118
7941: PUSH
7942: EMPTY
7943: LIST
7944: LIST
7945: LIST
7946: LIST
7947: LIST
7948: LIST
7949: LIST
7950: LIST
7951: PUSH
7952: EMPTY
7953: LIST
7954: LIST
7955: ST_TO_ADDR
7956: GO 10739
7958: LD_INT 5
7960: DOUBLE
7961: EQUAL
7962: IFTRUE 7966
7964: GO 8078
7966: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
7967: LD_ADDR_VAR 0 2
7971: PUSH
7972: LD_INT 2
7974: PUSH
7975: LD_INT 4
7977: PUSH
7978: LD_INT 5
7980: PUSH
7981: LD_INT 6
7983: PUSH
7984: LD_INT 8
7986: PUSH
7987: LD_INT 11
7989: PUSH
7990: LD_INT 12
7992: PUSH
7993: LD_INT 15
7995: PUSH
7996: LD_INT 16
7998: PUSH
7999: LD_INT 22
8001: PUSH
8002: LD_INT 23
8004: PUSH
8005: LD_INT 25
8007: PUSH
8008: LD_INT 26
8010: PUSH
8011: LD_INT 36
8013: PUSH
8014: EMPTY
8015: LIST
8016: LIST
8017: LIST
8018: LIST
8019: LIST
8020: LIST
8021: LIST
8022: LIST
8023: LIST
8024: LIST
8025: LIST
8026: LIST
8027: LIST
8028: LIST
8029: PUSH
8030: LD_INT 101
8032: PUSH
8033: LD_INT 102
8035: PUSH
8036: LD_INT 105
8038: PUSH
8039: LD_INT 106
8041: PUSH
8042: LD_INT 108
8044: PUSH
8045: LD_INT 109
8047: PUSH
8048: LD_INT 112
8050: PUSH
8051: LD_INT 116
8053: PUSH
8054: LD_INT 117
8056: PUSH
8057: LD_INT 118
8059: PUSH
8060: EMPTY
8061: LIST
8062: LIST
8063: LIST
8064: LIST
8065: LIST
8066: LIST
8067: LIST
8068: LIST
8069: LIST
8070: LIST
8071: PUSH
8072: EMPTY
8073: LIST
8074: LIST
8075: ST_TO_ADDR
8076: GO 10739
8078: LD_INT 6
8080: DOUBLE
8081: EQUAL
8082: IFTRUE 8086
8084: GO 8218
8086: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
8087: LD_ADDR_VAR 0 2
8091: PUSH
8092: LD_INT 2
8094: PUSH
8095: LD_INT 4
8097: PUSH
8098: LD_INT 5
8100: PUSH
8101: LD_INT 6
8103: PUSH
8104: LD_INT 8
8106: PUSH
8107: LD_INT 11
8109: PUSH
8110: LD_INT 12
8112: PUSH
8113: LD_INT 15
8115: PUSH
8116: LD_INT 16
8118: PUSH
8119: LD_INT 20
8121: PUSH
8122: LD_INT 21
8124: PUSH
8125: LD_INT 22
8127: PUSH
8128: LD_INT 23
8130: PUSH
8131: LD_INT 25
8133: PUSH
8134: LD_INT 26
8136: PUSH
8137: LD_INT 30
8139: PUSH
8140: LD_INT 31
8142: PUSH
8143: LD_INT 32
8145: PUSH
8146: LD_INT 36
8148: PUSH
8149: EMPTY
8150: LIST
8151: LIST
8152: LIST
8153: LIST
8154: LIST
8155: LIST
8156: LIST
8157: LIST
8158: LIST
8159: LIST
8160: LIST
8161: LIST
8162: LIST
8163: LIST
8164: LIST
8165: LIST
8166: LIST
8167: LIST
8168: LIST
8169: PUSH
8170: LD_INT 101
8172: PUSH
8173: LD_INT 102
8175: PUSH
8176: LD_INT 105
8178: PUSH
8179: LD_INT 106
8181: PUSH
8182: LD_INT 108
8184: PUSH
8185: LD_INT 109
8187: PUSH
8188: LD_INT 112
8190: PUSH
8191: LD_INT 116
8193: PUSH
8194: LD_INT 117
8196: PUSH
8197: LD_INT 118
8199: PUSH
8200: EMPTY
8201: LIST
8202: LIST
8203: LIST
8204: LIST
8205: LIST
8206: LIST
8207: LIST
8208: LIST
8209: LIST
8210: LIST
8211: PUSH
8212: EMPTY
8213: LIST
8214: LIST
8215: ST_TO_ADDR
8216: GO 10739
8218: LD_INT 7
8220: DOUBLE
8221: EQUAL
8222: IFTRUE 8226
8224: GO 8338
8226: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
8227: LD_ADDR_VAR 0 2
8231: PUSH
8232: LD_INT 2
8234: PUSH
8235: LD_INT 4
8237: PUSH
8238: LD_INT 5
8240: PUSH
8241: LD_INT 7
8243: PUSH
8244: LD_INT 11
8246: PUSH
8247: LD_INT 12
8249: PUSH
8250: LD_INT 15
8252: PUSH
8253: LD_INT 16
8255: PUSH
8256: LD_INT 20
8258: PUSH
8259: LD_INT 21
8261: PUSH
8262: LD_INT 22
8264: PUSH
8265: LD_INT 23
8267: PUSH
8268: LD_INT 25
8270: PUSH
8271: LD_INT 26
8273: PUSH
8274: EMPTY
8275: LIST
8276: LIST
8277: LIST
8278: LIST
8279: LIST
8280: LIST
8281: LIST
8282: LIST
8283: LIST
8284: LIST
8285: LIST
8286: LIST
8287: LIST
8288: LIST
8289: PUSH
8290: LD_INT 101
8292: PUSH
8293: LD_INT 102
8295: PUSH
8296: LD_INT 103
8298: PUSH
8299: LD_INT 105
8301: PUSH
8302: LD_INT 106
8304: PUSH
8305: LD_INT 108
8307: PUSH
8308: LD_INT 112
8310: PUSH
8311: LD_INT 116
8313: PUSH
8314: LD_INT 117
8316: PUSH
8317: LD_INT 118
8319: PUSH
8320: EMPTY
8321: LIST
8322: LIST
8323: LIST
8324: LIST
8325: LIST
8326: LIST
8327: LIST
8328: LIST
8329: LIST
8330: LIST
8331: PUSH
8332: EMPTY
8333: LIST
8334: LIST
8335: ST_TO_ADDR
8336: GO 10739
8338: LD_INT 8
8340: DOUBLE
8341: EQUAL
8342: IFTRUE 8346
8344: GO 8486
8346: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
8347: LD_ADDR_VAR 0 2
8351: PUSH
8352: LD_INT 2
8354: PUSH
8355: LD_INT 4
8357: PUSH
8358: LD_INT 5
8360: PUSH
8361: LD_INT 6
8363: PUSH
8364: LD_INT 7
8366: PUSH
8367: LD_INT 8
8369: PUSH
8370: LD_INT 11
8372: PUSH
8373: LD_INT 12
8375: PUSH
8376: LD_INT 15
8378: PUSH
8379: LD_INT 16
8381: PUSH
8382: LD_INT 20
8384: PUSH
8385: LD_INT 21
8387: PUSH
8388: LD_INT 22
8390: PUSH
8391: LD_INT 23
8393: PUSH
8394: LD_INT 25
8396: PUSH
8397: LD_INT 26
8399: PUSH
8400: LD_INT 30
8402: PUSH
8403: LD_INT 31
8405: PUSH
8406: LD_INT 32
8408: PUSH
8409: LD_INT 36
8411: PUSH
8412: EMPTY
8413: LIST
8414: LIST
8415: LIST
8416: LIST
8417: LIST
8418: LIST
8419: LIST
8420: LIST
8421: LIST
8422: LIST
8423: LIST
8424: LIST
8425: LIST
8426: LIST
8427: LIST
8428: LIST
8429: LIST
8430: LIST
8431: LIST
8432: LIST
8433: PUSH
8434: LD_INT 101
8436: PUSH
8437: LD_INT 102
8439: PUSH
8440: LD_INT 103
8442: PUSH
8443: LD_INT 105
8445: PUSH
8446: LD_INT 106
8448: PUSH
8449: LD_INT 108
8451: PUSH
8452: LD_INT 109
8454: PUSH
8455: LD_INT 112
8457: PUSH
8458: LD_INT 116
8460: PUSH
8461: LD_INT 117
8463: PUSH
8464: LD_INT 118
8466: PUSH
8467: EMPTY
8468: LIST
8469: LIST
8470: LIST
8471: LIST
8472: LIST
8473: LIST
8474: LIST
8475: LIST
8476: LIST
8477: LIST
8478: LIST
8479: PUSH
8480: EMPTY
8481: LIST
8482: LIST
8483: ST_TO_ADDR
8484: GO 10739
8486: LD_INT 9
8488: DOUBLE
8489: EQUAL
8490: IFTRUE 8494
8492: GO 8642
8494: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
8495: LD_ADDR_VAR 0 2
8499: PUSH
8500: LD_INT 2
8502: PUSH
8503: LD_INT 4
8505: PUSH
8506: LD_INT 5
8508: PUSH
8509: LD_INT 6
8511: PUSH
8512: LD_INT 7
8514: PUSH
8515: LD_INT 8
8517: PUSH
8518: LD_INT 11
8520: PUSH
8521: LD_INT 12
8523: PUSH
8524: LD_INT 15
8526: PUSH
8527: LD_INT 16
8529: PUSH
8530: LD_INT 20
8532: PUSH
8533: LD_INT 21
8535: PUSH
8536: LD_INT 22
8538: PUSH
8539: LD_INT 23
8541: PUSH
8542: LD_INT 25
8544: PUSH
8545: LD_INT 26
8547: PUSH
8548: LD_INT 28
8550: PUSH
8551: LD_INT 30
8553: PUSH
8554: LD_INT 31
8556: PUSH
8557: LD_INT 32
8559: PUSH
8560: LD_INT 36
8562: PUSH
8563: EMPTY
8564: LIST
8565: LIST
8566: LIST
8567: LIST
8568: LIST
8569: LIST
8570: LIST
8571: LIST
8572: LIST
8573: LIST
8574: LIST
8575: LIST
8576: LIST
8577: LIST
8578: LIST
8579: LIST
8580: LIST
8581: LIST
8582: LIST
8583: LIST
8584: LIST
8585: PUSH
8586: LD_INT 101
8588: PUSH
8589: LD_INT 102
8591: PUSH
8592: LD_INT 103
8594: PUSH
8595: LD_INT 105
8597: PUSH
8598: LD_INT 106
8600: PUSH
8601: LD_INT 108
8603: PUSH
8604: LD_INT 109
8606: PUSH
8607: LD_INT 112
8609: PUSH
8610: LD_INT 114
8612: PUSH
8613: LD_INT 116
8615: PUSH
8616: LD_INT 117
8618: PUSH
8619: LD_INT 118
8621: PUSH
8622: EMPTY
8623: LIST
8624: LIST
8625: LIST
8626: LIST
8627: LIST
8628: LIST
8629: LIST
8630: LIST
8631: LIST
8632: LIST
8633: LIST
8634: LIST
8635: PUSH
8636: EMPTY
8637: LIST
8638: LIST
8639: ST_TO_ADDR
8640: GO 10739
8642: LD_INT 10
8644: DOUBLE
8645: EQUAL
8646: IFTRUE 8650
8648: GO 8846
8650: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
8651: LD_ADDR_VAR 0 2
8655: PUSH
8656: LD_INT 2
8658: PUSH
8659: LD_INT 4
8661: PUSH
8662: LD_INT 5
8664: PUSH
8665: LD_INT 6
8667: PUSH
8668: LD_INT 7
8670: PUSH
8671: LD_INT 8
8673: PUSH
8674: LD_INT 9
8676: PUSH
8677: LD_INT 10
8679: PUSH
8680: LD_INT 11
8682: PUSH
8683: LD_INT 12
8685: PUSH
8686: LD_INT 13
8688: PUSH
8689: LD_INT 14
8691: PUSH
8692: LD_INT 15
8694: PUSH
8695: LD_INT 16
8697: PUSH
8698: LD_INT 17
8700: PUSH
8701: LD_INT 18
8703: PUSH
8704: LD_INT 19
8706: PUSH
8707: LD_INT 20
8709: PUSH
8710: LD_INT 21
8712: PUSH
8713: LD_INT 22
8715: PUSH
8716: LD_INT 23
8718: PUSH
8719: LD_INT 24
8721: PUSH
8722: LD_INT 25
8724: PUSH
8725: LD_INT 26
8727: PUSH
8728: LD_INT 28
8730: PUSH
8731: LD_INT 30
8733: PUSH
8734: LD_INT 31
8736: PUSH
8737: LD_INT 32
8739: PUSH
8740: LD_INT 36
8742: PUSH
8743: EMPTY
8744: LIST
8745: LIST
8746: LIST
8747: LIST
8748: LIST
8749: LIST
8750: LIST
8751: LIST
8752: LIST
8753: LIST
8754: LIST
8755: LIST
8756: LIST
8757: LIST
8758: LIST
8759: LIST
8760: LIST
8761: LIST
8762: LIST
8763: LIST
8764: LIST
8765: LIST
8766: LIST
8767: LIST
8768: LIST
8769: LIST
8770: LIST
8771: LIST
8772: LIST
8773: PUSH
8774: LD_INT 101
8776: PUSH
8777: LD_INT 102
8779: PUSH
8780: LD_INT 103
8782: PUSH
8783: LD_INT 104
8785: PUSH
8786: LD_INT 105
8788: PUSH
8789: LD_INT 106
8791: PUSH
8792: LD_INT 107
8794: PUSH
8795: LD_INT 108
8797: PUSH
8798: LD_INT 109
8800: PUSH
8801: LD_INT 110
8803: PUSH
8804: LD_INT 111
8806: PUSH
8807: LD_INT 112
8809: PUSH
8810: LD_INT 114
8812: PUSH
8813: LD_INT 116
8815: PUSH
8816: LD_INT 117
8818: PUSH
8819: LD_INT 118
8821: PUSH
8822: EMPTY
8823: LIST
8824: LIST
8825: LIST
8826: LIST
8827: LIST
8828: LIST
8829: LIST
8830: LIST
8831: LIST
8832: LIST
8833: LIST
8834: LIST
8835: LIST
8836: LIST
8837: LIST
8838: LIST
8839: PUSH
8840: EMPTY
8841: LIST
8842: LIST
8843: ST_TO_ADDR
8844: GO 10739
8846: LD_INT 11
8848: DOUBLE
8849: EQUAL
8850: IFTRUE 8854
8852: GO 9058
8854: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
8855: LD_ADDR_VAR 0 2
8859: PUSH
8860: LD_INT 2
8862: PUSH
8863: LD_INT 3
8865: PUSH
8866: LD_INT 4
8868: PUSH
8869: LD_INT 5
8871: PUSH
8872: LD_INT 6
8874: PUSH
8875: LD_INT 7
8877: PUSH
8878: LD_INT 8
8880: PUSH
8881: LD_INT 9
8883: PUSH
8884: LD_INT 10
8886: PUSH
8887: LD_INT 11
8889: PUSH
8890: LD_INT 12
8892: PUSH
8893: LD_INT 13
8895: PUSH
8896: LD_INT 14
8898: PUSH
8899: LD_INT 15
8901: PUSH
8902: LD_INT 16
8904: PUSH
8905: LD_INT 17
8907: PUSH
8908: LD_INT 18
8910: PUSH
8911: LD_INT 19
8913: PUSH
8914: LD_INT 20
8916: PUSH
8917: LD_INT 21
8919: PUSH
8920: LD_INT 22
8922: PUSH
8923: LD_INT 23
8925: PUSH
8926: LD_INT 24
8928: PUSH
8929: LD_INT 25
8931: PUSH
8932: LD_INT 26
8934: PUSH
8935: LD_INT 28
8937: PUSH
8938: LD_INT 30
8940: PUSH
8941: LD_INT 31
8943: PUSH
8944: LD_INT 32
8946: PUSH
8947: LD_INT 34
8949: PUSH
8950: LD_INT 36
8952: PUSH
8953: EMPTY
8954: LIST
8955: LIST
8956: LIST
8957: LIST
8958: LIST
8959: LIST
8960: LIST
8961: LIST
8962: LIST
8963: LIST
8964: LIST
8965: LIST
8966: LIST
8967: LIST
8968: LIST
8969: LIST
8970: LIST
8971: LIST
8972: LIST
8973: LIST
8974: LIST
8975: LIST
8976: LIST
8977: LIST
8978: LIST
8979: LIST
8980: LIST
8981: LIST
8982: LIST
8983: LIST
8984: LIST
8985: PUSH
8986: LD_INT 101
8988: PUSH
8989: LD_INT 102
8991: PUSH
8992: LD_INT 103
8994: PUSH
8995: LD_INT 104
8997: PUSH
8998: LD_INT 105
9000: PUSH
9001: LD_INT 106
9003: PUSH
9004: LD_INT 107
9006: PUSH
9007: LD_INT 108
9009: PUSH
9010: LD_INT 109
9012: PUSH
9013: LD_INT 110
9015: PUSH
9016: LD_INT 111
9018: PUSH
9019: LD_INT 112
9021: PUSH
9022: LD_INT 114
9024: PUSH
9025: LD_INT 116
9027: PUSH
9028: LD_INT 117
9030: PUSH
9031: LD_INT 118
9033: PUSH
9034: EMPTY
9035: LIST
9036: LIST
9037: LIST
9038: LIST
9039: LIST
9040: LIST
9041: LIST
9042: LIST
9043: LIST
9044: LIST
9045: LIST
9046: LIST
9047: LIST
9048: LIST
9049: LIST
9050: LIST
9051: PUSH
9052: EMPTY
9053: LIST
9054: LIST
9055: ST_TO_ADDR
9056: GO 10739
9058: LD_INT 12
9060: DOUBLE
9061: EQUAL
9062: IFTRUE 9066
9064: GO 9286
9066: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
9067: LD_ADDR_VAR 0 2
9071: PUSH
9072: LD_INT 1
9074: PUSH
9075: LD_INT 2
9077: PUSH
9078: LD_INT 3
9080: PUSH
9081: LD_INT 4
9083: PUSH
9084: LD_INT 5
9086: PUSH
9087: LD_INT 6
9089: PUSH
9090: LD_INT 7
9092: PUSH
9093: LD_INT 8
9095: PUSH
9096: LD_INT 9
9098: PUSH
9099: LD_INT 10
9101: PUSH
9102: LD_INT 11
9104: PUSH
9105: LD_INT 12
9107: PUSH
9108: LD_INT 13
9110: PUSH
9111: LD_INT 14
9113: PUSH
9114: LD_INT 15
9116: PUSH
9117: LD_INT 16
9119: PUSH
9120: LD_INT 17
9122: PUSH
9123: LD_INT 18
9125: PUSH
9126: LD_INT 19
9128: PUSH
9129: LD_INT 20
9131: PUSH
9132: LD_INT 21
9134: PUSH
9135: LD_INT 22
9137: PUSH
9138: LD_INT 23
9140: PUSH
9141: LD_INT 24
9143: PUSH
9144: LD_INT 25
9146: PUSH
9147: LD_INT 26
9149: PUSH
9150: LD_INT 27
9152: PUSH
9153: LD_INT 28
9155: PUSH
9156: LD_INT 30
9158: PUSH
9159: LD_INT 31
9161: PUSH
9162: LD_INT 32
9164: PUSH
9165: LD_INT 33
9167: PUSH
9168: LD_INT 34
9170: PUSH
9171: LD_INT 36
9173: PUSH
9174: EMPTY
9175: LIST
9176: LIST
9177: LIST
9178: LIST
9179: LIST
9180: LIST
9181: LIST
9182: LIST
9183: LIST
9184: LIST
9185: LIST
9186: LIST
9187: LIST
9188: LIST
9189: LIST
9190: LIST
9191: LIST
9192: LIST
9193: LIST
9194: LIST
9195: LIST
9196: LIST
9197: LIST
9198: LIST
9199: LIST
9200: LIST
9201: LIST
9202: LIST
9203: LIST
9204: LIST
9205: LIST
9206: LIST
9207: LIST
9208: LIST
9209: PUSH
9210: LD_INT 101
9212: PUSH
9213: LD_INT 102
9215: PUSH
9216: LD_INT 103
9218: PUSH
9219: LD_INT 104
9221: PUSH
9222: LD_INT 105
9224: PUSH
9225: LD_INT 106
9227: PUSH
9228: LD_INT 107
9230: PUSH
9231: LD_INT 108
9233: PUSH
9234: LD_INT 109
9236: PUSH
9237: LD_INT 110
9239: PUSH
9240: LD_INT 111
9242: PUSH
9243: LD_INT 112
9245: PUSH
9246: LD_INT 113
9248: PUSH
9249: LD_INT 114
9251: PUSH
9252: LD_INT 116
9254: PUSH
9255: LD_INT 117
9257: PUSH
9258: LD_INT 118
9260: PUSH
9261: EMPTY
9262: LIST
9263: LIST
9264: LIST
9265: LIST
9266: LIST
9267: LIST
9268: LIST
9269: LIST
9270: LIST
9271: LIST
9272: LIST
9273: LIST
9274: LIST
9275: LIST
9276: LIST
9277: LIST
9278: LIST
9279: PUSH
9280: EMPTY
9281: LIST
9282: LIST
9283: ST_TO_ADDR
9284: GO 10739
9286: LD_INT 13
9288: DOUBLE
9289: EQUAL
9290: IFTRUE 9294
9292: GO 9502
9294: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
9295: LD_ADDR_VAR 0 2
9299: PUSH
9300: LD_INT 1
9302: PUSH
9303: LD_INT 2
9305: PUSH
9306: LD_INT 3
9308: PUSH
9309: LD_INT 4
9311: PUSH
9312: LD_INT 5
9314: PUSH
9315: LD_INT 8
9317: PUSH
9318: LD_INT 9
9320: PUSH
9321: LD_INT 10
9323: PUSH
9324: LD_INT 11
9326: PUSH
9327: LD_INT 12
9329: PUSH
9330: LD_INT 14
9332: PUSH
9333: LD_INT 15
9335: PUSH
9336: LD_INT 16
9338: PUSH
9339: LD_INT 17
9341: PUSH
9342: LD_INT 18
9344: PUSH
9345: LD_INT 19
9347: PUSH
9348: LD_INT 20
9350: PUSH
9351: LD_INT 21
9353: PUSH
9354: LD_INT 22
9356: PUSH
9357: LD_INT 23
9359: PUSH
9360: LD_INT 24
9362: PUSH
9363: LD_INT 25
9365: PUSH
9366: LD_INT 26
9368: PUSH
9369: LD_INT 27
9371: PUSH
9372: LD_INT 28
9374: PUSH
9375: LD_INT 30
9377: PUSH
9378: LD_INT 31
9380: PUSH
9381: LD_INT 32
9383: PUSH
9384: LD_INT 33
9386: PUSH
9387: LD_INT 34
9389: PUSH
9390: LD_INT 36
9392: PUSH
9393: EMPTY
9394: LIST
9395: LIST
9396: LIST
9397: LIST
9398: LIST
9399: LIST
9400: LIST
9401: LIST
9402: LIST
9403: LIST
9404: LIST
9405: LIST
9406: LIST
9407: LIST
9408: LIST
9409: LIST
9410: LIST
9411: LIST
9412: LIST
9413: LIST
9414: LIST
9415: LIST
9416: LIST
9417: LIST
9418: LIST
9419: LIST
9420: LIST
9421: LIST
9422: LIST
9423: LIST
9424: LIST
9425: PUSH
9426: LD_INT 101
9428: PUSH
9429: LD_INT 102
9431: PUSH
9432: LD_INT 103
9434: PUSH
9435: LD_INT 104
9437: PUSH
9438: LD_INT 105
9440: PUSH
9441: LD_INT 106
9443: PUSH
9444: LD_INT 107
9446: PUSH
9447: LD_INT 108
9449: PUSH
9450: LD_INT 109
9452: PUSH
9453: LD_INT 110
9455: PUSH
9456: LD_INT 111
9458: PUSH
9459: LD_INT 112
9461: PUSH
9462: LD_INT 113
9464: PUSH
9465: LD_INT 114
9467: PUSH
9468: LD_INT 116
9470: PUSH
9471: LD_INT 117
9473: PUSH
9474: LD_INT 118
9476: PUSH
9477: EMPTY
9478: LIST
9479: LIST
9480: LIST
9481: LIST
9482: LIST
9483: LIST
9484: LIST
9485: LIST
9486: LIST
9487: LIST
9488: LIST
9489: LIST
9490: LIST
9491: LIST
9492: LIST
9493: LIST
9494: LIST
9495: PUSH
9496: EMPTY
9497: LIST
9498: LIST
9499: ST_TO_ADDR
9500: GO 10739
9502: LD_INT 14
9504: DOUBLE
9505: EQUAL
9506: IFTRUE 9510
9508: GO 9734
9510: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
9511: LD_ADDR_VAR 0 2
9515: PUSH
9516: LD_INT 1
9518: PUSH
9519: LD_INT 2
9521: PUSH
9522: LD_INT 3
9524: PUSH
9525: LD_INT 4
9527: PUSH
9528: LD_INT 5
9530: PUSH
9531: LD_INT 6
9533: PUSH
9534: LD_INT 7
9536: PUSH
9537: LD_INT 8
9539: PUSH
9540: LD_INT 9
9542: PUSH
9543: LD_INT 10
9545: PUSH
9546: LD_INT 11
9548: PUSH
9549: LD_INT 12
9551: PUSH
9552: LD_INT 13
9554: PUSH
9555: LD_INT 14
9557: PUSH
9558: LD_INT 15
9560: PUSH
9561: LD_INT 16
9563: PUSH
9564: LD_INT 17
9566: PUSH
9567: LD_INT 18
9569: PUSH
9570: LD_INT 19
9572: PUSH
9573: LD_INT 20
9575: PUSH
9576: LD_INT 21
9578: PUSH
9579: LD_INT 22
9581: PUSH
9582: LD_INT 23
9584: PUSH
9585: LD_INT 24
9587: PUSH
9588: LD_INT 25
9590: PUSH
9591: LD_INT 26
9593: PUSH
9594: LD_INT 27
9596: PUSH
9597: LD_INT 28
9599: PUSH
9600: LD_INT 29
9602: PUSH
9603: LD_INT 30
9605: PUSH
9606: LD_INT 31
9608: PUSH
9609: LD_INT 32
9611: PUSH
9612: LD_INT 33
9614: PUSH
9615: LD_INT 34
9617: PUSH
9618: LD_INT 36
9620: PUSH
9621: EMPTY
9622: LIST
9623: LIST
9624: LIST
9625: LIST
9626: LIST
9627: LIST
9628: LIST
9629: LIST
9630: LIST
9631: LIST
9632: LIST
9633: LIST
9634: LIST
9635: LIST
9636: LIST
9637: LIST
9638: LIST
9639: LIST
9640: LIST
9641: LIST
9642: LIST
9643: LIST
9644: LIST
9645: LIST
9646: LIST
9647: LIST
9648: LIST
9649: LIST
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: LIST
9655: LIST
9656: LIST
9657: PUSH
9658: LD_INT 101
9660: PUSH
9661: LD_INT 102
9663: PUSH
9664: LD_INT 103
9666: PUSH
9667: LD_INT 104
9669: PUSH
9670: LD_INT 105
9672: PUSH
9673: LD_INT 106
9675: PUSH
9676: LD_INT 107
9678: PUSH
9679: LD_INT 108
9681: PUSH
9682: LD_INT 109
9684: PUSH
9685: LD_INT 110
9687: PUSH
9688: LD_INT 111
9690: PUSH
9691: LD_INT 112
9693: PUSH
9694: LD_INT 113
9696: PUSH
9697: LD_INT 114
9699: PUSH
9700: LD_INT 116
9702: PUSH
9703: LD_INT 117
9705: PUSH
9706: LD_INT 118
9708: PUSH
9709: EMPTY
9710: LIST
9711: LIST
9712: LIST
9713: LIST
9714: LIST
9715: LIST
9716: LIST
9717: LIST
9718: LIST
9719: LIST
9720: LIST
9721: LIST
9722: LIST
9723: LIST
9724: LIST
9725: LIST
9726: LIST
9727: PUSH
9728: EMPTY
9729: LIST
9730: LIST
9731: ST_TO_ADDR
9732: GO 10739
9734: LD_INT 15
9736: DOUBLE
9737: EQUAL
9738: IFTRUE 9742
9740: GO 9966
9742: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
9743: LD_ADDR_VAR 0 2
9747: PUSH
9748: LD_INT 1
9750: PUSH
9751: LD_INT 2
9753: PUSH
9754: LD_INT 3
9756: PUSH
9757: LD_INT 4
9759: PUSH
9760: LD_INT 5
9762: PUSH
9763: LD_INT 6
9765: PUSH
9766: LD_INT 7
9768: PUSH
9769: LD_INT 8
9771: PUSH
9772: LD_INT 9
9774: PUSH
9775: LD_INT 10
9777: PUSH
9778: LD_INT 11
9780: PUSH
9781: LD_INT 12
9783: PUSH
9784: LD_INT 13
9786: PUSH
9787: LD_INT 14
9789: PUSH
9790: LD_INT 15
9792: PUSH
9793: LD_INT 16
9795: PUSH
9796: LD_INT 17
9798: PUSH
9799: LD_INT 18
9801: PUSH
9802: LD_INT 19
9804: PUSH
9805: LD_INT 20
9807: PUSH
9808: LD_INT 21
9810: PUSH
9811: LD_INT 22
9813: PUSH
9814: LD_INT 23
9816: PUSH
9817: LD_INT 24
9819: PUSH
9820: LD_INT 25
9822: PUSH
9823: LD_INT 26
9825: PUSH
9826: LD_INT 27
9828: PUSH
9829: LD_INT 28
9831: PUSH
9832: LD_INT 29
9834: PUSH
9835: LD_INT 30
9837: PUSH
9838: LD_INT 31
9840: PUSH
9841: LD_INT 32
9843: PUSH
9844: LD_INT 33
9846: PUSH
9847: LD_INT 34
9849: PUSH
9850: LD_INT 36
9852: PUSH
9853: EMPTY
9854: LIST
9855: LIST
9856: LIST
9857: LIST
9858: LIST
9859: LIST
9860: LIST
9861: LIST
9862: LIST
9863: LIST
9864: LIST
9865: LIST
9866: LIST
9867: LIST
9868: LIST
9869: LIST
9870: LIST
9871: LIST
9872: LIST
9873: LIST
9874: LIST
9875: LIST
9876: LIST
9877: LIST
9878: LIST
9879: LIST
9880: LIST
9881: LIST
9882: LIST
9883: LIST
9884: LIST
9885: LIST
9886: LIST
9887: LIST
9888: LIST
9889: PUSH
9890: LD_INT 101
9892: PUSH
9893: LD_INT 102
9895: PUSH
9896: LD_INT 103
9898: PUSH
9899: LD_INT 104
9901: PUSH
9902: LD_INT 105
9904: PUSH
9905: LD_INT 106
9907: PUSH
9908: LD_INT 107
9910: PUSH
9911: LD_INT 108
9913: PUSH
9914: LD_INT 109
9916: PUSH
9917: LD_INT 110
9919: PUSH
9920: LD_INT 111
9922: PUSH
9923: LD_INT 112
9925: PUSH
9926: LD_INT 113
9928: PUSH
9929: LD_INT 114
9931: PUSH
9932: LD_INT 116
9934: PUSH
9935: LD_INT 117
9937: PUSH
9938: LD_INT 118
9940: PUSH
9941: EMPTY
9942: LIST
9943: LIST
9944: LIST
9945: LIST
9946: LIST
9947: LIST
9948: LIST
9949: LIST
9950: LIST
9951: LIST
9952: LIST
9953: LIST
9954: LIST
9955: LIST
9956: LIST
9957: LIST
9958: LIST
9959: PUSH
9960: EMPTY
9961: LIST
9962: LIST
9963: ST_TO_ADDR
9964: GO 10739
9966: LD_INT 16
9968: DOUBLE
9969: EQUAL
9970: IFTRUE 9974
9972: GO 10110
9974: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
9975: LD_ADDR_VAR 0 2
9979: PUSH
9980: LD_INT 2
9982: PUSH
9983: LD_INT 4
9985: PUSH
9986: LD_INT 5
9988: PUSH
9989: LD_INT 7
9991: PUSH
9992: LD_INT 11
9994: PUSH
9995: LD_INT 12
9997: PUSH
9998: LD_INT 15
10000: PUSH
10001: LD_INT 16
10003: PUSH
10004: LD_INT 20
10006: PUSH
10007: LD_INT 21
10009: PUSH
10010: LD_INT 22
10012: PUSH
10013: LD_INT 23
10015: PUSH
10016: LD_INT 25
10018: PUSH
10019: LD_INT 26
10021: PUSH
10022: LD_INT 30
10024: PUSH
10025: LD_INT 31
10027: PUSH
10028: LD_INT 32
10030: PUSH
10031: LD_INT 33
10033: PUSH
10034: LD_INT 34
10036: PUSH
10037: EMPTY
10038: LIST
10039: LIST
10040: LIST
10041: LIST
10042: LIST
10043: LIST
10044: LIST
10045: LIST
10046: LIST
10047: LIST
10048: LIST
10049: LIST
10050: LIST
10051: LIST
10052: LIST
10053: LIST
10054: LIST
10055: LIST
10056: LIST
10057: PUSH
10058: LD_INT 101
10060: PUSH
10061: LD_INT 102
10063: PUSH
10064: LD_INT 103
10066: PUSH
10067: LD_INT 106
10069: PUSH
10070: LD_INT 108
10072: PUSH
10073: LD_INT 112
10075: PUSH
10076: LD_INT 113
10078: PUSH
10079: LD_INT 114
10081: PUSH
10082: LD_INT 116
10084: PUSH
10085: LD_INT 117
10087: PUSH
10088: LD_INT 118
10090: PUSH
10091: EMPTY
10092: LIST
10093: LIST
10094: LIST
10095: LIST
10096: LIST
10097: LIST
10098: LIST
10099: LIST
10100: LIST
10101: LIST
10102: LIST
10103: PUSH
10104: EMPTY
10105: LIST
10106: LIST
10107: ST_TO_ADDR
10108: GO 10739
10110: LD_INT 17
10112: DOUBLE
10113: EQUAL
10114: IFTRUE 10118
10116: GO 10342
10118: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
10119: LD_ADDR_VAR 0 2
10123: PUSH
10124: LD_INT 1
10126: PUSH
10127: LD_INT 2
10129: PUSH
10130: LD_INT 3
10132: PUSH
10133: LD_INT 4
10135: PUSH
10136: LD_INT 5
10138: PUSH
10139: LD_INT 6
10141: PUSH
10142: LD_INT 7
10144: PUSH
10145: LD_INT 8
10147: PUSH
10148: LD_INT 9
10150: PUSH
10151: LD_INT 10
10153: PUSH
10154: LD_INT 11
10156: PUSH
10157: LD_INT 12
10159: PUSH
10160: LD_INT 13
10162: PUSH
10163: LD_INT 14
10165: PUSH
10166: LD_INT 15
10168: PUSH
10169: LD_INT 16
10171: PUSH
10172: LD_INT 17
10174: PUSH
10175: LD_INT 18
10177: PUSH
10178: LD_INT 19
10180: PUSH
10181: LD_INT 20
10183: PUSH
10184: LD_INT 21
10186: PUSH
10187: LD_INT 22
10189: PUSH
10190: LD_INT 23
10192: PUSH
10193: LD_INT 24
10195: PUSH
10196: LD_INT 25
10198: PUSH
10199: LD_INT 26
10201: PUSH
10202: LD_INT 27
10204: PUSH
10205: LD_INT 28
10207: PUSH
10208: LD_INT 29
10210: PUSH
10211: LD_INT 30
10213: PUSH
10214: LD_INT 31
10216: PUSH
10217: LD_INT 32
10219: PUSH
10220: LD_INT 33
10222: PUSH
10223: LD_INT 34
10225: PUSH
10226: LD_INT 36
10228: PUSH
10229: EMPTY
10230: LIST
10231: LIST
10232: LIST
10233: LIST
10234: LIST
10235: LIST
10236: LIST
10237: LIST
10238: LIST
10239: LIST
10240: LIST
10241: LIST
10242: LIST
10243: LIST
10244: LIST
10245: LIST
10246: LIST
10247: LIST
10248: LIST
10249: LIST
10250: LIST
10251: LIST
10252: LIST
10253: LIST
10254: LIST
10255: LIST
10256: LIST
10257: LIST
10258: LIST
10259: LIST
10260: LIST
10261: LIST
10262: LIST
10263: LIST
10264: LIST
10265: PUSH
10266: LD_INT 101
10268: PUSH
10269: LD_INT 102
10271: PUSH
10272: LD_INT 103
10274: PUSH
10275: LD_INT 104
10277: PUSH
10278: LD_INT 105
10280: PUSH
10281: LD_INT 106
10283: PUSH
10284: LD_INT 107
10286: PUSH
10287: LD_INT 108
10289: PUSH
10290: LD_INT 109
10292: PUSH
10293: LD_INT 110
10295: PUSH
10296: LD_INT 111
10298: PUSH
10299: LD_INT 112
10301: PUSH
10302: LD_INT 113
10304: PUSH
10305: LD_INT 114
10307: PUSH
10308: LD_INT 116
10310: PUSH
10311: LD_INT 117
10313: PUSH
10314: LD_INT 118
10316: PUSH
10317: EMPTY
10318: LIST
10319: LIST
10320: LIST
10321: LIST
10322: LIST
10323: LIST
10324: LIST
10325: LIST
10326: LIST
10327: LIST
10328: LIST
10329: LIST
10330: LIST
10331: LIST
10332: LIST
10333: LIST
10334: LIST
10335: PUSH
10336: EMPTY
10337: LIST
10338: LIST
10339: ST_TO_ADDR
10340: GO 10739
10342: LD_INT 18
10344: DOUBLE
10345: EQUAL
10346: IFTRUE 10350
10348: GO 10498
10350: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
10351: LD_ADDR_VAR 0 2
10355: PUSH
10356: LD_INT 2
10358: PUSH
10359: LD_INT 4
10361: PUSH
10362: LD_INT 5
10364: PUSH
10365: LD_INT 7
10367: PUSH
10368: LD_INT 11
10370: PUSH
10371: LD_INT 12
10373: PUSH
10374: LD_INT 15
10376: PUSH
10377: LD_INT 16
10379: PUSH
10380: LD_INT 20
10382: PUSH
10383: LD_INT 21
10385: PUSH
10386: LD_INT 22
10388: PUSH
10389: LD_INT 23
10391: PUSH
10392: LD_INT 25
10394: PUSH
10395: LD_INT 26
10397: PUSH
10398: LD_INT 30
10400: PUSH
10401: LD_INT 31
10403: PUSH
10404: LD_INT 32
10406: PUSH
10407: LD_INT 33
10409: PUSH
10410: LD_INT 34
10412: PUSH
10413: LD_INT 35
10415: PUSH
10416: LD_INT 36
10418: PUSH
10419: EMPTY
10420: LIST
10421: LIST
10422: LIST
10423: LIST
10424: LIST
10425: LIST
10426: LIST
10427: LIST
10428: LIST
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: LIST
10434: LIST
10435: LIST
10436: LIST
10437: LIST
10438: LIST
10439: LIST
10440: LIST
10441: PUSH
10442: LD_INT 101
10444: PUSH
10445: LD_INT 102
10447: PUSH
10448: LD_INT 103
10450: PUSH
10451: LD_INT 106
10453: PUSH
10454: LD_INT 108
10456: PUSH
10457: LD_INT 112
10459: PUSH
10460: LD_INT 113
10462: PUSH
10463: LD_INT 114
10465: PUSH
10466: LD_INT 115
10468: PUSH
10469: LD_INT 116
10471: PUSH
10472: LD_INT 117
10474: PUSH
10475: LD_INT 118
10477: PUSH
10478: EMPTY
10479: LIST
10480: LIST
10481: LIST
10482: LIST
10483: LIST
10484: LIST
10485: LIST
10486: LIST
10487: LIST
10488: LIST
10489: LIST
10490: LIST
10491: PUSH
10492: EMPTY
10493: LIST
10494: LIST
10495: ST_TO_ADDR
10496: GO 10739
10498: LD_INT 19
10500: DOUBLE
10501: EQUAL
10502: IFTRUE 10506
10504: GO 10738
10506: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
10507: LD_ADDR_VAR 0 2
10511: PUSH
10512: LD_INT 1
10514: PUSH
10515: LD_INT 2
10517: PUSH
10518: LD_INT 3
10520: PUSH
10521: LD_INT 4
10523: PUSH
10524: LD_INT 5
10526: PUSH
10527: LD_INT 6
10529: PUSH
10530: LD_INT 7
10532: PUSH
10533: LD_INT 8
10535: PUSH
10536: LD_INT 9
10538: PUSH
10539: LD_INT 10
10541: PUSH
10542: LD_INT 11
10544: PUSH
10545: LD_INT 12
10547: PUSH
10548: LD_INT 13
10550: PUSH
10551: LD_INT 14
10553: PUSH
10554: LD_INT 15
10556: PUSH
10557: LD_INT 16
10559: PUSH
10560: LD_INT 17
10562: PUSH
10563: LD_INT 18
10565: PUSH
10566: LD_INT 19
10568: PUSH
10569: LD_INT 20
10571: PUSH
10572: LD_INT 21
10574: PUSH
10575: LD_INT 22
10577: PUSH
10578: LD_INT 23
10580: PUSH
10581: LD_INT 24
10583: PUSH
10584: LD_INT 25
10586: PUSH
10587: LD_INT 26
10589: PUSH
10590: LD_INT 27
10592: PUSH
10593: LD_INT 28
10595: PUSH
10596: LD_INT 29
10598: PUSH
10599: LD_INT 30
10601: PUSH
10602: LD_INT 31
10604: PUSH
10605: LD_INT 32
10607: PUSH
10608: LD_INT 33
10610: PUSH
10611: LD_INT 34
10613: PUSH
10614: LD_INT 35
10616: PUSH
10617: LD_INT 36
10619: PUSH
10620: EMPTY
10621: LIST
10622: LIST
10623: LIST
10624: LIST
10625: LIST
10626: LIST
10627: LIST
10628: LIST
10629: LIST
10630: LIST
10631: LIST
10632: LIST
10633: LIST
10634: LIST
10635: LIST
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: LIST
10641: LIST
10642: LIST
10643: LIST
10644: LIST
10645: LIST
10646: LIST
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: LIST
10652: LIST
10653: LIST
10654: LIST
10655: LIST
10656: LIST
10657: PUSH
10658: LD_INT 101
10660: PUSH
10661: LD_INT 102
10663: PUSH
10664: LD_INT 103
10666: PUSH
10667: LD_INT 104
10669: PUSH
10670: LD_INT 105
10672: PUSH
10673: LD_INT 106
10675: PUSH
10676: LD_INT 107
10678: PUSH
10679: LD_INT 108
10681: PUSH
10682: LD_INT 109
10684: PUSH
10685: LD_INT 110
10687: PUSH
10688: LD_INT 111
10690: PUSH
10691: LD_INT 112
10693: PUSH
10694: LD_INT 113
10696: PUSH
10697: LD_INT 114
10699: PUSH
10700: LD_INT 115
10702: PUSH
10703: LD_INT 116
10705: PUSH
10706: LD_INT 117
10708: PUSH
10709: LD_INT 118
10711: PUSH
10712: EMPTY
10713: LIST
10714: LIST
10715: LIST
10716: LIST
10717: LIST
10718: LIST
10719: LIST
10720: LIST
10721: LIST
10722: LIST
10723: LIST
10724: LIST
10725: LIST
10726: LIST
10727: LIST
10728: LIST
10729: LIST
10730: LIST
10731: PUSH
10732: EMPTY
10733: LIST
10734: LIST
10735: ST_TO_ADDR
10736: GO 10739
10738: POP
// end else
10739: GO 10970
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
10741: LD_ADDR_VAR 0 2
10745: PUSH
10746: LD_INT 1
10748: PUSH
10749: LD_INT 2
10751: PUSH
10752: LD_INT 3
10754: PUSH
10755: LD_INT 4
10757: PUSH
10758: LD_INT 5
10760: PUSH
10761: LD_INT 6
10763: PUSH
10764: LD_INT 7
10766: PUSH
10767: LD_INT 8
10769: PUSH
10770: LD_INT 9
10772: PUSH
10773: LD_INT 10
10775: PUSH
10776: LD_INT 11
10778: PUSH
10779: LD_INT 12
10781: PUSH
10782: LD_INT 13
10784: PUSH
10785: LD_INT 14
10787: PUSH
10788: LD_INT 15
10790: PUSH
10791: LD_INT 16
10793: PUSH
10794: LD_INT 17
10796: PUSH
10797: LD_INT 18
10799: PUSH
10800: LD_INT 19
10802: PUSH
10803: LD_INT 20
10805: PUSH
10806: LD_INT 21
10808: PUSH
10809: LD_INT 22
10811: PUSH
10812: LD_INT 23
10814: PUSH
10815: LD_INT 24
10817: PUSH
10818: LD_INT 25
10820: PUSH
10821: LD_INT 26
10823: PUSH
10824: LD_INT 27
10826: PUSH
10827: LD_INT 28
10829: PUSH
10830: LD_INT 29
10832: PUSH
10833: LD_INT 30
10835: PUSH
10836: LD_INT 31
10838: PUSH
10839: LD_INT 32
10841: PUSH
10842: LD_INT 33
10844: PUSH
10845: LD_INT 34
10847: PUSH
10848: LD_INT 35
10850: PUSH
10851: LD_INT 36
10853: PUSH
10854: EMPTY
10855: LIST
10856: LIST
10857: LIST
10858: LIST
10859: LIST
10860: LIST
10861: LIST
10862: LIST
10863: LIST
10864: LIST
10865: LIST
10866: LIST
10867: LIST
10868: LIST
10869: LIST
10870: LIST
10871: LIST
10872: LIST
10873: LIST
10874: LIST
10875: LIST
10876: LIST
10877: LIST
10878: LIST
10879: LIST
10880: LIST
10881: LIST
10882: LIST
10883: LIST
10884: LIST
10885: LIST
10886: LIST
10887: LIST
10888: LIST
10889: LIST
10890: LIST
10891: PUSH
10892: LD_INT 101
10894: PUSH
10895: LD_INT 102
10897: PUSH
10898: LD_INT 103
10900: PUSH
10901: LD_INT 104
10903: PUSH
10904: LD_INT 105
10906: PUSH
10907: LD_INT 106
10909: PUSH
10910: LD_INT 107
10912: PUSH
10913: LD_INT 108
10915: PUSH
10916: LD_INT 109
10918: PUSH
10919: LD_INT 110
10921: PUSH
10922: LD_INT 111
10924: PUSH
10925: LD_INT 112
10927: PUSH
10928: LD_INT 113
10930: PUSH
10931: LD_INT 114
10933: PUSH
10934: LD_INT 115
10936: PUSH
10937: LD_INT 116
10939: PUSH
10940: LD_INT 117
10942: PUSH
10943: LD_INT 118
10945: PUSH
10946: EMPTY
10947: LIST
10948: LIST
10949: LIST
10950: LIST
10951: LIST
10952: LIST
10953: LIST
10954: LIST
10955: LIST
10956: LIST
10957: LIST
10958: LIST
10959: LIST
10960: LIST
10961: LIST
10962: LIST
10963: LIST
10964: LIST
10965: PUSH
10966: EMPTY
10967: LIST
10968: LIST
10969: ST_TO_ADDR
// if result then
10970: LD_VAR 0 2
10974: IFFALSE 11760
// begin normal :=  ;
10976: LD_ADDR_VAR 0 5
10980: PUSH
10981: LD_STRING 
10983: ST_TO_ADDR
// hardcore :=  ;
10984: LD_ADDR_VAR 0 6
10988: PUSH
10989: LD_STRING 
10991: ST_TO_ADDR
// active :=  ;
10992: LD_ADDR_VAR 0 7
10996: PUSH
10997: LD_STRING 
10999: ST_TO_ADDR
// for i = 1 to normalCounter do
11000: LD_ADDR_VAR 0 8
11004: PUSH
11005: DOUBLE
11006: LD_INT 1
11008: DEC
11009: ST_TO_ADDR
11010: LD_EXP 25
11014: PUSH
11015: FOR_TO
11016: IFFALSE 11117
// begin tmp := 0 ;
11018: LD_ADDR_VAR 0 3
11022: PUSH
11023: LD_STRING 0
11025: ST_TO_ADDR
// if result [ 1 ] then
11026: LD_VAR 0 2
11030: PUSH
11031: LD_INT 1
11033: ARRAY
11034: IFFALSE 11099
// if result [ 1 ] [ 1 ] = i then
11036: LD_VAR 0 2
11040: PUSH
11041: LD_INT 1
11043: ARRAY
11044: PUSH
11045: LD_INT 1
11047: ARRAY
11048: PUSH
11049: LD_VAR 0 8
11053: EQUAL
11054: IFFALSE 11099
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
11056: LD_ADDR_VAR 0 2
11060: PUSH
11061: LD_VAR 0 2
11065: PPUSH
11066: LD_INT 1
11068: PPUSH
11069: LD_VAR 0 2
11073: PUSH
11074: LD_INT 1
11076: ARRAY
11077: PPUSH
11078: LD_INT 1
11080: PPUSH
11081: CALL_OW 3
11085: PPUSH
11086: CALL_OW 1
11090: ST_TO_ADDR
// tmp := 1 ;
11091: LD_ADDR_VAR 0 3
11095: PUSH
11096: LD_STRING 1
11098: ST_TO_ADDR
// end ; normal := normal & tmp ;
11099: LD_ADDR_VAR 0 5
11103: PUSH
11104: LD_VAR 0 5
11108: PUSH
11109: LD_VAR 0 3
11113: STR
11114: ST_TO_ADDR
// end ;
11115: GO 11015
11117: POP
11118: POP
// for i = 1 to hardcoreCounter do
11119: LD_ADDR_VAR 0 8
11123: PUSH
11124: DOUBLE
11125: LD_INT 1
11127: DEC
11128: ST_TO_ADDR
11129: LD_EXP 26
11133: PUSH
11134: FOR_TO
11135: IFFALSE 11240
// begin tmp := 0 ;
11137: LD_ADDR_VAR 0 3
11141: PUSH
11142: LD_STRING 0
11144: ST_TO_ADDR
// if result [ 2 ] then
11145: LD_VAR 0 2
11149: PUSH
11150: LD_INT 2
11152: ARRAY
11153: IFFALSE 11222
// if result [ 2 ] [ 1 ] = 100 + i then
11155: LD_VAR 0 2
11159: PUSH
11160: LD_INT 2
11162: ARRAY
11163: PUSH
11164: LD_INT 1
11166: ARRAY
11167: PUSH
11168: LD_INT 100
11170: PUSH
11171: LD_VAR 0 8
11175: PLUS
11176: EQUAL
11177: IFFALSE 11222
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
11179: LD_ADDR_VAR 0 2
11183: PUSH
11184: LD_VAR 0 2
11188: PPUSH
11189: LD_INT 2
11191: PPUSH
11192: LD_VAR 0 2
11196: PUSH
11197: LD_INT 2
11199: ARRAY
11200: PPUSH
11201: LD_INT 1
11203: PPUSH
11204: CALL_OW 3
11208: PPUSH
11209: CALL_OW 1
11213: ST_TO_ADDR
// tmp := 1 ;
11214: LD_ADDR_VAR 0 3
11218: PUSH
11219: LD_STRING 1
11221: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
11222: LD_ADDR_VAR 0 6
11226: PUSH
11227: LD_VAR 0 6
11231: PUSH
11232: LD_VAR 0 3
11236: STR
11237: ST_TO_ADDR
// end ;
11238: GO 11134
11240: POP
11241: POP
// if isGameLoad then
11242: LD_VAR 0 1
11246: IFFALSE 11721
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
11248: LD_ADDR_VAR 0 4
11252: PUSH
11253: LD_EXP 29
11257: PUSH
11258: LD_EXP 28
11262: PUSH
11263: LD_EXP 30
11267: PUSH
11268: LD_EXP 27
11272: PUSH
11273: LD_EXP 31
11277: PUSH
11278: LD_EXP 32
11282: PUSH
11283: LD_EXP 33
11287: PUSH
11288: LD_EXP 34
11292: PUSH
11293: LD_EXP 35
11297: PUSH
11298: LD_EXP 36
11302: PUSH
11303: LD_EXP 37
11307: PUSH
11308: LD_EXP 38
11312: PUSH
11313: LD_EXP 39
11317: PUSH
11318: LD_EXP 40
11322: PUSH
11323: LD_EXP 48
11327: PUSH
11328: LD_EXP 49
11332: PUSH
11333: LD_EXP 50
11337: PUSH
11338: LD_EXP 51
11342: PUSH
11343: LD_EXP 53
11347: PUSH
11348: LD_EXP 54
11352: PUSH
11353: LD_EXP 55
11357: PUSH
11358: LD_EXP 58
11362: PUSH
11363: LD_EXP 60
11367: PUSH
11368: LD_EXP 61
11372: PUSH
11373: LD_EXP 62
11377: PUSH
11378: LD_EXP 64
11382: PUSH
11383: LD_EXP 65
11387: PUSH
11388: LD_EXP 68
11392: PUSH
11393: LD_EXP 69
11397: PUSH
11398: LD_EXP 70
11402: PUSH
11403: LD_EXP 71
11407: PUSH
11408: LD_EXP 72
11412: PUSH
11413: LD_EXP 73
11417: PUSH
11418: LD_EXP 74
11422: PUSH
11423: LD_EXP 75
11427: PUSH
11428: LD_EXP 76
11432: PUSH
11433: LD_EXP 41
11437: PUSH
11438: LD_EXP 42
11442: PUSH
11443: LD_EXP 45
11447: PUSH
11448: LD_EXP 46
11452: PUSH
11453: LD_EXP 47
11457: PUSH
11458: LD_EXP 43
11462: PUSH
11463: LD_EXP 44
11467: PUSH
11468: LD_EXP 52
11472: PUSH
11473: LD_EXP 56
11477: PUSH
11478: LD_EXP 57
11482: PUSH
11483: LD_EXP 59
11487: PUSH
11488: LD_EXP 63
11492: PUSH
11493: LD_EXP 66
11497: PUSH
11498: LD_EXP 67
11502: PUSH
11503: LD_EXP 77
11507: PUSH
11508: LD_EXP 78
11512: PUSH
11513: LD_EXP 79
11517: PUSH
11518: LD_EXP 80
11522: PUSH
11523: EMPTY
11524: LIST
11525: LIST
11526: LIST
11527: LIST
11528: LIST
11529: LIST
11530: LIST
11531: LIST
11532: LIST
11533: LIST
11534: LIST
11535: LIST
11536: LIST
11537: LIST
11538: LIST
11539: LIST
11540: LIST
11541: LIST
11542: LIST
11543: LIST
11544: LIST
11545: LIST
11546: LIST
11547: LIST
11548: LIST
11549: LIST
11550: LIST
11551: LIST
11552: LIST
11553: LIST
11554: LIST
11555: LIST
11556: LIST
11557: LIST
11558: LIST
11559: LIST
11560: LIST
11561: LIST
11562: LIST
11563: LIST
11564: LIST
11565: LIST
11566: LIST
11567: LIST
11568: LIST
11569: LIST
11570: LIST
11571: LIST
11572: LIST
11573: LIST
11574: LIST
11575: LIST
11576: LIST
11577: LIST
11578: ST_TO_ADDR
// tmp :=  ;
11579: LD_ADDR_VAR 0 3
11583: PUSH
11584: LD_STRING 
11586: ST_TO_ADDR
// for i = 1 to normalCounter do
11587: LD_ADDR_VAR 0 8
11591: PUSH
11592: DOUBLE
11593: LD_INT 1
11595: DEC
11596: ST_TO_ADDR
11597: LD_EXP 25
11601: PUSH
11602: FOR_TO
11603: IFFALSE 11639
// begin if flags [ i ] then
11605: LD_VAR 0 4
11609: PUSH
11610: LD_VAR 0 8
11614: ARRAY
11615: IFFALSE 11637
// tmp := tmp & i & ; ;
11617: LD_ADDR_VAR 0 3
11621: PUSH
11622: LD_VAR 0 3
11626: PUSH
11627: LD_VAR 0 8
11631: STR
11632: PUSH
11633: LD_STRING ;
11635: STR
11636: ST_TO_ADDR
// end ;
11637: GO 11602
11639: POP
11640: POP
// for i = 1 to hardcoreCounter do
11641: LD_ADDR_VAR 0 8
11645: PUSH
11646: DOUBLE
11647: LD_INT 1
11649: DEC
11650: ST_TO_ADDR
11651: LD_EXP 26
11655: PUSH
11656: FOR_TO
11657: IFFALSE 11703
// begin if flags [ normalCounter + i ] then
11659: LD_VAR 0 4
11663: PUSH
11664: LD_EXP 25
11668: PUSH
11669: LD_VAR 0 8
11673: PLUS
11674: ARRAY
11675: IFFALSE 11701
// tmp := tmp & ( 100 + i ) & ; ;
11677: LD_ADDR_VAR 0 3
11681: PUSH
11682: LD_VAR 0 3
11686: PUSH
11687: LD_INT 100
11689: PUSH
11690: LD_VAR 0 8
11694: PLUS
11695: STR
11696: PUSH
11697: LD_STRING ;
11699: STR
11700: ST_TO_ADDR
// end ;
11701: GO 11656
11703: POP
11704: POP
// if tmp then
11705: LD_VAR 0 3
11709: IFFALSE 11721
// active := tmp ;
11711: LD_ADDR_VAR 0 7
11715: PUSH
11716: LD_VAR 0 3
11720: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
11721: LD_STRING getStreamItemsFromMission("
11723: PUSH
11724: LD_VAR 0 5
11728: STR
11729: PUSH
11730: LD_STRING ","
11732: STR
11733: PUSH
11734: LD_VAR 0 6
11738: STR
11739: PUSH
11740: LD_STRING ","
11742: STR
11743: PUSH
11744: LD_VAR 0 7
11748: STR
11749: PUSH
11750: LD_STRING ")
11752: STR
11753: PPUSH
11754: CALL_OW 559
// end else
11758: GO 11767
// ToLua ( getStreamItemsFromMission("","","") ) ;
11760: LD_STRING getStreamItemsFromMission("","","")
11762: PPUSH
11763: CALL_OW 559
// end ;
11767: LD_VAR 0 2
11771: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
11772: LD_EXP 24
11776: PUSH
11777: LD_EXP 29
11781: AND
11782: IFFALSE 11906
11784: GO 11786
11786: DISABLE
11787: LD_INT 0
11789: PPUSH
11790: PPUSH
// begin enable ;
11791: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
11792: LD_ADDR_VAR 0 2
11796: PUSH
11797: LD_INT 22
11799: PUSH
11800: LD_OWVAR 2
11804: PUSH
11805: EMPTY
11806: LIST
11807: LIST
11808: PUSH
11809: LD_INT 2
11811: PUSH
11812: LD_INT 34
11814: PUSH
11815: LD_INT 7
11817: PUSH
11818: EMPTY
11819: LIST
11820: LIST
11821: PUSH
11822: LD_INT 34
11824: PUSH
11825: LD_INT 45
11827: PUSH
11828: EMPTY
11829: LIST
11830: LIST
11831: PUSH
11832: LD_INT 34
11834: PUSH
11835: LD_INT 28
11837: PUSH
11838: EMPTY
11839: LIST
11840: LIST
11841: PUSH
11842: LD_INT 34
11844: PUSH
11845: LD_INT 47
11847: PUSH
11848: EMPTY
11849: LIST
11850: LIST
11851: PUSH
11852: EMPTY
11853: LIST
11854: LIST
11855: LIST
11856: LIST
11857: LIST
11858: PUSH
11859: EMPTY
11860: LIST
11861: LIST
11862: PPUSH
11863: CALL_OW 69
11867: ST_TO_ADDR
// if not tmp then
11868: LD_VAR 0 2
11872: NOT
11873: IFFALSE 11877
// exit ;
11875: GO 11906
// for i in tmp do
11877: LD_ADDR_VAR 0 1
11881: PUSH
11882: LD_VAR 0 2
11886: PUSH
11887: FOR_IN
11888: IFFALSE 11904
// begin SetLives ( i , 0 ) ;
11890: LD_VAR 0 1
11894: PPUSH
11895: LD_INT 0
11897: PPUSH
11898: CALL_OW 234
// end ;
11902: GO 11887
11904: POP
11905: POP
// end ;
11906: PPOPN 2
11908: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
11909: LD_EXP 24
11913: PUSH
11914: LD_EXP 30
11918: AND
11919: IFFALSE 12003
11921: GO 11923
11923: DISABLE
11924: LD_INT 0
11926: PPUSH
11927: PPUSH
// begin enable ;
11928: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
11929: LD_ADDR_VAR 0 2
11933: PUSH
11934: LD_INT 22
11936: PUSH
11937: LD_OWVAR 2
11941: PUSH
11942: EMPTY
11943: LIST
11944: LIST
11945: PUSH
11946: LD_INT 32
11948: PUSH
11949: LD_INT 3
11951: PUSH
11952: EMPTY
11953: LIST
11954: LIST
11955: PUSH
11956: EMPTY
11957: LIST
11958: LIST
11959: PPUSH
11960: CALL_OW 69
11964: ST_TO_ADDR
// if not tmp then
11965: LD_VAR 0 2
11969: NOT
11970: IFFALSE 11974
// exit ;
11972: GO 12003
// for i in tmp do
11974: LD_ADDR_VAR 0 1
11978: PUSH
11979: LD_VAR 0 2
11983: PUSH
11984: FOR_IN
11985: IFFALSE 12001
// begin SetLives ( i , 0 ) ;
11987: LD_VAR 0 1
11991: PPUSH
11992: LD_INT 0
11994: PPUSH
11995: CALL_OW 234
// end ;
11999: GO 11984
12001: POP
12002: POP
// end ;
12003: PPOPN 2
12005: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
12006: LD_EXP 24
12010: PUSH
12011: LD_EXP 27
12015: AND
12016: IFFALSE 12109
12018: GO 12020
12020: DISABLE
12021: LD_INT 0
12023: PPUSH
// begin enable ;
12024: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
12025: LD_ADDR_VAR 0 1
12029: PUSH
12030: LD_INT 22
12032: PUSH
12033: LD_OWVAR 2
12037: PUSH
12038: EMPTY
12039: LIST
12040: LIST
12041: PUSH
12042: LD_INT 2
12044: PUSH
12045: LD_INT 25
12047: PUSH
12048: LD_INT 5
12050: PUSH
12051: EMPTY
12052: LIST
12053: LIST
12054: PUSH
12055: LD_INT 25
12057: PUSH
12058: LD_INT 9
12060: PUSH
12061: EMPTY
12062: LIST
12063: LIST
12064: PUSH
12065: LD_INT 25
12067: PUSH
12068: LD_INT 8
12070: PUSH
12071: EMPTY
12072: LIST
12073: LIST
12074: PUSH
12075: EMPTY
12076: LIST
12077: LIST
12078: LIST
12079: LIST
12080: PUSH
12081: EMPTY
12082: LIST
12083: LIST
12084: PPUSH
12085: CALL_OW 69
12089: PUSH
12090: FOR_IN
12091: IFFALSE 12107
// begin SetClass ( i , 1 ) ;
12093: LD_VAR 0 1
12097: PPUSH
12098: LD_INT 1
12100: PPUSH
12101: CALL_OW 336
// end ;
12105: GO 12090
12107: POP
12108: POP
// end ;
12109: PPOPN 1
12111: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
12112: LD_EXP 24
12116: PUSH
12117: LD_EXP 28
12121: AND
12122: PUSH
12123: LD_OWVAR 65
12127: PUSH
12128: LD_INT 7
12130: LESS
12131: AND
12132: IFFALSE 12146
12134: GO 12136
12136: DISABLE
// begin enable ;
12137: ENABLE
// game_speed := 7 ;
12138: LD_ADDR_OWVAR 65
12142: PUSH
12143: LD_INT 7
12145: ST_TO_ADDR
// end ;
12146: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
12147: LD_EXP 24
12151: PUSH
12152: LD_EXP 31
12156: AND
12157: IFFALSE 12359
12159: GO 12161
12161: DISABLE
12162: LD_INT 0
12164: PPUSH
12165: PPUSH
12166: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
12167: LD_ADDR_VAR 0 3
12171: PUSH
12172: LD_INT 81
12174: PUSH
12175: LD_OWVAR 2
12179: PUSH
12180: EMPTY
12181: LIST
12182: LIST
12183: PUSH
12184: LD_INT 21
12186: PUSH
12187: LD_INT 1
12189: PUSH
12190: EMPTY
12191: LIST
12192: LIST
12193: PUSH
12194: EMPTY
12195: LIST
12196: LIST
12197: PPUSH
12198: CALL_OW 69
12202: ST_TO_ADDR
// if not tmp then
12203: LD_VAR 0 3
12207: NOT
12208: IFFALSE 12212
// exit ;
12210: GO 12359
// if tmp > 5 then
12212: LD_VAR 0 3
12216: PUSH
12217: LD_INT 5
12219: GREATER
12220: IFFALSE 12232
// k := 5 else
12222: LD_ADDR_VAR 0 2
12226: PUSH
12227: LD_INT 5
12229: ST_TO_ADDR
12230: GO 12242
// k := tmp ;
12232: LD_ADDR_VAR 0 2
12236: PUSH
12237: LD_VAR 0 3
12241: ST_TO_ADDR
// for i := 1 to k do
12242: LD_ADDR_VAR 0 1
12246: PUSH
12247: DOUBLE
12248: LD_INT 1
12250: DEC
12251: ST_TO_ADDR
12252: LD_VAR 0 2
12256: PUSH
12257: FOR_TO
12258: IFFALSE 12357
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
12260: LD_VAR 0 3
12264: PUSH
12265: LD_VAR 0 1
12269: ARRAY
12270: PPUSH
12271: LD_VAR 0 1
12275: PUSH
12276: LD_INT 4
12278: MOD
12279: PUSH
12280: LD_INT 1
12282: PLUS
12283: PPUSH
12284: CALL_OW 259
12288: PUSH
12289: LD_INT 10
12291: LESS
12292: IFFALSE 12355
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
12294: LD_VAR 0 3
12298: PUSH
12299: LD_VAR 0 1
12303: ARRAY
12304: PPUSH
12305: LD_VAR 0 1
12309: PUSH
12310: LD_INT 4
12312: MOD
12313: PUSH
12314: LD_INT 1
12316: PLUS
12317: PPUSH
12318: LD_VAR 0 3
12322: PUSH
12323: LD_VAR 0 1
12327: ARRAY
12328: PPUSH
12329: LD_VAR 0 1
12333: PUSH
12334: LD_INT 4
12336: MOD
12337: PUSH
12338: LD_INT 1
12340: PLUS
12341: PPUSH
12342: CALL_OW 259
12346: PUSH
12347: LD_INT 1
12349: PLUS
12350: PPUSH
12351: CALL_OW 237
12355: GO 12257
12357: POP
12358: POP
// end ;
12359: PPOPN 3
12361: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
12362: LD_EXP 24
12366: PUSH
12367: LD_EXP 32
12371: AND
12372: IFFALSE 12392
12374: GO 12376
12376: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
12377: LD_INT 4
12379: PPUSH
12380: LD_OWVAR 2
12384: PPUSH
12385: LD_INT 0
12387: PPUSH
12388: CALL_OW 324
12392: END
// every 0 0$1 trigger StreamModeActive and sShovel do
12393: LD_EXP 24
12397: PUSH
12398: LD_EXP 61
12402: AND
12403: IFFALSE 12423
12405: GO 12407
12407: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
12408: LD_INT 19
12410: PPUSH
12411: LD_OWVAR 2
12415: PPUSH
12416: LD_INT 0
12418: PPUSH
12419: CALL_OW 324
12423: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
12424: LD_EXP 24
12428: PUSH
12429: LD_EXP 33
12433: AND
12434: IFFALSE 12536
12436: GO 12438
12438: DISABLE
12439: LD_INT 0
12441: PPUSH
12442: PPUSH
// begin enable ;
12443: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
12444: LD_ADDR_VAR 0 2
12448: PUSH
12449: LD_INT 22
12451: PUSH
12452: LD_OWVAR 2
12456: PUSH
12457: EMPTY
12458: LIST
12459: LIST
12460: PUSH
12461: LD_INT 2
12463: PUSH
12464: LD_INT 34
12466: PUSH
12467: LD_INT 11
12469: PUSH
12470: EMPTY
12471: LIST
12472: LIST
12473: PUSH
12474: LD_INT 34
12476: PUSH
12477: LD_INT 30
12479: PUSH
12480: EMPTY
12481: LIST
12482: LIST
12483: PUSH
12484: EMPTY
12485: LIST
12486: LIST
12487: LIST
12488: PUSH
12489: EMPTY
12490: LIST
12491: LIST
12492: PPUSH
12493: CALL_OW 69
12497: ST_TO_ADDR
// if not tmp then
12498: LD_VAR 0 2
12502: NOT
12503: IFFALSE 12507
// exit ;
12505: GO 12536
// for i in tmp do
12507: LD_ADDR_VAR 0 1
12511: PUSH
12512: LD_VAR 0 2
12516: PUSH
12517: FOR_IN
12518: IFFALSE 12534
// begin SetLives ( i , 0 ) ;
12520: LD_VAR 0 1
12524: PPUSH
12525: LD_INT 0
12527: PPUSH
12528: CALL_OW 234
// end ;
12532: GO 12517
12534: POP
12535: POP
// end ;
12536: PPOPN 2
12538: END
// every 0 0$1 trigger StreamModeActive and sBunker do
12539: LD_EXP 24
12543: PUSH
12544: LD_EXP 34
12548: AND
12549: IFFALSE 12569
12551: GO 12553
12553: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
12554: LD_INT 32
12556: PPUSH
12557: LD_OWVAR 2
12561: PPUSH
12562: LD_INT 0
12564: PPUSH
12565: CALL_OW 324
12569: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
12570: LD_EXP 24
12574: PUSH
12575: LD_EXP 35
12579: AND
12580: IFFALSE 12761
12582: GO 12584
12584: DISABLE
12585: LD_INT 0
12587: PPUSH
12588: PPUSH
12589: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
12590: LD_ADDR_VAR 0 2
12594: PUSH
12595: LD_INT 22
12597: PUSH
12598: LD_OWVAR 2
12602: PUSH
12603: EMPTY
12604: LIST
12605: LIST
12606: PUSH
12607: LD_INT 33
12609: PUSH
12610: LD_INT 3
12612: PUSH
12613: EMPTY
12614: LIST
12615: LIST
12616: PUSH
12617: EMPTY
12618: LIST
12619: LIST
12620: PPUSH
12621: CALL_OW 69
12625: ST_TO_ADDR
// if not tmp then
12626: LD_VAR 0 2
12630: NOT
12631: IFFALSE 12635
// exit ;
12633: GO 12761
// side := 0 ;
12635: LD_ADDR_VAR 0 3
12639: PUSH
12640: LD_INT 0
12642: ST_TO_ADDR
// for i := 1 to 8 do
12643: LD_ADDR_VAR 0 1
12647: PUSH
12648: DOUBLE
12649: LD_INT 1
12651: DEC
12652: ST_TO_ADDR
12653: LD_INT 8
12655: PUSH
12656: FOR_TO
12657: IFFALSE 12705
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
12659: LD_OWVAR 2
12663: PUSH
12664: LD_VAR 0 1
12668: NONEQUAL
12669: PUSH
12670: LD_OWVAR 2
12674: PPUSH
12675: LD_VAR 0 1
12679: PPUSH
12680: CALL_OW 81
12684: PUSH
12685: LD_INT 2
12687: EQUAL
12688: AND
12689: IFFALSE 12703
// begin side := i ;
12691: LD_ADDR_VAR 0 3
12695: PUSH
12696: LD_VAR 0 1
12700: ST_TO_ADDR
// break ;
12701: GO 12705
// end ;
12703: GO 12656
12705: POP
12706: POP
// if not side then
12707: LD_VAR 0 3
12711: NOT
12712: IFFALSE 12716
// exit ;
12714: GO 12761
// for i := 1 to tmp do
12716: LD_ADDR_VAR 0 1
12720: PUSH
12721: DOUBLE
12722: LD_INT 1
12724: DEC
12725: ST_TO_ADDR
12726: LD_VAR 0 2
12730: PUSH
12731: FOR_TO
12732: IFFALSE 12759
// if Prob ( 60 ) then
12734: LD_INT 60
12736: PPUSH
12737: CALL_OW 13
12741: IFFALSE 12757
// SetSide ( i , side ) ;
12743: LD_VAR 0 1
12747: PPUSH
12748: LD_VAR 0 3
12752: PPUSH
12753: CALL_OW 235
12757: GO 12731
12759: POP
12760: POP
// end ;
12761: PPOPN 3
12763: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
12764: LD_EXP 24
12768: PUSH
12769: LD_EXP 37
12773: AND
12774: IFFALSE 12893
12776: GO 12778
12778: DISABLE
12779: LD_INT 0
12781: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
12782: LD_ADDR_VAR 0 1
12786: PUSH
12787: LD_INT 22
12789: PUSH
12790: LD_OWVAR 2
12794: PUSH
12795: EMPTY
12796: LIST
12797: LIST
12798: PUSH
12799: LD_INT 21
12801: PUSH
12802: LD_INT 1
12804: PUSH
12805: EMPTY
12806: LIST
12807: LIST
12808: PUSH
12809: LD_INT 3
12811: PUSH
12812: LD_INT 23
12814: PUSH
12815: LD_INT 0
12817: PUSH
12818: EMPTY
12819: LIST
12820: LIST
12821: PUSH
12822: EMPTY
12823: LIST
12824: LIST
12825: PUSH
12826: EMPTY
12827: LIST
12828: LIST
12829: LIST
12830: PPUSH
12831: CALL_OW 69
12835: PUSH
12836: FOR_IN
12837: IFFALSE 12891
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
12839: LD_VAR 0 1
12843: PPUSH
12844: CALL_OW 257
12848: PUSH
12849: LD_INT 1
12851: PUSH
12852: LD_INT 2
12854: PUSH
12855: LD_INT 3
12857: PUSH
12858: LD_INT 4
12860: PUSH
12861: EMPTY
12862: LIST
12863: LIST
12864: LIST
12865: LIST
12866: IN
12867: IFFALSE 12889
// SetClass ( un , rand ( 1 , 4 ) ) ;
12869: LD_VAR 0 1
12873: PPUSH
12874: LD_INT 1
12876: PPUSH
12877: LD_INT 4
12879: PPUSH
12880: CALL_OW 12
12884: PPUSH
12885: CALL_OW 336
12889: GO 12836
12891: POP
12892: POP
// end ;
12893: PPOPN 1
12895: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
12896: LD_EXP 24
12900: PUSH
12901: LD_EXP 36
12905: AND
12906: IFFALSE 12985
12908: GO 12910
12910: DISABLE
12911: LD_INT 0
12913: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12914: LD_ADDR_VAR 0 1
12918: PUSH
12919: LD_INT 22
12921: PUSH
12922: LD_OWVAR 2
12926: PUSH
12927: EMPTY
12928: LIST
12929: LIST
12930: PUSH
12931: LD_INT 21
12933: PUSH
12934: LD_INT 3
12936: PUSH
12937: EMPTY
12938: LIST
12939: LIST
12940: PUSH
12941: EMPTY
12942: LIST
12943: LIST
12944: PPUSH
12945: CALL_OW 69
12949: ST_TO_ADDR
// if not tmp then
12950: LD_VAR 0 1
12954: NOT
12955: IFFALSE 12959
// exit ;
12957: GO 12985
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
12959: LD_VAR 0 1
12963: PUSH
12964: LD_INT 1
12966: PPUSH
12967: LD_VAR 0 1
12971: PPUSH
12972: CALL_OW 12
12976: ARRAY
12977: PPUSH
12978: LD_INT 100
12980: PPUSH
12981: CALL_OW 234
// end ;
12985: PPOPN 1
12987: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
12988: LD_EXP 24
12992: PUSH
12993: LD_EXP 38
12997: AND
12998: IFFALSE 13096
13000: GO 13002
13002: DISABLE
13003: LD_INT 0
13005: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13006: LD_ADDR_VAR 0 1
13010: PUSH
13011: LD_INT 22
13013: PUSH
13014: LD_OWVAR 2
13018: PUSH
13019: EMPTY
13020: LIST
13021: LIST
13022: PUSH
13023: LD_INT 21
13025: PUSH
13026: LD_INT 1
13028: PUSH
13029: EMPTY
13030: LIST
13031: LIST
13032: PUSH
13033: EMPTY
13034: LIST
13035: LIST
13036: PPUSH
13037: CALL_OW 69
13041: ST_TO_ADDR
// if not tmp then
13042: LD_VAR 0 1
13046: NOT
13047: IFFALSE 13051
// exit ;
13049: GO 13096
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
13051: LD_VAR 0 1
13055: PUSH
13056: LD_INT 1
13058: PPUSH
13059: LD_VAR 0 1
13063: PPUSH
13064: CALL_OW 12
13068: ARRAY
13069: PPUSH
13070: LD_INT 1
13072: PPUSH
13073: LD_INT 4
13075: PPUSH
13076: CALL_OW 12
13080: PPUSH
13081: LD_INT 3000
13083: PPUSH
13084: LD_INT 9000
13086: PPUSH
13087: CALL_OW 12
13091: PPUSH
13092: CALL_OW 492
// end ;
13096: PPOPN 1
13098: END
// every 0 0$1 trigger StreamModeActive and sDepot do
13099: LD_EXP 24
13103: PUSH
13104: LD_EXP 39
13108: AND
13109: IFFALSE 13129
13111: GO 13113
13113: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
13114: LD_INT 1
13116: PPUSH
13117: LD_OWVAR 2
13121: PPUSH
13122: LD_INT 0
13124: PPUSH
13125: CALL_OW 324
13129: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
13130: LD_EXP 24
13134: PUSH
13135: LD_EXP 40
13139: AND
13140: IFFALSE 13223
13142: GO 13144
13144: DISABLE
13145: LD_INT 0
13147: PPUSH
13148: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13149: LD_ADDR_VAR 0 2
13153: PUSH
13154: LD_INT 22
13156: PUSH
13157: LD_OWVAR 2
13161: PUSH
13162: EMPTY
13163: LIST
13164: LIST
13165: PUSH
13166: LD_INT 21
13168: PUSH
13169: LD_INT 3
13171: PUSH
13172: EMPTY
13173: LIST
13174: LIST
13175: PUSH
13176: EMPTY
13177: LIST
13178: LIST
13179: PPUSH
13180: CALL_OW 69
13184: ST_TO_ADDR
// if not tmp then
13185: LD_VAR 0 2
13189: NOT
13190: IFFALSE 13194
// exit ;
13192: GO 13223
// for i in tmp do
13194: LD_ADDR_VAR 0 1
13198: PUSH
13199: LD_VAR 0 2
13203: PUSH
13204: FOR_IN
13205: IFFALSE 13221
// SetBLevel ( i , 10 ) ;
13207: LD_VAR 0 1
13211: PPUSH
13212: LD_INT 10
13214: PPUSH
13215: CALL_OW 241
13219: GO 13204
13221: POP
13222: POP
// end ;
13223: PPOPN 2
13225: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
13226: LD_EXP 24
13230: PUSH
13231: LD_EXP 41
13235: AND
13236: IFFALSE 13347
13238: GO 13240
13240: DISABLE
13241: LD_INT 0
13243: PPUSH
13244: PPUSH
13245: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13246: LD_ADDR_VAR 0 3
13250: PUSH
13251: LD_INT 22
13253: PUSH
13254: LD_OWVAR 2
13258: PUSH
13259: EMPTY
13260: LIST
13261: LIST
13262: PUSH
13263: LD_INT 25
13265: PUSH
13266: LD_INT 1
13268: PUSH
13269: EMPTY
13270: LIST
13271: LIST
13272: PUSH
13273: EMPTY
13274: LIST
13275: LIST
13276: PPUSH
13277: CALL_OW 69
13281: ST_TO_ADDR
// if not tmp then
13282: LD_VAR 0 3
13286: NOT
13287: IFFALSE 13291
// exit ;
13289: GO 13347
// un := tmp [ rand ( 1 , tmp ) ] ;
13291: LD_ADDR_VAR 0 2
13295: PUSH
13296: LD_VAR 0 3
13300: PUSH
13301: LD_INT 1
13303: PPUSH
13304: LD_VAR 0 3
13308: PPUSH
13309: CALL_OW 12
13313: ARRAY
13314: ST_TO_ADDR
// if Crawls ( un ) then
13315: LD_VAR 0 2
13319: PPUSH
13320: CALL_OW 318
13324: IFFALSE 13335
// ComWalk ( un ) ;
13326: LD_VAR 0 2
13330: PPUSH
13331: CALL_OW 138
// SetClass ( un , class_sniper ) ;
13335: LD_VAR 0 2
13339: PPUSH
13340: LD_INT 5
13342: PPUSH
13343: CALL_OW 336
// end ;
13347: PPOPN 3
13349: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
13350: LD_EXP 24
13354: PUSH
13355: LD_EXP 42
13359: AND
13360: PUSH
13361: LD_OWVAR 67
13365: PUSH
13366: LD_INT 4
13368: LESS
13369: AND
13370: IFFALSE 13389
13372: GO 13374
13374: DISABLE
// begin Difficulty := Difficulty + 1 ;
13375: LD_ADDR_OWVAR 67
13379: PUSH
13380: LD_OWVAR 67
13384: PUSH
13385: LD_INT 1
13387: PLUS
13388: ST_TO_ADDR
// end ;
13389: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
13390: LD_EXP 24
13394: PUSH
13395: LD_EXP 43
13399: AND
13400: IFFALSE 13503
13402: GO 13404
13404: DISABLE
13405: LD_INT 0
13407: PPUSH
// begin for i := 1 to 5 do
13408: LD_ADDR_VAR 0 1
13412: PUSH
13413: DOUBLE
13414: LD_INT 1
13416: DEC
13417: ST_TO_ADDR
13418: LD_INT 5
13420: PUSH
13421: FOR_TO
13422: IFFALSE 13501
// begin uc_nation := nation_nature ;
13424: LD_ADDR_OWVAR 21
13428: PUSH
13429: LD_INT 0
13431: ST_TO_ADDR
// uc_side := 0 ;
13432: LD_ADDR_OWVAR 20
13436: PUSH
13437: LD_INT 0
13439: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13440: LD_ADDR_OWVAR 29
13444: PUSH
13445: LD_INT 12
13447: PUSH
13448: LD_INT 12
13450: PUSH
13451: EMPTY
13452: LIST
13453: LIST
13454: ST_TO_ADDR
// hc_agressivity := 20 ;
13455: LD_ADDR_OWVAR 35
13459: PUSH
13460: LD_INT 20
13462: ST_TO_ADDR
// hc_class := class_tiger ;
13463: LD_ADDR_OWVAR 28
13467: PUSH
13468: LD_INT 14
13470: ST_TO_ADDR
// hc_gallery :=  ;
13471: LD_ADDR_OWVAR 33
13475: PUSH
13476: LD_STRING 
13478: ST_TO_ADDR
// hc_name :=  ;
13479: LD_ADDR_OWVAR 26
13483: PUSH
13484: LD_STRING 
13486: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
13487: CALL_OW 44
13491: PPUSH
13492: LD_INT 0
13494: PPUSH
13495: CALL_OW 51
// end ;
13499: GO 13421
13501: POP
13502: POP
// end ;
13503: PPOPN 1
13505: END
// every 0 0$1 trigger StreamModeActive and sBomb do
13506: LD_EXP 24
13510: PUSH
13511: LD_EXP 44
13515: AND
13516: IFFALSE 13525
13518: GO 13520
13520: DISABLE
// StreamSibBomb ;
13521: CALL 13526 0 0
13525: END
// export function StreamSibBomb ; var i , x , y ; begin
13526: LD_INT 0
13528: PPUSH
13529: PPUSH
13530: PPUSH
13531: PPUSH
// result := false ;
13532: LD_ADDR_VAR 0 1
13536: PUSH
13537: LD_INT 0
13539: ST_TO_ADDR
// for i := 1 to 16 do
13540: LD_ADDR_VAR 0 2
13544: PUSH
13545: DOUBLE
13546: LD_INT 1
13548: DEC
13549: ST_TO_ADDR
13550: LD_INT 16
13552: PUSH
13553: FOR_TO
13554: IFFALSE 13753
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13556: LD_ADDR_VAR 0 3
13560: PUSH
13561: LD_INT 10
13563: PUSH
13564: LD_INT 20
13566: PUSH
13567: LD_INT 30
13569: PUSH
13570: LD_INT 40
13572: PUSH
13573: LD_INT 50
13575: PUSH
13576: LD_INT 60
13578: PUSH
13579: LD_INT 70
13581: PUSH
13582: LD_INT 80
13584: PUSH
13585: LD_INT 90
13587: PUSH
13588: LD_INT 100
13590: PUSH
13591: LD_INT 110
13593: PUSH
13594: LD_INT 120
13596: PUSH
13597: LD_INT 130
13599: PUSH
13600: LD_INT 140
13602: PUSH
13603: LD_INT 150
13605: PUSH
13606: EMPTY
13607: LIST
13608: LIST
13609: LIST
13610: LIST
13611: LIST
13612: LIST
13613: LIST
13614: LIST
13615: LIST
13616: LIST
13617: LIST
13618: LIST
13619: LIST
13620: LIST
13621: LIST
13622: PUSH
13623: LD_INT 1
13625: PPUSH
13626: LD_INT 15
13628: PPUSH
13629: CALL_OW 12
13633: ARRAY
13634: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13635: LD_ADDR_VAR 0 4
13639: PUSH
13640: LD_INT 10
13642: PUSH
13643: LD_INT 20
13645: PUSH
13646: LD_INT 30
13648: PUSH
13649: LD_INT 40
13651: PUSH
13652: LD_INT 50
13654: PUSH
13655: LD_INT 60
13657: PUSH
13658: LD_INT 70
13660: PUSH
13661: LD_INT 80
13663: PUSH
13664: LD_INT 90
13666: PUSH
13667: LD_INT 100
13669: PUSH
13670: LD_INT 110
13672: PUSH
13673: LD_INT 120
13675: PUSH
13676: LD_INT 130
13678: PUSH
13679: LD_INT 140
13681: PUSH
13682: LD_INT 150
13684: PUSH
13685: EMPTY
13686: LIST
13687: LIST
13688: LIST
13689: LIST
13690: LIST
13691: LIST
13692: LIST
13693: LIST
13694: LIST
13695: LIST
13696: LIST
13697: LIST
13698: LIST
13699: LIST
13700: LIST
13701: PUSH
13702: LD_INT 1
13704: PPUSH
13705: LD_INT 15
13707: PPUSH
13708: CALL_OW 12
13712: ARRAY
13713: ST_TO_ADDR
// if ValidHex ( x , y ) then
13714: LD_VAR 0 3
13718: PPUSH
13719: LD_VAR 0 4
13723: PPUSH
13724: CALL_OW 488
13728: IFFALSE 13751
// begin result := [ x , y ] ;
13730: LD_ADDR_VAR 0 1
13734: PUSH
13735: LD_VAR 0 3
13739: PUSH
13740: LD_VAR 0 4
13744: PUSH
13745: EMPTY
13746: LIST
13747: LIST
13748: ST_TO_ADDR
// break ;
13749: GO 13753
// end ; end ;
13751: GO 13553
13753: POP
13754: POP
// if result then
13755: LD_VAR 0 1
13759: IFFALSE 13819
// begin ToLua ( playSibBomb() ) ;
13761: LD_STRING playSibBomb()
13763: PPUSH
13764: CALL_OW 559
// wait ( 0 0$14 ) ;
13768: LD_INT 490
13770: PPUSH
13771: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
13775: LD_VAR 0 1
13779: PUSH
13780: LD_INT 1
13782: ARRAY
13783: PPUSH
13784: LD_VAR 0 1
13788: PUSH
13789: LD_INT 2
13791: ARRAY
13792: PPUSH
13793: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
13797: LD_VAR 0 1
13801: PUSH
13802: LD_INT 1
13804: ARRAY
13805: PPUSH
13806: LD_VAR 0 1
13810: PUSH
13811: LD_INT 2
13813: ARRAY
13814: PPUSH
13815: CALL_OW 429
// end ; end ;
13819: LD_VAR 0 1
13823: RET
// every 0 0$1 trigger StreamModeActive and sReset do
13824: LD_EXP 24
13828: PUSH
13829: LD_EXP 46
13833: AND
13834: IFFALSE 13846
13836: GO 13838
13838: DISABLE
// YouLost (  ) ;
13839: LD_STRING 
13841: PPUSH
13842: CALL_OW 104
13846: END
// every 0 0$1 trigger StreamModeActive and sFog do
13847: LD_EXP 24
13851: PUSH
13852: LD_EXP 45
13856: AND
13857: IFFALSE 13871
13859: GO 13861
13861: DISABLE
// FogOff ( your_side ) ;
13862: LD_OWVAR 2
13866: PPUSH
13867: CALL_OW 344
13871: END
// every 0 0$1 trigger StreamModeActive and sSun do
13872: LD_EXP 24
13876: PUSH
13877: LD_EXP 47
13881: AND
13882: IFFALSE 13910
13884: GO 13886
13886: DISABLE
// begin solar_recharge_percent := 0 ;
13887: LD_ADDR_OWVAR 79
13891: PUSH
13892: LD_INT 0
13894: ST_TO_ADDR
// wait ( 5 5$00 ) ;
13895: LD_INT 10500
13897: PPUSH
13898: CALL_OW 67
// solar_recharge_percent := 100 ;
13902: LD_ADDR_OWVAR 79
13906: PUSH
13907: LD_INT 100
13909: ST_TO_ADDR
// end ;
13910: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
13911: LD_EXP 24
13915: PUSH
13916: LD_EXP 48
13920: AND
13921: IFFALSE 14160
13923: GO 13925
13925: DISABLE
13926: LD_INT 0
13928: PPUSH
13929: PPUSH
13930: PPUSH
// begin tmp := [ ] ;
13931: LD_ADDR_VAR 0 3
13935: PUSH
13936: EMPTY
13937: ST_TO_ADDR
// for i := 1 to 6 do
13938: LD_ADDR_VAR 0 1
13942: PUSH
13943: DOUBLE
13944: LD_INT 1
13946: DEC
13947: ST_TO_ADDR
13948: LD_INT 6
13950: PUSH
13951: FOR_TO
13952: IFFALSE 14057
// begin uc_nation := nation_nature ;
13954: LD_ADDR_OWVAR 21
13958: PUSH
13959: LD_INT 0
13961: ST_TO_ADDR
// uc_side := 0 ;
13962: LD_ADDR_OWVAR 20
13966: PUSH
13967: LD_INT 0
13969: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13970: LD_ADDR_OWVAR 29
13974: PUSH
13975: LD_INT 12
13977: PUSH
13978: LD_INT 12
13980: PUSH
13981: EMPTY
13982: LIST
13983: LIST
13984: ST_TO_ADDR
// hc_agressivity := 20 ;
13985: LD_ADDR_OWVAR 35
13989: PUSH
13990: LD_INT 20
13992: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
13993: LD_ADDR_OWVAR 28
13997: PUSH
13998: LD_INT 17
14000: ST_TO_ADDR
// hc_gallery :=  ;
14001: LD_ADDR_OWVAR 33
14005: PUSH
14006: LD_STRING 
14008: ST_TO_ADDR
// hc_name :=  ;
14009: LD_ADDR_OWVAR 26
14013: PUSH
14014: LD_STRING 
14016: ST_TO_ADDR
// un := CreateHuman ;
14017: LD_ADDR_VAR 0 2
14021: PUSH
14022: CALL_OW 44
14026: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
14027: LD_VAR 0 2
14031: PPUSH
14032: LD_INT 1
14034: PPUSH
14035: CALL_OW 51
// tmp := tmp ^ un ;
14039: LD_ADDR_VAR 0 3
14043: PUSH
14044: LD_VAR 0 3
14048: PUSH
14049: LD_VAR 0 2
14053: ADD
14054: ST_TO_ADDR
// end ;
14055: GO 13951
14057: POP
14058: POP
// repeat wait ( 0 0$1 ) ;
14059: LD_INT 35
14061: PPUSH
14062: CALL_OW 67
// for un in tmp do
14066: LD_ADDR_VAR 0 2
14070: PUSH
14071: LD_VAR 0 3
14075: PUSH
14076: FOR_IN
14077: IFFALSE 14151
// begin if IsDead ( un ) then
14079: LD_VAR 0 2
14083: PPUSH
14084: CALL_OW 301
14088: IFFALSE 14108
// begin tmp := tmp diff un ;
14090: LD_ADDR_VAR 0 3
14094: PUSH
14095: LD_VAR 0 3
14099: PUSH
14100: LD_VAR 0 2
14104: DIFF
14105: ST_TO_ADDR
// continue ;
14106: GO 14076
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
14108: LD_VAR 0 2
14112: PPUSH
14113: LD_INT 3
14115: PUSH
14116: LD_INT 22
14118: PUSH
14119: LD_INT 0
14121: PUSH
14122: EMPTY
14123: LIST
14124: LIST
14125: PUSH
14126: EMPTY
14127: LIST
14128: LIST
14129: PPUSH
14130: CALL_OW 69
14134: PPUSH
14135: LD_VAR 0 2
14139: PPUSH
14140: CALL_OW 74
14144: PPUSH
14145: CALL_OW 115
// end ;
14149: GO 14076
14151: POP
14152: POP
// until not tmp ;
14153: LD_VAR 0 3
14157: NOT
14158: IFFALSE 14059
// end ;
14160: PPOPN 3
14162: END
// every 0 0$1 trigger StreamModeActive and sTroll do
14163: LD_EXP 24
14167: PUSH
14168: LD_EXP 49
14172: AND
14173: IFFALSE 14227
14175: GO 14177
14177: DISABLE
// begin ToLua ( displayTroll(); ) ;
14178: LD_STRING displayTroll();
14180: PPUSH
14181: CALL_OW 559
// wait ( 3 3$00 ) ;
14185: LD_INT 6300
14187: PPUSH
14188: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14192: LD_STRING hideTroll();
14194: PPUSH
14195: CALL_OW 559
// wait ( 1 1$00 ) ;
14199: LD_INT 2100
14201: PPUSH
14202: CALL_OW 67
// ToLua ( displayTroll(); ) ;
14206: LD_STRING displayTroll();
14208: PPUSH
14209: CALL_OW 559
// wait ( 1 1$00 ) ;
14213: LD_INT 2100
14215: PPUSH
14216: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14220: LD_STRING hideTroll();
14222: PPUSH
14223: CALL_OW 559
// end ;
14227: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
14228: LD_EXP 24
14232: PUSH
14233: LD_EXP 50
14237: AND
14238: IFFALSE 14301
14240: GO 14242
14242: DISABLE
14243: LD_INT 0
14245: PPUSH
// begin p := 0 ;
14246: LD_ADDR_VAR 0 1
14250: PUSH
14251: LD_INT 0
14253: ST_TO_ADDR
// repeat game_speed := 1 ;
14254: LD_ADDR_OWVAR 65
14258: PUSH
14259: LD_INT 1
14261: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14262: LD_INT 35
14264: PPUSH
14265: CALL_OW 67
// p := p + 1 ;
14269: LD_ADDR_VAR 0 1
14273: PUSH
14274: LD_VAR 0 1
14278: PUSH
14279: LD_INT 1
14281: PLUS
14282: ST_TO_ADDR
// until p >= 60 ;
14283: LD_VAR 0 1
14287: PUSH
14288: LD_INT 60
14290: GREATEREQUAL
14291: IFFALSE 14254
// game_speed := 4 ;
14293: LD_ADDR_OWVAR 65
14297: PUSH
14298: LD_INT 4
14300: ST_TO_ADDR
// end ;
14301: PPOPN 1
14303: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
14304: LD_EXP 24
14308: PUSH
14309: LD_EXP 51
14313: AND
14314: IFFALSE 14460
14316: GO 14318
14318: DISABLE
14319: LD_INT 0
14321: PPUSH
14322: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14323: LD_ADDR_VAR 0 1
14327: PUSH
14328: LD_INT 22
14330: PUSH
14331: LD_OWVAR 2
14335: PUSH
14336: EMPTY
14337: LIST
14338: LIST
14339: PUSH
14340: LD_INT 2
14342: PUSH
14343: LD_INT 30
14345: PUSH
14346: LD_INT 0
14348: PUSH
14349: EMPTY
14350: LIST
14351: LIST
14352: PUSH
14353: LD_INT 30
14355: PUSH
14356: LD_INT 1
14358: PUSH
14359: EMPTY
14360: LIST
14361: LIST
14362: PUSH
14363: EMPTY
14364: LIST
14365: LIST
14366: LIST
14367: PUSH
14368: EMPTY
14369: LIST
14370: LIST
14371: PPUSH
14372: CALL_OW 69
14376: ST_TO_ADDR
// if not depot then
14377: LD_VAR 0 1
14381: NOT
14382: IFFALSE 14386
// exit ;
14384: GO 14460
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
14386: LD_ADDR_VAR 0 2
14390: PUSH
14391: LD_VAR 0 1
14395: PUSH
14396: LD_INT 1
14398: PPUSH
14399: LD_VAR 0 1
14403: PPUSH
14404: CALL_OW 12
14408: ARRAY
14409: PPUSH
14410: CALL_OW 274
14414: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
14415: LD_VAR 0 2
14419: PPUSH
14420: LD_INT 1
14422: PPUSH
14423: LD_INT 0
14425: PPUSH
14426: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
14430: LD_VAR 0 2
14434: PPUSH
14435: LD_INT 2
14437: PPUSH
14438: LD_INT 0
14440: PPUSH
14441: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
14445: LD_VAR 0 2
14449: PPUSH
14450: LD_INT 3
14452: PPUSH
14453: LD_INT 0
14455: PPUSH
14456: CALL_OW 277
// end ;
14460: PPOPN 2
14462: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
14463: LD_EXP 24
14467: PUSH
14468: LD_EXP 52
14472: AND
14473: IFFALSE 14570
14475: GO 14477
14477: DISABLE
14478: LD_INT 0
14480: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14481: LD_ADDR_VAR 0 1
14485: PUSH
14486: LD_INT 22
14488: PUSH
14489: LD_OWVAR 2
14493: PUSH
14494: EMPTY
14495: LIST
14496: LIST
14497: PUSH
14498: LD_INT 21
14500: PUSH
14501: LD_INT 1
14503: PUSH
14504: EMPTY
14505: LIST
14506: LIST
14507: PUSH
14508: LD_INT 3
14510: PUSH
14511: LD_INT 23
14513: PUSH
14514: LD_INT 0
14516: PUSH
14517: EMPTY
14518: LIST
14519: LIST
14520: PUSH
14521: EMPTY
14522: LIST
14523: LIST
14524: PUSH
14525: EMPTY
14526: LIST
14527: LIST
14528: LIST
14529: PPUSH
14530: CALL_OW 69
14534: ST_TO_ADDR
// if not tmp then
14535: LD_VAR 0 1
14539: NOT
14540: IFFALSE 14544
// exit ;
14542: GO 14570
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
14544: LD_VAR 0 1
14548: PUSH
14549: LD_INT 1
14551: PPUSH
14552: LD_VAR 0 1
14556: PPUSH
14557: CALL_OW 12
14561: ARRAY
14562: PPUSH
14563: LD_INT 200
14565: PPUSH
14566: CALL_OW 234
// end ;
14570: PPOPN 1
14572: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
14573: LD_EXP 24
14577: PUSH
14578: LD_EXP 53
14582: AND
14583: IFFALSE 14662
14585: GO 14587
14587: DISABLE
14588: LD_INT 0
14590: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
14591: LD_ADDR_VAR 0 1
14595: PUSH
14596: LD_INT 22
14598: PUSH
14599: LD_OWVAR 2
14603: PUSH
14604: EMPTY
14605: LIST
14606: LIST
14607: PUSH
14608: LD_INT 21
14610: PUSH
14611: LD_INT 2
14613: PUSH
14614: EMPTY
14615: LIST
14616: LIST
14617: PUSH
14618: EMPTY
14619: LIST
14620: LIST
14621: PPUSH
14622: CALL_OW 69
14626: ST_TO_ADDR
// if not tmp then
14627: LD_VAR 0 1
14631: NOT
14632: IFFALSE 14636
// exit ;
14634: GO 14662
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
14636: LD_VAR 0 1
14640: PUSH
14641: LD_INT 1
14643: PPUSH
14644: LD_VAR 0 1
14648: PPUSH
14649: CALL_OW 12
14653: ARRAY
14654: PPUSH
14655: LD_INT 60
14657: PPUSH
14658: CALL_OW 234
// end ;
14662: PPOPN 1
14664: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
14665: LD_EXP 24
14669: PUSH
14670: LD_EXP 54
14674: AND
14675: IFFALSE 14774
14677: GO 14679
14679: DISABLE
14680: LD_INT 0
14682: PPUSH
14683: PPUSH
// begin enable ;
14684: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
14685: LD_ADDR_VAR 0 1
14689: PUSH
14690: LD_INT 22
14692: PUSH
14693: LD_OWVAR 2
14697: PUSH
14698: EMPTY
14699: LIST
14700: LIST
14701: PUSH
14702: LD_INT 61
14704: PUSH
14705: EMPTY
14706: LIST
14707: PUSH
14708: LD_INT 33
14710: PUSH
14711: LD_INT 2
14713: PUSH
14714: EMPTY
14715: LIST
14716: LIST
14717: PUSH
14718: EMPTY
14719: LIST
14720: LIST
14721: LIST
14722: PPUSH
14723: CALL_OW 69
14727: ST_TO_ADDR
// if not tmp then
14728: LD_VAR 0 1
14732: NOT
14733: IFFALSE 14737
// exit ;
14735: GO 14774
// for i in tmp do
14737: LD_ADDR_VAR 0 2
14741: PUSH
14742: LD_VAR 0 1
14746: PUSH
14747: FOR_IN
14748: IFFALSE 14772
// if IsControledBy ( i ) then
14750: LD_VAR 0 2
14754: PPUSH
14755: CALL_OW 312
14759: IFFALSE 14770
// ComUnlink ( i ) ;
14761: LD_VAR 0 2
14765: PPUSH
14766: CALL_OW 136
14770: GO 14747
14772: POP
14773: POP
// end ;
14774: PPOPN 2
14776: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
14777: LD_EXP 24
14781: PUSH
14782: LD_EXP 55
14786: AND
14787: IFFALSE 14927
14789: GO 14791
14791: DISABLE
14792: LD_INT 0
14794: PPUSH
14795: PPUSH
// begin ToLua ( displayPowell(); ) ;
14796: LD_STRING displayPowell();
14798: PPUSH
14799: CALL_OW 559
// uc_side := 0 ;
14803: LD_ADDR_OWVAR 20
14807: PUSH
14808: LD_INT 0
14810: ST_TO_ADDR
// uc_nation := 2 ;
14811: LD_ADDR_OWVAR 21
14815: PUSH
14816: LD_INT 2
14818: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
14819: LD_ADDR_OWVAR 37
14823: PUSH
14824: LD_INT 14
14826: ST_TO_ADDR
// vc_engine := engine_siberite ;
14827: LD_ADDR_OWVAR 39
14831: PUSH
14832: LD_INT 3
14834: ST_TO_ADDR
// vc_control := control_apeman ;
14835: LD_ADDR_OWVAR 38
14839: PUSH
14840: LD_INT 5
14842: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
14843: LD_ADDR_OWVAR 40
14847: PUSH
14848: LD_INT 29
14850: ST_TO_ADDR
// un := CreateVehicle ;
14851: LD_ADDR_VAR 0 2
14855: PUSH
14856: CALL_OW 45
14860: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14861: LD_VAR 0 2
14865: PPUSH
14866: LD_INT 1
14868: PPUSH
14869: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14873: LD_INT 35
14875: PPUSH
14876: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14880: LD_VAR 0 2
14884: PPUSH
14885: LD_INT 22
14887: PUSH
14888: LD_OWVAR 2
14892: PUSH
14893: EMPTY
14894: LIST
14895: LIST
14896: PPUSH
14897: CALL_OW 69
14901: PPUSH
14902: LD_VAR 0 2
14906: PPUSH
14907: CALL_OW 74
14911: PPUSH
14912: CALL_OW 115
// until IsDead ( un ) ;
14916: LD_VAR 0 2
14920: PPUSH
14921: CALL_OW 301
14925: IFFALSE 14873
// end ;
14927: PPOPN 2
14929: END
// every 0 0$1 trigger StreamModeActive and sStu do
14930: LD_EXP 24
14934: PUSH
14935: LD_EXP 63
14939: AND
14940: IFFALSE 14956
14942: GO 14944
14944: DISABLE
// begin ToLua ( displayStucuk(); ) ;
14945: LD_STRING displayStucuk();
14947: PPUSH
14948: CALL_OW 559
// ResetFog ;
14952: CALL_OW 335
// end ;
14956: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
14957: LD_EXP 24
14961: PUSH
14962: LD_EXP 56
14966: AND
14967: IFFALSE 15108
14969: GO 14971
14971: DISABLE
14972: LD_INT 0
14974: PPUSH
14975: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14976: LD_ADDR_VAR 0 2
14980: PUSH
14981: LD_INT 22
14983: PUSH
14984: LD_OWVAR 2
14988: PUSH
14989: EMPTY
14990: LIST
14991: LIST
14992: PUSH
14993: LD_INT 21
14995: PUSH
14996: LD_INT 1
14998: PUSH
14999: EMPTY
15000: LIST
15001: LIST
15002: PUSH
15003: EMPTY
15004: LIST
15005: LIST
15006: PPUSH
15007: CALL_OW 69
15011: ST_TO_ADDR
// if not tmp then
15012: LD_VAR 0 2
15016: NOT
15017: IFFALSE 15021
// exit ;
15019: GO 15108
// un := tmp [ rand ( 1 , tmp ) ] ;
15021: LD_ADDR_VAR 0 1
15025: PUSH
15026: LD_VAR 0 2
15030: PUSH
15031: LD_INT 1
15033: PPUSH
15034: LD_VAR 0 2
15038: PPUSH
15039: CALL_OW 12
15043: ARRAY
15044: ST_TO_ADDR
// SetSide ( un , 0 ) ;
15045: LD_VAR 0 1
15049: PPUSH
15050: LD_INT 0
15052: PPUSH
15053: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
15057: LD_VAR 0 1
15061: PPUSH
15062: LD_OWVAR 3
15066: PUSH
15067: LD_VAR 0 1
15071: DIFF
15072: PPUSH
15073: LD_VAR 0 1
15077: PPUSH
15078: CALL_OW 74
15082: PPUSH
15083: CALL_OW 115
// wait ( 0 0$20 ) ;
15087: LD_INT 700
15089: PPUSH
15090: CALL_OW 67
// SetSide ( un , your_side ) ;
15094: LD_VAR 0 1
15098: PPUSH
15099: LD_OWVAR 2
15103: PPUSH
15104: CALL_OW 235
// end ;
15108: PPOPN 2
15110: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
15111: LD_EXP 24
15115: PUSH
15116: LD_EXP 57
15120: AND
15121: IFFALSE 15227
15123: GO 15125
15125: DISABLE
15126: LD_INT 0
15128: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15129: LD_ADDR_VAR 0 1
15133: PUSH
15134: LD_INT 22
15136: PUSH
15137: LD_OWVAR 2
15141: PUSH
15142: EMPTY
15143: LIST
15144: LIST
15145: PUSH
15146: LD_INT 2
15148: PUSH
15149: LD_INT 30
15151: PUSH
15152: LD_INT 0
15154: PUSH
15155: EMPTY
15156: LIST
15157: LIST
15158: PUSH
15159: LD_INT 30
15161: PUSH
15162: LD_INT 1
15164: PUSH
15165: EMPTY
15166: LIST
15167: LIST
15168: PUSH
15169: EMPTY
15170: LIST
15171: LIST
15172: LIST
15173: PUSH
15174: EMPTY
15175: LIST
15176: LIST
15177: PPUSH
15178: CALL_OW 69
15182: ST_TO_ADDR
// if not depot then
15183: LD_VAR 0 1
15187: NOT
15188: IFFALSE 15192
// exit ;
15190: GO 15227
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
15192: LD_VAR 0 1
15196: PUSH
15197: LD_INT 1
15199: ARRAY
15200: PPUSH
15201: CALL_OW 250
15205: PPUSH
15206: LD_VAR 0 1
15210: PUSH
15211: LD_INT 1
15213: ARRAY
15214: PPUSH
15215: CALL_OW 251
15219: PPUSH
15220: LD_INT 70
15222: PPUSH
15223: CALL_OW 495
// end ;
15227: PPOPN 1
15229: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
15230: LD_EXP 24
15234: PUSH
15235: LD_EXP 58
15239: AND
15240: IFFALSE 15451
15242: GO 15244
15244: DISABLE
15245: LD_INT 0
15247: PPUSH
15248: PPUSH
15249: PPUSH
15250: PPUSH
15251: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15252: LD_ADDR_VAR 0 5
15256: PUSH
15257: LD_INT 22
15259: PUSH
15260: LD_OWVAR 2
15264: PUSH
15265: EMPTY
15266: LIST
15267: LIST
15268: PUSH
15269: LD_INT 21
15271: PUSH
15272: LD_INT 1
15274: PUSH
15275: EMPTY
15276: LIST
15277: LIST
15278: PUSH
15279: EMPTY
15280: LIST
15281: LIST
15282: PPUSH
15283: CALL_OW 69
15287: ST_TO_ADDR
// if not tmp then
15288: LD_VAR 0 5
15292: NOT
15293: IFFALSE 15297
// exit ;
15295: GO 15451
// for i in tmp do
15297: LD_ADDR_VAR 0 1
15301: PUSH
15302: LD_VAR 0 5
15306: PUSH
15307: FOR_IN
15308: IFFALSE 15449
// begin d := rand ( 0 , 5 ) ;
15310: LD_ADDR_VAR 0 4
15314: PUSH
15315: LD_INT 0
15317: PPUSH
15318: LD_INT 5
15320: PPUSH
15321: CALL_OW 12
15325: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
15326: LD_ADDR_VAR 0 2
15330: PUSH
15331: LD_VAR 0 1
15335: PPUSH
15336: CALL_OW 250
15340: PPUSH
15341: LD_VAR 0 4
15345: PPUSH
15346: LD_INT 3
15348: PPUSH
15349: LD_INT 12
15351: PPUSH
15352: CALL_OW 12
15356: PPUSH
15357: CALL_OW 272
15361: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
15362: LD_ADDR_VAR 0 3
15366: PUSH
15367: LD_VAR 0 1
15371: PPUSH
15372: CALL_OW 251
15376: PPUSH
15377: LD_VAR 0 4
15381: PPUSH
15382: LD_INT 3
15384: PPUSH
15385: LD_INT 12
15387: PPUSH
15388: CALL_OW 12
15392: PPUSH
15393: CALL_OW 273
15397: ST_TO_ADDR
// if ValidHex ( x , y ) then
15398: LD_VAR 0 2
15402: PPUSH
15403: LD_VAR 0 3
15407: PPUSH
15408: CALL_OW 488
15412: IFFALSE 15447
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
15414: LD_VAR 0 1
15418: PPUSH
15419: LD_VAR 0 2
15423: PPUSH
15424: LD_VAR 0 3
15428: PPUSH
15429: LD_INT 3
15431: PPUSH
15432: LD_INT 6
15434: PPUSH
15435: CALL_OW 12
15439: PPUSH
15440: LD_INT 1
15442: PPUSH
15443: CALL_OW 483
// end ;
15447: GO 15307
15449: POP
15450: POP
// end ;
15451: PPOPN 5
15453: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
15454: LD_EXP 24
15458: PUSH
15459: LD_EXP 59
15463: AND
15464: IFFALSE 15558
15466: GO 15468
15468: DISABLE
15469: LD_INT 0
15471: PPUSH
15472: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
15473: LD_ADDR_VAR 0 2
15477: PUSH
15478: LD_INT 22
15480: PUSH
15481: LD_OWVAR 2
15485: PUSH
15486: EMPTY
15487: LIST
15488: LIST
15489: PUSH
15490: LD_INT 32
15492: PUSH
15493: LD_INT 1
15495: PUSH
15496: EMPTY
15497: LIST
15498: LIST
15499: PUSH
15500: LD_INT 21
15502: PUSH
15503: LD_INT 2
15505: PUSH
15506: EMPTY
15507: LIST
15508: LIST
15509: PUSH
15510: EMPTY
15511: LIST
15512: LIST
15513: LIST
15514: PPUSH
15515: CALL_OW 69
15519: ST_TO_ADDR
// if not tmp then
15520: LD_VAR 0 2
15524: NOT
15525: IFFALSE 15529
// exit ;
15527: GO 15558
// for i in tmp do
15529: LD_ADDR_VAR 0 1
15533: PUSH
15534: LD_VAR 0 2
15538: PUSH
15539: FOR_IN
15540: IFFALSE 15556
// SetFuel ( i , 0 ) ;
15542: LD_VAR 0 1
15546: PPUSH
15547: LD_INT 0
15549: PPUSH
15550: CALL_OW 240
15554: GO 15539
15556: POP
15557: POP
// end ;
15558: PPOPN 2
15560: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
15561: LD_EXP 24
15565: PUSH
15566: LD_EXP 60
15570: AND
15571: IFFALSE 15637
15573: GO 15575
15575: DISABLE
15576: LD_INT 0
15578: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15579: LD_ADDR_VAR 0 1
15583: PUSH
15584: LD_INT 22
15586: PUSH
15587: LD_OWVAR 2
15591: PUSH
15592: EMPTY
15593: LIST
15594: LIST
15595: PUSH
15596: LD_INT 30
15598: PUSH
15599: LD_INT 29
15601: PUSH
15602: EMPTY
15603: LIST
15604: LIST
15605: PUSH
15606: EMPTY
15607: LIST
15608: LIST
15609: PPUSH
15610: CALL_OW 69
15614: ST_TO_ADDR
// if not tmp then
15615: LD_VAR 0 1
15619: NOT
15620: IFFALSE 15624
// exit ;
15622: GO 15637
// DestroyUnit ( tmp [ 1 ] ) ;
15624: LD_VAR 0 1
15628: PUSH
15629: LD_INT 1
15631: ARRAY
15632: PPUSH
15633: CALL_OW 65
// end ;
15637: PPOPN 1
15639: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
15640: LD_EXP 24
15644: PUSH
15645: LD_EXP 62
15649: AND
15650: IFFALSE 15779
15652: GO 15654
15654: DISABLE
15655: LD_INT 0
15657: PPUSH
// begin uc_side := 0 ;
15658: LD_ADDR_OWVAR 20
15662: PUSH
15663: LD_INT 0
15665: ST_TO_ADDR
// uc_nation := nation_arabian ;
15666: LD_ADDR_OWVAR 21
15670: PUSH
15671: LD_INT 2
15673: ST_TO_ADDR
// hc_gallery :=  ;
15674: LD_ADDR_OWVAR 33
15678: PUSH
15679: LD_STRING 
15681: ST_TO_ADDR
// hc_name :=  ;
15682: LD_ADDR_OWVAR 26
15686: PUSH
15687: LD_STRING 
15689: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
15690: LD_INT 1
15692: PPUSH
15693: LD_INT 11
15695: PPUSH
15696: LD_INT 10
15698: PPUSH
15699: CALL_OW 380
// un := CreateHuman ;
15703: LD_ADDR_VAR 0 1
15707: PUSH
15708: CALL_OW 44
15712: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15713: LD_VAR 0 1
15717: PPUSH
15718: LD_INT 1
15720: PPUSH
15721: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15725: LD_INT 35
15727: PPUSH
15728: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15732: LD_VAR 0 1
15736: PPUSH
15737: LD_INT 22
15739: PUSH
15740: LD_OWVAR 2
15744: PUSH
15745: EMPTY
15746: LIST
15747: LIST
15748: PPUSH
15749: CALL_OW 69
15753: PPUSH
15754: LD_VAR 0 1
15758: PPUSH
15759: CALL_OW 74
15763: PPUSH
15764: CALL_OW 115
// until IsDead ( un ) ;
15768: LD_VAR 0 1
15772: PPUSH
15773: CALL_OW 301
15777: IFFALSE 15725
// end ;
15779: PPOPN 1
15781: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
15782: LD_EXP 24
15786: PUSH
15787: LD_EXP 64
15791: AND
15792: IFFALSE 15804
15794: GO 15796
15796: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
15797: LD_STRING earthquake(getX(game), 0, 32)
15799: PPUSH
15800: CALL_OW 559
15804: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
15805: LD_EXP 24
15809: PUSH
15810: LD_EXP 65
15814: AND
15815: IFFALSE 15906
15817: GO 15819
15819: DISABLE
15820: LD_INT 0
15822: PPUSH
// begin enable ;
15823: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
15824: LD_ADDR_VAR 0 1
15828: PUSH
15829: LD_INT 22
15831: PUSH
15832: LD_OWVAR 2
15836: PUSH
15837: EMPTY
15838: LIST
15839: LIST
15840: PUSH
15841: LD_INT 21
15843: PUSH
15844: LD_INT 2
15846: PUSH
15847: EMPTY
15848: LIST
15849: LIST
15850: PUSH
15851: LD_INT 33
15853: PUSH
15854: LD_INT 3
15856: PUSH
15857: EMPTY
15858: LIST
15859: LIST
15860: PUSH
15861: EMPTY
15862: LIST
15863: LIST
15864: LIST
15865: PPUSH
15866: CALL_OW 69
15870: ST_TO_ADDR
// if not tmp then
15871: LD_VAR 0 1
15875: NOT
15876: IFFALSE 15880
// exit ;
15878: GO 15906
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15880: LD_VAR 0 1
15884: PUSH
15885: LD_INT 1
15887: PPUSH
15888: LD_VAR 0 1
15892: PPUSH
15893: CALL_OW 12
15897: ARRAY
15898: PPUSH
15899: LD_INT 1
15901: PPUSH
15902: CALL_OW 234
// end ;
15906: PPOPN 1
15908: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
15909: LD_EXP 24
15913: PUSH
15914: LD_EXP 66
15918: AND
15919: IFFALSE 16060
15921: GO 15923
15923: DISABLE
15924: LD_INT 0
15926: PPUSH
15927: PPUSH
15928: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15929: LD_ADDR_VAR 0 3
15933: PUSH
15934: LD_INT 22
15936: PUSH
15937: LD_OWVAR 2
15941: PUSH
15942: EMPTY
15943: LIST
15944: LIST
15945: PUSH
15946: LD_INT 25
15948: PUSH
15949: LD_INT 1
15951: PUSH
15952: EMPTY
15953: LIST
15954: LIST
15955: PUSH
15956: EMPTY
15957: LIST
15958: LIST
15959: PPUSH
15960: CALL_OW 69
15964: ST_TO_ADDR
// if not tmp then
15965: LD_VAR 0 3
15969: NOT
15970: IFFALSE 15974
// exit ;
15972: GO 16060
// un := tmp [ rand ( 1 , tmp ) ] ;
15974: LD_ADDR_VAR 0 2
15978: PUSH
15979: LD_VAR 0 3
15983: PUSH
15984: LD_INT 1
15986: PPUSH
15987: LD_VAR 0 3
15991: PPUSH
15992: CALL_OW 12
15996: ARRAY
15997: ST_TO_ADDR
// if Crawls ( un ) then
15998: LD_VAR 0 2
16002: PPUSH
16003: CALL_OW 318
16007: IFFALSE 16018
// ComWalk ( un ) ;
16009: LD_VAR 0 2
16013: PPUSH
16014: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
16018: LD_VAR 0 2
16022: PPUSH
16023: LD_INT 9
16025: PPUSH
16026: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
16030: LD_INT 28
16032: PPUSH
16033: LD_OWVAR 2
16037: PPUSH
16038: LD_INT 2
16040: PPUSH
16041: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
16045: LD_INT 29
16047: PPUSH
16048: LD_OWVAR 2
16052: PPUSH
16053: LD_INT 2
16055: PPUSH
16056: CALL_OW 322
// end ;
16060: PPOPN 3
16062: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
16063: LD_EXP 24
16067: PUSH
16068: LD_EXP 67
16072: AND
16073: IFFALSE 16184
16075: GO 16077
16077: DISABLE
16078: LD_INT 0
16080: PPUSH
16081: PPUSH
16082: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16083: LD_ADDR_VAR 0 3
16087: PUSH
16088: LD_INT 22
16090: PUSH
16091: LD_OWVAR 2
16095: PUSH
16096: EMPTY
16097: LIST
16098: LIST
16099: PUSH
16100: LD_INT 25
16102: PUSH
16103: LD_INT 1
16105: PUSH
16106: EMPTY
16107: LIST
16108: LIST
16109: PUSH
16110: EMPTY
16111: LIST
16112: LIST
16113: PPUSH
16114: CALL_OW 69
16118: ST_TO_ADDR
// if not tmp then
16119: LD_VAR 0 3
16123: NOT
16124: IFFALSE 16128
// exit ;
16126: GO 16184
// un := tmp [ rand ( 1 , tmp ) ] ;
16128: LD_ADDR_VAR 0 2
16132: PUSH
16133: LD_VAR 0 3
16137: PUSH
16138: LD_INT 1
16140: PPUSH
16141: LD_VAR 0 3
16145: PPUSH
16146: CALL_OW 12
16150: ARRAY
16151: ST_TO_ADDR
// if Crawls ( un ) then
16152: LD_VAR 0 2
16156: PPUSH
16157: CALL_OW 318
16161: IFFALSE 16172
// ComWalk ( un ) ;
16163: LD_VAR 0 2
16167: PPUSH
16168: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16172: LD_VAR 0 2
16176: PPUSH
16177: LD_INT 8
16179: PPUSH
16180: CALL_OW 336
// end ;
16184: PPOPN 3
16186: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
16187: LD_EXP 24
16191: PUSH
16192: LD_EXP 68
16196: AND
16197: IFFALSE 16341
16199: GO 16201
16201: DISABLE
16202: LD_INT 0
16204: PPUSH
16205: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
16206: LD_ADDR_VAR 0 2
16210: PUSH
16211: LD_INT 22
16213: PUSH
16214: LD_OWVAR 2
16218: PUSH
16219: EMPTY
16220: LIST
16221: LIST
16222: PUSH
16223: LD_INT 21
16225: PUSH
16226: LD_INT 2
16228: PUSH
16229: EMPTY
16230: LIST
16231: LIST
16232: PUSH
16233: LD_INT 2
16235: PUSH
16236: LD_INT 34
16238: PUSH
16239: LD_INT 12
16241: PUSH
16242: EMPTY
16243: LIST
16244: LIST
16245: PUSH
16246: LD_INT 34
16248: PUSH
16249: LD_INT 51
16251: PUSH
16252: EMPTY
16253: LIST
16254: LIST
16255: PUSH
16256: LD_INT 34
16258: PUSH
16259: LD_INT 32
16261: PUSH
16262: EMPTY
16263: LIST
16264: LIST
16265: PUSH
16266: EMPTY
16267: LIST
16268: LIST
16269: LIST
16270: LIST
16271: PUSH
16272: EMPTY
16273: LIST
16274: LIST
16275: LIST
16276: PPUSH
16277: CALL_OW 69
16281: ST_TO_ADDR
// if not tmp then
16282: LD_VAR 0 2
16286: NOT
16287: IFFALSE 16291
// exit ;
16289: GO 16341
// for i in tmp do
16291: LD_ADDR_VAR 0 1
16295: PUSH
16296: LD_VAR 0 2
16300: PUSH
16301: FOR_IN
16302: IFFALSE 16339
// if GetCargo ( i , mat_artifact ) = 0 then
16304: LD_VAR 0 1
16308: PPUSH
16309: LD_INT 4
16311: PPUSH
16312: CALL_OW 289
16316: PUSH
16317: LD_INT 0
16319: EQUAL
16320: IFFALSE 16337
// SetCargo ( i , mat_siberit , 100 ) ;
16322: LD_VAR 0 1
16326: PPUSH
16327: LD_INT 3
16329: PPUSH
16330: LD_INT 100
16332: PPUSH
16333: CALL_OW 290
16337: GO 16301
16339: POP
16340: POP
// end ;
16341: PPOPN 2
16343: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
16344: LD_EXP 24
16348: PUSH
16349: LD_EXP 69
16353: AND
16354: IFFALSE 16537
16356: GO 16358
16358: DISABLE
16359: LD_INT 0
16361: PPUSH
16362: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16363: LD_ADDR_VAR 0 2
16367: PUSH
16368: LD_INT 22
16370: PUSH
16371: LD_OWVAR 2
16375: PUSH
16376: EMPTY
16377: LIST
16378: LIST
16379: PPUSH
16380: CALL_OW 69
16384: ST_TO_ADDR
// if not tmp then
16385: LD_VAR 0 2
16389: NOT
16390: IFFALSE 16394
// exit ;
16392: GO 16537
// for i := 1 to 2 do
16394: LD_ADDR_VAR 0 1
16398: PUSH
16399: DOUBLE
16400: LD_INT 1
16402: DEC
16403: ST_TO_ADDR
16404: LD_INT 2
16406: PUSH
16407: FOR_TO
16408: IFFALSE 16535
// begin uc_side := your_side ;
16410: LD_ADDR_OWVAR 20
16414: PUSH
16415: LD_OWVAR 2
16419: ST_TO_ADDR
// uc_nation := nation_american ;
16420: LD_ADDR_OWVAR 21
16424: PUSH
16425: LD_INT 1
16427: ST_TO_ADDR
// vc_chassis := us_morphling ;
16428: LD_ADDR_OWVAR 37
16432: PUSH
16433: LD_INT 5
16435: ST_TO_ADDR
// vc_engine := engine_siberite ;
16436: LD_ADDR_OWVAR 39
16440: PUSH
16441: LD_INT 3
16443: ST_TO_ADDR
// vc_control := control_computer ;
16444: LD_ADDR_OWVAR 38
16448: PUSH
16449: LD_INT 3
16451: ST_TO_ADDR
// vc_weapon := us_double_laser ;
16452: LD_ADDR_OWVAR 40
16456: PUSH
16457: LD_INT 10
16459: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
16460: LD_VAR 0 2
16464: PUSH
16465: LD_INT 1
16467: ARRAY
16468: PPUSH
16469: CALL_OW 310
16473: NOT
16474: IFFALSE 16521
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
16476: CALL_OW 45
16480: PPUSH
16481: LD_VAR 0 2
16485: PUSH
16486: LD_INT 1
16488: ARRAY
16489: PPUSH
16490: CALL_OW 250
16494: PPUSH
16495: LD_VAR 0 2
16499: PUSH
16500: LD_INT 1
16502: ARRAY
16503: PPUSH
16504: CALL_OW 251
16508: PPUSH
16509: LD_INT 12
16511: PPUSH
16512: LD_INT 1
16514: PPUSH
16515: CALL_OW 50
16519: GO 16533
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
16521: CALL_OW 45
16525: PPUSH
16526: LD_INT 1
16528: PPUSH
16529: CALL_OW 51
// end ;
16533: GO 16407
16535: POP
16536: POP
// end ;
16537: PPOPN 2
16539: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
16540: LD_EXP 24
16544: PUSH
16545: LD_EXP 70
16549: AND
16550: IFFALSE 16772
16552: GO 16554
16554: DISABLE
16555: LD_INT 0
16557: PPUSH
16558: PPUSH
16559: PPUSH
16560: PPUSH
16561: PPUSH
16562: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16563: LD_ADDR_VAR 0 6
16567: PUSH
16568: LD_INT 22
16570: PUSH
16571: LD_OWVAR 2
16575: PUSH
16576: EMPTY
16577: LIST
16578: LIST
16579: PUSH
16580: LD_INT 21
16582: PUSH
16583: LD_INT 1
16585: PUSH
16586: EMPTY
16587: LIST
16588: LIST
16589: PUSH
16590: LD_INT 3
16592: PUSH
16593: LD_INT 23
16595: PUSH
16596: LD_INT 0
16598: PUSH
16599: EMPTY
16600: LIST
16601: LIST
16602: PUSH
16603: EMPTY
16604: LIST
16605: LIST
16606: PUSH
16607: EMPTY
16608: LIST
16609: LIST
16610: LIST
16611: PPUSH
16612: CALL_OW 69
16616: ST_TO_ADDR
// if not tmp then
16617: LD_VAR 0 6
16621: NOT
16622: IFFALSE 16626
// exit ;
16624: GO 16772
// s1 := rand ( 1 , 4 ) ;
16626: LD_ADDR_VAR 0 2
16630: PUSH
16631: LD_INT 1
16633: PPUSH
16634: LD_INT 4
16636: PPUSH
16637: CALL_OW 12
16641: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
16642: LD_ADDR_VAR 0 4
16646: PUSH
16647: LD_VAR 0 6
16651: PUSH
16652: LD_INT 1
16654: ARRAY
16655: PPUSH
16656: LD_VAR 0 2
16660: PPUSH
16661: CALL_OW 259
16665: ST_TO_ADDR
// if s1 = 1 then
16666: LD_VAR 0 2
16670: PUSH
16671: LD_INT 1
16673: EQUAL
16674: IFFALSE 16694
// s2 := rand ( 2 , 4 ) else
16676: LD_ADDR_VAR 0 3
16680: PUSH
16681: LD_INT 2
16683: PPUSH
16684: LD_INT 4
16686: PPUSH
16687: CALL_OW 12
16691: ST_TO_ADDR
16692: GO 16702
// s2 := 1 ;
16694: LD_ADDR_VAR 0 3
16698: PUSH
16699: LD_INT 1
16701: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
16702: LD_ADDR_VAR 0 5
16706: PUSH
16707: LD_VAR 0 6
16711: PUSH
16712: LD_INT 1
16714: ARRAY
16715: PPUSH
16716: LD_VAR 0 3
16720: PPUSH
16721: CALL_OW 259
16725: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
16726: LD_VAR 0 6
16730: PUSH
16731: LD_INT 1
16733: ARRAY
16734: PPUSH
16735: LD_VAR 0 2
16739: PPUSH
16740: LD_VAR 0 5
16744: PPUSH
16745: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
16749: LD_VAR 0 6
16753: PUSH
16754: LD_INT 1
16756: ARRAY
16757: PPUSH
16758: LD_VAR 0 3
16762: PPUSH
16763: LD_VAR 0 4
16767: PPUSH
16768: CALL_OW 237
// end ;
16772: PPOPN 6
16774: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
16775: LD_EXP 24
16779: PUSH
16780: LD_EXP 71
16784: AND
16785: IFFALSE 16864
16787: GO 16789
16789: DISABLE
16790: LD_INT 0
16792: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
16793: LD_ADDR_VAR 0 1
16797: PUSH
16798: LD_INT 22
16800: PUSH
16801: LD_OWVAR 2
16805: PUSH
16806: EMPTY
16807: LIST
16808: LIST
16809: PUSH
16810: LD_INT 30
16812: PUSH
16813: LD_INT 3
16815: PUSH
16816: EMPTY
16817: LIST
16818: LIST
16819: PUSH
16820: EMPTY
16821: LIST
16822: LIST
16823: PPUSH
16824: CALL_OW 69
16828: ST_TO_ADDR
// if not tmp then
16829: LD_VAR 0 1
16833: NOT
16834: IFFALSE 16838
// exit ;
16836: GO 16864
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16838: LD_VAR 0 1
16842: PUSH
16843: LD_INT 1
16845: PPUSH
16846: LD_VAR 0 1
16850: PPUSH
16851: CALL_OW 12
16855: ARRAY
16856: PPUSH
16857: LD_INT 1
16859: PPUSH
16860: CALL_OW 234
// end ;
16864: PPOPN 1
16866: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
16867: LD_EXP 24
16871: PUSH
16872: LD_EXP 72
16876: AND
16877: IFFALSE 16989
16879: GO 16881
16881: DISABLE
16882: LD_INT 0
16884: PPUSH
16885: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
16886: LD_ADDR_VAR 0 2
16890: PUSH
16891: LD_INT 22
16893: PUSH
16894: LD_OWVAR 2
16898: PUSH
16899: EMPTY
16900: LIST
16901: LIST
16902: PUSH
16903: LD_INT 2
16905: PUSH
16906: LD_INT 30
16908: PUSH
16909: LD_INT 27
16911: PUSH
16912: EMPTY
16913: LIST
16914: LIST
16915: PUSH
16916: LD_INT 30
16918: PUSH
16919: LD_INT 26
16921: PUSH
16922: EMPTY
16923: LIST
16924: LIST
16925: PUSH
16926: LD_INT 30
16928: PUSH
16929: LD_INT 28
16931: PUSH
16932: EMPTY
16933: LIST
16934: LIST
16935: PUSH
16936: EMPTY
16937: LIST
16938: LIST
16939: LIST
16940: LIST
16941: PUSH
16942: EMPTY
16943: LIST
16944: LIST
16945: PPUSH
16946: CALL_OW 69
16950: ST_TO_ADDR
// if not tmp then
16951: LD_VAR 0 2
16955: NOT
16956: IFFALSE 16960
// exit ;
16958: GO 16989
// for i in tmp do
16960: LD_ADDR_VAR 0 1
16964: PUSH
16965: LD_VAR 0 2
16969: PUSH
16970: FOR_IN
16971: IFFALSE 16987
// SetLives ( i , 1 ) ;
16973: LD_VAR 0 1
16977: PPUSH
16978: LD_INT 1
16980: PPUSH
16981: CALL_OW 234
16985: GO 16970
16987: POP
16988: POP
// end ;
16989: PPOPN 2
16991: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
16992: LD_EXP 24
16996: PUSH
16997: LD_EXP 73
17001: AND
17002: IFFALSE 17289
17004: GO 17006
17006: DISABLE
17007: LD_INT 0
17009: PPUSH
17010: PPUSH
17011: PPUSH
// begin i := rand ( 1 , 7 ) ;
17012: LD_ADDR_VAR 0 1
17016: PUSH
17017: LD_INT 1
17019: PPUSH
17020: LD_INT 7
17022: PPUSH
17023: CALL_OW 12
17027: ST_TO_ADDR
// case i of 1 :
17028: LD_VAR 0 1
17032: PUSH
17033: LD_INT 1
17035: DOUBLE
17036: EQUAL
17037: IFTRUE 17041
17039: GO 17051
17041: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
17042: LD_STRING earthquake(getX(game), 0, 32)
17044: PPUSH
17045: CALL_OW 559
17049: GO 17289
17051: LD_INT 2
17053: DOUBLE
17054: EQUAL
17055: IFTRUE 17059
17057: GO 17073
17059: POP
// begin ToLua ( displayStucuk(); ) ;
17060: LD_STRING displayStucuk();
17062: PPUSH
17063: CALL_OW 559
// ResetFog ;
17067: CALL_OW 335
// end ; 3 :
17071: GO 17289
17073: LD_INT 3
17075: DOUBLE
17076: EQUAL
17077: IFTRUE 17081
17079: GO 17185
17081: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17082: LD_ADDR_VAR 0 2
17086: PUSH
17087: LD_INT 22
17089: PUSH
17090: LD_OWVAR 2
17094: PUSH
17095: EMPTY
17096: LIST
17097: LIST
17098: PUSH
17099: LD_INT 25
17101: PUSH
17102: LD_INT 1
17104: PUSH
17105: EMPTY
17106: LIST
17107: LIST
17108: PUSH
17109: EMPTY
17110: LIST
17111: LIST
17112: PPUSH
17113: CALL_OW 69
17117: ST_TO_ADDR
// if not tmp then
17118: LD_VAR 0 2
17122: NOT
17123: IFFALSE 17127
// exit ;
17125: GO 17289
// un := tmp [ rand ( 1 , tmp ) ] ;
17127: LD_ADDR_VAR 0 3
17131: PUSH
17132: LD_VAR 0 2
17136: PUSH
17137: LD_INT 1
17139: PPUSH
17140: LD_VAR 0 2
17144: PPUSH
17145: CALL_OW 12
17149: ARRAY
17150: ST_TO_ADDR
// if Crawls ( un ) then
17151: LD_VAR 0 3
17155: PPUSH
17156: CALL_OW 318
17160: IFFALSE 17171
// ComWalk ( un ) ;
17162: LD_VAR 0 3
17166: PPUSH
17167: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17171: LD_VAR 0 3
17175: PPUSH
17176: LD_INT 8
17178: PPUSH
17179: CALL_OW 336
// end ; 4 :
17183: GO 17289
17185: LD_INT 4
17187: DOUBLE
17188: EQUAL
17189: IFTRUE 17193
17191: GO 17267
17193: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17194: LD_ADDR_VAR 0 2
17198: PUSH
17199: LD_INT 22
17201: PUSH
17202: LD_OWVAR 2
17206: PUSH
17207: EMPTY
17208: LIST
17209: LIST
17210: PUSH
17211: LD_INT 30
17213: PUSH
17214: LD_INT 29
17216: PUSH
17217: EMPTY
17218: LIST
17219: LIST
17220: PUSH
17221: EMPTY
17222: LIST
17223: LIST
17224: PPUSH
17225: CALL_OW 69
17229: ST_TO_ADDR
// if not tmp then
17230: LD_VAR 0 2
17234: NOT
17235: IFFALSE 17239
// exit ;
17237: GO 17289
// CenterNowOnUnits ( tmp [ 1 ] ) ;
17239: LD_VAR 0 2
17243: PUSH
17244: LD_INT 1
17246: ARRAY
17247: PPUSH
17248: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
17252: LD_VAR 0 2
17256: PUSH
17257: LD_INT 1
17259: ARRAY
17260: PPUSH
17261: CALL_OW 65
// end ; 5 .. 7 :
17265: GO 17289
17267: LD_INT 5
17269: DOUBLE
17270: GREATEREQUAL
17271: IFFALSE 17279
17273: LD_INT 7
17275: DOUBLE
17276: LESSEQUAL
17277: IFTRUE 17281
17279: GO 17288
17281: POP
// StreamSibBomb ; end ;
17282: CALL 13526 0 0
17286: GO 17289
17288: POP
// end ;
17289: PPOPN 3
17291: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
17292: LD_EXP 24
17296: PUSH
17297: LD_EXP 74
17301: AND
17302: IFFALSE 17458
17304: GO 17306
17306: DISABLE
17307: LD_INT 0
17309: PPUSH
17310: PPUSH
17311: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
17312: LD_ADDR_VAR 0 2
17316: PUSH
17317: LD_INT 81
17319: PUSH
17320: LD_OWVAR 2
17324: PUSH
17325: EMPTY
17326: LIST
17327: LIST
17328: PUSH
17329: LD_INT 2
17331: PUSH
17332: LD_INT 21
17334: PUSH
17335: LD_INT 1
17337: PUSH
17338: EMPTY
17339: LIST
17340: LIST
17341: PUSH
17342: LD_INT 21
17344: PUSH
17345: LD_INT 2
17347: PUSH
17348: EMPTY
17349: LIST
17350: LIST
17351: PUSH
17352: EMPTY
17353: LIST
17354: LIST
17355: LIST
17356: PUSH
17357: EMPTY
17358: LIST
17359: LIST
17360: PPUSH
17361: CALL_OW 69
17365: ST_TO_ADDR
// if not tmp then
17366: LD_VAR 0 2
17370: NOT
17371: IFFALSE 17375
// exit ;
17373: GO 17458
// p := 0 ;
17375: LD_ADDR_VAR 0 3
17379: PUSH
17380: LD_INT 0
17382: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17383: LD_INT 35
17385: PPUSH
17386: CALL_OW 67
// p := p + 1 ;
17390: LD_ADDR_VAR 0 3
17394: PUSH
17395: LD_VAR 0 3
17399: PUSH
17400: LD_INT 1
17402: PLUS
17403: ST_TO_ADDR
// for i in tmp do
17404: LD_ADDR_VAR 0 1
17408: PUSH
17409: LD_VAR 0 2
17413: PUSH
17414: FOR_IN
17415: IFFALSE 17446
// if GetLives ( i ) < 1000 then
17417: LD_VAR 0 1
17421: PPUSH
17422: CALL_OW 256
17426: PUSH
17427: LD_INT 1000
17429: LESS
17430: IFFALSE 17444
// SetLives ( i , 1000 ) ;
17432: LD_VAR 0 1
17436: PPUSH
17437: LD_INT 1000
17439: PPUSH
17440: CALL_OW 234
17444: GO 17414
17446: POP
17447: POP
// until p > 20 ;
17448: LD_VAR 0 3
17452: PUSH
17453: LD_INT 20
17455: GREATER
17456: IFFALSE 17383
// end ;
17458: PPOPN 3
17460: END
// every 0 0$1 trigger StreamModeActive and sTime do
17461: LD_EXP 24
17465: PUSH
17466: LD_EXP 75
17470: AND
17471: IFFALSE 17506
17473: GO 17475
17475: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
17476: LD_INT 28
17478: PPUSH
17479: LD_OWVAR 2
17483: PPUSH
17484: LD_INT 2
17486: PPUSH
17487: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
17491: LD_INT 30
17493: PPUSH
17494: LD_OWVAR 2
17498: PPUSH
17499: LD_INT 2
17501: PPUSH
17502: CALL_OW 322
// end ;
17506: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
17507: LD_EXP 24
17511: PUSH
17512: LD_EXP 76
17516: AND
17517: IFFALSE 17638
17519: GO 17521
17521: DISABLE
17522: LD_INT 0
17524: PPUSH
17525: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17526: LD_ADDR_VAR 0 2
17530: PUSH
17531: LD_INT 22
17533: PUSH
17534: LD_OWVAR 2
17538: PUSH
17539: EMPTY
17540: LIST
17541: LIST
17542: PUSH
17543: LD_INT 21
17545: PUSH
17546: LD_INT 1
17548: PUSH
17549: EMPTY
17550: LIST
17551: LIST
17552: PUSH
17553: LD_INT 3
17555: PUSH
17556: LD_INT 23
17558: PUSH
17559: LD_INT 0
17561: PUSH
17562: EMPTY
17563: LIST
17564: LIST
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: PUSH
17570: EMPTY
17571: LIST
17572: LIST
17573: LIST
17574: PPUSH
17575: CALL_OW 69
17579: ST_TO_ADDR
// if not tmp then
17580: LD_VAR 0 2
17584: NOT
17585: IFFALSE 17589
// exit ;
17587: GO 17638
// for i in tmp do
17589: LD_ADDR_VAR 0 1
17593: PUSH
17594: LD_VAR 0 2
17598: PUSH
17599: FOR_IN
17600: IFFALSE 17636
// begin if Crawls ( i ) then
17602: LD_VAR 0 1
17606: PPUSH
17607: CALL_OW 318
17611: IFFALSE 17622
// ComWalk ( i ) ;
17613: LD_VAR 0 1
17617: PPUSH
17618: CALL_OW 138
// SetClass ( i , 2 ) ;
17622: LD_VAR 0 1
17626: PPUSH
17627: LD_INT 2
17629: PPUSH
17630: CALL_OW 336
// end ;
17634: GO 17599
17636: POP
17637: POP
// end ;
17638: PPOPN 2
17640: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
17641: LD_EXP 24
17645: PUSH
17646: LD_EXP 77
17650: AND
17651: IFFALSE 17939
17653: GO 17655
17655: DISABLE
17656: LD_INT 0
17658: PPUSH
17659: PPUSH
17660: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
17661: LD_OWVAR 2
17665: PPUSH
17666: LD_INT 9
17668: PPUSH
17669: LD_INT 1
17671: PPUSH
17672: LD_INT 1
17674: PPUSH
17675: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
17679: LD_INT 9
17681: PPUSH
17682: LD_OWVAR 2
17686: PPUSH
17687: CALL_OW 343
// uc_side := 9 ;
17691: LD_ADDR_OWVAR 20
17695: PUSH
17696: LD_INT 9
17698: ST_TO_ADDR
// uc_nation := 2 ;
17699: LD_ADDR_OWVAR 21
17703: PUSH
17704: LD_INT 2
17706: ST_TO_ADDR
// hc_name := Dark Warrior ;
17707: LD_ADDR_OWVAR 26
17711: PUSH
17712: LD_STRING Dark Warrior
17714: ST_TO_ADDR
// hc_gallery :=  ;
17715: LD_ADDR_OWVAR 33
17719: PUSH
17720: LD_STRING 
17722: ST_TO_ADDR
// hc_noskilllimit := true ;
17723: LD_ADDR_OWVAR 76
17727: PUSH
17728: LD_INT 1
17730: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
17731: LD_ADDR_OWVAR 31
17735: PUSH
17736: LD_INT 30
17738: PUSH
17739: LD_INT 30
17741: PUSH
17742: LD_INT 30
17744: PUSH
17745: LD_INT 30
17747: PUSH
17748: EMPTY
17749: LIST
17750: LIST
17751: LIST
17752: LIST
17753: ST_TO_ADDR
// un := CreateHuman ;
17754: LD_ADDR_VAR 0 3
17758: PUSH
17759: CALL_OW 44
17763: ST_TO_ADDR
// hc_noskilllimit := false ;
17764: LD_ADDR_OWVAR 76
17768: PUSH
17769: LD_INT 0
17771: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17772: LD_VAR 0 3
17776: PPUSH
17777: LD_INT 1
17779: PPUSH
17780: CALL_OW 51
// ToLua ( playRanger() ) ;
17784: LD_STRING playRanger()
17786: PPUSH
17787: CALL_OW 559
// p := 0 ;
17791: LD_ADDR_VAR 0 2
17795: PUSH
17796: LD_INT 0
17798: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17799: LD_INT 35
17801: PPUSH
17802: CALL_OW 67
// p := p + 1 ;
17806: LD_ADDR_VAR 0 2
17810: PUSH
17811: LD_VAR 0 2
17815: PUSH
17816: LD_INT 1
17818: PLUS
17819: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
17820: LD_VAR 0 3
17824: PPUSH
17825: CALL_OW 256
17829: PUSH
17830: LD_INT 1000
17832: LESS
17833: IFFALSE 17847
// SetLives ( un , 1000 ) ;
17835: LD_VAR 0 3
17839: PPUSH
17840: LD_INT 1000
17842: PPUSH
17843: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
17847: LD_VAR 0 3
17851: PPUSH
17852: LD_INT 81
17854: PUSH
17855: LD_OWVAR 2
17859: PUSH
17860: EMPTY
17861: LIST
17862: LIST
17863: PUSH
17864: LD_INT 91
17866: PUSH
17867: LD_VAR 0 3
17871: PUSH
17872: LD_INT 30
17874: PUSH
17875: EMPTY
17876: LIST
17877: LIST
17878: LIST
17879: PUSH
17880: EMPTY
17881: LIST
17882: LIST
17883: PPUSH
17884: CALL_OW 69
17888: PPUSH
17889: LD_VAR 0 3
17893: PPUSH
17894: CALL_OW 74
17898: PPUSH
17899: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
17903: LD_VAR 0 2
17907: PUSH
17908: LD_INT 80
17910: GREATER
17911: PUSH
17912: LD_VAR 0 3
17916: PPUSH
17917: CALL_OW 301
17921: OR
17922: IFFALSE 17799
// if un then
17924: LD_VAR 0 3
17928: IFFALSE 17939
// RemoveUnit ( un ) ;
17930: LD_VAR 0 3
17934: PPUSH
17935: CALL_OW 64
// end ;
17939: PPOPN 3
17941: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
17942: LD_EXP 78
17946: IFFALSE 18062
17948: GO 17950
17950: DISABLE
17951: LD_INT 0
17953: PPUSH
17954: PPUSH
17955: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17956: LD_ADDR_VAR 0 2
17960: PUSH
17961: LD_INT 81
17963: PUSH
17964: LD_OWVAR 2
17968: PUSH
17969: EMPTY
17970: LIST
17971: LIST
17972: PUSH
17973: LD_INT 21
17975: PUSH
17976: LD_INT 1
17978: PUSH
17979: EMPTY
17980: LIST
17981: LIST
17982: PUSH
17983: EMPTY
17984: LIST
17985: LIST
17986: PPUSH
17987: CALL_OW 69
17991: ST_TO_ADDR
// ToLua ( playComputer() ) ;
17992: LD_STRING playComputer()
17994: PPUSH
17995: CALL_OW 559
// if not tmp then
17999: LD_VAR 0 2
18003: NOT
18004: IFFALSE 18008
// exit ;
18006: GO 18062
// for i in tmp do
18008: LD_ADDR_VAR 0 1
18012: PUSH
18013: LD_VAR 0 2
18017: PUSH
18018: FOR_IN
18019: IFFALSE 18060
// for j := 1 to 4 do
18021: LD_ADDR_VAR 0 3
18025: PUSH
18026: DOUBLE
18027: LD_INT 1
18029: DEC
18030: ST_TO_ADDR
18031: LD_INT 4
18033: PUSH
18034: FOR_TO
18035: IFFALSE 18056
// SetSkill ( i , j , 10 ) ;
18037: LD_VAR 0 1
18041: PPUSH
18042: LD_VAR 0 3
18046: PPUSH
18047: LD_INT 10
18049: PPUSH
18050: CALL_OW 237
18054: GO 18034
18056: POP
18057: POP
18058: GO 18018
18060: POP
18061: POP
// end ;
18062: PPOPN 3
18064: END
// every 0 0$1 trigger s30 do var i , tmp ;
18065: LD_EXP 79
18069: IFFALSE 18138
18071: GO 18073
18073: DISABLE
18074: LD_INT 0
18076: PPUSH
18077: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18078: LD_ADDR_VAR 0 2
18082: PUSH
18083: LD_INT 22
18085: PUSH
18086: LD_OWVAR 2
18090: PUSH
18091: EMPTY
18092: LIST
18093: LIST
18094: PPUSH
18095: CALL_OW 69
18099: ST_TO_ADDR
// if not tmp then
18100: LD_VAR 0 2
18104: NOT
18105: IFFALSE 18109
// exit ;
18107: GO 18138
// for i in tmp do
18109: LD_ADDR_VAR 0 1
18113: PUSH
18114: LD_VAR 0 2
18118: PUSH
18119: FOR_IN
18120: IFFALSE 18136
// SetLives ( i , 300 ) ;
18122: LD_VAR 0 1
18126: PPUSH
18127: LD_INT 300
18129: PPUSH
18130: CALL_OW 234
18134: GO 18119
18136: POP
18137: POP
// end ;
18138: PPOPN 2
18140: END
// every 0 0$1 trigger s60 do var i , tmp ;
18141: LD_EXP 80
18145: IFFALSE 18214
18147: GO 18149
18149: DISABLE
18150: LD_INT 0
18152: PPUSH
18153: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18154: LD_ADDR_VAR 0 2
18158: PUSH
18159: LD_INT 22
18161: PUSH
18162: LD_OWVAR 2
18166: PUSH
18167: EMPTY
18168: LIST
18169: LIST
18170: PPUSH
18171: CALL_OW 69
18175: ST_TO_ADDR
// if not tmp then
18176: LD_VAR 0 2
18180: NOT
18181: IFFALSE 18185
// exit ;
18183: GO 18214
// for i in tmp do
18185: LD_ADDR_VAR 0 1
18189: PUSH
18190: LD_VAR 0 2
18194: PUSH
18195: FOR_IN
18196: IFFALSE 18212
// SetLives ( i , 600 ) ;
18198: LD_VAR 0 1
18202: PPUSH
18203: LD_INT 600
18205: PPUSH
18206: CALL_OW 234
18210: GO 18195
18212: POP
18213: POP
// end ;
18214: PPOPN 2
18216: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18217: LD_INT 0
18219: PPUSH
// case cmd of 301 :
18220: LD_VAR 0 1
18224: PUSH
18225: LD_INT 301
18227: DOUBLE
18228: EQUAL
18229: IFTRUE 18233
18231: GO 18265
18233: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
18234: LD_VAR 0 6
18238: PPUSH
18239: LD_VAR 0 7
18243: PPUSH
18244: LD_VAR 0 8
18248: PPUSH
18249: LD_VAR 0 4
18253: PPUSH
18254: LD_VAR 0 5
18258: PPUSH
18259: CALL 19466 0 5
18263: GO 18386
18265: LD_INT 302
18267: DOUBLE
18268: EQUAL
18269: IFTRUE 18273
18271: GO 18310
18273: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
18274: LD_VAR 0 6
18278: PPUSH
18279: LD_VAR 0 7
18283: PPUSH
18284: LD_VAR 0 8
18288: PPUSH
18289: LD_VAR 0 9
18293: PPUSH
18294: LD_VAR 0 4
18298: PPUSH
18299: LD_VAR 0 5
18303: PPUSH
18304: CALL 19557 0 6
18308: GO 18386
18310: LD_INT 303
18312: DOUBLE
18313: EQUAL
18314: IFTRUE 18318
18316: GO 18355
18318: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
18319: LD_VAR 0 6
18323: PPUSH
18324: LD_VAR 0 7
18328: PPUSH
18329: LD_VAR 0 8
18333: PPUSH
18334: LD_VAR 0 9
18338: PPUSH
18339: LD_VAR 0 4
18343: PPUSH
18344: LD_VAR 0 5
18348: PPUSH
18349: CALL 18391 0 6
18353: GO 18386
18355: LD_INT 304
18357: DOUBLE
18358: EQUAL
18359: IFTRUE 18363
18361: GO 18385
18363: POP
// hHackTeleport ( unit , x , y ) ; end ;
18364: LD_VAR 0 2
18368: PPUSH
18369: LD_VAR 0 4
18373: PPUSH
18374: LD_VAR 0 5
18378: PPUSH
18379: CALL 20150 0 3
18383: GO 18386
18385: POP
// end ;
18386: LD_VAR 0 12
18390: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
18391: LD_INT 0
18393: PPUSH
18394: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
18395: LD_VAR 0 1
18399: PUSH
18400: LD_INT 1
18402: LESS
18403: PUSH
18404: LD_VAR 0 1
18408: PUSH
18409: LD_INT 3
18411: GREATER
18412: OR
18413: PUSH
18414: LD_VAR 0 5
18418: PPUSH
18419: LD_VAR 0 6
18423: PPUSH
18424: CALL_OW 428
18428: OR
18429: IFFALSE 18433
// exit ;
18431: GO 19153
// uc_side := your_side ;
18433: LD_ADDR_OWVAR 20
18437: PUSH
18438: LD_OWVAR 2
18442: ST_TO_ADDR
// uc_nation := nation ;
18443: LD_ADDR_OWVAR 21
18447: PUSH
18448: LD_VAR 0 1
18452: ST_TO_ADDR
// bc_level = 1 ;
18453: LD_ADDR_OWVAR 43
18457: PUSH
18458: LD_INT 1
18460: ST_TO_ADDR
// case btype of 1 :
18461: LD_VAR 0 2
18465: PUSH
18466: LD_INT 1
18468: DOUBLE
18469: EQUAL
18470: IFTRUE 18474
18472: GO 18485
18474: POP
// bc_type := b_depot ; 2 :
18475: LD_ADDR_OWVAR 42
18479: PUSH
18480: LD_INT 0
18482: ST_TO_ADDR
18483: GO 19097
18485: LD_INT 2
18487: DOUBLE
18488: EQUAL
18489: IFTRUE 18493
18491: GO 18504
18493: POP
// bc_type := b_warehouse ; 3 :
18494: LD_ADDR_OWVAR 42
18498: PUSH
18499: LD_INT 1
18501: ST_TO_ADDR
18502: GO 19097
18504: LD_INT 3
18506: DOUBLE
18507: EQUAL
18508: IFTRUE 18512
18510: GO 18523
18512: POP
// bc_type := b_lab ; 4 .. 9 :
18513: LD_ADDR_OWVAR 42
18517: PUSH
18518: LD_INT 6
18520: ST_TO_ADDR
18521: GO 19097
18523: LD_INT 4
18525: DOUBLE
18526: GREATEREQUAL
18527: IFFALSE 18535
18529: LD_INT 9
18531: DOUBLE
18532: LESSEQUAL
18533: IFTRUE 18537
18535: GO 18589
18537: POP
// begin bc_type := b_lab_half ;
18538: LD_ADDR_OWVAR 42
18542: PUSH
18543: LD_INT 7
18545: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
18546: LD_ADDR_OWVAR 44
18550: PUSH
18551: LD_INT 10
18553: PUSH
18554: LD_INT 11
18556: PUSH
18557: LD_INT 12
18559: PUSH
18560: LD_INT 15
18562: PUSH
18563: LD_INT 14
18565: PUSH
18566: LD_INT 13
18568: PUSH
18569: EMPTY
18570: LIST
18571: LIST
18572: LIST
18573: LIST
18574: LIST
18575: LIST
18576: PUSH
18577: LD_VAR 0 2
18581: PUSH
18582: LD_INT 3
18584: MINUS
18585: ARRAY
18586: ST_TO_ADDR
// end ; 10 .. 13 :
18587: GO 19097
18589: LD_INT 10
18591: DOUBLE
18592: GREATEREQUAL
18593: IFFALSE 18601
18595: LD_INT 13
18597: DOUBLE
18598: LESSEQUAL
18599: IFTRUE 18603
18601: GO 18680
18603: POP
// begin bc_type := b_lab_full ;
18604: LD_ADDR_OWVAR 42
18608: PUSH
18609: LD_INT 8
18611: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
18612: LD_ADDR_OWVAR 44
18616: PUSH
18617: LD_INT 10
18619: PUSH
18620: LD_INT 12
18622: PUSH
18623: LD_INT 14
18625: PUSH
18626: LD_INT 13
18628: PUSH
18629: EMPTY
18630: LIST
18631: LIST
18632: LIST
18633: LIST
18634: PUSH
18635: LD_VAR 0 2
18639: PUSH
18640: LD_INT 9
18642: MINUS
18643: ARRAY
18644: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
18645: LD_ADDR_OWVAR 45
18649: PUSH
18650: LD_INT 11
18652: PUSH
18653: LD_INT 15
18655: PUSH
18656: LD_INT 12
18658: PUSH
18659: LD_INT 15
18661: PUSH
18662: EMPTY
18663: LIST
18664: LIST
18665: LIST
18666: LIST
18667: PUSH
18668: LD_VAR 0 2
18672: PUSH
18673: LD_INT 9
18675: MINUS
18676: ARRAY
18677: ST_TO_ADDR
// end ; 14 :
18678: GO 19097
18680: LD_INT 14
18682: DOUBLE
18683: EQUAL
18684: IFTRUE 18688
18686: GO 18699
18688: POP
// bc_type := b_workshop ; 15 :
18689: LD_ADDR_OWVAR 42
18693: PUSH
18694: LD_INT 2
18696: ST_TO_ADDR
18697: GO 19097
18699: LD_INT 15
18701: DOUBLE
18702: EQUAL
18703: IFTRUE 18707
18705: GO 18718
18707: POP
// bc_type := b_factory ; 16 :
18708: LD_ADDR_OWVAR 42
18712: PUSH
18713: LD_INT 3
18715: ST_TO_ADDR
18716: GO 19097
18718: LD_INT 16
18720: DOUBLE
18721: EQUAL
18722: IFTRUE 18726
18724: GO 18737
18726: POP
// bc_type := b_ext_gun ; 17 :
18727: LD_ADDR_OWVAR 42
18731: PUSH
18732: LD_INT 17
18734: ST_TO_ADDR
18735: GO 19097
18737: LD_INT 17
18739: DOUBLE
18740: EQUAL
18741: IFTRUE 18745
18743: GO 18773
18745: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
18746: LD_ADDR_OWVAR 42
18750: PUSH
18751: LD_INT 19
18753: PUSH
18754: LD_INT 23
18756: PUSH
18757: LD_INT 19
18759: PUSH
18760: EMPTY
18761: LIST
18762: LIST
18763: LIST
18764: PUSH
18765: LD_VAR 0 1
18769: ARRAY
18770: ST_TO_ADDR
18771: GO 19097
18773: LD_INT 18
18775: DOUBLE
18776: EQUAL
18777: IFTRUE 18781
18779: GO 18792
18781: POP
// bc_type := b_ext_radar ; 19 :
18782: LD_ADDR_OWVAR 42
18786: PUSH
18787: LD_INT 20
18789: ST_TO_ADDR
18790: GO 19097
18792: LD_INT 19
18794: DOUBLE
18795: EQUAL
18796: IFTRUE 18800
18798: GO 18811
18800: POP
// bc_type := b_ext_radio ; 20 :
18801: LD_ADDR_OWVAR 42
18805: PUSH
18806: LD_INT 22
18808: ST_TO_ADDR
18809: GO 19097
18811: LD_INT 20
18813: DOUBLE
18814: EQUAL
18815: IFTRUE 18819
18817: GO 18830
18819: POP
// bc_type := b_ext_siberium ; 21 :
18820: LD_ADDR_OWVAR 42
18824: PUSH
18825: LD_INT 21
18827: ST_TO_ADDR
18828: GO 19097
18830: LD_INT 21
18832: DOUBLE
18833: EQUAL
18834: IFTRUE 18838
18836: GO 18849
18838: POP
// bc_type := b_ext_computer ; 22 :
18839: LD_ADDR_OWVAR 42
18843: PUSH
18844: LD_INT 24
18846: ST_TO_ADDR
18847: GO 19097
18849: LD_INT 22
18851: DOUBLE
18852: EQUAL
18853: IFTRUE 18857
18855: GO 18868
18857: POP
// bc_type := b_ext_track ; 23 :
18858: LD_ADDR_OWVAR 42
18862: PUSH
18863: LD_INT 16
18865: ST_TO_ADDR
18866: GO 19097
18868: LD_INT 23
18870: DOUBLE
18871: EQUAL
18872: IFTRUE 18876
18874: GO 18887
18876: POP
// bc_type := b_ext_laser ; 24 :
18877: LD_ADDR_OWVAR 42
18881: PUSH
18882: LD_INT 25
18884: ST_TO_ADDR
18885: GO 19097
18887: LD_INT 24
18889: DOUBLE
18890: EQUAL
18891: IFTRUE 18895
18893: GO 18906
18895: POP
// bc_type := b_control_tower ; 25 :
18896: LD_ADDR_OWVAR 42
18900: PUSH
18901: LD_INT 36
18903: ST_TO_ADDR
18904: GO 19097
18906: LD_INT 25
18908: DOUBLE
18909: EQUAL
18910: IFTRUE 18914
18912: GO 18925
18914: POP
// bc_type := b_breastwork ; 26 :
18915: LD_ADDR_OWVAR 42
18919: PUSH
18920: LD_INT 31
18922: ST_TO_ADDR
18923: GO 19097
18925: LD_INT 26
18927: DOUBLE
18928: EQUAL
18929: IFTRUE 18933
18931: GO 18944
18933: POP
// bc_type := b_bunker ; 27 :
18934: LD_ADDR_OWVAR 42
18938: PUSH
18939: LD_INT 32
18941: ST_TO_ADDR
18942: GO 19097
18944: LD_INT 27
18946: DOUBLE
18947: EQUAL
18948: IFTRUE 18952
18950: GO 18963
18952: POP
// bc_type := b_turret ; 28 :
18953: LD_ADDR_OWVAR 42
18957: PUSH
18958: LD_INT 33
18960: ST_TO_ADDR
18961: GO 19097
18963: LD_INT 28
18965: DOUBLE
18966: EQUAL
18967: IFTRUE 18971
18969: GO 18982
18971: POP
// bc_type := b_armoury ; 29 :
18972: LD_ADDR_OWVAR 42
18976: PUSH
18977: LD_INT 4
18979: ST_TO_ADDR
18980: GO 19097
18982: LD_INT 29
18984: DOUBLE
18985: EQUAL
18986: IFTRUE 18990
18988: GO 19001
18990: POP
// bc_type := b_barracks ; 30 :
18991: LD_ADDR_OWVAR 42
18995: PUSH
18996: LD_INT 5
18998: ST_TO_ADDR
18999: GO 19097
19001: LD_INT 30
19003: DOUBLE
19004: EQUAL
19005: IFTRUE 19009
19007: GO 19020
19009: POP
// bc_type := b_solar_power ; 31 :
19010: LD_ADDR_OWVAR 42
19014: PUSH
19015: LD_INT 27
19017: ST_TO_ADDR
19018: GO 19097
19020: LD_INT 31
19022: DOUBLE
19023: EQUAL
19024: IFTRUE 19028
19026: GO 19039
19028: POP
// bc_type := b_oil_power ; 32 :
19029: LD_ADDR_OWVAR 42
19033: PUSH
19034: LD_INT 26
19036: ST_TO_ADDR
19037: GO 19097
19039: LD_INT 32
19041: DOUBLE
19042: EQUAL
19043: IFTRUE 19047
19045: GO 19058
19047: POP
// bc_type := b_siberite_power ; 33 :
19048: LD_ADDR_OWVAR 42
19052: PUSH
19053: LD_INT 28
19055: ST_TO_ADDR
19056: GO 19097
19058: LD_INT 33
19060: DOUBLE
19061: EQUAL
19062: IFTRUE 19066
19064: GO 19077
19066: POP
// bc_type := b_oil_mine ; 34 :
19067: LD_ADDR_OWVAR 42
19071: PUSH
19072: LD_INT 29
19074: ST_TO_ADDR
19075: GO 19097
19077: LD_INT 34
19079: DOUBLE
19080: EQUAL
19081: IFTRUE 19085
19083: GO 19096
19085: POP
// bc_type := b_siberite_mine ; end ;
19086: LD_ADDR_OWVAR 42
19090: PUSH
19091: LD_INT 30
19093: ST_TO_ADDR
19094: GO 19097
19096: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
19097: LD_ADDR_VAR 0 8
19101: PUSH
19102: LD_VAR 0 5
19106: PPUSH
19107: LD_VAR 0 6
19111: PPUSH
19112: LD_VAR 0 3
19116: PPUSH
19117: CALL_OW 47
19121: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
19122: LD_OWVAR 42
19126: PUSH
19127: LD_INT 32
19129: PUSH
19130: LD_INT 33
19132: PUSH
19133: EMPTY
19134: LIST
19135: LIST
19136: IN
19137: IFFALSE 19153
// PlaceWeaponTurret ( b , weapon ) ;
19139: LD_VAR 0 8
19143: PPUSH
19144: LD_VAR 0 4
19148: PPUSH
19149: CALL_OW 431
// end ;
19153: LD_VAR 0 7
19157: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
19158: LD_INT 0
19160: PPUSH
19161: PPUSH
19162: PPUSH
19163: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19164: LD_ADDR_VAR 0 4
19168: PUSH
19169: LD_INT 22
19171: PUSH
19172: LD_OWVAR 2
19176: PUSH
19177: EMPTY
19178: LIST
19179: LIST
19180: PUSH
19181: LD_INT 2
19183: PUSH
19184: LD_INT 30
19186: PUSH
19187: LD_INT 0
19189: PUSH
19190: EMPTY
19191: LIST
19192: LIST
19193: PUSH
19194: LD_INT 30
19196: PUSH
19197: LD_INT 1
19199: PUSH
19200: EMPTY
19201: LIST
19202: LIST
19203: PUSH
19204: EMPTY
19205: LIST
19206: LIST
19207: LIST
19208: PUSH
19209: EMPTY
19210: LIST
19211: LIST
19212: PPUSH
19213: CALL_OW 69
19217: ST_TO_ADDR
// if not tmp then
19218: LD_VAR 0 4
19222: NOT
19223: IFFALSE 19227
// exit ;
19225: GO 19286
// for i in tmp do
19227: LD_ADDR_VAR 0 2
19231: PUSH
19232: LD_VAR 0 4
19236: PUSH
19237: FOR_IN
19238: IFFALSE 19284
// for j = 1 to 3 do
19240: LD_ADDR_VAR 0 3
19244: PUSH
19245: DOUBLE
19246: LD_INT 1
19248: DEC
19249: ST_TO_ADDR
19250: LD_INT 3
19252: PUSH
19253: FOR_TO
19254: IFFALSE 19280
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
19256: LD_VAR 0 2
19260: PPUSH
19261: CALL_OW 274
19265: PPUSH
19266: LD_VAR 0 3
19270: PPUSH
19271: LD_INT 99999
19273: PPUSH
19274: CALL_OW 277
19278: GO 19253
19280: POP
19281: POP
19282: GO 19237
19284: POP
19285: POP
// end ;
19286: LD_VAR 0 1
19290: RET
// export function hHackSetLevel10 ; var i , j ; begin
19291: LD_INT 0
19293: PPUSH
19294: PPUSH
19295: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19296: LD_ADDR_VAR 0 2
19300: PUSH
19301: LD_INT 21
19303: PUSH
19304: LD_INT 1
19306: PUSH
19307: EMPTY
19308: LIST
19309: LIST
19310: PPUSH
19311: CALL_OW 69
19315: PUSH
19316: FOR_IN
19317: IFFALSE 19369
// if IsSelected ( i ) then
19319: LD_VAR 0 2
19323: PPUSH
19324: CALL_OW 306
19328: IFFALSE 19367
// begin for j := 1 to 4 do
19330: LD_ADDR_VAR 0 3
19334: PUSH
19335: DOUBLE
19336: LD_INT 1
19338: DEC
19339: ST_TO_ADDR
19340: LD_INT 4
19342: PUSH
19343: FOR_TO
19344: IFFALSE 19365
// SetSkill ( i , j , 10 ) ;
19346: LD_VAR 0 2
19350: PPUSH
19351: LD_VAR 0 3
19355: PPUSH
19356: LD_INT 10
19358: PPUSH
19359: CALL_OW 237
19363: GO 19343
19365: POP
19366: POP
// end ;
19367: GO 19316
19369: POP
19370: POP
// end ;
19371: LD_VAR 0 1
19375: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
19376: LD_INT 0
19378: PPUSH
19379: PPUSH
19380: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
19381: LD_ADDR_VAR 0 2
19385: PUSH
19386: LD_INT 22
19388: PUSH
19389: LD_OWVAR 2
19393: PUSH
19394: EMPTY
19395: LIST
19396: LIST
19397: PUSH
19398: LD_INT 21
19400: PUSH
19401: LD_INT 1
19403: PUSH
19404: EMPTY
19405: LIST
19406: LIST
19407: PUSH
19408: EMPTY
19409: LIST
19410: LIST
19411: PPUSH
19412: CALL_OW 69
19416: PUSH
19417: FOR_IN
19418: IFFALSE 19459
// begin for j := 1 to 4 do
19420: LD_ADDR_VAR 0 3
19424: PUSH
19425: DOUBLE
19426: LD_INT 1
19428: DEC
19429: ST_TO_ADDR
19430: LD_INT 4
19432: PUSH
19433: FOR_TO
19434: IFFALSE 19455
// SetSkill ( i , j , 10 ) ;
19436: LD_VAR 0 2
19440: PPUSH
19441: LD_VAR 0 3
19445: PPUSH
19446: LD_INT 10
19448: PPUSH
19449: CALL_OW 237
19453: GO 19433
19455: POP
19456: POP
// end ;
19457: GO 19417
19459: POP
19460: POP
// end ;
19461: LD_VAR 0 1
19465: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
19466: LD_INT 0
19468: PPUSH
// uc_side := your_side ;
19469: LD_ADDR_OWVAR 20
19473: PUSH
19474: LD_OWVAR 2
19478: ST_TO_ADDR
// uc_nation := nation ;
19479: LD_ADDR_OWVAR 21
19483: PUSH
19484: LD_VAR 0 1
19488: ST_TO_ADDR
// InitHc ;
19489: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
19493: LD_INT 0
19495: PPUSH
19496: LD_VAR 0 2
19500: PPUSH
19501: LD_VAR 0 3
19505: PPUSH
19506: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
19510: LD_VAR 0 4
19514: PPUSH
19515: LD_VAR 0 5
19519: PPUSH
19520: CALL_OW 428
19524: PUSH
19525: LD_INT 0
19527: EQUAL
19528: IFFALSE 19552
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
19530: CALL_OW 44
19534: PPUSH
19535: LD_VAR 0 4
19539: PPUSH
19540: LD_VAR 0 5
19544: PPUSH
19545: LD_INT 1
19547: PPUSH
19548: CALL_OW 48
// end ;
19552: LD_VAR 0 6
19556: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
19557: LD_INT 0
19559: PPUSH
19560: PPUSH
// uc_side := your_side ;
19561: LD_ADDR_OWVAR 20
19565: PUSH
19566: LD_OWVAR 2
19570: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
19571: LD_VAR 0 1
19575: PUSH
19576: LD_INT 1
19578: PUSH
19579: LD_INT 2
19581: PUSH
19582: LD_INT 3
19584: PUSH
19585: LD_INT 4
19587: PUSH
19588: LD_INT 5
19590: PUSH
19591: EMPTY
19592: LIST
19593: LIST
19594: LIST
19595: LIST
19596: LIST
19597: IN
19598: IFFALSE 19610
// uc_nation := nation_american else
19600: LD_ADDR_OWVAR 21
19604: PUSH
19605: LD_INT 1
19607: ST_TO_ADDR
19608: GO 19653
// if chassis in [ 11 , 12 , 13 , 14 ] then
19610: LD_VAR 0 1
19614: PUSH
19615: LD_INT 11
19617: PUSH
19618: LD_INT 12
19620: PUSH
19621: LD_INT 13
19623: PUSH
19624: LD_INT 14
19626: PUSH
19627: EMPTY
19628: LIST
19629: LIST
19630: LIST
19631: LIST
19632: IN
19633: IFFALSE 19645
// uc_nation := nation_arabian else
19635: LD_ADDR_OWVAR 21
19639: PUSH
19640: LD_INT 2
19642: ST_TO_ADDR
19643: GO 19653
// uc_nation := nation_russian ;
19645: LD_ADDR_OWVAR 21
19649: PUSH
19650: LD_INT 3
19652: ST_TO_ADDR
// vc_chassis := chassis ;
19653: LD_ADDR_OWVAR 37
19657: PUSH
19658: LD_VAR 0 1
19662: ST_TO_ADDR
// vc_engine := engine ;
19663: LD_ADDR_OWVAR 39
19667: PUSH
19668: LD_VAR 0 2
19672: ST_TO_ADDR
// vc_control := control ;
19673: LD_ADDR_OWVAR 38
19677: PUSH
19678: LD_VAR 0 3
19682: ST_TO_ADDR
// vc_weapon := weapon ;
19683: LD_ADDR_OWVAR 40
19687: PUSH
19688: LD_VAR 0 4
19692: ST_TO_ADDR
// un := CreateVehicle ;
19693: LD_ADDR_VAR 0 8
19697: PUSH
19698: CALL_OW 45
19702: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
19703: LD_VAR 0 8
19707: PPUSH
19708: LD_INT 0
19710: PPUSH
19711: LD_INT 5
19713: PPUSH
19714: CALL_OW 12
19718: PPUSH
19719: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
19723: LD_VAR 0 8
19727: PPUSH
19728: LD_VAR 0 5
19732: PPUSH
19733: LD_VAR 0 6
19737: PPUSH
19738: LD_INT 1
19740: PPUSH
19741: CALL_OW 48
// end ;
19745: LD_VAR 0 7
19749: RET
// export hInvincible ; every 1 do
19750: GO 19752
19752: DISABLE
// hInvincible := [ ] ;
19753: LD_ADDR_EXP 81
19757: PUSH
19758: EMPTY
19759: ST_TO_ADDR
19760: END
// every 10 do var i ;
19761: GO 19763
19763: DISABLE
19764: LD_INT 0
19766: PPUSH
// begin enable ;
19767: ENABLE
// if not hInvincible then
19768: LD_EXP 81
19772: NOT
19773: IFFALSE 19777
// exit ;
19775: GO 19821
// for i in hInvincible do
19777: LD_ADDR_VAR 0 1
19781: PUSH
19782: LD_EXP 81
19786: PUSH
19787: FOR_IN
19788: IFFALSE 19819
// if GetLives ( i ) < 1000 then
19790: LD_VAR 0 1
19794: PPUSH
19795: CALL_OW 256
19799: PUSH
19800: LD_INT 1000
19802: LESS
19803: IFFALSE 19817
// SetLives ( i , 1000 ) ;
19805: LD_VAR 0 1
19809: PPUSH
19810: LD_INT 1000
19812: PPUSH
19813: CALL_OW 234
19817: GO 19787
19819: POP
19820: POP
// end ;
19821: PPOPN 1
19823: END
// export function hHackInvincible ; var i ; begin
19824: LD_INT 0
19826: PPUSH
19827: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
19828: LD_ADDR_VAR 0 2
19832: PUSH
19833: LD_INT 2
19835: PUSH
19836: LD_INT 21
19838: PUSH
19839: LD_INT 1
19841: PUSH
19842: EMPTY
19843: LIST
19844: LIST
19845: PUSH
19846: LD_INT 21
19848: PUSH
19849: LD_INT 2
19851: PUSH
19852: EMPTY
19853: LIST
19854: LIST
19855: PUSH
19856: EMPTY
19857: LIST
19858: LIST
19859: LIST
19860: PPUSH
19861: CALL_OW 69
19865: PUSH
19866: FOR_IN
19867: IFFALSE 19928
// if IsSelected ( i ) then
19869: LD_VAR 0 2
19873: PPUSH
19874: CALL_OW 306
19878: IFFALSE 19926
// begin if i in hInvincible then
19880: LD_VAR 0 2
19884: PUSH
19885: LD_EXP 81
19889: IN
19890: IFFALSE 19910
// hInvincible := hInvincible diff i else
19892: LD_ADDR_EXP 81
19896: PUSH
19897: LD_EXP 81
19901: PUSH
19902: LD_VAR 0 2
19906: DIFF
19907: ST_TO_ADDR
19908: GO 19926
// hInvincible := hInvincible union i ;
19910: LD_ADDR_EXP 81
19914: PUSH
19915: LD_EXP 81
19919: PUSH
19920: LD_VAR 0 2
19924: UNION
19925: ST_TO_ADDR
// end ;
19926: GO 19866
19928: POP
19929: POP
// end ;
19930: LD_VAR 0 1
19934: RET
// export function hHackInvisible ; var i , j ; begin
19935: LD_INT 0
19937: PPUSH
19938: PPUSH
19939: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19940: LD_ADDR_VAR 0 2
19944: PUSH
19945: LD_INT 21
19947: PUSH
19948: LD_INT 1
19950: PUSH
19951: EMPTY
19952: LIST
19953: LIST
19954: PPUSH
19955: CALL_OW 69
19959: PUSH
19960: FOR_IN
19961: IFFALSE 19985
// if IsSelected ( i ) then
19963: LD_VAR 0 2
19967: PPUSH
19968: CALL_OW 306
19972: IFFALSE 19983
// ComForceInvisible ( i ) ;
19974: LD_VAR 0 2
19978: PPUSH
19979: CALL_OW 496
19983: GO 19960
19985: POP
19986: POP
// end ;
19987: LD_VAR 0 1
19991: RET
// export function hHackChangeYourSide ; begin
19992: LD_INT 0
19994: PPUSH
// if your_side = 8 then
19995: LD_OWVAR 2
19999: PUSH
20000: LD_INT 8
20002: EQUAL
20003: IFFALSE 20015
// your_side := 0 else
20005: LD_ADDR_OWVAR 2
20009: PUSH
20010: LD_INT 0
20012: ST_TO_ADDR
20013: GO 20029
// your_side := your_side + 1 ;
20015: LD_ADDR_OWVAR 2
20019: PUSH
20020: LD_OWVAR 2
20024: PUSH
20025: LD_INT 1
20027: PLUS
20028: ST_TO_ADDR
// end ;
20029: LD_VAR 0 1
20033: RET
// export function hHackChangeUnitSide ; var i , j ; begin
20034: LD_INT 0
20036: PPUSH
20037: PPUSH
20038: PPUSH
// for i in all_units do
20039: LD_ADDR_VAR 0 2
20043: PUSH
20044: LD_OWVAR 3
20048: PUSH
20049: FOR_IN
20050: IFFALSE 20128
// if IsSelected ( i ) then
20052: LD_VAR 0 2
20056: PPUSH
20057: CALL_OW 306
20061: IFFALSE 20126
// begin j := GetSide ( i ) ;
20063: LD_ADDR_VAR 0 3
20067: PUSH
20068: LD_VAR 0 2
20072: PPUSH
20073: CALL_OW 255
20077: ST_TO_ADDR
// if j = 8 then
20078: LD_VAR 0 3
20082: PUSH
20083: LD_INT 8
20085: EQUAL
20086: IFFALSE 20098
// j := 0 else
20088: LD_ADDR_VAR 0 3
20092: PUSH
20093: LD_INT 0
20095: ST_TO_ADDR
20096: GO 20112
// j := j + 1 ;
20098: LD_ADDR_VAR 0 3
20102: PUSH
20103: LD_VAR 0 3
20107: PUSH
20108: LD_INT 1
20110: PLUS
20111: ST_TO_ADDR
// SetSide ( i , j ) ;
20112: LD_VAR 0 2
20116: PPUSH
20117: LD_VAR 0 3
20121: PPUSH
20122: CALL_OW 235
// end ;
20126: GO 20049
20128: POP
20129: POP
// end ;
20130: LD_VAR 0 1
20134: RET
// export function hHackFog ; begin
20135: LD_INT 0
20137: PPUSH
// FogOff ( true ) ;
20138: LD_INT 1
20140: PPUSH
20141: CALL_OW 344
// end ;
20145: LD_VAR 0 1
20149: RET
// export function hHackTeleport ( unit , x , y ) ; begin
20150: LD_INT 0
20152: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
20153: LD_VAR 0 1
20157: PPUSH
20158: LD_VAR 0 2
20162: PPUSH
20163: LD_VAR 0 3
20167: PPUSH
20168: LD_INT 1
20170: PPUSH
20171: LD_INT 1
20173: PPUSH
20174: CALL_OW 483
// CenterOnXY ( x , y ) ;
20178: LD_VAR 0 2
20182: PPUSH
20183: LD_VAR 0 3
20187: PPUSH
20188: CALL_OW 84
// end ; end_of_file
20192: LD_VAR 0 4
20196: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
20197: LD_INT 0
20199: PPUSH
20200: PPUSH
20201: PPUSH
20202: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
20203: LD_VAR 0 1
20207: PPUSH
20208: CALL_OW 264
20212: PUSH
20213: LD_EXP 97
20217: EQUAL
20218: IFFALSE 20290
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
20220: LD_INT 68
20222: PPUSH
20223: LD_VAR 0 1
20227: PPUSH
20228: CALL_OW 255
20232: PPUSH
20233: CALL_OW 321
20237: PUSH
20238: LD_INT 2
20240: EQUAL
20241: IFFALSE 20253
// eff := 70 else
20243: LD_ADDR_VAR 0 4
20247: PUSH
20248: LD_INT 70
20250: ST_TO_ADDR
20251: GO 20261
// eff := 30 ;
20253: LD_ADDR_VAR 0 4
20257: PUSH
20258: LD_INT 30
20260: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
20261: LD_VAR 0 1
20265: PPUSH
20266: CALL_OW 250
20270: PPUSH
20271: LD_VAR 0 1
20275: PPUSH
20276: CALL_OW 251
20280: PPUSH
20281: LD_VAR 0 4
20285: PPUSH
20286: CALL_OW 495
// end ; end ;
20290: LD_VAR 0 2
20294: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
20295: LD_INT 0
20297: PPUSH
// end ;
20298: LD_VAR 0 4
20302: RET
// export function SOS_Command ( cmd ) ; begin
20303: LD_INT 0
20305: PPUSH
// end ;
20306: LD_VAR 0 2
20310: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
20311: LD_INT 0
20313: PPUSH
// end ;
20314: LD_VAR 0 6
20318: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
20319: LD_INT 0
20321: PPUSH
20322: PPUSH
// if not vehicle or not factory then
20323: LD_VAR 0 1
20327: NOT
20328: PUSH
20329: LD_VAR 0 2
20333: NOT
20334: OR
20335: IFFALSE 20339
// exit ;
20337: GO 20570
// if factoryWaypoints >= factory then
20339: LD_EXP 82
20343: PUSH
20344: LD_VAR 0 2
20348: GREATEREQUAL
20349: IFFALSE 20570
// if factoryWaypoints [ factory ] then
20351: LD_EXP 82
20355: PUSH
20356: LD_VAR 0 2
20360: ARRAY
20361: IFFALSE 20570
// begin if GetControl ( vehicle ) = control_manual then
20363: LD_VAR 0 1
20367: PPUSH
20368: CALL_OW 263
20372: PUSH
20373: LD_INT 1
20375: EQUAL
20376: IFFALSE 20457
// begin driver := IsDrivenBy ( vehicle ) ;
20378: LD_ADDR_VAR 0 4
20382: PUSH
20383: LD_VAR 0 1
20387: PPUSH
20388: CALL_OW 311
20392: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20393: LD_VAR 0 4
20397: PPUSH
20398: LD_EXP 82
20402: PUSH
20403: LD_VAR 0 2
20407: ARRAY
20408: PUSH
20409: LD_INT 3
20411: ARRAY
20412: PPUSH
20413: LD_EXP 82
20417: PUSH
20418: LD_VAR 0 2
20422: ARRAY
20423: PUSH
20424: LD_INT 4
20426: ARRAY
20427: PPUSH
20428: CALL_OW 171
// AddComExitVehicle ( driver ) ;
20432: LD_VAR 0 4
20436: PPUSH
20437: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
20441: LD_VAR 0 4
20445: PPUSH
20446: LD_VAR 0 2
20450: PPUSH
20451: CALL_OW 180
// end else
20455: GO 20570
// if GetControl ( vehicle ) = control_remote then
20457: LD_VAR 0 1
20461: PPUSH
20462: CALL_OW 263
20466: PUSH
20467: LD_INT 2
20469: EQUAL
20470: IFFALSE 20531
// begin wait ( 0 0$2 ) ;
20472: LD_INT 70
20474: PPUSH
20475: CALL_OW 67
// if Connect ( vehicle ) then
20479: LD_VAR 0 1
20483: PPUSH
20484: CALL 32962 0 1
20488: IFFALSE 20529
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20490: LD_VAR 0 1
20494: PPUSH
20495: LD_EXP 82
20499: PUSH
20500: LD_VAR 0 2
20504: ARRAY
20505: PUSH
20506: LD_INT 3
20508: ARRAY
20509: PPUSH
20510: LD_EXP 82
20514: PUSH
20515: LD_VAR 0 2
20519: ARRAY
20520: PUSH
20521: LD_INT 4
20523: ARRAY
20524: PPUSH
20525: CALL_OW 171
// end else
20529: GO 20570
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20531: LD_VAR 0 1
20535: PPUSH
20536: LD_EXP 82
20540: PUSH
20541: LD_VAR 0 2
20545: ARRAY
20546: PUSH
20547: LD_INT 3
20549: ARRAY
20550: PPUSH
20551: LD_EXP 82
20555: PUSH
20556: LD_VAR 0 2
20560: ARRAY
20561: PUSH
20562: LD_INT 4
20564: ARRAY
20565: PPUSH
20566: CALL_OW 171
// end ; end ;
20570: LD_VAR 0 3
20574: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
20575: LD_INT 0
20577: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
20578: LD_VAR 0 1
20582: PUSH
20583: LD_INT 250
20585: EQUAL
20586: PUSH
20587: LD_VAR 0 2
20591: PPUSH
20592: CALL_OW 264
20596: PUSH
20597: LD_EXP 100
20601: EQUAL
20602: AND
20603: IFFALSE 20624
// MinerPlaceMine ( unit , x , y ) ;
20605: LD_VAR 0 2
20609: PPUSH
20610: LD_VAR 0 4
20614: PPUSH
20615: LD_VAR 0 5
20619: PPUSH
20620: CALL 23352 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
20624: LD_VAR 0 1
20628: PUSH
20629: LD_INT 251
20631: EQUAL
20632: PUSH
20633: LD_VAR 0 2
20637: PPUSH
20638: CALL_OW 264
20642: PUSH
20643: LD_EXP 100
20647: EQUAL
20648: AND
20649: IFFALSE 20670
// MinerDetonateMine ( unit , x , y ) ;
20651: LD_VAR 0 2
20655: PPUSH
20656: LD_VAR 0 4
20660: PPUSH
20661: LD_VAR 0 5
20665: PPUSH
20666: CALL 23629 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
20670: LD_VAR 0 1
20674: PUSH
20675: LD_INT 252
20677: EQUAL
20678: PUSH
20679: LD_VAR 0 2
20683: PPUSH
20684: CALL_OW 264
20688: PUSH
20689: LD_EXP 100
20693: EQUAL
20694: AND
20695: IFFALSE 20716
// MinerCreateMinefield ( unit , x , y ) ;
20697: LD_VAR 0 2
20701: PPUSH
20702: LD_VAR 0 4
20706: PPUSH
20707: LD_VAR 0 5
20711: PPUSH
20712: CALL 24046 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
20716: LD_VAR 0 1
20720: PUSH
20721: LD_INT 253
20723: EQUAL
20724: PUSH
20725: LD_VAR 0 2
20729: PPUSH
20730: CALL_OW 257
20734: PUSH
20735: LD_INT 5
20737: EQUAL
20738: AND
20739: IFFALSE 20760
// ComBinocular ( unit , x , y ) ;
20741: LD_VAR 0 2
20745: PPUSH
20746: LD_VAR 0 4
20750: PPUSH
20751: LD_VAR 0 5
20755: PPUSH
20756: CALL 24417 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
20760: LD_VAR 0 1
20764: PUSH
20765: LD_INT 254
20767: EQUAL
20768: PUSH
20769: LD_VAR 0 2
20773: PPUSH
20774: CALL_OW 264
20778: PUSH
20779: LD_EXP 95
20783: EQUAL
20784: AND
20785: PUSH
20786: LD_VAR 0 3
20790: PPUSH
20791: CALL_OW 263
20795: PUSH
20796: LD_INT 3
20798: EQUAL
20799: AND
20800: IFFALSE 20816
// HackDestroyVehicle ( unit , selectedUnit ) ;
20802: LD_VAR 0 2
20806: PPUSH
20807: LD_VAR 0 3
20811: PPUSH
20812: CALL 22712 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
20816: LD_VAR 0 1
20820: PUSH
20821: LD_INT 255
20823: EQUAL
20824: PUSH
20825: LD_VAR 0 2
20829: PPUSH
20830: CALL_OW 264
20834: PUSH
20835: LD_INT 14
20837: PUSH
20838: LD_INT 53
20840: PUSH
20841: EMPTY
20842: LIST
20843: LIST
20844: IN
20845: AND
20846: PUSH
20847: LD_VAR 0 4
20851: PPUSH
20852: LD_VAR 0 5
20856: PPUSH
20857: CALL_OW 488
20861: AND
20862: IFFALSE 20886
// CutTreeXYR ( unit , x , y , 12 ) ;
20864: LD_VAR 0 2
20868: PPUSH
20869: LD_VAR 0 4
20873: PPUSH
20874: LD_VAR 0 5
20878: PPUSH
20879: LD_INT 12
20881: PPUSH
20882: CALL 21278 0 4
// if cmd = 256 then
20886: LD_VAR 0 1
20890: PUSH
20891: LD_INT 256
20893: EQUAL
20894: IFFALSE 20915
// SetFactoryWaypoint ( unit , x , y ) ;
20896: LD_VAR 0 2
20900: PPUSH
20901: LD_VAR 0 4
20905: PPUSH
20906: LD_VAR 0 5
20910: PPUSH
20911: CALL 20920 0 3
// end ;
20915: LD_VAR 0 6
20919: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
20920: LD_INT 0
20922: PPUSH
20923: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
20924: LD_VAR 0 1
20928: NOT
20929: PUSH
20930: LD_VAR 0 2
20934: PPUSH
20935: LD_VAR 0 3
20939: PPUSH
20940: CALL_OW 488
20944: NOT
20945: OR
20946: PUSH
20947: LD_VAR 0 1
20951: PPUSH
20952: CALL_OW 266
20956: PUSH
20957: LD_INT 3
20959: NONEQUAL
20960: PUSH
20961: LD_VAR 0 1
20965: PPUSH
20966: CALL_OW 247
20970: PUSH
20971: LD_INT 1
20973: EQUAL
20974: NOT
20975: AND
20976: OR
20977: IFFALSE 20981
// exit ;
20979: GO 21130
// if GetType ( factory ) = unit_human then
20981: LD_VAR 0 1
20985: PPUSH
20986: CALL_OW 247
20990: PUSH
20991: LD_INT 1
20993: EQUAL
20994: IFFALSE 21011
// factory := IsInUnit ( factory ) ;
20996: LD_ADDR_VAR 0 1
21000: PUSH
21001: LD_VAR 0 1
21005: PPUSH
21006: CALL_OW 310
21010: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
21011: LD_VAR 0 1
21015: PPUSH
21016: CALL_OW 266
21020: PUSH
21021: LD_INT 3
21023: NONEQUAL
21024: IFFALSE 21028
// exit ;
21026: GO 21130
// if HexInfo ( x , y ) = factory then
21028: LD_VAR 0 2
21032: PPUSH
21033: LD_VAR 0 3
21037: PPUSH
21038: CALL_OW 428
21042: PUSH
21043: LD_VAR 0 1
21047: EQUAL
21048: IFFALSE 21075
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
21050: LD_ADDR_EXP 82
21054: PUSH
21055: LD_EXP 82
21059: PPUSH
21060: LD_VAR 0 1
21064: PPUSH
21065: LD_INT 0
21067: PPUSH
21068: CALL_OW 1
21072: ST_TO_ADDR
21073: GO 21126
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
21075: LD_ADDR_EXP 82
21079: PUSH
21080: LD_EXP 82
21084: PPUSH
21085: LD_VAR 0 1
21089: PPUSH
21090: LD_VAR 0 1
21094: PPUSH
21095: CALL_OW 255
21099: PUSH
21100: LD_VAR 0 1
21104: PUSH
21105: LD_VAR 0 2
21109: PUSH
21110: LD_VAR 0 3
21114: PUSH
21115: EMPTY
21116: LIST
21117: LIST
21118: LIST
21119: LIST
21120: PPUSH
21121: CALL_OW 1
21125: ST_TO_ADDR
// UpdateFactoryWaypoints ;
21126: CALL 21135 0 0
// end ;
21130: LD_VAR 0 4
21134: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
21135: LD_INT 0
21137: PPUSH
21138: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
21139: LD_STRING resetFactoryWaypoint();
21141: PPUSH
21142: CALL_OW 559
// if factoryWaypoints then
21146: LD_EXP 82
21150: IFFALSE 21273
// begin for i := 1 to factoryWaypoints do
21152: LD_ADDR_VAR 0 2
21156: PUSH
21157: DOUBLE
21158: LD_INT 1
21160: DEC
21161: ST_TO_ADDR
21162: LD_EXP 82
21166: PUSH
21167: FOR_TO
21168: IFFALSE 21271
// if factoryWaypoints [ i ] then
21170: LD_EXP 82
21174: PUSH
21175: LD_VAR 0 2
21179: ARRAY
21180: IFFALSE 21269
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
21182: LD_STRING setFactoryWaypointXY(
21184: PUSH
21185: LD_EXP 82
21189: PUSH
21190: LD_VAR 0 2
21194: ARRAY
21195: PUSH
21196: LD_INT 1
21198: ARRAY
21199: STR
21200: PUSH
21201: LD_STRING ,
21203: STR
21204: PUSH
21205: LD_EXP 82
21209: PUSH
21210: LD_VAR 0 2
21214: ARRAY
21215: PUSH
21216: LD_INT 2
21218: ARRAY
21219: STR
21220: PUSH
21221: LD_STRING ,
21223: STR
21224: PUSH
21225: LD_EXP 82
21229: PUSH
21230: LD_VAR 0 2
21234: ARRAY
21235: PUSH
21236: LD_INT 3
21238: ARRAY
21239: STR
21240: PUSH
21241: LD_STRING ,
21243: STR
21244: PUSH
21245: LD_EXP 82
21249: PUSH
21250: LD_VAR 0 2
21254: ARRAY
21255: PUSH
21256: LD_INT 4
21258: ARRAY
21259: STR
21260: PUSH
21261: LD_STRING )
21263: STR
21264: PPUSH
21265: CALL_OW 559
21269: GO 21167
21271: POP
21272: POP
// end ; end ;
21273: LD_VAR 0 1
21277: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
21278: LD_INT 0
21280: PPUSH
21281: PPUSH
21282: PPUSH
21283: PPUSH
21284: PPUSH
21285: PPUSH
21286: PPUSH
21287: PPUSH
21288: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
21289: LD_VAR 0 1
21293: NOT
21294: PUSH
21295: LD_VAR 0 2
21299: PPUSH
21300: LD_VAR 0 3
21304: PPUSH
21305: CALL_OW 488
21309: NOT
21310: OR
21311: PUSH
21312: LD_VAR 0 4
21316: NOT
21317: OR
21318: IFFALSE 21322
// exit ;
21320: GO 21662
// list := [ ] ;
21322: LD_ADDR_VAR 0 13
21326: PUSH
21327: EMPTY
21328: ST_TO_ADDR
// if x - r < 0 then
21329: LD_VAR 0 2
21333: PUSH
21334: LD_VAR 0 4
21338: MINUS
21339: PUSH
21340: LD_INT 0
21342: LESS
21343: IFFALSE 21355
// min_x := 0 else
21345: LD_ADDR_VAR 0 7
21349: PUSH
21350: LD_INT 0
21352: ST_TO_ADDR
21353: GO 21371
// min_x := x - r ;
21355: LD_ADDR_VAR 0 7
21359: PUSH
21360: LD_VAR 0 2
21364: PUSH
21365: LD_VAR 0 4
21369: MINUS
21370: ST_TO_ADDR
// if y - r < 0 then
21371: LD_VAR 0 3
21375: PUSH
21376: LD_VAR 0 4
21380: MINUS
21381: PUSH
21382: LD_INT 0
21384: LESS
21385: IFFALSE 21397
// min_y := 0 else
21387: LD_ADDR_VAR 0 8
21391: PUSH
21392: LD_INT 0
21394: ST_TO_ADDR
21395: GO 21413
// min_y := y - r ;
21397: LD_ADDR_VAR 0 8
21401: PUSH
21402: LD_VAR 0 3
21406: PUSH
21407: LD_VAR 0 4
21411: MINUS
21412: ST_TO_ADDR
// max_x := x + r ;
21413: LD_ADDR_VAR 0 9
21417: PUSH
21418: LD_VAR 0 2
21422: PUSH
21423: LD_VAR 0 4
21427: PLUS
21428: ST_TO_ADDR
// max_y := y + r ;
21429: LD_ADDR_VAR 0 10
21433: PUSH
21434: LD_VAR 0 3
21438: PUSH
21439: LD_VAR 0 4
21443: PLUS
21444: ST_TO_ADDR
// for _x = min_x to max_x do
21445: LD_ADDR_VAR 0 11
21449: PUSH
21450: DOUBLE
21451: LD_VAR 0 7
21455: DEC
21456: ST_TO_ADDR
21457: LD_VAR 0 9
21461: PUSH
21462: FOR_TO
21463: IFFALSE 21580
// for _y = min_y to max_y do
21465: LD_ADDR_VAR 0 12
21469: PUSH
21470: DOUBLE
21471: LD_VAR 0 8
21475: DEC
21476: ST_TO_ADDR
21477: LD_VAR 0 10
21481: PUSH
21482: FOR_TO
21483: IFFALSE 21576
// begin if not ValidHex ( _x , _y ) then
21485: LD_VAR 0 11
21489: PPUSH
21490: LD_VAR 0 12
21494: PPUSH
21495: CALL_OW 488
21499: NOT
21500: IFFALSE 21504
// continue ;
21502: GO 21482
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
21504: LD_VAR 0 11
21508: PPUSH
21509: LD_VAR 0 12
21513: PPUSH
21514: CALL_OW 351
21518: PUSH
21519: LD_VAR 0 11
21523: PPUSH
21524: LD_VAR 0 12
21528: PPUSH
21529: CALL_OW 554
21533: AND
21534: IFFALSE 21574
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
21536: LD_ADDR_VAR 0 13
21540: PUSH
21541: LD_VAR 0 13
21545: PPUSH
21546: LD_VAR 0 13
21550: PUSH
21551: LD_INT 1
21553: PLUS
21554: PPUSH
21555: LD_VAR 0 11
21559: PUSH
21560: LD_VAR 0 12
21564: PUSH
21565: EMPTY
21566: LIST
21567: LIST
21568: PPUSH
21569: CALL_OW 2
21573: ST_TO_ADDR
// end ;
21574: GO 21482
21576: POP
21577: POP
21578: GO 21462
21580: POP
21581: POP
// if not list then
21582: LD_VAR 0 13
21586: NOT
21587: IFFALSE 21591
// exit ;
21589: GO 21662
// for i in list do
21591: LD_ADDR_VAR 0 6
21595: PUSH
21596: LD_VAR 0 13
21600: PUSH
21601: FOR_IN
21602: IFFALSE 21660
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
21604: LD_VAR 0 1
21608: PPUSH
21609: LD_STRING M
21611: PUSH
21612: LD_VAR 0 6
21616: PUSH
21617: LD_INT 1
21619: ARRAY
21620: PUSH
21621: LD_VAR 0 6
21625: PUSH
21626: LD_INT 2
21628: ARRAY
21629: PUSH
21630: LD_INT 0
21632: PUSH
21633: LD_INT 0
21635: PUSH
21636: LD_INT 0
21638: PUSH
21639: LD_INT 0
21641: PUSH
21642: EMPTY
21643: LIST
21644: LIST
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: PUSH
21651: EMPTY
21652: LIST
21653: PPUSH
21654: CALL_OW 447
21658: GO 21601
21660: POP
21661: POP
// end ;
21662: LD_VAR 0 5
21666: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
21667: LD_EXP 83
21671: NOT
21672: IFFALSE 21722
21674: GO 21676
21676: DISABLE
// begin initHack := true ;
21677: LD_ADDR_EXP 83
21681: PUSH
21682: LD_INT 1
21684: ST_TO_ADDR
// hackTanks := [ ] ;
21685: LD_ADDR_EXP 84
21689: PUSH
21690: EMPTY
21691: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
21692: LD_ADDR_EXP 85
21696: PUSH
21697: EMPTY
21698: ST_TO_ADDR
// hackLimit := 3 ;
21699: LD_ADDR_EXP 86
21703: PUSH
21704: LD_INT 3
21706: ST_TO_ADDR
// hackDist := 12 ;
21707: LD_ADDR_EXP 87
21711: PUSH
21712: LD_INT 12
21714: ST_TO_ADDR
// hackCounter := [ ] ;
21715: LD_ADDR_EXP 88
21719: PUSH
21720: EMPTY
21721: ST_TO_ADDR
// end ;
21722: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
21723: LD_EXP 83
21727: PUSH
21728: LD_INT 34
21730: PUSH
21731: LD_EXP 95
21735: PUSH
21736: EMPTY
21737: LIST
21738: LIST
21739: PPUSH
21740: CALL_OW 69
21744: AND
21745: IFFALSE 22000
21747: GO 21749
21749: DISABLE
21750: LD_INT 0
21752: PPUSH
21753: PPUSH
// begin enable ;
21754: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
21755: LD_ADDR_VAR 0 1
21759: PUSH
21760: LD_INT 34
21762: PUSH
21763: LD_EXP 95
21767: PUSH
21768: EMPTY
21769: LIST
21770: LIST
21771: PPUSH
21772: CALL_OW 69
21776: PUSH
21777: FOR_IN
21778: IFFALSE 21998
// begin if not i in hackTanks then
21780: LD_VAR 0 1
21784: PUSH
21785: LD_EXP 84
21789: IN
21790: NOT
21791: IFFALSE 21874
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
21793: LD_ADDR_EXP 84
21797: PUSH
21798: LD_EXP 84
21802: PPUSH
21803: LD_EXP 84
21807: PUSH
21808: LD_INT 1
21810: PLUS
21811: PPUSH
21812: LD_VAR 0 1
21816: PPUSH
21817: CALL_OW 1
21821: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
21822: LD_ADDR_EXP 85
21826: PUSH
21827: LD_EXP 85
21831: PPUSH
21832: LD_EXP 85
21836: PUSH
21837: LD_INT 1
21839: PLUS
21840: PPUSH
21841: EMPTY
21842: PPUSH
21843: CALL_OW 1
21847: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
21848: LD_ADDR_EXP 88
21852: PUSH
21853: LD_EXP 88
21857: PPUSH
21858: LD_EXP 88
21862: PUSH
21863: LD_INT 1
21865: PLUS
21866: PPUSH
21867: EMPTY
21868: PPUSH
21869: CALL_OW 1
21873: ST_TO_ADDR
// end ; if not IsOk ( i ) then
21874: LD_VAR 0 1
21878: PPUSH
21879: CALL_OW 302
21883: NOT
21884: IFFALSE 21897
// begin HackUnlinkAll ( i ) ;
21886: LD_VAR 0 1
21890: PPUSH
21891: CALL 22003 0 1
// continue ;
21895: GO 21777
// end ; HackCheckCapturedStatus ( i ) ;
21897: LD_VAR 0 1
21901: PPUSH
21902: CALL 22446 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
21906: LD_ADDR_VAR 0 2
21910: PUSH
21911: LD_INT 81
21913: PUSH
21914: LD_VAR 0 1
21918: PPUSH
21919: CALL_OW 255
21923: PUSH
21924: EMPTY
21925: LIST
21926: LIST
21927: PUSH
21928: LD_INT 33
21930: PUSH
21931: LD_INT 3
21933: PUSH
21934: EMPTY
21935: LIST
21936: LIST
21937: PUSH
21938: LD_INT 91
21940: PUSH
21941: LD_VAR 0 1
21945: PUSH
21946: LD_EXP 87
21950: PUSH
21951: EMPTY
21952: LIST
21953: LIST
21954: LIST
21955: PUSH
21956: LD_INT 50
21958: PUSH
21959: EMPTY
21960: LIST
21961: PUSH
21962: EMPTY
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: PPUSH
21968: CALL_OW 69
21972: ST_TO_ADDR
// if not tmp then
21973: LD_VAR 0 2
21977: NOT
21978: IFFALSE 21982
// continue ;
21980: GO 21777
// HackLink ( i , tmp ) ;
21982: LD_VAR 0 1
21986: PPUSH
21987: LD_VAR 0 2
21991: PPUSH
21992: CALL 22139 0 2
// end ;
21996: GO 21777
21998: POP
21999: POP
// end ;
22000: PPOPN 2
22002: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
22003: LD_INT 0
22005: PPUSH
22006: PPUSH
22007: PPUSH
// if not hack in hackTanks then
22008: LD_VAR 0 1
22012: PUSH
22013: LD_EXP 84
22017: IN
22018: NOT
22019: IFFALSE 22023
// exit ;
22021: GO 22134
// index := GetElementIndex ( hackTanks , hack ) ;
22023: LD_ADDR_VAR 0 4
22027: PUSH
22028: LD_EXP 84
22032: PPUSH
22033: LD_VAR 0 1
22037: PPUSH
22038: CALL 29776 0 2
22042: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
22043: LD_EXP 85
22047: PUSH
22048: LD_VAR 0 4
22052: ARRAY
22053: IFFALSE 22134
// begin for i in hackTanksCaptured [ index ] do
22055: LD_ADDR_VAR 0 3
22059: PUSH
22060: LD_EXP 85
22064: PUSH
22065: LD_VAR 0 4
22069: ARRAY
22070: PUSH
22071: FOR_IN
22072: IFFALSE 22098
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
22074: LD_VAR 0 3
22078: PUSH
22079: LD_INT 1
22081: ARRAY
22082: PPUSH
22083: LD_VAR 0 3
22087: PUSH
22088: LD_INT 2
22090: ARRAY
22091: PPUSH
22092: CALL_OW 235
22096: GO 22071
22098: POP
22099: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
22100: LD_ADDR_EXP 85
22104: PUSH
22105: LD_EXP 85
22109: PPUSH
22110: LD_VAR 0 4
22114: PPUSH
22115: EMPTY
22116: PPUSH
22117: CALL_OW 1
22121: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
22122: LD_VAR 0 1
22126: PPUSH
22127: LD_INT 0
22129: PPUSH
22130: CALL_OW 505
// end ; end ;
22134: LD_VAR 0 2
22138: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
22139: LD_INT 0
22141: PPUSH
22142: PPUSH
22143: PPUSH
// if not hack in hackTanks or not vehicles then
22144: LD_VAR 0 1
22148: PUSH
22149: LD_EXP 84
22153: IN
22154: NOT
22155: PUSH
22156: LD_VAR 0 2
22160: NOT
22161: OR
22162: IFFALSE 22166
// exit ;
22164: GO 22441
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
22166: LD_ADDR_VAR 0 2
22170: PUSH
22171: LD_VAR 0 1
22175: PPUSH
22176: LD_VAR 0 2
22180: PPUSH
22181: LD_INT 1
22183: PPUSH
22184: LD_INT 1
22186: PPUSH
22187: CALL 30426 0 4
22191: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
22192: LD_ADDR_VAR 0 5
22196: PUSH
22197: LD_EXP 84
22201: PPUSH
22202: LD_VAR 0 1
22206: PPUSH
22207: CALL 29776 0 2
22211: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
22212: LD_EXP 85
22216: PUSH
22217: LD_VAR 0 5
22221: ARRAY
22222: PUSH
22223: LD_EXP 86
22227: LESS
22228: IFFALSE 22417
// begin for i := 1 to vehicles do
22230: LD_ADDR_VAR 0 4
22234: PUSH
22235: DOUBLE
22236: LD_INT 1
22238: DEC
22239: ST_TO_ADDR
22240: LD_VAR 0 2
22244: PUSH
22245: FOR_TO
22246: IFFALSE 22415
// begin if hackTanksCaptured [ index ] = hackLimit then
22248: LD_EXP 85
22252: PUSH
22253: LD_VAR 0 5
22257: ARRAY
22258: PUSH
22259: LD_EXP 86
22263: EQUAL
22264: IFFALSE 22268
// break ;
22266: GO 22415
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
22268: LD_ADDR_EXP 88
22272: PUSH
22273: LD_EXP 88
22277: PPUSH
22278: LD_VAR 0 5
22282: PPUSH
22283: LD_EXP 88
22287: PUSH
22288: LD_VAR 0 5
22292: ARRAY
22293: PUSH
22294: LD_INT 1
22296: PLUS
22297: PPUSH
22298: CALL_OW 1
22302: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
22303: LD_ADDR_EXP 85
22307: PUSH
22308: LD_EXP 85
22312: PPUSH
22313: LD_VAR 0 5
22317: PUSH
22318: LD_EXP 85
22322: PUSH
22323: LD_VAR 0 5
22327: ARRAY
22328: PUSH
22329: LD_INT 1
22331: PLUS
22332: PUSH
22333: EMPTY
22334: LIST
22335: LIST
22336: PPUSH
22337: LD_VAR 0 2
22341: PUSH
22342: LD_VAR 0 4
22346: ARRAY
22347: PUSH
22348: LD_VAR 0 2
22352: PUSH
22353: LD_VAR 0 4
22357: ARRAY
22358: PPUSH
22359: CALL_OW 255
22363: PUSH
22364: EMPTY
22365: LIST
22366: LIST
22367: PPUSH
22368: CALL 29991 0 3
22372: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
22373: LD_VAR 0 2
22377: PUSH
22378: LD_VAR 0 4
22382: ARRAY
22383: PPUSH
22384: LD_VAR 0 1
22388: PPUSH
22389: CALL_OW 255
22393: PPUSH
22394: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
22398: LD_VAR 0 2
22402: PUSH
22403: LD_VAR 0 4
22407: ARRAY
22408: PPUSH
22409: CALL_OW 141
// end ;
22413: GO 22245
22415: POP
22416: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22417: LD_VAR 0 1
22421: PPUSH
22422: LD_EXP 85
22426: PUSH
22427: LD_VAR 0 5
22431: ARRAY
22432: PUSH
22433: LD_INT 0
22435: PLUS
22436: PPUSH
22437: CALL_OW 505
// end ;
22441: LD_VAR 0 3
22445: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
22446: LD_INT 0
22448: PPUSH
22449: PPUSH
22450: PPUSH
22451: PPUSH
// if not hack in hackTanks then
22452: LD_VAR 0 1
22456: PUSH
22457: LD_EXP 84
22461: IN
22462: NOT
22463: IFFALSE 22467
// exit ;
22465: GO 22707
// index := GetElementIndex ( hackTanks , hack ) ;
22467: LD_ADDR_VAR 0 4
22471: PUSH
22472: LD_EXP 84
22476: PPUSH
22477: LD_VAR 0 1
22481: PPUSH
22482: CALL 29776 0 2
22486: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
22487: LD_ADDR_VAR 0 3
22491: PUSH
22492: DOUBLE
22493: LD_EXP 85
22497: PUSH
22498: LD_VAR 0 4
22502: ARRAY
22503: INC
22504: ST_TO_ADDR
22505: LD_INT 1
22507: PUSH
22508: FOR_DOWNTO
22509: IFFALSE 22681
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
22511: LD_ADDR_VAR 0 5
22515: PUSH
22516: LD_EXP 85
22520: PUSH
22521: LD_VAR 0 4
22525: ARRAY
22526: PUSH
22527: LD_VAR 0 3
22531: ARRAY
22532: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
22533: LD_VAR 0 5
22537: PUSH
22538: LD_INT 1
22540: ARRAY
22541: PPUSH
22542: CALL_OW 302
22546: NOT
22547: PUSH
22548: LD_VAR 0 5
22552: PUSH
22553: LD_INT 1
22555: ARRAY
22556: PPUSH
22557: CALL_OW 255
22561: PUSH
22562: LD_VAR 0 1
22566: PPUSH
22567: CALL_OW 255
22571: NONEQUAL
22572: OR
22573: IFFALSE 22679
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
22575: LD_VAR 0 5
22579: PUSH
22580: LD_INT 1
22582: ARRAY
22583: PPUSH
22584: CALL_OW 305
22588: PUSH
22589: LD_VAR 0 5
22593: PUSH
22594: LD_INT 1
22596: ARRAY
22597: PPUSH
22598: CALL_OW 255
22602: PUSH
22603: LD_VAR 0 1
22607: PPUSH
22608: CALL_OW 255
22612: EQUAL
22613: AND
22614: IFFALSE 22638
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
22616: LD_VAR 0 5
22620: PUSH
22621: LD_INT 1
22623: ARRAY
22624: PPUSH
22625: LD_VAR 0 5
22629: PUSH
22630: LD_INT 2
22632: ARRAY
22633: PPUSH
22634: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
22638: LD_ADDR_EXP 85
22642: PUSH
22643: LD_EXP 85
22647: PPUSH
22648: LD_VAR 0 4
22652: PPUSH
22653: LD_EXP 85
22657: PUSH
22658: LD_VAR 0 4
22662: ARRAY
22663: PPUSH
22664: LD_VAR 0 3
22668: PPUSH
22669: CALL_OW 3
22673: PPUSH
22674: CALL_OW 1
22678: ST_TO_ADDR
// end ; end ;
22679: GO 22508
22681: POP
22682: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22683: LD_VAR 0 1
22687: PPUSH
22688: LD_EXP 85
22692: PUSH
22693: LD_VAR 0 4
22697: ARRAY
22698: PUSH
22699: LD_INT 0
22701: PLUS
22702: PPUSH
22703: CALL_OW 505
// end ;
22707: LD_VAR 0 2
22711: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
22712: LD_INT 0
22714: PPUSH
22715: PPUSH
22716: PPUSH
22717: PPUSH
// if not hack in hackTanks then
22718: LD_VAR 0 1
22722: PUSH
22723: LD_EXP 84
22727: IN
22728: NOT
22729: IFFALSE 22733
// exit ;
22731: GO 22818
// index := GetElementIndex ( hackTanks , hack ) ;
22733: LD_ADDR_VAR 0 5
22737: PUSH
22738: LD_EXP 84
22742: PPUSH
22743: LD_VAR 0 1
22747: PPUSH
22748: CALL 29776 0 2
22752: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
22753: LD_ADDR_VAR 0 4
22757: PUSH
22758: DOUBLE
22759: LD_INT 1
22761: DEC
22762: ST_TO_ADDR
22763: LD_EXP 85
22767: PUSH
22768: LD_VAR 0 5
22772: ARRAY
22773: PUSH
22774: FOR_TO
22775: IFFALSE 22816
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
22777: LD_EXP 85
22781: PUSH
22782: LD_VAR 0 5
22786: ARRAY
22787: PUSH
22788: LD_VAR 0 4
22792: ARRAY
22793: PUSH
22794: LD_INT 1
22796: ARRAY
22797: PUSH
22798: LD_VAR 0 2
22802: EQUAL
22803: IFFALSE 22814
// KillUnit ( vehicle ) ;
22805: LD_VAR 0 2
22809: PPUSH
22810: CALL_OW 66
22814: GO 22774
22816: POP
22817: POP
// end ;
22818: LD_VAR 0 3
22822: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
22823: LD_EXP 89
22827: NOT
22828: IFFALSE 22863
22830: GO 22832
22832: DISABLE
// begin initMiner := true ;
22833: LD_ADDR_EXP 89
22837: PUSH
22838: LD_INT 1
22840: ST_TO_ADDR
// minersList := [ ] ;
22841: LD_ADDR_EXP 90
22845: PUSH
22846: EMPTY
22847: ST_TO_ADDR
// minerMinesList := [ ] ;
22848: LD_ADDR_EXP 91
22852: PUSH
22853: EMPTY
22854: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
22855: LD_ADDR_EXP 92
22859: PUSH
22860: LD_INT 5
22862: ST_TO_ADDR
// end ;
22863: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
22864: LD_EXP 89
22868: PUSH
22869: LD_INT 34
22871: PUSH
22872: LD_EXP 100
22876: PUSH
22877: EMPTY
22878: LIST
22879: LIST
22880: PPUSH
22881: CALL_OW 69
22885: AND
22886: IFFALSE 23349
22888: GO 22890
22890: DISABLE
22891: LD_INT 0
22893: PPUSH
22894: PPUSH
22895: PPUSH
22896: PPUSH
// begin enable ;
22897: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
22898: LD_ADDR_VAR 0 1
22902: PUSH
22903: LD_INT 34
22905: PUSH
22906: LD_EXP 100
22910: PUSH
22911: EMPTY
22912: LIST
22913: LIST
22914: PPUSH
22915: CALL_OW 69
22919: PUSH
22920: FOR_IN
22921: IFFALSE 22993
// begin if not i in minersList then
22923: LD_VAR 0 1
22927: PUSH
22928: LD_EXP 90
22932: IN
22933: NOT
22934: IFFALSE 22991
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
22936: LD_ADDR_EXP 90
22940: PUSH
22941: LD_EXP 90
22945: PPUSH
22946: LD_EXP 90
22950: PUSH
22951: LD_INT 1
22953: PLUS
22954: PPUSH
22955: LD_VAR 0 1
22959: PPUSH
22960: CALL_OW 1
22964: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
22965: LD_ADDR_EXP 91
22969: PUSH
22970: LD_EXP 91
22974: PPUSH
22975: LD_EXP 91
22979: PUSH
22980: LD_INT 1
22982: PLUS
22983: PPUSH
22984: EMPTY
22985: PPUSH
22986: CALL_OW 1
22990: ST_TO_ADDR
// end end ;
22991: GO 22920
22993: POP
22994: POP
// for i := minerMinesList downto 1 do
22995: LD_ADDR_VAR 0 1
22999: PUSH
23000: DOUBLE
23001: LD_EXP 91
23005: INC
23006: ST_TO_ADDR
23007: LD_INT 1
23009: PUSH
23010: FOR_DOWNTO
23011: IFFALSE 23347
// begin if IsLive ( minersList [ i ] ) then
23013: LD_EXP 90
23017: PUSH
23018: LD_VAR 0 1
23022: ARRAY
23023: PPUSH
23024: CALL_OW 300
23028: IFFALSE 23056
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
23030: LD_EXP 90
23034: PUSH
23035: LD_VAR 0 1
23039: ARRAY
23040: PPUSH
23041: LD_EXP 91
23045: PUSH
23046: LD_VAR 0 1
23050: ARRAY
23051: PPUSH
23052: CALL_OW 505
// if not minerMinesList [ i ] then
23056: LD_EXP 91
23060: PUSH
23061: LD_VAR 0 1
23065: ARRAY
23066: NOT
23067: IFFALSE 23071
// continue ;
23069: GO 23010
// for j := minerMinesList [ i ] downto 1 do
23071: LD_ADDR_VAR 0 2
23075: PUSH
23076: DOUBLE
23077: LD_EXP 91
23081: PUSH
23082: LD_VAR 0 1
23086: ARRAY
23087: INC
23088: ST_TO_ADDR
23089: LD_INT 1
23091: PUSH
23092: FOR_DOWNTO
23093: IFFALSE 23343
// begin side := GetSide ( minersList [ i ] ) ;
23095: LD_ADDR_VAR 0 3
23099: PUSH
23100: LD_EXP 90
23104: PUSH
23105: LD_VAR 0 1
23109: ARRAY
23110: PPUSH
23111: CALL_OW 255
23115: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
23116: LD_ADDR_VAR 0 4
23120: PUSH
23121: LD_EXP 91
23125: PUSH
23126: LD_VAR 0 1
23130: ARRAY
23131: PUSH
23132: LD_VAR 0 2
23136: ARRAY
23137: PUSH
23138: LD_INT 1
23140: ARRAY
23141: PPUSH
23142: LD_EXP 91
23146: PUSH
23147: LD_VAR 0 1
23151: ARRAY
23152: PUSH
23153: LD_VAR 0 2
23157: ARRAY
23158: PUSH
23159: LD_INT 2
23161: ARRAY
23162: PPUSH
23163: CALL_OW 428
23167: ST_TO_ADDR
// if not tmp then
23168: LD_VAR 0 4
23172: NOT
23173: IFFALSE 23177
// continue ;
23175: GO 23092
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
23177: LD_VAR 0 4
23181: PUSH
23182: LD_INT 81
23184: PUSH
23185: LD_VAR 0 3
23189: PUSH
23190: EMPTY
23191: LIST
23192: LIST
23193: PPUSH
23194: CALL_OW 69
23198: IN
23199: PUSH
23200: LD_EXP 91
23204: PUSH
23205: LD_VAR 0 1
23209: ARRAY
23210: PUSH
23211: LD_VAR 0 2
23215: ARRAY
23216: PUSH
23217: LD_INT 1
23219: ARRAY
23220: PPUSH
23221: LD_EXP 91
23225: PUSH
23226: LD_VAR 0 1
23230: ARRAY
23231: PUSH
23232: LD_VAR 0 2
23236: ARRAY
23237: PUSH
23238: LD_INT 2
23240: ARRAY
23241: PPUSH
23242: CALL_OW 458
23246: AND
23247: IFFALSE 23341
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
23249: LD_EXP 91
23253: PUSH
23254: LD_VAR 0 1
23258: ARRAY
23259: PUSH
23260: LD_VAR 0 2
23264: ARRAY
23265: PUSH
23266: LD_INT 1
23268: ARRAY
23269: PPUSH
23270: LD_EXP 91
23274: PUSH
23275: LD_VAR 0 1
23279: ARRAY
23280: PUSH
23281: LD_VAR 0 2
23285: ARRAY
23286: PUSH
23287: LD_INT 2
23289: ARRAY
23290: PPUSH
23291: LD_VAR 0 3
23295: PPUSH
23296: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
23300: LD_ADDR_EXP 91
23304: PUSH
23305: LD_EXP 91
23309: PPUSH
23310: LD_VAR 0 1
23314: PPUSH
23315: LD_EXP 91
23319: PUSH
23320: LD_VAR 0 1
23324: ARRAY
23325: PPUSH
23326: LD_VAR 0 2
23330: PPUSH
23331: CALL_OW 3
23335: PPUSH
23336: CALL_OW 1
23340: ST_TO_ADDR
// end ; end ;
23341: GO 23092
23343: POP
23344: POP
// end ;
23345: GO 23010
23347: POP
23348: POP
// end ;
23349: PPOPN 4
23351: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
23352: LD_INT 0
23354: PPUSH
23355: PPUSH
// result := false ;
23356: LD_ADDR_VAR 0 4
23360: PUSH
23361: LD_INT 0
23363: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
23364: LD_VAR 0 1
23368: PPUSH
23369: CALL_OW 264
23373: PUSH
23374: LD_EXP 100
23378: EQUAL
23379: NOT
23380: IFFALSE 23384
// exit ;
23382: GO 23624
// index := GetElementIndex ( minersList , unit ) ;
23384: LD_ADDR_VAR 0 5
23388: PUSH
23389: LD_EXP 90
23393: PPUSH
23394: LD_VAR 0 1
23398: PPUSH
23399: CALL 29776 0 2
23403: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
23404: LD_EXP 91
23408: PUSH
23409: LD_VAR 0 5
23413: ARRAY
23414: PUSH
23415: LD_EXP 92
23419: GREATEREQUAL
23420: IFFALSE 23424
// exit ;
23422: GO 23624
// ComMoveXY ( unit , x , y ) ;
23424: LD_VAR 0 1
23428: PPUSH
23429: LD_VAR 0 2
23433: PPUSH
23434: LD_VAR 0 3
23438: PPUSH
23439: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23443: LD_INT 35
23445: PPUSH
23446: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
23450: LD_VAR 0 1
23454: PPUSH
23455: LD_VAR 0 2
23459: PPUSH
23460: LD_VAR 0 3
23464: PPUSH
23465: CALL 60495 0 3
23469: NOT
23470: PUSH
23471: LD_VAR 0 1
23475: PPUSH
23476: CALL_OW 314
23480: AND
23481: IFFALSE 23485
// exit ;
23483: GO 23624
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
23485: LD_VAR 0 2
23489: PPUSH
23490: LD_VAR 0 3
23494: PPUSH
23495: CALL_OW 428
23499: PUSH
23500: LD_VAR 0 1
23504: EQUAL
23505: PUSH
23506: LD_VAR 0 1
23510: PPUSH
23511: CALL_OW 314
23515: NOT
23516: AND
23517: IFFALSE 23443
// PlaySoundXY ( x , y , PlantMine ) ;
23519: LD_VAR 0 2
23523: PPUSH
23524: LD_VAR 0 3
23528: PPUSH
23529: LD_STRING PlantMine
23531: PPUSH
23532: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
23536: LD_VAR 0 2
23540: PPUSH
23541: LD_VAR 0 3
23545: PPUSH
23546: LD_VAR 0 1
23550: PPUSH
23551: CALL_OW 255
23555: PPUSH
23556: LD_INT 0
23558: PPUSH
23559: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
23563: LD_ADDR_EXP 91
23567: PUSH
23568: LD_EXP 91
23572: PPUSH
23573: LD_VAR 0 5
23577: PUSH
23578: LD_EXP 91
23582: PUSH
23583: LD_VAR 0 5
23587: ARRAY
23588: PUSH
23589: LD_INT 1
23591: PLUS
23592: PUSH
23593: EMPTY
23594: LIST
23595: LIST
23596: PPUSH
23597: LD_VAR 0 2
23601: PUSH
23602: LD_VAR 0 3
23606: PUSH
23607: EMPTY
23608: LIST
23609: LIST
23610: PPUSH
23611: CALL 29991 0 3
23615: ST_TO_ADDR
// result := true ;
23616: LD_ADDR_VAR 0 4
23620: PUSH
23621: LD_INT 1
23623: ST_TO_ADDR
// end ;
23624: LD_VAR 0 4
23628: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
23629: LD_INT 0
23631: PPUSH
23632: PPUSH
23633: PPUSH
// if not unit in minersList then
23634: LD_VAR 0 1
23638: PUSH
23639: LD_EXP 90
23643: IN
23644: NOT
23645: IFFALSE 23649
// exit ;
23647: GO 24041
// index := GetElementIndex ( minersList , unit ) ;
23649: LD_ADDR_VAR 0 6
23653: PUSH
23654: LD_EXP 90
23658: PPUSH
23659: LD_VAR 0 1
23663: PPUSH
23664: CALL 29776 0 2
23668: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
23669: LD_ADDR_VAR 0 5
23673: PUSH
23674: DOUBLE
23675: LD_EXP 91
23679: PUSH
23680: LD_VAR 0 6
23684: ARRAY
23685: INC
23686: ST_TO_ADDR
23687: LD_INT 1
23689: PUSH
23690: FOR_DOWNTO
23691: IFFALSE 23852
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
23693: LD_EXP 91
23697: PUSH
23698: LD_VAR 0 6
23702: ARRAY
23703: PUSH
23704: LD_VAR 0 5
23708: ARRAY
23709: PUSH
23710: LD_INT 1
23712: ARRAY
23713: PUSH
23714: LD_VAR 0 2
23718: EQUAL
23719: PUSH
23720: LD_EXP 91
23724: PUSH
23725: LD_VAR 0 6
23729: ARRAY
23730: PUSH
23731: LD_VAR 0 5
23735: ARRAY
23736: PUSH
23737: LD_INT 2
23739: ARRAY
23740: PUSH
23741: LD_VAR 0 3
23745: EQUAL
23746: AND
23747: IFFALSE 23850
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
23749: LD_EXP 91
23753: PUSH
23754: LD_VAR 0 6
23758: ARRAY
23759: PUSH
23760: LD_VAR 0 5
23764: ARRAY
23765: PUSH
23766: LD_INT 1
23768: ARRAY
23769: PPUSH
23770: LD_EXP 91
23774: PUSH
23775: LD_VAR 0 6
23779: ARRAY
23780: PUSH
23781: LD_VAR 0 5
23785: ARRAY
23786: PUSH
23787: LD_INT 2
23789: ARRAY
23790: PPUSH
23791: LD_VAR 0 1
23795: PPUSH
23796: CALL_OW 255
23800: PPUSH
23801: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
23805: LD_ADDR_EXP 91
23809: PUSH
23810: LD_EXP 91
23814: PPUSH
23815: LD_VAR 0 6
23819: PPUSH
23820: LD_EXP 91
23824: PUSH
23825: LD_VAR 0 6
23829: ARRAY
23830: PPUSH
23831: LD_VAR 0 5
23835: PPUSH
23836: CALL_OW 3
23840: PPUSH
23841: CALL_OW 1
23845: ST_TO_ADDR
// exit ;
23846: POP
23847: POP
23848: GO 24041
// end ; end ;
23850: GO 23690
23852: POP
23853: POP
// for i := minerMinesList [ index ] downto 1 do
23854: LD_ADDR_VAR 0 5
23858: PUSH
23859: DOUBLE
23860: LD_EXP 91
23864: PUSH
23865: LD_VAR 0 6
23869: ARRAY
23870: INC
23871: ST_TO_ADDR
23872: LD_INT 1
23874: PUSH
23875: FOR_DOWNTO
23876: IFFALSE 24039
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
23878: LD_EXP 91
23882: PUSH
23883: LD_VAR 0 6
23887: ARRAY
23888: PUSH
23889: LD_VAR 0 5
23893: ARRAY
23894: PUSH
23895: LD_INT 1
23897: ARRAY
23898: PPUSH
23899: LD_EXP 91
23903: PUSH
23904: LD_VAR 0 6
23908: ARRAY
23909: PUSH
23910: LD_VAR 0 5
23914: ARRAY
23915: PUSH
23916: LD_INT 2
23918: ARRAY
23919: PPUSH
23920: LD_VAR 0 2
23924: PPUSH
23925: LD_VAR 0 3
23929: PPUSH
23930: CALL_OW 298
23934: PUSH
23935: LD_INT 6
23937: LESS
23938: IFFALSE 24037
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
23940: LD_EXP 91
23944: PUSH
23945: LD_VAR 0 6
23949: ARRAY
23950: PUSH
23951: LD_VAR 0 5
23955: ARRAY
23956: PUSH
23957: LD_INT 1
23959: ARRAY
23960: PPUSH
23961: LD_EXP 91
23965: PUSH
23966: LD_VAR 0 6
23970: ARRAY
23971: PUSH
23972: LD_VAR 0 5
23976: ARRAY
23977: PUSH
23978: LD_INT 2
23980: ARRAY
23981: PPUSH
23982: LD_VAR 0 1
23986: PPUSH
23987: CALL_OW 255
23991: PPUSH
23992: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
23996: LD_ADDR_EXP 91
24000: PUSH
24001: LD_EXP 91
24005: PPUSH
24006: LD_VAR 0 6
24010: PPUSH
24011: LD_EXP 91
24015: PUSH
24016: LD_VAR 0 6
24020: ARRAY
24021: PPUSH
24022: LD_VAR 0 5
24026: PPUSH
24027: CALL_OW 3
24031: PPUSH
24032: CALL_OW 1
24036: ST_TO_ADDR
// end ; end ;
24037: GO 23875
24039: POP
24040: POP
// end ;
24041: LD_VAR 0 4
24045: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
24046: LD_INT 0
24048: PPUSH
24049: PPUSH
24050: PPUSH
24051: PPUSH
24052: PPUSH
24053: PPUSH
24054: PPUSH
24055: PPUSH
24056: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
24057: LD_VAR 0 1
24061: PPUSH
24062: CALL_OW 264
24066: PUSH
24067: LD_EXP 100
24071: EQUAL
24072: NOT
24073: PUSH
24074: LD_VAR 0 1
24078: PUSH
24079: LD_EXP 90
24083: IN
24084: NOT
24085: OR
24086: IFFALSE 24090
// exit ;
24088: GO 24412
// index := GetElementIndex ( minersList , unit ) ;
24090: LD_ADDR_VAR 0 6
24094: PUSH
24095: LD_EXP 90
24099: PPUSH
24100: LD_VAR 0 1
24104: PPUSH
24105: CALL 29776 0 2
24109: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
24110: LD_ADDR_VAR 0 8
24114: PUSH
24115: LD_EXP 92
24119: PUSH
24120: LD_EXP 91
24124: PUSH
24125: LD_VAR 0 6
24129: ARRAY
24130: MINUS
24131: ST_TO_ADDR
// if not minesFreeAmount then
24132: LD_VAR 0 8
24136: NOT
24137: IFFALSE 24141
// exit ;
24139: GO 24412
// tmp := [ ] ;
24141: LD_ADDR_VAR 0 7
24145: PUSH
24146: EMPTY
24147: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
24148: LD_ADDR_VAR 0 5
24152: PUSH
24153: DOUBLE
24154: LD_INT 1
24156: DEC
24157: ST_TO_ADDR
24158: LD_VAR 0 8
24162: PUSH
24163: FOR_TO
24164: IFFALSE 24359
// begin _d := rand ( 0 , 5 ) ;
24166: LD_ADDR_VAR 0 11
24170: PUSH
24171: LD_INT 0
24173: PPUSH
24174: LD_INT 5
24176: PPUSH
24177: CALL_OW 12
24181: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
24182: LD_ADDR_VAR 0 12
24186: PUSH
24187: LD_INT 2
24189: PPUSH
24190: LD_INT 6
24192: PPUSH
24193: CALL_OW 12
24197: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
24198: LD_ADDR_VAR 0 9
24202: PUSH
24203: LD_VAR 0 2
24207: PPUSH
24208: LD_VAR 0 11
24212: PPUSH
24213: LD_VAR 0 12
24217: PPUSH
24218: CALL_OW 272
24222: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
24223: LD_ADDR_VAR 0 10
24227: PUSH
24228: LD_VAR 0 3
24232: PPUSH
24233: LD_VAR 0 11
24237: PPUSH
24238: LD_VAR 0 12
24242: PPUSH
24243: CALL_OW 273
24247: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
24248: LD_VAR 0 9
24252: PPUSH
24253: LD_VAR 0 10
24257: PPUSH
24258: CALL_OW 488
24262: PUSH
24263: LD_VAR 0 9
24267: PUSH
24268: LD_VAR 0 10
24272: PUSH
24273: EMPTY
24274: LIST
24275: LIST
24276: PUSH
24277: LD_VAR 0 7
24281: IN
24282: NOT
24283: AND
24284: PUSH
24285: LD_VAR 0 9
24289: PPUSH
24290: LD_VAR 0 10
24294: PPUSH
24295: CALL_OW 458
24299: NOT
24300: AND
24301: IFFALSE 24343
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
24303: LD_ADDR_VAR 0 7
24307: PUSH
24308: LD_VAR 0 7
24312: PPUSH
24313: LD_VAR 0 7
24317: PUSH
24318: LD_INT 1
24320: PLUS
24321: PPUSH
24322: LD_VAR 0 9
24326: PUSH
24327: LD_VAR 0 10
24331: PUSH
24332: EMPTY
24333: LIST
24334: LIST
24335: PPUSH
24336: CALL_OW 1
24340: ST_TO_ADDR
24341: GO 24357
// i := i - 1 ;
24343: LD_ADDR_VAR 0 5
24347: PUSH
24348: LD_VAR 0 5
24352: PUSH
24353: LD_INT 1
24355: MINUS
24356: ST_TO_ADDR
// end ;
24357: GO 24163
24359: POP
24360: POP
// for i in tmp do
24361: LD_ADDR_VAR 0 5
24365: PUSH
24366: LD_VAR 0 7
24370: PUSH
24371: FOR_IN
24372: IFFALSE 24410
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
24374: LD_VAR 0 1
24378: PPUSH
24379: LD_VAR 0 5
24383: PUSH
24384: LD_INT 1
24386: ARRAY
24387: PPUSH
24388: LD_VAR 0 5
24392: PUSH
24393: LD_INT 2
24395: ARRAY
24396: PPUSH
24397: CALL 23352 0 3
24401: NOT
24402: IFFALSE 24408
// exit ;
24404: POP
24405: POP
24406: GO 24412
24408: GO 24371
24410: POP
24411: POP
// end ;
24412: LD_VAR 0 4
24416: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
24417: LD_INT 0
24419: PPUSH
24420: PPUSH
24421: PPUSH
24422: PPUSH
24423: PPUSH
24424: PPUSH
24425: PPUSH
// if not GetClass ( unit ) = class_sniper then
24426: LD_VAR 0 1
24430: PPUSH
24431: CALL_OW 257
24435: PUSH
24436: LD_INT 5
24438: EQUAL
24439: NOT
24440: IFFALSE 24444
// exit ;
24442: GO 24832
// dist := 8 ;
24444: LD_ADDR_VAR 0 5
24448: PUSH
24449: LD_INT 8
24451: ST_TO_ADDR
// viewRange := 12 ;
24452: LD_ADDR_VAR 0 7
24456: PUSH
24457: LD_INT 12
24459: ST_TO_ADDR
// side := GetSide ( unit ) ;
24460: LD_ADDR_VAR 0 6
24464: PUSH
24465: LD_VAR 0 1
24469: PPUSH
24470: CALL_OW 255
24474: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
24475: LD_INT 61
24477: PPUSH
24478: LD_VAR 0 6
24482: PPUSH
24483: CALL_OW 321
24487: PUSH
24488: LD_INT 2
24490: EQUAL
24491: IFFALSE 24501
// viewRange := 16 ;
24493: LD_ADDR_VAR 0 7
24497: PUSH
24498: LD_INT 16
24500: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
24501: LD_VAR 0 1
24505: PPUSH
24506: LD_VAR 0 2
24510: PPUSH
24511: LD_VAR 0 3
24515: PPUSH
24516: CALL_OW 297
24520: PUSH
24521: LD_VAR 0 5
24525: GREATER
24526: IFFALSE 24605
// begin ComMoveXY ( unit , x , y ) ;
24528: LD_VAR 0 1
24532: PPUSH
24533: LD_VAR 0 2
24537: PPUSH
24538: LD_VAR 0 3
24542: PPUSH
24543: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24547: LD_INT 35
24549: PPUSH
24550: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
24554: LD_VAR 0 1
24558: PPUSH
24559: LD_VAR 0 2
24563: PPUSH
24564: LD_VAR 0 3
24568: PPUSH
24569: CALL 60495 0 3
24573: NOT
24574: IFFALSE 24578
// exit ;
24576: GO 24832
// until GetDistUnitXY ( unit , x , y ) < dist ;
24578: LD_VAR 0 1
24582: PPUSH
24583: LD_VAR 0 2
24587: PPUSH
24588: LD_VAR 0 3
24592: PPUSH
24593: CALL_OW 297
24597: PUSH
24598: LD_VAR 0 5
24602: LESS
24603: IFFALSE 24547
// end ; ComTurnXY ( unit , x , y ) ;
24605: LD_VAR 0 1
24609: PPUSH
24610: LD_VAR 0 2
24614: PPUSH
24615: LD_VAR 0 3
24619: PPUSH
24620: CALL_OW 118
// wait ( 5 ) ;
24624: LD_INT 5
24626: PPUSH
24627: CALL_OW 67
// _d := GetDir ( unit ) ;
24631: LD_ADDR_VAR 0 10
24635: PUSH
24636: LD_VAR 0 1
24640: PPUSH
24641: CALL_OW 254
24645: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
24646: LD_ADDR_VAR 0 8
24650: PUSH
24651: LD_VAR 0 1
24655: PPUSH
24656: CALL_OW 250
24660: PPUSH
24661: LD_VAR 0 10
24665: PPUSH
24666: LD_VAR 0 5
24670: PPUSH
24671: CALL_OW 272
24675: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
24676: LD_ADDR_VAR 0 9
24680: PUSH
24681: LD_VAR 0 1
24685: PPUSH
24686: CALL_OW 251
24690: PPUSH
24691: LD_VAR 0 10
24695: PPUSH
24696: LD_VAR 0 5
24700: PPUSH
24701: CALL_OW 273
24705: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24706: LD_VAR 0 8
24710: PPUSH
24711: LD_VAR 0 9
24715: PPUSH
24716: CALL_OW 488
24720: NOT
24721: IFFALSE 24725
// exit ;
24723: GO 24832
// ComAnimCustom ( unit , 1 ) ;
24725: LD_VAR 0 1
24729: PPUSH
24730: LD_INT 1
24732: PPUSH
24733: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
24737: LD_VAR 0 8
24741: PPUSH
24742: LD_VAR 0 9
24746: PPUSH
24747: LD_VAR 0 6
24751: PPUSH
24752: LD_VAR 0 7
24756: PPUSH
24757: CALL_OW 330
// repeat wait ( 1 ) ;
24761: LD_INT 1
24763: PPUSH
24764: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
24768: LD_VAR 0 1
24772: PPUSH
24773: CALL_OW 316
24777: PUSH
24778: LD_VAR 0 1
24782: PPUSH
24783: CALL_OW 314
24787: OR
24788: PUSH
24789: LD_VAR 0 1
24793: PPUSH
24794: CALL_OW 302
24798: NOT
24799: OR
24800: PUSH
24801: LD_VAR 0 1
24805: PPUSH
24806: CALL_OW 301
24810: OR
24811: IFFALSE 24761
// RemoveSeeing ( _x , _y , side ) ;
24813: LD_VAR 0 8
24817: PPUSH
24818: LD_VAR 0 9
24822: PPUSH
24823: LD_VAR 0 6
24827: PPUSH
24828: CALL_OW 331
// end ; end_of_file
24832: LD_VAR 0 4
24836: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
24837: LD_INT 0
24839: PPUSH
// ar_miner := 81 ;
24840: LD_ADDR_EXP 100
24844: PUSH
24845: LD_INT 81
24847: ST_TO_ADDR
// ar_crane := 88 ;
24848: LD_ADDR_EXP 99
24852: PUSH
24853: LD_INT 88
24855: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
24856: LD_ADDR_EXP 94
24860: PUSH
24861: LD_INT 89
24863: ST_TO_ADDR
// us_hack := 99 ;
24864: LD_ADDR_EXP 95
24868: PUSH
24869: LD_INT 99
24871: ST_TO_ADDR
// us_artillery := 97 ;
24872: LD_ADDR_EXP 96
24876: PUSH
24877: LD_INT 97
24879: ST_TO_ADDR
// ar_bio_bomb := 91 ;
24880: LD_ADDR_EXP 97
24884: PUSH
24885: LD_INT 91
24887: ST_TO_ADDR
// ar_mortar := 92 ;
24888: LD_ADDR_EXP 98
24892: PUSH
24893: LD_INT 92
24895: ST_TO_ADDR
// ru_radar := 98 ;
24896: LD_ADDR_EXP 93
24900: PUSH
24901: LD_INT 98
24903: ST_TO_ADDR
// tech_Artillery := 80 ;
24904: LD_ADDR_EXP 101
24908: PUSH
24909: LD_INT 80
24911: ST_TO_ADDR
// tech_RadMat := 81 ;
24912: LD_ADDR_EXP 102
24916: PUSH
24917: LD_INT 81
24919: ST_TO_ADDR
// tech_BasicTools := 82 ;
24920: LD_ADDR_EXP 103
24924: PUSH
24925: LD_INT 82
24927: ST_TO_ADDR
// tech_Cargo := 83 ;
24928: LD_ADDR_EXP 104
24932: PUSH
24933: LD_INT 83
24935: ST_TO_ADDR
// tech_Track := 84 ;
24936: LD_ADDR_EXP 105
24940: PUSH
24941: LD_INT 84
24943: ST_TO_ADDR
// tech_Crane := 85 ;
24944: LD_ADDR_EXP 106
24948: PUSH
24949: LD_INT 85
24951: ST_TO_ADDR
// tech_Bulldozer := 86 ;
24952: LD_ADDR_EXP 107
24956: PUSH
24957: LD_INT 86
24959: ST_TO_ADDR
// tech_Hovercraft := 87 ;
24960: LD_ADDR_EXP 108
24964: PUSH
24965: LD_INT 87
24967: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
24968: LD_ADDR_EXP 109
24972: PUSH
24973: LD_INT 88
24975: ST_TO_ADDR
// class_mastodont := 31 ;
24976: LD_ADDR_EXP 110
24980: PUSH
24981: LD_INT 31
24983: ST_TO_ADDR
// class_horse := 21 ;
24984: LD_ADDR_EXP 111
24988: PUSH
24989: LD_INT 21
24991: ST_TO_ADDR
// end ;
24992: LD_VAR 0 1
24996: RET
// every 1 do
24997: GO 24999
24999: DISABLE
// InitGlobalVariables ; end_of_file
25000: CALL 24837 0 0
25004: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
25005: LD_INT 0
25007: PPUSH
25008: PPUSH
// if exist_mode then
25009: LD_VAR 0 2
25013: IFFALSE 25038
// unit := CreateCharacter ( prefix & ident ) else
25015: LD_ADDR_VAR 0 5
25019: PUSH
25020: LD_VAR 0 3
25024: PUSH
25025: LD_VAR 0 1
25029: STR
25030: PPUSH
25031: CALL_OW 34
25035: ST_TO_ADDR
25036: GO 25053
// unit := NewCharacter ( ident ) ;
25038: LD_ADDR_VAR 0 5
25042: PUSH
25043: LD_VAR 0 1
25047: PPUSH
25048: CALL_OW 25
25052: ST_TO_ADDR
// result := unit ;
25053: LD_ADDR_VAR 0 4
25057: PUSH
25058: LD_VAR 0 5
25062: ST_TO_ADDR
// end ;
25063: LD_VAR 0 4
25067: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
25068: LD_INT 0
25070: PPUSH
25071: PPUSH
// if not side or not nation then
25072: LD_VAR 0 1
25076: NOT
25077: PUSH
25078: LD_VAR 0 2
25082: NOT
25083: OR
25084: IFFALSE 25088
// exit ;
25086: GO 25856
// case nation of nation_american :
25088: LD_VAR 0 2
25092: PUSH
25093: LD_INT 1
25095: DOUBLE
25096: EQUAL
25097: IFTRUE 25101
25099: GO 25315
25101: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
25102: LD_ADDR_VAR 0 4
25106: PUSH
25107: LD_INT 35
25109: PUSH
25110: LD_INT 45
25112: PUSH
25113: LD_INT 46
25115: PUSH
25116: LD_INT 47
25118: PUSH
25119: LD_INT 82
25121: PUSH
25122: LD_INT 83
25124: PUSH
25125: LD_INT 84
25127: PUSH
25128: LD_INT 85
25130: PUSH
25131: LD_INT 86
25133: PUSH
25134: LD_INT 1
25136: PUSH
25137: LD_INT 2
25139: PUSH
25140: LD_INT 6
25142: PUSH
25143: LD_INT 15
25145: PUSH
25146: LD_INT 16
25148: PUSH
25149: LD_INT 7
25151: PUSH
25152: LD_INT 12
25154: PUSH
25155: LD_INT 13
25157: PUSH
25158: LD_INT 10
25160: PUSH
25161: LD_INT 14
25163: PUSH
25164: LD_INT 20
25166: PUSH
25167: LD_INT 21
25169: PUSH
25170: LD_INT 22
25172: PUSH
25173: LD_INT 25
25175: PUSH
25176: LD_INT 32
25178: PUSH
25179: LD_INT 27
25181: PUSH
25182: LD_INT 36
25184: PUSH
25185: LD_INT 69
25187: PUSH
25188: LD_INT 39
25190: PUSH
25191: LD_INT 34
25193: PUSH
25194: LD_INT 40
25196: PUSH
25197: LD_INT 48
25199: PUSH
25200: LD_INT 49
25202: PUSH
25203: LD_INT 50
25205: PUSH
25206: LD_INT 51
25208: PUSH
25209: LD_INT 52
25211: PUSH
25212: LD_INT 53
25214: PUSH
25215: LD_INT 54
25217: PUSH
25218: LD_INT 55
25220: PUSH
25221: LD_INT 56
25223: PUSH
25224: LD_INT 57
25226: PUSH
25227: LD_INT 58
25229: PUSH
25230: LD_INT 59
25232: PUSH
25233: LD_INT 60
25235: PUSH
25236: LD_INT 61
25238: PUSH
25239: LD_INT 62
25241: PUSH
25242: LD_INT 80
25244: PUSH
25245: LD_INT 82
25247: PUSH
25248: LD_INT 83
25250: PUSH
25251: LD_INT 84
25253: PUSH
25254: LD_INT 85
25256: PUSH
25257: LD_INT 86
25259: PUSH
25260: EMPTY
25261: LIST
25262: LIST
25263: LIST
25264: LIST
25265: LIST
25266: LIST
25267: LIST
25268: LIST
25269: LIST
25270: LIST
25271: LIST
25272: LIST
25273: LIST
25274: LIST
25275: LIST
25276: LIST
25277: LIST
25278: LIST
25279: LIST
25280: LIST
25281: LIST
25282: LIST
25283: LIST
25284: LIST
25285: LIST
25286: LIST
25287: LIST
25288: LIST
25289: LIST
25290: LIST
25291: LIST
25292: LIST
25293: LIST
25294: LIST
25295: LIST
25296: LIST
25297: LIST
25298: LIST
25299: LIST
25300: LIST
25301: LIST
25302: LIST
25303: LIST
25304: LIST
25305: LIST
25306: LIST
25307: LIST
25308: LIST
25309: LIST
25310: LIST
25311: LIST
25312: ST_TO_ADDR
25313: GO 25780
25315: LD_INT 2
25317: DOUBLE
25318: EQUAL
25319: IFTRUE 25323
25321: GO 25549
25323: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
25324: LD_ADDR_VAR 0 4
25328: PUSH
25329: LD_INT 35
25331: PUSH
25332: LD_INT 45
25334: PUSH
25335: LD_INT 46
25337: PUSH
25338: LD_INT 47
25340: PUSH
25341: LD_INT 82
25343: PUSH
25344: LD_INT 83
25346: PUSH
25347: LD_INT 84
25349: PUSH
25350: LD_INT 85
25352: PUSH
25353: LD_INT 87
25355: PUSH
25356: LD_INT 70
25358: PUSH
25359: LD_INT 1
25361: PUSH
25362: LD_INT 11
25364: PUSH
25365: LD_INT 3
25367: PUSH
25368: LD_INT 4
25370: PUSH
25371: LD_INT 5
25373: PUSH
25374: LD_INT 6
25376: PUSH
25377: LD_INT 15
25379: PUSH
25380: LD_INT 18
25382: PUSH
25383: LD_INT 7
25385: PUSH
25386: LD_INT 17
25388: PUSH
25389: LD_INT 8
25391: PUSH
25392: LD_INT 20
25394: PUSH
25395: LD_INT 21
25397: PUSH
25398: LD_INT 22
25400: PUSH
25401: LD_INT 72
25403: PUSH
25404: LD_INT 26
25406: PUSH
25407: LD_INT 69
25409: PUSH
25410: LD_INT 39
25412: PUSH
25413: LD_INT 40
25415: PUSH
25416: LD_INT 41
25418: PUSH
25419: LD_INT 42
25421: PUSH
25422: LD_INT 43
25424: PUSH
25425: LD_INT 48
25427: PUSH
25428: LD_INT 49
25430: PUSH
25431: LD_INT 50
25433: PUSH
25434: LD_INT 51
25436: PUSH
25437: LD_INT 52
25439: PUSH
25440: LD_INT 53
25442: PUSH
25443: LD_INT 54
25445: PUSH
25446: LD_INT 55
25448: PUSH
25449: LD_INT 56
25451: PUSH
25452: LD_INT 60
25454: PUSH
25455: LD_INT 61
25457: PUSH
25458: LD_INT 62
25460: PUSH
25461: LD_INT 66
25463: PUSH
25464: LD_INT 67
25466: PUSH
25467: LD_INT 68
25469: PUSH
25470: LD_INT 81
25472: PUSH
25473: LD_INT 82
25475: PUSH
25476: LD_INT 83
25478: PUSH
25479: LD_INT 84
25481: PUSH
25482: LD_INT 85
25484: PUSH
25485: LD_INT 87
25487: PUSH
25488: LD_INT 88
25490: PUSH
25491: EMPTY
25492: LIST
25493: LIST
25494: LIST
25495: LIST
25496: LIST
25497: LIST
25498: LIST
25499: LIST
25500: LIST
25501: LIST
25502: LIST
25503: LIST
25504: LIST
25505: LIST
25506: LIST
25507: LIST
25508: LIST
25509: LIST
25510: LIST
25511: LIST
25512: LIST
25513: LIST
25514: LIST
25515: LIST
25516: LIST
25517: LIST
25518: LIST
25519: LIST
25520: LIST
25521: LIST
25522: LIST
25523: LIST
25524: LIST
25525: LIST
25526: LIST
25527: LIST
25528: LIST
25529: LIST
25530: LIST
25531: LIST
25532: LIST
25533: LIST
25534: LIST
25535: LIST
25536: LIST
25537: LIST
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: ST_TO_ADDR
25547: GO 25780
25549: LD_INT 3
25551: DOUBLE
25552: EQUAL
25553: IFTRUE 25557
25555: GO 25779
25557: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
25558: LD_ADDR_VAR 0 4
25562: PUSH
25563: LD_INT 46
25565: PUSH
25566: LD_INT 47
25568: PUSH
25569: LD_INT 1
25571: PUSH
25572: LD_INT 2
25574: PUSH
25575: LD_INT 82
25577: PUSH
25578: LD_INT 83
25580: PUSH
25581: LD_INT 84
25583: PUSH
25584: LD_INT 85
25586: PUSH
25587: LD_INT 86
25589: PUSH
25590: LD_INT 11
25592: PUSH
25593: LD_INT 9
25595: PUSH
25596: LD_INT 20
25598: PUSH
25599: LD_INT 19
25601: PUSH
25602: LD_INT 21
25604: PUSH
25605: LD_INT 24
25607: PUSH
25608: LD_INT 22
25610: PUSH
25611: LD_INT 25
25613: PUSH
25614: LD_INT 28
25616: PUSH
25617: LD_INT 29
25619: PUSH
25620: LD_INT 30
25622: PUSH
25623: LD_INT 31
25625: PUSH
25626: LD_INT 37
25628: PUSH
25629: LD_INT 38
25631: PUSH
25632: LD_INT 32
25634: PUSH
25635: LD_INT 27
25637: PUSH
25638: LD_INT 33
25640: PUSH
25641: LD_INT 69
25643: PUSH
25644: LD_INT 39
25646: PUSH
25647: LD_INT 34
25649: PUSH
25650: LD_INT 40
25652: PUSH
25653: LD_INT 71
25655: PUSH
25656: LD_INT 23
25658: PUSH
25659: LD_INT 44
25661: PUSH
25662: LD_INT 48
25664: PUSH
25665: LD_INT 49
25667: PUSH
25668: LD_INT 50
25670: PUSH
25671: LD_INT 51
25673: PUSH
25674: LD_INT 52
25676: PUSH
25677: LD_INT 53
25679: PUSH
25680: LD_INT 54
25682: PUSH
25683: LD_INT 55
25685: PUSH
25686: LD_INT 56
25688: PUSH
25689: LD_INT 57
25691: PUSH
25692: LD_INT 58
25694: PUSH
25695: LD_INT 59
25697: PUSH
25698: LD_INT 63
25700: PUSH
25701: LD_INT 64
25703: PUSH
25704: LD_INT 65
25706: PUSH
25707: LD_INT 82
25709: PUSH
25710: LD_INT 83
25712: PUSH
25713: LD_INT 84
25715: PUSH
25716: LD_INT 85
25718: PUSH
25719: LD_INT 86
25721: PUSH
25722: EMPTY
25723: LIST
25724: LIST
25725: LIST
25726: LIST
25727: LIST
25728: LIST
25729: LIST
25730: LIST
25731: LIST
25732: LIST
25733: LIST
25734: LIST
25735: LIST
25736: LIST
25737: LIST
25738: LIST
25739: LIST
25740: LIST
25741: LIST
25742: LIST
25743: LIST
25744: LIST
25745: LIST
25746: LIST
25747: LIST
25748: LIST
25749: LIST
25750: LIST
25751: LIST
25752: LIST
25753: LIST
25754: LIST
25755: LIST
25756: LIST
25757: LIST
25758: LIST
25759: LIST
25760: LIST
25761: LIST
25762: LIST
25763: LIST
25764: LIST
25765: LIST
25766: LIST
25767: LIST
25768: LIST
25769: LIST
25770: LIST
25771: LIST
25772: LIST
25773: LIST
25774: LIST
25775: LIST
25776: ST_TO_ADDR
25777: GO 25780
25779: POP
// if state > - 1 and state < 3 then
25780: LD_VAR 0 3
25784: PUSH
25785: LD_INT 1
25787: NEG
25788: GREATER
25789: PUSH
25790: LD_VAR 0 3
25794: PUSH
25795: LD_INT 3
25797: LESS
25798: AND
25799: IFFALSE 25856
// for i in result do
25801: LD_ADDR_VAR 0 5
25805: PUSH
25806: LD_VAR 0 4
25810: PUSH
25811: FOR_IN
25812: IFFALSE 25854
// if GetTech ( i , side ) <> state then
25814: LD_VAR 0 5
25818: PPUSH
25819: LD_VAR 0 1
25823: PPUSH
25824: CALL_OW 321
25828: PUSH
25829: LD_VAR 0 3
25833: NONEQUAL
25834: IFFALSE 25852
// result := result diff i ;
25836: LD_ADDR_VAR 0 4
25840: PUSH
25841: LD_VAR 0 4
25845: PUSH
25846: LD_VAR 0 5
25850: DIFF
25851: ST_TO_ADDR
25852: GO 25811
25854: POP
25855: POP
// end ;
25856: LD_VAR 0 4
25860: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
25861: LD_INT 0
25863: PPUSH
25864: PPUSH
25865: PPUSH
// result := true ;
25866: LD_ADDR_VAR 0 3
25870: PUSH
25871: LD_INT 1
25873: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
25874: LD_ADDR_VAR 0 5
25878: PUSH
25879: LD_VAR 0 2
25883: PPUSH
25884: CALL_OW 480
25888: ST_TO_ADDR
// if not tmp then
25889: LD_VAR 0 5
25893: NOT
25894: IFFALSE 25898
// exit ;
25896: GO 25947
// for i in tmp do
25898: LD_ADDR_VAR 0 4
25902: PUSH
25903: LD_VAR 0 5
25907: PUSH
25908: FOR_IN
25909: IFFALSE 25945
// if GetTech ( i , side ) <> state_researched then
25911: LD_VAR 0 4
25915: PPUSH
25916: LD_VAR 0 1
25920: PPUSH
25921: CALL_OW 321
25925: PUSH
25926: LD_INT 2
25928: NONEQUAL
25929: IFFALSE 25943
// begin result := false ;
25931: LD_ADDR_VAR 0 3
25935: PUSH
25936: LD_INT 0
25938: ST_TO_ADDR
// exit ;
25939: POP
25940: POP
25941: GO 25947
// end ;
25943: GO 25908
25945: POP
25946: POP
// end ;
25947: LD_VAR 0 3
25951: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
25952: LD_INT 0
25954: PPUSH
25955: PPUSH
25956: PPUSH
25957: PPUSH
25958: PPUSH
25959: PPUSH
25960: PPUSH
25961: PPUSH
25962: PPUSH
25963: PPUSH
25964: PPUSH
25965: PPUSH
25966: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
25967: LD_VAR 0 1
25971: NOT
25972: PUSH
25973: LD_VAR 0 1
25977: PPUSH
25978: CALL_OW 257
25982: PUSH
25983: LD_INT 9
25985: NONEQUAL
25986: OR
25987: IFFALSE 25991
// exit ;
25989: GO 26564
// side := GetSide ( unit ) ;
25991: LD_ADDR_VAR 0 9
25995: PUSH
25996: LD_VAR 0 1
26000: PPUSH
26001: CALL_OW 255
26005: ST_TO_ADDR
// tech_space := tech_spacanom ;
26006: LD_ADDR_VAR 0 12
26010: PUSH
26011: LD_INT 29
26013: ST_TO_ADDR
// tech_time := tech_taurad ;
26014: LD_ADDR_VAR 0 13
26018: PUSH
26019: LD_INT 28
26021: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
26022: LD_ADDR_VAR 0 11
26026: PUSH
26027: LD_VAR 0 1
26031: PPUSH
26032: CALL_OW 310
26036: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
26037: LD_VAR 0 11
26041: PPUSH
26042: CALL_OW 247
26046: PUSH
26047: LD_INT 2
26049: EQUAL
26050: IFFALSE 26054
// exit ;
26052: GO 26564
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26054: LD_ADDR_VAR 0 8
26058: PUSH
26059: LD_INT 81
26061: PUSH
26062: LD_VAR 0 9
26066: PUSH
26067: EMPTY
26068: LIST
26069: LIST
26070: PUSH
26071: LD_INT 3
26073: PUSH
26074: LD_INT 21
26076: PUSH
26077: LD_INT 3
26079: PUSH
26080: EMPTY
26081: LIST
26082: LIST
26083: PUSH
26084: EMPTY
26085: LIST
26086: LIST
26087: PUSH
26088: EMPTY
26089: LIST
26090: LIST
26091: PPUSH
26092: CALL_OW 69
26096: ST_TO_ADDR
// if not tmp then
26097: LD_VAR 0 8
26101: NOT
26102: IFFALSE 26106
// exit ;
26104: GO 26564
// if in_unit then
26106: LD_VAR 0 11
26110: IFFALSE 26134
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
26112: LD_ADDR_VAR 0 10
26116: PUSH
26117: LD_VAR 0 8
26121: PPUSH
26122: LD_VAR 0 11
26126: PPUSH
26127: CALL_OW 74
26131: ST_TO_ADDR
26132: GO 26154
// enemy := NearestUnitToUnit ( tmp , unit ) ;
26134: LD_ADDR_VAR 0 10
26138: PUSH
26139: LD_VAR 0 8
26143: PPUSH
26144: LD_VAR 0 1
26148: PPUSH
26149: CALL_OW 74
26153: ST_TO_ADDR
// if not enemy then
26154: LD_VAR 0 10
26158: NOT
26159: IFFALSE 26163
// exit ;
26161: GO 26564
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
26163: LD_VAR 0 11
26167: PUSH
26168: LD_VAR 0 11
26172: PPUSH
26173: LD_VAR 0 10
26177: PPUSH
26178: CALL_OW 296
26182: PUSH
26183: LD_INT 13
26185: GREATER
26186: AND
26187: PUSH
26188: LD_VAR 0 1
26192: PPUSH
26193: LD_VAR 0 10
26197: PPUSH
26198: CALL_OW 296
26202: PUSH
26203: LD_INT 12
26205: GREATER
26206: OR
26207: IFFALSE 26211
// exit ;
26209: GO 26564
// missile := [ 1 ] ;
26211: LD_ADDR_VAR 0 14
26215: PUSH
26216: LD_INT 1
26218: PUSH
26219: EMPTY
26220: LIST
26221: ST_TO_ADDR
// if Researched ( side , tech_space ) then
26222: LD_VAR 0 9
26226: PPUSH
26227: LD_VAR 0 12
26231: PPUSH
26232: CALL_OW 325
26236: IFFALSE 26265
// missile := Replace ( missile , missile + 1 , 2 ) ;
26238: LD_ADDR_VAR 0 14
26242: PUSH
26243: LD_VAR 0 14
26247: PPUSH
26248: LD_VAR 0 14
26252: PUSH
26253: LD_INT 1
26255: PLUS
26256: PPUSH
26257: LD_INT 2
26259: PPUSH
26260: CALL_OW 1
26264: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
26265: LD_VAR 0 9
26269: PPUSH
26270: LD_VAR 0 13
26274: PPUSH
26275: CALL_OW 325
26279: PUSH
26280: LD_VAR 0 10
26284: PPUSH
26285: CALL_OW 255
26289: PPUSH
26290: LD_VAR 0 13
26294: PPUSH
26295: CALL_OW 325
26299: NOT
26300: AND
26301: IFFALSE 26330
// missile := Replace ( missile , missile + 1 , 3 ) ;
26303: LD_ADDR_VAR 0 14
26307: PUSH
26308: LD_VAR 0 14
26312: PPUSH
26313: LD_VAR 0 14
26317: PUSH
26318: LD_INT 1
26320: PLUS
26321: PPUSH
26322: LD_INT 3
26324: PPUSH
26325: CALL_OW 1
26329: ST_TO_ADDR
// if missile < 2 then
26330: LD_VAR 0 14
26334: PUSH
26335: LD_INT 2
26337: LESS
26338: IFFALSE 26342
// exit ;
26340: GO 26564
// x := GetX ( enemy ) ;
26342: LD_ADDR_VAR 0 4
26346: PUSH
26347: LD_VAR 0 10
26351: PPUSH
26352: CALL_OW 250
26356: ST_TO_ADDR
// y := GetY ( enemy ) ;
26357: LD_ADDR_VAR 0 5
26361: PUSH
26362: LD_VAR 0 10
26366: PPUSH
26367: CALL_OW 251
26371: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
26372: LD_ADDR_VAR 0 6
26376: PUSH
26377: LD_VAR 0 4
26381: PUSH
26382: LD_INT 1
26384: NEG
26385: PPUSH
26386: LD_INT 1
26388: PPUSH
26389: CALL_OW 12
26393: PLUS
26394: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
26395: LD_ADDR_VAR 0 7
26399: PUSH
26400: LD_VAR 0 5
26404: PUSH
26405: LD_INT 1
26407: NEG
26408: PPUSH
26409: LD_INT 1
26411: PPUSH
26412: CALL_OW 12
26416: PLUS
26417: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26418: LD_VAR 0 6
26422: PPUSH
26423: LD_VAR 0 7
26427: PPUSH
26428: CALL_OW 488
26432: NOT
26433: IFFALSE 26455
// begin _x := x ;
26435: LD_ADDR_VAR 0 6
26439: PUSH
26440: LD_VAR 0 4
26444: ST_TO_ADDR
// _y := y ;
26445: LD_ADDR_VAR 0 7
26449: PUSH
26450: LD_VAR 0 5
26454: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
26455: LD_ADDR_VAR 0 3
26459: PUSH
26460: LD_INT 1
26462: PPUSH
26463: LD_VAR 0 14
26467: PPUSH
26468: CALL_OW 12
26472: ST_TO_ADDR
// case i of 1 :
26473: LD_VAR 0 3
26477: PUSH
26478: LD_INT 1
26480: DOUBLE
26481: EQUAL
26482: IFTRUE 26486
26484: GO 26503
26486: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
26487: LD_VAR 0 1
26491: PPUSH
26492: LD_VAR 0 10
26496: PPUSH
26497: CALL_OW 115
26501: GO 26564
26503: LD_INT 2
26505: DOUBLE
26506: EQUAL
26507: IFTRUE 26511
26509: GO 26533
26511: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
26512: LD_VAR 0 1
26516: PPUSH
26517: LD_VAR 0 6
26521: PPUSH
26522: LD_VAR 0 7
26526: PPUSH
26527: CALL_OW 153
26531: GO 26564
26533: LD_INT 3
26535: DOUBLE
26536: EQUAL
26537: IFTRUE 26541
26539: GO 26563
26541: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
26542: LD_VAR 0 1
26546: PPUSH
26547: LD_VAR 0 6
26551: PPUSH
26552: LD_VAR 0 7
26556: PPUSH
26557: CALL_OW 154
26561: GO 26564
26563: POP
// end ;
26564: LD_VAR 0 2
26568: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
26569: LD_INT 0
26571: PPUSH
26572: PPUSH
26573: PPUSH
26574: PPUSH
26575: PPUSH
26576: PPUSH
// if not unit or not building then
26577: LD_VAR 0 1
26581: NOT
26582: PUSH
26583: LD_VAR 0 2
26587: NOT
26588: OR
26589: IFFALSE 26593
// exit ;
26591: GO 26751
// x := GetX ( building ) ;
26593: LD_ADDR_VAR 0 5
26597: PUSH
26598: LD_VAR 0 2
26602: PPUSH
26603: CALL_OW 250
26607: ST_TO_ADDR
// y := GetY ( building ) ;
26608: LD_ADDR_VAR 0 6
26612: PUSH
26613: LD_VAR 0 2
26617: PPUSH
26618: CALL_OW 251
26622: ST_TO_ADDR
// for i = 0 to 5 do
26623: LD_ADDR_VAR 0 4
26627: PUSH
26628: DOUBLE
26629: LD_INT 0
26631: DEC
26632: ST_TO_ADDR
26633: LD_INT 5
26635: PUSH
26636: FOR_TO
26637: IFFALSE 26749
// begin _x := ShiftX ( x , i , 3 ) ;
26639: LD_ADDR_VAR 0 7
26643: PUSH
26644: LD_VAR 0 5
26648: PPUSH
26649: LD_VAR 0 4
26653: PPUSH
26654: LD_INT 3
26656: PPUSH
26657: CALL_OW 272
26661: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
26662: LD_ADDR_VAR 0 8
26666: PUSH
26667: LD_VAR 0 6
26671: PPUSH
26672: LD_VAR 0 4
26676: PPUSH
26677: LD_INT 3
26679: PPUSH
26680: CALL_OW 273
26684: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26685: LD_VAR 0 7
26689: PPUSH
26690: LD_VAR 0 8
26694: PPUSH
26695: CALL_OW 488
26699: NOT
26700: IFFALSE 26704
// continue ;
26702: GO 26636
// if HexInfo ( _x , _y ) = 0 then
26704: LD_VAR 0 7
26708: PPUSH
26709: LD_VAR 0 8
26713: PPUSH
26714: CALL_OW 428
26718: PUSH
26719: LD_INT 0
26721: EQUAL
26722: IFFALSE 26747
// begin ComMoveXY ( unit , _x , _y ) ;
26724: LD_VAR 0 1
26728: PPUSH
26729: LD_VAR 0 7
26733: PPUSH
26734: LD_VAR 0 8
26738: PPUSH
26739: CALL_OW 111
// exit ;
26743: POP
26744: POP
26745: GO 26751
// end ; end ;
26747: GO 26636
26749: POP
26750: POP
// end ;
26751: LD_VAR 0 3
26755: RET
// export function ScanBase ( side , base_area ) ; begin
26756: LD_INT 0
26758: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
26759: LD_ADDR_VAR 0 3
26763: PUSH
26764: LD_VAR 0 2
26768: PPUSH
26769: LD_INT 81
26771: PUSH
26772: LD_VAR 0 1
26776: PUSH
26777: EMPTY
26778: LIST
26779: LIST
26780: PPUSH
26781: CALL_OW 70
26785: ST_TO_ADDR
// end ;
26786: LD_VAR 0 3
26790: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
26791: LD_INT 0
26793: PPUSH
26794: PPUSH
26795: PPUSH
26796: PPUSH
// result := false ;
26797: LD_ADDR_VAR 0 2
26801: PUSH
26802: LD_INT 0
26804: ST_TO_ADDR
// side := GetSide ( unit ) ;
26805: LD_ADDR_VAR 0 3
26809: PUSH
26810: LD_VAR 0 1
26814: PPUSH
26815: CALL_OW 255
26819: ST_TO_ADDR
// nat := GetNation ( unit ) ;
26820: LD_ADDR_VAR 0 4
26824: PUSH
26825: LD_VAR 0 1
26829: PPUSH
26830: CALL_OW 248
26834: ST_TO_ADDR
// case nat of 1 :
26835: LD_VAR 0 4
26839: PUSH
26840: LD_INT 1
26842: DOUBLE
26843: EQUAL
26844: IFTRUE 26848
26846: GO 26859
26848: POP
// tech := tech_lassight ; 2 :
26849: LD_ADDR_VAR 0 5
26853: PUSH
26854: LD_INT 12
26856: ST_TO_ADDR
26857: GO 26898
26859: LD_INT 2
26861: DOUBLE
26862: EQUAL
26863: IFTRUE 26867
26865: GO 26878
26867: POP
// tech := tech_mortar ; 3 :
26868: LD_ADDR_VAR 0 5
26872: PUSH
26873: LD_INT 41
26875: ST_TO_ADDR
26876: GO 26898
26878: LD_INT 3
26880: DOUBLE
26881: EQUAL
26882: IFTRUE 26886
26884: GO 26897
26886: POP
// tech := tech_bazooka ; end ;
26887: LD_ADDR_VAR 0 5
26891: PUSH
26892: LD_INT 44
26894: ST_TO_ADDR
26895: GO 26898
26897: POP
// if Researched ( side , tech ) then
26898: LD_VAR 0 3
26902: PPUSH
26903: LD_VAR 0 5
26907: PPUSH
26908: CALL_OW 325
26912: IFFALSE 26939
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
26914: LD_ADDR_VAR 0 2
26918: PUSH
26919: LD_INT 5
26921: PUSH
26922: LD_INT 8
26924: PUSH
26925: LD_INT 9
26927: PUSH
26928: EMPTY
26929: LIST
26930: LIST
26931: LIST
26932: PUSH
26933: LD_VAR 0 4
26937: ARRAY
26938: ST_TO_ADDR
// end ;
26939: LD_VAR 0 2
26943: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
26944: LD_INT 0
26946: PPUSH
26947: PPUSH
26948: PPUSH
// if not mines then
26949: LD_VAR 0 2
26953: NOT
26954: IFFALSE 26958
// exit ;
26956: GO 27102
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26958: LD_ADDR_VAR 0 5
26962: PUSH
26963: LD_INT 81
26965: PUSH
26966: LD_VAR 0 1
26970: PUSH
26971: EMPTY
26972: LIST
26973: LIST
26974: PUSH
26975: LD_INT 3
26977: PUSH
26978: LD_INT 21
26980: PUSH
26981: LD_INT 3
26983: PUSH
26984: EMPTY
26985: LIST
26986: LIST
26987: PUSH
26988: EMPTY
26989: LIST
26990: LIST
26991: PUSH
26992: EMPTY
26993: LIST
26994: LIST
26995: PPUSH
26996: CALL_OW 69
27000: ST_TO_ADDR
// for i in mines do
27001: LD_ADDR_VAR 0 4
27005: PUSH
27006: LD_VAR 0 2
27010: PUSH
27011: FOR_IN
27012: IFFALSE 27100
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
27014: LD_VAR 0 4
27018: PUSH
27019: LD_INT 1
27021: ARRAY
27022: PPUSH
27023: LD_VAR 0 4
27027: PUSH
27028: LD_INT 2
27030: ARRAY
27031: PPUSH
27032: CALL_OW 458
27036: NOT
27037: IFFALSE 27041
// continue ;
27039: GO 27011
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
27041: LD_VAR 0 4
27045: PUSH
27046: LD_INT 1
27048: ARRAY
27049: PPUSH
27050: LD_VAR 0 4
27054: PUSH
27055: LD_INT 2
27057: ARRAY
27058: PPUSH
27059: CALL_OW 428
27063: PUSH
27064: LD_VAR 0 5
27068: IN
27069: IFFALSE 27098
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
27071: LD_VAR 0 4
27075: PUSH
27076: LD_INT 1
27078: ARRAY
27079: PPUSH
27080: LD_VAR 0 4
27084: PUSH
27085: LD_INT 2
27087: ARRAY
27088: PPUSH
27089: LD_VAR 0 1
27093: PPUSH
27094: CALL_OW 456
// end ;
27098: GO 27011
27100: POP
27101: POP
// end ;
27102: LD_VAR 0 3
27106: RET
// export function Count ( array ) ; var i ; begin
27107: LD_INT 0
27109: PPUSH
27110: PPUSH
// result := 0 ;
27111: LD_ADDR_VAR 0 2
27115: PUSH
27116: LD_INT 0
27118: ST_TO_ADDR
// for i in array do
27119: LD_ADDR_VAR 0 3
27123: PUSH
27124: LD_VAR 0 1
27128: PUSH
27129: FOR_IN
27130: IFFALSE 27154
// if i then
27132: LD_VAR 0 3
27136: IFFALSE 27152
// result := result + 1 ;
27138: LD_ADDR_VAR 0 2
27142: PUSH
27143: LD_VAR 0 2
27147: PUSH
27148: LD_INT 1
27150: PLUS
27151: ST_TO_ADDR
27152: GO 27129
27154: POP
27155: POP
// end ;
27156: LD_VAR 0 2
27160: RET
// export function IsEmpty ( building ) ; begin
27161: LD_INT 0
27163: PPUSH
// if not building then
27164: LD_VAR 0 1
27168: NOT
27169: IFFALSE 27173
// exit ;
27171: GO 27216
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
27173: LD_ADDR_VAR 0 2
27177: PUSH
27178: LD_VAR 0 1
27182: PUSH
27183: LD_INT 22
27185: PUSH
27186: LD_VAR 0 1
27190: PPUSH
27191: CALL_OW 255
27195: PUSH
27196: EMPTY
27197: LIST
27198: LIST
27199: PUSH
27200: LD_INT 58
27202: PUSH
27203: EMPTY
27204: LIST
27205: PUSH
27206: EMPTY
27207: LIST
27208: LIST
27209: PPUSH
27210: CALL_OW 69
27214: IN
27215: ST_TO_ADDR
// end ;
27216: LD_VAR 0 2
27220: RET
// export function IsNotFull ( building ) ; begin
27221: LD_INT 0
27223: PPUSH
// if not building then
27224: LD_VAR 0 1
27228: NOT
27229: IFFALSE 27233
// exit ;
27231: GO 27252
// result := UnitsInside ( building ) < 6 ;
27233: LD_ADDR_VAR 0 2
27237: PUSH
27238: LD_VAR 0 1
27242: PPUSH
27243: CALL_OW 313
27247: PUSH
27248: LD_INT 6
27250: LESS
27251: ST_TO_ADDR
// end ;
27252: LD_VAR 0 2
27256: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
27257: LD_INT 0
27259: PPUSH
27260: PPUSH
27261: PPUSH
27262: PPUSH
// tmp := [ ] ;
27263: LD_ADDR_VAR 0 3
27267: PUSH
27268: EMPTY
27269: ST_TO_ADDR
// list := [ ] ;
27270: LD_ADDR_VAR 0 5
27274: PUSH
27275: EMPTY
27276: ST_TO_ADDR
// for i = 16 to 25 do
27277: LD_ADDR_VAR 0 4
27281: PUSH
27282: DOUBLE
27283: LD_INT 16
27285: DEC
27286: ST_TO_ADDR
27287: LD_INT 25
27289: PUSH
27290: FOR_TO
27291: IFFALSE 27364
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
27293: LD_ADDR_VAR 0 3
27297: PUSH
27298: LD_VAR 0 3
27302: PUSH
27303: LD_INT 22
27305: PUSH
27306: LD_VAR 0 1
27310: PPUSH
27311: CALL_OW 255
27315: PUSH
27316: EMPTY
27317: LIST
27318: LIST
27319: PUSH
27320: LD_INT 91
27322: PUSH
27323: LD_VAR 0 1
27327: PUSH
27328: LD_INT 6
27330: PUSH
27331: EMPTY
27332: LIST
27333: LIST
27334: LIST
27335: PUSH
27336: LD_INT 30
27338: PUSH
27339: LD_VAR 0 4
27343: PUSH
27344: EMPTY
27345: LIST
27346: LIST
27347: PUSH
27348: EMPTY
27349: LIST
27350: LIST
27351: LIST
27352: PUSH
27353: EMPTY
27354: LIST
27355: PPUSH
27356: CALL_OW 69
27360: ADD
27361: ST_TO_ADDR
27362: GO 27290
27364: POP
27365: POP
// for i = 1 to tmp do
27366: LD_ADDR_VAR 0 4
27370: PUSH
27371: DOUBLE
27372: LD_INT 1
27374: DEC
27375: ST_TO_ADDR
27376: LD_VAR 0 3
27380: PUSH
27381: FOR_TO
27382: IFFALSE 27470
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
27384: LD_ADDR_VAR 0 5
27388: PUSH
27389: LD_VAR 0 5
27393: PUSH
27394: LD_VAR 0 3
27398: PUSH
27399: LD_VAR 0 4
27403: ARRAY
27404: PPUSH
27405: CALL_OW 266
27409: PUSH
27410: LD_VAR 0 3
27414: PUSH
27415: LD_VAR 0 4
27419: ARRAY
27420: PPUSH
27421: CALL_OW 250
27425: PUSH
27426: LD_VAR 0 3
27430: PUSH
27431: LD_VAR 0 4
27435: ARRAY
27436: PPUSH
27437: CALL_OW 251
27441: PUSH
27442: LD_VAR 0 3
27446: PUSH
27447: LD_VAR 0 4
27451: ARRAY
27452: PPUSH
27453: CALL_OW 254
27457: PUSH
27458: EMPTY
27459: LIST
27460: LIST
27461: LIST
27462: LIST
27463: PUSH
27464: EMPTY
27465: LIST
27466: ADD
27467: ST_TO_ADDR
27468: GO 27381
27470: POP
27471: POP
// result := list ;
27472: LD_ADDR_VAR 0 2
27476: PUSH
27477: LD_VAR 0 5
27481: ST_TO_ADDR
// end ;
27482: LD_VAR 0 2
27486: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
27487: LD_INT 0
27489: PPUSH
27490: PPUSH
27491: PPUSH
27492: PPUSH
27493: PPUSH
27494: PPUSH
27495: PPUSH
// if not factory then
27496: LD_VAR 0 1
27500: NOT
27501: IFFALSE 27505
// exit ;
27503: GO 28098
// if control = control_apeman then
27505: LD_VAR 0 4
27509: PUSH
27510: LD_INT 5
27512: EQUAL
27513: IFFALSE 27622
// begin tmp := UnitsInside ( factory ) ;
27515: LD_ADDR_VAR 0 8
27519: PUSH
27520: LD_VAR 0 1
27524: PPUSH
27525: CALL_OW 313
27529: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
27530: LD_VAR 0 8
27534: PPUSH
27535: LD_INT 25
27537: PUSH
27538: LD_INT 12
27540: PUSH
27541: EMPTY
27542: LIST
27543: LIST
27544: PPUSH
27545: CALL_OW 72
27549: NOT
27550: IFFALSE 27560
// control := control_manual ;
27552: LD_ADDR_VAR 0 4
27556: PUSH
27557: LD_INT 1
27559: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
27560: LD_ADDR_VAR 0 8
27564: PUSH
27565: LD_VAR 0 1
27569: PPUSH
27570: CALL 27257 0 1
27574: ST_TO_ADDR
// if tmp then
27575: LD_VAR 0 8
27579: IFFALSE 27622
// begin for i in tmp do
27581: LD_ADDR_VAR 0 7
27585: PUSH
27586: LD_VAR 0 8
27590: PUSH
27591: FOR_IN
27592: IFFALSE 27620
// if i [ 1 ] = b_ext_radio then
27594: LD_VAR 0 7
27598: PUSH
27599: LD_INT 1
27601: ARRAY
27602: PUSH
27603: LD_INT 22
27605: EQUAL
27606: IFFALSE 27618
// begin control := control_remote ;
27608: LD_ADDR_VAR 0 4
27612: PUSH
27613: LD_INT 2
27615: ST_TO_ADDR
// break ;
27616: GO 27620
// end ;
27618: GO 27591
27620: POP
27621: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27622: LD_VAR 0 1
27626: PPUSH
27627: LD_VAR 0 2
27631: PPUSH
27632: LD_VAR 0 3
27636: PPUSH
27637: LD_VAR 0 4
27641: PPUSH
27642: LD_VAR 0 5
27646: PPUSH
27647: CALL_OW 448
27651: IFFALSE 27686
// begin result := [ chassis , engine , control , weapon ] ;
27653: LD_ADDR_VAR 0 6
27657: PUSH
27658: LD_VAR 0 2
27662: PUSH
27663: LD_VAR 0 3
27667: PUSH
27668: LD_VAR 0 4
27672: PUSH
27673: LD_VAR 0 5
27677: PUSH
27678: EMPTY
27679: LIST
27680: LIST
27681: LIST
27682: LIST
27683: ST_TO_ADDR
// exit ;
27684: GO 28098
// end ; _chassis := AvailableChassisList ( factory ) ;
27686: LD_ADDR_VAR 0 9
27690: PUSH
27691: LD_VAR 0 1
27695: PPUSH
27696: CALL_OW 475
27700: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
27701: LD_ADDR_VAR 0 11
27705: PUSH
27706: LD_VAR 0 1
27710: PPUSH
27711: CALL_OW 476
27715: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
27716: LD_ADDR_VAR 0 12
27720: PUSH
27721: LD_VAR 0 1
27725: PPUSH
27726: CALL_OW 477
27730: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
27731: LD_ADDR_VAR 0 10
27735: PUSH
27736: LD_VAR 0 1
27740: PPUSH
27741: CALL_OW 478
27745: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
27746: LD_VAR 0 9
27750: NOT
27751: PUSH
27752: LD_VAR 0 11
27756: NOT
27757: OR
27758: PUSH
27759: LD_VAR 0 12
27763: NOT
27764: OR
27765: PUSH
27766: LD_VAR 0 10
27770: NOT
27771: OR
27772: IFFALSE 27807
// begin result := [ chassis , engine , control , weapon ] ;
27774: LD_ADDR_VAR 0 6
27778: PUSH
27779: LD_VAR 0 2
27783: PUSH
27784: LD_VAR 0 3
27788: PUSH
27789: LD_VAR 0 4
27793: PUSH
27794: LD_VAR 0 5
27798: PUSH
27799: EMPTY
27800: LIST
27801: LIST
27802: LIST
27803: LIST
27804: ST_TO_ADDR
// exit ;
27805: GO 28098
// end ; if not chassis in _chassis then
27807: LD_VAR 0 2
27811: PUSH
27812: LD_VAR 0 9
27816: IN
27817: NOT
27818: IFFALSE 27844
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
27820: LD_ADDR_VAR 0 2
27824: PUSH
27825: LD_VAR 0 9
27829: PUSH
27830: LD_INT 1
27832: PPUSH
27833: LD_VAR 0 9
27837: PPUSH
27838: CALL_OW 12
27842: ARRAY
27843: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
27844: LD_VAR 0 2
27848: PPUSH
27849: LD_VAR 0 3
27853: PPUSH
27854: CALL 28103 0 2
27858: NOT
27859: IFFALSE 27918
// repeat engine := _engine [ 1 ] ;
27861: LD_ADDR_VAR 0 3
27865: PUSH
27866: LD_VAR 0 11
27870: PUSH
27871: LD_INT 1
27873: ARRAY
27874: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
27875: LD_ADDR_VAR 0 11
27879: PUSH
27880: LD_VAR 0 11
27884: PPUSH
27885: LD_INT 1
27887: PPUSH
27888: CALL_OW 3
27892: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
27893: LD_VAR 0 2
27897: PPUSH
27898: LD_VAR 0 3
27902: PPUSH
27903: CALL 28103 0 2
27907: PUSH
27908: LD_VAR 0 11
27912: PUSH
27913: EMPTY
27914: EQUAL
27915: OR
27916: IFFALSE 27861
// if not control in _control then
27918: LD_VAR 0 4
27922: PUSH
27923: LD_VAR 0 12
27927: IN
27928: NOT
27929: IFFALSE 27955
// control := _control [ rand ( 1 , _control ) ] ;
27931: LD_ADDR_VAR 0 4
27935: PUSH
27936: LD_VAR 0 12
27940: PUSH
27941: LD_INT 1
27943: PPUSH
27944: LD_VAR 0 12
27948: PPUSH
27949: CALL_OW 12
27953: ARRAY
27954: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
27955: LD_VAR 0 2
27959: PPUSH
27960: LD_VAR 0 5
27964: PPUSH
27965: CALL 28323 0 2
27969: NOT
27970: IFFALSE 28029
// repeat weapon := _weapon [ 1 ] ;
27972: LD_ADDR_VAR 0 5
27976: PUSH
27977: LD_VAR 0 10
27981: PUSH
27982: LD_INT 1
27984: ARRAY
27985: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
27986: LD_ADDR_VAR 0 10
27990: PUSH
27991: LD_VAR 0 10
27995: PPUSH
27996: LD_INT 1
27998: PPUSH
27999: CALL_OW 3
28003: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
28004: LD_VAR 0 2
28008: PPUSH
28009: LD_VAR 0 5
28013: PPUSH
28014: CALL 28323 0 2
28018: PUSH
28019: LD_VAR 0 10
28023: PUSH
28024: EMPTY
28025: EQUAL
28026: OR
28027: IFFALSE 27972
// result := [ ] ;
28029: LD_ADDR_VAR 0 6
28033: PUSH
28034: EMPTY
28035: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28036: LD_VAR 0 1
28040: PPUSH
28041: LD_VAR 0 2
28045: PPUSH
28046: LD_VAR 0 3
28050: PPUSH
28051: LD_VAR 0 4
28055: PPUSH
28056: LD_VAR 0 5
28060: PPUSH
28061: CALL_OW 448
28065: IFFALSE 28098
// result := [ chassis , engine , control , weapon ] ;
28067: LD_ADDR_VAR 0 6
28071: PUSH
28072: LD_VAR 0 2
28076: PUSH
28077: LD_VAR 0 3
28081: PUSH
28082: LD_VAR 0 4
28086: PUSH
28087: LD_VAR 0 5
28091: PUSH
28092: EMPTY
28093: LIST
28094: LIST
28095: LIST
28096: LIST
28097: ST_TO_ADDR
// end ;
28098: LD_VAR 0 6
28102: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
28103: LD_INT 0
28105: PPUSH
// if not chassis or not engine then
28106: LD_VAR 0 1
28110: NOT
28111: PUSH
28112: LD_VAR 0 2
28116: NOT
28117: OR
28118: IFFALSE 28122
// exit ;
28120: GO 28318
// case engine of engine_solar :
28122: LD_VAR 0 2
28126: PUSH
28127: LD_INT 2
28129: DOUBLE
28130: EQUAL
28131: IFTRUE 28135
28133: GO 28173
28135: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
28136: LD_ADDR_VAR 0 3
28140: PUSH
28141: LD_INT 11
28143: PUSH
28144: LD_INT 12
28146: PUSH
28147: LD_INT 13
28149: PUSH
28150: LD_INT 14
28152: PUSH
28153: LD_INT 1
28155: PUSH
28156: LD_INT 2
28158: PUSH
28159: LD_INT 3
28161: PUSH
28162: EMPTY
28163: LIST
28164: LIST
28165: LIST
28166: LIST
28167: LIST
28168: LIST
28169: LIST
28170: ST_TO_ADDR
28171: GO 28302
28173: LD_INT 1
28175: DOUBLE
28176: EQUAL
28177: IFTRUE 28181
28179: GO 28243
28181: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
28182: LD_ADDR_VAR 0 3
28186: PUSH
28187: LD_INT 11
28189: PUSH
28190: LD_INT 12
28192: PUSH
28193: LD_INT 13
28195: PUSH
28196: LD_INT 14
28198: PUSH
28199: LD_INT 1
28201: PUSH
28202: LD_INT 2
28204: PUSH
28205: LD_INT 3
28207: PUSH
28208: LD_INT 4
28210: PUSH
28211: LD_INT 5
28213: PUSH
28214: LD_INT 21
28216: PUSH
28217: LD_INT 23
28219: PUSH
28220: LD_INT 22
28222: PUSH
28223: LD_INT 24
28225: PUSH
28226: EMPTY
28227: LIST
28228: LIST
28229: LIST
28230: LIST
28231: LIST
28232: LIST
28233: LIST
28234: LIST
28235: LIST
28236: LIST
28237: LIST
28238: LIST
28239: LIST
28240: ST_TO_ADDR
28241: GO 28302
28243: LD_INT 3
28245: DOUBLE
28246: EQUAL
28247: IFTRUE 28251
28249: GO 28301
28251: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28252: LD_ADDR_VAR 0 3
28256: PUSH
28257: LD_INT 13
28259: PUSH
28260: LD_INT 14
28262: PUSH
28263: LD_INT 2
28265: PUSH
28266: LD_INT 3
28268: PUSH
28269: LD_INT 4
28271: PUSH
28272: LD_INT 5
28274: PUSH
28275: LD_INT 21
28277: PUSH
28278: LD_INT 22
28280: PUSH
28281: LD_INT 23
28283: PUSH
28284: LD_INT 24
28286: PUSH
28287: EMPTY
28288: LIST
28289: LIST
28290: LIST
28291: LIST
28292: LIST
28293: LIST
28294: LIST
28295: LIST
28296: LIST
28297: LIST
28298: ST_TO_ADDR
28299: GO 28302
28301: POP
// result := ( chassis in result ) ;
28302: LD_ADDR_VAR 0 3
28306: PUSH
28307: LD_VAR 0 1
28311: PUSH
28312: LD_VAR 0 3
28316: IN
28317: ST_TO_ADDR
// end ;
28318: LD_VAR 0 3
28322: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
28323: LD_INT 0
28325: PPUSH
// if not chassis or not weapon then
28326: LD_VAR 0 1
28330: NOT
28331: PUSH
28332: LD_VAR 0 2
28336: NOT
28337: OR
28338: IFFALSE 28342
// exit ;
28340: GO 29404
// case weapon of us_machine_gun :
28342: LD_VAR 0 2
28346: PUSH
28347: LD_INT 2
28349: DOUBLE
28350: EQUAL
28351: IFTRUE 28355
28353: GO 28385
28355: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
28356: LD_ADDR_VAR 0 3
28360: PUSH
28361: LD_INT 1
28363: PUSH
28364: LD_INT 2
28366: PUSH
28367: LD_INT 3
28369: PUSH
28370: LD_INT 4
28372: PUSH
28373: LD_INT 5
28375: PUSH
28376: EMPTY
28377: LIST
28378: LIST
28379: LIST
28380: LIST
28381: LIST
28382: ST_TO_ADDR
28383: GO 29388
28385: LD_INT 3
28387: DOUBLE
28388: EQUAL
28389: IFTRUE 28393
28391: GO 28423
28393: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
28394: LD_ADDR_VAR 0 3
28398: PUSH
28399: LD_INT 1
28401: PUSH
28402: LD_INT 2
28404: PUSH
28405: LD_INT 3
28407: PUSH
28408: LD_INT 4
28410: PUSH
28411: LD_INT 5
28413: PUSH
28414: EMPTY
28415: LIST
28416: LIST
28417: LIST
28418: LIST
28419: LIST
28420: ST_TO_ADDR
28421: GO 29388
28423: LD_INT 11
28425: DOUBLE
28426: EQUAL
28427: IFTRUE 28431
28429: GO 28461
28431: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
28432: LD_ADDR_VAR 0 3
28436: PUSH
28437: LD_INT 1
28439: PUSH
28440: LD_INT 2
28442: PUSH
28443: LD_INT 3
28445: PUSH
28446: LD_INT 4
28448: PUSH
28449: LD_INT 5
28451: PUSH
28452: EMPTY
28453: LIST
28454: LIST
28455: LIST
28456: LIST
28457: LIST
28458: ST_TO_ADDR
28459: GO 29388
28461: LD_INT 4
28463: DOUBLE
28464: EQUAL
28465: IFTRUE 28469
28467: GO 28495
28469: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
28470: LD_ADDR_VAR 0 3
28474: PUSH
28475: LD_INT 2
28477: PUSH
28478: LD_INT 3
28480: PUSH
28481: LD_INT 4
28483: PUSH
28484: LD_INT 5
28486: PUSH
28487: EMPTY
28488: LIST
28489: LIST
28490: LIST
28491: LIST
28492: ST_TO_ADDR
28493: GO 29388
28495: LD_INT 5
28497: DOUBLE
28498: EQUAL
28499: IFTRUE 28503
28501: GO 28529
28503: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
28504: LD_ADDR_VAR 0 3
28508: PUSH
28509: LD_INT 2
28511: PUSH
28512: LD_INT 3
28514: PUSH
28515: LD_INT 4
28517: PUSH
28518: LD_INT 5
28520: PUSH
28521: EMPTY
28522: LIST
28523: LIST
28524: LIST
28525: LIST
28526: ST_TO_ADDR
28527: GO 29388
28529: LD_INT 9
28531: DOUBLE
28532: EQUAL
28533: IFTRUE 28537
28535: GO 28563
28537: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
28538: LD_ADDR_VAR 0 3
28542: PUSH
28543: LD_INT 2
28545: PUSH
28546: LD_INT 3
28548: PUSH
28549: LD_INT 4
28551: PUSH
28552: LD_INT 5
28554: PUSH
28555: EMPTY
28556: LIST
28557: LIST
28558: LIST
28559: LIST
28560: ST_TO_ADDR
28561: GO 29388
28563: LD_INT 7
28565: DOUBLE
28566: EQUAL
28567: IFTRUE 28571
28569: GO 28597
28571: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
28572: LD_ADDR_VAR 0 3
28576: PUSH
28577: LD_INT 2
28579: PUSH
28580: LD_INT 3
28582: PUSH
28583: LD_INT 4
28585: PUSH
28586: LD_INT 5
28588: PUSH
28589: EMPTY
28590: LIST
28591: LIST
28592: LIST
28593: LIST
28594: ST_TO_ADDR
28595: GO 29388
28597: LD_INT 12
28599: DOUBLE
28600: EQUAL
28601: IFTRUE 28605
28603: GO 28631
28605: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
28606: LD_ADDR_VAR 0 3
28610: PUSH
28611: LD_INT 2
28613: PUSH
28614: LD_INT 3
28616: PUSH
28617: LD_INT 4
28619: PUSH
28620: LD_INT 5
28622: PUSH
28623: EMPTY
28624: LIST
28625: LIST
28626: LIST
28627: LIST
28628: ST_TO_ADDR
28629: GO 29388
28631: LD_INT 13
28633: DOUBLE
28634: EQUAL
28635: IFTRUE 28639
28637: GO 28665
28639: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
28640: LD_ADDR_VAR 0 3
28644: PUSH
28645: LD_INT 2
28647: PUSH
28648: LD_INT 3
28650: PUSH
28651: LD_INT 4
28653: PUSH
28654: LD_INT 5
28656: PUSH
28657: EMPTY
28658: LIST
28659: LIST
28660: LIST
28661: LIST
28662: ST_TO_ADDR
28663: GO 29388
28665: LD_INT 14
28667: DOUBLE
28668: EQUAL
28669: IFTRUE 28673
28671: GO 28691
28673: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
28674: LD_ADDR_VAR 0 3
28678: PUSH
28679: LD_INT 4
28681: PUSH
28682: LD_INT 5
28684: PUSH
28685: EMPTY
28686: LIST
28687: LIST
28688: ST_TO_ADDR
28689: GO 29388
28691: LD_INT 6
28693: DOUBLE
28694: EQUAL
28695: IFTRUE 28699
28697: GO 28717
28699: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
28700: LD_ADDR_VAR 0 3
28704: PUSH
28705: LD_INT 4
28707: PUSH
28708: LD_INT 5
28710: PUSH
28711: EMPTY
28712: LIST
28713: LIST
28714: ST_TO_ADDR
28715: GO 29388
28717: LD_INT 10
28719: DOUBLE
28720: EQUAL
28721: IFTRUE 28725
28723: GO 28743
28725: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
28726: LD_ADDR_VAR 0 3
28730: PUSH
28731: LD_INT 4
28733: PUSH
28734: LD_INT 5
28736: PUSH
28737: EMPTY
28738: LIST
28739: LIST
28740: ST_TO_ADDR
28741: GO 29388
28743: LD_INT 22
28745: DOUBLE
28746: EQUAL
28747: IFTRUE 28751
28749: GO 28777
28751: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
28752: LD_ADDR_VAR 0 3
28756: PUSH
28757: LD_INT 11
28759: PUSH
28760: LD_INT 12
28762: PUSH
28763: LD_INT 13
28765: PUSH
28766: LD_INT 14
28768: PUSH
28769: EMPTY
28770: LIST
28771: LIST
28772: LIST
28773: LIST
28774: ST_TO_ADDR
28775: GO 29388
28777: LD_INT 23
28779: DOUBLE
28780: EQUAL
28781: IFTRUE 28785
28783: GO 28811
28785: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
28786: LD_ADDR_VAR 0 3
28790: PUSH
28791: LD_INT 11
28793: PUSH
28794: LD_INT 12
28796: PUSH
28797: LD_INT 13
28799: PUSH
28800: LD_INT 14
28802: PUSH
28803: EMPTY
28804: LIST
28805: LIST
28806: LIST
28807: LIST
28808: ST_TO_ADDR
28809: GO 29388
28811: LD_INT 24
28813: DOUBLE
28814: EQUAL
28815: IFTRUE 28819
28817: GO 28845
28819: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
28820: LD_ADDR_VAR 0 3
28824: PUSH
28825: LD_INT 11
28827: PUSH
28828: LD_INT 12
28830: PUSH
28831: LD_INT 13
28833: PUSH
28834: LD_INT 14
28836: PUSH
28837: EMPTY
28838: LIST
28839: LIST
28840: LIST
28841: LIST
28842: ST_TO_ADDR
28843: GO 29388
28845: LD_INT 30
28847: DOUBLE
28848: EQUAL
28849: IFTRUE 28853
28851: GO 28879
28853: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
28854: LD_ADDR_VAR 0 3
28858: PUSH
28859: LD_INT 11
28861: PUSH
28862: LD_INT 12
28864: PUSH
28865: LD_INT 13
28867: PUSH
28868: LD_INT 14
28870: PUSH
28871: EMPTY
28872: LIST
28873: LIST
28874: LIST
28875: LIST
28876: ST_TO_ADDR
28877: GO 29388
28879: LD_INT 25
28881: DOUBLE
28882: EQUAL
28883: IFTRUE 28887
28885: GO 28905
28887: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
28888: LD_ADDR_VAR 0 3
28892: PUSH
28893: LD_INT 13
28895: PUSH
28896: LD_INT 14
28898: PUSH
28899: EMPTY
28900: LIST
28901: LIST
28902: ST_TO_ADDR
28903: GO 29388
28905: LD_INT 27
28907: DOUBLE
28908: EQUAL
28909: IFTRUE 28913
28911: GO 28931
28913: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
28914: LD_ADDR_VAR 0 3
28918: PUSH
28919: LD_INT 13
28921: PUSH
28922: LD_INT 14
28924: PUSH
28925: EMPTY
28926: LIST
28927: LIST
28928: ST_TO_ADDR
28929: GO 29388
28931: LD_EXP 98
28935: DOUBLE
28936: EQUAL
28937: IFTRUE 28941
28939: GO 28967
28941: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
28942: LD_ADDR_VAR 0 3
28946: PUSH
28947: LD_INT 11
28949: PUSH
28950: LD_INT 12
28952: PUSH
28953: LD_INT 13
28955: PUSH
28956: LD_INT 14
28958: PUSH
28959: EMPTY
28960: LIST
28961: LIST
28962: LIST
28963: LIST
28964: ST_TO_ADDR
28965: GO 29388
28967: LD_INT 28
28969: DOUBLE
28970: EQUAL
28971: IFTRUE 28975
28973: GO 28993
28975: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
28976: LD_ADDR_VAR 0 3
28980: PUSH
28981: LD_INT 13
28983: PUSH
28984: LD_INT 14
28986: PUSH
28987: EMPTY
28988: LIST
28989: LIST
28990: ST_TO_ADDR
28991: GO 29388
28993: LD_INT 29
28995: DOUBLE
28996: EQUAL
28997: IFTRUE 29001
28999: GO 29019
29001: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
29002: LD_ADDR_VAR 0 3
29006: PUSH
29007: LD_INT 13
29009: PUSH
29010: LD_INT 14
29012: PUSH
29013: EMPTY
29014: LIST
29015: LIST
29016: ST_TO_ADDR
29017: GO 29388
29019: LD_INT 31
29021: DOUBLE
29022: EQUAL
29023: IFTRUE 29027
29025: GO 29045
29027: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
29028: LD_ADDR_VAR 0 3
29032: PUSH
29033: LD_INT 13
29035: PUSH
29036: LD_INT 14
29038: PUSH
29039: EMPTY
29040: LIST
29041: LIST
29042: ST_TO_ADDR
29043: GO 29388
29045: LD_INT 26
29047: DOUBLE
29048: EQUAL
29049: IFTRUE 29053
29051: GO 29071
29053: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
29054: LD_ADDR_VAR 0 3
29058: PUSH
29059: LD_INT 13
29061: PUSH
29062: LD_INT 14
29064: PUSH
29065: EMPTY
29066: LIST
29067: LIST
29068: ST_TO_ADDR
29069: GO 29388
29071: LD_INT 42
29073: DOUBLE
29074: EQUAL
29075: IFTRUE 29079
29077: GO 29105
29079: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
29080: LD_ADDR_VAR 0 3
29084: PUSH
29085: LD_INT 21
29087: PUSH
29088: LD_INT 22
29090: PUSH
29091: LD_INT 23
29093: PUSH
29094: LD_INT 24
29096: PUSH
29097: EMPTY
29098: LIST
29099: LIST
29100: LIST
29101: LIST
29102: ST_TO_ADDR
29103: GO 29388
29105: LD_INT 43
29107: DOUBLE
29108: EQUAL
29109: IFTRUE 29113
29111: GO 29139
29113: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
29114: LD_ADDR_VAR 0 3
29118: PUSH
29119: LD_INT 21
29121: PUSH
29122: LD_INT 22
29124: PUSH
29125: LD_INT 23
29127: PUSH
29128: LD_INT 24
29130: PUSH
29131: EMPTY
29132: LIST
29133: LIST
29134: LIST
29135: LIST
29136: ST_TO_ADDR
29137: GO 29388
29139: LD_INT 44
29141: DOUBLE
29142: EQUAL
29143: IFTRUE 29147
29145: GO 29173
29147: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
29148: LD_ADDR_VAR 0 3
29152: PUSH
29153: LD_INT 21
29155: PUSH
29156: LD_INT 22
29158: PUSH
29159: LD_INT 23
29161: PUSH
29162: LD_INT 24
29164: PUSH
29165: EMPTY
29166: LIST
29167: LIST
29168: LIST
29169: LIST
29170: ST_TO_ADDR
29171: GO 29388
29173: LD_INT 45
29175: DOUBLE
29176: EQUAL
29177: IFTRUE 29181
29179: GO 29207
29181: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
29182: LD_ADDR_VAR 0 3
29186: PUSH
29187: LD_INT 21
29189: PUSH
29190: LD_INT 22
29192: PUSH
29193: LD_INT 23
29195: PUSH
29196: LD_INT 24
29198: PUSH
29199: EMPTY
29200: LIST
29201: LIST
29202: LIST
29203: LIST
29204: ST_TO_ADDR
29205: GO 29388
29207: LD_INT 49
29209: DOUBLE
29210: EQUAL
29211: IFTRUE 29215
29213: GO 29241
29215: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
29216: LD_ADDR_VAR 0 3
29220: PUSH
29221: LD_INT 21
29223: PUSH
29224: LD_INT 22
29226: PUSH
29227: LD_INT 23
29229: PUSH
29230: LD_INT 24
29232: PUSH
29233: EMPTY
29234: LIST
29235: LIST
29236: LIST
29237: LIST
29238: ST_TO_ADDR
29239: GO 29388
29241: LD_INT 51
29243: DOUBLE
29244: EQUAL
29245: IFTRUE 29249
29247: GO 29275
29249: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
29250: LD_ADDR_VAR 0 3
29254: PUSH
29255: LD_INT 21
29257: PUSH
29258: LD_INT 22
29260: PUSH
29261: LD_INT 23
29263: PUSH
29264: LD_INT 24
29266: PUSH
29267: EMPTY
29268: LIST
29269: LIST
29270: LIST
29271: LIST
29272: ST_TO_ADDR
29273: GO 29388
29275: LD_INT 52
29277: DOUBLE
29278: EQUAL
29279: IFTRUE 29283
29281: GO 29309
29283: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
29284: LD_ADDR_VAR 0 3
29288: PUSH
29289: LD_INT 21
29291: PUSH
29292: LD_INT 22
29294: PUSH
29295: LD_INT 23
29297: PUSH
29298: LD_INT 24
29300: PUSH
29301: EMPTY
29302: LIST
29303: LIST
29304: LIST
29305: LIST
29306: ST_TO_ADDR
29307: GO 29388
29309: LD_INT 53
29311: DOUBLE
29312: EQUAL
29313: IFTRUE 29317
29315: GO 29335
29317: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
29318: LD_ADDR_VAR 0 3
29322: PUSH
29323: LD_INT 23
29325: PUSH
29326: LD_INT 24
29328: PUSH
29329: EMPTY
29330: LIST
29331: LIST
29332: ST_TO_ADDR
29333: GO 29388
29335: LD_INT 46
29337: DOUBLE
29338: EQUAL
29339: IFTRUE 29343
29341: GO 29361
29343: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
29344: LD_ADDR_VAR 0 3
29348: PUSH
29349: LD_INT 23
29351: PUSH
29352: LD_INT 24
29354: PUSH
29355: EMPTY
29356: LIST
29357: LIST
29358: ST_TO_ADDR
29359: GO 29388
29361: LD_INT 47
29363: DOUBLE
29364: EQUAL
29365: IFTRUE 29369
29367: GO 29387
29369: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29370: LD_ADDR_VAR 0 3
29374: PUSH
29375: LD_INT 23
29377: PUSH
29378: LD_INT 24
29380: PUSH
29381: EMPTY
29382: LIST
29383: LIST
29384: ST_TO_ADDR
29385: GO 29388
29387: POP
// result := ( chassis in result ) ;
29388: LD_ADDR_VAR 0 3
29392: PUSH
29393: LD_VAR 0 1
29397: PUSH
29398: LD_VAR 0 3
29402: IN
29403: ST_TO_ADDR
// end ;
29404: LD_VAR 0 3
29408: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
29409: LD_INT 0
29411: PPUSH
29412: PPUSH
29413: PPUSH
29414: PPUSH
29415: PPUSH
29416: PPUSH
29417: PPUSH
// result := array ;
29418: LD_ADDR_VAR 0 5
29422: PUSH
29423: LD_VAR 0 1
29427: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
29428: LD_VAR 0 1
29432: NOT
29433: PUSH
29434: LD_VAR 0 2
29438: NOT
29439: OR
29440: PUSH
29441: LD_VAR 0 3
29445: NOT
29446: OR
29447: PUSH
29448: LD_VAR 0 2
29452: PUSH
29453: LD_VAR 0 1
29457: GREATER
29458: OR
29459: PUSH
29460: LD_VAR 0 3
29464: PUSH
29465: LD_VAR 0 1
29469: GREATER
29470: OR
29471: IFFALSE 29475
// exit ;
29473: GO 29771
// if direction then
29475: LD_VAR 0 4
29479: IFFALSE 29543
// begin d := 1 ;
29481: LD_ADDR_VAR 0 9
29485: PUSH
29486: LD_INT 1
29488: ST_TO_ADDR
// if i_from > i_to then
29489: LD_VAR 0 2
29493: PUSH
29494: LD_VAR 0 3
29498: GREATER
29499: IFFALSE 29525
// length := ( array - i_from ) + i_to else
29501: LD_ADDR_VAR 0 11
29505: PUSH
29506: LD_VAR 0 1
29510: PUSH
29511: LD_VAR 0 2
29515: MINUS
29516: PUSH
29517: LD_VAR 0 3
29521: PLUS
29522: ST_TO_ADDR
29523: GO 29541
// length := i_to - i_from ;
29525: LD_ADDR_VAR 0 11
29529: PUSH
29530: LD_VAR 0 3
29534: PUSH
29535: LD_VAR 0 2
29539: MINUS
29540: ST_TO_ADDR
// end else
29541: GO 29604
// begin d := - 1 ;
29543: LD_ADDR_VAR 0 9
29547: PUSH
29548: LD_INT 1
29550: NEG
29551: ST_TO_ADDR
// if i_from > i_to then
29552: LD_VAR 0 2
29556: PUSH
29557: LD_VAR 0 3
29561: GREATER
29562: IFFALSE 29582
// length := i_from - i_to else
29564: LD_ADDR_VAR 0 11
29568: PUSH
29569: LD_VAR 0 2
29573: PUSH
29574: LD_VAR 0 3
29578: MINUS
29579: ST_TO_ADDR
29580: GO 29604
// length := ( array - i_to ) + i_from ;
29582: LD_ADDR_VAR 0 11
29586: PUSH
29587: LD_VAR 0 1
29591: PUSH
29592: LD_VAR 0 3
29596: MINUS
29597: PUSH
29598: LD_VAR 0 2
29602: PLUS
29603: ST_TO_ADDR
// end ; if not length then
29604: LD_VAR 0 11
29608: NOT
29609: IFFALSE 29613
// exit ;
29611: GO 29771
// tmp := array ;
29613: LD_ADDR_VAR 0 10
29617: PUSH
29618: LD_VAR 0 1
29622: ST_TO_ADDR
// for i = 1 to length do
29623: LD_ADDR_VAR 0 6
29627: PUSH
29628: DOUBLE
29629: LD_INT 1
29631: DEC
29632: ST_TO_ADDR
29633: LD_VAR 0 11
29637: PUSH
29638: FOR_TO
29639: IFFALSE 29759
// begin for j = 1 to array do
29641: LD_ADDR_VAR 0 7
29645: PUSH
29646: DOUBLE
29647: LD_INT 1
29649: DEC
29650: ST_TO_ADDR
29651: LD_VAR 0 1
29655: PUSH
29656: FOR_TO
29657: IFFALSE 29745
// begin k := j + d ;
29659: LD_ADDR_VAR 0 8
29663: PUSH
29664: LD_VAR 0 7
29668: PUSH
29669: LD_VAR 0 9
29673: PLUS
29674: ST_TO_ADDR
// if k > array then
29675: LD_VAR 0 8
29679: PUSH
29680: LD_VAR 0 1
29684: GREATER
29685: IFFALSE 29695
// k := 1 ;
29687: LD_ADDR_VAR 0 8
29691: PUSH
29692: LD_INT 1
29694: ST_TO_ADDR
// if not k then
29695: LD_VAR 0 8
29699: NOT
29700: IFFALSE 29712
// k := array ;
29702: LD_ADDR_VAR 0 8
29706: PUSH
29707: LD_VAR 0 1
29711: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
29712: LD_ADDR_VAR 0 10
29716: PUSH
29717: LD_VAR 0 10
29721: PPUSH
29722: LD_VAR 0 8
29726: PPUSH
29727: LD_VAR 0 1
29731: PUSH
29732: LD_VAR 0 7
29736: ARRAY
29737: PPUSH
29738: CALL_OW 1
29742: ST_TO_ADDR
// end ;
29743: GO 29656
29745: POP
29746: POP
// array := tmp ;
29747: LD_ADDR_VAR 0 1
29751: PUSH
29752: LD_VAR 0 10
29756: ST_TO_ADDR
// end ;
29757: GO 29638
29759: POP
29760: POP
// result := array ;
29761: LD_ADDR_VAR 0 5
29765: PUSH
29766: LD_VAR 0 1
29770: ST_TO_ADDR
// end ;
29771: LD_VAR 0 5
29775: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
29776: LD_INT 0
29778: PPUSH
29779: PPUSH
// result := 0 ;
29780: LD_ADDR_VAR 0 3
29784: PUSH
29785: LD_INT 0
29787: ST_TO_ADDR
// if not array or not value in array then
29788: LD_VAR 0 1
29792: NOT
29793: PUSH
29794: LD_VAR 0 2
29798: PUSH
29799: LD_VAR 0 1
29803: IN
29804: NOT
29805: OR
29806: IFFALSE 29810
// exit ;
29808: GO 29864
// for i = 1 to array do
29810: LD_ADDR_VAR 0 4
29814: PUSH
29815: DOUBLE
29816: LD_INT 1
29818: DEC
29819: ST_TO_ADDR
29820: LD_VAR 0 1
29824: PUSH
29825: FOR_TO
29826: IFFALSE 29862
// if value = array [ i ] then
29828: LD_VAR 0 2
29832: PUSH
29833: LD_VAR 0 1
29837: PUSH
29838: LD_VAR 0 4
29842: ARRAY
29843: EQUAL
29844: IFFALSE 29860
// begin result := i ;
29846: LD_ADDR_VAR 0 3
29850: PUSH
29851: LD_VAR 0 4
29855: ST_TO_ADDR
// exit ;
29856: POP
29857: POP
29858: GO 29864
// end ;
29860: GO 29825
29862: POP
29863: POP
// end ;
29864: LD_VAR 0 3
29868: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
29869: LD_INT 0
29871: PPUSH
// vc_chassis := chassis ;
29872: LD_ADDR_OWVAR 37
29876: PUSH
29877: LD_VAR 0 1
29881: ST_TO_ADDR
// vc_engine := engine ;
29882: LD_ADDR_OWVAR 39
29886: PUSH
29887: LD_VAR 0 2
29891: ST_TO_ADDR
// vc_control := control ;
29892: LD_ADDR_OWVAR 38
29896: PUSH
29897: LD_VAR 0 3
29901: ST_TO_ADDR
// vc_weapon := weapon ;
29902: LD_ADDR_OWVAR 40
29906: PUSH
29907: LD_VAR 0 4
29911: ST_TO_ADDR
// vc_fuel_battery := fuel ;
29912: LD_ADDR_OWVAR 41
29916: PUSH
29917: LD_VAR 0 5
29921: ST_TO_ADDR
// end ;
29922: LD_VAR 0 6
29926: RET
// export function WantPlant ( unit ) ; var task ; begin
29927: LD_INT 0
29929: PPUSH
29930: PPUSH
// result := false ;
29931: LD_ADDR_VAR 0 2
29935: PUSH
29936: LD_INT 0
29938: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
29939: LD_ADDR_VAR 0 3
29943: PUSH
29944: LD_VAR 0 1
29948: PPUSH
29949: CALL_OW 437
29953: ST_TO_ADDR
// if task then
29954: LD_VAR 0 3
29958: IFFALSE 29986
// if task [ 1 ] [ 1 ] = p then
29960: LD_VAR 0 3
29964: PUSH
29965: LD_INT 1
29967: ARRAY
29968: PUSH
29969: LD_INT 1
29971: ARRAY
29972: PUSH
29973: LD_STRING p
29975: EQUAL
29976: IFFALSE 29986
// result := true ;
29978: LD_ADDR_VAR 0 2
29982: PUSH
29983: LD_INT 1
29985: ST_TO_ADDR
// end ;
29986: LD_VAR 0 2
29990: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
29991: LD_INT 0
29993: PPUSH
29994: PPUSH
29995: PPUSH
29996: PPUSH
// if pos < 1 then
29997: LD_VAR 0 2
30001: PUSH
30002: LD_INT 1
30004: LESS
30005: IFFALSE 30009
// exit ;
30007: GO 30312
// if pos = 1 then
30009: LD_VAR 0 2
30013: PUSH
30014: LD_INT 1
30016: EQUAL
30017: IFFALSE 30050
// result := Replace ( arr , pos [ 1 ] , value ) else
30019: LD_ADDR_VAR 0 4
30023: PUSH
30024: LD_VAR 0 1
30028: PPUSH
30029: LD_VAR 0 2
30033: PUSH
30034: LD_INT 1
30036: ARRAY
30037: PPUSH
30038: LD_VAR 0 3
30042: PPUSH
30043: CALL_OW 1
30047: ST_TO_ADDR
30048: GO 30312
// begin tmp := arr ;
30050: LD_ADDR_VAR 0 6
30054: PUSH
30055: LD_VAR 0 1
30059: ST_TO_ADDR
// s_arr := [ tmp ] ;
30060: LD_ADDR_VAR 0 7
30064: PUSH
30065: LD_VAR 0 6
30069: PUSH
30070: EMPTY
30071: LIST
30072: ST_TO_ADDR
// for i = 1 to pos - 1 do
30073: LD_ADDR_VAR 0 5
30077: PUSH
30078: DOUBLE
30079: LD_INT 1
30081: DEC
30082: ST_TO_ADDR
30083: LD_VAR 0 2
30087: PUSH
30088: LD_INT 1
30090: MINUS
30091: PUSH
30092: FOR_TO
30093: IFFALSE 30138
// begin tmp := tmp [ pos [ i ] ] ;
30095: LD_ADDR_VAR 0 6
30099: PUSH
30100: LD_VAR 0 6
30104: PUSH
30105: LD_VAR 0 2
30109: PUSH
30110: LD_VAR 0 5
30114: ARRAY
30115: ARRAY
30116: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
30117: LD_ADDR_VAR 0 7
30121: PUSH
30122: LD_VAR 0 7
30126: PUSH
30127: LD_VAR 0 6
30131: PUSH
30132: EMPTY
30133: LIST
30134: ADD
30135: ST_TO_ADDR
// end ;
30136: GO 30092
30138: POP
30139: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
30140: LD_ADDR_VAR 0 6
30144: PUSH
30145: LD_VAR 0 6
30149: PPUSH
30150: LD_VAR 0 2
30154: PUSH
30155: LD_VAR 0 2
30159: ARRAY
30160: PPUSH
30161: LD_VAR 0 3
30165: PPUSH
30166: CALL_OW 1
30170: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
30171: LD_ADDR_VAR 0 7
30175: PUSH
30176: LD_VAR 0 7
30180: PPUSH
30181: LD_VAR 0 7
30185: PPUSH
30186: LD_VAR 0 6
30190: PPUSH
30191: CALL_OW 1
30195: ST_TO_ADDR
// for i = s_arr downto 2 do
30196: LD_ADDR_VAR 0 5
30200: PUSH
30201: DOUBLE
30202: LD_VAR 0 7
30206: INC
30207: ST_TO_ADDR
30208: LD_INT 2
30210: PUSH
30211: FOR_DOWNTO
30212: IFFALSE 30296
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
30214: LD_ADDR_VAR 0 6
30218: PUSH
30219: LD_VAR 0 7
30223: PUSH
30224: LD_VAR 0 5
30228: PUSH
30229: LD_INT 1
30231: MINUS
30232: ARRAY
30233: PPUSH
30234: LD_VAR 0 2
30238: PUSH
30239: LD_VAR 0 5
30243: PUSH
30244: LD_INT 1
30246: MINUS
30247: ARRAY
30248: PPUSH
30249: LD_VAR 0 7
30253: PUSH
30254: LD_VAR 0 5
30258: ARRAY
30259: PPUSH
30260: CALL_OW 1
30264: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
30265: LD_ADDR_VAR 0 7
30269: PUSH
30270: LD_VAR 0 7
30274: PPUSH
30275: LD_VAR 0 5
30279: PUSH
30280: LD_INT 1
30282: MINUS
30283: PPUSH
30284: LD_VAR 0 6
30288: PPUSH
30289: CALL_OW 1
30293: ST_TO_ADDR
// end ;
30294: GO 30211
30296: POP
30297: POP
// result := s_arr [ 1 ] ;
30298: LD_ADDR_VAR 0 4
30302: PUSH
30303: LD_VAR 0 7
30307: PUSH
30308: LD_INT 1
30310: ARRAY
30311: ST_TO_ADDR
// end ; end ;
30312: LD_VAR 0 4
30316: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
30317: LD_INT 0
30319: PPUSH
30320: PPUSH
// if not list then
30321: LD_VAR 0 1
30325: NOT
30326: IFFALSE 30330
// exit ;
30328: GO 30421
// i := list [ pos1 ] ;
30330: LD_ADDR_VAR 0 5
30334: PUSH
30335: LD_VAR 0 1
30339: PUSH
30340: LD_VAR 0 2
30344: ARRAY
30345: ST_TO_ADDR
// if not i then
30346: LD_VAR 0 5
30350: NOT
30351: IFFALSE 30355
// exit ;
30353: GO 30421
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
30355: LD_ADDR_VAR 0 1
30359: PUSH
30360: LD_VAR 0 1
30364: PPUSH
30365: LD_VAR 0 2
30369: PPUSH
30370: LD_VAR 0 1
30374: PUSH
30375: LD_VAR 0 3
30379: ARRAY
30380: PPUSH
30381: CALL_OW 1
30385: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
30386: LD_ADDR_VAR 0 1
30390: PUSH
30391: LD_VAR 0 1
30395: PPUSH
30396: LD_VAR 0 3
30400: PPUSH
30401: LD_VAR 0 5
30405: PPUSH
30406: CALL_OW 1
30410: ST_TO_ADDR
// result := list ;
30411: LD_ADDR_VAR 0 4
30415: PUSH
30416: LD_VAR 0 1
30420: ST_TO_ADDR
// end ;
30421: LD_VAR 0 4
30425: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
30426: LD_INT 0
30428: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
30429: LD_ADDR_VAR 0 5
30433: PUSH
30434: LD_VAR 0 1
30438: PPUSH
30439: CALL_OW 250
30443: PPUSH
30444: LD_VAR 0 1
30448: PPUSH
30449: CALL_OW 251
30453: PPUSH
30454: LD_VAR 0 2
30458: PPUSH
30459: LD_VAR 0 3
30463: PPUSH
30464: LD_VAR 0 4
30468: PPUSH
30469: CALL 30479 0 5
30473: ST_TO_ADDR
// end ;
30474: LD_VAR 0 5
30478: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
30479: LD_INT 0
30481: PPUSH
30482: PPUSH
30483: PPUSH
30484: PPUSH
// if not list then
30485: LD_VAR 0 3
30489: NOT
30490: IFFALSE 30494
// exit ;
30492: GO 30882
// result := [ ] ;
30494: LD_ADDR_VAR 0 6
30498: PUSH
30499: EMPTY
30500: ST_TO_ADDR
// for i in list do
30501: LD_ADDR_VAR 0 7
30505: PUSH
30506: LD_VAR 0 3
30510: PUSH
30511: FOR_IN
30512: IFFALSE 30714
// begin tmp := GetDistUnitXY ( i , x , y ) ;
30514: LD_ADDR_VAR 0 9
30518: PUSH
30519: LD_VAR 0 7
30523: PPUSH
30524: LD_VAR 0 1
30528: PPUSH
30529: LD_VAR 0 2
30533: PPUSH
30534: CALL_OW 297
30538: ST_TO_ADDR
// if not result then
30539: LD_VAR 0 6
30543: NOT
30544: IFFALSE 30570
// result := [ [ i , tmp ] ] else
30546: LD_ADDR_VAR 0 6
30550: PUSH
30551: LD_VAR 0 7
30555: PUSH
30556: LD_VAR 0 9
30560: PUSH
30561: EMPTY
30562: LIST
30563: LIST
30564: PUSH
30565: EMPTY
30566: LIST
30567: ST_TO_ADDR
30568: GO 30712
// begin if result [ result ] [ 2 ] < tmp then
30570: LD_VAR 0 6
30574: PUSH
30575: LD_VAR 0 6
30579: ARRAY
30580: PUSH
30581: LD_INT 2
30583: ARRAY
30584: PUSH
30585: LD_VAR 0 9
30589: LESS
30590: IFFALSE 30632
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
30592: LD_ADDR_VAR 0 6
30596: PUSH
30597: LD_VAR 0 6
30601: PPUSH
30602: LD_VAR 0 6
30606: PUSH
30607: LD_INT 1
30609: PLUS
30610: PPUSH
30611: LD_VAR 0 7
30615: PUSH
30616: LD_VAR 0 9
30620: PUSH
30621: EMPTY
30622: LIST
30623: LIST
30624: PPUSH
30625: CALL_OW 2
30629: ST_TO_ADDR
30630: GO 30712
// for j = 1 to result do
30632: LD_ADDR_VAR 0 8
30636: PUSH
30637: DOUBLE
30638: LD_INT 1
30640: DEC
30641: ST_TO_ADDR
30642: LD_VAR 0 6
30646: PUSH
30647: FOR_TO
30648: IFFALSE 30710
// begin if tmp < result [ j ] [ 2 ] then
30650: LD_VAR 0 9
30654: PUSH
30655: LD_VAR 0 6
30659: PUSH
30660: LD_VAR 0 8
30664: ARRAY
30665: PUSH
30666: LD_INT 2
30668: ARRAY
30669: LESS
30670: IFFALSE 30708
// begin result := Insert ( result , j , [ i , tmp ] ) ;
30672: LD_ADDR_VAR 0 6
30676: PUSH
30677: LD_VAR 0 6
30681: PPUSH
30682: LD_VAR 0 8
30686: PPUSH
30687: LD_VAR 0 7
30691: PUSH
30692: LD_VAR 0 9
30696: PUSH
30697: EMPTY
30698: LIST
30699: LIST
30700: PPUSH
30701: CALL_OW 2
30705: ST_TO_ADDR
// break ;
30706: GO 30710
// end ; end ;
30708: GO 30647
30710: POP
30711: POP
// end ; end ;
30712: GO 30511
30714: POP
30715: POP
// if result and not asc then
30716: LD_VAR 0 6
30720: PUSH
30721: LD_VAR 0 4
30725: NOT
30726: AND
30727: IFFALSE 30802
// begin tmp := result ;
30729: LD_ADDR_VAR 0 9
30733: PUSH
30734: LD_VAR 0 6
30738: ST_TO_ADDR
// for i = tmp downto 1 do
30739: LD_ADDR_VAR 0 7
30743: PUSH
30744: DOUBLE
30745: LD_VAR 0 9
30749: INC
30750: ST_TO_ADDR
30751: LD_INT 1
30753: PUSH
30754: FOR_DOWNTO
30755: IFFALSE 30800
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
30757: LD_ADDR_VAR 0 6
30761: PUSH
30762: LD_VAR 0 6
30766: PPUSH
30767: LD_VAR 0 9
30771: PUSH
30772: LD_VAR 0 7
30776: MINUS
30777: PUSH
30778: LD_INT 1
30780: PLUS
30781: PPUSH
30782: LD_VAR 0 9
30786: PUSH
30787: LD_VAR 0 7
30791: ARRAY
30792: PPUSH
30793: CALL_OW 1
30797: ST_TO_ADDR
30798: GO 30754
30800: POP
30801: POP
// end ; tmp := [ ] ;
30802: LD_ADDR_VAR 0 9
30806: PUSH
30807: EMPTY
30808: ST_TO_ADDR
// if mode then
30809: LD_VAR 0 5
30813: IFFALSE 30882
// begin for i = 1 to result do
30815: LD_ADDR_VAR 0 7
30819: PUSH
30820: DOUBLE
30821: LD_INT 1
30823: DEC
30824: ST_TO_ADDR
30825: LD_VAR 0 6
30829: PUSH
30830: FOR_TO
30831: IFFALSE 30870
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
30833: LD_ADDR_VAR 0 9
30837: PUSH
30838: LD_VAR 0 9
30842: PPUSH
30843: LD_VAR 0 7
30847: PPUSH
30848: LD_VAR 0 6
30852: PUSH
30853: LD_VAR 0 7
30857: ARRAY
30858: PUSH
30859: LD_INT 1
30861: ARRAY
30862: PPUSH
30863: CALL_OW 1
30867: ST_TO_ADDR
30868: GO 30830
30870: POP
30871: POP
// result := tmp ;
30872: LD_ADDR_VAR 0 6
30876: PUSH
30877: LD_VAR 0 9
30881: ST_TO_ADDR
// end ; end ;
30882: LD_VAR 0 6
30886: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
30887: LD_INT 0
30889: PPUSH
30890: PPUSH
30891: PPUSH
30892: PPUSH
30893: PPUSH
30894: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
30895: LD_ADDR_VAR 0 5
30899: PUSH
30900: LD_INT 0
30902: PUSH
30903: LD_INT 0
30905: PUSH
30906: LD_INT 0
30908: PUSH
30909: EMPTY
30910: PUSH
30911: EMPTY
30912: LIST
30913: LIST
30914: LIST
30915: LIST
30916: ST_TO_ADDR
// if not x or not y then
30917: LD_VAR 0 2
30921: NOT
30922: PUSH
30923: LD_VAR 0 3
30927: NOT
30928: OR
30929: IFFALSE 30933
// exit ;
30931: GO 32585
// if not range then
30933: LD_VAR 0 4
30937: NOT
30938: IFFALSE 30948
// range := 10 ;
30940: LD_ADDR_VAR 0 4
30944: PUSH
30945: LD_INT 10
30947: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30948: LD_ADDR_VAR 0 8
30952: PUSH
30953: LD_INT 81
30955: PUSH
30956: LD_VAR 0 1
30960: PUSH
30961: EMPTY
30962: LIST
30963: LIST
30964: PUSH
30965: LD_INT 92
30967: PUSH
30968: LD_VAR 0 2
30972: PUSH
30973: LD_VAR 0 3
30977: PUSH
30978: LD_VAR 0 4
30982: PUSH
30983: EMPTY
30984: LIST
30985: LIST
30986: LIST
30987: LIST
30988: PUSH
30989: LD_INT 3
30991: PUSH
30992: LD_INT 21
30994: PUSH
30995: LD_INT 3
30997: PUSH
30998: EMPTY
30999: LIST
31000: LIST
31001: PUSH
31002: EMPTY
31003: LIST
31004: LIST
31005: PUSH
31006: EMPTY
31007: LIST
31008: LIST
31009: LIST
31010: PPUSH
31011: CALL_OW 69
31015: ST_TO_ADDR
// if not tmp then
31016: LD_VAR 0 8
31020: NOT
31021: IFFALSE 31025
// exit ;
31023: GO 32585
// for i in tmp do
31025: LD_ADDR_VAR 0 6
31029: PUSH
31030: LD_VAR 0 8
31034: PUSH
31035: FOR_IN
31036: IFFALSE 32560
// begin points := [ 0 , 0 , 0 ] ;
31038: LD_ADDR_VAR 0 9
31042: PUSH
31043: LD_INT 0
31045: PUSH
31046: LD_INT 0
31048: PUSH
31049: LD_INT 0
31051: PUSH
31052: EMPTY
31053: LIST
31054: LIST
31055: LIST
31056: ST_TO_ADDR
// bpoints := 1 ;
31057: LD_ADDR_VAR 0 10
31061: PUSH
31062: LD_INT 1
31064: ST_TO_ADDR
// case GetType ( i ) of unit_human :
31065: LD_VAR 0 6
31069: PPUSH
31070: CALL_OW 247
31074: PUSH
31075: LD_INT 1
31077: DOUBLE
31078: EQUAL
31079: IFTRUE 31083
31081: GO 31661
31083: POP
// begin if GetClass ( i ) = 1 then
31084: LD_VAR 0 6
31088: PPUSH
31089: CALL_OW 257
31093: PUSH
31094: LD_INT 1
31096: EQUAL
31097: IFFALSE 31118
// points := [ 10 , 5 , 3 ] ;
31099: LD_ADDR_VAR 0 9
31103: PUSH
31104: LD_INT 10
31106: PUSH
31107: LD_INT 5
31109: PUSH
31110: LD_INT 3
31112: PUSH
31113: EMPTY
31114: LIST
31115: LIST
31116: LIST
31117: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
31118: LD_VAR 0 6
31122: PPUSH
31123: CALL_OW 257
31127: PUSH
31128: LD_INT 2
31130: PUSH
31131: LD_INT 3
31133: PUSH
31134: LD_INT 4
31136: PUSH
31137: EMPTY
31138: LIST
31139: LIST
31140: LIST
31141: IN
31142: IFFALSE 31163
// points := [ 3 , 2 , 1 ] ;
31144: LD_ADDR_VAR 0 9
31148: PUSH
31149: LD_INT 3
31151: PUSH
31152: LD_INT 2
31154: PUSH
31155: LD_INT 1
31157: PUSH
31158: EMPTY
31159: LIST
31160: LIST
31161: LIST
31162: ST_TO_ADDR
// if GetClass ( i ) = 5 then
31163: LD_VAR 0 6
31167: PPUSH
31168: CALL_OW 257
31172: PUSH
31173: LD_INT 5
31175: EQUAL
31176: IFFALSE 31197
// points := [ 130 , 5 , 2 ] ;
31178: LD_ADDR_VAR 0 9
31182: PUSH
31183: LD_INT 130
31185: PUSH
31186: LD_INT 5
31188: PUSH
31189: LD_INT 2
31191: PUSH
31192: EMPTY
31193: LIST
31194: LIST
31195: LIST
31196: ST_TO_ADDR
// if GetClass ( i ) = 8 then
31197: LD_VAR 0 6
31201: PPUSH
31202: CALL_OW 257
31206: PUSH
31207: LD_INT 8
31209: EQUAL
31210: IFFALSE 31231
// points := [ 35 , 35 , 30 ] ;
31212: LD_ADDR_VAR 0 9
31216: PUSH
31217: LD_INT 35
31219: PUSH
31220: LD_INT 35
31222: PUSH
31223: LD_INT 30
31225: PUSH
31226: EMPTY
31227: LIST
31228: LIST
31229: LIST
31230: ST_TO_ADDR
// if GetClass ( i ) = 9 then
31231: LD_VAR 0 6
31235: PPUSH
31236: CALL_OW 257
31240: PUSH
31241: LD_INT 9
31243: EQUAL
31244: IFFALSE 31265
// points := [ 20 , 55 , 40 ] ;
31246: LD_ADDR_VAR 0 9
31250: PUSH
31251: LD_INT 20
31253: PUSH
31254: LD_INT 55
31256: PUSH
31257: LD_INT 40
31259: PUSH
31260: EMPTY
31261: LIST
31262: LIST
31263: LIST
31264: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
31265: LD_VAR 0 6
31269: PPUSH
31270: CALL_OW 257
31274: PUSH
31275: LD_INT 12
31277: PUSH
31278: LD_INT 16
31280: PUSH
31281: EMPTY
31282: LIST
31283: LIST
31284: IN
31285: IFFALSE 31306
// points := [ 5 , 3 , 2 ] ;
31287: LD_ADDR_VAR 0 9
31291: PUSH
31292: LD_INT 5
31294: PUSH
31295: LD_INT 3
31297: PUSH
31298: LD_INT 2
31300: PUSH
31301: EMPTY
31302: LIST
31303: LIST
31304: LIST
31305: ST_TO_ADDR
// if GetClass ( i ) = 17 then
31306: LD_VAR 0 6
31310: PPUSH
31311: CALL_OW 257
31315: PUSH
31316: LD_INT 17
31318: EQUAL
31319: IFFALSE 31340
// points := [ 100 , 50 , 75 ] ;
31321: LD_ADDR_VAR 0 9
31325: PUSH
31326: LD_INT 100
31328: PUSH
31329: LD_INT 50
31331: PUSH
31332: LD_INT 75
31334: PUSH
31335: EMPTY
31336: LIST
31337: LIST
31338: LIST
31339: ST_TO_ADDR
// if GetClass ( i ) = 15 then
31340: LD_VAR 0 6
31344: PPUSH
31345: CALL_OW 257
31349: PUSH
31350: LD_INT 15
31352: EQUAL
31353: IFFALSE 31374
// points := [ 10 , 5 , 3 ] ;
31355: LD_ADDR_VAR 0 9
31359: PUSH
31360: LD_INT 10
31362: PUSH
31363: LD_INT 5
31365: PUSH
31366: LD_INT 3
31368: PUSH
31369: EMPTY
31370: LIST
31371: LIST
31372: LIST
31373: ST_TO_ADDR
// if GetClass ( i ) = 14 then
31374: LD_VAR 0 6
31378: PPUSH
31379: CALL_OW 257
31383: PUSH
31384: LD_INT 14
31386: EQUAL
31387: IFFALSE 31408
// points := [ 10 , 0 , 0 ] ;
31389: LD_ADDR_VAR 0 9
31393: PUSH
31394: LD_INT 10
31396: PUSH
31397: LD_INT 0
31399: PUSH
31400: LD_INT 0
31402: PUSH
31403: EMPTY
31404: LIST
31405: LIST
31406: LIST
31407: ST_TO_ADDR
// if GetClass ( i ) = 11 then
31408: LD_VAR 0 6
31412: PPUSH
31413: CALL_OW 257
31417: PUSH
31418: LD_INT 11
31420: EQUAL
31421: IFFALSE 31442
// points := [ 30 , 10 , 5 ] ;
31423: LD_ADDR_VAR 0 9
31427: PUSH
31428: LD_INT 30
31430: PUSH
31431: LD_INT 10
31433: PUSH
31434: LD_INT 5
31436: PUSH
31437: EMPTY
31438: LIST
31439: LIST
31440: LIST
31441: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
31442: LD_VAR 0 1
31446: PPUSH
31447: LD_INT 5
31449: PPUSH
31450: CALL_OW 321
31454: PUSH
31455: LD_INT 2
31457: EQUAL
31458: IFFALSE 31475
// bpoints := bpoints * 1.8 ;
31460: LD_ADDR_VAR 0 10
31464: PUSH
31465: LD_VAR 0 10
31469: PUSH
31470: LD_REAL  1.80000000000000E+0000
31473: MUL
31474: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
31475: LD_VAR 0 6
31479: PPUSH
31480: CALL_OW 257
31484: PUSH
31485: LD_INT 1
31487: PUSH
31488: LD_INT 2
31490: PUSH
31491: LD_INT 3
31493: PUSH
31494: LD_INT 4
31496: PUSH
31497: EMPTY
31498: LIST
31499: LIST
31500: LIST
31501: LIST
31502: IN
31503: PUSH
31504: LD_VAR 0 1
31508: PPUSH
31509: LD_INT 51
31511: PPUSH
31512: CALL_OW 321
31516: PUSH
31517: LD_INT 2
31519: EQUAL
31520: AND
31521: IFFALSE 31538
// bpoints := bpoints * 1.2 ;
31523: LD_ADDR_VAR 0 10
31527: PUSH
31528: LD_VAR 0 10
31532: PUSH
31533: LD_REAL  1.20000000000000E+0000
31536: MUL
31537: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
31538: LD_VAR 0 6
31542: PPUSH
31543: CALL_OW 257
31547: PUSH
31548: LD_INT 5
31550: PUSH
31551: LD_INT 7
31553: PUSH
31554: LD_INT 9
31556: PUSH
31557: EMPTY
31558: LIST
31559: LIST
31560: LIST
31561: IN
31562: PUSH
31563: LD_VAR 0 1
31567: PPUSH
31568: LD_INT 52
31570: PPUSH
31571: CALL_OW 321
31575: PUSH
31576: LD_INT 2
31578: EQUAL
31579: AND
31580: IFFALSE 31597
// bpoints := bpoints * 1.5 ;
31582: LD_ADDR_VAR 0 10
31586: PUSH
31587: LD_VAR 0 10
31591: PUSH
31592: LD_REAL  1.50000000000000E+0000
31595: MUL
31596: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
31597: LD_VAR 0 1
31601: PPUSH
31602: LD_INT 66
31604: PPUSH
31605: CALL_OW 321
31609: PUSH
31610: LD_INT 2
31612: EQUAL
31613: IFFALSE 31630
// bpoints := bpoints * 1.1 ;
31615: LD_ADDR_VAR 0 10
31619: PUSH
31620: LD_VAR 0 10
31624: PUSH
31625: LD_REAL  1.10000000000000E+0000
31628: MUL
31629: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
31630: LD_ADDR_VAR 0 10
31634: PUSH
31635: LD_VAR 0 10
31639: PUSH
31640: LD_VAR 0 6
31644: PPUSH
31645: LD_INT 1
31647: PPUSH
31648: CALL_OW 259
31652: PUSH
31653: LD_REAL  1.15000000000000E+0000
31656: MUL
31657: MUL
31658: ST_TO_ADDR
// end ; unit_vehicle :
31659: GO 32489
31661: LD_INT 2
31663: DOUBLE
31664: EQUAL
31665: IFTRUE 31669
31667: GO 32477
31669: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
31670: LD_VAR 0 6
31674: PPUSH
31675: CALL_OW 264
31679: PUSH
31680: LD_INT 2
31682: PUSH
31683: LD_INT 42
31685: PUSH
31686: LD_INT 24
31688: PUSH
31689: EMPTY
31690: LIST
31691: LIST
31692: LIST
31693: IN
31694: IFFALSE 31715
// points := [ 25 , 5 , 3 ] ;
31696: LD_ADDR_VAR 0 9
31700: PUSH
31701: LD_INT 25
31703: PUSH
31704: LD_INT 5
31706: PUSH
31707: LD_INT 3
31709: PUSH
31710: EMPTY
31711: LIST
31712: LIST
31713: LIST
31714: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
31715: LD_VAR 0 6
31719: PPUSH
31720: CALL_OW 264
31724: PUSH
31725: LD_INT 4
31727: PUSH
31728: LD_INT 43
31730: PUSH
31731: LD_INT 25
31733: PUSH
31734: EMPTY
31735: LIST
31736: LIST
31737: LIST
31738: IN
31739: IFFALSE 31760
// points := [ 40 , 15 , 5 ] ;
31741: LD_ADDR_VAR 0 9
31745: PUSH
31746: LD_INT 40
31748: PUSH
31749: LD_INT 15
31751: PUSH
31752: LD_INT 5
31754: PUSH
31755: EMPTY
31756: LIST
31757: LIST
31758: LIST
31759: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
31760: LD_VAR 0 6
31764: PPUSH
31765: CALL_OW 264
31769: PUSH
31770: LD_INT 3
31772: PUSH
31773: LD_INT 23
31775: PUSH
31776: EMPTY
31777: LIST
31778: LIST
31779: IN
31780: IFFALSE 31801
// points := [ 7 , 25 , 8 ] ;
31782: LD_ADDR_VAR 0 9
31786: PUSH
31787: LD_INT 7
31789: PUSH
31790: LD_INT 25
31792: PUSH
31793: LD_INT 8
31795: PUSH
31796: EMPTY
31797: LIST
31798: LIST
31799: LIST
31800: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
31801: LD_VAR 0 6
31805: PPUSH
31806: CALL_OW 264
31810: PUSH
31811: LD_INT 5
31813: PUSH
31814: LD_INT 27
31816: PUSH
31817: LD_INT 44
31819: PUSH
31820: EMPTY
31821: LIST
31822: LIST
31823: LIST
31824: IN
31825: IFFALSE 31846
// points := [ 14 , 50 , 16 ] ;
31827: LD_ADDR_VAR 0 9
31831: PUSH
31832: LD_INT 14
31834: PUSH
31835: LD_INT 50
31837: PUSH
31838: LD_INT 16
31840: PUSH
31841: EMPTY
31842: LIST
31843: LIST
31844: LIST
31845: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
31846: LD_VAR 0 6
31850: PPUSH
31851: CALL_OW 264
31855: PUSH
31856: LD_INT 6
31858: PUSH
31859: LD_INT 46
31861: PUSH
31862: EMPTY
31863: LIST
31864: LIST
31865: IN
31866: IFFALSE 31887
// points := [ 32 , 120 , 70 ] ;
31868: LD_ADDR_VAR 0 9
31872: PUSH
31873: LD_INT 32
31875: PUSH
31876: LD_INT 120
31878: PUSH
31879: LD_INT 70
31881: PUSH
31882: EMPTY
31883: LIST
31884: LIST
31885: LIST
31886: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
31887: LD_VAR 0 6
31891: PPUSH
31892: CALL_OW 264
31896: PUSH
31897: LD_INT 7
31899: PUSH
31900: LD_INT 28
31902: PUSH
31903: LD_INT 45
31905: PUSH
31906: LD_EXP 98
31910: PUSH
31911: EMPTY
31912: LIST
31913: LIST
31914: LIST
31915: LIST
31916: IN
31917: IFFALSE 31938
// points := [ 35 , 20 , 45 ] ;
31919: LD_ADDR_VAR 0 9
31923: PUSH
31924: LD_INT 35
31926: PUSH
31927: LD_INT 20
31929: PUSH
31930: LD_INT 45
31932: PUSH
31933: EMPTY
31934: LIST
31935: LIST
31936: LIST
31937: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
31938: LD_VAR 0 6
31942: PPUSH
31943: CALL_OW 264
31947: PUSH
31948: LD_INT 47
31950: PUSH
31951: EMPTY
31952: LIST
31953: IN
31954: IFFALSE 31975
// points := [ 67 , 45 , 75 ] ;
31956: LD_ADDR_VAR 0 9
31960: PUSH
31961: LD_INT 67
31963: PUSH
31964: LD_INT 45
31966: PUSH
31967: LD_INT 75
31969: PUSH
31970: EMPTY
31971: LIST
31972: LIST
31973: LIST
31974: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
31975: LD_VAR 0 6
31979: PPUSH
31980: CALL_OW 264
31984: PUSH
31985: LD_INT 26
31987: PUSH
31988: EMPTY
31989: LIST
31990: IN
31991: IFFALSE 32012
// points := [ 120 , 30 , 80 ] ;
31993: LD_ADDR_VAR 0 9
31997: PUSH
31998: LD_INT 120
32000: PUSH
32001: LD_INT 30
32003: PUSH
32004: LD_INT 80
32006: PUSH
32007: EMPTY
32008: LIST
32009: LIST
32010: LIST
32011: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
32012: LD_VAR 0 6
32016: PPUSH
32017: CALL_OW 264
32021: PUSH
32022: LD_INT 22
32024: PUSH
32025: EMPTY
32026: LIST
32027: IN
32028: IFFALSE 32049
// points := [ 40 , 1 , 1 ] ;
32030: LD_ADDR_VAR 0 9
32034: PUSH
32035: LD_INT 40
32037: PUSH
32038: LD_INT 1
32040: PUSH
32041: LD_INT 1
32043: PUSH
32044: EMPTY
32045: LIST
32046: LIST
32047: LIST
32048: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
32049: LD_VAR 0 6
32053: PPUSH
32054: CALL_OW 264
32058: PUSH
32059: LD_INT 29
32061: PUSH
32062: EMPTY
32063: LIST
32064: IN
32065: IFFALSE 32086
// points := [ 70 , 200 , 400 ] ;
32067: LD_ADDR_VAR 0 9
32071: PUSH
32072: LD_INT 70
32074: PUSH
32075: LD_INT 200
32077: PUSH
32078: LD_INT 400
32080: PUSH
32081: EMPTY
32082: LIST
32083: LIST
32084: LIST
32085: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
32086: LD_VAR 0 6
32090: PPUSH
32091: CALL_OW 264
32095: PUSH
32096: LD_INT 14
32098: PUSH
32099: LD_INT 53
32101: PUSH
32102: EMPTY
32103: LIST
32104: LIST
32105: IN
32106: IFFALSE 32127
// points := [ 40 , 10 , 20 ] ;
32108: LD_ADDR_VAR 0 9
32112: PUSH
32113: LD_INT 40
32115: PUSH
32116: LD_INT 10
32118: PUSH
32119: LD_INT 20
32121: PUSH
32122: EMPTY
32123: LIST
32124: LIST
32125: LIST
32126: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
32127: LD_VAR 0 6
32131: PPUSH
32132: CALL_OW 264
32136: PUSH
32137: LD_INT 9
32139: PUSH
32140: EMPTY
32141: LIST
32142: IN
32143: IFFALSE 32164
// points := [ 5 , 70 , 20 ] ;
32145: LD_ADDR_VAR 0 9
32149: PUSH
32150: LD_INT 5
32152: PUSH
32153: LD_INT 70
32155: PUSH
32156: LD_INT 20
32158: PUSH
32159: EMPTY
32160: LIST
32161: LIST
32162: LIST
32163: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
32164: LD_VAR 0 6
32168: PPUSH
32169: CALL_OW 264
32173: PUSH
32174: LD_INT 10
32176: PUSH
32177: EMPTY
32178: LIST
32179: IN
32180: IFFALSE 32201
// points := [ 35 , 110 , 70 ] ;
32182: LD_ADDR_VAR 0 9
32186: PUSH
32187: LD_INT 35
32189: PUSH
32190: LD_INT 110
32192: PUSH
32193: LD_INT 70
32195: PUSH
32196: EMPTY
32197: LIST
32198: LIST
32199: LIST
32200: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
32201: LD_VAR 0 6
32205: PPUSH
32206: CALL_OW 265
32210: PUSH
32211: LD_INT 25
32213: EQUAL
32214: IFFALSE 32235
// points := [ 80 , 65 , 100 ] ;
32216: LD_ADDR_VAR 0 9
32220: PUSH
32221: LD_INT 80
32223: PUSH
32224: LD_INT 65
32226: PUSH
32227: LD_INT 100
32229: PUSH
32230: EMPTY
32231: LIST
32232: LIST
32233: LIST
32234: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
32235: LD_VAR 0 6
32239: PPUSH
32240: CALL_OW 263
32244: PUSH
32245: LD_INT 1
32247: EQUAL
32248: IFFALSE 32283
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
32250: LD_ADDR_VAR 0 10
32254: PUSH
32255: LD_VAR 0 10
32259: PUSH
32260: LD_VAR 0 6
32264: PPUSH
32265: CALL_OW 311
32269: PPUSH
32270: LD_INT 3
32272: PPUSH
32273: CALL_OW 259
32277: PUSH
32278: LD_INT 4
32280: MUL
32281: MUL
32282: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
32283: LD_VAR 0 6
32287: PPUSH
32288: CALL_OW 263
32292: PUSH
32293: LD_INT 2
32295: EQUAL
32296: IFFALSE 32347
// begin j := IsControledBy ( i ) ;
32298: LD_ADDR_VAR 0 7
32302: PUSH
32303: LD_VAR 0 6
32307: PPUSH
32308: CALL_OW 312
32312: ST_TO_ADDR
// if j then
32313: LD_VAR 0 7
32317: IFFALSE 32347
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
32319: LD_ADDR_VAR 0 10
32323: PUSH
32324: LD_VAR 0 10
32328: PUSH
32329: LD_VAR 0 7
32333: PPUSH
32334: LD_INT 3
32336: PPUSH
32337: CALL_OW 259
32341: PUSH
32342: LD_INT 3
32344: MUL
32345: MUL
32346: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
32347: LD_VAR 0 6
32351: PPUSH
32352: CALL_OW 264
32356: PUSH
32357: LD_INT 5
32359: PUSH
32360: LD_INT 6
32362: PUSH
32363: LD_INT 46
32365: PUSH
32366: LD_INT 44
32368: PUSH
32369: LD_INT 47
32371: PUSH
32372: LD_INT 45
32374: PUSH
32375: LD_INT 28
32377: PUSH
32378: LD_INT 7
32380: PUSH
32381: LD_INT 27
32383: PUSH
32384: LD_INT 29
32386: PUSH
32387: EMPTY
32388: LIST
32389: LIST
32390: LIST
32391: LIST
32392: LIST
32393: LIST
32394: LIST
32395: LIST
32396: LIST
32397: LIST
32398: IN
32399: PUSH
32400: LD_VAR 0 1
32404: PPUSH
32405: LD_INT 52
32407: PPUSH
32408: CALL_OW 321
32412: PUSH
32413: LD_INT 2
32415: EQUAL
32416: AND
32417: IFFALSE 32434
// bpoints := bpoints * 1.2 ;
32419: LD_ADDR_VAR 0 10
32423: PUSH
32424: LD_VAR 0 10
32428: PUSH
32429: LD_REAL  1.20000000000000E+0000
32432: MUL
32433: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
32434: LD_VAR 0 6
32438: PPUSH
32439: CALL_OW 264
32443: PUSH
32444: LD_INT 6
32446: PUSH
32447: LD_INT 46
32449: PUSH
32450: LD_INT 47
32452: PUSH
32453: EMPTY
32454: LIST
32455: LIST
32456: LIST
32457: IN
32458: IFFALSE 32475
// bpoints := bpoints * 1.2 ;
32460: LD_ADDR_VAR 0 10
32464: PUSH
32465: LD_VAR 0 10
32469: PUSH
32470: LD_REAL  1.20000000000000E+0000
32473: MUL
32474: ST_TO_ADDR
// end ; unit_building :
32475: GO 32489
32477: LD_INT 3
32479: DOUBLE
32480: EQUAL
32481: IFTRUE 32485
32483: GO 32488
32485: POP
// ; end ;
32486: GO 32489
32488: POP
// for j = 1 to 3 do
32489: LD_ADDR_VAR 0 7
32493: PUSH
32494: DOUBLE
32495: LD_INT 1
32497: DEC
32498: ST_TO_ADDR
32499: LD_INT 3
32501: PUSH
32502: FOR_TO
32503: IFFALSE 32556
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
32505: LD_ADDR_VAR 0 5
32509: PUSH
32510: LD_VAR 0 5
32514: PPUSH
32515: LD_VAR 0 7
32519: PPUSH
32520: LD_VAR 0 5
32524: PUSH
32525: LD_VAR 0 7
32529: ARRAY
32530: PUSH
32531: LD_VAR 0 9
32535: PUSH
32536: LD_VAR 0 7
32540: ARRAY
32541: PUSH
32542: LD_VAR 0 10
32546: MUL
32547: PLUS
32548: PPUSH
32549: CALL_OW 1
32553: ST_TO_ADDR
32554: GO 32502
32556: POP
32557: POP
// end ;
32558: GO 31035
32560: POP
32561: POP
// result := Replace ( result , 4 , tmp ) ;
32562: LD_ADDR_VAR 0 5
32566: PUSH
32567: LD_VAR 0 5
32571: PPUSH
32572: LD_INT 4
32574: PPUSH
32575: LD_VAR 0 8
32579: PPUSH
32580: CALL_OW 1
32584: ST_TO_ADDR
// end ;
32585: LD_VAR 0 5
32589: RET
// export function DangerAtRange ( unit , range ) ; begin
32590: LD_INT 0
32592: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
32593: LD_ADDR_VAR 0 3
32597: PUSH
32598: LD_VAR 0 1
32602: PPUSH
32603: CALL_OW 255
32607: PPUSH
32608: LD_VAR 0 1
32612: PPUSH
32613: CALL_OW 250
32617: PPUSH
32618: LD_VAR 0 1
32622: PPUSH
32623: CALL_OW 251
32627: PPUSH
32628: LD_VAR 0 2
32632: PPUSH
32633: CALL 30887 0 4
32637: ST_TO_ADDR
// end ;
32638: LD_VAR 0 3
32642: RET
// export function DangerInArea ( side , area ) ; begin
32643: LD_INT 0
32645: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
32646: LD_ADDR_VAR 0 3
32650: PUSH
32651: LD_VAR 0 2
32655: PPUSH
32656: LD_INT 81
32658: PUSH
32659: LD_VAR 0 1
32663: PUSH
32664: EMPTY
32665: LIST
32666: LIST
32667: PPUSH
32668: CALL_OW 70
32672: ST_TO_ADDR
// end ;
32673: LD_VAR 0 3
32677: RET
// export function IsExtension ( b ) ; begin
32678: LD_INT 0
32680: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
32681: LD_ADDR_VAR 0 2
32685: PUSH
32686: LD_VAR 0 1
32690: PUSH
32691: LD_INT 23
32693: PUSH
32694: LD_INT 20
32696: PUSH
32697: LD_INT 22
32699: PUSH
32700: LD_INT 17
32702: PUSH
32703: LD_INT 24
32705: PUSH
32706: LD_INT 21
32708: PUSH
32709: LD_INT 19
32711: PUSH
32712: LD_INT 16
32714: PUSH
32715: LD_INT 25
32717: PUSH
32718: LD_INT 18
32720: PUSH
32721: EMPTY
32722: LIST
32723: LIST
32724: LIST
32725: LIST
32726: LIST
32727: LIST
32728: LIST
32729: LIST
32730: LIST
32731: LIST
32732: IN
32733: ST_TO_ADDR
// end ;
32734: LD_VAR 0 2
32738: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
32739: LD_INT 0
32741: PPUSH
32742: PPUSH
32743: PPUSH
// result := [ ] ;
32744: LD_ADDR_VAR 0 4
32748: PUSH
32749: EMPTY
32750: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
32751: LD_ADDR_VAR 0 5
32755: PUSH
32756: LD_VAR 0 2
32760: PPUSH
32761: LD_INT 21
32763: PUSH
32764: LD_INT 3
32766: PUSH
32767: EMPTY
32768: LIST
32769: LIST
32770: PPUSH
32771: CALL_OW 70
32775: ST_TO_ADDR
// if not tmp then
32776: LD_VAR 0 5
32780: NOT
32781: IFFALSE 32785
// exit ;
32783: GO 32849
// if checkLink then
32785: LD_VAR 0 3
32789: IFFALSE 32839
// begin for i in tmp do
32791: LD_ADDR_VAR 0 6
32795: PUSH
32796: LD_VAR 0 5
32800: PUSH
32801: FOR_IN
32802: IFFALSE 32837
// if GetBase ( i ) <> base then
32804: LD_VAR 0 6
32808: PPUSH
32809: CALL_OW 274
32813: PUSH
32814: LD_VAR 0 1
32818: NONEQUAL
32819: IFFALSE 32835
// ComLinkToBase ( base , i ) ;
32821: LD_VAR 0 1
32825: PPUSH
32826: LD_VAR 0 6
32830: PPUSH
32831: CALL_OW 169
32835: GO 32801
32837: POP
32838: POP
// end ; result := tmp ;
32839: LD_ADDR_VAR 0 4
32843: PUSH
32844: LD_VAR 0 5
32848: ST_TO_ADDR
// end ;
32849: LD_VAR 0 4
32853: RET
// export function ComComplete ( units , b ) ; var i ; begin
32854: LD_INT 0
32856: PPUSH
32857: PPUSH
// if not units then
32858: LD_VAR 0 1
32862: NOT
32863: IFFALSE 32867
// exit ;
32865: GO 32957
// for i in units do
32867: LD_ADDR_VAR 0 4
32871: PUSH
32872: LD_VAR 0 1
32876: PUSH
32877: FOR_IN
32878: IFFALSE 32955
// if BuildingStatus ( b ) = bs_build then
32880: LD_VAR 0 2
32884: PPUSH
32885: CALL_OW 461
32889: PUSH
32890: LD_INT 1
32892: EQUAL
32893: IFFALSE 32953
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
32895: LD_VAR 0 4
32899: PPUSH
32900: LD_STRING h
32902: PUSH
32903: LD_VAR 0 2
32907: PPUSH
32908: CALL_OW 250
32912: PUSH
32913: LD_VAR 0 2
32917: PPUSH
32918: CALL_OW 251
32922: PUSH
32923: LD_VAR 0 2
32927: PUSH
32928: LD_INT 0
32930: PUSH
32931: LD_INT 0
32933: PUSH
32934: LD_INT 0
32936: PUSH
32937: EMPTY
32938: LIST
32939: LIST
32940: LIST
32941: LIST
32942: LIST
32943: LIST
32944: LIST
32945: PUSH
32946: EMPTY
32947: LIST
32948: PPUSH
32949: CALL_OW 446
32953: GO 32877
32955: POP
32956: POP
// end ;
32957: LD_VAR 0 3
32961: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
32962: LD_INT 0
32964: PPUSH
32965: PPUSH
32966: PPUSH
32967: PPUSH
32968: PPUSH
32969: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
32970: LD_VAR 0 1
32974: NOT
32975: PUSH
32976: LD_VAR 0 1
32980: PPUSH
32981: CALL_OW 263
32985: PUSH
32986: LD_INT 2
32988: NONEQUAL
32989: OR
32990: IFFALSE 32994
// exit ;
32992: GO 33310
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
32994: LD_ADDR_VAR 0 6
32998: PUSH
32999: LD_INT 22
33001: PUSH
33002: LD_VAR 0 1
33006: PPUSH
33007: CALL_OW 255
33011: PUSH
33012: EMPTY
33013: LIST
33014: LIST
33015: PUSH
33016: LD_INT 2
33018: PUSH
33019: LD_INT 30
33021: PUSH
33022: LD_INT 36
33024: PUSH
33025: EMPTY
33026: LIST
33027: LIST
33028: PUSH
33029: LD_INT 34
33031: PUSH
33032: LD_INT 31
33034: PUSH
33035: EMPTY
33036: LIST
33037: LIST
33038: PUSH
33039: EMPTY
33040: LIST
33041: LIST
33042: LIST
33043: PUSH
33044: EMPTY
33045: LIST
33046: LIST
33047: PPUSH
33048: CALL_OW 69
33052: ST_TO_ADDR
// if not tmp then
33053: LD_VAR 0 6
33057: NOT
33058: IFFALSE 33062
// exit ;
33060: GO 33310
// result := [ ] ;
33062: LD_ADDR_VAR 0 2
33066: PUSH
33067: EMPTY
33068: ST_TO_ADDR
// for i in tmp do
33069: LD_ADDR_VAR 0 3
33073: PUSH
33074: LD_VAR 0 6
33078: PUSH
33079: FOR_IN
33080: IFFALSE 33151
// begin t := UnitsInside ( i ) ;
33082: LD_ADDR_VAR 0 4
33086: PUSH
33087: LD_VAR 0 3
33091: PPUSH
33092: CALL_OW 313
33096: ST_TO_ADDR
// if t then
33097: LD_VAR 0 4
33101: IFFALSE 33149
// for j in t do
33103: LD_ADDR_VAR 0 7
33107: PUSH
33108: LD_VAR 0 4
33112: PUSH
33113: FOR_IN
33114: IFFALSE 33147
// result := Replace ( result , result + 1 , j ) ;
33116: LD_ADDR_VAR 0 2
33120: PUSH
33121: LD_VAR 0 2
33125: PPUSH
33126: LD_VAR 0 2
33130: PUSH
33131: LD_INT 1
33133: PLUS
33134: PPUSH
33135: LD_VAR 0 7
33139: PPUSH
33140: CALL_OW 1
33144: ST_TO_ADDR
33145: GO 33113
33147: POP
33148: POP
// end ;
33149: GO 33079
33151: POP
33152: POP
// if not result then
33153: LD_VAR 0 2
33157: NOT
33158: IFFALSE 33162
// exit ;
33160: GO 33310
// mech := result [ 1 ] ;
33162: LD_ADDR_VAR 0 5
33166: PUSH
33167: LD_VAR 0 2
33171: PUSH
33172: LD_INT 1
33174: ARRAY
33175: ST_TO_ADDR
// if result > 1 then
33176: LD_VAR 0 2
33180: PUSH
33181: LD_INT 1
33183: GREATER
33184: IFFALSE 33296
// begin for i = 2 to result do
33186: LD_ADDR_VAR 0 3
33190: PUSH
33191: DOUBLE
33192: LD_INT 2
33194: DEC
33195: ST_TO_ADDR
33196: LD_VAR 0 2
33200: PUSH
33201: FOR_TO
33202: IFFALSE 33294
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
33204: LD_ADDR_VAR 0 4
33208: PUSH
33209: LD_VAR 0 2
33213: PUSH
33214: LD_VAR 0 3
33218: ARRAY
33219: PPUSH
33220: LD_INT 3
33222: PPUSH
33223: CALL_OW 259
33227: PUSH
33228: LD_VAR 0 2
33232: PUSH
33233: LD_VAR 0 3
33237: ARRAY
33238: PPUSH
33239: CALL_OW 432
33243: MINUS
33244: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
33245: LD_VAR 0 4
33249: PUSH
33250: LD_VAR 0 5
33254: PPUSH
33255: LD_INT 3
33257: PPUSH
33258: CALL_OW 259
33262: PUSH
33263: LD_VAR 0 5
33267: PPUSH
33268: CALL_OW 432
33272: MINUS
33273: GREATEREQUAL
33274: IFFALSE 33292
// mech := result [ i ] ;
33276: LD_ADDR_VAR 0 5
33280: PUSH
33281: LD_VAR 0 2
33285: PUSH
33286: LD_VAR 0 3
33290: ARRAY
33291: ST_TO_ADDR
// end ;
33292: GO 33201
33294: POP
33295: POP
// end ; ComLinkTo ( vehicle , mech ) ;
33296: LD_VAR 0 1
33300: PPUSH
33301: LD_VAR 0 5
33305: PPUSH
33306: CALL_OW 135
// end ;
33310: LD_VAR 0 2
33314: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
33315: LD_INT 0
33317: PPUSH
33318: PPUSH
33319: PPUSH
33320: PPUSH
33321: PPUSH
33322: PPUSH
33323: PPUSH
33324: PPUSH
33325: PPUSH
33326: PPUSH
33327: PPUSH
33328: PPUSH
33329: PPUSH
// result := [ ] ;
33330: LD_ADDR_VAR 0 7
33334: PUSH
33335: EMPTY
33336: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
33337: LD_VAR 0 1
33341: PPUSH
33342: CALL_OW 266
33346: PUSH
33347: LD_INT 0
33349: PUSH
33350: LD_INT 1
33352: PUSH
33353: EMPTY
33354: LIST
33355: LIST
33356: IN
33357: NOT
33358: IFFALSE 33362
// exit ;
33360: GO 34996
// if name then
33362: LD_VAR 0 3
33366: IFFALSE 33382
// SetBName ( base_dep , name ) ;
33368: LD_VAR 0 1
33372: PPUSH
33373: LD_VAR 0 3
33377: PPUSH
33378: CALL_OW 500
// base := GetBase ( base_dep ) ;
33382: LD_ADDR_VAR 0 15
33386: PUSH
33387: LD_VAR 0 1
33391: PPUSH
33392: CALL_OW 274
33396: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
33397: LD_ADDR_VAR 0 16
33401: PUSH
33402: LD_VAR 0 1
33406: PPUSH
33407: CALL_OW 255
33411: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
33412: LD_ADDR_VAR 0 17
33416: PUSH
33417: LD_VAR 0 1
33421: PPUSH
33422: CALL_OW 248
33426: ST_TO_ADDR
// if sources then
33427: LD_VAR 0 5
33431: IFFALSE 33478
// for i = 1 to 3 do
33433: LD_ADDR_VAR 0 8
33437: PUSH
33438: DOUBLE
33439: LD_INT 1
33441: DEC
33442: ST_TO_ADDR
33443: LD_INT 3
33445: PUSH
33446: FOR_TO
33447: IFFALSE 33476
// AddResourceType ( base , i , sources [ i ] ) ;
33449: LD_VAR 0 15
33453: PPUSH
33454: LD_VAR 0 8
33458: PPUSH
33459: LD_VAR 0 5
33463: PUSH
33464: LD_VAR 0 8
33468: ARRAY
33469: PPUSH
33470: CALL_OW 276
33474: GO 33446
33476: POP
33477: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
33478: LD_ADDR_VAR 0 18
33482: PUSH
33483: LD_VAR 0 15
33487: PPUSH
33488: LD_VAR 0 2
33492: PPUSH
33493: LD_INT 1
33495: PPUSH
33496: CALL 32739 0 3
33500: ST_TO_ADDR
// InitHc ;
33501: CALL_OW 19
// InitUc ;
33505: CALL_OW 18
// uc_side := side ;
33509: LD_ADDR_OWVAR 20
33513: PUSH
33514: LD_VAR 0 16
33518: ST_TO_ADDR
// uc_nation := nation ;
33519: LD_ADDR_OWVAR 21
33523: PUSH
33524: LD_VAR 0 17
33528: ST_TO_ADDR
// if buildings then
33529: LD_VAR 0 18
33533: IFFALSE 34855
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
33535: LD_ADDR_VAR 0 19
33539: PUSH
33540: LD_VAR 0 18
33544: PPUSH
33545: LD_INT 2
33547: PUSH
33548: LD_INT 30
33550: PUSH
33551: LD_INT 29
33553: PUSH
33554: EMPTY
33555: LIST
33556: LIST
33557: PUSH
33558: LD_INT 30
33560: PUSH
33561: LD_INT 30
33563: PUSH
33564: EMPTY
33565: LIST
33566: LIST
33567: PUSH
33568: EMPTY
33569: LIST
33570: LIST
33571: LIST
33572: PPUSH
33573: CALL_OW 72
33577: ST_TO_ADDR
// if tmp then
33578: LD_VAR 0 19
33582: IFFALSE 33630
// for i in tmp do
33584: LD_ADDR_VAR 0 8
33588: PUSH
33589: LD_VAR 0 19
33593: PUSH
33594: FOR_IN
33595: IFFALSE 33628
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
33597: LD_VAR 0 8
33601: PPUSH
33602: CALL_OW 250
33606: PPUSH
33607: LD_VAR 0 8
33611: PPUSH
33612: CALL_OW 251
33616: PPUSH
33617: LD_VAR 0 16
33621: PPUSH
33622: CALL_OW 441
33626: GO 33594
33628: POP
33629: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
33630: LD_VAR 0 18
33634: PPUSH
33635: LD_INT 2
33637: PUSH
33638: LD_INT 30
33640: PUSH
33641: LD_INT 32
33643: PUSH
33644: EMPTY
33645: LIST
33646: LIST
33647: PUSH
33648: LD_INT 30
33650: PUSH
33651: LD_INT 33
33653: PUSH
33654: EMPTY
33655: LIST
33656: LIST
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: LIST
33662: PPUSH
33663: CALL_OW 72
33667: IFFALSE 33755
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
33669: LD_ADDR_VAR 0 8
33673: PUSH
33674: LD_VAR 0 18
33678: PPUSH
33679: LD_INT 2
33681: PUSH
33682: LD_INT 30
33684: PUSH
33685: LD_INT 32
33687: PUSH
33688: EMPTY
33689: LIST
33690: LIST
33691: PUSH
33692: LD_INT 30
33694: PUSH
33695: LD_INT 33
33697: PUSH
33698: EMPTY
33699: LIST
33700: LIST
33701: PUSH
33702: EMPTY
33703: LIST
33704: LIST
33705: LIST
33706: PPUSH
33707: CALL_OW 72
33711: PUSH
33712: FOR_IN
33713: IFFALSE 33753
// begin if not GetBWeapon ( i ) then
33715: LD_VAR 0 8
33719: PPUSH
33720: CALL_OW 269
33724: NOT
33725: IFFALSE 33751
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
33727: LD_VAR 0 8
33731: PPUSH
33732: LD_VAR 0 8
33736: PPUSH
33737: LD_VAR 0 2
33741: PPUSH
33742: CALL 35001 0 2
33746: PPUSH
33747: CALL_OW 431
// end ;
33751: GO 33712
33753: POP
33754: POP
// end ; for i = 1 to personel do
33755: LD_ADDR_VAR 0 8
33759: PUSH
33760: DOUBLE
33761: LD_INT 1
33763: DEC
33764: ST_TO_ADDR
33765: LD_VAR 0 6
33769: PUSH
33770: FOR_TO
33771: IFFALSE 34835
// begin if i > 4 then
33773: LD_VAR 0 8
33777: PUSH
33778: LD_INT 4
33780: GREATER
33781: IFFALSE 33785
// break ;
33783: GO 34835
// case i of 1 :
33785: LD_VAR 0 8
33789: PUSH
33790: LD_INT 1
33792: DOUBLE
33793: EQUAL
33794: IFTRUE 33798
33796: GO 33878
33798: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
33799: LD_ADDR_VAR 0 12
33803: PUSH
33804: LD_VAR 0 18
33808: PPUSH
33809: LD_INT 22
33811: PUSH
33812: LD_VAR 0 16
33816: PUSH
33817: EMPTY
33818: LIST
33819: LIST
33820: PUSH
33821: LD_INT 58
33823: PUSH
33824: EMPTY
33825: LIST
33826: PUSH
33827: LD_INT 2
33829: PUSH
33830: LD_INT 30
33832: PUSH
33833: LD_INT 32
33835: PUSH
33836: EMPTY
33837: LIST
33838: LIST
33839: PUSH
33840: LD_INT 30
33842: PUSH
33843: LD_INT 4
33845: PUSH
33846: EMPTY
33847: LIST
33848: LIST
33849: PUSH
33850: LD_INT 30
33852: PUSH
33853: LD_INT 5
33855: PUSH
33856: EMPTY
33857: LIST
33858: LIST
33859: PUSH
33860: EMPTY
33861: LIST
33862: LIST
33863: LIST
33864: LIST
33865: PUSH
33866: EMPTY
33867: LIST
33868: LIST
33869: LIST
33870: PPUSH
33871: CALL_OW 72
33875: ST_TO_ADDR
33876: GO 34100
33878: LD_INT 2
33880: DOUBLE
33881: EQUAL
33882: IFTRUE 33886
33884: GO 33948
33886: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
33887: LD_ADDR_VAR 0 12
33891: PUSH
33892: LD_VAR 0 18
33896: PPUSH
33897: LD_INT 22
33899: PUSH
33900: LD_VAR 0 16
33904: PUSH
33905: EMPTY
33906: LIST
33907: LIST
33908: PUSH
33909: LD_INT 2
33911: PUSH
33912: LD_INT 30
33914: PUSH
33915: LD_INT 0
33917: PUSH
33918: EMPTY
33919: LIST
33920: LIST
33921: PUSH
33922: LD_INT 30
33924: PUSH
33925: LD_INT 1
33927: PUSH
33928: EMPTY
33929: LIST
33930: LIST
33931: PUSH
33932: EMPTY
33933: LIST
33934: LIST
33935: LIST
33936: PUSH
33937: EMPTY
33938: LIST
33939: LIST
33940: PPUSH
33941: CALL_OW 72
33945: ST_TO_ADDR
33946: GO 34100
33948: LD_INT 3
33950: DOUBLE
33951: EQUAL
33952: IFTRUE 33956
33954: GO 34018
33956: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
33957: LD_ADDR_VAR 0 12
33961: PUSH
33962: LD_VAR 0 18
33966: PPUSH
33967: LD_INT 22
33969: PUSH
33970: LD_VAR 0 16
33974: PUSH
33975: EMPTY
33976: LIST
33977: LIST
33978: PUSH
33979: LD_INT 2
33981: PUSH
33982: LD_INT 30
33984: PUSH
33985: LD_INT 2
33987: PUSH
33988: EMPTY
33989: LIST
33990: LIST
33991: PUSH
33992: LD_INT 30
33994: PUSH
33995: LD_INT 3
33997: PUSH
33998: EMPTY
33999: LIST
34000: LIST
34001: PUSH
34002: EMPTY
34003: LIST
34004: LIST
34005: LIST
34006: PUSH
34007: EMPTY
34008: LIST
34009: LIST
34010: PPUSH
34011: CALL_OW 72
34015: ST_TO_ADDR
34016: GO 34100
34018: LD_INT 4
34020: DOUBLE
34021: EQUAL
34022: IFTRUE 34026
34024: GO 34099
34026: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
34027: LD_ADDR_VAR 0 12
34031: PUSH
34032: LD_VAR 0 18
34036: PPUSH
34037: LD_INT 22
34039: PUSH
34040: LD_VAR 0 16
34044: PUSH
34045: EMPTY
34046: LIST
34047: LIST
34048: PUSH
34049: LD_INT 2
34051: PUSH
34052: LD_INT 30
34054: PUSH
34055: LD_INT 6
34057: PUSH
34058: EMPTY
34059: LIST
34060: LIST
34061: PUSH
34062: LD_INT 30
34064: PUSH
34065: LD_INT 7
34067: PUSH
34068: EMPTY
34069: LIST
34070: LIST
34071: PUSH
34072: LD_INT 30
34074: PUSH
34075: LD_INT 8
34077: PUSH
34078: EMPTY
34079: LIST
34080: LIST
34081: PUSH
34082: EMPTY
34083: LIST
34084: LIST
34085: LIST
34086: LIST
34087: PUSH
34088: EMPTY
34089: LIST
34090: LIST
34091: PPUSH
34092: CALL_OW 72
34096: ST_TO_ADDR
34097: GO 34100
34099: POP
// if i = 1 then
34100: LD_VAR 0 8
34104: PUSH
34105: LD_INT 1
34107: EQUAL
34108: IFFALSE 34219
// begin tmp := [ ] ;
34110: LD_ADDR_VAR 0 19
34114: PUSH
34115: EMPTY
34116: ST_TO_ADDR
// for j in f do
34117: LD_ADDR_VAR 0 9
34121: PUSH
34122: LD_VAR 0 12
34126: PUSH
34127: FOR_IN
34128: IFFALSE 34201
// if GetBType ( j ) = b_bunker then
34130: LD_VAR 0 9
34134: PPUSH
34135: CALL_OW 266
34139: PUSH
34140: LD_INT 32
34142: EQUAL
34143: IFFALSE 34170
// tmp := Insert ( tmp , 1 , j ) else
34145: LD_ADDR_VAR 0 19
34149: PUSH
34150: LD_VAR 0 19
34154: PPUSH
34155: LD_INT 1
34157: PPUSH
34158: LD_VAR 0 9
34162: PPUSH
34163: CALL_OW 2
34167: ST_TO_ADDR
34168: GO 34199
// tmp := Insert ( tmp , tmp + 1 , j ) ;
34170: LD_ADDR_VAR 0 19
34174: PUSH
34175: LD_VAR 0 19
34179: PPUSH
34180: LD_VAR 0 19
34184: PUSH
34185: LD_INT 1
34187: PLUS
34188: PPUSH
34189: LD_VAR 0 9
34193: PPUSH
34194: CALL_OW 2
34198: ST_TO_ADDR
34199: GO 34127
34201: POP
34202: POP
// if tmp then
34203: LD_VAR 0 19
34207: IFFALSE 34219
// f := tmp ;
34209: LD_ADDR_VAR 0 12
34213: PUSH
34214: LD_VAR 0 19
34218: ST_TO_ADDR
// end ; x := personel [ i ] ;
34219: LD_ADDR_VAR 0 13
34223: PUSH
34224: LD_VAR 0 6
34228: PUSH
34229: LD_VAR 0 8
34233: ARRAY
34234: ST_TO_ADDR
// if x = - 1 then
34235: LD_VAR 0 13
34239: PUSH
34240: LD_INT 1
34242: NEG
34243: EQUAL
34244: IFFALSE 34453
// begin for j in f do
34246: LD_ADDR_VAR 0 9
34250: PUSH
34251: LD_VAR 0 12
34255: PUSH
34256: FOR_IN
34257: IFFALSE 34449
// repeat InitHc ;
34259: CALL_OW 19
// if GetBType ( j ) = b_barracks then
34263: LD_VAR 0 9
34267: PPUSH
34268: CALL_OW 266
34272: PUSH
34273: LD_INT 5
34275: EQUAL
34276: IFFALSE 34346
// begin if UnitsInside ( j ) < 3 then
34278: LD_VAR 0 9
34282: PPUSH
34283: CALL_OW 313
34287: PUSH
34288: LD_INT 3
34290: LESS
34291: IFFALSE 34327
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34293: LD_INT 0
34295: PPUSH
34296: LD_INT 5
34298: PUSH
34299: LD_INT 8
34301: PUSH
34302: LD_INT 9
34304: PUSH
34305: EMPTY
34306: LIST
34307: LIST
34308: LIST
34309: PUSH
34310: LD_VAR 0 17
34314: ARRAY
34315: PPUSH
34316: LD_VAR 0 4
34320: PPUSH
34321: CALL_OW 380
34325: GO 34344
// PrepareHuman ( false , i , skill ) ;
34327: LD_INT 0
34329: PPUSH
34330: LD_VAR 0 8
34334: PPUSH
34335: LD_VAR 0 4
34339: PPUSH
34340: CALL_OW 380
// end else
34344: GO 34363
// PrepareHuman ( false , i , skill ) ;
34346: LD_INT 0
34348: PPUSH
34349: LD_VAR 0 8
34353: PPUSH
34354: LD_VAR 0 4
34358: PPUSH
34359: CALL_OW 380
// un := CreateHuman ;
34363: LD_ADDR_VAR 0 14
34367: PUSH
34368: CALL_OW 44
34372: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34373: LD_ADDR_VAR 0 7
34377: PUSH
34378: LD_VAR 0 7
34382: PPUSH
34383: LD_INT 1
34385: PPUSH
34386: LD_VAR 0 14
34390: PPUSH
34391: CALL_OW 2
34395: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
34396: LD_VAR 0 14
34400: PPUSH
34401: LD_VAR 0 9
34405: PPUSH
34406: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
34410: LD_VAR 0 9
34414: PPUSH
34415: CALL_OW 313
34419: PUSH
34420: LD_INT 6
34422: EQUAL
34423: PUSH
34424: LD_VAR 0 9
34428: PPUSH
34429: CALL_OW 266
34433: PUSH
34434: LD_INT 32
34436: PUSH
34437: LD_INT 31
34439: PUSH
34440: EMPTY
34441: LIST
34442: LIST
34443: IN
34444: OR
34445: IFFALSE 34259
34447: GO 34256
34449: POP
34450: POP
// end else
34451: GO 34833
// for j = 1 to x do
34453: LD_ADDR_VAR 0 9
34457: PUSH
34458: DOUBLE
34459: LD_INT 1
34461: DEC
34462: ST_TO_ADDR
34463: LD_VAR 0 13
34467: PUSH
34468: FOR_TO
34469: IFFALSE 34831
// begin InitHc ;
34471: CALL_OW 19
// if not f then
34475: LD_VAR 0 12
34479: NOT
34480: IFFALSE 34569
// begin PrepareHuman ( false , i , skill ) ;
34482: LD_INT 0
34484: PPUSH
34485: LD_VAR 0 8
34489: PPUSH
34490: LD_VAR 0 4
34494: PPUSH
34495: CALL_OW 380
// un := CreateHuman ;
34499: LD_ADDR_VAR 0 14
34503: PUSH
34504: CALL_OW 44
34508: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34509: LD_ADDR_VAR 0 7
34513: PUSH
34514: LD_VAR 0 7
34518: PPUSH
34519: LD_INT 1
34521: PPUSH
34522: LD_VAR 0 14
34526: PPUSH
34527: CALL_OW 2
34531: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34532: LD_VAR 0 14
34536: PPUSH
34537: LD_VAR 0 1
34541: PPUSH
34542: CALL_OW 250
34546: PPUSH
34547: LD_VAR 0 1
34551: PPUSH
34552: CALL_OW 251
34556: PPUSH
34557: LD_INT 10
34559: PPUSH
34560: LD_INT 0
34562: PPUSH
34563: CALL_OW 50
// continue ;
34567: GO 34468
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
34569: LD_VAR 0 12
34573: PUSH
34574: LD_INT 1
34576: ARRAY
34577: PPUSH
34578: CALL_OW 313
34582: PUSH
34583: LD_VAR 0 12
34587: PUSH
34588: LD_INT 1
34590: ARRAY
34591: PPUSH
34592: CALL_OW 266
34596: PUSH
34597: LD_INT 32
34599: PUSH
34600: LD_INT 31
34602: PUSH
34603: EMPTY
34604: LIST
34605: LIST
34606: IN
34607: AND
34608: PUSH
34609: LD_VAR 0 12
34613: PUSH
34614: LD_INT 1
34616: ARRAY
34617: PPUSH
34618: CALL_OW 313
34622: PUSH
34623: LD_INT 6
34625: EQUAL
34626: OR
34627: IFFALSE 34647
// f := Delete ( f , 1 ) ;
34629: LD_ADDR_VAR 0 12
34633: PUSH
34634: LD_VAR 0 12
34638: PPUSH
34639: LD_INT 1
34641: PPUSH
34642: CALL_OW 3
34646: ST_TO_ADDR
// if not f then
34647: LD_VAR 0 12
34651: NOT
34652: IFFALSE 34670
// begin x := x + 2 ;
34654: LD_ADDR_VAR 0 13
34658: PUSH
34659: LD_VAR 0 13
34663: PUSH
34664: LD_INT 2
34666: PLUS
34667: ST_TO_ADDR
// continue ;
34668: GO 34468
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
34670: LD_VAR 0 12
34674: PUSH
34675: LD_INT 1
34677: ARRAY
34678: PPUSH
34679: CALL_OW 266
34683: PUSH
34684: LD_INT 5
34686: EQUAL
34687: IFFALSE 34761
// begin if UnitsInside ( f [ 1 ] ) < 3 then
34689: LD_VAR 0 12
34693: PUSH
34694: LD_INT 1
34696: ARRAY
34697: PPUSH
34698: CALL_OW 313
34702: PUSH
34703: LD_INT 3
34705: LESS
34706: IFFALSE 34742
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34708: LD_INT 0
34710: PPUSH
34711: LD_INT 5
34713: PUSH
34714: LD_INT 8
34716: PUSH
34717: LD_INT 9
34719: PUSH
34720: EMPTY
34721: LIST
34722: LIST
34723: LIST
34724: PUSH
34725: LD_VAR 0 17
34729: ARRAY
34730: PPUSH
34731: LD_VAR 0 4
34735: PPUSH
34736: CALL_OW 380
34740: GO 34759
// PrepareHuman ( false , i , skill ) ;
34742: LD_INT 0
34744: PPUSH
34745: LD_VAR 0 8
34749: PPUSH
34750: LD_VAR 0 4
34754: PPUSH
34755: CALL_OW 380
// end else
34759: GO 34778
// PrepareHuman ( false , i , skill ) ;
34761: LD_INT 0
34763: PPUSH
34764: LD_VAR 0 8
34768: PPUSH
34769: LD_VAR 0 4
34773: PPUSH
34774: CALL_OW 380
// un := CreateHuman ;
34778: LD_ADDR_VAR 0 14
34782: PUSH
34783: CALL_OW 44
34787: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34788: LD_ADDR_VAR 0 7
34792: PUSH
34793: LD_VAR 0 7
34797: PPUSH
34798: LD_INT 1
34800: PPUSH
34801: LD_VAR 0 14
34805: PPUSH
34806: CALL_OW 2
34810: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
34811: LD_VAR 0 14
34815: PPUSH
34816: LD_VAR 0 12
34820: PUSH
34821: LD_INT 1
34823: ARRAY
34824: PPUSH
34825: CALL_OW 52
// end ;
34829: GO 34468
34831: POP
34832: POP
// end ;
34833: GO 33770
34835: POP
34836: POP
// result := result ^ buildings ;
34837: LD_ADDR_VAR 0 7
34841: PUSH
34842: LD_VAR 0 7
34846: PUSH
34847: LD_VAR 0 18
34851: ADD
34852: ST_TO_ADDR
// end else
34853: GO 34996
// begin for i = 1 to personel do
34855: LD_ADDR_VAR 0 8
34859: PUSH
34860: DOUBLE
34861: LD_INT 1
34863: DEC
34864: ST_TO_ADDR
34865: LD_VAR 0 6
34869: PUSH
34870: FOR_TO
34871: IFFALSE 34994
// begin if i > 4 then
34873: LD_VAR 0 8
34877: PUSH
34878: LD_INT 4
34880: GREATER
34881: IFFALSE 34885
// break ;
34883: GO 34994
// x := personel [ i ] ;
34885: LD_ADDR_VAR 0 13
34889: PUSH
34890: LD_VAR 0 6
34894: PUSH
34895: LD_VAR 0 8
34899: ARRAY
34900: ST_TO_ADDR
// if x = - 1 then
34901: LD_VAR 0 13
34905: PUSH
34906: LD_INT 1
34908: NEG
34909: EQUAL
34910: IFFALSE 34914
// continue ;
34912: GO 34870
// PrepareHuman ( false , i , skill ) ;
34914: LD_INT 0
34916: PPUSH
34917: LD_VAR 0 8
34921: PPUSH
34922: LD_VAR 0 4
34926: PPUSH
34927: CALL_OW 380
// un := CreateHuman ;
34931: LD_ADDR_VAR 0 14
34935: PUSH
34936: CALL_OW 44
34940: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34941: LD_VAR 0 14
34945: PPUSH
34946: LD_VAR 0 1
34950: PPUSH
34951: CALL_OW 250
34955: PPUSH
34956: LD_VAR 0 1
34960: PPUSH
34961: CALL_OW 251
34965: PPUSH
34966: LD_INT 10
34968: PPUSH
34969: LD_INT 0
34971: PPUSH
34972: CALL_OW 50
// result := result ^ un ;
34976: LD_ADDR_VAR 0 7
34980: PUSH
34981: LD_VAR 0 7
34985: PUSH
34986: LD_VAR 0 14
34990: ADD
34991: ST_TO_ADDR
// end ;
34992: GO 34870
34994: POP
34995: POP
// end ; end ;
34996: LD_VAR 0 7
35000: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
35001: LD_INT 0
35003: PPUSH
35004: PPUSH
35005: PPUSH
35006: PPUSH
35007: PPUSH
35008: PPUSH
35009: PPUSH
35010: PPUSH
35011: PPUSH
35012: PPUSH
35013: PPUSH
35014: PPUSH
35015: PPUSH
35016: PPUSH
35017: PPUSH
35018: PPUSH
// result := false ;
35019: LD_ADDR_VAR 0 3
35023: PUSH
35024: LD_INT 0
35026: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
35027: LD_VAR 0 1
35031: NOT
35032: PUSH
35033: LD_VAR 0 1
35037: PPUSH
35038: CALL_OW 266
35042: PUSH
35043: LD_INT 32
35045: PUSH
35046: LD_INT 33
35048: PUSH
35049: EMPTY
35050: LIST
35051: LIST
35052: IN
35053: NOT
35054: OR
35055: IFFALSE 35059
// exit ;
35057: GO 36168
// nat := GetNation ( tower ) ;
35059: LD_ADDR_VAR 0 12
35063: PUSH
35064: LD_VAR 0 1
35068: PPUSH
35069: CALL_OW 248
35073: ST_TO_ADDR
// side := GetSide ( tower ) ;
35074: LD_ADDR_VAR 0 16
35078: PUSH
35079: LD_VAR 0 1
35083: PPUSH
35084: CALL_OW 255
35088: ST_TO_ADDR
// x := GetX ( tower ) ;
35089: LD_ADDR_VAR 0 10
35093: PUSH
35094: LD_VAR 0 1
35098: PPUSH
35099: CALL_OW 250
35103: ST_TO_ADDR
// y := GetY ( tower ) ;
35104: LD_ADDR_VAR 0 11
35108: PUSH
35109: LD_VAR 0 1
35113: PPUSH
35114: CALL_OW 251
35118: ST_TO_ADDR
// if not x or not y then
35119: LD_VAR 0 10
35123: NOT
35124: PUSH
35125: LD_VAR 0 11
35129: NOT
35130: OR
35131: IFFALSE 35135
// exit ;
35133: GO 36168
// weapon := 0 ;
35135: LD_ADDR_VAR 0 18
35139: PUSH
35140: LD_INT 0
35142: ST_TO_ADDR
// fac_list := [ ] ;
35143: LD_ADDR_VAR 0 17
35147: PUSH
35148: EMPTY
35149: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
35150: LD_ADDR_VAR 0 6
35154: PUSH
35155: LD_VAR 0 1
35159: PPUSH
35160: CALL_OW 274
35164: PPUSH
35165: LD_VAR 0 2
35169: PPUSH
35170: LD_INT 0
35172: PPUSH
35173: CALL 32739 0 3
35177: PPUSH
35178: LD_INT 30
35180: PUSH
35181: LD_INT 3
35183: PUSH
35184: EMPTY
35185: LIST
35186: LIST
35187: PPUSH
35188: CALL_OW 72
35192: ST_TO_ADDR
// if not factories then
35193: LD_VAR 0 6
35197: NOT
35198: IFFALSE 35202
// exit ;
35200: GO 36168
// for i in factories do
35202: LD_ADDR_VAR 0 8
35206: PUSH
35207: LD_VAR 0 6
35211: PUSH
35212: FOR_IN
35213: IFFALSE 35238
// fac_list := fac_list union AvailableWeaponList ( i ) ;
35215: LD_ADDR_VAR 0 17
35219: PUSH
35220: LD_VAR 0 17
35224: PUSH
35225: LD_VAR 0 8
35229: PPUSH
35230: CALL_OW 478
35234: UNION
35235: ST_TO_ADDR
35236: GO 35212
35238: POP
35239: POP
// if not fac_list then
35240: LD_VAR 0 17
35244: NOT
35245: IFFALSE 35249
// exit ;
35247: GO 36168
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
35249: LD_ADDR_VAR 0 5
35253: PUSH
35254: LD_INT 4
35256: PUSH
35257: LD_INT 5
35259: PUSH
35260: LD_INT 9
35262: PUSH
35263: LD_INT 10
35265: PUSH
35266: LD_INT 6
35268: PUSH
35269: LD_INT 7
35271: PUSH
35272: LD_INT 11
35274: PUSH
35275: EMPTY
35276: LIST
35277: LIST
35278: LIST
35279: LIST
35280: LIST
35281: LIST
35282: LIST
35283: PUSH
35284: LD_INT 27
35286: PUSH
35287: LD_INT 28
35289: PUSH
35290: LD_INT 26
35292: PUSH
35293: LD_INT 30
35295: PUSH
35296: EMPTY
35297: LIST
35298: LIST
35299: LIST
35300: LIST
35301: PUSH
35302: LD_INT 43
35304: PUSH
35305: LD_INT 44
35307: PUSH
35308: LD_INT 46
35310: PUSH
35311: LD_INT 45
35313: PUSH
35314: LD_INT 47
35316: PUSH
35317: LD_INT 49
35319: PUSH
35320: EMPTY
35321: LIST
35322: LIST
35323: LIST
35324: LIST
35325: LIST
35326: LIST
35327: PUSH
35328: EMPTY
35329: LIST
35330: LIST
35331: LIST
35332: PUSH
35333: LD_VAR 0 12
35337: ARRAY
35338: ST_TO_ADDR
// list := list isect fac_list ;
35339: LD_ADDR_VAR 0 5
35343: PUSH
35344: LD_VAR 0 5
35348: PUSH
35349: LD_VAR 0 17
35353: ISECT
35354: ST_TO_ADDR
// if not list then
35355: LD_VAR 0 5
35359: NOT
35360: IFFALSE 35364
// exit ;
35362: GO 36168
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
35364: LD_VAR 0 12
35368: PUSH
35369: LD_INT 3
35371: EQUAL
35372: PUSH
35373: LD_INT 49
35375: PUSH
35376: LD_VAR 0 5
35380: IN
35381: AND
35382: PUSH
35383: LD_INT 31
35385: PPUSH
35386: LD_VAR 0 16
35390: PPUSH
35391: CALL_OW 321
35395: PUSH
35396: LD_INT 2
35398: EQUAL
35399: AND
35400: IFFALSE 35460
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
35402: LD_INT 22
35404: PUSH
35405: LD_VAR 0 16
35409: PUSH
35410: EMPTY
35411: LIST
35412: LIST
35413: PUSH
35414: LD_INT 35
35416: PUSH
35417: LD_INT 49
35419: PUSH
35420: EMPTY
35421: LIST
35422: LIST
35423: PUSH
35424: LD_INT 91
35426: PUSH
35427: LD_VAR 0 1
35431: PUSH
35432: LD_INT 10
35434: PUSH
35435: EMPTY
35436: LIST
35437: LIST
35438: LIST
35439: PUSH
35440: EMPTY
35441: LIST
35442: LIST
35443: LIST
35444: PPUSH
35445: CALL_OW 69
35449: NOT
35450: IFFALSE 35460
// weapon := ru_time_lapser ;
35452: LD_ADDR_VAR 0 18
35456: PUSH
35457: LD_INT 49
35459: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
35460: LD_VAR 0 12
35464: PUSH
35465: LD_INT 1
35467: PUSH
35468: LD_INT 2
35470: PUSH
35471: EMPTY
35472: LIST
35473: LIST
35474: IN
35475: PUSH
35476: LD_INT 11
35478: PUSH
35479: LD_VAR 0 5
35483: IN
35484: PUSH
35485: LD_INT 30
35487: PUSH
35488: LD_VAR 0 5
35492: IN
35493: OR
35494: AND
35495: PUSH
35496: LD_INT 6
35498: PPUSH
35499: LD_VAR 0 16
35503: PPUSH
35504: CALL_OW 321
35508: PUSH
35509: LD_INT 2
35511: EQUAL
35512: AND
35513: IFFALSE 35678
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
35515: LD_INT 22
35517: PUSH
35518: LD_VAR 0 16
35522: PUSH
35523: EMPTY
35524: LIST
35525: LIST
35526: PUSH
35527: LD_INT 2
35529: PUSH
35530: LD_INT 35
35532: PUSH
35533: LD_INT 11
35535: PUSH
35536: EMPTY
35537: LIST
35538: LIST
35539: PUSH
35540: LD_INT 35
35542: PUSH
35543: LD_INT 30
35545: PUSH
35546: EMPTY
35547: LIST
35548: LIST
35549: PUSH
35550: EMPTY
35551: LIST
35552: LIST
35553: LIST
35554: PUSH
35555: LD_INT 91
35557: PUSH
35558: LD_VAR 0 1
35562: PUSH
35563: LD_INT 18
35565: PUSH
35566: EMPTY
35567: LIST
35568: LIST
35569: LIST
35570: PUSH
35571: EMPTY
35572: LIST
35573: LIST
35574: LIST
35575: PPUSH
35576: CALL_OW 69
35580: NOT
35581: PUSH
35582: LD_INT 22
35584: PUSH
35585: LD_VAR 0 16
35589: PUSH
35590: EMPTY
35591: LIST
35592: LIST
35593: PUSH
35594: LD_INT 2
35596: PUSH
35597: LD_INT 30
35599: PUSH
35600: LD_INT 32
35602: PUSH
35603: EMPTY
35604: LIST
35605: LIST
35606: PUSH
35607: LD_INT 30
35609: PUSH
35610: LD_INT 33
35612: PUSH
35613: EMPTY
35614: LIST
35615: LIST
35616: PUSH
35617: EMPTY
35618: LIST
35619: LIST
35620: LIST
35621: PUSH
35622: LD_INT 91
35624: PUSH
35625: LD_VAR 0 1
35629: PUSH
35630: LD_INT 12
35632: PUSH
35633: EMPTY
35634: LIST
35635: LIST
35636: LIST
35637: PUSH
35638: EMPTY
35639: LIST
35640: LIST
35641: LIST
35642: PUSH
35643: EMPTY
35644: LIST
35645: PPUSH
35646: CALL_OW 69
35650: PUSH
35651: LD_INT 2
35653: GREATER
35654: AND
35655: IFFALSE 35678
// weapon := [ us_radar , ar_radar ] [ nat ] ;
35657: LD_ADDR_VAR 0 18
35661: PUSH
35662: LD_INT 11
35664: PUSH
35665: LD_INT 30
35667: PUSH
35668: EMPTY
35669: LIST
35670: LIST
35671: PUSH
35672: LD_VAR 0 12
35676: ARRAY
35677: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
35678: LD_VAR 0 18
35682: NOT
35683: PUSH
35684: LD_INT 40
35686: PPUSH
35687: LD_VAR 0 16
35691: PPUSH
35692: CALL_OW 321
35696: PUSH
35697: LD_INT 2
35699: EQUAL
35700: AND
35701: PUSH
35702: LD_INT 7
35704: PUSH
35705: LD_VAR 0 5
35709: IN
35710: PUSH
35711: LD_INT 28
35713: PUSH
35714: LD_VAR 0 5
35718: IN
35719: OR
35720: PUSH
35721: LD_INT 45
35723: PUSH
35724: LD_VAR 0 5
35728: IN
35729: OR
35730: AND
35731: IFFALSE 35985
// begin hex := GetHexInfo ( x , y ) ;
35733: LD_ADDR_VAR 0 4
35737: PUSH
35738: LD_VAR 0 10
35742: PPUSH
35743: LD_VAR 0 11
35747: PPUSH
35748: CALL_OW 546
35752: ST_TO_ADDR
// if hex [ 1 ] then
35753: LD_VAR 0 4
35757: PUSH
35758: LD_INT 1
35760: ARRAY
35761: IFFALSE 35765
// exit ;
35763: GO 36168
// height := hex [ 2 ] ;
35765: LD_ADDR_VAR 0 15
35769: PUSH
35770: LD_VAR 0 4
35774: PUSH
35775: LD_INT 2
35777: ARRAY
35778: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
35779: LD_ADDR_VAR 0 14
35783: PUSH
35784: LD_INT 0
35786: PUSH
35787: LD_INT 2
35789: PUSH
35790: LD_INT 3
35792: PUSH
35793: LD_INT 5
35795: PUSH
35796: EMPTY
35797: LIST
35798: LIST
35799: LIST
35800: LIST
35801: ST_TO_ADDR
// for i in tmp do
35802: LD_ADDR_VAR 0 8
35806: PUSH
35807: LD_VAR 0 14
35811: PUSH
35812: FOR_IN
35813: IFFALSE 35983
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
35815: LD_ADDR_VAR 0 9
35819: PUSH
35820: LD_VAR 0 10
35824: PPUSH
35825: LD_VAR 0 8
35829: PPUSH
35830: LD_INT 5
35832: PPUSH
35833: CALL_OW 272
35837: PUSH
35838: LD_VAR 0 11
35842: PPUSH
35843: LD_VAR 0 8
35847: PPUSH
35848: LD_INT 5
35850: PPUSH
35851: CALL_OW 273
35855: PUSH
35856: EMPTY
35857: LIST
35858: LIST
35859: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
35860: LD_VAR 0 9
35864: PUSH
35865: LD_INT 1
35867: ARRAY
35868: PPUSH
35869: LD_VAR 0 9
35873: PUSH
35874: LD_INT 2
35876: ARRAY
35877: PPUSH
35878: CALL_OW 488
35882: IFFALSE 35981
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
35884: LD_ADDR_VAR 0 4
35888: PUSH
35889: LD_VAR 0 9
35893: PUSH
35894: LD_INT 1
35896: ARRAY
35897: PPUSH
35898: LD_VAR 0 9
35902: PUSH
35903: LD_INT 2
35905: ARRAY
35906: PPUSH
35907: CALL_OW 546
35911: ST_TO_ADDR
// if hex [ 1 ] then
35912: LD_VAR 0 4
35916: PUSH
35917: LD_INT 1
35919: ARRAY
35920: IFFALSE 35924
// continue ;
35922: GO 35812
// h := hex [ 2 ] ;
35924: LD_ADDR_VAR 0 13
35928: PUSH
35929: LD_VAR 0 4
35933: PUSH
35934: LD_INT 2
35936: ARRAY
35937: ST_TO_ADDR
// if h + 7 < height then
35938: LD_VAR 0 13
35942: PUSH
35943: LD_INT 7
35945: PLUS
35946: PUSH
35947: LD_VAR 0 15
35951: LESS
35952: IFFALSE 35981
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
35954: LD_ADDR_VAR 0 18
35958: PUSH
35959: LD_INT 7
35961: PUSH
35962: LD_INT 28
35964: PUSH
35965: LD_INT 45
35967: PUSH
35968: EMPTY
35969: LIST
35970: LIST
35971: LIST
35972: PUSH
35973: LD_VAR 0 12
35977: ARRAY
35978: ST_TO_ADDR
// break ;
35979: GO 35983
// end ; end ; end ;
35981: GO 35812
35983: POP
35984: POP
// end ; if not weapon then
35985: LD_VAR 0 18
35989: NOT
35990: IFFALSE 36050
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
35992: LD_ADDR_VAR 0 5
35996: PUSH
35997: LD_VAR 0 5
36001: PUSH
36002: LD_INT 11
36004: PUSH
36005: LD_INT 30
36007: PUSH
36008: LD_INT 49
36010: PUSH
36011: EMPTY
36012: LIST
36013: LIST
36014: LIST
36015: DIFF
36016: ST_TO_ADDR
// if not list then
36017: LD_VAR 0 5
36021: NOT
36022: IFFALSE 36026
// exit ;
36024: GO 36168
// weapon := list [ rand ( 1 , list ) ] ;
36026: LD_ADDR_VAR 0 18
36030: PUSH
36031: LD_VAR 0 5
36035: PUSH
36036: LD_INT 1
36038: PPUSH
36039: LD_VAR 0 5
36043: PPUSH
36044: CALL_OW 12
36048: ARRAY
36049: ST_TO_ADDR
// end ; if weapon then
36050: LD_VAR 0 18
36054: IFFALSE 36168
// begin tmp := CostOfWeapon ( weapon ) ;
36056: LD_ADDR_VAR 0 14
36060: PUSH
36061: LD_VAR 0 18
36065: PPUSH
36066: CALL_OW 451
36070: ST_TO_ADDR
// j := GetBase ( tower ) ;
36071: LD_ADDR_VAR 0 9
36075: PUSH
36076: LD_VAR 0 1
36080: PPUSH
36081: CALL_OW 274
36085: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
36086: LD_VAR 0 9
36090: PPUSH
36091: LD_INT 1
36093: PPUSH
36094: CALL_OW 275
36098: PUSH
36099: LD_VAR 0 14
36103: PUSH
36104: LD_INT 1
36106: ARRAY
36107: GREATEREQUAL
36108: PUSH
36109: LD_VAR 0 9
36113: PPUSH
36114: LD_INT 2
36116: PPUSH
36117: CALL_OW 275
36121: PUSH
36122: LD_VAR 0 14
36126: PUSH
36127: LD_INT 2
36129: ARRAY
36130: GREATEREQUAL
36131: AND
36132: PUSH
36133: LD_VAR 0 9
36137: PPUSH
36138: LD_INT 3
36140: PPUSH
36141: CALL_OW 275
36145: PUSH
36146: LD_VAR 0 14
36150: PUSH
36151: LD_INT 3
36153: ARRAY
36154: GREATEREQUAL
36155: AND
36156: IFFALSE 36168
// result := weapon ;
36158: LD_ADDR_VAR 0 3
36162: PUSH
36163: LD_VAR 0 18
36167: ST_TO_ADDR
// end ; end ;
36168: LD_VAR 0 3
36172: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
36173: LD_INT 0
36175: PPUSH
36176: PPUSH
// result := true ;
36177: LD_ADDR_VAR 0 3
36181: PUSH
36182: LD_INT 1
36184: ST_TO_ADDR
// if array1 = array2 then
36185: LD_VAR 0 1
36189: PUSH
36190: LD_VAR 0 2
36194: EQUAL
36195: IFFALSE 36255
// begin for i = 1 to array1 do
36197: LD_ADDR_VAR 0 4
36201: PUSH
36202: DOUBLE
36203: LD_INT 1
36205: DEC
36206: ST_TO_ADDR
36207: LD_VAR 0 1
36211: PUSH
36212: FOR_TO
36213: IFFALSE 36251
// if array1 [ i ] <> array2 [ i ] then
36215: LD_VAR 0 1
36219: PUSH
36220: LD_VAR 0 4
36224: ARRAY
36225: PUSH
36226: LD_VAR 0 2
36230: PUSH
36231: LD_VAR 0 4
36235: ARRAY
36236: NONEQUAL
36237: IFFALSE 36249
// begin result := false ;
36239: LD_ADDR_VAR 0 3
36243: PUSH
36244: LD_INT 0
36246: ST_TO_ADDR
// break ;
36247: GO 36251
// end ;
36249: GO 36212
36251: POP
36252: POP
// end else
36253: GO 36263
// result := false ;
36255: LD_ADDR_VAR 0 3
36259: PUSH
36260: LD_INT 0
36262: ST_TO_ADDR
// end ;
36263: LD_VAR 0 3
36267: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
36268: LD_INT 0
36270: PPUSH
36271: PPUSH
// if not array1 or not array2 then
36272: LD_VAR 0 1
36276: NOT
36277: PUSH
36278: LD_VAR 0 2
36282: NOT
36283: OR
36284: IFFALSE 36288
// exit ;
36286: GO 36352
// result := true ;
36288: LD_ADDR_VAR 0 3
36292: PUSH
36293: LD_INT 1
36295: ST_TO_ADDR
// for i = 1 to array1 do
36296: LD_ADDR_VAR 0 4
36300: PUSH
36301: DOUBLE
36302: LD_INT 1
36304: DEC
36305: ST_TO_ADDR
36306: LD_VAR 0 1
36310: PUSH
36311: FOR_TO
36312: IFFALSE 36350
// if array1 [ i ] <> array2 [ i ] then
36314: LD_VAR 0 1
36318: PUSH
36319: LD_VAR 0 4
36323: ARRAY
36324: PUSH
36325: LD_VAR 0 2
36329: PUSH
36330: LD_VAR 0 4
36334: ARRAY
36335: NONEQUAL
36336: IFFALSE 36348
// begin result := false ;
36338: LD_ADDR_VAR 0 3
36342: PUSH
36343: LD_INT 0
36345: ST_TO_ADDR
// break ;
36346: GO 36350
// end ;
36348: GO 36311
36350: POP
36351: POP
// end ;
36352: LD_VAR 0 3
36356: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
36357: LD_INT 0
36359: PPUSH
36360: PPUSH
36361: PPUSH
// pom := GetBase ( fac ) ;
36362: LD_ADDR_VAR 0 5
36366: PUSH
36367: LD_VAR 0 1
36371: PPUSH
36372: CALL_OW 274
36376: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
36377: LD_ADDR_VAR 0 4
36381: PUSH
36382: LD_VAR 0 2
36386: PUSH
36387: LD_INT 1
36389: ARRAY
36390: PPUSH
36391: LD_VAR 0 2
36395: PUSH
36396: LD_INT 2
36398: ARRAY
36399: PPUSH
36400: LD_VAR 0 2
36404: PUSH
36405: LD_INT 3
36407: ARRAY
36408: PPUSH
36409: LD_VAR 0 2
36413: PUSH
36414: LD_INT 4
36416: ARRAY
36417: PPUSH
36418: CALL_OW 449
36422: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36423: LD_ADDR_VAR 0 3
36427: PUSH
36428: LD_VAR 0 5
36432: PPUSH
36433: LD_INT 1
36435: PPUSH
36436: CALL_OW 275
36440: PUSH
36441: LD_VAR 0 4
36445: PUSH
36446: LD_INT 1
36448: ARRAY
36449: GREATEREQUAL
36450: PUSH
36451: LD_VAR 0 5
36455: PPUSH
36456: LD_INT 2
36458: PPUSH
36459: CALL_OW 275
36463: PUSH
36464: LD_VAR 0 4
36468: PUSH
36469: LD_INT 2
36471: ARRAY
36472: GREATEREQUAL
36473: AND
36474: PUSH
36475: LD_VAR 0 5
36479: PPUSH
36480: LD_INT 3
36482: PPUSH
36483: CALL_OW 275
36487: PUSH
36488: LD_VAR 0 4
36492: PUSH
36493: LD_INT 3
36495: ARRAY
36496: GREATEREQUAL
36497: AND
36498: ST_TO_ADDR
// end ;
36499: LD_VAR 0 3
36503: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
36504: LD_INT 0
36506: PPUSH
36507: PPUSH
36508: PPUSH
36509: PPUSH
// pom := GetBase ( building ) ;
36510: LD_ADDR_VAR 0 3
36514: PUSH
36515: LD_VAR 0 1
36519: PPUSH
36520: CALL_OW 274
36524: ST_TO_ADDR
// if not pom then
36525: LD_VAR 0 3
36529: NOT
36530: IFFALSE 36534
// exit ;
36532: GO 36704
// btype := GetBType ( building ) ;
36534: LD_ADDR_VAR 0 5
36538: PUSH
36539: LD_VAR 0 1
36543: PPUSH
36544: CALL_OW 266
36548: ST_TO_ADDR
// if btype = b_armoury then
36549: LD_VAR 0 5
36553: PUSH
36554: LD_INT 4
36556: EQUAL
36557: IFFALSE 36567
// btype := b_barracks ;
36559: LD_ADDR_VAR 0 5
36563: PUSH
36564: LD_INT 5
36566: ST_TO_ADDR
// if btype = b_depot then
36567: LD_VAR 0 5
36571: PUSH
36572: LD_INT 0
36574: EQUAL
36575: IFFALSE 36585
// btype := b_warehouse ;
36577: LD_ADDR_VAR 0 5
36581: PUSH
36582: LD_INT 1
36584: ST_TO_ADDR
// if btype = b_workshop then
36585: LD_VAR 0 5
36589: PUSH
36590: LD_INT 2
36592: EQUAL
36593: IFFALSE 36603
// btype := b_factory ;
36595: LD_ADDR_VAR 0 5
36599: PUSH
36600: LD_INT 3
36602: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36603: LD_ADDR_VAR 0 4
36607: PUSH
36608: LD_VAR 0 5
36612: PPUSH
36613: LD_VAR 0 1
36617: PPUSH
36618: CALL_OW 248
36622: PPUSH
36623: CALL_OW 450
36627: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36628: LD_ADDR_VAR 0 2
36632: PUSH
36633: LD_VAR 0 3
36637: PPUSH
36638: LD_INT 1
36640: PPUSH
36641: CALL_OW 275
36645: PUSH
36646: LD_VAR 0 4
36650: PUSH
36651: LD_INT 1
36653: ARRAY
36654: GREATEREQUAL
36655: PUSH
36656: LD_VAR 0 3
36660: PPUSH
36661: LD_INT 2
36663: PPUSH
36664: CALL_OW 275
36668: PUSH
36669: LD_VAR 0 4
36673: PUSH
36674: LD_INT 2
36676: ARRAY
36677: GREATEREQUAL
36678: AND
36679: PUSH
36680: LD_VAR 0 3
36684: PPUSH
36685: LD_INT 3
36687: PPUSH
36688: CALL_OW 275
36692: PUSH
36693: LD_VAR 0 4
36697: PUSH
36698: LD_INT 3
36700: ARRAY
36701: GREATEREQUAL
36702: AND
36703: ST_TO_ADDR
// end ;
36704: LD_VAR 0 2
36708: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
36709: LD_INT 0
36711: PPUSH
36712: PPUSH
36713: PPUSH
// pom := GetBase ( building ) ;
36714: LD_ADDR_VAR 0 4
36718: PUSH
36719: LD_VAR 0 1
36723: PPUSH
36724: CALL_OW 274
36728: ST_TO_ADDR
// if not pom then
36729: LD_VAR 0 4
36733: NOT
36734: IFFALSE 36738
// exit ;
36736: GO 36839
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36738: LD_ADDR_VAR 0 5
36742: PUSH
36743: LD_VAR 0 2
36747: PPUSH
36748: LD_VAR 0 1
36752: PPUSH
36753: CALL_OW 248
36757: PPUSH
36758: CALL_OW 450
36762: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36763: LD_ADDR_VAR 0 3
36767: PUSH
36768: LD_VAR 0 4
36772: PPUSH
36773: LD_INT 1
36775: PPUSH
36776: CALL_OW 275
36780: PUSH
36781: LD_VAR 0 5
36785: PUSH
36786: LD_INT 1
36788: ARRAY
36789: GREATEREQUAL
36790: PUSH
36791: LD_VAR 0 4
36795: PPUSH
36796: LD_INT 2
36798: PPUSH
36799: CALL_OW 275
36803: PUSH
36804: LD_VAR 0 5
36808: PUSH
36809: LD_INT 2
36811: ARRAY
36812: GREATEREQUAL
36813: AND
36814: PUSH
36815: LD_VAR 0 4
36819: PPUSH
36820: LD_INT 3
36822: PPUSH
36823: CALL_OW 275
36827: PUSH
36828: LD_VAR 0 5
36832: PUSH
36833: LD_INT 3
36835: ARRAY
36836: GREATEREQUAL
36837: AND
36838: ST_TO_ADDR
// end ;
36839: LD_VAR 0 3
36843: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
36844: LD_INT 0
36846: PPUSH
36847: PPUSH
36848: PPUSH
36849: PPUSH
36850: PPUSH
36851: PPUSH
36852: PPUSH
36853: PPUSH
36854: PPUSH
36855: PPUSH
36856: PPUSH
// result := false ;
36857: LD_ADDR_VAR 0 8
36861: PUSH
36862: LD_INT 0
36864: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
36865: LD_VAR 0 5
36869: NOT
36870: PUSH
36871: LD_VAR 0 1
36875: NOT
36876: OR
36877: PUSH
36878: LD_VAR 0 2
36882: NOT
36883: OR
36884: PUSH
36885: LD_VAR 0 3
36889: NOT
36890: OR
36891: IFFALSE 36895
// exit ;
36893: GO 37709
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
36895: LD_ADDR_VAR 0 14
36899: PUSH
36900: LD_VAR 0 1
36904: PPUSH
36905: LD_VAR 0 2
36909: PPUSH
36910: LD_VAR 0 3
36914: PPUSH
36915: LD_VAR 0 4
36919: PPUSH
36920: LD_VAR 0 5
36924: PUSH
36925: LD_INT 1
36927: ARRAY
36928: PPUSH
36929: CALL_OW 248
36933: PPUSH
36934: LD_INT 0
36936: PPUSH
36937: CALL 38946 0 6
36941: ST_TO_ADDR
// if not hexes then
36942: LD_VAR 0 14
36946: NOT
36947: IFFALSE 36951
// exit ;
36949: GO 37709
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
36951: LD_ADDR_VAR 0 17
36955: PUSH
36956: LD_VAR 0 5
36960: PPUSH
36961: LD_INT 22
36963: PUSH
36964: LD_VAR 0 13
36968: PPUSH
36969: CALL_OW 255
36973: PUSH
36974: EMPTY
36975: LIST
36976: LIST
36977: PUSH
36978: LD_INT 2
36980: PUSH
36981: LD_INT 30
36983: PUSH
36984: LD_INT 0
36986: PUSH
36987: EMPTY
36988: LIST
36989: LIST
36990: PUSH
36991: LD_INT 30
36993: PUSH
36994: LD_INT 1
36996: PUSH
36997: EMPTY
36998: LIST
36999: LIST
37000: PUSH
37001: EMPTY
37002: LIST
37003: LIST
37004: LIST
37005: PUSH
37006: EMPTY
37007: LIST
37008: LIST
37009: PPUSH
37010: CALL_OW 72
37014: ST_TO_ADDR
// for i = 1 to hexes do
37015: LD_ADDR_VAR 0 9
37019: PUSH
37020: DOUBLE
37021: LD_INT 1
37023: DEC
37024: ST_TO_ADDR
37025: LD_VAR 0 14
37029: PUSH
37030: FOR_TO
37031: IFFALSE 37707
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37033: LD_ADDR_VAR 0 13
37037: PUSH
37038: LD_VAR 0 14
37042: PUSH
37043: LD_VAR 0 9
37047: ARRAY
37048: PUSH
37049: LD_INT 1
37051: ARRAY
37052: PPUSH
37053: LD_VAR 0 14
37057: PUSH
37058: LD_VAR 0 9
37062: ARRAY
37063: PUSH
37064: LD_INT 2
37066: ARRAY
37067: PPUSH
37068: CALL_OW 428
37072: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
37073: LD_VAR 0 14
37077: PUSH
37078: LD_VAR 0 9
37082: ARRAY
37083: PUSH
37084: LD_INT 1
37086: ARRAY
37087: PPUSH
37088: LD_VAR 0 14
37092: PUSH
37093: LD_VAR 0 9
37097: ARRAY
37098: PUSH
37099: LD_INT 2
37101: ARRAY
37102: PPUSH
37103: CALL_OW 351
37107: PUSH
37108: LD_VAR 0 14
37112: PUSH
37113: LD_VAR 0 9
37117: ARRAY
37118: PUSH
37119: LD_INT 1
37121: ARRAY
37122: PPUSH
37123: LD_VAR 0 14
37127: PUSH
37128: LD_VAR 0 9
37132: ARRAY
37133: PUSH
37134: LD_INT 2
37136: ARRAY
37137: PPUSH
37138: CALL_OW 488
37142: NOT
37143: OR
37144: PUSH
37145: LD_VAR 0 13
37149: PPUSH
37150: CALL_OW 247
37154: PUSH
37155: LD_INT 3
37157: EQUAL
37158: OR
37159: IFFALSE 37165
// exit ;
37161: POP
37162: POP
37163: GO 37709
// if not tmp then
37165: LD_VAR 0 13
37169: NOT
37170: IFFALSE 37174
// continue ;
37172: GO 37030
// result := true ;
37174: LD_ADDR_VAR 0 8
37178: PUSH
37179: LD_INT 1
37181: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
37182: LD_VAR 0 6
37186: PUSH
37187: LD_VAR 0 13
37191: PPUSH
37192: CALL_OW 247
37196: PUSH
37197: LD_INT 2
37199: EQUAL
37200: AND
37201: PUSH
37202: LD_VAR 0 13
37206: PPUSH
37207: CALL_OW 263
37211: PUSH
37212: LD_INT 1
37214: EQUAL
37215: AND
37216: IFFALSE 37380
// begin if IsDrivenBy ( tmp ) then
37218: LD_VAR 0 13
37222: PPUSH
37223: CALL_OW 311
37227: IFFALSE 37231
// continue ;
37229: GO 37030
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
37231: LD_VAR 0 6
37235: PPUSH
37236: LD_INT 3
37238: PUSH
37239: LD_INT 60
37241: PUSH
37242: EMPTY
37243: LIST
37244: PUSH
37245: EMPTY
37246: LIST
37247: LIST
37248: PUSH
37249: LD_INT 3
37251: PUSH
37252: LD_INT 55
37254: PUSH
37255: EMPTY
37256: LIST
37257: PUSH
37258: EMPTY
37259: LIST
37260: LIST
37261: PUSH
37262: EMPTY
37263: LIST
37264: LIST
37265: PPUSH
37266: CALL_OW 72
37270: IFFALSE 37378
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
37272: LD_ADDR_VAR 0 18
37276: PUSH
37277: LD_VAR 0 6
37281: PPUSH
37282: LD_INT 3
37284: PUSH
37285: LD_INT 60
37287: PUSH
37288: EMPTY
37289: LIST
37290: PUSH
37291: EMPTY
37292: LIST
37293: LIST
37294: PUSH
37295: LD_INT 3
37297: PUSH
37298: LD_INT 55
37300: PUSH
37301: EMPTY
37302: LIST
37303: PUSH
37304: EMPTY
37305: LIST
37306: LIST
37307: PUSH
37308: EMPTY
37309: LIST
37310: LIST
37311: PPUSH
37312: CALL_OW 72
37316: PUSH
37317: LD_INT 1
37319: ARRAY
37320: ST_TO_ADDR
// if IsInUnit ( driver ) then
37321: LD_VAR 0 18
37325: PPUSH
37326: CALL_OW 310
37330: IFFALSE 37341
// ComExit ( driver ) ;
37332: LD_VAR 0 18
37336: PPUSH
37337: CALL 62074 0 1
// AddComEnterUnit ( driver , tmp ) ;
37341: LD_VAR 0 18
37345: PPUSH
37346: LD_VAR 0 13
37350: PPUSH
37351: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
37355: LD_VAR 0 18
37359: PPUSH
37360: LD_VAR 0 7
37364: PPUSH
37365: CALL_OW 173
// AddComExitVehicle ( driver ) ;
37369: LD_VAR 0 18
37373: PPUSH
37374: CALL_OW 181
// end ; continue ;
37378: GO 37030
// end ; if not cleaners or not tmp in cleaners then
37380: LD_VAR 0 6
37384: NOT
37385: PUSH
37386: LD_VAR 0 13
37390: PUSH
37391: LD_VAR 0 6
37395: IN
37396: NOT
37397: OR
37398: IFFALSE 37705
// begin if dep then
37400: LD_VAR 0 17
37404: IFFALSE 37540
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
37406: LD_ADDR_VAR 0 16
37410: PUSH
37411: LD_VAR 0 17
37415: PUSH
37416: LD_INT 1
37418: ARRAY
37419: PPUSH
37420: CALL_OW 250
37424: PPUSH
37425: LD_VAR 0 17
37429: PUSH
37430: LD_INT 1
37432: ARRAY
37433: PPUSH
37434: CALL_OW 254
37438: PPUSH
37439: LD_INT 5
37441: PPUSH
37442: CALL_OW 272
37446: PUSH
37447: LD_VAR 0 17
37451: PUSH
37452: LD_INT 1
37454: ARRAY
37455: PPUSH
37456: CALL_OW 251
37460: PPUSH
37461: LD_VAR 0 17
37465: PUSH
37466: LD_INT 1
37468: ARRAY
37469: PPUSH
37470: CALL_OW 254
37474: PPUSH
37475: LD_INT 5
37477: PPUSH
37478: CALL_OW 273
37482: PUSH
37483: EMPTY
37484: LIST
37485: LIST
37486: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
37487: LD_VAR 0 16
37491: PUSH
37492: LD_INT 1
37494: ARRAY
37495: PPUSH
37496: LD_VAR 0 16
37500: PUSH
37501: LD_INT 2
37503: ARRAY
37504: PPUSH
37505: CALL_OW 488
37509: IFFALSE 37540
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
37511: LD_VAR 0 13
37515: PPUSH
37516: LD_VAR 0 16
37520: PUSH
37521: LD_INT 1
37523: ARRAY
37524: PPUSH
37525: LD_VAR 0 16
37529: PUSH
37530: LD_INT 2
37532: ARRAY
37533: PPUSH
37534: CALL_OW 111
// continue ;
37538: GO 37030
// end ; end ; r := GetDir ( tmp ) ;
37540: LD_ADDR_VAR 0 15
37544: PUSH
37545: LD_VAR 0 13
37549: PPUSH
37550: CALL_OW 254
37554: ST_TO_ADDR
// if r = 5 then
37555: LD_VAR 0 15
37559: PUSH
37560: LD_INT 5
37562: EQUAL
37563: IFFALSE 37573
// r := 0 ;
37565: LD_ADDR_VAR 0 15
37569: PUSH
37570: LD_INT 0
37572: ST_TO_ADDR
// for j = r to 5 do
37573: LD_ADDR_VAR 0 10
37577: PUSH
37578: DOUBLE
37579: LD_VAR 0 15
37583: DEC
37584: ST_TO_ADDR
37585: LD_INT 5
37587: PUSH
37588: FOR_TO
37589: IFFALSE 37703
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
37591: LD_ADDR_VAR 0 11
37595: PUSH
37596: LD_VAR 0 13
37600: PPUSH
37601: CALL_OW 250
37605: PPUSH
37606: LD_VAR 0 10
37610: PPUSH
37611: LD_INT 2
37613: PPUSH
37614: CALL_OW 272
37618: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
37619: LD_ADDR_VAR 0 12
37623: PUSH
37624: LD_VAR 0 13
37628: PPUSH
37629: CALL_OW 251
37633: PPUSH
37634: LD_VAR 0 10
37638: PPUSH
37639: LD_INT 2
37641: PPUSH
37642: CALL_OW 273
37646: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
37647: LD_VAR 0 11
37651: PPUSH
37652: LD_VAR 0 12
37656: PPUSH
37657: CALL_OW 488
37661: PUSH
37662: LD_VAR 0 11
37666: PPUSH
37667: LD_VAR 0 12
37671: PPUSH
37672: CALL_OW 428
37676: NOT
37677: AND
37678: IFFALSE 37701
// begin ComMoveXY ( tmp , _x , _y ) ;
37680: LD_VAR 0 13
37684: PPUSH
37685: LD_VAR 0 11
37689: PPUSH
37690: LD_VAR 0 12
37694: PPUSH
37695: CALL_OW 111
// break ;
37699: GO 37703
// end ; end ;
37701: GO 37588
37703: POP
37704: POP
// end ; end ;
37705: GO 37030
37707: POP
37708: POP
// end ;
37709: LD_VAR 0 8
37713: RET
// export function BuildingTechInvented ( side , btype ) ; begin
37714: LD_INT 0
37716: PPUSH
// result := true ;
37717: LD_ADDR_VAR 0 3
37721: PUSH
37722: LD_INT 1
37724: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
37725: LD_VAR 0 2
37729: PUSH
37730: LD_INT 24
37732: DOUBLE
37733: EQUAL
37734: IFTRUE 37744
37736: LD_INT 33
37738: DOUBLE
37739: EQUAL
37740: IFTRUE 37744
37742: GO 37769
37744: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
37745: LD_ADDR_VAR 0 3
37749: PUSH
37750: LD_INT 32
37752: PPUSH
37753: LD_VAR 0 1
37757: PPUSH
37758: CALL_OW 321
37762: PUSH
37763: LD_INT 2
37765: EQUAL
37766: ST_TO_ADDR
37767: GO 38089
37769: LD_INT 20
37771: DOUBLE
37772: EQUAL
37773: IFTRUE 37777
37775: GO 37802
37777: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
37778: LD_ADDR_VAR 0 3
37782: PUSH
37783: LD_INT 6
37785: PPUSH
37786: LD_VAR 0 1
37790: PPUSH
37791: CALL_OW 321
37795: PUSH
37796: LD_INT 2
37798: EQUAL
37799: ST_TO_ADDR
37800: GO 38089
37802: LD_INT 22
37804: DOUBLE
37805: EQUAL
37806: IFTRUE 37816
37808: LD_INT 36
37810: DOUBLE
37811: EQUAL
37812: IFTRUE 37816
37814: GO 37841
37816: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
37817: LD_ADDR_VAR 0 3
37821: PUSH
37822: LD_INT 15
37824: PPUSH
37825: LD_VAR 0 1
37829: PPUSH
37830: CALL_OW 321
37834: PUSH
37835: LD_INT 2
37837: EQUAL
37838: ST_TO_ADDR
37839: GO 38089
37841: LD_INT 30
37843: DOUBLE
37844: EQUAL
37845: IFTRUE 37849
37847: GO 37874
37849: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
37850: LD_ADDR_VAR 0 3
37854: PUSH
37855: LD_INT 20
37857: PPUSH
37858: LD_VAR 0 1
37862: PPUSH
37863: CALL_OW 321
37867: PUSH
37868: LD_INT 2
37870: EQUAL
37871: ST_TO_ADDR
37872: GO 38089
37874: LD_INT 28
37876: DOUBLE
37877: EQUAL
37878: IFTRUE 37888
37880: LD_INT 21
37882: DOUBLE
37883: EQUAL
37884: IFTRUE 37888
37886: GO 37913
37888: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
37889: LD_ADDR_VAR 0 3
37893: PUSH
37894: LD_INT 21
37896: PPUSH
37897: LD_VAR 0 1
37901: PPUSH
37902: CALL_OW 321
37906: PUSH
37907: LD_INT 2
37909: EQUAL
37910: ST_TO_ADDR
37911: GO 38089
37913: LD_INT 16
37915: DOUBLE
37916: EQUAL
37917: IFTRUE 37921
37919: GO 37948
37921: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
37922: LD_ADDR_VAR 0 3
37926: PUSH
37927: LD_EXP 105
37931: PPUSH
37932: LD_VAR 0 1
37936: PPUSH
37937: CALL_OW 321
37941: PUSH
37942: LD_INT 2
37944: EQUAL
37945: ST_TO_ADDR
37946: GO 38089
37948: LD_INT 19
37950: DOUBLE
37951: EQUAL
37952: IFTRUE 37962
37954: LD_INT 23
37956: DOUBLE
37957: EQUAL
37958: IFTRUE 37962
37960: GO 37989
37962: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
37963: LD_ADDR_VAR 0 3
37967: PUSH
37968: LD_EXP 104
37972: PPUSH
37973: LD_VAR 0 1
37977: PPUSH
37978: CALL_OW 321
37982: PUSH
37983: LD_INT 2
37985: EQUAL
37986: ST_TO_ADDR
37987: GO 38089
37989: LD_INT 17
37991: DOUBLE
37992: EQUAL
37993: IFTRUE 37997
37995: GO 38022
37997: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
37998: LD_ADDR_VAR 0 3
38002: PUSH
38003: LD_INT 39
38005: PPUSH
38006: LD_VAR 0 1
38010: PPUSH
38011: CALL_OW 321
38015: PUSH
38016: LD_INT 2
38018: EQUAL
38019: ST_TO_ADDR
38020: GO 38089
38022: LD_INT 18
38024: DOUBLE
38025: EQUAL
38026: IFTRUE 38030
38028: GO 38055
38030: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
38031: LD_ADDR_VAR 0 3
38035: PUSH
38036: LD_INT 40
38038: PPUSH
38039: LD_VAR 0 1
38043: PPUSH
38044: CALL_OW 321
38048: PUSH
38049: LD_INT 2
38051: EQUAL
38052: ST_TO_ADDR
38053: GO 38089
38055: LD_INT 27
38057: DOUBLE
38058: EQUAL
38059: IFTRUE 38063
38061: GO 38088
38063: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
38064: LD_ADDR_VAR 0 3
38068: PUSH
38069: LD_INT 35
38071: PPUSH
38072: LD_VAR 0 1
38076: PPUSH
38077: CALL_OW 321
38081: PUSH
38082: LD_INT 2
38084: EQUAL
38085: ST_TO_ADDR
38086: GO 38089
38088: POP
// end ;
38089: LD_VAR 0 3
38093: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
38094: LD_INT 0
38096: PPUSH
38097: PPUSH
38098: PPUSH
38099: PPUSH
38100: PPUSH
38101: PPUSH
38102: PPUSH
38103: PPUSH
38104: PPUSH
38105: PPUSH
38106: PPUSH
// result := false ;
38107: LD_ADDR_VAR 0 6
38111: PUSH
38112: LD_INT 0
38114: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
38115: LD_VAR 0 1
38119: NOT
38120: PUSH
38121: LD_VAR 0 1
38125: PPUSH
38126: CALL_OW 266
38130: PUSH
38131: LD_INT 0
38133: PUSH
38134: LD_INT 1
38136: PUSH
38137: EMPTY
38138: LIST
38139: LIST
38140: IN
38141: NOT
38142: OR
38143: PUSH
38144: LD_VAR 0 2
38148: NOT
38149: OR
38150: PUSH
38151: LD_VAR 0 5
38155: PUSH
38156: LD_INT 0
38158: PUSH
38159: LD_INT 1
38161: PUSH
38162: LD_INT 2
38164: PUSH
38165: LD_INT 3
38167: PUSH
38168: LD_INT 4
38170: PUSH
38171: LD_INT 5
38173: PUSH
38174: EMPTY
38175: LIST
38176: LIST
38177: LIST
38178: LIST
38179: LIST
38180: LIST
38181: IN
38182: NOT
38183: OR
38184: PUSH
38185: LD_VAR 0 3
38189: PPUSH
38190: LD_VAR 0 4
38194: PPUSH
38195: CALL_OW 488
38199: NOT
38200: OR
38201: IFFALSE 38205
// exit ;
38203: GO 38941
// side := GetSide ( depot ) ;
38205: LD_ADDR_VAR 0 9
38209: PUSH
38210: LD_VAR 0 1
38214: PPUSH
38215: CALL_OW 255
38219: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
38220: LD_VAR 0 9
38224: PPUSH
38225: LD_VAR 0 2
38229: PPUSH
38230: CALL 37714 0 2
38234: NOT
38235: IFFALSE 38239
// exit ;
38237: GO 38941
// pom := GetBase ( depot ) ;
38239: LD_ADDR_VAR 0 10
38243: PUSH
38244: LD_VAR 0 1
38248: PPUSH
38249: CALL_OW 274
38253: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
38254: LD_ADDR_VAR 0 11
38258: PUSH
38259: LD_VAR 0 2
38263: PPUSH
38264: LD_VAR 0 1
38268: PPUSH
38269: CALL_OW 248
38273: PPUSH
38274: CALL_OW 450
38278: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
38279: LD_VAR 0 10
38283: PPUSH
38284: LD_INT 1
38286: PPUSH
38287: CALL_OW 275
38291: PUSH
38292: LD_VAR 0 11
38296: PUSH
38297: LD_INT 1
38299: ARRAY
38300: GREATEREQUAL
38301: PUSH
38302: LD_VAR 0 10
38306: PPUSH
38307: LD_INT 2
38309: PPUSH
38310: CALL_OW 275
38314: PUSH
38315: LD_VAR 0 11
38319: PUSH
38320: LD_INT 2
38322: ARRAY
38323: GREATEREQUAL
38324: AND
38325: PUSH
38326: LD_VAR 0 10
38330: PPUSH
38331: LD_INT 3
38333: PPUSH
38334: CALL_OW 275
38338: PUSH
38339: LD_VAR 0 11
38343: PUSH
38344: LD_INT 3
38346: ARRAY
38347: GREATEREQUAL
38348: AND
38349: NOT
38350: IFFALSE 38354
// exit ;
38352: GO 38941
// if GetBType ( depot ) = b_depot then
38354: LD_VAR 0 1
38358: PPUSH
38359: CALL_OW 266
38363: PUSH
38364: LD_INT 0
38366: EQUAL
38367: IFFALSE 38379
// dist := 28 else
38369: LD_ADDR_VAR 0 14
38373: PUSH
38374: LD_INT 28
38376: ST_TO_ADDR
38377: GO 38387
// dist := 36 ;
38379: LD_ADDR_VAR 0 14
38383: PUSH
38384: LD_INT 36
38386: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
38387: LD_VAR 0 1
38391: PPUSH
38392: LD_VAR 0 3
38396: PPUSH
38397: LD_VAR 0 4
38401: PPUSH
38402: CALL_OW 297
38406: PUSH
38407: LD_VAR 0 14
38411: GREATER
38412: IFFALSE 38416
// exit ;
38414: GO 38941
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
38416: LD_ADDR_VAR 0 12
38420: PUSH
38421: LD_VAR 0 2
38425: PPUSH
38426: LD_VAR 0 3
38430: PPUSH
38431: LD_VAR 0 4
38435: PPUSH
38436: LD_VAR 0 5
38440: PPUSH
38441: LD_VAR 0 1
38445: PPUSH
38446: CALL_OW 248
38450: PPUSH
38451: LD_INT 0
38453: PPUSH
38454: CALL 38946 0 6
38458: ST_TO_ADDR
// if not hexes then
38459: LD_VAR 0 12
38463: NOT
38464: IFFALSE 38468
// exit ;
38466: GO 38941
// hex := GetHexInfo ( x , y ) ;
38468: LD_ADDR_VAR 0 15
38472: PUSH
38473: LD_VAR 0 3
38477: PPUSH
38478: LD_VAR 0 4
38482: PPUSH
38483: CALL_OW 546
38487: ST_TO_ADDR
// if hex [ 1 ] then
38488: LD_VAR 0 15
38492: PUSH
38493: LD_INT 1
38495: ARRAY
38496: IFFALSE 38500
// exit ;
38498: GO 38941
// height := hex [ 2 ] ;
38500: LD_ADDR_VAR 0 13
38504: PUSH
38505: LD_VAR 0 15
38509: PUSH
38510: LD_INT 2
38512: ARRAY
38513: ST_TO_ADDR
// for i = 1 to hexes do
38514: LD_ADDR_VAR 0 7
38518: PUSH
38519: DOUBLE
38520: LD_INT 1
38522: DEC
38523: ST_TO_ADDR
38524: LD_VAR 0 12
38528: PUSH
38529: FOR_TO
38530: IFFALSE 38860
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
38532: LD_VAR 0 12
38536: PUSH
38537: LD_VAR 0 7
38541: ARRAY
38542: PUSH
38543: LD_INT 1
38545: ARRAY
38546: PPUSH
38547: LD_VAR 0 12
38551: PUSH
38552: LD_VAR 0 7
38556: ARRAY
38557: PUSH
38558: LD_INT 2
38560: ARRAY
38561: PPUSH
38562: CALL_OW 488
38566: NOT
38567: PUSH
38568: LD_VAR 0 12
38572: PUSH
38573: LD_VAR 0 7
38577: ARRAY
38578: PUSH
38579: LD_INT 1
38581: ARRAY
38582: PPUSH
38583: LD_VAR 0 12
38587: PUSH
38588: LD_VAR 0 7
38592: ARRAY
38593: PUSH
38594: LD_INT 2
38596: ARRAY
38597: PPUSH
38598: CALL_OW 428
38602: PUSH
38603: LD_INT 0
38605: GREATER
38606: OR
38607: PUSH
38608: LD_VAR 0 12
38612: PUSH
38613: LD_VAR 0 7
38617: ARRAY
38618: PUSH
38619: LD_INT 1
38621: ARRAY
38622: PPUSH
38623: LD_VAR 0 12
38627: PUSH
38628: LD_VAR 0 7
38632: ARRAY
38633: PUSH
38634: LD_INT 2
38636: ARRAY
38637: PPUSH
38638: CALL_OW 351
38642: OR
38643: IFFALSE 38649
// exit ;
38645: POP
38646: POP
38647: GO 38941
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38649: LD_ADDR_VAR 0 8
38653: PUSH
38654: LD_VAR 0 12
38658: PUSH
38659: LD_VAR 0 7
38663: ARRAY
38664: PUSH
38665: LD_INT 1
38667: ARRAY
38668: PPUSH
38669: LD_VAR 0 12
38673: PUSH
38674: LD_VAR 0 7
38678: ARRAY
38679: PUSH
38680: LD_INT 2
38682: ARRAY
38683: PPUSH
38684: CALL_OW 546
38688: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
38689: LD_VAR 0 8
38693: PUSH
38694: LD_INT 1
38696: ARRAY
38697: PUSH
38698: LD_VAR 0 8
38702: PUSH
38703: LD_INT 2
38705: ARRAY
38706: PUSH
38707: LD_VAR 0 13
38711: PUSH
38712: LD_INT 2
38714: PLUS
38715: GREATER
38716: OR
38717: PUSH
38718: LD_VAR 0 8
38722: PUSH
38723: LD_INT 2
38725: ARRAY
38726: PUSH
38727: LD_VAR 0 13
38731: PUSH
38732: LD_INT 2
38734: MINUS
38735: LESS
38736: OR
38737: PUSH
38738: LD_VAR 0 8
38742: PUSH
38743: LD_INT 3
38745: ARRAY
38746: PUSH
38747: LD_INT 0
38749: PUSH
38750: LD_INT 8
38752: PUSH
38753: LD_INT 9
38755: PUSH
38756: LD_INT 10
38758: PUSH
38759: LD_INT 11
38761: PUSH
38762: LD_INT 12
38764: PUSH
38765: LD_INT 13
38767: PUSH
38768: LD_INT 16
38770: PUSH
38771: LD_INT 17
38773: PUSH
38774: LD_INT 18
38776: PUSH
38777: LD_INT 19
38779: PUSH
38780: LD_INT 20
38782: PUSH
38783: LD_INT 21
38785: PUSH
38786: EMPTY
38787: LIST
38788: LIST
38789: LIST
38790: LIST
38791: LIST
38792: LIST
38793: LIST
38794: LIST
38795: LIST
38796: LIST
38797: LIST
38798: LIST
38799: LIST
38800: IN
38801: NOT
38802: OR
38803: PUSH
38804: LD_VAR 0 8
38808: PUSH
38809: LD_INT 5
38811: ARRAY
38812: NOT
38813: OR
38814: PUSH
38815: LD_VAR 0 8
38819: PUSH
38820: LD_INT 6
38822: ARRAY
38823: PUSH
38824: LD_INT 1
38826: PUSH
38827: LD_INT 2
38829: PUSH
38830: LD_INT 7
38832: PUSH
38833: LD_INT 9
38835: PUSH
38836: LD_INT 10
38838: PUSH
38839: LD_INT 11
38841: PUSH
38842: EMPTY
38843: LIST
38844: LIST
38845: LIST
38846: LIST
38847: LIST
38848: LIST
38849: IN
38850: NOT
38851: OR
38852: IFFALSE 38858
// exit ;
38854: POP
38855: POP
38856: GO 38941
// end ;
38858: GO 38529
38860: POP
38861: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
38862: LD_VAR 0 9
38866: PPUSH
38867: LD_VAR 0 3
38871: PPUSH
38872: LD_VAR 0 4
38876: PPUSH
38877: LD_INT 20
38879: PPUSH
38880: CALL 30887 0 4
38884: PUSH
38885: LD_INT 4
38887: ARRAY
38888: IFFALSE 38892
// exit ;
38890: GO 38941
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
38892: LD_VAR 0 2
38896: PUSH
38897: LD_INT 29
38899: PUSH
38900: LD_INT 30
38902: PUSH
38903: EMPTY
38904: LIST
38905: LIST
38906: IN
38907: PUSH
38908: LD_VAR 0 3
38912: PPUSH
38913: LD_VAR 0 4
38917: PPUSH
38918: LD_VAR 0 9
38922: PPUSH
38923: CALL_OW 440
38927: NOT
38928: AND
38929: IFFALSE 38933
// exit ;
38931: GO 38941
// result := true ;
38933: LD_ADDR_VAR 0 6
38937: PUSH
38938: LD_INT 1
38940: ST_TO_ADDR
// end ;
38941: LD_VAR 0 6
38945: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
38946: LD_INT 0
38948: PPUSH
38949: PPUSH
38950: PPUSH
38951: PPUSH
38952: PPUSH
38953: PPUSH
38954: PPUSH
38955: PPUSH
38956: PPUSH
38957: PPUSH
38958: PPUSH
38959: PPUSH
38960: PPUSH
38961: PPUSH
38962: PPUSH
38963: PPUSH
38964: PPUSH
38965: PPUSH
38966: PPUSH
38967: PPUSH
38968: PPUSH
38969: PPUSH
38970: PPUSH
38971: PPUSH
38972: PPUSH
38973: PPUSH
38974: PPUSH
38975: PPUSH
38976: PPUSH
38977: PPUSH
38978: PPUSH
38979: PPUSH
38980: PPUSH
38981: PPUSH
38982: PPUSH
38983: PPUSH
38984: PPUSH
38985: PPUSH
38986: PPUSH
38987: PPUSH
38988: PPUSH
38989: PPUSH
38990: PPUSH
38991: PPUSH
38992: PPUSH
38993: PPUSH
38994: PPUSH
38995: PPUSH
38996: PPUSH
38997: PPUSH
38998: PPUSH
38999: PPUSH
39000: PPUSH
39001: PPUSH
39002: PPUSH
39003: PPUSH
39004: PPUSH
39005: PPUSH
// result = [ ] ;
39006: LD_ADDR_VAR 0 7
39010: PUSH
39011: EMPTY
39012: ST_TO_ADDR
// temp_list = [ ] ;
39013: LD_ADDR_VAR 0 9
39017: PUSH
39018: EMPTY
39019: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
39020: LD_VAR 0 4
39024: PUSH
39025: LD_INT 0
39027: PUSH
39028: LD_INT 1
39030: PUSH
39031: LD_INT 2
39033: PUSH
39034: LD_INT 3
39036: PUSH
39037: LD_INT 4
39039: PUSH
39040: LD_INT 5
39042: PUSH
39043: EMPTY
39044: LIST
39045: LIST
39046: LIST
39047: LIST
39048: LIST
39049: LIST
39050: IN
39051: NOT
39052: PUSH
39053: LD_VAR 0 1
39057: PUSH
39058: LD_INT 0
39060: PUSH
39061: LD_INT 1
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: IN
39068: PUSH
39069: LD_VAR 0 5
39073: PUSH
39074: LD_INT 1
39076: PUSH
39077: LD_INT 2
39079: PUSH
39080: LD_INT 3
39082: PUSH
39083: EMPTY
39084: LIST
39085: LIST
39086: LIST
39087: IN
39088: NOT
39089: AND
39090: OR
39091: IFFALSE 39095
// exit ;
39093: GO 57486
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
39095: LD_VAR 0 1
39099: PUSH
39100: LD_INT 6
39102: PUSH
39103: LD_INT 7
39105: PUSH
39106: LD_INT 8
39108: PUSH
39109: LD_INT 13
39111: PUSH
39112: LD_INT 12
39114: PUSH
39115: LD_INT 15
39117: PUSH
39118: LD_INT 11
39120: PUSH
39121: LD_INT 14
39123: PUSH
39124: LD_INT 10
39126: PUSH
39127: EMPTY
39128: LIST
39129: LIST
39130: LIST
39131: LIST
39132: LIST
39133: LIST
39134: LIST
39135: LIST
39136: LIST
39137: IN
39138: IFFALSE 39148
// btype = b_lab ;
39140: LD_ADDR_VAR 0 1
39144: PUSH
39145: LD_INT 6
39147: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
39148: LD_VAR 0 6
39152: PUSH
39153: LD_INT 0
39155: PUSH
39156: LD_INT 1
39158: PUSH
39159: LD_INT 2
39161: PUSH
39162: EMPTY
39163: LIST
39164: LIST
39165: LIST
39166: IN
39167: NOT
39168: PUSH
39169: LD_VAR 0 1
39173: PUSH
39174: LD_INT 0
39176: PUSH
39177: LD_INT 1
39179: PUSH
39180: LD_INT 2
39182: PUSH
39183: LD_INT 3
39185: PUSH
39186: LD_INT 6
39188: PUSH
39189: LD_INT 36
39191: PUSH
39192: LD_INT 4
39194: PUSH
39195: LD_INT 5
39197: PUSH
39198: LD_INT 31
39200: PUSH
39201: LD_INT 32
39203: PUSH
39204: LD_INT 33
39206: PUSH
39207: EMPTY
39208: LIST
39209: LIST
39210: LIST
39211: LIST
39212: LIST
39213: LIST
39214: LIST
39215: LIST
39216: LIST
39217: LIST
39218: LIST
39219: IN
39220: NOT
39221: PUSH
39222: LD_VAR 0 6
39226: PUSH
39227: LD_INT 1
39229: EQUAL
39230: AND
39231: OR
39232: PUSH
39233: LD_VAR 0 1
39237: PUSH
39238: LD_INT 2
39240: PUSH
39241: LD_INT 3
39243: PUSH
39244: EMPTY
39245: LIST
39246: LIST
39247: IN
39248: NOT
39249: PUSH
39250: LD_VAR 0 6
39254: PUSH
39255: LD_INT 2
39257: EQUAL
39258: AND
39259: OR
39260: IFFALSE 39270
// mode = 0 ;
39262: LD_ADDR_VAR 0 6
39266: PUSH
39267: LD_INT 0
39269: ST_TO_ADDR
// case mode of 0 :
39270: LD_VAR 0 6
39274: PUSH
39275: LD_INT 0
39277: DOUBLE
39278: EQUAL
39279: IFTRUE 39283
39281: GO 50736
39283: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39284: LD_ADDR_VAR 0 11
39288: PUSH
39289: LD_INT 0
39291: PUSH
39292: LD_INT 0
39294: PUSH
39295: EMPTY
39296: LIST
39297: LIST
39298: PUSH
39299: LD_INT 0
39301: PUSH
39302: LD_INT 1
39304: NEG
39305: PUSH
39306: EMPTY
39307: LIST
39308: LIST
39309: PUSH
39310: LD_INT 1
39312: PUSH
39313: LD_INT 0
39315: PUSH
39316: EMPTY
39317: LIST
39318: LIST
39319: PUSH
39320: LD_INT 1
39322: PUSH
39323: LD_INT 1
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: PUSH
39330: LD_INT 0
39332: PUSH
39333: LD_INT 1
39335: PUSH
39336: EMPTY
39337: LIST
39338: LIST
39339: PUSH
39340: LD_INT 1
39342: NEG
39343: PUSH
39344: LD_INT 0
39346: PUSH
39347: EMPTY
39348: LIST
39349: LIST
39350: PUSH
39351: LD_INT 1
39353: NEG
39354: PUSH
39355: LD_INT 1
39357: NEG
39358: PUSH
39359: EMPTY
39360: LIST
39361: LIST
39362: PUSH
39363: LD_INT 1
39365: NEG
39366: PUSH
39367: LD_INT 2
39369: NEG
39370: PUSH
39371: EMPTY
39372: LIST
39373: LIST
39374: PUSH
39375: LD_INT 0
39377: PUSH
39378: LD_INT 2
39380: NEG
39381: PUSH
39382: EMPTY
39383: LIST
39384: LIST
39385: PUSH
39386: LD_INT 1
39388: PUSH
39389: LD_INT 1
39391: NEG
39392: PUSH
39393: EMPTY
39394: LIST
39395: LIST
39396: PUSH
39397: LD_INT 1
39399: PUSH
39400: LD_INT 2
39402: PUSH
39403: EMPTY
39404: LIST
39405: LIST
39406: PUSH
39407: LD_INT 0
39409: PUSH
39410: LD_INT 2
39412: PUSH
39413: EMPTY
39414: LIST
39415: LIST
39416: PUSH
39417: LD_INT 1
39419: NEG
39420: PUSH
39421: LD_INT 1
39423: PUSH
39424: EMPTY
39425: LIST
39426: LIST
39427: PUSH
39428: LD_INT 1
39430: PUSH
39431: LD_INT 3
39433: PUSH
39434: EMPTY
39435: LIST
39436: LIST
39437: PUSH
39438: LD_INT 0
39440: PUSH
39441: LD_INT 3
39443: PUSH
39444: EMPTY
39445: LIST
39446: LIST
39447: PUSH
39448: LD_INT 1
39450: NEG
39451: PUSH
39452: LD_INT 2
39454: PUSH
39455: EMPTY
39456: LIST
39457: LIST
39458: PUSH
39459: EMPTY
39460: LIST
39461: LIST
39462: LIST
39463: LIST
39464: LIST
39465: LIST
39466: LIST
39467: LIST
39468: LIST
39469: LIST
39470: LIST
39471: LIST
39472: LIST
39473: LIST
39474: LIST
39475: LIST
39476: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39477: LD_ADDR_VAR 0 12
39481: PUSH
39482: LD_INT 0
39484: PUSH
39485: LD_INT 0
39487: PUSH
39488: EMPTY
39489: LIST
39490: LIST
39491: PUSH
39492: LD_INT 0
39494: PUSH
39495: LD_INT 1
39497: NEG
39498: PUSH
39499: EMPTY
39500: LIST
39501: LIST
39502: PUSH
39503: LD_INT 1
39505: PUSH
39506: LD_INT 0
39508: PUSH
39509: EMPTY
39510: LIST
39511: LIST
39512: PUSH
39513: LD_INT 1
39515: PUSH
39516: LD_INT 1
39518: PUSH
39519: EMPTY
39520: LIST
39521: LIST
39522: PUSH
39523: LD_INT 0
39525: PUSH
39526: LD_INT 1
39528: PUSH
39529: EMPTY
39530: LIST
39531: LIST
39532: PUSH
39533: LD_INT 1
39535: NEG
39536: PUSH
39537: LD_INT 0
39539: PUSH
39540: EMPTY
39541: LIST
39542: LIST
39543: PUSH
39544: LD_INT 1
39546: NEG
39547: PUSH
39548: LD_INT 1
39550: NEG
39551: PUSH
39552: EMPTY
39553: LIST
39554: LIST
39555: PUSH
39556: LD_INT 1
39558: PUSH
39559: LD_INT 1
39561: NEG
39562: PUSH
39563: EMPTY
39564: LIST
39565: LIST
39566: PUSH
39567: LD_INT 2
39569: PUSH
39570: LD_INT 0
39572: PUSH
39573: EMPTY
39574: LIST
39575: LIST
39576: PUSH
39577: LD_INT 2
39579: PUSH
39580: LD_INT 1
39582: PUSH
39583: EMPTY
39584: LIST
39585: LIST
39586: PUSH
39587: LD_INT 1
39589: NEG
39590: PUSH
39591: LD_INT 1
39593: PUSH
39594: EMPTY
39595: LIST
39596: LIST
39597: PUSH
39598: LD_INT 2
39600: NEG
39601: PUSH
39602: LD_INT 0
39604: PUSH
39605: EMPTY
39606: LIST
39607: LIST
39608: PUSH
39609: LD_INT 2
39611: NEG
39612: PUSH
39613: LD_INT 1
39615: NEG
39616: PUSH
39617: EMPTY
39618: LIST
39619: LIST
39620: PUSH
39621: LD_INT 2
39623: NEG
39624: PUSH
39625: LD_INT 1
39627: PUSH
39628: EMPTY
39629: LIST
39630: LIST
39631: PUSH
39632: LD_INT 3
39634: NEG
39635: PUSH
39636: LD_INT 0
39638: PUSH
39639: EMPTY
39640: LIST
39641: LIST
39642: PUSH
39643: LD_INT 3
39645: NEG
39646: PUSH
39647: LD_INT 1
39649: NEG
39650: PUSH
39651: EMPTY
39652: LIST
39653: LIST
39654: PUSH
39655: EMPTY
39656: LIST
39657: LIST
39658: LIST
39659: LIST
39660: LIST
39661: LIST
39662: LIST
39663: LIST
39664: LIST
39665: LIST
39666: LIST
39667: LIST
39668: LIST
39669: LIST
39670: LIST
39671: LIST
39672: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39673: LD_ADDR_VAR 0 13
39677: PUSH
39678: LD_INT 0
39680: PUSH
39681: LD_INT 0
39683: PUSH
39684: EMPTY
39685: LIST
39686: LIST
39687: PUSH
39688: LD_INT 0
39690: PUSH
39691: LD_INT 1
39693: NEG
39694: PUSH
39695: EMPTY
39696: LIST
39697: LIST
39698: PUSH
39699: LD_INT 1
39701: PUSH
39702: LD_INT 0
39704: PUSH
39705: EMPTY
39706: LIST
39707: LIST
39708: PUSH
39709: LD_INT 1
39711: PUSH
39712: LD_INT 1
39714: PUSH
39715: EMPTY
39716: LIST
39717: LIST
39718: PUSH
39719: LD_INT 0
39721: PUSH
39722: LD_INT 1
39724: PUSH
39725: EMPTY
39726: LIST
39727: LIST
39728: PUSH
39729: LD_INT 1
39731: NEG
39732: PUSH
39733: LD_INT 0
39735: PUSH
39736: EMPTY
39737: LIST
39738: LIST
39739: PUSH
39740: LD_INT 1
39742: NEG
39743: PUSH
39744: LD_INT 1
39746: NEG
39747: PUSH
39748: EMPTY
39749: LIST
39750: LIST
39751: PUSH
39752: LD_INT 1
39754: NEG
39755: PUSH
39756: LD_INT 2
39758: NEG
39759: PUSH
39760: EMPTY
39761: LIST
39762: LIST
39763: PUSH
39764: LD_INT 2
39766: PUSH
39767: LD_INT 1
39769: PUSH
39770: EMPTY
39771: LIST
39772: LIST
39773: PUSH
39774: LD_INT 2
39776: PUSH
39777: LD_INT 2
39779: PUSH
39780: EMPTY
39781: LIST
39782: LIST
39783: PUSH
39784: LD_INT 1
39786: PUSH
39787: LD_INT 2
39789: PUSH
39790: EMPTY
39791: LIST
39792: LIST
39793: PUSH
39794: LD_INT 2
39796: NEG
39797: PUSH
39798: LD_INT 1
39800: NEG
39801: PUSH
39802: EMPTY
39803: LIST
39804: LIST
39805: PUSH
39806: LD_INT 2
39808: NEG
39809: PUSH
39810: LD_INT 2
39812: NEG
39813: PUSH
39814: EMPTY
39815: LIST
39816: LIST
39817: PUSH
39818: LD_INT 2
39820: NEG
39821: PUSH
39822: LD_INT 3
39824: NEG
39825: PUSH
39826: EMPTY
39827: LIST
39828: LIST
39829: PUSH
39830: LD_INT 3
39832: NEG
39833: PUSH
39834: LD_INT 2
39836: NEG
39837: PUSH
39838: EMPTY
39839: LIST
39840: LIST
39841: PUSH
39842: LD_INT 3
39844: NEG
39845: PUSH
39846: LD_INT 3
39848: NEG
39849: PUSH
39850: EMPTY
39851: LIST
39852: LIST
39853: PUSH
39854: EMPTY
39855: LIST
39856: LIST
39857: LIST
39858: LIST
39859: LIST
39860: LIST
39861: LIST
39862: LIST
39863: LIST
39864: LIST
39865: LIST
39866: LIST
39867: LIST
39868: LIST
39869: LIST
39870: LIST
39871: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39872: LD_ADDR_VAR 0 14
39876: PUSH
39877: LD_INT 0
39879: PUSH
39880: LD_INT 0
39882: PUSH
39883: EMPTY
39884: LIST
39885: LIST
39886: PUSH
39887: LD_INT 0
39889: PUSH
39890: LD_INT 1
39892: NEG
39893: PUSH
39894: EMPTY
39895: LIST
39896: LIST
39897: PUSH
39898: LD_INT 1
39900: PUSH
39901: LD_INT 0
39903: PUSH
39904: EMPTY
39905: LIST
39906: LIST
39907: PUSH
39908: LD_INT 1
39910: PUSH
39911: LD_INT 1
39913: PUSH
39914: EMPTY
39915: LIST
39916: LIST
39917: PUSH
39918: LD_INT 0
39920: PUSH
39921: LD_INT 1
39923: PUSH
39924: EMPTY
39925: LIST
39926: LIST
39927: PUSH
39928: LD_INT 1
39930: NEG
39931: PUSH
39932: LD_INT 0
39934: PUSH
39935: EMPTY
39936: LIST
39937: LIST
39938: PUSH
39939: LD_INT 1
39941: NEG
39942: PUSH
39943: LD_INT 1
39945: NEG
39946: PUSH
39947: EMPTY
39948: LIST
39949: LIST
39950: PUSH
39951: LD_INT 1
39953: NEG
39954: PUSH
39955: LD_INT 2
39957: NEG
39958: PUSH
39959: EMPTY
39960: LIST
39961: LIST
39962: PUSH
39963: LD_INT 0
39965: PUSH
39966: LD_INT 2
39968: NEG
39969: PUSH
39970: EMPTY
39971: LIST
39972: LIST
39973: PUSH
39974: LD_INT 1
39976: PUSH
39977: LD_INT 1
39979: NEG
39980: PUSH
39981: EMPTY
39982: LIST
39983: LIST
39984: PUSH
39985: LD_INT 1
39987: PUSH
39988: LD_INT 2
39990: PUSH
39991: EMPTY
39992: LIST
39993: LIST
39994: PUSH
39995: LD_INT 0
39997: PUSH
39998: LD_INT 2
40000: PUSH
40001: EMPTY
40002: LIST
40003: LIST
40004: PUSH
40005: LD_INT 1
40007: NEG
40008: PUSH
40009: LD_INT 1
40011: PUSH
40012: EMPTY
40013: LIST
40014: LIST
40015: PUSH
40016: LD_INT 1
40018: NEG
40019: PUSH
40020: LD_INT 3
40022: NEG
40023: PUSH
40024: EMPTY
40025: LIST
40026: LIST
40027: PUSH
40028: LD_INT 0
40030: PUSH
40031: LD_INT 3
40033: NEG
40034: PUSH
40035: EMPTY
40036: LIST
40037: LIST
40038: PUSH
40039: LD_INT 1
40041: PUSH
40042: LD_INT 2
40044: NEG
40045: PUSH
40046: EMPTY
40047: LIST
40048: LIST
40049: PUSH
40050: EMPTY
40051: LIST
40052: LIST
40053: LIST
40054: LIST
40055: LIST
40056: LIST
40057: LIST
40058: LIST
40059: LIST
40060: LIST
40061: LIST
40062: LIST
40063: LIST
40064: LIST
40065: LIST
40066: LIST
40067: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40068: LD_ADDR_VAR 0 15
40072: PUSH
40073: LD_INT 0
40075: PUSH
40076: LD_INT 0
40078: PUSH
40079: EMPTY
40080: LIST
40081: LIST
40082: PUSH
40083: LD_INT 0
40085: PUSH
40086: LD_INT 1
40088: NEG
40089: PUSH
40090: EMPTY
40091: LIST
40092: LIST
40093: PUSH
40094: LD_INT 1
40096: PUSH
40097: LD_INT 0
40099: PUSH
40100: EMPTY
40101: LIST
40102: LIST
40103: PUSH
40104: LD_INT 1
40106: PUSH
40107: LD_INT 1
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: PUSH
40114: LD_INT 0
40116: PUSH
40117: LD_INT 1
40119: PUSH
40120: EMPTY
40121: LIST
40122: LIST
40123: PUSH
40124: LD_INT 1
40126: NEG
40127: PUSH
40128: LD_INT 0
40130: PUSH
40131: EMPTY
40132: LIST
40133: LIST
40134: PUSH
40135: LD_INT 1
40137: NEG
40138: PUSH
40139: LD_INT 1
40141: NEG
40142: PUSH
40143: EMPTY
40144: LIST
40145: LIST
40146: PUSH
40147: LD_INT 1
40149: PUSH
40150: LD_INT 1
40152: NEG
40153: PUSH
40154: EMPTY
40155: LIST
40156: LIST
40157: PUSH
40158: LD_INT 2
40160: PUSH
40161: LD_INT 0
40163: PUSH
40164: EMPTY
40165: LIST
40166: LIST
40167: PUSH
40168: LD_INT 2
40170: PUSH
40171: LD_INT 1
40173: PUSH
40174: EMPTY
40175: LIST
40176: LIST
40177: PUSH
40178: LD_INT 1
40180: NEG
40181: PUSH
40182: LD_INT 1
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: PUSH
40189: LD_INT 2
40191: NEG
40192: PUSH
40193: LD_INT 0
40195: PUSH
40196: EMPTY
40197: LIST
40198: LIST
40199: PUSH
40200: LD_INT 2
40202: NEG
40203: PUSH
40204: LD_INT 1
40206: NEG
40207: PUSH
40208: EMPTY
40209: LIST
40210: LIST
40211: PUSH
40212: LD_INT 2
40214: PUSH
40215: LD_INT 1
40217: NEG
40218: PUSH
40219: EMPTY
40220: LIST
40221: LIST
40222: PUSH
40223: LD_INT 3
40225: PUSH
40226: LD_INT 0
40228: PUSH
40229: EMPTY
40230: LIST
40231: LIST
40232: PUSH
40233: LD_INT 3
40235: PUSH
40236: LD_INT 1
40238: PUSH
40239: EMPTY
40240: LIST
40241: LIST
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: LIST
40247: LIST
40248: LIST
40249: LIST
40250: LIST
40251: LIST
40252: LIST
40253: LIST
40254: LIST
40255: LIST
40256: LIST
40257: LIST
40258: LIST
40259: LIST
40260: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40261: LD_ADDR_VAR 0 16
40265: PUSH
40266: LD_INT 0
40268: PUSH
40269: LD_INT 0
40271: PUSH
40272: EMPTY
40273: LIST
40274: LIST
40275: PUSH
40276: LD_INT 0
40278: PUSH
40279: LD_INT 1
40281: NEG
40282: PUSH
40283: EMPTY
40284: LIST
40285: LIST
40286: PUSH
40287: LD_INT 1
40289: PUSH
40290: LD_INT 0
40292: PUSH
40293: EMPTY
40294: LIST
40295: LIST
40296: PUSH
40297: LD_INT 1
40299: PUSH
40300: LD_INT 1
40302: PUSH
40303: EMPTY
40304: LIST
40305: LIST
40306: PUSH
40307: LD_INT 0
40309: PUSH
40310: LD_INT 1
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: PUSH
40317: LD_INT 1
40319: NEG
40320: PUSH
40321: LD_INT 0
40323: PUSH
40324: EMPTY
40325: LIST
40326: LIST
40327: PUSH
40328: LD_INT 1
40330: NEG
40331: PUSH
40332: LD_INT 1
40334: NEG
40335: PUSH
40336: EMPTY
40337: LIST
40338: LIST
40339: PUSH
40340: LD_INT 1
40342: NEG
40343: PUSH
40344: LD_INT 2
40346: NEG
40347: PUSH
40348: EMPTY
40349: LIST
40350: LIST
40351: PUSH
40352: LD_INT 2
40354: PUSH
40355: LD_INT 1
40357: PUSH
40358: EMPTY
40359: LIST
40360: LIST
40361: PUSH
40362: LD_INT 2
40364: PUSH
40365: LD_INT 2
40367: PUSH
40368: EMPTY
40369: LIST
40370: LIST
40371: PUSH
40372: LD_INT 1
40374: PUSH
40375: LD_INT 2
40377: PUSH
40378: EMPTY
40379: LIST
40380: LIST
40381: PUSH
40382: LD_INT 2
40384: NEG
40385: PUSH
40386: LD_INT 1
40388: NEG
40389: PUSH
40390: EMPTY
40391: LIST
40392: LIST
40393: PUSH
40394: LD_INT 2
40396: NEG
40397: PUSH
40398: LD_INT 2
40400: NEG
40401: PUSH
40402: EMPTY
40403: LIST
40404: LIST
40405: PUSH
40406: LD_INT 3
40408: PUSH
40409: LD_INT 2
40411: PUSH
40412: EMPTY
40413: LIST
40414: LIST
40415: PUSH
40416: LD_INT 3
40418: PUSH
40419: LD_INT 3
40421: PUSH
40422: EMPTY
40423: LIST
40424: LIST
40425: PUSH
40426: LD_INT 2
40428: PUSH
40429: LD_INT 3
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: PUSH
40436: EMPTY
40437: LIST
40438: LIST
40439: LIST
40440: LIST
40441: LIST
40442: LIST
40443: LIST
40444: LIST
40445: LIST
40446: LIST
40447: LIST
40448: LIST
40449: LIST
40450: LIST
40451: LIST
40452: LIST
40453: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40454: LD_ADDR_VAR 0 17
40458: PUSH
40459: LD_INT 0
40461: PUSH
40462: LD_INT 0
40464: PUSH
40465: EMPTY
40466: LIST
40467: LIST
40468: PUSH
40469: LD_INT 0
40471: PUSH
40472: LD_INT 1
40474: NEG
40475: PUSH
40476: EMPTY
40477: LIST
40478: LIST
40479: PUSH
40480: LD_INT 1
40482: PUSH
40483: LD_INT 0
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: PUSH
40490: LD_INT 1
40492: PUSH
40493: LD_INT 1
40495: PUSH
40496: EMPTY
40497: LIST
40498: LIST
40499: PUSH
40500: LD_INT 0
40502: PUSH
40503: LD_INT 1
40505: PUSH
40506: EMPTY
40507: LIST
40508: LIST
40509: PUSH
40510: LD_INT 1
40512: NEG
40513: PUSH
40514: LD_INT 0
40516: PUSH
40517: EMPTY
40518: LIST
40519: LIST
40520: PUSH
40521: LD_INT 1
40523: NEG
40524: PUSH
40525: LD_INT 1
40527: NEG
40528: PUSH
40529: EMPTY
40530: LIST
40531: LIST
40532: PUSH
40533: LD_INT 1
40535: NEG
40536: PUSH
40537: LD_INT 2
40539: NEG
40540: PUSH
40541: EMPTY
40542: LIST
40543: LIST
40544: PUSH
40545: LD_INT 0
40547: PUSH
40548: LD_INT 2
40550: NEG
40551: PUSH
40552: EMPTY
40553: LIST
40554: LIST
40555: PUSH
40556: LD_INT 1
40558: PUSH
40559: LD_INT 1
40561: NEG
40562: PUSH
40563: EMPTY
40564: LIST
40565: LIST
40566: PUSH
40567: LD_INT 2
40569: PUSH
40570: LD_INT 0
40572: PUSH
40573: EMPTY
40574: LIST
40575: LIST
40576: PUSH
40577: LD_INT 2
40579: PUSH
40580: LD_INT 1
40582: PUSH
40583: EMPTY
40584: LIST
40585: LIST
40586: PUSH
40587: LD_INT 2
40589: PUSH
40590: LD_INT 2
40592: PUSH
40593: EMPTY
40594: LIST
40595: LIST
40596: PUSH
40597: LD_INT 1
40599: PUSH
40600: LD_INT 2
40602: PUSH
40603: EMPTY
40604: LIST
40605: LIST
40606: PUSH
40607: LD_INT 0
40609: PUSH
40610: LD_INT 2
40612: PUSH
40613: EMPTY
40614: LIST
40615: LIST
40616: PUSH
40617: LD_INT 1
40619: NEG
40620: PUSH
40621: LD_INT 1
40623: PUSH
40624: EMPTY
40625: LIST
40626: LIST
40627: PUSH
40628: LD_INT 2
40630: NEG
40631: PUSH
40632: LD_INT 0
40634: PUSH
40635: EMPTY
40636: LIST
40637: LIST
40638: PUSH
40639: LD_INT 2
40641: NEG
40642: PUSH
40643: LD_INT 1
40645: NEG
40646: PUSH
40647: EMPTY
40648: LIST
40649: LIST
40650: PUSH
40651: LD_INT 2
40653: NEG
40654: PUSH
40655: LD_INT 2
40657: NEG
40658: PUSH
40659: EMPTY
40660: LIST
40661: LIST
40662: PUSH
40663: EMPTY
40664: LIST
40665: LIST
40666: LIST
40667: LIST
40668: LIST
40669: LIST
40670: LIST
40671: LIST
40672: LIST
40673: LIST
40674: LIST
40675: LIST
40676: LIST
40677: LIST
40678: LIST
40679: LIST
40680: LIST
40681: LIST
40682: LIST
40683: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40684: LD_ADDR_VAR 0 18
40688: PUSH
40689: LD_INT 0
40691: PUSH
40692: LD_INT 0
40694: PUSH
40695: EMPTY
40696: LIST
40697: LIST
40698: PUSH
40699: LD_INT 0
40701: PUSH
40702: LD_INT 1
40704: NEG
40705: PUSH
40706: EMPTY
40707: LIST
40708: LIST
40709: PUSH
40710: LD_INT 1
40712: PUSH
40713: LD_INT 0
40715: PUSH
40716: EMPTY
40717: LIST
40718: LIST
40719: PUSH
40720: LD_INT 1
40722: PUSH
40723: LD_INT 1
40725: PUSH
40726: EMPTY
40727: LIST
40728: LIST
40729: PUSH
40730: LD_INT 0
40732: PUSH
40733: LD_INT 1
40735: PUSH
40736: EMPTY
40737: LIST
40738: LIST
40739: PUSH
40740: LD_INT 1
40742: NEG
40743: PUSH
40744: LD_INT 0
40746: PUSH
40747: EMPTY
40748: LIST
40749: LIST
40750: PUSH
40751: LD_INT 1
40753: NEG
40754: PUSH
40755: LD_INT 1
40757: NEG
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: PUSH
40763: LD_INT 1
40765: NEG
40766: PUSH
40767: LD_INT 2
40769: NEG
40770: PUSH
40771: EMPTY
40772: LIST
40773: LIST
40774: PUSH
40775: LD_INT 0
40777: PUSH
40778: LD_INT 2
40780: NEG
40781: PUSH
40782: EMPTY
40783: LIST
40784: LIST
40785: PUSH
40786: LD_INT 1
40788: PUSH
40789: LD_INT 1
40791: NEG
40792: PUSH
40793: EMPTY
40794: LIST
40795: LIST
40796: PUSH
40797: LD_INT 2
40799: PUSH
40800: LD_INT 0
40802: PUSH
40803: EMPTY
40804: LIST
40805: LIST
40806: PUSH
40807: LD_INT 2
40809: PUSH
40810: LD_INT 1
40812: PUSH
40813: EMPTY
40814: LIST
40815: LIST
40816: PUSH
40817: LD_INT 2
40819: PUSH
40820: LD_INT 2
40822: PUSH
40823: EMPTY
40824: LIST
40825: LIST
40826: PUSH
40827: LD_INT 1
40829: PUSH
40830: LD_INT 2
40832: PUSH
40833: EMPTY
40834: LIST
40835: LIST
40836: PUSH
40837: LD_INT 0
40839: PUSH
40840: LD_INT 2
40842: PUSH
40843: EMPTY
40844: LIST
40845: LIST
40846: PUSH
40847: LD_INT 1
40849: NEG
40850: PUSH
40851: LD_INT 1
40853: PUSH
40854: EMPTY
40855: LIST
40856: LIST
40857: PUSH
40858: LD_INT 2
40860: NEG
40861: PUSH
40862: LD_INT 0
40864: PUSH
40865: EMPTY
40866: LIST
40867: LIST
40868: PUSH
40869: LD_INT 2
40871: NEG
40872: PUSH
40873: LD_INT 1
40875: NEG
40876: PUSH
40877: EMPTY
40878: LIST
40879: LIST
40880: PUSH
40881: LD_INT 2
40883: NEG
40884: PUSH
40885: LD_INT 2
40887: NEG
40888: PUSH
40889: EMPTY
40890: LIST
40891: LIST
40892: PUSH
40893: EMPTY
40894: LIST
40895: LIST
40896: LIST
40897: LIST
40898: LIST
40899: LIST
40900: LIST
40901: LIST
40902: LIST
40903: LIST
40904: LIST
40905: LIST
40906: LIST
40907: LIST
40908: LIST
40909: LIST
40910: LIST
40911: LIST
40912: LIST
40913: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40914: LD_ADDR_VAR 0 19
40918: PUSH
40919: LD_INT 0
40921: PUSH
40922: LD_INT 0
40924: PUSH
40925: EMPTY
40926: LIST
40927: LIST
40928: PUSH
40929: LD_INT 0
40931: PUSH
40932: LD_INT 1
40934: NEG
40935: PUSH
40936: EMPTY
40937: LIST
40938: LIST
40939: PUSH
40940: LD_INT 1
40942: PUSH
40943: LD_INT 0
40945: PUSH
40946: EMPTY
40947: LIST
40948: LIST
40949: PUSH
40950: LD_INT 1
40952: PUSH
40953: LD_INT 1
40955: PUSH
40956: EMPTY
40957: LIST
40958: LIST
40959: PUSH
40960: LD_INT 0
40962: PUSH
40963: LD_INT 1
40965: PUSH
40966: EMPTY
40967: LIST
40968: LIST
40969: PUSH
40970: LD_INT 1
40972: NEG
40973: PUSH
40974: LD_INT 0
40976: PUSH
40977: EMPTY
40978: LIST
40979: LIST
40980: PUSH
40981: LD_INT 1
40983: NEG
40984: PUSH
40985: LD_INT 1
40987: NEG
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: PUSH
40993: LD_INT 1
40995: NEG
40996: PUSH
40997: LD_INT 2
40999: NEG
41000: PUSH
41001: EMPTY
41002: LIST
41003: LIST
41004: PUSH
41005: LD_INT 0
41007: PUSH
41008: LD_INT 2
41010: NEG
41011: PUSH
41012: EMPTY
41013: LIST
41014: LIST
41015: PUSH
41016: LD_INT 1
41018: PUSH
41019: LD_INT 1
41021: NEG
41022: PUSH
41023: EMPTY
41024: LIST
41025: LIST
41026: PUSH
41027: LD_INT 2
41029: PUSH
41030: LD_INT 0
41032: PUSH
41033: EMPTY
41034: LIST
41035: LIST
41036: PUSH
41037: LD_INT 2
41039: PUSH
41040: LD_INT 1
41042: PUSH
41043: EMPTY
41044: LIST
41045: LIST
41046: PUSH
41047: LD_INT 2
41049: PUSH
41050: LD_INT 2
41052: PUSH
41053: EMPTY
41054: LIST
41055: LIST
41056: PUSH
41057: LD_INT 1
41059: PUSH
41060: LD_INT 2
41062: PUSH
41063: EMPTY
41064: LIST
41065: LIST
41066: PUSH
41067: LD_INT 0
41069: PUSH
41070: LD_INT 2
41072: PUSH
41073: EMPTY
41074: LIST
41075: LIST
41076: PUSH
41077: LD_INT 1
41079: NEG
41080: PUSH
41081: LD_INT 1
41083: PUSH
41084: EMPTY
41085: LIST
41086: LIST
41087: PUSH
41088: LD_INT 2
41090: NEG
41091: PUSH
41092: LD_INT 0
41094: PUSH
41095: EMPTY
41096: LIST
41097: LIST
41098: PUSH
41099: LD_INT 2
41101: NEG
41102: PUSH
41103: LD_INT 1
41105: NEG
41106: PUSH
41107: EMPTY
41108: LIST
41109: LIST
41110: PUSH
41111: LD_INT 2
41113: NEG
41114: PUSH
41115: LD_INT 2
41117: NEG
41118: PUSH
41119: EMPTY
41120: LIST
41121: LIST
41122: PUSH
41123: EMPTY
41124: LIST
41125: LIST
41126: LIST
41127: LIST
41128: LIST
41129: LIST
41130: LIST
41131: LIST
41132: LIST
41133: LIST
41134: LIST
41135: LIST
41136: LIST
41137: LIST
41138: LIST
41139: LIST
41140: LIST
41141: LIST
41142: LIST
41143: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41144: LD_ADDR_VAR 0 20
41148: PUSH
41149: LD_INT 0
41151: PUSH
41152: LD_INT 0
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: PUSH
41159: LD_INT 0
41161: PUSH
41162: LD_INT 1
41164: NEG
41165: PUSH
41166: EMPTY
41167: LIST
41168: LIST
41169: PUSH
41170: LD_INT 1
41172: PUSH
41173: LD_INT 0
41175: PUSH
41176: EMPTY
41177: LIST
41178: LIST
41179: PUSH
41180: LD_INT 1
41182: PUSH
41183: LD_INT 1
41185: PUSH
41186: EMPTY
41187: LIST
41188: LIST
41189: PUSH
41190: LD_INT 0
41192: PUSH
41193: LD_INT 1
41195: PUSH
41196: EMPTY
41197: LIST
41198: LIST
41199: PUSH
41200: LD_INT 1
41202: NEG
41203: PUSH
41204: LD_INT 0
41206: PUSH
41207: EMPTY
41208: LIST
41209: LIST
41210: PUSH
41211: LD_INT 1
41213: NEG
41214: PUSH
41215: LD_INT 1
41217: NEG
41218: PUSH
41219: EMPTY
41220: LIST
41221: LIST
41222: PUSH
41223: LD_INT 1
41225: NEG
41226: PUSH
41227: LD_INT 2
41229: NEG
41230: PUSH
41231: EMPTY
41232: LIST
41233: LIST
41234: PUSH
41235: LD_INT 0
41237: PUSH
41238: LD_INT 2
41240: NEG
41241: PUSH
41242: EMPTY
41243: LIST
41244: LIST
41245: PUSH
41246: LD_INT 1
41248: PUSH
41249: LD_INT 1
41251: NEG
41252: PUSH
41253: EMPTY
41254: LIST
41255: LIST
41256: PUSH
41257: LD_INT 2
41259: PUSH
41260: LD_INT 0
41262: PUSH
41263: EMPTY
41264: LIST
41265: LIST
41266: PUSH
41267: LD_INT 2
41269: PUSH
41270: LD_INT 1
41272: PUSH
41273: EMPTY
41274: LIST
41275: LIST
41276: PUSH
41277: LD_INT 2
41279: PUSH
41280: LD_INT 2
41282: PUSH
41283: EMPTY
41284: LIST
41285: LIST
41286: PUSH
41287: LD_INT 1
41289: PUSH
41290: LD_INT 2
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: PUSH
41297: LD_INT 0
41299: PUSH
41300: LD_INT 2
41302: PUSH
41303: EMPTY
41304: LIST
41305: LIST
41306: PUSH
41307: LD_INT 1
41309: NEG
41310: PUSH
41311: LD_INT 1
41313: PUSH
41314: EMPTY
41315: LIST
41316: LIST
41317: PUSH
41318: LD_INT 2
41320: NEG
41321: PUSH
41322: LD_INT 0
41324: PUSH
41325: EMPTY
41326: LIST
41327: LIST
41328: PUSH
41329: LD_INT 2
41331: NEG
41332: PUSH
41333: LD_INT 1
41335: NEG
41336: PUSH
41337: EMPTY
41338: LIST
41339: LIST
41340: PUSH
41341: LD_INT 2
41343: NEG
41344: PUSH
41345: LD_INT 2
41347: NEG
41348: PUSH
41349: EMPTY
41350: LIST
41351: LIST
41352: PUSH
41353: EMPTY
41354: LIST
41355: LIST
41356: LIST
41357: LIST
41358: LIST
41359: LIST
41360: LIST
41361: LIST
41362: LIST
41363: LIST
41364: LIST
41365: LIST
41366: LIST
41367: LIST
41368: LIST
41369: LIST
41370: LIST
41371: LIST
41372: LIST
41373: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41374: LD_ADDR_VAR 0 21
41378: PUSH
41379: LD_INT 0
41381: PUSH
41382: LD_INT 0
41384: PUSH
41385: EMPTY
41386: LIST
41387: LIST
41388: PUSH
41389: LD_INT 0
41391: PUSH
41392: LD_INT 1
41394: NEG
41395: PUSH
41396: EMPTY
41397: LIST
41398: LIST
41399: PUSH
41400: LD_INT 1
41402: PUSH
41403: LD_INT 0
41405: PUSH
41406: EMPTY
41407: LIST
41408: LIST
41409: PUSH
41410: LD_INT 1
41412: PUSH
41413: LD_INT 1
41415: PUSH
41416: EMPTY
41417: LIST
41418: LIST
41419: PUSH
41420: LD_INT 0
41422: PUSH
41423: LD_INT 1
41425: PUSH
41426: EMPTY
41427: LIST
41428: LIST
41429: PUSH
41430: LD_INT 1
41432: NEG
41433: PUSH
41434: LD_INT 0
41436: PUSH
41437: EMPTY
41438: LIST
41439: LIST
41440: PUSH
41441: LD_INT 1
41443: NEG
41444: PUSH
41445: LD_INT 1
41447: NEG
41448: PUSH
41449: EMPTY
41450: LIST
41451: LIST
41452: PUSH
41453: LD_INT 1
41455: NEG
41456: PUSH
41457: LD_INT 2
41459: NEG
41460: PUSH
41461: EMPTY
41462: LIST
41463: LIST
41464: PUSH
41465: LD_INT 0
41467: PUSH
41468: LD_INT 2
41470: NEG
41471: PUSH
41472: EMPTY
41473: LIST
41474: LIST
41475: PUSH
41476: LD_INT 1
41478: PUSH
41479: LD_INT 1
41481: NEG
41482: PUSH
41483: EMPTY
41484: LIST
41485: LIST
41486: PUSH
41487: LD_INT 2
41489: PUSH
41490: LD_INT 0
41492: PUSH
41493: EMPTY
41494: LIST
41495: LIST
41496: PUSH
41497: LD_INT 2
41499: PUSH
41500: LD_INT 1
41502: PUSH
41503: EMPTY
41504: LIST
41505: LIST
41506: PUSH
41507: LD_INT 2
41509: PUSH
41510: LD_INT 2
41512: PUSH
41513: EMPTY
41514: LIST
41515: LIST
41516: PUSH
41517: LD_INT 1
41519: PUSH
41520: LD_INT 2
41522: PUSH
41523: EMPTY
41524: LIST
41525: LIST
41526: PUSH
41527: LD_INT 0
41529: PUSH
41530: LD_INT 2
41532: PUSH
41533: EMPTY
41534: LIST
41535: LIST
41536: PUSH
41537: LD_INT 1
41539: NEG
41540: PUSH
41541: LD_INT 1
41543: PUSH
41544: EMPTY
41545: LIST
41546: LIST
41547: PUSH
41548: LD_INT 2
41550: NEG
41551: PUSH
41552: LD_INT 0
41554: PUSH
41555: EMPTY
41556: LIST
41557: LIST
41558: PUSH
41559: LD_INT 2
41561: NEG
41562: PUSH
41563: LD_INT 1
41565: NEG
41566: PUSH
41567: EMPTY
41568: LIST
41569: LIST
41570: PUSH
41571: LD_INT 2
41573: NEG
41574: PUSH
41575: LD_INT 2
41577: NEG
41578: PUSH
41579: EMPTY
41580: LIST
41581: LIST
41582: PUSH
41583: EMPTY
41584: LIST
41585: LIST
41586: LIST
41587: LIST
41588: LIST
41589: LIST
41590: LIST
41591: LIST
41592: LIST
41593: LIST
41594: LIST
41595: LIST
41596: LIST
41597: LIST
41598: LIST
41599: LIST
41600: LIST
41601: LIST
41602: LIST
41603: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41604: LD_ADDR_VAR 0 22
41608: PUSH
41609: LD_INT 0
41611: PUSH
41612: LD_INT 0
41614: PUSH
41615: EMPTY
41616: LIST
41617: LIST
41618: PUSH
41619: LD_INT 0
41621: PUSH
41622: LD_INT 1
41624: NEG
41625: PUSH
41626: EMPTY
41627: LIST
41628: LIST
41629: PUSH
41630: LD_INT 1
41632: PUSH
41633: LD_INT 0
41635: PUSH
41636: EMPTY
41637: LIST
41638: LIST
41639: PUSH
41640: LD_INT 1
41642: PUSH
41643: LD_INT 1
41645: PUSH
41646: EMPTY
41647: LIST
41648: LIST
41649: PUSH
41650: LD_INT 0
41652: PUSH
41653: LD_INT 1
41655: PUSH
41656: EMPTY
41657: LIST
41658: LIST
41659: PUSH
41660: LD_INT 1
41662: NEG
41663: PUSH
41664: LD_INT 0
41666: PUSH
41667: EMPTY
41668: LIST
41669: LIST
41670: PUSH
41671: LD_INT 1
41673: NEG
41674: PUSH
41675: LD_INT 1
41677: NEG
41678: PUSH
41679: EMPTY
41680: LIST
41681: LIST
41682: PUSH
41683: LD_INT 1
41685: NEG
41686: PUSH
41687: LD_INT 2
41689: NEG
41690: PUSH
41691: EMPTY
41692: LIST
41693: LIST
41694: PUSH
41695: LD_INT 0
41697: PUSH
41698: LD_INT 2
41700: NEG
41701: PUSH
41702: EMPTY
41703: LIST
41704: LIST
41705: PUSH
41706: LD_INT 1
41708: PUSH
41709: LD_INT 1
41711: NEG
41712: PUSH
41713: EMPTY
41714: LIST
41715: LIST
41716: PUSH
41717: LD_INT 2
41719: PUSH
41720: LD_INT 0
41722: PUSH
41723: EMPTY
41724: LIST
41725: LIST
41726: PUSH
41727: LD_INT 2
41729: PUSH
41730: LD_INT 1
41732: PUSH
41733: EMPTY
41734: LIST
41735: LIST
41736: PUSH
41737: LD_INT 2
41739: PUSH
41740: LD_INT 2
41742: PUSH
41743: EMPTY
41744: LIST
41745: LIST
41746: PUSH
41747: LD_INT 1
41749: PUSH
41750: LD_INT 2
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: PUSH
41757: LD_INT 0
41759: PUSH
41760: LD_INT 2
41762: PUSH
41763: EMPTY
41764: LIST
41765: LIST
41766: PUSH
41767: LD_INT 1
41769: NEG
41770: PUSH
41771: LD_INT 1
41773: PUSH
41774: EMPTY
41775: LIST
41776: LIST
41777: PUSH
41778: LD_INT 2
41780: NEG
41781: PUSH
41782: LD_INT 0
41784: PUSH
41785: EMPTY
41786: LIST
41787: LIST
41788: PUSH
41789: LD_INT 2
41791: NEG
41792: PUSH
41793: LD_INT 1
41795: NEG
41796: PUSH
41797: EMPTY
41798: LIST
41799: LIST
41800: PUSH
41801: LD_INT 2
41803: NEG
41804: PUSH
41805: LD_INT 2
41807: NEG
41808: PUSH
41809: EMPTY
41810: LIST
41811: LIST
41812: PUSH
41813: EMPTY
41814: LIST
41815: LIST
41816: LIST
41817: LIST
41818: LIST
41819: LIST
41820: LIST
41821: LIST
41822: LIST
41823: LIST
41824: LIST
41825: LIST
41826: LIST
41827: LIST
41828: LIST
41829: LIST
41830: LIST
41831: LIST
41832: LIST
41833: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
41834: LD_ADDR_VAR 0 23
41838: PUSH
41839: LD_INT 0
41841: PUSH
41842: LD_INT 0
41844: PUSH
41845: EMPTY
41846: LIST
41847: LIST
41848: PUSH
41849: LD_INT 0
41851: PUSH
41852: LD_INT 1
41854: NEG
41855: PUSH
41856: EMPTY
41857: LIST
41858: LIST
41859: PUSH
41860: LD_INT 1
41862: PUSH
41863: LD_INT 0
41865: PUSH
41866: EMPTY
41867: LIST
41868: LIST
41869: PUSH
41870: LD_INT 1
41872: PUSH
41873: LD_INT 1
41875: PUSH
41876: EMPTY
41877: LIST
41878: LIST
41879: PUSH
41880: LD_INT 0
41882: PUSH
41883: LD_INT 1
41885: PUSH
41886: EMPTY
41887: LIST
41888: LIST
41889: PUSH
41890: LD_INT 1
41892: NEG
41893: PUSH
41894: LD_INT 0
41896: PUSH
41897: EMPTY
41898: LIST
41899: LIST
41900: PUSH
41901: LD_INT 1
41903: NEG
41904: PUSH
41905: LD_INT 1
41907: NEG
41908: PUSH
41909: EMPTY
41910: LIST
41911: LIST
41912: PUSH
41913: LD_INT 1
41915: NEG
41916: PUSH
41917: LD_INT 2
41919: NEG
41920: PUSH
41921: EMPTY
41922: LIST
41923: LIST
41924: PUSH
41925: LD_INT 0
41927: PUSH
41928: LD_INT 2
41930: NEG
41931: PUSH
41932: EMPTY
41933: LIST
41934: LIST
41935: PUSH
41936: LD_INT 1
41938: PUSH
41939: LD_INT 1
41941: NEG
41942: PUSH
41943: EMPTY
41944: LIST
41945: LIST
41946: PUSH
41947: LD_INT 2
41949: PUSH
41950: LD_INT 0
41952: PUSH
41953: EMPTY
41954: LIST
41955: LIST
41956: PUSH
41957: LD_INT 2
41959: PUSH
41960: LD_INT 1
41962: PUSH
41963: EMPTY
41964: LIST
41965: LIST
41966: PUSH
41967: LD_INT 2
41969: PUSH
41970: LD_INT 2
41972: PUSH
41973: EMPTY
41974: LIST
41975: LIST
41976: PUSH
41977: LD_INT 1
41979: PUSH
41980: LD_INT 2
41982: PUSH
41983: EMPTY
41984: LIST
41985: LIST
41986: PUSH
41987: LD_INT 0
41989: PUSH
41990: LD_INT 2
41992: PUSH
41993: EMPTY
41994: LIST
41995: LIST
41996: PUSH
41997: LD_INT 1
41999: NEG
42000: PUSH
42001: LD_INT 1
42003: PUSH
42004: EMPTY
42005: LIST
42006: LIST
42007: PUSH
42008: LD_INT 2
42010: NEG
42011: PUSH
42012: LD_INT 0
42014: PUSH
42015: EMPTY
42016: LIST
42017: LIST
42018: PUSH
42019: LD_INT 2
42021: NEG
42022: PUSH
42023: LD_INT 1
42025: NEG
42026: PUSH
42027: EMPTY
42028: LIST
42029: LIST
42030: PUSH
42031: LD_INT 2
42033: NEG
42034: PUSH
42035: LD_INT 2
42037: NEG
42038: PUSH
42039: EMPTY
42040: LIST
42041: LIST
42042: PUSH
42043: LD_INT 2
42045: NEG
42046: PUSH
42047: LD_INT 3
42049: NEG
42050: PUSH
42051: EMPTY
42052: LIST
42053: LIST
42054: PUSH
42055: LD_INT 1
42057: NEG
42058: PUSH
42059: LD_INT 3
42061: NEG
42062: PUSH
42063: EMPTY
42064: LIST
42065: LIST
42066: PUSH
42067: LD_INT 1
42069: PUSH
42070: LD_INT 2
42072: NEG
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: PUSH
42078: LD_INT 2
42080: PUSH
42081: LD_INT 1
42083: NEG
42084: PUSH
42085: EMPTY
42086: LIST
42087: LIST
42088: PUSH
42089: EMPTY
42090: LIST
42091: LIST
42092: LIST
42093: LIST
42094: LIST
42095: LIST
42096: LIST
42097: LIST
42098: LIST
42099: LIST
42100: LIST
42101: LIST
42102: LIST
42103: LIST
42104: LIST
42105: LIST
42106: LIST
42107: LIST
42108: LIST
42109: LIST
42110: LIST
42111: LIST
42112: LIST
42113: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
42114: LD_ADDR_VAR 0 24
42118: PUSH
42119: LD_INT 0
42121: PUSH
42122: LD_INT 0
42124: PUSH
42125: EMPTY
42126: LIST
42127: LIST
42128: PUSH
42129: LD_INT 0
42131: PUSH
42132: LD_INT 1
42134: NEG
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: PUSH
42140: LD_INT 1
42142: PUSH
42143: LD_INT 0
42145: PUSH
42146: EMPTY
42147: LIST
42148: LIST
42149: PUSH
42150: LD_INT 1
42152: PUSH
42153: LD_INT 1
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: PUSH
42160: LD_INT 0
42162: PUSH
42163: LD_INT 1
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: PUSH
42170: LD_INT 1
42172: NEG
42173: PUSH
42174: LD_INT 0
42176: PUSH
42177: EMPTY
42178: LIST
42179: LIST
42180: PUSH
42181: LD_INT 1
42183: NEG
42184: PUSH
42185: LD_INT 1
42187: NEG
42188: PUSH
42189: EMPTY
42190: LIST
42191: LIST
42192: PUSH
42193: LD_INT 1
42195: NEG
42196: PUSH
42197: LD_INT 2
42199: NEG
42200: PUSH
42201: EMPTY
42202: LIST
42203: LIST
42204: PUSH
42205: LD_INT 0
42207: PUSH
42208: LD_INT 2
42210: NEG
42211: PUSH
42212: EMPTY
42213: LIST
42214: LIST
42215: PUSH
42216: LD_INT 1
42218: PUSH
42219: LD_INT 1
42221: NEG
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: PUSH
42227: LD_INT 2
42229: PUSH
42230: LD_INT 0
42232: PUSH
42233: EMPTY
42234: LIST
42235: LIST
42236: PUSH
42237: LD_INT 2
42239: PUSH
42240: LD_INT 1
42242: PUSH
42243: EMPTY
42244: LIST
42245: LIST
42246: PUSH
42247: LD_INT 2
42249: PUSH
42250: LD_INT 2
42252: PUSH
42253: EMPTY
42254: LIST
42255: LIST
42256: PUSH
42257: LD_INT 1
42259: PUSH
42260: LD_INT 2
42262: PUSH
42263: EMPTY
42264: LIST
42265: LIST
42266: PUSH
42267: LD_INT 0
42269: PUSH
42270: LD_INT 2
42272: PUSH
42273: EMPTY
42274: LIST
42275: LIST
42276: PUSH
42277: LD_INT 1
42279: NEG
42280: PUSH
42281: LD_INT 1
42283: PUSH
42284: EMPTY
42285: LIST
42286: LIST
42287: PUSH
42288: LD_INT 2
42290: NEG
42291: PUSH
42292: LD_INT 0
42294: PUSH
42295: EMPTY
42296: LIST
42297: LIST
42298: PUSH
42299: LD_INT 2
42301: NEG
42302: PUSH
42303: LD_INT 1
42305: NEG
42306: PUSH
42307: EMPTY
42308: LIST
42309: LIST
42310: PUSH
42311: LD_INT 2
42313: NEG
42314: PUSH
42315: LD_INT 2
42317: NEG
42318: PUSH
42319: EMPTY
42320: LIST
42321: LIST
42322: PUSH
42323: LD_INT 1
42325: PUSH
42326: LD_INT 2
42328: NEG
42329: PUSH
42330: EMPTY
42331: LIST
42332: LIST
42333: PUSH
42334: LD_INT 2
42336: PUSH
42337: LD_INT 1
42339: NEG
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: PUSH
42345: LD_INT 3
42347: PUSH
42348: LD_INT 1
42350: PUSH
42351: EMPTY
42352: LIST
42353: LIST
42354: PUSH
42355: LD_INT 3
42357: PUSH
42358: LD_INT 2
42360: PUSH
42361: EMPTY
42362: LIST
42363: LIST
42364: PUSH
42365: EMPTY
42366: LIST
42367: LIST
42368: LIST
42369: LIST
42370: LIST
42371: LIST
42372: LIST
42373: LIST
42374: LIST
42375: LIST
42376: LIST
42377: LIST
42378: LIST
42379: LIST
42380: LIST
42381: LIST
42382: LIST
42383: LIST
42384: LIST
42385: LIST
42386: LIST
42387: LIST
42388: LIST
42389: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
42390: LD_ADDR_VAR 0 25
42394: PUSH
42395: LD_INT 0
42397: PUSH
42398: LD_INT 0
42400: PUSH
42401: EMPTY
42402: LIST
42403: LIST
42404: PUSH
42405: LD_INT 0
42407: PUSH
42408: LD_INT 1
42410: NEG
42411: PUSH
42412: EMPTY
42413: LIST
42414: LIST
42415: PUSH
42416: LD_INT 1
42418: PUSH
42419: LD_INT 0
42421: PUSH
42422: EMPTY
42423: LIST
42424: LIST
42425: PUSH
42426: LD_INT 1
42428: PUSH
42429: LD_INT 1
42431: PUSH
42432: EMPTY
42433: LIST
42434: LIST
42435: PUSH
42436: LD_INT 0
42438: PUSH
42439: LD_INT 1
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: PUSH
42446: LD_INT 1
42448: NEG
42449: PUSH
42450: LD_INT 0
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: PUSH
42457: LD_INT 1
42459: NEG
42460: PUSH
42461: LD_INT 1
42463: NEG
42464: PUSH
42465: EMPTY
42466: LIST
42467: LIST
42468: PUSH
42469: LD_INT 1
42471: NEG
42472: PUSH
42473: LD_INT 2
42475: NEG
42476: PUSH
42477: EMPTY
42478: LIST
42479: LIST
42480: PUSH
42481: LD_INT 0
42483: PUSH
42484: LD_INT 2
42486: NEG
42487: PUSH
42488: EMPTY
42489: LIST
42490: LIST
42491: PUSH
42492: LD_INT 1
42494: PUSH
42495: LD_INT 1
42497: NEG
42498: PUSH
42499: EMPTY
42500: LIST
42501: LIST
42502: PUSH
42503: LD_INT 2
42505: PUSH
42506: LD_INT 0
42508: PUSH
42509: EMPTY
42510: LIST
42511: LIST
42512: PUSH
42513: LD_INT 2
42515: PUSH
42516: LD_INT 1
42518: PUSH
42519: EMPTY
42520: LIST
42521: LIST
42522: PUSH
42523: LD_INT 2
42525: PUSH
42526: LD_INT 2
42528: PUSH
42529: EMPTY
42530: LIST
42531: LIST
42532: PUSH
42533: LD_INT 1
42535: PUSH
42536: LD_INT 2
42538: PUSH
42539: EMPTY
42540: LIST
42541: LIST
42542: PUSH
42543: LD_INT 0
42545: PUSH
42546: LD_INT 2
42548: PUSH
42549: EMPTY
42550: LIST
42551: LIST
42552: PUSH
42553: LD_INT 1
42555: NEG
42556: PUSH
42557: LD_INT 1
42559: PUSH
42560: EMPTY
42561: LIST
42562: LIST
42563: PUSH
42564: LD_INT 2
42566: NEG
42567: PUSH
42568: LD_INT 0
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: PUSH
42575: LD_INT 2
42577: NEG
42578: PUSH
42579: LD_INT 1
42581: NEG
42582: PUSH
42583: EMPTY
42584: LIST
42585: LIST
42586: PUSH
42587: LD_INT 2
42589: NEG
42590: PUSH
42591: LD_INT 2
42593: NEG
42594: PUSH
42595: EMPTY
42596: LIST
42597: LIST
42598: PUSH
42599: LD_INT 3
42601: PUSH
42602: LD_INT 1
42604: PUSH
42605: EMPTY
42606: LIST
42607: LIST
42608: PUSH
42609: LD_INT 3
42611: PUSH
42612: LD_INT 2
42614: PUSH
42615: EMPTY
42616: LIST
42617: LIST
42618: PUSH
42619: LD_INT 2
42621: PUSH
42622: LD_INT 3
42624: PUSH
42625: EMPTY
42626: LIST
42627: LIST
42628: PUSH
42629: LD_INT 1
42631: PUSH
42632: LD_INT 3
42634: PUSH
42635: EMPTY
42636: LIST
42637: LIST
42638: PUSH
42639: EMPTY
42640: LIST
42641: LIST
42642: LIST
42643: LIST
42644: LIST
42645: LIST
42646: LIST
42647: LIST
42648: LIST
42649: LIST
42650: LIST
42651: LIST
42652: LIST
42653: LIST
42654: LIST
42655: LIST
42656: LIST
42657: LIST
42658: LIST
42659: LIST
42660: LIST
42661: LIST
42662: LIST
42663: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
42664: LD_ADDR_VAR 0 26
42668: PUSH
42669: LD_INT 0
42671: PUSH
42672: LD_INT 0
42674: PUSH
42675: EMPTY
42676: LIST
42677: LIST
42678: PUSH
42679: LD_INT 0
42681: PUSH
42682: LD_INT 1
42684: NEG
42685: PUSH
42686: EMPTY
42687: LIST
42688: LIST
42689: PUSH
42690: LD_INT 1
42692: PUSH
42693: LD_INT 0
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: PUSH
42700: LD_INT 1
42702: PUSH
42703: LD_INT 1
42705: PUSH
42706: EMPTY
42707: LIST
42708: LIST
42709: PUSH
42710: LD_INT 0
42712: PUSH
42713: LD_INT 1
42715: PUSH
42716: EMPTY
42717: LIST
42718: LIST
42719: PUSH
42720: LD_INT 1
42722: NEG
42723: PUSH
42724: LD_INT 0
42726: PUSH
42727: EMPTY
42728: LIST
42729: LIST
42730: PUSH
42731: LD_INT 1
42733: NEG
42734: PUSH
42735: LD_INT 1
42737: NEG
42738: PUSH
42739: EMPTY
42740: LIST
42741: LIST
42742: PUSH
42743: LD_INT 1
42745: NEG
42746: PUSH
42747: LD_INT 2
42749: NEG
42750: PUSH
42751: EMPTY
42752: LIST
42753: LIST
42754: PUSH
42755: LD_INT 0
42757: PUSH
42758: LD_INT 2
42760: NEG
42761: PUSH
42762: EMPTY
42763: LIST
42764: LIST
42765: PUSH
42766: LD_INT 1
42768: PUSH
42769: LD_INT 1
42771: NEG
42772: PUSH
42773: EMPTY
42774: LIST
42775: LIST
42776: PUSH
42777: LD_INT 2
42779: PUSH
42780: LD_INT 0
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: PUSH
42787: LD_INT 2
42789: PUSH
42790: LD_INT 1
42792: PUSH
42793: EMPTY
42794: LIST
42795: LIST
42796: PUSH
42797: LD_INT 2
42799: PUSH
42800: LD_INT 2
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: PUSH
42807: LD_INT 1
42809: PUSH
42810: LD_INT 2
42812: PUSH
42813: EMPTY
42814: LIST
42815: LIST
42816: PUSH
42817: LD_INT 0
42819: PUSH
42820: LD_INT 2
42822: PUSH
42823: EMPTY
42824: LIST
42825: LIST
42826: PUSH
42827: LD_INT 1
42829: NEG
42830: PUSH
42831: LD_INT 1
42833: PUSH
42834: EMPTY
42835: LIST
42836: LIST
42837: PUSH
42838: LD_INT 2
42840: NEG
42841: PUSH
42842: LD_INT 0
42844: PUSH
42845: EMPTY
42846: LIST
42847: LIST
42848: PUSH
42849: LD_INT 2
42851: NEG
42852: PUSH
42853: LD_INT 1
42855: NEG
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: PUSH
42861: LD_INT 2
42863: NEG
42864: PUSH
42865: LD_INT 2
42867: NEG
42868: PUSH
42869: EMPTY
42870: LIST
42871: LIST
42872: PUSH
42873: LD_INT 2
42875: PUSH
42876: LD_INT 3
42878: PUSH
42879: EMPTY
42880: LIST
42881: LIST
42882: PUSH
42883: LD_INT 1
42885: PUSH
42886: LD_INT 3
42888: PUSH
42889: EMPTY
42890: LIST
42891: LIST
42892: PUSH
42893: LD_INT 1
42895: NEG
42896: PUSH
42897: LD_INT 2
42899: PUSH
42900: EMPTY
42901: LIST
42902: LIST
42903: PUSH
42904: LD_INT 2
42906: NEG
42907: PUSH
42908: LD_INT 1
42910: PUSH
42911: EMPTY
42912: LIST
42913: LIST
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: LIST
42919: LIST
42920: LIST
42921: LIST
42922: LIST
42923: LIST
42924: LIST
42925: LIST
42926: LIST
42927: LIST
42928: LIST
42929: LIST
42930: LIST
42931: LIST
42932: LIST
42933: LIST
42934: LIST
42935: LIST
42936: LIST
42937: LIST
42938: LIST
42939: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42940: LD_ADDR_VAR 0 27
42944: PUSH
42945: LD_INT 0
42947: PUSH
42948: LD_INT 0
42950: PUSH
42951: EMPTY
42952: LIST
42953: LIST
42954: PUSH
42955: LD_INT 0
42957: PUSH
42958: LD_INT 1
42960: NEG
42961: PUSH
42962: EMPTY
42963: LIST
42964: LIST
42965: PUSH
42966: LD_INT 1
42968: PUSH
42969: LD_INT 0
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: PUSH
42976: LD_INT 1
42978: PUSH
42979: LD_INT 1
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: PUSH
42986: LD_INT 0
42988: PUSH
42989: LD_INT 1
42991: PUSH
42992: EMPTY
42993: LIST
42994: LIST
42995: PUSH
42996: LD_INT 1
42998: NEG
42999: PUSH
43000: LD_INT 0
43002: PUSH
43003: EMPTY
43004: LIST
43005: LIST
43006: PUSH
43007: LD_INT 1
43009: NEG
43010: PUSH
43011: LD_INT 1
43013: NEG
43014: PUSH
43015: EMPTY
43016: LIST
43017: LIST
43018: PUSH
43019: LD_INT 1
43021: NEG
43022: PUSH
43023: LD_INT 2
43025: NEG
43026: PUSH
43027: EMPTY
43028: LIST
43029: LIST
43030: PUSH
43031: LD_INT 0
43033: PUSH
43034: LD_INT 2
43036: NEG
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: PUSH
43042: LD_INT 1
43044: PUSH
43045: LD_INT 1
43047: NEG
43048: PUSH
43049: EMPTY
43050: LIST
43051: LIST
43052: PUSH
43053: LD_INT 2
43055: PUSH
43056: LD_INT 0
43058: PUSH
43059: EMPTY
43060: LIST
43061: LIST
43062: PUSH
43063: LD_INT 2
43065: PUSH
43066: LD_INT 1
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: PUSH
43073: LD_INT 2
43075: PUSH
43076: LD_INT 2
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: PUSH
43083: LD_INT 1
43085: PUSH
43086: LD_INT 2
43088: PUSH
43089: EMPTY
43090: LIST
43091: LIST
43092: PUSH
43093: LD_INT 0
43095: PUSH
43096: LD_INT 2
43098: PUSH
43099: EMPTY
43100: LIST
43101: LIST
43102: PUSH
43103: LD_INT 1
43105: NEG
43106: PUSH
43107: LD_INT 1
43109: PUSH
43110: EMPTY
43111: LIST
43112: LIST
43113: PUSH
43114: LD_INT 2
43116: NEG
43117: PUSH
43118: LD_INT 0
43120: PUSH
43121: EMPTY
43122: LIST
43123: LIST
43124: PUSH
43125: LD_INT 2
43127: NEG
43128: PUSH
43129: LD_INT 1
43131: NEG
43132: PUSH
43133: EMPTY
43134: LIST
43135: LIST
43136: PUSH
43137: LD_INT 2
43139: NEG
43140: PUSH
43141: LD_INT 2
43143: NEG
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: PUSH
43149: LD_INT 1
43151: NEG
43152: PUSH
43153: LD_INT 2
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: PUSH
43160: LD_INT 2
43162: NEG
43163: PUSH
43164: LD_INT 1
43166: PUSH
43167: EMPTY
43168: LIST
43169: LIST
43170: PUSH
43171: LD_INT 3
43173: NEG
43174: PUSH
43175: LD_INT 1
43177: NEG
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: PUSH
43183: LD_INT 3
43185: NEG
43186: PUSH
43187: LD_INT 2
43189: NEG
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: PUSH
43195: EMPTY
43196: LIST
43197: LIST
43198: LIST
43199: LIST
43200: LIST
43201: LIST
43202: LIST
43203: LIST
43204: LIST
43205: LIST
43206: LIST
43207: LIST
43208: LIST
43209: LIST
43210: LIST
43211: LIST
43212: LIST
43213: LIST
43214: LIST
43215: LIST
43216: LIST
43217: LIST
43218: LIST
43219: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43220: LD_ADDR_VAR 0 28
43224: PUSH
43225: LD_INT 0
43227: PUSH
43228: LD_INT 0
43230: PUSH
43231: EMPTY
43232: LIST
43233: LIST
43234: PUSH
43235: LD_INT 0
43237: PUSH
43238: LD_INT 1
43240: NEG
43241: PUSH
43242: EMPTY
43243: LIST
43244: LIST
43245: PUSH
43246: LD_INT 1
43248: PUSH
43249: LD_INT 0
43251: PUSH
43252: EMPTY
43253: LIST
43254: LIST
43255: PUSH
43256: LD_INT 1
43258: PUSH
43259: LD_INT 1
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: PUSH
43266: LD_INT 0
43268: PUSH
43269: LD_INT 1
43271: PUSH
43272: EMPTY
43273: LIST
43274: LIST
43275: PUSH
43276: LD_INT 1
43278: NEG
43279: PUSH
43280: LD_INT 0
43282: PUSH
43283: EMPTY
43284: LIST
43285: LIST
43286: PUSH
43287: LD_INT 1
43289: NEG
43290: PUSH
43291: LD_INT 1
43293: NEG
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: PUSH
43299: LD_INT 1
43301: NEG
43302: PUSH
43303: LD_INT 2
43305: NEG
43306: PUSH
43307: EMPTY
43308: LIST
43309: LIST
43310: PUSH
43311: LD_INT 0
43313: PUSH
43314: LD_INT 2
43316: NEG
43317: PUSH
43318: EMPTY
43319: LIST
43320: LIST
43321: PUSH
43322: LD_INT 1
43324: PUSH
43325: LD_INT 1
43327: NEG
43328: PUSH
43329: EMPTY
43330: LIST
43331: LIST
43332: PUSH
43333: LD_INT 2
43335: PUSH
43336: LD_INT 0
43338: PUSH
43339: EMPTY
43340: LIST
43341: LIST
43342: PUSH
43343: LD_INT 2
43345: PUSH
43346: LD_INT 1
43348: PUSH
43349: EMPTY
43350: LIST
43351: LIST
43352: PUSH
43353: LD_INT 2
43355: PUSH
43356: LD_INT 2
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: PUSH
43363: LD_INT 1
43365: PUSH
43366: LD_INT 2
43368: PUSH
43369: EMPTY
43370: LIST
43371: LIST
43372: PUSH
43373: LD_INT 0
43375: PUSH
43376: LD_INT 2
43378: PUSH
43379: EMPTY
43380: LIST
43381: LIST
43382: PUSH
43383: LD_INT 1
43385: NEG
43386: PUSH
43387: LD_INT 1
43389: PUSH
43390: EMPTY
43391: LIST
43392: LIST
43393: PUSH
43394: LD_INT 2
43396: NEG
43397: PUSH
43398: LD_INT 0
43400: PUSH
43401: EMPTY
43402: LIST
43403: LIST
43404: PUSH
43405: LD_INT 2
43407: NEG
43408: PUSH
43409: LD_INT 1
43411: NEG
43412: PUSH
43413: EMPTY
43414: LIST
43415: LIST
43416: PUSH
43417: LD_INT 2
43419: NEG
43420: PUSH
43421: LD_INT 2
43423: NEG
43424: PUSH
43425: EMPTY
43426: LIST
43427: LIST
43428: PUSH
43429: LD_INT 2
43431: NEG
43432: PUSH
43433: LD_INT 3
43435: NEG
43436: PUSH
43437: EMPTY
43438: LIST
43439: LIST
43440: PUSH
43441: LD_INT 1
43443: NEG
43444: PUSH
43445: LD_INT 3
43447: NEG
43448: PUSH
43449: EMPTY
43450: LIST
43451: LIST
43452: PUSH
43453: LD_INT 3
43455: NEG
43456: PUSH
43457: LD_INT 1
43459: NEG
43460: PUSH
43461: EMPTY
43462: LIST
43463: LIST
43464: PUSH
43465: LD_INT 3
43467: NEG
43468: PUSH
43469: LD_INT 2
43471: NEG
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: PUSH
43477: EMPTY
43478: LIST
43479: LIST
43480: LIST
43481: LIST
43482: LIST
43483: LIST
43484: LIST
43485: LIST
43486: LIST
43487: LIST
43488: LIST
43489: LIST
43490: LIST
43491: LIST
43492: LIST
43493: LIST
43494: LIST
43495: LIST
43496: LIST
43497: LIST
43498: LIST
43499: LIST
43500: LIST
43501: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43502: LD_ADDR_VAR 0 29
43506: PUSH
43507: LD_INT 0
43509: PUSH
43510: LD_INT 0
43512: PUSH
43513: EMPTY
43514: LIST
43515: LIST
43516: PUSH
43517: LD_INT 0
43519: PUSH
43520: LD_INT 1
43522: NEG
43523: PUSH
43524: EMPTY
43525: LIST
43526: LIST
43527: PUSH
43528: LD_INT 1
43530: PUSH
43531: LD_INT 0
43533: PUSH
43534: EMPTY
43535: LIST
43536: LIST
43537: PUSH
43538: LD_INT 1
43540: PUSH
43541: LD_INT 1
43543: PUSH
43544: EMPTY
43545: LIST
43546: LIST
43547: PUSH
43548: LD_INT 0
43550: PUSH
43551: LD_INT 1
43553: PUSH
43554: EMPTY
43555: LIST
43556: LIST
43557: PUSH
43558: LD_INT 1
43560: NEG
43561: PUSH
43562: LD_INT 0
43564: PUSH
43565: EMPTY
43566: LIST
43567: LIST
43568: PUSH
43569: LD_INT 1
43571: NEG
43572: PUSH
43573: LD_INT 1
43575: NEG
43576: PUSH
43577: EMPTY
43578: LIST
43579: LIST
43580: PUSH
43581: LD_INT 1
43583: NEG
43584: PUSH
43585: LD_INT 2
43587: NEG
43588: PUSH
43589: EMPTY
43590: LIST
43591: LIST
43592: PUSH
43593: LD_INT 0
43595: PUSH
43596: LD_INT 2
43598: NEG
43599: PUSH
43600: EMPTY
43601: LIST
43602: LIST
43603: PUSH
43604: LD_INT 1
43606: PUSH
43607: LD_INT 1
43609: NEG
43610: PUSH
43611: EMPTY
43612: LIST
43613: LIST
43614: PUSH
43615: LD_INT 2
43617: PUSH
43618: LD_INT 0
43620: PUSH
43621: EMPTY
43622: LIST
43623: LIST
43624: PUSH
43625: LD_INT 2
43627: PUSH
43628: LD_INT 1
43630: PUSH
43631: EMPTY
43632: LIST
43633: LIST
43634: PUSH
43635: LD_INT 1
43637: PUSH
43638: LD_INT 2
43640: PUSH
43641: EMPTY
43642: LIST
43643: LIST
43644: PUSH
43645: LD_INT 0
43647: PUSH
43648: LD_INT 2
43650: PUSH
43651: EMPTY
43652: LIST
43653: LIST
43654: PUSH
43655: LD_INT 1
43657: NEG
43658: PUSH
43659: LD_INT 1
43661: PUSH
43662: EMPTY
43663: LIST
43664: LIST
43665: PUSH
43666: LD_INT 2
43668: NEG
43669: PUSH
43670: LD_INT 1
43672: NEG
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: PUSH
43678: LD_INT 2
43680: NEG
43681: PUSH
43682: LD_INT 2
43684: NEG
43685: PUSH
43686: EMPTY
43687: LIST
43688: LIST
43689: PUSH
43690: LD_INT 2
43692: NEG
43693: PUSH
43694: LD_INT 3
43696: NEG
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: PUSH
43702: LD_INT 2
43704: PUSH
43705: LD_INT 1
43707: NEG
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: PUSH
43713: LD_INT 3
43715: PUSH
43716: LD_INT 1
43718: PUSH
43719: EMPTY
43720: LIST
43721: LIST
43722: PUSH
43723: LD_INT 1
43725: PUSH
43726: LD_INT 3
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: PUSH
43733: LD_INT 1
43735: NEG
43736: PUSH
43737: LD_INT 2
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: PUSH
43744: LD_INT 3
43746: NEG
43747: PUSH
43748: LD_INT 2
43750: NEG
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: PUSH
43756: EMPTY
43757: LIST
43758: LIST
43759: LIST
43760: LIST
43761: LIST
43762: LIST
43763: LIST
43764: LIST
43765: LIST
43766: LIST
43767: LIST
43768: LIST
43769: LIST
43770: LIST
43771: LIST
43772: LIST
43773: LIST
43774: LIST
43775: LIST
43776: LIST
43777: LIST
43778: LIST
43779: LIST
43780: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43781: LD_ADDR_VAR 0 30
43785: PUSH
43786: LD_INT 0
43788: PUSH
43789: LD_INT 0
43791: PUSH
43792: EMPTY
43793: LIST
43794: LIST
43795: PUSH
43796: LD_INT 0
43798: PUSH
43799: LD_INT 1
43801: NEG
43802: PUSH
43803: EMPTY
43804: LIST
43805: LIST
43806: PUSH
43807: LD_INT 1
43809: PUSH
43810: LD_INT 0
43812: PUSH
43813: EMPTY
43814: LIST
43815: LIST
43816: PUSH
43817: LD_INT 1
43819: PUSH
43820: LD_INT 1
43822: PUSH
43823: EMPTY
43824: LIST
43825: LIST
43826: PUSH
43827: LD_INT 0
43829: PUSH
43830: LD_INT 1
43832: PUSH
43833: EMPTY
43834: LIST
43835: LIST
43836: PUSH
43837: LD_INT 1
43839: NEG
43840: PUSH
43841: LD_INT 0
43843: PUSH
43844: EMPTY
43845: LIST
43846: LIST
43847: PUSH
43848: LD_INT 1
43850: NEG
43851: PUSH
43852: LD_INT 1
43854: NEG
43855: PUSH
43856: EMPTY
43857: LIST
43858: LIST
43859: PUSH
43860: LD_INT 1
43862: NEG
43863: PUSH
43864: LD_INT 2
43866: NEG
43867: PUSH
43868: EMPTY
43869: LIST
43870: LIST
43871: PUSH
43872: LD_INT 0
43874: PUSH
43875: LD_INT 2
43877: NEG
43878: PUSH
43879: EMPTY
43880: LIST
43881: LIST
43882: PUSH
43883: LD_INT 1
43885: PUSH
43886: LD_INT 1
43888: NEG
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: PUSH
43894: LD_INT 2
43896: PUSH
43897: LD_INT 0
43899: PUSH
43900: EMPTY
43901: LIST
43902: LIST
43903: PUSH
43904: LD_INT 2
43906: PUSH
43907: LD_INT 1
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: PUSH
43914: LD_INT 2
43916: PUSH
43917: LD_INT 2
43919: PUSH
43920: EMPTY
43921: LIST
43922: LIST
43923: PUSH
43924: LD_INT 1
43926: PUSH
43927: LD_INT 2
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: PUSH
43934: LD_INT 1
43936: NEG
43937: PUSH
43938: LD_INT 1
43940: PUSH
43941: EMPTY
43942: LIST
43943: LIST
43944: PUSH
43945: LD_INT 2
43947: NEG
43948: PUSH
43949: LD_INT 0
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: PUSH
43956: LD_INT 2
43958: NEG
43959: PUSH
43960: LD_INT 1
43962: NEG
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: PUSH
43968: LD_INT 1
43970: NEG
43971: PUSH
43972: LD_INT 3
43974: NEG
43975: PUSH
43976: EMPTY
43977: LIST
43978: LIST
43979: PUSH
43980: LD_INT 1
43982: PUSH
43983: LD_INT 2
43985: NEG
43986: PUSH
43987: EMPTY
43988: LIST
43989: LIST
43990: PUSH
43991: LD_INT 3
43993: PUSH
43994: LD_INT 2
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: PUSH
44001: LD_INT 2
44003: PUSH
44004: LD_INT 3
44006: PUSH
44007: EMPTY
44008: LIST
44009: LIST
44010: PUSH
44011: LD_INT 2
44013: NEG
44014: PUSH
44015: LD_INT 1
44017: PUSH
44018: EMPTY
44019: LIST
44020: LIST
44021: PUSH
44022: LD_INT 3
44024: NEG
44025: PUSH
44026: LD_INT 1
44028: NEG
44029: PUSH
44030: EMPTY
44031: LIST
44032: LIST
44033: PUSH
44034: EMPTY
44035: LIST
44036: LIST
44037: LIST
44038: LIST
44039: LIST
44040: LIST
44041: LIST
44042: LIST
44043: LIST
44044: LIST
44045: LIST
44046: LIST
44047: LIST
44048: LIST
44049: LIST
44050: LIST
44051: LIST
44052: LIST
44053: LIST
44054: LIST
44055: LIST
44056: LIST
44057: LIST
44058: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44059: LD_ADDR_VAR 0 31
44063: PUSH
44064: LD_INT 0
44066: PUSH
44067: LD_INT 0
44069: PUSH
44070: EMPTY
44071: LIST
44072: LIST
44073: PUSH
44074: LD_INT 0
44076: PUSH
44077: LD_INT 1
44079: NEG
44080: PUSH
44081: EMPTY
44082: LIST
44083: LIST
44084: PUSH
44085: LD_INT 1
44087: PUSH
44088: LD_INT 0
44090: PUSH
44091: EMPTY
44092: LIST
44093: LIST
44094: PUSH
44095: LD_INT 1
44097: PUSH
44098: LD_INT 1
44100: PUSH
44101: EMPTY
44102: LIST
44103: LIST
44104: PUSH
44105: LD_INT 0
44107: PUSH
44108: LD_INT 1
44110: PUSH
44111: EMPTY
44112: LIST
44113: LIST
44114: PUSH
44115: LD_INT 1
44117: NEG
44118: PUSH
44119: LD_INT 0
44121: PUSH
44122: EMPTY
44123: LIST
44124: LIST
44125: PUSH
44126: LD_INT 1
44128: NEG
44129: PUSH
44130: LD_INT 1
44132: NEG
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: PUSH
44138: LD_INT 1
44140: NEG
44141: PUSH
44142: LD_INT 2
44144: NEG
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: PUSH
44150: LD_INT 1
44152: PUSH
44153: LD_INT 1
44155: NEG
44156: PUSH
44157: EMPTY
44158: LIST
44159: LIST
44160: PUSH
44161: LD_INT 2
44163: PUSH
44164: LD_INT 0
44166: PUSH
44167: EMPTY
44168: LIST
44169: LIST
44170: PUSH
44171: LD_INT 2
44173: PUSH
44174: LD_INT 1
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: PUSH
44181: LD_INT 2
44183: PUSH
44184: LD_INT 2
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: PUSH
44191: LD_INT 1
44193: PUSH
44194: LD_INT 2
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: PUSH
44201: LD_INT 0
44203: PUSH
44204: LD_INT 2
44206: PUSH
44207: EMPTY
44208: LIST
44209: LIST
44210: PUSH
44211: LD_INT 1
44213: NEG
44214: PUSH
44215: LD_INT 1
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: PUSH
44222: LD_INT 2
44224: NEG
44225: PUSH
44226: LD_INT 1
44228: NEG
44229: PUSH
44230: EMPTY
44231: LIST
44232: LIST
44233: PUSH
44234: LD_INT 2
44236: NEG
44237: PUSH
44238: LD_INT 2
44240: NEG
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: PUSH
44246: LD_INT 2
44248: NEG
44249: PUSH
44250: LD_INT 3
44252: NEG
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: PUSH
44258: LD_INT 2
44260: PUSH
44261: LD_INT 1
44263: NEG
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: PUSH
44269: LD_INT 3
44271: PUSH
44272: LD_INT 1
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: PUSH
44279: LD_INT 1
44281: PUSH
44282: LD_INT 3
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: PUSH
44289: LD_INT 1
44291: NEG
44292: PUSH
44293: LD_INT 2
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: PUSH
44300: LD_INT 3
44302: NEG
44303: PUSH
44304: LD_INT 2
44306: NEG
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: PUSH
44312: EMPTY
44313: LIST
44314: LIST
44315: LIST
44316: LIST
44317: LIST
44318: LIST
44319: LIST
44320: LIST
44321: LIST
44322: LIST
44323: LIST
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: LIST
44334: LIST
44335: LIST
44336: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44337: LD_ADDR_VAR 0 32
44341: PUSH
44342: LD_INT 0
44344: PUSH
44345: LD_INT 0
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: PUSH
44352: LD_INT 0
44354: PUSH
44355: LD_INT 1
44357: NEG
44358: PUSH
44359: EMPTY
44360: LIST
44361: LIST
44362: PUSH
44363: LD_INT 1
44365: PUSH
44366: LD_INT 0
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: PUSH
44373: LD_INT 1
44375: PUSH
44376: LD_INT 1
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: PUSH
44383: LD_INT 0
44385: PUSH
44386: LD_INT 1
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: PUSH
44393: LD_INT 1
44395: NEG
44396: PUSH
44397: LD_INT 0
44399: PUSH
44400: EMPTY
44401: LIST
44402: LIST
44403: PUSH
44404: LD_INT 1
44406: NEG
44407: PUSH
44408: LD_INT 1
44410: NEG
44411: PUSH
44412: EMPTY
44413: LIST
44414: LIST
44415: PUSH
44416: LD_INT 1
44418: NEG
44419: PUSH
44420: LD_INT 2
44422: NEG
44423: PUSH
44424: EMPTY
44425: LIST
44426: LIST
44427: PUSH
44428: LD_INT 0
44430: PUSH
44431: LD_INT 2
44433: NEG
44434: PUSH
44435: EMPTY
44436: LIST
44437: LIST
44438: PUSH
44439: LD_INT 1
44441: PUSH
44442: LD_INT 1
44444: NEG
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: PUSH
44450: LD_INT 2
44452: PUSH
44453: LD_INT 1
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: PUSH
44460: LD_INT 2
44462: PUSH
44463: LD_INT 2
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: PUSH
44470: LD_INT 1
44472: PUSH
44473: LD_INT 2
44475: PUSH
44476: EMPTY
44477: LIST
44478: LIST
44479: PUSH
44480: LD_INT 0
44482: PUSH
44483: LD_INT 2
44485: PUSH
44486: EMPTY
44487: LIST
44488: LIST
44489: PUSH
44490: LD_INT 1
44492: NEG
44493: PUSH
44494: LD_INT 1
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: PUSH
44501: LD_INT 2
44503: NEG
44504: PUSH
44505: LD_INT 0
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: PUSH
44512: LD_INT 2
44514: NEG
44515: PUSH
44516: LD_INT 1
44518: NEG
44519: PUSH
44520: EMPTY
44521: LIST
44522: LIST
44523: PUSH
44524: LD_INT 1
44526: NEG
44527: PUSH
44528: LD_INT 3
44530: NEG
44531: PUSH
44532: EMPTY
44533: LIST
44534: LIST
44535: PUSH
44536: LD_INT 1
44538: PUSH
44539: LD_INT 2
44541: NEG
44542: PUSH
44543: EMPTY
44544: LIST
44545: LIST
44546: PUSH
44547: LD_INT 3
44549: PUSH
44550: LD_INT 2
44552: PUSH
44553: EMPTY
44554: LIST
44555: LIST
44556: PUSH
44557: LD_INT 2
44559: PUSH
44560: LD_INT 3
44562: PUSH
44563: EMPTY
44564: LIST
44565: LIST
44566: PUSH
44567: LD_INT 2
44569: NEG
44570: PUSH
44571: LD_INT 1
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: PUSH
44578: LD_INT 3
44580: NEG
44581: PUSH
44582: LD_INT 1
44584: NEG
44585: PUSH
44586: EMPTY
44587: LIST
44588: LIST
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: LIST
44594: LIST
44595: LIST
44596: LIST
44597: LIST
44598: LIST
44599: LIST
44600: LIST
44601: LIST
44602: LIST
44603: LIST
44604: LIST
44605: LIST
44606: LIST
44607: LIST
44608: LIST
44609: LIST
44610: LIST
44611: LIST
44612: LIST
44613: LIST
44614: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44615: LD_ADDR_VAR 0 33
44619: PUSH
44620: LD_INT 0
44622: PUSH
44623: LD_INT 0
44625: PUSH
44626: EMPTY
44627: LIST
44628: LIST
44629: PUSH
44630: LD_INT 0
44632: PUSH
44633: LD_INT 1
44635: NEG
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: PUSH
44641: LD_INT 1
44643: PUSH
44644: LD_INT 0
44646: PUSH
44647: EMPTY
44648: LIST
44649: LIST
44650: PUSH
44651: LD_INT 1
44653: PUSH
44654: LD_INT 1
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: PUSH
44661: LD_INT 0
44663: PUSH
44664: LD_INT 1
44666: PUSH
44667: EMPTY
44668: LIST
44669: LIST
44670: PUSH
44671: LD_INT 1
44673: NEG
44674: PUSH
44675: LD_INT 0
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: PUSH
44682: LD_INT 1
44684: NEG
44685: PUSH
44686: LD_INT 1
44688: NEG
44689: PUSH
44690: EMPTY
44691: LIST
44692: LIST
44693: PUSH
44694: LD_INT 1
44696: NEG
44697: PUSH
44698: LD_INT 2
44700: NEG
44701: PUSH
44702: EMPTY
44703: LIST
44704: LIST
44705: PUSH
44706: LD_INT 1
44708: PUSH
44709: LD_INT 1
44711: NEG
44712: PUSH
44713: EMPTY
44714: LIST
44715: LIST
44716: PUSH
44717: LD_INT 2
44719: PUSH
44720: LD_INT 0
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: PUSH
44727: LD_INT 2
44729: PUSH
44730: LD_INT 1
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: PUSH
44737: LD_INT 1
44739: PUSH
44740: LD_INT 2
44742: PUSH
44743: EMPTY
44744: LIST
44745: LIST
44746: PUSH
44747: LD_INT 0
44749: PUSH
44750: LD_INT 2
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: PUSH
44757: LD_INT 1
44759: NEG
44760: PUSH
44761: LD_INT 1
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: PUSH
44768: LD_INT 2
44770: NEG
44771: PUSH
44772: LD_INT 0
44774: PUSH
44775: EMPTY
44776: LIST
44777: LIST
44778: PUSH
44779: LD_INT 2
44781: NEG
44782: PUSH
44783: LD_INT 1
44785: NEG
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: PUSH
44791: LD_INT 2
44793: NEG
44794: PUSH
44795: LD_INT 2
44797: NEG
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: PUSH
44803: LD_INT 2
44805: NEG
44806: PUSH
44807: LD_INT 3
44809: NEG
44810: PUSH
44811: EMPTY
44812: LIST
44813: LIST
44814: PUSH
44815: LD_INT 2
44817: PUSH
44818: LD_INT 1
44820: NEG
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: PUSH
44826: LD_INT 3
44828: PUSH
44829: LD_INT 1
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: PUSH
44836: LD_INT 1
44838: PUSH
44839: LD_INT 3
44841: PUSH
44842: EMPTY
44843: LIST
44844: LIST
44845: PUSH
44846: LD_INT 1
44848: NEG
44849: PUSH
44850: LD_INT 2
44852: PUSH
44853: EMPTY
44854: LIST
44855: LIST
44856: PUSH
44857: LD_INT 3
44859: NEG
44860: PUSH
44861: LD_INT 2
44863: NEG
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: LIST
44873: LIST
44874: LIST
44875: LIST
44876: LIST
44877: LIST
44878: LIST
44879: LIST
44880: LIST
44881: LIST
44882: LIST
44883: LIST
44884: LIST
44885: LIST
44886: LIST
44887: LIST
44888: LIST
44889: LIST
44890: LIST
44891: LIST
44892: LIST
44893: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44894: LD_ADDR_VAR 0 34
44898: PUSH
44899: LD_INT 0
44901: PUSH
44902: LD_INT 0
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: PUSH
44909: LD_INT 0
44911: PUSH
44912: LD_INT 1
44914: NEG
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: PUSH
44920: LD_INT 1
44922: PUSH
44923: LD_INT 0
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: PUSH
44930: LD_INT 1
44932: PUSH
44933: LD_INT 1
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: PUSH
44940: LD_INT 0
44942: PUSH
44943: LD_INT 1
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: PUSH
44950: LD_INT 1
44952: NEG
44953: PUSH
44954: LD_INT 0
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: PUSH
44961: LD_INT 1
44963: NEG
44964: PUSH
44965: LD_INT 1
44967: NEG
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: PUSH
44973: LD_INT 1
44975: NEG
44976: PUSH
44977: LD_INT 2
44979: NEG
44980: PUSH
44981: EMPTY
44982: LIST
44983: LIST
44984: PUSH
44985: LD_INT 0
44987: PUSH
44988: LD_INT 2
44990: NEG
44991: PUSH
44992: EMPTY
44993: LIST
44994: LIST
44995: PUSH
44996: LD_INT 1
44998: PUSH
44999: LD_INT 1
45001: NEG
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: PUSH
45007: LD_INT 2
45009: PUSH
45010: LD_INT 1
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: PUSH
45017: LD_INT 2
45019: PUSH
45020: LD_INT 2
45022: PUSH
45023: EMPTY
45024: LIST
45025: LIST
45026: PUSH
45027: LD_INT 1
45029: PUSH
45030: LD_INT 2
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: PUSH
45037: LD_INT 1
45039: NEG
45040: PUSH
45041: LD_INT 1
45043: PUSH
45044: EMPTY
45045: LIST
45046: LIST
45047: PUSH
45048: LD_INT 2
45050: NEG
45051: PUSH
45052: LD_INT 0
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: PUSH
45059: LD_INT 2
45061: NEG
45062: PUSH
45063: LD_INT 1
45065: NEG
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: PUSH
45071: LD_INT 2
45073: NEG
45074: PUSH
45075: LD_INT 2
45077: NEG
45078: PUSH
45079: EMPTY
45080: LIST
45081: LIST
45082: PUSH
45083: LD_INT 1
45085: NEG
45086: PUSH
45087: LD_INT 3
45089: NEG
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: PUSH
45095: LD_INT 1
45097: PUSH
45098: LD_INT 2
45100: NEG
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: PUSH
45106: LD_INT 3
45108: PUSH
45109: LD_INT 2
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: PUSH
45116: LD_INT 2
45118: PUSH
45119: LD_INT 3
45121: PUSH
45122: EMPTY
45123: LIST
45124: LIST
45125: PUSH
45126: LD_INT 2
45128: NEG
45129: PUSH
45130: LD_INT 1
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: PUSH
45137: LD_INT 3
45139: NEG
45140: PUSH
45141: LD_INT 1
45143: NEG
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: PUSH
45149: EMPTY
45150: LIST
45151: LIST
45152: LIST
45153: LIST
45154: LIST
45155: LIST
45156: LIST
45157: LIST
45158: LIST
45159: LIST
45160: LIST
45161: LIST
45162: LIST
45163: LIST
45164: LIST
45165: LIST
45166: LIST
45167: LIST
45168: LIST
45169: LIST
45170: LIST
45171: LIST
45172: LIST
45173: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45174: LD_ADDR_VAR 0 35
45178: PUSH
45179: LD_INT 0
45181: PUSH
45182: LD_INT 0
45184: PUSH
45185: EMPTY
45186: LIST
45187: LIST
45188: PUSH
45189: LD_INT 0
45191: PUSH
45192: LD_INT 1
45194: NEG
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: PUSH
45200: LD_INT 1
45202: PUSH
45203: LD_INT 0
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: PUSH
45210: LD_INT 1
45212: PUSH
45213: LD_INT 1
45215: PUSH
45216: EMPTY
45217: LIST
45218: LIST
45219: PUSH
45220: LD_INT 0
45222: PUSH
45223: LD_INT 1
45225: PUSH
45226: EMPTY
45227: LIST
45228: LIST
45229: PUSH
45230: LD_INT 1
45232: NEG
45233: PUSH
45234: LD_INT 0
45236: PUSH
45237: EMPTY
45238: LIST
45239: LIST
45240: PUSH
45241: LD_INT 1
45243: NEG
45244: PUSH
45245: LD_INT 1
45247: NEG
45248: PUSH
45249: EMPTY
45250: LIST
45251: LIST
45252: PUSH
45253: LD_INT 2
45255: PUSH
45256: LD_INT 1
45258: PUSH
45259: EMPTY
45260: LIST
45261: LIST
45262: PUSH
45263: LD_INT 2
45265: NEG
45266: PUSH
45267: LD_INT 1
45269: NEG
45270: PUSH
45271: EMPTY
45272: LIST
45273: LIST
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: LIST
45279: LIST
45280: LIST
45281: LIST
45282: LIST
45283: LIST
45284: LIST
45285: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45286: LD_ADDR_VAR 0 36
45290: PUSH
45291: LD_INT 0
45293: PUSH
45294: LD_INT 0
45296: PUSH
45297: EMPTY
45298: LIST
45299: LIST
45300: PUSH
45301: LD_INT 0
45303: PUSH
45304: LD_INT 1
45306: NEG
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: LD_INT 1
45314: PUSH
45315: LD_INT 0
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: PUSH
45322: LD_INT 1
45324: PUSH
45325: LD_INT 1
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: PUSH
45332: LD_INT 0
45334: PUSH
45335: LD_INT 1
45337: PUSH
45338: EMPTY
45339: LIST
45340: LIST
45341: PUSH
45342: LD_INT 1
45344: NEG
45345: PUSH
45346: LD_INT 0
45348: PUSH
45349: EMPTY
45350: LIST
45351: LIST
45352: PUSH
45353: LD_INT 1
45355: NEG
45356: PUSH
45357: LD_INT 1
45359: NEG
45360: PUSH
45361: EMPTY
45362: LIST
45363: LIST
45364: PUSH
45365: LD_INT 1
45367: NEG
45368: PUSH
45369: LD_INT 2
45371: NEG
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: PUSH
45377: LD_INT 1
45379: PUSH
45380: LD_INT 2
45382: PUSH
45383: EMPTY
45384: LIST
45385: LIST
45386: PUSH
45387: EMPTY
45388: LIST
45389: LIST
45390: LIST
45391: LIST
45392: LIST
45393: LIST
45394: LIST
45395: LIST
45396: LIST
45397: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45398: LD_ADDR_VAR 0 37
45402: PUSH
45403: LD_INT 0
45405: PUSH
45406: LD_INT 0
45408: PUSH
45409: EMPTY
45410: LIST
45411: LIST
45412: PUSH
45413: LD_INT 0
45415: PUSH
45416: LD_INT 1
45418: NEG
45419: PUSH
45420: EMPTY
45421: LIST
45422: LIST
45423: PUSH
45424: LD_INT 1
45426: PUSH
45427: LD_INT 0
45429: PUSH
45430: EMPTY
45431: LIST
45432: LIST
45433: PUSH
45434: LD_INT 1
45436: PUSH
45437: LD_INT 1
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: PUSH
45444: LD_INT 0
45446: PUSH
45447: LD_INT 1
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: PUSH
45454: LD_INT 1
45456: NEG
45457: PUSH
45458: LD_INT 0
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: LD_INT 1
45467: NEG
45468: PUSH
45469: LD_INT 1
45471: NEG
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: PUSH
45477: LD_INT 1
45479: PUSH
45480: LD_INT 1
45482: NEG
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: LD_INT 1
45490: NEG
45491: PUSH
45492: LD_INT 1
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: LIST
45503: LIST
45504: LIST
45505: LIST
45506: LIST
45507: LIST
45508: LIST
45509: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45510: LD_ADDR_VAR 0 38
45514: PUSH
45515: LD_INT 0
45517: PUSH
45518: LD_INT 0
45520: PUSH
45521: EMPTY
45522: LIST
45523: LIST
45524: PUSH
45525: LD_INT 0
45527: PUSH
45528: LD_INT 1
45530: NEG
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: PUSH
45536: LD_INT 1
45538: PUSH
45539: LD_INT 0
45541: PUSH
45542: EMPTY
45543: LIST
45544: LIST
45545: PUSH
45546: LD_INT 1
45548: PUSH
45549: LD_INT 1
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: PUSH
45556: LD_INT 0
45558: PUSH
45559: LD_INT 1
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: LD_INT 1
45568: NEG
45569: PUSH
45570: LD_INT 0
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: PUSH
45577: LD_INT 1
45579: NEG
45580: PUSH
45581: LD_INT 1
45583: NEG
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: PUSH
45589: LD_INT 2
45591: PUSH
45592: LD_INT 1
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: PUSH
45599: LD_INT 2
45601: NEG
45602: PUSH
45603: LD_INT 1
45605: NEG
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: EMPTY
45612: LIST
45613: LIST
45614: LIST
45615: LIST
45616: LIST
45617: LIST
45618: LIST
45619: LIST
45620: LIST
45621: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45622: LD_ADDR_VAR 0 39
45626: PUSH
45627: LD_INT 0
45629: PUSH
45630: LD_INT 0
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: PUSH
45637: LD_INT 0
45639: PUSH
45640: LD_INT 1
45642: NEG
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: PUSH
45648: LD_INT 1
45650: PUSH
45651: LD_INT 0
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: LD_INT 1
45660: PUSH
45661: LD_INT 1
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: LD_INT 0
45670: PUSH
45671: LD_INT 1
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: PUSH
45678: LD_INT 1
45680: NEG
45681: PUSH
45682: LD_INT 0
45684: PUSH
45685: EMPTY
45686: LIST
45687: LIST
45688: PUSH
45689: LD_INT 1
45691: NEG
45692: PUSH
45693: LD_INT 1
45695: NEG
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: PUSH
45701: LD_INT 1
45703: NEG
45704: PUSH
45705: LD_INT 2
45707: NEG
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: PUSH
45713: LD_INT 1
45715: PUSH
45716: LD_INT 2
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: LIST
45729: LIST
45730: LIST
45731: LIST
45732: LIST
45733: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45734: LD_ADDR_VAR 0 40
45738: PUSH
45739: LD_INT 0
45741: PUSH
45742: LD_INT 0
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: PUSH
45749: LD_INT 0
45751: PUSH
45752: LD_INT 1
45754: NEG
45755: PUSH
45756: EMPTY
45757: LIST
45758: LIST
45759: PUSH
45760: LD_INT 1
45762: PUSH
45763: LD_INT 0
45765: PUSH
45766: EMPTY
45767: LIST
45768: LIST
45769: PUSH
45770: LD_INT 1
45772: PUSH
45773: LD_INT 1
45775: PUSH
45776: EMPTY
45777: LIST
45778: LIST
45779: PUSH
45780: LD_INT 0
45782: PUSH
45783: LD_INT 1
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: PUSH
45790: LD_INT 1
45792: NEG
45793: PUSH
45794: LD_INT 0
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: PUSH
45801: LD_INT 1
45803: NEG
45804: PUSH
45805: LD_INT 1
45807: NEG
45808: PUSH
45809: EMPTY
45810: LIST
45811: LIST
45812: PUSH
45813: LD_INT 1
45815: PUSH
45816: LD_INT 1
45818: NEG
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: PUSH
45824: LD_INT 1
45826: NEG
45827: PUSH
45828: LD_INT 1
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: LIST
45839: LIST
45840: LIST
45841: LIST
45842: LIST
45843: LIST
45844: LIST
45845: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45846: LD_ADDR_VAR 0 41
45850: PUSH
45851: LD_INT 0
45853: PUSH
45854: LD_INT 0
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: PUSH
45861: LD_INT 0
45863: PUSH
45864: LD_INT 1
45866: NEG
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: LD_INT 1
45874: PUSH
45875: LD_INT 0
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: LD_INT 1
45884: PUSH
45885: LD_INT 1
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: PUSH
45892: LD_INT 0
45894: PUSH
45895: LD_INT 1
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: PUSH
45902: LD_INT 1
45904: NEG
45905: PUSH
45906: LD_INT 0
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: PUSH
45913: LD_INT 1
45915: NEG
45916: PUSH
45917: LD_INT 1
45919: NEG
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: PUSH
45925: LD_INT 1
45927: NEG
45928: PUSH
45929: LD_INT 2
45931: NEG
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: PUSH
45937: LD_INT 1
45939: PUSH
45940: LD_INT 1
45942: NEG
45943: PUSH
45944: EMPTY
45945: LIST
45946: LIST
45947: PUSH
45948: LD_INT 2
45950: PUSH
45951: LD_INT 0
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: PUSH
45958: LD_INT 2
45960: PUSH
45961: LD_INT 1
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: LD_INT 2
45970: PUSH
45971: LD_INT 2
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: PUSH
45978: LD_INT 1
45980: PUSH
45981: LD_INT 2
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: PUSH
45988: LD_INT 1
45990: NEG
45991: PUSH
45992: LD_INT 1
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: LD_INT 2
46001: NEG
46002: PUSH
46003: LD_INT 0
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: PUSH
46010: LD_INT 2
46012: NEG
46013: PUSH
46014: LD_INT 1
46016: NEG
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: PUSH
46022: LD_INT 2
46024: NEG
46025: PUSH
46026: LD_INT 2
46028: NEG
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 2
46036: NEG
46037: PUSH
46038: LD_INT 3
46040: NEG
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: PUSH
46046: LD_INT 2
46048: PUSH
46049: LD_INT 1
46051: NEG
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: PUSH
46057: LD_INT 3
46059: PUSH
46060: LD_INT 0
46062: PUSH
46063: EMPTY
46064: LIST
46065: LIST
46066: PUSH
46067: LD_INT 3
46069: PUSH
46070: LD_INT 1
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: PUSH
46077: LD_INT 3
46079: PUSH
46080: LD_INT 2
46082: PUSH
46083: EMPTY
46084: LIST
46085: LIST
46086: PUSH
46087: LD_INT 3
46089: PUSH
46090: LD_INT 3
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: PUSH
46097: LD_INT 2
46099: PUSH
46100: LD_INT 3
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: PUSH
46107: LD_INT 2
46109: NEG
46110: PUSH
46111: LD_INT 1
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: PUSH
46118: LD_INT 3
46120: NEG
46121: PUSH
46122: LD_INT 0
46124: PUSH
46125: EMPTY
46126: LIST
46127: LIST
46128: PUSH
46129: LD_INT 3
46131: NEG
46132: PUSH
46133: LD_INT 1
46135: NEG
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 3
46143: NEG
46144: PUSH
46145: LD_INT 2
46147: NEG
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: LD_INT 3
46155: NEG
46156: PUSH
46157: LD_INT 3
46159: NEG
46160: PUSH
46161: EMPTY
46162: LIST
46163: LIST
46164: PUSH
46165: EMPTY
46166: LIST
46167: LIST
46168: LIST
46169: LIST
46170: LIST
46171: LIST
46172: LIST
46173: LIST
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: LIST
46190: LIST
46191: LIST
46192: LIST
46193: LIST
46194: LIST
46195: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46196: LD_ADDR_VAR 0 42
46200: PUSH
46201: LD_INT 0
46203: PUSH
46204: LD_INT 0
46206: PUSH
46207: EMPTY
46208: LIST
46209: LIST
46210: PUSH
46211: LD_INT 0
46213: PUSH
46214: LD_INT 1
46216: NEG
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: PUSH
46222: LD_INT 1
46224: PUSH
46225: LD_INT 0
46227: PUSH
46228: EMPTY
46229: LIST
46230: LIST
46231: PUSH
46232: LD_INT 1
46234: PUSH
46235: LD_INT 1
46237: PUSH
46238: EMPTY
46239: LIST
46240: LIST
46241: PUSH
46242: LD_INT 0
46244: PUSH
46245: LD_INT 1
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: PUSH
46252: LD_INT 1
46254: NEG
46255: PUSH
46256: LD_INT 0
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: PUSH
46263: LD_INT 1
46265: NEG
46266: PUSH
46267: LD_INT 1
46269: NEG
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: PUSH
46275: LD_INT 1
46277: NEG
46278: PUSH
46279: LD_INT 2
46281: NEG
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: PUSH
46287: LD_INT 0
46289: PUSH
46290: LD_INT 2
46292: NEG
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: LD_INT 1
46300: PUSH
46301: LD_INT 1
46303: NEG
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: PUSH
46309: LD_INT 2
46311: PUSH
46312: LD_INT 1
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: LD_INT 2
46321: PUSH
46322: LD_INT 2
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: PUSH
46329: LD_INT 1
46331: PUSH
46332: LD_INT 2
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: PUSH
46339: LD_INT 0
46341: PUSH
46342: LD_INT 2
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: PUSH
46349: LD_INT 1
46351: NEG
46352: PUSH
46353: LD_INT 1
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: PUSH
46360: LD_INT 2
46362: NEG
46363: PUSH
46364: LD_INT 1
46366: NEG
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: PUSH
46372: LD_INT 2
46374: NEG
46375: PUSH
46376: LD_INT 2
46378: NEG
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: PUSH
46384: LD_INT 2
46386: NEG
46387: PUSH
46388: LD_INT 3
46390: NEG
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: PUSH
46396: LD_INT 1
46398: NEG
46399: PUSH
46400: LD_INT 3
46402: NEG
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: PUSH
46408: LD_INT 0
46410: PUSH
46411: LD_INT 3
46413: NEG
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: PUSH
46419: LD_INT 1
46421: PUSH
46422: LD_INT 2
46424: NEG
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: PUSH
46430: LD_INT 3
46432: PUSH
46433: LD_INT 2
46435: PUSH
46436: EMPTY
46437: LIST
46438: LIST
46439: PUSH
46440: LD_INT 3
46442: PUSH
46443: LD_INT 3
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: PUSH
46450: LD_INT 2
46452: PUSH
46453: LD_INT 3
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: PUSH
46460: LD_INT 1
46462: PUSH
46463: LD_INT 3
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: PUSH
46470: LD_INT 0
46472: PUSH
46473: LD_INT 3
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: LD_INT 1
46482: NEG
46483: PUSH
46484: LD_INT 2
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: LD_INT 3
46493: NEG
46494: PUSH
46495: LD_INT 2
46497: NEG
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: PUSH
46503: LD_INT 3
46505: NEG
46506: PUSH
46507: LD_INT 3
46509: NEG
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: EMPTY
46516: LIST
46517: LIST
46518: LIST
46519: LIST
46520: LIST
46521: LIST
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: LIST
46540: LIST
46541: LIST
46542: LIST
46543: LIST
46544: LIST
46545: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46546: LD_ADDR_VAR 0 43
46550: PUSH
46551: LD_INT 0
46553: PUSH
46554: LD_INT 0
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: PUSH
46561: LD_INT 0
46563: PUSH
46564: LD_INT 1
46566: NEG
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: PUSH
46572: LD_INT 1
46574: PUSH
46575: LD_INT 0
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: PUSH
46582: LD_INT 1
46584: PUSH
46585: LD_INT 1
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: LD_INT 0
46594: PUSH
46595: LD_INT 1
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PUSH
46602: LD_INT 1
46604: NEG
46605: PUSH
46606: LD_INT 0
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: LD_INT 1
46615: NEG
46616: PUSH
46617: LD_INT 1
46619: NEG
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: PUSH
46625: LD_INT 1
46627: NEG
46628: PUSH
46629: LD_INT 2
46631: NEG
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: PUSH
46637: LD_INT 0
46639: PUSH
46640: LD_INT 2
46642: NEG
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: PUSH
46648: LD_INT 1
46650: PUSH
46651: LD_INT 1
46653: NEG
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: PUSH
46659: LD_INT 2
46661: PUSH
46662: LD_INT 0
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: PUSH
46669: LD_INT 2
46671: PUSH
46672: LD_INT 1
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PUSH
46679: LD_INT 1
46681: PUSH
46682: LD_INT 2
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: PUSH
46689: LD_INT 0
46691: PUSH
46692: LD_INT 2
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: LD_INT 1
46701: NEG
46702: PUSH
46703: LD_INT 1
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: PUSH
46710: LD_INT 2
46712: NEG
46713: PUSH
46714: LD_INT 0
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: PUSH
46721: LD_INT 2
46723: NEG
46724: PUSH
46725: LD_INT 1
46727: NEG
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: PUSH
46733: LD_INT 1
46735: NEG
46736: PUSH
46737: LD_INT 3
46739: NEG
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: PUSH
46745: LD_INT 0
46747: PUSH
46748: LD_INT 3
46750: NEG
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PUSH
46756: LD_INT 1
46758: PUSH
46759: LD_INT 2
46761: NEG
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: LD_INT 2
46769: PUSH
46770: LD_INT 1
46772: NEG
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: PUSH
46778: LD_INT 3
46780: PUSH
46781: LD_INT 0
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 3
46790: PUSH
46791: LD_INT 1
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: PUSH
46798: LD_INT 1
46800: PUSH
46801: LD_INT 3
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: LD_INT 0
46810: PUSH
46811: LD_INT 3
46813: PUSH
46814: EMPTY
46815: LIST
46816: LIST
46817: PUSH
46818: LD_INT 1
46820: NEG
46821: PUSH
46822: LD_INT 2
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: PUSH
46829: LD_INT 2
46831: NEG
46832: PUSH
46833: LD_INT 1
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: PUSH
46840: LD_INT 3
46842: NEG
46843: PUSH
46844: LD_INT 0
46846: PUSH
46847: EMPTY
46848: LIST
46849: LIST
46850: PUSH
46851: LD_INT 3
46853: NEG
46854: PUSH
46855: LD_INT 1
46857: NEG
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: LIST
46867: LIST
46868: LIST
46869: LIST
46870: LIST
46871: LIST
46872: LIST
46873: LIST
46874: LIST
46875: LIST
46876: LIST
46877: LIST
46878: LIST
46879: LIST
46880: LIST
46881: LIST
46882: LIST
46883: LIST
46884: LIST
46885: LIST
46886: LIST
46887: LIST
46888: LIST
46889: LIST
46890: LIST
46891: LIST
46892: LIST
46893: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46894: LD_ADDR_VAR 0 44
46898: PUSH
46899: LD_INT 0
46901: PUSH
46902: LD_INT 0
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PUSH
46909: LD_INT 0
46911: PUSH
46912: LD_INT 1
46914: NEG
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 1
46922: PUSH
46923: LD_INT 0
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: PUSH
46930: LD_INT 1
46932: PUSH
46933: LD_INT 1
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: PUSH
46940: LD_INT 0
46942: PUSH
46943: LD_INT 1
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: PUSH
46950: LD_INT 1
46952: NEG
46953: PUSH
46954: LD_INT 0
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 1
46963: NEG
46964: PUSH
46965: LD_INT 1
46967: NEG
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: LD_INT 1
46975: NEG
46976: PUSH
46977: LD_INT 2
46979: NEG
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: PUSH
46985: LD_INT 1
46987: PUSH
46988: LD_INT 1
46990: NEG
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: PUSH
46996: LD_INT 2
46998: PUSH
46999: LD_INT 0
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: PUSH
47006: LD_INT 2
47008: PUSH
47009: LD_INT 1
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: LD_INT 2
47018: PUSH
47019: LD_INT 2
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PUSH
47026: LD_INT 1
47028: PUSH
47029: LD_INT 2
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: PUSH
47036: LD_INT 1
47038: NEG
47039: PUSH
47040: LD_INT 1
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: LD_INT 2
47049: NEG
47050: PUSH
47051: LD_INT 0
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 2
47060: NEG
47061: PUSH
47062: LD_INT 1
47064: NEG
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: LD_INT 2
47072: NEG
47073: PUSH
47074: LD_INT 2
47076: NEG
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: PUSH
47082: LD_INT 2
47084: NEG
47085: PUSH
47086: LD_INT 3
47088: NEG
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: PUSH
47094: LD_INT 2
47096: PUSH
47097: LD_INT 1
47099: NEG
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: PUSH
47105: LD_INT 3
47107: PUSH
47108: LD_INT 0
47110: PUSH
47111: EMPTY
47112: LIST
47113: LIST
47114: PUSH
47115: LD_INT 3
47117: PUSH
47118: LD_INT 1
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: LD_INT 3
47127: PUSH
47128: LD_INT 2
47130: PUSH
47131: EMPTY
47132: LIST
47133: LIST
47134: PUSH
47135: LD_INT 3
47137: PUSH
47138: LD_INT 3
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 2
47147: PUSH
47148: LD_INT 3
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: LD_INT 2
47157: NEG
47158: PUSH
47159: LD_INT 1
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: LD_INT 3
47168: NEG
47169: PUSH
47170: LD_INT 0
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: PUSH
47177: LD_INT 3
47179: NEG
47180: PUSH
47181: LD_INT 1
47183: NEG
47184: PUSH
47185: EMPTY
47186: LIST
47187: LIST
47188: PUSH
47189: LD_INT 3
47191: NEG
47192: PUSH
47193: LD_INT 2
47195: NEG
47196: PUSH
47197: EMPTY
47198: LIST
47199: LIST
47200: PUSH
47201: LD_INT 3
47203: NEG
47204: PUSH
47205: LD_INT 3
47207: NEG
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: LIST
47217: LIST
47218: LIST
47219: LIST
47220: LIST
47221: LIST
47222: LIST
47223: LIST
47224: LIST
47225: LIST
47226: LIST
47227: LIST
47228: LIST
47229: LIST
47230: LIST
47231: LIST
47232: LIST
47233: LIST
47234: LIST
47235: LIST
47236: LIST
47237: LIST
47238: LIST
47239: LIST
47240: LIST
47241: LIST
47242: LIST
47243: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47244: LD_ADDR_VAR 0 45
47248: PUSH
47249: LD_INT 0
47251: PUSH
47252: LD_INT 0
47254: PUSH
47255: EMPTY
47256: LIST
47257: LIST
47258: PUSH
47259: LD_INT 0
47261: PUSH
47262: LD_INT 1
47264: NEG
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: PUSH
47270: LD_INT 1
47272: PUSH
47273: LD_INT 0
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: PUSH
47280: LD_INT 1
47282: PUSH
47283: LD_INT 1
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: PUSH
47290: LD_INT 0
47292: PUSH
47293: LD_INT 1
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: PUSH
47300: LD_INT 1
47302: NEG
47303: PUSH
47304: LD_INT 0
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: PUSH
47311: LD_INT 1
47313: NEG
47314: PUSH
47315: LD_INT 1
47317: NEG
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 1
47325: NEG
47326: PUSH
47327: LD_INT 2
47329: NEG
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PUSH
47335: LD_INT 0
47337: PUSH
47338: LD_INT 2
47340: NEG
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 1
47348: PUSH
47349: LD_INT 1
47351: NEG
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: PUSH
47357: LD_INT 2
47359: PUSH
47360: LD_INT 1
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: LD_INT 2
47369: PUSH
47370: LD_INT 2
47372: PUSH
47373: EMPTY
47374: LIST
47375: LIST
47376: PUSH
47377: LD_INT 1
47379: PUSH
47380: LD_INT 2
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: PUSH
47387: LD_INT 0
47389: PUSH
47390: LD_INT 2
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: PUSH
47397: LD_INT 1
47399: NEG
47400: PUSH
47401: LD_INT 1
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: PUSH
47408: LD_INT 2
47410: NEG
47411: PUSH
47412: LD_INT 1
47414: NEG
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: PUSH
47420: LD_INT 2
47422: NEG
47423: PUSH
47424: LD_INT 2
47426: NEG
47427: PUSH
47428: EMPTY
47429: LIST
47430: LIST
47431: PUSH
47432: LD_INT 2
47434: NEG
47435: PUSH
47436: LD_INT 3
47438: NEG
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: LD_INT 1
47446: NEG
47447: PUSH
47448: LD_INT 3
47450: NEG
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: PUSH
47456: LD_INT 0
47458: PUSH
47459: LD_INT 3
47461: NEG
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: PUSH
47467: LD_INT 1
47469: PUSH
47470: LD_INT 2
47472: NEG
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: LD_INT 3
47480: PUSH
47481: LD_INT 2
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: PUSH
47488: LD_INT 3
47490: PUSH
47491: LD_INT 3
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: PUSH
47498: LD_INT 2
47500: PUSH
47501: LD_INT 3
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 1
47510: PUSH
47511: LD_INT 3
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: PUSH
47518: LD_INT 0
47520: PUSH
47521: LD_INT 3
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: LD_INT 1
47530: NEG
47531: PUSH
47532: LD_INT 2
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 3
47541: NEG
47542: PUSH
47543: LD_INT 2
47545: NEG
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PUSH
47551: LD_INT 3
47553: NEG
47554: PUSH
47555: LD_INT 3
47557: NEG
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: PUSH
47563: EMPTY
47564: LIST
47565: LIST
47566: LIST
47567: LIST
47568: LIST
47569: LIST
47570: LIST
47571: LIST
47572: LIST
47573: LIST
47574: LIST
47575: LIST
47576: LIST
47577: LIST
47578: LIST
47579: LIST
47580: LIST
47581: LIST
47582: LIST
47583: LIST
47584: LIST
47585: LIST
47586: LIST
47587: LIST
47588: LIST
47589: LIST
47590: LIST
47591: LIST
47592: LIST
47593: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47594: LD_ADDR_VAR 0 46
47598: PUSH
47599: LD_INT 0
47601: PUSH
47602: LD_INT 0
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: PUSH
47609: LD_INT 0
47611: PUSH
47612: LD_INT 1
47614: NEG
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 1
47622: PUSH
47623: LD_INT 0
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: PUSH
47630: LD_INT 1
47632: PUSH
47633: LD_INT 1
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: LD_INT 0
47642: PUSH
47643: LD_INT 1
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: PUSH
47650: LD_INT 1
47652: NEG
47653: PUSH
47654: LD_INT 0
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 1
47663: NEG
47664: PUSH
47665: LD_INT 1
47667: NEG
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 1
47675: NEG
47676: PUSH
47677: LD_INT 2
47679: NEG
47680: PUSH
47681: EMPTY
47682: LIST
47683: LIST
47684: PUSH
47685: LD_INT 0
47687: PUSH
47688: LD_INT 2
47690: NEG
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 1
47698: PUSH
47699: LD_INT 1
47701: NEG
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: LD_INT 2
47709: PUSH
47710: LD_INT 0
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PUSH
47717: LD_INT 2
47719: PUSH
47720: LD_INT 1
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: PUSH
47727: LD_INT 1
47729: PUSH
47730: LD_INT 2
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: PUSH
47737: LD_INT 0
47739: PUSH
47740: LD_INT 2
47742: PUSH
47743: EMPTY
47744: LIST
47745: LIST
47746: PUSH
47747: LD_INT 1
47749: NEG
47750: PUSH
47751: LD_INT 1
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: PUSH
47758: LD_INT 2
47760: NEG
47761: PUSH
47762: LD_INT 0
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: PUSH
47769: LD_INT 2
47771: NEG
47772: PUSH
47773: LD_INT 1
47775: NEG
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: LD_INT 1
47783: NEG
47784: PUSH
47785: LD_INT 3
47787: NEG
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: PUSH
47793: LD_INT 0
47795: PUSH
47796: LD_INT 3
47798: NEG
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: PUSH
47804: LD_INT 1
47806: PUSH
47807: LD_INT 2
47809: NEG
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: PUSH
47815: LD_INT 2
47817: PUSH
47818: LD_INT 1
47820: NEG
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: PUSH
47826: LD_INT 3
47828: PUSH
47829: LD_INT 0
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: LD_INT 3
47838: PUSH
47839: LD_INT 1
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: PUSH
47846: LD_INT 1
47848: PUSH
47849: LD_INT 3
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: PUSH
47856: LD_INT 0
47858: PUSH
47859: LD_INT 3
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: PUSH
47866: LD_INT 1
47868: NEG
47869: PUSH
47870: LD_INT 2
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: PUSH
47877: LD_INT 2
47879: NEG
47880: PUSH
47881: LD_INT 1
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PUSH
47888: LD_INT 3
47890: NEG
47891: PUSH
47892: LD_INT 0
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: LD_INT 3
47901: NEG
47902: PUSH
47903: LD_INT 1
47905: NEG
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: LIST
47915: LIST
47916: LIST
47917: LIST
47918: LIST
47919: LIST
47920: LIST
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: LIST
47937: LIST
47938: LIST
47939: LIST
47940: LIST
47941: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47942: LD_ADDR_VAR 0 47
47946: PUSH
47947: LD_INT 0
47949: PUSH
47950: LD_INT 0
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: PUSH
47957: LD_INT 0
47959: PUSH
47960: LD_INT 1
47962: NEG
47963: PUSH
47964: EMPTY
47965: LIST
47966: LIST
47967: PUSH
47968: LD_INT 1
47970: PUSH
47971: LD_INT 0
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: PUSH
47978: LD_INT 1
47980: PUSH
47981: LD_INT 1
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: PUSH
47988: LD_INT 0
47990: PUSH
47991: LD_INT 1
47993: PUSH
47994: EMPTY
47995: LIST
47996: LIST
47997: PUSH
47998: LD_INT 1
48000: NEG
48001: PUSH
48002: LD_INT 0
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: LD_INT 1
48011: NEG
48012: PUSH
48013: LD_INT 1
48015: NEG
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: PUSH
48021: LD_INT 1
48023: NEG
48024: PUSH
48025: LD_INT 2
48027: NEG
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: PUSH
48033: LD_INT 0
48035: PUSH
48036: LD_INT 2
48038: NEG
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: LD_INT 1
48046: PUSH
48047: LD_INT 1
48049: NEG
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: PUSH
48055: LD_INT 2
48057: NEG
48058: PUSH
48059: LD_INT 1
48061: NEG
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: PUSH
48067: LD_INT 2
48069: NEG
48070: PUSH
48071: LD_INT 2
48073: NEG
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: LIST
48083: LIST
48084: LIST
48085: LIST
48086: LIST
48087: LIST
48088: LIST
48089: LIST
48090: LIST
48091: LIST
48092: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48093: LD_ADDR_VAR 0 48
48097: PUSH
48098: LD_INT 0
48100: PUSH
48101: LD_INT 0
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 0
48110: PUSH
48111: LD_INT 1
48113: NEG
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: PUSH
48119: LD_INT 1
48121: PUSH
48122: LD_INT 0
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: PUSH
48129: LD_INT 1
48131: PUSH
48132: LD_INT 1
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: PUSH
48139: LD_INT 0
48141: PUSH
48142: LD_INT 1
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: LD_INT 1
48151: NEG
48152: PUSH
48153: LD_INT 0
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 1
48162: NEG
48163: PUSH
48164: LD_INT 1
48166: NEG
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: PUSH
48172: LD_INT 1
48174: NEG
48175: PUSH
48176: LD_INT 2
48178: NEG
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: PUSH
48184: LD_INT 0
48186: PUSH
48187: LD_INT 2
48189: NEG
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: PUSH
48195: LD_INT 1
48197: PUSH
48198: LD_INT 1
48200: NEG
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: PUSH
48206: LD_INT 2
48208: PUSH
48209: LD_INT 0
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: PUSH
48216: LD_INT 2
48218: PUSH
48219: LD_INT 1
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: LIST
48230: LIST
48231: LIST
48232: LIST
48233: LIST
48234: LIST
48235: LIST
48236: LIST
48237: LIST
48238: LIST
48239: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48240: LD_ADDR_VAR 0 49
48244: PUSH
48245: LD_INT 0
48247: PUSH
48248: LD_INT 0
48250: PUSH
48251: EMPTY
48252: LIST
48253: LIST
48254: PUSH
48255: LD_INT 0
48257: PUSH
48258: LD_INT 1
48260: NEG
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: PUSH
48266: LD_INT 1
48268: PUSH
48269: LD_INT 0
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: LD_INT 1
48278: PUSH
48279: LD_INT 1
48281: PUSH
48282: EMPTY
48283: LIST
48284: LIST
48285: PUSH
48286: LD_INT 0
48288: PUSH
48289: LD_INT 1
48291: PUSH
48292: EMPTY
48293: LIST
48294: LIST
48295: PUSH
48296: LD_INT 1
48298: NEG
48299: PUSH
48300: LD_INT 0
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: PUSH
48307: LD_INT 1
48309: NEG
48310: PUSH
48311: LD_INT 1
48313: NEG
48314: PUSH
48315: EMPTY
48316: LIST
48317: LIST
48318: PUSH
48319: LD_INT 1
48321: PUSH
48322: LD_INT 1
48324: NEG
48325: PUSH
48326: EMPTY
48327: LIST
48328: LIST
48329: PUSH
48330: LD_INT 2
48332: PUSH
48333: LD_INT 0
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: LD_INT 2
48342: PUSH
48343: LD_INT 1
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: PUSH
48350: LD_INT 2
48352: PUSH
48353: LD_INT 2
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: PUSH
48360: LD_INT 1
48362: PUSH
48363: LD_INT 2
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: LIST
48374: LIST
48375: LIST
48376: LIST
48377: LIST
48378: LIST
48379: LIST
48380: LIST
48381: LIST
48382: LIST
48383: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48384: LD_ADDR_VAR 0 50
48388: PUSH
48389: LD_INT 0
48391: PUSH
48392: LD_INT 0
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: LD_INT 0
48401: PUSH
48402: LD_INT 1
48404: NEG
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: LD_INT 1
48412: PUSH
48413: LD_INT 0
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: PUSH
48420: LD_INT 1
48422: PUSH
48423: LD_INT 1
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: LD_INT 0
48432: PUSH
48433: LD_INT 1
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: PUSH
48440: LD_INT 1
48442: NEG
48443: PUSH
48444: LD_INT 0
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: LD_INT 1
48453: NEG
48454: PUSH
48455: LD_INT 1
48457: NEG
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: PUSH
48463: LD_INT 2
48465: PUSH
48466: LD_INT 1
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: PUSH
48473: LD_INT 2
48475: PUSH
48476: LD_INT 2
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: PUSH
48483: LD_INT 1
48485: PUSH
48486: LD_INT 2
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: PUSH
48493: LD_INT 0
48495: PUSH
48496: LD_INT 2
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: PUSH
48503: LD_INT 1
48505: NEG
48506: PUSH
48507: LD_INT 1
48509: PUSH
48510: EMPTY
48511: LIST
48512: LIST
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: LIST
48518: LIST
48519: LIST
48520: LIST
48521: LIST
48522: LIST
48523: LIST
48524: LIST
48525: LIST
48526: LIST
48527: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48528: LD_ADDR_VAR 0 51
48532: PUSH
48533: LD_INT 0
48535: PUSH
48536: LD_INT 0
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 0
48545: PUSH
48546: LD_INT 1
48548: NEG
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: LD_INT 1
48556: PUSH
48557: LD_INT 0
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: PUSH
48564: LD_INT 1
48566: PUSH
48567: LD_INT 1
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: PUSH
48574: LD_INT 0
48576: PUSH
48577: LD_INT 1
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: PUSH
48584: LD_INT 1
48586: NEG
48587: PUSH
48588: LD_INT 0
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: LD_INT 1
48597: NEG
48598: PUSH
48599: LD_INT 1
48601: NEG
48602: PUSH
48603: EMPTY
48604: LIST
48605: LIST
48606: PUSH
48607: LD_INT 1
48609: PUSH
48610: LD_INT 2
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: PUSH
48617: LD_INT 0
48619: PUSH
48620: LD_INT 2
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: PUSH
48627: LD_INT 1
48629: NEG
48630: PUSH
48631: LD_INT 1
48633: PUSH
48634: EMPTY
48635: LIST
48636: LIST
48637: PUSH
48638: LD_INT 2
48640: NEG
48641: PUSH
48642: LD_INT 0
48644: PUSH
48645: EMPTY
48646: LIST
48647: LIST
48648: PUSH
48649: LD_INT 2
48651: NEG
48652: PUSH
48653: LD_INT 1
48655: NEG
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: LIST
48673: LIST
48674: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48675: LD_ADDR_VAR 0 52
48679: PUSH
48680: LD_INT 0
48682: PUSH
48683: LD_INT 0
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: PUSH
48690: LD_INT 0
48692: PUSH
48693: LD_INT 1
48695: NEG
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: PUSH
48701: LD_INT 1
48703: PUSH
48704: LD_INT 0
48706: PUSH
48707: EMPTY
48708: LIST
48709: LIST
48710: PUSH
48711: LD_INT 1
48713: PUSH
48714: LD_INT 1
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PUSH
48721: LD_INT 0
48723: PUSH
48724: LD_INT 1
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: PUSH
48731: LD_INT 1
48733: NEG
48734: PUSH
48735: LD_INT 0
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 1
48744: NEG
48745: PUSH
48746: LD_INT 1
48748: NEG
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: PUSH
48754: LD_INT 1
48756: NEG
48757: PUSH
48758: LD_INT 2
48760: NEG
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: PUSH
48766: LD_INT 1
48768: NEG
48769: PUSH
48770: LD_INT 1
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: PUSH
48777: LD_INT 2
48779: NEG
48780: PUSH
48781: LD_INT 0
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: PUSH
48788: LD_INT 2
48790: NEG
48791: PUSH
48792: LD_INT 1
48794: NEG
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: LD_INT 2
48802: NEG
48803: PUSH
48804: LD_INT 2
48806: NEG
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PUSH
48812: EMPTY
48813: LIST
48814: LIST
48815: LIST
48816: LIST
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: LIST
48822: LIST
48823: LIST
48824: LIST
48825: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48826: LD_ADDR_VAR 0 53
48830: PUSH
48831: LD_INT 0
48833: PUSH
48834: LD_INT 0
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: PUSH
48841: LD_INT 0
48843: PUSH
48844: LD_INT 1
48846: NEG
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: PUSH
48852: LD_INT 1
48854: PUSH
48855: LD_INT 0
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: PUSH
48862: LD_INT 1
48864: PUSH
48865: LD_INT 1
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: PUSH
48872: LD_INT 0
48874: PUSH
48875: LD_INT 1
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: PUSH
48882: LD_INT 1
48884: NEG
48885: PUSH
48886: LD_INT 0
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: PUSH
48893: LD_INT 1
48895: NEG
48896: PUSH
48897: LD_INT 1
48899: NEG
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: PUSH
48905: LD_INT 1
48907: NEG
48908: PUSH
48909: LD_INT 2
48911: NEG
48912: PUSH
48913: EMPTY
48914: LIST
48915: LIST
48916: PUSH
48917: LD_INT 0
48919: PUSH
48920: LD_INT 2
48922: NEG
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: PUSH
48928: LD_INT 1
48930: PUSH
48931: LD_INT 1
48933: NEG
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: LD_INT 2
48941: PUSH
48942: LD_INT 0
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: LD_INT 2
48951: PUSH
48952: LD_INT 1
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: LD_INT 2
48961: PUSH
48962: LD_INT 2
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: LD_INT 1
48971: PUSH
48972: LD_INT 2
48974: PUSH
48975: EMPTY
48976: LIST
48977: LIST
48978: PUSH
48979: LD_INT 0
48981: PUSH
48982: LD_INT 2
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: PUSH
48989: LD_INT 1
48991: NEG
48992: PUSH
48993: LD_INT 1
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 2
49002: NEG
49003: PUSH
49004: LD_INT 0
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: LD_INT 2
49013: NEG
49014: PUSH
49015: LD_INT 1
49017: NEG
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: LD_INT 2
49025: NEG
49026: PUSH
49027: LD_INT 2
49029: NEG
49030: PUSH
49031: EMPTY
49032: LIST
49033: LIST
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: LIST
49039: LIST
49040: LIST
49041: LIST
49042: LIST
49043: LIST
49044: LIST
49045: LIST
49046: LIST
49047: LIST
49048: LIST
49049: LIST
49050: LIST
49051: LIST
49052: LIST
49053: LIST
49054: LIST
49055: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49056: LD_ADDR_VAR 0 54
49060: PUSH
49061: LD_INT 0
49063: PUSH
49064: LD_INT 0
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: PUSH
49071: LD_INT 0
49073: PUSH
49074: LD_INT 1
49076: NEG
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: PUSH
49082: LD_INT 1
49084: PUSH
49085: LD_INT 0
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 1
49094: PUSH
49095: LD_INT 1
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 0
49104: PUSH
49105: LD_INT 1
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: LD_INT 1
49114: NEG
49115: PUSH
49116: LD_INT 0
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 1
49125: NEG
49126: PUSH
49127: LD_INT 1
49129: NEG
49130: PUSH
49131: EMPTY
49132: LIST
49133: LIST
49134: PUSH
49135: LD_INT 1
49137: NEG
49138: PUSH
49139: LD_INT 2
49141: NEG
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: PUSH
49147: LD_INT 0
49149: PUSH
49150: LD_INT 2
49152: NEG
49153: PUSH
49154: EMPTY
49155: LIST
49156: LIST
49157: PUSH
49158: LD_INT 1
49160: PUSH
49161: LD_INT 1
49163: NEG
49164: PUSH
49165: EMPTY
49166: LIST
49167: LIST
49168: PUSH
49169: LD_INT 2
49171: PUSH
49172: LD_INT 0
49174: PUSH
49175: EMPTY
49176: LIST
49177: LIST
49178: PUSH
49179: LD_INT 2
49181: PUSH
49182: LD_INT 1
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: PUSH
49189: LD_INT 2
49191: PUSH
49192: LD_INT 2
49194: PUSH
49195: EMPTY
49196: LIST
49197: LIST
49198: PUSH
49199: LD_INT 1
49201: PUSH
49202: LD_INT 2
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 0
49211: PUSH
49212: LD_INT 2
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: PUSH
49219: LD_INT 1
49221: NEG
49222: PUSH
49223: LD_INT 1
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: PUSH
49230: LD_INT 2
49232: NEG
49233: PUSH
49234: LD_INT 0
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 2
49243: NEG
49244: PUSH
49245: LD_INT 1
49247: NEG
49248: PUSH
49249: EMPTY
49250: LIST
49251: LIST
49252: PUSH
49253: LD_INT 2
49255: NEG
49256: PUSH
49257: LD_INT 2
49259: NEG
49260: PUSH
49261: EMPTY
49262: LIST
49263: LIST
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: LIST
49269: LIST
49270: LIST
49271: LIST
49272: LIST
49273: LIST
49274: LIST
49275: LIST
49276: LIST
49277: LIST
49278: LIST
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49286: LD_ADDR_VAR 0 55
49290: PUSH
49291: LD_INT 0
49293: PUSH
49294: LD_INT 0
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: PUSH
49301: LD_INT 0
49303: PUSH
49304: LD_INT 1
49306: NEG
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: PUSH
49312: LD_INT 1
49314: PUSH
49315: LD_INT 0
49317: PUSH
49318: EMPTY
49319: LIST
49320: LIST
49321: PUSH
49322: LD_INT 1
49324: PUSH
49325: LD_INT 1
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: PUSH
49332: LD_INT 0
49334: PUSH
49335: LD_INT 1
49337: PUSH
49338: EMPTY
49339: LIST
49340: LIST
49341: PUSH
49342: LD_INT 1
49344: NEG
49345: PUSH
49346: LD_INT 0
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: PUSH
49353: LD_INT 1
49355: NEG
49356: PUSH
49357: LD_INT 1
49359: NEG
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: PUSH
49365: LD_INT 1
49367: NEG
49368: PUSH
49369: LD_INT 2
49371: NEG
49372: PUSH
49373: EMPTY
49374: LIST
49375: LIST
49376: PUSH
49377: LD_INT 0
49379: PUSH
49380: LD_INT 2
49382: NEG
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PUSH
49388: LD_INT 1
49390: PUSH
49391: LD_INT 1
49393: NEG
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: PUSH
49399: LD_INT 2
49401: PUSH
49402: LD_INT 0
49404: PUSH
49405: EMPTY
49406: LIST
49407: LIST
49408: PUSH
49409: LD_INT 2
49411: PUSH
49412: LD_INT 1
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: PUSH
49419: LD_INT 2
49421: PUSH
49422: LD_INT 2
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: LD_INT 1
49431: PUSH
49432: LD_INT 2
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: LD_INT 0
49441: PUSH
49442: LD_INT 2
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: PUSH
49449: LD_INT 1
49451: NEG
49452: PUSH
49453: LD_INT 1
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: PUSH
49460: LD_INT 2
49462: NEG
49463: PUSH
49464: LD_INT 0
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PUSH
49471: LD_INT 2
49473: NEG
49474: PUSH
49475: LD_INT 1
49477: NEG
49478: PUSH
49479: EMPTY
49480: LIST
49481: LIST
49482: PUSH
49483: LD_INT 2
49485: NEG
49486: PUSH
49487: LD_INT 2
49489: NEG
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: LIST
49499: LIST
49500: LIST
49501: LIST
49502: LIST
49503: LIST
49504: LIST
49505: LIST
49506: LIST
49507: LIST
49508: LIST
49509: LIST
49510: LIST
49511: LIST
49512: LIST
49513: LIST
49514: LIST
49515: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49516: LD_ADDR_VAR 0 56
49520: PUSH
49521: LD_INT 0
49523: PUSH
49524: LD_INT 0
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: PUSH
49531: LD_INT 0
49533: PUSH
49534: LD_INT 1
49536: NEG
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: PUSH
49542: LD_INT 1
49544: PUSH
49545: LD_INT 0
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: PUSH
49552: LD_INT 1
49554: PUSH
49555: LD_INT 1
49557: PUSH
49558: EMPTY
49559: LIST
49560: LIST
49561: PUSH
49562: LD_INT 0
49564: PUSH
49565: LD_INT 1
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: PUSH
49572: LD_INT 1
49574: NEG
49575: PUSH
49576: LD_INT 0
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 1
49585: NEG
49586: PUSH
49587: LD_INT 1
49589: NEG
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: LD_INT 1
49597: NEG
49598: PUSH
49599: LD_INT 2
49601: NEG
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: PUSH
49607: LD_INT 0
49609: PUSH
49610: LD_INT 2
49612: NEG
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: LD_INT 1
49620: PUSH
49621: LD_INT 1
49623: NEG
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 2
49631: PUSH
49632: LD_INT 0
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: PUSH
49639: LD_INT 2
49641: PUSH
49642: LD_INT 1
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: PUSH
49649: LD_INT 2
49651: PUSH
49652: LD_INT 2
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: PUSH
49659: LD_INT 1
49661: PUSH
49662: LD_INT 2
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: PUSH
49669: LD_INT 0
49671: PUSH
49672: LD_INT 2
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: PUSH
49679: LD_INT 1
49681: NEG
49682: PUSH
49683: LD_INT 1
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: PUSH
49690: LD_INT 2
49692: NEG
49693: PUSH
49694: LD_INT 0
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: PUSH
49701: LD_INT 2
49703: NEG
49704: PUSH
49705: LD_INT 1
49707: NEG
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: PUSH
49713: LD_INT 2
49715: NEG
49716: PUSH
49717: LD_INT 2
49719: NEG
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: LIST
49729: LIST
49730: LIST
49731: LIST
49732: LIST
49733: LIST
49734: LIST
49735: LIST
49736: LIST
49737: LIST
49738: LIST
49739: LIST
49740: LIST
49741: LIST
49742: LIST
49743: LIST
49744: LIST
49745: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49746: LD_ADDR_VAR 0 57
49750: PUSH
49751: LD_INT 0
49753: PUSH
49754: LD_INT 0
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: PUSH
49761: LD_INT 0
49763: PUSH
49764: LD_INT 1
49766: NEG
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: PUSH
49772: LD_INT 1
49774: PUSH
49775: LD_INT 0
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PUSH
49782: LD_INT 1
49784: PUSH
49785: LD_INT 1
49787: PUSH
49788: EMPTY
49789: LIST
49790: LIST
49791: PUSH
49792: LD_INT 0
49794: PUSH
49795: LD_INT 1
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: PUSH
49802: LD_INT 1
49804: NEG
49805: PUSH
49806: LD_INT 0
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: PUSH
49813: LD_INT 1
49815: NEG
49816: PUSH
49817: LD_INT 1
49819: NEG
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: PUSH
49825: LD_INT 1
49827: NEG
49828: PUSH
49829: LD_INT 2
49831: NEG
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: PUSH
49837: LD_INT 0
49839: PUSH
49840: LD_INT 2
49842: NEG
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: PUSH
49848: LD_INT 1
49850: PUSH
49851: LD_INT 1
49853: NEG
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: LD_INT 2
49861: PUSH
49862: LD_INT 0
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: PUSH
49869: LD_INT 2
49871: PUSH
49872: LD_INT 1
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PUSH
49879: LD_INT 2
49881: PUSH
49882: LD_INT 2
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: LD_INT 1
49891: PUSH
49892: LD_INT 2
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: PUSH
49899: LD_INT 0
49901: PUSH
49902: LD_INT 2
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: PUSH
49909: LD_INT 1
49911: NEG
49912: PUSH
49913: LD_INT 1
49915: PUSH
49916: EMPTY
49917: LIST
49918: LIST
49919: PUSH
49920: LD_INT 2
49922: NEG
49923: PUSH
49924: LD_INT 0
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: LD_INT 2
49933: NEG
49934: PUSH
49935: LD_INT 1
49937: NEG
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: PUSH
49943: LD_INT 2
49945: NEG
49946: PUSH
49947: LD_INT 2
49949: NEG
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: LIST
49959: LIST
49960: LIST
49961: LIST
49962: LIST
49963: LIST
49964: LIST
49965: LIST
49966: LIST
49967: LIST
49968: LIST
49969: LIST
49970: LIST
49971: LIST
49972: LIST
49973: LIST
49974: LIST
49975: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49976: LD_ADDR_VAR 0 58
49980: PUSH
49981: LD_INT 0
49983: PUSH
49984: LD_INT 0
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: PUSH
49991: LD_INT 0
49993: PUSH
49994: LD_INT 1
49996: NEG
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: LD_INT 1
50004: PUSH
50005: LD_INT 0
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: LD_INT 1
50014: PUSH
50015: LD_INT 1
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: LD_INT 0
50024: PUSH
50025: LD_INT 1
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 1
50034: NEG
50035: PUSH
50036: LD_INT 0
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: LD_INT 1
50045: NEG
50046: PUSH
50047: LD_INT 1
50049: NEG
50050: PUSH
50051: EMPTY
50052: LIST
50053: LIST
50054: PUSH
50055: LD_INT 1
50057: NEG
50058: PUSH
50059: LD_INT 2
50061: NEG
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: LD_INT 0
50069: PUSH
50070: LD_INT 2
50072: NEG
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: LD_INT 1
50080: PUSH
50081: LD_INT 1
50083: NEG
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 2
50091: PUSH
50092: LD_INT 0
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: LD_INT 2
50101: PUSH
50102: LD_INT 1
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: PUSH
50109: LD_INT 2
50111: PUSH
50112: LD_INT 2
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: LD_INT 1
50121: PUSH
50122: LD_INT 2
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: LD_INT 0
50131: PUSH
50132: LD_INT 2
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: PUSH
50139: LD_INT 1
50141: NEG
50142: PUSH
50143: LD_INT 1
50145: PUSH
50146: EMPTY
50147: LIST
50148: LIST
50149: PUSH
50150: LD_INT 2
50152: NEG
50153: PUSH
50154: LD_INT 0
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: LD_INT 2
50163: NEG
50164: PUSH
50165: LD_INT 1
50167: NEG
50168: PUSH
50169: EMPTY
50170: LIST
50171: LIST
50172: PUSH
50173: LD_INT 2
50175: NEG
50176: PUSH
50177: LD_INT 2
50179: NEG
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: LIST
50189: LIST
50190: LIST
50191: LIST
50192: LIST
50193: LIST
50194: LIST
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50206: LD_ADDR_VAR 0 59
50210: PUSH
50211: LD_INT 0
50213: PUSH
50214: LD_INT 0
50216: PUSH
50217: EMPTY
50218: LIST
50219: LIST
50220: PUSH
50221: LD_INT 0
50223: PUSH
50224: LD_INT 1
50226: NEG
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PUSH
50232: LD_INT 1
50234: PUSH
50235: LD_INT 0
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: LD_INT 1
50244: PUSH
50245: LD_INT 1
50247: PUSH
50248: EMPTY
50249: LIST
50250: LIST
50251: PUSH
50252: LD_INT 0
50254: PUSH
50255: LD_INT 1
50257: PUSH
50258: EMPTY
50259: LIST
50260: LIST
50261: PUSH
50262: LD_INT 1
50264: NEG
50265: PUSH
50266: LD_INT 0
50268: PUSH
50269: EMPTY
50270: LIST
50271: LIST
50272: PUSH
50273: LD_INT 1
50275: NEG
50276: PUSH
50277: LD_INT 1
50279: NEG
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: LIST
50289: LIST
50290: LIST
50291: LIST
50292: LIST
50293: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50294: LD_ADDR_VAR 0 60
50298: PUSH
50299: LD_INT 0
50301: PUSH
50302: LD_INT 0
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: PUSH
50309: LD_INT 0
50311: PUSH
50312: LD_INT 1
50314: NEG
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: PUSH
50320: LD_INT 1
50322: PUSH
50323: LD_INT 0
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: PUSH
50330: LD_INT 1
50332: PUSH
50333: LD_INT 1
50335: PUSH
50336: EMPTY
50337: LIST
50338: LIST
50339: PUSH
50340: LD_INT 0
50342: PUSH
50343: LD_INT 1
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: LD_INT 1
50352: NEG
50353: PUSH
50354: LD_INT 0
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PUSH
50361: LD_INT 1
50363: NEG
50364: PUSH
50365: LD_INT 1
50367: NEG
50368: PUSH
50369: EMPTY
50370: LIST
50371: LIST
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: LIST
50377: LIST
50378: LIST
50379: LIST
50380: LIST
50381: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50382: LD_ADDR_VAR 0 61
50386: PUSH
50387: LD_INT 0
50389: PUSH
50390: LD_INT 0
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: PUSH
50397: LD_INT 0
50399: PUSH
50400: LD_INT 1
50402: NEG
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: LD_INT 1
50410: PUSH
50411: LD_INT 0
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: LD_INT 1
50420: PUSH
50421: LD_INT 1
50423: PUSH
50424: EMPTY
50425: LIST
50426: LIST
50427: PUSH
50428: LD_INT 0
50430: PUSH
50431: LD_INT 1
50433: PUSH
50434: EMPTY
50435: LIST
50436: LIST
50437: PUSH
50438: LD_INT 1
50440: NEG
50441: PUSH
50442: LD_INT 0
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: PUSH
50449: LD_INT 1
50451: NEG
50452: PUSH
50453: LD_INT 1
50455: NEG
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: LIST
50468: LIST
50469: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50470: LD_ADDR_VAR 0 62
50474: PUSH
50475: LD_INT 0
50477: PUSH
50478: LD_INT 0
50480: PUSH
50481: EMPTY
50482: LIST
50483: LIST
50484: PUSH
50485: LD_INT 0
50487: PUSH
50488: LD_INT 1
50490: NEG
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: PUSH
50496: LD_INT 1
50498: PUSH
50499: LD_INT 0
50501: PUSH
50502: EMPTY
50503: LIST
50504: LIST
50505: PUSH
50506: LD_INT 1
50508: PUSH
50509: LD_INT 1
50511: PUSH
50512: EMPTY
50513: LIST
50514: LIST
50515: PUSH
50516: LD_INT 0
50518: PUSH
50519: LD_INT 1
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: PUSH
50526: LD_INT 1
50528: NEG
50529: PUSH
50530: LD_INT 0
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: PUSH
50537: LD_INT 1
50539: NEG
50540: PUSH
50541: LD_INT 1
50543: NEG
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: PUSH
50549: EMPTY
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: LIST
50556: LIST
50557: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50558: LD_ADDR_VAR 0 63
50562: PUSH
50563: LD_INT 0
50565: PUSH
50566: LD_INT 0
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: PUSH
50573: LD_INT 0
50575: PUSH
50576: LD_INT 1
50578: NEG
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: PUSH
50584: LD_INT 1
50586: PUSH
50587: LD_INT 0
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: PUSH
50594: LD_INT 1
50596: PUSH
50597: LD_INT 1
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: LD_INT 0
50606: PUSH
50607: LD_INT 1
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 1
50616: NEG
50617: PUSH
50618: LD_INT 0
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PUSH
50625: LD_INT 1
50627: NEG
50628: PUSH
50629: LD_INT 1
50631: NEG
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: LIST
50641: LIST
50642: LIST
50643: LIST
50644: LIST
50645: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50646: LD_ADDR_VAR 0 64
50650: PUSH
50651: LD_INT 0
50653: PUSH
50654: LD_INT 0
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: PUSH
50661: LD_INT 0
50663: PUSH
50664: LD_INT 1
50666: NEG
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PUSH
50672: LD_INT 1
50674: PUSH
50675: LD_INT 0
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: PUSH
50682: LD_INT 1
50684: PUSH
50685: LD_INT 1
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: PUSH
50692: LD_INT 0
50694: PUSH
50695: LD_INT 1
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: PUSH
50702: LD_INT 1
50704: NEG
50705: PUSH
50706: LD_INT 0
50708: PUSH
50709: EMPTY
50710: LIST
50711: LIST
50712: PUSH
50713: LD_INT 1
50715: NEG
50716: PUSH
50717: LD_INT 1
50719: NEG
50720: PUSH
50721: EMPTY
50722: LIST
50723: LIST
50724: PUSH
50725: EMPTY
50726: LIST
50727: LIST
50728: LIST
50729: LIST
50730: LIST
50731: LIST
50732: LIST
50733: ST_TO_ADDR
// end ; 1 :
50734: GO 56631
50736: LD_INT 1
50738: DOUBLE
50739: EQUAL
50740: IFTRUE 50744
50742: GO 53367
50744: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50745: LD_ADDR_VAR 0 11
50749: PUSH
50750: LD_INT 1
50752: NEG
50753: PUSH
50754: LD_INT 3
50756: NEG
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: PUSH
50762: LD_INT 0
50764: PUSH
50765: LD_INT 3
50767: NEG
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: PUSH
50773: LD_INT 1
50775: PUSH
50776: LD_INT 2
50778: NEG
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: LIST
50788: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50789: LD_ADDR_VAR 0 12
50793: PUSH
50794: LD_INT 2
50796: PUSH
50797: LD_INT 1
50799: NEG
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: PUSH
50805: LD_INT 3
50807: PUSH
50808: LD_INT 0
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: LD_INT 3
50817: PUSH
50818: LD_INT 1
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: LIST
50829: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50830: LD_ADDR_VAR 0 13
50834: PUSH
50835: LD_INT 3
50837: PUSH
50838: LD_INT 2
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: LD_INT 3
50847: PUSH
50848: LD_INT 3
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 2
50857: PUSH
50858: LD_INT 3
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: PUSH
50865: EMPTY
50866: LIST
50867: LIST
50868: LIST
50869: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50870: LD_ADDR_VAR 0 14
50874: PUSH
50875: LD_INT 1
50877: PUSH
50878: LD_INT 3
50880: PUSH
50881: EMPTY
50882: LIST
50883: LIST
50884: PUSH
50885: LD_INT 0
50887: PUSH
50888: LD_INT 3
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: PUSH
50895: LD_INT 1
50897: NEG
50898: PUSH
50899: LD_INT 2
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: LIST
50910: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50911: LD_ADDR_VAR 0 15
50915: PUSH
50916: LD_INT 2
50918: NEG
50919: PUSH
50920: LD_INT 1
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 3
50929: NEG
50930: PUSH
50931: LD_INT 0
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 3
50940: NEG
50941: PUSH
50942: LD_INT 1
50944: NEG
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: LIST
50954: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50955: LD_ADDR_VAR 0 16
50959: PUSH
50960: LD_INT 2
50962: NEG
50963: PUSH
50964: LD_INT 3
50966: NEG
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: LD_INT 3
50974: NEG
50975: PUSH
50976: LD_INT 2
50978: NEG
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: LD_INT 3
50986: NEG
50987: PUSH
50988: LD_INT 3
50990: NEG
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: LIST
51000: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51001: LD_ADDR_VAR 0 17
51005: PUSH
51006: LD_INT 1
51008: NEG
51009: PUSH
51010: LD_INT 3
51012: NEG
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PUSH
51018: LD_INT 0
51020: PUSH
51021: LD_INT 3
51023: NEG
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: LD_INT 1
51031: PUSH
51032: LD_INT 2
51034: NEG
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: EMPTY
51041: LIST
51042: LIST
51043: LIST
51044: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51045: LD_ADDR_VAR 0 18
51049: PUSH
51050: LD_INT 2
51052: PUSH
51053: LD_INT 1
51055: NEG
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: PUSH
51061: LD_INT 3
51063: PUSH
51064: LD_INT 0
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: LD_INT 3
51073: PUSH
51074: LD_INT 1
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: LIST
51085: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51086: LD_ADDR_VAR 0 19
51090: PUSH
51091: LD_INT 3
51093: PUSH
51094: LD_INT 2
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: PUSH
51101: LD_INT 3
51103: PUSH
51104: LD_INT 3
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: PUSH
51111: LD_INT 2
51113: PUSH
51114: LD_INT 3
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: LIST
51125: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51126: LD_ADDR_VAR 0 20
51130: PUSH
51131: LD_INT 1
51133: PUSH
51134: LD_INT 3
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: PUSH
51141: LD_INT 0
51143: PUSH
51144: LD_INT 3
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: LD_INT 1
51153: NEG
51154: PUSH
51155: LD_INT 2
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: LIST
51166: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51167: LD_ADDR_VAR 0 21
51171: PUSH
51172: LD_INT 2
51174: NEG
51175: PUSH
51176: LD_INT 1
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 3
51185: NEG
51186: PUSH
51187: LD_INT 0
51189: PUSH
51190: EMPTY
51191: LIST
51192: LIST
51193: PUSH
51194: LD_INT 3
51196: NEG
51197: PUSH
51198: LD_INT 1
51200: NEG
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: LIST
51210: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51211: LD_ADDR_VAR 0 22
51215: PUSH
51216: LD_INT 2
51218: NEG
51219: PUSH
51220: LD_INT 3
51222: NEG
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: PUSH
51228: LD_INT 3
51230: NEG
51231: PUSH
51232: LD_INT 2
51234: NEG
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: PUSH
51240: LD_INT 3
51242: NEG
51243: PUSH
51244: LD_INT 3
51246: NEG
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: LIST
51256: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
51257: LD_ADDR_VAR 0 23
51261: PUSH
51262: LD_INT 0
51264: PUSH
51265: LD_INT 3
51267: NEG
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 1
51275: NEG
51276: PUSH
51277: LD_INT 4
51279: NEG
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PUSH
51285: LD_INT 1
51287: PUSH
51288: LD_INT 3
51290: NEG
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: LIST
51300: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
51301: LD_ADDR_VAR 0 24
51305: PUSH
51306: LD_INT 3
51308: PUSH
51309: LD_INT 0
51311: PUSH
51312: EMPTY
51313: LIST
51314: LIST
51315: PUSH
51316: LD_INT 3
51318: PUSH
51319: LD_INT 1
51321: NEG
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: PUSH
51327: LD_INT 4
51329: PUSH
51330: LD_INT 1
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: LIST
51341: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
51342: LD_ADDR_VAR 0 25
51346: PUSH
51347: LD_INT 3
51349: PUSH
51350: LD_INT 3
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: PUSH
51357: LD_INT 4
51359: PUSH
51360: LD_INT 3
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: LD_INT 3
51369: PUSH
51370: LD_INT 4
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: LIST
51381: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
51382: LD_ADDR_VAR 0 26
51386: PUSH
51387: LD_INT 0
51389: PUSH
51390: LD_INT 3
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: LD_INT 1
51399: PUSH
51400: LD_INT 4
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PUSH
51407: LD_INT 1
51409: NEG
51410: PUSH
51411: LD_INT 3
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: LIST
51422: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
51423: LD_ADDR_VAR 0 27
51427: PUSH
51428: LD_INT 3
51430: NEG
51431: PUSH
51432: LD_INT 0
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: PUSH
51439: LD_INT 3
51441: NEG
51442: PUSH
51443: LD_INT 1
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: PUSH
51450: LD_INT 4
51452: NEG
51453: PUSH
51454: LD_INT 1
51456: NEG
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: LIST
51466: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
51467: LD_ADDR_VAR 0 28
51471: PUSH
51472: LD_INT 3
51474: NEG
51475: PUSH
51476: LD_INT 3
51478: NEG
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: PUSH
51484: LD_INT 3
51486: NEG
51487: PUSH
51488: LD_INT 4
51490: NEG
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: PUSH
51496: LD_INT 4
51498: NEG
51499: PUSH
51500: LD_INT 3
51502: NEG
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: EMPTY
51509: LIST
51510: LIST
51511: LIST
51512: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
51513: LD_ADDR_VAR 0 29
51517: PUSH
51518: LD_INT 1
51520: NEG
51521: PUSH
51522: LD_INT 3
51524: NEG
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: LD_INT 0
51532: PUSH
51533: LD_INT 3
51535: NEG
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 1
51543: PUSH
51544: LD_INT 2
51546: NEG
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 1
51554: NEG
51555: PUSH
51556: LD_INT 4
51558: NEG
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: PUSH
51564: LD_INT 0
51566: PUSH
51567: LD_INT 4
51569: NEG
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: PUSH
51575: LD_INT 1
51577: PUSH
51578: LD_INT 3
51580: NEG
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: LD_INT 1
51588: NEG
51589: PUSH
51590: LD_INT 5
51592: NEG
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: PUSH
51598: LD_INT 0
51600: PUSH
51601: LD_INT 5
51603: NEG
51604: PUSH
51605: EMPTY
51606: LIST
51607: LIST
51608: PUSH
51609: LD_INT 1
51611: PUSH
51612: LD_INT 4
51614: NEG
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 1
51622: NEG
51623: PUSH
51624: LD_INT 6
51626: NEG
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 0
51634: PUSH
51635: LD_INT 6
51637: NEG
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 1
51645: PUSH
51646: LD_INT 5
51648: NEG
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: LIST
51658: LIST
51659: LIST
51660: LIST
51661: LIST
51662: LIST
51663: LIST
51664: LIST
51665: LIST
51666: LIST
51667: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
51668: LD_ADDR_VAR 0 30
51672: PUSH
51673: LD_INT 2
51675: PUSH
51676: LD_INT 1
51678: NEG
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 3
51686: PUSH
51687: LD_INT 0
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 3
51696: PUSH
51697: LD_INT 1
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 3
51706: PUSH
51707: LD_INT 1
51709: NEG
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: PUSH
51715: LD_INT 4
51717: PUSH
51718: LD_INT 0
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: PUSH
51725: LD_INT 4
51727: PUSH
51728: LD_INT 1
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 4
51737: PUSH
51738: LD_INT 1
51740: NEG
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: PUSH
51746: LD_INT 5
51748: PUSH
51749: LD_INT 0
51751: PUSH
51752: EMPTY
51753: LIST
51754: LIST
51755: PUSH
51756: LD_INT 5
51758: PUSH
51759: LD_INT 1
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: PUSH
51766: LD_INT 5
51768: PUSH
51769: LD_INT 1
51771: NEG
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: LD_INT 6
51779: PUSH
51780: LD_INT 0
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: LD_INT 6
51789: PUSH
51790: LD_INT 1
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: LIST
51801: LIST
51802: LIST
51803: LIST
51804: LIST
51805: LIST
51806: LIST
51807: LIST
51808: LIST
51809: LIST
51810: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
51811: LD_ADDR_VAR 0 31
51815: PUSH
51816: LD_INT 3
51818: PUSH
51819: LD_INT 2
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: PUSH
51826: LD_INT 3
51828: PUSH
51829: LD_INT 3
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: PUSH
51836: LD_INT 2
51838: PUSH
51839: LD_INT 3
51841: PUSH
51842: EMPTY
51843: LIST
51844: LIST
51845: PUSH
51846: LD_INT 4
51848: PUSH
51849: LD_INT 3
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: PUSH
51856: LD_INT 4
51858: PUSH
51859: LD_INT 4
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: PUSH
51866: LD_INT 3
51868: PUSH
51869: LD_INT 4
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: LD_INT 5
51878: PUSH
51879: LD_INT 4
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: LD_INT 5
51888: PUSH
51889: LD_INT 5
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 4
51898: PUSH
51899: LD_INT 5
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 6
51908: PUSH
51909: LD_INT 5
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 6
51918: PUSH
51919: LD_INT 6
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 5
51928: PUSH
51929: LD_INT 6
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: LIST
51940: LIST
51941: LIST
51942: LIST
51943: LIST
51944: LIST
51945: LIST
51946: LIST
51947: LIST
51948: LIST
51949: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
51950: LD_ADDR_VAR 0 32
51954: PUSH
51955: LD_INT 1
51957: PUSH
51958: LD_INT 3
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: LD_INT 0
51967: PUSH
51968: LD_INT 3
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: LD_INT 1
51977: NEG
51978: PUSH
51979: LD_INT 2
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 1
51988: PUSH
51989: LD_INT 4
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: PUSH
51996: LD_INT 0
51998: PUSH
51999: LD_INT 4
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: PUSH
52006: LD_INT 1
52008: NEG
52009: PUSH
52010: LD_INT 3
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: PUSH
52017: LD_INT 1
52019: PUSH
52020: LD_INT 5
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: PUSH
52027: LD_INT 0
52029: PUSH
52030: LD_INT 5
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: LD_INT 1
52039: NEG
52040: PUSH
52041: LD_INT 4
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: PUSH
52048: LD_INT 1
52050: PUSH
52051: LD_INT 6
52053: PUSH
52054: EMPTY
52055: LIST
52056: LIST
52057: PUSH
52058: LD_INT 0
52060: PUSH
52061: LD_INT 6
52063: PUSH
52064: EMPTY
52065: LIST
52066: LIST
52067: PUSH
52068: LD_INT 1
52070: NEG
52071: PUSH
52072: LD_INT 5
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: LIST
52083: LIST
52084: LIST
52085: LIST
52086: LIST
52087: LIST
52088: LIST
52089: LIST
52090: LIST
52091: LIST
52092: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
52093: LD_ADDR_VAR 0 33
52097: PUSH
52098: LD_INT 2
52100: NEG
52101: PUSH
52102: LD_INT 1
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: LD_INT 3
52111: NEG
52112: PUSH
52113: LD_INT 0
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: LD_INT 3
52122: NEG
52123: PUSH
52124: LD_INT 1
52126: NEG
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: PUSH
52132: LD_INT 3
52134: NEG
52135: PUSH
52136: LD_INT 1
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: PUSH
52143: LD_INT 4
52145: NEG
52146: PUSH
52147: LD_INT 0
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: PUSH
52154: LD_INT 4
52156: NEG
52157: PUSH
52158: LD_INT 1
52160: NEG
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: PUSH
52166: LD_INT 4
52168: NEG
52169: PUSH
52170: LD_INT 1
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: PUSH
52177: LD_INT 5
52179: NEG
52180: PUSH
52181: LD_INT 0
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: LD_INT 5
52190: NEG
52191: PUSH
52192: LD_INT 1
52194: NEG
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 5
52202: NEG
52203: PUSH
52204: LD_INT 1
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PUSH
52211: LD_INT 6
52213: NEG
52214: PUSH
52215: LD_INT 0
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 6
52224: NEG
52225: PUSH
52226: LD_INT 1
52228: NEG
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: LIST
52238: LIST
52239: LIST
52240: LIST
52241: LIST
52242: LIST
52243: LIST
52244: LIST
52245: LIST
52246: LIST
52247: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
52248: LD_ADDR_VAR 0 34
52252: PUSH
52253: LD_INT 2
52255: NEG
52256: PUSH
52257: LD_INT 3
52259: NEG
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: LD_INT 3
52267: NEG
52268: PUSH
52269: LD_INT 2
52271: NEG
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: LD_INT 3
52279: NEG
52280: PUSH
52281: LD_INT 3
52283: NEG
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 3
52291: NEG
52292: PUSH
52293: LD_INT 4
52295: NEG
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: PUSH
52301: LD_INT 4
52303: NEG
52304: PUSH
52305: LD_INT 3
52307: NEG
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: PUSH
52313: LD_INT 4
52315: NEG
52316: PUSH
52317: LD_INT 4
52319: NEG
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: PUSH
52325: LD_INT 4
52327: NEG
52328: PUSH
52329: LD_INT 5
52331: NEG
52332: PUSH
52333: EMPTY
52334: LIST
52335: LIST
52336: PUSH
52337: LD_INT 5
52339: NEG
52340: PUSH
52341: LD_INT 4
52343: NEG
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: PUSH
52349: LD_INT 5
52351: NEG
52352: PUSH
52353: LD_INT 5
52355: NEG
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: LD_INT 5
52363: NEG
52364: PUSH
52365: LD_INT 6
52367: NEG
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: PUSH
52373: LD_INT 6
52375: NEG
52376: PUSH
52377: LD_INT 5
52379: NEG
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: PUSH
52385: LD_INT 6
52387: NEG
52388: PUSH
52389: LD_INT 6
52391: NEG
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: LIST
52401: LIST
52402: LIST
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: LIST
52408: LIST
52409: LIST
52410: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
52411: LD_ADDR_VAR 0 41
52415: PUSH
52416: LD_INT 0
52418: PUSH
52419: LD_INT 2
52421: NEG
52422: PUSH
52423: EMPTY
52424: LIST
52425: LIST
52426: PUSH
52427: LD_INT 1
52429: NEG
52430: PUSH
52431: LD_INT 3
52433: NEG
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: LD_INT 1
52441: PUSH
52442: LD_INT 2
52444: NEG
52445: PUSH
52446: EMPTY
52447: LIST
52448: LIST
52449: PUSH
52450: EMPTY
52451: LIST
52452: LIST
52453: LIST
52454: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
52455: LD_ADDR_VAR 0 42
52459: PUSH
52460: LD_INT 2
52462: PUSH
52463: LD_INT 0
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: PUSH
52470: LD_INT 2
52472: PUSH
52473: LD_INT 1
52475: NEG
52476: PUSH
52477: EMPTY
52478: LIST
52479: LIST
52480: PUSH
52481: LD_INT 3
52483: PUSH
52484: LD_INT 1
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: LIST
52495: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
52496: LD_ADDR_VAR 0 43
52500: PUSH
52501: LD_INT 2
52503: PUSH
52504: LD_INT 2
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: LD_INT 3
52513: PUSH
52514: LD_INT 2
52516: PUSH
52517: EMPTY
52518: LIST
52519: LIST
52520: PUSH
52521: LD_INT 2
52523: PUSH
52524: LD_INT 3
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: PUSH
52531: EMPTY
52532: LIST
52533: LIST
52534: LIST
52535: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
52536: LD_ADDR_VAR 0 44
52540: PUSH
52541: LD_INT 0
52543: PUSH
52544: LD_INT 2
52546: PUSH
52547: EMPTY
52548: LIST
52549: LIST
52550: PUSH
52551: LD_INT 1
52553: PUSH
52554: LD_INT 3
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: PUSH
52561: LD_INT 1
52563: NEG
52564: PUSH
52565: LD_INT 2
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: LIST
52576: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52577: LD_ADDR_VAR 0 45
52581: PUSH
52582: LD_INT 2
52584: NEG
52585: PUSH
52586: LD_INT 0
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: PUSH
52593: LD_INT 2
52595: NEG
52596: PUSH
52597: LD_INT 1
52599: PUSH
52600: EMPTY
52601: LIST
52602: LIST
52603: PUSH
52604: LD_INT 3
52606: NEG
52607: PUSH
52608: LD_INT 1
52610: NEG
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: LIST
52620: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
52621: LD_ADDR_VAR 0 46
52625: PUSH
52626: LD_INT 2
52628: NEG
52629: PUSH
52630: LD_INT 2
52632: NEG
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: PUSH
52638: LD_INT 2
52640: NEG
52641: PUSH
52642: LD_INT 3
52644: NEG
52645: PUSH
52646: EMPTY
52647: LIST
52648: LIST
52649: PUSH
52650: LD_INT 3
52652: NEG
52653: PUSH
52654: LD_INT 2
52656: NEG
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: LIST
52666: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
52667: LD_ADDR_VAR 0 47
52671: PUSH
52672: LD_INT 2
52674: NEG
52675: PUSH
52676: LD_INT 3
52678: NEG
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: PUSH
52684: LD_INT 1
52686: NEG
52687: PUSH
52688: LD_INT 3
52690: NEG
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52700: LD_ADDR_VAR 0 48
52704: PUSH
52705: LD_INT 1
52707: PUSH
52708: LD_INT 2
52710: NEG
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: PUSH
52716: LD_INT 2
52718: PUSH
52719: LD_INT 1
52721: NEG
52722: PUSH
52723: EMPTY
52724: LIST
52725: LIST
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
52731: LD_ADDR_VAR 0 49
52735: PUSH
52736: LD_INT 3
52738: PUSH
52739: LD_INT 1
52741: PUSH
52742: EMPTY
52743: LIST
52744: LIST
52745: PUSH
52746: LD_INT 3
52748: PUSH
52749: LD_INT 2
52751: PUSH
52752: EMPTY
52753: LIST
52754: LIST
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
52760: LD_ADDR_VAR 0 50
52764: PUSH
52765: LD_INT 2
52767: PUSH
52768: LD_INT 3
52770: PUSH
52771: EMPTY
52772: LIST
52773: LIST
52774: PUSH
52775: LD_INT 1
52777: PUSH
52778: LD_INT 3
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52789: LD_ADDR_VAR 0 51
52793: PUSH
52794: LD_INT 1
52796: NEG
52797: PUSH
52798: LD_INT 2
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 2
52807: NEG
52808: PUSH
52809: LD_INT 1
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52820: LD_ADDR_VAR 0 52
52824: PUSH
52825: LD_INT 3
52827: NEG
52828: PUSH
52829: LD_INT 1
52831: NEG
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: PUSH
52837: LD_INT 3
52839: NEG
52840: PUSH
52841: LD_INT 2
52843: NEG
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: PUSH
52849: EMPTY
52850: LIST
52851: LIST
52852: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52853: LD_ADDR_VAR 0 53
52857: PUSH
52858: LD_INT 1
52860: NEG
52861: PUSH
52862: LD_INT 3
52864: NEG
52865: PUSH
52866: EMPTY
52867: LIST
52868: LIST
52869: PUSH
52870: LD_INT 0
52872: PUSH
52873: LD_INT 3
52875: NEG
52876: PUSH
52877: EMPTY
52878: LIST
52879: LIST
52880: PUSH
52881: LD_INT 1
52883: PUSH
52884: LD_INT 2
52886: NEG
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: LIST
52896: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52897: LD_ADDR_VAR 0 54
52901: PUSH
52902: LD_INT 2
52904: PUSH
52905: LD_INT 1
52907: NEG
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: LD_INT 3
52915: PUSH
52916: LD_INT 0
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PUSH
52923: LD_INT 3
52925: PUSH
52926: LD_INT 1
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: LIST
52937: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52938: LD_ADDR_VAR 0 55
52942: PUSH
52943: LD_INT 3
52945: PUSH
52946: LD_INT 2
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: PUSH
52953: LD_INT 3
52955: PUSH
52956: LD_INT 3
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: PUSH
52963: LD_INT 2
52965: PUSH
52966: LD_INT 3
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: LIST
52977: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52978: LD_ADDR_VAR 0 56
52982: PUSH
52983: LD_INT 1
52985: PUSH
52986: LD_INT 3
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 0
52995: PUSH
52996: LD_INT 3
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: LD_INT 1
53005: NEG
53006: PUSH
53007: LD_INT 2
53009: PUSH
53010: EMPTY
53011: LIST
53012: LIST
53013: PUSH
53014: EMPTY
53015: LIST
53016: LIST
53017: LIST
53018: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53019: LD_ADDR_VAR 0 57
53023: PUSH
53024: LD_INT 2
53026: NEG
53027: PUSH
53028: LD_INT 1
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: PUSH
53035: LD_INT 3
53037: NEG
53038: PUSH
53039: LD_INT 0
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: PUSH
53046: LD_INT 3
53048: NEG
53049: PUSH
53050: LD_INT 1
53052: NEG
53053: PUSH
53054: EMPTY
53055: LIST
53056: LIST
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: LIST
53062: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53063: LD_ADDR_VAR 0 58
53067: PUSH
53068: LD_INT 2
53070: NEG
53071: PUSH
53072: LD_INT 3
53074: NEG
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: PUSH
53080: LD_INT 3
53082: NEG
53083: PUSH
53084: LD_INT 2
53086: NEG
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 3
53094: NEG
53095: PUSH
53096: LD_INT 3
53098: NEG
53099: PUSH
53100: EMPTY
53101: LIST
53102: LIST
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: LIST
53108: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
53109: LD_ADDR_VAR 0 59
53113: PUSH
53114: LD_INT 1
53116: NEG
53117: PUSH
53118: LD_INT 2
53120: NEG
53121: PUSH
53122: EMPTY
53123: LIST
53124: LIST
53125: PUSH
53126: LD_INT 0
53128: PUSH
53129: LD_INT 2
53131: NEG
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: PUSH
53137: LD_INT 1
53139: PUSH
53140: LD_INT 1
53142: NEG
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: LIST
53152: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53153: LD_ADDR_VAR 0 60
53157: PUSH
53158: LD_INT 1
53160: PUSH
53161: LD_INT 1
53163: NEG
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: PUSH
53169: LD_INT 2
53171: PUSH
53172: LD_INT 0
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 2
53181: PUSH
53182: LD_INT 1
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: LIST
53193: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53194: LD_ADDR_VAR 0 61
53198: PUSH
53199: LD_INT 2
53201: PUSH
53202: LD_INT 1
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PUSH
53209: LD_INT 2
53211: PUSH
53212: LD_INT 2
53214: PUSH
53215: EMPTY
53216: LIST
53217: LIST
53218: PUSH
53219: LD_INT 1
53221: PUSH
53222: LD_INT 2
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: LIST
53233: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53234: LD_ADDR_VAR 0 62
53238: PUSH
53239: LD_INT 1
53241: PUSH
53242: LD_INT 2
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: PUSH
53249: LD_INT 0
53251: PUSH
53252: LD_INT 2
53254: PUSH
53255: EMPTY
53256: LIST
53257: LIST
53258: PUSH
53259: LD_INT 1
53261: NEG
53262: PUSH
53263: LD_INT 1
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: LIST
53274: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53275: LD_ADDR_VAR 0 63
53279: PUSH
53280: LD_INT 1
53282: NEG
53283: PUSH
53284: LD_INT 1
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: LD_INT 2
53293: NEG
53294: PUSH
53295: LD_INT 0
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: LD_INT 2
53304: NEG
53305: PUSH
53306: LD_INT 1
53308: NEG
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: LIST
53318: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53319: LD_ADDR_VAR 0 64
53323: PUSH
53324: LD_INT 1
53326: NEG
53327: PUSH
53328: LD_INT 2
53330: NEG
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: PUSH
53336: LD_INT 2
53338: NEG
53339: PUSH
53340: LD_INT 1
53342: NEG
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 2
53350: NEG
53351: PUSH
53352: LD_INT 2
53354: NEG
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: LIST
53364: ST_TO_ADDR
// end ; 2 :
53365: GO 56631
53367: LD_INT 2
53369: DOUBLE
53370: EQUAL
53371: IFTRUE 53375
53373: GO 56630
53375: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
53376: LD_ADDR_VAR 0 29
53380: PUSH
53381: LD_INT 4
53383: PUSH
53384: LD_INT 0
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: PUSH
53391: LD_INT 4
53393: PUSH
53394: LD_INT 1
53396: NEG
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 5
53404: PUSH
53405: LD_INT 0
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: PUSH
53412: LD_INT 5
53414: PUSH
53415: LD_INT 1
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: PUSH
53422: LD_INT 4
53424: PUSH
53425: LD_INT 1
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PUSH
53432: LD_INT 3
53434: PUSH
53435: LD_INT 0
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: PUSH
53442: LD_INT 3
53444: PUSH
53445: LD_INT 1
53447: NEG
53448: PUSH
53449: EMPTY
53450: LIST
53451: LIST
53452: PUSH
53453: LD_INT 3
53455: PUSH
53456: LD_INT 2
53458: NEG
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: LD_INT 5
53466: PUSH
53467: LD_INT 2
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: LD_INT 3
53476: PUSH
53477: LD_INT 3
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: PUSH
53484: LD_INT 3
53486: PUSH
53487: LD_INT 2
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: LD_INT 4
53496: PUSH
53497: LD_INT 3
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: LD_INT 4
53506: PUSH
53507: LD_INT 4
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: PUSH
53514: LD_INT 3
53516: PUSH
53517: LD_INT 4
53519: PUSH
53520: EMPTY
53521: LIST
53522: LIST
53523: PUSH
53524: LD_INT 2
53526: PUSH
53527: LD_INT 3
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: PUSH
53534: LD_INT 2
53536: PUSH
53537: LD_INT 2
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: LD_INT 4
53546: PUSH
53547: LD_INT 2
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 2
53556: PUSH
53557: LD_INT 4
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: PUSH
53564: LD_INT 0
53566: PUSH
53567: LD_INT 4
53569: PUSH
53570: EMPTY
53571: LIST
53572: LIST
53573: PUSH
53574: LD_INT 0
53576: PUSH
53577: LD_INT 3
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 1
53586: PUSH
53587: LD_INT 4
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: PUSH
53594: LD_INT 1
53596: PUSH
53597: LD_INT 5
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: PUSH
53604: LD_INT 0
53606: PUSH
53607: LD_INT 5
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: LD_INT 1
53616: NEG
53617: PUSH
53618: LD_INT 4
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: LD_INT 1
53627: NEG
53628: PUSH
53629: LD_INT 3
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: LD_INT 2
53638: PUSH
53639: LD_INT 5
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: PUSH
53646: LD_INT 2
53648: NEG
53649: PUSH
53650: LD_INT 3
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: PUSH
53657: LD_INT 3
53659: NEG
53660: PUSH
53661: LD_INT 0
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: LD_INT 3
53670: NEG
53671: PUSH
53672: LD_INT 1
53674: NEG
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: LD_INT 2
53682: NEG
53683: PUSH
53684: LD_INT 0
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: LD_INT 2
53693: NEG
53694: PUSH
53695: LD_INT 1
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: PUSH
53702: LD_INT 3
53704: NEG
53705: PUSH
53706: LD_INT 1
53708: PUSH
53709: EMPTY
53710: LIST
53711: LIST
53712: PUSH
53713: LD_INT 4
53715: NEG
53716: PUSH
53717: LD_INT 0
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: PUSH
53724: LD_INT 4
53726: NEG
53727: PUSH
53728: LD_INT 1
53730: NEG
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: LD_INT 4
53738: NEG
53739: PUSH
53740: LD_INT 2
53742: NEG
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 2
53750: NEG
53751: PUSH
53752: LD_INT 2
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: LD_INT 4
53761: NEG
53762: PUSH
53763: LD_INT 4
53765: NEG
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 4
53773: NEG
53774: PUSH
53775: LD_INT 5
53777: NEG
53778: PUSH
53779: EMPTY
53780: LIST
53781: LIST
53782: PUSH
53783: LD_INT 3
53785: NEG
53786: PUSH
53787: LD_INT 4
53789: NEG
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PUSH
53795: LD_INT 3
53797: NEG
53798: PUSH
53799: LD_INT 3
53801: NEG
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: PUSH
53807: LD_INT 4
53809: NEG
53810: PUSH
53811: LD_INT 3
53813: NEG
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: PUSH
53819: LD_INT 5
53821: NEG
53822: PUSH
53823: LD_INT 4
53825: NEG
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: PUSH
53831: LD_INT 5
53833: NEG
53834: PUSH
53835: LD_INT 5
53837: NEG
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: LD_INT 3
53845: NEG
53846: PUSH
53847: LD_INT 5
53849: NEG
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: PUSH
53855: LD_INT 5
53857: NEG
53858: PUSH
53859: LD_INT 3
53861: NEG
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: LIST
53871: LIST
53872: LIST
53873: LIST
53874: LIST
53875: LIST
53876: LIST
53877: LIST
53878: LIST
53879: LIST
53880: LIST
53881: LIST
53882: LIST
53883: LIST
53884: LIST
53885: LIST
53886: LIST
53887: LIST
53888: LIST
53889: LIST
53890: LIST
53891: LIST
53892: LIST
53893: LIST
53894: LIST
53895: LIST
53896: LIST
53897: LIST
53898: LIST
53899: LIST
53900: LIST
53901: LIST
53902: LIST
53903: LIST
53904: LIST
53905: LIST
53906: LIST
53907: LIST
53908: LIST
53909: LIST
53910: LIST
53911: LIST
53912: LIST
53913: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
53914: LD_ADDR_VAR 0 30
53918: PUSH
53919: LD_INT 4
53921: PUSH
53922: LD_INT 4
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: PUSH
53929: LD_INT 4
53931: PUSH
53932: LD_INT 3
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: LD_INT 5
53941: PUSH
53942: LD_INT 4
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: LD_INT 5
53951: PUSH
53952: LD_INT 5
53954: PUSH
53955: EMPTY
53956: LIST
53957: LIST
53958: PUSH
53959: LD_INT 4
53961: PUSH
53962: LD_INT 5
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: PUSH
53969: LD_INT 3
53971: PUSH
53972: LD_INT 4
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: PUSH
53979: LD_INT 3
53981: PUSH
53982: LD_INT 3
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: PUSH
53989: LD_INT 5
53991: PUSH
53992: LD_INT 3
53994: PUSH
53995: EMPTY
53996: LIST
53997: LIST
53998: PUSH
53999: LD_INT 3
54001: PUSH
54002: LD_INT 5
54004: PUSH
54005: EMPTY
54006: LIST
54007: LIST
54008: PUSH
54009: LD_INT 0
54011: PUSH
54012: LD_INT 3
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: PUSH
54019: LD_INT 0
54021: PUSH
54022: LD_INT 2
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PUSH
54029: LD_INT 1
54031: PUSH
54032: LD_INT 3
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: PUSH
54039: LD_INT 1
54041: PUSH
54042: LD_INT 4
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: PUSH
54049: LD_INT 0
54051: PUSH
54052: LD_INT 4
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 1
54061: NEG
54062: PUSH
54063: LD_INT 3
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: LD_INT 1
54072: NEG
54073: PUSH
54074: LD_INT 2
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: PUSH
54081: LD_INT 2
54083: PUSH
54084: LD_INT 4
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: LD_INT 2
54093: NEG
54094: PUSH
54095: LD_INT 2
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: PUSH
54102: LD_INT 4
54104: NEG
54105: PUSH
54106: LD_INT 0
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: PUSH
54113: LD_INT 4
54115: NEG
54116: PUSH
54117: LD_INT 1
54119: NEG
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: LD_INT 3
54127: NEG
54128: PUSH
54129: LD_INT 0
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: LD_INT 3
54138: NEG
54139: PUSH
54140: LD_INT 1
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 4
54149: NEG
54150: PUSH
54151: LD_INT 1
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: PUSH
54158: LD_INT 5
54160: NEG
54161: PUSH
54162: LD_INT 0
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PUSH
54169: LD_INT 5
54171: NEG
54172: PUSH
54173: LD_INT 1
54175: NEG
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: PUSH
54181: LD_INT 5
54183: NEG
54184: PUSH
54185: LD_INT 2
54187: NEG
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: PUSH
54193: LD_INT 3
54195: NEG
54196: PUSH
54197: LD_INT 2
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PUSH
54204: LD_INT 3
54206: NEG
54207: PUSH
54208: LD_INT 3
54210: NEG
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: LD_INT 3
54218: NEG
54219: PUSH
54220: LD_INT 4
54222: NEG
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: PUSH
54228: LD_INT 2
54230: NEG
54231: PUSH
54232: LD_INT 3
54234: NEG
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: PUSH
54240: LD_INT 2
54242: NEG
54243: PUSH
54244: LD_INT 2
54246: NEG
54247: PUSH
54248: EMPTY
54249: LIST
54250: LIST
54251: PUSH
54252: LD_INT 3
54254: NEG
54255: PUSH
54256: LD_INT 2
54258: NEG
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 4
54266: NEG
54267: PUSH
54268: LD_INT 3
54270: NEG
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: PUSH
54276: LD_INT 4
54278: NEG
54279: PUSH
54280: LD_INT 4
54282: NEG
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: LD_INT 2
54290: NEG
54291: PUSH
54292: LD_INT 4
54294: NEG
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: LD_INT 4
54302: NEG
54303: PUSH
54304: LD_INT 2
54306: NEG
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: LD_INT 0
54314: PUSH
54315: LD_INT 4
54317: NEG
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: LD_INT 0
54325: PUSH
54326: LD_INT 5
54328: NEG
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: LD_INT 1
54336: PUSH
54337: LD_INT 4
54339: NEG
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 1
54347: PUSH
54348: LD_INT 3
54350: NEG
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 0
54358: PUSH
54359: LD_INT 3
54361: NEG
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: PUSH
54367: LD_INT 1
54369: NEG
54370: PUSH
54371: LD_INT 4
54373: NEG
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: PUSH
54379: LD_INT 1
54381: NEG
54382: PUSH
54383: LD_INT 5
54385: NEG
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: LD_INT 2
54393: PUSH
54394: LD_INT 3
54396: NEG
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: PUSH
54402: LD_INT 2
54404: NEG
54405: PUSH
54406: LD_INT 5
54408: NEG
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: LIST
54418: LIST
54419: LIST
54420: LIST
54421: LIST
54422: LIST
54423: LIST
54424: LIST
54425: LIST
54426: LIST
54427: LIST
54428: LIST
54429: LIST
54430: LIST
54431: LIST
54432: LIST
54433: LIST
54434: LIST
54435: LIST
54436: LIST
54437: LIST
54438: LIST
54439: LIST
54440: LIST
54441: LIST
54442: LIST
54443: LIST
54444: LIST
54445: LIST
54446: LIST
54447: LIST
54448: LIST
54449: LIST
54450: LIST
54451: LIST
54452: LIST
54453: LIST
54454: LIST
54455: LIST
54456: LIST
54457: LIST
54458: LIST
54459: LIST
54460: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
54461: LD_ADDR_VAR 0 31
54465: PUSH
54466: LD_INT 0
54468: PUSH
54469: LD_INT 4
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: PUSH
54476: LD_INT 0
54478: PUSH
54479: LD_INT 3
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: PUSH
54486: LD_INT 1
54488: PUSH
54489: LD_INT 4
54491: PUSH
54492: EMPTY
54493: LIST
54494: LIST
54495: PUSH
54496: LD_INT 1
54498: PUSH
54499: LD_INT 5
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: PUSH
54506: LD_INT 0
54508: PUSH
54509: LD_INT 5
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: PUSH
54516: LD_INT 1
54518: NEG
54519: PUSH
54520: LD_INT 4
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: PUSH
54527: LD_INT 1
54529: NEG
54530: PUSH
54531: LD_INT 3
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: PUSH
54538: LD_INT 2
54540: PUSH
54541: LD_INT 5
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: PUSH
54548: LD_INT 2
54550: NEG
54551: PUSH
54552: LD_INT 3
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: LD_INT 3
54561: NEG
54562: PUSH
54563: LD_INT 0
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: PUSH
54570: LD_INT 3
54572: NEG
54573: PUSH
54574: LD_INT 1
54576: NEG
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: PUSH
54582: LD_INT 2
54584: NEG
54585: PUSH
54586: LD_INT 0
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: PUSH
54593: LD_INT 2
54595: NEG
54596: PUSH
54597: LD_INT 1
54599: PUSH
54600: EMPTY
54601: LIST
54602: LIST
54603: PUSH
54604: LD_INT 3
54606: NEG
54607: PUSH
54608: LD_INT 1
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: PUSH
54615: LD_INT 4
54617: NEG
54618: PUSH
54619: LD_INT 0
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: PUSH
54626: LD_INT 4
54628: NEG
54629: PUSH
54630: LD_INT 1
54632: NEG
54633: PUSH
54634: EMPTY
54635: LIST
54636: LIST
54637: PUSH
54638: LD_INT 4
54640: NEG
54641: PUSH
54642: LD_INT 2
54644: NEG
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: LD_INT 2
54652: NEG
54653: PUSH
54654: LD_INT 2
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: LD_INT 4
54663: NEG
54664: PUSH
54665: LD_INT 4
54667: NEG
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: PUSH
54673: LD_INT 4
54675: NEG
54676: PUSH
54677: LD_INT 5
54679: NEG
54680: PUSH
54681: EMPTY
54682: LIST
54683: LIST
54684: PUSH
54685: LD_INT 3
54687: NEG
54688: PUSH
54689: LD_INT 4
54691: NEG
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: PUSH
54697: LD_INT 3
54699: NEG
54700: PUSH
54701: LD_INT 3
54703: NEG
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: LD_INT 4
54711: NEG
54712: PUSH
54713: LD_INT 3
54715: NEG
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: PUSH
54721: LD_INT 5
54723: NEG
54724: PUSH
54725: LD_INT 4
54727: NEG
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: LD_INT 5
54735: NEG
54736: PUSH
54737: LD_INT 5
54739: NEG
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: PUSH
54745: LD_INT 3
54747: NEG
54748: PUSH
54749: LD_INT 5
54751: NEG
54752: PUSH
54753: EMPTY
54754: LIST
54755: LIST
54756: PUSH
54757: LD_INT 5
54759: NEG
54760: PUSH
54761: LD_INT 3
54763: NEG
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: LD_INT 0
54771: PUSH
54772: LD_INT 3
54774: NEG
54775: PUSH
54776: EMPTY
54777: LIST
54778: LIST
54779: PUSH
54780: LD_INT 0
54782: PUSH
54783: LD_INT 4
54785: NEG
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: PUSH
54791: LD_INT 1
54793: PUSH
54794: LD_INT 3
54796: NEG
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: PUSH
54802: LD_INT 1
54804: PUSH
54805: LD_INT 2
54807: NEG
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: LD_INT 0
54815: PUSH
54816: LD_INT 2
54818: NEG
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: LD_INT 1
54826: NEG
54827: PUSH
54828: LD_INT 3
54830: NEG
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: PUSH
54836: LD_INT 1
54838: NEG
54839: PUSH
54840: LD_INT 4
54842: NEG
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PUSH
54848: LD_INT 2
54850: PUSH
54851: LD_INT 2
54853: NEG
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: PUSH
54859: LD_INT 2
54861: NEG
54862: PUSH
54863: LD_INT 4
54865: NEG
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: PUSH
54871: LD_INT 4
54873: PUSH
54874: LD_INT 0
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: PUSH
54881: LD_INT 4
54883: PUSH
54884: LD_INT 1
54886: NEG
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: PUSH
54892: LD_INT 5
54894: PUSH
54895: LD_INT 0
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: LD_INT 5
54904: PUSH
54905: LD_INT 1
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: PUSH
54912: LD_INT 4
54914: PUSH
54915: LD_INT 1
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: LD_INT 3
54924: PUSH
54925: LD_INT 0
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: LD_INT 3
54934: PUSH
54935: LD_INT 1
54937: NEG
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: PUSH
54943: LD_INT 3
54945: PUSH
54946: LD_INT 2
54948: NEG
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: LD_INT 5
54956: PUSH
54957: LD_INT 2
54959: PUSH
54960: EMPTY
54961: LIST
54962: LIST
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: LIST
54968: LIST
54969: LIST
54970: LIST
54971: LIST
54972: LIST
54973: LIST
54974: LIST
54975: LIST
54976: LIST
54977: LIST
54978: LIST
54979: LIST
54980: LIST
54981: LIST
54982: LIST
54983: LIST
54984: LIST
54985: LIST
54986: LIST
54987: LIST
54988: LIST
54989: LIST
54990: LIST
54991: LIST
54992: LIST
54993: LIST
54994: LIST
54995: LIST
54996: LIST
54997: LIST
54998: LIST
54999: LIST
55000: LIST
55001: LIST
55002: LIST
55003: LIST
55004: LIST
55005: LIST
55006: LIST
55007: LIST
55008: LIST
55009: LIST
55010: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
55011: LD_ADDR_VAR 0 32
55015: PUSH
55016: LD_INT 4
55018: NEG
55019: PUSH
55020: LD_INT 0
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: LD_INT 4
55029: NEG
55030: PUSH
55031: LD_INT 1
55033: NEG
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: PUSH
55039: LD_INT 3
55041: NEG
55042: PUSH
55043: LD_INT 0
55045: PUSH
55046: EMPTY
55047: LIST
55048: LIST
55049: PUSH
55050: LD_INT 3
55052: NEG
55053: PUSH
55054: LD_INT 1
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 4
55063: NEG
55064: PUSH
55065: LD_INT 1
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: PUSH
55072: LD_INT 5
55074: NEG
55075: PUSH
55076: LD_INT 0
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: LD_INT 5
55085: NEG
55086: PUSH
55087: LD_INT 1
55089: NEG
55090: PUSH
55091: EMPTY
55092: LIST
55093: LIST
55094: PUSH
55095: LD_INT 5
55097: NEG
55098: PUSH
55099: LD_INT 2
55101: NEG
55102: PUSH
55103: EMPTY
55104: LIST
55105: LIST
55106: PUSH
55107: LD_INT 3
55109: NEG
55110: PUSH
55111: LD_INT 2
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: PUSH
55118: LD_INT 3
55120: NEG
55121: PUSH
55122: LD_INT 3
55124: NEG
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: PUSH
55130: LD_INT 3
55132: NEG
55133: PUSH
55134: LD_INT 4
55136: NEG
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: LD_INT 2
55144: NEG
55145: PUSH
55146: LD_INT 3
55148: NEG
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: LD_INT 2
55156: NEG
55157: PUSH
55158: LD_INT 2
55160: NEG
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: PUSH
55166: LD_INT 3
55168: NEG
55169: PUSH
55170: LD_INT 2
55172: NEG
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: LD_INT 4
55180: NEG
55181: PUSH
55182: LD_INT 3
55184: NEG
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: PUSH
55190: LD_INT 4
55192: NEG
55193: PUSH
55194: LD_INT 4
55196: NEG
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: PUSH
55202: LD_INT 2
55204: NEG
55205: PUSH
55206: LD_INT 4
55208: NEG
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 4
55216: NEG
55217: PUSH
55218: LD_INT 2
55220: NEG
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: LD_INT 0
55228: PUSH
55229: LD_INT 4
55231: NEG
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 0
55239: PUSH
55240: LD_INT 5
55242: NEG
55243: PUSH
55244: EMPTY
55245: LIST
55246: LIST
55247: PUSH
55248: LD_INT 1
55250: PUSH
55251: LD_INT 4
55253: NEG
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: LD_INT 1
55261: PUSH
55262: LD_INT 3
55264: NEG
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 0
55272: PUSH
55273: LD_INT 3
55275: NEG
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: PUSH
55281: LD_INT 1
55283: NEG
55284: PUSH
55285: LD_INT 4
55287: NEG
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: LD_INT 1
55295: NEG
55296: PUSH
55297: LD_INT 5
55299: NEG
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: PUSH
55305: LD_INT 2
55307: PUSH
55308: LD_INT 3
55310: NEG
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: LD_INT 2
55318: NEG
55319: PUSH
55320: LD_INT 5
55322: NEG
55323: PUSH
55324: EMPTY
55325: LIST
55326: LIST
55327: PUSH
55328: LD_INT 3
55330: PUSH
55331: LD_INT 0
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: LD_INT 3
55340: PUSH
55341: LD_INT 1
55343: NEG
55344: PUSH
55345: EMPTY
55346: LIST
55347: LIST
55348: PUSH
55349: LD_INT 4
55351: PUSH
55352: LD_INT 0
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: PUSH
55359: LD_INT 4
55361: PUSH
55362: LD_INT 1
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: PUSH
55369: LD_INT 3
55371: PUSH
55372: LD_INT 1
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: PUSH
55379: LD_INT 2
55381: PUSH
55382: LD_INT 0
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: LD_INT 2
55391: PUSH
55392: LD_INT 1
55394: NEG
55395: PUSH
55396: EMPTY
55397: LIST
55398: LIST
55399: PUSH
55400: LD_INT 2
55402: PUSH
55403: LD_INT 2
55405: NEG
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: PUSH
55411: LD_INT 4
55413: PUSH
55414: LD_INT 2
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PUSH
55421: LD_INT 4
55423: PUSH
55424: LD_INT 4
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: PUSH
55431: LD_INT 4
55433: PUSH
55434: LD_INT 3
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: LD_INT 5
55443: PUSH
55444: LD_INT 4
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: PUSH
55451: LD_INT 5
55453: PUSH
55454: LD_INT 5
55456: PUSH
55457: EMPTY
55458: LIST
55459: LIST
55460: PUSH
55461: LD_INT 4
55463: PUSH
55464: LD_INT 5
55466: PUSH
55467: EMPTY
55468: LIST
55469: LIST
55470: PUSH
55471: LD_INT 3
55473: PUSH
55474: LD_INT 4
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: LD_INT 3
55483: PUSH
55484: LD_INT 3
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 5
55493: PUSH
55494: LD_INT 3
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 3
55503: PUSH
55504: LD_INT 5
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: LIST
55515: LIST
55516: LIST
55517: LIST
55518: LIST
55519: LIST
55520: LIST
55521: LIST
55522: LIST
55523: LIST
55524: LIST
55525: LIST
55526: LIST
55527: LIST
55528: LIST
55529: LIST
55530: LIST
55531: LIST
55532: LIST
55533: LIST
55534: LIST
55535: LIST
55536: LIST
55537: LIST
55538: LIST
55539: LIST
55540: LIST
55541: LIST
55542: LIST
55543: LIST
55544: LIST
55545: LIST
55546: LIST
55547: LIST
55548: LIST
55549: LIST
55550: LIST
55551: LIST
55552: LIST
55553: LIST
55554: LIST
55555: LIST
55556: LIST
55557: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
55558: LD_ADDR_VAR 0 33
55562: PUSH
55563: LD_INT 4
55565: NEG
55566: PUSH
55567: LD_INT 4
55569: NEG
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: PUSH
55575: LD_INT 4
55577: NEG
55578: PUSH
55579: LD_INT 5
55581: NEG
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: LD_INT 3
55589: NEG
55590: PUSH
55591: LD_INT 4
55593: NEG
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: LD_INT 3
55601: NEG
55602: PUSH
55603: LD_INT 3
55605: NEG
55606: PUSH
55607: EMPTY
55608: LIST
55609: LIST
55610: PUSH
55611: LD_INT 4
55613: NEG
55614: PUSH
55615: LD_INT 3
55617: NEG
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 5
55625: NEG
55626: PUSH
55627: LD_INT 4
55629: NEG
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: LD_INT 5
55637: NEG
55638: PUSH
55639: LD_INT 5
55641: NEG
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: LD_INT 3
55649: NEG
55650: PUSH
55651: LD_INT 5
55653: NEG
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 5
55661: NEG
55662: PUSH
55663: LD_INT 3
55665: NEG
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: PUSH
55671: LD_INT 0
55673: PUSH
55674: LD_INT 3
55676: NEG
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: PUSH
55682: LD_INT 0
55684: PUSH
55685: LD_INT 4
55687: NEG
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: PUSH
55693: LD_INT 1
55695: PUSH
55696: LD_INT 3
55698: NEG
55699: PUSH
55700: EMPTY
55701: LIST
55702: LIST
55703: PUSH
55704: LD_INT 1
55706: PUSH
55707: LD_INT 2
55709: NEG
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PUSH
55715: LD_INT 0
55717: PUSH
55718: LD_INT 2
55720: NEG
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 1
55728: NEG
55729: PUSH
55730: LD_INT 3
55732: NEG
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: PUSH
55738: LD_INT 1
55740: NEG
55741: PUSH
55742: LD_INT 4
55744: NEG
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: PUSH
55750: LD_INT 2
55752: PUSH
55753: LD_INT 2
55755: NEG
55756: PUSH
55757: EMPTY
55758: LIST
55759: LIST
55760: PUSH
55761: LD_INT 2
55763: NEG
55764: PUSH
55765: LD_INT 4
55767: NEG
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PUSH
55773: LD_INT 4
55775: PUSH
55776: LD_INT 0
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: PUSH
55783: LD_INT 4
55785: PUSH
55786: LD_INT 1
55788: NEG
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: PUSH
55794: LD_INT 5
55796: PUSH
55797: LD_INT 0
55799: PUSH
55800: EMPTY
55801: LIST
55802: LIST
55803: PUSH
55804: LD_INT 5
55806: PUSH
55807: LD_INT 1
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: PUSH
55814: LD_INT 4
55816: PUSH
55817: LD_INT 1
55819: PUSH
55820: EMPTY
55821: LIST
55822: LIST
55823: PUSH
55824: LD_INT 3
55826: PUSH
55827: LD_INT 0
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: LD_INT 3
55836: PUSH
55837: LD_INT 1
55839: NEG
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: PUSH
55845: LD_INT 3
55847: PUSH
55848: LD_INT 2
55850: NEG
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: PUSH
55856: LD_INT 5
55858: PUSH
55859: LD_INT 2
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: LD_INT 3
55868: PUSH
55869: LD_INT 3
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: LD_INT 3
55878: PUSH
55879: LD_INT 2
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: LD_INT 4
55888: PUSH
55889: LD_INT 3
55891: PUSH
55892: EMPTY
55893: LIST
55894: LIST
55895: PUSH
55896: LD_INT 4
55898: PUSH
55899: LD_INT 4
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: PUSH
55906: LD_INT 3
55908: PUSH
55909: LD_INT 4
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: PUSH
55916: LD_INT 2
55918: PUSH
55919: LD_INT 3
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: PUSH
55926: LD_INT 2
55928: PUSH
55929: LD_INT 2
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: PUSH
55936: LD_INT 4
55938: PUSH
55939: LD_INT 2
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 2
55948: PUSH
55949: LD_INT 4
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 0
55958: PUSH
55959: LD_INT 4
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: PUSH
55966: LD_INT 0
55968: PUSH
55969: LD_INT 3
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: PUSH
55976: LD_INT 1
55978: PUSH
55979: LD_INT 4
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: PUSH
55986: LD_INT 1
55988: PUSH
55989: LD_INT 5
55991: PUSH
55992: EMPTY
55993: LIST
55994: LIST
55995: PUSH
55996: LD_INT 0
55998: PUSH
55999: LD_INT 5
56001: PUSH
56002: EMPTY
56003: LIST
56004: LIST
56005: PUSH
56006: LD_INT 1
56008: NEG
56009: PUSH
56010: LD_INT 4
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: PUSH
56017: LD_INT 1
56019: NEG
56020: PUSH
56021: LD_INT 3
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: LD_INT 2
56030: PUSH
56031: LD_INT 5
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: LD_INT 2
56040: NEG
56041: PUSH
56042: LD_INT 3
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: LIST
56053: LIST
56054: LIST
56055: LIST
56056: LIST
56057: LIST
56058: LIST
56059: LIST
56060: LIST
56061: LIST
56062: LIST
56063: LIST
56064: LIST
56065: LIST
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: LIST
56077: LIST
56078: LIST
56079: LIST
56080: LIST
56081: LIST
56082: LIST
56083: LIST
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: LIST
56090: LIST
56091: LIST
56092: LIST
56093: LIST
56094: LIST
56095: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
56096: LD_ADDR_VAR 0 34
56100: PUSH
56101: LD_INT 0
56103: PUSH
56104: LD_INT 4
56106: NEG
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: PUSH
56112: LD_INT 0
56114: PUSH
56115: LD_INT 5
56117: NEG
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: LD_INT 1
56125: PUSH
56126: LD_INT 4
56128: NEG
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: PUSH
56134: LD_INT 1
56136: PUSH
56137: LD_INT 3
56139: NEG
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: PUSH
56145: LD_INT 0
56147: PUSH
56148: LD_INT 3
56150: NEG
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: PUSH
56156: LD_INT 1
56158: NEG
56159: PUSH
56160: LD_INT 4
56162: NEG
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PUSH
56168: LD_INT 1
56170: NEG
56171: PUSH
56172: LD_INT 5
56174: NEG
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: PUSH
56180: LD_INT 2
56182: PUSH
56183: LD_INT 3
56185: NEG
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: LD_INT 2
56193: NEG
56194: PUSH
56195: LD_INT 5
56197: NEG
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: PUSH
56203: LD_INT 3
56205: PUSH
56206: LD_INT 0
56208: PUSH
56209: EMPTY
56210: LIST
56211: LIST
56212: PUSH
56213: LD_INT 3
56215: PUSH
56216: LD_INT 1
56218: NEG
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: PUSH
56224: LD_INT 4
56226: PUSH
56227: LD_INT 0
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PUSH
56234: LD_INT 4
56236: PUSH
56237: LD_INT 1
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 3
56246: PUSH
56247: LD_INT 1
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 2
56256: PUSH
56257: LD_INT 0
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: LD_INT 2
56266: PUSH
56267: LD_INT 1
56269: NEG
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: LD_INT 2
56277: PUSH
56278: LD_INT 2
56280: NEG
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: PUSH
56286: LD_INT 4
56288: PUSH
56289: LD_INT 2
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: PUSH
56296: LD_INT 4
56298: PUSH
56299: LD_INT 4
56301: PUSH
56302: EMPTY
56303: LIST
56304: LIST
56305: PUSH
56306: LD_INT 4
56308: PUSH
56309: LD_INT 3
56311: PUSH
56312: EMPTY
56313: LIST
56314: LIST
56315: PUSH
56316: LD_INT 5
56318: PUSH
56319: LD_INT 4
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: PUSH
56326: LD_INT 5
56328: PUSH
56329: LD_INT 5
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: PUSH
56336: LD_INT 4
56338: PUSH
56339: LD_INT 5
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: LD_INT 3
56348: PUSH
56349: LD_INT 4
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: PUSH
56356: LD_INT 3
56358: PUSH
56359: LD_INT 3
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: LD_INT 5
56368: PUSH
56369: LD_INT 3
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: LD_INT 3
56378: PUSH
56379: LD_INT 5
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: PUSH
56386: LD_INT 0
56388: PUSH
56389: LD_INT 3
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: PUSH
56396: LD_INT 0
56398: PUSH
56399: LD_INT 2
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: PUSH
56406: LD_INT 1
56408: PUSH
56409: LD_INT 3
56411: PUSH
56412: EMPTY
56413: LIST
56414: LIST
56415: PUSH
56416: LD_INT 1
56418: PUSH
56419: LD_INT 4
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: PUSH
56426: LD_INT 0
56428: PUSH
56429: LD_INT 4
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: PUSH
56436: LD_INT 1
56438: NEG
56439: PUSH
56440: LD_INT 3
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: PUSH
56447: LD_INT 1
56449: NEG
56450: PUSH
56451: LD_INT 2
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: PUSH
56458: LD_INT 2
56460: PUSH
56461: LD_INT 4
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: PUSH
56468: LD_INT 2
56470: NEG
56471: PUSH
56472: LD_INT 2
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PUSH
56479: LD_INT 4
56481: NEG
56482: PUSH
56483: LD_INT 0
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: PUSH
56490: LD_INT 4
56492: NEG
56493: PUSH
56494: LD_INT 1
56496: NEG
56497: PUSH
56498: EMPTY
56499: LIST
56500: LIST
56501: PUSH
56502: LD_INT 3
56504: NEG
56505: PUSH
56506: LD_INT 0
56508: PUSH
56509: EMPTY
56510: LIST
56511: LIST
56512: PUSH
56513: LD_INT 3
56515: NEG
56516: PUSH
56517: LD_INT 1
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: PUSH
56524: LD_INT 4
56526: NEG
56527: PUSH
56528: LD_INT 1
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: LD_INT 5
56537: NEG
56538: PUSH
56539: LD_INT 0
56541: PUSH
56542: EMPTY
56543: LIST
56544: LIST
56545: PUSH
56546: LD_INT 5
56548: NEG
56549: PUSH
56550: LD_INT 1
56552: NEG
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: PUSH
56558: LD_INT 5
56560: NEG
56561: PUSH
56562: LD_INT 2
56564: NEG
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: PUSH
56570: LD_INT 3
56572: NEG
56573: PUSH
56574: LD_INT 2
56576: PUSH
56577: EMPTY
56578: LIST
56579: LIST
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: LIST
56585: LIST
56586: LIST
56587: LIST
56588: LIST
56589: LIST
56590: LIST
56591: LIST
56592: LIST
56593: LIST
56594: LIST
56595: LIST
56596: LIST
56597: LIST
56598: LIST
56599: LIST
56600: LIST
56601: LIST
56602: LIST
56603: LIST
56604: LIST
56605: LIST
56606: LIST
56607: LIST
56608: LIST
56609: LIST
56610: LIST
56611: LIST
56612: LIST
56613: LIST
56614: LIST
56615: LIST
56616: LIST
56617: LIST
56618: LIST
56619: LIST
56620: LIST
56621: LIST
56622: LIST
56623: LIST
56624: LIST
56625: LIST
56626: LIST
56627: ST_TO_ADDR
// end ; end ;
56628: GO 56631
56630: POP
// case btype of b_depot , b_warehouse :
56631: LD_VAR 0 1
56635: PUSH
56636: LD_INT 0
56638: DOUBLE
56639: EQUAL
56640: IFTRUE 56650
56642: LD_INT 1
56644: DOUBLE
56645: EQUAL
56646: IFTRUE 56650
56648: GO 56851
56650: POP
// case nation of nation_american :
56651: LD_VAR 0 5
56655: PUSH
56656: LD_INT 1
56658: DOUBLE
56659: EQUAL
56660: IFTRUE 56664
56662: GO 56720
56664: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
56665: LD_ADDR_VAR 0 9
56669: PUSH
56670: LD_VAR 0 11
56674: PUSH
56675: LD_VAR 0 12
56679: PUSH
56680: LD_VAR 0 13
56684: PUSH
56685: LD_VAR 0 14
56689: PUSH
56690: LD_VAR 0 15
56694: PUSH
56695: LD_VAR 0 16
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: LIST
56704: LIST
56705: LIST
56706: LIST
56707: PUSH
56708: LD_VAR 0 4
56712: PUSH
56713: LD_INT 1
56715: PLUS
56716: ARRAY
56717: ST_TO_ADDR
56718: GO 56849
56720: LD_INT 2
56722: DOUBLE
56723: EQUAL
56724: IFTRUE 56728
56726: GO 56784
56728: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
56729: LD_ADDR_VAR 0 9
56733: PUSH
56734: LD_VAR 0 17
56738: PUSH
56739: LD_VAR 0 18
56743: PUSH
56744: LD_VAR 0 19
56748: PUSH
56749: LD_VAR 0 20
56753: PUSH
56754: LD_VAR 0 21
56758: PUSH
56759: LD_VAR 0 22
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: LIST
56768: LIST
56769: LIST
56770: LIST
56771: PUSH
56772: LD_VAR 0 4
56776: PUSH
56777: LD_INT 1
56779: PLUS
56780: ARRAY
56781: ST_TO_ADDR
56782: GO 56849
56784: LD_INT 3
56786: DOUBLE
56787: EQUAL
56788: IFTRUE 56792
56790: GO 56848
56792: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
56793: LD_ADDR_VAR 0 9
56797: PUSH
56798: LD_VAR 0 23
56802: PUSH
56803: LD_VAR 0 24
56807: PUSH
56808: LD_VAR 0 25
56812: PUSH
56813: LD_VAR 0 26
56817: PUSH
56818: LD_VAR 0 27
56822: PUSH
56823: LD_VAR 0 28
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: LIST
56832: LIST
56833: LIST
56834: LIST
56835: PUSH
56836: LD_VAR 0 4
56840: PUSH
56841: LD_INT 1
56843: PLUS
56844: ARRAY
56845: ST_TO_ADDR
56846: GO 56849
56848: POP
56849: GO 57404
56851: LD_INT 2
56853: DOUBLE
56854: EQUAL
56855: IFTRUE 56865
56857: LD_INT 3
56859: DOUBLE
56860: EQUAL
56861: IFTRUE 56865
56863: GO 56921
56865: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
56866: LD_ADDR_VAR 0 9
56870: PUSH
56871: LD_VAR 0 29
56875: PUSH
56876: LD_VAR 0 30
56880: PUSH
56881: LD_VAR 0 31
56885: PUSH
56886: LD_VAR 0 32
56890: PUSH
56891: LD_VAR 0 33
56895: PUSH
56896: LD_VAR 0 34
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: LIST
56905: LIST
56906: LIST
56907: LIST
56908: PUSH
56909: LD_VAR 0 4
56913: PUSH
56914: LD_INT 1
56916: PLUS
56917: ARRAY
56918: ST_TO_ADDR
56919: GO 57404
56921: LD_INT 16
56923: DOUBLE
56924: EQUAL
56925: IFTRUE 56983
56927: LD_INT 17
56929: DOUBLE
56930: EQUAL
56931: IFTRUE 56983
56933: LD_INT 18
56935: DOUBLE
56936: EQUAL
56937: IFTRUE 56983
56939: LD_INT 19
56941: DOUBLE
56942: EQUAL
56943: IFTRUE 56983
56945: LD_INT 22
56947: DOUBLE
56948: EQUAL
56949: IFTRUE 56983
56951: LD_INT 20
56953: DOUBLE
56954: EQUAL
56955: IFTRUE 56983
56957: LD_INT 21
56959: DOUBLE
56960: EQUAL
56961: IFTRUE 56983
56963: LD_INT 23
56965: DOUBLE
56966: EQUAL
56967: IFTRUE 56983
56969: LD_INT 24
56971: DOUBLE
56972: EQUAL
56973: IFTRUE 56983
56975: LD_INT 25
56977: DOUBLE
56978: EQUAL
56979: IFTRUE 56983
56981: GO 57039
56983: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
56984: LD_ADDR_VAR 0 9
56988: PUSH
56989: LD_VAR 0 35
56993: PUSH
56994: LD_VAR 0 36
56998: PUSH
56999: LD_VAR 0 37
57003: PUSH
57004: LD_VAR 0 38
57008: PUSH
57009: LD_VAR 0 39
57013: PUSH
57014: LD_VAR 0 40
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: LIST
57023: LIST
57024: LIST
57025: LIST
57026: PUSH
57027: LD_VAR 0 4
57031: PUSH
57032: LD_INT 1
57034: PLUS
57035: ARRAY
57036: ST_TO_ADDR
57037: GO 57404
57039: LD_INT 6
57041: DOUBLE
57042: EQUAL
57043: IFTRUE 57095
57045: LD_INT 7
57047: DOUBLE
57048: EQUAL
57049: IFTRUE 57095
57051: LD_INT 8
57053: DOUBLE
57054: EQUAL
57055: IFTRUE 57095
57057: LD_INT 13
57059: DOUBLE
57060: EQUAL
57061: IFTRUE 57095
57063: LD_INT 12
57065: DOUBLE
57066: EQUAL
57067: IFTRUE 57095
57069: LD_INT 15
57071: DOUBLE
57072: EQUAL
57073: IFTRUE 57095
57075: LD_INT 11
57077: DOUBLE
57078: EQUAL
57079: IFTRUE 57095
57081: LD_INT 14
57083: DOUBLE
57084: EQUAL
57085: IFTRUE 57095
57087: LD_INT 10
57089: DOUBLE
57090: EQUAL
57091: IFTRUE 57095
57093: GO 57151
57095: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
57096: LD_ADDR_VAR 0 9
57100: PUSH
57101: LD_VAR 0 41
57105: PUSH
57106: LD_VAR 0 42
57110: PUSH
57111: LD_VAR 0 43
57115: PUSH
57116: LD_VAR 0 44
57120: PUSH
57121: LD_VAR 0 45
57125: PUSH
57126: LD_VAR 0 46
57130: PUSH
57131: EMPTY
57132: LIST
57133: LIST
57134: LIST
57135: LIST
57136: LIST
57137: LIST
57138: PUSH
57139: LD_VAR 0 4
57143: PUSH
57144: LD_INT 1
57146: PLUS
57147: ARRAY
57148: ST_TO_ADDR
57149: GO 57404
57151: LD_INT 36
57153: DOUBLE
57154: EQUAL
57155: IFTRUE 57159
57157: GO 57215
57159: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
57160: LD_ADDR_VAR 0 9
57164: PUSH
57165: LD_VAR 0 47
57169: PUSH
57170: LD_VAR 0 48
57174: PUSH
57175: LD_VAR 0 49
57179: PUSH
57180: LD_VAR 0 50
57184: PUSH
57185: LD_VAR 0 51
57189: PUSH
57190: LD_VAR 0 52
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: LIST
57199: LIST
57200: LIST
57201: LIST
57202: PUSH
57203: LD_VAR 0 4
57207: PUSH
57208: LD_INT 1
57210: PLUS
57211: ARRAY
57212: ST_TO_ADDR
57213: GO 57404
57215: LD_INT 4
57217: DOUBLE
57218: EQUAL
57219: IFTRUE 57241
57221: LD_INT 5
57223: DOUBLE
57224: EQUAL
57225: IFTRUE 57241
57227: LD_INT 34
57229: DOUBLE
57230: EQUAL
57231: IFTRUE 57241
57233: LD_INT 37
57235: DOUBLE
57236: EQUAL
57237: IFTRUE 57241
57239: GO 57297
57241: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
57242: LD_ADDR_VAR 0 9
57246: PUSH
57247: LD_VAR 0 53
57251: PUSH
57252: LD_VAR 0 54
57256: PUSH
57257: LD_VAR 0 55
57261: PUSH
57262: LD_VAR 0 56
57266: PUSH
57267: LD_VAR 0 57
57271: PUSH
57272: LD_VAR 0 58
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: LIST
57281: LIST
57282: LIST
57283: LIST
57284: PUSH
57285: LD_VAR 0 4
57289: PUSH
57290: LD_INT 1
57292: PLUS
57293: ARRAY
57294: ST_TO_ADDR
57295: GO 57404
57297: LD_INT 31
57299: DOUBLE
57300: EQUAL
57301: IFTRUE 57347
57303: LD_INT 32
57305: DOUBLE
57306: EQUAL
57307: IFTRUE 57347
57309: LD_INT 33
57311: DOUBLE
57312: EQUAL
57313: IFTRUE 57347
57315: LD_INT 27
57317: DOUBLE
57318: EQUAL
57319: IFTRUE 57347
57321: LD_INT 26
57323: DOUBLE
57324: EQUAL
57325: IFTRUE 57347
57327: LD_INT 28
57329: DOUBLE
57330: EQUAL
57331: IFTRUE 57347
57333: LD_INT 29
57335: DOUBLE
57336: EQUAL
57337: IFTRUE 57347
57339: LD_INT 30
57341: DOUBLE
57342: EQUAL
57343: IFTRUE 57347
57345: GO 57403
57347: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
57348: LD_ADDR_VAR 0 9
57352: PUSH
57353: LD_VAR 0 59
57357: PUSH
57358: LD_VAR 0 60
57362: PUSH
57363: LD_VAR 0 61
57367: PUSH
57368: LD_VAR 0 62
57372: PUSH
57373: LD_VAR 0 63
57377: PUSH
57378: LD_VAR 0 64
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: LIST
57387: LIST
57388: LIST
57389: LIST
57390: PUSH
57391: LD_VAR 0 4
57395: PUSH
57396: LD_INT 1
57398: PLUS
57399: ARRAY
57400: ST_TO_ADDR
57401: GO 57404
57403: POP
// temp_list2 = [ ] ;
57404: LD_ADDR_VAR 0 10
57408: PUSH
57409: EMPTY
57410: ST_TO_ADDR
// for i in temp_list do
57411: LD_ADDR_VAR 0 8
57415: PUSH
57416: LD_VAR 0 9
57420: PUSH
57421: FOR_IN
57422: IFFALSE 57474
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
57424: LD_ADDR_VAR 0 10
57428: PUSH
57429: LD_VAR 0 10
57433: PUSH
57434: LD_VAR 0 8
57438: PUSH
57439: LD_INT 1
57441: ARRAY
57442: PUSH
57443: LD_VAR 0 2
57447: PLUS
57448: PUSH
57449: LD_VAR 0 8
57453: PUSH
57454: LD_INT 2
57456: ARRAY
57457: PUSH
57458: LD_VAR 0 3
57462: PLUS
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: EMPTY
57469: LIST
57470: ADD
57471: ST_TO_ADDR
57472: GO 57421
57474: POP
57475: POP
// result = temp_list2 ;
57476: LD_ADDR_VAR 0 7
57480: PUSH
57481: LD_VAR 0 10
57485: ST_TO_ADDR
// end ;
57486: LD_VAR 0 7
57490: RET
// export function EnemyInRange ( unit , dist ) ; begin
57491: LD_INT 0
57493: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
57494: LD_ADDR_VAR 0 3
57498: PUSH
57499: LD_VAR 0 1
57503: PPUSH
57504: CALL_OW 255
57508: PPUSH
57509: LD_VAR 0 1
57513: PPUSH
57514: CALL_OW 250
57518: PPUSH
57519: LD_VAR 0 1
57523: PPUSH
57524: CALL_OW 251
57528: PPUSH
57529: LD_VAR 0 2
57533: PPUSH
57534: CALL 30887 0 4
57538: PUSH
57539: LD_INT 4
57541: ARRAY
57542: ST_TO_ADDR
// end ;
57543: LD_VAR 0 3
57547: RET
// export function PlayerSeeMe ( unit ) ; begin
57548: LD_INT 0
57550: PPUSH
// result := See ( your_side , unit ) ;
57551: LD_ADDR_VAR 0 2
57555: PUSH
57556: LD_OWVAR 2
57560: PPUSH
57561: LD_VAR 0 1
57565: PPUSH
57566: CALL_OW 292
57570: ST_TO_ADDR
// end ;
57571: LD_VAR 0 2
57575: RET
// export function ReverseDir ( unit ) ; begin
57576: LD_INT 0
57578: PPUSH
// if not unit then
57579: LD_VAR 0 1
57583: NOT
57584: IFFALSE 57588
// exit ;
57586: GO 57611
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
57588: LD_ADDR_VAR 0 2
57592: PUSH
57593: LD_VAR 0 1
57597: PPUSH
57598: CALL_OW 254
57602: PUSH
57603: LD_INT 3
57605: PLUS
57606: PUSH
57607: LD_INT 6
57609: MOD
57610: ST_TO_ADDR
// end ;
57611: LD_VAR 0 2
57615: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
57616: LD_INT 0
57618: PPUSH
57619: PPUSH
57620: PPUSH
57621: PPUSH
57622: PPUSH
// if not hexes then
57623: LD_VAR 0 2
57627: NOT
57628: IFFALSE 57632
// exit ;
57630: GO 57780
// dist := 9999 ;
57632: LD_ADDR_VAR 0 5
57636: PUSH
57637: LD_INT 9999
57639: ST_TO_ADDR
// for i = 1 to hexes do
57640: LD_ADDR_VAR 0 4
57644: PUSH
57645: DOUBLE
57646: LD_INT 1
57648: DEC
57649: ST_TO_ADDR
57650: LD_VAR 0 2
57654: PUSH
57655: FOR_TO
57656: IFFALSE 57768
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
57658: LD_VAR 0 1
57662: PPUSH
57663: LD_VAR 0 2
57667: PUSH
57668: LD_VAR 0 4
57672: ARRAY
57673: PUSH
57674: LD_INT 1
57676: ARRAY
57677: PPUSH
57678: LD_VAR 0 2
57682: PUSH
57683: LD_VAR 0 4
57687: ARRAY
57688: PUSH
57689: LD_INT 2
57691: ARRAY
57692: PPUSH
57693: CALL_OW 297
57697: PUSH
57698: LD_VAR 0 5
57702: LESS
57703: IFFALSE 57766
// begin hex := hexes [ i ] ;
57705: LD_ADDR_VAR 0 7
57709: PUSH
57710: LD_VAR 0 2
57714: PUSH
57715: LD_VAR 0 4
57719: ARRAY
57720: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57721: LD_ADDR_VAR 0 5
57725: PUSH
57726: LD_VAR 0 1
57730: PPUSH
57731: LD_VAR 0 2
57735: PUSH
57736: LD_VAR 0 4
57740: ARRAY
57741: PUSH
57742: LD_INT 1
57744: ARRAY
57745: PPUSH
57746: LD_VAR 0 2
57750: PUSH
57751: LD_VAR 0 4
57755: ARRAY
57756: PUSH
57757: LD_INT 2
57759: ARRAY
57760: PPUSH
57761: CALL_OW 297
57765: ST_TO_ADDR
// end ; end ;
57766: GO 57655
57768: POP
57769: POP
// result := hex ;
57770: LD_ADDR_VAR 0 3
57774: PUSH
57775: LD_VAR 0 7
57779: ST_TO_ADDR
// end ;
57780: LD_VAR 0 3
57784: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
57785: LD_INT 0
57787: PPUSH
57788: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
57789: LD_VAR 0 1
57793: NOT
57794: PUSH
57795: LD_VAR 0 1
57799: PUSH
57800: LD_INT 21
57802: PUSH
57803: LD_INT 2
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: PUSH
57810: LD_INT 23
57812: PUSH
57813: LD_INT 2
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: PPUSH
57824: CALL_OW 69
57828: IN
57829: NOT
57830: OR
57831: IFFALSE 57835
// exit ;
57833: GO 57882
// for i = 1 to 3 do
57835: LD_ADDR_VAR 0 3
57839: PUSH
57840: DOUBLE
57841: LD_INT 1
57843: DEC
57844: ST_TO_ADDR
57845: LD_INT 3
57847: PUSH
57848: FOR_TO
57849: IFFALSE 57880
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
57851: LD_VAR 0 1
57855: PPUSH
57856: CALL_OW 250
57860: PPUSH
57861: LD_VAR 0 1
57865: PPUSH
57866: CALL_OW 251
57870: PPUSH
57871: LD_INT 1
57873: PPUSH
57874: CALL_OW 453
57878: GO 57848
57880: POP
57881: POP
// end ;
57882: LD_VAR 0 2
57886: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
57887: LD_INT 0
57889: PPUSH
57890: PPUSH
57891: PPUSH
57892: PPUSH
57893: PPUSH
57894: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
57895: LD_VAR 0 1
57899: NOT
57900: PUSH
57901: LD_VAR 0 2
57905: NOT
57906: OR
57907: PUSH
57908: LD_VAR 0 1
57912: PPUSH
57913: CALL_OW 314
57917: OR
57918: IFFALSE 57922
// exit ;
57920: GO 58363
// x := GetX ( enemy_unit ) ;
57922: LD_ADDR_VAR 0 7
57926: PUSH
57927: LD_VAR 0 2
57931: PPUSH
57932: CALL_OW 250
57936: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
57937: LD_ADDR_VAR 0 8
57941: PUSH
57942: LD_VAR 0 2
57946: PPUSH
57947: CALL_OW 251
57951: ST_TO_ADDR
// if not x or not y then
57952: LD_VAR 0 7
57956: NOT
57957: PUSH
57958: LD_VAR 0 8
57962: NOT
57963: OR
57964: IFFALSE 57968
// exit ;
57966: GO 58363
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
57968: LD_ADDR_VAR 0 6
57972: PUSH
57973: LD_VAR 0 7
57977: PPUSH
57978: LD_INT 0
57980: PPUSH
57981: LD_INT 4
57983: PPUSH
57984: CALL_OW 272
57988: PUSH
57989: LD_VAR 0 8
57993: PPUSH
57994: LD_INT 0
57996: PPUSH
57997: LD_INT 4
57999: PPUSH
58000: CALL_OW 273
58004: PUSH
58005: EMPTY
58006: LIST
58007: LIST
58008: PUSH
58009: LD_VAR 0 7
58013: PPUSH
58014: LD_INT 1
58016: PPUSH
58017: LD_INT 4
58019: PPUSH
58020: CALL_OW 272
58024: PUSH
58025: LD_VAR 0 8
58029: PPUSH
58030: LD_INT 1
58032: PPUSH
58033: LD_INT 4
58035: PPUSH
58036: CALL_OW 273
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: PUSH
58045: LD_VAR 0 7
58049: PPUSH
58050: LD_INT 2
58052: PPUSH
58053: LD_INT 4
58055: PPUSH
58056: CALL_OW 272
58060: PUSH
58061: LD_VAR 0 8
58065: PPUSH
58066: LD_INT 2
58068: PPUSH
58069: LD_INT 4
58071: PPUSH
58072: CALL_OW 273
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: PUSH
58081: LD_VAR 0 7
58085: PPUSH
58086: LD_INT 3
58088: PPUSH
58089: LD_INT 4
58091: PPUSH
58092: CALL_OW 272
58096: PUSH
58097: LD_VAR 0 8
58101: PPUSH
58102: LD_INT 3
58104: PPUSH
58105: LD_INT 4
58107: PPUSH
58108: CALL_OW 273
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: LD_VAR 0 7
58121: PPUSH
58122: LD_INT 4
58124: PPUSH
58125: LD_INT 4
58127: PPUSH
58128: CALL_OW 272
58132: PUSH
58133: LD_VAR 0 8
58137: PPUSH
58138: LD_INT 4
58140: PPUSH
58141: LD_INT 4
58143: PPUSH
58144: CALL_OW 273
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: PUSH
58153: LD_VAR 0 7
58157: PPUSH
58158: LD_INT 5
58160: PPUSH
58161: LD_INT 4
58163: PPUSH
58164: CALL_OW 272
58168: PUSH
58169: LD_VAR 0 8
58173: PPUSH
58174: LD_INT 5
58176: PPUSH
58177: LD_INT 4
58179: PPUSH
58180: CALL_OW 273
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: LIST
58193: LIST
58194: LIST
58195: LIST
58196: ST_TO_ADDR
// for i = tmp downto 1 do
58197: LD_ADDR_VAR 0 4
58201: PUSH
58202: DOUBLE
58203: LD_VAR 0 6
58207: INC
58208: ST_TO_ADDR
58209: LD_INT 1
58211: PUSH
58212: FOR_DOWNTO
58213: IFFALSE 58314
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
58215: LD_VAR 0 6
58219: PUSH
58220: LD_VAR 0 4
58224: ARRAY
58225: PUSH
58226: LD_INT 1
58228: ARRAY
58229: PPUSH
58230: LD_VAR 0 6
58234: PUSH
58235: LD_VAR 0 4
58239: ARRAY
58240: PUSH
58241: LD_INT 2
58243: ARRAY
58244: PPUSH
58245: CALL_OW 488
58249: NOT
58250: PUSH
58251: LD_VAR 0 6
58255: PUSH
58256: LD_VAR 0 4
58260: ARRAY
58261: PUSH
58262: LD_INT 1
58264: ARRAY
58265: PPUSH
58266: LD_VAR 0 6
58270: PUSH
58271: LD_VAR 0 4
58275: ARRAY
58276: PUSH
58277: LD_INT 2
58279: ARRAY
58280: PPUSH
58281: CALL_OW 428
58285: PUSH
58286: LD_INT 0
58288: NONEQUAL
58289: OR
58290: IFFALSE 58312
// tmp := Delete ( tmp , i ) ;
58292: LD_ADDR_VAR 0 6
58296: PUSH
58297: LD_VAR 0 6
58301: PPUSH
58302: LD_VAR 0 4
58306: PPUSH
58307: CALL_OW 3
58311: ST_TO_ADDR
58312: GO 58212
58314: POP
58315: POP
// j := GetClosestHex ( unit , tmp ) ;
58316: LD_ADDR_VAR 0 5
58320: PUSH
58321: LD_VAR 0 1
58325: PPUSH
58326: LD_VAR 0 6
58330: PPUSH
58331: CALL 57616 0 2
58335: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
58336: LD_VAR 0 1
58340: PPUSH
58341: LD_VAR 0 5
58345: PUSH
58346: LD_INT 1
58348: ARRAY
58349: PPUSH
58350: LD_VAR 0 5
58354: PUSH
58355: LD_INT 2
58357: ARRAY
58358: PPUSH
58359: CALL_OW 111
// end ;
58363: LD_VAR 0 3
58367: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
58368: LD_INT 0
58370: PPUSH
58371: PPUSH
58372: PPUSH
// uc_side = 0 ;
58373: LD_ADDR_OWVAR 20
58377: PUSH
58378: LD_INT 0
58380: ST_TO_ADDR
// uc_nation = 0 ;
58381: LD_ADDR_OWVAR 21
58385: PUSH
58386: LD_INT 0
58388: ST_TO_ADDR
// InitHc_All ( ) ;
58389: CALL_OW 584
// InitVc ;
58393: CALL_OW 20
// if mastodonts then
58397: LD_VAR 0 6
58401: IFFALSE 58468
// for i = 1 to mastodonts do
58403: LD_ADDR_VAR 0 11
58407: PUSH
58408: DOUBLE
58409: LD_INT 1
58411: DEC
58412: ST_TO_ADDR
58413: LD_VAR 0 6
58417: PUSH
58418: FOR_TO
58419: IFFALSE 58466
// begin vc_chassis := 31 ;
58421: LD_ADDR_OWVAR 37
58425: PUSH
58426: LD_INT 31
58428: ST_TO_ADDR
// vc_control := control_rider ;
58429: LD_ADDR_OWVAR 38
58433: PUSH
58434: LD_INT 4
58436: ST_TO_ADDR
// animal := CreateVehicle ;
58437: LD_ADDR_VAR 0 12
58441: PUSH
58442: CALL_OW 45
58446: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58447: LD_VAR 0 12
58451: PPUSH
58452: LD_VAR 0 8
58456: PPUSH
58457: LD_INT 0
58459: PPUSH
58460: CALL 60603 0 3
// end ;
58464: GO 58418
58466: POP
58467: POP
// if horses then
58468: LD_VAR 0 5
58472: IFFALSE 58539
// for i = 1 to horses do
58474: LD_ADDR_VAR 0 11
58478: PUSH
58479: DOUBLE
58480: LD_INT 1
58482: DEC
58483: ST_TO_ADDR
58484: LD_VAR 0 5
58488: PUSH
58489: FOR_TO
58490: IFFALSE 58537
// begin hc_class := 21 ;
58492: LD_ADDR_OWVAR 28
58496: PUSH
58497: LD_INT 21
58499: ST_TO_ADDR
// hc_gallery :=  ;
58500: LD_ADDR_OWVAR 33
58504: PUSH
58505: LD_STRING 
58507: ST_TO_ADDR
// animal := CreateHuman ;
58508: LD_ADDR_VAR 0 12
58512: PUSH
58513: CALL_OW 44
58517: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58518: LD_VAR 0 12
58522: PPUSH
58523: LD_VAR 0 8
58527: PPUSH
58528: LD_INT 0
58530: PPUSH
58531: CALL 60603 0 3
// end ;
58535: GO 58489
58537: POP
58538: POP
// if birds then
58539: LD_VAR 0 1
58543: IFFALSE 58610
// for i = 1 to birds do
58545: LD_ADDR_VAR 0 11
58549: PUSH
58550: DOUBLE
58551: LD_INT 1
58553: DEC
58554: ST_TO_ADDR
58555: LD_VAR 0 1
58559: PUSH
58560: FOR_TO
58561: IFFALSE 58608
// begin hc_class = 18 ;
58563: LD_ADDR_OWVAR 28
58567: PUSH
58568: LD_INT 18
58570: ST_TO_ADDR
// hc_gallery =  ;
58571: LD_ADDR_OWVAR 33
58575: PUSH
58576: LD_STRING 
58578: ST_TO_ADDR
// animal := CreateHuman ;
58579: LD_ADDR_VAR 0 12
58583: PUSH
58584: CALL_OW 44
58588: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58589: LD_VAR 0 12
58593: PPUSH
58594: LD_VAR 0 8
58598: PPUSH
58599: LD_INT 0
58601: PPUSH
58602: CALL 60603 0 3
// end ;
58606: GO 58560
58608: POP
58609: POP
// if tigers then
58610: LD_VAR 0 2
58614: IFFALSE 58698
// for i = 1 to tigers do
58616: LD_ADDR_VAR 0 11
58620: PUSH
58621: DOUBLE
58622: LD_INT 1
58624: DEC
58625: ST_TO_ADDR
58626: LD_VAR 0 2
58630: PUSH
58631: FOR_TO
58632: IFFALSE 58696
// begin hc_class = class_tiger ;
58634: LD_ADDR_OWVAR 28
58638: PUSH
58639: LD_INT 14
58641: ST_TO_ADDR
// hc_gallery =  ;
58642: LD_ADDR_OWVAR 33
58646: PUSH
58647: LD_STRING 
58649: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
58650: LD_ADDR_OWVAR 35
58654: PUSH
58655: LD_INT 7
58657: NEG
58658: PPUSH
58659: LD_INT 7
58661: PPUSH
58662: CALL_OW 12
58666: ST_TO_ADDR
// animal := CreateHuman ;
58667: LD_ADDR_VAR 0 12
58671: PUSH
58672: CALL_OW 44
58676: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58677: LD_VAR 0 12
58681: PPUSH
58682: LD_VAR 0 8
58686: PPUSH
58687: LD_INT 0
58689: PPUSH
58690: CALL 60603 0 3
// end ;
58694: GO 58631
58696: POP
58697: POP
// if apemans then
58698: LD_VAR 0 3
58702: IFFALSE 58825
// for i = 1 to apemans do
58704: LD_ADDR_VAR 0 11
58708: PUSH
58709: DOUBLE
58710: LD_INT 1
58712: DEC
58713: ST_TO_ADDR
58714: LD_VAR 0 3
58718: PUSH
58719: FOR_TO
58720: IFFALSE 58823
// begin hc_class = class_apeman ;
58722: LD_ADDR_OWVAR 28
58726: PUSH
58727: LD_INT 12
58729: ST_TO_ADDR
// hc_gallery =  ;
58730: LD_ADDR_OWVAR 33
58734: PUSH
58735: LD_STRING 
58737: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
58738: LD_ADDR_OWVAR 35
58742: PUSH
58743: LD_INT 2
58745: NEG
58746: PPUSH
58747: LD_INT 2
58749: PPUSH
58750: CALL_OW 12
58754: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
58755: LD_ADDR_OWVAR 31
58759: PUSH
58760: LD_INT 1
58762: PPUSH
58763: LD_INT 3
58765: PPUSH
58766: CALL_OW 12
58770: PUSH
58771: LD_INT 1
58773: PPUSH
58774: LD_INT 3
58776: PPUSH
58777: CALL_OW 12
58781: PUSH
58782: LD_INT 0
58784: PUSH
58785: LD_INT 0
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: LIST
58792: LIST
58793: ST_TO_ADDR
// animal := CreateHuman ;
58794: LD_ADDR_VAR 0 12
58798: PUSH
58799: CALL_OW 44
58803: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58804: LD_VAR 0 12
58808: PPUSH
58809: LD_VAR 0 8
58813: PPUSH
58814: LD_INT 0
58816: PPUSH
58817: CALL 60603 0 3
// end ;
58821: GO 58719
58823: POP
58824: POP
// if enchidnas then
58825: LD_VAR 0 4
58829: IFFALSE 58896
// for i = 1 to enchidnas do
58831: LD_ADDR_VAR 0 11
58835: PUSH
58836: DOUBLE
58837: LD_INT 1
58839: DEC
58840: ST_TO_ADDR
58841: LD_VAR 0 4
58845: PUSH
58846: FOR_TO
58847: IFFALSE 58894
// begin hc_class = 13 ;
58849: LD_ADDR_OWVAR 28
58853: PUSH
58854: LD_INT 13
58856: ST_TO_ADDR
// hc_gallery =  ;
58857: LD_ADDR_OWVAR 33
58861: PUSH
58862: LD_STRING 
58864: ST_TO_ADDR
// animal := CreateHuman ;
58865: LD_ADDR_VAR 0 12
58869: PUSH
58870: CALL_OW 44
58874: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58875: LD_VAR 0 12
58879: PPUSH
58880: LD_VAR 0 8
58884: PPUSH
58885: LD_INT 0
58887: PPUSH
58888: CALL 60603 0 3
// end ;
58892: GO 58846
58894: POP
58895: POP
// if fishes then
58896: LD_VAR 0 7
58900: IFFALSE 58967
// for i = 1 to fishes do
58902: LD_ADDR_VAR 0 11
58906: PUSH
58907: DOUBLE
58908: LD_INT 1
58910: DEC
58911: ST_TO_ADDR
58912: LD_VAR 0 7
58916: PUSH
58917: FOR_TO
58918: IFFALSE 58965
// begin hc_class = 20 ;
58920: LD_ADDR_OWVAR 28
58924: PUSH
58925: LD_INT 20
58927: ST_TO_ADDR
// hc_gallery =  ;
58928: LD_ADDR_OWVAR 33
58932: PUSH
58933: LD_STRING 
58935: ST_TO_ADDR
// animal := CreateHuman ;
58936: LD_ADDR_VAR 0 12
58940: PUSH
58941: CALL_OW 44
58945: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
58946: LD_VAR 0 12
58950: PPUSH
58951: LD_VAR 0 9
58955: PPUSH
58956: LD_INT 0
58958: PPUSH
58959: CALL 60603 0 3
// end ;
58963: GO 58917
58965: POP
58966: POP
// end ;
58967: LD_VAR 0 10
58971: RET
// export function WantHeal ( sci , unit ) ; begin
58972: LD_INT 0
58974: PPUSH
// if GetTaskList ( sci ) > 0 then
58975: LD_VAR 0 1
58979: PPUSH
58980: CALL_OW 437
58984: PUSH
58985: LD_INT 0
58987: GREATER
58988: IFFALSE 59058
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
58990: LD_VAR 0 1
58994: PPUSH
58995: CALL_OW 437
58999: PUSH
59000: LD_INT 1
59002: ARRAY
59003: PUSH
59004: LD_INT 1
59006: ARRAY
59007: PUSH
59008: LD_STRING l
59010: EQUAL
59011: PUSH
59012: LD_VAR 0 1
59016: PPUSH
59017: CALL_OW 437
59021: PUSH
59022: LD_INT 1
59024: ARRAY
59025: PUSH
59026: LD_INT 4
59028: ARRAY
59029: PUSH
59030: LD_VAR 0 2
59034: EQUAL
59035: AND
59036: IFFALSE 59048
// result := true else
59038: LD_ADDR_VAR 0 3
59042: PUSH
59043: LD_INT 1
59045: ST_TO_ADDR
59046: GO 59056
// result := false ;
59048: LD_ADDR_VAR 0 3
59052: PUSH
59053: LD_INT 0
59055: ST_TO_ADDR
// end else
59056: GO 59066
// result := false ;
59058: LD_ADDR_VAR 0 3
59062: PUSH
59063: LD_INT 0
59065: ST_TO_ADDR
// end ;
59066: LD_VAR 0 3
59070: RET
// export function HealTarget ( sci ) ; begin
59071: LD_INT 0
59073: PPUSH
// if not sci then
59074: LD_VAR 0 1
59078: NOT
59079: IFFALSE 59083
// exit ;
59081: GO 59148
// result := 0 ;
59083: LD_ADDR_VAR 0 2
59087: PUSH
59088: LD_INT 0
59090: ST_TO_ADDR
// if GetTaskList ( sci ) then
59091: LD_VAR 0 1
59095: PPUSH
59096: CALL_OW 437
59100: IFFALSE 59148
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
59102: LD_VAR 0 1
59106: PPUSH
59107: CALL_OW 437
59111: PUSH
59112: LD_INT 1
59114: ARRAY
59115: PUSH
59116: LD_INT 1
59118: ARRAY
59119: PUSH
59120: LD_STRING l
59122: EQUAL
59123: IFFALSE 59148
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
59125: LD_ADDR_VAR 0 2
59129: PUSH
59130: LD_VAR 0 1
59134: PPUSH
59135: CALL_OW 437
59139: PUSH
59140: LD_INT 1
59142: ARRAY
59143: PUSH
59144: LD_INT 4
59146: ARRAY
59147: ST_TO_ADDR
// end ;
59148: LD_VAR 0 2
59152: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
59153: LD_INT 0
59155: PPUSH
59156: PPUSH
59157: PPUSH
59158: PPUSH
// if not base_units then
59159: LD_VAR 0 1
59163: NOT
59164: IFFALSE 59168
// exit ;
59166: GO 59255
// result := false ;
59168: LD_ADDR_VAR 0 2
59172: PUSH
59173: LD_INT 0
59175: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
59176: LD_ADDR_VAR 0 5
59180: PUSH
59181: LD_VAR 0 1
59185: PPUSH
59186: LD_INT 21
59188: PUSH
59189: LD_INT 3
59191: PUSH
59192: EMPTY
59193: LIST
59194: LIST
59195: PPUSH
59196: CALL_OW 72
59200: ST_TO_ADDR
// if not tmp then
59201: LD_VAR 0 5
59205: NOT
59206: IFFALSE 59210
// exit ;
59208: GO 59255
// for i in tmp do
59210: LD_ADDR_VAR 0 3
59214: PUSH
59215: LD_VAR 0 5
59219: PUSH
59220: FOR_IN
59221: IFFALSE 59253
// begin result := EnemyInRange ( i , 22 ) ;
59223: LD_ADDR_VAR 0 2
59227: PUSH
59228: LD_VAR 0 3
59232: PPUSH
59233: LD_INT 22
59235: PPUSH
59236: CALL 57491 0 2
59240: ST_TO_ADDR
// if result then
59241: LD_VAR 0 2
59245: IFFALSE 59251
// exit ;
59247: POP
59248: POP
59249: GO 59255
// end ;
59251: GO 59220
59253: POP
59254: POP
// end ;
59255: LD_VAR 0 2
59259: RET
// export function FilterByTag ( units , tag ) ; begin
59260: LD_INT 0
59262: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
59263: LD_ADDR_VAR 0 3
59267: PUSH
59268: LD_VAR 0 1
59272: PPUSH
59273: LD_INT 120
59275: PUSH
59276: LD_VAR 0 2
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: PPUSH
59285: CALL_OW 72
59289: ST_TO_ADDR
// end ;
59290: LD_VAR 0 3
59294: RET
// export function IsDriver ( un ) ; begin
59295: LD_INT 0
59297: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
59298: LD_ADDR_VAR 0 2
59302: PUSH
59303: LD_VAR 0 1
59307: PUSH
59308: LD_INT 55
59310: PUSH
59311: EMPTY
59312: LIST
59313: PPUSH
59314: CALL_OW 69
59318: IN
59319: ST_TO_ADDR
// end ;
59320: LD_VAR 0 2
59324: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
59325: LD_INT 0
59327: PPUSH
59328: PPUSH
// list := [ ] ;
59329: LD_ADDR_VAR 0 5
59333: PUSH
59334: EMPTY
59335: ST_TO_ADDR
// case d of 0 :
59336: LD_VAR 0 3
59340: PUSH
59341: LD_INT 0
59343: DOUBLE
59344: EQUAL
59345: IFTRUE 59349
59347: GO 59482
59349: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
59350: LD_ADDR_VAR 0 5
59354: PUSH
59355: LD_VAR 0 1
59359: PUSH
59360: LD_INT 4
59362: MINUS
59363: PUSH
59364: LD_VAR 0 2
59368: PUSH
59369: LD_INT 4
59371: MINUS
59372: PUSH
59373: LD_INT 2
59375: PUSH
59376: EMPTY
59377: LIST
59378: LIST
59379: LIST
59380: PUSH
59381: LD_VAR 0 1
59385: PUSH
59386: LD_INT 3
59388: MINUS
59389: PUSH
59390: LD_VAR 0 2
59394: PUSH
59395: LD_INT 1
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: LIST
59402: PUSH
59403: LD_VAR 0 1
59407: PUSH
59408: LD_INT 4
59410: PLUS
59411: PUSH
59412: LD_VAR 0 2
59416: PUSH
59417: LD_INT 4
59419: PUSH
59420: EMPTY
59421: LIST
59422: LIST
59423: LIST
59424: PUSH
59425: LD_VAR 0 1
59429: PUSH
59430: LD_INT 3
59432: PLUS
59433: PUSH
59434: LD_VAR 0 2
59438: PUSH
59439: LD_INT 3
59441: PLUS
59442: PUSH
59443: LD_INT 5
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: LIST
59450: PUSH
59451: LD_VAR 0 1
59455: PUSH
59456: LD_VAR 0 2
59460: PUSH
59461: LD_INT 4
59463: PLUS
59464: PUSH
59465: LD_INT 0
59467: PUSH
59468: EMPTY
59469: LIST
59470: LIST
59471: LIST
59472: PUSH
59473: EMPTY
59474: LIST
59475: LIST
59476: LIST
59477: LIST
59478: LIST
59479: ST_TO_ADDR
// end ; 1 :
59480: GO 60180
59482: LD_INT 1
59484: DOUBLE
59485: EQUAL
59486: IFTRUE 59490
59488: GO 59623
59490: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
59491: LD_ADDR_VAR 0 5
59495: PUSH
59496: LD_VAR 0 1
59500: PUSH
59501: LD_VAR 0 2
59505: PUSH
59506: LD_INT 4
59508: MINUS
59509: PUSH
59510: LD_INT 3
59512: PUSH
59513: EMPTY
59514: LIST
59515: LIST
59516: LIST
59517: PUSH
59518: LD_VAR 0 1
59522: PUSH
59523: LD_INT 3
59525: MINUS
59526: PUSH
59527: LD_VAR 0 2
59531: PUSH
59532: LD_INT 3
59534: MINUS
59535: PUSH
59536: LD_INT 2
59538: PUSH
59539: EMPTY
59540: LIST
59541: LIST
59542: LIST
59543: PUSH
59544: LD_VAR 0 1
59548: PUSH
59549: LD_INT 4
59551: MINUS
59552: PUSH
59553: LD_VAR 0 2
59557: PUSH
59558: LD_INT 1
59560: PUSH
59561: EMPTY
59562: LIST
59563: LIST
59564: LIST
59565: PUSH
59566: LD_VAR 0 1
59570: PUSH
59571: LD_VAR 0 2
59575: PUSH
59576: LD_INT 3
59578: PLUS
59579: PUSH
59580: LD_INT 0
59582: PUSH
59583: EMPTY
59584: LIST
59585: LIST
59586: LIST
59587: PUSH
59588: LD_VAR 0 1
59592: PUSH
59593: LD_INT 4
59595: PLUS
59596: PUSH
59597: LD_VAR 0 2
59601: PUSH
59602: LD_INT 4
59604: PLUS
59605: PUSH
59606: LD_INT 5
59608: PUSH
59609: EMPTY
59610: LIST
59611: LIST
59612: LIST
59613: PUSH
59614: EMPTY
59615: LIST
59616: LIST
59617: LIST
59618: LIST
59619: LIST
59620: ST_TO_ADDR
// end ; 2 :
59621: GO 60180
59623: LD_INT 2
59625: DOUBLE
59626: EQUAL
59627: IFTRUE 59631
59629: GO 59760
59631: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
59632: LD_ADDR_VAR 0 5
59636: PUSH
59637: LD_VAR 0 1
59641: PUSH
59642: LD_VAR 0 2
59646: PUSH
59647: LD_INT 3
59649: MINUS
59650: PUSH
59651: LD_INT 3
59653: PUSH
59654: EMPTY
59655: LIST
59656: LIST
59657: LIST
59658: PUSH
59659: LD_VAR 0 1
59663: PUSH
59664: LD_INT 4
59666: PLUS
59667: PUSH
59668: LD_VAR 0 2
59672: PUSH
59673: LD_INT 4
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: LIST
59680: PUSH
59681: LD_VAR 0 1
59685: PUSH
59686: LD_VAR 0 2
59690: PUSH
59691: LD_INT 4
59693: PLUS
59694: PUSH
59695: LD_INT 0
59697: PUSH
59698: EMPTY
59699: LIST
59700: LIST
59701: LIST
59702: PUSH
59703: LD_VAR 0 1
59707: PUSH
59708: LD_INT 3
59710: MINUS
59711: PUSH
59712: LD_VAR 0 2
59716: PUSH
59717: LD_INT 1
59719: PUSH
59720: EMPTY
59721: LIST
59722: LIST
59723: LIST
59724: PUSH
59725: LD_VAR 0 1
59729: PUSH
59730: LD_INT 4
59732: MINUS
59733: PUSH
59734: LD_VAR 0 2
59738: PUSH
59739: LD_INT 4
59741: MINUS
59742: PUSH
59743: LD_INT 2
59745: PUSH
59746: EMPTY
59747: LIST
59748: LIST
59749: LIST
59750: PUSH
59751: EMPTY
59752: LIST
59753: LIST
59754: LIST
59755: LIST
59756: LIST
59757: ST_TO_ADDR
// end ; 3 :
59758: GO 60180
59760: LD_INT 3
59762: DOUBLE
59763: EQUAL
59764: IFTRUE 59768
59766: GO 59901
59768: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
59769: LD_ADDR_VAR 0 5
59773: PUSH
59774: LD_VAR 0 1
59778: PUSH
59779: LD_INT 3
59781: PLUS
59782: PUSH
59783: LD_VAR 0 2
59787: PUSH
59788: LD_INT 4
59790: PUSH
59791: EMPTY
59792: LIST
59793: LIST
59794: LIST
59795: PUSH
59796: LD_VAR 0 1
59800: PUSH
59801: LD_INT 4
59803: PLUS
59804: PUSH
59805: LD_VAR 0 2
59809: PUSH
59810: LD_INT 4
59812: PLUS
59813: PUSH
59814: LD_INT 5
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: LIST
59821: PUSH
59822: LD_VAR 0 1
59826: PUSH
59827: LD_INT 4
59829: MINUS
59830: PUSH
59831: LD_VAR 0 2
59835: PUSH
59836: LD_INT 1
59838: PUSH
59839: EMPTY
59840: LIST
59841: LIST
59842: LIST
59843: PUSH
59844: LD_VAR 0 1
59848: PUSH
59849: LD_VAR 0 2
59853: PUSH
59854: LD_INT 4
59856: MINUS
59857: PUSH
59858: LD_INT 3
59860: PUSH
59861: EMPTY
59862: LIST
59863: LIST
59864: LIST
59865: PUSH
59866: LD_VAR 0 1
59870: PUSH
59871: LD_INT 3
59873: MINUS
59874: PUSH
59875: LD_VAR 0 2
59879: PUSH
59880: LD_INT 3
59882: MINUS
59883: PUSH
59884: LD_INT 2
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: LIST
59891: PUSH
59892: EMPTY
59893: LIST
59894: LIST
59895: LIST
59896: LIST
59897: LIST
59898: ST_TO_ADDR
// end ; 4 :
59899: GO 60180
59901: LD_INT 4
59903: DOUBLE
59904: EQUAL
59905: IFTRUE 59909
59907: GO 60042
59909: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
59910: LD_ADDR_VAR 0 5
59914: PUSH
59915: LD_VAR 0 1
59919: PUSH
59920: LD_VAR 0 2
59924: PUSH
59925: LD_INT 4
59927: PLUS
59928: PUSH
59929: LD_INT 0
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: LIST
59936: PUSH
59937: LD_VAR 0 1
59941: PUSH
59942: LD_INT 3
59944: PLUS
59945: PUSH
59946: LD_VAR 0 2
59950: PUSH
59951: LD_INT 3
59953: PLUS
59954: PUSH
59955: LD_INT 5
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: LIST
59962: PUSH
59963: LD_VAR 0 1
59967: PUSH
59968: LD_INT 4
59970: PLUS
59971: PUSH
59972: LD_VAR 0 2
59976: PUSH
59977: LD_INT 4
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: LIST
59984: PUSH
59985: LD_VAR 0 1
59989: PUSH
59990: LD_VAR 0 2
59994: PUSH
59995: LD_INT 3
59997: MINUS
59998: PUSH
59999: LD_INT 3
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: LIST
60006: PUSH
60007: LD_VAR 0 1
60011: PUSH
60012: LD_INT 4
60014: MINUS
60015: PUSH
60016: LD_VAR 0 2
60020: PUSH
60021: LD_INT 4
60023: MINUS
60024: PUSH
60025: LD_INT 2
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: LIST
60032: PUSH
60033: EMPTY
60034: LIST
60035: LIST
60036: LIST
60037: LIST
60038: LIST
60039: ST_TO_ADDR
// end ; 5 :
60040: GO 60180
60042: LD_INT 5
60044: DOUBLE
60045: EQUAL
60046: IFTRUE 60050
60048: GO 60179
60050: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
60051: LD_ADDR_VAR 0 5
60055: PUSH
60056: LD_VAR 0 1
60060: PUSH
60061: LD_INT 4
60063: MINUS
60064: PUSH
60065: LD_VAR 0 2
60069: PUSH
60070: LD_INT 1
60072: PUSH
60073: EMPTY
60074: LIST
60075: LIST
60076: LIST
60077: PUSH
60078: LD_VAR 0 1
60082: PUSH
60083: LD_VAR 0 2
60087: PUSH
60088: LD_INT 4
60090: MINUS
60091: PUSH
60092: LD_INT 3
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: LIST
60099: PUSH
60100: LD_VAR 0 1
60104: PUSH
60105: LD_INT 4
60107: PLUS
60108: PUSH
60109: LD_VAR 0 2
60113: PUSH
60114: LD_INT 4
60116: PLUS
60117: PUSH
60118: LD_INT 5
60120: PUSH
60121: EMPTY
60122: LIST
60123: LIST
60124: LIST
60125: PUSH
60126: LD_VAR 0 1
60130: PUSH
60131: LD_INT 3
60133: PLUS
60134: PUSH
60135: LD_VAR 0 2
60139: PUSH
60140: LD_INT 4
60142: PUSH
60143: EMPTY
60144: LIST
60145: LIST
60146: LIST
60147: PUSH
60148: LD_VAR 0 1
60152: PUSH
60153: LD_VAR 0 2
60157: PUSH
60158: LD_INT 3
60160: PLUS
60161: PUSH
60162: LD_INT 0
60164: PUSH
60165: EMPTY
60166: LIST
60167: LIST
60168: LIST
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: LIST
60174: LIST
60175: LIST
60176: ST_TO_ADDR
// end ; end ;
60177: GO 60180
60179: POP
// result := list ;
60180: LD_ADDR_VAR 0 4
60184: PUSH
60185: LD_VAR 0 5
60189: ST_TO_ADDR
// end ;
60190: LD_VAR 0 4
60194: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
60195: LD_INT 0
60197: PPUSH
60198: PPUSH
60199: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
60200: LD_VAR 0 1
60204: NOT
60205: PUSH
60206: LD_VAR 0 2
60210: PUSH
60211: LD_INT 1
60213: PUSH
60214: LD_INT 2
60216: PUSH
60217: LD_INT 3
60219: PUSH
60220: LD_INT 4
60222: PUSH
60223: EMPTY
60224: LIST
60225: LIST
60226: LIST
60227: LIST
60228: IN
60229: NOT
60230: OR
60231: IFFALSE 60235
// exit ;
60233: GO 60327
// tmp := [ ] ;
60235: LD_ADDR_VAR 0 5
60239: PUSH
60240: EMPTY
60241: ST_TO_ADDR
// for i in units do
60242: LD_ADDR_VAR 0 4
60246: PUSH
60247: LD_VAR 0 1
60251: PUSH
60252: FOR_IN
60253: IFFALSE 60296
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
60255: LD_ADDR_VAR 0 5
60259: PUSH
60260: LD_VAR 0 5
60264: PPUSH
60265: LD_VAR 0 5
60269: PUSH
60270: LD_INT 1
60272: PLUS
60273: PPUSH
60274: LD_VAR 0 4
60278: PPUSH
60279: LD_VAR 0 2
60283: PPUSH
60284: CALL_OW 259
60288: PPUSH
60289: CALL_OW 2
60293: ST_TO_ADDR
60294: GO 60252
60296: POP
60297: POP
// if not tmp then
60298: LD_VAR 0 5
60302: NOT
60303: IFFALSE 60307
// exit ;
60305: GO 60327
// result := SortListByListDesc ( units , tmp ) ;
60307: LD_ADDR_VAR 0 3
60311: PUSH
60312: LD_VAR 0 1
60316: PPUSH
60317: LD_VAR 0 5
60321: PPUSH
60322: CALL_OW 77
60326: ST_TO_ADDR
// end ;
60327: LD_VAR 0 3
60331: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
60332: LD_INT 0
60334: PPUSH
60335: PPUSH
60336: PPUSH
// result := false ;
60337: LD_ADDR_VAR 0 3
60341: PUSH
60342: LD_INT 0
60344: ST_TO_ADDR
// x := GetX ( building ) ;
60345: LD_ADDR_VAR 0 4
60349: PUSH
60350: LD_VAR 0 2
60354: PPUSH
60355: CALL_OW 250
60359: ST_TO_ADDR
// y := GetY ( building ) ;
60360: LD_ADDR_VAR 0 5
60364: PUSH
60365: LD_VAR 0 2
60369: PPUSH
60370: CALL_OW 251
60374: ST_TO_ADDR
// if not building or not x or not y then
60375: LD_VAR 0 2
60379: NOT
60380: PUSH
60381: LD_VAR 0 4
60385: NOT
60386: OR
60387: PUSH
60388: LD_VAR 0 5
60392: NOT
60393: OR
60394: IFFALSE 60398
// exit ;
60396: GO 60490
// if GetTaskList ( unit ) then
60398: LD_VAR 0 1
60402: PPUSH
60403: CALL_OW 437
60407: IFFALSE 60490
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60409: LD_STRING e
60411: PUSH
60412: LD_VAR 0 1
60416: PPUSH
60417: CALL_OW 437
60421: PUSH
60422: LD_INT 1
60424: ARRAY
60425: PUSH
60426: LD_INT 1
60428: ARRAY
60429: EQUAL
60430: PUSH
60431: LD_VAR 0 4
60435: PUSH
60436: LD_VAR 0 1
60440: PPUSH
60441: CALL_OW 437
60445: PUSH
60446: LD_INT 1
60448: ARRAY
60449: PUSH
60450: LD_INT 2
60452: ARRAY
60453: EQUAL
60454: AND
60455: PUSH
60456: LD_VAR 0 5
60460: PUSH
60461: LD_VAR 0 1
60465: PPUSH
60466: CALL_OW 437
60470: PUSH
60471: LD_INT 1
60473: ARRAY
60474: PUSH
60475: LD_INT 3
60477: ARRAY
60478: EQUAL
60479: AND
60480: IFFALSE 60490
// result := true end ;
60482: LD_ADDR_VAR 0 3
60486: PUSH
60487: LD_INT 1
60489: ST_TO_ADDR
// end ;
60490: LD_VAR 0 3
60494: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
60495: LD_INT 0
60497: PPUSH
// result := false ;
60498: LD_ADDR_VAR 0 4
60502: PUSH
60503: LD_INT 0
60505: ST_TO_ADDR
// if GetTaskList ( unit ) then
60506: LD_VAR 0 1
60510: PPUSH
60511: CALL_OW 437
60515: IFFALSE 60598
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60517: LD_STRING M
60519: PUSH
60520: LD_VAR 0 1
60524: PPUSH
60525: CALL_OW 437
60529: PUSH
60530: LD_INT 1
60532: ARRAY
60533: PUSH
60534: LD_INT 1
60536: ARRAY
60537: EQUAL
60538: PUSH
60539: LD_VAR 0 2
60543: PUSH
60544: LD_VAR 0 1
60548: PPUSH
60549: CALL_OW 437
60553: PUSH
60554: LD_INT 1
60556: ARRAY
60557: PUSH
60558: LD_INT 2
60560: ARRAY
60561: EQUAL
60562: AND
60563: PUSH
60564: LD_VAR 0 3
60568: PUSH
60569: LD_VAR 0 1
60573: PPUSH
60574: CALL_OW 437
60578: PUSH
60579: LD_INT 1
60581: ARRAY
60582: PUSH
60583: LD_INT 3
60585: ARRAY
60586: EQUAL
60587: AND
60588: IFFALSE 60598
// result := true ;
60590: LD_ADDR_VAR 0 4
60594: PUSH
60595: LD_INT 1
60597: ST_TO_ADDR
// end ; end ;
60598: LD_VAR 0 4
60602: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
60603: LD_INT 0
60605: PPUSH
60606: PPUSH
60607: PPUSH
60608: PPUSH
// if not unit or not area then
60609: LD_VAR 0 1
60613: NOT
60614: PUSH
60615: LD_VAR 0 2
60619: NOT
60620: OR
60621: IFFALSE 60625
// exit ;
60623: GO 60789
// tmp := AreaToList ( area , i ) ;
60625: LD_ADDR_VAR 0 6
60629: PUSH
60630: LD_VAR 0 2
60634: PPUSH
60635: LD_VAR 0 5
60639: PPUSH
60640: CALL_OW 517
60644: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
60645: LD_ADDR_VAR 0 5
60649: PUSH
60650: DOUBLE
60651: LD_INT 1
60653: DEC
60654: ST_TO_ADDR
60655: LD_VAR 0 6
60659: PUSH
60660: LD_INT 1
60662: ARRAY
60663: PUSH
60664: FOR_TO
60665: IFFALSE 60787
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
60667: LD_ADDR_VAR 0 7
60671: PUSH
60672: LD_VAR 0 6
60676: PUSH
60677: LD_INT 1
60679: ARRAY
60680: PUSH
60681: LD_VAR 0 5
60685: ARRAY
60686: PUSH
60687: LD_VAR 0 6
60691: PUSH
60692: LD_INT 2
60694: ARRAY
60695: PUSH
60696: LD_VAR 0 5
60700: ARRAY
60701: PUSH
60702: EMPTY
60703: LIST
60704: LIST
60705: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
60706: LD_VAR 0 7
60710: PUSH
60711: LD_INT 1
60713: ARRAY
60714: PPUSH
60715: LD_VAR 0 7
60719: PUSH
60720: LD_INT 2
60722: ARRAY
60723: PPUSH
60724: CALL_OW 428
60728: PUSH
60729: LD_INT 0
60731: EQUAL
60732: IFFALSE 60785
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
60734: LD_VAR 0 1
60738: PPUSH
60739: LD_VAR 0 7
60743: PUSH
60744: LD_INT 1
60746: ARRAY
60747: PPUSH
60748: LD_VAR 0 7
60752: PUSH
60753: LD_INT 2
60755: ARRAY
60756: PPUSH
60757: LD_VAR 0 3
60761: PPUSH
60762: CALL_OW 48
// result := IsPlaced ( unit ) ;
60766: LD_ADDR_VAR 0 4
60770: PUSH
60771: LD_VAR 0 1
60775: PPUSH
60776: CALL_OW 305
60780: ST_TO_ADDR
// exit ;
60781: POP
60782: POP
60783: GO 60789
// end ; end ;
60785: GO 60664
60787: POP
60788: POP
// end ;
60789: LD_VAR 0 4
60793: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
60794: LD_INT 0
60796: PPUSH
60797: PPUSH
60798: PPUSH
// if not side or side > 8 then
60799: LD_VAR 0 1
60803: NOT
60804: PUSH
60805: LD_VAR 0 1
60809: PUSH
60810: LD_INT 8
60812: GREATER
60813: OR
60814: IFFALSE 60818
// exit ;
60816: GO 61005
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
60818: LD_ADDR_VAR 0 4
60822: PUSH
60823: LD_INT 22
60825: PUSH
60826: LD_VAR 0 1
60830: PUSH
60831: EMPTY
60832: LIST
60833: LIST
60834: PUSH
60835: LD_INT 21
60837: PUSH
60838: LD_INT 3
60840: PUSH
60841: EMPTY
60842: LIST
60843: LIST
60844: PUSH
60845: EMPTY
60846: LIST
60847: LIST
60848: PPUSH
60849: CALL_OW 69
60853: ST_TO_ADDR
// if not tmp then
60854: LD_VAR 0 4
60858: NOT
60859: IFFALSE 60863
// exit ;
60861: GO 61005
// enable_addtolog := true ;
60863: LD_ADDR_OWVAR 81
60867: PUSH
60868: LD_INT 1
60870: ST_TO_ADDR
// AddToLog ( [ ) ;
60871: LD_STRING [
60873: PPUSH
60874: CALL_OW 561
// for i in tmp do
60878: LD_ADDR_VAR 0 3
60882: PUSH
60883: LD_VAR 0 4
60887: PUSH
60888: FOR_IN
60889: IFFALSE 60996
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
60891: LD_STRING [
60893: PUSH
60894: LD_VAR 0 3
60898: PPUSH
60899: CALL_OW 266
60903: STR
60904: PUSH
60905: LD_STRING , 
60907: STR
60908: PUSH
60909: LD_VAR 0 3
60913: PPUSH
60914: CALL_OW 250
60918: STR
60919: PUSH
60920: LD_STRING , 
60922: STR
60923: PUSH
60924: LD_VAR 0 3
60928: PPUSH
60929: CALL_OW 251
60933: STR
60934: PUSH
60935: LD_STRING , 
60937: STR
60938: PUSH
60939: LD_VAR 0 3
60943: PPUSH
60944: CALL_OW 254
60948: STR
60949: PUSH
60950: LD_STRING , 
60952: STR
60953: PUSH
60954: LD_VAR 0 3
60958: PPUSH
60959: LD_INT 1
60961: PPUSH
60962: CALL_OW 268
60966: STR
60967: PUSH
60968: LD_STRING , 
60970: STR
60971: PUSH
60972: LD_VAR 0 3
60976: PPUSH
60977: LD_INT 2
60979: PPUSH
60980: CALL_OW 268
60984: STR
60985: PUSH
60986: LD_STRING ],
60988: STR
60989: PPUSH
60990: CALL_OW 561
// end ;
60994: GO 60888
60996: POP
60997: POP
// AddToLog ( ]; ) ;
60998: LD_STRING ];
61000: PPUSH
61001: CALL_OW 561
// end ;
61005: LD_VAR 0 2
61009: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
61010: LD_INT 0
61012: PPUSH
61013: PPUSH
61014: PPUSH
61015: PPUSH
61016: PPUSH
// if not area or not rate or not max then
61017: LD_VAR 0 1
61021: NOT
61022: PUSH
61023: LD_VAR 0 2
61027: NOT
61028: OR
61029: PUSH
61030: LD_VAR 0 4
61034: NOT
61035: OR
61036: IFFALSE 61040
// exit ;
61038: GO 61229
// while 1 do
61040: LD_INT 1
61042: IFFALSE 61229
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
61044: LD_ADDR_VAR 0 9
61048: PUSH
61049: LD_VAR 0 1
61053: PPUSH
61054: LD_INT 1
61056: PPUSH
61057: CALL_OW 287
61061: PUSH
61062: LD_INT 10
61064: MUL
61065: ST_TO_ADDR
// r := rate / 10 ;
61066: LD_ADDR_VAR 0 7
61070: PUSH
61071: LD_VAR 0 2
61075: PUSH
61076: LD_INT 10
61078: DIVREAL
61079: ST_TO_ADDR
// time := 1 1$00 ;
61080: LD_ADDR_VAR 0 8
61084: PUSH
61085: LD_INT 2100
61087: ST_TO_ADDR
// if amount < min then
61088: LD_VAR 0 9
61092: PUSH
61093: LD_VAR 0 3
61097: LESS
61098: IFFALSE 61116
// r := r * 2 else
61100: LD_ADDR_VAR 0 7
61104: PUSH
61105: LD_VAR 0 7
61109: PUSH
61110: LD_INT 2
61112: MUL
61113: ST_TO_ADDR
61114: GO 61142
// if amount > max then
61116: LD_VAR 0 9
61120: PUSH
61121: LD_VAR 0 4
61125: GREATER
61126: IFFALSE 61142
// r := r / 2 ;
61128: LD_ADDR_VAR 0 7
61132: PUSH
61133: LD_VAR 0 7
61137: PUSH
61138: LD_INT 2
61140: DIVREAL
61141: ST_TO_ADDR
// time := time / r ;
61142: LD_ADDR_VAR 0 8
61146: PUSH
61147: LD_VAR 0 8
61151: PUSH
61152: LD_VAR 0 7
61156: DIVREAL
61157: ST_TO_ADDR
// if time < 0 then
61158: LD_VAR 0 8
61162: PUSH
61163: LD_INT 0
61165: LESS
61166: IFFALSE 61183
// time := time * - 1 ;
61168: LD_ADDR_VAR 0 8
61172: PUSH
61173: LD_VAR 0 8
61177: PUSH
61178: LD_INT 1
61180: NEG
61181: MUL
61182: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
61183: LD_VAR 0 8
61187: PUSH
61188: LD_INT 35
61190: PPUSH
61191: LD_INT 875
61193: PPUSH
61194: CALL_OW 12
61198: PLUS
61199: PPUSH
61200: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
61204: LD_INT 1
61206: PPUSH
61207: LD_INT 5
61209: PPUSH
61210: CALL_OW 12
61214: PPUSH
61215: LD_VAR 0 1
61219: PPUSH
61220: LD_INT 1
61222: PPUSH
61223: CALL_OW 55
// end ;
61227: GO 61040
// end ;
61229: LD_VAR 0 5
61233: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
61234: LD_INT 0
61236: PPUSH
61237: PPUSH
61238: PPUSH
61239: PPUSH
61240: PPUSH
61241: PPUSH
61242: PPUSH
61243: PPUSH
// if not turrets or not factories then
61244: LD_VAR 0 1
61248: NOT
61249: PUSH
61250: LD_VAR 0 2
61254: NOT
61255: OR
61256: IFFALSE 61260
// exit ;
61258: GO 61567
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
61260: LD_ADDR_VAR 0 10
61264: PUSH
61265: LD_INT 5
61267: PUSH
61268: LD_INT 6
61270: PUSH
61271: EMPTY
61272: LIST
61273: LIST
61274: PUSH
61275: LD_INT 2
61277: PUSH
61278: LD_INT 4
61280: PUSH
61281: EMPTY
61282: LIST
61283: LIST
61284: PUSH
61285: LD_INT 3
61287: PUSH
61288: LD_INT 5
61290: PUSH
61291: EMPTY
61292: LIST
61293: LIST
61294: PUSH
61295: EMPTY
61296: LIST
61297: LIST
61298: LIST
61299: PUSH
61300: LD_INT 24
61302: PUSH
61303: LD_INT 25
61305: PUSH
61306: EMPTY
61307: LIST
61308: LIST
61309: PUSH
61310: LD_INT 23
61312: PUSH
61313: LD_INT 27
61315: PUSH
61316: EMPTY
61317: LIST
61318: LIST
61319: PUSH
61320: EMPTY
61321: LIST
61322: LIST
61323: PUSH
61324: LD_INT 42
61326: PUSH
61327: LD_INT 43
61329: PUSH
61330: EMPTY
61331: LIST
61332: LIST
61333: PUSH
61334: LD_INT 44
61336: PUSH
61337: LD_INT 46
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: PUSH
61344: LD_INT 45
61346: PUSH
61347: LD_INT 47
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: PUSH
61354: EMPTY
61355: LIST
61356: LIST
61357: LIST
61358: PUSH
61359: EMPTY
61360: LIST
61361: LIST
61362: LIST
61363: ST_TO_ADDR
// result := [ ] ;
61364: LD_ADDR_VAR 0 3
61368: PUSH
61369: EMPTY
61370: ST_TO_ADDR
// for i in turrets do
61371: LD_ADDR_VAR 0 4
61375: PUSH
61376: LD_VAR 0 1
61380: PUSH
61381: FOR_IN
61382: IFFALSE 61565
// begin nat := GetNation ( i ) ;
61384: LD_ADDR_VAR 0 7
61388: PUSH
61389: LD_VAR 0 4
61393: PPUSH
61394: CALL_OW 248
61398: ST_TO_ADDR
// weapon := 0 ;
61399: LD_ADDR_VAR 0 8
61403: PUSH
61404: LD_INT 0
61406: ST_TO_ADDR
// if not nat then
61407: LD_VAR 0 7
61411: NOT
61412: IFFALSE 61416
// continue ;
61414: GO 61381
// for j in list [ nat ] do
61416: LD_ADDR_VAR 0 5
61420: PUSH
61421: LD_VAR 0 10
61425: PUSH
61426: LD_VAR 0 7
61430: ARRAY
61431: PUSH
61432: FOR_IN
61433: IFFALSE 61474
// if GetBWeapon ( i ) = j [ 1 ] then
61435: LD_VAR 0 4
61439: PPUSH
61440: CALL_OW 269
61444: PUSH
61445: LD_VAR 0 5
61449: PUSH
61450: LD_INT 1
61452: ARRAY
61453: EQUAL
61454: IFFALSE 61472
// begin weapon := j [ 2 ] ;
61456: LD_ADDR_VAR 0 8
61460: PUSH
61461: LD_VAR 0 5
61465: PUSH
61466: LD_INT 2
61468: ARRAY
61469: ST_TO_ADDR
// break ;
61470: GO 61474
// end ;
61472: GO 61432
61474: POP
61475: POP
// if not weapon then
61476: LD_VAR 0 8
61480: NOT
61481: IFFALSE 61485
// continue ;
61483: GO 61381
// for k in factories do
61485: LD_ADDR_VAR 0 6
61489: PUSH
61490: LD_VAR 0 2
61494: PUSH
61495: FOR_IN
61496: IFFALSE 61561
// begin weapons := AvailableWeaponList ( k ) ;
61498: LD_ADDR_VAR 0 9
61502: PUSH
61503: LD_VAR 0 6
61507: PPUSH
61508: CALL_OW 478
61512: ST_TO_ADDR
// if not weapons then
61513: LD_VAR 0 9
61517: NOT
61518: IFFALSE 61522
// continue ;
61520: GO 61495
// if weapon in weapons then
61522: LD_VAR 0 8
61526: PUSH
61527: LD_VAR 0 9
61531: IN
61532: IFFALSE 61559
// begin result := [ i , weapon ] ;
61534: LD_ADDR_VAR 0 3
61538: PUSH
61539: LD_VAR 0 4
61543: PUSH
61544: LD_VAR 0 8
61548: PUSH
61549: EMPTY
61550: LIST
61551: LIST
61552: ST_TO_ADDR
// exit ;
61553: POP
61554: POP
61555: POP
61556: POP
61557: GO 61567
// end ; end ;
61559: GO 61495
61561: POP
61562: POP
// end ;
61563: GO 61381
61565: POP
61566: POP
// end ;
61567: LD_VAR 0 3
61571: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
61572: LD_INT 0
61574: PPUSH
// if not side or side > 8 then
61575: LD_VAR 0 3
61579: NOT
61580: PUSH
61581: LD_VAR 0 3
61585: PUSH
61586: LD_INT 8
61588: GREATER
61589: OR
61590: IFFALSE 61594
// exit ;
61592: GO 61653
// if not range then
61594: LD_VAR 0 4
61598: NOT
61599: IFFALSE 61610
// range := - 12 ;
61601: LD_ADDR_VAR 0 4
61605: PUSH
61606: LD_INT 12
61608: NEG
61609: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
61610: LD_VAR 0 1
61614: PPUSH
61615: LD_VAR 0 2
61619: PPUSH
61620: LD_VAR 0 3
61624: PPUSH
61625: LD_VAR 0 4
61629: PPUSH
61630: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
61634: LD_VAR 0 1
61638: PPUSH
61639: LD_VAR 0 2
61643: PPUSH
61644: LD_VAR 0 3
61648: PPUSH
61649: CALL_OW 331
// end ;
61653: LD_VAR 0 5
61657: RET
// export function Video ( mode ) ; begin
61658: LD_INT 0
61660: PPUSH
// ingame_video = mode ;
61661: LD_ADDR_OWVAR 52
61665: PUSH
61666: LD_VAR 0 1
61670: ST_TO_ADDR
// interface_hidden = mode ;
61671: LD_ADDR_OWVAR 54
61675: PUSH
61676: LD_VAR 0 1
61680: ST_TO_ADDR
// end ;
61681: LD_VAR 0 2
61685: RET
// export function Join ( array , element ) ; begin
61686: LD_INT 0
61688: PPUSH
// result := Replace ( array , array + 1 , element ) ;
61689: LD_ADDR_VAR 0 3
61693: PUSH
61694: LD_VAR 0 1
61698: PPUSH
61699: LD_VAR 0 1
61703: PUSH
61704: LD_INT 1
61706: PLUS
61707: PPUSH
61708: LD_VAR 0 2
61712: PPUSH
61713: CALL_OW 1
61717: ST_TO_ADDR
// end ;
61718: LD_VAR 0 3
61722: RET
// export function JoinUnion ( array , element ) ; begin
61723: LD_INT 0
61725: PPUSH
// result := array union element ;
61726: LD_ADDR_VAR 0 3
61730: PUSH
61731: LD_VAR 0 1
61735: PUSH
61736: LD_VAR 0 2
61740: UNION
61741: ST_TO_ADDR
// end ;
61742: LD_VAR 0 3
61746: RET
// export function GetBehemoths ( side ) ; begin
61747: LD_INT 0
61749: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
61750: LD_ADDR_VAR 0 2
61754: PUSH
61755: LD_INT 22
61757: PUSH
61758: LD_VAR 0 1
61762: PUSH
61763: EMPTY
61764: LIST
61765: LIST
61766: PUSH
61767: LD_INT 31
61769: PUSH
61770: LD_INT 25
61772: PUSH
61773: EMPTY
61774: LIST
61775: LIST
61776: PUSH
61777: EMPTY
61778: LIST
61779: LIST
61780: PPUSH
61781: CALL_OW 69
61785: ST_TO_ADDR
// end ;
61786: LD_VAR 0 2
61790: RET
// export function Shuffle ( array ) ; var i , index ; begin
61791: LD_INT 0
61793: PPUSH
61794: PPUSH
61795: PPUSH
// result := [ ] ;
61796: LD_ADDR_VAR 0 2
61800: PUSH
61801: EMPTY
61802: ST_TO_ADDR
// if not array then
61803: LD_VAR 0 1
61807: NOT
61808: IFFALSE 61812
// exit ;
61810: GO 61911
// Randomize ;
61812: CALL_OW 10
// for i = array downto 1 do
61816: LD_ADDR_VAR 0 3
61820: PUSH
61821: DOUBLE
61822: LD_VAR 0 1
61826: INC
61827: ST_TO_ADDR
61828: LD_INT 1
61830: PUSH
61831: FOR_DOWNTO
61832: IFFALSE 61909
// begin index := rand ( 1 , array ) ;
61834: LD_ADDR_VAR 0 4
61838: PUSH
61839: LD_INT 1
61841: PPUSH
61842: LD_VAR 0 1
61846: PPUSH
61847: CALL_OW 12
61851: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
61852: LD_ADDR_VAR 0 2
61856: PUSH
61857: LD_VAR 0 2
61861: PPUSH
61862: LD_VAR 0 2
61866: PUSH
61867: LD_INT 1
61869: PLUS
61870: PPUSH
61871: LD_VAR 0 1
61875: PUSH
61876: LD_VAR 0 4
61880: ARRAY
61881: PPUSH
61882: CALL_OW 2
61886: ST_TO_ADDR
// array := Delete ( array , index ) ;
61887: LD_ADDR_VAR 0 1
61891: PUSH
61892: LD_VAR 0 1
61896: PPUSH
61897: LD_VAR 0 4
61901: PPUSH
61902: CALL_OW 3
61906: ST_TO_ADDR
// end ;
61907: GO 61831
61909: POP
61910: POP
// end ;
61911: LD_VAR 0 2
61915: RET
// export function GetBaseMaterials ( base ) ; begin
61916: LD_INT 0
61918: PPUSH
// result := [ 0 , 0 , 0 ] ;
61919: LD_ADDR_VAR 0 2
61923: PUSH
61924: LD_INT 0
61926: PUSH
61927: LD_INT 0
61929: PUSH
61930: LD_INT 0
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: LIST
61937: ST_TO_ADDR
// if not base then
61938: LD_VAR 0 1
61942: NOT
61943: IFFALSE 61947
// exit ;
61945: GO 61996
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
61947: LD_ADDR_VAR 0 2
61951: PUSH
61952: LD_VAR 0 1
61956: PPUSH
61957: LD_INT 1
61959: PPUSH
61960: CALL_OW 275
61964: PUSH
61965: LD_VAR 0 1
61969: PPUSH
61970: LD_INT 2
61972: PPUSH
61973: CALL_OW 275
61977: PUSH
61978: LD_VAR 0 1
61982: PPUSH
61983: LD_INT 3
61985: PPUSH
61986: CALL_OW 275
61990: PUSH
61991: EMPTY
61992: LIST
61993: LIST
61994: LIST
61995: ST_TO_ADDR
// end ;
61996: LD_VAR 0 2
62000: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
62001: LD_INT 0
62003: PPUSH
62004: PPUSH
// result := array ;
62005: LD_ADDR_VAR 0 3
62009: PUSH
62010: LD_VAR 0 1
62014: ST_TO_ADDR
// if size > 0 then
62015: LD_VAR 0 2
62019: PUSH
62020: LD_INT 0
62022: GREATER
62023: IFFALSE 62069
// for i := array downto size do
62025: LD_ADDR_VAR 0 4
62029: PUSH
62030: DOUBLE
62031: LD_VAR 0 1
62035: INC
62036: ST_TO_ADDR
62037: LD_VAR 0 2
62041: PUSH
62042: FOR_DOWNTO
62043: IFFALSE 62067
// result := Delete ( result , result ) ;
62045: LD_ADDR_VAR 0 3
62049: PUSH
62050: LD_VAR 0 3
62054: PPUSH
62055: LD_VAR 0 3
62059: PPUSH
62060: CALL_OW 3
62064: ST_TO_ADDR
62065: GO 62042
62067: POP
62068: POP
// end ;
62069: LD_VAR 0 3
62073: RET
// export function ComExit ( unit ) ; var tmp ; begin
62074: LD_INT 0
62076: PPUSH
62077: PPUSH
// if not IsInUnit ( unit ) then
62078: LD_VAR 0 1
62082: PPUSH
62083: CALL_OW 310
62087: NOT
62088: IFFALSE 62092
// exit ;
62090: GO 62152
// tmp := IsInUnit ( unit ) ;
62092: LD_ADDR_VAR 0 3
62096: PUSH
62097: LD_VAR 0 1
62101: PPUSH
62102: CALL_OW 310
62106: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
62107: LD_VAR 0 3
62111: PPUSH
62112: CALL_OW 247
62116: PUSH
62117: LD_INT 2
62119: EQUAL
62120: IFFALSE 62133
// ComExitVehicle ( unit ) else
62122: LD_VAR 0 1
62126: PPUSH
62127: CALL_OW 121
62131: GO 62142
// ComExitBuilding ( unit ) ;
62133: LD_VAR 0 1
62137: PPUSH
62138: CALL_OW 122
// result := tmp ;
62142: LD_ADDR_VAR 0 2
62146: PUSH
62147: LD_VAR 0 3
62151: ST_TO_ADDR
// end ;
62152: LD_VAR 0 2
62156: RET
// export function ComExitAll ( units ) ; var i ; begin
62157: LD_INT 0
62159: PPUSH
62160: PPUSH
// if not units then
62161: LD_VAR 0 1
62165: NOT
62166: IFFALSE 62170
// exit ;
62168: GO 62196
// for i in units do
62170: LD_ADDR_VAR 0 3
62174: PUSH
62175: LD_VAR 0 1
62179: PUSH
62180: FOR_IN
62181: IFFALSE 62194
// ComExit ( i ) ;
62183: LD_VAR 0 3
62187: PPUSH
62188: CALL 62074 0 1
62192: GO 62180
62194: POP
62195: POP
// end ;
62196: LD_VAR 0 2
62200: RET
// export function ResetHc ; begin
62201: LD_INT 0
62203: PPUSH
// InitHc ;
62204: CALL_OW 19
// hc_importance := 0 ;
62208: LD_ADDR_OWVAR 32
62212: PUSH
62213: LD_INT 0
62215: ST_TO_ADDR
// end ;
62216: LD_VAR 0 1
62220: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
62221: LD_INT 0
62223: PPUSH
62224: PPUSH
62225: PPUSH
// _x := ( x1 + x2 ) div 2 ;
62226: LD_ADDR_VAR 0 6
62230: PUSH
62231: LD_VAR 0 1
62235: PUSH
62236: LD_VAR 0 3
62240: PLUS
62241: PUSH
62242: LD_INT 2
62244: DIV
62245: ST_TO_ADDR
// if _x < 0 then
62246: LD_VAR 0 6
62250: PUSH
62251: LD_INT 0
62253: LESS
62254: IFFALSE 62271
// _x := _x * - 1 ;
62256: LD_ADDR_VAR 0 6
62260: PUSH
62261: LD_VAR 0 6
62265: PUSH
62266: LD_INT 1
62268: NEG
62269: MUL
62270: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
62271: LD_ADDR_VAR 0 7
62275: PUSH
62276: LD_VAR 0 2
62280: PUSH
62281: LD_VAR 0 4
62285: PLUS
62286: PUSH
62287: LD_INT 2
62289: DIV
62290: ST_TO_ADDR
// if _y < 0 then
62291: LD_VAR 0 7
62295: PUSH
62296: LD_INT 0
62298: LESS
62299: IFFALSE 62316
// _y := _y * - 1 ;
62301: LD_ADDR_VAR 0 7
62305: PUSH
62306: LD_VAR 0 7
62310: PUSH
62311: LD_INT 1
62313: NEG
62314: MUL
62315: ST_TO_ADDR
// result := [ _x , _y ] ;
62316: LD_ADDR_VAR 0 5
62320: PUSH
62321: LD_VAR 0 6
62325: PUSH
62326: LD_VAR 0 7
62330: PUSH
62331: EMPTY
62332: LIST
62333: LIST
62334: ST_TO_ADDR
// end ;
62335: LD_VAR 0 5
62339: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
62340: LD_INT 0
62342: PPUSH
62343: PPUSH
62344: PPUSH
62345: PPUSH
// task := GetTaskList ( unit ) ;
62346: LD_ADDR_VAR 0 7
62350: PUSH
62351: LD_VAR 0 1
62355: PPUSH
62356: CALL_OW 437
62360: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
62361: LD_VAR 0 7
62365: NOT
62366: PUSH
62367: LD_VAR 0 1
62371: PPUSH
62372: LD_VAR 0 2
62376: PPUSH
62377: CALL_OW 308
62381: NOT
62382: AND
62383: IFFALSE 62387
// exit ;
62385: GO 62505
// if IsInArea ( unit , area ) then
62387: LD_VAR 0 1
62391: PPUSH
62392: LD_VAR 0 2
62396: PPUSH
62397: CALL_OW 308
62401: IFFALSE 62419
// begin ComMoveToArea ( unit , goAway ) ;
62403: LD_VAR 0 1
62407: PPUSH
62408: LD_VAR 0 3
62412: PPUSH
62413: CALL_OW 113
// exit ;
62417: GO 62505
// end ; if task [ 1 ] [ 1 ] <> M then
62419: LD_VAR 0 7
62423: PUSH
62424: LD_INT 1
62426: ARRAY
62427: PUSH
62428: LD_INT 1
62430: ARRAY
62431: PUSH
62432: LD_STRING M
62434: NONEQUAL
62435: IFFALSE 62439
// exit ;
62437: GO 62505
// x := task [ 1 ] [ 2 ] ;
62439: LD_ADDR_VAR 0 5
62443: PUSH
62444: LD_VAR 0 7
62448: PUSH
62449: LD_INT 1
62451: ARRAY
62452: PUSH
62453: LD_INT 2
62455: ARRAY
62456: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
62457: LD_ADDR_VAR 0 6
62461: PUSH
62462: LD_VAR 0 7
62466: PUSH
62467: LD_INT 1
62469: ARRAY
62470: PUSH
62471: LD_INT 3
62473: ARRAY
62474: ST_TO_ADDR
// if InArea ( x , y , area ) then
62475: LD_VAR 0 5
62479: PPUSH
62480: LD_VAR 0 6
62484: PPUSH
62485: LD_VAR 0 2
62489: PPUSH
62490: CALL_OW 309
62494: IFFALSE 62505
// ComStop ( unit ) ;
62496: LD_VAR 0 1
62500: PPUSH
62501: CALL_OW 141
// end ;
62505: LD_VAR 0 4
62509: RET
// export function Abs ( value ) ; begin
62510: LD_INT 0
62512: PPUSH
// result := value ;
62513: LD_ADDR_VAR 0 2
62517: PUSH
62518: LD_VAR 0 1
62522: ST_TO_ADDR
// if value < 0 then
62523: LD_VAR 0 1
62527: PUSH
62528: LD_INT 0
62530: LESS
62531: IFFALSE 62548
// result := value * - 1 ;
62533: LD_ADDR_VAR 0 2
62537: PUSH
62538: LD_VAR 0 1
62542: PUSH
62543: LD_INT 1
62545: NEG
62546: MUL
62547: ST_TO_ADDR
// end ;
62548: LD_VAR 0 2
62552: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
62553: LD_INT 0
62555: PPUSH
62556: PPUSH
62557: PPUSH
62558: PPUSH
62559: PPUSH
62560: PPUSH
62561: PPUSH
62562: PPUSH
// if not unit or not building then
62563: LD_VAR 0 1
62567: NOT
62568: PUSH
62569: LD_VAR 0 2
62573: NOT
62574: OR
62575: IFFALSE 62579
// exit ;
62577: GO 62805
// x := GetX ( building ) ;
62579: LD_ADDR_VAR 0 4
62583: PUSH
62584: LD_VAR 0 2
62588: PPUSH
62589: CALL_OW 250
62593: ST_TO_ADDR
// y := GetY ( building ) ;
62594: LD_ADDR_VAR 0 6
62598: PUSH
62599: LD_VAR 0 2
62603: PPUSH
62604: CALL_OW 251
62608: ST_TO_ADDR
// d := GetDir ( building ) ;
62609: LD_ADDR_VAR 0 8
62613: PUSH
62614: LD_VAR 0 2
62618: PPUSH
62619: CALL_OW 254
62623: ST_TO_ADDR
// r := 4 ;
62624: LD_ADDR_VAR 0 9
62628: PUSH
62629: LD_INT 4
62631: ST_TO_ADDR
// for i := 1 to 5 do
62632: LD_ADDR_VAR 0 10
62636: PUSH
62637: DOUBLE
62638: LD_INT 1
62640: DEC
62641: ST_TO_ADDR
62642: LD_INT 5
62644: PUSH
62645: FOR_TO
62646: IFFALSE 62803
// begin _x := ShiftX ( x , d , r + i ) ;
62648: LD_ADDR_VAR 0 5
62652: PUSH
62653: LD_VAR 0 4
62657: PPUSH
62658: LD_VAR 0 8
62662: PPUSH
62663: LD_VAR 0 9
62667: PUSH
62668: LD_VAR 0 10
62672: PLUS
62673: PPUSH
62674: CALL_OW 272
62678: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
62679: LD_ADDR_VAR 0 7
62683: PUSH
62684: LD_VAR 0 6
62688: PPUSH
62689: LD_VAR 0 8
62693: PPUSH
62694: LD_VAR 0 9
62698: PUSH
62699: LD_VAR 0 10
62703: PLUS
62704: PPUSH
62705: CALL_OW 273
62709: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
62710: LD_VAR 0 5
62714: PPUSH
62715: LD_VAR 0 7
62719: PPUSH
62720: CALL_OW 488
62724: PUSH
62725: LD_VAR 0 5
62729: PPUSH
62730: LD_VAR 0 7
62734: PPUSH
62735: CALL_OW 428
62739: PPUSH
62740: CALL_OW 247
62744: PUSH
62745: LD_INT 3
62747: PUSH
62748: LD_INT 2
62750: PUSH
62751: EMPTY
62752: LIST
62753: LIST
62754: IN
62755: NOT
62756: AND
62757: IFFALSE 62801
// begin ComMoveXY ( unit , _x , _y ) ;
62759: LD_VAR 0 1
62763: PPUSH
62764: LD_VAR 0 5
62768: PPUSH
62769: LD_VAR 0 7
62773: PPUSH
62774: CALL_OW 111
// result := [ _x , _y ] ;
62778: LD_ADDR_VAR 0 3
62782: PUSH
62783: LD_VAR 0 5
62787: PUSH
62788: LD_VAR 0 7
62792: PUSH
62793: EMPTY
62794: LIST
62795: LIST
62796: ST_TO_ADDR
// exit ;
62797: POP
62798: POP
62799: GO 62805
// end ; end ;
62801: GO 62645
62803: POP
62804: POP
// end ;
62805: LD_VAR 0 3
62809: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
62810: LD_INT 0
62812: PPUSH
62813: PPUSH
62814: PPUSH
// result := 0 ;
62815: LD_ADDR_VAR 0 3
62819: PUSH
62820: LD_INT 0
62822: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
62823: LD_VAR 0 1
62827: PUSH
62828: LD_INT 0
62830: LESS
62831: PUSH
62832: LD_VAR 0 1
62836: PUSH
62837: LD_INT 8
62839: GREATER
62840: OR
62841: PUSH
62842: LD_VAR 0 2
62846: PUSH
62847: LD_INT 0
62849: LESS
62850: OR
62851: PUSH
62852: LD_VAR 0 2
62856: PUSH
62857: LD_INT 8
62859: GREATER
62860: OR
62861: IFFALSE 62865
// exit ;
62863: GO 62940
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
62865: LD_ADDR_VAR 0 4
62869: PUSH
62870: LD_INT 22
62872: PUSH
62873: LD_VAR 0 2
62877: PUSH
62878: EMPTY
62879: LIST
62880: LIST
62881: PPUSH
62882: CALL_OW 69
62886: PUSH
62887: FOR_IN
62888: IFFALSE 62938
// begin un := UnitShoot ( i ) ;
62890: LD_ADDR_VAR 0 5
62894: PUSH
62895: LD_VAR 0 4
62899: PPUSH
62900: CALL_OW 504
62904: ST_TO_ADDR
// if GetSide ( un ) = side1 then
62905: LD_VAR 0 5
62909: PPUSH
62910: CALL_OW 255
62914: PUSH
62915: LD_VAR 0 1
62919: EQUAL
62920: IFFALSE 62936
// begin result := un ;
62922: LD_ADDR_VAR 0 3
62926: PUSH
62927: LD_VAR 0 5
62931: ST_TO_ADDR
// exit ;
62932: POP
62933: POP
62934: GO 62940
// end ; end ;
62936: GO 62887
62938: POP
62939: POP
// end ;
62940: LD_VAR 0 3
62944: RET
// export function GetCargoBay ( units ) ; begin
62945: LD_INT 0
62947: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
62948: LD_ADDR_VAR 0 2
62952: PUSH
62953: LD_VAR 0 1
62957: PPUSH
62958: LD_INT 2
62960: PUSH
62961: LD_INT 34
62963: PUSH
62964: LD_INT 12
62966: PUSH
62967: EMPTY
62968: LIST
62969: LIST
62970: PUSH
62971: LD_INT 34
62973: PUSH
62974: LD_INT 51
62976: PUSH
62977: EMPTY
62978: LIST
62979: LIST
62980: PUSH
62981: LD_INT 34
62983: PUSH
62984: LD_INT 32
62986: PUSH
62987: EMPTY
62988: LIST
62989: LIST
62990: PUSH
62991: LD_INT 34
62993: PUSH
62994: LD_EXP 94
62998: PUSH
62999: EMPTY
63000: LIST
63001: LIST
63002: PUSH
63003: EMPTY
63004: LIST
63005: LIST
63006: LIST
63007: LIST
63008: LIST
63009: PPUSH
63010: CALL_OW 72
63014: ST_TO_ADDR
// end ;
63015: LD_VAR 0 2
63019: RET
// export function Negate ( value ) ; begin
63020: LD_INT 0
63022: PPUSH
// result := not value ;
63023: LD_ADDR_VAR 0 2
63027: PUSH
63028: LD_VAR 0 1
63032: NOT
63033: ST_TO_ADDR
// end ;
63034: LD_VAR 0 2
63038: RET
// export function Inc ( value ) ; begin
63039: LD_INT 0
63041: PPUSH
// result := value + 1 ;
63042: LD_ADDR_VAR 0 2
63046: PUSH
63047: LD_VAR 0 1
63051: PUSH
63052: LD_INT 1
63054: PLUS
63055: ST_TO_ADDR
// end ;
63056: LD_VAR 0 2
63060: RET
// export function Dec ( value ) ; begin
63061: LD_INT 0
63063: PPUSH
// result := value - 1 ;
63064: LD_ADDR_VAR 0 2
63068: PUSH
63069: LD_VAR 0 1
63073: PUSH
63074: LD_INT 1
63076: MINUS
63077: ST_TO_ADDR
// end ;
63078: LD_VAR 0 2
63082: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
63083: LD_INT 0
63085: PPUSH
63086: PPUSH
63087: PPUSH
63088: PPUSH
63089: PPUSH
63090: PPUSH
63091: PPUSH
63092: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
63093: LD_VAR 0 1
63097: PPUSH
63098: LD_VAR 0 2
63102: PPUSH
63103: CALL_OW 488
63107: NOT
63108: PUSH
63109: LD_VAR 0 3
63113: PPUSH
63114: LD_VAR 0 4
63118: PPUSH
63119: CALL_OW 488
63123: NOT
63124: OR
63125: IFFALSE 63138
// begin result := - 1 ;
63127: LD_ADDR_VAR 0 5
63131: PUSH
63132: LD_INT 1
63134: NEG
63135: ST_TO_ADDR
// exit ;
63136: GO 63373
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
63138: LD_ADDR_VAR 0 12
63142: PUSH
63143: LD_VAR 0 1
63147: PPUSH
63148: LD_VAR 0 2
63152: PPUSH
63153: LD_VAR 0 3
63157: PPUSH
63158: LD_VAR 0 4
63162: PPUSH
63163: CALL 62221 0 4
63167: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
63168: LD_ADDR_VAR 0 11
63172: PUSH
63173: LD_VAR 0 1
63177: PPUSH
63178: LD_VAR 0 2
63182: PPUSH
63183: LD_VAR 0 12
63187: PUSH
63188: LD_INT 1
63190: ARRAY
63191: PPUSH
63192: LD_VAR 0 12
63196: PUSH
63197: LD_INT 2
63199: ARRAY
63200: PPUSH
63201: CALL_OW 298
63205: ST_TO_ADDR
// distance := 9999 ;
63206: LD_ADDR_VAR 0 10
63210: PUSH
63211: LD_INT 9999
63213: ST_TO_ADDR
// for i := 0 to 5 do
63214: LD_ADDR_VAR 0 6
63218: PUSH
63219: DOUBLE
63220: LD_INT 0
63222: DEC
63223: ST_TO_ADDR
63224: LD_INT 5
63226: PUSH
63227: FOR_TO
63228: IFFALSE 63371
// begin _x := ShiftX ( x1 , i , centerDist ) ;
63230: LD_ADDR_VAR 0 7
63234: PUSH
63235: LD_VAR 0 1
63239: PPUSH
63240: LD_VAR 0 6
63244: PPUSH
63245: LD_VAR 0 11
63249: PPUSH
63250: CALL_OW 272
63254: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
63255: LD_ADDR_VAR 0 8
63259: PUSH
63260: LD_VAR 0 2
63264: PPUSH
63265: LD_VAR 0 6
63269: PPUSH
63270: LD_VAR 0 11
63274: PPUSH
63275: CALL_OW 273
63279: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
63280: LD_VAR 0 7
63284: PPUSH
63285: LD_VAR 0 8
63289: PPUSH
63290: CALL_OW 488
63294: NOT
63295: IFFALSE 63299
// continue ;
63297: GO 63227
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
63299: LD_ADDR_VAR 0 9
63303: PUSH
63304: LD_VAR 0 12
63308: PUSH
63309: LD_INT 1
63311: ARRAY
63312: PPUSH
63313: LD_VAR 0 12
63317: PUSH
63318: LD_INT 2
63320: ARRAY
63321: PPUSH
63322: LD_VAR 0 7
63326: PPUSH
63327: LD_VAR 0 8
63331: PPUSH
63332: CALL_OW 298
63336: ST_TO_ADDR
// if tmp < distance then
63337: LD_VAR 0 9
63341: PUSH
63342: LD_VAR 0 10
63346: LESS
63347: IFFALSE 63369
// begin result := i ;
63349: LD_ADDR_VAR 0 5
63353: PUSH
63354: LD_VAR 0 6
63358: ST_TO_ADDR
// distance := tmp ;
63359: LD_ADDR_VAR 0 10
63363: PUSH
63364: LD_VAR 0 9
63368: ST_TO_ADDR
// end ; end ;
63369: GO 63227
63371: POP
63372: POP
// end ;
63373: LD_VAR 0 5
63377: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
63378: LD_INT 0
63380: PPUSH
63381: PPUSH
// if not driver or not IsInUnit ( driver ) then
63382: LD_VAR 0 1
63386: NOT
63387: PUSH
63388: LD_VAR 0 1
63392: PPUSH
63393: CALL_OW 310
63397: NOT
63398: OR
63399: IFFALSE 63403
// exit ;
63401: GO 63493
// vehicle := IsInUnit ( driver ) ;
63403: LD_ADDR_VAR 0 3
63407: PUSH
63408: LD_VAR 0 1
63412: PPUSH
63413: CALL_OW 310
63417: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
63418: LD_VAR 0 1
63422: PPUSH
63423: LD_STRING \
63425: PUSH
63426: LD_INT 0
63428: PUSH
63429: LD_INT 0
63431: PUSH
63432: LD_INT 0
63434: PUSH
63435: LD_INT 0
63437: PUSH
63438: LD_INT 0
63440: PUSH
63441: LD_INT 0
63443: PUSH
63444: EMPTY
63445: LIST
63446: LIST
63447: LIST
63448: LIST
63449: LIST
63450: LIST
63451: LIST
63452: PUSH
63453: LD_STRING E
63455: PUSH
63456: LD_INT 0
63458: PUSH
63459: LD_INT 0
63461: PUSH
63462: LD_VAR 0 3
63466: PUSH
63467: LD_INT 0
63469: PUSH
63470: LD_INT 0
63472: PUSH
63473: LD_INT 0
63475: PUSH
63476: EMPTY
63477: LIST
63478: LIST
63479: LIST
63480: LIST
63481: LIST
63482: LIST
63483: LIST
63484: PUSH
63485: EMPTY
63486: LIST
63487: LIST
63488: PPUSH
63489: CALL_OW 446
// end ;
63493: LD_VAR 0 2
63497: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
63498: LD_INT 0
63500: PPUSH
63501: PPUSH
// if not driver or not IsInUnit ( driver ) then
63502: LD_VAR 0 1
63506: NOT
63507: PUSH
63508: LD_VAR 0 1
63512: PPUSH
63513: CALL_OW 310
63517: NOT
63518: OR
63519: IFFALSE 63523
// exit ;
63521: GO 63613
// vehicle := IsInUnit ( driver ) ;
63523: LD_ADDR_VAR 0 3
63527: PUSH
63528: LD_VAR 0 1
63532: PPUSH
63533: CALL_OW 310
63537: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
63538: LD_VAR 0 1
63542: PPUSH
63543: LD_STRING \
63545: PUSH
63546: LD_INT 0
63548: PUSH
63549: LD_INT 0
63551: PUSH
63552: LD_INT 0
63554: PUSH
63555: LD_INT 0
63557: PUSH
63558: LD_INT 0
63560: PUSH
63561: LD_INT 0
63563: PUSH
63564: EMPTY
63565: LIST
63566: LIST
63567: LIST
63568: LIST
63569: LIST
63570: LIST
63571: LIST
63572: PUSH
63573: LD_STRING E
63575: PUSH
63576: LD_INT 0
63578: PUSH
63579: LD_INT 0
63581: PUSH
63582: LD_VAR 0 3
63586: PUSH
63587: LD_INT 0
63589: PUSH
63590: LD_INT 0
63592: PUSH
63593: LD_INT 0
63595: PUSH
63596: EMPTY
63597: LIST
63598: LIST
63599: LIST
63600: LIST
63601: LIST
63602: LIST
63603: LIST
63604: PUSH
63605: EMPTY
63606: LIST
63607: LIST
63608: PPUSH
63609: CALL_OW 447
// end ;
63613: LD_VAR 0 2
63617: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
63618: LD_INT 0
63620: PPUSH
63621: PPUSH
63622: PPUSH
// tmp := [ ] ;
63623: LD_ADDR_VAR 0 5
63627: PUSH
63628: EMPTY
63629: ST_TO_ADDR
// for i in units do
63630: LD_ADDR_VAR 0 4
63634: PUSH
63635: LD_VAR 0 1
63639: PUSH
63640: FOR_IN
63641: IFFALSE 63679
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
63643: LD_ADDR_VAR 0 5
63647: PUSH
63648: LD_VAR 0 5
63652: PPUSH
63653: LD_VAR 0 5
63657: PUSH
63658: LD_INT 1
63660: PLUS
63661: PPUSH
63662: LD_VAR 0 4
63666: PPUSH
63667: CALL_OW 256
63671: PPUSH
63672: CALL_OW 2
63676: ST_TO_ADDR
63677: GO 63640
63679: POP
63680: POP
// if not tmp then
63681: LD_VAR 0 5
63685: NOT
63686: IFFALSE 63690
// exit ;
63688: GO 63738
// if asc then
63690: LD_VAR 0 2
63694: IFFALSE 63718
// result := SortListByListAsc ( units , tmp ) else
63696: LD_ADDR_VAR 0 3
63700: PUSH
63701: LD_VAR 0 1
63705: PPUSH
63706: LD_VAR 0 5
63710: PPUSH
63711: CALL_OW 76
63715: ST_TO_ADDR
63716: GO 63738
// result := SortListByListDesc ( units , tmp ) ;
63718: LD_ADDR_VAR 0 3
63722: PUSH
63723: LD_VAR 0 1
63727: PPUSH
63728: LD_VAR 0 5
63732: PPUSH
63733: CALL_OW 77
63737: ST_TO_ADDR
// end ;
63738: LD_VAR 0 3
63742: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
63743: LD_INT 0
63745: PPUSH
63746: PPUSH
// task := GetTaskList ( mech ) ;
63747: LD_ADDR_VAR 0 4
63751: PUSH
63752: LD_VAR 0 1
63756: PPUSH
63757: CALL_OW 437
63761: ST_TO_ADDR
// if not task then
63762: LD_VAR 0 4
63766: NOT
63767: IFFALSE 63771
// exit ;
63769: GO 63813
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
63771: LD_ADDR_VAR 0 3
63775: PUSH
63776: LD_VAR 0 4
63780: PUSH
63781: LD_INT 1
63783: ARRAY
63784: PUSH
63785: LD_INT 1
63787: ARRAY
63788: PUSH
63789: LD_STRING r
63791: EQUAL
63792: PUSH
63793: LD_VAR 0 4
63797: PUSH
63798: LD_INT 1
63800: ARRAY
63801: PUSH
63802: LD_INT 4
63804: ARRAY
63805: PUSH
63806: LD_VAR 0 2
63810: EQUAL
63811: AND
63812: ST_TO_ADDR
// end ;
63813: LD_VAR 0 3
63817: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
63818: LD_INT 0
63820: PPUSH
// SetDir ( unit , d ) ;
63821: LD_VAR 0 1
63825: PPUSH
63826: LD_VAR 0 4
63830: PPUSH
63831: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
63835: LD_VAR 0 1
63839: PPUSH
63840: LD_VAR 0 2
63844: PPUSH
63845: LD_VAR 0 3
63849: PPUSH
63850: LD_VAR 0 5
63854: PPUSH
63855: CALL_OW 48
// end ;
63859: LD_VAR 0 6
63863: RET
// export function ToNaturalNumber ( number ) ; begin
63864: LD_INT 0
63866: PPUSH
// result := number div 1 ;
63867: LD_ADDR_VAR 0 2
63871: PUSH
63872: LD_VAR 0 1
63876: PUSH
63877: LD_INT 1
63879: DIV
63880: ST_TO_ADDR
// if number < 0 then
63881: LD_VAR 0 1
63885: PUSH
63886: LD_INT 0
63888: LESS
63889: IFFALSE 63899
// result := 0 ;
63891: LD_ADDR_VAR 0 2
63895: PUSH
63896: LD_INT 0
63898: ST_TO_ADDR
// end ;
63899: LD_VAR 0 2
63903: RET
// export function SortByClass ( units , class ) ; var un ; begin
63904: LD_INT 0
63906: PPUSH
63907: PPUSH
// if not units or not class then
63908: LD_VAR 0 1
63912: NOT
63913: PUSH
63914: LD_VAR 0 2
63918: NOT
63919: OR
63920: IFFALSE 63924
// exit ;
63922: GO 64019
// result := [ ] ;
63924: LD_ADDR_VAR 0 3
63928: PUSH
63929: EMPTY
63930: ST_TO_ADDR
// for un in units do
63931: LD_ADDR_VAR 0 4
63935: PUSH
63936: LD_VAR 0 1
63940: PUSH
63941: FOR_IN
63942: IFFALSE 64017
// if GetClass ( un ) = class then
63944: LD_VAR 0 4
63948: PPUSH
63949: CALL_OW 257
63953: PUSH
63954: LD_VAR 0 2
63958: EQUAL
63959: IFFALSE 63986
// result := Insert ( result , 1 , un ) else
63961: LD_ADDR_VAR 0 3
63965: PUSH
63966: LD_VAR 0 3
63970: PPUSH
63971: LD_INT 1
63973: PPUSH
63974: LD_VAR 0 4
63978: PPUSH
63979: CALL_OW 2
63983: ST_TO_ADDR
63984: GO 64015
// result := Replace ( result , result + 1 , un ) ;
63986: LD_ADDR_VAR 0 3
63990: PUSH
63991: LD_VAR 0 3
63995: PPUSH
63996: LD_VAR 0 3
64000: PUSH
64001: LD_INT 1
64003: PLUS
64004: PPUSH
64005: LD_VAR 0 4
64009: PPUSH
64010: CALL_OW 1
64014: ST_TO_ADDR
64015: GO 63941
64017: POP
64018: POP
// end ;
64019: LD_VAR 0 3
64023: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
64024: LD_INT 0
64026: PPUSH
64027: PPUSH
64028: PPUSH
64029: PPUSH
64030: PPUSH
64031: PPUSH
64032: PPUSH
// result := [ ] ;
64033: LD_ADDR_VAR 0 4
64037: PUSH
64038: EMPTY
64039: ST_TO_ADDR
// if x - r < 0 then
64040: LD_VAR 0 1
64044: PUSH
64045: LD_VAR 0 3
64049: MINUS
64050: PUSH
64051: LD_INT 0
64053: LESS
64054: IFFALSE 64066
// min_x := 0 else
64056: LD_ADDR_VAR 0 8
64060: PUSH
64061: LD_INT 0
64063: ST_TO_ADDR
64064: GO 64082
// min_x := x - r ;
64066: LD_ADDR_VAR 0 8
64070: PUSH
64071: LD_VAR 0 1
64075: PUSH
64076: LD_VAR 0 3
64080: MINUS
64081: ST_TO_ADDR
// if y - r < 0 then
64082: LD_VAR 0 2
64086: PUSH
64087: LD_VAR 0 3
64091: MINUS
64092: PUSH
64093: LD_INT 0
64095: LESS
64096: IFFALSE 64108
// min_y := 0 else
64098: LD_ADDR_VAR 0 7
64102: PUSH
64103: LD_INT 0
64105: ST_TO_ADDR
64106: GO 64124
// min_y := y - r ;
64108: LD_ADDR_VAR 0 7
64112: PUSH
64113: LD_VAR 0 2
64117: PUSH
64118: LD_VAR 0 3
64122: MINUS
64123: ST_TO_ADDR
// max_x := x + r ;
64124: LD_ADDR_VAR 0 9
64128: PUSH
64129: LD_VAR 0 1
64133: PUSH
64134: LD_VAR 0 3
64138: PLUS
64139: ST_TO_ADDR
// max_y := y + r ;
64140: LD_ADDR_VAR 0 10
64144: PUSH
64145: LD_VAR 0 2
64149: PUSH
64150: LD_VAR 0 3
64154: PLUS
64155: ST_TO_ADDR
// for _x = min_x to max_x do
64156: LD_ADDR_VAR 0 5
64160: PUSH
64161: DOUBLE
64162: LD_VAR 0 8
64166: DEC
64167: ST_TO_ADDR
64168: LD_VAR 0 9
64172: PUSH
64173: FOR_TO
64174: IFFALSE 64275
// for _y = min_y to max_y do
64176: LD_ADDR_VAR 0 6
64180: PUSH
64181: DOUBLE
64182: LD_VAR 0 7
64186: DEC
64187: ST_TO_ADDR
64188: LD_VAR 0 10
64192: PUSH
64193: FOR_TO
64194: IFFALSE 64271
// begin if not ValidHex ( _x , _y ) then
64196: LD_VAR 0 5
64200: PPUSH
64201: LD_VAR 0 6
64205: PPUSH
64206: CALL_OW 488
64210: NOT
64211: IFFALSE 64215
// continue ;
64213: GO 64193
// if GetResourceTypeXY ( _x , _y ) then
64215: LD_VAR 0 5
64219: PPUSH
64220: LD_VAR 0 6
64224: PPUSH
64225: CALL_OW 283
64229: IFFALSE 64269
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
64231: LD_ADDR_VAR 0 4
64235: PUSH
64236: LD_VAR 0 4
64240: PPUSH
64241: LD_VAR 0 4
64245: PUSH
64246: LD_INT 1
64248: PLUS
64249: PPUSH
64250: LD_VAR 0 5
64254: PUSH
64255: LD_VAR 0 6
64259: PUSH
64260: EMPTY
64261: LIST
64262: LIST
64263: PPUSH
64264: CALL_OW 1
64268: ST_TO_ADDR
// end ;
64269: GO 64193
64271: POP
64272: POP
64273: GO 64173
64275: POP
64276: POP
// end ;
64277: LD_VAR 0 4
64281: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
64282: LD_INT 0
64284: PPUSH
64285: PPUSH
64286: PPUSH
64287: PPUSH
64288: PPUSH
64289: PPUSH
64290: PPUSH
64291: PPUSH
// if not units then
64292: LD_VAR 0 1
64296: NOT
64297: IFFALSE 64301
// exit ;
64299: GO 64726
// result := UnitFilter ( units , [ f_ok ] ) ;
64301: LD_ADDR_VAR 0 3
64305: PUSH
64306: LD_VAR 0 1
64310: PPUSH
64311: LD_INT 50
64313: PUSH
64314: EMPTY
64315: LIST
64316: PPUSH
64317: CALL_OW 72
64321: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
64322: LD_ADDR_VAR 0 8
64326: PUSH
64327: LD_VAR 0 1
64331: PUSH
64332: LD_INT 1
64334: ARRAY
64335: PPUSH
64336: CALL_OW 255
64340: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
64341: LD_ADDR_VAR 0 10
64345: PUSH
64346: LD_INT 29
64348: PUSH
64349: LD_EXP 97
64353: PUSH
64354: EMPTY
64355: LIST
64356: LIST
64357: ST_TO_ADDR
// if not result then
64358: LD_VAR 0 3
64362: NOT
64363: IFFALSE 64367
// exit ;
64365: GO 64726
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
64367: LD_ADDR_VAR 0 5
64371: PUSH
64372: LD_INT 81
64374: PUSH
64375: LD_VAR 0 8
64379: PUSH
64380: EMPTY
64381: LIST
64382: LIST
64383: PPUSH
64384: CALL_OW 69
64388: ST_TO_ADDR
// for i in result do
64389: LD_ADDR_VAR 0 4
64393: PUSH
64394: LD_VAR 0 3
64398: PUSH
64399: FOR_IN
64400: IFFALSE 64724
// begin tag := GetTag ( i ) + 1 ;
64402: LD_ADDR_VAR 0 9
64406: PUSH
64407: LD_VAR 0 4
64411: PPUSH
64412: CALL_OW 110
64416: PUSH
64417: LD_INT 1
64419: PLUS
64420: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
64421: LD_ADDR_VAR 0 7
64425: PUSH
64426: LD_VAR 0 4
64430: PPUSH
64431: CALL_OW 250
64435: PPUSH
64436: LD_VAR 0 4
64440: PPUSH
64441: CALL_OW 251
64445: PPUSH
64446: LD_INT 6
64448: PPUSH
64449: CALL 64024 0 3
64453: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
64454: LD_VAR 0 7
64458: PUSH
64459: LD_VAR 0 4
64463: PPUSH
64464: CALL_OW 264
64468: PUSH
64469: LD_VAR 0 10
64473: IN
64474: NOT
64475: AND
64476: IFFALSE 64515
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
64478: LD_VAR 0 4
64482: PPUSH
64483: LD_VAR 0 7
64487: PUSH
64488: LD_INT 1
64490: ARRAY
64491: PUSH
64492: LD_INT 1
64494: ARRAY
64495: PPUSH
64496: LD_VAR 0 7
64500: PUSH
64501: LD_INT 1
64503: ARRAY
64504: PUSH
64505: LD_INT 2
64507: ARRAY
64508: PPUSH
64509: CALL_OW 116
64513: GO 64722
// if path > tag then
64515: LD_VAR 0 2
64519: PUSH
64520: LD_VAR 0 9
64524: GREATER
64525: IFFALSE 64692
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
64527: LD_ADDR_VAR 0 6
64531: PUSH
64532: LD_VAR 0 5
64536: PPUSH
64537: LD_INT 91
64539: PUSH
64540: LD_VAR 0 4
64544: PUSH
64545: LD_INT 12
64547: PUSH
64548: EMPTY
64549: LIST
64550: LIST
64551: LIST
64552: PPUSH
64553: CALL_OW 72
64557: ST_TO_ADDR
// if nearEnemy then
64558: LD_VAR 0 6
64562: IFFALSE 64590
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
64564: LD_VAR 0 4
64568: PPUSH
64569: LD_VAR 0 6
64573: PPUSH
64574: LD_VAR 0 4
64578: PPUSH
64579: CALL_OW 74
64583: PPUSH
64584: CALL_OW 115
64588: GO 64690
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
64590: LD_VAR 0 4
64594: PPUSH
64595: LD_VAR 0 2
64599: PUSH
64600: LD_VAR 0 9
64604: ARRAY
64605: PUSH
64606: LD_INT 1
64608: ARRAY
64609: PPUSH
64610: LD_VAR 0 2
64614: PUSH
64615: LD_VAR 0 9
64619: ARRAY
64620: PUSH
64621: LD_INT 2
64623: ARRAY
64624: PPUSH
64625: CALL_OW 297
64629: PUSH
64630: LD_INT 6
64632: GREATER
64633: IFFALSE 64676
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
64635: LD_VAR 0 4
64639: PPUSH
64640: LD_VAR 0 2
64644: PUSH
64645: LD_VAR 0 9
64649: ARRAY
64650: PUSH
64651: LD_INT 1
64653: ARRAY
64654: PPUSH
64655: LD_VAR 0 2
64659: PUSH
64660: LD_VAR 0 9
64664: ARRAY
64665: PUSH
64666: LD_INT 2
64668: ARRAY
64669: PPUSH
64670: CALL_OW 114
64674: GO 64690
// SetTag ( i , tag ) ;
64676: LD_VAR 0 4
64680: PPUSH
64681: LD_VAR 0 9
64685: PPUSH
64686: CALL_OW 109
// end else
64690: GO 64722
// if enemy then
64692: LD_VAR 0 5
64696: IFFALSE 64722
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
64698: LD_VAR 0 4
64702: PPUSH
64703: LD_VAR 0 5
64707: PPUSH
64708: LD_VAR 0 4
64712: PPUSH
64713: CALL_OW 74
64717: PPUSH
64718: CALL_OW 115
// end ;
64722: GO 64399
64724: POP
64725: POP
// end ;
64726: LD_VAR 0 3
64730: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
64731: LD_INT 0
64733: PPUSH
64734: PPUSH
64735: PPUSH
// if not unit or IsInUnit ( unit ) then
64736: LD_VAR 0 1
64740: NOT
64741: PUSH
64742: LD_VAR 0 1
64746: PPUSH
64747: CALL_OW 310
64751: OR
64752: IFFALSE 64756
// exit ;
64754: GO 64847
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
64756: LD_ADDR_VAR 0 4
64760: PUSH
64761: LD_VAR 0 1
64765: PPUSH
64766: CALL_OW 250
64770: PPUSH
64771: LD_VAR 0 2
64775: PPUSH
64776: LD_INT 1
64778: PPUSH
64779: CALL_OW 272
64783: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
64784: LD_ADDR_VAR 0 5
64788: PUSH
64789: LD_VAR 0 1
64793: PPUSH
64794: CALL_OW 251
64798: PPUSH
64799: LD_VAR 0 2
64803: PPUSH
64804: LD_INT 1
64806: PPUSH
64807: CALL_OW 273
64811: ST_TO_ADDR
// if ValidHex ( x , y ) then
64812: LD_VAR 0 4
64816: PPUSH
64817: LD_VAR 0 5
64821: PPUSH
64822: CALL_OW 488
64826: IFFALSE 64847
// ComTurnXY ( unit , x , y ) ;
64828: LD_VAR 0 1
64832: PPUSH
64833: LD_VAR 0 4
64837: PPUSH
64838: LD_VAR 0 5
64842: PPUSH
64843: CALL_OW 118
// end ;
64847: LD_VAR 0 3
64851: RET
// export function SeeUnits ( side , units ) ; var i ; begin
64852: LD_INT 0
64854: PPUSH
64855: PPUSH
// result := false ;
64856: LD_ADDR_VAR 0 3
64860: PUSH
64861: LD_INT 0
64863: ST_TO_ADDR
// if not units then
64864: LD_VAR 0 2
64868: NOT
64869: IFFALSE 64873
// exit ;
64871: GO 64918
// for i in units do
64873: LD_ADDR_VAR 0 4
64877: PUSH
64878: LD_VAR 0 2
64882: PUSH
64883: FOR_IN
64884: IFFALSE 64916
// if See ( side , i ) then
64886: LD_VAR 0 1
64890: PPUSH
64891: LD_VAR 0 4
64895: PPUSH
64896: CALL_OW 292
64900: IFFALSE 64914
// begin result := true ;
64902: LD_ADDR_VAR 0 3
64906: PUSH
64907: LD_INT 1
64909: ST_TO_ADDR
// exit ;
64910: POP
64911: POP
64912: GO 64918
// end ;
64914: GO 64883
64916: POP
64917: POP
// end ;
64918: LD_VAR 0 3
64922: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
64923: LD_INT 0
64925: PPUSH
64926: PPUSH
64927: PPUSH
64928: PPUSH
// if not unit or not points then
64929: LD_VAR 0 1
64933: NOT
64934: PUSH
64935: LD_VAR 0 2
64939: NOT
64940: OR
64941: IFFALSE 64945
// exit ;
64943: GO 65035
// dist := 99999 ;
64945: LD_ADDR_VAR 0 5
64949: PUSH
64950: LD_INT 99999
64952: ST_TO_ADDR
// for i in points do
64953: LD_ADDR_VAR 0 4
64957: PUSH
64958: LD_VAR 0 2
64962: PUSH
64963: FOR_IN
64964: IFFALSE 65033
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
64966: LD_ADDR_VAR 0 6
64970: PUSH
64971: LD_VAR 0 1
64975: PPUSH
64976: LD_VAR 0 4
64980: PUSH
64981: LD_INT 1
64983: ARRAY
64984: PPUSH
64985: LD_VAR 0 4
64989: PUSH
64990: LD_INT 2
64992: ARRAY
64993: PPUSH
64994: CALL_OW 297
64998: ST_TO_ADDR
// if tmpDist < dist then
64999: LD_VAR 0 6
65003: PUSH
65004: LD_VAR 0 5
65008: LESS
65009: IFFALSE 65031
// begin result := i ;
65011: LD_ADDR_VAR 0 3
65015: PUSH
65016: LD_VAR 0 4
65020: ST_TO_ADDR
// dist := tmpDist ;
65021: LD_ADDR_VAR 0 5
65025: PUSH
65026: LD_VAR 0 6
65030: ST_TO_ADDR
// end ; end ;
65031: GO 64963
65033: POP
65034: POP
// end ; end_of_file
65035: LD_VAR 0 3
65039: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
65040: LD_VAR 0 1
65044: PPUSH
65045: LD_VAR 0 2
65049: PPUSH
65050: LD_VAR 0 3
65054: PPUSH
65055: LD_VAR 0 4
65059: PPUSH
65060: LD_VAR 0 5
65064: PPUSH
65065: LD_VAR 0 6
65069: PPUSH
65070: CALL 5910 0 6
// end ;
65074: PPOPN 6
65076: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
65077: CALL 5885 0 0
// end ;
65081: PPOPN 1
65083: END
