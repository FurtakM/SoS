// export JMM , Gladstone , Denis , Lisa , Frank , Bobby , Cyrus , Brown , Donaldson ; export others , randomsDelta ; export apemans , yourApemans ; export yourVehicles ; export DeltaDoctor ; export Harisson ; export selectedPeople ; export baseCorrect ; export cutscene ; export lab ; export resources ; export mission_prefix , mission_prefix_prev ; starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// FogOff ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 344
// baseCorrect = 0 ;
  15: LD_ADDR_EXP 18
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// cutscene = 1 ;
  23: LD_ADDR_EXP 19
  27: PUSH
  28: LD_INT 1
  30: ST_TO_ADDR
// apemans = [ ] ;
  31: LD_ADDR_EXP 12
  35: PUSH
  36: EMPTY
  37: ST_TO_ADDR
// yourApemans = [ ] ;
  38: LD_ADDR_EXP 13
  42: PUSH
  43: EMPTY
  44: ST_TO_ADDR
// yourVehicles = [ ] ;
  45: LD_ADDR_EXP 14
  49: PUSH
  50: EMPTY
  51: ST_TO_ADDR
// randomsDelta := [ ] ;
  52: LD_ADDR_EXP 11
  56: PUSH
  57: EMPTY
  58: ST_TO_ADDR
// resources = [ ] ;
  59: LD_ADDR_EXP 21
  63: PUSH
  64: EMPTY
  65: ST_TO_ADDR
// mission_prefix := 06_ ;
  66: LD_ADDR_EXP 22
  70: PUSH
  71: LD_STRING 06_
  73: ST_TO_ADDR
// mission_prefix_prev := 05_ ;
  74: LD_ADDR_EXP 23
  78: PUSH
  79: LD_STRING 05_
  81: ST_TO_ADDR
// CreateNature ;
  82: CALL 166 0 0
// PrepareDeltaBase ;
  86: CALL 2408 0 0
// LoadVehicles ;
  90: CALL 1448 0 0
// PrepareHeroes ;
  94: CALL 287 0 0
// PrepareRandoms ;
  98: CALL 1749 0 0
// lab = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
 102: LD_ADDR_EXP 20
 106: PUSH
 107: LD_INT 22
 109: PUSH
 110: LD_INT 1
 112: PUSH
 113: EMPTY
 114: LIST
 115: LIST
 116: PUSH
 117: LD_INT 2
 119: PUSH
 120: LD_INT 30
 122: PUSH
 123: LD_INT 6
 125: PUSH
 126: EMPTY
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 30
 132: PUSH
 133: LD_INT 7
 135: PUSH
 136: EMPTY
 137: LIST
 138: LIST
 139: PUSH
 140: LD_INT 30
 142: PUSH
 143: LD_INT 8
 145: PUSH
 146: EMPTY
 147: LIST
 148: LIST
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: LIST
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: PPUSH
 160: CALL_OW 69
 164: ST_TO_ADDR
// end ;
 165: END
// export function CreateNature ; var i ; begin
 166: LD_INT 0
 168: PPUSH
 169: PPUSH
// uc_side := 0 ;
 170: LD_ADDR_OWVAR 20
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// uc_nation := 0 ;
 178: LD_ADDR_OWVAR 21
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// for i = 1 to 4 do
 186: LD_ADDR_VAR 0 2
 190: PUSH
 191: DOUBLE
 192: LD_INT 1
 194: DEC
 195: ST_TO_ADDR
 196: LD_INT 4
 198: PUSH
 199: FOR_TO
 200: IFFALSE 280
// begin hc_gallery :=  ;
 202: LD_ADDR_OWVAR 33
 206: PUSH
 207: LD_STRING 
 209: ST_TO_ADDR
// hc_name :=  ;
 210: LD_ADDR_OWVAR 26
 214: PUSH
 215: LD_STRING 
 217: ST_TO_ADDR
// hc_attr := [ rand ( 10 , 11 ) , rand ( 10 , 12 ) ] ;
 218: LD_ADDR_OWVAR 29
 222: PUSH
 223: LD_INT 10
 225: PPUSH
 226: LD_INT 11
 228: PPUSH
 229: CALL_OW 12
 233: PUSH
 234: LD_INT 10
 236: PPUSH
 237: LD_INT 12
 239: PPUSH
 240: CALL_OW 12
 244: PUSH
 245: EMPTY
 246: LIST
 247: LIST
 248: ST_TO_ADDR
// hc_class := class_apeman ;
 249: LD_ADDR_OWVAR 28
 253: PUSH
 254: LD_INT 12
 256: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , 22 , 18 , 20 , false ) ;
 257: CALL_OW 44
 261: PPUSH
 262: LD_INT 22
 264: PPUSH
 265: LD_INT 18
 267: PPUSH
 268: LD_INT 20
 270: PPUSH
 271: LD_INT 0
 273: PPUSH
 274: CALL_OW 50
// end ;
 278: GO 199
 280: POP
 281: POP
// end ; end_of_file
 282: LD_VAR 0 1
 286: RET
// export function PrepareHeroes ; var i , tmp , ape , test ; begin
 287: LD_INT 0
 289: PPUSH
 290: PPUSH
 291: PPUSH
 292: PPUSH
 293: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
 294: LD_ADDR_VAR 0 3
 298: PUSH
 299: LD_INT 22
 301: PUSH
 302: LD_INT 1
 304: PUSH
 305: EMPTY
 306: LIST
 307: LIST
 308: PUSH
 309: LD_INT 21
 311: PUSH
 312: LD_INT 3
 314: PUSH
 315: EMPTY
 316: LIST
 317: LIST
 318: PUSH
 319: LD_INT 30
 321: PUSH
 322: LD_INT 0
 324: PUSH
 325: EMPTY
 326: LIST
 327: LIST
 328: PUSH
 329: EMPTY
 330: LIST
 331: LIST
 332: LIST
 333: PPUSH
 334: CALL_OW 69
 338: ST_TO_ADDR
// SetBName ( tmp [ 1 ] , delta ) ;
 339: LD_VAR 0 3
 343: PUSH
 344: LD_INT 1
 346: ARRAY
 347: PPUSH
 348: LD_STRING delta
 350: PPUSH
 351: CALL_OW 500
// uc_side = 1 ;
 355: LD_ADDR_OWVAR 20
 359: PUSH
 360: LD_INT 1
 362: ST_TO_ADDR
// uc_nation = 1 ;
 363: LD_ADDR_OWVAR 21
 367: PUSH
 368: LD_INT 1
 370: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true , mission_prefix_prev ) ;
 371: LD_ADDR_EXP 1
 375: PUSH
 376: LD_STRING JMM
 378: PPUSH
 379: LD_INT 1
 381: PPUSH
 382: LD_EXP 23
 386: PPUSH
 387: CALL 23125 0 3
 391: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ,  ) ;
 392: LD_ADDR_EXP 16
 396: PUSH
 397: LD_STRING Harisson
 399: PPUSH
 400: LD_INT 0
 402: PPUSH
 403: LD_STRING 
 405: PPUSH
 406: CALL 23125 0 3
 410: ST_TO_ADDR
// PlaceUnitXYR ( JMM , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 411: LD_EXP 1
 415: PPUSH
 416: LD_VAR 0 3
 420: PUSH
 421: LD_INT 1
 423: ARRAY
 424: PPUSH
 425: CALL_OW 250
 429: PPUSH
 430: LD_VAR 0 3
 434: PUSH
 435: LD_INT 1
 437: ARRAY
 438: PPUSH
 439: CALL_OW 251
 443: PPUSH
 444: LD_INT 5
 446: PPUSH
 447: LD_INT 0
 449: PPUSH
 450: CALL_OW 50
// SetClass ( JMM , 1 ) ;
 454: LD_EXP 1
 458: PPUSH
 459: LD_INT 1
 461: PPUSH
 462: CALL_OW 336
// Gladstone = PrepareUnit ( Gladstone , true , mission_prefix_prev ) ;
 466: LD_ADDR_EXP 2
 470: PUSH
 471: LD_STRING Gladstone
 473: PPUSH
 474: LD_INT 1
 476: PPUSH
 477: LD_EXP 23
 481: PPUSH
 482: CALL 23125 0 3
 486: ST_TO_ADDR
// PlaceUnitXYR ( Gladstone , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 487: LD_EXP 2
 491: PPUSH
 492: LD_VAR 0 3
 496: PUSH
 497: LD_INT 1
 499: ARRAY
 500: PPUSH
 501: CALL_OW 250
 505: PPUSH
 506: LD_VAR 0 3
 510: PUSH
 511: LD_INT 1
 513: ARRAY
 514: PPUSH
 515: CALL_OW 251
 519: PPUSH
 520: LD_INT 5
 522: PPUSH
 523: LD_INT 0
 525: PPUSH
 526: CALL_OW 50
// SetClass ( Gladstone , 4 ) ;
 530: LD_EXP 2
 534: PPUSH
 535: LD_INT 4
 537: PPUSH
 538: CALL_OW 336
// Denis = PrepareUnit ( Denis , true , mission_prefix_prev ) ;
 542: LD_ADDR_EXP 3
 546: PUSH
 547: LD_STRING Denis
 549: PPUSH
 550: LD_INT 1
 552: PPUSH
 553: LD_EXP 23
 557: PPUSH
 558: CALL 23125 0 3
 562: ST_TO_ADDR
// PlaceUnitXYR ( Denis , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 563: LD_EXP 3
 567: PPUSH
 568: LD_VAR 0 3
 572: PUSH
 573: LD_INT 1
 575: ARRAY
 576: PPUSH
 577: CALL_OW 250
 581: PPUSH
 582: LD_VAR 0 3
 586: PUSH
 587: LD_INT 1
 589: ARRAY
 590: PPUSH
 591: CALL_OW 251
 595: PPUSH
 596: LD_INT 5
 598: PPUSH
 599: LD_INT 0
 601: PPUSH
 602: CALL_OW 50
// SetClass ( Denis , 4 ) ;
 606: LD_EXP 3
 610: PPUSH
 611: LD_INT 4
 613: PPUSH
 614: CALL_OW 336
// if LoadVariable ( FrankInDelta , 0 ) = 1 then
 618: LD_STRING FrankInDelta
 620: PPUSH
 621: LD_INT 0
 623: PPUSH
 624: CALL_OW 30
 628: PUSH
 629: LD_INT 1
 631: EQUAL
 632: IFFALSE 710
// begin Frank = PrepareUnit ( Frank , true , mission_prefix_prev ) ;
 634: LD_ADDR_EXP 5
 638: PUSH
 639: LD_STRING Frank
 641: PPUSH
 642: LD_INT 1
 644: PPUSH
 645: LD_EXP 23
 649: PPUSH
 650: CALL 23125 0 3
 654: ST_TO_ADDR
// PlaceUnitXYR ( Frank , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 655: LD_EXP 5
 659: PPUSH
 660: LD_VAR 0 3
 664: PUSH
 665: LD_INT 1
 667: ARRAY
 668: PPUSH
 669: CALL_OW 250
 673: PPUSH
 674: LD_VAR 0 3
 678: PUSH
 679: LD_INT 1
 681: ARRAY
 682: PPUSH
 683: CALL_OW 251
 687: PPUSH
 688: LD_INT 5
 690: PPUSH
 691: LD_INT 0
 693: PPUSH
 694: CALL_OW 50
// SetClass ( Frank , 1 ) ;
 698: LD_EXP 5
 702: PPUSH
 703: LD_INT 1
 705: PPUSH
 706: CALL_OW 336
// end ; if LoadVariable ( LisaInDelta , 0 ) = 1 then
 710: LD_STRING LisaInDelta
 712: PPUSH
 713: LD_INT 0
 715: PPUSH
 716: CALL_OW 30
 720: PUSH
 721: LD_INT 1
 723: EQUAL
 724: IFFALSE 802
// begin Lisa = PrepareUnit ( Lisa , true , mission_prefix_prev ) ;
 726: LD_ADDR_EXP 4
 730: PUSH
 731: LD_STRING Lisa
 733: PPUSH
 734: LD_INT 1
 736: PPUSH
 737: LD_EXP 23
 741: PPUSH
 742: CALL 23125 0 3
 746: ST_TO_ADDR
// PlaceUnitXYR ( Lisa , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 747: LD_EXP 4
 751: PPUSH
 752: LD_VAR 0 3
 756: PUSH
 757: LD_INT 1
 759: ARRAY
 760: PPUSH
 761: CALL_OW 250
 765: PPUSH
 766: LD_VAR 0 3
 770: PUSH
 771: LD_INT 1
 773: ARRAY
 774: PPUSH
 775: CALL_OW 251
 779: PPUSH
 780: LD_INT 5
 782: PPUSH
 783: LD_INT 0
 785: PPUSH
 786: CALL_OW 50
// SetClass ( Lisa , 1 ) ;
 790: LD_EXP 4
 794: PPUSH
 795: LD_INT 1
 797: PPUSH
 798: CALL_OW 336
// end ; if LoadVariable ( BobbyInDelta , 0 ) = 1 then
 802: LD_STRING BobbyInDelta
 804: PPUSH
 805: LD_INT 0
 807: PPUSH
 808: CALL_OW 30
 812: PUSH
 813: LD_INT 1
 815: EQUAL
 816: IFFALSE 894
// begin Bobby = PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 818: LD_ADDR_EXP 6
 822: PUSH
 823: LD_STRING Bobby
 825: PPUSH
 826: LD_INT 1
 828: PPUSH
 829: LD_EXP 23
 833: PPUSH
 834: CALL 23125 0 3
 838: ST_TO_ADDR
// PlaceUnitXYR ( Bobby , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 839: LD_EXP 6
 843: PPUSH
 844: LD_VAR 0 3
 848: PUSH
 849: LD_INT 1
 851: ARRAY
 852: PPUSH
 853: CALL_OW 250
 857: PPUSH
 858: LD_VAR 0 3
 862: PUSH
 863: LD_INT 1
 865: ARRAY
 866: PPUSH
 867: CALL_OW 251
 871: PPUSH
 872: LD_INT 5
 874: PPUSH
 875: LD_INT 0
 877: PPUSH
 878: CALL_OW 50
// SetClass ( Bobby , 1 ) ;
 882: LD_EXP 6
 886: PPUSH
 887: LD_INT 1
 889: PPUSH
 890: CALL_OW 336
// end ; if LoadVariable ( CyrusInDelta , 0 ) = 1 then
 894: LD_STRING CyrusInDelta
 896: PPUSH
 897: LD_INT 0
 899: PPUSH
 900: CALL_OW 30
 904: PUSH
 905: LD_INT 1
 907: EQUAL
 908: IFFALSE 986
// begin Cyrus = PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
 910: LD_ADDR_EXP 7
 914: PUSH
 915: LD_STRING Cyrus
 917: PPUSH
 918: LD_INT 1
 920: PPUSH
 921: LD_EXP 23
 925: PPUSH
 926: CALL 23125 0 3
 930: ST_TO_ADDR
// PlaceUnitXYR ( Cyrus , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 931: LD_EXP 7
 935: PPUSH
 936: LD_VAR 0 3
 940: PUSH
 941: LD_INT 1
 943: ARRAY
 944: PPUSH
 945: CALL_OW 250
 949: PPUSH
 950: LD_VAR 0 3
 954: PUSH
 955: LD_INT 1
 957: ARRAY
 958: PPUSH
 959: CALL_OW 251
 963: PPUSH
 964: LD_INT 5
 966: PPUSH
 967: LD_INT 0
 969: PPUSH
 970: CALL_OW 50
// SetClass ( Cyrus , 1 ) ;
 974: LD_EXP 7
 978: PPUSH
 979: LD_INT 1
 981: PPUSH
 982: CALL_OW 336
// end ; if LoadVariable ( DonaldsonInDelta , 0 ) = 1 then
 986: LD_STRING DonaldsonInDelta
 988: PPUSH
 989: LD_INT 0
 991: PPUSH
 992: CALL_OW 30
 996: PUSH
 997: LD_INT 1
 999: EQUAL
1000: IFFALSE 1078
// begin Donaldson = PrepareUnit ( Donaldson , true , mission_prefix_prev ) ;
1002: LD_ADDR_EXP 9
1006: PUSH
1007: LD_STRING Donaldson
1009: PPUSH
1010: LD_INT 1
1012: PPUSH
1013: LD_EXP 23
1017: PPUSH
1018: CALL 23125 0 3
1022: ST_TO_ADDR
// PlaceUnitXYR ( Donaldson , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1023: LD_EXP 9
1027: PPUSH
1028: LD_VAR 0 3
1032: PUSH
1033: LD_INT 1
1035: ARRAY
1036: PPUSH
1037: CALL_OW 250
1041: PPUSH
1042: LD_VAR 0 3
1046: PUSH
1047: LD_INT 1
1049: ARRAY
1050: PPUSH
1051: CALL_OW 251
1055: PPUSH
1056: LD_INT 5
1058: PPUSH
1059: LD_INT 0
1061: PPUSH
1062: CALL_OW 50
// SetClass ( Donaldson , 1 ) ;
1066: LD_EXP 9
1070: PPUSH
1071: LD_INT 1
1073: PPUSH
1074: CALL_OW 336
// end ; if LoadVariable ( BrownInDelta , 0 ) = 1 then
1078: LD_STRING BrownInDelta
1080: PPUSH
1081: LD_INT 0
1083: PPUSH
1084: CALL_OW 30
1088: PUSH
1089: LD_INT 1
1091: EQUAL
1092: IFFALSE 1170
// begin Brown = PrepareUnit ( Brown , true , mission_prefix_prev ) ;
1094: LD_ADDR_EXP 8
1098: PUSH
1099: LD_STRING Brown
1101: PPUSH
1102: LD_INT 1
1104: PPUSH
1105: LD_EXP 23
1109: PPUSH
1110: CALL 23125 0 3
1114: ST_TO_ADDR
// PlaceUnitXYR ( Brown , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1115: LD_EXP 8
1119: PPUSH
1120: LD_VAR 0 3
1124: PUSH
1125: LD_INT 1
1127: ARRAY
1128: PPUSH
1129: CALL_OW 250
1133: PPUSH
1134: LD_VAR 0 3
1138: PUSH
1139: LD_INT 1
1141: ARRAY
1142: PPUSH
1143: CALL_OW 251
1147: PPUSH
1148: LD_INT 5
1150: PPUSH
1151: LD_INT 0
1153: PPUSH
1154: CALL_OW 50
// SetClass ( Brown , 2 ) ;
1158: LD_EXP 8
1162: PPUSH
1163: LD_INT 2
1165: PPUSH
1166: CALL_OW 336
// end ; others = CreateCharacterSet ( othersInDelta ) ;
1170: LD_ADDR_EXP 10
1174: PUSH
1175: LD_STRING othersInDelta
1177: PPUSH
1178: CALL_OW 31
1182: ST_TO_ADDR
// for i in others do
1183: LD_ADDR_VAR 0 2
1187: PUSH
1188: LD_EXP 10
1192: PUSH
1193: FOR_IN
1194: IFFALSE 1241
// PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1196: LD_VAR 0 2
1200: PPUSH
1201: LD_VAR 0 3
1205: PUSH
1206: LD_INT 1
1208: ARRAY
1209: PPUSH
1210: CALL_OW 250
1214: PPUSH
1215: LD_VAR 0 3
1219: PUSH
1220: LD_INT 1
1222: ARRAY
1223: PPUSH
1224: CALL_OW 251
1228: PPUSH
1229: LD_INT 35
1231: PPUSH
1232: LD_INT 0
1234: PPUSH
1235: CALL_OW 50
1239: GO 1193
1241: POP
1242: POP
// apemans = CreateCharacterSet ( apeInDelta ) ;
1243: LD_ADDR_EXP 12
1247: PUSH
1248: LD_STRING apeInDelta
1250: PPUSH
1251: CALL_OW 31
1255: ST_TO_ADDR
// uc_nation = 0 ;
1256: LD_ADDR_OWVAR 21
1260: PUSH
1261: LD_INT 0
1263: ST_TO_ADDR
// if apemans > 5 then
1264: LD_EXP 12
1268: PUSH
1269: LD_INT 5
1271: GREATER
1272: IFFALSE 1367
// begin for i := 1 to 5 do
1274: LD_ADDR_VAR 0 2
1278: PUSH
1279: DOUBLE
1280: LD_INT 1
1282: DEC
1283: ST_TO_ADDR
1284: LD_INT 5
1286: PUSH
1287: FOR_TO
1288: IFFALSE 1363
// begin PlaceUnitXYR ( apemans [ i ] , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1290: LD_EXP 12
1294: PUSH
1295: LD_VAR 0 2
1299: ARRAY
1300: PPUSH
1301: LD_VAR 0 3
1305: PUSH
1306: LD_INT 1
1308: ARRAY
1309: PPUSH
1310: CALL_OW 250
1314: PPUSH
1315: LD_VAR 0 3
1319: PUSH
1320: LD_INT 1
1322: ARRAY
1323: PPUSH
1324: CALL_OW 251
1328: PPUSH
1329: LD_INT 50
1331: PPUSH
1332: LD_INT 0
1334: PPUSH
1335: CALL_OW 50
// yourApemans = yourApemans ^ apemans [ i ] ;
1339: LD_ADDR_EXP 13
1343: PUSH
1344: LD_EXP 13
1348: PUSH
1349: LD_EXP 12
1353: PUSH
1354: LD_VAR 0 2
1358: ARRAY
1359: ADD
1360: ST_TO_ADDR
// end ;
1361: GO 1287
1363: POP
1364: POP
// end else
1365: GO 1443
// begin for i in apemans do
1367: LD_ADDR_VAR 0 2
1371: PUSH
1372: LD_EXP 12
1376: PUSH
1377: FOR_IN
1378: IFFALSE 1441
// begin PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1380: LD_VAR 0 2
1384: PPUSH
1385: LD_VAR 0 3
1389: PUSH
1390: LD_INT 1
1392: ARRAY
1393: PPUSH
1394: CALL_OW 250
1398: PPUSH
1399: LD_VAR 0 3
1403: PUSH
1404: LD_INT 1
1406: ARRAY
1407: PPUSH
1408: CALL_OW 251
1412: PPUSH
1413: LD_INT 50
1415: PPUSH
1416: LD_INT 0
1418: PPUSH
1419: CALL_OW 50
// yourApemans = yourApemans ^ i ;
1423: LD_ADDR_EXP 13
1427: PUSH
1428: LD_EXP 13
1432: PUSH
1433: LD_VAR 0 2
1437: ADD
1438: ST_TO_ADDR
// end ;
1439: GO 1377
1441: POP
1442: POP
// end ; end ;
1443: LD_VAR 0 1
1447: RET
// export function LoadVehicles ; var i , veh , tmp , vehicles ; begin
1448: LD_INT 0
1450: PPUSH
1451: PPUSH
1452: PPUSH
1453: PPUSH
1454: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1455: LD_ADDR_VAR 0 4
1459: PUSH
1460: LD_INT 22
1462: PUSH
1463: LD_INT 1
1465: PUSH
1466: EMPTY
1467: LIST
1468: LIST
1469: PUSH
1470: LD_INT 21
1472: PUSH
1473: LD_INT 3
1475: PUSH
1476: EMPTY
1477: LIST
1478: LIST
1479: PUSH
1480: LD_INT 30
1482: PUSH
1483: LD_INT 0
1485: PUSH
1486: EMPTY
1487: LIST
1488: LIST
1489: PUSH
1490: EMPTY
1491: LIST
1492: LIST
1493: LIST
1494: PPUSH
1495: CALL_OW 69
1499: ST_TO_ADDR
// uc_side = 1 ;
1500: LD_ADDR_OWVAR 20
1504: PUSH
1505: LD_INT 1
1507: ST_TO_ADDR
// vehicles = LoadVariable ( vehiclesInDelta , [ ] ) ;
1508: LD_ADDR_VAR 0 5
1512: PUSH
1513: LD_STRING vehiclesInDelta
1515: PPUSH
1516: EMPTY
1517: PPUSH
1518: CALL_OW 30
1522: ST_TO_ADDR
// for i = 1 to vehicles do
1523: LD_ADDR_VAR 0 2
1527: PUSH
1528: DOUBLE
1529: LD_INT 1
1531: DEC
1532: ST_TO_ADDR
1533: LD_VAR 0 5
1537: PUSH
1538: FOR_TO
1539: IFFALSE 1742
// begin if vehicles [ i + 4 ] = 11 or vehicles [ i ] = 3 then
1541: LD_VAR 0 5
1545: PUSH
1546: LD_VAR 0 2
1550: PUSH
1551: LD_INT 4
1553: PLUS
1554: ARRAY
1555: PUSH
1556: LD_INT 11
1558: EQUAL
1559: PUSH
1560: LD_VAR 0 5
1564: PUSH
1565: LD_VAR 0 2
1569: ARRAY
1570: PUSH
1571: LD_INT 3
1573: EQUAL
1574: OR
1575: IFFALSE 1726
// begin uc_nation = vehicles [ i ] ;
1577: LD_ADDR_OWVAR 21
1581: PUSH
1582: LD_VAR 0 5
1586: PUSH
1587: LD_VAR 0 2
1591: ARRAY
1592: ST_TO_ADDR
// vc_chassis = vehicles [ i + 1 ] ;
1593: LD_ADDR_OWVAR 37
1597: PUSH
1598: LD_VAR 0 5
1602: PUSH
1603: LD_VAR 0 2
1607: PUSH
1608: LD_INT 1
1610: PLUS
1611: ARRAY
1612: ST_TO_ADDR
// vc_engine = vehicles [ i + 2 ] ;
1613: LD_ADDR_OWVAR 39
1617: PUSH
1618: LD_VAR 0 5
1622: PUSH
1623: LD_VAR 0 2
1627: PUSH
1628: LD_INT 2
1630: PLUS
1631: ARRAY
1632: ST_TO_ADDR
// vc_control = vehicles [ i + 3 ] ;
1633: LD_ADDR_OWVAR 38
1637: PUSH
1638: LD_VAR 0 5
1642: PUSH
1643: LD_VAR 0 2
1647: PUSH
1648: LD_INT 3
1650: PLUS
1651: ARRAY
1652: ST_TO_ADDR
// vc_weapon = vehicles [ i + 4 ] ;
1653: LD_ADDR_OWVAR 40
1657: PUSH
1658: LD_VAR 0 5
1662: PUSH
1663: LD_VAR 0 2
1667: PUSH
1668: LD_INT 4
1670: PLUS
1671: ARRAY
1672: ST_TO_ADDR
// veh = CreateVehicle ;
1673: LD_ADDR_VAR 0 3
1677: PUSH
1678: CALL_OW 45
1682: ST_TO_ADDR
// PlaceUnitXYR ( veh , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 40 , false ) ;
1683: LD_VAR 0 3
1687: PPUSH
1688: LD_VAR 0 4
1692: PUSH
1693: LD_INT 1
1695: ARRAY
1696: PPUSH
1697: CALL_OW 250
1701: PPUSH
1702: LD_VAR 0 4
1706: PUSH
1707: LD_INT 1
1709: ARRAY
1710: PPUSH
1711: CALL_OW 251
1715: PPUSH
1716: LD_INT 40
1718: PPUSH
1719: LD_INT 0
1721: PPUSH
1722: CALL_OW 50
// end ; i = i + 4 ;
1726: LD_ADDR_VAR 0 2
1730: PUSH
1731: LD_VAR 0 2
1735: PUSH
1736: LD_INT 4
1738: PLUS
1739: ST_TO_ADDR
// end ;
1740: GO 1538
1742: POP
1743: POP
// end ;
1744: LD_VAR 0 1
1748: RET
// export function PrepareRandoms ; var i , un , tmp , filter ; begin
1749: LD_INT 0
1751: PPUSH
1752: PPUSH
1753: PPUSH
1754: PPUSH
1755: PPUSH
// uc_side = 1 ;
1756: LD_ADDR_OWVAR 20
1760: PUSH
1761: LD_INT 1
1763: ST_TO_ADDR
// uc_nation = 1 ;
1764: LD_ADDR_OWVAR 21
1768: PUSH
1769: LD_INT 1
1771: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1772: LD_ADDR_VAR 0 4
1776: PUSH
1777: LD_INT 22
1779: PUSH
1780: LD_INT 1
1782: PUSH
1783: EMPTY
1784: LIST
1785: LIST
1786: PUSH
1787: LD_INT 21
1789: PUSH
1790: LD_INT 3
1792: PUSH
1793: EMPTY
1794: LIST
1795: LIST
1796: PUSH
1797: LD_INT 30
1799: PUSH
1800: LD_INT 0
1802: PUSH
1803: EMPTY
1804: LIST
1805: LIST
1806: PUSH
1807: EMPTY
1808: LIST
1809: LIST
1810: LIST
1811: PPUSH
1812: CALL_OW 69
1816: ST_TO_ADDR
// if FilterAllunits ( [ [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] then
1817: LD_INT 22
1819: PUSH
1820: LD_INT 1
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: PUSH
1827: LD_INT 25
1829: PUSH
1830: LD_INT 4
1832: PUSH
1833: EMPTY
1834: LIST
1835: LIST
1836: PUSH
1837: LD_INT 26
1839: PUSH
1840: LD_INT 1
1842: PUSH
1843: EMPTY
1844: LIST
1845: LIST
1846: PUSH
1847: EMPTY
1848: LIST
1849: LIST
1850: LIST
1851: PUSH
1852: EMPTY
1853: LIST
1854: PPUSH
1855: CALL_OW 69
1859: PUSH
1860: LD_EXP 1
1864: PUSH
1865: LD_EXP 7
1869: PUSH
1870: LD_EXP 6
1874: PUSH
1875: LD_EXP 5
1879: PUSH
1880: LD_EXP 2
1884: PUSH
1885: LD_EXP 3
1889: PUSH
1890: LD_EXP 8
1894: PUSH
1895: EMPTY
1896: LIST
1897: LIST
1898: LIST
1899: LIST
1900: LIST
1901: LIST
1902: LIST
1903: DIFF
1904: IFFALSE 2005
// deltaDoctor := ( FilterAllunits ( [ [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] ) [ 1 ] else
1906: LD_ADDR_EXP 15
1910: PUSH
1911: LD_INT 22
1913: PUSH
1914: LD_INT 1
1916: PUSH
1917: EMPTY
1918: LIST
1919: LIST
1920: PUSH
1921: LD_INT 25
1923: PUSH
1924: LD_INT 4
1926: PUSH
1927: EMPTY
1928: LIST
1929: LIST
1930: PUSH
1931: LD_INT 26
1933: PUSH
1934: LD_INT 1
1936: PUSH
1937: EMPTY
1938: LIST
1939: LIST
1940: PUSH
1941: EMPTY
1942: LIST
1943: LIST
1944: LIST
1945: PUSH
1946: EMPTY
1947: LIST
1948: PPUSH
1949: CALL_OW 69
1953: PUSH
1954: LD_EXP 1
1958: PUSH
1959: LD_EXP 7
1963: PUSH
1964: LD_EXP 6
1968: PUSH
1969: LD_EXP 5
1973: PUSH
1974: LD_EXP 2
1978: PUSH
1979: LD_EXP 3
1983: PUSH
1984: LD_EXP 8
1988: PUSH
1989: EMPTY
1990: LIST
1991: LIST
1992: LIST
1993: LIST
1994: LIST
1995: LIST
1996: LIST
1997: DIFF
1998: PUSH
1999: LD_INT 1
2001: ARRAY
2002: ST_TO_ADDR
2003: GO 2152
// begin filter := FilterAllunits ( [ [ [ f_side , 1 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] ;
2005: LD_ADDR_VAR 0 5
2009: PUSH
2010: LD_INT 22
2012: PUSH
2013: LD_INT 1
2015: PUSH
2016: EMPTY
2017: LIST
2018: LIST
2019: PUSH
2020: LD_INT 26
2022: PUSH
2023: LD_INT 1
2025: PUSH
2026: EMPTY
2027: LIST
2028: LIST
2029: PUSH
2030: EMPTY
2031: LIST
2032: LIST
2033: PUSH
2034: EMPTY
2035: LIST
2036: PPUSH
2037: CALL_OW 69
2041: PUSH
2042: LD_EXP 1
2046: PUSH
2047: LD_EXP 7
2051: PUSH
2052: LD_EXP 6
2056: PUSH
2057: LD_EXP 5
2061: PUSH
2062: LD_EXP 2
2066: PUSH
2067: LD_EXP 3
2071: PUSH
2072: LD_EXP 8
2076: PUSH
2077: EMPTY
2078: LIST
2079: LIST
2080: LIST
2081: LIST
2082: LIST
2083: LIST
2084: LIST
2085: DIFF
2086: ST_TO_ADDR
// if filter then
2087: LD_VAR 0 5
2091: IFFALSE 2152
// for i in filter do
2093: LD_ADDR_VAR 0 2
2097: PUSH
2098: LD_VAR 0 5
2102: PUSH
2103: FOR_IN
2104: IFFALSE 2150
// if GetSkill ( i , 4 ) >= 4 then
2106: LD_VAR 0 2
2110: PPUSH
2111: LD_INT 4
2113: PPUSH
2114: CALL_OW 259
2118: PUSH
2119: LD_INT 4
2121: GREATEREQUAL
2122: IFFALSE 2148
// begin deltaDoctor := i ;
2124: LD_ADDR_EXP 15
2128: PUSH
2129: LD_VAR 0 2
2133: ST_TO_ADDR
// SetClass ( deltaDoctor , 4 ) ;
2134: LD_EXP 15
2138: PPUSH
2139: LD_INT 4
2141: PPUSH
2142: CALL_OW 336
// break ;
2146: GO 2150
// end ;
2148: GO 2103
2150: POP
2151: POP
// end ; for i = 1 to 7 do
2152: LD_ADDR_VAR 0 2
2156: PUSH
2157: DOUBLE
2158: LD_INT 1
2160: DEC
2161: ST_TO_ADDR
2162: LD_INT 7
2164: PUSH
2165: FOR_TO
2166: IFFALSE 2303
// begin hc_gallery =  ;
2168: LD_ADDR_OWVAR 33
2172: PUSH
2173: LD_STRING 
2175: ST_TO_ADDR
// hc_name =  ;
2176: LD_ADDR_OWVAR 26
2180: PUSH
2181: LD_STRING 
2183: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 3 , 5 ) ) ;
2184: LD_INT 0
2186: PPUSH
2187: LD_INT 1
2189: PUSH
2190: LD_INT 2
2192: PUSH
2193: LD_INT 3
2195: PUSH
2196: LD_INT 4
2198: PUSH
2199: EMPTY
2200: LIST
2201: LIST
2202: LIST
2203: LIST
2204: PUSH
2205: LD_INT 1
2207: PPUSH
2208: LD_INT 4
2210: PPUSH
2211: CALL_OW 12
2215: ARRAY
2216: PPUSH
2217: LD_INT 3
2219: PPUSH
2220: LD_INT 5
2222: PPUSH
2223: CALL_OW 12
2227: PPUSH
2228: CALL_OW 380
// un = CreateHuman ;
2232: LD_ADDR_VAR 0 3
2236: PUSH
2237: CALL_OW 44
2241: ST_TO_ADDR
// randomsDelta := randomsDelta ^ un ;
2242: LD_ADDR_EXP 11
2246: PUSH
2247: LD_EXP 11
2251: PUSH
2252: LD_VAR 0 3
2256: ADD
2257: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
2258: LD_VAR 0 3
2262: PPUSH
2263: LD_VAR 0 4
2267: PUSH
2268: LD_INT 1
2270: ARRAY
2271: PPUSH
2272: CALL_OW 250
2276: PPUSH
2277: LD_VAR 0 4
2281: PUSH
2282: LD_INT 1
2284: ARRAY
2285: PPUSH
2286: CALL_OW 251
2290: PPUSH
2291: LD_INT 15
2293: PPUSH
2294: LD_INT 0
2296: PPUSH
2297: CALL_OW 50
// end ;
2301: GO 2165
2303: POP
2304: POP
// if deltaDoctor then
2305: LD_EXP 15
2309: IFFALSE 2313
// exit ;
2311: GO 2403
// hc_gallery = Dawkins ;
2313: LD_ADDR_OWVAR 33
2317: PUSH
2318: LD_STRING Dawkins
2320: ST_TO_ADDR
// hc_face_number := 1 ;
2321: LD_ADDR_OWVAR 34
2325: PUSH
2326: LD_INT 1
2328: ST_TO_ADDR
// hc_name = Dr. Adam Charles Dawkins ;
2329: LD_ADDR_OWVAR 26
2333: PUSH
2334: LD_STRING Dr. Adam Charles Dawkins
2336: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 6 ) ;
2337: LD_INT 1
2339: PPUSH
2340: LD_INT 4
2342: PPUSH
2343: LD_INT 6
2345: PPUSH
2346: CALL_OW 380
// deltaDoctor = CreateHuman ;
2350: LD_ADDR_EXP 15
2354: PUSH
2355: CALL_OW 44
2359: ST_TO_ADDR
// PlaceUnitXYR ( deltaDoctor , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
2360: LD_EXP 15
2364: PPUSH
2365: LD_VAR 0 4
2369: PUSH
2370: LD_INT 1
2372: ARRAY
2373: PPUSH
2374: CALL_OW 250
2378: PPUSH
2379: LD_VAR 0 4
2383: PUSH
2384: LD_INT 1
2386: ARRAY
2387: PPUSH
2388: CALL_OW 251
2392: PPUSH
2393: LD_INT 5
2395: PPUSH
2396: LD_INT 0
2398: PPUSH
2399: CALL_OW 50
// end ; end_of_file
2403: LD_VAR 0 1
2407: RET
// export function PrepareDeltaBase ; var i , j , building , buildings , lab , tmp ; begin
2408: LD_INT 0
2410: PPUSH
2411: PPUSH
2412: PPUSH
2413: PPUSH
2414: PPUSH
2415: PPUSH
2416: PPUSH
// buildings = LoadVariable ( buildingsInDelta , [ ] ) ;
2417: LD_ADDR_VAR 0 5
2421: PUSH
2422: LD_STRING buildingsInDelta
2424: PPUSH
2425: EMPTY
2426: PPUSH
2427: CALL_OW 30
2431: ST_TO_ADDR
// SetResourceVisibility ( 68 , 40 , 1 ) ;
2432: LD_INT 68
2434: PPUSH
2435: LD_INT 40
2437: PPUSH
2438: LD_INT 1
2440: PPUSH
2441: CALL_OW 441
// uc_side = 1 ;
2445: LD_ADDR_OWVAR 20
2449: PUSH
2450: LD_INT 1
2452: ST_TO_ADDR
// uc_nation = 1 ;
2453: LD_ADDR_OWVAR 21
2457: PUSH
2458: LD_INT 1
2460: ST_TO_ADDR
// for i = 1 to buildings do
2461: LD_ADDR_VAR 0 2
2465: PUSH
2466: DOUBLE
2467: LD_INT 1
2469: DEC
2470: ST_TO_ADDR
2471: LD_VAR 0 5
2475: PUSH
2476: FOR_TO
2477: IFFALSE 2775
// begin bc_type = buildings [ i ] [ 1 ] ;
2479: LD_ADDR_OWVAR 42
2483: PUSH
2484: LD_VAR 0 5
2488: PUSH
2489: LD_VAR 0 2
2493: ARRAY
2494: PUSH
2495: LD_INT 1
2497: ARRAY
2498: ST_TO_ADDR
// bc_level = buildings [ i ] [ 2 ] ;
2499: LD_ADDR_OWVAR 43
2503: PUSH
2504: LD_VAR 0 5
2508: PUSH
2509: LD_VAR 0 2
2513: ARRAY
2514: PUSH
2515: LD_INT 2
2517: ARRAY
2518: ST_TO_ADDR
// if bc_type = b_lab then
2519: LD_OWVAR 42
2523: PUSH
2524: LD_INT 6
2526: EQUAL
2527: IFFALSE 2545
// begin bc_kind1 = b_lab_basic ;
2529: LD_ADDR_OWVAR 44
2533: PUSH
2534: LD_INT 9
2536: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
2537: LD_ADDR_OWVAR 45
2541: PUSH
2542: LD_INT 9
2544: ST_TO_ADDR
// end ; if bc_type = b_lab_half or bc_type = b_lab_full then
2545: LD_OWVAR 42
2549: PUSH
2550: LD_INT 7
2552: EQUAL
2553: PUSH
2554: LD_OWVAR 42
2558: PUSH
2559: LD_INT 8
2561: EQUAL
2562: OR
2563: IFFALSE 2679
// begin if buildings [ i ] [ 6 ] then
2565: LD_VAR 0 5
2569: PUSH
2570: LD_VAR 0 2
2574: ARRAY
2575: PUSH
2576: LD_INT 6
2578: ARRAY
2579: IFFALSE 2601
// bc_kind1 = buildings [ i ] [ 6 ] ;
2581: LD_ADDR_OWVAR 44
2585: PUSH
2586: LD_VAR 0 5
2590: PUSH
2591: LD_VAR 0 2
2595: ARRAY
2596: PUSH
2597: LD_INT 6
2599: ARRAY
2600: ST_TO_ADDR
// if buildings [ i ] [ 7 ] then
2601: LD_VAR 0 5
2605: PUSH
2606: LD_VAR 0 2
2610: ARRAY
2611: PUSH
2612: LD_INT 7
2614: ARRAY
2615: IFFALSE 2637
// bc_kind2 = buildings [ i ] [ 7 ] ;
2617: LD_ADDR_OWVAR 45
2621: PUSH
2622: LD_VAR 0 5
2626: PUSH
2627: LD_VAR 0 2
2631: ARRAY
2632: PUSH
2633: LD_INT 7
2635: ARRAY
2636: ST_TO_ADDR
// if not buildings [ i ] [ 6 ] and not buildings [ i ] [ 7 ] then
2637: LD_VAR 0 5
2641: PUSH
2642: LD_VAR 0 2
2646: ARRAY
2647: PUSH
2648: LD_INT 6
2650: ARRAY
2651: NOT
2652: PUSH
2653: LD_VAR 0 5
2657: PUSH
2658: LD_VAR 0 2
2662: ARRAY
2663: PUSH
2664: LD_INT 7
2666: ARRAY
2667: NOT
2668: AND
2669: IFFALSE 2679
// bc_type := b_lab ;
2671: LD_ADDR_OWVAR 42
2675: PUSH
2676: LD_INT 6
2678: ST_TO_ADDR
// end ; building = CreateAndPlaceBuildingXYD ( buildings [ i ] [ 3 ] , buildings [ i ] [ 4 ] , buildings [ i ] [ 5 ] ) ;
2679: LD_ADDR_VAR 0 4
2683: PUSH
2684: LD_VAR 0 5
2688: PUSH
2689: LD_VAR 0 2
2693: ARRAY
2694: PUSH
2695: LD_INT 3
2697: ARRAY
2698: PPUSH
2699: LD_VAR 0 5
2703: PUSH
2704: LD_VAR 0 2
2708: ARRAY
2709: PUSH
2710: LD_INT 4
2712: ARRAY
2713: PPUSH
2714: LD_VAR 0 5
2718: PUSH
2719: LD_VAR 0 2
2723: ARRAY
2724: PUSH
2725: LD_INT 5
2727: ARRAY
2728: PPUSH
2729: CALL_OW 47
2733: ST_TO_ADDR
// if GetBType ( building ) = b_bunker then
2734: LD_VAR 0 4
2738: PPUSH
2739: CALL_OW 266
2743: PUSH
2744: LD_INT 32
2746: EQUAL
2747: IFFALSE 2773
// PlaceWeaponTurret ( building , buildings [ i ] [ 8 ] ) ;
2749: LD_VAR 0 4
2753: PPUSH
2754: LD_VAR 0 5
2758: PUSH
2759: LD_VAR 0 2
2763: ARRAY
2764: PUSH
2765: LD_INT 8
2767: ARRAY
2768: PPUSH
2769: CALL_OW 431
// end ;
2773: GO 2476
2775: POP
2776: POP
// lab = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
2777: LD_ADDR_VAR 0 6
2781: PUSH
2782: LD_INT 22
2784: PUSH
2785: LD_INT 1
2787: PUSH
2788: EMPTY
2789: LIST
2790: LIST
2791: PUSH
2792: LD_INT 2
2794: PUSH
2795: LD_INT 30
2797: PUSH
2798: LD_INT 6
2800: PUSH
2801: EMPTY
2802: LIST
2803: LIST
2804: PUSH
2805: LD_INT 30
2807: PUSH
2808: LD_INT 7
2810: PUSH
2811: EMPTY
2812: LIST
2813: LIST
2814: PUSH
2815: LD_INT 30
2817: PUSH
2818: LD_INT 8
2820: PUSH
2821: EMPTY
2822: LIST
2823: LIST
2824: PUSH
2825: EMPTY
2826: LIST
2827: LIST
2828: LIST
2829: LIST
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: PPUSH
2835: CALL_OW 69
2839: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) ;
2840: LD_ADDR_VAR 0 7
2844: PUSH
2845: LD_INT 22
2847: PUSH
2848: LD_INT 1
2850: PUSH
2851: EMPTY
2852: LIST
2853: LIST
2854: PUSH
2855: LD_INT 30
2857: PUSH
2858: LD_INT 0
2860: PUSH
2861: EMPTY
2862: LIST
2863: LIST
2864: PUSH
2865: EMPTY
2866: LIST
2867: LIST
2868: PPUSH
2869: CALL_OW 69
2873: ST_TO_ADDR
// if lab > 0 and tmp > 0 then
2874: LD_VAR 0 6
2878: PUSH
2879: LD_INT 0
2881: GREATER
2882: PUSH
2883: LD_VAR 0 7
2887: PUSH
2888: LD_INT 0
2890: GREATER
2891: AND
2892: IFFALSE 2902
// baseCorrect = 1 ;
2894: LD_ADDR_EXP 18
2898: PUSH
2899: LD_INT 1
2901: ST_TO_ADDR
// if baseCorrect = 0 then
2902: LD_EXP 18
2906: PUSH
2907: LD_INT 0
2909: EQUAL
2910: IFFALSE 3283
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
2912: LD_ADDR_VAR 0 2
2916: PUSH
2917: LD_INT 22
2919: PUSH
2920: LD_INT 1
2922: PUSH
2923: EMPTY
2924: LIST
2925: LIST
2926: PUSH
2927: LD_INT 21
2929: PUSH
2930: LD_INT 3
2932: PUSH
2933: EMPTY
2934: LIST
2935: LIST
2936: PUSH
2937: EMPTY
2938: LIST
2939: LIST
2940: PPUSH
2941: CALL_OW 69
2945: PUSH
2946: FOR_IN
2947: IFFALSE 2960
// RemoveUnit ( i ) ;
2949: LD_VAR 0 2
2953: PPUSH
2954: CALL_OW 64
2958: GO 2946
2960: POP
2961: POP
// uc_nation = 1 ;
2962: LD_ADDR_OWVAR 21
2966: PUSH
2967: LD_INT 1
2969: ST_TO_ADDR
// uc_side = 1 ;
2970: LD_ADDR_OWVAR 20
2974: PUSH
2975: LD_INT 1
2977: ST_TO_ADDR
// bc_level = 5 ;
2978: LD_ADDR_OWVAR 43
2982: PUSH
2983: LD_INT 5
2985: ST_TO_ADDR
// bc_type = b_depot ;
2986: LD_ADDR_OWVAR 42
2990: PUSH
2991: LD_INT 0
2993: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 50 , 22 , 0 ) ;
2994: LD_INT 50
2996: PPUSH
2997: LD_INT 22
2999: PPUSH
3000: LD_INT 0
3002: PPUSH
3003: CALL_OW 47
// bc_type = b_bunker ;
3007: LD_ADDR_OWVAR 42
3011: PUSH
3012: LD_INT 32
3014: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( 68 , 24 , 4 ) ;
3015: LD_ADDR_VAR 0 4
3019: PUSH
3020: LD_INT 68
3022: PPUSH
3023: LD_INT 24
3025: PPUSH
3026: LD_INT 4
3028: PPUSH
3029: CALL_OW 47
3033: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ Rand ( 1 , 2 ) ] ) ;
3034: LD_VAR 0 4
3038: PPUSH
3039: LD_INT 4
3041: PUSH
3042: LD_INT 11
3044: PUSH
3045: EMPTY
3046: LIST
3047: LIST
3048: PUSH
3049: LD_INT 1
3051: PPUSH
3052: LD_INT 2
3054: PPUSH
3055: CALL_OW 12
3059: ARRAY
3060: PPUSH
3061: CALL_OW 431
// building = CreateAndPlaceBuildingXYD ( 71 , 34 , 4 ) ;
3065: LD_ADDR_VAR 0 4
3069: PUSH
3070: LD_INT 71
3072: PPUSH
3073: LD_INT 34
3075: PPUSH
3076: LD_INT 4
3078: PPUSH
3079: CALL_OW 47
3083: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ Rand ( 1 , 2 ) ] ) ;
3084: LD_VAR 0 4
3088: PPUSH
3089: LD_INT 4
3091: PUSH
3092: LD_INT 11
3094: PUSH
3095: EMPTY
3096: LIST
3097: LIST
3098: PUSH
3099: LD_INT 1
3101: PPUSH
3102: LD_INT 2
3104: PPUSH
3105: CALL_OW 12
3109: ARRAY
3110: PPUSH
3111: CALL_OW 431
// bc_type = 31 ;
3115: LD_ADDR_OWVAR 42
3119: PUSH
3120: LD_INT 31
3122: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 51 , 7 , 3 ) ;
3123: LD_INT 51
3125: PPUSH
3126: LD_INT 7
3128: PPUSH
3129: LD_INT 3
3131: PPUSH
3132: CALL_OW 47
// bc_type = b_oil_mine ;
3136: LD_ADDR_OWVAR 42
3140: PUSH
3141: LD_INT 29
3143: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 68 , 40 , 1 ) ;
3144: LD_INT 68
3146: PPUSH
3147: LD_INT 40
3149: PPUSH
3150: LD_INT 1
3152: PPUSH
3153: CALL_OW 47
// bc_type = b_workshop ;
3157: LD_ADDR_OWVAR 42
3161: PUSH
3162: LD_INT 2
3164: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 20 , 2 ) ;
3165: LD_INT 38
3167: PPUSH
3168: LD_INT 20
3170: PPUSH
3171: LD_INT 2
3173: PPUSH
3174: CALL_OW 47
// bc_type = b_armoury ;
3178: LD_ADDR_OWVAR 42
3182: PUSH
3183: LD_INT 4
3185: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 20 , 2 ) ;
3186: LD_INT 38
3188: PPUSH
3189: LD_INT 20
3191: PPUSH
3192: LD_INT 2
3194: PPUSH
3195: CALL_OW 47
// bc_type = b_solar_power ;
3199: LD_ADDR_OWVAR 42
3203: PUSH
3204: LD_INT 27
3206: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 46 , 12 , 1 ) ;
3207: LD_INT 46
3209: PPUSH
3210: LD_INT 12
3212: PPUSH
3213: LD_INT 1
3215: PPUSH
3216: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 48 , 11 , 2 ) ;
3220: LD_INT 48
3222: PPUSH
3223: LD_INT 11
3225: PPUSH
3226: LD_INT 2
3228: PPUSH
3229: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 49 , 11 , 3 ) ;
3233: LD_INT 49
3235: PPUSH
3236: LD_INT 11
3238: PPUSH
3239: LD_INT 3
3241: PPUSH
3242: CALL_OW 47
// bc_type = b_lab_half ;
3246: LD_ADDR_OWVAR 42
3250: PUSH
3251: LD_INT 7
3253: ST_TO_ADDR
// bc_kind1 = b_lab_opto ;
3254: LD_ADDR_OWVAR 44
3258: PUSH
3259: LD_INT 15
3261: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
3262: LD_ADDR_OWVAR 45
3266: PUSH
3267: LD_INT 9
3269: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 42 , 15 , 2 ) ;
3270: LD_INT 42
3272: PPUSH
3273: LD_INT 15
3275: PPUSH
3276: LD_INT 2
3278: PPUSH
3279: CALL_OW 47
// end ; end ; end_of_file
3283: LD_VAR 0 1
3287: RET
// every 1 do var i , j , tmp ;
3288: GO 3290
3290: DISABLE
3291: LD_INT 0
3293: PPUSH
3294: PPUSH
3295: PPUSH
// begin InGameOn ;
3296: CALL_OW 8
// CenterNowOnUnits ( lab [ 1 ] ) ;
3300: LD_EXP 20
3304: PUSH
3305: LD_INT 1
3307: ARRAY
3308: PPUSH
3309: CALL_OW 87
// if IsOK ( Denis ) then
3313: LD_EXP 3
3317: PPUSH
3318: CALL_OW 302
3322: IFFALSE 3350
// begin SetTech ( tech_radar , 1 , state_researched ) ;
3324: LD_INT 6
3326: PPUSH
3327: LD_INT 1
3329: PPUSH
3330: LD_INT 2
3332: PPUSH
3333: CALL_OW 322
// SetRestrict ( b_ext_radar , 1 , true ) ;
3337: LD_INT 20
3339: PPUSH
3340: LD_INT 1
3342: PPUSH
3343: LD_INT 1
3345: PPUSH
3346: CALL_OW 324
// end ; CenterNowOnUnits ( JMM ) ;
3350: LD_EXP 1
3354: PPUSH
3355: CALL_OW 87
// ComTurnUnit ( JMM , DeltaDoctor ) ;
3359: LD_EXP 1
3363: PPUSH
3364: LD_EXP 15
3368: PPUSH
3369: CALL_OW 119
// repeat wait ( 0 0$1 ) ;
3373: LD_INT 35
3375: PPUSH
3376: CALL_OW 67
// ComMoveUnit ( DeltaDoctor , JMM ) ;
3380: LD_EXP 15
3384: PPUSH
3385: LD_EXP 1
3389: PPUSH
3390: CALL_OW 112
// until GetDistUnits ( JMM , DeltaDoctor ) < 5 ;
3394: LD_EXP 1
3398: PPUSH
3399: LD_EXP 15
3403: PPUSH
3404: CALL_OW 296
3408: PUSH
3409: LD_INT 5
3411: LESS
3412: IFFALSE 3373
// ComTurnUnit ( DeltaDoctor , JMM ) ;
3414: LD_EXP 15
3418: PPUSH
3419: LD_EXP 1
3423: PPUSH
3424: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
3428: LD_EXP 1
3432: PPUSH
3433: LD_STRING D1-JMM-1
3435: PPUSH
3436: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-1 ) ;
3440: LD_EXP 15
3444: PPUSH
3445: LD_STRING D1-Sci-1
3447: PPUSH
3448: CALL_OW 88
// ComEnterUnit ( [ JMM , DeltaDoctor , Denis ] , lab [ 1 ] ) ;
3452: LD_EXP 1
3456: PUSH
3457: LD_EXP 15
3461: PUSH
3462: LD_EXP 3
3466: PUSH
3467: EMPTY
3468: LIST
3469: LIST
3470: LIST
3471: PPUSH
3472: LD_EXP 20
3476: PUSH
3477: LD_INT 1
3479: ARRAY
3480: PPUSH
3481: CALL_OW 120
// end ;
3485: PPOPN 3
3487: END
// every 0 0$2 trigger IsInUnit ( JMM ) = lab [ 1 ] and IsInUnit ( DeltaDoctor ) = lab [ 1 ] do var i , j , tmp ;
3488: LD_EXP 1
3492: PPUSH
3493: CALL_OW 310
3497: PUSH
3498: LD_EXP 20
3502: PUSH
3503: LD_INT 1
3505: ARRAY
3506: EQUAL
3507: PUSH
3508: LD_EXP 15
3512: PPUSH
3513: CALL_OW 310
3517: PUSH
3518: LD_EXP 20
3522: PUSH
3523: LD_INT 1
3525: ARRAY
3526: EQUAL
3527: AND
3528: IFFALSE 4074
3530: GO 3532
3532: DISABLE
3533: LD_INT 0
3535: PPUSH
3536: PPUSH
3537: PPUSH
// begin CenterNowOnUnits ( lab [ 1 ] ) ;
3538: LD_EXP 20
3542: PUSH
3543: LD_INT 1
3545: ARRAY
3546: PPUSH
3547: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
3551: LD_EXP 1
3555: PPUSH
3556: LD_STRING D1-JMM-2
3558: PPUSH
3559: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-2 ) ;
3563: LD_EXP 15
3567: PPUSH
3568: LD_STRING D1-Sci-2
3570: PPUSH
3571: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
3575: LD_EXP 1
3579: PPUSH
3580: LD_STRING D1-JMM-3
3582: PPUSH
3583: CALL_OW 88
// if IsOK ( Denis ) then
3587: LD_EXP 3
3591: PPUSH
3592: CALL_OW 302
3596: IFFALSE 3612
// Say ( DeltaDoctor , D1-Sci-3 ) else
3598: LD_EXP 15
3602: PPUSH
3603: LD_STRING D1-Sci-3
3605: PPUSH
3606: CALL_OW 88
3610: GO 3624
// Say ( DeltaDoctor , D1-Sci-3a ) ;
3612: LD_EXP 15
3616: PPUSH
3617: LD_STRING D1-Sci-3a
3619: PPUSH
3620: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
3624: LD_EXP 1
3628: PPUSH
3629: LD_STRING D1-JMM-4
3631: PPUSH
3632: CALL_OW 88
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
3636: LD_ADDR_VAR 0 3
3640: PUSH
3641: LD_INT 22
3643: PUSH
3644: LD_INT 1
3646: PUSH
3647: EMPTY
3648: LIST
3649: LIST
3650: PUSH
3651: LD_INT 25
3653: PUSH
3654: LD_INT 4
3656: PUSH
3657: EMPTY
3658: LIST
3659: LIST
3660: PUSH
3661: LD_INT 3
3663: PUSH
3664: LD_INT 54
3666: PUSH
3667: EMPTY
3668: LIST
3669: PUSH
3670: EMPTY
3671: LIST
3672: LIST
3673: PUSH
3674: EMPTY
3675: LIST
3676: LIST
3677: LIST
3678: PPUSH
3679: CALL_OW 69
3683: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 0 ] ) do
3684: LD_ADDR_VAR 0 1
3688: PUSH
3689: LD_INT 22
3691: PUSH
3692: LD_INT 0
3694: PUSH
3695: EMPTY
3696: LIST
3697: LIST
3698: PPUSH
3699: CALL_OW 69
3703: PUSH
3704: FOR_IN
3705: IFFALSE 3755
// for j in tmp do
3707: LD_ADDR_VAR 0 2
3711: PUSH
3712: LD_VAR 0 3
3716: PUSH
3717: FOR_IN
3718: IFFALSE 3751
// AddComTameXY ( j , GetX ( i ) , GetY ( i ) ) ;
3720: LD_VAR 0 2
3724: PPUSH
3725: LD_VAR 0 1
3729: PPUSH
3730: CALL_OW 250
3734: PPUSH
3735: LD_VAR 0 1
3739: PPUSH
3740: CALL_OW 251
3744: PPUSH
3745: CALL_OW 191
3749: GO 3717
3751: POP
3752: POP
3753: GO 3704
3755: POP
3756: POP
// Say ( DeltaDoctor , D1-Sci-4 ) ;
3757: LD_EXP 15
3761: PPUSH
3762: LD_STRING D1-Sci-4
3764: PPUSH
3765: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
3769: LD_EXP 1
3773: PPUSH
3774: LD_STRING D1-JMM-5
3776: PPUSH
3777: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-5 ) ;
3781: LD_EXP 15
3785: PPUSH
3786: LD_STRING D1-Sci-5
3788: PPUSH
3789: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
3793: LD_EXP 1
3797: PPUSH
3798: LD_STRING D1-JMM-6
3800: PPUSH
3801: CALL_OW 88
// SayRadio ( Harisson , D1-Har-6 ) ;
3805: LD_EXP 16
3809: PPUSH
3810: LD_STRING D1-Har-6
3812: PPUSH
3813: CALL_OW 94
// Say ( JMM , D1-JMM-7 ) ;
3817: LD_EXP 1
3821: PPUSH
3822: LD_STRING D1-JMM-7
3824: PPUSH
3825: CALL_OW 88
// SayRadio ( Harisson , D1-Har-7 ) ;
3829: LD_EXP 16
3833: PPUSH
3834: LD_STRING D1-Har-7
3836: PPUSH
3837: CALL_OW 94
// if IsOK ( Denis ) then
3841: LD_EXP 3
3845: PPUSH
3846: CALL_OW 302
3850: IFFALSE 3864
// Say ( JMM , D1-JMM-8 ) ;
3852: LD_EXP 1
3856: PPUSH
3857: LD_STRING D1-JMM-8
3859: PPUSH
3860: CALL_OW 88
// Say ( JMM , D1-JMM-8a ) ;
3864: LD_EXP 1
3868: PPUSH
3869: LD_STRING D1-JMM-8a
3871: PPUSH
3872: CALL_OW 88
// SayRadio ( Harisson , D1-Har-8 ) ;
3876: LD_EXP 16
3880: PPUSH
3881: LD_STRING D1-Har-8
3883: PPUSH
3884: CALL_OW 94
// Say ( JMM , D1-JMM-9 ) ;
3888: LD_EXP 1
3892: PPUSH
3893: LD_STRING D1-JMM-9
3895: PPUSH
3896: CALL_OW 88
// SayRadio ( Harisson , D1-Har-9 ) ;
3900: LD_EXP 16
3904: PPUSH
3905: LD_STRING D1-Har-9
3907: PPUSH
3908: CALL_OW 94
// Say ( JMM , D1-JMM-10 ) ;
3912: LD_EXP 1
3916: PPUSH
3917: LD_STRING D1-JMM-10
3919: PPUSH
3920: CALL_OW 88
// if IsOK ( Denis ) then
3924: LD_EXP 3
3928: PPUSH
3929: CALL_OW 302
3933: IFFALSE 3947
// Say ( JMM , D1-JMM-10a ) ;
3935: LD_EXP 1
3939: PPUSH
3940: LD_STRING D1-JMM-10a
3942: PPUSH
3943: CALL_OW 88
// SelectDeltaCharacters ;
3947: CALL 4433 0 0
// SetResourceType ( GetBase ( lab [ 1 ] ) , 1 , 250 ) ;
3951: LD_EXP 20
3955: PUSH
3956: LD_INT 1
3958: ARRAY
3959: PPUSH
3960: CALL_OW 274
3964: PPUSH
3965: LD_INT 1
3967: PPUSH
3968: LD_INT 250
3970: PPUSH
3971: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) > 0 then
3975: LD_INT 22
3977: PUSH
3978: LD_INT 1
3980: PUSH
3981: EMPTY
3982: LIST
3983: LIST
3984: PUSH
3985: LD_INT 30
3987: PUSH
3988: LD_INT 29
3990: PUSH
3991: EMPTY
3992: LIST
3993: LIST
3994: PUSH
3995: EMPTY
3996: LIST
3997: LIST
3998: PPUSH
3999: CALL_OW 69
4003: PUSH
4004: LD_INT 0
4006: GREATER
4007: IFFALSE 4033
// SetResourceType ( GetBase ( lab [ 1 ] ) , 2 , 300 ) ;
4009: LD_EXP 20
4013: PUSH
4014: LD_INT 1
4016: ARRAY
4017: PPUSH
4018: CALL_OW 274
4022: PPUSH
4023: LD_INT 2
4025: PPUSH
4026: LD_INT 300
4028: PPUSH
4029: CALL_OW 277
// InGameOff ;
4033: CALL_OW 9
// Query ( Q1 ) ;
4037: LD_STRING Q1
4039: PPUSH
4040: CALL_OW 97
// SetAreaMapShow ( ExitArea , 1 ) ;
4044: LD_INT 3
4046: PPUSH
4047: LD_INT 1
4049: PPUSH
4050: CALL_OW 424
// if IsInUnit ( JMM ) then
4054: LD_EXP 1
4058: PPUSH
4059: CALL_OW 310
4063: IFFALSE 4074
// ComExitBuilding ( JMM ) ;
4065: LD_EXP 1
4069: PPUSH
4070: CALL_OW 122
// end ;
4074: PPOPN 3
4076: END
// every 0 0$1 trigger FilterUnitsExceptArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do var i , cargoType ;
4077: LD_INT 3
4079: PPUSH
4080: LD_INT 22
4082: PUSH
4083: LD_INT 1
4085: PUSH
4086: EMPTY
4087: LIST
4088: LIST
4089: PUSH
4090: LD_INT 21
4092: PUSH
4093: LD_INT 1
4095: PUSH
4096: EMPTY
4097: LIST
4098: LIST
4099: PUSH
4100: EMPTY
4101: LIST
4102: LIST
4103: PPUSH
4104: CALL_OW 71
4108: PUSH
4109: LD_INT 0
4111: EQUAL
4112: IFFALSE 4430
4114: GO 4116
4116: DISABLE
4117: LD_INT 0
4119: PPUSH
4120: PPUSH
// begin SaveDeltaCharacters ;
4121: CALL 4787 0 0
// if FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) then
4125: LD_INT 3
4127: PPUSH
4128: LD_INT 21
4130: PUSH
4131: LD_INT 2
4133: PUSH
4134: EMPTY
4135: LIST
4136: LIST
4137: PUSH
4138: LD_INT 3
4140: PUSH
4141: LD_INT 58
4143: PUSH
4144: EMPTY
4145: LIST
4146: PUSH
4147: EMPTY
4148: LIST
4149: LIST
4150: PUSH
4151: EMPTY
4152: LIST
4153: LIST
4154: PPUSH
4155: CALL_OW 70
4159: IFFALSE 4416
// begin for i in FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) do
4161: LD_ADDR_VAR 0 1
4165: PUSH
4166: LD_INT 3
4168: PPUSH
4169: LD_INT 21
4171: PUSH
4172: LD_INT 2
4174: PUSH
4175: EMPTY
4176: LIST
4177: LIST
4178: PUSH
4179: LD_INT 3
4181: PUSH
4182: LD_INT 58
4184: PUSH
4185: EMPTY
4186: LIST
4187: PUSH
4188: EMPTY
4189: LIST
4190: LIST
4191: PUSH
4192: EMPTY
4193: LIST
4194: LIST
4195: PPUSH
4196: CALL_OW 70
4200: PUSH
4201: FOR_IN
4202: IFFALSE 4414
// begin cargoType = GetCargoType ( i ) ;
4204: LD_ADDR_VAR 0 2
4208: PUSH
4209: LD_VAR 0 1
4213: PPUSH
4214: CALL_OW 288
4218: ST_TO_ADDR
// if GetWeapon ( i ) = us_cargo_bay then
4219: LD_VAR 0 1
4223: PPUSH
4224: CALL_OW 264
4228: PUSH
4229: LD_INT 12
4231: EQUAL
4232: IFFALSE 4329
// yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , cargoType , GetCargo ( i , cargoType ) ] ] else
4234: LD_ADDR_EXP 14
4238: PUSH
4239: LD_EXP 14
4243: PUSH
4244: LD_VAR 0 1
4248: PPUSH
4249: CALL_OW 248
4253: PUSH
4254: LD_VAR 0 1
4258: PPUSH
4259: CALL_OW 265
4263: PUSH
4264: LD_VAR 0 1
4268: PPUSH
4269: CALL_OW 262
4273: PUSH
4274: LD_VAR 0 1
4278: PPUSH
4279: CALL_OW 263
4283: PUSH
4284: LD_VAR 0 1
4288: PPUSH
4289: CALL_OW 264
4293: PUSH
4294: LD_VAR 0 2
4298: PUSH
4299: LD_VAR 0 1
4303: PPUSH
4304: LD_VAR 0 2
4308: PPUSH
4309: CALL_OW 289
4313: PUSH
4314: EMPTY
4315: LIST
4316: LIST
4317: LIST
4318: LIST
4319: LIST
4320: LIST
4321: LIST
4322: PUSH
4323: EMPTY
4324: LIST
4325: ADD
4326: ST_TO_ADDR
4327: GO 4400
// yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ] ;
4329: LD_ADDR_EXP 14
4333: PUSH
4334: LD_EXP 14
4338: PUSH
4339: LD_VAR 0 1
4343: PPUSH
4344: CALL_OW 248
4348: PUSH
4349: LD_VAR 0 1
4353: PPUSH
4354: CALL_OW 265
4358: PUSH
4359: LD_VAR 0 1
4363: PPUSH
4364: CALL_OW 262
4368: PUSH
4369: LD_VAR 0 1
4373: PPUSH
4374: CALL_OW 263
4378: PUSH
4379: LD_VAR 0 1
4383: PPUSH
4384: CALL_OW 264
4388: PUSH
4389: EMPTY
4390: LIST
4391: LIST
4392: LIST
4393: LIST
4394: LIST
4395: PUSH
4396: EMPTY
4397: LIST
4398: ADD
4399: ST_TO_ADDR
// SaveVariable ( yourVehicles , 06_VehiclesIn06_1 ) ;
4400: LD_EXP 14
4404: PPUSH
4405: LD_STRING 06_VehiclesIn06_1
4407: PPUSH
4408: CALL_OW 39
// end ;
4412: GO 4201
4414: POP
4415: POP
// end ; SaveCargos ;
4416: CALL 5543 0 0
// ChangeMap ( 6 , %_cont ) ;
4420: LD_INT 6
4422: PPUSH
4423: LD_STRING %_cont
4425: PPUSH
4426: CALL_OW 340
// end ; end_of_file
4430: PPOPN 2
4432: END
// export function SelectDeltaCharacters ; var i , yourPeople ; begin
4433: LD_INT 0
4435: PPUSH
4436: PPUSH
4437: PPUSH
// selectedPeople := [ ] ;
4438: LD_ADDR_EXP 17
4442: PUSH
4443: EMPTY
4444: ST_TO_ADDR
// yourPeople = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , DeltaDoctor , Denis ] ;
4445: LD_ADDR_VAR 0 3
4449: PUSH
4450: LD_INT 22
4452: PUSH
4453: LD_INT 1
4455: PUSH
4456: EMPTY
4457: LIST
4458: LIST
4459: PUSH
4460: LD_INT 21
4462: PUSH
4463: LD_INT 1
4465: PUSH
4466: EMPTY
4467: LIST
4468: LIST
4469: PUSH
4470: LD_INT 2
4472: PUSH
4473: LD_INT 25
4475: PUSH
4476: LD_INT 1
4478: PUSH
4479: EMPTY
4480: LIST
4481: LIST
4482: PUSH
4483: LD_INT 25
4485: PUSH
4486: LD_INT 2
4488: PUSH
4489: EMPTY
4490: LIST
4491: LIST
4492: PUSH
4493: LD_INT 25
4495: PUSH
4496: LD_INT 3
4498: PUSH
4499: EMPTY
4500: LIST
4501: LIST
4502: PUSH
4503: LD_INT 25
4505: PUSH
4506: LD_INT 4
4508: PUSH
4509: EMPTY
4510: LIST
4511: LIST
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: LIST
4517: LIST
4518: LIST
4519: PUSH
4520: EMPTY
4521: LIST
4522: LIST
4523: LIST
4524: PPUSH
4525: CALL_OW 69
4529: PUSH
4530: LD_EXP 1
4534: PUSH
4535: LD_EXP 15
4539: PUSH
4540: LD_EXP 3
4544: PUSH
4545: EMPTY
4546: LIST
4547: LIST
4548: LIST
4549: DIFF
4550: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , 5 , 5 , [ sel_change_class , JMM , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ yourPeople ^ [ sel_dont_change_class , sel_not_changeable , Denis , DeltaDoctor ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
4551: LD_ADDR_EXP 17
4555: PUSH
4556: LD_STRING text
4558: PPUSH
4559: LD_INT 5
4561: PPUSH
4562: LD_INT 5
4564: PPUSH
4565: LD_INT -5
4567: PUSH
4568: LD_EXP 1
4572: PUSH
4573: LD_INT -6
4575: PUSH
4576: LD_INT -2
4578: PUSH
4579: LD_INT -3
4581: PUSH
4582: LD_INT -5
4584: PUSH
4585: EMPTY
4586: LIST
4587: LIST
4588: LIST
4589: LIST
4590: LIST
4591: LIST
4592: PUSH
4593: LD_VAR 0 3
4597: ADD
4598: PUSH
4599: LD_INT -6
4601: PUSH
4602: LD_INT -4
4604: PUSH
4605: LD_EXP 3
4609: PUSH
4610: LD_EXP 15
4614: PUSH
4615: EMPTY
4616: LIST
4617: LIST
4618: LIST
4619: LIST
4620: ADD
4621: PPUSH
4622: LD_INT 1
4624: PUSH
4625: LD_INT 3
4627: PUSH
4628: LD_INT 2
4630: PUSH
4631: LD_INT 1
4633: PUSH
4634: EMPTY
4635: LIST
4636: LIST
4637: PUSH
4638: LD_INT 4
4640: PUSH
4641: EMPTY
4642: LIST
4643: LIST
4644: LIST
4645: LIST
4646: PPUSH
4647: CALL_OW 42
4651: ST_TO_ADDR
// ComStop ( selectedPeople ) ;
4652: LD_EXP 17
4656: PPUSH
4657: CALL_OW 141
// SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 4 ) ;
4661: LD_INT 22
4663: PUSH
4664: LD_INT 1
4666: PUSH
4667: EMPTY
4668: LIST
4669: LIST
4670: PUSH
4671: LD_INT 21
4673: PUSH
4674: LD_INT 1
4676: PUSH
4677: EMPTY
4678: LIST
4679: LIST
4680: PUSH
4681: EMPTY
4682: LIST
4683: LIST
4684: PPUSH
4685: CALL_OW 69
4689: PPUSH
4690: LD_INT 4
4692: PPUSH
4693: CALL_OW 235
// for i in selectedPeople do
4697: LD_ADDR_VAR 0 2
4701: PUSH
4702: LD_EXP 17
4706: PUSH
4707: FOR_IN
4708: IFFALSE 4724
// SetSide ( i , 1 ) ;
4710: LD_VAR 0 2
4714: PPUSH
4715: LD_INT 1
4717: PPUSH
4718: CALL_OW 235
4722: GO 4707
4724: POP
4725: POP
// for i in yourApemans do
4726: LD_ADDR_VAR 0 2
4730: PUSH
4731: LD_EXP 13
4735: PUSH
4736: FOR_IN
4737: IFFALSE 4753
// SetSide ( i , 1 ) ;
4739: LD_VAR 0 2
4743: PPUSH
4744: LD_INT 1
4746: PPUSH
4747: CALL_OW 235
4751: GO 4736
4753: POP
4754: POP
// SetSide ( JMM , 1 ) ;
4755: LD_EXP 1
4759: PPUSH
4760: LD_INT 1
4762: PPUSH
4763: CALL_OW 235
// SetSkill ( yourApemans , 2 , 5 ) ;
4767: LD_EXP 13
4771: PPUSH
4772: LD_INT 2
4774: PPUSH
4775: LD_INT 5
4777: PPUSH
4778: CALL_OW 237
// end ;
4782: LD_VAR 0 1
4786: RET
// export function SaveDeltaCharacters ; begin
4787: LD_INT 0
4789: PPUSH
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
4790: LD_EXP 1
4794: PPUSH
4795: LD_EXP 22
4799: PUSH
4800: LD_STRING JMM
4802: STR
4803: PPUSH
4804: CALL_OW 38
// SaveCharacters ( DeltaDoctor , DeltaDoctor ) ;
4808: LD_EXP 15
4812: PPUSH
4813: LD_STRING DeltaDoctor
4815: PPUSH
4816: CALL_OW 38
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
4820: LD_EXP 3
4824: PPUSH
4825: LD_EXP 22
4829: PUSH
4830: LD_STRING Denis
4832: STR
4833: PPUSH
4834: CALL_OW 38
// if Lisa in selectedPeople then
4838: LD_EXP 4
4842: PUSH
4843: LD_EXP 17
4847: IN
4848: IFFALSE 4880
// begin SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
4850: LD_EXP 4
4854: PPUSH
4855: LD_EXP 22
4859: PUSH
4860: LD_STRING Lisa
4862: STR
4863: PPUSH
4864: CALL_OW 38
// SaveVariable ( 1 , LisaIn06 ) ;
4868: LD_INT 1
4870: PPUSH
4871: LD_STRING LisaIn06
4873: PPUSH
4874: CALL_OW 39
// end else
4878: GO 4901
// if IsOk ( Lisa ) then
4880: LD_EXP 4
4884: PPUSH
4885: CALL_OW 302
4889: IFFALSE 4901
// SaveVariable ( 1 , LisaStayInDelta ) ;
4891: LD_INT 1
4893: PPUSH
4894: LD_STRING LisaStayInDelta
4896: PPUSH
4897: CALL_OW 39
// if Bobby in selectedPeople then
4901: LD_EXP 6
4905: PUSH
4906: LD_EXP 17
4910: IN
4911: IFFALSE 4943
// begin SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
4913: LD_EXP 6
4917: PPUSH
4918: LD_EXP 22
4922: PUSH
4923: LD_STRING Bobby
4925: STR
4926: PPUSH
4927: CALL_OW 38
// SaveVariable ( 1 , BobbyIn06 ) ;
4931: LD_INT 1
4933: PPUSH
4934: LD_STRING BobbyIn06
4936: PPUSH
4937: CALL_OW 39
// end else
4941: GO 4964
// if IsOk ( Bobby ) then
4943: LD_EXP 6
4947: PPUSH
4948: CALL_OW 302
4952: IFFALSE 4964
// SaveVariable ( 1 , BobbyStayInDelta ) ;
4954: LD_INT 1
4956: PPUSH
4957: LD_STRING BobbyStayInDelta
4959: PPUSH
4960: CALL_OW 39
// if Cyrus in selectedPeople then
4964: LD_EXP 7
4968: PUSH
4969: LD_EXP 17
4973: IN
4974: IFFALSE 5006
// begin SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
4976: LD_EXP 7
4980: PPUSH
4981: LD_EXP 22
4985: PUSH
4986: LD_STRING Cyrus
4988: STR
4989: PPUSH
4990: CALL_OW 38
// SaveVariable ( 1 , CyrusIn06 ) ;
4994: LD_INT 1
4996: PPUSH
4997: LD_STRING CyrusIn06
4999: PPUSH
5000: CALL_OW 39
// end else
5004: GO 5027
// if IsOk ( Cyrus ) then
5006: LD_EXP 7
5010: PPUSH
5011: CALL_OW 302
5015: IFFALSE 5027
// SaveVariable ( 1 , CyrusStayInDelta ) ;
5017: LD_INT 1
5019: PPUSH
5020: LD_STRING CyrusStayInDelta
5022: PPUSH
5023: CALL_OW 39
// if Frank in selectedPeople then
5027: LD_EXP 5
5031: PUSH
5032: LD_EXP 17
5036: IN
5037: IFFALSE 5069
// begin SaveCharacters ( Frank , mission_prefix & Frank ) ;
5039: LD_EXP 5
5043: PPUSH
5044: LD_EXP 22
5048: PUSH
5049: LD_STRING Frank
5051: STR
5052: PPUSH
5053: CALL_OW 38
// SaveVariable ( 1 , FrankIn06 ) ;
5057: LD_INT 1
5059: PPUSH
5060: LD_STRING FrankIn06
5062: PPUSH
5063: CALL_OW 39
// end else
5067: GO 5090
// if IsOk ( Frank ) then
5069: LD_EXP 5
5073: PPUSH
5074: CALL_OW 302
5078: IFFALSE 5090
// SaveVariable ( 1 , FrankStayInDelta ) ;
5080: LD_INT 1
5082: PPUSH
5083: LD_STRING FrankStayInDelta
5085: PPUSH
5086: CALL_OW 39
// if Brown in selectedPeople then
5090: LD_EXP 8
5094: PUSH
5095: LD_EXP 17
5099: IN
5100: IFFALSE 5132
// begin SaveCharacters ( Brown , mission_prefix & Brown ) ;
5102: LD_EXP 8
5106: PPUSH
5107: LD_EXP 22
5111: PUSH
5112: LD_STRING Brown
5114: STR
5115: PPUSH
5116: CALL_OW 38
// SaveVariable ( 1 , BrownIn06 ) ;
5120: LD_INT 1
5122: PPUSH
5123: LD_STRING BrownIn06
5125: PPUSH
5126: CALL_OW 39
// end else
5130: GO 5153
// if IsOk ( Brown ) then
5132: LD_EXP 8
5136: PPUSH
5137: CALL_OW 302
5141: IFFALSE 5153
// SaveVariable ( 1 , BrownStayInDelta ) ;
5143: LD_INT 1
5145: PPUSH
5146: LD_STRING BrownStayInDelta
5148: PPUSH
5149: CALL_OW 39
// if Donaldson in selectedPeople then
5153: LD_EXP 9
5157: PUSH
5158: LD_EXP 17
5162: IN
5163: IFFALSE 5195
// begin SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
5165: LD_EXP 9
5169: PPUSH
5170: LD_EXP 22
5174: PUSH
5175: LD_STRING Donaldson
5177: STR
5178: PPUSH
5179: CALL_OW 38
// SaveVariable ( 1 , DonaldsonIn06 ) ;
5183: LD_INT 1
5185: PPUSH
5186: LD_STRING DonaldsonIn06
5188: PPUSH
5189: CALL_OW 39
// end else
5193: GO 5216
// if IsOk ( Donaldson ) then
5195: LD_EXP 9
5199: PPUSH
5200: CALL_OW 302
5204: IFFALSE 5216
// SaveVariable ( 1 , DonaldsonStayInDelta ) ;
5206: LD_INT 1
5208: PPUSH
5209: LD_STRING DonaldsonStayInDelta
5211: PPUSH
5212: CALL_OW 39
// if Gladstone in selectedPeople then
5216: LD_EXP 2
5220: PUSH
5221: LD_EXP 17
5225: IN
5226: IFFALSE 5258
// begin SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
5228: LD_EXP 2
5232: PPUSH
5233: LD_EXP 22
5237: PUSH
5238: LD_STRING Gladstone
5240: STR
5241: PPUSH
5242: CALL_OW 38
// SaveVariable ( 1 , GladstoneIn06 ) ;
5246: LD_INT 1
5248: PPUSH
5249: LD_STRING GladstoneIn06
5251: PPUSH
5252: CALL_OW 39
// end else
5256: GO 5279
// if IsOk ( Gladstone ) then
5258: LD_EXP 2
5262: PPUSH
5263: CALL_OW 302
5267: IFFALSE 5279
// SaveVariable ( 1 , GladstoneStayInDelta ) ;
5269: LD_INT 1
5271: PPUSH
5272: LD_STRING GladstoneStayInDelta
5274: PPUSH
5275: CALL_OW 39
// selectedPeople := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ;
5279: LD_ADDR_EXP 17
5283: PUSH
5284: LD_INT 22
5286: PUSH
5287: LD_INT 1
5289: PUSH
5290: EMPTY
5291: LIST
5292: LIST
5293: PUSH
5294: LD_INT 23
5296: PUSH
5297: LD_INT 1
5299: PUSH
5300: EMPTY
5301: LIST
5302: LIST
5303: PUSH
5304: LD_INT 21
5306: PUSH
5307: LD_INT 1
5309: PUSH
5310: EMPTY
5311: LIST
5312: LIST
5313: PUSH
5314: EMPTY
5315: LIST
5316: LIST
5317: LIST
5318: PPUSH
5319: CALL_OW 69
5323: ST_TO_ADDR
// SaveCharacters ( yourApemans , ApeIn06 ) ;
5324: LD_EXP 13
5328: PPUSH
5329: LD_STRING ApeIn06
5331: PPUSH
5332: CALL_OW 38
// SaveCharacters ( selectedPeople diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis ] , OthersIn06 ) ;
5336: LD_EXP 17
5340: PUSH
5341: LD_EXP 1
5345: PUSH
5346: LD_EXP 4
5350: PUSH
5351: LD_EXP 6
5355: PUSH
5356: LD_EXP 7
5360: PUSH
5361: LD_EXP 5
5365: PUSH
5366: LD_EXP 8
5370: PUSH
5371: LD_EXP 9
5375: PUSH
5376: LD_EXP 2
5380: PUSH
5381: LD_EXP 3
5385: PUSH
5386: EMPTY
5387: LIST
5388: LIST
5389: LIST
5390: LIST
5391: LIST
5392: LIST
5393: LIST
5394: LIST
5395: LIST
5396: DIFF
5397: PPUSH
5398: LD_STRING OthersIn06
5400: PPUSH
5401: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ DeltaDoctor , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis ] , OthersStayInDelta ) ;
5405: LD_INT 22
5407: PUSH
5408: LD_INT 4
5410: PUSH
5411: EMPTY
5412: LIST
5413: LIST
5414: PUSH
5415: LD_INT 2
5417: PUSH
5418: LD_INT 25
5420: PUSH
5421: LD_INT 1
5423: PUSH
5424: EMPTY
5425: LIST
5426: LIST
5427: PUSH
5428: LD_INT 25
5430: PUSH
5431: LD_INT 2
5433: PUSH
5434: EMPTY
5435: LIST
5436: LIST
5437: PUSH
5438: LD_INT 25
5440: PUSH
5441: LD_INT 3
5443: PUSH
5444: EMPTY
5445: LIST
5446: LIST
5447: PUSH
5448: LD_INT 25
5450: PUSH
5451: LD_INT 4
5453: PUSH
5454: EMPTY
5455: LIST
5456: LIST
5457: PUSH
5458: EMPTY
5459: LIST
5460: LIST
5461: LIST
5462: LIST
5463: LIST
5464: PUSH
5465: EMPTY
5466: LIST
5467: LIST
5468: PPUSH
5469: CALL_OW 69
5473: PUSH
5474: LD_EXP 15
5478: PUSH
5479: LD_EXP 4
5483: PUSH
5484: LD_EXP 6
5488: PUSH
5489: LD_EXP 7
5493: PUSH
5494: LD_EXP 5
5498: PUSH
5499: LD_EXP 8
5503: PUSH
5504: LD_EXP 9
5508: PUSH
5509: LD_EXP 2
5513: PUSH
5514: LD_EXP 3
5518: PUSH
5519: EMPTY
5520: LIST
5521: LIST
5522: LIST
5523: LIST
5524: LIST
5525: LIST
5526: LIST
5527: LIST
5528: LIST
5529: DIFF
5530: PPUSH
5531: LD_STRING OthersStayInDelta
5533: PPUSH
5534: CALL_OW 38
// end ;
5538: LD_VAR 0 1
5542: RET
// export function SaveCargos ; var i ; begin
5543: LD_INT 0
5545: PPUSH
5546: PPUSH
// for i in FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) do
5547: LD_ADDR_VAR 0 2
5551: PUSH
5552: LD_INT 3
5554: PPUSH
5555: LD_INT 22
5557: PUSH
5558: LD_INT 1
5560: PUSH
5561: EMPTY
5562: LIST
5563: LIST
5564: PUSH
5565: LD_INT 34
5567: PUSH
5568: LD_INT 12
5570: PUSH
5571: EMPTY
5572: LIST
5573: LIST
5574: PUSH
5575: EMPTY
5576: LIST
5577: LIST
5578: PPUSH
5579: CALL_OW 70
5583: PUSH
5584: FOR_IN
5585: IFFALSE 5613
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
5587: LD_ADDR_EXP 21
5591: PUSH
5592: LD_EXP 21
5596: PUSH
5597: LD_VAR 0 2
5601: PPUSH
5602: CALL 5632 0 1
5606: PUSH
5607: EMPTY
5608: LIST
5609: ADD
5610: ST_TO_ADDR
5611: GO 5584
5613: POP
5614: POP
// SaveVariable ( resources , 06_ResourcesInCargo06_1 ) ;
5615: LD_EXP 21
5619: PPUSH
5620: LD_STRING 06_ResourcesInCargo06_1
5622: PPUSH
5623: CALL_OW 39
// end ;
5627: LD_VAR 0 1
5631: RET
// export function GetMultiCargo ( cargo_bay ) ; begin
5632: LD_INT 0
5634: PPUSH
// result := [ GetCargo ( cargo_bay , mat_cans ) , GetCargo ( cargo_bay , mat_oil ) , GetCargo ( cargo_bay , mat_siberit ) ] ;
5635: LD_ADDR_VAR 0 2
5639: PUSH
5640: LD_VAR 0 1
5644: PPUSH
5645: LD_INT 1
5647: PPUSH
5648: CALL_OW 289
5652: PUSH
5653: LD_VAR 0 1
5657: PPUSH
5658: LD_INT 2
5660: PPUSH
5661: CALL_OW 289
5665: PUSH
5666: LD_VAR 0 1
5670: PPUSH
5671: LD_INT 3
5673: PPUSH
5674: CALL_OW 289
5678: PUSH
5679: EMPTY
5680: LIST
5681: LIST
5682: LIST
5683: ST_TO_ADDR
// end ; end_of_file
5684: LD_VAR 0 2
5688: RET
// on Command ( comandid ) do var i ;
5689: LD_INT 0
5691: PPUSH
// begin if comandid = 65 then
5692: LD_VAR 0 1
5696: PUSH
5697: LD_INT 65
5699: EQUAL
5700: IFFALSE 5741
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
5702: LD_ADDR_VAR 0 2
5706: PUSH
5707: LD_INT 22
5709: PUSH
5710: LD_INT 1
5712: PUSH
5713: EMPTY
5714: LIST
5715: LIST
5716: PUSH
5717: EMPTY
5718: LIST
5719: PPUSH
5720: CALL_OW 69
5724: PUSH
5725: FOR_IN
5726: IFFALSE 5739
// ComStop ( i ) ;
5728: LD_VAR 0 2
5732: PPUSH
5733: CALL_OW 141
5737: GO 5725
5739: POP
5740: POP
// end ;
5741: PPOPN 2
5743: END
// on ApemanTamed ( apeman , human ) do var tmp ;
5744: LD_INT 0
5746: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
5747: LD_ADDR_VAR 0 3
5751: PUSH
5752: LD_INT 22
5754: PUSH
5755: LD_INT 1
5757: PUSH
5758: EMPTY
5759: LIST
5760: LIST
5761: PUSH
5762: LD_INT 21
5764: PUSH
5765: LD_INT 3
5767: PUSH
5768: EMPTY
5769: LIST
5770: LIST
5771: PUSH
5772: LD_INT 30
5774: PUSH
5775: LD_INT 0
5777: PUSH
5778: EMPTY
5779: LIST
5780: LIST
5781: PUSH
5782: EMPTY
5783: LIST
5784: LIST
5785: LIST
5786: PPUSH
5787: CALL_OW 69
5791: ST_TO_ADDR
// ComEnterUnit ( apeman , tmp [ 1 ] ) ;
5792: LD_VAR 0 1
5796: PPUSH
5797: LD_VAR 0 3
5801: PUSH
5802: LD_INT 1
5804: ARRAY
5805: PPUSH
5806: CALL_OW 120
// SetSide ( apeman , 4 ) ;
5810: LD_VAR 0 1
5814: PPUSH
5815: LD_INT 4
5817: PPUSH
5818: CALL_OW 235
// end ; end_of_file
5822: PPOPN 3
5824: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
5825: LD_VAR 0 2
5829: PUSH
5830: LD_INT 100
5832: EQUAL
5833: IFFALSE 6782
// begin if not StreamModeActive then
5835: LD_EXP 24
5839: NOT
5840: IFFALSE 5850
// StreamModeActive := true ;
5842: LD_ADDR_EXP 24
5846: PUSH
5847: LD_INT 1
5849: ST_TO_ADDR
// if p3 = 0 then
5850: LD_VAR 0 3
5854: PUSH
5855: LD_INT 0
5857: EQUAL
5858: IFFALSE 5864
// InitStreamMode ;
5860: CALL 6940 0 0
// if p3 = 1 then
5864: LD_VAR 0 3
5868: PUSH
5869: LD_INT 1
5871: EQUAL
5872: IFFALSE 5882
// sRocket := true ;
5874: LD_ADDR_EXP 29
5878: PUSH
5879: LD_INT 1
5881: ST_TO_ADDR
// if p3 = 2 then
5882: LD_VAR 0 3
5886: PUSH
5887: LD_INT 2
5889: EQUAL
5890: IFFALSE 5900
// sSpeed := true ;
5892: LD_ADDR_EXP 28
5896: PUSH
5897: LD_INT 1
5899: ST_TO_ADDR
// if p3 = 3 then
5900: LD_VAR 0 3
5904: PUSH
5905: LD_INT 3
5907: EQUAL
5908: IFFALSE 5918
// sEngine := true ;
5910: LD_ADDR_EXP 30
5914: PUSH
5915: LD_INT 1
5917: ST_TO_ADDR
// if p3 = 4 then
5918: LD_VAR 0 3
5922: PUSH
5923: LD_INT 4
5925: EQUAL
5926: IFFALSE 5936
// sSpec := true ;
5928: LD_ADDR_EXP 27
5932: PUSH
5933: LD_INT 1
5935: ST_TO_ADDR
// if p3 = 5 then
5936: LD_VAR 0 3
5940: PUSH
5941: LD_INT 5
5943: EQUAL
5944: IFFALSE 5954
// sLevel := true ;
5946: LD_ADDR_EXP 31
5950: PUSH
5951: LD_INT 1
5953: ST_TO_ADDR
// if p3 = 6 then
5954: LD_VAR 0 3
5958: PUSH
5959: LD_INT 6
5961: EQUAL
5962: IFFALSE 5972
// sArmoury := true ;
5964: LD_ADDR_EXP 32
5968: PUSH
5969: LD_INT 1
5971: ST_TO_ADDR
// if p3 = 7 then
5972: LD_VAR 0 3
5976: PUSH
5977: LD_INT 7
5979: EQUAL
5980: IFFALSE 5990
// sRadar := true ;
5982: LD_ADDR_EXP 33
5986: PUSH
5987: LD_INT 1
5989: ST_TO_ADDR
// if p3 = 8 then
5990: LD_VAR 0 3
5994: PUSH
5995: LD_INT 8
5997: EQUAL
5998: IFFALSE 6008
// sBunker := true ;
6000: LD_ADDR_EXP 34
6004: PUSH
6005: LD_INT 1
6007: ST_TO_ADDR
// if p3 = 9 then
6008: LD_VAR 0 3
6012: PUSH
6013: LD_INT 9
6015: EQUAL
6016: IFFALSE 6026
// sHack := true ;
6018: LD_ADDR_EXP 35
6022: PUSH
6023: LD_INT 1
6025: ST_TO_ADDR
// if p3 = 10 then
6026: LD_VAR 0 3
6030: PUSH
6031: LD_INT 10
6033: EQUAL
6034: IFFALSE 6044
// sFire := true ;
6036: LD_ADDR_EXP 36
6040: PUSH
6041: LD_INT 1
6043: ST_TO_ADDR
// if p3 = 11 then
6044: LD_VAR 0 3
6048: PUSH
6049: LD_INT 11
6051: EQUAL
6052: IFFALSE 6062
// sRefresh := true ;
6054: LD_ADDR_EXP 37
6058: PUSH
6059: LD_INT 1
6061: ST_TO_ADDR
// if p3 = 12 then
6062: LD_VAR 0 3
6066: PUSH
6067: LD_INT 12
6069: EQUAL
6070: IFFALSE 6080
// sExp := true ;
6072: LD_ADDR_EXP 38
6076: PUSH
6077: LD_INT 1
6079: ST_TO_ADDR
// if p3 = 13 then
6080: LD_VAR 0 3
6084: PUSH
6085: LD_INT 13
6087: EQUAL
6088: IFFALSE 6098
// sDepot := true ;
6090: LD_ADDR_EXP 39
6094: PUSH
6095: LD_INT 1
6097: ST_TO_ADDR
// if p3 = 14 then
6098: LD_VAR 0 3
6102: PUSH
6103: LD_INT 14
6105: EQUAL
6106: IFFALSE 6116
// sFlag := true ;
6108: LD_ADDR_EXP 40
6112: PUSH
6113: LD_INT 1
6115: ST_TO_ADDR
// if p3 = 15 then
6116: LD_VAR 0 3
6120: PUSH
6121: LD_INT 15
6123: EQUAL
6124: IFFALSE 6134
// sKamikadze := true ;
6126: LD_ADDR_EXP 48
6130: PUSH
6131: LD_INT 1
6133: ST_TO_ADDR
// if p3 = 16 then
6134: LD_VAR 0 3
6138: PUSH
6139: LD_INT 16
6141: EQUAL
6142: IFFALSE 6152
// sTroll := true ;
6144: LD_ADDR_EXP 49
6148: PUSH
6149: LD_INT 1
6151: ST_TO_ADDR
// if p3 = 17 then
6152: LD_VAR 0 3
6156: PUSH
6157: LD_INT 17
6159: EQUAL
6160: IFFALSE 6170
// sSlow := true ;
6162: LD_ADDR_EXP 50
6166: PUSH
6167: LD_INT 1
6169: ST_TO_ADDR
// if p3 = 18 then
6170: LD_VAR 0 3
6174: PUSH
6175: LD_INT 18
6177: EQUAL
6178: IFFALSE 6188
// sLack := true ;
6180: LD_ADDR_EXP 51
6184: PUSH
6185: LD_INT 1
6187: ST_TO_ADDR
// if p3 = 19 then
6188: LD_VAR 0 3
6192: PUSH
6193: LD_INT 19
6195: EQUAL
6196: IFFALSE 6206
// sTank := true ;
6198: LD_ADDR_EXP 53
6202: PUSH
6203: LD_INT 1
6205: ST_TO_ADDR
// if p3 = 20 then
6206: LD_VAR 0 3
6210: PUSH
6211: LD_INT 20
6213: EQUAL
6214: IFFALSE 6224
// sRemote := true ;
6216: LD_ADDR_EXP 54
6220: PUSH
6221: LD_INT 1
6223: ST_TO_ADDR
// if p3 = 21 then
6224: LD_VAR 0 3
6228: PUSH
6229: LD_INT 21
6231: EQUAL
6232: IFFALSE 6242
// sPowell := true ;
6234: LD_ADDR_EXP 55
6238: PUSH
6239: LD_INT 1
6241: ST_TO_ADDR
// if p3 = 22 then
6242: LD_VAR 0 3
6246: PUSH
6247: LD_INT 22
6249: EQUAL
6250: IFFALSE 6260
// sTeleport := true ;
6252: LD_ADDR_EXP 58
6256: PUSH
6257: LD_INT 1
6259: ST_TO_ADDR
// if p3 = 23 then
6260: LD_VAR 0 3
6264: PUSH
6265: LD_INT 23
6267: EQUAL
6268: IFFALSE 6278
// sOilTower := true ;
6270: LD_ADDR_EXP 60
6274: PUSH
6275: LD_INT 1
6277: ST_TO_ADDR
// if p3 = 24 then
6278: LD_VAR 0 3
6282: PUSH
6283: LD_INT 24
6285: EQUAL
6286: IFFALSE 6296
// sShovel := true ;
6288: LD_ADDR_EXP 61
6292: PUSH
6293: LD_INT 1
6295: ST_TO_ADDR
// if p3 = 25 then
6296: LD_VAR 0 3
6300: PUSH
6301: LD_INT 25
6303: EQUAL
6304: IFFALSE 6314
// sSheik := true ;
6306: LD_ADDR_EXP 62
6310: PUSH
6311: LD_INT 1
6313: ST_TO_ADDR
// if p3 = 26 then
6314: LD_VAR 0 3
6318: PUSH
6319: LD_INT 26
6321: EQUAL
6322: IFFALSE 6332
// sEarthquake := true ;
6324: LD_ADDR_EXP 64
6328: PUSH
6329: LD_INT 1
6331: ST_TO_ADDR
// if p3 = 27 then
6332: LD_VAR 0 3
6336: PUSH
6337: LD_INT 27
6339: EQUAL
6340: IFFALSE 6350
// sAI := true ;
6342: LD_ADDR_EXP 65
6346: PUSH
6347: LD_INT 1
6349: ST_TO_ADDR
// if p3 = 28 then
6350: LD_VAR 0 3
6354: PUSH
6355: LD_INT 28
6357: EQUAL
6358: IFFALSE 6368
// sCargo := true ;
6360: LD_ADDR_EXP 68
6364: PUSH
6365: LD_INT 1
6367: ST_TO_ADDR
// if p3 = 29 then
6368: LD_VAR 0 3
6372: PUSH
6373: LD_INT 29
6375: EQUAL
6376: IFFALSE 6386
// sDLaser := true ;
6378: LD_ADDR_EXP 69
6382: PUSH
6383: LD_INT 1
6385: ST_TO_ADDR
// if p3 = 30 then
6386: LD_VAR 0 3
6390: PUSH
6391: LD_INT 30
6393: EQUAL
6394: IFFALSE 6404
// sExchange := true ;
6396: LD_ADDR_EXP 70
6400: PUSH
6401: LD_INT 1
6403: ST_TO_ADDR
// if p3 = 31 then
6404: LD_VAR 0 3
6408: PUSH
6409: LD_INT 31
6411: EQUAL
6412: IFFALSE 6422
// sFac := true ;
6414: LD_ADDR_EXP 71
6418: PUSH
6419: LD_INT 1
6421: ST_TO_ADDR
// if p3 = 32 then
6422: LD_VAR 0 3
6426: PUSH
6427: LD_INT 32
6429: EQUAL
6430: IFFALSE 6440
// sPower := true ;
6432: LD_ADDR_EXP 72
6436: PUSH
6437: LD_INT 1
6439: ST_TO_ADDR
// if p3 = 33 then
6440: LD_VAR 0 3
6444: PUSH
6445: LD_INT 33
6447: EQUAL
6448: IFFALSE 6458
// sRandom := true ;
6450: LD_ADDR_EXP 73
6454: PUSH
6455: LD_INT 1
6457: ST_TO_ADDR
// if p3 = 34 then
6458: LD_VAR 0 3
6462: PUSH
6463: LD_INT 34
6465: EQUAL
6466: IFFALSE 6476
// sShield := true ;
6468: LD_ADDR_EXP 74
6472: PUSH
6473: LD_INT 1
6475: ST_TO_ADDR
// if p3 = 35 then
6476: LD_VAR 0 3
6480: PUSH
6481: LD_INT 35
6483: EQUAL
6484: IFFALSE 6494
// sTime := true ;
6486: LD_ADDR_EXP 75
6490: PUSH
6491: LD_INT 1
6493: ST_TO_ADDR
// if p3 = 36 then
6494: LD_VAR 0 3
6498: PUSH
6499: LD_INT 36
6501: EQUAL
6502: IFFALSE 6512
// sTools := true ;
6504: LD_ADDR_EXP 76
6508: PUSH
6509: LD_INT 1
6511: ST_TO_ADDR
// if p3 = 101 then
6512: LD_VAR 0 3
6516: PUSH
6517: LD_INT 101
6519: EQUAL
6520: IFFALSE 6530
// sSold := true ;
6522: LD_ADDR_EXP 41
6526: PUSH
6527: LD_INT 1
6529: ST_TO_ADDR
// if p3 = 102 then
6530: LD_VAR 0 3
6534: PUSH
6535: LD_INT 102
6537: EQUAL
6538: IFFALSE 6548
// sDiff := true ;
6540: LD_ADDR_EXP 42
6544: PUSH
6545: LD_INT 1
6547: ST_TO_ADDR
// if p3 = 103 then
6548: LD_VAR 0 3
6552: PUSH
6553: LD_INT 103
6555: EQUAL
6556: IFFALSE 6566
// sFog := true ;
6558: LD_ADDR_EXP 45
6562: PUSH
6563: LD_INT 1
6565: ST_TO_ADDR
// if p3 = 104 then
6566: LD_VAR 0 3
6570: PUSH
6571: LD_INT 104
6573: EQUAL
6574: IFFALSE 6584
// sReset := true ;
6576: LD_ADDR_EXP 46
6580: PUSH
6581: LD_INT 1
6583: ST_TO_ADDR
// if p3 = 105 then
6584: LD_VAR 0 3
6588: PUSH
6589: LD_INT 105
6591: EQUAL
6592: IFFALSE 6602
// sSun := true ;
6594: LD_ADDR_EXP 47
6598: PUSH
6599: LD_INT 1
6601: ST_TO_ADDR
// if p3 = 106 then
6602: LD_VAR 0 3
6606: PUSH
6607: LD_INT 106
6609: EQUAL
6610: IFFALSE 6620
// sTiger := true ;
6612: LD_ADDR_EXP 43
6616: PUSH
6617: LD_INT 1
6619: ST_TO_ADDR
// if p3 = 107 then
6620: LD_VAR 0 3
6624: PUSH
6625: LD_INT 107
6627: EQUAL
6628: IFFALSE 6638
// sBomb := true ;
6630: LD_ADDR_EXP 44
6634: PUSH
6635: LD_INT 1
6637: ST_TO_ADDR
// if p3 = 108 then
6638: LD_VAR 0 3
6642: PUSH
6643: LD_INT 108
6645: EQUAL
6646: IFFALSE 6656
// sWound := true ;
6648: LD_ADDR_EXP 52
6652: PUSH
6653: LD_INT 1
6655: ST_TO_ADDR
// if p3 = 109 then
6656: LD_VAR 0 3
6660: PUSH
6661: LD_INT 109
6663: EQUAL
6664: IFFALSE 6674
// sBetray := true ;
6666: LD_ADDR_EXP 56
6670: PUSH
6671: LD_INT 1
6673: ST_TO_ADDR
// if p3 = 110 then
6674: LD_VAR 0 3
6678: PUSH
6679: LD_INT 110
6681: EQUAL
6682: IFFALSE 6692
// sContamin := true ;
6684: LD_ADDR_EXP 57
6688: PUSH
6689: LD_INT 1
6691: ST_TO_ADDR
// if p3 = 111 then
6692: LD_VAR 0 3
6696: PUSH
6697: LD_INT 111
6699: EQUAL
6700: IFFALSE 6710
// sOil := true ;
6702: LD_ADDR_EXP 59
6706: PUSH
6707: LD_INT 1
6709: ST_TO_ADDR
// if p3 = 112 then
6710: LD_VAR 0 3
6714: PUSH
6715: LD_INT 112
6717: EQUAL
6718: IFFALSE 6728
// sStu := true ;
6720: LD_ADDR_EXP 63
6724: PUSH
6725: LD_INT 1
6727: ST_TO_ADDR
// if p3 = 113 then
6728: LD_VAR 0 3
6732: PUSH
6733: LD_INT 113
6735: EQUAL
6736: IFFALSE 6746
// sBazooka := true ;
6738: LD_ADDR_EXP 66
6742: PUSH
6743: LD_INT 1
6745: ST_TO_ADDR
// if p3 = 114 then
6746: LD_VAR 0 3
6750: PUSH
6751: LD_INT 114
6753: EQUAL
6754: IFFALSE 6764
// sMortar := true ;
6756: LD_ADDR_EXP 67
6760: PUSH
6761: LD_INT 1
6763: ST_TO_ADDR
// if p3 = 115 then
6764: LD_VAR 0 3
6768: PUSH
6769: LD_INT 115
6771: EQUAL
6772: IFFALSE 6782
// sRanger := true ;
6774: LD_ADDR_EXP 77
6778: PUSH
6779: LD_INT 1
6781: ST_TO_ADDR
// end ; if p2 = 101 then
6782: LD_VAR 0 2
6786: PUSH
6787: LD_INT 101
6789: EQUAL
6790: IFFALSE 6918
// begin case p3 of 1 :
6792: LD_VAR 0 3
6796: PUSH
6797: LD_INT 1
6799: DOUBLE
6800: EQUAL
6801: IFTRUE 6805
6803: GO 6812
6805: POP
// hHackUnlimitedResources ; 2 :
6806: CALL 17953 0 0
6810: GO 6918
6812: LD_INT 2
6814: DOUBLE
6815: EQUAL
6816: IFTRUE 6820
6818: GO 6827
6820: POP
// hHackSetLevel10 ; 3 :
6821: CALL 18086 0 0
6825: GO 6918
6827: LD_INT 3
6829: DOUBLE
6830: EQUAL
6831: IFTRUE 6835
6833: GO 6842
6835: POP
// hHackSetLevel10YourUnits ; 4 :
6836: CALL 18171 0 0
6840: GO 6918
6842: LD_INT 4
6844: DOUBLE
6845: EQUAL
6846: IFTRUE 6850
6848: GO 6857
6850: POP
// hHackInvincible ; 5 :
6851: CALL 18619 0 0
6855: GO 6918
6857: LD_INT 5
6859: DOUBLE
6860: EQUAL
6861: IFTRUE 6865
6863: GO 6872
6865: POP
// hHackInvisible ; 6 :
6866: CALL 18730 0 0
6870: GO 6918
6872: LD_INT 6
6874: DOUBLE
6875: EQUAL
6876: IFTRUE 6880
6878: GO 6887
6880: POP
// hHackChangeYourSide ; 7 :
6881: CALL 18787 0 0
6885: GO 6918
6887: LD_INT 7
6889: DOUBLE
6890: EQUAL
6891: IFTRUE 6895
6893: GO 6902
6895: POP
// hHackChangeUnitSide ; 8 :
6896: CALL 18829 0 0
6900: GO 6918
6902: LD_INT 8
6904: DOUBLE
6905: EQUAL
6906: IFTRUE 6910
6908: GO 6917
6910: POP
// hHackFog ; end ;
6911: CALL 18930 0 0
6915: GO 6918
6917: POP
// end ; end ;
6918: PPOPN 6
6920: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
6921: GO 6923
6923: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
6924: LD_STRING initStreamRollete();
6926: PPUSH
6927: CALL_OW 559
// InitStreamMode ;
6931: CALL 6940 0 0
// DefineStreamItems ( ) ;
6935: CALL 7380 0 0
// end ;
6939: END
// function InitStreamMode ; begin
6940: LD_INT 0
6942: PPUSH
// streamModeActive := false ;
6943: LD_ADDR_EXP 24
6947: PUSH
6948: LD_INT 0
6950: ST_TO_ADDR
// normalCounter := 36 ;
6951: LD_ADDR_EXP 25
6955: PUSH
6956: LD_INT 36
6958: ST_TO_ADDR
// hardcoreCounter := 16 ;
6959: LD_ADDR_EXP 26
6963: PUSH
6964: LD_INT 16
6966: ST_TO_ADDR
// sRocket := false ;
6967: LD_ADDR_EXP 29
6971: PUSH
6972: LD_INT 0
6974: ST_TO_ADDR
// sSpeed := false ;
6975: LD_ADDR_EXP 28
6979: PUSH
6980: LD_INT 0
6982: ST_TO_ADDR
// sEngine := false ;
6983: LD_ADDR_EXP 30
6987: PUSH
6988: LD_INT 0
6990: ST_TO_ADDR
// sSpec := false ;
6991: LD_ADDR_EXP 27
6995: PUSH
6996: LD_INT 0
6998: ST_TO_ADDR
// sLevel := false ;
6999: LD_ADDR_EXP 31
7003: PUSH
7004: LD_INT 0
7006: ST_TO_ADDR
// sArmoury := false ;
7007: LD_ADDR_EXP 32
7011: PUSH
7012: LD_INT 0
7014: ST_TO_ADDR
// sRadar := false ;
7015: LD_ADDR_EXP 33
7019: PUSH
7020: LD_INT 0
7022: ST_TO_ADDR
// sBunker := false ;
7023: LD_ADDR_EXP 34
7027: PUSH
7028: LD_INT 0
7030: ST_TO_ADDR
// sHack := false ;
7031: LD_ADDR_EXP 35
7035: PUSH
7036: LD_INT 0
7038: ST_TO_ADDR
// sFire := false ;
7039: LD_ADDR_EXP 36
7043: PUSH
7044: LD_INT 0
7046: ST_TO_ADDR
// sRefresh := false ;
7047: LD_ADDR_EXP 37
7051: PUSH
7052: LD_INT 0
7054: ST_TO_ADDR
// sExp := false ;
7055: LD_ADDR_EXP 38
7059: PUSH
7060: LD_INT 0
7062: ST_TO_ADDR
// sDepot := false ;
7063: LD_ADDR_EXP 39
7067: PUSH
7068: LD_INT 0
7070: ST_TO_ADDR
// sFlag := false ;
7071: LD_ADDR_EXP 40
7075: PUSH
7076: LD_INT 0
7078: ST_TO_ADDR
// sKamikadze := false ;
7079: LD_ADDR_EXP 48
7083: PUSH
7084: LD_INT 0
7086: ST_TO_ADDR
// sTroll := false ;
7087: LD_ADDR_EXP 49
7091: PUSH
7092: LD_INT 0
7094: ST_TO_ADDR
// sSlow := false ;
7095: LD_ADDR_EXP 50
7099: PUSH
7100: LD_INT 0
7102: ST_TO_ADDR
// sLack := false ;
7103: LD_ADDR_EXP 51
7107: PUSH
7108: LD_INT 0
7110: ST_TO_ADDR
// sTank := false ;
7111: LD_ADDR_EXP 53
7115: PUSH
7116: LD_INT 0
7118: ST_TO_ADDR
// sRemote := false ;
7119: LD_ADDR_EXP 54
7123: PUSH
7124: LD_INT 0
7126: ST_TO_ADDR
// sPowell := false ;
7127: LD_ADDR_EXP 55
7131: PUSH
7132: LD_INT 0
7134: ST_TO_ADDR
// sTeleport := false ;
7135: LD_ADDR_EXP 58
7139: PUSH
7140: LD_INT 0
7142: ST_TO_ADDR
// sOilTower := false ;
7143: LD_ADDR_EXP 60
7147: PUSH
7148: LD_INT 0
7150: ST_TO_ADDR
// sShovel := false ;
7151: LD_ADDR_EXP 61
7155: PUSH
7156: LD_INT 0
7158: ST_TO_ADDR
// sSheik := false ;
7159: LD_ADDR_EXP 62
7163: PUSH
7164: LD_INT 0
7166: ST_TO_ADDR
// sEarthquake := false ;
7167: LD_ADDR_EXP 64
7171: PUSH
7172: LD_INT 0
7174: ST_TO_ADDR
// sAI := false ;
7175: LD_ADDR_EXP 65
7179: PUSH
7180: LD_INT 0
7182: ST_TO_ADDR
// sCargo := false ;
7183: LD_ADDR_EXP 68
7187: PUSH
7188: LD_INT 0
7190: ST_TO_ADDR
// sDLaser := false ;
7191: LD_ADDR_EXP 69
7195: PUSH
7196: LD_INT 0
7198: ST_TO_ADDR
// sExchange := false ;
7199: LD_ADDR_EXP 70
7203: PUSH
7204: LD_INT 0
7206: ST_TO_ADDR
// sFac := false ;
7207: LD_ADDR_EXP 71
7211: PUSH
7212: LD_INT 0
7214: ST_TO_ADDR
// sPower := false ;
7215: LD_ADDR_EXP 72
7219: PUSH
7220: LD_INT 0
7222: ST_TO_ADDR
// sRandom := false ;
7223: LD_ADDR_EXP 73
7227: PUSH
7228: LD_INT 0
7230: ST_TO_ADDR
// sShield := false ;
7231: LD_ADDR_EXP 74
7235: PUSH
7236: LD_INT 0
7238: ST_TO_ADDR
// sTime := false ;
7239: LD_ADDR_EXP 75
7243: PUSH
7244: LD_INT 0
7246: ST_TO_ADDR
// sTools := false ;
7247: LD_ADDR_EXP 76
7251: PUSH
7252: LD_INT 0
7254: ST_TO_ADDR
// sSold := false ;
7255: LD_ADDR_EXP 41
7259: PUSH
7260: LD_INT 0
7262: ST_TO_ADDR
// sDiff := false ;
7263: LD_ADDR_EXP 42
7267: PUSH
7268: LD_INT 0
7270: ST_TO_ADDR
// sFog := false ;
7271: LD_ADDR_EXP 45
7275: PUSH
7276: LD_INT 0
7278: ST_TO_ADDR
// sReset := false ;
7279: LD_ADDR_EXP 46
7283: PUSH
7284: LD_INT 0
7286: ST_TO_ADDR
// sSun := false ;
7287: LD_ADDR_EXP 47
7291: PUSH
7292: LD_INT 0
7294: ST_TO_ADDR
// sTiger := false ;
7295: LD_ADDR_EXP 43
7299: PUSH
7300: LD_INT 0
7302: ST_TO_ADDR
// sBomb := false ;
7303: LD_ADDR_EXP 44
7307: PUSH
7308: LD_INT 0
7310: ST_TO_ADDR
// sWound := false ;
7311: LD_ADDR_EXP 52
7315: PUSH
7316: LD_INT 0
7318: ST_TO_ADDR
// sBetray := false ;
7319: LD_ADDR_EXP 56
7323: PUSH
7324: LD_INT 0
7326: ST_TO_ADDR
// sContamin := false ;
7327: LD_ADDR_EXP 57
7331: PUSH
7332: LD_INT 0
7334: ST_TO_ADDR
// sOil := false ;
7335: LD_ADDR_EXP 59
7339: PUSH
7340: LD_INT 0
7342: ST_TO_ADDR
// sStu := false ;
7343: LD_ADDR_EXP 63
7347: PUSH
7348: LD_INT 0
7350: ST_TO_ADDR
// sBazooka := false ;
7351: LD_ADDR_EXP 66
7355: PUSH
7356: LD_INT 0
7358: ST_TO_ADDR
// sMortar := false ;
7359: LD_ADDR_EXP 67
7363: PUSH
7364: LD_INT 0
7366: ST_TO_ADDR
// sRanger := false ;
7367: LD_ADDR_EXP 77
7371: PUSH
7372: LD_INT 0
7374: ST_TO_ADDR
// end ;
7375: LD_VAR 0 1
7379: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
7380: LD_INT 0
7382: PPUSH
7383: PPUSH
7384: PPUSH
7385: PPUSH
7386: PPUSH
// result := [ ] ;
7387: LD_ADDR_VAR 0 1
7391: PUSH
7392: EMPTY
7393: ST_TO_ADDR
// if campaign_id = 1 then
7394: LD_OWVAR 69
7398: PUSH
7399: LD_INT 1
7401: EQUAL
7402: IFFALSE 10340
// begin case mission_number of 1 :
7404: LD_OWVAR 70
7408: PUSH
7409: LD_INT 1
7411: DOUBLE
7412: EQUAL
7413: IFTRUE 7417
7415: GO 7481
7417: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
7418: LD_ADDR_VAR 0 1
7422: PUSH
7423: LD_INT 2
7425: PUSH
7426: LD_INT 4
7428: PUSH
7429: LD_INT 11
7431: PUSH
7432: LD_INT 12
7434: PUSH
7435: LD_INT 15
7437: PUSH
7438: LD_INT 16
7440: PUSH
7441: LD_INT 22
7443: PUSH
7444: LD_INT 23
7446: PUSH
7447: LD_INT 26
7449: PUSH
7450: EMPTY
7451: LIST
7452: LIST
7453: LIST
7454: LIST
7455: LIST
7456: LIST
7457: LIST
7458: LIST
7459: LIST
7460: PUSH
7461: LD_INT 101
7463: PUSH
7464: LD_INT 102
7466: PUSH
7467: LD_INT 106
7469: PUSH
7470: EMPTY
7471: LIST
7472: LIST
7473: LIST
7474: PUSH
7475: EMPTY
7476: LIST
7477: LIST
7478: ST_TO_ADDR
7479: GO 10338
7481: LD_INT 2
7483: DOUBLE
7484: EQUAL
7485: IFTRUE 7489
7487: GO 7561
7489: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
7490: LD_ADDR_VAR 0 1
7494: PUSH
7495: LD_INT 2
7497: PUSH
7498: LD_INT 4
7500: PUSH
7501: LD_INT 11
7503: PUSH
7504: LD_INT 12
7506: PUSH
7507: LD_INT 15
7509: PUSH
7510: LD_INT 16
7512: PUSH
7513: LD_INT 22
7515: PUSH
7516: LD_INT 23
7518: PUSH
7519: LD_INT 26
7521: PUSH
7522: EMPTY
7523: LIST
7524: LIST
7525: LIST
7526: LIST
7527: LIST
7528: LIST
7529: LIST
7530: LIST
7531: LIST
7532: PUSH
7533: LD_INT 101
7535: PUSH
7536: LD_INT 102
7538: PUSH
7539: LD_INT 105
7541: PUSH
7542: LD_INT 106
7544: PUSH
7545: LD_INT 108
7547: PUSH
7548: EMPTY
7549: LIST
7550: LIST
7551: LIST
7552: LIST
7553: LIST
7554: PUSH
7555: EMPTY
7556: LIST
7557: LIST
7558: ST_TO_ADDR
7559: GO 10338
7561: LD_INT 3
7563: DOUBLE
7564: EQUAL
7565: IFTRUE 7569
7567: GO 7645
7569: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
7570: LD_ADDR_VAR 0 1
7574: PUSH
7575: LD_INT 2
7577: PUSH
7578: LD_INT 4
7580: PUSH
7581: LD_INT 5
7583: PUSH
7584: LD_INT 11
7586: PUSH
7587: LD_INT 12
7589: PUSH
7590: LD_INT 15
7592: PUSH
7593: LD_INT 16
7595: PUSH
7596: LD_INT 22
7598: PUSH
7599: LD_INT 26
7601: PUSH
7602: LD_INT 36
7604: PUSH
7605: EMPTY
7606: LIST
7607: LIST
7608: LIST
7609: LIST
7610: LIST
7611: LIST
7612: LIST
7613: LIST
7614: LIST
7615: LIST
7616: PUSH
7617: LD_INT 101
7619: PUSH
7620: LD_INT 102
7622: PUSH
7623: LD_INT 105
7625: PUSH
7626: LD_INT 106
7628: PUSH
7629: LD_INT 108
7631: PUSH
7632: EMPTY
7633: LIST
7634: LIST
7635: LIST
7636: LIST
7637: LIST
7638: PUSH
7639: EMPTY
7640: LIST
7641: LIST
7642: ST_TO_ADDR
7643: GO 10338
7645: LD_INT 4
7647: DOUBLE
7648: EQUAL
7649: IFTRUE 7653
7651: GO 7737
7653: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
7654: LD_ADDR_VAR 0 1
7658: PUSH
7659: LD_INT 2
7661: PUSH
7662: LD_INT 4
7664: PUSH
7665: LD_INT 5
7667: PUSH
7668: LD_INT 8
7670: PUSH
7671: LD_INT 11
7673: PUSH
7674: LD_INT 12
7676: PUSH
7677: LD_INT 15
7679: PUSH
7680: LD_INT 16
7682: PUSH
7683: LD_INT 22
7685: PUSH
7686: LD_INT 23
7688: PUSH
7689: LD_INT 26
7691: PUSH
7692: LD_INT 36
7694: PUSH
7695: EMPTY
7696: LIST
7697: LIST
7698: LIST
7699: LIST
7700: LIST
7701: LIST
7702: LIST
7703: LIST
7704: LIST
7705: LIST
7706: LIST
7707: LIST
7708: PUSH
7709: LD_INT 101
7711: PUSH
7712: LD_INT 102
7714: PUSH
7715: LD_INT 105
7717: PUSH
7718: LD_INT 106
7720: PUSH
7721: LD_INT 108
7723: PUSH
7724: EMPTY
7725: LIST
7726: LIST
7727: LIST
7728: LIST
7729: LIST
7730: PUSH
7731: EMPTY
7732: LIST
7733: LIST
7734: ST_TO_ADDR
7735: GO 10338
7737: LD_INT 5
7739: DOUBLE
7740: EQUAL
7741: IFTRUE 7745
7743: GO 7845
7745: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
7746: LD_ADDR_VAR 0 1
7750: PUSH
7751: LD_INT 2
7753: PUSH
7754: LD_INT 4
7756: PUSH
7757: LD_INT 5
7759: PUSH
7760: LD_INT 6
7762: PUSH
7763: LD_INT 8
7765: PUSH
7766: LD_INT 11
7768: PUSH
7769: LD_INT 12
7771: PUSH
7772: LD_INT 15
7774: PUSH
7775: LD_INT 16
7777: PUSH
7778: LD_INT 22
7780: PUSH
7781: LD_INT 23
7783: PUSH
7784: LD_INT 25
7786: PUSH
7787: LD_INT 26
7789: PUSH
7790: LD_INT 36
7792: PUSH
7793: EMPTY
7794: LIST
7795: LIST
7796: LIST
7797: LIST
7798: LIST
7799: LIST
7800: LIST
7801: LIST
7802: LIST
7803: LIST
7804: LIST
7805: LIST
7806: LIST
7807: LIST
7808: PUSH
7809: LD_INT 101
7811: PUSH
7812: LD_INT 102
7814: PUSH
7815: LD_INT 105
7817: PUSH
7818: LD_INT 106
7820: PUSH
7821: LD_INT 108
7823: PUSH
7824: LD_INT 109
7826: PUSH
7827: LD_INT 112
7829: PUSH
7830: EMPTY
7831: LIST
7832: LIST
7833: LIST
7834: LIST
7835: LIST
7836: LIST
7837: LIST
7838: PUSH
7839: EMPTY
7840: LIST
7841: LIST
7842: ST_TO_ADDR
7843: GO 10338
7845: LD_INT 6
7847: DOUBLE
7848: EQUAL
7849: IFTRUE 7853
7851: GO 7973
7853: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
7854: LD_ADDR_VAR 0 1
7858: PUSH
7859: LD_INT 2
7861: PUSH
7862: LD_INT 4
7864: PUSH
7865: LD_INT 5
7867: PUSH
7868: LD_INT 6
7870: PUSH
7871: LD_INT 8
7873: PUSH
7874: LD_INT 11
7876: PUSH
7877: LD_INT 12
7879: PUSH
7880: LD_INT 15
7882: PUSH
7883: LD_INT 16
7885: PUSH
7886: LD_INT 20
7888: PUSH
7889: LD_INT 21
7891: PUSH
7892: LD_INT 22
7894: PUSH
7895: LD_INT 23
7897: PUSH
7898: LD_INT 25
7900: PUSH
7901: LD_INT 26
7903: PUSH
7904: LD_INT 30
7906: PUSH
7907: LD_INT 31
7909: PUSH
7910: LD_INT 32
7912: PUSH
7913: LD_INT 36
7915: PUSH
7916: EMPTY
7917: LIST
7918: LIST
7919: LIST
7920: LIST
7921: LIST
7922: LIST
7923: LIST
7924: LIST
7925: LIST
7926: LIST
7927: LIST
7928: LIST
7929: LIST
7930: LIST
7931: LIST
7932: LIST
7933: LIST
7934: LIST
7935: LIST
7936: PUSH
7937: LD_INT 101
7939: PUSH
7940: LD_INT 102
7942: PUSH
7943: LD_INT 105
7945: PUSH
7946: LD_INT 106
7948: PUSH
7949: LD_INT 108
7951: PUSH
7952: LD_INT 109
7954: PUSH
7955: LD_INT 112
7957: PUSH
7958: EMPTY
7959: LIST
7960: LIST
7961: LIST
7962: LIST
7963: LIST
7964: LIST
7965: LIST
7966: PUSH
7967: EMPTY
7968: LIST
7969: LIST
7970: ST_TO_ADDR
7971: GO 10338
7973: LD_INT 7
7975: DOUBLE
7976: EQUAL
7977: IFTRUE 7981
7979: GO 8081
7981: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
7982: LD_ADDR_VAR 0 1
7986: PUSH
7987: LD_INT 2
7989: PUSH
7990: LD_INT 4
7992: PUSH
7993: LD_INT 5
7995: PUSH
7996: LD_INT 7
7998: PUSH
7999: LD_INT 11
8001: PUSH
8002: LD_INT 12
8004: PUSH
8005: LD_INT 15
8007: PUSH
8008: LD_INT 16
8010: PUSH
8011: LD_INT 20
8013: PUSH
8014: LD_INT 21
8016: PUSH
8017: LD_INT 22
8019: PUSH
8020: LD_INT 23
8022: PUSH
8023: LD_INT 25
8025: PUSH
8026: LD_INT 26
8028: PUSH
8029: EMPTY
8030: LIST
8031: LIST
8032: LIST
8033: LIST
8034: LIST
8035: LIST
8036: LIST
8037: LIST
8038: LIST
8039: LIST
8040: LIST
8041: LIST
8042: LIST
8043: LIST
8044: PUSH
8045: LD_INT 101
8047: PUSH
8048: LD_INT 102
8050: PUSH
8051: LD_INT 103
8053: PUSH
8054: LD_INT 105
8056: PUSH
8057: LD_INT 106
8059: PUSH
8060: LD_INT 108
8062: PUSH
8063: LD_INT 112
8065: PUSH
8066: EMPTY
8067: LIST
8068: LIST
8069: LIST
8070: LIST
8071: LIST
8072: LIST
8073: LIST
8074: PUSH
8075: EMPTY
8076: LIST
8077: LIST
8078: ST_TO_ADDR
8079: GO 10338
8081: LD_INT 8
8083: DOUBLE
8084: EQUAL
8085: IFTRUE 8089
8087: GO 8217
8089: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
8090: LD_ADDR_VAR 0 1
8094: PUSH
8095: LD_INT 2
8097: PUSH
8098: LD_INT 4
8100: PUSH
8101: LD_INT 5
8103: PUSH
8104: LD_INT 6
8106: PUSH
8107: LD_INT 7
8109: PUSH
8110: LD_INT 8
8112: PUSH
8113: LD_INT 11
8115: PUSH
8116: LD_INT 12
8118: PUSH
8119: LD_INT 15
8121: PUSH
8122: LD_INT 16
8124: PUSH
8125: LD_INT 20
8127: PUSH
8128: LD_INT 21
8130: PUSH
8131: LD_INT 22
8133: PUSH
8134: LD_INT 23
8136: PUSH
8137: LD_INT 25
8139: PUSH
8140: LD_INT 26
8142: PUSH
8143: LD_INT 30
8145: PUSH
8146: LD_INT 31
8148: PUSH
8149: LD_INT 32
8151: PUSH
8152: LD_INT 36
8154: PUSH
8155: EMPTY
8156: LIST
8157: LIST
8158: LIST
8159: LIST
8160: LIST
8161: LIST
8162: LIST
8163: LIST
8164: LIST
8165: LIST
8166: LIST
8167: LIST
8168: LIST
8169: LIST
8170: LIST
8171: LIST
8172: LIST
8173: LIST
8174: LIST
8175: LIST
8176: PUSH
8177: LD_INT 101
8179: PUSH
8180: LD_INT 102
8182: PUSH
8183: LD_INT 103
8185: PUSH
8186: LD_INT 105
8188: PUSH
8189: LD_INT 106
8191: PUSH
8192: LD_INT 108
8194: PUSH
8195: LD_INT 109
8197: PUSH
8198: LD_INT 112
8200: PUSH
8201: EMPTY
8202: LIST
8203: LIST
8204: LIST
8205: LIST
8206: LIST
8207: LIST
8208: LIST
8209: LIST
8210: PUSH
8211: EMPTY
8212: LIST
8213: LIST
8214: ST_TO_ADDR
8215: GO 10338
8217: LD_INT 9
8219: DOUBLE
8220: EQUAL
8221: IFTRUE 8225
8223: GO 8361
8225: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
8226: LD_ADDR_VAR 0 1
8230: PUSH
8231: LD_INT 2
8233: PUSH
8234: LD_INT 4
8236: PUSH
8237: LD_INT 5
8239: PUSH
8240: LD_INT 6
8242: PUSH
8243: LD_INT 7
8245: PUSH
8246: LD_INT 8
8248: PUSH
8249: LD_INT 11
8251: PUSH
8252: LD_INT 12
8254: PUSH
8255: LD_INT 15
8257: PUSH
8258: LD_INT 16
8260: PUSH
8261: LD_INT 20
8263: PUSH
8264: LD_INT 21
8266: PUSH
8267: LD_INT 22
8269: PUSH
8270: LD_INT 23
8272: PUSH
8273: LD_INT 25
8275: PUSH
8276: LD_INT 26
8278: PUSH
8279: LD_INT 28
8281: PUSH
8282: LD_INT 30
8284: PUSH
8285: LD_INT 31
8287: PUSH
8288: LD_INT 32
8290: PUSH
8291: LD_INT 36
8293: PUSH
8294: EMPTY
8295: LIST
8296: LIST
8297: LIST
8298: LIST
8299: LIST
8300: LIST
8301: LIST
8302: LIST
8303: LIST
8304: LIST
8305: LIST
8306: LIST
8307: LIST
8308: LIST
8309: LIST
8310: LIST
8311: LIST
8312: LIST
8313: LIST
8314: LIST
8315: LIST
8316: PUSH
8317: LD_INT 101
8319: PUSH
8320: LD_INT 102
8322: PUSH
8323: LD_INT 103
8325: PUSH
8326: LD_INT 105
8328: PUSH
8329: LD_INT 106
8331: PUSH
8332: LD_INT 108
8334: PUSH
8335: LD_INT 109
8337: PUSH
8338: LD_INT 112
8340: PUSH
8341: LD_INT 114
8343: PUSH
8344: EMPTY
8345: LIST
8346: LIST
8347: LIST
8348: LIST
8349: LIST
8350: LIST
8351: LIST
8352: LIST
8353: LIST
8354: PUSH
8355: EMPTY
8356: LIST
8357: LIST
8358: ST_TO_ADDR
8359: GO 10338
8361: LD_INT 10
8363: DOUBLE
8364: EQUAL
8365: IFTRUE 8369
8367: GO 8553
8369: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
8370: LD_ADDR_VAR 0 1
8374: PUSH
8375: LD_INT 2
8377: PUSH
8378: LD_INT 4
8380: PUSH
8381: LD_INT 5
8383: PUSH
8384: LD_INT 6
8386: PUSH
8387: LD_INT 7
8389: PUSH
8390: LD_INT 8
8392: PUSH
8393: LD_INT 9
8395: PUSH
8396: LD_INT 10
8398: PUSH
8399: LD_INT 11
8401: PUSH
8402: LD_INT 12
8404: PUSH
8405: LD_INT 13
8407: PUSH
8408: LD_INT 14
8410: PUSH
8411: LD_INT 15
8413: PUSH
8414: LD_INT 16
8416: PUSH
8417: LD_INT 17
8419: PUSH
8420: LD_INT 18
8422: PUSH
8423: LD_INT 19
8425: PUSH
8426: LD_INT 20
8428: PUSH
8429: LD_INT 21
8431: PUSH
8432: LD_INT 22
8434: PUSH
8435: LD_INT 23
8437: PUSH
8438: LD_INT 24
8440: PUSH
8441: LD_INT 25
8443: PUSH
8444: LD_INT 26
8446: PUSH
8447: LD_INT 28
8449: PUSH
8450: LD_INT 30
8452: PUSH
8453: LD_INT 31
8455: PUSH
8456: LD_INT 32
8458: PUSH
8459: LD_INT 36
8461: PUSH
8462: EMPTY
8463: LIST
8464: LIST
8465: LIST
8466: LIST
8467: LIST
8468: LIST
8469: LIST
8470: LIST
8471: LIST
8472: LIST
8473: LIST
8474: LIST
8475: LIST
8476: LIST
8477: LIST
8478: LIST
8479: LIST
8480: LIST
8481: LIST
8482: LIST
8483: LIST
8484: LIST
8485: LIST
8486: LIST
8487: LIST
8488: LIST
8489: LIST
8490: LIST
8491: LIST
8492: PUSH
8493: LD_INT 101
8495: PUSH
8496: LD_INT 102
8498: PUSH
8499: LD_INT 103
8501: PUSH
8502: LD_INT 104
8504: PUSH
8505: LD_INT 105
8507: PUSH
8508: LD_INT 106
8510: PUSH
8511: LD_INT 107
8513: PUSH
8514: LD_INT 108
8516: PUSH
8517: LD_INT 109
8519: PUSH
8520: LD_INT 110
8522: PUSH
8523: LD_INT 111
8525: PUSH
8526: LD_INT 112
8528: PUSH
8529: LD_INT 114
8531: PUSH
8532: EMPTY
8533: LIST
8534: LIST
8535: LIST
8536: LIST
8537: LIST
8538: LIST
8539: LIST
8540: LIST
8541: LIST
8542: LIST
8543: LIST
8544: LIST
8545: LIST
8546: PUSH
8547: EMPTY
8548: LIST
8549: LIST
8550: ST_TO_ADDR
8551: GO 10338
8553: LD_INT 11
8555: DOUBLE
8556: EQUAL
8557: IFTRUE 8561
8559: GO 8753
8561: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
8562: LD_ADDR_VAR 0 1
8566: PUSH
8567: LD_INT 2
8569: PUSH
8570: LD_INT 3
8572: PUSH
8573: LD_INT 4
8575: PUSH
8576: LD_INT 5
8578: PUSH
8579: LD_INT 6
8581: PUSH
8582: LD_INT 7
8584: PUSH
8585: LD_INT 8
8587: PUSH
8588: LD_INT 9
8590: PUSH
8591: LD_INT 10
8593: PUSH
8594: LD_INT 11
8596: PUSH
8597: LD_INT 12
8599: PUSH
8600: LD_INT 13
8602: PUSH
8603: LD_INT 14
8605: PUSH
8606: LD_INT 15
8608: PUSH
8609: LD_INT 16
8611: PUSH
8612: LD_INT 17
8614: PUSH
8615: LD_INT 18
8617: PUSH
8618: LD_INT 19
8620: PUSH
8621: LD_INT 20
8623: PUSH
8624: LD_INT 21
8626: PUSH
8627: LD_INT 22
8629: PUSH
8630: LD_INT 23
8632: PUSH
8633: LD_INT 24
8635: PUSH
8636: LD_INT 25
8638: PUSH
8639: LD_INT 26
8641: PUSH
8642: LD_INT 28
8644: PUSH
8645: LD_INT 30
8647: PUSH
8648: LD_INT 31
8650: PUSH
8651: LD_INT 32
8653: PUSH
8654: LD_INT 34
8656: PUSH
8657: LD_INT 36
8659: PUSH
8660: EMPTY
8661: LIST
8662: LIST
8663: LIST
8664: LIST
8665: LIST
8666: LIST
8667: LIST
8668: LIST
8669: LIST
8670: LIST
8671: LIST
8672: LIST
8673: LIST
8674: LIST
8675: LIST
8676: LIST
8677: LIST
8678: LIST
8679: LIST
8680: LIST
8681: LIST
8682: LIST
8683: LIST
8684: LIST
8685: LIST
8686: LIST
8687: LIST
8688: LIST
8689: LIST
8690: LIST
8691: LIST
8692: PUSH
8693: LD_INT 101
8695: PUSH
8696: LD_INT 102
8698: PUSH
8699: LD_INT 103
8701: PUSH
8702: LD_INT 104
8704: PUSH
8705: LD_INT 105
8707: PUSH
8708: LD_INT 106
8710: PUSH
8711: LD_INT 107
8713: PUSH
8714: LD_INT 108
8716: PUSH
8717: LD_INT 109
8719: PUSH
8720: LD_INT 110
8722: PUSH
8723: LD_INT 111
8725: PUSH
8726: LD_INT 112
8728: PUSH
8729: LD_INT 114
8731: PUSH
8732: EMPTY
8733: LIST
8734: LIST
8735: LIST
8736: LIST
8737: LIST
8738: LIST
8739: LIST
8740: LIST
8741: LIST
8742: LIST
8743: LIST
8744: LIST
8745: LIST
8746: PUSH
8747: EMPTY
8748: LIST
8749: LIST
8750: ST_TO_ADDR
8751: GO 10338
8753: LD_INT 12
8755: DOUBLE
8756: EQUAL
8757: IFTRUE 8761
8759: GO 8969
8761: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
8762: LD_ADDR_VAR 0 1
8766: PUSH
8767: LD_INT 1
8769: PUSH
8770: LD_INT 2
8772: PUSH
8773: LD_INT 3
8775: PUSH
8776: LD_INT 4
8778: PUSH
8779: LD_INT 5
8781: PUSH
8782: LD_INT 6
8784: PUSH
8785: LD_INT 7
8787: PUSH
8788: LD_INT 8
8790: PUSH
8791: LD_INT 9
8793: PUSH
8794: LD_INT 10
8796: PUSH
8797: LD_INT 11
8799: PUSH
8800: LD_INT 12
8802: PUSH
8803: LD_INT 13
8805: PUSH
8806: LD_INT 14
8808: PUSH
8809: LD_INT 15
8811: PUSH
8812: LD_INT 16
8814: PUSH
8815: LD_INT 17
8817: PUSH
8818: LD_INT 18
8820: PUSH
8821: LD_INT 19
8823: PUSH
8824: LD_INT 20
8826: PUSH
8827: LD_INT 21
8829: PUSH
8830: LD_INT 22
8832: PUSH
8833: LD_INT 23
8835: PUSH
8836: LD_INT 24
8838: PUSH
8839: LD_INT 25
8841: PUSH
8842: LD_INT 26
8844: PUSH
8845: LD_INT 27
8847: PUSH
8848: LD_INT 28
8850: PUSH
8851: LD_INT 30
8853: PUSH
8854: LD_INT 31
8856: PUSH
8857: LD_INT 32
8859: PUSH
8860: LD_INT 33
8862: PUSH
8863: LD_INT 34
8865: PUSH
8866: LD_INT 36
8868: PUSH
8869: EMPTY
8870: LIST
8871: LIST
8872: LIST
8873: LIST
8874: LIST
8875: LIST
8876: LIST
8877: LIST
8878: LIST
8879: LIST
8880: LIST
8881: LIST
8882: LIST
8883: LIST
8884: LIST
8885: LIST
8886: LIST
8887: LIST
8888: LIST
8889: LIST
8890: LIST
8891: LIST
8892: LIST
8893: LIST
8894: LIST
8895: LIST
8896: LIST
8897: LIST
8898: LIST
8899: LIST
8900: LIST
8901: LIST
8902: LIST
8903: LIST
8904: PUSH
8905: LD_INT 101
8907: PUSH
8908: LD_INT 102
8910: PUSH
8911: LD_INT 103
8913: PUSH
8914: LD_INT 104
8916: PUSH
8917: LD_INT 105
8919: PUSH
8920: LD_INT 106
8922: PUSH
8923: LD_INT 107
8925: PUSH
8926: LD_INT 108
8928: PUSH
8929: LD_INT 109
8931: PUSH
8932: LD_INT 110
8934: PUSH
8935: LD_INT 111
8937: PUSH
8938: LD_INT 112
8940: PUSH
8941: LD_INT 113
8943: PUSH
8944: LD_INT 114
8946: PUSH
8947: EMPTY
8948: LIST
8949: LIST
8950: LIST
8951: LIST
8952: LIST
8953: LIST
8954: LIST
8955: LIST
8956: LIST
8957: LIST
8958: LIST
8959: LIST
8960: LIST
8961: LIST
8962: PUSH
8963: EMPTY
8964: LIST
8965: LIST
8966: ST_TO_ADDR
8967: GO 10338
8969: LD_INT 13
8971: DOUBLE
8972: EQUAL
8973: IFTRUE 8977
8975: GO 9173
8977: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
8978: LD_ADDR_VAR 0 1
8982: PUSH
8983: LD_INT 1
8985: PUSH
8986: LD_INT 2
8988: PUSH
8989: LD_INT 3
8991: PUSH
8992: LD_INT 4
8994: PUSH
8995: LD_INT 5
8997: PUSH
8998: LD_INT 8
9000: PUSH
9001: LD_INT 9
9003: PUSH
9004: LD_INT 10
9006: PUSH
9007: LD_INT 11
9009: PUSH
9010: LD_INT 12
9012: PUSH
9013: LD_INT 14
9015: PUSH
9016: LD_INT 15
9018: PUSH
9019: LD_INT 16
9021: PUSH
9022: LD_INT 17
9024: PUSH
9025: LD_INT 18
9027: PUSH
9028: LD_INT 19
9030: PUSH
9031: LD_INT 20
9033: PUSH
9034: LD_INT 21
9036: PUSH
9037: LD_INT 22
9039: PUSH
9040: LD_INT 23
9042: PUSH
9043: LD_INT 24
9045: PUSH
9046: LD_INT 25
9048: PUSH
9049: LD_INT 26
9051: PUSH
9052: LD_INT 27
9054: PUSH
9055: LD_INT 28
9057: PUSH
9058: LD_INT 30
9060: PUSH
9061: LD_INT 31
9063: PUSH
9064: LD_INT 32
9066: PUSH
9067: LD_INT 33
9069: PUSH
9070: LD_INT 34
9072: PUSH
9073: LD_INT 36
9075: PUSH
9076: EMPTY
9077: LIST
9078: LIST
9079: LIST
9080: LIST
9081: LIST
9082: LIST
9083: LIST
9084: LIST
9085: LIST
9086: LIST
9087: LIST
9088: LIST
9089: LIST
9090: LIST
9091: LIST
9092: LIST
9093: LIST
9094: LIST
9095: LIST
9096: LIST
9097: LIST
9098: LIST
9099: LIST
9100: LIST
9101: LIST
9102: LIST
9103: LIST
9104: LIST
9105: LIST
9106: LIST
9107: LIST
9108: PUSH
9109: LD_INT 101
9111: PUSH
9112: LD_INT 102
9114: PUSH
9115: LD_INT 103
9117: PUSH
9118: LD_INT 104
9120: PUSH
9121: LD_INT 105
9123: PUSH
9124: LD_INT 106
9126: PUSH
9127: LD_INT 107
9129: PUSH
9130: LD_INT 108
9132: PUSH
9133: LD_INT 109
9135: PUSH
9136: LD_INT 110
9138: PUSH
9139: LD_INT 111
9141: PUSH
9142: LD_INT 112
9144: PUSH
9145: LD_INT 113
9147: PUSH
9148: LD_INT 114
9150: PUSH
9151: EMPTY
9152: LIST
9153: LIST
9154: LIST
9155: LIST
9156: LIST
9157: LIST
9158: LIST
9159: LIST
9160: LIST
9161: LIST
9162: LIST
9163: LIST
9164: LIST
9165: LIST
9166: PUSH
9167: EMPTY
9168: LIST
9169: LIST
9170: ST_TO_ADDR
9171: GO 10338
9173: LD_INT 14
9175: DOUBLE
9176: EQUAL
9177: IFTRUE 9181
9179: GO 9393
9181: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
9182: LD_ADDR_VAR 0 1
9186: PUSH
9187: LD_INT 1
9189: PUSH
9190: LD_INT 2
9192: PUSH
9193: LD_INT 3
9195: PUSH
9196: LD_INT 4
9198: PUSH
9199: LD_INT 5
9201: PUSH
9202: LD_INT 6
9204: PUSH
9205: LD_INT 7
9207: PUSH
9208: LD_INT 8
9210: PUSH
9211: LD_INT 9
9213: PUSH
9214: LD_INT 10
9216: PUSH
9217: LD_INT 11
9219: PUSH
9220: LD_INT 12
9222: PUSH
9223: LD_INT 13
9225: PUSH
9226: LD_INT 14
9228: PUSH
9229: LD_INT 15
9231: PUSH
9232: LD_INT 16
9234: PUSH
9235: LD_INT 17
9237: PUSH
9238: LD_INT 18
9240: PUSH
9241: LD_INT 19
9243: PUSH
9244: LD_INT 20
9246: PUSH
9247: LD_INT 21
9249: PUSH
9250: LD_INT 22
9252: PUSH
9253: LD_INT 23
9255: PUSH
9256: LD_INT 24
9258: PUSH
9259: LD_INT 25
9261: PUSH
9262: LD_INT 26
9264: PUSH
9265: LD_INT 27
9267: PUSH
9268: LD_INT 28
9270: PUSH
9271: LD_INT 29
9273: PUSH
9274: LD_INT 30
9276: PUSH
9277: LD_INT 31
9279: PUSH
9280: LD_INT 32
9282: PUSH
9283: LD_INT 33
9285: PUSH
9286: LD_INT 34
9288: PUSH
9289: LD_INT 36
9291: PUSH
9292: EMPTY
9293: LIST
9294: LIST
9295: LIST
9296: LIST
9297: LIST
9298: LIST
9299: LIST
9300: LIST
9301: LIST
9302: LIST
9303: LIST
9304: LIST
9305: LIST
9306: LIST
9307: LIST
9308: LIST
9309: LIST
9310: LIST
9311: LIST
9312: LIST
9313: LIST
9314: LIST
9315: LIST
9316: LIST
9317: LIST
9318: LIST
9319: LIST
9320: LIST
9321: LIST
9322: LIST
9323: LIST
9324: LIST
9325: LIST
9326: LIST
9327: LIST
9328: PUSH
9329: LD_INT 101
9331: PUSH
9332: LD_INT 102
9334: PUSH
9335: LD_INT 103
9337: PUSH
9338: LD_INT 104
9340: PUSH
9341: LD_INT 105
9343: PUSH
9344: LD_INT 106
9346: PUSH
9347: LD_INT 107
9349: PUSH
9350: LD_INT 108
9352: PUSH
9353: LD_INT 109
9355: PUSH
9356: LD_INT 110
9358: PUSH
9359: LD_INT 111
9361: PUSH
9362: LD_INT 112
9364: PUSH
9365: LD_INT 113
9367: PUSH
9368: LD_INT 114
9370: PUSH
9371: EMPTY
9372: LIST
9373: LIST
9374: LIST
9375: LIST
9376: LIST
9377: LIST
9378: LIST
9379: LIST
9380: LIST
9381: LIST
9382: LIST
9383: LIST
9384: LIST
9385: LIST
9386: PUSH
9387: EMPTY
9388: LIST
9389: LIST
9390: ST_TO_ADDR
9391: GO 10338
9393: LD_INT 15
9395: DOUBLE
9396: EQUAL
9397: IFTRUE 9401
9399: GO 9613
9401: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
9402: LD_ADDR_VAR 0 1
9406: PUSH
9407: LD_INT 1
9409: PUSH
9410: LD_INT 2
9412: PUSH
9413: LD_INT 3
9415: PUSH
9416: LD_INT 4
9418: PUSH
9419: LD_INT 5
9421: PUSH
9422: LD_INT 6
9424: PUSH
9425: LD_INT 7
9427: PUSH
9428: LD_INT 8
9430: PUSH
9431: LD_INT 9
9433: PUSH
9434: LD_INT 10
9436: PUSH
9437: LD_INT 11
9439: PUSH
9440: LD_INT 12
9442: PUSH
9443: LD_INT 13
9445: PUSH
9446: LD_INT 14
9448: PUSH
9449: LD_INT 15
9451: PUSH
9452: LD_INT 16
9454: PUSH
9455: LD_INT 17
9457: PUSH
9458: LD_INT 18
9460: PUSH
9461: LD_INT 19
9463: PUSH
9464: LD_INT 20
9466: PUSH
9467: LD_INT 21
9469: PUSH
9470: LD_INT 22
9472: PUSH
9473: LD_INT 23
9475: PUSH
9476: LD_INT 24
9478: PUSH
9479: LD_INT 25
9481: PUSH
9482: LD_INT 26
9484: PUSH
9485: LD_INT 27
9487: PUSH
9488: LD_INT 28
9490: PUSH
9491: LD_INT 29
9493: PUSH
9494: LD_INT 30
9496: PUSH
9497: LD_INT 31
9499: PUSH
9500: LD_INT 32
9502: PUSH
9503: LD_INT 33
9505: PUSH
9506: LD_INT 34
9508: PUSH
9509: LD_INT 36
9511: PUSH
9512: EMPTY
9513: LIST
9514: LIST
9515: LIST
9516: LIST
9517: LIST
9518: LIST
9519: LIST
9520: LIST
9521: LIST
9522: LIST
9523: LIST
9524: LIST
9525: LIST
9526: LIST
9527: LIST
9528: LIST
9529: LIST
9530: LIST
9531: LIST
9532: LIST
9533: LIST
9534: LIST
9535: LIST
9536: LIST
9537: LIST
9538: LIST
9539: LIST
9540: LIST
9541: LIST
9542: LIST
9543: LIST
9544: LIST
9545: LIST
9546: LIST
9547: LIST
9548: PUSH
9549: LD_INT 101
9551: PUSH
9552: LD_INT 102
9554: PUSH
9555: LD_INT 103
9557: PUSH
9558: LD_INT 104
9560: PUSH
9561: LD_INT 105
9563: PUSH
9564: LD_INT 106
9566: PUSH
9567: LD_INT 107
9569: PUSH
9570: LD_INT 108
9572: PUSH
9573: LD_INT 109
9575: PUSH
9576: LD_INT 110
9578: PUSH
9579: LD_INT 111
9581: PUSH
9582: LD_INT 112
9584: PUSH
9585: LD_INT 113
9587: PUSH
9588: LD_INT 114
9590: PUSH
9591: EMPTY
9592: LIST
9593: LIST
9594: LIST
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: LIST
9600: LIST
9601: LIST
9602: LIST
9603: LIST
9604: LIST
9605: LIST
9606: PUSH
9607: EMPTY
9608: LIST
9609: LIST
9610: ST_TO_ADDR
9611: GO 10338
9613: LD_INT 16
9615: DOUBLE
9616: EQUAL
9617: IFTRUE 9621
9619: GO 9745
9621: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
9622: LD_ADDR_VAR 0 1
9626: PUSH
9627: LD_INT 2
9629: PUSH
9630: LD_INT 4
9632: PUSH
9633: LD_INT 5
9635: PUSH
9636: LD_INT 7
9638: PUSH
9639: LD_INT 11
9641: PUSH
9642: LD_INT 12
9644: PUSH
9645: LD_INT 15
9647: PUSH
9648: LD_INT 16
9650: PUSH
9651: LD_INT 20
9653: PUSH
9654: LD_INT 21
9656: PUSH
9657: LD_INT 22
9659: PUSH
9660: LD_INT 23
9662: PUSH
9663: LD_INT 25
9665: PUSH
9666: LD_INT 26
9668: PUSH
9669: LD_INT 30
9671: PUSH
9672: LD_INT 31
9674: PUSH
9675: LD_INT 32
9677: PUSH
9678: LD_INT 33
9680: PUSH
9681: LD_INT 34
9683: PUSH
9684: EMPTY
9685: LIST
9686: LIST
9687: LIST
9688: LIST
9689: LIST
9690: LIST
9691: LIST
9692: LIST
9693: LIST
9694: LIST
9695: LIST
9696: LIST
9697: LIST
9698: LIST
9699: LIST
9700: LIST
9701: LIST
9702: LIST
9703: LIST
9704: PUSH
9705: LD_INT 101
9707: PUSH
9708: LD_INT 102
9710: PUSH
9711: LD_INT 103
9713: PUSH
9714: LD_INT 106
9716: PUSH
9717: LD_INT 108
9719: PUSH
9720: LD_INT 112
9722: PUSH
9723: LD_INT 113
9725: PUSH
9726: LD_INT 114
9728: PUSH
9729: EMPTY
9730: LIST
9731: LIST
9732: LIST
9733: LIST
9734: LIST
9735: LIST
9736: LIST
9737: LIST
9738: PUSH
9739: EMPTY
9740: LIST
9741: LIST
9742: ST_TO_ADDR
9743: GO 10338
9745: LD_INT 17
9747: DOUBLE
9748: EQUAL
9749: IFTRUE 9753
9751: GO 9965
9753: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
9754: LD_ADDR_VAR 0 1
9758: PUSH
9759: LD_INT 1
9761: PUSH
9762: LD_INT 2
9764: PUSH
9765: LD_INT 3
9767: PUSH
9768: LD_INT 4
9770: PUSH
9771: LD_INT 5
9773: PUSH
9774: LD_INT 6
9776: PUSH
9777: LD_INT 7
9779: PUSH
9780: LD_INT 8
9782: PUSH
9783: LD_INT 9
9785: PUSH
9786: LD_INT 10
9788: PUSH
9789: LD_INT 11
9791: PUSH
9792: LD_INT 12
9794: PUSH
9795: LD_INT 13
9797: PUSH
9798: LD_INT 14
9800: PUSH
9801: LD_INT 15
9803: PUSH
9804: LD_INT 16
9806: PUSH
9807: LD_INT 17
9809: PUSH
9810: LD_INT 18
9812: PUSH
9813: LD_INT 19
9815: PUSH
9816: LD_INT 20
9818: PUSH
9819: LD_INT 21
9821: PUSH
9822: LD_INT 22
9824: PUSH
9825: LD_INT 23
9827: PUSH
9828: LD_INT 24
9830: PUSH
9831: LD_INT 25
9833: PUSH
9834: LD_INT 26
9836: PUSH
9837: LD_INT 27
9839: PUSH
9840: LD_INT 28
9842: PUSH
9843: LD_INT 29
9845: PUSH
9846: LD_INT 30
9848: PUSH
9849: LD_INT 31
9851: PUSH
9852: LD_INT 32
9854: PUSH
9855: LD_INT 33
9857: PUSH
9858: LD_INT 34
9860: PUSH
9861: LD_INT 36
9863: PUSH
9864: EMPTY
9865: LIST
9866: LIST
9867: LIST
9868: LIST
9869: LIST
9870: LIST
9871: LIST
9872: LIST
9873: LIST
9874: LIST
9875: LIST
9876: LIST
9877: LIST
9878: LIST
9879: LIST
9880: LIST
9881: LIST
9882: LIST
9883: LIST
9884: LIST
9885: LIST
9886: LIST
9887: LIST
9888: LIST
9889: LIST
9890: LIST
9891: LIST
9892: LIST
9893: LIST
9894: LIST
9895: LIST
9896: LIST
9897: LIST
9898: LIST
9899: LIST
9900: PUSH
9901: LD_INT 101
9903: PUSH
9904: LD_INT 102
9906: PUSH
9907: LD_INT 103
9909: PUSH
9910: LD_INT 104
9912: PUSH
9913: LD_INT 105
9915: PUSH
9916: LD_INT 106
9918: PUSH
9919: LD_INT 107
9921: PUSH
9922: LD_INT 108
9924: PUSH
9925: LD_INT 109
9927: PUSH
9928: LD_INT 110
9930: PUSH
9931: LD_INT 111
9933: PUSH
9934: LD_INT 112
9936: PUSH
9937: LD_INT 113
9939: PUSH
9940: LD_INT 114
9942: PUSH
9943: EMPTY
9944: LIST
9945: LIST
9946: LIST
9947: LIST
9948: LIST
9949: LIST
9950: LIST
9951: LIST
9952: LIST
9953: LIST
9954: LIST
9955: LIST
9956: LIST
9957: LIST
9958: PUSH
9959: EMPTY
9960: LIST
9961: LIST
9962: ST_TO_ADDR
9963: GO 10338
9965: LD_INT 18
9967: DOUBLE
9968: EQUAL
9969: IFTRUE 9973
9971: GO 10109
9973: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
9974: LD_ADDR_VAR 0 1
9978: PUSH
9979: LD_INT 2
9981: PUSH
9982: LD_INT 4
9984: PUSH
9985: LD_INT 5
9987: PUSH
9988: LD_INT 7
9990: PUSH
9991: LD_INT 11
9993: PUSH
9994: LD_INT 12
9996: PUSH
9997: LD_INT 15
9999: PUSH
10000: LD_INT 16
10002: PUSH
10003: LD_INT 20
10005: PUSH
10006: LD_INT 21
10008: PUSH
10009: LD_INT 22
10011: PUSH
10012: LD_INT 23
10014: PUSH
10015: LD_INT 25
10017: PUSH
10018: LD_INT 26
10020: PUSH
10021: LD_INT 30
10023: PUSH
10024: LD_INT 31
10026: PUSH
10027: LD_INT 32
10029: PUSH
10030: LD_INT 33
10032: PUSH
10033: LD_INT 34
10035: PUSH
10036: LD_INT 35
10038: PUSH
10039: LD_INT 36
10041: PUSH
10042: EMPTY
10043: LIST
10044: LIST
10045: LIST
10046: LIST
10047: LIST
10048: LIST
10049: LIST
10050: LIST
10051: LIST
10052: LIST
10053: LIST
10054: LIST
10055: LIST
10056: LIST
10057: LIST
10058: LIST
10059: LIST
10060: LIST
10061: LIST
10062: LIST
10063: LIST
10064: PUSH
10065: LD_INT 101
10067: PUSH
10068: LD_INT 102
10070: PUSH
10071: LD_INT 103
10073: PUSH
10074: LD_INT 106
10076: PUSH
10077: LD_INT 108
10079: PUSH
10080: LD_INT 112
10082: PUSH
10083: LD_INT 113
10085: PUSH
10086: LD_INT 114
10088: PUSH
10089: LD_INT 115
10091: PUSH
10092: EMPTY
10093: LIST
10094: LIST
10095: LIST
10096: LIST
10097: LIST
10098: LIST
10099: LIST
10100: LIST
10101: LIST
10102: PUSH
10103: EMPTY
10104: LIST
10105: LIST
10106: ST_TO_ADDR
10107: GO 10338
10109: LD_INT 19
10111: DOUBLE
10112: EQUAL
10113: IFTRUE 10117
10115: GO 10337
10117: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
10118: LD_ADDR_VAR 0 1
10122: PUSH
10123: LD_INT 1
10125: PUSH
10126: LD_INT 2
10128: PUSH
10129: LD_INT 3
10131: PUSH
10132: LD_INT 4
10134: PUSH
10135: LD_INT 5
10137: PUSH
10138: LD_INT 6
10140: PUSH
10141: LD_INT 7
10143: PUSH
10144: LD_INT 8
10146: PUSH
10147: LD_INT 9
10149: PUSH
10150: LD_INT 10
10152: PUSH
10153: LD_INT 11
10155: PUSH
10156: LD_INT 12
10158: PUSH
10159: LD_INT 13
10161: PUSH
10162: LD_INT 14
10164: PUSH
10165: LD_INT 15
10167: PUSH
10168: LD_INT 16
10170: PUSH
10171: LD_INT 17
10173: PUSH
10174: LD_INT 18
10176: PUSH
10177: LD_INT 19
10179: PUSH
10180: LD_INT 20
10182: PUSH
10183: LD_INT 21
10185: PUSH
10186: LD_INT 22
10188: PUSH
10189: LD_INT 23
10191: PUSH
10192: LD_INT 24
10194: PUSH
10195: LD_INT 25
10197: PUSH
10198: LD_INT 26
10200: PUSH
10201: LD_INT 27
10203: PUSH
10204: LD_INT 28
10206: PUSH
10207: LD_INT 29
10209: PUSH
10210: LD_INT 30
10212: PUSH
10213: LD_INT 31
10215: PUSH
10216: LD_INT 32
10218: PUSH
10219: LD_INT 33
10221: PUSH
10222: LD_INT 34
10224: PUSH
10225: LD_INT 35
10227: PUSH
10228: LD_INT 36
10230: PUSH
10231: EMPTY
10232: LIST
10233: LIST
10234: LIST
10235: LIST
10236: LIST
10237: LIST
10238: LIST
10239: LIST
10240: LIST
10241: LIST
10242: LIST
10243: LIST
10244: LIST
10245: LIST
10246: LIST
10247: LIST
10248: LIST
10249: LIST
10250: LIST
10251: LIST
10252: LIST
10253: LIST
10254: LIST
10255: LIST
10256: LIST
10257: LIST
10258: LIST
10259: LIST
10260: LIST
10261: LIST
10262: LIST
10263: LIST
10264: LIST
10265: LIST
10266: LIST
10267: LIST
10268: PUSH
10269: LD_INT 101
10271: PUSH
10272: LD_INT 102
10274: PUSH
10275: LD_INT 103
10277: PUSH
10278: LD_INT 104
10280: PUSH
10281: LD_INT 105
10283: PUSH
10284: LD_INT 106
10286: PUSH
10287: LD_INT 107
10289: PUSH
10290: LD_INT 108
10292: PUSH
10293: LD_INT 109
10295: PUSH
10296: LD_INT 110
10298: PUSH
10299: LD_INT 111
10301: PUSH
10302: LD_INT 112
10304: PUSH
10305: LD_INT 113
10307: PUSH
10308: LD_INT 114
10310: PUSH
10311: LD_INT 115
10313: PUSH
10314: EMPTY
10315: LIST
10316: LIST
10317: LIST
10318: LIST
10319: LIST
10320: LIST
10321: LIST
10322: LIST
10323: LIST
10324: LIST
10325: LIST
10326: LIST
10327: LIST
10328: LIST
10329: LIST
10330: PUSH
10331: EMPTY
10332: LIST
10333: LIST
10334: ST_TO_ADDR
10335: GO 10338
10337: POP
// end else
10338: GO 10557
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
10340: LD_ADDR_VAR 0 1
10344: PUSH
10345: LD_INT 1
10347: PUSH
10348: LD_INT 2
10350: PUSH
10351: LD_INT 3
10353: PUSH
10354: LD_INT 4
10356: PUSH
10357: LD_INT 5
10359: PUSH
10360: LD_INT 6
10362: PUSH
10363: LD_INT 7
10365: PUSH
10366: LD_INT 8
10368: PUSH
10369: LD_INT 9
10371: PUSH
10372: LD_INT 10
10374: PUSH
10375: LD_INT 11
10377: PUSH
10378: LD_INT 12
10380: PUSH
10381: LD_INT 13
10383: PUSH
10384: LD_INT 14
10386: PUSH
10387: LD_INT 15
10389: PUSH
10390: LD_INT 16
10392: PUSH
10393: LD_INT 17
10395: PUSH
10396: LD_INT 18
10398: PUSH
10399: LD_INT 19
10401: PUSH
10402: LD_INT 20
10404: PUSH
10405: LD_INT 21
10407: PUSH
10408: LD_INT 22
10410: PUSH
10411: LD_INT 23
10413: PUSH
10414: LD_INT 24
10416: PUSH
10417: LD_INT 25
10419: PUSH
10420: LD_INT 26
10422: PUSH
10423: LD_INT 27
10425: PUSH
10426: LD_INT 28
10428: PUSH
10429: LD_INT 29
10431: PUSH
10432: LD_INT 30
10434: PUSH
10435: LD_INT 31
10437: PUSH
10438: LD_INT 32
10440: PUSH
10441: LD_INT 33
10443: PUSH
10444: LD_INT 34
10446: PUSH
10447: LD_INT 35
10449: PUSH
10450: LD_INT 36
10452: PUSH
10453: EMPTY
10454: LIST
10455: LIST
10456: LIST
10457: LIST
10458: LIST
10459: LIST
10460: LIST
10461: LIST
10462: LIST
10463: LIST
10464: LIST
10465: LIST
10466: LIST
10467: LIST
10468: LIST
10469: LIST
10470: LIST
10471: LIST
10472: LIST
10473: LIST
10474: LIST
10475: LIST
10476: LIST
10477: LIST
10478: LIST
10479: LIST
10480: LIST
10481: LIST
10482: LIST
10483: LIST
10484: LIST
10485: LIST
10486: LIST
10487: LIST
10488: LIST
10489: LIST
10490: PUSH
10491: LD_INT 101
10493: PUSH
10494: LD_INT 102
10496: PUSH
10497: LD_INT 103
10499: PUSH
10500: LD_INT 104
10502: PUSH
10503: LD_INT 105
10505: PUSH
10506: LD_INT 106
10508: PUSH
10509: LD_INT 107
10511: PUSH
10512: LD_INT 108
10514: PUSH
10515: LD_INT 109
10517: PUSH
10518: LD_INT 110
10520: PUSH
10521: LD_INT 111
10523: PUSH
10524: LD_INT 112
10526: PUSH
10527: LD_INT 113
10529: PUSH
10530: LD_INT 114
10532: PUSH
10533: LD_INT 115
10535: PUSH
10536: EMPTY
10537: LIST
10538: LIST
10539: LIST
10540: LIST
10541: LIST
10542: LIST
10543: LIST
10544: LIST
10545: LIST
10546: LIST
10547: LIST
10548: LIST
10549: LIST
10550: LIST
10551: LIST
10552: PUSH
10553: EMPTY
10554: LIST
10555: LIST
10556: ST_TO_ADDR
// if result then
10557: LD_VAR 0 1
10561: IFFALSE 10850
// begin normal :=  ;
10563: LD_ADDR_VAR 0 3
10567: PUSH
10568: LD_STRING 
10570: ST_TO_ADDR
// hardcore :=  ;
10571: LD_ADDR_VAR 0 4
10575: PUSH
10576: LD_STRING 
10578: ST_TO_ADDR
// for i = 1 to normalCounter do
10579: LD_ADDR_VAR 0 5
10583: PUSH
10584: DOUBLE
10585: LD_INT 1
10587: DEC
10588: ST_TO_ADDR
10589: LD_EXP 25
10593: PUSH
10594: FOR_TO
10595: IFFALSE 10696
// begin tmp := 0 ;
10597: LD_ADDR_VAR 0 2
10601: PUSH
10602: LD_STRING 0
10604: ST_TO_ADDR
// if result [ 1 ] then
10605: LD_VAR 0 1
10609: PUSH
10610: LD_INT 1
10612: ARRAY
10613: IFFALSE 10678
// if result [ 1 ] [ 1 ] = i then
10615: LD_VAR 0 1
10619: PUSH
10620: LD_INT 1
10622: ARRAY
10623: PUSH
10624: LD_INT 1
10626: ARRAY
10627: PUSH
10628: LD_VAR 0 5
10632: EQUAL
10633: IFFALSE 10678
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
10635: LD_ADDR_VAR 0 1
10639: PUSH
10640: LD_VAR 0 1
10644: PPUSH
10645: LD_INT 1
10647: PPUSH
10648: LD_VAR 0 1
10652: PUSH
10653: LD_INT 1
10655: ARRAY
10656: PPUSH
10657: LD_INT 1
10659: PPUSH
10660: CALL_OW 3
10664: PPUSH
10665: CALL_OW 1
10669: ST_TO_ADDR
// tmp := 1 ;
10670: LD_ADDR_VAR 0 2
10674: PUSH
10675: LD_STRING 1
10677: ST_TO_ADDR
// end ; normal := normal & tmp ;
10678: LD_ADDR_VAR 0 3
10682: PUSH
10683: LD_VAR 0 3
10687: PUSH
10688: LD_VAR 0 2
10692: STR
10693: ST_TO_ADDR
// end ;
10694: GO 10594
10696: POP
10697: POP
// for i = 1 to hardcoreCounter do
10698: LD_ADDR_VAR 0 5
10702: PUSH
10703: DOUBLE
10704: LD_INT 1
10706: DEC
10707: ST_TO_ADDR
10708: LD_EXP 26
10712: PUSH
10713: FOR_TO
10714: IFFALSE 10819
// begin tmp := 0 ;
10716: LD_ADDR_VAR 0 2
10720: PUSH
10721: LD_STRING 0
10723: ST_TO_ADDR
// if result [ 2 ] then
10724: LD_VAR 0 1
10728: PUSH
10729: LD_INT 2
10731: ARRAY
10732: IFFALSE 10801
// if result [ 2 ] [ 1 ] = 100 + i then
10734: LD_VAR 0 1
10738: PUSH
10739: LD_INT 2
10741: ARRAY
10742: PUSH
10743: LD_INT 1
10745: ARRAY
10746: PUSH
10747: LD_INT 100
10749: PUSH
10750: LD_VAR 0 5
10754: PLUS
10755: EQUAL
10756: IFFALSE 10801
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
10758: LD_ADDR_VAR 0 1
10762: PUSH
10763: LD_VAR 0 1
10767: PPUSH
10768: LD_INT 2
10770: PPUSH
10771: LD_VAR 0 1
10775: PUSH
10776: LD_INT 2
10778: ARRAY
10779: PPUSH
10780: LD_INT 1
10782: PPUSH
10783: CALL_OW 3
10787: PPUSH
10788: CALL_OW 1
10792: ST_TO_ADDR
// tmp := 1 ;
10793: LD_ADDR_VAR 0 2
10797: PUSH
10798: LD_STRING 1
10800: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
10801: LD_ADDR_VAR 0 4
10805: PUSH
10806: LD_VAR 0 4
10810: PUSH
10811: LD_VAR 0 2
10815: STR
10816: ST_TO_ADDR
// end ;
10817: GO 10713
10819: POP
10820: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
10821: LD_STRING getStreamItemsFromMission("
10823: PUSH
10824: LD_VAR 0 3
10828: STR
10829: PUSH
10830: LD_STRING ","
10832: STR
10833: PUSH
10834: LD_VAR 0 4
10838: STR
10839: PUSH
10840: LD_STRING ")
10842: STR
10843: PPUSH
10844: CALL_OW 559
// end else
10848: GO 10857
// ToLua ( getStreamItemsFromMission("","") ) ;
10850: LD_STRING getStreamItemsFromMission("","")
10852: PPUSH
10853: CALL_OW 559
// end ;
10857: LD_VAR 0 1
10861: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
10862: LD_EXP 24
10866: PUSH
10867: LD_EXP 29
10871: AND
10872: IFFALSE 10996
10874: GO 10876
10876: DISABLE
10877: LD_INT 0
10879: PPUSH
10880: PPUSH
// begin enable ;
10881: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
10882: LD_ADDR_VAR 0 2
10886: PUSH
10887: LD_INT 22
10889: PUSH
10890: LD_OWVAR 2
10894: PUSH
10895: EMPTY
10896: LIST
10897: LIST
10898: PUSH
10899: LD_INT 2
10901: PUSH
10902: LD_INT 34
10904: PUSH
10905: LD_INT 7
10907: PUSH
10908: EMPTY
10909: LIST
10910: LIST
10911: PUSH
10912: LD_INT 34
10914: PUSH
10915: LD_INT 45
10917: PUSH
10918: EMPTY
10919: LIST
10920: LIST
10921: PUSH
10922: LD_INT 34
10924: PUSH
10925: LD_INT 28
10927: PUSH
10928: EMPTY
10929: LIST
10930: LIST
10931: PUSH
10932: LD_INT 34
10934: PUSH
10935: LD_INT 47
10937: PUSH
10938: EMPTY
10939: LIST
10940: LIST
10941: PUSH
10942: EMPTY
10943: LIST
10944: LIST
10945: LIST
10946: LIST
10947: LIST
10948: PUSH
10949: EMPTY
10950: LIST
10951: LIST
10952: PPUSH
10953: CALL_OW 69
10957: ST_TO_ADDR
// if not tmp then
10958: LD_VAR 0 2
10962: NOT
10963: IFFALSE 10967
// exit ;
10965: GO 10996
// for i in tmp do
10967: LD_ADDR_VAR 0 1
10971: PUSH
10972: LD_VAR 0 2
10976: PUSH
10977: FOR_IN
10978: IFFALSE 10994
// begin SetLives ( i , 0 ) ;
10980: LD_VAR 0 1
10984: PPUSH
10985: LD_INT 0
10987: PPUSH
10988: CALL_OW 234
// end ;
10992: GO 10977
10994: POP
10995: POP
// end ;
10996: PPOPN 2
10998: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
10999: LD_EXP 24
11003: PUSH
11004: LD_EXP 30
11008: AND
11009: IFFALSE 11093
11011: GO 11013
11013: DISABLE
11014: LD_INT 0
11016: PPUSH
11017: PPUSH
// begin enable ;
11018: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
11019: LD_ADDR_VAR 0 2
11023: PUSH
11024: LD_INT 22
11026: PUSH
11027: LD_OWVAR 2
11031: PUSH
11032: EMPTY
11033: LIST
11034: LIST
11035: PUSH
11036: LD_INT 32
11038: PUSH
11039: LD_INT 3
11041: PUSH
11042: EMPTY
11043: LIST
11044: LIST
11045: PUSH
11046: EMPTY
11047: LIST
11048: LIST
11049: PPUSH
11050: CALL_OW 69
11054: ST_TO_ADDR
// if not tmp then
11055: LD_VAR 0 2
11059: NOT
11060: IFFALSE 11064
// exit ;
11062: GO 11093
// for i in tmp do
11064: LD_ADDR_VAR 0 1
11068: PUSH
11069: LD_VAR 0 2
11073: PUSH
11074: FOR_IN
11075: IFFALSE 11091
// begin SetLives ( i , 0 ) ;
11077: LD_VAR 0 1
11081: PPUSH
11082: LD_INT 0
11084: PPUSH
11085: CALL_OW 234
// end ;
11089: GO 11074
11091: POP
11092: POP
// end ;
11093: PPOPN 2
11095: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
11096: LD_EXP 24
11100: PUSH
11101: LD_EXP 27
11105: AND
11106: IFFALSE 11199
11108: GO 11110
11110: DISABLE
11111: LD_INT 0
11113: PPUSH
// begin enable ;
11114: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
11115: LD_ADDR_VAR 0 1
11119: PUSH
11120: LD_INT 22
11122: PUSH
11123: LD_OWVAR 2
11127: PUSH
11128: EMPTY
11129: LIST
11130: LIST
11131: PUSH
11132: LD_INT 2
11134: PUSH
11135: LD_INT 25
11137: PUSH
11138: LD_INT 5
11140: PUSH
11141: EMPTY
11142: LIST
11143: LIST
11144: PUSH
11145: LD_INT 25
11147: PUSH
11148: LD_INT 9
11150: PUSH
11151: EMPTY
11152: LIST
11153: LIST
11154: PUSH
11155: LD_INT 25
11157: PUSH
11158: LD_INT 8
11160: PUSH
11161: EMPTY
11162: LIST
11163: LIST
11164: PUSH
11165: EMPTY
11166: LIST
11167: LIST
11168: LIST
11169: LIST
11170: PUSH
11171: EMPTY
11172: LIST
11173: LIST
11174: PPUSH
11175: CALL_OW 69
11179: PUSH
11180: FOR_IN
11181: IFFALSE 11197
// begin SetClass ( i , 1 ) ;
11183: LD_VAR 0 1
11187: PPUSH
11188: LD_INT 1
11190: PPUSH
11191: CALL_OW 336
// end ;
11195: GO 11180
11197: POP
11198: POP
// end ;
11199: PPOPN 1
11201: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
11202: LD_EXP 24
11206: PUSH
11207: LD_EXP 28
11211: AND
11212: PUSH
11213: LD_OWVAR 65
11217: PUSH
11218: LD_INT 7
11220: LESS
11221: AND
11222: IFFALSE 11236
11224: GO 11226
11226: DISABLE
// begin enable ;
11227: ENABLE
// game_speed := 7 ;
11228: LD_ADDR_OWVAR 65
11232: PUSH
11233: LD_INT 7
11235: ST_TO_ADDR
// end ;
11236: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
11237: LD_EXP 24
11241: PUSH
11242: LD_EXP 31
11246: AND
11247: IFFALSE 11449
11249: GO 11251
11251: DISABLE
11252: LD_INT 0
11254: PPUSH
11255: PPUSH
11256: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
11257: LD_ADDR_VAR 0 3
11261: PUSH
11262: LD_INT 81
11264: PUSH
11265: LD_OWVAR 2
11269: PUSH
11270: EMPTY
11271: LIST
11272: LIST
11273: PUSH
11274: LD_INT 21
11276: PUSH
11277: LD_INT 1
11279: PUSH
11280: EMPTY
11281: LIST
11282: LIST
11283: PUSH
11284: EMPTY
11285: LIST
11286: LIST
11287: PPUSH
11288: CALL_OW 69
11292: ST_TO_ADDR
// if not tmp then
11293: LD_VAR 0 3
11297: NOT
11298: IFFALSE 11302
// exit ;
11300: GO 11449
// if tmp > 5 then
11302: LD_VAR 0 3
11306: PUSH
11307: LD_INT 5
11309: GREATER
11310: IFFALSE 11322
// k := 5 else
11312: LD_ADDR_VAR 0 2
11316: PUSH
11317: LD_INT 5
11319: ST_TO_ADDR
11320: GO 11332
// k := tmp ;
11322: LD_ADDR_VAR 0 2
11326: PUSH
11327: LD_VAR 0 3
11331: ST_TO_ADDR
// for i := 1 to k do
11332: LD_ADDR_VAR 0 1
11336: PUSH
11337: DOUBLE
11338: LD_INT 1
11340: DEC
11341: ST_TO_ADDR
11342: LD_VAR 0 2
11346: PUSH
11347: FOR_TO
11348: IFFALSE 11447
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
11350: LD_VAR 0 3
11354: PUSH
11355: LD_VAR 0 1
11359: ARRAY
11360: PPUSH
11361: LD_VAR 0 1
11365: PUSH
11366: LD_INT 4
11368: MOD
11369: PUSH
11370: LD_INT 1
11372: PLUS
11373: PPUSH
11374: CALL_OW 259
11378: PUSH
11379: LD_INT 10
11381: LESS
11382: IFFALSE 11445
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
11384: LD_VAR 0 3
11388: PUSH
11389: LD_VAR 0 1
11393: ARRAY
11394: PPUSH
11395: LD_VAR 0 1
11399: PUSH
11400: LD_INT 4
11402: MOD
11403: PUSH
11404: LD_INT 1
11406: PLUS
11407: PPUSH
11408: LD_VAR 0 3
11412: PUSH
11413: LD_VAR 0 1
11417: ARRAY
11418: PPUSH
11419: LD_VAR 0 1
11423: PUSH
11424: LD_INT 4
11426: MOD
11427: PUSH
11428: LD_INT 1
11430: PLUS
11431: PPUSH
11432: CALL_OW 259
11436: PUSH
11437: LD_INT 1
11439: PLUS
11440: PPUSH
11441: CALL_OW 237
11445: GO 11347
11447: POP
11448: POP
// end ;
11449: PPOPN 3
11451: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
11452: LD_EXP 24
11456: PUSH
11457: LD_EXP 32
11461: AND
11462: IFFALSE 11482
11464: GO 11466
11466: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
11467: LD_INT 4
11469: PPUSH
11470: LD_OWVAR 2
11474: PPUSH
11475: LD_INT 0
11477: PPUSH
11478: CALL_OW 324
11482: END
// every 0 0$1 trigger StreamModeActive and sShovel do
11483: LD_EXP 24
11487: PUSH
11488: LD_EXP 61
11492: AND
11493: IFFALSE 11513
11495: GO 11497
11497: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
11498: LD_INT 19
11500: PPUSH
11501: LD_OWVAR 2
11505: PPUSH
11506: LD_INT 0
11508: PPUSH
11509: CALL_OW 324
11513: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
11514: LD_EXP 24
11518: PUSH
11519: LD_EXP 33
11523: AND
11524: IFFALSE 11626
11526: GO 11528
11528: DISABLE
11529: LD_INT 0
11531: PPUSH
11532: PPUSH
// begin enable ;
11533: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
11534: LD_ADDR_VAR 0 2
11538: PUSH
11539: LD_INT 22
11541: PUSH
11542: LD_OWVAR 2
11546: PUSH
11547: EMPTY
11548: LIST
11549: LIST
11550: PUSH
11551: LD_INT 2
11553: PUSH
11554: LD_INT 34
11556: PUSH
11557: LD_INT 11
11559: PUSH
11560: EMPTY
11561: LIST
11562: LIST
11563: PUSH
11564: LD_INT 34
11566: PUSH
11567: LD_INT 30
11569: PUSH
11570: EMPTY
11571: LIST
11572: LIST
11573: PUSH
11574: EMPTY
11575: LIST
11576: LIST
11577: LIST
11578: PUSH
11579: EMPTY
11580: LIST
11581: LIST
11582: PPUSH
11583: CALL_OW 69
11587: ST_TO_ADDR
// if not tmp then
11588: LD_VAR 0 2
11592: NOT
11593: IFFALSE 11597
// exit ;
11595: GO 11626
// for i in tmp do
11597: LD_ADDR_VAR 0 1
11601: PUSH
11602: LD_VAR 0 2
11606: PUSH
11607: FOR_IN
11608: IFFALSE 11624
// begin SetLives ( i , 0 ) ;
11610: LD_VAR 0 1
11614: PPUSH
11615: LD_INT 0
11617: PPUSH
11618: CALL_OW 234
// end ;
11622: GO 11607
11624: POP
11625: POP
// end ;
11626: PPOPN 2
11628: END
// every 0 0$1 trigger StreamModeActive and sBunker do
11629: LD_EXP 24
11633: PUSH
11634: LD_EXP 34
11638: AND
11639: IFFALSE 11659
11641: GO 11643
11643: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
11644: LD_INT 32
11646: PPUSH
11647: LD_OWVAR 2
11651: PPUSH
11652: LD_INT 0
11654: PPUSH
11655: CALL_OW 324
11659: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
11660: LD_EXP 24
11664: PUSH
11665: LD_EXP 35
11669: AND
11670: IFFALSE 11851
11672: GO 11674
11674: DISABLE
11675: LD_INT 0
11677: PPUSH
11678: PPUSH
11679: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
11680: LD_ADDR_VAR 0 2
11684: PUSH
11685: LD_INT 22
11687: PUSH
11688: LD_OWVAR 2
11692: PUSH
11693: EMPTY
11694: LIST
11695: LIST
11696: PUSH
11697: LD_INT 33
11699: PUSH
11700: LD_INT 3
11702: PUSH
11703: EMPTY
11704: LIST
11705: LIST
11706: PUSH
11707: EMPTY
11708: LIST
11709: LIST
11710: PPUSH
11711: CALL_OW 69
11715: ST_TO_ADDR
// if not tmp then
11716: LD_VAR 0 2
11720: NOT
11721: IFFALSE 11725
// exit ;
11723: GO 11851
// side := 0 ;
11725: LD_ADDR_VAR 0 3
11729: PUSH
11730: LD_INT 0
11732: ST_TO_ADDR
// for i := 1 to 8 do
11733: LD_ADDR_VAR 0 1
11737: PUSH
11738: DOUBLE
11739: LD_INT 1
11741: DEC
11742: ST_TO_ADDR
11743: LD_INT 8
11745: PUSH
11746: FOR_TO
11747: IFFALSE 11795
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
11749: LD_OWVAR 2
11753: PUSH
11754: LD_VAR 0 1
11758: NONEQUAL
11759: PUSH
11760: LD_OWVAR 2
11764: PPUSH
11765: LD_VAR 0 1
11769: PPUSH
11770: CALL_OW 81
11774: PUSH
11775: LD_INT 2
11777: EQUAL
11778: AND
11779: IFFALSE 11793
// begin side := i ;
11781: LD_ADDR_VAR 0 3
11785: PUSH
11786: LD_VAR 0 1
11790: ST_TO_ADDR
// break ;
11791: GO 11795
// end ;
11793: GO 11746
11795: POP
11796: POP
// if not side then
11797: LD_VAR 0 3
11801: NOT
11802: IFFALSE 11806
// exit ;
11804: GO 11851
// for i := 1 to tmp do
11806: LD_ADDR_VAR 0 1
11810: PUSH
11811: DOUBLE
11812: LD_INT 1
11814: DEC
11815: ST_TO_ADDR
11816: LD_VAR 0 2
11820: PUSH
11821: FOR_TO
11822: IFFALSE 11849
// if Prob ( 60 ) then
11824: LD_INT 60
11826: PPUSH
11827: CALL_OW 13
11831: IFFALSE 11847
// SetSide ( i , side ) ;
11833: LD_VAR 0 1
11837: PPUSH
11838: LD_VAR 0 3
11842: PPUSH
11843: CALL_OW 235
11847: GO 11821
11849: POP
11850: POP
// end ;
11851: PPOPN 3
11853: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
11854: LD_EXP 24
11858: PUSH
11859: LD_EXP 37
11863: AND
11864: IFFALSE 11983
11866: GO 11868
11868: DISABLE
11869: LD_INT 0
11871: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
11872: LD_ADDR_VAR 0 1
11876: PUSH
11877: LD_INT 22
11879: PUSH
11880: LD_OWVAR 2
11884: PUSH
11885: EMPTY
11886: LIST
11887: LIST
11888: PUSH
11889: LD_INT 21
11891: PUSH
11892: LD_INT 1
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: PUSH
11899: LD_INT 3
11901: PUSH
11902: LD_INT 23
11904: PUSH
11905: LD_INT 0
11907: PUSH
11908: EMPTY
11909: LIST
11910: LIST
11911: PUSH
11912: EMPTY
11913: LIST
11914: LIST
11915: PUSH
11916: EMPTY
11917: LIST
11918: LIST
11919: LIST
11920: PPUSH
11921: CALL_OW 69
11925: PUSH
11926: FOR_IN
11927: IFFALSE 11981
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
11929: LD_VAR 0 1
11933: PPUSH
11934: CALL_OW 257
11938: PUSH
11939: LD_INT 1
11941: PUSH
11942: LD_INT 2
11944: PUSH
11945: LD_INT 3
11947: PUSH
11948: LD_INT 4
11950: PUSH
11951: EMPTY
11952: LIST
11953: LIST
11954: LIST
11955: LIST
11956: IN
11957: IFFALSE 11979
// SetClass ( un , rand ( 1 , 4 ) ) ;
11959: LD_VAR 0 1
11963: PPUSH
11964: LD_INT 1
11966: PPUSH
11967: LD_INT 4
11969: PPUSH
11970: CALL_OW 12
11974: PPUSH
11975: CALL_OW 336
11979: GO 11926
11981: POP
11982: POP
// end ;
11983: PPOPN 1
11985: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
11986: LD_EXP 24
11990: PUSH
11991: LD_EXP 36
11995: AND
11996: IFFALSE 12075
11998: GO 12000
12000: DISABLE
12001: LD_INT 0
12003: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12004: LD_ADDR_VAR 0 1
12008: PUSH
12009: LD_INT 22
12011: PUSH
12012: LD_OWVAR 2
12016: PUSH
12017: EMPTY
12018: LIST
12019: LIST
12020: PUSH
12021: LD_INT 21
12023: PUSH
12024: LD_INT 3
12026: PUSH
12027: EMPTY
12028: LIST
12029: LIST
12030: PUSH
12031: EMPTY
12032: LIST
12033: LIST
12034: PPUSH
12035: CALL_OW 69
12039: ST_TO_ADDR
// if not tmp then
12040: LD_VAR 0 1
12044: NOT
12045: IFFALSE 12049
// exit ;
12047: GO 12075
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
12049: LD_VAR 0 1
12053: PUSH
12054: LD_INT 1
12056: PPUSH
12057: LD_VAR 0 1
12061: PPUSH
12062: CALL_OW 12
12066: ARRAY
12067: PPUSH
12068: LD_INT 100
12070: PPUSH
12071: CALL_OW 234
// end ;
12075: PPOPN 1
12077: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
12078: LD_EXP 24
12082: PUSH
12083: LD_EXP 38
12087: AND
12088: IFFALSE 12186
12090: GO 12092
12092: DISABLE
12093: LD_INT 0
12095: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12096: LD_ADDR_VAR 0 1
12100: PUSH
12101: LD_INT 22
12103: PUSH
12104: LD_OWVAR 2
12108: PUSH
12109: EMPTY
12110: LIST
12111: LIST
12112: PUSH
12113: LD_INT 21
12115: PUSH
12116: LD_INT 1
12118: PUSH
12119: EMPTY
12120: LIST
12121: LIST
12122: PUSH
12123: EMPTY
12124: LIST
12125: LIST
12126: PPUSH
12127: CALL_OW 69
12131: ST_TO_ADDR
// if not tmp then
12132: LD_VAR 0 1
12136: NOT
12137: IFFALSE 12141
// exit ;
12139: GO 12186
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
12141: LD_VAR 0 1
12145: PUSH
12146: LD_INT 1
12148: PPUSH
12149: LD_VAR 0 1
12153: PPUSH
12154: CALL_OW 12
12158: ARRAY
12159: PPUSH
12160: LD_INT 1
12162: PPUSH
12163: LD_INT 4
12165: PPUSH
12166: CALL_OW 12
12170: PPUSH
12171: LD_INT 3000
12173: PPUSH
12174: LD_INT 9000
12176: PPUSH
12177: CALL_OW 12
12181: PPUSH
12182: CALL_OW 492
// end ;
12186: PPOPN 1
12188: END
// every 0 0$1 trigger StreamModeActive and sDepot do
12189: LD_EXP 24
12193: PUSH
12194: LD_EXP 39
12198: AND
12199: IFFALSE 12219
12201: GO 12203
12203: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
12204: LD_INT 1
12206: PPUSH
12207: LD_OWVAR 2
12211: PPUSH
12212: LD_INT 0
12214: PPUSH
12215: CALL_OW 324
12219: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
12220: LD_EXP 24
12224: PUSH
12225: LD_EXP 40
12229: AND
12230: IFFALSE 12313
12232: GO 12234
12234: DISABLE
12235: LD_INT 0
12237: PPUSH
12238: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12239: LD_ADDR_VAR 0 2
12243: PUSH
12244: LD_INT 22
12246: PUSH
12247: LD_OWVAR 2
12251: PUSH
12252: EMPTY
12253: LIST
12254: LIST
12255: PUSH
12256: LD_INT 21
12258: PUSH
12259: LD_INT 3
12261: PUSH
12262: EMPTY
12263: LIST
12264: LIST
12265: PUSH
12266: EMPTY
12267: LIST
12268: LIST
12269: PPUSH
12270: CALL_OW 69
12274: ST_TO_ADDR
// if not tmp then
12275: LD_VAR 0 2
12279: NOT
12280: IFFALSE 12284
// exit ;
12282: GO 12313
// for i in tmp do
12284: LD_ADDR_VAR 0 1
12288: PUSH
12289: LD_VAR 0 2
12293: PUSH
12294: FOR_IN
12295: IFFALSE 12311
// SetBLevel ( i , 10 ) ;
12297: LD_VAR 0 1
12301: PPUSH
12302: LD_INT 10
12304: PPUSH
12305: CALL_OW 241
12309: GO 12294
12311: POP
12312: POP
// end ;
12313: PPOPN 2
12315: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
12316: LD_EXP 24
12320: PUSH
12321: LD_EXP 41
12325: AND
12326: IFFALSE 12437
12328: GO 12330
12330: DISABLE
12331: LD_INT 0
12333: PPUSH
12334: PPUSH
12335: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12336: LD_ADDR_VAR 0 3
12340: PUSH
12341: LD_INT 22
12343: PUSH
12344: LD_OWVAR 2
12348: PUSH
12349: EMPTY
12350: LIST
12351: LIST
12352: PUSH
12353: LD_INT 25
12355: PUSH
12356: LD_INT 1
12358: PUSH
12359: EMPTY
12360: LIST
12361: LIST
12362: PUSH
12363: EMPTY
12364: LIST
12365: LIST
12366: PPUSH
12367: CALL_OW 69
12371: ST_TO_ADDR
// if not tmp then
12372: LD_VAR 0 3
12376: NOT
12377: IFFALSE 12381
// exit ;
12379: GO 12437
// un := tmp [ rand ( 1 , tmp ) ] ;
12381: LD_ADDR_VAR 0 2
12385: PUSH
12386: LD_VAR 0 3
12390: PUSH
12391: LD_INT 1
12393: PPUSH
12394: LD_VAR 0 3
12398: PPUSH
12399: CALL_OW 12
12403: ARRAY
12404: ST_TO_ADDR
// if Crawls ( un ) then
12405: LD_VAR 0 2
12409: PPUSH
12410: CALL_OW 318
12414: IFFALSE 12425
// ComWalk ( un ) ;
12416: LD_VAR 0 2
12420: PPUSH
12421: CALL_OW 138
// SetClass ( un , class_sniper ) ;
12425: LD_VAR 0 2
12429: PPUSH
12430: LD_INT 5
12432: PPUSH
12433: CALL_OW 336
// end ;
12437: PPOPN 3
12439: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
12440: LD_EXP 24
12444: PUSH
12445: LD_EXP 42
12449: AND
12450: PUSH
12451: LD_OWVAR 67
12455: PUSH
12456: LD_INT 3
12458: LESS
12459: AND
12460: IFFALSE 12479
12462: GO 12464
12464: DISABLE
// Difficulty := Difficulty + 1 ;
12465: LD_ADDR_OWVAR 67
12469: PUSH
12470: LD_OWVAR 67
12474: PUSH
12475: LD_INT 1
12477: PLUS
12478: ST_TO_ADDR
12479: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
12480: LD_EXP 24
12484: PUSH
12485: LD_EXP 43
12489: AND
12490: IFFALSE 12593
12492: GO 12494
12494: DISABLE
12495: LD_INT 0
12497: PPUSH
// begin for i := 1 to 5 do
12498: LD_ADDR_VAR 0 1
12502: PUSH
12503: DOUBLE
12504: LD_INT 1
12506: DEC
12507: ST_TO_ADDR
12508: LD_INT 5
12510: PUSH
12511: FOR_TO
12512: IFFALSE 12591
// begin uc_nation := nation_nature ;
12514: LD_ADDR_OWVAR 21
12518: PUSH
12519: LD_INT 0
12521: ST_TO_ADDR
// uc_side := 0 ;
12522: LD_ADDR_OWVAR 20
12526: PUSH
12527: LD_INT 0
12529: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12530: LD_ADDR_OWVAR 29
12534: PUSH
12535: LD_INT 12
12537: PUSH
12538: LD_INT 12
12540: PUSH
12541: EMPTY
12542: LIST
12543: LIST
12544: ST_TO_ADDR
// hc_agressivity := 20 ;
12545: LD_ADDR_OWVAR 35
12549: PUSH
12550: LD_INT 20
12552: ST_TO_ADDR
// hc_class := class_tiger ;
12553: LD_ADDR_OWVAR 28
12557: PUSH
12558: LD_INT 14
12560: ST_TO_ADDR
// hc_gallery :=  ;
12561: LD_ADDR_OWVAR 33
12565: PUSH
12566: LD_STRING 
12568: ST_TO_ADDR
// hc_name :=  ;
12569: LD_ADDR_OWVAR 26
12573: PUSH
12574: LD_STRING 
12576: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
12577: CALL_OW 44
12581: PPUSH
12582: LD_INT 0
12584: PPUSH
12585: CALL_OW 51
// end ;
12589: GO 12511
12591: POP
12592: POP
// end ;
12593: PPOPN 1
12595: END
// every 0 0$1 trigger StreamModeActive and sBomb do
12596: LD_EXP 24
12600: PUSH
12601: LD_EXP 44
12605: AND
12606: IFFALSE 12615
12608: GO 12610
12610: DISABLE
// StreamSibBomb ;
12611: CALL 12616 0 0
12615: END
// export function StreamSibBomb ; var i , x , y ; begin
12616: LD_INT 0
12618: PPUSH
12619: PPUSH
12620: PPUSH
12621: PPUSH
// result := false ;
12622: LD_ADDR_VAR 0 1
12626: PUSH
12627: LD_INT 0
12629: ST_TO_ADDR
// for i := 1 to 16 do
12630: LD_ADDR_VAR 0 2
12634: PUSH
12635: DOUBLE
12636: LD_INT 1
12638: DEC
12639: ST_TO_ADDR
12640: LD_INT 16
12642: PUSH
12643: FOR_TO
12644: IFFALSE 12843
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12646: LD_ADDR_VAR 0 3
12650: PUSH
12651: LD_INT 10
12653: PUSH
12654: LD_INT 20
12656: PUSH
12657: LD_INT 30
12659: PUSH
12660: LD_INT 40
12662: PUSH
12663: LD_INT 50
12665: PUSH
12666: LD_INT 60
12668: PUSH
12669: LD_INT 70
12671: PUSH
12672: LD_INT 80
12674: PUSH
12675: LD_INT 90
12677: PUSH
12678: LD_INT 100
12680: PUSH
12681: LD_INT 110
12683: PUSH
12684: LD_INT 120
12686: PUSH
12687: LD_INT 130
12689: PUSH
12690: LD_INT 140
12692: PUSH
12693: LD_INT 150
12695: PUSH
12696: EMPTY
12697: LIST
12698: LIST
12699: LIST
12700: LIST
12701: LIST
12702: LIST
12703: LIST
12704: LIST
12705: LIST
12706: LIST
12707: LIST
12708: LIST
12709: LIST
12710: LIST
12711: LIST
12712: PUSH
12713: LD_INT 1
12715: PPUSH
12716: LD_INT 15
12718: PPUSH
12719: CALL_OW 12
12723: ARRAY
12724: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12725: LD_ADDR_VAR 0 4
12729: PUSH
12730: LD_INT 10
12732: PUSH
12733: LD_INT 20
12735: PUSH
12736: LD_INT 30
12738: PUSH
12739: LD_INT 40
12741: PUSH
12742: LD_INT 50
12744: PUSH
12745: LD_INT 60
12747: PUSH
12748: LD_INT 70
12750: PUSH
12751: LD_INT 80
12753: PUSH
12754: LD_INT 90
12756: PUSH
12757: LD_INT 100
12759: PUSH
12760: LD_INT 110
12762: PUSH
12763: LD_INT 120
12765: PUSH
12766: LD_INT 130
12768: PUSH
12769: LD_INT 140
12771: PUSH
12772: LD_INT 150
12774: PUSH
12775: EMPTY
12776: LIST
12777: LIST
12778: LIST
12779: LIST
12780: LIST
12781: LIST
12782: LIST
12783: LIST
12784: LIST
12785: LIST
12786: LIST
12787: LIST
12788: LIST
12789: LIST
12790: LIST
12791: PUSH
12792: LD_INT 1
12794: PPUSH
12795: LD_INT 15
12797: PPUSH
12798: CALL_OW 12
12802: ARRAY
12803: ST_TO_ADDR
// if ValidHex ( x , y ) then
12804: LD_VAR 0 3
12808: PPUSH
12809: LD_VAR 0 4
12813: PPUSH
12814: CALL_OW 488
12818: IFFALSE 12841
// begin result := [ x , y ] ;
12820: LD_ADDR_VAR 0 1
12824: PUSH
12825: LD_VAR 0 3
12829: PUSH
12830: LD_VAR 0 4
12834: PUSH
12835: EMPTY
12836: LIST
12837: LIST
12838: ST_TO_ADDR
// break ;
12839: GO 12843
// end ; end ;
12841: GO 12643
12843: POP
12844: POP
// if result then
12845: LD_VAR 0 1
12849: IFFALSE 12909
// begin ToLua ( playSibBomb() ) ;
12851: LD_STRING playSibBomb()
12853: PPUSH
12854: CALL_OW 559
// wait ( 0 0$14 ) ;
12858: LD_INT 490
12860: PPUSH
12861: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
12865: LD_VAR 0 1
12869: PUSH
12870: LD_INT 1
12872: ARRAY
12873: PPUSH
12874: LD_VAR 0 1
12878: PUSH
12879: LD_INT 2
12881: ARRAY
12882: PPUSH
12883: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
12887: LD_VAR 0 1
12891: PUSH
12892: LD_INT 1
12894: ARRAY
12895: PPUSH
12896: LD_VAR 0 1
12900: PUSH
12901: LD_INT 2
12903: ARRAY
12904: PPUSH
12905: CALL_OW 429
// end ; end ;
12909: LD_VAR 0 1
12913: RET
// every 0 0$1 trigger StreamModeActive and sReset do
12914: LD_EXP 24
12918: PUSH
12919: LD_EXP 46
12923: AND
12924: IFFALSE 12936
12926: GO 12928
12928: DISABLE
// YouLost (  ) ;
12929: LD_STRING 
12931: PPUSH
12932: CALL_OW 104
12936: END
// every 0 0$1 trigger StreamModeActive and sFog do
12937: LD_EXP 24
12941: PUSH
12942: LD_EXP 45
12946: AND
12947: IFFALSE 12961
12949: GO 12951
12951: DISABLE
// FogOff ( your_side ) ;
12952: LD_OWVAR 2
12956: PPUSH
12957: CALL_OW 344
12961: END
// every 0 0$1 trigger StreamModeActive and sSun do
12962: LD_EXP 24
12966: PUSH
12967: LD_EXP 47
12971: AND
12972: IFFALSE 13000
12974: GO 12976
12976: DISABLE
// begin solar_recharge_percent := 0 ;
12977: LD_ADDR_OWVAR 79
12981: PUSH
12982: LD_INT 0
12984: ST_TO_ADDR
// wait ( 5 5$00 ) ;
12985: LD_INT 10500
12987: PPUSH
12988: CALL_OW 67
// solar_recharge_percent := 100 ;
12992: LD_ADDR_OWVAR 79
12996: PUSH
12997: LD_INT 100
12999: ST_TO_ADDR
// end ;
13000: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
13001: LD_EXP 24
13005: PUSH
13006: LD_EXP 48
13010: AND
13011: IFFALSE 13250
13013: GO 13015
13015: DISABLE
13016: LD_INT 0
13018: PPUSH
13019: PPUSH
13020: PPUSH
// begin tmp := [ ] ;
13021: LD_ADDR_VAR 0 3
13025: PUSH
13026: EMPTY
13027: ST_TO_ADDR
// for i := 1 to 6 do
13028: LD_ADDR_VAR 0 1
13032: PUSH
13033: DOUBLE
13034: LD_INT 1
13036: DEC
13037: ST_TO_ADDR
13038: LD_INT 6
13040: PUSH
13041: FOR_TO
13042: IFFALSE 13147
// begin uc_nation := nation_nature ;
13044: LD_ADDR_OWVAR 21
13048: PUSH
13049: LD_INT 0
13051: ST_TO_ADDR
// uc_side := 0 ;
13052: LD_ADDR_OWVAR 20
13056: PUSH
13057: LD_INT 0
13059: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13060: LD_ADDR_OWVAR 29
13064: PUSH
13065: LD_INT 12
13067: PUSH
13068: LD_INT 12
13070: PUSH
13071: EMPTY
13072: LIST
13073: LIST
13074: ST_TO_ADDR
// hc_agressivity := 20 ;
13075: LD_ADDR_OWVAR 35
13079: PUSH
13080: LD_INT 20
13082: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
13083: LD_ADDR_OWVAR 28
13087: PUSH
13088: LD_INT 17
13090: ST_TO_ADDR
// hc_gallery :=  ;
13091: LD_ADDR_OWVAR 33
13095: PUSH
13096: LD_STRING 
13098: ST_TO_ADDR
// hc_name :=  ;
13099: LD_ADDR_OWVAR 26
13103: PUSH
13104: LD_STRING 
13106: ST_TO_ADDR
// un := CreateHuman ;
13107: LD_ADDR_VAR 0 2
13111: PUSH
13112: CALL_OW 44
13116: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
13117: LD_VAR 0 2
13121: PPUSH
13122: LD_INT 1
13124: PPUSH
13125: CALL_OW 51
// tmp := tmp ^ un ;
13129: LD_ADDR_VAR 0 3
13133: PUSH
13134: LD_VAR 0 3
13138: PUSH
13139: LD_VAR 0 2
13143: ADD
13144: ST_TO_ADDR
// end ;
13145: GO 13041
13147: POP
13148: POP
// repeat wait ( 0 0$1 ) ;
13149: LD_INT 35
13151: PPUSH
13152: CALL_OW 67
// for un in tmp do
13156: LD_ADDR_VAR 0 2
13160: PUSH
13161: LD_VAR 0 3
13165: PUSH
13166: FOR_IN
13167: IFFALSE 13241
// begin if IsDead ( un ) then
13169: LD_VAR 0 2
13173: PPUSH
13174: CALL_OW 301
13178: IFFALSE 13198
// begin tmp := tmp diff un ;
13180: LD_ADDR_VAR 0 3
13184: PUSH
13185: LD_VAR 0 3
13189: PUSH
13190: LD_VAR 0 2
13194: DIFF
13195: ST_TO_ADDR
// continue ;
13196: GO 13166
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
13198: LD_VAR 0 2
13202: PPUSH
13203: LD_INT 3
13205: PUSH
13206: LD_INT 22
13208: PUSH
13209: LD_INT 0
13211: PUSH
13212: EMPTY
13213: LIST
13214: LIST
13215: PUSH
13216: EMPTY
13217: LIST
13218: LIST
13219: PPUSH
13220: CALL_OW 69
13224: PPUSH
13225: LD_VAR 0 2
13229: PPUSH
13230: CALL_OW 74
13234: PPUSH
13235: CALL_OW 115
// end ;
13239: GO 13166
13241: POP
13242: POP
// until not tmp ;
13243: LD_VAR 0 3
13247: NOT
13248: IFFALSE 13149
// end ;
13250: PPOPN 3
13252: END
// every 0 0$1 trigger StreamModeActive and sTroll do
13253: LD_EXP 24
13257: PUSH
13258: LD_EXP 49
13262: AND
13263: IFFALSE 13317
13265: GO 13267
13267: DISABLE
// begin ToLua ( displayTroll(); ) ;
13268: LD_STRING displayTroll();
13270: PPUSH
13271: CALL_OW 559
// wait ( 3 3$00 ) ;
13275: LD_INT 6300
13277: PPUSH
13278: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13282: LD_STRING hideTroll();
13284: PPUSH
13285: CALL_OW 559
// wait ( 1 1$00 ) ;
13289: LD_INT 2100
13291: PPUSH
13292: CALL_OW 67
// ToLua ( displayTroll(); ) ;
13296: LD_STRING displayTroll();
13298: PPUSH
13299: CALL_OW 559
// wait ( 1 1$00 ) ;
13303: LD_INT 2100
13305: PPUSH
13306: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13310: LD_STRING hideTroll();
13312: PPUSH
13313: CALL_OW 559
// end ;
13317: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
13318: LD_EXP 24
13322: PUSH
13323: LD_EXP 50
13327: AND
13328: IFFALSE 13391
13330: GO 13332
13332: DISABLE
13333: LD_INT 0
13335: PPUSH
// begin p := 0 ;
13336: LD_ADDR_VAR 0 1
13340: PUSH
13341: LD_INT 0
13343: ST_TO_ADDR
// repeat game_speed := 1 ;
13344: LD_ADDR_OWVAR 65
13348: PUSH
13349: LD_INT 1
13351: ST_TO_ADDR
// wait ( 0 0$1 ) ;
13352: LD_INT 35
13354: PPUSH
13355: CALL_OW 67
// p := p + 1 ;
13359: LD_ADDR_VAR 0 1
13363: PUSH
13364: LD_VAR 0 1
13368: PUSH
13369: LD_INT 1
13371: PLUS
13372: ST_TO_ADDR
// until p >= 60 ;
13373: LD_VAR 0 1
13377: PUSH
13378: LD_INT 60
13380: GREATEREQUAL
13381: IFFALSE 13344
// game_speed := 4 ;
13383: LD_ADDR_OWVAR 65
13387: PUSH
13388: LD_INT 4
13390: ST_TO_ADDR
// end ;
13391: PPOPN 1
13393: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
13394: LD_EXP 24
13398: PUSH
13399: LD_EXP 51
13403: AND
13404: IFFALSE 13550
13406: GO 13408
13408: DISABLE
13409: LD_INT 0
13411: PPUSH
13412: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13413: LD_ADDR_VAR 0 1
13417: PUSH
13418: LD_INT 22
13420: PUSH
13421: LD_OWVAR 2
13425: PUSH
13426: EMPTY
13427: LIST
13428: LIST
13429: PUSH
13430: LD_INT 2
13432: PUSH
13433: LD_INT 30
13435: PUSH
13436: LD_INT 0
13438: PUSH
13439: EMPTY
13440: LIST
13441: LIST
13442: PUSH
13443: LD_INT 30
13445: PUSH
13446: LD_INT 1
13448: PUSH
13449: EMPTY
13450: LIST
13451: LIST
13452: PUSH
13453: EMPTY
13454: LIST
13455: LIST
13456: LIST
13457: PUSH
13458: EMPTY
13459: LIST
13460: LIST
13461: PPUSH
13462: CALL_OW 69
13466: ST_TO_ADDR
// if not depot then
13467: LD_VAR 0 1
13471: NOT
13472: IFFALSE 13476
// exit ;
13474: GO 13550
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
13476: LD_ADDR_VAR 0 2
13480: PUSH
13481: LD_VAR 0 1
13485: PUSH
13486: LD_INT 1
13488: PPUSH
13489: LD_VAR 0 1
13493: PPUSH
13494: CALL_OW 12
13498: ARRAY
13499: PPUSH
13500: CALL_OW 274
13504: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
13505: LD_VAR 0 2
13509: PPUSH
13510: LD_INT 1
13512: PPUSH
13513: LD_INT 0
13515: PPUSH
13516: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
13520: LD_VAR 0 2
13524: PPUSH
13525: LD_INT 2
13527: PPUSH
13528: LD_INT 0
13530: PPUSH
13531: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
13535: LD_VAR 0 2
13539: PPUSH
13540: LD_INT 3
13542: PPUSH
13543: LD_INT 0
13545: PPUSH
13546: CALL_OW 277
// end ;
13550: PPOPN 2
13552: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
13553: LD_EXP 24
13557: PUSH
13558: LD_EXP 52
13562: AND
13563: IFFALSE 13660
13565: GO 13567
13567: DISABLE
13568: LD_INT 0
13570: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13571: LD_ADDR_VAR 0 1
13575: PUSH
13576: LD_INT 22
13578: PUSH
13579: LD_OWVAR 2
13583: PUSH
13584: EMPTY
13585: LIST
13586: LIST
13587: PUSH
13588: LD_INT 21
13590: PUSH
13591: LD_INT 1
13593: PUSH
13594: EMPTY
13595: LIST
13596: LIST
13597: PUSH
13598: LD_INT 3
13600: PUSH
13601: LD_INT 23
13603: PUSH
13604: LD_INT 0
13606: PUSH
13607: EMPTY
13608: LIST
13609: LIST
13610: PUSH
13611: EMPTY
13612: LIST
13613: LIST
13614: PUSH
13615: EMPTY
13616: LIST
13617: LIST
13618: LIST
13619: PPUSH
13620: CALL_OW 69
13624: ST_TO_ADDR
// if not tmp then
13625: LD_VAR 0 1
13629: NOT
13630: IFFALSE 13634
// exit ;
13632: GO 13660
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
13634: LD_VAR 0 1
13638: PUSH
13639: LD_INT 1
13641: PPUSH
13642: LD_VAR 0 1
13646: PPUSH
13647: CALL_OW 12
13651: ARRAY
13652: PPUSH
13653: LD_INT 200
13655: PPUSH
13656: CALL_OW 234
// end ;
13660: PPOPN 1
13662: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
13663: LD_EXP 24
13667: PUSH
13668: LD_EXP 53
13672: AND
13673: IFFALSE 13752
13675: GO 13677
13677: DISABLE
13678: LD_INT 0
13680: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
13681: LD_ADDR_VAR 0 1
13685: PUSH
13686: LD_INT 22
13688: PUSH
13689: LD_OWVAR 2
13693: PUSH
13694: EMPTY
13695: LIST
13696: LIST
13697: PUSH
13698: LD_INT 21
13700: PUSH
13701: LD_INT 2
13703: PUSH
13704: EMPTY
13705: LIST
13706: LIST
13707: PUSH
13708: EMPTY
13709: LIST
13710: LIST
13711: PPUSH
13712: CALL_OW 69
13716: ST_TO_ADDR
// if not tmp then
13717: LD_VAR 0 1
13721: NOT
13722: IFFALSE 13726
// exit ;
13724: GO 13752
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
13726: LD_VAR 0 1
13730: PUSH
13731: LD_INT 1
13733: PPUSH
13734: LD_VAR 0 1
13738: PPUSH
13739: CALL_OW 12
13743: ARRAY
13744: PPUSH
13745: LD_INT 60
13747: PPUSH
13748: CALL_OW 234
// end ;
13752: PPOPN 1
13754: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
13755: LD_EXP 24
13759: PUSH
13760: LD_EXP 54
13764: AND
13765: IFFALSE 13864
13767: GO 13769
13769: DISABLE
13770: LD_INT 0
13772: PPUSH
13773: PPUSH
// begin enable ;
13774: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
13775: LD_ADDR_VAR 0 1
13779: PUSH
13780: LD_INT 22
13782: PUSH
13783: LD_OWVAR 2
13787: PUSH
13788: EMPTY
13789: LIST
13790: LIST
13791: PUSH
13792: LD_INT 61
13794: PUSH
13795: EMPTY
13796: LIST
13797: PUSH
13798: LD_INT 33
13800: PUSH
13801: LD_INT 2
13803: PUSH
13804: EMPTY
13805: LIST
13806: LIST
13807: PUSH
13808: EMPTY
13809: LIST
13810: LIST
13811: LIST
13812: PPUSH
13813: CALL_OW 69
13817: ST_TO_ADDR
// if not tmp then
13818: LD_VAR 0 1
13822: NOT
13823: IFFALSE 13827
// exit ;
13825: GO 13864
// for i in tmp do
13827: LD_ADDR_VAR 0 2
13831: PUSH
13832: LD_VAR 0 1
13836: PUSH
13837: FOR_IN
13838: IFFALSE 13862
// if IsControledBy ( i ) then
13840: LD_VAR 0 2
13844: PPUSH
13845: CALL_OW 312
13849: IFFALSE 13860
// ComUnlink ( i ) ;
13851: LD_VAR 0 2
13855: PPUSH
13856: CALL_OW 136
13860: GO 13837
13862: POP
13863: POP
// end ;
13864: PPOPN 2
13866: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
13867: LD_EXP 24
13871: PUSH
13872: LD_EXP 55
13876: AND
13877: IFFALSE 14017
13879: GO 13881
13881: DISABLE
13882: LD_INT 0
13884: PPUSH
13885: PPUSH
// begin ToLua ( displayPowell(); ) ;
13886: LD_STRING displayPowell();
13888: PPUSH
13889: CALL_OW 559
// uc_side := 0 ;
13893: LD_ADDR_OWVAR 20
13897: PUSH
13898: LD_INT 0
13900: ST_TO_ADDR
// uc_nation := 2 ;
13901: LD_ADDR_OWVAR 21
13905: PUSH
13906: LD_INT 2
13908: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
13909: LD_ADDR_OWVAR 37
13913: PUSH
13914: LD_INT 14
13916: ST_TO_ADDR
// vc_engine := engine_siberite ;
13917: LD_ADDR_OWVAR 39
13921: PUSH
13922: LD_INT 3
13924: ST_TO_ADDR
// vc_control := control_apeman ;
13925: LD_ADDR_OWVAR 38
13929: PUSH
13930: LD_INT 5
13932: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
13933: LD_ADDR_OWVAR 40
13937: PUSH
13938: LD_INT 29
13940: ST_TO_ADDR
// un := CreateVehicle ;
13941: LD_ADDR_VAR 0 2
13945: PUSH
13946: CALL_OW 45
13950: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13951: LD_VAR 0 2
13955: PPUSH
13956: LD_INT 1
13958: PPUSH
13959: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13963: LD_INT 35
13965: PPUSH
13966: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13970: LD_VAR 0 2
13974: PPUSH
13975: LD_INT 22
13977: PUSH
13978: LD_OWVAR 2
13982: PUSH
13983: EMPTY
13984: LIST
13985: LIST
13986: PPUSH
13987: CALL_OW 69
13991: PPUSH
13992: LD_VAR 0 2
13996: PPUSH
13997: CALL_OW 74
14001: PPUSH
14002: CALL_OW 115
// until IsDead ( un ) ;
14006: LD_VAR 0 2
14010: PPUSH
14011: CALL_OW 301
14015: IFFALSE 13963
// end ;
14017: PPOPN 2
14019: END
// every 0 0$1 trigger StreamModeActive and sStu do
14020: LD_EXP 24
14024: PUSH
14025: LD_EXP 63
14029: AND
14030: IFFALSE 14046
14032: GO 14034
14034: DISABLE
// begin ToLua ( displayStucuk(); ) ;
14035: LD_STRING displayStucuk();
14037: PPUSH
14038: CALL_OW 559
// ResetFog ;
14042: CALL_OW 335
// end ;
14046: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
14047: LD_EXP 24
14051: PUSH
14052: LD_EXP 56
14056: AND
14057: IFFALSE 14198
14059: GO 14061
14061: DISABLE
14062: LD_INT 0
14064: PPUSH
14065: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14066: LD_ADDR_VAR 0 2
14070: PUSH
14071: LD_INT 22
14073: PUSH
14074: LD_OWVAR 2
14078: PUSH
14079: EMPTY
14080: LIST
14081: LIST
14082: PUSH
14083: LD_INT 21
14085: PUSH
14086: LD_INT 1
14088: PUSH
14089: EMPTY
14090: LIST
14091: LIST
14092: PUSH
14093: EMPTY
14094: LIST
14095: LIST
14096: PPUSH
14097: CALL_OW 69
14101: ST_TO_ADDR
// if not tmp then
14102: LD_VAR 0 2
14106: NOT
14107: IFFALSE 14111
// exit ;
14109: GO 14198
// un := tmp [ rand ( 1 , tmp ) ] ;
14111: LD_ADDR_VAR 0 1
14115: PUSH
14116: LD_VAR 0 2
14120: PUSH
14121: LD_INT 1
14123: PPUSH
14124: LD_VAR 0 2
14128: PPUSH
14129: CALL_OW 12
14133: ARRAY
14134: ST_TO_ADDR
// SetSide ( un , 0 ) ;
14135: LD_VAR 0 1
14139: PPUSH
14140: LD_INT 0
14142: PPUSH
14143: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
14147: LD_VAR 0 1
14151: PPUSH
14152: LD_OWVAR 3
14156: PUSH
14157: LD_VAR 0 1
14161: DIFF
14162: PPUSH
14163: LD_VAR 0 1
14167: PPUSH
14168: CALL_OW 74
14172: PPUSH
14173: CALL_OW 115
// wait ( 0 0$20 ) ;
14177: LD_INT 700
14179: PPUSH
14180: CALL_OW 67
// SetSide ( un , your_side ) ;
14184: LD_VAR 0 1
14188: PPUSH
14189: LD_OWVAR 2
14193: PPUSH
14194: CALL_OW 235
// end ;
14198: PPOPN 2
14200: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
14201: LD_EXP 24
14205: PUSH
14206: LD_EXP 57
14210: AND
14211: IFFALSE 14317
14213: GO 14215
14215: DISABLE
14216: LD_INT 0
14218: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14219: LD_ADDR_VAR 0 1
14223: PUSH
14224: LD_INT 22
14226: PUSH
14227: LD_OWVAR 2
14231: PUSH
14232: EMPTY
14233: LIST
14234: LIST
14235: PUSH
14236: LD_INT 2
14238: PUSH
14239: LD_INT 30
14241: PUSH
14242: LD_INT 0
14244: PUSH
14245: EMPTY
14246: LIST
14247: LIST
14248: PUSH
14249: LD_INT 30
14251: PUSH
14252: LD_INT 1
14254: PUSH
14255: EMPTY
14256: LIST
14257: LIST
14258: PUSH
14259: EMPTY
14260: LIST
14261: LIST
14262: LIST
14263: PUSH
14264: EMPTY
14265: LIST
14266: LIST
14267: PPUSH
14268: CALL_OW 69
14272: ST_TO_ADDR
// if not depot then
14273: LD_VAR 0 1
14277: NOT
14278: IFFALSE 14282
// exit ;
14280: GO 14317
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
14282: LD_VAR 0 1
14286: PUSH
14287: LD_INT 1
14289: ARRAY
14290: PPUSH
14291: CALL_OW 250
14295: PPUSH
14296: LD_VAR 0 1
14300: PUSH
14301: LD_INT 1
14303: ARRAY
14304: PPUSH
14305: CALL_OW 251
14309: PPUSH
14310: LD_INT 70
14312: PPUSH
14313: CALL_OW 495
// end ;
14317: PPOPN 1
14319: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
14320: LD_EXP 24
14324: PUSH
14325: LD_EXP 58
14329: AND
14330: IFFALSE 14541
14332: GO 14334
14334: DISABLE
14335: LD_INT 0
14337: PPUSH
14338: PPUSH
14339: PPUSH
14340: PPUSH
14341: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14342: LD_ADDR_VAR 0 5
14346: PUSH
14347: LD_INT 22
14349: PUSH
14350: LD_OWVAR 2
14354: PUSH
14355: EMPTY
14356: LIST
14357: LIST
14358: PUSH
14359: LD_INT 21
14361: PUSH
14362: LD_INT 1
14364: PUSH
14365: EMPTY
14366: LIST
14367: LIST
14368: PUSH
14369: EMPTY
14370: LIST
14371: LIST
14372: PPUSH
14373: CALL_OW 69
14377: ST_TO_ADDR
// if not tmp then
14378: LD_VAR 0 5
14382: NOT
14383: IFFALSE 14387
// exit ;
14385: GO 14541
// for i in tmp do
14387: LD_ADDR_VAR 0 1
14391: PUSH
14392: LD_VAR 0 5
14396: PUSH
14397: FOR_IN
14398: IFFALSE 14539
// begin d := rand ( 0 , 5 ) ;
14400: LD_ADDR_VAR 0 4
14404: PUSH
14405: LD_INT 0
14407: PPUSH
14408: LD_INT 5
14410: PPUSH
14411: CALL_OW 12
14415: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
14416: LD_ADDR_VAR 0 2
14420: PUSH
14421: LD_VAR 0 1
14425: PPUSH
14426: CALL_OW 250
14430: PPUSH
14431: LD_VAR 0 4
14435: PPUSH
14436: LD_INT 3
14438: PPUSH
14439: LD_INT 12
14441: PPUSH
14442: CALL_OW 12
14446: PPUSH
14447: CALL_OW 272
14451: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
14452: LD_ADDR_VAR 0 3
14456: PUSH
14457: LD_VAR 0 1
14461: PPUSH
14462: CALL_OW 251
14466: PPUSH
14467: LD_VAR 0 4
14471: PPUSH
14472: LD_INT 3
14474: PPUSH
14475: LD_INT 12
14477: PPUSH
14478: CALL_OW 12
14482: PPUSH
14483: CALL_OW 273
14487: ST_TO_ADDR
// if ValidHex ( x , y ) then
14488: LD_VAR 0 2
14492: PPUSH
14493: LD_VAR 0 3
14497: PPUSH
14498: CALL_OW 488
14502: IFFALSE 14537
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
14504: LD_VAR 0 1
14508: PPUSH
14509: LD_VAR 0 2
14513: PPUSH
14514: LD_VAR 0 3
14518: PPUSH
14519: LD_INT 3
14521: PPUSH
14522: LD_INT 6
14524: PPUSH
14525: CALL_OW 12
14529: PPUSH
14530: LD_INT 1
14532: PPUSH
14533: CALL_OW 483
// end ;
14537: GO 14397
14539: POP
14540: POP
// end ;
14541: PPOPN 5
14543: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
14544: LD_EXP 24
14548: PUSH
14549: LD_EXP 59
14553: AND
14554: IFFALSE 14648
14556: GO 14558
14558: DISABLE
14559: LD_INT 0
14561: PPUSH
14562: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
14563: LD_ADDR_VAR 0 2
14567: PUSH
14568: LD_INT 22
14570: PUSH
14571: LD_OWVAR 2
14575: PUSH
14576: EMPTY
14577: LIST
14578: LIST
14579: PUSH
14580: LD_INT 32
14582: PUSH
14583: LD_INT 1
14585: PUSH
14586: EMPTY
14587: LIST
14588: LIST
14589: PUSH
14590: LD_INT 21
14592: PUSH
14593: LD_INT 2
14595: PUSH
14596: EMPTY
14597: LIST
14598: LIST
14599: PUSH
14600: EMPTY
14601: LIST
14602: LIST
14603: LIST
14604: PPUSH
14605: CALL_OW 69
14609: ST_TO_ADDR
// if not tmp then
14610: LD_VAR 0 2
14614: NOT
14615: IFFALSE 14619
// exit ;
14617: GO 14648
// for i in tmp do
14619: LD_ADDR_VAR 0 1
14623: PUSH
14624: LD_VAR 0 2
14628: PUSH
14629: FOR_IN
14630: IFFALSE 14646
// SetFuel ( i , 0 ) ;
14632: LD_VAR 0 1
14636: PPUSH
14637: LD_INT 0
14639: PPUSH
14640: CALL_OW 240
14644: GO 14629
14646: POP
14647: POP
// end ;
14648: PPOPN 2
14650: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
14651: LD_EXP 24
14655: PUSH
14656: LD_EXP 60
14660: AND
14661: IFFALSE 14727
14663: GO 14665
14665: DISABLE
14666: LD_INT 0
14668: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14669: LD_ADDR_VAR 0 1
14673: PUSH
14674: LD_INT 22
14676: PUSH
14677: LD_OWVAR 2
14681: PUSH
14682: EMPTY
14683: LIST
14684: LIST
14685: PUSH
14686: LD_INT 30
14688: PUSH
14689: LD_INT 29
14691: PUSH
14692: EMPTY
14693: LIST
14694: LIST
14695: PUSH
14696: EMPTY
14697: LIST
14698: LIST
14699: PPUSH
14700: CALL_OW 69
14704: ST_TO_ADDR
// if not tmp then
14705: LD_VAR 0 1
14709: NOT
14710: IFFALSE 14714
// exit ;
14712: GO 14727
// DestroyUnit ( tmp [ 1 ] ) ;
14714: LD_VAR 0 1
14718: PUSH
14719: LD_INT 1
14721: ARRAY
14722: PPUSH
14723: CALL_OW 65
// end ;
14727: PPOPN 1
14729: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
14730: LD_EXP 24
14734: PUSH
14735: LD_EXP 62
14739: AND
14740: IFFALSE 14869
14742: GO 14744
14744: DISABLE
14745: LD_INT 0
14747: PPUSH
// begin uc_side := 0 ;
14748: LD_ADDR_OWVAR 20
14752: PUSH
14753: LD_INT 0
14755: ST_TO_ADDR
// uc_nation := nation_arabian ;
14756: LD_ADDR_OWVAR 21
14760: PUSH
14761: LD_INT 2
14763: ST_TO_ADDR
// hc_gallery :=  ;
14764: LD_ADDR_OWVAR 33
14768: PUSH
14769: LD_STRING 
14771: ST_TO_ADDR
// hc_name :=  ;
14772: LD_ADDR_OWVAR 26
14776: PUSH
14777: LD_STRING 
14779: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
14780: LD_INT 1
14782: PPUSH
14783: LD_INT 11
14785: PPUSH
14786: LD_INT 10
14788: PPUSH
14789: CALL_OW 380
// un := CreateHuman ;
14793: LD_ADDR_VAR 0 1
14797: PUSH
14798: CALL_OW 44
14802: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14803: LD_VAR 0 1
14807: PPUSH
14808: LD_INT 1
14810: PPUSH
14811: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14815: LD_INT 35
14817: PPUSH
14818: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14822: LD_VAR 0 1
14826: PPUSH
14827: LD_INT 22
14829: PUSH
14830: LD_OWVAR 2
14834: PUSH
14835: EMPTY
14836: LIST
14837: LIST
14838: PPUSH
14839: CALL_OW 69
14843: PPUSH
14844: LD_VAR 0 1
14848: PPUSH
14849: CALL_OW 74
14853: PPUSH
14854: CALL_OW 115
// until IsDead ( un ) ;
14858: LD_VAR 0 1
14862: PPUSH
14863: CALL_OW 301
14867: IFFALSE 14815
// end ;
14869: PPOPN 1
14871: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
14872: LD_EXP 24
14876: PUSH
14877: LD_EXP 64
14881: AND
14882: IFFALSE 14894
14884: GO 14886
14886: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
14887: LD_STRING earthquake(getX(game), 0, 32)
14889: PPUSH
14890: CALL_OW 559
14894: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
14895: LD_EXP 24
14899: PUSH
14900: LD_EXP 65
14904: AND
14905: IFFALSE 14996
14907: GO 14909
14909: DISABLE
14910: LD_INT 0
14912: PPUSH
// begin enable ;
14913: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
14914: LD_ADDR_VAR 0 1
14918: PUSH
14919: LD_INT 22
14921: PUSH
14922: LD_OWVAR 2
14926: PUSH
14927: EMPTY
14928: LIST
14929: LIST
14930: PUSH
14931: LD_INT 21
14933: PUSH
14934: LD_INT 2
14936: PUSH
14937: EMPTY
14938: LIST
14939: LIST
14940: PUSH
14941: LD_INT 33
14943: PUSH
14944: LD_INT 3
14946: PUSH
14947: EMPTY
14948: LIST
14949: LIST
14950: PUSH
14951: EMPTY
14952: LIST
14953: LIST
14954: LIST
14955: PPUSH
14956: CALL_OW 69
14960: ST_TO_ADDR
// if not tmp then
14961: LD_VAR 0 1
14965: NOT
14966: IFFALSE 14970
// exit ;
14968: GO 14996
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14970: LD_VAR 0 1
14974: PUSH
14975: LD_INT 1
14977: PPUSH
14978: LD_VAR 0 1
14982: PPUSH
14983: CALL_OW 12
14987: ARRAY
14988: PPUSH
14989: LD_INT 1
14991: PPUSH
14992: CALL_OW 234
// end ;
14996: PPOPN 1
14998: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
14999: LD_EXP 24
15003: PUSH
15004: LD_EXP 66
15008: AND
15009: IFFALSE 15150
15011: GO 15013
15013: DISABLE
15014: LD_INT 0
15016: PPUSH
15017: PPUSH
15018: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15019: LD_ADDR_VAR 0 3
15023: PUSH
15024: LD_INT 22
15026: PUSH
15027: LD_OWVAR 2
15031: PUSH
15032: EMPTY
15033: LIST
15034: LIST
15035: PUSH
15036: LD_INT 25
15038: PUSH
15039: LD_INT 1
15041: PUSH
15042: EMPTY
15043: LIST
15044: LIST
15045: PUSH
15046: EMPTY
15047: LIST
15048: LIST
15049: PPUSH
15050: CALL_OW 69
15054: ST_TO_ADDR
// if not tmp then
15055: LD_VAR 0 3
15059: NOT
15060: IFFALSE 15064
// exit ;
15062: GO 15150
// un := tmp [ rand ( 1 , tmp ) ] ;
15064: LD_ADDR_VAR 0 2
15068: PUSH
15069: LD_VAR 0 3
15073: PUSH
15074: LD_INT 1
15076: PPUSH
15077: LD_VAR 0 3
15081: PPUSH
15082: CALL_OW 12
15086: ARRAY
15087: ST_TO_ADDR
// if Crawls ( un ) then
15088: LD_VAR 0 2
15092: PPUSH
15093: CALL_OW 318
15097: IFFALSE 15108
// ComWalk ( un ) ;
15099: LD_VAR 0 2
15103: PPUSH
15104: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
15108: LD_VAR 0 2
15112: PPUSH
15113: LD_INT 9
15115: PPUSH
15116: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
15120: LD_INT 28
15122: PPUSH
15123: LD_OWVAR 2
15127: PPUSH
15128: LD_INT 2
15130: PPUSH
15131: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
15135: LD_INT 29
15137: PPUSH
15138: LD_OWVAR 2
15142: PPUSH
15143: LD_INT 2
15145: PPUSH
15146: CALL_OW 322
// end ;
15150: PPOPN 3
15152: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
15153: LD_EXP 24
15157: PUSH
15158: LD_EXP 67
15162: AND
15163: IFFALSE 15274
15165: GO 15167
15167: DISABLE
15168: LD_INT 0
15170: PPUSH
15171: PPUSH
15172: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15173: LD_ADDR_VAR 0 3
15177: PUSH
15178: LD_INT 22
15180: PUSH
15181: LD_OWVAR 2
15185: PUSH
15186: EMPTY
15187: LIST
15188: LIST
15189: PUSH
15190: LD_INT 25
15192: PUSH
15193: LD_INT 1
15195: PUSH
15196: EMPTY
15197: LIST
15198: LIST
15199: PUSH
15200: EMPTY
15201: LIST
15202: LIST
15203: PPUSH
15204: CALL_OW 69
15208: ST_TO_ADDR
// if not tmp then
15209: LD_VAR 0 3
15213: NOT
15214: IFFALSE 15218
// exit ;
15216: GO 15274
// un := tmp [ rand ( 1 , tmp ) ] ;
15218: LD_ADDR_VAR 0 2
15222: PUSH
15223: LD_VAR 0 3
15227: PUSH
15228: LD_INT 1
15230: PPUSH
15231: LD_VAR 0 3
15235: PPUSH
15236: CALL_OW 12
15240: ARRAY
15241: ST_TO_ADDR
// if Crawls ( un ) then
15242: LD_VAR 0 2
15246: PPUSH
15247: CALL_OW 318
15251: IFFALSE 15262
// ComWalk ( un ) ;
15253: LD_VAR 0 2
15257: PPUSH
15258: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15262: LD_VAR 0 2
15266: PPUSH
15267: LD_INT 8
15269: PPUSH
15270: CALL_OW 336
// end ;
15274: PPOPN 3
15276: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
15277: LD_EXP 24
15281: PUSH
15282: LD_EXP 68
15286: AND
15287: IFFALSE 15431
15289: GO 15291
15291: DISABLE
15292: LD_INT 0
15294: PPUSH
15295: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
15296: LD_ADDR_VAR 0 2
15300: PUSH
15301: LD_INT 22
15303: PUSH
15304: LD_OWVAR 2
15308: PUSH
15309: EMPTY
15310: LIST
15311: LIST
15312: PUSH
15313: LD_INT 21
15315: PUSH
15316: LD_INT 2
15318: PUSH
15319: EMPTY
15320: LIST
15321: LIST
15322: PUSH
15323: LD_INT 2
15325: PUSH
15326: LD_INT 34
15328: PUSH
15329: LD_INT 12
15331: PUSH
15332: EMPTY
15333: LIST
15334: LIST
15335: PUSH
15336: LD_INT 34
15338: PUSH
15339: LD_INT 51
15341: PUSH
15342: EMPTY
15343: LIST
15344: LIST
15345: PUSH
15346: LD_INT 34
15348: PUSH
15349: LD_INT 32
15351: PUSH
15352: EMPTY
15353: LIST
15354: LIST
15355: PUSH
15356: EMPTY
15357: LIST
15358: LIST
15359: LIST
15360: LIST
15361: PUSH
15362: EMPTY
15363: LIST
15364: LIST
15365: LIST
15366: PPUSH
15367: CALL_OW 69
15371: ST_TO_ADDR
// if not tmp then
15372: LD_VAR 0 2
15376: NOT
15377: IFFALSE 15381
// exit ;
15379: GO 15431
// for i in tmp do
15381: LD_ADDR_VAR 0 1
15385: PUSH
15386: LD_VAR 0 2
15390: PUSH
15391: FOR_IN
15392: IFFALSE 15429
// if GetCargo ( i , mat_artifact ) = 0 then
15394: LD_VAR 0 1
15398: PPUSH
15399: LD_INT 4
15401: PPUSH
15402: CALL_OW 289
15406: PUSH
15407: LD_INT 0
15409: EQUAL
15410: IFFALSE 15427
// SetCargo ( i , mat_siberit , 100 ) ;
15412: LD_VAR 0 1
15416: PPUSH
15417: LD_INT 3
15419: PPUSH
15420: LD_INT 100
15422: PPUSH
15423: CALL_OW 290
15427: GO 15391
15429: POP
15430: POP
// end ;
15431: PPOPN 2
15433: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
15434: LD_EXP 24
15438: PUSH
15439: LD_EXP 69
15443: AND
15444: IFFALSE 15627
15446: GO 15448
15448: DISABLE
15449: LD_INT 0
15451: PPUSH
15452: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
15453: LD_ADDR_VAR 0 2
15457: PUSH
15458: LD_INT 22
15460: PUSH
15461: LD_OWVAR 2
15465: PUSH
15466: EMPTY
15467: LIST
15468: LIST
15469: PPUSH
15470: CALL_OW 69
15474: ST_TO_ADDR
// if not tmp then
15475: LD_VAR 0 2
15479: NOT
15480: IFFALSE 15484
// exit ;
15482: GO 15627
// for i := 1 to 2 do
15484: LD_ADDR_VAR 0 1
15488: PUSH
15489: DOUBLE
15490: LD_INT 1
15492: DEC
15493: ST_TO_ADDR
15494: LD_INT 2
15496: PUSH
15497: FOR_TO
15498: IFFALSE 15625
// begin uc_side := your_side ;
15500: LD_ADDR_OWVAR 20
15504: PUSH
15505: LD_OWVAR 2
15509: ST_TO_ADDR
// uc_nation := nation_american ;
15510: LD_ADDR_OWVAR 21
15514: PUSH
15515: LD_INT 1
15517: ST_TO_ADDR
// vc_chassis := us_morphling ;
15518: LD_ADDR_OWVAR 37
15522: PUSH
15523: LD_INT 5
15525: ST_TO_ADDR
// vc_engine := engine_siberite ;
15526: LD_ADDR_OWVAR 39
15530: PUSH
15531: LD_INT 3
15533: ST_TO_ADDR
// vc_control := control_computer ;
15534: LD_ADDR_OWVAR 38
15538: PUSH
15539: LD_INT 3
15541: ST_TO_ADDR
// vc_weapon := us_double_laser ;
15542: LD_ADDR_OWVAR 40
15546: PUSH
15547: LD_INT 10
15549: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
15550: LD_VAR 0 2
15554: PUSH
15555: LD_INT 1
15557: ARRAY
15558: PPUSH
15559: CALL_OW 310
15563: NOT
15564: IFFALSE 15611
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
15566: CALL_OW 45
15570: PPUSH
15571: LD_VAR 0 2
15575: PUSH
15576: LD_INT 1
15578: ARRAY
15579: PPUSH
15580: CALL_OW 250
15584: PPUSH
15585: LD_VAR 0 2
15589: PUSH
15590: LD_INT 1
15592: ARRAY
15593: PPUSH
15594: CALL_OW 251
15598: PPUSH
15599: LD_INT 12
15601: PPUSH
15602: LD_INT 1
15604: PPUSH
15605: CALL_OW 50
15609: GO 15623
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
15611: CALL_OW 45
15615: PPUSH
15616: LD_INT 1
15618: PPUSH
15619: CALL_OW 51
// end ;
15623: GO 15497
15625: POP
15626: POP
// end ;
15627: PPOPN 2
15629: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
15630: LD_EXP 24
15634: PUSH
15635: LD_EXP 70
15639: AND
15640: IFFALSE 15862
15642: GO 15644
15644: DISABLE
15645: LD_INT 0
15647: PPUSH
15648: PPUSH
15649: PPUSH
15650: PPUSH
15651: PPUSH
15652: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15653: LD_ADDR_VAR 0 6
15657: PUSH
15658: LD_INT 22
15660: PUSH
15661: LD_OWVAR 2
15665: PUSH
15666: EMPTY
15667: LIST
15668: LIST
15669: PUSH
15670: LD_INT 21
15672: PUSH
15673: LD_INT 1
15675: PUSH
15676: EMPTY
15677: LIST
15678: LIST
15679: PUSH
15680: LD_INT 3
15682: PUSH
15683: LD_INT 23
15685: PUSH
15686: LD_INT 0
15688: PUSH
15689: EMPTY
15690: LIST
15691: LIST
15692: PUSH
15693: EMPTY
15694: LIST
15695: LIST
15696: PUSH
15697: EMPTY
15698: LIST
15699: LIST
15700: LIST
15701: PPUSH
15702: CALL_OW 69
15706: ST_TO_ADDR
// if not tmp then
15707: LD_VAR 0 6
15711: NOT
15712: IFFALSE 15716
// exit ;
15714: GO 15862
// s1 := rand ( 1 , 4 ) ;
15716: LD_ADDR_VAR 0 2
15720: PUSH
15721: LD_INT 1
15723: PPUSH
15724: LD_INT 4
15726: PPUSH
15727: CALL_OW 12
15731: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
15732: LD_ADDR_VAR 0 4
15736: PUSH
15737: LD_VAR 0 6
15741: PUSH
15742: LD_INT 1
15744: ARRAY
15745: PPUSH
15746: LD_VAR 0 2
15750: PPUSH
15751: CALL_OW 259
15755: ST_TO_ADDR
// if s1 = 1 then
15756: LD_VAR 0 2
15760: PUSH
15761: LD_INT 1
15763: EQUAL
15764: IFFALSE 15784
// s2 := rand ( 2 , 4 ) else
15766: LD_ADDR_VAR 0 3
15770: PUSH
15771: LD_INT 2
15773: PPUSH
15774: LD_INT 4
15776: PPUSH
15777: CALL_OW 12
15781: ST_TO_ADDR
15782: GO 15792
// s2 := 1 ;
15784: LD_ADDR_VAR 0 3
15788: PUSH
15789: LD_INT 1
15791: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
15792: LD_ADDR_VAR 0 5
15796: PUSH
15797: LD_VAR 0 6
15801: PUSH
15802: LD_INT 1
15804: ARRAY
15805: PPUSH
15806: LD_VAR 0 3
15810: PPUSH
15811: CALL_OW 259
15815: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
15816: LD_VAR 0 6
15820: PUSH
15821: LD_INT 1
15823: ARRAY
15824: PPUSH
15825: LD_VAR 0 2
15829: PPUSH
15830: LD_VAR 0 5
15834: PPUSH
15835: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
15839: LD_VAR 0 6
15843: PUSH
15844: LD_INT 1
15846: ARRAY
15847: PPUSH
15848: LD_VAR 0 3
15852: PPUSH
15853: LD_VAR 0 4
15857: PPUSH
15858: CALL_OW 237
// end ;
15862: PPOPN 6
15864: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
15865: LD_EXP 24
15869: PUSH
15870: LD_EXP 71
15874: AND
15875: IFFALSE 15954
15877: GO 15879
15879: DISABLE
15880: LD_INT 0
15882: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
15883: LD_ADDR_VAR 0 1
15887: PUSH
15888: LD_INT 22
15890: PUSH
15891: LD_OWVAR 2
15895: PUSH
15896: EMPTY
15897: LIST
15898: LIST
15899: PUSH
15900: LD_INT 30
15902: PUSH
15903: LD_INT 3
15905: PUSH
15906: EMPTY
15907: LIST
15908: LIST
15909: PUSH
15910: EMPTY
15911: LIST
15912: LIST
15913: PPUSH
15914: CALL_OW 69
15918: ST_TO_ADDR
// if not tmp then
15919: LD_VAR 0 1
15923: NOT
15924: IFFALSE 15928
// exit ;
15926: GO 15954
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15928: LD_VAR 0 1
15932: PUSH
15933: LD_INT 1
15935: PPUSH
15936: LD_VAR 0 1
15940: PPUSH
15941: CALL_OW 12
15945: ARRAY
15946: PPUSH
15947: LD_INT 1
15949: PPUSH
15950: CALL_OW 234
// end ;
15954: PPOPN 1
15956: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
15957: LD_EXP 24
15961: PUSH
15962: LD_EXP 72
15966: AND
15967: IFFALSE 16079
15969: GO 15971
15971: DISABLE
15972: LD_INT 0
15974: PPUSH
15975: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
15976: LD_ADDR_VAR 0 2
15980: PUSH
15981: LD_INT 22
15983: PUSH
15984: LD_OWVAR 2
15988: PUSH
15989: EMPTY
15990: LIST
15991: LIST
15992: PUSH
15993: LD_INT 2
15995: PUSH
15996: LD_INT 30
15998: PUSH
15999: LD_INT 27
16001: PUSH
16002: EMPTY
16003: LIST
16004: LIST
16005: PUSH
16006: LD_INT 30
16008: PUSH
16009: LD_INT 26
16011: PUSH
16012: EMPTY
16013: LIST
16014: LIST
16015: PUSH
16016: LD_INT 30
16018: PUSH
16019: LD_INT 28
16021: PUSH
16022: EMPTY
16023: LIST
16024: LIST
16025: PUSH
16026: EMPTY
16027: LIST
16028: LIST
16029: LIST
16030: LIST
16031: PUSH
16032: EMPTY
16033: LIST
16034: LIST
16035: PPUSH
16036: CALL_OW 69
16040: ST_TO_ADDR
// if not tmp then
16041: LD_VAR 0 2
16045: NOT
16046: IFFALSE 16050
// exit ;
16048: GO 16079
// for i in tmp do
16050: LD_ADDR_VAR 0 1
16054: PUSH
16055: LD_VAR 0 2
16059: PUSH
16060: FOR_IN
16061: IFFALSE 16077
// SetLives ( i , 1 ) ;
16063: LD_VAR 0 1
16067: PPUSH
16068: LD_INT 1
16070: PPUSH
16071: CALL_OW 234
16075: GO 16060
16077: POP
16078: POP
// end ;
16079: PPOPN 2
16081: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
16082: LD_EXP 24
16086: PUSH
16087: LD_EXP 73
16091: AND
16092: IFFALSE 16366
16094: GO 16096
16096: DISABLE
16097: LD_INT 0
16099: PPUSH
16100: PPUSH
16101: PPUSH
// begin i := rand ( 1 , 7 ) ;
16102: LD_ADDR_VAR 0 1
16106: PUSH
16107: LD_INT 1
16109: PPUSH
16110: LD_INT 7
16112: PPUSH
16113: CALL_OW 12
16117: ST_TO_ADDR
// case i of 1 :
16118: LD_VAR 0 1
16122: PUSH
16123: LD_INT 1
16125: DOUBLE
16126: EQUAL
16127: IFTRUE 16131
16129: GO 16141
16131: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
16132: LD_STRING earthquake(getX(game), 0, 32)
16134: PPUSH
16135: CALL_OW 559
16139: GO 16366
16141: LD_INT 2
16143: DOUBLE
16144: EQUAL
16145: IFTRUE 16149
16147: GO 16163
16149: POP
// begin ToLua ( displayStucuk(); ) ;
16150: LD_STRING displayStucuk();
16152: PPUSH
16153: CALL_OW 559
// ResetFog ;
16157: CALL_OW 335
// end ; 3 :
16161: GO 16366
16163: LD_INT 3
16165: DOUBLE
16166: EQUAL
16167: IFTRUE 16171
16169: GO 16275
16171: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16172: LD_ADDR_VAR 0 2
16176: PUSH
16177: LD_INT 22
16179: PUSH
16180: LD_OWVAR 2
16184: PUSH
16185: EMPTY
16186: LIST
16187: LIST
16188: PUSH
16189: LD_INT 25
16191: PUSH
16192: LD_INT 1
16194: PUSH
16195: EMPTY
16196: LIST
16197: LIST
16198: PUSH
16199: EMPTY
16200: LIST
16201: LIST
16202: PPUSH
16203: CALL_OW 69
16207: ST_TO_ADDR
// if not tmp then
16208: LD_VAR 0 2
16212: NOT
16213: IFFALSE 16217
// exit ;
16215: GO 16366
// un := tmp [ rand ( 1 , tmp ) ] ;
16217: LD_ADDR_VAR 0 3
16221: PUSH
16222: LD_VAR 0 2
16226: PUSH
16227: LD_INT 1
16229: PPUSH
16230: LD_VAR 0 2
16234: PPUSH
16235: CALL_OW 12
16239: ARRAY
16240: ST_TO_ADDR
// if Crawls ( un ) then
16241: LD_VAR 0 3
16245: PPUSH
16246: CALL_OW 318
16250: IFFALSE 16261
// ComWalk ( un ) ;
16252: LD_VAR 0 3
16256: PPUSH
16257: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16261: LD_VAR 0 3
16265: PPUSH
16266: LD_INT 8
16268: PPUSH
16269: CALL_OW 336
// end ; 4 :
16273: GO 16366
16275: LD_INT 4
16277: DOUBLE
16278: EQUAL
16279: IFTRUE 16283
16281: GO 16344
16283: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16284: LD_ADDR_VAR 0 2
16288: PUSH
16289: LD_INT 22
16291: PUSH
16292: LD_OWVAR 2
16296: PUSH
16297: EMPTY
16298: LIST
16299: LIST
16300: PUSH
16301: LD_INT 30
16303: PUSH
16304: LD_INT 29
16306: PUSH
16307: EMPTY
16308: LIST
16309: LIST
16310: PUSH
16311: EMPTY
16312: LIST
16313: LIST
16314: PPUSH
16315: CALL_OW 69
16319: ST_TO_ADDR
// if not tmp then
16320: LD_VAR 0 2
16324: NOT
16325: IFFALSE 16329
// exit ;
16327: GO 16366
// DestroyUnit ( tmp [ 1 ] ) ;
16329: LD_VAR 0 2
16333: PUSH
16334: LD_INT 1
16336: ARRAY
16337: PPUSH
16338: CALL_OW 65
// end ; 5 .. 7 :
16342: GO 16366
16344: LD_INT 5
16346: DOUBLE
16347: GREATEREQUAL
16348: IFFALSE 16356
16350: LD_INT 7
16352: DOUBLE
16353: LESSEQUAL
16354: IFTRUE 16358
16356: GO 16365
16358: POP
// StreamSibBomb ; end ;
16359: CALL 12616 0 0
16363: GO 16366
16365: POP
// end ;
16366: PPOPN 3
16368: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
16369: LD_EXP 24
16373: PUSH
16374: LD_EXP 74
16378: AND
16379: IFFALSE 16535
16381: GO 16383
16383: DISABLE
16384: LD_INT 0
16386: PPUSH
16387: PPUSH
16388: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
16389: LD_ADDR_VAR 0 2
16393: PUSH
16394: LD_INT 81
16396: PUSH
16397: LD_OWVAR 2
16401: PUSH
16402: EMPTY
16403: LIST
16404: LIST
16405: PUSH
16406: LD_INT 2
16408: PUSH
16409: LD_INT 21
16411: PUSH
16412: LD_INT 1
16414: PUSH
16415: EMPTY
16416: LIST
16417: LIST
16418: PUSH
16419: LD_INT 21
16421: PUSH
16422: LD_INT 2
16424: PUSH
16425: EMPTY
16426: LIST
16427: LIST
16428: PUSH
16429: EMPTY
16430: LIST
16431: LIST
16432: LIST
16433: PUSH
16434: EMPTY
16435: LIST
16436: LIST
16437: PPUSH
16438: CALL_OW 69
16442: ST_TO_ADDR
// if not tmp then
16443: LD_VAR 0 2
16447: NOT
16448: IFFALSE 16452
// exit ;
16450: GO 16535
// p := 0 ;
16452: LD_ADDR_VAR 0 3
16456: PUSH
16457: LD_INT 0
16459: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16460: LD_INT 35
16462: PPUSH
16463: CALL_OW 67
// p := p + 1 ;
16467: LD_ADDR_VAR 0 3
16471: PUSH
16472: LD_VAR 0 3
16476: PUSH
16477: LD_INT 1
16479: PLUS
16480: ST_TO_ADDR
// for i in tmp do
16481: LD_ADDR_VAR 0 1
16485: PUSH
16486: LD_VAR 0 2
16490: PUSH
16491: FOR_IN
16492: IFFALSE 16523
// if GetLives ( i ) < 1000 then
16494: LD_VAR 0 1
16498: PPUSH
16499: CALL_OW 256
16503: PUSH
16504: LD_INT 1000
16506: LESS
16507: IFFALSE 16521
// SetLives ( i , 1000 ) ;
16509: LD_VAR 0 1
16513: PPUSH
16514: LD_INT 1000
16516: PPUSH
16517: CALL_OW 234
16521: GO 16491
16523: POP
16524: POP
// until p > 20 ;
16525: LD_VAR 0 3
16529: PUSH
16530: LD_INT 20
16532: GREATER
16533: IFFALSE 16460
// end ;
16535: PPOPN 3
16537: END
// every 0 0$1 trigger StreamModeActive and sTime do
16538: LD_EXP 24
16542: PUSH
16543: LD_EXP 75
16547: AND
16548: IFFALSE 16583
16550: GO 16552
16552: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
16553: LD_INT 28
16555: PPUSH
16556: LD_OWVAR 2
16560: PPUSH
16561: LD_INT 2
16563: PPUSH
16564: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
16568: LD_INT 30
16570: PPUSH
16571: LD_OWVAR 2
16575: PPUSH
16576: LD_INT 2
16578: PPUSH
16579: CALL_OW 322
// end ;
16583: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
16584: LD_EXP 24
16588: PUSH
16589: LD_EXP 76
16593: AND
16594: IFFALSE 16715
16596: GO 16598
16598: DISABLE
16599: LD_INT 0
16601: PPUSH
16602: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16603: LD_ADDR_VAR 0 2
16607: PUSH
16608: LD_INT 22
16610: PUSH
16611: LD_OWVAR 2
16615: PUSH
16616: EMPTY
16617: LIST
16618: LIST
16619: PUSH
16620: LD_INT 21
16622: PUSH
16623: LD_INT 1
16625: PUSH
16626: EMPTY
16627: LIST
16628: LIST
16629: PUSH
16630: LD_INT 3
16632: PUSH
16633: LD_INT 23
16635: PUSH
16636: LD_INT 0
16638: PUSH
16639: EMPTY
16640: LIST
16641: LIST
16642: PUSH
16643: EMPTY
16644: LIST
16645: LIST
16646: PUSH
16647: EMPTY
16648: LIST
16649: LIST
16650: LIST
16651: PPUSH
16652: CALL_OW 69
16656: ST_TO_ADDR
// if not tmp then
16657: LD_VAR 0 2
16661: NOT
16662: IFFALSE 16666
// exit ;
16664: GO 16715
// for i in tmp do
16666: LD_ADDR_VAR 0 1
16670: PUSH
16671: LD_VAR 0 2
16675: PUSH
16676: FOR_IN
16677: IFFALSE 16713
// begin if Crawls ( i ) then
16679: LD_VAR 0 1
16683: PPUSH
16684: CALL_OW 318
16688: IFFALSE 16699
// ComWalk ( i ) ;
16690: LD_VAR 0 1
16694: PPUSH
16695: CALL_OW 138
// SetClass ( i , 2 ) ;
16699: LD_VAR 0 1
16703: PPUSH
16704: LD_INT 2
16706: PPUSH
16707: CALL_OW 336
// end ;
16711: GO 16676
16713: POP
16714: POP
// end ;
16715: PPOPN 2
16717: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
16718: LD_EXP 24
16722: PUSH
16723: LD_EXP 77
16727: AND
16728: IFFALSE 17009
16730: GO 16732
16732: DISABLE
16733: LD_INT 0
16735: PPUSH
16736: PPUSH
16737: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
16738: LD_OWVAR 2
16742: PPUSH
16743: LD_INT 9
16745: PPUSH
16746: LD_INT 1
16748: PPUSH
16749: LD_INT 1
16751: PPUSH
16752: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
16756: LD_INT 9
16758: PPUSH
16759: LD_OWVAR 2
16763: PPUSH
16764: CALL_OW 343
// uc_side := 9 ;
16768: LD_ADDR_OWVAR 20
16772: PUSH
16773: LD_INT 9
16775: ST_TO_ADDR
// uc_nation := 2 ;
16776: LD_ADDR_OWVAR 21
16780: PUSH
16781: LD_INT 2
16783: ST_TO_ADDR
// hc_name := Dark Warrior ;
16784: LD_ADDR_OWVAR 26
16788: PUSH
16789: LD_STRING Dark Warrior
16791: ST_TO_ADDR
// hc_gallery :=  ;
16792: LD_ADDR_OWVAR 33
16796: PUSH
16797: LD_STRING 
16799: ST_TO_ADDR
// hc_noskilllimit := true ;
16800: LD_ADDR_OWVAR 76
16804: PUSH
16805: LD_INT 1
16807: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
16808: LD_ADDR_OWVAR 31
16812: PUSH
16813: LD_INT 30
16815: PUSH
16816: LD_INT 30
16818: PUSH
16819: LD_INT 30
16821: PUSH
16822: LD_INT 30
16824: PUSH
16825: EMPTY
16826: LIST
16827: LIST
16828: LIST
16829: LIST
16830: ST_TO_ADDR
// un := CreateHuman ;
16831: LD_ADDR_VAR 0 3
16835: PUSH
16836: CALL_OW 44
16840: ST_TO_ADDR
// hc_noskilllimit := false ;
16841: LD_ADDR_OWVAR 76
16845: PUSH
16846: LD_INT 0
16848: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16849: LD_VAR 0 3
16853: PPUSH
16854: LD_INT 1
16856: PPUSH
16857: CALL_OW 51
// p := 0 ;
16861: LD_ADDR_VAR 0 2
16865: PUSH
16866: LD_INT 0
16868: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16869: LD_INT 35
16871: PPUSH
16872: CALL_OW 67
// p := p + 1 ;
16876: LD_ADDR_VAR 0 2
16880: PUSH
16881: LD_VAR 0 2
16885: PUSH
16886: LD_INT 1
16888: PLUS
16889: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
16890: LD_VAR 0 3
16894: PPUSH
16895: CALL_OW 256
16899: PUSH
16900: LD_INT 1000
16902: LESS
16903: IFFALSE 16917
// SetLives ( un , 1000 ) ;
16905: LD_VAR 0 3
16909: PPUSH
16910: LD_INT 1000
16912: PPUSH
16913: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
16917: LD_VAR 0 3
16921: PPUSH
16922: LD_INT 81
16924: PUSH
16925: LD_OWVAR 2
16929: PUSH
16930: EMPTY
16931: LIST
16932: LIST
16933: PUSH
16934: LD_INT 91
16936: PUSH
16937: LD_VAR 0 3
16941: PUSH
16942: LD_INT 30
16944: PUSH
16945: EMPTY
16946: LIST
16947: LIST
16948: LIST
16949: PUSH
16950: EMPTY
16951: LIST
16952: LIST
16953: PPUSH
16954: CALL_OW 69
16958: PPUSH
16959: LD_VAR 0 3
16963: PPUSH
16964: CALL_OW 74
16968: PPUSH
16969: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
16973: LD_VAR 0 2
16977: PUSH
16978: LD_INT 60
16980: GREATER
16981: PUSH
16982: LD_VAR 0 3
16986: PPUSH
16987: CALL_OW 301
16991: OR
16992: IFFALSE 16869
// if un then
16994: LD_VAR 0 3
16998: IFFALSE 17009
// RemoveUnit ( un ) ;
17000: LD_VAR 0 3
17004: PPUSH
17005: CALL_OW 64
// end ;
17009: PPOPN 3
17011: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17012: LD_INT 0
17014: PPUSH
// case cmd of 301 :
17015: LD_VAR 0 1
17019: PUSH
17020: LD_INT 301
17022: DOUBLE
17023: EQUAL
17024: IFTRUE 17028
17026: GO 17060
17028: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
17029: LD_VAR 0 6
17033: PPUSH
17034: LD_VAR 0 7
17038: PPUSH
17039: LD_VAR 0 8
17043: PPUSH
17044: LD_VAR 0 4
17048: PPUSH
17049: LD_VAR 0 5
17053: PPUSH
17054: CALL 18261 0 5
17058: GO 17181
17060: LD_INT 302
17062: DOUBLE
17063: EQUAL
17064: IFTRUE 17068
17066: GO 17105
17068: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
17069: LD_VAR 0 6
17073: PPUSH
17074: LD_VAR 0 7
17078: PPUSH
17079: LD_VAR 0 8
17083: PPUSH
17084: LD_VAR 0 9
17088: PPUSH
17089: LD_VAR 0 4
17093: PPUSH
17094: LD_VAR 0 5
17098: PPUSH
17099: CALL 18352 0 6
17103: GO 17181
17105: LD_INT 303
17107: DOUBLE
17108: EQUAL
17109: IFTRUE 17113
17111: GO 17150
17113: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
17114: LD_VAR 0 6
17118: PPUSH
17119: LD_VAR 0 7
17123: PPUSH
17124: LD_VAR 0 8
17128: PPUSH
17129: LD_VAR 0 9
17133: PPUSH
17134: LD_VAR 0 4
17138: PPUSH
17139: LD_VAR 0 5
17143: PPUSH
17144: CALL 17186 0 6
17148: GO 17181
17150: LD_INT 304
17152: DOUBLE
17153: EQUAL
17154: IFTRUE 17158
17156: GO 17180
17158: POP
// hHackTeleport ( unit , x , y ) ; end ;
17159: LD_VAR 0 2
17163: PPUSH
17164: LD_VAR 0 4
17168: PPUSH
17169: LD_VAR 0 5
17173: PPUSH
17174: CALL 18945 0 3
17178: GO 17181
17180: POP
// end ;
17181: LD_VAR 0 12
17185: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
17186: LD_INT 0
17188: PPUSH
17189: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
17190: LD_VAR 0 1
17194: PUSH
17195: LD_INT 1
17197: LESS
17198: PUSH
17199: LD_VAR 0 1
17203: PUSH
17204: LD_INT 3
17206: GREATER
17207: OR
17208: PUSH
17209: LD_VAR 0 5
17213: PPUSH
17214: LD_VAR 0 6
17218: PPUSH
17219: CALL_OW 428
17223: OR
17224: IFFALSE 17228
// exit ;
17226: GO 17948
// uc_side := your_side ;
17228: LD_ADDR_OWVAR 20
17232: PUSH
17233: LD_OWVAR 2
17237: ST_TO_ADDR
// uc_nation := nation ;
17238: LD_ADDR_OWVAR 21
17242: PUSH
17243: LD_VAR 0 1
17247: ST_TO_ADDR
// bc_level = 1 ;
17248: LD_ADDR_OWVAR 43
17252: PUSH
17253: LD_INT 1
17255: ST_TO_ADDR
// case btype of 1 :
17256: LD_VAR 0 2
17260: PUSH
17261: LD_INT 1
17263: DOUBLE
17264: EQUAL
17265: IFTRUE 17269
17267: GO 17280
17269: POP
// bc_type := b_depot ; 2 :
17270: LD_ADDR_OWVAR 42
17274: PUSH
17275: LD_INT 0
17277: ST_TO_ADDR
17278: GO 17892
17280: LD_INT 2
17282: DOUBLE
17283: EQUAL
17284: IFTRUE 17288
17286: GO 17299
17288: POP
// bc_type := b_warehouse ; 3 :
17289: LD_ADDR_OWVAR 42
17293: PUSH
17294: LD_INT 1
17296: ST_TO_ADDR
17297: GO 17892
17299: LD_INT 3
17301: DOUBLE
17302: EQUAL
17303: IFTRUE 17307
17305: GO 17318
17307: POP
// bc_type := b_lab ; 4 .. 9 :
17308: LD_ADDR_OWVAR 42
17312: PUSH
17313: LD_INT 6
17315: ST_TO_ADDR
17316: GO 17892
17318: LD_INT 4
17320: DOUBLE
17321: GREATEREQUAL
17322: IFFALSE 17330
17324: LD_INT 9
17326: DOUBLE
17327: LESSEQUAL
17328: IFTRUE 17332
17330: GO 17384
17332: POP
// begin bc_type := b_lab_half ;
17333: LD_ADDR_OWVAR 42
17337: PUSH
17338: LD_INT 7
17340: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
17341: LD_ADDR_OWVAR 44
17345: PUSH
17346: LD_INT 10
17348: PUSH
17349: LD_INT 11
17351: PUSH
17352: LD_INT 12
17354: PUSH
17355: LD_INT 15
17357: PUSH
17358: LD_INT 14
17360: PUSH
17361: LD_INT 13
17363: PUSH
17364: EMPTY
17365: LIST
17366: LIST
17367: LIST
17368: LIST
17369: LIST
17370: LIST
17371: PUSH
17372: LD_VAR 0 2
17376: PUSH
17377: LD_INT 3
17379: MINUS
17380: ARRAY
17381: ST_TO_ADDR
// end ; 10 .. 13 :
17382: GO 17892
17384: LD_INT 10
17386: DOUBLE
17387: GREATEREQUAL
17388: IFFALSE 17396
17390: LD_INT 13
17392: DOUBLE
17393: LESSEQUAL
17394: IFTRUE 17398
17396: GO 17475
17398: POP
// begin bc_type := b_lab_full ;
17399: LD_ADDR_OWVAR 42
17403: PUSH
17404: LD_INT 8
17406: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
17407: LD_ADDR_OWVAR 44
17411: PUSH
17412: LD_INT 10
17414: PUSH
17415: LD_INT 12
17417: PUSH
17418: LD_INT 14
17420: PUSH
17421: LD_INT 13
17423: PUSH
17424: EMPTY
17425: LIST
17426: LIST
17427: LIST
17428: LIST
17429: PUSH
17430: LD_VAR 0 2
17434: PUSH
17435: LD_INT 9
17437: MINUS
17438: ARRAY
17439: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
17440: LD_ADDR_OWVAR 45
17444: PUSH
17445: LD_INT 11
17447: PUSH
17448: LD_INT 15
17450: PUSH
17451: LD_INT 12
17453: PUSH
17454: LD_INT 15
17456: PUSH
17457: EMPTY
17458: LIST
17459: LIST
17460: LIST
17461: LIST
17462: PUSH
17463: LD_VAR 0 2
17467: PUSH
17468: LD_INT 9
17470: MINUS
17471: ARRAY
17472: ST_TO_ADDR
// end ; 14 :
17473: GO 17892
17475: LD_INT 14
17477: DOUBLE
17478: EQUAL
17479: IFTRUE 17483
17481: GO 17494
17483: POP
// bc_type := b_workshop ; 15 :
17484: LD_ADDR_OWVAR 42
17488: PUSH
17489: LD_INT 2
17491: ST_TO_ADDR
17492: GO 17892
17494: LD_INT 15
17496: DOUBLE
17497: EQUAL
17498: IFTRUE 17502
17500: GO 17513
17502: POP
// bc_type := b_factory ; 16 :
17503: LD_ADDR_OWVAR 42
17507: PUSH
17508: LD_INT 3
17510: ST_TO_ADDR
17511: GO 17892
17513: LD_INT 16
17515: DOUBLE
17516: EQUAL
17517: IFTRUE 17521
17519: GO 17532
17521: POP
// bc_type := b_ext_gun ; 17 :
17522: LD_ADDR_OWVAR 42
17526: PUSH
17527: LD_INT 17
17529: ST_TO_ADDR
17530: GO 17892
17532: LD_INT 17
17534: DOUBLE
17535: EQUAL
17536: IFTRUE 17540
17538: GO 17568
17540: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
17541: LD_ADDR_OWVAR 42
17545: PUSH
17546: LD_INT 19
17548: PUSH
17549: LD_INT 23
17551: PUSH
17552: LD_INT 19
17554: PUSH
17555: EMPTY
17556: LIST
17557: LIST
17558: LIST
17559: PUSH
17560: LD_VAR 0 1
17564: ARRAY
17565: ST_TO_ADDR
17566: GO 17892
17568: LD_INT 18
17570: DOUBLE
17571: EQUAL
17572: IFTRUE 17576
17574: GO 17587
17576: POP
// bc_type := b_ext_radar ; 19 :
17577: LD_ADDR_OWVAR 42
17581: PUSH
17582: LD_INT 20
17584: ST_TO_ADDR
17585: GO 17892
17587: LD_INT 19
17589: DOUBLE
17590: EQUAL
17591: IFTRUE 17595
17593: GO 17606
17595: POP
// bc_type := b_ext_radio ; 20 :
17596: LD_ADDR_OWVAR 42
17600: PUSH
17601: LD_INT 22
17603: ST_TO_ADDR
17604: GO 17892
17606: LD_INT 20
17608: DOUBLE
17609: EQUAL
17610: IFTRUE 17614
17612: GO 17625
17614: POP
// bc_type := b_ext_siberium ; 21 :
17615: LD_ADDR_OWVAR 42
17619: PUSH
17620: LD_INT 21
17622: ST_TO_ADDR
17623: GO 17892
17625: LD_INT 21
17627: DOUBLE
17628: EQUAL
17629: IFTRUE 17633
17631: GO 17644
17633: POP
// bc_type := b_ext_computer ; 22 :
17634: LD_ADDR_OWVAR 42
17638: PUSH
17639: LD_INT 24
17641: ST_TO_ADDR
17642: GO 17892
17644: LD_INT 22
17646: DOUBLE
17647: EQUAL
17648: IFTRUE 17652
17650: GO 17663
17652: POP
// bc_type := b_ext_track ; 23 :
17653: LD_ADDR_OWVAR 42
17657: PUSH
17658: LD_INT 16
17660: ST_TO_ADDR
17661: GO 17892
17663: LD_INT 23
17665: DOUBLE
17666: EQUAL
17667: IFTRUE 17671
17669: GO 17682
17671: POP
// bc_type := b_ext_laser ; 24 :
17672: LD_ADDR_OWVAR 42
17676: PUSH
17677: LD_INT 25
17679: ST_TO_ADDR
17680: GO 17892
17682: LD_INT 24
17684: DOUBLE
17685: EQUAL
17686: IFTRUE 17690
17688: GO 17701
17690: POP
// bc_type := b_control_tower ; 25 :
17691: LD_ADDR_OWVAR 42
17695: PUSH
17696: LD_INT 36
17698: ST_TO_ADDR
17699: GO 17892
17701: LD_INT 25
17703: DOUBLE
17704: EQUAL
17705: IFTRUE 17709
17707: GO 17720
17709: POP
// bc_type := b_breastwork ; 26 :
17710: LD_ADDR_OWVAR 42
17714: PUSH
17715: LD_INT 31
17717: ST_TO_ADDR
17718: GO 17892
17720: LD_INT 26
17722: DOUBLE
17723: EQUAL
17724: IFTRUE 17728
17726: GO 17739
17728: POP
// bc_type := b_bunker ; 27 :
17729: LD_ADDR_OWVAR 42
17733: PUSH
17734: LD_INT 32
17736: ST_TO_ADDR
17737: GO 17892
17739: LD_INT 27
17741: DOUBLE
17742: EQUAL
17743: IFTRUE 17747
17745: GO 17758
17747: POP
// bc_type := b_turret ; 28 :
17748: LD_ADDR_OWVAR 42
17752: PUSH
17753: LD_INT 33
17755: ST_TO_ADDR
17756: GO 17892
17758: LD_INT 28
17760: DOUBLE
17761: EQUAL
17762: IFTRUE 17766
17764: GO 17777
17766: POP
// bc_type := b_armoury ; 29 :
17767: LD_ADDR_OWVAR 42
17771: PUSH
17772: LD_INT 4
17774: ST_TO_ADDR
17775: GO 17892
17777: LD_INT 29
17779: DOUBLE
17780: EQUAL
17781: IFTRUE 17785
17783: GO 17796
17785: POP
// bc_type := b_barracks ; 30 :
17786: LD_ADDR_OWVAR 42
17790: PUSH
17791: LD_INT 5
17793: ST_TO_ADDR
17794: GO 17892
17796: LD_INT 30
17798: DOUBLE
17799: EQUAL
17800: IFTRUE 17804
17802: GO 17815
17804: POP
// bc_type := b_solar_power ; 31 :
17805: LD_ADDR_OWVAR 42
17809: PUSH
17810: LD_INT 27
17812: ST_TO_ADDR
17813: GO 17892
17815: LD_INT 31
17817: DOUBLE
17818: EQUAL
17819: IFTRUE 17823
17821: GO 17834
17823: POP
// bc_type := b_oil_power ; 32 :
17824: LD_ADDR_OWVAR 42
17828: PUSH
17829: LD_INT 26
17831: ST_TO_ADDR
17832: GO 17892
17834: LD_INT 32
17836: DOUBLE
17837: EQUAL
17838: IFTRUE 17842
17840: GO 17853
17842: POP
// bc_type := b_siberite_power ; 33 :
17843: LD_ADDR_OWVAR 42
17847: PUSH
17848: LD_INT 28
17850: ST_TO_ADDR
17851: GO 17892
17853: LD_INT 33
17855: DOUBLE
17856: EQUAL
17857: IFTRUE 17861
17859: GO 17872
17861: POP
// bc_type := b_oil_mine ; 34 :
17862: LD_ADDR_OWVAR 42
17866: PUSH
17867: LD_INT 29
17869: ST_TO_ADDR
17870: GO 17892
17872: LD_INT 34
17874: DOUBLE
17875: EQUAL
17876: IFTRUE 17880
17878: GO 17891
17880: POP
// bc_type := b_siberite_mine ; end ;
17881: LD_ADDR_OWVAR 42
17885: PUSH
17886: LD_INT 30
17888: ST_TO_ADDR
17889: GO 17892
17891: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
17892: LD_ADDR_VAR 0 8
17896: PUSH
17897: LD_VAR 0 5
17901: PPUSH
17902: LD_VAR 0 6
17906: PPUSH
17907: LD_VAR 0 3
17911: PPUSH
17912: CALL_OW 47
17916: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
17917: LD_OWVAR 42
17921: PUSH
17922: LD_INT 32
17924: PUSH
17925: LD_INT 33
17927: PUSH
17928: EMPTY
17929: LIST
17930: LIST
17931: IN
17932: IFFALSE 17948
// PlaceWeaponTurret ( b , weapon ) ;
17934: LD_VAR 0 8
17938: PPUSH
17939: LD_VAR 0 4
17943: PPUSH
17944: CALL_OW 431
// end ;
17948: LD_VAR 0 7
17952: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
17953: LD_INT 0
17955: PPUSH
17956: PPUSH
17957: PPUSH
17958: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17959: LD_ADDR_VAR 0 4
17963: PUSH
17964: LD_INT 22
17966: PUSH
17967: LD_OWVAR 2
17971: PUSH
17972: EMPTY
17973: LIST
17974: LIST
17975: PUSH
17976: LD_INT 2
17978: PUSH
17979: LD_INT 30
17981: PUSH
17982: LD_INT 0
17984: PUSH
17985: EMPTY
17986: LIST
17987: LIST
17988: PUSH
17989: LD_INT 30
17991: PUSH
17992: LD_INT 1
17994: PUSH
17995: EMPTY
17996: LIST
17997: LIST
17998: PUSH
17999: EMPTY
18000: LIST
18001: LIST
18002: LIST
18003: PUSH
18004: EMPTY
18005: LIST
18006: LIST
18007: PPUSH
18008: CALL_OW 69
18012: ST_TO_ADDR
// if not tmp then
18013: LD_VAR 0 4
18017: NOT
18018: IFFALSE 18022
// exit ;
18020: GO 18081
// for i in tmp do
18022: LD_ADDR_VAR 0 2
18026: PUSH
18027: LD_VAR 0 4
18031: PUSH
18032: FOR_IN
18033: IFFALSE 18079
// for j = 1 to 3 do
18035: LD_ADDR_VAR 0 3
18039: PUSH
18040: DOUBLE
18041: LD_INT 1
18043: DEC
18044: ST_TO_ADDR
18045: LD_INT 3
18047: PUSH
18048: FOR_TO
18049: IFFALSE 18075
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
18051: LD_VAR 0 2
18055: PPUSH
18056: CALL_OW 274
18060: PPUSH
18061: LD_VAR 0 3
18065: PPUSH
18066: LD_INT 99999
18068: PPUSH
18069: CALL_OW 277
18073: GO 18048
18075: POP
18076: POP
18077: GO 18032
18079: POP
18080: POP
// end ;
18081: LD_VAR 0 1
18085: RET
// export function hHackSetLevel10 ; var i , j ; begin
18086: LD_INT 0
18088: PPUSH
18089: PPUSH
18090: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18091: LD_ADDR_VAR 0 2
18095: PUSH
18096: LD_INT 21
18098: PUSH
18099: LD_INT 1
18101: PUSH
18102: EMPTY
18103: LIST
18104: LIST
18105: PPUSH
18106: CALL_OW 69
18110: PUSH
18111: FOR_IN
18112: IFFALSE 18164
// if IsSelected ( i ) then
18114: LD_VAR 0 2
18118: PPUSH
18119: CALL_OW 306
18123: IFFALSE 18162
// begin for j := 1 to 4 do
18125: LD_ADDR_VAR 0 3
18129: PUSH
18130: DOUBLE
18131: LD_INT 1
18133: DEC
18134: ST_TO_ADDR
18135: LD_INT 4
18137: PUSH
18138: FOR_TO
18139: IFFALSE 18160
// SetSkill ( i , j , 10 ) ;
18141: LD_VAR 0 2
18145: PPUSH
18146: LD_VAR 0 3
18150: PPUSH
18151: LD_INT 10
18153: PPUSH
18154: CALL_OW 237
18158: GO 18138
18160: POP
18161: POP
// end ;
18162: GO 18111
18164: POP
18165: POP
// end ;
18166: LD_VAR 0 1
18170: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
18171: LD_INT 0
18173: PPUSH
18174: PPUSH
18175: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
18176: LD_ADDR_VAR 0 2
18180: PUSH
18181: LD_INT 22
18183: PUSH
18184: LD_OWVAR 2
18188: PUSH
18189: EMPTY
18190: LIST
18191: LIST
18192: PUSH
18193: LD_INT 21
18195: PUSH
18196: LD_INT 1
18198: PUSH
18199: EMPTY
18200: LIST
18201: LIST
18202: PUSH
18203: EMPTY
18204: LIST
18205: LIST
18206: PPUSH
18207: CALL_OW 69
18211: PUSH
18212: FOR_IN
18213: IFFALSE 18254
// begin for j := 1 to 4 do
18215: LD_ADDR_VAR 0 3
18219: PUSH
18220: DOUBLE
18221: LD_INT 1
18223: DEC
18224: ST_TO_ADDR
18225: LD_INT 4
18227: PUSH
18228: FOR_TO
18229: IFFALSE 18250
// SetSkill ( i , j , 10 ) ;
18231: LD_VAR 0 2
18235: PPUSH
18236: LD_VAR 0 3
18240: PPUSH
18241: LD_INT 10
18243: PPUSH
18244: CALL_OW 237
18248: GO 18228
18250: POP
18251: POP
// end ;
18252: GO 18212
18254: POP
18255: POP
// end ;
18256: LD_VAR 0 1
18260: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
18261: LD_INT 0
18263: PPUSH
// uc_side := your_side ;
18264: LD_ADDR_OWVAR 20
18268: PUSH
18269: LD_OWVAR 2
18273: ST_TO_ADDR
// uc_nation := nation ;
18274: LD_ADDR_OWVAR 21
18278: PUSH
18279: LD_VAR 0 1
18283: ST_TO_ADDR
// InitHc ;
18284: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
18288: LD_INT 0
18290: PPUSH
18291: LD_VAR 0 2
18295: PPUSH
18296: LD_VAR 0 3
18300: PPUSH
18301: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
18305: LD_VAR 0 4
18309: PPUSH
18310: LD_VAR 0 5
18314: PPUSH
18315: CALL_OW 428
18319: PUSH
18320: LD_INT 0
18322: EQUAL
18323: IFFALSE 18347
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
18325: CALL_OW 44
18329: PPUSH
18330: LD_VAR 0 4
18334: PPUSH
18335: LD_VAR 0 5
18339: PPUSH
18340: LD_INT 1
18342: PPUSH
18343: CALL_OW 48
// end ;
18347: LD_VAR 0 6
18351: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
18352: LD_INT 0
18354: PPUSH
18355: PPUSH
// uc_side := your_side ;
18356: LD_ADDR_OWVAR 20
18360: PUSH
18361: LD_OWVAR 2
18365: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
18366: LD_VAR 0 1
18370: PUSH
18371: LD_INT 1
18373: PUSH
18374: LD_INT 2
18376: PUSH
18377: LD_INT 3
18379: PUSH
18380: LD_INT 4
18382: PUSH
18383: LD_INT 5
18385: PUSH
18386: EMPTY
18387: LIST
18388: LIST
18389: LIST
18390: LIST
18391: LIST
18392: IN
18393: IFFALSE 18405
// uc_nation := nation_american else
18395: LD_ADDR_OWVAR 21
18399: PUSH
18400: LD_INT 1
18402: ST_TO_ADDR
18403: GO 18448
// if chassis in [ 11 , 12 , 13 , 14 ] then
18405: LD_VAR 0 1
18409: PUSH
18410: LD_INT 11
18412: PUSH
18413: LD_INT 12
18415: PUSH
18416: LD_INT 13
18418: PUSH
18419: LD_INT 14
18421: PUSH
18422: EMPTY
18423: LIST
18424: LIST
18425: LIST
18426: LIST
18427: IN
18428: IFFALSE 18440
// uc_nation := nation_arabian else
18430: LD_ADDR_OWVAR 21
18434: PUSH
18435: LD_INT 2
18437: ST_TO_ADDR
18438: GO 18448
// uc_nation := nation_russian ;
18440: LD_ADDR_OWVAR 21
18444: PUSH
18445: LD_INT 3
18447: ST_TO_ADDR
// vc_chassis := chassis ;
18448: LD_ADDR_OWVAR 37
18452: PUSH
18453: LD_VAR 0 1
18457: ST_TO_ADDR
// vc_engine := engine ;
18458: LD_ADDR_OWVAR 39
18462: PUSH
18463: LD_VAR 0 2
18467: ST_TO_ADDR
// vc_control := control ;
18468: LD_ADDR_OWVAR 38
18472: PUSH
18473: LD_VAR 0 3
18477: ST_TO_ADDR
// vc_weapon := weapon ;
18478: LD_ADDR_OWVAR 40
18482: PUSH
18483: LD_VAR 0 4
18487: ST_TO_ADDR
// un := CreateVehicle ;
18488: LD_ADDR_VAR 0 8
18492: PUSH
18493: CALL_OW 45
18497: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
18498: LD_VAR 0 8
18502: PPUSH
18503: LD_INT 0
18505: PPUSH
18506: LD_INT 5
18508: PPUSH
18509: CALL_OW 12
18513: PPUSH
18514: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
18518: LD_VAR 0 8
18522: PPUSH
18523: LD_VAR 0 5
18527: PPUSH
18528: LD_VAR 0 6
18532: PPUSH
18533: LD_INT 1
18535: PPUSH
18536: CALL_OW 48
// end ;
18540: LD_VAR 0 7
18544: RET
// export hInvincible ; every 1 do
18545: GO 18547
18547: DISABLE
// hInvincible := [ ] ;
18548: LD_ADDR_EXP 78
18552: PUSH
18553: EMPTY
18554: ST_TO_ADDR
18555: END
// every 10 do var i ;
18556: GO 18558
18558: DISABLE
18559: LD_INT 0
18561: PPUSH
// begin enable ;
18562: ENABLE
// if not hInvincible then
18563: LD_EXP 78
18567: NOT
18568: IFFALSE 18572
// exit ;
18570: GO 18616
// for i in hInvincible do
18572: LD_ADDR_VAR 0 1
18576: PUSH
18577: LD_EXP 78
18581: PUSH
18582: FOR_IN
18583: IFFALSE 18614
// if GetLives ( i ) < 1000 then
18585: LD_VAR 0 1
18589: PPUSH
18590: CALL_OW 256
18594: PUSH
18595: LD_INT 1000
18597: LESS
18598: IFFALSE 18612
// SetLives ( i , 1000 ) ;
18600: LD_VAR 0 1
18604: PPUSH
18605: LD_INT 1000
18607: PPUSH
18608: CALL_OW 234
18612: GO 18582
18614: POP
18615: POP
// end ;
18616: PPOPN 1
18618: END
// export function hHackInvincible ; var i ; begin
18619: LD_INT 0
18621: PPUSH
18622: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
18623: LD_ADDR_VAR 0 2
18627: PUSH
18628: LD_INT 2
18630: PUSH
18631: LD_INT 21
18633: PUSH
18634: LD_INT 1
18636: PUSH
18637: EMPTY
18638: LIST
18639: LIST
18640: PUSH
18641: LD_INT 21
18643: PUSH
18644: LD_INT 2
18646: PUSH
18647: EMPTY
18648: LIST
18649: LIST
18650: PUSH
18651: EMPTY
18652: LIST
18653: LIST
18654: LIST
18655: PPUSH
18656: CALL_OW 69
18660: PUSH
18661: FOR_IN
18662: IFFALSE 18723
// if IsSelected ( i ) then
18664: LD_VAR 0 2
18668: PPUSH
18669: CALL_OW 306
18673: IFFALSE 18721
// begin if i in hInvincible then
18675: LD_VAR 0 2
18679: PUSH
18680: LD_EXP 78
18684: IN
18685: IFFALSE 18705
// hInvincible := hInvincible diff i else
18687: LD_ADDR_EXP 78
18691: PUSH
18692: LD_EXP 78
18696: PUSH
18697: LD_VAR 0 2
18701: DIFF
18702: ST_TO_ADDR
18703: GO 18721
// hInvincible := hInvincible union i ;
18705: LD_ADDR_EXP 78
18709: PUSH
18710: LD_EXP 78
18714: PUSH
18715: LD_VAR 0 2
18719: UNION
18720: ST_TO_ADDR
// end ;
18721: GO 18661
18723: POP
18724: POP
// end ;
18725: LD_VAR 0 1
18729: RET
// export function hHackInvisible ; var i , j ; begin
18730: LD_INT 0
18732: PPUSH
18733: PPUSH
18734: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18735: LD_ADDR_VAR 0 2
18739: PUSH
18740: LD_INT 21
18742: PUSH
18743: LD_INT 1
18745: PUSH
18746: EMPTY
18747: LIST
18748: LIST
18749: PPUSH
18750: CALL_OW 69
18754: PUSH
18755: FOR_IN
18756: IFFALSE 18780
// if IsSelected ( i ) then
18758: LD_VAR 0 2
18762: PPUSH
18763: CALL_OW 306
18767: IFFALSE 18778
// ComForceInvisible ( i ) ;
18769: LD_VAR 0 2
18773: PPUSH
18774: CALL_OW 496
18778: GO 18755
18780: POP
18781: POP
// end ;
18782: LD_VAR 0 1
18786: RET
// export function hHackChangeYourSide ; begin
18787: LD_INT 0
18789: PPUSH
// if your_side = 8 then
18790: LD_OWVAR 2
18794: PUSH
18795: LD_INT 8
18797: EQUAL
18798: IFFALSE 18810
// your_side := 0 else
18800: LD_ADDR_OWVAR 2
18804: PUSH
18805: LD_INT 0
18807: ST_TO_ADDR
18808: GO 18824
// your_side := your_side + 1 ;
18810: LD_ADDR_OWVAR 2
18814: PUSH
18815: LD_OWVAR 2
18819: PUSH
18820: LD_INT 1
18822: PLUS
18823: ST_TO_ADDR
// end ;
18824: LD_VAR 0 1
18828: RET
// export function hHackChangeUnitSide ; var i , j ; begin
18829: LD_INT 0
18831: PPUSH
18832: PPUSH
18833: PPUSH
// for i in all_units do
18834: LD_ADDR_VAR 0 2
18838: PUSH
18839: LD_OWVAR 3
18843: PUSH
18844: FOR_IN
18845: IFFALSE 18923
// if IsSelected ( i ) then
18847: LD_VAR 0 2
18851: PPUSH
18852: CALL_OW 306
18856: IFFALSE 18921
// begin j := GetSide ( i ) ;
18858: LD_ADDR_VAR 0 3
18862: PUSH
18863: LD_VAR 0 2
18867: PPUSH
18868: CALL_OW 255
18872: ST_TO_ADDR
// if j = 8 then
18873: LD_VAR 0 3
18877: PUSH
18878: LD_INT 8
18880: EQUAL
18881: IFFALSE 18893
// j := 0 else
18883: LD_ADDR_VAR 0 3
18887: PUSH
18888: LD_INT 0
18890: ST_TO_ADDR
18891: GO 18907
// j := j + 1 ;
18893: LD_ADDR_VAR 0 3
18897: PUSH
18898: LD_VAR 0 3
18902: PUSH
18903: LD_INT 1
18905: PLUS
18906: ST_TO_ADDR
// SetSide ( i , j ) ;
18907: LD_VAR 0 2
18911: PPUSH
18912: LD_VAR 0 3
18916: PPUSH
18917: CALL_OW 235
// end ;
18921: GO 18844
18923: POP
18924: POP
// end ;
18925: LD_VAR 0 1
18929: RET
// export function hHackFog ; begin
18930: LD_INT 0
18932: PPUSH
// FogOff ( true ) ;
18933: LD_INT 1
18935: PPUSH
18936: CALL_OW 344
// end ;
18940: LD_VAR 0 1
18944: RET
// export function hHackTeleport ( unit , x , y ) ; begin
18945: LD_INT 0
18947: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
18948: LD_VAR 0 1
18952: PPUSH
18953: LD_VAR 0 2
18957: PPUSH
18958: LD_VAR 0 3
18962: PPUSH
18963: LD_INT 1
18965: PPUSH
18966: LD_INT 1
18968: PPUSH
18969: CALL_OW 483
// CenterOnXY ( x , y ) ;
18973: LD_VAR 0 2
18977: PPUSH
18978: LD_VAR 0 3
18982: PPUSH
18983: CALL_OW 84
// end ; end_of_file
18987: LD_VAR 0 4
18991: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
18992: LD_INT 0
18994: PPUSH
18995: PPUSH
18996: PPUSH
18997: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
18998: LD_VAR 0 1
19002: PPUSH
19003: CALL_OW 264
19007: PUSH
19008: LD_EXP 93
19012: EQUAL
19013: IFFALSE 19085
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
19015: LD_INT 68
19017: PPUSH
19018: LD_VAR 0 1
19022: PPUSH
19023: CALL_OW 255
19027: PPUSH
19028: CALL_OW 321
19032: PUSH
19033: LD_INT 2
19035: EQUAL
19036: IFFALSE 19048
// eff := 70 else
19038: LD_ADDR_VAR 0 4
19042: PUSH
19043: LD_INT 70
19045: ST_TO_ADDR
19046: GO 19056
// eff := 30 ;
19048: LD_ADDR_VAR 0 4
19052: PUSH
19053: LD_INT 30
19055: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
19056: LD_VAR 0 1
19060: PPUSH
19061: CALL_OW 250
19065: PPUSH
19066: LD_VAR 0 1
19070: PPUSH
19071: CALL_OW 251
19075: PPUSH
19076: LD_VAR 0 4
19080: PPUSH
19081: CALL_OW 495
// end ; end ;
19085: LD_VAR 0 2
19089: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
19090: LD_INT 0
19092: PPUSH
// end ;
19093: LD_VAR 0 4
19097: RET
// export function SOS_Command ( cmd ) ; begin
19098: LD_INT 0
19100: PPUSH
// end ;
19101: LD_VAR 0 2
19105: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
19106: LD_INT 0
19108: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
19109: LD_VAR 0 1
19113: PUSH
19114: LD_INT 250
19116: EQUAL
19117: PUSH
19118: LD_VAR 0 2
19122: PPUSH
19123: CALL_OW 264
19127: PUSH
19128: LD_EXP 96
19132: EQUAL
19133: AND
19134: IFFALSE 19155
// MinerPlaceMine ( unit , x , y ) ;
19136: LD_VAR 0 2
19140: PPUSH
19141: LD_VAR 0 4
19145: PPUSH
19146: LD_VAR 0 5
19150: PPUSH
19151: CALL 21496 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
19155: LD_VAR 0 1
19159: PUSH
19160: LD_INT 251
19162: EQUAL
19163: PUSH
19164: LD_VAR 0 2
19168: PPUSH
19169: CALL_OW 264
19173: PUSH
19174: LD_EXP 96
19178: EQUAL
19179: AND
19180: IFFALSE 19201
// MinerDetonateMine ( unit , x , y ) ;
19182: LD_VAR 0 2
19186: PPUSH
19187: LD_VAR 0 4
19191: PPUSH
19192: LD_VAR 0 5
19196: PPUSH
19197: CALL 21773 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
19201: LD_VAR 0 1
19205: PUSH
19206: LD_INT 252
19208: EQUAL
19209: PUSH
19210: LD_VAR 0 2
19214: PPUSH
19215: CALL_OW 264
19219: PUSH
19220: LD_EXP 96
19224: EQUAL
19225: AND
19226: IFFALSE 19247
// MinerCreateMinefield ( unit , x , y ) ;
19228: LD_VAR 0 2
19232: PPUSH
19233: LD_VAR 0 4
19237: PPUSH
19238: LD_VAR 0 5
19242: PPUSH
19243: CALL 22190 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
19247: LD_VAR 0 1
19251: PUSH
19252: LD_INT 253
19254: EQUAL
19255: PUSH
19256: LD_VAR 0 2
19260: PPUSH
19261: CALL_OW 257
19265: PUSH
19266: LD_INT 5
19268: EQUAL
19269: AND
19270: IFFALSE 19291
// ComBinocular ( unit , x , y ) ;
19272: LD_VAR 0 2
19276: PPUSH
19277: LD_VAR 0 4
19281: PPUSH
19282: LD_VAR 0 5
19286: PPUSH
19287: CALL 22561 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
19291: LD_VAR 0 1
19295: PUSH
19296: LD_INT 254
19298: EQUAL
19299: PUSH
19300: LD_VAR 0 2
19304: PPUSH
19305: CALL_OW 264
19309: PUSH
19310: LD_EXP 91
19314: EQUAL
19315: AND
19316: PUSH
19317: LD_VAR 0 3
19321: PPUSH
19322: CALL_OW 263
19326: PUSH
19327: LD_INT 3
19329: EQUAL
19330: AND
19331: IFFALSE 19347
// HackDestroyVehicle ( unit , selectedUnit ) ;
19333: LD_VAR 0 2
19337: PPUSH
19338: LD_VAR 0 3
19342: PPUSH
19343: CALL 20856 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
19347: LD_VAR 0 1
19351: PUSH
19352: LD_INT 255
19354: EQUAL
19355: PUSH
19356: LD_VAR 0 2
19360: PPUSH
19361: CALL_OW 264
19365: PUSH
19366: LD_INT 14
19368: PUSH
19369: LD_INT 53
19371: PUSH
19372: EMPTY
19373: LIST
19374: LIST
19375: IN
19376: AND
19377: PUSH
19378: LD_VAR 0 4
19382: PPUSH
19383: LD_VAR 0 5
19387: PPUSH
19388: CALL_OW 488
19392: AND
19393: IFFALSE 19417
// CutTreeXYR ( unit , x , y , 12 ) ;
19395: LD_VAR 0 2
19399: PPUSH
19400: LD_VAR 0 4
19404: PPUSH
19405: LD_VAR 0 5
19409: PPUSH
19410: LD_INT 12
19412: PPUSH
19413: CALL 19422 0 4
// end ;
19417: LD_VAR 0 6
19421: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
19422: LD_INT 0
19424: PPUSH
19425: PPUSH
19426: PPUSH
19427: PPUSH
19428: PPUSH
19429: PPUSH
19430: PPUSH
19431: PPUSH
19432: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
19433: LD_VAR 0 1
19437: NOT
19438: PUSH
19439: LD_VAR 0 2
19443: PPUSH
19444: LD_VAR 0 3
19448: PPUSH
19449: CALL_OW 488
19453: NOT
19454: OR
19455: PUSH
19456: LD_VAR 0 4
19460: NOT
19461: OR
19462: IFFALSE 19466
// exit ;
19464: GO 19806
// list := [ ] ;
19466: LD_ADDR_VAR 0 13
19470: PUSH
19471: EMPTY
19472: ST_TO_ADDR
// if x - r < 0 then
19473: LD_VAR 0 2
19477: PUSH
19478: LD_VAR 0 4
19482: MINUS
19483: PUSH
19484: LD_INT 0
19486: LESS
19487: IFFALSE 19499
// min_x := 0 else
19489: LD_ADDR_VAR 0 7
19493: PUSH
19494: LD_INT 0
19496: ST_TO_ADDR
19497: GO 19515
// min_x := x - r ;
19499: LD_ADDR_VAR 0 7
19503: PUSH
19504: LD_VAR 0 2
19508: PUSH
19509: LD_VAR 0 4
19513: MINUS
19514: ST_TO_ADDR
// if y - r < 0 then
19515: LD_VAR 0 3
19519: PUSH
19520: LD_VAR 0 4
19524: MINUS
19525: PUSH
19526: LD_INT 0
19528: LESS
19529: IFFALSE 19541
// min_y := 0 else
19531: LD_ADDR_VAR 0 8
19535: PUSH
19536: LD_INT 0
19538: ST_TO_ADDR
19539: GO 19557
// min_y := y - r ;
19541: LD_ADDR_VAR 0 8
19545: PUSH
19546: LD_VAR 0 3
19550: PUSH
19551: LD_VAR 0 4
19555: MINUS
19556: ST_TO_ADDR
// max_x := x + r ;
19557: LD_ADDR_VAR 0 9
19561: PUSH
19562: LD_VAR 0 2
19566: PUSH
19567: LD_VAR 0 4
19571: PLUS
19572: ST_TO_ADDR
// max_y := y + r ;
19573: LD_ADDR_VAR 0 10
19577: PUSH
19578: LD_VAR 0 3
19582: PUSH
19583: LD_VAR 0 4
19587: PLUS
19588: ST_TO_ADDR
// for _x = min_x to max_x do
19589: LD_ADDR_VAR 0 11
19593: PUSH
19594: DOUBLE
19595: LD_VAR 0 7
19599: DEC
19600: ST_TO_ADDR
19601: LD_VAR 0 9
19605: PUSH
19606: FOR_TO
19607: IFFALSE 19724
// for _y = min_y to max_y do
19609: LD_ADDR_VAR 0 12
19613: PUSH
19614: DOUBLE
19615: LD_VAR 0 8
19619: DEC
19620: ST_TO_ADDR
19621: LD_VAR 0 10
19625: PUSH
19626: FOR_TO
19627: IFFALSE 19720
// begin if not ValidHex ( _x , _y ) then
19629: LD_VAR 0 11
19633: PPUSH
19634: LD_VAR 0 12
19638: PPUSH
19639: CALL_OW 488
19643: NOT
19644: IFFALSE 19648
// continue ;
19646: GO 19626
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
19648: LD_VAR 0 11
19652: PPUSH
19653: LD_VAR 0 12
19657: PPUSH
19658: CALL_OW 351
19662: PUSH
19663: LD_VAR 0 11
19667: PPUSH
19668: LD_VAR 0 12
19672: PPUSH
19673: CALL_OW 554
19677: AND
19678: IFFALSE 19718
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
19680: LD_ADDR_VAR 0 13
19684: PUSH
19685: LD_VAR 0 13
19689: PPUSH
19690: LD_VAR 0 13
19694: PUSH
19695: LD_INT 1
19697: PLUS
19698: PPUSH
19699: LD_VAR 0 11
19703: PUSH
19704: LD_VAR 0 12
19708: PUSH
19709: EMPTY
19710: LIST
19711: LIST
19712: PPUSH
19713: CALL_OW 2
19717: ST_TO_ADDR
// end ;
19718: GO 19626
19720: POP
19721: POP
19722: GO 19606
19724: POP
19725: POP
// if not list then
19726: LD_VAR 0 13
19730: NOT
19731: IFFALSE 19735
// exit ;
19733: GO 19806
// for i in list do
19735: LD_ADDR_VAR 0 6
19739: PUSH
19740: LD_VAR 0 13
19744: PUSH
19745: FOR_IN
19746: IFFALSE 19804
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
19748: LD_VAR 0 1
19752: PPUSH
19753: LD_STRING M
19755: PUSH
19756: LD_VAR 0 6
19760: PUSH
19761: LD_INT 1
19763: ARRAY
19764: PUSH
19765: LD_VAR 0 6
19769: PUSH
19770: LD_INT 2
19772: ARRAY
19773: PUSH
19774: LD_INT 0
19776: PUSH
19777: LD_INT 0
19779: PUSH
19780: LD_INT 0
19782: PUSH
19783: LD_INT 0
19785: PUSH
19786: EMPTY
19787: LIST
19788: LIST
19789: LIST
19790: LIST
19791: LIST
19792: LIST
19793: LIST
19794: PUSH
19795: EMPTY
19796: LIST
19797: PPUSH
19798: CALL_OW 447
19802: GO 19745
19804: POP
19805: POP
// end ;
19806: LD_VAR 0 5
19810: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
19811: LD_EXP 79
19815: NOT
19816: IFFALSE 19866
19818: GO 19820
19820: DISABLE
// begin initHack := true ;
19821: LD_ADDR_EXP 79
19825: PUSH
19826: LD_INT 1
19828: ST_TO_ADDR
// hackTanks := [ ] ;
19829: LD_ADDR_EXP 80
19833: PUSH
19834: EMPTY
19835: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
19836: LD_ADDR_EXP 81
19840: PUSH
19841: EMPTY
19842: ST_TO_ADDR
// hackLimit := 3 ;
19843: LD_ADDR_EXP 82
19847: PUSH
19848: LD_INT 3
19850: ST_TO_ADDR
// hackDist := 12 ;
19851: LD_ADDR_EXP 83
19855: PUSH
19856: LD_INT 12
19858: ST_TO_ADDR
// hackCounter := [ ] ;
19859: LD_ADDR_EXP 84
19863: PUSH
19864: EMPTY
19865: ST_TO_ADDR
// end ;
19866: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
19867: LD_EXP 79
19871: PUSH
19872: LD_INT 34
19874: PUSH
19875: LD_EXP 91
19879: PUSH
19880: EMPTY
19881: LIST
19882: LIST
19883: PPUSH
19884: CALL_OW 69
19888: AND
19889: IFFALSE 20144
19891: GO 19893
19893: DISABLE
19894: LD_INT 0
19896: PPUSH
19897: PPUSH
// begin enable ;
19898: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
19899: LD_ADDR_VAR 0 1
19903: PUSH
19904: LD_INT 34
19906: PUSH
19907: LD_EXP 91
19911: PUSH
19912: EMPTY
19913: LIST
19914: LIST
19915: PPUSH
19916: CALL_OW 69
19920: PUSH
19921: FOR_IN
19922: IFFALSE 20142
// begin if not i in hackTanks then
19924: LD_VAR 0 1
19928: PUSH
19929: LD_EXP 80
19933: IN
19934: NOT
19935: IFFALSE 20018
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
19937: LD_ADDR_EXP 80
19941: PUSH
19942: LD_EXP 80
19946: PPUSH
19947: LD_EXP 80
19951: PUSH
19952: LD_INT 1
19954: PLUS
19955: PPUSH
19956: LD_VAR 0 1
19960: PPUSH
19961: CALL_OW 1
19965: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
19966: LD_ADDR_EXP 81
19970: PUSH
19971: LD_EXP 81
19975: PPUSH
19976: LD_EXP 81
19980: PUSH
19981: LD_INT 1
19983: PLUS
19984: PPUSH
19985: EMPTY
19986: PPUSH
19987: CALL_OW 1
19991: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
19992: LD_ADDR_EXP 84
19996: PUSH
19997: LD_EXP 84
20001: PPUSH
20002: LD_EXP 84
20006: PUSH
20007: LD_INT 1
20009: PLUS
20010: PPUSH
20011: EMPTY
20012: PPUSH
20013: CALL_OW 1
20017: ST_TO_ADDR
// end ; if not IsOk ( i ) then
20018: LD_VAR 0 1
20022: PPUSH
20023: CALL_OW 302
20027: NOT
20028: IFFALSE 20041
// begin HackUnlinkAll ( i ) ;
20030: LD_VAR 0 1
20034: PPUSH
20035: CALL 20147 0 1
// continue ;
20039: GO 19921
// end ; HackCheckCapturedStatus ( i ) ;
20041: LD_VAR 0 1
20045: PPUSH
20046: CALL 20590 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
20050: LD_ADDR_VAR 0 2
20054: PUSH
20055: LD_INT 81
20057: PUSH
20058: LD_VAR 0 1
20062: PPUSH
20063: CALL_OW 255
20067: PUSH
20068: EMPTY
20069: LIST
20070: LIST
20071: PUSH
20072: LD_INT 33
20074: PUSH
20075: LD_INT 3
20077: PUSH
20078: EMPTY
20079: LIST
20080: LIST
20081: PUSH
20082: LD_INT 91
20084: PUSH
20085: LD_VAR 0 1
20089: PUSH
20090: LD_EXP 83
20094: PUSH
20095: EMPTY
20096: LIST
20097: LIST
20098: LIST
20099: PUSH
20100: LD_INT 50
20102: PUSH
20103: EMPTY
20104: LIST
20105: PUSH
20106: EMPTY
20107: LIST
20108: LIST
20109: LIST
20110: LIST
20111: PPUSH
20112: CALL_OW 69
20116: ST_TO_ADDR
// if not tmp then
20117: LD_VAR 0 2
20121: NOT
20122: IFFALSE 20126
// continue ;
20124: GO 19921
// HackLink ( i , tmp ) ;
20126: LD_VAR 0 1
20130: PPUSH
20131: LD_VAR 0 2
20135: PPUSH
20136: CALL 20283 0 2
// end ;
20140: GO 19921
20142: POP
20143: POP
// end ;
20144: PPOPN 2
20146: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
20147: LD_INT 0
20149: PPUSH
20150: PPUSH
20151: PPUSH
// if not hack in hackTanks then
20152: LD_VAR 0 1
20156: PUSH
20157: LD_EXP 80
20161: IN
20162: NOT
20163: IFFALSE 20167
// exit ;
20165: GO 20278
// index := GetElementIndex ( hackTanks , hack ) ;
20167: LD_ADDR_VAR 0 4
20171: PUSH
20172: LD_EXP 80
20176: PPUSH
20177: LD_VAR 0 1
20181: PPUSH
20182: CALL 27856 0 2
20186: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
20187: LD_EXP 81
20191: PUSH
20192: LD_VAR 0 4
20196: ARRAY
20197: IFFALSE 20278
// begin for i in hackTanksCaptured [ index ] do
20199: LD_ADDR_VAR 0 3
20203: PUSH
20204: LD_EXP 81
20208: PUSH
20209: LD_VAR 0 4
20213: ARRAY
20214: PUSH
20215: FOR_IN
20216: IFFALSE 20242
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
20218: LD_VAR 0 3
20222: PUSH
20223: LD_INT 1
20225: ARRAY
20226: PPUSH
20227: LD_VAR 0 3
20231: PUSH
20232: LD_INT 2
20234: ARRAY
20235: PPUSH
20236: CALL_OW 235
20240: GO 20215
20242: POP
20243: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
20244: LD_ADDR_EXP 81
20248: PUSH
20249: LD_EXP 81
20253: PPUSH
20254: LD_VAR 0 4
20258: PPUSH
20259: EMPTY
20260: PPUSH
20261: CALL_OW 1
20265: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
20266: LD_VAR 0 1
20270: PPUSH
20271: LD_INT 0
20273: PPUSH
20274: CALL_OW 505
// end ; end ;
20278: LD_VAR 0 2
20282: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
20283: LD_INT 0
20285: PPUSH
20286: PPUSH
20287: PPUSH
// if not hack in hackTanks or not vehicles then
20288: LD_VAR 0 1
20292: PUSH
20293: LD_EXP 80
20297: IN
20298: NOT
20299: PUSH
20300: LD_VAR 0 2
20304: NOT
20305: OR
20306: IFFALSE 20310
// exit ;
20308: GO 20585
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
20310: LD_ADDR_VAR 0 2
20314: PUSH
20315: LD_VAR 0 1
20319: PPUSH
20320: LD_VAR 0 2
20324: PPUSH
20325: LD_INT 1
20327: PPUSH
20328: LD_INT 1
20330: PPUSH
20331: CALL 28506 0 4
20335: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
20336: LD_ADDR_VAR 0 5
20340: PUSH
20341: LD_EXP 80
20345: PPUSH
20346: LD_VAR 0 1
20350: PPUSH
20351: CALL 27856 0 2
20355: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
20356: LD_EXP 81
20360: PUSH
20361: LD_VAR 0 5
20365: ARRAY
20366: PUSH
20367: LD_EXP 82
20371: LESS
20372: IFFALSE 20561
// begin for i := 1 to vehicles do
20374: LD_ADDR_VAR 0 4
20378: PUSH
20379: DOUBLE
20380: LD_INT 1
20382: DEC
20383: ST_TO_ADDR
20384: LD_VAR 0 2
20388: PUSH
20389: FOR_TO
20390: IFFALSE 20559
// begin if hackTanksCaptured [ index ] = hackLimit then
20392: LD_EXP 81
20396: PUSH
20397: LD_VAR 0 5
20401: ARRAY
20402: PUSH
20403: LD_EXP 82
20407: EQUAL
20408: IFFALSE 20412
// break ;
20410: GO 20559
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
20412: LD_ADDR_EXP 84
20416: PUSH
20417: LD_EXP 84
20421: PPUSH
20422: LD_VAR 0 5
20426: PPUSH
20427: LD_EXP 84
20431: PUSH
20432: LD_VAR 0 5
20436: ARRAY
20437: PUSH
20438: LD_INT 1
20440: PLUS
20441: PPUSH
20442: CALL_OW 1
20446: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
20447: LD_ADDR_EXP 81
20451: PUSH
20452: LD_EXP 81
20456: PPUSH
20457: LD_VAR 0 5
20461: PUSH
20462: LD_EXP 81
20466: PUSH
20467: LD_VAR 0 5
20471: ARRAY
20472: PUSH
20473: LD_INT 1
20475: PLUS
20476: PUSH
20477: EMPTY
20478: LIST
20479: LIST
20480: PPUSH
20481: LD_VAR 0 2
20485: PUSH
20486: LD_VAR 0 4
20490: ARRAY
20491: PUSH
20492: LD_VAR 0 2
20496: PUSH
20497: LD_VAR 0 4
20501: ARRAY
20502: PPUSH
20503: CALL_OW 255
20507: PUSH
20508: EMPTY
20509: LIST
20510: LIST
20511: PPUSH
20512: CALL 28071 0 3
20516: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
20517: LD_VAR 0 2
20521: PUSH
20522: LD_VAR 0 4
20526: ARRAY
20527: PPUSH
20528: LD_VAR 0 1
20532: PPUSH
20533: CALL_OW 255
20537: PPUSH
20538: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
20542: LD_VAR 0 2
20546: PUSH
20547: LD_VAR 0 4
20551: ARRAY
20552: PPUSH
20553: CALL_OW 141
// end ;
20557: GO 20389
20559: POP
20560: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
20561: LD_VAR 0 1
20565: PPUSH
20566: LD_EXP 81
20570: PUSH
20571: LD_VAR 0 5
20575: ARRAY
20576: PUSH
20577: LD_INT 0
20579: PLUS
20580: PPUSH
20581: CALL_OW 505
// end ;
20585: LD_VAR 0 3
20589: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
20590: LD_INT 0
20592: PPUSH
20593: PPUSH
20594: PPUSH
20595: PPUSH
// if not hack in hackTanks then
20596: LD_VAR 0 1
20600: PUSH
20601: LD_EXP 80
20605: IN
20606: NOT
20607: IFFALSE 20611
// exit ;
20609: GO 20851
// index := GetElementIndex ( hackTanks , hack ) ;
20611: LD_ADDR_VAR 0 4
20615: PUSH
20616: LD_EXP 80
20620: PPUSH
20621: LD_VAR 0 1
20625: PPUSH
20626: CALL 27856 0 2
20630: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
20631: LD_ADDR_VAR 0 3
20635: PUSH
20636: DOUBLE
20637: LD_EXP 81
20641: PUSH
20642: LD_VAR 0 4
20646: ARRAY
20647: INC
20648: ST_TO_ADDR
20649: LD_INT 1
20651: PUSH
20652: FOR_DOWNTO
20653: IFFALSE 20825
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
20655: LD_ADDR_VAR 0 5
20659: PUSH
20660: LD_EXP 81
20664: PUSH
20665: LD_VAR 0 4
20669: ARRAY
20670: PUSH
20671: LD_VAR 0 3
20675: ARRAY
20676: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
20677: LD_VAR 0 5
20681: PUSH
20682: LD_INT 1
20684: ARRAY
20685: PPUSH
20686: CALL_OW 302
20690: NOT
20691: PUSH
20692: LD_VAR 0 5
20696: PUSH
20697: LD_INT 1
20699: ARRAY
20700: PPUSH
20701: CALL_OW 255
20705: PUSH
20706: LD_VAR 0 1
20710: PPUSH
20711: CALL_OW 255
20715: NONEQUAL
20716: OR
20717: IFFALSE 20823
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
20719: LD_VAR 0 5
20723: PUSH
20724: LD_INT 1
20726: ARRAY
20727: PPUSH
20728: CALL_OW 305
20732: PUSH
20733: LD_VAR 0 5
20737: PUSH
20738: LD_INT 1
20740: ARRAY
20741: PPUSH
20742: CALL_OW 255
20746: PUSH
20747: LD_VAR 0 1
20751: PPUSH
20752: CALL_OW 255
20756: EQUAL
20757: AND
20758: IFFALSE 20782
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
20760: LD_VAR 0 5
20764: PUSH
20765: LD_INT 1
20767: ARRAY
20768: PPUSH
20769: LD_VAR 0 5
20773: PUSH
20774: LD_INT 2
20776: ARRAY
20777: PPUSH
20778: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
20782: LD_ADDR_EXP 81
20786: PUSH
20787: LD_EXP 81
20791: PPUSH
20792: LD_VAR 0 4
20796: PPUSH
20797: LD_EXP 81
20801: PUSH
20802: LD_VAR 0 4
20806: ARRAY
20807: PPUSH
20808: LD_VAR 0 3
20812: PPUSH
20813: CALL_OW 3
20817: PPUSH
20818: CALL_OW 1
20822: ST_TO_ADDR
// end ; end ;
20823: GO 20652
20825: POP
20826: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
20827: LD_VAR 0 1
20831: PPUSH
20832: LD_EXP 81
20836: PUSH
20837: LD_VAR 0 4
20841: ARRAY
20842: PUSH
20843: LD_INT 0
20845: PLUS
20846: PPUSH
20847: CALL_OW 505
// end ;
20851: LD_VAR 0 2
20855: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
20856: LD_INT 0
20858: PPUSH
20859: PPUSH
20860: PPUSH
20861: PPUSH
// if not hack in hackTanks then
20862: LD_VAR 0 1
20866: PUSH
20867: LD_EXP 80
20871: IN
20872: NOT
20873: IFFALSE 20877
// exit ;
20875: GO 20962
// index := GetElementIndex ( hackTanks , hack ) ;
20877: LD_ADDR_VAR 0 5
20881: PUSH
20882: LD_EXP 80
20886: PPUSH
20887: LD_VAR 0 1
20891: PPUSH
20892: CALL 27856 0 2
20896: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
20897: LD_ADDR_VAR 0 4
20901: PUSH
20902: DOUBLE
20903: LD_INT 1
20905: DEC
20906: ST_TO_ADDR
20907: LD_EXP 81
20911: PUSH
20912: LD_VAR 0 5
20916: ARRAY
20917: PUSH
20918: FOR_TO
20919: IFFALSE 20960
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
20921: LD_EXP 81
20925: PUSH
20926: LD_VAR 0 5
20930: ARRAY
20931: PUSH
20932: LD_VAR 0 4
20936: ARRAY
20937: PUSH
20938: LD_INT 1
20940: ARRAY
20941: PUSH
20942: LD_VAR 0 2
20946: EQUAL
20947: IFFALSE 20958
// KillUnit ( vehicle ) ;
20949: LD_VAR 0 2
20953: PPUSH
20954: CALL_OW 66
20958: GO 20918
20960: POP
20961: POP
// end ;
20962: LD_VAR 0 3
20966: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
20967: LD_EXP 85
20971: NOT
20972: IFFALSE 21007
20974: GO 20976
20976: DISABLE
// begin initMiner := true ;
20977: LD_ADDR_EXP 85
20981: PUSH
20982: LD_INT 1
20984: ST_TO_ADDR
// minersList := [ ] ;
20985: LD_ADDR_EXP 86
20989: PUSH
20990: EMPTY
20991: ST_TO_ADDR
// minerMinesList := [ ] ;
20992: LD_ADDR_EXP 87
20996: PUSH
20997: EMPTY
20998: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
20999: LD_ADDR_EXP 88
21003: PUSH
21004: LD_INT 5
21006: ST_TO_ADDR
// end ;
21007: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
21008: LD_EXP 85
21012: PUSH
21013: LD_INT 34
21015: PUSH
21016: LD_EXP 96
21020: PUSH
21021: EMPTY
21022: LIST
21023: LIST
21024: PPUSH
21025: CALL_OW 69
21029: AND
21030: IFFALSE 21493
21032: GO 21034
21034: DISABLE
21035: LD_INT 0
21037: PPUSH
21038: PPUSH
21039: PPUSH
21040: PPUSH
// begin enable ;
21041: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
21042: LD_ADDR_VAR 0 1
21046: PUSH
21047: LD_INT 34
21049: PUSH
21050: LD_EXP 96
21054: PUSH
21055: EMPTY
21056: LIST
21057: LIST
21058: PPUSH
21059: CALL_OW 69
21063: PUSH
21064: FOR_IN
21065: IFFALSE 21137
// begin if not i in minersList then
21067: LD_VAR 0 1
21071: PUSH
21072: LD_EXP 86
21076: IN
21077: NOT
21078: IFFALSE 21135
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
21080: LD_ADDR_EXP 86
21084: PUSH
21085: LD_EXP 86
21089: PPUSH
21090: LD_EXP 86
21094: PUSH
21095: LD_INT 1
21097: PLUS
21098: PPUSH
21099: LD_VAR 0 1
21103: PPUSH
21104: CALL_OW 1
21108: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
21109: LD_ADDR_EXP 87
21113: PUSH
21114: LD_EXP 87
21118: PPUSH
21119: LD_EXP 87
21123: PUSH
21124: LD_INT 1
21126: PLUS
21127: PPUSH
21128: EMPTY
21129: PPUSH
21130: CALL_OW 1
21134: ST_TO_ADDR
// end end ;
21135: GO 21064
21137: POP
21138: POP
// for i := minerMinesList downto 1 do
21139: LD_ADDR_VAR 0 1
21143: PUSH
21144: DOUBLE
21145: LD_EXP 87
21149: INC
21150: ST_TO_ADDR
21151: LD_INT 1
21153: PUSH
21154: FOR_DOWNTO
21155: IFFALSE 21491
// begin if IsLive ( minersList [ i ] ) then
21157: LD_EXP 86
21161: PUSH
21162: LD_VAR 0 1
21166: ARRAY
21167: PPUSH
21168: CALL_OW 300
21172: IFFALSE 21200
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
21174: LD_EXP 86
21178: PUSH
21179: LD_VAR 0 1
21183: ARRAY
21184: PPUSH
21185: LD_EXP 87
21189: PUSH
21190: LD_VAR 0 1
21194: ARRAY
21195: PPUSH
21196: CALL_OW 505
// if not minerMinesList [ i ] then
21200: LD_EXP 87
21204: PUSH
21205: LD_VAR 0 1
21209: ARRAY
21210: NOT
21211: IFFALSE 21215
// continue ;
21213: GO 21154
// for j := minerMinesList [ i ] downto 1 do
21215: LD_ADDR_VAR 0 2
21219: PUSH
21220: DOUBLE
21221: LD_EXP 87
21225: PUSH
21226: LD_VAR 0 1
21230: ARRAY
21231: INC
21232: ST_TO_ADDR
21233: LD_INT 1
21235: PUSH
21236: FOR_DOWNTO
21237: IFFALSE 21487
// begin side := GetSide ( minersList [ i ] ) ;
21239: LD_ADDR_VAR 0 3
21243: PUSH
21244: LD_EXP 86
21248: PUSH
21249: LD_VAR 0 1
21253: ARRAY
21254: PPUSH
21255: CALL_OW 255
21259: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
21260: LD_ADDR_VAR 0 4
21264: PUSH
21265: LD_EXP 87
21269: PUSH
21270: LD_VAR 0 1
21274: ARRAY
21275: PUSH
21276: LD_VAR 0 2
21280: ARRAY
21281: PUSH
21282: LD_INT 1
21284: ARRAY
21285: PPUSH
21286: LD_EXP 87
21290: PUSH
21291: LD_VAR 0 1
21295: ARRAY
21296: PUSH
21297: LD_VAR 0 2
21301: ARRAY
21302: PUSH
21303: LD_INT 2
21305: ARRAY
21306: PPUSH
21307: CALL_OW 428
21311: ST_TO_ADDR
// if not tmp then
21312: LD_VAR 0 4
21316: NOT
21317: IFFALSE 21321
// continue ;
21319: GO 21236
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
21321: LD_VAR 0 4
21325: PUSH
21326: LD_INT 81
21328: PUSH
21329: LD_VAR 0 3
21333: PUSH
21334: EMPTY
21335: LIST
21336: LIST
21337: PPUSH
21338: CALL_OW 69
21342: IN
21343: PUSH
21344: LD_EXP 87
21348: PUSH
21349: LD_VAR 0 1
21353: ARRAY
21354: PUSH
21355: LD_VAR 0 2
21359: ARRAY
21360: PUSH
21361: LD_INT 1
21363: ARRAY
21364: PPUSH
21365: LD_EXP 87
21369: PUSH
21370: LD_VAR 0 1
21374: ARRAY
21375: PUSH
21376: LD_VAR 0 2
21380: ARRAY
21381: PUSH
21382: LD_INT 2
21384: ARRAY
21385: PPUSH
21386: CALL_OW 458
21390: AND
21391: IFFALSE 21485
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
21393: LD_EXP 87
21397: PUSH
21398: LD_VAR 0 1
21402: ARRAY
21403: PUSH
21404: LD_VAR 0 2
21408: ARRAY
21409: PUSH
21410: LD_INT 1
21412: ARRAY
21413: PPUSH
21414: LD_EXP 87
21418: PUSH
21419: LD_VAR 0 1
21423: ARRAY
21424: PUSH
21425: LD_VAR 0 2
21429: ARRAY
21430: PUSH
21431: LD_INT 2
21433: ARRAY
21434: PPUSH
21435: LD_VAR 0 3
21439: PPUSH
21440: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
21444: LD_ADDR_EXP 87
21448: PUSH
21449: LD_EXP 87
21453: PPUSH
21454: LD_VAR 0 1
21458: PPUSH
21459: LD_EXP 87
21463: PUSH
21464: LD_VAR 0 1
21468: ARRAY
21469: PPUSH
21470: LD_VAR 0 2
21474: PPUSH
21475: CALL_OW 3
21479: PPUSH
21480: CALL_OW 1
21484: ST_TO_ADDR
// end ; end ;
21485: GO 21236
21487: POP
21488: POP
// end ;
21489: GO 21154
21491: POP
21492: POP
// end ;
21493: PPOPN 4
21495: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
21496: LD_INT 0
21498: PPUSH
21499: PPUSH
// result := false ;
21500: LD_ADDR_VAR 0 4
21504: PUSH
21505: LD_INT 0
21507: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
21508: LD_VAR 0 1
21512: PPUSH
21513: CALL_OW 264
21517: PUSH
21518: LD_EXP 96
21522: EQUAL
21523: NOT
21524: IFFALSE 21528
// exit ;
21526: GO 21768
// index := GetElementIndex ( minersList , unit ) ;
21528: LD_ADDR_VAR 0 5
21532: PUSH
21533: LD_EXP 86
21537: PPUSH
21538: LD_VAR 0 1
21542: PPUSH
21543: CALL 27856 0 2
21547: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
21548: LD_EXP 87
21552: PUSH
21553: LD_VAR 0 5
21557: ARRAY
21558: PUSH
21559: LD_EXP 88
21563: GREATEREQUAL
21564: IFFALSE 21568
// exit ;
21566: GO 21768
// ComMoveXY ( unit , x , y ) ;
21568: LD_VAR 0 1
21572: PPUSH
21573: LD_VAR 0 2
21577: PPUSH
21578: LD_VAR 0 3
21582: PPUSH
21583: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
21587: LD_INT 35
21589: PPUSH
21590: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
21594: LD_VAR 0 1
21598: PPUSH
21599: LD_VAR 0 2
21603: PPUSH
21604: LD_VAR 0 3
21608: PPUSH
21609: CALL 57920 0 3
21613: NOT
21614: PUSH
21615: LD_VAR 0 1
21619: PPUSH
21620: CALL_OW 314
21624: AND
21625: IFFALSE 21629
// exit ;
21627: GO 21768
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
21629: LD_VAR 0 2
21633: PPUSH
21634: LD_VAR 0 3
21638: PPUSH
21639: CALL_OW 428
21643: PUSH
21644: LD_VAR 0 1
21648: EQUAL
21649: PUSH
21650: LD_VAR 0 1
21654: PPUSH
21655: CALL_OW 314
21659: NOT
21660: AND
21661: IFFALSE 21587
// PlaySoundXY ( x , y , PlantMine ) ;
21663: LD_VAR 0 2
21667: PPUSH
21668: LD_VAR 0 3
21672: PPUSH
21673: LD_STRING PlantMine
21675: PPUSH
21676: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
21680: LD_VAR 0 2
21684: PPUSH
21685: LD_VAR 0 3
21689: PPUSH
21690: LD_VAR 0 1
21694: PPUSH
21695: CALL_OW 255
21699: PPUSH
21700: LD_INT 0
21702: PPUSH
21703: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
21707: LD_ADDR_EXP 87
21711: PUSH
21712: LD_EXP 87
21716: PPUSH
21717: LD_VAR 0 5
21721: PUSH
21722: LD_EXP 87
21726: PUSH
21727: LD_VAR 0 5
21731: ARRAY
21732: PUSH
21733: LD_INT 1
21735: PLUS
21736: PUSH
21737: EMPTY
21738: LIST
21739: LIST
21740: PPUSH
21741: LD_VAR 0 2
21745: PUSH
21746: LD_VAR 0 3
21750: PUSH
21751: EMPTY
21752: LIST
21753: LIST
21754: PPUSH
21755: CALL 28071 0 3
21759: ST_TO_ADDR
// result := true ;
21760: LD_ADDR_VAR 0 4
21764: PUSH
21765: LD_INT 1
21767: ST_TO_ADDR
// end ;
21768: LD_VAR 0 4
21772: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
21773: LD_INT 0
21775: PPUSH
21776: PPUSH
21777: PPUSH
// if not unit in minersList then
21778: LD_VAR 0 1
21782: PUSH
21783: LD_EXP 86
21787: IN
21788: NOT
21789: IFFALSE 21793
// exit ;
21791: GO 22185
// index := GetElementIndex ( minersList , unit ) ;
21793: LD_ADDR_VAR 0 6
21797: PUSH
21798: LD_EXP 86
21802: PPUSH
21803: LD_VAR 0 1
21807: PPUSH
21808: CALL 27856 0 2
21812: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
21813: LD_ADDR_VAR 0 5
21817: PUSH
21818: DOUBLE
21819: LD_EXP 87
21823: PUSH
21824: LD_VAR 0 6
21828: ARRAY
21829: INC
21830: ST_TO_ADDR
21831: LD_INT 1
21833: PUSH
21834: FOR_DOWNTO
21835: IFFALSE 21996
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
21837: LD_EXP 87
21841: PUSH
21842: LD_VAR 0 6
21846: ARRAY
21847: PUSH
21848: LD_VAR 0 5
21852: ARRAY
21853: PUSH
21854: LD_INT 1
21856: ARRAY
21857: PUSH
21858: LD_VAR 0 2
21862: EQUAL
21863: PUSH
21864: LD_EXP 87
21868: PUSH
21869: LD_VAR 0 6
21873: ARRAY
21874: PUSH
21875: LD_VAR 0 5
21879: ARRAY
21880: PUSH
21881: LD_INT 2
21883: ARRAY
21884: PUSH
21885: LD_VAR 0 3
21889: EQUAL
21890: AND
21891: IFFALSE 21994
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
21893: LD_EXP 87
21897: PUSH
21898: LD_VAR 0 6
21902: ARRAY
21903: PUSH
21904: LD_VAR 0 5
21908: ARRAY
21909: PUSH
21910: LD_INT 1
21912: ARRAY
21913: PPUSH
21914: LD_EXP 87
21918: PUSH
21919: LD_VAR 0 6
21923: ARRAY
21924: PUSH
21925: LD_VAR 0 5
21929: ARRAY
21930: PUSH
21931: LD_INT 2
21933: ARRAY
21934: PPUSH
21935: LD_VAR 0 1
21939: PPUSH
21940: CALL_OW 255
21944: PPUSH
21945: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
21949: LD_ADDR_EXP 87
21953: PUSH
21954: LD_EXP 87
21958: PPUSH
21959: LD_VAR 0 6
21963: PPUSH
21964: LD_EXP 87
21968: PUSH
21969: LD_VAR 0 6
21973: ARRAY
21974: PPUSH
21975: LD_VAR 0 5
21979: PPUSH
21980: CALL_OW 3
21984: PPUSH
21985: CALL_OW 1
21989: ST_TO_ADDR
// exit ;
21990: POP
21991: POP
21992: GO 22185
// end ; end ;
21994: GO 21834
21996: POP
21997: POP
// for i := minerMinesList [ index ] downto 1 do
21998: LD_ADDR_VAR 0 5
22002: PUSH
22003: DOUBLE
22004: LD_EXP 87
22008: PUSH
22009: LD_VAR 0 6
22013: ARRAY
22014: INC
22015: ST_TO_ADDR
22016: LD_INT 1
22018: PUSH
22019: FOR_DOWNTO
22020: IFFALSE 22183
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
22022: LD_EXP 87
22026: PUSH
22027: LD_VAR 0 6
22031: ARRAY
22032: PUSH
22033: LD_VAR 0 5
22037: ARRAY
22038: PUSH
22039: LD_INT 1
22041: ARRAY
22042: PPUSH
22043: LD_EXP 87
22047: PUSH
22048: LD_VAR 0 6
22052: ARRAY
22053: PUSH
22054: LD_VAR 0 5
22058: ARRAY
22059: PUSH
22060: LD_INT 2
22062: ARRAY
22063: PPUSH
22064: LD_VAR 0 2
22068: PPUSH
22069: LD_VAR 0 3
22073: PPUSH
22074: CALL_OW 298
22078: PUSH
22079: LD_INT 6
22081: LESS
22082: IFFALSE 22181
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
22084: LD_EXP 87
22088: PUSH
22089: LD_VAR 0 6
22093: ARRAY
22094: PUSH
22095: LD_VAR 0 5
22099: ARRAY
22100: PUSH
22101: LD_INT 1
22103: ARRAY
22104: PPUSH
22105: LD_EXP 87
22109: PUSH
22110: LD_VAR 0 6
22114: ARRAY
22115: PUSH
22116: LD_VAR 0 5
22120: ARRAY
22121: PUSH
22122: LD_INT 2
22124: ARRAY
22125: PPUSH
22126: LD_VAR 0 1
22130: PPUSH
22131: CALL_OW 255
22135: PPUSH
22136: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
22140: LD_ADDR_EXP 87
22144: PUSH
22145: LD_EXP 87
22149: PPUSH
22150: LD_VAR 0 6
22154: PPUSH
22155: LD_EXP 87
22159: PUSH
22160: LD_VAR 0 6
22164: ARRAY
22165: PPUSH
22166: LD_VAR 0 5
22170: PPUSH
22171: CALL_OW 3
22175: PPUSH
22176: CALL_OW 1
22180: ST_TO_ADDR
// end ; end ;
22181: GO 22019
22183: POP
22184: POP
// end ;
22185: LD_VAR 0 4
22189: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
22190: LD_INT 0
22192: PPUSH
22193: PPUSH
22194: PPUSH
22195: PPUSH
22196: PPUSH
22197: PPUSH
22198: PPUSH
22199: PPUSH
22200: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
22201: LD_VAR 0 1
22205: PPUSH
22206: CALL_OW 264
22210: PUSH
22211: LD_EXP 96
22215: EQUAL
22216: NOT
22217: PUSH
22218: LD_VAR 0 1
22222: PUSH
22223: LD_EXP 86
22227: IN
22228: NOT
22229: OR
22230: IFFALSE 22234
// exit ;
22232: GO 22556
// index := GetElementIndex ( minersList , unit ) ;
22234: LD_ADDR_VAR 0 6
22238: PUSH
22239: LD_EXP 86
22243: PPUSH
22244: LD_VAR 0 1
22248: PPUSH
22249: CALL 27856 0 2
22253: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
22254: LD_ADDR_VAR 0 8
22258: PUSH
22259: LD_EXP 88
22263: PUSH
22264: LD_EXP 87
22268: PUSH
22269: LD_VAR 0 6
22273: ARRAY
22274: MINUS
22275: ST_TO_ADDR
// if not minesFreeAmount then
22276: LD_VAR 0 8
22280: NOT
22281: IFFALSE 22285
// exit ;
22283: GO 22556
// tmp := [ ] ;
22285: LD_ADDR_VAR 0 7
22289: PUSH
22290: EMPTY
22291: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
22292: LD_ADDR_VAR 0 5
22296: PUSH
22297: DOUBLE
22298: LD_INT 1
22300: DEC
22301: ST_TO_ADDR
22302: LD_VAR 0 8
22306: PUSH
22307: FOR_TO
22308: IFFALSE 22503
// begin _d := rand ( 0 , 5 ) ;
22310: LD_ADDR_VAR 0 11
22314: PUSH
22315: LD_INT 0
22317: PPUSH
22318: LD_INT 5
22320: PPUSH
22321: CALL_OW 12
22325: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
22326: LD_ADDR_VAR 0 12
22330: PUSH
22331: LD_INT 2
22333: PPUSH
22334: LD_INT 6
22336: PPUSH
22337: CALL_OW 12
22341: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
22342: LD_ADDR_VAR 0 9
22346: PUSH
22347: LD_VAR 0 2
22351: PPUSH
22352: LD_VAR 0 11
22356: PPUSH
22357: LD_VAR 0 12
22361: PPUSH
22362: CALL_OW 272
22366: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
22367: LD_ADDR_VAR 0 10
22371: PUSH
22372: LD_VAR 0 3
22376: PPUSH
22377: LD_VAR 0 11
22381: PPUSH
22382: LD_VAR 0 12
22386: PPUSH
22387: CALL_OW 273
22391: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
22392: LD_VAR 0 9
22396: PPUSH
22397: LD_VAR 0 10
22401: PPUSH
22402: CALL_OW 488
22406: PUSH
22407: LD_VAR 0 9
22411: PUSH
22412: LD_VAR 0 10
22416: PUSH
22417: EMPTY
22418: LIST
22419: LIST
22420: PUSH
22421: LD_VAR 0 7
22425: IN
22426: NOT
22427: AND
22428: PUSH
22429: LD_VAR 0 9
22433: PPUSH
22434: LD_VAR 0 10
22438: PPUSH
22439: CALL_OW 458
22443: NOT
22444: AND
22445: IFFALSE 22487
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
22447: LD_ADDR_VAR 0 7
22451: PUSH
22452: LD_VAR 0 7
22456: PPUSH
22457: LD_VAR 0 7
22461: PUSH
22462: LD_INT 1
22464: PLUS
22465: PPUSH
22466: LD_VAR 0 9
22470: PUSH
22471: LD_VAR 0 10
22475: PUSH
22476: EMPTY
22477: LIST
22478: LIST
22479: PPUSH
22480: CALL_OW 1
22484: ST_TO_ADDR
22485: GO 22501
// i := i - 1 ;
22487: LD_ADDR_VAR 0 5
22491: PUSH
22492: LD_VAR 0 5
22496: PUSH
22497: LD_INT 1
22499: MINUS
22500: ST_TO_ADDR
// end ;
22501: GO 22307
22503: POP
22504: POP
// for i in tmp do
22505: LD_ADDR_VAR 0 5
22509: PUSH
22510: LD_VAR 0 7
22514: PUSH
22515: FOR_IN
22516: IFFALSE 22554
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
22518: LD_VAR 0 1
22522: PPUSH
22523: LD_VAR 0 5
22527: PUSH
22528: LD_INT 1
22530: ARRAY
22531: PPUSH
22532: LD_VAR 0 5
22536: PUSH
22537: LD_INT 2
22539: ARRAY
22540: PPUSH
22541: CALL 21496 0 3
22545: NOT
22546: IFFALSE 22552
// exit ;
22548: POP
22549: POP
22550: GO 22556
22552: GO 22515
22554: POP
22555: POP
// end ;
22556: LD_VAR 0 4
22560: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
22561: LD_INT 0
22563: PPUSH
22564: PPUSH
22565: PPUSH
22566: PPUSH
22567: PPUSH
22568: PPUSH
22569: PPUSH
// if not GetClass ( unit ) = class_sniper then
22570: LD_VAR 0 1
22574: PPUSH
22575: CALL_OW 257
22579: PUSH
22580: LD_INT 5
22582: EQUAL
22583: NOT
22584: IFFALSE 22588
// exit ;
22586: GO 22976
// dist := 8 ;
22588: LD_ADDR_VAR 0 5
22592: PUSH
22593: LD_INT 8
22595: ST_TO_ADDR
// viewRange := 12 ;
22596: LD_ADDR_VAR 0 7
22600: PUSH
22601: LD_INT 12
22603: ST_TO_ADDR
// side := GetSide ( unit ) ;
22604: LD_ADDR_VAR 0 6
22608: PUSH
22609: LD_VAR 0 1
22613: PPUSH
22614: CALL_OW 255
22618: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
22619: LD_INT 61
22621: PPUSH
22622: LD_VAR 0 6
22626: PPUSH
22627: CALL_OW 321
22631: PUSH
22632: LD_INT 2
22634: EQUAL
22635: IFFALSE 22645
// viewRange := 16 ;
22637: LD_ADDR_VAR 0 7
22641: PUSH
22642: LD_INT 16
22644: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
22645: LD_VAR 0 1
22649: PPUSH
22650: LD_VAR 0 2
22654: PPUSH
22655: LD_VAR 0 3
22659: PPUSH
22660: CALL_OW 297
22664: PUSH
22665: LD_VAR 0 5
22669: GREATER
22670: IFFALSE 22749
// begin ComMoveXY ( unit , x , y ) ;
22672: LD_VAR 0 1
22676: PPUSH
22677: LD_VAR 0 2
22681: PPUSH
22682: LD_VAR 0 3
22686: PPUSH
22687: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
22691: LD_INT 35
22693: PPUSH
22694: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
22698: LD_VAR 0 1
22702: PPUSH
22703: LD_VAR 0 2
22707: PPUSH
22708: LD_VAR 0 3
22712: PPUSH
22713: CALL 57920 0 3
22717: NOT
22718: IFFALSE 22722
// exit ;
22720: GO 22976
// until GetDistUnitXY ( unit , x , y ) < dist ;
22722: LD_VAR 0 1
22726: PPUSH
22727: LD_VAR 0 2
22731: PPUSH
22732: LD_VAR 0 3
22736: PPUSH
22737: CALL_OW 297
22741: PUSH
22742: LD_VAR 0 5
22746: LESS
22747: IFFALSE 22691
// end ; ComTurnXY ( unit , x , y ) ;
22749: LD_VAR 0 1
22753: PPUSH
22754: LD_VAR 0 2
22758: PPUSH
22759: LD_VAR 0 3
22763: PPUSH
22764: CALL_OW 118
// wait ( 5 ) ;
22768: LD_INT 5
22770: PPUSH
22771: CALL_OW 67
// _d := GetDir ( unit ) ;
22775: LD_ADDR_VAR 0 10
22779: PUSH
22780: LD_VAR 0 1
22784: PPUSH
22785: CALL_OW 254
22789: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
22790: LD_ADDR_VAR 0 8
22794: PUSH
22795: LD_VAR 0 1
22799: PPUSH
22800: CALL_OW 250
22804: PPUSH
22805: LD_VAR 0 10
22809: PPUSH
22810: LD_VAR 0 5
22814: PPUSH
22815: CALL_OW 272
22819: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
22820: LD_ADDR_VAR 0 9
22824: PUSH
22825: LD_VAR 0 1
22829: PPUSH
22830: CALL_OW 251
22834: PPUSH
22835: LD_VAR 0 10
22839: PPUSH
22840: LD_VAR 0 5
22844: PPUSH
22845: CALL_OW 273
22849: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22850: LD_VAR 0 8
22854: PPUSH
22855: LD_VAR 0 9
22859: PPUSH
22860: CALL_OW 488
22864: NOT
22865: IFFALSE 22869
// exit ;
22867: GO 22976
// ComAnimCustom ( unit , 1 ) ;
22869: LD_VAR 0 1
22873: PPUSH
22874: LD_INT 1
22876: PPUSH
22877: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
22881: LD_VAR 0 8
22885: PPUSH
22886: LD_VAR 0 9
22890: PPUSH
22891: LD_VAR 0 6
22895: PPUSH
22896: LD_VAR 0 7
22900: PPUSH
22901: CALL_OW 330
// repeat wait ( 1 ) ;
22905: LD_INT 1
22907: PPUSH
22908: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
22912: LD_VAR 0 1
22916: PPUSH
22917: CALL_OW 316
22921: PUSH
22922: LD_VAR 0 1
22926: PPUSH
22927: CALL_OW 314
22931: OR
22932: PUSH
22933: LD_VAR 0 1
22937: PPUSH
22938: CALL_OW 302
22942: NOT
22943: OR
22944: PUSH
22945: LD_VAR 0 1
22949: PPUSH
22950: CALL_OW 301
22954: OR
22955: IFFALSE 22905
// RemoveSeeing ( _x , _y , side ) ;
22957: LD_VAR 0 8
22961: PPUSH
22962: LD_VAR 0 9
22966: PPUSH
22967: LD_VAR 0 6
22971: PPUSH
22972: CALL_OW 331
// end ; end_of_file
22976: LD_VAR 0 4
22980: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
22981: LD_INT 0
22983: PPUSH
// ar_miner := 81 ;
22984: LD_ADDR_EXP 96
22988: PUSH
22989: LD_INT 81
22991: ST_TO_ADDR
// ar_crane := 88 ;
22992: LD_ADDR_EXP 95
22996: PUSH
22997: LD_INT 88
22999: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
23000: LD_ADDR_EXP 90
23004: PUSH
23005: LD_INT 89
23007: ST_TO_ADDR
// us_hack := 99 ;
23008: LD_ADDR_EXP 91
23012: PUSH
23013: LD_INT 99
23015: ST_TO_ADDR
// us_artillery := 97 ;
23016: LD_ADDR_EXP 92
23020: PUSH
23021: LD_INT 97
23023: ST_TO_ADDR
// ar_bio_bomb := 91 ;
23024: LD_ADDR_EXP 93
23028: PUSH
23029: LD_INT 91
23031: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
23032: LD_ADDR_EXP 94
23036: PUSH
23037: LD_INT 92
23039: ST_TO_ADDR
// ru_radar := 98 ;
23040: LD_ADDR_EXP 89
23044: PUSH
23045: LD_INT 98
23047: ST_TO_ADDR
// tech_Artillery := 80 ;
23048: LD_ADDR_EXP 97
23052: PUSH
23053: LD_INT 80
23055: ST_TO_ADDR
// tech_RadMat := 81 ;
23056: LD_ADDR_EXP 98
23060: PUSH
23061: LD_INT 81
23063: ST_TO_ADDR
// tech_BasicTools := 82 ;
23064: LD_ADDR_EXP 99
23068: PUSH
23069: LD_INT 82
23071: ST_TO_ADDR
// tech_Cargo := 83 ;
23072: LD_ADDR_EXP 100
23076: PUSH
23077: LD_INT 83
23079: ST_TO_ADDR
// tech_Track := 84 ;
23080: LD_ADDR_EXP 101
23084: PUSH
23085: LD_INT 84
23087: ST_TO_ADDR
// tech_Crane := 85 ;
23088: LD_ADDR_EXP 102
23092: PUSH
23093: LD_INT 85
23095: ST_TO_ADDR
// tech_Bulldozer := 86 ;
23096: LD_ADDR_EXP 103
23100: PUSH
23101: LD_INT 86
23103: ST_TO_ADDR
// tech_Hovercraft := 87 ;
23104: LD_ADDR_EXP 104
23108: PUSH
23109: LD_INT 87
23111: ST_TO_ADDR
// end ;
23112: LD_VAR 0 1
23116: RET
// every 1 do
23117: GO 23119
23119: DISABLE
// InitGlobalVariables ; end_of_file
23120: CALL 22981 0 0
23124: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
23125: LD_INT 0
23127: PPUSH
23128: PPUSH
// if exist_mode then
23129: LD_VAR 0 2
23133: IFFALSE 23158
// unit := CreateCharacter ( prefix & ident ) else
23135: LD_ADDR_VAR 0 5
23139: PUSH
23140: LD_VAR 0 3
23144: PUSH
23145: LD_VAR 0 1
23149: STR
23150: PPUSH
23151: CALL_OW 34
23155: ST_TO_ADDR
23156: GO 23173
// unit := NewCharacter ( ident ) ;
23158: LD_ADDR_VAR 0 5
23162: PUSH
23163: LD_VAR 0 1
23167: PPUSH
23168: CALL_OW 25
23172: ST_TO_ADDR
// result := unit ;
23173: LD_ADDR_VAR 0 4
23177: PUSH
23178: LD_VAR 0 5
23182: ST_TO_ADDR
// end ;
23183: LD_VAR 0 4
23187: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
23188: LD_INT 0
23190: PPUSH
23191: PPUSH
// if not side or not nation then
23192: LD_VAR 0 1
23196: NOT
23197: PUSH
23198: LD_VAR 0 2
23202: NOT
23203: OR
23204: IFFALSE 23208
// exit ;
23206: GO 23972
// case nation of nation_american :
23208: LD_VAR 0 2
23212: PUSH
23213: LD_INT 1
23215: DOUBLE
23216: EQUAL
23217: IFTRUE 23221
23219: GO 23435
23221: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
23222: LD_ADDR_VAR 0 4
23226: PUSH
23227: LD_INT 35
23229: PUSH
23230: LD_INT 45
23232: PUSH
23233: LD_INT 46
23235: PUSH
23236: LD_INT 47
23238: PUSH
23239: LD_INT 82
23241: PUSH
23242: LD_INT 83
23244: PUSH
23245: LD_INT 84
23247: PUSH
23248: LD_INT 85
23250: PUSH
23251: LD_INT 86
23253: PUSH
23254: LD_INT 1
23256: PUSH
23257: LD_INT 2
23259: PUSH
23260: LD_INT 6
23262: PUSH
23263: LD_INT 15
23265: PUSH
23266: LD_INT 16
23268: PUSH
23269: LD_INT 7
23271: PUSH
23272: LD_INT 12
23274: PUSH
23275: LD_INT 13
23277: PUSH
23278: LD_INT 10
23280: PUSH
23281: LD_INT 14
23283: PUSH
23284: LD_INT 20
23286: PUSH
23287: LD_INT 21
23289: PUSH
23290: LD_INT 22
23292: PUSH
23293: LD_INT 25
23295: PUSH
23296: LD_INT 32
23298: PUSH
23299: LD_INT 27
23301: PUSH
23302: LD_INT 36
23304: PUSH
23305: LD_INT 69
23307: PUSH
23308: LD_INT 39
23310: PUSH
23311: LD_INT 34
23313: PUSH
23314: LD_INT 40
23316: PUSH
23317: LD_INT 48
23319: PUSH
23320: LD_INT 49
23322: PUSH
23323: LD_INT 50
23325: PUSH
23326: LD_INT 51
23328: PUSH
23329: LD_INT 52
23331: PUSH
23332: LD_INT 53
23334: PUSH
23335: LD_INT 54
23337: PUSH
23338: LD_INT 55
23340: PUSH
23341: LD_INT 56
23343: PUSH
23344: LD_INT 57
23346: PUSH
23347: LD_INT 58
23349: PUSH
23350: LD_INT 59
23352: PUSH
23353: LD_INT 60
23355: PUSH
23356: LD_INT 61
23358: PUSH
23359: LD_INT 62
23361: PUSH
23362: LD_INT 80
23364: PUSH
23365: LD_INT 82
23367: PUSH
23368: LD_INT 83
23370: PUSH
23371: LD_INT 84
23373: PUSH
23374: LD_INT 85
23376: PUSH
23377: LD_INT 86
23379: PUSH
23380: EMPTY
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: LIST
23417: LIST
23418: LIST
23419: LIST
23420: LIST
23421: LIST
23422: LIST
23423: LIST
23424: LIST
23425: LIST
23426: LIST
23427: LIST
23428: LIST
23429: LIST
23430: LIST
23431: LIST
23432: ST_TO_ADDR
23433: GO 23896
23435: LD_INT 2
23437: DOUBLE
23438: EQUAL
23439: IFTRUE 23443
23441: GO 23665
23443: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
23444: LD_ADDR_VAR 0 4
23448: PUSH
23449: LD_INT 35
23451: PUSH
23452: LD_INT 45
23454: PUSH
23455: LD_INT 46
23457: PUSH
23458: LD_INT 47
23460: PUSH
23461: LD_INT 82
23463: PUSH
23464: LD_INT 83
23466: PUSH
23467: LD_INT 84
23469: PUSH
23470: LD_INT 85
23472: PUSH
23473: LD_INT 87
23475: PUSH
23476: LD_INT 70
23478: PUSH
23479: LD_INT 1
23481: PUSH
23482: LD_INT 11
23484: PUSH
23485: LD_INT 3
23487: PUSH
23488: LD_INT 4
23490: PUSH
23491: LD_INT 5
23493: PUSH
23494: LD_INT 6
23496: PUSH
23497: LD_INT 15
23499: PUSH
23500: LD_INT 18
23502: PUSH
23503: LD_INT 7
23505: PUSH
23506: LD_INT 17
23508: PUSH
23509: LD_INT 8
23511: PUSH
23512: LD_INT 20
23514: PUSH
23515: LD_INT 21
23517: PUSH
23518: LD_INT 22
23520: PUSH
23521: LD_INT 72
23523: PUSH
23524: LD_INT 26
23526: PUSH
23527: LD_INT 69
23529: PUSH
23530: LD_INT 39
23532: PUSH
23533: LD_INT 40
23535: PUSH
23536: LD_INT 41
23538: PUSH
23539: LD_INT 42
23541: PUSH
23542: LD_INT 43
23544: PUSH
23545: LD_INT 48
23547: PUSH
23548: LD_INT 49
23550: PUSH
23551: LD_INT 50
23553: PUSH
23554: LD_INT 51
23556: PUSH
23557: LD_INT 52
23559: PUSH
23560: LD_INT 53
23562: PUSH
23563: LD_INT 54
23565: PUSH
23566: LD_INT 55
23568: PUSH
23569: LD_INT 56
23571: PUSH
23572: LD_INT 60
23574: PUSH
23575: LD_INT 61
23577: PUSH
23578: LD_INT 62
23580: PUSH
23581: LD_INT 66
23583: PUSH
23584: LD_INT 67
23586: PUSH
23587: LD_INT 68
23589: PUSH
23590: LD_INT 81
23592: PUSH
23593: LD_INT 82
23595: PUSH
23596: LD_INT 83
23598: PUSH
23599: LD_INT 84
23601: PUSH
23602: LD_INT 85
23604: PUSH
23605: LD_INT 87
23607: PUSH
23608: EMPTY
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: LIST
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: ST_TO_ADDR
23663: GO 23896
23665: LD_INT 3
23667: DOUBLE
23668: EQUAL
23669: IFTRUE 23673
23671: GO 23895
23673: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
23674: LD_ADDR_VAR 0 4
23678: PUSH
23679: LD_INT 46
23681: PUSH
23682: LD_INT 47
23684: PUSH
23685: LD_INT 1
23687: PUSH
23688: LD_INT 2
23690: PUSH
23691: LD_INT 82
23693: PUSH
23694: LD_INT 83
23696: PUSH
23697: LD_INT 84
23699: PUSH
23700: LD_INT 85
23702: PUSH
23703: LD_INT 86
23705: PUSH
23706: LD_INT 11
23708: PUSH
23709: LD_INT 9
23711: PUSH
23712: LD_INT 20
23714: PUSH
23715: LD_INT 19
23717: PUSH
23718: LD_INT 21
23720: PUSH
23721: LD_INT 24
23723: PUSH
23724: LD_INT 22
23726: PUSH
23727: LD_INT 25
23729: PUSH
23730: LD_INT 28
23732: PUSH
23733: LD_INT 29
23735: PUSH
23736: LD_INT 30
23738: PUSH
23739: LD_INT 31
23741: PUSH
23742: LD_INT 37
23744: PUSH
23745: LD_INT 38
23747: PUSH
23748: LD_INT 32
23750: PUSH
23751: LD_INT 27
23753: PUSH
23754: LD_INT 33
23756: PUSH
23757: LD_INT 69
23759: PUSH
23760: LD_INT 39
23762: PUSH
23763: LD_INT 34
23765: PUSH
23766: LD_INT 40
23768: PUSH
23769: LD_INT 71
23771: PUSH
23772: LD_INT 23
23774: PUSH
23775: LD_INT 44
23777: PUSH
23778: LD_INT 48
23780: PUSH
23781: LD_INT 49
23783: PUSH
23784: LD_INT 50
23786: PUSH
23787: LD_INT 51
23789: PUSH
23790: LD_INT 52
23792: PUSH
23793: LD_INT 53
23795: PUSH
23796: LD_INT 54
23798: PUSH
23799: LD_INT 55
23801: PUSH
23802: LD_INT 56
23804: PUSH
23805: LD_INT 57
23807: PUSH
23808: LD_INT 58
23810: PUSH
23811: LD_INT 59
23813: PUSH
23814: LD_INT 63
23816: PUSH
23817: LD_INT 64
23819: PUSH
23820: LD_INT 65
23822: PUSH
23823: LD_INT 82
23825: PUSH
23826: LD_INT 83
23828: PUSH
23829: LD_INT 84
23831: PUSH
23832: LD_INT 85
23834: PUSH
23835: LD_INT 86
23837: PUSH
23838: EMPTY
23839: LIST
23840: LIST
23841: LIST
23842: LIST
23843: LIST
23844: LIST
23845: LIST
23846: LIST
23847: LIST
23848: LIST
23849: LIST
23850: LIST
23851: LIST
23852: LIST
23853: LIST
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: LIST
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: LIST
23876: LIST
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: ST_TO_ADDR
23893: GO 23896
23895: POP
// if state > - 1 and state < 3 then
23896: LD_VAR 0 3
23900: PUSH
23901: LD_INT 1
23903: NEG
23904: GREATER
23905: PUSH
23906: LD_VAR 0 3
23910: PUSH
23911: LD_INT 3
23913: LESS
23914: AND
23915: IFFALSE 23972
// for i in result do
23917: LD_ADDR_VAR 0 5
23921: PUSH
23922: LD_VAR 0 4
23926: PUSH
23927: FOR_IN
23928: IFFALSE 23970
// if GetTech ( i , side ) <> state then
23930: LD_VAR 0 5
23934: PPUSH
23935: LD_VAR 0 1
23939: PPUSH
23940: CALL_OW 321
23944: PUSH
23945: LD_VAR 0 3
23949: NONEQUAL
23950: IFFALSE 23968
// result := result diff i ;
23952: LD_ADDR_VAR 0 4
23956: PUSH
23957: LD_VAR 0 4
23961: PUSH
23962: LD_VAR 0 5
23966: DIFF
23967: ST_TO_ADDR
23968: GO 23927
23970: POP
23971: POP
// end ;
23972: LD_VAR 0 4
23976: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
23977: LD_INT 0
23979: PPUSH
23980: PPUSH
23981: PPUSH
// result := true ;
23982: LD_ADDR_VAR 0 3
23986: PUSH
23987: LD_INT 1
23989: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
23990: LD_ADDR_VAR 0 5
23994: PUSH
23995: LD_VAR 0 2
23999: PPUSH
24000: CALL_OW 480
24004: ST_TO_ADDR
// if not tmp then
24005: LD_VAR 0 5
24009: NOT
24010: IFFALSE 24014
// exit ;
24012: GO 24063
// for i in tmp do
24014: LD_ADDR_VAR 0 4
24018: PUSH
24019: LD_VAR 0 5
24023: PUSH
24024: FOR_IN
24025: IFFALSE 24061
// if GetTech ( i , side ) <> state_researched then
24027: LD_VAR 0 4
24031: PPUSH
24032: LD_VAR 0 1
24036: PPUSH
24037: CALL_OW 321
24041: PUSH
24042: LD_INT 2
24044: NONEQUAL
24045: IFFALSE 24059
// begin result := false ;
24047: LD_ADDR_VAR 0 3
24051: PUSH
24052: LD_INT 0
24054: ST_TO_ADDR
// exit ;
24055: POP
24056: POP
24057: GO 24063
// end ;
24059: GO 24024
24061: POP
24062: POP
// end ;
24063: LD_VAR 0 3
24067: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
24068: LD_INT 0
24070: PPUSH
24071: PPUSH
24072: PPUSH
24073: PPUSH
24074: PPUSH
24075: PPUSH
24076: PPUSH
24077: PPUSH
24078: PPUSH
24079: PPUSH
24080: PPUSH
24081: PPUSH
24082: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
24083: LD_VAR 0 1
24087: NOT
24088: PUSH
24089: LD_VAR 0 1
24093: PPUSH
24094: CALL_OW 257
24098: PUSH
24099: LD_INT 9
24101: NONEQUAL
24102: OR
24103: IFFALSE 24107
// exit ;
24105: GO 24680
// side := GetSide ( unit ) ;
24107: LD_ADDR_VAR 0 9
24111: PUSH
24112: LD_VAR 0 1
24116: PPUSH
24117: CALL_OW 255
24121: ST_TO_ADDR
// tech_space := tech_spacanom ;
24122: LD_ADDR_VAR 0 12
24126: PUSH
24127: LD_INT 29
24129: ST_TO_ADDR
// tech_time := tech_taurad ;
24130: LD_ADDR_VAR 0 13
24134: PUSH
24135: LD_INT 28
24137: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
24138: LD_ADDR_VAR 0 11
24142: PUSH
24143: LD_VAR 0 1
24147: PPUSH
24148: CALL_OW 310
24152: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
24153: LD_VAR 0 11
24157: PPUSH
24158: CALL_OW 247
24162: PUSH
24163: LD_INT 2
24165: EQUAL
24166: IFFALSE 24170
// exit ;
24168: GO 24680
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24170: LD_ADDR_VAR 0 8
24174: PUSH
24175: LD_INT 81
24177: PUSH
24178: LD_VAR 0 9
24182: PUSH
24183: EMPTY
24184: LIST
24185: LIST
24186: PUSH
24187: LD_INT 3
24189: PUSH
24190: LD_INT 21
24192: PUSH
24193: LD_INT 3
24195: PUSH
24196: EMPTY
24197: LIST
24198: LIST
24199: PUSH
24200: EMPTY
24201: LIST
24202: LIST
24203: PUSH
24204: EMPTY
24205: LIST
24206: LIST
24207: PPUSH
24208: CALL_OW 69
24212: ST_TO_ADDR
// if not tmp then
24213: LD_VAR 0 8
24217: NOT
24218: IFFALSE 24222
// exit ;
24220: GO 24680
// if in_unit then
24222: LD_VAR 0 11
24226: IFFALSE 24250
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
24228: LD_ADDR_VAR 0 10
24232: PUSH
24233: LD_VAR 0 8
24237: PPUSH
24238: LD_VAR 0 11
24242: PPUSH
24243: CALL_OW 74
24247: ST_TO_ADDR
24248: GO 24270
// enemy := NearestUnitToUnit ( tmp , unit ) ;
24250: LD_ADDR_VAR 0 10
24254: PUSH
24255: LD_VAR 0 8
24259: PPUSH
24260: LD_VAR 0 1
24264: PPUSH
24265: CALL_OW 74
24269: ST_TO_ADDR
// if not enemy then
24270: LD_VAR 0 10
24274: NOT
24275: IFFALSE 24279
// exit ;
24277: GO 24680
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
24279: LD_VAR 0 11
24283: PUSH
24284: LD_VAR 0 11
24288: PPUSH
24289: LD_VAR 0 10
24293: PPUSH
24294: CALL_OW 296
24298: PUSH
24299: LD_INT 13
24301: GREATER
24302: AND
24303: PUSH
24304: LD_VAR 0 1
24308: PPUSH
24309: LD_VAR 0 10
24313: PPUSH
24314: CALL_OW 296
24318: PUSH
24319: LD_INT 12
24321: GREATER
24322: OR
24323: IFFALSE 24327
// exit ;
24325: GO 24680
// missile := [ 1 ] ;
24327: LD_ADDR_VAR 0 14
24331: PUSH
24332: LD_INT 1
24334: PUSH
24335: EMPTY
24336: LIST
24337: ST_TO_ADDR
// if Researched ( side , tech_space ) then
24338: LD_VAR 0 9
24342: PPUSH
24343: LD_VAR 0 12
24347: PPUSH
24348: CALL_OW 325
24352: IFFALSE 24381
// missile := Insert ( missile , missile + 1 , 2 ) ;
24354: LD_ADDR_VAR 0 14
24358: PUSH
24359: LD_VAR 0 14
24363: PPUSH
24364: LD_VAR 0 14
24368: PUSH
24369: LD_INT 1
24371: PLUS
24372: PPUSH
24373: LD_INT 2
24375: PPUSH
24376: CALL_OW 2
24380: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
24381: LD_VAR 0 9
24385: PPUSH
24386: LD_VAR 0 13
24390: PPUSH
24391: CALL_OW 325
24395: PUSH
24396: LD_VAR 0 10
24400: PPUSH
24401: CALL_OW 255
24405: PPUSH
24406: LD_VAR 0 13
24410: PPUSH
24411: CALL_OW 325
24415: NOT
24416: AND
24417: IFFALSE 24446
// missile := Insert ( missile , missile + 1 , 3 ) ;
24419: LD_ADDR_VAR 0 14
24423: PUSH
24424: LD_VAR 0 14
24428: PPUSH
24429: LD_VAR 0 14
24433: PUSH
24434: LD_INT 1
24436: PLUS
24437: PPUSH
24438: LD_INT 3
24440: PPUSH
24441: CALL_OW 2
24445: ST_TO_ADDR
// if missile < 2 then
24446: LD_VAR 0 14
24450: PUSH
24451: LD_INT 2
24453: LESS
24454: IFFALSE 24458
// exit ;
24456: GO 24680
// x := GetX ( enemy ) ;
24458: LD_ADDR_VAR 0 4
24462: PUSH
24463: LD_VAR 0 10
24467: PPUSH
24468: CALL_OW 250
24472: ST_TO_ADDR
// y := GetY ( enemy ) ;
24473: LD_ADDR_VAR 0 5
24477: PUSH
24478: LD_VAR 0 10
24482: PPUSH
24483: CALL_OW 251
24487: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
24488: LD_ADDR_VAR 0 6
24492: PUSH
24493: LD_VAR 0 4
24497: PUSH
24498: LD_INT 1
24500: NEG
24501: PPUSH
24502: LD_INT 1
24504: PPUSH
24505: CALL_OW 12
24509: PLUS
24510: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
24511: LD_ADDR_VAR 0 7
24515: PUSH
24516: LD_VAR 0 5
24520: PUSH
24521: LD_INT 1
24523: NEG
24524: PPUSH
24525: LD_INT 1
24527: PPUSH
24528: CALL_OW 12
24532: PLUS
24533: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24534: LD_VAR 0 6
24538: PPUSH
24539: LD_VAR 0 7
24543: PPUSH
24544: CALL_OW 488
24548: NOT
24549: IFFALSE 24571
// begin _x := x ;
24551: LD_ADDR_VAR 0 6
24555: PUSH
24556: LD_VAR 0 4
24560: ST_TO_ADDR
// _y := y ;
24561: LD_ADDR_VAR 0 7
24565: PUSH
24566: LD_VAR 0 5
24570: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
24571: LD_ADDR_VAR 0 3
24575: PUSH
24576: LD_INT 1
24578: PPUSH
24579: LD_VAR 0 14
24583: PPUSH
24584: CALL_OW 12
24588: ST_TO_ADDR
// case i of 1 :
24589: LD_VAR 0 3
24593: PUSH
24594: LD_INT 1
24596: DOUBLE
24597: EQUAL
24598: IFTRUE 24602
24600: GO 24619
24602: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
24603: LD_VAR 0 1
24607: PPUSH
24608: LD_VAR 0 10
24612: PPUSH
24613: CALL_OW 115
24617: GO 24680
24619: LD_INT 2
24621: DOUBLE
24622: EQUAL
24623: IFTRUE 24627
24625: GO 24649
24627: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
24628: LD_VAR 0 1
24632: PPUSH
24633: LD_VAR 0 6
24637: PPUSH
24638: LD_VAR 0 7
24642: PPUSH
24643: CALL_OW 153
24647: GO 24680
24649: LD_INT 3
24651: DOUBLE
24652: EQUAL
24653: IFTRUE 24657
24655: GO 24679
24657: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
24658: LD_VAR 0 1
24662: PPUSH
24663: LD_VAR 0 6
24667: PPUSH
24668: LD_VAR 0 7
24672: PPUSH
24673: CALL_OW 154
24677: GO 24680
24679: POP
// end ;
24680: LD_VAR 0 2
24684: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
24685: LD_INT 0
24687: PPUSH
24688: PPUSH
24689: PPUSH
24690: PPUSH
24691: PPUSH
24692: PPUSH
// if not unit or not building then
24693: LD_VAR 0 1
24697: NOT
24698: PUSH
24699: LD_VAR 0 2
24703: NOT
24704: OR
24705: IFFALSE 24709
// exit ;
24707: GO 24867
// x := GetX ( building ) ;
24709: LD_ADDR_VAR 0 5
24713: PUSH
24714: LD_VAR 0 2
24718: PPUSH
24719: CALL_OW 250
24723: ST_TO_ADDR
// y := GetY ( building ) ;
24724: LD_ADDR_VAR 0 6
24728: PUSH
24729: LD_VAR 0 2
24733: PPUSH
24734: CALL_OW 251
24738: ST_TO_ADDR
// for i = 0 to 5 do
24739: LD_ADDR_VAR 0 4
24743: PUSH
24744: DOUBLE
24745: LD_INT 0
24747: DEC
24748: ST_TO_ADDR
24749: LD_INT 5
24751: PUSH
24752: FOR_TO
24753: IFFALSE 24865
// begin _x := ShiftX ( x , i , 3 ) ;
24755: LD_ADDR_VAR 0 7
24759: PUSH
24760: LD_VAR 0 5
24764: PPUSH
24765: LD_VAR 0 4
24769: PPUSH
24770: LD_INT 3
24772: PPUSH
24773: CALL_OW 272
24777: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
24778: LD_ADDR_VAR 0 8
24782: PUSH
24783: LD_VAR 0 6
24787: PPUSH
24788: LD_VAR 0 4
24792: PPUSH
24793: LD_INT 3
24795: PPUSH
24796: CALL_OW 273
24800: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24801: LD_VAR 0 7
24805: PPUSH
24806: LD_VAR 0 8
24810: PPUSH
24811: CALL_OW 488
24815: NOT
24816: IFFALSE 24820
// continue ;
24818: GO 24752
// if HexInfo ( _x , _y ) = 0 then
24820: LD_VAR 0 7
24824: PPUSH
24825: LD_VAR 0 8
24829: PPUSH
24830: CALL_OW 428
24834: PUSH
24835: LD_INT 0
24837: EQUAL
24838: IFFALSE 24863
// begin ComMoveXY ( unit , _x , _y ) ;
24840: LD_VAR 0 1
24844: PPUSH
24845: LD_VAR 0 7
24849: PPUSH
24850: LD_VAR 0 8
24854: PPUSH
24855: CALL_OW 111
// exit ;
24859: POP
24860: POP
24861: GO 24867
// end ; end ;
24863: GO 24752
24865: POP
24866: POP
// end ;
24867: LD_VAR 0 3
24871: RET
// export function ScanBase ( side , base_area ) ; begin
24872: LD_INT 0
24874: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
24875: LD_ADDR_VAR 0 3
24879: PUSH
24880: LD_VAR 0 2
24884: PPUSH
24885: LD_INT 81
24887: PUSH
24888: LD_VAR 0 1
24892: PUSH
24893: EMPTY
24894: LIST
24895: LIST
24896: PPUSH
24897: CALL_OW 70
24901: ST_TO_ADDR
// end ;
24902: LD_VAR 0 3
24906: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
24907: LD_INT 0
24909: PPUSH
24910: PPUSH
24911: PPUSH
24912: PPUSH
// result := false ;
24913: LD_ADDR_VAR 0 2
24917: PUSH
24918: LD_INT 0
24920: ST_TO_ADDR
// side := GetSide ( unit ) ;
24921: LD_ADDR_VAR 0 3
24925: PUSH
24926: LD_VAR 0 1
24930: PPUSH
24931: CALL_OW 255
24935: ST_TO_ADDR
// nat := GetNation ( unit ) ;
24936: LD_ADDR_VAR 0 4
24940: PUSH
24941: LD_VAR 0 1
24945: PPUSH
24946: CALL_OW 248
24950: ST_TO_ADDR
// case nat of 1 :
24951: LD_VAR 0 4
24955: PUSH
24956: LD_INT 1
24958: DOUBLE
24959: EQUAL
24960: IFTRUE 24964
24962: GO 24975
24964: POP
// tech := tech_lassight ; 2 :
24965: LD_ADDR_VAR 0 5
24969: PUSH
24970: LD_INT 12
24972: ST_TO_ADDR
24973: GO 25014
24975: LD_INT 2
24977: DOUBLE
24978: EQUAL
24979: IFTRUE 24983
24981: GO 24994
24983: POP
// tech := tech_mortar ; 3 :
24984: LD_ADDR_VAR 0 5
24988: PUSH
24989: LD_INT 41
24991: ST_TO_ADDR
24992: GO 25014
24994: LD_INT 3
24996: DOUBLE
24997: EQUAL
24998: IFTRUE 25002
25000: GO 25013
25002: POP
// tech := tech_bazooka ; end ;
25003: LD_ADDR_VAR 0 5
25007: PUSH
25008: LD_INT 44
25010: ST_TO_ADDR
25011: GO 25014
25013: POP
// if Researched ( side , tech ) then
25014: LD_VAR 0 3
25018: PPUSH
25019: LD_VAR 0 5
25023: PPUSH
25024: CALL_OW 325
25028: IFFALSE 25055
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
25030: LD_ADDR_VAR 0 2
25034: PUSH
25035: LD_INT 5
25037: PUSH
25038: LD_INT 8
25040: PUSH
25041: LD_INT 9
25043: PUSH
25044: EMPTY
25045: LIST
25046: LIST
25047: LIST
25048: PUSH
25049: LD_VAR 0 4
25053: ARRAY
25054: ST_TO_ADDR
// end ;
25055: LD_VAR 0 2
25059: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
25060: LD_INT 0
25062: PPUSH
25063: PPUSH
25064: PPUSH
// if not mines then
25065: LD_VAR 0 2
25069: NOT
25070: IFFALSE 25074
// exit ;
25072: GO 25218
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25074: LD_ADDR_VAR 0 5
25078: PUSH
25079: LD_INT 81
25081: PUSH
25082: LD_VAR 0 1
25086: PUSH
25087: EMPTY
25088: LIST
25089: LIST
25090: PUSH
25091: LD_INT 3
25093: PUSH
25094: LD_INT 21
25096: PUSH
25097: LD_INT 3
25099: PUSH
25100: EMPTY
25101: LIST
25102: LIST
25103: PUSH
25104: EMPTY
25105: LIST
25106: LIST
25107: PUSH
25108: EMPTY
25109: LIST
25110: LIST
25111: PPUSH
25112: CALL_OW 69
25116: ST_TO_ADDR
// for i in mines do
25117: LD_ADDR_VAR 0 4
25121: PUSH
25122: LD_VAR 0 2
25126: PUSH
25127: FOR_IN
25128: IFFALSE 25216
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
25130: LD_VAR 0 4
25134: PUSH
25135: LD_INT 1
25137: ARRAY
25138: PPUSH
25139: LD_VAR 0 4
25143: PUSH
25144: LD_INT 2
25146: ARRAY
25147: PPUSH
25148: CALL_OW 458
25152: NOT
25153: IFFALSE 25157
// continue ;
25155: GO 25127
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
25157: LD_VAR 0 4
25161: PUSH
25162: LD_INT 1
25164: ARRAY
25165: PPUSH
25166: LD_VAR 0 4
25170: PUSH
25171: LD_INT 2
25173: ARRAY
25174: PPUSH
25175: CALL_OW 428
25179: PUSH
25180: LD_VAR 0 5
25184: IN
25185: IFFALSE 25214
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
25187: LD_VAR 0 4
25191: PUSH
25192: LD_INT 1
25194: ARRAY
25195: PPUSH
25196: LD_VAR 0 4
25200: PUSH
25201: LD_INT 2
25203: ARRAY
25204: PPUSH
25205: LD_VAR 0 1
25209: PPUSH
25210: CALL_OW 456
// end ;
25214: GO 25127
25216: POP
25217: POP
// end ;
25218: LD_VAR 0 3
25222: RET
// export function Count ( array ) ; var i ; begin
25223: LD_INT 0
25225: PPUSH
25226: PPUSH
// result := 0 ;
25227: LD_ADDR_VAR 0 2
25231: PUSH
25232: LD_INT 0
25234: ST_TO_ADDR
// for i in array do
25235: LD_ADDR_VAR 0 3
25239: PUSH
25240: LD_VAR 0 1
25244: PUSH
25245: FOR_IN
25246: IFFALSE 25270
// if i then
25248: LD_VAR 0 3
25252: IFFALSE 25268
// result := result + 1 ;
25254: LD_ADDR_VAR 0 2
25258: PUSH
25259: LD_VAR 0 2
25263: PUSH
25264: LD_INT 1
25266: PLUS
25267: ST_TO_ADDR
25268: GO 25245
25270: POP
25271: POP
// end ;
25272: LD_VAR 0 2
25276: RET
// export function IsEmpty ( building ) ; begin
25277: LD_INT 0
25279: PPUSH
// if not building then
25280: LD_VAR 0 1
25284: NOT
25285: IFFALSE 25289
// exit ;
25287: GO 25332
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
25289: LD_ADDR_VAR 0 2
25293: PUSH
25294: LD_VAR 0 1
25298: PUSH
25299: LD_INT 22
25301: PUSH
25302: LD_VAR 0 1
25306: PPUSH
25307: CALL_OW 255
25311: PUSH
25312: EMPTY
25313: LIST
25314: LIST
25315: PUSH
25316: LD_INT 58
25318: PUSH
25319: EMPTY
25320: LIST
25321: PUSH
25322: EMPTY
25323: LIST
25324: LIST
25325: PPUSH
25326: CALL_OW 69
25330: IN
25331: ST_TO_ADDR
// end ;
25332: LD_VAR 0 2
25336: RET
// export function IsNotFull ( building ) ; begin
25337: LD_INT 0
25339: PPUSH
// if not building then
25340: LD_VAR 0 1
25344: NOT
25345: IFFALSE 25349
// exit ;
25347: GO 25368
// result := UnitsInside ( building ) < 6 ;
25349: LD_ADDR_VAR 0 2
25353: PUSH
25354: LD_VAR 0 1
25358: PPUSH
25359: CALL_OW 313
25363: PUSH
25364: LD_INT 6
25366: LESS
25367: ST_TO_ADDR
// end ;
25368: LD_VAR 0 2
25372: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
25373: LD_INT 0
25375: PPUSH
25376: PPUSH
25377: PPUSH
25378: PPUSH
// tmp := [ ] ;
25379: LD_ADDR_VAR 0 3
25383: PUSH
25384: EMPTY
25385: ST_TO_ADDR
// list := [ ] ;
25386: LD_ADDR_VAR 0 5
25390: PUSH
25391: EMPTY
25392: ST_TO_ADDR
// for i = 16 to 25 do
25393: LD_ADDR_VAR 0 4
25397: PUSH
25398: DOUBLE
25399: LD_INT 16
25401: DEC
25402: ST_TO_ADDR
25403: LD_INT 25
25405: PUSH
25406: FOR_TO
25407: IFFALSE 25480
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
25409: LD_ADDR_VAR 0 3
25413: PUSH
25414: LD_VAR 0 3
25418: PUSH
25419: LD_INT 22
25421: PUSH
25422: LD_VAR 0 1
25426: PPUSH
25427: CALL_OW 255
25431: PUSH
25432: EMPTY
25433: LIST
25434: LIST
25435: PUSH
25436: LD_INT 91
25438: PUSH
25439: LD_VAR 0 1
25443: PUSH
25444: LD_INT 6
25446: PUSH
25447: EMPTY
25448: LIST
25449: LIST
25450: LIST
25451: PUSH
25452: LD_INT 30
25454: PUSH
25455: LD_VAR 0 4
25459: PUSH
25460: EMPTY
25461: LIST
25462: LIST
25463: PUSH
25464: EMPTY
25465: LIST
25466: LIST
25467: LIST
25468: PUSH
25469: EMPTY
25470: LIST
25471: PPUSH
25472: CALL_OW 69
25476: ADD
25477: ST_TO_ADDR
25478: GO 25406
25480: POP
25481: POP
// for i = 1 to tmp do
25482: LD_ADDR_VAR 0 4
25486: PUSH
25487: DOUBLE
25488: LD_INT 1
25490: DEC
25491: ST_TO_ADDR
25492: LD_VAR 0 3
25496: PUSH
25497: FOR_TO
25498: IFFALSE 25586
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
25500: LD_ADDR_VAR 0 5
25504: PUSH
25505: LD_VAR 0 5
25509: PUSH
25510: LD_VAR 0 3
25514: PUSH
25515: LD_VAR 0 4
25519: ARRAY
25520: PPUSH
25521: CALL_OW 266
25525: PUSH
25526: LD_VAR 0 3
25530: PUSH
25531: LD_VAR 0 4
25535: ARRAY
25536: PPUSH
25537: CALL_OW 250
25541: PUSH
25542: LD_VAR 0 3
25546: PUSH
25547: LD_VAR 0 4
25551: ARRAY
25552: PPUSH
25553: CALL_OW 251
25557: PUSH
25558: LD_VAR 0 3
25562: PUSH
25563: LD_VAR 0 4
25567: ARRAY
25568: PPUSH
25569: CALL_OW 254
25573: PUSH
25574: EMPTY
25575: LIST
25576: LIST
25577: LIST
25578: LIST
25579: PUSH
25580: EMPTY
25581: LIST
25582: ADD
25583: ST_TO_ADDR
25584: GO 25497
25586: POP
25587: POP
// result := list ;
25588: LD_ADDR_VAR 0 2
25592: PUSH
25593: LD_VAR 0 5
25597: ST_TO_ADDR
// end ;
25598: LD_VAR 0 2
25602: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
25603: LD_INT 0
25605: PPUSH
25606: PPUSH
25607: PPUSH
25608: PPUSH
25609: PPUSH
25610: PPUSH
25611: PPUSH
// if not factory then
25612: LD_VAR 0 1
25616: NOT
25617: IFFALSE 25621
// exit ;
25619: GO 26214
// if control = control_apeman then
25621: LD_VAR 0 4
25625: PUSH
25626: LD_INT 5
25628: EQUAL
25629: IFFALSE 25738
// begin tmp := UnitsInside ( factory ) ;
25631: LD_ADDR_VAR 0 8
25635: PUSH
25636: LD_VAR 0 1
25640: PPUSH
25641: CALL_OW 313
25645: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
25646: LD_VAR 0 8
25650: PPUSH
25651: LD_INT 25
25653: PUSH
25654: LD_INT 12
25656: PUSH
25657: EMPTY
25658: LIST
25659: LIST
25660: PPUSH
25661: CALL_OW 72
25665: NOT
25666: IFFALSE 25676
// control := control_manual ;
25668: LD_ADDR_VAR 0 4
25672: PUSH
25673: LD_INT 1
25675: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
25676: LD_ADDR_VAR 0 8
25680: PUSH
25681: LD_VAR 0 1
25685: PPUSH
25686: CALL 25373 0 1
25690: ST_TO_ADDR
// if tmp then
25691: LD_VAR 0 8
25695: IFFALSE 25738
// begin for i in tmp do
25697: LD_ADDR_VAR 0 7
25701: PUSH
25702: LD_VAR 0 8
25706: PUSH
25707: FOR_IN
25708: IFFALSE 25736
// if i [ 1 ] = b_ext_radio then
25710: LD_VAR 0 7
25714: PUSH
25715: LD_INT 1
25717: ARRAY
25718: PUSH
25719: LD_INT 22
25721: EQUAL
25722: IFFALSE 25734
// begin control := control_remote ;
25724: LD_ADDR_VAR 0 4
25728: PUSH
25729: LD_INT 2
25731: ST_TO_ADDR
// break ;
25732: GO 25736
// end ;
25734: GO 25707
25736: POP
25737: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
25738: LD_VAR 0 1
25742: PPUSH
25743: LD_VAR 0 2
25747: PPUSH
25748: LD_VAR 0 3
25752: PPUSH
25753: LD_VAR 0 4
25757: PPUSH
25758: LD_VAR 0 5
25762: PPUSH
25763: CALL_OW 448
25767: IFFALSE 25802
// begin result := [ chassis , engine , control , weapon ] ;
25769: LD_ADDR_VAR 0 6
25773: PUSH
25774: LD_VAR 0 2
25778: PUSH
25779: LD_VAR 0 3
25783: PUSH
25784: LD_VAR 0 4
25788: PUSH
25789: LD_VAR 0 5
25793: PUSH
25794: EMPTY
25795: LIST
25796: LIST
25797: LIST
25798: LIST
25799: ST_TO_ADDR
// exit ;
25800: GO 26214
// end ; _chassis := AvailableChassisList ( factory ) ;
25802: LD_ADDR_VAR 0 9
25806: PUSH
25807: LD_VAR 0 1
25811: PPUSH
25812: CALL_OW 475
25816: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
25817: LD_ADDR_VAR 0 11
25821: PUSH
25822: LD_VAR 0 1
25826: PPUSH
25827: CALL_OW 476
25831: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
25832: LD_ADDR_VAR 0 12
25836: PUSH
25837: LD_VAR 0 1
25841: PPUSH
25842: CALL_OW 477
25846: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
25847: LD_ADDR_VAR 0 10
25851: PUSH
25852: LD_VAR 0 1
25856: PPUSH
25857: CALL_OW 478
25861: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
25862: LD_VAR 0 9
25866: NOT
25867: PUSH
25868: LD_VAR 0 11
25872: NOT
25873: OR
25874: PUSH
25875: LD_VAR 0 12
25879: NOT
25880: OR
25881: PUSH
25882: LD_VAR 0 10
25886: NOT
25887: OR
25888: IFFALSE 25923
// begin result := [ chassis , engine , control , weapon ] ;
25890: LD_ADDR_VAR 0 6
25894: PUSH
25895: LD_VAR 0 2
25899: PUSH
25900: LD_VAR 0 3
25904: PUSH
25905: LD_VAR 0 4
25909: PUSH
25910: LD_VAR 0 5
25914: PUSH
25915: EMPTY
25916: LIST
25917: LIST
25918: LIST
25919: LIST
25920: ST_TO_ADDR
// exit ;
25921: GO 26214
// end ; if not chassis in _chassis then
25923: LD_VAR 0 2
25927: PUSH
25928: LD_VAR 0 9
25932: IN
25933: NOT
25934: IFFALSE 25960
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
25936: LD_ADDR_VAR 0 2
25940: PUSH
25941: LD_VAR 0 9
25945: PUSH
25946: LD_INT 1
25948: PPUSH
25949: LD_VAR 0 9
25953: PPUSH
25954: CALL_OW 12
25958: ARRAY
25959: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
25960: LD_VAR 0 2
25964: PPUSH
25965: LD_VAR 0 3
25969: PPUSH
25970: CALL 26219 0 2
25974: NOT
25975: IFFALSE 26034
// repeat engine := _engine [ 1 ] ;
25977: LD_ADDR_VAR 0 3
25981: PUSH
25982: LD_VAR 0 11
25986: PUSH
25987: LD_INT 1
25989: ARRAY
25990: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
25991: LD_ADDR_VAR 0 11
25995: PUSH
25996: LD_VAR 0 11
26000: PPUSH
26001: LD_INT 1
26003: PPUSH
26004: CALL_OW 3
26008: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
26009: LD_VAR 0 2
26013: PPUSH
26014: LD_VAR 0 3
26018: PPUSH
26019: CALL 26219 0 2
26023: PUSH
26024: LD_VAR 0 11
26028: PUSH
26029: EMPTY
26030: EQUAL
26031: OR
26032: IFFALSE 25977
// if not control in _control then
26034: LD_VAR 0 4
26038: PUSH
26039: LD_VAR 0 12
26043: IN
26044: NOT
26045: IFFALSE 26071
// control := _control [ rand ( 1 , _control ) ] ;
26047: LD_ADDR_VAR 0 4
26051: PUSH
26052: LD_VAR 0 12
26056: PUSH
26057: LD_INT 1
26059: PPUSH
26060: LD_VAR 0 12
26064: PPUSH
26065: CALL_OW 12
26069: ARRAY
26070: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
26071: LD_VAR 0 2
26075: PPUSH
26076: LD_VAR 0 5
26080: PPUSH
26081: CALL 26439 0 2
26085: NOT
26086: IFFALSE 26145
// repeat weapon := _weapon [ 1 ] ;
26088: LD_ADDR_VAR 0 5
26092: PUSH
26093: LD_VAR 0 10
26097: PUSH
26098: LD_INT 1
26100: ARRAY
26101: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
26102: LD_ADDR_VAR 0 10
26106: PUSH
26107: LD_VAR 0 10
26111: PPUSH
26112: LD_INT 1
26114: PPUSH
26115: CALL_OW 3
26119: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
26120: LD_VAR 0 2
26124: PPUSH
26125: LD_VAR 0 5
26129: PPUSH
26130: CALL 26439 0 2
26134: PUSH
26135: LD_VAR 0 10
26139: PUSH
26140: EMPTY
26141: EQUAL
26142: OR
26143: IFFALSE 26088
// result := [ ] ;
26145: LD_ADDR_VAR 0 6
26149: PUSH
26150: EMPTY
26151: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26152: LD_VAR 0 1
26156: PPUSH
26157: LD_VAR 0 2
26161: PPUSH
26162: LD_VAR 0 3
26166: PPUSH
26167: LD_VAR 0 4
26171: PPUSH
26172: LD_VAR 0 5
26176: PPUSH
26177: CALL_OW 448
26181: IFFALSE 26214
// result := [ chassis , engine , control , weapon ] ;
26183: LD_ADDR_VAR 0 6
26187: PUSH
26188: LD_VAR 0 2
26192: PUSH
26193: LD_VAR 0 3
26197: PUSH
26198: LD_VAR 0 4
26202: PUSH
26203: LD_VAR 0 5
26207: PUSH
26208: EMPTY
26209: LIST
26210: LIST
26211: LIST
26212: LIST
26213: ST_TO_ADDR
// end ;
26214: LD_VAR 0 6
26218: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
26219: LD_INT 0
26221: PPUSH
// if not chassis or not engine then
26222: LD_VAR 0 1
26226: NOT
26227: PUSH
26228: LD_VAR 0 2
26232: NOT
26233: OR
26234: IFFALSE 26238
// exit ;
26236: GO 26434
// case engine of engine_solar :
26238: LD_VAR 0 2
26242: PUSH
26243: LD_INT 2
26245: DOUBLE
26246: EQUAL
26247: IFTRUE 26251
26249: GO 26289
26251: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
26252: LD_ADDR_VAR 0 3
26256: PUSH
26257: LD_INT 11
26259: PUSH
26260: LD_INT 12
26262: PUSH
26263: LD_INT 13
26265: PUSH
26266: LD_INT 14
26268: PUSH
26269: LD_INT 1
26271: PUSH
26272: LD_INT 2
26274: PUSH
26275: LD_INT 3
26277: PUSH
26278: EMPTY
26279: LIST
26280: LIST
26281: LIST
26282: LIST
26283: LIST
26284: LIST
26285: LIST
26286: ST_TO_ADDR
26287: GO 26418
26289: LD_INT 1
26291: DOUBLE
26292: EQUAL
26293: IFTRUE 26297
26295: GO 26359
26297: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
26298: LD_ADDR_VAR 0 3
26302: PUSH
26303: LD_INT 11
26305: PUSH
26306: LD_INT 12
26308: PUSH
26309: LD_INT 13
26311: PUSH
26312: LD_INT 14
26314: PUSH
26315: LD_INT 1
26317: PUSH
26318: LD_INT 2
26320: PUSH
26321: LD_INT 3
26323: PUSH
26324: LD_INT 4
26326: PUSH
26327: LD_INT 5
26329: PUSH
26330: LD_INT 21
26332: PUSH
26333: LD_INT 23
26335: PUSH
26336: LD_INT 22
26338: PUSH
26339: LD_INT 24
26341: PUSH
26342: EMPTY
26343: LIST
26344: LIST
26345: LIST
26346: LIST
26347: LIST
26348: LIST
26349: LIST
26350: LIST
26351: LIST
26352: LIST
26353: LIST
26354: LIST
26355: LIST
26356: ST_TO_ADDR
26357: GO 26418
26359: LD_INT 3
26361: DOUBLE
26362: EQUAL
26363: IFTRUE 26367
26365: GO 26417
26367: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26368: LD_ADDR_VAR 0 3
26372: PUSH
26373: LD_INT 13
26375: PUSH
26376: LD_INT 14
26378: PUSH
26379: LD_INT 2
26381: PUSH
26382: LD_INT 3
26384: PUSH
26385: LD_INT 4
26387: PUSH
26388: LD_INT 5
26390: PUSH
26391: LD_INT 21
26393: PUSH
26394: LD_INT 22
26396: PUSH
26397: LD_INT 23
26399: PUSH
26400: LD_INT 24
26402: PUSH
26403: EMPTY
26404: LIST
26405: LIST
26406: LIST
26407: LIST
26408: LIST
26409: LIST
26410: LIST
26411: LIST
26412: LIST
26413: LIST
26414: ST_TO_ADDR
26415: GO 26418
26417: POP
// result := ( chassis in result ) ;
26418: LD_ADDR_VAR 0 3
26422: PUSH
26423: LD_VAR 0 1
26427: PUSH
26428: LD_VAR 0 3
26432: IN
26433: ST_TO_ADDR
// end ;
26434: LD_VAR 0 3
26438: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
26439: LD_INT 0
26441: PPUSH
// if not chassis or not weapon then
26442: LD_VAR 0 1
26446: NOT
26447: PUSH
26448: LD_VAR 0 2
26452: NOT
26453: OR
26454: IFFALSE 26458
// exit ;
26456: GO 27484
// case weapon of us_machine_gun :
26458: LD_VAR 0 2
26462: PUSH
26463: LD_INT 2
26465: DOUBLE
26466: EQUAL
26467: IFTRUE 26471
26469: GO 26501
26471: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
26472: LD_ADDR_VAR 0 3
26476: PUSH
26477: LD_INT 1
26479: PUSH
26480: LD_INT 2
26482: PUSH
26483: LD_INT 3
26485: PUSH
26486: LD_INT 4
26488: PUSH
26489: LD_INT 5
26491: PUSH
26492: EMPTY
26493: LIST
26494: LIST
26495: LIST
26496: LIST
26497: LIST
26498: ST_TO_ADDR
26499: GO 27468
26501: LD_INT 3
26503: DOUBLE
26504: EQUAL
26505: IFTRUE 26509
26507: GO 26539
26509: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
26510: LD_ADDR_VAR 0 3
26514: PUSH
26515: LD_INT 1
26517: PUSH
26518: LD_INT 2
26520: PUSH
26521: LD_INT 3
26523: PUSH
26524: LD_INT 4
26526: PUSH
26527: LD_INT 5
26529: PUSH
26530: EMPTY
26531: LIST
26532: LIST
26533: LIST
26534: LIST
26535: LIST
26536: ST_TO_ADDR
26537: GO 27468
26539: LD_INT 11
26541: DOUBLE
26542: EQUAL
26543: IFTRUE 26547
26545: GO 26577
26547: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
26548: LD_ADDR_VAR 0 3
26552: PUSH
26553: LD_INT 1
26555: PUSH
26556: LD_INT 2
26558: PUSH
26559: LD_INT 3
26561: PUSH
26562: LD_INT 4
26564: PUSH
26565: LD_INT 5
26567: PUSH
26568: EMPTY
26569: LIST
26570: LIST
26571: LIST
26572: LIST
26573: LIST
26574: ST_TO_ADDR
26575: GO 27468
26577: LD_INT 4
26579: DOUBLE
26580: EQUAL
26581: IFTRUE 26585
26583: GO 26611
26585: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
26586: LD_ADDR_VAR 0 3
26590: PUSH
26591: LD_INT 2
26593: PUSH
26594: LD_INT 3
26596: PUSH
26597: LD_INT 4
26599: PUSH
26600: LD_INT 5
26602: PUSH
26603: EMPTY
26604: LIST
26605: LIST
26606: LIST
26607: LIST
26608: ST_TO_ADDR
26609: GO 27468
26611: LD_INT 5
26613: DOUBLE
26614: EQUAL
26615: IFTRUE 26619
26617: GO 26645
26619: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
26620: LD_ADDR_VAR 0 3
26624: PUSH
26625: LD_INT 2
26627: PUSH
26628: LD_INT 3
26630: PUSH
26631: LD_INT 4
26633: PUSH
26634: LD_INT 5
26636: PUSH
26637: EMPTY
26638: LIST
26639: LIST
26640: LIST
26641: LIST
26642: ST_TO_ADDR
26643: GO 27468
26645: LD_INT 9
26647: DOUBLE
26648: EQUAL
26649: IFTRUE 26653
26651: GO 26679
26653: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
26654: LD_ADDR_VAR 0 3
26658: PUSH
26659: LD_INT 2
26661: PUSH
26662: LD_INT 3
26664: PUSH
26665: LD_INT 4
26667: PUSH
26668: LD_INT 5
26670: PUSH
26671: EMPTY
26672: LIST
26673: LIST
26674: LIST
26675: LIST
26676: ST_TO_ADDR
26677: GO 27468
26679: LD_INT 7
26681: DOUBLE
26682: EQUAL
26683: IFTRUE 26687
26685: GO 26713
26687: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
26688: LD_ADDR_VAR 0 3
26692: PUSH
26693: LD_INT 2
26695: PUSH
26696: LD_INT 3
26698: PUSH
26699: LD_INT 4
26701: PUSH
26702: LD_INT 5
26704: PUSH
26705: EMPTY
26706: LIST
26707: LIST
26708: LIST
26709: LIST
26710: ST_TO_ADDR
26711: GO 27468
26713: LD_INT 12
26715: DOUBLE
26716: EQUAL
26717: IFTRUE 26721
26719: GO 26747
26721: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
26722: LD_ADDR_VAR 0 3
26726: PUSH
26727: LD_INT 2
26729: PUSH
26730: LD_INT 3
26732: PUSH
26733: LD_INT 4
26735: PUSH
26736: LD_INT 5
26738: PUSH
26739: EMPTY
26740: LIST
26741: LIST
26742: LIST
26743: LIST
26744: ST_TO_ADDR
26745: GO 27468
26747: LD_INT 13
26749: DOUBLE
26750: EQUAL
26751: IFTRUE 26755
26753: GO 26781
26755: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
26756: LD_ADDR_VAR 0 3
26760: PUSH
26761: LD_INT 2
26763: PUSH
26764: LD_INT 3
26766: PUSH
26767: LD_INT 4
26769: PUSH
26770: LD_INT 5
26772: PUSH
26773: EMPTY
26774: LIST
26775: LIST
26776: LIST
26777: LIST
26778: ST_TO_ADDR
26779: GO 27468
26781: LD_INT 14
26783: DOUBLE
26784: EQUAL
26785: IFTRUE 26789
26787: GO 26807
26789: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
26790: LD_ADDR_VAR 0 3
26794: PUSH
26795: LD_INT 4
26797: PUSH
26798: LD_INT 5
26800: PUSH
26801: EMPTY
26802: LIST
26803: LIST
26804: ST_TO_ADDR
26805: GO 27468
26807: LD_INT 6
26809: DOUBLE
26810: EQUAL
26811: IFTRUE 26815
26813: GO 26833
26815: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
26816: LD_ADDR_VAR 0 3
26820: PUSH
26821: LD_INT 4
26823: PUSH
26824: LD_INT 5
26826: PUSH
26827: EMPTY
26828: LIST
26829: LIST
26830: ST_TO_ADDR
26831: GO 27468
26833: LD_INT 10
26835: DOUBLE
26836: EQUAL
26837: IFTRUE 26841
26839: GO 26859
26841: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
26842: LD_ADDR_VAR 0 3
26846: PUSH
26847: LD_INT 4
26849: PUSH
26850: LD_INT 5
26852: PUSH
26853: EMPTY
26854: LIST
26855: LIST
26856: ST_TO_ADDR
26857: GO 27468
26859: LD_INT 22
26861: DOUBLE
26862: EQUAL
26863: IFTRUE 26867
26865: GO 26893
26867: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
26868: LD_ADDR_VAR 0 3
26872: PUSH
26873: LD_INT 11
26875: PUSH
26876: LD_INT 12
26878: PUSH
26879: LD_INT 13
26881: PUSH
26882: LD_INT 14
26884: PUSH
26885: EMPTY
26886: LIST
26887: LIST
26888: LIST
26889: LIST
26890: ST_TO_ADDR
26891: GO 27468
26893: LD_INT 23
26895: DOUBLE
26896: EQUAL
26897: IFTRUE 26901
26899: GO 26927
26901: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
26902: LD_ADDR_VAR 0 3
26906: PUSH
26907: LD_INT 11
26909: PUSH
26910: LD_INT 12
26912: PUSH
26913: LD_INT 13
26915: PUSH
26916: LD_INT 14
26918: PUSH
26919: EMPTY
26920: LIST
26921: LIST
26922: LIST
26923: LIST
26924: ST_TO_ADDR
26925: GO 27468
26927: LD_INT 24
26929: DOUBLE
26930: EQUAL
26931: IFTRUE 26935
26933: GO 26961
26935: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
26936: LD_ADDR_VAR 0 3
26940: PUSH
26941: LD_INT 11
26943: PUSH
26944: LD_INT 12
26946: PUSH
26947: LD_INT 13
26949: PUSH
26950: LD_INT 14
26952: PUSH
26953: EMPTY
26954: LIST
26955: LIST
26956: LIST
26957: LIST
26958: ST_TO_ADDR
26959: GO 27468
26961: LD_INT 30
26963: DOUBLE
26964: EQUAL
26965: IFTRUE 26969
26967: GO 26995
26969: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
26970: LD_ADDR_VAR 0 3
26974: PUSH
26975: LD_INT 11
26977: PUSH
26978: LD_INT 12
26980: PUSH
26981: LD_INT 13
26983: PUSH
26984: LD_INT 14
26986: PUSH
26987: EMPTY
26988: LIST
26989: LIST
26990: LIST
26991: LIST
26992: ST_TO_ADDR
26993: GO 27468
26995: LD_INT 25
26997: DOUBLE
26998: EQUAL
26999: IFTRUE 27003
27001: GO 27021
27003: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
27004: LD_ADDR_VAR 0 3
27008: PUSH
27009: LD_INT 13
27011: PUSH
27012: LD_INT 14
27014: PUSH
27015: EMPTY
27016: LIST
27017: LIST
27018: ST_TO_ADDR
27019: GO 27468
27021: LD_INT 27
27023: DOUBLE
27024: EQUAL
27025: IFTRUE 27029
27027: GO 27047
27029: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
27030: LD_ADDR_VAR 0 3
27034: PUSH
27035: LD_INT 13
27037: PUSH
27038: LD_INT 14
27040: PUSH
27041: EMPTY
27042: LIST
27043: LIST
27044: ST_TO_ADDR
27045: GO 27468
27047: LD_INT 28
27049: DOUBLE
27050: EQUAL
27051: IFTRUE 27055
27053: GO 27073
27055: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
27056: LD_ADDR_VAR 0 3
27060: PUSH
27061: LD_INT 13
27063: PUSH
27064: LD_INT 14
27066: PUSH
27067: EMPTY
27068: LIST
27069: LIST
27070: ST_TO_ADDR
27071: GO 27468
27073: LD_INT 29
27075: DOUBLE
27076: EQUAL
27077: IFTRUE 27081
27079: GO 27099
27081: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
27082: LD_ADDR_VAR 0 3
27086: PUSH
27087: LD_INT 13
27089: PUSH
27090: LD_INT 14
27092: PUSH
27093: EMPTY
27094: LIST
27095: LIST
27096: ST_TO_ADDR
27097: GO 27468
27099: LD_INT 31
27101: DOUBLE
27102: EQUAL
27103: IFTRUE 27107
27105: GO 27125
27107: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
27108: LD_ADDR_VAR 0 3
27112: PUSH
27113: LD_INT 13
27115: PUSH
27116: LD_INT 14
27118: PUSH
27119: EMPTY
27120: LIST
27121: LIST
27122: ST_TO_ADDR
27123: GO 27468
27125: LD_INT 26
27127: DOUBLE
27128: EQUAL
27129: IFTRUE 27133
27131: GO 27151
27133: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
27134: LD_ADDR_VAR 0 3
27138: PUSH
27139: LD_INT 13
27141: PUSH
27142: LD_INT 14
27144: PUSH
27145: EMPTY
27146: LIST
27147: LIST
27148: ST_TO_ADDR
27149: GO 27468
27151: LD_INT 42
27153: DOUBLE
27154: EQUAL
27155: IFTRUE 27159
27157: GO 27185
27159: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
27160: LD_ADDR_VAR 0 3
27164: PUSH
27165: LD_INT 21
27167: PUSH
27168: LD_INT 22
27170: PUSH
27171: LD_INT 23
27173: PUSH
27174: LD_INT 24
27176: PUSH
27177: EMPTY
27178: LIST
27179: LIST
27180: LIST
27181: LIST
27182: ST_TO_ADDR
27183: GO 27468
27185: LD_INT 43
27187: DOUBLE
27188: EQUAL
27189: IFTRUE 27193
27191: GO 27219
27193: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
27194: LD_ADDR_VAR 0 3
27198: PUSH
27199: LD_INT 21
27201: PUSH
27202: LD_INT 22
27204: PUSH
27205: LD_INT 23
27207: PUSH
27208: LD_INT 24
27210: PUSH
27211: EMPTY
27212: LIST
27213: LIST
27214: LIST
27215: LIST
27216: ST_TO_ADDR
27217: GO 27468
27219: LD_INT 44
27221: DOUBLE
27222: EQUAL
27223: IFTRUE 27227
27225: GO 27253
27227: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
27228: LD_ADDR_VAR 0 3
27232: PUSH
27233: LD_INT 21
27235: PUSH
27236: LD_INT 22
27238: PUSH
27239: LD_INT 23
27241: PUSH
27242: LD_INT 24
27244: PUSH
27245: EMPTY
27246: LIST
27247: LIST
27248: LIST
27249: LIST
27250: ST_TO_ADDR
27251: GO 27468
27253: LD_INT 45
27255: DOUBLE
27256: EQUAL
27257: IFTRUE 27261
27259: GO 27287
27261: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
27262: LD_ADDR_VAR 0 3
27266: PUSH
27267: LD_INT 21
27269: PUSH
27270: LD_INT 22
27272: PUSH
27273: LD_INT 23
27275: PUSH
27276: LD_INT 24
27278: PUSH
27279: EMPTY
27280: LIST
27281: LIST
27282: LIST
27283: LIST
27284: ST_TO_ADDR
27285: GO 27468
27287: LD_INT 49
27289: DOUBLE
27290: EQUAL
27291: IFTRUE 27295
27293: GO 27321
27295: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
27296: LD_ADDR_VAR 0 3
27300: PUSH
27301: LD_INT 21
27303: PUSH
27304: LD_INT 22
27306: PUSH
27307: LD_INT 23
27309: PUSH
27310: LD_INT 24
27312: PUSH
27313: EMPTY
27314: LIST
27315: LIST
27316: LIST
27317: LIST
27318: ST_TO_ADDR
27319: GO 27468
27321: LD_INT 51
27323: DOUBLE
27324: EQUAL
27325: IFTRUE 27329
27327: GO 27355
27329: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
27330: LD_ADDR_VAR 0 3
27334: PUSH
27335: LD_INT 21
27337: PUSH
27338: LD_INT 22
27340: PUSH
27341: LD_INT 23
27343: PUSH
27344: LD_INT 24
27346: PUSH
27347: EMPTY
27348: LIST
27349: LIST
27350: LIST
27351: LIST
27352: ST_TO_ADDR
27353: GO 27468
27355: LD_INT 52
27357: DOUBLE
27358: EQUAL
27359: IFTRUE 27363
27361: GO 27389
27363: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
27364: LD_ADDR_VAR 0 3
27368: PUSH
27369: LD_INT 21
27371: PUSH
27372: LD_INT 22
27374: PUSH
27375: LD_INT 23
27377: PUSH
27378: LD_INT 24
27380: PUSH
27381: EMPTY
27382: LIST
27383: LIST
27384: LIST
27385: LIST
27386: ST_TO_ADDR
27387: GO 27468
27389: LD_INT 53
27391: DOUBLE
27392: EQUAL
27393: IFTRUE 27397
27395: GO 27415
27397: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
27398: LD_ADDR_VAR 0 3
27402: PUSH
27403: LD_INT 23
27405: PUSH
27406: LD_INT 24
27408: PUSH
27409: EMPTY
27410: LIST
27411: LIST
27412: ST_TO_ADDR
27413: GO 27468
27415: LD_INT 46
27417: DOUBLE
27418: EQUAL
27419: IFTRUE 27423
27421: GO 27441
27423: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
27424: LD_ADDR_VAR 0 3
27428: PUSH
27429: LD_INT 23
27431: PUSH
27432: LD_INT 24
27434: PUSH
27435: EMPTY
27436: LIST
27437: LIST
27438: ST_TO_ADDR
27439: GO 27468
27441: LD_INT 47
27443: DOUBLE
27444: EQUAL
27445: IFTRUE 27449
27447: GO 27467
27449: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27450: LD_ADDR_VAR 0 3
27454: PUSH
27455: LD_INT 23
27457: PUSH
27458: LD_INT 24
27460: PUSH
27461: EMPTY
27462: LIST
27463: LIST
27464: ST_TO_ADDR
27465: GO 27468
27467: POP
// result := ( chassis in result ) ;
27468: LD_ADDR_VAR 0 3
27472: PUSH
27473: LD_VAR 0 1
27477: PUSH
27478: LD_VAR 0 3
27482: IN
27483: ST_TO_ADDR
// end ;
27484: LD_VAR 0 3
27488: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
27489: LD_INT 0
27491: PPUSH
27492: PPUSH
27493: PPUSH
27494: PPUSH
27495: PPUSH
27496: PPUSH
27497: PPUSH
// result := array ;
27498: LD_ADDR_VAR 0 5
27502: PUSH
27503: LD_VAR 0 1
27507: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
27508: LD_VAR 0 1
27512: NOT
27513: PUSH
27514: LD_VAR 0 2
27518: NOT
27519: OR
27520: PUSH
27521: LD_VAR 0 3
27525: NOT
27526: OR
27527: PUSH
27528: LD_VAR 0 2
27532: PUSH
27533: LD_VAR 0 1
27537: GREATER
27538: OR
27539: PUSH
27540: LD_VAR 0 3
27544: PUSH
27545: LD_VAR 0 1
27549: GREATER
27550: OR
27551: IFFALSE 27555
// exit ;
27553: GO 27851
// if direction then
27555: LD_VAR 0 4
27559: IFFALSE 27623
// begin d := 1 ;
27561: LD_ADDR_VAR 0 9
27565: PUSH
27566: LD_INT 1
27568: ST_TO_ADDR
// if i_from > i_to then
27569: LD_VAR 0 2
27573: PUSH
27574: LD_VAR 0 3
27578: GREATER
27579: IFFALSE 27605
// length := ( array - i_from ) + i_to else
27581: LD_ADDR_VAR 0 11
27585: PUSH
27586: LD_VAR 0 1
27590: PUSH
27591: LD_VAR 0 2
27595: MINUS
27596: PUSH
27597: LD_VAR 0 3
27601: PLUS
27602: ST_TO_ADDR
27603: GO 27621
// length := i_to - i_from ;
27605: LD_ADDR_VAR 0 11
27609: PUSH
27610: LD_VAR 0 3
27614: PUSH
27615: LD_VAR 0 2
27619: MINUS
27620: ST_TO_ADDR
// end else
27621: GO 27684
// begin d := - 1 ;
27623: LD_ADDR_VAR 0 9
27627: PUSH
27628: LD_INT 1
27630: NEG
27631: ST_TO_ADDR
// if i_from > i_to then
27632: LD_VAR 0 2
27636: PUSH
27637: LD_VAR 0 3
27641: GREATER
27642: IFFALSE 27662
// length := i_from - i_to else
27644: LD_ADDR_VAR 0 11
27648: PUSH
27649: LD_VAR 0 2
27653: PUSH
27654: LD_VAR 0 3
27658: MINUS
27659: ST_TO_ADDR
27660: GO 27684
// length := ( array - i_to ) + i_from ;
27662: LD_ADDR_VAR 0 11
27666: PUSH
27667: LD_VAR 0 1
27671: PUSH
27672: LD_VAR 0 3
27676: MINUS
27677: PUSH
27678: LD_VAR 0 2
27682: PLUS
27683: ST_TO_ADDR
// end ; if not length then
27684: LD_VAR 0 11
27688: NOT
27689: IFFALSE 27693
// exit ;
27691: GO 27851
// tmp := array ;
27693: LD_ADDR_VAR 0 10
27697: PUSH
27698: LD_VAR 0 1
27702: ST_TO_ADDR
// for i = 1 to length do
27703: LD_ADDR_VAR 0 6
27707: PUSH
27708: DOUBLE
27709: LD_INT 1
27711: DEC
27712: ST_TO_ADDR
27713: LD_VAR 0 11
27717: PUSH
27718: FOR_TO
27719: IFFALSE 27839
// begin for j = 1 to array do
27721: LD_ADDR_VAR 0 7
27725: PUSH
27726: DOUBLE
27727: LD_INT 1
27729: DEC
27730: ST_TO_ADDR
27731: LD_VAR 0 1
27735: PUSH
27736: FOR_TO
27737: IFFALSE 27825
// begin k := j + d ;
27739: LD_ADDR_VAR 0 8
27743: PUSH
27744: LD_VAR 0 7
27748: PUSH
27749: LD_VAR 0 9
27753: PLUS
27754: ST_TO_ADDR
// if k > array then
27755: LD_VAR 0 8
27759: PUSH
27760: LD_VAR 0 1
27764: GREATER
27765: IFFALSE 27775
// k := 1 ;
27767: LD_ADDR_VAR 0 8
27771: PUSH
27772: LD_INT 1
27774: ST_TO_ADDR
// if not k then
27775: LD_VAR 0 8
27779: NOT
27780: IFFALSE 27792
// k := array ;
27782: LD_ADDR_VAR 0 8
27786: PUSH
27787: LD_VAR 0 1
27791: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
27792: LD_ADDR_VAR 0 10
27796: PUSH
27797: LD_VAR 0 10
27801: PPUSH
27802: LD_VAR 0 8
27806: PPUSH
27807: LD_VAR 0 1
27811: PUSH
27812: LD_VAR 0 7
27816: ARRAY
27817: PPUSH
27818: CALL_OW 1
27822: ST_TO_ADDR
// end ;
27823: GO 27736
27825: POP
27826: POP
// array := tmp ;
27827: LD_ADDR_VAR 0 1
27831: PUSH
27832: LD_VAR 0 10
27836: ST_TO_ADDR
// end ;
27837: GO 27718
27839: POP
27840: POP
// result := array ;
27841: LD_ADDR_VAR 0 5
27845: PUSH
27846: LD_VAR 0 1
27850: ST_TO_ADDR
// end ;
27851: LD_VAR 0 5
27855: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
27856: LD_INT 0
27858: PPUSH
27859: PPUSH
// result := 0 ;
27860: LD_ADDR_VAR 0 3
27864: PUSH
27865: LD_INT 0
27867: ST_TO_ADDR
// if not array or not value in array then
27868: LD_VAR 0 1
27872: NOT
27873: PUSH
27874: LD_VAR 0 2
27878: PUSH
27879: LD_VAR 0 1
27883: IN
27884: NOT
27885: OR
27886: IFFALSE 27890
// exit ;
27888: GO 27944
// for i = 1 to array do
27890: LD_ADDR_VAR 0 4
27894: PUSH
27895: DOUBLE
27896: LD_INT 1
27898: DEC
27899: ST_TO_ADDR
27900: LD_VAR 0 1
27904: PUSH
27905: FOR_TO
27906: IFFALSE 27942
// if value = array [ i ] then
27908: LD_VAR 0 2
27912: PUSH
27913: LD_VAR 0 1
27917: PUSH
27918: LD_VAR 0 4
27922: ARRAY
27923: EQUAL
27924: IFFALSE 27940
// begin result := i ;
27926: LD_ADDR_VAR 0 3
27930: PUSH
27931: LD_VAR 0 4
27935: ST_TO_ADDR
// exit ;
27936: POP
27937: POP
27938: GO 27944
// end ;
27940: GO 27905
27942: POP
27943: POP
// end ;
27944: LD_VAR 0 3
27948: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
27949: LD_INT 0
27951: PPUSH
// vc_chassis := chassis ;
27952: LD_ADDR_OWVAR 37
27956: PUSH
27957: LD_VAR 0 1
27961: ST_TO_ADDR
// vc_engine := engine ;
27962: LD_ADDR_OWVAR 39
27966: PUSH
27967: LD_VAR 0 2
27971: ST_TO_ADDR
// vc_control := control ;
27972: LD_ADDR_OWVAR 38
27976: PUSH
27977: LD_VAR 0 3
27981: ST_TO_ADDR
// vc_weapon := weapon ;
27982: LD_ADDR_OWVAR 40
27986: PUSH
27987: LD_VAR 0 4
27991: ST_TO_ADDR
// vc_fuel_battery := fuel ;
27992: LD_ADDR_OWVAR 41
27996: PUSH
27997: LD_VAR 0 5
28001: ST_TO_ADDR
// end ;
28002: LD_VAR 0 6
28006: RET
// export function WantPlant ( unit ) ; var task ; begin
28007: LD_INT 0
28009: PPUSH
28010: PPUSH
// result := false ;
28011: LD_ADDR_VAR 0 2
28015: PUSH
28016: LD_INT 0
28018: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
28019: LD_ADDR_VAR 0 3
28023: PUSH
28024: LD_VAR 0 1
28028: PPUSH
28029: CALL_OW 437
28033: ST_TO_ADDR
// if task then
28034: LD_VAR 0 3
28038: IFFALSE 28066
// if task [ 1 ] [ 1 ] = p then
28040: LD_VAR 0 3
28044: PUSH
28045: LD_INT 1
28047: ARRAY
28048: PUSH
28049: LD_INT 1
28051: ARRAY
28052: PUSH
28053: LD_STRING p
28055: EQUAL
28056: IFFALSE 28066
// result := true ;
28058: LD_ADDR_VAR 0 2
28062: PUSH
28063: LD_INT 1
28065: ST_TO_ADDR
// end ;
28066: LD_VAR 0 2
28070: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
28071: LD_INT 0
28073: PPUSH
28074: PPUSH
28075: PPUSH
28076: PPUSH
// if pos < 1 then
28077: LD_VAR 0 2
28081: PUSH
28082: LD_INT 1
28084: LESS
28085: IFFALSE 28089
// exit ;
28087: GO 28392
// if pos = 1 then
28089: LD_VAR 0 2
28093: PUSH
28094: LD_INT 1
28096: EQUAL
28097: IFFALSE 28130
// result := Replace ( arr , pos [ 1 ] , value ) else
28099: LD_ADDR_VAR 0 4
28103: PUSH
28104: LD_VAR 0 1
28108: PPUSH
28109: LD_VAR 0 2
28113: PUSH
28114: LD_INT 1
28116: ARRAY
28117: PPUSH
28118: LD_VAR 0 3
28122: PPUSH
28123: CALL_OW 1
28127: ST_TO_ADDR
28128: GO 28392
// begin tmp := arr ;
28130: LD_ADDR_VAR 0 6
28134: PUSH
28135: LD_VAR 0 1
28139: ST_TO_ADDR
// s_arr := [ tmp ] ;
28140: LD_ADDR_VAR 0 7
28144: PUSH
28145: LD_VAR 0 6
28149: PUSH
28150: EMPTY
28151: LIST
28152: ST_TO_ADDR
// for i = 1 to pos - 1 do
28153: LD_ADDR_VAR 0 5
28157: PUSH
28158: DOUBLE
28159: LD_INT 1
28161: DEC
28162: ST_TO_ADDR
28163: LD_VAR 0 2
28167: PUSH
28168: LD_INT 1
28170: MINUS
28171: PUSH
28172: FOR_TO
28173: IFFALSE 28218
// begin tmp := tmp [ pos [ i ] ] ;
28175: LD_ADDR_VAR 0 6
28179: PUSH
28180: LD_VAR 0 6
28184: PUSH
28185: LD_VAR 0 2
28189: PUSH
28190: LD_VAR 0 5
28194: ARRAY
28195: ARRAY
28196: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
28197: LD_ADDR_VAR 0 7
28201: PUSH
28202: LD_VAR 0 7
28206: PUSH
28207: LD_VAR 0 6
28211: PUSH
28212: EMPTY
28213: LIST
28214: ADD
28215: ST_TO_ADDR
// end ;
28216: GO 28172
28218: POP
28219: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
28220: LD_ADDR_VAR 0 6
28224: PUSH
28225: LD_VAR 0 6
28229: PPUSH
28230: LD_VAR 0 2
28234: PUSH
28235: LD_VAR 0 2
28239: ARRAY
28240: PPUSH
28241: LD_VAR 0 3
28245: PPUSH
28246: CALL_OW 1
28250: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
28251: LD_ADDR_VAR 0 7
28255: PUSH
28256: LD_VAR 0 7
28260: PPUSH
28261: LD_VAR 0 7
28265: PPUSH
28266: LD_VAR 0 6
28270: PPUSH
28271: CALL_OW 1
28275: ST_TO_ADDR
// for i = s_arr downto 2 do
28276: LD_ADDR_VAR 0 5
28280: PUSH
28281: DOUBLE
28282: LD_VAR 0 7
28286: INC
28287: ST_TO_ADDR
28288: LD_INT 2
28290: PUSH
28291: FOR_DOWNTO
28292: IFFALSE 28376
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
28294: LD_ADDR_VAR 0 6
28298: PUSH
28299: LD_VAR 0 7
28303: PUSH
28304: LD_VAR 0 5
28308: PUSH
28309: LD_INT 1
28311: MINUS
28312: ARRAY
28313: PPUSH
28314: LD_VAR 0 2
28318: PUSH
28319: LD_VAR 0 5
28323: PUSH
28324: LD_INT 1
28326: MINUS
28327: ARRAY
28328: PPUSH
28329: LD_VAR 0 7
28333: PUSH
28334: LD_VAR 0 5
28338: ARRAY
28339: PPUSH
28340: CALL_OW 1
28344: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
28345: LD_ADDR_VAR 0 7
28349: PUSH
28350: LD_VAR 0 7
28354: PPUSH
28355: LD_VAR 0 5
28359: PUSH
28360: LD_INT 1
28362: MINUS
28363: PPUSH
28364: LD_VAR 0 6
28368: PPUSH
28369: CALL_OW 1
28373: ST_TO_ADDR
// end ;
28374: GO 28291
28376: POP
28377: POP
// result := s_arr [ 1 ] ;
28378: LD_ADDR_VAR 0 4
28382: PUSH
28383: LD_VAR 0 7
28387: PUSH
28388: LD_INT 1
28390: ARRAY
28391: ST_TO_ADDR
// end ; end ;
28392: LD_VAR 0 4
28396: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
28397: LD_INT 0
28399: PPUSH
28400: PPUSH
// if not list then
28401: LD_VAR 0 1
28405: NOT
28406: IFFALSE 28410
// exit ;
28408: GO 28501
// i := list [ pos1 ] ;
28410: LD_ADDR_VAR 0 5
28414: PUSH
28415: LD_VAR 0 1
28419: PUSH
28420: LD_VAR 0 2
28424: ARRAY
28425: ST_TO_ADDR
// if not i then
28426: LD_VAR 0 5
28430: NOT
28431: IFFALSE 28435
// exit ;
28433: GO 28501
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
28435: LD_ADDR_VAR 0 1
28439: PUSH
28440: LD_VAR 0 1
28444: PPUSH
28445: LD_VAR 0 2
28449: PPUSH
28450: LD_VAR 0 1
28454: PUSH
28455: LD_VAR 0 3
28459: ARRAY
28460: PPUSH
28461: CALL_OW 1
28465: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
28466: LD_ADDR_VAR 0 1
28470: PUSH
28471: LD_VAR 0 1
28475: PPUSH
28476: LD_VAR 0 3
28480: PPUSH
28481: LD_VAR 0 5
28485: PPUSH
28486: CALL_OW 1
28490: ST_TO_ADDR
// result := list ;
28491: LD_ADDR_VAR 0 4
28495: PUSH
28496: LD_VAR 0 1
28500: ST_TO_ADDR
// end ;
28501: LD_VAR 0 4
28505: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
28506: LD_INT 0
28508: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
28509: LD_ADDR_VAR 0 5
28513: PUSH
28514: LD_VAR 0 1
28518: PPUSH
28519: CALL_OW 250
28523: PPUSH
28524: LD_VAR 0 1
28528: PPUSH
28529: CALL_OW 251
28533: PPUSH
28534: LD_VAR 0 2
28538: PPUSH
28539: LD_VAR 0 3
28543: PPUSH
28544: LD_VAR 0 4
28548: PPUSH
28549: CALL 28559 0 5
28553: ST_TO_ADDR
// end ;
28554: LD_VAR 0 5
28558: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
28559: LD_INT 0
28561: PPUSH
28562: PPUSH
28563: PPUSH
28564: PPUSH
// if not list then
28565: LD_VAR 0 3
28569: NOT
28570: IFFALSE 28574
// exit ;
28572: GO 28962
// result := [ ] ;
28574: LD_ADDR_VAR 0 6
28578: PUSH
28579: EMPTY
28580: ST_TO_ADDR
// for i in list do
28581: LD_ADDR_VAR 0 7
28585: PUSH
28586: LD_VAR 0 3
28590: PUSH
28591: FOR_IN
28592: IFFALSE 28794
// begin tmp := GetDistUnitXY ( i , x , y ) ;
28594: LD_ADDR_VAR 0 9
28598: PUSH
28599: LD_VAR 0 7
28603: PPUSH
28604: LD_VAR 0 1
28608: PPUSH
28609: LD_VAR 0 2
28613: PPUSH
28614: CALL_OW 297
28618: ST_TO_ADDR
// if not result then
28619: LD_VAR 0 6
28623: NOT
28624: IFFALSE 28650
// result := [ [ i , tmp ] ] else
28626: LD_ADDR_VAR 0 6
28630: PUSH
28631: LD_VAR 0 7
28635: PUSH
28636: LD_VAR 0 9
28640: PUSH
28641: EMPTY
28642: LIST
28643: LIST
28644: PUSH
28645: EMPTY
28646: LIST
28647: ST_TO_ADDR
28648: GO 28792
// begin if result [ result ] [ 2 ] < tmp then
28650: LD_VAR 0 6
28654: PUSH
28655: LD_VAR 0 6
28659: ARRAY
28660: PUSH
28661: LD_INT 2
28663: ARRAY
28664: PUSH
28665: LD_VAR 0 9
28669: LESS
28670: IFFALSE 28712
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
28672: LD_ADDR_VAR 0 6
28676: PUSH
28677: LD_VAR 0 6
28681: PPUSH
28682: LD_VAR 0 6
28686: PUSH
28687: LD_INT 1
28689: PLUS
28690: PPUSH
28691: LD_VAR 0 7
28695: PUSH
28696: LD_VAR 0 9
28700: PUSH
28701: EMPTY
28702: LIST
28703: LIST
28704: PPUSH
28705: CALL_OW 2
28709: ST_TO_ADDR
28710: GO 28792
// for j = 1 to result do
28712: LD_ADDR_VAR 0 8
28716: PUSH
28717: DOUBLE
28718: LD_INT 1
28720: DEC
28721: ST_TO_ADDR
28722: LD_VAR 0 6
28726: PUSH
28727: FOR_TO
28728: IFFALSE 28790
// begin if tmp < result [ j ] [ 2 ] then
28730: LD_VAR 0 9
28734: PUSH
28735: LD_VAR 0 6
28739: PUSH
28740: LD_VAR 0 8
28744: ARRAY
28745: PUSH
28746: LD_INT 2
28748: ARRAY
28749: LESS
28750: IFFALSE 28788
// begin result := Insert ( result , j , [ i , tmp ] ) ;
28752: LD_ADDR_VAR 0 6
28756: PUSH
28757: LD_VAR 0 6
28761: PPUSH
28762: LD_VAR 0 8
28766: PPUSH
28767: LD_VAR 0 7
28771: PUSH
28772: LD_VAR 0 9
28776: PUSH
28777: EMPTY
28778: LIST
28779: LIST
28780: PPUSH
28781: CALL_OW 2
28785: ST_TO_ADDR
// break ;
28786: GO 28790
// end ; end ;
28788: GO 28727
28790: POP
28791: POP
// end ; end ;
28792: GO 28591
28794: POP
28795: POP
// if result and not asc then
28796: LD_VAR 0 6
28800: PUSH
28801: LD_VAR 0 4
28805: NOT
28806: AND
28807: IFFALSE 28882
// begin tmp := result ;
28809: LD_ADDR_VAR 0 9
28813: PUSH
28814: LD_VAR 0 6
28818: ST_TO_ADDR
// for i = tmp downto 1 do
28819: LD_ADDR_VAR 0 7
28823: PUSH
28824: DOUBLE
28825: LD_VAR 0 9
28829: INC
28830: ST_TO_ADDR
28831: LD_INT 1
28833: PUSH
28834: FOR_DOWNTO
28835: IFFALSE 28880
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
28837: LD_ADDR_VAR 0 6
28841: PUSH
28842: LD_VAR 0 6
28846: PPUSH
28847: LD_VAR 0 9
28851: PUSH
28852: LD_VAR 0 7
28856: MINUS
28857: PUSH
28858: LD_INT 1
28860: PLUS
28861: PPUSH
28862: LD_VAR 0 9
28866: PUSH
28867: LD_VAR 0 7
28871: ARRAY
28872: PPUSH
28873: CALL_OW 1
28877: ST_TO_ADDR
28878: GO 28834
28880: POP
28881: POP
// end ; tmp := [ ] ;
28882: LD_ADDR_VAR 0 9
28886: PUSH
28887: EMPTY
28888: ST_TO_ADDR
// if mode then
28889: LD_VAR 0 5
28893: IFFALSE 28962
// begin for i = 1 to result do
28895: LD_ADDR_VAR 0 7
28899: PUSH
28900: DOUBLE
28901: LD_INT 1
28903: DEC
28904: ST_TO_ADDR
28905: LD_VAR 0 6
28909: PUSH
28910: FOR_TO
28911: IFFALSE 28950
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
28913: LD_ADDR_VAR 0 9
28917: PUSH
28918: LD_VAR 0 9
28922: PPUSH
28923: LD_VAR 0 7
28927: PPUSH
28928: LD_VAR 0 6
28932: PUSH
28933: LD_VAR 0 7
28937: ARRAY
28938: PUSH
28939: LD_INT 1
28941: ARRAY
28942: PPUSH
28943: CALL_OW 1
28947: ST_TO_ADDR
28948: GO 28910
28950: POP
28951: POP
// result := tmp ;
28952: LD_ADDR_VAR 0 6
28956: PUSH
28957: LD_VAR 0 9
28961: ST_TO_ADDR
// end ; end ;
28962: LD_VAR 0 6
28966: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
28967: LD_INT 0
28969: PPUSH
28970: PPUSH
28971: PPUSH
28972: PPUSH
28973: PPUSH
28974: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
28975: LD_ADDR_VAR 0 5
28979: PUSH
28980: LD_INT 0
28982: PUSH
28983: LD_INT 0
28985: PUSH
28986: LD_INT 0
28988: PUSH
28989: EMPTY
28990: PUSH
28991: EMPTY
28992: LIST
28993: LIST
28994: LIST
28995: LIST
28996: ST_TO_ADDR
// if not x or not y then
28997: LD_VAR 0 2
29001: NOT
29002: PUSH
29003: LD_VAR 0 3
29007: NOT
29008: OR
29009: IFFALSE 29013
// exit ;
29011: GO 30659
// if not range then
29013: LD_VAR 0 4
29017: NOT
29018: IFFALSE 29028
// range := 10 ;
29020: LD_ADDR_VAR 0 4
29024: PUSH
29025: LD_INT 10
29027: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29028: LD_ADDR_VAR 0 8
29032: PUSH
29033: LD_INT 81
29035: PUSH
29036: LD_VAR 0 1
29040: PUSH
29041: EMPTY
29042: LIST
29043: LIST
29044: PUSH
29045: LD_INT 92
29047: PUSH
29048: LD_VAR 0 2
29052: PUSH
29053: LD_VAR 0 3
29057: PUSH
29058: LD_VAR 0 4
29062: PUSH
29063: EMPTY
29064: LIST
29065: LIST
29066: LIST
29067: LIST
29068: PUSH
29069: LD_INT 3
29071: PUSH
29072: LD_INT 21
29074: PUSH
29075: LD_INT 3
29077: PUSH
29078: EMPTY
29079: LIST
29080: LIST
29081: PUSH
29082: EMPTY
29083: LIST
29084: LIST
29085: PUSH
29086: EMPTY
29087: LIST
29088: LIST
29089: LIST
29090: PPUSH
29091: CALL_OW 69
29095: ST_TO_ADDR
// if not tmp then
29096: LD_VAR 0 8
29100: NOT
29101: IFFALSE 29105
// exit ;
29103: GO 30659
// for i in tmp do
29105: LD_ADDR_VAR 0 6
29109: PUSH
29110: LD_VAR 0 8
29114: PUSH
29115: FOR_IN
29116: IFFALSE 30634
// begin points := [ 0 , 0 , 0 ] ;
29118: LD_ADDR_VAR 0 9
29122: PUSH
29123: LD_INT 0
29125: PUSH
29126: LD_INT 0
29128: PUSH
29129: LD_INT 0
29131: PUSH
29132: EMPTY
29133: LIST
29134: LIST
29135: LIST
29136: ST_TO_ADDR
// bpoints := 1 ;
29137: LD_ADDR_VAR 0 10
29141: PUSH
29142: LD_INT 1
29144: ST_TO_ADDR
// case GetType ( i ) of unit_human :
29145: LD_VAR 0 6
29149: PPUSH
29150: CALL_OW 247
29154: PUSH
29155: LD_INT 1
29157: DOUBLE
29158: EQUAL
29159: IFTRUE 29163
29161: GO 29741
29163: POP
// begin if GetClass ( i ) = 1 then
29164: LD_VAR 0 6
29168: PPUSH
29169: CALL_OW 257
29173: PUSH
29174: LD_INT 1
29176: EQUAL
29177: IFFALSE 29198
// points := [ 10 , 5 , 3 ] ;
29179: LD_ADDR_VAR 0 9
29183: PUSH
29184: LD_INT 10
29186: PUSH
29187: LD_INT 5
29189: PUSH
29190: LD_INT 3
29192: PUSH
29193: EMPTY
29194: LIST
29195: LIST
29196: LIST
29197: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
29198: LD_VAR 0 6
29202: PPUSH
29203: CALL_OW 257
29207: PUSH
29208: LD_INT 2
29210: PUSH
29211: LD_INT 3
29213: PUSH
29214: LD_INT 4
29216: PUSH
29217: EMPTY
29218: LIST
29219: LIST
29220: LIST
29221: IN
29222: IFFALSE 29243
// points := [ 3 , 2 , 1 ] ;
29224: LD_ADDR_VAR 0 9
29228: PUSH
29229: LD_INT 3
29231: PUSH
29232: LD_INT 2
29234: PUSH
29235: LD_INT 1
29237: PUSH
29238: EMPTY
29239: LIST
29240: LIST
29241: LIST
29242: ST_TO_ADDR
// if GetClass ( i ) = 5 then
29243: LD_VAR 0 6
29247: PPUSH
29248: CALL_OW 257
29252: PUSH
29253: LD_INT 5
29255: EQUAL
29256: IFFALSE 29277
// points := [ 130 , 5 , 2 ] ;
29258: LD_ADDR_VAR 0 9
29262: PUSH
29263: LD_INT 130
29265: PUSH
29266: LD_INT 5
29268: PUSH
29269: LD_INT 2
29271: PUSH
29272: EMPTY
29273: LIST
29274: LIST
29275: LIST
29276: ST_TO_ADDR
// if GetClass ( i ) = 8 then
29277: LD_VAR 0 6
29281: PPUSH
29282: CALL_OW 257
29286: PUSH
29287: LD_INT 8
29289: EQUAL
29290: IFFALSE 29311
// points := [ 35 , 35 , 30 ] ;
29292: LD_ADDR_VAR 0 9
29296: PUSH
29297: LD_INT 35
29299: PUSH
29300: LD_INT 35
29302: PUSH
29303: LD_INT 30
29305: PUSH
29306: EMPTY
29307: LIST
29308: LIST
29309: LIST
29310: ST_TO_ADDR
// if GetClass ( i ) = 9 then
29311: LD_VAR 0 6
29315: PPUSH
29316: CALL_OW 257
29320: PUSH
29321: LD_INT 9
29323: EQUAL
29324: IFFALSE 29345
// points := [ 20 , 55 , 40 ] ;
29326: LD_ADDR_VAR 0 9
29330: PUSH
29331: LD_INT 20
29333: PUSH
29334: LD_INT 55
29336: PUSH
29337: LD_INT 40
29339: PUSH
29340: EMPTY
29341: LIST
29342: LIST
29343: LIST
29344: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
29345: LD_VAR 0 6
29349: PPUSH
29350: CALL_OW 257
29354: PUSH
29355: LD_INT 12
29357: PUSH
29358: LD_INT 16
29360: PUSH
29361: EMPTY
29362: LIST
29363: LIST
29364: IN
29365: IFFALSE 29386
// points := [ 5 , 3 , 2 ] ;
29367: LD_ADDR_VAR 0 9
29371: PUSH
29372: LD_INT 5
29374: PUSH
29375: LD_INT 3
29377: PUSH
29378: LD_INT 2
29380: PUSH
29381: EMPTY
29382: LIST
29383: LIST
29384: LIST
29385: ST_TO_ADDR
// if GetClass ( i ) = 17 then
29386: LD_VAR 0 6
29390: PPUSH
29391: CALL_OW 257
29395: PUSH
29396: LD_INT 17
29398: EQUAL
29399: IFFALSE 29420
// points := [ 100 , 50 , 75 ] ;
29401: LD_ADDR_VAR 0 9
29405: PUSH
29406: LD_INT 100
29408: PUSH
29409: LD_INT 50
29411: PUSH
29412: LD_INT 75
29414: PUSH
29415: EMPTY
29416: LIST
29417: LIST
29418: LIST
29419: ST_TO_ADDR
// if GetClass ( i ) = 15 then
29420: LD_VAR 0 6
29424: PPUSH
29425: CALL_OW 257
29429: PUSH
29430: LD_INT 15
29432: EQUAL
29433: IFFALSE 29454
// points := [ 10 , 5 , 3 ] ;
29435: LD_ADDR_VAR 0 9
29439: PUSH
29440: LD_INT 10
29442: PUSH
29443: LD_INT 5
29445: PUSH
29446: LD_INT 3
29448: PUSH
29449: EMPTY
29450: LIST
29451: LIST
29452: LIST
29453: ST_TO_ADDR
// if GetClass ( i ) = 14 then
29454: LD_VAR 0 6
29458: PPUSH
29459: CALL_OW 257
29463: PUSH
29464: LD_INT 14
29466: EQUAL
29467: IFFALSE 29488
// points := [ 10 , 0 , 0 ] ;
29469: LD_ADDR_VAR 0 9
29473: PUSH
29474: LD_INT 10
29476: PUSH
29477: LD_INT 0
29479: PUSH
29480: LD_INT 0
29482: PUSH
29483: EMPTY
29484: LIST
29485: LIST
29486: LIST
29487: ST_TO_ADDR
// if GetClass ( i ) = 11 then
29488: LD_VAR 0 6
29492: PPUSH
29493: CALL_OW 257
29497: PUSH
29498: LD_INT 11
29500: EQUAL
29501: IFFALSE 29522
// points := [ 30 , 10 , 5 ] ;
29503: LD_ADDR_VAR 0 9
29507: PUSH
29508: LD_INT 30
29510: PUSH
29511: LD_INT 10
29513: PUSH
29514: LD_INT 5
29516: PUSH
29517: EMPTY
29518: LIST
29519: LIST
29520: LIST
29521: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
29522: LD_VAR 0 1
29526: PPUSH
29527: LD_INT 5
29529: PPUSH
29530: CALL_OW 321
29534: PUSH
29535: LD_INT 2
29537: EQUAL
29538: IFFALSE 29555
// bpoints := bpoints * 1.8 ;
29540: LD_ADDR_VAR 0 10
29544: PUSH
29545: LD_VAR 0 10
29549: PUSH
29550: LD_REAL  1.80000000000000E+0000
29553: MUL
29554: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
29555: LD_VAR 0 6
29559: PPUSH
29560: CALL_OW 257
29564: PUSH
29565: LD_INT 1
29567: PUSH
29568: LD_INT 2
29570: PUSH
29571: LD_INT 3
29573: PUSH
29574: LD_INT 4
29576: PUSH
29577: EMPTY
29578: LIST
29579: LIST
29580: LIST
29581: LIST
29582: IN
29583: PUSH
29584: LD_VAR 0 1
29588: PPUSH
29589: LD_INT 51
29591: PPUSH
29592: CALL_OW 321
29596: PUSH
29597: LD_INT 2
29599: EQUAL
29600: AND
29601: IFFALSE 29618
// bpoints := bpoints * 1.2 ;
29603: LD_ADDR_VAR 0 10
29607: PUSH
29608: LD_VAR 0 10
29612: PUSH
29613: LD_REAL  1.20000000000000E+0000
29616: MUL
29617: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
29618: LD_VAR 0 6
29622: PPUSH
29623: CALL_OW 257
29627: PUSH
29628: LD_INT 5
29630: PUSH
29631: LD_INT 7
29633: PUSH
29634: LD_INT 9
29636: PUSH
29637: EMPTY
29638: LIST
29639: LIST
29640: LIST
29641: IN
29642: PUSH
29643: LD_VAR 0 1
29647: PPUSH
29648: LD_INT 52
29650: PPUSH
29651: CALL_OW 321
29655: PUSH
29656: LD_INT 2
29658: EQUAL
29659: AND
29660: IFFALSE 29677
// bpoints := bpoints * 1.5 ;
29662: LD_ADDR_VAR 0 10
29666: PUSH
29667: LD_VAR 0 10
29671: PUSH
29672: LD_REAL  1.50000000000000E+0000
29675: MUL
29676: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
29677: LD_VAR 0 1
29681: PPUSH
29682: LD_INT 66
29684: PPUSH
29685: CALL_OW 321
29689: PUSH
29690: LD_INT 2
29692: EQUAL
29693: IFFALSE 29710
// bpoints := bpoints * 1.1 ;
29695: LD_ADDR_VAR 0 10
29699: PUSH
29700: LD_VAR 0 10
29704: PUSH
29705: LD_REAL  1.10000000000000E+0000
29708: MUL
29709: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
29710: LD_ADDR_VAR 0 10
29714: PUSH
29715: LD_VAR 0 10
29719: PUSH
29720: LD_VAR 0 6
29724: PPUSH
29725: LD_INT 1
29727: PPUSH
29728: CALL_OW 259
29732: PUSH
29733: LD_REAL  1.15000000000000E+0000
29736: MUL
29737: MUL
29738: ST_TO_ADDR
// end ; unit_vehicle :
29739: GO 30563
29741: LD_INT 2
29743: DOUBLE
29744: EQUAL
29745: IFTRUE 29749
29747: GO 30551
29749: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
29750: LD_VAR 0 6
29754: PPUSH
29755: CALL_OW 264
29759: PUSH
29760: LD_INT 2
29762: PUSH
29763: LD_INT 42
29765: PUSH
29766: LD_INT 24
29768: PUSH
29769: EMPTY
29770: LIST
29771: LIST
29772: LIST
29773: IN
29774: IFFALSE 29795
// points := [ 25 , 5 , 3 ] ;
29776: LD_ADDR_VAR 0 9
29780: PUSH
29781: LD_INT 25
29783: PUSH
29784: LD_INT 5
29786: PUSH
29787: LD_INT 3
29789: PUSH
29790: EMPTY
29791: LIST
29792: LIST
29793: LIST
29794: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
29795: LD_VAR 0 6
29799: PPUSH
29800: CALL_OW 264
29804: PUSH
29805: LD_INT 4
29807: PUSH
29808: LD_INT 43
29810: PUSH
29811: LD_INT 25
29813: PUSH
29814: EMPTY
29815: LIST
29816: LIST
29817: LIST
29818: IN
29819: IFFALSE 29840
// points := [ 40 , 15 , 5 ] ;
29821: LD_ADDR_VAR 0 9
29825: PUSH
29826: LD_INT 40
29828: PUSH
29829: LD_INT 15
29831: PUSH
29832: LD_INT 5
29834: PUSH
29835: EMPTY
29836: LIST
29837: LIST
29838: LIST
29839: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
29840: LD_VAR 0 6
29844: PPUSH
29845: CALL_OW 264
29849: PUSH
29850: LD_INT 3
29852: PUSH
29853: LD_INT 23
29855: PUSH
29856: EMPTY
29857: LIST
29858: LIST
29859: IN
29860: IFFALSE 29881
// points := [ 7 , 25 , 8 ] ;
29862: LD_ADDR_VAR 0 9
29866: PUSH
29867: LD_INT 7
29869: PUSH
29870: LD_INT 25
29872: PUSH
29873: LD_INT 8
29875: PUSH
29876: EMPTY
29877: LIST
29878: LIST
29879: LIST
29880: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
29881: LD_VAR 0 6
29885: PPUSH
29886: CALL_OW 264
29890: PUSH
29891: LD_INT 5
29893: PUSH
29894: LD_INT 27
29896: PUSH
29897: LD_INT 44
29899: PUSH
29900: EMPTY
29901: LIST
29902: LIST
29903: LIST
29904: IN
29905: IFFALSE 29926
// points := [ 14 , 50 , 16 ] ;
29907: LD_ADDR_VAR 0 9
29911: PUSH
29912: LD_INT 14
29914: PUSH
29915: LD_INT 50
29917: PUSH
29918: LD_INT 16
29920: PUSH
29921: EMPTY
29922: LIST
29923: LIST
29924: LIST
29925: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
29926: LD_VAR 0 6
29930: PPUSH
29931: CALL_OW 264
29935: PUSH
29936: LD_INT 6
29938: PUSH
29939: LD_INT 46
29941: PUSH
29942: EMPTY
29943: LIST
29944: LIST
29945: IN
29946: IFFALSE 29967
// points := [ 32 , 120 , 70 ] ;
29948: LD_ADDR_VAR 0 9
29952: PUSH
29953: LD_INT 32
29955: PUSH
29956: LD_INT 120
29958: PUSH
29959: LD_INT 70
29961: PUSH
29962: EMPTY
29963: LIST
29964: LIST
29965: LIST
29966: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
29967: LD_VAR 0 6
29971: PPUSH
29972: CALL_OW 264
29976: PUSH
29977: LD_INT 7
29979: PUSH
29980: LD_INT 28
29982: PUSH
29983: LD_INT 45
29985: PUSH
29986: EMPTY
29987: LIST
29988: LIST
29989: LIST
29990: IN
29991: IFFALSE 30012
// points := [ 35 , 20 , 45 ] ;
29993: LD_ADDR_VAR 0 9
29997: PUSH
29998: LD_INT 35
30000: PUSH
30001: LD_INT 20
30003: PUSH
30004: LD_INT 45
30006: PUSH
30007: EMPTY
30008: LIST
30009: LIST
30010: LIST
30011: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
30012: LD_VAR 0 6
30016: PPUSH
30017: CALL_OW 264
30021: PUSH
30022: LD_INT 47
30024: PUSH
30025: EMPTY
30026: LIST
30027: IN
30028: IFFALSE 30049
// points := [ 67 , 45 , 75 ] ;
30030: LD_ADDR_VAR 0 9
30034: PUSH
30035: LD_INT 67
30037: PUSH
30038: LD_INT 45
30040: PUSH
30041: LD_INT 75
30043: PUSH
30044: EMPTY
30045: LIST
30046: LIST
30047: LIST
30048: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
30049: LD_VAR 0 6
30053: PPUSH
30054: CALL_OW 264
30058: PUSH
30059: LD_INT 26
30061: PUSH
30062: EMPTY
30063: LIST
30064: IN
30065: IFFALSE 30086
// points := [ 120 , 30 , 80 ] ;
30067: LD_ADDR_VAR 0 9
30071: PUSH
30072: LD_INT 120
30074: PUSH
30075: LD_INT 30
30077: PUSH
30078: LD_INT 80
30080: PUSH
30081: EMPTY
30082: LIST
30083: LIST
30084: LIST
30085: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
30086: LD_VAR 0 6
30090: PPUSH
30091: CALL_OW 264
30095: PUSH
30096: LD_INT 22
30098: PUSH
30099: EMPTY
30100: LIST
30101: IN
30102: IFFALSE 30123
// points := [ 40 , 1 , 1 ] ;
30104: LD_ADDR_VAR 0 9
30108: PUSH
30109: LD_INT 40
30111: PUSH
30112: LD_INT 1
30114: PUSH
30115: LD_INT 1
30117: PUSH
30118: EMPTY
30119: LIST
30120: LIST
30121: LIST
30122: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
30123: LD_VAR 0 6
30127: PPUSH
30128: CALL_OW 264
30132: PUSH
30133: LD_INT 29
30135: PUSH
30136: EMPTY
30137: LIST
30138: IN
30139: IFFALSE 30160
// points := [ 70 , 200 , 400 ] ;
30141: LD_ADDR_VAR 0 9
30145: PUSH
30146: LD_INT 70
30148: PUSH
30149: LD_INT 200
30151: PUSH
30152: LD_INT 400
30154: PUSH
30155: EMPTY
30156: LIST
30157: LIST
30158: LIST
30159: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
30160: LD_VAR 0 6
30164: PPUSH
30165: CALL_OW 264
30169: PUSH
30170: LD_INT 14
30172: PUSH
30173: LD_INT 53
30175: PUSH
30176: EMPTY
30177: LIST
30178: LIST
30179: IN
30180: IFFALSE 30201
// points := [ 40 , 10 , 20 ] ;
30182: LD_ADDR_VAR 0 9
30186: PUSH
30187: LD_INT 40
30189: PUSH
30190: LD_INT 10
30192: PUSH
30193: LD_INT 20
30195: PUSH
30196: EMPTY
30197: LIST
30198: LIST
30199: LIST
30200: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
30201: LD_VAR 0 6
30205: PPUSH
30206: CALL_OW 264
30210: PUSH
30211: LD_INT 9
30213: PUSH
30214: EMPTY
30215: LIST
30216: IN
30217: IFFALSE 30238
// points := [ 5 , 70 , 20 ] ;
30219: LD_ADDR_VAR 0 9
30223: PUSH
30224: LD_INT 5
30226: PUSH
30227: LD_INT 70
30229: PUSH
30230: LD_INT 20
30232: PUSH
30233: EMPTY
30234: LIST
30235: LIST
30236: LIST
30237: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
30238: LD_VAR 0 6
30242: PPUSH
30243: CALL_OW 264
30247: PUSH
30248: LD_INT 10
30250: PUSH
30251: EMPTY
30252: LIST
30253: IN
30254: IFFALSE 30275
// points := [ 35 , 110 , 70 ] ;
30256: LD_ADDR_VAR 0 9
30260: PUSH
30261: LD_INT 35
30263: PUSH
30264: LD_INT 110
30266: PUSH
30267: LD_INT 70
30269: PUSH
30270: EMPTY
30271: LIST
30272: LIST
30273: LIST
30274: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
30275: LD_VAR 0 6
30279: PPUSH
30280: CALL_OW 265
30284: PUSH
30285: LD_INT 25
30287: EQUAL
30288: IFFALSE 30309
// points := [ 80 , 65 , 100 ] ;
30290: LD_ADDR_VAR 0 9
30294: PUSH
30295: LD_INT 80
30297: PUSH
30298: LD_INT 65
30300: PUSH
30301: LD_INT 100
30303: PUSH
30304: EMPTY
30305: LIST
30306: LIST
30307: LIST
30308: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
30309: LD_VAR 0 6
30313: PPUSH
30314: CALL_OW 263
30318: PUSH
30319: LD_INT 1
30321: EQUAL
30322: IFFALSE 30357
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
30324: LD_ADDR_VAR 0 10
30328: PUSH
30329: LD_VAR 0 10
30333: PUSH
30334: LD_VAR 0 6
30338: PPUSH
30339: CALL_OW 311
30343: PPUSH
30344: LD_INT 3
30346: PPUSH
30347: CALL_OW 259
30351: PUSH
30352: LD_INT 4
30354: MUL
30355: MUL
30356: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
30357: LD_VAR 0 6
30361: PPUSH
30362: CALL_OW 263
30366: PUSH
30367: LD_INT 2
30369: EQUAL
30370: IFFALSE 30421
// begin j := IsControledBy ( i ) ;
30372: LD_ADDR_VAR 0 7
30376: PUSH
30377: LD_VAR 0 6
30381: PPUSH
30382: CALL_OW 312
30386: ST_TO_ADDR
// if j then
30387: LD_VAR 0 7
30391: IFFALSE 30421
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
30393: LD_ADDR_VAR 0 10
30397: PUSH
30398: LD_VAR 0 10
30402: PUSH
30403: LD_VAR 0 7
30407: PPUSH
30408: LD_INT 3
30410: PPUSH
30411: CALL_OW 259
30415: PUSH
30416: LD_INT 3
30418: MUL
30419: MUL
30420: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
30421: LD_VAR 0 6
30425: PPUSH
30426: CALL_OW 264
30430: PUSH
30431: LD_INT 5
30433: PUSH
30434: LD_INT 6
30436: PUSH
30437: LD_INT 46
30439: PUSH
30440: LD_INT 44
30442: PUSH
30443: LD_INT 47
30445: PUSH
30446: LD_INT 45
30448: PUSH
30449: LD_INT 28
30451: PUSH
30452: LD_INT 7
30454: PUSH
30455: LD_INT 27
30457: PUSH
30458: LD_INT 29
30460: PUSH
30461: EMPTY
30462: LIST
30463: LIST
30464: LIST
30465: LIST
30466: LIST
30467: LIST
30468: LIST
30469: LIST
30470: LIST
30471: LIST
30472: IN
30473: PUSH
30474: LD_VAR 0 1
30478: PPUSH
30479: LD_INT 52
30481: PPUSH
30482: CALL_OW 321
30486: PUSH
30487: LD_INT 2
30489: EQUAL
30490: AND
30491: IFFALSE 30508
// bpoints := bpoints * 1.2 ;
30493: LD_ADDR_VAR 0 10
30497: PUSH
30498: LD_VAR 0 10
30502: PUSH
30503: LD_REAL  1.20000000000000E+0000
30506: MUL
30507: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
30508: LD_VAR 0 6
30512: PPUSH
30513: CALL_OW 264
30517: PUSH
30518: LD_INT 6
30520: PUSH
30521: LD_INT 46
30523: PUSH
30524: LD_INT 47
30526: PUSH
30527: EMPTY
30528: LIST
30529: LIST
30530: LIST
30531: IN
30532: IFFALSE 30549
// bpoints := bpoints * 1.2 ;
30534: LD_ADDR_VAR 0 10
30538: PUSH
30539: LD_VAR 0 10
30543: PUSH
30544: LD_REAL  1.20000000000000E+0000
30547: MUL
30548: ST_TO_ADDR
// end ; unit_building :
30549: GO 30563
30551: LD_INT 3
30553: DOUBLE
30554: EQUAL
30555: IFTRUE 30559
30557: GO 30562
30559: POP
// ; end ;
30560: GO 30563
30562: POP
// for j = 1 to 3 do
30563: LD_ADDR_VAR 0 7
30567: PUSH
30568: DOUBLE
30569: LD_INT 1
30571: DEC
30572: ST_TO_ADDR
30573: LD_INT 3
30575: PUSH
30576: FOR_TO
30577: IFFALSE 30630
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
30579: LD_ADDR_VAR 0 5
30583: PUSH
30584: LD_VAR 0 5
30588: PPUSH
30589: LD_VAR 0 7
30593: PPUSH
30594: LD_VAR 0 5
30598: PUSH
30599: LD_VAR 0 7
30603: ARRAY
30604: PUSH
30605: LD_VAR 0 9
30609: PUSH
30610: LD_VAR 0 7
30614: ARRAY
30615: PUSH
30616: LD_VAR 0 10
30620: MUL
30621: PLUS
30622: PPUSH
30623: CALL_OW 1
30627: ST_TO_ADDR
30628: GO 30576
30630: POP
30631: POP
// end ;
30632: GO 29115
30634: POP
30635: POP
// result := Replace ( result , 4 , tmp ) ;
30636: LD_ADDR_VAR 0 5
30640: PUSH
30641: LD_VAR 0 5
30645: PPUSH
30646: LD_INT 4
30648: PPUSH
30649: LD_VAR 0 8
30653: PPUSH
30654: CALL_OW 1
30658: ST_TO_ADDR
// end ;
30659: LD_VAR 0 5
30663: RET
// export function DangerAtRange ( unit , range ) ; begin
30664: LD_INT 0
30666: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
30667: LD_ADDR_VAR 0 3
30671: PUSH
30672: LD_VAR 0 1
30676: PPUSH
30677: CALL_OW 255
30681: PPUSH
30682: LD_VAR 0 1
30686: PPUSH
30687: CALL_OW 250
30691: PPUSH
30692: LD_VAR 0 1
30696: PPUSH
30697: CALL_OW 251
30701: PPUSH
30702: LD_VAR 0 2
30706: PPUSH
30707: CALL 28967 0 4
30711: ST_TO_ADDR
// end ;
30712: LD_VAR 0 3
30716: RET
// export function DangerInArea ( side , area ) ; begin
30717: LD_INT 0
30719: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
30720: LD_ADDR_VAR 0 3
30724: PUSH
30725: LD_VAR 0 2
30729: PPUSH
30730: LD_INT 81
30732: PUSH
30733: LD_VAR 0 1
30737: PUSH
30738: EMPTY
30739: LIST
30740: LIST
30741: PPUSH
30742: CALL_OW 70
30746: ST_TO_ADDR
// end ;
30747: LD_VAR 0 3
30751: RET
// export function IsExtension ( b ) ; begin
30752: LD_INT 0
30754: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
30755: LD_ADDR_VAR 0 2
30759: PUSH
30760: LD_VAR 0 1
30764: PUSH
30765: LD_INT 23
30767: PUSH
30768: LD_INT 20
30770: PUSH
30771: LD_INT 22
30773: PUSH
30774: LD_INT 17
30776: PUSH
30777: LD_INT 24
30779: PUSH
30780: LD_INT 21
30782: PUSH
30783: LD_INT 19
30785: PUSH
30786: LD_INT 16
30788: PUSH
30789: LD_INT 25
30791: PUSH
30792: LD_INT 18
30794: PUSH
30795: EMPTY
30796: LIST
30797: LIST
30798: LIST
30799: LIST
30800: LIST
30801: LIST
30802: LIST
30803: LIST
30804: LIST
30805: LIST
30806: IN
30807: ST_TO_ADDR
// end ;
30808: LD_VAR 0 2
30812: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
30813: LD_INT 0
30815: PPUSH
30816: PPUSH
30817: PPUSH
// result := [ ] ;
30818: LD_ADDR_VAR 0 3
30822: PUSH
30823: EMPTY
30824: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
30825: LD_ADDR_VAR 0 4
30829: PUSH
30830: LD_VAR 0 2
30834: PPUSH
30835: LD_INT 21
30837: PUSH
30838: LD_INT 3
30840: PUSH
30841: EMPTY
30842: LIST
30843: LIST
30844: PPUSH
30845: CALL_OW 70
30849: ST_TO_ADDR
// if not tmp then
30850: LD_VAR 0 4
30854: NOT
30855: IFFALSE 30859
// exit ;
30857: GO 30917
// for i in tmp do
30859: LD_ADDR_VAR 0 5
30863: PUSH
30864: LD_VAR 0 4
30868: PUSH
30869: FOR_IN
30870: IFFALSE 30905
// if GetBase ( i ) <> base then
30872: LD_VAR 0 5
30876: PPUSH
30877: CALL_OW 274
30881: PUSH
30882: LD_VAR 0 1
30886: NONEQUAL
30887: IFFALSE 30903
// ComLinkToBase ( base , i ) ;
30889: LD_VAR 0 1
30893: PPUSH
30894: LD_VAR 0 5
30898: PPUSH
30899: CALL_OW 169
30903: GO 30869
30905: POP
30906: POP
// result := tmp ;
30907: LD_ADDR_VAR 0 3
30911: PUSH
30912: LD_VAR 0 4
30916: ST_TO_ADDR
// end ;
30917: LD_VAR 0 3
30921: RET
// export function ComComplete ( unit , b ) ; var i ; begin
30922: LD_INT 0
30924: PPUSH
30925: PPUSH
// if BuildingStatus ( b ) = bs_build then
30926: LD_VAR 0 2
30930: PPUSH
30931: CALL_OW 461
30935: PUSH
30936: LD_INT 1
30938: EQUAL
30939: IFFALSE 30999
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
30941: LD_VAR 0 1
30945: PPUSH
30946: LD_STRING h
30948: PUSH
30949: LD_VAR 0 2
30953: PPUSH
30954: CALL_OW 250
30958: PUSH
30959: LD_VAR 0 2
30963: PPUSH
30964: CALL_OW 251
30968: PUSH
30969: LD_VAR 0 2
30973: PUSH
30974: LD_INT 0
30976: PUSH
30977: LD_INT 0
30979: PUSH
30980: LD_INT 0
30982: PUSH
30983: EMPTY
30984: LIST
30985: LIST
30986: LIST
30987: LIST
30988: LIST
30989: LIST
30990: LIST
30991: PUSH
30992: EMPTY
30993: LIST
30994: PPUSH
30995: CALL_OW 446
// end ;
30999: LD_VAR 0 3
31003: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
31004: LD_INT 0
31006: PPUSH
31007: PPUSH
31008: PPUSH
31009: PPUSH
31010: PPUSH
31011: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
31012: LD_VAR 0 1
31016: NOT
31017: PUSH
31018: LD_VAR 0 1
31022: PPUSH
31023: CALL_OW 263
31027: PUSH
31028: LD_INT 2
31030: EQUAL
31031: NOT
31032: OR
31033: IFFALSE 31037
// exit ;
31035: GO 31353
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
31037: LD_ADDR_VAR 0 6
31041: PUSH
31042: LD_INT 22
31044: PUSH
31045: LD_VAR 0 1
31049: PPUSH
31050: CALL_OW 255
31054: PUSH
31055: EMPTY
31056: LIST
31057: LIST
31058: PUSH
31059: LD_INT 2
31061: PUSH
31062: LD_INT 30
31064: PUSH
31065: LD_INT 36
31067: PUSH
31068: EMPTY
31069: LIST
31070: LIST
31071: PUSH
31072: LD_INT 34
31074: PUSH
31075: LD_INT 31
31077: PUSH
31078: EMPTY
31079: LIST
31080: LIST
31081: PUSH
31082: EMPTY
31083: LIST
31084: LIST
31085: LIST
31086: PUSH
31087: EMPTY
31088: LIST
31089: LIST
31090: PPUSH
31091: CALL_OW 69
31095: ST_TO_ADDR
// if not tmp then
31096: LD_VAR 0 6
31100: NOT
31101: IFFALSE 31105
// exit ;
31103: GO 31353
// result := [ ] ;
31105: LD_ADDR_VAR 0 2
31109: PUSH
31110: EMPTY
31111: ST_TO_ADDR
// for i in tmp do
31112: LD_ADDR_VAR 0 3
31116: PUSH
31117: LD_VAR 0 6
31121: PUSH
31122: FOR_IN
31123: IFFALSE 31194
// begin t := UnitsInside ( i ) ;
31125: LD_ADDR_VAR 0 4
31129: PUSH
31130: LD_VAR 0 3
31134: PPUSH
31135: CALL_OW 313
31139: ST_TO_ADDR
// if t then
31140: LD_VAR 0 4
31144: IFFALSE 31192
// for j in t do
31146: LD_ADDR_VAR 0 7
31150: PUSH
31151: LD_VAR 0 4
31155: PUSH
31156: FOR_IN
31157: IFFALSE 31190
// result := Insert ( result , result + 1 , j ) ;
31159: LD_ADDR_VAR 0 2
31163: PUSH
31164: LD_VAR 0 2
31168: PPUSH
31169: LD_VAR 0 2
31173: PUSH
31174: LD_INT 1
31176: PLUS
31177: PPUSH
31178: LD_VAR 0 7
31182: PPUSH
31183: CALL_OW 2
31187: ST_TO_ADDR
31188: GO 31156
31190: POP
31191: POP
// end ;
31192: GO 31122
31194: POP
31195: POP
// if not result then
31196: LD_VAR 0 2
31200: NOT
31201: IFFALSE 31205
// exit ;
31203: GO 31353
// mech := result [ 1 ] ;
31205: LD_ADDR_VAR 0 5
31209: PUSH
31210: LD_VAR 0 2
31214: PUSH
31215: LD_INT 1
31217: ARRAY
31218: ST_TO_ADDR
// if result > 1 then
31219: LD_VAR 0 2
31223: PUSH
31224: LD_INT 1
31226: GREATER
31227: IFFALSE 31339
// for i = 2 to result do
31229: LD_ADDR_VAR 0 3
31233: PUSH
31234: DOUBLE
31235: LD_INT 2
31237: DEC
31238: ST_TO_ADDR
31239: LD_VAR 0 2
31243: PUSH
31244: FOR_TO
31245: IFFALSE 31337
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
31247: LD_ADDR_VAR 0 4
31251: PUSH
31252: LD_VAR 0 2
31256: PUSH
31257: LD_VAR 0 3
31261: ARRAY
31262: PPUSH
31263: LD_INT 3
31265: PPUSH
31266: CALL_OW 259
31270: PUSH
31271: LD_VAR 0 2
31275: PUSH
31276: LD_VAR 0 3
31280: ARRAY
31281: PPUSH
31282: CALL_OW 432
31286: MINUS
31287: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
31288: LD_VAR 0 4
31292: PUSH
31293: LD_VAR 0 5
31297: PPUSH
31298: LD_INT 3
31300: PPUSH
31301: CALL_OW 259
31305: PUSH
31306: LD_VAR 0 5
31310: PPUSH
31311: CALL_OW 432
31315: MINUS
31316: GREATEREQUAL
31317: IFFALSE 31335
// mech := result [ i ] ;
31319: LD_ADDR_VAR 0 5
31323: PUSH
31324: LD_VAR 0 2
31328: PUSH
31329: LD_VAR 0 3
31333: ARRAY
31334: ST_TO_ADDR
// end ;
31335: GO 31244
31337: POP
31338: POP
// ComLinkTo ( vehicle , mech ) ;
31339: LD_VAR 0 1
31343: PPUSH
31344: LD_VAR 0 5
31348: PPUSH
31349: CALL_OW 135
// end ;
31353: LD_VAR 0 2
31357: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
31358: LD_INT 0
31360: PPUSH
31361: PPUSH
31362: PPUSH
31363: PPUSH
31364: PPUSH
31365: PPUSH
31366: PPUSH
31367: PPUSH
31368: PPUSH
31369: PPUSH
31370: PPUSH
31371: PPUSH
31372: PPUSH
// result := [ ] ;
31373: LD_ADDR_VAR 0 7
31377: PUSH
31378: EMPTY
31379: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
31380: LD_VAR 0 1
31384: PPUSH
31385: CALL_OW 266
31389: PUSH
31390: LD_INT 0
31392: PUSH
31393: LD_INT 1
31395: PUSH
31396: EMPTY
31397: LIST
31398: LIST
31399: IN
31400: NOT
31401: IFFALSE 31405
// exit ;
31403: GO 33036
// if name then
31405: LD_VAR 0 3
31409: IFFALSE 31425
// SetBName ( base_dep , name ) ;
31411: LD_VAR 0 1
31415: PPUSH
31416: LD_VAR 0 3
31420: PPUSH
31421: CALL_OW 500
// base := GetBase ( base_dep ) ;
31425: LD_ADDR_VAR 0 15
31429: PUSH
31430: LD_VAR 0 1
31434: PPUSH
31435: CALL_OW 274
31439: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
31440: LD_ADDR_VAR 0 16
31444: PUSH
31445: LD_VAR 0 1
31449: PPUSH
31450: CALL_OW 255
31454: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
31455: LD_ADDR_VAR 0 17
31459: PUSH
31460: LD_VAR 0 1
31464: PPUSH
31465: CALL_OW 248
31469: ST_TO_ADDR
// if sources then
31470: LD_VAR 0 5
31474: IFFALSE 31521
// for i = 1 to 3 do
31476: LD_ADDR_VAR 0 8
31480: PUSH
31481: DOUBLE
31482: LD_INT 1
31484: DEC
31485: ST_TO_ADDR
31486: LD_INT 3
31488: PUSH
31489: FOR_TO
31490: IFFALSE 31519
// AddResourceType ( base , i , sources [ i ] ) ;
31492: LD_VAR 0 15
31496: PPUSH
31497: LD_VAR 0 8
31501: PPUSH
31502: LD_VAR 0 5
31506: PUSH
31507: LD_VAR 0 8
31511: ARRAY
31512: PPUSH
31513: CALL_OW 276
31517: GO 31489
31519: POP
31520: POP
// buildings := GetBaseBuildings ( base , area ) ;
31521: LD_ADDR_VAR 0 18
31525: PUSH
31526: LD_VAR 0 15
31530: PPUSH
31531: LD_VAR 0 2
31535: PPUSH
31536: CALL 30813 0 2
31540: ST_TO_ADDR
// InitHc ;
31541: CALL_OW 19
// InitUc ;
31545: CALL_OW 18
// uc_side := side ;
31549: LD_ADDR_OWVAR 20
31553: PUSH
31554: LD_VAR 0 16
31558: ST_TO_ADDR
// uc_nation := nation ;
31559: LD_ADDR_OWVAR 21
31563: PUSH
31564: LD_VAR 0 17
31568: ST_TO_ADDR
// if buildings then
31569: LD_VAR 0 18
31573: IFFALSE 32895
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
31575: LD_ADDR_VAR 0 19
31579: PUSH
31580: LD_VAR 0 18
31584: PPUSH
31585: LD_INT 2
31587: PUSH
31588: LD_INT 30
31590: PUSH
31591: LD_INT 29
31593: PUSH
31594: EMPTY
31595: LIST
31596: LIST
31597: PUSH
31598: LD_INT 30
31600: PUSH
31601: LD_INT 30
31603: PUSH
31604: EMPTY
31605: LIST
31606: LIST
31607: PUSH
31608: EMPTY
31609: LIST
31610: LIST
31611: LIST
31612: PPUSH
31613: CALL_OW 72
31617: ST_TO_ADDR
// if tmp then
31618: LD_VAR 0 19
31622: IFFALSE 31670
// for i in tmp do
31624: LD_ADDR_VAR 0 8
31628: PUSH
31629: LD_VAR 0 19
31633: PUSH
31634: FOR_IN
31635: IFFALSE 31668
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
31637: LD_VAR 0 8
31641: PPUSH
31642: CALL_OW 250
31646: PPUSH
31647: LD_VAR 0 8
31651: PPUSH
31652: CALL_OW 251
31656: PPUSH
31657: LD_VAR 0 16
31661: PPUSH
31662: CALL_OW 441
31666: GO 31634
31668: POP
31669: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
31670: LD_VAR 0 18
31674: PPUSH
31675: LD_INT 2
31677: PUSH
31678: LD_INT 30
31680: PUSH
31681: LD_INT 32
31683: PUSH
31684: EMPTY
31685: LIST
31686: LIST
31687: PUSH
31688: LD_INT 30
31690: PUSH
31691: LD_INT 33
31693: PUSH
31694: EMPTY
31695: LIST
31696: LIST
31697: PUSH
31698: EMPTY
31699: LIST
31700: LIST
31701: LIST
31702: PPUSH
31703: CALL_OW 72
31707: IFFALSE 31795
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
31709: LD_ADDR_VAR 0 8
31713: PUSH
31714: LD_VAR 0 18
31718: PPUSH
31719: LD_INT 2
31721: PUSH
31722: LD_INT 30
31724: PUSH
31725: LD_INT 32
31727: PUSH
31728: EMPTY
31729: LIST
31730: LIST
31731: PUSH
31732: LD_INT 30
31734: PUSH
31735: LD_INT 33
31737: PUSH
31738: EMPTY
31739: LIST
31740: LIST
31741: PUSH
31742: EMPTY
31743: LIST
31744: LIST
31745: LIST
31746: PPUSH
31747: CALL_OW 72
31751: PUSH
31752: FOR_IN
31753: IFFALSE 31793
// begin if not GetBWeapon ( i ) then
31755: LD_VAR 0 8
31759: PPUSH
31760: CALL_OW 269
31764: NOT
31765: IFFALSE 31791
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
31767: LD_VAR 0 8
31771: PPUSH
31772: LD_VAR 0 8
31776: PPUSH
31777: LD_VAR 0 2
31781: PPUSH
31782: CALL 33041 0 2
31786: PPUSH
31787: CALL_OW 431
// end ;
31791: GO 31752
31793: POP
31794: POP
// end ; for i = 1 to personel do
31795: LD_ADDR_VAR 0 8
31799: PUSH
31800: DOUBLE
31801: LD_INT 1
31803: DEC
31804: ST_TO_ADDR
31805: LD_VAR 0 6
31809: PUSH
31810: FOR_TO
31811: IFFALSE 32875
// begin if i > 4 then
31813: LD_VAR 0 8
31817: PUSH
31818: LD_INT 4
31820: GREATER
31821: IFFALSE 31825
// break ;
31823: GO 32875
// case i of 1 :
31825: LD_VAR 0 8
31829: PUSH
31830: LD_INT 1
31832: DOUBLE
31833: EQUAL
31834: IFTRUE 31838
31836: GO 31918
31838: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
31839: LD_ADDR_VAR 0 12
31843: PUSH
31844: LD_VAR 0 18
31848: PPUSH
31849: LD_INT 22
31851: PUSH
31852: LD_VAR 0 16
31856: PUSH
31857: EMPTY
31858: LIST
31859: LIST
31860: PUSH
31861: LD_INT 58
31863: PUSH
31864: EMPTY
31865: LIST
31866: PUSH
31867: LD_INT 2
31869: PUSH
31870: LD_INT 30
31872: PUSH
31873: LD_INT 32
31875: PUSH
31876: EMPTY
31877: LIST
31878: LIST
31879: PUSH
31880: LD_INT 30
31882: PUSH
31883: LD_INT 4
31885: PUSH
31886: EMPTY
31887: LIST
31888: LIST
31889: PUSH
31890: LD_INT 30
31892: PUSH
31893: LD_INT 5
31895: PUSH
31896: EMPTY
31897: LIST
31898: LIST
31899: PUSH
31900: EMPTY
31901: LIST
31902: LIST
31903: LIST
31904: LIST
31905: PUSH
31906: EMPTY
31907: LIST
31908: LIST
31909: LIST
31910: PPUSH
31911: CALL_OW 72
31915: ST_TO_ADDR
31916: GO 32140
31918: LD_INT 2
31920: DOUBLE
31921: EQUAL
31922: IFTRUE 31926
31924: GO 31988
31926: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
31927: LD_ADDR_VAR 0 12
31931: PUSH
31932: LD_VAR 0 18
31936: PPUSH
31937: LD_INT 22
31939: PUSH
31940: LD_VAR 0 16
31944: PUSH
31945: EMPTY
31946: LIST
31947: LIST
31948: PUSH
31949: LD_INT 2
31951: PUSH
31952: LD_INT 30
31954: PUSH
31955: LD_INT 0
31957: PUSH
31958: EMPTY
31959: LIST
31960: LIST
31961: PUSH
31962: LD_INT 30
31964: PUSH
31965: LD_INT 1
31967: PUSH
31968: EMPTY
31969: LIST
31970: LIST
31971: PUSH
31972: EMPTY
31973: LIST
31974: LIST
31975: LIST
31976: PUSH
31977: EMPTY
31978: LIST
31979: LIST
31980: PPUSH
31981: CALL_OW 72
31985: ST_TO_ADDR
31986: GO 32140
31988: LD_INT 3
31990: DOUBLE
31991: EQUAL
31992: IFTRUE 31996
31994: GO 32058
31996: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
31997: LD_ADDR_VAR 0 12
32001: PUSH
32002: LD_VAR 0 18
32006: PPUSH
32007: LD_INT 22
32009: PUSH
32010: LD_VAR 0 16
32014: PUSH
32015: EMPTY
32016: LIST
32017: LIST
32018: PUSH
32019: LD_INT 2
32021: PUSH
32022: LD_INT 30
32024: PUSH
32025: LD_INT 2
32027: PUSH
32028: EMPTY
32029: LIST
32030: LIST
32031: PUSH
32032: LD_INT 30
32034: PUSH
32035: LD_INT 3
32037: PUSH
32038: EMPTY
32039: LIST
32040: LIST
32041: PUSH
32042: EMPTY
32043: LIST
32044: LIST
32045: LIST
32046: PUSH
32047: EMPTY
32048: LIST
32049: LIST
32050: PPUSH
32051: CALL_OW 72
32055: ST_TO_ADDR
32056: GO 32140
32058: LD_INT 4
32060: DOUBLE
32061: EQUAL
32062: IFTRUE 32066
32064: GO 32139
32066: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
32067: LD_ADDR_VAR 0 12
32071: PUSH
32072: LD_VAR 0 18
32076: PPUSH
32077: LD_INT 22
32079: PUSH
32080: LD_VAR 0 16
32084: PUSH
32085: EMPTY
32086: LIST
32087: LIST
32088: PUSH
32089: LD_INT 2
32091: PUSH
32092: LD_INT 30
32094: PUSH
32095: LD_INT 6
32097: PUSH
32098: EMPTY
32099: LIST
32100: LIST
32101: PUSH
32102: LD_INT 30
32104: PUSH
32105: LD_INT 7
32107: PUSH
32108: EMPTY
32109: LIST
32110: LIST
32111: PUSH
32112: LD_INT 30
32114: PUSH
32115: LD_INT 8
32117: PUSH
32118: EMPTY
32119: LIST
32120: LIST
32121: PUSH
32122: EMPTY
32123: LIST
32124: LIST
32125: LIST
32126: LIST
32127: PUSH
32128: EMPTY
32129: LIST
32130: LIST
32131: PPUSH
32132: CALL_OW 72
32136: ST_TO_ADDR
32137: GO 32140
32139: POP
// if i = 1 then
32140: LD_VAR 0 8
32144: PUSH
32145: LD_INT 1
32147: EQUAL
32148: IFFALSE 32259
// begin tmp := [ ] ;
32150: LD_ADDR_VAR 0 19
32154: PUSH
32155: EMPTY
32156: ST_TO_ADDR
// for j in f do
32157: LD_ADDR_VAR 0 9
32161: PUSH
32162: LD_VAR 0 12
32166: PUSH
32167: FOR_IN
32168: IFFALSE 32241
// if GetBType ( j ) = b_bunker then
32170: LD_VAR 0 9
32174: PPUSH
32175: CALL_OW 266
32179: PUSH
32180: LD_INT 32
32182: EQUAL
32183: IFFALSE 32210
// tmp := Insert ( tmp , 1 , j ) else
32185: LD_ADDR_VAR 0 19
32189: PUSH
32190: LD_VAR 0 19
32194: PPUSH
32195: LD_INT 1
32197: PPUSH
32198: LD_VAR 0 9
32202: PPUSH
32203: CALL_OW 2
32207: ST_TO_ADDR
32208: GO 32239
// tmp := Insert ( tmp , tmp + 1 , j ) ;
32210: LD_ADDR_VAR 0 19
32214: PUSH
32215: LD_VAR 0 19
32219: PPUSH
32220: LD_VAR 0 19
32224: PUSH
32225: LD_INT 1
32227: PLUS
32228: PPUSH
32229: LD_VAR 0 9
32233: PPUSH
32234: CALL_OW 2
32238: ST_TO_ADDR
32239: GO 32167
32241: POP
32242: POP
// if tmp then
32243: LD_VAR 0 19
32247: IFFALSE 32259
// f := tmp ;
32249: LD_ADDR_VAR 0 12
32253: PUSH
32254: LD_VAR 0 19
32258: ST_TO_ADDR
// end ; x := personel [ i ] ;
32259: LD_ADDR_VAR 0 13
32263: PUSH
32264: LD_VAR 0 6
32268: PUSH
32269: LD_VAR 0 8
32273: ARRAY
32274: ST_TO_ADDR
// if x = - 1 then
32275: LD_VAR 0 13
32279: PUSH
32280: LD_INT 1
32282: NEG
32283: EQUAL
32284: IFFALSE 32493
// begin for j in f do
32286: LD_ADDR_VAR 0 9
32290: PUSH
32291: LD_VAR 0 12
32295: PUSH
32296: FOR_IN
32297: IFFALSE 32489
// repeat InitHc ;
32299: CALL_OW 19
// if GetBType ( j ) = b_barracks then
32303: LD_VAR 0 9
32307: PPUSH
32308: CALL_OW 266
32312: PUSH
32313: LD_INT 5
32315: EQUAL
32316: IFFALSE 32386
// begin if UnitsInside ( j ) < 3 then
32318: LD_VAR 0 9
32322: PPUSH
32323: CALL_OW 313
32327: PUSH
32328: LD_INT 3
32330: LESS
32331: IFFALSE 32367
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
32333: LD_INT 0
32335: PPUSH
32336: LD_INT 5
32338: PUSH
32339: LD_INT 8
32341: PUSH
32342: LD_INT 9
32344: PUSH
32345: EMPTY
32346: LIST
32347: LIST
32348: LIST
32349: PUSH
32350: LD_VAR 0 17
32354: ARRAY
32355: PPUSH
32356: LD_VAR 0 4
32360: PPUSH
32361: CALL_OW 380
32365: GO 32384
// PrepareHuman ( false , i , skill ) ;
32367: LD_INT 0
32369: PPUSH
32370: LD_VAR 0 8
32374: PPUSH
32375: LD_VAR 0 4
32379: PPUSH
32380: CALL_OW 380
// end else
32384: GO 32403
// PrepareHuman ( false , i , skill ) ;
32386: LD_INT 0
32388: PPUSH
32389: LD_VAR 0 8
32393: PPUSH
32394: LD_VAR 0 4
32398: PPUSH
32399: CALL_OW 380
// un := CreateHuman ;
32403: LD_ADDR_VAR 0 14
32407: PUSH
32408: CALL_OW 44
32412: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32413: LD_ADDR_VAR 0 7
32417: PUSH
32418: LD_VAR 0 7
32422: PPUSH
32423: LD_INT 1
32425: PPUSH
32426: LD_VAR 0 14
32430: PPUSH
32431: CALL_OW 2
32435: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
32436: LD_VAR 0 14
32440: PPUSH
32441: LD_VAR 0 9
32445: PPUSH
32446: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
32450: LD_VAR 0 9
32454: PPUSH
32455: CALL_OW 313
32459: PUSH
32460: LD_INT 6
32462: EQUAL
32463: PUSH
32464: LD_VAR 0 9
32468: PPUSH
32469: CALL_OW 266
32473: PUSH
32474: LD_INT 32
32476: PUSH
32477: LD_INT 31
32479: PUSH
32480: EMPTY
32481: LIST
32482: LIST
32483: IN
32484: OR
32485: IFFALSE 32299
32487: GO 32296
32489: POP
32490: POP
// end else
32491: GO 32873
// for j = 1 to x do
32493: LD_ADDR_VAR 0 9
32497: PUSH
32498: DOUBLE
32499: LD_INT 1
32501: DEC
32502: ST_TO_ADDR
32503: LD_VAR 0 13
32507: PUSH
32508: FOR_TO
32509: IFFALSE 32871
// begin InitHc ;
32511: CALL_OW 19
// if not f then
32515: LD_VAR 0 12
32519: NOT
32520: IFFALSE 32609
// begin PrepareHuman ( false , i , skill ) ;
32522: LD_INT 0
32524: PPUSH
32525: LD_VAR 0 8
32529: PPUSH
32530: LD_VAR 0 4
32534: PPUSH
32535: CALL_OW 380
// un := CreateHuman ;
32539: LD_ADDR_VAR 0 14
32543: PUSH
32544: CALL_OW 44
32548: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32549: LD_ADDR_VAR 0 7
32553: PUSH
32554: LD_VAR 0 7
32558: PPUSH
32559: LD_INT 1
32561: PPUSH
32562: LD_VAR 0 14
32566: PPUSH
32567: CALL_OW 2
32571: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
32572: LD_VAR 0 14
32576: PPUSH
32577: LD_VAR 0 1
32581: PPUSH
32582: CALL_OW 250
32586: PPUSH
32587: LD_VAR 0 1
32591: PPUSH
32592: CALL_OW 251
32596: PPUSH
32597: LD_INT 10
32599: PPUSH
32600: LD_INT 0
32602: PPUSH
32603: CALL_OW 50
// continue ;
32607: GO 32508
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
32609: LD_VAR 0 12
32613: PUSH
32614: LD_INT 1
32616: ARRAY
32617: PPUSH
32618: CALL_OW 313
32622: PUSH
32623: LD_VAR 0 12
32627: PUSH
32628: LD_INT 1
32630: ARRAY
32631: PPUSH
32632: CALL_OW 266
32636: PUSH
32637: LD_INT 32
32639: PUSH
32640: LD_INT 31
32642: PUSH
32643: EMPTY
32644: LIST
32645: LIST
32646: IN
32647: AND
32648: PUSH
32649: LD_VAR 0 12
32653: PUSH
32654: LD_INT 1
32656: ARRAY
32657: PPUSH
32658: CALL_OW 313
32662: PUSH
32663: LD_INT 6
32665: EQUAL
32666: OR
32667: IFFALSE 32687
// f := Delete ( f , 1 ) ;
32669: LD_ADDR_VAR 0 12
32673: PUSH
32674: LD_VAR 0 12
32678: PPUSH
32679: LD_INT 1
32681: PPUSH
32682: CALL_OW 3
32686: ST_TO_ADDR
// if not f then
32687: LD_VAR 0 12
32691: NOT
32692: IFFALSE 32710
// begin x := x + 2 ;
32694: LD_ADDR_VAR 0 13
32698: PUSH
32699: LD_VAR 0 13
32703: PUSH
32704: LD_INT 2
32706: PLUS
32707: ST_TO_ADDR
// continue ;
32708: GO 32508
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
32710: LD_VAR 0 12
32714: PUSH
32715: LD_INT 1
32717: ARRAY
32718: PPUSH
32719: CALL_OW 266
32723: PUSH
32724: LD_INT 5
32726: EQUAL
32727: IFFALSE 32801
// begin if UnitsInside ( f [ 1 ] ) < 3 then
32729: LD_VAR 0 12
32733: PUSH
32734: LD_INT 1
32736: ARRAY
32737: PPUSH
32738: CALL_OW 313
32742: PUSH
32743: LD_INT 3
32745: LESS
32746: IFFALSE 32782
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
32748: LD_INT 0
32750: PPUSH
32751: LD_INT 5
32753: PUSH
32754: LD_INT 8
32756: PUSH
32757: LD_INT 9
32759: PUSH
32760: EMPTY
32761: LIST
32762: LIST
32763: LIST
32764: PUSH
32765: LD_VAR 0 17
32769: ARRAY
32770: PPUSH
32771: LD_VAR 0 4
32775: PPUSH
32776: CALL_OW 380
32780: GO 32799
// PrepareHuman ( false , i , skill ) ;
32782: LD_INT 0
32784: PPUSH
32785: LD_VAR 0 8
32789: PPUSH
32790: LD_VAR 0 4
32794: PPUSH
32795: CALL_OW 380
// end else
32799: GO 32818
// PrepareHuman ( false , i , skill ) ;
32801: LD_INT 0
32803: PPUSH
32804: LD_VAR 0 8
32808: PPUSH
32809: LD_VAR 0 4
32813: PPUSH
32814: CALL_OW 380
// un := CreateHuman ;
32818: LD_ADDR_VAR 0 14
32822: PUSH
32823: CALL_OW 44
32827: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32828: LD_ADDR_VAR 0 7
32832: PUSH
32833: LD_VAR 0 7
32837: PPUSH
32838: LD_INT 1
32840: PPUSH
32841: LD_VAR 0 14
32845: PPUSH
32846: CALL_OW 2
32850: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
32851: LD_VAR 0 14
32855: PPUSH
32856: LD_VAR 0 12
32860: PUSH
32861: LD_INT 1
32863: ARRAY
32864: PPUSH
32865: CALL_OW 52
// end ;
32869: GO 32508
32871: POP
32872: POP
// end ;
32873: GO 31810
32875: POP
32876: POP
// result := result ^ buildings ;
32877: LD_ADDR_VAR 0 7
32881: PUSH
32882: LD_VAR 0 7
32886: PUSH
32887: LD_VAR 0 18
32891: ADD
32892: ST_TO_ADDR
// end else
32893: GO 33036
// begin for i = 1 to personel do
32895: LD_ADDR_VAR 0 8
32899: PUSH
32900: DOUBLE
32901: LD_INT 1
32903: DEC
32904: ST_TO_ADDR
32905: LD_VAR 0 6
32909: PUSH
32910: FOR_TO
32911: IFFALSE 33034
// begin if i > 4 then
32913: LD_VAR 0 8
32917: PUSH
32918: LD_INT 4
32920: GREATER
32921: IFFALSE 32925
// break ;
32923: GO 33034
// x := personel [ i ] ;
32925: LD_ADDR_VAR 0 13
32929: PUSH
32930: LD_VAR 0 6
32934: PUSH
32935: LD_VAR 0 8
32939: ARRAY
32940: ST_TO_ADDR
// if x = - 1 then
32941: LD_VAR 0 13
32945: PUSH
32946: LD_INT 1
32948: NEG
32949: EQUAL
32950: IFFALSE 32954
// continue ;
32952: GO 32910
// PrepareHuman ( false , i , skill ) ;
32954: LD_INT 0
32956: PPUSH
32957: LD_VAR 0 8
32961: PPUSH
32962: LD_VAR 0 4
32966: PPUSH
32967: CALL_OW 380
// un := CreateHuman ;
32971: LD_ADDR_VAR 0 14
32975: PUSH
32976: CALL_OW 44
32980: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
32981: LD_VAR 0 14
32985: PPUSH
32986: LD_VAR 0 1
32990: PPUSH
32991: CALL_OW 250
32995: PPUSH
32996: LD_VAR 0 1
33000: PPUSH
33001: CALL_OW 251
33005: PPUSH
33006: LD_INT 10
33008: PPUSH
33009: LD_INT 0
33011: PPUSH
33012: CALL_OW 50
// result := result ^ un ;
33016: LD_ADDR_VAR 0 7
33020: PUSH
33021: LD_VAR 0 7
33025: PUSH
33026: LD_VAR 0 14
33030: ADD
33031: ST_TO_ADDR
// end ;
33032: GO 32910
33034: POP
33035: POP
// end ; end ;
33036: LD_VAR 0 7
33040: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
33041: LD_INT 0
33043: PPUSH
33044: PPUSH
33045: PPUSH
33046: PPUSH
33047: PPUSH
33048: PPUSH
33049: PPUSH
33050: PPUSH
33051: PPUSH
33052: PPUSH
33053: PPUSH
33054: PPUSH
33055: PPUSH
33056: PPUSH
33057: PPUSH
33058: PPUSH
// result := false ;
33059: LD_ADDR_VAR 0 3
33063: PUSH
33064: LD_INT 0
33066: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
33067: LD_VAR 0 1
33071: NOT
33072: PUSH
33073: LD_VAR 0 1
33077: PPUSH
33078: CALL_OW 266
33082: PUSH
33083: LD_INT 32
33085: PUSH
33086: LD_INT 33
33088: PUSH
33089: EMPTY
33090: LIST
33091: LIST
33092: IN
33093: NOT
33094: OR
33095: IFFALSE 33099
// exit ;
33097: GO 34235
// nat := GetNation ( tower ) ;
33099: LD_ADDR_VAR 0 12
33103: PUSH
33104: LD_VAR 0 1
33108: PPUSH
33109: CALL_OW 248
33113: ST_TO_ADDR
// side := GetSide ( tower ) ;
33114: LD_ADDR_VAR 0 16
33118: PUSH
33119: LD_VAR 0 1
33123: PPUSH
33124: CALL_OW 255
33128: ST_TO_ADDR
// x := GetX ( tower ) ;
33129: LD_ADDR_VAR 0 10
33133: PUSH
33134: LD_VAR 0 1
33138: PPUSH
33139: CALL_OW 250
33143: ST_TO_ADDR
// y := GetY ( tower ) ;
33144: LD_ADDR_VAR 0 11
33148: PUSH
33149: LD_VAR 0 1
33153: PPUSH
33154: CALL_OW 251
33158: ST_TO_ADDR
// if not x or not y then
33159: LD_VAR 0 10
33163: NOT
33164: PUSH
33165: LD_VAR 0 11
33169: NOT
33170: OR
33171: IFFALSE 33175
// exit ;
33173: GO 34235
// weapon := 0 ;
33175: LD_ADDR_VAR 0 18
33179: PUSH
33180: LD_INT 0
33182: ST_TO_ADDR
// fac_list := [ ] ;
33183: LD_ADDR_VAR 0 17
33187: PUSH
33188: EMPTY
33189: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
33190: LD_ADDR_VAR 0 6
33194: PUSH
33195: LD_VAR 0 1
33199: PPUSH
33200: CALL_OW 274
33204: PPUSH
33205: LD_VAR 0 2
33209: PPUSH
33210: CALL 30813 0 2
33214: PPUSH
33215: LD_INT 30
33217: PUSH
33218: LD_INT 3
33220: PUSH
33221: EMPTY
33222: LIST
33223: LIST
33224: PPUSH
33225: CALL_OW 72
33229: ST_TO_ADDR
// if not factories then
33230: LD_VAR 0 6
33234: NOT
33235: IFFALSE 33239
// exit ;
33237: GO 34235
// for i in factories do
33239: LD_ADDR_VAR 0 8
33243: PUSH
33244: LD_VAR 0 6
33248: PUSH
33249: FOR_IN
33250: IFFALSE 33275
// fac_list := fac_list union AvailableWeaponList ( i ) ;
33252: LD_ADDR_VAR 0 17
33256: PUSH
33257: LD_VAR 0 17
33261: PUSH
33262: LD_VAR 0 8
33266: PPUSH
33267: CALL_OW 478
33271: UNION
33272: ST_TO_ADDR
33273: GO 33249
33275: POP
33276: POP
// if not fac_list then
33277: LD_VAR 0 17
33281: NOT
33282: IFFALSE 33286
// exit ;
33284: GO 34235
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
33286: LD_ADDR_VAR 0 5
33290: PUSH
33291: LD_INT 4
33293: PUSH
33294: LD_INT 5
33296: PUSH
33297: LD_INT 9
33299: PUSH
33300: LD_INT 10
33302: PUSH
33303: LD_INT 6
33305: PUSH
33306: LD_INT 7
33308: PUSH
33309: LD_INT 11
33311: PUSH
33312: EMPTY
33313: LIST
33314: LIST
33315: LIST
33316: LIST
33317: LIST
33318: LIST
33319: LIST
33320: PUSH
33321: LD_INT 27
33323: PUSH
33324: LD_INT 28
33326: PUSH
33327: LD_INT 26
33329: PUSH
33330: LD_INT 30
33332: PUSH
33333: EMPTY
33334: LIST
33335: LIST
33336: LIST
33337: LIST
33338: PUSH
33339: LD_INT 43
33341: PUSH
33342: LD_INT 44
33344: PUSH
33345: LD_INT 46
33347: PUSH
33348: LD_INT 45
33350: PUSH
33351: LD_INT 47
33353: PUSH
33354: LD_INT 49
33356: PUSH
33357: EMPTY
33358: LIST
33359: LIST
33360: LIST
33361: LIST
33362: LIST
33363: LIST
33364: PUSH
33365: EMPTY
33366: LIST
33367: LIST
33368: LIST
33369: PUSH
33370: LD_VAR 0 12
33374: ARRAY
33375: ST_TO_ADDR
// for i in list do
33376: LD_ADDR_VAR 0 8
33380: PUSH
33381: LD_VAR 0 5
33385: PUSH
33386: FOR_IN
33387: IFFALSE 33420
// if not i in fac_list then
33389: LD_VAR 0 8
33393: PUSH
33394: LD_VAR 0 17
33398: IN
33399: NOT
33400: IFFALSE 33418
// list := list diff i ;
33402: LD_ADDR_VAR 0 5
33406: PUSH
33407: LD_VAR 0 5
33411: PUSH
33412: LD_VAR 0 8
33416: DIFF
33417: ST_TO_ADDR
33418: GO 33386
33420: POP
33421: POP
// if not list then
33422: LD_VAR 0 5
33426: NOT
33427: IFFALSE 33431
// exit ;
33429: GO 34235
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
33431: LD_VAR 0 12
33435: PUSH
33436: LD_INT 3
33438: EQUAL
33439: PUSH
33440: LD_INT 49
33442: PUSH
33443: LD_VAR 0 5
33447: IN
33448: AND
33449: PUSH
33450: LD_INT 31
33452: PPUSH
33453: LD_VAR 0 16
33457: PPUSH
33458: CALL_OW 321
33462: PUSH
33463: LD_INT 2
33465: EQUAL
33466: AND
33467: IFFALSE 33527
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
33469: LD_INT 22
33471: PUSH
33472: LD_VAR 0 16
33476: PUSH
33477: EMPTY
33478: LIST
33479: LIST
33480: PUSH
33481: LD_INT 35
33483: PUSH
33484: LD_INT 49
33486: PUSH
33487: EMPTY
33488: LIST
33489: LIST
33490: PUSH
33491: LD_INT 91
33493: PUSH
33494: LD_VAR 0 1
33498: PUSH
33499: LD_INT 10
33501: PUSH
33502: EMPTY
33503: LIST
33504: LIST
33505: LIST
33506: PUSH
33507: EMPTY
33508: LIST
33509: LIST
33510: LIST
33511: PPUSH
33512: CALL_OW 69
33516: NOT
33517: IFFALSE 33527
// weapon := ru_time_lapser ;
33519: LD_ADDR_VAR 0 18
33523: PUSH
33524: LD_INT 49
33526: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
33527: LD_VAR 0 12
33531: PUSH
33532: LD_INT 1
33534: PUSH
33535: LD_INT 2
33537: PUSH
33538: EMPTY
33539: LIST
33540: LIST
33541: IN
33542: PUSH
33543: LD_INT 11
33545: PUSH
33546: LD_VAR 0 5
33550: IN
33551: PUSH
33552: LD_INT 30
33554: PUSH
33555: LD_VAR 0 5
33559: IN
33560: OR
33561: AND
33562: PUSH
33563: LD_INT 6
33565: PPUSH
33566: LD_VAR 0 16
33570: PPUSH
33571: CALL_OW 321
33575: PUSH
33576: LD_INT 2
33578: EQUAL
33579: AND
33580: IFFALSE 33745
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
33582: LD_INT 22
33584: PUSH
33585: LD_VAR 0 16
33589: PUSH
33590: EMPTY
33591: LIST
33592: LIST
33593: PUSH
33594: LD_INT 2
33596: PUSH
33597: LD_INT 35
33599: PUSH
33600: LD_INT 11
33602: PUSH
33603: EMPTY
33604: LIST
33605: LIST
33606: PUSH
33607: LD_INT 35
33609: PUSH
33610: LD_INT 30
33612: PUSH
33613: EMPTY
33614: LIST
33615: LIST
33616: PUSH
33617: EMPTY
33618: LIST
33619: LIST
33620: LIST
33621: PUSH
33622: LD_INT 91
33624: PUSH
33625: LD_VAR 0 1
33629: PUSH
33630: LD_INT 18
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: LIST
33637: PUSH
33638: EMPTY
33639: LIST
33640: LIST
33641: LIST
33642: PPUSH
33643: CALL_OW 69
33647: NOT
33648: PUSH
33649: LD_INT 22
33651: PUSH
33652: LD_VAR 0 16
33656: PUSH
33657: EMPTY
33658: LIST
33659: LIST
33660: PUSH
33661: LD_INT 2
33663: PUSH
33664: LD_INT 30
33666: PUSH
33667: LD_INT 32
33669: PUSH
33670: EMPTY
33671: LIST
33672: LIST
33673: PUSH
33674: LD_INT 30
33676: PUSH
33677: LD_INT 33
33679: PUSH
33680: EMPTY
33681: LIST
33682: LIST
33683: PUSH
33684: EMPTY
33685: LIST
33686: LIST
33687: LIST
33688: PUSH
33689: LD_INT 91
33691: PUSH
33692: LD_VAR 0 1
33696: PUSH
33697: LD_INT 12
33699: PUSH
33700: EMPTY
33701: LIST
33702: LIST
33703: LIST
33704: PUSH
33705: EMPTY
33706: LIST
33707: LIST
33708: LIST
33709: PUSH
33710: EMPTY
33711: LIST
33712: PPUSH
33713: CALL_OW 69
33717: PUSH
33718: LD_INT 2
33720: GREATER
33721: AND
33722: IFFALSE 33745
// weapon := [ us_radar , ar_radar ] [ nat ] ;
33724: LD_ADDR_VAR 0 18
33728: PUSH
33729: LD_INT 11
33731: PUSH
33732: LD_INT 30
33734: PUSH
33735: EMPTY
33736: LIST
33737: LIST
33738: PUSH
33739: LD_VAR 0 12
33743: ARRAY
33744: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
33745: LD_VAR 0 18
33749: NOT
33750: PUSH
33751: LD_INT 40
33753: PPUSH
33754: LD_VAR 0 16
33758: PPUSH
33759: CALL_OW 321
33763: PUSH
33764: LD_INT 2
33766: EQUAL
33767: AND
33768: PUSH
33769: LD_INT 7
33771: PUSH
33772: LD_VAR 0 5
33776: IN
33777: PUSH
33778: LD_INT 28
33780: PUSH
33781: LD_VAR 0 5
33785: IN
33786: OR
33787: PUSH
33788: LD_INT 45
33790: PUSH
33791: LD_VAR 0 5
33795: IN
33796: OR
33797: AND
33798: IFFALSE 34052
// begin hex := GetHexInfo ( x , y ) ;
33800: LD_ADDR_VAR 0 4
33804: PUSH
33805: LD_VAR 0 10
33809: PPUSH
33810: LD_VAR 0 11
33814: PPUSH
33815: CALL_OW 546
33819: ST_TO_ADDR
// if hex [ 1 ] then
33820: LD_VAR 0 4
33824: PUSH
33825: LD_INT 1
33827: ARRAY
33828: IFFALSE 33832
// exit ;
33830: GO 34235
// height := hex [ 2 ] ;
33832: LD_ADDR_VAR 0 15
33836: PUSH
33837: LD_VAR 0 4
33841: PUSH
33842: LD_INT 2
33844: ARRAY
33845: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
33846: LD_ADDR_VAR 0 14
33850: PUSH
33851: LD_INT 0
33853: PUSH
33854: LD_INT 2
33856: PUSH
33857: LD_INT 3
33859: PUSH
33860: LD_INT 5
33862: PUSH
33863: EMPTY
33864: LIST
33865: LIST
33866: LIST
33867: LIST
33868: ST_TO_ADDR
// for i in tmp do
33869: LD_ADDR_VAR 0 8
33873: PUSH
33874: LD_VAR 0 14
33878: PUSH
33879: FOR_IN
33880: IFFALSE 34050
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
33882: LD_ADDR_VAR 0 9
33886: PUSH
33887: LD_VAR 0 10
33891: PPUSH
33892: LD_VAR 0 8
33896: PPUSH
33897: LD_INT 5
33899: PPUSH
33900: CALL_OW 272
33904: PUSH
33905: LD_VAR 0 11
33909: PPUSH
33910: LD_VAR 0 8
33914: PPUSH
33915: LD_INT 5
33917: PPUSH
33918: CALL_OW 273
33922: PUSH
33923: EMPTY
33924: LIST
33925: LIST
33926: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
33927: LD_VAR 0 9
33931: PUSH
33932: LD_INT 1
33934: ARRAY
33935: PPUSH
33936: LD_VAR 0 9
33940: PUSH
33941: LD_INT 2
33943: ARRAY
33944: PPUSH
33945: CALL_OW 488
33949: IFFALSE 34048
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
33951: LD_ADDR_VAR 0 4
33955: PUSH
33956: LD_VAR 0 9
33960: PUSH
33961: LD_INT 1
33963: ARRAY
33964: PPUSH
33965: LD_VAR 0 9
33969: PUSH
33970: LD_INT 2
33972: ARRAY
33973: PPUSH
33974: CALL_OW 546
33978: ST_TO_ADDR
// if hex [ 1 ] then
33979: LD_VAR 0 4
33983: PUSH
33984: LD_INT 1
33986: ARRAY
33987: IFFALSE 33991
// continue ;
33989: GO 33879
// h := hex [ 2 ] ;
33991: LD_ADDR_VAR 0 13
33995: PUSH
33996: LD_VAR 0 4
34000: PUSH
34001: LD_INT 2
34003: ARRAY
34004: ST_TO_ADDR
// if h + 7 < height then
34005: LD_VAR 0 13
34009: PUSH
34010: LD_INT 7
34012: PLUS
34013: PUSH
34014: LD_VAR 0 15
34018: LESS
34019: IFFALSE 34048
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
34021: LD_ADDR_VAR 0 18
34025: PUSH
34026: LD_INT 7
34028: PUSH
34029: LD_INT 28
34031: PUSH
34032: LD_INT 45
34034: PUSH
34035: EMPTY
34036: LIST
34037: LIST
34038: LIST
34039: PUSH
34040: LD_VAR 0 12
34044: ARRAY
34045: ST_TO_ADDR
// break ;
34046: GO 34050
// end ; end ; end ;
34048: GO 33879
34050: POP
34051: POP
// end ; if not weapon then
34052: LD_VAR 0 18
34056: NOT
34057: IFFALSE 34117
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
34059: LD_ADDR_VAR 0 5
34063: PUSH
34064: LD_VAR 0 5
34068: PUSH
34069: LD_INT 11
34071: PUSH
34072: LD_INT 30
34074: PUSH
34075: LD_INT 49
34077: PUSH
34078: EMPTY
34079: LIST
34080: LIST
34081: LIST
34082: DIFF
34083: ST_TO_ADDR
// if not list then
34084: LD_VAR 0 5
34088: NOT
34089: IFFALSE 34093
// exit ;
34091: GO 34235
// weapon := list [ rand ( 1 , list ) ] ;
34093: LD_ADDR_VAR 0 18
34097: PUSH
34098: LD_VAR 0 5
34102: PUSH
34103: LD_INT 1
34105: PPUSH
34106: LD_VAR 0 5
34110: PPUSH
34111: CALL_OW 12
34115: ARRAY
34116: ST_TO_ADDR
// end ; if weapon then
34117: LD_VAR 0 18
34121: IFFALSE 34235
// begin tmp := CostOfWeapon ( weapon ) ;
34123: LD_ADDR_VAR 0 14
34127: PUSH
34128: LD_VAR 0 18
34132: PPUSH
34133: CALL_OW 451
34137: ST_TO_ADDR
// j := GetBase ( tower ) ;
34138: LD_ADDR_VAR 0 9
34142: PUSH
34143: LD_VAR 0 1
34147: PPUSH
34148: CALL_OW 274
34152: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
34153: LD_VAR 0 9
34157: PPUSH
34158: LD_INT 1
34160: PPUSH
34161: CALL_OW 275
34165: PUSH
34166: LD_VAR 0 14
34170: PUSH
34171: LD_INT 1
34173: ARRAY
34174: GREATEREQUAL
34175: PUSH
34176: LD_VAR 0 9
34180: PPUSH
34181: LD_INT 2
34183: PPUSH
34184: CALL_OW 275
34188: PUSH
34189: LD_VAR 0 14
34193: PUSH
34194: LD_INT 2
34196: ARRAY
34197: GREATEREQUAL
34198: AND
34199: PUSH
34200: LD_VAR 0 9
34204: PPUSH
34205: LD_INT 3
34207: PPUSH
34208: CALL_OW 275
34212: PUSH
34213: LD_VAR 0 14
34217: PUSH
34218: LD_INT 3
34220: ARRAY
34221: GREATEREQUAL
34222: AND
34223: IFFALSE 34235
// result := weapon ;
34225: LD_ADDR_VAR 0 3
34229: PUSH
34230: LD_VAR 0 18
34234: ST_TO_ADDR
// end ; end ;
34235: LD_VAR 0 3
34239: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
34240: LD_INT 0
34242: PPUSH
34243: PPUSH
// result := true ;
34244: LD_ADDR_VAR 0 3
34248: PUSH
34249: LD_INT 1
34251: ST_TO_ADDR
// if array1 = array2 then
34252: LD_VAR 0 1
34256: PUSH
34257: LD_VAR 0 2
34261: EQUAL
34262: IFFALSE 34322
// begin for i = 1 to array1 do
34264: LD_ADDR_VAR 0 4
34268: PUSH
34269: DOUBLE
34270: LD_INT 1
34272: DEC
34273: ST_TO_ADDR
34274: LD_VAR 0 1
34278: PUSH
34279: FOR_TO
34280: IFFALSE 34318
// if array1 [ i ] <> array2 [ i ] then
34282: LD_VAR 0 1
34286: PUSH
34287: LD_VAR 0 4
34291: ARRAY
34292: PUSH
34293: LD_VAR 0 2
34297: PUSH
34298: LD_VAR 0 4
34302: ARRAY
34303: NONEQUAL
34304: IFFALSE 34316
// begin result := false ;
34306: LD_ADDR_VAR 0 3
34310: PUSH
34311: LD_INT 0
34313: ST_TO_ADDR
// break ;
34314: GO 34318
// end ;
34316: GO 34279
34318: POP
34319: POP
// end else
34320: GO 34330
// result := false ;
34322: LD_ADDR_VAR 0 3
34326: PUSH
34327: LD_INT 0
34329: ST_TO_ADDR
// end ;
34330: LD_VAR 0 3
34334: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
34335: LD_INT 0
34337: PPUSH
34338: PPUSH
34339: PPUSH
// pom := GetBase ( fac ) ;
34340: LD_ADDR_VAR 0 5
34344: PUSH
34345: LD_VAR 0 1
34349: PPUSH
34350: CALL_OW 274
34354: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
34355: LD_ADDR_VAR 0 4
34359: PUSH
34360: LD_VAR 0 2
34364: PUSH
34365: LD_INT 1
34367: ARRAY
34368: PPUSH
34369: LD_VAR 0 2
34373: PUSH
34374: LD_INT 2
34376: ARRAY
34377: PPUSH
34378: LD_VAR 0 2
34382: PUSH
34383: LD_INT 3
34385: ARRAY
34386: PPUSH
34387: LD_VAR 0 2
34391: PUSH
34392: LD_INT 4
34394: ARRAY
34395: PPUSH
34396: CALL_OW 449
34400: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34401: LD_ADDR_VAR 0 3
34405: PUSH
34406: LD_VAR 0 5
34410: PPUSH
34411: LD_INT 1
34413: PPUSH
34414: CALL_OW 275
34418: PUSH
34419: LD_VAR 0 4
34423: PUSH
34424: LD_INT 1
34426: ARRAY
34427: GREATEREQUAL
34428: PUSH
34429: LD_VAR 0 5
34433: PPUSH
34434: LD_INT 2
34436: PPUSH
34437: CALL_OW 275
34441: PUSH
34442: LD_VAR 0 4
34446: PUSH
34447: LD_INT 2
34449: ARRAY
34450: GREATEREQUAL
34451: AND
34452: PUSH
34453: LD_VAR 0 5
34457: PPUSH
34458: LD_INT 3
34460: PPUSH
34461: CALL_OW 275
34465: PUSH
34466: LD_VAR 0 4
34470: PUSH
34471: LD_INT 3
34473: ARRAY
34474: GREATEREQUAL
34475: AND
34476: ST_TO_ADDR
// end ;
34477: LD_VAR 0 3
34481: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
34482: LD_INT 0
34484: PPUSH
34485: PPUSH
34486: PPUSH
34487: PPUSH
// pom := GetBase ( building ) ;
34488: LD_ADDR_VAR 0 3
34492: PUSH
34493: LD_VAR 0 1
34497: PPUSH
34498: CALL_OW 274
34502: ST_TO_ADDR
// if not pom then
34503: LD_VAR 0 3
34507: NOT
34508: IFFALSE 34512
// exit ;
34510: GO 34682
// btype := GetBType ( building ) ;
34512: LD_ADDR_VAR 0 5
34516: PUSH
34517: LD_VAR 0 1
34521: PPUSH
34522: CALL_OW 266
34526: ST_TO_ADDR
// if btype = b_armoury then
34527: LD_VAR 0 5
34531: PUSH
34532: LD_INT 4
34534: EQUAL
34535: IFFALSE 34545
// btype := b_barracks ;
34537: LD_ADDR_VAR 0 5
34541: PUSH
34542: LD_INT 5
34544: ST_TO_ADDR
// if btype = b_depot then
34545: LD_VAR 0 5
34549: PUSH
34550: LD_INT 0
34552: EQUAL
34553: IFFALSE 34563
// btype := b_warehouse ;
34555: LD_ADDR_VAR 0 5
34559: PUSH
34560: LD_INT 1
34562: ST_TO_ADDR
// if btype = b_workshop then
34563: LD_VAR 0 5
34567: PUSH
34568: LD_INT 2
34570: EQUAL
34571: IFFALSE 34581
// btype := b_factory ;
34573: LD_ADDR_VAR 0 5
34577: PUSH
34578: LD_INT 3
34580: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
34581: LD_ADDR_VAR 0 4
34585: PUSH
34586: LD_VAR 0 5
34590: PPUSH
34591: LD_VAR 0 1
34595: PPUSH
34596: CALL_OW 248
34600: PPUSH
34601: CALL_OW 450
34605: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34606: LD_ADDR_VAR 0 2
34610: PUSH
34611: LD_VAR 0 3
34615: PPUSH
34616: LD_INT 1
34618: PPUSH
34619: CALL_OW 275
34623: PUSH
34624: LD_VAR 0 4
34628: PUSH
34629: LD_INT 1
34631: ARRAY
34632: GREATEREQUAL
34633: PUSH
34634: LD_VAR 0 3
34638: PPUSH
34639: LD_INT 2
34641: PPUSH
34642: CALL_OW 275
34646: PUSH
34647: LD_VAR 0 4
34651: PUSH
34652: LD_INT 2
34654: ARRAY
34655: GREATEREQUAL
34656: AND
34657: PUSH
34658: LD_VAR 0 3
34662: PPUSH
34663: LD_INT 3
34665: PPUSH
34666: CALL_OW 275
34670: PUSH
34671: LD_VAR 0 4
34675: PUSH
34676: LD_INT 3
34678: ARRAY
34679: GREATEREQUAL
34680: AND
34681: ST_TO_ADDR
// end ;
34682: LD_VAR 0 2
34686: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
34687: LD_INT 0
34689: PPUSH
34690: PPUSH
34691: PPUSH
// pom := GetBase ( building ) ;
34692: LD_ADDR_VAR 0 4
34696: PUSH
34697: LD_VAR 0 1
34701: PPUSH
34702: CALL_OW 274
34706: ST_TO_ADDR
// if not pom then
34707: LD_VAR 0 4
34711: NOT
34712: IFFALSE 34716
// exit ;
34714: GO 34817
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
34716: LD_ADDR_VAR 0 5
34720: PUSH
34721: LD_VAR 0 2
34725: PPUSH
34726: LD_VAR 0 1
34730: PPUSH
34731: CALL_OW 248
34735: PPUSH
34736: CALL_OW 450
34740: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34741: LD_ADDR_VAR 0 3
34745: PUSH
34746: LD_VAR 0 4
34750: PPUSH
34751: LD_INT 1
34753: PPUSH
34754: CALL_OW 275
34758: PUSH
34759: LD_VAR 0 5
34763: PUSH
34764: LD_INT 1
34766: ARRAY
34767: GREATEREQUAL
34768: PUSH
34769: LD_VAR 0 4
34773: PPUSH
34774: LD_INT 2
34776: PPUSH
34777: CALL_OW 275
34781: PUSH
34782: LD_VAR 0 5
34786: PUSH
34787: LD_INT 2
34789: ARRAY
34790: GREATEREQUAL
34791: AND
34792: PUSH
34793: LD_VAR 0 4
34797: PPUSH
34798: LD_INT 3
34800: PPUSH
34801: CALL_OW 275
34805: PUSH
34806: LD_VAR 0 5
34810: PUSH
34811: LD_INT 3
34813: ARRAY
34814: GREATEREQUAL
34815: AND
34816: ST_TO_ADDR
// end ;
34817: LD_VAR 0 3
34821: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
34822: LD_INT 0
34824: PPUSH
34825: PPUSH
34826: PPUSH
34827: PPUSH
34828: PPUSH
34829: PPUSH
34830: PPUSH
34831: PPUSH
34832: PPUSH
34833: PPUSH
// result := false ;
34834: LD_ADDR_VAR 0 6
34838: PUSH
34839: LD_INT 0
34841: ST_TO_ADDR
// if not base or not btype or not x or not y then
34842: LD_VAR 0 1
34846: NOT
34847: PUSH
34848: LD_VAR 0 2
34852: NOT
34853: OR
34854: PUSH
34855: LD_VAR 0 3
34859: NOT
34860: OR
34861: PUSH
34862: LD_VAR 0 4
34866: NOT
34867: OR
34868: IFFALSE 34872
// exit ;
34870: GO 35481
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
34872: LD_ADDR_VAR 0 12
34876: PUSH
34877: LD_VAR 0 2
34881: PPUSH
34882: LD_VAR 0 3
34886: PPUSH
34887: LD_VAR 0 4
34891: PPUSH
34892: LD_VAR 0 5
34896: PPUSH
34897: LD_VAR 0 1
34901: PUSH
34902: LD_INT 1
34904: ARRAY
34905: PPUSH
34906: CALL_OW 248
34910: PPUSH
34911: LD_INT 0
34913: PPUSH
34914: CALL 36318 0 6
34918: ST_TO_ADDR
// if not hexes then
34919: LD_VAR 0 12
34923: NOT
34924: IFFALSE 34928
// exit ;
34926: GO 35481
// for i = 1 to hexes do
34928: LD_ADDR_VAR 0 7
34932: PUSH
34933: DOUBLE
34934: LD_INT 1
34936: DEC
34937: ST_TO_ADDR
34938: LD_VAR 0 12
34942: PUSH
34943: FOR_TO
34944: IFFALSE 35479
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34946: LD_ADDR_VAR 0 11
34950: PUSH
34951: LD_VAR 0 12
34955: PUSH
34956: LD_VAR 0 7
34960: ARRAY
34961: PUSH
34962: LD_INT 1
34964: ARRAY
34965: PPUSH
34966: LD_VAR 0 12
34970: PUSH
34971: LD_VAR 0 7
34975: ARRAY
34976: PUSH
34977: LD_INT 2
34979: ARRAY
34980: PPUSH
34981: CALL_OW 428
34985: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
34986: LD_VAR 0 12
34990: PUSH
34991: LD_VAR 0 7
34995: ARRAY
34996: PUSH
34997: LD_INT 1
34999: ARRAY
35000: PPUSH
35001: LD_VAR 0 12
35005: PUSH
35006: LD_VAR 0 7
35010: ARRAY
35011: PUSH
35012: LD_INT 2
35014: ARRAY
35015: PPUSH
35016: CALL_OW 351
35020: PUSH
35021: LD_VAR 0 12
35025: PUSH
35026: LD_VAR 0 7
35030: ARRAY
35031: PUSH
35032: LD_INT 1
35034: ARRAY
35035: PPUSH
35036: LD_VAR 0 12
35040: PUSH
35041: LD_VAR 0 7
35045: ARRAY
35046: PUSH
35047: LD_INT 2
35049: ARRAY
35050: PPUSH
35051: CALL_OW 488
35055: NOT
35056: OR
35057: PUSH
35058: LD_VAR 0 11
35062: PPUSH
35063: CALL_OW 247
35067: PUSH
35068: LD_INT 3
35070: EQUAL
35071: OR
35072: IFFALSE 35078
// exit ;
35074: POP
35075: POP
35076: GO 35481
// if not tmp or not tmp in base then
35078: LD_VAR 0 11
35082: NOT
35083: PUSH
35084: LD_VAR 0 11
35088: PUSH
35089: LD_VAR 0 1
35093: IN
35094: NOT
35095: OR
35096: IFFALSE 35100
// continue ;
35098: GO 34943
// result := true ;
35100: LD_ADDR_VAR 0 6
35104: PUSH
35105: LD_INT 1
35107: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35108: LD_ADDR_VAR 0 15
35112: PUSH
35113: LD_VAR 0 1
35117: PPUSH
35118: LD_INT 22
35120: PUSH
35121: LD_VAR 0 11
35125: PPUSH
35126: CALL_OW 255
35130: PUSH
35131: EMPTY
35132: LIST
35133: LIST
35134: PUSH
35135: LD_INT 2
35137: PUSH
35138: LD_INT 30
35140: PUSH
35141: LD_INT 0
35143: PUSH
35144: EMPTY
35145: LIST
35146: LIST
35147: PUSH
35148: LD_INT 30
35150: PUSH
35151: LD_INT 1
35153: PUSH
35154: EMPTY
35155: LIST
35156: LIST
35157: PUSH
35158: EMPTY
35159: LIST
35160: LIST
35161: LIST
35162: PUSH
35163: EMPTY
35164: LIST
35165: LIST
35166: PPUSH
35167: CALL_OW 72
35171: ST_TO_ADDR
// if dep then
35172: LD_VAR 0 15
35176: IFFALSE 35312
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
35178: LD_ADDR_VAR 0 14
35182: PUSH
35183: LD_VAR 0 15
35187: PUSH
35188: LD_INT 1
35190: ARRAY
35191: PPUSH
35192: CALL_OW 250
35196: PPUSH
35197: LD_VAR 0 15
35201: PUSH
35202: LD_INT 1
35204: ARRAY
35205: PPUSH
35206: CALL_OW 254
35210: PPUSH
35211: LD_INT 5
35213: PPUSH
35214: CALL_OW 272
35218: PUSH
35219: LD_VAR 0 15
35223: PUSH
35224: LD_INT 1
35226: ARRAY
35227: PPUSH
35228: CALL_OW 251
35232: PPUSH
35233: LD_VAR 0 15
35237: PUSH
35238: LD_INT 1
35240: ARRAY
35241: PPUSH
35242: CALL_OW 254
35246: PPUSH
35247: LD_INT 5
35249: PPUSH
35250: CALL_OW 273
35254: PUSH
35255: EMPTY
35256: LIST
35257: LIST
35258: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
35259: LD_VAR 0 14
35263: PUSH
35264: LD_INT 1
35266: ARRAY
35267: PPUSH
35268: LD_VAR 0 14
35272: PUSH
35273: LD_INT 2
35275: ARRAY
35276: PPUSH
35277: CALL_OW 488
35281: IFFALSE 35312
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
35283: LD_VAR 0 11
35287: PPUSH
35288: LD_VAR 0 14
35292: PUSH
35293: LD_INT 1
35295: ARRAY
35296: PPUSH
35297: LD_VAR 0 14
35301: PUSH
35302: LD_INT 2
35304: ARRAY
35305: PPUSH
35306: CALL_OW 111
// continue ;
35310: GO 34943
// end ; end ; r := GetDir ( tmp ) ;
35312: LD_ADDR_VAR 0 13
35316: PUSH
35317: LD_VAR 0 11
35321: PPUSH
35322: CALL_OW 254
35326: ST_TO_ADDR
// if r = 5 then
35327: LD_VAR 0 13
35331: PUSH
35332: LD_INT 5
35334: EQUAL
35335: IFFALSE 35345
// r := 0 ;
35337: LD_ADDR_VAR 0 13
35341: PUSH
35342: LD_INT 0
35344: ST_TO_ADDR
// for j = r to 5 do
35345: LD_ADDR_VAR 0 8
35349: PUSH
35350: DOUBLE
35351: LD_VAR 0 13
35355: DEC
35356: ST_TO_ADDR
35357: LD_INT 5
35359: PUSH
35360: FOR_TO
35361: IFFALSE 35475
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
35363: LD_ADDR_VAR 0 9
35367: PUSH
35368: LD_VAR 0 11
35372: PPUSH
35373: CALL_OW 250
35377: PPUSH
35378: LD_VAR 0 8
35382: PPUSH
35383: LD_INT 2
35385: PPUSH
35386: CALL_OW 272
35390: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
35391: LD_ADDR_VAR 0 10
35395: PUSH
35396: LD_VAR 0 11
35400: PPUSH
35401: CALL_OW 251
35405: PPUSH
35406: LD_VAR 0 8
35410: PPUSH
35411: LD_INT 2
35413: PPUSH
35414: CALL_OW 273
35418: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
35419: LD_VAR 0 9
35423: PPUSH
35424: LD_VAR 0 10
35428: PPUSH
35429: CALL_OW 488
35433: PUSH
35434: LD_VAR 0 9
35438: PPUSH
35439: LD_VAR 0 10
35443: PPUSH
35444: CALL_OW 428
35448: NOT
35449: AND
35450: IFFALSE 35473
// begin ComMoveXY ( tmp , _x , _y ) ;
35452: LD_VAR 0 11
35456: PPUSH
35457: LD_VAR 0 9
35461: PPUSH
35462: LD_VAR 0 10
35466: PPUSH
35467: CALL_OW 111
// break ;
35471: GO 35475
// end ; end ;
35473: GO 35360
35475: POP
35476: POP
// end ;
35477: GO 34943
35479: POP
35480: POP
// end ;
35481: LD_VAR 0 6
35485: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
35486: LD_INT 0
35488: PPUSH
35489: PPUSH
35490: PPUSH
35491: PPUSH
35492: PPUSH
35493: PPUSH
35494: PPUSH
35495: PPUSH
35496: PPUSH
35497: PPUSH
// result := false ;
35498: LD_ADDR_VAR 0 6
35502: PUSH
35503: LD_INT 0
35505: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
35506: LD_VAR 0 1
35510: NOT
35511: PUSH
35512: LD_VAR 0 1
35516: PPUSH
35517: CALL_OW 266
35521: PUSH
35522: LD_INT 0
35524: PUSH
35525: LD_INT 1
35527: PUSH
35528: EMPTY
35529: LIST
35530: LIST
35531: IN
35532: NOT
35533: OR
35534: PUSH
35535: LD_VAR 0 2
35539: NOT
35540: OR
35541: PUSH
35542: LD_VAR 0 5
35546: PUSH
35547: LD_INT 0
35549: PUSH
35550: LD_INT 1
35552: PUSH
35553: LD_INT 2
35555: PUSH
35556: LD_INT 3
35558: PUSH
35559: LD_INT 4
35561: PUSH
35562: LD_INT 5
35564: PUSH
35565: EMPTY
35566: LIST
35567: LIST
35568: LIST
35569: LIST
35570: LIST
35571: LIST
35572: IN
35573: NOT
35574: OR
35575: PUSH
35576: LD_VAR 0 3
35580: PPUSH
35581: LD_VAR 0 4
35585: PPUSH
35586: CALL_OW 488
35590: NOT
35591: OR
35592: IFFALSE 35596
// exit ;
35594: GO 36313
// pom := GetBase ( depot ) ;
35596: LD_ADDR_VAR 0 10
35600: PUSH
35601: LD_VAR 0 1
35605: PPUSH
35606: CALL_OW 274
35610: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
35611: LD_ADDR_VAR 0 11
35615: PUSH
35616: LD_VAR 0 2
35620: PPUSH
35621: LD_VAR 0 1
35625: PPUSH
35626: CALL_OW 248
35630: PPUSH
35631: CALL_OW 450
35635: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
35636: LD_VAR 0 10
35640: PPUSH
35641: LD_INT 1
35643: PPUSH
35644: CALL_OW 275
35648: PUSH
35649: LD_VAR 0 11
35653: PUSH
35654: LD_INT 1
35656: ARRAY
35657: GREATEREQUAL
35658: PUSH
35659: LD_VAR 0 10
35663: PPUSH
35664: LD_INT 2
35666: PPUSH
35667: CALL_OW 275
35671: PUSH
35672: LD_VAR 0 11
35676: PUSH
35677: LD_INT 2
35679: ARRAY
35680: GREATEREQUAL
35681: AND
35682: PUSH
35683: LD_VAR 0 10
35687: PPUSH
35688: LD_INT 3
35690: PPUSH
35691: CALL_OW 275
35695: PUSH
35696: LD_VAR 0 11
35700: PUSH
35701: LD_INT 3
35703: ARRAY
35704: GREATEREQUAL
35705: AND
35706: NOT
35707: IFFALSE 35711
// exit ;
35709: GO 36313
// if GetBType ( depot ) = b_depot then
35711: LD_VAR 0 1
35715: PPUSH
35716: CALL_OW 266
35720: PUSH
35721: LD_INT 0
35723: EQUAL
35724: IFFALSE 35736
// dist := 28 else
35726: LD_ADDR_VAR 0 14
35730: PUSH
35731: LD_INT 28
35733: ST_TO_ADDR
35734: GO 35744
// dist := 36 ;
35736: LD_ADDR_VAR 0 14
35740: PUSH
35741: LD_INT 36
35743: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
35744: LD_VAR 0 1
35748: PPUSH
35749: LD_VAR 0 3
35753: PPUSH
35754: LD_VAR 0 4
35758: PPUSH
35759: CALL_OW 297
35763: PUSH
35764: LD_VAR 0 14
35768: GREATER
35769: IFFALSE 35773
// exit ;
35771: GO 36313
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
35773: LD_ADDR_VAR 0 12
35777: PUSH
35778: LD_VAR 0 2
35782: PPUSH
35783: LD_VAR 0 3
35787: PPUSH
35788: LD_VAR 0 4
35792: PPUSH
35793: LD_VAR 0 5
35797: PPUSH
35798: LD_VAR 0 1
35802: PPUSH
35803: CALL_OW 248
35807: PPUSH
35808: LD_INT 0
35810: PPUSH
35811: CALL 36318 0 6
35815: ST_TO_ADDR
// if not hexes then
35816: LD_VAR 0 12
35820: NOT
35821: IFFALSE 35825
// exit ;
35823: GO 36313
// hex := GetHexInfo ( x , y ) ;
35825: LD_ADDR_VAR 0 15
35829: PUSH
35830: LD_VAR 0 3
35834: PPUSH
35835: LD_VAR 0 4
35839: PPUSH
35840: CALL_OW 546
35844: ST_TO_ADDR
// if hex [ 1 ] then
35845: LD_VAR 0 15
35849: PUSH
35850: LD_INT 1
35852: ARRAY
35853: IFFALSE 35857
// exit ;
35855: GO 36313
// height := hex [ 2 ] ;
35857: LD_ADDR_VAR 0 13
35861: PUSH
35862: LD_VAR 0 15
35866: PUSH
35867: LD_INT 2
35869: ARRAY
35870: ST_TO_ADDR
// for i = 1 to hexes do
35871: LD_ADDR_VAR 0 7
35875: PUSH
35876: DOUBLE
35877: LD_INT 1
35879: DEC
35880: ST_TO_ADDR
35881: LD_VAR 0 12
35885: PUSH
35886: FOR_TO
35887: IFFALSE 36217
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
35889: LD_VAR 0 12
35893: PUSH
35894: LD_VAR 0 7
35898: ARRAY
35899: PUSH
35900: LD_INT 1
35902: ARRAY
35903: PPUSH
35904: LD_VAR 0 12
35908: PUSH
35909: LD_VAR 0 7
35913: ARRAY
35914: PUSH
35915: LD_INT 2
35917: ARRAY
35918: PPUSH
35919: CALL_OW 488
35923: NOT
35924: PUSH
35925: LD_VAR 0 12
35929: PUSH
35930: LD_VAR 0 7
35934: ARRAY
35935: PUSH
35936: LD_INT 1
35938: ARRAY
35939: PPUSH
35940: LD_VAR 0 12
35944: PUSH
35945: LD_VAR 0 7
35949: ARRAY
35950: PUSH
35951: LD_INT 2
35953: ARRAY
35954: PPUSH
35955: CALL_OW 428
35959: PUSH
35960: LD_INT 0
35962: GREATER
35963: OR
35964: PUSH
35965: LD_VAR 0 12
35969: PUSH
35970: LD_VAR 0 7
35974: ARRAY
35975: PUSH
35976: LD_INT 1
35978: ARRAY
35979: PPUSH
35980: LD_VAR 0 12
35984: PUSH
35985: LD_VAR 0 7
35989: ARRAY
35990: PUSH
35991: LD_INT 2
35993: ARRAY
35994: PPUSH
35995: CALL_OW 351
35999: OR
36000: IFFALSE 36006
// exit ;
36002: POP
36003: POP
36004: GO 36313
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36006: LD_ADDR_VAR 0 8
36010: PUSH
36011: LD_VAR 0 12
36015: PUSH
36016: LD_VAR 0 7
36020: ARRAY
36021: PUSH
36022: LD_INT 1
36024: ARRAY
36025: PPUSH
36026: LD_VAR 0 12
36030: PUSH
36031: LD_VAR 0 7
36035: ARRAY
36036: PUSH
36037: LD_INT 2
36039: ARRAY
36040: PPUSH
36041: CALL_OW 546
36045: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
36046: LD_VAR 0 8
36050: PUSH
36051: LD_INT 1
36053: ARRAY
36054: PUSH
36055: LD_VAR 0 8
36059: PUSH
36060: LD_INT 2
36062: ARRAY
36063: PUSH
36064: LD_VAR 0 13
36068: PUSH
36069: LD_INT 2
36071: PLUS
36072: GREATER
36073: OR
36074: PUSH
36075: LD_VAR 0 8
36079: PUSH
36080: LD_INT 2
36082: ARRAY
36083: PUSH
36084: LD_VAR 0 13
36088: PUSH
36089: LD_INT 2
36091: MINUS
36092: LESS
36093: OR
36094: PUSH
36095: LD_VAR 0 8
36099: PUSH
36100: LD_INT 3
36102: ARRAY
36103: PUSH
36104: LD_INT 0
36106: PUSH
36107: LD_INT 8
36109: PUSH
36110: LD_INT 9
36112: PUSH
36113: LD_INT 10
36115: PUSH
36116: LD_INT 11
36118: PUSH
36119: LD_INT 12
36121: PUSH
36122: LD_INT 13
36124: PUSH
36125: LD_INT 16
36127: PUSH
36128: LD_INT 17
36130: PUSH
36131: LD_INT 18
36133: PUSH
36134: LD_INT 19
36136: PUSH
36137: LD_INT 20
36139: PUSH
36140: LD_INT 21
36142: PUSH
36143: EMPTY
36144: LIST
36145: LIST
36146: LIST
36147: LIST
36148: LIST
36149: LIST
36150: LIST
36151: LIST
36152: LIST
36153: LIST
36154: LIST
36155: LIST
36156: LIST
36157: IN
36158: NOT
36159: OR
36160: PUSH
36161: LD_VAR 0 8
36165: PUSH
36166: LD_INT 5
36168: ARRAY
36169: NOT
36170: OR
36171: PUSH
36172: LD_VAR 0 8
36176: PUSH
36177: LD_INT 6
36179: ARRAY
36180: PUSH
36181: LD_INT 1
36183: PUSH
36184: LD_INT 2
36186: PUSH
36187: LD_INT 7
36189: PUSH
36190: LD_INT 9
36192: PUSH
36193: LD_INT 10
36195: PUSH
36196: LD_INT 11
36198: PUSH
36199: EMPTY
36200: LIST
36201: LIST
36202: LIST
36203: LIST
36204: LIST
36205: LIST
36206: IN
36207: NOT
36208: OR
36209: IFFALSE 36215
// exit ;
36211: POP
36212: POP
36213: GO 36313
// end ;
36215: GO 35886
36217: POP
36218: POP
// side := GetSide ( depot ) ;
36219: LD_ADDR_VAR 0 9
36223: PUSH
36224: LD_VAR 0 1
36228: PPUSH
36229: CALL_OW 255
36233: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
36234: LD_VAR 0 9
36238: PPUSH
36239: LD_VAR 0 3
36243: PPUSH
36244: LD_VAR 0 4
36248: PPUSH
36249: LD_INT 20
36251: PPUSH
36252: CALL 28967 0 4
36256: PUSH
36257: LD_INT 4
36259: ARRAY
36260: IFFALSE 36264
// exit ;
36262: GO 36313
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
36264: LD_VAR 0 2
36268: PUSH
36269: LD_INT 29
36271: PUSH
36272: LD_INT 30
36274: PUSH
36275: EMPTY
36276: LIST
36277: LIST
36278: IN
36279: PUSH
36280: LD_VAR 0 3
36284: PPUSH
36285: LD_VAR 0 4
36289: PPUSH
36290: LD_VAR 0 9
36294: PPUSH
36295: CALL_OW 440
36299: NOT
36300: AND
36301: IFFALSE 36305
// exit ;
36303: GO 36313
// result := true ;
36305: LD_ADDR_VAR 0 6
36309: PUSH
36310: LD_INT 1
36312: ST_TO_ADDR
// end ;
36313: LD_VAR 0 6
36317: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
36318: LD_INT 0
36320: PPUSH
36321: PPUSH
36322: PPUSH
36323: PPUSH
36324: PPUSH
36325: PPUSH
36326: PPUSH
36327: PPUSH
36328: PPUSH
36329: PPUSH
36330: PPUSH
36331: PPUSH
36332: PPUSH
36333: PPUSH
36334: PPUSH
36335: PPUSH
36336: PPUSH
36337: PPUSH
36338: PPUSH
36339: PPUSH
36340: PPUSH
36341: PPUSH
36342: PPUSH
36343: PPUSH
36344: PPUSH
36345: PPUSH
36346: PPUSH
36347: PPUSH
36348: PPUSH
36349: PPUSH
36350: PPUSH
36351: PPUSH
36352: PPUSH
36353: PPUSH
36354: PPUSH
36355: PPUSH
36356: PPUSH
36357: PPUSH
36358: PPUSH
36359: PPUSH
36360: PPUSH
36361: PPUSH
36362: PPUSH
36363: PPUSH
36364: PPUSH
36365: PPUSH
36366: PPUSH
36367: PPUSH
36368: PPUSH
36369: PPUSH
36370: PPUSH
36371: PPUSH
36372: PPUSH
36373: PPUSH
36374: PPUSH
36375: PPUSH
36376: PPUSH
36377: PPUSH
// result = [ ] ;
36378: LD_ADDR_VAR 0 7
36382: PUSH
36383: EMPTY
36384: ST_TO_ADDR
// temp_list = [ ] ;
36385: LD_ADDR_VAR 0 9
36389: PUSH
36390: EMPTY
36391: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
36392: LD_VAR 0 4
36396: PUSH
36397: LD_INT 0
36399: PUSH
36400: LD_INT 1
36402: PUSH
36403: LD_INT 2
36405: PUSH
36406: LD_INT 3
36408: PUSH
36409: LD_INT 4
36411: PUSH
36412: LD_INT 5
36414: PUSH
36415: EMPTY
36416: LIST
36417: LIST
36418: LIST
36419: LIST
36420: LIST
36421: LIST
36422: IN
36423: NOT
36424: PUSH
36425: LD_VAR 0 1
36429: PUSH
36430: LD_INT 0
36432: PUSH
36433: LD_INT 1
36435: PUSH
36436: EMPTY
36437: LIST
36438: LIST
36439: IN
36440: PUSH
36441: LD_VAR 0 5
36445: PUSH
36446: LD_INT 1
36448: PUSH
36449: LD_INT 2
36451: PUSH
36452: LD_INT 3
36454: PUSH
36455: EMPTY
36456: LIST
36457: LIST
36458: LIST
36459: IN
36460: NOT
36461: AND
36462: OR
36463: IFFALSE 36467
// exit ;
36465: GO 54858
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
36467: LD_VAR 0 1
36471: PUSH
36472: LD_INT 6
36474: PUSH
36475: LD_INT 7
36477: PUSH
36478: LD_INT 8
36480: PUSH
36481: LD_INT 13
36483: PUSH
36484: LD_INT 12
36486: PUSH
36487: LD_INT 15
36489: PUSH
36490: LD_INT 11
36492: PUSH
36493: LD_INT 14
36495: PUSH
36496: LD_INT 10
36498: PUSH
36499: EMPTY
36500: LIST
36501: LIST
36502: LIST
36503: LIST
36504: LIST
36505: LIST
36506: LIST
36507: LIST
36508: LIST
36509: IN
36510: IFFALSE 36520
// btype = b_lab ;
36512: LD_ADDR_VAR 0 1
36516: PUSH
36517: LD_INT 6
36519: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
36520: LD_VAR 0 6
36524: PUSH
36525: LD_INT 0
36527: PUSH
36528: LD_INT 1
36530: PUSH
36531: LD_INT 2
36533: PUSH
36534: EMPTY
36535: LIST
36536: LIST
36537: LIST
36538: IN
36539: NOT
36540: PUSH
36541: LD_VAR 0 1
36545: PUSH
36546: LD_INT 0
36548: PUSH
36549: LD_INT 1
36551: PUSH
36552: LD_INT 2
36554: PUSH
36555: LD_INT 3
36557: PUSH
36558: LD_INT 6
36560: PUSH
36561: LD_INT 36
36563: PUSH
36564: LD_INT 4
36566: PUSH
36567: LD_INT 5
36569: PUSH
36570: LD_INT 31
36572: PUSH
36573: LD_INT 32
36575: PUSH
36576: LD_INT 33
36578: PUSH
36579: EMPTY
36580: LIST
36581: LIST
36582: LIST
36583: LIST
36584: LIST
36585: LIST
36586: LIST
36587: LIST
36588: LIST
36589: LIST
36590: LIST
36591: IN
36592: NOT
36593: PUSH
36594: LD_VAR 0 6
36598: PUSH
36599: LD_INT 1
36601: EQUAL
36602: AND
36603: OR
36604: PUSH
36605: LD_VAR 0 1
36609: PUSH
36610: LD_INT 2
36612: PUSH
36613: LD_INT 3
36615: PUSH
36616: EMPTY
36617: LIST
36618: LIST
36619: IN
36620: NOT
36621: PUSH
36622: LD_VAR 0 6
36626: PUSH
36627: LD_INT 2
36629: EQUAL
36630: AND
36631: OR
36632: IFFALSE 36642
// mode = 0 ;
36634: LD_ADDR_VAR 0 6
36638: PUSH
36639: LD_INT 0
36641: ST_TO_ADDR
// case mode of 0 :
36642: LD_VAR 0 6
36646: PUSH
36647: LD_INT 0
36649: DOUBLE
36650: EQUAL
36651: IFTRUE 36655
36653: GO 48108
36655: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36656: LD_ADDR_VAR 0 11
36660: PUSH
36661: LD_INT 0
36663: PUSH
36664: LD_INT 0
36666: PUSH
36667: EMPTY
36668: LIST
36669: LIST
36670: PUSH
36671: LD_INT 0
36673: PUSH
36674: LD_INT 1
36676: NEG
36677: PUSH
36678: EMPTY
36679: LIST
36680: LIST
36681: PUSH
36682: LD_INT 1
36684: PUSH
36685: LD_INT 0
36687: PUSH
36688: EMPTY
36689: LIST
36690: LIST
36691: PUSH
36692: LD_INT 1
36694: PUSH
36695: LD_INT 1
36697: PUSH
36698: EMPTY
36699: LIST
36700: LIST
36701: PUSH
36702: LD_INT 0
36704: PUSH
36705: LD_INT 1
36707: PUSH
36708: EMPTY
36709: LIST
36710: LIST
36711: PUSH
36712: LD_INT 1
36714: NEG
36715: PUSH
36716: LD_INT 0
36718: PUSH
36719: EMPTY
36720: LIST
36721: LIST
36722: PUSH
36723: LD_INT 1
36725: NEG
36726: PUSH
36727: LD_INT 1
36729: NEG
36730: PUSH
36731: EMPTY
36732: LIST
36733: LIST
36734: PUSH
36735: LD_INT 1
36737: NEG
36738: PUSH
36739: LD_INT 2
36741: NEG
36742: PUSH
36743: EMPTY
36744: LIST
36745: LIST
36746: PUSH
36747: LD_INT 0
36749: PUSH
36750: LD_INT 2
36752: NEG
36753: PUSH
36754: EMPTY
36755: LIST
36756: LIST
36757: PUSH
36758: LD_INT 1
36760: PUSH
36761: LD_INT 1
36763: NEG
36764: PUSH
36765: EMPTY
36766: LIST
36767: LIST
36768: PUSH
36769: LD_INT 1
36771: PUSH
36772: LD_INT 2
36774: PUSH
36775: EMPTY
36776: LIST
36777: LIST
36778: PUSH
36779: LD_INT 0
36781: PUSH
36782: LD_INT 2
36784: PUSH
36785: EMPTY
36786: LIST
36787: LIST
36788: PUSH
36789: LD_INT 1
36791: NEG
36792: PUSH
36793: LD_INT 1
36795: PUSH
36796: EMPTY
36797: LIST
36798: LIST
36799: PUSH
36800: LD_INT 1
36802: PUSH
36803: LD_INT 3
36805: PUSH
36806: EMPTY
36807: LIST
36808: LIST
36809: PUSH
36810: LD_INT 0
36812: PUSH
36813: LD_INT 3
36815: PUSH
36816: EMPTY
36817: LIST
36818: LIST
36819: PUSH
36820: LD_INT 1
36822: NEG
36823: PUSH
36824: LD_INT 2
36826: PUSH
36827: EMPTY
36828: LIST
36829: LIST
36830: PUSH
36831: EMPTY
36832: LIST
36833: LIST
36834: LIST
36835: LIST
36836: LIST
36837: LIST
36838: LIST
36839: LIST
36840: LIST
36841: LIST
36842: LIST
36843: LIST
36844: LIST
36845: LIST
36846: LIST
36847: LIST
36848: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36849: LD_ADDR_VAR 0 12
36853: PUSH
36854: LD_INT 0
36856: PUSH
36857: LD_INT 0
36859: PUSH
36860: EMPTY
36861: LIST
36862: LIST
36863: PUSH
36864: LD_INT 0
36866: PUSH
36867: LD_INT 1
36869: NEG
36870: PUSH
36871: EMPTY
36872: LIST
36873: LIST
36874: PUSH
36875: LD_INT 1
36877: PUSH
36878: LD_INT 0
36880: PUSH
36881: EMPTY
36882: LIST
36883: LIST
36884: PUSH
36885: LD_INT 1
36887: PUSH
36888: LD_INT 1
36890: PUSH
36891: EMPTY
36892: LIST
36893: LIST
36894: PUSH
36895: LD_INT 0
36897: PUSH
36898: LD_INT 1
36900: PUSH
36901: EMPTY
36902: LIST
36903: LIST
36904: PUSH
36905: LD_INT 1
36907: NEG
36908: PUSH
36909: LD_INT 0
36911: PUSH
36912: EMPTY
36913: LIST
36914: LIST
36915: PUSH
36916: LD_INT 1
36918: NEG
36919: PUSH
36920: LD_INT 1
36922: NEG
36923: PUSH
36924: EMPTY
36925: LIST
36926: LIST
36927: PUSH
36928: LD_INT 1
36930: PUSH
36931: LD_INT 1
36933: NEG
36934: PUSH
36935: EMPTY
36936: LIST
36937: LIST
36938: PUSH
36939: LD_INT 2
36941: PUSH
36942: LD_INT 0
36944: PUSH
36945: EMPTY
36946: LIST
36947: LIST
36948: PUSH
36949: LD_INT 2
36951: PUSH
36952: LD_INT 1
36954: PUSH
36955: EMPTY
36956: LIST
36957: LIST
36958: PUSH
36959: LD_INT 1
36961: NEG
36962: PUSH
36963: LD_INT 1
36965: PUSH
36966: EMPTY
36967: LIST
36968: LIST
36969: PUSH
36970: LD_INT 2
36972: NEG
36973: PUSH
36974: LD_INT 0
36976: PUSH
36977: EMPTY
36978: LIST
36979: LIST
36980: PUSH
36981: LD_INT 2
36983: NEG
36984: PUSH
36985: LD_INT 1
36987: NEG
36988: PUSH
36989: EMPTY
36990: LIST
36991: LIST
36992: PUSH
36993: LD_INT 2
36995: NEG
36996: PUSH
36997: LD_INT 1
36999: PUSH
37000: EMPTY
37001: LIST
37002: LIST
37003: PUSH
37004: LD_INT 3
37006: NEG
37007: PUSH
37008: LD_INT 0
37010: PUSH
37011: EMPTY
37012: LIST
37013: LIST
37014: PUSH
37015: LD_INT 3
37017: NEG
37018: PUSH
37019: LD_INT 1
37021: NEG
37022: PUSH
37023: EMPTY
37024: LIST
37025: LIST
37026: PUSH
37027: EMPTY
37028: LIST
37029: LIST
37030: LIST
37031: LIST
37032: LIST
37033: LIST
37034: LIST
37035: LIST
37036: LIST
37037: LIST
37038: LIST
37039: LIST
37040: LIST
37041: LIST
37042: LIST
37043: LIST
37044: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37045: LD_ADDR_VAR 0 13
37049: PUSH
37050: LD_INT 0
37052: PUSH
37053: LD_INT 0
37055: PUSH
37056: EMPTY
37057: LIST
37058: LIST
37059: PUSH
37060: LD_INT 0
37062: PUSH
37063: LD_INT 1
37065: NEG
37066: PUSH
37067: EMPTY
37068: LIST
37069: LIST
37070: PUSH
37071: LD_INT 1
37073: PUSH
37074: LD_INT 0
37076: PUSH
37077: EMPTY
37078: LIST
37079: LIST
37080: PUSH
37081: LD_INT 1
37083: PUSH
37084: LD_INT 1
37086: PUSH
37087: EMPTY
37088: LIST
37089: LIST
37090: PUSH
37091: LD_INT 0
37093: PUSH
37094: LD_INT 1
37096: PUSH
37097: EMPTY
37098: LIST
37099: LIST
37100: PUSH
37101: LD_INT 1
37103: NEG
37104: PUSH
37105: LD_INT 0
37107: PUSH
37108: EMPTY
37109: LIST
37110: LIST
37111: PUSH
37112: LD_INT 1
37114: NEG
37115: PUSH
37116: LD_INT 1
37118: NEG
37119: PUSH
37120: EMPTY
37121: LIST
37122: LIST
37123: PUSH
37124: LD_INT 1
37126: NEG
37127: PUSH
37128: LD_INT 2
37130: NEG
37131: PUSH
37132: EMPTY
37133: LIST
37134: LIST
37135: PUSH
37136: LD_INT 2
37138: PUSH
37139: LD_INT 1
37141: PUSH
37142: EMPTY
37143: LIST
37144: LIST
37145: PUSH
37146: LD_INT 2
37148: PUSH
37149: LD_INT 2
37151: PUSH
37152: EMPTY
37153: LIST
37154: LIST
37155: PUSH
37156: LD_INT 1
37158: PUSH
37159: LD_INT 2
37161: PUSH
37162: EMPTY
37163: LIST
37164: LIST
37165: PUSH
37166: LD_INT 2
37168: NEG
37169: PUSH
37170: LD_INT 1
37172: NEG
37173: PUSH
37174: EMPTY
37175: LIST
37176: LIST
37177: PUSH
37178: LD_INT 2
37180: NEG
37181: PUSH
37182: LD_INT 2
37184: NEG
37185: PUSH
37186: EMPTY
37187: LIST
37188: LIST
37189: PUSH
37190: LD_INT 2
37192: NEG
37193: PUSH
37194: LD_INT 3
37196: NEG
37197: PUSH
37198: EMPTY
37199: LIST
37200: LIST
37201: PUSH
37202: LD_INT 3
37204: NEG
37205: PUSH
37206: LD_INT 2
37208: NEG
37209: PUSH
37210: EMPTY
37211: LIST
37212: LIST
37213: PUSH
37214: LD_INT 3
37216: NEG
37217: PUSH
37218: LD_INT 3
37220: NEG
37221: PUSH
37222: EMPTY
37223: LIST
37224: LIST
37225: PUSH
37226: EMPTY
37227: LIST
37228: LIST
37229: LIST
37230: LIST
37231: LIST
37232: LIST
37233: LIST
37234: LIST
37235: LIST
37236: LIST
37237: LIST
37238: LIST
37239: LIST
37240: LIST
37241: LIST
37242: LIST
37243: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37244: LD_ADDR_VAR 0 14
37248: PUSH
37249: LD_INT 0
37251: PUSH
37252: LD_INT 0
37254: PUSH
37255: EMPTY
37256: LIST
37257: LIST
37258: PUSH
37259: LD_INT 0
37261: PUSH
37262: LD_INT 1
37264: NEG
37265: PUSH
37266: EMPTY
37267: LIST
37268: LIST
37269: PUSH
37270: LD_INT 1
37272: PUSH
37273: LD_INT 0
37275: PUSH
37276: EMPTY
37277: LIST
37278: LIST
37279: PUSH
37280: LD_INT 1
37282: PUSH
37283: LD_INT 1
37285: PUSH
37286: EMPTY
37287: LIST
37288: LIST
37289: PUSH
37290: LD_INT 0
37292: PUSH
37293: LD_INT 1
37295: PUSH
37296: EMPTY
37297: LIST
37298: LIST
37299: PUSH
37300: LD_INT 1
37302: NEG
37303: PUSH
37304: LD_INT 0
37306: PUSH
37307: EMPTY
37308: LIST
37309: LIST
37310: PUSH
37311: LD_INT 1
37313: NEG
37314: PUSH
37315: LD_INT 1
37317: NEG
37318: PUSH
37319: EMPTY
37320: LIST
37321: LIST
37322: PUSH
37323: LD_INT 1
37325: NEG
37326: PUSH
37327: LD_INT 2
37329: NEG
37330: PUSH
37331: EMPTY
37332: LIST
37333: LIST
37334: PUSH
37335: LD_INT 0
37337: PUSH
37338: LD_INT 2
37340: NEG
37341: PUSH
37342: EMPTY
37343: LIST
37344: LIST
37345: PUSH
37346: LD_INT 1
37348: PUSH
37349: LD_INT 1
37351: NEG
37352: PUSH
37353: EMPTY
37354: LIST
37355: LIST
37356: PUSH
37357: LD_INT 1
37359: PUSH
37360: LD_INT 2
37362: PUSH
37363: EMPTY
37364: LIST
37365: LIST
37366: PUSH
37367: LD_INT 0
37369: PUSH
37370: LD_INT 2
37372: PUSH
37373: EMPTY
37374: LIST
37375: LIST
37376: PUSH
37377: LD_INT 1
37379: NEG
37380: PUSH
37381: LD_INT 1
37383: PUSH
37384: EMPTY
37385: LIST
37386: LIST
37387: PUSH
37388: LD_INT 1
37390: NEG
37391: PUSH
37392: LD_INT 3
37394: NEG
37395: PUSH
37396: EMPTY
37397: LIST
37398: LIST
37399: PUSH
37400: LD_INT 0
37402: PUSH
37403: LD_INT 3
37405: NEG
37406: PUSH
37407: EMPTY
37408: LIST
37409: LIST
37410: PUSH
37411: LD_INT 1
37413: PUSH
37414: LD_INT 2
37416: NEG
37417: PUSH
37418: EMPTY
37419: LIST
37420: LIST
37421: PUSH
37422: EMPTY
37423: LIST
37424: LIST
37425: LIST
37426: LIST
37427: LIST
37428: LIST
37429: LIST
37430: LIST
37431: LIST
37432: LIST
37433: LIST
37434: LIST
37435: LIST
37436: LIST
37437: LIST
37438: LIST
37439: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37440: LD_ADDR_VAR 0 15
37444: PUSH
37445: LD_INT 0
37447: PUSH
37448: LD_INT 0
37450: PUSH
37451: EMPTY
37452: LIST
37453: LIST
37454: PUSH
37455: LD_INT 0
37457: PUSH
37458: LD_INT 1
37460: NEG
37461: PUSH
37462: EMPTY
37463: LIST
37464: LIST
37465: PUSH
37466: LD_INT 1
37468: PUSH
37469: LD_INT 0
37471: PUSH
37472: EMPTY
37473: LIST
37474: LIST
37475: PUSH
37476: LD_INT 1
37478: PUSH
37479: LD_INT 1
37481: PUSH
37482: EMPTY
37483: LIST
37484: LIST
37485: PUSH
37486: LD_INT 0
37488: PUSH
37489: LD_INT 1
37491: PUSH
37492: EMPTY
37493: LIST
37494: LIST
37495: PUSH
37496: LD_INT 1
37498: NEG
37499: PUSH
37500: LD_INT 0
37502: PUSH
37503: EMPTY
37504: LIST
37505: LIST
37506: PUSH
37507: LD_INT 1
37509: NEG
37510: PUSH
37511: LD_INT 1
37513: NEG
37514: PUSH
37515: EMPTY
37516: LIST
37517: LIST
37518: PUSH
37519: LD_INT 1
37521: PUSH
37522: LD_INT 1
37524: NEG
37525: PUSH
37526: EMPTY
37527: LIST
37528: LIST
37529: PUSH
37530: LD_INT 2
37532: PUSH
37533: LD_INT 0
37535: PUSH
37536: EMPTY
37537: LIST
37538: LIST
37539: PUSH
37540: LD_INT 2
37542: PUSH
37543: LD_INT 1
37545: PUSH
37546: EMPTY
37547: LIST
37548: LIST
37549: PUSH
37550: LD_INT 1
37552: NEG
37553: PUSH
37554: LD_INT 1
37556: PUSH
37557: EMPTY
37558: LIST
37559: LIST
37560: PUSH
37561: LD_INT 2
37563: NEG
37564: PUSH
37565: LD_INT 0
37567: PUSH
37568: EMPTY
37569: LIST
37570: LIST
37571: PUSH
37572: LD_INT 2
37574: NEG
37575: PUSH
37576: LD_INT 1
37578: NEG
37579: PUSH
37580: EMPTY
37581: LIST
37582: LIST
37583: PUSH
37584: LD_INT 2
37586: PUSH
37587: LD_INT 1
37589: NEG
37590: PUSH
37591: EMPTY
37592: LIST
37593: LIST
37594: PUSH
37595: LD_INT 3
37597: PUSH
37598: LD_INT 0
37600: PUSH
37601: EMPTY
37602: LIST
37603: LIST
37604: PUSH
37605: LD_INT 3
37607: PUSH
37608: LD_INT 1
37610: PUSH
37611: EMPTY
37612: LIST
37613: LIST
37614: PUSH
37615: EMPTY
37616: LIST
37617: LIST
37618: LIST
37619: LIST
37620: LIST
37621: LIST
37622: LIST
37623: LIST
37624: LIST
37625: LIST
37626: LIST
37627: LIST
37628: LIST
37629: LIST
37630: LIST
37631: LIST
37632: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37633: LD_ADDR_VAR 0 16
37637: PUSH
37638: LD_INT 0
37640: PUSH
37641: LD_INT 0
37643: PUSH
37644: EMPTY
37645: LIST
37646: LIST
37647: PUSH
37648: LD_INT 0
37650: PUSH
37651: LD_INT 1
37653: NEG
37654: PUSH
37655: EMPTY
37656: LIST
37657: LIST
37658: PUSH
37659: LD_INT 1
37661: PUSH
37662: LD_INT 0
37664: PUSH
37665: EMPTY
37666: LIST
37667: LIST
37668: PUSH
37669: LD_INT 1
37671: PUSH
37672: LD_INT 1
37674: PUSH
37675: EMPTY
37676: LIST
37677: LIST
37678: PUSH
37679: LD_INT 0
37681: PUSH
37682: LD_INT 1
37684: PUSH
37685: EMPTY
37686: LIST
37687: LIST
37688: PUSH
37689: LD_INT 1
37691: NEG
37692: PUSH
37693: LD_INT 0
37695: PUSH
37696: EMPTY
37697: LIST
37698: LIST
37699: PUSH
37700: LD_INT 1
37702: NEG
37703: PUSH
37704: LD_INT 1
37706: NEG
37707: PUSH
37708: EMPTY
37709: LIST
37710: LIST
37711: PUSH
37712: LD_INT 1
37714: NEG
37715: PUSH
37716: LD_INT 2
37718: NEG
37719: PUSH
37720: EMPTY
37721: LIST
37722: LIST
37723: PUSH
37724: LD_INT 2
37726: PUSH
37727: LD_INT 1
37729: PUSH
37730: EMPTY
37731: LIST
37732: LIST
37733: PUSH
37734: LD_INT 2
37736: PUSH
37737: LD_INT 2
37739: PUSH
37740: EMPTY
37741: LIST
37742: LIST
37743: PUSH
37744: LD_INT 1
37746: PUSH
37747: LD_INT 2
37749: PUSH
37750: EMPTY
37751: LIST
37752: LIST
37753: PUSH
37754: LD_INT 2
37756: NEG
37757: PUSH
37758: LD_INT 1
37760: NEG
37761: PUSH
37762: EMPTY
37763: LIST
37764: LIST
37765: PUSH
37766: LD_INT 2
37768: NEG
37769: PUSH
37770: LD_INT 2
37772: NEG
37773: PUSH
37774: EMPTY
37775: LIST
37776: LIST
37777: PUSH
37778: LD_INT 3
37780: PUSH
37781: LD_INT 2
37783: PUSH
37784: EMPTY
37785: LIST
37786: LIST
37787: PUSH
37788: LD_INT 3
37790: PUSH
37791: LD_INT 3
37793: PUSH
37794: EMPTY
37795: LIST
37796: LIST
37797: PUSH
37798: LD_INT 2
37800: PUSH
37801: LD_INT 3
37803: PUSH
37804: EMPTY
37805: LIST
37806: LIST
37807: PUSH
37808: EMPTY
37809: LIST
37810: LIST
37811: LIST
37812: LIST
37813: LIST
37814: LIST
37815: LIST
37816: LIST
37817: LIST
37818: LIST
37819: LIST
37820: LIST
37821: LIST
37822: LIST
37823: LIST
37824: LIST
37825: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37826: LD_ADDR_VAR 0 17
37830: PUSH
37831: LD_INT 0
37833: PUSH
37834: LD_INT 0
37836: PUSH
37837: EMPTY
37838: LIST
37839: LIST
37840: PUSH
37841: LD_INT 0
37843: PUSH
37844: LD_INT 1
37846: NEG
37847: PUSH
37848: EMPTY
37849: LIST
37850: LIST
37851: PUSH
37852: LD_INT 1
37854: PUSH
37855: LD_INT 0
37857: PUSH
37858: EMPTY
37859: LIST
37860: LIST
37861: PUSH
37862: LD_INT 1
37864: PUSH
37865: LD_INT 1
37867: PUSH
37868: EMPTY
37869: LIST
37870: LIST
37871: PUSH
37872: LD_INT 0
37874: PUSH
37875: LD_INT 1
37877: PUSH
37878: EMPTY
37879: LIST
37880: LIST
37881: PUSH
37882: LD_INT 1
37884: NEG
37885: PUSH
37886: LD_INT 0
37888: PUSH
37889: EMPTY
37890: LIST
37891: LIST
37892: PUSH
37893: LD_INT 1
37895: NEG
37896: PUSH
37897: LD_INT 1
37899: NEG
37900: PUSH
37901: EMPTY
37902: LIST
37903: LIST
37904: PUSH
37905: LD_INT 1
37907: NEG
37908: PUSH
37909: LD_INT 2
37911: NEG
37912: PUSH
37913: EMPTY
37914: LIST
37915: LIST
37916: PUSH
37917: LD_INT 0
37919: PUSH
37920: LD_INT 2
37922: NEG
37923: PUSH
37924: EMPTY
37925: LIST
37926: LIST
37927: PUSH
37928: LD_INT 1
37930: PUSH
37931: LD_INT 1
37933: NEG
37934: PUSH
37935: EMPTY
37936: LIST
37937: LIST
37938: PUSH
37939: LD_INT 2
37941: PUSH
37942: LD_INT 0
37944: PUSH
37945: EMPTY
37946: LIST
37947: LIST
37948: PUSH
37949: LD_INT 2
37951: PUSH
37952: LD_INT 1
37954: PUSH
37955: EMPTY
37956: LIST
37957: LIST
37958: PUSH
37959: LD_INT 2
37961: PUSH
37962: LD_INT 2
37964: PUSH
37965: EMPTY
37966: LIST
37967: LIST
37968: PUSH
37969: LD_INT 1
37971: PUSH
37972: LD_INT 2
37974: PUSH
37975: EMPTY
37976: LIST
37977: LIST
37978: PUSH
37979: LD_INT 0
37981: PUSH
37982: LD_INT 2
37984: PUSH
37985: EMPTY
37986: LIST
37987: LIST
37988: PUSH
37989: LD_INT 1
37991: NEG
37992: PUSH
37993: LD_INT 1
37995: PUSH
37996: EMPTY
37997: LIST
37998: LIST
37999: PUSH
38000: LD_INT 2
38002: NEG
38003: PUSH
38004: LD_INT 0
38006: PUSH
38007: EMPTY
38008: LIST
38009: LIST
38010: PUSH
38011: LD_INT 2
38013: NEG
38014: PUSH
38015: LD_INT 1
38017: NEG
38018: PUSH
38019: EMPTY
38020: LIST
38021: LIST
38022: PUSH
38023: LD_INT 2
38025: NEG
38026: PUSH
38027: LD_INT 2
38029: NEG
38030: PUSH
38031: EMPTY
38032: LIST
38033: LIST
38034: PUSH
38035: EMPTY
38036: LIST
38037: LIST
38038: LIST
38039: LIST
38040: LIST
38041: LIST
38042: LIST
38043: LIST
38044: LIST
38045: LIST
38046: LIST
38047: LIST
38048: LIST
38049: LIST
38050: LIST
38051: LIST
38052: LIST
38053: LIST
38054: LIST
38055: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38056: LD_ADDR_VAR 0 18
38060: PUSH
38061: LD_INT 0
38063: PUSH
38064: LD_INT 0
38066: PUSH
38067: EMPTY
38068: LIST
38069: LIST
38070: PUSH
38071: LD_INT 0
38073: PUSH
38074: LD_INT 1
38076: NEG
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: PUSH
38082: LD_INT 1
38084: PUSH
38085: LD_INT 0
38087: PUSH
38088: EMPTY
38089: LIST
38090: LIST
38091: PUSH
38092: LD_INT 1
38094: PUSH
38095: LD_INT 1
38097: PUSH
38098: EMPTY
38099: LIST
38100: LIST
38101: PUSH
38102: LD_INT 0
38104: PUSH
38105: LD_INT 1
38107: PUSH
38108: EMPTY
38109: LIST
38110: LIST
38111: PUSH
38112: LD_INT 1
38114: NEG
38115: PUSH
38116: LD_INT 0
38118: PUSH
38119: EMPTY
38120: LIST
38121: LIST
38122: PUSH
38123: LD_INT 1
38125: NEG
38126: PUSH
38127: LD_INT 1
38129: NEG
38130: PUSH
38131: EMPTY
38132: LIST
38133: LIST
38134: PUSH
38135: LD_INT 1
38137: NEG
38138: PUSH
38139: LD_INT 2
38141: NEG
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: PUSH
38147: LD_INT 0
38149: PUSH
38150: LD_INT 2
38152: NEG
38153: PUSH
38154: EMPTY
38155: LIST
38156: LIST
38157: PUSH
38158: LD_INT 1
38160: PUSH
38161: LD_INT 1
38163: NEG
38164: PUSH
38165: EMPTY
38166: LIST
38167: LIST
38168: PUSH
38169: LD_INT 2
38171: PUSH
38172: LD_INT 0
38174: PUSH
38175: EMPTY
38176: LIST
38177: LIST
38178: PUSH
38179: LD_INT 2
38181: PUSH
38182: LD_INT 1
38184: PUSH
38185: EMPTY
38186: LIST
38187: LIST
38188: PUSH
38189: LD_INT 2
38191: PUSH
38192: LD_INT 2
38194: PUSH
38195: EMPTY
38196: LIST
38197: LIST
38198: PUSH
38199: LD_INT 1
38201: PUSH
38202: LD_INT 2
38204: PUSH
38205: EMPTY
38206: LIST
38207: LIST
38208: PUSH
38209: LD_INT 0
38211: PUSH
38212: LD_INT 2
38214: PUSH
38215: EMPTY
38216: LIST
38217: LIST
38218: PUSH
38219: LD_INT 1
38221: NEG
38222: PUSH
38223: LD_INT 1
38225: PUSH
38226: EMPTY
38227: LIST
38228: LIST
38229: PUSH
38230: LD_INT 2
38232: NEG
38233: PUSH
38234: LD_INT 0
38236: PUSH
38237: EMPTY
38238: LIST
38239: LIST
38240: PUSH
38241: LD_INT 2
38243: NEG
38244: PUSH
38245: LD_INT 1
38247: NEG
38248: PUSH
38249: EMPTY
38250: LIST
38251: LIST
38252: PUSH
38253: LD_INT 2
38255: NEG
38256: PUSH
38257: LD_INT 2
38259: NEG
38260: PUSH
38261: EMPTY
38262: LIST
38263: LIST
38264: PUSH
38265: EMPTY
38266: LIST
38267: LIST
38268: LIST
38269: LIST
38270: LIST
38271: LIST
38272: LIST
38273: LIST
38274: LIST
38275: LIST
38276: LIST
38277: LIST
38278: LIST
38279: LIST
38280: LIST
38281: LIST
38282: LIST
38283: LIST
38284: LIST
38285: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38286: LD_ADDR_VAR 0 19
38290: PUSH
38291: LD_INT 0
38293: PUSH
38294: LD_INT 0
38296: PUSH
38297: EMPTY
38298: LIST
38299: LIST
38300: PUSH
38301: LD_INT 0
38303: PUSH
38304: LD_INT 1
38306: NEG
38307: PUSH
38308: EMPTY
38309: LIST
38310: LIST
38311: PUSH
38312: LD_INT 1
38314: PUSH
38315: LD_INT 0
38317: PUSH
38318: EMPTY
38319: LIST
38320: LIST
38321: PUSH
38322: LD_INT 1
38324: PUSH
38325: LD_INT 1
38327: PUSH
38328: EMPTY
38329: LIST
38330: LIST
38331: PUSH
38332: LD_INT 0
38334: PUSH
38335: LD_INT 1
38337: PUSH
38338: EMPTY
38339: LIST
38340: LIST
38341: PUSH
38342: LD_INT 1
38344: NEG
38345: PUSH
38346: LD_INT 0
38348: PUSH
38349: EMPTY
38350: LIST
38351: LIST
38352: PUSH
38353: LD_INT 1
38355: NEG
38356: PUSH
38357: LD_INT 1
38359: NEG
38360: PUSH
38361: EMPTY
38362: LIST
38363: LIST
38364: PUSH
38365: LD_INT 1
38367: NEG
38368: PUSH
38369: LD_INT 2
38371: NEG
38372: PUSH
38373: EMPTY
38374: LIST
38375: LIST
38376: PUSH
38377: LD_INT 0
38379: PUSH
38380: LD_INT 2
38382: NEG
38383: PUSH
38384: EMPTY
38385: LIST
38386: LIST
38387: PUSH
38388: LD_INT 1
38390: PUSH
38391: LD_INT 1
38393: NEG
38394: PUSH
38395: EMPTY
38396: LIST
38397: LIST
38398: PUSH
38399: LD_INT 2
38401: PUSH
38402: LD_INT 0
38404: PUSH
38405: EMPTY
38406: LIST
38407: LIST
38408: PUSH
38409: LD_INT 2
38411: PUSH
38412: LD_INT 1
38414: PUSH
38415: EMPTY
38416: LIST
38417: LIST
38418: PUSH
38419: LD_INT 2
38421: PUSH
38422: LD_INT 2
38424: PUSH
38425: EMPTY
38426: LIST
38427: LIST
38428: PUSH
38429: LD_INT 1
38431: PUSH
38432: LD_INT 2
38434: PUSH
38435: EMPTY
38436: LIST
38437: LIST
38438: PUSH
38439: LD_INT 0
38441: PUSH
38442: LD_INT 2
38444: PUSH
38445: EMPTY
38446: LIST
38447: LIST
38448: PUSH
38449: LD_INT 1
38451: NEG
38452: PUSH
38453: LD_INT 1
38455: PUSH
38456: EMPTY
38457: LIST
38458: LIST
38459: PUSH
38460: LD_INT 2
38462: NEG
38463: PUSH
38464: LD_INT 0
38466: PUSH
38467: EMPTY
38468: LIST
38469: LIST
38470: PUSH
38471: LD_INT 2
38473: NEG
38474: PUSH
38475: LD_INT 1
38477: NEG
38478: PUSH
38479: EMPTY
38480: LIST
38481: LIST
38482: PUSH
38483: LD_INT 2
38485: NEG
38486: PUSH
38487: LD_INT 2
38489: NEG
38490: PUSH
38491: EMPTY
38492: LIST
38493: LIST
38494: PUSH
38495: EMPTY
38496: LIST
38497: LIST
38498: LIST
38499: LIST
38500: LIST
38501: LIST
38502: LIST
38503: LIST
38504: LIST
38505: LIST
38506: LIST
38507: LIST
38508: LIST
38509: LIST
38510: LIST
38511: LIST
38512: LIST
38513: LIST
38514: LIST
38515: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38516: LD_ADDR_VAR 0 20
38520: PUSH
38521: LD_INT 0
38523: PUSH
38524: LD_INT 0
38526: PUSH
38527: EMPTY
38528: LIST
38529: LIST
38530: PUSH
38531: LD_INT 0
38533: PUSH
38534: LD_INT 1
38536: NEG
38537: PUSH
38538: EMPTY
38539: LIST
38540: LIST
38541: PUSH
38542: LD_INT 1
38544: PUSH
38545: LD_INT 0
38547: PUSH
38548: EMPTY
38549: LIST
38550: LIST
38551: PUSH
38552: LD_INT 1
38554: PUSH
38555: LD_INT 1
38557: PUSH
38558: EMPTY
38559: LIST
38560: LIST
38561: PUSH
38562: LD_INT 0
38564: PUSH
38565: LD_INT 1
38567: PUSH
38568: EMPTY
38569: LIST
38570: LIST
38571: PUSH
38572: LD_INT 1
38574: NEG
38575: PUSH
38576: LD_INT 0
38578: PUSH
38579: EMPTY
38580: LIST
38581: LIST
38582: PUSH
38583: LD_INT 1
38585: NEG
38586: PUSH
38587: LD_INT 1
38589: NEG
38590: PUSH
38591: EMPTY
38592: LIST
38593: LIST
38594: PUSH
38595: LD_INT 1
38597: NEG
38598: PUSH
38599: LD_INT 2
38601: NEG
38602: PUSH
38603: EMPTY
38604: LIST
38605: LIST
38606: PUSH
38607: LD_INT 0
38609: PUSH
38610: LD_INT 2
38612: NEG
38613: PUSH
38614: EMPTY
38615: LIST
38616: LIST
38617: PUSH
38618: LD_INT 1
38620: PUSH
38621: LD_INT 1
38623: NEG
38624: PUSH
38625: EMPTY
38626: LIST
38627: LIST
38628: PUSH
38629: LD_INT 2
38631: PUSH
38632: LD_INT 0
38634: PUSH
38635: EMPTY
38636: LIST
38637: LIST
38638: PUSH
38639: LD_INT 2
38641: PUSH
38642: LD_INT 1
38644: PUSH
38645: EMPTY
38646: LIST
38647: LIST
38648: PUSH
38649: LD_INT 2
38651: PUSH
38652: LD_INT 2
38654: PUSH
38655: EMPTY
38656: LIST
38657: LIST
38658: PUSH
38659: LD_INT 1
38661: PUSH
38662: LD_INT 2
38664: PUSH
38665: EMPTY
38666: LIST
38667: LIST
38668: PUSH
38669: LD_INT 0
38671: PUSH
38672: LD_INT 2
38674: PUSH
38675: EMPTY
38676: LIST
38677: LIST
38678: PUSH
38679: LD_INT 1
38681: NEG
38682: PUSH
38683: LD_INT 1
38685: PUSH
38686: EMPTY
38687: LIST
38688: LIST
38689: PUSH
38690: LD_INT 2
38692: NEG
38693: PUSH
38694: LD_INT 0
38696: PUSH
38697: EMPTY
38698: LIST
38699: LIST
38700: PUSH
38701: LD_INT 2
38703: NEG
38704: PUSH
38705: LD_INT 1
38707: NEG
38708: PUSH
38709: EMPTY
38710: LIST
38711: LIST
38712: PUSH
38713: LD_INT 2
38715: NEG
38716: PUSH
38717: LD_INT 2
38719: NEG
38720: PUSH
38721: EMPTY
38722: LIST
38723: LIST
38724: PUSH
38725: EMPTY
38726: LIST
38727: LIST
38728: LIST
38729: LIST
38730: LIST
38731: LIST
38732: LIST
38733: LIST
38734: LIST
38735: LIST
38736: LIST
38737: LIST
38738: LIST
38739: LIST
38740: LIST
38741: LIST
38742: LIST
38743: LIST
38744: LIST
38745: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38746: LD_ADDR_VAR 0 21
38750: PUSH
38751: LD_INT 0
38753: PUSH
38754: LD_INT 0
38756: PUSH
38757: EMPTY
38758: LIST
38759: LIST
38760: PUSH
38761: LD_INT 0
38763: PUSH
38764: LD_INT 1
38766: NEG
38767: PUSH
38768: EMPTY
38769: LIST
38770: LIST
38771: PUSH
38772: LD_INT 1
38774: PUSH
38775: LD_INT 0
38777: PUSH
38778: EMPTY
38779: LIST
38780: LIST
38781: PUSH
38782: LD_INT 1
38784: PUSH
38785: LD_INT 1
38787: PUSH
38788: EMPTY
38789: LIST
38790: LIST
38791: PUSH
38792: LD_INT 0
38794: PUSH
38795: LD_INT 1
38797: PUSH
38798: EMPTY
38799: LIST
38800: LIST
38801: PUSH
38802: LD_INT 1
38804: NEG
38805: PUSH
38806: LD_INT 0
38808: PUSH
38809: EMPTY
38810: LIST
38811: LIST
38812: PUSH
38813: LD_INT 1
38815: NEG
38816: PUSH
38817: LD_INT 1
38819: NEG
38820: PUSH
38821: EMPTY
38822: LIST
38823: LIST
38824: PUSH
38825: LD_INT 1
38827: NEG
38828: PUSH
38829: LD_INT 2
38831: NEG
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: PUSH
38837: LD_INT 0
38839: PUSH
38840: LD_INT 2
38842: NEG
38843: PUSH
38844: EMPTY
38845: LIST
38846: LIST
38847: PUSH
38848: LD_INT 1
38850: PUSH
38851: LD_INT 1
38853: NEG
38854: PUSH
38855: EMPTY
38856: LIST
38857: LIST
38858: PUSH
38859: LD_INT 2
38861: PUSH
38862: LD_INT 0
38864: PUSH
38865: EMPTY
38866: LIST
38867: LIST
38868: PUSH
38869: LD_INT 2
38871: PUSH
38872: LD_INT 1
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: PUSH
38879: LD_INT 2
38881: PUSH
38882: LD_INT 2
38884: PUSH
38885: EMPTY
38886: LIST
38887: LIST
38888: PUSH
38889: LD_INT 1
38891: PUSH
38892: LD_INT 2
38894: PUSH
38895: EMPTY
38896: LIST
38897: LIST
38898: PUSH
38899: LD_INT 0
38901: PUSH
38902: LD_INT 2
38904: PUSH
38905: EMPTY
38906: LIST
38907: LIST
38908: PUSH
38909: LD_INT 1
38911: NEG
38912: PUSH
38913: LD_INT 1
38915: PUSH
38916: EMPTY
38917: LIST
38918: LIST
38919: PUSH
38920: LD_INT 2
38922: NEG
38923: PUSH
38924: LD_INT 0
38926: PUSH
38927: EMPTY
38928: LIST
38929: LIST
38930: PUSH
38931: LD_INT 2
38933: NEG
38934: PUSH
38935: LD_INT 1
38937: NEG
38938: PUSH
38939: EMPTY
38940: LIST
38941: LIST
38942: PUSH
38943: LD_INT 2
38945: NEG
38946: PUSH
38947: LD_INT 2
38949: NEG
38950: PUSH
38951: EMPTY
38952: LIST
38953: LIST
38954: PUSH
38955: EMPTY
38956: LIST
38957: LIST
38958: LIST
38959: LIST
38960: LIST
38961: LIST
38962: LIST
38963: LIST
38964: LIST
38965: LIST
38966: LIST
38967: LIST
38968: LIST
38969: LIST
38970: LIST
38971: LIST
38972: LIST
38973: LIST
38974: LIST
38975: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38976: LD_ADDR_VAR 0 22
38980: PUSH
38981: LD_INT 0
38983: PUSH
38984: LD_INT 0
38986: PUSH
38987: EMPTY
38988: LIST
38989: LIST
38990: PUSH
38991: LD_INT 0
38993: PUSH
38994: LD_INT 1
38996: NEG
38997: PUSH
38998: EMPTY
38999: LIST
39000: LIST
39001: PUSH
39002: LD_INT 1
39004: PUSH
39005: LD_INT 0
39007: PUSH
39008: EMPTY
39009: LIST
39010: LIST
39011: PUSH
39012: LD_INT 1
39014: PUSH
39015: LD_INT 1
39017: PUSH
39018: EMPTY
39019: LIST
39020: LIST
39021: PUSH
39022: LD_INT 0
39024: PUSH
39025: LD_INT 1
39027: PUSH
39028: EMPTY
39029: LIST
39030: LIST
39031: PUSH
39032: LD_INT 1
39034: NEG
39035: PUSH
39036: LD_INT 0
39038: PUSH
39039: EMPTY
39040: LIST
39041: LIST
39042: PUSH
39043: LD_INT 1
39045: NEG
39046: PUSH
39047: LD_INT 1
39049: NEG
39050: PUSH
39051: EMPTY
39052: LIST
39053: LIST
39054: PUSH
39055: LD_INT 1
39057: NEG
39058: PUSH
39059: LD_INT 2
39061: NEG
39062: PUSH
39063: EMPTY
39064: LIST
39065: LIST
39066: PUSH
39067: LD_INT 0
39069: PUSH
39070: LD_INT 2
39072: NEG
39073: PUSH
39074: EMPTY
39075: LIST
39076: LIST
39077: PUSH
39078: LD_INT 1
39080: PUSH
39081: LD_INT 1
39083: NEG
39084: PUSH
39085: EMPTY
39086: LIST
39087: LIST
39088: PUSH
39089: LD_INT 2
39091: PUSH
39092: LD_INT 0
39094: PUSH
39095: EMPTY
39096: LIST
39097: LIST
39098: PUSH
39099: LD_INT 2
39101: PUSH
39102: LD_INT 1
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: PUSH
39109: LD_INT 2
39111: PUSH
39112: LD_INT 2
39114: PUSH
39115: EMPTY
39116: LIST
39117: LIST
39118: PUSH
39119: LD_INT 1
39121: PUSH
39122: LD_INT 2
39124: PUSH
39125: EMPTY
39126: LIST
39127: LIST
39128: PUSH
39129: LD_INT 0
39131: PUSH
39132: LD_INT 2
39134: PUSH
39135: EMPTY
39136: LIST
39137: LIST
39138: PUSH
39139: LD_INT 1
39141: NEG
39142: PUSH
39143: LD_INT 1
39145: PUSH
39146: EMPTY
39147: LIST
39148: LIST
39149: PUSH
39150: LD_INT 2
39152: NEG
39153: PUSH
39154: LD_INT 0
39156: PUSH
39157: EMPTY
39158: LIST
39159: LIST
39160: PUSH
39161: LD_INT 2
39163: NEG
39164: PUSH
39165: LD_INT 1
39167: NEG
39168: PUSH
39169: EMPTY
39170: LIST
39171: LIST
39172: PUSH
39173: LD_INT 2
39175: NEG
39176: PUSH
39177: LD_INT 2
39179: NEG
39180: PUSH
39181: EMPTY
39182: LIST
39183: LIST
39184: PUSH
39185: EMPTY
39186: LIST
39187: LIST
39188: LIST
39189: LIST
39190: LIST
39191: LIST
39192: LIST
39193: LIST
39194: LIST
39195: LIST
39196: LIST
39197: LIST
39198: LIST
39199: LIST
39200: LIST
39201: LIST
39202: LIST
39203: LIST
39204: LIST
39205: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
39206: LD_ADDR_VAR 0 23
39210: PUSH
39211: LD_INT 0
39213: PUSH
39214: LD_INT 0
39216: PUSH
39217: EMPTY
39218: LIST
39219: LIST
39220: PUSH
39221: LD_INT 0
39223: PUSH
39224: LD_INT 1
39226: NEG
39227: PUSH
39228: EMPTY
39229: LIST
39230: LIST
39231: PUSH
39232: LD_INT 1
39234: PUSH
39235: LD_INT 0
39237: PUSH
39238: EMPTY
39239: LIST
39240: LIST
39241: PUSH
39242: LD_INT 1
39244: PUSH
39245: LD_INT 1
39247: PUSH
39248: EMPTY
39249: LIST
39250: LIST
39251: PUSH
39252: LD_INT 0
39254: PUSH
39255: LD_INT 1
39257: PUSH
39258: EMPTY
39259: LIST
39260: LIST
39261: PUSH
39262: LD_INT 1
39264: NEG
39265: PUSH
39266: LD_INT 0
39268: PUSH
39269: EMPTY
39270: LIST
39271: LIST
39272: PUSH
39273: LD_INT 1
39275: NEG
39276: PUSH
39277: LD_INT 1
39279: NEG
39280: PUSH
39281: EMPTY
39282: LIST
39283: LIST
39284: PUSH
39285: LD_INT 1
39287: NEG
39288: PUSH
39289: LD_INT 2
39291: NEG
39292: PUSH
39293: EMPTY
39294: LIST
39295: LIST
39296: PUSH
39297: LD_INT 0
39299: PUSH
39300: LD_INT 2
39302: NEG
39303: PUSH
39304: EMPTY
39305: LIST
39306: LIST
39307: PUSH
39308: LD_INT 1
39310: PUSH
39311: LD_INT 1
39313: NEG
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: PUSH
39319: LD_INT 2
39321: PUSH
39322: LD_INT 0
39324: PUSH
39325: EMPTY
39326: LIST
39327: LIST
39328: PUSH
39329: LD_INT 2
39331: PUSH
39332: LD_INT 1
39334: PUSH
39335: EMPTY
39336: LIST
39337: LIST
39338: PUSH
39339: LD_INT 2
39341: PUSH
39342: LD_INT 2
39344: PUSH
39345: EMPTY
39346: LIST
39347: LIST
39348: PUSH
39349: LD_INT 1
39351: PUSH
39352: LD_INT 2
39354: PUSH
39355: EMPTY
39356: LIST
39357: LIST
39358: PUSH
39359: LD_INT 0
39361: PUSH
39362: LD_INT 2
39364: PUSH
39365: EMPTY
39366: LIST
39367: LIST
39368: PUSH
39369: LD_INT 1
39371: NEG
39372: PUSH
39373: LD_INT 1
39375: PUSH
39376: EMPTY
39377: LIST
39378: LIST
39379: PUSH
39380: LD_INT 2
39382: NEG
39383: PUSH
39384: LD_INT 0
39386: PUSH
39387: EMPTY
39388: LIST
39389: LIST
39390: PUSH
39391: LD_INT 2
39393: NEG
39394: PUSH
39395: LD_INT 1
39397: NEG
39398: PUSH
39399: EMPTY
39400: LIST
39401: LIST
39402: PUSH
39403: LD_INT 2
39405: NEG
39406: PUSH
39407: LD_INT 2
39409: NEG
39410: PUSH
39411: EMPTY
39412: LIST
39413: LIST
39414: PUSH
39415: LD_INT 2
39417: NEG
39418: PUSH
39419: LD_INT 3
39421: NEG
39422: PUSH
39423: EMPTY
39424: LIST
39425: LIST
39426: PUSH
39427: LD_INT 1
39429: NEG
39430: PUSH
39431: LD_INT 3
39433: NEG
39434: PUSH
39435: EMPTY
39436: LIST
39437: LIST
39438: PUSH
39439: LD_INT 1
39441: PUSH
39442: LD_INT 2
39444: NEG
39445: PUSH
39446: EMPTY
39447: LIST
39448: LIST
39449: PUSH
39450: LD_INT 2
39452: PUSH
39453: LD_INT 1
39455: NEG
39456: PUSH
39457: EMPTY
39458: LIST
39459: LIST
39460: PUSH
39461: EMPTY
39462: LIST
39463: LIST
39464: LIST
39465: LIST
39466: LIST
39467: LIST
39468: LIST
39469: LIST
39470: LIST
39471: LIST
39472: LIST
39473: LIST
39474: LIST
39475: LIST
39476: LIST
39477: LIST
39478: LIST
39479: LIST
39480: LIST
39481: LIST
39482: LIST
39483: LIST
39484: LIST
39485: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
39486: LD_ADDR_VAR 0 24
39490: PUSH
39491: LD_INT 0
39493: PUSH
39494: LD_INT 0
39496: PUSH
39497: EMPTY
39498: LIST
39499: LIST
39500: PUSH
39501: LD_INT 0
39503: PUSH
39504: LD_INT 1
39506: NEG
39507: PUSH
39508: EMPTY
39509: LIST
39510: LIST
39511: PUSH
39512: LD_INT 1
39514: PUSH
39515: LD_INT 0
39517: PUSH
39518: EMPTY
39519: LIST
39520: LIST
39521: PUSH
39522: LD_INT 1
39524: PUSH
39525: LD_INT 1
39527: PUSH
39528: EMPTY
39529: LIST
39530: LIST
39531: PUSH
39532: LD_INT 0
39534: PUSH
39535: LD_INT 1
39537: PUSH
39538: EMPTY
39539: LIST
39540: LIST
39541: PUSH
39542: LD_INT 1
39544: NEG
39545: PUSH
39546: LD_INT 0
39548: PUSH
39549: EMPTY
39550: LIST
39551: LIST
39552: PUSH
39553: LD_INT 1
39555: NEG
39556: PUSH
39557: LD_INT 1
39559: NEG
39560: PUSH
39561: EMPTY
39562: LIST
39563: LIST
39564: PUSH
39565: LD_INT 1
39567: NEG
39568: PUSH
39569: LD_INT 2
39571: NEG
39572: PUSH
39573: EMPTY
39574: LIST
39575: LIST
39576: PUSH
39577: LD_INT 0
39579: PUSH
39580: LD_INT 2
39582: NEG
39583: PUSH
39584: EMPTY
39585: LIST
39586: LIST
39587: PUSH
39588: LD_INT 1
39590: PUSH
39591: LD_INT 1
39593: NEG
39594: PUSH
39595: EMPTY
39596: LIST
39597: LIST
39598: PUSH
39599: LD_INT 2
39601: PUSH
39602: LD_INT 0
39604: PUSH
39605: EMPTY
39606: LIST
39607: LIST
39608: PUSH
39609: LD_INT 2
39611: PUSH
39612: LD_INT 1
39614: PUSH
39615: EMPTY
39616: LIST
39617: LIST
39618: PUSH
39619: LD_INT 2
39621: PUSH
39622: LD_INT 2
39624: PUSH
39625: EMPTY
39626: LIST
39627: LIST
39628: PUSH
39629: LD_INT 1
39631: PUSH
39632: LD_INT 2
39634: PUSH
39635: EMPTY
39636: LIST
39637: LIST
39638: PUSH
39639: LD_INT 0
39641: PUSH
39642: LD_INT 2
39644: PUSH
39645: EMPTY
39646: LIST
39647: LIST
39648: PUSH
39649: LD_INT 1
39651: NEG
39652: PUSH
39653: LD_INT 1
39655: PUSH
39656: EMPTY
39657: LIST
39658: LIST
39659: PUSH
39660: LD_INT 2
39662: NEG
39663: PUSH
39664: LD_INT 0
39666: PUSH
39667: EMPTY
39668: LIST
39669: LIST
39670: PUSH
39671: LD_INT 2
39673: NEG
39674: PUSH
39675: LD_INT 1
39677: NEG
39678: PUSH
39679: EMPTY
39680: LIST
39681: LIST
39682: PUSH
39683: LD_INT 2
39685: NEG
39686: PUSH
39687: LD_INT 2
39689: NEG
39690: PUSH
39691: EMPTY
39692: LIST
39693: LIST
39694: PUSH
39695: LD_INT 1
39697: PUSH
39698: LD_INT 2
39700: NEG
39701: PUSH
39702: EMPTY
39703: LIST
39704: LIST
39705: PUSH
39706: LD_INT 2
39708: PUSH
39709: LD_INT 1
39711: NEG
39712: PUSH
39713: EMPTY
39714: LIST
39715: LIST
39716: PUSH
39717: LD_INT 3
39719: PUSH
39720: LD_INT 1
39722: PUSH
39723: EMPTY
39724: LIST
39725: LIST
39726: PUSH
39727: LD_INT 3
39729: PUSH
39730: LD_INT 2
39732: PUSH
39733: EMPTY
39734: LIST
39735: LIST
39736: PUSH
39737: EMPTY
39738: LIST
39739: LIST
39740: LIST
39741: LIST
39742: LIST
39743: LIST
39744: LIST
39745: LIST
39746: LIST
39747: LIST
39748: LIST
39749: LIST
39750: LIST
39751: LIST
39752: LIST
39753: LIST
39754: LIST
39755: LIST
39756: LIST
39757: LIST
39758: LIST
39759: LIST
39760: LIST
39761: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
39762: LD_ADDR_VAR 0 25
39766: PUSH
39767: LD_INT 0
39769: PUSH
39770: LD_INT 0
39772: PUSH
39773: EMPTY
39774: LIST
39775: LIST
39776: PUSH
39777: LD_INT 0
39779: PUSH
39780: LD_INT 1
39782: NEG
39783: PUSH
39784: EMPTY
39785: LIST
39786: LIST
39787: PUSH
39788: LD_INT 1
39790: PUSH
39791: LD_INT 0
39793: PUSH
39794: EMPTY
39795: LIST
39796: LIST
39797: PUSH
39798: LD_INT 1
39800: PUSH
39801: LD_INT 1
39803: PUSH
39804: EMPTY
39805: LIST
39806: LIST
39807: PUSH
39808: LD_INT 0
39810: PUSH
39811: LD_INT 1
39813: PUSH
39814: EMPTY
39815: LIST
39816: LIST
39817: PUSH
39818: LD_INT 1
39820: NEG
39821: PUSH
39822: LD_INT 0
39824: PUSH
39825: EMPTY
39826: LIST
39827: LIST
39828: PUSH
39829: LD_INT 1
39831: NEG
39832: PUSH
39833: LD_INT 1
39835: NEG
39836: PUSH
39837: EMPTY
39838: LIST
39839: LIST
39840: PUSH
39841: LD_INT 1
39843: NEG
39844: PUSH
39845: LD_INT 2
39847: NEG
39848: PUSH
39849: EMPTY
39850: LIST
39851: LIST
39852: PUSH
39853: LD_INT 0
39855: PUSH
39856: LD_INT 2
39858: NEG
39859: PUSH
39860: EMPTY
39861: LIST
39862: LIST
39863: PUSH
39864: LD_INT 1
39866: PUSH
39867: LD_INT 1
39869: NEG
39870: PUSH
39871: EMPTY
39872: LIST
39873: LIST
39874: PUSH
39875: LD_INT 2
39877: PUSH
39878: LD_INT 0
39880: PUSH
39881: EMPTY
39882: LIST
39883: LIST
39884: PUSH
39885: LD_INT 2
39887: PUSH
39888: LD_INT 1
39890: PUSH
39891: EMPTY
39892: LIST
39893: LIST
39894: PUSH
39895: LD_INT 2
39897: PUSH
39898: LD_INT 2
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: PUSH
39905: LD_INT 1
39907: PUSH
39908: LD_INT 2
39910: PUSH
39911: EMPTY
39912: LIST
39913: LIST
39914: PUSH
39915: LD_INT 0
39917: PUSH
39918: LD_INT 2
39920: PUSH
39921: EMPTY
39922: LIST
39923: LIST
39924: PUSH
39925: LD_INT 1
39927: NEG
39928: PUSH
39929: LD_INT 1
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: PUSH
39936: LD_INT 2
39938: NEG
39939: PUSH
39940: LD_INT 0
39942: PUSH
39943: EMPTY
39944: LIST
39945: LIST
39946: PUSH
39947: LD_INT 2
39949: NEG
39950: PUSH
39951: LD_INT 1
39953: NEG
39954: PUSH
39955: EMPTY
39956: LIST
39957: LIST
39958: PUSH
39959: LD_INT 2
39961: NEG
39962: PUSH
39963: LD_INT 2
39965: NEG
39966: PUSH
39967: EMPTY
39968: LIST
39969: LIST
39970: PUSH
39971: LD_INT 3
39973: PUSH
39974: LD_INT 1
39976: PUSH
39977: EMPTY
39978: LIST
39979: LIST
39980: PUSH
39981: LD_INT 3
39983: PUSH
39984: LD_INT 2
39986: PUSH
39987: EMPTY
39988: LIST
39989: LIST
39990: PUSH
39991: LD_INT 2
39993: PUSH
39994: LD_INT 3
39996: PUSH
39997: EMPTY
39998: LIST
39999: LIST
40000: PUSH
40001: LD_INT 1
40003: PUSH
40004: LD_INT 3
40006: PUSH
40007: EMPTY
40008: LIST
40009: LIST
40010: PUSH
40011: EMPTY
40012: LIST
40013: LIST
40014: LIST
40015: LIST
40016: LIST
40017: LIST
40018: LIST
40019: LIST
40020: LIST
40021: LIST
40022: LIST
40023: LIST
40024: LIST
40025: LIST
40026: LIST
40027: LIST
40028: LIST
40029: LIST
40030: LIST
40031: LIST
40032: LIST
40033: LIST
40034: LIST
40035: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
40036: LD_ADDR_VAR 0 26
40040: PUSH
40041: LD_INT 0
40043: PUSH
40044: LD_INT 0
40046: PUSH
40047: EMPTY
40048: LIST
40049: LIST
40050: PUSH
40051: LD_INT 0
40053: PUSH
40054: LD_INT 1
40056: NEG
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: PUSH
40062: LD_INT 1
40064: PUSH
40065: LD_INT 0
40067: PUSH
40068: EMPTY
40069: LIST
40070: LIST
40071: PUSH
40072: LD_INT 1
40074: PUSH
40075: LD_INT 1
40077: PUSH
40078: EMPTY
40079: LIST
40080: LIST
40081: PUSH
40082: LD_INT 0
40084: PUSH
40085: LD_INT 1
40087: PUSH
40088: EMPTY
40089: LIST
40090: LIST
40091: PUSH
40092: LD_INT 1
40094: NEG
40095: PUSH
40096: LD_INT 0
40098: PUSH
40099: EMPTY
40100: LIST
40101: LIST
40102: PUSH
40103: LD_INT 1
40105: NEG
40106: PUSH
40107: LD_INT 1
40109: NEG
40110: PUSH
40111: EMPTY
40112: LIST
40113: LIST
40114: PUSH
40115: LD_INT 1
40117: NEG
40118: PUSH
40119: LD_INT 2
40121: NEG
40122: PUSH
40123: EMPTY
40124: LIST
40125: LIST
40126: PUSH
40127: LD_INT 0
40129: PUSH
40130: LD_INT 2
40132: NEG
40133: PUSH
40134: EMPTY
40135: LIST
40136: LIST
40137: PUSH
40138: LD_INT 1
40140: PUSH
40141: LD_INT 1
40143: NEG
40144: PUSH
40145: EMPTY
40146: LIST
40147: LIST
40148: PUSH
40149: LD_INT 2
40151: PUSH
40152: LD_INT 0
40154: PUSH
40155: EMPTY
40156: LIST
40157: LIST
40158: PUSH
40159: LD_INT 2
40161: PUSH
40162: LD_INT 1
40164: PUSH
40165: EMPTY
40166: LIST
40167: LIST
40168: PUSH
40169: LD_INT 2
40171: PUSH
40172: LD_INT 2
40174: PUSH
40175: EMPTY
40176: LIST
40177: LIST
40178: PUSH
40179: LD_INT 1
40181: PUSH
40182: LD_INT 2
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: PUSH
40189: LD_INT 0
40191: PUSH
40192: LD_INT 2
40194: PUSH
40195: EMPTY
40196: LIST
40197: LIST
40198: PUSH
40199: LD_INT 1
40201: NEG
40202: PUSH
40203: LD_INT 1
40205: PUSH
40206: EMPTY
40207: LIST
40208: LIST
40209: PUSH
40210: LD_INT 2
40212: NEG
40213: PUSH
40214: LD_INT 0
40216: PUSH
40217: EMPTY
40218: LIST
40219: LIST
40220: PUSH
40221: LD_INT 2
40223: NEG
40224: PUSH
40225: LD_INT 1
40227: NEG
40228: PUSH
40229: EMPTY
40230: LIST
40231: LIST
40232: PUSH
40233: LD_INT 2
40235: NEG
40236: PUSH
40237: LD_INT 2
40239: NEG
40240: PUSH
40241: EMPTY
40242: LIST
40243: LIST
40244: PUSH
40245: LD_INT 2
40247: PUSH
40248: LD_INT 3
40250: PUSH
40251: EMPTY
40252: LIST
40253: LIST
40254: PUSH
40255: LD_INT 1
40257: PUSH
40258: LD_INT 3
40260: PUSH
40261: EMPTY
40262: LIST
40263: LIST
40264: PUSH
40265: LD_INT 1
40267: NEG
40268: PUSH
40269: LD_INT 2
40271: PUSH
40272: EMPTY
40273: LIST
40274: LIST
40275: PUSH
40276: LD_INT 2
40278: NEG
40279: PUSH
40280: LD_INT 1
40282: PUSH
40283: EMPTY
40284: LIST
40285: LIST
40286: PUSH
40287: EMPTY
40288: LIST
40289: LIST
40290: LIST
40291: LIST
40292: LIST
40293: LIST
40294: LIST
40295: LIST
40296: LIST
40297: LIST
40298: LIST
40299: LIST
40300: LIST
40301: LIST
40302: LIST
40303: LIST
40304: LIST
40305: LIST
40306: LIST
40307: LIST
40308: LIST
40309: LIST
40310: LIST
40311: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40312: LD_ADDR_VAR 0 27
40316: PUSH
40317: LD_INT 0
40319: PUSH
40320: LD_INT 0
40322: PUSH
40323: EMPTY
40324: LIST
40325: LIST
40326: PUSH
40327: LD_INT 0
40329: PUSH
40330: LD_INT 1
40332: NEG
40333: PUSH
40334: EMPTY
40335: LIST
40336: LIST
40337: PUSH
40338: LD_INT 1
40340: PUSH
40341: LD_INT 0
40343: PUSH
40344: EMPTY
40345: LIST
40346: LIST
40347: PUSH
40348: LD_INT 1
40350: PUSH
40351: LD_INT 1
40353: PUSH
40354: EMPTY
40355: LIST
40356: LIST
40357: PUSH
40358: LD_INT 0
40360: PUSH
40361: LD_INT 1
40363: PUSH
40364: EMPTY
40365: LIST
40366: LIST
40367: PUSH
40368: LD_INT 1
40370: NEG
40371: PUSH
40372: LD_INT 0
40374: PUSH
40375: EMPTY
40376: LIST
40377: LIST
40378: PUSH
40379: LD_INT 1
40381: NEG
40382: PUSH
40383: LD_INT 1
40385: NEG
40386: PUSH
40387: EMPTY
40388: LIST
40389: LIST
40390: PUSH
40391: LD_INT 1
40393: NEG
40394: PUSH
40395: LD_INT 2
40397: NEG
40398: PUSH
40399: EMPTY
40400: LIST
40401: LIST
40402: PUSH
40403: LD_INT 0
40405: PUSH
40406: LD_INT 2
40408: NEG
40409: PUSH
40410: EMPTY
40411: LIST
40412: LIST
40413: PUSH
40414: LD_INT 1
40416: PUSH
40417: LD_INT 1
40419: NEG
40420: PUSH
40421: EMPTY
40422: LIST
40423: LIST
40424: PUSH
40425: LD_INT 2
40427: PUSH
40428: LD_INT 0
40430: PUSH
40431: EMPTY
40432: LIST
40433: LIST
40434: PUSH
40435: LD_INT 2
40437: PUSH
40438: LD_INT 1
40440: PUSH
40441: EMPTY
40442: LIST
40443: LIST
40444: PUSH
40445: LD_INT 2
40447: PUSH
40448: LD_INT 2
40450: PUSH
40451: EMPTY
40452: LIST
40453: LIST
40454: PUSH
40455: LD_INT 1
40457: PUSH
40458: LD_INT 2
40460: PUSH
40461: EMPTY
40462: LIST
40463: LIST
40464: PUSH
40465: LD_INT 0
40467: PUSH
40468: LD_INT 2
40470: PUSH
40471: EMPTY
40472: LIST
40473: LIST
40474: PUSH
40475: LD_INT 1
40477: NEG
40478: PUSH
40479: LD_INT 1
40481: PUSH
40482: EMPTY
40483: LIST
40484: LIST
40485: PUSH
40486: LD_INT 2
40488: NEG
40489: PUSH
40490: LD_INT 0
40492: PUSH
40493: EMPTY
40494: LIST
40495: LIST
40496: PUSH
40497: LD_INT 2
40499: NEG
40500: PUSH
40501: LD_INT 1
40503: NEG
40504: PUSH
40505: EMPTY
40506: LIST
40507: LIST
40508: PUSH
40509: LD_INT 2
40511: NEG
40512: PUSH
40513: LD_INT 2
40515: NEG
40516: PUSH
40517: EMPTY
40518: LIST
40519: LIST
40520: PUSH
40521: LD_INT 1
40523: NEG
40524: PUSH
40525: LD_INT 2
40527: PUSH
40528: EMPTY
40529: LIST
40530: LIST
40531: PUSH
40532: LD_INT 2
40534: NEG
40535: PUSH
40536: LD_INT 1
40538: PUSH
40539: EMPTY
40540: LIST
40541: LIST
40542: PUSH
40543: LD_INT 3
40545: NEG
40546: PUSH
40547: LD_INT 1
40549: NEG
40550: PUSH
40551: EMPTY
40552: LIST
40553: LIST
40554: PUSH
40555: LD_INT 3
40557: NEG
40558: PUSH
40559: LD_INT 2
40561: NEG
40562: PUSH
40563: EMPTY
40564: LIST
40565: LIST
40566: PUSH
40567: EMPTY
40568: LIST
40569: LIST
40570: LIST
40571: LIST
40572: LIST
40573: LIST
40574: LIST
40575: LIST
40576: LIST
40577: LIST
40578: LIST
40579: LIST
40580: LIST
40581: LIST
40582: LIST
40583: LIST
40584: LIST
40585: LIST
40586: LIST
40587: LIST
40588: LIST
40589: LIST
40590: LIST
40591: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40592: LD_ADDR_VAR 0 28
40596: PUSH
40597: LD_INT 0
40599: PUSH
40600: LD_INT 0
40602: PUSH
40603: EMPTY
40604: LIST
40605: LIST
40606: PUSH
40607: LD_INT 0
40609: PUSH
40610: LD_INT 1
40612: NEG
40613: PUSH
40614: EMPTY
40615: LIST
40616: LIST
40617: PUSH
40618: LD_INT 1
40620: PUSH
40621: LD_INT 0
40623: PUSH
40624: EMPTY
40625: LIST
40626: LIST
40627: PUSH
40628: LD_INT 1
40630: PUSH
40631: LD_INT 1
40633: PUSH
40634: EMPTY
40635: LIST
40636: LIST
40637: PUSH
40638: LD_INT 0
40640: PUSH
40641: LD_INT 1
40643: PUSH
40644: EMPTY
40645: LIST
40646: LIST
40647: PUSH
40648: LD_INT 1
40650: NEG
40651: PUSH
40652: LD_INT 0
40654: PUSH
40655: EMPTY
40656: LIST
40657: LIST
40658: PUSH
40659: LD_INT 1
40661: NEG
40662: PUSH
40663: LD_INT 1
40665: NEG
40666: PUSH
40667: EMPTY
40668: LIST
40669: LIST
40670: PUSH
40671: LD_INT 1
40673: NEG
40674: PUSH
40675: LD_INT 2
40677: NEG
40678: PUSH
40679: EMPTY
40680: LIST
40681: LIST
40682: PUSH
40683: LD_INT 0
40685: PUSH
40686: LD_INT 2
40688: NEG
40689: PUSH
40690: EMPTY
40691: LIST
40692: LIST
40693: PUSH
40694: LD_INT 1
40696: PUSH
40697: LD_INT 1
40699: NEG
40700: PUSH
40701: EMPTY
40702: LIST
40703: LIST
40704: PUSH
40705: LD_INT 2
40707: PUSH
40708: LD_INT 0
40710: PUSH
40711: EMPTY
40712: LIST
40713: LIST
40714: PUSH
40715: LD_INT 2
40717: PUSH
40718: LD_INT 1
40720: PUSH
40721: EMPTY
40722: LIST
40723: LIST
40724: PUSH
40725: LD_INT 2
40727: PUSH
40728: LD_INT 2
40730: PUSH
40731: EMPTY
40732: LIST
40733: LIST
40734: PUSH
40735: LD_INT 1
40737: PUSH
40738: LD_INT 2
40740: PUSH
40741: EMPTY
40742: LIST
40743: LIST
40744: PUSH
40745: LD_INT 0
40747: PUSH
40748: LD_INT 2
40750: PUSH
40751: EMPTY
40752: LIST
40753: LIST
40754: PUSH
40755: LD_INT 1
40757: NEG
40758: PUSH
40759: LD_INT 1
40761: PUSH
40762: EMPTY
40763: LIST
40764: LIST
40765: PUSH
40766: LD_INT 2
40768: NEG
40769: PUSH
40770: LD_INT 0
40772: PUSH
40773: EMPTY
40774: LIST
40775: LIST
40776: PUSH
40777: LD_INT 2
40779: NEG
40780: PUSH
40781: LD_INT 1
40783: NEG
40784: PUSH
40785: EMPTY
40786: LIST
40787: LIST
40788: PUSH
40789: LD_INT 2
40791: NEG
40792: PUSH
40793: LD_INT 2
40795: NEG
40796: PUSH
40797: EMPTY
40798: LIST
40799: LIST
40800: PUSH
40801: LD_INT 2
40803: NEG
40804: PUSH
40805: LD_INT 3
40807: NEG
40808: PUSH
40809: EMPTY
40810: LIST
40811: LIST
40812: PUSH
40813: LD_INT 1
40815: NEG
40816: PUSH
40817: LD_INT 3
40819: NEG
40820: PUSH
40821: EMPTY
40822: LIST
40823: LIST
40824: PUSH
40825: LD_INT 3
40827: NEG
40828: PUSH
40829: LD_INT 1
40831: NEG
40832: PUSH
40833: EMPTY
40834: LIST
40835: LIST
40836: PUSH
40837: LD_INT 3
40839: NEG
40840: PUSH
40841: LD_INT 2
40843: NEG
40844: PUSH
40845: EMPTY
40846: LIST
40847: LIST
40848: PUSH
40849: EMPTY
40850: LIST
40851: LIST
40852: LIST
40853: LIST
40854: LIST
40855: LIST
40856: LIST
40857: LIST
40858: LIST
40859: LIST
40860: LIST
40861: LIST
40862: LIST
40863: LIST
40864: LIST
40865: LIST
40866: LIST
40867: LIST
40868: LIST
40869: LIST
40870: LIST
40871: LIST
40872: LIST
40873: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40874: LD_ADDR_VAR 0 29
40878: PUSH
40879: LD_INT 0
40881: PUSH
40882: LD_INT 0
40884: PUSH
40885: EMPTY
40886: LIST
40887: LIST
40888: PUSH
40889: LD_INT 0
40891: PUSH
40892: LD_INT 1
40894: NEG
40895: PUSH
40896: EMPTY
40897: LIST
40898: LIST
40899: PUSH
40900: LD_INT 1
40902: PUSH
40903: LD_INT 0
40905: PUSH
40906: EMPTY
40907: LIST
40908: LIST
40909: PUSH
40910: LD_INT 1
40912: PUSH
40913: LD_INT 1
40915: PUSH
40916: EMPTY
40917: LIST
40918: LIST
40919: PUSH
40920: LD_INT 0
40922: PUSH
40923: LD_INT 1
40925: PUSH
40926: EMPTY
40927: LIST
40928: LIST
40929: PUSH
40930: LD_INT 1
40932: NEG
40933: PUSH
40934: LD_INT 0
40936: PUSH
40937: EMPTY
40938: LIST
40939: LIST
40940: PUSH
40941: LD_INT 1
40943: NEG
40944: PUSH
40945: LD_INT 1
40947: NEG
40948: PUSH
40949: EMPTY
40950: LIST
40951: LIST
40952: PUSH
40953: LD_INT 1
40955: NEG
40956: PUSH
40957: LD_INT 2
40959: NEG
40960: PUSH
40961: EMPTY
40962: LIST
40963: LIST
40964: PUSH
40965: LD_INT 0
40967: PUSH
40968: LD_INT 2
40970: NEG
40971: PUSH
40972: EMPTY
40973: LIST
40974: LIST
40975: PUSH
40976: LD_INT 1
40978: PUSH
40979: LD_INT 1
40981: NEG
40982: PUSH
40983: EMPTY
40984: LIST
40985: LIST
40986: PUSH
40987: LD_INT 2
40989: PUSH
40990: LD_INT 0
40992: PUSH
40993: EMPTY
40994: LIST
40995: LIST
40996: PUSH
40997: LD_INT 2
40999: PUSH
41000: LD_INT 1
41002: PUSH
41003: EMPTY
41004: LIST
41005: LIST
41006: PUSH
41007: LD_INT 1
41009: PUSH
41010: LD_INT 2
41012: PUSH
41013: EMPTY
41014: LIST
41015: LIST
41016: PUSH
41017: LD_INT 0
41019: PUSH
41020: LD_INT 2
41022: PUSH
41023: EMPTY
41024: LIST
41025: LIST
41026: PUSH
41027: LD_INT 1
41029: NEG
41030: PUSH
41031: LD_INT 1
41033: PUSH
41034: EMPTY
41035: LIST
41036: LIST
41037: PUSH
41038: LD_INT 2
41040: NEG
41041: PUSH
41042: LD_INT 1
41044: NEG
41045: PUSH
41046: EMPTY
41047: LIST
41048: LIST
41049: PUSH
41050: LD_INT 2
41052: NEG
41053: PUSH
41054: LD_INT 2
41056: NEG
41057: PUSH
41058: EMPTY
41059: LIST
41060: LIST
41061: PUSH
41062: LD_INT 2
41064: NEG
41065: PUSH
41066: LD_INT 3
41068: NEG
41069: PUSH
41070: EMPTY
41071: LIST
41072: LIST
41073: PUSH
41074: LD_INT 2
41076: PUSH
41077: LD_INT 1
41079: NEG
41080: PUSH
41081: EMPTY
41082: LIST
41083: LIST
41084: PUSH
41085: LD_INT 3
41087: PUSH
41088: LD_INT 1
41090: PUSH
41091: EMPTY
41092: LIST
41093: LIST
41094: PUSH
41095: LD_INT 1
41097: PUSH
41098: LD_INT 3
41100: PUSH
41101: EMPTY
41102: LIST
41103: LIST
41104: PUSH
41105: LD_INT 1
41107: NEG
41108: PUSH
41109: LD_INT 2
41111: PUSH
41112: EMPTY
41113: LIST
41114: LIST
41115: PUSH
41116: LD_INT 3
41118: NEG
41119: PUSH
41120: LD_INT 2
41122: NEG
41123: PUSH
41124: EMPTY
41125: LIST
41126: LIST
41127: PUSH
41128: EMPTY
41129: LIST
41130: LIST
41131: LIST
41132: LIST
41133: LIST
41134: LIST
41135: LIST
41136: LIST
41137: LIST
41138: LIST
41139: LIST
41140: LIST
41141: LIST
41142: LIST
41143: LIST
41144: LIST
41145: LIST
41146: LIST
41147: LIST
41148: LIST
41149: LIST
41150: LIST
41151: LIST
41152: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41153: LD_ADDR_VAR 0 30
41157: PUSH
41158: LD_INT 0
41160: PUSH
41161: LD_INT 0
41163: PUSH
41164: EMPTY
41165: LIST
41166: LIST
41167: PUSH
41168: LD_INT 0
41170: PUSH
41171: LD_INT 1
41173: NEG
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: PUSH
41179: LD_INT 1
41181: PUSH
41182: LD_INT 0
41184: PUSH
41185: EMPTY
41186: LIST
41187: LIST
41188: PUSH
41189: LD_INT 1
41191: PUSH
41192: LD_INT 1
41194: PUSH
41195: EMPTY
41196: LIST
41197: LIST
41198: PUSH
41199: LD_INT 0
41201: PUSH
41202: LD_INT 1
41204: PUSH
41205: EMPTY
41206: LIST
41207: LIST
41208: PUSH
41209: LD_INT 1
41211: NEG
41212: PUSH
41213: LD_INT 0
41215: PUSH
41216: EMPTY
41217: LIST
41218: LIST
41219: PUSH
41220: LD_INT 1
41222: NEG
41223: PUSH
41224: LD_INT 1
41226: NEG
41227: PUSH
41228: EMPTY
41229: LIST
41230: LIST
41231: PUSH
41232: LD_INT 1
41234: NEG
41235: PUSH
41236: LD_INT 2
41238: NEG
41239: PUSH
41240: EMPTY
41241: LIST
41242: LIST
41243: PUSH
41244: LD_INT 0
41246: PUSH
41247: LD_INT 2
41249: NEG
41250: PUSH
41251: EMPTY
41252: LIST
41253: LIST
41254: PUSH
41255: LD_INT 1
41257: PUSH
41258: LD_INT 1
41260: NEG
41261: PUSH
41262: EMPTY
41263: LIST
41264: LIST
41265: PUSH
41266: LD_INT 2
41268: PUSH
41269: LD_INT 0
41271: PUSH
41272: EMPTY
41273: LIST
41274: LIST
41275: PUSH
41276: LD_INT 2
41278: PUSH
41279: LD_INT 1
41281: PUSH
41282: EMPTY
41283: LIST
41284: LIST
41285: PUSH
41286: LD_INT 2
41288: PUSH
41289: LD_INT 2
41291: PUSH
41292: EMPTY
41293: LIST
41294: LIST
41295: PUSH
41296: LD_INT 1
41298: PUSH
41299: LD_INT 2
41301: PUSH
41302: EMPTY
41303: LIST
41304: LIST
41305: PUSH
41306: LD_INT 1
41308: NEG
41309: PUSH
41310: LD_INT 1
41312: PUSH
41313: EMPTY
41314: LIST
41315: LIST
41316: PUSH
41317: LD_INT 2
41319: NEG
41320: PUSH
41321: LD_INT 0
41323: PUSH
41324: EMPTY
41325: LIST
41326: LIST
41327: PUSH
41328: LD_INT 2
41330: NEG
41331: PUSH
41332: LD_INT 1
41334: NEG
41335: PUSH
41336: EMPTY
41337: LIST
41338: LIST
41339: PUSH
41340: LD_INT 1
41342: NEG
41343: PUSH
41344: LD_INT 3
41346: NEG
41347: PUSH
41348: EMPTY
41349: LIST
41350: LIST
41351: PUSH
41352: LD_INT 1
41354: PUSH
41355: LD_INT 2
41357: NEG
41358: PUSH
41359: EMPTY
41360: LIST
41361: LIST
41362: PUSH
41363: LD_INT 3
41365: PUSH
41366: LD_INT 2
41368: PUSH
41369: EMPTY
41370: LIST
41371: LIST
41372: PUSH
41373: LD_INT 2
41375: PUSH
41376: LD_INT 3
41378: PUSH
41379: EMPTY
41380: LIST
41381: LIST
41382: PUSH
41383: LD_INT 2
41385: NEG
41386: PUSH
41387: LD_INT 1
41389: PUSH
41390: EMPTY
41391: LIST
41392: LIST
41393: PUSH
41394: LD_INT 3
41396: NEG
41397: PUSH
41398: LD_INT 1
41400: NEG
41401: PUSH
41402: EMPTY
41403: LIST
41404: LIST
41405: PUSH
41406: EMPTY
41407: LIST
41408: LIST
41409: LIST
41410: LIST
41411: LIST
41412: LIST
41413: LIST
41414: LIST
41415: LIST
41416: LIST
41417: LIST
41418: LIST
41419: LIST
41420: LIST
41421: LIST
41422: LIST
41423: LIST
41424: LIST
41425: LIST
41426: LIST
41427: LIST
41428: LIST
41429: LIST
41430: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41431: LD_ADDR_VAR 0 31
41435: PUSH
41436: LD_INT 0
41438: PUSH
41439: LD_INT 0
41441: PUSH
41442: EMPTY
41443: LIST
41444: LIST
41445: PUSH
41446: LD_INT 0
41448: PUSH
41449: LD_INT 1
41451: NEG
41452: PUSH
41453: EMPTY
41454: LIST
41455: LIST
41456: PUSH
41457: LD_INT 1
41459: PUSH
41460: LD_INT 0
41462: PUSH
41463: EMPTY
41464: LIST
41465: LIST
41466: PUSH
41467: LD_INT 1
41469: PUSH
41470: LD_INT 1
41472: PUSH
41473: EMPTY
41474: LIST
41475: LIST
41476: PUSH
41477: LD_INT 0
41479: PUSH
41480: LD_INT 1
41482: PUSH
41483: EMPTY
41484: LIST
41485: LIST
41486: PUSH
41487: LD_INT 1
41489: NEG
41490: PUSH
41491: LD_INT 0
41493: PUSH
41494: EMPTY
41495: LIST
41496: LIST
41497: PUSH
41498: LD_INT 1
41500: NEG
41501: PUSH
41502: LD_INT 1
41504: NEG
41505: PUSH
41506: EMPTY
41507: LIST
41508: LIST
41509: PUSH
41510: LD_INT 1
41512: NEG
41513: PUSH
41514: LD_INT 2
41516: NEG
41517: PUSH
41518: EMPTY
41519: LIST
41520: LIST
41521: PUSH
41522: LD_INT 1
41524: PUSH
41525: LD_INT 1
41527: NEG
41528: PUSH
41529: EMPTY
41530: LIST
41531: LIST
41532: PUSH
41533: LD_INT 2
41535: PUSH
41536: LD_INT 0
41538: PUSH
41539: EMPTY
41540: LIST
41541: LIST
41542: PUSH
41543: LD_INT 2
41545: PUSH
41546: LD_INT 1
41548: PUSH
41549: EMPTY
41550: LIST
41551: LIST
41552: PUSH
41553: LD_INT 2
41555: PUSH
41556: LD_INT 2
41558: PUSH
41559: EMPTY
41560: LIST
41561: LIST
41562: PUSH
41563: LD_INT 1
41565: PUSH
41566: LD_INT 2
41568: PUSH
41569: EMPTY
41570: LIST
41571: LIST
41572: PUSH
41573: LD_INT 0
41575: PUSH
41576: LD_INT 2
41578: PUSH
41579: EMPTY
41580: LIST
41581: LIST
41582: PUSH
41583: LD_INT 1
41585: NEG
41586: PUSH
41587: LD_INT 1
41589: PUSH
41590: EMPTY
41591: LIST
41592: LIST
41593: PUSH
41594: LD_INT 2
41596: NEG
41597: PUSH
41598: LD_INT 1
41600: NEG
41601: PUSH
41602: EMPTY
41603: LIST
41604: LIST
41605: PUSH
41606: LD_INT 2
41608: NEG
41609: PUSH
41610: LD_INT 2
41612: NEG
41613: PUSH
41614: EMPTY
41615: LIST
41616: LIST
41617: PUSH
41618: LD_INT 2
41620: NEG
41621: PUSH
41622: LD_INT 3
41624: NEG
41625: PUSH
41626: EMPTY
41627: LIST
41628: LIST
41629: PUSH
41630: LD_INT 2
41632: PUSH
41633: LD_INT 1
41635: NEG
41636: PUSH
41637: EMPTY
41638: LIST
41639: LIST
41640: PUSH
41641: LD_INT 3
41643: PUSH
41644: LD_INT 1
41646: PUSH
41647: EMPTY
41648: LIST
41649: LIST
41650: PUSH
41651: LD_INT 1
41653: PUSH
41654: LD_INT 3
41656: PUSH
41657: EMPTY
41658: LIST
41659: LIST
41660: PUSH
41661: LD_INT 1
41663: NEG
41664: PUSH
41665: LD_INT 2
41667: PUSH
41668: EMPTY
41669: LIST
41670: LIST
41671: PUSH
41672: LD_INT 3
41674: NEG
41675: PUSH
41676: LD_INT 2
41678: NEG
41679: PUSH
41680: EMPTY
41681: LIST
41682: LIST
41683: PUSH
41684: EMPTY
41685: LIST
41686: LIST
41687: LIST
41688: LIST
41689: LIST
41690: LIST
41691: LIST
41692: LIST
41693: LIST
41694: LIST
41695: LIST
41696: LIST
41697: LIST
41698: LIST
41699: LIST
41700: LIST
41701: LIST
41702: LIST
41703: LIST
41704: LIST
41705: LIST
41706: LIST
41707: LIST
41708: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41709: LD_ADDR_VAR 0 32
41713: PUSH
41714: LD_INT 0
41716: PUSH
41717: LD_INT 0
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: LD_INT 0
41726: PUSH
41727: LD_INT 1
41729: NEG
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: PUSH
41735: LD_INT 1
41737: PUSH
41738: LD_INT 0
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: PUSH
41745: LD_INT 1
41747: PUSH
41748: LD_INT 1
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: PUSH
41755: LD_INT 0
41757: PUSH
41758: LD_INT 1
41760: PUSH
41761: EMPTY
41762: LIST
41763: LIST
41764: PUSH
41765: LD_INT 1
41767: NEG
41768: PUSH
41769: LD_INT 0
41771: PUSH
41772: EMPTY
41773: LIST
41774: LIST
41775: PUSH
41776: LD_INT 1
41778: NEG
41779: PUSH
41780: LD_INT 1
41782: NEG
41783: PUSH
41784: EMPTY
41785: LIST
41786: LIST
41787: PUSH
41788: LD_INT 1
41790: NEG
41791: PUSH
41792: LD_INT 2
41794: NEG
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: PUSH
41800: LD_INT 0
41802: PUSH
41803: LD_INT 2
41805: NEG
41806: PUSH
41807: EMPTY
41808: LIST
41809: LIST
41810: PUSH
41811: LD_INT 1
41813: PUSH
41814: LD_INT 1
41816: NEG
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: PUSH
41822: LD_INT 2
41824: PUSH
41825: LD_INT 1
41827: PUSH
41828: EMPTY
41829: LIST
41830: LIST
41831: PUSH
41832: LD_INT 2
41834: PUSH
41835: LD_INT 2
41837: PUSH
41838: EMPTY
41839: LIST
41840: LIST
41841: PUSH
41842: LD_INT 1
41844: PUSH
41845: LD_INT 2
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: PUSH
41852: LD_INT 0
41854: PUSH
41855: LD_INT 2
41857: PUSH
41858: EMPTY
41859: LIST
41860: LIST
41861: PUSH
41862: LD_INT 1
41864: NEG
41865: PUSH
41866: LD_INT 1
41868: PUSH
41869: EMPTY
41870: LIST
41871: LIST
41872: PUSH
41873: LD_INT 2
41875: NEG
41876: PUSH
41877: LD_INT 0
41879: PUSH
41880: EMPTY
41881: LIST
41882: LIST
41883: PUSH
41884: LD_INT 2
41886: NEG
41887: PUSH
41888: LD_INT 1
41890: NEG
41891: PUSH
41892: EMPTY
41893: LIST
41894: LIST
41895: PUSH
41896: LD_INT 1
41898: NEG
41899: PUSH
41900: LD_INT 3
41902: NEG
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: PUSH
41908: LD_INT 1
41910: PUSH
41911: LD_INT 2
41913: NEG
41914: PUSH
41915: EMPTY
41916: LIST
41917: LIST
41918: PUSH
41919: LD_INT 3
41921: PUSH
41922: LD_INT 2
41924: PUSH
41925: EMPTY
41926: LIST
41927: LIST
41928: PUSH
41929: LD_INT 2
41931: PUSH
41932: LD_INT 3
41934: PUSH
41935: EMPTY
41936: LIST
41937: LIST
41938: PUSH
41939: LD_INT 2
41941: NEG
41942: PUSH
41943: LD_INT 1
41945: PUSH
41946: EMPTY
41947: LIST
41948: LIST
41949: PUSH
41950: LD_INT 3
41952: NEG
41953: PUSH
41954: LD_INT 1
41956: NEG
41957: PUSH
41958: EMPTY
41959: LIST
41960: LIST
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: LIST
41966: LIST
41967: LIST
41968: LIST
41969: LIST
41970: LIST
41971: LIST
41972: LIST
41973: LIST
41974: LIST
41975: LIST
41976: LIST
41977: LIST
41978: LIST
41979: LIST
41980: LIST
41981: LIST
41982: LIST
41983: LIST
41984: LIST
41985: LIST
41986: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41987: LD_ADDR_VAR 0 33
41991: PUSH
41992: LD_INT 0
41994: PUSH
41995: LD_INT 0
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: PUSH
42002: LD_INT 0
42004: PUSH
42005: LD_INT 1
42007: NEG
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: PUSH
42013: LD_INT 1
42015: PUSH
42016: LD_INT 0
42018: PUSH
42019: EMPTY
42020: LIST
42021: LIST
42022: PUSH
42023: LD_INT 1
42025: PUSH
42026: LD_INT 1
42028: PUSH
42029: EMPTY
42030: LIST
42031: LIST
42032: PUSH
42033: LD_INT 0
42035: PUSH
42036: LD_INT 1
42038: PUSH
42039: EMPTY
42040: LIST
42041: LIST
42042: PUSH
42043: LD_INT 1
42045: NEG
42046: PUSH
42047: LD_INT 0
42049: PUSH
42050: EMPTY
42051: LIST
42052: LIST
42053: PUSH
42054: LD_INT 1
42056: NEG
42057: PUSH
42058: LD_INT 1
42060: NEG
42061: PUSH
42062: EMPTY
42063: LIST
42064: LIST
42065: PUSH
42066: LD_INT 1
42068: NEG
42069: PUSH
42070: LD_INT 2
42072: NEG
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: PUSH
42078: LD_INT 1
42080: PUSH
42081: LD_INT 1
42083: NEG
42084: PUSH
42085: EMPTY
42086: LIST
42087: LIST
42088: PUSH
42089: LD_INT 2
42091: PUSH
42092: LD_INT 0
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: PUSH
42099: LD_INT 2
42101: PUSH
42102: LD_INT 1
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: PUSH
42109: LD_INT 1
42111: PUSH
42112: LD_INT 2
42114: PUSH
42115: EMPTY
42116: LIST
42117: LIST
42118: PUSH
42119: LD_INT 0
42121: PUSH
42122: LD_INT 2
42124: PUSH
42125: EMPTY
42126: LIST
42127: LIST
42128: PUSH
42129: LD_INT 1
42131: NEG
42132: PUSH
42133: LD_INT 1
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: PUSH
42140: LD_INT 2
42142: NEG
42143: PUSH
42144: LD_INT 0
42146: PUSH
42147: EMPTY
42148: LIST
42149: LIST
42150: PUSH
42151: LD_INT 2
42153: NEG
42154: PUSH
42155: LD_INT 1
42157: NEG
42158: PUSH
42159: EMPTY
42160: LIST
42161: LIST
42162: PUSH
42163: LD_INT 2
42165: NEG
42166: PUSH
42167: LD_INT 2
42169: NEG
42170: PUSH
42171: EMPTY
42172: LIST
42173: LIST
42174: PUSH
42175: LD_INT 2
42177: NEG
42178: PUSH
42179: LD_INT 3
42181: NEG
42182: PUSH
42183: EMPTY
42184: LIST
42185: LIST
42186: PUSH
42187: LD_INT 2
42189: PUSH
42190: LD_INT 1
42192: NEG
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: PUSH
42198: LD_INT 3
42200: PUSH
42201: LD_INT 1
42203: PUSH
42204: EMPTY
42205: LIST
42206: LIST
42207: PUSH
42208: LD_INT 1
42210: PUSH
42211: LD_INT 3
42213: PUSH
42214: EMPTY
42215: LIST
42216: LIST
42217: PUSH
42218: LD_INT 1
42220: NEG
42221: PUSH
42222: LD_INT 2
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: PUSH
42229: LD_INT 3
42231: NEG
42232: PUSH
42233: LD_INT 2
42235: NEG
42236: PUSH
42237: EMPTY
42238: LIST
42239: LIST
42240: PUSH
42241: EMPTY
42242: LIST
42243: LIST
42244: LIST
42245: LIST
42246: LIST
42247: LIST
42248: LIST
42249: LIST
42250: LIST
42251: LIST
42252: LIST
42253: LIST
42254: LIST
42255: LIST
42256: LIST
42257: LIST
42258: LIST
42259: LIST
42260: LIST
42261: LIST
42262: LIST
42263: LIST
42264: LIST
42265: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42266: LD_ADDR_VAR 0 34
42270: PUSH
42271: LD_INT 0
42273: PUSH
42274: LD_INT 0
42276: PUSH
42277: EMPTY
42278: LIST
42279: LIST
42280: PUSH
42281: LD_INT 0
42283: PUSH
42284: LD_INT 1
42286: NEG
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PUSH
42292: LD_INT 1
42294: PUSH
42295: LD_INT 0
42297: PUSH
42298: EMPTY
42299: LIST
42300: LIST
42301: PUSH
42302: LD_INT 1
42304: PUSH
42305: LD_INT 1
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: PUSH
42312: LD_INT 0
42314: PUSH
42315: LD_INT 1
42317: PUSH
42318: EMPTY
42319: LIST
42320: LIST
42321: PUSH
42322: LD_INT 1
42324: NEG
42325: PUSH
42326: LD_INT 0
42328: PUSH
42329: EMPTY
42330: LIST
42331: LIST
42332: PUSH
42333: LD_INT 1
42335: NEG
42336: PUSH
42337: LD_INT 1
42339: NEG
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: PUSH
42345: LD_INT 1
42347: NEG
42348: PUSH
42349: LD_INT 2
42351: NEG
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: PUSH
42357: LD_INT 0
42359: PUSH
42360: LD_INT 2
42362: NEG
42363: PUSH
42364: EMPTY
42365: LIST
42366: LIST
42367: PUSH
42368: LD_INT 1
42370: PUSH
42371: LD_INT 1
42373: NEG
42374: PUSH
42375: EMPTY
42376: LIST
42377: LIST
42378: PUSH
42379: LD_INT 2
42381: PUSH
42382: LD_INT 1
42384: PUSH
42385: EMPTY
42386: LIST
42387: LIST
42388: PUSH
42389: LD_INT 2
42391: PUSH
42392: LD_INT 2
42394: PUSH
42395: EMPTY
42396: LIST
42397: LIST
42398: PUSH
42399: LD_INT 1
42401: PUSH
42402: LD_INT 2
42404: PUSH
42405: EMPTY
42406: LIST
42407: LIST
42408: PUSH
42409: LD_INT 1
42411: NEG
42412: PUSH
42413: LD_INT 1
42415: PUSH
42416: EMPTY
42417: LIST
42418: LIST
42419: PUSH
42420: LD_INT 2
42422: NEG
42423: PUSH
42424: LD_INT 0
42426: PUSH
42427: EMPTY
42428: LIST
42429: LIST
42430: PUSH
42431: LD_INT 2
42433: NEG
42434: PUSH
42435: LD_INT 1
42437: NEG
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: PUSH
42443: LD_INT 2
42445: NEG
42446: PUSH
42447: LD_INT 2
42449: NEG
42450: PUSH
42451: EMPTY
42452: LIST
42453: LIST
42454: PUSH
42455: LD_INT 1
42457: NEG
42458: PUSH
42459: LD_INT 3
42461: NEG
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: PUSH
42467: LD_INT 1
42469: PUSH
42470: LD_INT 2
42472: NEG
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: PUSH
42478: LD_INT 3
42480: PUSH
42481: LD_INT 2
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: PUSH
42488: LD_INT 2
42490: PUSH
42491: LD_INT 3
42493: PUSH
42494: EMPTY
42495: LIST
42496: LIST
42497: PUSH
42498: LD_INT 2
42500: NEG
42501: PUSH
42502: LD_INT 1
42504: PUSH
42505: EMPTY
42506: LIST
42507: LIST
42508: PUSH
42509: LD_INT 3
42511: NEG
42512: PUSH
42513: LD_INT 1
42515: NEG
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: PUSH
42521: EMPTY
42522: LIST
42523: LIST
42524: LIST
42525: LIST
42526: LIST
42527: LIST
42528: LIST
42529: LIST
42530: LIST
42531: LIST
42532: LIST
42533: LIST
42534: LIST
42535: LIST
42536: LIST
42537: LIST
42538: LIST
42539: LIST
42540: LIST
42541: LIST
42542: LIST
42543: LIST
42544: LIST
42545: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42546: LD_ADDR_VAR 0 35
42550: PUSH
42551: LD_INT 0
42553: PUSH
42554: LD_INT 0
42556: PUSH
42557: EMPTY
42558: LIST
42559: LIST
42560: PUSH
42561: LD_INT 0
42563: PUSH
42564: LD_INT 1
42566: NEG
42567: PUSH
42568: EMPTY
42569: LIST
42570: LIST
42571: PUSH
42572: LD_INT 1
42574: PUSH
42575: LD_INT 0
42577: PUSH
42578: EMPTY
42579: LIST
42580: LIST
42581: PUSH
42582: LD_INT 1
42584: PUSH
42585: LD_INT 1
42587: PUSH
42588: EMPTY
42589: LIST
42590: LIST
42591: PUSH
42592: LD_INT 0
42594: PUSH
42595: LD_INT 1
42597: PUSH
42598: EMPTY
42599: LIST
42600: LIST
42601: PUSH
42602: LD_INT 1
42604: NEG
42605: PUSH
42606: LD_INT 0
42608: PUSH
42609: EMPTY
42610: LIST
42611: LIST
42612: PUSH
42613: LD_INT 1
42615: NEG
42616: PUSH
42617: LD_INT 1
42619: NEG
42620: PUSH
42621: EMPTY
42622: LIST
42623: LIST
42624: PUSH
42625: LD_INT 2
42627: PUSH
42628: LD_INT 1
42630: PUSH
42631: EMPTY
42632: LIST
42633: LIST
42634: PUSH
42635: LD_INT 2
42637: NEG
42638: PUSH
42639: LD_INT 1
42641: NEG
42642: PUSH
42643: EMPTY
42644: LIST
42645: LIST
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: LIST
42651: LIST
42652: LIST
42653: LIST
42654: LIST
42655: LIST
42656: LIST
42657: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42658: LD_ADDR_VAR 0 36
42662: PUSH
42663: LD_INT 0
42665: PUSH
42666: LD_INT 0
42668: PUSH
42669: EMPTY
42670: LIST
42671: LIST
42672: PUSH
42673: LD_INT 0
42675: PUSH
42676: LD_INT 1
42678: NEG
42679: PUSH
42680: EMPTY
42681: LIST
42682: LIST
42683: PUSH
42684: LD_INT 1
42686: PUSH
42687: LD_INT 0
42689: PUSH
42690: EMPTY
42691: LIST
42692: LIST
42693: PUSH
42694: LD_INT 1
42696: PUSH
42697: LD_INT 1
42699: PUSH
42700: EMPTY
42701: LIST
42702: LIST
42703: PUSH
42704: LD_INT 0
42706: PUSH
42707: LD_INT 1
42709: PUSH
42710: EMPTY
42711: LIST
42712: LIST
42713: PUSH
42714: LD_INT 1
42716: NEG
42717: PUSH
42718: LD_INT 0
42720: PUSH
42721: EMPTY
42722: LIST
42723: LIST
42724: PUSH
42725: LD_INT 1
42727: NEG
42728: PUSH
42729: LD_INT 1
42731: NEG
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: PUSH
42737: LD_INT 1
42739: NEG
42740: PUSH
42741: LD_INT 2
42743: NEG
42744: PUSH
42745: EMPTY
42746: LIST
42747: LIST
42748: PUSH
42749: LD_INT 1
42751: PUSH
42752: LD_INT 2
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: PUSH
42759: EMPTY
42760: LIST
42761: LIST
42762: LIST
42763: LIST
42764: LIST
42765: LIST
42766: LIST
42767: LIST
42768: LIST
42769: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42770: LD_ADDR_VAR 0 37
42774: PUSH
42775: LD_INT 0
42777: PUSH
42778: LD_INT 0
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: PUSH
42785: LD_INT 0
42787: PUSH
42788: LD_INT 1
42790: NEG
42791: PUSH
42792: EMPTY
42793: LIST
42794: LIST
42795: PUSH
42796: LD_INT 1
42798: PUSH
42799: LD_INT 0
42801: PUSH
42802: EMPTY
42803: LIST
42804: LIST
42805: PUSH
42806: LD_INT 1
42808: PUSH
42809: LD_INT 1
42811: PUSH
42812: EMPTY
42813: LIST
42814: LIST
42815: PUSH
42816: LD_INT 0
42818: PUSH
42819: LD_INT 1
42821: PUSH
42822: EMPTY
42823: LIST
42824: LIST
42825: PUSH
42826: LD_INT 1
42828: NEG
42829: PUSH
42830: LD_INT 0
42832: PUSH
42833: EMPTY
42834: LIST
42835: LIST
42836: PUSH
42837: LD_INT 1
42839: NEG
42840: PUSH
42841: LD_INT 1
42843: NEG
42844: PUSH
42845: EMPTY
42846: LIST
42847: LIST
42848: PUSH
42849: LD_INT 1
42851: PUSH
42852: LD_INT 1
42854: NEG
42855: PUSH
42856: EMPTY
42857: LIST
42858: LIST
42859: PUSH
42860: LD_INT 1
42862: NEG
42863: PUSH
42864: LD_INT 1
42866: PUSH
42867: EMPTY
42868: LIST
42869: LIST
42870: PUSH
42871: EMPTY
42872: LIST
42873: LIST
42874: LIST
42875: LIST
42876: LIST
42877: LIST
42878: LIST
42879: LIST
42880: LIST
42881: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42882: LD_ADDR_VAR 0 38
42886: PUSH
42887: LD_INT 0
42889: PUSH
42890: LD_INT 0
42892: PUSH
42893: EMPTY
42894: LIST
42895: LIST
42896: PUSH
42897: LD_INT 0
42899: PUSH
42900: LD_INT 1
42902: NEG
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: PUSH
42908: LD_INT 1
42910: PUSH
42911: LD_INT 0
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: PUSH
42918: LD_INT 1
42920: PUSH
42921: LD_INT 1
42923: PUSH
42924: EMPTY
42925: LIST
42926: LIST
42927: PUSH
42928: LD_INT 0
42930: PUSH
42931: LD_INT 1
42933: PUSH
42934: EMPTY
42935: LIST
42936: LIST
42937: PUSH
42938: LD_INT 1
42940: NEG
42941: PUSH
42942: LD_INT 0
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: PUSH
42949: LD_INT 1
42951: NEG
42952: PUSH
42953: LD_INT 1
42955: NEG
42956: PUSH
42957: EMPTY
42958: LIST
42959: LIST
42960: PUSH
42961: LD_INT 2
42963: PUSH
42964: LD_INT 1
42966: PUSH
42967: EMPTY
42968: LIST
42969: LIST
42970: PUSH
42971: LD_INT 2
42973: NEG
42974: PUSH
42975: LD_INT 1
42977: NEG
42978: PUSH
42979: EMPTY
42980: LIST
42981: LIST
42982: PUSH
42983: EMPTY
42984: LIST
42985: LIST
42986: LIST
42987: LIST
42988: LIST
42989: LIST
42990: LIST
42991: LIST
42992: LIST
42993: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42994: LD_ADDR_VAR 0 39
42998: PUSH
42999: LD_INT 0
43001: PUSH
43002: LD_INT 0
43004: PUSH
43005: EMPTY
43006: LIST
43007: LIST
43008: PUSH
43009: LD_INT 0
43011: PUSH
43012: LD_INT 1
43014: NEG
43015: PUSH
43016: EMPTY
43017: LIST
43018: LIST
43019: PUSH
43020: LD_INT 1
43022: PUSH
43023: LD_INT 0
43025: PUSH
43026: EMPTY
43027: LIST
43028: LIST
43029: PUSH
43030: LD_INT 1
43032: PUSH
43033: LD_INT 1
43035: PUSH
43036: EMPTY
43037: LIST
43038: LIST
43039: PUSH
43040: LD_INT 0
43042: PUSH
43043: LD_INT 1
43045: PUSH
43046: EMPTY
43047: LIST
43048: LIST
43049: PUSH
43050: LD_INT 1
43052: NEG
43053: PUSH
43054: LD_INT 0
43056: PUSH
43057: EMPTY
43058: LIST
43059: LIST
43060: PUSH
43061: LD_INT 1
43063: NEG
43064: PUSH
43065: LD_INT 1
43067: NEG
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: PUSH
43073: LD_INT 1
43075: NEG
43076: PUSH
43077: LD_INT 2
43079: NEG
43080: PUSH
43081: EMPTY
43082: LIST
43083: LIST
43084: PUSH
43085: LD_INT 1
43087: PUSH
43088: LD_INT 2
43090: PUSH
43091: EMPTY
43092: LIST
43093: LIST
43094: PUSH
43095: EMPTY
43096: LIST
43097: LIST
43098: LIST
43099: LIST
43100: LIST
43101: LIST
43102: LIST
43103: LIST
43104: LIST
43105: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
43106: LD_ADDR_VAR 0 40
43110: PUSH
43111: LD_INT 0
43113: PUSH
43114: LD_INT 0
43116: PUSH
43117: EMPTY
43118: LIST
43119: LIST
43120: PUSH
43121: LD_INT 0
43123: PUSH
43124: LD_INT 1
43126: NEG
43127: PUSH
43128: EMPTY
43129: LIST
43130: LIST
43131: PUSH
43132: LD_INT 1
43134: PUSH
43135: LD_INT 0
43137: PUSH
43138: EMPTY
43139: LIST
43140: LIST
43141: PUSH
43142: LD_INT 1
43144: PUSH
43145: LD_INT 1
43147: PUSH
43148: EMPTY
43149: LIST
43150: LIST
43151: PUSH
43152: LD_INT 0
43154: PUSH
43155: LD_INT 1
43157: PUSH
43158: EMPTY
43159: LIST
43160: LIST
43161: PUSH
43162: LD_INT 1
43164: NEG
43165: PUSH
43166: LD_INT 0
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: PUSH
43173: LD_INT 1
43175: NEG
43176: PUSH
43177: LD_INT 1
43179: NEG
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: PUSH
43185: LD_INT 1
43187: PUSH
43188: LD_INT 1
43190: NEG
43191: PUSH
43192: EMPTY
43193: LIST
43194: LIST
43195: PUSH
43196: LD_INT 1
43198: NEG
43199: PUSH
43200: LD_INT 1
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PUSH
43207: EMPTY
43208: LIST
43209: LIST
43210: LIST
43211: LIST
43212: LIST
43213: LIST
43214: LIST
43215: LIST
43216: LIST
43217: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43218: LD_ADDR_VAR 0 41
43222: PUSH
43223: LD_INT 0
43225: PUSH
43226: LD_INT 0
43228: PUSH
43229: EMPTY
43230: LIST
43231: LIST
43232: PUSH
43233: LD_INT 0
43235: PUSH
43236: LD_INT 1
43238: NEG
43239: PUSH
43240: EMPTY
43241: LIST
43242: LIST
43243: PUSH
43244: LD_INT 1
43246: PUSH
43247: LD_INT 0
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: PUSH
43254: LD_INT 1
43256: PUSH
43257: LD_INT 1
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: PUSH
43264: LD_INT 0
43266: PUSH
43267: LD_INT 1
43269: PUSH
43270: EMPTY
43271: LIST
43272: LIST
43273: PUSH
43274: LD_INT 1
43276: NEG
43277: PUSH
43278: LD_INT 0
43280: PUSH
43281: EMPTY
43282: LIST
43283: LIST
43284: PUSH
43285: LD_INT 1
43287: NEG
43288: PUSH
43289: LD_INT 1
43291: NEG
43292: PUSH
43293: EMPTY
43294: LIST
43295: LIST
43296: PUSH
43297: LD_INT 1
43299: NEG
43300: PUSH
43301: LD_INT 2
43303: NEG
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: PUSH
43309: LD_INT 1
43311: PUSH
43312: LD_INT 1
43314: NEG
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PUSH
43320: LD_INT 2
43322: PUSH
43323: LD_INT 0
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: PUSH
43330: LD_INT 2
43332: PUSH
43333: LD_INT 1
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: PUSH
43340: LD_INT 2
43342: PUSH
43343: LD_INT 2
43345: PUSH
43346: EMPTY
43347: LIST
43348: LIST
43349: PUSH
43350: LD_INT 1
43352: PUSH
43353: LD_INT 2
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: PUSH
43360: LD_INT 1
43362: NEG
43363: PUSH
43364: LD_INT 1
43366: PUSH
43367: EMPTY
43368: LIST
43369: LIST
43370: PUSH
43371: LD_INT 2
43373: NEG
43374: PUSH
43375: LD_INT 0
43377: PUSH
43378: EMPTY
43379: LIST
43380: LIST
43381: PUSH
43382: LD_INT 2
43384: NEG
43385: PUSH
43386: LD_INT 1
43388: NEG
43389: PUSH
43390: EMPTY
43391: LIST
43392: LIST
43393: PUSH
43394: LD_INT 2
43396: NEG
43397: PUSH
43398: LD_INT 2
43400: NEG
43401: PUSH
43402: EMPTY
43403: LIST
43404: LIST
43405: PUSH
43406: LD_INT 2
43408: NEG
43409: PUSH
43410: LD_INT 3
43412: NEG
43413: PUSH
43414: EMPTY
43415: LIST
43416: LIST
43417: PUSH
43418: LD_INT 2
43420: PUSH
43421: LD_INT 1
43423: NEG
43424: PUSH
43425: EMPTY
43426: LIST
43427: LIST
43428: PUSH
43429: LD_INT 3
43431: PUSH
43432: LD_INT 0
43434: PUSH
43435: EMPTY
43436: LIST
43437: LIST
43438: PUSH
43439: LD_INT 3
43441: PUSH
43442: LD_INT 1
43444: PUSH
43445: EMPTY
43446: LIST
43447: LIST
43448: PUSH
43449: LD_INT 3
43451: PUSH
43452: LD_INT 2
43454: PUSH
43455: EMPTY
43456: LIST
43457: LIST
43458: PUSH
43459: LD_INT 3
43461: PUSH
43462: LD_INT 3
43464: PUSH
43465: EMPTY
43466: LIST
43467: LIST
43468: PUSH
43469: LD_INT 2
43471: PUSH
43472: LD_INT 3
43474: PUSH
43475: EMPTY
43476: LIST
43477: LIST
43478: PUSH
43479: LD_INT 2
43481: NEG
43482: PUSH
43483: LD_INT 1
43485: PUSH
43486: EMPTY
43487: LIST
43488: LIST
43489: PUSH
43490: LD_INT 3
43492: NEG
43493: PUSH
43494: LD_INT 0
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: PUSH
43501: LD_INT 3
43503: NEG
43504: PUSH
43505: LD_INT 1
43507: NEG
43508: PUSH
43509: EMPTY
43510: LIST
43511: LIST
43512: PUSH
43513: LD_INT 3
43515: NEG
43516: PUSH
43517: LD_INT 2
43519: NEG
43520: PUSH
43521: EMPTY
43522: LIST
43523: LIST
43524: PUSH
43525: LD_INT 3
43527: NEG
43528: PUSH
43529: LD_INT 3
43531: NEG
43532: PUSH
43533: EMPTY
43534: LIST
43535: LIST
43536: PUSH
43537: EMPTY
43538: LIST
43539: LIST
43540: LIST
43541: LIST
43542: LIST
43543: LIST
43544: LIST
43545: LIST
43546: LIST
43547: LIST
43548: LIST
43549: LIST
43550: LIST
43551: LIST
43552: LIST
43553: LIST
43554: LIST
43555: LIST
43556: LIST
43557: LIST
43558: LIST
43559: LIST
43560: LIST
43561: LIST
43562: LIST
43563: LIST
43564: LIST
43565: LIST
43566: LIST
43567: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43568: LD_ADDR_VAR 0 42
43572: PUSH
43573: LD_INT 0
43575: PUSH
43576: LD_INT 0
43578: PUSH
43579: EMPTY
43580: LIST
43581: LIST
43582: PUSH
43583: LD_INT 0
43585: PUSH
43586: LD_INT 1
43588: NEG
43589: PUSH
43590: EMPTY
43591: LIST
43592: LIST
43593: PUSH
43594: LD_INT 1
43596: PUSH
43597: LD_INT 0
43599: PUSH
43600: EMPTY
43601: LIST
43602: LIST
43603: PUSH
43604: LD_INT 1
43606: PUSH
43607: LD_INT 1
43609: PUSH
43610: EMPTY
43611: LIST
43612: LIST
43613: PUSH
43614: LD_INT 0
43616: PUSH
43617: LD_INT 1
43619: PUSH
43620: EMPTY
43621: LIST
43622: LIST
43623: PUSH
43624: LD_INT 1
43626: NEG
43627: PUSH
43628: LD_INT 0
43630: PUSH
43631: EMPTY
43632: LIST
43633: LIST
43634: PUSH
43635: LD_INT 1
43637: NEG
43638: PUSH
43639: LD_INT 1
43641: NEG
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: PUSH
43647: LD_INT 1
43649: NEG
43650: PUSH
43651: LD_INT 2
43653: NEG
43654: PUSH
43655: EMPTY
43656: LIST
43657: LIST
43658: PUSH
43659: LD_INT 0
43661: PUSH
43662: LD_INT 2
43664: NEG
43665: PUSH
43666: EMPTY
43667: LIST
43668: LIST
43669: PUSH
43670: LD_INT 1
43672: PUSH
43673: LD_INT 1
43675: NEG
43676: PUSH
43677: EMPTY
43678: LIST
43679: LIST
43680: PUSH
43681: LD_INT 2
43683: PUSH
43684: LD_INT 1
43686: PUSH
43687: EMPTY
43688: LIST
43689: LIST
43690: PUSH
43691: LD_INT 2
43693: PUSH
43694: LD_INT 2
43696: PUSH
43697: EMPTY
43698: LIST
43699: LIST
43700: PUSH
43701: LD_INT 1
43703: PUSH
43704: LD_INT 2
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: PUSH
43711: LD_INT 0
43713: PUSH
43714: LD_INT 2
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: PUSH
43721: LD_INT 1
43723: NEG
43724: PUSH
43725: LD_INT 1
43727: PUSH
43728: EMPTY
43729: LIST
43730: LIST
43731: PUSH
43732: LD_INT 2
43734: NEG
43735: PUSH
43736: LD_INT 1
43738: NEG
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: PUSH
43744: LD_INT 2
43746: NEG
43747: PUSH
43748: LD_INT 2
43750: NEG
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: PUSH
43756: LD_INT 2
43758: NEG
43759: PUSH
43760: LD_INT 3
43762: NEG
43763: PUSH
43764: EMPTY
43765: LIST
43766: LIST
43767: PUSH
43768: LD_INT 1
43770: NEG
43771: PUSH
43772: LD_INT 3
43774: NEG
43775: PUSH
43776: EMPTY
43777: LIST
43778: LIST
43779: PUSH
43780: LD_INT 0
43782: PUSH
43783: LD_INT 3
43785: NEG
43786: PUSH
43787: EMPTY
43788: LIST
43789: LIST
43790: PUSH
43791: LD_INT 1
43793: PUSH
43794: LD_INT 2
43796: NEG
43797: PUSH
43798: EMPTY
43799: LIST
43800: LIST
43801: PUSH
43802: LD_INT 3
43804: PUSH
43805: LD_INT 2
43807: PUSH
43808: EMPTY
43809: LIST
43810: LIST
43811: PUSH
43812: LD_INT 3
43814: PUSH
43815: LD_INT 3
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: PUSH
43822: LD_INT 2
43824: PUSH
43825: LD_INT 3
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: PUSH
43832: LD_INT 1
43834: PUSH
43835: LD_INT 3
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: PUSH
43842: LD_INT 0
43844: PUSH
43845: LD_INT 3
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: PUSH
43852: LD_INT 1
43854: NEG
43855: PUSH
43856: LD_INT 2
43858: PUSH
43859: EMPTY
43860: LIST
43861: LIST
43862: PUSH
43863: LD_INT 3
43865: NEG
43866: PUSH
43867: LD_INT 2
43869: NEG
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: PUSH
43875: LD_INT 3
43877: NEG
43878: PUSH
43879: LD_INT 3
43881: NEG
43882: PUSH
43883: EMPTY
43884: LIST
43885: LIST
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: LIST
43891: LIST
43892: LIST
43893: LIST
43894: LIST
43895: LIST
43896: LIST
43897: LIST
43898: LIST
43899: LIST
43900: LIST
43901: LIST
43902: LIST
43903: LIST
43904: LIST
43905: LIST
43906: LIST
43907: LIST
43908: LIST
43909: LIST
43910: LIST
43911: LIST
43912: LIST
43913: LIST
43914: LIST
43915: LIST
43916: LIST
43917: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43918: LD_ADDR_VAR 0 43
43922: PUSH
43923: LD_INT 0
43925: PUSH
43926: LD_INT 0
43928: PUSH
43929: EMPTY
43930: LIST
43931: LIST
43932: PUSH
43933: LD_INT 0
43935: PUSH
43936: LD_INT 1
43938: NEG
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: PUSH
43944: LD_INT 1
43946: PUSH
43947: LD_INT 0
43949: PUSH
43950: EMPTY
43951: LIST
43952: LIST
43953: PUSH
43954: LD_INT 1
43956: PUSH
43957: LD_INT 1
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: PUSH
43964: LD_INT 0
43966: PUSH
43967: LD_INT 1
43969: PUSH
43970: EMPTY
43971: LIST
43972: LIST
43973: PUSH
43974: LD_INT 1
43976: NEG
43977: PUSH
43978: LD_INT 0
43980: PUSH
43981: EMPTY
43982: LIST
43983: LIST
43984: PUSH
43985: LD_INT 1
43987: NEG
43988: PUSH
43989: LD_INT 1
43991: NEG
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: PUSH
43997: LD_INT 1
43999: NEG
44000: PUSH
44001: LD_INT 2
44003: NEG
44004: PUSH
44005: EMPTY
44006: LIST
44007: LIST
44008: PUSH
44009: LD_INT 0
44011: PUSH
44012: LD_INT 2
44014: NEG
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: PUSH
44020: LD_INT 1
44022: PUSH
44023: LD_INT 1
44025: NEG
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: PUSH
44031: LD_INT 2
44033: PUSH
44034: LD_INT 0
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: PUSH
44041: LD_INT 2
44043: PUSH
44044: LD_INT 1
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: PUSH
44051: LD_INT 1
44053: PUSH
44054: LD_INT 2
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: PUSH
44061: LD_INT 0
44063: PUSH
44064: LD_INT 2
44066: PUSH
44067: EMPTY
44068: LIST
44069: LIST
44070: PUSH
44071: LD_INT 1
44073: NEG
44074: PUSH
44075: LD_INT 1
44077: PUSH
44078: EMPTY
44079: LIST
44080: LIST
44081: PUSH
44082: LD_INT 2
44084: NEG
44085: PUSH
44086: LD_INT 0
44088: PUSH
44089: EMPTY
44090: LIST
44091: LIST
44092: PUSH
44093: LD_INT 2
44095: NEG
44096: PUSH
44097: LD_INT 1
44099: NEG
44100: PUSH
44101: EMPTY
44102: LIST
44103: LIST
44104: PUSH
44105: LD_INT 1
44107: NEG
44108: PUSH
44109: LD_INT 3
44111: NEG
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: PUSH
44117: LD_INT 0
44119: PUSH
44120: LD_INT 3
44122: NEG
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: PUSH
44128: LD_INT 1
44130: PUSH
44131: LD_INT 2
44133: NEG
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: PUSH
44139: LD_INT 2
44141: PUSH
44142: LD_INT 1
44144: NEG
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: PUSH
44150: LD_INT 3
44152: PUSH
44153: LD_INT 0
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: PUSH
44160: LD_INT 3
44162: PUSH
44163: LD_INT 1
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: PUSH
44170: LD_INT 1
44172: PUSH
44173: LD_INT 3
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: PUSH
44180: LD_INT 0
44182: PUSH
44183: LD_INT 3
44185: PUSH
44186: EMPTY
44187: LIST
44188: LIST
44189: PUSH
44190: LD_INT 1
44192: NEG
44193: PUSH
44194: LD_INT 2
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: PUSH
44201: LD_INT 2
44203: NEG
44204: PUSH
44205: LD_INT 1
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: PUSH
44212: LD_INT 3
44214: NEG
44215: PUSH
44216: LD_INT 0
44218: PUSH
44219: EMPTY
44220: LIST
44221: LIST
44222: PUSH
44223: LD_INT 3
44225: NEG
44226: PUSH
44227: LD_INT 1
44229: NEG
44230: PUSH
44231: EMPTY
44232: LIST
44233: LIST
44234: PUSH
44235: EMPTY
44236: LIST
44237: LIST
44238: LIST
44239: LIST
44240: LIST
44241: LIST
44242: LIST
44243: LIST
44244: LIST
44245: LIST
44246: LIST
44247: LIST
44248: LIST
44249: LIST
44250: LIST
44251: LIST
44252: LIST
44253: LIST
44254: LIST
44255: LIST
44256: LIST
44257: LIST
44258: LIST
44259: LIST
44260: LIST
44261: LIST
44262: LIST
44263: LIST
44264: LIST
44265: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44266: LD_ADDR_VAR 0 44
44270: PUSH
44271: LD_INT 0
44273: PUSH
44274: LD_INT 0
44276: PUSH
44277: EMPTY
44278: LIST
44279: LIST
44280: PUSH
44281: LD_INT 0
44283: PUSH
44284: LD_INT 1
44286: NEG
44287: PUSH
44288: EMPTY
44289: LIST
44290: LIST
44291: PUSH
44292: LD_INT 1
44294: PUSH
44295: LD_INT 0
44297: PUSH
44298: EMPTY
44299: LIST
44300: LIST
44301: PUSH
44302: LD_INT 1
44304: PUSH
44305: LD_INT 1
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: PUSH
44312: LD_INT 0
44314: PUSH
44315: LD_INT 1
44317: PUSH
44318: EMPTY
44319: LIST
44320: LIST
44321: PUSH
44322: LD_INT 1
44324: NEG
44325: PUSH
44326: LD_INT 0
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: PUSH
44333: LD_INT 1
44335: NEG
44336: PUSH
44337: LD_INT 1
44339: NEG
44340: PUSH
44341: EMPTY
44342: LIST
44343: LIST
44344: PUSH
44345: LD_INT 1
44347: NEG
44348: PUSH
44349: LD_INT 2
44351: NEG
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: PUSH
44357: LD_INT 1
44359: PUSH
44360: LD_INT 1
44362: NEG
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: PUSH
44368: LD_INT 2
44370: PUSH
44371: LD_INT 0
44373: PUSH
44374: EMPTY
44375: LIST
44376: LIST
44377: PUSH
44378: LD_INT 2
44380: PUSH
44381: LD_INT 1
44383: PUSH
44384: EMPTY
44385: LIST
44386: LIST
44387: PUSH
44388: LD_INT 2
44390: PUSH
44391: LD_INT 2
44393: PUSH
44394: EMPTY
44395: LIST
44396: LIST
44397: PUSH
44398: LD_INT 1
44400: PUSH
44401: LD_INT 2
44403: PUSH
44404: EMPTY
44405: LIST
44406: LIST
44407: PUSH
44408: LD_INT 1
44410: NEG
44411: PUSH
44412: LD_INT 1
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: PUSH
44419: LD_INT 2
44421: NEG
44422: PUSH
44423: LD_INT 0
44425: PUSH
44426: EMPTY
44427: LIST
44428: LIST
44429: PUSH
44430: LD_INT 2
44432: NEG
44433: PUSH
44434: LD_INT 1
44436: NEG
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PUSH
44442: LD_INT 2
44444: NEG
44445: PUSH
44446: LD_INT 2
44448: NEG
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: PUSH
44454: LD_INT 2
44456: NEG
44457: PUSH
44458: LD_INT 3
44460: NEG
44461: PUSH
44462: EMPTY
44463: LIST
44464: LIST
44465: PUSH
44466: LD_INT 2
44468: PUSH
44469: LD_INT 1
44471: NEG
44472: PUSH
44473: EMPTY
44474: LIST
44475: LIST
44476: PUSH
44477: LD_INT 3
44479: PUSH
44480: LD_INT 0
44482: PUSH
44483: EMPTY
44484: LIST
44485: LIST
44486: PUSH
44487: LD_INT 3
44489: PUSH
44490: LD_INT 1
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: PUSH
44497: LD_INT 3
44499: PUSH
44500: LD_INT 2
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: PUSH
44507: LD_INT 3
44509: PUSH
44510: LD_INT 3
44512: PUSH
44513: EMPTY
44514: LIST
44515: LIST
44516: PUSH
44517: LD_INT 2
44519: PUSH
44520: LD_INT 3
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: PUSH
44527: LD_INT 2
44529: NEG
44530: PUSH
44531: LD_INT 1
44533: PUSH
44534: EMPTY
44535: LIST
44536: LIST
44537: PUSH
44538: LD_INT 3
44540: NEG
44541: PUSH
44542: LD_INT 0
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: PUSH
44549: LD_INT 3
44551: NEG
44552: PUSH
44553: LD_INT 1
44555: NEG
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: PUSH
44561: LD_INT 3
44563: NEG
44564: PUSH
44565: LD_INT 2
44567: NEG
44568: PUSH
44569: EMPTY
44570: LIST
44571: LIST
44572: PUSH
44573: LD_INT 3
44575: NEG
44576: PUSH
44577: LD_INT 3
44579: NEG
44580: PUSH
44581: EMPTY
44582: LIST
44583: LIST
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: LIST
44589: LIST
44590: LIST
44591: LIST
44592: LIST
44593: LIST
44594: LIST
44595: LIST
44596: LIST
44597: LIST
44598: LIST
44599: LIST
44600: LIST
44601: LIST
44602: LIST
44603: LIST
44604: LIST
44605: LIST
44606: LIST
44607: LIST
44608: LIST
44609: LIST
44610: LIST
44611: LIST
44612: LIST
44613: LIST
44614: LIST
44615: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44616: LD_ADDR_VAR 0 45
44620: PUSH
44621: LD_INT 0
44623: PUSH
44624: LD_INT 0
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: PUSH
44631: LD_INT 0
44633: PUSH
44634: LD_INT 1
44636: NEG
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: PUSH
44642: LD_INT 1
44644: PUSH
44645: LD_INT 0
44647: PUSH
44648: EMPTY
44649: LIST
44650: LIST
44651: PUSH
44652: LD_INT 1
44654: PUSH
44655: LD_INT 1
44657: PUSH
44658: EMPTY
44659: LIST
44660: LIST
44661: PUSH
44662: LD_INT 0
44664: PUSH
44665: LD_INT 1
44667: PUSH
44668: EMPTY
44669: LIST
44670: LIST
44671: PUSH
44672: LD_INT 1
44674: NEG
44675: PUSH
44676: LD_INT 0
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: PUSH
44683: LD_INT 1
44685: NEG
44686: PUSH
44687: LD_INT 1
44689: NEG
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: PUSH
44695: LD_INT 1
44697: NEG
44698: PUSH
44699: LD_INT 2
44701: NEG
44702: PUSH
44703: EMPTY
44704: LIST
44705: LIST
44706: PUSH
44707: LD_INT 0
44709: PUSH
44710: LD_INT 2
44712: NEG
44713: PUSH
44714: EMPTY
44715: LIST
44716: LIST
44717: PUSH
44718: LD_INT 1
44720: PUSH
44721: LD_INT 1
44723: NEG
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: PUSH
44729: LD_INT 2
44731: PUSH
44732: LD_INT 1
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: PUSH
44739: LD_INT 2
44741: PUSH
44742: LD_INT 2
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: PUSH
44749: LD_INT 1
44751: PUSH
44752: LD_INT 2
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: PUSH
44759: LD_INT 0
44761: PUSH
44762: LD_INT 2
44764: PUSH
44765: EMPTY
44766: LIST
44767: LIST
44768: PUSH
44769: LD_INT 1
44771: NEG
44772: PUSH
44773: LD_INT 1
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: PUSH
44780: LD_INT 2
44782: NEG
44783: PUSH
44784: LD_INT 1
44786: NEG
44787: PUSH
44788: EMPTY
44789: LIST
44790: LIST
44791: PUSH
44792: LD_INT 2
44794: NEG
44795: PUSH
44796: LD_INT 2
44798: NEG
44799: PUSH
44800: EMPTY
44801: LIST
44802: LIST
44803: PUSH
44804: LD_INT 2
44806: NEG
44807: PUSH
44808: LD_INT 3
44810: NEG
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: PUSH
44816: LD_INT 1
44818: NEG
44819: PUSH
44820: LD_INT 3
44822: NEG
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: PUSH
44828: LD_INT 0
44830: PUSH
44831: LD_INT 3
44833: NEG
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: PUSH
44839: LD_INT 1
44841: PUSH
44842: LD_INT 2
44844: NEG
44845: PUSH
44846: EMPTY
44847: LIST
44848: LIST
44849: PUSH
44850: LD_INT 3
44852: PUSH
44853: LD_INT 2
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: PUSH
44860: LD_INT 3
44862: PUSH
44863: LD_INT 3
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: PUSH
44870: LD_INT 2
44872: PUSH
44873: LD_INT 3
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: PUSH
44880: LD_INT 1
44882: PUSH
44883: LD_INT 3
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: PUSH
44890: LD_INT 0
44892: PUSH
44893: LD_INT 3
44895: PUSH
44896: EMPTY
44897: LIST
44898: LIST
44899: PUSH
44900: LD_INT 1
44902: NEG
44903: PUSH
44904: LD_INT 2
44906: PUSH
44907: EMPTY
44908: LIST
44909: LIST
44910: PUSH
44911: LD_INT 3
44913: NEG
44914: PUSH
44915: LD_INT 2
44917: NEG
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: PUSH
44923: LD_INT 3
44925: NEG
44926: PUSH
44927: LD_INT 3
44929: NEG
44930: PUSH
44931: EMPTY
44932: LIST
44933: LIST
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: LIST
44939: LIST
44940: LIST
44941: LIST
44942: LIST
44943: LIST
44944: LIST
44945: LIST
44946: LIST
44947: LIST
44948: LIST
44949: LIST
44950: LIST
44951: LIST
44952: LIST
44953: LIST
44954: LIST
44955: LIST
44956: LIST
44957: LIST
44958: LIST
44959: LIST
44960: LIST
44961: LIST
44962: LIST
44963: LIST
44964: LIST
44965: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44966: LD_ADDR_VAR 0 46
44970: PUSH
44971: LD_INT 0
44973: PUSH
44974: LD_INT 0
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: PUSH
44981: LD_INT 0
44983: PUSH
44984: LD_INT 1
44986: NEG
44987: PUSH
44988: EMPTY
44989: LIST
44990: LIST
44991: PUSH
44992: LD_INT 1
44994: PUSH
44995: LD_INT 0
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PUSH
45002: LD_INT 1
45004: PUSH
45005: LD_INT 1
45007: PUSH
45008: EMPTY
45009: LIST
45010: LIST
45011: PUSH
45012: LD_INT 0
45014: PUSH
45015: LD_INT 1
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: PUSH
45022: LD_INT 1
45024: NEG
45025: PUSH
45026: LD_INT 0
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: PUSH
45033: LD_INT 1
45035: NEG
45036: PUSH
45037: LD_INT 1
45039: NEG
45040: PUSH
45041: EMPTY
45042: LIST
45043: LIST
45044: PUSH
45045: LD_INT 1
45047: NEG
45048: PUSH
45049: LD_INT 2
45051: NEG
45052: PUSH
45053: EMPTY
45054: LIST
45055: LIST
45056: PUSH
45057: LD_INT 0
45059: PUSH
45060: LD_INT 2
45062: NEG
45063: PUSH
45064: EMPTY
45065: LIST
45066: LIST
45067: PUSH
45068: LD_INT 1
45070: PUSH
45071: LD_INT 1
45073: NEG
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: PUSH
45079: LD_INT 2
45081: PUSH
45082: LD_INT 0
45084: PUSH
45085: EMPTY
45086: LIST
45087: LIST
45088: PUSH
45089: LD_INT 2
45091: PUSH
45092: LD_INT 1
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: PUSH
45099: LD_INT 1
45101: PUSH
45102: LD_INT 2
45104: PUSH
45105: EMPTY
45106: LIST
45107: LIST
45108: PUSH
45109: LD_INT 0
45111: PUSH
45112: LD_INT 2
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: PUSH
45119: LD_INT 1
45121: NEG
45122: PUSH
45123: LD_INT 1
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: PUSH
45130: LD_INT 2
45132: NEG
45133: PUSH
45134: LD_INT 0
45136: PUSH
45137: EMPTY
45138: LIST
45139: LIST
45140: PUSH
45141: LD_INT 2
45143: NEG
45144: PUSH
45145: LD_INT 1
45147: NEG
45148: PUSH
45149: EMPTY
45150: LIST
45151: LIST
45152: PUSH
45153: LD_INT 1
45155: NEG
45156: PUSH
45157: LD_INT 3
45159: NEG
45160: PUSH
45161: EMPTY
45162: LIST
45163: LIST
45164: PUSH
45165: LD_INT 0
45167: PUSH
45168: LD_INT 3
45170: NEG
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: PUSH
45176: LD_INT 1
45178: PUSH
45179: LD_INT 2
45181: NEG
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: PUSH
45187: LD_INT 2
45189: PUSH
45190: LD_INT 1
45192: NEG
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: PUSH
45198: LD_INT 3
45200: PUSH
45201: LD_INT 0
45203: PUSH
45204: EMPTY
45205: LIST
45206: LIST
45207: PUSH
45208: LD_INT 3
45210: PUSH
45211: LD_INT 1
45213: PUSH
45214: EMPTY
45215: LIST
45216: LIST
45217: PUSH
45218: LD_INT 1
45220: PUSH
45221: LD_INT 3
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: PUSH
45228: LD_INT 0
45230: PUSH
45231: LD_INT 3
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: PUSH
45238: LD_INT 1
45240: NEG
45241: PUSH
45242: LD_INT 2
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: PUSH
45249: LD_INT 2
45251: NEG
45252: PUSH
45253: LD_INT 1
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: PUSH
45260: LD_INT 3
45262: NEG
45263: PUSH
45264: LD_INT 0
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: PUSH
45271: LD_INT 3
45273: NEG
45274: PUSH
45275: LD_INT 1
45277: NEG
45278: PUSH
45279: EMPTY
45280: LIST
45281: LIST
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: LIST
45287: LIST
45288: LIST
45289: LIST
45290: LIST
45291: LIST
45292: LIST
45293: LIST
45294: LIST
45295: LIST
45296: LIST
45297: LIST
45298: LIST
45299: LIST
45300: LIST
45301: LIST
45302: LIST
45303: LIST
45304: LIST
45305: LIST
45306: LIST
45307: LIST
45308: LIST
45309: LIST
45310: LIST
45311: LIST
45312: LIST
45313: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45314: LD_ADDR_VAR 0 47
45318: PUSH
45319: LD_INT 0
45321: PUSH
45322: LD_INT 0
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: PUSH
45329: LD_INT 0
45331: PUSH
45332: LD_INT 1
45334: NEG
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: PUSH
45340: LD_INT 1
45342: PUSH
45343: LD_INT 0
45345: PUSH
45346: EMPTY
45347: LIST
45348: LIST
45349: PUSH
45350: LD_INT 1
45352: PUSH
45353: LD_INT 1
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: PUSH
45360: LD_INT 0
45362: PUSH
45363: LD_INT 1
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: PUSH
45370: LD_INT 1
45372: NEG
45373: PUSH
45374: LD_INT 0
45376: PUSH
45377: EMPTY
45378: LIST
45379: LIST
45380: PUSH
45381: LD_INT 1
45383: NEG
45384: PUSH
45385: LD_INT 1
45387: NEG
45388: PUSH
45389: EMPTY
45390: LIST
45391: LIST
45392: PUSH
45393: LD_INT 1
45395: NEG
45396: PUSH
45397: LD_INT 2
45399: NEG
45400: PUSH
45401: EMPTY
45402: LIST
45403: LIST
45404: PUSH
45405: LD_INT 0
45407: PUSH
45408: LD_INT 2
45410: NEG
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: PUSH
45416: LD_INT 1
45418: PUSH
45419: LD_INT 1
45421: NEG
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: PUSH
45427: LD_INT 2
45429: NEG
45430: PUSH
45431: LD_INT 1
45433: NEG
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: PUSH
45439: LD_INT 2
45441: NEG
45442: PUSH
45443: LD_INT 2
45445: NEG
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: LIST
45455: LIST
45456: LIST
45457: LIST
45458: LIST
45459: LIST
45460: LIST
45461: LIST
45462: LIST
45463: LIST
45464: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
45465: LD_ADDR_VAR 0 48
45469: PUSH
45470: LD_INT 0
45472: PUSH
45473: LD_INT 0
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: PUSH
45480: LD_INT 0
45482: PUSH
45483: LD_INT 1
45485: NEG
45486: PUSH
45487: EMPTY
45488: LIST
45489: LIST
45490: PUSH
45491: LD_INT 1
45493: PUSH
45494: LD_INT 0
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: PUSH
45501: LD_INT 1
45503: PUSH
45504: LD_INT 1
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: PUSH
45511: LD_INT 0
45513: PUSH
45514: LD_INT 1
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: PUSH
45521: LD_INT 1
45523: NEG
45524: PUSH
45525: LD_INT 0
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: PUSH
45532: LD_INT 1
45534: NEG
45535: PUSH
45536: LD_INT 1
45538: NEG
45539: PUSH
45540: EMPTY
45541: LIST
45542: LIST
45543: PUSH
45544: LD_INT 1
45546: NEG
45547: PUSH
45548: LD_INT 2
45550: NEG
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: PUSH
45556: LD_INT 0
45558: PUSH
45559: LD_INT 2
45561: NEG
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: PUSH
45567: LD_INT 1
45569: PUSH
45570: LD_INT 1
45572: NEG
45573: PUSH
45574: EMPTY
45575: LIST
45576: LIST
45577: PUSH
45578: LD_INT 2
45580: PUSH
45581: LD_INT 0
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: PUSH
45588: LD_INT 2
45590: PUSH
45591: LD_INT 1
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: LIST
45602: LIST
45603: LIST
45604: LIST
45605: LIST
45606: LIST
45607: LIST
45608: LIST
45609: LIST
45610: LIST
45611: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45612: LD_ADDR_VAR 0 49
45616: PUSH
45617: LD_INT 0
45619: PUSH
45620: LD_INT 0
45622: PUSH
45623: EMPTY
45624: LIST
45625: LIST
45626: PUSH
45627: LD_INT 0
45629: PUSH
45630: LD_INT 1
45632: NEG
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: PUSH
45638: LD_INT 1
45640: PUSH
45641: LD_INT 0
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: PUSH
45648: LD_INT 1
45650: PUSH
45651: LD_INT 1
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: LD_INT 0
45660: PUSH
45661: LD_INT 1
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: LD_INT 1
45670: NEG
45671: PUSH
45672: LD_INT 0
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: PUSH
45679: LD_INT 1
45681: NEG
45682: PUSH
45683: LD_INT 1
45685: NEG
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: PUSH
45691: LD_INT 1
45693: PUSH
45694: LD_INT 1
45696: NEG
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: PUSH
45702: LD_INT 2
45704: PUSH
45705: LD_INT 0
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: PUSH
45712: LD_INT 2
45714: PUSH
45715: LD_INT 1
45717: PUSH
45718: EMPTY
45719: LIST
45720: LIST
45721: PUSH
45722: LD_INT 2
45724: PUSH
45725: LD_INT 2
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: PUSH
45732: LD_INT 1
45734: PUSH
45735: LD_INT 2
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: LIST
45746: LIST
45747: LIST
45748: LIST
45749: LIST
45750: LIST
45751: LIST
45752: LIST
45753: LIST
45754: LIST
45755: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45756: LD_ADDR_VAR 0 50
45760: PUSH
45761: LD_INT 0
45763: PUSH
45764: LD_INT 0
45766: PUSH
45767: EMPTY
45768: LIST
45769: LIST
45770: PUSH
45771: LD_INT 0
45773: PUSH
45774: LD_INT 1
45776: NEG
45777: PUSH
45778: EMPTY
45779: LIST
45780: LIST
45781: PUSH
45782: LD_INT 1
45784: PUSH
45785: LD_INT 0
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: PUSH
45792: LD_INT 1
45794: PUSH
45795: LD_INT 1
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: PUSH
45802: LD_INT 0
45804: PUSH
45805: LD_INT 1
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: PUSH
45812: LD_INT 1
45814: NEG
45815: PUSH
45816: LD_INT 0
45818: PUSH
45819: EMPTY
45820: LIST
45821: LIST
45822: PUSH
45823: LD_INT 1
45825: NEG
45826: PUSH
45827: LD_INT 1
45829: NEG
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: PUSH
45835: LD_INT 2
45837: PUSH
45838: LD_INT 1
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: PUSH
45845: LD_INT 2
45847: PUSH
45848: LD_INT 2
45850: PUSH
45851: EMPTY
45852: LIST
45853: LIST
45854: PUSH
45855: LD_INT 1
45857: PUSH
45858: LD_INT 2
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: PUSH
45865: LD_INT 0
45867: PUSH
45868: LD_INT 2
45870: PUSH
45871: EMPTY
45872: LIST
45873: LIST
45874: PUSH
45875: LD_INT 1
45877: NEG
45878: PUSH
45879: LD_INT 1
45881: PUSH
45882: EMPTY
45883: LIST
45884: LIST
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: LIST
45893: LIST
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: LIST
45899: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45900: LD_ADDR_VAR 0 51
45904: PUSH
45905: LD_INT 0
45907: PUSH
45908: LD_INT 0
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: LD_INT 0
45917: PUSH
45918: LD_INT 1
45920: NEG
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: PUSH
45926: LD_INT 1
45928: PUSH
45929: LD_INT 0
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: LD_INT 1
45938: PUSH
45939: LD_INT 1
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: PUSH
45946: LD_INT 0
45948: PUSH
45949: LD_INT 1
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: PUSH
45956: LD_INT 1
45958: NEG
45959: PUSH
45960: LD_INT 0
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: PUSH
45967: LD_INT 1
45969: NEG
45970: PUSH
45971: LD_INT 1
45973: NEG
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: PUSH
45979: LD_INT 1
45981: PUSH
45982: LD_INT 2
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: LD_INT 0
45991: PUSH
45992: LD_INT 2
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: LD_INT 1
46001: NEG
46002: PUSH
46003: LD_INT 1
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: PUSH
46010: LD_INT 2
46012: NEG
46013: PUSH
46014: LD_INT 0
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: PUSH
46021: LD_INT 2
46023: NEG
46024: PUSH
46025: LD_INT 1
46027: NEG
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: LIST
46037: LIST
46038: LIST
46039: LIST
46040: LIST
46041: LIST
46042: LIST
46043: LIST
46044: LIST
46045: LIST
46046: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46047: LD_ADDR_VAR 0 52
46051: PUSH
46052: LD_INT 0
46054: PUSH
46055: LD_INT 0
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: LD_INT 0
46064: PUSH
46065: LD_INT 1
46067: NEG
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: PUSH
46073: LD_INT 1
46075: PUSH
46076: LD_INT 0
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: PUSH
46083: LD_INT 1
46085: PUSH
46086: LD_INT 1
46088: PUSH
46089: EMPTY
46090: LIST
46091: LIST
46092: PUSH
46093: LD_INT 0
46095: PUSH
46096: LD_INT 1
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: PUSH
46103: LD_INT 1
46105: NEG
46106: PUSH
46107: LD_INT 0
46109: PUSH
46110: EMPTY
46111: LIST
46112: LIST
46113: PUSH
46114: LD_INT 1
46116: NEG
46117: PUSH
46118: LD_INT 1
46120: NEG
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: PUSH
46126: LD_INT 1
46128: NEG
46129: PUSH
46130: LD_INT 2
46132: NEG
46133: PUSH
46134: EMPTY
46135: LIST
46136: LIST
46137: PUSH
46138: LD_INT 1
46140: NEG
46141: PUSH
46142: LD_INT 1
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: PUSH
46149: LD_INT 2
46151: NEG
46152: PUSH
46153: LD_INT 0
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: PUSH
46160: LD_INT 2
46162: NEG
46163: PUSH
46164: LD_INT 1
46166: NEG
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: PUSH
46172: LD_INT 2
46174: NEG
46175: PUSH
46176: LD_INT 2
46178: NEG
46179: PUSH
46180: EMPTY
46181: LIST
46182: LIST
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: LIST
46190: LIST
46191: LIST
46192: LIST
46193: LIST
46194: LIST
46195: LIST
46196: LIST
46197: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46198: LD_ADDR_VAR 0 53
46202: PUSH
46203: LD_INT 0
46205: PUSH
46206: LD_INT 0
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PUSH
46213: LD_INT 0
46215: PUSH
46216: LD_INT 1
46218: NEG
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 1
46226: PUSH
46227: LD_INT 0
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: PUSH
46234: LD_INT 1
46236: PUSH
46237: LD_INT 1
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: PUSH
46244: LD_INT 0
46246: PUSH
46247: LD_INT 1
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: PUSH
46254: LD_INT 1
46256: NEG
46257: PUSH
46258: LD_INT 0
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: PUSH
46265: LD_INT 1
46267: NEG
46268: PUSH
46269: LD_INT 1
46271: NEG
46272: PUSH
46273: EMPTY
46274: LIST
46275: LIST
46276: PUSH
46277: LD_INT 1
46279: NEG
46280: PUSH
46281: LD_INT 2
46283: NEG
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: PUSH
46289: LD_INT 0
46291: PUSH
46292: LD_INT 2
46294: NEG
46295: PUSH
46296: EMPTY
46297: LIST
46298: LIST
46299: PUSH
46300: LD_INT 1
46302: PUSH
46303: LD_INT 1
46305: NEG
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PUSH
46311: LD_INT 2
46313: PUSH
46314: LD_INT 0
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: PUSH
46321: LD_INT 2
46323: PUSH
46324: LD_INT 1
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: PUSH
46331: LD_INT 2
46333: PUSH
46334: LD_INT 2
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: PUSH
46341: LD_INT 1
46343: PUSH
46344: LD_INT 2
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PUSH
46351: LD_INT 0
46353: PUSH
46354: LD_INT 2
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: PUSH
46361: LD_INT 1
46363: NEG
46364: PUSH
46365: LD_INT 1
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: PUSH
46372: LD_INT 2
46374: NEG
46375: PUSH
46376: LD_INT 0
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: PUSH
46383: LD_INT 2
46385: NEG
46386: PUSH
46387: LD_INT 1
46389: NEG
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: LD_INT 2
46397: NEG
46398: PUSH
46399: LD_INT 2
46401: NEG
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: LIST
46411: LIST
46412: LIST
46413: LIST
46414: LIST
46415: LIST
46416: LIST
46417: LIST
46418: LIST
46419: LIST
46420: LIST
46421: LIST
46422: LIST
46423: LIST
46424: LIST
46425: LIST
46426: LIST
46427: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46428: LD_ADDR_VAR 0 54
46432: PUSH
46433: LD_INT 0
46435: PUSH
46436: LD_INT 0
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PUSH
46443: LD_INT 0
46445: PUSH
46446: LD_INT 1
46448: NEG
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: PUSH
46454: LD_INT 1
46456: PUSH
46457: LD_INT 0
46459: PUSH
46460: EMPTY
46461: LIST
46462: LIST
46463: PUSH
46464: LD_INT 1
46466: PUSH
46467: LD_INT 1
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PUSH
46474: LD_INT 0
46476: PUSH
46477: LD_INT 1
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: LD_INT 1
46486: NEG
46487: PUSH
46488: LD_INT 0
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: PUSH
46495: LD_INT 1
46497: NEG
46498: PUSH
46499: LD_INT 1
46501: NEG
46502: PUSH
46503: EMPTY
46504: LIST
46505: LIST
46506: PUSH
46507: LD_INT 1
46509: NEG
46510: PUSH
46511: LD_INT 2
46513: NEG
46514: PUSH
46515: EMPTY
46516: LIST
46517: LIST
46518: PUSH
46519: LD_INT 0
46521: PUSH
46522: LD_INT 2
46524: NEG
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: PUSH
46530: LD_INT 1
46532: PUSH
46533: LD_INT 1
46535: NEG
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: PUSH
46541: LD_INT 2
46543: PUSH
46544: LD_INT 0
46546: PUSH
46547: EMPTY
46548: LIST
46549: LIST
46550: PUSH
46551: LD_INT 2
46553: PUSH
46554: LD_INT 1
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: PUSH
46561: LD_INT 2
46563: PUSH
46564: LD_INT 2
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: LD_INT 1
46573: PUSH
46574: LD_INT 2
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 0
46583: PUSH
46584: LD_INT 2
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: PUSH
46591: LD_INT 1
46593: NEG
46594: PUSH
46595: LD_INT 1
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PUSH
46602: LD_INT 2
46604: NEG
46605: PUSH
46606: LD_INT 0
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: LD_INT 2
46615: NEG
46616: PUSH
46617: LD_INT 1
46619: NEG
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: PUSH
46625: LD_INT 2
46627: NEG
46628: PUSH
46629: LD_INT 2
46631: NEG
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: LIST
46641: LIST
46642: LIST
46643: LIST
46644: LIST
46645: LIST
46646: LIST
46647: LIST
46648: LIST
46649: LIST
46650: LIST
46651: LIST
46652: LIST
46653: LIST
46654: LIST
46655: LIST
46656: LIST
46657: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46658: LD_ADDR_VAR 0 55
46662: PUSH
46663: LD_INT 0
46665: PUSH
46666: LD_INT 0
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: PUSH
46673: LD_INT 0
46675: PUSH
46676: LD_INT 1
46678: NEG
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: PUSH
46684: LD_INT 1
46686: PUSH
46687: LD_INT 0
46689: PUSH
46690: EMPTY
46691: LIST
46692: LIST
46693: PUSH
46694: LD_INT 1
46696: PUSH
46697: LD_INT 1
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: PUSH
46704: LD_INT 0
46706: PUSH
46707: LD_INT 1
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: LD_INT 1
46716: NEG
46717: PUSH
46718: LD_INT 0
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: PUSH
46725: LD_INT 1
46727: NEG
46728: PUSH
46729: LD_INT 1
46731: NEG
46732: PUSH
46733: EMPTY
46734: LIST
46735: LIST
46736: PUSH
46737: LD_INT 1
46739: NEG
46740: PUSH
46741: LD_INT 2
46743: NEG
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: LD_INT 0
46751: PUSH
46752: LD_INT 2
46754: NEG
46755: PUSH
46756: EMPTY
46757: LIST
46758: LIST
46759: PUSH
46760: LD_INT 1
46762: PUSH
46763: LD_INT 1
46765: NEG
46766: PUSH
46767: EMPTY
46768: LIST
46769: LIST
46770: PUSH
46771: LD_INT 2
46773: PUSH
46774: LD_INT 0
46776: PUSH
46777: EMPTY
46778: LIST
46779: LIST
46780: PUSH
46781: LD_INT 2
46783: PUSH
46784: LD_INT 1
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 2
46793: PUSH
46794: LD_INT 2
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 1
46803: PUSH
46804: LD_INT 2
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 0
46813: PUSH
46814: LD_INT 2
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PUSH
46821: LD_INT 1
46823: NEG
46824: PUSH
46825: LD_INT 1
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PUSH
46832: LD_INT 2
46834: NEG
46835: PUSH
46836: LD_INT 0
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: PUSH
46843: LD_INT 2
46845: NEG
46846: PUSH
46847: LD_INT 1
46849: NEG
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: PUSH
46855: LD_INT 2
46857: NEG
46858: PUSH
46859: LD_INT 2
46861: NEG
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: LIST
46871: LIST
46872: LIST
46873: LIST
46874: LIST
46875: LIST
46876: LIST
46877: LIST
46878: LIST
46879: LIST
46880: LIST
46881: LIST
46882: LIST
46883: LIST
46884: LIST
46885: LIST
46886: LIST
46887: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46888: LD_ADDR_VAR 0 56
46892: PUSH
46893: LD_INT 0
46895: PUSH
46896: LD_INT 0
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: PUSH
46903: LD_INT 0
46905: PUSH
46906: LD_INT 1
46908: NEG
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: PUSH
46914: LD_INT 1
46916: PUSH
46917: LD_INT 0
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: PUSH
46924: LD_INT 1
46926: PUSH
46927: LD_INT 1
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: PUSH
46934: LD_INT 0
46936: PUSH
46937: LD_INT 1
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: LD_INT 1
46946: NEG
46947: PUSH
46948: LD_INT 0
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: LD_INT 1
46957: NEG
46958: PUSH
46959: LD_INT 1
46961: NEG
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: PUSH
46967: LD_INT 1
46969: NEG
46970: PUSH
46971: LD_INT 2
46973: NEG
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: LD_INT 0
46981: PUSH
46982: LD_INT 2
46984: NEG
46985: PUSH
46986: EMPTY
46987: LIST
46988: LIST
46989: PUSH
46990: LD_INT 1
46992: PUSH
46993: LD_INT 1
46995: NEG
46996: PUSH
46997: EMPTY
46998: LIST
46999: LIST
47000: PUSH
47001: LD_INT 2
47003: PUSH
47004: LD_INT 0
47006: PUSH
47007: EMPTY
47008: LIST
47009: LIST
47010: PUSH
47011: LD_INT 2
47013: PUSH
47014: LD_INT 1
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: PUSH
47021: LD_INT 2
47023: PUSH
47024: LD_INT 2
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: PUSH
47031: LD_INT 1
47033: PUSH
47034: LD_INT 2
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: PUSH
47041: LD_INT 0
47043: PUSH
47044: LD_INT 2
47046: PUSH
47047: EMPTY
47048: LIST
47049: LIST
47050: PUSH
47051: LD_INT 1
47053: NEG
47054: PUSH
47055: LD_INT 1
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: PUSH
47062: LD_INT 2
47064: NEG
47065: PUSH
47066: LD_INT 0
47068: PUSH
47069: EMPTY
47070: LIST
47071: LIST
47072: PUSH
47073: LD_INT 2
47075: NEG
47076: PUSH
47077: LD_INT 1
47079: NEG
47080: PUSH
47081: EMPTY
47082: LIST
47083: LIST
47084: PUSH
47085: LD_INT 2
47087: NEG
47088: PUSH
47089: LD_INT 2
47091: NEG
47092: PUSH
47093: EMPTY
47094: LIST
47095: LIST
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: LIST
47101: LIST
47102: LIST
47103: LIST
47104: LIST
47105: LIST
47106: LIST
47107: LIST
47108: LIST
47109: LIST
47110: LIST
47111: LIST
47112: LIST
47113: LIST
47114: LIST
47115: LIST
47116: LIST
47117: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47118: LD_ADDR_VAR 0 57
47122: PUSH
47123: LD_INT 0
47125: PUSH
47126: LD_INT 0
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: LD_INT 0
47135: PUSH
47136: LD_INT 1
47138: NEG
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: LD_INT 1
47146: PUSH
47147: LD_INT 0
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PUSH
47154: LD_INT 1
47156: PUSH
47157: LD_INT 1
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: PUSH
47164: LD_INT 0
47166: PUSH
47167: LD_INT 1
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 1
47176: NEG
47177: PUSH
47178: LD_INT 0
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: LD_INT 1
47187: NEG
47188: PUSH
47189: LD_INT 1
47191: NEG
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 1
47199: NEG
47200: PUSH
47201: LD_INT 2
47203: NEG
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: LD_INT 0
47211: PUSH
47212: LD_INT 2
47214: NEG
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: PUSH
47220: LD_INT 1
47222: PUSH
47223: LD_INT 1
47225: NEG
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: LD_INT 2
47233: PUSH
47234: LD_INT 0
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: LD_INT 2
47243: PUSH
47244: LD_INT 1
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: PUSH
47251: LD_INT 2
47253: PUSH
47254: LD_INT 2
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: PUSH
47261: LD_INT 1
47263: PUSH
47264: LD_INT 2
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: PUSH
47271: LD_INT 0
47273: PUSH
47274: LD_INT 2
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: PUSH
47281: LD_INT 1
47283: NEG
47284: PUSH
47285: LD_INT 1
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: LD_INT 2
47294: NEG
47295: PUSH
47296: LD_INT 0
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: PUSH
47303: LD_INT 2
47305: NEG
47306: PUSH
47307: LD_INT 1
47309: NEG
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: PUSH
47315: LD_INT 2
47317: NEG
47318: PUSH
47319: LD_INT 2
47321: NEG
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: LIST
47331: LIST
47332: LIST
47333: LIST
47334: LIST
47335: LIST
47336: LIST
47337: LIST
47338: LIST
47339: LIST
47340: LIST
47341: LIST
47342: LIST
47343: LIST
47344: LIST
47345: LIST
47346: LIST
47347: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47348: LD_ADDR_VAR 0 58
47352: PUSH
47353: LD_INT 0
47355: PUSH
47356: LD_INT 0
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 0
47365: PUSH
47366: LD_INT 1
47368: NEG
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: PUSH
47374: LD_INT 1
47376: PUSH
47377: LD_INT 0
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: PUSH
47384: LD_INT 1
47386: PUSH
47387: LD_INT 1
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: LD_INT 0
47396: PUSH
47397: LD_INT 1
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PUSH
47404: LD_INT 1
47406: NEG
47407: PUSH
47408: LD_INT 0
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: PUSH
47415: LD_INT 1
47417: NEG
47418: PUSH
47419: LD_INT 1
47421: NEG
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: PUSH
47427: LD_INT 1
47429: NEG
47430: PUSH
47431: LD_INT 2
47433: NEG
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: PUSH
47439: LD_INT 0
47441: PUSH
47442: LD_INT 2
47444: NEG
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: PUSH
47450: LD_INT 1
47452: PUSH
47453: LD_INT 1
47455: NEG
47456: PUSH
47457: EMPTY
47458: LIST
47459: LIST
47460: PUSH
47461: LD_INT 2
47463: PUSH
47464: LD_INT 0
47466: PUSH
47467: EMPTY
47468: LIST
47469: LIST
47470: PUSH
47471: LD_INT 2
47473: PUSH
47474: LD_INT 1
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: PUSH
47481: LD_INT 2
47483: PUSH
47484: LD_INT 2
47486: PUSH
47487: EMPTY
47488: LIST
47489: LIST
47490: PUSH
47491: LD_INT 1
47493: PUSH
47494: LD_INT 2
47496: PUSH
47497: EMPTY
47498: LIST
47499: LIST
47500: PUSH
47501: LD_INT 0
47503: PUSH
47504: LD_INT 2
47506: PUSH
47507: EMPTY
47508: LIST
47509: LIST
47510: PUSH
47511: LD_INT 1
47513: NEG
47514: PUSH
47515: LD_INT 1
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: PUSH
47522: LD_INT 2
47524: NEG
47525: PUSH
47526: LD_INT 0
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: PUSH
47533: LD_INT 2
47535: NEG
47536: PUSH
47537: LD_INT 1
47539: NEG
47540: PUSH
47541: EMPTY
47542: LIST
47543: LIST
47544: PUSH
47545: LD_INT 2
47547: NEG
47548: PUSH
47549: LD_INT 2
47551: NEG
47552: PUSH
47553: EMPTY
47554: LIST
47555: LIST
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: LIST
47561: LIST
47562: LIST
47563: LIST
47564: LIST
47565: LIST
47566: LIST
47567: LIST
47568: LIST
47569: LIST
47570: LIST
47571: LIST
47572: LIST
47573: LIST
47574: LIST
47575: LIST
47576: LIST
47577: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47578: LD_ADDR_VAR 0 59
47582: PUSH
47583: LD_INT 0
47585: PUSH
47586: LD_INT 0
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: PUSH
47593: LD_INT 0
47595: PUSH
47596: LD_INT 1
47598: NEG
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: PUSH
47604: LD_INT 1
47606: PUSH
47607: LD_INT 0
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PUSH
47614: LD_INT 1
47616: PUSH
47617: LD_INT 1
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: LD_INT 0
47626: PUSH
47627: LD_INT 1
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: PUSH
47634: LD_INT 1
47636: NEG
47637: PUSH
47638: LD_INT 0
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: PUSH
47645: LD_INT 1
47647: NEG
47648: PUSH
47649: LD_INT 1
47651: NEG
47652: PUSH
47653: EMPTY
47654: LIST
47655: LIST
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: LIST
47661: LIST
47662: LIST
47663: LIST
47664: LIST
47665: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47666: LD_ADDR_VAR 0 60
47670: PUSH
47671: LD_INT 0
47673: PUSH
47674: LD_INT 0
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PUSH
47681: LD_INT 0
47683: PUSH
47684: LD_INT 1
47686: NEG
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: PUSH
47692: LD_INT 1
47694: PUSH
47695: LD_INT 0
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: PUSH
47702: LD_INT 1
47704: PUSH
47705: LD_INT 1
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PUSH
47712: LD_INT 0
47714: PUSH
47715: LD_INT 1
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: PUSH
47722: LD_INT 1
47724: NEG
47725: PUSH
47726: LD_INT 0
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PUSH
47733: LD_INT 1
47735: NEG
47736: PUSH
47737: LD_INT 1
47739: NEG
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: LIST
47749: LIST
47750: LIST
47751: LIST
47752: LIST
47753: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47754: LD_ADDR_VAR 0 61
47758: PUSH
47759: LD_INT 0
47761: PUSH
47762: LD_INT 0
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: PUSH
47769: LD_INT 0
47771: PUSH
47772: LD_INT 1
47774: NEG
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: LD_INT 1
47782: PUSH
47783: LD_INT 0
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: PUSH
47790: LD_INT 1
47792: PUSH
47793: LD_INT 1
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: PUSH
47800: LD_INT 0
47802: PUSH
47803: LD_INT 1
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: PUSH
47810: LD_INT 1
47812: NEG
47813: PUSH
47814: LD_INT 0
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: PUSH
47821: LD_INT 1
47823: NEG
47824: PUSH
47825: LD_INT 1
47827: NEG
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: EMPTY
47834: LIST
47835: LIST
47836: LIST
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47842: LD_ADDR_VAR 0 62
47846: PUSH
47847: LD_INT 0
47849: PUSH
47850: LD_INT 0
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: PUSH
47857: LD_INT 0
47859: PUSH
47860: LD_INT 1
47862: NEG
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: PUSH
47868: LD_INT 1
47870: PUSH
47871: LD_INT 0
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: PUSH
47878: LD_INT 1
47880: PUSH
47881: LD_INT 1
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PUSH
47888: LD_INT 0
47890: PUSH
47891: LD_INT 1
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: LD_INT 1
47900: NEG
47901: PUSH
47902: LD_INT 0
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: LD_INT 1
47911: NEG
47912: PUSH
47913: LD_INT 1
47915: NEG
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47930: LD_ADDR_VAR 0 63
47934: PUSH
47935: LD_INT 0
47937: PUSH
47938: LD_INT 0
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: PUSH
47945: LD_INT 0
47947: PUSH
47948: LD_INT 1
47950: NEG
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: PUSH
47956: LD_INT 1
47958: PUSH
47959: LD_INT 0
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: PUSH
47966: LD_INT 1
47968: PUSH
47969: LD_INT 1
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: LD_INT 0
47978: PUSH
47979: LD_INT 1
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: PUSH
47986: LD_INT 1
47988: NEG
47989: PUSH
47990: LD_INT 0
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: PUSH
47997: LD_INT 1
47999: NEG
48000: PUSH
48001: LD_INT 1
48003: NEG
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: LIST
48013: LIST
48014: LIST
48015: LIST
48016: LIST
48017: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48018: LD_ADDR_VAR 0 64
48022: PUSH
48023: LD_INT 0
48025: PUSH
48026: LD_INT 0
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: PUSH
48033: LD_INT 0
48035: PUSH
48036: LD_INT 1
48038: NEG
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: LD_INT 1
48046: PUSH
48047: LD_INT 0
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 1
48056: PUSH
48057: LD_INT 1
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: LD_INT 0
48066: PUSH
48067: LD_INT 1
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: PUSH
48074: LD_INT 1
48076: NEG
48077: PUSH
48078: LD_INT 0
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: LD_INT 1
48087: NEG
48088: PUSH
48089: LD_INT 1
48091: NEG
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: LIST
48101: LIST
48102: LIST
48103: LIST
48104: LIST
48105: ST_TO_ADDR
// end ; 1 :
48106: GO 54003
48108: LD_INT 1
48110: DOUBLE
48111: EQUAL
48112: IFTRUE 48116
48114: GO 50739
48116: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48117: LD_ADDR_VAR 0 11
48121: PUSH
48122: LD_INT 1
48124: NEG
48125: PUSH
48126: LD_INT 3
48128: NEG
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: PUSH
48134: LD_INT 0
48136: PUSH
48137: LD_INT 3
48139: NEG
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: PUSH
48145: LD_INT 1
48147: PUSH
48148: LD_INT 2
48150: NEG
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: LIST
48160: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48161: LD_ADDR_VAR 0 12
48165: PUSH
48166: LD_INT 2
48168: PUSH
48169: LD_INT 1
48171: NEG
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: LD_INT 3
48179: PUSH
48180: LD_INT 0
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: PUSH
48187: LD_INT 3
48189: PUSH
48190: LD_INT 1
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: LIST
48201: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48202: LD_ADDR_VAR 0 13
48206: PUSH
48207: LD_INT 3
48209: PUSH
48210: LD_INT 2
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: LD_INT 3
48219: PUSH
48220: LD_INT 3
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 2
48229: PUSH
48230: LD_INT 3
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: PUSH
48237: EMPTY
48238: LIST
48239: LIST
48240: LIST
48241: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48242: LD_ADDR_VAR 0 14
48246: PUSH
48247: LD_INT 1
48249: PUSH
48250: LD_INT 3
48252: PUSH
48253: EMPTY
48254: LIST
48255: LIST
48256: PUSH
48257: LD_INT 0
48259: PUSH
48260: LD_INT 3
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: PUSH
48267: LD_INT 1
48269: NEG
48270: PUSH
48271: LD_INT 2
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: LIST
48282: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48283: LD_ADDR_VAR 0 15
48287: PUSH
48288: LD_INT 2
48290: NEG
48291: PUSH
48292: LD_INT 1
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: PUSH
48299: LD_INT 3
48301: NEG
48302: PUSH
48303: LD_INT 0
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: LD_INT 3
48312: NEG
48313: PUSH
48314: LD_INT 1
48316: NEG
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: LIST
48326: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48327: LD_ADDR_VAR 0 16
48331: PUSH
48332: LD_INT 2
48334: NEG
48335: PUSH
48336: LD_INT 3
48338: NEG
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: PUSH
48344: LD_INT 3
48346: NEG
48347: PUSH
48348: LD_INT 2
48350: NEG
48351: PUSH
48352: EMPTY
48353: LIST
48354: LIST
48355: PUSH
48356: LD_INT 3
48358: NEG
48359: PUSH
48360: LD_INT 3
48362: NEG
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: PUSH
48368: EMPTY
48369: LIST
48370: LIST
48371: LIST
48372: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48373: LD_ADDR_VAR 0 17
48377: PUSH
48378: LD_INT 1
48380: NEG
48381: PUSH
48382: LD_INT 3
48384: NEG
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: PUSH
48390: LD_INT 0
48392: PUSH
48393: LD_INT 3
48395: NEG
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 1
48403: PUSH
48404: LD_INT 2
48406: NEG
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: LIST
48416: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48417: LD_ADDR_VAR 0 18
48421: PUSH
48422: LD_INT 2
48424: PUSH
48425: LD_INT 1
48427: NEG
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: PUSH
48433: LD_INT 3
48435: PUSH
48436: LD_INT 0
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PUSH
48443: LD_INT 3
48445: PUSH
48446: LD_INT 1
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: LIST
48457: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48458: LD_ADDR_VAR 0 19
48462: PUSH
48463: LD_INT 3
48465: PUSH
48466: LD_INT 2
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: PUSH
48473: LD_INT 3
48475: PUSH
48476: LD_INT 3
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: PUSH
48483: LD_INT 2
48485: PUSH
48486: LD_INT 3
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: LIST
48497: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48498: LD_ADDR_VAR 0 20
48502: PUSH
48503: LD_INT 1
48505: PUSH
48506: LD_INT 3
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: PUSH
48513: LD_INT 0
48515: PUSH
48516: LD_INT 3
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: LD_INT 1
48525: NEG
48526: PUSH
48527: LD_INT 2
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: LIST
48538: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48539: LD_ADDR_VAR 0 21
48543: PUSH
48544: LD_INT 2
48546: NEG
48547: PUSH
48548: LD_INT 1
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: PUSH
48555: LD_INT 3
48557: NEG
48558: PUSH
48559: LD_INT 0
48561: PUSH
48562: EMPTY
48563: LIST
48564: LIST
48565: PUSH
48566: LD_INT 3
48568: NEG
48569: PUSH
48570: LD_INT 1
48572: NEG
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: LIST
48582: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48583: LD_ADDR_VAR 0 22
48587: PUSH
48588: LD_INT 2
48590: NEG
48591: PUSH
48592: LD_INT 3
48594: NEG
48595: PUSH
48596: EMPTY
48597: LIST
48598: LIST
48599: PUSH
48600: LD_INT 3
48602: NEG
48603: PUSH
48604: LD_INT 2
48606: NEG
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: PUSH
48612: LD_INT 3
48614: NEG
48615: PUSH
48616: LD_INT 3
48618: NEG
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: LIST
48628: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
48629: LD_ADDR_VAR 0 23
48633: PUSH
48634: LD_INT 0
48636: PUSH
48637: LD_INT 3
48639: NEG
48640: PUSH
48641: EMPTY
48642: LIST
48643: LIST
48644: PUSH
48645: LD_INT 1
48647: NEG
48648: PUSH
48649: LD_INT 4
48651: NEG
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 1
48659: PUSH
48660: LD_INT 3
48662: NEG
48663: PUSH
48664: EMPTY
48665: LIST
48666: LIST
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: LIST
48672: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
48673: LD_ADDR_VAR 0 24
48677: PUSH
48678: LD_INT 3
48680: PUSH
48681: LD_INT 0
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: PUSH
48688: LD_INT 3
48690: PUSH
48691: LD_INT 1
48693: NEG
48694: PUSH
48695: EMPTY
48696: LIST
48697: LIST
48698: PUSH
48699: LD_INT 4
48701: PUSH
48702: LD_INT 1
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: LIST
48713: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
48714: LD_ADDR_VAR 0 25
48718: PUSH
48719: LD_INT 3
48721: PUSH
48722: LD_INT 3
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 4
48731: PUSH
48732: LD_INT 3
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: PUSH
48739: LD_INT 3
48741: PUSH
48742: LD_INT 4
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: LIST
48753: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
48754: LD_ADDR_VAR 0 26
48758: PUSH
48759: LD_INT 0
48761: PUSH
48762: LD_INT 3
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: LD_INT 1
48771: PUSH
48772: LD_INT 4
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: PUSH
48779: LD_INT 1
48781: NEG
48782: PUSH
48783: LD_INT 3
48785: PUSH
48786: EMPTY
48787: LIST
48788: LIST
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: LIST
48794: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
48795: LD_ADDR_VAR 0 27
48799: PUSH
48800: LD_INT 3
48802: NEG
48803: PUSH
48804: LD_INT 0
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: PUSH
48811: LD_INT 3
48813: NEG
48814: PUSH
48815: LD_INT 1
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: LD_INT 4
48824: NEG
48825: PUSH
48826: LD_INT 1
48828: NEG
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PUSH
48834: EMPTY
48835: LIST
48836: LIST
48837: LIST
48838: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
48839: LD_ADDR_VAR 0 28
48843: PUSH
48844: LD_INT 3
48846: NEG
48847: PUSH
48848: LD_INT 3
48850: NEG
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PUSH
48856: LD_INT 3
48858: NEG
48859: PUSH
48860: LD_INT 4
48862: NEG
48863: PUSH
48864: EMPTY
48865: LIST
48866: LIST
48867: PUSH
48868: LD_INT 4
48870: NEG
48871: PUSH
48872: LD_INT 3
48874: NEG
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: PUSH
48880: EMPTY
48881: LIST
48882: LIST
48883: LIST
48884: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
48885: LD_ADDR_VAR 0 29
48889: PUSH
48890: LD_INT 1
48892: NEG
48893: PUSH
48894: LD_INT 3
48896: NEG
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: PUSH
48902: LD_INT 0
48904: PUSH
48905: LD_INT 3
48907: NEG
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PUSH
48913: LD_INT 1
48915: PUSH
48916: LD_INT 2
48918: NEG
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: PUSH
48924: LD_INT 1
48926: NEG
48927: PUSH
48928: LD_INT 4
48930: NEG
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 0
48938: PUSH
48939: LD_INT 4
48941: NEG
48942: PUSH
48943: EMPTY
48944: LIST
48945: LIST
48946: PUSH
48947: LD_INT 1
48949: PUSH
48950: LD_INT 3
48952: NEG
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PUSH
48958: LD_INT 1
48960: NEG
48961: PUSH
48962: LD_INT 5
48964: NEG
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: LD_INT 0
48972: PUSH
48973: LD_INT 5
48975: NEG
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: PUSH
48981: LD_INT 1
48983: PUSH
48984: LD_INT 4
48986: NEG
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: LD_INT 1
48994: NEG
48995: PUSH
48996: LD_INT 6
48998: NEG
48999: PUSH
49000: EMPTY
49001: LIST
49002: LIST
49003: PUSH
49004: LD_INT 0
49006: PUSH
49007: LD_INT 6
49009: NEG
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: PUSH
49015: LD_INT 1
49017: PUSH
49018: LD_INT 5
49020: NEG
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: PUSH
49026: EMPTY
49027: LIST
49028: LIST
49029: LIST
49030: LIST
49031: LIST
49032: LIST
49033: LIST
49034: LIST
49035: LIST
49036: LIST
49037: LIST
49038: LIST
49039: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
49040: LD_ADDR_VAR 0 30
49044: PUSH
49045: LD_INT 2
49047: PUSH
49048: LD_INT 1
49050: NEG
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: PUSH
49056: LD_INT 3
49058: PUSH
49059: LD_INT 0
49061: PUSH
49062: EMPTY
49063: LIST
49064: LIST
49065: PUSH
49066: LD_INT 3
49068: PUSH
49069: LD_INT 1
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 3
49078: PUSH
49079: LD_INT 1
49081: NEG
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: PUSH
49087: LD_INT 4
49089: PUSH
49090: LD_INT 0
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: PUSH
49097: LD_INT 4
49099: PUSH
49100: LD_INT 1
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: PUSH
49107: LD_INT 4
49109: PUSH
49110: LD_INT 1
49112: NEG
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: LD_INT 5
49120: PUSH
49121: LD_INT 0
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: PUSH
49128: LD_INT 5
49130: PUSH
49131: LD_INT 1
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: PUSH
49138: LD_INT 5
49140: PUSH
49141: LD_INT 1
49143: NEG
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: PUSH
49149: LD_INT 6
49151: PUSH
49152: LD_INT 0
49154: PUSH
49155: EMPTY
49156: LIST
49157: LIST
49158: PUSH
49159: LD_INT 6
49161: PUSH
49162: LD_INT 1
49164: PUSH
49165: EMPTY
49166: LIST
49167: LIST
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: LIST
49173: LIST
49174: LIST
49175: LIST
49176: LIST
49177: LIST
49178: LIST
49179: LIST
49180: LIST
49181: LIST
49182: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
49183: LD_ADDR_VAR 0 31
49187: PUSH
49188: LD_INT 3
49190: PUSH
49191: LD_INT 2
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 3
49200: PUSH
49201: LD_INT 3
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 2
49210: PUSH
49211: LD_INT 3
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 4
49220: PUSH
49221: LD_INT 3
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: LD_INT 4
49230: PUSH
49231: LD_INT 4
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: PUSH
49238: LD_INT 3
49240: PUSH
49241: LD_INT 4
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: PUSH
49248: LD_INT 5
49250: PUSH
49251: LD_INT 4
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: PUSH
49258: LD_INT 5
49260: PUSH
49261: LD_INT 5
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: PUSH
49268: LD_INT 4
49270: PUSH
49271: LD_INT 5
49273: PUSH
49274: EMPTY
49275: LIST
49276: LIST
49277: PUSH
49278: LD_INT 6
49280: PUSH
49281: LD_INT 5
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PUSH
49288: LD_INT 6
49290: PUSH
49291: LD_INT 6
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: PUSH
49298: LD_INT 5
49300: PUSH
49301: LD_INT 6
49303: PUSH
49304: EMPTY
49305: LIST
49306: LIST
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: LIST
49312: LIST
49313: LIST
49314: LIST
49315: LIST
49316: LIST
49317: LIST
49318: LIST
49319: LIST
49320: LIST
49321: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
49322: LD_ADDR_VAR 0 32
49326: PUSH
49327: LD_INT 1
49329: PUSH
49330: LD_INT 3
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PUSH
49337: LD_INT 0
49339: PUSH
49340: LD_INT 3
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: LD_INT 1
49349: NEG
49350: PUSH
49351: LD_INT 2
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 1
49360: PUSH
49361: LD_INT 4
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: LD_INT 0
49370: PUSH
49371: LD_INT 4
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: LD_INT 1
49380: NEG
49381: PUSH
49382: LD_INT 3
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: PUSH
49389: LD_INT 1
49391: PUSH
49392: LD_INT 5
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: PUSH
49399: LD_INT 0
49401: PUSH
49402: LD_INT 5
49404: PUSH
49405: EMPTY
49406: LIST
49407: LIST
49408: PUSH
49409: LD_INT 1
49411: NEG
49412: PUSH
49413: LD_INT 4
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: LD_INT 1
49422: PUSH
49423: LD_INT 6
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: PUSH
49430: LD_INT 0
49432: PUSH
49433: LD_INT 6
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: LD_INT 1
49442: NEG
49443: PUSH
49444: LD_INT 5
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: LIST
49455: LIST
49456: LIST
49457: LIST
49458: LIST
49459: LIST
49460: LIST
49461: LIST
49462: LIST
49463: LIST
49464: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
49465: LD_ADDR_VAR 0 33
49469: PUSH
49470: LD_INT 2
49472: NEG
49473: PUSH
49474: LD_INT 1
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PUSH
49481: LD_INT 3
49483: NEG
49484: PUSH
49485: LD_INT 0
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: LD_INT 3
49494: NEG
49495: PUSH
49496: LD_INT 1
49498: NEG
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: PUSH
49504: LD_INT 3
49506: NEG
49507: PUSH
49508: LD_INT 1
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: PUSH
49515: LD_INT 4
49517: NEG
49518: PUSH
49519: LD_INT 0
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: PUSH
49526: LD_INT 4
49528: NEG
49529: PUSH
49530: LD_INT 1
49532: NEG
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: PUSH
49538: LD_INT 4
49540: NEG
49541: PUSH
49542: LD_INT 1
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: PUSH
49549: LD_INT 5
49551: NEG
49552: PUSH
49553: LD_INT 0
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 5
49562: NEG
49563: PUSH
49564: LD_INT 1
49566: NEG
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: PUSH
49572: LD_INT 5
49574: NEG
49575: PUSH
49576: LD_INT 1
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 6
49585: NEG
49586: PUSH
49587: LD_INT 0
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: LD_INT 6
49596: NEG
49597: PUSH
49598: LD_INT 1
49600: NEG
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: LIST
49610: LIST
49611: LIST
49612: LIST
49613: LIST
49614: LIST
49615: LIST
49616: LIST
49617: LIST
49618: LIST
49619: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
49620: LD_ADDR_VAR 0 34
49624: PUSH
49625: LD_INT 2
49627: NEG
49628: PUSH
49629: LD_INT 3
49631: NEG
49632: PUSH
49633: EMPTY
49634: LIST
49635: LIST
49636: PUSH
49637: LD_INT 3
49639: NEG
49640: PUSH
49641: LD_INT 2
49643: NEG
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: PUSH
49649: LD_INT 3
49651: NEG
49652: PUSH
49653: LD_INT 3
49655: NEG
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: PUSH
49661: LD_INT 3
49663: NEG
49664: PUSH
49665: LD_INT 4
49667: NEG
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 4
49675: NEG
49676: PUSH
49677: LD_INT 3
49679: NEG
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: PUSH
49685: LD_INT 4
49687: NEG
49688: PUSH
49689: LD_INT 4
49691: NEG
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: PUSH
49697: LD_INT 4
49699: NEG
49700: PUSH
49701: LD_INT 5
49703: NEG
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: PUSH
49709: LD_INT 5
49711: NEG
49712: PUSH
49713: LD_INT 4
49715: NEG
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: PUSH
49721: LD_INT 5
49723: NEG
49724: PUSH
49725: LD_INT 5
49727: NEG
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: PUSH
49733: LD_INT 5
49735: NEG
49736: PUSH
49737: LD_INT 6
49739: NEG
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: LD_INT 6
49747: NEG
49748: PUSH
49749: LD_INT 5
49751: NEG
49752: PUSH
49753: EMPTY
49754: LIST
49755: LIST
49756: PUSH
49757: LD_INT 6
49759: NEG
49760: PUSH
49761: LD_INT 6
49763: NEG
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: LIST
49773: LIST
49774: LIST
49775: LIST
49776: LIST
49777: LIST
49778: LIST
49779: LIST
49780: LIST
49781: LIST
49782: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
49783: LD_ADDR_VAR 0 41
49787: PUSH
49788: LD_INT 0
49790: PUSH
49791: LD_INT 2
49793: NEG
49794: PUSH
49795: EMPTY
49796: LIST
49797: LIST
49798: PUSH
49799: LD_INT 1
49801: NEG
49802: PUSH
49803: LD_INT 3
49805: NEG
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: PUSH
49811: LD_INT 1
49813: PUSH
49814: LD_INT 2
49816: NEG
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: LIST
49826: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
49827: LD_ADDR_VAR 0 42
49831: PUSH
49832: LD_INT 2
49834: PUSH
49835: LD_INT 0
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: LD_INT 2
49844: PUSH
49845: LD_INT 1
49847: NEG
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 3
49855: PUSH
49856: LD_INT 1
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: EMPTY
49864: LIST
49865: LIST
49866: LIST
49867: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
49868: LD_ADDR_VAR 0 43
49872: PUSH
49873: LD_INT 2
49875: PUSH
49876: LD_INT 2
49878: PUSH
49879: EMPTY
49880: LIST
49881: LIST
49882: PUSH
49883: LD_INT 3
49885: PUSH
49886: LD_INT 2
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: LD_INT 2
49895: PUSH
49896: LD_INT 3
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: EMPTY
49904: LIST
49905: LIST
49906: LIST
49907: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
49908: LD_ADDR_VAR 0 44
49912: PUSH
49913: LD_INT 0
49915: PUSH
49916: LD_INT 2
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: PUSH
49923: LD_INT 1
49925: PUSH
49926: LD_INT 3
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: LD_INT 1
49935: NEG
49936: PUSH
49937: LD_INT 2
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: LIST
49948: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49949: LD_ADDR_VAR 0 45
49953: PUSH
49954: LD_INT 2
49956: NEG
49957: PUSH
49958: LD_INT 0
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: PUSH
49965: LD_INT 2
49967: NEG
49968: PUSH
49969: LD_INT 1
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: PUSH
49976: LD_INT 3
49978: NEG
49979: PUSH
49980: LD_INT 1
49982: NEG
49983: PUSH
49984: EMPTY
49985: LIST
49986: LIST
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: LIST
49992: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
49993: LD_ADDR_VAR 0 46
49997: PUSH
49998: LD_INT 2
50000: NEG
50001: PUSH
50002: LD_INT 2
50004: NEG
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: LD_INT 2
50012: NEG
50013: PUSH
50014: LD_INT 3
50016: NEG
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: LD_INT 3
50024: NEG
50025: PUSH
50026: LD_INT 2
50028: NEG
50029: PUSH
50030: EMPTY
50031: LIST
50032: LIST
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: LIST
50038: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
50039: LD_ADDR_VAR 0 47
50043: PUSH
50044: LD_INT 2
50046: NEG
50047: PUSH
50048: LD_INT 3
50050: NEG
50051: PUSH
50052: EMPTY
50053: LIST
50054: LIST
50055: PUSH
50056: LD_INT 1
50058: NEG
50059: PUSH
50060: LD_INT 3
50062: NEG
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
50072: LD_ADDR_VAR 0 48
50076: PUSH
50077: LD_INT 1
50079: PUSH
50080: LD_INT 2
50082: NEG
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: PUSH
50088: LD_INT 2
50090: PUSH
50091: LD_INT 1
50093: NEG
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
50103: LD_ADDR_VAR 0 49
50107: PUSH
50108: LD_INT 3
50110: PUSH
50111: LD_INT 1
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: LD_INT 3
50120: PUSH
50121: LD_INT 2
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
50132: LD_ADDR_VAR 0 50
50136: PUSH
50137: LD_INT 2
50139: PUSH
50140: LD_INT 3
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: LD_INT 1
50149: PUSH
50150: LD_INT 3
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
50161: LD_ADDR_VAR 0 51
50165: PUSH
50166: LD_INT 1
50168: NEG
50169: PUSH
50170: LD_INT 2
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 2
50179: NEG
50180: PUSH
50181: LD_INT 1
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50192: LD_ADDR_VAR 0 52
50196: PUSH
50197: LD_INT 3
50199: NEG
50200: PUSH
50201: LD_INT 1
50203: NEG
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: PUSH
50209: LD_INT 3
50211: NEG
50212: PUSH
50213: LD_INT 2
50215: NEG
50216: PUSH
50217: EMPTY
50218: LIST
50219: LIST
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50225: LD_ADDR_VAR 0 53
50229: PUSH
50230: LD_INT 1
50232: NEG
50233: PUSH
50234: LD_INT 3
50236: NEG
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: LD_INT 0
50244: PUSH
50245: LD_INT 3
50247: NEG
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: PUSH
50253: LD_INT 1
50255: PUSH
50256: LD_INT 2
50258: NEG
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: PUSH
50264: EMPTY
50265: LIST
50266: LIST
50267: LIST
50268: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50269: LD_ADDR_VAR 0 54
50273: PUSH
50274: LD_INT 2
50276: PUSH
50277: LD_INT 1
50279: NEG
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: PUSH
50285: LD_INT 3
50287: PUSH
50288: LD_INT 0
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 3
50297: PUSH
50298: LD_INT 1
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: LIST
50309: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50310: LD_ADDR_VAR 0 55
50314: PUSH
50315: LD_INT 3
50317: PUSH
50318: LD_INT 2
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: LD_INT 3
50327: PUSH
50328: LD_INT 3
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: LD_INT 2
50337: PUSH
50338: LD_INT 3
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: PUSH
50345: EMPTY
50346: LIST
50347: LIST
50348: LIST
50349: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50350: LD_ADDR_VAR 0 56
50354: PUSH
50355: LD_INT 1
50357: PUSH
50358: LD_INT 3
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 0
50367: PUSH
50368: LD_INT 3
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: PUSH
50375: LD_INT 1
50377: NEG
50378: PUSH
50379: LD_INT 2
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: LIST
50390: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50391: LD_ADDR_VAR 0 57
50395: PUSH
50396: LD_INT 2
50398: NEG
50399: PUSH
50400: LD_INT 1
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 3
50409: NEG
50410: PUSH
50411: LD_INT 0
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: LD_INT 3
50420: NEG
50421: PUSH
50422: LD_INT 1
50424: NEG
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: LIST
50434: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50435: LD_ADDR_VAR 0 58
50439: PUSH
50440: LD_INT 2
50442: NEG
50443: PUSH
50444: LD_INT 3
50446: NEG
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: PUSH
50452: LD_INT 3
50454: NEG
50455: PUSH
50456: LD_INT 2
50458: NEG
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PUSH
50464: LD_INT 3
50466: NEG
50467: PUSH
50468: LD_INT 3
50470: NEG
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: LIST
50480: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
50481: LD_ADDR_VAR 0 59
50485: PUSH
50486: LD_INT 1
50488: NEG
50489: PUSH
50490: LD_INT 2
50492: NEG
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: PUSH
50498: LD_INT 0
50500: PUSH
50501: LD_INT 2
50503: NEG
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: PUSH
50509: LD_INT 1
50511: PUSH
50512: LD_INT 1
50514: NEG
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: LIST
50524: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50525: LD_ADDR_VAR 0 60
50529: PUSH
50530: LD_INT 1
50532: PUSH
50533: LD_INT 1
50535: NEG
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: LD_INT 2
50543: PUSH
50544: LD_INT 0
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: LD_INT 2
50553: PUSH
50554: LD_INT 1
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: EMPTY
50562: LIST
50563: LIST
50564: LIST
50565: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50566: LD_ADDR_VAR 0 61
50570: PUSH
50571: LD_INT 2
50573: PUSH
50574: LD_INT 1
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: LD_INT 2
50583: PUSH
50584: LD_INT 2
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: PUSH
50591: LD_INT 1
50593: PUSH
50594: LD_INT 2
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: LIST
50605: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50606: LD_ADDR_VAR 0 62
50610: PUSH
50611: LD_INT 1
50613: PUSH
50614: LD_INT 2
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: PUSH
50621: LD_INT 0
50623: PUSH
50624: LD_INT 2
50626: PUSH
50627: EMPTY
50628: LIST
50629: LIST
50630: PUSH
50631: LD_INT 1
50633: NEG
50634: PUSH
50635: LD_INT 1
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: LIST
50646: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50647: LD_ADDR_VAR 0 63
50651: PUSH
50652: LD_INT 1
50654: NEG
50655: PUSH
50656: LD_INT 1
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: PUSH
50663: LD_INT 2
50665: NEG
50666: PUSH
50667: LD_INT 0
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: PUSH
50674: LD_INT 2
50676: NEG
50677: PUSH
50678: LD_INT 1
50680: NEG
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: LIST
50690: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50691: LD_ADDR_VAR 0 64
50695: PUSH
50696: LD_INT 1
50698: NEG
50699: PUSH
50700: LD_INT 2
50702: NEG
50703: PUSH
50704: EMPTY
50705: LIST
50706: LIST
50707: PUSH
50708: LD_INT 2
50710: NEG
50711: PUSH
50712: LD_INT 1
50714: NEG
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PUSH
50720: LD_INT 2
50722: NEG
50723: PUSH
50724: LD_INT 2
50726: NEG
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: EMPTY
50733: LIST
50734: LIST
50735: LIST
50736: ST_TO_ADDR
// end ; 2 :
50737: GO 54003
50739: LD_INT 2
50741: DOUBLE
50742: EQUAL
50743: IFTRUE 50747
50745: GO 54002
50747: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
50748: LD_ADDR_VAR 0 29
50752: PUSH
50753: LD_INT 4
50755: PUSH
50756: LD_INT 0
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 4
50765: PUSH
50766: LD_INT 1
50768: NEG
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 5
50776: PUSH
50777: LD_INT 0
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: PUSH
50784: LD_INT 5
50786: PUSH
50787: LD_INT 1
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: PUSH
50794: LD_INT 4
50796: PUSH
50797: LD_INT 1
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: PUSH
50804: LD_INT 3
50806: PUSH
50807: LD_INT 0
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: PUSH
50814: LD_INT 3
50816: PUSH
50817: LD_INT 1
50819: NEG
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 3
50827: PUSH
50828: LD_INT 2
50830: NEG
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 5
50838: PUSH
50839: LD_INT 2
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: LD_INT 3
50848: PUSH
50849: LD_INT 3
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: PUSH
50856: LD_INT 3
50858: PUSH
50859: LD_INT 2
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: LD_INT 4
50868: PUSH
50869: LD_INT 3
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: LD_INT 4
50878: PUSH
50879: LD_INT 4
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 3
50888: PUSH
50889: LD_INT 4
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: LD_INT 2
50898: PUSH
50899: LD_INT 3
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 2
50908: PUSH
50909: LD_INT 2
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: LD_INT 4
50918: PUSH
50919: LD_INT 2
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: PUSH
50926: LD_INT 2
50928: PUSH
50929: LD_INT 4
50931: PUSH
50932: EMPTY
50933: LIST
50934: LIST
50935: PUSH
50936: LD_INT 0
50938: PUSH
50939: LD_INT 4
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: PUSH
50946: LD_INT 0
50948: PUSH
50949: LD_INT 3
50951: PUSH
50952: EMPTY
50953: LIST
50954: LIST
50955: PUSH
50956: LD_INT 1
50958: PUSH
50959: LD_INT 4
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: PUSH
50966: LD_INT 1
50968: PUSH
50969: LD_INT 5
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: PUSH
50976: LD_INT 0
50978: PUSH
50979: LD_INT 5
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: PUSH
50986: LD_INT 1
50988: NEG
50989: PUSH
50990: LD_INT 4
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: PUSH
50997: LD_INT 1
50999: NEG
51000: PUSH
51001: LD_INT 3
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: PUSH
51008: LD_INT 2
51010: PUSH
51011: LD_INT 5
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PUSH
51018: LD_INT 2
51020: NEG
51021: PUSH
51022: LD_INT 3
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: LD_INT 3
51031: NEG
51032: PUSH
51033: LD_INT 0
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: LD_INT 3
51042: NEG
51043: PUSH
51044: LD_INT 1
51046: NEG
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 2
51054: NEG
51055: PUSH
51056: LD_INT 0
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: PUSH
51063: LD_INT 2
51065: NEG
51066: PUSH
51067: LD_INT 1
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: LD_INT 3
51076: NEG
51077: PUSH
51078: LD_INT 1
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: LD_INT 4
51087: NEG
51088: PUSH
51089: LD_INT 0
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: LD_INT 4
51098: NEG
51099: PUSH
51100: LD_INT 1
51102: NEG
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: PUSH
51108: LD_INT 4
51110: NEG
51111: PUSH
51112: LD_INT 2
51114: NEG
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: LD_INT 2
51122: NEG
51123: PUSH
51124: LD_INT 2
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PUSH
51131: LD_INT 4
51133: NEG
51134: PUSH
51135: LD_INT 4
51137: NEG
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 4
51145: NEG
51146: PUSH
51147: LD_INT 5
51149: NEG
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 3
51157: NEG
51158: PUSH
51159: LD_INT 4
51161: NEG
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: LD_INT 3
51169: NEG
51170: PUSH
51171: LD_INT 3
51173: NEG
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: LD_INT 4
51181: NEG
51182: PUSH
51183: LD_INT 3
51185: NEG
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: PUSH
51191: LD_INT 5
51193: NEG
51194: PUSH
51195: LD_INT 4
51197: NEG
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: LD_INT 5
51205: NEG
51206: PUSH
51207: LD_INT 5
51209: NEG
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: LD_INT 3
51217: NEG
51218: PUSH
51219: LD_INT 5
51221: NEG
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: PUSH
51227: LD_INT 5
51229: NEG
51230: PUSH
51231: LD_INT 3
51233: NEG
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: LIST
51243: LIST
51244: LIST
51245: LIST
51246: LIST
51247: LIST
51248: LIST
51249: LIST
51250: LIST
51251: LIST
51252: LIST
51253: LIST
51254: LIST
51255: LIST
51256: LIST
51257: LIST
51258: LIST
51259: LIST
51260: LIST
51261: LIST
51262: LIST
51263: LIST
51264: LIST
51265: LIST
51266: LIST
51267: LIST
51268: LIST
51269: LIST
51270: LIST
51271: LIST
51272: LIST
51273: LIST
51274: LIST
51275: LIST
51276: LIST
51277: LIST
51278: LIST
51279: LIST
51280: LIST
51281: LIST
51282: LIST
51283: LIST
51284: LIST
51285: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
51286: LD_ADDR_VAR 0 30
51290: PUSH
51291: LD_INT 4
51293: PUSH
51294: LD_INT 4
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: PUSH
51301: LD_INT 4
51303: PUSH
51304: LD_INT 3
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: PUSH
51311: LD_INT 5
51313: PUSH
51314: LD_INT 4
51316: PUSH
51317: EMPTY
51318: LIST
51319: LIST
51320: PUSH
51321: LD_INT 5
51323: PUSH
51324: LD_INT 5
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: PUSH
51331: LD_INT 4
51333: PUSH
51334: LD_INT 5
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: PUSH
51341: LD_INT 3
51343: PUSH
51344: LD_INT 4
51346: PUSH
51347: EMPTY
51348: LIST
51349: LIST
51350: PUSH
51351: LD_INT 3
51353: PUSH
51354: LD_INT 3
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: PUSH
51361: LD_INT 5
51363: PUSH
51364: LD_INT 3
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: LD_INT 3
51373: PUSH
51374: LD_INT 5
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: LD_INT 0
51383: PUSH
51384: LD_INT 3
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 0
51393: PUSH
51394: LD_INT 2
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 1
51403: PUSH
51404: LD_INT 3
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: LD_INT 1
51413: PUSH
51414: LD_INT 4
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 0
51423: PUSH
51424: LD_INT 4
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: LD_INT 1
51433: NEG
51434: PUSH
51435: LD_INT 3
51437: PUSH
51438: EMPTY
51439: LIST
51440: LIST
51441: PUSH
51442: LD_INT 1
51444: NEG
51445: PUSH
51446: LD_INT 2
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 2
51455: PUSH
51456: LD_INT 4
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: PUSH
51463: LD_INT 2
51465: NEG
51466: PUSH
51467: LD_INT 2
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: LD_INT 4
51476: NEG
51477: PUSH
51478: LD_INT 0
51480: PUSH
51481: EMPTY
51482: LIST
51483: LIST
51484: PUSH
51485: LD_INT 4
51487: NEG
51488: PUSH
51489: LD_INT 1
51491: NEG
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: LD_INT 3
51499: NEG
51500: PUSH
51501: LD_INT 0
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: LD_INT 3
51510: NEG
51511: PUSH
51512: LD_INT 1
51514: PUSH
51515: EMPTY
51516: LIST
51517: LIST
51518: PUSH
51519: LD_INT 4
51521: NEG
51522: PUSH
51523: LD_INT 1
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: LD_INT 5
51532: NEG
51533: PUSH
51534: LD_INT 0
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 5
51543: NEG
51544: PUSH
51545: LD_INT 1
51547: NEG
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: PUSH
51553: LD_INT 5
51555: NEG
51556: PUSH
51557: LD_INT 2
51559: NEG
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: PUSH
51565: LD_INT 3
51567: NEG
51568: PUSH
51569: LD_INT 2
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: PUSH
51576: LD_INT 3
51578: NEG
51579: PUSH
51580: LD_INT 3
51582: NEG
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PUSH
51588: LD_INT 3
51590: NEG
51591: PUSH
51592: LD_INT 4
51594: NEG
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 2
51602: NEG
51603: PUSH
51604: LD_INT 3
51606: NEG
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PUSH
51612: LD_INT 2
51614: NEG
51615: PUSH
51616: LD_INT 2
51618: NEG
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: LD_INT 3
51626: NEG
51627: PUSH
51628: LD_INT 2
51630: NEG
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 4
51638: NEG
51639: PUSH
51640: LD_INT 3
51642: NEG
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 4
51650: NEG
51651: PUSH
51652: LD_INT 4
51654: NEG
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: PUSH
51660: LD_INT 2
51662: NEG
51663: PUSH
51664: LD_INT 4
51666: NEG
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: PUSH
51672: LD_INT 4
51674: NEG
51675: PUSH
51676: LD_INT 2
51678: NEG
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 0
51686: PUSH
51687: LD_INT 4
51689: NEG
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PUSH
51695: LD_INT 0
51697: PUSH
51698: LD_INT 5
51700: NEG
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: PUSH
51706: LD_INT 1
51708: PUSH
51709: LD_INT 4
51711: NEG
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: LD_INT 1
51719: PUSH
51720: LD_INT 3
51722: NEG
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: PUSH
51728: LD_INT 0
51730: PUSH
51731: LD_INT 3
51733: NEG
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: LD_INT 1
51741: NEG
51742: PUSH
51743: LD_INT 4
51745: NEG
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: PUSH
51751: LD_INT 1
51753: NEG
51754: PUSH
51755: LD_INT 5
51757: NEG
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: LD_INT 2
51765: PUSH
51766: LD_INT 3
51768: NEG
51769: PUSH
51770: EMPTY
51771: LIST
51772: LIST
51773: PUSH
51774: LD_INT 2
51776: NEG
51777: PUSH
51778: LD_INT 5
51780: NEG
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: PUSH
51786: EMPTY
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: LIST
51799: LIST
51800: LIST
51801: LIST
51802: LIST
51803: LIST
51804: LIST
51805: LIST
51806: LIST
51807: LIST
51808: LIST
51809: LIST
51810: LIST
51811: LIST
51812: LIST
51813: LIST
51814: LIST
51815: LIST
51816: LIST
51817: LIST
51818: LIST
51819: LIST
51820: LIST
51821: LIST
51822: LIST
51823: LIST
51824: LIST
51825: LIST
51826: LIST
51827: LIST
51828: LIST
51829: LIST
51830: LIST
51831: LIST
51832: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
51833: LD_ADDR_VAR 0 31
51837: PUSH
51838: LD_INT 0
51840: PUSH
51841: LD_INT 4
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: PUSH
51848: LD_INT 0
51850: PUSH
51851: LD_INT 3
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: LD_INT 1
51860: PUSH
51861: LD_INT 4
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: PUSH
51868: LD_INT 1
51870: PUSH
51871: LD_INT 5
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: PUSH
51878: LD_INT 0
51880: PUSH
51881: LD_INT 5
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: PUSH
51888: LD_INT 1
51890: NEG
51891: PUSH
51892: LD_INT 4
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: PUSH
51899: LD_INT 1
51901: NEG
51902: PUSH
51903: LD_INT 3
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: LD_INT 2
51912: PUSH
51913: LD_INT 5
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: PUSH
51920: LD_INT 2
51922: NEG
51923: PUSH
51924: LD_INT 3
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: PUSH
51931: LD_INT 3
51933: NEG
51934: PUSH
51935: LD_INT 0
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: PUSH
51942: LD_INT 3
51944: NEG
51945: PUSH
51946: LD_INT 1
51948: NEG
51949: PUSH
51950: EMPTY
51951: LIST
51952: LIST
51953: PUSH
51954: LD_INT 2
51956: NEG
51957: PUSH
51958: LD_INT 0
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: LD_INT 2
51967: NEG
51968: PUSH
51969: LD_INT 1
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PUSH
51976: LD_INT 3
51978: NEG
51979: PUSH
51980: LD_INT 1
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: LD_INT 4
51989: NEG
51990: PUSH
51991: LD_INT 0
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: LD_INT 4
52000: NEG
52001: PUSH
52002: LD_INT 1
52004: NEG
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: PUSH
52010: LD_INT 4
52012: NEG
52013: PUSH
52014: LD_INT 2
52016: NEG
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: PUSH
52022: LD_INT 2
52024: NEG
52025: PUSH
52026: LD_INT 2
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 4
52035: NEG
52036: PUSH
52037: LD_INT 4
52039: NEG
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: LD_INT 4
52047: NEG
52048: PUSH
52049: LD_INT 5
52051: NEG
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: PUSH
52057: LD_INT 3
52059: NEG
52060: PUSH
52061: LD_INT 4
52063: NEG
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: PUSH
52069: LD_INT 3
52071: NEG
52072: PUSH
52073: LD_INT 3
52075: NEG
52076: PUSH
52077: EMPTY
52078: LIST
52079: LIST
52080: PUSH
52081: LD_INT 4
52083: NEG
52084: PUSH
52085: LD_INT 3
52087: NEG
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: PUSH
52093: LD_INT 5
52095: NEG
52096: PUSH
52097: LD_INT 4
52099: NEG
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: LD_INT 5
52107: NEG
52108: PUSH
52109: LD_INT 5
52111: NEG
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: LD_INT 3
52119: NEG
52120: PUSH
52121: LD_INT 5
52123: NEG
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: PUSH
52129: LD_INT 5
52131: NEG
52132: PUSH
52133: LD_INT 3
52135: NEG
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: LD_INT 0
52143: PUSH
52144: LD_INT 3
52146: NEG
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: PUSH
52152: LD_INT 0
52154: PUSH
52155: LD_INT 4
52157: NEG
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: PUSH
52163: LD_INT 1
52165: PUSH
52166: LD_INT 3
52168: NEG
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PUSH
52174: LD_INT 1
52176: PUSH
52177: LD_INT 2
52179: NEG
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PUSH
52185: LD_INT 0
52187: PUSH
52188: LD_INT 2
52190: NEG
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: PUSH
52196: LD_INT 1
52198: NEG
52199: PUSH
52200: LD_INT 3
52202: NEG
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: LD_INT 1
52210: NEG
52211: PUSH
52212: LD_INT 4
52214: NEG
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: LD_INT 2
52222: PUSH
52223: LD_INT 2
52225: NEG
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: LD_INT 2
52233: NEG
52234: PUSH
52235: LD_INT 4
52237: NEG
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 4
52245: PUSH
52246: LD_INT 0
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 4
52255: PUSH
52256: LD_INT 1
52258: NEG
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: LD_INT 5
52266: PUSH
52267: LD_INT 0
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: PUSH
52274: LD_INT 5
52276: PUSH
52277: LD_INT 1
52279: PUSH
52280: EMPTY
52281: LIST
52282: LIST
52283: PUSH
52284: LD_INT 4
52286: PUSH
52287: LD_INT 1
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: PUSH
52294: LD_INT 3
52296: PUSH
52297: LD_INT 0
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: PUSH
52304: LD_INT 3
52306: PUSH
52307: LD_INT 1
52309: NEG
52310: PUSH
52311: EMPTY
52312: LIST
52313: LIST
52314: PUSH
52315: LD_INT 3
52317: PUSH
52318: LD_INT 2
52320: NEG
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PUSH
52326: LD_INT 5
52328: PUSH
52329: LD_INT 2
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: LIST
52355: LIST
52356: LIST
52357: LIST
52358: LIST
52359: LIST
52360: LIST
52361: LIST
52362: LIST
52363: LIST
52364: LIST
52365: LIST
52366: LIST
52367: LIST
52368: LIST
52369: LIST
52370: LIST
52371: LIST
52372: LIST
52373: LIST
52374: LIST
52375: LIST
52376: LIST
52377: LIST
52378: LIST
52379: LIST
52380: LIST
52381: LIST
52382: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
52383: LD_ADDR_VAR 0 32
52387: PUSH
52388: LD_INT 4
52390: NEG
52391: PUSH
52392: LD_INT 0
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: PUSH
52399: LD_INT 4
52401: NEG
52402: PUSH
52403: LD_INT 1
52405: NEG
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: PUSH
52411: LD_INT 3
52413: NEG
52414: PUSH
52415: LD_INT 0
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PUSH
52422: LD_INT 3
52424: NEG
52425: PUSH
52426: LD_INT 1
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: LD_INT 4
52435: NEG
52436: PUSH
52437: LD_INT 1
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: PUSH
52444: LD_INT 5
52446: NEG
52447: PUSH
52448: LD_INT 0
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: LD_INT 5
52457: NEG
52458: PUSH
52459: LD_INT 1
52461: NEG
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: PUSH
52467: LD_INT 5
52469: NEG
52470: PUSH
52471: LD_INT 2
52473: NEG
52474: PUSH
52475: EMPTY
52476: LIST
52477: LIST
52478: PUSH
52479: LD_INT 3
52481: NEG
52482: PUSH
52483: LD_INT 2
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: PUSH
52490: LD_INT 3
52492: NEG
52493: PUSH
52494: LD_INT 3
52496: NEG
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_INT 3
52504: NEG
52505: PUSH
52506: LD_INT 4
52508: NEG
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: PUSH
52514: LD_INT 2
52516: NEG
52517: PUSH
52518: LD_INT 3
52520: NEG
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 2
52528: NEG
52529: PUSH
52530: LD_INT 2
52532: NEG
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: PUSH
52538: LD_INT 3
52540: NEG
52541: PUSH
52542: LD_INT 2
52544: NEG
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: PUSH
52550: LD_INT 4
52552: NEG
52553: PUSH
52554: LD_INT 3
52556: NEG
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: PUSH
52562: LD_INT 4
52564: NEG
52565: PUSH
52566: LD_INT 4
52568: NEG
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: PUSH
52574: LD_INT 2
52576: NEG
52577: PUSH
52578: LD_INT 4
52580: NEG
52581: PUSH
52582: EMPTY
52583: LIST
52584: LIST
52585: PUSH
52586: LD_INT 4
52588: NEG
52589: PUSH
52590: LD_INT 2
52592: NEG
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: PUSH
52598: LD_INT 0
52600: PUSH
52601: LD_INT 4
52603: NEG
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: LD_INT 0
52611: PUSH
52612: LD_INT 5
52614: NEG
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: PUSH
52620: LD_INT 1
52622: PUSH
52623: LD_INT 4
52625: NEG
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: PUSH
52631: LD_INT 1
52633: PUSH
52634: LD_INT 3
52636: NEG
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: PUSH
52642: LD_INT 0
52644: PUSH
52645: LD_INT 3
52647: NEG
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: PUSH
52653: LD_INT 1
52655: NEG
52656: PUSH
52657: LD_INT 4
52659: NEG
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: PUSH
52665: LD_INT 1
52667: NEG
52668: PUSH
52669: LD_INT 5
52671: NEG
52672: PUSH
52673: EMPTY
52674: LIST
52675: LIST
52676: PUSH
52677: LD_INT 2
52679: PUSH
52680: LD_INT 3
52682: NEG
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: PUSH
52688: LD_INT 2
52690: NEG
52691: PUSH
52692: LD_INT 5
52694: NEG
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: PUSH
52700: LD_INT 3
52702: PUSH
52703: LD_INT 0
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: PUSH
52710: LD_INT 3
52712: PUSH
52713: LD_INT 1
52715: NEG
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: PUSH
52721: LD_INT 4
52723: PUSH
52724: LD_INT 0
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: PUSH
52731: LD_INT 4
52733: PUSH
52734: LD_INT 1
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: LD_INT 3
52743: PUSH
52744: LD_INT 1
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: PUSH
52751: LD_INT 2
52753: PUSH
52754: LD_INT 0
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: PUSH
52761: LD_INT 2
52763: PUSH
52764: LD_INT 1
52766: NEG
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: PUSH
52772: LD_INT 2
52774: PUSH
52775: LD_INT 2
52777: NEG
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: PUSH
52783: LD_INT 4
52785: PUSH
52786: LD_INT 2
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: LD_INT 4
52795: PUSH
52796: LD_INT 4
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: PUSH
52803: LD_INT 4
52805: PUSH
52806: LD_INT 3
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: PUSH
52813: LD_INT 5
52815: PUSH
52816: LD_INT 4
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: PUSH
52823: LD_INT 5
52825: PUSH
52826: LD_INT 5
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: PUSH
52833: LD_INT 4
52835: PUSH
52836: LD_INT 5
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: PUSH
52843: LD_INT 3
52845: PUSH
52846: LD_INT 4
52848: PUSH
52849: EMPTY
52850: LIST
52851: LIST
52852: PUSH
52853: LD_INT 3
52855: PUSH
52856: LD_INT 3
52858: PUSH
52859: EMPTY
52860: LIST
52861: LIST
52862: PUSH
52863: LD_INT 5
52865: PUSH
52866: LD_INT 3
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: LD_INT 3
52875: PUSH
52876: LD_INT 5
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: LIST
52887: LIST
52888: LIST
52889: LIST
52890: LIST
52891: LIST
52892: LIST
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: LIST
52898: LIST
52899: LIST
52900: LIST
52901: LIST
52902: LIST
52903: LIST
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: LIST
52910: LIST
52911: LIST
52912: LIST
52913: LIST
52914: LIST
52915: LIST
52916: LIST
52917: LIST
52918: LIST
52919: LIST
52920: LIST
52921: LIST
52922: LIST
52923: LIST
52924: LIST
52925: LIST
52926: LIST
52927: LIST
52928: LIST
52929: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
52930: LD_ADDR_VAR 0 33
52934: PUSH
52935: LD_INT 4
52937: NEG
52938: PUSH
52939: LD_INT 4
52941: NEG
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: LD_INT 4
52949: NEG
52950: PUSH
52951: LD_INT 5
52953: NEG
52954: PUSH
52955: EMPTY
52956: LIST
52957: LIST
52958: PUSH
52959: LD_INT 3
52961: NEG
52962: PUSH
52963: LD_INT 4
52965: NEG
52966: PUSH
52967: EMPTY
52968: LIST
52969: LIST
52970: PUSH
52971: LD_INT 3
52973: NEG
52974: PUSH
52975: LD_INT 3
52977: NEG
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: PUSH
52983: LD_INT 4
52985: NEG
52986: PUSH
52987: LD_INT 3
52989: NEG
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: PUSH
52995: LD_INT 5
52997: NEG
52998: PUSH
52999: LD_INT 4
53001: NEG
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: PUSH
53007: LD_INT 5
53009: NEG
53010: PUSH
53011: LD_INT 5
53013: NEG
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: PUSH
53019: LD_INT 3
53021: NEG
53022: PUSH
53023: LD_INT 5
53025: NEG
53026: PUSH
53027: EMPTY
53028: LIST
53029: LIST
53030: PUSH
53031: LD_INT 5
53033: NEG
53034: PUSH
53035: LD_INT 3
53037: NEG
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: PUSH
53043: LD_INT 0
53045: PUSH
53046: LD_INT 3
53048: NEG
53049: PUSH
53050: EMPTY
53051: LIST
53052: LIST
53053: PUSH
53054: LD_INT 0
53056: PUSH
53057: LD_INT 4
53059: NEG
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: PUSH
53065: LD_INT 1
53067: PUSH
53068: LD_INT 3
53070: NEG
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: PUSH
53076: LD_INT 1
53078: PUSH
53079: LD_INT 2
53081: NEG
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: PUSH
53087: LD_INT 0
53089: PUSH
53090: LD_INT 2
53092: NEG
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: PUSH
53098: LD_INT 1
53100: NEG
53101: PUSH
53102: LD_INT 3
53104: NEG
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: PUSH
53110: LD_INT 1
53112: NEG
53113: PUSH
53114: LD_INT 4
53116: NEG
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: PUSH
53122: LD_INT 2
53124: PUSH
53125: LD_INT 2
53127: NEG
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PUSH
53133: LD_INT 2
53135: NEG
53136: PUSH
53137: LD_INT 4
53139: NEG
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: LD_INT 4
53147: PUSH
53148: LD_INT 0
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: PUSH
53155: LD_INT 4
53157: PUSH
53158: LD_INT 1
53160: NEG
53161: PUSH
53162: EMPTY
53163: LIST
53164: LIST
53165: PUSH
53166: LD_INT 5
53168: PUSH
53169: LD_INT 0
53171: PUSH
53172: EMPTY
53173: LIST
53174: LIST
53175: PUSH
53176: LD_INT 5
53178: PUSH
53179: LD_INT 1
53181: PUSH
53182: EMPTY
53183: LIST
53184: LIST
53185: PUSH
53186: LD_INT 4
53188: PUSH
53189: LD_INT 1
53191: PUSH
53192: EMPTY
53193: LIST
53194: LIST
53195: PUSH
53196: LD_INT 3
53198: PUSH
53199: LD_INT 0
53201: PUSH
53202: EMPTY
53203: LIST
53204: LIST
53205: PUSH
53206: LD_INT 3
53208: PUSH
53209: LD_INT 1
53211: NEG
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: LD_INT 3
53219: PUSH
53220: LD_INT 2
53222: NEG
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: LD_INT 5
53230: PUSH
53231: LD_INT 2
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: LD_INT 3
53240: PUSH
53241: LD_INT 3
53243: PUSH
53244: EMPTY
53245: LIST
53246: LIST
53247: PUSH
53248: LD_INT 3
53250: PUSH
53251: LD_INT 2
53253: PUSH
53254: EMPTY
53255: LIST
53256: LIST
53257: PUSH
53258: LD_INT 4
53260: PUSH
53261: LD_INT 3
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: PUSH
53268: LD_INT 4
53270: PUSH
53271: LD_INT 4
53273: PUSH
53274: EMPTY
53275: LIST
53276: LIST
53277: PUSH
53278: LD_INT 3
53280: PUSH
53281: LD_INT 4
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: PUSH
53288: LD_INT 2
53290: PUSH
53291: LD_INT 3
53293: PUSH
53294: EMPTY
53295: LIST
53296: LIST
53297: PUSH
53298: LD_INT 2
53300: PUSH
53301: LD_INT 2
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: LD_INT 4
53310: PUSH
53311: LD_INT 2
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: PUSH
53318: LD_INT 2
53320: PUSH
53321: LD_INT 4
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: PUSH
53328: LD_INT 0
53330: PUSH
53331: LD_INT 4
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: LD_INT 0
53340: PUSH
53341: LD_INT 3
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 1
53350: PUSH
53351: LD_INT 4
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: PUSH
53358: LD_INT 1
53360: PUSH
53361: LD_INT 5
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: LD_INT 0
53370: PUSH
53371: LD_INT 5
53373: PUSH
53374: EMPTY
53375: LIST
53376: LIST
53377: PUSH
53378: LD_INT 1
53380: NEG
53381: PUSH
53382: LD_INT 4
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: LD_INT 1
53391: NEG
53392: PUSH
53393: LD_INT 3
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: PUSH
53400: LD_INT 2
53402: PUSH
53403: LD_INT 5
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: LD_INT 2
53412: NEG
53413: PUSH
53414: LD_INT 3
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: LIST
53429: LIST
53430: LIST
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: LIST
53436: LIST
53437: LIST
53438: LIST
53439: LIST
53440: LIST
53441: LIST
53442: LIST
53443: LIST
53444: LIST
53445: LIST
53446: LIST
53447: LIST
53448: LIST
53449: LIST
53450: LIST
53451: LIST
53452: LIST
53453: LIST
53454: LIST
53455: LIST
53456: LIST
53457: LIST
53458: LIST
53459: LIST
53460: LIST
53461: LIST
53462: LIST
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
53468: LD_ADDR_VAR 0 34
53472: PUSH
53473: LD_INT 0
53475: PUSH
53476: LD_INT 4
53478: NEG
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: PUSH
53484: LD_INT 0
53486: PUSH
53487: LD_INT 5
53489: NEG
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 1
53497: PUSH
53498: LD_INT 4
53500: NEG
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 1
53508: PUSH
53509: LD_INT 3
53511: NEG
53512: PUSH
53513: EMPTY
53514: LIST
53515: LIST
53516: PUSH
53517: LD_INT 0
53519: PUSH
53520: LD_INT 3
53522: NEG
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: LD_INT 1
53530: NEG
53531: PUSH
53532: LD_INT 4
53534: NEG
53535: PUSH
53536: EMPTY
53537: LIST
53538: LIST
53539: PUSH
53540: LD_INT 1
53542: NEG
53543: PUSH
53544: LD_INT 5
53546: NEG
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 2
53554: PUSH
53555: LD_INT 3
53557: NEG
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: PUSH
53563: LD_INT 2
53565: NEG
53566: PUSH
53567: LD_INT 5
53569: NEG
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: PUSH
53575: LD_INT 3
53577: PUSH
53578: LD_INT 0
53580: PUSH
53581: EMPTY
53582: LIST
53583: LIST
53584: PUSH
53585: LD_INT 3
53587: PUSH
53588: LD_INT 1
53590: NEG
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: PUSH
53596: LD_INT 4
53598: PUSH
53599: LD_INT 0
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: LD_INT 4
53608: PUSH
53609: LD_INT 1
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: PUSH
53616: LD_INT 3
53618: PUSH
53619: LD_INT 1
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: PUSH
53626: LD_INT 2
53628: PUSH
53629: LD_INT 0
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: LD_INT 2
53638: PUSH
53639: LD_INT 1
53641: NEG
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: LD_INT 2
53649: PUSH
53650: LD_INT 2
53652: NEG
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: LD_INT 4
53660: PUSH
53661: LD_INT 2
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: LD_INT 4
53670: PUSH
53671: LD_INT 4
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: PUSH
53678: LD_INT 4
53680: PUSH
53681: LD_INT 3
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 5
53690: PUSH
53691: LD_INT 4
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 5
53700: PUSH
53701: LD_INT 5
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: LD_INT 4
53710: PUSH
53711: LD_INT 5
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 3
53720: PUSH
53721: LD_INT 4
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 3
53730: PUSH
53731: LD_INT 3
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: LD_INT 5
53740: PUSH
53741: LD_INT 3
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 3
53750: PUSH
53751: LD_INT 5
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_INT 0
53760: PUSH
53761: LD_INT 3
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 0
53770: PUSH
53771: LD_INT 2
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: LD_INT 1
53780: PUSH
53781: LD_INT 3
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: PUSH
53788: LD_INT 1
53790: PUSH
53791: LD_INT 4
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: PUSH
53798: LD_INT 0
53800: PUSH
53801: LD_INT 4
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: PUSH
53808: LD_INT 1
53810: NEG
53811: PUSH
53812: LD_INT 3
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: PUSH
53819: LD_INT 1
53821: NEG
53822: PUSH
53823: LD_INT 2
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: LD_INT 2
53832: PUSH
53833: LD_INT 4
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: PUSH
53840: LD_INT 2
53842: NEG
53843: PUSH
53844: LD_INT 2
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: PUSH
53851: LD_INT 4
53853: NEG
53854: PUSH
53855: LD_INT 0
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: LD_INT 4
53864: NEG
53865: PUSH
53866: LD_INT 1
53868: NEG
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 3
53876: NEG
53877: PUSH
53878: LD_INT 0
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: LD_INT 3
53887: NEG
53888: PUSH
53889: LD_INT 1
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 4
53898: NEG
53899: PUSH
53900: LD_INT 1
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: PUSH
53907: LD_INT 5
53909: NEG
53910: PUSH
53911: LD_INT 0
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: PUSH
53918: LD_INT 5
53920: NEG
53921: PUSH
53922: LD_INT 1
53924: NEG
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: PUSH
53930: LD_INT 5
53932: NEG
53933: PUSH
53934: LD_INT 2
53936: NEG
53937: PUSH
53938: EMPTY
53939: LIST
53940: LIST
53941: PUSH
53942: LD_INT 3
53944: NEG
53945: PUSH
53946: LD_INT 2
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: LIST
53957: LIST
53958: LIST
53959: LIST
53960: LIST
53961: LIST
53962: LIST
53963: LIST
53964: LIST
53965: LIST
53966: LIST
53967: LIST
53968: LIST
53969: LIST
53970: LIST
53971: LIST
53972: LIST
53973: LIST
53974: LIST
53975: LIST
53976: LIST
53977: LIST
53978: LIST
53979: LIST
53980: LIST
53981: LIST
53982: LIST
53983: LIST
53984: LIST
53985: LIST
53986: LIST
53987: LIST
53988: LIST
53989: LIST
53990: LIST
53991: LIST
53992: LIST
53993: LIST
53994: LIST
53995: LIST
53996: LIST
53997: LIST
53998: LIST
53999: ST_TO_ADDR
// end ; end ;
54000: GO 54003
54002: POP
// case btype of b_depot , b_warehouse :
54003: LD_VAR 0 1
54007: PUSH
54008: LD_INT 0
54010: DOUBLE
54011: EQUAL
54012: IFTRUE 54022
54014: LD_INT 1
54016: DOUBLE
54017: EQUAL
54018: IFTRUE 54022
54020: GO 54223
54022: POP
// case nation of nation_american :
54023: LD_VAR 0 5
54027: PUSH
54028: LD_INT 1
54030: DOUBLE
54031: EQUAL
54032: IFTRUE 54036
54034: GO 54092
54036: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
54037: LD_ADDR_VAR 0 9
54041: PUSH
54042: LD_VAR 0 11
54046: PUSH
54047: LD_VAR 0 12
54051: PUSH
54052: LD_VAR 0 13
54056: PUSH
54057: LD_VAR 0 14
54061: PUSH
54062: LD_VAR 0 15
54066: PUSH
54067: LD_VAR 0 16
54071: PUSH
54072: EMPTY
54073: LIST
54074: LIST
54075: LIST
54076: LIST
54077: LIST
54078: LIST
54079: PUSH
54080: LD_VAR 0 4
54084: PUSH
54085: LD_INT 1
54087: PLUS
54088: ARRAY
54089: ST_TO_ADDR
54090: GO 54221
54092: LD_INT 2
54094: DOUBLE
54095: EQUAL
54096: IFTRUE 54100
54098: GO 54156
54100: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
54101: LD_ADDR_VAR 0 9
54105: PUSH
54106: LD_VAR 0 17
54110: PUSH
54111: LD_VAR 0 18
54115: PUSH
54116: LD_VAR 0 19
54120: PUSH
54121: LD_VAR 0 20
54125: PUSH
54126: LD_VAR 0 21
54130: PUSH
54131: LD_VAR 0 22
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: LIST
54143: PUSH
54144: LD_VAR 0 4
54148: PUSH
54149: LD_INT 1
54151: PLUS
54152: ARRAY
54153: ST_TO_ADDR
54154: GO 54221
54156: LD_INT 3
54158: DOUBLE
54159: EQUAL
54160: IFTRUE 54164
54162: GO 54220
54164: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
54165: LD_ADDR_VAR 0 9
54169: PUSH
54170: LD_VAR 0 23
54174: PUSH
54175: LD_VAR 0 24
54179: PUSH
54180: LD_VAR 0 25
54184: PUSH
54185: LD_VAR 0 26
54189: PUSH
54190: LD_VAR 0 27
54194: PUSH
54195: LD_VAR 0 28
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: LIST
54204: LIST
54205: LIST
54206: LIST
54207: PUSH
54208: LD_VAR 0 4
54212: PUSH
54213: LD_INT 1
54215: PLUS
54216: ARRAY
54217: ST_TO_ADDR
54218: GO 54221
54220: POP
54221: GO 54776
54223: LD_INT 2
54225: DOUBLE
54226: EQUAL
54227: IFTRUE 54237
54229: LD_INT 3
54231: DOUBLE
54232: EQUAL
54233: IFTRUE 54237
54235: GO 54293
54237: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
54238: LD_ADDR_VAR 0 9
54242: PUSH
54243: LD_VAR 0 29
54247: PUSH
54248: LD_VAR 0 30
54252: PUSH
54253: LD_VAR 0 31
54257: PUSH
54258: LD_VAR 0 32
54262: PUSH
54263: LD_VAR 0 33
54267: PUSH
54268: LD_VAR 0 34
54272: PUSH
54273: EMPTY
54274: LIST
54275: LIST
54276: LIST
54277: LIST
54278: LIST
54279: LIST
54280: PUSH
54281: LD_VAR 0 4
54285: PUSH
54286: LD_INT 1
54288: PLUS
54289: ARRAY
54290: ST_TO_ADDR
54291: GO 54776
54293: LD_INT 16
54295: DOUBLE
54296: EQUAL
54297: IFTRUE 54355
54299: LD_INT 17
54301: DOUBLE
54302: EQUAL
54303: IFTRUE 54355
54305: LD_INT 18
54307: DOUBLE
54308: EQUAL
54309: IFTRUE 54355
54311: LD_INT 19
54313: DOUBLE
54314: EQUAL
54315: IFTRUE 54355
54317: LD_INT 22
54319: DOUBLE
54320: EQUAL
54321: IFTRUE 54355
54323: LD_INT 20
54325: DOUBLE
54326: EQUAL
54327: IFTRUE 54355
54329: LD_INT 21
54331: DOUBLE
54332: EQUAL
54333: IFTRUE 54355
54335: LD_INT 23
54337: DOUBLE
54338: EQUAL
54339: IFTRUE 54355
54341: LD_INT 24
54343: DOUBLE
54344: EQUAL
54345: IFTRUE 54355
54347: LD_INT 25
54349: DOUBLE
54350: EQUAL
54351: IFTRUE 54355
54353: GO 54411
54355: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
54356: LD_ADDR_VAR 0 9
54360: PUSH
54361: LD_VAR 0 35
54365: PUSH
54366: LD_VAR 0 36
54370: PUSH
54371: LD_VAR 0 37
54375: PUSH
54376: LD_VAR 0 38
54380: PUSH
54381: LD_VAR 0 39
54385: PUSH
54386: LD_VAR 0 40
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: LIST
54395: LIST
54396: LIST
54397: LIST
54398: PUSH
54399: LD_VAR 0 4
54403: PUSH
54404: LD_INT 1
54406: PLUS
54407: ARRAY
54408: ST_TO_ADDR
54409: GO 54776
54411: LD_INT 6
54413: DOUBLE
54414: EQUAL
54415: IFTRUE 54467
54417: LD_INT 7
54419: DOUBLE
54420: EQUAL
54421: IFTRUE 54467
54423: LD_INT 8
54425: DOUBLE
54426: EQUAL
54427: IFTRUE 54467
54429: LD_INT 13
54431: DOUBLE
54432: EQUAL
54433: IFTRUE 54467
54435: LD_INT 12
54437: DOUBLE
54438: EQUAL
54439: IFTRUE 54467
54441: LD_INT 15
54443: DOUBLE
54444: EQUAL
54445: IFTRUE 54467
54447: LD_INT 11
54449: DOUBLE
54450: EQUAL
54451: IFTRUE 54467
54453: LD_INT 14
54455: DOUBLE
54456: EQUAL
54457: IFTRUE 54467
54459: LD_INT 10
54461: DOUBLE
54462: EQUAL
54463: IFTRUE 54467
54465: GO 54523
54467: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
54468: LD_ADDR_VAR 0 9
54472: PUSH
54473: LD_VAR 0 41
54477: PUSH
54478: LD_VAR 0 42
54482: PUSH
54483: LD_VAR 0 43
54487: PUSH
54488: LD_VAR 0 44
54492: PUSH
54493: LD_VAR 0 45
54497: PUSH
54498: LD_VAR 0 46
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: LIST
54507: LIST
54508: LIST
54509: LIST
54510: PUSH
54511: LD_VAR 0 4
54515: PUSH
54516: LD_INT 1
54518: PLUS
54519: ARRAY
54520: ST_TO_ADDR
54521: GO 54776
54523: LD_INT 36
54525: DOUBLE
54526: EQUAL
54527: IFTRUE 54531
54529: GO 54587
54531: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
54532: LD_ADDR_VAR 0 9
54536: PUSH
54537: LD_VAR 0 47
54541: PUSH
54542: LD_VAR 0 48
54546: PUSH
54547: LD_VAR 0 49
54551: PUSH
54552: LD_VAR 0 50
54556: PUSH
54557: LD_VAR 0 51
54561: PUSH
54562: LD_VAR 0 52
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: PUSH
54575: LD_VAR 0 4
54579: PUSH
54580: LD_INT 1
54582: PLUS
54583: ARRAY
54584: ST_TO_ADDR
54585: GO 54776
54587: LD_INT 4
54589: DOUBLE
54590: EQUAL
54591: IFTRUE 54613
54593: LD_INT 5
54595: DOUBLE
54596: EQUAL
54597: IFTRUE 54613
54599: LD_INT 34
54601: DOUBLE
54602: EQUAL
54603: IFTRUE 54613
54605: LD_INT 37
54607: DOUBLE
54608: EQUAL
54609: IFTRUE 54613
54611: GO 54669
54613: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
54614: LD_ADDR_VAR 0 9
54618: PUSH
54619: LD_VAR 0 53
54623: PUSH
54624: LD_VAR 0 54
54628: PUSH
54629: LD_VAR 0 55
54633: PUSH
54634: LD_VAR 0 56
54638: PUSH
54639: LD_VAR 0 57
54643: PUSH
54644: LD_VAR 0 58
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: LIST
54653: LIST
54654: LIST
54655: LIST
54656: PUSH
54657: LD_VAR 0 4
54661: PUSH
54662: LD_INT 1
54664: PLUS
54665: ARRAY
54666: ST_TO_ADDR
54667: GO 54776
54669: LD_INT 31
54671: DOUBLE
54672: EQUAL
54673: IFTRUE 54719
54675: LD_INT 32
54677: DOUBLE
54678: EQUAL
54679: IFTRUE 54719
54681: LD_INT 33
54683: DOUBLE
54684: EQUAL
54685: IFTRUE 54719
54687: LD_INT 27
54689: DOUBLE
54690: EQUAL
54691: IFTRUE 54719
54693: LD_INT 26
54695: DOUBLE
54696: EQUAL
54697: IFTRUE 54719
54699: LD_INT 28
54701: DOUBLE
54702: EQUAL
54703: IFTRUE 54719
54705: LD_INT 29
54707: DOUBLE
54708: EQUAL
54709: IFTRUE 54719
54711: LD_INT 30
54713: DOUBLE
54714: EQUAL
54715: IFTRUE 54719
54717: GO 54775
54719: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
54720: LD_ADDR_VAR 0 9
54724: PUSH
54725: LD_VAR 0 59
54729: PUSH
54730: LD_VAR 0 60
54734: PUSH
54735: LD_VAR 0 61
54739: PUSH
54740: LD_VAR 0 62
54744: PUSH
54745: LD_VAR 0 63
54749: PUSH
54750: LD_VAR 0 64
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: LIST
54759: LIST
54760: LIST
54761: LIST
54762: PUSH
54763: LD_VAR 0 4
54767: PUSH
54768: LD_INT 1
54770: PLUS
54771: ARRAY
54772: ST_TO_ADDR
54773: GO 54776
54775: POP
// temp_list2 = [ ] ;
54776: LD_ADDR_VAR 0 10
54780: PUSH
54781: EMPTY
54782: ST_TO_ADDR
// for i in temp_list do
54783: LD_ADDR_VAR 0 8
54787: PUSH
54788: LD_VAR 0 9
54792: PUSH
54793: FOR_IN
54794: IFFALSE 54846
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
54796: LD_ADDR_VAR 0 10
54800: PUSH
54801: LD_VAR 0 10
54805: PUSH
54806: LD_VAR 0 8
54810: PUSH
54811: LD_INT 1
54813: ARRAY
54814: PUSH
54815: LD_VAR 0 2
54819: PLUS
54820: PUSH
54821: LD_VAR 0 8
54825: PUSH
54826: LD_INT 2
54828: ARRAY
54829: PUSH
54830: LD_VAR 0 3
54834: PLUS
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: PUSH
54840: EMPTY
54841: LIST
54842: ADD
54843: ST_TO_ADDR
54844: GO 54793
54846: POP
54847: POP
// result = temp_list2 ;
54848: LD_ADDR_VAR 0 7
54852: PUSH
54853: LD_VAR 0 10
54857: ST_TO_ADDR
// end ;
54858: LD_VAR 0 7
54862: RET
// export function EnemyInRange ( unit , dist ) ; begin
54863: LD_INT 0
54865: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
54866: LD_ADDR_VAR 0 3
54870: PUSH
54871: LD_VAR 0 1
54875: PPUSH
54876: CALL_OW 255
54880: PPUSH
54881: LD_VAR 0 1
54885: PPUSH
54886: CALL_OW 250
54890: PPUSH
54891: LD_VAR 0 1
54895: PPUSH
54896: CALL_OW 251
54900: PPUSH
54901: LD_VAR 0 2
54905: PPUSH
54906: CALL 28967 0 4
54910: PUSH
54911: LD_INT 4
54913: ARRAY
54914: ST_TO_ADDR
// end ;
54915: LD_VAR 0 3
54919: RET
// export function PlayerSeeMe ( unit ) ; begin
54920: LD_INT 0
54922: PPUSH
// result := See ( your_side , unit ) ;
54923: LD_ADDR_VAR 0 2
54927: PUSH
54928: LD_OWVAR 2
54932: PPUSH
54933: LD_VAR 0 1
54937: PPUSH
54938: CALL_OW 292
54942: ST_TO_ADDR
// end ;
54943: LD_VAR 0 2
54947: RET
// export function ReverseDir ( unit ) ; begin
54948: LD_INT 0
54950: PPUSH
// if not unit then
54951: LD_VAR 0 1
54955: NOT
54956: IFFALSE 54960
// exit ;
54958: GO 54983
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
54960: LD_ADDR_VAR 0 2
54964: PUSH
54965: LD_VAR 0 1
54969: PPUSH
54970: CALL_OW 254
54974: PUSH
54975: LD_INT 3
54977: PLUS
54978: PUSH
54979: LD_INT 6
54981: MOD
54982: ST_TO_ADDR
// end ;
54983: LD_VAR 0 2
54987: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
54988: LD_INT 0
54990: PPUSH
54991: PPUSH
54992: PPUSH
54993: PPUSH
54994: PPUSH
// if not hexes then
54995: LD_VAR 0 2
54999: NOT
55000: IFFALSE 55004
// exit ;
55002: GO 55152
// dist := 9999 ;
55004: LD_ADDR_VAR 0 5
55008: PUSH
55009: LD_INT 9999
55011: ST_TO_ADDR
// for i = 1 to hexes do
55012: LD_ADDR_VAR 0 4
55016: PUSH
55017: DOUBLE
55018: LD_INT 1
55020: DEC
55021: ST_TO_ADDR
55022: LD_VAR 0 2
55026: PUSH
55027: FOR_TO
55028: IFFALSE 55140
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
55030: LD_VAR 0 1
55034: PPUSH
55035: LD_VAR 0 2
55039: PUSH
55040: LD_VAR 0 4
55044: ARRAY
55045: PUSH
55046: LD_INT 1
55048: ARRAY
55049: PPUSH
55050: LD_VAR 0 2
55054: PUSH
55055: LD_VAR 0 4
55059: ARRAY
55060: PUSH
55061: LD_INT 2
55063: ARRAY
55064: PPUSH
55065: CALL_OW 297
55069: PUSH
55070: LD_VAR 0 5
55074: LESS
55075: IFFALSE 55138
// begin hex := hexes [ i ] ;
55077: LD_ADDR_VAR 0 7
55081: PUSH
55082: LD_VAR 0 2
55086: PUSH
55087: LD_VAR 0 4
55091: ARRAY
55092: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55093: LD_ADDR_VAR 0 5
55097: PUSH
55098: LD_VAR 0 1
55102: PPUSH
55103: LD_VAR 0 2
55107: PUSH
55108: LD_VAR 0 4
55112: ARRAY
55113: PUSH
55114: LD_INT 1
55116: ARRAY
55117: PPUSH
55118: LD_VAR 0 2
55122: PUSH
55123: LD_VAR 0 4
55127: ARRAY
55128: PUSH
55129: LD_INT 2
55131: ARRAY
55132: PPUSH
55133: CALL_OW 297
55137: ST_TO_ADDR
// end ; end ;
55138: GO 55027
55140: POP
55141: POP
// result := hex ;
55142: LD_ADDR_VAR 0 3
55146: PUSH
55147: LD_VAR 0 7
55151: ST_TO_ADDR
// end ;
55152: LD_VAR 0 3
55156: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
55157: LD_INT 0
55159: PPUSH
55160: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
55161: LD_VAR 0 1
55165: NOT
55166: PUSH
55167: LD_VAR 0 1
55171: PUSH
55172: LD_INT 21
55174: PUSH
55175: LD_INT 2
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PUSH
55182: LD_INT 23
55184: PUSH
55185: LD_INT 2
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: PPUSH
55196: CALL_OW 69
55200: IN
55201: NOT
55202: OR
55203: IFFALSE 55207
// exit ;
55205: GO 55254
// for i = 1 to 3 do
55207: LD_ADDR_VAR 0 3
55211: PUSH
55212: DOUBLE
55213: LD_INT 1
55215: DEC
55216: ST_TO_ADDR
55217: LD_INT 3
55219: PUSH
55220: FOR_TO
55221: IFFALSE 55252
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
55223: LD_VAR 0 1
55227: PPUSH
55228: CALL_OW 250
55232: PPUSH
55233: LD_VAR 0 1
55237: PPUSH
55238: CALL_OW 251
55242: PPUSH
55243: LD_INT 1
55245: PPUSH
55246: CALL_OW 453
55250: GO 55220
55252: POP
55253: POP
// end ;
55254: LD_VAR 0 2
55258: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
55259: LD_INT 0
55261: PPUSH
55262: PPUSH
55263: PPUSH
55264: PPUSH
55265: PPUSH
55266: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
55267: LD_VAR 0 1
55271: NOT
55272: PUSH
55273: LD_VAR 0 2
55277: NOT
55278: OR
55279: PUSH
55280: LD_VAR 0 1
55284: PPUSH
55285: CALL_OW 314
55289: OR
55290: IFFALSE 55294
// exit ;
55292: GO 55735
// x := GetX ( enemy_unit ) ;
55294: LD_ADDR_VAR 0 7
55298: PUSH
55299: LD_VAR 0 2
55303: PPUSH
55304: CALL_OW 250
55308: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
55309: LD_ADDR_VAR 0 8
55313: PUSH
55314: LD_VAR 0 2
55318: PPUSH
55319: CALL_OW 251
55323: ST_TO_ADDR
// if not x or not y then
55324: LD_VAR 0 7
55328: NOT
55329: PUSH
55330: LD_VAR 0 8
55334: NOT
55335: OR
55336: IFFALSE 55340
// exit ;
55338: GO 55735
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
55340: LD_ADDR_VAR 0 6
55344: PUSH
55345: LD_VAR 0 7
55349: PPUSH
55350: LD_INT 0
55352: PPUSH
55353: LD_INT 4
55355: PPUSH
55356: CALL_OW 272
55360: PUSH
55361: LD_VAR 0 8
55365: PPUSH
55366: LD_INT 0
55368: PPUSH
55369: LD_INT 4
55371: PPUSH
55372: CALL_OW 273
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: PUSH
55381: LD_VAR 0 7
55385: PPUSH
55386: LD_INT 1
55388: PPUSH
55389: LD_INT 4
55391: PPUSH
55392: CALL_OW 272
55396: PUSH
55397: LD_VAR 0 8
55401: PPUSH
55402: LD_INT 1
55404: PPUSH
55405: LD_INT 4
55407: PPUSH
55408: CALL_OW 273
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: LD_VAR 0 7
55421: PPUSH
55422: LD_INT 2
55424: PPUSH
55425: LD_INT 4
55427: PPUSH
55428: CALL_OW 272
55432: PUSH
55433: LD_VAR 0 8
55437: PPUSH
55438: LD_INT 2
55440: PPUSH
55441: LD_INT 4
55443: PPUSH
55444: CALL_OW 273
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: LD_VAR 0 7
55457: PPUSH
55458: LD_INT 3
55460: PPUSH
55461: LD_INT 4
55463: PPUSH
55464: CALL_OW 272
55468: PUSH
55469: LD_VAR 0 8
55473: PPUSH
55474: LD_INT 3
55476: PPUSH
55477: LD_INT 4
55479: PPUSH
55480: CALL_OW 273
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: LD_VAR 0 7
55493: PPUSH
55494: LD_INT 4
55496: PPUSH
55497: LD_INT 4
55499: PPUSH
55500: CALL_OW 272
55504: PUSH
55505: LD_VAR 0 8
55509: PPUSH
55510: LD_INT 4
55512: PPUSH
55513: LD_INT 4
55515: PPUSH
55516: CALL_OW 273
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: LD_VAR 0 7
55529: PPUSH
55530: LD_INT 5
55532: PPUSH
55533: LD_INT 4
55535: PPUSH
55536: CALL_OW 272
55540: PUSH
55541: LD_VAR 0 8
55545: PPUSH
55546: LD_INT 5
55548: PPUSH
55549: LD_INT 4
55551: PPUSH
55552: CALL_OW 273
55556: PUSH
55557: EMPTY
55558: LIST
55559: LIST
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: LIST
55565: LIST
55566: LIST
55567: LIST
55568: ST_TO_ADDR
// for i = tmp downto 1 do
55569: LD_ADDR_VAR 0 4
55573: PUSH
55574: DOUBLE
55575: LD_VAR 0 6
55579: INC
55580: ST_TO_ADDR
55581: LD_INT 1
55583: PUSH
55584: FOR_DOWNTO
55585: IFFALSE 55686
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
55587: LD_VAR 0 6
55591: PUSH
55592: LD_VAR 0 4
55596: ARRAY
55597: PUSH
55598: LD_INT 1
55600: ARRAY
55601: PPUSH
55602: LD_VAR 0 6
55606: PUSH
55607: LD_VAR 0 4
55611: ARRAY
55612: PUSH
55613: LD_INT 2
55615: ARRAY
55616: PPUSH
55617: CALL_OW 488
55621: NOT
55622: PUSH
55623: LD_VAR 0 6
55627: PUSH
55628: LD_VAR 0 4
55632: ARRAY
55633: PUSH
55634: LD_INT 1
55636: ARRAY
55637: PPUSH
55638: LD_VAR 0 6
55642: PUSH
55643: LD_VAR 0 4
55647: ARRAY
55648: PUSH
55649: LD_INT 2
55651: ARRAY
55652: PPUSH
55653: CALL_OW 428
55657: PUSH
55658: LD_INT 0
55660: NONEQUAL
55661: OR
55662: IFFALSE 55684
// tmp := Delete ( tmp , i ) ;
55664: LD_ADDR_VAR 0 6
55668: PUSH
55669: LD_VAR 0 6
55673: PPUSH
55674: LD_VAR 0 4
55678: PPUSH
55679: CALL_OW 3
55683: ST_TO_ADDR
55684: GO 55584
55686: POP
55687: POP
// j := GetClosestHex ( unit , tmp ) ;
55688: LD_ADDR_VAR 0 5
55692: PUSH
55693: LD_VAR 0 1
55697: PPUSH
55698: LD_VAR 0 6
55702: PPUSH
55703: CALL 54988 0 2
55707: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
55708: LD_VAR 0 1
55712: PPUSH
55713: LD_VAR 0 5
55717: PUSH
55718: LD_INT 1
55720: ARRAY
55721: PPUSH
55722: LD_VAR 0 5
55726: PUSH
55727: LD_INT 2
55729: ARRAY
55730: PPUSH
55731: CALL_OW 111
// end ;
55735: LD_VAR 0 3
55739: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
55740: LD_INT 0
55742: PPUSH
55743: PPUSH
55744: PPUSH
// uc_side = 0 ;
55745: LD_ADDR_OWVAR 20
55749: PUSH
55750: LD_INT 0
55752: ST_TO_ADDR
// uc_nation = 0 ;
55753: LD_ADDR_OWVAR 21
55757: PUSH
55758: LD_INT 0
55760: ST_TO_ADDR
// InitHc_All ( ) ;
55761: CALL_OW 584
// InitVc ;
55765: CALL_OW 20
// if mastodonts then
55769: LD_VAR 0 6
55773: IFFALSE 55840
// for i = 1 to mastodonts do
55775: LD_ADDR_VAR 0 11
55779: PUSH
55780: DOUBLE
55781: LD_INT 1
55783: DEC
55784: ST_TO_ADDR
55785: LD_VAR 0 6
55789: PUSH
55790: FOR_TO
55791: IFFALSE 55838
// begin vc_chassis := 31 ;
55793: LD_ADDR_OWVAR 37
55797: PUSH
55798: LD_INT 31
55800: ST_TO_ADDR
// vc_control := control_rider ;
55801: LD_ADDR_OWVAR 38
55805: PUSH
55806: LD_INT 4
55808: ST_TO_ADDR
// animal := CreateVehicle ;
55809: LD_ADDR_VAR 0 12
55813: PUSH
55814: CALL_OW 45
55818: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55819: LD_VAR 0 12
55823: PPUSH
55824: LD_VAR 0 8
55828: PPUSH
55829: LD_INT 0
55831: PPUSH
55832: CALL 58028 0 3
// end ;
55836: GO 55790
55838: POP
55839: POP
// if horses then
55840: LD_VAR 0 5
55844: IFFALSE 55911
// for i = 1 to horses do
55846: LD_ADDR_VAR 0 11
55850: PUSH
55851: DOUBLE
55852: LD_INT 1
55854: DEC
55855: ST_TO_ADDR
55856: LD_VAR 0 5
55860: PUSH
55861: FOR_TO
55862: IFFALSE 55909
// begin hc_class := 21 ;
55864: LD_ADDR_OWVAR 28
55868: PUSH
55869: LD_INT 21
55871: ST_TO_ADDR
// hc_gallery :=  ;
55872: LD_ADDR_OWVAR 33
55876: PUSH
55877: LD_STRING 
55879: ST_TO_ADDR
// animal := CreateHuman ;
55880: LD_ADDR_VAR 0 12
55884: PUSH
55885: CALL_OW 44
55889: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55890: LD_VAR 0 12
55894: PPUSH
55895: LD_VAR 0 8
55899: PPUSH
55900: LD_INT 0
55902: PPUSH
55903: CALL 58028 0 3
// end ;
55907: GO 55861
55909: POP
55910: POP
// if birds then
55911: LD_VAR 0 1
55915: IFFALSE 55982
// for i = 1 to birds do
55917: LD_ADDR_VAR 0 11
55921: PUSH
55922: DOUBLE
55923: LD_INT 1
55925: DEC
55926: ST_TO_ADDR
55927: LD_VAR 0 1
55931: PUSH
55932: FOR_TO
55933: IFFALSE 55980
// begin hc_class = 18 ;
55935: LD_ADDR_OWVAR 28
55939: PUSH
55940: LD_INT 18
55942: ST_TO_ADDR
// hc_gallery =  ;
55943: LD_ADDR_OWVAR 33
55947: PUSH
55948: LD_STRING 
55950: ST_TO_ADDR
// animal := CreateHuman ;
55951: LD_ADDR_VAR 0 12
55955: PUSH
55956: CALL_OW 44
55960: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55961: LD_VAR 0 12
55965: PPUSH
55966: LD_VAR 0 8
55970: PPUSH
55971: LD_INT 0
55973: PPUSH
55974: CALL 58028 0 3
// end ;
55978: GO 55932
55980: POP
55981: POP
// if tigers then
55982: LD_VAR 0 2
55986: IFFALSE 56070
// for i = 1 to tigers do
55988: LD_ADDR_VAR 0 11
55992: PUSH
55993: DOUBLE
55994: LD_INT 1
55996: DEC
55997: ST_TO_ADDR
55998: LD_VAR 0 2
56002: PUSH
56003: FOR_TO
56004: IFFALSE 56068
// begin hc_class = class_tiger ;
56006: LD_ADDR_OWVAR 28
56010: PUSH
56011: LD_INT 14
56013: ST_TO_ADDR
// hc_gallery =  ;
56014: LD_ADDR_OWVAR 33
56018: PUSH
56019: LD_STRING 
56021: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
56022: LD_ADDR_OWVAR 35
56026: PUSH
56027: LD_INT 7
56029: NEG
56030: PPUSH
56031: LD_INT 7
56033: PPUSH
56034: CALL_OW 12
56038: ST_TO_ADDR
// animal := CreateHuman ;
56039: LD_ADDR_VAR 0 12
56043: PUSH
56044: CALL_OW 44
56048: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56049: LD_VAR 0 12
56053: PPUSH
56054: LD_VAR 0 8
56058: PPUSH
56059: LD_INT 0
56061: PPUSH
56062: CALL 58028 0 3
// end ;
56066: GO 56003
56068: POP
56069: POP
// if apemans then
56070: LD_VAR 0 3
56074: IFFALSE 56197
// for i = 1 to apemans do
56076: LD_ADDR_VAR 0 11
56080: PUSH
56081: DOUBLE
56082: LD_INT 1
56084: DEC
56085: ST_TO_ADDR
56086: LD_VAR 0 3
56090: PUSH
56091: FOR_TO
56092: IFFALSE 56195
// begin hc_class = class_apeman ;
56094: LD_ADDR_OWVAR 28
56098: PUSH
56099: LD_INT 12
56101: ST_TO_ADDR
// hc_gallery =  ;
56102: LD_ADDR_OWVAR 33
56106: PUSH
56107: LD_STRING 
56109: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
56110: LD_ADDR_OWVAR 35
56114: PUSH
56115: LD_INT 5
56117: NEG
56118: PPUSH
56119: LD_INT 5
56121: PPUSH
56122: CALL_OW 12
56126: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
56127: LD_ADDR_OWVAR 31
56131: PUSH
56132: LD_INT 1
56134: PPUSH
56135: LD_INT 3
56137: PPUSH
56138: CALL_OW 12
56142: PUSH
56143: LD_INT 1
56145: PPUSH
56146: LD_INT 3
56148: PPUSH
56149: CALL_OW 12
56153: PUSH
56154: LD_INT 0
56156: PUSH
56157: LD_INT 0
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: LIST
56164: LIST
56165: ST_TO_ADDR
// animal := CreateHuman ;
56166: LD_ADDR_VAR 0 12
56170: PUSH
56171: CALL_OW 44
56175: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56176: LD_VAR 0 12
56180: PPUSH
56181: LD_VAR 0 8
56185: PPUSH
56186: LD_INT 0
56188: PPUSH
56189: CALL 58028 0 3
// end ;
56193: GO 56091
56195: POP
56196: POP
// if enchidnas then
56197: LD_VAR 0 4
56201: IFFALSE 56268
// for i = 1 to enchidnas do
56203: LD_ADDR_VAR 0 11
56207: PUSH
56208: DOUBLE
56209: LD_INT 1
56211: DEC
56212: ST_TO_ADDR
56213: LD_VAR 0 4
56217: PUSH
56218: FOR_TO
56219: IFFALSE 56266
// begin hc_class = 13 ;
56221: LD_ADDR_OWVAR 28
56225: PUSH
56226: LD_INT 13
56228: ST_TO_ADDR
// hc_gallery =  ;
56229: LD_ADDR_OWVAR 33
56233: PUSH
56234: LD_STRING 
56236: ST_TO_ADDR
// animal := CreateHuman ;
56237: LD_ADDR_VAR 0 12
56241: PUSH
56242: CALL_OW 44
56246: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56247: LD_VAR 0 12
56251: PPUSH
56252: LD_VAR 0 8
56256: PPUSH
56257: LD_INT 0
56259: PPUSH
56260: CALL 58028 0 3
// end ;
56264: GO 56218
56266: POP
56267: POP
// if fishes then
56268: LD_VAR 0 7
56272: IFFALSE 56339
// for i = 1 to fishes do
56274: LD_ADDR_VAR 0 11
56278: PUSH
56279: DOUBLE
56280: LD_INT 1
56282: DEC
56283: ST_TO_ADDR
56284: LD_VAR 0 7
56288: PUSH
56289: FOR_TO
56290: IFFALSE 56337
// begin hc_class = 20 ;
56292: LD_ADDR_OWVAR 28
56296: PUSH
56297: LD_INT 20
56299: ST_TO_ADDR
// hc_gallery =  ;
56300: LD_ADDR_OWVAR 33
56304: PUSH
56305: LD_STRING 
56307: ST_TO_ADDR
// animal := CreateHuman ;
56308: LD_ADDR_VAR 0 12
56312: PUSH
56313: CALL_OW 44
56317: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
56318: LD_VAR 0 12
56322: PPUSH
56323: LD_VAR 0 9
56327: PPUSH
56328: LD_INT 0
56330: PPUSH
56331: CALL 58028 0 3
// end ;
56335: GO 56289
56337: POP
56338: POP
// end ;
56339: LD_VAR 0 10
56343: RET
// export function WantHeal ( sci , unit ) ; begin
56344: LD_INT 0
56346: PPUSH
// if GetTaskList ( sci ) > 0 then
56347: LD_VAR 0 1
56351: PPUSH
56352: CALL_OW 437
56356: PUSH
56357: LD_INT 0
56359: GREATER
56360: IFFALSE 56430
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
56362: LD_VAR 0 1
56366: PPUSH
56367: CALL_OW 437
56371: PUSH
56372: LD_INT 1
56374: ARRAY
56375: PUSH
56376: LD_INT 1
56378: ARRAY
56379: PUSH
56380: LD_STRING l
56382: EQUAL
56383: PUSH
56384: LD_VAR 0 1
56388: PPUSH
56389: CALL_OW 437
56393: PUSH
56394: LD_INT 1
56396: ARRAY
56397: PUSH
56398: LD_INT 4
56400: ARRAY
56401: PUSH
56402: LD_VAR 0 2
56406: EQUAL
56407: AND
56408: IFFALSE 56420
// result := true else
56410: LD_ADDR_VAR 0 3
56414: PUSH
56415: LD_INT 1
56417: ST_TO_ADDR
56418: GO 56428
// result := false ;
56420: LD_ADDR_VAR 0 3
56424: PUSH
56425: LD_INT 0
56427: ST_TO_ADDR
// end else
56428: GO 56438
// result := false ;
56430: LD_ADDR_VAR 0 3
56434: PUSH
56435: LD_INT 0
56437: ST_TO_ADDR
// end ;
56438: LD_VAR 0 3
56442: RET
// export function HealTarget ( sci ) ; begin
56443: LD_INT 0
56445: PPUSH
// if not sci then
56446: LD_VAR 0 1
56450: NOT
56451: IFFALSE 56455
// exit ;
56453: GO 56520
// result := 0 ;
56455: LD_ADDR_VAR 0 2
56459: PUSH
56460: LD_INT 0
56462: ST_TO_ADDR
// if GetTaskList ( sci ) then
56463: LD_VAR 0 1
56467: PPUSH
56468: CALL_OW 437
56472: IFFALSE 56520
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
56474: LD_VAR 0 1
56478: PPUSH
56479: CALL_OW 437
56483: PUSH
56484: LD_INT 1
56486: ARRAY
56487: PUSH
56488: LD_INT 1
56490: ARRAY
56491: PUSH
56492: LD_STRING l
56494: EQUAL
56495: IFFALSE 56520
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
56497: LD_ADDR_VAR 0 2
56501: PUSH
56502: LD_VAR 0 1
56506: PPUSH
56507: CALL_OW 437
56511: PUSH
56512: LD_INT 1
56514: ARRAY
56515: PUSH
56516: LD_INT 4
56518: ARRAY
56519: ST_TO_ADDR
// end ;
56520: LD_VAR 0 2
56524: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
56525: LD_INT 0
56527: PPUSH
56528: PPUSH
56529: PPUSH
56530: PPUSH
// if not base_units then
56531: LD_VAR 0 1
56535: NOT
56536: IFFALSE 56540
// exit ;
56538: GO 56627
// result := false ;
56540: LD_ADDR_VAR 0 2
56544: PUSH
56545: LD_INT 0
56547: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
56548: LD_ADDR_VAR 0 5
56552: PUSH
56553: LD_VAR 0 1
56557: PPUSH
56558: LD_INT 21
56560: PUSH
56561: LD_INT 3
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: PPUSH
56568: CALL_OW 72
56572: ST_TO_ADDR
// if not tmp then
56573: LD_VAR 0 5
56577: NOT
56578: IFFALSE 56582
// exit ;
56580: GO 56627
// for i in tmp do
56582: LD_ADDR_VAR 0 3
56586: PUSH
56587: LD_VAR 0 5
56591: PUSH
56592: FOR_IN
56593: IFFALSE 56625
// begin result := EnemyInRange ( i , 22 ) ;
56595: LD_ADDR_VAR 0 2
56599: PUSH
56600: LD_VAR 0 3
56604: PPUSH
56605: LD_INT 22
56607: PPUSH
56608: CALL 54863 0 2
56612: ST_TO_ADDR
// if result then
56613: LD_VAR 0 2
56617: IFFALSE 56623
// exit ;
56619: POP
56620: POP
56621: GO 56627
// end ;
56623: GO 56592
56625: POP
56626: POP
// end ;
56627: LD_VAR 0 2
56631: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
56632: LD_INT 0
56634: PPUSH
56635: PPUSH
// if not units then
56636: LD_VAR 0 1
56640: NOT
56641: IFFALSE 56645
// exit ;
56643: GO 56715
// result := [ ] ;
56645: LD_ADDR_VAR 0 3
56649: PUSH
56650: EMPTY
56651: ST_TO_ADDR
// for i in units do
56652: LD_ADDR_VAR 0 4
56656: PUSH
56657: LD_VAR 0 1
56661: PUSH
56662: FOR_IN
56663: IFFALSE 56713
// if GetTag ( i ) = tag then
56665: LD_VAR 0 4
56669: PPUSH
56670: CALL_OW 110
56674: PUSH
56675: LD_VAR 0 2
56679: EQUAL
56680: IFFALSE 56711
// result := Insert ( result , result + 1 , i ) ;
56682: LD_ADDR_VAR 0 3
56686: PUSH
56687: LD_VAR 0 3
56691: PPUSH
56692: LD_VAR 0 3
56696: PUSH
56697: LD_INT 1
56699: PLUS
56700: PPUSH
56701: LD_VAR 0 4
56705: PPUSH
56706: CALL_OW 2
56710: ST_TO_ADDR
56711: GO 56662
56713: POP
56714: POP
// end ;
56715: LD_VAR 0 3
56719: RET
// export function IsDriver ( un ) ; begin
56720: LD_INT 0
56722: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
56723: LD_ADDR_VAR 0 2
56727: PUSH
56728: LD_VAR 0 1
56732: PUSH
56733: LD_INT 55
56735: PUSH
56736: EMPTY
56737: LIST
56738: PPUSH
56739: CALL_OW 69
56743: IN
56744: ST_TO_ADDR
// end ;
56745: LD_VAR 0 2
56749: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
56750: LD_INT 0
56752: PPUSH
56753: PPUSH
// list := [ ] ;
56754: LD_ADDR_VAR 0 5
56758: PUSH
56759: EMPTY
56760: ST_TO_ADDR
// case d of 0 :
56761: LD_VAR 0 3
56765: PUSH
56766: LD_INT 0
56768: DOUBLE
56769: EQUAL
56770: IFTRUE 56774
56772: GO 56907
56774: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
56775: LD_ADDR_VAR 0 5
56779: PUSH
56780: LD_VAR 0 1
56784: PUSH
56785: LD_INT 4
56787: MINUS
56788: PUSH
56789: LD_VAR 0 2
56793: PUSH
56794: LD_INT 4
56796: MINUS
56797: PUSH
56798: LD_INT 2
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: LIST
56805: PUSH
56806: LD_VAR 0 1
56810: PUSH
56811: LD_INT 3
56813: MINUS
56814: PUSH
56815: LD_VAR 0 2
56819: PUSH
56820: LD_INT 1
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: LIST
56827: PUSH
56828: LD_VAR 0 1
56832: PUSH
56833: LD_INT 4
56835: PLUS
56836: PUSH
56837: LD_VAR 0 2
56841: PUSH
56842: LD_INT 4
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: LIST
56849: PUSH
56850: LD_VAR 0 1
56854: PUSH
56855: LD_INT 3
56857: PLUS
56858: PUSH
56859: LD_VAR 0 2
56863: PUSH
56864: LD_INT 3
56866: PLUS
56867: PUSH
56868: LD_INT 5
56870: PUSH
56871: EMPTY
56872: LIST
56873: LIST
56874: LIST
56875: PUSH
56876: LD_VAR 0 1
56880: PUSH
56881: LD_VAR 0 2
56885: PUSH
56886: LD_INT 4
56888: PLUS
56889: PUSH
56890: LD_INT 0
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: LIST
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: LIST
56902: LIST
56903: LIST
56904: ST_TO_ADDR
// end ; 1 :
56905: GO 57605
56907: LD_INT 1
56909: DOUBLE
56910: EQUAL
56911: IFTRUE 56915
56913: GO 57048
56915: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
56916: LD_ADDR_VAR 0 5
56920: PUSH
56921: LD_VAR 0 1
56925: PUSH
56926: LD_VAR 0 2
56930: PUSH
56931: LD_INT 4
56933: MINUS
56934: PUSH
56935: LD_INT 3
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: LIST
56942: PUSH
56943: LD_VAR 0 1
56947: PUSH
56948: LD_INT 3
56950: MINUS
56951: PUSH
56952: LD_VAR 0 2
56956: PUSH
56957: LD_INT 3
56959: MINUS
56960: PUSH
56961: LD_INT 2
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: LIST
56968: PUSH
56969: LD_VAR 0 1
56973: PUSH
56974: LD_INT 4
56976: MINUS
56977: PUSH
56978: LD_VAR 0 2
56982: PUSH
56983: LD_INT 1
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: LIST
56990: PUSH
56991: LD_VAR 0 1
56995: PUSH
56996: LD_VAR 0 2
57000: PUSH
57001: LD_INT 3
57003: PLUS
57004: PUSH
57005: LD_INT 0
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: LIST
57012: PUSH
57013: LD_VAR 0 1
57017: PUSH
57018: LD_INT 4
57020: PLUS
57021: PUSH
57022: LD_VAR 0 2
57026: PUSH
57027: LD_INT 4
57029: PLUS
57030: PUSH
57031: LD_INT 5
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: LIST
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: LIST
57043: LIST
57044: LIST
57045: ST_TO_ADDR
// end ; 2 :
57046: GO 57605
57048: LD_INT 2
57050: DOUBLE
57051: EQUAL
57052: IFTRUE 57056
57054: GO 57185
57056: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
57057: LD_ADDR_VAR 0 5
57061: PUSH
57062: LD_VAR 0 1
57066: PUSH
57067: LD_VAR 0 2
57071: PUSH
57072: LD_INT 3
57074: MINUS
57075: PUSH
57076: LD_INT 3
57078: PUSH
57079: EMPTY
57080: LIST
57081: LIST
57082: LIST
57083: PUSH
57084: LD_VAR 0 1
57088: PUSH
57089: LD_INT 4
57091: PLUS
57092: PUSH
57093: LD_VAR 0 2
57097: PUSH
57098: LD_INT 4
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: LIST
57105: PUSH
57106: LD_VAR 0 1
57110: PUSH
57111: LD_VAR 0 2
57115: PUSH
57116: LD_INT 4
57118: PLUS
57119: PUSH
57120: LD_INT 0
57122: PUSH
57123: EMPTY
57124: LIST
57125: LIST
57126: LIST
57127: PUSH
57128: LD_VAR 0 1
57132: PUSH
57133: LD_INT 3
57135: MINUS
57136: PUSH
57137: LD_VAR 0 2
57141: PUSH
57142: LD_INT 1
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: LIST
57149: PUSH
57150: LD_VAR 0 1
57154: PUSH
57155: LD_INT 4
57157: MINUS
57158: PUSH
57159: LD_VAR 0 2
57163: PUSH
57164: LD_INT 4
57166: MINUS
57167: PUSH
57168: LD_INT 2
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: LIST
57175: PUSH
57176: EMPTY
57177: LIST
57178: LIST
57179: LIST
57180: LIST
57181: LIST
57182: ST_TO_ADDR
// end ; 3 :
57183: GO 57605
57185: LD_INT 3
57187: DOUBLE
57188: EQUAL
57189: IFTRUE 57193
57191: GO 57326
57193: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
57194: LD_ADDR_VAR 0 5
57198: PUSH
57199: LD_VAR 0 1
57203: PUSH
57204: LD_INT 3
57206: PLUS
57207: PUSH
57208: LD_VAR 0 2
57212: PUSH
57213: LD_INT 4
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: LIST
57220: PUSH
57221: LD_VAR 0 1
57225: PUSH
57226: LD_INT 4
57228: PLUS
57229: PUSH
57230: LD_VAR 0 2
57234: PUSH
57235: LD_INT 4
57237: PLUS
57238: PUSH
57239: LD_INT 5
57241: PUSH
57242: EMPTY
57243: LIST
57244: LIST
57245: LIST
57246: PUSH
57247: LD_VAR 0 1
57251: PUSH
57252: LD_INT 4
57254: MINUS
57255: PUSH
57256: LD_VAR 0 2
57260: PUSH
57261: LD_INT 1
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: LIST
57268: PUSH
57269: LD_VAR 0 1
57273: PUSH
57274: LD_VAR 0 2
57278: PUSH
57279: LD_INT 4
57281: MINUS
57282: PUSH
57283: LD_INT 3
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: LIST
57290: PUSH
57291: LD_VAR 0 1
57295: PUSH
57296: LD_INT 3
57298: MINUS
57299: PUSH
57300: LD_VAR 0 2
57304: PUSH
57305: LD_INT 3
57307: MINUS
57308: PUSH
57309: LD_INT 2
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: LIST
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: LIST
57321: LIST
57322: LIST
57323: ST_TO_ADDR
// end ; 4 :
57324: GO 57605
57326: LD_INT 4
57328: DOUBLE
57329: EQUAL
57330: IFTRUE 57334
57332: GO 57467
57334: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
57335: LD_ADDR_VAR 0 5
57339: PUSH
57340: LD_VAR 0 1
57344: PUSH
57345: LD_VAR 0 2
57349: PUSH
57350: LD_INT 4
57352: PLUS
57353: PUSH
57354: LD_INT 0
57356: PUSH
57357: EMPTY
57358: LIST
57359: LIST
57360: LIST
57361: PUSH
57362: LD_VAR 0 1
57366: PUSH
57367: LD_INT 3
57369: PLUS
57370: PUSH
57371: LD_VAR 0 2
57375: PUSH
57376: LD_INT 3
57378: PLUS
57379: PUSH
57380: LD_INT 5
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: LIST
57387: PUSH
57388: LD_VAR 0 1
57392: PUSH
57393: LD_INT 4
57395: PLUS
57396: PUSH
57397: LD_VAR 0 2
57401: PUSH
57402: LD_INT 4
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: LIST
57409: PUSH
57410: LD_VAR 0 1
57414: PUSH
57415: LD_VAR 0 2
57419: PUSH
57420: LD_INT 3
57422: MINUS
57423: PUSH
57424: LD_INT 3
57426: PUSH
57427: EMPTY
57428: LIST
57429: LIST
57430: LIST
57431: PUSH
57432: LD_VAR 0 1
57436: PUSH
57437: LD_INT 4
57439: MINUS
57440: PUSH
57441: LD_VAR 0 2
57445: PUSH
57446: LD_INT 4
57448: MINUS
57449: PUSH
57450: LD_INT 2
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: LIST
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: LIST
57462: LIST
57463: LIST
57464: ST_TO_ADDR
// end ; 5 :
57465: GO 57605
57467: LD_INT 5
57469: DOUBLE
57470: EQUAL
57471: IFTRUE 57475
57473: GO 57604
57475: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
57476: LD_ADDR_VAR 0 5
57480: PUSH
57481: LD_VAR 0 1
57485: PUSH
57486: LD_INT 4
57488: MINUS
57489: PUSH
57490: LD_VAR 0 2
57494: PUSH
57495: LD_INT 1
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: LIST
57502: PUSH
57503: LD_VAR 0 1
57507: PUSH
57508: LD_VAR 0 2
57512: PUSH
57513: LD_INT 4
57515: MINUS
57516: PUSH
57517: LD_INT 3
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: LIST
57524: PUSH
57525: LD_VAR 0 1
57529: PUSH
57530: LD_INT 4
57532: PLUS
57533: PUSH
57534: LD_VAR 0 2
57538: PUSH
57539: LD_INT 4
57541: PLUS
57542: PUSH
57543: LD_INT 5
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: LIST
57550: PUSH
57551: LD_VAR 0 1
57555: PUSH
57556: LD_INT 3
57558: PLUS
57559: PUSH
57560: LD_VAR 0 2
57564: PUSH
57565: LD_INT 4
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: LIST
57572: PUSH
57573: LD_VAR 0 1
57577: PUSH
57578: LD_VAR 0 2
57582: PUSH
57583: LD_INT 3
57585: PLUS
57586: PUSH
57587: LD_INT 0
57589: PUSH
57590: EMPTY
57591: LIST
57592: LIST
57593: LIST
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: LIST
57599: LIST
57600: LIST
57601: ST_TO_ADDR
// end ; end ;
57602: GO 57605
57604: POP
// result := list ;
57605: LD_ADDR_VAR 0 4
57609: PUSH
57610: LD_VAR 0 5
57614: ST_TO_ADDR
// end ;
57615: LD_VAR 0 4
57619: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
57620: LD_INT 0
57622: PPUSH
57623: PPUSH
57624: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
57625: LD_VAR 0 1
57629: NOT
57630: PUSH
57631: LD_VAR 0 2
57635: PUSH
57636: LD_INT 1
57638: PUSH
57639: LD_INT 2
57641: PUSH
57642: LD_INT 3
57644: PUSH
57645: LD_INT 4
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: LIST
57652: LIST
57653: IN
57654: NOT
57655: OR
57656: IFFALSE 57660
// exit ;
57658: GO 57752
// tmp := [ ] ;
57660: LD_ADDR_VAR 0 5
57664: PUSH
57665: EMPTY
57666: ST_TO_ADDR
// for i in units do
57667: LD_ADDR_VAR 0 4
57671: PUSH
57672: LD_VAR 0 1
57676: PUSH
57677: FOR_IN
57678: IFFALSE 57721
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
57680: LD_ADDR_VAR 0 5
57684: PUSH
57685: LD_VAR 0 5
57689: PPUSH
57690: LD_VAR 0 5
57694: PUSH
57695: LD_INT 1
57697: PLUS
57698: PPUSH
57699: LD_VAR 0 4
57703: PPUSH
57704: LD_VAR 0 2
57708: PPUSH
57709: CALL_OW 259
57713: PPUSH
57714: CALL_OW 2
57718: ST_TO_ADDR
57719: GO 57677
57721: POP
57722: POP
// if not tmp then
57723: LD_VAR 0 5
57727: NOT
57728: IFFALSE 57732
// exit ;
57730: GO 57752
// result := SortListByListDesc ( units , tmp ) ;
57732: LD_ADDR_VAR 0 3
57736: PUSH
57737: LD_VAR 0 1
57741: PPUSH
57742: LD_VAR 0 5
57746: PPUSH
57747: CALL_OW 77
57751: ST_TO_ADDR
// end ;
57752: LD_VAR 0 3
57756: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
57757: LD_INT 0
57759: PPUSH
57760: PPUSH
57761: PPUSH
// result := false ;
57762: LD_ADDR_VAR 0 3
57766: PUSH
57767: LD_INT 0
57769: ST_TO_ADDR
// x := GetX ( building ) ;
57770: LD_ADDR_VAR 0 4
57774: PUSH
57775: LD_VAR 0 2
57779: PPUSH
57780: CALL_OW 250
57784: ST_TO_ADDR
// y := GetY ( building ) ;
57785: LD_ADDR_VAR 0 5
57789: PUSH
57790: LD_VAR 0 2
57794: PPUSH
57795: CALL_OW 251
57799: ST_TO_ADDR
// if not building or not x or not y then
57800: LD_VAR 0 2
57804: NOT
57805: PUSH
57806: LD_VAR 0 4
57810: NOT
57811: OR
57812: PUSH
57813: LD_VAR 0 5
57817: NOT
57818: OR
57819: IFFALSE 57823
// exit ;
57821: GO 57915
// if GetTaskList ( unit ) then
57823: LD_VAR 0 1
57827: PPUSH
57828: CALL_OW 437
57832: IFFALSE 57915
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57834: LD_STRING e
57836: PUSH
57837: LD_VAR 0 1
57841: PPUSH
57842: CALL_OW 437
57846: PUSH
57847: LD_INT 1
57849: ARRAY
57850: PUSH
57851: LD_INT 1
57853: ARRAY
57854: EQUAL
57855: PUSH
57856: LD_VAR 0 4
57860: PUSH
57861: LD_VAR 0 1
57865: PPUSH
57866: CALL_OW 437
57870: PUSH
57871: LD_INT 1
57873: ARRAY
57874: PUSH
57875: LD_INT 2
57877: ARRAY
57878: EQUAL
57879: AND
57880: PUSH
57881: LD_VAR 0 5
57885: PUSH
57886: LD_VAR 0 1
57890: PPUSH
57891: CALL_OW 437
57895: PUSH
57896: LD_INT 1
57898: ARRAY
57899: PUSH
57900: LD_INT 3
57902: ARRAY
57903: EQUAL
57904: AND
57905: IFFALSE 57915
// result := true end ;
57907: LD_ADDR_VAR 0 3
57911: PUSH
57912: LD_INT 1
57914: ST_TO_ADDR
// end ;
57915: LD_VAR 0 3
57919: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
57920: LD_INT 0
57922: PPUSH
// result := false ;
57923: LD_ADDR_VAR 0 4
57927: PUSH
57928: LD_INT 0
57930: ST_TO_ADDR
// if GetTaskList ( unit ) then
57931: LD_VAR 0 1
57935: PPUSH
57936: CALL_OW 437
57940: IFFALSE 58023
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57942: LD_STRING M
57944: PUSH
57945: LD_VAR 0 1
57949: PPUSH
57950: CALL_OW 437
57954: PUSH
57955: LD_INT 1
57957: ARRAY
57958: PUSH
57959: LD_INT 1
57961: ARRAY
57962: EQUAL
57963: PUSH
57964: LD_VAR 0 2
57968: PUSH
57969: LD_VAR 0 1
57973: PPUSH
57974: CALL_OW 437
57978: PUSH
57979: LD_INT 1
57981: ARRAY
57982: PUSH
57983: LD_INT 2
57985: ARRAY
57986: EQUAL
57987: AND
57988: PUSH
57989: LD_VAR 0 3
57993: PUSH
57994: LD_VAR 0 1
57998: PPUSH
57999: CALL_OW 437
58003: PUSH
58004: LD_INT 1
58006: ARRAY
58007: PUSH
58008: LD_INT 3
58010: ARRAY
58011: EQUAL
58012: AND
58013: IFFALSE 58023
// result := true ;
58015: LD_ADDR_VAR 0 4
58019: PUSH
58020: LD_INT 1
58022: ST_TO_ADDR
// end ; end ;
58023: LD_VAR 0 4
58027: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
58028: LD_INT 0
58030: PPUSH
58031: PPUSH
58032: PPUSH
58033: PPUSH
// if not unit or not area then
58034: LD_VAR 0 1
58038: NOT
58039: PUSH
58040: LD_VAR 0 2
58044: NOT
58045: OR
58046: IFFALSE 58050
// exit ;
58048: GO 58214
// tmp := AreaToList ( area , i ) ;
58050: LD_ADDR_VAR 0 6
58054: PUSH
58055: LD_VAR 0 2
58059: PPUSH
58060: LD_VAR 0 5
58064: PPUSH
58065: CALL_OW 517
58069: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
58070: LD_ADDR_VAR 0 5
58074: PUSH
58075: DOUBLE
58076: LD_INT 1
58078: DEC
58079: ST_TO_ADDR
58080: LD_VAR 0 6
58084: PUSH
58085: LD_INT 1
58087: ARRAY
58088: PUSH
58089: FOR_TO
58090: IFFALSE 58212
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
58092: LD_ADDR_VAR 0 7
58096: PUSH
58097: LD_VAR 0 6
58101: PUSH
58102: LD_INT 1
58104: ARRAY
58105: PUSH
58106: LD_VAR 0 5
58110: ARRAY
58111: PUSH
58112: LD_VAR 0 6
58116: PUSH
58117: LD_INT 2
58119: ARRAY
58120: PUSH
58121: LD_VAR 0 5
58125: ARRAY
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
58131: LD_VAR 0 7
58135: PUSH
58136: LD_INT 1
58138: ARRAY
58139: PPUSH
58140: LD_VAR 0 7
58144: PUSH
58145: LD_INT 2
58147: ARRAY
58148: PPUSH
58149: CALL_OW 428
58153: PUSH
58154: LD_INT 0
58156: EQUAL
58157: IFFALSE 58210
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
58159: LD_VAR 0 1
58163: PPUSH
58164: LD_VAR 0 7
58168: PUSH
58169: LD_INT 1
58171: ARRAY
58172: PPUSH
58173: LD_VAR 0 7
58177: PUSH
58178: LD_INT 2
58180: ARRAY
58181: PPUSH
58182: LD_VAR 0 3
58186: PPUSH
58187: CALL_OW 48
// result := IsPlaced ( unit ) ;
58191: LD_ADDR_VAR 0 4
58195: PUSH
58196: LD_VAR 0 1
58200: PPUSH
58201: CALL_OW 305
58205: ST_TO_ADDR
// exit ;
58206: POP
58207: POP
58208: GO 58214
// end ; end ;
58210: GO 58089
58212: POP
58213: POP
// end ;
58214: LD_VAR 0 4
58218: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
58219: LD_INT 0
58221: PPUSH
58222: PPUSH
58223: PPUSH
// if not side or side > 8 then
58224: LD_VAR 0 1
58228: NOT
58229: PUSH
58230: LD_VAR 0 1
58234: PUSH
58235: LD_INT 8
58237: GREATER
58238: OR
58239: IFFALSE 58243
// exit ;
58241: GO 58430
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
58243: LD_ADDR_VAR 0 4
58247: PUSH
58248: LD_INT 22
58250: PUSH
58251: LD_VAR 0 1
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 21
58262: PUSH
58263: LD_INT 3
58265: PUSH
58266: EMPTY
58267: LIST
58268: LIST
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: PPUSH
58274: CALL_OW 69
58278: ST_TO_ADDR
// if not tmp then
58279: LD_VAR 0 4
58283: NOT
58284: IFFALSE 58288
// exit ;
58286: GO 58430
// enable_addtolog := true ;
58288: LD_ADDR_OWVAR 81
58292: PUSH
58293: LD_INT 1
58295: ST_TO_ADDR
// AddToLog ( [ ) ;
58296: LD_STRING [
58298: PPUSH
58299: CALL_OW 561
// for i in tmp do
58303: LD_ADDR_VAR 0 3
58307: PUSH
58308: LD_VAR 0 4
58312: PUSH
58313: FOR_IN
58314: IFFALSE 58421
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
58316: LD_STRING [
58318: PUSH
58319: LD_VAR 0 3
58323: PPUSH
58324: CALL_OW 266
58328: STR
58329: PUSH
58330: LD_STRING , 
58332: STR
58333: PUSH
58334: LD_VAR 0 3
58338: PPUSH
58339: CALL_OW 250
58343: STR
58344: PUSH
58345: LD_STRING , 
58347: STR
58348: PUSH
58349: LD_VAR 0 3
58353: PPUSH
58354: CALL_OW 251
58358: STR
58359: PUSH
58360: LD_STRING , 
58362: STR
58363: PUSH
58364: LD_VAR 0 3
58368: PPUSH
58369: CALL_OW 254
58373: STR
58374: PUSH
58375: LD_STRING , 
58377: STR
58378: PUSH
58379: LD_VAR 0 3
58383: PPUSH
58384: LD_INT 1
58386: PPUSH
58387: CALL_OW 268
58391: STR
58392: PUSH
58393: LD_STRING , 
58395: STR
58396: PUSH
58397: LD_VAR 0 3
58401: PPUSH
58402: LD_INT 2
58404: PPUSH
58405: CALL_OW 268
58409: STR
58410: PUSH
58411: LD_STRING ],
58413: STR
58414: PPUSH
58415: CALL_OW 561
// end ;
58419: GO 58313
58421: POP
58422: POP
// AddToLog ( ]; ) ;
58423: LD_STRING ];
58425: PPUSH
58426: CALL_OW 561
// end ;
58430: LD_VAR 0 2
58434: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
58435: LD_INT 0
58437: PPUSH
58438: PPUSH
58439: PPUSH
58440: PPUSH
58441: PPUSH
// if not area or not rate or not max then
58442: LD_VAR 0 1
58446: NOT
58447: PUSH
58448: LD_VAR 0 2
58452: NOT
58453: OR
58454: PUSH
58455: LD_VAR 0 4
58459: NOT
58460: OR
58461: IFFALSE 58465
// exit ;
58463: GO 58657
// while 1 do
58465: LD_INT 1
58467: IFFALSE 58657
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
58469: LD_ADDR_VAR 0 9
58473: PUSH
58474: LD_VAR 0 1
58478: PPUSH
58479: LD_INT 1
58481: PPUSH
58482: CALL_OW 287
58486: PUSH
58487: LD_INT 10
58489: MUL
58490: ST_TO_ADDR
// r := rate / 10 ;
58491: LD_ADDR_VAR 0 7
58495: PUSH
58496: LD_VAR 0 2
58500: PUSH
58501: LD_INT 10
58503: DIVREAL
58504: ST_TO_ADDR
// time := 1 1$00 ;
58505: LD_ADDR_VAR 0 8
58509: PUSH
58510: LD_INT 2100
58512: ST_TO_ADDR
// if amount < min then
58513: LD_VAR 0 9
58517: PUSH
58518: LD_VAR 0 3
58522: LESS
58523: IFFALSE 58541
// r := r * 2 else
58525: LD_ADDR_VAR 0 7
58529: PUSH
58530: LD_VAR 0 7
58534: PUSH
58535: LD_INT 2
58537: MUL
58538: ST_TO_ADDR
58539: GO 58567
// if amount > max then
58541: LD_VAR 0 9
58545: PUSH
58546: LD_VAR 0 4
58550: GREATER
58551: IFFALSE 58567
// r := r / 2 ;
58553: LD_ADDR_VAR 0 7
58557: PUSH
58558: LD_VAR 0 7
58562: PUSH
58563: LD_INT 2
58565: DIVREAL
58566: ST_TO_ADDR
// time := time / r ;
58567: LD_ADDR_VAR 0 8
58571: PUSH
58572: LD_VAR 0 8
58576: PUSH
58577: LD_VAR 0 7
58581: DIVREAL
58582: ST_TO_ADDR
// if time < 0 then
58583: LD_VAR 0 8
58587: PUSH
58588: LD_INT 0
58590: LESS
58591: IFFALSE 58608
// time := time * - 1 ;
58593: LD_ADDR_VAR 0 8
58597: PUSH
58598: LD_VAR 0 8
58602: PUSH
58603: LD_INT 1
58605: NEG
58606: MUL
58607: ST_TO_ADDR
// wait ( time ) ;
58608: LD_VAR 0 8
58612: PPUSH
58613: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
58617: LD_INT 35
58619: PPUSH
58620: LD_INT 875
58622: PPUSH
58623: CALL_OW 12
58627: PPUSH
58628: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
58632: LD_INT 1
58634: PPUSH
58635: LD_INT 5
58637: PPUSH
58638: CALL_OW 12
58642: PPUSH
58643: LD_VAR 0 1
58647: PPUSH
58648: LD_INT 1
58650: PPUSH
58651: CALL_OW 55
// end ;
58655: GO 58465
// end ;
58657: LD_VAR 0 5
58661: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
58662: LD_INT 0
58664: PPUSH
58665: PPUSH
58666: PPUSH
58667: PPUSH
58668: PPUSH
58669: PPUSH
58670: PPUSH
58671: PPUSH
// if not turrets or not factories then
58672: LD_VAR 0 1
58676: NOT
58677: PUSH
58678: LD_VAR 0 2
58682: NOT
58683: OR
58684: IFFALSE 58688
// exit ;
58686: GO 58995
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
58688: LD_ADDR_VAR 0 10
58692: PUSH
58693: LD_INT 5
58695: PUSH
58696: LD_INT 6
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: PUSH
58703: LD_INT 2
58705: PUSH
58706: LD_INT 4
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: PUSH
58713: LD_INT 3
58715: PUSH
58716: LD_INT 5
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: PUSH
58723: EMPTY
58724: LIST
58725: LIST
58726: LIST
58727: PUSH
58728: LD_INT 24
58730: PUSH
58731: LD_INT 25
58733: PUSH
58734: EMPTY
58735: LIST
58736: LIST
58737: PUSH
58738: LD_INT 23
58740: PUSH
58741: LD_INT 27
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: PUSH
58752: LD_INT 42
58754: PUSH
58755: LD_INT 43
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: PUSH
58762: LD_INT 44
58764: PUSH
58765: LD_INT 46
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: PUSH
58772: LD_INT 45
58774: PUSH
58775: LD_INT 47
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: PUSH
58782: EMPTY
58783: LIST
58784: LIST
58785: LIST
58786: PUSH
58787: EMPTY
58788: LIST
58789: LIST
58790: LIST
58791: ST_TO_ADDR
// result := [ ] ;
58792: LD_ADDR_VAR 0 3
58796: PUSH
58797: EMPTY
58798: ST_TO_ADDR
// for i in turrets do
58799: LD_ADDR_VAR 0 4
58803: PUSH
58804: LD_VAR 0 1
58808: PUSH
58809: FOR_IN
58810: IFFALSE 58993
// begin nat := GetNation ( i ) ;
58812: LD_ADDR_VAR 0 7
58816: PUSH
58817: LD_VAR 0 4
58821: PPUSH
58822: CALL_OW 248
58826: ST_TO_ADDR
// weapon := 0 ;
58827: LD_ADDR_VAR 0 8
58831: PUSH
58832: LD_INT 0
58834: ST_TO_ADDR
// if not nat then
58835: LD_VAR 0 7
58839: NOT
58840: IFFALSE 58844
// continue ;
58842: GO 58809
// for j in list [ nat ] do
58844: LD_ADDR_VAR 0 5
58848: PUSH
58849: LD_VAR 0 10
58853: PUSH
58854: LD_VAR 0 7
58858: ARRAY
58859: PUSH
58860: FOR_IN
58861: IFFALSE 58902
// if GetBWeapon ( i ) = j [ 1 ] then
58863: LD_VAR 0 4
58867: PPUSH
58868: CALL_OW 269
58872: PUSH
58873: LD_VAR 0 5
58877: PUSH
58878: LD_INT 1
58880: ARRAY
58881: EQUAL
58882: IFFALSE 58900
// begin weapon := j [ 2 ] ;
58884: LD_ADDR_VAR 0 8
58888: PUSH
58889: LD_VAR 0 5
58893: PUSH
58894: LD_INT 2
58896: ARRAY
58897: ST_TO_ADDR
// break ;
58898: GO 58902
// end ;
58900: GO 58860
58902: POP
58903: POP
// if not weapon then
58904: LD_VAR 0 8
58908: NOT
58909: IFFALSE 58913
// continue ;
58911: GO 58809
// for k in factories do
58913: LD_ADDR_VAR 0 6
58917: PUSH
58918: LD_VAR 0 2
58922: PUSH
58923: FOR_IN
58924: IFFALSE 58989
// begin weapons := AvailableWeaponList ( k ) ;
58926: LD_ADDR_VAR 0 9
58930: PUSH
58931: LD_VAR 0 6
58935: PPUSH
58936: CALL_OW 478
58940: ST_TO_ADDR
// if not weapons then
58941: LD_VAR 0 9
58945: NOT
58946: IFFALSE 58950
// continue ;
58948: GO 58923
// if weapon in weapons then
58950: LD_VAR 0 8
58954: PUSH
58955: LD_VAR 0 9
58959: IN
58960: IFFALSE 58987
// begin result := [ i , weapon ] ;
58962: LD_ADDR_VAR 0 3
58966: PUSH
58967: LD_VAR 0 4
58971: PUSH
58972: LD_VAR 0 8
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: ST_TO_ADDR
// exit ;
58981: POP
58982: POP
58983: POP
58984: POP
58985: GO 58995
// end ; end ;
58987: GO 58923
58989: POP
58990: POP
// end ;
58991: GO 58809
58993: POP
58994: POP
// end ;
58995: LD_VAR 0 3
58999: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
59000: LD_INT 0
59002: PPUSH
// if not side or side > 8 then
59003: LD_VAR 0 3
59007: NOT
59008: PUSH
59009: LD_VAR 0 3
59013: PUSH
59014: LD_INT 8
59016: GREATER
59017: OR
59018: IFFALSE 59022
// exit ;
59020: GO 59081
// if not range then
59022: LD_VAR 0 4
59026: NOT
59027: IFFALSE 59038
// range := - 12 ;
59029: LD_ADDR_VAR 0 4
59033: PUSH
59034: LD_INT 12
59036: NEG
59037: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
59038: LD_VAR 0 1
59042: PPUSH
59043: LD_VAR 0 2
59047: PPUSH
59048: LD_VAR 0 3
59052: PPUSH
59053: LD_VAR 0 4
59057: PPUSH
59058: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
59062: LD_VAR 0 1
59066: PPUSH
59067: LD_VAR 0 2
59071: PPUSH
59072: LD_VAR 0 3
59076: PPUSH
59077: CALL_OW 331
// end ;
59081: LD_VAR 0 5
59085: RET
// export function Video ( mode ) ; begin
59086: LD_INT 0
59088: PPUSH
// ingame_video = mode ;
59089: LD_ADDR_OWVAR 52
59093: PUSH
59094: LD_VAR 0 1
59098: ST_TO_ADDR
// interface_hidden = mode ;
59099: LD_ADDR_OWVAR 54
59103: PUSH
59104: LD_VAR 0 1
59108: ST_TO_ADDR
// end ;
59109: LD_VAR 0 2
59113: RET
// export function Join ( array , element ) ; begin
59114: LD_INT 0
59116: PPUSH
// result := Replace ( array , array + 1 , element ) ;
59117: LD_ADDR_VAR 0 3
59121: PUSH
59122: LD_VAR 0 1
59126: PPUSH
59127: LD_VAR 0 1
59131: PUSH
59132: LD_INT 1
59134: PLUS
59135: PPUSH
59136: LD_VAR 0 2
59140: PPUSH
59141: CALL_OW 1
59145: ST_TO_ADDR
// end ;
59146: LD_VAR 0 3
59150: RET
// export function JoinUnion ( array , element ) ; begin
59151: LD_INT 0
59153: PPUSH
// result := array union element ;
59154: LD_ADDR_VAR 0 3
59158: PUSH
59159: LD_VAR 0 1
59163: PUSH
59164: LD_VAR 0 2
59168: UNION
59169: ST_TO_ADDR
// end ;
59170: LD_VAR 0 3
59174: RET
// export function GetBehemoths ( side ) ; begin
59175: LD_INT 0
59177: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
59178: LD_ADDR_VAR 0 2
59182: PUSH
59183: LD_INT 22
59185: PUSH
59186: LD_VAR 0 1
59190: PUSH
59191: EMPTY
59192: LIST
59193: LIST
59194: PUSH
59195: LD_INT 31
59197: PUSH
59198: LD_INT 25
59200: PUSH
59201: EMPTY
59202: LIST
59203: LIST
59204: PUSH
59205: EMPTY
59206: LIST
59207: LIST
59208: PPUSH
59209: CALL_OW 69
59213: ST_TO_ADDR
// end ;
59214: LD_VAR 0 2
59218: RET
// export function Shuffle ( array ) ; var i , index ; begin
59219: LD_INT 0
59221: PPUSH
59222: PPUSH
59223: PPUSH
// result := [ ] ;
59224: LD_ADDR_VAR 0 2
59228: PUSH
59229: EMPTY
59230: ST_TO_ADDR
// if not array then
59231: LD_VAR 0 1
59235: NOT
59236: IFFALSE 59240
// exit ;
59238: GO 59339
// Randomize ;
59240: CALL_OW 10
// for i = array downto 1 do
59244: LD_ADDR_VAR 0 3
59248: PUSH
59249: DOUBLE
59250: LD_VAR 0 1
59254: INC
59255: ST_TO_ADDR
59256: LD_INT 1
59258: PUSH
59259: FOR_DOWNTO
59260: IFFALSE 59337
// begin index := rand ( 1 , array ) ;
59262: LD_ADDR_VAR 0 4
59266: PUSH
59267: LD_INT 1
59269: PPUSH
59270: LD_VAR 0 1
59274: PPUSH
59275: CALL_OW 12
59279: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
59280: LD_ADDR_VAR 0 2
59284: PUSH
59285: LD_VAR 0 2
59289: PPUSH
59290: LD_VAR 0 2
59294: PUSH
59295: LD_INT 1
59297: PLUS
59298: PPUSH
59299: LD_VAR 0 1
59303: PUSH
59304: LD_VAR 0 4
59308: ARRAY
59309: PPUSH
59310: CALL_OW 2
59314: ST_TO_ADDR
// array := Delete ( array , index ) ;
59315: LD_ADDR_VAR 0 1
59319: PUSH
59320: LD_VAR 0 1
59324: PPUSH
59325: LD_VAR 0 4
59329: PPUSH
59330: CALL_OW 3
59334: ST_TO_ADDR
// end ;
59335: GO 59259
59337: POP
59338: POP
// end ;
59339: LD_VAR 0 2
59343: RET
// export function GetBaseMaterials ( base ) ; begin
59344: LD_INT 0
59346: PPUSH
// result := [ 0 , 0 , 0 ] ;
59347: LD_ADDR_VAR 0 2
59351: PUSH
59352: LD_INT 0
59354: PUSH
59355: LD_INT 0
59357: PUSH
59358: LD_INT 0
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: LIST
59365: ST_TO_ADDR
// if not base then
59366: LD_VAR 0 1
59370: NOT
59371: IFFALSE 59375
// exit ;
59373: GO 59424
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
59375: LD_ADDR_VAR 0 2
59379: PUSH
59380: LD_VAR 0 1
59384: PPUSH
59385: LD_INT 1
59387: PPUSH
59388: CALL_OW 275
59392: PUSH
59393: LD_VAR 0 1
59397: PPUSH
59398: LD_INT 2
59400: PPUSH
59401: CALL_OW 275
59405: PUSH
59406: LD_VAR 0 1
59410: PPUSH
59411: LD_INT 3
59413: PPUSH
59414: CALL_OW 275
59418: PUSH
59419: EMPTY
59420: LIST
59421: LIST
59422: LIST
59423: ST_TO_ADDR
// end ;
59424: LD_VAR 0 2
59428: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
59429: LD_INT 0
59431: PPUSH
59432: PPUSH
// result := array ;
59433: LD_ADDR_VAR 0 3
59437: PUSH
59438: LD_VAR 0 1
59442: ST_TO_ADDR
// if size > 0 then
59443: LD_VAR 0 2
59447: PUSH
59448: LD_INT 0
59450: GREATER
59451: IFFALSE 59497
// for i := array downto size do
59453: LD_ADDR_VAR 0 4
59457: PUSH
59458: DOUBLE
59459: LD_VAR 0 1
59463: INC
59464: ST_TO_ADDR
59465: LD_VAR 0 2
59469: PUSH
59470: FOR_DOWNTO
59471: IFFALSE 59495
// result := Delete ( result , result ) ;
59473: LD_ADDR_VAR 0 3
59477: PUSH
59478: LD_VAR 0 3
59482: PPUSH
59483: LD_VAR 0 3
59487: PPUSH
59488: CALL_OW 3
59492: ST_TO_ADDR
59493: GO 59470
59495: POP
59496: POP
// end ;
59497: LD_VAR 0 3
59501: RET
// export function ComExit ( unit ) ; var tmp ; begin
59502: LD_INT 0
59504: PPUSH
59505: PPUSH
// if not IsInUnit ( unit ) then
59506: LD_VAR 0 1
59510: PPUSH
59511: CALL_OW 310
59515: NOT
59516: IFFALSE 59520
// exit ;
59518: GO 59580
// tmp := IsInUnit ( unit ) ;
59520: LD_ADDR_VAR 0 3
59524: PUSH
59525: LD_VAR 0 1
59529: PPUSH
59530: CALL_OW 310
59534: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
59535: LD_VAR 0 3
59539: PPUSH
59540: CALL_OW 247
59544: PUSH
59545: LD_INT 2
59547: EQUAL
59548: IFFALSE 59561
// ComExitVehicle ( unit ) else
59550: LD_VAR 0 1
59554: PPUSH
59555: CALL_OW 121
59559: GO 59570
// ComExitBuilding ( unit ) ;
59561: LD_VAR 0 1
59565: PPUSH
59566: CALL_OW 122
// result := tmp ;
59570: LD_ADDR_VAR 0 2
59574: PUSH
59575: LD_VAR 0 3
59579: ST_TO_ADDR
// end ;
59580: LD_VAR 0 2
59584: RET
// export function ResetHc ; begin
59585: LD_INT 0
59587: PPUSH
// InitHc ;
59588: CALL_OW 19
// hc_importance := 0 ;
59592: LD_ADDR_OWVAR 32
59596: PUSH
59597: LD_INT 0
59599: ST_TO_ADDR
// end ;
59600: LD_VAR 0 1
59604: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
59605: LD_INT 0
59607: PPUSH
59608: PPUSH
59609: PPUSH
// _x := ( x1 + x2 ) div 2 ;
59610: LD_ADDR_VAR 0 6
59614: PUSH
59615: LD_VAR 0 1
59619: PUSH
59620: LD_VAR 0 3
59624: PLUS
59625: PUSH
59626: LD_INT 2
59628: DIV
59629: ST_TO_ADDR
// if _x < 0 then
59630: LD_VAR 0 6
59634: PUSH
59635: LD_INT 0
59637: LESS
59638: IFFALSE 59655
// _x := _x * - 1 ;
59640: LD_ADDR_VAR 0 6
59644: PUSH
59645: LD_VAR 0 6
59649: PUSH
59650: LD_INT 1
59652: NEG
59653: MUL
59654: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
59655: LD_ADDR_VAR 0 7
59659: PUSH
59660: LD_VAR 0 2
59664: PUSH
59665: LD_VAR 0 4
59669: PLUS
59670: PUSH
59671: LD_INT 2
59673: DIV
59674: ST_TO_ADDR
// if _y < 0 then
59675: LD_VAR 0 7
59679: PUSH
59680: LD_INT 0
59682: LESS
59683: IFFALSE 59700
// _y := _y * - 1 ;
59685: LD_ADDR_VAR 0 7
59689: PUSH
59690: LD_VAR 0 7
59694: PUSH
59695: LD_INT 1
59697: NEG
59698: MUL
59699: ST_TO_ADDR
// result := [ _x , _y ] ;
59700: LD_ADDR_VAR 0 5
59704: PUSH
59705: LD_VAR 0 6
59709: PUSH
59710: LD_VAR 0 7
59714: PUSH
59715: EMPTY
59716: LIST
59717: LIST
59718: ST_TO_ADDR
// end ;
59719: LD_VAR 0 5
59723: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
59724: LD_INT 0
59726: PPUSH
59727: PPUSH
59728: PPUSH
59729: PPUSH
// task := GetTaskList ( unit ) ;
59730: LD_ADDR_VAR 0 7
59734: PUSH
59735: LD_VAR 0 1
59739: PPUSH
59740: CALL_OW 437
59744: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
59745: LD_VAR 0 7
59749: NOT
59750: PUSH
59751: LD_VAR 0 1
59755: PPUSH
59756: LD_VAR 0 2
59760: PPUSH
59761: CALL_OW 308
59765: NOT
59766: AND
59767: IFFALSE 59771
// exit ;
59769: GO 59889
// if IsInArea ( unit , area ) then
59771: LD_VAR 0 1
59775: PPUSH
59776: LD_VAR 0 2
59780: PPUSH
59781: CALL_OW 308
59785: IFFALSE 59803
// begin ComMoveToArea ( unit , goAway ) ;
59787: LD_VAR 0 1
59791: PPUSH
59792: LD_VAR 0 3
59796: PPUSH
59797: CALL_OW 113
// exit ;
59801: GO 59889
// end ; if task [ 1 ] [ 1 ] <> M then
59803: LD_VAR 0 7
59807: PUSH
59808: LD_INT 1
59810: ARRAY
59811: PUSH
59812: LD_INT 1
59814: ARRAY
59815: PUSH
59816: LD_STRING M
59818: NONEQUAL
59819: IFFALSE 59823
// exit ;
59821: GO 59889
// x := task [ 1 ] [ 2 ] ;
59823: LD_ADDR_VAR 0 5
59827: PUSH
59828: LD_VAR 0 7
59832: PUSH
59833: LD_INT 1
59835: ARRAY
59836: PUSH
59837: LD_INT 2
59839: ARRAY
59840: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
59841: LD_ADDR_VAR 0 6
59845: PUSH
59846: LD_VAR 0 7
59850: PUSH
59851: LD_INT 1
59853: ARRAY
59854: PUSH
59855: LD_INT 3
59857: ARRAY
59858: ST_TO_ADDR
// if InArea ( x , y , area ) then
59859: LD_VAR 0 5
59863: PPUSH
59864: LD_VAR 0 6
59868: PPUSH
59869: LD_VAR 0 2
59873: PPUSH
59874: CALL_OW 309
59878: IFFALSE 59889
// ComStop ( unit ) ;
59880: LD_VAR 0 1
59884: PPUSH
59885: CALL_OW 141
// end ;
59889: LD_VAR 0 4
59893: RET
// export function Abs ( value ) ; begin
59894: LD_INT 0
59896: PPUSH
// result := value ;
59897: LD_ADDR_VAR 0 2
59901: PUSH
59902: LD_VAR 0 1
59906: ST_TO_ADDR
// if value < 0 then
59907: LD_VAR 0 1
59911: PUSH
59912: LD_INT 0
59914: LESS
59915: IFFALSE 59932
// result := value * - 1 ;
59917: LD_ADDR_VAR 0 2
59921: PUSH
59922: LD_VAR 0 1
59926: PUSH
59927: LD_INT 1
59929: NEG
59930: MUL
59931: ST_TO_ADDR
// end ;
59932: LD_VAR 0 2
59936: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
59937: LD_INT 0
59939: PPUSH
59940: PPUSH
59941: PPUSH
59942: PPUSH
59943: PPUSH
59944: PPUSH
59945: PPUSH
59946: PPUSH
// if not unit or not building then
59947: LD_VAR 0 1
59951: NOT
59952: PUSH
59953: LD_VAR 0 2
59957: NOT
59958: OR
59959: IFFALSE 59963
// exit ;
59961: GO 60189
// x := GetX ( building ) ;
59963: LD_ADDR_VAR 0 4
59967: PUSH
59968: LD_VAR 0 2
59972: PPUSH
59973: CALL_OW 250
59977: ST_TO_ADDR
// y := GetY ( building ) ;
59978: LD_ADDR_VAR 0 6
59982: PUSH
59983: LD_VAR 0 2
59987: PPUSH
59988: CALL_OW 251
59992: ST_TO_ADDR
// d := GetDir ( building ) ;
59993: LD_ADDR_VAR 0 8
59997: PUSH
59998: LD_VAR 0 2
60002: PPUSH
60003: CALL_OW 254
60007: ST_TO_ADDR
// r := 4 ;
60008: LD_ADDR_VAR 0 9
60012: PUSH
60013: LD_INT 4
60015: ST_TO_ADDR
// for i := 1 to 5 do
60016: LD_ADDR_VAR 0 10
60020: PUSH
60021: DOUBLE
60022: LD_INT 1
60024: DEC
60025: ST_TO_ADDR
60026: LD_INT 5
60028: PUSH
60029: FOR_TO
60030: IFFALSE 60187
// begin _x := ShiftX ( x , d , r + i ) ;
60032: LD_ADDR_VAR 0 5
60036: PUSH
60037: LD_VAR 0 4
60041: PPUSH
60042: LD_VAR 0 8
60046: PPUSH
60047: LD_VAR 0 9
60051: PUSH
60052: LD_VAR 0 10
60056: PLUS
60057: PPUSH
60058: CALL_OW 272
60062: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
60063: LD_ADDR_VAR 0 7
60067: PUSH
60068: LD_VAR 0 6
60072: PPUSH
60073: LD_VAR 0 8
60077: PPUSH
60078: LD_VAR 0 9
60082: PUSH
60083: LD_VAR 0 10
60087: PLUS
60088: PPUSH
60089: CALL_OW 273
60093: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
60094: LD_VAR 0 5
60098: PPUSH
60099: LD_VAR 0 7
60103: PPUSH
60104: CALL_OW 488
60108: PUSH
60109: LD_VAR 0 5
60113: PPUSH
60114: LD_VAR 0 7
60118: PPUSH
60119: CALL_OW 428
60123: PPUSH
60124: CALL_OW 247
60128: PUSH
60129: LD_INT 3
60131: PUSH
60132: LD_INT 2
60134: PUSH
60135: EMPTY
60136: LIST
60137: LIST
60138: IN
60139: NOT
60140: AND
60141: IFFALSE 60185
// begin ComMoveXY ( unit , _x , _y ) ;
60143: LD_VAR 0 1
60147: PPUSH
60148: LD_VAR 0 5
60152: PPUSH
60153: LD_VAR 0 7
60157: PPUSH
60158: CALL_OW 111
// result := [ _x , _y ] ;
60162: LD_ADDR_VAR 0 3
60166: PUSH
60167: LD_VAR 0 5
60171: PUSH
60172: LD_VAR 0 7
60176: PUSH
60177: EMPTY
60178: LIST
60179: LIST
60180: ST_TO_ADDR
// exit ;
60181: POP
60182: POP
60183: GO 60189
// end ; end ;
60185: GO 60029
60187: POP
60188: POP
// end ;
60189: LD_VAR 0 3
60193: RET
