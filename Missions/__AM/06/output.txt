// export JMM , Gladstone , Denis , Lisa , Frank , Bobby , Cyrus , Brown , Donaldson , Mike ; export others , randomsDelta ; export apemans , yourApemans ; export yourVehicles ; export DeltaDoctor ; export Harisson ; export selectedPeople ; export baseCorrect ; export cutscene ; export lab ; export resources ; export mission_prefix , mission_prefix_prev ; starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// FogOff ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 344
// baseCorrect := 0 ;
  15: LD_ADDR_EXP 19
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// cutscene := 1 ;
  23: LD_ADDR_EXP 20
  27: PUSH
  28: LD_INT 1
  30: ST_TO_ADDR
// apemans := [ ] ;
  31: LD_ADDR_EXP 13
  35: PUSH
  36: EMPTY
  37: ST_TO_ADDR
// yourApemans := [ ] ;
  38: LD_ADDR_EXP 14
  42: PUSH
  43: EMPTY
  44: ST_TO_ADDR
// yourVehicles := [ ] ;
  45: LD_ADDR_EXP 15
  49: PUSH
  50: EMPTY
  51: ST_TO_ADDR
// randomsDelta := [ ] ;
  52: LD_ADDR_EXP 12
  56: PUSH
  57: EMPTY
  58: ST_TO_ADDR
// resources := [ ] ;
  59: LD_ADDR_EXP 22
  63: PUSH
  64: EMPTY
  65: ST_TO_ADDR
// mission_prefix := 06_ ;
  66: LD_ADDR_EXP 23
  70: PUSH
  71: LD_STRING 06_
  73: ST_TO_ADDR
// mission_prefix_prev := 05_ ;
  74: LD_ADDR_EXP 24
  78: PUSH
  79: LD_STRING 05_
  81: ST_TO_ADDR
// PrepareDeltaBase ;
  82: CALL 2382 0 0
// CreateNature ;
  86: CALL 170 0 0
// LoadVehicles ;
  90: CALL 1530 0 0
// PrepareHeroes ;
  94: CALL 299 0 0
// PrepareRandoms ;
  98: CALL 1795 0 0
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
 102: LD_ADDR_EXP 21
 106: PUSH
 107: LD_INT 22
 109: PUSH
 110: LD_INT 1
 112: PUSH
 113: EMPTY
 114: LIST
 115: LIST
 116: PUSH
 117: LD_INT 2
 119: PUSH
 120: LD_INT 30
 122: PUSH
 123: LD_INT 6
 125: PUSH
 126: EMPTY
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 30
 132: PUSH
 133: LD_INT 7
 135: PUSH
 136: EMPTY
 137: LIST
 138: LIST
 139: PUSH
 140: LD_INT 30
 142: PUSH
 143: LD_INT 8
 145: PUSH
 146: EMPTY
 147: LIST
 148: LIST
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: LIST
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: PPUSH
 160: CALL_OW 69
 164: ST_TO_ADDR
// Action ;
 165: CALL 3296 0 0
// end ;
 169: END
// export function CreateNature ; var i ; begin
 170: LD_INT 0
 172: PPUSH
 173: PPUSH
// uc_side := 0 ;
 174: LD_ADDR_OWVAR 20
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// uc_nation := 0 ;
 182: LD_ADDR_OWVAR 21
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// for i = 1 to 4 do
 190: LD_ADDR_VAR 0 2
 194: PUSH
 195: DOUBLE
 196: LD_INT 1
 198: DEC
 199: ST_TO_ADDR
 200: LD_INT 4
 202: PUSH
 203: FOR_TO
 204: IFFALSE 292
// begin hc_gallery :=  ;
 206: LD_ADDR_OWVAR 33
 210: PUSH
 211: LD_STRING 
 213: ST_TO_ADDR
// hc_name :=  ;
 214: LD_ADDR_OWVAR 26
 218: PUSH
 219: LD_STRING 
 221: ST_TO_ADDR
// hc_agressivity := 0 ;
 222: LD_ADDR_OWVAR 35
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// hc_attr := [ rand ( 10 , 11 ) , rand ( 10 , 12 ) ] ;
 230: LD_ADDR_OWVAR 29
 234: PUSH
 235: LD_INT 10
 237: PPUSH
 238: LD_INT 11
 240: PPUSH
 241: CALL_OW 12
 245: PUSH
 246: LD_INT 10
 248: PPUSH
 249: LD_INT 12
 251: PPUSH
 252: CALL_OW 12
 256: PUSH
 257: EMPTY
 258: LIST
 259: LIST
 260: ST_TO_ADDR
// hc_class := class_apeman ;
 261: LD_ADDR_OWVAR 28
 265: PUSH
 266: LD_INT 12
 268: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , 22 , 18 , 20 , false ) ;
 269: CALL_OW 44
 273: PPUSH
 274: LD_INT 22
 276: PPUSH
 277: LD_INT 18
 279: PPUSH
 280: LD_INT 20
 282: PPUSH
 283: LD_INT 0
 285: PPUSH
 286: CALL_OW 50
// end ;
 290: GO 203
 292: POP
 293: POP
// end ; end_of_file
 294: LD_VAR 0 1
 298: RET
// export function PrepareHeroes ; var i , tmp , ape , test ; begin
 299: LD_INT 0
 301: PPUSH
 302: PPUSH
 303: PPUSH
 304: PPUSH
 305: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
 306: LD_ADDR_VAR 0 3
 310: PUSH
 311: LD_INT 22
 313: PUSH
 314: LD_INT 1
 316: PUSH
 317: EMPTY
 318: LIST
 319: LIST
 320: PUSH
 321: LD_INT 21
 323: PUSH
 324: LD_INT 3
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: PUSH
 331: LD_INT 30
 333: PUSH
 334: LD_INT 0
 336: PUSH
 337: EMPTY
 338: LIST
 339: LIST
 340: PUSH
 341: EMPTY
 342: LIST
 343: LIST
 344: LIST
 345: PPUSH
 346: CALL_OW 69
 350: ST_TO_ADDR
// if tmp then
 351: LD_VAR 0 3
 355: IFFALSE 373
// SetBName ( tmp [ 1 ] , delta ) ;
 357: LD_VAR 0 3
 361: PUSH
 362: LD_INT 1
 364: ARRAY
 365: PPUSH
 366: LD_STRING delta
 368: PPUSH
 369: CALL_OW 500
// uc_side := 1 ;
 373: LD_ADDR_OWVAR 20
 377: PUSH
 378: LD_INT 1
 380: ST_TO_ADDR
// uc_nation := 1 ;
 381: LD_ADDR_OWVAR 21
 385: PUSH
 386: LD_INT 1
 388: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , true , mission_prefix_prev ) ;
 389: LD_ADDR_EXP 1
 393: PUSH
 394: LD_STRING JMM
 396: PPUSH
 397: LD_INT 1
 399: PPUSH
 400: LD_EXP 24
 404: PPUSH
 405: CALL 25947 0 3
 409: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
 410: LD_ADDR_EXP 17
 414: PUSH
 415: LD_STRING Harisson
 417: PPUSH
 418: LD_INT 0
 420: PPUSH
 421: LD_STRING 
 423: PPUSH
 424: CALL 25947 0 3
 428: ST_TO_ADDR
// PlaceUnitXYR ( JMM , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 429: LD_EXP 1
 433: PPUSH
 434: LD_VAR 0 3
 438: PUSH
 439: LD_INT 1
 441: ARRAY
 442: PPUSH
 443: CALL_OW 250
 447: PPUSH
 448: LD_VAR 0 3
 452: PUSH
 453: LD_INT 1
 455: ARRAY
 456: PPUSH
 457: CALL_OW 251
 461: PPUSH
 462: LD_INT 5
 464: PPUSH
 465: LD_INT 0
 467: PPUSH
 468: CALL_OW 50
// SetClass ( JMM , 1 ) ;
 472: LD_EXP 1
 476: PPUSH
 477: LD_INT 1
 479: PPUSH
 480: CALL_OW 336
// Gladstone := PrepareUnit ( Gladstone , true , mission_prefix_prev ) ;
 484: LD_ADDR_EXP 2
 488: PUSH
 489: LD_STRING Gladstone
 491: PPUSH
 492: LD_INT 1
 494: PPUSH
 495: LD_EXP 24
 499: PPUSH
 500: CALL 25947 0 3
 504: ST_TO_ADDR
// PlaceUnitXYR ( Gladstone , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 505: LD_EXP 2
 509: PPUSH
 510: LD_VAR 0 3
 514: PUSH
 515: LD_INT 1
 517: ARRAY
 518: PPUSH
 519: CALL_OW 250
 523: PPUSH
 524: LD_VAR 0 3
 528: PUSH
 529: LD_INT 1
 531: ARRAY
 532: PPUSH
 533: CALL_OW 251
 537: PPUSH
 538: LD_INT 5
 540: PPUSH
 541: LD_INT 0
 543: PPUSH
 544: CALL_OW 50
// SetClass ( Gladstone , 4 ) ;
 548: LD_EXP 2
 552: PPUSH
 553: LD_INT 4
 555: PPUSH
 556: CALL_OW 336
// Denis := PrepareUnit ( Denis , true , mission_prefix_prev ) ;
 560: LD_ADDR_EXP 3
 564: PUSH
 565: LD_STRING Denis
 567: PPUSH
 568: LD_INT 1
 570: PPUSH
 571: LD_EXP 24
 575: PPUSH
 576: CALL 25947 0 3
 580: ST_TO_ADDR
// PlaceUnitXYR ( Denis , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 581: LD_EXP 3
 585: PPUSH
 586: LD_VAR 0 3
 590: PUSH
 591: LD_INT 1
 593: ARRAY
 594: PPUSH
 595: CALL_OW 250
 599: PPUSH
 600: LD_VAR 0 3
 604: PUSH
 605: LD_INT 1
 607: ARRAY
 608: PPUSH
 609: CALL_OW 251
 613: PPUSH
 614: LD_INT 5
 616: PPUSH
 617: LD_INT 0
 619: PPUSH
 620: CALL_OW 50
// SetClass ( Denis , 4 ) ;
 624: LD_EXP 3
 628: PPUSH
 629: LD_INT 4
 631: PPUSH
 632: CALL_OW 336
// Mike := PrepareUnit ( Mike , true , mission_prefix_prev ) ;
 636: LD_ADDR_EXP 10
 640: PUSH
 641: LD_STRING Mike
 643: PPUSH
 644: LD_INT 1
 646: PPUSH
 647: LD_EXP 24
 651: PPUSH
 652: CALL 25947 0 3
 656: ST_TO_ADDR
// PlaceUnitXYR ( Mike , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 657: LD_EXP 10
 661: PPUSH
 662: LD_VAR 0 3
 666: PUSH
 667: LD_INT 1
 669: ARRAY
 670: PPUSH
 671: CALL_OW 250
 675: PPUSH
 676: LD_VAR 0 3
 680: PUSH
 681: LD_INT 1
 683: ARRAY
 684: PPUSH
 685: CALL_OW 251
 689: PPUSH
 690: LD_INT 5
 692: PPUSH
 693: LD_INT 0
 695: PPUSH
 696: CALL_OW 50
// if LoadVariable ( FrankInDelta , 0 ) = 1 then
 700: LD_STRING FrankInDelta
 702: PPUSH
 703: LD_INT 0
 705: PPUSH
 706: CALL_OW 30
 710: PUSH
 711: LD_INT 1
 713: EQUAL
 714: IFFALSE 792
// begin Frank := PrepareUnit ( Frank , true , mission_prefix_prev ) ;
 716: LD_ADDR_EXP 5
 720: PUSH
 721: LD_STRING Frank
 723: PPUSH
 724: LD_INT 1
 726: PPUSH
 727: LD_EXP 24
 731: PPUSH
 732: CALL 25947 0 3
 736: ST_TO_ADDR
// PlaceUnitXYR ( Frank , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 737: LD_EXP 5
 741: PPUSH
 742: LD_VAR 0 3
 746: PUSH
 747: LD_INT 1
 749: ARRAY
 750: PPUSH
 751: CALL_OW 250
 755: PPUSH
 756: LD_VAR 0 3
 760: PUSH
 761: LD_INT 1
 763: ARRAY
 764: PPUSH
 765: CALL_OW 251
 769: PPUSH
 770: LD_INT 5
 772: PPUSH
 773: LD_INT 0
 775: PPUSH
 776: CALL_OW 50
// SetClass ( Frank , 1 ) ;
 780: LD_EXP 5
 784: PPUSH
 785: LD_INT 1
 787: PPUSH
 788: CALL_OW 336
// end ; if LoadVariable ( LisaInDelta , 0 ) = 1 then
 792: LD_STRING LisaInDelta
 794: PPUSH
 795: LD_INT 0
 797: PPUSH
 798: CALL_OW 30
 802: PUSH
 803: LD_INT 1
 805: EQUAL
 806: IFFALSE 884
// begin Lisa := PrepareUnit ( Lisa , true , mission_prefix_prev ) ;
 808: LD_ADDR_EXP 4
 812: PUSH
 813: LD_STRING Lisa
 815: PPUSH
 816: LD_INT 1
 818: PPUSH
 819: LD_EXP 24
 823: PPUSH
 824: CALL 25947 0 3
 828: ST_TO_ADDR
// PlaceUnitXYR ( Lisa , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 829: LD_EXP 4
 833: PPUSH
 834: LD_VAR 0 3
 838: PUSH
 839: LD_INT 1
 841: ARRAY
 842: PPUSH
 843: CALL_OW 250
 847: PPUSH
 848: LD_VAR 0 3
 852: PUSH
 853: LD_INT 1
 855: ARRAY
 856: PPUSH
 857: CALL_OW 251
 861: PPUSH
 862: LD_INT 5
 864: PPUSH
 865: LD_INT 0
 867: PPUSH
 868: CALL_OW 50
// SetClass ( Lisa , 1 ) ;
 872: LD_EXP 4
 876: PPUSH
 877: LD_INT 1
 879: PPUSH
 880: CALL_OW 336
// end ; if LoadVariable ( BobbyInDelta , 0 ) = 1 then
 884: LD_STRING BobbyInDelta
 886: PPUSH
 887: LD_INT 0
 889: PPUSH
 890: CALL_OW 30
 894: PUSH
 895: LD_INT 1
 897: EQUAL
 898: IFFALSE 976
// begin Bobby := PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 900: LD_ADDR_EXP 6
 904: PUSH
 905: LD_STRING Bobby
 907: PPUSH
 908: LD_INT 1
 910: PPUSH
 911: LD_EXP 24
 915: PPUSH
 916: CALL 25947 0 3
 920: ST_TO_ADDR
// PlaceUnitXYR ( Bobby , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 921: LD_EXP 6
 925: PPUSH
 926: LD_VAR 0 3
 930: PUSH
 931: LD_INT 1
 933: ARRAY
 934: PPUSH
 935: CALL_OW 250
 939: PPUSH
 940: LD_VAR 0 3
 944: PUSH
 945: LD_INT 1
 947: ARRAY
 948: PPUSH
 949: CALL_OW 251
 953: PPUSH
 954: LD_INT 5
 956: PPUSH
 957: LD_INT 0
 959: PPUSH
 960: CALL_OW 50
// SetClass ( Bobby , 1 ) ;
 964: LD_EXP 6
 968: PPUSH
 969: LD_INT 1
 971: PPUSH
 972: CALL_OW 336
// end ; if LoadVariable ( CyrusInDelta , 0 ) = 1 then
 976: LD_STRING CyrusInDelta
 978: PPUSH
 979: LD_INT 0
 981: PPUSH
 982: CALL_OW 30
 986: PUSH
 987: LD_INT 1
 989: EQUAL
 990: IFFALSE 1068
// begin Cyrus := PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
 992: LD_ADDR_EXP 7
 996: PUSH
 997: LD_STRING Cyrus
 999: PPUSH
1000: LD_INT 1
1002: PPUSH
1003: LD_EXP 24
1007: PPUSH
1008: CALL 25947 0 3
1012: ST_TO_ADDR
// PlaceUnitXYR ( Cyrus , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1013: LD_EXP 7
1017: PPUSH
1018: LD_VAR 0 3
1022: PUSH
1023: LD_INT 1
1025: ARRAY
1026: PPUSH
1027: CALL_OW 250
1031: PPUSH
1032: LD_VAR 0 3
1036: PUSH
1037: LD_INT 1
1039: ARRAY
1040: PPUSH
1041: CALL_OW 251
1045: PPUSH
1046: LD_INT 5
1048: PPUSH
1049: LD_INT 0
1051: PPUSH
1052: CALL_OW 50
// SetClass ( Cyrus , 1 ) ;
1056: LD_EXP 7
1060: PPUSH
1061: LD_INT 1
1063: PPUSH
1064: CALL_OW 336
// end ; if LoadVariable ( DonaldsonInDelta , 0 ) = 1 then
1068: LD_STRING DonaldsonInDelta
1070: PPUSH
1071: LD_INT 0
1073: PPUSH
1074: CALL_OW 30
1078: PUSH
1079: LD_INT 1
1081: EQUAL
1082: IFFALSE 1160
// begin Donaldson := PrepareUnit ( Donaldson , true , mission_prefix_prev ) ;
1084: LD_ADDR_EXP 9
1088: PUSH
1089: LD_STRING Donaldson
1091: PPUSH
1092: LD_INT 1
1094: PPUSH
1095: LD_EXP 24
1099: PPUSH
1100: CALL 25947 0 3
1104: ST_TO_ADDR
// PlaceUnitXYR ( Donaldson , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1105: LD_EXP 9
1109: PPUSH
1110: LD_VAR 0 3
1114: PUSH
1115: LD_INT 1
1117: ARRAY
1118: PPUSH
1119: CALL_OW 250
1123: PPUSH
1124: LD_VAR 0 3
1128: PUSH
1129: LD_INT 1
1131: ARRAY
1132: PPUSH
1133: CALL_OW 251
1137: PPUSH
1138: LD_INT 5
1140: PPUSH
1141: LD_INT 0
1143: PPUSH
1144: CALL_OW 50
// SetClass ( Donaldson , 1 ) ;
1148: LD_EXP 9
1152: PPUSH
1153: LD_INT 1
1155: PPUSH
1156: CALL_OW 336
// end ; if LoadVariable ( BrownInDelta , 0 ) = 1 then
1160: LD_STRING BrownInDelta
1162: PPUSH
1163: LD_INT 0
1165: PPUSH
1166: CALL_OW 30
1170: PUSH
1171: LD_INT 1
1173: EQUAL
1174: IFFALSE 1252
// begin Brown := PrepareUnit ( Brown , true , mission_prefix_prev ) ;
1176: LD_ADDR_EXP 8
1180: PUSH
1181: LD_STRING Brown
1183: PPUSH
1184: LD_INT 1
1186: PPUSH
1187: LD_EXP 24
1191: PPUSH
1192: CALL 25947 0 3
1196: ST_TO_ADDR
// PlaceUnitXYR ( Brown , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1197: LD_EXP 8
1201: PPUSH
1202: LD_VAR 0 3
1206: PUSH
1207: LD_INT 1
1209: ARRAY
1210: PPUSH
1211: CALL_OW 250
1215: PPUSH
1216: LD_VAR 0 3
1220: PUSH
1221: LD_INT 1
1223: ARRAY
1224: PPUSH
1225: CALL_OW 251
1229: PPUSH
1230: LD_INT 5
1232: PPUSH
1233: LD_INT 0
1235: PPUSH
1236: CALL_OW 50
// SetClass ( Brown , 2 ) ;
1240: LD_EXP 8
1244: PPUSH
1245: LD_INT 2
1247: PPUSH
1248: CALL_OW 336
// end ; others := CreateCharacterSet ( othersInDelta ) ;
1252: LD_ADDR_EXP 11
1256: PUSH
1257: LD_STRING othersInDelta
1259: PPUSH
1260: CALL_OW 31
1264: ST_TO_ADDR
// for i in others do
1265: LD_ADDR_VAR 0 2
1269: PUSH
1270: LD_EXP 11
1274: PUSH
1275: FOR_IN
1276: IFFALSE 1323
// PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1278: LD_VAR 0 2
1282: PPUSH
1283: LD_VAR 0 3
1287: PUSH
1288: LD_INT 1
1290: ARRAY
1291: PPUSH
1292: CALL_OW 250
1296: PPUSH
1297: LD_VAR 0 3
1301: PUSH
1302: LD_INT 1
1304: ARRAY
1305: PPUSH
1306: CALL_OW 251
1310: PPUSH
1311: LD_INT 35
1313: PPUSH
1314: LD_INT 0
1316: PPUSH
1317: CALL_OW 50
1321: GO 1275
1323: POP
1324: POP
// apemans := CreateCharacterSet ( apeInDelta ) ;
1325: LD_ADDR_EXP 13
1329: PUSH
1330: LD_STRING apeInDelta
1332: PPUSH
1333: CALL_OW 31
1337: ST_TO_ADDR
// uc_nation := 0 ;
1338: LD_ADDR_OWVAR 21
1342: PUSH
1343: LD_INT 0
1345: ST_TO_ADDR
// if apemans > 5 then
1346: LD_EXP 13
1350: PUSH
1351: LD_INT 5
1353: GREATER
1354: IFFALSE 1449
// begin for i := 1 to 5 do
1356: LD_ADDR_VAR 0 2
1360: PUSH
1361: DOUBLE
1362: LD_INT 1
1364: DEC
1365: ST_TO_ADDR
1366: LD_INT 5
1368: PUSH
1369: FOR_TO
1370: IFFALSE 1445
// begin PlaceUnitXYR ( apemans [ i ] , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1372: LD_EXP 13
1376: PUSH
1377: LD_VAR 0 2
1381: ARRAY
1382: PPUSH
1383: LD_VAR 0 3
1387: PUSH
1388: LD_INT 1
1390: ARRAY
1391: PPUSH
1392: CALL_OW 250
1396: PPUSH
1397: LD_VAR 0 3
1401: PUSH
1402: LD_INT 1
1404: ARRAY
1405: PPUSH
1406: CALL_OW 251
1410: PPUSH
1411: LD_INT 50
1413: PPUSH
1414: LD_INT 0
1416: PPUSH
1417: CALL_OW 50
// yourApemans := yourApemans ^ apemans [ i ] ;
1421: LD_ADDR_EXP 14
1425: PUSH
1426: LD_EXP 14
1430: PUSH
1431: LD_EXP 13
1435: PUSH
1436: LD_VAR 0 2
1440: ARRAY
1441: ADD
1442: ST_TO_ADDR
// end ;
1443: GO 1369
1445: POP
1446: POP
// end else
1447: GO 1525
// begin for i in apemans do
1449: LD_ADDR_VAR 0 2
1453: PUSH
1454: LD_EXP 13
1458: PUSH
1459: FOR_IN
1460: IFFALSE 1523
// begin PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1462: LD_VAR 0 2
1466: PPUSH
1467: LD_VAR 0 3
1471: PUSH
1472: LD_INT 1
1474: ARRAY
1475: PPUSH
1476: CALL_OW 250
1480: PPUSH
1481: LD_VAR 0 3
1485: PUSH
1486: LD_INT 1
1488: ARRAY
1489: PPUSH
1490: CALL_OW 251
1494: PPUSH
1495: LD_INT 50
1497: PPUSH
1498: LD_INT 0
1500: PPUSH
1501: CALL_OW 50
// yourApemans := yourApemans ^ i ;
1505: LD_ADDR_EXP 14
1509: PUSH
1510: LD_EXP 14
1514: PUSH
1515: LD_VAR 0 2
1519: ADD
1520: ST_TO_ADDR
// end ;
1521: GO 1459
1523: POP
1524: POP
// end ; end ;
1525: LD_VAR 0 1
1529: RET
// export function LoadVehicles ; var i , j , veh , tmp , vehicles ; begin
1530: LD_INT 0
1532: PPUSH
1533: PPUSH
1534: PPUSH
1535: PPUSH
1536: PPUSH
1537: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1538: LD_ADDR_VAR 0 5
1542: PUSH
1543: LD_INT 22
1545: PUSH
1546: LD_INT 1
1548: PUSH
1549: EMPTY
1550: LIST
1551: LIST
1552: PUSH
1553: LD_INT 21
1555: PUSH
1556: LD_INT 3
1558: PUSH
1559: EMPTY
1560: LIST
1561: LIST
1562: PUSH
1563: LD_INT 30
1565: PUSH
1566: LD_INT 0
1568: PUSH
1569: EMPTY
1570: LIST
1571: LIST
1572: PUSH
1573: EMPTY
1574: LIST
1575: LIST
1576: LIST
1577: PPUSH
1578: CALL_OW 69
1582: ST_TO_ADDR
// uc_side := 1 ;
1583: LD_ADDR_OWVAR 20
1587: PUSH
1588: LD_INT 1
1590: ST_TO_ADDR
// vehicles := LoadVariable ( vehiclesInDelta , [ ] ) ;
1591: LD_ADDR_VAR 0 6
1595: PUSH
1596: LD_STRING vehiclesInDelta
1598: PPUSH
1599: EMPTY
1600: PPUSH
1601: CALL_OW 30
1605: ST_TO_ADDR
// for i := 1 to Count ( vehicles ) div 4 do
1606: LD_ADDR_VAR 0 2
1610: PUSH
1611: DOUBLE
1612: LD_INT 1
1614: DEC
1615: ST_TO_ADDR
1616: LD_VAR 0 6
1620: PPUSH
1621: CALL 28049 0 1
1625: PUSH
1626: LD_INT 4
1628: DIV
1629: PUSH
1630: FOR_TO
1631: IFFALSE 1788
// begin uc_nation := vehicles [ 1 ] ;
1633: LD_ADDR_OWVAR 21
1637: PUSH
1638: LD_VAR 0 6
1642: PUSH
1643: LD_INT 1
1645: ARRAY
1646: ST_TO_ADDR
// vc_chassis := vehicles [ 2 ] ;
1647: LD_ADDR_OWVAR 37
1651: PUSH
1652: LD_VAR 0 6
1656: PUSH
1657: LD_INT 2
1659: ARRAY
1660: ST_TO_ADDR
// vc_engine := vehicles [ 3 ] ;
1661: LD_ADDR_OWVAR 39
1665: PUSH
1666: LD_VAR 0 6
1670: PUSH
1671: LD_INT 3
1673: ARRAY
1674: ST_TO_ADDR
// vc_control := vehicles [ 4 ] ;
1675: LD_ADDR_OWVAR 38
1679: PUSH
1680: LD_VAR 0 6
1684: PUSH
1685: LD_INT 4
1687: ARRAY
1688: ST_TO_ADDR
// vc_weapon := vehicles [ 5 ] ;
1689: LD_ADDR_OWVAR 40
1693: PUSH
1694: LD_VAR 0 6
1698: PUSH
1699: LD_INT 5
1701: ARRAY
1702: ST_TO_ADDR
// veh := CreateVehicle ;
1703: LD_ADDR_VAR 0 4
1707: PUSH
1708: CALL_OW 45
1712: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1713: LD_VAR 0 4
1717: PPUSH
1718: LD_INT 0
1720: PPUSH
1721: LD_INT 5
1723: PPUSH
1724: CALL_OW 12
1728: PPUSH
1729: CALL_OW 233
// PlaceUnitArea ( veh , parkingArea , false ) ;
1733: LD_VAR 0 4
1737: PPUSH
1738: LD_INT 4
1740: PPUSH
1741: LD_INT 0
1743: PPUSH
1744: CALL_OW 49
// for j := 1 to 5 do
1748: LD_ADDR_VAR 0 3
1752: PUSH
1753: DOUBLE
1754: LD_INT 1
1756: DEC
1757: ST_TO_ADDR
1758: LD_INT 5
1760: PUSH
1761: FOR_TO
1762: IFFALSE 1784
// vehicles := Delete ( vehicles , 1 ) ;
1764: LD_ADDR_VAR 0 6
1768: PUSH
1769: LD_VAR 0 6
1773: PPUSH
1774: LD_INT 1
1776: PPUSH
1777: CALL_OW 3
1781: ST_TO_ADDR
1782: GO 1761
1784: POP
1785: POP
// end ;
1786: GO 1630
1788: POP
1789: POP
// end ;
1790: LD_VAR 0 1
1794: RET
// export function PrepareRandoms ; var i , un , tmp , filter ; begin
1795: LD_INT 0
1797: PPUSH
1798: PPUSH
1799: PPUSH
1800: PPUSH
1801: PPUSH
// uc_side := 1 ;
1802: LD_ADDR_OWVAR 20
1806: PUSH
1807: LD_INT 1
1809: ST_TO_ADDR
// uc_nation := 1 ;
1810: LD_ADDR_OWVAR 21
1814: PUSH
1815: LD_INT 1
1817: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1818: LD_ADDR_VAR 0 4
1822: PUSH
1823: LD_INT 22
1825: PUSH
1826: LD_INT 1
1828: PUSH
1829: EMPTY
1830: LIST
1831: LIST
1832: PUSH
1833: LD_INT 21
1835: PUSH
1836: LD_INT 3
1838: PUSH
1839: EMPTY
1840: LIST
1841: LIST
1842: PUSH
1843: LD_INT 30
1845: PUSH
1846: LD_INT 0
1848: PUSH
1849: EMPTY
1850: LIST
1851: LIST
1852: PUSH
1853: EMPTY
1854: LIST
1855: LIST
1856: LIST
1857: PPUSH
1858: CALL_OW 69
1862: ST_TO_ADDR
// deltaDoctor := ( FilterAllunits ( [ [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] ) ;
1863: LD_ADDR_EXP 16
1867: PUSH
1868: LD_INT 22
1870: PUSH
1871: LD_INT 1
1873: PUSH
1874: EMPTY
1875: LIST
1876: LIST
1877: PUSH
1878: LD_INT 25
1880: PUSH
1881: LD_INT 4
1883: PUSH
1884: EMPTY
1885: LIST
1886: LIST
1887: PUSH
1888: LD_INT 26
1890: PUSH
1891: LD_INT 1
1893: PUSH
1894: EMPTY
1895: LIST
1896: LIST
1897: PUSH
1898: EMPTY
1899: LIST
1900: LIST
1901: LIST
1902: PUSH
1903: EMPTY
1904: LIST
1905: PPUSH
1906: CALL_OW 69
1910: PUSH
1911: LD_EXP 1
1915: PUSH
1916: LD_EXP 7
1920: PUSH
1921: LD_EXP 6
1925: PUSH
1926: LD_EXP 5
1930: PUSH
1931: LD_EXP 2
1935: PUSH
1936: LD_EXP 3
1940: PUSH
1941: LD_EXP 8
1945: PUSH
1946: EMPTY
1947: LIST
1948: LIST
1949: LIST
1950: LIST
1951: LIST
1952: LIST
1953: LIST
1954: DIFF
1955: ST_TO_ADDR
// if not deltaDoctor then
1956: LD_EXP 16
1960: NOT
1961: IFFALSE 2112
// begin filter := FilterAllunits ( [ [ [ f_side , 1 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] ;
1963: LD_ADDR_VAR 0 5
1967: PUSH
1968: LD_INT 22
1970: PUSH
1971: LD_INT 1
1973: PUSH
1974: EMPTY
1975: LIST
1976: LIST
1977: PUSH
1978: LD_INT 26
1980: PUSH
1981: LD_INT 1
1983: PUSH
1984: EMPTY
1985: LIST
1986: LIST
1987: PUSH
1988: EMPTY
1989: LIST
1990: LIST
1991: PUSH
1992: EMPTY
1993: LIST
1994: PPUSH
1995: CALL_OW 69
1999: PUSH
2000: LD_EXP 1
2004: PUSH
2005: LD_EXP 7
2009: PUSH
2010: LD_EXP 6
2014: PUSH
2015: LD_EXP 5
2019: PUSH
2020: LD_EXP 2
2024: PUSH
2025: LD_EXP 3
2029: PUSH
2030: LD_EXP 8
2034: PUSH
2035: EMPTY
2036: LIST
2037: LIST
2038: LIST
2039: LIST
2040: LIST
2041: LIST
2042: LIST
2043: DIFF
2044: ST_TO_ADDR
// if filter then
2045: LD_VAR 0 5
2049: IFFALSE 2110
// for i in filter do
2051: LD_ADDR_VAR 0 2
2055: PUSH
2056: LD_VAR 0 5
2060: PUSH
2061: FOR_IN
2062: IFFALSE 2108
// if GetSkill ( i , 4 ) >= 4 then
2064: LD_VAR 0 2
2068: PPUSH
2069: LD_INT 4
2071: PPUSH
2072: CALL_OW 259
2076: PUSH
2077: LD_INT 4
2079: GREATEREQUAL
2080: IFFALSE 2106
// begin deltaDoctor := i ;
2082: LD_ADDR_EXP 16
2086: PUSH
2087: LD_VAR 0 2
2091: ST_TO_ADDR
// SetClass ( deltaDoctor , 4 ) ;
2092: LD_EXP 16
2096: PPUSH
2097: LD_INT 4
2099: PPUSH
2100: CALL_OW 336
// break ;
2104: GO 2108
// end ;
2106: GO 2061
2108: POP
2109: POP
// end else
2110: GO 2126
// deltaDoctor := deltaDoctor [ 1 ] ;
2112: LD_ADDR_EXP 16
2116: PUSH
2117: LD_EXP 16
2121: PUSH
2122: LD_INT 1
2124: ARRAY
2125: ST_TO_ADDR
// for i := 1 to 7 do
2126: LD_ADDR_VAR 0 2
2130: PUSH
2131: DOUBLE
2132: LD_INT 1
2134: DEC
2135: ST_TO_ADDR
2136: LD_INT 7
2138: PUSH
2139: FOR_TO
2140: IFFALSE 2277
// begin hc_gallery :=  ;
2142: LD_ADDR_OWVAR 33
2146: PUSH
2147: LD_STRING 
2149: ST_TO_ADDR
// hc_name :=  ;
2150: LD_ADDR_OWVAR 26
2154: PUSH
2155: LD_STRING 
2157: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 3 , 5 ) ) ;
2158: LD_INT 0
2160: PPUSH
2161: LD_INT 1
2163: PUSH
2164: LD_INT 2
2166: PUSH
2167: LD_INT 3
2169: PUSH
2170: LD_INT 4
2172: PUSH
2173: EMPTY
2174: LIST
2175: LIST
2176: LIST
2177: LIST
2178: PUSH
2179: LD_INT 1
2181: PPUSH
2182: LD_INT 4
2184: PPUSH
2185: CALL_OW 12
2189: ARRAY
2190: PPUSH
2191: LD_INT 3
2193: PPUSH
2194: LD_INT 5
2196: PPUSH
2197: CALL_OW 12
2201: PPUSH
2202: CALL_OW 380
// un := CreateHuman ;
2206: LD_ADDR_VAR 0 3
2210: PUSH
2211: CALL_OW 44
2215: ST_TO_ADDR
// randomsDelta := randomsDelta ^ un ;
2216: LD_ADDR_EXP 12
2220: PUSH
2221: LD_EXP 12
2225: PUSH
2226: LD_VAR 0 3
2230: ADD
2231: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
2232: LD_VAR 0 3
2236: PPUSH
2237: LD_VAR 0 4
2241: PUSH
2242: LD_INT 1
2244: ARRAY
2245: PPUSH
2246: CALL_OW 250
2250: PPUSH
2251: LD_VAR 0 4
2255: PUSH
2256: LD_INT 1
2258: ARRAY
2259: PPUSH
2260: CALL_OW 251
2264: PPUSH
2265: LD_INT 15
2267: PPUSH
2268: LD_INT 0
2270: PPUSH
2271: CALL_OW 50
// end ;
2275: GO 2139
2277: POP
2278: POP
// if deltaDoctor then
2279: LD_EXP 16
2283: IFFALSE 2287
// exit ;
2285: GO 2377
// hc_gallery := Dawkins ;
2287: LD_ADDR_OWVAR 33
2291: PUSH
2292: LD_STRING Dawkins
2294: ST_TO_ADDR
// hc_face_number := 1 ;
2295: LD_ADDR_OWVAR 34
2299: PUSH
2300: LD_INT 1
2302: ST_TO_ADDR
// hc_name := Dr. Adam Charles Dawkins ;
2303: LD_ADDR_OWVAR 26
2307: PUSH
2308: LD_STRING Dr. Adam Charles Dawkins
2310: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 5 ) ;
2311: LD_INT 1
2313: PPUSH
2314: LD_INT 4
2316: PPUSH
2317: LD_INT 5
2319: PPUSH
2320: CALL_OW 380
// deltaDoctor := CreateHuman ;
2324: LD_ADDR_EXP 16
2328: PUSH
2329: CALL_OW 44
2333: ST_TO_ADDR
// PlaceUnitXYR ( deltaDoctor , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
2334: LD_EXP 16
2338: PPUSH
2339: LD_VAR 0 4
2343: PUSH
2344: LD_INT 1
2346: ARRAY
2347: PPUSH
2348: CALL_OW 250
2352: PPUSH
2353: LD_VAR 0 4
2357: PUSH
2358: LD_INT 1
2360: ARRAY
2361: PPUSH
2362: CALL_OW 251
2366: PPUSH
2367: LD_INT 5
2369: PPUSH
2370: LD_INT 0
2372: PPUSH
2373: CALL_OW 50
// end ; end_of_file
2377: LD_VAR 0 1
2381: RET
// export function PrepareDeltaBase ; var i , j , building , buildings , lab , tmp ; begin
2382: LD_INT 0
2384: PPUSH
2385: PPUSH
2386: PPUSH
2387: PPUSH
2388: PPUSH
2389: PPUSH
2390: PPUSH
// buildings := LoadVariable ( buildingsInDelta , [ ] ) ;
2391: LD_ADDR_VAR 0 5
2395: PUSH
2396: LD_STRING buildingsInDelta
2398: PPUSH
2399: EMPTY
2400: PPUSH
2401: CALL_OW 30
2405: ST_TO_ADDR
// SetResourceVisibility ( 68 , 40 , 1 ) ;
2406: LD_INT 68
2408: PPUSH
2409: LD_INT 40
2411: PPUSH
2412: LD_INT 1
2414: PPUSH
2415: CALL_OW 441
// uc_side := 1 ;
2419: LD_ADDR_OWVAR 20
2423: PUSH
2424: LD_INT 1
2426: ST_TO_ADDR
// uc_nation := 1 ;
2427: LD_ADDR_OWVAR 21
2431: PUSH
2432: LD_INT 1
2434: ST_TO_ADDR
// for i := 1 to buildings do
2435: LD_ADDR_VAR 0 2
2439: PUSH
2440: DOUBLE
2441: LD_INT 1
2443: DEC
2444: ST_TO_ADDR
2445: LD_VAR 0 5
2449: PUSH
2450: FOR_TO
2451: IFFALSE 2752
// begin InitBc ;
2453: CALL_OW 21
// bc_type := buildings [ i ] [ 1 ] ;
2457: LD_ADDR_OWVAR 42
2461: PUSH
2462: LD_VAR 0 5
2466: PUSH
2467: LD_VAR 0 2
2471: ARRAY
2472: PUSH
2473: LD_INT 1
2475: ARRAY
2476: ST_TO_ADDR
// bc_level := buildings [ i ] [ 2 ] ;
2477: LD_ADDR_OWVAR 43
2481: PUSH
2482: LD_VAR 0 5
2486: PUSH
2487: LD_VAR 0 2
2491: ARRAY
2492: PUSH
2493: LD_INT 2
2495: ARRAY
2496: ST_TO_ADDR
// if bc_type in [ b_lab , b_lab_half , b_lab_full ] then
2497: LD_OWVAR 42
2501: PUSH
2502: LD_INT 6
2504: PUSH
2505: LD_INT 7
2507: PUSH
2508: LD_INT 8
2510: PUSH
2511: EMPTY
2512: LIST
2513: LIST
2514: LIST
2515: IN
2516: IFFALSE 2640
// begin bc_kind1 := b_lab_basic ;
2518: LD_ADDR_OWVAR 44
2522: PUSH
2523: LD_INT 9
2525: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2526: LD_ADDR_OWVAR 45
2530: PUSH
2531: LD_INT 9
2533: ST_TO_ADDR
// if buildings [ i ] [ 6 ] then
2534: LD_VAR 0 5
2538: PUSH
2539: LD_VAR 0 2
2543: ARRAY
2544: PUSH
2545: LD_INT 6
2547: ARRAY
2548: IFFALSE 2616
// begin bc_kind1 := buildings [ i ] [ 6 ] ;
2550: LD_ADDR_OWVAR 44
2554: PUSH
2555: LD_VAR 0 5
2559: PUSH
2560: LD_VAR 0 2
2564: ARRAY
2565: PUSH
2566: LD_INT 6
2568: ARRAY
2569: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2570: LD_ADDR_OWVAR 45
2574: PUSH
2575: LD_INT 9
2577: ST_TO_ADDR
// if buildings [ i ] [ 7 ] then
2578: LD_VAR 0 5
2582: PUSH
2583: LD_VAR 0 2
2587: ARRAY
2588: PUSH
2589: LD_INT 7
2591: ARRAY
2592: IFFALSE 2614
// bc_kind2 := buildings [ i ] [ 7 ] ;
2594: LD_ADDR_OWVAR 45
2598: PUSH
2599: LD_VAR 0 5
2603: PUSH
2604: LD_VAR 0 2
2608: ARRAY
2609: PUSH
2610: LD_INT 7
2612: ARRAY
2613: ST_TO_ADDR
// end else
2614: GO 2640
// begin bc_type := b_lab ;
2616: LD_ADDR_OWVAR 42
2620: PUSH
2621: LD_INT 6
2623: ST_TO_ADDR
// bc_kind1 := b_lab_basic ;
2624: LD_ADDR_OWVAR 44
2628: PUSH
2629: LD_INT 9
2631: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2632: LD_ADDR_OWVAR 45
2636: PUSH
2637: LD_INT 9
2639: ST_TO_ADDR
// end ; end ; building := CreateAndPlaceBuildingXYD ( buildings [ i ] [ 3 ] , buildings [ i ] [ 4 ] , buildings [ i ] [ 5 ] ) ;
2640: LD_ADDR_VAR 0 4
2644: PUSH
2645: LD_VAR 0 5
2649: PUSH
2650: LD_VAR 0 2
2654: ARRAY
2655: PUSH
2656: LD_INT 3
2658: ARRAY
2659: PPUSH
2660: LD_VAR 0 5
2664: PUSH
2665: LD_VAR 0 2
2669: ARRAY
2670: PUSH
2671: LD_INT 4
2673: ARRAY
2674: PPUSH
2675: LD_VAR 0 5
2679: PUSH
2680: LD_VAR 0 2
2684: ARRAY
2685: PUSH
2686: LD_INT 5
2688: ARRAY
2689: PPUSH
2690: CALL_OW 47
2694: ST_TO_ADDR
// if GetBType ( building ) = b_bunker and buildings [ i ] [ 8 ] then
2695: LD_VAR 0 4
2699: PPUSH
2700: CALL_OW 266
2704: PUSH
2705: LD_INT 32
2707: EQUAL
2708: PUSH
2709: LD_VAR 0 5
2713: PUSH
2714: LD_VAR 0 2
2718: ARRAY
2719: PUSH
2720: LD_INT 8
2722: ARRAY
2723: AND
2724: IFFALSE 2750
// PlaceWeaponTurret ( building , buildings [ i ] [ 8 ] ) ;
2726: LD_VAR 0 4
2730: PPUSH
2731: LD_VAR 0 5
2735: PUSH
2736: LD_VAR 0 2
2740: ARRAY
2741: PUSH
2742: LD_INT 8
2744: ARRAY
2745: PPUSH
2746: CALL_OW 431
// end ;
2750: GO 2450
2752: POP
2753: POP
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
2754: LD_ADDR_VAR 0 6
2758: PUSH
2759: LD_INT 22
2761: PUSH
2762: LD_INT 1
2764: PUSH
2765: EMPTY
2766: LIST
2767: LIST
2768: PUSH
2769: LD_INT 2
2771: PUSH
2772: LD_INT 30
2774: PUSH
2775: LD_INT 6
2777: PUSH
2778: EMPTY
2779: LIST
2780: LIST
2781: PUSH
2782: LD_INT 30
2784: PUSH
2785: LD_INT 7
2787: PUSH
2788: EMPTY
2789: LIST
2790: LIST
2791: PUSH
2792: LD_INT 30
2794: PUSH
2795: LD_INT 8
2797: PUSH
2798: EMPTY
2799: LIST
2800: LIST
2801: PUSH
2802: EMPTY
2803: LIST
2804: LIST
2805: LIST
2806: LIST
2807: PUSH
2808: EMPTY
2809: LIST
2810: LIST
2811: PPUSH
2812: CALL_OW 69
2816: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) ;
2817: LD_ADDR_VAR 0 7
2821: PUSH
2822: LD_INT 22
2824: PUSH
2825: LD_INT 1
2827: PUSH
2828: EMPTY
2829: LIST
2830: LIST
2831: PUSH
2832: LD_INT 30
2834: PUSH
2835: LD_INT 0
2837: PUSH
2838: EMPTY
2839: LIST
2840: LIST
2841: PUSH
2842: EMPTY
2843: LIST
2844: LIST
2845: PPUSH
2846: CALL_OW 69
2850: ST_TO_ADDR
// if lab and tmp then
2851: LD_VAR 0 6
2855: PUSH
2856: LD_VAR 0 7
2860: AND
2861: IFFALSE 2871
// baseCorrect := 1 ;
2863: LD_ADDR_EXP 19
2867: PUSH
2868: LD_INT 1
2870: ST_TO_ADDR
// if not baseCorrect then
2871: LD_EXP 19
2875: NOT
2876: IFFALSE 3291
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
2878: LD_ADDR_VAR 0 2
2882: PUSH
2883: LD_INT 22
2885: PUSH
2886: LD_INT 1
2888: PUSH
2889: EMPTY
2890: LIST
2891: LIST
2892: PUSH
2893: LD_INT 21
2895: PUSH
2896: LD_INT 3
2898: PUSH
2899: EMPTY
2900: LIST
2901: LIST
2902: PUSH
2903: EMPTY
2904: LIST
2905: LIST
2906: PPUSH
2907: CALL_OW 69
2911: PUSH
2912: FOR_IN
2913: IFFALSE 2926
// RemoveUnit ( i ) ;
2915: LD_VAR 0 2
2919: PPUSH
2920: CALL_OW 64
2924: GO 2912
2926: POP
2927: POP
// uc_nation := 1 ;
2928: LD_ADDR_OWVAR 21
2932: PUSH
2933: LD_INT 1
2935: ST_TO_ADDR
// uc_side := 1 ;
2936: LD_ADDR_OWVAR 20
2940: PUSH
2941: LD_INT 1
2943: ST_TO_ADDR
// bc_level := 5 ;
2944: LD_ADDR_OWVAR 43
2948: PUSH
2949: LD_INT 5
2951: ST_TO_ADDR
// bc_type := b_depot ;
2952: LD_ADDR_OWVAR 42
2956: PUSH
2957: LD_INT 0
2959: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 50 , 22 , 0 ) ;
2960: LD_INT 50
2962: PPUSH
2963: LD_INT 22
2965: PPUSH
2966: LD_INT 0
2968: PPUSH
2969: CALL_OW 47
// bc_type = b_bunker ;
2973: LD_ADDR_OWVAR 42
2977: PUSH
2978: LD_INT 32
2980: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( 68 , 24 , 4 ) ;
2981: LD_ADDR_VAR 0 4
2985: PUSH
2986: LD_INT 68
2988: PPUSH
2989: LD_INT 24
2991: PPUSH
2992: LD_INT 4
2994: PPUSH
2995: CALL_OW 47
2999: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ rand ( 1 , 2 ) ] ) ;
3000: LD_VAR 0 4
3004: PPUSH
3005: LD_INT 4
3007: PUSH
3008: LD_INT 11
3010: PUSH
3011: EMPTY
3012: LIST
3013: LIST
3014: PUSH
3015: LD_INT 1
3017: PPUSH
3018: LD_INT 2
3020: PPUSH
3021: CALL_OW 12
3025: ARRAY
3026: PPUSH
3027: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 71 , 34 , 4 ) ;
3031: LD_ADDR_VAR 0 4
3035: PUSH
3036: LD_INT 71
3038: PPUSH
3039: LD_INT 34
3041: PPUSH
3042: LD_INT 4
3044: PPUSH
3045: CALL_OW 47
3049: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ rand ( 1 , 2 ) ] ) ;
3050: LD_VAR 0 4
3054: PPUSH
3055: LD_INT 4
3057: PUSH
3058: LD_INT 11
3060: PUSH
3061: EMPTY
3062: LIST
3063: LIST
3064: PUSH
3065: LD_INT 1
3067: PPUSH
3068: LD_INT 2
3070: PPUSH
3071: CALL_OW 12
3075: ARRAY
3076: PPUSH
3077: CALL_OW 431
// bc_type := b_breastwork ;
3081: LD_ADDR_OWVAR 42
3085: PUSH
3086: LD_INT 31
3088: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 51 , 7 , 3 ) ;
3089: LD_INT 51
3091: PPUSH
3092: LD_INT 7
3094: PPUSH
3095: LD_INT 3
3097: PPUSH
3098: CALL_OW 47
// bc_type := b_oil_mine ;
3102: LD_ADDR_OWVAR 42
3106: PUSH
3107: LD_INT 29
3109: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 68 , 40 , 1 ) ;
3110: LD_INT 68
3112: PPUSH
3113: LD_INT 40
3115: PPUSH
3116: LD_INT 1
3118: PPUSH
3119: CALL_OW 47
// bc_type := b_factory ;
3123: LD_ADDR_OWVAR 42
3127: PUSH
3128: LD_INT 3
3130: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 20 , 2 ) ;
3131: LD_INT 38
3133: PPUSH
3134: LD_INT 20
3136: PPUSH
3137: LD_INT 2
3139: PPUSH
3140: CALL_OW 47
// bc_type := b_ext_noncombat ;
3144: LD_ADDR_OWVAR 42
3148: PUSH
3149: LD_INT 19
3151: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 24 , 2 ) ;
3152: LD_INT 38
3154: PPUSH
3155: LD_INT 24
3157: PPUSH
3158: LD_INT 2
3160: PPUSH
3161: CALL_OW 47
// bc_type := b_ext_radar ;
3165: LD_ADDR_OWVAR 42
3169: PUSH
3170: LD_INT 20
3172: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 35 , 20 , 1 ) ;
3173: LD_INT 35
3175: PPUSH
3176: LD_INT 20
3178: PPUSH
3179: LD_INT 1
3181: PPUSH
3182: CALL_OW 47
// bc_type := b_armoury ;
3186: LD_ADDR_OWVAR 42
3190: PUSH
3191: LD_INT 4
3193: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 33 , 28 , 1 ) ;
3194: LD_INT 33
3196: PPUSH
3197: LD_INT 28
3199: PPUSH
3200: LD_INT 1
3202: PPUSH
3203: CALL_OW 47
// bc_type := b_solar_power ;
3207: LD_ADDR_OWVAR 42
3211: PUSH
3212: LD_INT 27
3214: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 46 , 12 , 1 ) ;
3215: LD_INT 46
3217: PPUSH
3218: LD_INT 12
3220: PPUSH
3221: LD_INT 1
3223: PPUSH
3224: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 48 , 11 , 2 ) ;
3228: LD_INT 48
3230: PPUSH
3231: LD_INT 11
3233: PPUSH
3234: LD_INT 2
3236: PPUSH
3237: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 35 , 12 , 3 ) ;
3241: LD_INT 35
3243: PPUSH
3244: LD_INT 12
3246: PPUSH
3247: LD_INT 3
3249: PPUSH
3250: CALL_OW 47
// bc_type := b_lab_half ;
3254: LD_ADDR_OWVAR 42
3258: PUSH
3259: LD_INT 7
3261: ST_TO_ADDR
// bc_kind1 := b_lab_opto ;
3262: LD_ADDR_OWVAR 44
3266: PUSH
3267: LD_INT 15
3269: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
3270: LD_ADDR_OWVAR 45
3274: PUSH
3275: LD_INT 9
3277: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 42 , 15 , 2 ) ;
3278: LD_INT 42
3280: PPUSH
3281: LD_INT 15
3283: PPUSH
3284: LD_INT 2
3286: PPUSH
3287: CALL_OW 47
// end ; end ; end_of_file
3291: LD_VAR 0 1
3295: RET
// export function Action ; var i , j , tmp ; begin
3296: LD_INT 0
3298: PPUSH
3299: PPUSH
3300: PPUSH
3301: PPUSH
// InGameOn ;
3302: CALL_OW 8
// if lab then
3306: LD_EXP 21
3310: IFFALSE 3327
// CenterNowOnUnits ( lab [ 1 ] ) else
3312: LD_EXP 21
3316: PUSH
3317: LD_INT 1
3319: ARRAY
3320: PPUSH
3321: CALL_OW 87
3325: GO 3336
// CenterOnUnits ( JMM ) ;
3327: LD_EXP 1
3331: PPUSH
3332: CALL_OW 85
// if IsOK ( Denis ) then
3336: LD_EXP 3
3340: PPUSH
3341: CALL_OW 302
3345: IFFALSE 3373
// begin SetTech ( tech_radar , 1 , state_researched ) ;
3347: LD_INT 6
3349: PPUSH
3350: LD_INT 1
3352: PPUSH
3353: LD_INT 2
3355: PPUSH
3356: CALL_OW 322
// SetRestrict ( b_ext_radar , 1 , true ) ;
3360: LD_INT 20
3362: PPUSH
3363: LD_INT 1
3365: PPUSH
3366: LD_INT 1
3368: PPUSH
3369: CALL_OW 324
// end ; CenterNowOnUnits ( JMM ) ;
3373: LD_EXP 1
3377: PPUSH
3378: CALL_OW 87
// ComTurnUnit ( JMM , DeltaDoctor ) ;
3382: LD_EXP 1
3386: PPUSH
3387: LD_EXP 16
3391: PPUSH
3392: CALL_OW 119
// repeat wait ( 0 0$1 ) ;
3396: LD_INT 35
3398: PPUSH
3399: CALL_OW 67
// ComMoveUnit ( DeltaDoctor , JMM ) ;
3403: LD_EXP 16
3407: PPUSH
3408: LD_EXP 1
3412: PPUSH
3413: CALL_OW 112
// until GetDistUnits ( JMM , DeltaDoctor ) < 5 ;
3417: LD_EXP 1
3421: PPUSH
3422: LD_EXP 16
3426: PPUSH
3427: CALL_OW 296
3431: PUSH
3432: LD_INT 5
3434: LESS
3435: IFFALSE 3396
// ComTurnUnit ( DeltaDoctor , JMM ) ;
3437: LD_EXP 16
3441: PPUSH
3442: LD_EXP 1
3446: PPUSH
3447: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
3451: LD_EXP 1
3455: PPUSH
3456: LD_STRING D1-JMM-1
3458: PPUSH
3459: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-1 ) ;
3463: LD_EXP 16
3467: PPUSH
3468: LD_STRING D1-Sci-1
3470: PPUSH
3471: CALL_OW 88
// ComEnterUnit ( [ JMM , DeltaDoctor , Denis ] , lab [ 1 ] ) ;
3475: LD_EXP 1
3479: PUSH
3480: LD_EXP 16
3484: PUSH
3485: LD_EXP 3
3489: PUSH
3490: EMPTY
3491: LIST
3492: LIST
3493: LIST
3494: PPUSH
3495: LD_EXP 21
3499: PUSH
3500: LD_INT 1
3502: ARRAY
3503: PPUSH
3504: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
3508: LD_INT 35
3510: PPUSH
3511: CALL_OW 67
// until IsInUnit ( JMM ) and IsInUnit ( DeltaDoctor ) ;
3515: LD_EXP 1
3519: PPUSH
3520: CALL_OW 310
3524: PUSH
3525: LD_EXP 16
3529: PPUSH
3530: CALL_OW 310
3534: AND
3535: IFFALSE 3508
// CenterNowOnUnits ( lab [ 1 ] ) ;
3537: LD_EXP 21
3541: PUSH
3542: LD_INT 1
3544: ARRAY
3545: PPUSH
3546: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
3550: LD_EXP 1
3554: PPUSH
3555: LD_STRING D1-JMM-2
3557: PPUSH
3558: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-2 ) ;
3562: LD_EXP 16
3566: PPUSH
3567: LD_STRING D1-Sci-2
3569: PPUSH
3570: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
3574: LD_EXP 1
3578: PPUSH
3579: LD_STRING D1-JMM-3
3581: PPUSH
3582: CALL_OW 88
// if IsOK ( Denis ) then
3586: LD_EXP 3
3590: PPUSH
3591: CALL_OW 302
3595: IFFALSE 3611
// Say ( DeltaDoctor , D1-Sci-3 ) else
3597: LD_EXP 16
3601: PPUSH
3602: LD_STRING D1-Sci-3
3604: PPUSH
3605: CALL_OW 88
3609: GO 3623
// Say ( DeltaDoctor , D1-Sci-3a ) ;
3611: LD_EXP 16
3615: PPUSH
3616: LD_STRING D1-Sci-3a
3618: PPUSH
3619: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
3623: LD_EXP 1
3627: PPUSH
3628: LD_STRING D1-JMM-4
3630: PPUSH
3631: CALL_OW 88
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
3635: LD_ADDR_VAR 0 4
3639: PUSH
3640: LD_INT 22
3642: PUSH
3643: LD_INT 1
3645: PUSH
3646: EMPTY
3647: LIST
3648: LIST
3649: PUSH
3650: LD_INT 25
3652: PUSH
3653: LD_INT 4
3655: PUSH
3656: EMPTY
3657: LIST
3658: LIST
3659: PUSH
3660: LD_INT 3
3662: PUSH
3663: LD_INT 54
3665: PUSH
3666: EMPTY
3667: LIST
3668: PUSH
3669: EMPTY
3670: LIST
3671: LIST
3672: PUSH
3673: EMPTY
3674: LIST
3675: LIST
3676: LIST
3677: PPUSH
3678: CALL_OW 69
3682: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 0 ] ) do
3683: LD_ADDR_VAR 0 2
3687: PUSH
3688: LD_INT 22
3690: PUSH
3691: LD_INT 0
3693: PUSH
3694: EMPTY
3695: LIST
3696: LIST
3697: PPUSH
3698: CALL_OW 69
3702: PUSH
3703: FOR_IN
3704: IFFALSE 3754
// for j in tmp do
3706: LD_ADDR_VAR 0 3
3710: PUSH
3711: LD_VAR 0 4
3715: PUSH
3716: FOR_IN
3717: IFFALSE 3750
// AddComTameXY ( j , GetX ( i ) , GetY ( i ) ) ;
3719: LD_VAR 0 3
3723: PPUSH
3724: LD_VAR 0 2
3728: PPUSH
3729: CALL_OW 250
3733: PPUSH
3734: LD_VAR 0 2
3738: PPUSH
3739: CALL_OW 251
3743: PPUSH
3744: CALL_OW 191
3748: GO 3716
3750: POP
3751: POP
3752: GO 3703
3754: POP
3755: POP
// Say ( DeltaDoctor , D1-Sci-4 ) ;
3756: LD_EXP 16
3760: PPUSH
3761: LD_STRING D1-Sci-4
3763: PPUSH
3764: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
3768: LD_EXP 1
3772: PPUSH
3773: LD_STRING D1-JMM-5
3775: PPUSH
3776: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-5 ) ;
3780: LD_EXP 16
3784: PPUSH
3785: LD_STRING D1-Sci-5
3787: PPUSH
3788: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
3792: LD_EXP 1
3796: PPUSH
3797: LD_STRING D1-JMM-6
3799: PPUSH
3800: CALL_OW 88
// SayRadio ( Harisson , D1-Har-6 ) ;
3804: LD_EXP 17
3808: PPUSH
3809: LD_STRING D1-Har-6
3811: PPUSH
3812: CALL_OW 94
// Say ( JMM , D1-JMM-7 ) ;
3816: LD_EXP 1
3820: PPUSH
3821: LD_STRING D1-JMM-7
3823: PPUSH
3824: CALL_OW 88
// SayRadio ( Harisson , D1-Har-7 ) ;
3828: LD_EXP 17
3832: PPUSH
3833: LD_STRING D1-Har-7
3835: PPUSH
3836: CALL_OW 94
// if IsOK ( Denis ) then
3840: LD_EXP 3
3844: PPUSH
3845: CALL_OW 302
3849: IFFALSE 3863
// Say ( JMM , D1-JMM-8 ) ;
3851: LD_EXP 1
3855: PPUSH
3856: LD_STRING D1-JMM-8
3858: PPUSH
3859: CALL_OW 88
// Say ( JMM , D1-JMM-8a ) ;
3863: LD_EXP 1
3867: PPUSH
3868: LD_STRING D1-JMM-8a
3870: PPUSH
3871: CALL_OW 88
// SayRadio ( Harisson , D1-Har-8 ) ;
3875: LD_EXP 17
3879: PPUSH
3880: LD_STRING D1-Har-8
3882: PPUSH
3883: CALL_OW 94
// Say ( JMM , D1-JMM-9 ) ;
3887: LD_EXP 1
3891: PPUSH
3892: LD_STRING D1-JMM-9
3894: PPUSH
3895: CALL_OW 88
// SayRadio ( Harisson , D1-Har-9 ) ;
3899: LD_EXP 17
3903: PPUSH
3904: LD_STRING D1-Har-9
3906: PPUSH
3907: CALL_OW 94
// Say ( JMM , D1-JMM-10 ) ;
3911: LD_EXP 1
3915: PPUSH
3916: LD_STRING D1-JMM-10
3918: PPUSH
3919: CALL_OW 88
// if IsOK ( Denis ) then
3923: LD_EXP 3
3927: PPUSH
3928: CALL_OW 302
3932: IFFALSE 3946
// Say ( JMM , D1-JMM-10a ) ;
3934: LD_EXP 1
3938: PPUSH
3939: LD_STRING D1-JMM-10a
3941: PPUSH
3942: CALL_OW 88
// SelectDeltaCharacters ;
3946: CALL 4430 0 0
// SetResourceType ( GetBase ( lab [ 1 ] ) , 1 , 150 ) ;
3950: LD_EXP 21
3954: PUSH
3955: LD_INT 1
3957: ARRAY
3958: PPUSH
3959: CALL_OW 274
3963: PPUSH
3964: LD_INT 1
3966: PPUSH
3967: LD_INT 150
3969: PPUSH
3970: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) then
3974: LD_INT 22
3976: PUSH
3977: LD_INT 1
3979: PUSH
3980: EMPTY
3981: LIST
3982: LIST
3983: PUSH
3984: LD_INT 30
3986: PUSH
3987: LD_INT 29
3989: PUSH
3990: EMPTY
3991: LIST
3992: LIST
3993: PUSH
3994: EMPTY
3995: LIST
3996: LIST
3997: PPUSH
3998: CALL_OW 69
4002: IFFALSE 4028
// SetResourceType ( GetBase ( lab [ 1 ] ) , 2 , 300 ) ;
4004: LD_EXP 21
4008: PUSH
4009: LD_INT 1
4011: ARRAY
4012: PPUSH
4013: CALL_OW 274
4017: PPUSH
4018: LD_INT 2
4020: PPUSH
4021: LD_INT 300
4023: PPUSH
4024: CALL_OW 277
// InGameOff ;
4028: CALL_OW 9
// Query ( Q1 ) ;
4032: LD_STRING Q1
4034: PPUSH
4035: CALL_OW 97
// SetAreaMapShow ( ExitArea , 1 ) ;
4039: LD_INT 3
4041: PPUSH
4042: LD_INT 1
4044: PPUSH
4045: CALL_OW 424
// if IsInUnit ( JMM ) then
4049: LD_EXP 1
4053: PPUSH
4054: CALL_OW 310
4058: IFFALSE 4069
// ComExitBuilding ( JMM ) ;
4060: LD_EXP 1
4064: PPUSH
4065: CALL_OW 122
// end ;
4069: LD_VAR 0 1
4073: RET
// every 0 0$1 trigger FilterUnitsExceptArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do var i , cargoType ;
4074: LD_INT 3
4076: PPUSH
4077: LD_INT 22
4079: PUSH
4080: LD_INT 1
4082: PUSH
4083: EMPTY
4084: LIST
4085: LIST
4086: PUSH
4087: LD_INT 21
4089: PUSH
4090: LD_INT 1
4092: PUSH
4093: EMPTY
4094: LIST
4095: LIST
4096: PUSH
4097: EMPTY
4098: LIST
4099: LIST
4100: PPUSH
4101: CALL_OW 71
4105: PUSH
4106: LD_INT 0
4108: EQUAL
4109: IFFALSE 4427
4111: GO 4113
4113: DISABLE
4114: LD_INT 0
4116: PPUSH
4117: PPUSH
// begin SaveDeltaCharacters ;
4118: CALL 4802 0 0
// if FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) then
4122: LD_INT 3
4124: PPUSH
4125: LD_INT 21
4127: PUSH
4128: LD_INT 2
4130: PUSH
4131: EMPTY
4132: LIST
4133: LIST
4134: PUSH
4135: LD_INT 3
4137: PUSH
4138: LD_INT 58
4140: PUSH
4141: EMPTY
4142: LIST
4143: PUSH
4144: EMPTY
4145: LIST
4146: LIST
4147: PUSH
4148: EMPTY
4149: LIST
4150: LIST
4151: PPUSH
4152: CALL_OW 70
4156: IFFALSE 4413
// begin for i in FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) do
4158: LD_ADDR_VAR 0 1
4162: PUSH
4163: LD_INT 3
4165: PPUSH
4166: LD_INT 21
4168: PUSH
4169: LD_INT 2
4171: PUSH
4172: EMPTY
4173: LIST
4174: LIST
4175: PUSH
4176: LD_INT 3
4178: PUSH
4179: LD_INT 58
4181: PUSH
4182: EMPTY
4183: LIST
4184: PUSH
4185: EMPTY
4186: LIST
4187: LIST
4188: PUSH
4189: EMPTY
4190: LIST
4191: LIST
4192: PPUSH
4193: CALL_OW 70
4197: PUSH
4198: FOR_IN
4199: IFFALSE 4411
// begin cargoType := GetCargoType ( i ) ;
4201: LD_ADDR_VAR 0 2
4205: PUSH
4206: LD_VAR 0 1
4210: PPUSH
4211: CALL_OW 288
4215: ST_TO_ADDR
// if GetWeapon ( i ) = us_cargo_bay then
4216: LD_VAR 0 1
4220: PPUSH
4221: CALL_OW 264
4225: PUSH
4226: LD_INT 12
4228: EQUAL
4229: IFFALSE 4326
// yourVehicles := yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , cargoType , GetCargo ( i , cargoType ) ] ] else
4231: LD_ADDR_EXP 15
4235: PUSH
4236: LD_EXP 15
4240: PUSH
4241: LD_VAR 0 1
4245: PPUSH
4246: CALL_OW 248
4250: PUSH
4251: LD_VAR 0 1
4255: PPUSH
4256: CALL_OW 265
4260: PUSH
4261: LD_VAR 0 1
4265: PPUSH
4266: CALL_OW 262
4270: PUSH
4271: LD_VAR 0 1
4275: PPUSH
4276: CALL_OW 263
4280: PUSH
4281: LD_VAR 0 1
4285: PPUSH
4286: CALL_OW 264
4290: PUSH
4291: LD_VAR 0 2
4295: PUSH
4296: LD_VAR 0 1
4300: PPUSH
4301: LD_VAR 0 2
4305: PPUSH
4306: CALL_OW 289
4310: PUSH
4311: EMPTY
4312: LIST
4313: LIST
4314: LIST
4315: LIST
4316: LIST
4317: LIST
4318: LIST
4319: PUSH
4320: EMPTY
4321: LIST
4322: ADD
4323: ST_TO_ADDR
4324: GO 4397
// yourVehicles := yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ] ;
4326: LD_ADDR_EXP 15
4330: PUSH
4331: LD_EXP 15
4335: PUSH
4336: LD_VAR 0 1
4340: PPUSH
4341: CALL_OW 248
4345: PUSH
4346: LD_VAR 0 1
4350: PPUSH
4351: CALL_OW 265
4355: PUSH
4356: LD_VAR 0 1
4360: PPUSH
4361: CALL_OW 262
4365: PUSH
4366: LD_VAR 0 1
4370: PPUSH
4371: CALL_OW 263
4375: PUSH
4376: LD_VAR 0 1
4380: PPUSH
4381: CALL_OW 264
4385: PUSH
4386: EMPTY
4387: LIST
4388: LIST
4389: LIST
4390: LIST
4391: LIST
4392: PUSH
4393: EMPTY
4394: LIST
4395: ADD
4396: ST_TO_ADDR
// SaveVariable ( yourVehicles , 06_VehiclesIn06_1 ) ;
4397: LD_EXP 15
4401: PPUSH
4402: LD_STRING 06_VehiclesIn06_1
4404: PPUSH
4405: CALL_OW 39
// end ;
4409: GO 4198
4411: POP
4412: POP
// end ; SaveCargos ;
4413: CALL 5582 0 0
// ChangeMap ( 6 , %_cont ) ;
4417: LD_INT 6
4419: PPUSH
4420: LD_STRING %_cont
4422: PPUSH
4423: CALL_OW 340
// end ; end_of_file
4427: PPOPN 2
4429: END
// export function SelectDeltaCharacters ; var i , yourPeople ; begin
4430: LD_INT 0
4432: PPUSH
4433: PPUSH
4434: PPUSH
// selectedPeople := [ ] ;
4435: LD_ADDR_EXP 18
4439: PUSH
4440: EMPTY
4441: ST_TO_ADDR
// yourPeople := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , DeltaDoctor , Denis ] ;
4442: LD_ADDR_VAR 0 3
4446: PUSH
4447: LD_INT 22
4449: PUSH
4450: LD_INT 1
4452: PUSH
4453: EMPTY
4454: LIST
4455: LIST
4456: PUSH
4457: LD_INT 21
4459: PUSH
4460: LD_INT 1
4462: PUSH
4463: EMPTY
4464: LIST
4465: LIST
4466: PUSH
4467: LD_INT 2
4469: PUSH
4470: LD_INT 25
4472: PUSH
4473: LD_INT 1
4475: PUSH
4476: EMPTY
4477: LIST
4478: LIST
4479: PUSH
4480: LD_INT 25
4482: PUSH
4483: LD_INT 2
4485: PUSH
4486: EMPTY
4487: LIST
4488: LIST
4489: PUSH
4490: LD_INT 25
4492: PUSH
4493: LD_INT 3
4495: PUSH
4496: EMPTY
4497: LIST
4498: LIST
4499: PUSH
4500: LD_INT 25
4502: PUSH
4503: LD_INT 4
4505: PUSH
4506: EMPTY
4507: LIST
4508: LIST
4509: PUSH
4510: EMPTY
4511: LIST
4512: LIST
4513: LIST
4514: LIST
4515: LIST
4516: PUSH
4517: EMPTY
4518: LIST
4519: LIST
4520: LIST
4521: PPUSH
4522: CALL_OW 69
4526: PUSH
4527: LD_EXP 1
4531: PUSH
4532: LD_EXP 16
4536: PUSH
4537: LD_EXP 3
4541: PUSH
4542: EMPTY
4543: LIST
4544: LIST
4545: LIST
4546: DIFF
4547: ST_TO_ADDR
// selectedPeople := CharacterSelection ( text , 5 , 5 , [ sel_change_class , JMM , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ yourPeople ^ [ sel_dont_change_class , sel_not_changeable , Denis , DeltaDoctor ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
4548: LD_ADDR_EXP 18
4552: PUSH
4553: LD_STRING text
4555: PPUSH
4556: LD_INT 5
4558: PPUSH
4559: LD_INT 5
4561: PPUSH
4562: LD_INT -5
4564: PUSH
4565: LD_EXP 1
4569: PUSH
4570: LD_INT -6
4572: PUSH
4573: LD_INT -2
4575: PUSH
4576: LD_INT -3
4578: PUSH
4579: LD_INT -5
4581: PUSH
4582: EMPTY
4583: LIST
4584: LIST
4585: LIST
4586: LIST
4587: LIST
4588: LIST
4589: PUSH
4590: LD_VAR 0 3
4594: ADD
4595: PUSH
4596: LD_INT -6
4598: PUSH
4599: LD_INT -4
4601: PUSH
4602: LD_EXP 3
4606: PUSH
4607: LD_EXP 16
4611: PUSH
4612: EMPTY
4613: LIST
4614: LIST
4615: LIST
4616: LIST
4617: ADD
4618: PPUSH
4619: LD_INT 1
4621: PUSH
4622: LD_INT 3
4624: PUSH
4625: LD_INT 2
4627: PUSH
4628: LD_INT 1
4630: PUSH
4631: EMPTY
4632: LIST
4633: LIST
4634: PUSH
4635: LD_INT 4
4637: PUSH
4638: EMPTY
4639: LIST
4640: LIST
4641: LIST
4642: LIST
4643: PPUSH
4644: CALL_OW 42
4648: ST_TO_ADDR
// ComStop ( selectedPeople ) ;
4649: LD_EXP 18
4653: PPUSH
4654: CALL_OW 141
// SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 4 ) ;
4658: LD_INT 22
4660: PUSH
4661: LD_INT 1
4663: PUSH
4664: EMPTY
4665: LIST
4666: LIST
4667: PUSH
4668: LD_INT 21
4670: PUSH
4671: LD_INT 1
4673: PUSH
4674: EMPTY
4675: LIST
4676: LIST
4677: PUSH
4678: EMPTY
4679: LIST
4680: LIST
4681: PPUSH
4682: CALL_OW 69
4686: PPUSH
4687: LD_INT 4
4689: PPUSH
4690: CALL_OW 235
// for i in selectedPeople do
4694: LD_ADDR_VAR 0 2
4698: PUSH
4699: LD_EXP 18
4703: PUSH
4704: FOR_IN
4705: IFFALSE 4721
// SetSide ( i , 1 ) ;
4707: LD_VAR 0 2
4711: PPUSH
4712: LD_INT 1
4714: PPUSH
4715: CALL_OW 235
4719: GO 4704
4721: POP
4722: POP
// for i in yourApemans do
4723: LD_ADDR_VAR 0 2
4727: PUSH
4728: LD_EXP 14
4732: PUSH
4733: FOR_IN
4734: IFFALSE 4750
// SetSide ( i , 1 ) ;
4736: LD_VAR 0 2
4740: PPUSH
4741: LD_INT 1
4743: PPUSH
4744: CALL_OW 235
4748: GO 4733
4750: POP
4751: POP
// if Mike then
4752: LD_EXP 10
4756: IFFALSE 4770
// SetSide ( Mike , 1 ) ;
4758: LD_EXP 10
4762: PPUSH
4763: LD_INT 1
4765: PPUSH
4766: CALL_OW 235
// SetSide ( JMM , 1 ) ;
4770: LD_EXP 1
4774: PPUSH
4775: LD_INT 1
4777: PPUSH
4778: CALL_OW 235
// SetSkill ( yourApemans , 2 , 3 ) ;
4782: LD_EXP 14
4786: PPUSH
4787: LD_INT 2
4789: PPUSH
4790: LD_INT 3
4792: PPUSH
4793: CALL_OW 237
// end ;
4797: LD_VAR 0 1
4801: RET
// export function SaveDeltaCharacters ; begin
4802: LD_INT 0
4804: PPUSH
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
4805: LD_EXP 1
4809: PPUSH
4810: LD_EXP 23
4814: PUSH
4815: LD_STRING JMM
4817: STR
4818: PPUSH
4819: CALL_OW 38
// SaveCharacters ( DeltaDoctor , DeltaDoctor ) ;
4823: LD_EXP 16
4827: PPUSH
4828: LD_STRING DeltaDoctor
4830: PPUSH
4831: CALL_OW 38
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
4835: LD_EXP 3
4839: PPUSH
4840: LD_EXP 23
4844: PUSH
4845: LD_STRING Denis
4847: STR
4848: PPUSH
4849: CALL_OW 38
// if Lisa in selectedPeople then
4853: LD_EXP 4
4857: PUSH
4858: LD_EXP 18
4862: IN
4863: IFFALSE 4895
// begin SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
4865: LD_EXP 4
4869: PPUSH
4870: LD_EXP 23
4874: PUSH
4875: LD_STRING Lisa
4877: STR
4878: PPUSH
4879: CALL_OW 38
// SaveVariable ( 1 , LisaIn06 ) ;
4883: LD_INT 1
4885: PPUSH
4886: LD_STRING LisaIn06
4888: PPUSH
4889: CALL_OW 39
// end else
4893: GO 4916
// if IsOk ( Lisa ) then
4895: LD_EXP 4
4899: PPUSH
4900: CALL_OW 302
4904: IFFALSE 4916
// SaveVariable ( 1 , LisaStayInDelta ) ;
4906: LD_INT 1
4908: PPUSH
4909: LD_STRING LisaStayInDelta
4911: PPUSH
4912: CALL_OW 39
// if Bobby in selectedPeople then
4916: LD_EXP 6
4920: PUSH
4921: LD_EXP 18
4925: IN
4926: IFFALSE 4958
// begin SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
4928: LD_EXP 6
4932: PPUSH
4933: LD_EXP 23
4937: PUSH
4938: LD_STRING Bobby
4940: STR
4941: PPUSH
4942: CALL_OW 38
// SaveVariable ( 1 , BobbyIn06 ) ;
4946: LD_INT 1
4948: PPUSH
4949: LD_STRING BobbyIn06
4951: PPUSH
4952: CALL_OW 39
// end else
4956: GO 4979
// if IsOk ( Bobby ) then
4958: LD_EXP 6
4962: PPUSH
4963: CALL_OW 302
4967: IFFALSE 4979
// SaveVariable ( 1 , BobbyStayInDelta ) ;
4969: LD_INT 1
4971: PPUSH
4972: LD_STRING BobbyStayInDelta
4974: PPUSH
4975: CALL_OW 39
// if Cyrus in selectedPeople then
4979: LD_EXP 7
4983: PUSH
4984: LD_EXP 18
4988: IN
4989: IFFALSE 5021
// begin SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
4991: LD_EXP 7
4995: PPUSH
4996: LD_EXP 23
5000: PUSH
5001: LD_STRING Cyrus
5003: STR
5004: PPUSH
5005: CALL_OW 38
// SaveVariable ( 1 , CyrusIn06 ) ;
5009: LD_INT 1
5011: PPUSH
5012: LD_STRING CyrusIn06
5014: PPUSH
5015: CALL_OW 39
// end else
5019: GO 5042
// if IsOk ( Cyrus ) then
5021: LD_EXP 7
5025: PPUSH
5026: CALL_OW 302
5030: IFFALSE 5042
// SaveVariable ( 1 , CyrusStayInDelta ) ;
5032: LD_INT 1
5034: PPUSH
5035: LD_STRING CyrusStayInDelta
5037: PPUSH
5038: CALL_OW 39
// if Frank in selectedPeople then
5042: LD_EXP 5
5046: PUSH
5047: LD_EXP 18
5051: IN
5052: IFFALSE 5084
// begin SaveCharacters ( Frank , mission_prefix & Frank ) ;
5054: LD_EXP 5
5058: PPUSH
5059: LD_EXP 23
5063: PUSH
5064: LD_STRING Frank
5066: STR
5067: PPUSH
5068: CALL_OW 38
// SaveVariable ( 1 , FrankIn06 ) ;
5072: LD_INT 1
5074: PPUSH
5075: LD_STRING FrankIn06
5077: PPUSH
5078: CALL_OW 39
// end else
5082: GO 5105
// if IsOk ( Frank ) then
5084: LD_EXP 5
5088: PPUSH
5089: CALL_OW 302
5093: IFFALSE 5105
// SaveVariable ( 1 , FrankStayInDelta ) ;
5095: LD_INT 1
5097: PPUSH
5098: LD_STRING FrankStayInDelta
5100: PPUSH
5101: CALL_OW 39
// if Brown in selectedPeople then
5105: LD_EXP 8
5109: PUSH
5110: LD_EXP 18
5114: IN
5115: IFFALSE 5147
// begin SaveCharacters ( Brown , mission_prefix & Brown ) ;
5117: LD_EXP 8
5121: PPUSH
5122: LD_EXP 23
5126: PUSH
5127: LD_STRING Brown
5129: STR
5130: PPUSH
5131: CALL_OW 38
// SaveVariable ( 1 , BrownIn06 ) ;
5135: LD_INT 1
5137: PPUSH
5138: LD_STRING BrownIn06
5140: PPUSH
5141: CALL_OW 39
// end else
5145: GO 5168
// if IsOk ( Brown ) then
5147: LD_EXP 8
5151: PPUSH
5152: CALL_OW 302
5156: IFFALSE 5168
// SaveVariable ( 1 , BrownStayInDelta ) ;
5158: LD_INT 1
5160: PPUSH
5161: LD_STRING BrownStayInDelta
5163: PPUSH
5164: CALL_OW 39
// if Donaldson in selectedPeople then
5168: LD_EXP 9
5172: PUSH
5173: LD_EXP 18
5177: IN
5178: IFFALSE 5210
// begin SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
5180: LD_EXP 9
5184: PPUSH
5185: LD_EXP 23
5189: PUSH
5190: LD_STRING Donaldson
5192: STR
5193: PPUSH
5194: CALL_OW 38
// SaveVariable ( 1 , DonaldsonIn06 ) ;
5198: LD_INT 1
5200: PPUSH
5201: LD_STRING DonaldsonIn06
5203: PPUSH
5204: CALL_OW 39
// end else
5208: GO 5231
// if IsOk ( Donaldson ) then
5210: LD_EXP 9
5214: PPUSH
5215: CALL_OW 302
5219: IFFALSE 5231
// SaveVariable ( 1 , DonaldsonStayInDelta ) ;
5221: LD_INT 1
5223: PPUSH
5224: LD_STRING DonaldsonStayInDelta
5226: PPUSH
5227: CALL_OW 39
// if Gladstone in selectedPeople then
5231: LD_EXP 2
5235: PUSH
5236: LD_EXP 18
5240: IN
5241: IFFALSE 5273
// begin SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
5243: LD_EXP 2
5247: PPUSH
5248: LD_EXP 23
5252: PUSH
5253: LD_STRING Gladstone
5255: STR
5256: PPUSH
5257: CALL_OW 38
// SaveVariable ( 1 , GladstoneIn06 ) ;
5261: LD_INT 1
5263: PPUSH
5264: LD_STRING GladstoneIn06
5266: PPUSH
5267: CALL_OW 39
// end else
5271: GO 5294
// if IsOk ( Gladstone ) then
5273: LD_EXP 2
5277: PPUSH
5278: CALL_OW 302
5282: IFFALSE 5294
// SaveVariable ( 1 , GladstoneStayInDelta ) ;
5284: LD_INT 1
5286: PPUSH
5287: LD_STRING GladstoneStayInDelta
5289: PPUSH
5290: CALL_OW 39
// if Mike then
5294: LD_EXP 10
5298: IFFALSE 5318
// SaveCharacters ( Mike , mission_prefix & Mike ) ;
5300: LD_EXP 10
5304: PPUSH
5305: LD_EXP 23
5309: PUSH
5310: LD_STRING Mike
5312: STR
5313: PPUSH
5314: CALL_OW 38
// selectedPeople := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ;
5318: LD_ADDR_EXP 18
5322: PUSH
5323: LD_INT 22
5325: PUSH
5326: LD_INT 1
5328: PUSH
5329: EMPTY
5330: LIST
5331: LIST
5332: PUSH
5333: LD_INT 23
5335: PUSH
5336: LD_INT 1
5338: PUSH
5339: EMPTY
5340: LIST
5341: LIST
5342: PUSH
5343: LD_INT 21
5345: PUSH
5346: LD_INT 1
5348: PUSH
5349: EMPTY
5350: LIST
5351: LIST
5352: PUSH
5353: EMPTY
5354: LIST
5355: LIST
5356: LIST
5357: PPUSH
5358: CALL_OW 69
5362: ST_TO_ADDR
// SaveCharacters ( yourApemans , ApeIn06 ) ;
5363: LD_EXP 14
5367: PPUSH
5368: LD_STRING ApeIn06
5370: PPUSH
5371: CALL_OW 38
// SaveCharacters ( selectedPeople diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis ] , OthersIn06 ) ;
5375: LD_EXP 18
5379: PUSH
5380: LD_EXP 1
5384: PUSH
5385: LD_EXP 4
5389: PUSH
5390: LD_EXP 6
5394: PUSH
5395: LD_EXP 7
5399: PUSH
5400: LD_EXP 5
5404: PUSH
5405: LD_EXP 8
5409: PUSH
5410: LD_EXP 9
5414: PUSH
5415: LD_EXP 2
5419: PUSH
5420: LD_EXP 3
5424: PUSH
5425: EMPTY
5426: LIST
5427: LIST
5428: LIST
5429: LIST
5430: LIST
5431: LIST
5432: LIST
5433: LIST
5434: LIST
5435: DIFF
5436: PPUSH
5437: LD_STRING OthersIn06
5439: PPUSH
5440: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ DeltaDoctor , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis ] , OthersStayInDelta ) ;
5444: LD_INT 22
5446: PUSH
5447: LD_INT 4
5449: PUSH
5450: EMPTY
5451: LIST
5452: LIST
5453: PUSH
5454: LD_INT 2
5456: PUSH
5457: LD_INT 25
5459: PUSH
5460: LD_INT 1
5462: PUSH
5463: EMPTY
5464: LIST
5465: LIST
5466: PUSH
5467: LD_INT 25
5469: PUSH
5470: LD_INT 2
5472: PUSH
5473: EMPTY
5474: LIST
5475: LIST
5476: PUSH
5477: LD_INT 25
5479: PUSH
5480: LD_INT 3
5482: PUSH
5483: EMPTY
5484: LIST
5485: LIST
5486: PUSH
5487: LD_INT 25
5489: PUSH
5490: LD_INT 4
5492: PUSH
5493: EMPTY
5494: LIST
5495: LIST
5496: PUSH
5497: EMPTY
5498: LIST
5499: LIST
5500: LIST
5501: LIST
5502: LIST
5503: PUSH
5504: EMPTY
5505: LIST
5506: LIST
5507: PPUSH
5508: CALL_OW 69
5512: PUSH
5513: LD_EXP 16
5517: PUSH
5518: LD_EXP 4
5522: PUSH
5523: LD_EXP 6
5527: PUSH
5528: LD_EXP 7
5532: PUSH
5533: LD_EXP 5
5537: PUSH
5538: LD_EXP 8
5542: PUSH
5543: LD_EXP 9
5547: PUSH
5548: LD_EXP 2
5552: PUSH
5553: LD_EXP 3
5557: PUSH
5558: EMPTY
5559: LIST
5560: LIST
5561: LIST
5562: LIST
5563: LIST
5564: LIST
5565: LIST
5566: LIST
5567: LIST
5568: DIFF
5569: PPUSH
5570: LD_STRING OthersStayInDelta
5572: PPUSH
5573: CALL_OW 38
// end ;
5577: LD_VAR 0 1
5581: RET
// export function SaveCargos ; var i ; begin
5582: LD_INT 0
5584: PPUSH
5585: PPUSH
// for i in FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) do
5586: LD_ADDR_VAR 0 2
5590: PUSH
5591: LD_INT 3
5593: PPUSH
5594: LD_INT 22
5596: PUSH
5597: LD_INT 1
5599: PUSH
5600: EMPTY
5601: LIST
5602: LIST
5603: PUSH
5604: LD_INT 34
5606: PUSH
5607: LD_INT 12
5609: PUSH
5610: EMPTY
5611: LIST
5612: LIST
5613: PUSH
5614: EMPTY
5615: LIST
5616: LIST
5617: PPUSH
5618: CALL_OW 70
5622: PUSH
5623: FOR_IN
5624: IFFALSE 5652
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
5626: LD_ADDR_EXP 22
5630: PUSH
5631: LD_EXP 22
5635: PUSH
5636: LD_VAR 0 2
5640: PPUSH
5641: CALL 66980 0 1
5645: PUSH
5646: EMPTY
5647: LIST
5648: ADD
5649: ST_TO_ADDR
5650: GO 5623
5652: POP
5653: POP
// SaveVariable ( resources , 06_ResourcesInCargo06_1 ) ;
5654: LD_EXP 22
5658: PPUSH
5659: LD_STRING 06_ResourcesInCargo06_1
5661: PPUSH
5662: CALL_OW 39
// end ; end_of_file
5666: LD_VAR 0 1
5670: RET
// on Command ( comandid ) do var i ;
5671: LD_INT 0
5673: PPUSH
// begin if comandid = 65 then
5674: LD_VAR 0 1
5678: PUSH
5679: LD_INT 65
5681: EQUAL
5682: IFFALSE 5723
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
5684: LD_ADDR_VAR 0 2
5688: PUSH
5689: LD_INT 22
5691: PUSH
5692: LD_INT 1
5694: PUSH
5695: EMPTY
5696: LIST
5697: LIST
5698: PUSH
5699: EMPTY
5700: LIST
5701: PPUSH
5702: CALL_OW 69
5706: PUSH
5707: FOR_IN
5708: IFFALSE 5721
// ComStop ( i ) ;
5710: LD_VAR 0 2
5714: PPUSH
5715: CALL_OW 141
5719: GO 5707
5721: POP
5722: POP
// end ;
5723: PPOPN 2
5725: END
// on ApemanTamed ( apeman , human ) do var tmp ;
5726: LD_INT 0
5728: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
5729: LD_ADDR_VAR 0 3
5733: PUSH
5734: LD_INT 22
5736: PUSH
5737: LD_INT 1
5739: PUSH
5740: EMPTY
5741: LIST
5742: LIST
5743: PUSH
5744: LD_INT 21
5746: PUSH
5747: LD_INT 3
5749: PUSH
5750: EMPTY
5751: LIST
5752: LIST
5753: PUSH
5754: LD_INT 30
5756: PUSH
5757: LD_INT 0
5759: PUSH
5760: EMPTY
5761: LIST
5762: LIST
5763: PUSH
5764: EMPTY
5765: LIST
5766: LIST
5767: LIST
5768: PPUSH
5769: CALL_OW 69
5773: ST_TO_ADDR
// if not tmp then
5774: LD_VAR 0 3
5778: NOT
5779: IFFALSE 5783
// exit ;
5781: GO 5813
// ComEnterUnit ( apeman , tmp [ 1 ] ) ;
5783: LD_VAR 0 1
5787: PPUSH
5788: LD_VAR 0 3
5792: PUSH
5793: LD_INT 1
5795: ARRAY
5796: PPUSH
5797: CALL_OW 120
// SetSide ( apeman , 4 ) ;
5801: LD_VAR 0 1
5805: PPUSH
5806: LD_INT 4
5808: PPUSH
5809: CALL_OW 235
// end ;
5813: PPOPN 3
5815: END
// on UnitDestroyed ( un ) do begin if un = JMM then
5816: LD_VAR 0 1
5820: PUSH
5821: LD_EXP 1
5825: EQUAL
5826: IFFALSE 5835
// YouLost ( JMM ) ;
5828: LD_STRING JMM
5830: PPUSH
5831: CALL_OW 104
// SOS_UnitDestroyed ( un ) ;
5835: LD_VAR 0 1
5839: PPUSH
5840: CALL 21658 0 1
// end ;
5844: PPOPN 1
5846: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
5847: LD_VAR 0 1
5851: PPUSH
5852: LD_VAR 0 2
5856: PPUSH
5857: CALL 21778 0 2
// end ; end_of_file
5861: PPOPN 2
5863: END
// export globalGameSaveCounter ; every 0 0$1 do
5864: GO 5866
5866: DISABLE
// begin enable ;
5867: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
5868: LD_STRING updateTimer(
5870: PUSH
5871: LD_OWVAR 1
5875: STR
5876: PUSH
5877: LD_STRING );
5879: STR
5880: PPUSH
5881: CALL_OW 559
// end ;
5885: END
// every 0 0$1 do
5886: GO 5888
5888: DISABLE
// begin globalGameSaveCounter := 0 ;
5889: LD_ADDR_EXP 25
5893: PUSH
5894: LD_INT 0
5896: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
5897: LD_STRING setGameSaveCounter(0)
5899: PPUSH
5900: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
5904: LD_STRING initStreamRollete();
5906: PPUSH
5907: CALL_OW 559
// InitStreamMode ;
5911: CALL 7237 0 0
// DefineStreamItems ( false ) ;
5915: LD_INT 0
5917: PPUSH
5918: CALL 7701 0 1
// end ;
5922: END
// export function SOS_MapStart ( ) ; begin
5923: LD_INT 0
5925: PPUSH
// if streamModeActive then
5926: LD_EXP 26
5930: IFFALSE 5939
// DefineStreamItems ( true ) ;
5932: LD_INT 1
5934: PPUSH
5935: CALL 7701 0 1
// UpdateLuaVariables ( ) ;
5939: CALL 5956 0 0
// UpdateFactoryWaypoints ( ) ;
5943: CALL 20562 0 0
// UpdateWarehouseGatheringPoints ( ) ;
5947: CALL 20819 0 0
// end ;
5951: LD_VAR 0 1
5955: RET
// function UpdateLuaVariables ( ) ; begin
5956: LD_INT 0
5958: PPUSH
// if globalGameSaveCounter then
5959: LD_EXP 25
5963: IFFALSE 5997
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
5965: LD_ADDR_EXP 25
5969: PUSH
5970: LD_EXP 25
5974: PPUSH
5975: CALL 64776 0 1
5979: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
5980: LD_STRING setGameSaveCounter(
5982: PUSH
5983: LD_EXP 25
5987: STR
5988: PUSH
5989: LD_STRING )
5991: STR
5992: PPUSH
5993: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
5997: LD_STRING setGameDifficulty(
5999: PUSH
6000: LD_OWVAR 67
6004: STR
6005: PUSH
6006: LD_STRING )
6008: STR
6009: PPUSH
6010: CALL_OW 559
// end ;
6014: LD_VAR 0 1
6018: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
6019: LD_INT 0
6021: PPUSH
// if p2 = stream_mode then
6022: LD_VAR 0 2
6026: PUSH
6027: LD_INT 100
6029: EQUAL
6030: IFFALSE 7033
// begin if not StreamModeActive then
6032: LD_EXP 26
6036: NOT
6037: IFFALSE 6047
// StreamModeActive := true ;
6039: LD_ADDR_EXP 26
6043: PUSH
6044: LD_INT 1
6046: ST_TO_ADDR
// if p3 = 0 then
6047: LD_VAR 0 3
6051: PUSH
6052: LD_INT 0
6054: EQUAL
6055: IFFALSE 6061
// InitStreamMode ;
6057: CALL 7237 0 0
// if p3 = 1 then
6061: LD_VAR 0 3
6065: PUSH
6066: LD_INT 1
6068: EQUAL
6069: IFFALSE 6079
// sRocket := true ;
6071: LD_ADDR_EXP 31
6075: PUSH
6076: LD_INT 1
6078: ST_TO_ADDR
// if p3 = 2 then
6079: LD_VAR 0 3
6083: PUSH
6084: LD_INT 2
6086: EQUAL
6087: IFFALSE 6097
// sSpeed := true ;
6089: LD_ADDR_EXP 30
6093: PUSH
6094: LD_INT 1
6096: ST_TO_ADDR
// if p3 = 3 then
6097: LD_VAR 0 3
6101: PUSH
6102: LD_INT 3
6104: EQUAL
6105: IFFALSE 6115
// sEngine := true ;
6107: LD_ADDR_EXP 32
6111: PUSH
6112: LD_INT 1
6114: ST_TO_ADDR
// if p3 = 4 then
6115: LD_VAR 0 3
6119: PUSH
6120: LD_INT 4
6122: EQUAL
6123: IFFALSE 6133
// sSpec := true ;
6125: LD_ADDR_EXP 29
6129: PUSH
6130: LD_INT 1
6132: ST_TO_ADDR
// if p3 = 5 then
6133: LD_VAR 0 3
6137: PUSH
6138: LD_INT 5
6140: EQUAL
6141: IFFALSE 6151
// sLevel := true ;
6143: LD_ADDR_EXP 33
6147: PUSH
6148: LD_INT 1
6150: ST_TO_ADDR
// if p3 = 6 then
6151: LD_VAR 0 3
6155: PUSH
6156: LD_INT 6
6158: EQUAL
6159: IFFALSE 6169
// sArmoury := true ;
6161: LD_ADDR_EXP 34
6165: PUSH
6166: LD_INT 1
6168: ST_TO_ADDR
// if p3 = 7 then
6169: LD_VAR 0 3
6173: PUSH
6174: LD_INT 7
6176: EQUAL
6177: IFFALSE 6187
// sRadar := true ;
6179: LD_ADDR_EXP 35
6183: PUSH
6184: LD_INT 1
6186: ST_TO_ADDR
// if p3 = 8 then
6187: LD_VAR 0 3
6191: PUSH
6192: LD_INT 8
6194: EQUAL
6195: IFFALSE 6205
// sBunker := true ;
6197: LD_ADDR_EXP 36
6201: PUSH
6202: LD_INT 1
6204: ST_TO_ADDR
// if p3 = 9 then
6205: LD_VAR 0 3
6209: PUSH
6210: LD_INT 9
6212: EQUAL
6213: IFFALSE 6223
// sHack := true ;
6215: LD_ADDR_EXP 37
6219: PUSH
6220: LD_INT 1
6222: ST_TO_ADDR
// if p3 = 10 then
6223: LD_VAR 0 3
6227: PUSH
6228: LD_INT 10
6230: EQUAL
6231: IFFALSE 6241
// sFire := true ;
6233: LD_ADDR_EXP 38
6237: PUSH
6238: LD_INT 1
6240: ST_TO_ADDR
// if p3 = 11 then
6241: LD_VAR 0 3
6245: PUSH
6246: LD_INT 11
6248: EQUAL
6249: IFFALSE 6259
// sRefresh := true ;
6251: LD_ADDR_EXP 39
6255: PUSH
6256: LD_INT 1
6258: ST_TO_ADDR
// if p3 = 12 then
6259: LD_VAR 0 3
6263: PUSH
6264: LD_INT 12
6266: EQUAL
6267: IFFALSE 6277
// sExp := true ;
6269: LD_ADDR_EXP 40
6273: PUSH
6274: LD_INT 1
6276: ST_TO_ADDR
// if p3 = 13 then
6277: LD_VAR 0 3
6281: PUSH
6282: LD_INT 13
6284: EQUAL
6285: IFFALSE 6295
// sDepot := true ;
6287: LD_ADDR_EXP 41
6291: PUSH
6292: LD_INT 1
6294: ST_TO_ADDR
// if p3 = 14 then
6295: LD_VAR 0 3
6299: PUSH
6300: LD_INT 14
6302: EQUAL
6303: IFFALSE 6313
// sFlag := true ;
6305: LD_ADDR_EXP 42
6309: PUSH
6310: LD_INT 1
6312: ST_TO_ADDR
// if p3 = 15 then
6313: LD_VAR 0 3
6317: PUSH
6318: LD_INT 15
6320: EQUAL
6321: IFFALSE 6331
// sKamikadze := true ;
6323: LD_ADDR_EXP 50
6327: PUSH
6328: LD_INT 1
6330: ST_TO_ADDR
// if p3 = 16 then
6331: LD_VAR 0 3
6335: PUSH
6336: LD_INT 16
6338: EQUAL
6339: IFFALSE 6349
// sTroll := true ;
6341: LD_ADDR_EXP 51
6345: PUSH
6346: LD_INT 1
6348: ST_TO_ADDR
// if p3 = 17 then
6349: LD_VAR 0 3
6353: PUSH
6354: LD_INT 17
6356: EQUAL
6357: IFFALSE 6367
// sSlow := true ;
6359: LD_ADDR_EXP 52
6363: PUSH
6364: LD_INT 1
6366: ST_TO_ADDR
// if p3 = 18 then
6367: LD_VAR 0 3
6371: PUSH
6372: LD_INT 18
6374: EQUAL
6375: IFFALSE 6385
// sLack := true ;
6377: LD_ADDR_EXP 53
6381: PUSH
6382: LD_INT 1
6384: ST_TO_ADDR
// if p3 = 19 then
6385: LD_VAR 0 3
6389: PUSH
6390: LD_INT 19
6392: EQUAL
6393: IFFALSE 6403
// sTank := true ;
6395: LD_ADDR_EXP 55
6399: PUSH
6400: LD_INT 1
6402: ST_TO_ADDR
// if p3 = 20 then
6403: LD_VAR 0 3
6407: PUSH
6408: LD_INT 20
6410: EQUAL
6411: IFFALSE 6421
// sRemote := true ;
6413: LD_ADDR_EXP 56
6417: PUSH
6418: LD_INT 1
6420: ST_TO_ADDR
// if p3 = 21 then
6421: LD_VAR 0 3
6425: PUSH
6426: LD_INT 21
6428: EQUAL
6429: IFFALSE 6439
// sPowell := true ;
6431: LD_ADDR_EXP 57
6435: PUSH
6436: LD_INT 1
6438: ST_TO_ADDR
// if p3 = 22 then
6439: LD_VAR 0 3
6443: PUSH
6444: LD_INT 22
6446: EQUAL
6447: IFFALSE 6457
// sTeleport := true ;
6449: LD_ADDR_EXP 60
6453: PUSH
6454: LD_INT 1
6456: ST_TO_ADDR
// if p3 = 23 then
6457: LD_VAR 0 3
6461: PUSH
6462: LD_INT 23
6464: EQUAL
6465: IFFALSE 6475
// sOilTower := true ;
6467: LD_ADDR_EXP 62
6471: PUSH
6472: LD_INT 1
6474: ST_TO_ADDR
// if p3 = 24 then
6475: LD_VAR 0 3
6479: PUSH
6480: LD_INT 24
6482: EQUAL
6483: IFFALSE 6493
// sShovel := true ;
6485: LD_ADDR_EXP 63
6489: PUSH
6490: LD_INT 1
6492: ST_TO_ADDR
// if p3 = 25 then
6493: LD_VAR 0 3
6497: PUSH
6498: LD_INT 25
6500: EQUAL
6501: IFFALSE 6511
// sSheik := true ;
6503: LD_ADDR_EXP 64
6507: PUSH
6508: LD_INT 1
6510: ST_TO_ADDR
// if p3 = 26 then
6511: LD_VAR 0 3
6515: PUSH
6516: LD_INT 26
6518: EQUAL
6519: IFFALSE 6529
// sEarthquake := true ;
6521: LD_ADDR_EXP 66
6525: PUSH
6526: LD_INT 1
6528: ST_TO_ADDR
// if p3 = 27 then
6529: LD_VAR 0 3
6533: PUSH
6534: LD_INT 27
6536: EQUAL
6537: IFFALSE 6547
// sAI := true ;
6539: LD_ADDR_EXP 67
6543: PUSH
6544: LD_INT 1
6546: ST_TO_ADDR
// if p3 = 28 then
6547: LD_VAR 0 3
6551: PUSH
6552: LD_INT 28
6554: EQUAL
6555: IFFALSE 6565
// sCargo := true ;
6557: LD_ADDR_EXP 70
6561: PUSH
6562: LD_INT 1
6564: ST_TO_ADDR
// if p3 = 29 then
6565: LD_VAR 0 3
6569: PUSH
6570: LD_INT 29
6572: EQUAL
6573: IFFALSE 6583
// sDLaser := true ;
6575: LD_ADDR_EXP 71
6579: PUSH
6580: LD_INT 1
6582: ST_TO_ADDR
// if p3 = 30 then
6583: LD_VAR 0 3
6587: PUSH
6588: LD_INT 30
6590: EQUAL
6591: IFFALSE 6601
// sExchange := true ;
6593: LD_ADDR_EXP 72
6597: PUSH
6598: LD_INT 1
6600: ST_TO_ADDR
// if p3 = 31 then
6601: LD_VAR 0 3
6605: PUSH
6606: LD_INT 31
6608: EQUAL
6609: IFFALSE 6619
// sFac := true ;
6611: LD_ADDR_EXP 73
6615: PUSH
6616: LD_INT 1
6618: ST_TO_ADDR
// if p3 = 32 then
6619: LD_VAR 0 3
6623: PUSH
6624: LD_INT 32
6626: EQUAL
6627: IFFALSE 6637
// sPower := true ;
6629: LD_ADDR_EXP 74
6633: PUSH
6634: LD_INT 1
6636: ST_TO_ADDR
// if p3 = 33 then
6637: LD_VAR 0 3
6641: PUSH
6642: LD_INT 33
6644: EQUAL
6645: IFFALSE 6655
// sRandom := true ;
6647: LD_ADDR_EXP 75
6651: PUSH
6652: LD_INT 1
6654: ST_TO_ADDR
// if p3 = 34 then
6655: LD_VAR 0 3
6659: PUSH
6660: LD_INT 34
6662: EQUAL
6663: IFFALSE 6673
// sShield := true ;
6665: LD_ADDR_EXP 76
6669: PUSH
6670: LD_INT 1
6672: ST_TO_ADDR
// if p3 = 35 then
6673: LD_VAR 0 3
6677: PUSH
6678: LD_INT 35
6680: EQUAL
6681: IFFALSE 6691
// sTime := true ;
6683: LD_ADDR_EXP 77
6687: PUSH
6688: LD_INT 1
6690: ST_TO_ADDR
// if p3 = 36 then
6691: LD_VAR 0 3
6695: PUSH
6696: LD_INT 36
6698: EQUAL
6699: IFFALSE 6709
// sTools := true ;
6701: LD_ADDR_EXP 78
6705: PUSH
6706: LD_INT 1
6708: ST_TO_ADDR
// if p3 = 101 then
6709: LD_VAR 0 3
6713: PUSH
6714: LD_INT 101
6716: EQUAL
6717: IFFALSE 6727
// sSold := true ;
6719: LD_ADDR_EXP 43
6723: PUSH
6724: LD_INT 1
6726: ST_TO_ADDR
// if p3 = 102 then
6727: LD_VAR 0 3
6731: PUSH
6732: LD_INT 102
6734: EQUAL
6735: IFFALSE 6745
// sDiff := true ;
6737: LD_ADDR_EXP 44
6741: PUSH
6742: LD_INT 1
6744: ST_TO_ADDR
// if p3 = 103 then
6745: LD_VAR 0 3
6749: PUSH
6750: LD_INT 103
6752: EQUAL
6753: IFFALSE 6763
// sFog := true ;
6755: LD_ADDR_EXP 47
6759: PUSH
6760: LD_INT 1
6762: ST_TO_ADDR
// if p3 = 104 then
6763: LD_VAR 0 3
6767: PUSH
6768: LD_INT 104
6770: EQUAL
6771: IFFALSE 6781
// sReset := true ;
6773: LD_ADDR_EXP 48
6777: PUSH
6778: LD_INT 1
6780: ST_TO_ADDR
// if p3 = 105 then
6781: LD_VAR 0 3
6785: PUSH
6786: LD_INT 105
6788: EQUAL
6789: IFFALSE 6799
// sSun := true ;
6791: LD_ADDR_EXP 49
6795: PUSH
6796: LD_INT 1
6798: ST_TO_ADDR
// if p3 = 106 then
6799: LD_VAR 0 3
6803: PUSH
6804: LD_INT 106
6806: EQUAL
6807: IFFALSE 6817
// sTiger := true ;
6809: LD_ADDR_EXP 45
6813: PUSH
6814: LD_INT 1
6816: ST_TO_ADDR
// if p3 = 107 then
6817: LD_VAR 0 3
6821: PUSH
6822: LD_INT 107
6824: EQUAL
6825: IFFALSE 6835
// sBomb := true ;
6827: LD_ADDR_EXP 46
6831: PUSH
6832: LD_INT 1
6834: ST_TO_ADDR
// if p3 = 108 then
6835: LD_VAR 0 3
6839: PUSH
6840: LD_INT 108
6842: EQUAL
6843: IFFALSE 6853
// sWound := true ;
6845: LD_ADDR_EXP 54
6849: PUSH
6850: LD_INT 1
6852: ST_TO_ADDR
// if p3 = 109 then
6853: LD_VAR 0 3
6857: PUSH
6858: LD_INT 109
6860: EQUAL
6861: IFFALSE 6871
// sBetray := true ;
6863: LD_ADDR_EXP 58
6867: PUSH
6868: LD_INT 1
6870: ST_TO_ADDR
// if p3 = 110 then
6871: LD_VAR 0 3
6875: PUSH
6876: LD_INT 110
6878: EQUAL
6879: IFFALSE 6889
// sContamin := true ;
6881: LD_ADDR_EXP 59
6885: PUSH
6886: LD_INT 1
6888: ST_TO_ADDR
// if p3 = 111 then
6889: LD_VAR 0 3
6893: PUSH
6894: LD_INT 111
6896: EQUAL
6897: IFFALSE 6907
// sOil := true ;
6899: LD_ADDR_EXP 61
6903: PUSH
6904: LD_INT 1
6906: ST_TO_ADDR
// if p3 = 112 then
6907: LD_VAR 0 3
6911: PUSH
6912: LD_INT 112
6914: EQUAL
6915: IFFALSE 6925
// sStu := true ;
6917: LD_ADDR_EXP 65
6921: PUSH
6922: LD_INT 1
6924: ST_TO_ADDR
// if p3 = 113 then
6925: LD_VAR 0 3
6929: PUSH
6930: LD_INT 113
6932: EQUAL
6933: IFFALSE 6943
// sBazooka := true ;
6935: LD_ADDR_EXP 68
6939: PUSH
6940: LD_INT 1
6942: ST_TO_ADDR
// if p3 = 114 then
6943: LD_VAR 0 3
6947: PUSH
6948: LD_INT 114
6950: EQUAL
6951: IFFALSE 6961
// sMortar := true ;
6953: LD_ADDR_EXP 69
6957: PUSH
6958: LD_INT 1
6960: ST_TO_ADDR
// if p3 = 115 then
6961: LD_VAR 0 3
6965: PUSH
6966: LD_INT 115
6968: EQUAL
6969: IFFALSE 6979
// sRanger := true ;
6971: LD_ADDR_EXP 79
6975: PUSH
6976: LD_INT 1
6978: ST_TO_ADDR
// if p3 = 116 then
6979: LD_VAR 0 3
6983: PUSH
6984: LD_INT 116
6986: EQUAL
6987: IFFALSE 6997
// sComputer := true ;
6989: LD_ADDR_EXP 80
6993: PUSH
6994: LD_INT 1
6996: ST_TO_ADDR
// if p3 = 117 then
6997: LD_VAR 0 3
7001: PUSH
7002: LD_INT 117
7004: EQUAL
7005: IFFALSE 7015
// s30 := true ;
7007: LD_ADDR_EXP 81
7011: PUSH
7012: LD_INT 1
7014: ST_TO_ADDR
// if p3 = 118 then
7015: LD_VAR 0 3
7019: PUSH
7020: LD_INT 118
7022: EQUAL
7023: IFFALSE 7033
// s60 := true ;
7025: LD_ADDR_EXP 82
7029: PUSH
7030: LD_INT 1
7032: ST_TO_ADDR
// end ; if p2 = hack_mode then
7033: LD_VAR 0 2
7037: PUSH
7038: LD_INT 101
7040: EQUAL
7041: IFFALSE 7169
// begin case p3 of 1 :
7043: LD_VAR 0 3
7047: PUSH
7048: LD_INT 1
7050: DOUBLE
7051: EQUAL
7052: IFTRUE 7056
7054: GO 7063
7056: POP
// hHackUnlimitedResources ; 2 :
7057: CALL 19308 0 0
7061: GO 7169
7063: LD_INT 2
7065: DOUBLE
7066: EQUAL
7067: IFTRUE 7071
7069: GO 7078
7071: POP
// hHackSetLevel10 ; 3 :
7072: CALL 19441 0 0
7076: GO 7169
7078: LD_INT 3
7080: DOUBLE
7081: EQUAL
7082: IFTRUE 7086
7084: GO 7093
7086: POP
// hHackSetLevel10YourUnits ; 4 :
7087: CALL 19526 0 0
7091: GO 7169
7093: LD_INT 4
7095: DOUBLE
7096: EQUAL
7097: IFTRUE 7101
7099: GO 7108
7101: POP
// hHackInvincible ; 5 :
7102: CALL 19974 0 0
7106: GO 7169
7108: LD_INT 5
7110: DOUBLE
7111: EQUAL
7112: IFTRUE 7116
7114: GO 7123
7116: POP
// hHackInvisible ; 6 :
7117: CALL 20085 0 0
7121: GO 7169
7123: LD_INT 6
7125: DOUBLE
7126: EQUAL
7127: IFTRUE 7131
7129: GO 7138
7131: POP
// hHackChangeYourSide ; 7 :
7132: CALL 20142 0 0
7136: GO 7169
7138: LD_INT 7
7140: DOUBLE
7141: EQUAL
7142: IFTRUE 7146
7144: GO 7153
7146: POP
// hHackChangeUnitSide ; 8 :
7147: CALL 20184 0 0
7151: GO 7169
7153: LD_INT 8
7155: DOUBLE
7156: EQUAL
7157: IFTRUE 7161
7159: GO 7168
7161: POP
// hHackFog ; end ;
7162: CALL 20285 0 0
7166: GO 7169
7168: POP
// end ; if p2 = game_save_mode then
7169: LD_VAR 0 2
7173: PUSH
7174: LD_INT 102
7176: EQUAL
7177: IFFALSE 7232
// begin if p3 = 1 then
7179: LD_VAR 0 3
7183: PUSH
7184: LD_INT 1
7186: EQUAL
7187: IFFALSE 7199
// globalGameSaveCounter := p4 ;
7189: LD_ADDR_EXP 25
7193: PUSH
7194: LD_VAR 0 4
7198: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
7199: LD_VAR 0 3
7203: PUSH
7204: LD_INT 2
7206: EQUAL
7207: PUSH
7208: LD_EXP 25
7212: AND
7213: IFFALSE 7232
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
7215: LD_STRING setGameSaveCounter(
7217: PUSH
7218: LD_EXP 25
7222: STR
7223: PUSH
7224: LD_STRING )
7226: STR
7227: PPUSH
7228: CALL_OW 559
// end ; end ;
7232: LD_VAR 0 7
7236: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
7237: LD_INT 0
7239: PPUSH
// streamModeActive := false ;
7240: LD_ADDR_EXP 26
7244: PUSH
7245: LD_INT 0
7247: ST_TO_ADDR
// normalCounter := 36 ;
7248: LD_ADDR_EXP 27
7252: PUSH
7253: LD_INT 36
7255: ST_TO_ADDR
// hardcoreCounter := 18 ;
7256: LD_ADDR_EXP 28
7260: PUSH
7261: LD_INT 18
7263: ST_TO_ADDR
// sRocket := false ;
7264: LD_ADDR_EXP 31
7268: PUSH
7269: LD_INT 0
7271: ST_TO_ADDR
// sSpeed := false ;
7272: LD_ADDR_EXP 30
7276: PUSH
7277: LD_INT 0
7279: ST_TO_ADDR
// sEngine := false ;
7280: LD_ADDR_EXP 32
7284: PUSH
7285: LD_INT 0
7287: ST_TO_ADDR
// sSpec := false ;
7288: LD_ADDR_EXP 29
7292: PUSH
7293: LD_INT 0
7295: ST_TO_ADDR
// sLevel := false ;
7296: LD_ADDR_EXP 33
7300: PUSH
7301: LD_INT 0
7303: ST_TO_ADDR
// sArmoury := false ;
7304: LD_ADDR_EXP 34
7308: PUSH
7309: LD_INT 0
7311: ST_TO_ADDR
// sRadar := false ;
7312: LD_ADDR_EXP 35
7316: PUSH
7317: LD_INT 0
7319: ST_TO_ADDR
// sBunker := false ;
7320: LD_ADDR_EXP 36
7324: PUSH
7325: LD_INT 0
7327: ST_TO_ADDR
// sHack := false ;
7328: LD_ADDR_EXP 37
7332: PUSH
7333: LD_INT 0
7335: ST_TO_ADDR
// sFire := false ;
7336: LD_ADDR_EXP 38
7340: PUSH
7341: LD_INT 0
7343: ST_TO_ADDR
// sRefresh := false ;
7344: LD_ADDR_EXP 39
7348: PUSH
7349: LD_INT 0
7351: ST_TO_ADDR
// sExp := false ;
7352: LD_ADDR_EXP 40
7356: PUSH
7357: LD_INT 0
7359: ST_TO_ADDR
// sDepot := false ;
7360: LD_ADDR_EXP 41
7364: PUSH
7365: LD_INT 0
7367: ST_TO_ADDR
// sFlag := false ;
7368: LD_ADDR_EXP 42
7372: PUSH
7373: LD_INT 0
7375: ST_TO_ADDR
// sKamikadze := false ;
7376: LD_ADDR_EXP 50
7380: PUSH
7381: LD_INT 0
7383: ST_TO_ADDR
// sTroll := false ;
7384: LD_ADDR_EXP 51
7388: PUSH
7389: LD_INT 0
7391: ST_TO_ADDR
// sSlow := false ;
7392: LD_ADDR_EXP 52
7396: PUSH
7397: LD_INT 0
7399: ST_TO_ADDR
// sLack := false ;
7400: LD_ADDR_EXP 53
7404: PUSH
7405: LD_INT 0
7407: ST_TO_ADDR
// sTank := false ;
7408: LD_ADDR_EXP 55
7412: PUSH
7413: LD_INT 0
7415: ST_TO_ADDR
// sRemote := false ;
7416: LD_ADDR_EXP 56
7420: PUSH
7421: LD_INT 0
7423: ST_TO_ADDR
// sPowell := false ;
7424: LD_ADDR_EXP 57
7428: PUSH
7429: LD_INT 0
7431: ST_TO_ADDR
// sTeleport := false ;
7432: LD_ADDR_EXP 60
7436: PUSH
7437: LD_INT 0
7439: ST_TO_ADDR
// sOilTower := false ;
7440: LD_ADDR_EXP 62
7444: PUSH
7445: LD_INT 0
7447: ST_TO_ADDR
// sShovel := false ;
7448: LD_ADDR_EXP 63
7452: PUSH
7453: LD_INT 0
7455: ST_TO_ADDR
// sSheik := false ;
7456: LD_ADDR_EXP 64
7460: PUSH
7461: LD_INT 0
7463: ST_TO_ADDR
// sEarthquake := false ;
7464: LD_ADDR_EXP 66
7468: PUSH
7469: LD_INT 0
7471: ST_TO_ADDR
// sAI := false ;
7472: LD_ADDR_EXP 67
7476: PUSH
7477: LD_INT 0
7479: ST_TO_ADDR
// sCargo := false ;
7480: LD_ADDR_EXP 70
7484: PUSH
7485: LD_INT 0
7487: ST_TO_ADDR
// sDLaser := false ;
7488: LD_ADDR_EXP 71
7492: PUSH
7493: LD_INT 0
7495: ST_TO_ADDR
// sExchange := false ;
7496: LD_ADDR_EXP 72
7500: PUSH
7501: LD_INT 0
7503: ST_TO_ADDR
// sFac := false ;
7504: LD_ADDR_EXP 73
7508: PUSH
7509: LD_INT 0
7511: ST_TO_ADDR
// sPower := false ;
7512: LD_ADDR_EXP 74
7516: PUSH
7517: LD_INT 0
7519: ST_TO_ADDR
// sRandom := false ;
7520: LD_ADDR_EXP 75
7524: PUSH
7525: LD_INT 0
7527: ST_TO_ADDR
// sShield := false ;
7528: LD_ADDR_EXP 76
7532: PUSH
7533: LD_INT 0
7535: ST_TO_ADDR
// sTime := false ;
7536: LD_ADDR_EXP 77
7540: PUSH
7541: LD_INT 0
7543: ST_TO_ADDR
// sTools := false ;
7544: LD_ADDR_EXP 78
7548: PUSH
7549: LD_INT 0
7551: ST_TO_ADDR
// sSold := false ;
7552: LD_ADDR_EXP 43
7556: PUSH
7557: LD_INT 0
7559: ST_TO_ADDR
// sDiff := false ;
7560: LD_ADDR_EXP 44
7564: PUSH
7565: LD_INT 0
7567: ST_TO_ADDR
// sFog := false ;
7568: LD_ADDR_EXP 47
7572: PUSH
7573: LD_INT 0
7575: ST_TO_ADDR
// sReset := false ;
7576: LD_ADDR_EXP 48
7580: PUSH
7581: LD_INT 0
7583: ST_TO_ADDR
// sSun := false ;
7584: LD_ADDR_EXP 49
7588: PUSH
7589: LD_INT 0
7591: ST_TO_ADDR
// sTiger := false ;
7592: LD_ADDR_EXP 45
7596: PUSH
7597: LD_INT 0
7599: ST_TO_ADDR
// sBomb := false ;
7600: LD_ADDR_EXP 46
7604: PUSH
7605: LD_INT 0
7607: ST_TO_ADDR
// sWound := false ;
7608: LD_ADDR_EXP 54
7612: PUSH
7613: LD_INT 0
7615: ST_TO_ADDR
// sBetray := false ;
7616: LD_ADDR_EXP 58
7620: PUSH
7621: LD_INT 0
7623: ST_TO_ADDR
// sContamin := false ;
7624: LD_ADDR_EXP 59
7628: PUSH
7629: LD_INT 0
7631: ST_TO_ADDR
// sOil := false ;
7632: LD_ADDR_EXP 61
7636: PUSH
7637: LD_INT 0
7639: ST_TO_ADDR
// sStu := false ;
7640: LD_ADDR_EXP 65
7644: PUSH
7645: LD_INT 0
7647: ST_TO_ADDR
// sBazooka := false ;
7648: LD_ADDR_EXP 68
7652: PUSH
7653: LD_INT 0
7655: ST_TO_ADDR
// sMortar := false ;
7656: LD_ADDR_EXP 69
7660: PUSH
7661: LD_INT 0
7663: ST_TO_ADDR
// sRanger := false ;
7664: LD_ADDR_EXP 79
7668: PUSH
7669: LD_INT 0
7671: ST_TO_ADDR
// sComputer := false ;
7672: LD_ADDR_EXP 80
7676: PUSH
7677: LD_INT 0
7679: ST_TO_ADDR
// s30 := false ;
7680: LD_ADDR_EXP 81
7684: PUSH
7685: LD_INT 0
7687: ST_TO_ADDR
// s60 := false ;
7688: LD_ADDR_EXP 82
7692: PUSH
7693: LD_INT 0
7695: ST_TO_ADDR
// end ;
7696: LD_VAR 0 1
7700: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
7701: LD_INT 0
7703: PPUSH
7704: PPUSH
7705: PPUSH
7706: PPUSH
7707: PPUSH
7708: PPUSH
7709: PPUSH
// result := [ ] ;
7710: LD_ADDR_VAR 0 2
7714: PUSH
7715: EMPTY
7716: ST_TO_ADDR
// if campaign_id = 1 then
7717: LD_OWVAR 69
7721: PUSH
7722: LD_INT 1
7724: EQUAL
7725: IFFALSE 10891
// begin case mission_number of 1 :
7727: LD_OWVAR 70
7731: PUSH
7732: LD_INT 1
7734: DOUBLE
7735: EQUAL
7736: IFTRUE 7740
7738: GO 7816
7740: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
7741: LD_ADDR_VAR 0 2
7745: PUSH
7746: LD_INT 2
7748: PUSH
7749: LD_INT 4
7751: PUSH
7752: LD_INT 11
7754: PUSH
7755: LD_INT 12
7757: PUSH
7758: LD_INT 15
7760: PUSH
7761: LD_INT 16
7763: PUSH
7764: LD_INT 22
7766: PUSH
7767: LD_INT 23
7769: PUSH
7770: LD_INT 26
7772: PUSH
7773: EMPTY
7774: LIST
7775: LIST
7776: LIST
7777: LIST
7778: LIST
7779: LIST
7780: LIST
7781: LIST
7782: LIST
7783: PUSH
7784: LD_INT 101
7786: PUSH
7787: LD_INT 102
7789: PUSH
7790: LD_INT 106
7792: PUSH
7793: LD_INT 116
7795: PUSH
7796: LD_INT 117
7798: PUSH
7799: LD_INT 118
7801: PUSH
7802: EMPTY
7803: LIST
7804: LIST
7805: LIST
7806: LIST
7807: LIST
7808: LIST
7809: PUSH
7810: EMPTY
7811: LIST
7812: LIST
7813: ST_TO_ADDR
7814: GO 10889
7816: LD_INT 2
7818: DOUBLE
7819: EQUAL
7820: IFTRUE 7824
7822: GO 7908
7824: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
7825: LD_ADDR_VAR 0 2
7829: PUSH
7830: LD_INT 2
7832: PUSH
7833: LD_INT 4
7835: PUSH
7836: LD_INT 11
7838: PUSH
7839: LD_INT 12
7841: PUSH
7842: LD_INT 15
7844: PUSH
7845: LD_INT 16
7847: PUSH
7848: LD_INT 22
7850: PUSH
7851: LD_INT 23
7853: PUSH
7854: LD_INT 26
7856: PUSH
7857: EMPTY
7858: LIST
7859: LIST
7860: LIST
7861: LIST
7862: LIST
7863: LIST
7864: LIST
7865: LIST
7866: LIST
7867: PUSH
7868: LD_INT 101
7870: PUSH
7871: LD_INT 102
7873: PUSH
7874: LD_INT 105
7876: PUSH
7877: LD_INT 106
7879: PUSH
7880: LD_INT 108
7882: PUSH
7883: LD_INT 116
7885: PUSH
7886: LD_INT 117
7888: PUSH
7889: LD_INT 118
7891: PUSH
7892: EMPTY
7893: LIST
7894: LIST
7895: LIST
7896: LIST
7897: LIST
7898: LIST
7899: LIST
7900: LIST
7901: PUSH
7902: EMPTY
7903: LIST
7904: LIST
7905: ST_TO_ADDR
7906: GO 10889
7908: LD_INT 3
7910: DOUBLE
7911: EQUAL
7912: IFTRUE 7916
7914: GO 8004
7916: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
7917: LD_ADDR_VAR 0 2
7921: PUSH
7922: LD_INT 2
7924: PUSH
7925: LD_INT 4
7927: PUSH
7928: LD_INT 5
7930: PUSH
7931: LD_INT 11
7933: PUSH
7934: LD_INT 12
7936: PUSH
7937: LD_INT 15
7939: PUSH
7940: LD_INT 16
7942: PUSH
7943: LD_INT 22
7945: PUSH
7946: LD_INT 26
7948: PUSH
7949: LD_INT 36
7951: PUSH
7952: EMPTY
7953: LIST
7954: LIST
7955: LIST
7956: LIST
7957: LIST
7958: LIST
7959: LIST
7960: LIST
7961: LIST
7962: LIST
7963: PUSH
7964: LD_INT 101
7966: PUSH
7967: LD_INT 102
7969: PUSH
7970: LD_INT 105
7972: PUSH
7973: LD_INT 106
7975: PUSH
7976: LD_INT 108
7978: PUSH
7979: LD_INT 116
7981: PUSH
7982: LD_INT 117
7984: PUSH
7985: LD_INT 118
7987: PUSH
7988: EMPTY
7989: LIST
7990: LIST
7991: LIST
7992: LIST
7993: LIST
7994: LIST
7995: LIST
7996: LIST
7997: PUSH
7998: EMPTY
7999: LIST
8000: LIST
8001: ST_TO_ADDR
8002: GO 10889
8004: LD_INT 4
8006: DOUBLE
8007: EQUAL
8008: IFTRUE 8012
8010: GO 8108
8012: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
8013: LD_ADDR_VAR 0 2
8017: PUSH
8018: LD_INT 2
8020: PUSH
8021: LD_INT 4
8023: PUSH
8024: LD_INT 5
8026: PUSH
8027: LD_INT 8
8029: PUSH
8030: LD_INT 11
8032: PUSH
8033: LD_INT 12
8035: PUSH
8036: LD_INT 15
8038: PUSH
8039: LD_INT 16
8041: PUSH
8042: LD_INT 22
8044: PUSH
8045: LD_INT 23
8047: PUSH
8048: LD_INT 26
8050: PUSH
8051: LD_INT 36
8053: PUSH
8054: EMPTY
8055: LIST
8056: LIST
8057: LIST
8058: LIST
8059: LIST
8060: LIST
8061: LIST
8062: LIST
8063: LIST
8064: LIST
8065: LIST
8066: LIST
8067: PUSH
8068: LD_INT 101
8070: PUSH
8071: LD_INT 102
8073: PUSH
8074: LD_INT 105
8076: PUSH
8077: LD_INT 106
8079: PUSH
8080: LD_INT 108
8082: PUSH
8083: LD_INT 116
8085: PUSH
8086: LD_INT 117
8088: PUSH
8089: LD_INT 118
8091: PUSH
8092: EMPTY
8093: LIST
8094: LIST
8095: LIST
8096: LIST
8097: LIST
8098: LIST
8099: LIST
8100: LIST
8101: PUSH
8102: EMPTY
8103: LIST
8104: LIST
8105: ST_TO_ADDR
8106: GO 10889
8108: LD_INT 5
8110: DOUBLE
8111: EQUAL
8112: IFTRUE 8116
8114: GO 8228
8116: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
8117: LD_ADDR_VAR 0 2
8121: PUSH
8122: LD_INT 2
8124: PUSH
8125: LD_INT 4
8127: PUSH
8128: LD_INT 5
8130: PUSH
8131: LD_INT 6
8133: PUSH
8134: LD_INT 8
8136: PUSH
8137: LD_INT 11
8139: PUSH
8140: LD_INT 12
8142: PUSH
8143: LD_INT 15
8145: PUSH
8146: LD_INT 16
8148: PUSH
8149: LD_INT 22
8151: PUSH
8152: LD_INT 23
8154: PUSH
8155: LD_INT 25
8157: PUSH
8158: LD_INT 26
8160: PUSH
8161: LD_INT 36
8163: PUSH
8164: EMPTY
8165: LIST
8166: LIST
8167: LIST
8168: LIST
8169: LIST
8170: LIST
8171: LIST
8172: LIST
8173: LIST
8174: LIST
8175: LIST
8176: LIST
8177: LIST
8178: LIST
8179: PUSH
8180: LD_INT 101
8182: PUSH
8183: LD_INT 102
8185: PUSH
8186: LD_INT 105
8188: PUSH
8189: LD_INT 106
8191: PUSH
8192: LD_INT 108
8194: PUSH
8195: LD_INT 109
8197: PUSH
8198: LD_INT 112
8200: PUSH
8201: LD_INT 116
8203: PUSH
8204: LD_INT 117
8206: PUSH
8207: LD_INT 118
8209: PUSH
8210: EMPTY
8211: LIST
8212: LIST
8213: LIST
8214: LIST
8215: LIST
8216: LIST
8217: LIST
8218: LIST
8219: LIST
8220: LIST
8221: PUSH
8222: EMPTY
8223: LIST
8224: LIST
8225: ST_TO_ADDR
8226: GO 10889
8228: LD_INT 6
8230: DOUBLE
8231: EQUAL
8232: IFTRUE 8236
8234: GO 8368
8236: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
8237: LD_ADDR_VAR 0 2
8241: PUSH
8242: LD_INT 2
8244: PUSH
8245: LD_INT 4
8247: PUSH
8248: LD_INT 5
8250: PUSH
8251: LD_INT 6
8253: PUSH
8254: LD_INT 8
8256: PUSH
8257: LD_INT 11
8259: PUSH
8260: LD_INT 12
8262: PUSH
8263: LD_INT 15
8265: PUSH
8266: LD_INT 16
8268: PUSH
8269: LD_INT 20
8271: PUSH
8272: LD_INT 21
8274: PUSH
8275: LD_INT 22
8277: PUSH
8278: LD_INT 23
8280: PUSH
8281: LD_INT 25
8283: PUSH
8284: LD_INT 26
8286: PUSH
8287: LD_INT 30
8289: PUSH
8290: LD_INT 31
8292: PUSH
8293: LD_INT 32
8295: PUSH
8296: LD_INT 36
8298: PUSH
8299: EMPTY
8300: LIST
8301: LIST
8302: LIST
8303: LIST
8304: LIST
8305: LIST
8306: LIST
8307: LIST
8308: LIST
8309: LIST
8310: LIST
8311: LIST
8312: LIST
8313: LIST
8314: LIST
8315: LIST
8316: LIST
8317: LIST
8318: LIST
8319: PUSH
8320: LD_INT 101
8322: PUSH
8323: LD_INT 102
8325: PUSH
8326: LD_INT 105
8328: PUSH
8329: LD_INT 106
8331: PUSH
8332: LD_INT 108
8334: PUSH
8335: LD_INT 109
8337: PUSH
8338: LD_INT 112
8340: PUSH
8341: LD_INT 116
8343: PUSH
8344: LD_INT 117
8346: PUSH
8347: LD_INT 118
8349: PUSH
8350: EMPTY
8351: LIST
8352: LIST
8353: LIST
8354: LIST
8355: LIST
8356: LIST
8357: LIST
8358: LIST
8359: LIST
8360: LIST
8361: PUSH
8362: EMPTY
8363: LIST
8364: LIST
8365: ST_TO_ADDR
8366: GO 10889
8368: LD_INT 7
8370: DOUBLE
8371: EQUAL
8372: IFTRUE 8376
8374: GO 8488
8376: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
8377: LD_ADDR_VAR 0 2
8381: PUSH
8382: LD_INT 2
8384: PUSH
8385: LD_INT 4
8387: PUSH
8388: LD_INT 5
8390: PUSH
8391: LD_INT 7
8393: PUSH
8394: LD_INT 11
8396: PUSH
8397: LD_INT 12
8399: PUSH
8400: LD_INT 15
8402: PUSH
8403: LD_INT 16
8405: PUSH
8406: LD_INT 20
8408: PUSH
8409: LD_INT 21
8411: PUSH
8412: LD_INT 22
8414: PUSH
8415: LD_INT 23
8417: PUSH
8418: LD_INT 25
8420: PUSH
8421: LD_INT 26
8423: PUSH
8424: EMPTY
8425: LIST
8426: LIST
8427: LIST
8428: LIST
8429: LIST
8430: LIST
8431: LIST
8432: LIST
8433: LIST
8434: LIST
8435: LIST
8436: LIST
8437: LIST
8438: LIST
8439: PUSH
8440: LD_INT 101
8442: PUSH
8443: LD_INT 102
8445: PUSH
8446: LD_INT 103
8448: PUSH
8449: LD_INT 105
8451: PUSH
8452: LD_INT 106
8454: PUSH
8455: LD_INT 108
8457: PUSH
8458: LD_INT 112
8460: PUSH
8461: LD_INT 116
8463: PUSH
8464: LD_INT 117
8466: PUSH
8467: LD_INT 118
8469: PUSH
8470: EMPTY
8471: LIST
8472: LIST
8473: LIST
8474: LIST
8475: LIST
8476: LIST
8477: LIST
8478: LIST
8479: LIST
8480: LIST
8481: PUSH
8482: EMPTY
8483: LIST
8484: LIST
8485: ST_TO_ADDR
8486: GO 10889
8488: LD_INT 8
8490: DOUBLE
8491: EQUAL
8492: IFTRUE 8496
8494: GO 8636
8496: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
8497: LD_ADDR_VAR 0 2
8501: PUSH
8502: LD_INT 2
8504: PUSH
8505: LD_INT 4
8507: PUSH
8508: LD_INT 5
8510: PUSH
8511: LD_INT 6
8513: PUSH
8514: LD_INT 7
8516: PUSH
8517: LD_INT 8
8519: PUSH
8520: LD_INT 11
8522: PUSH
8523: LD_INT 12
8525: PUSH
8526: LD_INT 15
8528: PUSH
8529: LD_INT 16
8531: PUSH
8532: LD_INT 20
8534: PUSH
8535: LD_INT 21
8537: PUSH
8538: LD_INT 22
8540: PUSH
8541: LD_INT 23
8543: PUSH
8544: LD_INT 25
8546: PUSH
8547: LD_INT 26
8549: PUSH
8550: LD_INT 30
8552: PUSH
8553: LD_INT 31
8555: PUSH
8556: LD_INT 32
8558: PUSH
8559: LD_INT 36
8561: PUSH
8562: EMPTY
8563: LIST
8564: LIST
8565: LIST
8566: LIST
8567: LIST
8568: LIST
8569: LIST
8570: LIST
8571: LIST
8572: LIST
8573: LIST
8574: LIST
8575: LIST
8576: LIST
8577: LIST
8578: LIST
8579: LIST
8580: LIST
8581: LIST
8582: LIST
8583: PUSH
8584: LD_INT 101
8586: PUSH
8587: LD_INT 102
8589: PUSH
8590: LD_INT 103
8592: PUSH
8593: LD_INT 105
8595: PUSH
8596: LD_INT 106
8598: PUSH
8599: LD_INT 108
8601: PUSH
8602: LD_INT 109
8604: PUSH
8605: LD_INT 112
8607: PUSH
8608: LD_INT 116
8610: PUSH
8611: LD_INT 117
8613: PUSH
8614: LD_INT 118
8616: PUSH
8617: EMPTY
8618: LIST
8619: LIST
8620: LIST
8621: LIST
8622: LIST
8623: LIST
8624: LIST
8625: LIST
8626: LIST
8627: LIST
8628: LIST
8629: PUSH
8630: EMPTY
8631: LIST
8632: LIST
8633: ST_TO_ADDR
8634: GO 10889
8636: LD_INT 9
8638: DOUBLE
8639: EQUAL
8640: IFTRUE 8644
8642: GO 8792
8644: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
8645: LD_ADDR_VAR 0 2
8649: PUSH
8650: LD_INT 2
8652: PUSH
8653: LD_INT 4
8655: PUSH
8656: LD_INT 5
8658: PUSH
8659: LD_INT 6
8661: PUSH
8662: LD_INT 7
8664: PUSH
8665: LD_INT 8
8667: PUSH
8668: LD_INT 11
8670: PUSH
8671: LD_INT 12
8673: PUSH
8674: LD_INT 15
8676: PUSH
8677: LD_INT 16
8679: PUSH
8680: LD_INT 20
8682: PUSH
8683: LD_INT 21
8685: PUSH
8686: LD_INT 22
8688: PUSH
8689: LD_INT 23
8691: PUSH
8692: LD_INT 25
8694: PUSH
8695: LD_INT 26
8697: PUSH
8698: LD_INT 28
8700: PUSH
8701: LD_INT 30
8703: PUSH
8704: LD_INT 31
8706: PUSH
8707: LD_INT 32
8709: PUSH
8710: LD_INT 36
8712: PUSH
8713: EMPTY
8714: LIST
8715: LIST
8716: LIST
8717: LIST
8718: LIST
8719: LIST
8720: LIST
8721: LIST
8722: LIST
8723: LIST
8724: LIST
8725: LIST
8726: LIST
8727: LIST
8728: LIST
8729: LIST
8730: LIST
8731: LIST
8732: LIST
8733: LIST
8734: LIST
8735: PUSH
8736: LD_INT 101
8738: PUSH
8739: LD_INT 102
8741: PUSH
8742: LD_INT 103
8744: PUSH
8745: LD_INT 105
8747: PUSH
8748: LD_INT 106
8750: PUSH
8751: LD_INT 108
8753: PUSH
8754: LD_INT 109
8756: PUSH
8757: LD_INT 112
8759: PUSH
8760: LD_INT 114
8762: PUSH
8763: LD_INT 116
8765: PUSH
8766: LD_INT 117
8768: PUSH
8769: LD_INT 118
8771: PUSH
8772: EMPTY
8773: LIST
8774: LIST
8775: LIST
8776: LIST
8777: LIST
8778: LIST
8779: LIST
8780: LIST
8781: LIST
8782: LIST
8783: LIST
8784: LIST
8785: PUSH
8786: EMPTY
8787: LIST
8788: LIST
8789: ST_TO_ADDR
8790: GO 10889
8792: LD_INT 10
8794: DOUBLE
8795: EQUAL
8796: IFTRUE 8800
8798: GO 8996
8800: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
8801: LD_ADDR_VAR 0 2
8805: PUSH
8806: LD_INT 2
8808: PUSH
8809: LD_INT 4
8811: PUSH
8812: LD_INT 5
8814: PUSH
8815: LD_INT 6
8817: PUSH
8818: LD_INT 7
8820: PUSH
8821: LD_INT 8
8823: PUSH
8824: LD_INT 9
8826: PUSH
8827: LD_INT 10
8829: PUSH
8830: LD_INT 11
8832: PUSH
8833: LD_INT 12
8835: PUSH
8836: LD_INT 13
8838: PUSH
8839: LD_INT 14
8841: PUSH
8842: LD_INT 15
8844: PUSH
8845: LD_INT 16
8847: PUSH
8848: LD_INT 17
8850: PUSH
8851: LD_INT 18
8853: PUSH
8854: LD_INT 19
8856: PUSH
8857: LD_INT 20
8859: PUSH
8860: LD_INT 21
8862: PUSH
8863: LD_INT 22
8865: PUSH
8866: LD_INT 23
8868: PUSH
8869: LD_INT 24
8871: PUSH
8872: LD_INT 25
8874: PUSH
8875: LD_INT 26
8877: PUSH
8878: LD_INT 28
8880: PUSH
8881: LD_INT 30
8883: PUSH
8884: LD_INT 31
8886: PUSH
8887: LD_INT 32
8889: PUSH
8890: LD_INT 36
8892: PUSH
8893: EMPTY
8894: LIST
8895: LIST
8896: LIST
8897: LIST
8898: LIST
8899: LIST
8900: LIST
8901: LIST
8902: LIST
8903: LIST
8904: LIST
8905: LIST
8906: LIST
8907: LIST
8908: LIST
8909: LIST
8910: LIST
8911: LIST
8912: LIST
8913: LIST
8914: LIST
8915: LIST
8916: LIST
8917: LIST
8918: LIST
8919: LIST
8920: LIST
8921: LIST
8922: LIST
8923: PUSH
8924: LD_INT 101
8926: PUSH
8927: LD_INT 102
8929: PUSH
8930: LD_INT 103
8932: PUSH
8933: LD_INT 104
8935: PUSH
8936: LD_INT 105
8938: PUSH
8939: LD_INT 106
8941: PUSH
8942: LD_INT 107
8944: PUSH
8945: LD_INT 108
8947: PUSH
8948: LD_INT 109
8950: PUSH
8951: LD_INT 110
8953: PUSH
8954: LD_INT 111
8956: PUSH
8957: LD_INT 112
8959: PUSH
8960: LD_INT 114
8962: PUSH
8963: LD_INT 116
8965: PUSH
8966: LD_INT 117
8968: PUSH
8969: LD_INT 118
8971: PUSH
8972: EMPTY
8973: LIST
8974: LIST
8975: LIST
8976: LIST
8977: LIST
8978: LIST
8979: LIST
8980: LIST
8981: LIST
8982: LIST
8983: LIST
8984: LIST
8985: LIST
8986: LIST
8987: LIST
8988: LIST
8989: PUSH
8990: EMPTY
8991: LIST
8992: LIST
8993: ST_TO_ADDR
8994: GO 10889
8996: LD_INT 11
8998: DOUBLE
8999: EQUAL
9000: IFTRUE 9004
9002: GO 9208
9004: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
9005: LD_ADDR_VAR 0 2
9009: PUSH
9010: LD_INT 2
9012: PUSH
9013: LD_INT 3
9015: PUSH
9016: LD_INT 4
9018: PUSH
9019: LD_INT 5
9021: PUSH
9022: LD_INT 6
9024: PUSH
9025: LD_INT 7
9027: PUSH
9028: LD_INT 8
9030: PUSH
9031: LD_INT 9
9033: PUSH
9034: LD_INT 10
9036: PUSH
9037: LD_INT 11
9039: PUSH
9040: LD_INT 12
9042: PUSH
9043: LD_INT 13
9045: PUSH
9046: LD_INT 14
9048: PUSH
9049: LD_INT 15
9051: PUSH
9052: LD_INT 16
9054: PUSH
9055: LD_INT 17
9057: PUSH
9058: LD_INT 18
9060: PUSH
9061: LD_INT 19
9063: PUSH
9064: LD_INT 20
9066: PUSH
9067: LD_INT 21
9069: PUSH
9070: LD_INT 22
9072: PUSH
9073: LD_INT 23
9075: PUSH
9076: LD_INT 24
9078: PUSH
9079: LD_INT 25
9081: PUSH
9082: LD_INT 26
9084: PUSH
9085: LD_INT 28
9087: PUSH
9088: LD_INT 30
9090: PUSH
9091: LD_INT 31
9093: PUSH
9094: LD_INT 32
9096: PUSH
9097: LD_INT 34
9099: PUSH
9100: LD_INT 36
9102: PUSH
9103: EMPTY
9104: LIST
9105: LIST
9106: LIST
9107: LIST
9108: LIST
9109: LIST
9110: LIST
9111: LIST
9112: LIST
9113: LIST
9114: LIST
9115: LIST
9116: LIST
9117: LIST
9118: LIST
9119: LIST
9120: LIST
9121: LIST
9122: LIST
9123: LIST
9124: LIST
9125: LIST
9126: LIST
9127: LIST
9128: LIST
9129: LIST
9130: LIST
9131: LIST
9132: LIST
9133: LIST
9134: LIST
9135: PUSH
9136: LD_INT 101
9138: PUSH
9139: LD_INT 102
9141: PUSH
9142: LD_INT 103
9144: PUSH
9145: LD_INT 104
9147: PUSH
9148: LD_INT 105
9150: PUSH
9151: LD_INT 106
9153: PUSH
9154: LD_INT 107
9156: PUSH
9157: LD_INT 108
9159: PUSH
9160: LD_INT 109
9162: PUSH
9163: LD_INT 110
9165: PUSH
9166: LD_INT 111
9168: PUSH
9169: LD_INT 112
9171: PUSH
9172: LD_INT 114
9174: PUSH
9175: LD_INT 116
9177: PUSH
9178: LD_INT 117
9180: PUSH
9181: LD_INT 118
9183: PUSH
9184: EMPTY
9185: LIST
9186: LIST
9187: LIST
9188: LIST
9189: LIST
9190: LIST
9191: LIST
9192: LIST
9193: LIST
9194: LIST
9195: LIST
9196: LIST
9197: LIST
9198: LIST
9199: LIST
9200: LIST
9201: PUSH
9202: EMPTY
9203: LIST
9204: LIST
9205: ST_TO_ADDR
9206: GO 10889
9208: LD_INT 12
9210: DOUBLE
9211: EQUAL
9212: IFTRUE 9216
9214: GO 9436
9216: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
9217: LD_ADDR_VAR 0 2
9221: PUSH
9222: LD_INT 1
9224: PUSH
9225: LD_INT 2
9227: PUSH
9228: LD_INT 3
9230: PUSH
9231: LD_INT 4
9233: PUSH
9234: LD_INT 5
9236: PUSH
9237: LD_INT 6
9239: PUSH
9240: LD_INT 7
9242: PUSH
9243: LD_INT 8
9245: PUSH
9246: LD_INT 9
9248: PUSH
9249: LD_INT 10
9251: PUSH
9252: LD_INT 11
9254: PUSH
9255: LD_INT 12
9257: PUSH
9258: LD_INT 13
9260: PUSH
9261: LD_INT 14
9263: PUSH
9264: LD_INT 15
9266: PUSH
9267: LD_INT 16
9269: PUSH
9270: LD_INT 17
9272: PUSH
9273: LD_INT 18
9275: PUSH
9276: LD_INT 19
9278: PUSH
9279: LD_INT 20
9281: PUSH
9282: LD_INT 21
9284: PUSH
9285: LD_INT 22
9287: PUSH
9288: LD_INT 23
9290: PUSH
9291: LD_INT 24
9293: PUSH
9294: LD_INT 25
9296: PUSH
9297: LD_INT 26
9299: PUSH
9300: LD_INT 27
9302: PUSH
9303: LD_INT 28
9305: PUSH
9306: LD_INT 30
9308: PUSH
9309: LD_INT 31
9311: PUSH
9312: LD_INT 32
9314: PUSH
9315: LD_INT 33
9317: PUSH
9318: LD_INT 34
9320: PUSH
9321: LD_INT 36
9323: PUSH
9324: EMPTY
9325: LIST
9326: LIST
9327: LIST
9328: LIST
9329: LIST
9330: LIST
9331: LIST
9332: LIST
9333: LIST
9334: LIST
9335: LIST
9336: LIST
9337: LIST
9338: LIST
9339: LIST
9340: LIST
9341: LIST
9342: LIST
9343: LIST
9344: LIST
9345: LIST
9346: LIST
9347: LIST
9348: LIST
9349: LIST
9350: LIST
9351: LIST
9352: LIST
9353: LIST
9354: LIST
9355: LIST
9356: LIST
9357: LIST
9358: LIST
9359: PUSH
9360: LD_INT 101
9362: PUSH
9363: LD_INT 102
9365: PUSH
9366: LD_INT 103
9368: PUSH
9369: LD_INT 104
9371: PUSH
9372: LD_INT 105
9374: PUSH
9375: LD_INT 106
9377: PUSH
9378: LD_INT 107
9380: PUSH
9381: LD_INT 108
9383: PUSH
9384: LD_INT 109
9386: PUSH
9387: LD_INT 110
9389: PUSH
9390: LD_INT 111
9392: PUSH
9393: LD_INT 112
9395: PUSH
9396: LD_INT 113
9398: PUSH
9399: LD_INT 114
9401: PUSH
9402: LD_INT 116
9404: PUSH
9405: LD_INT 117
9407: PUSH
9408: LD_INT 118
9410: PUSH
9411: EMPTY
9412: LIST
9413: LIST
9414: LIST
9415: LIST
9416: LIST
9417: LIST
9418: LIST
9419: LIST
9420: LIST
9421: LIST
9422: LIST
9423: LIST
9424: LIST
9425: LIST
9426: LIST
9427: LIST
9428: LIST
9429: PUSH
9430: EMPTY
9431: LIST
9432: LIST
9433: ST_TO_ADDR
9434: GO 10889
9436: LD_INT 13
9438: DOUBLE
9439: EQUAL
9440: IFTRUE 9444
9442: GO 9652
9444: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
9445: LD_ADDR_VAR 0 2
9449: PUSH
9450: LD_INT 1
9452: PUSH
9453: LD_INT 2
9455: PUSH
9456: LD_INT 3
9458: PUSH
9459: LD_INT 4
9461: PUSH
9462: LD_INT 5
9464: PUSH
9465: LD_INT 8
9467: PUSH
9468: LD_INT 9
9470: PUSH
9471: LD_INT 10
9473: PUSH
9474: LD_INT 11
9476: PUSH
9477: LD_INT 12
9479: PUSH
9480: LD_INT 14
9482: PUSH
9483: LD_INT 15
9485: PUSH
9486: LD_INT 16
9488: PUSH
9489: LD_INT 17
9491: PUSH
9492: LD_INT 18
9494: PUSH
9495: LD_INT 19
9497: PUSH
9498: LD_INT 20
9500: PUSH
9501: LD_INT 21
9503: PUSH
9504: LD_INT 22
9506: PUSH
9507: LD_INT 23
9509: PUSH
9510: LD_INT 24
9512: PUSH
9513: LD_INT 25
9515: PUSH
9516: LD_INT 26
9518: PUSH
9519: LD_INT 27
9521: PUSH
9522: LD_INT 28
9524: PUSH
9525: LD_INT 30
9527: PUSH
9528: LD_INT 31
9530: PUSH
9531: LD_INT 32
9533: PUSH
9534: LD_INT 33
9536: PUSH
9537: LD_INT 34
9539: PUSH
9540: LD_INT 36
9542: PUSH
9543: EMPTY
9544: LIST
9545: LIST
9546: LIST
9547: LIST
9548: LIST
9549: LIST
9550: LIST
9551: LIST
9552: LIST
9553: LIST
9554: LIST
9555: LIST
9556: LIST
9557: LIST
9558: LIST
9559: LIST
9560: LIST
9561: LIST
9562: LIST
9563: LIST
9564: LIST
9565: LIST
9566: LIST
9567: LIST
9568: LIST
9569: LIST
9570: LIST
9571: LIST
9572: LIST
9573: LIST
9574: LIST
9575: PUSH
9576: LD_INT 101
9578: PUSH
9579: LD_INT 102
9581: PUSH
9582: LD_INT 103
9584: PUSH
9585: LD_INT 104
9587: PUSH
9588: LD_INT 105
9590: PUSH
9591: LD_INT 106
9593: PUSH
9594: LD_INT 107
9596: PUSH
9597: LD_INT 108
9599: PUSH
9600: LD_INT 109
9602: PUSH
9603: LD_INT 110
9605: PUSH
9606: LD_INT 111
9608: PUSH
9609: LD_INT 112
9611: PUSH
9612: LD_INT 113
9614: PUSH
9615: LD_INT 114
9617: PUSH
9618: LD_INT 116
9620: PUSH
9621: LD_INT 117
9623: PUSH
9624: LD_INT 118
9626: PUSH
9627: EMPTY
9628: LIST
9629: LIST
9630: LIST
9631: LIST
9632: LIST
9633: LIST
9634: LIST
9635: LIST
9636: LIST
9637: LIST
9638: LIST
9639: LIST
9640: LIST
9641: LIST
9642: LIST
9643: LIST
9644: LIST
9645: PUSH
9646: EMPTY
9647: LIST
9648: LIST
9649: ST_TO_ADDR
9650: GO 10889
9652: LD_INT 14
9654: DOUBLE
9655: EQUAL
9656: IFTRUE 9660
9658: GO 9884
9660: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
9661: LD_ADDR_VAR 0 2
9665: PUSH
9666: LD_INT 1
9668: PUSH
9669: LD_INT 2
9671: PUSH
9672: LD_INT 3
9674: PUSH
9675: LD_INT 4
9677: PUSH
9678: LD_INT 5
9680: PUSH
9681: LD_INT 6
9683: PUSH
9684: LD_INT 7
9686: PUSH
9687: LD_INT 8
9689: PUSH
9690: LD_INT 9
9692: PUSH
9693: LD_INT 10
9695: PUSH
9696: LD_INT 11
9698: PUSH
9699: LD_INT 12
9701: PUSH
9702: LD_INT 13
9704: PUSH
9705: LD_INT 14
9707: PUSH
9708: LD_INT 15
9710: PUSH
9711: LD_INT 16
9713: PUSH
9714: LD_INT 17
9716: PUSH
9717: LD_INT 18
9719: PUSH
9720: LD_INT 19
9722: PUSH
9723: LD_INT 20
9725: PUSH
9726: LD_INT 21
9728: PUSH
9729: LD_INT 22
9731: PUSH
9732: LD_INT 23
9734: PUSH
9735: LD_INT 24
9737: PUSH
9738: LD_INT 25
9740: PUSH
9741: LD_INT 26
9743: PUSH
9744: LD_INT 27
9746: PUSH
9747: LD_INT 28
9749: PUSH
9750: LD_INT 29
9752: PUSH
9753: LD_INT 30
9755: PUSH
9756: LD_INT 31
9758: PUSH
9759: LD_INT 32
9761: PUSH
9762: LD_INT 33
9764: PUSH
9765: LD_INT 34
9767: PUSH
9768: LD_INT 36
9770: PUSH
9771: EMPTY
9772: LIST
9773: LIST
9774: LIST
9775: LIST
9776: LIST
9777: LIST
9778: LIST
9779: LIST
9780: LIST
9781: LIST
9782: LIST
9783: LIST
9784: LIST
9785: LIST
9786: LIST
9787: LIST
9788: LIST
9789: LIST
9790: LIST
9791: LIST
9792: LIST
9793: LIST
9794: LIST
9795: LIST
9796: LIST
9797: LIST
9798: LIST
9799: LIST
9800: LIST
9801: LIST
9802: LIST
9803: LIST
9804: LIST
9805: LIST
9806: LIST
9807: PUSH
9808: LD_INT 101
9810: PUSH
9811: LD_INT 102
9813: PUSH
9814: LD_INT 103
9816: PUSH
9817: LD_INT 104
9819: PUSH
9820: LD_INT 105
9822: PUSH
9823: LD_INT 106
9825: PUSH
9826: LD_INT 107
9828: PUSH
9829: LD_INT 108
9831: PUSH
9832: LD_INT 109
9834: PUSH
9835: LD_INT 110
9837: PUSH
9838: LD_INT 111
9840: PUSH
9841: LD_INT 112
9843: PUSH
9844: LD_INT 113
9846: PUSH
9847: LD_INT 114
9849: PUSH
9850: LD_INT 116
9852: PUSH
9853: LD_INT 117
9855: PUSH
9856: LD_INT 118
9858: PUSH
9859: EMPTY
9860: LIST
9861: LIST
9862: LIST
9863: LIST
9864: LIST
9865: LIST
9866: LIST
9867: LIST
9868: LIST
9869: LIST
9870: LIST
9871: LIST
9872: LIST
9873: LIST
9874: LIST
9875: LIST
9876: LIST
9877: PUSH
9878: EMPTY
9879: LIST
9880: LIST
9881: ST_TO_ADDR
9882: GO 10889
9884: LD_INT 15
9886: DOUBLE
9887: EQUAL
9888: IFTRUE 9892
9890: GO 10116
9892: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
9893: LD_ADDR_VAR 0 2
9897: PUSH
9898: LD_INT 1
9900: PUSH
9901: LD_INT 2
9903: PUSH
9904: LD_INT 3
9906: PUSH
9907: LD_INT 4
9909: PUSH
9910: LD_INT 5
9912: PUSH
9913: LD_INT 6
9915: PUSH
9916: LD_INT 7
9918: PUSH
9919: LD_INT 8
9921: PUSH
9922: LD_INT 9
9924: PUSH
9925: LD_INT 10
9927: PUSH
9928: LD_INT 11
9930: PUSH
9931: LD_INT 12
9933: PUSH
9934: LD_INT 13
9936: PUSH
9937: LD_INT 14
9939: PUSH
9940: LD_INT 15
9942: PUSH
9943: LD_INT 16
9945: PUSH
9946: LD_INT 17
9948: PUSH
9949: LD_INT 18
9951: PUSH
9952: LD_INT 19
9954: PUSH
9955: LD_INT 20
9957: PUSH
9958: LD_INT 21
9960: PUSH
9961: LD_INT 22
9963: PUSH
9964: LD_INT 23
9966: PUSH
9967: LD_INT 24
9969: PUSH
9970: LD_INT 25
9972: PUSH
9973: LD_INT 26
9975: PUSH
9976: LD_INT 27
9978: PUSH
9979: LD_INT 28
9981: PUSH
9982: LD_INT 29
9984: PUSH
9985: LD_INT 30
9987: PUSH
9988: LD_INT 31
9990: PUSH
9991: LD_INT 32
9993: PUSH
9994: LD_INT 33
9996: PUSH
9997: LD_INT 34
9999: PUSH
10000: LD_INT 36
10002: PUSH
10003: EMPTY
10004: LIST
10005: LIST
10006: LIST
10007: LIST
10008: LIST
10009: LIST
10010: LIST
10011: LIST
10012: LIST
10013: LIST
10014: LIST
10015: LIST
10016: LIST
10017: LIST
10018: LIST
10019: LIST
10020: LIST
10021: LIST
10022: LIST
10023: LIST
10024: LIST
10025: LIST
10026: LIST
10027: LIST
10028: LIST
10029: LIST
10030: LIST
10031: LIST
10032: LIST
10033: LIST
10034: LIST
10035: LIST
10036: LIST
10037: LIST
10038: LIST
10039: PUSH
10040: LD_INT 101
10042: PUSH
10043: LD_INT 102
10045: PUSH
10046: LD_INT 103
10048: PUSH
10049: LD_INT 104
10051: PUSH
10052: LD_INT 105
10054: PUSH
10055: LD_INT 106
10057: PUSH
10058: LD_INT 107
10060: PUSH
10061: LD_INT 108
10063: PUSH
10064: LD_INT 109
10066: PUSH
10067: LD_INT 110
10069: PUSH
10070: LD_INT 111
10072: PUSH
10073: LD_INT 112
10075: PUSH
10076: LD_INT 113
10078: PUSH
10079: LD_INT 114
10081: PUSH
10082: LD_INT 116
10084: PUSH
10085: LD_INT 117
10087: PUSH
10088: LD_INT 118
10090: PUSH
10091: EMPTY
10092: LIST
10093: LIST
10094: LIST
10095: LIST
10096: LIST
10097: LIST
10098: LIST
10099: LIST
10100: LIST
10101: LIST
10102: LIST
10103: LIST
10104: LIST
10105: LIST
10106: LIST
10107: LIST
10108: LIST
10109: PUSH
10110: EMPTY
10111: LIST
10112: LIST
10113: ST_TO_ADDR
10114: GO 10889
10116: LD_INT 16
10118: DOUBLE
10119: EQUAL
10120: IFTRUE 10124
10122: GO 10260
10124: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
10125: LD_ADDR_VAR 0 2
10129: PUSH
10130: LD_INT 2
10132: PUSH
10133: LD_INT 4
10135: PUSH
10136: LD_INT 5
10138: PUSH
10139: LD_INT 7
10141: PUSH
10142: LD_INT 11
10144: PUSH
10145: LD_INT 12
10147: PUSH
10148: LD_INT 15
10150: PUSH
10151: LD_INT 16
10153: PUSH
10154: LD_INT 20
10156: PUSH
10157: LD_INT 21
10159: PUSH
10160: LD_INT 22
10162: PUSH
10163: LD_INT 23
10165: PUSH
10166: LD_INT 25
10168: PUSH
10169: LD_INT 26
10171: PUSH
10172: LD_INT 30
10174: PUSH
10175: LD_INT 31
10177: PUSH
10178: LD_INT 32
10180: PUSH
10181: LD_INT 33
10183: PUSH
10184: LD_INT 34
10186: PUSH
10187: EMPTY
10188: LIST
10189: LIST
10190: LIST
10191: LIST
10192: LIST
10193: LIST
10194: LIST
10195: LIST
10196: LIST
10197: LIST
10198: LIST
10199: LIST
10200: LIST
10201: LIST
10202: LIST
10203: LIST
10204: LIST
10205: LIST
10206: LIST
10207: PUSH
10208: LD_INT 101
10210: PUSH
10211: LD_INT 102
10213: PUSH
10214: LD_INT 103
10216: PUSH
10217: LD_INT 106
10219: PUSH
10220: LD_INT 108
10222: PUSH
10223: LD_INT 112
10225: PUSH
10226: LD_INT 113
10228: PUSH
10229: LD_INT 114
10231: PUSH
10232: LD_INT 116
10234: PUSH
10235: LD_INT 117
10237: PUSH
10238: LD_INT 118
10240: PUSH
10241: EMPTY
10242: LIST
10243: LIST
10244: LIST
10245: LIST
10246: LIST
10247: LIST
10248: LIST
10249: LIST
10250: LIST
10251: LIST
10252: LIST
10253: PUSH
10254: EMPTY
10255: LIST
10256: LIST
10257: ST_TO_ADDR
10258: GO 10889
10260: LD_INT 17
10262: DOUBLE
10263: EQUAL
10264: IFTRUE 10268
10266: GO 10492
10268: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
10269: LD_ADDR_VAR 0 2
10273: PUSH
10274: LD_INT 1
10276: PUSH
10277: LD_INT 2
10279: PUSH
10280: LD_INT 3
10282: PUSH
10283: LD_INT 4
10285: PUSH
10286: LD_INT 5
10288: PUSH
10289: LD_INT 6
10291: PUSH
10292: LD_INT 7
10294: PUSH
10295: LD_INT 8
10297: PUSH
10298: LD_INT 9
10300: PUSH
10301: LD_INT 10
10303: PUSH
10304: LD_INT 11
10306: PUSH
10307: LD_INT 12
10309: PUSH
10310: LD_INT 13
10312: PUSH
10313: LD_INT 14
10315: PUSH
10316: LD_INT 15
10318: PUSH
10319: LD_INT 16
10321: PUSH
10322: LD_INT 17
10324: PUSH
10325: LD_INT 18
10327: PUSH
10328: LD_INT 19
10330: PUSH
10331: LD_INT 20
10333: PUSH
10334: LD_INT 21
10336: PUSH
10337: LD_INT 22
10339: PUSH
10340: LD_INT 23
10342: PUSH
10343: LD_INT 24
10345: PUSH
10346: LD_INT 25
10348: PUSH
10349: LD_INT 26
10351: PUSH
10352: LD_INT 27
10354: PUSH
10355: LD_INT 28
10357: PUSH
10358: LD_INT 29
10360: PUSH
10361: LD_INT 30
10363: PUSH
10364: LD_INT 31
10366: PUSH
10367: LD_INT 32
10369: PUSH
10370: LD_INT 33
10372: PUSH
10373: LD_INT 34
10375: PUSH
10376: LD_INT 36
10378: PUSH
10379: EMPTY
10380: LIST
10381: LIST
10382: LIST
10383: LIST
10384: LIST
10385: LIST
10386: LIST
10387: LIST
10388: LIST
10389: LIST
10390: LIST
10391: LIST
10392: LIST
10393: LIST
10394: LIST
10395: LIST
10396: LIST
10397: LIST
10398: LIST
10399: LIST
10400: LIST
10401: LIST
10402: LIST
10403: LIST
10404: LIST
10405: LIST
10406: LIST
10407: LIST
10408: LIST
10409: LIST
10410: LIST
10411: LIST
10412: LIST
10413: LIST
10414: LIST
10415: PUSH
10416: LD_INT 101
10418: PUSH
10419: LD_INT 102
10421: PUSH
10422: LD_INT 103
10424: PUSH
10425: LD_INT 104
10427: PUSH
10428: LD_INT 105
10430: PUSH
10431: LD_INT 106
10433: PUSH
10434: LD_INT 107
10436: PUSH
10437: LD_INT 108
10439: PUSH
10440: LD_INT 109
10442: PUSH
10443: LD_INT 110
10445: PUSH
10446: LD_INT 111
10448: PUSH
10449: LD_INT 112
10451: PUSH
10452: LD_INT 113
10454: PUSH
10455: LD_INT 114
10457: PUSH
10458: LD_INT 116
10460: PUSH
10461: LD_INT 117
10463: PUSH
10464: LD_INT 118
10466: PUSH
10467: EMPTY
10468: LIST
10469: LIST
10470: LIST
10471: LIST
10472: LIST
10473: LIST
10474: LIST
10475: LIST
10476: LIST
10477: LIST
10478: LIST
10479: LIST
10480: LIST
10481: LIST
10482: LIST
10483: LIST
10484: LIST
10485: PUSH
10486: EMPTY
10487: LIST
10488: LIST
10489: ST_TO_ADDR
10490: GO 10889
10492: LD_INT 18
10494: DOUBLE
10495: EQUAL
10496: IFTRUE 10500
10498: GO 10648
10500: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
10501: LD_ADDR_VAR 0 2
10505: PUSH
10506: LD_INT 2
10508: PUSH
10509: LD_INT 4
10511: PUSH
10512: LD_INT 5
10514: PUSH
10515: LD_INT 7
10517: PUSH
10518: LD_INT 11
10520: PUSH
10521: LD_INT 12
10523: PUSH
10524: LD_INT 15
10526: PUSH
10527: LD_INT 16
10529: PUSH
10530: LD_INT 20
10532: PUSH
10533: LD_INT 21
10535: PUSH
10536: LD_INT 22
10538: PUSH
10539: LD_INT 23
10541: PUSH
10542: LD_INT 25
10544: PUSH
10545: LD_INT 26
10547: PUSH
10548: LD_INT 30
10550: PUSH
10551: LD_INT 31
10553: PUSH
10554: LD_INT 32
10556: PUSH
10557: LD_INT 33
10559: PUSH
10560: LD_INT 34
10562: PUSH
10563: LD_INT 35
10565: PUSH
10566: LD_INT 36
10568: PUSH
10569: EMPTY
10570: LIST
10571: LIST
10572: LIST
10573: LIST
10574: LIST
10575: LIST
10576: LIST
10577: LIST
10578: LIST
10579: LIST
10580: LIST
10581: LIST
10582: LIST
10583: LIST
10584: LIST
10585: LIST
10586: LIST
10587: LIST
10588: LIST
10589: LIST
10590: LIST
10591: PUSH
10592: LD_INT 101
10594: PUSH
10595: LD_INT 102
10597: PUSH
10598: LD_INT 103
10600: PUSH
10601: LD_INT 106
10603: PUSH
10604: LD_INT 108
10606: PUSH
10607: LD_INT 112
10609: PUSH
10610: LD_INT 113
10612: PUSH
10613: LD_INT 114
10615: PUSH
10616: LD_INT 115
10618: PUSH
10619: LD_INT 116
10621: PUSH
10622: LD_INT 117
10624: PUSH
10625: LD_INT 118
10627: PUSH
10628: EMPTY
10629: LIST
10630: LIST
10631: LIST
10632: LIST
10633: LIST
10634: LIST
10635: LIST
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: LIST
10641: PUSH
10642: EMPTY
10643: LIST
10644: LIST
10645: ST_TO_ADDR
10646: GO 10889
10648: LD_INT 19
10650: DOUBLE
10651: EQUAL
10652: IFTRUE 10656
10654: GO 10888
10656: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
10657: LD_ADDR_VAR 0 2
10661: PUSH
10662: LD_INT 1
10664: PUSH
10665: LD_INT 2
10667: PUSH
10668: LD_INT 3
10670: PUSH
10671: LD_INT 4
10673: PUSH
10674: LD_INT 5
10676: PUSH
10677: LD_INT 6
10679: PUSH
10680: LD_INT 7
10682: PUSH
10683: LD_INT 8
10685: PUSH
10686: LD_INT 9
10688: PUSH
10689: LD_INT 10
10691: PUSH
10692: LD_INT 11
10694: PUSH
10695: LD_INT 12
10697: PUSH
10698: LD_INT 13
10700: PUSH
10701: LD_INT 14
10703: PUSH
10704: LD_INT 15
10706: PUSH
10707: LD_INT 16
10709: PUSH
10710: LD_INT 17
10712: PUSH
10713: LD_INT 18
10715: PUSH
10716: LD_INT 19
10718: PUSH
10719: LD_INT 20
10721: PUSH
10722: LD_INT 21
10724: PUSH
10725: LD_INT 22
10727: PUSH
10728: LD_INT 23
10730: PUSH
10731: LD_INT 24
10733: PUSH
10734: LD_INT 25
10736: PUSH
10737: LD_INT 26
10739: PUSH
10740: LD_INT 27
10742: PUSH
10743: LD_INT 28
10745: PUSH
10746: LD_INT 29
10748: PUSH
10749: LD_INT 30
10751: PUSH
10752: LD_INT 31
10754: PUSH
10755: LD_INT 32
10757: PUSH
10758: LD_INT 33
10760: PUSH
10761: LD_INT 34
10763: PUSH
10764: LD_INT 35
10766: PUSH
10767: LD_INT 36
10769: PUSH
10770: EMPTY
10771: LIST
10772: LIST
10773: LIST
10774: LIST
10775: LIST
10776: LIST
10777: LIST
10778: LIST
10779: LIST
10780: LIST
10781: LIST
10782: LIST
10783: LIST
10784: LIST
10785: LIST
10786: LIST
10787: LIST
10788: LIST
10789: LIST
10790: LIST
10791: LIST
10792: LIST
10793: LIST
10794: LIST
10795: LIST
10796: LIST
10797: LIST
10798: LIST
10799: LIST
10800: LIST
10801: LIST
10802: LIST
10803: LIST
10804: LIST
10805: LIST
10806: LIST
10807: PUSH
10808: LD_INT 101
10810: PUSH
10811: LD_INT 102
10813: PUSH
10814: LD_INT 103
10816: PUSH
10817: LD_INT 104
10819: PUSH
10820: LD_INT 105
10822: PUSH
10823: LD_INT 106
10825: PUSH
10826: LD_INT 107
10828: PUSH
10829: LD_INT 108
10831: PUSH
10832: LD_INT 109
10834: PUSH
10835: LD_INT 110
10837: PUSH
10838: LD_INT 111
10840: PUSH
10841: LD_INT 112
10843: PUSH
10844: LD_INT 113
10846: PUSH
10847: LD_INT 114
10849: PUSH
10850: LD_INT 115
10852: PUSH
10853: LD_INT 116
10855: PUSH
10856: LD_INT 117
10858: PUSH
10859: LD_INT 118
10861: PUSH
10862: EMPTY
10863: LIST
10864: LIST
10865: LIST
10866: LIST
10867: LIST
10868: LIST
10869: LIST
10870: LIST
10871: LIST
10872: LIST
10873: LIST
10874: LIST
10875: LIST
10876: LIST
10877: LIST
10878: LIST
10879: LIST
10880: LIST
10881: PUSH
10882: EMPTY
10883: LIST
10884: LIST
10885: ST_TO_ADDR
10886: GO 10889
10888: POP
// end else
10889: GO 11120
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
10891: LD_ADDR_VAR 0 2
10895: PUSH
10896: LD_INT 1
10898: PUSH
10899: LD_INT 2
10901: PUSH
10902: LD_INT 3
10904: PUSH
10905: LD_INT 4
10907: PUSH
10908: LD_INT 5
10910: PUSH
10911: LD_INT 6
10913: PUSH
10914: LD_INT 7
10916: PUSH
10917: LD_INT 8
10919: PUSH
10920: LD_INT 9
10922: PUSH
10923: LD_INT 10
10925: PUSH
10926: LD_INT 11
10928: PUSH
10929: LD_INT 12
10931: PUSH
10932: LD_INT 13
10934: PUSH
10935: LD_INT 14
10937: PUSH
10938: LD_INT 15
10940: PUSH
10941: LD_INT 16
10943: PUSH
10944: LD_INT 17
10946: PUSH
10947: LD_INT 18
10949: PUSH
10950: LD_INT 19
10952: PUSH
10953: LD_INT 20
10955: PUSH
10956: LD_INT 21
10958: PUSH
10959: LD_INT 22
10961: PUSH
10962: LD_INT 23
10964: PUSH
10965: LD_INT 24
10967: PUSH
10968: LD_INT 25
10970: PUSH
10971: LD_INT 26
10973: PUSH
10974: LD_INT 27
10976: PUSH
10977: LD_INT 28
10979: PUSH
10980: LD_INT 29
10982: PUSH
10983: LD_INT 30
10985: PUSH
10986: LD_INT 31
10988: PUSH
10989: LD_INT 32
10991: PUSH
10992: LD_INT 33
10994: PUSH
10995: LD_INT 34
10997: PUSH
10998: LD_INT 35
11000: PUSH
11001: LD_INT 36
11003: PUSH
11004: EMPTY
11005: LIST
11006: LIST
11007: LIST
11008: LIST
11009: LIST
11010: LIST
11011: LIST
11012: LIST
11013: LIST
11014: LIST
11015: LIST
11016: LIST
11017: LIST
11018: LIST
11019: LIST
11020: LIST
11021: LIST
11022: LIST
11023: LIST
11024: LIST
11025: LIST
11026: LIST
11027: LIST
11028: LIST
11029: LIST
11030: LIST
11031: LIST
11032: LIST
11033: LIST
11034: LIST
11035: LIST
11036: LIST
11037: LIST
11038: LIST
11039: LIST
11040: LIST
11041: PUSH
11042: LD_INT 101
11044: PUSH
11045: LD_INT 102
11047: PUSH
11048: LD_INT 103
11050: PUSH
11051: LD_INT 104
11053: PUSH
11054: LD_INT 105
11056: PUSH
11057: LD_INT 106
11059: PUSH
11060: LD_INT 107
11062: PUSH
11063: LD_INT 108
11065: PUSH
11066: LD_INT 109
11068: PUSH
11069: LD_INT 110
11071: PUSH
11072: LD_INT 111
11074: PUSH
11075: LD_INT 112
11077: PUSH
11078: LD_INT 113
11080: PUSH
11081: LD_INT 114
11083: PUSH
11084: LD_INT 115
11086: PUSH
11087: LD_INT 116
11089: PUSH
11090: LD_INT 117
11092: PUSH
11093: LD_INT 118
11095: PUSH
11096: EMPTY
11097: LIST
11098: LIST
11099: LIST
11100: LIST
11101: LIST
11102: LIST
11103: LIST
11104: LIST
11105: LIST
11106: LIST
11107: LIST
11108: LIST
11109: LIST
11110: LIST
11111: LIST
11112: LIST
11113: LIST
11114: LIST
11115: PUSH
11116: EMPTY
11117: LIST
11118: LIST
11119: ST_TO_ADDR
// if result then
11120: LD_VAR 0 2
11124: IFFALSE 11910
// begin normal :=  ;
11126: LD_ADDR_VAR 0 5
11130: PUSH
11131: LD_STRING 
11133: ST_TO_ADDR
// hardcore :=  ;
11134: LD_ADDR_VAR 0 6
11138: PUSH
11139: LD_STRING 
11141: ST_TO_ADDR
// active :=  ;
11142: LD_ADDR_VAR 0 7
11146: PUSH
11147: LD_STRING 
11149: ST_TO_ADDR
// for i = 1 to normalCounter do
11150: LD_ADDR_VAR 0 8
11154: PUSH
11155: DOUBLE
11156: LD_INT 1
11158: DEC
11159: ST_TO_ADDR
11160: LD_EXP 27
11164: PUSH
11165: FOR_TO
11166: IFFALSE 11267
// begin tmp := 0 ;
11168: LD_ADDR_VAR 0 3
11172: PUSH
11173: LD_STRING 0
11175: ST_TO_ADDR
// if result [ 1 ] then
11176: LD_VAR 0 2
11180: PUSH
11181: LD_INT 1
11183: ARRAY
11184: IFFALSE 11249
// if result [ 1 ] [ 1 ] = i then
11186: LD_VAR 0 2
11190: PUSH
11191: LD_INT 1
11193: ARRAY
11194: PUSH
11195: LD_INT 1
11197: ARRAY
11198: PUSH
11199: LD_VAR 0 8
11203: EQUAL
11204: IFFALSE 11249
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
11206: LD_ADDR_VAR 0 2
11210: PUSH
11211: LD_VAR 0 2
11215: PPUSH
11216: LD_INT 1
11218: PPUSH
11219: LD_VAR 0 2
11223: PUSH
11224: LD_INT 1
11226: ARRAY
11227: PPUSH
11228: LD_INT 1
11230: PPUSH
11231: CALL_OW 3
11235: PPUSH
11236: CALL_OW 1
11240: ST_TO_ADDR
// tmp := 1 ;
11241: LD_ADDR_VAR 0 3
11245: PUSH
11246: LD_STRING 1
11248: ST_TO_ADDR
// end ; normal := normal & tmp ;
11249: LD_ADDR_VAR 0 5
11253: PUSH
11254: LD_VAR 0 5
11258: PUSH
11259: LD_VAR 0 3
11263: STR
11264: ST_TO_ADDR
// end ;
11265: GO 11165
11267: POP
11268: POP
// for i = 1 to hardcoreCounter do
11269: LD_ADDR_VAR 0 8
11273: PUSH
11274: DOUBLE
11275: LD_INT 1
11277: DEC
11278: ST_TO_ADDR
11279: LD_EXP 28
11283: PUSH
11284: FOR_TO
11285: IFFALSE 11390
// begin tmp := 0 ;
11287: LD_ADDR_VAR 0 3
11291: PUSH
11292: LD_STRING 0
11294: ST_TO_ADDR
// if result [ 2 ] then
11295: LD_VAR 0 2
11299: PUSH
11300: LD_INT 2
11302: ARRAY
11303: IFFALSE 11372
// if result [ 2 ] [ 1 ] = 100 + i then
11305: LD_VAR 0 2
11309: PUSH
11310: LD_INT 2
11312: ARRAY
11313: PUSH
11314: LD_INT 1
11316: ARRAY
11317: PUSH
11318: LD_INT 100
11320: PUSH
11321: LD_VAR 0 8
11325: PLUS
11326: EQUAL
11327: IFFALSE 11372
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
11329: LD_ADDR_VAR 0 2
11333: PUSH
11334: LD_VAR 0 2
11338: PPUSH
11339: LD_INT 2
11341: PPUSH
11342: LD_VAR 0 2
11346: PUSH
11347: LD_INT 2
11349: ARRAY
11350: PPUSH
11351: LD_INT 1
11353: PPUSH
11354: CALL_OW 3
11358: PPUSH
11359: CALL_OW 1
11363: ST_TO_ADDR
// tmp := 1 ;
11364: LD_ADDR_VAR 0 3
11368: PUSH
11369: LD_STRING 1
11371: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
11372: LD_ADDR_VAR 0 6
11376: PUSH
11377: LD_VAR 0 6
11381: PUSH
11382: LD_VAR 0 3
11386: STR
11387: ST_TO_ADDR
// end ;
11388: GO 11284
11390: POP
11391: POP
// if isGameLoad then
11392: LD_VAR 0 1
11396: IFFALSE 11871
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
11398: LD_ADDR_VAR 0 4
11402: PUSH
11403: LD_EXP 31
11407: PUSH
11408: LD_EXP 30
11412: PUSH
11413: LD_EXP 32
11417: PUSH
11418: LD_EXP 29
11422: PUSH
11423: LD_EXP 33
11427: PUSH
11428: LD_EXP 34
11432: PUSH
11433: LD_EXP 35
11437: PUSH
11438: LD_EXP 36
11442: PUSH
11443: LD_EXP 37
11447: PUSH
11448: LD_EXP 38
11452: PUSH
11453: LD_EXP 39
11457: PUSH
11458: LD_EXP 40
11462: PUSH
11463: LD_EXP 41
11467: PUSH
11468: LD_EXP 42
11472: PUSH
11473: LD_EXP 50
11477: PUSH
11478: LD_EXP 51
11482: PUSH
11483: LD_EXP 52
11487: PUSH
11488: LD_EXP 53
11492: PUSH
11493: LD_EXP 55
11497: PUSH
11498: LD_EXP 56
11502: PUSH
11503: LD_EXP 57
11507: PUSH
11508: LD_EXP 60
11512: PUSH
11513: LD_EXP 62
11517: PUSH
11518: LD_EXP 63
11522: PUSH
11523: LD_EXP 64
11527: PUSH
11528: LD_EXP 66
11532: PUSH
11533: LD_EXP 67
11537: PUSH
11538: LD_EXP 70
11542: PUSH
11543: LD_EXP 71
11547: PUSH
11548: LD_EXP 72
11552: PUSH
11553: LD_EXP 73
11557: PUSH
11558: LD_EXP 74
11562: PUSH
11563: LD_EXP 75
11567: PUSH
11568: LD_EXP 76
11572: PUSH
11573: LD_EXP 77
11577: PUSH
11578: LD_EXP 78
11582: PUSH
11583: LD_EXP 43
11587: PUSH
11588: LD_EXP 44
11592: PUSH
11593: LD_EXP 47
11597: PUSH
11598: LD_EXP 48
11602: PUSH
11603: LD_EXP 49
11607: PUSH
11608: LD_EXP 45
11612: PUSH
11613: LD_EXP 46
11617: PUSH
11618: LD_EXP 54
11622: PUSH
11623: LD_EXP 58
11627: PUSH
11628: LD_EXP 59
11632: PUSH
11633: LD_EXP 61
11637: PUSH
11638: LD_EXP 65
11642: PUSH
11643: LD_EXP 68
11647: PUSH
11648: LD_EXP 69
11652: PUSH
11653: LD_EXP 79
11657: PUSH
11658: LD_EXP 80
11662: PUSH
11663: LD_EXP 81
11667: PUSH
11668: LD_EXP 82
11672: PUSH
11673: EMPTY
11674: LIST
11675: LIST
11676: LIST
11677: LIST
11678: LIST
11679: LIST
11680: LIST
11681: LIST
11682: LIST
11683: LIST
11684: LIST
11685: LIST
11686: LIST
11687: LIST
11688: LIST
11689: LIST
11690: LIST
11691: LIST
11692: LIST
11693: LIST
11694: LIST
11695: LIST
11696: LIST
11697: LIST
11698: LIST
11699: LIST
11700: LIST
11701: LIST
11702: LIST
11703: LIST
11704: LIST
11705: LIST
11706: LIST
11707: LIST
11708: LIST
11709: LIST
11710: LIST
11711: LIST
11712: LIST
11713: LIST
11714: LIST
11715: LIST
11716: LIST
11717: LIST
11718: LIST
11719: LIST
11720: LIST
11721: LIST
11722: LIST
11723: LIST
11724: LIST
11725: LIST
11726: LIST
11727: LIST
11728: ST_TO_ADDR
// tmp :=  ;
11729: LD_ADDR_VAR 0 3
11733: PUSH
11734: LD_STRING 
11736: ST_TO_ADDR
// for i = 1 to normalCounter do
11737: LD_ADDR_VAR 0 8
11741: PUSH
11742: DOUBLE
11743: LD_INT 1
11745: DEC
11746: ST_TO_ADDR
11747: LD_EXP 27
11751: PUSH
11752: FOR_TO
11753: IFFALSE 11789
// begin if flags [ i ] then
11755: LD_VAR 0 4
11759: PUSH
11760: LD_VAR 0 8
11764: ARRAY
11765: IFFALSE 11787
// tmp := tmp & i & ; ;
11767: LD_ADDR_VAR 0 3
11771: PUSH
11772: LD_VAR 0 3
11776: PUSH
11777: LD_VAR 0 8
11781: STR
11782: PUSH
11783: LD_STRING ;
11785: STR
11786: ST_TO_ADDR
// end ;
11787: GO 11752
11789: POP
11790: POP
// for i = 1 to hardcoreCounter do
11791: LD_ADDR_VAR 0 8
11795: PUSH
11796: DOUBLE
11797: LD_INT 1
11799: DEC
11800: ST_TO_ADDR
11801: LD_EXP 28
11805: PUSH
11806: FOR_TO
11807: IFFALSE 11853
// begin if flags [ normalCounter + i ] then
11809: LD_VAR 0 4
11813: PUSH
11814: LD_EXP 27
11818: PUSH
11819: LD_VAR 0 8
11823: PLUS
11824: ARRAY
11825: IFFALSE 11851
// tmp := tmp & ( 100 + i ) & ; ;
11827: LD_ADDR_VAR 0 3
11831: PUSH
11832: LD_VAR 0 3
11836: PUSH
11837: LD_INT 100
11839: PUSH
11840: LD_VAR 0 8
11844: PLUS
11845: STR
11846: PUSH
11847: LD_STRING ;
11849: STR
11850: ST_TO_ADDR
// end ;
11851: GO 11806
11853: POP
11854: POP
// if tmp then
11855: LD_VAR 0 3
11859: IFFALSE 11871
// active := tmp ;
11861: LD_ADDR_VAR 0 7
11865: PUSH
11866: LD_VAR 0 3
11870: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
11871: LD_STRING getStreamItemsFromMission("
11873: PUSH
11874: LD_VAR 0 5
11878: STR
11879: PUSH
11880: LD_STRING ","
11882: STR
11883: PUSH
11884: LD_VAR 0 6
11888: STR
11889: PUSH
11890: LD_STRING ","
11892: STR
11893: PUSH
11894: LD_VAR 0 7
11898: STR
11899: PUSH
11900: LD_STRING ")
11902: STR
11903: PPUSH
11904: CALL_OW 559
// end else
11908: GO 11917
// ToLua ( getStreamItemsFromMission("","","") ) ;
11910: LD_STRING getStreamItemsFromMission("","","")
11912: PPUSH
11913: CALL_OW 559
// end ;
11917: LD_VAR 0 2
11921: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
11922: LD_EXP 26
11926: PUSH
11927: LD_EXP 31
11931: AND
11932: IFFALSE 12056
11934: GO 11936
11936: DISABLE
11937: LD_INT 0
11939: PPUSH
11940: PPUSH
// begin enable ;
11941: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
11942: LD_ADDR_VAR 0 2
11946: PUSH
11947: LD_INT 22
11949: PUSH
11950: LD_OWVAR 2
11954: PUSH
11955: EMPTY
11956: LIST
11957: LIST
11958: PUSH
11959: LD_INT 2
11961: PUSH
11962: LD_INT 34
11964: PUSH
11965: LD_INT 7
11967: PUSH
11968: EMPTY
11969: LIST
11970: LIST
11971: PUSH
11972: LD_INT 34
11974: PUSH
11975: LD_INT 45
11977: PUSH
11978: EMPTY
11979: LIST
11980: LIST
11981: PUSH
11982: LD_INT 34
11984: PUSH
11985: LD_INT 28
11987: PUSH
11988: EMPTY
11989: LIST
11990: LIST
11991: PUSH
11992: LD_INT 34
11994: PUSH
11995: LD_INT 47
11997: PUSH
11998: EMPTY
11999: LIST
12000: LIST
12001: PUSH
12002: EMPTY
12003: LIST
12004: LIST
12005: LIST
12006: LIST
12007: LIST
12008: PUSH
12009: EMPTY
12010: LIST
12011: LIST
12012: PPUSH
12013: CALL_OW 69
12017: ST_TO_ADDR
// if not tmp then
12018: LD_VAR 0 2
12022: NOT
12023: IFFALSE 12027
// exit ;
12025: GO 12056
// for i in tmp do
12027: LD_ADDR_VAR 0 1
12031: PUSH
12032: LD_VAR 0 2
12036: PUSH
12037: FOR_IN
12038: IFFALSE 12054
// begin SetLives ( i , 0 ) ;
12040: LD_VAR 0 1
12044: PPUSH
12045: LD_INT 0
12047: PPUSH
12048: CALL_OW 234
// end ;
12052: GO 12037
12054: POP
12055: POP
// end ;
12056: PPOPN 2
12058: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
12059: LD_EXP 26
12063: PUSH
12064: LD_EXP 32
12068: AND
12069: IFFALSE 12153
12071: GO 12073
12073: DISABLE
12074: LD_INT 0
12076: PPUSH
12077: PPUSH
// begin enable ;
12078: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
12079: LD_ADDR_VAR 0 2
12083: PUSH
12084: LD_INT 22
12086: PUSH
12087: LD_OWVAR 2
12091: PUSH
12092: EMPTY
12093: LIST
12094: LIST
12095: PUSH
12096: LD_INT 32
12098: PUSH
12099: LD_INT 3
12101: PUSH
12102: EMPTY
12103: LIST
12104: LIST
12105: PUSH
12106: EMPTY
12107: LIST
12108: LIST
12109: PPUSH
12110: CALL_OW 69
12114: ST_TO_ADDR
// if not tmp then
12115: LD_VAR 0 2
12119: NOT
12120: IFFALSE 12124
// exit ;
12122: GO 12153
// for i in tmp do
12124: LD_ADDR_VAR 0 1
12128: PUSH
12129: LD_VAR 0 2
12133: PUSH
12134: FOR_IN
12135: IFFALSE 12151
// begin SetLives ( i , 0 ) ;
12137: LD_VAR 0 1
12141: PPUSH
12142: LD_INT 0
12144: PPUSH
12145: CALL_OW 234
// end ;
12149: GO 12134
12151: POP
12152: POP
// end ;
12153: PPOPN 2
12155: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
12156: LD_EXP 26
12160: PUSH
12161: LD_EXP 29
12165: AND
12166: IFFALSE 12259
12168: GO 12170
12170: DISABLE
12171: LD_INT 0
12173: PPUSH
// begin enable ;
12174: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
12175: LD_ADDR_VAR 0 1
12179: PUSH
12180: LD_INT 22
12182: PUSH
12183: LD_OWVAR 2
12187: PUSH
12188: EMPTY
12189: LIST
12190: LIST
12191: PUSH
12192: LD_INT 2
12194: PUSH
12195: LD_INT 25
12197: PUSH
12198: LD_INT 5
12200: PUSH
12201: EMPTY
12202: LIST
12203: LIST
12204: PUSH
12205: LD_INT 25
12207: PUSH
12208: LD_INT 9
12210: PUSH
12211: EMPTY
12212: LIST
12213: LIST
12214: PUSH
12215: LD_INT 25
12217: PUSH
12218: LD_INT 8
12220: PUSH
12221: EMPTY
12222: LIST
12223: LIST
12224: PUSH
12225: EMPTY
12226: LIST
12227: LIST
12228: LIST
12229: LIST
12230: PUSH
12231: EMPTY
12232: LIST
12233: LIST
12234: PPUSH
12235: CALL_OW 69
12239: PUSH
12240: FOR_IN
12241: IFFALSE 12257
// begin SetClass ( i , 1 ) ;
12243: LD_VAR 0 1
12247: PPUSH
12248: LD_INT 1
12250: PPUSH
12251: CALL_OW 336
// end ;
12255: GO 12240
12257: POP
12258: POP
// end ;
12259: PPOPN 1
12261: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
12262: LD_EXP 26
12266: PUSH
12267: LD_EXP 30
12271: AND
12272: PUSH
12273: LD_OWVAR 65
12277: PUSH
12278: LD_INT 7
12280: LESS
12281: AND
12282: IFFALSE 12296
12284: GO 12286
12286: DISABLE
// begin enable ;
12287: ENABLE
// game_speed := 7 ;
12288: LD_ADDR_OWVAR 65
12292: PUSH
12293: LD_INT 7
12295: ST_TO_ADDR
// end ;
12296: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
12297: LD_EXP 26
12301: PUSH
12302: LD_EXP 33
12306: AND
12307: IFFALSE 12509
12309: GO 12311
12311: DISABLE
12312: LD_INT 0
12314: PPUSH
12315: PPUSH
12316: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
12317: LD_ADDR_VAR 0 3
12321: PUSH
12322: LD_INT 81
12324: PUSH
12325: LD_OWVAR 2
12329: PUSH
12330: EMPTY
12331: LIST
12332: LIST
12333: PUSH
12334: LD_INT 21
12336: PUSH
12337: LD_INT 1
12339: PUSH
12340: EMPTY
12341: LIST
12342: LIST
12343: PUSH
12344: EMPTY
12345: LIST
12346: LIST
12347: PPUSH
12348: CALL_OW 69
12352: ST_TO_ADDR
// if not tmp then
12353: LD_VAR 0 3
12357: NOT
12358: IFFALSE 12362
// exit ;
12360: GO 12509
// if tmp > 5 then
12362: LD_VAR 0 3
12366: PUSH
12367: LD_INT 5
12369: GREATER
12370: IFFALSE 12382
// k := 5 else
12372: LD_ADDR_VAR 0 2
12376: PUSH
12377: LD_INT 5
12379: ST_TO_ADDR
12380: GO 12392
// k := tmp ;
12382: LD_ADDR_VAR 0 2
12386: PUSH
12387: LD_VAR 0 3
12391: ST_TO_ADDR
// for i := 1 to k do
12392: LD_ADDR_VAR 0 1
12396: PUSH
12397: DOUBLE
12398: LD_INT 1
12400: DEC
12401: ST_TO_ADDR
12402: LD_VAR 0 2
12406: PUSH
12407: FOR_TO
12408: IFFALSE 12507
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
12410: LD_VAR 0 3
12414: PUSH
12415: LD_VAR 0 1
12419: ARRAY
12420: PPUSH
12421: LD_VAR 0 1
12425: PUSH
12426: LD_INT 4
12428: MOD
12429: PUSH
12430: LD_INT 1
12432: PLUS
12433: PPUSH
12434: CALL_OW 259
12438: PUSH
12439: LD_INT 10
12441: LESS
12442: IFFALSE 12505
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
12444: LD_VAR 0 3
12448: PUSH
12449: LD_VAR 0 1
12453: ARRAY
12454: PPUSH
12455: LD_VAR 0 1
12459: PUSH
12460: LD_INT 4
12462: MOD
12463: PUSH
12464: LD_INT 1
12466: PLUS
12467: PPUSH
12468: LD_VAR 0 3
12472: PUSH
12473: LD_VAR 0 1
12477: ARRAY
12478: PPUSH
12479: LD_VAR 0 1
12483: PUSH
12484: LD_INT 4
12486: MOD
12487: PUSH
12488: LD_INT 1
12490: PLUS
12491: PPUSH
12492: CALL_OW 259
12496: PUSH
12497: LD_INT 1
12499: PLUS
12500: PPUSH
12501: CALL_OW 237
12505: GO 12407
12507: POP
12508: POP
// end ;
12509: PPOPN 3
12511: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
12512: LD_EXP 26
12516: PUSH
12517: LD_EXP 34
12521: AND
12522: IFFALSE 12542
12524: GO 12526
12526: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
12527: LD_INT 4
12529: PPUSH
12530: LD_OWVAR 2
12534: PPUSH
12535: LD_INT 0
12537: PPUSH
12538: CALL_OW 324
12542: END
// every 0 0$1 trigger StreamModeActive and sShovel do
12543: LD_EXP 26
12547: PUSH
12548: LD_EXP 63
12552: AND
12553: IFFALSE 12573
12555: GO 12557
12557: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
12558: LD_INT 19
12560: PPUSH
12561: LD_OWVAR 2
12565: PPUSH
12566: LD_INT 0
12568: PPUSH
12569: CALL_OW 324
12573: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
12574: LD_EXP 26
12578: PUSH
12579: LD_EXP 35
12583: AND
12584: IFFALSE 12686
12586: GO 12588
12588: DISABLE
12589: LD_INT 0
12591: PPUSH
12592: PPUSH
// begin enable ;
12593: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
12594: LD_ADDR_VAR 0 2
12598: PUSH
12599: LD_INT 22
12601: PUSH
12602: LD_OWVAR 2
12606: PUSH
12607: EMPTY
12608: LIST
12609: LIST
12610: PUSH
12611: LD_INT 2
12613: PUSH
12614: LD_INT 34
12616: PUSH
12617: LD_INT 11
12619: PUSH
12620: EMPTY
12621: LIST
12622: LIST
12623: PUSH
12624: LD_INT 34
12626: PUSH
12627: LD_INT 30
12629: PUSH
12630: EMPTY
12631: LIST
12632: LIST
12633: PUSH
12634: EMPTY
12635: LIST
12636: LIST
12637: LIST
12638: PUSH
12639: EMPTY
12640: LIST
12641: LIST
12642: PPUSH
12643: CALL_OW 69
12647: ST_TO_ADDR
// if not tmp then
12648: LD_VAR 0 2
12652: NOT
12653: IFFALSE 12657
// exit ;
12655: GO 12686
// for i in tmp do
12657: LD_ADDR_VAR 0 1
12661: PUSH
12662: LD_VAR 0 2
12666: PUSH
12667: FOR_IN
12668: IFFALSE 12684
// begin SetLives ( i , 0 ) ;
12670: LD_VAR 0 1
12674: PPUSH
12675: LD_INT 0
12677: PPUSH
12678: CALL_OW 234
// end ;
12682: GO 12667
12684: POP
12685: POP
// end ;
12686: PPOPN 2
12688: END
// every 0 0$1 trigger StreamModeActive and sBunker do
12689: LD_EXP 26
12693: PUSH
12694: LD_EXP 36
12698: AND
12699: IFFALSE 12719
12701: GO 12703
12703: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
12704: LD_INT 32
12706: PPUSH
12707: LD_OWVAR 2
12711: PPUSH
12712: LD_INT 0
12714: PPUSH
12715: CALL_OW 324
12719: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
12720: LD_EXP 26
12724: PUSH
12725: LD_EXP 37
12729: AND
12730: IFFALSE 12911
12732: GO 12734
12734: DISABLE
12735: LD_INT 0
12737: PPUSH
12738: PPUSH
12739: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
12740: LD_ADDR_VAR 0 2
12744: PUSH
12745: LD_INT 22
12747: PUSH
12748: LD_OWVAR 2
12752: PUSH
12753: EMPTY
12754: LIST
12755: LIST
12756: PUSH
12757: LD_INT 33
12759: PUSH
12760: LD_INT 3
12762: PUSH
12763: EMPTY
12764: LIST
12765: LIST
12766: PUSH
12767: EMPTY
12768: LIST
12769: LIST
12770: PPUSH
12771: CALL_OW 69
12775: ST_TO_ADDR
// if not tmp then
12776: LD_VAR 0 2
12780: NOT
12781: IFFALSE 12785
// exit ;
12783: GO 12911
// side := 0 ;
12785: LD_ADDR_VAR 0 3
12789: PUSH
12790: LD_INT 0
12792: ST_TO_ADDR
// for i := 1 to 8 do
12793: LD_ADDR_VAR 0 1
12797: PUSH
12798: DOUBLE
12799: LD_INT 1
12801: DEC
12802: ST_TO_ADDR
12803: LD_INT 8
12805: PUSH
12806: FOR_TO
12807: IFFALSE 12855
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
12809: LD_OWVAR 2
12813: PUSH
12814: LD_VAR 0 1
12818: NONEQUAL
12819: PUSH
12820: LD_OWVAR 2
12824: PPUSH
12825: LD_VAR 0 1
12829: PPUSH
12830: CALL_OW 81
12834: PUSH
12835: LD_INT 2
12837: EQUAL
12838: AND
12839: IFFALSE 12853
// begin side := i ;
12841: LD_ADDR_VAR 0 3
12845: PUSH
12846: LD_VAR 0 1
12850: ST_TO_ADDR
// break ;
12851: GO 12855
// end ;
12853: GO 12806
12855: POP
12856: POP
// if not side then
12857: LD_VAR 0 3
12861: NOT
12862: IFFALSE 12866
// exit ;
12864: GO 12911
// for i := 1 to tmp do
12866: LD_ADDR_VAR 0 1
12870: PUSH
12871: DOUBLE
12872: LD_INT 1
12874: DEC
12875: ST_TO_ADDR
12876: LD_VAR 0 2
12880: PUSH
12881: FOR_TO
12882: IFFALSE 12909
// if Prob ( 60 ) then
12884: LD_INT 60
12886: PPUSH
12887: CALL_OW 13
12891: IFFALSE 12907
// SetSide ( i , side ) ;
12893: LD_VAR 0 1
12897: PPUSH
12898: LD_VAR 0 3
12902: PPUSH
12903: CALL_OW 235
12907: GO 12881
12909: POP
12910: POP
// end ;
12911: PPOPN 3
12913: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
12914: LD_EXP 26
12918: PUSH
12919: LD_EXP 39
12923: AND
12924: IFFALSE 13043
12926: GO 12928
12928: DISABLE
12929: LD_INT 0
12931: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
12932: LD_ADDR_VAR 0 1
12936: PUSH
12937: LD_INT 22
12939: PUSH
12940: LD_OWVAR 2
12944: PUSH
12945: EMPTY
12946: LIST
12947: LIST
12948: PUSH
12949: LD_INT 21
12951: PUSH
12952: LD_INT 1
12954: PUSH
12955: EMPTY
12956: LIST
12957: LIST
12958: PUSH
12959: LD_INT 3
12961: PUSH
12962: LD_INT 23
12964: PUSH
12965: LD_INT 0
12967: PUSH
12968: EMPTY
12969: LIST
12970: LIST
12971: PUSH
12972: EMPTY
12973: LIST
12974: LIST
12975: PUSH
12976: EMPTY
12977: LIST
12978: LIST
12979: LIST
12980: PPUSH
12981: CALL_OW 69
12985: PUSH
12986: FOR_IN
12987: IFFALSE 13041
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
12989: LD_VAR 0 1
12993: PPUSH
12994: CALL_OW 257
12998: PUSH
12999: LD_INT 1
13001: PUSH
13002: LD_INT 2
13004: PUSH
13005: LD_INT 3
13007: PUSH
13008: LD_INT 4
13010: PUSH
13011: EMPTY
13012: LIST
13013: LIST
13014: LIST
13015: LIST
13016: IN
13017: IFFALSE 13039
// SetClass ( un , rand ( 1 , 4 ) ) ;
13019: LD_VAR 0 1
13023: PPUSH
13024: LD_INT 1
13026: PPUSH
13027: LD_INT 4
13029: PPUSH
13030: CALL_OW 12
13034: PPUSH
13035: CALL_OW 336
13039: GO 12986
13041: POP
13042: POP
// end ;
13043: PPOPN 1
13045: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
13046: LD_EXP 26
13050: PUSH
13051: LD_EXP 38
13055: AND
13056: IFFALSE 13135
13058: GO 13060
13060: DISABLE
13061: LD_INT 0
13063: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13064: LD_ADDR_VAR 0 1
13068: PUSH
13069: LD_INT 22
13071: PUSH
13072: LD_OWVAR 2
13076: PUSH
13077: EMPTY
13078: LIST
13079: LIST
13080: PUSH
13081: LD_INT 21
13083: PUSH
13084: LD_INT 3
13086: PUSH
13087: EMPTY
13088: LIST
13089: LIST
13090: PUSH
13091: EMPTY
13092: LIST
13093: LIST
13094: PPUSH
13095: CALL_OW 69
13099: ST_TO_ADDR
// if not tmp then
13100: LD_VAR 0 1
13104: NOT
13105: IFFALSE 13109
// exit ;
13107: GO 13135
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
13109: LD_VAR 0 1
13113: PUSH
13114: LD_INT 1
13116: PPUSH
13117: LD_VAR 0 1
13121: PPUSH
13122: CALL_OW 12
13126: ARRAY
13127: PPUSH
13128: LD_INT 100
13130: PPUSH
13131: CALL_OW 234
// end ;
13135: PPOPN 1
13137: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
13138: LD_EXP 26
13142: PUSH
13143: LD_EXP 40
13147: AND
13148: IFFALSE 13246
13150: GO 13152
13152: DISABLE
13153: LD_INT 0
13155: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13156: LD_ADDR_VAR 0 1
13160: PUSH
13161: LD_INT 22
13163: PUSH
13164: LD_OWVAR 2
13168: PUSH
13169: EMPTY
13170: LIST
13171: LIST
13172: PUSH
13173: LD_INT 21
13175: PUSH
13176: LD_INT 1
13178: PUSH
13179: EMPTY
13180: LIST
13181: LIST
13182: PUSH
13183: EMPTY
13184: LIST
13185: LIST
13186: PPUSH
13187: CALL_OW 69
13191: ST_TO_ADDR
// if not tmp then
13192: LD_VAR 0 1
13196: NOT
13197: IFFALSE 13201
// exit ;
13199: GO 13246
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
13201: LD_VAR 0 1
13205: PUSH
13206: LD_INT 1
13208: PPUSH
13209: LD_VAR 0 1
13213: PPUSH
13214: CALL_OW 12
13218: ARRAY
13219: PPUSH
13220: LD_INT 1
13222: PPUSH
13223: LD_INT 4
13225: PPUSH
13226: CALL_OW 12
13230: PPUSH
13231: LD_INT 3000
13233: PPUSH
13234: LD_INT 9000
13236: PPUSH
13237: CALL_OW 12
13241: PPUSH
13242: CALL_OW 492
// end ;
13246: PPOPN 1
13248: END
// every 0 0$1 trigger StreamModeActive and sDepot do
13249: LD_EXP 26
13253: PUSH
13254: LD_EXP 41
13258: AND
13259: IFFALSE 13279
13261: GO 13263
13263: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
13264: LD_INT 1
13266: PPUSH
13267: LD_OWVAR 2
13271: PPUSH
13272: LD_INT 0
13274: PPUSH
13275: CALL_OW 324
13279: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
13280: LD_EXP 26
13284: PUSH
13285: LD_EXP 42
13289: AND
13290: IFFALSE 13373
13292: GO 13294
13294: DISABLE
13295: LD_INT 0
13297: PPUSH
13298: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13299: LD_ADDR_VAR 0 2
13303: PUSH
13304: LD_INT 22
13306: PUSH
13307: LD_OWVAR 2
13311: PUSH
13312: EMPTY
13313: LIST
13314: LIST
13315: PUSH
13316: LD_INT 21
13318: PUSH
13319: LD_INT 3
13321: PUSH
13322: EMPTY
13323: LIST
13324: LIST
13325: PUSH
13326: EMPTY
13327: LIST
13328: LIST
13329: PPUSH
13330: CALL_OW 69
13334: ST_TO_ADDR
// if not tmp then
13335: LD_VAR 0 2
13339: NOT
13340: IFFALSE 13344
// exit ;
13342: GO 13373
// for i in tmp do
13344: LD_ADDR_VAR 0 1
13348: PUSH
13349: LD_VAR 0 2
13353: PUSH
13354: FOR_IN
13355: IFFALSE 13371
// SetBLevel ( i , 10 ) ;
13357: LD_VAR 0 1
13361: PPUSH
13362: LD_INT 10
13364: PPUSH
13365: CALL_OW 241
13369: GO 13354
13371: POP
13372: POP
// end ;
13373: PPOPN 2
13375: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
13376: LD_EXP 26
13380: PUSH
13381: LD_EXP 43
13385: AND
13386: IFFALSE 13497
13388: GO 13390
13390: DISABLE
13391: LD_INT 0
13393: PPUSH
13394: PPUSH
13395: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13396: LD_ADDR_VAR 0 3
13400: PUSH
13401: LD_INT 22
13403: PUSH
13404: LD_OWVAR 2
13408: PUSH
13409: EMPTY
13410: LIST
13411: LIST
13412: PUSH
13413: LD_INT 25
13415: PUSH
13416: LD_INT 1
13418: PUSH
13419: EMPTY
13420: LIST
13421: LIST
13422: PUSH
13423: EMPTY
13424: LIST
13425: LIST
13426: PPUSH
13427: CALL_OW 69
13431: ST_TO_ADDR
// if not tmp then
13432: LD_VAR 0 3
13436: NOT
13437: IFFALSE 13441
// exit ;
13439: GO 13497
// un := tmp [ rand ( 1 , tmp ) ] ;
13441: LD_ADDR_VAR 0 2
13445: PUSH
13446: LD_VAR 0 3
13450: PUSH
13451: LD_INT 1
13453: PPUSH
13454: LD_VAR 0 3
13458: PPUSH
13459: CALL_OW 12
13463: ARRAY
13464: ST_TO_ADDR
// if Crawls ( un ) then
13465: LD_VAR 0 2
13469: PPUSH
13470: CALL_OW 318
13474: IFFALSE 13485
// ComWalk ( un ) ;
13476: LD_VAR 0 2
13480: PPUSH
13481: CALL_OW 138
// SetClass ( un , class_sniper ) ;
13485: LD_VAR 0 2
13489: PPUSH
13490: LD_INT 5
13492: PPUSH
13493: CALL_OW 336
// end ;
13497: PPOPN 3
13499: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
13500: LD_EXP 26
13504: PUSH
13505: LD_EXP 44
13509: AND
13510: PUSH
13511: LD_OWVAR 67
13515: PUSH
13516: LD_INT 4
13518: LESS
13519: AND
13520: IFFALSE 13539
13522: GO 13524
13524: DISABLE
// begin Difficulty := Difficulty + 1 ;
13525: LD_ADDR_OWVAR 67
13529: PUSH
13530: LD_OWVAR 67
13534: PUSH
13535: LD_INT 1
13537: PLUS
13538: ST_TO_ADDR
// end ;
13539: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
13540: LD_EXP 26
13544: PUSH
13545: LD_EXP 45
13549: AND
13550: IFFALSE 13653
13552: GO 13554
13554: DISABLE
13555: LD_INT 0
13557: PPUSH
// begin for i := 1 to 5 do
13558: LD_ADDR_VAR 0 1
13562: PUSH
13563: DOUBLE
13564: LD_INT 1
13566: DEC
13567: ST_TO_ADDR
13568: LD_INT 5
13570: PUSH
13571: FOR_TO
13572: IFFALSE 13651
// begin uc_nation := nation_nature ;
13574: LD_ADDR_OWVAR 21
13578: PUSH
13579: LD_INT 0
13581: ST_TO_ADDR
// uc_side := 0 ;
13582: LD_ADDR_OWVAR 20
13586: PUSH
13587: LD_INT 0
13589: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13590: LD_ADDR_OWVAR 29
13594: PUSH
13595: LD_INT 12
13597: PUSH
13598: LD_INT 12
13600: PUSH
13601: EMPTY
13602: LIST
13603: LIST
13604: ST_TO_ADDR
// hc_agressivity := 20 ;
13605: LD_ADDR_OWVAR 35
13609: PUSH
13610: LD_INT 20
13612: ST_TO_ADDR
// hc_class := class_tiger ;
13613: LD_ADDR_OWVAR 28
13617: PUSH
13618: LD_INT 14
13620: ST_TO_ADDR
// hc_gallery :=  ;
13621: LD_ADDR_OWVAR 33
13625: PUSH
13626: LD_STRING 
13628: ST_TO_ADDR
// hc_name :=  ;
13629: LD_ADDR_OWVAR 26
13633: PUSH
13634: LD_STRING 
13636: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
13637: CALL_OW 44
13641: PPUSH
13642: LD_INT 0
13644: PPUSH
13645: CALL_OW 51
// end ;
13649: GO 13571
13651: POP
13652: POP
// end ;
13653: PPOPN 1
13655: END
// every 0 0$1 trigger StreamModeActive and sBomb do
13656: LD_EXP 26
13660: PUSH
13661: LD_EXP 46
13665: AND
13666: IFFALSE 13675
13668: GO 13670
13670: DISABLE
// StreamSibBomb ;
13671: CALL 13676 0 0
13675: END
// export function StreamSibBomb ; var i , x , y ; begin
13676: LD_INT 0
13678: PPUSH
13679: PPUSH
13680: PPUSH
13681: PPUSH
// result := false ;
13682: LD_ADDR_VAR 0 1
13686: PUSH
13687: LD_INT 0
13689: ST_TO_ADDR
// for i := 1 to 16 do
13690: LD_ADDR_VAR 0 2
13694: PUSH
13695: DOUBLE
13696: LD_INT 1
13698: DEC
13699: ST_TO_ADDR
13700: LD_INT 16
13702: PUSH
13703: FOR_TO
13704: IFFALSE 13903
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13706: LD_ADDR_VAR 0 3
13710: PUSH
13711: LD_INT 10
13713: PUSH
13714: LD_INT 20
13716: PUSH
13717: LD_INT 30
13719: PUSH
13720: LD_INT 40
13722: PUSH
13723: LD_INT 50
13725: PUSH
13726: LD_INT 60
13728: PUSH
13729: LD_INT 70
13731: PUSH
13732: LD_INT 80
13734: PUSH
13735: LD_INT 90
13737: PUSH
13738: LD_INT 100
13740: PUSH
13741: LD_INT 110
13743: PUSH
13744: LD_INT 120
13746: PUSH
13747: LD_INT 130
13749: PUSH
13750: LD_INT 140
13752: PUSH
13753: LD_INT 150
13755: PUSH
13756: EMPTY
13757: LIST
13758: LIST
13759: LIST
13760: LIST
13761: LIST
13762: LIST
13763: LIST
13764: LIST
13765: LIST
13766: LIST
13767: LIST
13768: LIST
13769: LIST
13770: LIST
13771: LIST
13772: PUSH
13773: LD_INT 1
13775: PPUSH
13776: LD_INT 15
13778: PPUSH
13779: CALL_OW 12
13783: ARRAY
13784: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13785: LD_ADDR_VAR 0 4
13789: PUSH
13790: LD_INT 10
13792: PUSH
13793: LD_INT 20
13795: PUSH
13796: LD_INT 30
13798: PUSH
13799: LD_INT 40
13801: PUSH
13802: LD_INT 50
13804: PUSH
13805: LD_INT 60
13807: PUSH
13808: LD_INT 70
13810: PUSH
13811: LD_INT 80
13813: PUSH
13814: LD_INT 90
13816: PUSH
13817: LD_INT 100
13819: PUSH
13820: LD_INT 110
13822: PUSH
13823: LD_INT 120
13825: PUSH
13826: LD_INT 130
13828: PUSH
13829: LD_INT 140
13831: PUSH
13832: LD_INT 150
13834: PUSH
13835: EMPTY
13836: LIST
13837: LIST
13838: LIST
13839: LIST
13840: LIST
13841: LIST
13842: LIST
13843: LIST
13844: LIST
13845: LIST
13846: LIST
13847: LIST
13848: LIST
13849: LIST
13850: LIST
13851: PUSH
13852: LD_INT 1
13854: PPUSH
13855: LD_INT 15
13857: PPUSH
13858: CALL_OW 12
13862: ARRAY
13863: ST_TO_ADDR
// if ValidHex ( x , y ) then
13864: LD_VAR 0 3
13868: PPUSH
13869: LD_VAR 0 4
13873: PPUSH
13874: CALL_OW 488
13878: IFFALSE 13901
// begin result := [ x , y ] ;
13880: LD_ADDR_VAR 0 1
13884: PUSH
13885: LD_VAR 0 3
13889: PUSH
13890: LD_VAR 0 4
13894: PUSH
13895: EMPTY
13896: LIST
13897: LIST
13898: ST_TO_ADDR
// break ;
13899: GO 13903
// end ; end ;
13901: GO 13703
13903: POP
13904: POP
// if result then
13905: LD_VAR 0 1
13909: IFFALSE 13969
// begin ToLua ( playSibBomb() ) ;
13911: LD_STRING playSibBomb()
13913: PPUSH
13914: CALL_OW 559
// wait ( 0 0$14 ) ;
13918: LD_INT 490
13920: PPUSH
13921: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
13925: LD_VAR 0 1
13929: PUSH
13930: LD_INT 1
13932: ARRAY
13933: PPUSH
13934: LD_VAR 0 1
13938: PUSH
13939: LD_INT 2
13941: ARRAY
13942: PPUSH
13943: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
13947: LD_VAR 0 1
13951: PUSH
13952: LD_INT 1
13954: ARRAY
13955: PPUSH
13956: LD_VAR 0 1
13960: PUSH
13961: LD_INT 2
13963: ARRAY
13964: PPUSH
13965: CALL_OW 429
// end ; end ;
13969: LD_VAR 0 1
13973: RET
// every 0 0$1 trigger StreamModeActive and sReset do
13974: LD_EXP 26
13978: PUSH
13979: LD_EXP 48
13983: AND
13984: IFFALSE 13996
13986: GO 13988
13988: DISABLE
// YouLost (  ) ;
13989: LD_STRING 
13991: PPUSH
13992: CALL_OW 104
13996: END
// every 0 0$1 trigger StreamModeActive and sFog do
13997: LD_EXP 26
14001: PUSH
14002: LD_EXP 47
14006: AND
14007: IFFALSE 14021
14009: GO 14011
14011: DISABLE
// FogOff ( your_side ) ;
14012: LD_OWVAR 2
14016: PPUSH
14017: CALL_OW 344
14021: END
// every 0 0$1 trigger StreamModeActive and sSun do
14022: LD_EXP 26
14026: PUSH
14027: LD_EXP 49
14031: AND
14032: IFFALSE 14060
14034: GO 14036
14036: DISABLE
// begin solar_recharge_percent := 0 ;
14037: LD_ADDR_OWVAR 79
14041: PUSH
14042: LD_INT 0
14044: ST_TO_ADDR
// wait ( 5 5$00 ) ;
14045: LD_INT 10500
14047: PPUSH
14048: CALL_OW 67
// solar_recharge_percent := 100 ;
14052: LD_ADDR_OWVAR 79
14056: PUSH
14057: LD_INT 100
14059: ST_TO_ADDR
// end ;
14060: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
14061: LD_EXP 26
14065: PUSH
14066: LD_EXP 50
14070: AND
14071: IFFALSE 14310
14073: GO 14075
14075: DISABLE
14076: LD_INT 0
14078: PPUSH
14079: PPUSH
14080: PPUSH
// begin tmp := [ ] ;
14081: LD_ADDR_VAR 0 3
14085: PUSH
14086: EMPTY
14087: ST_TO_ADDR
// for i := 1 to 6 do
14088: LD_ADDR_VAR 0 1
14092: PUSH
14093: DOUBLE
14094: LD_INT 1
14096: DEC
14097: ST_TO_ADDR
14098: LD_INT 6
14100: PUSH
14101: FOR_TO
14102: IFFALSE 14207
// begin uc_nation := nation_nature ;
14104: LD_ADDR_OWVAR 21
14108: PUSH
14109: LD_INT 0
14111: ST_TO_ADDR
// uc_side := 0 ;
14112: LD_ADDR_OWVAR 20
14116: PUSH
14117: LD_INT 0
14119: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14120: LD_ADDR_OWVAR 29
14124: PUSH
14125: LD_INT 12
14127: PUSH
14128: LD_INT 12
14130: PUSH
14131: EMPTY
14132: LIST
14133: LIST
14134: ST_TO_ADDR
// hc_agressivity := 20 ;
14135: LD_ADDR_OWVAR 35
14139: PUSH
14140: LD_INT 20
14142: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
14143: LD_ADDR_OWVAR 28
14147: PUSH
14148: LD_INT 17
14150: ST_TO_ADDR
// hc_gallery :=  ;
14151: LD_ADDR_OWVAR 33
14155: PUSH
14156: LD_STRING 
14158: ST_TO_ADDR
// hc_name :=  ;
14159: LD_ADDR_OWVAR 26
14163: PUSH
14164: LD_STRING 
14166: ST_TO_ADDR
// un := CreateHuman ;
14167: LD_ADDR_VAR 0 2
14171: PUSH
14172: CALL_OW 44
14176: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
14177: LD_VAR 0 2
14181: PPUSH
14182: LD_INT 1
14184: PPUSH
14185: CALL_OW 51
// tmp := tmp ^ un ;
14189: LD_ADDR_VAR 0 3
14193: PUSH
14194: LD_VAR 0 3
14198: PUSH
14199: LD_VAR 0 2
14203: ADD
14204: ST_TO_ADDR
// end ;
14205: GO 14101
14207: POP
14208: POP
// repeat wait ( 0 0$1 ) ;
14209: LD_INT 35
14211: PPUSH
14212: CALL_OW 67
// for un in tmp do
14216: LD_ADDR_VAR 0 2
14220: PUSH
14221: LD_VAR 0 3
14225: PUSH
14226: FOR_IN
14227: IFFALSE 14301
// begin if IsDead ( un ) then
14229: LD_VAR 0 2
14233: PPUSH
14234: CALL_OW 301
14238: IFFALSE 14258
// begin tmp := tmp diff un ;
14240: LD_ADDR_VAR 0 3
14244: PUSH
14245: LD_VAR 0 3
14249: PUSH
14250: LD_VAR 0 2
14254: DIFF
14255: ST_TO_ADDR
// continue ;
14256: GO 14226
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
14258: LD_VAR 0 2
14262: PPUSH
14263: LD_INT 3
14265: PUSH
14266: LD_INT 22
14268: PUSH
14269: LD_INT 0
14271: PUSH
14272: EMPTY
14273: LIST
14274: LIST
14275: PUSH
14276: EMPTY
14277: LIST
14278: LIST
14279: PPUSH
14280: CALL_OW 69
14284: PPUSH
14285: LD_VAR 0 2
14289: PPUSH
14290: CALL_OW 74
14294: PPUSH
14295: CALL_OW 115
// end ;
14299: GO 14226
14301: POP
14302: POP
// until not tmp ;
14303: LD_VAR 0 3
14307: NOT
14308: IFFALSE 14209
// end ;
14310: PPOPN 3
14312: END
// every 0 0$1 trigger StreamModeActive and sTroll do
14313: LD_EXP 26
14317: PUSH
14318: LD_EXP 51
14322: AND
14323: IFFALSE 14377
14325: GO 14327
14327: DISABLE
// begin ToLua ( displayTroll(); ) ;
14328: LD_STRING displayTroll();
14330: PPUSH
14331: CALL_OW 559
// wait ( 3 3$00 ) ;
14335: LD_INT 6300
14337: PPUSH
14338: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14342: LD_STRING hideTroll();
14344: PPUSH
14345: CALL_OW 559
// wait ( 1 1$00 ) ;
14349: LD_INT 2100
14351: PPUSH
14352: CALL_OW 67
// ToLua ( displayTroll(); ) ;
14356: LD_STRING displayTroll();
14358: PPUSH
14359: CALL_OW 559
// wait ( 1 1$00 ) ;
14363: LD_INT 2100
14365: PPUSH
14366: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14370: LD_STRING hideTroll();
14372: PPUSH
14373: CALL_OW 559
// end ;
14377: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
14378: LD_EXP 26
14382: PUSH
14383: LD_EXP 52
14387: AND
14388: IFFALSE 14451
14390: GO 14392
14392: DISABLE
14393: LD_INT 0
14395: PPUSH
// begin p := 0 ;
14396: LD_ADDR_VAR 0 1
14400: PUSH
14401: LD_INT 0
14403: ST_TO_ADDR
// repeat game_speed := 1 ;
14404: LD_ADDR_OWVAR 65
14408: PUSH
14409: LD_INT 1
14411: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14412: LD_INT 35
14414: PPUSH
14415: CALL_OW 67
// p := p + 1 ;
14419: LD_ADDR_VAR 0 1
14423: PUSH
14424: LD_VAR 0 1
14428: PUSH
14429: LD_INT 1
14431: PLUS
14432: ST_TO_ADDR
// until p >= 60 ;
14433: LD_VAR 0 1
14437: PUSH
14438: LD_INT 60
14440: GREATEREQUAL
14441: IFFALSE 14404
// game_speed := 4 ;
14443: LD_ADDR_OWVAR 65
14447: PUSH
14448: LD_INT 4
14450: ST_TO_ADDR
// end ;
14451: PPOPN 1
14453: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
14454: LD_EXP 26
14458: PUSH
14459: LD_EXP 53
14463: AND
14464: IFFALSE 14610
14466: GO 14468
14468: DISABLE
14469: LD_INT 0
14471: PPUSH
14472: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14473: LD_ADDR_VAR 0 1
14477: PUSH
14478: LD_INT 22
14480: PUSH
14481: LD_OWVAR 2
14485: PUSH
14486: EMPTY
14487: LIST
14488: LIST
14489: PUSH
14490: LD_INT 2
14492: PUSH
14493: LD_INT 30
14495: PUSH
14496: LD_INT 0
14498: PUSH
14499: EMPTY
14500: LIST
14501: LIST
14502: PUSH
14503: LD_INT 30
14505: PUSH
14506: LD_INT 1
14508: PUSH
14509: EMPTY
14510: LIST
14511: LIST
14512: PUSH
14513: EMPTY
14514: LIST
14515: LIST
14516: LIST
14517: PUSH
14518: EMPTY
14519: LIST
14520: LIST
14521: PPUSH
14522: CALL_OW 69
14526: ST_TO_ADDR
// if not depot then
14527: LD_VAR 0 1
14531: NOT
14532: IFFALSE 14536
// exit ;
14534: GO 14610
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
14536: LD_ADDR_VAR 0 2
14540: PUSH
14541: LD_VAR 0 1
14545: PUSH
14546: LD_INT 1
14548: PPUSH
14549: LD_VAR 0 1
14553: PPUSH
14554: CALL_OW 12
14558: ARRAY
14559: PPUSH
14560: CALL_OW 274
14564: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
14565: LD_VAR 0 2
14569: PPUSH
14570: LD_INT 1
14572: PPUSH
14573: LD_INT 0
14575: PPUSH
14576: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
14580: LD_VAR 0 2
14584: PPUSH
14585: LD_INT 2
14587: PPUSH
14588: LD_INT 0
14590: PPUSH
14591: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
14595: LD_VAR 0 2
14599: PPUSH
14600: LD_INT 3
14602: PPUSH
14603: LD_INT 0
14605: PPUSH
14606: CALL_OW 277
// end ;
14610: PPOPN 2
14612: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
14613: LD_EXP 26
14617: PUSH
14618: LD_EXP 54
14622: AND
14623: IFFALSE 14720
14625: GO 14627
14627: DISABLE
14628: LD_INT 0
14630: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14631: LD_ADDR_VAR 0 1
14635: PUSH
14636: LD_INT 22
14638: PUSH
14639: LD_OWVAR 2
14643: PUSH
14644: EMPTY
14645: LIST
14646: LIST
14647: PUSH
14648: LD_INT 21
14650: PUSH
14651: LD_INT 1
14653: PUSH
14654: EMPTY
14655: LIST
14656: LIST
14657: PUSH
14658: LD_INT 3
14660: PUSH
14661: LD_INT 23
14663: PUSH
14664: LD_INT 0
14666: PUSH
14667: EMPTY
14668: LIST
14669: LIST
14670: PUSH
14671: EMPTY
14672: LIST
14673: LIST
14674: PUSH
14675: EMPTY
14676: LIST
14677: LIST
14678: LIST
14679: PPUSH
14680: CALL_OW 69
14684: ST_TO_ADDR
// if not tmp then
14685: LD_VAR 0 1
14689: NOT
14690: IFFALSE 14694
// exit ;
14692: GO 14720
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
14694: LD_VAR 0 1
14698: PUSH
14699: LD_INT 1
14701: PPUSH
14702: LD_VAR 0 1
14706: PPUSH
14707: CALL_OW 12
14711: ARRAY
14712: PPUSH
14713: LD_INT 200
14715: PPUSH
14716: CALL_OW 234
// end ;
14720: PPOPN 1
14722: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
14723: LD_EXP 26
14727: PUSH
14728: LD_EXP 55
14732: AND
14733: IFFALSE 14812
14735: GO 14737
14737: DISABLE
14738: LD_INT 0
14740: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
14741: LD_ADDR_VAR 0 1
14745: PUSH
14746: LD_INT 22
14748: PUSH
14749: LD_OWVAR 2
14753: PUSH
14754: EMPTY
14755: LIST
14756: LIST
14757: PUSH
14758: LD_INT 21
14760: PUSH
14761: LD_INT 2
14763: PUSH
14764: EMPTY
14765: LIST
14766: LIST
14767: PUSH
14768: EMPTY
14769: LIST
14770: LIST
14771: PPUSH
14772: CALL_OW 69
14776: ST_TO_ADDR
// if not tmp then
14777: LD_VAR 0 1
14781: NOT
14782: IFFALSE 14786
// exit ;
14784: GO 14812
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
14786: LD_VAR 0 1
14790: PUSH
14791: LD_INT 1
14793: PPUSH
14794: LD_VAR 0 1
14798: PPUSH
14799: CALL_OW 12
14803: ARRAY
14804: PPUSH
14805: LD_INT 60
14807: PPUSH
14808: CALL_OW 234
// end ;
14812: PPOPN 1
14814: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
14815: LD_EXP 26
14819: PUSH
14820: LD_EXP 56
14824: AND
14825: IFFALSE 14924
14827: GO 14829
14829: DISABLE
14830: LD_INT 0
14832: PPUSH
14833: PPUSH
// begin enable ;
14834: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
14835: LD_ADDR_VAR 0 1
14839: PUSH
14840: LD_INT 22
14842: PUSH
14843: LD_OWVAR 2
14847: PUSH
14848: EMPTY
14849: LIST
14850: LIST
14851: PUSH
14852: LD_INT 61
14854: PUSH
14855: EMPTY
14856: LIST
14857: PUSH
14858: LD_INT 33
14860: PUSH
14861: LD_INT 2
14863: PUSH
14864: EMPTY
14865: LIST
14866: LIST
14867: PUSH
14868: EMPTY
14869: LIST
14870: LIST
14871: LIST
14872: PPUSH
14873: CALL_OW 69
14877: ST_TO_ADDR
// if not tmp then
14878: LD_VAR 0 1
14882: NOT
14883: IFFALSE 14887
// exit ;
14885: GO 14924
// for i in tmp do
14887: LD_ADDR_VAR 0 2
14891: PUSH
14892: LD_VAR 0 1
14896: PUSH
14897: FOR_IN
14898: IFFALSE 14922
// if IsControledBy ( i ) then
14900: LD_VAR 0 2
14904: PPUSH
14905: CALL_OW 312
14909: IFFALSE 14920
// ComUnlink ( i ) ;
14911: LD_VAR 0 2
14915: PPUSH
14916: CALL_OW 136
14920: GO 14897
14922: POP
14923: POP
// end ;
14924: PPOPN 2
14926: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
14927: LD_EXP 26
14931: PUSH
14932: LD_EXP 57
14936: AND
14937: IFFALSE 15077
14939: GO 14941
14941: DISABLE
14942: LD_INT 0
14944: PPUSH
14945: PPUSH
// begin ToLua ( displayPowell(); ) ;
14946: LD_STRING displayPowell();
14948: PPUSH
14949: CALL_OW 559
// uc_side := 0 ;
14953: LD_ADDR_OWVAR 20
14957: PUSH
14958: LD_INT 0
14960: ST_TO_ADDR
// uc_nation := 2 ;
14961: LD_ADDR_OWVAR 21
14965: PUSH
14966: LD_INT 2
14968: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
14969: LD_ADDR_OWVAR 37
14973: PUSH
14974: LD_INT 14
14976: ST_TO_ADDR
// vc_engine := engine_siberite ;
14977: LD_ADDR_OWVAR 39
14981: PUSH
14982: LD_INT 3
14984: ST_TO_ADDR
// vc_control := control_apeman ;
14985: LD_ADDR_OWVAR 38
14989: PUSH
14990: LD_INT 5
14992: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
14993: LD_ADDR_OWVAR 40
14997: PUSH
14998: LD_INT 29
15000: ST_TO_ADDR
// un := CreateVehicle ;
15001: LD_ADDR_VAR 0 2
15005: PUSH
15006: CALL_OW 45
15010: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15011: LD_VAR 0 2
15015: PPUSH
15016: LD_INT 1
15018: PPUSH
15019: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15023: LD_INT 35
15025: PPUSH
15026: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15030: LD_VAR 0 2
15034: PPUSH
15035: LD_INT 22
15037: PUSH
15038: LD_OWVAR 2
15042: PUSH
15043: EMPTY
15044: LIST
15045: LIST
15046: PPUSH
15047: CALL_OW 69
15051: PPUSH
15052: LD_VAR 0 2
15056: PPUSH
15057: CALL_OW 74
15061: PPUSH
15062: CALL_OW 115
// until IsDead ( un ) ;
15066: LD_VAR 0 2
15070: PPUSH
15071: CALL_OW 301
15075: IFFALSE 15023
// end ;
15077: PPOPN 2
15079: END
// every 0 0$1 trigger StreamModeActive and sStu do
15080: LD_EXP 26
15084: PUSH
15085: LD_EXP 65
15089: AND
15090: IFFALSE 15106
15092: GO 15094
15094: DISABLE
// begin ToLua ( displayStucuk(); ) ;
15095: LD_STRING displayStucuk();
15097: PPUSH
15098: CALL_OW 559
// ResetFog ;
15102: CALL_OW 335
// end ;
15106: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
15107: LD_EXP 26
15111: PUSH
15112: LD_EXP 58
15116: AND
15117: IFFALSE 15258
15119: GO 15121
15121: DISABLE
15122: LD_INT 0
15124: PPUSH
15125: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15126: LD_ADDR_VAR 0 2
15130: PUSH
15131: LD_INT 22
15133: PUSH
15134: LD_OWVAR 2
15138: PUSH
15139: EMPTY
15140: LIST
15141: LIST
15142: PUSH
15143: LD_INT 21
15145: PUSH
15146: LD_INT 1
15148: PUSH
15149: EMPTY
15150: LIST
15151: LIST
15152: PUSH
15153: EMPTY
15154: LIST
15155: LIST
15156: PPUSH
15157: CALL_OW 69
15161: ST_TO_ADDR
// if not tmp then
15162: LD_VAR 0 2
15166: NOT
15167: IFFALSE 15171
// exit ;
15169: GO 15258
// un := tmp [ rand ( 1 , tmp ) ] ;
15171: LD_ADDR_VAR 0 1
15175: PUSH
15176: LD_VAR 0 2
15180: PUSH
15181: LD_INT 1
15183: PPUSH
15184: LD_VAR 0 2
15188: PPUSH
15189: CALL_OW 12
15193: ARRAY
15194: ST_TO_ADDR
// SetSide ( un , 0 ) ;
15195: LD_VAR 0 1
15199: PPUSH
15200: LD_INT 0
15202: PPUSH
15203: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
15207: LD_VAR 0 1
15211: PPUSH
15212: LD_OWVAR 3
15216: PUSH
15217: LD_VAR 0 1
15221: DIFF
15222: PPUSH
15223: LD_VAR 0 1
15227: PPUSH
15228: CALL_OW 74
15232: PPUSH
15233: CALL_OW 115
// wait ( 0 0$20 ) ;
15237: LD_INT 700
15239: PPUSH
15240: CALL_OW 67
// SetSide ( un , your_side ) ;
15244: LD_VAR 0 1
15248: PPUSH
15249: LD_OWVAR 2
15253: PPUSH
15254: CALL_OW 235
// end ;
15258: PPOPN 2
15260: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
15261: LD_EXP 26
15265: PUSH
15266: LD_EXP 59
15270: AND
15271: IFFALSE 15377
15273: GO 15275
15275: DISABLE
15276: LD_INT 0
15278: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15279: LD_ADDR_VAR 0 1
15283: PUSH
15284: LD_INT 22
15286: PUSH
15287: LD_OWVAR 2
15291: PUSH
15292: EMPTY
15293: LIST
15294: LIST
15295: PUSH
15296: LD_INT 2
15298: PUSH
15299: LD_INT 30
15301: PUSH
15302: LD_INT 0
15304: PUSH
15305: EMPTY
15306: LIST
15307: LIST
15308: PUSH
15309: LD_INT 30
15311: PUSH
15312: LD_INT 1
15314: PUSH
15315: EMPTY
15316: LIST
15317: LIST
15318: PUSH
15319: EMPTY
15320: LIST
15321: LIST
15322: LIST
15323: PUSH
15324: EMPTY
15325: LIST
15326: LIST
15327: PPUSH
15328: CALL_OW 69
15332: ST_TO_ADDR
// if not depot then
15333: LD_VAR 0 1
15337: NOT
15338: IFFALSE 15342
// exit ;
15340: GO 15377
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
15342: LD_VAR 0 1
15346: PUSH
15347: LD_INT 1
15349: ARRAY
15350: PPUSH
15351: CALL_OW 250
15355: PPUSH
15356: LD_VAR 0 1
15360: PUSH
15361: LD_INT 1
15363: ARRAY
15364: PPUSH
15365: CALL_OW 251
15369: PPUSH
15370: LD_INT 70
15372: PPUSH
15373: CALL_OW 495
// end ;
15377: PPOPN 1
15379: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
15380: LD_EXP 26
15384: PUSH
15385: LD_EXP 60
15389: AND
15390: IFFALSE 15601
15392: GO 15394
15394: DISABLE
15395: LD_INT 0
15397: PPUSH
15398: PPUSH
15399: PPUSH
15400: PPUSH
15401: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15402: LD_ADDR_VAR 0 5
15406: PUSH
15407: LD_INT 22
15409: PUSH
15410: LD_OWVAR 2
15414: PUSH
15415: EMPTY
15416: LIST
15417: LIST
15418: PUSH
15419: LD_INT 21
15421: PUSH
15422: LD_INT 1
15424: PUSH
15425: EMPTY
15426: LIST
15427: LIST
15428: PUSH
15429: EMPTY
15430: LIST
15431: LIST
15432: PPUSH
15433: CALL_OW 69
15437: ST_TO_ADDR
// if not tmp then
15438: LD_VAR 0 5
15442: NOT
15443: IFFALSE 15447
// exit ;
15445: GO 15601
// for i in tmp do
15447: LD_ADDR_VAR 0 1
15451: PUSH
15452: LD_VAR 0 5
15456: PUSH
15457: FOR_IN
15458: IFFALSE 15599
// begin d := rand ( 0 , 5 ) ;
15460: LD_ADDR_VAR 0 4
15464: PUSH
15465: LD_INT 0
15467: PPUSH
15468: LD_INT 5
15470: PPUSH
15471: CALL_OW 12
15475: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
15476: LD_ADDR_VAR 0 2
15480: PUSH
15481: LD_VAR 0 1
15485: PPUSH
15486: CALL_OW 250
15490: PPUSH
15491: LD_VAR 0 4
15495: PPUSH
15496: LD_INT 3
15498: PPUSH
15499: LD_INT 12
15501: PPUSH
15502: CALL_OW 12
15506: PPUSH
15507: CALL_OW 272
15511: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
15512: LD_ADDR_VAR 0 3
15516: PUSH
15517: LD_VAR 0 1
15521: PPUSH
15522: CALL_OW 251
15526: PPUSH
15527: LD_VAR 0 4
15531: PPUSH
15532: LD_INT 3
15534: PPUSH
15535: LD_INT 12
15537: PPUSH
15538: CALL_OW 12
15542: PPUSH
15543: CALL_OW 273
15547: ST_TO_ADDR
// if ValidHex ( x , y ) then
15548: LD_VAR 0 2
15552: PPUSH
15553: LD_VAR 0 3
15557: PPUSH
15558: CALL_OW 488
15562: IFFALSE 15597
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
15564: LD_VAR 0 1
15568: PPUSH
15569: LD_VAR 0 2
15573: PPUSH
15574: LD_VAR 0 3
15578: PPUSH
15579: LD_INT 3
15581: PPUSH
15582: LD_INT 6
15584: PPUSH
15585: CALL_OW 12
15589: PPUSH
15590: LD_INT 1
15592: PPUSH
15593: CALL_OW 483
// end ;
15597: GO 15457
15599: POP
15600: POP
// end ;
15601: PPOPN 5
15603: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
15604: LD_EXP 26
15608: PUSH
15609: LD_EXP 61
15613: AND
15614: IFFALSE 15708
15616: GO 15618
15618: DISABLE
15619: LD_INT 0
15621: PPUSH
15622: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
15623: LD_ADDR_VAR 0 2
15627: PUSH
15628: LD_INT 22
15630: PUSH
15631: LD_OWVAR 2
15635: PUSH
15636: EMPTY
15637: LIST
15638: LIST
15639: PUSH
15640: LD_INT 32
15642: PUSH
15643: LD_INT 1
15645: PUSH
15646: EMPTY
15647: LIST
15648: LIST
15649: PUSH
15650: LD_INT 21
15652: PUSH
15653: LD_INT 2
15655: PUSH
15656: EMPTY
15657: LIST
15658: LIST
15659: PUSH
15660: EMPTY
15661: LIST
15662: LIST
15663: LIST
15664: PPUSH
15665: CALL_OW 69
15669: ST_TO_ADDR
// if not tmp then
15670: LD_VAR 0 2
15674: NOT
15675: IFFALSE 15679
// exit ;
15677: GO 15708
// for i in tmp do
15679: LD_ADDR_VAR 0 1
15683: PUSH
15684: LD_VAR 0 2
15688: PUSH
15689: FOR_IN
15690: IFFALSE 15706
// SetFuel ( i , 0 ) ;
15692: LD_VAR 0 1
15696: PPUSH
15697: LD_INT 0
15699: PPUSH
15700: CALL_OW 240
15704: GO 15689
15706: POP
15707: POP
// end ;
15708: PPOPN 2
15710: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
15711: LD_EXP 26
15715: PUSH
15716: LD_EXP 62
15720: AND
15721: IFFALSE 15787
15723: GO 15725
15725: DISABLE
15726: LD_INT 0
15728: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15729: LD_ADDR_VAR 0 1
15733: PUSH
15734: LD_INT 22
15736: PUSH
15737: LD_OWVAR 2
15741: PUSH
15742: EMPTY
15743: LIST
15744: LIST
15745: PUSH
15746: LD_INT 30
15748: PUSH
15749: LD_INT 29
15751: PUSH
15752: EMPTY
15753: LIST
15754: LIST
15755: PUSH
15756: EMPTY
15757: LIST
15758: LIST
15759: PPUSH
15760: CALL_OW 69
15764: ST_TO_ADDR
// if not tmp then
15765: LD_VAR 0 1
15769: NOT
15770: IFFALSE 15774
// exit ;
15772: GO 15787
// DestroyUnit ( tmp [ 1 ] ) ;
15774: LD_VAR 0 1
15778: PUSH
15779: LD_INT 1
15781: ARRAY
15782: PPUSH
15783: CALL_OW 65
// end ;
15787: PPOPN 1
15789: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
15790: LD_EXP 26
15794: PUSH
15795: LD_EXP 64
15799: AND
15800: IFFALSE 15929
15802: GO 15804
15804: DISABLE
15805: LD_INT 0
15807: PPUSH
// begin uc_side := 0 ;
15808: LD_ADDR_OWVAR 20
15812: PUSH
15813: LD_INT 0
15815: ST_TO_ADDR
// uc_nation := nation_arabian ;
15816: LD_ADDR_OWVAR 21
15820: PUSH
15821: LD_INT 2
15823: ST_TO_ADDR
// hc_gallery :=  ;
15824: LD_ADDR_OWVAR 33
15828: PUSH
15829: LD_STRING 
15831: ST_TO_ADDR
// hc_name :=  ;
15832: LD_ADDR_OWVAR 26
15836: PUSH
15837: LD_STRING 
15839: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
15840: LD_INT 1
15842: PPUSH
15843: LD_INT 11
15845: PPUSH
15846: LD_INT 10
15848: PPUSH
15849: CALL_OW 380
// un := CreateHuman ;
15853: LD_ADDR_VAR 0 1
15857: PUSH
15858: CALL_OW 44
15862: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15863: LD_VAR 0 1
15867: PPUSH
15868: LD_INT 1
15870: PPUSH
15871: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15875: LD_INT 35
15877: PPUSH
15878: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15882: LD_VAR 0 1
15886: PPUSH
15887: LD_INT 22
15889: PUSH
15890: LD_OWVAR 2
15894: PUSH
15895: EMPTY
15896: LIST
15897: LIST
15898: PPUSH
15899: CALL_OW 69
15903: PPUSH
15904: LD_VAR 0 1
15908: PPUSH
15909: CALL_OW 74
15913: PPUSH
15914: CALL_OW 115
// until IsDead ( un ) ;
15918: LD_VAR 0 1
15922: PPUSH
15923: CALL_OW 301
15927: IFFALSE 15875
// end ;
15929: PPOPN 1
15931: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
15932: LD_EXP 26
15936: PUSH
15937: LD_EXP 66
15941: AND
15942: IFFALSE 15954
15944: GO 15946
15946: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
15947: LD_STRING earthquake(getX(game), 0, 32)
15949: PPUSH
15950: CALL_OW 559
15954: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
15955: LD_EXP 26
15959: PUSH
15960: LD_EXP 67
15964: AND
15965: IFFALSE 16056
15967: GO 15969
15969: DISABLE
15970: LD_INT 0
15972: PPUSH
// begin enable ;
15973: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
15974: LD_ADDR_VAR 0 1
15978: PUSH
15979: LD_INT 22
15981: PUSH
15982: LD_OWVAR 2
15986: PUSH
15987: EMPTY
15988: LIST
15989: LIST
15990: PUSH
15991: LD_INT 21
15993: PUSH
15994: LD_INT 2
15996: PUSH
15997: EMPTY
15998: LIST
15999: LIST
16000: PUSH
16001: LD_INT 33
16003: PUSH
16004: LD_INT 3
16006: PUSH
16007: EMPTY
16008: LIST
16009: LIST
16010: PUSH
16011: EMPTY
16012: LIST
16013: LIST
16014: LIST
16015: PPUSH
16016: CALL_OW 69
16020: ST_TO_ADDR
// if not tmp then
16021: LD_VAR 0 1
16025: NOT
16026: IFFALSE 16030
// exit ;
16028: GO 16056
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16030: LD_VAR 0 1
16034: PUSH
16035: LD_INT 1
16037: PPUSH
16038: LD_VAR 0 1
16042: PPUSH
16043: CALL_OW 12
16047: ARRAY
16048: PPUSH
16049: LD_INT 1
16051: PPUSH
16052: CALL_OW 234
// end ;
16056: PPOPN 1
16058: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
16059: LD_EXP 26
16063: PUSH
16064: LD_EXP 68
16068: AND
16069: IFFALSE 16210
16071: GO 16073
16073: DISABLE
16074: LD_INT 0
16076: PPUSH
16077: PPUSH
16078: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16079: LD_ADDR_VAR 0 3
16083: PUSH
16084: LD_INT 22
16086: PUSH
16087: LD_OWVAR 2
16091: PUSH
16092: EMPTY
16093: LIST
16094: LIST
16095: PUSH
16096: LD_INT 25
16098: PUSH
16099: LD_INT 1
16101: PUSH
16102: EMPTY
16103: LIST
16104: LIST
16105: PUSH
16106: EMPTY
16107: LIST
16108: LIST
16109: PPUSH
16110: CALL_OW 69
16114: ST_TO_ADDR
// if not tmp then
16115: LD_VAR 0 3
16119: NOT
16120: IFFALSE 16124
// exit ;
16122: GO 16210
// un := tmp [ rand ( 1 , tmp ) ] ;
16124: LD_ADDR_VAR 0 2
16128: PUSH
16129: LD_VAR 0 3
16133: PUSH
16134: LD_INT 1
16136: PPUSH
16137: LD_VAR 0 3
16141: PPUSH
16142: CALL_OW 12
16146: ARRAY
16147: ST_TO_ADDR
// if Crawls ( un ) then
16148: LD_VAR 0 2
16152: PPUSH
16153: CALL_OW 318
16157: IFFALSE 16168
// ComWalk ( un ) ;
16159: LD_VAR 0 2
16163: PPUSH
16164: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
16168: LD_VAR 0 2
16172: PPUSH
16173: LD_INT 9
16175: PPUSH
16176: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
16180: LD_INT 28
16182: PPUSH
16183: LD_OWVAR 2
16187: PPUSH
16188: LD_INT 2
16190: PPUSH
16191: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
16195: LD_INT 29
16197: PPUSH
16198: LD_OWVAR 2
16202: PPUSH
16203: LD_INT 2
16205: PPUSH
16206: CALL_OW 322
// end ;
16210: PPOPN 3
16212: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
16213: LD_EXP 26
16217: PUSH
16218: LD_EXP 69
16222: AND
16223: IFFALSE 16334
16225: GO 16227
16227: DISABLE
16228: LD_INT 0
16230: PPUSH
16231: PPUSH
16232: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16233: LD_ADDR_VAR 0 3
16237: PUSH
16238: LD_INT 22
16240: PUSH
16241: LD_OWVAR 2
16245: PUSH
16246: EMPTY
16247: LIST
16248: LIST
16249: PUSH
16250: LD_INT 25
16252: PUSH
16253: LD_INT 1
16255: PUSH
16256: EMPTY
16257: LIST
16258: LIST
16259: PUSH
16260: EMPTY
16261: LIST
16262: LIST
16263: PPUSH
16264: CALL_OW 69
16268: ST_TO_ADDR
// if not tmp then
16269: LD_VAR 0 3
16273: NOT
16274: IFFALSE 16278
// exit ;
16276: GO 16334
// un := tmp [ rand ( 1 , tmp ) ] ;
16278: LD_ADDR_VAR 0 2
16282: PUSH
16283: LD_VAR 0 3
16287: PUSH
16288: LD_INT 1
16290: PPUSH
16291: LD_VAR 0 3
16295: PPUSH
16296: CALL_OW 12
16300: ARRAY
16301: ST_TO_ADDR
// if Crawls ( un ) then
16302: LD_VAR 0 2
16306: PPUSH
16307: CALL_OW 318
16311: IFFALSE 16322
// ComWalk ( un ) ;
16313: LD_VAR 0 2
16317: PPUSH
16318: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16322: LD_VAR 0 2
16326: PPUSH
16327: LD_INT 8
16329: PPUSH
16330: CALL_OW 336
// end ;
16334: PPOPN 3
16336: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
16337: LD_EXP 26
16341: PUSH
16342: LD_EXP 70
16346: AND
16347: IFFALSE 16491
16349: GO 16351
16351: DISABLE
16352: LD_INT 0
16354: PPUSH
16355: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
16356: LD_ADDR_VAR 0 2
16360: PUSH
16361: LD_INT 22
16363: PUSH
16364: LD_OWVAR 2
16368: PUSH
16369: EMPTY
16370: LIST
16371: LIST
16372: PUSH
16373: LD_INT 21
16375: PUSH
16376: LD_INT 2
16378: PUSH
16379: EMPTY
16380: LIST
16381: LIST
16382: PUSH
16383: LD_INT 2
16385: PUSH
16386: LD_INT 34
16388: PUSH
16389: LD_INT 12
16391: PUSH
16392: EMPTY
16393: LIST
16394: LIST
16395: PUSH
16396: LD_INT 34
16398: PUSH
16399: LD_INT 51
16401: PUSH
16402: EMPTY
16403: LIST
16404: LIST
16405: PUSH
16406: LD_INT 34
16408: PUSH
16409: LD_INT 32
16411: PUSH
16412: EMPTY
16413: LIST
16414: LIST
16415: PUSH
16416: EMPTY
16417: LIST
16418: LIST
16419: LIST
16420: LIST
16421: PUSH
16422: EMPTY
16423: LIST
16424: LIST
16425: LIST
16426: PPUSH
16427: CALL_OW 69
16431: ST_TO_ADDR
// if not tmp then
16432: LD_VAR 0 2
16436: NOT
16437: IFFALSE 16441
// exit ;
16439: GO 16491
// for i in tmp do
16441: LD_ADDR_VAR 0 1
16445: PUSH
16446: LD_VAR 0 2
16450: PUSH
16451: FOR_IN
16452: IFFALSE 16489
// if GetCargo ( i , mat_artifact ) = 0 then
16454: LD_VAR 0 1
16458: PPUSH
16459: LD_INT 4
16461: PPUSH
16462: CALL_OW 289
16466: PUSH
16467: LD_INT 0
16469: EQUAL
16470: IFFALSE 16487
// SetCargo ( i , mat_siberit , 100 ) ;
16472: LD_VAR 0 1
16476: PPUSH
16477: LD_INT 3
16479: PPUSH
16480: LD_INT 100
16482: PPUSH
16483: CALL_OW 290
16487: GO 16451
16489: POP
16490: POP
// end ;
16491: PPOPN 2
16493: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
16494: LD_EXP 26
16498: PUSH
16499: LD_EXP 71
16503: AND
16504: IFFALSE 16687
16506: GO 16508
16508: DISABLE
16509: LD_INT 0
16511: PPUSH
16512: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16513: LD_ADDR_VAR 0 2
16517: PUSH
16518: LD_INT 22
16520: PUSH
16521: LD_OWVAR 2
16525: PUSH
16526: EMPTY
16527: LIST
16528: LIST
16529: PPUSH
16530: CALL_OW 69
16534: ST_TO_ADDR
// if not tmp then
16535: LD_VAR 0 2
16539: NOT
16540: IFFALSE 16544
// exit ;
16542: GO 16687
// for i := 1 to 2 do
16544: LD_ADDR_VAR 0 1
16548: PUSH
16549: DOUBLE
16550: LD_INT 1
16552: DEC
16553: ST_TO_ADDR
16554: LD_INT 2
16556: PUSH
16557: FOR_TO
16558: IFFALSE 16685
// begin uc_side := your_side ;
16560: LD_ADDR_OWVAR 20
16564: PUSH
16565: LD_OWVAR 2
16569: ST_TO_ADDR
// uc_nation := nation_american ;
16570: LD_ADDR_OWVAR 21
16574: PUSH
16575: LD_INT 1
16577: ST_TO_ADDR
// vc_chassis := us_morphling ;
16578: LD_ADDR_OWVAR 37
16582: PUSH
16583: LD_INT 5
16585: ST_TO_ADDR
// vc_engine := engine_siberite ;
16586: LD_ADDR_OWVAR 39
16590: PUSH
16591: LD_INT 3
16593: ST_TO_ADDR
// vc_control := control_computer ;
16594: LD_ADDR_OWVAR 38
16598: PUSH
16599: LD_INT 3
16601: ST_TO_ADDR
// vc_weapon := us_double_laser ;
16602: LD_ADDR_OWVAR 40
16606: PUSH
16607: LD_INT 10
16609: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
16610: LD_VAR 0 2
16614: PUSH
16615: LD_INT 1
16617: ARRAY
16618: PPUSH
16619: CALL_OW 310
16623: NOT
16624: IFFALSE 16671
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
16626: CALL_OW 45
16630: PPUSH
16631: LD_VAR 0 2
16635: PUSH
16636: LD_INT 1
16638: ARRAY
16639: PPUSH
16640: CALL_OW 250
16644: PPUSH
16645: LD_VAR 0 2
16649: PUSH
16650: LD_INT 1
16652: ARRAY
16653: PPUSH
16654: CALL_OW 251
16658: PPUSH
16659: LD_INT 12
16661: PPUSH
16662: LD_INT 1
16664: PPUSH
16665: CALL_OW 50
16669: GO 16683
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
16671: CALL_OW 45
16675: PPUSH
16676: LD_INT 1
16678: PPUSH
16679: CALL_OW 51
// end ;
16683: GO 16557
16685: POP
16686: POP
// end ;
16687: PPOPN 2
16689: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
16690: LD_EXP 26
16694: PUSH
16695: LD_EXP 72
16699: AND
16700: IFFALSE 16922
16702: GO 16704
16704: DISABLE
16705: LD_INT 0
16707: PPUSH
16708: PPUSH
16709: PPUSH
16710: PPUSH
16711: PPUSH
16712: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16713: LD_ADDR_VAR 0 6
16717: PUSH
16718: LD_INT 22
16720: PUSH
16721: LD_OWVAR 2
16725: PUSH
16726: EMPTY
16727: LIST
16728: LIST
16729: PUSH
16730: LD_INT 21
16732: PUSH
16733: LD_INT 1
16735: PUSH
16736: EMPTY
16737: LIST
16738: LIST
16739: PUSH
16740: LD_INT 3
16742: PUSH
16743: LD_INT 23
16745: PUSH
16746: LD_INT 0
16748: PUSH
16749: EMPTY
16750: LIST
16751: LIST
16752: PUSH
16753: EMPTY
16754: LIST
16755: LIST
16756: PUSH
16757: EMPTY
16758: LIST
16759: LIST
16760: LIST
16761: PPUSH
16762: CALL_OW 69
16766: ST_TO_ADDR
// if not tmp then
16767: LD_VAR 0 6
16771: NOT
16772: IFFALSE 16776
// exit ;
16774: GO 16922
// s1 := rand ( 1 , 4 ) ;
16776: LD_ADDR_VAR 0 2
16780: PUSH
16781: LD_INT 1
16783: PPUSH
16784: LD_INT 4
16786: PPUSH
16787: CALL_OW 12
16791: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
16792: LD_ADDR_VAR 0 4
16796: PUSH
16797: LD_VAR 0 6
16801: PUSH
16802: LD_INT 1
16804: ARRAY
16805: PPUSH
16806: LD_VAR 0 2
16810: PPUSH
16811: CALL_OW 259
16815: ST_TO_ADDR
// if s1 = 1 then
16816: LD_VAR 0 2
16820: PUSH
16821: LD_INT 1
16823: EQUAL
16824: IFFALSE 16844
// s2 := rand ( 2 , 4 ) else
16826: LD_ADDR_VAR 0 3
16830: PUSH
16831: LD_INT 2
16833: PPUSH
16834: LD_INT 4
16836: PPUSH
16837: CALL_OW 12
16841: ST_TO_ADDR
16842: GO 16852
// s2 := 1 ;
16844: LD_ADDR_VAR 0 3
16848: PUSH
16849: LD_INT 1
16851: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
16852: LD_ADDR_VAR 0 5
16856: PUSH
16857: LD_VAR 0 6
16861: PUSH
16862: LD_INT 1
16864: ARRAY
16865: PPUSH
16866: LD_VAR 0 3
16870: PPUSH
16871: CALL_OW 259
16875: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
16876: LD_VAR 0 6
16880: PUSH
16881: LD_INT 1
16883: ARRAY
16884: PPUSH
16885: LD_VAR 0 2
16889: PPUSH
16890: LD_VAR 0 5
16894: PPUSH
16895: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
16899: LD_VAR 0 6
16903: PUSH
16904: LD_INT 1
16906: ARRAY
16907: PPUSH
16908: LD_VAR 0 3
16912: PPUSH
16913: LD_VAR 0 4
16917: PPUSH
16918: CALL_OW 237
// end ;
16922: PPOPN 6
16924: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
16925: LD_EXP 26
16929: PUSH
16930: LD_EXP 73
16934: AND
16935: IFFALSE 17014
16937: GO 16939
16939: DISABLE
16940: LD_INT 0
16942: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
16943: LD_ADDR_VAR 0 1
16947: PUSH
16948: LD_INT 22
16950: PUSH
16951: LD_OWVAR 2
16955: PUSH
16956: EMPTY
16957: LIST
16958: LIST
16959: PUSH
16960: LD_INT 30
16962: PUSH
16963: LD_INT 3
16965: PUSH
16966: EMPTY
16967: LIST
16968: LIST
16969: PUSH
16970: EMPTY
16971: LIST
16972: LIST
16973: PPUSH
16974: CALL_OW 69
16978: ST_TO_ADDR
// if not tmp then
16979: LD_VAR 0 1
16983: NOT
16984: IFFALSE 16988
// exit ;
16986: GO 17014
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16988: LD_VAR 0 1
16992: PUSH
16993: LD_INT 1
16995: PPUSH
16996: LD_VAR 0 1
17000: PPUSH
17001: CALL_OW 12
17005: ARRAY
17006: PPUSH
17007: LD_INT 1
17009: PPUSH
17010: CALL_OW 234
// end ;
17014: PPOPN 1
17016: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
17017: LD_EXP 26
17021: PUSH
17022: LD_EXP 74
17026: AND
17027: IFFALSE 17139
17029: GO 17031
17031: DISABLE
17032: LD_INT 0
17034: PPUSH
17035: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
17036: LD_ADDR_VAR 0 2
17040: PUSH
17041: LD_INT 22
17043: PUSH
17044: LD_OWVAR 2
17048: PUSH
17049: EMPTY
17050: LIST
17051: LIST
17052: PUSH
17053: LD_INT 2
17055: PUSH
17056: LD_INT 30
17058: PUSH
17059: LD_INT 27
17061: PUSH
17062: EMPTY
17063: LIST
17064: LIST
17065: PUSH
17066: LD_INT 30
17068: PUSH
17069: LD_INT 26
17071: PUSH
17072: EMPTY
17073: LIST
17074: LIST
17075: PUSH
17076: LD_INT 30
17078: PUSH
17079: LD_INT 28
17081: PUSH
17082: EMPTY
17083: LIST
17084: LIST
17085: PUSH
17086: EMPTY
17087: LIST
17088: LIST
17089: LIST
17090: LIST
17091: PUSH
17092: EMPTY
17093: LIST
17094: LIST
17095: PPUSH
17096: CALL_OW 69
17100: ST_TO_ADDR
// if not tmp then
17101: LD_VAR 0 2
17105: NOT
17106: IFFALSE 17110
// exit ;
17108: GO 17139
// for i in tmp do
17110: LD_ADDR_VAR 0 1
17114: PUSH
17115: LD_VAR 0 2
17119: PUSH
17120: FOR_IN
17121: IFFALSE 17137
// SetLives ( i , 1 ) ;
17123: LD_VAR 0 1
17127: PPUSH
17128: LD_INT 1
17130: PPUSH
17131: CALL_OW 234
17135: GO 17120
17137: POP
17138: POP
// end ;
17139: PPOPN 2
17141: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
17142: LD_EXP 26
17146: PUSH
17147: LD_EXP 75
17151: AND
17152: IFFALSE 17439
17154: GO 17156
17156: DISABLE
17157: LD_INT 0
17159: PPUSH
17160: PPUSH
17161: PPUSH
// begin i := rand ( 1 , 7 ) ;
17162: LD_ADDR_VAR 0 1
17166: PUSH
17167: LD_INT 1
17169: PPUSH
17170: LD_INT 7
17172: PPUSH
17173: CALL_OW 12
17177: ST_TO_ADDR
// case i of 1 :
17178: LD_VAR 0 1
17182: PUSH
17183: LD_INT 1
17185: DOUBLE
17186: EQUAL
17187: IFTRUE 17191
17189: GO 17201
17191: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
17192: LD_STRING earthquake(getX(game), 0, 32)
17194: PPUSH
17195: CALL_OW 559
17199: GO 17439
17201: LD_INT 2
17203: DOUBLE
17204: EQUAL
17205: IFTRUE 17209
17207: GO 17223
17209: POP
// begin ToLua ( displayStucuk(); ) ;
17210: LD_STRING displayStucuk();
17212: PPUSH
17213: CALL_OW 559
// ResetFog ;
17217: CALL_OW 335
// end ; 3 :
17221: GO 17439
17223: LD_INT 3
17225: DOUBLE
17226: EQUAL
17227: IFTRUE 17231
17229: GO 17335
17231: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17232: LD_ADDR_VAR 0 2
17236: PUSH
17237: LD_INT 22
17239: PUSH
17240: LD_OWVAR 2
17244: PUSH
17245: EMPTY
17246: LIST
17247: LIST
17248: PUSH
17249: LD_INT 25
17251: PUSH
17252: LD_INT 1
17254: PUSH
17255: EMPTY
17256: LIST
17257: LIST
17258: PUSH
17259: EMPTY
17260: LIST
17261: LIST
17262: PPUSH
17263: CALL_OW 69
17267: ST_TO_ADDR
// if not tmp then
17268: LD_VAR 0 2
17272: NOT
17273: IFFALSE 17277
// exit ;
17275: GO 17439
// un := tmp [ rand ( 1 , tmp ) ] ;
17277: LD_ADDR_VAR 0 3
17281: PUSH
17282: LD_VAR 0 2
17286: PUSH
17287: LD_INT 1
17289: PPUSH
17290: LD_VAR 0 2
17294: PPUSH
17295: CALL_OW 12
17299: ARRAY
17300: ST_TO_ADDR
// if Crawls ( un ) then
17301: LD_VAR 0 3
17305: PPUSH
17306: CALL_OW 318
17310: IFFALSE 17321
// ComWalk ( un ) ;
17312: LD_VAR 0 3
17316: PPUSH
17317: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17321: LD_VAR 0 3
17325: PPUSH
17326: LD_INT 8
17328: PPUSH
17329: CALL_OW 336
// end ; 4 :
17333: GO 17439
17335: LD_INT 4
17337: DOUBLE
17338: EQUAL
17339: IFTRUE 17343
17341: GO 17417
17343: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17344: LD_ADDR_VAR 0 2
17348: PUSH
17349: LD_INT 22
17351: PUSH
17352: LD_OWVAR 2
17356: PUSH
17357: EMPTY
17358: LIST
17359: LIST
17360: PUSH
17361: LD_INT 30
17363: PUSH
17364: LD_INT 29
17366: PUSH
17367: EMPTY
17368: LIST
17369: LIST
17370: PUSH
17371: EMPTY
17372: LIST
17373: LIST
17374: PPUSH
17375: CALL_OW 69
17379: ST_TO_ADDR
// if not tmp then
17380: LD_VAR 0 2
17384: NOT
17385: IFFALSE 17389
// exit ;
17387: GO 17439
// CenterNowOnUnits ( tmp [ 1 ] ) ;
17389: LD_VAR 0 2
17393: PUSH
17394: LD_INT 1
17396: ARRAY
17397: PPUSH
17398: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
17402: LD_VAR 0 2
17406: PUSH
17407: LD_INT 1
17409: ARRAY
17410: PPUSH
17411: CALL_OW 65
// end ; 5 .. 7 :
17415: GO 17439
17417: LD_INT 5
17419: DOUBLE
17420: GREATEREQUAL
17421: IFFALSE 17429
17423: LD_INT 7
17425: DOUBLE
17426: LESSEQUAL
17427: IFTRUE 17431
17429: GO 17438
17431: POP
// StreamSibBomb ; end ;
17432: CALL 13676 0 0
17436: GO 17439
17438: POP
// end ;
17439: PPOPN 3
17441: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
17442: LD_EXP 26
17446: PUSH
17447: LD_EXP 76
17451: AND
17452: IFFALSE 17608
17454: GO 17456
17456: DISABLE
17457: LD_INT 0
17459: PPUSH
17460: PPUSH
17461: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
17462: LD_ADDR_VAR 0 2
17466: PUSH
17467: LD_INT 81
17469: PUSH
17470: LD_OWVAR 2
17474: PUSH
17475: EMPTY
17476: LIST
17477: LIST
17478: PUSH
17479: LD_INT 2
17481: PUSH
17482: LD_INT 21
17484: PUSH
17485: LD_INT 1
17487: PUSH
17488: EMPTY
17489: LIST
17490: LIST
17491: PUSH
17492: LD_INT 21
17494: PUSH
17495: LD_INT 2
17497: PUSH
17498: EMPTY
17499: LIST
17500: LIST
17501: PUSH
17502: EMPTY
17503: LIST
17504: LIST
17505: LIST
17506: PUSH
17507: EMPTY
17508: LIST
17509: LIST
17510: PPUSH
17511: CALL_OW 69
17515: ST_TO_ADDR
// if not tmp then
17516: LD_VAR 0 2
17520: NOT
17521: IFFALSE 17525
// exit ;
17523: GO 17608
// p := 0 ;
17525: LD_ADDR_VAR 0 3
17529: PUSH
17530: LD_INT 0
17532: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17533: LD_INT 35
17535: PPUSH
17536: CALL_OW 67
// p := p + 1 ;
17540: LD_ADDR_VAR 0 3
17544: PUSH
17545: LD_VAR 0 3
17549: PUSH
17550: LD_INT 1
17552: PLUS
17553: ST_TO_ADDR
// for i in tmp do
17554: LD_ADDR_VAR 0 1
17558: PUSH
17559: LD_VAR 0 2
17563: PUSH
17564: FOR_IN
17565: IFFALSE 17596
// if GetLives ( i ) < 1000 then
17567: LD_VAR 0 1
17571: PPUSH
17572: CALL_OW 256
17576: PUSH
17577: LD_INT 1000
17579: LESS
17580: IFFALSE 17594
// SetLives ( i , 1000 ) ;
17582: LD_VAR 0 1
17586: PPUSH
17587: LD_INT 1000
17589: PPUSH
17590: CALL_OW 234
17594: GO 17564
17596: POP
17597: POP
// until p > 20 ;
17598: LD_VAR 0 3
17602: PUSH
17603: LD_INT 20
17605: GREATER
17606: IFFALSE 17533
// end ;
17608: PPOPN 3
17610: END
// every 0 0$1 trigger StreamModeActive and sTime do
17611: LD_EXP 26
17615: PUSH
17616: LD_EXP 77
17620: AND
17621: IFFALSE 17656
17623: GO 17625
17625: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
17626: LD_INT 28
17628: PPUSH
17629: LD_OWVAR 2
17633: PPUSH
17634: LD_INT 2
17636: PPUSH
17637: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
17641: LD_INT 30
17643: PPUSH
17644: LD_OWVAR 2
17648: PPUSH
17649: LD_INT 2
17651: PPUSH
17652: CALL_OW 322
// end ;
17656: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
17657: LD_EXP 26
17661: PUSH
17662: LD_EXP 78
17666: AND
17667: IFFALSE 17788
17669: GO 17671
17671: DISABLE
17672: LD_INT 0
17674: PPUSH
17675: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17676: LD_ADDR_VAR 0 2
17680: PUSH
17681: LD_INT 22
17683: PUSH
17684: LD_OWVAR 2
17688: PUSH
17689: EMPTY
17690: LIST
17691: LIST
17692: PUSH
17693: LD_INT 21
17695: PUSH
17696: LD_INT 1
17698: PUSH
17699: EMPTY
17700: LIST
17701: LIST
17702: PUSH
17703: LD_INT 3
17705: PUSH
17706: LD_INT 23
17708: PUSH
17709: LD_INT 0
17711: PUSH
17712: EMPTY
17713: LIST
17714: LIST
17715: PUSH
17716: EMPTY
17717: LIST
17718: LIST
17719: PUSH
17720: EMPTY
17721: LIST
17722: LIST
17723: LIST
17724: PPUSH
17725: CALL_OW 69
17729: ST_TO_ADDR
// if not tmp then
17730: LD_VAR 0 2
17734: NOT
17735: IFFALSE 17739
// exit ;
17737: GO 17788
// for i in tmp do
17739: LD_ADDR_VAR 0 1
17743: PUSH
17744: LD_VAR 0 2
17748: PUSH
17749: FOR_IN
17750: IFFALSE 17786
// begin if Crawls ( i ) then
17752: LD_VAR 0 1
17756: PPUSH
17757: CALL_OW 318
17761: IFFALSE 17772
// ComWalk ( i ) ;
17763: LD_VAR 0 1
17767: PPUSH
17768: CALL_OW 138
// SetClass ( i , 2 ) ;
17772: LD_VAR 0 1
17776: PPUSH
17777: LD_INT 2
17779: PPUSH
17780: CALL_OW 336
// end ;
17784: GO 17749
17786: POP
17787: POP
// end ;
17788: PPOPN 2
17790: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
17791: LD_EXP 26
17795: PUSH
17796: LD_EXP 79
17800: AND
17801: IFFALSE 18089
17803: GO 17805
17805: DISABLE
17806: LD_INT 0
17808: PPUSH
17809: PPUSH
17810: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
17811: LD_OWVAR 2
17815: PPUSH
17816: LD_INT 9
17818: PPUSH
17819: LD_INT 1
17821: PPUSH
17822: LD_INT 1
17824: PPUSH
17825: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
17829: LD_INT 9
17831: PPUSH
17832: LD_OWVAR 2
17836: PPUSH
17837: CALL_OW 343
// uc_side := 9 ;
17841: LD_ADDR_OWVAR 20
17845: PUSH
17846: LD_INT 9
17848: ST_TO_ADDR
// uc_nation := 2 ;
17849: LD_ADDR_OWVAR 21
17853: PUSH
17854: LD_INT 2
17856: ST_TO_ADDR
// hc_name := Dark Warrior ;
17857: LD_ADDR_OWVAR 26
17861: PUSH
17862: LD_STRING Dark Warrior
17864: ST_TO_ADDR
// hc_gallery :=  ;
17865: LD_ADDR_OWVAR 33
17869: PUSH
17870: LD_STRING 
17872: ST_TO_ADDR
// hc_noskilllimit := true ;
17873: LD_ADDR_OWVAR 76
17877: PUSH
17878: LD_INT 1
17880: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
17881: LD_ADDR_OWVAR 31
17885: PUSH
17886: LD_INT 30
17888: PUSH
17889: LD_INT 30
17891: PUSH
17892: LD_INT 30
17894: PUSH
17895: LD_INT 30
17897: PUSH
17898: EMPTY
17899: LIST
17900: LIST
17901: LIST
17902: LIST
17903: ST_TO_ADDR
// un := CreateHuman ;
17904: LD_ADDR_VAR 0 3
17908: PUSH
17909: CALL_OW 44
17913: ST_TO_ADDR
// hc_noskilllimit := false ;
17914: LD_ADDR_OWVAR 76
17918: PUSH
17919: LD_INT 0
17921: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17922: LD_VAR 0 3
17926: PPUSH
17927: LD_INT 1
17929: PPUSH
17930: CALL_OW 51
// ToLua ( playRanger() ) ;
17934: LD_STRING playRanger()
17936: PPUSH
17937: CALL_OW 559
// p := 0 ;
17941: LD_ADDR_VAR 0 2
17945: PUSH
17946: LD_INT 0
17948: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17949: LD_INT 35
17951: PPUSH
17952: CALL_OW 67
// p := p + 1 ;
17956: LD_ADDR_VAR 0 2
17960: PUSH
17961: LD_VAR 0 2
17965: PUSH
17966: LD_INT 1
17968: PLUS
17969: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
17970: LD_VAR 0 3
17974: PPUSH
17975: CALL_OW 256
17979: PUSH
17980: LD_INT 1000
17982: LESS
17983: IFFALSE 17997
// SetLives ( un , 1000 ) ;
17985: LD_VAR 0 3
17989: PPUSH
17990: LD_INT 1000
17992: PPUSH
17993: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
17997: LD_VAR 0 3
18001: PPUSH
18002: LD_INT 81
18004: PUSH
18005: LD_OWVAR 2
18009: PUSH
18010: EMPTY
18011: LIST
18012: LIST
18013: PUSH
18014: LD_INT 91
18016: PUSH
18017: LD_VAR 0 3
18021: PUSH
18022: LD_INT 30
18024: PUSH
18025: EMPTY
18026: LIST
18027: LIST
18028: LIST
18029: PUSH
18030: EMPTY
18031: LIST
18032: LIST
18033: PPUSH
18034: CALL_OW 69
18038: PPUSH
18039: LD_VAR 0 3
18043: PPUSH
18044: CALL_OW 74
18048: PPUSH
18049: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
18053: LD_VAR 0 2
18057: PUSH
18058: LD_INT 80
18060: GREATER
18061: PUSH
18062: LD_VAR 0 3
18066: PPUSH
18067: CALL_OW 301
18071: OR
18072: IFFALSE 17949
// if un then
18074: LD_VAR 0 3
18078: IFFALSE 18089
// RemoveUnit ( un ) ;
18080: LD_VAR 0 3
18084: PPUSH
18085: CALL_OW 64
// end ;
18089: PPOPN 3
18091: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
18092: LD_EXP 80
18096: IFFALSE 18212
18098: GO 18100
18100: DISABLE
18101: LD_INT 0
18103: PPUSH
18104: PPUSH
18105: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
18106: LD_ADDR_VAR 0 2
18110: PUSH
18111: LD_INT 81
18113: PUSH
18114: LD_OWVAR 2
18118: PUSH
18119: EMPTY
18120: LIST
18121: LIST
18122: PUSH
18123: LD_INT 21
18125: PUSH
18126: LD_INT 1
18128: PUSH
18129: EMPTY
18130: LIST
18131: LIST
18132: PUSH
18133: EMPTY
18134: LIST
18135: LIST
18136: PPUSH
18137: CALL_OW 69
18141: ST_TO_ADDR
// ToLua ( playComputer() ) ;
18142: LD_STRING playComputer()
18144: PPUSH
18145: CALL_OW 559
// if not tmp then
18149: LD_VAR 0 2
18153: NOT
18154: IFFALSE 18158
// exit ;
18156: GO 18212
// for i in tmp do
18158: LD_ADDR_VAR 0 1
18162: PUSH
18163: LD_VAR 0 2
18167: PUSH
18168: FOR_IN
18169: IFFALSE 18210
// for j := 1 to 4 do
18171: LD_ADDR_VAR 0 3
18175: PUSH
18176: DOUBLE
18177: LD_INT 1
18179: DEC
18180: ST_TO_ADDR
18181: LD_INT 4
18183: PUSH
18184: FOR_TO
18185: IFFALSE 18206
// SetSkill ( i , j , 10 ) ;
18187: LD_VAR 0 1
18191: PPUSH
18192: LD_VAR 0 3
18196: PPUSH
18197: LD_INT 10
18199: PPUSH
18200: CALL_OW 237
18204: GO 18184
18206: POP
18207: POP
18208: GO 18168
18210: POP
18211: POP
// end ;
18212: PPOPN 3
18214: END
// every 0 0$1 trigger s30 do var i , tmp ;
18215: LD_EXP 81
18219: IFFALSE 18288
18221: GO 18223
18223: DISABLE
18224: LD_INT 0
18226: PPUSH
18227: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18228: LD_ADDR_VAR 0 2
18232: PUSH
18233: LD_INT 22
18235: PUSH
18236: LD_OWVAR 2
18240: PUSH
18241: EMPTY
18242: LIST
18243: LIST
18244: PPUSH
18245: CALL_OW 69
18249: ST_TO_ADDR
// if not tmp then
18250: LD_VAR 0 2
18254: NOT
18255: IFFALSE 18259
// exit ;
18257: GO 18288
// for i in tmp do
18259: LD_ADDR_VAR 0 1
18263: PUSH
18264: LD_VAR 0 2
18268: PUSH
18269: FOR_IN
18270: IFFALSE 18286
// SetLives ( i , 300 ) ;
18272: LD_VAR 0 1
18276: PPUSH
18277: LD_INT 300
18279: PPUSH
18280: CALL_OW 234
18284: GO 18269
18286: POP
18287: POP
// end ;
18288: PPOPN 2
18290: END
// every 0 0$1 trigger s60 do var i , tmp ;
18291: LD_EXP 82
18295: IFFALSE 18364
18297: GO 18299
18299: DISABLE
18300: LD_INT 0
18302: PPUSH
18303: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18304: LD_ADDR_VAR 0 2
18308: PUSH
18309: LD_INT 22
18311: PUSH
18312: LD_OWVAR 2
18316: PUSH
18317: EMPTY
18318: LIST
18319: LIST
18320: PPUSH
18321: CALL_OW 69
18325: ST_TO_ADDR
// if not tmp then
18326: LD_VAR 0 2
18330: NOT
18331: IFFALSE 18335
// exit ;
18333: GO 18364
// for i in tmp do
18335: LD_ADDR_VAR 0 1
18339: PUSH
18340: LD_VAR 0 2
18344: PUSH
18345: FOR_IN
18346: IFFALSE 18362
// SetLives ( i , 600 ) ;
18348: LD_VAR 0 1
18352: PPUSH
18353: LD_INT 600
18355: PPUSH
18356: CALL_OW 234
18360: GO 18345
18362: POP
18363: POP
// end ;
18364: PPOPN 2
18366: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18367: LD_INT 0
18369: PPUSH
// case cmd of 301 :
18370: LD_VAR 0 1
18374: PUSH
18375: LD_INT 301
18377: DOUBLE
18378: EQUAL
18379: IFTRUE 18383
18381: GO 18415
18383: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
18384: LD_VAR 0 6
18388: PPUSH
18389: LD_VAR 0 7
18393: PPUSH
18394: LD_VAR 0 8
18398: PPUSH
18399: LD_VAR 0 4
18403: PPUSH
18404: LD_VAR 0 5
18408: PPUSH
18409: CALL 19616 0 5
18413: GO 18536
18415: LD_INT 302
18417: DOUBLE
18418: EQUAL
18419: IFTRUE 18423
18421: GO 18460
18423: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
18424: LD_VAR 0 6
18428: PPUSH
18429: LD_VAR 0 7
18433: PPUSH
18434: LD_VAR 0 8
18438: PPUSH
18439: LD_VAR 0 9
18443: PPUSH
18444: LD_VAR 0 4
18448: PPUSH
18449: LD_VAR 0 5
18453: PPUSH
18454: CALL 19707 0 6
18458: GO 18536
18460: LD_INT 303
18462: DOUBLE
18463: EQUAL
18464: IFTRUE 18468
18466: GO 18505
18468: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
18469: LD_VAR 0 6
18473: PPUSH
18474: LD_VAR 0 7
18478: PPUSH
18479: LD_VAR 0 8
18483: PPUSH
18484: LD_VAR 0 9
18488: PPUSH
18489: LD_VAR 0 4
18493: PPUSH
18494: LD_VAR 0 5
18498: PPUSH
18499: CALL 18541 0 6
18503: GO 18536
18505: LD_INT 304
18507: DOUBLE
18508: EQUAL
18509: IFTRUE 18513
18511: GO 18535
18513: POP
// hHackTeleport ( unit , x , y ) ; end ;
18514: LD_VAR 0 2
18518: PPUSH
18519: LD_VAR 0 4
18523: PPUSH
18524: LD_VAR 0 5
18528: PPUSH
18529: CALL 20300 0 3
18533: GO 18536
18535: POP
// end ;
18536: LD_VAR 0 12
18540: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
18541: LD_INT 0
18543: PPUSH
18544: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
18545: LD_VAR 0 1
18549: PUSH
18550: LD_INT 1
18552: LESS
18553: PUSH
18554: LD_VAR 0 1
18558: PUSH
18559: LD_INT 3
18561: GREATER
18562: OR
18563: PUSH
18564: LD_VAR 0 5
18568: PPUSH
18569: LD_VAR 0 6
18573: PPUSH
18574: CALL_OW 428
18578: OR
18579: IFFALSE 18583
// exit ;
18581: GO 19303
// uc_side := your_side ;
18583: LD_ADDR_OWVAR 20
18587: PUSH
18588: LD_OWVAR 2
18592: ST_TO_ADDR
// uc_nation := nation ;
18593: LD_ADDR_OWVAR 21
18597: PUSH
18598: LD_VAR 0 1
18602: ST_TO_ADDR
// bc_level = 1 ;
18603: LD_ADDR_OWVAR 43
18607: PUSH
18608: LD_INT 1
18610: ST_TO_ADDR
// case btype of 1 :
18611: LD_VAR 0 2
18615: PUSH
18616: LD_INT 1
18618: DOUBLE
18619: EQUAL
18620: IFTRUE 18624
18622: GO 18635
18624: POP
// bc_type := b_depot ; 2 :
18625: LD_ADDR_OWVAR 42
18629: PUSH
18630: LD_INT 0
18632: ST_TO_ADDR
18633: GO 19247
18635: LD_INT 2
18637: DOUBLE
18638: EQUAL
18639: IFTRUE 18643
18641: GO 18654
18643: POP
// bc_type := b_warehouse ; 3 :
18644: LD_ADDR_OWVAR 42
18648: PUSH
18649: LD_INT 1
18651: ST_TO_ADDR
18652: GO 19247
18654: LD_INT 3
18656: DOUBLE
18657: EQUAL
18658: IFTRUE 18662
18660: GO 18673
18662: POP
// bc_type := b_lab ; 4 .. 9 :
18663: LD_ADDR_OWVAR 42
18667: PUSH
18668: LD_INT 6
18670: ST_TO_ADDR
18671: GO 19247
18673: LD_INT 4
18675: DOUBLE
18676: GREATEREQUAL
18677: IFFALSE 18685
18679: LD_INT 9
18681: DOUBLE
18682: LESSEQUAL
18683: IFTRUE 18687
18685: GO 18739
18687: POP
// begin bc_type := b_lab_half ;
18688: LD_ADDR_OWVAR 42
18692: PUSH
18693: LD_INT 7
18695: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
18696: LD_ADDR_OWVAR 44
18700: PUSH
18701: LD_INT 10
18703: PUSH
18704: LD_INT 11
18706: PUSH
18707: LD_INT 12
18709: PUSH
18710: LD_INT 15
18712: PUSH
18713: LD_INT 14
18715: PUSH
18716: LD_INT 13
18718: PUSH
18719: EMPTY
18720: LIST
18721: LIST
18722: LIST
18723: LIST
18724: LIST
18725: LIST
18726: PUSH
18727: LD_VAR 0 2
18731: PUSH
18732: LD_INT 3
18734: MINUS
18735: ARRAY
18736: ST_TO_ADDR
// end ; 10 .. 13 :
18737: GO 19247
18739: LD_INT 10
18741: DOUBLE
18742: GREATEREQUAL
18743: IFFALSE 18751
18745: LD_INT 13
18747: DOUBLE
18748: LESSEQUAL
18749: IFTRUE 18753
18751: GO 18830
18753: POP
// begin bc_type := b_lab_full ;
18754: LD_ADDR_OWVAR 42
18758: PUSH
18759: LD_INT 8
18761: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
18762: LD_ADDR_OWVAR 44
18766: PUSH
18767: LD_INT 10
18769: PUSH
18770: LD_INT 12
18772: PUSH
18773: LD_INT 14
18775: PUSH
18776: LD_INT 13
18778: PUSH
18779: EMPTY
18780: LIST
18781: LIST
18782: LIST
18783: LIST
18784: PUSH
18785: LD_VAR 0 2
18789: PUSH
18790: LD_INT 9
18792: MINUS
18793: ARRAY
18794: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
18795: LD_ADDR_OWVAR 45
18799: PUSH
18800: LD_INT 11
18802: PUSH
18803: LD_INT 15
18805: PUSH
18806: LD_INT 12
18808: PUSH
18809: LD_INT 15
18811: PUSH
18812: EMPTY
18813: LIST
18814: LIST
18815: LIST
18816: LIST
18817: PUSH
18818: LD_VAR 0 2
18822: PUSH
18823: LD_INT 9
18825: MINUS
18826: ARRAY
18827: ST_TO_ADDR
// end ; 14 :
18828: GO 19247
18830: LD_INT 14
18832: DOUBLE
18833: EQUAL
18834: IFTRUE 18838
18836: GO 18849
18838: POP
// bc_type := b_workshop ; 15 :
18839: LD_ADDR_OWVAR 42
18843: PUSH
18844: LD_INT 2
18846: ST_TO_ADDR
18847: GO 19247
18849: LD_INT 15
18851: DOUBLE
18852: EQUAL
18853: IFTRUE 18857
18855: GO 18868
18857: POP
// bc_type := b_factory ; 16 :
18858: LD_ADDR_OWVAR 42
18862: PUSH
18863: LD_INT 3
18865: ST_TO_ADDR
18866: GO 19247
18868: LD_INT 16
18870: DOUBLE
18871: EQUAL
18872: IFTRUE 18876
18874: GO 18887
18876: POP
// bc_type := b_ext_gun ; 17 :
18877: LD_ADDR_OWVAR 42
18881: PUSH
18882: LD_INT 17
18884: ST_TO_ADDR
18885: GO 19247
18887: LD_INT 17
18889: DOUBLE
18890: EQUAL
18891: IFTRUE 18895
18893: GO 18923
18895: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
18896: LD_ADDR_OWVAR 42
18900: PUSH
18901: LD_INT 19
18903: PUSH
18904: LD_INT 23
18906: PUSH
18907: LD_INT 19
18909: PUSH
18910: EMPTY
18911: LIST
18912: LIST
18913: LIST
18914: PUSH
18915: LD_VAR 0 1
18919: ARRAY
18920: ST_TO_ADDR
18921: GO 19247
18923: LD_INT 18
18925: DOUBLE
18926: EQUAL
18927: IFTRUE 18931
18929: GO 18942
18931: POP
// bc_type := b_ext_radar ; 19 :
18932: LD_ADDR_OWVAR 42
18936: PUSH
18937: LD_INT 20
18939: ST_TO_ADDR
18940: GO 19247
18942: LD_INT 19
18944: DOUBLE
18945: EQUAL
18946: IFTRUE 18950
18948: GO 18961
18950: POP
// bc_type := b_ext_radio ; 20 :
18951: LD_ADDR_OWVAR 42
18955: PUSH
18956: LD_INT 22
18958: ST_TO_ADDR
18959: GO 19247
18961: LD_INT 20
18963: DOUBLE
18964: EQUAL
18965: IFTRUE 18969
18967: GO 18980
18969: POP
// bc_type := b_ext_siberium ; 21 :
18970: LD_ADDR_OWVAR 42
18974: PUSH
18975: LD_INT 21
18977: ST_TO_ADDR
18978: GO 19247
18980: LD_INT 21
18982: DOUBLE
18983: EQUAL
18984: IFTRUE 18988
18986: GO 18999
18988: POP
// bc_type := b_ext_computer ; 22 :
18989: LD_ADDR_OWVAR 42
18993: PUSH
18994: LD_INT 24
18996: ST_TO_ADDR
18997: GO 19247
18999: LD_INT 22
19001: DOUBLE
19002: EQUAL
19003: IFTRUE 19007
19005: GO 19018
19007: POP
// bc_type := b_ext_track ; 23 :
19008: LD_ADDR_OWVAR 42
19012: PUSH
19013: LD_INT 16
19015: ST_TO_ADDR
19016: GO 19247
19018: LD_INT 23
19020: DOUBLE
19021: EQUAL
19022: IFTRUE 19026
19024: GO 19037
19026: POP
// bc_type := b_ext_laser ; 24 :
19027: LD_ADDR_OWVAR 42
19031: PUSH
19032: LD_INT 25
19034: ST_TO_ADDR
19035: GO 19247
19037: LD_INT 24
19039: DOUBLE
19040: EQUAL
19041: IFTRUE 19045
19043: GO 19056
19045: POP
// bc_type := b_control_tower ; 25 :
19046: LD_ADDR_OWVAR 42
19050: PUSH
19051: LD_INT 36
19053: ST_TO_ADDR
19054: GO 19247
19056: LD_INT 25
19058: DOUBLE
19059: EQUAL
19060: IFTRUE 19064
19062: GO 19075
19064: POP
// bc_type := b_breastwork ; 26 :
19065: LD_ADDR_OWVAR 42
19069: PUSH
19070: LD_INT 31
19072: ST_TO_ADDR
19073: GO 19247
19075: LD_INT 26
19077: DOUBLE
19078: EQUAL
19079: IFTRUE 19083
19081: GO 19094
19083: POP
// bc_type := b_bunker ; 27 :
19084: LD_ADDR_OWVAR 42
19088: PUSH
19089: LD_INT 32
19091: ST_TO_ADDR
19092: GO 19247
19094: LD_INT 27
19096: DOUBLE
19097: EQUAL
19098: IFTRUE 19102
19100: GO 19113
19102: POP
// bc_type := b_turret ; 28 :
19103: LD_ADDR_OWVAR 42
19107: PUSH
19108: LD_INT 33
19110: ST_TO_ADDR
19111: GO 19247
19113: LD_INT 28
19115: DOUBLE
19116: EQUAL
19117: IFTRUE 19121
19119: GO 19132
19121: POP
// bc_type := b_armoury ; 29 :
19122: LD_ADDR_OWVAR 42
19126: PUSH
19127: LD_INT 4
19129: ST_TO_ADDR
19130: GO 19247
19132: LD_INT 29
19134: DOUBLE
19135: EQUAL
19136: IFTRUE 19140
19138: GO 19151
19140: POP
// bc_type := b_barracks ; 30 :
19141: LD_ADDR_OWVAR 42
19145: PUSH
19146: LD_INT 5
19148: ST_TO_ADDR
19149: GO 19247
19151: LD_INT 30
19153: DOUBLE
19154: EQUAL
19155: IFTRUE 19159
19157: GO 19170
19159: POP
// bc_type := b_solar_power ; 31 :
19160: LD_ADDR_OWVAR 42
19164: PUSH
19165: LD_INT 27
19167: ST_TO_ADDR
19168: GO 19247
19170: LD_INT 31
19172: DOUBLE
19173: EQUAL
19174: IFTRUE 19178
19176: GO 19189
19178: POP
// bc_type := b_oil_power ; 32 :
19179: LD_ADDR_OWVAR 42
19183: PUSH
19184: LD_INT 26
19186: ST_TO_ADDR
19187: GO 19247
19189: LD_INT 32
19191: DOUBLE
19192: EQUAL
19193: IFTRUE 19197
19195: GO 19208
19197: POP
// bc_type := b_siberite_power ; 33 :
19198: LD_ADDR_OWVAR 42
19202: PUSH
19203: LD_INT 28
19205: ST_TO_ADDR
19206: GO 19247
19208: LD_INT 33
19210: DOUBLE
19211: EQUAL
19212: IFTRUE 19216
19214: GO 19227
19216: POP
// bc_type := b_oil_mine ; 34 :
19217: LD_ADDR_OWVAR 42
19221: PUSH
19222: LD_INT 29
19224: ST_TO_ADDR
19225: GO 19247
19227: LD_INT 34
19229: DOUBLE
19230: EQUAL
19231: IFTRUE 19235
19233: GO 19246
19235: POP
// bc_type := b_siberite_mine ; end ;
19236: LD_ADDR_OWVAR 42
19240: PUSH
19241: LD_INT 30
19243: ST_TO_ADDR
19244: GO 19247
19246: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
19247: LD_ADDR_VAR 0 8
19251: PUSH
19252: LD_VAR 0 5
19256: PPUSH
19257: LD_VAR 0 6
19261: PPUSH
19262: LD_VAR 0 3
19266: PPUSH
19267: CALL_OW 47
19271: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
19272: LD_OWVAR 42
19276: PUSH
19277: LD_INT 32
19279: PUSH
19280: LD_INT 33
19282: PUSH
19283: EMPTY
19284: LIST
19285: LIST
19286: IN
19287: IFFALSE 19303
// PlaceWeaponTurret ( b , weapon ) ;
19289: LD_VAR 0 8
19293: PPUSH
19294: LD_VAR 0 4
19298: PPUSH
19299: CALL_OW 431
// end ;
19303: LD_VAR 0 7
19307: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
19308: LD_INT 0
19310: PPUSH
19311: PPUSH
19312: PPUSH
19313: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19314: LD_ADDR_VAR 0 4
19318: PUSH
19319: LD_INT 22
19321: PUSH
19322: LD_OWVAR 2
19326: PUSH
19327: EMPTY
19328: LIST
19329: LIST
19330: PUSH
19331: LD_INT 2
19333: PUSH
19334: LD_INT 30
19336: PUSH
19337: LD_INT 0
19339: PUSH
19340: EMPTY
19341: LIST
19342: LIST
19343: PUSH
19344: LD_INT 30
19346: PUSH
19347: LD_INT 1
19349: PUSH
19350: EMPTY
19351: LIST
19352: LIST
19353: PUSH
19354: EMPTY
19355: LIST
19356: LIST
19357: LIST
19358: PUSH
19359: EMPTY
19360: LIST
19361: LIST
19362: PPUSH
19363: CALL_OW 69
19367: ST_TO_ADDR
// if not tmp then
19368: LD_VAR 0 4
19372: NOT
19373: IFFALSE 19377
// exit ;
19375: GO 19436
// for i in tmp do
19377: LD_ADDR_VAR 0 2
19381: PUSH
19382: LD_VAR 0 4
19386: PUSH
19387: FOR_IN
19388: IFFALSE 19434
// for j = 1 to 3 do
19390: LD_ADDR_VAR 0 3
19394: PUSH
19395: DOUBLE
19396: LD_INT 1
19398: DEC
19399: ST_TO_ADDR
19400: LD_INT 3
19402: PUSH
19403: FOR_TO
19404: IFFALSE 19430
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
19406: LD_VAR 0 2
19410: PPUSH
19411: CALL_OW 274
19415: PPUSH
19416: LD_VAR 0 3
19420: PPUSH
19421: LD_INT 99999
19423: PPUSH
19424: CALL_OW 277
19428: GO 19403
19430: POP
19431: POP
19432: GO 19387
19434: POP
19435: POP
// end ;
19436: LD_VAR 0 1
19440: RET
// export function hHackSetLevel10 ; var i , j ; begin
19441: LD_INT 0
19443: PPUSH
19444: PPUSH
19445: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19446: LD_ADDR_VAR 0 2
19450: PUSH
19451: LD_INT 21
19453: PUSH
19454: LD_INT 1
19456: PUSH
19457: EMPTY
19458: LIST
19459: LIST
19460: PPUSH
19461: CALL_OW 69
19465: PUSH
19466: FOR_IN
19467: IFFALSE 19519
// if IsSelected ( i ) then
19469: LD_VAR 0 2
19473: PPUSH
19474: CALL_OW 306
19478: IFFALSE 19517
// begin for j := 1 to 4 do
19480: LD_ADDR_VAR 0 3
19484: PUSH
19485: DOUBLE
19486: LD_INT 1
19488: DEC
19489: ST_TO_ADDR
19490: LD_INT 4
19492: PUSH
19493: FOR_TO
19494: IFFALSE 19515
// SetSkill ( i , j , 10 ) ;
19496: LD_VAR 0 2
19500: PPUSH
19501: LD_VAR 0 3
19505: PPUSH
19506: LD_INT 10
19508: PPUSH
19509: CALL_OW 237
19513: GO 19493
19515: POP
19516: POP
// end ;
19517: GO 19466
19519: POP
19520: POP
// end ;
19521: LD_VAR 0 1
19525: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
19526: LD_INT 0
19528: PPUSH
19529: PPUSH
19530: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
19531: LD_ADDR_VAR 0 2
19535: PUSH
19536: LD_INT 22
19538: PUSH
19539: LD_OWVAR 2
19543: PUSH
19544: EMPTY
19545: LIST
19546: LIST
19547: PUSH
19548: LD_INT 21
19550: PUSH
19551: LD_INT 1
19553: PUSH
19554: EMPTY
19555: LIST
19556: LIST
19557: PUSH
19558: EMPTY
19559: LIST
19560: LIST
19561: PPUSH
19562: CALL_OW 69
19566: PUSH
19567: FOR_IN
19568: IFFALSE 19609
// begin for j := 1 to 4 do
19570: LD_ADDR_VAR 0 3
19574: PUSH
19575: DOUBLE
19576: LD_INT 1
19578: DEC
19579: ST_TO_ADDR
19580: LD_INT 4
19582: PUSH
19583: FOR_TO
19584: IFFALSE 19605
// SetSkill ( i , j , 10 ) ;
19586: LD_VAR 0 2
19590: PPUSH
19591: LD_VAR 0 3
19595: PPUSH
19596: LD_INT 10
19598: PPUSH
19599: CALL_OW 237
19603: GO 19583
19605: POP
19606: POP
// end ;
19607: GO 19567
19609: POP
19610: POP
// end ;
19611: LD_VAR 0 1
19615: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
19616: LD_INT 0
19618: PPUSH
// uc_side := your_side ;
19619: LD_ADDR_OWVAR 20
19623: PUSH
19624: LD_OWVAR 2
19628: ST_TO_ADDR
// uc_nation := nation ;
19629: LD_ADDR_OWVAR 21
19633: PUSH
19634: LD_VAR 0 1
19638: ST_TO_ADDR
// InitHc ;
19639: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
19643: LD_INT 0
19645: PPUSH
19646: LD_VAR 0 2
19650: PPUSH
19651: LD_VAR 0 3
19655: PPUSH
19656: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
19660: LD_VAR 0 4
19664: PPUSH
19665: LD_VAR 0 5
19669: PPUSH
19670: CALL_OW 428
19674: PUSH
19675: LD_INT 0
19677: EQUAL
19678: IFFALSE 19702
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
19680: CALL_OW 44
19684: PPUSH
19685: LD_VAR 0 4
19689: PPUSH
19690: LD_VAR 0 5
19694: PPUSH
19695: LD_INT 1
19697: PPUSH
19698: CALL_OW 48
// end ;
19702: LD_VAR 0 6
19706: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
19707: LD_INT 0
19709: PPUSH
19710: PPUSH
// uc_side := your_side ;
19711: LD_ADDR_OWVAR 20
19715: PUSH
19716: LD_OWVAR 2
19720: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
19721: LD_VAR 0 1
19725: PUSH
19726: LD_INT 1
19728: PUSH
19729: LD_INT 2
19731: PUSH
19732: LD_INT 3
19734: PUSH
19735: LD_INT 4
19737: PUSH
19738: LD_INT 5
19740: PUSH
19741: EMPTY
19742: LIST
19743: LIST
19744: LIST
19745: LIST
19746: LIST
19747: IN
19748: IFFALSE 19760
// uc_nation := nation_american else
19750: LD_ADDR_OWVAR 21
19754: PUSH
19755: LD_INT 1
19757: ST_TO_ADDR
19758: GO 19803
// if chassis in [ 11 , 12 , 13 , 14 ] then
19760: LD_VAR 0 1
19764: PUSH
19765: LD_INT 11
19767: PUSH
19768: LD_INT 12
19770: PUSH
19771: LD_INT 13
19773: PUSH
19774: LD_INT 14
19776: PUSH
19777: EMPTY
19778: LIST
19779: LIST
19780: LIST
19781: LIST
19782: IN
19783: IFFALSE 19795
// uc_nation := nation_arabian else
19785: LD_ADDR_OWVAR 21
19789: PUSH
19790: LD_INT 2
19792: ST_TO_ADDR
19793: GO 19803
// uc_nation := nation_russian ;
19795: LD_ADDR_OWVAR 21
19799: PUSH
19800: LD_INT 3
19802: ST_TO_ADDR
// vc_chassis := chassis ;
19803: LD_ADDR_OWVAR 37
19807: PUSH
19808: LD_VAR 0 1
19812: ST_TO_ADDR
// vc_engine := engine ;
19813: LD_ADDR_OWVAR 39
19817: PUSH
19818: LD_VAR 0 2
19822: ST_TO_ADDR
// vc_control := control ;
19823: LD_ADDR_OWVAR 38
19827: PUSH
19828: LD_VAR 0 3
19832: ST_TO_ADDR
// vc_weapon := weapon ;
19833: LD_ADDR_OWVAR 40
19837: PUSH
19838: LD_VAR 0 4
19842: ST_TO_ADDR
// un := CreateVehicle ;
19843: LD_ADDR_VAR 0 8
19847: PUSH
19848: CALL_OW 45
19852: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
19853: LD_VAR 0 8
19857: PPUSH
19858: LD_INT 0
19860: PPUSH
19861: LD_INT 5
19863: PPUSH
19864: CALL_OW 12
19868: PPUSH
19869: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
19873: LD_VAR 0 8
19877: PPUSH
19878: LD_VAR 0 5
19882: PPUSH
19883: LD_VAR 0 6
19887: PPUSH
19888: LD_INT 1
19890: PPUSH
19891: CALL_OW 48
// end ;
19895: LD_VAR 0 7
19899: RET
// export hInvincible ; every 1 do
19900: GO 19902
19902: DISABLE
// hInvincible := [ ] ;
19903: LD_ADDR_EXP 83
19907: PUSH
19908: EMPTY
19909: ST_TO_ADDR
19910: END
// every 10 do var i ;
19911: GO 19913
19913: DISABLE
19914: LD_INT 0
19916: PPUSH
// begin enable ;
19917: ENABLE
// if not hInvincible then
19918: LD_EXP 83
19922: NOT
19923: IFFALSE 19927
// exit ;
19925: GO 19971
// for i in hInvincible do
19927: LD_ADDR_VAR 0 1
19931: PUSH
19932: LD_EXP 83
19936: PUSH
19937: FOR_IN
19938: IFFALSE 19969
// if GetLives ( i ) < 1000 then
19940: LD_VAR 0 1
19944: PPUSH
19945: CALL_OW 256
19949: PUSH
19950: LD_INT 1000
19952: LESS
19953: IFFALSE 19967
// SetLives ( i , 1000 ) ;
19955: LD_VAR 0 1
19959: PPUSH
19960: LD_INT 1000
19962: PPUSH
19963: CALL_OW 234
19967: GO 19937
19969: POP
19970: POP
// end ;
19971: PPOPN 1
19973: END
// export function hHackInvincible ; var i ; begin
19974: LD_INT 0
19976: PPUSH
19977: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
19978: LD_ADDR_VAR 0 2
19982: PUSH
19983: LD_INT 2
19985: PUSH
19986: LD_INT 21
19988: PUSH
19989: LD_INT 1
19991: PUSH
19992: EMPTY
19993: LIST
19994: LIST
19995: PUSH
19996: LD_INT 21
19998: PUSH
19999: LD_INT 2
20001: PUSH
20002: EMPTY
20003: LIST
20004: LIST
20005: PUSH
20006: EMPTY
20007: LIST
20008: LIST
20009: LIST
20010: PPUSH
20011: CALL_OW 69
20015: PUSH
20016: FOR_IN
20017: IFFALSE 20078
// if IsSelected ( i ) then
20019: LD_VAR 0 2
20023: PPUSH
20024: CALL_OW 306
20028: IFFALSE 20076
// begin if i in hInvincible then
20030: LD_VAR 0 2
20034: PUSH
20035: LD_EXP 83
20039: IN
20040: IFFALSE 20060
// hInvincible := hInvincible diff i else
20042: LD_ADDR_EXP 83
20046: PUSH
20047: LD_EXP 83
20051: PUSH
20052: LD_VAR 0 2
20056: DIFF
20057: ST_TO_ADDR
20058: GO 20076
// hInvincible := hInvincible union i ;
20060: LD_ADDR_EXP 83
20064: PUSH
20065: LD_EXP 83
20069: PUSH
20070: LD_VAR 0 2
20074: UNION
20075: ST_TO_ADDR
// end ;
20076: GO 20016
20078: POP
20079: POP
// end ;
20080: LD_VAR 0 1
20084: RET
// export function hHackInvisible ; var i , j ; begin
20085: LD_INT 0
20087: PPUSH
20088: PPUSH
20089: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20090: LD_ADDR_VAR 0 2
20094: PUSH
20095: LD_INT 21
20097: PUSH
20098: LD_INT 1
20100: PUSH
20101: EMPTY
20102: LIST
20103: LIST
20104: PPUSH
20105: CALL_OW 69
20109: PUSH
20110: FOR_IN
20111: IFFALSE 20135
// if IsSelected ( i ) then
20113: LD_VAR 0 2
20117: PPUSH
20118: CALL_OW 306
20122: IFFALSE 20133
// ComForceInvisible ( i ) ;
20124: LD_VAR 0 2
20128: PPUSH
20129: CALL_OW 496
20133: GO 20110
20135: POP
20136: POP
// end ;
20137: LD_VAR 0 1
20141: RET
// export function hHackChangeYourSide ; begin
20142: LD_INT 0
20144: PPUSH
// if your_side = 8 then
20145: LD_OWVAR 2
20149: PUSH
20150: LD_INT 8
20152: EQUAL
20153: IFFALSE 20165
// your_side := 0 else
20155: LD_ADDR_OWVAR 2
20159: PUSH
20160: LD_INT 0
20162: ST_TO_ADDR
20163: GO 20179
// your_side := your_side + 1 ;
20165: LD_ADDR_OWVAR 2
20169: PUSH
20170: LD_OWVAR 2
20174: PUSH
20175: LD_INT 1
20177: PLUS
20178: ST_TO_ADDR
// end ;
20179: LD_VAR 0 1
20183: RET
// export function hHackChangeUnitSide ; var i , j ; begin
20184: LD_INT 0
20186: PPUSH
20187: PPUSH
20188: PPUSH
// for i in all_units do
20189: LD_ADDR_VAR 0 2
20193: PUSH
20194: LD_OWVAR 3
20198: PUSH
20199: FOR_IN
20200: IFFALSE 20278
// if IsSelected ( i ) then
20202: LD_VAR 0 2
20206: PPUSH
20207: CALL_OW 306
20211: IFFALSE 20276
// begin j := GetSide ( i ) ;
20213: LD_ADDR_VAR 0 3
20217: PUSH
20218: LD_VAR 0 2
20222: PPUSH
20223: CALL_OW 255
20227: ST_TO_ADDR
// if j = 8 then
20228: LD_VAR 0 3
20232: PUSH
20233: LD_INT 8
20235: EQUAL
20236: IFFALSE 20248
// j := 0 else
20238: LD_ADDR_VAR 0 3
20242: PUSH
20243: LD_INT 0
20245: ST_TO_ADDR
20246: GO 20262
// j := j + 1 ;
20248: LD_ADDR_VAR 0 3
20252: PUSH
20253: LD_VAR 0 3
20257: PUSH
20258: LD_INT 1
20260: PLUS
20261: ST_TO_ADDR
// SetSide ( i , j ) ;
20262: LD_VAR 0 2
20266: PPUSH
20267: LD_VAR 0 3
20271: PPUSH
20272: CALL_OW 235
// end ;
20276: GO 20199
20278: POP
20279: POP
// end ;
20280: LD_VAR 0 1
20284: RET
// export function hHackFog ; begin
20285: LD_INT 0
20287: PPUSH
// FogOff ( true ) ;
20288: LD_INT 1
20290: PPUSH
20291: CALL_OW 344
// end ;
20295: LD_VAR 0 1
20299: RET
// export function hHackTeleport ( unit , x , y ) ; begin
20300: LD_INT 0
20302: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
20303: LD_VAR 0 1
20307: PPUSH
20308: LD_VAR 0 2
20312: PPUSH
20313: LD_VAR 0 3
20317: PPUSH
20318: LD_INT 1
20320: PPUSH
20321: LD_INT 1
20323: PPUSH
20324: CALL_OW 483
// CenterOnXY ( x , y ) ;
20328: LD_VAR 0 2
20332: PPUSH
20333: LD_VAR 0 3
20337: PPUSH
20338: CALL_OW 84
// end ;
20342: LD_VAR 0 4
20346: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
20347: LD_INT 0
20349: PPUSH
20350: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
20351: LD_VAR 0 1
20355: NOT
20356: PUSH
20357: LD_VAR 0 2
20361: PPUSH
20362: LD_VAR 0 3
20366: PPUSH
20367: CALL_OW 488
20371: NOT
20372: OR
20373: PUSH
20374: LD_VAR 0 1
20378: PPUSH
20379: CALL_OW 266
20383: PUSH
20384: LD_INT 3
20386: NONEQUAL
20387: PUSH
20388: LD_VAR 0 1
20392: PPUSH
20393: CALL_OW 247
20397: PUSH
20398: LD_INT 1
20400: EQUAL
20401: NOT
20402: AND
20403: OR
20404: IFFALSE 20408
// exit ;
20406: GO 20557
// if GetType ( factory ) = unit_human then
20408: LD_VAR 0 1
20412: PPUSH
20413: CALL_OW 247
20417: PUSH
20418: LD_INT 1
20420: EQUAL
20421: IFFALSE 20438
// factory := IsInUnit ( factory ) ;
20423: LD_ADDR_VAR 0 1
20427: PUSH
20428: LD_VAR 0 1
20432: PPUSH
20433: CALL_OW 310
20437: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
20438: LD_VAR 0 1
20442: PPUSH
20443: CALL_OW 266
20447: PUSH
20448: LD_INT 3
20450: NONEQUAL
20451: IFFALSE 20455
// exit ;
20453: GO 20557
// if HexInfo ( x , y ) = factory then
20455: LD_VAR 0 2
20459: PPUSH
20460: LD_VAR 0 3
20464: PPUSH
20465: CALL_OW 428
20469: PUSH
20470: LD_VAR 0 1
20474: EQUAL
20475: IFFALSE 20502
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
20477: LD_ADDR_EXP 84
20481: PUSH
20482: LD_EXP 84
20486: PPUSH
20487: LD_VAR 0 1
20491: PPUSH
20492: LD_INT 0
20494: PPUSH
20495: CALL_OW 1
20499: ST_TO_ADDR
20500: GO 20553
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
20502: LD_ADDR_EXP 84
20506: PUSH
20507: LD_EXP 84
20511: PPUSH
20512: LD_VAR 0 1
20516: PPUSH
20517: LD_VAR 0 1
20521: PPUSH
20522: CALL_OW 255
20526: PUSH
20527: LD_VAR 0 1
20531: PUSH
20532: LD_VAR 0 2
20536: PUSH
20537: LD_VAR 0 3
20541: PUSH
20542: EMPTY
20543: LIST
20544: LIST
20545: LIST
20546: LIST
20547: PPUSH
20548: CALL_OW 1
20552: ST_TO_ADDR
// UpdateFactoryWaypoints ;
20553: CALL 20562 0 0
// end ;
20557: LD_VAR 0 4
20561: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
20562: LD_INT 0
20564: PPUSH
20565: PPUSH
20566: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
20567: LD_STRING resetFactoryWaypoint();
20569: PPUSH
20570: CALL_OW 559
// if factoryWaypoints then
20574: LD_EXP 84
20578: IFFALSE 20704
// begin list := PrepareArray ( factoryWaypoints ) ;
20580: LD_ADDR_VAR 0 3
20584: PUSH
20585: LD_EXP 84
20589: PPUSH
20590: CALL 67173 0 1
20594: ST_TO_ADDR
// for i := 1 to list do
20595: LD_ADDR_VAR 0 2
20599: PUSH
20600: DOUBLE
20601: LD_INT 1
20603: DEC
20604: ST_TO_ADDR
20605: LD_VAR 0 3
20609: PUSH
20610: FOR_TO
20611: IFFALSE 20702
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
20613: LD_STRING setFactoryWaypointXY(
20615: PUSH
20616: LD_VAR 0 3
20620: PUSH
20621: LD_VAR 0 2
20625: ARRAY
20626: PUSH
20627: LD_INT 1
20629: ARRAY
20630: STR
20631: PUSH
20632: LD_STRING ,
20634: STR
20635: PUSH
20636: LD_VAR 0 3
20640: PUSH
20641: LD_VAR 0 2
20645: ARRAY
20646: PUSH
20647: LD_INT 2
20649: ARRAY
20650: STR
20651: PUSH
20652: LD_STRING ,
20654: STR
20655: PUSH
20656: LD_VAR 0 3
20660: PUSH
20661: LD_VAR 0 2
20665: ARRAY
20666: PUSH
20667: LD_INT 3
20669: ARRAY
20670: STR
20671: PUSH
20672: LD_STRING ,
20674: STR
20675: PUSH
20676: LD_VAR 0 3
20680: PUSH
20681: LD_VAR 0 2
20685: ARRAY
20686: PUSH
20687: LD_INT 4
20689: ARRAY
20690: STR
20691: PUSH
20692: LD_STRING )
20694: STR
20695: PPUSH
20696: CALL_OW 559
20700: GO 20610
20702: POP
20703: POP
// end ; end ;
20704: LD_VAR 0 1
20708: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
20709: LD_INT 0
20711: PPUSH
// if HexInfo ( x , y ) = warehouse then
20712: LD_VAR 0 2
20716: PPUSH
20717: LD_VAR 0 3
20721: PPUSH
20722: CALL_OW 428
20726: PUSH
20727: LD_VAR 0 1
20731: EQUAL
20732: IFFALSE 20759
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
20734: LD_ADDR_EXP 85
20738: PUSH
20739: LD_EXP 85
20743: PPUSH
20744: LD_VAR 0 1
20748: PPUSH
20749: LD_INT 0
20751: PPUSH
20752: CALL_OW 1
20756: ST_TO_ADDR
20757: GO 20810
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
20759: LD_ADDR_EXP 85
20763: PUSH
20764: LD_EXP 85
20768: PPUSH
20769: LD_VAR 0 1
20773: PPUSH
20774: LD_VAR 0 1
20778: PPUSH
20779: CALL_OW 255
20783: PUSH
20784: LD_VAR 0 1
20788: PUSH
20789: LD_VAR 0 2
20793: PUSH
20794: LD_VAR 0 3
20798: PUSH
20799: EMPTY
20800: LIST
20801: LIST
20802: LIST
20803: LIST
20804: PPUSH
20805: CALL_OW 1
20809: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
20810: CALL 20819 0 0
// end ;
20814: LD_VAR 0 4
20818: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
20819: LD_INT 0
20821: PPUSH
20822: PPUSH
20823: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
20824: LD_STRING resetWarehouseGatheringPoints();
20826: PPUSH
20827: CALL_OW 559
// if warehouseGatheringPoints then
20831: LD_EXP 85
20835: IFFALSE 20961
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
20837: LD_ADDR_VAR 0 3
20841: PUSH
20842: LD_EXP 85
20846: PPUSH
20847: CALL 67173 0 1
20851: ST_TO_ADDR
// for i := 1 to list do
20852: LD_ADDR_VAR 0 2
20856: PUSH
20857: DOUBLE
20858: LD_INT 1
20860: DEC
20861: ST_TO_ADDR
20862: LD_VAR 0 3
20866: PUSH
20867: FOR_TO
20868: IFFALSE 20959
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
20870: LD_STRING setWarehouseGatheringPointXY(
20872: PUSH
20873: LD_VAR 0 3
20877: PUSH
20878: LD_VAR 0 2
20882: ARRAY
20883: PUSH
20884: LD_INT 1
20886: ARRAY
20887: STR
20888: PUSH
20889: LD_STRING ,
20891: STR
20892: PUSH
20893: LD_VAR 0 3
20897: PUSH
20898: LD_VAR 0 2
20902: ARRAY
20903: PUSH
20904: LD_INT 2
20906: ARRAY
20907: STR
20908: PUSH
20909: LD_STRING ,
20911: STR
20912: PUSH
20913: LD_VAR 0 3
20917: PUSH
20918: LD_VAR 0 2
20922: ARRAY
20923: PUSH
20924: LD_INT 3
20926: ARRAY
20927: STR
20928: PUSH
20929: LD_STRING ,
20931: STR
20932: PUSH
20933: LD_VAR 0 3
20937: PUSH
20938: LD_VAR 0 2
20942: ARRAY
20943: PUSH
20944: LD_INT 4
20946: ARRAY
20947: STR
20948: PUSH
20949: LD_STRING )
20951: STR
20952: PPUSH
20953: CALL_OW 559
20957: GO 20867
20959: POP
20960: POP
// end ; end ;
20961: LD_VAR 0 1
20965: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
20966: LD_EXP 85
20970: IFFALSE 21655
20972: GO 20974
20974: DISABLE
20975: LD_INT 0
20977: PPUSH
20978: PPUSH
20979: PPUSH
20980: PPUSH
20981: PPUSH
20982: PPUSH
20983: PPUSH
20984: PPUSH
20985: PPUSH
// begin enable ;
20986: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
20987: LD_ADDR_VAR 0 3
20991: PUSH
20992: LD_EXP 85
20996: PPUSH
20997: CALL 67173 0 1
21001: ST_TO_ADDR
// if not list then
21002: LD_VAR 0 3
21006: NOT
21007: IFFALSE 21011
// exit ;
21009: GO 21655
// for i := 1 to list do
21011: LD_ADDR_VAR 0 1
21015: PUSH
21016: DOUBLE
21017: LD_INT 1
21019: DEC
21020: ST_TO_ADDR
21021: LD_VAR 0 3
21025: PUSH
21026: FOR_TO
21027: IFFALSE 21653
// begin depot := list [ i ] [ 2 ] ;
21029: LD_ADDR_VAR 0 8
21033: PUSH
21034: LD_VAR 0 3
21038: PUSH
21039: LD_VAR 0 1
21043: ARRAY
21044: PUSH
21045: LD_INT 2
21047: ARRAY
21048: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
21049: LD_ADDR_VAR 0 5
21053: PUSH
21054: LD_VAR 0 3
21058: PUSH
21059: LD_VAR 0 1
21063: ARRAY
21064: PUSH
21065: LD_INT 1
21067: ARRAY
21068: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
21069: LD_VAR 0 8
21073: PPUSH
21074: CALL_OW 301
21078: PUSH
21079: LD_VAR 0 5
21083: PUSH
21084: LD_VAR 0 8
21088: PPUSH
21089: CALL_OW 255
21093: NONEQUAL
21094: OR
21095: IFFALSE 21124
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
21097: LD_ADDR_EXP 85
21101: PUSH
21102: LD_EXP 85
21106: PPUSH
21107: LD_VAR 0 8
21111: PPUSH
21112: LD_INT 0
21114: PPUSH
21115: CALL_OW 1
21119: ST_TO_ADDR
// exit ;
21120: POP
21121: POP
21122: GO 21655
// end ; x := list [ i ] [ 3 ] ;
21124: LD_ADDR_VAR 0 6
21128: PUSH
21129: LD_VAR 0 3
21133: PUSH
21134: LD_VAR 0 1
21138: ARRAY
21139: PUSH
21140: LD_INT 3
21142: ARRAY
21143: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
21144: LD_ADDR_VAR 0 7
21148: PUSH
21149: LD_VAR 0 3
21153: PUSH
21154: LD_VAR 0 1
21158: ARRAY
21159: PUSH
21160: LD_INT 4
21162: ARRAY
21163: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
21164: LD_ADDR_VAR 0 9
21168: PUSH
21169: LD_VAR 0 6
21173: PPUSH
21174: LD_VAR 0 7
21178: PPUSH
21179: LD_INT 16
21181: PPUSH
21182: CALL 65761 0 3
21186: ST_TO_ADDR
// if not cratesNearbyPoint then
21187: LD_VAR 0 9
21191: NOT
21192: IFFALSE 21198
// exit ;
21194: POP
21195: POP
21196: GO 21655
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
21198: LD_ADDR_VAR 0 4
21202: PUSH
21203: LD_INT 22
21205: PUSH
21206: LD_VAR 0 5
21210: PUSH
21211: EMPTY
21212: LIST
21213: LIST
21214: PUSH
21215: LD_INT 3
21217: PUSH
21218: LD_INT 60
21220: PUSH
21221: EMPTY
21222: LIST
21223: PUSH
21224: EMPTY
21225: LIST
21226: LIST
21227: PUSH
21228: LD_INT 91
21230: PUSH
21231: LD_VAR 0 8
21235: PUSH
21236: LD_INT 6
21238: PUSH
21239: EMPTY
21240: LIST
21241: LIST
21242: LIST
21243: PUSH
21244: LD_INT 2
21246: PUSH
21247: LD_INT 25
21249: PUSH
21250: LD_INT 2
21252: PUSH
21253: EMPTY
21254: LIST
21255: LIST
21256: PUSH
21257: LD_INT 25
21259: PUSH
21260: LD_INT 16
21262: PUSH
21263: EMPTY
21264: LIST
21265: LIST
21266: PUSH
21267: EMPTY
21268: LIST
21269: LIST
21270: LIST
21271: PUSH
21272: EMPTY
21273: LIST
21274: LIST
21275: LIST
21276: LIST
21277: PPUSH
21278: CALL_OW 69
21282: PUSH
21283: LD_VAR 0 8
21287: PPUSH
21288: CALL_OW 313
21292: PPUSH
21293: LD_INT 3
21295: PUSH
21296: LD_INT 60
21298: PUSH
21299: EMPTY
21300: LIST
21301: PUSH
21302: EMPTY
21303: LIST
21304: LIST
21305: PUSH
21306: LD_INT 2
21308: PUSH
21309: LD_INT 25
21311: PUSH
21312: LD_INT 2
21314: PUSH
21315: EMPTY
21316: LIST
21317: LIST
21318: PUSH
21319: LD_INT 25
21321: PUSH
21322: LD_INT 16
21324: PUSH
21325: EMPTY
21326: LIST
21327: LIST
21328: PUSH
21329: EMPTY
21330: LIST
21331: LIST
21332: LIST
21333: PUSH
21334: EMPTY
21335: LIST
21336: LIST
21337: PPUSH
21338: CALL_OW 72
21342: UNION
21343: ST_TO_ADDR
// if tmp then
21344: LD_VAR 0 4
21348: IFFALSE 21428
// begin tmp := ShrinkArray ( tmp , 3 ) ;
21350: LD_ADDR_VAR 0 4
21354: PUSH
21355: LD_VAR 0 4
21359: PPUSH
21360: LD_INT 3
21362: PPUSH
21363: CALL 63730 0 2
21367: ST_TO_ADDR
// for j in tmp do
21368: LD_ADDR_VAR 0 2
21372: PUSH
21373: LD_VAR 0 4
21377: PUSH
21378: FOR_IN
21379: IFFALSE 21422
// begin if IsInUnit ( j ) then
21381: LD_VAR 0 2
21385: PPUSH
21386: CALL_OW 310
21390: IFFALSE 21401
// ComExit ( j ) ;
21392: LD_VAR 0 2
21396: PPUSH
21397: CALL 63813 0 1
// AddComCollect ( j , x , y ) ;
21401: LD_VAR 0 2
21405: PPUSH
21406: LD_VAR 0 6
21410: PPUSH
21411: LD_VAR 0 7
21415: PPUSH
21416: CALL_OW 177
// end ;
21420: GO 21378
21422: POP
21423: POP
// exit ;
21424: POP
21425: POP
21426: GO 21655
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
21428: LD_ADDR_VAR 0 4
21432: PUSH
21433: LD_INT 22
21435: PUSH
21436: LD_VAR 0 5
21440: PUSH
21441: EMPTY
21442: LIST
21443: LIST
21444: PUSH
21445: LD_INT 91
21447: PUSH
21448: LD_VAR 0 8
21452: PUSH
21453: LD_INT 8
21455: PUSH
21456: EMPTY
21457: LIST
21458: LIST
21459: LIST
21460: PUSH
21461: LD_INT 2
21463: PUSH
21464: LD_INT 34
21466: PUSH
21467: LD_INT 12
21469: PUSH
21470: EMPTY
21471: LIST
21472: LIST
21473: PUSH
21474: LD_INT 34
21476: PUSH
21477: LD_INT 51
21479: PUSH
21480: EMPTY
21481: LIST
21482: LIST
21483: PUSH
21484: LD_INT 34
21486: PUSH
21487: LD_INT 32
21489: PUSH
21490: EMPTY
21491: LIST
21492: LIST
21493: PUSH
21494: LD_INT 34
21496: PUSH
21497: LD_INT 89
21499: PUSH
21500: EMPTY
21501: LIST
21502: LIST
21503: PUSH
21504: EMPTY
21505: LIST
21506: LIST
21507: LIST
21508: LIST
21509: LIST
21510: PUSH
21511: EMPTY
21512: LIST
21513: LIST
21514: LIST
21515: PPUSH
21516: CALL_OW 69
21520: ST_TO_ADDR
// if tmp then
21521: LD_VAR 0 4
21525: IFFALSE 21651
// begin for j in tmp do
21527: LD_ADDR_VAR 0 2
21531: PUSH
21532: LD_VAR 0 4
21536: PUSH
21537: FOR_IN
21538: IFFALSE 21649
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
21540: LD_VAR 0 2
21544: PPUSH
21545: CALL_OW 262
21549: PUSH
21550: LD_INT 3
21552: EQUAL
21553: PUSH
21554: LD_VAR 0 2
21558: PPUSH
21559: CALL_OW 261
21563: PUSH
21564: LD_INT 20
21566: GREATER
21567: OR
21568: PUSH
21569: LD_VAR 0 2
21573: PPUSH
21574: CALL_OW 314
21578: NOT
21579: AND
21580: PUSH
21581: LD_VAR 0 2
21585: PPUSH
21586: CALL_OW 263
21590: PUSH
21591: LD_INT 1
21593: NONEQUAL
21594: PUSH
21595: LD_VAR 0 2
21599: PPUSH
21600: CALL_OW 311
21604: OR
21605: AND
21606: IFFALSE 21647
// begin ComCollect ( j , x , y ) ;
21608: LD_VAR 0 2
21612: PPUSH
21613: LD_VAR 0 6
21617: PPUSH
21618: LD_VAR 0 7
21622: PPUSH
21623: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
21627: LD_VAR 0 2
21631: PPUSH
21632: LD_VAR 0 8
21636: PPUSH
21637: CALL_OW 172
// exit ;
21641: POP
21642: POP
21643: POP
21644: POP
21645: GO 21655
// end ;
21647: GO 21537
21649: POP
21650: POP
// end ; end ;
21651: GO 21026
21653: POP
21654: POP
// end ; end_of_file
21655: PPOPN 9
21657: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
21658: LD_INT 0
21660: PPUSH
21661: PPUSH
21662: PPUSH
21663: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
21664: LD_VAR 0 1
21668: PPUSH
21669: CALL_OW 264
21673: PUSH
21674: LD_INT 91
21676: EQUAL
21677: IFFALSE 21749
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
21679: LD_INT 68
21681: PPUSH
21682: LD_VAR 0 1
21686: PPUSH
21687: CALL_OW 255
21691: PPUSH
21692: CALL_OW 321
21696: PUSH
21697: LD_INT 2
21699: EQUAL
21700: IFFALSE 21712
// eff := 70 else
21702: LD_ADDR_VAR 0 4
21706: PUSH
21707: LD_INT 70
21709: ST_TO_ADDR
21710: GO 21720
// eff := 30 ;
21712: LD_ADDR_VAR 0 4
21716: PUSH
21717: LD_INT 30
21719: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
21720: LD_VAR 0 1
21724: PPUSH
21725: CALL_OW 250
21729: PPUSH
21730: LD_VAR 0 1
21734: PPUSH
21735: CALL_OW 251
21739: PPUSH
21740: LD_VAR 0 4
21744: PPUSH
21745: CALL_OW 495
// end ; end ;
21749: LD_VAR 0 2
21753: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
21754: LD_INT 0
21756: PPUSH
// end ;
21757: LD_VAR 0 4
21761: RET
// export function SOS_Command ( cmd ) ; begin
21762: LD_INT 0
21764: PPUSH
// end ;
21765: LD_VAR 0 2
21769: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
21770: LD_INT 0
21772: PPUSH
// end ;
21773: LD_VAR 0 6
21777: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
21778: LD_INT 0
21780: PPUSH
21781: PPUSH
// if not vehicle or not factory then
21782: LD_VAR 0 1
21786: NOT
21787: PUSH
21788: LD_VAR 0 2
21792: NOT
21793: OR
21794: IFFALSE 21798
// exit ;
21796: GO 22029
// if factoryWaypoints >= factory then
21798: LD_EXP 84
21802: PUSH
21803: LD_VAR 0 2
21807: GREATEREQUAL
21808: IFFALSE 22029
// if factoryWaypoints [ factory ] then
21810: LD_EXP 84
21814: PUSH
21815: LD_VAR 0 2
21819: ARRAY
21820: IFFALSE 22029
// begin if GetControl ( vehicle ) = control_manual then
21822: LD_VAR 0 1
21826: PPUSH
21827: CALL_OW 263
21831: PUSH
21832: LD_INT 1
21834: EQUAL
21835: IFFALSE 21916
// begin driver := IsDrivenBy ( vehicle ) ;
21837: LD_ADDR_VAR 0 4
21841: PUSH
21842: LD_VAR 0 1
21846: PPUSH
21847: CALL_OW 311
21851: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21852: LD_VAR 0 4
21856: PPUSH
21857: LD_EXP 84
21861: PUSH
21862: LD_VAR 0 2
21866: ARRAY
21867: PUSH
21868: LD_INT 3
21870: ARRAY
21871: PPUSH
21872: LD_EXP 84
21876: PUSH
21877: LD_VAR 0 2
21881: ARRAY
21882: PUSH
21883: LD_INT 4
21885: ARRAY
21886: PPUSH
21887: CALL_OW 171
// AddComExitVehicle ( driver ) ;
21891: LD_VAR 0 4
21895: PPUSH
21896: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
21900: LD_VAR 0 4
21904: PPUSH
21905: LD_VAR 0 2
21909: PPUSH
21910: CALL_OW 180
// end else
21914: GO 22029
// if GetControl ( vehicle ) = control_remote then
21916: LD_VAR 0 1
21920: PPUSH
21921: CALL_OW 263
21925: PUSH
21926: LD_INT 2
21928: EQUAL
21929: IFFALSE 21990
// begin wait ( 0 0$2 ) ;
21931: LD_INT 70
21933: PPUSH
21934: CALL_OW 67
// if Connect ( vehicle ) then
21938: LD_VAR 0 1
21942: PPUSH
21943: CALL 34053 0 1
21947: IFFALSE 21988
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21949: LD_VAR 0 1
21953: PPUSH
21954: LD_EXP 84
21958: PUSH
21959: LD_VAR 0 2
21963: ARRAY
21964: PUSH
21965: LD_INT 3
21967: ARRAY
21968: PPUSH
21969: LD_EXP 84
21973: PUSH
21974: LD_VAR 0 2
21978: ARRAY
21979: PUSH
21980: LD_INT 4
21982: ARRAY
21983: PPUSH
21984: CALL_OW 171
// end else
21988: GO 22029
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21990: LD_VAR 0 1
21994: PPUSH
21995: LD_EXP 84
21999: PUSH
22000: LD_VAR 0 2
22004: ARRAY
22005: PUSH
22006: LD_INT 3
22008: ARRAY
22009: PPUSH
22010: LD_EXP 84
22014: PUSH
22015: LD_VAR 0 2
22019: ARRAY
22020: PUSH
22021: LD_INT 4
22023: ARRAY
22024: PPUSH
22025: CALL_OW 171
// end ; end ;
22029: LD_VAR 0 3
22033: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
22034: LD_INT 0
22036: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
22037: LD_VAR 0 1
22041: PUSH
22042: LD_INT 250
22044: EQUAL
22045: PUSH
22046: LD_VAR 0 2
22050: PPUSH
22051: CALL_OW 264
22055: PUSH
22056: LD_INT 81
22058: EQUAL
22059: AND
22060: IFFALSE 22081
// MinerPlaceMine ( unit , x , y ) ;
22062: LD_VAR 0 2
22066: PPUSH
22067: LD_VAR 0 4
22071: PPUSH
22072: LD_VAR 0 5
22076: PPUSH
22077: CALL 24466 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
22081: LD_VAR 0 1
22085: PUSH
22086: LD_INT 251
22088: EQUAL
22089: PUSH
22090: LD_VAR 0 2
22094: PPUSH
22095: CALL_OW 264
22099: PUSH
22100: LD_INT 81
22102: EQUAL
22103: AND
22104: IFFALSE 22125
// MinerDetonateMine ( unit , x , y ) ;
22106: LD_VAR 0 2
22110: PPUSH
22111: LD_VAR 0 4
22115: PPUSH
22116: LD_VAR 0 5
22120: PPUSH
22121: CALL 24741 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
22125: LD_VAR 0 1
22129: PUSH
22130: LD_INT 252
22132: EQUAL
22133: PUSH
22134: LD_VAR 0 2
22138: PPUSH
22139: CALL_OW 264
22143: PUSH
22144: LD_INT 81
22146: EQUAL
22147: AND
22148: IFFALSE 22169
// MinerCreateMinefield ( unit , x , y ) ;
22150: LD_VAR 0 2
22154: PPUSH
22155: LD_VAR 0 4
22159: PPUSH
22160: LD_VAR 0 5
22164: PPUSH
22165: CALL 25158 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
22169: LD_VAR 0 1
22173: PUSH
22174: LD_INT 253
22176: EQUAL
22177: PUSH
22178: LD_VAR 0 2
22182: PPUSH
22183: CALL_OW 257
22187: PUSH
22188: LD_INT 5
22190: EQUAL
22191: AND
22192: IFFALSE 22213
// ComBinocular ( unit , x , y ) ;
22194: LD_VAR 0 2
22198: PPUSH
22199: LD_VAR 0 4
22203: PPUSH
22204: LD_VAR 0 5
22208: PPUSH
22209: CALL 25527 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
22213: LD_VAR 0 1
22217: PUSH
22218: LD_INT 254
22220: EQUAL
22221: PUSH
22222: LD_VAR 0 2
22226: PPUSH
22227: CALL_OW 264
22231: PUSH
22232: LD_INT 99
22234: EQUAL
22235: AND
22236: PUSH
22237: LD_VAR 0 3
22241: PPUSH
22242: CALL_OW 263
22246: PUSH
22247: LD_INT 3
22249: EQUAL
22250: AND
22251: IFFALSE 22267
// HackDestroyVehicle ( unit , selectedUnit ) ;
22253: LD_VAR 0 2
22257: PPUSH
22258: LD_VAR 0 3
22262: PPUSH
22263: CALL 23830 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
22267: LD_VAR 0 1
22271: PUSH
22272: LD_INT 255
22274: EQUAL
22275: PUSH
22276: LD_VAR 0 2
22280: PPUSH
22281: CALL_OW 264
22285: PUSH
22286: LD_INT 14
22288: PUSH
22289: LD_INT 53
22291: PUSH
22292: EMPTY
22293: LIST
22294: LIST
22295: IN
22296: AND
22297: PUSH
22298: LD_VAR 0 4
22302: PPUSH
22303: LD_VAR 0 5
22307: PPUSH
22308: CALL_OW 488
22312: AND
22313: IFFALSE 22337
// CutTreeXYR ( unit , x , y , 12 ) ;
22315: LD_VAR 0 2
22319: PPUSH
22320: LD_VAR 0 4
22324: PPUSH
22325: LD_VAR 0 5
22329: PPUSH
22330: LD_INT 12
22332: PPUSH
22333: CALL 22400 0 4
// if cmd = 256 then
22337: LD_VAR 0 1
22341: PUSH
22342: LD_INT 256
22344: EQUAL
22345: IFFALSE 22366
// SetFactoryWaypoint ( unit , x , y ) ;
22347: LD_VAR 0 2
22351: PPUSH
22352: LD_VAR 0 4
22356: PPUSH
22357: LD_VAR 0 5
22361: PPUSH
22362: CALL 20347 0 3
// if cmd = 257 then
22366: LD_VAR 0 1
22370: PUSH
22371: LD_INT 257
22373: EQUAL
22374: IFFALSE 22395
// SetWarehouseGatheringPoint ( unit , x , y ) ;
22376: LD_VAR 0 2
22380: PPUSH
22381: LD_VAR 0 4
22385: PPUSH
22386: LD_VAR 0 5
22390: PPUSH
22391: CALL 20709 0 3
// end ;
22395: LD_VAR 0 6
22399: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
22400: LD_INT 0
22402: PPUSH
22403: PPUSH
22404: PPUSH
22405: PPUSH
22406: PPUSH
22407: PPUSH
22408: PPUSH
22409: PPUSH
22410: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
22411: LD_VAR 0 1
22415: NOT
22416: PUSH
22417: LD_VAR 0 2
22421: PPUSH
22422: LD_VAR 0 3
22426: PPUSH
22427: CALL_OW 488
22431: NOT
22432: OR
22433: PUSH
22434: LD_VAR 0 4
22438: NOT
22439: OR
22440: IFFALSE 22444
// exit ;
22442: GO 22784
// list := [ ] ;
22444: LD_ADDR_VAR 0 13
22448: PUSH
22449: EMPTY
22450: ST_TO_ADDR
// if x - r < 0 then
22451: LD_VAR 0 2
22455: PUSH
22456: LD_VAR 0 4
22460: MINUS
22461: PUSH
22462: LD_INT 0
22464: LESS
22465: IFFALSE 22477
// min_x := 0 else
22467: LD_ADDR_VAR 0 7
22471: PUSH
22472: LD_INT 0
22474: ST_TO_ADDR
22475: GO 22493
// min_x := x - r ;
22477: LD_ADDR_VAR 0 7
22481: PUSH
22482: LD_VAR 0 2
22486: PUSH
22487: LD_VAR 0 4
22491: MINUS
22492: ST_TO_ADDR
// if y - r < 0 then
22493: LD_VAR 0 3
22497: PUSH
22498: LD_VAR 0 4
22502: MINUS
22503: PUSH
22504: LD_INT 0
22506: LESS
22507: IFFALSE 22519
// min_y := 0 else
22509: LD_ADDR_VAR 0 8
22513: PUSH
22514: LD_INT 0
22516: ST_TO_ADDR
22517: GO 22535
// min_y := y - r ;
22519: LD_ADDR_VAR 0 8
22523: PUSH
22524: LD_VAR 0 3
22528: PUSH
22529: LD_VAR 0 4
22533: MINUS
22534: ST_TO_ADDR
// max_x := x + r ;
22535: LD_ADDR_VAR 0 9
22539: PUSH
22540: LD_VAR 0 2
22544: PUSH
22545: LD_VAR 0 4
22549: PLUS
22550: ST_TO_ADDR
// max_y := y + r ;
22551: LD_ADDR_VAR 0 10
22555: PUSH
22556: LD_VAR 0 3
22560: PUSH
22561: LD_VAR 0 4
22565: PLUS
22566: ST_TO_ADDR
// for _x = min_x to max_x do
22567: LD_ADDR_VAR 0 11
22571: PUSH
22572: DOUBLE
22573: LD_VAR 0 7
22577: DEC
22578: ST_TO_ADDR
22579: LD_VAR 0 9
22583: PUSH
22584: FOR_TO
22585: IFFALSE 22702
// for _y = min_y to max_y do
22587: LD_ADDR_VAR 0 12
22591: PUSH
22592: DOUBLE
22593: LD_VAR 0 8
22597: DEC
22598: ST_TO_ADDR
22599: LD_VAR 0 10
22603: PUSH
22604: FOR_TO
22605: IFFALSE 22698
// begin if not ValidHex ( _x , _y ) then
22607: LD_VAR 0 11
22611: PPUSH
22612: LD_VAR 0 12
22616: PPUSH
22617: CALL_OW 488
22621: NOT
22622: IFFALSE 22626
// continue ;
22624: GO 22604
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
22626: LD_VAR 0 11
22630: PPUSH
22631: LD_VAR 0 12
22635: PPUSH
22636: CALL_OW 351
22640: PUSH
22641: LD_VAR 0 11
22645: PPUSH
22646: LD_VAR 0 12
22650: PPUSH
22651: CALL_OW 554
22655: AND
22656: IFFALSE 22696
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
22658: LD_ADDR_VAR 0 13
22662: PUSH
22663: LD_VAR 0 13
22667: PPUSH
22668: LD_VAR 0 13
22672: PUSH
22673: LD_INT 1
22675: PLUS
22676: PPUSH
22677: LD_VAR 0 11
22681: PUSH
22682: LD_VAR 0 12
22686: PUSH
22687: EMPTY
22688: LIST
22689: LIST
22690: PPUSH
22691: CALL_OW 2
22695: ST_TO_ADDR
// end ;
22696: GO 22604
22698: POP
22699: POP
22700: GO 22584
22702: POP
22703: POP
// if not list then
22704: LD_VAR 0 13
22708: NOT
22709: IFFALSE 22713
// exit ;
22711: GO 22784
// for i in list do
22713: LD_ADDR_VAR 0 6
22717: PUSH
22718: LD_VAR 0 13
22722: PUSH
22723: FOR_IN
22724: IFFALSE 22782
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
22726: LD_VAR 0 1
22730: PPUSH
22731: LD_STRING M
22733: PUSH
22734: LD_VAR 0 6
22738: PUSH
22739: LD_INT 1
22741: ARRAY
22742: PUSH
22743: LD_VAR 0 6
22747: PUSH
22748: LD_INT 2
22750: ARRAY
22751: PUSH
22752: LD_INT 0
22754: PUSH
22755: LD_INT 0
22757: PUSH
22758: LD_INT 0
22760: PUSH
22761: LD_INT 0
22763: PUSH
22764: EMPTY
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: PUSH
22773: EMPTY
22774: LIST
22775: PPUSH
22776: CALL_OW 447
22780: GO 22723
22782: POP
22783: POP
// end ;
22784: LD_VAR 0 5
22788: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
22789: LD_EXP 87
22793: NOT
22794: IFFALSE 22844
22796: GO 22798
22798: DISABLE
// begin initHack := true ;
22799: LD_ADDR_EXP 87
22803: PUSH
22804: LD_INT 1
22806: ST_TO_ADDR
// hackTanks := [ ] ;
22807: LD_ADDR_EXP 88
22811: PUSH
22812: EMPTY
22813: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
22814: LD_ADDR_EXP 89
22818: PUSH
22819: EMPTY
22820: ST_TO_ADDR
// hackLimit := 3 ;
22821: LD_ADDR_EXP 90
22825: PUSH
22826: LD_INT 3
22828: ST_TO_ADDR
// hackDist := 12 ;
22829: LD_ADDR_EXP 91
22833: PUSH
22834: LD_INT 12
22836: ST_TO_ADDR
// hackCounter := [ ] ;
22837: LD_ADDR_EXP 92
22841: PUSH
22842: EMPTY
22843: ST_TO_ADDR
// end ;
22844: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
22845: LD_EXP 87
22849: PUSH
22850: LD_INT 34
22852: PUSH
22853: LD_INT 99
22855: PUSH
22856: EMPTY
22857: LIST
22858: LIST
22859: PPUSH
22860: CALL_OW 69
22864: AND
22865: IFFALSE 23118
22867: GO 22869
22869: DISABLE
22870: LD_INT 0
22872: PPUSH
22873: PPUSH
// begin enable ;
22874: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
22875: LD_ADDR_VAR 0 1
22879: PUSH
22880: LD_INT 34
22882: PUSH
22883: LD_INT 99
22885: PUSH
22886: EMPTY
22887: LIST
22888: LIST
22889: PPUSH
22890: CALL_OW 69
22894: PUSH
22895: FOR_IN
22896: IFFALSE 23116
// begin if not i in hackTanks then
22898: LD_VAR 0 1
22902: PUSH
22903: LD_EXP 88
22907: IN
22908: NOT
22909: IFFALSE 22992
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
22911: LD_ADDR_EXP 88
22915: PUSH
22916: LD_EXP 88
22920: PPUSH
22921: LD_EXP 88
22925: PUSH
22926: LD_INT 1
22928: PLUS
22929: PPUSH
22930: LD_VAR 0 1
22934: PPUSH
22935: CALL_OW 1
22939: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
22940: LD_ADDR_EXP 89
22944: PUSH
22945: LD_EXP 89
22949: PPUSH
22950: LD_EXP 89
22954: PUSH
22955: LD_INT 1
22957: PLUS
22958: PPUSH
22959: EMPTY
22960: PPUSH
22961: CALL_OW 1
22965: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
22966: LD_ADDR_EXP 92
22970: PUSH
22971: LD_EXP 92
22975: PPUSH
22976: LD_EXP 92
22980: PUSH
22981: LD_INT 1
22983: PLUS
22984: PPUSH
22985: EMPTY
22986: PPUSH
22987: CALL_OW 1
22991: ST_TO_ADDR
// end ; if not IsOk ( i ) then
22992: LD_VAR 0 1
22996: PPUSH
22997: CALL_OW 302
23001: NOT
23002: IFFALSE 23015
// begin HackUnlinkAll ( i ) ;
23004: LD_VAR 0 1
23008: PPUSH
23009: CALL 23121 0 1
// continue ;
23013: GO 22895
// end ; HackCheckCapturedStatus ( i ) ;
23015: LD_VAR 0 1
23019: PPUSH
23020: CALL 23564 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
23024: LD_ADDR_VAR 0 2
23028: PUSH
23029: LD_INT 81
23031: PUSH
23032: LD_VAR 0 1
23036: PPUSH
23037: CALL_OW 255
23041: PUSH
23042: EMPTY
23043: LIST
23044: LIST
23045: PUSH
23046: LD_INT 33
23048: PUSH
23049: LD_INT 3
23051: PUSH
23052: EMPTY
23053: LIST
23054: LIST
23055: PUSH
23056: LD_INT 91
23058: PUSH
23059: LD_VAR 0 1
23063: PUSH
23064: LD_EXP 91
23068: PUSH
23069: EMPTY
23070: LIST
23071: LIST
23072: LIST
23073: PUSH
23074: LD_INT 50
23076: PUSH
23077: EMPTY
23078: LIST
23079: PUSH
23080: EMPTY
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: PPUSH
23086: CALL_OW 69
23090: ST_TO_ADDR
// if not tmp then
23091: LD_VAR 0 2
23095: NOT
23096: IFFALSE 23100
// continue ;
23098: GO 22895
// HackLink ( i , tmp ) ;
23100: LD_VAR 0 1
23104: PPUSH
23105: LD_VAR 0 2
23109: PPUSH
23110: CALL 23257 0 2
// end ;
23114: GO 22895
23116: POP
23117: POP
// end ;
23118: PPOPN 2
23120: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
23121: LD_INT 0
23123: PPUSH
23124: PPUSH
23125: PPUSH
// if not hack in hackTanks then
23126: LD_VAR 0 1
23130: PUSH
23131: LD_EXP 88
23135: IN
23136: NOT
23137: IFFALSE 23141
// exit ;
23139: GO 23252
// index := GetElementIndex ( hackTanks , hack ) ;
23141: LD_ADDR_VAR 0 4
23145: PUSH
23146: LD_EXP 88
23150: PPUSH
23151: LD_VAR 0 1
23155: PPUSH
23156: CALL 30869 0 2
23160: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
23161: LD_EXP 89
23165: PUSH
23166: LD_VAR 0 4
23170: ARRAY
23171: IFFALSE 23252
// begin for i in hackTanksCaptured [ index ] do
23173: LD_ADDR_VAR 0 3
23177: PUSH
23178: LD_EXP 89
23182: PUSH
23183: LD_VAR 0 4
23187: ARRAY
23188: PUSH
23189: FOR_IN
23190: IFFALSE 23216
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
23192: LD_VAR 0 3
23196: PUSH
23197: LD_INT 1
23199: ARRAY
23200: PPUSH
23201: LD_VAR 0 3
23205: PUSH
23206: LD_INT 2
23208: ARRAY
23209: PPUSH
23210: CALL_OW 235
23214: GO 23189
23216: POP
23217: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
23218: LD_ADDR_EXP 89
23222: PUSH
23223: LD_EXP 89
23227: PPUSH
23228: LD_VAR 0 4
23232: PPUSH
23233: EMPTY
23234: PPUSH
23235: CALL_OW 1
23239: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
23240: LD_VAR 0 1
23244: PPUSH
23245: LD_INT 0
23247: PPUSH
23248: CALL_OW 505
// end ; end ;
23252: LD_VAR 0 2
23256: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
23257: LD_INT 0
23259: PPUSH
23260: PPUSH
23261: PPUSH
// if not hack in hackTanks or not vehicles then
23262: LD_VAR 0 1
23266: PUSH
23267: LD_EXP 88
23271: IN
23272: NOT
23273: PUSH
23274: LD_VAR 0 2
23278: NOT
23279: OR
23280: IFFALSE 23284
// exit ;
23282: GO 23559
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
23284: LD_ADDR_VAR 0 2
23288: PUSH
23289: LD_VAR 0 1
23293: PPUSH
23294: LD_VAR 0 2
23298: PPUSH
23299: LD_INT 1
23301: PPUSH
23302: LD_INT 1
23304: PPUSH
23305: CALL 31519 0 4
23309: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
23310: LD_ADDR_VAR 0 5
23314: PUSH
23315: LD_EXP 88
23319: PPUSH
23320: LD_VAR 0 1
23324: PPUSH
23325: CALL 30869 0 2
23329: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
23330: LD_EXP 89
23334: PUSH
23335: LD_VAR 0 5
23339: ARRAY
23340: PUSH
23341: LD_EXP 90
23345: LESS
23346: IFFALSE 23535
// begin for i := 1 to vehicles do
23348: LD_ADDR_VAR 0 4
23352: PUSH
23353: DOUBLE
23354: LD_INT 1
23356: DEC
23357: ST_TO_ADDR
23358: LD_VAR 0 2
23362: PUSH
23363: FOR_TO
23364: IFFALSE 23533
// begin if hackTanksCaptured [ index ] = hackLimit then
23366: LD_EXP 89
23370: PUSH
23371: LD_VAR 0 5
23375: ARRAY
23376: PUSH
23377: LD_EXP 90
23381: EQUAL
23382: IFFALSE 23386
// break ;
23384: GO 23533
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
23386: LD_ADDR_EXP 92
23390: PUSH
23391: LD_EXP 92
23395: PPUSH
23396: LD_VAR 0 5
23400: PPUSH
23401: LD_EXP 92
23405: PUSH
23406: LD_VAR 0 5
23410: ARRAY
23411: PUSH
23412: LD_INT 1
23414: PLUS
23415: PPUSH
23416: CALL_OW 1
23420: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
23421: LD_ADDR_EXP 89
23425: PUSH
23426: LD_EXP 89
23430: PPUSH
23431: LD_VAR 0 5
23435: PUSH
23436: LD_EXP 89
23440: PUSH
23441: LD_VAR 0 5
23445: ARRAY
23446: PUSH
23447: LD_INT 1
23449: PLUS
23450: PUSH
23451: EMPTY
23452: LIST
23453: LIST
23454: PPUSH
23455: LD_VAR 0 2
23459: PUSH
23460: LD_VAR 0 4
23464: ARRAY
23465: PUSH
23466: LD_VAR 0 2
23470: PUSH
23471: LD_VAR 0 4
23475: ARRAY
23476: PPUSH
23477: CALL_OW 255
23481: PUSH
23482: EMPTY
23483: LIST
23484: LIST
23485: PPUSH
23486: CALL 31084 0 3
23490: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
23491: LD_VAR 0 2
23495: PUSH
23496: LD_VAR 0 4
23500: ARRAY
23501: PPUSH
23502: LD_VAR 0 1
23506: PPUSH
23507: CALL_OW 255
23511: PPUSH
23512: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
23516: LD_VAR 0 2
23520: PUSH
23521: LD_VAR 0 4
23525: ARRAY
23526: PPUSH
23527: CALL_OW 141
// end ;
23531: GO 23363
23533: POP
23534: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23535: LD_VAR 0 1
23539: PPUSH
23540: LD_EXP 89
23544: PUSH
23545: LD_VAR 0 5
23549: ARRAY
23550: PUSH
23551: LD_INT 0
23553: PLUS
23554: PPUSH
23555: CALL_OW 505
// end ;
23559: LD_VAR 0 3
23563: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
23564: LD_INT 0
23566: PPUSH
23567: PPUSH
23568: PPUSH
23569: PPUSH
// if not hack in hackTanks then
23570: LD_VAR 0 1
23574: PUSH
23575: LD_EXP 88
23579: IN
23580: NOT
23581: IFFALSE 23585
// exit ;
23583: GO 23825
// index := GetElementIndex ( hackTanks , hack ) ;
23585: LD_ADDR_VAR 0 4
23589: PUSH
23590: LD_EXP 88
23594: PPUSH
23595: LD_VAR 0 1
23599: PPUSH
23600: CALL 30869 0 2
23604: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
23605: LD_ADDR_VAR 0 3
23609: PUSH
23610: DOUBLE
23611: LD_EXP 89
23615: PUSH
23616: LD_VAR 0 4
23620: ARRAY
23621: INC
23622: ST_TO_ADDR
23623: LD_INT 1
23625: PUSH
23626: FOR_DOWNTO
23627: IFFALSE 23799
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
23629: LD_ADDR_VAR 0 5
23633: PUSH
23634: LD_EXP 89
23638: PUSH
23639: LD_VAR 0 4
23643: ARRAY
23644: PUSH
23645: LD_VAR 0 3
23649: ARRAY
23650: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
23651: LD_VAR 0 5
23655: PUSH
23656: LD_INT 1
23658: ARRAY
23659: PPUSH
23660: CALL_OW 302
23664: NOT
23665: PUSH
23666: LD_VAR 0 5
23670: PUSH
23671: LD_INT 1
23673: ARRAY
23674: PPUSH
23675: CALL_OW 255
23679: PUSH
23680: LD_VAR 0 1
23684: PPUSH
23685: CALL_OW 255
23689: NONEQUAL
23690: OR
23691: IFFALSE 23797
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
23693: LD_VAR 0 5
23697: PUSH
23698: LD_INT 1
23700: ARRAY
23701: PPUSH
23702: CALL_OW 305
23706: PUSH
23707: LD_VAR 0 5
23711: PUSH
23712: LD_INT 1
23714: ARRAY
23715: PPUSH
23716: CALL_OW 255
23720: PUSH
23721: LD_VAR 0 1
23725: PPUSH
23726: CALL_OW 255
23730: EQUAL
23731: AND
23732: IFFALSE 23756
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
23734: LD_VAR 0 5
23738: PUSH
23739: LD_INT 1
23741: ARRAY
23742: PPUSH
23743: LD_VAR 0 5
23747: PUSH
23748: LD_INT 2
23750: ARRAY
23751: PPUSH
23752: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
23756: LD_ADDR_EXP 89
23760: PUSH
23761: LD_EXP 89
23765: PPUSH
23766: LD_VAR 0 4
23770: PPUSH
23771: LD_EXP 89
23775: PUSH
23776: LD_VAR 0 4
23780: ARRAY
23781: PPUSH
23782: LD_VAR 0 3
23786: PPUSH
23787: CALL_OW 3
23791: PPUSH
23792: CALL_OW 1
23796: ST_TO_ADDR
// end ; end ;
23797: GO 23626
23799: POP
23800: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23801: LD_VAR 0 1
23805: PPUSH
23806: LD_EXP 89
23810: PUSH
23811: LD_VAR 0 4
23815: ARRAY
23816: PUSH
23817: LD_INT 0
23819: PLUS
23820: PPUSH
23821: CALL_OW 505
// end ;
23825: LD_VAR 0 2
23829: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
23830: LD_INT 0
23832: PPUSH
23833: PPUSH
23834: PPUSH
23835: PPUSH
// if not hack in hackTanks then
23836: LD_VAR 0 1
23840: PUSH
23841: LD_EXP 88
23845: IN
23846: NOT
23847: IFFALSE 23851
// exit ;
23849: GO 23936
// index := GetElementIndex ( hackTanks , hack ) ;
23851: LD_ADDR_VAR 0 5
23855: PUSH
23856: LD_EXP 88
23860: PPUSH
23861: LD_VAR 0 1
23865: PPUSH
23866: CALL 30869 0 2
23870: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
23871: LD_ADDR_VAR 0 4
23875: PUSH
23876: DOUBLE
23877: LD_INT 1
23879: DEC
23880: ST_TO_ADDR
23881: LD_EXP 89
23885: PUSH
23886: LD_VAR 0 5
23890: ARRAY
23891: PUSH
23892: FOR_TO
23893: IFFALSE 23934
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
23895: LD_EXP 89
23899: PUSH
23900: LD_VAR 0 5
23904: ARRAY
23905: PUSH
23906: LD_VAR 0 4
23910: ARRAY
23911: PUSH
23912: LD_INT 1
23914: ARRAY
23915: PUSH
23916: LD_VAR 0 2
23920: EQUAL
23921: IFFALSE 23932
// KillUnit ( vehicle ) ;
23923: LD_VAR 0 2
23927: PPUSH
23928: CALL_OW 66
23932: GO 23892
23934: POP
23935: POP
// end ;
23936: LD_VAR 0 3
23940: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
23941: LD_EXP 93
23945: NOT
23946: IFFALSE 23981
23948: GO 23950
23950: DISABLE
// begin initMiner := true ;
23951: LD_ADDR_EXP 93
23955: PUSH
23956: LD_INT 1
23958: ST_TO_ADDR
// minersList := [ ] ;
23959: LD_ADDR_EXP 94
23963: PUSH
23964: EMPTY
23965: ST_TO_ADDR
// minerMinesList := [ ] ;
23966: LD_ADDR_EXP 95
23970: PUSH
23971: EMPTY
23972: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
23973: LD_ADDR_EXP 96
23977: PUSH
23978: LD_INT 5
23980: ST_TO_ADDR
// end ;
23981: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
23982: LD_EXP 93
23986: PUSH
23987: LD_INT 34
23989: PUSH
23990: LD_INT 81
23992: PUSH
23993: EMPTY
23994: LIST
23995: LIST
23996: PPUSH
23997: CALL_OW 69
24001: AND
24002: IFFALSE 24463
24004: GO 24006
24006: DISABLE
24007: LD_INT 0
24009: PPUSH
24010: PPUSH
24011: PPUSH
24012: PPUSH
// begin enable ;
24013: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
24014: LD_ADDR_VAR 0 1
24018: PUSH
24019: LD_INT 34
24021: PUSH
24022: LD_INT 81
24024: PUSH
24025: EMPTY
24026: LIST
24027: LIST
24028: PPUSH
24029: CALL_OW 69
24033: PUSH
24034: FOR_IN
24035: IFFALSE 24107
// begin if not i in minersList then
24037: LD_VAR 0 1
24041: PUSH
24042: LD_EXP 94
24046: IN
24047: NOT
24048: IFFALSE 24105
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
24050: LD_ADDR_EXP 94
24054: PUSH
24055: LD_EXP 94
24059: PPUSH
24060: LD_EXP 94
24064: PUSH
24065: LD_INT 1
24067: PLUS
24068: PPUSH
24069: LD_VAR 0 1
24073: PPUSH
24074: CALL_OW 1
24078: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
24079: LD_ADDR_EXP 95
24083: PUSH
24084: LD_EXP 95
24088: PPUSH
24089: LD_EXP 95
24093: PUSH
24094: LD_INT 1
24096: PLUS
24097: PPUSH
24098: EMPTY
24099: PPUSH
24100: CALL_OW 1
24104: ST_TO_ADDR
// end end ;
24105: GO 24034
24107: POP
24108: POP
// for i := minerMinesList downto 1 do
24109: LD_ADDR_VAR 0 1
24113: PUSH
24114: DOUBLE
24115: LD_EXP 95
24119: INC
24120: ST_TO_ADDR
24121: LD_INT 1
24123: PUSH
24124: FOR_DOWNTO
24125: IFFALSE 24461
// begin if IsLive ( minersList [ i ] ) then
24127: LD_EXP 94
24131: PUSH
24132: LD_VAR 0 1
24136: ARRAY
24137: PPUSH
24138: CALL_OW 300
24142: IFFALSE 24170
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
24144: LD_EXP 94
24148: PUSH
24149: LD_VAR 0 1
24153: ARRAY
24154: PPUSH
24155: LD_EXP 95
24159: PUSH
24160: LD_VAR 0 1
24164: ARRAY
24165: PPUSH
24166: CALL_OW 505
// if not minerMinesList [ i ] then
24170: LD_EXP 95
24174: PUSH
24175: LD_VAR 0 1
24179: ARRAY
24180: NOT
24181: IFFALSE 24185
// continue ;
24183: GO 24124
// for j := minerMinesList [ i ] downto 1 do
24185: LD_ADDR_VAR 0 2
24189: PUSH
24190: DOUBLE
24191: LD_EXP 95
24195: PUSH
24196: LD_VAR 0 1
24200: ARRAY
24201: INC
24202: ST_TO_ADDR
24203: LD_INT 1
24205: PUSH
24206: FOR_DOWNTO
24207: IFFALSE 24457
// begin side := GetSide ( minersList [ i ] ) ;
24209: LD_ADDR_VAR 0 3
24213: PUSH
24214: LD_EXP 94
24218: PUSH
24219: LD_VAR 0 1
24223: ARRAY
24224: PPUSH
24225: CALL_OW 255
24229: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
24230: LD_ADDR_VAR 0 4
24234: PUSH
24235: LD_EXP 95
24239: PUSH
24240: LD_VAR 0 1
24244: ARRAY
24245: PUSH
24246: LD_VAR 0 2
24250: ARRAY
24251: PUSH
24252: LD_INT 1
24254: ARRAY
24255: PPUSH
24256: LD_EXP 95
24260: PUSH
24261: LD_VAR 0 1
24265: ARRAY
24266: PUSH
24267: LD_VAR 0 2
24271: ARRAY
24272: PUSH
24273: LD_INT 2
24275: ARRAY
24276: PPUSH
24277: CALL_OW 428
24281: ST_TO_ADDR
// if not tmp then
24282: LD_VAR 0 4
24286: NOT
24287: IFFALSE 24291
// continue ;
24289: GO 24206
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
24291: LD_VAR 0 4
24295: PUSH
24296: LD_INT 81
24298: PUSH
24299: LD_VAR 0 3
24303: PUSH
24304: EMPTY
24305: LIST
24306: LIST
24307: PPUSH
24308: CALL_OW 69
24312: IN
24313: PUSH
24314: LD_EXP 95
24318: PUSH
24319: LD_VAR 0 1
24323: ARRAY
24324: PUSH
24325: LD_VAR 0 2
24329: ARRAY
24330: PUSH
24331: LD_INT 1
24333: ARRAY
24334: PPUSH
24335: LD_EXP 95
24339: PUSH
24340: LD_VAR 0 1
24344: ARRAY
24345: PUSH
24346: LD_VAR 0 2
24350: ARRAY
24351: PUSH
24352: LD_INT 2
24354: ARRAY
24355: PPUSH
24356: CALL_OW 458
24360: AND
24361: IFFALSE 24455
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
24363: LD_EXP 95
24367: PUSH
24368: LD_VAR 0 1
24372: ARRAY
24373: PUSH
24374: LD_VAR 0 2
24378: ARRAY
24379: PUSH
24380: LD_INT 1
24382: ARRAY
24383: PPUSH
24384: LD_EXP 95
24388: PUSH
24389: LD_VAR 0 1
24393: ARRAY
24394: PUSH
24395: LD_VAR 0 2
24399: ARRAY
24400: PUSH
24401: LD_INT 2
24403: ARRAY
24404: PPUSH
24405: LD_VAR 0 3
24409: PPUSH
24410: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
24414: LD_ADDR_EXP 95
24418: PUSH
24419: LD_EXP 95
24423: PPUSH
24424: LD_VAR 0 1
24428: PPUSH
24429: LD_EXP 95
24433: PUSH
24434: LD_VAR 0 1
24438: ARRAY
24439: PPUSH
24440: LD_VAR 0 2
24444: PPUSH
24445: CALL_OW 3
24449: PPUSH
24450: CALL_OW 1
24454: ST_TO_ADDR
// end ; end ;
24455: GO 24206
24457: POP
24458: POP
// end ;
24459: GO 24124
24461: POP
24462: POP
// end ;
24463: PPOPN 4
24465: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
24466: LD_INT 0
24468: PPUSH
24469: PPUSH
// result := false ;
24470: LD_ADDR_VAR 0 4
24474: PUSH
24475: LD_INT 0
24477: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
24478: LD_VAR 0 1
24482: PPUSH
24483: CALL_OW 264
24487: PUSH
24488: LD_INT 81
24490: EQUAL
24491: NOT
24492: IFFALSE 24496
// exit ;
24494: GO 24736
// index := GetElementIndex ( minersList , unit ) ;
24496: LD_ADDR_VAR 0 5
24500: PUSH
24501: LD_EXP 94
24505: PPUSH
24506: LD_VAR 0 1
24510: PPUSH
24511: CALL 30869 0 2
24515: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
24516: LD_EXP 95
24520: PUSH
24521: LD_VAR 0 5
24525: ARRAY
24526: PUSH
24527: LD_EXP 96
24531: GREATEREQUAL
24532: IFFALSE 24536
// exit ;
24534: GO 24736
// ComMoveXY ( unit , x , y ) ;
24536: LD_VAR 0 1
24540: PPUSH
24541: LD_VAR 0 2
24545: PPUSH
24546: LD_VAR 0 3
24550: PPUSH
24551: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24555: LD_INT 35
24557: PPUSH
24558: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
24562: LD_VAR 0 1
24566: PPUSH
24567: LD_VAR 0 2
24571: PPUSH
24572: LD_VAR 0 3
24576: PPUSH
24577: CALL 62224 0 3
24581: NOT
24582: PUSH
24583: LD_VAR 0 1
24587: PPUSH
24588: CALL_OW 314
24592: AND
24593: IFFALSE 24597
// exit ;
24595: GO 24736
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
24597: LD_VAR 0 2
24601: PPUSH
24602: LD_VAR 0 3
24606: PPUSH
24607: CALL_OW 428
24611: PUSH
24612: LD_VAR 0 1
24616: EQUAL
24617: PUSH
24618: LD_VAR 0 1
24622: PPUSH
24623: CALL_OW 314
24627: NOT
24628: AND
24629: IFFALSE 24555
// PlaySoundXY ( x , y , PlantMine ) ;
24631: LD_VAR 0 2
24635: PPUSH
24636: LD_VAR 0 3
24640: PPUSH
24641: LD_STRING PlantMine
24643: PPUSH
24644: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
24648: LD_VAR 0 2
24652: PPUSH
24653: LD_VAR 0 3
24657: PPUSH
24658: LD_VAR 0 1
24662: PPUSH
24663: CALL_OW 255
24667: PPUSH
24668: LD_INT 0
24670: PPUSH
24671: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
24675: LD_ADDR_EXP 95
24679: PUSH
24680: LD_EXP 95
24684: PPUSH
24685: LD_VAR 0 5
24689: PUSH
24690: LD_EXP 95
24694: PUSH
24695: LD_VAR 0 5
24699: ARRAY
24700: PUSH
24701: LD_INT 1
24703: PLUS
24704: PUSH
24705: EMPTY
24706: LIST
24707: LIST
24708: PPUSH
24709: LD_VAR 0 2
24713: PUSH
24714: LD_VAR 0 3
24718: PUSH
24719: EMPTY
24720: LIST
24721: LIST
24722: PPUSH
24723: CALL 31084 0 3
24727: ST_TO_ADDR
// result := true ;
24728: LD_ADDR_VAR 0 4
24732: PUSH
24733: LD_INT 1
24735: ST_TO_ADDR
// end ;
24736: LD_VAR 0 4
24740: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
24741: LD_INT 0
24743: PPUSH
24744: PPUSH
24745: PPUSH
// if not unit in minersList then
24746: LD_VAR 0 1
24750: PUSH
24751: LD_EXP 94
24755: IN
24756: NOT
24757: IFFALSE 24761
// exit ;
24759: GO 25153
// index := GetElementIndex ( minersList , unit ) ;
24761: LD_ADDR_VAR 0 6
24765: PUSH
24766: LD_EXP 94
24770: PPUSH
24771: LD_VAR 0 1
24775: PPUSH
24776: CALL 30869 0 2
24780: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
24781: LD_ADDR_VAR 0 5
24785: PUSH
24786: DOUBLE
24787: LD_EXP 95
24791: PUSH
24792: LD_VAR 0 6
24796: ARRAY
24797: INC
24798: ST_TO_ADDR
24799: LD_INT 1
24801: PUSH
24802: FOR_DOWNTO
24803: IFFALSE 24964
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
24805: LD_EXP 95
24809: PUSH
24810: LD_VAR 0 6
24814: ARRAY
24815: PUSH
24816: LD_VAR 0 5
24820: ARRAY
24821: PUSH
24822: LD_INT 1
24824: ARRAY
24825: PUSH
24826: LD_VAR 0 2
24830: EQUAL
24831: PUSH
24832: LD_EXP 95
24836: PUSH
24837: LD_VAR 0 6
24841: ARRAY
24842: PUSH
24843: LD_VAR 0 5
24847: ARRAY
24848: PUSH
24849: LD_INT 2
24851: ARRAY
24852: PUSH
24853: LD_VAR 0 3
24857: EQUAL
24858: AND
24859: IFFALSE 24962
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24861: LD_EXP 95
24865: PUSH
24866: LD_VAR 0 6
24870: ARRAY
24871: PUSH
24872: LD_VAR 0 5
24876: ARRAY
24877: PUSH
24878: LD_INT 1
24880: ARRAY
24881: PPUSH
24882: LD_EXP 95
24886: PUSH
24887: LD_VAR 0 6
24891: ARRAY
24892: PUSH
24893: LD_VAR 0 5
24897: ARRAY
24898: PUSH
24899: LD_INT 2
24901: ARRAY
24902: PPUSH
24903: LD_VAR 0 1
24907: PPUSH
24908: CALL_OW 255
24912: PPUSH
24913: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24917: LD_ADDR_EXP 95
24921: PUSH
24922: LD_EXP 95
24926: PPUSH
24927: LD_VAR 0 6
24931: PPUSH
24932: LD_EXP 95
24936: PUSH
24937: LD_VAR 0 6
24941: ARRAY
24942: PPUSH
24943: LD_VAR 0 5
24947: PPUSH
24948: CALL_OW 3
24952: PPUSH
24953: CALL_OW 1
24957: ST_TO_ADDR
// exit ;
24958: POP
24959: POP
24960: GO 25153
// end ; end ;
24962: GO 24802
24964: POP
24965: POP
// for i := minerMinesList [ index ] downto 1 do
24966: LD_ADDR_VAR 0 5
24970: PUSH
24971: DOUBLE
24972: LD_EXP 95
24976: PUSH
24977: LD_VAR 0 6
24981: ARRAY
24982: INC
24983: ST_TO_ADDR
24984: LD_INT 1
24986: PUSH
24987: FOR_DOWNTO
24988: IFFALSE 25151
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
24990: LD_EXP 95
24994: PUSH
24995: LD_VAR 0 6
24999: ARRAY
25000: PUSH
25001: LD_VAR 0 5
25005: ARRAY
25006: PUSH
25007: LD_INT 1
25009: ARRAY
25010: PPUSH
25011: LD_EXP 95
25015: PUSH
25016: LD_VAR 0 6
25020: ARRAY
25021: PUSH
25022: LD_VAR 0 5
25026: ARRAY
25027: PUSH
25028: LD_INT 2
25030: ARRAY
25031: PPUSH
25032: LD_VAR 0 2
25036: PPUSH
25037: LD_VAR 0 3
25041: PPUSH
25042: CALL_OW 298
25046: PUSH
25047: LD_INT 6
25049: LESS
25050: IFFALSE 25149
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25052: LD_EXP 95
25056: PUSH
25057: LD_VAR 0 6
25061: ARRAY
25062: PUSH
25063: LD_VAR 0 5
25067: ARRAY
25068: PUSH
25069: LD_INT 1
25071: ARRAY
25072: PPUSH
25073: LD_EXP 95
25077: PUSH
25078: LD_VAR 0 6
25082: ARRAY
25083: PUSH
25084: LD_VAR 0 5
25088: ARRAY
25089: PUSH
25090: LD_INT 2
25092: ARRAY
25093: PPUSH
25094: LD_VAR 0 1
25098: PPUSH
25099: CALL_OW 255
25103: PPUSH
25104: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25108: LD_ADDR_EXP 95
25112: PUSH
25113: LD_EXP 95
25117: PPUSH
25118: LD_VAR 0 6
25122: PPUSH
25123: LD_EXP 95
25127: PUSH
25128: LD_VAR 0 6
25132: ARRAY
25133: PPUSH
25134: LD_VAR 0 5
25138: PPUSH
25139: CALL_OW 3
25143: PPUSH
25144: CALL_OW 1
25148: ST_TO_ADDR
// end ; end ;
25149: GO 24987
25151: POP
25152: POP
// end ;
25153: LD_VAR 0 4
25157: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
25158: LD_INT 0
25160: PPUSH
25161: PPUSH
25162: PPUSH
25163: PPUSH
25164: PPUSH
25165: PPUSH
25166: PPUSH
25167: PPUSH
25168: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
25169: LD_VAR 0 1
25173: PPUSH
25174: CALL_OW 264
25178: PUSH
25179: LD_INT 81
25181: EQUAL
25182: NOT
25183: PUSH
25184: LD_VAR 0 1
25188: PUSH
25189: LD_EXP 94
25193: IN
25194: NOT
25195: OR
25196: IFFALSE 25200
// exit ;
25198: GO 25522
// index := GetElementIndex ( minersList , unit ) ;
25200: LD_ADDR_VAR 0 6
25204: PUSH
25205: LD_EXP 94
25209: PPUSH
25210: LD_VAR 0 1
25214: PPUSH
25215: CALL 30869 0 2
25219: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
25220: LD_ADDR_VAR 0 8
25224: PUSH
25225: LD_EXP 96
25229: PUSH
25230: LD_EXP 95
25234: PUSH
25235: LD_VAR 0 6
25239: ARRAY
25240: MINUS
25241: ST_TO_ADDR
// if not minesFreeAmount then
25242: LD_VAR 0 8
25246: NOT
25247: IFFALSE 25251
// exit ;
25249: GO 25522
// tmp := [ ] ;
25251: LD_ADDR_VAR 0 7
25255: PUSH
25256: EMPTY
25257: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
25258: LD_ADDR_VAR 0 5
25262: PUSH
25263: DOUBLE
25264: LD_INT 1
25266: DEC
25267: ST_TO_ADDR
25268: LD_VAR 0 8
25272: PUSH
25273: FOR_TO
25274: IFFALSE 25469
// begin _d := rand ( 0 , 5 ) ;
25276: LD_ADDR_VAR 0 11
25280: PUSH
25281: LD_INT 0
25283: PPUSH
25284: LD_INT 5
25286: PPUSH
25287: CALL_OW 12
25291: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
25292: LD_ADDR_VAR 0 12
25296: PUSH
25297: LD_INT 2
25299: PPUSH
25300: LD_INT 6
25302: PPUSH
25303: CALL_OW 12
25307: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
25308: LD_ADDR_VAR 0 9
25312: PUSH
25313: LD_VAR 0 2
25317: PPUSH
25318: LD_VAR 0 11
25322: PPUSH
25323: LD_VAR 0 12
25327: PPUSH
25328: CALL_OW 272
25332: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
25333: LD_ADDR_VAR 0 10
25337: PUSH
25338: LD_VAR 0 3
25342: PPUSH
25343: LD_VAR 0 11
25347: PPUSH
25348: LD_VAR 0 12
25352: PPUSH
25353: CALL_OW 273
25357: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
25358: LD_VAR 0 9
25362: PPUSH
25363: LD_VAR 0 10
25367: PPUSH
25368: CALL_OW 488
25372: PUSH
25373: LD_VAR 0 9
25377: PUSH
25378: LD_VAR 0 10
25382: PUSH
25383: EMPTY
25384: LIST
25385: LIST
25386: PUSH
25387: LD_VAR 0 7
25391: IN
25392: NOT
25393: AND
25394: PUSH
25395: LD_VAR 0 9
25399: PPUSH
25400: LD_VAR 0 10
25404: PPUSH
25405: CALL_OW 458
25409: NOT
25410: AND
25411: IFFALSE 25453
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
25413: LD_ADDR_VAR 0 7
25417: PUSH
25418: LD_VAR 0 7
25422: PPUSH
25423: LD_VAR 0 7
25427: PUSH
25428: LD_INT 1
25430: PLUS
25431: PPUSH
25432: LD_VAR 0 9
25436: PUSH
25437: LD_VAR 0 10
25441: PUSH
25442: EMPTY
25443: LIST
25444: LIST
25445: PPUSH
25446: CALL_OW 1
25450: ST_TO_ADDR
25451: GO 25467
// i := i - 1 ;
25453: LD_ADDR_VAR 0 5
25457: PUSH
25458: LD_VAR 0 5
25462: PUSH
25463: LD_INT 1
25465: MINUS
25466: ST_TO_ADDR
// end ;
25467: GO 25273
25469: POP
25470: POP
// for i in tmp do
25471: LD_ADDR_VAR 0 5
25475: PUSH
25476: LD_VAR 0 7
25480: PUSH
25481: FOR_IN
25482: IFFALSE 25520
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
25484: LD_VAR 0 1
25488: PPUSH
25489: LD_VAR 0 5
25493: PUSH
25494: LD_INT 1
25496: ARRAY
25497: PPUSH
25498: LD_VAR 0 5
25502: PUSH
25503: LD_INT 2
25505: ARRAY
25506: PPUSH
25507: CALL 24466 0 3
25511: NOT
25512: IFFALSE 25518
// exit ;
25514: POP
25515: POP
25516: GO 25522
25518: GO 25481
25520: POP
25521: POP
// end ;
25522: LD_VAR 0 4
25526: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
25527: LD_INT 0
25529: PPUSH
25530: PPUSH
25531: PPUSH
25532: PPUSH
25533: PPUSH
25534: PPUSH
25535: PPUSH
// if not GetClass ( unit ) = class_sniper then
25536: LD_VAR 0 1
25540: PPUSH
25541: CALL_OW 257
25545: PUSH
25546: LD_INT 5
25548: EQUAL
25549: NOT
25550: IFFALSE 25554
// exit ;
25552: GO 25942
// dist := 8 ;
25554: LD_ADDR_VAR 0 5
25558: PUSH
25559: LD_INT 8
25561: ST_TO_ADDR
// viewRange := 12 ;
25562: LD_ADDR_VAR 0 7
25566: PUSH
25567: LD_INT 12
25569: ST_TO_ADDR
// side := GetSide ( unit ) ;
25570: LD_ADDR_VAR 0 6
25574: PUSH
25575: LD_VAR 0 1
25579: PPUSH
25580: CALL_OW 255
25584: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
25585: LD_INT 61
25587: PPUSH
25588: LD_VAR 0 6
25592: PPUSH
25593: CALL_OW 321
25597: PUSH
25598: LD_INT 2
25600: EQUAL
25601: IFFALSE 25611
// viewRange := 16 ;
25603: LD_ADDR_VAR 0 7
25607: PUSH
25608: LD_INT 16
25610: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
25611: LD_VAR 0 1
25615: PPUSH
25616: LD_VAR 0 2
25620: PPUSH
25621: LD_VAR 0 3
25625: PPUSH
25626: CALL_OW 297
25630: PUSH
25631: LD_VAR 0 5
25635: GREATER
25636: IFFALSE 25715
// begin ComMoveXY ( unit , x , y ) ;
25638: LD_VAR 0 1
25642: PPUSH
25643: LD_VAR 0 2
25647: PPUSH
25648: LD_VAR 0 3
25652: PPUSH
25653: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25657: LD_INT 35
25659: PPUSH
25660: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
25664: LD_VAR 0 1
25668: PPUSH
25669: LD_VAR 0 2
25673: PPUSH
25674: LD_VAR 0 3
25678: PPUSH
25679: CALL 62224 0 3
25683: NOT
25684: IFFALSE 25688
// exit ;
25686: GO 25942
// until GetDistUnitXY ( unit , x , y ) < dist ;
25688: LD_VAR 0 1
25692: PPUSH
25693: LD_VAR 0 2
25697: PPUSH
25698: LD_VAR 0 3
25702: PPUSH
25703: CALL_OW 297
25707: PUSH
25708: LD_VAR 0 5
25712: LESS
25713: IFFALSE 25657
// end ; ComTurnXY ( unit , x , y ) ;
25715: LD_VAR 0 1
25719: PPUSH
25720: LD_VAR 0 2
25724: PPUSH
25725: LD_VAR 0 3
25729: PPUSH
25730: CALL_OW 118
// wait ( 5 ) ;
25734: LD_INT 5
25736: PPUSH
25737: CALL_OW 67
// _d := GetDir ( unit ) ;
25741: LD_ADDR_VAR 0 10
25745: PUSH
25746: LD_VAR 0 1
25750: PPUSH
25751: CALL_OW 254
25755: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
25756: LD_ADDR_VAR 0 8
25760: PUSH
25761: LD_VAR 0 1
25765: PPUSH
25766: CALL_OW 250
25770: PPUSH
25771: LD_VAR 0 10
25775: PPUSH
25776: LD_VAR 0 5
25780: PPUSH
25781: CALL_OW 272
25785: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
25786: LD_ADDR_VAR 0 9
25790: PUSH
25791: LD_VAR 0 1
25795: PPUSH
25796: CALL_OW 251
25800: PPUSH
25801: LD_VAR 0 10
25805: PPUSH
25806: LD_VAR 0 5
25810: PPUSH
25811: CALL_OW 273
25815: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25816: LD_VAR 0 8
25820: PPUSH
25821: LD_VAR 0 9
25825: PPUSH
25826: CALL_OW 488
25830: NOT
25831: IFFALSE 25835
// exit ;
25833: GO 25942
// ComAnimCustom ( unit , 1 ) ;
25835: LD_VAR 0 1
25839: PPUSH
25840: LD_INT 1
25842: PPUSH
25843: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
25847: LD_VAR 0 8
25851: PPUSH
25852: LD_VAR 0 9
25856: PPUSH
25857: LD_VAR 0 6
25861: PPUSH
25862: LD_VAR 0 7
25866: PPUSH
25867: CALL_OW 330
// repeat wait ( 1 ) ;
25871: LD_INT 1
25873: PPUSH
25874: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
25878: LD_VAR 0 1
25882: PPUSH
25883: CALL_OW 316
25887: PUSH
25888: LD_VAR 0 1
25892: PPUSH
25893: CALL_OW 314
25897: OR
25898: PUSH
25899: LD_VAR 0 1
25903: PPUSH
25904: CALL_OW 302
25908: NOT
25909: OR
25910: PUSH
25911: LD_VAR 0 1
25915: PPUSH
25916: CALL_OW 301
25920: OR
25921: IFFALSE 25871
// RemoveSeeing ( _x , _y , side ) ;
25923: LD_VAR 0 8
25927: PPUSH
25928: LD_VAR 0 9
25932: PPUSH
25933: LD_VAR 0 6
25937: PPUSH
25938: CALL_OW 331
// end ; end_of_file
25942: LD_VAR 0 4
25946: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
25947: LD_INT 0
25949: PPUSH
25950: PPUSH
// if exist_mode then
25951: LD_VAR 0 2
25955: IFFALSE 25980
// unit := CreateCharacter ( prefix & ident ) else
25957: LD_ADDR_VAR 0 5
25961: PUSH
25962: LD_VAR 0 3
25966: PUSH
25967: LD_VAR 0 1
25971: STR
25972: PPUSH
25973: CALL_OW 34
25977: ST_TO_ADDR
25978: GO 25995
// unit := NewCharacter ( ident ) ;
25980: LD_ADDR_VAR 0 5
25984: PUSH
25985: LD_VAR 0 1
25989: PPUSH
25990: CALL_OW 25
25994: ST_TO_ADDR
// result := unit ;
25995: LD_ADDR_VAR 0 4
25999: PUSH
26000: LD_VAR 0 5
26004: ST_TO_ADDR
// end ;
26005: LD_VAR 0 4
26009: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
26010: LD_INT 0
26012: PPUSH
26013: PPUSH
// if not side or not nation then
26014: LD_VAR 0 1
26018: NOT
26019: PUSH
26020: LD_VAR 0 2
26024: NOT
26025: OR
26026: IFFALSE 26030
// exit ;
26028: GO 26798
// case nation of nation_american :
26030: LD_VAR 0 2
26034: PUSH
26035: LD_INT 1
26037: DOUBLE
26038: EQUAL
26039: IFTRUE 26043
26041: GO 26257
26043: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
26044: LD_ADDR_VAR 0 4
26048: PUSH
26049: LD_INT 35
26051: PUSH
26052: LD_INT 45
26054: PUSH
26055: LD_INT 46
26057: PUSH
26058: LD_INT 47
26060: PUSH
26061: LD_INT 82
26063: PUSH
26064: LD_INT 83
26066: PUSH
26067: LD_INT 84
26069: PUSH
26070: LD_INT 85
26072: PUSH
26073: LD_INT 86
26075: PUSH
26076: LD_INT 1
26078: PUSH
26079: LD_INT 2
26081: PUSH
26082: LD_INT 6
26084: PUSH
26085: LD_INT 15
26087: PUSH
26088: LD_INT 16
26090: PUSH
26091: LD_INT 7
26093: PUSH
26094: LD_INT 12
26096: PUSH
26097: LD_INT 13
26099: PUSH
26100: LD_INT 10
26102: PUSH
26103: LD_INT 14
26105: PUSH
26106: LD_INT 20
26108: PUSH
26109: LD_INT 21
26111: PUSH
26112: LD_INT 22
26114: PUSH
26115: LD_INT 25
26117: PUSH
26118: LD_INT 32
26120: PUSH
26121: LD_INT 27
26123: PUSH
26124: LD_INT 36
26126: PUSH
26127: LD_INT 69
26129: PUSH
26130: LD_INT 39
26132: PUSH
26133: LD_INT 34
26135: PUSH
26136: LD_INT 40
26138: PUSH
26139: LD_INT 48
26141: PUSH
26142: LD_INT 49
26144: PUSH
26145: LD_INT 50
26147: PUSH
26148: LD_INT 51
26150: PUSH
26151: LD_INT 52
26153: PUSH
26154: LD_INT 53
26156: PUSH
26157: LD_INT 54
26159: PUSH
26160: LD_INT 55
26162: PUSH
26163: LD_INT 56
26165: PUSH
26166: LD_INT 57
26168: PUSH
26169: LD_INT 58
26171: PUSH
26172: LD_INT 59
26174: PUSH
26175: LD_INT 60
26177: PUSH
26178: LD_INT 61
26180: PUSH
26181: LD_INT 62
26183: PUSH
26184: LD_INT 80
26186: PUSH
26187: LD_INT 82
26189: PUSH
26190: LD_INT 83
26192: PUSH
26193: LD_INT 84
26195: PUSH
26196: LD_INT 85
26198: PUSH
26199: LD_INT 86
26201: PUSH
26202: EMPTY
26203: LIST
26204: LIST
26205: LIST
26206: LIST
26207: LIST
26208: LIST
26209: LIST
26210: LIST
26211: LIST
26212: LIST
26213: LIST
26214: LIST
26215: LIST
26216: LIST
26217: LIST
26218: LIST
26219: LIST
26220: LIST
26221: LIST
26222: LIST
26223: LIST
26224: LIST
26225: LIST
26226: LIST
26227: LIST
26228: LIST
26229: LIST
26230: LIST
26231: LIST
26232: LIST
26233: LIST
26234: LIST
26235: LIST
26236: LIST
26237: LIST
26238: LIST
26239: LIST
26240: LIST
26241: LIST
26242: LIST
26243: LIST
26244: LIST
26245: LIST
26246: LIST
26247: LIST
26248: LIST
26249: LIST
26250: LIST
26251: LIST
26252: LIST
26253: LIST
26254: ST_TO_ADDR
26255: GO 26722
26257: LD_INT 2
26259: DOUBLE
26260: EQUAL
26261: IFTRUE 26265
26263: GO 26491
26265: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
26266: LD_ADDR_VAR 0 4
26270: PUSH
26271: LD_INT 35
26273: PUSH
26274: LD_INT 45
26276: PUSH
26277: LD_INT 46
26279: PUSH
26280: LD_INT 47
26282: PUSH
26283: LD_INT 82
26285: PUSH
26286: LD_INT 83
26288: PUSH
26289: LD_INT 84
26291: PUSH
26292: LD_INT 85
26294: PUSH
26295: LD_INT 87
26297: PUSH
26298: LD_INT 70
26300: PUSH
26301: LD_INT 1
26303: PUSH
26304: LD_INT 11
26306: PUSH
26307: LD_INT 3
26309: PUSH
26310: LD_INT 4
26312: PUSH
26313: LD_INT 5
26315: PUSH
26316: LD_INT 6
26318: PUSH
26319: LD_INT 15
26321: PUSH
26322: LD_INT 18
26324: PUSH
26325: LD_INT 7
26327: PUSH
26328: LD_INT 17
26330: PUSH
26331: LD_INT 8
26333: PUSH
26334: LD_INT 20
26336: PUSH
26337: LD_INT 21
26339: PUSH
26340: LD_INT 22
26342: PUSH
26343: LD_INT 72
26345: PUSH
26346: LD_INT 26
26348: PUSH
26349: LD_INT 69
26351: PUSH
26352: LD_INT 39
26354: PUSH
26355: LD_INT 40
26357: PUSH
26358: LD_INT 41
26360: PUSH
26361: LD_INT 42
26363: PUSH
26364: LD_INT 43
26366: PUSH
26367: LD_INT 48
26369: PUSH
26370: LD_INT 49
26372: PUSH
26373: LD_INT 50
26375: PUSH
26376: LD_INT 51
26378: PUSH
26379: LD_INT 52
26381: PUSH
26382: LD_INT 53
26384: PUSH
26385: LD_INT 54
26387: PUSH
26388: LD_INT 55
26390: PUSH
26391: LD_INT 56
26393: PUSH
26394: LD_INT 60
26396: PUSH
26397: LD_INT 61
26399: PUSH
26400: LD_INT 62
26402: PUSH
26403: LD_INT 66
26405: PUSH
26406: LD_INT 67
26408: PUSH
26409: LD_INT 68
26411: PUSH
26412: LD_INT 81
26414: PUSH
26415: LD_INT 82
26417: PUSH
26418: LD_INT 83
26420: PUSH
26421: LD_INT 84
26423: PUSH
26424: LD_INT 85
26426: PUSH
26427: LD_INT 87
26429: PUSH
26430: LD_INT 88
26432: PUSH
26433: EMPTY
26434: LIST
26435: LIST
26436: LIST
26437: LIST
26438: LIST
26439: LIST
26440: LIST
26441: LIST
26442: LIST
26443: LIST
26444: LIST
26445: LIST
26446: LIST
26447: LIST
26448: LIST
26449: LIST
26450: LIST
26451: LIST
26452: LIST
26453: LIST
26454: LIST
26455: LIST
26456: LIST
26457: LIST
26458: LIST
26459: LIST
26460: LIST
26461: LIST
26462: LIST
26463: LIST
26464: LIST
26465: LIST
26466: LIST
26467: LIST
26468: LIST
26469: LIST
26470: LIST
26471: LIST
26472: LIST
26473: LIST
26474: LIST
26475: LIST
26476: LIST
26477: LIST
26478: LIST
26479: LIST
26480: LIST
26481: LIST
26482: LIST
26483: LIST
26484: LIST
26485: LIST
26486: LIST
26487: LIST
26488: ST_TO_ADDR
26489: GO 26722
26491: LD_INT 3
26493: DOUBLE
26494: EQUAL
26495: IFTRUE 26499
26497: GO 26721
26499: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
26500: LD_ADDR_VAR 0 4
26504: PUSH
26505: LD_INT 46
26507: PUSH
26508: LD_INT 47
26510: PUSH
26511: LD_INT 1
26513: PUSH
26514: LD_INT 2
26516: PUSH
26517: LD_INT 82
26519: PUSH
26520: LD_INT 83
26522: PUSH
26523: LD_INT 84
26525: PUSH
26526: LD_INT 85
26528: PUSH
26529: LD_INT 86
26531: PUSH
26532: LD_INT 11
26534: PUSH
26535: LD_INT 9
26537: PUSH
26538: LD_INT 20
26540: PUSH
26541: LD_INT 19
26543: PUSH
26544: LD_INT 21
26546: PUSH
26547: LD_INT 24
26549: PUSH
26550: LD_INT 22
26552: PUSH
26553: LD_INT 25
26555: PUSH
26556: LD_INT 28
26558: PUSH
26559: LD_INT 29
26561: PUSH
26562: LD_INT 30
26564: PUSH
26565: LD_INT 31
26567: PUSH
26568: LD_INT 37
26570: PUSH
26571: LD_INT 38
26573: PUSH
26574: LD_INT 32
26576: PUSH
26577: LD_INT 27
26579: PUSH
26580: LD_INT 33
26582: PUSH
26583: LD_INT 69
26585: PUSH
26586: LD_INT 39
26588: PUSH
26589: LD_INT 34
26591: PUSH
26592: LD_INT 40
26594: PUSH
26595: LD_INT 71
26597: PUSH
26598: LD_INT 23
26600: PUSH
26601: LD_INT 44
26603: PUSH
26604: LD_INT 48
26606: PUSH
26607: LD_INT 49
26609: PUSH
26610: LD_INT 50
26612: PUSH
26613: LD_INT 51
26615: PUSH
26616: LD_INT 52
26618: PUSH
26619: LD_INT 53
26621: PUSH
26622: LD_INT 54
26624: PUSH
26625: LD_INT 55
26627: PUSH
26628: LD_INT 56
26630: PUSH
26631: LD_INT 57
26633: PUSH
26634: LD_INT 58
26636: PUSH
26637: LD_INT 59
26639: PUSH
26640: LD_INT 63
26642: PUSH
26643: LD_INT 64
26645: PUSH
26646: LD_INT 65
26648: PUSH
26649: LD_INT 82
26651: PUSH
26652: LD_INT 83
26654: PUSH
26655: LD_INT 84
26657: PUSH
26658: LD_INT 85
26660: PUSH
26661: LD_INT 86
26663: PUSH
26664: EMPTY
26665: LIST
26666: LIST
26667: LIST
26668: LIST
26669: LIST
26670: LIST
26671: LIST
26672: LIST
26673: LIST
26674: LIST
26675: LIST
26676: LIST
26677: LIST
26678: LIST
26679: LIST
26680: LIST
26681: LIST
26682: LIST
26683: LIST
26684: LIST
26685: LIST
26686: LIST
26687: LIST
26688: LIST
26689: LIST
26690: LIST
26691: LIST
26692: LIST
26693: LIST
26694: LIST
26695: LIST
26696: LIST
26697: LIST
26698: LIST
26699: LIST
26700: LIST
26701: LIST
26702: LIST
26703: LIST
26704: LIST
26705: LIST
26706: LIST
26707: LIST
26708: LIST
26709: LIST
26710: LIST
26711: LIST
26712: LIST
26713: LIST
26714: LIST
26715: LIST
26716: LIST
26717: LIST
26718: ST_TO_ADDR
26719: GO 26722
26721: POP
// if state > - 1 and state < 3 then
26722: LD_VAR 0 3
26726: PUSH
26727: LD_INT 1
26729: NEG
26730: GREATER
26731: PUSH
26732: LD_VAR 0 3
26736: PUSH
26737: LD_INT 3
26739: LESS
26740: AND
26741: IFFALSE 26798
// for i in result do
26743: LD_ADDR_VAR 0 5
26747: PUSH
26748: LD_VAR 0 4
26752: PUSH
26753: FOR_IN
26754: IFFALSE 26796
// if GetTech ( i , side ) <> state then
26756: LD_VAR 0 5
26760: PPUSH
26761: LD_VAR 0 1
26765: PPUSH
26766: CALL_OW 321
26770: PUSH
26771: LD_VAR 0 3
26775: NONEQUAL
26776: IFFALSE 26794
// result := result diff i ;
26778: LD_ADDR_VAR 0 4
26782: PUSH
26783: LD_VAR 0 4
26787: PUSH
26788: LD_VAR 0 5
26792: DIFF
26793: ST_TO_ADDR
26794: GO 26753
26796: POP
26797: POP
// end ;
26798: LD_VAR 0 4
26802: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
26803: LD_INT 0
26805: PPUSH
26806: PPUSH
26807: PPUSH
// result := true ;
26808: LD_ADDR_VAR 0 3
26812: PUSH
26813: LD_INT 1
26815: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
26816: LD_ADDR_VAR 0 5
26820: PUSH
26821: LD_VAR 0 2
26825: PPUSH
26826: CALL_OW 480
26830: ST_TO_ADDR
// if not tmp then
26831: LD_VAR 0 5
26835: NOT
26836: IFFALSE 26840
// exit ;
26838: GO 26889
// for i in tmp do
26840: LD_ADDR_VAR 0 4
26844: PUSH
26845: LD_VAR 0 5
26849: PUSH
26850: FOR_IN
26851: IFFALSE 26887
// if GetTech ( i , side ) <> state_researched then
26853: LD_VAR 0 4
26857: PPUSH
26858: LD_VAR 0 1
26862: PPUSH
26863: CALL_OW 321
26867: PUSH
26868: LD_INT 2
26870: NONEQUAL
26871: IFFALSE 26885
// begin result := false ;
26873: LD_ADDR_VAR 0 3
26877: PUSH
26878: LD_INT 0
26880: ST_TO_ADDR
// exit ;
26881: POP
26882: POP
26883: GO 26889
// end ;
26885: GO 26850
26887: POP
26888: POP
// end ;
26889: LD_VAR 0 3
26893: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
26894: LD_INT 0
26896: PPUSH
26897: PPUSH
26898: PPUSH
26899: PPUSH
26900: PPUSH
26901: PPUSH
26902: PPUSH
26903: PPUSH
26904: PPUSH
26905: PPUSH
26906: PPUSH
26907: PPUSH
26908: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
26909: LD_VAR 0 1
26913: NOT
26914: PUSH
26915: LD_VAR 0 1
26919: PPUSH
26920: CALL_OW 257
26924: PUSH
26925: LD_INT 9
26927: NONEQUAL
26928: OR
26929: IFFALSE 26933
// exit ;
26931: GO 27506
// side := GetSide ( unit ) ;
26933: LD_ADDR_VAR 0 9
26937: PUSH
26938: LD_VAR 0 1
26942: PPUSH
26943: CALL_OW 255
26947: ST_TO_ADDR
// tech_space := tech_spacanom ;
26948: LD_ADDR_VAR 0 12
26952: PUSH
26953: LD_INT 29
26955: ST_TO_ADDR
// tech_time := tech_taurad ;
26956: LD_ADDR_VAR 0 13
26960: PUSH
26961: LD_INT 28
26963: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
26964: LD_ADDR_VAR 0 11
26968: PUSH
26969: LD_VAR 0 1
26973: PPUSH
26974: CALL_OW 310
26978: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
26979: LD_VAR 0 11
26983: PPUSH
26984: CALL_OW 247
26988: PUSH
26989: LD_INT 2
26991: EQUAL
26992: IFFALSE 26996
// exit ;
26994: GO 27506
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26996: LD_ADDR_VAR 0 8
27000: PUSH
27001: LD_INT 81
27003: PUSH
27004: LD_VAR 0 9
27008: PUSH
27009: EMPTY
27010: LIST
27011: LIST
27012: PUSH
27013: LD_INT 3
27015: PUSH
27016: LD_INT 21
27018: PUSH
27019: LD_INT 3
27021: PUSH
27022: EMPTY
27023: LIST
27024: LIST
27025: PUSH
27026: EMPTY
27027: LIST
27028: LIST
27029: PUSH
27030: EMPTY
27031: LIST
27032: LIST
27033: PPUSH
27034: CALL_OW 69
27038: ST_TO_ADDR
// if not tmp then
27039: LD_VAR 0 8
27043: NOT
27044: IFFALSE 27048
// exit ;
27046: GO 27506
// if in_unit then
27048: LD_VAR 0 11
27052: IFFALSE 27076
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
27054: LD_ADDR_VAR 0 10
27058: PUSH
27059: LD_VAR 0 8
27063: PPUSH
27064: LD_VAR 0 11
27068: PPUSH
27069: CALL_OW 74
27073: ST_TO_ADDR
27074: GO 27096
// enemy := NearestUnitToUnit ( tmp , unit ) ;
27076: LD_ADDR_VAR 0 10
27080: PUSH
27081: LD_VAR 0 8
27085: PPUSH
27086: LD_VAR 0 1
27090: PPUSH
27091: CALL_OW 74
27095: ST_TO_ADDR
// if not enemy then
27096: LD_VAR 0 10
27100: NOT
27101: IFFALSE 27105
// exit ;
27103: GO 27506
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
27105: LD_VAR 0 11
27109: PUSH
27110: LD_VAR 0 11
27114: PPUSH
27115: LD_VAR 0 10
27119: PPUSH
27120: CALL_OW 296
27124: PUSH
27125: LD_INT 13
27127: GREATER
27128: AND
27129: PUSH
27130: LD_VAR 0 1
27134: PPUSH
27135: LD_VAR 0 10
27139: PPUSH
27140: CALL_OW 296
27144: PUSH
27145: LD_INT 12
27147: GREATER
27148: OR
27149: IFFALSE 27153
// exit ;
27151: GO 27506
// missile := [ 1 ] ;
27153: LD_ADDR_VAR 0 14
27157: PUSH
27158: LD_INT 1
27160: PUSH
27161: EMPTY
27162: LIST
27163: ST_TO_ADDR
// if Researched ( side , tech_space ) then
27164: LD_VAR 0 9
27168: PPUSH
27169: LD_VAR 0 12
27173: PPUSH
27174: CALL_OW 325
27178: IFFALSE 27207
// missile := Replace ( missile , missile + 1 , 2 ) ;
27180: LD_ADDR_VAR 0 14
27184: PUSH
27185: LD_VAR 0 14
27189: PPUSH
27190: LD_VAR 0 14
27194: PUSH
27195: LD_INT 1
27197: PLUS
27198: PPUSH
27199: LD_INT 2
27201: PPUSH
27202: CALL_OW 1
27206: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
27207: LD_VAR 0 9
27211: PPUSH
27212: LD_VAR 0 13
27216: PPUSH
27217: CALL_OW 325
27221: PUSH
27222: LD_VAR 0 10
27226: PPUSH
27227: CALL_OW 255
27231: PPUSH
27232: LD_VAR 0 13
27236: PPUSH
27237: CALL_OW 325
27241: NOT
27242: AND
27243: IFFALSE 27272
// missile := Replace ( missile , missile + 1 , 3 ) ;
27245: LD_ADDR_VAR 0 14
27249: PUSH
27250: LD_VAR 0 14
27254: PPUSH
27255: LD_VAR 0 14
27259: PUSH
27260: LD_INT 1
27262: PLUS
27263: PPUSH
27264: LD_INT 3
27266: PPUSH
27267: CALL_OW 1
27271: ST_TO_ADDR
// if missile < 2 then
27272: LD_VAR 0 14
27276: PUSH
27277: LD_INT 2
27279: LESS
27280: IFFALSE 27284
// exit ;
27282: GO 27506
// x := GetX ( enemy ) ;
27284: LD_ADDR_VAR 0 4
27288: PUSH
27289: LD_VAR 0 10
27293: PPUSH
27294: CALL_OW 250
27298: ST_TO_ADDR
// y := GetY ( enemy ) ;
27299: LD_ADDR_VAR 0 5
27303: PUSH
27304: LD_VAR 0 10
27308: PPUSH
27309: CALL_OW 251
27313: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
27314: LD_ADDR_VAR 0 6
27318: PUSH
27319: LD_VAR 0 4
27323: PUSH
27324: LD_INT 1
27326: NEG
27327: PPUSH
27328: LD_INT 1
27330: PPUSH
27331: CALL_OW 12
27335: PLUS
27336: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
27337: LD_ADDR_VAR 0 7
27341: PUSH
27342: LD_VAR 0 5
27346: PUSH
27347: LD_INT 1
27349: NEG
27350: PPUSH
27351: LD_INT 1
27353: PPUSH
27354: CALL_OW 12
27358: PLUS
27359: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27360: LD_VAR 0 6
27364: PPUSH
27365: LD_VAR 0 7
27369: PPUSH
27370: CALL_OW 488
27374: NOT
27375: IFFALSE 27397
// begin _x := x ;
27377: LD_ADDR_VAR 0 6
27381: PUSH
27382: LD_VAR 0 4
27386: ST_TO_ADDR
// _y := y ;
27387: LD_ADDR_VAR 0 7
27391: PUSH
27392: LD_VAR 0 5
27396: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
27397: LD_ADDR_VAR 0 3
27401: PUSH
27402: LD_INT 1
27404: PPUSH
27405: LD_VAR 0 14
27409: PPUSH
27410: CALL_OW 12
27414: ST_TO_ADDR
// case i of 1 :
27415: LD_VAR 0 3
27419: PUSH
27420: LD_INT 1
27422: DOUBLE
27423: EQUAL
27424: IFTRUE 27428
27426: GO 27445
27428: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
27429: LD_VAR 0 1
27433: PPUSH
27434: LD_VAR 0 10
27438: PPUSH
27439: CALL_OW 115
27443: GO 27506
27445: LD_INT 2
27447: DOUBLE
27448: EQUAL
27449: IFTRUE 27453
27451: GO 27475
27453: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
27454: LD_VAR 0 1
27458: PPUSH
27459: LD_VAR 0 6
27463: PPUSH
27464: LD_VAR 0 7
27468: PPUSH
27469: CALL_OW 153
27473: GO 27506
27475: LD_INT 3
27477: DOUBLE
27478: EQUAL
27479: IFTRUE 27483
27481: GO 27505
27483: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
27484: LD_VAR 0 1
27488: PPUSH
27489: LD_VAR 0 6
27493: PPUSH
27494: LD_VAR 0 7
27498: PPUSH
27499: CALL_OW 154
27503: GO 27506
27505: POP
// end ;
27506: LD_VAR 0 2
27510: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
27511: LD_INT 0
27513: PPUSH
27514: PPUSH
27515: PPUSH
27516: PPUSH
27517: PPUSH
27518: PPUSH
// if not unit or not building then
27519: LD_VAR 0 1
27523: NOT
27524: PUSH
27525: LD_VAR 0 2
27529: NOT
27530: OR
27531: IFFALSE 27535
// exit ;
27533: GO 27693
// x := GetX ( building ) ;
27535: LD_ADDR_VAR 0 5
27539: PUSH
27540: LD_VAR 0 2
27544: PPUSH
27545: CALL_OW 250
27549: ST_TO_ADDR
// y := GetY ( building ) ;
27550: LD_ADDR_VAR 0 6
27554: PUSH
27555: LD_VAR 0 2
27559: PPUSH
27560: CALL_OW 251
27564: ST_TO_ADDR
// for i = 0 to 5 do
27565: LD_ADDR_VAR 0 4
27569: PUSH
27570: DOUBLE
27571: LD_INT 0
27573: DEC
27574: ST_TO_ADDR
27575: LD_INT 5
27577: PUSH
27578: FOR_TO
27579: IFFALSE 27691
// begin _x := ShiftX ( x , i , 3 ) ;
27581: LD_ADDR_VAR 0 7
27585: PUSH
27586: LD_VAR 0 5
27590: PPUSH
27591: LD_VAR 0 4
27595: PPUSH
27596: LD_INT 3
27598: PPUSH
27599: CALL_OW 272
27603: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
27604: LD_ADDR_VAR 0 8
27608: PUSH
27609: LD_VAR 0 6
27613: PPUSH
27614: LD_VAR 0 4
27618: PPUSH
27619: LD_INT 3
27621: PPUSH
27622: CALL_OW 273
27626: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27627: LD_VAR 0 7
27631: PPUSH
27632: LD_VAR 0 8
27636: PPUSH
27637: CALL_OW 488
27641: NOT
27642: IFFALSE 27646
// continue ;
27644: GO 27578
// if HexInfo ( _x , _y ) = 0 then
27646: LD_VAR 0 7
27650: PPUSH
27651: LD_VAR 0 8
27655: PPUSH
27656: CALL_OW 428
27660: PUSH
27661: LD_INT 0
27663: EQUAL
27664: IFFALSE 27689
// begin ComMoveXY ( unit , _x , _y ) ;
27666: LD_VAR 0 1
27670: PPUSH
27671: LD_VAR 0 7
27675: PPUSH
27676: LD_VAR 0 8
27680: PPUSH
27681: CALL_OW 111
// exit ;
27685: POP
27686: POP
27687: GO 27693
// end ; end ;
27689: GO 27578
27691: POP
27692: POP
// end ;
27693: LD_VAR 0 3
27697: RET
// export function ScanBase ( side , base_area ) ; begin
27698: LD_INT 0
27700: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
27701: LD_ADDR_VAR 0 3
27705: PUSH
27706: LD_VAR 0 2
27710: PPUSH
27711: LD_INT 81
27713: PUSH
27714: LD_VAR 0 1
27718: PUSH
27719: EMPTY
27720: LIST
27721: LIST
27722: PPUSH
27723: CALL_OW 70
27727: ST_TO_ADDR
// end ;
27728: LD_VAR 0 3
27732: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
27733: LD_INT 0
27735: PPUSH
27736: PPUSH
27737: PPUSH
27738: PPUSH
// result := false ;
27739: LD_ADDR_VAR 0 2
27743: PUSH
27744: LD_INT 0
27746: ST_TO_ADDR
// side := GetSide ( unit ) ;
27747: LD_ADDR_VAR 0 3
27751: PUSH
27752: LD_VAR 0 1
27756: PPUSH
27757: CALL_OW 255
27761: ST_TO_ADDR
// nat := GetNation ( unit ) ;
27762: LD_ADDR_VAR 0 4
27766: PUSH
27767: LD_VAR 0 1
27771: PPUSH
27772: CALL_OW 248
27776: ST_TO_ADDR
// case nat of 1 :
27777: LD_VAR 0 4
27781: PUSH
27782: LD_INT 1
27784: DOUBLE
27785: EQUAL
27786: IFTRUE 27790
27788: GO 27801
27790: POP
// tech := tech_lassight ; 2 :
27791: LD_ADDR_VAR 0 5
27795: PUSH
27796: LD_INT 12
27798: ST_TO_ADDR
27799: GO 27840
27801: LD_INT 2
27803: DOUBLE
27804: EQUAL
27805: IFTRUE 27809
27807: GO 27820
27809: POP
// tech := tech_mortar ; 3 :
27810: LD_ADDR_VAR 0 5
27814: PUSH
27815: LD_INT 41
27817: ST_TO_ADDR
27818: GO 27840
27820: LD_INT 3
27822: DOUBLE
27823: EQUAL
27824: IFTRUE 27828
27826: GO 27839
27828: POP
// tech := tech_bazooka ; end ;
27829: LD_ADDR_VAR 0 5
27833: PUSH
27834: LD_INT 44
27836: ST_TO_ADDR
27837: GO 27840
27839: POP
// if Researched ( side , tech ) then
27840: LD_VAR 0 3
27844: PPUSH
27845: LD_VAR 0 5
27849: PPUSH
27850: CALL_OW 325
27854: IFFALSE 27881
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
27856: LD_ADDR_VAR 0 2
27860: PUSH
27861: LD_INT 5
27863: PUSH
27864: LD_INT 8
27866: PUSH
27867: LD_INT 9
27869: PUSH
27870: EMPTY
27871: LIST
27872: LIST
27873: LIST
27874: PUSH
27875: LD_VAR 0 4
27879: ARRAY
27880: ST_TO_ADDR
// end ;
27881: LD_VAR 0 2
27885: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
27886: LD_INT 0
27888: PPUSH
27889: PPUSH
27890: PPUSH
// if not mines then
27891: LD_VAR 0 2
27895: NOT
27896: IFFALSE 27900
// exit ;
27898: GO 28044
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27900: LD_ADDR_VAR 0 5
27904: PUSH
27905: LD_INT 81
27907: PUSH
27908: LD_VAR 0 1
27912: PUSH
27913: EMPTY
27914: LIST
27915: LIST
27916: PUSH
27917: LD_INT 3
27919: PUSH
27920: LD_INT 21
27922: PUSH
27923: LD_INT 3
27925: PUSH
27926: EMPTY
27927: LIST
27928: LIST
27929: PUSH
27930: EMPTY
27931: LIST
27932: LIST
27933: PUSH
27934: EMPTY
27935: LIST
27936: LIST
27937: PPUSH
27938: CALL_OW 69
27942: ST_TO_ADDR
// for i in mines do
27943: LD_ADDR_VAR 0 4
27947: PUSH
27948: LD_VAR 0 2
27952: PUSH
27953: FOR_IN
27954: IFFALSE 28042
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
27956: LD_VAR 0 4
27960: PUSH
27961: LD_INT 1
27963: ARRAY
27964: PPUSH
27965: LD_VAR 0 4
27969: PUSH
27970: LD_INT 2
27972: ARRAY
27973: PPUSH
27974: CALL_OW 458
27978: NOT
27979: IFFALSE 27983
// continue ;
27981: GO 27953
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
27983: LD_VAR 0 4
27987: PUSH
27988: LD_INT 1
27990: ARRAY
27991: PPUSH
27992: LD_VAR 0 4
27996: PUSH
27997: LD_INT 2
27999: ARRAY
28000: PPUSH
28001: CALL_OW 428
28005: PUSH
28006: LD_VAR 0 5
28010: IN
28011: IFFALSE 28040
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
28013: LD_VAR 0 4
28017: PUSH
28018: LD_INT 1
28020: ARRAY
28021: PPUSH
28022: LD_VAR 0 4
28026: PUSH
28027: LD_INT 2
28029: ARRAY
28030: PPUSH
28031: LD_VAR 0 1
28035: PPUSH
28036: CALL_OW 456
// end ;
28040: GO 27953
28042: POP
28043: POP
// end ;
28044: LD_VAR 0 3
28048: RET
// export function Count ( array ) ; var i ; begin
28049: LD_INT 0
28051: PPUSH
28052: PPUSH
// result := 0 ;
28053: LD_ADDR_VAR 0 2
28057: PUSH
28058: LD_INT 0
28060: ST_TO_ADDR
// for i in array do
28061: LD_ADDR_VAR 0 3
28065: PUSH
28066: LD_VAR 0 1
28070: PUSH
28071: FOR_IN
28072: IFFALSE 28096
// if i then
28074: LD_VAR 0 3
28078: IFFALSE 28094
// result := result + 1 ;
28080: LD_ADDR_VAR 0 2
28084: PUSH
28085: LD_VAR 0 2
28089: PUSH
28090: LD_INT 1
28092: PLUS
28093: ST_TO_ADDR
28094: GO 28071
28096: POP
28097: POP
// end ;
28098: LD_VAR 0 2
28102: RET
// export function IsEmpty ( building ) ; begin
28103: LD_INT 0
28105: PPUSH
// if not building then
28106: LD_VAR 0 1
28110: NOT
28111: IFFALSE 28115
// exit ;
28113: GO 28158
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
28115: LD_ADDR_VAR 0 2
28119: PUSH
28120: LD_VAR 0 1
28124: PUSH
28125: LD_INT 22
28127: PUSH
28128: LD_VAR 0 1
28132: PPUSH
28133: CALL_OW 255
28137: PUSH
28138: EMPTY
28139: LIST
28140: LIST
28141: PUSH
28142: LD_INT 58
28144: PUSH
28145: EMPTY
28146: LIST
28147: PUSH
28148: EMPTY
28149: LIST
28150: LIST
28151: PPUSH
28152: CALL_OW 69
28156: IN
28157: ST_TO_ADDR
// end ;
28158: LD_VAR 0 2
28162: RET
// export function IsNotFull ( building ) ; var places ; begin
28163: LD_INT 0
28165: PPUSH
28166: PPUSH
// if not building then
28167: LD_VAR 0 1
28171: NOT
28172: IFFALSE 28176
// exit ;
28174: GO 28347
// result := false ;
28176: LD_ADDR_VAR 0 2
28180: PUSH
28181: LD_INT 0
28183: ST_TO_ADDR
// places := 0 ;
28184: LD_ADDR_VAR 0 3
28188: PUSH
28189: LD_INT 0
28191: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
28192: LD_VAR 0 1
28196: PPUSH
28197: CALL_OW 266
28201: PUSH
28202: LD_INT 0
28204: DOUBLE
28205: EQUAL
28206: IFTRUE 28264
28208: LD_INT 1
28210: DOUBLE
28211: EQUAL
28212: IFTRUE 28264
28214: LD_INT 6
28216: DOUBLE
28217: EQUAL
28218: IFTRUE 28264
28220: LD_INT 7
28222: DOUBLE
28223: EQUAL
28224: IFTRUE 28264
28226: LD_INT 8
28228: DOUBLE
28229: EQUAL
28230: IFTRUE 28264
28232: LD_INT 4
28234: DOUBLE
28235: EQUAL
28236: IFTRUE 28264
28238: LD_INT 5
28240: DOUBLE
28241: EQUAL
28242: IFTRUE 28264
28244: LD_INT 2
28246: DOUBLE
28247: EQUAL
28248: IFTRUE 28264
28250: LD_INT 3
28252: DOUBLE
28253: EQUAL
28254: IFTRUE 28264
28256: LD_INT 35
28258: DOUBLE
28259: EQUAL
28260: IFTRUE 28264
28262: GO 28275
28264: POP
// places := 6 ; b_bunker , b_breastwork :
28265: LD_ADDR_VAR 0 3
28269: PUSH
28270: LD_INT 6
28272: ST_TO_ADDR
28273: GO 28320
28275: LD_INT 32
28277: DOUBLE
28278: EQUAL
28279: IFTRUE 28289
28281: LD_INT 31
28283: DOUBLE
28284: EQUAL
28285: IFTRUE 28289
28287: GO 28300
28289: POP
// places := 1 ; b_control_tower :
28290: LD_ADDR_VAR 0 3
28294: PUSH
28295: LD_INT 1
28297: ST_TO_ADDR
28298: GO 28320
28300: LD_INT 36
28302: DOUBLE
28303: EQUAL
28304: IFTRUE 28308
28306: GO 28319
28308: POP
// places := 3 ; end ;
28309: LD_ADDR_VAR 0 3
28313: PUSH
28314: LD_INT 3
28316: ST_TO_ADDR
28317: GO 28320
28319: POP
// if places then
28320: LD_VAR 0 3
28324: IFFALSE 28347
// result := UnitsInside ( building ) < places ;
28326: LD_ADDR_VAR 0 2
28330: PUSH
28331: LD_VAR 0 1
28335: PPUSH
28336: CALL_OW 313
28340: PUSH
28341: LD_VAR 0 3
28345: LESS
28346: ST_TO_ADDR
// end ;
28347: LD_VAR 0 2
28351: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
28352: LD_INT 0
28354: PPUSH
28355: PPUSH
28356: PPUSH
28357: PPUSH
// tmp := [ ] ;
28358: LD_ADDR_VAR 0 3
28362: PUSH
28363: EMPTY
28364: ST_TO_ADDR
// list := [ ] ;
28365: LD_ADDR_VAR 0 5
28369: PUSH
28370: EMPTY
28371: ST_TO_ADDR
// for i = 16 to 25 do
28372: LD_ADDR_VAR 0 4
28376: PUSH
28377: DOUBLE
28378: LD_INT 16
28380: DEC
28381: ST_TO_ADDR
28382: LD_INT 25
28384: PUSH
28385: FOR_TO
28386: IFFALSE 28459
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
28388: LD_ADDR_VAR 0 3
28392: PUSH
28393: LD_VAR 0 3
28397: PUSH
28398: LD_INT 22
28400: PUSH
28401: LD_VAR 0 1
28405: PPUSH
28406: CALL_OW 255
28410: PUSH
28411: EMPTY
28412: LIST
28413: LIST
28414: PUSH
28415: LD_INT 91
28417: PUSH
28418: LD_VAR 0 1
28422: PUSH
28423: LD_INT 6
28425: PUSH
28426: EMPTY
28427: LIST
28428: LIST
28429: LIST
28430: PUSH
28431: LD_INT 30
28433: PUSH
28434: LD_VAR 0 4
28438: PUSH
28439: EMPTY
28440: LIST
28441: LIST
28442: PUSH
28443: EMPTY
28444: LIST
28445: LIST
28446: LIST
28447: PUSH
28448: EMPTY
28449: LIST
28450: PPUSH
28451: CALL_OW 69
28455: ADD
28456: ST_TO_ADDR
28457: GO 28385
28459: POP
28460: POP
// for i = 1 to tmp do
28461: LD_ADDR_VAR 0 4
28465: PUSH
28466: DOUBLE
28467: LD_INT 1
28469: DEC
28470: ST_TO_ADDR
28471: LD_VAR 0 3
28475: PUSH
28476: FOR_TO
28477: IFFALSE 28565
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
28479: LD_ADDR_VAR 0 5
28483: PUSH
28484: LD_VAR 0 5
28488: PUSH
28489: LD_VAR 0 3
28493: PUSH
28494: LD_VAR 0 4
28498: ARRAY
28499: PPUSH
28500: CALL_OW 266
28504: PUSH
28505: LD_VAR 0 3
28509: PUSH
28510: LD_VAR 0 4
28514: ARRAY
28515: PPUSH
28516: CALL_OW 250
28520: PUSH
28521: LD_VAR 0 3
28525: PUSH
28526: LD_VAR 0 4
28530: ARRAY
28531: PPUSH
28532: CALL_OW 251
28536: PUSH
28537: LD_VAR 0 3
28541: PUSH
28542: LD_VAR 0 4
28546: ARRAY
28547: PPUSH
28548: CALL_OW 254
28552: PUSH
28553: EMPTY
28554: LIST
28555: LIST
28556: LIST
28557: LIST
28558: PUSH
28559: EMPTY
28560: LIST
28561: ADD
28562: ST_TO_ADDR
28563: GO 28476
28565: POP
28566: POP
// result := list ;
28567: LD_ADDR_VAR 0 2
28571: PUSH
28572: LD_VAR 0 5
28576: ST_TO_ADDR
// end ;
28577: LD_VAR 0 2
28581: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
28582: LD_INT 0
28584: PPUSH
28585: PPUSH
28586: PPUSH
28587: PPUSH
28588: PPUSH
28589: PPUSH
28590: PPUSH
// if not factory then
28591: LD_VAR 0 1
28595: NOT
28596: IFFALSE 28600
// exit ;
28598: GO 29193
// if control = control_apeman then
28600: LD_VAR 0 4
28604: PUSH
28605: LD_INT 5
28607: EQUAL
28608: IFFALSE 28717
// begin tmp := UnitsInside ( factory ) ;
28610: LD_ADDR_VAR 0 8
28614: PUSH
28615: LD_VAR 0 1
28619: PPUSH
28620: CALL_OW 313
28624: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
28625: LD_VAR 0 8
28629: PPUSH
28630: LD_INT 25
28632: PUSH
28633: LD_INT 12
28635: PUSH
28636: EMPTY
28637: LIST
28638: LIST
28639: PPUSH
28640: CALL_OW 72
28644: NOT
28645: IFFALSE 28655
// control := control_manual ;
28647: LD_ADDR_VAR 0 4
28651: PUSH
28652: LD_INT 1
28654: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
28655: LD_ADDR_VAR 0 8
28659: PUSH
28660: LD_VAR 0 1
28664: PPUSH
28665: CALL 28352 0 1
28669: ST_TO_ADDR
// if tmp then
28670: LD_VAR 0 8
28674: IFFALSE 28717
// begin for i in tmp do
28676: LD_ADDR_VAR 0 7
28680: PUSH
28681: LD_VAR 0 8
28685: PUSH
28686: FOR_IN
28687: IFFALSE 28715
// if i [ 1 ] = b_ext_radio then
28689: LD_VAR 0 7
28693: PUSH
28694: LD_INT 1
28696: ARRAY
28697: PUSH
28698: LD_INT 22
28700: EQUAL
28701: IFFALSE 28713
// begin control := control_remote ;
28703: LD_ADDR_VAR 0 4
28707: PUSH
28708: LD_INT 2
28710: ST_TO_ADDR
// break ;
28711: GO 28715
// end ;
28713: GO 28686
28715: POP
28716: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28717: LD_VAR 0 1
28721: PPUSH
28722: LD_VAR 0 2
28726: PPUSH
28727: LD_VAR 0 3
28731: PPUSH
28732: LD_VAR 0 4
28736: PPUSH
28737: LD_VAR 0 5
28741: PPUSH
28742: CALL_OW 448
28746: IFFALSE 28781
// begin result := [ chassis , engine , control , weapon ] ;
28748: LD_ADDR_VAR 0 6
28752: PUSH
28753: LD_VAR 0 2
28757: PUSH
28758: LD_VAR 0 3
28762: PUSH
28763: LD_VAR 0 4
28767: PUSH
28768: LD_VAR 0 5
28772: PUSH
28773: EMPTY
28774: LIST
28775: LIST
28776: LIST
28777: LIST
28778: ST_TO_ADDR
// exit ;
28779: GO 29193
// end ; _chassis := AvailableChassisList ( factory ) ;
28781: LD_ADDR_VAR 0 9
28785: PUSH
28786: LD_VAR 0 1
28790: PPUSH
28791: CALL_OW 475
28795: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
28796: LD_ADDR_VAR 0 11
28800: PUSH
28801: LD_VAR 0 1
28805: PPUSH
28806: CALL_OW 476
28810: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
28811: LD_ADDR_VAR 0 12
28815: PUSH
28816: LD_VAR 0 1
28820: PPUSH
28821: CALL_OW 477
28825: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
28826: LD_ADDR_VAR 0 10
28830: PUSH
28831: LD_VAR 0 1
28835: PPUSH
28836: CALL_OW 478
28840: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
28841: LD_VAR 0 9
28845: NOT
28846: PUSH
28847: LD_VAR 0 11
28851: NOT
28852: OR
28853: PUSH
28854: LD_VAR 0 12
28858: NOT
28859: OR
28860: PUSH
28861: LD_VAR 0 10
28865: NOT
28866: OR
28867: IFFALSE 28902
// begin result := [ chassis , engine , control , weapon ] ;
28869: LD_ADDR_VAR 0 6
28873: PUSH
28874: LD_VAR 0 2
28878: PUSH
28879: LD_VAR 0 3
28883: PUSH
28884: LD_VAR 0 4
28888: PUSH
28889: LD_VAR 0 5
28893: PUSH
28894: EMPTY
28895: LIST
28896: LIST
28897: LIST
28898: LIST
28899: ST_TO_ADDR
// exit ;
28900: GO 29193
// end ; if not chassis in _chassis then
28902: LD_VAR 0 2
28906: PUSH
28907: LD_VAR 0 9
28911: IN
28912: NOT
28913: IFFALSE 28939
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
28915: LD_ADDR_VAR 0 2
28919: PUSH
28920: LD_VAR 0 9
28924: PUSH
28925: LD_INT 1
28927: PPUSH
28928: LD_VAR 0 9
28932: PPUSH
28933: CALL_OW 12
28937: ARRAY
28938: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
28939: LD_VAR 0 2
28943: PPUSH
28944: LD_VAR 0 3
28948: PPUSH
28949: CALL 29198 0 2
28953: NOT
28954: IFFALSE 29013
// repeat engine := _engine [ 1 ] ;
28956: LD_ADDR_VAR 0 3
28960: PUSH
28961: LD_VAR 0 11
28965: PUSH
28966: LD_INT 1
28968: ARRAY
28969: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
28970: LD_ADDR_VAR 0 11
28974: PUSH
28975: LD_VAR 0 11
28979: PPUSH
28980: LD_INT 1
28982: PPUSH
28983: CALL_OW 3
28987: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
28988: LD_VAR 0 2
28992: PPUSH
28993: LD_VAR 0 3
28997: PPUSH
28998: CALL 29198 0 2
29002: PUSH
29003: LD_VAR 0 11
29007: PUSH
29008: EMPTY
29009: EQUAL
29010: OR
29011: IFFALSE 28956
// if not control in _control then
29013: LD_VAR 0 4
29017: PUSH
29018: LD_VAR 0 12
29022: IN
29023: NOT
29024: IFFALSE 29050
// control := _control [ rand ( 1 , _control ) ] ;
29026: LD_ADDR_VAR 0 4
29030: PUSH
29031: LD_VAR 0 12
29035: PUSH
29036: LD_INT 1
29038: PPUSH
29039: LD_VAR 0 12
29043: PPUSH
29044: CALL_OW 12
29048: ARRAY
29049: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
29050: LD_VAR 0 2
29054: PPUSH
29055: LD_VAR 0 5
29059: PPUSH
29060: CALL 29418 0 2
29064: NOT
29065: IFFALSE 29124
// repeat weapon := _weapon [ 1 ] ;
29067: LD_ADDR_VAR 0 5
29071: PUSH
29072: LD_VAR 0 10
29076: PUSH
29077: LD_INT 1
29079: ARRAY
29080: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
29081: LD_ADDR_VAR 0 10
29085: PUSH
29086: LD_VAR 0 10
29090: PPUSH
29091: LD_INT 1
29093: PPUSH
29094: CALL_OW 3
29098: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
29099: LD_VAR 0 2
29103: PPUSH
29104: LD_VAR 0 5
29108: PPUSH
29109: CALL 29418 0 2
29113: PUSH
29114: LD_VAR 0 10
29118: PUSH
29119: EMPTY
29120: EQUAL
29121: OR
29122: IFFALSE 29067
// result := [ ] ;
29124: LD_ADDR_VAR 0 6
29128: PUSH
29129: EMPTY
29130: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29131: LD_VAR 0 1
29135: PPUSH
29136: LD_VAR 0 2
29140: PPUSH
29141: LD_VAR 0 3
29145: PPUSH
29146: LD_VAR 0 4
29150: PPUSH
29151: LD_VAR 0 5
29155: PPUSH
29156: CALL_OW 448
29160: IFFALSE 29193
// result := [ chassis , engine , control , weapon ] ;
29162: LD_ADDR_VAR 0 6
29166: PUSH
29167: LD_VAR 0 2
29171: PUSH
29172: LD_VAR 0 3
29176: PUSH
29177: LD_VAR 0 4
29181: PUSH
29182: LD_VAR 0 5
29186: PUSH
29187: EMPTY
29188: LIST
29189: LIST
29190: LIST
29191: LIST
29192: ST_TO_ADDR
// end ;
29193: LD_VAR 0 6
29197: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
29198: LD_INT 0
29200: PPUSH
// if not chassis or not engine then
29201: LD_VAR 0 1
29205: NOT
29206: PUSH
29207: LD_VAR 0 2
29211: NOT
29212: OR
29213: IFFALSE 29217
// exit ;
29215: GO 29413
// case engine of engine_solar :
29217: LD_VAR 0 2
29221: PUSH
29222: LD_INT 2
29224: DOUBLE
29225: EQUAL
29226: IFTRUE 29230
29228: GO 29268
29230: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
29231: LD_ADDR_VAR 0 3
29235: PUSH
29236: LD_INT 11
29238: PUSH
29239: LD_INT 12
29241: PUSH
29242: LD_INT 13
29244: PUSH
29245: LD_INT 14
29247: PUSH
29248: LD_INT 1
29250: PUSH
29251: LD_INT 2
29253: PUSH
29254: LD_INT 3
29256: PUSH
29257: EMPTY
29258: LIST
29259: LIST
29260: LIST
29261: LIST
29262: LIST
29263: LIST
29264: LIST
29265: ST_TO_ADDR
29266: GO 29397
29268: LD_INT 1
29270: DOUBLE
29271: EQUAL
29272: IFTRUE 29276
29274: GO 29338
29276: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
29277: LD_ADDR_VAR 0 3
29281: PUSH
29282: LD_INT 11
29284: PUSH
29285: LD_INT 12
29287: PUSH
29288: LD_INT 13
29290: PUSH
29291: LD_INT 14
29293: PUSH
29294: LD_INT 1
29296: PUSH
29297: LD_INT 2
29299: PUSH
29300: LD_INT 3
29302: PUSH
29303: LD_INT 4
29305: PUSH
29306: LD_INT 5
29308: PUSH
29309: LD_INT 21
29311: PUSH
29312: LD_INT 23
29314: PUSH
29315: LD_INT 22
29317: PUSH
29318: LD_INT 24
29320: PUSH
29321: EMPTY
29322: LIST
29323: LIST
29324: LIST
29325: LIST
29326: LIST
29327: LIST
29328: LIST
29329: LIST
29330: LIST
29331: LIST
29332: LIST
29333: LIST
29334: LIST
29335: ST_TO_ADDR
29336: GO 29397
29338: LD_INT 3
29340: DOUBLE
29341: EQUAL
29342: IFTRUE 29346
29344: GO 29396
29346: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29347: LD_ADDR_VAR 0 3
29351: PUSH
29352: LD_INT 13
29354: PUSH
29355: LD_INT 14
29357: PUSH
29358: LD_INT 2
29360: PUSH
29361: LD_INT 3
29363: PUSH
29364: LD_INT 4
29366: PUSH
29367: LD_INT 5
29369: PUSH
29370: LD_INT 21
29372: PUSH
29373: LD_INT 22
29375: PUSH
29376: LD_INT 23
29378: PUSH
29379: LD_INT 24
29381: PUSH
29382: EMPTY
29383: LIST
29384: LIST
29385: LIST
29386: LIST
29387: LIST
29388: LIST
29389: LIST
29390: LIST
29391: LIST
29392: LIST
29393: ST_TO_ADDR
29394: GO 29397
29396: POP
// result := ( chassis in result ) ;
29397: LD_ADDR_VAR 0 3
29401: PUSH
29402: LD_VAR 0 1
29406: PUSH
29407: LD_VAR 0 3
29411: IN
29412: ST_TO_ADDR
// end ;
29413: LD_VAR 0 3
29417: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
29418: LD_INT 0
29420: PPUSH
// if not chassis or not weapon then
29421: LD_VAR 0 1
29425: NOT
29426: PUSH
29427: LD_VAR 0 2
29431: NOT
29432: OR
29433: IFFALSE 29437
// exit ;
29435: GO 30497
// case weapon of us_machine_gun :
29437: LD_VAR 0 2
29441: PUSH
29442: LD_INT 2
29444: DOUBLE
29445: EQUAL
29446: IFTRUE 29450
29448: GO 29480
29450: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
29451: LD_ADDR_VAR 0 3
29455: PUSH
29456: LD_INT 1
29458: PUSH
29459: LD_INT 2
29461: PUSH
29462: LD_INT 3
29464: PUSH
29465: LD_INT 4
29467: PUSH
29468: LD_INT 5
29470: PUSH
29471: EMPTY
29472: LIST
29473: LIST
29474: LIST
29475: LIST
29476: LIST
29477: ST_TO_ADDR
29478: GO 30481
29480: LD_INT 3
29482: DOUBLE
29483: EQUAL
29484: IFTRUE 29488
29486: GO 29518
29488: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
29489: LD_ADDR_VAR 0 3
29493: PUSH
29494: LD_INT 1
29496: PUSH
29497: LD_INT 2
29499: PUSH
29500: LD_INT 3
29502: PUSH
29503: LD_INT 4
29505: PUSH
29506: LD_INT 5
29508: PUSH
29509: EMPTY
29510: LIST
29511: LIST
29512: LIST
29513: LIST
29514: LIST
29515: ST_TO_ADDR
29516: GO 30481
29518: LD_INT 11
29520: DOUBLE
29521: EQUAL
29522: IFTRUE 29526
29524: GO 29556
29526: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
29527: LD_ADDR_VAR 0 3
29531: PUSH
29532: LD_INT 1
29534: PUSH
29535: LD_INT 2
29537: PUSH
29538: LD_INT 3
29540: PUSH
29541: LD_INT 4
29543: PUSH
29544: LD_INT 5
29546: PUSH
29547: EMPTY
29548: LIST
29549: LIST
29550: LIST
29551: LIST
29552: LIST
29553: ST_TO_ADDR
29554: GO 30481
29556: LD_INT 4
29558: DOUBLE
29559: EQUAL
29560: IFTRUE 29564
29562: GO 29590
29564: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
29565: LD_ADDR_VAR 0 3
29569: PUSH
29570: LD_INT 2
29572: PUSH
29573: LD_INT 3
29575: PUSH
29576: LD_INT 4
29578: PUSH
29579: LD_INT 5
29581: PUSH
29582: EMPTY
29583: LIST
29584: LIST
29585: LIST
29586: LIST
29587: ST_TO_ADDR
29588: GO 30481
29590: LD_INT 5
29592: DOUBLE
29593: EQUAL
29594: IFTRUE 29598
29596: GO 29624
29598: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
29599: LD_ADDR_VAR 0 3
29603: PUSH
29604: LD_INT 2
29606: PUSH
29607: LD_INT 3
29609: PUSH
29610: LD_INT 4
29612: PUSH
29613: LD_INT 5
29615: PUSH
29616: EMPTY
29617: LIST
29618: LIST
29619: LIST
29620: LIST
29621: ST_TO_ADDR
29622: GO 30481
29624: LD_INT 9
29626: DOUBLE
29627: EQUAL
29628: IFTRUE 29632
29630: GO 29658
29632: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
29633: LD_ADDR_VAR 0 3
29637: PUSH
29638: LD_INT 2
29640: PUSH
29641: LD_INT 3
29643: PUSH
29644: LD_INT 4
29646: PUSH
29647: LD_INT 5
29649: PUSH
29650: EMPTY
29651: LIST
29652: LIST
29653: LIST
29654: LIST
29655: ST_TO_ADDR
29656: GO 30481
29658: LD_INT 7
29660: DOUBLE
29661: EQUAL
29662: IFTRUE 29666
29664: GO 29692
29666: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
29667: LD_ADDR_VAR 0 3
29671: PUSH
29672: LD_INT 2
29674: PUSH
29675: LD_INT 3
29677: PUSH
29678: LD_INT 4
29680: PUSH
29681: LD_INT 5
29683: PUSH
29684: EMPTY
29685: LIST
29686: LIST
29687: LIST
29688: LIST
29689: ST_TO_ADDR
29690: GO 30481
29692: LD_INT 12
29694: DOUBLE
29695: EQUAL
29696: IFTRUE 29700
29698: GO 29726
29700: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
29701: LD_ADDR_VAR 0 3
29705: PUSH
29706: LD_INT 2
29708: PUSH
29709: LD_INT 3
29711: PUSH
29712: LD_INT 4
29714: PUSH
29715: LD_INT 5
29717: PUSH
29718: EMPTY
29719: LIST
29720: LIST
29721: LIST
29722: LIST
29723: ST_TO_ADDR
29724: GO 30481
29726: LD_INT 13
29728: DOUBLE
29729: EQUAL
29730: IFTRUE 29734
29732: GO 29760
29734: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
29735: LD_ADDR_VAR 0 3
29739: PUSH
29740: LD_INT 2
29742: PUSH
29743: LD_INT 3
29745: PUSH
29746: LD_INT 4
29748: PUSH
29749: LD_INT 5
29751: PUSH
29752: EMPTY
29753: LIST
29754: LIST
29755: LIST
29756: LIST
29757: ST_TO_ADDR
29758: GO 30481
29760: LD_INT 14
29762: DOUBLE
29763: EQUAL
29764: IFTRUE 29768
29766: GO 29786
29768: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
29769: LD_ADDR_VAR 0 3
29773: PUSH
29774: LD_INT 4
29776: PUSH
29777: LD_INT 5
29779: PUSH
29780: EMPTY
29781: LIST
29782: LIST
29783: ST_TO_ADDR
29784: GO 30481
29786: LD_INT 6
29788: DOUBLE
29789: EQUAL
29790: IFTRUE 29794
29792: GO 29812
29794: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
29795: LD_ADDR_VAR 0 3
29799: PUSH
29800: LD_INT 4
29802: PUSH
29803: LD_INT 5
29805: PUSH
29806: EMPTY
29807: LIST
29808: LIST
29809: ST_TO_ADDR
29810: GO 30481
29812: LD_INT 10
29814: DOUBLE
29815: EQUAL
29816: IFTRUE 29820
29818: GO 29838
29820: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
29821: LD_ADDR_VAR 0 3
29825: PUSH
29826: LD_INT 4
29828: PUSH
29829: LD_INT 5
29831: PUSH
29832: EMPTY
29833: LIST
29834: LIST
29835: ST_TO_ADDR
29836: GO 30481
29838: LD_INT 22
29840: DOUBLE
29841: EQUAL
29842: IFTRUE 29846
29844: GO 29872
29846: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
29847: LD_ADDR_VAR 0 3
29851: PUSH
29852: LD_INT 11
29854: PUSH
29855: LD_INT 12
29857: PUSH
29858: LD_INT 13
29860: PUSH
29861: LD_INT 14
29863: PUSH
29864: EMPTY
29865: LIST
29866: LIST
29867: LIST
29868: LIST
29869: ST_TO_ADDR
29870: GO 30481
29872: LD_INT 23
29874: DOUBLE
29875: EQUAL
29876: IFTRUE 29880
29878: GO 29906
29880: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
29881: LD_ADDR_VAR 0 3
29885: PUSH
29886: LD_INT 11
29888: PUSH
29889: LD_INT 12
29891: PUSH
29892: LD_INT 13
29894: PUSH
29895: LD_INT 14
29897: PUSH
29898: EMPTY
29899: LIST
29900: LIST
29901: LIST
29902: LIST
29903: ST_TO_ADDR
29904: GO 30481
29906: LD_INT 24
29908: DOUBLE
29909: EQUAL
29910: IFTRUE 29914
29912: GO 29940
29914: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
29915: LD_ADDR_VAR 0 3
29919: PUSH
29920: LD_INT 11
29922: PUSH
29923: LD_INT 12
29925: PUSH
29926: LD_INT 13
29928: PUSH
29929: LD_INT 14
29931: PUSH
29932: EMPTY
29933: LIST
29934: LIST
29935: LIST
29936: LIST
29937: ST_TO_ADDR
29938: GO 30481
29940: LD_INT 30
29942: DOUBLE
29943: EQUAL
29944: IFTRUE 29948
29946: GO 29974
29948: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
29949: LD_ADDR_VAR 0 3
29953: PUSH
29954: LD_INT 11
29956: PUSH
29957: LD_INT 12
29959: PUSH
29960: LD_INT 13
29962: PUSH
29963: LD_INT 14
29965: PUSH
29966: EMPTY
29967: LIST
29968: LIST
29969: LIST
29970: LIST
29971: ST_TO_ADDR
29972: GO 30481
29974: LD_INT 25
29976: DOUBLE
29977: EQUAL
29978: IFTRUE 29982
29980: GO 30000
29982: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
29983: LD_ADDR_VAR 0 3
29987: PUSH
29988: LD_INT 13
29990: PUSH
29991: LD_INT 14
29993: PUSH
29994: EMPTY
29995: LIST
29996: LIST
29997: ST_TO_ADDR
29998: GO 30481
30000: LD_INT 27
30002: DOUBLE
30003: EQUAL
30004: IFTRUE 30008
30006: GO 30026
30008: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
30009: LD_ADDR_VAR 0 3
30013: PUSH
30014: LD_INT 13
30016: PUSH
30017: LD_INT 14
30019: PUSH
30020: EMPTY
30021: LIST
30022: LIST
30023: ST_TO_ADDR
30024: GO 30481
30026: LD_INT 92
30028: DOUBLE
30029: EQUAL
30030: IFTRUE 30034
30032: GO 30060
30034: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
30035: LD_ADDR_VAR 0 3
30039: PUSH
30040: LD_INT 11
30042: PUSH
30043: LD_INT 12
30045: PUSH
30046: LD_INT 13
30048: PUSH
30049: LD_INT 14
30051: PUSH
30052: EMPTY
30053: LIST
30054: LIST
30055: LIST
30056: LIST
30057: ST_TO_ADDR
30058: GO 30481
30060: LD_INT 28
30062: DOUBLE
30063: EQUAL
30064: IFTRUE 30068
30066: GO 30086
30068: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
30069: LD_ADDR_VAR 0 3
30073: PUSH
30074: LD_INT 13
30076: PUSH
30077: LD_INT 14
30079: PUSH
30080: EMPTY
30081: LIST
30082: LIST
30083: ST_TO_ADDR
30084: GO 30481
30086: LD_INT 29
30088: DOUBLE
30089: EQUAL
30090: IFTRUE 30094
30092: GO 30112
30094: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
30095: LD_ADDR_VAR 0 3
30099: PUSH
30100: LD_INT 13
30102: PUSH
30103: LD_INT 14
30105: PUSH
30106: EMPTY
30107: LIST
30108: LIST
30109: ST_TO_ADDR
30110: GO 30481
30112: LD_INT 31
30114: DOUBLE
30115: EQUAL
30116: IFTRUE 30120
30118: GO 30138
30120: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
30121: LD_ADDR_VAR 0 3
30125: PUSH
30126: LD_INT 13
30128: PUSH
30129: LD_INT 14
30131: PUSH
30132: EMPTY
30133: LIST
30134: LIST
30135: ST_TO_ADDR
30136: GO 30481
30138: LD_INT 26
30140: DOUBLE
30141: EQUAL
30142: IFTRUE 30146
30144: GO 30164
30146: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
30147: LD_ADDR_VAR 0 3
30151: PUSH
30152: LD_INT 13
30154: PUSH
30155: LD_INT 14
30157: PUSH
30158: EMPTY
30159: LIST
30160: LIST
30161: ST_TO_ADDR
30162: GO 30481
30164: LD_INT 42
30166: DOUBLE
30167: EQUAL
30168: IFTRUE 30172
30170: GO 30198
30172: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
30173: LD_ADDR_VAR 0 3
30177: PUSH
30178: LD_INT 21
30180: PUSH
30181: LD_INT 22
30183: PUSH
30184: LD_INT 23
30186: PUSH
30187: LD_INT 24
30189: PUSH
30190: EMPTY
30191: LIST
30192: LIST
30193: LIST
30194: LIST
30195: ST_TO_ADDR
30196: GO 30481
30198: LD_INT 43
30200: DOUBLE
30201: EQUAL
30202: IFTRUE 30206
30204: GO 30232
30206: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
30207: LD_ADDR_VAR 0 3
30211: PUSH
30212: LD_INT 21
30214: PUSH
30215: LD_INT 22
30217: PUSH
30218: LD_INT 23
30220: PUSH
30221: LD_INT 24
30223: PUSH
30224: EMPTY
30225: LIST
30226: LIST
30227: LIST
30228: LIST
30229: ST_TO_ADDR
30230: GO 30481
30232: LD_INT 44
30234: DOUBLE
30235: EQUAL
30236: IFTRUE 30240
30238: GO 30266
30240: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
30241: LD_ADDR_VAR 0 3
30245: PUSH
30246: LD_INT 21
30248: PUSH
30249: LD_INT 22
30251: PUSH
30252: LD_INT 23
30254: PUSH
30255: LD_INT 24
30257: PUSH
30258: EMPTY
30259: LIST
30260: LIST
30261: LIST
30262: LIST
30263: ST_TO_ADDR
30264: GO 30481
30266: LD_INT 45
30268: DOUBLE
30269: EQUAL
30270: IFTRUE 30274
30272: GO 30300
30274: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
30275: LD_ADDR_VAR 0 3
30279: PUSH
30280: LD_INT 21
30282: PUSH
30283: LD_INT 22
30285: PUSH
30286: LD_INT 23
30288: PUSH
30289: LD_INT 24
30291: PUSH
30292: EMPTY
30293: LIST
30294: LIST
30295: LIST
30296: LIST
30297: ST_TO_ADDR
30298: GO 30481
30300: LD_INT 49
30302: DOUBLE
30303: EQUAL
30304: IFTRUE 30308
30306: GO 30334
30308: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
30309: LD_ADDR_VAR 0 3
30313: PUSH
30314: LD_INT 21
30316: PUSH
30317: LD_INT 22
30319: PUSH
30320: LD_INT 23
30322: PUSH
30323: LD_INT 24
30325: PUSH
30326: EMPTY
30327: LIST
30328: LIST
30329: LIST
30330: LIST
30331: ST_TO_ADDR
30332: GO 30481
30334: LD_INT 51
30336: DOUBLE
30337: EQUAL
30338: IFTRUE 30342
30340: GO 30368
30342: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
30343: LD_ADDR_VAR 0 3
30347: PUSH
30348: LD_INT 21
30350: PUSH
30351: LD_INT 22
30353: PUSH
30354: LD_INT 23
30356: PUSH
30357: LD_INT 24
30359: PUSH
30360: EMPTY
30361: LIST
30362: LIST
30363: LIST
30364: LIST
30365: ST_TO_ADDR
30366: GO 30481
30368: LD_INT 52
30370: DOUBLE
30371: EQUAL
30372: IFTRUE 30376
30374: GO 30402
30376: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
30377: LD_ADDR_VAR 0 3
30381: PUSH
30382: LD_INT 21
30384: PUSH
30385: LD_INT 22
30387: PUSH
30388: LD_INT 23
30390: PUSH
30391: LD_INT 24
30393: PUSH
30394: EMPTY
30395: LIST
30396: LIST
30397: LIST
30398: LIST
30399: ST_TO_ADDR
30400: GO 30481
30402: LD_INT 53
30404: DOUBLE
30405: EQUAL
30406: IFTRUE 30410
30408: GO 30428
30410: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
30411: LD_ADDR_VAR 0 3
30415: PUSH
30416: LD_INT 23
30418: PUSH
30419: LD_INT 24
30421: PUSH
30422: EMPTY
30423: LIST
30424: LIST
30425: ST_TO_ADDR
30426: GO 30481
30428: LD_INT 46
30430: DOUBLE
30431: EQUAL
30432: IFTRUE 30436
30434: GO 30454
30436: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
30437: LD_ADDR_VAR 0 3
30441: PUSH
30442: LD_INT 23
30444: PUSH
30445: LD_INT 24
30447: PUSH
30448: EMPTY
30449: LIST
30450: LIST
30451: ST_TO_ADDR
30452: GO 30481
30454: LD_INT 47
30456: DOUBLE
30457: EQUAL
30458: IFTRUE 30462
30460: GO 30480
30462: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30463: LD_ADDR_VAR 0 3
30467: PUSH
30468: LD_INT 23
30470: PUSH
30471: LD_INT 24
30473: PUSH
30474: EMPTY
30475: LIST
30476: LIST
30477: ST_TO_ADDR
30478: GO 30481
30480: POP
// result := ( chassis in result ) ;
30481: LD_ADDR_VAR 0 3
30485: PUSH
30486: LD_VAR 0 1
30490: PUSH
30491: LD_VAR 0 3
30495: IN
30496: ST_TO_ADDR
// end ;
30497: LD_VAR 0 3
30501: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
30502: LD_INT 0
30504: PPUSH
30505: PPUSH
30506: PPUSH
30507: PPUSH
30508: PPUSH
30509: PPUSH
30510: PPUSH
// result := array ;
30511: LD_ADDR_VAR 0 5
30515: PUSH
30516: LD_VAR 0 1
30520: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
30521: LD_VAR 0 1
30525: NOT
30526: PUSH
30527: LD_VAR 0 2
30531: NOT
30532: OR
30533: PUSH
30534: LD_VAR 0 3
30538: NOT
30539: OR
30540: PUSH
30541: LD_VAR 0 2
30545: PUSH
30546: LD_VAR 0 1
30550: GREATER
30551: OR
30552: PUSH
30553: LD_VAR 0 3
30557: PUSH
30558: LD_VAR 0 1
30562: GREATER
30563: OR
30564: IFFALSE 30568
// exit ;
30566: GO 30864
// if direction then
30568: LD_VAR 0 4
30572: IFFALSE 30636
// begin d := 1 ;
30574: LD_ADDR_VAR 0 9
30578: PUSH
30579: LD_INT 1
30581: ST_TO_ADDR
// if i_from > i_to then
30582: LD_VAR 0 2
30586: PUSH
30587: LD_VAR 0 3
30591: GREATER
30592: IFFALSE 30618
// length := ( array - i_from ) + i_to else
30594: LD_ADDR_VAR 0 11
30598: PUSH
30599: LD_VAR 0 1
30603: PUSH
30604: LD_VAR 0 2
30608: MINUS
30609: PUSH
30610: LD_VAR 0 3
30614: PLUS
30615: ST_TO_ADDR
30616: GO 30634
// length := i_to - i_from ;
30618: LD_ADDR_VAR 0 11
30622: PUSH
30623: LD_VAR 0 3
30627: PUSH
30628: LD_VAR 0 2
30632: MINUS
30633: ST_TO_ADDR
// end else
30634: GO 30697
// begin d := - 1 ;
30636: LD_ADDR_VAR 0 9
30640: PUSH
30641: LD_INT 1
30643: NEG
30644: ST_TO_ADDR
// if i_from > i_to then
30645: LD_VAR 0 2
30649: PUSH
30650: LD_VAR 0 3
30654: GREATER
30655: IFFALSE 30675
// length := i_from - i_to else
30657: LD_ADDR_VAR 0 11
30661: PUSH
30662: LD_VAR 0 2
30666: PUSH
30667: LD_VAR 0 3
30671: MINUS
30672: ST_TO_ADDR
30673: GO 30697
// length := ( array - i_to ) + i_from ;
30675: LD_ADDR_VAR 0 11
30679: PUSH
30680: LD_VAR 0 1
30684: PUSH
30685: LD_VAR 0 3
30689: MINUS
30690: PUSH
30691: LD_VAR 0 2
30695: PLUS
30696: ST_TO_ADDR
// end ; if not length then
30697: LD_VAR 0 11
30701: NOT
30702: IFFALSE 30706
// exit ;
30704: GO 30864
// tmp := array ;
30706: LD_ADDR_VAR 0 10
30710: PUSH
30711: LD_VAR 0 1
30715: ST_TO_ADDR
// for i = 1 to length do
30716: LD_ADDR_VAR 0 6
30720: PUSH
30721: DOUBLE
30722: LD_INT 1
30724: DEC
30725: ST_TO_ADDR
30726: LD_VAR 0 11
30730: PUSH
30731: FOR_TO
30732: IFFALSE 30852
// begin for j = 1 to array do
30734: LD_ADDR_VAR 0 7
30738: PUSH
30739: DOUBLE
30740: LD_INT 1
30742: DEC
30743: ST_TO_ADDR
30744: LD_VAR 0 1
30748: PUSH
30749: FOR_TO
30750: IFFALSE 30838
// begin k := j + d ;
30752: LD_ADDR_VAR 0 8
30756: PUSH
30757: LD_VAR 0 7
30761: PUSH
30762: LD_VAR 0 9
30766: PLUS
30767: ST_TO_ADDR
// if k > array then
30768: LD_VAR 0 8
30772: PUSH
30773: LD_VAR 0 1
30777: GREATER
30778: IFFALSE 30788
// k := 1 ;
30780: LD_ADDR_VAR 0 8
30784: PUSH
30785: LD_INT 1
30787: ST_TO_ADDR
// if not k then
30788: LD_VAR 0 8
30792: NOT
30793: IFFALSE 30805
// k := array ;
30795: LD_ADDR_VAR 0 8
30799: PUSH
30800: LD_VAR 0 1
30804: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
30805: LD_ADDR_VAR 0 10
30809: PUSH
30810: LD_VAR 0 10
30814: PPUSH
30815: LD_VAR 0 8
30819: PPUSH
30820: LD_VAR 0 1
30824: PUSH
30825: LD_VAR 0 7
30829: ARRAY
30830: PPUSH
30831: CALL_OW 1
30835: ST_TO_ADDR
// end ;
30836: GO 30749
30838: POP
30839: POP
// array := tmp ;
30840: LD_ADDR_VAR 0 1
30844: PUSH
30845: LD_VAR 0 10
30849: ST_TO_ADDR
// end ;
30850: GO 30731
30852: POP
30853: POP
// result := array ;
30854: LD_ADDR_VAR 0 5
30858: PUSH
30859: LD_VAR 0 1
30863: ST_TO_ADDR
// end ;
30864: LD_VAR 0 5
30868: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
30869: LD_INT 0
30871: PPUSH
30872: PPUSH
// result := 0 ;
30873: LD_ADDR_VAR 0 3
30877: PUSH
30878: LD_INT 0
30880: ST_TO_ADDR
// if not array or not value in array then
30881: LD_VAR 0 1
30885: NOT
30886: PUSH
30887: LD_VAR 0 2
30891: PUSH
30892: LD_VAR 0 1
30896: IN
30897: NOT
30898: OR
30899: IFFALSE 30903
// exit ;
30901: GO 30957
// for i = 1 to array do
30903: LD_ADDR_VAR 0 4
30907: PUSH
30908: DOUBLE
30909: LD_INT 1
30911: DEC
30912: ST_TO_ADDR
30913: LD_VAR 0 1
30917: PUSH
30918: FOR_TO
30919: IFFALSE 30955
// if value = array [ i ] then
30921: LD_VAR 0 2
30925: PUSH
30926: LD_VAR 0 1
30930: PUSH
30931: LD_VAR 0 4
30935: ARRAY
30936: EQUAL
30937: IFFALSE 30953
// begin result := i ;
30939: LD_ADDR_VAR 0 3
30943: PUSH
30944: LD_VAR 0 4
30948: ST_TO_ADDR
// exit ;
30949: POP
30950: POP
30951: GO 30957
// end ;
30953: GO 30918
30955: POP
30956: POP
// end ;
30957: LD_VAR 0 3
30961: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
30962: LD_INT 0
30964: PPUSH
// vc_chassis := chassis ;
30965: LD_ADDR_OWVAR 37
30969: PUSH
30970: LD_VAR 0 1
30974: ST_TO_ADDR
// vc_engine := engine ;
30975: LD_ADDR_OWVAR 39
30979: PUSH
30980: LD_VAR 0 2
30984: ST_TO_ADDR
// vc_control := control ;
30985: LD_ADDR_OWVAR 38
30989: PUSH
30990: LD_VAR 0 3
30994: ST_TO_ADDR
// vc_weapon := weapon ;
30995: LD_ADDR_OWVAR 40
30999: PUSH
31000: LD_VAR 0 4
31004: ST_TO_ADDR
// vc_fuel_battery := fuel ;
31005: LD_ADDR_OWVAR 41
31009: PUSH
31010: LD_VAR 0 5
31014: ST_TO_ADDR
// end ;
31015: LD_VAR 0 6
31019: RET
// export function WantPlant ( unit ) ; var task ; begin
31020: LD_INT 0
31022: PPUSH
31023: PPUSH
// result := false ;
31024: LD_ADDR_VAR 0 2
31028: PUSH
31029: LD_INT 0
31031: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
31032: LD_ADDR_VAR 0 3
31036: PUSH
31037: LD_VAR 0 1
31041: PPUSH
31042: CALL_OW 437
31046: ST_TO_ADDR
// if task then
31047: LD_VAR 0 3
31051: IFFALSE 31079
// if task [ 1 ] [ 1 ] = p then
31053: LD_VAR 0 3
31057: PUSH
31058: LD_INT 1
31060: ARRAY
31061: PUSH
31062: LD_INT 1
31064: ARRAY
31065: PUSH
31066: LD_STRING p
31068: EQUAL
31069: IFFALSE 31079
// result := true ;
31071: LD_ADDR_VAR 0 2
31075: PUSH
31076: LD_INT 1
31078: ST_TO_ADDR
// end ;
31079: LD_VAR 0 2
31083: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
31084: LD_INT 0
31086: PPUSH
31087: PPUSH
31088: PPUSH
31089: PPUSH
// if pos < 1 then
31090: LD_VAR 0 2
31094: PUSH
31095: LD_INT 1
31097: LESS
31098: IFFALSE 31102
// exit ;
31100: GO 31405
// if pos = 1 then
31102: LD_VAR 0 2
31106: PUSH
31107: LD_INT 1
31109: EQUAL
31110: IFFALSE 31143
// result := Replace ( arr , pos [ 1 ] , value ) else
31112: LD_ADDR_VAR 0 4
31116: PUSH
31117: LD_VAR 0 1
31121: PPUSH
31122: LD_VAR 0 2
31126: PUSH
31127: LD_INT 1
31129: ARRAY
31130: PPUSH
31131: LD_VAR 0 3
31135: PPUSH
31136: CALL_OW 1
31140: ST_TO_ADDR
31141: GO 31405
// begin tmp := arr ;
31143: LD_ADDR_VAR 0 6
31147: PUSH
31148: LD_VAR 0 1
31152: ST_TO_ADDR
// s_arr := [ tmp ] ;
31153: LD_ADDR_VAR 0 7
31157: PUSH
31158: LD_VAR 0 6
31162: PUSH
31163: EMPTY
31164: LIST
31165: ST_TO_ADDR
// for i = 1 to pos - 1 do
31166: LD_ADDR_VAR 0 5
31170: PUSH
31171: DOUBLE
31172: LD_INT 1
31174: DEC
31175: ST_TO_ADDR
31176: LD_VAR 0 2
31180: PUSH
31181: LD_INT 1
31183: MINUS
31184: PUSH
31185: FOR_TO
31186: IFFALSE 31231
// begin tmp := tmp [ pos [ i ] ] ;
31188: LD_ADDR_VAR 0 6
31192: PUSH
31193: LD_VAR 0 6
31197: PUSH
31198: LD_VAR 0 2
31202: PUSH
31203: LD_VAR 0 5
31207: ARRAY
31208: ARRAY
31209: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
31210: LD_ADDR_VAR 0 7
31214: PUSH
31215: LD_VAR 0 7
31219: PUSH
31220: LD_VAR 0 6
31224: PUSH
31225: EMPTY
31226: LIST
31227: ADD
31228: ST_TO_ADDR
// end ;
31229: GO 31185
31231: POP
31232: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
31233: LD_ADDR_VAR 0 6
31237: PUSH
31238: LD_VAR 0 6
31242: PPUSH
31243: LD_VAR 0 2
31247: PUSH
31248: LD_VAR 0 2
31252: ARRAY
31253: PPUSH
31254: LD_VAR 0 3
31258: PPUSH
31259: CALL_OW 1
31263: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
31264: LD_ADDR_VAR 0 7
31268: PUSH
31269: LD_VAR 0 7
31273: PPUSH
31274: LD_VAR 0 7
31278: PPUSH
31279: LD_VAR 0 6
31283: PPUSH
31284: CALL_OW 1
31288: ST_TO_ADDR
// for i = s_arr downto 2 do
31289: LD_ADDR_VAR 0 5
31293: PUSH
31294: DOUBLE
31295: LD_VAR 0 7
31299: INC
31300: ST_TO_ADDR
31301: LD_INT 2
31303: PUSH
31304: FOR_DOWNTO
31305: IFFALSE 31389
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
31307: LD_ADDR_VAR 0 6
31311: PUSH
31312: LD_VAR 0 7
31316: PUSH
31317: LD_VAR 0 5
31321: PUSH
31322: LD_INT 1
31324: MINUS
31325: ARRAY
31326: PPUSH
31327: LD_VAR 0 2
31331: PUSH
31332: LD_VAR 0 5
31336: PUSH
31337: LD_INT 1
31339: MINUS
31340: ARRAY
31341: PPUSH
31342: LD_VAR 0 7
31346: PUSH
31347: LD_VAR 0 5
31351: ARRAY
31352: PPUSH
31353: CALL_OW 1
31357: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
31358: LD_ADDR_VAR 0 7
31362: PUSH
31363: LD_VAR 0 7
31367: PPUSH
31368: LD_VAR 0 5
31372: PUSH
31373: LD_INT 1
31375: MINUS
31376: PPUSH
31377: LD_VAR 0 6
31381: PPUSH
31382: CALL_OW 1
31386: ST_TO_ADDR
// end ;
31387: GO 31304
31389: POP
31390: POP
// result := s_arr [ 1 ] ;
31391: LD_ADDR_VAR 0 4
31395: PUSH
31396: LD_VAR 0 7
31400: PUSH
31401: LD_INT 1
31403: ARRAY
31404: ST_TO_ADDR
// end ; end ;
31405: LD_VAR 0 4
31409: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
31410: LD_INT 0
31412: PPUSH
31413: PPUSH
// if not list then
31414: LD_VAR 0 1
31418: NOT
31419: IFFALSE 31423
// exit ;
31421: GO 31514
// i := list [ pos1 ] ;
31423: LD_ADDR_VAR 0 5
31427: PUSH
31428: LD_VAR 0 1
31432: PUSH
31433: LD_VAR 0 2
31437: ARRAY
31438: ST_TO_ADDR
// if not i then
31439: LD_VAR 0 5
31443: NOT
31444: IFFALSE 31448
// exit ;
31446: GO 31514
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
31448: LD_ADDR_VAR 0 1
31452: PUSH
31453: LD_VAR 0 1
31457: PPUSH
31458: LD_VAR 0 2
31462: PPUSH
31463: LD_VAR 0 1
31467: PUSH
31468: LD_VAR 0 3
31472: ARRAY
31473: PPUSH
31474: CALL_OW 1
31478: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
31479: LD_ADDR_VAR 0 1
31483: PUSH
31484: LD_VAR 0 1
31488: PPUSH
31489: LD_VAR 0 3
31493: PPUSH
31494: LD_VAR 0 5
31498: PPUSH
31499: CALL_OW 1
31503: ST_TO_ADDR
// result := list ;
31504: LD_ADDR_VAR 0 4
31508: PUSH
31509: LD_VAR 0 1
31513: ST_TO_ADDR
// end ;
31514: LD_VAR 0 4
31518: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
31519: LD_INT 0
31521: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
31522: LD_ADDR_VAR 0 5
31526: PUSH
31527: LD_VAR 0 1
31531: PPUSH
31532: CALL_OW 250
31536: PPUSH
31537: LD_VAR 0 1
31541: PPUSH
31542: CALL_OW 251
31546: PPUSH
31547: LD_VAR 0 2
31551: PPUSH
31552: LD_VAR 0 3
31556: PPUSH
31557: LD_VAR 0 4
31561: PPUSH
31562: CALL 31572 0 5
31566: ST_TO_ADDR
// end ;
31567: LD_VAR 0 5
31571: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
31572: LD_INT 0
31574: PPUSH
31575: PPUSH
31576: PPUSH
31577: PPUSH
// if not list then
31578: LD_VAR 0 3
31582: NOT
31583: IFFALSE 31587
// exit ;
31585: GO 31975
// result := [ ] ;
31587: LD_ADDR_VAR 0 6
31591: PUSH
31592: EMPTY
31593: ST_TO_ADDR
// for i in list do
31594: LD_ADDR_VAR 0 7
31598: PUSH
31599: LD_VAR 0 3
31603: PUSH
31604: FOR_IN
31605: IFFALSE 31807
// begin tmp := GetDistUnitXY ( i , x , y ) ;
31607: LD_ADDR_VAR 0 9
31611: PUSH
31612: LD_VAR 0 7
31616: PPUSH
31617: LD_VAR 0 1
31621: PPUSH
31622: LD_VAR 0 2
31626: PPUSH
31627: CALL_OW 297
31631: ST_TO_ADDR
// if not result then
31632: LD_VAR 0 6
31636: NOT
31637: IFFALSE 31663
// result := [ [ i , tmp ] ] else
31639: LD_ADDR_VAR 0 6
31643: PUSH
31644: LD_VAR 0 7
31648: PUSH
31649: LD_VAR 0 9
31653: PUSH
31654: EMPTY
31655: LIST
31656: LIST
31657: PUSH
31658: EMPTY
31659: LIST
31660: ST_TO_ADDR
31661: GO 31805
// begin if result [ result ] [ 2 ] < tmp then
31663: LD_VAR 0 6
31667: PUSH
31668: LD_VAR 0 6
31672: ARRAY
31673: PUSH
31674: LD_INT 2
31676: ARRAY
31677: PUSH
31678: LD_VAR 0 9
31682: LESS
31683: IFFALSE 31725
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
31685: LD_ADDR_VAR 0 6
31689: PUSH
31690: LD_VAR 0 6
31694: PPUSH
31695: LD_VAR 0 6
31699: PUSH
31700: LD_INT 1
31702: PLUS
31703: PPUSH
31704: LD_VAR 0 7
31708: PUSH
31709: LD_VAR 0 9
31713: PUSH
31714: EMPTY
31715: LIST
31716: LIST
31717: PPUSH
31718: CALL_OW 2
31722: ST_TO_ADDR
31723: GO 31805
// for j = 1 to result do
31725: LD_ADDR_VAR 0 8
31729: PUSH
31730: DOUBLE
31731: LD_INT 1
31733: DEC
31734: ST_TO_ADDR
31735: LD_VAR 0 6
31739: PUSH
31740: FOR_TO
31741: IFFALSE 31803
// begin if tmp < result [ j ] [ 2 ] then
31743: LD_VAR 0 9
31747: PUSH
31748: LD_VAR 0 6
31752: PUSH
31753: LD_VAR 0 8
31757: ARRAY
31758: PUSH
31759: LD_INT 2
31761: ARRAY
31762: LESS
31763: IFFALSE 31801
// begin result := Insert ( result , j , [ i , tmp ] ) ;
31765: LD_ADDR_VAR 0 6
31769: PUSH
31770: LD_VAR 0 6
31774: PPUSH
31775: LD_VAR 0 8
31779: PPUSH
31780: LD_VAR 0 7
31784: PUSH
31785: LD_VAR 0 9
31789: PUSH
31790: EMPTY
31791: LIST
31792: LIST
31793: PPUSH
31794: CALL_OW 2
31798: ST_TO_ADDR
// break ;
31799: GO 31803
// end ; end ;
31801: GO 31740
31803: POP
31804: POP
// end ; end ;
31805: GO 31604
31807: POP
31808: POP
// if result and not asc then
31809: LD_VAR 0 6
31813: PUSH
31814: LD_VAR 0 4
31818: NOT
31819: AND
31820: IFFALSE 31895
// begin tmp := result ;
31822: LD_ADDR_VAR 0 9
31826: PUSH
31827: LD_VAR 0 6
31831: ST_TO_ADDR
// for i = tmp downto 1 do
31832: LD_ADDR_VAR 0 7
31836: PUSH
31837: DOUBLE
31838: LD_VAR 0 9
31842: INC
31843: ST_TO_ADDR
31844: LD_INT 1
31846: PUSH
31847: FOR_DOWNTO
31848: IFFALSE 31893
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
31850: LD_ADDR_VAR 0 6
31854: PUSH
31855: LD_VAR 0 6
31859: PPUSH
31860: LD_VAR 0 9
31864: PUSH
31865: LD_VAR 0 7
31869: MINUS
31870: PUSH
31871: LD_INT 1
31873: PLUS
31874: PPUSH
31875: LD_VAR 0 9
31879: PUSH
31880: LD_VAR 0 7
31884: ARRAY
31885: PPUSH
31886: CALL_OW 1
31890: ST_TO_ADDR
31891: GO 31847
31893: POP
31894: POP
// end ; tmp := [ ] ;
31895: LD_ADDR_VAR 0 9
31899: PUSH
31900: EMPTY
31901: ST_TO_ADDR
// if mode then
31902: LD_VAR 0 5
31906: IFFALSE 31975
// begin for i = 1 to result do
31908: LD_ADDR_VAR 0 7
31912: PUSH
31913: DOUBLE
31914: LD_INT 1
31916: DEC
31917: ST_TO_ADDR
31918: LD_VAR 0 6
31922: PUSH
31923: FOR_TO
31924: IFFALSE 31963
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
31926: LD_ADDR_VAR 0 9
31930: PUSH
31931: LD_VAR 0 9
31935: PPUSH
31936: LD_VAR 0 7
31940: PPUSH
31941: LD_VAR 0 6
31945: PUSH
31946: LD_VAR 0 7
31950: ARRAY
31951: PUSH
31952: LD_INT 1
31954: ARRAY
31955: PPUSH
31956: CALL_OW 1
31960: ST_TO_ADDR
31961: GO 31923
31963: POP
31964: POP
// result := tmp ;
31965: LD_ADDR_VAR 0 6
31969: PUSH
31970: LD_VAR 0 9
31974: ST_TO_ADDR
// end ; end ;
31975: LD_VAR 0 6
31979: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
31980: LD_INT 0
31982: PPUSH
31983: PPUSH
31984: PPUSH
31985: PPUSH
31986: PPUSH
31987: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
31988: LD_ADDR_VAR 0 5
31992: PUSH
31993: LD_INT 0
31995: PUSH
31996: LD_INT 0
31998: PUSH
31999: LD_INT 0
32001: PUSH
32002: EMPTY
32003: PUSH
32004: EMPTY
32005: LIST
32006: LIST
32007: LIST
32008: LIST
32009: ST_TO_ADDR
// if not x or not y then
32010: LD_VAR 0 2
32014: NOT
32015: PUSH
32016: LD_VAR 0 3
32020: NOT
32021: OR
32022: IFFALSE 32026
// exit ;
32024: GO 33676
// if not range then
32026: LD_VAR 0 4
32030: NOT
32031: IFFALSE 32041
// range := 10 ;
32033: LD_ADDR_VAR 0 4
32037: PUSH
32038: LD_INT 10
32040: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32041: LD_ADDR_VAR 0 8
32045: PUSH
32046: LD_INT 81
32048: PUSH
32049: LD_VAR 0 1
32053: PUSH
32054: EMPTY
32055: LIST
32056: LIST
32057: PUSH
32058: LD_INT 92
32060: PUSH
32061: LD_VAR 0 2
32065: PUSH
32066: LD_VAR 0 3
32070: PUSH
32071: LD_VAR 0 4
32075: PUSH
32076: EMPTY
32077: LIST
32078: LIST
32079: LIST
32080: LIST
32081: PUSH
32082: LD_INT 3
32084: PUSH
32085: LD_INT 21
32087: PUSH
32088: LD_INT 3
32090: PUSH
32091: EMPTY
32092: LIST
32093: LIST
32094: PUSH
32095: EMPTY
32096: LIST
32097: LIST
32098: PUSH
32099: EMPTY
32100: LIST
32101: LIST
32102: LIST
32103: PPUSH
32104: CALL_OW 69
32108: ST_TO_ADDR
// if not tmp then
32109: LD_VAR 0 8
32113: NOT
32114: IFFALSE 32118
// exit ;
32116: GO 33676
// for i in tmp do
32118: LD_ADDR_VAR 0 6
32122: PUSH
32123: LD_VAR 0 8
32127: PUSH
32128: FOR_IN
32129: IFFALSE 33651
// begin points := [ 0 , 0 , 0 ] ;
32131: LD_ADDR_VAR 0 9
32135: PUSH
32136: LD_INT 0
32138: PUSH
32139: LD_INT 0
32141: PUSH
32142: LD_INT 0
32144: PUSH
32145: EMPTY
32146: LIST
32147: LIST
32148: LIST
32149: ST_TO_ADDR
// bpoints := 1 ;
32150: LD_ADDR_VAR 0 10
32154: PUSH
32155: LD_INT 1
32157: ST_TO_ADDR
// case GetType ( i ) of unit_human :
32158: LD_VAR 0 6
32162: PPUSH
32163: CALL_OW 247
32167: PUSH
32168: LD_INT 1
32170: DOUBLE
32171: EQUAL
32172: IFTRUE 32176
32174: GO 32754
32176: POP
// begin if GetClass ( i ) = 1 then
32177: LD_VAR 0 6
32181: PPUSH
32182: CALL_OW 257
32186: PUSH
32187: LD_INT 1
32189: EQUAL
32190: IFFALSE 32211
// points := [ 10 , 5 , 3 ] ;
32192: LD_ADDR_VAR 0 9
32196: PUSH
32197: LD_INT 10
32199: PUSH
32200: LD_INT 5
32202: PUSH
32203: LD_INT 3
32205: PUSH
32206: EMPTY
32207: LIST
32208: LIST
32209: LIST
32210: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
32211: LD_VAR 0 6
32215: PPUSH
32216: CALL_OW 257
32220: PUSH
32221: LD_INT 2
32223: PUSH
32224: LD_INT 3
32226: PUSH
32227: LD_INT 4
32229: PUSH
32230: EMPTY
32231: LIST
32232: LIST
32233: LIST
32234: IN
32235: IFFALSE 32256
// points := [ 3 , 2 , 1 ] ;
32237: LD_ADDR_VAR 0 9
32241: PUSH
32242: LD_INT 3
32244: PUSH
32245: LD_INT 2
32247: PUSH
32248: LD_INT 1
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: LIST
32255: ST_TO_ADDR
// if GetClass ( i ) = 5 then
32256: LD_VAR 0 6
32260: PPUSH
32261: CALL_OW 257
32265: PUSH
32266: LD_INT 5
32268: EQUAL
32269: IFFALSE 32290
// points := [ 130 , 5 , 2 ] ;
32271: LD_ADDR_VAR 0 9
32275: PUSH
32276: LD_INT 130
32278: PUSH
32279: LD_INT 5
32281: PUSH
32282: LD_INT 2
32284: PUSH
32285: EMPTY
32286: LIST
32287: LIST
32288: LIST
32289: ST_TO_ADDR
// if GetClass ( i ) = 8 then
32290: LD_VAR 0 6
32294: PPUSH
32295: CALL_OW 257
32299: PUSH
32300: LD_INT 8
32302: EQUAL
32303: IFFALSE 32324
// points := [ 35 , 35 , 30 ] ;
32305: LD_ADDR_VAR 0 9
32309: PUSH
32310: LD_INT 35
32312: PUSH
32313: LD_INT 35
32315: PUSH
32316: LD_INT 30
32318: PUSH
32319: EMPTY
32320: LIST
32321: LIST
32322: LIST
32323: ST_TO_ADDR
// if GetClass ( i ) = 9 then
32324: LD_VAR 0 6
32328: PPUSH
32329: CALL_OW 257
32333: PUSH
32334: LD_INT 9
32336: EQUAL
32337: IFFALSE 32358
// points := [ 20 , 55 , 40 ] ;
32339: LD_ADDR_VAR 0 9
32343: PUSH
32344: LD_INT 20
32346: PUSH
32347: LD_INT 55
32349: PUSH
32350: LD_INT 40
32352: PUSH
32353: EMPTY
32354: LIST
32355: LIST
32356: LIST
32357: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
32358: LD_VAR 0 6
32362: PPUSH
32363: CALL_OW 257
32367: PUSH
32368: LD_INT 12
32370: PUSH
32371: LD_INT 16
32373: PUSH
32374: EMPTY
32375: LIST
32376: LIST
32377: IN
32378: IFFALSE 32399
// points := [ 5 , 3 , 2 ] ;
32380: LD_ADDR_VAR 0 9
32384: PUSH
32385: LD_INT 5
32387: PUSH
32388: LD_INT 3
32390: PUSH
32391: LD_INT 2
32393: PUSH
32394: EMPTY
32395: LIST
32396: LIST
32397: LIST
32398: ST_TO_ADDR
// if GetClass ( i ) = 17 then
32399: LD_VAR 0 6
32403: PPUSH
32404: CALL_OW 257
32408: PUSH
32409: LD_INT 17
32411: EQUAL
32412: IFFALSE 32433
// points := [ 100 , 50 , 75 ] ;
32414: LD_ADDR_VAR 0 9
32418: PUSH
32419: LD_INT 100
32421: PUSH
32422: LD_INT 50
32424: PUSH
32425: LD_INT 75
32427: PUSH
32428: EMPTY
32429: LIST
32430: LIST
32431: LIST
32432: ST_TO_ADDR
// if GetClass ( i ) = 15 then
32433: LD_VAR 0 6
32437: PPUSH
32438: CALL_OW 257
32442: PUSH
32443: LD_INT 15
32445: EQUAL
32446: IFFALSE 32467
// points := [ 10 , 5 , 3 ] ;
32448: LD_ADDR_VAR 0 9
32452: PUSH
32453: LD_INT 10
32455: PUSH
32456: LD_INT 5
32458: PUSH
32459: LD_INT 3
32461: PUSH
32462: EMPTY
32463: LIST
32464: LIST
32465: LIST
32466: ST_TO_ADDR
// if GetClass ( i ) = 14 then
32467: LD_VAR 0 6
32471: PPUSH
32472: CALL_OW 257
32476: PUSH
32477: LD_INT 14
32479: EQUAL
32480: IFFALSE 32501
// points := [ 10 , 0 , 0 ] ;
32482: LD_ADDR_VAR 0 9
32486: PUSH
32487: LD_INT 10
32489: PUSH
32490: LD_INT 0
32492: PUSH
32493: LD_INT 0
32495: PUSH
32496: EMPTY
32497: LIST
32498: LIST
32499: LIST
32500: ST_TO_ADDR
// if GetClass ( i ) = 11 then
32501: LD_VAR 0 6
32505: PPUSH
32506: CALL_OW 257
32510: PUSH
32511: LD_INT 11
32513: EQUAL
32514: IFFALSE 32535
// points := [ 30 , 10 , 5 ] ;
32516: LD_ADDR_VAR 0 9
32520: PUSH
32521: LD_INT 30
32523: PUSH
32524: LD_INT 10
32526: PUSH
32527: LD_INT 5
32529: PUSH
32530: EMPTY
32531: LIST
32532: LIST
32533: LIST
32534: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
32535: LD_VAR 0 1
32539: PPUSH
32540: LD_INT 5
32542: PPUSH
32543: CALL_OW 321
32547: PUSH
32548: LD_INT 2
32550: EQUAL
32551: IFFALSE 32568
// bpoints := bpoints * 1.8 ;
32553: LD_ADDR_VAR 0 10
32557: PUSH
32558: LD_VAR 0 10
32562: PUSH
32563: LD_REAL  1.80000000000000E+0000
32566: MUL
32567: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
32568: LD_VAR 0 6
32572: PPUSH
32573: CALL_OW 257
32577: PUSH
32578: LD_INT 1
32580: PUSH
32581: LD_INT 2
32583: PUSH
32584: LD_INT 3
32586: PUSH
32587: LD_INT 4
32589: PUSH
32590: EMPTY
32591: LIST
32592: LIST
32593: LIST
32594: LIST
32595: IN
32596: PUSH
32597: LD_VAR 0 1
32601: PPUSH
32602: LD_INT 51
32604: PPUSH
32605: CALL_OW 321
32609: PUSH
32610: LD_INT 2
32612: EQUAL
32613: AND
32614: IFFALSE 32631
// bpoints := bpoints * 1.2 ;
32616: LD_ADDR_VAR 0 10
32620: PUSH
32621: LD_VAR 0 10
32625: PUSH
32626: LD_REAL  1.20000000000000E+0000
32629: MUL
32630: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
32631: LD_VAR 0 6
32635: PPUSH
32636: CALL_OW 257
32640: PUSH
32641: LD_INT 5
32643: PUSH
32644: LD_INT 7
32646: PUSH
32647: LD_INT 9
32649: PUSH
32650: EMPTY
32651: LIST
32652: LIST
32653: LIST
32654: IN
32655: PUSH
32656: LD_VAR 0 1
32660: PPUSH
32661: LD_INT 52
32663: PPUSH
32664: CALL_OW 321
32668: PUSH
32669: LD_INT 2
32671: EQUAL
32672: AND
32673: IFFALSE 32690
// bpoints := bpoints * 1.5 ;
32675: LD_ADDR_VAR 0 10
32679: PUSH
32680: LD_VAR 0 10
32684: PUSH
32685: LD_REAL  1.50000000000000E+0000
32688: MUL
32689: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
32690: LD_VAR 0 1
32694: PPUSH
32695: LD_INT 66
32697: PPUSH
32698: CALL_OW 321
32702: PUSH
32703: LD_INT 2
32705: EQUAL
32706: IFFALSE 32723
// bpoints := bpoints * 1.1 ;
32708: LD_ADDR_VAR 0 10
32712: PUSH
32713: LD_VAR 0 10
32717: PUSH
32718: LD_REAL  1.10000000000000E+0000
32721: MUL
32722: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
32723: LD_ADDR_VAR 0 10
32727: PUSH
32728: LD_VAR 0 10
32732: PUSH
32733: LD_VAR 0 6
32737: PPUSH
32738: LD_INT 1
32740: PPUSH
32741: CALL_OW 259
32745: PUSH
32746: LD_REAL  1.15000000000000E+0000
32749: MUL
32750: MUL
32751: ST_TO_ADDR
// end ; unit_vehicle :
32752: GO 33580
32754: LD_INT 2
32756: DOUBLE
32757: EQUAL
32758: IFTRUE 32762
32760: GO 33568
32762: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
32763: LD_VAR 0 6
32767: PPUSH
32768: CALL_OW 264
32772: PUSH
32773: LD_INT 2
32775: PUSH
32776: LD_INT 42
32778: PUSH
32779: LD_INT 24
32781: PUSH
32782: EMPTY
32783: LIST
32784: LIST
32785: LIST
32786: IN
32787: IFFALSE 32808
// points := [ 25 , 5 , 3 ] ;
32789: LD_ADDR_VAR 0 9
32793: PUSH
32794: LD_INT 25
32796: PUSH
32797: LD_INT 5
32799: PUSH
32800: LD_INT 3
32802: PUSH
32803: EMPTY
32804: LIST
32805: LIST
32806: LIST
32807: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
32808: LD_VAR 0 6
32812: PPUSH
32813: CALL_OW 264
32817: PUSH
32818: LD_INT 4
32820: PUSH
32821: LD_INT 43
32823: PUSH
32824: LD_INT 25
32826: PUSH
32827: EMPTY
32828: LIST
32829: LIST
32830: LIST
32831: IN
32832: IFFALSE 32853
// points := [ 40 , 15 , 5 ] ;
32834: LD_ADDR_VAR 0 9
32838: PUSH
32839: LD_INT 40
32841: PUSH
32842: LD_INT 15
32844: PUSH
32845: LD_INT 5
32847: PUSH
32848: EMPTY
32849: LIST
32850: LIST
32851: LIST
32852: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
32853: LD_VAR 0 6
32857: PPUSH
32858: CALL_OW 264
32862: PUSH
32863: LD_INT 3
32865: PUSH
32866: LD_INT 23
32868: PUSH
32869: EMPTY
32870: LIST
32871: LIST
32872: IN
32873: IFFALSE 32894
// points := [ 7 , 25 , 8 ] ;
32875: LD_ADDR_VAR 0 9
32879: PUSH
32880: LD_INT 7
32882: PUSH
32883: LD_INT 25
32885: PUSH
32886: LD_INT 8
32888: PUSH
32889: EMPTY
32890: LIST
32891: LIST
32892: LIST
32893: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
32894: LD_VAR 0 6
32898: PPUSH
32899: CALL_OW 264
32903: PUSH
32904: LD_INT 5
32906: PUSH
32907: LD_INT 27
32909: PUSH
32910: LD_INT 44
32912: PUSH
32913: EMPTY
32914: LIST
32915: LIST
32916: LIST
32917: IN
32918: IFFALSE 32939
// points := [ 14 , 50 , 16 ] ;
32920: LD_ADDR_VAR 0 9
32924: PUSH
32925: LD_INT 14
32927: PUSH
32928: LD_INT 50
32930: PUSH
32931: LD_INT 16
32933: PUSH
32934: EMPTY
32935: LIST
32936: LIST
32937: LIST
32938: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
32939: LD_VAR 0 6
32943: PPUSH
32944: CALL_OW 264
32948: PUSH
32949: LD_INT 6
32951: PUSH
32952: LD_INT 46
32954: PUSH
32955: EMPTY
32956: LIST
32957: LIST
32958: IN
32959: IFFALSE 32980
// points := [ 32 , 120 , 70 ] ;
32961: LD_ADDR_VAR 0 9
32965: PUSH
32966: LD_INT 32
32968: PUSH
32969: LD_INT 120
32971: PUSH
32972: LD_INT 70
32974: PUSH
32975: EMPTY
32976: LIST
32977: LIST
32978: LIST
32979: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
32980: LD_VAR 0 6
32984: PPUSH
32985: CALL_OW 264
32989: PUSH
32990: LD_INT 7
32992: PUSH
32993: LD_INT 28
32995: PUSH
32996: LD_INT 45
32998: PUSH
32999: LD_INT 92
33001: PUSH
33002: EMPTY
33003: LIST
33004: LIST
33005: LIST
33006: LIST
33007: IN
33008: IFFALSE 33029
// points := [ 35 , 20 , 45 ] ;
33010: LD_ADDR_VAR 0 9
33014: PUSH
33015: LD_INT 35
33017: PUSH
33018: LD_INT 20
33020: PUSH
33021: LD_INT 45
33023: PUSH
33024: EMPTY
33025: LIST
33026: LIST
33027: LIST
33028: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
33029: LD_VAR 0 6
33033: PPUSH
33034: CALL_OW 264
33038: PUSH
33039: LD_INT 47
33041: PUSH
33042: EMPTY
33043: LIST
33044: IN
33045: IFFALSE 33066
// points := [ 67 , 45 , 75 ] ;
33047: LD_ADDR_VAR 0 9
33051: PUSH
33052: LD_INT 67
33054: PUSH
33055: LD_INT 45
33057: PUSH
33058: LD_INT 75
33060: PUSH
33061: EMPTY
33062: LIST
33063: LIST
33064: LIST
33065: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
33066: LD_VAR 0 6
33070: PPUSH
33071: CALL_OW 264
33075: PUSH
33076: LD_INT 26
33078: PUSH
33079: EMPTY
33080: LIST
33081: IN
33082: IFFALSE 33103
// points := [ 120 , 30 , 80 ] ;
33084: LD_ADDR_VAR 0 9
33088: PUSH
33089: LD_INT 120
33091: PUSH
33092: LD_INT 30
33094: PUSH
33095: LD_INT 80
33097: PUSH
33098: EMPTY
33099: LIST
33100: LIST
33101: LIST
33102: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
33103: LD_VAR 0 6
33107: PPUSH
33108: CALL_OW 264
33112: PUSH
33113: LD_INT 22
33115: PUSH
33116: EMPTY
33117: LIST
33118: IN
33119: IFFALSE 33140
// points := [ 40 , 1 , 1 ] ;
33121: LD_ADDR_VAR 0 9
33125: PUSH
33126: LD_INT 40
33128: PUSH
33129: LD_INT 1
33131: PUSH
33132: LD_INT 1
33134: PUSH
33135: EMPTY
33136: LIST
33137: LIST
33138: LIST
33139: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
33140: LD_VAR 0 6
33144: PPUSH
33145: CALL_OW 264
33149: PUSH
33150: LD_INT 29
33152: PUSH
33153: EMPTY
33154: LIST
33155: IN
33156: IFFALSE 33177
// points := [ 70 , 200 , 400 ] ;
33158: LD_ADDR_VAR 0 9
33162: PUSH
33163: LD_INT 70
33165: PUSH
33166: LD_INT 200
33168: PUSH
33169: LD_INT 400
33171: PUSH
33172: EMPTY
33173: LIST
33174: LIST
33175: LIST
33176: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
33177: LD_VAR 0 6
33181: PPUSH
33182: CALL_OW 264
33186: PUSH
33187: LD_INT 14
33189: PUSH
33190: LD_INT 53
33192: PUSH
33193: EMPTY
33194: LIST
33195: LIST
33196: IN
33197: IFFALSE 33218
// points := [ 40 , 10 , 20 ] ;
33199: LD_ADDR_VAR 0 9
33203: PUSH
33204: LD_INT 40
33206: PUSH
33207: LD_INT 10
33209: PUSH
33210: LD_INT 20
33212: PUSH
33213: EMPTY
33214: LIST
33215: LIST
33216: LIST
33217: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
33218: LD_VAR 0 6
33222: PPUSH
33223: CALL_OW 264
33227: PUSH
33228: LD_INT 9
33230: PUSH
33231: EMPTY
33232: LIST
33233: IN
33234: IFFALSE 33255
// points := [ 5 , 70 , 20 ] ;
33236: LD_ADDR_VAR 0 9
33240: PUSH
33241: LD_INT 5
33243: PUSH
33244: LD_INT 70
33246: PUSH
33247: LD_INT 20
33249: PUSH
33250: EMPTY
33251: LIST
33252: LIST
33253: LIST
33254: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
33255: LD_VAR 0 6
33259: PPUSH
33260: CALL_OW 264
33264: PUSH
33265: LD_INT 10
33267: PUSH
33268: EMPTY
33269: LIST
33270: IN
33271: IFFALSE 33292
// points := [ 35 , 110 , 70 ] ;
33273: LD_ADDR_VAR 0 9
33277: PUSH
33278: LD_INT 35
33280: PUSH
33281: LD_INT 110
33283: PUSH
33284: LD_INT 70
33286: PUSH
33287: EMPTY
33288: LIST
33289: LIST
33290: LIST
33291: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
33292: LD_VAR 0 6
33296: PPUSH
33297: CALL_OW 265
33301: PUSH
33302: LD_INT 25
33304: EQUAL
33305: IFFALSE 33326
// points := [ 80 , 65 , 100 ] ;
33307: LD_ADDR_VAR 0 9
33311: PUSH
33312: LD_INT 80
33314: PUSH
33315: LD_INT 65
33317: PUSH
33318: LD_INT 100
33320: PUSH
33321: EMPTY
33322: LIST
33323: LIST
33324: LIST
33325: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
33326: LD_VAR 0 6
33330: PPUSH
33331: CALL_OW 263
33335: PUSH
33336: LD_INT 1
33338: EQUAL
33339: IFFALSE 33374
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
33341: LD_ADDR_VAR 0 10
33345: PUSH
33346: LD_VAR 0 10
33350: PUSH
33351: LD_VAR 0 6
33355: PPUSH
33356: CALL_OW 311
33360: PPUSH
33361: LD_INT 3
33363: PPUSH
33364: CALL_OW 259
33368: PUSH
33369: LD_INT 4
33371: MUL
33372: MUL
33373: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
33374: LD_VAR 0 6
33378: PPUSH
33379: CALL_OW 263
33383: PUSH
33384: LD_INT 2
33386: EQUAL
33387: IFFALSE 33438
// begin j := IsControledBy ( i ) ;
33389: LD_ADDR_VAR 0 7
33393: PUSH
33394: LD_VAR 0 6
33398: PPUSH
33399: CALL_OW 312
33403: ST_TO_ADDR
// if j then
33404: LD_VAR 0 7
33408: IFFALSE 33438
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
33410: LD_ADDR_VAR 0 10
33414: PUSH
33415: LD_VAR 0 10
33419: PUSH
33420: LD_VAR 0 7
33424: PPUSH
33425: LD_INT 3
33427: PPUSH
33428: CALL_OW 259
33432: PUSH
33433: LD_INT 3
33435: MUL
33436: MUL
33437: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
33438: LD_VAR 0 6
33442: PPUSH
33443: CALL_OW 264
33447: PUSH
33448: LD_INT 5
33450: PUSH
33451: LD_INT 6
33453: PUSH
33454: LD_INT 46
33456: PUSH
33457: LD_INT 44
33459: PUSH
33460: LD_INT 47
33462: PUSH
33463: LD_INT 45
33465: PUSH
33466: LD_INT 28
33468: PUSH
33469: LD_INT 7
33471: PUSH
33472: LD_INT 27
33474: PUSH
33475: LD_INT 29
33477: PUSH
33478: EMPTY
33479: LIST
33480: LIST
33481: LIST
33482: LIST
33483: LIST
33484: LIST
33485: LIST
33486: LIST
33487: LIST
33488: LIST
33489: IN
33490: PUSH
33491: LD_VAR 0 1
33495: PPUSH
33496: LD_INT 52
33498: PPUSH
33499: CALL_OW 321
33503: PUSH
33504: LD_INT 2
33506: EQUAL
33507: AND
33508: IFFALSE 33525
// bpoints := bpoints * 1.2 ;
33510: LD_ADDR_VAR 0 10
33514: PUSH
33515: LD_VAR 0 10
33519: PUSH
33520: LD_REAL  1.20000000000000E+0000
33523: MUL
33524: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
33525: LD_VAR 0 6
33529: PPUSH
33530: CALL_OW 264
33534: PUSH
33535: LD_INT 6
33537: PUSH
33538: LD_INT 46
33540: PUSH
33541: LD_INT 47
33543: PUSH
33544: EMPTY
33545: LIST
33546: LIST
33547: LIST
33548: IN
33549: IFFALSE 33566
// bpoints := bpoints * 1.2 ;
33551: LD_ADDR_VAR 0 10
33555: PUSH
33556: LD_VAR 0 10
33560: PUSH
33561: LD_REAL  1.20000000000000E+0000
33564: MUL
33565: ST_TO_ADDR
// end ; unit_building :
33566: GO 33580
33568: LD_INT 3
33570: DOUBLE
33571: EQUAL
33572: IFTRUE 33576
33574: GO 33579
33576: POP
// ; end ;
33577: GO 33580
33579: POP
// for j = 1 to 3 do
33580: LD_ADDR_VAR 0 7
33584: PUSH
33585: DOUBLE
33586: LD_INT 1
33588: DEC
33589: ST_TO_ADDR
33590: LD_INT 3
33592: PUSH
33593: FOR_TO
33594: IFFALSE 33647
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
33596: LD_ADDR_VAR 0 5
33600: PUSH
33601: LD_VAR 0 5
33605: PPUSH
33606: LD_VAR 0 7
33610: PPUSH
33611: LD_VAR 0 5
33615: PUSH
33616: LD_VAR 0 7
33620: ARRAY
33621: PUSH
33622: LD_VAR 0 9
33626: PUSH
33627: LD_VAR 0 7
33631: ARRAY
33632: PUSH
33633: LD_VAR 0 10
33637: MUL
33638: PLUS
33639: PPUSH
33640: CALL_OW 1
33644: ST_TO_ADDR
33645: GO 33593
33647: POP
33648: POP
// end ;
33649: GO 32128
33651: POP
33652: POP
// result := Replace ( result , 4 , tmp ) ;
33653: LD_ADDR_VAR 0 5
33657: PUSH
33658: LD_VAR 0 5
33662: PPUSH
33663: LD_INT 4
33665: PPUSH
33666: LD_VAR 0 8
33670: PPUSH
33671: CALL_OW 1
33675: ST_TO_ADDR
// end ;
33676: LD_VAR 0 5
33680: RET
// export function DangerAtRange ( unit , range ) ; begin
33681: LD_INT 0
33683: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
33684: LD_ADDR_VAR 0 3
33688: PUSH
33689: LD_VAR 0 1
33693: PPUSH
33694: CALL_OW 255
33698: PPUSH
33699: LD_VAR 0 1
33703: PPUSH
33704: CALL_OW 250
33708: PPUSH
33709: LD_VAR 0 1
33713: PPUSH
33714: CALL_OW 251
33718: PPUSH
33719: LD_VAR 0 2
33723: PPUSH
33724: CALL 31980 0 4
33728: ST_TO_ADDR
// end ;
33729: LD_VAR 0 3
33733: RET
// export function DangerInArea ( side , area ) ; begin
33734: LD_INT 0
33736: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
33737: LD_ADDR_VAR 0 3
33741: PUSH
33742: LD_VAR 0 2
33746: PPUSH
33747: LD_INT 81
33749: PUSH
33750: LD_VAR 0 1
33754: PUSH
33755: EMPTY
33756: LIST
33757: LIST
33758: PPUSH
33759: CALL_OW 70
33763: ST_TO_ADDR
// end ;
33764: LD_VAR 0 3
33768: RET
// export function IsExtension ( b ) ; begin
33769: LD_INT 0
33771: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
33772: LD_ADDR_VAR 0 2
33776: PUSH
33777: LD_VAR 0 1
33781: PUSH
33782: LD_INT 23
33784: PUSH
33785: LD_INT 20
33787: PUSH
33788: LD_INT 22
33790: PUSH
33791: LD_INT 17
33793: PUSH
33794: LD_INT 24
33796: PUSH
33797: LD_INT 21
33799: PUSH
33800: LD_INT 19
33802: PUSH
33803: LD_INT 16
33805: PUSH
33806: LD_INT 25
33808: PUSH
33809: LD_INT 18
33811: PUSH
33812: EMPTY
33813: LIST
33814: LIST
33815: LIST
33816: LIST
33817: LIST
33818: LIST
33819: LIST
33820: LIST
33821: LIST
33822: LIST
33823: IN
33824: ST_TO_ADDR
// end ;
33825: LD_VAR 0 2
33829: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
33830: LD_INT 0
33832: PPUSH
33833: PPUSH
33834: PPUSH
// result := [ ] ;
33835: LD_ADDR_VAR 0 4
33839: PUSH
33840: EMPTY
33841: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
33842: LD_ADDR_VAR 0 5
33846: PUSH
33847: LD_VAR 0 2
33851: PPUSH
33852: LD_INT 21
33854: PUSH
33855: LD_INT 3
33857: PUSH
33858: EMPTY
33859: LIST
33860: LIST
33861: PPUSH
33862: CALL_OW 70
33866: ST_TO_ADDR
// if not tmp then
33867: LD_VAR 0 5
33871: NOT
33872: IFFALSE 33876
// exit ;
33874: GO 33940
// if checkLink then
33876: LD_VAR 0 3
33880: IFFALSE 33930
// begin for i in tmp do
33882: LD_ADDR_VAR 0 6
33886: PUSH
33887: LD_VAR 0 5
33891: PUSH
33892: FOR_IN
33893: IFFALSE 33928
// if GetBase ( i ) <> base then
33895: LD_VAR 0 6
33899: PPUSH
33900: CALL_OW 274
33904: PUSH
33905: LD_VAR 0 1
33909: NONEQUAL
33910: IFFALSE 33926
// ComLinkToBase ( base , i ) ;
33912: LD_VAR 0 1
33916: PPUSH
33917: LD_VAR 0 6
33921: PPUSH
33922: CALL_OW 169
33926: GO 33892
33928: POP
33929: POP
// end ; result := tmp ;
33930: LD_ADDR_VAR 0 4
33934: PUSH
33935: LD_VAR 0 5
33939: ST_TO_ADDR
// end ;
33940: LD_VAR 0 4
33944: RET
// export function ComComplete ( units , b ) ; var i ; begin
33945: LD_INT 0
33947: PPUSH
33948: PPUSH
// if not units then
33949: LD_VAR 0 1
33953: NOT
33954: IFFALSE 33958
// exit ;
33956: GO 34048
// for i in units do
33958: LD_ADDR_VAR 0 4
33962: PUSH
33963: LD_VAR 0 1
33967: PUSH
33968: FOR_IN
33969: IFFALSE 34046
// if BuildingStatus ( b ) = bs_build then
33971: LD_VAR 0 2
33975: PPUSH
33976: CALL_OW 461
33980: PUSH
33981: LD_INT 1
33983: EQUAL
33984: IFFALSE 34044
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
33986: LD_VAR 0 4
33990: PPUSH
33991: LD_STRING h
33993: PUSH
33994: LD_VAR 0 2
33998: PPUSH
33999: CALL_OW 250
34003: PUSH
34004: LD_VAR 0 2
34008: PPUSH
34009: CALL_OW 251
34013: PUSH
34014: LD_VAR 0 2
34018: PUSH
34019: LD_INT 0
34021: PUSH
34022: LD_INT 0
34024: PUSH
34025: LD_INT 0
34027: PUSH
34028: EMPTY
34029: LIST
34030: LIST
34031: LIST
34032: LIST
34033: LIST
34034: LIST
34035: LIST
34036: PUSH
34037: EMPTY
34038: LIST
34039: PPUSH
34040: CALL_OW 446
34044: GO 33968
34046: POP
34047: POP
// end ;
34048: LD_VAR 0 3
34052: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
34053: LD_INT 0
34055: PPUSH
34056: PPUSH
34057: PPUSH
34058: PPUSH
34059: PPUSH
34060: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
34061: LD_VAR 0 1
34065: NOT
34066: PUSH
34067: LD_VAR 0 1
34071: PPUSH
34072: CALL_OW 263
34076: PUSH
34077: LD_INT 2
34079: NONEQUAL
34080: OR
34081: IFFALSE 34085
// exit ;
34083: GO 34401
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
34085: LD_ADDR_VAR 0 6
34089: PUSH
34090: LD_INT 22
34092: PUSH
34093: LD_VAR 0 1
34097: PPUSH
34098: CALL_OW 255
34102: PUSH
34103: EMPTY
34104: LIST
34105: LIST
34106: PUSH
34107: LD_INT 2
34109: PUSH
34110: LD_INT 30
34112: PUSH
34113: LD_INT 36
34115: PUSH
34116: EMPTY
34117: LIST
34118: LIST
34119: PUSH
34120: LD_INT 34
34122: PUSH
34123: LD_INT 31
34125: PUSH
34126: EMPTY
34127: LIST
34128: LIST
34129: PUSH
34130: EMPTY
34131: LIST
34132: LIST
34133: LIST
34134: PUSH
34135: EMPTY
34136: LIST
34137: LIST
34138: PPUSH
34139: CALL_OW 69
34143: ST_TO_ADDR
// if not tmp then
34144: LD_VAR 0 6
34148: NOT
34149: IFFALSE 34153
// exit ;
34151: GO 34401
// result := [ ] ;
34153: LD_ADDR_VAR 0 2
34157: PUSH
34158: EMPTY
34159: ST_TO_ADDR
// for i in tmp do
34160: LD_ADDR_VAR 0 3
34164: PUSH
34165: LD_VAR 0 6
34169: PUSH
34170: FOR_IN
34171: IFFALSE 34242
// begin t := UnitsInside ( i ) ;
34173: LD_ADDR_VAR 0 4
34177: PUSH
34178: LD_VAR 0 3
34182: PPUSH
34183: CALL_OW 313
34187: ST_TO_ADDR
// if t then
34188: LD_VAR 0 4
34192: IFFALSE 34240
// for j in t do
34194: LD_ADDR_VAR 0 7
34198: PUSH
34199: LD_VAR 0 4
34203: PUSH
34204: FOR_IN
34205: IFFALSE 34238
// result := Replace ( result , result + 1 , j ) ;
34207: LD_ADDR_VAR 0 2
34211: PUSH
34212: LD_VAR 0 2
34216: PPUSH
34217: LD_VAR 0 2
34221: PUSH
34222: LD_INT 1
34224: PLUS
34225: PPUSH
34226: LD_VAR 0 7
34230: PPUSH
34231: CALL_OW 1
34235: ST_TO_ADDR
34236: GO 34204
34238: POP
34239: POP
// end ;
34240: GO 34170
34242: POP
34243: POP
// if not result then
34244: LD_VAR 0 2
34248: NOT
34249: IFFALSE 34253
// exit ;
34251: GO 34401
// mech := result [ 1 ] ;
34253: LD_ADDR_VAR 0 5
34257: PUSH
34258: LD_VAR 0 2
34262: PUSH
34263: LD_INT 1
34265: ARRAY
34266: ST_TO_ADDR
// if result > 1 then
34267: LD_VAR 0 2
34271: PUSH
34272: LD_INT 1
34274: GREATER
34275: IFFALSE 34387
// begin for i = 2 to result do
34277: LD_ADDR_VAR 0 3
34281: PUSH
34282: DOUBLE
34283: LD_INT 2
34285: DEC
34286: ST_TO_ADDR
34287: LD_VAR 0 2
34291: PUSH
34292: FOR_TO
34293: IFFALSE 34385
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
34295: LD_ADDR_VAR 0 4
34299: PUSH
34300: LD_VAR 0 2
34304: PUSH
34305: LD_VAR 0 3
34309: ARRAY
34310: PPUSH
34311: LD_INT 3
34313: PPUSH
34314: CALL_OW 259
34318: PUSH
34319: LD_VAR 0 2
34323: PUSH
34324: LD_VAR 0 3
34328: ARRAY
34329: PPUSH
34330: CALL_OW 432
34334: MINUS
34335: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
34336: LD_VAR 0 4
34340: PUSH
34341: LD_VAR 0 5
34345: PPUSH
34346: LD_INT 3
34348: PPUSH
34349: CALL_OW 259
34353: PUSH
34354: LD_VAR 0 5
34358: PPUSH
34359: CALL_OW 432
34363: MINUS
34364: GREATEREQUAL
34365: IFFALSE 34383
// mech := result [ i ] ;
34367: LD_ADDR_VAR 0 5
34371: PUSH
34372: LD_VAR 0 2
34376: PUSH
34377: LD_VAR 0 3
34381: ARRAY
34382: ST_TO_ADDR
// end ;
34383: GO 34292
34385: POP
34386: POP
// end ; ComLinkTo ( vehicle , mech ) ;
34387: LD_VAR 0 1
34391: PPUSH
34392: LD_VAR 0 5
34396: PPUSH
34397: CALL_OW 135
// end ;
34401: LD_VAR 0 2
34405: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
34406: LD_INT 0
34408: PPUSH
34409: PPUSH
34410: PPUSH
34411: PPUSH
34412: PPUSH
34413: PPUSH
34414: PPUSH
34415: PPUSH
34416: PPUSH
34417: PPUSH
34418: PPUSH
34419: PPUSH
34420: PPUSH
// result := [ ] ;
34421: LD_ADDR_VAR 0 7
34425: PUSH
34426: EMPTY
34427: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
34428: LD_VAR 0 1
34432: PPUSH
34433: CALL_OW 266
34437: PUSH
34438: LD_INT 0
34440: PUSH
34441: LD_INT 1
34443: PUSH
34444: EMPTY
34445: LIST
34446: LIST
34447: IN
34448: NOT
34449: IFFALSE 34453
// exit ;
34451: GO 36087
// if name then
34453: LD_VAR 0 3
34457: IFFALSE 34473
// SetBName ( base_dep , name ) ;
34459: LD_VAR 0 1
34463: PPUSH
34464: LD_VAR 0 3
34468: PPUSH
34469: CALL_OW 500
// base := GetBase ( base_dep ) ;
34473: LD_ADDR_VAR 0 15
34477: PUSH
34478: LD_VAR 0 1
34482: PPUSH
34483: CALL_OW 274
34487: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
34488: LD_ADDR_VAR 0 16
34492: PUSH
34493: LD_VAR 0 1
34497: PPUSH
34498: CALL_OW 255
34502: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
34503: LD_ADDR_VAR 0 17
34507: PUSH
34508: LD_VAR 0 1
34512: PPUSH
34513: CALL_OW 248
34517: ST_TO_ADDR
// if sources then
34518: LD_VAR 0 5
34522: IFFALSE 34569
// for i = 1 to 3 do
34524: LD_ADDR_VAR 0 8
34528: PUSH
34529: DOUBLE
34530: LD_INT 1
34532: DEC
34533: ST_TO_ADDR
34534: LD_INT 3
34536: PUSH
34537: FOR_TO
34538: IFFALSE 34567
// AddResourceType ( base , i , sources [ i ] ) ;
34540: LD_VAR 0 15
34544: PPUSH
34545: LD_VAR 0 8
34549: PPUSH
34550: LD_VAR 0 5
34554: PUSH
34555: LD_VAR 0 8
34559: ARRAY
34560: PPUSH
34561: CALL_OW 276
34565: GO 34537
34567: POP
34568: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
34569: LD_ADDR_VAR 0 18
34573: PUSH
34574: LD_VAR 0 15
34578: PPUSH
34579: LD_VAR 0 2
34583: PPUSH
34584: LD_INT 1
34586: PPUSH
34587: CALL 33830 0 3
34591: ST_TO_ADDR
// InitHc ;
34592: CALL_OW 19
// InitUc ;
34596: CALL_OW 18
// uc_side := side ;
34600: LD_ADDR_OWVAR 20
34604: PUSH
34605: LD_VAR 0 16
34609: ST_TO_ADDR
// uc_nation := nation ;
34610: LD_ADDR_OWVAR 21
34614: PUSH
34615: LD_VAR 0 17
34619: ST_TO_ADDR
// if buildings then
34620: LD_VAR 0 18
34624: IFFALSE 35946
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
34626: LD_ADDR_VAR 0 19
34630: PUSH
34631: LD_VAR 0 18
34635: PPUSH
34636: LD_INT 2
34638: PUSH
34639: LD_INT 30
34641: PUSH
34642: LD_INT 29
34644: PUSH
34645: EMPTY
34646: LIST
34647: LIST
34648: PUSH
34649: LD_INT 30
34651: PUSH
34652: LD_INT 30
34654: PUSH
34655: EMPTY
34656: LIST
34657: LIST
34658: PUSH
34659: EMPTY
34660: LIST
34661: LIST
34662: LIST
34663: PPUSH
34664: CALL_OW 72
34668: ST_TO_ADDR
// if tmp then
34669: LD_VAR 0 19
34673: IFFALSE 34721
// for i in tmp do
34675: LD_ADDR_VAR 0 8
34679: PUSH
34680: LD_VAR 0 19
34684: PUSH
34685: FOR_IN
34686: IFFALSE 34719
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
34688: LD_VAR 0 8
34692: PPUSH
34693: CALL_OW 250
34697: PPUSH
34698: LD_VAR 0 8
34702: PPUSH
34703: CALL_OW 251
34707: PPUSH
34708: LD_VAR 0 16
34712: PPUSH
34713: CALL_OW 441
34717: GO 34685
34719: POP
34720: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
34721: LD_VAR 0 18
34725: PPUSH
34726: LD_INT 2
34728: PUSH
34729: LD_INT 30
34731: PUSH
34732: LD_INT 32
34734: PUSH
34735: EMPTY
34736: LIST
34737: LIST
34738: PUSH
34739: LD_INT 30
34741: PUSH
34742: LD_INT 33
34744: PUSH
34745: EMPTY
34746: LIST
34747: LIST
34748: PUSH
34749: EMPTY
34750: LIST
34751: LIST
34752: LIST
34753: PPUSH
34754: CALL_OW 72
34758: IFFALSE 34846
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
34760: LD_ADDR_VAR 0 8
34764: PUSH
34765: LD_VAR 0 18
34769: PPUSH
34770: LD_INT 2
34772: PUSH
34773: LD_INT 30
34775: PUSH
34776: LD_INT 32
34778: PUSH
34779: EMPTY
34780: LIST
34781: LIST
34782: PUSH
34783: LD_INT 30
34785: PUSH
34786: LD_INT 33
34788: PUSH
34789: EMPTY
34790: LIST
34791: LIST
34792: PUSH
34793: EMPTY
34794: LIST
34795: LIST
34796: LIST
34797: PPUSH
34798: CALL_OW 72
34802: PUSH
34803: FOR_IN
34804: IFFALSE 34844
// begin if not GetBWeapon ( i ) then
34806: LD_VAR 0 8
34810: PPUSH
34811: CALL_OW 269
34815: NOT
34816: IFFALSE 34842
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
34818: LD_VAR 0 8
34822: PPUSH
34823: LD_VAR 0 8
34827: PPUSH
34828: LD_VAR 0 2
34832: PPUSH
34833: CALL 36092 0 2
34837: PPUSH
34838: CALL_OW 431
// end ;
34842: GO 34803
34844: POP
34845: POP
// end ; for i = 1 to personel do
34846: LD_ADDR_VAR 0 8
34850: PUSH
34851: DOUBLE
34852: LD_INT 1
34854: DEC
34855: ST_TO_ADDR
34856: LD_VAR 0 6
34860: PUSH
34861: FOR_TO
34862: IFFALSE 35926
// begin if i > 4 then
34864: LD_VAR 0 8
34868: PUSH
34869: LD_INT 4
34871: GREATER
34872: IFFALSE 34876
// break ;
34874: GO 35926
// case i of 1 :
34876: LD_VAR 0 8
34880: PUSH
34881: LD_INT 1
34883: DOUBLE
34884: EQUAL
34885: IFTRUE 34889
34887: GO 34969
34889: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
34890: LD_ADDR_VAR 0 12
34894: PUSH
34895: LD_VAR 0 18
34899: PPUSH
34900: LD_INT 22
34902: PUSH
34903: LD_VAR 0 16
34907: PUSH
34908: EMPTY
34909: LIST
34910: LIST
34911: PUSH
34912: LD_INT 58
34914: PUSH
34915: EMPTY
34916: LIST
34917: PUSH
34918: LD_INT 2
34920: PUSH
34921: LD_INT 30
34923: PUSH
34924: LD_INT 32
34926: PUSH
34927: EMPTY
34928: LIST
34929: LIST
34930: PUSH
34931: LD_INT 30
34933: PUSH
34934: LD_INT 4
34936: PUSH
34937: EMPTY
34938: LIST
34939: LIST
34940: PUSH
34941: LD_INT 30
34943: PUSH
34944: LD_INT 5
34946: PUSH
34947: EMPTY
34948: LIST
34949: LIST
34950: PUSH
34951: EMPTY
34952: LIST
34953: LIST
34954: LIST
34955: LIST
34956: PUSH
34957: EMPTY
34958: LIST
34959: LIST
34960: LIST
34961: PPUSH
34962: CALL_OW 72
34966: ST_TO_ADDR
34967: GO 35191
34969: LD_INT 2
34971: DOUBLE
34972: EQUAL
34973: IFTRUE 34977
34975: GO 35039
34977: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
34978: LD_ADDR_VAR 0 12
34982: PUSH
34983: LD_VAR 0 18
34987: PPUSH
34988: LD_INT 22
34990: PUSH
34991: LD_VAR 0 16
34995: PUSH
34996: EMPTY
34997: LIST
34998: LIST
34999: PUSH
35000: LD_INT 2
35002: PUSH
35003: LD_INT 30
35005: PUSH
35006: LD_INT 0
35008: PUSH
35009: EMPTY
35010: LIST
35011: LIST
35012: PUSH
35013: LD_INT 30
35015: PUSH
35016: LD_INT 1
35018: PUSH
35019: EMPTY
35020: LIST
35021: LIST
35022: PUSH
35023: EMPTY
35024: LIST
35025: LIST
35026: LIST
35027: PUSH
35028: EMPTY
35029: LIST
35030: LIST
35031: PPUSH
35032: CALL_OW 72
35036: ST_TO_ADDR
35037: GO 35191
35039: LD_INT 3
35041: DOUBLE
35042: EQUAL
35043: IFTRUE 35047
35045: GO 35109
35047: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
35048: LD_ADDR_VAR 0 12
35052: PUSH
35053: LD_VAR 0 18
35057: PPUSH
35058: LD_INT 22
35060: PUSH
35061: LD_VAR 0 16
35065: PUSH
35066: EMPTY
35067: LIST
35068: LIST
35069: PUSH
35070: LD_INT 2
35072: PUSH
35073: LD_INT 30
35075: PUSH
35076: LD_INT 2
35078: PUSH
35079: EMPTY
35080: LIST
35081: LIST
35082: PUSH
35083: LD_INT 30
35085: PUSH
35086: LD_INT 3
35088: PUSH
35089: EMPTY
35090: LIST
35091: LIST
35092: PUSH
35093: EMPTY
35094: LIST
35095: LIST
35096: LIST
35097: PUSH
35098: EMPTY
35099: LIST
35100: LIST
35101: PPUSH
35102: CALL_OW 72
35106: ST_TO_ADDR
35107: GO 35191
35109: LD_INT 4
35111: DOUBLE
35112: EQUAL
35113: IFTRUE 35117
35115: GO 35190
35117: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
35118: LD_ADDR_VAR 0 12
35122: PUSH
35123: LD_VAR 0 18
35127: PPUSH
35128: LD_INT 22
35130: PUSH
35131: LD_VAR 0 16
35135: PUSH
35136: EMPTY
35137: LIST
35138: LIST
35139: PUSH
35140: LD_INT 2
35142: PUSH
35143: LD_INT 30
35145: PUSH
35146: LD_INT 6
35148: PUSH
35149: EMPTY
35150: LIST
35151: LIST
35152: PUSH
35153: LD_INT 30
35155: PUSH
35156: LD_INT 7
35158: PUSH
35159: EMPTY
35160: LIST
35161: LIST
35162: PUSH
35163: LD_INT 30
35165: PUSH
35166: LD_INT 8
35168: PUSH
35169: EMPTY
35170: LIST
35171: LIST
35172: PUSH
35173: EMPTY
35174: LIST
35175: LIST
35176: LIST
35177: LIST
35178: PUSH
35179: EMPTY
35180: LIST
35181: LIST
35182: PPUSH
35183: CALL_OW 72
35187: ST_TO_ADDR
35188: GO 35191
35190: POP
// if i = 1 then
35191: LD_VAR 0 8
35195: PUSH
35196: LD_INT 1
35198: EQUAL
35199: IFFALSE 35310
// begin tmp := [ ] ;
35201: LD_ADDR_VAR 0 19
35205: PUSH
35206: EMPTY
35207: ST_TO_ADDR
// for j in f do
35208: LD_ADDR_VAR 0 9
35212: PUSH
35213: LD_VAR 0 12
35217: PUSH
35218: FOR_IN
35219: IFFALSE 35292
// if GetBType ( j ) = b_bunker then
35221: LD_VAR 0 9
35225: PPUSH
35226: CALL_OW 266
35230: PUSH
35231: LD_INT 32
35233: EQUAL
35234: IFFALSE 35261
// tmp := Insert ( tmp , 1 , j ) else
35236: LD_ADDR_VAR 0 19
35240: PUSH
35241: LD_VAR 0 19
35245: PPUSH
35246: LD_INT 1
35248: PPUSH
35249: LD_VAR 0 9
35253: PPUSH
35254: CALL_OW 2
35258: ST_TO_ADDR
35259: GO 35290
// tmp := Insert ( tmp , tmp + 1 , j ) ;
35261: LD_ADDR_VAR 0 19
35265: PUSH
35266: LD_VAR 0 19
35270: PPUSH
35271: LD_VAR 0 19
35275: PUSH
35276: LD_INT 1
35278: PLUS
35279: PPUSH
35280: LD_VAR 0 9
35284: PPUSH
35285: CALL_OW 2
35289: ST_TO_ADDR
35290: GO 35218
35292: POP
35293: POP
// if tmp then
35294: LD_VAR 0 19
35298: IFFALSE 35310
// f := tmp ;
35300: LD_ADDR_VAR 0 12
35304: PUSH
35305: LD_VAR 0 19
35309: ST_TO_ADDR
// end ; x := personel [ i ] ;
35310: LD_ADDR_VAR 0 13
35314: PUSH
35315: LD_VAR 0 6
35319: PUSH
35320: LD_VAR 0 8
35324: ARRAY
35325: ST_TO_ADDR
// if x = - 1 then
35326: LD_VAR 0 13
35330: PUSH
35331: LD_INT 1
35333: NEG
35334: EQUAL
35335: IFFALSE 35544
// begin for j in f do
35337: LD_ADDR_VAR 0 9
35341: PUSH
35342: LD_VAR 0 12
35346: PUSH
35347: FOR_IN
35348: IFFALSE 35540
// repeat InitHc ;
35350: CALL_OW 19
// if GetBType ( j ) = b_barracks then
35354: LD_VAR 0 9
35358: PPUSH
35359: CALL_OW 266
35363: PUSH
35364: LD_INT 5
35366: EQUAL
35367: IFFALSE 35437
// begin if UnitsInside ( j ) < 3 then
35369: LD_VAR 0 9
35373: PPUSH
35374: CALL_OW 313
35378: PUSH
35379: LD_INT 3
35381: LESS
35382: IFFALSE 35418
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35384: LD_INT 0
35386: PPUSH
35387: LD_INT 5
35389: PUSH
35390: LD_INT 8
35392: PUSH
35393: LD_INT 9
35395: PUSH
35396: EMPTY
35397: LIST
35398: LIST
35399: LIST
35400: PUSH
35401: LD_VAR 0 17
35405: ARRAY
35406: PPUSH
35407: LD_VAR 0 4
35411: PPUSH
35412: CALL_OW 380
35416: GO 35435
// PrepareHuman ( false , i , skill ) ;
35418: LD_INT 0
35420: PPUSH
35421: LD_VAR 0 8
35425: PPUSH
35426: LD_VAR 0 4
35430: PPUSH
35431: CALL_OW 380
// end else
35435: GO 35454
// PrepareHuman ( false , i , skill ) ;
35437: LD_INT 0
35439: PPUSH
35440: LD_VAR 0 8
35444: PPUSH
35445: LD_VAR 0 4
35449: PPUSH
35450: CALL_OW 380
// un := CreateHuman ;
35454: LD_ADDR_VAR 0 14
35458: PUSH
35459: CALL_OW 44
35463: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35464: LD_ADDR_VAR 0 7
35468: PUSH
35469: LD_VAR 0 7
35473: PPUSH
35474: LD_INT 1
35476: PPUSH
35477: LD_VAR 0 14
35481: PPUSH
35482: CALL_OW 2
35486: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
35487: LD_VAR 0 14
35491: PPUSH
35492: LD_VAR 0 9
35496: PPUSH
35497: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
35501: LD_VAR 0 9
35505: PPUSH
35506: CALL_OW 313
35510: PUSH
35511: LD_INT 6
35513: EQUAL
35514: PUSH
35515: LD_VAR 0 9
35519: PPUSH
35520: CALL_OW 266
35524: PUSH
35525: LD_INT 32
35527: PUSH
35528: LD_INT 31
35530: PUSH
35531: EMPTY
35532: LIST
35533: LIST
35534: IN
35535: OR
35536: IFFALSE 35350
35538: GO 35347
35540: POP
35541: POP
// end else
35542: GO 35924
// for j = 1 to x do
35544: LD_ADDR_VAR 0 9
35548: PUSH
35549: DOUBLE
35550: LD_INT 1
35552: DEC
35553: ST_TO_ADDR
35554: LD_VAR 0 13
35558: PUSH
35559: FOR_TO
35560: IFFALSE 35922
// begin InitHc ;
35562: CALL_OW 19
// if not f then
35566: LD_VAR 0 12
35570: NOT
35571: IFFALSE 35660
// begin PrepareHuman ( false , i , skill ) ;
35573: LD_INT 0
35575: PPUSH
35576: LD_VAR 0 8
35580: PPUSH
35581: LD_VAR 0 4
35585: PPUSH
35586: CALL_OW 380
// un := CreateHuman ;
35590: LD_ADDR_VAR 0 14
35594: PUSH
35595: CALL_OW 44
35599: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35600: LD_ADDR_VAR 0 7
35604: PUSH
35605: LD_VAR 0 7
35609: PPUSH
35610: LD_INT 1
35612: PPUSH
35613: LD_VAR 0 14
35617: PPUSH
35618: CALL_OW 2
35622: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35623: LD_VAR 0 14
35627: PPUSH
35628: LD_VAR 0 1
35632: PPUSH
35633: CALL_OW 250
35637: PPUSH
35638: LD_VAR 0 1
35642: PPUSH
35643: CALL_OW 251
35647: PPUSH
35648: LD_INT 10
35650: PPUSH
35651: LD_INT 0
35653: PPUSH
35654: CALL_OW 50
// continue ;
35658: GO 35559
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
35660: LD_VAR 0 12
35664: PUSH
35665: LD_INT 1
35667: ARRAY
35668: PPUSH
35669: CALL_OW 313
35673: PUSH
35674: LD_VAR 0 12
35678: PUSH
35679: LD_INT 1
35681: ARRAY
35682: PPUSH
35683: CALL_OW 266
35687: PUSH
35688: LD_INT 32
35690: PUSH
35691: LD_INT 31
35693: PUSH
35694: EMPTY
35695: LIST
35696: LIST
35697: IN
35698: AND
35699: PUSH
35700: LD_VAR 0 12
35704: PUSH
35705: LD_INT 1
35707: ARRAY
35708: PPUSH
35709: CALL_OW 313
35713: PUSH
35714: LD_INT 6
35716: EQUAL
35717: OR
35718: IFFALSE 35738
// f := Delete ( f , 1 ) ;
35720: LD_ADDR_VAR 0 12
35724: PUSH
35725: LD_VAR 0 12
35729: PPUSH
35730: LD_INT 1
35732: PPUSH
35733: CALL_OW 3
35737: ST_TO_ADDR
// if not f then
35738: LD_VAR 0 12
35742: NOT
35743: IFFALSE 35761
// begin x := x + 2 ;
35745: LD_ADDR_VAR 0 13
35749: PUSH
35750: LD_VAR 0 13
35754: PUSH
35755: LD_INT 2
35757: PLUS
35758: ST_TO_ADDR
// continue ;
35759: GO 35559
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
35761: LD_VAR 0 12
35765: PUSH
35766: LD_INT 1
35768: ARRAY
35769: PPUSH
35770: CALL_OW 266
35774: PUSH
35775: LD_INT 5
35777: EQUAL
35778: IFFALSE 35852
// begin if UnitsInside ( f [ 1 ] ) < 3 then
35780: LD_VAR 0 12
35784: PUSH
35785: LD_INT 1
35787: ARRAY
35788: PPUSH
35789: CALL_OW 313
35793: PUSH
35794: LD_INT 3
35796: LESS
35797: IFFALSE 35833
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35799: LD_INT 0
35801: PPUSH
35802: LD_INT 5
35804: PUSH
35805: LD_INT 8
35807: PUSH
35808: LD_INT 9
35810: PUSH
35811: EMPTY
35812: LIST
35813: LIST
35814: LIST
35815: PUSH
35816: LD_VAR 0 17
35820: ARRAY
35821: PPUSH
35822: LD_VAR 0 4
35826: PPUSH
35827: CALL_OW 380
35831: GO 35850
// PrepareHuman ( false , i , skill ) ;
35833: LD_INT 0
35835: PPUSH
35836: LD_VAR 0 8
35840: PPUSH
35841: LD_VAR 0 4
35845: PPUSH
35846: CALL_OW 380
// end else
35850: GO 35869
// PrepareHuman ( false , i , skill ) ;
35852: LD_INT 0
35854: PPUSH
35855: LD_VAR 0 8
35859: PPUSH
35860: LD_VAR 0 4
35864: PPUSH
35865: CALL_OW 380
// un := CreateHuman ;
35869: LD_ADDR_VAR 0 14
35873: PUSH
35874: CALL_OW 44
35878: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35879: LD_ADDR_VAR 0 7
35883: PUSH
35884: LD_VAR 0 7
35888: PPUSH
35889: LD_INT 1
35891: PPUSH
35892: LD_VAR 0 14
35896: PPUSH
35897: CALL_OW 2
35901: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
35902: LD_VAR 0 14
35906: PPUSH
35907: LD_VAR 0 12
35911: PUSH
35912: LD_INT 1
35914: ARRAY
35915: PPUSH
35916: CALL_OW 52
// end ;
35920: GO 35559
35922: POP
35923: POP
// end ;
35924: GO 34861
35926: POP
35927: POP
// result := result ^ buildings ;
35928: LD_ADDR_VAR 0 7
35932: PUSH
35933: LD_VAR 0 7
35937: PUSH
35938: LD_VAR 0 18
35942: ADD
35943: ST_TO_ADDR
// end else
35944: GO 36087
// begin for i = 1 to personel do
35946: LD_ADDR_VAR 0 8
35950: PUSH
35951: DOUBLE
35952: LD_INT 1
35954: DEC
35955: ST_TO_ADDR
35956: LD_VAR 0 6
35960: PUSH
35961: FOR_TO
35962: IFFALSE 36085
// begin if i > 4 then
35964: LD_VAR 0 8
35968: PUSH
35969: LD_INT 4
35971: GREATER
35972: IFFALSE 35976
// break ;
35974: GO 36085
// x := personel [ i ] ;
35976: LD_ADDR_VAR 0 13
35980: PUSH
35981: LD_VAR 0 6
35985: PUSH
35986: LD_VAR 0 8
35990: ARRAY
35991: ST_TO_ADDR
// if x = - 1 then
35992: LD_VAR 0 13
35996: PUSH
35997: LD_INT 1
35999: NEG
36000: EQUAL
36001: IFFALSE 36005
// continue ;
36003: GO 35961
// PrepareHuman ( false , i , skill ) ;
36005: LD_INT 0
36007: PPUSH
36008: LD_VAR 0 8
36012: PPUSH
36013: LD_VAR 0 4
36017: PPUSH
36018: CALL_OW 380
// un := CreateHuman ;
36022: LD_ADDR_VAR 0 14
36026: PUSH
36027: CALL_OW 44
36031: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36032: LD_VAR 0 14
36036: PPUSH
36037: LD_VAR 0 1
36041: PPUSH
36042: CALL_OW 250
36046: PPUSH
36047: LD_VAR 0 1
36051: PPUSH
36052: CALL_OW 251
36056: PPUSH
36057: LD_INT 10
36059: PPUSH
36060: LD_INT 0
36062: PPUSH
36063: CALL_OW 50
// result := result ^ un ;
36067: LD_ADDR_VAR 0 7
36071: PUSH
36072: LD_VAR 0 7
36076: PUSH
36077: LD_VAR 0 14
36081: ADD
36082: ST_TO_ADDR
// end ;
36083: GO 35961
36085: POP
36086: POP
// end ; end ;
36087: LD_VAR 0 7
36091: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
36092: LD_INT 0
36094: PPUSH
36095: PPUSH
36096: PPUSH
36097: PPUSH
36098: PPUSH
36099: PPUSH
36100: PPUSH
36101: PPUSH
36102: PPUSH
36103: PPUSH
36104: PPUSH
36105: PPUSH
36106: PPUSH
36107: PPUSH
36108: PPUSH
36109: PPUSH
// result := false ;
36110: LD_ADDR_VAR 0 3
36114: PUSH
36115: LD_INT 0
36117: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
36118: LD_VAR 0 1
36122: NOT
36123: PUSH
36124: LD_VAR 0 1
36128: PPUSH
36129: CALL_OW 266
36133: PUSH
36134: LD_INT 32
36136: PUSH
36137: LD_INT 33
36139: PUSH
36140: EMPTY
36141: LIST
36142: LIST
36143: IN
36144: NOT
36145: OR
36146: IFFALSE 36150
// exit ;
36148: GO 37259
// nat := GetNation ( tower ) ;
36150: LD_ADDR_VAR 0 12
36154: PUSH
36155: LD_VAR 0 1
36159: PPUSH
36160: CALL_OW 248
36164: ST_TO_ADDR
// side := GetSide ( tower ) ;
36165: LD_ADDR_VAR 0 16
36169: PUSH
36170: LD_VAR 0 1
36174: PPUSH
36175: CALL_OW 255
36179: ST_TO_ADDR
// x := GetX ( tower ) ;
36180: LD_ADDR_VAR 0 10
36184: PUSH
36185: LD_VAR 0 1
36189: PPUSH
36190: CALL_OW 250
36194: ST_TO_ADDR
// y := GetY ( tower ) ;
36195: LD_ADDR_VAR 0 11
36199: PUSH
36200: LD_VAR 0 1
36204: PPUSH
36205: CALL_OW 251
36209: ST_TO_ADDR
// if not x or not y then
36210: LD_VAR 0 10
36214: NOT
36215: PUSH
36216: LD_VAR 0 11
36220: NOT
36221: OR
36222: IFFALSE 36226
// exit ;
36224: GO 37259
// weapon := 0 ;
36226: LD_ADDR_VAR 0 18
36230: PUSH
36231: LD_INT 0
36233: ST_TO_ADDR
// fac_list := [ ] ;
36234: LD_ADDR_VAR 0 17
36238: PUSH
36239: EMPTY
36240: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
36241: LD_ADDR_VAR 0 6
36245: PUSH
36246: LD_VAR 0 1
36250: PPUSH
36251: CALL_OW 274
36255: PPUSH
36256: LD_VAR 0 2
36260: PPUSH
36261: LD_INT 0
36263: PPUSH
36264: CALL 33830 0 3
36268: PPUSH
36269: LD_INT 30
36271: PUSH
36272: LD_INT 3
36274: PUSH
36275: EMPTY
36276: LIST
36277: LIST
36278: PPUSH
36279: CALL_OW 72
36283: ST_TO_ADDR
// if not factories then
36284: LD_VAR 0 6
36288: NOT
36289: IFFALSE 36293
// exit ;
36291: GO 37259
// for i in factories do
36293: LD_ADDR_VAR 0 8
36297: PUSH
36298: LD_VAR 0 6
36302: PUSH
36303: FOR_IN
36304: IFFALSE 36329
// fac_list := fac_list union AvailableWeaponList ( i ) ;
36306: LD_ADDR_VAR 0 17
36310: PUSH
36311: LD_VAR 0 17
36315: PUSH
36316: LD_VAR 0 8
36320: PPUSH
36321: CALL_OW 478
36325: UNION
36326: ST_TO_ADDR
36327: GO 36303
36329: POP
36330: POP
// if not fac_list then
36331: LD_VAR 0 17
36335: NOT
36336: IFFALSE 36340
// exit ;
36338: GO 37259
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
36340: LD_ADDR_VAR 0 5
36344: PUSH
36345: LD_INT 4
36347: PUSH
36348: LD_INT 5
36350: PUSH
36351: LD_INT 9
36353: PUSH
36354: LD_INT 10
36356: PUSH
36357: LD_INT 6
36359: PUSH
36360: LD_INT 7
36362: PUSH
36363: LD_INT 11
36365: PUSH
36366: EMPTY
36367: LIST
36368: LIST
36369: LIST
36370: LIST
36371: LIST
36372: LIST
36373: LIST
36374: PUSH
36375: LD_INT 27
36377: PUSH
36378: LD_INT 28
36380: PUSH
36381: LD_INT 26
36383: PUSH
36384: LD_INT 30
36386: PUSH
36387: EMPTY
36388: LIST
36389: LIST
36390: LIST
36391: LIST
36392: PUSH
36393: LD_INT 43
36395: PUSH
36396: LD_INT 44
36398: PUSH
36399: LD_INT 46
36401: PUSH
36402: LD_INT 45
36404: PUSH
36405: LD_INT 47
36407: PUSH
36408: LD_INT 49
36410: PUSH
36411: EMPTY
36412: LIST
36413: LIST
36414: LIST
36415: LIST
36416: LIST
36417: LIST
36418: PUSH
36419: EMPTY
36420: LIST
36421: LIST
36422: LIST
36423: PUSH
36424: LD_VAR 0 12
36428: ARRAY
36429: ST_TO_ADDR
// list := list isect fac_list ;
36430: LD_ADDR_VAR 0 5
36434: PUSH
36435: LD_VAR 0 5
36439: PUSH
36440: LD_VAR 0 17
36444: ISECT
36445: ST_TO_ADDR
// if not list then
36446: LD_VAR 0 5
36450: NOT
36451: IFFALSE 36455
// exit ;
36453: GO 37259
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
36455: LD_VAR 0 12
36459: PUSH
36460: LD_INT 3
36462: EQUAL
36463: PUSH
36464: LD_INT 49
36466: PUSH
36467: LD_VAR 0 5
36471: IN
36472: AND
36473: PUSH
36474: LD_INT 31
36476: PPUSH
36477: LD_VAR 0 16
36481: PPUSH
36482: CALL_OW 321
36486: PUSH
36487: LD_INT 2
36489: EQUAL
36490: AND
36491: IFFALSE 36551
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
36493: LD_INT 22
36495: PUSH
36496: LD_VAR 0 16
36500: PUSH
36501: EMPTY
36502: LIST
36503: LIST
36504: PUSH
36505: LD_INT 35
36507: PUSH
36508: LD_INT 49
36510: PUSH
36511: EMPTY
36512: LIST
36513: LIST
36514: PUSH
36515: LD_INT 91
36517: PUSH
36518: LD_VAR 0 1
36522: PUSH
36523: LD_INT 10
36525: PUSH
36526: EMPTY
36527: LIST
36528: LIST
36529: LIST
36530: PUSH
36531: EMPTY
36532: LIST
36533: LIST
36534: LIST
36535: PPUSH
36536: CALL_OW 69
36540: NOT
36541: IFFALSE 36551
// weapon := ru_time_lapser ;
36543: LD_ADDR_VAR 0 18
36547: PUSH
36548: LD_INT 49
36550: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
36551: LD_VAR 0 12
36555: PUSH
36556: LD_INT 1
36558: PUSH
36559: LD_INT 2
36561: PUSH
36562: EMPTY
36563: LIST
36564: LIST
36565: IN
36566: PUSH
36567: LD_INT 11
36569: PUSH
36570: LD_VAR 0 5
36574: IN
36575: PUSH
36576: LD_INT 30
36578: PUSH
36579: LD_VAR 0 5
36583: IN
36584: OR
36585: AND
36586: PUSH
36587: LD_INT 6
36589: PPUSH
36590: LD_VAR 0 16
36594: PPUSH
36595: CALL_OW 321
36599: PUSH
36600: LD_INT 2
36602: EQUAL
36603: AND
36604: IFFALSE 36769
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
36606: LD_INT 22
36608: PUSH
36609: LD_VAR 0 16
36613: PUSH
36614: EMPTY
36615: LIST
36616: LIST
36617: PUSH
36618: LD_INT 2
36620: PUSH
36621: LD_INT 35
36623: PUSH
36624: LD_INT 11
36626: PUSH
36627: EMPTY
36628: LIST
36629: LIST
36630: PUSH
36631: LD_INT 35
36633: PUSH
36634: LD_INT 30
36636: PUSH
36637: EMPTY
36638: LIST
36639: LIST
36640: PUSH
36641: EMPTY
36642: LIST
36643: LIST
36644: LIST
36645: PUSH
36646: LD_INT 91
36648: PUSH
36649: LD_VAR 0 1
36653: PUSH
36654: LD_INT 18
36656: PUSH
36657: EMPTY
36658: LIST
36659: LIST
36660: LIST
36661: PUSH
36662: EMPTY
36663: LIST
36664: LIST
36665: LIST
36666: PPUSH
36667: CALL_OW 69
36671: NOT
36672: PUSH
36673: LD_INT 22
36675: PUSH
36676: LD_VAR 0 16
36680: PUSH
36681: EMPTY
36682: LIST
36683: LIST
36684: PUSH
36685: LD_INT 2
36687: PUSH
36688: LD_INT 30
36690: PUSH
36691: LD_INT 32
36693: PUSH
36694: EMPTY
36695: LIST
36696: LIST
36697: PUSH
36698: LD_INT 30
36700: PUSH
36701: LD_INT 33
36703: PUSH
36704: EMPTY
36705: LIST
36706: LIST
36707: PUSH
36708: EMPTY
36709: LIST
36710: LIST
36711: LIST
36712: PUSH
36713: LD_INT 91
36715: PUSH
36716: LD_VAR 0 1
36720: PUSH
36721: LD_INT 12
36723: PUSH
36724: EMPTY
36725: LIST
36726: LIST
36727: LIST
36728: PUSH
36729: EMPTY
36730: LIST
36731: LIST
36732: LIST
36733: PUSH
36734: EMPTY
36735: LIST
36736: PPUSH
36737: CALL_OW 69
36741: PUSH
36742: LD_INT 2
36744: GREATER
36745: AND
36746: IFFALSE 36769
// weapon := [ us_radar , ar_radar ] [ nat ] ;
36748: LD_ADDR_VAR 0 18
36752: PUSH
36753: LD_INT 11
36755: PUSH
36756: LD_INT 30
36758: PUSH
36759: EMPTY
36760: LIST
36761: LIST
36762: PUSH
36763: LD_VAR 0 12
36767: ARRAY
36768: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
36769: LD_VAR 0 18
36773: NOT
36774: PUSH
36775: LD_INT 40
36777: PPUSH
36778: LD_VAR 0 16
36782: PPUSH
36783: CALL_OW 321
36787: PUSH
36788: LD_INT 2
36790: EQUAL
36791: AND
36792: PUSH
36793: LD_INT 7
36795: PUSH
36796: LD_VAR 0 5
36800: IN
36801: PUSH
36802: LD_INT 28
36804: PUSH
36805: LD_VAR 0 5
36809: IN
36810: OR
36811: PUSH
36812: LD_INT 45
36814: PUSH
36815: LD_VAR 0 5
36819: IN
36820: OR
36821: AND
36822: IFFALSE 37076
// begin hex := GetHexInfo ( x , y ) ;
36824: LD_ADDR_VAR 0 4
36828: PUSH
36829: LD_VAR 0 10
36833: PPUSH
36834: LD_VAR 0 11
36838: PPUSH
36839: CALL_OW 546
36843: ST_TO_ADDR
// if hex [ 1 ] then
36844: LD_VAR 0 4
36848: PUSH
36849: LD_INT 1
36851: ARRAY
36852: IFFALSE 36856
// exit ;
36854: GO 37259
// height := hex [ 2 ] ;
36856: LD_ADDR_VAR 0 15
36860: PUSH
36861: LD_VAR 0 4
36865: PUSH
36866: LD_INT 2
36868: ARRAY
36869: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
36870: LD_ADDR_VAR 0 14
36874: PUSH
36875: LD_INT 0
36877: PUSH
36878: LD_INT 2
36880: PUSH
36881: LD_INT 3
36883: PUSH
36884: LD_INT 5
36886: PUSH
36887: EMPTY
36888: LIST
36889: LIST
36890: LIST
36891: LIST
36892: ST_TO_ADDR
// for i in tmp do
36893: LD_ADDR_VAR 0 8
36897: PUSH
36898: LD_VAR 0 14
36902: PUSH
36903: FOR_IN
36904: IFFALSE 37074
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
36906: LD_ADDR_VAR 0 9
36910: PUSH
36911: LD_VAR 0 10
36915: PPUSH
36916: LD_VAR 0 8
36920: PPUSH
36921: LD_INT 5
36923: PPUSH
36924: CALL_OW 272
36928: PUSH
36929: LD_VAR 0 11
36933: PPUSH
36934: LD_VAR 0 8
36938: PPUSH
36939: LD_INT 5
36941: PPUSH
36942: CALL_OW 273
36946: PUSH
36947: EMPTY
36948: LIST
36949: LIST
36950: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
36951: LD_VAR 0 9
36955: PUSH
36956: LD_INT 1
36958: ARRAY
36959: PPUSH
36960: LD_VAR 0 9
36964: PUSH
36965: LD_INT 2
36967: ARRAY
36968: PPUSH
36969: CALL_OW 488
36973: IFFALSE 37072
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
36975: LD_ADDR_VAR 0 4
36979: PUSH
36980: LD_VAR 0 9
36984: PUSH
36985: LD_INT 1
36987: ARRAY
36988: PPUSH
36989: LD_VAR 0 9
36993: PUSH
36994: LD_INT 2
36996: ARRAY
36997: PPUSH
36998: CALL_OW 546
37002: ST_TO_ADDR
// if hex [ 1 ] then
37003: LD_VAR 0 4
37007: PUSH
37008: LD_INT 1
37010: ARRAY
37011: IFFALSE 37015
// continue ;
37013: GO 36903
// h := hex [ 2 ] ;
37015: LD_ADDR_VAR 0 13
37019: PUSH
37020: LD_VAR 0 4
37024: PUSH
37025: LD_INT 2
37027: ARRAY
37028: ST_TO_ADDR
// if h + 7 < height then
37029: LD_VAR 0 13
37033: PUSH
37034: LD_INT 7
37036: PLUS
37037: PUSH
37038: LD_VAR 0 15
37042: LESS
37043: IFFALSE 37072
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
37045: LD_ADDR_VAR 0 18
37049: PUSH
37050: LD_INT 7
37052: PUSH
37053: LD_INT 28
37055: PUSH
37056: LD_INT 45
37058: PUSH
37059: EMPTY
37060: LIST
37061: LIST
37062: LIST
37063: PUSH
37064: LD_VAR 0 12
37068: ARRAY
37069: ST_TO_ADDR
// break ;
37070: GO 37074
// end ; end ; end ;
37072: GO 36903
37074: POP
37075: POP
// end ; if not weapon then
37076: LD_VAR 0 18
37080: NOT
37081: IFFALSE 37141
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
37083: LD_ADDR_VAR 0 5
37087: PUSH
37088: LD_VAR 0 5
37092: PUSH
37093: LD_INT 11
37095: PUSH
37096: LD_INT 30
37098: PUSH
37099: LD_INT 49
37101: PUSH
37102: EMPTY
37103: LIST
37104: LIST
37105: LIST
37106: DIFF
37107: ST_TO_ADDR
// if not list then
37108: LD_VAR 0 5
37112: NOT
37113: IFFALSE 37117
// exit ;
37115: GO 37259
// weapon := list [ rand ( 1 , list ) ] ;
37117: LD_ADDR_VAR 0 18
37121: PUSH
37122: LD_VAR 0 5
37126: PUSH
37127: LD_INT 1
37129: PPUSH
37130: LD_VAR 0 5
37134: PPUSH
37135: CALL_OW 12
37139: ARRAY
37140: ST_TO_ADDR
// end ; if weapon then
37141: LD_VAR 0 18
37145: IFFALSE 37259
// begin tmp := CostOfWeapon ( weapon ) ;
37147: LD_ADDR_VAR 0 14
37151: PUSH
37152: LD_VAR 0 18
37156: PPUSH
37157: CALL_OW 451
37161: ST_TO_ADDR
// j := GetBase ( tower ) ;
37162: LD_ADDR_VAR 0 9
37166: PUSH
37167: LD_VAR 0 1
37171: PPUSH
37172: CALL_OW 274
37176: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
37177: LD_VAR 0 9
37181: PPUSH
37182: LD_INT 1
37184: PPUSH
37185: CALL_OW 275
37189: PUSH
37190: LD_VAR 0 14
37194: PUSH
37195: LD_INT 1
37197: ARRAY
37198: GREATEREQUAL
37199: PUSH
37200: LD_VAR 0 9
37204: PPUSH
37205: LD_INT 2
37207: PPUSH
37208: CALL_OW 275
37212: PUSH
37213: LD_VAR 0 14
37217: PUSH
37218: LD_INT 2
37220: ARRAY
37221: GREATEREQUAL
37222: AND
37223: PUSH
37224: LD_VAR 0 9
37228: PPUSH
37229: LD_INT 3
37231: PPUSH
37232: CALL_OW 275
37236: PUSH
37237: LD_VAR 0 14
37241: PUSH
37242: LD_INT 3
37244: ARRAY
37245: GREATEREQUAL
37246: AND
37247: IFFALSE 37259
// result := weapon ;
37249: LD_ADDR_VAR 0 3
37253: PUSH
37254: LD_VAR 0 18
37258: ST_TO_ADDR
// end ; end ;
37259: LD_VAR 0 3
37263: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
37264: LD_INT 0
37266: PPUSH
37267: PPUSH
// result := true ;
37268: LD_ADDR_VAR 0 3
37272: PUSH
37273: LD_INT 1
37275: ST_TO_ADDR
// if array1 = array2 then
37276: LD_VAR 0 1
37280: PUSH
37281: LD_VAR 0 2
37285: EQUAL
37286: IFFALSE 37346
// begin for i = 1 to array1 do
37288: LD_ADDR_VAR 0 4
37292: PUSH
37293: DOUBLE
37294: LD_INT 1
37296: DEC
37297: ST_TO_ADDR
37298: LD_VAR 0 1
37302: PUSH
37303: FOR_TO
37304: IFFALSE 37342
// if array1 [ i ] <> array2 [ i ] then
37306: LD_VAR 0 1
37310: PUSH
37311: LD_VAR 0 4
37315: ARRAY
37316: PUSH
37317: LD_VAR 0 2
37321: PUSH
37322: LD_VAR 0 4
37326: ARRAY
37327: NONEQUAL
37328: IFFALSE 37340
// begin result := false ;
37330: LD_ADDR_VAR 0 3
37334: PUSH
37335: LD_INT 0
37337: ST_TO_ADDR
// break ;
37338: GO 37342
// end ;
37340: GO 37303
37342: POP
37343: POP
// end else
37344: GO 37354
// result := false ;
37346: LD_ADDR_VAR 0 3
37350: PUSH
37351: LD_INT 0
37353: ST_TO_ADDR
// end ;
37354: LD_VAR 0 3
37358: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
37359: LD_INT 0
37361: PPUSH
37362: PPUSH
// if not array1 or not array2 then
37363: LD_VAR 0 1
37367: NOT
37368: PUSH
37369: LD_VAR 0 2
37373: NOT
37374: OR
37375: IFFALSE 37379
// exit ;
37377: GO 37443
// result := true ;
37379: LD_ADDR_VAR 0 3
37383: PUSH
37384: LD_INT 1
37386: ST_TO_ADDR
// for i = 1 to array1 do
37387: LD_ADDR_VAR 0 4
37391: PUSH
37392: DOUBLE
37393: LD_INT 1
37395: DEC
37396: ST_TO_ADDR
37397: LD_VAR 0 1
37401: PUSH
37402: FOR_TO
37403: IFFALSE 37441
// if array1 [ i ] <> array2 [ i ] then
37405: LD_VAR 0 1
37409: PUSH
37410: LD_VAR 0 4
37414: ARRAY
37415: PUSH
37416: LD_VAR 0 2
37420: PUSH
37421: LD_VAR 0 4
37425: ARRAY
37426: NONEQUAL
37427: IFFALSE 37439
// begin result := false ;
37429: LD_ADDR_VAR 0 3
37433: PUSH
37434: LD_INT 0
37436: ST_TO_ADDR
// break ;
37437: GO 37441
// end ;
37439: GO 37402
37441: POP
37442: POP
// end ;
37443: LD_VAR 0 3
37447: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
37448: LD_INT 0
37450: PPUSH
37451: PPUSH
37452: PPUSH
// pom := GetBase ( fac ) ;
37453: LD_ADDR_VAR 0 5
37457: PUSH
37458: LD_VAR 0 1
37462: PPUSH
37463: CALL_OW 274
37467: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
37468: LD_ADDR_VAR 0 4
37472: PUSH
37473: LD_VAR 0 2
37477: PUSH
37478: LD_INT 1
37480: ARRAY
37481: PPUSH
37482: LD_VAR 0 2
37486: PUSH
37487: LD_INT 2
37489: ARRAY
37490: PPUSH
37491: LD_VAR 0 2
37495: PUSH
37496: LD_INT 3
37498: ARRAY
37499: PPUSH
37500: LD_VAR 0 2
37504: PUSH
37505: LD_INT 4
37507: ARRAY
37508: PPUSH
37509: CALL_OW 449
37513: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37514: LD_ADDR_VAR 0 3
37518: PUSH
37519: LD_VAR 0 5
37523: PPUSH
37524: LD_INT 1
37526: PPUSH
37527: CALL_OW 275
37531: PUSH
37532: LD_VAR 0 4
37536: PUSH
37537: LD_INT 1
37539: ARRAY
37540: GREATEREQUAL
37541: PUSH
37542: LD_VAR 0 5
37546: PPUSH
37547: LD_INT 2
37549: PPUSH
37550: CALL_OW 275
37554: PUSH
37555: LD_VAR 0 4
37559: PUSH
37560: LD_INT 2
37562: ARRAY
37563: GREATEREQUAL
37564: AND
37565: PUSH
37566: LD_VAR 0 5
37570: PPUSH
37571: LD_INT 3
37573: PPUSH
37574: CALL_OW 275
37578: PUSH
37579: LD_VAR 0 4
37583: PUSH
37584: LD_INT 3
37586: ARRAY
37587: GREATEREQUAL
37588: AND
37589: ST_TO_ADDR
// end ;
37590: LD_VAR 0 3
37594: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
37595: LD_INT 0
37597: PPUSH
37598: PPUSH
37599: PPUSH
37600: PPUSH
// pom := GetBase ( building ) ;
37601: LD_ADDR_VAR 0 3
37605: PUSH
37606: LD_VAR 0 1
37610: PPUSH
37611: CALL_OW 274
37615: ST_TO_ADDR
// if not pom then
37616: LD_VAR 0 3
37620: NOT
37621: IFFALSE 37625
// exit ;
37623: GO 37795
// btype := GetBType ( building ) ;
37625: LD_ADDR_VAR 0 5
37629: PUSH
37630: LD_VAR 0 1
37634: PPUSH
37635: CALL_OW 266
37639: ST_TO_ADDR
// if btype = b_armoury then
37640: LD_VAR 0 5
37644: PUSH
37645: LD_INT 4
37647: EQUAL
37648: IFFALSE 37658
// btype := b_barracks ;
37650: LD_ADDR_VAR 0 5
37654: PUSH
37655: LD_INT 5
37657: ST_TO_ADDR
// if btype = b_depot then
37658: LD_VAR 0 5
37662: PUSH
37663: LD_INT 0
37665: EQUAL
37666: IFFALSE 37676
// btype := b_warehouse ;
37668: LD_ADDR_VAR 0 5
37672: PUSH
37673: LD_INT 1
37675: ST_TO_ADDR
// if btype = b_workshop then
37676: LD_VAR 0 5
37680: PUSH
37681: LD_INT 2
37683: EQUAL
37684: IFFALSE 37694
// btype := b_factory ;
37686: LD_ADDR_VAR 0 5
37690: PUSH
37691: LD_INT 3
37693: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37694: LD_ADDR_VAR 0 4
37698: PUSH
37699: LD_VAR 0 5
37703: PPUSH
37704: LD_VAR 0 1
37708: PPUSH
37709: CALL_OW 248
37713: PPUSH
37714: CALL_OW 450
37718: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37719: LD_ADDR_VAR 0 2
37723: PUSH
37724: LD_VAR 0 3
37728: PPUSH
37729: LD_INT 1
37731: PPUSH
37732: CALL_OW 275
37736: PUSH
37737: LD_VAR 0 4
37741: PUSH
37742: LD_INT 1
37744: ARRAY
37745: GREATEREQUAL
37746: PUSH
37747: LD_VAR 0 3
37751: PPUSH
37752: LD_INT 2
37754: PPUSH
37755: CALL_OW 275
37759: PUSH
37760: LD_VAR 0 4
37764: PUSH
37765: LD_INT 2
37767: ARRAY
37768: GREATEREQUAL
37769: AND
37770: PUSH
37771: LD_VAR 0 3
37775: PPUSH
37776: LD_INT 3
37778: PPUSH
37779: CALL_OW 275
37783: PUSH
37784: LD_VAR 0 4
37788: PUSH
37789: LD_INT 3
37791: ARRAY
37792: GREATEREQUAL
37793: AND
37794: ST_TO_ADDR
// end ;
37795: LD_VAR 0 2
37799: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
37800: LD_INT 0
37802: PPUSH
37803: PPUSH
37804: PPUSH
// pom := GetBase ( building ) ;
37805: LD_ADDR_VAR 0 4
37809: PUSH
37810: LD_VAR 0 1
37814: PPUSH
37815: CALL_OW 274
37819: ST_TO_ADDR
// if not pom then
37820: LD_VAR 0 4
37824: NOT
37825: IFFALSE 37829
// exit ;
37827: GO 37930
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37829: LD_ADDR_VAR 0 5
37833: PUSH
37834: LD_VAR 0 2
37838: PPUSH
37839: LD_VAR 0 1
37843: PPUSH
37844: CALL_OW 248
37848: PPUSH
37849: CALL_OW 450
37853: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37854: LD_ADDR_VAR 0 3
37858: PUSH
37859: LD_VAR 0 4
37863: PPUSH
37864: LD_INT 1
37866: PPUSH
37867: CALL_OW 275
37871: PUSH
37872: LD_VAR 0 5
37876: PUSH
37877: LD_INT 1
37879: ARRAY
37880: GREATEREQUAL
37881: PUSH
37882: LD_VAR 0 4
37886: PPUSH
37887: LD_INT 2
37889: PPUSH
37890: CALL_OW 275
37894: PUSH
37895: LD_VAR 0 5
37899: PUSH
37900: LD_INT 2
37902: ARRAY
37903: GREATEREQUAL
37904: AND
37905: PUSH
37906: LD_VAR 0 4
37910: PPUSH
37911: LD_INT 3
37913: PPUSH
37914: CALL_OW 275
37918: PUSH
37919: LD_VAR 0 5
37923: PUSH
37924: LD_INT 3
37926: ARRAY
37927: GREATEREQUAL
37928: AND
37929: ST_TO_ADDR
// end ;
37930: LD_VAR 0 3
37934: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
37935: LD_INT 0
37937: PPUSH
37938: PPUSH
37939: PPUSH
37940: PPUSH
37941: PPUSH
37942: PPUSH
37943: PPUSH
37944: PPUSH
37945: PPUSH
37946: PPUSH
37947: PPUSH
// result := false ;
37948: LD_ADDR_VAR 0 8
37952: PUSH
37953: LD_INT 0
37955: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
37956: LD_VAR 0 5
37960: NOT
37961: PUSH
37962: LD_VAR 0 1
37966: NOT
37967: OR
37968: PUSH
37969: LD_VAR 0 2
37973: NOT
37974: OR
37975: PUSH
37976: LD_VAR 0 3
37980: NOT
37981: OR
37982: IFFALSE 37986
// exit ;
37984: GO 38800
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
37986: LD_ADDR_VAR 0 14
37990: PUSH
37991: LD_VAR 0 1
37995: PPUSH
37996: LD_VAR 0 2
38000: PPUSH
38001: LD_VAR 0 3
38005: PPUSH
38006: LD_VAR 0 4
38010: PPUSH
38011: LD_VAR 0 5
38015: PUSH
38016: LD_INT 1
38018: ARRAY
38019: PPUSH
38020: CALL_OW 248
38024: PPUSH
38025: LD_INT 0
38027: PPUSH
38028: CALL 40033 0 6
38032: ST_TO_ADDR
// if not hexes then
38033: LD_VAR 0 14
38037: NOT
38038: IFFALSE 38042
// exit ;
38040: GO 38800
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
38042: LD_ADDR_VAR 0 17
38046: PUSH
38047: LD_VAR 0 5
38051: PPUSH
38052: LD_INT 22
38054: PUSH
38055: LD_VAR 0 13
38059: PPUSH
38060: CALL_OW 255
38064: PUSH
38065: EMPTY
38066: LIST
38067: LIST
38068: PUSH
38069: LD_INT 2
38071: PUSH
38072: LD_INT 30
38074: PUSH
38075: LD_INT 0
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: PUSH
38082: LD_INT 30
38084: PUSH
38085: LD_INT 1
38087: PUSH
38088: EMPTY
38089: LIST
38090: LIST
38091: PUSH
38092: EMPTY
38093: LIST
38094: LIST
38095: LIST
38096: PUSH
38097: EMPTY
38098: LIST
38099: LIST
38100: PPUSH
38101: CALL_OW 72
38105: ST_TO_ADDR
// for i = 1 to hexes do
38106: LD_ADDR_VAR 0 9
38110: PUSH
38111: DOUBLE
38112: LD_INT 1
38114: DEC
38115: ST_TO_ADDR
38116: LD_VAR 0 14
38120: PUSH
38121: FOR_TO
38122: IFFALSE 38798
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38124: LD_ADDR_VAR 0 13
38128: PUSH
38129: LD_VAR 0 14
38133: PUSH
38134: LD_VAR 0 9
38138: ARRAY
38139: PUSH
38140: LD_INT 1
38142: ARRAY
38143: PPUSH
38144: LD_VAR 0 14
38148: PUSH
38149: LD_VAR 0 9
38153: ARRAY
38154: PUSH
38155: LD_INT 2
38157: ARRAY
38158: PPUSH
38159: CALL_OW 428
38163: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
38164: LD_VAR 0 14
38168: PUSH
38169: LD_VAR 0 9
38173: ARRAY
38174: PUSH
38175: LD_INT 1
38177: ARRAY
38178: PPUSH
38179: LD_VAR 0 14
38183: PUSH
38184: LD_VAR 0 9
38188: ARRAY
38189: PUSH
38190: LD_INT 2
38192: ARRAY
38193: PPUSH
38194: CALL_OW 351
38198: PUSH
38199: LD_VAR 0 14
38203: PUSH
38204: LD_VAR 0 9
38208: ARRAY
38209: PUSH
38210: LD_INT 1
38212: ARRAY
38213: PPUSH
38214: LD_VAR 0 14
38218: PUSH
38219: LD_VAR 0 9
38223: ARRAY
38224: PUSH
38225: LD_INT 2
38227: ARRAY
38228: PPUSH
38229: CALL_OW 488
38233: NOT
38234: OR
38235: PUSH
38236: LD_VAR 0 13
38240: PPUSH
38241: CALL_OW 247
38245: PUSH
38246: LD_INT 3
38248: EQUAL
38249: OR
38250: IFFALSE 38256
// exit ;
38252: POP
38253: POP
38254: GO 38800
// if not tmp then
38256: LD_VAR 0 13
38260: NOT
38261: IFFALSE 38265
// continue ;
38263: GO 38121
// result := true ;
38265: LD_ADDR_VAR 0 8
38269: PUSH
38270: LD_INT 1
38272: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
38273: LD_VAR 0 6
38277: PUSH
38278: LD_VAR 0 13
38282: PPUSH
38283: CALL_OW 247
38287: PUSH
38288: LD_INT 2
38290: EQUAL
38291: AND
38292: PUSH
38293: LD_VAR 0 13
38297: PPUSH
38298: CALL_OW 263
38302: PUSH
38303: LD_INT 1
38305: EQUAL
38306: AND
38307: IFFALSE 38471
// begin if IsDrivenBy ( tmp ) then
38309: LD_VAR 0 13
38313: PPUSH
38314: CALL_OW 311
38318: IFFALSE 38322
// continue ;
38320: GO 38121
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
38322: LD_VAR 0 6
38326: PPUSH
38327: LD_INT 3
38329: PUSH
38330: LD_INT 60
38332: PUSH
38333: EMPTY
38334: LIST
38335: PUSH
38336: EMPTY
38337: LIST
38338: LIST
38339: PUSH
38340: LD_INT 3
38342: PUSH
38343: LD_INT 55
38345: PUSH
38346: EMPTY
38347: LIST
38348: PUSH
38349: EMPTY
38350: LIST
38351: LIST
38352: PUSH
38353: EMPTY
38354: LIST
38355: LIST
38356: PPUSH
38357: CALL_OW 72
38361: IFFALSE 38469
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
38363: LD_ADDR_VAR 0 18
38367: PUSH
38368: LD_VAR 0 6
38372: PPUSH
38373: LD_INT 3
38375: PUSH
38376: LD_INT 60
38378: PUSH
38379: EMPTY
38380: LIST
38381: PUSH
38382: EMPTY
38383: LIST
38384: LIST
38385: PUSH
38386: LD_INT 3
38388: PUSH
38389: LD_INT 55
38391: PUSH
38392: EMPTY
38393: LIST
38394: PUSH
38395: EMPTY
38396: LIST
38397: LIST
38398: PUSH
38399: EMPTY
38400: LIST
38401: LIST
38402: PPUSH
38403: CALL_OW 72
38407: PUSH
38408: LD_INT 1
38410: ARRAY
38411: ST_TO_ADDR
// if IsInUnit ( driver ) then
38412: LD_VAR 0 18
38416: PPUSH
38417: CALL_OW 310
38421: IFFALSE 38432
// ComExit ( driver ) ;
38423: LD_VAR 0 18
38427: PPUSH
38428: CALL 63813 0 1
// AddComEnterUnit ( driver , tmp ) ;
38432: LD_VAR 0 18
38436: PPUSH
38437: LD_VAR 0 13
38441: PPUSH
38442: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
38446: LD_VAR 0 18
38450: PPUSH
38451: LD_VAR 0 7
38455: PPUSH
38456: CALL_OW 173
// AddComExitVehicle ( driver ) ;
38460: LD_VAR 0 18
38464: PPUSH
38465: CALL_OW 181
// end ; continue ;
38469: GO 38121
// end ; if not cleaners or not tmp in cleaners then
38471: LD_VAR 0 6
38475: NOT
38476: PUSH
38477: LD_VAR 0 13
38481: PUSH
38482: LD_VAR 0 6
38486: IN
38487: NOT
38488: OR
38489: IFFALSE 38796
// begin if dep then
38491: LD_VAR 0 17
38495: IFFALSE 38631
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
38497: LD_ADDR_VAR 0 16
38501: PUSH
38502: LD_VAR 0 17
38506: PUSH
38507: LD_INT 1
38509: ARRAY
38510: PPUSH
38511: CALL_OW 250
38515: PPUSH
38516: LD_VAR 0 17
38520: PUSH
38521: LD_INT 1
38523: ARRAY
38524: PPUSH
38525: CALL_OW 254
38529: PPUSH
38530: LD_INT 5
38532: PPUSH
38533: CALL_OW 272
38537: PUSH
38538: LD_VAR 0 17
38542: PUSH
38543: LD_INT 1
38545: ARRAY
38546: PPUSH
38547: CALL_OW 251
38551: PPUSH
38552: LD_VAR 0 17
38556: PUSH
38557: LD_INT 1
38559: ARRAY
38560: PPUSH
38561: CALL_OW 254
38565: PPUSH
38566: LD_INT 5
38568: PPUSH
38569: CALL_OW 273
38573: PUSH
38574: EMPTY
38575: LIST
38576: LIST
38577: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
38578: LD_VAR 0 16
38582: PUSH
38583: LD_INT 1
38585: ARRAY
38586: PPUSH
38587: LD_VAR 0 16
38591: PUSH
38592: LD_INT 2
38594: ARRAY
38595: PPUSH
38596: CALL_OW 488
38600: IFFALSE 38631
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
38602: LD_VAR 0 13
38606: PPUSH
38607: LD_VAR 0 16
38611: PUSH
38612: LD_INT 1
38614: ARRAY
38615: PPUSH
38616: LD_VAR 0 16
38620: PUSH
38621: LD_INT 2
38623: ARRAY
38624: PPUSH
38625: CALL_OW 111
// continue ;
38629: GO 38121
// end ; end ; r := GetDir ( tmp ) ;
38631: LD_ADDR_VAR 0 15
38635: PUSH
38636: LD_VAR 0 13
38640: PPUSH
38641: CALL_OW 254
38645: ST_TO_ADDR
// if r = 5 then
38646: LD_VAR 0 15
38650: PUSH
38651: LD_INT 5
38653: EQUAL
38654: IFFALSE 38664
// r := 0 ;
38656: LD_ADDR_VAR 0 15
38660: PUSH
38661: LD_INT 0
38663: ST_TO_ADDR
// for j = r to 5 do
38664: LD_ADDR_VAR 0 10
38668: PUSH
38669: DOUBLE
38670: LD_VAR 0 15
38674: DEC
38675: ST_TO_ADDR
38676: LD_INT 5
38678: PUSH
38679: FOR_TO
38680: IFFALSE 38794
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
38682: LD_ADDR_VAR 0 11
38686: PUSH
38687: LD_VAR 0 13
38691: PPUSH
38692: CALL_OW 250
38696: PPUSH
38697: LD_VAR 0 10
38701: PPUSH
38702: LD_INT 2
38704: PPUSH
38705: CALL_OW 272
38709: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
38710: LD_ADDR_VAR 0 12
38714: PUSH
38715: LD_VAR 0 13
38719: PPUSH
38720: CALL_OW 251
38724: PPUSH
38725: LD_VAR 0 10
38729: PPUSH
38730: LD_INT 2
38732: PPUSH
38733: CALL_OW 273
38737: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
38738: LD_VAR 0 11
38742: PPUSH
38743: LD_VAR 0 12
38747: PPUSH
38748: CALL_OW 488
38752: PUSH
38753: LD_VAR 0 11
38757: PPUSH
38758: LD_VAR 0 12
38762: PPUSH
38763: CALL_OW 428
38767: NOT
38768: AND
38769: IFFALSE 38792
// begin ComMoveXY ( tmp , _x , _y ) ;
38771: LD_VAR 0 13
38775: PPUSH
38776: LD_VAR 0 11
38780: PPUSH
38781: LD_VAR 0 12
38785: PPUSH
38786: CALL_OW 111
// break ;
38790: GO 38794
// end ; end ;
38792: GO 38679
38794: POP
38795: POP
// end ; end ;
38796: GO 38121
38798: POP
38799: POP
// end ;
38800: LD_VAR 0 8
38804: RET
// export function BuildingTechInvented ( side , btype ) ; begin
38805: LD_INT 0
38807: PPUSH
// result := true ;
38808: LD_ADDR_VAR 0 3
38812: PUSH
38813: LD_INT 1
38815: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
38816: LD_VAR 0 2
38820: PUSH
38821: LD_INT 24
38823: DOUBLE
38824: EQUAL
38825: IFTRUE 38835
38827: LD_INT 33
38829: DOUBLE
38830: EQUAL
38831: IFTRUE 38835
38833: GO 38860
38835: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
38836: LD_ADDR_VAR 0 3
38840: PUSH
38841: LD_INT 32
38843: PPUSH
38844: LD_VAR 0 1
38848: PPUSH
38849: CALL_OW 321
38853: PUSH
38854: LD_INT 2
38856: EQUAL
38857: ST_TO_ADDR
38858: GO 39176
38860: LD_INT 20
38862: DOUBLE
38863: EQUAL
38864: IFTRUE 38868
38866: GO 38893
38868: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
38869: LD_ADDR_VAR 0 3
38873: PUSH
38874: LD_INT 6
38876: PPUSH
38877: LD_VAR 0 1
38881: PPUSH
38882: CALL_OW 321
38886: PUSH
38887: LD_INT 2
38889: EQUAL
38890: ST_TO_ADDR
38891: GO 39176
38893: LD_INT 22
38895: DOUBLE
38896: EQUAL
38897: IFTRUE 38907
38899: LD_INT 36
38901: DOUBLE
38902: EQUAL
38903: IFTRUE 38907
38905: GO 38932
38907: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
38908: LD_ADDR_VAR 0 3
38912: PUSH
38913: LD_INT 15
38915: PPUSH
38916: LD_VAR 0 1
38920: PPUSH
38921: CALL_OW 321
38925: PUSH
38926: LD_INT 2
38928: EQUAL
38929: ST_TO_ADDR
38930: GO 39176
38932: LD_INT 30
38934: DOUBLE
38935: EQUAL
38936: IFTRUE 38940
38938: GO 38965
38940: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
38941: LD_ADDR_VAR 0 3
38945: PUSH
38946: LD_INT 20
38948: PPUSH
38949: LD_VAR 0 1
38953: PPUSH
38954: CALL_OW 321
38958: PUSH
38959: LD_INT 2
38961: EQUAL
38962: ST_TO_ADDR
38963: GO 39176
38965: LD_INT 28
38967: DOUBLE
38968: EQUAL
38969: IFTRUE 38979
38971: LD_INT 21
38973: DOUBLE
38974: EQUAL
38975: IFTRUE 38979
38977: GO 39004
38979: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
38980: LD_ADDR_VAR 0 3
38984: PUSH
38985: LD_INT 21
38987: PPUSH
38988: LD_VAR 0 1
38992: PPUSH
38993: CALL_OW 321
38997: PUSH
38998: LD_INT 2
39000: EQUAL
39001: ST_TO_ADDR
39002: GO 39176
39004: LD_INT 16
39006: DOUBLE
39007: EQUAL
39008: IFTRUE 39012
39010: GO 39037
39012: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
39013: LD_ADDR_VAR 0 3
39017: PUSH
39018: LD_INT 84
39020: PPUSH
39021: LD_VAR 0 1
39025: PPUSH
39026: CALL_OW 321
39030: PUSH
39031: LD_INT 2
39033: EQUAL
39034: ST_TO_ADDR
39035: GO 39176
39037: LD_INT 19
39039: DOUBLE
39040: EQUAL
39041: IFTRUE 39051
39043: LD_INT 23
39045: DOUBLE
39046: EQUAL
39047: IFTRUE 39051
39049: GO 39076
39051: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
39052: LD_ADDR_VAR 0 3
39056: PUSH
39057: LD_INT 83
39059: PPUSH
39060: LD_VAR 0 1
39064: PPUSH
39065: CALL_OW 321
39069: PUSH
39070: LD_INT 2
39072: EQUAL
39073: ST_TO_ADDR
39074: GO 39176
39076: LD_INT 17
39078: DOUBLE
39079: EQUAL
39080: IFTRUE 39084
39082: GO 39109
39084: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
39085: LD_ADDR_VAR 0 3
39089: PUSH
39090: LD_INT 39
39092: PPUSH
39093: LD_VAR 0 1
39097: PPUSH
39098: CALL_OW 321
39102: PUSH
39103: LD_INT 2
39105: EQUAL
39106: ST_TO_ADDR
39107: GO 39176
39109: LD_INT 18
39111: DOUBLE
39112: EQUAL
39113: IFTRUE 39117
39115: GO 39142
39117: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
39118: LD_ADDR_VAR 0 3
39122: PUSH
39123: LD_INT 40
39125: PPUSH
39126: LD_VAR 0 1
39130: PPUSH
39131: CALL_OW 321
39135: PUSH
39136: LD_INT 2
39138: EQUAL
39139: ST_TO_ADDR
39140: GO 39176
39142: LD_INT 27
39144: DOUBLE
39145: EQUAL
39146: IFTRUE 39150
39148: GO 39175
39150: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
39151: LD_ADDR_VAR 0 3
39155: PUSH
39156: LD_INT 35
39158: PPUSH
39159: LD_VAR 0 1
39163: PPUSH
39164: CALL_OW 321
39168: PUSH
39169: LD_INT 2
39171: EQUAL
39172: ST_TO_ADDR
39173: GO 39176
39175: POP
// end ;
39176: LD_VAR 0 3
39180: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
39181: LD_INT 0
39183: PPUSH
39184: PPUSH
39185: PPUSH
39186: PPUSH
39187: PPUSH
39188: PPUSH
39189: PPUSH
39190: PPUSH
39191: PPUSH
39192: PPUSH
39193: PPUSH
// result := false ;
39194: LD_ADDR_VAR 0 6
39198: PUSH
39199: LD_INT 0
39201: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
39202: LD_VAR 0 1
39206: NOT
39207: PUSH
39208: LD_VAR 0 1
39212: PPUSH
39213: CALL_OW 266
39217: PUSH
39218: LD_INT 0
39220: PUSH
39221: LD_INT 1
39223: PUSH
39224: EMPTY
39225: LIST
39226: LIST
39227: IN
39228: NOT
39229: OR
39230: PUSH
39231: LD_VAR 0 2
39235: NOT
39236: OR
39237: PUSH
39238: LD_VAR 0 5
39242: PUSH
39243: LD_INT 0
39245: PUSH
39246: LD_INT 1
39248: PUSH
39249: LD_INT 2
39251: PUSH
39252: LD_INT 3
39254: PUSH
39255: LD_INT 4
39257: PUSH
39258: LD_INT 5
39260: PUSH
39261: EMPTY
39262: LIST
39263: LIST
39264: LIST
39265: LIST
39266: LIST
39267: LIST
39268: IN
39269: NOT
39270: OR
39271: PUSH
39272: LD_VAR 0 3
39276: PPUSH
39277: LD_VAR 0 4
39281: PPUSH
39282: CALL_OW 488
39286: NOT
39287: OR
39288: IFFALSE 39292
// exit ;
39290: GO 40028
// side := GetSide ( depot ) ;
39292: LD_ADDR_VAR 0 9
39296: PUSH
39297: LD_VAR 0 1
39301: PPUSH
39302: CALL_OW 255
39306: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
39307: LD_VAR 0 9
39311: PPUSH
39312: LD_VAR 0 2
39316: PPUSH
39317: CALL 38805 0 2
39321: NOT
39322: IFFALSE 39326
// exit ;
39324: GO 40028
// pom := GetBase ( depot ) ;
39326: LD_ADDR_VAR 0 10
39330: PUSH
39331: LD_VAR 0 1
39335: PPUSH
39336: CALL_OW 274
39340: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
39341: LD_ADDR_VAR 0 11
39345: PUSH
39346: LD_VAR 0 2
39350: PPUSH
39351: LD_VAR 0 1
39355: PPUSH
39356: CALL_OW 248
39360: PPUSH
39361: CALL_OW 450
39365: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
39366: LD_VAR 0 10
39370: PPUSH
39371: LD_INT 1
39373: PPUSH
39374: CALL_OW 275
39378: PUSH
39379: LD_VAR 0 11
39383: PUSH
39384: LD_INT 1
39386: ARRAY
39387: GREATEREQUAL
39388: PUSH
39389: LD_VAR 0 10
39393: PPUSH
39394: LD_INT 2
39396: PPUSH
39397: CALL_OW 275
39401: PUSH
39402: LD_VAR 0 11
39406: PUSH
39407: LD_INT 2
39409: ARRAY
39410: GREATEREQUAL
39411: AND
39412: PUSH
39413: LD_VAR 0 10
39417: PPUSH
39418: LD_INT 3
39420: PPUSH
39421: CALL_OW 275
39425: PUSH
39426: LD_VAR 0 11
39430: PUSH
39431: LD_INT 3
39433: ARRAY
39434: GREATEREQUAL
39435: AND
39436: NOT
39437: IFFALSE 39441
// exit ;
39439: GO 40028
// if GetBType ( depot ) = b_depot then
39441: LD_VAR 0 1
39445: PPUSH
39446: CALL_OW 266
39450: PUSH
39451: LD_INT 0
39453: EQUAL
39454: IFFALSE 39466
// dist := 28 else
39456: LD_ADDR_VAR 0 14
39460: PUSH
39461: LD_INT 28
39463: ST_TO_ADDR
39464: GO 39474
// dist := 36 ;
39466: LD_ADDR_VAR 0 14
39470: PUSH
39471: LD_INT 36
39473: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
39474: LD_VAR 0 1
39478: PPUSH
39479: LD_VAR 0 3
39483: PPUSH
39484: LD_VAR 0 4
39488: PPUSH
39489: CALL_OW 297
39493: PUSH
39494: LD_VAR 0 14
39498: GREATER
39499: IFFALSE 39503
// exit ;
39501: GO 40028
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
39503: LD_ADDR_VAR 0 12
39507: PUSH
39508: LD_VAR 0 2
39512: PPUSH
39513: LD_VAR 0 3
39517: PPUSH
39518: LD_VAR 0 4
39522: PPUSH
39523: LD_VAR 0 5
39527: PPUSH
39528: LD_VAR 0 1
39532: PPUSH
39533: CALL_OW 248
39537: PPUSH
39538: LD_INT 0
39540: PPUSH
39541: CALL 40033 0 6
39545: ST_TO_ADDR
// if not hexes then
39546: LD_VAR 0 12
39550: NOT
39551: IFFALSE 39555
// exit ;
39553: GO 40028
// hex := GetHexInfo ( x , y ) ;
39555: LD_ADDR_VAR 0 15
39559: PUSH
39560: LD_VAR 0 3
39564: PPUSH
39565: LD_VAR 0 4
39569: PPUSH
39570: CALL_OW 546
39574: ST_TO_ADDR
// if hex [ 1 ] then
39575: LD_VAR 0 15
39579: PUSH
39580: LD_INT 1
39582: ARRAY
39583: IFFALSE 39587
// exit ;
39585: GO 40028
// height := hex [ 2 ] ;
39587: LD_ADDR_VAR 0 13
39591: PUSH
39592: LD_VAR 0 15
39596: PUSH
39597: LD_INT 2
39599: ARRAY
39600: ST_TO_ADDR
// for i = 1 to hexes do
39601: LD_ADDR_VAR 0 7
39605: PUSH
39606: DOUBLE
39607: LD_INT 1
39609: DEC
39610: ST_TO_ADDR
39611: LD_VAR 0 12
39615: PUSH
39616: FOR_TO
39617: IFFALSE 39947
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
39619: LD_VAR 0 12
39623: PUSH
39624: LD_VAR 0 7
39628: ARRAY
39629: PUSH
39630: LD_INT 1
39632: ARRAY
39633: PPUSH
39634: LD_VAR 0 12
39638: PUSH
39639: LD_VAR 0 7
39643: ARRAY
39644: PUSH
39645: LD_INT 2
39647: ARRAY
39648: PPUSH
39649: CALL_OW 488
39653: NOT
39654: PUSH
39655: LD_VAR 0 12
39659: PUSH
39660: LD_VAR 0 7
39664: ARRAY
39665: PUSH
39666: LD_INT 1
39668: ARRAY
39669: PPUSH
39670: LD_VAR 0 12
39674: PUSH
39675: LD_VAR 0 7
39679: ARRAY
39680: PUSH
39681: LD_INT 2
39683: ARRAY
39684: PPUSH
39685: CALL_OW 428
39689: PUSH
39690: LD_INT 0
39692: GREATER
39693: OR
39694: PUSH
39695: LD_VAR 0 12
39699: PUSH
39700: LD_VAR 0 7
39704: ARRAY
39705: PUSH
39706: LD_INT 1
39708: ARRAY
39709: PPUSH
39710: LD_VAR 0 12
39714: PUSH
39715: LD_VAR 0 7
39719: ARRAY
39720: PUSH
39721: LD_INT 2
39723: ARRAY
39724: PPUSH
39725: CALL_OW 351
39729: OR
39730: IFFALSE 39736
// exit ;
39732: POP
39733: POP
39734: GO 40028
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39736: LD_ADDR_VAR 0 8
39740: PUSH
39741: LD_VAR 0 12
39745: PUSH
39746: LD_VAR 0 7
39750: ARRAY
39751: PUSH
39752: LD_INT 1
39754: ARRAY
39755: PPUSH
39756: LD_VAR 0 12
39760: PUSH
39761: LD_VAR 0 7
39765: ARRAY
39766: PUSH
39767: LD_INT 2
39769: ARRAY
39770: PPUSH
39771: CALL_OW 546
39775: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
39776: LD_VAR 0 8
39780: PUSH
39781: LD_INT 1
39783: ARRAY
39784: PUSH
39785: LD_VAR 0 8
39789: PUSH
39790: LD_INT 2
39792: ARRAY
39793: PUSH
39794: LD_VAR 0 13
39798: PUSH
39799: LD_INT 2
39801: PLUS
39802: GREATER
39803: OR
39804: PUSH
39805: LD_VAR 0 8
39809: PUSH
39810: LD_INT 2
39812: ARRAY
39813: PUSH
39814: LD_VAR 0 13
39818: PUSH
39819: LD_INT 2
39821: MINUS
39822: LESS
39823: OR
39824: PUSH
39825: LD_VAR 0 8
39829: PUSH
39830: LD_INT 3
39832: ARRAY
39833: PUSH
39834: LD_INT 0
39836: PUSH
39837: LD_INT 8
39839: PUSH
39840: LD_INT 9
39842: PUSH
39843: LD_INT 10
39845: PUSH
39846: LD_INT 11
39848: PUSH
39849: LD_INT 12
39851: PUSH
39852: LD_INT 13
39854: PUSH
39855: LD_INT 16
39857: PUSH
39858: LD_INT 17
39860: PUSH
39861: LD_INT 18
39863: PUSH
39864: LD_INT 19
39866: PUSH
39867: LD_INT 20
39869: PUSH
39870: LD_INT 21
39872: PUSH
39873: EMPTY
39874: LIST
39875: LIST
39876: LIST
39877: LIST
39878: LIST
39879: LIST
39880: LIST
39881: LIST
39882: LIST
39883: LIST
39884: LIST
39885: LIST
39886: LIST
39887: IN
39888: NOT
39889: OR
39890: PUSH
39891: LD_VAR 0 8
39895: PUSH
39896: LD_INT 5
39898: ARRAY
39899: NOT
39900: OR
39901: PUSH
39902: LD_VAR 0 8
39906: PUSH
39907: LD_INT 6
39909: ARRAY
39910: PUSH
39911: LD_INT 1
39913: PUSH
39914: LD_INT 2
39916: PUSH
39917: LD_INT 7
39919: PUSH
39920: LD_INT 9
39922: PUSH
39923: LD_INT 10
39925: PUSH
39926: LD_INT 11
39928: PUSH
39929: EMPTY
39930: LIST
39931: LIST
39932: LIST
39933: LIST
39934: LIST
39935: LIST
39936: IN
39937: NOT
39938: OR
39939: IFFALSE 39945
// exit ;
39941: POP
39942: POP
39943: GO 40028
// end ;
39945: GO 39616
39947: POP
39948: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
39949: LD_VAR 0 9
39953: PPUSH
39954: LD_VAR 0 3
39958: PPUSH
39959: LD_VAR 0 4
39963: PPUSH
39964: LD_INT 20
39966: PPUSH
39967: CALL 31980 0 4
39971: PUSH
39972: LD_INT 4
39974: ARRAY
39975: IFFALSE 39979
// exit ;
39977: GO 40028
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
39979: LD_VAR 0 2
39983: PUSH
39984: LD_INT 29
39986: PUSH
39987: LD_INT 30
39989: PUSH
39990: EMPTY
39991: LIST
39992: LIST
39993: IN
39994: PUSH
39995: LD_VAR 0 3
39999: PPUSH
40000: LD_VAR 0 4
40004: PPUSH
40005: LD_VAR 0 9
40009: PPUSH
40010: CALL_OW 440
40014: NOT
40015: AND
40016: IFFALSE 40020
// exit ;
40018: GO 40028
// result := true ;
40020: LD_ADDR_VAR 0 6
40024: PUSH
40025: LD_INT 1
40027: ST_TO_ADDR
// end ;
40028: LD_VAR 0 6
40032: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
40033: LD_INT 0
40035: PPUSH
40036: PPUSH
40037: PPUSH
40038: PPUSH
40039: PPUSH
40040: PPUSH
40041: PPUSH
40042: PPUSH
40043: PPUSH
40044: PPUSH
40045: PPUSH
40046: PPUSH
40047: PPUSH
40048: PPUSH
40049: PPUSH
40050: PPUSH
40051: PPUSH
40052: PPUSH
40053: PPUSH
40054: PPUSH
40055: PPUSH
40056: PPUSH
40057: PPUSH
40058: PPUSH
40059: PPUSH
40060: PPUSH
40061: PPUSH
40062: PPUSH
40063: PPUSH
40064: PPUSH
40065: PPUSH
40066: PPUSH
40067: PPUSH
40068: PPUSH
40069: PPUSH
40070: PPUSH
40071: PPUSH
40072: PPUSH
40073: PPUSH
40074: PPUSH
40075: PPUSH
40076: PPUSH
40077: PPUSH
40078: PPUSH
40079: PPUSH
40080: PPUSH
40081: PPUSH
40082: PPUSH
40083: PPUSH
40084: PPUSH
40085: PPUSH
40086: PPUSH
40087: PPUSH
40088: PPUSH
40089: PPUSH
40090: PPUSH
40091: PPUSH
40092: PPUSH
// result = [ ] ;
40093: LD_ADDR_VAR 0 7
40097: PUSH
40098: EMPTY
40099: ST_TO_ADDR
// temp_list = [ ] ;
40100: LD_ADDR_VAR 0 9
40104: PUSH
40105: EMPTY
40106: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
40107: LD_VAR 0 4
40111: PUSH
40112: LD_INT 0
40114: PUSH
40115: LD_INT 1
40117: PUSH
40118: LD_INT 2
40120: PUSH
40121: LD_INT 3
40123: PUSH
40124: LD_INT 4
40126: PUSH
40127: LD_INT 5
40129: PUSH
40130: EMPTY
40131: LIST
40132: LIST
40133: LIST
40134: LIST
40135: LIST
40136: LIST
40137: IN
40138: NOT
40139: PUSH
40140: LD_VAR 0 1
40144: PUSH
40145: LD_INT 0
40147: PUSH
40148: LD_INT 1
40150: PUSH
40151: EMPTY
40152: LIST
40153: LIST
40154: IN
40155: PUSH
40156: LD_VAR 0 5
40160: PUSH
40161: LD_INT 1
40163: PUSH
40164: LD_INT 2
40166: PUSH
40167: LD_INT 3
40169: PUSH
40170: EMPTY
40171: LIST
40172: LIST
40173: LIST
40174: IN
40175: NOT
40176: AND
40177: OR
40178: IFFALSE 40182
// exit ;
40180: GO 58573
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
40182: LD_VAR 0 1
40186: PUSH
40187: LD_INT 6
40189: PUSH
40190: LD_INT 7
40192: PUSH
40193: LD_INT 8
40195: PUSH
40196: LD_INT 13
40198: PUSH
40199: LD_INT 12
40201: PUSH
40202: LD_INT 15
40204: PUSH
40205: LD_INT 11
40207: PUSH
40208: LD_INT 14
40210: PUSH
40211: LD_INT 10
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: LIST
40218: LIST
40219: LIST
40220: LIST
40221: LIST
40222: LIST
40223: LIST
40224: IN
40225: IFFALSE 40235
// btype = b_lab ;
40227: LD_ADDR_VAR 0 1
40231: PUSH
40232: LD_INT 6
40234: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
40235: LD_VAR 0 6
40239: PUSH
40240: LD_INT 0
40242: PUSH
40243: LD_INT 1
40245: PUSH
40246: LD_INT 2
40248: PUSH
40249: EMPTY
40250: LIST
40251: LIST
40252: LIST
40253: IN
40254: NOT
40255: PUSH
40256: LD_VAR 0 1
40260: PUSH
40261: LD_INT 0
40263: PUSH
40264: LD_INT 1
40266: PUSH
40267: LD_INT 2
40269: PUSH
40270: LD_INT 3
40272: PUSH
40273: LD_INT 6
40275: PUSH
40276: LD_INT 36
40278: PUSH
40279: LD_INT 4
40281: PUSH
40282: LD_INT 5
40284: PUSH
40285: LD_INT 31
40287: PUSH
40288: LD_INT 32
40290: PUSH
40291: LD_INT 33
40293: PUSH
40294: EMPTY
40295: LIST
40296: LIST
40297: LIST
40298: LIST
40299: LIST
40300: LIST
40301: LIST
40302: LIST
40303: LIST
40304: LIST
40305: LIST
40306: IN
40307: NOT
40308: PUSH
40309: LD_VAR 0 6
40313: PUSH
40314: LD_INT 1
40316: EQUAL
40317: AND
40318: OR
40319: PUSH
40320: LD_VAR 0 1
40324: PUSH
40325: LD_INT 2
40327: PUSH
40328: LD_INT 3
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: IN
40335: NOT
40336: PUSH
40337: LD_VAR 0 6
40341: PUSH
40342: LD_INT 2
40344: EQUAL
40345: AND
40346: OR
40347: IFFALSE 40357
// mode = 0 ;
40349: LD_ADDR_VAR 0 6
40353: PUSH
40354: LD_INT 0
40356: ST_TO_ADDR
// case mode of 0 :
40357: LD_VAR 0 6
40361: PUSH
40362: LD_INT 0
40364: DOUBLE
40365: EQUAL
40366: IFTRUE 40370
40368: GO 51823
40370: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40371: LD_ADDR_VAR 0 11
40375: PUSH
40376: LD_INT 0
40378: PUSH
40379: LD_INT 0
40381: PUSH
40382: EMPTY
40383: LIST
40384: LIST
40385: PUSH
40386: LD_INT 0
40388: PUSH
40389: LD_INT 1
40391: NEG
40392: PUSH
40393: EMPTY
40394: LIST
40395: LIST
40396: PUSH
40397: LD_INT 1
40399: PUSH
40400: LD_INT 0
40402: PUSH
40403: EMPTY
40404: LIST
40405: LIST
40406: PUSH
40407: LD_INT 1
40409: PUSH
40410: LD_INT 1
40412: PUSH
40413: EMPTY
40414: LIST
40415: LIST
40416: PUSH
40417: LD_INT 0
40419: PUSH
40420: LD_INT 1
40422: PUSH
40423: EMPTY
40424: LIST
40425: LIST
40426: PUSH
40427: LD_INT 1
40429: NEG
40430: PUSH
40431: LD_INT 0
40433: PUSH
40434: EMPTY
40435: LIST
40436: LIST
40437: PUSH
40438: LD_INT 1
40440: NEG
40441: PUSH
40442: LD_INT 1
40444: NEG
40445: PUSH
40446: EMPTY
40447: LIST
40448: LIST
40449: PUSH
40450: LD_INT 1
40452: NEG
40453: PUSH
40454: LD_INT 2
40456: NEG
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: PUSH
40462: LD_INT 0
40464: PUSH
40465: LD_INT 2
40467: NEG
40468: PUSH
40469: EMPTY
40470: LIST
40471: LIST
40472: PUSH
40473: LD_INT 1
40475: PUSH
40476: LD_INT 1
40478: NEG
40479: PUSH
40480: EMPTY
40481: LIST
40482: LIST
40483: PUSH
40484: LD_INT 1
40486: PUSH
40487: LD_INT 2
40489: PUSH
40490: EMPTY
40491: LIST
40492: LIST
40493: PUSH
40494: LD_INT 0
40496: PUSH
40497: LD_INT 2
40499: PUSH
40500: EMPTY
40501: LIST
40502: LIST
40503: PUSH
40504: LD_INT 1
40506: NEG
40507: PUSH
40508: LD_INT 1
40510: PUSH
40511: EMPTY
40512: LIST
40513: LIST
40514: PUSH
40515: LD_INT 1
40517: PUSH
40518: LD_INT 3
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: PUSH
40525: LD_INT 0
40527: PUSH
40528: LD_INT 3
40530: PUSH
40531: EMPTY
40532: LIST
40533: LIST
40534: PUSH
40535: LD_INT 1
40537: NEG
40538: PUSH
40539: LD_INT 2
40541: PUSH
40542: EMPTY
40543: LIST
40544: LIST
40545: PUSH
40546: EMPTY
40547: LIST
40548: LIST
40549: LIST
40550: LIST
40551: LIST
40552: LIST
40553: LIST
40554: LIST
40555: LIST
40556: LIST
40557: LIST
40558: LIST
40559: LIST
40560: LIST
40561: LIST
40562: LIST
40563: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40564: LD_ADDR_VAR 0 12
40568: PUSH
40569: LD_INT 0
40571: PUSH
40572: LD_INT 0
40574: PUSH
40575: EMPTY
40576: LIST
40577: LIST
40578: PUSH
40579: LD_INT 0
40581: PUSH
40582: LD_INT 1
40584: NEG
40585: PUSH
40586: EMPTY
40587: LIST
40588: LIST
40589: PUSH
40590: LD_INT 1
40592: PUSH
40593: LD_INT 0
40595: PUSH
40596: EMPTY
40597: LIST
40598: LIST
40599: PUSH
40600: LD_INT 1
40602: PUSH
40603: LD_INT 1
40605: PUSH
40606: EMPTY
40607: LIST
40608: LIST
40609: PUSH
40610: LD_INT 0
40612: PUSH
40613: LD_INT 1
40615: PUSH
40616: EMPTY
40617: LIST
40618: LIST
40619: PUSH
40620: LD_INT 1
40622: NEG
40623: PUSH
40624: LD_INT 0
40626: PUSH
40627: EMPTY
40628: LIST
40629: LIST
40630: PUSH
40631: LD_INT 1
40633: NEG
40634: PUSH
40635: LD_INT 1
40637: NEG
40638: PUSH
40639: EMPTY
40640: LIST
40641: LIST
40642: PUSH
40643: LD_INT 1
40645: PUSH
40646: LD_INT 1
40648: NEG
40649: PUSH
40650: EMPTY
40651: LIST
40652: LIST
40653: PUSH
40654: LD_INT 2
40656: PUSH
40657: LD_INT 0
40659: PUSH
40660: EMPTY
40661: LIST
40662: LIST
40663: PUSH
40664: LD_INT 2
40666: PUSH
40667: LD_INT 1
40669: PUSH
40670: EMPTY
40671: LIST
40672: LIST
40673: PUSH
40674: LD_INT 1
40676: NEG
40677: PUSH
40678: LD_INT 1
40680: PUSH
40681: EMPTY
40682: LIST
40683: LIST
40684: PUSH
40685: LD_INT 2
40687: NEG
40688: PUSH
40689: LD_INT 0
40691: PUSH
40692: EMPTY
40693: LIST
40694: LIST
40695: PUSH
40696: LD_INT 2
40698: NEG
40699: PUSH
40700: LD_INT 1
40702: NEG
40703: PUSH
40704: EMPTY
40705: LIST
40706: LIST
40707: PUSH
40708: LD_INT 2
40710: NEG
40711: PUSH
40712: LD_INT 1
40714: PUSH
40715: EMPTY
40716: LIST
40717: LIST
40718: PUSH
40719: LD_INT 3
40721: NEG
40722: PUSH
40723: LD_INT 0
40725: PUSH
40726: EMPTY
40727: LIST
40728: LIST
40729: PUSH
40730: LD_INT 3
40732: NEG
40733: PUSH
40734: LD_INT 1
40736: NEG
40737: PUSH
40738: EMPTY
40739: LIST
40740: LIST
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: LIST
40746: LIST
40747: LIST
40748: LIST
40749: LIST
40750: LIST
40751: LIST
40752: LIST
40753: LIST
40754: LIST
40755: LIST
40756: LIST
40757: LIST
40758: LIST
40759: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40760: LD_ADDR_VAR 0 13
40764: PUSH
40765: LD_INT 0
40767: PUSH
40768: LD_INT 0
40770: PUSH
40771: EMPTY
40772: LIST
40773: LIST
40774: PUSH
40775: LD_INT 0
40777: PUSH
40778: LD_INT 1
40780: NEG
40781: PUSH
40782: EMPTY
40783: LIST
40784: LIST
40785: PUSH
40786: LD_INT 1
40788: PUSH
40789: LD_INT 0
40791: PUSH
40792: EMPTY
40793: LIST
40794: LIST
40795: PUSH
40796: LD_INT 1
40798: PUSH
40799: LD_INT 1
40801: PUSH
40802: EMPTY
40803: LIST
40804: LIST
40805: PUSH
40806: LD_INT 0
40808: PUSH
40809: LD_INT 1
40811: PUSH
40812: EMPTY
40813: LIST
40814: LIST
40815: PUSH
40816: LD_INT 1
40818: NEG
40819: PUSH
40820: LD_INT 0
40822: PUSH
40823: EMPTY
40824: LIST
40825: LIST
40826: PUSH
40827: LD_INT 1
40829: NEG
40830: PUSH
40831: LD_INT 1
40833: NEG
40834: PUSH
40835: EMPTY
40836: LIST
40837: LIST
40838: PUSH
40839: LD_INT 1
40841: NEG
40842: PUSH
40843: LD_INT 2
40845: NEG
40846: PUSH
40847: EMPTY
40848: LIST
40849: LIST
40850: PUSH
40851: LD_INT 2
40853: PUSH
40854: LD_INT 1
40856: PUSH
40857: EMPTY
40858: LIST
40859: LIST
40860: PUSH
40861: LD_INT 2
40863: PUSH
40864: LD_INT 2
40866: PUSH
40867: EMPTY
40868: LIST
40869: LIST
40870: PUSH
40871: LD_INT 1
40873: PUSH
40874: LD_INT 2
40876: PUSH
40877: EMPTY
40878: LIST
40879: LIST
40880: PUSH
40881: LD_INT 2
40883: NEG
40884: PUSH
40885: LD_INT 1
40887: NEG
40888: PUSH
40889: EMPTY
40890: LIST
40891: LIST
40892: PUSH
40893: LD_INT 2
40895: NEG
40896: PUSH
40897: LD_INT 2
40899: NEG
40900: PUSH
40901: EMPTY
40902: LIST
40903: LIST
40904: PUSH
40905: LD_INT 2
40907: NEG
40908: PUSH
40909: LD_INT 3
40911: NEG
40912: PUSH
40913: EMPTY
40914: LIST
40915: LIST
40916: PUSH
40917: LD_INT 3
40919: NEG
40920: PUSH
40921: LD_INT 2
40923: NEG
40924: PUSH
40925: EMPTY
40926: LIST
40927: LIST
40928: PUSH
40929: LD_INT 3
40931: NEG
40932: PUSH
40933: LD_INT 3
40935: NEG
40936: PUSH
40937: EMPTY
40938: LIST
40939: LIST
40940: PUSH
40941: EMPTY
40942: LIST
40943: LIST
40944: LIST
40945: LIST
40946: LIST
40947: LIST
40948: LIST
40949: LIST
40950: LIST
40951: LIST
40952: LIST
40953: LIST
40954: LIST
40955: LIST
40956: LIST
40957: LIST
40958: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40959: LD_ADDR_VAR 0 14
40963: PUSH
40964: LD_INT 0
40966: PUSH
40967: LD_INT 0
40969: PUSH
40970: EMPTY
40971: LIST
40972: LIST
40973: PUSH
40974: LD_INT 0
40976: PUSH
40977: LD_INT 1
40979: NEG
40980: PUSH
40981: EMPTY
40982: LIST
40983: LIST
40984: PUSH
40985: LD_INT 1
40987: PUSH
40988: LD_INT 0
40990: PUSH
40991: EMPTY
40992: LIST
40993: LIST
40994: PUSH
40995: LD_INT 1
40997: PUSH
40998: LD_INT 1
41000: PUSH
41001: EMPTY
41002: LIST
41003: LIST
41004: PUSH
41005: LD_INT 0
41007: PUSH
41008: LD_INT 1
41010: PUSH
41011: EMPTY
41012: LIST
41013: LIST
41014: PUSH
41015: LD_INT 1
41017: NEG
41018: PUSH
41019: LD_INT 0
41021: PUSH
41022: EMPTY
41023: LIST
41024: LIST
41025: PUSH
41026: LD_INT 1
41028: NEG
41029: PUSH
41030: LD_INT 1
41032: NEG
41033: PUSH
41034: EMPTY
41035: LIST
41036: LIST
41037: PUSH
41038: LD_INT 1
41040: NEG
41041: PUSH
41042: LD_INT 2
41044: NEG
41045: PUSH
41046: EMPTY
41047: LIST
41048: LIST
41049: PUSH
41050: LD_INT 0
41052: PUSH
41053: LD_INT 2
41055: NEG
41056: PUSH
41057: EMPTY
41058: LIST
41059: LIST
41060: PUSH
41061: LD_INT 1
41063: PUSH
41064: LD_INT 1
41066: NEG
41067: PUSH
41068: EMPTY
41069: LIST
41070: LIST
41071: PUSH
41072: LD_INT 1
41074: PUSH
41075: LD_INT 2
41077: PUSH
41078: EMPTY
41079: LIST
41080: LIST
41081: PUSH
41082: LD_INT 0
41084: PUSH
41085: LD_INT 2
41087: PUSH
41088: EMPTY
41089: LIST
41090: LIST
41091: PUSH
41092: LD_INT 1
41094: NEG
41095: PUSH
41096: LD_INT 1
41098: PUSH
41099: EMPTY
41100: LIST
41101: LIST
41102: PUSH
41103: LD_INT 1
41105: NEG
41106: PUSH
41107: LD_INT 3
41109: NEG
41110: PUSH
41111: EMPTY
41112: LIST
41113: LIST
41114: PUSH
41115: LD_INT 0
41117: PUSH
41118: LD_INT 3
41120: NEG
41121: PUSH
41122: EMPTY
41123: LIST
41124: LIST
41125: PUSH
41126: LD_INT 1
41128: PUSH
41129: LD_INT 2
41131: NEG
41132: PUSH
41133: EMPTY
41134: LIST
41135: LIST
41136: PUSH
41137: EMPTY
41138: LIST
41139: LIST
41140: LIST
41141: LIST
41142: LIST
41143: LIST
41144: LIST
41145: LIST
41146: LIST
41147: LIST
41148: LIST
41149: LIST
41150: LIST
41151: LIST
41152: LIST
41153: LIST
41154: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41155: LD_ADDR_VAR 0 15
41159: PUSH
41160: LD_INT 0
41162: PUSH
41163: LD_INT 0
41165: PUSH
41166: EMPTY
41167: LIST
41168: LIST
41169: PUSH
41170: LD_INT 0
41172: PUSH
41173: LD_INT 1
41175: NEG
41176: PUSH
41177: EMPTY
41178: LIST
41179: LIST
41180: PUSH
41181: LD_INT 1
41183: PUSH
41184: LD_INT 0
41186: PUSH
41187: EMPTY
41188: LIST
41189: LIST
41190: PUSH
41191: LD_INT 1
41193: PUSH
41194: LD_INT 1
41196: PUSH
41197: EMPTY
41198: LIST
41199: LIST
41200: PUSH
41201: LD_INT 0
41203: PUSH
41204: LD_INT 1
41206: PUSH
41207: EMPTY
41208: LIST
41209: LIST
41210: PUSH
41211: LD_INT 1
41213: NEG
41214: PUSH
41215: LD_INT 0
41217: PUSH
41218: EMPTY
41219: LIST
41220: LIST
41221: PUSH
41222: LD_INT 1
41224: NEG
41225: PUSH
41226: LD_INT 1
41228: NEG
41229: PUSH
41230: EMPTY
41231: LIST
41232: LIST
41233: PUSH
41234: LD_INT 1
41236: PUSH
41237: LD_INT 1
41239: NEG
41240: PUSH
41241: EMPTY
41242: LIST
41243: LIST
41244: PUSH
41245: LD_INT 2
41247: PUSH
41248: LD_INT 0
41250: PUSH
41251: EMPTY
41252: LIST
41253: LIST
41254: PUSH
41255: LD_INT 2
41257: PUSH
41258: LD_INT 1
41260: PUSH
41261: EMPTY
41262: LIST
41263: LIST
41264: PUSH
41265: LD_INT 1
41267: NEG
41268: PUSH
41269: LD_INT 1
41271: PUSH
41272: EMPTY
41273: LIST
41274: LIST
41275: PUSH
41276: LD_INT 2
41278: NEG
41279: PUSH
41280: LD_INT 0
41282: PUSH
41283: EMPTY
41284: LIST
41285: LIST
41286: PUSH
41287: LD_INT 2
41289: NEG
41290: PUSH
41291: LD_INT 1
41293: NEG
41294: PUSH
41295: EMPTY
41296: LIST
41297: LIST
41298: PUSH
41299: LD_INT 2
41301: PUSH
41302: LD_INT 1
41304: NEG
41305: PUSH
41306: EMPTY
41307: LIST
41308: LIST
41309: PUSH
41310: LD_INT 3
41312: PUSH
41313: LD_INT 0
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: PUSH
41320: LD_INT 3
41322: PUSH
41323: LD_INT 1
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: EMPTY
41331: LIST
41332: LIST
41333: LIST
41334: LIST
41335: LIST
41336: LIST
41337: LIST
41338: LIST
41339: LIST
41340: LIST
41341: LIST
41342: LIST
41343: LIST
41344: LIST
41345: LIST
41346: LIST
41347: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41348: LD_ADDR_VAR 0 16
41352: PUSH
41353: LD_INT 0
41355: PUSH
41356: LD_INT 0
41358: PUSH
41359: EMPTY
41360: LIST
41361: LIST
41362: PUSH
41363: LD_INT 0
41365: PUSH
41366: LD_INT 1
41368: NEG
41369: PUSH
41370: EMPTY
41371: LIST
41372: LIST
41373: PUSH
41374: LD_INT 1
41376: PUSH
41377: LD_INT 0
41379: PUSH
41380: EMPTY
41381: LIST
41382: LIST
41383: PUSH
41384: LD_INT 1
41386: PUSH
41387: LD_INT 1
41389: PUSH
41390: EMPTY
41391: LIST
41392: LIST
41393: PUSH
41394: LD_INT 0
41396: PUSH
41397: LD_INT 1
41399: PUSH
41400: EMPTY
41401: LIST
41402: LIST
41403: PUSH
41404: LD_INT 1
41406: NEG
41407: PUSH
41408: LD_INT 0
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: PUSH
41415: LD_INT 1
41417: NEG
41418: PUSH
41419: LD_INT 1
41421: NEG
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: PUSH
41427: LD_INT 1
41429: NEG
41430: PUSH
41431: LD_INT 2
41433: NEG
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: PUSH
41439: LD_INT 2
41441: PUSH
41442: LD_INT 1
41444: PUSH
41445: EMPTY
41446: LIST
41447: LIST
41448: PUSH
41449: LD_INT 2
41451: PUSH
41452: LD_INT 2
41454: PUSH
41455: EMPTY
41456: LIST
41457: LIST
41458: PUSH
41459: LD_INT 1
41461: PUSH
41462: LD_INT 2
41464: PUSH
41465: EMPTY
41466: LIST
41467: LIST
41468: PUSH
41469: LD_INT 2
41471: NEG
41472: PUSH
41473: LD_INT 1
41475: NEG
41476: PUSH
41477: EMPTY
41478: LIST
41479: LIST
41480: PUSH
41481: LD_INT 2
41483: NEG
41484: PUSH
41485: LD_INT 2
41487: NEG
41488: PUSH
41489: EMPTY
41490: LIST
41491: LIST
41492: PUSH
41493: LD_INT 3
41495: PUSH
41496: LD_INT 2
41498: PUSH
41499: EMPTY
41500: LIST
41501: LIST
41502: PUSH
41503: LD_INT 3
41505: PUSH
41506: LD_INT 3
41508: PUSH
41509: EMPTY
41510: LIST
41511: LIST
41512: PUSH
41513: LD_INT 2
41515: PUSH
41516: LD_INT 3
41518: PUSH
41519: EMPTY
41520: LIST
41521: LIST
41522: PUSH
41523: EMPTY
41524: LIST
41525: LIST
41526: LIST
41527: LIST
41528: LIST
41529: LIST
41530: LIST
41531: LIST
41532: LIST
41533: LIST
41534: LIST
41535: LIST
41536: LIST
41537: LIST
41538: LIST
41539: LIST
41540: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41541: LD_ADDR_VAR 0 17
41545: PUSH
41546: LD_INT 0
41548: PUSH
41549: LD_INT 0
41551: PUSH
41552: EMPTY
41553: LIST
41554: LIST
41555: PUSH
41556: LD_INT 0
41558: PUSH
41559: LD_INT 1
41561: NEG
41562: PUSH
41563: EMPTY
41564: LIST
41565: LIST
41566: PUSH
41567: LD_INT 1
41569: PUSH
41570: LD_INT 0
41572: PUSH
41573: EMPTY
41574: LIST
41575: LIST
41576: PUSH
41577: LD_INT 1
41579: PUSH
41580: LD_INT 1
41582: PUSH
41583: EMPTY
41584: LIST
41585: LIST
41586: PUSH
41587: LD_INT 0
41589: PUSH
41590: LD_INT 1
41592: PUSH
41593: EMPTY
41594: LIST
41595: LIST
41596: PUSH
41597: LD_INT 1
41599: NEG
41600: PUSH
41601: LD_INT 0
41603: PUSH
41604: EMPTY
41605: LIST
41606: LIST
41607: PUSH
41608: LD_INT 1
41610: NEG
41611: PUSH
41612: LD_INT 1
41614: NEG
41615: PUSH
41616: EMPTY
41617: LIST
41618: LIST
41619: PUSH
41620: LD_INT 1
41622: NEG
41623: PUSH
41624: LD_INT 2
41626: NEG
41627: PUSH
41628: EMPTY
41629: LIST
41630: LIST
41631: PUSH
41632: LD_INT 0
41634: PUSH
41635: LD_INT 2
41637: NEG
41638: PUSH
41639: EMPTY
41640: LIST
41641: LIST
41642: PUSH
41643: LD_INT 1
41645: PUSH
41646: LD_INT 1
41648: NEG
41649: PUSH
41650: EMPTY
41651: LIST
41652: LIST
41653: PUSH
41654: LD_INT 2
41656: PUSH
41657: LD_INT 0
41659: PUSH
41660: EMPTY
41661: LIST
41662: LIST
41663: PUSH
41664: LD_INT 2
41666: PUSH
41667: LD_INT 1
41669: PUSH
41670: EMPTY
41671: LIST
41672: LIST
41673: PUSH
41674: LD_INT 2
41676: PUSH
41677: LD_INT 2
41679: PUSH
41680: EMPTY
41681: LIST
41682: LIST
41683: PUSH
41684: LD_INT 1
41686: PUSH
41687: LD_INT 2
41689: PUSH
41690: EMPTY
41691: LIST
41692: LIST
41693: PUSH
41694: LD_INT 0
41696: PUSH
41697: LD_INT 2
41699: PUSH
41700: EMPTY
41701: LIST
41702: LIST
41703: PUSH
41704: LD_INT 1
41706: NEG
41707: PUSH
41708: LD_INT 1
41710: PUSH
41711: EMPTY
41712: LIST
41713: LIST
41714: PUSH
41715: LD_INT 2
41717: NEG
41718: PUSH
41719: LD_INT 0
41721: PUSH
41722: EMPTY
41723: LIST
41724: LIST
41725: PUSH
41726: LD_INT 2
41728: NEG
41729: PUSH
41730: LD_INT 1
41732: NEG
41733: PUSH
41734: EMPTY
41735: LIST
41736: LIST
41737: PUSH
41738: LD_INT 2
41740: NEG
41741: PUSH
41742: LD_INT 2
41744: NEG
41745: PUSH
41746: EMPTY
41747: LIST
41748: LIST
41749: PUSH
41750: EMPTY
41751: LIST
41752: LIST
41753: LIST
41754: LIST
41755: LIST
41756: LIST
41757: LIST
41758: LIST
41759: LIST
41760: LIST
41761: LIST
41762: LIST
41763: LIST
41764: LIST
41765: LIST
41766: LIST
41767: LIST
41768: LIST
41769: LIST
41770: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41771: LD_ADDR_VAR 0 18
41775: PUSH
41776: LD_INT 0
41778: PUSH
41779: LD_INT 0
41781: PUSH
41782: EMPTY
41783: LIST
41784: LIST
41785: PUSH
41786: LD_INT 0
41788: PUSH
41789: LD_INT 1
41791: NEG
41792: PUSH
41793: EMPTY
41794: LIST
41795: LIST
41796: PUSH
41797: LD_INT 1
41799: PUSH
41800: LD_INT 0
41802: PUSH
41803: EMPTY
41804: LIST
41805: LIST
41806: PUSH
41807: LD_INT 1
41809: PUSH
41810: LD_INT 1
41812: PUSH
41813: EMPTY
41814: LIST
41815: LIST
41816: PUSH
41817: LD_INT 0
41819: PUSH
41820: LD_INT 1
41822: PUSH
41823: EMPTY
41824: LIST
41825: LIST
41826: PUSH
41827: LD_INT 1
41829: NEG
41830: PUSH
41831: LD_INT 0
41833: PUSH
41834: EMPTY
41835: LIST
41836: LIST
41837: PUSH
41838: LD_INT 1
41840: NEG
41841: PUSH
41842: LD_INT 1
41844: NEG
41845: PUSH
41846: EMPTY
41847: LIST
41848: LIST
41849: PUSH
41850: LD_INT 1
41852: NEG
41853: PUSH
41854: LD_INT 2
41856: NEG
41857: PUSH
41858: EMPTY
41859: LIST
41860: LIST
41861: PUSH
41862: LD_INT 0
41864: PUSH
41865: LD_INT 2
41867: NEG
41868: PUSH
41869: EMPTY
41870: LIST
41871: LIST
41872: PUSH
41873: LD_INT 1
41875: PUSH
41876: LD_INT 1
41878: NEG
41879: PUSH
41880: EMPTY
41881: LIST
41882: LIST
41883: PUSH
41884: LD_INT 2
41886: PUSH
41887: LD_INT 0
41889: PUSH
41890: EMPTY
41891: LIST
41892: LIST
41893: PUSH
41894: LD_INT 2
41896: PUSH
41897: LD_INT 1
41899: PUSH
41900: EMPTY
41901: LIST
41902: LIST
41903: PUSH
41904: LD_INT 2
41906: PUSH
41907: LD_INT 2
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: PUSH
41914: LD_INT 1
41916: PUSH
41917: LD_INT 2
41919: PUSH
41920: EMPTY
41921: LIST
41922: LIST
41923: PUSH
41924: LD_INT 0
41926: PUSH
41927: LD_INT 2
41929: PUSH
41930: EMPTY
41931: LIST
41932: LIST
41933: PUSH
41934: LD_INT 1
41936: NEG
41937: PUSH
41938: LD_INT 1
41940: PUSH
41941: EMPTY
41942: LIST
41943: LIST
41944: PUSH
41945: LD_INT 2
41947: NEG
41948: PUSH
41949: LD_INT 0
41951: PUSH
41952: EMPTY
41953: LIST
41954: LIST
41955: PUSH
41956: LD_INT 2
41958: NEG
41959: PUSH
41960: LD_INT 1
41962: NEG
41963: PUSH
41964: EMPTY
41965: LIST
41966: LIST
41967: PUSH
41968: LD_INT 2
41970: NEG
41971: PUSH
41972: LD_INT 2
41974: NEG
41975: PUSH
41976: EMPTY
41977: LIST
41978: LIST
41979: PUSH
41980: EMPTY
41981: LIST
41982: LIST
41983: LIST
41984: LIST
41985: LIST
41986: LIST
41987: LIST
41988: LIST
41989: LIST
41990: LIST
41991: LIST
41992: LIST
41993: LIST
41994: LIST
41995: LIST
41996: LIST
41997: LIST
41998: LIST
41999: LIST
42000: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42001: LD_ADDR_VAR 0 19
42005: PUSH
42006: LD_INT 0
42008: PUSH
42009: LD_INT 0
42011: PUSH
42012: EMPTY
42013: LIST
42014: LIST
42015: PUSH
42016: LD_INT 0
42018: PUSH
42019: LD_INT 1
42021: NEG
42022: PUSH
42023: EMPTY
42024: LIST
42025: LIST
42026: PUSH
42027: LD_INT 1
42029: PUSH
42030: LD_INT 0
42032: PUSH
42033: EMPTY
42034: LIST
42035: LIST
42036: PUSH
42037: LD_INT 1
42039: PUSH
42040: LD_INT 1
42042: PUSH
42043: EMPTY
42044: LIST
42045: LIST
42046: PUSH
42047: LD_INT 0
42049: PUSH
42050: LD_INT 1
42052: PUSH
42053: EMPTY
42054: LIST
42055: LIST
42056: PUSH
42057: LD_INT 1
42059: NEG
42060: PUSH
42061: LD_INT 0
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: PUSH
42068: LD_INT 1
42070: NEG
42071: PUSH
42072: LD_INT 1
42074: NEG
42075: PUSH
42076: EMPTY
42077: LIST
42078: LIST
42079: PUSH
42080: LD_INT 1
42082: NEG
42083: PUSH
42084: LD_INT 2
42086: NEG
42087: PUSH
42088: EMPTY
42089: LIST
42090: LIST
42091: PUSH
42092: LD_INT 0
42094: PUSH
42095: LD_INT 2
42097: NEG
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: PUSH
42103: LD_INT 1
42105: PUSH
42106: LD_INT 1
42108: NEG
42109: PUSH
42110: EMPTY
42111: LIST
42112: LIST
42113: PUSH
42114: LD_INT 2
42116: PUSH
42117: LD_INT 0
42119: PUSH
42120: EMPTY
42121: LIST
42122: LIST
42123: PUSH
42124: LD_INT 2
42126: PUSH
42127: LD_INT 1
42129: PUSH
42130: EMPTY
42131: LIST
42132: LIST
42133: PUSH
42134: LD_INT 2
42136: PUSH
42137: LD_INT 2
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: PUSH
42144: LD_INT 1
42146: PUSH
42147: LD_INT 2
42149: PUSH
42150: EMPTY
42151: LIST
42152: LIST
42153: PUSH
42154: LD_INT 0
42156: PUSH
42157: LD_INT 2
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: PUSH
42164: LD_INT 1
42166: NEG
42167: PUSH
42168: LD_INT 1
42170: PUSH
42171: EMPTY
42172: LIST
42173: LIST
42174: PUSH
42175: LD_INT 2
42177: NEG
42178: PUSH
42179: LD_INT 0
42181: PUSH
42182: EMPTY
42183: LIST
42184: LIST
42185: PUSH
42186: LD_INT 2
42188: NEG
42189: PUSH
42190: LD_INT 1
42192: NEG
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: PUSH
42198: LD_INT 2
42200: NEG
42201: PUSH
42202: LD_INT 2
42204: NEG
42205: PUSH
42206: EMPTY
42207: LIST
42208: LIST
42209: PUSH
42210: EMPTY
42211: LIST
42212: LIST
42213: LIST
42214: LIST
42215: LIST
42216: LIST
42217: LIST
42218: LIST
42219: LIST
42220: LIST
42221: LIST
42222: LIST
42223: LIST
42224: LIST
42225: LIST
42226: LIST
42227: LIST
42228: LIST
42229: LIST
42230: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42231: LD_ADDR_VAR 0 20
42235: PUSH
42236: LD_INT 0
42238: PUSH
42239: LD_INT 0
42241: PUSH
42242: EMPTY
42243: LIST
42244: LIST
42245: PUSH
42246: LD_INT 0
42248: PUSH
42249: LD_INT 1
42251: NEG
42252: PUSH
42253: EMPTY
42254: LIST
42255: LIST
42256: PUSH
42257: LD_INT 1
42259: PUSH
42260: LD_INT 0
42262: PUSH
42263: EMPTY
42264: LIST
42265: LIST
42266: PUSH
42267: LD_INT 1
42269: PUSH
42270: LD_INT 1
42272: PUSH
42273: EMPTY
42274: LIST
42275: LIST
42276: PUSH
42277: LD_INT 0
42279: PUSH
42280: LD_INT 1
42282: PUSH
42283: EMPTY
42284: LIST
42285: LIST
42286: PUSH
42287: LD_INT 1
42289: NEG
42290: PUSH
42291: LD_INT 0
42293: PUSH
42294: EMPTY
42295: LIST
42296: LIST
42297: PUSH
42298: LD_INT 1
42300: NEG
42301: PUSH
42302: LD_INT 1
42304: NEG
42305: PUSH
42306: EMPTY
42307: LIST
42308: LIST
42309: PUSH
42310: LD_INT 1
42312: NEG
42313: PUSH
42314: LD_INT 2
42316: NEG
42317: PUSH
42318: EMPTY
42319: LIST
42320: LIST
42321: PUSH
42322: LD_INT 0
42324: PUSH
42325: LD_INT 2
42327: NEG
42328: PUSH
42329: EMPTY
42330: LIST
42331: LIST
42332: PUSH
42333: LD_INT 1
42335: PUSH
42336: LD_INT 1
42338: NEG
42339: PUSH
42340: EMPTY
42341: LIST
42342: LIST
42343: PUSH
42344: LD_INT 2
42346: PUSH
42347: LD_INT 0
42349: PUSH
42350: EMPTY
42351: LIST
42352: LIST
42353: PUSH
42354: LD_INT 2
42356: PUSH
42357: LD_INT 1
42359: PUSH
42360: EMPTY
42361: LIST
42362: LIST
42363: PUSH
42364: LD_INT 2
42366: PUSH
42367: LD_INT 2
42369: PUSH
42370: EMPTY
42371: LIST
42372: LIST
42373: PUSH
42374: LD_INT 1
42376: PUSH
42377: LD_INT 2
42379: PUSH
42380: EMPTY
42381: LIST
42382: LIST
42383: PUSH
42384: LD_INT 0
42386: PUSH
42387: LD_INT 2
42389: PUSH
42390: EMPTY
42391: LIST
42392: LIST
42393: PUSH
42394: LD_INT 1
42396: NEG
42397: PUSH
42398: LD_INT 1
42400: PUSH
42401: EMPTY
42402: LIST
42403: LIST
42404: PUSH
42405: LD_INT 2
42407: NEG
42408: PUSH
42409: LD_INT 0
42411: PUSH
42412: EMPTY
42413: LIST
42414: LIST
42415: PUSH
42416: LD_INT 2
42418: NEG
42419: PUSH
42420: LD_INT 1
42422: NEG
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: PUSH
42428: LD_INT 2
42430: NEG
42431: PUSH
42432: LD_INT 2
42434: NEG
42435: PUSH
42436: EMPTY
42437: LIST
42438: LIST
42439: PUSH
42440: EMPTY
42441: LIST
42442: LIST
42443: LIST
42444: LIST
42445: LIST
42446: LIST
42447: LIST
42448: LIST
42449: LIST
42450: LIST
42451: LIST
42452: LIST
42453: LIST
42454: LIST
42455: LIST
42456: LIST
42457: LIST
42458: LIST
42459: LIST
42460: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42461: LD_ADDR_VAR 0 21
42465: PUSH
42466: LD_INT 0
42468: PUSH
42469: LD_INT 0
42471: PUSH
42472: EMPTY
42473: LIST
42474: LIST
42475: PUSH
42476: LD_INT 0
42478: PUSH
42479: LD_INT 1
42481: NEG
42482: PUSH
42483: EMPTY
42484: LIST
42485: LIST
42486: PUSH
42487: LD_INT 1
42489: PUSH
42490: LD_INT 0
42492: PUSH
42493: EMPTY
42494: LIST
42495: LIST
42496: PUSH
42497: LD_INT 1
42499: PUSH
42500: LD_INT 1
42502: PUSH
42503: EMPTY
42504: LIST
42505: LIST
42506: PUSH
42507: LD_INT 0
42509: PUSH
42510: LD_INT 1
42512: PUSH
42513: EMPTY
42514: LIST
42515: LIST
42516: PUSH
42517: LD_INT 1
42519: NEG
42520: PUSH
42521: LD_INT 0
42523: PUSH
42524: EMPTY
42525: LIST
42526: LIST
42527: PUSH
42528: LD_INT 1
42530: NEG
42531: PUSH
42532: LD_INT 1
42534: NEG
42535: PUSH
42536: EMPTY
42537: LIST
42538: LIST
42539: PUSH
42540: LD_INT 1
42542: NEG
42543: PUSH
42544: LD_INT 2
42546: NEG
42547: PUSH
42548: EMPTY
42549: LIST
42550: LIST
42551: PUSH
42552: LD_INT 0
42554: PUSH
42555: LD_INT 2
42557: NEG
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: PUSH
42563: LD_INT 1
42565: PUSH
42566: LD_INT 1
42568: NEG
42569: PUSH
42570: EMPTY
42571: LIST
42572: LIST
42573: PUSH
42574: LD_INT 2
42576: PUSH
42577: LD_INT 0
42579: PUSH
42580: EMPTY
42581: LIST
42582: LIST
42583: PUSH
42584: LD_INT 2
42586: PUSH
42587: LD_INT 1
42589: PUSH
42590: EMPTY
42591: LIST
42592: LIST
42593: PUSH
42594: LD_INT 2
42596: PUSH
42597: LD_INT 2
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: PUSH
42604: LD_INT 1
42606: PUSH
42607: LD_INT 2
42609: PUSH
42610: EMPTY
42611: LIST
42612: LIST
42613: PUSH
42614: LD_INT 0
42616: PUSH
42617: LD_INT 2
42619: PUSH
42620: EMPTY
42621: LIST
42622: LIST
42623: PUSH
42624: LD_INT 1
42626: NEG
42627: PUSH
42628: LD_INT 1
42630: PUSH
42631: EMPTY
42632: LIST
42633: LIST
42634: PUSH
42635: LD_INT 2
42637: NEG
42638: PUSH
42639: LD_INT 0
42641: PUSH
42642: EMPTY
42643: LIST
42644: LIST
42645: PUSH
42646: LD_INT 2
42648: NEG
42649: PUSH
42650: LD_INT 1
42652: NEG
42653: PUSH
42654: EMPTY
42655: LIST
42656: LIST
42657: PUSH
42658: LD_INT 2
42660: NEG
42661: PUSH
42662: LD_INT 2
42664: NEG
42665: PUSH
42666: EMPTY
42667: LIST
42668: LIST
42669: PUSH
42670: EMPTY
42671: LIST
42672: LIST
42673: LIST
42674: LIST
42675: LIST
42676: LIST
42677: LIST
42678: LIST
42679: LIST
42680: LIST
42681: LIST
42682: LIST
42683: LIST
42684: LIST
42685: LIST
42686: LIST
42687: LIST
42688: LIST
42689: LIST
42690: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42691: LD_ADDR_VAR 0 22
42695: PUSH
42696: LD_INT 0
42698: PUSH
42699: LD_INT 0
42701: PUSH
42702: EMPTY
42703: LIST
42704: LIST
42705: PUSH
42706: LD_INT 0
42708: PUSH
42709: LD_INT 1
42711: NEG
42712: PUSH
42713: EMPTY
42714: LIST
42715: LIST
42716: PUSH
42717: LD_INT 1
42719: PUSH
42720: LD_INT 0
42722: PUSH
42723: EMPTY
42724: LIST
42725: LIST
42726: PUSH
42727: LD_INT 1
42729: PUSH
42730: LD_INT 1
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: PUSH
42737: LD_INT 0
42739: PUSH
42740: LD_INT 1
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: PUSH
42747: LD_INT 1
42749: NEG
42750: PUSH
42751: LD_INT 0
42753: PUSH
42754: EMPTY
42755: LIST
42756: LIST
42757: PUSH
42758: LD_INT 1
42760: NEG
42761: PUSH
42762: LD_INT 1
42764: NEG
42765: PUSH
42766: EMPTY
42767: LIST
42768: LIST
42769: PUSH
42770: LD_INT 1
42772: NEG
42773: PUSH
42774: LD_INT 2
42776: NEG
42777: PUSH
42778: EMPTY
42779: LIST
42780: LIST
42781: PUSH
42782: LD_INT 0
42784: PUSH
42785: LD_INT 2
42787: NEG
42788: PUSH
42789: EMPTY
42790: LIST
42791: LIST
42792: PUSH
42793: LD_INT 1
42795: PUSH
42796: LD_INT 1
42798: NEG
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: PUSH
42804: LD_INT 2
42806: PUSH
42807: LD_INT 0
42809: PUSH
42810: EMPTY
42811: LIST
42812: LIST
42813: PUSH
42814: LD_INT 2
42816: PUSH
42817: LD_INT 1
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: PUSH
42824: LD_INT 2
42826: PUSH
42827: LD_INT 2
42829: PUSH
42830: EMPTY
42831: LIST
42832: LIST
42833: PUSH
42834: LD_INT 1
42836: PUSH
42837: LD_INT 2
42839: PUSH
42840: EMPTY
42841: LIST
42842: LIST
42843: PUSH
42844: LD_INT 0
42846: PUSH
42847: LD_INT 2
42849: PUSH
42850: EMPTY
42851: LIST
42852: LIST
42853: PUSH
42854: LD_INT 1
42856: NEG
42857: PUSH
42858: LD_INT 1
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: PUSH
42865: LD_INT 2
42867: NEG
42868: PUSH
42869: LD_INT 0
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: PUSH
42876: LD_INT 2
42878: NEG
42879: PUSH
42880: LD_INT 1
42882: NEG
42883: PUSH
42884: EMPTY
42885: LIST
42886: LIST
42887: PUSH
42888: LD_INT 2
42890: NEG
42891: PUSH
42892: LD_INT 2
42894: NEG
42895: PUSH
42896: EMPTY
42897: LIST
42898: LIST
42899: PUSH
42900: EMPTY
42901: LIST
42902: LIST
42903: LIST
42904: LIST
42905: LIST
42906: LIST
42907: LIST
42908: LIST
42909: LIST
42910: LIST
42911: LIST
42912: LIST
42913: LIST
42914: LIST
42915: LIST
42916: LIST
42917: LIST
42918: LIST
42919: LIST
42920: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
42921: LD_ADDR_VAR 0 23
42925: PUSH
42926: LD_INT 0
42928: PUSH
42929: LD_INT 0
42931: PUSH
42932: EMPTY
42933: LIST
42934: LIST
42935: PUSH
42936: LD_INT 0
42938: PUSH
42939: LD_INT 1
42941: NEG
42942: PUSH
42943: EMPTY
42944: LIST
42945: LIST
42946: PUSH
42947: LD_INT 1
42949: PUSH
42950: LD_INT 0
42952: PUSH
42953: EMPTY
42954: LIST
42955: LIST
42956: PUSH
42957: LD_INT 1
42959: PUSH
42960: LD_INT 1
42962: PUSH
42963: EMPTY
42964: LIST
42965: LIST
42966: PUSH
42967: LD_INT 0
42969: PUSH
42970: LD_INT 1
42972: PUSH
42973: EMPTY
42974: LIST
42975: LIST
42976: PUSH
42977: LD_INT 1
42979: NEG
42980: PUSH
42981: LD_INT 0
42983: PUSH
42984: EMPTY
42985: LIST
42986: LIST
42987: PUSH
42988: LD_INT 1
42990: NEG
42991: PUSH
42992: LD_INT 1
42994: NEG
42995: PUSH
42996: EMPTY
42997: LIST
42998: LIST
42999: PUSH
43000: LD_INT 1
43002: NEG
43003: PUSH
43004: LD_INT 2
43006: NEG
43007: PUSH
43008: EMPTY
43009: LIST
43010: LIST
43011: PUSH
43012: LD_INT 0
43014: PUSH
43015: LD_INT 2
43017: NEG
43018: PUSH
43019: EMPTY
43020: LIST
43021: LIST
43022: PUSH
43023: LD_INT 1
43025: PUSH
43026: LD_INT 1
43028: NEG
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: PUSH
43034: LD_INT 2
43036: PUSH
43037: LD_INT 0
43039: PUSH
43040: EMPTY
43041: LIST
43042: LIST
43043: PUSH
43044: LD_INT 2
43046: PUSH
43047: LD_INT 1
43049: PUSH
43050: EMPTY
43051: LIST
43052: LIST
43053: PUSH
43054: LD_INT 2
43056: PUSH
43057: LD_INT 2
43059: PUSH
43060: EMPTY
43061: LIST
43062: LIST
43063: PUSH
43064: LD_INT 1
43066: PUSH
43067: LD_INT 2
43069: PUSH
43070: EMPTY
43071: LIST
43072: LIST
43073: PUSH
43074: LD_INT 0
43076: PUSH
43077: LD_INT 2
43079: PUSH
43080: EMPTY
43081: LIST
43082: LIST
43083: PUSH
43084: LD_INT 1
43086: NEG
43087: PUSH
43088: LD_INT 1
43090: PUSH
43091: EMPTY
43092: LIST
43093: LIST
43094: PUSH
43095: LD_INT 2
43097: NEG
43098: PUSH
43099: LD_INT 0
43101: PUSH
43102: EMPTY
43103: LIST
43104: LIST
43105: PUSH
43106: LD_INT 2
43108: NEG
43109: PUSH
43110: LD_INT 1
43112: NEG
43113: PUSH
43114: EMPTY
43115: LIST
43116: LIST
43117: PUSH
43118: LD_INT 2
43120: NEG
43121: PUSH
43122: LD_INT 2
43124: NEG
43125: PUSH
43126: EMPTY
43127: LIST
43128: LIST
43129: PUSH
43130: LD_INT 2
43132: NEG
43133: PUSH
43134: LD_INT 3
43136: NEG
43137: PUSH
43138: EMPTY
43139: LIST
43140: LIST
43141: PUSH
43142: LD_INT 1
43144: NEG
43145: PUSH
43146: LD_INT 3
43148: NEG
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: PUSH
43154: LD_INT 1
43156: PUSH
43157: LD_INT 2
43159: NEG
43160: PUSH
43161: EMPTY
43162: LIST
43163: LIST
43164: PUSH
43165: LD_INT 2
43167: PUSH
43168: LD_INT 1
43170: NEG
43171: PUSH
43172: EMPTY
43173: LIST
43174: LIST
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: LIST
43180: LIST
43181: LIST
43182: LIST
43183: LIST
43184: LIST
43185: LIST
43186: LIST
43187: LIST
43188: LIST
43189: LIST
43190: LIST
43191: LIST
43192: LIST
43193: LIST
43194: LIST
43195: LIST
43196: LIST
43197: LIST
43198: LIST
43199: LIST
43200: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
43201: LD_ADDR_VAR 0 24
43205: PUSH
43206: LD_INT 0
43208: PUSH
43209: LD_INT 0
43211: PUSH
43212: EMPTY
43213: LIST
43214: LIST
43215: PUSH
43216: LD_INT 0
43218: PUSH
43219: LD_INT 1
43221: NEG
43222: PUSH
43223: EMPTY
43224: LIST
43225: LIST
43226: PUSH
43227: LD_INT 1
43229: PUSH
43230: LD_INT 0
43232: PUSH
43233: EMPTY
43234: LIST
43235: LIST
43236: PUSH
43237: LD_INT 1
43239: PUSH
43240: LD_INT 1
43242: PUSH
43243: EMPTY
43244: LIST
43245: LIST
43246: PUSH
43247: LD_INT 0
43249: PUSH
43250: LD_INT 1
43252: PUSH
43253: EMPTY
43254: LIST
43255: LIST
43256: PUSH
43257: LD_INT 1
43259: NEG
43260: PUSH
43261: LD_INT 0
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: LD_INT 1
43270: NEG
43271: PUSH
43272: LD_INT 1
43274: NEG
43275: PUSH
43276: EMPTY
43277: LIST
43278: LIST
43279: PUSH
43280: LD_INT 1
43282: NEG
43283: PUSH
43284: LD_INT 2
43286: NEG
43287: PUSH
43288: EMPTY
43289: LIST
43290: LIST
43291: PUSH
43292: LD_INT 0
43294: PUSH
43295: LD_INT 2
43297: NEG
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: PUSH
43303: LD_INT 1
43305: PUSH
43306: LD_INT 1
43308: NEG
43309: PUSH
43310: EMPTY
43311: LIST
43312: LIST
43313: PUSH
43314: LD_INT 2
43316: PUSH
43317: LD_INT 0
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: PUSH
43324: LD_INT 2
43326: PUSH
43327: LD_INT 1
43329: PUSH
43330: EMPTY
43331: LIST
43332: LIST
43333: PUSH
43334: LD_INT 2
43336: PUSH
43337: LD_INT 2
43339: PUSH
43340: EMPTY
43341: LIST
43342: LIST
43343: PUSH
43344: LD_INT 1
43346: PUSH
43347: LD_INT 2
43349: PUSH
43350: EMPTY
43351: LIST
43352: LIST
43353: PUSH
43354: LD_INT 0
43356: PUSH
43357: LD_INT 2
43359: PUSH
43360: EMPTY
43361: LIST
43362: LIST
43363: PUSH
43364: LD_INT 1
43366: NEG
43367: PUSH
43368: LD_INT 1
43370: PUSH
43371: EMPTY
43372: LIST
43373: LIST
43374: PUSH
43375: LD_INT 2
43377: NEG
43378: PUSH
43379: LD_INT 0
43381: PUSH
43382: EMPTY
43383: LIST
43384: LIST
43385: PUSH
43386: LD_INT 2
43388: NEG
43389: PUSH
43390: LD_INT 1
43392: NEG
43393: PUSH
43394: EMPTY
43395: LIST
43396: LIST
43397: PUSH
43398: LD_INT 2
43400: NEG
43401: PUSH
43402: LD_INT 2
43404: NEG
43405: PUSH
43406: EMPTY
43407: LIST
43408: LIST
43409: PUSH
43410: LD_INT 1
43412: PUSH
43413: LD_INT 2
43415: NEG
43416: PUSH
43417: EMPTY
43418: LIST
43419: LIST
43420: PUSH
43421: LD_INT 2
43423: PUSH
43424: LD_INT 1
43426: NEG
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: PUSH
43432: LD_INT 3
43434: PUSH
43435: LD_INT 1
43437: PUSH
43438: EMPTY
43439: LIST
43440: LIST
43441: PUSH
43442: LD_INT 3
43444: PUSH
43445: LD_INT 2
43447: PUSH
43448: EMPTY
43449: LIST
43450: LIST
43451: PUSH
43452: EMPTY
43453: LIST
43454: LIST
43455: LIST
43456: LIST
43457: LIST
43458: LIST
43459: LIST
43460: LIST
43461: LIST
43462: LIST
43463: LIST
43464: LIST
43465: LIST
43466: LIST
43467: LIST
43468: LIST
43469: LIST
43470: LIST
43471: LIST
43472: LIST
43473: LIST
43474: LIST
43475: LIST
43476: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
43477: LD_ADDR_VAR 0 25
43481: PUSH
43482: LD_INT 0
43484: PUSH
43485: LD_INT 0
43487: PUSH
43488: EMPTY
43489: LIST
43490: LIST
43491: PUSH
43492: LD_INT 0
43494: PUSH
43495: LD_INT 1
43497: NEG
43498: PUSH
43499: EMPTY
43500: LIST
43501: LIST
43502: PUSH
43503: LD_INT 1
43505: PUSH
43506: LD_INT 0
43508: PUSH
43509: EMPTY
43510: LIST
43511: LIST
43512: PUSH
43513: LD_INT 1
43515: PUSH
43516: LD_INT 1
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: PUSH
43523: LD_INT 0
43525: PUSH
43526: LD_INT 1
43528: PUSH
43529: EMPTY
43530: LIST
43531: LIST
43532: PUSH
43533: LD_INT 1
43535: NEG
43536: PUSH
43537: LD_INT 0
43539: PUSH
43540: EMPTY
43541: LIST
43542: LIST
43543: PUSH
43544: LD_INT 1
43546: NEG
43547: PUSH
43548: LD_INT 1
43550: NEG
43551: PUSH
43552: EMPTY
43553: LIST
43554: LIST
43555: PUSH
43556: LD_INT 1
43558: NEG
43559: PUSH
43560: LD_INT 2
43562: NEG
43563: PUSH
43564: EMPTY
43565: LIST
43566: LIST
43567: PUSH
43568: LD_INT 0
43570: PUSH
43571: LD_INT 2
43573: NEG
43574: PUSH
43575: EMPTY
43576: LIST
43577: LIST
43578: PUSH
43579: LD_INT 1
43581: PUSH
43582: LD_INT 1
43584: NEG
43585: PUSH
43586: EMPTY
43587: LIST
43588: LIST
43589: PUSH
43590: LD_INT 2
43592: PUSH
43593: LD_INT 0
43595: PUSH
43596: EMPTY
43597: LIST
43598: LIST
43599: PUSH
43600: LD_INT 2
43602: PUSH
43603: LD_INT 1
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: PUSH
43610: LD_INT 2
43612: PUSH
43613: LD_INT 2
43615: PUSH
43616: EMPTY
43617: LIST
43618: LIST
43619: PUSH
43620: LD_INT 1
43622: PUSH
43623: LD_INT 2
43625: PUSH
43626: EMPTY
43627: LIST
43628: LIST
43629: PUSH
43630: LD_INT 0
43632: PUSH
43633: LD_INT 2
43635: PUSH
43636: EMPTY
43637: LIST
43638: LIST
43639: PUSH
43640: LD_INT 1
43642: NEG
43643: PUSH
43644: LD_INT 1
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: PUSH
43651: LD_INT 2
43653: NEG
43654: PUSH
43655: LD_INT 0
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: PUSH
43662: LD_INT 2
43664: NEG
43665: PUSH
43666: LD_INT 1
43668: NEG
43669: PUSH
43670: EMPTY
43671: LIST
43672: LIST
43673: PUSH
43674: LD_INT 2
43676: NEG
43677: PUSH
43678: LD_INT 2
43680: NEG
43681: PUSH
43682: EMPTY
43683: LIST
43684: LIST
43685: PUSH
43686: LD_INT 3
43688: PUSH
43689: LD_INT 1
43691: PUSH
43692: EMPTY
43693: LIST
43694: LIST
43695: PUSH
43696: LD_INT 3
43698: PUSH
43699: LD_INT 2
43701: PUSH
43702: EMPTY
43703: LIST
43704: LIST
43705: PUSH
43706: LD_INT 2
43708: PUSH
43709: LD_INT 3
43711: PUSH
43712: EMPTY
43713: LIST
43714: LIST
43715: PUSH
43716: LD_INT 1
43718: PUSH
43719: LD_INT 3
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: LIST
43730: LIST
43731: LIST
43732: LIST
43733: LIST
43734: LIST
43735: LIST
43736: LIST
43737: LIST
43738: LIST
43739: LIST
43740: LIST
43741: LIST
43742: LIST
43743: LIST
43744: LIST
43745: LIST
43746: LIST
43747: LIST
43748: LIST
43749: LIST
43750: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43751: LD_ADDR_VAR 0 26
43755: PUSH
43756: LD_INT 0
43758: PUSH
43759: LD_INT 0
43761: PUSH
43762: EMPTY
43763: LIST
43764: LIST
43765: PUSH
43766: LD_INT 0
43768: PUSH
43769: LD_INT 1
43771: NEG
43772: PUSH
43773: EMPTY
43774: LIST
43775: LIST
43776: PUSH
43777: LD_INT 1
43779: PUSH
43780: LD_INT 0
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: PUSH
43787: LD_INT 1
43789: PUSH
43790: LD_INT 1
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: PUSH
43797: LD_INT 0
43799: PUSH
43800: LD_INT 1
43802: PUSH
43803: EMPTY
43804: LIST
43805: LIST
43806: PUSH
43807: LD_INT 1
43809: NEG
43810: PUSH
43811: LD_INT 0
43813: PUSH
43814: EMPTY
43815: LIST
43816: LIST
43817: PUSH
43818: LD_INT 1
43820: NEG
43821: PUSH
43822: LD_INT 1
43824: NEG
43825: PUSH
43826: EMPTY
43827: LIST
43828: LIST
43829: PUSH
43830: LD_INT 1
43832: NEG
43833: PUSH
43834: LD_INT 2
43836: NEG
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: PUSH
43842: LD_INT 0
43844: PUSH
43845: LD_INT 2
43847: NEG
43848: PUSH
43849: EMPTY
43850: LIST
43851: LIST
43852: PUSH
43853: LD_INT 1
43855: PUSH
43856: LD_INT 1
43858: NEG
43859: PUSH
43860: EMPTY
43861: LIST
43862: LIST
43863: PUSH
43864: LD_INT 2
43866: PUSH
43867: LD_INT 0
43869: PUSH
43870: EMPTY
43871: LIST
43872: LIST
43873: PUSH
43874: LD_INT 2
43876: PUSH
43877: LD_INT 1
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: PUSH
43884: LD_INT 2
43886: PUSH
43887: LD_INT 2
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: PUSH
43894: LD_INT 1
43896: PUSH
43897: LD_INT 2
43899: PUSH
43900: EMPTY
43901: LIST
43902: LIST
43903: PUSH
43904: LD_INT 0
43906: PUSH
43907: LD_INT 2
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: PUSH
43914: LD_INT 1
43916: NEG
43917: PUSH
43918: LD_INT 1
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: PUSH
43925: LD_INT 2
43927: NEG
43928: PUSH
43929: LD_INT 0
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: PUSH
43936: LD_INT 2
43938: NEG
43939: PUSH
43940: LD_INT 1
43942: NEG
43943: PUSH
43944: EMPTY
43945: LIST
43946: LIST
43947: PUSH
43948: LD_INT 2
43950: NEG
43951: PUSH
43952: LD_INT 2
43954: NEG
43955: PUSH
43956: EMPTY
43957: LIST
43958: LIST
43959: PUSH
43960: LD_INT 2
43962: PUSH
43963: LD_INT 3
43965: PUSH
43966: EMPTY
43967: LIST
43968: LIST
43969: PUSH
43970: LD_INT 1
43972: PUSH
43973: LD_INT 3
43975: PUSH
43976: EMPTY
43977: LIST
43978: LIST
43979: PUSH
43980: LD_INT 1
43982: NEG
43983: PUSH
43984: LD_INT 2
43986: PUSH
43987: EMPTY
43988: LIST
43989: LIST
43990: PUSH
43991: LD_INT 2
43993: NEG
43994: PUSH
43995: LD_INT 1
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: PUSH
44002: EMPTY
44003: LIST
44004: LIST
44005: LIST
44006: LIST
44007: LIST
44008: LIST
44009: LIST
44010: LIST
44011: LIST
44012: LIST
44013: LIST
44014: LIST
44015: LIST
44016: LIST
44017: LIST
44018: LIST
44019: LIST
44020: LIST
44021: LIST
44022: LIST
44023: LIST
44024: LIST
44025: LIST
44026: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44027: LD_ADDR_VAR 0 27
44031: PUSH
44032: LD_INT 0
44034: PUSH
44035: LD_INT 0
44037: PUSH
44038: EMPTY
44039: LIST
44040: LIST
44041: PUSH
44042: LD_INT 0
44044: PUSH
44045: LD_INT 1
44047: NEG
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: LD_INT 1
44055: PUSH
44056: LD_INT 0
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: PUSH
44063: LD_INT 1
44065: PUSH
44066: LD_INT 1
44068: PUSH
44069: EMPTY
44070: LIST
44071: LIST
44072: PUSH
44073: LD_INT 0
44075: PUSH
44076: LD_INT 1
44078: PUSH
44079: EMPTY
44080: LIST
44081: LIST
44082: PUSH
44083: LD_INT 1
44085: NEG
44086: PUSH
44087: LD_INT 0
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: PUSH
44094: LD_INT 1
44096: NEG
44097: PUSH
44098: LD_INT 1
44100: NEG
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: PUSH
44106: LD_INT 1
44108: NEG
44109: PUSH
44110: LD_INT 2
44112: NEG
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: PUSH
44118: LD_INT 0
44120: PUSH
44121: LD_INT 2
44123: NEG
44124: PUSH
44125: EMPTY
44126: LIST
44127: LIST
44128: PUSH
44129: LD_INT 1
44131: PUSH
44132: LD_INT 1
44134: NEG
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: PUSH
44140: LD_INT 2
44142: PUSH
44143: LD_INT 0
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: PUSH
44150: LD_INT 2
44152: PUSH
44153: LD_INT 1
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: PUSH
44160: LD_INT 2
44162: PUSH
44163: LD_INT 2
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: PUSH
44170: LD_INT 1
44172: PUSH
44173: LD_INT 2
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: PUSH
44180: LD_INT 0
44182: PUSH
44183: LD_INT 2
44185: PUSH
44186: EMPTY
44187: LIST
44188: LIST
44189: PUSH
44190: LD_INT 1
44192: NEG
44193: PUSH
44194: LD_INT 1
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: PUSH
44201: LD_INT 2
44203: NEG
44204: PUSH
44205: LD_INT 0
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: PUSH
44212: LD_INT 2
44214: NEG
44215: PUSH
44216: LD_INT 1
44218: NEG
44219: PUSH
44220: EMPTY
44221: LIST
44222: LIST
44223: PUSH
44224: LD_INT 2
44226: NEG
44227: PUSH
44228: LD_INT 2
44230: NEG
44231: PUSH
44232: EMPTY
44233: LIST
44234: LIST
44235: PUSH
44236: LD_INT 1
44238: NEG
44239: PUSH
44240: LD_INT 2
44242: PUSH
44243: EMPTY
44244: LIST
44245: LIST
44246: PUSH
44247: LD_INT 2
44249: NEG
44250: PUSH
44251: LD_INT 1
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: PUSH
44258: LD_INT 3
44260: NEG
44261: PUSH
44262: LD_INT 1
44264: NEG
44265: PUSH
44266: EMPTY
44267: LIST
44268: LIST
44269: PUSH
44270: LD_INT 3
44272: NEG
44273: PUSH
44274: LD_INT 2
44276: NEG
44277: PUSH
44278: EMPTY
44279: LIST
44280: LIST
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: LIST
44286: LIST
44287: LIST
44288: LIST
44289: LIST
44290: LIST
44291: LIST
44292: LIST
44293: LIST
44294: LIST
44295: LIST
44296: LIST
44297: LIST
44298: LIST
44299: LIST
44300: LIST
44301: LIST
44302: LIST
44303: LIST
44304: LIST
44305: LIST
44306: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44307: LD_ADDR_VAR 0 28
44311: PUSH
44312: LD_INT 0
44314: PUSH
44315: LD_INT 0
44317: PUSH
44318: EMPTY
44319: LIST
44320: LIST
44321: PUSH
44322: LD_INT 0
44324: PUSH
44325: LD_INT 1
44327: NEG
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: PUSH
44333: LD_INT 1
44335: PUSH
44336: LD_INT 0
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: PUSH
44343: LD_INT 1
44345: PUSH
44346: LD_INT 1
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: PUSH
44353: LD_INT 0
44355: PUSH
44356: LD_INT 1
44358: PUSH
44359: EMPTY
44360: LIST
44361: LIST
44362: PUSH
44363: LD_INT 1
44365: NEG
44366: PUSH
44367: LD_INT 0
44369: PUSH
44370: EMPTY
44371: LIST
44372: LIST
44373: PUSH
44374: LD_INT 1
44376: NEG
44377: PUSH
44378: LD_INT 1
44380: NEG
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: PUSH
44386: LD_INT 1
44388: NEG
44389: PUSH
44390: LD_INT 2
44392: NEG
44393: PUSH
44394: EMPTY
44395: LIST
44396: LIST
44397: PUSH
44398: LD_INT 0
44400: PUSH
44401: LD_INT 2
44403: NEG
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: PUSH
44409: LD_INT 1
44411: PUSH
44412: LD_INT 1
44414: NEG
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: PUSH
44420: LD_INT 2
44422: PUSH
44423: LD_INT 0
44425: PUSH
44426: EMPTY
44427: LIST
44428: LIST
44429: PUSH
44430: LD_INT 2
44432: PUSH
44433: LD_INT 1
44435: PUSH
44436: EMPTY
44437: LIST
44438: LIST
44439: PUSH
44440: LD_INT 2
44442: PUSH
44443: LD_INT 2
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: PUSH
44450: LD_INT 1
44452: PUSH
44453: LD_INT 2
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: PUSH
44460: LD_INT 0
44462: PUSH
44463: LD_INT 2
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: PUSH
44470: LD_INT 1
44472: NEG
44473: PUSH
44474: LD_INT 1
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: PUSH
44481: LD_INT 2
44483: NEG
44484: PUSH
44485: LD_INT 0
44487: PUSH
44488: EMPTY
44489: LIST
44490: LIST
44491: PUSH
44492: LD_INT 2
44494: NEG
44495: PUSH
44496: LD_INT 1
44498: NEG
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: PUSH
44504: LD_INT 2
44506: NEG
44507: PUSH
44508: LD_INT 2
44510: NEG
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PUSH
44516: LD_INT 2
44518: NEG
44519: PUSH
44520: LD_INT 3
44522: NEG
44523: PUSH
44524: EMPTY
44525: LIST
44526: LIST
44527: PUSH
44528: LD_INT 1
44530: NEG
44531: PUSH
44532: LD_INT 3
44534: NEG
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: PUSH
44540: LD_INT 3
44542: NEG
44543: PUSH
44544: LD_INT 1
44546: NEG
44547: PUSH
44548: EMPTY
44549: LIST
44550: LIST
44551: PUSH
44552: LD_INT 3
44554: NEG
44555: PUSH
44556: LD_INT 2
44558: NEG
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: PUSH
44564: EMPTY
44565: LIST
44566: LIST
44567: LIST
44568: LIST
44569: LIST
44570: LIST
44571: LIST
44572: LIST
44573: LIST
44574: LIST
44575: LIST
44576: LIST
44577: LIST
44578: LIST
44579: LIST
44580: LIST
44581: LIST
44582: LIST
44583: LIST
44584: LIST
44585: LIST
44586: LIST
44587: LIST
44588: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44589: LD_ADDR_VAR 0 29
44593: PUSH
44594: LD_INT 0
44596: PUSH
44597: LD_INT 0
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: PUSH
44604: LD_INT 0
44606: PUSH
44607: LD_INT 1
44609: NEG
44610: PUSH
44611: EMPTY
44612: LIST
44613: LIST
44614: PUSH
44615: LD_INT 1
44617: PUSH
44618: LD_INT 0
44620: PUSH
44621: EMPTY
44622: LIST
44623: LIST
44624: PUSH
44625: LD_INT 1
44627: PUSH
44628: LD_INT 1
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: PUSH
44635: LD_INT 0
44637: PUSH
44638: LD_INT 1
44640: PUSH
44641: EMPTY
44642: LIST
44643: LIST
44644: PUSH
44645: LD_INT 1
44647: NEG
44648: PUSH
44649: LD_INT 0
44651: PUSH
44652: EMPTY
44653: LIST
44654: LIST
44655: PUSH
44656: LD_INT 1
44658: NEG
44659: PUSH
44660: LD_INT 1
44662: NEG
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: PUSH
44668: LD_INT 1
44670: NEG
44671: PUSH
44672: LD_INT 2
44674: NEG
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: PUSH
44680: LD_INT 0
44682: PUSH
44683: LD_INT 2
44685: NEG
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: PUSH
44691: LD_INT 1
44693: PUSH
44694: LD_INT 1
44696: NEG
44697: PUSH
44698: EMPTY
44699: LIST
44700: LIST
44701: PUSH
44702: LD_INT 2
44704: PUSH
44705: LD_INT 0
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: PUSH
44712: LD_INT 2
44714: PUSH
44715: LD_INT 1
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: PUSH
44722: LD_INT 1
44724: PUSH
44725: LD_INT 2
44727: PUSH
44728: EMPTY
44729: LIST
44730: LIST
44731: PUSH
44732: LD_INT 0
44734: PUSH
44735: LD_INT 2
44737: PUSH
44738: EMPTY
44739: LIST
44740: LIST
44741: PUSH
44742: LD_INT 1
44744: NEG
44745: PUSH
44746: LD_INT 1
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: PUSH
44753: LD_INT 2
44755: NEG
44756: PUSH
44757: LD_INT 1
44759: NEG
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: PUSH
44765: LD_INT 2
44767: NEG
44768: PUSH
44769: LD_INT 2
44771: NEG
44772: PUSH
44773: EMPTY
44774: LIST
44775: LIST
44776: PUSH
44777: LD_INT 2
44779: NEG
44780: PUSH
44781: LD_INT 3
44783: NEG
44784: PUSH
44785: EMPTY
44786: LIST
44787: LIST
44788: PUSH
44789: LD_INT 2
44791: PUSH
44792: LD_INT 1
44794: NEG
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: PUSH
44800: LD_INT 3
44802: PUSH
44803: LD_INT 1
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: PUSH
44810: LD_INT 1
44812: PUSH
44813: LD_INT 3
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: PUSH
44820: LD_INT 1
44822: NEG
44823: PUSH
44824: LD_INT 2
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: PUSH
44831: LD_INT 3
44833: NEG
44834: PUSH
44835: LD_INT 2
44837: NEG
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: EMPTY
44844: LIST
44845: LIST
44846: LIST
44847: LIST
44848: LIST
44849: LIST
44850: LIST
44851: LIST
44852: LIST
44853: LIST
44854: LIST
44855: LIST
44856: LIST
44857: LIST
44858: LIST
44859: LIST
44860: LIST
44861: LIST
44862: LIST
44863: LIST
44864: LIST
44865: LIST
44866: LIST
44867: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44868: LD_ADDR_VAR 0 30
44872: PUSH
44873: LD_INT 0
44875: PUSH
44876: LD_INT 0
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: PUSH
44883: LD_INT 0
44885: PUSH
44886: LD_INT 1
44888: NEG
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: PUSH
44894: LD_INT 1
44896: PUSH
44897: LD_INT 0
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: PUSH
44904: LD_INT 1
44906: PUSH
44907: LD_INT 1
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: PUSH
44914: LD_INT 0
44916: PUSH
44917: LD_INT 1
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: PUSH
44924: LD_INT 1
44926: NEG
44927: PUSH
44928: LD_INT 0
44930: PUSH
44931: EMPTY
44932: LIST
44933: LIST
44934: PUSH
44935: LD_INT 1
44937: NEG
44938: PUSH
44939: LD_INT 1
44941: NEG
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: PUSH
44947: LD_INT 1
44949: NEG
44950: PUSH
44951: LD_INT 2
44953: NEG
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: PUSH
44959: LD_INT 0
44961: PUSH
44962: LD_INT 2
44964: NEG
44965: PUSH
44966: EMPTY
44967: LIST
44968: LIST
44969: PUSH
44970: LD_INT 1
44972: PUSH
44973: LD_INT 1
44975: NEG
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: PUSH
44981: LD_INT 2
44983: PUSH
44984: LD_INT 0
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: PUSH
44991: LD_INT 2
44993: PUSH
44994: LD_INT 1
44996: PUSH
44997: EMPTY
44998: LIST
44999: LIST
45000: PUSH
45001: LD_INT 2
45003: PUSH
45004: LD_INT 2
45006: PUSH
45007: EMPTY
45008: LIST
45009: LIST
45010: PUSH
45011: LD_INT 1
45013: PUSH
45014: LD_INT 2
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: PUSH
45021: LD_INT 1
45023: NEG
45024: PUSH
45025: LD_INT 1
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: PUSH
45032: LD_INT 2
45034: NEG
45035: PUSH
45036: LD_INT 0
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: PUSH
45043: LD_INT 2
45045: NEG
45046: PUSH
45047: LD_INT 1
45049: NEG
45050: PUSH
45051: EMPTY
45052: LIST
45053: LIST
45054: PUSH
45055: LD_INT 1
45057: NEG
45058: PUSH
45059: LD_INT 3
45061: NEG
45062: PUSH
45063: EMPTY
45064: LIST
45065: LIST
45066: PUSH
45067: LD_INT 1
45069: PUSH
45070: LD_INT 2
45072: NEG
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: PUSH
45078: LD_INT 3
45080: PUSH
45081: LD_INT 2
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: PUSH
45088: LD_INT 2
45090: PUSH
45091: LD_INT 3
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: PUSH
45098: LD_INT 2
45100: NEG
45101: PUSH
45102: LD_INT 1
45104: PUSH
45105: EMPTY
45106: LIST
45107: LIST
45108: PUSH
45109: LD_INT 3
45111: NEG
45112: PUSH
45113: LD_INT 1
45115: NEG
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: LIST
45125: LIST
45126: LIST
45127: LIST
45128: LIST
45129: LIST
45130: LIST
45131: LIST
45132: LIST
45133: LIST
45134: LIST
45135: LIST
45136: LIST
45137: LIST
45138: LIST
45139: LIST
45140: LIST
45141: LIST
45142: LIST
45143: LIST
45144: LIST
45145: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45146: LD_ADDR_VAR 0 31
45150: PUSH
45151: LD_INT 0
45153: PUSH
45154: LD_INT 0
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: LD_INT 0
45163: PUSH
45164: LD_INT 1
45166: NEG
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: PUSH
45172: LD_INT 1
45174: PUSH
45175: LD_INT 0
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: LD_INT 1
45184: PUSH
45185: LD_INT 1
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: PUSH
45192: LD_INT 0
45194: PUSH
45195: LD_INT 1
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: PUSH
45202: LD_INT 1
45204: NEG
45205: PUSH
45206: LD_INT 0
45208: PUSH
45209: EMPTY
45210: LIST
45211: LIST
45212: PUSH
45213: LD_INT 1
45215: NEG
45216: PUSH
45217: LD_INT 1
45219: NEG
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: LD_INT 1
45227: NEG
45228: PUSH
45229: LD_INT 2
45231: NEG
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PUSH
45237: LD_INT 1
45239: PUSH
45240: LD_INT 1
45242: NEG
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: PUSH
45248: LD_INT 2
45250: PUSH
45251: LD_INT 0
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PUSH
45258: LD_INT 2
45260: PUSH
45261: LD_INT 1
45263: PUSH
45264: EMPTY
45265: LIST
45266: LIST
45267: PUSH
45268: LD_INT 2
45270: PUSH
45271: LD_INT 2
45273: PUSH
45274: EMPTY
45275: LIST
45276: LIST
45277: PUSH
45278: LD_INT 1
45280: PUSH
45281: LD_INT 2
45283: PUSH
45284: EMPTY
45285: LIST
45286: LIST
45287: PUSH
45288: LD_INT 0
45290: PUSH
45291: LD_INT 2
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: PUSH
45298: LD_INT 1
45300: NEG
45301: PUSH
45302: LD_INT 1
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: PUSH
45309: LD_INT 2
45311: NEG
45312: PUSH
45313: LD_INT 1
45315: NEG
45316: PUSH
45317: EMPTY
45318: LIST
45319: LIST
45320: PUSH
45321: LD_INT 2
45323: NEG
45324: PUSH
45325: LD_INT 2
45327: NEG
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: PUSH
45333: LD_INT 2
45335: NEG
45336: PUSH
45337: LD_INT 3
45339: NEG
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: PUSH
45345: LD_INT 2
45347: PUSH
45348: LD_INT 1
45350: NEG
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: LD_INT 3
45358: PUSH
45359: LD_INT 1
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 1
45368: PUSH
45369: LD_INT 3
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: PUSH
45376: LD_INT 1
45378: NEG
45379: PUSH
45380: LD_INT 2
45382: PUSH
45383: EMPTY
45384: LIST
45385: LIST
45386: PUSH
45387: LD_INT 3
45389: NEG
45390: PUSH
45391: LD_INT 2
45393: NEG
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: EMPTY
45400: LIST
45401: LIST
45402: LIST
45403: LIST
45404: LIST
45405: LIST
45406: LIST
45407: LIST
45408: LIST
45409: LIST
45410: LIST
45411: LIST
45412: LIST
45413: LIST
45414: LIST
45415: LIST
45416: LIST
45417: LIST
45418: LIST
45419: LIST
45420: LIST
45421: LIST
45422: LIST
45423: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45424: LD_ADDR_VAR 0 32
45428: PUSH
45429: LD_INT 0
45431: PUSH
45432: LD_INT 0
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: PUSH
45439: LD_INT 0
45441: PUSH
45442: LD_INT 1
45444: NEG
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: PUSH
45450: LD_INT 1
45452: PUSH
45453: LD_INT 0
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: PUSH
45460: LD_INT 1
45462: PUSH
45463: LD_INT 1
45465: PUSH
45466: EMPTY
45467: LIST
45468: LIST
45469: PUSH
45470: LD_INT 0
45472: PUSH
45473: LD_INT 1
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: PUSH
45480: LD_INT 1
45482: NEG
45483: PUSH
45484: LD_INT 0
45486: PUSH
45487: EMPTY
45488: LIST
45489: LIST
45490: PUSH
45491: LD_INT 1
45493: NEG
45494: PUSH
45495: LD_INT 1
45497: NEG
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: PUSH
45503: LD_INT 1
45505: NEG
45506: PUSH
45507: LD_INT 2
45509: NEG
45510: PUSH
45511: EMPTY
45512: LIST
45513: LIST
45514: PUSH
45515: LD_INT 0
45517: PUSH
45518: LD_INT 2
45520: NEG
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: PUSH
45526: LD_INT 1
45528: PUSH
45529: LD_INT 1
45531: NEG
45532: PUSH
45533: EMPTY
45534: LIST
45535: LIST
45536: PUSH
45537: LD_INT 2
45539: PUSH
45540: LD_INT 1
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: PUSH
45547: LD_INT 2
45549: PUSH
45550: LD_INT 2
45552: PUSH
45553: EMPTY
45554: LIST
45555: LIST
45556: PUSH
45557: LD_INT 1
45559: PUSH
45560: LD_INT 2
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: PUSH
45567: LD_INT 0
45569: PUSH
45570: LD_INT 2
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: PUSH
45577: LD_INT 1
45579: NEG
45580: PUSH
45581: LD_INT 1
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: PUSH
45588: LD_INT 2
45590: NEG
45591: PUSH
45592: LD_INT 0
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: PUSH
45599: LD_INT 2
45601: NEG
45602: PUSH
45603: LD_INT 1
45605: NEG
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: LD_INT 1
45613: NEG
45614: PUSH
45615: LD_INT 3
45617: NEG
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: PUSH
45623: LD_INT 1
45625: PUSH
45626: LD_INT 2
45628: NEG
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: PUSH
45634: LD_INT 3
45636: PUSH
45637: LD_INT 2
45639: PUSH
45640: EMPTY
45641: LIST
45642: LIST
45643: PUSH
45644: LD_INT 2
45646: PUSH
45647: LD_INT 3
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: PUSH
45654: LD_INT 2
45656: NEG
45657: PUSH
45658: LD_INT 1
45660: PUSH
45661: EMPTY
45662: LIST
45663: LIST
45664: PUSH
45665: LD_INT 3
45667: NEG
45668: PUSH
45669: LD_INT 1
45671: NEG
45672: PUSH
45673: EMPTY
45674: LIST
45675: LIST
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: LIST
45681: LIST
45682: LIST
45683: LIST
45684: LIST
45685: LIST
45686: LIST
45687: LIST
45688: LIST
45689: LIST
45690: LIST
45691: LIST
45692: LIST
45693: LIST
45694: LIST
45695: LIST
45696: LIST
45697: LIST
45698: LIST
45699: LIST
45700: LIST
45701: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45702: LD_ADDR_VAR 0 33
45706: PUSH
45707: LD_INT 0
45709: PUSH
45710: LD_INT 0
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: PUSH
45717: LD_INT 0
45719: PUSH
45720: LD_INT 1
45722: NEG
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: PUSH
45728: LD_INT 1
45730: PUSH
45731: LD_INT 0
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: PUSH
45738: LD_INT 1
45740: PUSH
45741: LD_INT 1
45743: PUSH
45744: EMPTY
45745: LIST
45746: LIST
45747: PUSH
45748: LD_INT 0
45750: PUSH
45751: LD_INT 1
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: LD_INT 1
45760: NEG
45761: PUSH
45762: LD_INT 0
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: PUSH
45769: LD_INT 1
45771: NEG
45772: PUSH
45773: LD_INT 1
45775: NEG
45776: PUSH
45777: EMPTY
45778: LIST
45779: LIST
45780: PUSH
45781: LD_INT 1
45783: NEG
45784: PUSH
45785: LD_INT 2
45787: NEG
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: LD_INT 1
45795: PUSH
45796: LD_INT 1
45798: NEG
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PUSH
45804: LD_INT 2
45806: PUSH
45807: LD_INT 0
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 2
45816: PUSH
45817: LD_INT 1
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: PUSH
45824: LD_INT 1
45826: PUSH
45827: LD_INT 2
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: PUSH
45834: LD_INT 0
45836: PUSH
45837: LD_INT 2
45839: PUSH
45840: EMPTY
45841: LIST
45842: LIST
45843: PUSH
45844: LD_INT 1
45846: NEG
45847: PUSH
45848: LD_INT 1
45850: PUSH
45851: EMPTY
45852: LIST
45853: LIST
45854: PUSH
45855: LD_INT 2
45857: NEG
45858: PUSH
45859: LD_INT 0
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: PUSH
45866: LD_INT 2
45868: NEG
45869: PUSH
45870: LD_INT 1
45872: NEG
45873: PUSH
45874: EMPTY
45875: LIST
45876: LIST
45877: PUSH
45878: LD_INT 2
45880: NEG
45881: PUSH
45882: LD_INT 2
45884: NEG
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: PUSH
45890: LD_INT 2
45892: NEG
45893: PUSH
45894: LD_INT 3
45896: NEG
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: PUSH
45902: LD_INT 2
45904: PUSH
45905: LD_INT 1
45907: NEG
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: PUSH
45913: LD_INT 3
45915: PUSH
45916: LD_INT 1
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: PUSH
45923: LD_INT 1
45925: PUSH
45926: LD_INT 3
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: LD_INT 1
45935: NEG
45936: PUSH
45937: LD_INT 2
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: PUSH
45944: LD_INT 3
45946: NEG
45947: PUSH
45948: LD_INT 2
45950: NEG
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: LIST
45960: LIST
45961: LIST
45962: LIST
45963: LIST
45964: LIST
45965: LIST
45966: LIST
45967: LIST
45968: LIST
45969: LIST
45970: LIST
45971: LIST
45972: LIST
45973: LIST
45974: LIST
45975: LIST
45976: LIST
45977: LIST
45978: LIST
45979: LIST
45980: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45981: LD_ADDR_VAR 0 34
45985: PUSH
45986: LD_INT 0
45988: PUSH
45989: LD_INT 0
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: PUSH
45996: LD_INT 0
45998: PUSH
45999: LD_INT 1
46001: NEG
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: PUSH
46007: LD_INT 1
46009: PUSH
46010: LD_INT 0
46012: PUSH
46013: EMPTY
46014: LIST
46015: LIST
46016: PUSH
46017: LD_INT 1
46019: PUSH
46020: LD_INT 1
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: PUSH
46027: LD_INT 0
46029: PUSH
46030: LD_INT 1
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: PUSH
46037: LD_INT 1
46039: NEG
46040: PUSH
46041: LD_INT 0
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: PUSH
46048: LD_INT 1
46050: NEG
46051: PUSH
46052: LD_INT 1
46054: NEG
46055: PUSH
46056: EMPTY
46057: LIST
46058: LIST
46059: PUSH
46060: LD_INT 1
46062: NEG
46063: PUSH
46064: LD_INT 2
46066: NEG
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: PUSH
46072: LD_INT 0
46074: PUSH
46075: LD_INT 2
46077: NEG
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: PUSH
46083: LD_INT 1
46085: PUSH
46086: LD_INT 1
46088: NEG
46089: PUSH
46090: EMPTY
46091: LIST
46092: LIST
46093: PUSH
46094: LD_INT 2
46096: PUSH
46097: LD_INT 1
46099: PUSH
46100: EMPTY
46101: LIST
46102: LIST
46103: PUSH
46104: LD_INT 2
46106: PUSH
46107: LD_INT 2
46109: PUSH
46110: EMPTY
46111: LIST
46112: LIST
46113: PUSH
46114: LD_INT 1
46116: PUSH
46117: LD_INT 2
46119: PUSH
46120: EMPTY
46121: LIST
46122: LIST
46123: PUSH
46124: LD_INT 1
46126: NEG
46127: PUSH
46128: LD_INT 1
46130: PUSH
46131: EMPTY
46132: LIST
46133: LIST
46134: PUSH
46135: LD_INT 2
46137: NEG
46138: PUSH
46139: LD_INT 0
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: PUSH
46146: LD_INT 2
46148: NEG
46149: PUSH
46150: LD_INT 1
46152: NEG
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: PUSH
46158: LD_INT 2
46160: NEG
46161: PUSH
46162: LD_INT 2
46164: NEG
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: PUSH
46170: LD_INT 1
46172: NEG
46173: PUSH
46174: LD_INT 3
46176: NEG
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: LD_INT 1
46184: PUSH
46185: LD_INT 2
46187: NEG
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: PUSH
46193: LD_INT 3
46195: PUSH
46196: LD_INT 2
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: PUSH
46203: LD_INT 2
46205: PUSH
46206: LD_INT 3
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PUSH
46213: LD_INT 2
46215: NEG
46216: PUSH
46217: LD_INT 1
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 3
46226: NEG
46227: PUSH
46228: LD_INT 1
46230: NEG
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: LIST
46240: LIST
46241: LIST
46242: LIST
46243: LIST
46244: LIST
46245: LIST
46246: LIST
46247: LIST
46248: LIST
46249: LIST
46250: LIST
46251: LIST
46252: LIST
46253: LIST
46254: LIST
46255: LIST
46256: LIST
46257: LIST
46258: LIST
46259: LIST
46260: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46261: LD_ADDR_VAR 0 35
46265: PUSH
46266: LD_INT 0
46268: PUSH
46269: LD_INT 0
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: PUSH
46276: LD_INT 0
46278: PUSH
46279: LD_INT 1
46281: NEG
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: PUSH
46287: LD_INT 1
46289: PUSH
46290: LD_INT 0
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: LD_INT 1
46299: PUSH
46300: LD_INT 1
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: PUSH
46307: LD_INT 0
46309: PUSH
46310: LD_INT 1
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: PUSH
46317: LD_INT 1
46319: NEG
46320: PUSH
46321: LD_INT 0
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: PUSH
46328: LD_INT 1
46330: NEG
46331: PUSH
46332: LD_INT 1
46334: NEG
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: PUSH
46340: LD_INT 2
46342: PUSH
46343: LD_INT 1
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: PUSH
46350: LD_INT 2
46352: NEG
46353: PUSH
46354: LD_INT 1
46356: NEG
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: PUSH
46362: EMPTY
46363: LIST
46364: LIST
46365: LIST
46366: LIST
46367: LIST
46368: LIST
46369: LIST
46370: LIST
46371: LIST
46372: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46373: LD_ADDR_VAR 0 36
46377: PUSH
46378: LD_INT 0
46380: PUSH
46381: LD_INT 0
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: PUSH
46388: LD_INT 0
46390: PUSH
46391: LD_INT 1
46393: NEG
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PUSH
46399: LD_INT 1
46401: PUSH
46402: LD_INT 0
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: LD_INT 1
46411: PUSH
46412: LD_INT 1
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: PUSH
46419: LD_INT 0
46421: PUSH
46422: LD_INT 1
46424: PUSH
46425: EMPTY
46426: LIST
46427: LIST
46428: PUSH
46429: LD_INT 1
46431: NEG
46432: PUSH
46433: LD_INT 0
46435: PUSH
46436: EMPTY
46437: LIST
46438: LIST
46439: PUSH
46440: LD_INT 1
46442: NEG
46443: PUSH
46444: LD_INT 1
46446: NEG
46447: PUSH
46448: EMPTY
46449: LIST
46450: LIST
46451: PUSH
46452: LD_INT 1
46454: NEG
46455: PUSH
46456: LD_INT 2
46458: NEG
46459: PUSH
46460: EMPTY
46461: LIST
46462: LIST
46463: PUSH
46464: LD_INT 1
46466: PUSH
46467: LD_INT 2
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: LIST
46478: LIST
46479: LIST
46480: LIST
46481: LIST
46482: LIST
46483: LIST
46484: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46485: LD_ADDR_VAR 0 37
46489: PUSH
46490: LD_INT 0
46492: PUSH
46493: LD_INT 0
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 0
46502: PUSH
46503: LD_INT 1
46505: NEG
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 1
46513: PUSH
46514: LD_INT 0
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 1
46523: PUSH
46524: LD_INT 1
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: LD_INT 0
46533: PUSH
46534: LD_INT 1
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: PUSH
46541: LD_INT 1
46543: NEG
46544: PUSH
46545: LD_INT 0
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: LD_INT 1
46554: NEG
46555: PUSH
46556: LD_INT 1
46558: NEG
46559: PUSH
46560: EMPTY
46561: LIST
46562: LIST
46563: PUSH
46564: LD_INT 1
46566: PUSH
46567: LD_INT 1
46569: NEG
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: PUSH
46575: LD_INT 1
46577: NEG
46578: PUSH
46579: LD_INT 1
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: LIST
46590: LIST
46591: LIST
46592: LIST
46593: LIST
46594: LIST
46595: LIST
46596: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46597: LD_ADDR_VAR 0 38
46601: PUSH
46602: LD_INT 0
46604: PUSH
46605: LD_INT 0
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: PUSH
46612: LD_INT 0
46614: PUSH
46615: LD_INT 1
46617: NEG
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 1
46625: PUSH
46626: LD_INT 0
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 1
46635: PUSH
46636: LD_INT 1
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 0
46645: PUSH
46646: LD_INT 1
46648: PUSH
46649: EMPTY
46650: LIST
46651: LIST
46652: PUSH
46653: LD_INT 1
46655: NEG
46656: PUSH
46657: LD_INT 0
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PUSH
46664: LD_INT 1
46666: NEG
46667: PUSH
46668: LD_INT 1
46670: NEG
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: PUSH
46676: LD_INT 2
46678: PUSH
46679: LD_INT 1
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: PUSH
46686: LD_INT 2
46688: NEG
46689: PUSH
46690: LD_INT 1
46692: NEG
46693: PUSH
46694: EMPTY
46695: LIST
46696: LIST
46697: PUSH
46698: EMPTY
46699: LIST
46700: LIST
46701: LIST
46702: LIST
46703: LIST
46704: LIST
46705: LIST
46706: LIST
46707: LIST
46708: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46709: LD_ADDR_VAR 0 39
46713: PUSH
46714: LD_INT 0
46716: PUSH
46717: LD_INT 0
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PUSH
46724: LD_INT 0
46726: PUSH
46727: LD_INT 1
46729: NEG
46730: PUSH
46731: EMPTY
46732: LIST
46733: LIST
46734: PUSH
46735: LD_INT 1
46737: PUSH
46738: LD_INT 0
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: PUSH
46745: LD_INT 1
46747: PUSH
46748: LD_INT 1
46750: PUSH
46751: EMPTY
46752: LIST
46753: LIST
46754: PUSH
46755: LD_INT 0
46757: PUSH
46758: LD_INT 1
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: PUSH
46765: LD_INT 1
46767: NEG
46768: PUSH
46769: LD_INT 0
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PUSH
46776: LD_INT 1
46778: NEG
46779: PUSH
46780: LD_INT 1
46782: NEG
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 1
46790: NEG
46791: PUSH
46792: LD_INT 2
46794: NEG
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: PUSH
46800: LD_INT 1
46802: PUSH
46803: LD_INT 2
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: LIST
46814: LIST
46815: LIST
46816: LIST
46817: LIST
46818: LIST
46819: LIST
46820: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46821: LD_ADDR_VAR 0 40
46825: PUSH
46826: LD_INT 0
46828: PUSH
46829: LD_INT 0
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: PUSH
46836: LD_INT 0
46838: PUSH
46839: LD_INT 1
46841: NEG
46842: PUSH
46843: EMPTY
46844: LIST
46845: LIST
46846: PUSH
46847: LD_INT 1
46849: PUSH
46850: LD_INT 0
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: LD_INT 1
46859: PUSH
46860: LD_INT 1
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: PUSH
46867: LD_INT 0
46869: PUSH
46870: LD_INT 1
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: PUSH
46877: LD_INT 1
46879: NEG
46880: PUSH
46881: LD_INT 0
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 1
46890: NEG
46891: PUSH
46892: LD_INT 1
46894: NEG
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 1
46902: PUSH
46903: LD_INT 1
46905: NEG
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: PUSH
46911: LD_INT 1
46913: NEG
46914: PUSH
46915: LD_INT 1
46917: PUSH
46918: EMPTY
46919: LIST
46920: LIST
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: LIST
46926: LIST
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46933: LD_ADDR_VAR 0 41
46937: PUSH
46938: LD_INT 0
46940: PUSH
46941: LD_INT 0
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: PUSH
46948: LD_INT 0
46950: PUSH
46951: LD_INT 1
46953: NEG
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: PUSH
46959: LD_INT 1
46961: PUSH
46962: LD_INT 0
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: PUSH
46969: LD_INT 1
46971: PUSH
46972: LD_INT 1
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: LD_INT 0
46981: PUSH
46982: LD_INT 1
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: PUSH
46989: LD_INT 1
46991: NEG
46992: PUSH
46993: LD_INT 0
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: PUSH
47000: LD_INT 1
47002: NEG
47003: PUSH
47004: LD_INT 1
47006: NEG
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: LD_INT 1
47014: NEG
47015: PUSH
47016: LD_INT 2
47018: NEG
47019: PUSH
47020: EMPTY
47021: LIST
47022: LIST
47023: PUSH
47024: LD_INT 1
47026: PUSH
47027: LD_INT 1
47029: NEG
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 2
47037: PUSH
47038: LD_INT 0
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: PUSH
47045: LD_INT 2
47047: PUSH
47048: LD_INT 1
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: PUSH
47055: LD_INT 2
47057: PUSH
47058: LD_INT 2
47060: PUSH
47061: EMPTY
47062: LIST
47063: LIST
47064: PUSH
47065: LD_INT 1
47067: PUSH
47068: LD_INT 2
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: PUSH
47075: LD_INT 1
47077: NEG
47078: PUSH
47079: LD_INT 1
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: PUSH
47086: LD_INT 2
47088: NEG
47089: PUSH
47090: LD_INT 0
47092: PUSH
47093: EMPTY
47094: LIST
47095: LIST
47096: PUSH
47097: LD_INT 2
47099: NEG
47100: PUSH
47101: LD_INT 1
47103: NEG
47104: PUSH
47105: EMPTY
47106: LIST
47107: LIST
47108: PUSH
47109: LD_INT 2
47111: NEG
47112: PUSH
47113: LD_INT 2
47115: NEG
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: PUSH
47121: LD_INT 2
47123: NEG
47124: PUSH
47125: LD_INT 3
47127: NEG
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: LD_INT 2
47135: PUSH
47136: LD_INT 1
47138: NEG
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: LD_INT 3
47146: PUSH
47147: LD_INT 0
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PUSH
47154: LD_INT 3
47156: PUSH
47157: LD_INT 1
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: PUSH
47164: LD_INT 3
47166: PUSH
47167: LD_INT 2
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 3
47176: PUSH
47177: LD_INT 3
47179: PUSH
47180: EMPTY
47181: LIST
47182: LIST
47183: PUSH
47184: LD_INT 2
47186: PUSH
47187: LD_INT 3
47189: PUSH
47190: EMPTY
47191: LIST
47192: LIST
47193: PUSH
47194: LD_INT 2
47196: NEG
47197: PUSH
47198: LD_INT 1
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: PUSH
47205: LD_INT 3
47207: NEG
47208: PUSH
47209: LD_INT 0
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: LD_INT 3
47218: NEG
47219: PUSH
47220: LD_INT 1
47222: NEG
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: PUSH
47228: LD_INT 3
47230: NEG
47231: PUSH
47232: LD_INT 2
47234: NEG
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: PUSH
47240: LD_INT 3
47242: NEG
47243: PUSH
47244: LD_INT 3
47246: NEG
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: LIST
47256: LIST
47257: LIST
47258: LIST
47259: LIST
47260: LIST
47261: LIST
47262: LIST
47263: LIST
47264: LIST
47265: LIST
47266: LIST
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: LIST
47282: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47283: LD_ADDR_VAR 0 42
47287: PUSH
47288: LD_INT 0
47290: PUSH
47291: LD_INT 0
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: PUSH
47298: LD_INT 0
47300: PUSH
47301: LD_INT 1
47303: NEG
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: PUSH
47309: LD_INT 1
47311: PUSH
47312: LD_INT 0
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: PUSH
47319: LD_INT 1
47321: PUSH
47322: LD_INT 1
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: PUSH
47329: LD_INT 0
47331: PUSH
47332: LD_INT 1
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: PUSH
47339: LD_INT 1
47341: NEG
47342: PUSH
47343: LD_INT 0
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: LD_INT 1
47352: NEG
47353: PUSH
47354: LD_INT 1
47356: NEG
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: PUSH
47362: LD_INT 1
47364: NEG
47365: PUSH
47366: LD_INT 2
47368: NEG
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: PUSH
47374: LD_INT 0
47376: PUSH
47377: LD_INT 2
47379: NEG
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 1
47387: PUSH
47388: LD_INT 1
47390: NEG
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: PUSH
47396: LD_INT 2
47398: PUSH
47399: LD_INT 1
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: PUSH
47406: LD_INT 2
47408: PUSH
47409: LD_INT 2
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: LD_INT 1
47418: PUSH
47419: LD_INT 2
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PUSH
47426: LD_INT 0
47428: PUSH
47429: LD_INT 2
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: LD_INT 1
47438: NEG
47439: PUSH
47440: LD_INT 1
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: PUSH
47447: LD_INT 2
47449: NEG
47450: PUSH
47451: LD_INT 1
47453: NEG
47454: PUSH
47455: EMPTY
47456: LIST
47457: LIST
47458: PUSH
47459: LD_INT 2
47461: NEG
47462: PUSH
47463: LD_INT 2
47465: NEG
47466: PUSH
47467: EMPTY
47468: LIST
47469: LIST
47470: PUSH
47471: LD_INT 2
47473: NEG
47474: PUSH
47475: LD_INT 3
47477: NEG
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: PUSH
47483: LD_INT 1
47485: NEG
47486: PUSH
47487: LD_INT 3
47489: NEG
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: PUSH
47495: LD_INT 0
47497: PUSH
47498: LD_INT 3
47500: NEG
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: PUSH
47506: LD_INT 1
47508: PUSH
47509: LD_INT 2
47511: NEG
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: PUSH
47517: LD_INT 3
47519: PUSH
47520: LD_INT 2
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: LD_INT 3
47529: PUSH
47530: LD_INT 3
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: PUSH
47537: LD_INT 2
47539: PUSH
47540: LD_INT 3
47542: PUSH
47543: EMPTY
47544: LIST
47545: LIST
47546: PUSH
47547: LD_INT 1
47549: PUSH
47550: LD_INT 3
47552: PUSH
47553: EMPTY
47554: LIST
47555: LIST
47556: PUSH
47557: LD_INT 0
47559: PUSH
47560: LD_INT 3
47562: PUSH
47563: EMPTY
47564: LIST
47565: LIST
47566: PUSH
47567: LD_INT 1
47569: NEG
47570: PUSH
47571: LD_INT 2
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: PUSH
47578: LD_INT 3
47580: NEG
47581: PUSH
47582: LD_INT 2
47584: NEG
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: PUSH
47590: LD_INT 3
47592: NEG
47593: PUSH
47594: LD_INT 3
47596: NEG
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: LIST
47606: LIST
47607: LIST
47608: LIST
47609: LIST
47610: LIST
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47633: LD_ADDR_VAR 0 43
47637: PUSH
47638: LD_INT 0
47640: PUSH
47641: LD_INT 0
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: PUSH
47648: LD_INT 0
47650: PUSH
47651: LD_INT 1
47653: NEG
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: PUSH
47659: LD_INT 1
47661: PUSH
47662: LD_INT 0
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: PUSH
47669: LD_INT 1
47671: PUSH
47672: LD_INT 1
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: LD_INT 0
47681: PUSH
47682: LD_INT 1
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 1
47691: NEG
47692: PUSH
47693: LD_INT 0
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: LD_INT 1
47702: NEG
47703: PUSH
47704: LD_INT 1
47706: NEG
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PUSH
47712: LD_INT 1
47714: NEG
47715: PUSH
47716: LD_INT 2
47718: NEG
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: PUSH
47724: LD_INT 0
47726: PUSH
47727: LD_INT 2
47729: NEG
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: PUSH
47735: LD_INT 1
47737: PUSH
47738: LD_INT 1
47740: NEG
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: PUSH
47746: LD_INT 2
47748: PUSH
47749: LD_INT 0
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: LD_INT 2
47758: PUSH
47759: LD_INT 1
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PUSH
47766: LD_INT 1
47768: PUSH
47769: LD_INT 2
47771: PUSH
47772: EMPTY
47773: LIST
47774: LIST
47775: PUSH
47776: LD_INT 0
47778: PUSH
47779: LD_INT 2
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: PUSH
47786: LD_INT 1
47788: NEG
47789: PUSH
47790: LD_INT 1
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: PUSH
47797: LD_INT 2
47799: NEG
47800: PUSH
47801: LD_INT 0
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: LD_INT 2
47810: NEG
47811: PUSH
47812: LD_INT 1
47814: NEG
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 1
47822: NEG
47823: PUSH
47824: LD_INT 3
47826: NEG
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: LD_INT 0
47834: PUSH
47835: LD_INT 3
47837: NEG
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 1
47845: PUSH
47846: LD_INT 2
47848: NEG
47849: PUSH
47850: EMPTY
47851: LIST
47852: LIST
47853: PUSH
47854: LD_INT 2
47856: PUSH
47857: LD_INT 1
47859: NEG
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: PUSH
47865: LD_INT 3
47867: PUSH
47868: LD_INT 0
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 3
47877: PUSH
47878: LD_INT 1
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 1
47887: PUSH
47888: LD_INT 3
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: PUSH
47895: LD_INT 0
47897: PUSH
47898: LD_INT 3
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: PUSH
47905: LD_INT 1
47907: NEG
47908: PUSH
47909: LD_INT 2
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: PUSH
47916: LD_INT 2
47918: NEG
47919: PUSH
47920: LD_INT 1
47922: PUSH
47923: EMPTY
47924: LIST
47925: LIST
47926: PUSH
47927: LD_INT 3
47929: NEG
47930: PUSH
47931: LD_INT 0
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: PUSH
47938: LD_INT 3
47940: NEG
47941: PUSH
47942: LD_INT 1
47944: NEG
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: PUSH
47950: EMPTY
47951: LIST
47952: LIST
47953: LIST
47954: LIST
47955: LIST
47956: LIST
47957: LIST
47958: LIST
47959: LIST
47960: LIST
47961: LIST
47962: LIST
47963: LIST
47964: LIST
47965: LIST
47966: LIST
47967: LIST
47968: LIST
47969: LIST
47970: LIST
47971: LIST
47972: LIST
47973: LIST
47974: LIST
47975: LIST
47976: LIST
47977: LIST
47978: LIST
47979: LIST
47980: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47981: LD_ADDR_VAR 0 44
47985: PUSH
47986: LD_INT 0
47988: PUSH
47989: LD_INT 0
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: PUSH
47996: LD_INT 0
47998: PUSH
47999: LD_INT 1
48001: NEG
48002: PUSH
48003: EMPTY
48004: LIST
48005: LIST
48006: PUSH
48007: LD_INT 1
48009: PUSH
48010: LD_INT 0
48012: PUSH
48013: EMPTY
48014: LIST
48015: LIST
48016: PUSH
48017: LD_INT 1
48019: PUSH
48020: LD_INT 1
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: PUSH
48027: LD_INT 0
48029: PUSH
48030: LD_INT 1
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: PUSH
48037: LD_INT 1
48039: NEG
48040: PUSH
48041: LD_INT 0
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: PUSH
48048: LD_INT 1
48050: NEG
48051: PUSH
48052: LD_INT 1
48054: NEG
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: PUSH
48060: LD_INT 1
48062: NEG
48063: PUSH
48064: LD_INT 2
48066: NEG
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: PUSH
48072: LD_INT 1
48074: PUSH
48075: LD_INT 1
48077: NEG
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: PUSH
48083: LD_INT 2
48085: PUSH
48086: LD_INT 0
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: PUSH
48093: LD_INT 2
48095: PUSH
48096: LD_INT 1
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: PUSH
48103: LD_INT 2
48105: PUSH
48106: LD_INT 2
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 1
48115: PUSH
48116: LD_INT 2
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 1
48125: NEG
48126: PUSH
48127: LD_INT 1
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: PUSH
48134: LD_INT 2
48136: NEG
48137: PUSH
48138: LD_INT 0
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: PUSH
48145: LD_INT 2
48147: NEG
48148: PUSH
48149: LD_INT 1
48151: NEG
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: LD_INT 2
48159: NEG
48160: PUSH
48161: LD_INT 2
48163: NEG
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: PUSH
48169: LD_INT 2
48171: NEG
48172: PUSH
48173: LD_INT 3
48175: NEG
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: PUSH
48181: LD_INT 2
48183: PUSH
48184: LD_INT 1
48186: NEG
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: LD_INT 3
48194: PUSH
48195: LD_INT 0
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: PUSH
48202: LD_INT 3
48204: PUSH
48205: LD_INT 1
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: PUSH
48212: LD_INT 3
48214: PUSH
48215: LD_INT 2
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: PUSH
48222: LD_INT 3
48224: PUSH
48225: LD_INT 3
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: PUSH
48232: LD_INT 2
48234: PUSH
48235: LD_INT 3
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: PUSH
48242: LD_INT 2
48244: NEG
48245: PUSH
48246: LD_INT 1
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: PUSH
48253: LD_INT 3
48255: NEG
48256: PUSH
48257: LD_INT 0
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: PUSH
48264: LD_INT 3
48266: NEG
48267: PUSH
48268: LD_INT 1
48270: NEG
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: LD_INT 3
48278: NEG
48279: PUSH
48280: LD_INT 2
48282: NEG
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: LD_INT 3
48290: NEG
48291: PUSH
48292: LD_INT 3
48294: NEG
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: LIST
48304: LIST
48305: LIST
48306: LIST
48307: LIST
48308: LIST
48309: LIST
48310: LIST
48311: LIST
48312: LIST
48313: LIST
48314: LIST
48315: LIST
48316: LIST
48317: LIST
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: LIST
48325: LIST
48326: LIST
48327: LIST
48328: LIST
48329: LIST
48330: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48331: LD_ADDR_VAR 0 45
48335: PUSH
48336: LD_INT 0
48338: PUSH
48339: LD_INT 0
48341: PUSH
48342: EMPTY
48343: LIST
48344: LIST
48345: PUSH
48346: LD_INT 0
48348: PUSH
48349: LD_INT 1
48351: NEG
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: PUSH
48357: LD_INT 1
48359: PUSH
48360: LD_INT 0
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: LD_INT 1
48369: PUSH
48370: LD_INT 1
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: PUSH
48377: LD_INT 0
48379: PUSH
48380: LD_INT 1
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: PUSH
48387: LD_INT 1
48389: NEG
48390: PUSH
48391: LD_INT 0
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: LD_INT 1
48400: NEG
48401: PUSH
48402: LD_INT 1
48404: NEG
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: LD_INT 1
48412: NEG
48413: PUSH
48414: LD_INT 2
48416: NEG
48417: PUSH
48418: EMPTY
48419: LIST
48420: LIST
48421: PUSH
48422: LD_INT 0
48424: PUSH
48425: LD_INT 2
48427: NEG
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: PUSH
48433: LD_INT 1
48435: PUSH
48436: LD_INT 1
48438: NEG
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: LD_INT 2
48446: PUSH
48447: LD_INT 1
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: LD_INT 2
48456: PUSH
48457: LD_INT 2
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: LD_INT 1
48466: PUSH
48467: LD_INT 2
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: LD_INT 0
48476: PUSH
48477: LD_INT 2
48479: PUSH
48480: EMPTY
48481: LIST
48482: LIST
48483: PUSH
48484: LD_INT 1
48486: NEG
48487: PUSH
48488: LD_INT 1
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: PUSH
48495: LD_INT 2
48497: NEG
48498: PUSH
48499: LD_INT 1
48501: NEG
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 2
48509: NEG
48510: PUSH
48511: LD_INT 2
48513: NEG
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 2
48521: NEG
48522: PUSH
48523: LD_INT 3
48525: NEG
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_INT 1
48533: NEG
48534: PUSH
48535: LD_INT 3
48537: NEG
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 0
48545: PUSH
48546: LD_INT 3
48548: NEG
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: LD_INT 1
48556: PUSH
48557: LD_INT 2
48559: NEG
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: LD_INT 3
48567: PUSH
48568: LD_INT 2
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: PUSH
48575: LD_INT 3
48577: PUSH
48578: LD_INT 3
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: PUSH
48585: LD_INT 2
48587: PUSH
48588: LD_INT 3
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: LD_INT 1
48597: PUSH
48598: LD_INT 3
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: LD_INT 0
48607: PUSH
48608: LD_INT 3
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: LD_INT 1
48617: NEG
48618: PUSH
48619: LD_INT 2
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: PUSH
48626: LD_INT 3
48628: NEG
48629: PUSH
48630: LD_INT 2
48632: NEG
48633: PUSH
48634: EMPTY
48635: LIST
48636: LIST
48637: PUSH
48638: LD_INT 3
48640: NEG
48641: PUSH
48642: LD_INT 3
48644: NEG
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: EMPTY
48651: LIST
48652: LIST
48653: LIST
48654: LIST
48655: LIST
48656: LIST
48657: LIST
48658: LIST
48659: LIST
48660: LIST
48661: LIST
48662: LIST
48663: LIST
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: LIST
48676: LIST
48677: LIST
48678: LIST
48679: LIST
48680: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48681: LD_ADDR_VAR 0 46
48685: PUSH
48686: LD_INT 0
48688: PUSH
48689: LD_INT 0
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: PUSH
48696: LD_INT 0
48698: PUSH
48699: LD_INT 1
48701: NEG
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PUSH
48707: LD_INT 1
48709: PUSH
48710: LD_INT 0
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: PUSH
48717: LD_INT 1
48719: PUSH
48720: LD_INT 1
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: PUSH
48727: LD_INT 0
48729: PUSH
48730: LD_INT 1
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PUSH
48737: LD_INT 1
48739: NEG
48740: PUSH
48741: LD_INT 0
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: PUSH
48748: LD_INT 1
48750: NEG
48751: PUSH
48752: LD_INT 1
48754: NEG
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: PUSH
48760: LD_INT 1
48762: NEG
48763: PUSH
48764: LD_INT 2
48766: NEG
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: PUSH
48772: LD_INT 0
48774: PUSH
48775: LD_INT 2
48777: NEG
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: PUSH
48783: LD_INT 1
48785: PUSH
48786: LD_INT 1
48788: NEG
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: PUSH
48794: LD_INT 2
48796: PUSH
48797: LD_INT 0
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: LD_INT 2
48806: PUSH
48807: LD_INT 1
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: LD_INT 1
48816: PUSH
48817: LD_INT 2
48819: PUSH
48820: EMPTY
48821: LIST
48822: LIST
48823: PUSH
48824: LD_INT 0
48826: PUSH
48827: LD_INT 2
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PUSH
48834: LD_INT 1
48836: NEG
48837: PUSH
48838: LD_INT 1
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: PUSH
48845: LD_INT 2
48847: NEG
48848: PUSH
48849: LD_INT 0
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PUSH
48856: LD_INT 2
48858: NEG
48859: PUSH
48860: LD_INT 1
48862: NEG
48863: PUSH
48864: EMPTY
48865: LIST
48866: LIST
48867: PUSH
48868: LD_INT 1
48870: NEG
48871: PUSH
48872: LD_INT 3
48874: NEG
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: PUSH
48880: LD_INT 0
48882: PUSH
48883: LD_INT 3
48885: NEG
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: PUSH
48891: LD_INT 1
48893: PUSH
48894: LD_INT 2
48896: NEG
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: PUSH
48902: LD_INT 2
48904: PUSH
48905: LD_INT 1
48907: NEG
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PUSH
48913: LD_INT 3
48915: PUSH
48916: LD_INT 0
48918: PUSH
48919: EMPTY
48920: LIST
48921: LIST
48922: PUSH
48923: LD_INT 3
48925: PUSH
48926: LD_INT 1
48928: PUSH
48929: EMPTY
48930: LIST
48931: LIST
48932: PUSH
48933: LD_INT 1
48935: PUSH
48936: LD_INT 3
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: PUSH
48943: LD_INT 0
48945: PUSH
48946: LD_INT 3
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: PUSH
48953: LD_INT 1
48955: NEG
48956: PUSH
48957: LD_INT 2
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: PUSH
48964: LD_INT 2
48966: NEG
48967: PUSH
48968: LD_INT 1
48970: PUSH
48971: EMPTY
48972: LIST
48973: LIST
48974: PUSH
48975: LD_INT 3
48977: NEG
48978: PUSH
48979: LD_INT 0
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: PUSH
48986: LD_INT 3
48988: NEG
48989: PUSH
48990: LD_INT 1
48992: NEG
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: LIST
49002: LIST
49003: LIST
49004: LIST
49005: LIST
49006: LIST
49007: LIST
49008: LIST
49009: LIST
49010: LIST
49011: LIST
49012: LIST
49013: LIST
49014: LIST
49015: LIST
49016: LIST
49017: LIST
49018: LIST
49019: LIST
49020: LIST
49021: LIST
49022: LIST
49023: LIST
49024: LIST
49025: LIST
49026: LIST
49027: LIST
49028: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49029: LD_ADDR_VAR 0 47
49033: PUSH
49034: LD_INT 0
49036: PUSH
49037: LD_INT 0
49039: PUSH
49040: EMPTY
49041: LIST
49042: LIST
49043: PUSH
49044: LD_INT 0
49046: PUSH
49047: LD_INT 1
49049: NEG
49050: PUSH
49051: EMPTY
49052: LIST
49053: LIST
49054: PUSH
49055: LD_INT 1
49057: PUSH
49058: LD_INT 0
49060: PUSH
49061: EMPTY
49062: LIST
49063: LIST
49064: PUSH
49065: LD_INT 1
49067: PUSH
49068: LD_INT 1
49070: PUSH
49071: EMPTY
49072: LIST
49073: LIST
49074: PUSH
49075: LD_INT 0
49077: PUSH
49078: LD_INT 1
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: PUSH
49085: LD_INT 1
49087: NEG
49088: PUSH
49089: LD_INT 0
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: PUSH
49096: LD_INT 1
49098: NEG
49099: PUSH
49100: LD_INT 1
49102: NEG
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: PUSH
49108: LD_INT 1
49110: NEG
49111: PUSH
49112: LD_INT 2
49114: NEG
49115: PUSH
49116: EMPTY
49117: LIST
49118: LIST
49119: PUSH
49120: LD_INT 0
49122: PUSH
49123: LD_INT 2
49125: NEG
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: PUSH
49131: LD_INT 1
49133: PUSH
49134: LD_INT 1
49136: NEG
49137: PUSH
49138: EMPTY
49139: LIST
49140: LIST
49141: PUSH
49142: LD_INT 2
49144: NEG
49145: PUSH
49146: LD_INT 1
49148: NEG
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: PUSH
49154: LD_INT 2
49156: NEG
49157: PUSH
49158: LD_INT 2
49160: NEG
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: LIST
49170: LIST
49171: LIST
49172: LIST
49173: LIST
49174: LIST
49175: LIST
49176: LIST
49177: LIST
49178: LIST
49179: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49180: LD_ADDR_VAR 0 48
49184: PUSH
49185: LD_INT 0
49187: PUSH
49188: LD_INT 0
49190: PUSH
49191: EMPTY
49192: LIST
49193: LIST
49194: PUSH
49195: LD_INT 0
49197: PUSH
49198: LD_INT 1
49200: NEG
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: PUSH
49206: LD_INT 1
49208: PUSH
49209: LD_INT 0
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: PUSH
49216: LD_INT 1
49218: PUSH
49219: LD_INT 1
49221: PUSH
49222: EMPTY
49223: LIST
49224: LIST
49225: PUSH
49226: LD_INT 0
49228: PUSH
49229: LD_INT 1
49231: PUSH
49232: EMPTY
49233: LIST
49234: LIST
49235: PUSH
49236: LD_INT 1
49238: NEG
49239: PUSH
49240: LD_INT 0
49242: PUSH
49243: EMPTY
49244: LIST
49245: LIST
49246: PUSH
49247: LD_INT 1
49249: NEG
49250: PUSH
49251: LD_INT 1
49253: NEG
49254: PUSH
49255: EMPTY
49256: LIST
49257: LIST
49258: PUSH
49259: LD_INT 1
49261: NEG
49262: PUSH
49263: LD_INT 2
49265: NEG
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: PUSH
49271: LD_INT 0
49273: PUSH
49274: LD_INT 2
49276: NEG
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 1
49284: PUSH
49285: LD_INT 1
49287: NEG
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 2
49295: PUSH
49296: LD_INT 0
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: PUSH
49303: LD_INT 2
49305: PUSH
49306: LD_INT 1
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: LIST
49317: LIST
49318: LIST
49319: LIST
49320: LIST
49321: LIST
49322: LIST
49323: LIST
49324: LIST
49325: LIST
49326: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49327: LD_ADDR_VAR 0 49
49331: PUSH
49332: LD_INT 0
49334: PUSH
49335: LD_INT 0
49337: PUSH
49338: EMPTY
49339: LIST
49340: LIST
49341: PUSH
49342: LD_INT 0
49344: PUSH
49345: LD_INT 1
49347: NEG
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: PUSH
49353: LD_INT 1
49355: PUSH
49356: LD_INT 0
49358: PUSH
49359: EMPTY
49360: LIST
49361: LIST
49362: PUSH
49363: LD_INT 1
49365: PUSH
49366: LD_INT 1
49368: PUSH
49369: EMPTY
49370: LIST
49371: LIST
49372: PUSH
49373: LD_INT 0
49375: PUSH
49376: LD_INT 1
49378: PUSH
49379: EMPTY
49380: LIST
49381: LIST
49382: PUSH
49383: LD_INT 1
49385: NEG
49386: PUSH
49387: LD_INT 0
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: PUSH
49394: LD_INT 1
49396: NEG
49397: PUSH
49398: LD_INT 1
49400: NEG
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PUSH
49406: LD_INT 1
49408: PUSH
49409: LD_INT 1
49411: NEG
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 2
49419: PUSH
49420: LD_INT 0
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: LD_INT 2
49429: PUSH
49430: LD_INT 1
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: PUSH
49437: LD_INT 2
49439: PUSH
49440: LD_INT 2
49442: PUSH
49443: EMPTY
49444: LIST
49445: LIST
49446: PUSH
49447: LD_INT 1
49449: PUSH
49450: LD_INT 2
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: LIST
49461: LIST
49462: LIST
49463: LIST
49464: LIST
49465: LIST
49466: LIST
49467: LIST
49468: LIST
49469: LIST
49470: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49471: LD_ADDR_VAR 0 50
49475: PUSH
49476: LD_INT 0
49478: PUSH
49479: LD_INT 0
49481: PUSH
49482: EMPTY
49483: LIST
49484: LIST
49485: PUSH
49486: LD_INT 0
49488: PUSH
49489: LD_INT 1
49491: NEG
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: PUSH
49497: LD_INT 1
49499: PUSH
49500: LD_INT 0
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: LD_INT 1
49509: PUSH
49510: LD_INT 1
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: PUSH
49517: LD_INT 0
49519: PUSH
49520: LD_INT 1
49522: PUSH
49523: EMPTY
49524: LIST
49525: LIST
49526: PUSH
49527: LD_INT 1
49529: NEG
49530: PUSH
49531: LD_INT 0
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: PUSH
49538: LD_INT 1
49540: NEG
49541: PUSH
49542: LD_INT 1
49544: NEG
49545: PUSH
49546: EMPTY
49547: LIST
49548: LIST
49549: PUSH
49550: LD_INT 2
49552: PUSH
49553: LD_INT 1
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 2
49562: PUSH
49563: LD_INT 2
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: PUSH
49570: LD_INT 1
49572: PUSH
49573: LD_INT 2
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: PUSH
49580: LD_INT 0
49582: PUSH
49583: LD_INT 2
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: PUSH
49590: LD_INT 1
49592: NEG
49593: PUSH
49594: LD_INT 1
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: LIST
49605: LIST
49606: LIST
49607: LIST
49608: LIST
49609: LIST
49610: LIST
49611: LIST
49612: LIST
49613: LIST
49614: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49615: LD_ADDR_VAR 0 51
49619: PUSH
49620: LD_INT 0
49622: PUSH
49623: LD_INT 0
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 0
49632: PUSH
49633: LD_INT 1
49635: NEG
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 1
49643: PUSH
49644: LD_INT 0
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 1
49653: PUSH
49654: LD_INT 1
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: PUSH
49661: LD_INT 0
49663: PUSH
49664: LD_INT 1
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: PUSH
49671: LD_INT 1
49673: NEG
49674: PUSH
49675: LD_INT 0
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: PUSH
49682: LD_INT 1
49684: NEG
49685: PUSH
49686: LD_INT 1
49688: NEG
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: LD_INT 1
49696: PUSH
49697: LD_INT 2
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: LD_INT 0
49706: PUSH
49707: LD_INT 2
49709: PUSH
49710: EMPTY
49711: LIST
49712: LIST
49713: PUSH
49714: LD_INT 1
49716: NEG
49717: PUSH
49718: LD_INT 1
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: PUSH
49725: LD_INT 2
49727: NEG
49728: PUSH
49729: LD_INT 0
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: PUSH
49736: LD_INT 2
49738: NEG
49739: PUSH
49740: LD_INT 1
49742: NEG
49743: PUSH
49744: EMPTY
49745: LIST
49746: LIST
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: LIST
49752: LIST
49753: LIST
49754: LIST
49755: LIST
49756: LIST
49757: LIST
49758: LIST
49759: LIST
49760: LIST
49761: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49762: LD_ADDR_VAR 0 52
49766: PUSH
49767: LD_INT 0
49769: PUSH
49770: LD_INT 0
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: LD_INT 0
49779: PUSH
49780: LD_INT 1
49782: NEG
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: PUSH
49788: LD_INT 1
49790: PUSH
49791: LD_INT 0
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: PUSH
49798: LD_INT 1
49800: PUSH
49801: LD_INT 1
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: LD_INT 0
49810: PUSH
49811: LD_INT 1
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 1
49820: NEG
49821: PUSH
49822: LD_INT 0
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: PUSH
49829: LD_INT 1
49831: NEG
49832: PUSH
49833: LD_INT 1
49835: NEG
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: PUSH
49841: LD_INT 1
49843: NEG
49844: PUSH
49845: LD_INT 2
49847: NEG
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 1
49855: NEG
49856: PUSH
49857: LD_INT 1
49859: PUSH
49860: EMPTY
49861: LIST
49862: LIST
49863: PUSH
49864: LD_INT 2
49866: NEG
49867: PUSH
49868: LD_INT 0
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: LD_INT 2
49877: NEG
49878: PUSH
49879: LD_INT 1
49881: NEG
49882: PUSH
49883: EMPTY
49884: LIST
49885: LIST
49886: PUSH
49887: LD_INT 2
49889: NEG
49890: PUSH
49891: LD_INT 2
49893: NEG
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: LIST
49912: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49913: LD_ADDR_VAR 0 53
49917: PUSH
49918: LD_INT 0
49920: PUSH
49921: LD_INT 0
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: PUSH
49928: LD_INT 0
49930: PUSH
49931: LD_INT 1
49933: NEG
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: LD_INT 1
49941: PUSH
49942: LD_INT 0
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: PUSH
49949: LD_INT 1
49951: PUSH
49952: LD_INT 1
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 0
49961: PUSH
49962: LD_INT 1
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 1
49971: NEG
49972: PUSH
49973: LD_INT 0
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: PUSH
49980: LD_INT 1
49982: NEG
49983: PUSH
49984: LD_INT 1
49986: NEG
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: LD_INT 1
49994: NEG
49995: PUSH
49996: LD_INT 2
49998: NEG
49999: PUSH
50000: EMPTY
50001: LIST
50002: LIST
50003: PUSH
50004: LD_INT 0
50006: PUSH
50007: LD_INT 2
50009: NEG
50010: PUSH
50011: EMPTY
50012: LIST
50013: LIST
50014: PUSH
50015: LD_INT 1
50017: PUSH
50018: LD_INT 1
50020: NEG
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: PUSH
50026: LD_INT 2
50028: PUSH
50029: LD_INT 0
50031: PUSH
50032: EMPTY
50033: LIST
50034: LIST
50035: PUSH
50036: LD_INT 2
50038: PUSH
50039: LD_INT 1
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: LD_INT 2
50048: PUSH
50049: LD_INT 2
50051: PUSH
50052: EMPTY
50053: LIST
50054: LIST
50055: PUSH
50056: LD_INT 1
50058: PUSH
50059: LD_INT 2
50061: PUSH
50062: EMPTY
50063: LIST
50064: LIST
50065: PUSH
50066: LD_INT 0
50068: PUSH
50069: LD_INT 2
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: PUSH
50076: LD_INT 1
50078: NEG
50079: PUSH
50080: LD_INT 1
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 2
50089: NEG
50090: PUSH
50091: LD_INT 0
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: PUSH
50098: LD_INT 2
50100: NEG
50101: PUSH
50102: LD_INT 1
50104: NEG
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: LD_INT 2
50112: NEG
50113: PUSH
50114: LD_INT 2
50116: NEG
50117: PUSH
50118: EMPTY
50119: LIST
50120: LIST
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: LIST
50126: LIST
50127: LIST
50128: LIST
50129: LIST
50130: LIST
50131: LIST
50132: LIST
50133: LIST
50134: LIST
50135: LIST
50136: LIST
50137: LIST
50138: LIST
50139: LIST
50140: LIST
50141: LIST
50142: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50143: LD_ADDR_VAR 0 54
50147: PUSH
50148: LD_INT 0
50150: PUSH
50151: LD_INT 0
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: PUSH
50158: LD_INT 0
50160: PUSH
50161: LD_INT 1
50163: NEG
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: PUSH
50169: LD_INT 1
50171: PUSH
50172: LD_INT 0
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: LD_INT 1
50181: PUSH
50182: LD_INT 1
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: LD_INT 0
50191: PUSH
50192: LD_INT 1
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 1
50201: NEG
50202: PUSH
50203: LD_INT 0
50205: PUSH
50206: EMPTY
50207: LIST
50208: LIST
50209: PUSH
50210: LD_INT 1
50212: NEG
50213: PUSH
50214: LD_INT 1
50216: NEG
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 1
50224: NEG
50225: PUSH
50226: LD_INT 2
50228: NEG
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: PUSH
50234: LD_INT 0
50236: PUSH
50237: LD_INT 2
50239: NEG
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 1
50247: PUSH
50248: LD_INT 1
50250: NEG
50251: PUSH
50252: EMPTY
50253: LIST
50254: LIST
50255: PUSH
50256: LD_INT 2
50258: PUSH
50259: LD_INT 0
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: PUSH
50266: LD_INT 2
50268: PUSH
50269: LD_INT 1
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: PUSH
50276: LD_INT 2
50278: PUSH
50279: LD_INT 2
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: PUSH
50286: LD_INT 1
50288: PUSH
50289: LD_INT 2
50291: PUSH
50292: EMPTY
50293: LIST
50294: LIST
50295: PUSH
50296: LD_INT 0
50298: PUSH
50299: LD_INT 2
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: PUSH
50306: LD_INT 1
50308: NEG
50309: PUSH
50310: LD_INT 1
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: PUSH
50317: LD_INT 2
50319: NEG
50320: PUSH
50321: LD_INT 0
50323: PUSH
50324: EMPTY
50325: LIST
50326: LIST
50327: PUSH
50328: LD_INT 2
50330: NEG
50331: PUSH
50332: LD_INT 1
50334: NEG
50335: PUSH
50336: EMPTY
50337: LIST
50338: LIST
50339: PUSH
50340: LD_INT 2
50342: NEG
50343: PUSH
50344: LD_INT 2
50346: NEG
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: LIST
50356: LIST
50357: LIST
50358: LIST
50359: LIST
50360: LIST
50361: LIST
50362: LIST
50363: LIST
50364: LIST
50365: LIST
50366: LIST
50367: LIST
50368: LIST
50369: LIST
50370: LIST
50371: LIST
50372: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50373: LD_ADDR_VAR 0 55
50377: PUSH
50378: LD_INT 0
50380: PUSH
50381: LD_INT 0
50383: PUSH
50384: EMPTY
50385: LIST
50386: LIST
50387: PUSH
50388: LD_INT 0
50390: PUSH
50391: LD_INT 1
50393: NEG
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: PUSH
50399: LD_INT 1
50401: PUSH
50402: LD_INT 0
50404: PUSH
50405: EMPTY
50406: LIST
50407: LIST
50408: PUSH
50409: LD_INT 1
50411: PUSH
50412: LD_INT 1
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 0
50421: PUSH
50422: LD_INT 1
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 1
50431: NEG
50432: PUSH
50433: LD_INT 0
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: LD_INT 1
50442: NEG
50443: PUSH
50444: LD_INT 1
50446: NEG
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: PUSH
50452: LD_INT 1
50454: NEG
50455: PUSH
50456: LD_INT 2
50458: NEG
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PUSH
50464: LD_INT 0
50466: PUSH
50467: LD_INT 2
50469: NEG
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: PUSH
50475: LD_INT 1
50477: PUSH
50478: LD_INT 1
50480: NEG
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: PUSH
50486: LD_INT 2
50488: PUSH
50489: LD_INT 0
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: PUSH
50496: LD_INT 2
50498: PUSH
50499: LD_INT 1
50501: PUSH
50502: EMPTY
50503: LIST
50504: LIST
50505: PUSH
50506: LD_INT 2
50508: PUSH
50509: LD_INT 2
50511: PUSH
50512: EMPTY
50513: LIST
50514: LIST
50515: PUSH
50516: LD_INT 1
50518: PUSH
50519: LD_INT 2
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: PUSH
50526: LD_INT 0
50528: PUSH
50529: LD_INT 2
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PUSH
50536: LD_INT 1
50538: NEG
50539: PUSH
50540: LD_INT 1
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: PUSH
50547: LD_INT 2
50549: NEG
50550: PUSH
50551: LD_INT 0
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: PUSH
50558: LD_INT 2
50560: NEG
50561: PUSH
50562: LD_INT 1
50564: NEG
50565: PUSH
50566: EMPTY
50567: LIST
50568: LIST
50569: PUSH
50570: LD_INT 2
50572: NEG
50573: PUSH
50574: LD_INT 2
50576: NEG
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: LIST
50592: LIST
50593: LIST
50594: LIST
50595: LIST
50596: LIST
50597: LIST
50598: LIST
50599: LIST
50600: LIST
50601: LIST
50602: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50603: LD_ADDR_VAR 0 56
50607: PUSH
50608: LD_INT 0
50610: PUSH
50611: LD_INT 0
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: LD_INT 0
50620: PUSH
50621: LD_INT 1
50623: NEG
50624: PUSH
50625: EMPTY
50626: LIST
50627: LIST
50628: PUSH
50629: LD_INT 1
50631: PUSH
50632: LD_INT 0
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: PUSH
50639: LD_INT 1
50641: PUSH
50642: LD_INT 1
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: PUSH
50649: LD_INT 0
50651: PUSH
50652: LD_INT 1
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: PUSH
50659: LD_INT 1
50661: NEG
50662: PUSH
50663: LD_INT 0
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: PUSH
50670: LD_INT 1
50672: NEG
50673: PUSH
50674: LD_INT 1
50676: NEG
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: PUSH
50682: LD_INT 1
50684: NEG
50685: PUSH
50686: LD_INT 2
50688: NEG
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: LD_INT 0
50696: PUSH
50697: LD_INT 2
50699: NEG
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: PUSH
50705: LD_INT 1
50707: PUSH
50708: LD_INT 1
50710: NEG
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: PUSH
50716: LD_INT 2
50718: PUSH
50719: LD_INT 0
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PUSH
50726: LD_INT 2
50728: PUSH
50729: LD_INT 1
50731: PUSH
50732: EMPTY
50733: LIST
50734: LIST
50735: PUSH
50736: LD_INT 2
50738: PUSH
50739: LD_INT 2
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: PUSH
50746: LD_INT 1
50748: PUSH
50749: LD_INT 2
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: PUSH
50756: LD_INT 0
50758: PUSH
50759: LD_INT 2
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: PUSH
50766: LD_INT 1
50768: NEG
50769: PUSH
50770: LD_INT 1
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: LD_INT 2
50779: NEG
50780: PUSH
50781: LD_INT 0
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: PUSH
50788: LD_INT 2
50790: NEG
50791: PUSH
50792: LD_INT 1
50794: NEG
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: PUSH
50800: LD_INT 2
50802: NEG
50803: PUSH
50804: LD_INT 2
50806: NEG
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: LIST
50816: LIST
50817: LIST
50818: LIST
50819: LIST
50820: LIST
50821: LIST
50822: LIST
50823: LIST
50824: LIST
50825: LIST
50826: LIST
50827: LIST
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50833: LD_ADDR_VAR 0 57
50837: PUSH
50838: LD_INT 0
50840: PUSH
50841: LD_INT 0
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: PUSH
50848: LD_INT 0
50850: PUSH
50851: LD_INT 1
50853: NEG
50854: PUSH
50855: EMPTY
50856: LIST
50857: LIST
50858: PUSH
50859: LD_INT 1
50861: PUSH
50862: LD_INT 0
50864: PUSH
50865: EMPTY
50866: LIST
50867: LIST
50868: PUSH
50869: LD_INT 1
50871: PUSH
50872: LD_INT 1
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: PUSH
50879: LD_INT 0
50881: PUSH
50882: LD_INT 1
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: PUSH
50889: LD_INT 1
50891: NEG
50892: PUSH
50893: LD_INT 0
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: LD_INT 1
50902: NEG
50903: PUSH
50904: LD_INT 1
50906: NEG
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: PUSH
50912: LD_INT 1
50914: NEG
50915: PUSH
50916: LD_INT 2
50918: NEG
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: PUSH
50924: LD_INT 0
50926: PUSH
50927: LD_INT 2
50929: NEG
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: PUSH
50935: LD_INT 1
50937: PUSH
50938: LD_INT 1
50940: NEG
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: PUSH
50946: LD_INT 2
50948: PUSH
50949: LD_INT 0
50951: PUSH
50952: EMPTY
50953: LIST
50954: LIST
50955: PUSH
50956: LD_INT 2
50958: PUSH
50959: LD_INT 1
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: PUSH
50966: LD_INT 2
50968: PUSH
50969: LD_INT 2
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: PUSH
50976: LD_INT 1
50978: PUSH
50979: LD_INT 2
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: PUSH
50986: LD_INT 0
50988: PUSH
50989: LD_INT 2
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PUSH
50996: LD_INT 1
50998: NEG
50999: PUSH
51000: LD_INT 1
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: PUSH
51007: LD_INT 2
51009: NEG
51010: PUSH
51011: LD_INT 0
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PUSH
51018: LD_INT 2
51020: NEG
51021: PUSH
51022: LD_INT 1
51024: NEG
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: PUSH
51030: LD_INT 2
51032: NEG
51033: PUSH
51034: LD_INT 2
51036: NEG
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: LIST
51046: LIST
51047: LIST
51048: LIST
51049: LIST
51050: LIST
51051: LIST
51052: LIST
51053: LIST
51054: LIST
51055: LIST
51056: LIST
51057: LIST
51058: LIST
51059: LIST
51060: LIST
51061: LIST
51062: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51063: LD_ADDR_VAR 0 58
51067: PUSH
51068: LD_INT 0
51070: PUSH
51071: LD_INT 0
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: PUSH
51078: LD_INT 0
51080: PUSH
51081: LD_INT 1
51083: NEG
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: PUSH
51089: LD_INT 1
51091: PUSH
51092: LD_INT 0
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: LD_INT 1
51101: PUSH
51102: LD_INT 1
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: LD_INT 0
51111: PUSH
51112: LD_INT 1
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: LD_INT 1
51121: NEG
51122: PUSH
51123: LD_INT 0
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: PUSH
51130: LD_INT 1
51132: NEG
51133: PUSH
51134: LD_INT 1
51136: NEG
51137: PUSH
51138: EMPTY
51139: LIST
51140: LIST
51141: PUSH
51142: LD_INT 1
51144: NEG
51145: PUSH
51146: LD_INT 2
51148: NEG
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: PUSH
51154: LD_INT 0
51156: PUSH
51157: LD_INT 2
51159: NEG
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: LD_INT 1
51167: PUSH
51168: LD_INT 1
51170: NEG
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: LD_INT 2
51178: PUSH
51179: LD_INT 0
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: LD_INT 2
51188: PUSH
51189: LD_INT 1
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: LD_INT 2
51198: PUSH
51199: LD_INT 2
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: PUSH
51206: LD_INT 1
51208: PUSH
51209: LD_INT 2
51211: PUSH
51212: EMPTY
51213: LIST
51214: LIST
51215: PUSH
51216: LD_INT 0
51218: PUSH
51219: LD_INT 2
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PUSH
51226: LD_INT 1
51228: NEG
51229: PUSH
51230: LD_INT 1
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: PUSH
51237: LD_INT 2
51239: NEG
51240: PUSH
51241: LD_INT 0
51243: PUSH
51244: EMPTY
51245: LIST
51246: LIST
51247: PUSH
51248: LD_INT 2
51250: NEG
51251: PUSH
51252: LD_INT 1
51254: NEG
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: LD_INT 2
51262: NEG
51263: PUSH
51264: LD_INT 2
51266: NEG
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: LIST
51276: LIST
51277: LIST
51278: LIST
51279: LIST
51280: LIST
51281: LIST
51282: LIST
51283: LIST
51284: LIST
51285: LIST
51286: LIST
51287: LIST
51288: LIST
51289: LIST
51290: LIST
51291: LIST
51292: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51293: LD_ADDR_VAR 0 59
51297: PUSH
51298: LD_INT 0
51300: PUSH
51301: LD_INT 0
51303: PUSH
51304: EMPTY
51305: LIST
51306: LIST
51307: PUSH
51308: LD_INT 0
51310: PUSH
51311: LD_INT 1
51313: NEG
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: PUSH
51319: LD_INT 1
51321: PUSH
51322: LD_INT 0
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: PUSH
51329: LD_INT 1
51331: PUSH
51332: LD_INT 1
51334: PUSH
51335: EMPTY
51336: LIST
51337: LIST
51338: PUSH
51339: LD_INT 0
51341: PUSH
51342: LD_INT 1
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: LD_INT 1
51351: NEG
51352: PUSH
51353: LD_INT 0
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PUSH
51360: LD_INT 1
51362: NEG
51363: PUSH
51364: LD_INT 1
51366: NEG
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: LIST
51376: LIST
51377: LIST
51378: LIST
51379: LIST
51380: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51381: LD_ADDR_VAR 0 60
51385: PUSH
51386: LD_INT 0
51388: PUSH
51389: LD_INT 0
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: PUSH
51396: LD_INT 0
51398: PUSH
51399: LD_INT 1
51401: NEG
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PUSH
51407: LD_INT 1
51409: PUSH
51410: LD_INT 0
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: LD_INT 1
51419: PUSH
51420: LD_INT 1
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: PUSH
51427: LD_INT 0
51429: PUSH
51430: LD_INT 1
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: PUSH
51437: LD_INT 1
51439: NEG
51440: PUSH
51441: LD_INT 0
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: LD_INT 1
51450: NEG
51451: PUSH
51452: LD_INT 1
51454: NEG
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: LIST
51464: LIST
51465: LIST
51466: LIST
51467: LIST
51468: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51469: LD_ADDR_VAR 0 61
51473: PUSH
51474: LD_INT 0
51476: PUSH
51477: LD_INT 0
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: PUSH
51484: LD_INT 0
51486: PUSH
51487: LD_INT 1
51489: NEG
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 1
51497: PUSH
51498: LD_INT 0
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 1
51507: PUSH
51508: LD_INT 1
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: PUSH
51515: LD_INT 0
51517: PUSH
51518: LD_INT 1
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: PUSH
51525: LD_INT 1
51527: NEG
51528: PUSH
51529: LD_INT 0
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: LD_INT 1
51538: NEG
51539: PUSH
51540: LD_INT 1
51542: NEG
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: LIST
51552: LIST
51553: LIST
51554: LIST
51555: LIST
51556: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51557: LD_ADDR_VAR 0 62
51561: PUSH
51562: LD_INT 0
51564: PUSH
51565: LD_INT 0
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: LD_INT 0
51574: PUSH
51575: LD_INT 1
51577: NEG
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: PUSH
51583: LD_INT 1
51585: PUSH
51586: LD_INT 0
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 1
51595: PUSH
51596: LD_INT 1
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: LD_INT 0
51605: PUSH
51606: LD_INT 1
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: PUSH
51613: LD_INT 1
51615: NEG
51616: PUSH
51617: LD_INT 0
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: LD_INT 1
51626: NEG
51627: PUSH
51628: LD_INT 1
51630: NEG
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: LIST
51640: LIST
51641: LIST
51642: LIST
51643: LIST
51644: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51645: LD_ADDR_VAR 0 63
51649: PUSH
51650: LD_INT 0
51652: PUSH
51653: LD_INT 0
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: PUSH
51660: LD_INT 0
51662: PUSH
51663: LD_INT 1
51665: NEG
51666: PUSH
51667: EMPTY
51668: LIST
51669: LIST
51670: PUSH
51671: LD_INT 1
51673: PUSH
51674: LD_INT 0
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: PUSH
51681: LD_INT 1
51683: PUSH
51684: LD_INT 1
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: PUSH
51691: LD_INT 0
51693: PUSH
51694: LD_INT 1
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: PUSH
51701: LD_INT 1
51703: NEG
51704: PUSH
51705: LD_INT 0
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_INT 1
51714: NEG
51715: PUSH
51716: LD_INT 1
51718: NEG
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: LIST
51728: LIST
51729: LIST
51730: LIST
51731: LIST
51732: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51733: LD_ADDR_VAR 0 64
51737: PUSH
51738: LD_INT 0
51740: PUSH
51741: LD_INT 0
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: LD_INT 0
51750: PUSH
51751: LD_INT 1
51753: NEG
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PUSH
51759: LD_INT 1
51761: PUSH
51762: LD_INT 0
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: LD_INT 1
51771: PUSH
51772: LD_INT 1
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PUSH
51779: LD_INT 0
51781: PUSH
51782: LD_INT 1
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: PUSH
51789: LD_INT 1
51791: NEG
51792: PUSH
51793: LD_INT 0
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: PUSH
51800: LD_INT 1
51802: NEG
51803: PUSH
51804: LD_INT 1
51806: NEG
51807: PUSH
51808: EMPTY
51809: LIST
51810: LIST
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: LIST
51816: LIST
51817: LIST
51818: LIST
51819: LIST
51820: ST_TO_ADDR
// end ; 1 :
51821: GO 57718
51823: LD_INT 1
51825: DOUBLE
51826: EQUAL
51827: IFTRUE 51831
51829: GO 54454
51831: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51832: LD_ADDR_VAR 0 11
51836: PUSH
51837: LD_INT 1
51839: NEG
51840: PUSH
51841: LD_INT 3
51843: NEG
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: PUSH
51849: LD_INT 0
51851: PUSH
51852: LD_INT 3
51854: NEG
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: LD_INT 1
51862: PUSH
51863: LD_INT 2
51865: NEG
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: PUSH
51871: EMPTY
51872: LIST
51873: LIST
51874: LIST
51875: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51876: LD_ADDR_VAR 0 12
51880: PUSH
51881: LD_INT 2
51883: PUSH
51884: LD_INT 1
51886: NEG
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PUSH
51892: LD_INT 3
51894: PUSH
51895: LD_INT 0
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 3
51904: PUSH
51905: LD_INT 1
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: LIST
51916: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51917: LD_ADDR_VAR 0 13
51921: PUSH
51922: LD_INT 3
51924: PUSH
51925: LD_INT 2
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: PUSH
51932: LD_INT 3
51934: PUSH
51935: LD_INT 3
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: PUSH
51942: LD_INT 2
51944: PUSH
51945: LD_INT 3
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: LIST
51956: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51957: LD_ADDR_VAR 0 14
51961: PUSH
51962: LD_INT 1
51964: PUSH
51965: LD_INT 3
51967: PUSH
51968: EMPTY
51969: LIST
51970: LIST
51971: PUSH
51972: LD_INT 0
51974: PUSH
51975: LD_INT 3
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 1
51984: NEG
51985: PUSH
51986: LD_INT 2
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: PUSH
51993: EMPTY
51994: LIST
51995: LIST
51996: LIST
51997: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51998: LD_ADDR_VAR 0 15
52002: PUSH
52003: LD_INT 2
52005: NEG
52006: PUSH
52007: LD_INT 1
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 3
52016: NEG
52017: PUSH
52018: LD_INT 0
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 3
52027: NEG
52028: PUSH
52029: LD_INT 1
52031: NEG
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: LIST
52041: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52042: LD_ADDR_VAR 0 16
52046: PUSH
52047: LD_INT 2
52049: NEG
52050: PUSH
52051: LD_INT 3
52053: NEG
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: PUSH
52059: LD_INT 3
52061: NEG
52062: PUSH
52063: LD_INT 2
52065: NEG
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: LD_INT 3
52073: NEG
52074: PUSH
52075: LD_INT 3
52077: NEG
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: LIST
52087: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52088: LD_ADDR_VAR 0 17
52092: PUSH
52093: LD_INT 1
52095: NEG
52096: PUSH
52097: LD_INT 3
52099: NEG
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: LD_INT 0
52107: PUSH
52108: LD_INT 3
52110: NEG
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PUSH
52116: LD_INT 1
52118: PUSH
52119: LD_INT 2
52121: NEG
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: LIST
52131: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52132: LD_ADDR_VAR 0 18
52136: PUSH
52137: LD_INT 2
52139: PUSH
52140: LD_INT 1
52142: NEG
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: PUSH
52148: LD_INT 3
52150: PUSH
52151: LD_INT 0
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: LD_INT 3
52160: PUSH
52161: LD_INT 1
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: LIST
52172: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52173: LD_ADDR_VAR 0 19
52177: PUSH
52178: LD_INT 3
52180: PUSH
52181: LD_INT 2
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: LD_INT 3
52190: PUSH
52191: LD_INT 3
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 2
52200: PUSH
52201: LD_INT 3
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: LIST
52212: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52213: LD_ADDR_VAR 0 20
52217: PUSH
52218: LD_INT 1
52220: PUSH
52221: LD_INT 3
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: PUSH
52228: LD_INT 0
52230: PUSH
52231: LD_INT 3
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: LD_INT 1
52240: NEG
52241: PUSH
52242: LD_INT 2
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: LIST
52253: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52254: LD_ADDR_VAR 0 21
52258: PUSH
52259: LD_INT 2
52261: NEG
52262: PUSH
52263: LD_INT 1
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: PUSH
52270: LD_INT 3
52272: NEG
52273: PUSH
52274: LD_INT 0
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: PUSH
52281: LD_INT 3
52283: NEG
52284: PUSH
52285: LD_INT 1
52287: NEG
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: PUSH
52293: EMPTY
52294: LIST
52295: LIST
52296: LIST
52297: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52298: LD_ADDR_VAR 0 22
52302: PUSH
52303: LD_INT 2
52305: NEG
52306: PUSH
52307: LD_INT 3
52309: NEG
52310: PUSH
52311: EMPTY
52312: LIST
52313: LIST
52314: PUSH
52315: LD_INT 3
52317: NEG
52318: PUSH
52319: LD_INT 2
52321: NEG
52322: PUSH
52323: EMPTY
52324: LIST
52325: LIST
52326: PUSH
52327: LD_INT 3
52329: NEG
52330: PUSH
52331: LD_INT 3
52333: NEG
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: LIST
52343: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
52344: LD_ADDR_VAR 0 23
52348: PUSH
52349: LD_INT 0
52351: PUSH
52352: LD_INT 3
52354: NEG
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PUSH
52360: LD_INT 1
52362: NEG
52363: PUSH
52364: LD_INT 4
52366: NEG
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: LD_INT 1
52374: PUSH
52375: LD_INT 3
52377: NEG
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: LIST
52387: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
52388: LD_ADDR_VAR 0 24
52392: PUSH
52393: LD_INT 3
52395: PUSH
52396: LD_INT 0
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 3
52405: PUSH
52406: LD_INT 1
52408: NEG
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 4
52416: PUSH
52417: LD_INT 1
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: LIST
52428: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
52429: LD_ADDR_VAR 0 25
52433: PUSH
52434: LD_INT 3
52436: PUSH
52437: LD_INT 3
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: PUSH
52444: LD_INT 4
52446: PUSH
52447: LD_INT 3
52449: PUSH
52450: EMPTY
52451: LIST
52452: LIST
52453: PUSH
52454: LD_INT 3
52456: PUSH
52457: LD_INT 4
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: LIST
52468: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
52469: LD_ADDR_VAR 0 26
52473: PUSH
52474: LD_INT 0
52476: PUSH
52477: LD_INT 3
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: LD_INT 1
52486: PUSH
52487: LD_INT 4
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: LD_INT 1
52496: NEG
52497: PUSH
52498: LD_INT 3
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: LIST
52509: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
52510: LD_ADDR_VAR 0 27
52514: PUSH
52515: LD_INT 3
52517: NEG
52518: PUSH
52519: LD_INT 0
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 3
52528: NEG
52529: PUSH
52530: LD_INT 1
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: LD_INT 4
52539: NEG
52540: PUSH
52541: LD_INT 1
52543: NEG
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: LIST
52553: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
52554: LD_ADDR_VAR 0 28
52558: PUSH
52559: LD_INT 3
52561: NEG
52562: PUSH
52563: LD_INT 3
52565: NEG
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: PUSH
52571: LD_INT 3
52573: NEG
52574: PUSH
52575: LD_INT 4
52577: NEG
52578: PUSH
52579: EMPTY
52580: LIST
52581: LIST
52582: PUSH
52583: LD_INT 4
52585: NEG
52586: PUSH
52587: LD_INT 3
52589: NEG
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: LIST
52599: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
52600: LD_ADDR_VAR 0 29
52604: PUSH
52605: LD_INT 1
52607: NEG
52608: PUSH
52609: LD_INT 3
52611: NEG
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: PUSH
52617: LD_INT 0
52619: PUSH
52620: LD_INT 3
52622: NEG
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: PUSH
52628: LD_INT 1
52630: PUSH
52631: LD_INT 2
52633: NEG
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: LD_INT 1
52641: NEG
52642: PUSH
52643: LD_INT 4
52645: NEG
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: PUSH
52651: LD_INT 0
52653: PUSH
52654: LD_INT 4
52656: NEG
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: LD_INT 1
52664: PUSH
52665: LD_INT 3
52667: NEG
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: LD_INT 1
52675: NEG
52676: PUSH
52677: LD_INT 5
52679: NEG
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: PUSH
52685: LD_INT 0
52687: PUSH
52688: LD_INT 5
52690: NEG
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: LD_INT 1
52698: PUSH
52699: LD_INT 4
52701: NEG
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: PUSH
52707: LD_INT 1
52709: NEG
52710: PUSH
52711: LD_INT 6
52713: NEG
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: PUSH
52719: LD_INT 0
52721: PUSH
52722: LD_INT 6
52724: NEG
52725: PUSH
52726: EMPTY
52727: LIST
52728: LIST
52729: PUSH
52730: LD_INT 1
52732: PUSH
52733: LD_INT 5
52735: NEG
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
52755: LD_ADDR_VAR 0 30
52759: PUSH
52760: LD_INT 2
52762: PUSH
52763: LD_INT 1
52765: NEG
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: PUSH
52771: LD_INT 3
52773: PUSH
52774: LD_INT 0
52776: PUSH
52777: EMPTY
52778: LIST
52779: LIST
52780: PUSH
52781: LD_INT 3
52783: PUSH
52784: LD_INT 1
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: PUSH
52791: LD_INT 3
52793: PUSH
52794: LD_INT 1
52796: NEG
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: PUSH
52802: LD_INT 4
52804: PUSH
52805: LD_INT 0
52807: PUSH
52808: EMPTY
52809: LIST
52810: LIST
52811: PUSH
52812: LD_INT 4
52814: PUSH
52815: LD_INT 1
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: PUSH
52822: LD_INT 4
52824: PUSH
52825: LD_INT 1
52827: NEG
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: PUSH
52833: LD_INT 5
52835: PUSH
52836: LD_INT 0
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: PUSH
52843: LD_INT 5
52845: PUSH
52846: LD_INT 1
52848: PUSH
52849: EMPTY
52850: LIST
52851: LIST
52852: PUSH
52853: LD_INT 5
52855: PUSH
52856: LD_INT 1
52858: NEG
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: PUSH
52864: LD_INT 6
52866: PUSH
52867: LD_INT 0
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: PUSH
52874: LD_INT 6
52876: PUSH
52877: LD_INT 1
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: LIST
52888: LIST
52889: LIST
52890: LIST
52891: LIST
52892: LIST
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
52898: LD_ADDR_VAR 0 31
52902: PUSH
52903: LD_INT 3
52905: PUSH
52906: LD_INT 2
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: LD_INT 3
52915: PUSH
52916: LD_INT 3
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PUSH
52923: LD_INT 2
52925: PUSH
52926: LD_INT 3
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: LD_INT 4
52935: PUSH
52936: LD_INT 3
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: LD_INT 4
52945: PUSH
52946: LD_INT 4
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: PUSH
52953: LD_INT 3
52955: PUSH
52956: LD_INT 4
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: PUSH
52963: LD_INT 5
52965: PUSH
52966: LD_INT 4
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: LD_INT 5
52975: PUSH
52976: LD_INT 5
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: PUSH
52983: LD_INT 4
52985: PUSH
52986: LD_INT 5
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 6
52995: PUSH
52996: LD_INT 5
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: LD_INT 6
53005: PUSH
53006: LD_INT 6
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: LD_INT 5
53015: PUSH
53016: LD_INT 6
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
53037: LD_ADDR_VAR 0 32
53041: PUSH
53042: LD_INT 1
53044: PUSH
53045: LD_INT 3
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 0
53054: PUSH
53055: LD_INT 3
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 1
53064: NEG
53065: PUSH
53066: LD_INT 2
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: PUSH
53073: LD_INT 1
53075: PUSH
53076: LD_INT 4
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: LD_INT 0
53085: PUSH
53086: LD_INT 4
53088: PUSH
53089: EMPTY
53090: LIST
53091: LIST
53092: PUSH
53093: LD_INT 1
53095: NEG
53096: PUSH
53097: LD_INT 3
53099: PUSH
53100: EMPTY
53101: LIST
53102: LIST
53103: PUSH
53104: LD_INT 1
53106: PUSH
53107: LD_INT 5
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: PUSH
53114: LD_INT 0
53116: PUSH
53117: LD_INT 5
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: PUSH
53124: LD_INT 1
53126: NEG
53127: PUSH
53128: LD_INT 4
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: PUSH
53135: LD_INT 1
53137: PUSH
53138: LD_INT 6
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: LD_INT 0
53147: PUSH
53148: LD_INT 6
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: PUSH
53155: LD_INT 1
53157: NEG
53158: PUSH
53159: LD_INT 5
53161: PUSH
53162: EMPTY
53163: LIST
53164: LIST
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: LIST
53170: LIST
53171: LIST
53172: LIST
53173: LIST
53174: LIST
53175: LIST
53176: LIST
53177: LIST
53178: LIST
53179: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
53180: LD_ADDR_VAR 0 33
53184: PUSH
53185: LD_INT 2
53187: NEG
53188: PUSH
53189: LD_INT 1
53191: PUSH
53192: EMPTY
53193: LIST
53194: LIST
53195: PUSH
53196: LD_INT 3
53198: NEG
53199: PUSH
53200: LD_INT 0
53202: PUSH
53203: EMPTY
53204: LIST
53205: LIST
53206: PUSH
53207: LD_INT 3
53209: NEG
53210: PUSH
53211: LD_INT 1
53213: NEG
53214: PUSH
53215: EMPTY
53216: LIST
53217: LIST
53218: PUSH
53219: LD_INT 3
53221: NEG
53222: PUSH
53223: LD_INT 1
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: PUSH
53230: LD_INT 4
53232: NEG
53233: PUSH
53234: LD_INT 0
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: LD_INT 4
53243: NEG
53244: PUSH
53245: LD_INT 1
53247: NEG
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: LD_INT 4
53255: NEG
53256: PUSH
53257: LD_INT 1
53259: PUSH
53260: EMPTY
53261: LIST
53262: LIST
53263: PUSH
53264: LD_INT 5
53266: NEG
53267: PUSH
53268: LD_INT 0
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: PUSH
53275: LD_INT 5
53277: NEG
53278: PUSH
53279: LD_INT 1
53281: NEG
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: PUSH
53287: LD_INT 5
53289: NEG
53290: PUSH
53291: LD_INT 1
53293: PUSH
53294: EMPTY
53295: LIST
53296: LIST
53297: PUSH
53298: LD_INT 6
53300: NEG
53301: PUSH
53302: LD_INT 0
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: PUSH
53309: LD_INT 6
53311: NEG
53312: PUSH
53313: LD_INT 1
53315: NEG
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: PUSH
53321: EMPTY
53322: LIST
53323: LIST
53324: LIST
53325: LIST
53326: LIST
53327: LIST
53328: LIST
53329: LIST
53330: LIST
53331: LIST
53332: LIST
53333: LIST
53334: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
53335: LD_ADDR_VAR 0 34
53339: PUSH
53340: LD_INT 2
53342: NEG
53343: PUSH
53344: LD_INT 3
53346: NEG
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: PUSH
53352: LD_INT 3
53354: NEG
53355: PUSH
53356: LD_INT 2
53358: NEG
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: PUSH
53364: LD_INT 3
53366: NEG
53367: PUSH
53368: LD_INT 3
53370: NEG
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: PUSH
53376: LD_INT 3
53378: NEG
53379: PUSH
53380: LD_INT 4
53382: NEG
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: PUSH
53388: LD_INT 4
53390: NEG
53391: PUSH
53392: LD_INT 3
53394: NEG
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: PUSH
53400: LD_INT 4
53402: NEG
53403: PUSH
53404: LD_INT 4
53406: NEG
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: PUSH
53412: LD_INT 4
53414: NEG
53415: PUSH
53416: LD_INT 5
53418: NEG
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: PUSH
53424: LD_INT 5
53426: NEG
53427: PUSH
53428: LD_INT 4
53430: NEG
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: PUSH
53436: LD_INT 5
53438: NEG
53439: PUSH
53440: LD_INT 5
53442: NEG
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: PUSH
53448: LD_INT 5
53450: NEG
53451: PUSH
53452: LD_INT 6
53454: NEG
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: LD_INT 6
53462: NEG
53463: PUSH
53464: LD_INT 5
53466: NEG
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: PUSH
53472: LD_INT 6
53474: NEG
53475: PUSH
53476: LD_INT 6
53478: NEG
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
53498: LD_ADDR_VAR 0 41
53502: PUSH
53503: LD_INT 0
53505: PUSH
53506: LD_INT 2
53508: NEG
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: PUSH
53514: LD_INT 1
53516: NEG
53517: PUSH
53518: LD_INT 3
53520: NEG
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 1
53528: PUSH
53529: LD_INT 2
53531: NEG
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: LIST
53541: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
53542: LD_ADDR_VAR 0 42
53546: PUSH
53547: LD_INT 2
53549: PUSH
53550: LD_INT 0
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: PUSH
53557: LD_INT 2
53559: PUSH
53560: LD_INT 1
53562: NEG
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: LD_INT 3
53570: PUSH
53571: LD_INT 1
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: LIST
53582: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
53583: LD_ADDR_VAR 0 43
53587: PUSH
53588: LD_INT 2
53590: PUSH
53591: LD_INT 2
53593: PUSH
53594: EMPTY
53595: LIST
53596: LIST
53597: PUSH
53598: LD_INT 3
53600: PUSH
53601: LD_INT 2
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: PUSH
53608: LD_INT 2
53610: PUSH
53611: LD_INT 3
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: LIST
53622: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
53623: LD_ADDR_VAR 0 44
53627: PUSH
53628: LD_INT 0
53630: PUSH
53631: LD_INT 2
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: PUSH
53638: LD_INT 1
53640: PUSH
53641: LD_INT 3
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: PUSH
53648: LD_INT 1
53650: NEG
53651: PUSH
53652: LD_INT 2
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: LIST
53663: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53664: LD_ADDR_VAR 0 45
53668: PUSH
53669: LD_INT 2
53671: NEG
53672: PUSH
53673: LD_INT 0
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: LD_INT 2
53682: NEG
53683: PUSH
53684: LD_INT 1
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: LD_INT 3
53693: NEG
53694: PUSH
53695: LD_INT 1
53697: NEG
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: LIST
53707: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
53708: LD_ADDR_VAR 0 46
53712: PUSH
53713: LD_INT 2
53715: NEG
53716: PUSH
53717: LD_INT 2
53719: NEG
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: PUSH
53725: LD_INT 2
53727: NEG
53728: PUSH
53729: LD_INT 3
53731: NEG
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: PUSH
53737: LD_INT 3
53739: NEG
53740: PUSH
53741: LD_INT 2
53743: NEG
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: EMPTY
53750: LIST
53751: LIST
53752: LIST
53753: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
53754: LD_ADDR_VAR 0 47
53758: PUSH
53759: LD_INT 2
53761: NEG
53762: PUSH
53763: LD_INT 3
53765: NEG
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 1
53773: NEG
53774: PUSH
53775: LD_INT 3
53777: NEG
53778: PUSH
53779: EMPTY
53780: LIST
53781: LIST
53782: PUSH
53783: EMPTY
53784: LIST
53785: LIST
53786: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53787: LD_ADDR_VAR 0 48
53791: PUSH
53792: LD_INT 1
53794: PUSH
53795: LD_INT 2
53797: NEG
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: PUSH
53803: LD_INT 2
53805: PUSH
53806: LD_INT 1
53808: NEG
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
53818: LD_ADDR_VAR 0 49
53822: PUSH
53823: LD_INT 3
53825: PUSH
53826: LD_INT 1
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: LD_INT 3
53835: PUSH
53836: LD_INT 2
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
53847: LD_ADDR_VAR 0 50
53851: PUSH
53852: LD_INT 2
53854: PUSH
53855: LD_INT 3
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: LD_INT 1
53864: PUSH
53865: LD_INT 3
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53876: LD_ADDR_VAR 0 51
53880: PUSH
53881: LD_INT 1
53883: NEG
53884: PUSH
53885: LD_INT 2
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: LD_INT 2
53894: NEG
53895: PUSH
53896: LD_INT 1
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53907: LD_ADDR_VAR 0 52
53911: PUSH
53912: LD_INT 3
53914: NEG
53915: PUSH
53916: LD_INT 1
53918: NEG
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 3
53926: NEG
53927: PUSH
53928: LD_INT 2
53930: NEG
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53940: LD_ADDR_VAR 0 53
53944: PUSH
53945: LD_INT 1
53947: NEG
53948: PUSH
53949: LD_INT 3
53951: NEG
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: PUSH
53957: LD_INT 0
53959: PUSH
53960: LD_INT 3
53962: NEG
53963: PUSH
53964: EMPTY
53965: LIST
53966: LIST
53967: PUSH
53968: LD_INT 1
53970: PUSH
53971: LD_INT 2
53973: NEG
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: LIST
53983: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53984: LD_ADDR_VAR 0 54
53988: PUSH
53989: LD_INT 2
53991: PUSH
53992: LD_INT 1
53994: NEG
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: PUSH
54000: LD_INT 3
54002: PUSH
54003: LD_INT 0
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PUSH
54010: LD_INT 3
54012: PUSH
54013: LD_INT 1
54015: PUSH
54016: EMPTY
54017: LIST
54018: LIST
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: LIST
54024: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54025: LD_ADDR_VAR 0 55
54029: PUSH
54030: LD_INT 3
54032: PUSH
54033: LD_INT 2
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: LD_INT 3
54042: PUSH
54043: LD_INT 3
54045: PUSH
54046: EMPTY
54047: LIST
54048: LIST
54049: PUSH
54050: LD_INT 2
54052: PUSH
54053: LD_INT 3
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: LIST
54064: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54065: LD_ADDR_VAR 0 56
54069: PUSH
54070: LD_INT 1
54072: PUSH
54073: LD_INT 3
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: LD_INT 0
54082: PUSH
54083: LD_INT 3
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: LD_INT 1
54092: NEG
54093: PUSH
54094: LD_INT 2
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: PUSH
54101: EMPTY
54102: LIST
54103: LIST
54104: LIST
54105: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54106: LD_ADDR_VAR 0 57
54110: PUSH
54111: LD_INT 2
54113: NEG
54114: PUSH
54115: LD_INT 1
54117: PUSH
54118: EMPTY
54119: LIST
54120: LIST
54121: PUSH
54122: LD_INT 3
54124: NEG
54125: PUSH
54126: LD_INT 0
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: LD_INT 3
54135: NEG
54136: PUSH
54137: LD_INT 1
54139: NEG
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: LIST
54149: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54150: LD_ADDR_VAR 0 58
54154: PUSH
54155: LD_INT 2
54157: NEG
54158: PUSH
54159: LD_INT 3
54161: NEG
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: PUSH
54167: LD_INT 3
54169: NEG
54170: PUSH
54171: LD_INT 2
54173: NEG
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: LD_INT 3
54181: NEG
54182: PUSH
54183: LD_INT 3
54185: NEG
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: LIST
54195: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
54196: LD_ADDR_VAR 0 59
54200: PUSH
54201: LD_INT 1
54203: NEG
54204: PUSH
54205: LD_INT 2
54207: NEG
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: LD_INT 0
54215: PUSH
54216: LD_INT 2
54218: NEG
54219: PUSH
54220: EMPTY
54221: LIST
54222: LIST
54223: PUSH
54224: LD_INT 1
54226: PUSH
54227: LD_INT 1
54229: NEG
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: LIST
54239: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54240: LD_ADDR_VAR 0 60
54244: PUSH
54245: LD_INT 1
54247: PUSH
54248: LD_INT 1
54250: NEG
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: PUSH
54256: LD_INT 2
54258: PUSH
54259: LD_INT 0
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: PUSH
54266: LD_INT 2
54268: PUSH
54269: LD_INT 1
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: LIST
54280: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54281: LD_ADDR_VAR 0 61
54285: PUSH
54286: LD_INT 2
54288: PUSH
54289: LD_INT 1
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 2
54298: PUSH
54299: LD_INT 2
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 1
54308: PUSH
54309: LD_INT 2
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: LIST
54320: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54321: LD_ADDR_VAR 0 62
54325: PUSH
54326: LD_INT 1
54328: PUSH
54329: LD_INT 2
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: LD_INT 0
54338: PUSH
54339: LD_INT 2
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 1
54348: NEG
54349: PUSH
54350: LD_INT 1
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: LIST
54361: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54362: LD_ADDR_VAR 0 63
54366: PUSH
54367: LD_INT 1
54369: NEG
54370: PUSH
54371: LD_INT 1
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: LD_INT 2
54380: NEG
54381: PUSH
54382: LD_INT 0
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: PUSH
54389: LD_INT 2
54391: NEG
54392: PUSH
54393: LD_INT 1
54395: NEG
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: LIST
54405: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54406: LD_ADDR_VAR 0 64
54410: PUSH
54411: LD_INT 1
54413: NEG
54414: PUSH
54415: LD_INT 2
54417: NEG
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: PUSH
54423: LD_INT 2
54425: NEG
54426: PUSH
54427: LD_INT 1
54429: NEG
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: LD_INT 2
54437: NEG
54438: PUSH
54439: LD_INT 2
54441: NEG
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: LIST
54451: ST_TO_ADDR
// end ; 2 :
54452: GO 57718
54454: LD_INT 2
54456: DOUBLE
54457: EQUAL
54458: IFTRUE 54462
54460: GO 57717
54462: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
54463: LD_ADDR_VAR 0 29
54467: PUSH
54468: LD_INT 4
54470: PUSH
54471: LD_INT 0
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 4
54480: PUSH
54481: LD_INT 1
54483: NEG
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 5
54491: PUSH
54492: LD_INT 0
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: LD_INT 5
54501: PUSH
54502: LD_INT 1
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: PUSH
54509: LD_INT 4
54511: PUSH
54512: LD_INT 1
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: LD_INT 3
54521: PUSH
54522: LD_INT 0
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 3
54531: PUSH
54532: LD_INT 1
54534: NEG
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: PUSH
54540: LD_INT 3
54542: PUSH
54543: LD_INT 2
54545: NEG
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: LD_INT 5
54553: PUSH
54554: LD_INT 2
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: LD_INT 3
54563: PUSH
54564: LD_INT 3
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: PUSH
54571: LD_INT 3
54573: PUSH
54574: LD_INT 2
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 4
54583: PUSH
54584: LD_INT 3
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PUSH
54591: LD_INT 4
54593: PUSH
54594: LD_INT 4
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 3
54603: PUSH
54604: LD_INT 4
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: LD_INT 2
54613: PUSH
54614: LD_INT 3
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: PUSH
54621: LD_INT 2
54623: PUSH
54624: LD_INT 2
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: LD_INT 4
54633: PUSH
54634: LD_INT 2
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: PUSH
54641: LD_INT 2
54643: PUSH
54644: LD_INT 4
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: PUSH
54651: LD_INT 0
54653: PUSH
54654: LD_INT 4
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: LD_INT 0
54663: PUSH
54664: LD_INT 3
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: PUSH
54671: LD_INT 1
54673: PUSH
54674: LD_INT 4
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 1
54683: PUSH
54684: LD_INT 5
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: PUSH
54691: LD_INT 0
54693: PUSH
54694: LD_INT 5
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: PUSH
54701: LD_INT 1
54703: NEG
54704: PUSH
54705: LD_INT 4
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: PUSH
54712: LD_INT 1
54714: NEG
54715: PUSH
54716: LD_INT 3
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: PUSH
54723: LD_INT 2
54725: PUSH
54726: LD_INT 5
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: LD_INT 2
54735: NEG
54736: PUSH
54737: LD_INT 3
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: PUSH
54744: LD_INT 3
54746: NEG
54747: PUSH
54748: LD_INT 0
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 3
54757: NEG
54758: PUSH
54759: LD_INT 1
54761: NEG
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: PUSH
54767: LD_INT 2
54769: NEG
54770: PUSH
54771: LD_INT 0
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: PUSH
54778: LD_INT 2
54780: NEG
54781: PUSH
54782: LD_INT 1
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 3
54791: NEG
54792: PUSH
54793: LD_INT 1
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_INT 4
54802: NEG
54803: PUSH
54804: LD_INT 0
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: LD_INT 4
54813: NEG
54814: PUSH
54815: LD_INT 1
54817: NEG
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 4
54825: NEG
54826: PUSH
54827: LD_INT 2
54829: NEG
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 2
54837: NEG
54838: PUSH
54839: LD_INT 2
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: LD_INT 4
54848: NEG
54849: PUSH
54850: LD_INT 4
54852: NEG
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: PUSH
54858: LD_INT 4
54860: NEG
54861: PUSH
54862: LD_INT 5
54864: NEG
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: PUSH
54870: LD_INT 3
54872: NEG
54873: PUSH
54874: LD_INT 4
54876: NEG
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: PUSH
54882: LD_INT 3
54884: NEG
54885: PUSH
54886: LD_INT 3
54888: NEG
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: PUSH
54894: LD_INT 4
54896: NEG
54897: PUSH
54898: LD_INT 3
54900: NEG
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: PUSH
54906: LD_INT 5
54908: NEG
54909: PUSH
54910: LD_INT 4
54912: NEG
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: LD_INT 5
54920: NEG
54921: PUSH
54922: LD_INT 5
54924: NEG
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: LD_INT 3
54932: NEG
54933: PUSH
54934: LD_INT 5
54936: NEG
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 5
54944: NEG
54945: PUSH
54946: LD_INT 3
54948: NEG
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: LIST
54958: LIST
54959: LIST
54960: LIST
54961: LIST
54962: LIST
54963: LIST
54964: LIST
54965: LIST
54966: LIST
54967: LIST
54968: LIST
54969: LIST
54970: LIST
54971: LIST
54972: LIST
54973: LIST
54974: LIST
54975: LIST
54976: LIST
54977: LIST
54978: LIST
54979: LIST
54980: LIST
54981: LIST
54982: LIST
54983: LIST
54984: LIST
54985: LIST
54986: LIST
54987: LIST
54988: LIST
54989: LIST
54990: LIST
54991: LIST
54992: LIST
54993: LIST
54994: LIST
54995: LIST
54996: LIST
54997: LIST
54998: LIST
54999: LIST
55000: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
55001: LD_ADDR_VAR 0 30
55005: PUSH
55006: LD_INT 4
55008: PUSH
55009: LD_INT 4
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: LD_INT 4
55018: PUSH
55019: LD_INT 3
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 5
55028: PUSH
55029: LD_INT 4
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: PUSH
55036: LD_INT 5
55038: PUSH
55039: LD_INT 5
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: PUSH
55046: LD_INT 4
55048: PUSH
55049: LD_INT 5
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: LD_INT 3
55058: PUSH
55059: LD_INT 4
55061: PUSH
55062: EMPTY
55063: LIST
55064: LIST
55065: PUSH
55066: LD_INT 3
55068: PUSH
55069: LD_INT 3
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: LD_INT 5
55078: PUSH
55079: LD_INT 3
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: LD_INT 3
55088: PUSH
55089: LD_INT 5
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 0
55098: PUSH
55099: LD_INT 3
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: LD_INT 0
55108: PUSH
55109: LD_INT 2
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PUSH
55116: LD_INT 1
55118: PUSH
55119: LD_INT 3
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: LD_INT 1
55128: PUSH
55129: LD_INT 4
55131: PUSH
55132: EMPTY
55133: LIST
55134: LIST
55135: PUSH
55136: LD_INT 0
55138: PUSH
55139: LD_INT 4
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: PUSH
55146: LD_INT 1
55148: NEG
55149: PUSH
55150: LD_INT 3
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: PUSH
55157: LD_INT 1
55159: NEG
55160: PUSH
55161: LD_INT 2
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: LD_INT 2
55170: PUSH
55171: LD_INT 4
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: LD_INT 2
55180: NEG
55181: PUSH
55182: LD_INT 2
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: PUSH
55189: LD_INT 4
55191: NEG
55192: PUSH
55193: LD_INT 0
55195: PUSH
55196: EMPTY
55197: LIST
55198: LIST
55199: PUSH
55200: LD_INT 4
55202: NEG
55203: PUSH
55204: LD_INT 1
55206: NEG
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: PUSH
55212: LD_INT 3
55214: NEG
55215: PUSH
55216: LD_INT 0
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: PUSH
55223: LD_INT 3
55225: NEG
55226: PUSH
55227: LD_INT 1
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: PUSH
55234: LD_INT 4
55236: NEG
55237: PUSH
55238: LD_INT 1
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: PUSH
55245: LD_INT 5
55247: NEG
55248: PUSH
55249: LD_INT 0
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PUSH
55256: LD_INT 5
55258: NEG
55259: PUSH
55260: LD_INT 1
55262: NEG
55263: PUSH
55264: EMPTY
55265: LIST
55266: LIST
55267: PUSH
55268: LD_INT 5
55270: NEG
55271: PUSH
55272: LD_INT 2
55274: NEG
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: PUSH
55280: LD_INT 3
55282: NEG
55283: PUSH
55284: LD_INT 2
55286: PUSH
55287: EMPTY
55288: LIST
55289: LIST
55290: PUSH
55291: LD_INT 3
55293: NEG
55294: PUSH
55295: LD_INT 3
55297: NEG
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: LD_INT 3
55305: NEG
55306: PUSH
55307: LD_INT 4
55309: NEG
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: LD_INT 2
55317: NEG
55318: PUSH
55319: LD_INT 3
55321: NEG
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: LD_INT 2
55329: NEG
55330: PUSH
55331: LD_INT 2
55333: NEG
55334: PUSH
55335: EMPTY
55336: LIST
55337: LIST
55338: PUSH
55339: LD_INT 3
55341: NEG
55342: PUSH
55343: LD_INT 2
55345: NEG
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: PUSH
55351: LD_INT 4
55353: NEG
55354: PUSH
55355: LD_INT 3
55357: NEG
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PUSH
55363: LD_INT 4
55365: NEG
55366: PUSH
55367: LD_INT 4
55369: NEG
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: PUSH
55375: LD_INT 2
55377: NEG
55378: PUSH
55379: LD_INT 4
55381: NEG
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PUSH
55387: LD_INT 4
55389: NEG
55390: PUSH
55391: LD_INT 2
55393: NEG
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 0
55401: PUSH
55402: LD_INT 4
55404: NEG
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: PUSH
55410: LD_INT 0
55412: PUSH
55413: LD_INT 5
55415: NEG
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PUSH
55421: LD_INT 1
55423: PUSH
55424: LD_INT 4
55426: NEG
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: LD_INT 1
55434: PUSH
55435: LD_INT 3
55437: NEG
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: LD_INT 0
55445: PUSH
55446: LD_INT 3
55448: NEG
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: LD_INT 1
55456: NEG
55457: PUSH
55458: LD_INT 4
55460: NEG
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: PUSH
55466: LD_INT 1
55468: NEG
55469: PUSH
55470: LD_INT 5
55472: NEG
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PUSH
55478: LD_INT 2
55480: PUSH
55481: LD_INT 3
55483: NEG
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: LD_INT 2
55491: NEG
55492: PUSH
55493: LD_INT 5
55495: NEG
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: LIST
55505: LIST
55506: LIST
55507: LIST
55508: LIST
55509: LIST
55510: LIST
55511: LIST
55512: LIST
55513: LIST
55514: LIST
55515: LIST
55516: LIST
55517: LIST
55518: LIST
55519: LIST
55520: LIST
55521: LIST
55522: LIST
55523: LIST
55524: LIST
55525: LIST
55526: LIST
55527: LIST
55528: LIST
55529: LIST
55530: LIST
55531: LIST
55532: LIST
55533: LIST
55534: LIST
55535: LIST
55536: LIST
55537: LIST
55538: LIST
55539: LIST
55540: LIST
55541: LIST
55542: LIST
55543: LIST
55544: LIST
55545: LIST
55546: LIST
55547: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
55548: LD_ADDR_VAR 0 31
55552: PUSH
55553: LD_INT 0
55555: PUSH
55556: LD_INT 4
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 0
55565: PUSH
55566: LD_INT 3
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_INT 1
55575: PUSH
55576: LD_INT 4
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PUSH
55583: LD_INT 1
55585: PUSH
55586: LD_INT 5
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: LD_INT 0
55595: PUSH
55596: LD_INT 5
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: LD_INT 1
55605: NEG
55606: PUSH
55607: LD_INT 4
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: PUSH
55614: LD_INT 1
55616: NEG
55617: PUSH
55618: LD_INT 3
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: PUSH
55625: LD_INT 2
55627: PUSH
55628: LD_INT 5
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: LD_INT 2
55637: NEG
55638: PUSH
55639: LD_INT 3
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: PUSH
55646: LD_INT 3
55648: NEG
55649: PUSH
55650: LD_INT 0
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: LD_INT 3
55659: NEG
55660: PUSH
55661: LD_INT 1
55663: NEG
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 2
55671: NEG
55672: PUSH
55673: LD_INT 0
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: LD_INT 2
55682: NEG
55683: PUSH
55684: LD_INT 1
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: PUSH
55691: LD_INT 3
55693: NEG
55694: PUSH
55695: LD_INT 1
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PUSH
55702: LD_INT 4
55704: NEG
55705: PUSH
55706: LD_INT 0
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: LD_INT 4
55715: NEG
55716: PUSH
55717: LD_INT 1
55719: NEG
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: LD_INT 4
55727: NEG
55728: PUSH
55729: LD_INT 2
55731: NEG
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: PUSH
55737: LD_INT 2
55739: NEG
55740: PUSH
55741: LD_INT 2
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: PUSH
55748: LD_INT 4
55750: NEG
55751: PUSH
55752: LD_INT 4
55754: NEG
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: PUSH
55760: LD_INT 4
55762: NEG
55763: PUSH
55764: LD_INT 5
55766: NEG
55767: PUSH
55768: EMPTY
55769: LIST
55770: LIST
55771: PUSH
55772: LD_INT 3
55774: NEG
55775: PUSH
55776: LD_INT 4
55778: NEG
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: PUSH
55784: LD_INT 3
55786: NEG
55787: PUSH
55788: LD_INT 3
55790: NEG
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: PUSH
55796: LD_INT 4
55798: NEG
55799: PUSH
55800: LD_INT 3
55802: NEG
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: LD_INT 5
55810: NEG
55811: PUSH
55812: LD_INT 4
55814: NEG
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: LD_INT 5
55822: NEG
55823: PUSH
55824: LD_INT 5
55826: NEG
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: LD_INT 3
55834: NEG
55835: PUSH
55836: LD_INT 5
55838: NEG
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: PUSH
55844: LD_INT 5
55846: NEG
55847: PUSH
55848: LD_INT 3
55850: NEG
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: PUSH
55856: LD_INT 0
55858: PUSH
55859: LD_INT 3
55861: NEG
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: PUSH
55867: LD_INT 0
55869: PUSH
55870: LD_INT 4
55872: NEG
55873: PUSH
55874: EMPTY
55875: LIST
55876: LIST
55877: PUSH
55878: LD_INT 1
55880: PUSH
55881: LD_INT 3
55883: NEG
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: PUSH
55889: LD_INT 1
55891: PUSH
55892: LD_INT 2
55894: NEG
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: PUSH
55900: LD_INT 0
55902: PUSH
55903: LD_INT 2
55905: NEG
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 1
55913: NEG
55914: PUSH
55915: LD_INT 3
55917: NEG
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: PUSH
55923: LD_INT 1
55925: NEG
55926: PUSH
55927: LD_INT 4
55929: NEG
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: PUSH
55935: LD_INT 2
55937: PUSH
55938: LD_INT 2
55940: NEG
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 2
55948: NEG
55949: PUSH
55950: LD_INT 4
55952: NEG
55953: PUSH
55954: EMPTY
55955: LIST
55956: LIST
55957: PUSH
55958: LD_INT 4
55960: PUSH
55961: LD_INT 0
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PUSH
55968: LD_INT 4
55970: PUSH
55971: LD_INT 1
55973: NEG
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: PUSH
55979: LD_INT 5
55981: PUSH
55982: LD_INT 0
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: LD_INT 5
55991: PUSH
55992: LD_INT 1
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: PUSH
55999: LD_INT 4
56001: PUSH
56002: LD_INT 1
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: LD_INT 3
56011: PUSH
56012: LD_INT 0
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: LD_INT 3
56021: PUSH
56022: LD_INT 1
56024: NEG
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: PUSH
56030: LD_INT 3
56032: PUSH
56033: LD_INT 2
56035: NEG
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 5
56043: PUSH
56044: LD_INT 2
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: LIST
56055: LIST
56056: LIST
56057: LIST
56058: LIST
56059: LIST
56060: LIST
56061: LIST
56062: LIST
56063: LIST
56064: LIST
56065: LIST
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: LIST
56077: LIST
56078: LIST
56079: LIST
56080: LIST
56081: LIST
56082: LIST
56083: LIST
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: LIST
56090: LIST
56091: LIST
56092: LIST
56093: LIST
56094: LIST
56095: LIST
56096: LIST
56097: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
56098: LD_ADDR_VAR 0 32
56102: PUSH
56103: LD_INT 4
56105: NEG
56106: PUSH
56107: LD_INT 0
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: PUSH
56114: LD_INT 4
56116: NEG
56117: PUSH
56118: LD_INT 1
56120: NEG
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: LD_INT 3
56128: NEG
56129: PUSH
56130: LD_INT 0
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PUSH
56137: LD_INT 3
56139: NEG
56140: PUSH
56141: LD_INT 1
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: PUSH
56148: LD_INT 4
56150: NEG
56151: PUSH
56152: LD_INT 1
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: PUSH
56159: LD_INT 5
56161: NEG
56162: PUSH
56163: LD_INT 0
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: PUSH
56170: LD_INT 5
56172: NEG
56173: PUSH
56174: LD_INT 1
56176: NEG
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: LD_INT 5
56184: NEG
56185: PUSH
56186: LD_INT 2
56188: NEG
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: PUSH
56194: LD_INT 3
56196: NEG
56197: PUSH
56198: LD_INT 2
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: LD_INT 3
56207: NEG
56208: PUSH
56209: LD_INT 3
56211: NEG
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: PUSH
56217: LD_INT 3
56219: NEG
56220: PUSH
56221: LD_INT 4
56223: NEG
56224: PUSH
56225: EMPTY
56226: LIST
56227: LIST
56228: PUSH
56229: LD_INT 2
56231: NEG
56232: PUSH
56233: LD_INT 3
56235: NEG
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: LD_INT 2
56243: NEG
56244: PUSH
56245: LD_INT 2
56247: NEG
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 3
56255: NEG
56256: PUSH
56257: LD_INT 2
56259: NEG
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: LD_INT 4
56267: NEG
56268: PUSH
56269: LD_INT 3
56271: NEG
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: PUSH
56277: LD_INT 4
56279: NEG
56280: PUSH
56281: LD_INT 4
56283: NEG
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: PUSH
56289: LD_INT 2
56291: NEG
56292: PUSH
56293: LD_INT 4
56295: NEG
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PUSH
56301: LD_INT 4
56303: NEG
56304: PUSH
56305: LD_INT 2
56307: NEG
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: LD_INT 0
56315: PUSH
56316: LD_INT 4
56318: NEG
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: PUSH
56324: LD_INT 0
56326: PUSH
56327: LD_INT 5
56329: NEG
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: LD_INT 1
56337: PUSH
56338: LD_INT 4
56340: NEG
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: LD_INT 1
56348: PUSH
56349: LD_INT 3
56351: NEG
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: PUSH
56357: LD_INT 0
56359: PUSH
56360: LD_INT 3
56362: NEG
56363: PUSH
56364: EMPTY
56365: LIST
56366: LIST
56367: PUSH
56368: LD_INT 1
56370: NEG
56371: PUSH
56372: LD_INT 4
56374: NEG
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: PUSH
56380: LD_INT 1
56382: NEG
56383: PUSH
56384: LD_INT 5
56386: NEG
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: PUSH
56392: LD_INT 2
56394: PUSH
56395: LD_INT 3
56397: NEG
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: PUSH
56403: LD_INT 2
56405: NEG
56406: PUSH
56407: LD_INT 5
56409: NEG
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: PUSH
56415: LD_INT 3
56417: PUSH
56418: LD_INT 0
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: PUSH
56425: LD_INT 3
56427: PUSH
56428: LD_INT 1
56430: NEG
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: PUSH
56436: LD_INT 4
56438: PUSH
56439: LD_INT 0
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: PUSH
56446: LD_INT 4
56448: PUSH
56449: LD_INT 1
56451: PUSH
56452: EMPTY
56453: LIST
56454: LIST
56455: PUSH
56456: LD_INT 3
56458: PUSH
56459: LD_INT 1
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: LD_INT 2
56468: PUSH
56469: LD_INT 0
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: LD_INT 2
56478: PUSH
56479: LD_INT 1
56481: NEG
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: PUSH
56487: LD_INT 2
56489: PUSH
56490: LD_INT 2
56492: NEG
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: PUSH
56498: LD_INT 4
56500: PUSH
56501: LD_INT 2
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: LD_INT 4
56510: PUSH
56511: LD_INT 4
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: PUSH
56518: LD_INT 4
56520: PUSH
56521: LD_INT 3
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: LD_INT 5
56530: PUSH
56531: LD_INT 4
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: LD_INT 5
56540: PUSH
56541: LD_INT 5
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: LD_INT 4
56550: PUSH
56551: LD_INT 5
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: PUSH
56558: LD_INT 3
56560: PUSH
56561: LD_INT 4
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: PUSH
56568: LD_INT 3
56570: PUSH
56571: LD_INT 3
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: LD_INT 5
56580: PUSH
56581: LD_INT 3
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: PUSH
56588: LD_INT 3
56590: PUSH
56591: LD_INT 5
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: EMPTY
56599: LIST
56600: LIST
56601: LIST
56602: LIST
56603: LIST
56604: LIST
56605: LIST
56606: LIST
56607: LIST
56608: LIST
56609: LIST
56610: LIST
56611: LIST
56612: LIST
56613: LIST
56614: LIST
56615: LIST
56616: LIST
56617: LIST
56618: LIST
56619: LIST
56620: LIST
56621: LIST
56622: LIST
56623: LIST
56624: LIST
56625: LIST
56626: LIST
56627: LIST
56628: LIST
56629: LIST
56630: LIST
56631: LIST
56632: LIST
56633: LIST
56634: LIST
56635: LIST
56636: LIST
56637: LIST
56638: LIST
56639: LIST
56640: LIST
56641: LIST
56642: LIST
56643: LIST
56644: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
56645: LD_ADDR_VAR 0 33
56649: PUSH
56650: LD_INT 4
56652: NEG
56653: PUSH
56654: LD_INT 4
56656: NEG
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: PUSH
56662: LD_INT 4
56664: NEG
56665: PUSH
56666: LD_INT 5
56668: NEG
56669: PUSH
56670: EMPTY
56671: LIST
56672: LIST
56673: PUSH
56674: LD_INT 3
56676: NEG
56677: PUSH
56678: LD_INT 4
56680: NEG
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: PUSH
56686: LD_INT 3
56688: NEG
56689: PUSH
56690: LD_INT 3
56692: NEG
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 4
56700: NEG
56701: PUSH
56702: LD_INT 3
56704: NEG
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: LD_INT 5
56712: NEG
56713: PUSH
56714: LD_INT 4
56716: NEG
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: PUSH
56722: LD_INT 5
56724: NEG
56725: PUSH
56726: LD_INT 5
56728: NEG
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PUSH
56734: LD_INT 3
56736: NEG
56737: PUSH
56738: LD_INT 5
56740: NEG
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: PUSH
56746: LD_INT 5
56748: NEG
56749: PUSH
56750: LD_INT 3
56752: NEG
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PUSH
56758: LD_INT 0
56760: PUSH
56761: LD_INT 3
56763: NEG
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: PUSH
56769: LD_INT 0
56771: PUSH
56772: LD_INT 4
56774: NEG
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: LD_INT 1
56782: PUSH
56783: LD_INT 3
56785: NEG
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: PUSH
56791: LD_INT 1
56793: PUSH
56794: LD_INT 2
56796: NEG
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: PUSH
56802: LD_INT 0
56804: PUSH
56805: LD_INT 2
56807: NEG
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: PUSH
56813: LD_INT 1
56815: NEG
56816: PUSH
56817: LD_INT 3
56819: NEG
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 1
56827: NEG
56828: PUSH
56829: LD_INT 4
56831: NEG
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: LD_INT 2
56839: PUSH
56840: LD_INT 2
56842: NEG
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: LD_INT 2
56850: NEG
56851: PUSH
56852: LD_INT 4
56854: NEG
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: PUSH
56860: LD_INT 4
56862: PUSH
56863: LD_INT 0
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: LD_INT 4
56872: PUSH
56873: LD_INT 1
56875: NEG
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 5
56883: PUSH
56884: LD_INT 0
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: PUSH
56891: LD_INT 5
56893: PUSH
56894: LD_INT 1
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: PUSH
56901: LD_INT 4
56903: PUSH
56904: LD_INT 1
56906: PUSH
56907: EMPTY
56908: LIST
56909: LIST
56910: PUSH
56911: LD_INT 3
56913: PUSH
56914: LD_INT 0
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: PUSH
56921: LD_INT 3
56923: PUSH
56924: LD_INT 1
56926: NEG
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: PUSH
56932: LD_INT 3
56934: PUSH
56935: LD_INT 2
56937: NEG
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: LD_INT 5
56945: PUSH
56946: LD_INT 2
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: PUSH
56953: LD_INT 3
56955: PUSH
56956: LD_INT 3
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: PUSH
56963: LD_INT 3
56965: PUSH
56966: LD_INT 2
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: LD_INT 4
56975: PUSH
56976: LD_INT 3
56978: PUSH
56979: EMPTY
56980: LIST
56981: LIST
56982: PUSH
56983: LD_INT 4
56985: PUSH
56986: LD_INT 4
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: PUSH
56993: LD_INT 3
56995: PUSH
56996: LD_INT 4
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: PUSH
57003: LD_INT 2
57005: PUSH
57006: LD_INT 3
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: PUSH
57013: LD_INT 2
57015: PUSH
57016: LD_INT 2
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: PUSH
57023: LD_INT 4
57025: PUSH
57026: LD_INT 2
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: LD_INT 2
57035: PUSH
57036: LD_INT 4
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: PUSH
57043: LD_INT 0
57045: PUSH
57046: LD_INT 4
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: PUSH
57053: LD_INT 0
57055: PUSH
57056: LD_INT 3
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: PUSH
57063: LD_INT 1
57065: PUSH
57066: LD_INT 4
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: PUSH
57073: LD_INT 1
57075: PUSH
57076: LD_INT 5
57078: PUSH
57079: EMPTY
57080: LIST
57081: LIST
57082: PUSH
57083: LD_INT 0
57085: PUSH
57086: LD_INT 5
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: PUSH
57093: LD_INT 1
57095: NEG
57096: PUSH
57097: LD_INT 4
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: PUSH
57104: LD_INT 1
57106: NEG
57107: PUSH
57108: LD_INT 3
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: PUSH
57115: LD_INT 2
57117: PUSH
57118: LD_INT 5
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: PUSH
57125: LD_INT 2
57127: NEG
57128: PUSH
57129: LD_INT 3
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: LIST
57140: LIST
57141: LIST
57142: LIST
57143: LIST
57144: LIST
57145: LIST
57146: LIST
57147: LIST
57148: LIST
57149: LIST
57150: LIST
57151: LIST
57152: LIST
57153: LIST
57154: LIST
57155: LIST
57156: LIST
57157: LIST
57158: LIST
57159: LIST
57160: LIST
57161: LIST
57162: LIST
57163: LIST
57164: LIST
57165: LIST
57166: LIST
57167: LIST
57168: LIST
57169: LIST
57170: LIST
57171: LIST
57172: LIST
57173: LIST
57174: LIST
57175: LIST
57176: LIST
57177: LIST
57178: LIST
57179: LIST
57180: LIST
57181: LIST
57182: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
57183: LD_ADDR_VAR 0 34
57187: PUSH
57188: LD_INT 0
57190: PUSH
57191: LD_INT 4
57193: NEG
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: PUSH
57199: LD_INT 0
57201: PUSH
57202: LD_INT 5
57204: NEG
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: LD_INT 1
57212: PUSH
57213: LD_INT 4
57215: NEG
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: PUSH
57221: LD_INT 1
57223: PUSH
57224: LD_INT 3
57226: NEG
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PUSH
57232: LD_INT 0
57234: PUSH
57235: LD_INT 3
57237: NEG
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: PUSH
57243: LD_INT 1
57245: NEG
57246: PUSH
57247: LD_INT 4
57249: NEG
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: PUSH
57255: LD_INT 1
57257: NEG
57258: PUSH
57259: LD_INT 5
57261: NEG
57262: PUSH
57263: EMPTY
57264: LIST
57265: LIST
57266: PUSH
57267: LD_INT 2
57269: PUSH
57270: LD_INT 3
57272: NEG
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: PUSH
57278: LD_INT 2
57280: NEG
57281: PUSH
57282: LD_INT 5
57284: NEG
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: PUSH
57290: LD_INT 3
57292: PUSH
57293: LD_INT 0
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: LD_INT 3
57302: PUSH
57303: LD_INT 1
57305: NEG
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: LD_INT 4
57313: PUSH
57314: LD_INT 0
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: LD_INT 4
57323: PUSH
57324: LD_INT 1
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: PUSH
57331: LD_INT 3
57333: PUSH
57334: LD_INT 1
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 2
57343: PUSH
57344: LD_INT 0
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: PUSH
57351: LD_INT 2
57353: PUSH
57354: LD_INT 1
57356: NEG
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 2
57364: PUSH
57365: LD_INT 2
57367: NEG
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: PUSH
57373: LD_INT 4
57375: PUSH
57376: LD_INT 2
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: LD_INT 4
57385: PUSH
57386: LD_INT 4
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: PUSH
57393: LD_INT 4
57395: PUSH
57396: LD_INT 3
57398: PUSH
57399: EMPTY
57400: LIST
57401: LIST
57402: PUSH
57403: LD_INT 5
57405: PUSH
57406: LD_INT 4
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: LD_INT 5
57415: PUSH
57416: LD_INT 5
57418: PUSH
57419: EMPTY
57420: LIST
57421: LIST
57422: PUSH
57423: LD_INT 4
57425: PUSH
57426: LD_INT 5
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: PUSH
57433: LD_INT 3
57435: PUSH
57436: LD_INT 4
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: PUSH
57443: LD_INT 3
57445: PUSH
57446: LD_INT 3
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PUSH
57453: LD_INT 5
57455: PUSH
57456: LD_INT 3
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: PUSH
57463: LD_INT 3
57465: PUSH
57466: LD_INT 5
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: PUSH
57473: LD_INT 0
57475: PUSH
57476: LD_INT 3
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PUSH
57483: LD_INT 0
57485: PUSH
57486: LD_INT 2
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: LD_INT 1
57495: PUSH
57496: LD_INT 3
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: PUSH
57503: LD_INT 1
57505: PUSH
57506: LD_INT 4
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: PUSH
57513: LD_INT 0
57515: PUSH
57516: LD_INT 4
57518: PUSH
57519: EMPTY
57520: LIST
57521: LIST
57522: PUSH
57523: LD_INT 1
57525: NEG
57526: PUSH
57527: LD_INT 3
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: PUSH
57534: LD_INT 1
57536: NEG
57537: PUSH
57538: LD_INT 2
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 2
57547: PUSH
57548: LD_INT 4
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: PUSH
57555: LD_INT 2
57557: NEG
57558: PUSH
57559: LD_INT 2
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: LD_INT 4
57568: NEG
57569: PUSH
57570: LD_INT 0
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: LD_INT 4
57579: NEG
57580: PUSH
57581: LD_INT 1
57583: NEG
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: LD_INT 3
57591: NEG
57592: PUSH
57593: LD_INT 0
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: PUSH
57600: LD_INT 3
57602: NEG
57603: PUSH
57604: LD_INT 1
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: LD_INT 4
57613: NEG
57614: PUSH
57615: LD_INT 1
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: LD_INT 5
57624: NEG
57625: PUSH
57626: LD_INT 0
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: PUSH
57633: LD_INT 5
57635: NEG
57636: PUSH
57637: LD_INT 1
57639: NEG
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: PUSH
57645: LD_INT 5
57647: NEG
57648: PUSH
57649: LD_INT 2
57651: NEG
57652: PUSH
57653: EMPTY
57654: LIST
57655: LIST
57656: PUSH
57657: LD_INT 3
57659: NEG
57660: PUSH
57661: LD_INT 2
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: EMPTY
57669: LIST
57670: LIST
57671: LIST
57672: LIST
57673: LIST
57674: LIST
57675: LIST
57676: LIST
57677: LIST
57678: LIST
57679: LIST
57680: LIST
57681: LIST
57682: LIST
57683: LIST
57684: LIST
57685: LIST
57686: LIST
57687: LIST
57688: LIST
57689: LIST
57690: LIST
57691: LIST
57692: LIST
57693: LIST
57694: LIST
57695: LIST
57696: LIST
57697: LIST
57698: LIST
57699: LIST
57700: LIST
57701: LIST
57702: LIST
57703: LIST
57704: LIST
57705: LIST
57706: LIST
57707: LIST
57708: LIST
57709: LIST
57710: LIST
57711: LIST
57712: LIST
57713: LIST
57714: ST_TO_ADDR
// end ; end ;
57715: GO 57718
57717: POP
// case btype of b_depot , b_warehouse :
57718: LD_VAR 0 1
57722: PUSH
57723: LD_INT 0
57725: DOUBLE
57726: EQUAL
57727: IFTRUE 57737
57729: LD_INT 1
57731: DOUBLE
57732: EQUAL
57733: IFTRUE 57737
57735: GO 57938
57737: POP
// case nation of nation_american :
57738: LD_VAR 0 5
57742: PUSH
57743: LD_INT 1
57745: DOUBLE
57746: EQUAL
57747: IFTRUE 57751
57749: GO 57807
57751: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
57752: LD_ADDR_VAR 0 9
57756: PUSH
57757: LD_VAR 0 11
57761: PUSH
57762: LD_VAR 0 12
57766: PUSH
57767: LD_VAR 0 13
57771: PUSH
57772: LD_VAR 0 14
57776: PUSH
57777: LD_VAR 0 15
57781: PUSH
57782: LD_VAR 0 16
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: LIST
57791: LIST
57792: LIST
57793: LIST
57794: PUSH
57795: LD_VAR 0 4
57799: PUSH
57800: LD_INT 1
57802: PLUS
57803: ARRAY
57804: ST_TO_ADDR
57805: GO 57936
57807: LD_INT 2
57809: DOUBLE
57810: EQUAL
57811: IFTRUE 57815
57813: GO 57871
57815: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
57816: LD_ADDR_VAR 0 9
57820: PUSH
57821: LD_VAR 0 17
57825: PUSH
57826: LD_VAR 0 18
57830: PUSH
57831: LD_VAR 0 19
57835: PUSH
57836: LD_VAR 0 20
57840: PUSH
57841: LD_VAR 0 21
57845: PUSH
57846: LD_VAR 0 22
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: LIST
57855: LIST
57856: LIST
57857: LIST
57858: PUSH
57859: LD_VAR 0 4
57863: PUSH
57864: LD_INT 1
57866: PLUS
57867: ARRAY
57868: ST_TO_ADDR
57869: GO 57936
57871: LD_INT 3
57873: DOUBLE
57874: EQUAL
57875: IFTRUE 57879
57877: GO 57935
57879: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
57880: LD_ADDR_VAR 0 9
57884: PUSH
57885: LD_VAR 0 23
57889: PUSH
57890: LD_VAR 0 24
57894: PUSH
57895: LD_VAR 0 25
57899: PUSH
57900: LD_VAR 0 26
57904: PUSH
57905: LD_VAR 0 27
57909: PUSH
57910: LD_VAR 0 28
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: LIST
57919: LIST
57920: LIST
57921: LIST
57922: PUSH
57923: LD_VAR 0 4
57927: PUSH
57928: LD_INT 1
57930: PLUS
57931: ARRAY
57932: ST_TO_ADDR
57933: GO 57936
57935: POP
57936: GO 58491
57938: LD_INT 2
57940: DOUBLE
57941: EQUAL
57942: IFTRUE 57952
57944: LD_INT 3
57946: DOUBLE
57947: EQUAL
57948: IFTRUE 57952
57950: GO 58008
57952: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
57953: LD_ADDR_VAR 0 9
57957: PUSH
57958: LD_VAR 0 29
57962: PUSH
57963: LD_VAR 0 30
57967: PUSH
57968: LD_VAR 0 31
57972: PUSH
57973: LD_VAR 0 32
57977: PUSH
57978: LD_VAR 0 33
57982: PUSH
57983: LD_VAR 0 34
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: LIST
57992: LIST
57993: LIST
57994: LIST
57995: PUSH
57996: LD_VAR 0 4
58000: PUSH
58001: LD_INT 1
58003: PLUS
58004: ARRAY
58005: ST_TO_ADDR
58006: GO 58491
58008: LD_INT 16
58010: DOUBLE
58011: EQUAL
58012: IFTRUE 58070
58014: LD_INT 17
58016: DOUBLE
58017: EQUAL
58018: IFTRUE 58070
58020: LD_INT 18
58022: DOUBLE
58023: EQUAL
58024: IFTRUE 58070
58026: LD_INT 19
58028: DOUBLE
58029: EQUAL
58030: IFTRUE 58070
58032: LD_INT 22
58034: DOUBLE
58035: EQUAL
58036: IFTRUE 58070
58038: LD_INT 20
58040: DOUBLE
58041: EQUAL
58042: IFTRUE 58070
58044: LD_INT 21
58046: DOUBLE
58047: EQUAL
58048: IFTRUE 58070
58050: LD_INT 23
58052: DOUBLE
58053: EQUAL
58054: IFTRUE 58070
58056: LD_INT 24
58058: DOUBLE
58059: EQUAL
58060: IFTRUE 58070
58062: LD_INT 25
58064: DOUBLE
58065: EQUAL
58066: IFTRUE 58070
58068: GO 58126
58070: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
58071: LD_ADDR_VAR 0 9
58075: PUSH
58076: LD_VAR 0 35
58080: PUSH
58081: LD_VAR 0 36
58085: PUSH
58086: LD_VAR 0 37
58090: PUSH
58091: LD_VAR 0 38
58095: PUSH
58096: LD_VAR 0 39
58100: PUSH
58101: LD_VAR 0 40
58105: PUSH
58106: EMPTY
58107: LIST
58108: LIST
58109: LIST
58110: LIST
58111: LIST
58112: LIST
58113: PUSH
58114: LD_VAR 0 4
58118: PUSH
58119: LD_INT 1
58121: PLUS
58122: ARRAY
58123: ST_TO_ADDR
58124: GO 58491
58126: LD_INT 6
58128: DOUBLE
58129: EQUAL
58130: IFTRUE 58182
58132: LD_INT 7
58134: DOUBLE
58135: EQUAL
58136: IFTRUE 58182
58138: LD_INT 8
58140: DOUBLE
58141: EQUAL
58142: IFTRUE 58182
58144: LD_INT 13
58146: DOUBLE
58147: EQUAL
58148: IFTRUE 58182
58150: LD_INT 12
58152: DOUBLE
58153: EQUAL
58154: IFTRUE 58182
58156: LD_INT 15
58158: DOUBLE
58159: EQUAL
58160: IFTRUE 58182
58162: LD_INT 11
58164: DOUBLE
58165: EQUAL
58166: IFTRUE 58182
58168: LD_INT 14
58170: DOUBLE
58171: EQUAL
58172: IFTRUE 58182
58174: LD_INT 10
58176: DOUBLE
58177: EQUAL
58178: IFTRUE 58182
58180: GO 58238
58182: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
58183: LD_ADDR_VAR 0 9
58187: PUSH
58188: LD_VAR 0 41
58192: PUSH
58193: LD_VAR 0 42
58197: PUSH
58198: LD_VAR 0 43
58202: PUSH
58203: LD_VAR 0 44
58207: PUSH
58208: LD_VAR 0 45
58212: PUSH
58213: LD_VAR 0 46
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: LIST
58222: LIST
58223: LIST
58224: LIST
58225: PUSH
58226: LD_VAR 0 4
58230: PUSH
58231: LD_INT 1
58233: PLUS
58234: ARRAY
58235: ST_TO_ADDR
58236: GO 58491
58238: LD_INT 36
58240: DOUBLE
58241: EQUAL
58242: IFTRUE 58246
58244: GO 58302
58246: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
58247: LD_ADDR_VAR 0 9
58251: PUSH
58252: LD_VAR 0 47
58256: PUSH
58257: LD_VAR 0 48
58261: PUSH
58262: LD_VAR 0 49
58266: PUSH
58267: LD_VAR 0 50
58271: PUSH
58272: LD_VAR 0 51
58276: PUSH
58277: LD_VAR 0 52
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: LIST
58286: LIST
58287: LIST
58288: LIST
58289: PUSH
58290: LD_VAR 0 4
58294: PUSH
58295: LD_INT 1
58297: PLUS
58298: ARRAY
58299: ST_TO_ADDR
58300: GO 58491
58302: LD_INT 4
58304: DOUBLE
58305: EQUAL
58306: IFTRUE 58328
58308: LD_INT 5
58310: DOUBLE
58311: EQUAL
58312: IFTRUE 58328
58314: LD_INT 34
58316: DOUBLE
58317: EQUAL
58318: IFTRUE 58328
58320: LD_INT 37
58322: DOUBLE
58323: EQUAL
58324: IFTRUE 58328
58326: GO 58384
58328: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
58329: LD_ADDR_VAR 0 9
58333: PUSH
58334: LD_VAR 0 53
58338: PUSH
58339: LD_VAR 0 54
58343: PUSH
58344: LD_VAR 0 55
58348: PUSH
58349: LD_VAR 0 56
58353: PUSH
58354: LD_VAR 0 57
58358: PUSH
58359: LD_VAR 0 58
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: LIST
58368: LIST
58369: LIST
58370: LIST
58371: PUSH
58372: LD_VAR 0 4
58376: PUSH
58377: LD_INT 1
58379: PLUS
58380: ARRAY
58381: ST_TO_ADDR
58382: GO 58491
58384: LD_INT 31
58386: DOUBLE
58387: EQUAL
58388: IFTRUE 58434
58390: LD_INT 32
58392: DOUBLE
58393: EQUAL
58394: IFTRUE 58434
58396: LD_INT 33
58398: DOUBLE
58399: EQUAL
58400: IFTRUE 58434
58402: LD_INT 27
58404: DOUBLE
58405: EQUAL
58406: IFTRUE 58434
58408: LD_INT 26
58410: DOUBLE
58411: EQUAL
58412: IFTRUE 58434
58414: LD_INT 28
58416: DOUBLE
58417: EQUAL
58418: IFTRUE 58434
58420: LD_INT 29
58422: DOUBLE
58423: EQUAL
58424: IFTRUE 58434
58426: LD_INT 30
58428: DOUBLE
58429: EQUAL
58430: IFTRUE 58434
58432: GO 58490
58434: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
58435: LD_ADDR_VAR 0 9
58439: PUSH
58440: LD_VAR 0 59
58444: PUSH
58445: LD_VAR 0 60
58449: PUSH
58450: LD_VAR 0 61
58454: PUSH
58455: LD_VAR 0 62
58459: PUSH
58460: LD_VAR 0 63
58464: PUSH
58465: LD_VAR 0 64
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: LIST
58474: LIST
58475: LIST
58476: LIST
58477: PUSH
58478: LD_VAR 0 4
58482: PUSH
58483: LD_INT 1
58485: PLUS
58486: ARRAY
58487: ST_TO_ADDR
58488: GO 58491
58490: POP
// temp_list2 = [ ] ;
58491: LD_ADDR_VAR 0 10
58495: PUSH
58496: EMPTY
58497: ST_TO_ADDR
// for i in temp_list do
58498: LD_ADDR_VAR 0 8
58502: PUSH
58503: LD_VAR 0 9
58507: PUSH
58508: FOR_IN
58509: IFFALSE 58561
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
58511: LD_ADDR_VAR 0 10
58515: PUSH
58516: LD_VAR 0 10
58520: PUSH
58521: LD_VAR 0 8
58525: PUSH
58526: LD_INT 1
58528: ARRAY
58529: PUSH
58530: LD_VAR 0 2
58534: PLUS
58535: PUSH
58536: LD_VAR 0 8
58540: PUSH
58541: LD_INT 2
58543: ARRAY
58544: PUSH
58545: LD_VAR 0 3
58549: PLUS
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: PUSH
58555: EMPTY
58556: LIST
58557: ADD
58558: ST_TO_ADDR
58559: GO 58508
58561: POP
58562: POP
// result = temp_list2 ;
58563: LD_ADDR_VAR 0 7
58567: PUSH
58568: LD_VAR 0 10
58572: ST_TO_ADDR
// end ;
58573: LD_VAR 0 7
58577: RET
// export function EnemyInRange ( unit , dist ) ; begin
58578: LD_INT 0
58580: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
58581: LD_ADDR_VAR 0 3
58585: PUSH
58586: LD_VAR 0 1
58590: PPUSH
58591: CALL_OW 255
58595: PPUSH
58596: LD_VAR 0 1
58600: PPUSH
58601: CALL_OW 250
58605: PPUSH
58606: LD_VAR 0 1
58610: PPUSH
58611: CALL_OW 251
58615: PPUSH
58616: LD_VAR 0 2
58620: PPUSH
58621: CALL 31980 0 4
58625: PUSH
58626: LD_INT 4
58628: ARRAY
58629: ST_TO_ADDR
// end ;
58630: LD_VAR 0 3
58634: RET
// export function PlayerSeeMe ( unit ) ; begin
58635: LD_INT 0
58637: PPUSH
// result := See ( your_side , unit ) ;
58638: LD_ADDR_VAR 0 2
58642: PUSH
58643: LD_OWVAR 2
58647: PPUSH
58648: LD_VAR 0 1
58652: PPUSH
58653: CALL_OW 292
58657: ST_TO_ADDR
// end ;
58658: LD_VAR 0 2
58662: RET
// export function ReverseDir ( unit ) ; begin
58663: LD_INT 0
58665: PPUSH
// if not unit then
58666: LD_VAR 0 1
58670: NOT
58671: IFFALSE 58675
// exit ;
58673: GO 58698
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
58675: LD_ADDR_VAR 0 2
58679: PUSH
58680: LD_VAR 0 1
58684: PPUSH
58685: CALL_OW 254
58689: PUSH
58690: LD_INT 3
58692: PLUS
58693: PUSH
58694: LD_INT 6
58696: MOD
58697: ST_TO_ADDR
// end ;
58698: LD_VAR 0 2
58702: RET
// export function ReverseArray ( array ) ; var i ; begin
58703: LD_INT 0
58705: PPUSH
58706: PPUSH
// if not array then
58707: LD_VAR 0 1
58711: NOT
58712: IFFALSE 58716
// exit ;
58714: GO 58771
// result := [ ] ;
58716: LD_ADDR_VAR 0 2
58720: PUSH
58721: EMPTY
58722: ST_TO_ADDR
// for i := array downto 1 do
58723: LD_ADDR_VAR 0 3
58727: PUSH
58728: DOUBLE
58729: LD_VAR 0 1
58733: INC
58734: ST_TO_ADDR
58735: LD_INT 1
58737: PUSH
58738: FOR_DOWNTO
58739: IFFALSE 58769
// result := Join ( result , array [ i ] ) ;
58741: LD_ADDR_VAR 0 2
58745: PUSH
58746: LD_VAR 0 2
58750: PPUSH
58751: LD_VAR 0 1
58755: PUSH
58756: LD_VAR 0 3
58760: ARRAY
58761: PPUSH
58762: CALL 63415 0 2
58766: ST_TO_ADDR
58767: GO 58738
58769: POP
58770: POP
// end ;
58771: LD_VAR 0 2
58775: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
58776: LD_INT 0
58778: PPUSH
58779: PPUSH
58780: PPUSH
58781: PPUSH
58782: PPUSH
58783: PPUSH
// if not unit or not hexes then
58784: LD_VAR 0 1
58788: NOT
58789: PUSH
58790: LD_VAR 0 2
58794: NOT
58795: OR
58796: IFFALSE 58800
// exit ;
58798: GO 58923
// dist := 9999 ;
58800: LD_ADDR_VAR 0 5
58804: PUSH
58805: LD_INT 9999
58807: ST_TO_ADDR
// for i = 1 to hexes do
58808: LD_ADDR_VAR 0 4
58812: PUSH
58813: DOUBLE
58814: LD_INT 1
58816: DEC
58817: ST_TO_ADDR
58818: LD_VAR 0 2
58822: PUSH
58823: FOR_TO
58824: IFFALSE 58911
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
58826: LD_ADDR_VAR 0 6
58830: PUSH
58831: LD_VAR 0 1
58835: PPUSH
58836: LD_VAR 0 2
58840: PUSH
58841: LD_VAR 0 4
58845: ARRAY
58846: PUSH
58847: LD_INT 1
58849: ARRAY
58850: PPUSH
58851: LD_VAR 0 2
58855: PUSH
58856: LD_VAR 0 4
58860: ARRAY
58861: PUSH
58862: LD_INT 2
58864: ARRAY
58865: PPUSH
58866: CALL_OW 297
58870: ST_TO_ADDR
// if tdist < dist then
58871: LD_VAR 0 6
58875: PUSH
58876: LD_VAR 0 5
58880: LESS
58881: IFFALSE 58909
// begin hex := hexes [ i ] ;
58883: LD_ADDR_VAR 0 8
58887: PUSH
58888: LD_VAR 0 2
58892: PUSH
58893: LD_VAR 0 4
58897: ARRAY
58898: ST_TO_ADDR
// dist := tdist ;
58899: LD_ADDR_VAR 0 5
58903: PUSH
58904: LD_VAR 0 6
58908: ST_TO_ADDR
// end ; end ;
58909: GO 58823
58911: POP
58912: POP
// result := hex ;
58913: LD_ADDR_VAR 0 3
58917: PUSH
58918: LD_VAR 0 8
58922: ST_TO_ADDR
// end ;
58923: LD_VAR 0 3
58927: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
58928: LD_INT 0
58930: PPUSH
58931: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
58932: LD_VAR 0 1
58936: NOT
58937: PUSH
58938: LD_VAR 0 1
58942: PUSH
58943: LD_INT 21
58945: PUSH
58946: LD_INT 2
58948: PUSH
58949: EMPTY
58950: LIST
58951: LIST
58952: PUSH
58953: LD_INT 23
58955: PUSH
58956: LD_INT 2
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: PUSH
58963: EMPTY
58964: LIST
58965: LIST
58966: PPUSH
58967: CALL_OW 69
58971: IN
58972: NOT
58973: OR
58974: IFFALSE 58978
// exit ;
58976: GO 59025
// for i = 1 to 3 do
58978: LD_ADDR_VAR 0 3
58982: PUSH
58983: DOUBLE
58984: LD_INT 1
58986: DEC
58987: ST_TO_ADDR
58988: LD_INT 3
58990: PUSH
58991: FOR_TO
58992: IFFALSE 59023
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
58994: LD_VAR 0 1
58998: PPUSH
58999: CALL_OW 250
59003: PPUSH
59004: LD_VAR 0 1
59008: PPUSH
59009: CALL_OW 251
59013: PPUSH
59014: LD_INT 1
59016: PPUSH
59017: CALL_OW 453
59021: GO 58991
59023: POP
59024: POP
// end ;
59025: LD_VAR 0 2
59029: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
59030: LD_INT 0
59032: PPUSH
59033: PPUSH
59034: PPUSH
59035: PPUSH
59036: PPUSH
59037: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
59038: LD_VAR 0 1
59042: NOT
59043: PUSH
59044: LD_VAR 0 2
59048: NOT
59049: OR
59050: PUSH
59051: LD_VAR 0 1
59055: PPUSH
59056: CALL_OW 314
59060: OR
59061: IFFALSE 59065
// exit ;
59063: GO 59532
// if GetLives ( i ) < 250 then
59065: LD_VAR 0 4
59069: PPUSH
59070: CALL_OW 256
59074: PUSH
59075: LD_INT 250
59077: LESS
59078: IFFALSE 59091
// begin ComAutodestruct ( i ) ;
59080: LD_VAR 0 4
59084: PPUSH
59085: CALL 58928 0 1
// exit ;
59089: GO 59532
// end ; x := GetX ( enemy_unit ) ;
59091: LD_ADDR_VAR 0 7
59095: PUSH
59096: LD_VAR 0 2
59100: PPUSH
59101: CALL_OW 250
59105: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
59106: LD_ADDR_VAR 0 8
59110: PUSH
59111: LD_VAR 0 2
59115: PPUSH
59116: CALL_OW 251
59120: ST_TO_ADDR
// if not x or not y then
59121: LD_VAR 0 7
59125: NOT
59126: PUSH
59127: LD_VAR 0 8
59131: NOT
59132: OR
59133: IFFALSE 59137
// exit ;
59135: GO 59532
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
59137: LD_ADDR_VAR 0 6
59141: PUSH
59142: LD_VAR 0 7
59146: PPUSH
59147: LD_INT 0
59149: PPUSH
59150: LD_INT 4
59152: PPUSH
59153: CALL_OW 272
59157: PUSH
59158: LD_VAR 0 8
59162: PPUSH
59163: LD_INT 0
59165: PPUSH
59166: LD_INT 4
59168: PPUSH
59169: CALL_OW 273
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: LD_VAR 0 7
59182: PPUSH
59183: LD_INT 1
59185: PPUSH
59186: LD_INT 4
59188: PPUSH
59189: CALL_OW 272
59193: PUSH
59194: LD_VAR 0 8
59198: PPUSH
59199: LD_INT 1
59201: PPUSH
59202: LD_INT 4
59204: PPUSH
59205: CALL_OW 273
59209: PUSH
59210: EMPTY
59211: LIST
59212: LIST
59213: PUSH
59214: LD_VAR 0 7
59218: PPUSH
59219: LD_INT 2
59221: PPUSH
59222: LD_INT 4
59224: PPUSH
59225: CALL_OW 272
59229: PUSH
59230: LD_VAR 0 8
59234: PPUSH
59235: LD_INT 2
59237: PPUSH
59238: LD_INT 4
59240: PPUSH
59241: CALL_OW 273
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: PUSH
59250: LD_VAR 0 7
59254: PPUSH
59255: LD_INT 3
59257: PPUSH
59258: LD_INT 4
59260: PPUSH
59261: CALL_OW 272
59265: PUSH
59266: LD_VAR 0 8
59270: PPUSH
59271: LD_INT 3
59273: PPUSH
59274: LD_INT 4
59276: PPUSH
59277: CALL_OW 273
59281: PUSH
59282: EMPTY
59283: LIST
59284: LIST
59285: PUSH
59286: LD_VAR 0 7
59290: PPUSH
59291: LD_INT 4
59293: PPUSH
59294: LD_INT 4
59296: PPUSH
59297: CALL_OW 272
59301: PUSH
59302: LD_VAR 0 8
59306: PPUSH
59307: LD_INT 4
59309: PPUSH
59310: LD_INT 4
59312: PPUSH
59313: CALL_OW 273
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: PUSH
59322: LD_VAR 0 7
59326: PPUSH
59327: LD_INT 5
59329: PPUSH
59330: LD_INT 4
59332: PPUSH
59333: CALL_OW 272
59337: PUSH
59338: LD_VAR 0 8
59342: PPUSH
59343: LD_INT 5
59345: PPUSH
59346: LD_INT 4
59348: PPUSH
59349: CALL_OW 273
59353: PUSH
59354: EMPTY
59355: LIST
59356: LIST
59357: PUSH
59358: EMPTY
59359: LIST
59360: LIST
59361: LIST
59362: LIST
59363: LIST
59364: LIST
59365: ST_TO_ADDR
// for i = tmp downto 1 do
59366: LD_ADDR_VAR 0 4
59370: PUSH
59371: DOUBLE
59372: LD_VAR 0 6
59376: INC
59377: ST_TO_ADDR
59378: LD_INT 1
59380: PUSH
59381: FOR_DOWNTO
59382: IFFALSE 59483
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
59384: LD_VAR 0 6
59388: PUSH
59389: LD_VAR 0 4
59393: ARRAY
59394: PUSH
59395: LD_INT 1
59397: ARRAY
59398: PPUSH
59399: LD_VAR 0 6
59403: PUSH
59404: LD_VAR 0 4
59408: ARRAY
59409: PUSH
59410: LD_INT 2
59412: ARRAY
59413: PPUSH
59414: CALL_OW 488
59418: NOT
59419: PUSH
59420: LD_VAR 0 6
59424: PUSH
59425: LD_VAR 0 4
59429: ARRAY
59430: PUSH
59431: LD_INT 1
59433: ARRAY
59434: PPUSH
59435: LD_VAR 0 6
59439: PUSH
59440: LD_VAR 0 4
59444: ARRAY
59445: PUSH
59446: LD_INT 2
59448: ARRAY
59449: PPUSH
59450: CALL_OW 428
59454: PUSH
59455: LD_INT 0
59457: NONEQUAL
59458: OR
59459: IFFALSE 59481
// tmp := Delete ( tmp , i ) ;
59461: LD_ADDR_VAR 0 6
59465: PUSH
59466: LD_VAR 0 6
59470: PPUSH
59471: LD_VAR 0 4
59475: PPUSH
59476: CALL_OW 3
59480: ST_TO_ADDR
59481: GO 59381
59483: POP
59484: POP
// j := GetClosestHex ( unit , tmp ) ;
59485: LD_ADDR_VAR 0 5
59489: PUSH
59490: LD_VAR 0 1
59494: PPUSH
59495: LD_VAR 0 6
59499: PPUSH
59500: CALL 58776 0 2
59504: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
59505: LD_VAR 0 1
59509: PPUSH
59510: LD_VAR 0 5
59514: PUSH
59515: LD_INT 1
59517: ARRAY
59518: PPUSH
59519: LD_VAR 0 5
59523: PUSH
59524: LD_INT 2
59526: ARRAY
59527: PPUSH
59528: CALL_OW 111
// end ;
59532: LD_VAR 0 3
59536: RET
// export function PrepareApemanSoldier ( ) ; begin
59537: LD_INT 0
59539: PPUSH
// uc_nation := 0 ;
59540: LD_ADDR_OWVAR 21
59544: PUSH
59545: LD_INT 0
59547: ST_TO_ADDR
// hc_sex := sex_male ;
59548: LD_ADDR_OWVAR 27
59552: PUSH
59553: LD_INT 1
59555: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
59556: LD_ADDR_OWVAR 28
59560: PUSH
59561: LD_INT 15
59563: ST_TO_ADDR
// hc_gallery :=  ;
59564: LD_ADDR_OWVAR 33
59568: PUSH
59569: LD_STRING 
59571: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59572: LD_ADDR_OWVAR 31
59576: PUSH
59577: LD_INT 0
59579: PPUSH
59580: LD_INT 3
59582: PPUSH
59583: CALL_OW 12
59587: PUSH
59588: LD_INT 0
59590: PPUSH
59591: LD_INT 3
59593: PPUSH
59594: CALL_OW 12
59598: PUSH
59599: LD_INT 0
59601: PUSH
59602: LD_INT 0
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: LIST
59609: LIST
59610: ST_TO_ADDR
// end ;
59611: LD_VAR 0 1
59615: RET
// export function PrepareApemanEngineer ( ) ; begin
59616: LD_INT 0
59618: PPUSH
// uc_nation := 0 ;
59619: LD_ADDR_OWVAR 21
59623: PUSH
59624: LD_INT 0
59626: ST_TO_ADDR
// hc_sex := sex_male ;
59627: LD_ADDR_OWVAR 27
59631: PUSH
59632: LD_INT 1
59634: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
59635: LD_ADDR_OWVAR 28
59639: PUSH
59640: LD_INT 16
59642: ST_TO_ADDR
// hc_gallery :=  ;
59643: LD_ADDR_OWVAR 33
59647: PUSH
59648: LD_STRING 
59650: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59651: LD_ADDR_OWVAR 31
59655: PUSH
59656: LD_INT 0
59658: PPUSH
59659: LD_INT 3
59661: PPUSH
59662: CALL_OW 12
59666: PUSH
59667: LD_INT 0
59669: PPUSH
59670: LD_INT 3
59672: PPUSH
59673: CALL_OW 12
59677: PUSH
59678: LD_INT 0
59680: PUSH
59681: LD_INT 0
59683: PUSH
59684: EMPTY
59685: LIST
59686: LIST
59687: LIST
59688: LIST
59689: ST_TO_ADDR
// end ;
59690: LD_VAR 0 1
59694: RET
// export function PrepareApeman ( agressivity ) ; begin
59695: LD_INT 0
59697: PPUSH
// uc_side := 0 ;
59698: LD_ADDR_OWVAR 20
59702: PUSH
59703: LD_INT 0
59705: ST_TO_ADDR
// uc_nation := 0 ;
59706: LD_ADDR_OWVAR 21
59710: PUSH
59711: LD_INT 0
59713: ST_TO_ADDR
// hc_sex := sex_male ;
59714: LD_ADDR_OWVAR 27
59718: PUSH
59719: LD_INT 1
59721: ST_TO_ADDR
// hc_class := class_apeman ;
59722: LD_ADDR_OWVAR 28
59726: PUSH
59727: LD_INT 12
59729: ST_TO_ADDR
// hc_gallery :=  ;
59730: LD_ADDR_OWVAR 33
59734: PUSH
59735: LD_STRING 
59737: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
59738: LD_ADDR_OWVAR 35
59742: PUSH
59743: LD_VAR 0 1
59747: NEG
59748: PPUSH
59749: LD_VAR 0 1
59753: PPUSH
59754: CALL_OW 12
59758: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59759: LD_ADDR_OWVAR 31
59763: PUSH
59764: LD_INT 0
59766: PPUSH
59767: LD_INT 3
59769: PPUSH
59770: CALL_OW 12
59774: PUSH
59775: LD_INT 0
59777: PPUSH
59778: LD_INT 3
59780: PPUSH
59781: CALL_OW 12
59785: PUSH
59786: LD_INT 0
59788: PUSH
59789: LD_INT 0
59791: PUSH
59792: EMPTY
59793: LIST
59794: LIST
59795: LIST
59796: LIST
59797: ST_TO_ADDR
// end ;
59798: LD_VAR 0 2
59802: RET
// export function PrepareTiger ( agressivity ) ; begin
59803: LD_INT 0
59805: PPUSH
// uc_side := 0 ;
59806: LD_ADDR_OWVAR 20
59810: PUSH
59811: LD_INT 0
59813: ST_TO_ADDR
// uc_nation := 0 ;
59814: LD_ADDR_OWVAR 21
59818: PUSH
59819: LD_INT 0
59821: ST_TO_ADDR
// hc_class := class_tiger ;
59822: LD_ADDR_OWVAR 28
59826: PUSH
59827: LD_INT 14
59829: ST_TO_ADDR
// hc_gallery :=  ;
59830: LD_ADDR_OWVAR 33
59834: PUSH
59835: LD_STRING 
59837: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
59838: LD_ADDR_OWVAR 35
59842: PUSH
59843: LD_VAR 0 1
59847: NEG
59848: PPUSH
59849: LD_VAR 0 1
59853: PPUSH
59854: CALL_OW 12
59858: ST_TO_ADDR
// end ;
59859: LD_VAR 0 2
59863: RET
// export function PrepareEnchidna ( ) ; begin
59864: LD_INT 0
59866: PPUSH
// uc_side := 0 ;
59867: LD_ADDR_OWVAR 20
59871: PUSH
59872: LD_INT 0
59874: ST_TO_ADDR
// uc_nation := 0 ;
59875: LD_ADDR_OWVAR 21
59879: PUSH
59880: LD_INT 0
59882: ST_TO_ADDR
// hc_class := class_baggie ;
59883: LD_ADDR_OWVAR 28
59887: PUSH
59888: LD_INT 13
59890: ST_TO_ADDR
// hc_gallery :=  ;
59891: LD_ADDR_OWVAR 33
59895: PUSH
59896: LD_STRING 
59898: ST_TO_ADDR
// end ;
59899: LD_VAR 0 1
59903: RET
// export function PrepareFrog ( ) ; begin
59904: LD_INT 0
59906: PPUSH
// uc_side := 0 ;
59907: LD_ADDR_OWVAR 20
59911: PUSH
59912: LD_INT 0
59914: ST_TO_ADDR
// uc_nation := 0 ;
59915: LD_ADDR_OWVAR 21
59919: PUSH
59920: LD_INT 0
59922: ST_TO_ADDR
// hc_class := class_frog ;
59923: LD_ADDR_OWVAR 28
59927: PUSH
59928: LD_INT 19
59930: ST_TO_ADDR
// hc_gallery :=  ;
59931: LD_ADDR_OWVAR 33
59935: PUSH
59936: LD_STRING 
59938: ST_TO_ADDR
// end ;
59939: LD_VAR 0 1
59943: RET
// export function PrepareFish ( ) ; begin
59944: LD_INT 0
59946: PPUSH
// uc_side := 0 ;
59947: LD_ADDR_OWVAR 20
59951: PUSH
59952: LD_INT 0
59954: ST_TO_ADDR
// uc_nation := 0 ;
59955: LD_ADDR_OWVAR 21
59959: PUSH
59960: LD_INT 0
59962: ST_TO_ADDR
// hc_class := class_fish ;
59963: LD_ADDR_OWVAR 28
59967: PUSH
59968: LD_INT 20
59970: ST_TO_ADDR
// hc_gallery :=  ;
59971: LD_ADDR_OWVAR 33
59975: PUSH
59976: LD_STRING 
59978: ST_TO_ADDR
// end ;
59979: LD_VAR 0 1
59983: RET
// export function PrepareBird ( ) ; begin
59984: LD_INT 0
59986: PPUSH
// uc_side := 0 ;
59987: LD_ADDR_OWVAR 20
59991: PUSH
59992: LD_INT 0
59994: ST_TO_ADDR
// uc_nation := 0 ;
59995: LD_ADDR_OWVAR 21
59999: PUSH
60000: LD_INT 0
60002: ST_TO_ADDR
// hc_class := class_phororhacos ;
60003: LD_ADDR_OWVAR 28
60007: PUSH
60008: LD_INT 18
60010: ST_TO_ADDR
// hc_gallery :=  ;
60011: LD_ADDR_OWVAR 33
60015: PUSH
60016: LD_STRING 
60018: ST_TO_ADDR
// end ;
60019: LD_VAR 0 1
60023: RET
// export function PrepareHorse ( ) ; begin
60024: LD_INT 0
60026: PPUSH
// uc_side := 0 ;
60027: LD_ADDR_OWVAR 20
60031: PUSH
60032: LD_INT 0
60034: ST_TO_ADDR
// uc_nation := 0 ;
60035: LD_ADDR_OWVAR 21
60039: PUSH
60040: LD_INT 0
60042: ST_TO_ADDR
// hc_class := class_horse ;
60043: LD_ADDR_OWVAR 28
60047: PUSH
60048: LD_INT 21
60050: ST_TO_ADDR
// hc_gallery :=  ;
60051: LD_ADDR_OWVAR 33
60055: PUSH
60056: LD_STRING 
60058: ST_TO_ADDR
// end ;
60059: LD_VAR 0 1
60063: RET
// export function PrepareMastodont ( ) ; begin
60064: LD_INT 0
60066: PPUSH
// uc_side := 0 ;
60067: LD_ADDR_OWVAR 20
60071: PUSH
60072: LD_INT 0
60074: ST_TO_ADDR
// uc_nation := 0 ;
60075: LD_ADDR_OWVAR 21
60079: PUSH
60080: LD_INT 0
60082: ST_TO_ADDR
// vc_chassis := class_mastodont ;
60083: LD_ADDR_OWVAR 37
60087: PUSH
60088: LD_INT 31
60090: ST_TO_ADDR
// vc_control := control_rider ;
60091: LD_ADDR_OWVAR 38
60095: PUSH
60096: LD_INT 4
60098: ST_TO_ADDR
// end ;
60099: LD_VAR 0 1
60103: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
60104: LD_INT 0
60106: PPUSH
60107: PPUSH
60108: PPUSH
// uc_side = 0 ;
60109: LD_ADDR_OWVAR 20
60113: PUSH
60114: LD_INT 0
60116: ST_TO_ADDR
// uc_nation = 0 ;
60117: LD_ADDR_OWVAR 21
60121: PUSH
60122: LD_INT 0
60124: ST_TO_ADDR
// InitHc_All ( ) ;
60125: CALL_OW 584
// InitVc ;
60129: CALL_OW 20
// if mastodonts then
60133: LD_VAR 0 6
60137: IFFALSE 60204
// for i = 1 to mastodonts do
60139: LD_ADDR_VAR 0 11
60143: PUSH
60144: DOUBLE
60145: LD_INT 1
60147: DEC
60148: ST_TO_ADDR
60149: LD_VAR 0 6
60153: PUSH
60154: FOR_TO
60155: IFFALSE 60202
// begin vc_chassis := 31 ;
60157: LD_ADDR_OWVAR 37
60161: PUSH
60162: LD_INT 31
60164: ST_TO_ADDR
// vc_control := control_rider ;
60165: LD_ADDR_OWVAR 38
60169: PUSH
60170: LD_INT 4
60172: ST_TO_ADDR
// animal := CreateVehicle ;
60173: LD_ADDR_VAR 0 12
60177: PUSH
60178: CALL_OW 45
60182: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60183: LD_VAR 0 12
60187: PPUSH
60188: LD_VAR 0 8
60192: PPUSH
60193: LD_INT 0
60195: PPUSH
60196: CALL 62332 0 3
// end ;
60200: GO 60154
60202: POP
60203: POP
// if horses then
60204: LD_VAR 0 5
60208: IFFALSE 60275
// for i = 1 to horses do
60210: LD_ADDR_VAR 0 11
60214: PUSH
60215: DOUBLE
60216: LD_INT 1
60218: DEC
60219: ST_TO_ADDR
60220: LD_VAR 0 5
60224: PUSH
60225: FOR_TO
60226: IFFALSE 60273
// begin hc_class := 21 ;
60228: LD_ADDR_OWVAR 28
60232: PUSH
60233: LD_INT 21
60235: ST_TO_ADDR
// hc_gallery :=  ;
60236: LD_ADDR_OWVAR 33
60240: PUSH
60241: LD_STRING 
60243: ST_TO_ADDR
// animal := CreateHuman ;
60244: LD_ADDR_VAR 0 12
60248: PUSH
60249: CALL_OW 44
60253: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60254: LD_VAR 0 12
60258: PPUSH
60259: LD_VAR 0 8
60263: PPUSH
60264: LD_INT 0
60266: PPUSH
60267: CALL 62332 0 3
// end ;
60271: GO 60225
60273: POP
60274: POP
// if birds then
60275: LD_VAR 0 1
60279: IFFALSE 60346
// for i = 1 to birds do
60281: LD_ADDR_VAR 0 11
60285: PUSH
60286: DOUBLE
60287: LD_INT 1
60289: DEC
60290: ST_TO_ADDR
60291: LD_VAR 0 1
60295: PUSH
60296: FOR_TO
60297: IFFALSE 60344
// begin hc_class = 18 ;
60299: LD_ADDR_OWVAR 28
60303: PUSH
60304: LD_INT 18
60306: ST_TO_ADDR
// hc_gallery =  ;
60307: LD_ADDR_OWVAR 33
60311: PUSH
60312: LD_STRING 
60314: ST_TO_ADDR
// animal := CreateHuman ;
60315: LD_ADDR_VAR 0 12
60319: PUSH
60320: CALL_OW 44
60324: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60325: LD_VAR 0 12
60329: PPUSH
60330: LD_VAR 0 8
60334: PPUSH
60335: LD_INT 0
60337: PPUSH
60338: CALL 62332 0 3
// end ;
60342: GO 60296
60344: POP
60345: POP
// if tigers then
60346: LD_VAR 0 2
60350: IFFALSE 60434
// for i = 1 to tigers do
60352: LD_ADDR_VAR 0 11
60356: PUSH
60357: DOUBLE
60358: LD_INT 1
60360: DEC
60361: ST_TO_ADDR
60362: LD_VAR 0 2
60366: PUSH
60367: FOR_TO
60368: IFFALSE 60432
// begin hc_class = class_tiger ;
60370: LD_ADDR_OWVAR 28
60374: PUSH
60375: LD_INT 14
60377: ST_TO_ADDR
// hc_gallery =  ;
60378: LD_ADDR_OWVAR 33
60382: PUSH
60383: LD_STRING 
60385: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
60386: LD_ADDR_OWVAR 35
60390: PUSH
60391: LD_INT 7
60393: NEG
60394: PPUSH
60395: LD_INT 7
60397: PPUSH
60398: CALL_OW 12
60402: ST_TO_ADDR
// animal := CreateHuman ;
60403: LD_ADDR_VAR 0 12
60407: PUSH
60408: CALL_OW 44
60412: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60413: LD_VAR 0 12
60417: PPUSH
60418: LD_VAR 0 8
60422: PPUSH
60423: LD_INT 0
60425: PPUSH
60426: CALL 62332 0 3
// end ;
60430: GO 60367
60432: POP
60433: POP
// if apemans then
60434: LD_VAR 0 3
60438: IFFALSE 60561
// for i = 1 to apemans do
60440: LD_ADDR_VAR 0 11
60444: PUSH
60445: DOUBLE
60446: LD_INT 1
60448: DEC
60449: ST_TO_ADDR
60450: LD_VAR 0 3
60454: PUSH
60455: FOR_TO
60456: IFFALSE 60559
// begin hc_class = class_apeman ;
60458: LD_ADDR_OWVAR 28
60462: PUSH
60463: LD_INT 12
60465: ST_TO_ADDR
// hc_gallery =  ;
60466: LD_ADDR_OWVAR 33
60470: PUSH
60471: LD_STRING 
60473: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
60474: LD_ADDR_OWVAR 35
60478: PUSH
60479: LD_INT 2
60481: NEG
60482: PPUSH
60483: LD_INT 2
60485: PPUSH
60486: CALL_OW 12
60490: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
60491: LD_ADDR_OWVAR 31
60495: PUSH
60496: LD_INT 1
60498: PPUSH
60499: LD_INT 3
60501: PPUSH
60502: CALL_OW 12
60506: PUSH
60507: LD_INT 1
60509: PPUSH
60510: LD_INT 3
60512: PPUSH
60513: CALL_OW 12
60517: PUSH
60518: LD_INT 0
60520: PUSH
60521: LD_INT 0
60523: PUSH
60524: EMPTY
60525: LIST
60526: LIST
60527: LIST
60528: LIST
60529: ST_TO_ADDR
// animal := CreateHuman ;
60530: LD_ADDR_VAR 0 12
60534: PUSH
60535: CALL_OW 44
60539: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60540: LD_VAR 0 12
60544: PPUSH
60545: LD_VAR 0 8
60549: PPUSH
60550: LD_INT 0
60552: PPUSH
60553: CALL 62332 0 3
// end ;
60557: GO 60455
60559: POP
60560: POP
// if enchidnas then
60561: LD_VAR 0 4
60565: IFFALSE 60632
// for i = 1 to enchidnas do
60567: LD_ADDR_VAR 0 11
60571: PUSH
60572: DOUBLE
60573: LD_INT 1
60575: DEC
60576: ST_TO_ADDR
60577: LD_VAR 0 4
60581: PUSH
60582: FOR_TO
60583: IFFALSE 60630
// begin hc_class = 13 ;
60585: LD_ADDR_OWVAR 28
60589: PUSH
60590: LD_INT 13
60592: ST_TO_ADDR
// hc_gallery =  ;
60593: LD_ADDR_OWVAR 33
60597: PUSH
60598: LD_STRING 
60600: ST_TO_ADDR
// animal := CreateHuman ;
60601: LD_ADDR_VAR 0 12
60605: PUSH
60606: CALL_OW 44
60610: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60611: LD_VAR 0 12
60615: PPUSH
60616: LD_VAR 0 8
60620: PPUSH
60621: LD_INT 0
60623: PPUSH
60624: CALL 62332 0 3
// end ;
60628: GO 60582
60630: POP
60631: POP
// if fishes then
60632: LD_VAR 0 7
60636: IFFALSE 60703
// for i = 1 to fishes do
60638: LD_ADDR_VAR 0 11
60642: PUSH
60643: DOUBLE
60644: LD_INT 1
60646: DEC
60647: ST_TO_ADDR
60648: LD_VAR 0 7
60652: PUSH
60653: FOR_TO
60654: IFFALSE 60701
// begin hc_class = 20 ;
60656: LD_ADDR_OWVAR 28
60660: PUSH
60661: LD_INT 20
60663: ST_TO_ADDR
// hc_gallery =  ;
60664: LD_ADDR_OWVAR 33
60668: PUSH
60669: LD_STRING 
60671: ST_TO_ADDR
// animal := CreateHuman ;
60672: LD_ADDR_VAR 0 12
60676: PUSH
60677: CALL_OW 44
60681: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
60682: LD_VAR 0 12
60686: PPUSH
60687: LD_VAR 0 9
60691: PPUSH
60692: LD_INT 0
60694: PPUSH
60695: CALL 62332 0 3
// end ;
60699: GO 60653
60701: POP
60702: POP
// end ;
60703: LD_VAR 0 10
60707: RET
// export function WantHeal ( sci , unit ) ; begin
60708: LD_INT 0
60710: PPUSH
// if GetTaskList ( sci ) > 0 then
60711: LD_VAR 0 1
60715: PPUSH
60716: CALL_OW 437
60720: PUSH
60721: LD_INT 0
60723: GREATER
60724: IFFALSE 60794
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
60726: LD_VAR 0 1
60730: PPUSH
60731: CALL_OW 437
60735: PUSH
60736: LD_INT 1
60738: ARRAY
60739: PUSH
60740: LD_INT 1
60742: ARRAY
60743: PUSH
60744: LD_STRING l
60746: EQUAL
60747: PUSH
60748: LD_VAR 0 1
60752: PPUSH
60753: CALL_OW 437
60757: PUSH
60758: LD_INT 1
60760: ARRAY
60761: PUSH
60762: LD_INT 4
60764: ARRAY
60765: PUSH
60766: LD_VAR 0 2
60770: EQUAL
60771: AND
60772: IFFALSE 60784
// result := true else
60774: LD_ADDR_VAR 0 3
60778: PUSH
60779: LD_INT 1
60781: ST_TO_ADDR
60782: GO 60792
// result := false ;
60784: LD_ADDR_VAR 0 3
60788: PUSH
60789: LD_INT 0
60791: ST_TO_ADDR
// end else
60792: GO 60802
// result := false ;
60794: LD_ADDR_VAR 0 3
60798: PUSH
60799: LD_INT 0
60801: ST_TO_ADDR
// end ;
60802: LD_VAR 0 3
60806: RET
// export function HealTarget ( sci ) ; begin
60807: LD_INT 0
60809: PPUSH
// if not sci then
60810: LD_VAR 0 1
60814: NOT
60815: IFFALSE 60819
// exit ;
60817: GO 60884
// result := 0 ;
60819: LD_ADDR_VAR 0 2
60823: PUSH
60824: LD_INT 0
60826: ST_TO_ADDR
// if GetTaskList ( sci ) then
60827: LD_VAR 0 1
60831: PPUSH
60832: CALL_OW 437
60836: IFFALSE 60884
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
60838: LD_VAR 0 1
60842: PPUSH
60843: CALL_OW 437
60847: PUSH
60848: LD_INT 1
60850: ARRAY
60851: PUSH
60852: LD_INT 1
60854: ARRAY
60855: PUSH
60856: LD_STRING l
60858: EQUAL
60859: IFFALSE 60884
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
60861: LD_ADDR_VAR 0 2
60865: PUSH
60866: LD_VAR 0 1
60870: PPUSH
60871: CALL_OW 437
60875: PUSH
60876: LD_INT 1
60878: ARRAY
60879: PUSH
60880: LD_INT 4
60882: ARRAY
60883: ST_TO_ADDR
// end ;
60884: LD_VAR 0 2
60888: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
60889: LD_INT 0
60891: PPUSH
60892: PPUSH
60893: PPUSH
60894: PPUSH
// if not base_units then
60895: LD_VAR 0 1
60899: NOT
60900: IFFALSE 60904
// exit ;
60902: GO 60991
// result := false ;
60904: LD_ADDR_VAR 0 2
60908: PUSH
60909: LD_INT 0
60911: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
60912: LD_ADDR_VAR 0 5
60916: PUSH
60917: LD_VAR 0 1
60921: PPUSH
60922: LD_INT 21
60924: PUSH
60925: LD_INT 3
60927: PUSH
60928: EMPTY
60929: LIST
60930: LIST
60931: PPUSH
60932: CALL_OW 72
60936: ST_TO_ADDR
// if not tmp then
60937: LD_VAR 0 5
60941: NOT
60942: IFFALSE 60946
// exit ;
60944: GO 60991
// for i in tmp do
60946: LD_ADDR_VAR 0 3
60950: PUSH
60951: LD_VAR 0 5
60955: PUSH
60956: FOR_IN
60957: IFFALSE 60989
// begin result := EnemyInRange ( i , 22 ) ;
60959: LD_ADDR_VAR 0 2
60963: PUSH
60964: LD_VAR 0 3
60968: PPUSH
60969: LD_INT 22
60971: PPUSH
60972: CALL 58578 0 2
60976: ST_TO_ADDR
// if result then
60977: LD_VAR 0 2
60981: IFFALSE 60987
// exit ;
60983: POP
60984: POP
60985: GO 60991
// end ;
60987: GO 60956
60989: POP
60990: POP
// end ;
60991: LD_VAR 0 2
60995: RET
// export function FilterByTag ( units , tag ) ; begin
60996: LD_INT 0
60998: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
60999: LD_ADDR_VAR 0 3
61003: PUSH
61004: LD_VAR 0 1
61008: PPUSH
61009: LD_INT 120
61011: PUSH
61012: LD_VAR 0 2
61016: PUSH
61017: EMPTY
61018: LIST
61019: LIST
61020: PPUSH
61021: CALL_OW 72
61025: ST_TO_ADDR
// end ;
61026: LD_VAR 0 3
61030: RET
// export function IsDriver ( un ) ; begin
61031: LD_INT 0
61033: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
61034: LD_ADDR_VAR 0 2
61038: PUSH
61039: LD_VAR 0 1
61043: PUSH
61044: LD_INT 55
61046: PUSH
61047: EMPTY
61048: LIST
61049: PPUSH
61050: CALL_OW 69
61054: IN
61055: ST_TO_ADDR
// end ;
61056: LD_VAR 0 2
61060: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
61061: LD_INT 0
61063: PPUSH
61064: PPUSH
// list := [ ] ;
61065: LD_ADDR_VAR 0 5
61069: PUSH
61070: EMPTY
61071: ST_TO_ADDR
// case d of 0 :
61072: LD_VAR 0 3
61076: PUSH
61077: LD_INT 0
61079: DOUBLE
61080: EQUAL
61081: IFTRUE 61085
61083: GO 61218
61085: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
61086: LD_ADDR_VAR 0 5
61090: PUSH
61091: LD_VAR 0 1
61095: PUSH
61096: LD_INT 4
61098: MINUS
61099: PUSH
61100: LD_VAR 0 2
61104: PUSH
61105: LD_INT 4
61107: MINUS
61108: PUSH
61109: LD_INT 2
61111: PUSH
61112: EMPTY
61113: LIST
61114: LIST
61115: LIST
61116: PUSH
61117: LD_VAR 0 1
61121: PUSH
61122: LD_INT 3
61124: MINUS
61125: PUSH
61126: LD_VAR 0 2
61130: PUSH
61131: LD_INT 1
61133: PUSH
61134: EMPTY
61135: LIST
61136: LIST
61137: LIST
61138: PUSH
61139: LD_VAR 0 1
61143: PUSH
61144: LD_INT 4
61146: PLUS
61147: PUSH
61148: LD_VAR 0 2
61152: PUSH
61153: LD_INT 4
61155: PUSH
61156: EMPTY
61157: LIST
61158: LIST
61159: LIST
61160: PUSH
61161: LD_VAR 0 1
61165: PUSH
61166: LD_INT 3
61168: PLUS
61169: PUSH
61170: LD_VAR 0 2
61174: PUSH
61175: LD_INT 3
61177: PLUS
61178: PUSH
61179: LD_INT 5
61181: PUSH
61182: EMPTY
61183: LIST
61184: LIST
61185: LIST
61186: PUSH
61187: LD_VAR 0 1
61191: PUSH
61192: LD_VAR 0 2
61196: PUSH
61197: LD_INT 4
61199: PLUS
61200: PUSH
61201: LD_INT 0
61203: PUSH
61204: EMPTY
61205: LIST
61206: LIST
61207: LIST
61208: PUSH
61209: EMPTY
61210: LIST
61211: LIST
61212: LIST
61213: LIST
61214: LIST
61215: ST_TO_ADDR
// end ; 1 :
61216: GO 61916
61218: LD_INT 1
61220: DOUBLE
61221: EQUAL
61222: IFTRUE 61226
61224: GO 61359
61226: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
61227: LD_ADDR_VAR 0 5
61231: PUSH
61232: LD_VAR 0 1
61236: PUSH
61237: LD_VAR 0 2
61241: PUSH
61242: LD_INT 4
61244: MINUS
61245: PUSH
61246: LD_INT 3
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: LIST
61253: PUSH
61254: LD_VAR 0 1
61258: PUSH
61259: LD_INT 3
61261: MINUS
61262: PUSH
61263: LD_VAR 0 2
61267: PUSH
61268: LD_INT 3
61270: MINUS
61271: PUSH
61272: LD_INT 2
61274: PUSH
61275: EMPTY
61276: LIST
61277: LIST
61278: LIST
61279: PUSH
61280: LD_VAR 0 1
61284: PUSH
61285: LD_INT 4
61287: MINUS
61288: PUSH
61289: LD_VAR 0 2
61293: PUSH
61294: LD_INT 1
61296: PUSH
61297: EMPTY
61298: LIST
61299: LIST
61300: LIST
61301: PUSH
61302: LD_VAR 0 1
61306: PUSH
61307: LD_VAR 0 2
61311: PUSH
61312: LD_INT 3
61314: PLUS
61315: PUSH
61316: LD_INT 0
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: LIST
61323: PUSH
61324: LD_VAR 0 1
61328: PUSH
61329: LD_INT 4
61331: PLUS
61332: PUSH
61333: LD_VAR 0 2
61337: PUSH
61338: LD_INT 4
61340: PLUS
61341: PUSH
61342: LD_INT 5
61344: PUSH
61345: EMPTY
61346: LIST
61347: LIST
61348: LIST
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: LIST
61354: LIST
61355: LIST
61356: ST_TO_ADDR
// end ; 2 :
61357: GO 61916
61359: LD_INT 2
61361: DOUBLE
61362: EQUAL
61363: IFTRUE 61367
61365: GO 61496
61367: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
61368: LD_ADDR_VAR 0 5
61372: PUSH
61373: LD_VAR 0 1
61377: PUSH
61378: LD_VAR 0 2
61382: PUSH
61383: LD_INT 3
61385: MINUS
61386: PUSH
61387: LD_INT 3
61389: PUSH
61390: EMPTY
61391: LIST
61392: LIST
61393: LIST
61394: PUSH
61395: LD_VAR 0 1
61399: PUSH
61400: LD_INT 4
61402: PLUS
61403: PUSH
61404: LD_VAR 0 2
61408: PUSH
61409: LD_INT 4
61411: PUSH
61412: EMPTY
61413: LIST
61414: LIST
61415: LIST
61416: PUSH
61417: LD_VAR 0 1
61421: PUSH
61422: LD_VAR 0 2
61426: PUSH
61427: LD_INT 4
61429: PLUS
61430: PUSH
61431: LD_INT 0
61433: PUSH
61434: EMPTY
61435: LIST
61436: LIST
61437: LIST
61438: PUSH
61439: LD_VAR 0 1
61443: PUSH
61444: LD_INT 3
61446: MINUS
61447: PUSH
61448: LD_VAR 0 2
61452: PUSH
61453: LD_INT 1
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: LIST
61460: PUSH
61461: LD_VAR 0 1
61465: PUSH
61466: LD_INT 4
61468: MINUS
61469: PUSH
61470: LD_VAR 0 2
61474: PUSH
61475: LD_INT 4
61477: MINUS
61478: PUSH
61479: LD_INT 2
61481: PUSH
61482: EMPTY
61483: LIST
61484: LIST
61485: LIST
61486: PUSH
61487: EMPTY
61488: LIST
61489: LIST
61490: LIST
61491: LIST
61492: LIST
61493: ST_TO_ADDR
// end ; 3 :
61494: GO 61916
61496: LD_INT 3
61498: DOUBLE
61499: EQUAL
61500: IFTRUE 61504
61502: GO 61637
61504: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
61505: LD_ADDR_VAR 0 5
61509: PUSH
61510: LD_VAR 0 1
61514: PUSH
61515: LD_INT 3
61517: PLUS
61518: PUSH
61519: LD_VAR 0 2
61523: PUSH
61524: LD_INT 4
61526: PUSH
61527: EMPTY
61528: LIST
61529: LIST
61530: LIST
61531: PUSH
61532: LD_VAR 0 1
61536: PUSH
61537: LD_INT 4
61539: PLUS
61540: PUSH
61541: LD_VAR 0 2
61545: PUSH
61546: LD_INT 4
61548: PLUS
61549: PUSH
61550: LD_INT 5
61552: PUSH
61553: EMPTY
61554: LIST
61555: LIST
61556: LIST
61557: PUSH
61558: LD_VAR 0 1
61562: PUSH
61563: LD_INT 4
61565: MINUS
61566: PUSH
61567: LD_VAR 0 2
61571: PUSH
61572: LD_INT 1
61574: PUSH
61575: EMPTY
61576: LIST
61577: LIST
61578: LIST
61579: PUSH
61580: LD_VAR 0 1
61584: PUSH
61585: LD_VAR 0 2
61589: PUSH
61590: LD_INT 4
61592: MINUS
61593: PUSH
61594: LD_INT 3
61596: PUSH
61597: EMPTY
61598: LIST
61599: LIST
61600: LIST
61601: PUSH
61602: LD_VAR 0 1
61606: PUSH
61607: LD_INT 3
61609: MINUS
61610: PUSH
61611: LD_VAR 0 2
61615: PUSH
61616: LD_INT 3
61618: MINUS
61619: PUSH
61620: LD_INT 2
61622: PUSH
61623: EMPTY
61624: LIST
61625: LIST
61626: LIST
61627: PUSH
61628: EMPTY
61629: LIST
61630: LIST
61631: LIST
61632: LIST
61633: LIST
61634: ST_TO_ADDR
// end ; 4 :
61635: GO 61916
61637: LD_INT 4
61639: DOUBLE
61640: EQUAL
61641: IFTRUE 61645
61643: GO 61778
61645: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
61646: LD_ADDR_VAR 0 5
61650: PUSH
61651: LD_VAR 0 1
61655: PUSH
61656: LD_VAR 0 2
61660: PUSH
61661: LD_INT 4
61663: PLUS
61664: PUSH
61665: LD_INT 0
61667: PUSH
61668: EMPTY
61669: LIST
61670: LIST
61671: LIST
61672: PUSH
61673: LD_VAR 0 1
61677: PUSH
61678: LD_INT 3
61680: PLUS
61681: PUSH
61682: LD_VAR 0 2
61686: PUSH
61687: LD_INT 3
61689: PLUS
61690: PUSH
61691: LD_INT 5
61693: PUSH
61694: EMPTY
61695: LIST
61696: LIST
61697: LIST
61698: PUSH
61699: LD_VAR 0 1
61703: PUSH
61704: LD_INT 4
61706: PLUS
61707: PUSH
61708: LD_VAR 0 2
61712: PUSH
61713: LD_INT 4
61715: PUSH
61716: EMPTY
61717: LIST
61718: LIST
61719: LIST
61720: PUSH
61721: LD_VAR 0 1
61725: PUSH
61726: LD_VAR 0 2
61730: PUSH
61731: LD_INT 3
61733: MINUS
61734: PUSH
61735: LD_INT 3
61737: PUSH
61738: EMPTY
61739: LIST
61740: LIST
61741: LIST
61742: PUSH
61743: LD_VAR 0 1
61747: PUSH
61748: LD_INT 4
61750: MINUS
61751: PUSH
61752: LD_VAR 0 2
61756: PUSH
61757: LD_INT 4
61759: MINUS
61760: PUSH
61761: LD_INT 2
61763: PUSH
61764: EMPTY
61765: LIST
61766: LIST
61767: LIST
61768: PUSH
61769: EMPTY
61770: LIST
61771: LIST
61772: LIST
61773: LIST
61774: LIST
61775: ST_TO_ADDR
// end ; 5 :
61776: GO 61916
61778: LD_INT 5
61780: DOUBLE
61781: EQUAL
61782: IFTRUE 61786
61784: GO 61915
61786: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
61787: LD_ADDR_VAR 0 5
61791: PUSH
61792: LD_VAR 0 1
61796: PUSH
61797: LD_INT 4
61799: MINUS
61800: PUSH
61801: LD_VAR 0 2
61805: PUSH
61806: LD_INT 1
61808: PUSH
61809: EMPTY
61810: LIST
61811: LIST
61812: LIST
61813: PUSH
61814: LD_VAR 0 1
61818: PUSH
61819: LD_VAR 0 2
61823: PUSH
61824: LD_INT 4
61826: MINUS
61827: PUSH
61828: LD_INT 3
61830: PUSH
61831: EMPTY
61832: LIST
61833: LIST
61834: LIST
61835: PUSH
61836: LD_VAR 0 1
61840: PUSH
61841: LD_INT 4
61843: PLUS
61844: PUSH
61845: LD_VAR 0 2
61849: PUSH
61850: LD_INT 4
61852: PLUS
61853: PUSH
61854: LD_INT 5
61856: PUSH
61857: EMPTY
61858: LIST
61859: LIST
61860: LIST
61861: PUSH
61862: LD_VAR 0 1
61866: PUSH
61867: LD_INT 3
61869: PLUS
61870: PUSH
61871: LD_VAR 0 2
61875: PUSH
61876: LD_INT 4
61878: PUSH
61879: EMPTY
61880: LIST
61881: LIST
61882: LIST
61883: PUSH
61884: LD_VAR 0 1
61888: PUSH
61889: LD_VAR 0 2
61893: PUSH
61894: LD_INT 3
61896: PLUS
61897: PUSH
61898: LD_INT 0
61900: PUSH
61901: EMPTY
61902: LIST
61903: LIST
61904: LIST
61905: PUSH
61906: EMPTY
61907: LIST
61908: LIST
61909: LIST
61910: LIST
61911: LIST
61912: ST_TO_ADDR
// end ; end ;
61913: GO 61916
61915: POP
// result := list ;
61916: LD_ADDR_VAR 0 4
61920: PUSH
61921: LD_VAR 0 5
61925: ST_TO_ADDR
// end ;
61926: LD_VAR 0 4
61930: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
61931: LD_INT 0
61933: PPUSH
61934: PPUSH
61935: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
61936: LD_VAR 0 1
61940: NOT
61941: PUSH
61942: LD_VAR 0 2
61946: PUSH
61947: LD_INT 1
61949: PUSH
61950: LD_INT 2
61952: PUSH
61953: LD_INT 3
61955: PUSH
61956: LD_INT 4
61958: PUSH
61959: EMPTY
61960: LIST
61961: LIST
61962: LIST
61963: LIST
61964: IN
61965: NOT
61966: OR
61967: IFFALSE 61971
// exit ;
61969: GO 62054
// tmp := [ ] ;
61971: LD_ADDR_VAR 0 5
61975: PUSH
61976: EMPTY
61977: ST_TO_ADDR
// for i in units do
61978: LD_ADDR_VAR 0 4
61982: PUSH
61983: LD_VAR 0 1
61987: PUSH
61988: FOR_IN
61989: IFFALSE 62023
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
61991: LD_ADDR_VAR 0 5
61995: PUSH
61996: LD_VAR 0 5
62000: PPUSH
62001: LD_VAR 0 4
62005: PPUSH
62006: LD_VAR 0 2
62010: PPUSH
62011: CALL_OW 259
62015: PPUSH
62016: CALL 63415 0 2
62020: ST_TO_ADDR
62021: GO 61988
62023: POP
62024: POP
// if not tmp then
62025: LD_VAR 0 5
62029: NOT
62030: IFFALSE 62034
// exit ;
62032: GO 62054
// result := SortListByListDesc ( units , tmp ) ;
62034: LD_ADDR_VAR 0 3
62038: PUSH
62039: LD_VAR 0 1
62043: PPUSH
62044: LD_VAR 0 5
62048: PPUSH
62049: CALL_OW 77
62053: ST_TO_ADDR
// end ;
62054: LD_VAR 0 3
62058: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
62059: LD_INT 0
62061: PPUSH
62062: PPUSH
62063: PPUSH
// result := false ;
62064: LD_ADDR_VAR 0 3
62068: PUSH
62069: LD_INT 0
62071: ST_TO_ADDR
// if not building then
62072: LD_VAR 0 2
62076: NOT
62077: IFFALSE 62081
// exit ;
62079: GO 62219
// x := GetX ( building ) ;
62081: LD_ADDR_VAR 0 4
62085: PUSH
62086: LD_VAR 0 2
62090: PPUSH
62091: CALL_OW 250
62095: ST_TO_ADDR
// y := GetY ( building ) ;
62096: LD_ADDR_VAR 0 5
62100: PUSH
62101: LD_VAR 0 2
62105: PPUSH
62106: CALL_OW 251
62110: ST_TO_ADDR
// if not x or not y then
62111: LD_VAR 0 4
62115: NOT
62116: PUSH
62117: LD_VAR 0 5
62121: NOT
62122: OR
62123: IFFALSE 62127
// exit ;
62125: GO 62219
// if GetTaskList ( unit ) then
62127: LD_VAR 0 1
62131: PPUSH
62132: CALL_OW 437
62136: IFFALSE 62219
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62138: LD_STRING e
62140: PUSH
62141: LD_VAR 0 1
62145: PPUSH
62146: CALL_OW 437
62150: PUSH
62151: LD_INT 1
62153: ARRAY
62154: PUSH
62155: LD_INT 1
62157: ARRAY
62158: EQUAL
62159: PUSH
62160: LD_VAR 0 4
62164: PUSH
62165: LD_VAR 0 1
62169: PPUSH
62170: CALL_OW 437
62174: PUSH
62175: LD_INT 1
62177: ARRAY
62178: PUSH
62179: LD_INT 2
62181: ARRAY
62182: EQUAL
62183: AND
62184: PUSH
62185: LD_VAR 0 5
62189: PUSH
62190: LD_VAR 0 1
62194: PPUSH
62195: CALL_OW 437
62199: PUSH
62200: LD_INT 1
62202: ARRAY
62203: PUSH
62204: LD_INT 3
62206: ARRAY
62207: EQUAL
62208: AND
62209: IFFALSE 62219
// result := true end ;
62211: LD_ADDR_VAR 0 3
62215: PUSH
62216: LD_INT 1
62218: ST_TO_ADDR
// end ;
62219: LD_VAR 0 3
62223: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
62224: LD_INT 0
62226: PPUSH
// result := false ;
62227: LD_ADDR_VAR 0 4
62231: PUSH
62232: LD_INT 0
62234: ST_TO_ADDR
// if GetTaskList ( unit ) then
62235: LD_VAR 0 1
62239: PPUSH
62240: CALL_OW 437
62244: IFFALSE 62327
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62246: LD_STRING M
62248: PUSH
62249: LD_VAR 0 1
62253: PPUSH
62254: CALL_OW 437
62258: PUSH
62259: LD_INT 1
62261: ARRAY
62262: PUSH
62263: LD_INT 1
62265: ARRAY
62266: EQUAL
62267: PUSH
62268: LD_VAR 0 2
62272: PUSH
62273: LD_VAR 0 1
62277: PPUSH
62278: CALL_OW 437
62282: PUSH
62283: LD_INT 1
62285: ARRAY
62286: PUSH
62287: LD_INT 2
62289: ARRAY
62290: EQUAL
62291: AND
62292: PUSH
62293: LD_VAR 0 3
62297: PUSH
62298: LD_VAR 0 1
62302: PPUSH
62303: CALL_OW 437
62307: PUSH
62308: LD_INT 1
62310: ARRAY
62311: PUSH
62312: LD_INT 3
62314: ARRAY
62315: EQUAL
62316: AND
62317: IFFALSE 62327
// result := true ;
62319: LD_ADDR_VAR 0 4
62323: PUSH
62324: LD_INT 1
62326: ST_TO_ADDR
// end ; end ;
62327: LD_VAR 0 4
62331: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
62332: LD_INT 0
62334: PPUSH
62335: PPUSH
62336: PPUSH
62337: PPUSH
// if not unit or not area then
62338: LD_VAR 0 1
62342: NOT
62343: PUSH
62344: LD_VAR 0 2
62348: NOT
62349: OR
62350: IFFALSE 62354
// exit ;
62352: GO 62518
// tmp := AreaToList ( area , i ) ;
62354: LD_ADDR_VAR 0 6
62358: PUSH
62359: LD_VAR 0 2
62363: PPUSH
62364: LD_VAR 0 5
62368: PPUSH
62369: CALL_OW 517
62373: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
62374: LD_ADDR_VAR 0 5
62378: PUSH
62379: DOUBLE
62380: LD_INT 1
62382: DEC
62383: ST_TO_ADDR
62384: LD_VAR 0 6
62388: PUSH
62389: LD_INT 1
62391: ARRAY
62392: PUSH
62393: FOR_TO
62394: IFFALSE 62516
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
62396: LD_ADDR_VAR 0 7
62400: PUSH
62401: LD_VAR 0 6
62405: PUSH
62406: LD_INT 1
62408: ARRAY
62409: PUSH
62410: LD_VAR 0 5
62414: ARRAY
62415: PUSH
62416: LD_VAR 0 6
62420: PUSH
62421: LD_INT 2
62423: ARRAY
62424: PUSH
62425: LD_VAR 0 5
62429: ARRAY
62430: PUSH
62431: EMPTY
62432: LIST
62433: LIST
62434: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
62435: LD_VAR 0 7
62439: PUSH
62440: LD_INT 1
62442: ARRAY
62443: PPUSH
62444: LD_VAR 0 7
62448: PUSH
62449: LD_INT 2
62451: ARRAY
62452: PPUSH
62453: CALL_OW 428
62457: PUSH
62458: LD_INT 0
62460: EQUAL
62461: IFFALSE 62514
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
62463: LD_VAR 0 1
62467: PPUSH
62468: LD_VAR 0 7
62472: PUSH
62473: LD_INT 1
62475: ARRAY
62476: PPUSH
62477: LD_VAR 0 7
62481: PUSH
62482: LD_INT 2
62484: ARRAY
62485: PPUSH
62486: LD_VAR 0 3
62490: PPUSH
62491: CALL_OW 48
// result := IsPlaced ( unit ) ;
62495: LD_ADDR_VAR 0 4
62499: PUSH
62500: LD_VAR 0 1
62504: PPUSH
62505: CALL_OW 305
62509: ST_TO_ADDR
// exit ;
62510: POP
62511: POP
62512: GO 62518
// end ; end ;
62514: GO 62393
62516: POP
62517: POP
// end ;
62518: LD_VAR 0 4
62522: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
62523: LD_INT 0
62525: PPUSH
62526: PPUSH
62527: PPUSH
// if not side or side > 8 then
62528: LD_VAR 0 1
62532: NOT
62533: PUSH
62534: LD_VAR 0 1
62538: PUSH
62539: LD_INT 8
62541: GREATER
62542: OR
62543: IFFALSE 62547
// exit ;
62545: GO 62734
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
62547: LD_ADDR_VAR 0 4
62551: PUSH
62552: LD_INT 22
62554: PUSH
62555: LD_VAR 0 1
62559: PUSH
62560: EMPTY
62561: LIST
62562: LIST
62563: PUSH
62564: LD_INT 21
62566: PUSH
62567: LD_INT 3
62569: PUSH
62570: EMPTY
62571: LIST
62572: LIST
62573: PUSH
62574: EMPTY
62575: LIST
62576: LIST
62577: PPUSH
62578: CALL_OW 69
62582: ST_TO_ADDR
// if not tmp then
62583: LD_VAR 0 4
62587: NOT
62588: IFFALSE 62592
// exit ;
62590: GO 62734
// enable_addtolog := true ;
62592: LD_ADDR_OWVAR 81
62596: PUSH
62597: LD_INT 1
62599: ST_TO_ADDR
// AddToLog ( [ ) ;
62600: LD_STRING [
62602: PPUSH
62603: CALL_OW 561
// for i in tmp do
62607: LD_ADDR_VAR 0 3
62611: PUSH
62612: LD_VAR 0 4
62616: PUSH
62617: FOR_IN
62618: IFFALSE 62725
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
62620: LD_STRING [
62622: PUSH
62623: LD_VAR 0 3
62627: PPUSH
62628: CALL_OW 266
62632: STR
62633: PUSH
62634: LD_STRING , 
62636: STR
62637: PUSH
62638: LD_VAR 0 3
62642: PPUSH
62643: CALL_OW 250
62647: STR
62648: PUSH
62649: LD_STRING , 
62651: STR
62652: PUSH
62653: LD_VAR 0 3
62657: PPUSH
62658: CALL_OW 251
62662: STR
62663: PUSH
62664: LD_STRING , 
62666: STR
62667: PUSH
62668: LD_VAR 0 3
62672: PPUSH
62673: CALL_OW 254
62677: STR
62678: PUSH
62679: LD_STRING , 
62681: STR
62682: PUSH
62683: LD_VAR 0 3
62687: PPUSH
62688: LD_INT 1
62690: PPUSH
62691: CALL_OW 268
62695: STR
62696: PUSH
62697: LD_STRING , 
62699: STR
62700: PUSH
62701: LD_VAR 0 3
62705: PPUSH
62706: LD_INT 2
62708: PPUSH
62709: CALL_OW 268
62713: STR
62714: PUSH
62715: LD_STRING ],
62717: STR
62718: PPUSH
62719: CALL_OW 561
// end ;
62723: GO 62617
62725: POP
62726: POP
// AddToLog ( ]; ) ;
62727: LD_STRING ];
62729: PPUSH
62730: CALL_OW 561
// end ;
62734: LD_VAR 0 2
62738: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
62739: LD_INT 0
62741: PPUSH
62742: PPUSH
62743: PPUSH
62744: PPUSH
62745: PPUSH
// if not area or not rate or not max then
62746: LD_VAR 0 1
62750: NOT
62751: PUSH
62752: LD_VAR 0 2
62756: NOT
62757: OR
62758: PUSH
62759: LD_VAR 0 4
62763: NOT
62764: OR
62765: IFFALSE 62769
// exit ;
62767: GO 62958
// while 1 do
62769: LD_INT 1
62771: IFFALSE 62958
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
62773: LD_ADDR_VAR 0 9
62777: PUSH
62778: LD_VAR 0 1
62782: PPUSH
62783: LD_INT 1
62785: PPUSH
62786: CALL_OW 287
62790: PUSH
62791: LD_INT 10
62793: MUL
62794: ST_TO_ADDR
// r := rate / 10 ;
62795: LD_ADDR_VAR 0 7
62799: PUSH
62800: LD_VAR 0 2
62804: PUSH
62805: LD_INT 10
62807: DIVREAL
62808: ST_TO_ADDR
// time := 1 1$00 ;
62809: LD_ADDR_VAR 0 8
62813: PUSH
62814: LD_INT 2100
62816: ST_TO_ADDR
// if amount < min then
62817: LD_VAR 0 9
62821: PUSH
62822: LD_VAR 0 3
62826: LESS
62827: IFFALSE 62845
// r := r * 2 else
62829: LD_ADDR_VAR 0 7
62833: PUSH
62834: LD_VAR 0 7
62838: PUSH
62839: LD_INT 2
62841: MUL
62842: ST_TO_ADDR
62843: GO 62871
// if amount > max then
62845: LD_VAR 0 9
62849: PUSH
62850: LD_VAR 0 4
62854: GREATER
62855: IFFALSE 62871
// r := r / 2 ;
62857: LD_ADDR_VAR 0 7
62861: PUSH
62862: LD_VAR 0 7
62866: PUSH
62867: LD_INT 2
62869: DIVREAL
62870: ST_TO_ADDR
// time := time / r ;
62871: LD_ADDR_VAR 0 8
62875: PUSH
62876: LD_VAR 0 8
62880: PUSH
62881: LD_VAR 0 7
62885: DIVREAL
62886: ST_TO_ADDR
// if time < 0 then
62887: LD_VAR 0 8
62891: PUSH
62892: LD_INT 0
62894: LESS
62895: IFFALSE 62912
// time := time * - 1 ;
62897: LD_ADDR_VAR 0 8
62901: PUSH
62902: LD_VAR 0 8
62906: PUSH
62907: LD_INT 1
62909: NEG
62910: MUL
62911: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
62912: LD_VAR 0 8
62916: PUSH
62917: LD_INT 35
62919: PPUSH
62920: LD_INT 875
62922: PPUSH
62923: CALL_OW 12
62927: PLUS
62928: PPUSH
62929: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
62933: LD_INT 1
62935: PPUSH
62936: LD_INT 5
62938: PPUSH
62939: CALL_OW 12
62943: PPUSH
62944: LD_VAR 0 1
62948: PPUSH
62949: LD_INT 1
62951: PPUSH
62952: CALL_OW 55
// end ;
62956: GO 62769
// end ;
62958: LD_VAR 0 5
62962: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
62963: LD_INT 0
62965: PPUSH
62966: PPUSH
62967: PPUSH
62968: PPUSH
62969: PPUSH
62970: PPUSH
62971: PPUSH
62972: PPUSH
// if not turrets or not factories then
62973: LD_VAR 0 1
62977: NOT
62978: PUSH
62979: LD_VAR 0 2
62983: NOT
62984: OR
62985: IFFALSE 62989
// exit ;
62987: GO 63296
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
62989: LD_ADDR_VAR 0 10
62993: PUSH
62994: LD_INT 5
62996: PUSH
62997: LD_INT 6
62999: PUSH
63000: EMPTY
63001: LIST
63002: LIST
63003: PUSH
63004: LD_INT 2
63006: PUSH
63007: LD_INT 4
63009: PUSH
63010: EMPTY
63011: LIST
63012: LIST
63013: PUSH
63014: LD_INT 3
63016: PUSH
63017: LD_INT 5
63019: PUSH
63020: EMPTY
63021: LIST
63022: LIST
63023: PUSH
63024: EMPTY
63025: LIST
63026: LIST
63027: LIST
63028: PUSH
63029: LD_INT 24
63031: PUSH
63032: LD_INT 25
63034: PUSH
63035: EMPTY
63036: LIST
63037: LIST
63038: PUSH
63039: LD_INT 23
63041: PUSH
63042: LD_INT 27
63044: PUSH
63045: EMPTY
63046: LIST
63047: LIST
63048: PUSH
63049: EMPTY
63050: LIST
63051: LIST
63052: PUSH
63053: LD_INT 42
63055: PUSH
63056: LD_INT 43
63058: PUSH
63059: EMPTY
63060: LIST
63061: LIST
63062: PUSH
63063: LD_INT 44
63065: PUSH
63066: LD_INT 46
63068: PUSH
63069: EMPTY
63070: LIST
63071: LIST
63072: PUSH
63073: LD_INT 45
63075: PUSH
63076: LD_INT 47
63078: PUSH
63079: EMPTY
63080: LIST
63081: LIST
63082: PUSH
63083: EMPTY
63084: LIST
63085: LIST
63086: LIST
63087: PUSH
63088: EMPTY
63089: LIST
63090: LIST
63091: LIST
63092: ST_TO_ADDR
// result := [ ] ;
63093: LD_ADDR_VAR 0 3
63097: PUSH
63098: EMPTY
63099: ST_TO_ADDR
// for i in turrets do
63100: LD_ADDR_VAR 0 4
63104: PUSH
63105: LD_VAR 0 1
63109: PUSH
63110: FOR_IN
63111: IFFALSE 63294
// begin nat := GetNation ( i ) ;
63113: LD_ADDR_VAR 0 7
63117: PUSH
63118: LD_VAR 0 4
63122: PPUSH
63123: CALL_OW 248
63127: ST_TO_ADDR
// weapon := 0 ;
63128: LD_ADDR_VAR 0 8
63132: PUSH
63133: LD_INT 0
63135: ST_TO_ADDR
// if not nat then
63136: LD_VAR 0 7
63140: NOT
63141: IFFALSE 63145
// continue ;
63143: GO 63110
// for j in list [ nat ] do
63145: LD_ADDR_VAR 0 5
63149: PUSH
63150: LD_VAR 0 10
63154: PUSH
63155: LD_VAR 0 7
63159: ARRAY
63160: PUSH
63161: FOR_IN
63162: IFFALSE 63203
// if GetBWeapon ( i ) = j [ 1 ] then
63164: LD_VAR 0 4
63168: PPUSH
63169: CALL_OW 269
63173: PUSH
63174: LD_VAR 0 5
63178: PUSH
63179: LD_INT 1
63181: ARRAY
63182: EQUAL
63183: IFFALSE 63201
// begin weapon := j [ 2 ] ;
63185: LD_ADDR_VAR 0 8
63189: PUSH
63190: LD_VAR 0 5
63194: PUSH
63195: LD_INT 2
63197: ARRAY
63198: ST_TO_ADDR
// break ;
63199: GO 63203
// end ;
63201: GO 63161
63203: POP
63204: POP
// if not weapon then
63205: LD_VAR 0 8
63209: NOT
63210: IFFALSE 63214
// continue ;
63212: GO 63110
// for k in factories do
63214: LD_ADDR_VAR 0 6
63218: PUSH
63219: LD_VAR 0 2
63223: PUSH
63224: FOR_IN
63225: IFFALSE 63290
// begin weapons := AvailableWeaponList ( k ) ;
63227: LD_ADDR_VAR 0 9
63231: PUSH
63232: LD_VAR 0 6
63236: PPUSH
63237: CALL_OW 478
63241: ST_TO_ADDR
// if not weapons then
63242: LD_VAR 0 9
63246: NOT
63247: IFFALSE 63251
// continue ;
63249: GO 63224
// if weapon in weapons then
63251: LD_VAR 0 8
63255: PUSH
63256: LD_VAR 0 9
63260: IN
63261: IFFALSE 63288
// begin result := [ i , weapon ] ;
63263: LD_ADDR_VAR 0 3
63267: PUSH
63268: LD_VAR 0 4
63272: PUSH
63273: LD_VAR 0 8
63277: PUSH
63278: EMPTY
63279: LIST
63280: LIST
63281: ST_TO_ADDR
// exit ;
63282: POP
63283: POP
63284: POP
63285: POP
63286: GO 63296
// end ; end ;
63288: GO 63224
63290: POP
63291: POP
// end ;
63292: GO 63110
63294: POP
63295: POP
// end ;
63296: LD_VAR 0 3
63300: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
63301: LD_INT 0
63303: PPUSH
// if not side or side > 8 then
63304: LD_VAR 0 3
63308: NOT
63309: PUSH
63310: LD_VAR 0 3
63314: PUSH
63315: LD_INT 8
63317: GREATER
63318: OR
63319: IFFALSE 63323
// exit ;
63321: GO 63382
// if not range then
63323: LD_VAR 0 4
63327: NOT
63328: IFFALSE 63339
// range := - 12 ;
63330: LD_ADDR_VAR 0 4
63334: PUSH
63335: LD_INT 12
63337: NEG
63338: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
63339: LD_VAR 0 1
63343: PPUSH
63344: LD_VAR 0 2
63348: PPUSH
63349: LD_VAR 0 3
63353: PPUSH
63354: LD_VAR 0 4
63358: PPUSH
63359: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
63363: LD_VAR 0 1
63367: PPUSH
63368: LD_VAR 0 2
63372: PPUSH
63373: LD_VAR 0 3
63377: PPUSH
63378: CALL_OW 331
// end ;
63382: LD_VAR 0 5
63386: RET
// export function Video ( mode ) ; begin
63387: LD_INT 0
63389: PPUSH
// ingame_video = mode ;
63390: LD_ADDR_OWVAR 52
63394: PUSH
63395: LD_VAR 0 1
63399: ST_TO_ADDR
// interface_hidden = mode ;
63400: LD_ADDR_OWVAR 54
63404: PUSH
63405: LD_VAR 0 1
63409: ST_TO_ADDR
// end ;
63410: LD_VAR 0 2
63414: RET
// export function Join ( array , element ) ; begin
63415: LD_INT 0
63417: PPUSH
// result := Replace ( array , array + 1 , element ) ;
63418: LD_ADDR_VAR 0 3
63422: PUSH
63423: LD_VAR 0 1
63427: PPUSH
63428: LD_VAR 0 1
63432: PUSH
63433: LD_INT 1
63435: PLUS
63436: PPUSH
63437: LD_VAR 0 2
63441: PPUSH
63442: CALL_OW 1
63446: ST_TO_ADDR
// end ;
63447: LD_VAR 0 3
63451: RET
// export function JoinUnion ( array , element ) ; begin
63452: LD_INT 0
63454: PPUSH
// result := array union element ;
63455: LD_ADDR_VAR 0 3
63459: PUSH
63460: LD_VAR 0 1
63464: PUSH
63465: LD_VAR 0 2
63469: UNION
63470: ST_TO_ADDR
// end ;
63471: LD_VAR 0 3
63475: RET
// export function GetBehemoths ( side ) ; begin
63476: LD_INT 0
63478: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
63479: LD_ADDR_VAR 0 2
63483: PUSH
63484: LD_INT 22
63486: PUSH
63487: LD_VAR 0 1
63491: PUSH
63492: EMPTY
63493: LIST
63494: LIST
63495: PUSH
63496: LD_INT 31
63498: PUSH
63499: LD_INT 25
63501: PUSH
63502: EMPTY
63503: LIST
63504: LIST
63505: PUSH
63506: EMPTY
63507: LIST
63508: LIST
63509: PPUSH
63510: CALL_OW 69
63514: ST_TO_ADDR
// end ;
63515: LD_VAR 0 2
63519: RET
// export function Shuffle ( array ) ; var i , index ; begin
63520: LD_INT 0
63522: PPUSH
63523: PPUSH
63524: PPUSH
// result := [ ] ;
63525: LD_ADDR_VAR 0 2
63529: PUSH
63530: EMPTY
63531: ST_TO_ADDR
// if not array then
63532: LD_VAR 0 1
63536: NOT
63537: IFFALSE 63541
// exit ;
63539: GO 63640
// Randomize ;
63541: CALL_OW 10
// for i = array downto 1 do
63545: LD_ADDR_VAR 0 3
63549: PUSH
63550: DOUBLE
63551: LD_VAR 0 1
63555: INC
63556: ST_TO_ADDR
63557: LD_INT 1
63559: PUSH
63560: FOR_DOWNTO
63561: IFFALSE 63638
// begin index := rand ( 1 , array ) ;
63563: LD_ADDR_VAR 0 4
63567: PUSH
63568: LD_INT 1
63570: PPUSH
63571: LD_VAR 0 1
63575: PPUSH
63576: CALL_OW 12
63580: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
63581: LD_ADDR_VAR 0 2
63585: PUSH
63586: LD_VAR 0 2
63590: PPUSH
63591: LD_VAR 0 2
63595: PUSH
63596: LD_INT 1
63598: PLUS
63599: PPUSH
63600: LD_VAR 0 1
63604: PUSH
63605: LD_VAR 0 4
63609: ARRAY
63610: PPUSH
63611: CALL_OW 2
63615: ST_TO_ADDR
// array := Delete ( array , index ) ;
63616: LD_ADDR_VAR 0 1
63620: PUSH
63621: LD_VAR 0 1
63625: PPUSH
63626: LD_VAR 0 4
63630: PPUSH
63631: CALL_OW 3
63635: ST_TO_ADDR
// end ;
63636: GO 63560
63638: POP
63639: POP
// end ;
63640: LD_VAR 0 2
63644: RET
// export function GetBaseMaterials ( base ) ; begin
63645: LD_INT 0
63647: PPUSH
// result := [ 0 , 0 , 0 ] ;
63648: LD_ADDR_VAR 0 2
63652: PUSH
63653: LD_INT 0
63655: PUSH
63656: LD_INT 0
63658: PUSH
63659: LD_INT 0
63661: PUSH
63662: EMPTY
63663: LIST
63664: LIST
63665: LIST
63666: ST_TO_ADDR
// if not base then
63667: LD_VAR 0 1
63671: NOT
63672: IFFALSE 63676
// exit ;
63674: GO 63725
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
63676: LD_ADDR_VAR 0 2
63680: PUSH
63681: LD_VAR 0 1
63685: PPUSH
63686: LD_INT 1
63688: PPUSH
63689: CALL_OW 275
63693: PUSH
63694: LD_VAR 0 1
63698: PPUSH
63699: LD_INT 2
63701: PPUSH
63702: CALL_OW 275
63706: PUSH
63707: LD_VAR 0 1
63711: PPUSH
63712: LD_INT 3
63714: PPUSH
63715: CALL_OW 275
63719: PUSH
63720: EMPTY
63721: LIST
63722: LIST
63723: LIST
63724: ST_TO_ADDR
// end ;
63725: LD_VAR 0 2
63729: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
63730: LD_INT 0
63732: PPUSH
63733: PPUSH
// result := array ;
63734: LD_ADDR_VAR 0 3
63738: PUSH
63739: LD_VAR 0 1
63743: ST_TO_ADDR
// if size >= result then
63744: LD_VAR 0 2
63748: PUSH
63749: LD_VAR 0 3
63753: GREATEREQUAL
63754: IFFALSE 63758
// exit ;
63756: GO 63808
// if size then
63758: LD_VAR 0 2
63762: IFFALSE 63808
// for i := array downto size do
63764: LD_ADDR_VAR 0 4
63768: PUSH
63769: DOUBLE
63770: LD_VAR 0 1
63774: INC
63775: ST_TO_ADDR
63776: LD_VAR 0 2
63780: PUSH
63781: FOR_DOWNTO
63782: IFFALSE 63806
// result := Delete ( result , result ) ;
63784: LD_ADDR_VAR 0 3
63788: PUSH
63789: LD_VAR 0 3
63793: PPUSH
63794: LD_VAR 0 3
63798: PPUSH
63799: CALL_OW 3
63803: ST_TO_ADDR
63804: GO 63781
63806: POP
63807: POP
// end ;
63808: LD_VAR 0 3
63812: RET
// export function ComExit ( unit ) ; var tmp ; begin
63813: LD_INT 0
63815: PPUSH
63816: PPUSH
// if not IsInUnit ( unit ) then
63817: LD_VAR 0 1
63821: PPUSH
63822: CALL_OW 310
63826: NOT
63827: IFFALSE 63831
// exit ;
63829: GO 63891
// tmp := IsInUnit ( unit ) ;
63831: LD_ADDR_VAR 0 3
63835: PUSH
63836: LD_VAR 0 1
63840: PPUSH
63841: CALL_OW 310
63845: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
63846: LD_VAR 0 3
63850: PPUSH
63851: CALL_OW 247
63855: PUSH
63856: LD_INT 2
63858: EQUAL
63859: IFFALSE 63872
// ComExitVehicle ( unit ) else
63861: LD_VAR 0 1
63865: PPUSH
63866: CALL_OW 121
63870: GO 63881
// ComExitBuilding ( unit ) ;
63872: LD_VAR 0 1
63876: PPUSH
63877: CALL_OW 122
// result := tmp ;
63881: LD_ADDR_VAR 0 2
63885: PUSH
63886: LD_VAR 0 3
63890: ST_TO_ADDR
// end ;
63891: LD_VAR 0 2
63895: RET
// export function ComExitAll ( units ) ; var i ; begin
63896: LD_INT 0
63898: PPUSH
63899: PPUSH
// if not units then
63900: LD_VAR 0 1
63904: NOT
63905: IFFALSE 63909
// exit ;
63907: GO 63935
// for i in units do
63909: LD_ADDR_VAR 0 3
63913: PUSH
63914: LD_VAR 0 1
63918: PUSH
63919: FOR_IN
63920: IFFALSE 63933
// ComExit ( i ) ;
63922: LD_VAR 0 3
63926: PPUSH
63927: CALL 63813 0 1
63931: GO 63919
63933: POP
63934: POP
// end ;
63935: LD_VAR 0 2
63939: RET
// export function ResetHc ; begin
63940: LD_INT 0
63942: PPUSH
// InitHc ;
63943: CALL_OW 19
// hc_importance := 0 ;
63947: LD_ADDR_OWVAR 32
63951: PUSH
63952: LD_INT 0
63954: ST_TO_ADDR
// end ;
63955: LD_VAR 0 1
63959: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
63960: LD_INT 0
63962: PPUSH
63963: PPUSH
63964: PPUSH
// _x := ( x1 + x2 ) div 2 ;
63965: LD_ADDR_VAR 0 6
63969: PUSH
63970: LD_VAR 0 1
63974: PUSH
63975: LD_VAR 0 3
63979: PLUS
63980: PUSH
63981: LD_INT 2
63983: DIV
63984: ST_TO_ADDR
// if _x < 0 then
63985: LD_VAR 0 6
63989: PUSH
63990: LD_INT 0
63992: LESS
63993: IFFALSE 64010
// _x := _x * - 1 ;
63995: LD_ADDR_VAR 0 6
63999: PUSH
64000: LD_VAR 0 6
64004: PUSH
64005: LD_INT 1
64007: NEG
64008: MUL
64009: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
64010: LD_ADDR_VAR 0 7
64014: PUSH
64015: LD_VAR 0 2
64019: PUSH
64020: LD_VAR 0 4
64024: PLUS
64025: PUSH
64026: LD_INT 2
64028: DIV
64029: ST_TO_ADDR
// if _y < 0 then
64030: LD_VAR 0 7
64034: PUSH
64035: LD_INT 0
64037: LESS
64038: IFFALSE 64055
// _y := _y * - 1 ;
64040: LD_ADDR_VAR 0 7
64044: PUSH
64045: LD_VAR 0 7
64049: PUSH
64050: LD_INT 1
64052: NEG
64053: MUL
64054: ST_TO_ADDR
// result := [ _x , _y ] ;
64055: LD_ADDR_VAR 0 5
64059: PUSH
64060: LD_VAR 0 6
64064: PUSH
64065: LD_VAR 0 7
64069: PUSH
64070: EMPTY
64071: LIST
64072: LIST
64073: ST_TO_ADDR
// end ;
64074: LD_VAR 0 5
64078: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
64079: LD_INT 0
64081: PPUSH
64082: PPUSH
64083: PPUSH
64084: PPUSH
// task := GetTaskList ( unit ) ;
64085: LD_ADDR_VAR 0 7
64089: PUSH
64090: LD_VAR 0 1
64094: PPUSH
64095: CALL_OW 437
64099: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
64100: LD_VAR 0 7
64104: NOT
64105: PUSH
64106: LD_VAR 0 1
64110: PPUSH
64111: LD_VAR 0 2
64115: PPUSH
64116: CALL_OW 308
64120: NOT
64121: AND
64122: IFFALSE 64126
// exit ;
64124: GO 64244
// if IsInArea ( unit , area ) then
64126: LD_VAR 0 1
64130: PPUSH
64131: LD_VAR 0 2
64135: PPUSH
64136: CALL_OW 308
64140: IFFALSE 64158
// begin ComMoveToArea ( unit , goAway ) ;
64142: LD_VAR 0 1
64146: PPUSH
64147: LD_VAR 0 3
64151: PPUSH
64152: CALL_OW 113
// exit ;
64156: GO 64244
// end ; if task [ 1 ] [ 1 ] <> M then
64158: LD_VAR 0 7
64162: PUSH
64163: LD_INT 1
64165: ARRAY
64166: PUSH
64167: LD_INT 1
64169: ARRAY
64170: PUSH
64171: LD_STRING M
64173: NONEQUAL
64174: IFFALSE 64178
// exit ;
64176: GO 64244
// x := task [ 1 ] [ 2 ] ;
64178: LD_ADDR_VAR 0 5
64182: PUSH
64183: LD_VAR 0 7
64187: PUSH
64188: LD_INT 1
64190: ARRAY
64191: PUSH
64192: LD_INT 2
64194: ARRAY
64195: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
64196: LD_ADDR_VAR 0 6
64200: PUSH
64201: LD_VAR 0 7
64205: PUSH
64206: LD_INT 1
64208: ARRAY
64209: PUSH
64210: LD_INT 3
64212: ARRAY
64213: ST_TO_ADDR
// if InArea ( x , y , area ) then
64214: LD_VAR 0 5
64218: PPUSH
64219: LD_VAR 0 6
64223: PPUSH
64224: LD_VAR 0 2
64228: PPUSH
64229: CALL_OW 309
64233: IFFALSE 64244
// ComStop ( unit ) ;
64235: LD_VAR 0 1
64239: PPUSH
64240: CALL_OW 141
// end ;
64244: LD_VAR 0 4
64248: RET
// export function Abs ( value ) ; begin
64249: LD_INT 0
64251: PPUSH
// result := value ;
64252: LD_ADDR_VAR 0 2
64256: PUSH
64257: LD_VAR 0 1
64261: ST_TO_ADDR
// if value < 0 then
64262: LD_VAR 0 1
64266: PUSH
64267: LD_INT 0
64269: LESS
64270: IFFALSE 64287
// result := value * - 1 ;
64272: LD_ADDR_VAR 0 2
64276: PUSH
64277: LD_VAR 0 1
64281: PUSH
64282: LD_INT 1
64284: NEG
64285: MUL
64286: ST_TO_ADDR
// end ;
64287: LD_VAR 0 2
64291: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
64292: LD_INT 0
64294: PPUSH
64295: PPUSH
64296: PPUSH
64297: PPUSH
64298: PPUSH
64299: PPUSH
64300: PPUSH
64301: PPUSH
// if not unit or not building then
64302: LD_VAR 0 1
64306: NOT
64307: PUSH
64308: LD_VAR 0 2
64312: NOT
64313: OR
64314: IFFALSE 64318
// exit ;
64316: GO 64544
// x := GetX ( building ) ;
64318: LD_ADDR_VAR 0 4
64322: PUSH
64323: LD_VAR 0 2
64327: PPUSH
64328: CALL_OW 250
64332: ST_TO_ADDR
// y := GetY ( building ) ;
64333: LD_ADDR_VAR 0 6
64337: PUSH
64338: LD_VAR 0 2
64342: PPUSH
64343: CALL_OW 251
64347: ST_TO_ADDR
// d := GetDir ( building ) ;
64348: LD_ADDR_VAR 0 8
64352: PUSH
64353: LD_VAR 0 2
64357: PPUSH
64358: CALL_OW 254
64362: ST_TO_ADDR
// r := 4 ;
64363: LD_ADDR_VAR 0 9
64367: PUSH
64368: LD_INT 4
64370: ST_TO_ADDR
// for i := 1 to 5 do
64371: LD_ADDR_VAR 0 10
64375: PUSH
64376: DOUBLE
64377: LD_INT 1
64379: DEC
64380: ST_TO_ADDR
64381: LD_INT 5
64383: PUSH
64384: FOR_TO
64385: IFFALSE 64542
// begin _x := ShiftX ( x , d , r + i ) ;
64387: LD_ADDR_VAR 0 5
64391: PUSH
64392: LD_VAR 0 4
64396: PPUSH
64397: LD_VAR 0 8
64401: PPUSH
64402: LD_VAR 0 9
64406: PUSH
64407: LD_VAR 0 10
64411: PLUS
64412: PPUSH
64413: CALL_OW 272
64417: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
64418: LD_ADDR_VAR 0 7
64422: PUSH
64423: LD_VAR 0 6
64427: PPUSH
64428: LD_VAR 0 8
64432: PPUSH
64433: LD_VAR 0 9
64437: PUSH
64438: LD_VAR 0 10
64442: PLUS
64443: PPUSH
64444: CALL_OW 273
64448: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
64449: LD_VAR 0 5
64453: PPUSH
64454: LD_VAR 0 7
64458: PPUSH
64459: CALL_OW 488
64463: PUSH
64464: LD_VAR 0 5
64468: PPUSH
64469: LD_VAR 0 7
64473: PPUSH
64474: CALL_OW 428
64478: PPUSH
64479: CALL_OW 247
64483: PUSH
64484: LD_INT 3
64486: PUSH
64487: LD_INT 2
64489: PUSH
64490: EMPTY
64491: LIST
64492: LIST
64493: IN
64494: NOT
64495: AND
64496: IFFALSE 64540
// begin ComMoveXY ( unit , _x , _y ) ;
64498: LD_VAR 0 1
64502: PPUSH
64503: LD_VAR 0 5
64507: PPUSH
64508: LD_VAR 0 7
64512: PPUSH
64513: CALL_OW 111
// result := [ _x , _y ] ;
64517: LD_ADDR_VAR 0 3
64521: PUSH
64522: LD_VAR 0 5
64526: PUSH
64527: LD_VAR 0 7
64531: PUSH
64532: EMPTY
64533: LIST
64534: LIST
64535: ST_TO_ADDR
// exit ;
64536: POP
64537: POP
64538: GO 64544
// end ; end ;
64540: GO 64384
64542: POP
64543: POP
// end ;
64544: LD_VAR 0 3
64548: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
64549: LD_INT 0
64551: PPUSH
64552: PPUSH
64553: PPUSH
// result := 0 ;
64554: LD_ADDR_VAR 0 3
64558: PUSH
64559: LD_INT 0
64561: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
64562: LD_VAR 0 1
64566: PUSH
64567: LD_INT 0
64569: LESS
64570: PUSH
64571: LD_VAR 0 1
64575: PUSH
64576: LD_INT 8
64578: GREATER
64579: OR
64580: PUSH
64581: LD_VAR 0 2
64585: PUSH
64586: LD_INT 0
64588: LESS
64589: OR
64590: PUSH
64591: LD_VAR 0 2
64595: PUSH
64596: LD_INT 8
64598: GREATER
64599: OR
64600: IFFALSE 64604
// exit ;
64602: GO 64679
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
64604: LD_ADDR_VAR 0 4
64608: PUSH
64609: LD_INT 22
64611: PUSH
64612: LD_VAR 0 2
64616: PUSH
64617: EMPTY
64618: LIST
64619: LIST
64620: PPUSH
64621: CALL_OW 69
64625: PUSH
64626: FOR_IN
64627: IFFALSE 64677
// begin un := UnitShoot ( i ) ;
64629: LD_ADDR_VAR 0 5
64633: PUSH
64634: LD_VAR 0 4
64638: PPUSH
64639: CALL_OW 504
64643: ST_TO_ADDR
// if GetSide ( un ) = side1 then
64644: LD_VAR 0 5
64648: PPUSH
64649: CALL_OW 255
64653: PUSH
64654: LD_VAR 0 1
64658: EQUAL
64659: IFFALSE 64675
// begin result := un ;
64661: LD_ADDR_VAR 0 3
64665: PUSH
64666: LD_VAR 0 5
64670: ST_TO_ADDR
// exit ;
64671: POP
64672: POP
64673: GO 64679
// end ; end ;
64675: GO 64626
64677: POP
64678: POP
// end ;
64679: LD_VAR 0 3
64683: RET
// export function GetCargoBay ( units ) ; begin
64684: LD_INT 0
64686: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
64687: LD_ADDR_VAR 0 2
64691: PUSH
64692: LD_VAR 0 1
64696: PPUSH
64697: LD_INT 2
64699: PUSH
64700: LD_INT 34
64702: PUSH
64703: LD_INT 12
64705: PUSH
64706: EMPTY
64707: LIST
64708: LIST
64709: PUSH
64710: LD_INT 34
64712: PUSH
64713: LD_INT 51
64715: PUSH
64716: EMPTY
64717: LIST
64718: LIST
64719: PUSH
64720: LD_INT 34
64722: PUSH
64723: LD_INT 32
64725: PUSH
64726: EMPTY
64727: LIST
64728: LIST
64729: PUSH
64730: LD_INT 34
64732: PUSH
64733: LD_INT 89
64735: PUSH
64736: EMPTY
64737: LIST
64738: LIST
64739: PUSH
64740: EMPTY
64741: LIST
64742: LIST
64743: LIST
64744: LIST
64745: LIST
64746: PPUSH
64747: CALL_OW 72
64751: ST_TO_ADDR
// end ;
64752: LD_VAR 0 2
64756: RET
// export function Negate ( value ) ; begin
64757: LD_INT 0
64759: PPUSH
// result := not value ;
64760: LD_ADDR_VAR 0 2
64764: PUSH
64765: LD_VAR 0 1
64769: NOT
64770: ST_TO_ADDR
// end ;
64771: LD_VAR 0 2
64775: RET
// export function Inc ( value ) ; begin
64776: LD_INT 0
64778: PPUSH
// result := value + 1 ;
64779: LD_ADDR_VAR 0 2
64783: PUSH
64784: LD_VAR 0 1
64788: PUSH
64789: LD_INT 1
64791: PLUS
64792: ST_TO_ADDR
// end ;
64793: LD_VAR 0 2
64797: RET
// export function Dec ( value ) ; begin
64798: LD_INT 0
64800: PPUSH
// result := value - 1 ;
64801: LD_ADDR_VAR 0 2
64805: PUSH
64806: LD_VAR 0 1
64810: PUSH
64811: LD_INT 1
64813: MINUS
64814: ST_TO_ADDR
// end ;
64815: LD_VAR 0 2
64819: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
64820: LD_INT 0
64822: PPUSH
64823: PPUSH
64824: PPUSH
64825: PPUSH
64826: PPUSH
64827: PPUSH
64828: PPUSH
64829: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
64830: LD_VAR 0 1
64834: PPUSH
64835: LD_VAR 0 2
64839: PPUSH
64840: CALL_OW 488
64844: NOT
64845: PUSH
64846: LD_VAR 0 3
64850: PPUSH
64851: LD_VAR 0 4
64855: PPUSH
64856: CALL_OW 488
64860: NOT
64861: OR
64862: IFFALSE 64875
// begin result := - 1 ;
64864: LD_ADDR_VAR 0 5
64868: PUSH
64869: LD_INT 1
64871: NEG
64872: ST_TO_ADDR
// exit ;
64873: GO 65110
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
64875: LD_ADDR_VAR 0 12
64879: PUSH
64880: LD_VAR 0 1
64884: PPUSH
64885: LD_VAR 0 2
64889: PPUSH
64890: LD_VAR 0 3
64894: PPUSH
64895: LD_VAR 0 4
64899: PPUSH
64900: CALL 63960 0 4
64904: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
64905: LD_ADDR_VAR 0 11
64909: PUSH
64910: LD_VAR 0 1
64914: PPUSH
64915: LD_VAR 0 2
64919: PPUSH
64920: LD_VAR 0 12
64924: PUSH
64925: LD_INT 1
64927: ARRAY
64928: PPUSH
64929: LD_VAR 0 12
64933: PUSH
64934: LD_INT 2
64936: ARRAY
64937: PPUSH
64938: CALL_OW 298
64942: ST_TO_ADDR
// distance := 9999 ;
64943: LD_ADDR_VAR 0 10
64947: PUSH
64948: LD_INT 9999
64950: ST_TO_ADDR
// for i := 0 to 5 do
64951: LD_ADDR_VAR 0 6
64955: PUSH
64956: DOUBLE
64957: LD_INT 0
64959: DEC
64960: ST_TO_ADDR
64961: LD_INT 5
64963: PUSH
64964: FOR_TO
64965: IFFALSE 65108
// begin _x := ShiftX ( x1 , i , centerDist ) ;
64967: LD_ADDR_VAR 0 7
64971: PUSH
64972: LD_VAR 0 1
64976: PPUSH
64977: LD_VAR 0 6
64981: PPUSH
64982: LD_VAR 0 11
64986: PPUSH
64987: CALL_OW 272
64991: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
64992: LD_ADDR_VAR 0 8
64996: PUSH
64997: LD_VAR 0 2
65001: PPUSH
65002: LD_VAR 0 6
65006: PPUSH
65007: LD_VAR 0 11
65011: PPUSH
65012: CALL_OW 273
65016: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
65017: LD_VAR 0 7
65021: PPUSH
65022: LD_VAR 0 8
65026: PPUSH
65027: CALL_OW 488
65031: NOT
65032: IFFALSE 65036
// continue ;
65034: GO 64964
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
65036: LD_ADDR_VAR 0 9
65040: PUSH
65041: LD_VAR 0 12
65045: PUSH
65046: LD_INT 1
65048: ARRAY
65049: PPUSH
65050: LD_VAR 0 12
65054: PUSH
65055: LD_INT 2
65057: ARRAY
65058: PPUSH
65059: LD_VAR 0 7
65063: PPUSH
65064: LD_VAR 0 8
65068: PPUSH
65069: CALL_OW 298
65073: ST_TO_ADDR
// if tmp < distance then
65074: LD_VAR 0 9
65078: PUSH
65079: LD_VAR 0 10
65083: LESS
65084: IFFALSE 65106
// begin result := i ;
65086: LD_ADDR_VAR 0 5
65090: PUSH
65091: LD_VAR 0 6
65095: ST_TO_ADDR
// distance := tmp ;
65096: LD_ADDR_VAR 0 10
65100: PUSH
65101: LD_VAR 0 9
65105: ST_TO_ADDR
// end ; end ;
65106: GO 64964
65108: POP
65109: POP
// end ;
65110: LD_VAR 0 5
65114: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65115: LD_INT 0
65117: PPUSH
65118: PPUSH
// if not driver or not IsInUnit ( driver ) then
65119: LD_VAR 0 1
65123: NOT
65124: PUSH
65125: LD_VAR 0 1
65129: PPUSH
65130: CALL_OW 310
65134: NOT
65135: OR
65136: IFFALSE 65140
// exit ;
65138: GO 65230
// vehicle := IsInUnit ( driver ) ;
65140: LD_ADDR_VAR 0 3
65144: PUSH
65145: LD_VAR 0 1
65149: PPUSH
65150: CALL_OW 310
65154: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65155: LD_VAR 0 1
65159: PPUSH
65160: LD_STRING \
65162: PUSH
65163: LD_INT 0
65165: PUSH
65166: LD_INT 0
65168: PUSH
65169: LD_INT 0
65171: PUSH
65172: LD_INT 0
65174: PUSH
65175: LD_INT 0
65177: PUSH
65178: LD_INT 0
65180: PUSH
65181: EMPTY
65182: LIST
65183: LIST
65184: LIST
65185: LIST
65186: LIST
65187: LIST
65188: LIST
65189: PUSH
65190: LD_STRING E
65192: PUSH
65193: LD_INT 0
65195: PUSH
65196: LD_INT 0
65198: PUSH
65199: LD_VAR 0 3
65203: PUSH
65204: LD_INT 0
65206: PUSH
65207: LD_INT 0
65209: PUSH
65210: LD_INT 0
65212: PUSH
65213: EMPTY
65214: LIST
65215: LIST
65216: LIST
65217: LIST
65218: LIST
65219: LIST
65220: LIST
65221: PUSH
65222: EMPTY
65223: LIST
65224: LIST
65225: PPUSH
65226: CALL_OW 446
// end ;
65230: LD_VAR 0 2
65234: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65235: LD_INT 0
65237: PPUSH
65238: PPUSH
// if not driver or not IsInUnit ( driver ) then
65239: LD_VAR 0 1
65243: NOT
65244: PUSH
65245: LD_VAR 0 1
65249: PPUSH
65250: CALL_OW 310
65254: NOT
65255: OR
65256: IFFALSE 65260
// exit ;
65258: GO 65350
// vehicle := IsInUnit ( driver ) ;
65260: LD_ADDR_VAR 0 3
65264: PUSH
65265: LD_VAR 0 1
65269: PPUSH
65270: CALL_OW 310
65274: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65275: LD_VAR 0 1
65279: PPUSH
65280: LD_STRING \
65282: PUSH
65283: LD_INT 0
65285: PUSH
65286: LD_INT 0
65288: PUSH
65289: LD_INT 0
65291: PUSH
65292: LD_INT 0
65294: PUSH
65295: LD_INT 0
65297: PUSH
65298: LD_INT 0
65300: PUSH
65301: EMPTY
65302: LIST
65303: LIST
65304: LIST
65305: LIST
65306: LIST
65307: LIST
65308: LIST
65309: PUSH
65310: LD_STRING E
65312: PUSH
65313: LD_INT 0
65315: PUSH
65316: LD_INT 0
65318: PUSH
65319: LD_VAR 0 3
65323: PUSH
65324: LD_INT 0
65326: PUSH
65327: LD_INT 0
65329: PUSH
65330: LD_INT 0
65332: PUSH
65333: EMPTY
65334: LIST
65335: LIST
65336: LIST
65337: LIST
65338: LIST
65339: LIST
65340: LIST
65341: PUSH
65342: EMPTY
65343: LIST
65344: LIST
65345: PPUSH
65346: CALL_OW 447
// end ;
65350: LD_VAR 0 2
65354: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
65355: LD_INT 0
65357: PPUSH
65358: PPUSH
65359: PPUSH
// tmp := [ ] ;
65360: LD_ADDR_VAR 0 5
65364: PUSH
65365: EMPTY
65366: ST_TO_ADDR
// for i in units do
65367: LD_ADDR_VAR 0 4
65371: PUSH
65372: LD_VAR 0 1
65376: PUSH
65377: FOR_IN
65378: IFFALSE 65416
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
65380: LD_ADDR_VAR 0 5
65384: PUSH
65385: LD_VAR 0 5
65389: PPUSH
65390: LD_VAR 0 5
65394: PUSH
65395: LD_INT 1
65397: PLUS
65398: PPUSH
65399: LD_VAR 0 4
65403: PPUSH
65404: CALL_OW 256
65408: PPUSH
65409: CALL_OW 2
65413: ST_TO_ADDR
65414: GO 65377
65416: POP
65417: POP
// if not tmp then
65418: LD_VAR 0 5
65422: NOT
65423: IFFALSE 65427
// exit ;
65425: GO 65475
// if asc then
65427: LD_VAR 0 2
65431: IFFALSE 65455
// result := SortListByListAsc ( units , tmp ) else
65433: LD_ADDR_VAR 0 3
65437: PUSH
65438: LD_VAR 0 1
65442: PPUSH
65443: LD_VAR 0 5
65447: PPUSH
65448: CALL_OW 76
65452: ST_TO_ADDR
65453: GO 65475
// result := SortListByListDesc ( units , tmp ) ;
65455: LD_ADDR_VAR 0 3
65459: PUSH
65460: LD_VAR 0 1
65464: PPUSH
65465: LD_VAR 0 5
65469: PPUSH
65470: CALL_OW 77
65474: ST_TO_ADDR
// end ;
65475: LD_VAR 0 3
65479: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
65480: LD_INT 0
65482: PPUSH
65483: PPUSH
// task := GetTaskList ( mech ) ;
65484: LD_ADDR_VAR 0 4
65488: PUSH
65489: LD_VAR 0 1
65493: PPUSH
65494: CALL_OW 437
65498: ST_TO_ADDR
// if not task then
65499: LD_VAR 0 4
65503: NOT
65504: IFFALSE 65508
// exit ;
65506: GO 65550
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
65508: LD_ADDR_VAR 0 3
65512: PUSH
65513: LD_VAR 0 4
65517: PUSH
65518: LD_INT 1
65520: ARRAY
65521: PUSH
65522: LD_INT 1
65524: ARRAY
65525: PUSH
65526: LD_STRING r
65528: EQUAL
65529: PUSH
65530: LD_VAR 0 4
65534: PUSH
65535: LD_INT 1
65537: ARRAY
65538: PUSH
65539: LD_INT 4
65541: ARRAY
65542: PUSH
65543: LD_VAR 0 2
65547: EQUAL
65548: AND
65549: ST_TO_ADDR
// end ;
65550: LD_VAR 0 3
65554: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
65555: LD_INT 0
65557: PPUSH
// SetDir ( unit , d ) ;
65558: LD_VAR 0 1
65562: PPUSH
65563: LD_VAR 0 4
65567: PPUSH
65568: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
65572: LD_VAR 0 1
65576: PPUSH
65577: LD_VAR 0 2
65581: PPUSH
65582: LD_VAR 0 3
65586: PPUSH
65587: LD_VAR 0 5
65591: PPUSH
65592: CALL_OW 48
// end ;
65596: LD_VAR 0 6
65600: RET
// export function ToNaturalNumber ( number ) ; begin
65601: LD_INT 0
65603: PPUSH
// result := number div 1 ;
65604: LD_ADDR_VAR 0 2
65608: PUSH
65609: LD_VAR 0 1
65613: PUSH
65614: LD_INT 1
65616: DIV
65617: ST_TO_ADDR
// if number < 0 then
65618: LD_VAR 0 1
65622: PUSH
65623: LD_INT 0
65625: LESS
65626: IFFALSE 65636
// result := 0 ;
65628: LD_ADDR_VAR 0 2
65632: PUSH
65633: LD_INT 0
65635: ST_TO_ADDR
// end ;
65636: LD_VAR 0 2
65640: RET
// export function SortByClass ( units , class ) ; var un ; begin
65641: LD_INT 0
65643: PPUSH
65644: PPUSH
// if not units or not class then
65645: LD_VAR 0 1
65649: NOT
65650: PUSH
65651: LD_VAR 0 2
65655: NOT
65656: OR
65657: IFFALSE 65661
// exit ;
65659: GO 65756
// result := [ ] ;
65661: LD_ADDR_VAR 0 3
65665: PUSH
65666: EMPTY
65667: ST_TO_ADDR
// for un in units do
65668: LD_ADDR_VAR 0 4
65672: PUSH
65673: LD_VAR 0 1
65677: PUSH
65678: FOR_IN
65679: IFFALSE 65754
// if GetClass ( un ) = class then
65681: LD_VAR 0 4
65685: PPUSH
65686: CALL_OW 257
65690: PUSH
65691: LD_VAR 0 2
65695: EQUAL
65696: IFFALSE 65723
// result := Insert ( result , 1 , un ) else
65698: LD_ADDR_VAR 0 3
65702: PUSH
65703: LD_VAR 0 3
65707: PPUSH
65708: LD_INT 1
65710: PPUSH
65711: LD_VAR 0 4
65715: PPUSH
65716: CALL_OW 2
65720: ST_TO_ADDR
65721: GO 65752
// result := Replace ( result , result + 1 , un ) ;
65723: LD_ADDR_VAR 0 3
65727: PUSH
65728: LD_VAR 0 3
65732: PPUSH
65733: LD_VAR 0 3
65737: PUSH
65738: LD_INT 1
65740: PLUS
65741: PPUSH
65742: LD_VAR 0 4
65746: PPUSH
65747: CALL_OW 1
65751: ST_TO_ADDR
65752: GO 65678
65754: POP
65755: POP
// end ;
65756: LD_VAR 0 3
65760: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
65761: LD_INT 0
65763: PPUSH
65764: PPUSH
65765: PPUSH
65766: PPUSH
65767: PPUSH
65768: PPUSH
65769: PPUSH
// result := [ ] ;
65770: LD_ADDR_VAR 0 4
65774: PUSH
65775: EMPTY
65776: ST_TO_ADDR
// if x - r < 0 then
65777: LD_VAR 0 1
65781: PUSH
65782: LD_VAR 0 3
65786: MINUS
65787: PUSH
65788: LD_INT 0
65790: LESS
65791: IFFALSE 65803
// min_x := 0 else
65793: LD_ADDR_VAR 0 8
65797: PUSH
65798: LD_INT 0
65800: ST_TO_ADDR
65801: GO 65819
// min_x := x - r ;
65803: LD_ADDR_VAR 0 8
65807: PUSH
65808: LD_VAR 0 1
65812: PUSH
65813: LD_VAR 0 3
65817: MINUS
65818: ST_TO_ADDR
// if y - r < 0 then
65819: LD_VAR 0 2
65823: PUSH
65824: LD_VAR 0 3
65828: MINUS
65829: PUSH
65830: LD_INT 0
65832: LESS
65833: IFFALSE 65845
// min_y := 0 else
65835: LD_ADDR_VAR 0 7
65839: PUSH
65840: LD_INT 0
65842: ST_TO_ADDR
65843: GO 65861
// min_y := y - r ;
65845: LD_ADDR_VAR 0 7
65849: PUSH
65850: LD_VAR 0 2
65854: PUSH
65855: LD_VAR 0 3
65859: MINUS
65860: ST_TO_ADDR
// max_x := x + r ;
65861: LD_ADDR_VAR 0 9
65865: PUSH
65866: LD_VAR 0 1
65870: PUSH
65871: LD_VAR 0 3
65875: PLUS
65876: ST_TO_ADDR
// max_y := y + r ;
65877: LD_ADDR_VAR 0 10
65881: PUSH
65882: LD_VAR 0 2
65886: PUSH
65887: LD_VAR 0 3
65891: PLUS
65892: ST_TO_ADDR
// for _x = min_x to max_x do
65893: LD_ADDR_VAR 0 5
65897: PUSH
65898: DOUBLE
65899: LD_VAR 0 8
65903: DEC
65904: ST_TO_ADDR
65905: LD_VAR 0 9
65909: PUSH
65910: FOR_TO
65911: IFFALSE 66012
// for _y = min_y to max_y do
65913: LD_ADDR_VAR 0 6
65917: PUSH
65918: DOUBLE
65919: LD_VAR 0 7
65923: DEC
65924: ST_TO_ADDR
65925: LD_VAR 0 10
65929: PUSH
65930: FOR_TO
65931: IFFALSE 66008
// begin if not ValidHex ( _x , _y ) then
65933: LD_VAR 0 5
65937: PPUSH
65938: LD_VAR 0 6
65942: PPUSH
65943: CALL_OW 488
65947: NOT
65948: IFFALSE 65952
// continue ;
65950: GO 65930
// if GetResourceTypeXY ( _x , _y ) then
65952: LD_VAR 0 5
65956: PPUSH
65957: LD_VAR 0 6
65961: PPUSH
65962: CALL_OW 283
65966: IFFALSE 66006
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
65968: LD_ADDR_VAR 0 4
65972: PUSH
65973: LD_VAR 0 4
65977: PPUSH
65978: LD_VAR 0 4
65982: PUSH
65983: LD_INT 1
65985: PLUS
65986: PPUSH
65987: LD_VAR 0 5
65991: PUSH
65992: LD_VAR 0 6
65996: PUSH
65997: EMPTY
65998: LIST
65999: LIST
66000: PPUSH
66001: CALL_OW 1
66005: ST_TO_ADDR
// end ;
66006: GO 65930
66008: POP
66009: POP
66010: GO 65910
66012: POP
66013: POP
// end ;
66014: LD_VAR 0 4
66018: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
66019: LD_INT 0
66021: PPUSH
66022: PPUSH
66023: PPUSH
66024: PPUSH
66025: PPUSH
66026: PPUSH
66027: PPUSH
66028: PPUSH
// if not units then
66029: LD_VAR 0 1
66033: NOT
66034: IFFALSE 66038
// exit ;
66036: GO 66562
// result := UnitFilter ( units , [ f_ok ] ) ;
66038: LD_ADDR_VAR 0 3
66042: PUSH
66043: LD_VAR 0 1
66047: PPUSH
66048: LD_INT 50
66050: PUSH
66051: EMPTY
66052: LIST
66053: PPUSH
66054: CALL_OW 72
66058: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
66059: LD_ADDR_VAR 0 8
66063: PUSH
66064: LD_VAR 0 1
66068: PUSH
66069: LD_INT 1
66071: ARRAY
66072: PPUSH
66073: CALL_OW 255
66077: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
66078: LD_ADDR_VAR 0 10
66082: PUSH
66083: LD_INT 29
66085: PUSH
66086: LD_INT 91
66088: PUSH
66089: LD_INT 49
66091: PUSH
66092: EMPTY
66093: LIST
66094: LIST
66095: LIST
66096: ST_TO_ADDR
// if not result then
66097: LD_VAR 0 3
66101: NOT
66102: IFFALSE 66106
// exit ;
66104: GO 66562
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
66106: LD_ADDR_VAR 0 5
66110: PUSH
66111: LD_INT 81
66113: PUSH
66114: LD_VAR 0 8
66118: PUSH
66119: EMPTY
66120: LIST
66121: LIST
66122: PPUSH
66123: CALL_OW 69
66127: ST_TO_ADDR
// for i in result do
66128: LD_ADDR_VAR 0 4
66132: PUSH
66133: LD_VAR 0 3
66137: PUSH
66138: FOR_IN
66139: IFFALSE 66560
// begin tag := GetTag ( i ) + 1 ;
66141: LD_ADDR_VAR 0 9
66145: PUSH
66146: LD_VAR 0 4
66150: PPUSH
66151: CALL_OW 110
66155: PUSH
66156: LD_INT 1
66158: PLUS
66159: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
66160: LD_ADDR_VAR 0 7
66164: PUSH
66165: LD_VAR 0 4
66169: PPUSH
66170: CALL_OW 250
66174: PPUSH
66175: LD_VAR 0 4
66179: PPUSH
66180: CALL_OW 251
66184: PPUSH
66185: LD_INT 6
66187: PPUSH
66188: CALL 65761 0 3
66192: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
66193: LD_VAR 0 4
66197: PPUSH
66198: CALL_OW 247
66202: PUSH
66203: LD_INT 2
66205: EQUAL
66206: PUSH
66207: LD_VAR 0 7
66211: AND
66212: PUSH
66213: LD_VAR 0 4
66217: PPUSH
66218: CALL_OW 264
66222: PUSH
66223: LD_VAR 0 10
66227: IN
66228: NOT
66229: AND
66230: IFFALSE 66269
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
66232: LD_VAR 0 4
66236: PPUSH
66237: LD_VAR 0 7
66241: PUSH
66242: LD_INT 1
66244: ARRAY
66245: PUSH
66246: LD_INT 1
66248: ARRAY
66249: PPUSH
66250: LD_VAR 0 7
66254: PUSH
66255: LD_INT 1
66257: ARRAY
66258: PUSH
66259: LD_INT 2
66261: ARRAY
66262: PPUSH
66263: CALL_OW 116
66267: GO 66558
// if path > tag then
66269: LD_VAR 0 2
66273: PUSH
66274: LD_VAR 0 9
66278: GREATER
66279: IFFALSE 66487
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
66281: LD_ADDR_VAR 0 6
66285: PUSH
66286: LD_VAR 0 5
66290: PPUSH
66291: LD_INT 91
66293: PUSH
66294: LD_VAR 0 4
66298: PUSH
66299: LD_INT 8
66301: PUSH
66302: EMPTY
66303: LIST
66304: LIST
66305: LIST
66306: PPUSH
66307: CALL_OW 72
66311: ST_TO_ADDR
// if nearEnemy then
66312: LD_VAR 0 6
66316: IFFALSE 66385
// begin if GetWeapon ( i ) = ru_time_lapser then
66318: LD_VAR 0 4
66322: PPUSH
66323: CALL_OW 264
66327: PUSH
66328: LD_INT 49
66330: EQUAL
66331: IFFALSE 66359
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
66333: LD_VAR 0 4
66337: PPUSH
66338: LD_VAR 0 6
66342: PPUSH
66343: LD_VAR 0 4
66347: PPUSH
66348: CALL_OW 74
66352: PPUSH
66353: CALL_OW 112
66357: GO 66383
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
66359: LD_VAR 0 4
66363: PPUSH
66364: LD_VAR 0 6
66368: PPUSH
66369: LD_VAR 0 4
66373: PPUSH
66374: CALL_OW 74
66378: PPUSH
66379: CALL_OW 115
// end else
66383: GO 66485
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
66385: LD_VAR 0 4
66389: PPUSH
66390: LD_VAR 0 2
66394: PUSH
66395: LD_VAR 0 9
66399: ARRAY
66400: PUSH
66401: LD_INT 1
66403: ARRAY
66404: PPUSH
66405: LD_VAR 0 2
66409: PUSH
66410: LD_VAR 0 9
66414: ARRAY
66415: PUSH
66416: LD_INT 2
66418: ARRAY
66419: PPUSH
66420: CALL_OW 297
66424: PUSH
66425: LD_INT 6
66427: GREATER
66428: IFFALSE 66471
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
66430: LD_VAR 0 4
66434: PPUSH
66435: LD_VAR 0 2
66439: PUSH
66440: LD_VAR 0 9
66444: ARRAY
66445: PUSH
66446: LD_INT 1
66448: ARRAY
66449: PPUSH
66450: LD_VAR 0 2
66454: PUSH
66455: LD_VAR 0 9
66459: ARRAY
66460: PUSH
66461: LD_INT 2
66463: ARRAY
66464: PPUSH
66465: CALL_OW 114
66469: GO 66485
// SetTag ( i , tag ) ;
66471: LD_VAR 0 4
66475: PPUSH
66476: LD_VAR 0 9
66480: PPUSH
66481: CALL_OW 109
// end else
66485: GO 66558
// if enemy then
66487: LD_VAR 0 5
66491: IFFALSE 66558
// begin if GetWeapon ( i ) = ru_time_lapser then
66493: LD_VAR 0 4
66497: PPUSH
66498: CALL_OW 264
66502: PUSH
66503: LD_INT 49
66505: EQUAL
66506: IFFALSE 66534
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
66508: LD_VAR 0 4
66512: PPUSH
66513: LD_VAR 0 5
66517: PPUSH
66518: LD_VAR 0 4
66522: PPUSH
66523: CALL_OW 74
66527: PPUSH
66528: CALL_OW 112
66532: GO 66558
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
66534: LD_VAR 0 4
66538: PPUSH
66539: LD_VAR 0 5
66543: PPUSH
66544: LD_VAR 0 4
66548: PPUSH
66549: CALL_OW 74
66553: PPUSH
66554: CALL_OW 115
// end ; end ;
66558: GO 66138
66560: POP
66561: POP
// end ;
66562: LD_VAR 0 3
66566: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
66567: LD_INT 0
66569: PPUSH
66570: PPUSH
66571: PPUSH
// if not unit or IsInUnit ( unit ) then
66572: LD_VAR 0 1
66576: NOT
66577: PUSH
66578: LD_VAR 0 1
66582: PPUSH
66583: CALL_OW 310
66587: OR
66588: IFFALSE 66592
// exit ;
66590: GO 66683
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
66592: LD_ADDR_VAR 0 4
66596: PUSH
66597: LD_VAR 0 1
66601: PPUSH
66602: CALL_OW 250
66606: PPUSH
66607: LD_VAR 0 2
66611: PPUSH
66612: LD_INT 1
66614: PPUSH
66615: CALL_OW 272
66619: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
66620: LD_ADDR_VAR 0 5
66624: PUSH
66625: LD_VAR 0 1
66629: PPUSH
66630: CALL_OW 251
66634: PPUSH
66635: LD_VAR 0 2
66639: PPUSH
66640: LD_INT 1
66642: PPUSH
66643: CALL_OW 273
66647: ST_TO_ADDR
// if ValidHex ( x , y ) then
66648: LD_VAR 0 4
66652: PPUSH
66653: LD_VAR 0 5
66657: PPUSH
66658: CALL_OW 488
66662: IFFALSE 66683
// ComTurnXY ( unit , x , y ) ;
66664: LD_VAR 0 1
66668: PPUSH
66669: LD_VAR 0 4
66673: PPUSH
66674: LD_VAR 0 5
66678: PPUSH
66679: CALL_OW 118
// end ;
66683: LD_VAR 0 3
66687: RET
// export function SeeUnits ( side , units ) ; var i ; begin
66688: LD_INT 0
66690: PPUSH
66691: PPUSH
// result := false ;
66692: LD_ADDR_VAR 0 3
66696: PUSH
66697: LD_INT 0
66699: ST_TO_ADDR
// if not units then
66700: LD_VAR 0 2
66704: NOT
66705: IFFALSE 66709
// exit ;
66707: GO 66754
// for i in units do
66709: LD_ADDR_VAR 0 4
66713: PUSH
66714: LD_VAR 0 2
66718: PUSH
66719: FOR_IN
66720: IFFALSE 66752
// if See ( side , i ) then
66722: LD_VAR 0 1
66726: PPUSH
66727: LD_VAR 0 4
66731: PPUSH
66732: CALL_OW 292
66736: IFFALSE 66750
// begin result := true ;
66738: LD_ADDR_VAR 0 3
66742: PUSH
66743: LD_INT 1
66745: ST_TO_ADDR
// exit ;
66746: POP
66747: POP
66748: GO 66754
// end ;
66750: GO 66719
66752: POP
66753: POP
// end ;
66754: LD_VAR 0 3
66758: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
66759: LD_INT 0
66761: PPUSH
66762: PPUSH
66763: PPUSH
66764: PPUSH
// if not unit or not points then
66765: LD_VAR 0 1
66769: NOT
66770: PUSH
66771: LD_VAR 0 2
66775: NOT
66776: OR
66777: IFFALSE 66781
// exit ;
66779: GO 66871
// dist := 99999 ;
66781: LD_ADDR_VAR 0 5
66785: PUSH
66786: LD_INT 99999
66788: ST_TO_ADDR
// for i in points do
66789: LD_ADDR_VAR 0 4
66793: PUSH
66794: LD_VAR 0 2
66798: PUSH
66799: FOR_IN
66800: IFFALSE 66869
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
66802: LD_ADDR_VAR 0 6
66806: PUSH
66807: LD_VAR 0 1
66811: PPUSH
66812: LD_VAR 0 4
66816: PUSH
66817: LD_INT 1
66819: ARRAY
66820: PPUSH
66821: LD_VAR 0 4
66825: PUSH
66826: LD_INT 2
66828: ARRAY
66829: PPUSH
66830: CALL_OW 297
66834: ST_TO_ADDR
// if tmpDist < dist then
66835: LD_VAR 0 6
66839: PUSH
66840: LD_VAR 0 5
66844: LESS
66845: IFFALSE 66867
// begin result := i ;
66847: LD_ADDR_VAR 0 3
66851: PUSH
66852: LD_VAR 0 4
66856: ST_TO_ADDR
// dist := tmpDist ;
66857: LD_ADDR_VAR 0 5
66861: PUSH
66862: LD_VAR 0 6
66866: ST_TO_ADDR
// end ; end ;
66867: GO 66799
66869: POP
66870: POP
// end ;
66871: LD_VAR 0 3
66875: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
66876: LD_INT 0
66878: PPUSH
// uc_side := side ;
66879: LD_ADDR_OWVAR 20
66883: PUSH
66884: LD_VAR 0 1
66888: ST_TO_ADDR
// uc_nation := 3 ;
66889: LD_ADDR_OWVAR 21
66893: PUSH
66894: LD_INT 3
66896: ST_TO_ADDR
// vc_chassis := 25 ;
66897: LD_ADDR_OWVAR 37
66901: PUSH
66902: LD_INT 25
66904: ST_TO_ADDR
// vc_engine := engine_siberite ;
66905: LD_ADDR_OWVAR 39
66909: PUSH
66910: LD_INT 3
66912: ST_TO_ADDR
// vc_control := control_computer ;
66913: LD_ADDR_OWVAR 38
66917: PUSH
66918: LD_INT 3
66920: ST_TO_ADDR
// vc_weapon := 59 ;
66921: LD_ADDR_OWVAR 40
66925: PUSH
66926: LD_INT 59
66928: ST_TO_ADDR
// result := CreateVehicle ;
66929: LD_ADDR_VAR 0 5
66933: PUSH
66934: CALL_OW 45
66938: ST_TO_ADDR
// SetDir ( result , d ) ;
66939: LD_VAR 0 5
66943: PPUSH
66944: LD_VAR 0 4
66948: PPUSH
66949: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
66953: LD_VAR 0 5
66957: PPUSH
66958: LD_VAR 0 2
66962: PPUSH
66963: LD_VAR 0 3
66967: PPUSH
66968: LD_INT 0
66970: PPUSH
66971: CALL_OW 48
// end ;
66975: LD_VAR 0 5
66979: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
66980: LD_INT 0
66982: PPUSH
66983: PPUSH
66984: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
66985: LD_ADDR_VAR 0 2
66989: PUSH
66990: LD_INT 0
66992: PUSH
66993: LD_INT 0
66995: PUSH
66996: LD_INT 0
66998: PUSH
66999: LD_INT 0
67001: PUSH
67002: EMPTY
67003: LIST
67004: LIST
67005: LIST
67006: LIST
67007: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
67008: LD_VAR 0 1
67012: NOT
67013: PUSH
67014: LD_VAR 0 1
67018: PPUSH
67019: CALL_OW 264
67023: PUSH
67024: LD_INT 12
67026: PUSH
67027: LD_INT 51
67029: PUSH
67030: LD_INT 32
67032: PUSH
67033: LD_INT 89
67035: PUSH
67036: EMPTY
67037: LIST
67038: LIST
67039: LIST
67040: LIST
67041: IN
67042: NOT
67043: OR
67044: IFFALSE 67048
// exit ;
67046: GO 67146
// for i := 1 to 3 do
67048: LD_ADDR_VAR 0 3
67052: PUSH
67053: DOUBLE
67054: LD_INT 1
67056: DEC
67057: ST_TO_ADDR
67058: LD_INT 3
67060: PUSH
67061: FOR_TO
67062: IFFALSE 67144
// begin tmp := GetCargo ( cargo , i ) ;
67064: LD_ADDR_VAR 0 4
67068: PUSH
67069: LD_VAR 0 1
67073: PPUSH
67074: LD_VAR 0 3
67078: PPUSH
67079: CALL_OW 289
67083: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
67084: LD_ADDR_VAR 0 2
67088: PUSH
67089: LD_VAR 0 2
67093: PPUSH
67094: LD_VAR 0 3
67098: PPUSH
67099: LD_VAR 0 4
67103: PPUSH
67104: CALL_OW 1
67108: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
67109: LD_ADDR_VAR 0 2
67113: PUSH
67114: LD_VAR 0 2
67118: PPUSH
67119: LD_INT 4
67121: PPUSH
67122: LD_VAR 0 2
67126: PUSH
67127: LD_INT 4
67129: ARRAY
67130: PUSH
67131: LD_VAR 0 4
67135: PLUS
67136: PPUSH
67137: CALL_OW 1
67141: ST_TO_ADDR
// end ;
67142: GO 67061
67144: POP
67145: POP
// end ;
67146: LD_VAR 0 2
67150: RET
// export function Length ( array ) ; begin
67151: LD_INT 0
67153: PPUSH
// result := array + 0 ;
67154: LD_ADDR_VAR 0 2
67158: PUSH
67159: LD_VAR 0 1
67163: PUSH
67164: LD_INT 0
67166: PLUS
67167: ST_TO_ADDR
// end ;
67168: LD_VAR 0 2
67172: RET
// export function PrepareArray ( array ) ; begin
67173: LD_INT 0
67175: PPUSH
// result := array diff 0 ;
67176: LD_ADDR_VAR 0 2
67180: PUSH
67181: LD_VAR 0 1
67185: PUSH
67186: LD_INT 0
67188: DIFF
67189: ST_TO_ADDR
// if not result [ 1 ] then
67190: LD_VAR 0 2
67194: PUSH
67195: LD_INT 1
67197: ARRAY
67198: NOT
67199: IFFALSE 67219
// result := Delete ( result , 1 ) ;
67201: LD_ADDR_VAR 0 2
67205: PUSH
67206: LD_VAR 0 2
67210: PPUSH
67211: LD_INT 1
67213: PPUSH
67214: CALL_OW 3
67218: ST_TO_ADDR
// end ;
67219: LD_VAR 0 2
67223: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
67224: LD_INT 0
67226: PPUSH
67227: PPUSH
67228: PPUSH
67229: PPUSH
// sibRocketRange := 25 ;
67230: LD_ADDR_VAR 0 6
67234: PUSH
67235: LD_INT 25
67237: ST_TO_ADDR
// result := false ;
67238: LD_ADDR_VAR 0 4
67242: PUSH
67243: LD_INT 0
67245: ST_TO_ADDR
// for i := 0 to 5 do
67246: LD_ADDR_VAR 0 5
67250: PUSH
67251: DOUBLE
67252: LD_INT 0
67254: DEC
67255: ST_TO_ADDR
67256: LD_INT 5
67258: PUSH
67259: FOR_TO
67260: IFFALSE 67327
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
67262: LD_VAR 0 1
67266: PPUSH
67267: LD_VAR 0 5
67271: PPUSH
67272: LD_VAR 0 6
67276: PPUSH
67277: CALL_OW 272
67281: PPUSH
67282: LD_VAR 0 2
67286: PPUSH
67287: LD_VAR 0 5
67291: PPUSH
67292: LD_VAR 0 6
67296: PPUSH
67297: CALL_OW 273
67301: PPUSH
67302: LD_VAR 0 3
67306: PPUSH
67307: CALL_OW 309
67311: IFFALSE 67325
// begin result := true ;
67313: LD_ADDR_VAR 0 4
67317: PUSH
67318: LD_INT 1
67320: ST_TO_ADDR
// exit ;
67321: POP
67322: POP
67323: GO 67329
// end ;
67325: GO 67259
67327: POP
67328: POP
// end ;
67329: LD_VAR 0 4
67333: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
67334: LD_INT 0
67336: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
67337: LD_VAR 0 1
67341: PPUSH
67342: LD_VAR 0 2
67346: PPUSH
67347: LD_INT 0
67349: PPUSH
67350: LD_INT 0
67352: PPUSH
67353: LD_INT 1
67355: PPUSH
67356: LD_INT 0
67358: PPUSH
67359: CALL_OW 587
// end ; end_of_file
67363: LD_VAR 0 3
67367: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
67368: LD_VAR 0 1
67372: PPUSH
67373: LD_VAR 0 2
67377: PPUSH
67378: LD_VAR 0 3
67382: PPUSH
67383: LD_VAR 0 4
67387: PPUSH
67388: LD_VAR 0 5
67392: PPUSH
67393: LD_VAR 0 6
67397: PPUSH
67398: CALL 6019 0 6
// end ;
67402: PPOPN 6
67404: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
67405: LD_INT 0
67407: PPUSH
// begin if not units then
67408: LD_VAR 0 1
67412: NOT
67413: IFFALSE 67417
// exit ;
67415: GO 67417
// end ;
67417: PPOPN 7
67419: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
67420: CALL 5923 0 0
// end ; end_of_file
67424: PPOPN 1
67426: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
67427: LD_VAR 0 1
67431: PUSH
67432: LD_INT 200
67434: DOUBLE
67435: GREATEREQUAL
67436: IFFALSE 67444
67438: LD_INT 299
67440: DOUBLE
67441: LESSEQUAL
67442: IFTRUE 67446
67444: GO 67478
67446: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
67447: LD_VAR 0 1
67451: PPUSH
67452: LD_VAR 0 2
67456: PPUSH
67457: LD_VAR 0 3
67461: PPUSH
67462: LD_VAR 0 4
67466: PPUSH
67467: LD_VAR 0 5
67471: PPUSH
67472: CALL 22034 0 5
67476: GO 67555
67478: LD_INT 300
67480: DOUBLE
67481: GREATEREQUAL
67482: IFFALSE 67490
67484: LD_INT 399
67486: DOUBLE
67487: LESSEQUAL
67488: IFTRUE 67492
67490: GO 67554
67492: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
67493: LD_VAR 0 1
67497: PPUSH
67498: LD_VAR 0 2
67502: PPUSH
67503: LD_VAR 0 3
67507: PPUSH
67508: LD_VAR 0 4
67512: PPUSH
67513: LD_VAR 0 5
67517: PPUSH
67518: LD_VAR 0 6
67522: PPUSH
67523: LD_VAR 0 7
67527: PPUSH
67528: LD_VAR 0 8
67532: PPUSH
67533: LD_VAR 0 9
67537: PPUSH
67538: LD_VAR 0 10
67542: PPUSH
67543: LD_VAR 0 11
67547: PPUSH
67548: CALL 18367 0 11
67552: GO 67555
67554: POP
// end ;
67555: PPOPN 11
67557: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
67558: LD_VAR 0 1
67562: PPUSH
67563: LD_VAR 0 2
67567: PPUSH
67568: LD_VAR 0 3
67572: PPUSH
67573: LD_VAR 0 4
67577: PPUSH
67578: LD_VAR 0 5
67582: PPUSH
67583: CALL 21770 0 5
// end ;
67587: PPOPN 5
67589: END
