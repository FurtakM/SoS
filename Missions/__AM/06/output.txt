// export JMM , Gladstone , Denis , Lisa , Frank , Bobby , Cyrus , Brown , Donaldson , Mike ; export others , randomsDelta ; export apemans , yourApemans ; export yourVehicles ; export DeltaDoctor ; export Harisson ; export selectedPeople ; export baseCorrect ; export cutscene ; export lab ; export resources ; export mission_prefix , mission_prefix_prev ; starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// FogOff ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 344
// baseCorrect := 0 ;
  15: LD_ADDR_EXP 19
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// cutscene := 1 ;
  23: LD_ADDR_EXP 20
  27: PUSH
  28: LD_INT 1
  30: ST_TO_ADDR
// apemans := [ ] ;
  31: LD_ADDR_EXP 13
  35: PUSH
  36: EMPTY
  37: ST_TO_ADDR
// yourApemans := [ ] ;
  38: LD_ADDR_EXP 14
  42: PUSH
  43: EMPTY
  44: ST_TO_ADDR
// yourVehicles := [ ] ;
  45: LD_ADDR_EXP 15
  49: PUSH
  50: EMPTY
  51: ST_TO_ADDR
// randomsDelta := [ ] ;
  52: LD_ADDR_EXP 12
  56: PUSH
  57: EMPTY
  58: ST_TO_ADDR
// resources := [ ] ;
  59: LD_ADDR_EXP 22
  63: PUSH
  64: EMPTY
  65: ST_TO_ADDR
// mission_prefix := 06_ ;
  66: LD_ADDR_EXP 23
  70: PUSH
  71: LD_STRING 06_
  73: ST_TO_ADDR
// mission_prefix_prev := 05_ ;
  74: LD_ADDR_EXP 24
  78: PUSH
  79: LD_STRING 05_
  81: ST_TO_ADDR
// PrepareDeltaBase ;
  82: CALL 2403 0 0
// CreateNature ;
  86: CALL 170 0 0
// LoadVehicles ;
  90: CALL 1530 0 0
// PrepareHeroes ;
  94: CALL 299 0 0
// PrepareRandoms ;
  98: CALL 1795 0 0
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
 102: LD_ADDR_EXP 21
 106: PUSH
 107: LD_INT 22
 109: PUSH
 110: LD_INT 1
 112: PUSH
 113: EMPTY
 114: LIST
 115: LIST
 116: PUSH
 117: LD_INT 2
 119: PUSH
 120: LD_INT 30
 122: PUSH
 123: LD_INT 6
 125: PUSH
 126: EMPTY
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 30
 132: PUSH
 133: LD_INT 7
 135: PUSH
 136: EMPTY
 137: LIST
 138: LIST
 139: PUSH
 140: LD_INT 30
 142: PUSH
 143: LD_INT 8
 145: PUSH
 146: EMPTY
 147: LIST
 148: LIST
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: LIST
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: PPUSH
 160: CALL_OW 69
 164: ST_TO_ADDR
// Action ;
 165: CALL 3321 0 0
// end ;
 169: END
// export function CreateNature ; var i ; begin
 170: LD_INT 0
 172: PPUSH
 173: PPUSH
// uc_side := 0 ;
 174: LD_ADDR_OWVAR 20
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// uc_nation := 0 ;
 182: LD_ADDR_OWVAR 21
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// for i = 1 to 4 do
 190: LD_ADDR_VAR 0 2
 194: PUSH
 195: DOUBLE
 196: LD_INT 1
 198: DEC
 199: ST_TO_ADDR
 200: LD_INT 4
 202: PUSH
 203: FOR_TO
 204: IFFALSE 292
// begin hc_gallery :=  ;
 206: LD_ADDR_OWVAR 33
 210: PUSH
 211: LD_STRING 
 213: ST_TO_ADDR
// hc_name :=  ;
 214: LD_ADDR_OWVAR 26
 218: PUSH
 219: LD_STRING 
 221: ST_TO_ADDR
// hc_agressivity := 0 ;
 222: LD_ADDR_OWVAR 35
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// hc_attr := [ rand ( 10 , 11 ) , rand ( 10 , 12 ) ] ;
 230: LD_ADDR_OWVAR 29
 234: PUSH
 235: LD_INT 10
 237: PPUSH
 238: LD_INT 11
 240: PPUSH
 241: CALL_OW 12
 245: PUSH
 246: LD_INT 10
 248: PPUSH
 249: LD_INT 12
 251: PPUSH
 252: CALL_OW 12
 256: PUSH
 257: EMPTY
 258: LIST
 259: LIST
 260: ST_TO_ADDR
// hc_class := class_apeman ;
 261: LD_ADDR_OWVAR 28
 265: PUSH
 266: LD_INT 12
 268: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , 22 , 18 , 20 , false ) ;
 269: CALL_OW 44
 273: PPUSH
 274: LD_INT 22
 276: PPUSH
 277: LD_INT 18
 279: PPUSH
 280: LD_INT 20
 282: PPUSH
 283: LD_INT 0
 285: PPUSH
 286: CALL_OW 50
// end ;
 290: GO 203
 292: POP
 293: POP
// end ; end_of_file
 294: LD_VAR 0 1
 298: RET
// export function PrepareHeroes ; var i , tmp , ape , test ; begin
 299: LD_INT 0
 301: PPUSH
 302: PPUSH
 303: PPUSH
 304: PPUSH
 305: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
 306: LD_ADDR_VAR 0 3
 310: PUSH
 311: LD_INT 22
 313: PUSH
 314: LD_INT 1
 316: PUSH
 317: EMPTY
 318: LIST
 319: LIST
 320: PUSH
 321: LD_INT 21
 323: PUSH
 324: LD_INT 3
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: PUSH
 331: LD_INT 30
 333: PUSH
 334: LD_INT 0
 336: PUSH
 337: EMPTY
 338: LIST
 339: LIST
 340: PUSH
 341: EMPTY
 342: LIST
 343: LIST
 344: LIST
 345: PPUSH
 346: CALL_OW 69
 350: ST_TO_ADDR
// if tmp then
 351: LD_VAR 0 3
 355: IFFALSE 373
// SetBName ( tmp [ 1 ] , delta ) ;
 357: LD_VAR 0 3
 361: PUSH
 362: LD_INT 1
 364: ARRAY
 365: PPUSH
 366: LD_STRING delta
 368: PPUSH
 369: CALL_OW 500
// uc_side := 1 ;
 373: LD_ADDR_OWVAR 20
 377: PUSH
 378: LD_INT 1
 380: ST_TO_ADDR
// uc_nation := 1 ;
 381: LD_ADDR_OWVAR 21
 385: PUSH
 386: LD_INT 1
 388: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , true , mission_prefix_prev ) ;
 389: LD_ADDR_EXP 1
 393: PUSH
 394: LD_STRING JMM
 396: PPUSH
 397: LD_INT 1
 399: PPUSH
 400: LD_EXP 24
 404: PPUSH
 405: CALL 28275 0 3
 409: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
 410: LD_ADDR_EXP 17
 414: PUSH
 415: LD_STRING Harisson
 417: PPUSH
 418: LD_INT 0
 420: PPUSH
 421: LD_STRING 
 423: PPUSH
 424: CALL 28275 0 3
 428: ST_TO_ADDR
// PlaceUnitXYR ( JMM , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 429: LD_EXP 1
 433: PPUSH
 434: LD_VAR 0 3
 438: PUSH
 439: LD_INT 1
 441: ARRAY
 442: PPUSH
 443: CALL_OW 250
 447: PPUSH
 448: LD_VAR 0 3
 452: PUSH
 453: LD_INT 1
 455: ARRAY
 456: PPUSH
 457: CALL_OW 251
 461: PPUSH
 462: LD_INT 5
 464: PPUSH
 465: LD_INT 0
 467: PPUSH
 468: CALL_OW 50
// SetClass ( JMM , 1 ) ;
 472: LD_EXP 1
 476: PPUSH
 477: LD_INT 1
 479: PPUSH
 480: CALL_OW 336
// Gladstone := PrepareUnitForce ( Gladstone , true , mission_prefix_prev ) ;
 484: LD_ADDR_EXP 2
 488: PUSH
 489: LD_STRING Gladstone
 491: PPUSH
 492: LD_INT 1
 494: PPUSH
 495: LD_EXP 24
 499: PPUSH
 500: CALL 28359 0 3
 504: ST_TO_ADDR
// PlaceUnitXYR ( Gladstone , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 505: LD_EXP 2
 509: PPUSH
 510: LD_VAR 0 3
 514: PUSH
 515: LD_INT 1
 517: ARRAY
 518: PPUSH
 519: CALL_OW 250
 523: PPUSH
 524: LD_VAR 0 3
 528: PUSH
 529: LD_INT 1
 531: ARRAY
 532: PPUSH
 533: CALL_OW 251
 537: PPUSH
 538: LD_INT 5
 540: PPUSH
 541: LD_INT 0
 543: PPUSH
 544: CALL_OW 50
// SetClass ( Gladstone , 4 ) ;
 548: LD_EXP 2
 552: PPUSH
 553: LD_INT 4
 555: PPUSH
 556: CALL_OW 336
// Denis := PrepareUnit ( Denis , true , mission_prefix_prev ) ;
 560: LD_ADDR_EXP 3
 564: PUSH
 565: LD_STRING Denis
 567: PPUSH
 568: LD_INT 1
 570: PPUSH
 571: LD_EXP 24
 575: PPUSH
 576: CALL 28275 0 3
 580: ST_TO_ADDR
// PlaceUnitXYR ( Denis , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 581: LD_EXP 3
 585: PPUSH
 586: LD_VAR 0 3
 590: PUSH
 591: LD_INT 1
 593: ARRAY
 594: PPUSH
 595: CALL_OW 250
 599: PPUSH
 600: LD_VAR 0 3
 604: PUSH
 605: LD_INT 1
 607: ARRAY
 608: PPUSH
 609: CALL_OW 251
 613: PPUSH
 614: LD_INT 5
 616: PPUSH
 617: LD_INT 0
 619: PPUSH
 620: CALL_OW 50
// SetClass ( Denis , 4 ) ;
 624: LD_EXP 3
 628: PPUSH
 629: LD_INT 4
 631: PPUSH
 632: CALL_OW 336
// Mike := PrepareUnit ( Mike , true , mission_prefix_prev ) ;
 636: LD_ADDR_EXP 10
 640: PUSH
 641: LD_STRING Mike
 643: PPUSH
 644: LD_INT 1
 646: PPUSH
 647: LD_EXP 24
 651: PPUSH
 652: CALL 28275 0 3
 656: ST_TO_ADDR
// PlaceUnitXYR ( Mike , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 657: LD_EXP 10
 661: PPUSH
 662: LD_VAR 0 3
 666: PUSH
 667: LD_INT 1
 669: ARRAY
 670: PPUSH
 671: CALL_OW 250
 675: PPUSH
 676: LD_VAR 0 3
 680: PUSH
 681: LD_INT 1
 683: ARRAY
 684: PPUSH
 685: CALL_OW 251
 689: PPUSH
 690: LD_INT 5
 692: PPUSH
 693: LD_INT 0
 695: PPUSH
 696: CALL_OW 50
// if LoadVariable ( FrankInDelta , 0 ) = 1 then
 700: LD_STRING FrankInDelta
 702: PPUSH
 703: LD_INT 0
 705: PPUSH
 706: CALL_OW 30
 710: PUSH
 711: LD_INT 1
 713: EQUAL
 714: IFFALSE 792
// begin Frank := PrepareUnitForce ( Frank , true , mission_prefix_prev ) ;
 716: LD_ADDR_EXP 5
 720: PUSH
 721: LD_STRING Frank
 723: PPUSH
 724: LD_INT 1
 726: PPUSH
 727: LD_EXP 24
 731: PPUSH
 732: CALL 28359 0 3
 736: ST_TO_ADDR
// PlaceUnitXYR ( Frank , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 737: LD_EXP 5
 741: PPUSH
 742: LD_VAR 0 3
 746: PUSH
 747: LD_INT 1
 749: ARRAY
 750: PPUSH
 751: CALL_OW 250
 755: PPUSH
 756: LD_VAR 0 3
 760: PUSH
 761: LD_INT 1
 763: ARRAY
 764: PPUSH
 765: CALL_OW 251
 769: PPUSH
 770: LD_INT 5
 772: PPUSH
 773: LD_INT 0
 775: PPUSH
 776: CALL_OW 50
// SetClass ( Frank , 1 ) ;
 780: LD_EXP 5
 784: PPUSH
 785: LD_INT 1
 787: PPUSH
 788: CALL_OW 336
// end ; if LoadVariable ( LisaInDelta , 0 ) = 1 then
 792: LD_STRING LisaInDelta
 794: PPUSH
 795: LD_INT 0
 797: PPUSH
 798: CALL_OW 30
 802: PUSH
 803: LD_INT 1
 805: EQUAL
 806: IFFALSE 884
// begin Lisa := PrepareUnitForce ( Lisa , true , mission_prefix_prev ) ;
 808: LD_ADDR_EXP 4
 812: PUSH
 813: LD_STRING Lisa
 815: PPUSH
 816: LD_INT 1
 818: PPUSH
 819: LD_EXP 24
 823: PPUSH
 824: CALL 28359 0 3
 828: ST_TO_ADDR
// PlaceUnitXYR ( Lisa , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 829: LD_EXP 4
 833: PPUSH
 834: LD_VAR 0 3
 838: PUSH
 839: LD_INT 1
 841: ARRAY
 842: PPUSH
 843: CALL_OW 250
 847: PPUSH
 848: LD_VAR 0 3
 852: PUSH
 853: LD_INT 1
 855: ARRAY
 856: PPUSH
 857: CALL_OW 251
 861: PPUSH
 862: LD_INT 5
 864: PPUSH
 865: LD_INT 0
 867: PPUSH
 868: CALL_OW 50
// SetClass ( Lisa , 1 ) ;
 872: LD_EXP 4
 876: PPUSH
 877: LD_INT 1
 879: PPUSH
 880: CALL_OW 336
// end ; if LoadVariable ( BobbyInDelta , 0 ) = 1 then
 884: LD_STRING BobbyInDelta
 886: PPUSH
 887: LD_INT 0
 889: PPUSH
 890: CALL_OW 30
 894: PUSH
 895: LD_INT 1
 897: EQUAL
 898: IFFALSE 976
// begin Bobby := PrepareUnitForce ( Bobby , true , mission_prefix_prev ) ;
 900: LD_ADDR_EXP 6
 904: PUSH
 905: LD_STRING Bobby
 907: PPUSH
 908: LD_INT 1
 910: PPUSH
 911: LD_EXP 24
 915: PPUSH
 916: CALL 28359 0 3
 920: ST_TO_ADDR
// PlaceUnitXYR ( Bobby , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 921: LD_EXP 6
 925: PPUSH
 926: LD_VAR 0 3
 930: PUSH
 931: LD_INT 1
 933: ARRAY
 934: PPUSH
 935: CALL_OW 250
 939: PPUSH
 940: LD_VAR 0 3
 944: PUSH
 945: LD_INT 1
 947: ARRAY
 948: PPUSH
 949: CALL_OW 251
 953: PPUSH
 954: LD_INT 5
 956: PPUSH
 957: LD_INT 0
 959: PPUSH
 960: CALL_OW 50
// SetClass ( Bobby , 1 ) ;
 964: LD_EXP 6
 968: PPUSH
 969: LD_INT 1
 971: PPUSH
 972: CALL_OW 336
// end ; if LoadVariable ( CyrusInDelta , 0 ) = 1 then
 976: LD_STRING CyrusInDelta
 978: PPUSH
 979: LD_INT 0
 981: PPUSH
 982: CALL_OW 30
 986: PUSH
 987: LD_INT 1
 989: EQUAL
 990: IFFALSE 1068
// begin Cyrus := PrepareUnitForce ( Cyrus , true , mission_prefix_prev ) ;
 992: LD_ADDR_EXP 7
 996: PUSH
 997: LD_STRING Cyrus
 999: PPUSH
1000: LD_INT 1
1002: PPUSH
1003: LD_EXP 24
1007: PPUSH
1008: CALL 28359 0 3
1012: ST_TO_ADDR
// PlaceUnitXYR ( Cyrus , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1013: LD_EXP 7
1017: PPUSH
1018: LD_VAR 0 3
1022: PUSH
1023: LD_INT 1
1025: ARRAY
1026: PPUSH
1027: CALL_OW 250
1031: PPUSH
1032: LD_VAR 0 3
1036: PUSH
1037: LD_INT 1
1039: ARRAY
1040: PPUSH
1041: CALL_OW 251
1045: PPUSH
1046: LD_INT 5
1048: PPUSH
1049: LD_INT 0
1051: PPUSH
1052: CALL_OW 50
// SetClass ( Cyrus , 1 ) ;
1056: LD_EXP 7
1060: PPUSH
1061: LD_INT 1
1063: PPUSH
1064: CALL_OW 336
// end ; if LoadVariable ( DonaldsonInDelta , 0 ) = 1 then
1068: LD_STRING DonaldsonInDelta
1070: PPUSH
1071: LD_INT 0
1073: PPUSH
1074: CALL_OW 30
1078: PUSH
1079: LD_INT 1
1081: EQUAL
1082: IFFALSE 1160
// begin Donaldson := PrepareUnitForce ( Donaldson , true , mission_prefix_prev ) ;
1084: LD_ADDR_EXP 9
1088: PUSH
1089: LD_STRING Donaldson
1091: PPUSH
1092: LD_INT 1
1094: PPUSH
1095: LD_EXP 24
1099: PPUSH
1100: CALL 28359 0 3
1104: ST_TO_ADDR
// PlaceUnitXYR ( Donaldson , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1105: LD_EXP 9
1109: PPUSH
1110: LD_VAR 0 3
1114: PUSH
1115: LD_INT 1
1117: ARRAY
1118: PPUSH
1119: CALL_OW 250
1123: PPUSH
1124: LD_VAR 0 3
1128: PUSH
1129: LD_INT 1
1131: ARRAY
1132: PPUSH
1133: CALL_OW 251
1137: PPUSH
1138: LD_INT 5
1140: PPUSH
1141: LD_INT 0
1143: PPUSH
1144: CALL_OW 50
// SetClass ( Donaldson , 1 ) ;
1148: LD_EXP 9
1152: PPUSH
1153: LD_INT 1
1155: PPUSH
1156: CALL_OW 336
// end ; if LoadVariable ( BrownInDelta , 0 ) = 1 then
1160: LD_STRING BrownInDelta
1162: PPUSH
1163: LD_INT 0
1165: PPUSH
1166: CALL_OW 30
1170: PUSH
1171: LD_INT 1
1173: EQUAL
1174: IFFALSE 1252
// begin Brown := PrepareUnitForce ( Brown , true , mission_prefix_prev ) ;
1176: LD_ADDR_EXP 8
1180: PUSH
1181: LD_STRING Brown
1183: PPUSH
1184: LD_INT 1
1186: PPUSH
1187: LD_EXP 24
1191: PPUSH
1192: CALL 28359 0 3
1196: ST_TO_ADDR
// PlaceUnitXYR ( Brown , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1197: LD_EXP 8
1201: PPUSH
1202: LD_VAR 0 3
1206: PUSH
1207: LD_INT 1
1209: ARRAY
1210: PPUSH
1211: CALL_OW 250
1215: PPUSH
1216: LD_VAR 0 3
1220: PUSH
1221: LD_INT 1
1223: ARRAY
1224: PPUSH
1225: CALL_OW 251
1229: PPUSH
1230: LD_INT 5
1232: PPUSH
1233: LD_INT 0
1235: PPUSH
1236: CALL_OW 50
// SetClass ( Brown , 2 ) ;
1240: LD_EXP 8
1244: PPUSH
1245: LD_INT 2
1247: PPUSH
1248: CALL_OW 336
// end ; others := CreateCharacterSet ( othersInDelta ) ;
1252: LD_ADDR_EXP 11
1256: PUSH
1257: LD_STRING othersInDelta
1259: PPUSH
1260: CALL_OW 31
1264: ST_TO_ADDR
// for i in others do
1265: LD_ADDR_VAR 0 2
1269: PUSH
1270: LD_EXP 11
1274: PUSH
1275: FOR_IN
1276: IFFALSE 1323
// PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1278: LD_VAR 0 2
1282: PPUSH
1283: LD_VAR 0 3
1287: PUSH
1288: LD_INT 1
1290: ARRAY
1291: PPUSH
1292: CALL_OW 250
1296: PPUSH
1297: LD_VAR 0 3
1301: PUSH
1302: LD_INT 1
1304: ARRAY
1305: PPUSH
1306: CALL_OW 251
1310: PPUSH
1311: LD_INT 35
1313: PPUSH
1314: LD_INT 0
1316: PPUSH
1317: CALL_OW 50
1321: GO 1275
1323: POP
1324: POP
// apemans := CreateCharacterSet ( apeInDelta ) ;
1325: LD_ADDR_EXP 13
1329: PUSH
1330: LD_STRING apeInDelta
1332: PPUSH
1333: CALL_OW 31
1337: ST_TO_ADDR
// uc_nation := 0 ;
1338: LD_ADDR_OWVAR 21
1342: PUSH
1343: LD_INT 0
1345: ST_TO_ADDR
// if apemans > 5 then
1346: LD_EXP 13
1350: PUSH
1351: LD_INT 5
1353: GREATER
1354: IFFALSE 1449
// begin for i := 1 to 5 do
1356: LD_ADDR_VAR 0 2
1360: PUSH
1361: DOUBLE
1362: LD_INT 1
1364: DEC
1365: ST_TO_ADDR
1366: LD_INT 5
1368: PUSH
1369: FOR_TO
1370: IFFALSE 1445
// begin PlaceUnitXYR ( apemans [ i ] , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1372: LD_EXP 13
1376: PUSH
1377: LD_VAR 0 2
1381: ARRAY
1382: PPUSH
1383: LD_VAR 0 3
1387: PUSH
1388: LD_INT 1
1390: ARRAY
1391: PPUSH
1392: CALL_OW 250
1396: PPUSH
1397: LD_VAR 0 3
1401: PUSH
1402: LD_INT 1
1404: ARRAY
1405: PPUSH
1406: CALL_OW 251
1410: PPUSH
1411: LD_INT 50
1413: PPUSH
1414: LD_INT 0
1416: PPUSH
1417: CALL_OW 50
// yourApemans := yourApemans ^ apemans [ i ] ;
1421: LD_ADDR_EXP 14
1425: PUSH
1426: LD_EXP 14
1430: PUSH
1431: LD_EXP 13
1435: PUSH
1436: LD_VAR 0 2
1440: ARRAY
1441: ADD
1442: ST_TO_ADDR
// end ;
1443: GO 1369
1445: POP
1446: POP
// end else
1447: GO 1525
// begin for i in apemans do
1449: LD_ADDR_VAR 0 2
1453: PUSH
1454: LD_EXP 13
1458: PUSH
1459: FOR_IN
1460: IFFALSE 1523
// begin PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1462: LD_VAR 0 2
1466: PPUSH
1467: LD_VAR 0 3
1471: PUSH
1472: LD_INT 1
1474: ARRAY
1475: PPUSH
1476: CALL_OW 250
1480: PPUSH
1481: LD_VAR 0 3
1485: PUSH
1486: LD_INT 1
1488: ARRAY
1489: PPUSH
1490: CALL_OW 251
1494: PPUSH
1495: LD_INT 50
1497: PPUSH
1498: LD_INT 0
1500: PPUSH
1501: CALL_OW 50
// yourApemans := yourApemans ^ i ;
1505: LD_ADDR_EXP 14
1509: PUSH
1510: LD_EXP 14
1514: PUSH
1515: LD_VAR 0 2
1519: ADD
1520: ST_TO_ADDR
// end ;
1521: GO 1459
1523: POP
1524: POP
// end ; end ;
1525: LD_VAR 0 1
1529: RET
// export function LoadVehicles ; var i , j , veh , tmp , vehicles ; begin
1530: LD_INT 0
1532: PPUSH
1533: PPUSH
1534: PPUSH
1535: PPUSH
1536: PPUSH
1537: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1538: LD_ADDR_VAR 0 5
1542: PUSH
1543: LD_INT 22
1545: PUSH
1546: LD_INT 1
1548: PUSH
1549: EMPTY
1550: LIST
1551: LIST
1552: PUSH
1553: LD_INT 21
1555: PUSH
1556: LD_INT 3
1558: PUSH
1559: EMPTY
1560: LIST
1561: LIST
1562: PUSH
1563: LD_INT 30
1565: PUSH
1566: LD_INT 0
1568: PUSH
1569: EMPTY
1570: LIST
1571: LIST
1572: PUSH
1573: EMPTY
1574: LIST
1575: LIST
1576: LIST
1577: PPUSH
1578: CALL_OW 69
1582: ST_TO_ADDR
// uc_side := 1 ;
1583: LD_ADDR_OWVAR 20
1587: PUSH
1588: LD_INT 1
1590: ST_TO_ADDR
// vehicles := LoadVariable ( vehiclesInDelta , [ ] ) ;
1591: LD_ADDR_VAR 0 6
1595: PUSH
1596: LD_STRING vehiclesInDelta
1598: PPUSH
1599: EMPTY
1600: PPUSH
1601: CALL_OW 30
1605: ST_TO_ADDR
// for i := 1 to Count ( vehicles ) div 4 do
1606: LD_ADDR_VAR 0 2
1610: PUSH
1611: DOUBLE
1612: LD_INT 1
1614: DEC
1615: ST_TO_ADDR
1616: LD_VAR 0 6
1620: PPUSH
1621: CALL 30499 0 1
1625: PUSH
1626: LD_INT 4
1628: DIV
1629: PUSH
1630: FOR_TO
1631: IFFALSE 1788
// begin uc_nation := vehicles [ 1 ] ;
1633: LD_ADDR_OWVAR 21
1637: PUSH
1638: LD_VAR 0 6
1642: PUSH
1643: LD_INT 1
1645: ARRAY
1646: ST_TO_ADDR
// vc_chassis := vehicles [ 2 ] ;
1647: LD_ADDR_OWVAR 37
1651: PUSH
1652: LD_VAR 0 6
1656: PUSH
1657: LD_INT 2
1659: ARRAY
1660: ST_TO_ADDR
// vc_engine := vehicles [ 3 ] ;
1661: LD_ADDR_OWVAR 39
1665: PUSH
1666: LD_VAR 0 6
1670: PUSH
1671: LD_INT 3
1673: ARRAY
1674: ST_TO_ADDR
// vc_control := vehicles [ 4 ] ;
1675: LD_ADDR_OWVAR 38
1679: PUSH
1680: LD_VAR 0 6
1684: PUSH
1685: LD_INT 4
1687: ARRAY
1688: ST_TO_ADDR
// vc_weapon := vehicles [ 5 ] ;
1689: LD_ADDR_OWVAR 40
1693: PUSH
1694: LD_VAR 0 6
1698: PUSH
1699: LD_INT 5
1701: ARRAY
1702: ST_TO_ADDR
// veh := CreateVehicle ;
1703: LD_ADDR_VAR 0 4
1707: PUSH
1708: CALL_OW 45
1712: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1713: LD_VAR 0 4
1717: PPUSH
1718: LD_INT 0
1720: PPUSH
1721: LD_INT 5
1723: PPUSH
1724: CALL_OW 12
1728: PPUSH
1729: CALL_OW 233
// PlaceUnitArea ( veh , parkingArea , false ) ;
1733: LD_VAR 0 4
1737: PPUSH
1738: LD_INT 4
1740: PPUSH
1741: LD_INT 0
1743: PPUSH
1744: CALL_OW 49
// for j := 1 to 5 do
1748: LD_ADDR_VAR 0 3
1752: PUSH
1753: DOUBLE
1754: LD_INT 1
1756: DEC
1757: ST_TO_ADDR
1758: LD_INT 5
1760: PUSH
1761: FOR_TO
1762: IFFALSE 1784
// vehicles := Delete ( vehicles , 1 ) ;
1764: LD_ADDR_VAR 0 6
1768: PUSH
1769: LD_VAR 0 6
1773: PPUSH
1774: LD_INT 1
1776: PPUSH
1777: CALL_OW 3
1781: ST_TO_ADDR
1782: GO 1761
1784: POP
1785: POP
// end ;
1786: GO 1630
1788: POP
1789: POP
// end ;
1790: LD_VAR 0 1
1794: RET
// export function PrepareRandoms ; var i , un , tmp , filter ; begin
1795: LD_INT 0
1797: PPUSH
1798: PPUSH
1799: PPUSH
1800: PPUSH
1801: PPUSH
// uc_side := 1 ;
1802: LD_ADDR_OWVAR 20
1806: PUSH
1807: LD_INT 1
1809: ST_TO_ADDR
// uc_nation := 1 ;
1810: LD_ADDR_OWVAR 21
1814: PUSH
1815: LD_INT 1
1817: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1818: LD_ADDR_VAR 0 4
1822: PUSH
1823: LD_INT 22
1825: PUSH
1826: LD_INT 1
1828: PUSH
1829: EMPTY
1830: LIST
1831: LIST
1832: PUSH
1833: LD_INT 21
1835: PUSH
1836: LD_INT 3
1838: PUSH
1839: EMPTY
1840: LIST
1841: LIST
1842: PUSH
1843: LD_INT 30
1845: PUSH
1846: LD_INT 0
1848: PUSH
1849: EMPTY
1850: LIST
1851: LIST
1852: PUSH
1853: EMPTY
1854: LIST
1855: LIST
1856: LIST
1857: PPUSH
1858: CALL_OW 69
1862: ST_TO_ADDR
// deltaDoctor := ( FilterAllunits ( [ [ [ f_side , 1 ] , [ f_nation , nation_american ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] ) ;
1863: LD_ADDR_EXP 16
1867: PUSH
1868: LD_INT 22
1870: PUSH
1871: LD_INT 1
1873: PUSH
1874: EMPTY
1875: LIST
1876: LIST
1877: PUSH
1878: LD_INT 23
1880: PUSH
1881: LD_INT 1
1883: PUSH
1884: EMPTY
1885: LIST
1886: LIST
1887: PUSH
1888: LD_INT 25
1890: PUSH
1891: LD_INT 4
1893: PUSH
1894: EMPTY
1895: LIST
1896: LIST
1897: PUSH
1898: LD_INT 26
1900: PUSH
1901: LD_INT 1
1903: PUSH
1904: EMPTY
1905: LIST
1906: LIST
1907: PUSH
1908: EMPTY
1909: LIST
1910: LIST
1911: LIST
1912: LIST
1913: PUSH
1914: EMPTY
1915: LIST
1916: PPUSH
1917: CALL_OW 69
1921: PUSH
1922: LD_EXP 1
1926: PUSH
1927: LD_EXP 7
1931: PUSH
1932: LD_EXP 6
1936: PUSH
1937: LD_EXP 5
1941: PUSH
1942: LD_EXP 2
1946: PUSH
1947: LD_EXP 3
1951: PUSH
1952: LD_EXP 8
1956: PUSH
1957: EMPTY
1958: LIST
1959: LIST
1960: LIST
1961: LIST
1962: LIST
1963: LIST
1964: LIST
1965: DIFF
1966: ST_TO_ADDR
// if not deltaDoctor then
1967: LD_EXP 16
1971: NOT
1972: IFFALSE 2134
// begin filter := FilterAllunits ( [ [ [ f_side , 1 ] , [ f_nation , nation_american ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] ;
1974: LD_ADDR_VAR 0 5
1978: PUSH
1979: LD_INT 22
1981: PUSH
1982: LD_INT 1
1984: PUSH
1985: EMPTY
1986: LIST
1987: LIST
1988: PUSH
1989: LD_INT 23
1991: PUSH
1992: LD_INT 1
1994: PUSH
1995: EMPTY
1996: LIST
1997: LIST
1998: PUSH
1999: LD_INT 26
2001: PUSH
2002: LD_INT 1
2004: PUSH
2005: EMPTY
2006: LIST
2007: LIST
2008: PUSH
2009: EMPTY
2010: LIST
2011: LIST
2012: LIST
2013: PUSH
2014: EMPTY
2015: LIST
2016: PPUSH
2017: CALL_OW 69
2021: PUSH
2022: LD_EXP 1
2026: PUSH
2027: LD_EXP 7
2031: PUSH
2032: LD_EXP 6
2036: PUSH
2037: LD_EXP 5
2041: PUSH
2042: LD_EXP 2
2046: PUSH
2047: LD_EXP 3
2051: PUSH
2052: LD_EXP 8
2056: PUSH
2057: EMPTY
2058: LIST
2059: LIST
2060: LIST
2061: LIST
2062: LIST
2063: LIST
2064: LIST
2065: DIFF
2066: ST_TO_ADDR
// if filter then
2067: LD_VAR 0 5
2071: IFFALSE 2132
// for i in filter do
2073: LD_ADDR_VAR 0 2
2077: PUSH
2078: LD_VAR 0 5
2082: PUSH
2083: FOR_IN
2084: IFFALSE 2130
// if GetSkill ( i , 4 ) >= 4 then
2086: LD_VAR 0 2
2090: PPUSH
2091: LD_INT 4
2093: PPUSH
2094: CALL_OW 259
2098: PUSH
2099: LD_INT 4
2101: GREATEREQUAL
2102: IFFALSE 2128
// begin deltaDoctor := i ;
2104: LD_ADDR_EXP 16
2108: PUSH
2109: LD_VAR 0 2
2113: ST_TO_ADDR
// SetClass ( deltaDoctor , 4 ) ;
2114: LD_EXP 16
2118: PPUSH
2119: LD_INT 4
2121: PPUSH
2122: CALL_OW 336
// break ;
2126: GO 2130
// end ;
2128: GO 2083
2130: POP
2131: POP
// end else
2132: GO 2148
// deltaDoctor := deltaDoctor [ 1 ] ;
2134: LD_ADDR_EXP 16
2138: PUSH
2139: LD_EXP 16
2143: PUSH
2144: LD_INT 1
2146: ARRAY
2147: ST_TO_ADDR
// for i := 1 to 7 do
2148: LD_ADDR_VAR 0 2
2152: PUSH
2153: DOUBLE
2154: LD_INT 1
2156: DEC
2157: ST_TO_ADDR
2158: LD_INT 7
2160: PUSH
2161: FOR_TO
2162: IFFALSE 2291
// begin hc_gallery :=  ;
2164: LD_ADDR_OWVAR 33
2168: PUSH
2169: LD_STRING 
2171: ST_TO_ADDR
// hc_name :=  ;
2172: LD_ADDR_OWVAR 26
2176: PUSH
2177: LD_STRING 
2179: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ rand ( 1 , 4 ) ] , 4 ) ;
2180: LD_INT 0
2182: PPUSH
2183: LD_INT 1
2185: PUSH
2186: LD_INT 2
2188: PUSH
2189: LD_INT 3
2191: PUSH
2192: LD_INT 4
2194: PUSH
2195: EMPTY
2196: LIST
2197: LIST
2198: LIST
2199: LIST
2200: PUSH
2201: LD_INT 1
2203: PPUSH
2204: LD_INT 4
2206: PPUSH
2207: CALL_OW 12
2211: ARRAY
2212: PPUSH
2213: LD_INT 4
2215: PPUSH
2216: CALL_OW 380
// un := CreateHuman ;
2220: LD_ADDR_VAR 0 3
2224: PUSH
2225: CALL_OW 44
2229: ST_TO_ADDR
// randomsDelta := randomsDelta ^ un ;
2230: LD_ADDR_EXP 12
2234: PUSH
2235: LD_EXP 12
2239: PUSH
2240: LD_VAR 0 3
2244: ADD
2245: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
2246: LD_VAR 0 3
2250: PPUSH
2251: LD_VAR 0 4
2255: PUSH
2256: LD_INT 1
2258: ARRAY
2259: PPUSH
2260: CALL_OW 250
2264: PPUSH
2265: LD_VAR 0 4
2269: PUSH
2270: LD_INT 1
2272: ARRAY
2273: PPUSH
2274: CALL_OW 251
2278: PPUSH
2279: LD_INT 15
2281: PPUSH
2282: LD_INT 0
2284: PPUSH
2285: CALL_OW 50
// end ;
2289: GO 2161
2291: POP
2292: POP
// if deltaDoctor then
2293: LD_EXP 16
2297: IFFALSE 2301
// exit ;
2299: GO 2398
// hc_gallery := Dawkins ;
2301: LD_ADDR_OWVAR 33
2305: PUSH
2306: LD_STRING Dawkins
2308: ST_TO_ADDR
// hc_face_number := 1 ;
2309: LD_ADDR_OWVAR 34
2313: PUSH
2314: LD_INT 1
2316: ST_TO_ADDR
// hc_name := Dr. Adam Charles Dawkins ;
2317: LD_ADDR_OWVAR 26
2321: PUSH
2322: LD_STRING Dr. Adam Charles Dawkins
2324: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 5 ) ;
2325: LD_INT 1
2327: PPUSH
2328: LD_INT 4
2330: PPUSH
2331: LD_INT 5
2333: PPUSH
2334: CALL_OW 380
// deltaDoctor := CreateHuman ;
2338: LD_ADDR_EXP 16
2342: PUSH
2343: CALL_OW 44
2347: ST_TO_ADDR
// PlaceUnitXYR ( deltaDoctor , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
2348: LD_EXP 16
2352: PPUSH
2353: LD_VAR 0 4
2357: PUSH
2358: LD_INT 1
2360: ARRAY
2361: PPUSH
2362: CALL_OW 250
2366: PPUSH
2367: LD_VAR 0 4
2371: PUSH
2372: LD_INT 1
2374: ARRAY
2375: PPUSH
2376: CALL_OW 251
2380: PPUSH
2381: LD_INT 5
2383: PPUSH
2384: LD_INT 0
2386: PPUSH
2387: CALL_OW 50
// ToLua ( enableBioCharacter(BIO_ADAM) ) ;
2391: LD_STRING enableBioCharacter(BIO_ADAM)
2393: PPUSH
2394: CALL_OW 559
// end ; end_of_file
2398: LD_VAR 0 1
2402: RET
// export function PrepareDeltaBase ; var i , j , building , buildings , lab , tmp ; begin
2403: LD_INT 0
2405: PPUSH
2406: PPUSH
2407: PPUSH
2408: PPUSH
2409: PPUSH
2410: PPUSH
2411: PPUSH
// buildings := LoadVariable ( buildingsInDelta , [ ] ) ;
2412: LD_ADDR_VAR 0 5
2416: PUSH
2417: LD_STRING buildingsInDelta
2419: PPUSH
2420: EMPTY
2421: PPUSH
2422: CALL_OW 30
2426: ST_TO_ADDR
// SetResourceVisibility ( 68 , 40 , 1 ) ;
2427: LD_INT 68
2429: PPUSH
2430: LD_INT 40
2432: PPUSH
2433: LD_INT 1
2435: PPUSH
2436: CALL_OW 441
// uc_side := 1 ;
2440: LD_ADDR_OWVAR 20
2444: PUSH
2445: LD_INT 1
2447: ST_TO_ADDR
// uc_nation := 1 ;
2448: LD_ADDR_OWVAR 21
2452: PUSH
2453: LD_INT 1
2455: ST_TO_ADDR
// for i := 1 to buildings do
2456: LD_ADDR_VAR 0 2
2460: PUSH
2461: DOUBLE
2462: LD_INT 1
2464: DEC
2465: ST_TO_ADDR
2466: LD_VAR 0 5
2470: PUSH
2471: FOR_TO
2472: IFFALSE 2775
// begin InitBc ;
2474: CALL_OW 21
// bc_type := buildings [ i ] [ 1 ] ;
2478: LD_ADDR_OWVAR 42
2482: PUSH
2483: LD_VAR 0 5
2487: PUSH
2488: LD_VAR 0 2
2492: ARRAY
2493: PUSH
2494: LD_INT 1
2496: ARRAY
2497: ST_TO_ADDR
// bc_level := buildings [ i ] [ 2 ] ;
2498: LD_ADDR_OWVAR 43
2502: PUSH
2503: LD_VAR 0 5
2507: PUSH
2508: LD_VAR 0 2
2512: ARRAY
2513: PUSH
2514: LD_INT 2
2516: ARRAY
2517: ST_TO_ADDR
// if bc_type in [ b_lab , b_lab_half , b_lab_full ] then
2518: LD_OWVAR 42
2522: PUSH
2523: LD_INT 6
2525: PUSH
2526: LD_INT 7
2528: PUSH
2529: LD_INT 8
2531: PUSH
2532: EMPTY
2533: LIST
2534: LIST
2535: LIST
2536: IN
2537: IFFALSE 2661
// begin bc_kind1 := b_lab_basic ;
2539: LD_ADDR_OWVAR 44
2543: PUSH
2544: LD_INT 9
2546: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2547: LD_ADDR_OWVAR 45
2551: PUSH
2552: LD_INT 9
2554: ST_TO_ADDR
// if buildings [ i ] [ 6 ] then
2555: LD_VAR 0 5
2559: PUSH
2560: LD_VAR 0 2
2564: ARRAY
2565: PUSH
2566: LD_INT 6
2568: ARRAY
2569: IFFALSE 2637
// begin bc_kind1 := buildings [ i ] [ 6 ] ;
2571: LD_ADDR_OWVAR 44
2575: PUSH
2576: LD_VAR 0 5
2580: PUSH
2581: LD_VAR 0 2
2585: ARRAY
2586: PUSH
2587: LD_INT 6
2589: ARRAY
2590: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2591: LD_ADDR_OWVAR 45
2595: PUSH
2596: LD_INT 9
2598: ST_TO_ADDR
// if buildings [ i ] [ 7 ] then
2599: LD_VAR 0 5
2603: PUSH
2604: LD_VAR 0 2
2608: ARRAY
2609: PUSH
2610: LD_INT 7
2612: ARRAY
2613: IFFALSE 2635
// bc_kind2 := buildings [ i ] [ 7 ] ;
2615: LD_ADDR_OWVAR 45
2619: PUSH
2620: LD_VAR 0 5
2624: PUSH
2625: LD_VAR 0 2
2629: ARRAY
2630: PUSH
2631: LD_INT 7
2633: ARRAY
2634: ST_TO_ADDR
// end else
2635: GO 2661
// begin bc_type := b_lab ;
2637: LD_ADDR_OWVAR 42
2641: PUSH
2642: LD_INT 6
2644: ST_TO_ADDR
// bc_kind1 := b_lab_basic ;
2645: LD_ADDR_OWVAR 44
2649: PUSH
2650: LD_INT 9
2652: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2653: LD_ADDR_OWVAR 45
2657: PUSH
2658: LD_INT 9
2660: ST_TO_ADDR
// end ; end ; building := CreateAndPlaceBuildingXYD ( buildings [ i ] [ 3 ] , buildings [ i ] [ 4 ] , buildings [ i ] [ 5 ] ) ;
2661: LD_ADDR_VAR 0 4
2665: PUSH
2666: LD_VAR 0 5
2670: PUSH
2671: LD_VAR 0 2
2675: ARRAY
2676: PUSH
2677: LD_INT 3
2679: ARRAY
2680: PPUSH
2681: LD_VAR 0 5
2685: PUSH
2686: LD_VAR 0 2
2690: ARRAY
2691: PUSH
2692: LD_INT 4
2694: ARRAY
2695: PPUSH
2696: LD_VAR 0 5
2700: PUSH
2701: LD_VAR 0 2
2705: ARRAY
2706: PUSH
2707: LD_INT 5
2709: ARRAY
2710: PPUSH
2711: CALL_OW 47
2715: ST_TO_ADDR
// if GetBType ( building ) = b_bunker and buildings [ i ] [ 8 ] then
2716: LD_VAR 0 4
2720: PPUSH
2721: CALL_OW 266
2725: PUSH
2726: LD_INT 32
2728: EQUAL
2729: IFFALSE 2747
2731: PUSH
2732: LD_VAR 0 5
2736: PUSH
2737: LD_VAR 0 2
2741: ARRAY
2742: PUSH
2743: LD_INT 8
2745: ARRAY
2746: AND
2747: IFFALSE 2773
// PlaceWeaponTurret ( building , buildings [ i ] [ 8 ] ) ;
2749: LD_VAR 0 4
2753: PPUSH
2754: LD_VAR 0 5
2758: PUSH
2759: LD_VAR 0 2
2763: ARRAY
2764: PUSH
2765: LD_INT 8
2767: ARRAY
2768: PPUSH
2769: CALL_OW 431
// end ;
2773: GO 2471
2775: POP
2776: POP
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
2777: LD_ADDR_VAR 0 6
2781: PUSH
2782: LD_INT 22
2784: PUSH
2785: LD_INT 1
2787: PUSH
2788: EMPTY
2789: LIST
2790: LIST
2791: PUSH
2792: LD_INT 2
2794: PUSH
2795: LD_INT 30
2797: PUSH
2798: LD_INT 6
2800: PUSH
2801: EMPTY
2802: LIST
2803: LIST
2804: PUSH
2805: LD_INT 30
2807: PUSH
2808: LD_INT 7
2810: PUSH
2811: EMPTY
2812: LIST
2813: LIST
2814: PUSH
2815: LD_INT 30
2817: PUSH
2818: LD_INT 8
2820: PUSH
2821: EMPTY
2822: LIST
2823: LIST
2824: PUSH
2825: EMPTY
2826: LIST
2827: LIST
2828: LIST
2829: LIST
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: PPUSH
2835: CALL_OW 69
2839: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) ;
2840: LD_ADDR_VAR 0 7
2844: PUSH
2845: LD_INT 22
2847: PUSH
2848: LD_INT 1
2850: PUSH
2851: EMPTY
2852: LIST
2853: LIST
2854: PUSH
2855: LD_INT 30
2857: PUSH
2858: LD_INT 0
2860: PUSH
2861: EMPTY
2862: LIST
2863: LIST
2864: PUSH
2865: EMPTY
2866: LIST
2867: LIST
2868: PPUSH
2869: CALL_OW 69
2873: ST_TO_ADDR
// if lab and tmp then
2874: LD_VAR 0 6
2878: IFFALSE 2886
2880: PUSH
2881: LD_VAR 0 7
2885: AND
2886: IFFALSE 2896
// baseCorrect := 1 ;
2888: LD_ADDR_EXP 19
2892: PUSH
2893: LD_INT 1
2895: ST_TO_ADDR
// if not baseCorrect then
2896: LD_EXP 19
2900: NOT
2901: IFFALSE 3316
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
2903: LD_ADDR_VAR 0 2
2907: PUSH
2908: LD_INT 22
2910: PUSH
2911: LD_INT 1
2913: PUSH
2914: EMPTY
2915: LIST
2916: LIST
2917: PUSH
2918: LD_INT 21
2920: PUSH
2921: LD_INT 3
2923: PUSH
2924: EMPTY
2925: LIST
2926: LIST
2927: PUSH
2928: EMPTY
2929: LIST
2930: LIST
2931: PPUSH
2932: CALL_OW 69
2936: PUSH
2937: FOR_IN
2938: IFFALSE 2951
// RemoveUnit ( i ) ;
2940: LD_VAR 0 2
2944: PPUSH
2945: CALL_OW 64
2949: GO 2937
2951: POP
2952: POP
// uc_nation := 1 ;
2953: LD_ADDR_OWVAR 21
2957: PUSH
2958: LD_INT 1
2960: ST_TO_ADDR
// uc_side := 1 ;
2961: LD_ADDR_OWVAR 20
2965: PUSH
2966: LD_INT 1
2968: ST_TO_ADDR
// bc_level := 5 ;
2969: LD_ADDR_OWVAR 43
2973: PUSH
2974: LD_INT 5
2976: ST_TO_ADDR
// bc_type := b_depot ;
2977: LD_ADDR_OWVAR 42
2981: PUSH
2982: LD_INT 0
2984: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 50 , 22 , 0 ) ;
2985: LD_INT 50
2987: PPUSH
2988: LD_INT 22
2990: PPUSH
2991: LD_INT 0
2993: PPUSH
2994: CALL_OW 47
// bc_type = b_bunker ;
2998: LD_ADDR_OWVAR 42
3002: PUSH
3003: LD_INT 32
3005: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( 68 , 24 , 4 ) ;
3006: LD_ADDR_VAR 0 4
3010: PUSH
3011: LD_INT 68
3013: PPUSH
3014: LD_INT 24
3016: PPUSH
3017: LD_INT 4
3019: PPUSH
3020: CALL_OW 47
3024: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ rand ( 1 , 2 ) ] ) ;
3025: LD_VAR 0 4
3029: PPUSH
3030: LD_INT 4
3032: PUSH
3033: LD_INT 11
3035: PUSH
3036: EMPTY
3037: LIST
3038: LIST
3039: PUSH
3040: LD_INT 1
3042: PPUSH
3043: LD_INT 2
3045: PPUSH
3046: CALL_OW 12
3050: ARRAY
3051: PPUSH
3052: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 71 , 34 , 4 ) ;
3056: LD_ADDR_VAR 0 4
3060: PUSH
3061: LD_INT 71
3063: PPUSH
3064: LD_INT 34
3066: PPUSH
3067: LD_INT 4
3069: PPUSH
3070: CALL_OW 47
3074: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ rand ( 1 , 2 ) ] ) ;
3075: LD_VAR 0 4
3079: PPUSH
3080: LD_INT 4
3082: PUSH
3083: LD_INT 11
3085: PUSH
3086: EMPTY
3087: LIST
3088: LIST
3089: PUSH
3090: LD_INT 1
3092: PPUSH
3093: LD_INT 2
3095: PPUSH
3096: CALL_OW 12
3100: ARRAY
3101: PPUSH
3102: CALL_OW 431
// bc_type := b_breastwork ;
3106: LD_ADDR_OWVAR 42
3110: PUSH
3111: LD_INT 31
3113: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 51 , 7 , 3 ) ;
3114: LD_INT 51
3116: PPUSH
3117: LD_INT 7
3119: PPUSH
3120: LD_INT 3
3122: PPUSH
3123: CALL_OW 47
// bc_type := b_oil_mine ;
3127: LD_ADDR_OWVAR 42
3131: PUSH
3132: LD_INT 29
3134: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 68 , 40 , 1 ) ;
3135: LD_INT 68
3137: PPUSH
3138: LD_INT 40
3140: PPUSH
3141: LD_INT 1
3143: PPUSH
3144: CALL_OW 47
// bc_type := b_factory ;
3148: LD_ADDR_OWVAR 42
3152: PUSH
3153: LD_INT 3
3155: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 20 , 2 ) ;
3156: LD_INT 38
3158: PPUSH
3159: LD_INT 20
3161: PPUSH
3162: LD_INT 2
3164: PPUSH
3165: CALL_OW 47
// bc_type := b_ext_noncombat ;
3169: LD_ADDR_OWVAR 42
3173: PUSH
3174: LD_INT 19
3176: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 24 , 2 ) ;
3177: LD_INT 38
3179: PPUSH
3180: LD_INT 24
3182: PPUSH
3183: LD_INT 2
3185: PPUSH
3186: CALL_OW 47
// bc_type := b_ext_radar ;
3190: LD_ADDR_OWVAR 42
3194: PUSH
3195: LD_INT 20
3197: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 35 , 20 , 1 ) ;
3198: LD_INT 35
3200: PPUSH
3201: LD_INT 20
3203: PPUSH
3204: LD_INT 1
3206: PPUSH
3207: CALL_OW 47
// bc_type := b_armoury ;
3211: LD_ADDR_OWVAR 42
3215: PUSH
3216: LD_INT 4
3218: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 33 , 28 , 1 ) ;
3219: LD_INT 33
3221: PPUSH
3222: LD_INT 28
3224: PPUSH
3225: LD_INT 1
3227: PPUSH
3228: CALL_OW 47
// bc_type := b_solar_power ;
3232: LD_ADDR_OWVAR 42
3236: PUSH
3237: LD_INT 27
3239: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 46 , 12 , 1 ) ;
3240: LD_INT 46
3242: PPUSH
3243: LD_INT 12
3245: PPUSH
3246: LD_INT 1
3248: PPUSH
3249: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 48 , 11 , 2 ) ;
3253: LD_INT 48
3255: PPUSH
3256: LD_INT 11
3258: PPUSH
3259: LD_INT 2
3261: PPUSH
3262: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 35 , 12 , 3 ) ;
3266: LD_INT 35
3268: PPUSH
3269: LD_INT 12
3271: PPUSH
3272: LD_INT 3
3274: PPUSH
3275: CALL_OW 47
// bc_type := b_lab_half ;
3279: LD_ADDR_OWVAR 42
3283: PUSH
3284: LD_INT 7
3286: ST_TO_ADDR
// bc_kind1 := b_lab_opto ;
3287: LD_ADDR_OWVAR 44
3291: PUSH
3292: LD_INT 15
3294: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
3295: LD_ADDR_OWVAR 45
3299: PUSH
3300: LD_INT 9
3302: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 42 , 15 , 2 ) ;
3303: LD_INT 42
3305: PPUSH
3306: LD_INT 15
3308: PPUSH
3309: LD_INT 2
3311: PPUSH
3312: CALL_OW 47
// end ; end ; end_of_file
3316: LD_VAR 0 1
3320: RET
// export function Action ; var i , j , tmp ; begin
3321: LD_INT 0
3323: PPUSH
3324: PPUSH
3325: PPUSH
3326: PPUSH
// InGameOn ;
3327: CALL_OW 8
// if lab then
3331: LD_EXP 21
3335: IFFALSE 3352
// CenterNowOnUnits ( lab [ 1 ] ) else
3337: LD_EXP 21
3341: PUSH
3342: LD_INT 1
3344: ARRAY
3345: PPUSH
3346: CALL_OW 87
3350: GO 3361
// CenterOnUnits ( JMM ) ;
3352: LD_EXP 1
3356: PPUSH
3357: CALL_OW 85
// if IsOK ( Denis ) then
3361: LD_EXP 3
3365: PPUSH
3366: CALL_OW 302
3370: IFFALSE 3398
// begin SetTech ( tech_radar , 1 , state_researched ) ;
3372: LD_INT 6
3374: PPUSH
3375: LD_INT 1
3377: PPUSH
3378: LD_INT 2
3380: PPUSH
3381: CALL_OW 322
// SetRestrict ( b_ext_radar , 1 , true ) ;
3385: LD_INT 20
3387: PPUSH
3388: LD_INT 1
3390: PPUSH
3391: LD_INT 1
3393: PPUSH
3394: CALL_OW 324
// end ; CenterNowOnUnits ( JMM ) ;
3398: LD_EXP 1
3402: PPUSH
3403: CALL_OW 87
// ComTurnUnit ( JMM , DeltaDoctor ) ;
3407: LD_EXP 1
3411: PPUSH
3412: LD_EXP 16
3416: PPUSH
3417: CALL_OW 119
// repeat wait ( 0 0$1 ) ;
3421: LD_INT 35
3423: PPUSH
3424: CALL_OW 67
// ComMoveUnit ( DeltaDoctor , JMM ) ;
3428: LD_EXP 16
3432: PPUSH
3433: LD_EXP 1
3437: PPUSH
3438: CALL_OW 112
// until GetDistUnits ( JMM , DeltaDoctor ) < 5 ;
3442: LD_EXP 1
3446: PPUSH
3447: LD_EXP 16
3451: PPUSH
3452: CALL_OW 296
3456: PUSH
3457: LD_INT 5
3459: LESS
3460: IFFALSE 3421
// ComTurnUnit ( DeltaDoctor , JMM ) ;
3462: LD_EXP 16
3466: PPUSH
3467: LD_EXP 1
3471: PPUSH
3472: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
3476: LD_EXP 1
3480: PPUSH
3481: LD_STRING D1-JMM-1
3483: PPUSH
3484: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-1 ) ;
3488: LD_EXP 16
3492: PPUSH
3493: LD_STRING D1-Sci-1
3495: PPUSH
3496: CALL_OW 88
// ComEnterUnit ( [ JMM , DeltaDoctor , Denis ] , lab [ 1 ] ) ;
3500: LD_EXP 1
3504: PUSH
3505: LD_EXP 16
3509: PUSH
3510: LD_EXP 3
3514: PUSH
3515: EMPTY
3516: LIST
3517: LIST
3518: LIST
3519: PPUSH
3520: LD_EXP 21
3524: PUSH
3525: LD_INT 1
3527: ARRAY
3528: PPUSH
3529: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
3533: LD_INT 35
3535: PPUSH
3536: CALL_OW 67
// until IsInUnit ( JMM ) and IsInUnit ( DeltaDoctor ) ;
3540: LD_EXP 1
3544: PPUSH
3545: CALL_OW 310
3549: IFFALSE 3562
3551: PUSH
3552: LD_EXP 16
3556: PPUSH
3557: CALL_OW 310
3561: AND
3562: IFFALSE 3533
// CenterNowOnUnits ( lab [ 1 ] ) ;
3564: LD_EXP 21
3568: PUSH
3569: LD_INT 1
3571: ARRAY
3572: PPUSH
3573: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
3577: LD_EXP 1
3581: PPUSH
3582: LD_STRING D1-JMM-2
3584: PPUSH
3585: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-2 ) ;
3589: LD_EXP 16
3593: PPUSH
3594: LD_STRING D1-Sci-2
3596: PPUSH
3597: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
3601: LD_EXP 1
3605: PPUSH
3606: LD_STRING D1-JMM-3
3608: PPUSH
3609: CALL_OW 88
// if IsOK ( Denis ) then
3613: LD_EXP 3
3617: PPUSH
3618: CALL_OW 302
3622: IFFALSE 3638
// Say ( DeltaDoctor , D1-Sci-3 ) else
3624: LD_EXP 16
3628: PPUSH
3629: LD_STRING D1-Sci-3
3631: PPUSH
3632: CALL_OW 88
3636: GO 3650
// Say ( DeltaDoctor , D1-Sci-3a ) ;
3638: LD_EXP 16
3642: PPUSH
3643: LD_STRING D1-Sci-3a
3645: PPUSH
3646: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
3650: LD_EXP 1
3654: PPUSH
3655: LD_STRING D1-JMM-4
3657: PPUSH
3658: CALL_OW 88
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
3662: LD_ADDR_VAR 0 4
3666: PUSH
3667: LD_INT 22
3669: PUSH
3670: LD_INT 1
3672: PUSH
3673: EMPTY
3674: LIST
3675: LIST
3676: PUSH
3677: LD_INT 25
3679: PUSH
3680: LD_INT 4
3682: PUSH
3683: EMPTY
3684: LIST
3685: LIST
3686: PUSH
3687: LD_INT 3
3689: PUSH
3690: LD_INT 54
3692: PUSH
3693: EMPTY
3694: LIST
3695: PUSH
3696: EMPTY
3697: LIST
3698: LIST
3699: PUSH
3700: EMPTY
3701: LIST
3702: LIST
3703: LIST
3704: PPUSH
3705: CALL_OW 69
3709: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 0 ] ) do
3710: LD_ADDR_VAR 0 2
3714: PUSH
3715: LD_INT 22
3717: PUSH
3718: LD_INT 0
3720: PUSH
3721: EMPTY
3722: LIST
3723: LIST
3724: PPUSH
3725: CALL_OW 69
3729: PUSH
3730: FOR_IN
3731: IFFALSE 3781
// for j in tmp do
3733: LD_ADDR_VAR 0 3
3737: PUSH
3738: LD_VAR 0 4
3742: PUSH
3743: FOR_IN
3744: IFFALSE 3777
// AddComTameXY ( j , GetX ( i ) , GetY ( i ) ) ;
3746: LD_VAR 0 3
3750: PPUSH
3751: LD_VAR 0 2
3755: PPUSH
3756: CALL_OW 250
3760: PPUSH
3761: LD_VAR 0 2
3765: PPUSH
3766: CALL_OW 251
3770: PPUSH
3771: CALL_OW 191
3775: GO 3743
3777: POP
3778: POP
3779: GO 3730
3781: POP
3782: POP
// Say ( DeltaDoctor , D1-Sci-4 ) ;
3783: LD_EXP 16
3787: PPUSH
3788: LD_STRING D1-Sci-4
3790: PPUSH
3791: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
3795: LD_EXP 1
3799: PPUSH
3800: LD_STRING D1-JMM-5
3802: PPUSH
3803: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-5 ) ;
3807: LD_EXP 16
3811: PPUSH
3812: LD_STRING D1-Sci-5
3814: PPUSH
3815: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
3819: LD_EXP 1
3823: PPUSH
3824: LD_STRING D1-JMM-6
3826: PPUSH
3827: CALL_OW 88
// SayRadio ( Harisson , D1-Har-6 ) ;
3831: LD_EXP 17
3835: PPUSH
3836: LD_STRING D1-Har-6
3838: PPUSH
3839: CALL_OW 94
// Say ( JMM , D1-JMM-7 ) ;
3843: LD_EXP 1
3847: PPUSH
3848: LD_STRING D1-JMM-7
3850: PPUSH
3851: CALL_OW 88
// SayRadio ( Harisson , D1-Har-7 ) ;
3855: LD_EXP 17
3859: PPUSH
3860: LD_STRING D1-Har-7
3862: PPUSH
3863: CALL_OW 94
// if IsOK ( Denis ) then
3867: LD_EXP 3
3871: PPUSH
3872: CALL_OW 302
3876: IFFALSE 3890
// Say ( JMM , D1-JMM-8 ) ;
3878: LD_EXP 1
3882: PPUSH
3883: LD_STRING D1-JMM-8
3885: PPUSH
3886: CALL_OW 88
// Say ( JMM , D1-JMM-8a ) ;
3890: LD_EXP 1
3894: PPUSH
3895: LD_STRING D1-JMM-8a
3897: PPUSH
3898: CALL_OW 88
// SayRadio ( Harisson , D1-Har-8 ) ;
3902: LD_EXP 17
3906: PPUSH
3907: LD_STRING D1-Har-8
3909: PPUSH
3910: CALL_OW 94
// Say ( JMM , D1-JMM-9 ) ;
3914: LD_EXP 1
3918: PPUSH
3919: LD_STRING D1-JMM-9
3921: PPUSH
3922: CALL_OW 88
// SayRadio ( Harisson , D1-Har-9 ) ;
3926: LD_EXP 17
3930: PPUSH
3931: LD_STRING D1-Har-9
3933: PPUSH
3934: CALL_OW 94
// Say ( JMM , D1-JMM-10 ) ;
3938: LD_EXP 1
3942: PPUSH
3943: LD_STRING D1-JMM-10
3945: PPUSH
3946: CALL_OW 88
// if IsOK ( Denis ) then
3950: LD_EXP 3
3954: PPUSH
3955: CALL_OW 302
3959: IFFALSE 3973
// Say ( JMM , D1-JMM-10a ) ;
3961: LD_EXP 1
3965: PPUSH
3966: LD_STRING D1-JMM-10a
3968: PPUSH
3969: CALL_OW 88
// SelectDeltaCharacters ;
3973: CALL 4457 0 0
// SetResourceType ( GetBase ( lab [ 1 ] ) , 1 , 150 ) ;
3977: LD_EXP 21
3981: PUSH
3982: LD_INT 1
3984: ARRAY
3985: PPUSH
3986: CALL_OW 274
3990: PPUSH
3991: LD_INT 1
3993: PPUSH
3994: LD_INT 150
3996: PPUSH
3997: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) then
4001: LD_INT 22
4003: PUSH
4004: LD_INT 1
4006: PUSH
4007: EMPTY
4008: LIST
4009: LIST
4010: PUSH
4011: LD_INT 30
4013: PUSH
4014: LD_INT 29
4016: PUSH
4017: EMPTY
4018: LIST
4019: LIST
4020: PUSH
4021: EMPTY
4022: LIST
4023: LIST
4024: PPUSH
4025: CALL_OW 69
4029: IFFALSE 4055
// SetResourceType ( GetBase ( lab [ 1 ] ) , 2 , 300 ) ;
4031: LD_EXP 21
4035: PUSH
4036: LD_INT 1
4038: ARRAY
4039: PPUSH
4040: CALL_OW 274
4044: PPUSH
4045: LD_INT 2
4047: PPUSH
4048: LD_INT 300
4050: PPUSH
4051: CALL_OW 277
// InGameOff ;
4055: CALL_OW 9
// Query ( Q1 ) ;
4059: LD_STRING Q1
4061: PPUSH
4062: CALL_OW 97
// SetAreaMapShow ( ExitArea , 1 ) ;
4066: LD_INT 3
4068: PPUSH
4069: LD_INT 1
4071: PPUSH
4072: CALL_OW 424
// if IsInUnit ( JMM ) then
4076: LD_EXP 1
4080: PPUSH
4081: CALL_OW 310
4085: IFFALSE 4096
// ComExitBuilding ( JMM ) ;
4087: LD_EXP 1
4091: PPUSH
4092: CALL_OW 122
// end ;
4096: LD_VAR 0 1
4100: RET
// every 0 0$1 trigger FilterUnitsExceptArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do var i , cargoType ;
4101: LD_INT 3
4103: PPUSH
4104: LD_INT 22
4106: PUSH
4107: LD_INT 1
4109: PUSH
4110: EMPTY
4111: LIST
4112: LIST
4113: PUSH
4114: LD_INT 21
4116: PUSH
4117: LD_INT 1
4119: PUSH
4120: EMPTY
4121: LIST
4122: LIST
4123: PUSH
4124: EMPTY
4125: LIST
4126: LIST
4127: PPUSH
4128: CALL_OW 71
4132: PUSH
4133: LD_INT 0
4135: EQUAL
4136: IFFALSE 4454
4138: GO 4140
4140: DISABLE
4141: LD_INT 0
4143: PPUSH
4144: PPUSH
// begin SaveDeltaCharacters ;
4145: CALL 4829 0 0
// if FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) then
4149: LD_INT 3
4151: PPUSH
4152: LD_INT 21
4154: PUSH
4155: LD_INT 2
4157: PUSH
4158: EMPTY
4159: LIST
4160: LIST
4161: PUSH
4162: LD_INT 3
4164: PUSH
4165: LD_INT 58
4167: PUSH
4168: EMPTY
4169: LIST
4170: PUSH
4171: EMPTY
4172: LIST
4173: LIST
4174: PUSH
4175: EMPTY
4176: LIST
4177: LIST
4178: PPUSH
4179: CALL_OW 70
4183: IFFALSE 4440
// begin for i in FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) do
4185: LD_ADDR_VAR 0 1
4189: PUSH
4190: LD_INT 3
4192: PPUSH
4193: LD_INT 21
4195: PUSH
4196: LD_INT 2
4198: PUSH
4199: EMPTY
4200: LIST
4201: LIST
4202: PUSH
4203: LD_INT 3
4205: PUSH
4206: LD_INT 58
4208: PUSH
4209: EMPTY
4210: LIST
4211: PUSH
4212: EMPTY
4213: LIST
4214: LIST
4215: PUSH
4216: EMPTY
4217: LIST
4218: LIST
4219: PPUSH
4220: CALL_OW 70
4224: PUSH
4225: FOR_IN
4226: IFFALSE 4438
// begin cargoType := GetCargoType ( i ) ;
4228: LD_ADDR_VAR 0 2
4232: PUSH
4233: LD_VAR 0 1
4237: PPUSH
4238: CALL_OW 288
4242: ST_TO_ADDR
// if GetWeapon ( i ) = us_cargo_bay then
4243: LD_VAR 0 1
4247: PPUSH
4248: CALL_OW 264
4252: PUSH
4253: LD_INT 12
4255: EQUAL
4256: IFFALSE 4353
// yourVehicles := yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , cargoType , GetCargo ( i , cargoType ) ] ] else
4258: LD_ADDR_EXP 15
4262: PUSH
4263: LD_EXP 15
4267: PUSH
4268: LD_VAR 0 1
4272: PPUSH
4273: CALL_OW 248
4277: PUSH
4278: LD_VAR 0 1
4282: PPUSH
4283: CALL_OW 265
4287: PUSH
4288: LD_VAR 0 1
4292: PPUSH
4293: CALL_OW 262
4297: PUSH
4298: LD_VAR 0 1
4302: PPUSH
4303: CALL_OW 263
4307: PUSH
4308: LD_VAR 0 1
4312: PPUSH
4313: CALL_OW 264
4317: PUSH
4318: LD_VAR 0 2
4322: PUSH
4323: LD_VAR 0 1
4327: PPUSH
4328: LD_VAR 0 2
4332: PPUSH
4333: CALL_OW 289
4337: PUSH
4338: EMPTY
4339: LIST
4340: LIST
4341: LIST
4342: LIST
4343: LIST
4344: LIST
4345: LIST
4346: PUSH
4347: EMPTY
4348: LIST
4349: ADD
4350: ST_TO_ADDR
4351: GO 4424
// yourVehicles := yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ] ;
4353: LD_ADDR_EXP 15
4357: PUSH
4358: LD_EXP 15
4362: PUSH
4363: LD_VAR 0 1
4367: PPUSH
4368: CALL_OW 248
4372: PUSH
4373: LD_VAR 0 1
4377: PPUSH
4378: CALL_OW 265
4382: PUSH
4383: LD_VAR 0 1
4387: PPUSH
4388: CALL_OW 262
4392: PUSH
4393: LD_VAR 0 1
4397: PPUSH
4398: CALL_OW 263
4402: PUSH
4403: LD_VAR 0 1
4407: PPUSH
4408: CALL_OW 264
4412: PUSH
4413: EMPTY
4414: LIST
4415: LIST
4416: LIST
4417: LIST
4418: LIST
4419: PUSH
4420: EMPTY
4421: LIST
4422: ADD
4423: ST_TO_ADDR
// SaveVariable ( yourVehicles , 06_VehiclesIn06_1 ) ;
4424: LD_EXP 15
4428: PPUSH
4429: LD_STRING 06_VehiclesIn06_1
4431: PPUSH
4432: CALL_OW 39
// end ;
4436: GO 4225
4438: POP
4439: POP
// end ; SaveCargos ;
4440: CALL 5711 0 0
// ChangeMap ( 6 , %_cont ) ;
4444: LD_INT 6
4446: PPUSH
4447: LD_STRING %_cont
4449: PPUSH
4450: CALL_OW 340
// end ; end_of_file
4454: PPOPN 2
4456: END
// export function SelectDeltaCharacters ; var i , yourPeople ; begin
4457: LD_INT 0
4459: PPUSH
4460: PPUSH
4461: PPUSH
// selectedPeople := [ ] ;
4462: LD_ADDR_EXP 18
4466: PUSH
4467: EMPTY
4468: ST_TO_ADDR
// yourPeople := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , DeltaDoctor , Denis ] ;
4469: LD_ADDR_VAR 0 3
4473: PUSH
4474: LD_INT 22
4476: PUSH
4477: LD_INT 1
4479: PUSH
4480: EMPTY
4481: LIST
4482: LIST
4483: PUSH
4484: LD_INT 21
4486: PUSH
4487: LD_INT 1
4489: PUSH
4490: EMPTY
4491: LIST
4492: LIST
4493: PUSH
4494: LD_INT 2
4496: PUSH
4497: LD_INT 25
4499: PUSH
4500: LD_INT 1
4502: PUSH
4503: EMPTY
4504: LIST
4505: LIST
4506: PUSH
4507: LD_INT 25
4509: PUSH
4510: LD_INT 2
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: PUSH
4517: LD_INT 25
4519: PUSH
4520: LD_INT 3
4522: PUSH
4523: EMPTY
4524: LIST
4525: LIST
4526: PUSH
4527: LD_INT 25
4529: PUSH
4530: LD_INT 4
4532: PUSH
4533: EMPTY
4534: LIST
4535: LIST
4536: PUSH
4537: EMPTY
4538: LIST
4539: LIST
4540: LIST
4541: LIST
4542: LIST
4543: PUSH
4544: EMPTY
4545: LIST
4546: LIST
4547: LIST
4548: PPUSH
4549: CALL_OW 69
4553: PUSH
4554: LD_EXP 1
4558: PUSH
4559: LD_EXP 16
4563: PUSH
4564: LD_EXP 3
4568: PUSH
4569: EMPTY
4570: LIST
4571: LIST
4572: LIST
4573: DIFF
4574: ST_TO_ADDR
// selectedPeople := CharacterSelection ( text , 5 , 5 , [ sel_change_class , JMM , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ yourPeople ^ [ sel_dont_change_class , sel_not_changeable , Denis , DeltaDoctor ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
4575: LD_ADDR_EXP 18
4579: PUSH
4580: LD_STRING text
4582: PPUSH
4583: LD_INT 5
4585: PPUSH
4586: LD_INT 5
4588: PPUSH
4589: LD_INT -5
4591: PUSH
4592: LD_EXP 1
4596: PUSH
4597: LD_INT -6
4599: PUSH
4600: LD_INT -2
4602: PUSH
4603: LD_INT -3
4605: PUSH
4606: LD_INT -5
4608: PUSH
4609: EMPTY
4610: LIST
4611: LIST
4612: LIST
4613: LIST
4614: LIST
4615: LIST
4616: PUSH
4617: LD_VAR 0 3
4621: ADD
4622: PUSH
4623: LD_INT -6
4625: PUSH
4626: LD_INT -4
4628: PUSH
4629: LD_EXP 3
4633: PUSH
4634: LD_EXP 16
4638: PUSH
4639: EMPTY
4640: LIST
4641: LIST
4642: LIST
4643: LIST
4644: ADD
4645: PPUSH
4646: LD_INT 1
4648: PUSH
4649: LD_INT 3
4651: PUSH
4652: LD_INT 2
4654: PUSH
4655: LD_INT 1
4657: PUSH
4658: EMPTY
4659: LIST
4660: LIST
4661: PUSH
4662: LD_INT 4
4664: PUSH
4665: EMPTY
4666: LIST
4667: LIST
4668: LIST
4669: LIST
4670: PPUSH
4671: CALL_OW 42
4675: ST_TO_ADDR
// ComStop ( selectedPeople ) ;
4676: LD_EXP 18
4680: PPUSH
4681: CALL_OW 141
// SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 4 ) ;
4685: LD_INT 22
4687: PUSH
4688: LD_INT 1
4690: PUSH
4691: EMPTY
4692: LIST
4693: LIST
4694: PUSH
4695: LD_INT 21
4697: PUSH
4698: LD_INT 1
4700: PUSH
4701: EMPTY
4702: LIST
4703: LIST
4704: PUSH
4705: EMPTY
4706: LIST
4707: LIST
4708: PPUSH
4709: CALL_OW 69
4713: PPUSH
4714: LD_INT 4
4716: PPUSH
4717: CALL_OW 235
// for i in selectedPeople do
4721: LD_ADDR_VAR 0 2
4725: PUSH
4726: LD_EXP 18
4730: PUSH
4731: FOR_IN
4732: IFFALSE 4748
// SetSide ( i , 1 ) ;
4734: LD_VAR 0 2
4738: PPUSH
4739: LD_INT 1
4741: PPUSH
4742: CALL_OW 235
4746: GO 4731
4748: POP
4749: POP
// for i in yourApemans do
4750: LD_ADDR_VAR 0 2
4754: PUSH
4755: LD_EXP 14
4759: PUSH
4760: FOR_IN
4761: IFFALSE 4777
// SetSide ( i , 1 ) ;
4763: LD_VAR 0 2
4767: PPUSH
4768: LD_INT 1
4770: PPUSH
4771: CALL_OW 235
4775: GO 4760
4777: POP
4778: POP
// if Mike then
4779: LD_EXP 10
4783: IFFALSE 4797
// SetSide ( Mike , 1 ) ;
4785: LD_EXP 10
4789: PPUSH
4790: LD_INT 1
4792: PPUSH
4793: CALL_OW 235
// SetSide ( JMM , 1 ) ;
4797: LD_EXP 1
4801: PPUSH
4802: LD_INT 1
4804: PPUSH
4805: CALL_OW 235
// SetSkill ( yourApemans , 2 , 3 ) ;
4809: LD_EXP 14
4813: PPUSH
4814: LD_INT 2
4816: PPUSH
4817: LD_INT 3
4819: PPUSH
4820: CALL_OW 237
// end ;
4824: LD_VAR 0 1
4828: RET
// export function SaveDeltaCharacters ; begin
4829: LD_INT 0
4831: PPUSH
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
4832: LD_EXP 1
4836: PPUSH
4837: LD_EXP 23
4841: PUSH
4842: LD_STRING JMM
4844: STR
4845: PPUSH
4846: CALL_OW 38
// SaveCharacters ( DeltaDoctor , DeltaDoctor ) ;
4850: LD_EXP 16
4854: PPUSH
4855: LD_STRING DeltaDoctor
4857: PPUSH
4858: CALL_OW 38
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
4862: LD_EXP 3
4866: PPUSH
4867: LD_EXP 23
4871: PUSH
4872: LD_STRING Denis
4874: STR
4875: PPUSH
4876: CALL_OW 38
// if Lisa in selectedPeople then
4880: LD_EXP 4
4884: PUSH
4885: LD_EXP 18
4889: IN
4890: IFFALSE 4935
// begin SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
4892: LD_EXP 4
4896: PPUSH
4897: LD_EXP 23
4901: PUSH
4902: LD_STRING Lisa
4904: STR
4905: PPUSH
4906: CALL_OW 38
// DeleteCharacters ( mission_prefix_prev & Lisa ) ;
4910: LD_EXP 24
4914: PUSH
4915: LD_STRING Lisa
4917: STR
4918: PPUSH
4919: CALL_OW 40
// SaveVariable ( 1 , LisaIn06 ) ;
4923: LD_INT 1
4925: PPUSH
4926: LD_STRING LisaIn06
4928: PPUSH
4929: CALL_OW 39
// end else
4933: GO 4956
// if IsOk ( Lisa ) then
4935: LD_EXP 4
4939: PPUSH
4940: CALL_OW 302
4944: IFFALSE 4956
// SaveVariable ( 1 , LisaStayInDelta ) ;
4946: LD_INT 1
4948: PPUSH
4949: LD_STRING LisaStayInDelta
4951: PPUSH
4952: CALL_OW 39
// if Bobby in selectedPeople then
4956: LD_EXP 6
4960: PUSH
4961: LD_EXP 18
4965: IN
4966: IFFALSE 5011
// begin SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
4968: LD_EXP 6
4972: PPUSH
4973: LD_EXP 23
4977: PUSH
4978: LD_STRING Bobby
4980: STR
4981: PPUSH
4982: CALL_OW 38
// DeleteCharacters ( mission_prefix_prev & Bobby ) ;
4986: LD_EXP 24
4990: PUSH
4991: LD_STRING Bobby
4993: STR
4994: PPUSH
4995: CALL_OW 40
// SaveVariable ( 1 , BobbyIn06 ) ;
4999: LD_INT 1
5001: PPUSH
5002: LD_STRING BobbyIn06
5004: PPUSH
5005: CALL_OW 39
// end else
5009: GO 5032
// if IsOk ( Bobby ) then
5011: LD_EXP 6
5015: PPUSH
5016: CALL_OW 302
5020: IFFALSE 5032
// SaveVariable ( 1 , BobbyStayInDelta ) ;
5022: LD_INT 1
5024: PPUSH
5025: LD_STRING BobbyStayInDelta
5027: PPUSH
5028: CALL_OW 39
// if Cyrus in selectedPeople then
5032: LD_EXP 7
5036: PUSH
5037: LD_EXP 18
5041: IN
5042: IFFALSE 5087
// begin SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
5044: LD_EXP 7
5048: PPUSH
5049: LD_EXP 23
5053: PUSH
5054: LD_STRING Cyrus
5056: STR
5057: PPUSH
5058: CALL_OW 38
// DeleteCharacters ( mission_prefix_prev & Cyrus ) ;
5062: LD_EXP 24
5066: PUSH
5067: LD_STRING Cyrus
5069: STR
5070: PPUSH
5071: CALL_OW 40
// SaveVariable ( 1 , CyrusIn06 ) ;
5075: LD_INT 1
5077: PPUSH
5078: LD_STRING CyrusIn06
5080: PPUSH
5081: CALL_OW 39
// end else
5085: GO 5108
// if IsOk ( Cyrus ) then
5087: LD_EXP 7
5091: PPUSH
5092: CALL_OW 302
5096: IFFALSE 5108
// SaveVariable ( 1 , CyrusStayInDelta ) ;
5098: LD_INT 1
5100: PPUSH
5101: LD_STRING CyrusStayInDelta
5103: PPUSH
5104: CALL_OW 39
// if Frank in selectedPeople then
5108: LD_EXP 5
5112: PUSH
5113: LD_EXP 18
5117: IN
5118: IFFALSE 5163
// begin SaveCharacters ( Frank , mission_prefix & Frank ) ;
5120: LD_EXP 5
5124: PPUSH
5125: LD_EXP 23
5129: PUSH
5130: LD_STRING Frank
5132: STR
5133: PPUSH
5134: CALL_OW 38
// DeleteCharacters ( mission_prefix_prev & Frank ) ;
5138: LD_EXP 24
5142: PUSH
5143: LD_STRING Frank
5145: STR
5146: PPUSH
5147: CALL_OW 40
// SaveVariable ( 1 , FrankIn06 ) ;
5151: LD_INT 1
5153: PPUSH
5154: LD_STRING FrankIn06
5156: PPUSH
5157: CALL_OW 39
// end else
5161: GO 5184
// if IsOk ( Frank ) then
5163: LD_EXP 5
5167: PPUSH
5168: CALL_OW 302
5172: IFFALSE 5184
// SaveVariable ( 1 , FrankStayInDelta ) ;
5174: LD_INT 1
5176: PPUSH
5177: LD_STRING FrankStayInDelta
5179: PPUSH
5180: CALL_OW 39
// if Brown in selectedPeople then
5184: LD_EXP 8
5188: PUSH
5189: LD_EXP 18
5193: IN
5194: IFFALSE 5239
// begin SaveCharacters ( Brown , mission_prefix & Brown ) ;
5196: LD_EXP 8
5200: PPUSH
5201: LD_EXP 23
5205: PUSH
5206: LD_STRING Brown
5208: STR
5209: PPUSH
5210: CALL_OW 38
// DeleteCharacters ( mission_prefix_prev & Brown ) ;
5214: LD_EXP 24
5218: PUSH
5219: LD_STRING Brown
5221: STR
5222: PPUSH
5223: CALL_OW 40
// SaveVariable ( 1 , BrownIn06 ) ;
5227: LD_INT 1
5229: PPUSH
5230: LD_STRING BrownIn06
5232: PPUSH
5233: CALL_OW 39
// end else
5237: GO 5260
// if IsOk ( Brown ) then
5239: LD_EXP 8
5243: PPUSH
5244: CALL_OW 302
5248: IFFALSE 5260
// SaveVariable ( 1 , BrownStayInDelta ) ;
5250: LD_INT 1
5252: PPUSH
5253: LD_STRING BrownStayInDelta
5255: PPUSH
5256: CALL_OW 39
// if Donaldson in selectedPeople then
5260: LD_EXP 9
5264: PUSH
5265: LD_EXP 18
5269: IN
5270: IFFALSE 5315
// begin SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
5272: LD_EXP 9
5276: PPUSH
5277: LD_EXP 23
5281: PUSH
5282: LD_STRING Donaldson
5284: STR
5285: PPUSH
5286: CALL_OW 38
// DeleteCharacters ( mission_prefix_prev & Donaldson ) ;
5290: LD_EXP 24
5294: PUSH
5295: LD_STRING Donaldson
5297: STR
5298: PPUSH
5299: CALL_OW 40
// SaveVariable ( 1 , DonaldsonIn06 ) ;
5303: LD_INT 1
5305: PPUSH
5306: LD_STRING DonaldsonIn06
5308: PPUSH
5309: CALL_OW 39
// end else
5313: GO 5336
// if IsOk ( Donaldson ) then
5315: LD_EXP 9
5319: PPUSH
5320: CALL_OW 302
5324: IFFALSE 5336
// SaveVariable ( 1 , DonaldsonStayInDelta ) ;
5326: LD_INT 1
5328: PPUSH
5329: LD_STRING DonaldsonStayInDelta
5331: PPUSH
5332: CALL_OW 39
// if Gladstone in selectedPeople then
5336: LD_EXP 2
5340: PUSH
5341: LD_EXP 18
5345: IN
5346: IFFALSE 5391
// begin SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
5348: LD_EXP 2
5352: PPUSH
5353: LD_EXP 23
5357: PUSH
5358: LD_STRING Gladstone
5360: STR
5361: PPUSH
5362: CALL_OW 38
// DeleteCharacters ( mission_prefix_prev & Gladstone ) ;
5366: LD_EXP 24
5370: PUSH
5371: LD_STRING Gladstone
5373: STR
5374: PPUSH
5375: CALL_OW 40
// SaveVariable ( 1 , GladstoneIn06 ) ;
5379: LD_INT 1
5381: PPUSH
5382: LD_STRING GladstoneIn06
5384: PPUSH
5385: CALL_OW 39
// end else
5389: GO 5412
// if IsOk ( Gladstone ) then
5391: LD_EXP 2
5395: PPUSH
5396: CALL_OW 302
5400: IFFALSE 5412
// SaveVariable ( 1 , GladstoneStayInDelta ) ;
5402: LD_INT 1
5404: PPUSH
5405: LD_STRING GladstoneStayInDelta
5407: PPUSH
5408: CALL_OW 39
// if Mike then
5412: LD_EXP 10
5416: IFFALSE 5436
// SaveCharacters ( Mike , mission_prefix & Mike ) ;
5418: LD_EXP 10
5422: PPUSH
5423: LD_EXP 23
5427: PUSH
5428: LD_STRING Mike
5430: STR
5431: PPUSH
5432: CALL_OW 38
// selectedPeople := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ;
5436: LD_ADDR_EXP 18
5440: PUSH
5441: LD_INT 22
5443: PUSH
5444: LD_INT 1
5446: PUSH
5447: EMPTY
5448: LIST
5449: LIST
5450: PUSH
5451: LD_INT 23
5453: PUSH
5454: LD_INT 1
5456: PUSH
5457: EMPTY
5458: LIST
5459: LIST
5460: PUSH
5461: LD_INT 21
5463: PUSH
5464: LD_INT 1
5466: PUSH
5467: EMPTY
5468: LIST
5469: LIST
5470: PUSH
5471: EMPTY
5472: LIST
5473: LIST
5474: LIST
5475: PPUSH
5476: CALL_OW 69
5480: ST_TO_ADDR
// SaveCharacters ( yourApemans , ApeIn06 ) ;
5481: LD_EXP 14
5485: PPUSH
5486: LD_STRING ApeIn06
5488: PPUSH
5489: CALL_OW 38
// SaveCharacters ( selectedPeople diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis ] , OthersIn06 ) ;
5493: LD_EXP 18
5497: PUSH
5498: LD_EXP 1
5502: PUSH
5503: LD_EXP 4
5507: PUSH
5508: LD_EXP 6
5512: PUSH
5513: LD_EXP 7
5517: PUSH
5518: LD_EXP 5
5522: PUSH
5523: LD_EXP 8
5527: PUSH
5528: LD_EXP 9
5532: PUSH
5533: LD_EXP 2
5537: PUSH
5538: LD_EXP 3
5542: PUSH
5543: EMPTY
5544: LIST
5545: LIST
5546: LIST
5547: LIST
5548: LIST
5549: LIST
5550: LIST
5551: LIST
5552: LIST
5553: DIFF
5554: PPUSH
5555: LD_STRING OthersIn06
5557: PPUSH
5558: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_nation , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ DeltaDoctor , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis ] , OthersStayInDelta ) ;
5562: LD_INT 22
5564: PUSH
5565: LD_INT 4
5567: PUSH
5568: EMPTY
5569: LIST
5570: LIST
5571: PUSH
5572: LD_INT 23
5574: PUSH
5575: LD_INT 1
5577: PUSH
5578: EMPTY
5579: LIST
5580: LIST
5581: PUSH
5582: LD_INT 2
5584: PUSH
5585: LD_INT 25
5587: PUSH
5588: LD_INT 1
5590: PUSH
5591: EMPTY
5592: LIST
5593: LIST
5594: PUSH
5595: LD_INT 25
5597: PUSH
5598: LD_INT 2
5600: PUSH
5601: EMPTY
5602: LIST
5603: LIST
5604: PUSH
5605: LD_INT 25
5607: PUSH
5608: LD_INT 3
5610: PUSH
5611: EMPTY
5612: LIST
5613: LIST
5614: PUSH
5615: LD_INT 25
5617: PUSH
5618: LD_INT 4
5620: PUSH
5621: EMPTY
5622: LIST
5623: LIST
5624: PUSH
5625: EMPTY
5626: LIST
5627: LIST
5628: LIST
5629: LIST
5630: LIST
5631: PUSH
5632: EMPTY
5633: LIST
5634: LIST
5635: LIST
5636: PPUSH
5637: CALL_OW 69
5641: PUSH
5642: LD_EXP 16
5646: PUSH
5647: LD_EXP 4
5651: PUSH
5652: LD_EXP 6
5656: PUSH
5657: LD_EXP 7
5661: PUSH
5662: LD_EXP 5
5666: PUSH
5667: LD_EXP 8
5671: PUSH
5672: LD_EXP 9
5676: PUSH
5677: LD_EXP 2
5681: PUSH
5682: LD_EXP 3
5686: PUSH
5687: EMPTY
5688: LIST
5689: LIST
5690: LIST
5691: LIST
5692: LIST
5693: LIST
5694: LIST
5695: LIST
5696: LIST
5697: DIFF
5698: PPUSH
5699: LD_STRING OthersStayInDelta
5701: PPUSH
5702: CALL_OW 38
// end ;
5706: LD_VAR 0 1
5710: RET
// export function SaveCargos ; var i ; begin
5711: LD_INT 0
5713: PPUSH
5714: PPUSH
// for i in FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) do
5715: LD_ADDR_VAR 0 2
5719: PUSH
5720: LD_INT 3
5722: PPUSH
5723: LD_INT 22
5725: PUSH
5726: LD_INT 1
5728: PUSH
5729: EMPTY
5730: LIST
5731: LIST
5732: PUSH
5733: LD_INT 34
5735: PUSH
5736: LD_INT 12
5738: PUSH
5739: EMPTY
5740: LIST
5741: LIST
5742: PUSH
5743: EMPTY
5744: LIST
5745: LIST
5746: PPUSH
5747: CALL_OW 70
5751: PUSH
5752: FOR_IN
5753: IFFALSE 5781
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
5755: LD_ADDR_EXP 22
5759: PUSH
5760: LD_EXP 22
5764: PUSH
5765: LD_VAR 0 2
5769: PPUSH
5770: CALL 70170 0 1
5774: PUSH
5775: EMPTY
5776: LIST
5777: ADD
5778: ST_TO_ADDR
5779: GO 5752
5781: POP
5782: POP
// SaveVariable ( resources , 06_ResourcesInCargo06_1 ) ;
5783: LD_EXP 22
5787: PPUSH
5788: LD_STRING 06_ResourcesInCargo06_1
5790: PPUSH
5791: CALL_OW 39
// end ; end_of_file
5795: LD_VAR 0 1
5799: RET
// on Command ( comandid ) do var i ;
5800: LD_INT 0
5802: PPUSH
// begin if comandid = 65 then
5803: LD_VAR 0 1
5807: PUSH
5808: LD_INT 65
5810: EQUAL
5811: IFFALSE 5852
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
5813: LD_ADDR_VAR 0 2
5817: PUSH
5818: LD_INT 22
5820: PUSH
5821: LD_INT 1
5823: PUSH
5824: EMPTY
5825: LIST
5826: LIST
5827: PUSH
5828: EMPTY
5829: LIST
5830: PPUSH
5831: CALL_OW 69
5835: PUSH
5836: FOR_IN
5837: IFFALSE 5850
// ComStop ( i ) ;
5839: LD_VAR 0 2
5843: PPUSH
5844: CALL_OW 141
5848: GO 5836
5850: POP
5851: POP
// end ;
5852: PPOPN 2
5854: END
// on ApemanTamed ( apeman , human ) do var tmp ;
5855: LD_INT 0
5857: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
5858: LD_ADDR_VAR 0 3
5862: PUSH
5863: LD_INT 22
5865: PUSH
5866: LD_INT 1
5868: PUSH
5869: EMPTY
5870: LIST
5871: LIST
5872: PUSH
5873: LD_INT 21
5875: PUSH
5876: LD_INT 3
5878: PUSH
5879: EMPTY
5880: LIST
5881: LIST
5882: PUSH
5883: LD_INT 30
5885: PUSH
5886: LD_INT 0
5888: PUSH
5889: EMPTY
5890: LIST
5891: LIST
5892: PUSH
5893: EMPTY
5894: LIST
5895: LIST
5896: LIST
5897: PPUSH
5898: CALL_OW 69
5902: ST_TO_ADDR
// if not tmp then
5903: LD_VAR 0 3
5907: NOT
5908: IFFALSE 5912
// exit ;
5910: GO 5942
// ComEnterUnit ( apeman , tmp [ 1 ] ) ;
5912: LD_VAR 0 1
5916: PPUSH
5917: LD_VAR 0 3
5921: PUSH
5922: LD_INT 1
5924: ARRAY
5925: PPUSH
5926: CALL_OW 120
// SetSide ( apeman , 4 ) ;
5930: LD_VAR 0 1
5934: PPUSH
5935: LD_INT 4
5937: PPUSH
5938: CALL_OW 235
// end ;
5942: PPOPN 3
5944: END
// on UnitDestroyed ( un ) do begin if un = JMM then
5945: LD_VAR 0 1
5949: PUSH
5950: LD_EXP 1
5954: EQUAL
5955: IFFALSE 5964
// YouLost ( JMM ) ;
5957: LD_STRING JMM
5959: PPUSH
5960: CALL_OW 104
// SOS_UnitDestroyed ( un ) ;
5964: LD_VAR 0 1
5968: PPUSH
5969: CALL 22072 0 1
// end ;
5973: PPOPN 1
5975: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
5976: LD_VAR 0 1
5980: PPUSH
5981: LD_VAR 0 2
5985: PPUSH
5986: CALL 22130 0 2
// end ; end_of_file
5990: PPOPN 2
5992: END
// export globalGameSaveCounter ; every 0 0$1 do
5993: GO 5995
5995: DISABLE
// begin enable ;
5996: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
5997: LD_STRING updateTimer(
5999: PUSH
6000: LD_OWVAR 1
6004: STR
6005: PUSH
6006: LD_STRING );
6008: STR
6009: PPUSH
6010: CALL_OW 559
// end ;
6014: END
// every 0 0$1 do
6015: GO 6017
6017: DISABLE
// begin globalGameSaveCounter := 0 ;
6018: LD_ADDR_EXP 25
6022: PUSH
6023: LD_INT 0
6025: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
6026: LD_STRING setGameSaveCounter(0)
6028: PPUSH
6029: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
6033: LD_STRING initStreamRollete();
6035: PPUSH
6036: CALL_OW 559
// InitStreamMode ;
6040: CALL 7385 0 0
// DefineStreamItems ( false ) ;
6044: LD_INT 0
6046: PPUSH
6047: CALL 7849 0 1
// end ;
6051: END
// export function SOS_MapStart ( ) ; begin
6052: LD_INT 0
6054: PPUSH
// if streamModeActive then
6055: LD_EXP 26
6059: IFFALSE 6068
// DefineStreamItems ( true ) ;
6061: LD_INT 1
6063: PPUSH
6064: CALL 7849 0 1
// UpdateLuaVariables ( ) ;
6068: CALL 6085 0 0
// UpdateFactoryWaypoints ( ) ;
6072: CALL 20971 0 0
// UpdateWarehouseGatheringPoints ( ) ;
6076: CALL 21223 0 0
// end ;
6080: LD_VAR 0 1
6084: RET
// function UpdateLuaVariables ( ) ; begin
6085: LD_INT 0
6087: PPUSH
// if globalGameSaveCounter then
6088: LD_EXP 25
6092: IFFALSE 6126
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
6094: LD_ADDR_EXP 25
6098: PUSH
6099: LD_EXP 25
6103: PPUSH
6104: CALL 67804 0 1
6108: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
6109: LD_STRING setGameSaveCounter(
6111: PUSH
6112: LD_EXP 25
6116: STR
6117: PUSH
6118: LD_STRING )
6120: STR
6121: PPUSH
6122: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
6126: LD_STRING setGameDifficulty(
6128: PUSH
6129: LD_OWVAR 67
6133: STR
6134: PUSH
6135: LD_STRING )
6137: STR
6138: PPUSH
6139: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
6143: LD_STRING displayDifficulty(
6145: PUSH
6146: LD_OWVAR 67
6150: STR
6151: PUSH
6152: LD_STRING )
6154: STR
6155: PPUSH
6156: CALL_OW 559
// end ;
6160: LD_VAR 0 1
6164: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
6165: LD_INT 0
6167: PPUSH
// if p2 = stream_mode then
6168: LD_VAR 0 2
6172: PUSH
6173: LD_INT 100
6175: EQUAL
6176: IFFALSE 7179
// begin if not StreamModeActive then
6178: LD_EXP 26
6182: NOT
6183: IFFALSE 6193
// StreamModeActive := true ;
6185: LD_ADDR_EXP 26
6189: PUSH
6190: LD_INT 1
6192: ST_TO_ADDR
// if p3 = 0 then
6193: LD_VAR 0 3
6197: PUSH
6198: LD_INT 0
6200: EQUAL
6201: IFFALSE 6207
// InitStreamMode ;
6203: CALL 7385 0 0
// if p3 = 1 then
6207: LD_VAR 0 3
6211: PUSH
6212: LD_INT 1
6214: EQUAL
6215: IFFALSE 6225
// sRocket := true ;
6217: LD_ADDR_EXP 31
6221: PUSH
6222: LD_INT 1
6224: ST_TO_ADDR
// if p3 = 2 then
6225: LD_VAR 0 3
6229: PUSH
6230: LD_INT 2
6232: EQUAL
6233: IFFALSE 6243
// sSpeed := true ;
6235: LD_ADDR_EXP 30
6239: PUSH
6240: LD_INT 1
6242: ST_TO_ADDR
// if p3 = 3 then
6243: LD_VAR 0 3
6247: PUSH
6248: LD_INT 3
6250: EQUAL
6251: IFFALSE 6261
// sEngine := true ;
6253: LD_ADDR_EXP 32
6257: PUSH
6258: LD_INT 1
6260: ST_TO_ADDR
// if p3 = 4 then
6261: LD_VAR 0 3
6265: PUSH
6266: LD_INT 4
6268: EQUAL
6269: IFFALSE 6279
// sSpec := true ;
6271: LD_ADDR_EXP 29
6275: PUSH
6276: LD_INT 1
6278: ST_TO_ADDR
// if p3 = 5 then
6279: LD_VAR 0 3
6283: PUSH
6284: LD_INT 5
6286: EQUAL
6287: IFFALSE 6297
// sLevel := true ;
6289: LD_ADDR_EXP 33
6293: PUSH
6294: LD_INT 1
6296: ST_TO_ADDR
// if p3 = 6 then
6297: LD_VAR 0 3
6301: PUSH
6302: LD_INT 6
6304: EQUAL
6305: IFFALSE 6315
// sArmoury := true ;
6307: LD_ADDR_EXP 34
6311: PUSH
6312: LD_INT 1
6314: ST_TO_ADDR
// if p3 = 7 then
6315: LD_VAR 0 3
6319: PUSH
6320: LD_INT 7
6322: EQUAL
6323: IFFALSE 6333
// sRadar := true ;
6325: LD_ADDR_EXP 35
6329: PUSH
6330: LD_INT 1
6332: ST_TO_ADDR
// if p3 = 8 then
6333: LD_VAR 0 3
6337: PUSH
6338: LD_INT 8
6340: EQUAL
6341: IFFALSE 6351
// sBunker := true ;
6343: LD_ADDR_EXP 36
6347: PUSH
6348: LD_INT 1
6350: ST_TO_ADDR
// if p3 = 9 then
6351: LD_VAR 0 3
6355: PUSH
6356: LD_INT 9
6358: EQUAL
6359: IFFALSE 6369
// sHack := true ;
6361: LD_ADDR_EXP 37
6365: PUSH
6366: LD_INT 1
6368: ST_TO_ADDR
// if p3 = 10 then
6369: LD_VAR 0 3
6373: PUSH
6374: LD_INT 10
6376: EQUAL
6377: IFFALSE 6387
// sFire := true ;
6379: LD_ADDR_EXP 38
6383: PUSH
6384: LD_INT 1
6386: ST_TO_ADDR
// if p3 = 11 then
6387: LD_VAR 0 3
6391: PUSH
6392: LD_INT 11
6394: EQUAL
6395: IFFALSE 6405
// sRefresh := true ;
6397: LD_ADDR_EXP 39
6401: PUSH
6402: LD_INT 1
6404: ST_TO_ADDR
// if p3 = 12 then
6405: LD_VAR 0 3
6409: PUSH
6410: LD_INT 12
6412: EQUAL
6413: IFFALSE 6423
// sExp := true ;
6415: LD_ADDR_EXP 40
6419: PUSH
6420: LD_INT 1
6422: ST_TO_ADDR
// if p3 = 13 then
6423: LD_VAR 0 3
6427: PUSH
6428: LD_INT 13
6430: EQUAL
6431: IFFALSE 6441
// sDepot := true ;
6433: LD_ADDR_EXP 41
6437: PUSH
6438: LD_INT 1
6440: ST_TO_ADDR
// if p3 = 14 then
6441: LD_VAR 0 3
6445: PUSH
6446: LD_INT 14
6448: EQUAL
6449: IFFALSE 6459
// sFlag := true ;
6451: LD_ADDR_EXP 42
6455: PUSH
6456: LD_INT 1
6458: ST_TO_ADDR
// if p3 = 15 then
6459: LD_VAR 0 3
6463: PUSH
6464: LD_INT 15
6466: EQUAL
6467: IFFALSE 6477
// sKamikadze := true ;
6469: LD_ADDR_EXP 50
6473: PUSH
6474: LD_INT 1
6476: ST_TO_ADDR
// if p3 = 16 then
6477: LD_VAR 0 3
6481: PUSH
6482: LD_INT 16
6484: EQUAL
6485: IFFALSE 6495
// sTroll := true ;
6487: LD_ADDR_EXP 51
6491: PUSH
6492: LD_INT 1
6494: ST_TO_ADDR
// if p3 = 17 then
6495: LD_VAR 0 3
6499: PUSH
6500: LD_INT 17
6502: EQUAL
6503: IFFALSE 6513
// sSlow := true ;
6505: LD_ADDR_EXP 52
6509: PUSH
6510: LD_INT 1
6512: ST_TO_ADDR
// if p3 = 18 then
6513: LD_VAR 0 3
6517: PUSH
6518: LD_INT 18
6520: EQUAL
6521: IFFALSE 6531
// sLack := true ;
6523: LD_ADDR_EXP 53
6527: PUSH
6528: LD_INT 1
6530: ST_TO_ADDR
// if p3 = 19 then
6531: LD_VAR 0 3
6535: PUSH
6536: LD_INT 19
6538: EQUAL
6539: IFFALSE 6549
// sTank := true ;
6541: LD_ADDR_EXP 55
6545: PUSH
6546: LD_INT 1
6548: ST_TO_ADDR
// if p3 = 20 then
6549: LD_VAR 0 3
6553: PUSH
6554: LD_INT 20
6556: EQUAL
6557: IFFALSE 6567
// sRemote := true ;
6559: LD_ADDR_EXP 56
6563: PUSH
6564: LD_INT 1
6566: ST_TO_ADDR
// if p3 = 21 then
6567: LD_VAR 0 3
6571: PUSH
6572: LD_INT 21
6574: EQUAL
6575: IFFALSE 6585
// sPowell := true ;
6577: LD_ADDR_EXP 57
6581: PUSH
6582: LD_INT 1
6584: ST_TO_ADDR
// if p3 = 22 then
6585: LD_VAR 0 3
6589: PUSH
6590: LD_INT 22
6592: EQUAL
6593: IFFALSE 6603
// sTeleport := true ;
6595: LD_ADDR_EXP 60
6599: PUSH
6600: LD_INT 1
6602: ST_TO_ADDR
// if p3 = 23 then
6603: LD_VAR 0 3
6607: PUSH
6608: LD_INT 23
6610: EQUAL
6611: IFFALSE 6621
// sOilTower := true ;
6613: LD_ADDR_EXP 62
6617: PUSH
6618: LD_INT 1
6620: ST_TO_ADDR
// if p3 = 24 then
6621: LD_VAR 0 3
6625: PUSH
6626: LD_INT 24
6628: EQUAL
6629: IFFALSE 6639
// sShovel := true ;
6631: LD_ADDR_EXP 63
6635: PUSH
6636: LD_INT 1
6638: ST_TO_ADDR
// if p3 = 25 then
6639: LD_VAR 0 3
6643: PUSH
6644: LD_INT 25
6646: EQUAL
6647: IFFALSE 6657
// sSheik := true ;
6649: LD_ADDR_EXP 64
6653: PUSH
6654: LD_INT 1
6656: ST_TO_ADDR
// if p3 = 26 then
6657: LD_VAR 0 3
6661: PUSH
6662: LD_INT 26
6664: EQUAL
6665: IFFALSE 6675
// sEarthquake := true ;
6667: LD_ADDR_EXP 66
6671: PUSH
6672: LD_INT 1
6674: ST_TO_ADDR
// if p3 = 27 then
6675: LD_VAR 0 3
6679: PUSH
6680: LD_INT 27
6682: EQUAL
6683: IFFALSE 6693
// sAI := true ;
6685: LD_ADDR_EXP 67
6689: PUSH
6690: LD_INT 1
6692: ST_TO_ADDR
// if p3 = 28 then
6693: LD_VAR 0 3
6697: PUSH
6698: LD_INT 28
6700: EQUAL
6701: IFFALSE 6711
// sCargo := true ;
6703: LD_ADDR_EXP 70
6707: PUSH
6708: LD_INT 1
6710: ST_TO_ADDR
// if p3 = 29 then
6711: LD_VAR 0 3
6715: PUSH
6716: LD_INT 29
6718: EQUAL
6719: IFFALSE 6729
// sDLaser := true ;
6721: LD_ADDR_EXP 71
6725: PUSH
6726: LD_INT 1
6728: ST_TO_ADDR
// if p3 = 30 then
6729: LD_VAR 0 3
6733: PUSH
6734: LD_INT 30
6736: EQUAL
6737: IFFALSE 6747
// sExchange := true ;
6739: LD_ADDR_EXP 72
6743: PUSH
6744: LD_INT 1
6746: ST_TO_ADDR
// if p3 = 31 then
6747: LD_VAR 0 3
6751: PUSH
6752: LD_INT 31
6754: EQUAL
6755: IFFALSE 6765
// sFac := true ;
6757: LD_ADDR_EXP 73
6761: PUSH
6762: LD_INT 1
6764: ST_TO_ADDR
// if p3 = 32 then
6765: LD_VAR 0 3
6769: PUSH
6770: LD_INT 32
6772: EQUAL
6773: IFFALSE 6783
// sPower := true ;
6775: LD_ADDR_EXP 74
6779: PUSH
6780: LD_INT 1
6782: ST_TO_ADDR
// if p3 = 33 then
6783: LD_VAR 0 3
6787: PUSH
6788: LD_INT 33
6790: EQUAL
6791: IFFALSE 6801
// sRandom := true ;
6793: LD_ADDR_EXP 75
6797: PUSH
6798: LD_INT 1
6800: ST_TO_ADDR
// if p3 = 34 then
6801: LD_VAR 0 3
6805: PUSH
6806: LD_INT 34
6808: EQUAL
6809: IFFALSE 6819
// sShield := true ;
6811: LD_ADDR_EXP 76
6815: PUSH
6816: LD_INT 1
6818: ST_TO_ADDR
// if p3 = 35 then
6819: LD_VAR 0 3
6823: PUSH
6824: LD_INT 35
6826: EQUAL
6827: IFFALSE 6837
// sTime := true ;
6829: LD_ADDR_EXP 77
6833: PUSH
6834: LD_INT 1
6836: ST_TO_ADDR
// if p3 = 36 then
6837: LD_VAR 0 3
6841: PUSH
6842: LD_INT 36
6844: EQUAL
6845: IFFALSE 6855
// sTools := true ;
6847: LD_ADDR_EXP 78
6851: PUSH
6852: LD_INT 1
6854: ST_TO_ADDR
// if p3 = 101 then
6855: LD_VAR 0 3
6859: PUSH
6860: LD_INT 101
6862: EQUAL
6863: IFFALSE 6873
// sSold := true ;
6865: LD_ADDR_EXP 43
6869: PUSH
6870: LD_INT 1
6872: ST_TO_ADDR
// if p3 = 102 then
6873: LD_VAR 0 3
6877: PUSH
6878: LD_INT 102
6880: EQUAL
6881: IFFALSE 6891
// sDiff := true ;
6883: LD_ADDR_EXP 44
6887: PUSH
6888: LD_INT 1
6890: ST_TO_ADDR
// if p3 = 103 then
6891: LD_VAR 0 3
6895: PUSH
6896: LD_INT 103
6898: EQUAL
6899: IFFALSE 6909
// sFog := true ;
6901: LD_ADDR_EXP 47
6905: PUSH
6906: LD_INT 1
6908: ST_TO_ADDR
// if p3 = 104 then
6909: LD_VAR 0 3
6913: PUSH
6914: LD_INT 104
6916: EQUAL
6917: IFFALSE 6927
// sReset := true ;
6919: LD_ADDR_EXP 48
6923: PUSH
6924: LD_INT 1
6926: ST_TO_ADDR
// if p3 = 105 then
6927: LD_VAR 0 3
6931: PUSH
6932: LD_INT 105
6934: EQUAL
6935: IFFALSE 6945
// sSun := true ;
6937: LD_ADDR_EXP 49
6941: PUSH
6942: LD_INT 1
6944: ST_TO_ADDR
// if p3 = 106 then
6945: LD_VAR 0 3
6949: PUSH
6950: LD_INT 106
6952: EQUAL
6953: IFFALSE 6963
// sTiger := true ;
6955: LD_ADDR_EXP 45
6959: PUSH
6960: LD_INT 1
6962: ST_TO_ADDR
// if p3 = 107 then
6963: LD_VAR 0 3
6967: PUSH
6968: LD_INT 107
6970: EQUAL
6971: IFFALSE 6981
// sBomb := true ;
6973: LD_ADDR_EXP 46
6977: PUSH
6978: LD_INT 1
6980: ST_TO_ADDR
// if p3 = 108 then
6981: LD_VAR 0 3
6985: PUSH
6986: LD_INT 108
6988: EQUAL
6989: IFFALSE 6999
// sWound := true ;
6991: LD_ADDR_EXP 54
6995: PUSH
6996: LD_INT 1
6998: ST_TO_ADDR
// if p3 = 109 then
6999: LD_VAR 0 3
7003: PUSH
7004: LD_INT 109
7006: EQUAL
7007: IFFALSE 7017
// sBetray := true ;
7009: LD_ADDR_EXP 58
7013: PUSH
7014: LD_INT 1
7016: ST_TO_ADDR
// if p3 = 110 then
7017: LD_VAR 0 3
7021: PUSH
7022: LD_INT 110
7024: EQUAL
7025: IFFALSE 7035
// sContamin := true ;
7027: LD_ADDR_EXP 59
7031: PUSH
7032: LD_INT 1
7034: ST_TO_ADDR
// if p3 = 111 then
7035: LD_VAR 0 3
7039: PUSH
7040: LD_INT 111
7042: EQUAL
7043: IFFALSE 7053
// sOil := true ;
7045: LD_ADDR_EXP 61
7049: PUSH
7050: LD_INT 1
7052: ST_TO_ADDR
// if p3 = 112 then
7053: LD_VAR 0 3
7057: PUSH
7058: LD_INT 112
7060: EQUAL
7061: IFFALSE 7071
// sStu := true ;
7063: LD_ADDR_EXP 65
7067: PUSH
7068: LD_INT 1
7070: ST_TO_ADDR
// if p3 = 113 then
7071: LD_VAR 0 3
7075: PUSH
7076: LD_INT 113
7078: EQUAL
7079: IFFALSE 7089
// sBazooka := true ;
7081: LD_ADDR_EXP 68
7085: PUSH
7086: LD_INT 1
7088: ST_TO_ADDR
// if p3 = 114 then
7089: LD_VAR 0 3
7093: PUSH
7094: LD_INT 114
7096: EQUAL
7097: IFFALSE 7107
// sMortar := true ;
7099: LD_ADDR_EXP 69
7103: PUSH
7104: LD_INT 1
7106: ST_TO_ADDR
// if p3 = 115 then
7107: LD_VAR 0 3
7111: PUSH
7112: LD_INT 115
7114: EQUAL
7115: IFFALSE 7125
// sRanger := true ;
7117: LD_ADDR_EXP 79
7121: PUSH
7122: LD_INT 1
7124: ST_TO_ADDR
// if p3 = 116 then
7125: LD_VAR 0 3
7129: PUSH
7130: LD_INT 116
7132: EQUAL
7133: IFFALSE 7143
// sComputer := true ;
7135: LD_ADDR_EXP 80
7139: PUSH
7140: LD_INT 1
7142: ST_TO_ADDR
// if p3 = 117 then
7143: LD_VAR 0 3
7147: PUSH
7148: LD_INT 117
7150: EQUAL
7151: IFFALSE 7161
// s30 := true ;
7153: LD_ADDR_EXP 81
7157: PUSH
7158: LD_INT 1
7160: ST_TO_ADDR
// if p3 = 118 then
7161: LD_VAR 0 3
7165: PUSH
7166: LD_INT 118
7168: EQUAL
7169: IFFALSE 7179
// s60 := true ;
7171: LD_ADDR_EXP 82
7175: PUSH
7176: LD_INT 1
7178: ST_TO_ADDR
// end ; if p2 = hack_mode then
7179: LD_VAR 0 2
7183: PUSH
7184: LD_INT 101
7186: EQUAL
7187: IFFALSE 7315
// begin case p3 of 1 :
7189: LD_VAR 0 3
7193: PUSH
7194: LD_INT 1
7196: DOUBLE
7197: EQUAL
7198: IFTRUE 7202
7200: GO 7209
7202: POP
// hHackUnlimitedResources ; 2 :
7203: CALL 19578 0 0
7207: GO 7315
7209: LD_INT 2
7211: DOUBLE
7212: EQUAL
7213: IFTRUE 7217
7215: GO 7224
7217: POP
// hHackSetLevel10 ; 3 :
7218: CALL 19711 0 0
7222: GO 7315
7224: LD_INT 3
7226: DOUBLE
7227: EQUAL
7228: IFTRUE 7232
7230: GO 7239
7232: POP
// hHackSetLevel10YourUnits ; 4 :
7233: CALL 19796 0 0
7237: GO 7315
7239: LD_INT 4
7241: DOUBLE
7242: EQUAL
7243: IFTRUE 7247
7245: GO 7254
7247: POP
// hHackInvincible ; 5 :
7248: CALL 20244 0 0
7252: GO 7315
7254: LD_INT 5
7256: DOUBLE
7257: EQUAL
7258: IFTRUE 7262
7260: GO 7269
7262: POP
// hHackInvisible ; 6 :
7263: CALL 20355 0 0
7267: GO 7315
7269: LD_INT 6
7271: DOUBLE
7272: EQUAL
7273: IFTRUE 7277
7275: GO 7284
7277: POP
// hHackChangeYourSide ; 7 :
7278: CALL 20412 0 0
7282: GO 7315
7284: LD_INT 7
7286: DOUBLE
7287: EQUAL
7288: IFTRUE 7292
7290: GO 7299
7292: POP
// hHackChangeUnitSide ; 8 :
7293: CALL 20454 0 0
7297: GO 7315
7299: LD_INT 8
7301: DOUBLE
7302: EQUAL
7303: IFTRUE 7307
7305: GO 7314
7307: POP
// hHackFog ; end ;
7308: CALL 20555 0 0
7312: GO 7315
7314: POP
// end ; if p2 = game_save_mode then
7315: LD_VAR 0 2
7319: PUSH
7320: LD_INT 102
7322: EQUAL
7323: IFFALSE 7380
// begin if p3 = 1 then
7325: LD_VAR 0 3
7329: PUSH
7330: LD_INT 1
7332: EQUAL
7333: IFFALSE 7345
// globalGameSaveCounter := p4 ;
7335: LD_ADDR_EXP 25
7339: PUSH
7340: LD_VAR 0 4
7344: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
7345: LD_VAR 0 3
7349: PUSH
7350: LD_INT 2
7352: EQUAL
7353: IFFALSE 7361
7355: PUSH
7356: LD_EXP 25
7360: AND
7361: IFFALSE 7380
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
7363: LD_STRING setGameSaveCounter(
7365: PUSH
7366: LD_EXP 25
7370: STR
7371: PUSH
7372: LD_STRING )
7374: STR
7375: PPUSH
7376: CALL_OW 559
// end ; end ;
7380: LD_VAR 0 7
7384: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
7385: LD_INT 0
7387: PPUSH
// streamModeActive := false ;
7388: LD_ADDR_EXP 26
7392: PUSH
7393: LD_INT 0
7395: ST_TO_ADDR
// normalCounter := 36 ;
7396: LD_ADDR_EXP 27
7400: PUSH
7401: LD_INT 36
7403: ST_TO_ADDR
// hardcoreCounter := 18 ;
7404: LD_ADDR_EXP 28
7408: PUSH
7409: LD_INT 18
7411: ST_TO_ADDR
// sRocket := false ;
7412: LD_ADDR_EXP 31
7416: PUSH
7417: LD_INT 0
7419: ST_TO_ADDR
// sSpeed := false ;
7420: LD_ADDR_EXP 30
7424: PUSH
7425: LD_INT 0
7427: ST_TO_ADDR
// sEngine := false ;
7428: LD_ADDR_EXP 32
7432: PUSH
7433: LD_INT 0
7435: ST_TO_ADDR
// sSpec := false ;
7436: LD_ADDR_EXP 29
7440: PUSH
7441: LD_INT 0
7443: ST_TO_ADDR
// sLevel := false ;
7444: LD_ADDR_EXP 33
7448: PUSH
7449: LD_INT 0
7451: ST_TO_ADDR
// sArmoury := false ;
7452: LD_ADDR_EXP 34
7456: PUSH
7457: LD_INT 0
7459: ST_TO_ADDR
// sRadar := false ;
7460: LD_ADDR_EXP 35
7464: PUSH
7465: LD_INT 0
7467: ST_TO_ADDR
// sBunker := false ;
7468: LD_ADDR_EXP 36
7472: PUSH
7473: LD_INT 0
7475: ST_TO_ADDR
// sHack := false ;
7476: LD_ADDR_EXP 37
7480: PUSH
7481: LD_INT 0
7483: ST_TO_ADDR
// sFire := false ;
7484: LD_ADDR_EXP 38
7488: PUSH
7489: LD_INT 0
7491: ST_TO_ADDR
// sRefresh := false ;
7492: LD_ADDR_EXP 39
7496: PUSH
7497: LD_INT 0
7499: ST_TO_ADDR
// sExp := false ;
7500: LD_ADDR_EXP 40
7504: PUSH
7505: LD_INT 0
7507: ST_TO_ADDR
// sDepot := false ;
7508: LD_ADDR_EXP 41
7512: PUSH
7513: LD_INT 0
7515: ST_TO_ADDR
// sFlag := false ;
7516: LD_ADDR_EXP 42
7520: PUSH
7521: LD_INT 0
7523: ST_TO_ADDR
// sKamikadze := false ;
7524: LD_ADDR_EXP 50
7528: PUSH
7529: LD_INT 0
7531: ST_TO_ADDR
// sTroll := false ;
7532: LD_ADDR_EXP 51
7536: PUSH
7537: LD_INT 0
7539: ST_TO_ADDR
// sSlow := false ;
7540: LD_ADDR_EXP 52
7544: PUSH
7545: LD_INT 0
7547: ST_TO_ADDR
// sLack := false ;
7548: LD_ADDR_EXP 53
7552: PUSH
7553: LD_INT 0
7555: ST_TO_ADDR
// sTank := false ;
7556: LD_ADDR_EXP 55
7560: PUSH
7561: LD_INT 0
7563: ST_TO_ADDR
// sRemote := false ;
7564: LD_ADDR_EXP 56
7568: PUSH
7569: LD_INT 0
7571: ST_TO_ADDR
// sPowell := false ;
7572: LD_ADDR_EXP 57
7576: PUSH
7577: LD_INT 0
7579: ST_TO_ADDR
// sTeleport := false ;
7580: LD_ADDR_EXP 60
7584: PUSH
7585: LD_INT 0
7587: ST_TO_ADDR
// sOilTower := false ;
7588: LD_ADDR_EXP 62
7592: PUSH
7593: LD_INT 0
7595: ST_TO_ADDR
// sShovel := false ;
7596: LD_ADDR_EXP 63
7600: PUSH
7601: LD_INT 0
7603: ST_TO_ADDR
// sSheik := false ;
7604: LD_ADDR_EXP 64
7608: PUSH
7609: LD_INT 0
7611: ST_TO_ADDR
// sEarthquake := false ;
7612: LD_ADDR_EXP 66
7616: PUSH
7617: LD_INT 0
7619: ST_TO_ADDR
// sAI := false ;
7620: LD_ADDR_EXP 67
7624: PUSH
7625: LD_INT 0
7627: ST_TO_ADDR
// sCargo := false ;
7628: LD_ADDR_EXP 70
7632: PUSH
7633: LD_INT 0
7635: ST_TO_ADDR
// sDLaser := false ;
7636: LD_ADDR_EXP 71
7640: PUSH
7641: LD_INT 0
7643: ST_TO_ADDR
// sExchange := false ;
7644: LD_ADDR_EXP 72
7648: PUSH
7649: LD_INT 0
7651: ST_TO_ADDR
// sFac := false ;
7652: LD_ADDR_EXP 73
7656: PUSH
7657: LD_INT 0
7659: ST_TO_ADDR
// sPower := false ;
7660: LD_ADDR_EXP 74
7664: PUSH
7665: LD_INT 0
7667: ST_TO_ADDR
// sRandom := false ;
7668: LD_ADDR_EXP 75
7672: PUSH
7673: LD_INT 0
7675: ST_TO_ADDR
// sShield := false ;
7676: LD_ADDR_EXP 76
7680: PUSH
7681: LD_INT 0
7683: ST_TO_ADDR
// sTime := false ;
7684: LD_ADDR_EXP 77
7688: PUSH
7689: LD_INT 0
7691: ST_TO_ADDR
// sTools := false ;
7692: LD_ADDR_EXP 78
7696: PUSH
7697: LD_INT 0
7699: ST_TO_ADDR
// sSold := false ;
7700: LD_ADDR_EXP 43
7704: PUSH
7705: LD_INT 0
7707: ST_TO_ADDR
// sDiff := false ;
7708: LD_ADDR_EXP 44
7712: PUSH
7713: LD_INT 0
7715: ST_TO_ADDR
// sFog := false ;
7716: LD_ADDR_EXP 47
7720: PUSH
7721: LD_INT 0
7723: ST_TO_ADDR
// sReset := false ;
7724: LD_ADDR_EXP 48
7728: PUSH
7729: LD_INT 0
7731: ST_TO_ADDR
// sSun := false ;
7732: LD_ADDR_EXP 49
7736: PUSH
7737: LD_INT 0
7739: ST_TO_ADDR
// sTiger := false ;
7740: LD_ADDR_EXP 45
7744: PUSH
7745: LD_INT 0
7747: ST_TO_ADDR
// sBomb := false ;
7748: LD_ADDR_EXP 46
7752: PUSH
7753: LD_INT 0
7755: ST_TO_ADDR
// sWound := false ;
7756: LD_ADDR_EXP 54
7760: PUSH
7761: LD_INT 0
7763: ST_TO_ADDR
// sBetray := false ;
7764: LD_ADDR_EXP 58
7768: PUSH
7769: LD_INT 0
7771: ST_TO_ADDR
// sContamin := false ;
7772: LD_ADDR_EXP 59
7776: PUSH
7777: LD_INT 0
7779: ST_TO_ADDR
// sOil := false ;
7780: LD_ADDR_EXP 61
7784: PUSH
7785: LD_INT 0
7787: ST_TO_ADDR
// sStu := false ;
7788: LD_ADDR_EXP 65
7792: PUSH
7793: LD_INT 0
7795: ST_TO_ADDR
// sBazooka := false ;
7796: LD_ADDR_EXP 68
7800: PUSH
7801: LD_INT 0
7803: ST_TO_ADDR
// sMortar := false ;
7804: LD_ADDR_EXP 69
7808: PUSH
7809: LD_INT 0
7811: ST_TO_ADDR
// sRanger := false ;
7812: LD_ADDR_EXP 79
7816: PUSH
7817: LD_INT 0
7819: ST_TO_ADDR
// sComputer := false ;
7820: LD_ADDR_EXP 80
7824: PUSH
7825: LD_INT 0
7827: ST_TO_ADDR
// s30 := false ;
7828: LD_ADDR_EXP 81
7832: PUSH
7833: LD_INT 0
7835: ST_TO_ADDR
// s60 := false ;
7836: LD_ADDR_EXP 82
7840: PUSH
7841: LD_INT 0
7843: ST_TO_ADDR
// end ;
7844: LD_VAR 0 1
7848: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
7849: LD_INT 0
7851: PPUSH
7852: PPUSH
7853: PPUSH
7854: PPUSH
7855: PPUSH
7856: PPUSH
7857: PPUSH
// result := [ ] ;
7858: LD_ADDR_VAR 0 2
7862: PUSH
7863: EMPTY
7864: ST_TO_ADDR
// if campaign_id = 1 then
7865: LD_OWVAR 69
7869: PUSH
7870: LD_INT 1
7872: EQUAL
7873: IFFALSE 11039
// begin case mission_number of 1 :
7875: LD_OWVAR 70
7879: PUSH
7880: LD_INT 1
7882: DOUBLE
7883: EQUAL
7884: IFTRUE 7888
7886: GO 7964
7888: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
7889: LD_ADDR_VAR 0 2
7893: PUSH
7894: LD_INT 2
7896: PUSH
7897: LD_INT 4
7899: PUSH
7900: LD_INT 11
7902: PUSH
7903: LD_INT 12
7905: PUSH
7906: LD_INT 15
7908: PUSH
7909: LD_INT 16
7911: PUSH
7912: LD_INT 22
7914: PUSH
7915: LD_INT 23
7917: PUSH
7918: LD_INT 26
7920: PUSH
7921: EMPTY
7922: LIST
7923: LIST
7924: LIST
7925: LIST
7926: LIST
7927: LIST
7928: LIST
7929: LIST
7930: LIST
7931: PUSH
7932: LD_INT 101
7934: PUSH
7935: LD_INT 102
7937: PUSH
7938: LD_INT 106
7940: PUSH
7941: LD_INT 116
7943: PUSH
7944: LD_INT 117
7946: PUSH
7947: LD_INT 118
7949: PUSH
7950: EMPTY
7951: LIST
7952: LIST
7953: LIST
7954: LIST
7955: LIST
7956: LIST
7957: PUSH
7958: EMPTY
7959: LIST
7960: LIST
7961: ST_TO_ADDR
7962: GO 11037
7964: LD_INT 2
7966: DOUBLE
7967: EQUAL
7968: IFTRUE 7972
7970: GO 8056
7972: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
7973: LD_ADDR_VAR 0 2
7977: PUSH
7978: LD_INT 2
7980: PUSH
7981: LD_INT 4
7983: PUSH
7984: LD_INT 11
7986: PUSH
7987: LD_INT 12
7989: PUSH
7990: LD_INT 15
7992: PUSH
7993: LD_INT 16
7995: PUSH
7996: LD_INT 22
7998: PUSH
7999: LD_INT 23
8001: PUSH
8002: LD_INT 26
8004: PUSH
8005: EMPTY
8006: LIST
8007: LIST
8008: LIST
8009: LIST
8010: LIST
8011: LIST
8012: LIST
8013: LIST
8014: LIST
8015: PUSH
8016: LD_INT 101
8018: PUSH
8019: LD_INT 102
8021: PUSH
8022: LD_INT 105
8024: PUSH
8025: LD_INT 106
8027: PUSH
8028: LD_INT 108
8030: PUSH
8031: LD_INT 116
8033: PUSH
8034: LD_INT 117
8036: PUSH
8037: LD_INT 118
8039: PUSH
8040: EMPTY
8041: LIST
8042: LIST
8043: LIST
8044: LIST
8045: LIST
8046: LIST
8047: LIST
8048: LIST
8049: PUSH
8050: EMPTY
8051: LIST
8052: LIST
8053: ST_TO_ADDR
8054: GO 11037
8056: LD_INT 3
8058: DOUBLE
8059: EQUAL
8060: IFTRUE 8064
8062: GO 8152
8064: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
8065: LD_ADDR_VAR 0 2
8069: PUSH
8070: LD_INT 2
8072: PUSH
8073: LD_INT 4
8075: PUSH
8076: LD_INT 5
8078: PUSH
8079: LD_INT 11
8081: PUSH
8082: LD_INT 12
8084: PUSH
8085: LD_INT 15
8087: PUSH
8088: LD_INT 16
8090: PUSH
8091: LD_INT 22
8093: PUSH
8094: LD_INT 26
8096: PUSH
8097: LD_INT 36
8099: PUSH
8100: EMPTY
8101: LIST
8102: LIST
8103: LIST
8104: LIST
8105: LIST
8106: LIST
8107: LIST
8108: LIST
8109: LIST
8110: LIST
8111: PUSH
8112: LD_INT 101
8114: PUSH
8115: LD_INT 102
8117: PUSH
8118: LD_INT 105
8120: PUSH
8121: LD_INT 106
8123: PUSH
8124: LD_INT 108
8126: PUSH
8127: LD_INT 116
8129: PUSH
8130: LD_INT 117
8132: PUSH
8133: LD_INT 118
8135: PUSH
8136: EMPTY
8137: LIST
8138: LIST
8139: LIST
8140: LIST
8141: LIST
8142: LIST
8143: LIST
8144: LIST
8145: PUSH
8146: EMPTY
8147: LIST
8148: LIST
8149: ST_TO_ADDR
8150: GO 11037
8152: LD_INT 4
8154: DOUBLE
8155: EQUAL
8156: IFTRUE 8160
8158: GO 8256
8160: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
8161: LD_ADDR_VAR 0 2
8165: PUSH
8166: LD_INT 2
8168: PUSH
8169: LD_INT 4
8171: PUSH
8172: LD_INT 5
8174: PUSH
8175: LD_INT 8
8177: PUSH
8178: LD_INT 11
8180: PUSH
8181: LD_INT 12
8183: PUSH
8184: LD_INT 15
8186: PUSH
8187: LD_INT 16
8189: PUSH
8190: LD_INT 22
8192: PUSH
8193: LD_INT 23
8195: PUSH
8196: LD_INT 26
8198: PUSH
8199: LD_INT 36
8201: PUSH
8202: EMPTY
8203: LIST
8204: LIST
8205: LIST
8206: LIST
8207: LIST
8208: LIST
8209: LIST
8210: LIST
8211: LIST
8212: LIST
8213: LIST
8214: LIST
8215: PUSH
8216: LD_INT 101
8218: PUSH
8219: LD_INT 102
8221: PUSH
8222: LD_INT 105
8224: PUSH
8225: LD_INT 106
8227: PUSH
8228: LD_INT 108
8230: PUSH
8231: LD_INT 116
8233: PUSH
8234: LD_INT 117
8236: PUSH
8237: LD_INT 118
8239: PUSH
8240: EMPTY
8241: LIST
8242: LIST
8243: LIST
8244: LIST
8245: LIST
8246: LIST
8247: LIST
8248: LIST
8249: PUSH
8250: EMPTY
8251: LIST
8252: LIST
8253: ST_TO_ADDR
8254: GO 11037
8256: LD_INT 5
8258: DOUBLE
8259: EQUAL
8260: IFTRUE 8264
8262: GO 8376
8264: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
8265: LD_ADDR_VAR 0 2
8269: PUSH
8270: LD_INT 2
8272: PUSH
8273: LD_INT 4
8275: PUSH
8276: LD_INT 5
8278: PUSH
8279: LD_INT 6
8281: PUSH
8282: LD_INT 8
8284: PUSH
8285: LD_INT 11
8287: PUSH
8288: LD_INT 12
8290: PUSH
8291: LD_INT 15
8293: PUSH
8294: LD_INT 16
8296: PUSH
8297: LD_INT 22
8299: PUSH
8300: LD_INT 23
8302: PUSH
8303: LD_INT 25
8305: PUSH
8306: LD_INT 26
8308: PUSH
8309: LD_INT 36
8311: PUSH
8312: EMPTY
8313: LIST
8314: LIST
8315: LIST
8316: LIST
8317: LIST
8318: LIST
8319: LIST
8320: LIST
8321: LIST
8322: LIST
8323: LIST
8324: LIST
8325: LIST
8326: LIST
8327: PUSH
8328: LD_INT 101
8330: PUSH
8331: LD_INT 102
8333: PUSH
8334: LD_INT 105
8336: PUSH
8337: LD_INT 106
8339: PUSH
8340: LD_INT 108
8342: PUSH
8343: LD_INT 109
8345: PUSH
8346: LD_INT 112
8348: PUSH
8349: LD_INT 116
8351: PUSH
8352: LD_INT 117
8354: PUSH
8355: LD_INT 118
8357: PUSH
8358: EMPTY
8359: LIST
8360: LIST
8361: LIST
8362: LIST
8363: LIST
8364: LIST
8365: LIST
8366: LIST
8367: LIST
8368: LIST
8369: PUSH
8370: EMPTY
8371: LIST
8372: LIST
8373: ST_TO_ADDR
8374: GO 11037
8376: LD_INT 6
8378: DOUBLE
8379: EQUAL
8380: IFTRUE 8384
8382: GO 8516
8384: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
8385: LD_ADDR_VAR 0 2
8389: PUSH
8390: LD_INT 2
8392: PUSH
8393: LD_INT 4
8395: PUSH
8396: LD_INT 5
8398: PUSH
8399: LD_INT 6
8401: PUSH
8402: LD_INT 8
8404: PUSH
8405: LD_INT 11
8407: PUSH
8408: LD_INT 12
8410: PUSH
8411: LD_INT 15
8413: PUSH
8414: LD_INT 16
8416: PUSH
8417: LD_INT 20
8419: PUSH
8420: LD_INT 21
8422: PUSH
8423: LD_INT 22
8425: PUSH
8426: LD_INT 23
8428: PUSH
8429: LD_INT 25
8431: PUSH
8432: LD_INT 26
8434: PUSH
8435: LD_INT 30
8437: PUSH
8438: LD_INT 31
8440: PUSH
8441: LD_INT 32
8443: PUSH
8444: LD_INT 36
8446: PUSH
8447: EMPTY
8448: LIST
8449: LIST
8450: LIST
8451: LIST
8452: LIST
8453: LIST
8454: LIST
8455: LIST
8456: LIST
8457: LIST
8458: LIST
8459: LIST
8460: LIST
8461: LIST
8462: LIST
8463: LIST
8464: LIST
8465: LIST
8466: LIST
8467: PUSH
8468: LD_INT 101
8470: PUSH
8471: LD_INT 102
8473: PUSH
8474: LD_INT 105
8476: PUSH
8477: LD_INT 106
8479: PUSH
8480: LD_INT 108
8482: PUSH
8483: LD_INT 109
8485: PUSH
8486: LD_INT 112
8488: PUSH
8489: LD_INT 116
8491: PUSH
8492: LD_INT 117
8494: PUSH
8495: LD_INT 118
8497: PUSH
8498: EMPTY
8499: LIST
8500: LIST
8501: LIST
8502: LIST
8503: LIST
8504: LIST
8505: LIST
8506: LIST
8507: LIST
8508: LIST
8509: PUSH
8510: EMPTY
8511: LIST
8512: LIST
8513: ST_TO_ADDR
8514: GO 11037
8516: LD_INT 7
8518: DOUBLE
8519: EQUAL
8520: IFTRUE 8524
8522: GO 8636
8524: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
8525: LD_ADDR_VAR 0 2
8529: PUSH
8530: LD_INT 2
8532: PUSH
8533: LD_INT 4
8535: PUSH
8536: LD_INT 5
8538: PUSH
8539: LD_INT 7
8541: PUSH
8542: LD_INT 11
8544: PUSH
8545: LD_INT 12
8547: PUSH
8548: LD_INT 15
8550: PUSH
8551: LD_INT 16
8553: PUSH
8554: LD_INT 20
8556: PUSH
8557: LD_INT 21
8559: PUSH
8560: LD_INT 22
8562: PUSH
8563: LD_INT 23
8565: PUSH
8566: LD_INT 25
8568: PUSH
8569: LD_INT 26
8571: PUSH
8572: EMPTY
8573: LIST
8574: LIST
8575: LIST
8576: LIST
8577: LIST
8578: LIST
8579: LIST
8580: LIST
8581: LIST
8582: LIST
8583: LIST
8584: LIST
8585: LIST
8586: LIST
8587: PUSH
8588: LD_INT 101
8590: PUSH
8591: LD_INT 102
8593: PUSH
8594: LD_INT 103
8596: PUSH
8597: LD_INT 105
8599: PUSH
8600: LD_INT 106
8602: PUSH
8603: LD_INT 108
8605: PUSH
8606: LD_INT 112
8608: PUSH
8609: LD_INT 116
8611: PUSH
8612: LD_INT 117
8614: PUSH
8615: LD_INT 118
8617: PUSH
8618: EMPTY
8619: LIST
8620: LIST
8621: LIST
8622: LIST
8623: LIST
8624: LIST
8625: LIST
8626: LIST
8627: LIST
8628: LIST
8629: PUSH
8630: EMPTY
8631: LIST
8632: LIST
8633: ST_TO_ADDR
8634: GO 11037
8636: LD_INT 8
8638: DOUBLE
8639: EQUAL
8640: IFTRUE 8644
8642: GO 8784
8644: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
8645: LD_ADDR_VAR 0 2
8649: PUSH
8650: LD_INT 2
8652: PUSH
8653: LD_INT 4
8655: PUSH
8656: LD_INT 5
8658: PUSH
8659: LD_INT 6
8661: PUSH
8662: LD_INT 7
8664: PUSH
8665: LD_INT 8
8667: PUSH
8668: LD_INT 11
8670: PUSH
8671: LD_INT 12
8673: PUSH
8674: LD_INT 15
8676: PUSH
8677: LD_INT 16
8679: PUSH
8680: LD_INT 20
8682: PUSH
8683: LD_INT 21
8685: PUSH
8686: LD_INT 22
8688: PUSH
8689: LD_INT 23
8691: PUSH
8692: LD_INT 25
8694: PUSH
8695: LD_INT 26
8697: PUSH
8698: LD_INT 30
8700: PUSH
8701: LD_INT 31
8703: PUSH
8704: LD_INT 32
8706: PUSH
8707: LD_INT 36
8709: PUSH
8710: EMPTY
8711: LIST
8712: LIST
8713: LIST
8714: LIST
8715: LIST
8716: LIST
8717: LIST
8718: LIST
8719: LIST
8720: LIST
8721: LIST
8722: LIST
8723: LIST
8724: LIST
8725: LIST
8726: LIST
8727: LIST
8728: LIST
8729: LIST
8730: LIST
8731: PUSH
8732: LD_INT 101
8734: PUSH
8735: LD_INT 102
8737: PUSH
8738: LD_INT 103
8740: PUSH
8741: LD_INT 105
8743: PUSH
8744: LD_INT 106
8746: PUSH
8747: LD_INT 108
8749: PUSH
8750: LD_INT 109
8752: PUSH
8753: LD_INT 112
8755: PUSH
8756: LD_INT 116
8758: PUSH
8759: LD_INT 117
8761: PUSH
8762: LD_INT 118
8764: PUSH
8765: EMPTY
8766: LIST
8767: LIST
8768: LIST
8769: LIST
8770: LIST
8771: LIST
8772: LIST
8773: LIST
8774: LIST
8775: LIST
8776: LIST
8777: PUSH
8778: EMPTY
8779: LIST
8780: LIST
8781: ST_TO_ADDR
8782: GO 11037
8784: LD_INT 9
8786: DOUBLE
8787: EQUAL
8788: IFTRUE 8792
8790: GO 8940
8792: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
8793: LD_ADDR_VAR 0 2
8797: PUSH
8798: LD_INT 2
8800: PUSH
8801: LD_INT 4
8803: PUSH
8804: LD_INT 5
8806: PUSH
8807: LD_INT 6
8809: PUSH
8810: LD_INT 7
8812: PUSH
8813: LD_INT 8
8815: PUSH
8816: LD_INT 11
8818: PUSH
8819: LD_INT 12
8821: PUSH
8822: LD_INT 15
8824: PUSH
8825: LD_INT 16
8827: PUSH
8828: LD_INT 20
8830: PUSH
8831: LD_INT 21
8833: PUSH
8834: LD_INT 22
8836: PUSH
8837: LD_INT 23
8839: PUSH
8840: LD_INT 25
8842: PUSH
8843: LD_INT 26
8845: PUSH
8846: LD_INT 28
8848: PUSH
8849: LD_INT 30
8851: PUSH
8852: LD_INT 31
8854: PUSH
8855: LD_INT 32
8857: PUSH
8858: LD_INT 36
8860: PUSH
8861: EMPTY
8862: LIST
8863: LIST
8864: LIST
8865: LIST
8866: LIST
8867: LIST
8868: LIST
8869: LIST
8870: LIST
8871: LIST
8872: LIST
8873: LIST
8874: LIST
8875: LIST
8876: LIST
8877: LIST
8878: LIST
8879: LIST
8880: LIST
8881: LIST
8882: LIST
8883: PUSH
8884: LD_INT 101
8886: PUSH
8887: LD_INT 102
8889: PUSH
8890: LD_INT 103
8892: PUSH
8893: LD_INT 105
8895: PUSH
8896: LD_INT 106
8898: PUSH
8899: LD_INT 108
8901: PUSH
8902: LD_INT 109
8904: PUSH
8905: LD_INT 112
8907: PUSH
8908: LD_INT 114
8910: PUSH
8911: LD_INT 116
8913: PUSH
8914: LD_INT 117
8916: PUSH
8917: LD_INT 118
8919: PUSH
8920: EMPTY
8921: LIST
8922: LIST
8923: LIST
8924: LIST
8925: LIST
8926: LIST
8927: LIST
8928: LIST
8929: LIST
8930: LIST
8931: LIST
8932: LIST
8933: PUSH
8934: EMPTY
8935: LIST
8936: LIST
8937: ST_TO_ADDR
8938: GO 11037
8940: LD_INT 10
8942: DOUBLE
8943: EQUAL
8944: IFTRUE 8948
8946: GO 9144
8948: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
8949: LD_ADDR_VAR 0 2
8953: PUSH
8954: LD_INT 2
8956: PUSH
8957: LD_INT 4
8959: PUSH
8960: LD_INT 5
8962: PUSH
8963: LD_INT 6
8965: PUSH
8966: LD_INT 7
8968: PUSH
8969: LD_INT 8
8971: PUSH
8972: LD_INT 9
8974: PUSH
8975: LD_INT 10
8977: PUSH
8978: LD_INT 11
8980: PUSH
8981: LD_INT 12
8983: PUSH
8984: LD_INT 13
8986: PUSH
8987: LD_INT 14
8989: PUSH
8990: LD_INT 15
8992: PUSH
8993: LD_INT 16
8995: PUSH
8996: LD_INT 17
8998: PUSH
8999: LD_INT 18
9001: PUSH
9002: LD_INT 19
9004: PUSH
9005: LD_INT 20
9007: PUSH
9008: LD_INT 21
9010: PUSH
9011: LD_INT 22
9013: PUSH
9014: LD_INT 23
9016: PUSH
9017: LD_INT 24
9019: PUSH
9020: LD_INT 25
9022: PUSH
9023: LD_INT 26
9025: PUSH
9026: LD_INT 28
9028: PUSH
9029: LD_INT 30
9031: PUSH
9032: LD_INT 31
9034: PUSH
9035: LD_INT 32
9037: PUSH
9038: LD_INT 36
9040: PUSH
9041: EMPTY
9042: LIST
9043: LIST
9044: LIST
9045: LIST
9046: LIST
9047: LIST
9048: LIST
9049: LIST
9050: LIST
9051: LIST
9052: LIST
9053: LIST
9054: LIST
9055: LIST
9056: LIST
9057: LIST
9058: LIST
9059: LIST
9060: LIST
9061: LIST
9062: LIST
9063: LIST
9064: LIST
9065: LIST
9066: LIST
9067: LIST
9068: LIST
9069: LIST
9070: LIST
9071: PUSH
9072: LD_INT 101
9074: PUSH
9075: LD_INT 102
9077: PUSH
9078: LD_INT 103
9080: PUSH
9081: LD_INT 104
9083: PUSH
9084: LD_INT 105
9086: PUSH
9087: LD_INT 106
9089: PUSH
9090: LD_INT 107
9092: PUSH
9093: LD_INT 108
9095: PUSH
9096: LD_INT 109
9098: PUSH
9099: LD_INT 110
9101: PUSH
9102: LD_INT 111
9104: PUSH
9105: LD_INT 112
9107: PUSH
9108: LD_INT 114
9110: PUSH
9111: LD_INT 116
9113: PUSH
9114: LD_INT 117
9116: PUSH
9117: LD_INT 118
9119: PUSH
9120: EMPTY
9121: LIST
9122: LIST
9123: LIST
9124: LIST
9125: LIST
9126: LIST
9127: LIST
9128: LIST
9129: LIST
9130: LIST
9131: LIST
9132: LIST
9133: LIST
9134: LIST
9135: LIST
9136: LIST
9137: PUSH
9138: EMPTY
9139: LIST
9140: LIST
9141: ST_TO_ADDR
9142: GO 11037
9144: LD_INT 11
9146: DOUBLE
9147: EQUAL
9148: IFTRUE 9152
9150: GO 9356
9152: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
9153: LD_ADDR_VAR 0 2
9157: PUSH
9158: LD_INT 2
9160: PUSH
9161: LD_INT 3
9163: PUSH
9164: LD_INT 4
9166: PUSH
9167: LD_INT 5
9169: PUSH
9170: LD_INT 6
9172: PUSH
9173: LD_INT 7
9175: PUSH
9176: LD_INT 8
9178: PUSH
9179: LD_INT 9
9181: PUSH
9182: LD_INT 10
9184: PUSH
9185: LD_INT 11
9187: PUSH
9188: LD_INT 12
9190: PUSH
9191: LD_INT 13
9193: PUSH
9194: LD_INT 14
9196: PUSH
9197: LD_INT 15
9199: PUSH
9200: LD_INT 16
9202: PUSH
9203: LD_INT 17
9205: PUSH
9206: LD_INT 18
9208: PUSH
9209: LD_INT 19
9211: PUSH
9212: LD_INT 20
9214: PUSH
9215: LD_INT 21
9217: PUSH
9218: LD_INT 22
9220: PUSH
9221: LD_INT 23
9223: PUSH
9224: LD_INT 24
9226: PUSH
9227: LD_INT 25
9229: PUSH
9230: LD_INT 26
9232: PUSH
9233: LD_INT 28
9235: PUSH
9236: LD_INT 30
9238: PUSH
9239: LD_INT 31
9241: PUSH
9242: LD_INT 32
9244: PUSH
9245: LD_INT 34
9247: PUSH
9248: LD_INT 36
9250: PUSH
9251: EMPTY
9252: LIST
9253: LIST
9254: LIST
9255: LIST
9256: LIST
9257: LIST
9258: LIST
9259: LIST
9260: LIST
9261: LIST
9262: LIST
9263: LIST
9264: LIST
9265: LIST
9266: LIST
9267: LIST
9268: LIST
9269: LIST
9270: LIST
9271: LIST
9272: LIST
9273: LIST
9274: LIST
9275: LIST
9276: LIST
9277: LIST
9278: LIST
9279: LIST
9280: LIST
9281: LIST
9282: LIST
9283: PUSH
9284: LD_INT 101
9286: PUSH
9287: LD_INT 102
9289: PUSH
9290: LD_INT 103
9292: PUSH
9293: LD_INT 104
9295: PUSH
9296: LD_INT 105
9298: PUSH
9299: LD_INT 106
9301: PUSH
9302: LD_INT 107
9304: PUSH
9305: LD_INT 108
9307: PUSH
9308: LD_INT 109
9310: PUSH
9311: LD_INT 110
9313: PUSH
9314: LD_INT 111
9316: PUSH
9317: LD_INT 112
9319: PUSH
9320: LD_INT 114
9322: PUSH
9323: LD_INT 116
9325: PUSH
9326: LD_INT 117
9328: PUSH
9329: LD_INT 118
9331: PUSH
9332: EMPTY
9333: LIST
9334: LIST
9335: LIST
9336: LIST
9337: LIST
9338: LIST
9339: LIST
9340: LIST
9341: LIST
9342: LIST
9343: LIST
9344: LIST
9345: LIST
9346: LIST
9347: LIST
9348: LIST
9349: PUSH
9350: EMPTY
9351: LIST
9352: LIST
9353: ST_TO_ADDR
9354: GO 11037
9356: LD_INT 12
9358: DOUBLE
9359: EQUAL
9360: IFTRUE 9364
9362: GO 9584
9364: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
9365: LD_ADDR_VAR 0 2
9369: PUSH
9370: LD_INT 1
9372: PUSH
9373: LD_INT 2
9375: PUSH
9376: LD_INT 3
9378: PUSH
9379: LD_INT 4
9381: PUSH
9382: LD_INT 5
9384: PUSH
9385: LD_INT 6
9387: PUSH
9388: LD_INT 7
9390: PUSH
9391: LD_INT 8
9393: PUSH
9394: LD_INT 9
9396: PUSH
9397: LD_INT 10
9399: PUSH
9400: LD_INT 11
9402: PUSH
9403: LD_INT 12
9405: PUSH
9406: LD_INT 13
9408: PUSH
9409: LD_INT 14
9411: PUSH
9412: LD_INT 15
9414: PUSH
9415: LD_INT 16
9417: PUSH
9418: LD_INT 17
9420: PUSH
9421: LD_INT 18
9423: PUSH
9424: LD_INT 19
9426: PUSH
9427: LD_INT 20
9429: PUSH
9430: LD_INT 21
9432: PUSH
9433: LD_INT 22
9435: PUSH
9436: LD_INT 23
9438: PUSH
9439: LD_INT 24
9441: PUSH
9442: LD_INT 25
9444: PUSH
9445: LD_INT 26
9447: PUSH
9448: LD_INT 27
9450: PUSH
9451: LD_INT 28
9453: PUSH
9454: LD_INT 30
9456: PUSH
9457: LD_INT 31
9459: PUSH
9460: LD_INT 32
9462: PUSH
9463: LD_INT 33
9465: PUSH
9466: LD_INT 34
9468: PUSH
9469: LD_INT 36
9471: PUSH
9472: EMPTY
9473: LIST
9474: LIST
9475: LIST
9476: LIST
9477: LIST
9478: LIST
9479: LIST
9480: LIST
9481: LIST
9482: LIST
9483: LIST
9484: LIST
9485: LIST
9486: LIST
9487: LIST
9488: LIST
9489: LIST
9490: LIST
9491: LIST
9492: LIST
9493: LIST
9494: LIST
9495: LIST
9496: LIST
9497: LIST
9498: LIST
9499: LIST
9500: LIST
9501: LIST
9502: LIST
9503: LIST
9504: LIST
9505: LIST
9506: LIST
9507: PUSH
9508: LD_INT 101
9510: PUSH
9511: LD_INT 102
9513: PUSH
9514: LD_INT 103
9516: PUSH
9517: LD_INT 104
9519: PUSH
9520: LD_INT 105
9522: PUSH
9523: LD_INT 106
9525: PUSH
9526: LD_INT 107
9528: PUSH
9529: LD_INT 108
9531: PUSH
9532: LD_INT 109
9534: PUSH
9535: LD_INT 110
9537: PUSH
9538: LD_INT 111
9540: PUSH
9541: LD_INT 112
9543: PUSH
9544: LD_INT 113
9546: PUSH
9547: LD_INT 114
9549: PUSH
9550: LD_INT 116
9552: PUSH
9553: LD_INT 117
9555: PUSH
9556: LD_INT 118
9558: PUSH
9559: EMPTY
9560: LIST
9561: LIST
9562: LIST
9563: LIST
9564: LIST
9565: LIST
9566: LIST
9567: LIST
9568: LIST
9569: LIST
9570: LIST
9571: LIST
9572: LIST
9573: LIST
9574: LIST
9575: LIST
9576: LIST
9577: PUSH
9578: EMPTY
9579: LIST
9580: LIST
9581: ST_TO_ADDR
9582: GO 11037
9584: LD_INT 13
9586: DOUBLE
9587: EQUAL
9588: IFTRUE 9592
9590: GO 9800
9592: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
9593: LD_ADDR_VAR 0 2
9597: PUSH
9598: LD_INT 1
9600: PUSH
9601: LD_INT 2
9603: PUSH
9604: LD_INT 3
9606: PUSH
9607: LD_INT 4
9609: PUSH
9610: LD_INT 5
9612: PUSH
9613: LD_INT 8
9615: PUSH
9616: LD_INT 9
9618: PUSH
9619: LD_INT 10
9621: PUSH
9622: LD_INT 11
9624: PUSH
9625: LD_INT 12
9627: PUSH
9628: LD_INT 14
9630: PUSH
9631: LD_INT 15
9633: PUSH
9634: LD_INT 16
9636: PUSH
9637: LD_INT 17
9639: PUSH
9640: LD_INT 18
9642: PUSH
9643: LD_INT 19
9645: PUSH
9646: LD_INT 20
9648: PUSH
9649: LD_INT 21
9651: PUSH
9652: LD_INT 22
9654: PUSH
9655: LD_INT 23
9657: PUSH
9658: LD_INT 24
9660: PUSH
9661: LD_INT 25
9663: PUSH
9664: LD_INT 26
9666: PUSH
9667: LD_INT 27
9669: PUSH
9670: LD_INT 28
9672: PUSH
9673: LD_INT 30
9675: PUSH
9676: LD_INT 31
9678: PUSH
9679: LD_INT 32
9681: PUSH
9682: LD_INT 33
9684: PUSH
9685: LD_INT 34
9687: PUSH
9688: LD_INT 36
9690: PUSH
9691: EMPTY
9692: LIST
9693: LIST
9694: LIST
9695: LIST
9696: LIST
9697: LIST
9698: LIST
9699: LIST
9700: LIST
9701: LIST
9702: LIST
9703: LIST
9704: LIST
9705: LIST
9706: LIST
9707: LIST
9708: LIST
9709: LIST
9710: LIST
9711: LIST
9712: LIST
9713: LIST
9714: LIST
9715: LIST
9716: LIST
9717: LIST
9718: LIST
9719: LIST
9720: LIST
9721: LIST
9722: LIST
9723: PUSH
9724: LD_INT 101
9726: PUSH
9727: LD_INT 102
9729: PUSH
9730: LD_INT 103
9732: PUSH
9733: LD_INT 104
9735: PUSH
9736: LD_INT 105
9738: PUSH
9739: LD_INT 106
9741: PUSH
9742: LD_INT 107
9744: PUSH
9745: LD_INT 108
9747: PUSH
9748: LD_INT 109
9750: PUSH
9751: LD_INT 110
9753: PUSH
9754: LD_INT 111
9756: PUSH
9757: LD_INT 112
9759: PUSH
9760: LD_INT 113
9762: PUSH
9763: LD_INT 114
9765: PUSH
9766: LD_INT 116
9768: PUSH
9769: LD_INT 117
9771: PUSH
9772: LD_INT 118
9774: PUSH
9775: EMPTY
9776: LIST
9777: LIST
9778: LIST
9779: LIST
9780: LIST
9781: LIST
9782: LIST
9783: LIST
9784: LIST
9785: LIST
9786: LIST
9787: LIST
9788: LIST
9789: LIST
9790: LIST
9791: LIST
9792: LIST
9793: PUSH
9794: EMPTY
9795: LIST
9796: LIST
9797: ST_TO_ADDR
9798: GO 11037
9800: LD_INT 14
9802: DOUBLE
9803: EQUAL
9804: IFTRUE 9808
9806: GO 10032
9808: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
9809: LD_ADDR_VAR 0 2
9813: PUSH
9814: LD_INT 1
9816: PUSH
9817: LD_INT 2
9819: PUSH
9820: LD_INT 3
9822: PUSH
9823: LD_INT 4
9825: PUSH
9826: LD_INT 5
9828: PUSH
9829: LD_INT 6
9831: PUSH
9832: LD_INT 7
9834: PUSH
9835: LD_INT 8
9837: PUSH
9838: LD_INT 9
9840: PUSH
9841: LD_INT 10
9843: PUSH
9844: LD_INT 11
9846: PUSH
9847: LD_INT 12
9849: PUSH
9850: LD_INT 13
9852: PUSH
9853: LD_INT 14
9855: PUSH
9856: LD_INT 15
9858: PUSH
9859: LD_INT 16
9861: PUSH
9862: LD_INT 17
9864: PUSH
9865: LD_INT 18
9867: PUSH
9868: LD_INT 19
9870: PUSH
9871: LD_INT 20
9873: PUSH
9874: LD_INT 21
9876: PUSH
9877: LD_INT 22
9879: PUSH
9880: LD_INT 23
9882: PUSH
9883: LD_INT 24
9885: PUSH
9886: LD_INT 25
9888: PUSH
9889: LD_INT 26
9891: PUSH
9892: LD_INT 27
9894: PUSH
9895: LD_INT 28
9897: PUSH
9898: LD_INT 29
9900: PUSH
9901: LD_INT 30
9903: PUSH
9904: LD_INT 31
9906: PUSH
9907: LD_INT 32
9909: PUSH
9910: LD_INT 33
9912: PUSH
9913: LD_INT 34
9915: PUSH
9916: LD_INT 36
9918: PUSH
9919: EMPTY
9920: LIST
9921: LIST
9922: LIST
9923: LIST
9924: LIST
9925: LIST
9926: LIST
9927: LIST
9928: LIST
9929: LIST
9930: LIST
9931: LIST
9932: LIST
9933: LIST
9934: LIST
9935: LIST
9936: LIST
9937: LIST
9938: LIST
9939: LIST
9940: LIST
9941: LIST
9942: LIST
9943: LIST
9944: LIST
9945: LIST
9946: LIST
9947: LIST
9948: LIST
9949: LIST
9950: LIST
9951: LIST
9952: LIST
9953: LIST
9954: LIST
9955: PUSH
9956: LD_INT 101
9958: PUSH
9959: LD_INT 102
9961: PUSH
9962: LD_INT 103
9964: PUSH
9965: LD_INT 104
9967: PUSH
9968: LD_INT 105
9970: PUSH
9971: LD_INT 106
9973: PUSH
9974: LD_INT 107
9976: PUSH
9977: LD_INT 108
9979: PUSH
9980: LD_INT 109
9982: PUSH
9983: LD_INT 110
9985: PUSH
9986: LD_INT 111
9988: PUSH
9989: LD_INT 112
9991: PUSH
9992: LD_INT 113
9994: PUSH
9995: LD_INT 114
9997: PUSH
9998: LD_INT 116
10000: PUSH
10001: LD_INT 117
10003: PUSH
10004: LD_INT 118
10006: PUSH
10007: EMPTY
10008: LIST
10009: LIST
10010: LIST
10011: LIST
10012: LIST
10013: LIST
10014: LIST
10015: LIST
10016: LIST
10017: LIST
10018: LIST
10019: LIST
10020: LIST
10021: LIST
10022: LIST
10023: LIST
10024: LIST
10025: PUSH
10026: EMPTY
10027: LIST
10028: LIST
10029: ST_TO_ADDR
10030: GO 11037
10032: LD_INT 15
10034: DOUBLE
10035: EQUAL
10036: IFTRUE 10040
10038: GO 10264
10040: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
10041: LD_ADDR_VAR 0 2
10045: PUSH
10046: LD_INT 1
10048: PUSH
10049: LD_INT 2
10051: PUSH
10052: LD_INT 3
10054: PUSH
10055: LD_INT 4
10057: PUSH
10058: LD_INT 5
10060: PUSH
10061: LD_INT 6
10063: PUSH
10064: LD_INT 7
10066: PUSH
10067: LD_INT 8
10069: PUSH
10070: LD_INT 9
10072: PUSH
10073: LD_INT 10
10075: PUSH
10076: LD_INT 11
10078: PUSH
10079: LD_INT 12
10081: PUSH
10082: LD_INT 13
10084: PUSH
10085: LD_INT 14
10087: PUSH
10088: LD_INT 15
10090: PUSH
10091: LD_INT 16
10093: PUSH
10094: LD_INT 17
10096: PUSH
10097: LD_INT 18
10099: PUSH
10100: LD_INT 19
10102: PUSH
10103: LD_INT 20
10105: PUSH
10106: LD_INT 21
10108: PUSH
10109: LD_INT 22
10111: PUSH
10112: LD_INT 23
10114: PUSH
10115: LD_INT 24
10117: PUSH
10118: LD_INT 25
10120: PUSH
10121: LD_INT 26
10123: PUSH
10124: LD_INT 27
10126: PUSH
10127: LD_INT 28
10129: PUSH
10130: LD_INT 29
10132: PUSH
10133: LD_INT 30
10135: PUSH
10136: LD_INT 31
10138: PUSH
10139: LD_INT 32
10141: PUSH
10142: LD_INT 33
10144: PUSH
10145: LD_INT 34
10147: PUSH
10148: LD_INT 36
10150: PUSH
10151: EMPTY
10152: LIST
10153: LIST
10154: LIST
10155: LIST
10156: LIST
10157: LIST
10158: LIST
10159: LIST
10160: LIST
10161: LIST
10162: LIST
10163: LIST
10164: LIST
10165: LIST
10166: LIST
10167: LIST
10168: LIST
10169: LIST
10170: LIST
10171: LIST
10172: LIST
10173: LIST
10174: LIST
10175: LIST
10176: LIST
10177: LIST
10178: LIST
10179: LIST
10180: LIST
10181: LIST
10182: LIST
10183: LIST
10184: LIST
10185: LIST
10186: LIST
10187: PUSH
10188: LD_INT 101
10190: PUSH
10191: LD_INT 102
10193: PUSH
10194: LD_INT 103
10196: PUSH
10197: LD_INT 104
10199: PUSH
10200: LD_INT 105
10202: PUSH
10203: LD_INT 106
10205: PUSH
10206: LD_INT 107
10208: PUSH
10209: LD_INT 108
10211: PUSH
10212: LD_INT 109
10214: PUSH
10215: LD_INT 110
10217: PUSH
10218: LD_INT 111
10220: PUSH
10221: LD_INT 112
10223: PUSH
10224: LD_INT 113
10226: PUSH
10227: LD_INT 114
10229: PUSH
10230: LD_INT 116
10232: PUSH
10233: LD_INT 117
10235: PUSH
10236: LD_INT 118
10238: PUSH
10239: EMPTY
10240: LIST
10241: LIST
10242: LIST
10243: LIST
10244: LIST
10245: LIST
10246: LIST
10247: LIST
10248: LIST
10249: LIST
10250: LIST
10251: LIST
10252: LIST
10253: LIST
10254: LIST
10255: LIST
10256: LIST
10257: PUSH
10258: EMPTY
10259: LIST
10260: LIST
10261: ST_TO_ADDR
10262: GO 11037
10264: LD_INT 16
10266: DOUBLE
10267: EQUAL
10268: IFTRUE 10272
10270: GO 10408
10272: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
10273: LD_ADDR_VAR 0 2
10277: PUSH
10278: LD_INT 2
10280: PUSH
10281: LD_INT 4
10283: PUSH
10284: LD_INT 5
10286: PUSH
10287: LD_INT 7
10289: PUSH
10290: LD_INT 11
10292: PUSH
10293: LD_INT 12
10295: PUSH
10296: LD_INT 15
10298: PUSH
10299: LD_INT 16
10301: PUSH
10302: LD_INT 20
10304: PUSH
10305: LD_INT 21
10307: PUSH
10308: LD_INT 22
10310: PUSH
10311: LD_INT 23
10313: PUSH
10314: LD_INT 25
10316: PUSH
10317: LD_INT 26
10319: PUSH
10320: LD_INT 30
10322: PUSH
10323: LD_INT 31
10325: PUSH
10326: LD_INT 32
10328: PUSH
10329: LD_INT 33
10331: PUSH
10332: LD_INT 34
10334: PUSH
10335: EMPTY
10336: LIST
10337: LIST
10338: LIST
10339: LIST
10340: LIST
10341: LIST
10342: LIST
10343: LIST
10344: LIST
10345: LIST
10346: LIST
10347: LIST
10348: LIST
10349: LIST
10350: LIST
10351: LIST
10352: LIST
10353: LIST
10354: LIST
10355: PUSH
10356: LD_INT 101
10358: PUSH
10359: LD_INT 102
10361: PUSH
10362: LD_INT 103
10364: PUSH
10365: LD_INT 106
10367: PUSH
10368: LD_INT 108
10370: PUSH
10371: LD_INT 112
10373: PUSH
10374: LD_INT 113
10376: PUSH
10377: LD_INT 114
10379: PUSH
10380: LD_INT 116
10382: PUSH
10383: LD_INT 117
10385: PUSH
10386: LD_INT 118
10388: PUSH
10389: EMPTY
10390: LIST
10391: LIST
10392: LIST
10393: LIST
10394: LIST
10395: LIST
10396: LIST
10397: LIST
10398: LIST
10399: LIST
10400: LIST
10401: PUSH
10402: EMPTY
10403: LIST
10404: LIST
10405: ST_TO_ADDR
10406: GO 11037
10408: LD_INT 17
10410: DOUBLE
10411: EQUAL
10412: IFTRUE 10416
10414: GO 10640
10416: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
10417: LD_ADDR_VAR 0 2
10421: PUSH
10422: LD_INT 1
10424: PUSH
10425: LD_INT 2
10427: PUSH
10428: LD_INT 3
10430: PUSH
10431: LD_INT 4
10433: PUSH
10434: LD_INT 5
10436: PUSH
10437: LD_INT 6
10439: PUSH
10440: LD_INT 7
10442: PUSH
10443: LD_INT 8
10445: PUSH
10446: LD_INT 9
10448: PUSH
10449: LD_INT 10
10451: PUSH
10452: LD_INT 11
10454: PUSH
10455: LD_INT 12
10457: PUSH
10458: LD_INT 13
10460: PUSH
10461: LD_INT 14
10463: PUSH
10464: LD_INT 15
10466: PUSH
10467: LD_INT 16
10469: PUSH
10470: LD_INT 17
10472: PUSH
10473: LD_INT 18
10475: PUSH
10476: LD_INT 19
10478: PUSH
10479: LD_INT 20
10481: PUSH
10482: LD_INT 21
10484: PUSH
10485: LD_INT 22
10487: PUSH
10488: LD_INT 23
10490: PUSH
10491: LD_INT 24
10493: PUSH
10494: LD_INT 25
10496: PUSH
10497: LD_INT 26
10499: PUSH
10500: LD_INT 27
10502: PUSH
10503: LD_INT 28
10505: PUSH
10506: LD_INT 29
10508: PUSH
10509: LD_INT 30
10511: PUSH
10512: LD_INT 31
10514: PUSH
10515: LD_INT 32
10517: PUSH
10518: LD_INT 33
10520: PUSH
10521: LD_INT 34
10523: PUSH
10524: LD_INT 36
10526: PUSH
10527: EMPTY
10528: LIST
10529: LIST
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: LIST
10535: LIST
10536: LIST
10537: LIST
10538: LIST
10539: LIST
10540: LIST
10541: LIST
10542: LIST
10543: LIST
10544: LIST
10545: LIST
10546: LIST
10547: LIST
10548: LIST
10549: LIST
10550: LIST
10551: LIST
10552: LIST
10553: LIST
10554: LIST
10555: LIST
10556: LIST
10557: LIST
10558: LIST
10559: LIST
10560: LIST
10561: LIST
10562: LIST
10563: PUSH
10564: LD_INT 101
10566: PUSH
10567: LD_INT 102
10569: PUSH
10570: LD_INT 103
10572: PUSH
10573: LD_INT 104
10575: PUSH
10576: LD_INT 105
10578: PUSH
10579: LD_INT 106
10581: PUSH
10582: LD_INT 107
10584: PUSH
10585: LD_INT 108
10587: PUSH
10588: LD_INT 109
10590: PUSH
10591: LD_INT 110
10593: PUSH
10594: LD_INT 111
10596: PUSH
10597: LD_INT 112
10599: PUSH
10600: LD_INT 113
10602: PUSH
10603: LD_INT 114
10605: PUSH
10606: LD_INT 116
10608: PUSH
10609: LD_INT 117
10611: PUSH
10612: LD_INT 118
10614: PUSH
10615: EMPTY
10616: LIST
10617: LIST
10618: LIST
10619: LIST
10620: LIST
10621: LIST
10622: LIST
10623: LIST
10624: LIST
10625: LIST
10626: LIST
10627: LIST
10628: LIST
10629: LIST
10630: LIST
10631: LIST
10632: LIST
10633: PUSH
10634: EMPTY
10635: LIST
10636: LIST
10637: ST_TO_ADDR
10638: GO 11037
10640: LD_INT 18
10642: DOUBLE
10643: EQUAL
10644: IFTRUE 10648
10646: GO 10796
10648: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
10649: LD_ADDR_VAR 0 2
10653: PUSH
10654: LD_INT 2
10656: PUSH
10657: LD_INT 4
10659: PUSH
10660: LD_INT 5
10662: PUSH
10663: LD_INT 7
10665: PUSH
10666: LD_INT 11
10668: PUSH
10669: LD_INT 12
10671: PUSH
10672: LD_INT 15
10674: PUSH
10675: LD_INT 16
10677: PUSH
10678: LD_INT 20
10680: PUSH
10681: LD_INT 21
10683: PUSH
10684: LD_INT 22
10686: PUSH
10687: LD_INT 23
10689: PUSH
10690: LD_INT 25
10692: PUSH
10693: LD_INT 26
10695: PUSH
10696: LD_INT 30
10698: PUSH
10699: LD_INT 31
10701: PUSH
10702: LD_INT 32
10704: PUSH
10705: LD_INT 33
10707: PUSH
10708: LD_INT 34
10710: PUSH
10711: LD_INT 35
10713: PUSH
10714: LD_INT 36
10716: PUSH
10717: EMPTY
10718: LIST
10719: LIST
10720: LIST
10721: LIST
10722: LIST
10723: LIST
10724: LIST
10725: LIST
10726: LIST
10727: LIST
10728: LIST
10729: LIST
10730: LIST
10731: LIST
10732: LIST
10733: LIST
10734: LIST
10735: LIST
10736: LIST
10737: LIST
10738: LIST
10739: PUSH
10740: LD_INT 101
10742: PUSH
10743: LD_INT 102
10745: PUSH
10746: LD_INT 103
10748: PUSH
10749: LD_INT 106
10751: PUSH
10752: LD_INT 108
10754: PUSH
10755: LD_INT 112
10757: PUSH
10758: LD_INT 113
10760: PUSH
10761: LD_INT 114
10763: PUSH
10764: LD_INT 115
10766: PUSH
10767: LD_INT 116
10769: PUSH
10770: LD_INT 117
10772: PUSH
10773: LD_INT 118
10775: PUSH
10776: EMPTY
10777: LIST
10778: LIST
10779: LIST
10780: LIST
10781: LIST
10782: LIST
10783: LIST
10784: LIST
10785: LIST
10786: LIST
10787: LIST
10788: LIST
10789: PUSH
10790: EMPTY
10791: LIST
10792: LIST
10793: ST_TO_ADDR
10794: GO 11037
10796: LD_INT 19
10798: DOUBLE
10799: EQUAL
10800: IFTRUE 10804
10802: GO 11036
10804: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
10805: LD_ADDR_VAR 0 2
10809: PUSH
10810: LD_INT 1
10812: PUSH
10813: LD_INT 2
10815: PUSH
10816: LD_INT 3
10818: PUSH
10819: LD_INT 4
10821: PUSH
10822: LD_INT 5
10824: PUSH
10825: LD_INT 6
10827: PUSH
10828: LD_INT 7
10830: PUSH
10831: LD_INT 8
10833: PUSH
10834: LD_INT 9
10836: PUSH
10837: LD_INT 10
10839: PUSH
10840: LD_INT 11
10842: PUSH
10843: LD_INT 12
10845: PUSH
10846: LD_INT 13
10848: PUSH
10849: LD_INT 14
10851: PUSH
10852: LD_INT 15
10854: PUSH
10855: LD_INT 16
10857: PUSH
10858: LD_INT 17
10860: PUSH
10861: LD_INT 18
10863: PUSH
10864: LD_INT 19
10866: PUSH
10867: LD_INT 20
10869: PUSH
10870: LD_INT 21
10872: PUSH
10873: LD_INT 22
10875: PUSH
10876: LD_INT 23
10878: PUSH
10879: LD_INT 24
10881: PUSH
10882: LD_INT 25
10884: PUSH
10885: LD_INT 26
10887: PUSH
10888: LD_INT 27
10890: PUSH
10891: LD_INT 28
10893: PUSH
10894: LD_INT 29
10896: PUSH
10897: LD_INT 30
10899: PUSH
10900: LD_INT 31
10902: PUSH
10903: LD_INT 32
10905: PUSH
10906: LD_INT 33
10908: PUSH
10909: LD_INT 34
10911: PUSH
10912: LD_INT 35
10914: PUSH
10915: LD_INT 36
10917: PUSH
10918: EMPTY
10919: LIST
10920: LIST
10921: LIST
10922: LIST
10923: LIST
10924: LIST
10925: LIST
10926: LIST
10927: LIST
10928: LIST
10929: LIST
10930: LIST
10931: LIST
10932: LIST
10933: LIST
10934: LIST
10935: LIST
10936: LIST
10937: LIST
10938: LIST
10939: LIST
10940: LIST
10941: LIST
10942: LIST
10943: LIST
10944: LIST
10945: LIST
10946: LIST
10947: LIST
10948: LIST
10949: LIST
10950: LIST
10951: LIST
10952: LIST
10953: LIST
10954: LIST
10955: PUSH
10956: LD_INT 101
10958: PUSH
10959: LD_INT 102
10961: PUSH
10962: LD_INT 103
10964: PUSH
10965: LD_INT 104
10967: PUSH
10968: LD_INT 105
10970: PUSH
10971: LD_INT 106
10973: PUSH
10974: LD_INT 107
10976: PUSH
10977: LD_INT 108
10979: PUSH
10980: LD_INT 109
10982: PUSH
10983: LD_INT 110
10985: PUSH
10986: LD_INT 111
10988: PUSH
10989: LD_INT 112
10991: PUSH
10992: LD_INT 113
10994: PUSH
10995: LD_INT 114
10997: PUSH
10998: LD_INT 115
11000: PUSH
11001: LD_INT 116
11003: PUSH
11004: LD_INT 117
11006: PUSH
11007: LD_INT 118
11009: PUSH
11010: EMPTY
11011: LIST
11012: LIST
11013: LIST
11014: LIST
11015: LIST
11016: LIST
11017: LIST
11018: LIST
11019: LIST
11020: LIST
11021: LIST
11022: LIST
11023: LIST
11024: LIST
11025: LIST
11026: LIST
11027: LIST
11028: LIST
11029: PUSH
11030: EMPTY
11031: LIST
11032: LIST
11033: ST_TO_ADDR
11034: GO 11037
11036: POP
// end else
11037: GO 11268
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
11039: LD_ADDR_VAR 0 2
11043: PUSH
11044: LD_INT 1
11046: PUSH
11047: LD_INT 2
11049: PUSH
11050: LD_INT 3
11052: PUSH
11053: LD_INT 4
11055: PUSH
11056: LD_INT 5
11058: PUSH
11059: LD_INT 6
11061: PUSH
11062: LD_INT 7
11064: PUSH
11065: LD_INT 8
11067: PUSH
11068: LD_INT 9
11070: PUSH
11071: LD_INT 10
11073: PUSH
11074: LD_INT 11
11076: PUSH
11077: LD_INT 12
11079: PUSH
11080: LD_INT 13
11082: PUSH
11083: LD_INT 14
11085: PUSH
11086: LD_INT 15
11088: PUSH
11089: LD_INT 16
11091: PUSH
11092: LD_INT 17
11094: PUSH
11095: LD_INT 18
11097: PUSH
11098: LD_INT 19
11100: PUSH
11101: LD_INT 20
11103: PUSH
11104: LD_INT 21
11106: PUSH
11107: LD_INT 22
11109: PUSH
11110: LD_INT 23
11112: PUSH
11113: LD_INT 24
11115: PUSH
11116: LD_INT 25
11118: PUSH
11119: LD_INT 26
11121: PUSH
11122: LD_INT 27
11124: PUSH
11125: LD_INT 28
11127: PUSH
11128: LD_INT 29
11130: PUSH
11131: LD_INT 30
11133: PUSH
11134: LD_INT 31
11136: PUSH
11137: LD_INT 32
11139: PUSH
11140: LD_INT 33
11142: PUSH
11143: LD_INT 34
11145: PUSH
11146: LD_INT 35
11148: PUSH
11149: LD_INT 36
11151: PUSH
11152: EMPTY
11153: LIST
11154: LIST
11155: LIST
11156: LIST
11157: LIST
11158: LIST
11159: LIST
11160: LIST
11161: LIST
11162: LIST
11163: LIST
11164: LIST
11165: LIST
11166: LIST
11167: LIST
11168: LIST
11169: LIST
11170: LIST
11171: LIST
11172: LIST
11173: LIST
11174: LIST
11175: LIST
11176: LIST
11177: LIST
11178: LIST
11179: LIST
11180: LIST
11181: LIST
11182: LIST
11183: LIST
11184: LIST
11185: LIST
11186: LIST
11187: LIST
11188: LIST
11189: PUSH
11190: LD_INT 101
11192: PUSH
11193: LD_INT 102
11195: PUSH
11196: LD_INT 103
11198: PUSH
11199: LD_INT 104
11201: PUSH
11202: LD_INT 105
11204: PUSH
11205: LD_INT 106
11207: PUSH
11208: LD_INT 107
11210: PUSH
11211: LD_INT 108
11213: PUSH
11214: LD_INT 109
11216: PUSH
11217: LD_INT 110
11219: PUSH
11220: LD_INT 111
11222: PUSH
11223: LD_INT 112
11225: PUSH
11226: LD_INT 113
11228: PUSH
11229: LD_INT 114
11231: PUSH
11232: LD_INT 115
11234: PUSH
11235: LD_INT 116
11237: PUSH
11238: LD_INT 117
11240: PUSH
11241: LD_INT 118
11243: PUSH
11244: EMPTY
11245: LIST
11246: LIST
11247: LIST
11248: LIST
11249: LIST
11250: LIST
11251: LIST
11252: LIST
11253: LIST
11254: LIST
11255: LIST
11256: LIST
11257: LIST
11258: LIST
11259: LIST
11260: LIST
11261: LIST
11262: LIST
11263: PUSH
11264: EMPTY
11265: LIST
11266: LIST
11267: ST_TO_ADDR
// if result then
11268: LD_VAR 0 2
11272: IFFALSE 12058
// begin normal :=  ;
11274: LD_ADDR_VAR 0 5
11278: PUSH
11279: LD_STRING 
11281: ST_TO_ADDR
// hardcore :=  ;
11282: LD_ADDR_VAR 0 6
11286: PUSH
11287: LD_STRING 
11289: ST_TO_ADDR
// active :=  ;
11290: LD_ADDR_VAR 0 7
11294: PUSH
11295: LD_STRING 
11297: ST_TO_ADDR
// for i = 1 to normalCounter do
11298: LD_ADDR_VAR 0 8
11302: PUSH
11303: DOUBLE
11304: LD_INT 1
11306: DEC
11307: ST_TO_ADDR
11308: LD_EXP 27
11312: PUSH
11313: FOR_TO
11314: IFFALSE 11415
// begin tmp := 0 ;
11316: LD_ADDR_VAR 0 3
11320: PUSH
11321: LD_STRING 0
11323: ST_TO_ADDR
// if result [ 1 ] then
11324: LD_VAR 0 2
11328: PUSH
11329: LD_INT 1
11331: ARRAY
11332: IFFALSE 11397
// if result [ 1 ] [ 1 ] = i then
11334: LD_VAR 0 2
11338: PUSH
11339: LD_INT 1
11341: ARRAY
11342: PUSH
11343: LD_INT 1
11345: ARRAY
11346: PUSH
11347: LD_VAR 0 8
11351: EQUAL
11352: IFFALSE 11397
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
11354: LD_ADDR_VAR 0 2
11358: PUSH
11359: LD_VAR 0 2
11363: PPUSH
11364: LD_INT 1
11366: PPUSH
11367: LD_VAR 0 2
11371: PUSH
11372: LD_INT 1
11374: ARRAY
11375: PPUSH
11376: LD_INT 1
11378: PPUSH
11379: CALL_OW 3
11383: PPUSH
11384: CALL_OW 1
11388: ST_TO_ADDR
// tmp := 1 ;
11389: LD_ADDR_VAR 0 3
11393: PUSH
11394: LD_STRING 1
11396: ST_TO_ADDR
// end ; normal := normal & tmp ;
11397: LD_ADDR_VAR 0 5
11401: PUSH
11402: LD_VAR 0 5
11406: PUSH
11407: LD_VAR 0 3
11411: STR
11412: ST_TO_ADDR
// end ;
11413: GO 11313
11415: POP
11416: POP
// for i = 1 to hardcoreCounter do
11417: LD_ADDR_VAR 0 8
11421: PUSH
11422: DOUBLE
11423: LD_INT 1
11425: DEC
11426: ST_TO_ADDR
11427: LD_EXP 28
11431: PUSH
11432: FOR_TO
11433: IFFALSE 11538
// begin tmp := 0 ;
11435: LD_ADDR_VAR 0 3
11439: PUSH
11440: LD_STRING 0
11442: ST_TO_ADDR
// if result [ 2 ] then
11443: LD_VAR 0 2
11447: PUSH
11448: LD_INT 2
11450: ARRAY
11451: IFFALSE 11520
// if result [ 2 ] [ 1 ] = 100 + i then
11453: LD_VAR 0 2
11457: PUSH
11458: LD_INT 2
11460: ARRAY
11461: PUSH
11462: LD_INT 1
11464: ARRAY
11465: PUSH
11466: LD_INT 100
11468: PUSH
11469: LD_VAR 0 8
11473: PLUS
11474: EQUAL
11475: IFFALSE 11520
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
11477: LD_ADDR_VAR 0 2
11481: PUSH
11482: LD_VAR 0 2
11486: PPUSH
11487: LD_INT 2
11489: PPUSH
11490: LD_VAR 0 2
11494: PUSH
11495: LD_INT 2
11497: ARRAY
11498: PPUSH
11499: LD_INT 1
11501: PPUSH
11502: CALL_OW 3
11506: PPUSH
11507: CALL_OW 1
11511: ST_TO_ADDR
// tmp := 1 ;
11512: LD_ADDR_VAR 0 3
11516: PUSH
11517: LD_STRING 1
11519: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
11520: LD_ADDR_VAR 0 6
11524: PUSH
11525: LD_VAR 0 6
11529: PUSH
11530: LD_VAR 0 3
11534: STR
11535: ST_TO_ADDR
// end ;
11536: GO 11432
11538: POP
11539: POP
// if isGameLoad then
11540: LD_VAR 0 1
11544: IFFALSE 12019
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
11546: LD_ADDR_VAR 0 4
11550: PUSH
11551: LD_EXP 31
11555: PUSH
11556: LD_EXP 30
11560: PUSH
11561: LD_EXP 32
11565: PUSH
11566: LD_EXP 29
11570: PUSH
11571: LD_EXP 33
11575: PUSH
11576: LD_EXP 34
11580: PUSH
11581: LD_EXP 35
11585: PUSH
11586: LD_EXP 36
11590: PUSH
11591: LD_EXP 37
11595: PUSH
11596: LD_EXP 38
11600: PUSH
11601: LD_EXP 39
11605: PUSH
11606: LD_EXP 40
11610: PUSH
11611: LD_EXP 41
11615: PUSH
11616: LD_EXP 42
11620: PUSH
11621: LD_EXP 50
11625: PUSH
11626: LD_EXP 51
11630: PUSH
11631: LD_EXP 52
11635: PUSH
11636: LD_EXP 53
11640: PUSH
11641: LD_EXP 55
11645: PUSH
11646: LD_EXP 56
11650: PUSH
11651: LD_EXP 57
11655: PUSH
11656: LD_EXP 60
11660: PUSH
11661: LD_EXP 62
11665: PUSH
11666: LD_EXP 63
11670: PUSH
11671: LD_EXP 64
11675: PUSH
11676: LD_EXP 66
11680: PUSH
11681: LD_EXP 67
11685: PUSH
11686: LD_EXP 70
11690: PUSH
11691: LD_EXP 71
11695: PUSH
11696: LD_EXP 72
11700: PUSH
11701: LD_EXP 73
11705: PUSH
11706: LD_EXP 74
11710: PUSH
11711: LD_EXP 75
11715: PUSH
11716: LD_EXP 76
11720: PUSH
11721: LD_EXP 77
11725: PUSH
11726: LD_EXP 78
11730: PUSH
11731: LD_EXP 43
11735: PUSH
11736: LD_EXP 44
11740: PUSH
11741: LD_EXP 47
11745: PUSH
11746: LD_EXP 48
11750: PUSH
11751: LD_EXP 49
11755: PUSH
11756: LD_EXP 45
11760: PUSH
11761: LD_EXP 46
11765: PUSH
11766: LD_EXP 54
11770: PUSH
11771: LD_EXP 58
11775: PUSH
11776: LD_EXP 59
11780: PUSH
11781: LD_EXP 61
11785: PUSH
11786: LD_EXP 65
11790: PUSH
11791: LD_EXP 68
11795: PUSH
11796: LD_EXP 69
11800: PUSH
11801: LD_EXP 79
11805: PUSH
11806: LD_EXP 80
11810: PUSH
11811: LD_EXP 81
11815: PUSH
11816: LD_EXP 82
11820: PUSH
11821: EMPTY
11822: LIST
11823: LIST
11824: LIST
11825: LIST
11826: LIST
11827: LIST
11828: LIST
11829: LIST
11830: LIST
11831: LIST
11832: LIST
11833: LIST
11834: LIST
11835: LIST
11836: LIST
11837: LIST
11838: LIST
11839: LIST
11840: LIST
11841: LIST
11842: LIST
11843: LIST
11844: LIST
11845: LIST
11846: LIST
11847: LIST
11848: LIST
11849: LIST
11850: LIST
11851: LIST
11852: LIST
11853: LIST
11854: LIST
11855: LIST
11856: LIST
11857: LIST
11858: LIST
11859: LIST
11860: LIST
11861: LIST
11862: LIST
11863: LIST
11864: LIST
11865: LIST
11866: LIST
11867: LIST
11868: LIST
11869: LIST
11870: LIST
11871: LIST
11872: LIST
11873: LIST
11874: LIST
11875: LIST
11876: ST_TO_ADDR
// tmp :=  ;
11877: LD_ADDR_VAR 0 3
11881: PUSH
11882: LD_STRING 
11884: ST_TO_ADDR
// for i = 1 to normalCounter do
11885: LD_ADDR_VAR 0 8
11889: PUSH
11890: DOUBLE
11891: LD_INT 1
11893: DEC
11894: ST_TO_ADDR
11895: LD_EXP 27
11899: PUSH
11900: FOR_TO
11901: IFFALSE 11937
// begin if flags [ i ] then
11903: LD_VAR 0 4
11907: PUSH
11908: LD_VAR 0 8
11912: ARRAY
11913: IFFALSE 11935
// tmp := tmp & i & ; ;
11915: LD_ADDR_VAR 0 3
11919: PUSH
11920: LD_VAR 0 3
11924: PUSH
11925: LD_VAR 0 8
11929: STR
11930: PUSH
11931: LD_STRING ;
11933: STR
11934: ST_TO_ADDR
// end ;
11935: GO 11900
11937: POP
11938: POP
// for i = 1 to hardcoreCounter do
11939: LD_ADDR_VAR 0 8
11943: PUSH
11944: DOUBLE
11945: LD_INT 1
11947: DEC
11948: ST_TO_ADDR
11949: LD_EXP 28
11953: PUSH
11954: FOR_TO
11955: IFFALSE 12001
// begin if flags [ normalCounter + i ] then
11957: LD_VAR 0 4
11961: PUSH
11962: LD_EXP 27
11966: PUSH
11967: LD_VAR 0 8
11971: PLUS
11972: ARRAY
11973: IFFALSE 11999
// tmp := tmp & ( 100 + i ) & ; ;
11975: LD_ADDR_VAR 0 3
11979: PUSH
11980: LD_VAR 0 3
11984: PUSH
11985: LD_INT 100
11987: PUSH
11988: LD_VAR 0 8
11992: PLUS
11993: STR
11994: PUSH
11995: LD_STRING ;
11997: STR
11998: ST_TO_ADDR
// end ;
11999: GO 11954
12001: POP
12002: POP
// if tmp then
12003: LD_VAR 0 3
12007: IFFALSE 12019
// active := tmp ;
12009: LD_ADDR_VAR 0 7
12013: PUSH
12014: LD_VAR 0 3
12018: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
12019: LD_STRING getStreamItemsFromMission("
12021: PUSH
12022: LD_VAR 0 5
12026: STR
12027: PUSH
12028: LD_STRING ","
12030: STR
12031: PUSH
12032: LD_VAR 0 6
12036: STR
12037: PUSH
12038: LD_STRING ","
12040: STR
12041: PUSH
12042: LD_VAR 0 7
12046: STR
12047: PUSH
12048: LD_STRING ")
12050: STR
12051: PPUSH
12052: CALL_OW 559
// end else
12056: GO 12065
// ToLua ( getStreamItemsFromMission("","","") ) ;
12058: LD_STRING getStreamItemsFromMission("","","")
12060: PPUSH
12061: CALL_OW 559
// end ;
12065: LD_VAR 0 2
12069: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
12070: LD_EXP 26
12074: IFFALSE 12082
12076: PUSH
12077: LD_EXP 31
12081: AND
12082: IFFALSE 12206
12084: GO 12086
12086: DISABLE
12087: LD_INT 0
12089: PPUSH
12090: PPUSH
// begin enable ;
12091: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
12092: LD_ADDR_VAR 0 2
12096: PUSH
12097: LD_INT 22
12099: PUSH
12100: LD_OWVAR 2
12104: PUSH
12105: EMPTY
12106: LIST
12107: LIST
12108: PUSH
12109: LD_INT 2
12111: PUSH
12112: LD_INT 34
12114: PUSH
12115: LD_INT 7
12117: PUSH
12118: EMPTY
12119: LIST
12120: LIST
12121: PUSH
12122: LD_INT 34
12124: PUSH
12125: LD_INT 45
12127: PUSH
12128: EMPTY
12129: LIST
12130: LIST
12131: PUSH
12132: LD_INT 34
12134: PUSH
12135: LD_INT 28
12137: PUSH
12138: EMPTY
12139: LIST
12140: LIST
12141: PUSH
12142: LD_INT 34
12144: PUSH
12145: LD_INT 47
12147: PUSH
12148: EMPTY
12149: LIST
12150: LIST
12151: PUSH
12152: EMPTY
12153: LIST
12154: LIST
12155: LIST
12156: LIST
12157: LIST
12158: PUSH
12159: EMPTY
12160: LIST
12161: LIST
12162: PPUSH
12163: CALL_OW 69
12167: ST_TO_ADDR
// if not tmp then
12168: LD_VAR 0 2
12172: NOT
12173: IFFALSE 12177
// exit ;
12175: GO 12206
// for i in tmp do
12177: LD_ADDR_VAR 0 1
12181: PUSH
12182: LD_VAR 0 2
12186: PUSH
12187: FOR_IN
12188: IFFALSE 12204
// begin SetLives ( i , 0 ) ;
12190: LD_VAR 0 1
12194: PPUSH
12195: LD_INT 0
12197: PPUSH
12198: CALL_OW 234
// end ;
12202: GO 12187
12204: POP
12205: POP
// end ;
12206: PPOPN 2
12208: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
12209: LD_EXP 26
12213: IFFALSE 12221
12215: PUSH
12216: LD_EXP 32
12220: AND
12221: IFFALSE 12305
12223: GO 12225
12225: DISABLE
12226: LD_INT 0
12228: PPUSH
12229: PPUSH
// begin enable ;
12230: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
12231: LD_ADDR_VAR 0 2
12235: PUSH
12236: LD_INT 22
12238: PUSH
12239: LD_OWVAR 2
12243: PUSH
12244: EMPTY
12245: LIST
12246: LIST
12247: PUSH
12248: LD_INT 32
12250: PUSH
12251: LD_INT 3
12253: PUSH
12254: EMPTY
12255: LIST
12256: LIST
12257: PUSH
12258: EMPTY
12259: LIST
12260: LIST
12261: PPUSH
12262: CALL_OW 69
12266: ST_TO_ADDR
// if not tmp then
12267: LD_VAR 0 2
12271: NOT
12272: IFFALSE 12276
// exit ;
12274: GO 12305
// for i in tmp do
12276: LD_ADDR_VAR 0 1
12280: PUSH
12281: LD_VAR 0 2
12285: PUSH
12286: FOR_IN
12287: IFFALSE 12303
// begin SetLives ( i , 0 ) ;
12289: LD_VAR 0 1
12293: PPUSH
12294: LD_INT 0
12296: PPUSH
12297: CALL_OW 234
// end ;
12301: GO 12286
12303: POP
12304: POP
// end ;
12305: PPOPN 2
12307: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
12308: LD_EXP 26
12312: IFFALSE 12320
12314: PUSH
12315: LD_EXP 29
12319: AND
12320: IFFALSE 12413
12322: GO 12324
12324: DISABLE
12325: LD_INT 0
12327: PPUSH
// begin enable ;
12328: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
12329: LD_ADDR_VAR 0 1
12333: PUSH
12334: LD_INT 22
12336: PUSH
12337: LD_OWVAR 2
12341: PUSH
12342: EMPTY
12343: LIST
12344: LIST
12345: PUSH
12346: LD_INT 2
12348: PUSH
12349: LD_INT 25
12351: PUSH
12352: LD_INT 5
12354: PUSH
12355: EMPTY
12356: LIST
12357: LIST
12358: PUSH
12359: LD_INT 25
12361: PUSH
12362: LD_INT 9
12364: PUSH
12365: EMPTY
12366: LIST
12367: LIST
12368: PUSH
12369: LD_INT 25
12371: PUSH
12372: LD_INT 8
12374: PUSH
12375: EMPTY
12376: LIST
12377: LIST
12378: PUSH
12379: EMPTY
12380: LIST
12381: LIST
12382: LIST
12383: LIST
12384: PUSH
12385: EMPTY
12386: LIST
12387: LIST
12388: PPUSH
12389: CALL_OW 69
12393: PUSH
12394: FOR_IN
12395: IFFALSE 12411
// begin SetClass ( i , 1 ) ;
12397: LD_VAR 0 1
12401: PPUSH
12402: LD_INT 1
12404: PPUSH
12405: CALL_OW 336
// end ;
12409: GO 12394
12411: POP
12412: POP
// end ;
12413: PPOPN 1
12415: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
12416: LD_EXP 26
12420: IFFALSE 12428
12422: PUSH
12423: LD_EXP 30
12427: AND
12428: IFFALSE 12440
12430: PUSH
12431: LD_OWVAR 65
12435: PUSH
12436: LD_INT 7
12438: LESS
12439: AND
12440: IFFALSE 12454
12442: GO 12444
12444: DISABLE
// begin enable ;
12445: ENABLE
// game_speed := 7 ;
12446: LD_ADDR_OWVAR 65
12450: PUSH
12451: LD_INT 7
12453: ST_TO_ADDR
// end ;
12454: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
12455: LD_EXP 26
12459: IFFALSE 12467
12461: PUSH
12462: LD_EXP 33
12466: AND
12467: IFFALSE 12669
12469: GO 12471
12471: DISABLE
12472: LD_INT 0
12474: PPUSH
12475: PPUSH
12476: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
12477: LD_ADDR_VAR 0 3
12481: PUSH
12482: LD_INT 81
12484: PUSH
12485: LD_OWVAR 2
12489: PUSH
12490: EMPTY
12491: LIST
12492: LIST
12493: PUSH
12494: LD_INT 21
12496: PUSH
12497: LD_INT 1
12499: PUSH
12500: EMPTY
12501: LIST
12502: LIST
12503: PUSH
12504: EMPTY
12505: LIST
12506: LIST
12507: PPUSH
12508: CALL_OW 69
12512: ST_TO_ADDR
// if not tmp then
12513: LD_VAR 0 3
12517: NOT
12518: IFFALSE 12522
// exit ;
12520: GO 12669
// if tmp > 5 then
12522: LD_VAR 0 3
12526: PUSH
12527: LD_INT 5
12529: GREATER
12530: IFFALSE 12542
// k := 5 else
12532: LD_ADDR_VAR 0 2
12536: PUSH
12537: LD_INT 5
12539: ST_TO_ADDR
12540: GO 12552
// k := tmp ;
12542: LD_ADDR_VAR 0 2
12546: PUSH
12547: LD_VAR 0 3
12551: ST_TO_ADDR
// for i := 1 to k do
12552: LD_ADDR_VAR 0 1
12556: PUSH
12557: DOUBLE
12558: LD_INT 1
12560: DEC
12561: ST_TO_ADDR
12562: LD_VAR 0 2
12566: PUSH
12567: FOR_TO
12568: IFFALSE 12667
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
12570: LD_VAR 0 3
12574: PUSH
12575: LD_VAR 0 1
12579: ARRAY
12580: PPUSH
12581: LD_VAR 0 1
12585: PUSH
12586: LD_INT 4
12588: MOD
12589: PUSH
12590: LD_INT 1
12592: PLUS
12593: PPUSH
12594: CALL_OW 259
12598: PUSH
12599: LD_INT 10
12601: LESS
12602: IFFALSE 12665
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
12604: LD_VAR 0 3
12608: PUSH
12609: LD_VAR 0 1
12613: ARRAY
12614: PPUSH
12615: LD_VAR 0 1
12619: PUSH
12620: LD_INT 4
12622: MOD
12623: PUSH
12624: LD_INT 1
12626: PLUS
12627: PPUSH
12628: LD_VAR 0 3
12632: PUSH
12633: LD_VAR 0 1
12637: ARRAY
12638: PPUSH
12639: LD_VAR 0 1
12643: PUSH
12644: LD_INT 4
12646: MOD
12647: PUSH
12648: LD_INT 1
12650: PLUS
12651: PPUSH
12652: CALL_OW 259
12656: PUSH
12657: LD_INT 1
12659: PLUS
12660: PPUSH
12661: CALL_OW 237
12665: GO 12567
12667: POP
12668: POP
// end ;
12669: PPOPN 3
12671: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
12672: LD_EXP 26
12676: IFFALSE 12684
12678: PUSH
12679: LD_EXP 34
12683: AND
12684: IFFALSE 12704
12686: GO 12688
12688: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
12689: LD_INT 4
12691: PPUSH
12692: LD_OWVAR 2
12696: PPUSH
12697: LD_INT 0
12699: PPUSH
12700: CALL_OW 324
12704: END
// every 0 0$1 trigger StreamModeActive and sShovel do
12705: LD_EXP 26
12709: IFFALSE 12717
12711: PUSH
12712: LD_EXP 63
12716: AND
12717: IFFALSE 12737
12719: GO 12721
12721: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
12722: LD_INT 19
12724: PPUSH
12725: LD_OWVAR 2
12729: PPUSH
12730: LD_INT 0
12732: PPUSH
12733: CALL_OW 324
12737: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
12738: LD_EXP 26
12742: IFFALSE 12750
12744: PUSH
12745: LD_EXP 35
12749: AND
12750: IFFALSE 12852
12752: GO 12754
12754: DISABLE
12755: LD_INT 0
12757: PPUSH
12758: PPUSH
// begin enable ;
12759: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
12760: LD_ADDR_VAR 0 2
12764: PUSH
12765: LD_INT 22
12767: PUSH
12768: LD_OWVAR 2
12772: PUSH
12773: EMPTY
12774: LIST
12775: LIST
12776: PUSH
12777: LD_INT 2
12779: PUSH
12780: LD_INT 34
12782: PUSH
12783: LD_INT 11
12785: PUSH
12786: EMPTY
12787: LIST
12788: LIST
12789: PUSH
12790: LD_INT 34
12792: PUSH
12793: LD_INT 30
12795: PUSH
12796: EMPTY
12797: LIST
12798: LIST
12799: PUSH
12800: EMPTY
12801: LIST
12802: LIST
12803: LIST
12804: PUSH
12805: EMPTY
12806: LIST
12807: LIST
12808: PPUSH
12809: CALL_OW 69
12813: ST_TO_ADDR
// if not tmp then
12814: LD_VAR 0 2
12818: NOT
12819: IFFALSE 12823
// exit ;
12821: GO 12852
// for i in tmp do
12823: LD_ADDR_VAR 0 1
12827: PUSH
12828: LD_VAR 0 2
12832: PUSH
12833: FOR_IN
12834: IFFALSE 12850
// begin SetLives ( i , 0 ) ;
12836: LD_VAR 0 1
12840: PPUSH
12841: LD_INT 0
12843: PPUSH
12844: CALL_OW 234
// end ;
12848: GO 12833
12850: POP
12851: POP
// end ;
12852: PPOPN 2
12854: END
// every 0 0$1 trigger StreamModeActive and sBunker do
12855: LD_EXP 26
12859: IFFALSE 12867
12861: PUSH
12862: LD_EXP 36
12866: AND
12867: IFFALSE 12887
12869: GO 12871
12871: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
12872: LD_INT 32
12874: PPUSH
12875: LD_OWVAR 2
12879: PPUSH
12880: LD_INT 0
12882: PPUSH
12883: CALL_OW 324
12887: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
12888: LD_EXP 26
12892: IFFALSE 12900
12894: PUSH
12895: LD_EXP 37
12899: AND
12900: IFFALSE 13083
12902: GO 12904
12904: DISABLE
12905: LD_INT 0
12907: PPUSH
12908: PPUSH
12909: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
12910: LD_ADDR_VAR 0 2
12914: PUSH
12915: LD_INT 22
12917: PUSH
12918: LD_OWVAR 2
12922: PUSH
12923: EMPTY
12924: LIST
12925: LIST
12926: PUSH
12927: LD_INT 33
12929: PUSH
12930: LD_INT 3
12932: PUSH
12933: EMPTY
12934: LIST
12935: LIST
12936: PUSH
12937: EMPTY
12938: LIST
12939: LIST
12940: PPUSH
12941: CALL_OW 69
12945: ST_TO_ADDR
// if not tmp then
12946: LD_VAR 0 2
12950: NOT
12951: IFFALSE 12955
// exit ;
12953: GO 13083
// side := 0 ;
12955: LD_ADDR_VAR 0 3
12959: PUSH
12960: LD_INT 0
12962: ST_TO_ADDR
// for i := 1 to 8 do
12963: LD_ADDR_VAR 0 1
12967: PUSH
12968: DOUBLE
12969: LD_INT 1
12971: DEC
12972: ST_TO_ADDR
12973: LD_INT 8
12975: PUSH
12976: FOR_TO
12977: IFFALSE 13027
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
12979: LD_OWVAR 2
12983: PUSH
12984: LD_VAR 0 1
12988: NONEQUAL
12989: IFFALSE 13011
12991: PUSH
12992: LD_OWVAR 2
12996: PPUSH
12997: LD_VAR 0 1
13001: PPUSH
13002: CALL_OW 81
13006: PUSH
13007: LD_INT 2
13009: EQUAL
13010: AND
13011: IFFALSE 13025
// begin side := i ;
13013: LD_ADDR_VAR 0 3
13017: PUSH
13018: LD_VAR 0 1
13022: ST_TO_ADDR
// break ;
13023: GO 13027
// end ;
13025: GO 12976
13027: POP
13028: POP
// if not side then
13029: LD_VAR 0 3
13033: NOT
13034: IFFALSE 13038
// exit ;
13036: GO 13083
// for i := 1 to tmp do
13038: LD_ADDR_VAR 0 1
13042: PUSH
13043: DOUBLE
13044: LD_INT 1
13046: DEC
13047: ST_TO_ADDR
13048: LD_VAR 0 2
13052: PUSH
13053: FOR_TO
13054: IFFALSE 13081
// if Prob ( 60 ) then
13056: LD_INT 60
13058: PPUSH
13059: CALL_OW 13
13063: IFFALSE 13079
// SetSide ( i , side ) ;
13065: LD_VAR 0 1
13069: PPUSH
13070: LD_VAR 0 3
13074: PPUSH
13075: CALL_OW 235
13079: GO 13053
13081: POP
13082: POP
// end ;
13083: PPOPN 3
13085: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
13086: LD_EXP 26
13090: IFFALSE 13098
13092: PUSH
13093: LD_EXP 39
13097: AND
13098: IFFALSE 13217
13100: GO 13102
13102: DISABLE
13103: LD_INT 0
13105: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
13106: LD_ADDR_VAR 0 1
13110: PUSH
13111: LD_INT 22
13113: PUSH
13114: LD_OWVAR 2
13118: PUSH
13119: EMPTY
13120: LIST
13121: LIST
13122: PUSH
13123: LD_INT 21
13125: PUSH
13126: LD_INT 1
13128: PUSH
13129: EMPTY
13130: LIST
13131: LIST
13132: PUSH
13133: LD_INT 3
13135: PUSH
13136: LD_INT 23
13138: PUSH
13139: LD_INT 0
13141: PUSH
13142: EMPTY
13143: LIST
13144: LIST
13145: PUSH
13146: EMPTY
13147: LIST
13148: LIST
13149: PUSH
13150: EMPTY
13151: LIST
13152: LIST
13153: LIST
13154: PPUSH
13155: CALL_OW 69
13159: PUSH
13160: FOR_IN
13161: IFFALSE 13215
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
13163: LD_VAR 0 1
13167: PPUSH
13168: CALL_OW 257
13172: PUSH
13173: LD_INT 1
13175: PUSH
13176: LD_INT 2
13178: PUSH
13179: LD_INT 3
13181: PUSH
13182: LD_INT 4
13184: PUSH
13185: EMPTY
13186: LIST
13187: LIST
13188: LIST
13189: LIST
13190: IN
13191: IFFALSE 13213
// SetClass ( un , rand ( 1 , 4 ) ) ;
13193: LD_VAR 0 1
13197: PPUSH
13198: LD_INT 1
13200: PPUSH
13201: LD_INT 4
13203: PPUSH
13204: CALL_OW 12
13208: PPUSH
13209: CALL_OW 336
13213: GO 13160
13215: POP
13216: POP
// end ;
13217: PPOPN 1
13219: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
13220: LD_EXP 26
13224: IFFALSE 13232
13226: PUSH
13227: LD_EXP 38
13231: AND
13232: IFFALSE 13311
13234: GO 13236
13236: DISABLE
13237: LD_INT 0
13239: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13240: LD_ADDR_VAR 0 1
13244: PUSH
13245: LD_INT 22
13247: PUSH
13248: LD_OWVAR 2
13252: PUSH
13253: EMPTY
13254: LIST
13255: LIST
13256: PUSH
13257: LD_INT 21
13259: PUSH
13260: LD_INT 3
13262: PUSH
13263: EMPTY
13264: LIST
13265: LIST
13266: PUSH
13267: EMPTY
13268: LIST
13269: LIST
13270: PPUSH
13271: CALL_OW 69
13275: ST_TO_ADDR
// if not tmp then
13276: LD_VAR 0 1
13280: NOT
13281: IFFALSE 13285
// exit ;
13283: GO 13311
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
13285: LD_VAR 0 1
13289: PUSH
13290: LD_INT 1
13292: PPUSH
13293: LD_VAR 0 1
13297: PPUSH
13298: CALL_OW 12
13302: ARRAY
13303: PPUSH
13304: LD_INT 100
13306: PPUSH
13307: CALL_OW 234
// end ;
13311: PPOPN 1
13313: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
13314: LD_EXP 26
13318: IFFALSE 13326
13320: PUSH
13321: LD_EXP 40
13325: AND
13326: IFFALSE 13424
13328: GO 13330
13330: DISABLE
13331: LD_INT 0
13333: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13334: LD_ADDR_VAR 0 1
13338: PUSH
13339: LD_INT 22
13341: PUSH
13342: LD_OWVAR 2
13346: PUSH
13347: EMPTY
13348: LIST
13349: LIST
13350: PUSH
13351: LD_INT 21
13353: PUSH
13354: LD_INT 1
13356: PUSH
13357: EMPTY
13358: LIST
13359: LIST
13360: PUSH
13361: EMPTY
13362: LIST
13363: LIST
13364: PPUSH
13365: CALL_OW 69
13369: ST_TO_ADDR
// if not tmp then
13370: LD_VAR 0 1
13374: NOT
13375: IFFALSE 13379
// exit ;
13377: GO 13424
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
13379: LD_VAR 0 1
13383: PUSH
13384: LD_INT 1
13386: PPUSH
13387: LD_VAR 0 1
13391: PPUSH
13392: CALL_OW 12
13396: ARRAY
13397: PPUSH
13398: LD_INT 1
13400: PPUSH
13401: LD_INT 4
13403: PPUSH
13404: CALL_OW 12
13408: PPUSH
13409: LD_INT 3000
13411: PPUSH
13412: LD_INT 9000
13414: PPUSH
13415: CALL_OW 12
13419: PPUSH
13420: CALL_OW 492
// end ;
13424: PPOPN 1
13426: END
// every 0 0$1 trigger StreamModeActive and sDepot do
13427: LD_EXP 26
13431: IFFALSE 13439
13433: PUSH
13434: LD_EXP 41
13438: AND
13439: IFFALSE 13459
13441: GO 13443
13443: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
13444: LD_INT 1
13446: PPUSH
13447: LD_OWVAR 2
13451: PPUSH
13452: LD_INT 0
13454: PPUSH
13455: CALL_OW 324
13459: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
13460: LD_EXP 26
13464: IFFALSE 13472
13466: PUSH
13467: LD_EXP 42
13471: AND
13472: IFFALSE 13555
13474: GO 13476
13476: DISABLE
13477: LD_INT 0
13479: PPUSH
13480: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13481: LD_ADDR_VAR 0 2
13485: PUSH
13486: LD_INT 22
13488: PUSH
13489: LD_OWVAR 2
13493: PUSH
13494: EMPTY
13495: LIST
13496: LIST
13497: PUSH
13498: LD_INT 21
13500: PUSH
13501: LD_INT 3
13503: PUSH
13504: EMPTY
13505: LIST
13506: LIST
13507: PUSH
13508: EMPTY
13509: LIST
13510: LIST
13511: PPUSH
13512: CALL_OW 69
13516: ST_TO_ADDR
// if not tmp then
13517: LD_VAR 0 2
13521: NOT
13522: IFFALSE 13526
// exit ;
13524: GO 13555
// for i in tmp do
13526: LD_ADDR_VAR 0 1
13530: PUSH
13531: LD_VAR 0 2
13535: PUSH
13536: FOR_IN
13537: IFFALSE 13553
// SetBLevel ( i , 10 ) ;
13539: LD_VAR 0 1
13543: PPUSH
13544: LD_INT 10
13546: PPUSH
13547: CALL_OW 241
13551: GO 13536
13553: POP
13554: POP
// end ;
13555: PPOPN 2
13557: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
13558: LD_EXP 26
13562: IFFALSE 13570
13564: PUSH
13565: LD_EXP 43
13569: AND
13570: IFFALSE 13681
13572: GO 13574
13574: DISABLE
13575: LD_INT 0
13577: PPUSH
13578: PPUSH
13579: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13580: LD_ADDR_VAR 0 3
13584: PUSH
13585: LD_INT 22
13587: PUSH
13588: LD_OWVAR 2
13592: PUSH
13593: EMPTY
13594: LIST
13595: LIST
13596: PUSH
13597: LD_INT 25
13599: PUSH
13600: LD_INT 1
13602: PUSH
13603: EMPTY
13604: LIST
13605: LIST
13606: PUSH
13607: EMPTY
13608: LIST
13609: LIST
13610: PPUSH
13611: CALL_OW 69
13615: ST_TO_ADDR
// if not tmp then
13616: LD_VAR 0 3
13620: NOT
13621: IFFALSE 13625
// exit ;
13623: GO 13681
// un := tmp [ rand ( 1 , tmp ) ] ;
13625: LD_ADDR_VAR 0 2
13629: PUSH
13630: LD_VAR 0 3
13634: PUSH
13635: LD_INT 1
13637: PPUSH
13638: LD_VAR 0 3
13642: PPUSH
13643: CALL_OW 12
13647: ARRAY
13648: ST_TO_ADDR
// if Crawls ( un ) then
13649: LD_VAR 0 2
13653: PPUSH
13654: CALL_OW 318
13658: IFFALSE 13669
// ComWalk ( un ) ;
13660: LD_VAR 0 2
13664: PPUSH
13665: CALL_OW 138
// SetClass ( un , class_sniper ) ;
13669: LD_VAR 0 2
13673: PPUSH
13674: LD_INT 5
13676: PPUSH
13677: CALL_OW 336
// end ;
13681: PPOPN 3
13683: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
13684: LD_EXP 26
13688: IFFALSE 13696
13690: PUSH
13691: LD_EXP 44
13695: AND
13696: IFFALSE 13708
13698: PUSH
13699: LD_OWVAR 67
13703: PUSH
13704: LD_INT 4
13706: LESS
13707: AND
13708: IFFALSE 13727
13710: GO 13712
13712: DISABLE
// begin Difficulty := Difficulty + 1 ;
13713: LD_ADDR_OWVAR 67
13717: PUSH
13718: LD_OWVAR 67
13722: PUSH
13723: LD_INT 1
13725: PLUS
13726: ST_TO_ADDR
// end ;
13727: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
13728: LD_EXP 26
13732: IFFALSE 13740
13734: PUSH
13735: LD_EXP 45
13739: AND
13740: IFFALSE 13843
13742: GO 13744
13744: DISABLE
13745: LD_INT 0
13747: PPUSH
// begin for i := 1 to 5 do
13748: LD_ADDR_VAR 0 1
13752: PUSH
13753: DOUBLE
13754: LD_INT 1
13756: DEC
13757: ST_TO_ADDR
13758: LD_INT 5
13760: PUSH
13761: FOR_TO
13762: IFFALSE 13841
// begin uc_nation := nation_nature ;
13764: LD_ADDR_OWVAR 21
13768: PUSH
13769: LD_INT 0
13771: ST_TO_ADDR
// uc_side := 0 ;
13772: LD_ADDR_OWVAR 20
13776: PUSH
13777: LD_INT 0
13779: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13780: LD_ADDR_OWVAR 29
13784: PUSH
13785: LD_INT 12
13787: PUSH
13788: LD_INT 12
13790: PUSH
13791: EMPTY
13792: LIST
13793: LIST
13794: ST_TO_ADDR
// hc_agressivity := 20 ;
13795: LD_ADDR_OWVAR 35
13799: PUSH
13800: LD_INT 20
13802: ST_TO_ADDR
// hc_class := class_tiger ;
13803: LD_ADDR_OWVAR 28
13807: PUSH
13808: LD_INT 14
13810: ST_TO_ADDR
// hc_gallery :=  ;
13811: LD_ADDR_OWVAR 33
13815: PUSH
13816: LD_STRING 
13818: ST_TO_ADDR
// hc_name :=  ;
13819: LD_ADDR_OWVAR 26
13823: PUSH
13824: LD_STRING 
13826: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
13827: CALL_OW 44
13831: PPUSH
13832: LD_INT 0
13834: PPUSH
13835: CALL_OW 51
// end ;
13839: GO 13761
13841: POP
13842: POP
// end ;
13843: PPOPN 1
13845: END
// every 0 0$1 trigger StreamModeActive and sBomb do
13846: LD_EXP 26
13850: IFFALSE 13858
13852: PUSH
13853: LD_EXP 46
13857: AND
13858: IFFALSE 13867
13860: GO 13862
13862: DISABLE
// StreamSibBomb ;
13863: CALL 13868 0 0
13867: END
// export function StreamSibBomb ; var i , x , y ; begin
13868: LD_INT 0
13870: PPUSH
13871: PPUSH
13872: PPUSH
13873: PPUSH
// result := false ;
13874: LD_ADDR_VAR 0 1
13878: PUSH
13879: LD_INT 0
13881: ST_TO_ADDR
// for i := 1 to 16 do
13882: LD_ADDR_VAR 0 2
13886: PUSH
13887: DOUBLE
13888: LD_INT 1
13890: DEC
13891: ST_TO_ADDR
13892: LD_INT 16
13894: PUSH
13895: FOR_TO
13896: IFFALSE 14095
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13898: LD_ADDR_VAR 0 3
13902: PUSH
13903: LD_INT 10
13905: PUSH
13906: LD_INT 20
13908: PUSH
13909: LD_INT 30
13911: PUSH
13912: LD_INT 40
13914: PUSH
13915: LD_INT 50
13917: PUSH
13918: LD_INT 60
13920: PUSH
13921: LD_INT 70
13923: PUSH
13924: LD_INT 80
13926: PUSH
13927: LD_INT 90
13929: PUSH
13930: LD_INT 100
13932: PUSH
13933: LD_INT 110
13935: PUSH
13936: LD_INT 120
13938: PUSH
13939: LD_INT 130
13941: PUSH
13942: LD_INT 140
13944: PUSH
13945: LD_INT 150
13947: PUSH
13948: EMPTY
13949: LIST
13950: LIST
13951: LIST
13952: LIST
13953: LIST
13954: LIST
13955: LIST
13956: LIST
13957: LIST
13958: LIST
13959: LIST
13960: LIST
13961: LIST
13962: LIST
13963: LIST
13964: PUSH
13965: LD_INT 1
13967: PPUSH
13968: LD_INT 15
13970: PPUSH
13971: CALL_OW 12
13975: ARRAY
13976: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13977: LD_ADDR_VAR 0 4
13981: PUSH
13982: LD_INT 10
13984: PUSH
13985: LD_INT 20
13987: PUSH
13988: LD_INT 30
13990: PUSH
13991: LD_INT 40
13993: PUSH
13994: LD_INT 50
13996: PUSH
13997: LD_INT 60
13999: PUSH
14000: LD_INT 70
14002: PUSH
14003: LD_INT 80
14005: PUSH
14006: LD_INT 90
14008: PUSH
14009: LD_INT 100
14011: PUSH
14012: LD_INT 110
14014: PUSH
14015: LD_INT 120
14017: PUSH
14018: LD_INT 130
14020: PUSH
14021: LD_INT 140
14023: PUSH
14024: LD_INT 150
14026: PUSH
14027: EMPTY
14028: LIST
14029: LIST
14030: LIST
14031: LIST
14032: LIST
14033: LIST
14034: LIST
14035: LIST
14036: LIST
14037: LIST
14038: LIST
14039: LIST
14040: LIST
14041: LIST
14042: LIST
14043: PUSH
14044: LD_INT 1
14046: PPUSH
14047: LD_INT 15
14049: PPUSH
14050: CALL_OW 12
14054: ARRAY
14055: ST_TO_ADDR
// if ValidHex ( x , y ) then
14056: LD_VAR 0 3
14060: PPUSH
14061: LD_VAR 0 4
14065: PPUSH
14066: CALL_OW 488
14070: IFFALSE 14093
// begin result := [ x , y ] ;
14072: LD_ADDR_VAR 0 1
14076: PUSH
14077: LD_VAR 0 3
14081: PUSH
14082: LD_VAR 0 4
14086: PUSH
14087: EMPTY
14088: LIST
14089: LIST
14090: ST_TO_ADDR
// break ;
14091: GO 14095
// end ; end ;
14093: GO 13895
14095: POP
14096: POP
// if result then
14097: LD_VAR 0 1
14101: IFFALSE 14161
// begin ToLua ( playSibBomb() ) ;
14103: LD_STRING playSibBomb()
14105: PPUSH
14106: CALL_OW 559
// wait ( 0 0$14 ) ;
14110: LD_INT 490
14112: PPUSH
14113: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
14117: LD_VAR 0 1
14121: PUSH
14122: LD_INT 1
14124: ARRAY
14125: PPUSH
14126: LD_VAR 0 1
14130: PUSH
14131: LD_INT 2
14133: ARRAY
14134: PPUSH
14135: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
14139: LD_VAR 0 1
14143: PUSH
14144: LD_INT 1
14146: ARRAY
14147: PPUSH
14148: LD_VAR 0 1
14152: PUSH
14153: LD_INT 2
14155: ARRAY
14156: PPUSH
14157: CALL_OW 429
// end ; end ;
14161: LD_VAR 0 1
14165: RET
// every 0 0$1 trigger StreamModeActive and sReset do
14166: LD_EXP 26
14170: IFFALSE 14178
14172: PUSH
14173: LD_EXP 48
14177: AND
14178: IFFALSE 14190
14180: GO 14182
14182: DISABLE
// YouLost (  ) ;
14183: LD_STRING 
14185: PPUSH
14186: CALL_OW 104
14190: END
// every 0 0$1 trigger StreamModeActive and sFog do
14191: LD_EXP 26
14195: IFFALSE 14203
14197: PUSH
14198: LD_EXP 47
14202: AND
14203: IFFALSE 14217
14205: GO 14207
14207: DISABLE
// FogOff ( your_side ) ;
14208: LD_OWVAR 2
14212: PPUSH
14213: CALL_OW 344
14217: END
// every 0 0$1 trigger StreamModeActive and sSun do
14218: LD_EXP 26
14222: IFFALSE 14230
14224: PUSH
14225: LD_EXP 49
14229: AND
14230: IFFALSE 14258
14232: GO 14234
14234: DISABLE
// begin solar_recharge_percent := 0 ;
14235: LD_ADDR_OWVAR 79
14239: PUSH
14240: LD_INT 0
14242: ST_TO_ADDR
// wait ( 5 5$00 ) ;
14243: LD_INT 10500
14245: PPUSH
14246: CALL_OW 67
// solar_recharge_percent := 100 ;
14250: LD_ADDR_OWVAR 79
14254: PUSH
14255: LD_INT 100
14257: ST_TO_ADDR
// end ;
14258: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
14259: LD_EXP 26
14263: IFFALSE 14271
14265: PUSH
14266: LD_EXP 50
14270: AND
14271: IFFALSE 14510
14273: GO 14275
14275: DISABLE
14276: LD_INT 0
14278: PPUSH
14279: PPUSH
14280: PPUSH
// begin tmp := [ ] ;
14281: LD_ADDR_VAR 0 3
14285: PUSH
14286: EMPTY
14287: ST_TO_ADDR
// for i := 1 to 6 do
14288: LD_ADDR_VAR 0 1
14292: PUSH
14293: DOUBLE
14294: LD_INT 1
14296: DEC
14297: ST_TO_ADDR
14298: LD_INT 6
14300: PUSH
14301: FOR_TO
14302: IFFALSE 14407
// begin uc_nation := nation_nature ;
14304: LD_ADDR_OWVAR 21
14308: PUSH
14309: LD_INT 0
14311: ST_TO_ADDR
// uc_side := 0 ;
14312: LD_ADDR_OWVAR 20
14316: PUSH
14317: LD_INT 0
14319: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14320: LD_ADDR_OWVAR 29
14324: PUSH
14325: LD_INT 12
14327: PUSH
14328: LD_INT 12
14330: PUSH
14331: EMPTY
14332: LIST
14333: LIST
14334: ST_TO_ADDR
// hc_agressivity := 20 ;
14335: LD_ADDR_OWVAR 35
14339: PUSH
14340: LD_INT 20
14342: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
14343: LD_ADDR_OWVAR 28
14347: PUSH
14348: LD_INT 17
14350: ST_TO_ADDR
// hc_gallery :=  ;
14351: LD_ADDR_OWVAR 33
14355: PUSH
14356: LD_STRING 
14358: ST_TO_ADDR
// hc_name :=  ;
14359: LD_ADDR_OWVAR 26
14363: PUSH
14364: LD_STRING 
14366: ST_TO_ADDR
// un := CreateHuman ;
14367: LD_ADDR_VAR 0 2
14371: PUSH
14372: CALL_OW 44
14376: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
14377: LD_VAR 0 2
14381: PPUSH
14382: LD_INT 1
14384: PPUSH
14385: CALL_OW 51
// tmp := tmp ^ un ;
14389: LD_ADDR_VAR 0 3
14393: PUSH
14394: LD_VAR 0 3
14398: PUSH
14399: LD_VAR 0 2
14403: ADD
14404: ST_TO_ADDR
// end ;
14405: GO 14301
14407: POP
14408: POP
// repeat wait ( 0 0$1 ) ;
14409: LD_INT 35
14411: PPUSH
14412: CALL_OW 67
// for un in tmp do
14416: LD_ADDR_VAR 0 2
14420: PUSH
14421: LD_VAR 0 3
14425: PUSH
14426: FOR_IN
14427: IFFALSE 14501
// begin if IsDead ( un ) then
14429: LD_VAR 0 2
14433: PPUSH
14434: CALL_OW 301
14438: IFFALSE 14458
// begin tmp := tmp diff un ;
14440: LD_ADDR_VAR 0 3
14444: PUSH
14445: LD_VAR 0 3
14449: PUSH
14450: LD_VAR 0 2
14454: DIFF
14455: ST_TO_ADDR
// continue ;
14456: GO 14426
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
14458: LD_VAR 0 2
14462: PPUSH
14463: LD_INT 3
14465: PUSH
14466: LD_INT 22
14468: PUSH
14469: LD_INT 0
14471: PUSH
14472: EMPTY
14473: LIST
14474: LIST
14475: PUSH
14476: EMPTY
14477: LIST
14478: LIST
14479: PPUSH
14480: CALL_OW 69
14484: PPUSH
14485: LD_VAR 0 2
14489: PPUSH
14490: CALL_OW 74
14494: PPUSH
14495: CALL_OW 115
// end ;
14499: GO 14426
14501: POP
14502: POP
// until not tmp ;
14503: LD_VAR 0 3
14507: NOT
14508: IFFALSE 14409
// end ;
14510: PPOPN 3
14512: END
// every 0 0$1 trigger StreamModeActive and sTroll do
14513: LD_EXP 26
14517: IFFALSE 14525
14519: PUSH
14520: LD_EXP 51
14524: AND
14525: IFFALSE 14579
14527: GO 14529
14529: DISABLE
// begin ToLua ( displayTroll(); ) ;
14530: LD_STRING displayTroll();
14532: PPUSH
14533: CALL_OW 559
// wait ( 3 3$00 ) ;
14537: LD_INT 6300
14539: PPUSH
14540: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14544: LD_STRING hideTroll();
14546: PPUSH
14547: CALL_OW 559
// wait ( 1 1$00 ) ;
14551: LD_INT 2100
14553: PPUSH
14554: CALL_OW 67
// ToLua ( displayTroll(); ) ;
14558: LD_STRING displayTroll();
14560: PPUSH
14561: CALL_OW 559
// wait ( 1 1$00 ) ;
14565: LD_INT 2100
14567: PPUSH
14568: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14572: LD_STRING hideTroll();
14574: PPUSH
14575: CALL_OW 559
// end ;
14579: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
14580: LD_EXP 26
14584: IFFALSE 14592
14586: PUSH
14587: LD_EXP 52
14591: AND
14592: IFFALSE 14655
14594: GO 14596
14596: DISABLE
14597: LD_INT 0
14599: PPUSH
// begin p := 0 ;
14600: LD_ADDR_VAR 0 1
14604: PUSH
14605: LD_INT 0
14607: ST_TO_ADDR
// repeat game_speed := 1 ;
14608: LD_ADDR_OWVAR 65
14612: PUSH
14613: LD_INT 1
14615: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14616: LD_INT 35
14618: PPUSH
14619: CALL_OW 67
// p := p + 1 ;
14623: LD_ADDR_VAR 0 1
14627: PUSH
14628: LD_VAR 0 1
14632: PUSH
14633: LD_INT 1
14635: PLUS
14636: ST_TO_ADDR
// until p >= 60 ;
14637: LD_VAR 0 1
14641: PUSH
14642: LD_INT 60
14644: GREATEREQUAL
14645: IFFALSE 14608
// game_speed := 4 ;
14647: LD_ADDR_OWVAR 65
14651: PUSH
14652: LD_INT 4
14654: ST_TO_ADDR
// end ;
14655: PPOPN 1
14657: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
14658: LD_EXP 26
14662: IFFALSE 14670
14664: PUSH
14665: LD_EXP 53
14669: AND
14670: IFFALSE 14816
14672: GO 14674
14674: DISABLE
14675: LD_INT 0
14677: PPUSH
14678: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14679: LD_ADDR_VAR 0 1
14683: PUSH
14684: LD_INT 22
14686: PUSH
14687: LD_OWVAR 2
14691: PUSH
14692: EMPTY
14693: LIST
14694: LIST
14695: PUSH
14696: LD_INT 2
14698: PUSH
14699: LD_INT 30
14701: PUSH
14702: LD_INT 0
14704: PUSH
14705: EMPTY
14706: LIST
14707: LIST
14708: PUSH
14709: LD_INT 30
14711: PUSH
14712: LD_INT 1
14714: PUSH
14715: EMPTY
14716: LIST
14717: LIST
14718: PUSH
14719: EMPTY
14720: LIST
14721: LIST
14722: LIST
14723: PUSH
14724: EMPTY
14725: LIST
14726: LIST
14727: PPUSH
14728: CALL_OW 69
14732: ST_TO_ADDR
// if not depot then
14733: LD_VAR 0 1
14737: NOT
14738: IFFALSE 14742
// exit ;
14740: GO 14816
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
14742: LD_ADDR_VAR 0 2
14746: PUSH
14747: LD_VAR 0 1
14751: PUSH
14752: LD_INT 1
14754: PPUSH
14755: LD_VAR 0 1
14759: PPUSH
14760: CALL_OW 12
14764: ARRAY
14765: PPUSH
14766: CALL_OW 274
14770: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
14771: LD_VAR 0 2
14775: PPUSH
14776: LD_INT 1
14778: PPUSH
14779: LD_INT 0
14781: PPUSH
14782: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
14786: LD_VAR 0 2
14790: PPUSH
14791: LD_INT 2
14793: PPUSH
14794: LD_INT 0
14796: PPUSH
14797: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
14801: LD_VAR 0 2
14805: PPUSH
14806: LD_INT 3
14808: PPUSH
14809: LD_INT 0
14811: PPUSH
14812: CALL_OW 277
// end ;
14816: PPOPN 2
14818: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
14819: LD_EXP 26
14823: IFFALSE 14831
14825: PUSH
14826: LD_EXP 54
14830: AND
14831: IFFALSE 14928
14833: GO 14835
14835: DISABLE
14836: LD_INT 0
14838: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14839: LD_ADDR_VAR 0 1
14843: PUSH
14844: LD_INT 22
14846: PUSH
14847: LD_OWVAR 2
14851: PUSH
14852: EMPTY
14853: LIST
14854: LIST
14855: PUSH
14856: LD_INT 21
14858: PUSH
14859: LD_INT 1
14861: PUSH
14862: EMPTY
14863: LIST
14864: LIST
14865: PUSH
14866: LD_INT 3
14868: PUSH
14869: LD_INT 23
14871: PUSH
14872: LD_INT 0
14874: PUSH
14875: EMPTY
14876: LIST
14877: LIST
14878: PUSH
14879: EMPTY
14880: LIST
14881: LIST
14882: PUSH
14883: EMPTY
14884: LIST
14885: LIST
14886: LIST
14887: PPUSH
14888: CALL_OW 69
14892: ST_TO_ADDR
// if not tmp then
14893: LD_VAR 0 1
14897: NOT
14898: IFFALSE 14902
// exit ;
14900: GO 14928
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
14902: LD_VAR 0 1
14906: PUSH
14907: LD_INT 1
14909: PPUSH
14910: LD_VAR 0 1
14914: PPUSH
14915: CALL_OW 12
14919: ARRAY
14920: PPUSH
14921: LD_INT 200
14923: PPUSH
14924: CALL_OW 234
// end ;
14928: PPOPN 1
14930: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
14931: LD_EXP 26
14935: IFFALSE 14943
14937: PUSH
14938: LD_EXP 55
14942: AND
14943: IFFALSE 15022
14945: GO 14947
14947: DISABLE
14948: LD_INT 0
14950: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
14951: LD_ADDR_VAR 0 1
14955: PUSH
14956: LD_INT 22
14958: PUSH
14959: LD_OWVAR 2
14963: PUSH
14964: EMPTY
14965: LIST
14966: LIST
14967: PUSH
14968: LD_INT 21
14970: PUSH
14971: LD_INT 2
14973: PUSH
14974: EMPTY
14975: LIST
14976: LIST
14977: PUSH
14978: EMPTY
14979: LIST
14980: LIST
14981: PPUSH
14982: CALL_OW 69
14986: ST_TO_ADDR
// if not tmp then
14987: LD_VAR 0 1
14991: NOT
14992: IFFALSE 14996
// exit ;
14994: GO 15022
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
14996: LD_VAR 0 1
15000: PUSH
15001: LD_INT 1
15003: PPUSH
15004: LD_VAR 0 1
15008: PPUSH
15009: CALL_OW 12
15013: ARRAY
15014: PPUSH
15015: LD_INT 60
15017: PPUSH
15018: CALL_OW 234
// end ;
15022: PPOPN 1
15024: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
15025: LD_EXP 26
15029: IFFALSE 15037
15031: PUSH
15032: LD_EXP 56
15036: AND
15037: IFFALSE 15136
15039: GO 15041
15041: DISABLE
15042: LD_INT 0
15044: PPUSH
15045: PPUSH
// begin enable ;
15046: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
15047: LD_ADDR_VAR 0 1
15051: PUSH
15052: LD_INT 22
15054: PUSH
15055: LD_OWVAR 2
15059: PUSH
15060: EMPTY
15061: LIST
15062: LIST
15063: PUSH
15064: LD_INT 61
15066: PUSH
15067: EMPTY
15068: LIST
15069: PUSH
15070: LD_INT 33
15072: PUSH
15073: LD_INT 2
15075: PUSH
15076: EMPTY
15077: LIST
15078: LIST
15079: PUSH
15080: EMPTY
15081: LIST
15082: LIST
15083: LIST
15084: PPUSH
15085: CALL_OW 69
15089: ST_TO_ADDR
// if not tmp then
15090: LD_VAR 0 1
15094: NOT
15095: IFFALSE 15099
// exit ;
15097: GO 15136
// for i in tmp do
15099: LD_ADDR_VAR 0 2
15103: PUSH
15104: LD_VAR 0 1
15108: PUSH
15109: FOR_IN
15110: IFFALSE 15134
// if IsControledBy ( i ) then
15112: LD_VAR 0 2
15116: PPUSH
15117: CALL_OW 312
15121: IFFALSE 15132
// ComUnlink ( i ) ;
15123: LD_VAR 0 2
15127: PPUSH
15128: CALL_OW 136
15132: GO 15109
15134: POP
15135: POP
// end ;
15136: PPOPN 2
15138: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
15139: LD_EXP 26
15143: IFFALSE 15151
15145: PUSH
15146: LD_EXP 57
15150: AND
15151: IFFALSE 15291
15153: GO 15155
15155: DISABLE
15156: LD_INT 0
15158: PPUSH
15159: PPUSH
// begin ToLua ( displayPowell(); ) ;
15160: LD_STRING displayPowell();
15162: PPUSH
15163: CALL_OW 559
// uc_side := 0 ;
15167: LD_ADDR_OWVAR 20
15171: PUSH
15172: LD_INT 0
15174: ST_TO_ADDR
// uc_nation := 2 ;
15175: LD_ADDR_OWVAR 21
15179: PUSH
15180: LD_INT 2
15182: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
15183: LD_ADDR_OWVAR 37
15187: PUSH
15188: LD_INT 14
15190: ST_TO_ADDR
// vc_engine := engine_siberite ;
15191: LD_ADDR_OWVAR 39
15195: PUSH
15196: LD_INT 3
15198: ST_TO_ADDR
// vc_control := control_apeman ;
15199: LD_ADDR_OWVAR 38
15203: PUSH
15204: LD_INT 5
15206: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
15207: LD_ADDR_OWVAR 40
15211: PUSH
15212: LD_INT 29
15214: ST_TO_ADDR
// un := CreateVehicle ;
15215: LD_ADDR_VAR 0 2
15219: PUSH
15220: CALL_OW 45
15224: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15225: LD_VAR 0 2
15229: PPUSH
15230: LD_INT 1
15232: PPUSH
15233: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15237: LD_INT 35
15239: PPUSH
15240: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15244: LD_VAR 0 2
15248: PPUSH
15249: LD_INT 22
15251: PUSH
15252: LD_OWVAR 2
15256: PUSH
15257: EMPTY
15258: LIST
15259: LIST
15260: PPUSH
15261: CALL_OW 69
15265: PPUSH
15266: LD_VAR 0 2
15270: PPUSH
15271: CALL_OW 74
15275: PPUSH
15276: CALL_OW 115
// until IsDead ( un ) ;
15280: LD_VAR 0 2
15284: PPUSH
15285: CALL_OW 301
15289: IFFALSE 15237
// end ;
15291: PPOPN 2
15293: END
// every 0 0$1 trigger StreamModeActive and sStu do
15294: LD_EXP 26
15298: IFFALSE 15306
15300: PUSH
15301: LD_EXP 65
15305: AND
15306: IFFALSE 15322
15308: GO 15310
15310: DISABLE
// begin ToLua ( displayStucuk(); ) ;
15311: LD_STRING displayStucuk();
15313: PPUSH
15314: CALL_OW 559
// ResetFog ;
15318: CALL_OW 335
// end ;
15322: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
15323: LD_EXP 26
15327: IFFALSE 15335
15329: PUSH
15330: LD_EXP 58
15334: AND
15335: IFFALSE 15476
15337: GO 15339
15339: DISABLE
15340: LD_INT 0
15342: PPUSH
15343: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15344: LD_ADDR_VAR 0 2
15348: PUSH
15349: LD_INT 22
15351: PUSH
15352: LD_OWVAR 2
15356: PUSH
15357: EMPTY
15358: LIST
15359: LIST
15360: PUSH
15361: LD_INT 21
15363: PUSH
15364: LD_INT 1
15366: PUSH
15367: EMPTY
15368: LIST
15369: LIST
15370: PUSH
15371: EMPTY
15372: LIST
15373: LIST
15374: PPUSH
15375: CALL_OW 69
15379: ST_TO_ADDR
// if not tmp then
15380: LD_VAR 0 2
15384: NOT
15385: IFFALSE 15389
// exit ;
15387: GO 15476
// un := tmp [ rand ( 1 , tmp ) ] ;
15389: LD_ADDR_VAR 0 1
15393: PUSH
15394: LD_VAR 0 2
15398: PUSH
15399: LD_INT 1
15401: PPUSH
15402: LD_VAR 0 2
15406: PPUSH
15407: CALL_OW 12
15411: ARRAY
15412: ST_TO_ADDR
// SetSide ( un , 0 ) ;
15413: LD_VAR 0 1
15417: PPUSH
15418: LD_INT 0
15420: PPUSH
15421: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
15425: LD_VAR 0 1
15429: PPUSH
15430: LD_OWVAR 3
15434: PUSH
15435: LD_VAR 0 1
15439: DIFF
15440: PPUSH
15441: LD_VAR 0 1
15445: PPUSH
15446: CALL_OW 74
15450: PPUSH
15451: CALL_OW 115
// wait ( 0 0$20 ) ;
15455: LD_INT 700
15457: PPUSH
15458: CALL_OW 67
// SetSide ( un , your_side ) ;
15462: LD_VAR 0 1
15466: PPUSH
15467: LD_OWVAR 2
15471: PPUSH
15472: CALL_OW 235
// end ;
15476: PPOPN 2
15478: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
15479: LD_EXP 26
15483: IFFALSE 15491
15485: PUSH
15486: LD_EXP 59
15490: AND
15491: IFFALSE 15597
15493: GO 15495
15495: DISABLE
15496: LD_INT 0
15498: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15499: LD_ADDR_VAR 0 1
15503: PUSH
15504: LD_INT 22
15506: PUSH
15507: LD_OWVAR 2
15511: PUSH
15512: EMPTY
15513: LIST
15514: LIST
15515: PUSH
15516: LD_INT 2
15518: PUSH
15519: LD_INT 30
15521: PUSH
15522: LD_INT 0
15524: PUSH
15525: EMPTY
15526: LIST
15527: LIST
15528: PUSH
15529: LD_INT 30
15531: PUSH
15532: LD_INT 1
15534: PUSH
15535: EMPTY
15536: LIST
15537: LIST
15538: PUSH
15539: EMPTY
15540: LIST
15541: LIST
15542: LIST
15543: PUSH
15544: EMPTY
15545: LIST
15546: LIST
15547: PPUSH
15548: CALL_OW 69
15552: ST_TO_ADDR
// if not depot then
15553: LD_VAR 0 1
15557: NOT
15558: IFFALSE 15562
// exit ;
15560: GO 15597
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
15562: LD_VAR 0 1
15566: PUSH
15567: LD_INT 1
15569: ARRAY
15570: PPUSH
15571: CALL_OW 250
15575: PPUSH
15576: LD_VAR 0 1
15580: PUSH
15581: LD_INT 1
15583: ARRAY
15584: PPUSH
15585: CALL_OW 251
15589: PPUSH
15590: LD_INT 70
15592: PPUSH
15593: CALL_OW 495
// end ;
15597: PPOPN 1
15599: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
15600: LD_EXP 26
15604: IFFALSE 15612
15606: PUSH
15607: LD_EXP 60
15611: AND
15612: IFFALSE 15823
15614: GO 15616
15616: DISABLE
15617: LD_INT 0
15619: PPUSH
15620: PPUSH
15621: PPUSH
15622: PPUSH
15623: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15624: LD_ADDR_VAR 0 5
15628: PUSH
15629: LD_INT 22
15631: PUSH
15632: LD_OWVAR 2
15636: PUSH
15637: EMPTY
15638: LIST
15639: LIST
15640: PUSH
15641: LD_INT 21
15643: PUSH
15644: LD_INT 1
15646: PUSH
15647: EMPTY
15648: LIST
15649: LIST
15650: PUSH
15651: EMPTY
15652: LIST
15653: LIST
15654: PPUSH
15655: CALL_OW 69
15659: ST_TO_ADDR
// if not tmp then
15660: LD_VAR 0 5
15664: NOT
15665: IFFALSE 15669
// exit ;
15667: GO 15823
// for i in tmp do
15669: LD_ADDR_VAR 0 1
15673: PUSH
15674: LD_VAR 0 5
15678: PUSH
15679: FOR_IN
15680: IFFALSE 15821
// begin d := rand ( 0 , 5 ) ;
15682: LD_ADDR_VAR 0 4
15686: PUSH
15687: LD_INT 0
15689: PPUSH
15690: LD_INT 5
15692: PPUSH
15693: CALL_OW 12
15697: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
15698: LD_ADDR_VAR 0 2
15702: PUSH
15703: LD_VAR 0 1
15707: PPUSH
15708: CALL_OW 250
15712: PPUSH
15713: LD_VAR 0 4
15717: PPUSH
15718: LD_INT 3
15720: PPUSH
15721: LD_INT 12
15723: PPUSH
15724: CALL_OW 12
15728: PPUSH
15729: CALL_OW 272
15733: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
15734: LD_ADDR_VAR 0 3
15738: PUSH
15739: LD_VAR 0 1
15743: PPUSH
15744: CALL_OW 251
15748: PPUSH
15749: LD_VAR 0 4
15753: PPUSH
15754: LD_INT 3
15756: PPUSH
15757: LD_INT 12
15759: PPUSH
15760: CALL_OW 12
15764: PPUSH
15765: CALL_OW 273
15769: ST_TO_ADDR
// if ValidHex ( x , y ) then
15770: LD_VAR 0 2
15774: PPUSH
15775: LD_VAR 0 3
15779: PPUSH
15780: CALL_OW 488
15784: IFFALSE 15819
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
15786: LD_VAR 0 1
15790: PPUSH
15791: LD_VAR 0 2
15795: PPUSH
15796: LD_VAR 0 3
15800: PPUSH
15801: LD_INT 3
15803: PPUSH
15804: LD_INT 6
15806: PPUSH
15807: CALL_OW 12
15811: PPUSH
15812: LD_INT 1
15814: PPUSH
15815: CALL_OW 483
// end ;
15819: GO 15679
15821: POP
15822: POP
// end ;
15823: PPOPN 5
15825: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
15826: LD_EXP 26
15830: IFFALSE 15838
15832: PUSH
15833: LD_EXP 61
15837: AND
15838: IFFALSE 15932
15840: GO 15842
15842: DISABLE
15843: LD_INT 0
15845: PPUSH
15846: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
15847: LD_ADDR_VAR 0 2
15851: PUSH
15852: LD_INT 22
15854: PUSH
15855: LD_OWVAR 2
15859: PUSH
15860: EMPTY
15861: LIST
15862: LIST
15863: PUSH
15864: LD_INT 32
15866: PUSH
15867: LD_INT 1
15869: PUSH
15870: EMPTY
15871: LIST
15872: LIST
15873: PUSH
15874: LD_INT 21
15876: PUSH
15877: LD_INT 2
15879: PUSH
15880: EMPTY
15881: LIST
15882: LIST
15883: PUSH
15884: EMPTY
15885: LIST
15886: LIST
15887: LIST
15888: PPUSH
15889: CALL_OW 69
15893: ST_TO_ADDR
// if not tmp then
15894: LD_VAR 0 2
15898: NOT
15899: IFFALSE 15903
// exit ;
15901: GO 15932
// for i in tmp do
15903: LD_ADDR_VAR 0 1
15907: PUSH
15908: LD_VAR 0 2
15912: PUSH
15913: FOR_IN
15914: IFFALSE 15930
// SetFuel ( i , 0 ) ;
15916: LD_VAR 0 1
15920: PPUSH
15921: LD_INT 0
15923: PPUSH
15924: CALL_OW 240
15928: GO 15913
15930: POP
15931: POP
// end ;
15932: PPOPN 2
15934: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
15935: LD_EXP 26
15939: IFFALSE 15947
15941: PUSH
15942: LD_EXP 62
15946: AND
15947: IFFALSE 16013
15949: GO 15951
15951: DISABLE
15952: LD_INT 0
15954: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15955: LD_ADDR_VAR 0 1
15959: PUSH
15960: LD_INT 22
15962: PUSH
15963: LD_OWVAR 2
15967: PUSH
15968: EMPTY
15969: LIST
15970: LIST
15971: PUSH
15972: LD_INT 30
15974: PUSH
15975: LD_INT 29
15977: PUSH
15978: EMPTY
15979: LIST
15980: LIST
15981: PUSH
15982: EMPTY
15983: LIST
15984: LIST
15985: PPUSH
15986: CALL_OW 69
15990: ST_TO_ADDR
// if not tmp then
15991: LD_VAR 0 1
15995: NOT
15996: IFFALSE 16000
// exit ;
15998: GO 16013
// DestroyUnit ( tmp [ 1 ] ) ;
16000: LD_VAR 0 1
16004: PUSH
16005: LD_INT 1
16007: ARRAY
16008: PPUSH
16009: CALL_OW 65
// end ;
16013: PPOPN 1
16015: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
16016: LD_EXP 26
16020: IFFALSE 16028
16022: PUSH
16023: LD_EXP 64
16027: AND
16028: IFFALSE 16157
16030: GO 16032
16032: DISABLE
16033: LD_INT 0
16035: PPUSH
// begin uc_side := 0 ;
16036: LD_ADDR_OWVAR 20
16040: PUSH
16041: LD_INT 0
16043: ST_TO_ADDR
// uc_nation := nation_arabian ;
16044: LD_ADDR_OWVAR 21
16048: PUSH
16049: LD_INT 2
16051: ST_TO_ADDR
// hc_gallery :=  ;
16052: LD_ADDR_OWVAR 33
16056: PUSH
16057: LD_STRING 
16059: ST_TO_ADDR
// hc_name :=  ;
16060: LD_ADDR_OWVAR 26
16064: PUSH
16065: LD_STRING 
16067: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
16068: LD_INT 1
16070: PPUSH
16071: LD_INT 11
16073: PPUSH
16074: LD_INT 10
16076: PPUSH
16077: CALL_OW 380
// un := CreateHuman ;
16081: LD_ADDR_VAR 0 1
16085: PUSH
16086: CALL_OW 44
16090: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16091: LD_VAR 0 1
16095: PPUSH
16096: LD_INT 1
16098: PPUSH
16099: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16103: LD_INT 35
16105: PPUSH
16106: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16110: LD_VAR 0 1
16114: PPUSH
16115: LD_INT 22
16117: PUSH
16118: LD_OWVAR 2
16122: PUSH
16123: EMPTY
16124: LIST
16125: LIST
16126: PPUSH
16127: CALL_OW 69
16131: PPUSH
16132: LD_VAR 0 1
16136: PPUSH
16137: CALL_OW 74
16141: PPUSH
16142: CALL_OW 115
// until IsDead ( un ) ;
16146: LD_VAR 0 1
16150: PPUSH
16151: CALL_OW 301
16155: IFFALSE 16103
// end ;
16157: PPOPN 1
16159: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
16160: LD_EXP 26
16164: IFFALSE 16172
16166: PUSH
16167: LD_EXP 66
16171: AND
16172: IFFALSE 16184
16174: GO 16176
16176: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
16177: LD_STRING earthquake(getX(game), 0, 32)
16179: PPUSH
16180: CALL_OW 559
16184: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
16185: LD_EXP 26
16189: IFFALSE 16197
16191: PUSH
16192: LD_EXP 67
16196: AND
16197: IFFALSE 16288
16199: GO 16201
16201: DISABLE
16202: LD_INT 0
16204: PPUSH
// begin enable ;
16205: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
16206: LD_ADDR_VAR 0 1
16210: PUSH
16211: LD_INT 22
16213: PUSH
16214: LD_OWVAR 2
16218: PUSH
16219: EMPTY
16220: LIST
16221: LIST
16222: PUSH
16223: LD_INT 21
16225: PUSH
16226: LD_INT 2
16228: PUSH
16229: EMPTY
16230: LIST
16231: LIST
16232: PUSH
16233: LD_INT 33
16235: PUSH
16236: LD_INT 3
16238: PUSH
16239: EMPTY
16240: LIST
16241: LIST
16242: PUSH
16243: EMPTY
16244: LIST
16245: LIST
16246: LIST
16247: PPUSH
16248: CALL_OW 69
16252: ST_TO_ADDR
// if not tmp then
16253: LD_VAR 0 1
16257: NOT
16258: IFFALSE 16262
// exit ;
16260: GO 16288
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16262: LD_VAR 0 1
16266: PUSH
16267: LD_INT 1
16269: PPUSH
16270: LD_VAR 0 1
16274: PPUSH
16275: CALL_OW 12
16279: ARRAY
16280: PPUSH
16281: LD_INT 1
16283: PPUSH
16284: CALL_OW 234
// end ;
16288: PPOPN 1
16290: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
16291: LD_EXP 26
16295: IFFALSE 16303
16297: PUSH
16298: LD_EXP 68
16302: AND
16303: IFFALSE 16444
16305: GO 16307
16307: DISABLE
16308: LD_INT 0
16310: PPUSH
16311: PPUSH
16312: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16313: LD_ADDR_VAR 0 3
16317: PUSH
16318: LD_INT 22
16320: PUSH
16321: LD_OWVAR 2
16325: PUSH
16326: EMPTY
16327: LIST
16328: LIST
16329: PUSH
16330: LD_INT 25
16332: PUSH
16333: LD_INT 1
16335: PUSH
16336: EMPTY
16337: LIST
16338: LIST
16339: PUSH
16340: EMPTY
16341: LIST
16342: LIST
16343: PPUSH
16344: CALL_OW 69
16348: ST_TO_ADDR
// if not tmp then
16349: LD_VAR 0 3
16353: NOT
16354: IFFALSE 16358
// exit ;
16356: GO 16444
// un := tmp [ rand ( 1 , tmp ) ] ;
16358: LD_ADDR_VAR 0 2
16362: PUSH
16363: LD_VAR 0 3
16367: PUSH
16368: LD_INT 1
16370: PPUSH
16371: LD_VAR 0 3
16375: PPUSH
16376: CALL_OW 12
16380: ARRAY
16381: ST_TO_ADDR
// if Crawls ( un ) then
16382: LD_VAR 0 2
16386: PPUSH
16387: CALL_OW 318
16391: IFFALSE 16402
// ComWalk ( un ) ;
16393: LD_VAR 0 2
16397: PPUSH
16398: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
16402: LD_VAR 0 2
16406: PPUSH
16407: LD_INT 9
16409: PPUSH
16410: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
16414: LD_INT 28
16416: PPUSH
16417: LD_OWVAR 2
16421: PPUSH
16422: LD_INT 2
16424: PPUSH
16425: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
16429: LD_INT 29
16431: PPUSH
16432: LD_OWVAR 2
16436: PPUSH
16437: LD_INT 2
16439: PPUSH
16440: CALL_OW 322
// end ;
16444: PPOPN 3
16446: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
16447: LD_EXP 26
16451: IFFALSE 16459
16453: PUSH
16454: LD_EXP 69
16458: AND
16459: IFFALSE 16570
16461: GO 16463
16463: DISABLE
16464: LD_INT 0
16466: PPUSH
16467: PPUSH
16468: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16469: LD_ADDR_VAR 0 3
16473: PUSH
16474: LD_INT 22
16476: PUSH
16477: LD_OWVAR 2
16481: PUSH
16482: EMPTY
16483: LIST
16484: LIST
16485: PUSH
16486: LD_INT 25
16488: PUSH
16489: LD_INT 1
16491: PUSH
16492: EMPTY
16493: LIST
16494: LIST
16495: PUSH
16496: EMPTY
16497: LIST
16498: LIST
16499: PPUSH
16500: CALL_OW 69
16504: ST_TO_ADDR
// if not tmp then
16505: LD_VAR 0 3
16509: NOT
16510: IFFALSE 16514
// exit ;
16512: GO 16570
// un := tmp [ rand ( 1 , tmp ) ] ;
16514: LD_ADDR_VAR 0 2
16518: PUSH
16519: LD_VAR 0 3
16523: PUSH
16524: LD_INT 1
16526: PPUSH
16527: LD_VAR 0 3
16531: PPUSH
16532: CALL_OW 12
16536: ARRAY
16537: ST_TO_ADDR
// if Crawls ( un ) then
16538: LD_VAR 0 2
16542: PPUSH
16543: CALL_OW 318
16547: IFFALSE 16558
// ComWalk ( un ) ;
16549: LD_VAR 0 2
16553: PPUSH
16554: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16558: LD_VAR 0 2
16562: PPUSH
16563: LD_INT 8
16565: PPUSH
16566: CALL_OW 336
// end ;
16570: PPOPN 3
16572: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
16573: LD_EXP 26
16577: IFFALSE 16585
16579: PUSH
16580: LD_EXP 70
16584: AND
16585: IFFALSE 16729
16587: GO 16589
16589: DISABLE
16590: LD_INT 0
16592: PPUSH
16593: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
16594: LD_ADDR_VAR 0 2
16598: PUSH
16599: LD_INT 22
16601: PUSH
16602: LD_OWVAR 2
16606: PUSH
16607: EMPTY
16608: LIST
16609: LIST
16610: PUSH
16611: LD_INT 21
16613: PUSH
16614: LD_INT 2
16616: PUSH
16617: EMPTY
16618: LIST
16619: LIST
16620: PUSH
16621: LD_INT 2
16623: PUSH
16624: LD_INT 34
16626: PUSH
16627: LD_INT 12
16629: PUSH
16630: EMPTY
16631: LIST
16632: LIST
16633: PUSH
16634: LD_INT 34
16636: PUSH
16637: LD_INT 51
16639: PUSH
16640: EMPTY
16641: LIST
16642: LIST
16643: PUSH
16644: LD_INT 34
16646: PUSH
16647: LD_INT 32
16649: PUSH
16650: EMPTY
16651: LIST
16652: LIST
16653: PUSH
16654: EMPTY
16655: LIST
16656: LIST
16657: LIST
16658: LIST
16659: PUSH
16660: EMPTY
16661: LIST
16662: LIST
16663: LIST
16664: PPUSH
16665: CALL_OW 69
16669: ST_TO_ADDR
// if not tmp then
16670: LD_VAR 0 2
16674: NOT
16675: IFFALSE 16679
// exit ;
16677: GO 16729
// for i in tmp do
16679: LD_ADDR_VAR 0 1
16683: PUSH
16684: LD_VAR 0 2
16688: PUSH
16689: FOR_IN
16690: IFFALSE 16727
// if GetCargo ( i , mat_artifact ) = 0 then
16692: LD_VAR 0 1
16696: PPUSH
16697: LD_INT 4
16699: PPUSH
16700: CALL_OW 289
16704: PUSH
16705: LD_INT 0
16707: EQUAL
16708: IFFALSE 16725
// SetCargo ( i , mat_siberit , 100 ) ;
16710: LD_VAR 0 1
16714: PPUSH
16715: LD_INT 3
16717: PPUSH
16718: LD_INT 100
16720: PPUSH
16721: CALL_OW 290
16725: GO 16689
16727: POP
16728: POP
// end ;
16729: PPOPN 2
16731: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
16732: LD_EXP 26
16736: IFFALSE 16744
16738: PUSH
16739: LD_EXP 71
16743: AND
16744: IFFALSE 16927
16746: GO 16748
16748: DISABLE
16749: LD_INT 0
16751: PPUSH
16752: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16753: LD_ADDR_VAR 0 2
16757: PUSH
16758: LD_INT 22
16760: PUSH
16761: LD_OWVAR 2
16765: PUSH
16766: EMPTY
16767: LIST
16768: LIST
16769: PPUSH
16770: CALL_OW 69
16774: ST_TO_ADDR
// if not tmp then
16775: LD_VAR 0 2
16779: NOT
16780: IFFALSE 16784
// exit ;
16782: GO 16927
// for i := 1 to 2 do
16784: LD_ADDR_VAR 0 1
16788: PUSH
16789: DOUBLE
16790: LD_INT 1
16792: DEC
16793: ST_TO_ADDR
16794: LD_INT 2
16796: PUSH
16797: FOR_TO
16798: IFFALSE 16925
// begin uc_side := your_side ;
16800: LD_ADDR_OWVAR 20
16804: PUSH
16805: LD_OWVAR 2
16809: ST_TO_ADDR
// uc_nation := nation_american ;
16810: LD_ADDR_OWVAR 21
16814: PUSH
16815: LD_INT 1
16817: ST_TO_ADDR
// vc_chassis := us_morphling ;
16818: LD_ADDR_OWVAR 37
16822: PUSH
16823: LD_INT 5
16825: ST_TO_ADDR
// vc_engine := engine_siberite ;
16826: LD_ADDR_OWVAR 39
16830: PUSH
16831: LD_INT 3
16833: ST_TO_ADDR
// vc_control := control_computer ;
16834: LD_ADDR_OWVAR 38
16838: PUSH
16839: LD_INT 3
16841: ST_TO_ADDR
// vc_weapon := us_double_laser ;
16842: LD_ADDR_OWVAR 40
16846: PUSH
16847: LD_INT 10
16849: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
16850: LD_VAR 0 2
16854: PUSH
16855: LD_INT 1
16857: ARRAY
16858: PPUSH
16859: CALL_OW 310
16863: NOT
16864: IFFALSE 16911
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
16866: CALL_OW 45
16870: PPUSH
16871: LD_VAR 0 2
16875: PUSH
16876: LD_INT 1
16878: ARRAY
16879: PPUSH
16880: CALL_OW 250
16884: PPUSH
16885: LD_VAR 0 2
16889: PUSH
16890: LD_INT 1
16892: ARRAY
16893: PPUSH
16894: CALL_OW 251
16898: PPUSH
16899: LD_INT 12
16901: PPUSH
16902: LD_INT 1
16904: PPUSH
16905: CALL_OW 50
16909: GO 16923
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
16911: CALL_OW 45
16915: PPUSH
16916: LD_INT 1
16918: PPUSH
16919: CALL_OW 51
// end ;
16923: GO 16797
16925: POP
16926: POP
// end ;
16927: PPOPN 2
16929: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
16930: LD_EXP 26
16934: IFFALSE 16942
16936: PUSH
16937: LD_EXP 72
16941: AND
16942: IFFALSE 17164
16944: GO 16946
16946: DISABLE
16947: LD_INT 0
16949: PPUSH
16950: PPUSH
16951: PPUSH
16952: PPUSH
16953: PPUSH
16954: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16955: LD_ADDR_VAR 0 6
16959: PUSH
16960: LD_INT 22
16962: PUSH
16963: LD_OWVAR 2
16967: PUSH
16968: EMPTY
16969: LIST
16970: LIST
16971: PUSH
16972: LD_INT 21
16974: PUSH
16975: LD_INT 1
16977: PUSH
16978: EMPTY
16979: LIST
16980: LIST
16981: PUSH
16982: LD_INT 3
16984: PUSH
16985: LD_INT 23
16987: PUSH
16988: LD_INT 0
16990: PUSH
16991: EMPTY
16992: LIST
16993: LIST
16994: PUSH
16995: EMPTY
16996: LIST
16997: LIST
16998: PUSH
16999: EMPTY
17000: LIST
17001: LIST
17002: LIST
17003: PPUSH
17004: CALL_OW 69
17008: ST_TO_ADDR
// if not tmp then
17009: LD_VAR 0 6
17013: NOT
17014: IFFALSE 17018
// exit ;
17016: GO 17164
// s1 := rand ( 1 , 4 ) ;
17018: LD_ADDR_VAR 0 2
17022: PUSH
17023: LD_INT 1
17025: PPUSH
17026: LD_INT 4
17028: PPUSH
17029: CALL_OW 12
17033: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
17034: LD_ADDR_VAR 0 4
17038: PUSH
17039: LD_VAR 0 6
17043: PUSH
17044: LD_INT 1
17046: ARRAY
17047: PPUSH
17048: LD_VAR 0 2
17052: PPUSH
17053: CALL_OW 259
17057: ST_TO_ADDR
// if s1 = 1 then
17058: LD_VAR 0 2
17062: PUSH
17063: LD_INT 1
17065: EQUAL
17066: IFFALSE 17086
// s2 := rand ( 2 , 4 ) else
17068: LD_ADDR_VAR 0 3
17072: PUSH
17073: LD_INT 2
17075: PPUSH
17076: LD_INT 4
17078: PPUSH
17079: CALL_OW 12
17083: ST_TO_ADDR
17084: GO 17094
// s2 := 1 ;
17086: LD_ADDR_VAR 0 3
17090: PUSH
17091: LD_INT 1
17093: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
17094: LD_ADDR_VAR 0 5
17098: PUSH
17099: LD_VAR 0 6
17103: PUSH
17104: LD_INT 1
17106: ARRAY
17107: PPUSH
17108: LD_VAR 0 3
17112: PPUSH
17113: CALL_OW 259
17117: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
17118: LD_VAR 0 6
17122: PUSH
17123: LD_INT 1
17125: ARRAY
17126: PPUSH
17127: LD_VAR 0 2
17131: PPUSH
17132: LD_VAR 0 5
17136: PPUSH
17137: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
17141: LD_VAR 0 6
17145: PUSH
17146: LD_INT 1
17148: ARRAY
17149: PPUSH
17150: LD_VAR 0 3
17154: PPUSH
17155: LD_VAR 0 4
17159: PPUSH
17160: CALL_OW 237
// end ;
17164: PPOPN 6
17166: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
17167: LD_EXP 26
17171: IFFALSE 17179
17173: PUSH
17174: LD_EXP 73
17178: AND
17179: IFFALSE 17258
17181: GO 17183
17183: DISABLE
17184: LD_INT 0
17186: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
17187: LD_ADDR_VAR 0 1
17191: PUSH
17192: LD_INT 22
17194: PUSH
17195: LD_OWVAR 2
17199: PUSH
17200: EMPTY
17201: LIST
17202: LIST
17203: PUSH
17204: LD_INT 30
17206: PUSH
17207: LD_INT 3
17209: PUSH
17210: EMPTY
17211: LIST
17212: LIST
17213: PUSH
17214: EMPTY
17215: LIST
17216: LIST
17217: PPUSH
17218: CALL_OW 69
17222: ST_TO_ADDR
// if not tmp then
17223: LD_VAR 0 1
17227: NOT
17228: IFFALSE 17232
// exit ;
17230: GO 17258
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17232: LD_VAR 0 1
17236: PUSH
17237: LD_INT 1
17239: PPUSH
17240: LD_VAR 0 1
17244: PPUSH
17245: CALL_OW 12
17249: ARRAY
17250: PPUSH
17251: LD_INT 1
17253: PPUSH
17254: CALL_OW 234
// end ;
17258: PPOPN 1
17260: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
17261: LD_EXP 26
17265: IFFALSE 17273
17267: PUSH
17268: LD_EXP 74
17272: AND
17273: IFFALSE 17385
17275: GO 17277
17277: DISABLE
17278: LD_INT 0
17280: PPUSH
17281: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
17282: LD_ADDR_VAR 0 2
17286: PUSH
17287: LD_INT 22
17289: PUSH
17290: LD_OWVAR 2
17294: PUSH
17295: EMPTY
17296: LIST
17297: LIST
17298: PUSH
17299: LD_INT 2
17301: PUSH
17302: LD_INT 30
17304: PUSH
17305: LD_INT 27
17307: PUSH
17308: EMPTY
17309: LIST
17310: LIST
17311: PUSH
17312: LD_INT 30
17314: PUSH
17315: LD_INT 26
17317: PUSH
17318: EMPTY
17319: LIST
17320: LIST
17321: PUSH
17322: LD_INT 30
17324: PUSH
17325: LD_INT 28
17327: PUSH
17328: EMPTY
17329: LIST
17330: LIST
17331: PUSH
17332: EMPTY
17333: LIST
17334: LIST
17335: LIST
17336: LIST
17337: PUSH
17338: EMPTY
17339: LIST
17340: LIST
17341: PPUSH
17342: CALL_OW 69
17346: ST_TO_ADDR
// if not tmp then
17347: LD_VAR 0 2
17351: NOT
17352: IFFALSE 17356
// exit ;
17354: GO 17385
// for i in tmp do
17356: LD_ADDR_VAR 0 1
17360: PUSH
17361: LD_VAR 0 2
17365: PUSH
17366: FOR_IN
17367: IFFALSE 17383
// SetLives ( i , 1 ) ;
17369: LD_VAR 0 1
17373: PPUSH
17374: LD_INT 1
17376: PPUSH
17377: CALL_OW 234
17381: GO 17366
17383: POP
17384: POP
// end ;
17385: PPOPN 2
17387: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
17388: LD_EXP 26
17392: IFFALSE 17400
17394: PUSH
17395: LD_EXP 75
17399: AND
17400: IFFALSE 17687
17402: GO 17404
17404: DISABLE
17405: LD_INT 0
17407: PPUSH
17408: PPUSH
17409: PPUSH
// begin i := rand ( 1 , 7 ) ;
17410: LD_ADDR_VAR 0 1
17414: PUSH
17415: LD_INT 1
17417: PPUSH
17418: LD_INT 7
17420: PPUSH
17421: CALL_OW 12
17425: ST_TO_ADDR
// case i of 1 :
17426: LD_VAR 0 1
17430: PUSH
17431: LD_INT 1
17433: DOUBLE
17434: EQUAL
17435: IFTRUE 17439
17437: GO 17449
17439: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
17440: LD_STRING earthquake(getX(game), 0, 32)
17442: PPUSH
17443: CALL_OW 559
17447: GO 17687
17449: LD_INT 2
17451: DOUBLE
17452: EQUAL
17453: IFTRUE 17457
17455: GO 17471
17457: POP
// begin ToLua ( displayStucuk(); ) ;
17458: LD_STRING displayStucuk();
17460: PPUSH
17461: CALL_OW 559
// ResetFog ;
17465: CALL_OW 335
// end ; 3 :
17469: GO 17687
17471: LD_INT 3
17473: DOUBLE
17474: EQUAL
17475: IFTRUE 17479
17477: GO 17583
17479: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17480: LD_ADDR_VAR 0 2
17484: PUSH
17485: LD_INT 22
17487: PUSH
17488: LD_OWVAR 2
17492: PUSH
17493: EMPTY
17494: LIST
17495: LIST
17496: PUSH
17497: LD_INT 25
17499: PUSH
17500: LD_INT 1
17502: PUSH
17503: EMPTY
17504: LIST
17505: LIST
17506: PUSH
17507: EMPTY
17508: LIST
17509: LIST
17510: PPUSH
17511: CALL_OW 69
17515: ST_TO_ADDR
// if not tmp then
17516: LD_VAR 0 2
17520: NOT
17521: IFFALSE 17525
// exit ;
17523: GO 17687
// un := tmp [ rand ( 1 , tmp ) ] ;
17525: LD_ADDR_VAR 0 3
17529: PUSH
17530: LD_VAR 0 2
17534: PUSH
17535: LD_INT 1
17537: PPUSH
17538: LD_VAR 0 2
17542: PPUSH
17543: CALL_OW 12
17547: ARRAY
17548: ST_TO_ADDR
// if Crawls ( un ) then
17549: LD_VAR 0 3
17553: PPUSH
17554: CALL_OW 318
17558: IFFALSE 17569
// ComWalk ( un ) ;
17560: LD_VAR 0 3
17564: PPUSH
17565: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17569: LD_VAR 0 3
17573: PPUSH
17574: LD_INT 8
17576: PPUSH
17577: CALL_OW 336
// end ; 4 :
17581: GO 17687
17583: LD_INT 4
17585: DOUBLE
17586: EQUAL
17587: IFTRUE 17591
17589: GO 17665
17591: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17592: LD_ADDR_VAR 0 2
17596: PUSH
17597: LD_INT 22
17599: PUSH
17600: LD_OWVAR 2
17604: PUSH
17605: EMPTY
17606: LIST
17607: LIST
17608: PUSH
17609: LD_INT 30
17611: PUSH
17612: LD_INT 29
17614: PUSH
17615: EMPTY
17616: LIST
17617: LIST
17618: PUSH
17619: EMPTY
17620: LIST
17621: LIST
17622: PPUSH
17623: CALL_OW 69
17627: ST_TO_ADDR
// if not tmp then
17628: LD_VAR 0 2
17632: NOT
17633: IFFALSE 17637
// exit ;
17635: GO 17687
// CenterNowOnUnits ( tmp [ 1 ] ) ;
17637: LD_VAR 0 2
17641: PUSH
17642: LD_INT 1
17644: ARRAY
17645: PPUSH
17646: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
17650: LD_VAR 0 2
17654: PUSH
17655: LD_INT 1
17657: ARRAY
17658: PPUSH
17659: CALL_OW 65
// end ; 5 .. 7 :
17663: GO 17687
17665: LD_INT 5
17667: DOUBLE
17668: GREATEREQUAL
17669: IFFALSE 17677
17671: LD_INT 7
17673: DOUBLE
17674: LESSEQUAL
17675: IFTRUE 17679
17677: GO 17686
17679: POP
// StreamSibBomb ; end ;
17680: CALL 13868 0 0
17684: GO 17687
17686: POP
// end ;
17687: PPOPN 3
17689: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
17690: LD_EXP 26
17694: IFFALSE 17702
17696: PUSH
17697: LD_EXP 76
17701: AND
17702: IFFALSE 17858
17704: GO 17706
17706: DISABLE
17707: LD_INT 0
17709: PPUSH
17710: PPUSH
17711: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
17712: LD_ADDR_VAR 0 2
17716: PUSH
17717: LD_INT 81
17719: PUSH
17720: LD_OWVAR 2
17724: PUSH
17725: EMPTY
17726: LIST
17727: LIST
17728: PUSH
17729: LD_INT 2
17731: PUSH
17732: LD_INT 21
17734: PUSH
17735: LD_INT 1
17737: PUSH
17738: EMPTY
17739: LIST
17740: LIST
17741: PUSH
17742: LD_INT 21
17744: PUSH
17745: LD_INT 2
17747: PUSH
17748: EMPTY
17749: LIST
17750: LIST
17751: PUSH
17752: EMPTY
17753: LIST
17754: LIST
17755: LIST
17756: PUSH
17757: EMPTY
17758: LIST
17759: LIST
17760: PPUSH
17761: CALL_OW 69
17765: ST_TO_ADDR
// if not tmp then
17766: LD_VAR 0 2
17770: NOT
17771: IFFALSE 17775
// exit ;
17773: GO 17858
// p := 0 ;
17775: LD_ADDR_VAR 0 3
17779: PUSH
17780: LD_INT 0
17782: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17783: LD_INT 35
17785: PPUSH
17786: CALL_OW 67
// p := p + 1 ;
17790: LD_ADDR_VAR 0 3
17794: PUSH
17795: LD_VAR 0 3
17799: PUSH
17800: LD_INT 1
17802: PLUS
17803: ST_TO_ADDR
// for i in tmp do
17804: LD_ADDR_VAR 0 1
17808: PUSH
17809: LD_VAR 0 2
17813: PUSH
17814: FOR_IN
17815: IFFALSE 17846
// if GetLives ( i ) < 1000 then
17817: LD_VAR 0 1
17821: PPUSH
17822: CALL_OW 256
17826: PUSH
17827: LD_INT 1000
17829: LESS
17830: IFFALSE 17844
// SetLives ( i , 1000 ) ;
17832: LD_VAR 0 1
17836: PPUSH
17837: LD_INT 1000
17839: PPUSH
17840: CALL_OW 234
17844: GO 17814
17846: POP
17847: POP
// until p > 20 ;
17848: LD_VAR 0 3
17852: PUSH
17853: LD_INT 20
17855: GREATER
17856: IFFALSE 17783
// end ;
17858: PPOPN 3
17860: END
// every 0 0$1 trigger StreamModeActive and sTime do
17861: LD_EXP 26
17865: IFFALSE 17873
17867: PUSH
17868: LD_EXP 77
17872: AND
17873: IFFALSE 17908
17875: GO 17877
17877: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
17878: LD_INT 28
17880: PPUSH
17881: LD_OWVAR 2
17885: PPUSH
17886: LD_INT 2
17888: PPUSH
17889: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
17893: LD_INT 30
17895: PPUSH
17896: LD_OWVAR 2
17900: PPUSH
17901: LD_INT 2
17903: PPUSH
17904: CALL_OW 322
// end ;
17908: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
17909: LD_EXP 26
17913: IFFALSE 17921
17915: PUSH
17916: LD_EXP 78
17920: AND
17921: IFFALSE 18042
17923: GO 17925
17925: DISABLE
17926: LD_INT 0
17928: PPUSH
17929: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17930: LD_ADDR_VAR 0 2
17934: PUSH
17935: LD_INT 22
17937: PUSH
17938: LD_OWVAR 2
17942: PUSH
17943: EMPTY
17944: LIST
17945: LIST
17946: PUSH
17947: LD_INT 21
17949: PUSH
17950: LD_INT 1
17952: PUSH
17953: EMPTY
17954: LIST
17955: LIST
17956: PUSH
17957: LD_INT 3
17959: PUSH
17960: LD_INT 23
17962: PUSH
17963: LD_INT 0
17965: PUSH
17966: EMPTY
17967: LIST
17968: LIST
17969: PUSH
17970: EMPTY
17971: LIST
17972: LIST
17973: PUSH
17974: EMPTY
17975: LIST
17976: LIST
17977: LIST
17978: PPUSH
17979: CALL_OW 69
17983: ST_TO_ADDR
// if not tmp then
17984: LD_VAR 0 2
17988: NOT
17989: IFFALSE 17993
// exit ;
17991: GO 18042
// for i in tmp do
17993: LD_ADDR_VAR 0 1
17997: PUSH
17998: LD_VAR 0 2
18002: PUSH
18003: FOR_IN
18004: IFFALSE 18040
// begin if Crawls ( i ) then
18006: LD_VAR 0 1
18010: PPUSH
18011: CALL_OW 318
18015: IFFALSE 18026
// ComWalk ( i ) ;
18017: LD_VAR 0 1
18021: PPUSH
18022: CALL_OW 138
// SetClass ( i , 2 ) ;
18026: LD_VAR 0 1
18030: PPUSH
18031: LD_INT 2
18033: PPUSH
18034: CALL_OW 336
// end ;
18038: GO 18003
18040: POP
18041: POP
// end ;
18042: PPOPN 2
18044: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
18045: LD_EXP 26
18049: IFFALSE 18057
18051: PUSH
18052: LD_EXP 79
18056: AND
18057: IFFALSE 18347
18059: GO 18061
18061: DISABLE
18062: LD_INT 0
18064: PPUSH
18065: PPUSH
18066: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
18067: LD_OWVAR 2
18071: PPUSH
18072: LD_INT 9
18074: PPUSH
18075: LD_INT 1
18077: PPUSH
18078: LD_INT 1
18080: PPUSH
18081: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
18085: LD_INT 9
18087: PPUSH
18088: LD_OWVAR 2
18092: PPUSH
18093: CALL_OW 343
// uc_side := 9 ;
18097: LD_ADDR_OWVAR 20
18101: PUSH
18102: LD_INT 9
18104: ST_TO_ADDR
// uc_nation := 2 ;
18105: LD_ADDR_OWVAR 21
18109: PUSH
18110: LD_INT 2
18112: ST_TO_ADDR
// hc_name := Dark Warrior ;
18113: LD_ADDR_OWVAR 26
18117: PUSH
18118: LD_STRING Dark Warrior
18120: ST_TO_ADDR
// hc_gallery :=  ;
18121: LD_ADDR_OWVAR 33
18125: PUSH
18126: LD_STRING 
18128: ST_TO_ADDR
// hc_noskilllimit := true ;
18129: LD_ADDR_OWVAR 76
18133: PUSH
18134: LD_INT 1
18136: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
18137: LD_ADDR_OWVAR 31
18141: PUSH
18142: LD_INT 30
18144: PUSH
18145: LD_INT 30
18147: PUSH
18148: LD_INT 30
18150: PUSH
18151: LD_INT 30
18153: PUSH
18154: EMPTY
18155: LIST
18156: LIST
18157: LIST
18158: LIST
18159: ST_TO_ADDR
// un := CreateHuman ;
18160: LD_ADDR_VAR 0 3
18164: PUSH
18165: CALL_OW 44
18169: ST_TO_ADDR
// hc_noskilllimit := false ;
18170: LD_ADDR_OWVAR 76
18174: PUSH
18175: LD_INT 0
18177: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18178: LD_VAR 0 3
18182: PPUSH
18183: LD_INT 1
18185: PPUSH
18186: CALL_OW 51
// ToLua ( playRanger() ) ;
18190: LD_STRING playRanger()
18192: PPUSH
18193: CALL_OW 559
// p := 0 ;
18197: LD_ADDR_VAR 0 2
18201: PUSH
18202: LD_INT 0
18204: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18205: LD_INT 35
18207: PPUSH
18208: CALL_OW 67
// p := p + 1 ;
18212: LD_ADDR_VAR 0 2
18216: PUSH
18217: LD_VAR 0 2
18221: PUSH
18222: LD_INT 1
18224: PLUS
18225: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
18226: LD_VAR 0 3
18230: PPUSH
18231: CALL_OW 256
18235: PUSH
18236: LD_INT 1000
18238: LESS
18239: IFFALSE 18253
// SetLives ( un , 1000 ) ;
18241: LD_VAR 0 3
18245: PPUSH
18246: LD_INT 1000
18248: PPUSH
18249: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
18253: LD_VAR 0 3
18257: PPUSH
18258: LD_INT 81
18260: PUSH
18261: LD_OWVAR 2
18265: PUSH
18266: EMPTY
18267: LIST
18268: LIST
18269: PUSH
18270: LD_INT 91
18272: PUSH
18273: LD_VAR 0 3
18277: PUSH
18278: LD_INT 30
18280: PUSH
18281: EMPTY
18282: LIST
18283: LIST
18284: LIST
18285: PUSH
18286: EMPTY
18287: LIST
18288: LIST
18289: PPUSH
18290: CALL_OW 69
18294: PPUSH
18295: LD_VAR 0 3
18299: PPUSH
18300: CALL_OW 74
18304: PPUSH
18305: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
18309: LD_VAR 0 2
18313: PUSH
18314: LD_INT 80
18316: GREATER
18317: IFTRUE 18330
18319: PUSH
18320: LD_VAR 0 3
18324: PPUSH
18325: CALL_OW 301
18329: OR
18330: IFFALSE 18205
// if un then
18332: LD_VAR 0 3
18336: IFFALSE 18347
// RemoveUnit ( un ) ;
18338: LD_VAR 0 3
18342: PPUSH
18343: CALL_OW 64
// end ;
18347: PPOPN 3
18349: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
18350: LD_EXP 80
18354: IFFALSE 18470
18356: GO 18358
18358: DISABLE
18359: LD_INT 0
18361: PPUSH
18362: PPUSH
18363: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
18364: LD_ADDR_VAR 0 2
18368: PUSH
18369: LD_INT 81
18371: PUSH
18372: LD_OWVAR 2
18376: PUSH
18377: EMPTY
18378: LIST
18379: LIST
18380: PUSH
18381: LD_INT 21
18383: PUSH
18384: LD_INT 1
18386: PUSH
18387: EMPTY
18388: LIST
18389: LIST
18390: PUSH
18391: EMPTY
18392: LIST
18393: LIST
18394: PPUSH
18395: CALL_OW 69
18399: ST_TO_ADDR
// ToLua ( playComputer() ) ;
18400: LD_STRING playComputer()
18402: PPUSH
18403: CALL_OW 559
// if not tmp then
18407: LD_VAR 0 2
18411: NOT
18412: IFFALSE 18416
// exit ;
18414: GO 18470
// for i in tmp do
18416: LD_ADDR_VAR 0 1
18420: PUSH
18421: LD_VAR 0 2
18425: PUSH
18426: FOR_IN
18427: IFFALSE 18468
// for j := 1 to 4 do
18429: LD_ADDR_VAR 0 3
18433: PUSH
18434: DOUBLE
18435: LD_INT 1
18437: DEC
18438: ST_TO_ADDR
18439: LD_INT 4
18441: PUSH
18442: FOR_TO
18443: IFFALSE 18464
// SetSkill ( i , j , 10 ) ;
18445: LD_VAR 0 1
18449: PPUSH
18450: LD_VAR 0 3
18454: PPUSH
18455: LD_INT 10
18457: PPUSH
18458: CALL_OW 237
18462: GO 18442
18464: POP
18465: POP
18466: GO 18426
18468: POP
18469: POP
// end ;
18470: PPOPN 3
18472: END
// every 0 0$1 trigger s30 do var i , tmp ;
18473: LD_EXP 81
18477: IFFALSE 18546
18479: GO 18481
18481: DISABLE
18482: LD_INT 0
18484: PPUSH
18485: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18486: LD_ADDR_VAR 0 2
18490: PUSH
18491: LD_INT 22
18493: PUSH
18494: LD_OWVAR 2
18498: PUSH
18499: EMPTY
18500: LIST
18501: LIST
18502: PPUSH
18503: CALL_OW 69
18507: ST_TO_ADDR
// if not tmp then
18508: LD_VAR 0 2
18512: NOT
18513: IFFALSE 18517
// exit ;
18515: GO 18546
// for i in tmp do
18517: LD_ADDR_VAR 0 1
18521: PUSH
18522: LD_VAR 0 2
18526: PUSH
18527: FOR_IN
18528: IFFALSE 18544
// SetLives ( i , 300 ) ;
18530: LD_VAR 0 1
18534: PPUSH
18535: LD_INT 300
18537: PPUSH
18538: CALL_OW 234
18542: GO 18527
18544: POP
18545: POP
// end ;
18546: PPOPN 2
18548: END
// every 0 0$1 trigger s60 do var i , tmp ;
18549: LD_EXP 82
18553: IFFALSE 18622
18555: GO 18557
18557: DISABLE
18558: LD_INT 0
18560: PPUSH
18561: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18562: LD_ADDR_VAR 0 2
18566: PUSH
18567: LD_INT 22
18569: PUSH
18570: LD_OWVAR 2
18574: PUSH
18575: EMPTY
18576: LIST
18577: LIST
18578: PPUSH
18579: CALL_OW 69
18583: ST_TO_ADDR
// if not tmp then
18584: LD_VAR 0 2
18588: NOT
18589: IFFALSE 18593
// exit ;
18591: GO 18622
// for i in tmp do
18593: LD_ADDR_VAR 0 1
18597: PUSH
18598: LD_VAR 0 2
18602: PUSH
18603: FOR_IN
18604: IFFALSE 18620
// SetLives ( i , 600 ) ;
18606: LD_VAR 0 1
18610: PPUSH
18611: LD_INT 600
18613: PPUSH
18614: CALL_OW 234
18618: GO 18603
18620: POP
18621: POP
// end ;
18622: PPOPN 2
18624: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18625: LD_INT 0
18627: PPUSH
// case cmd of 301 :
18628: LD_VAR 0 1
18632: PUSH
18633: LD_INT 301
18635: DOUBLE
18636: EQUAL
18637: IFTRUE 18641
18639: GO 18673
18641: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
18642: LD_VAR 0 6
18646: PPUSH
18647: LD_VAR 0 7
18651: PPUSH
18652: LD_VAR 0 8
18656: PPUSH
18657: LD_VAR 0 4
18661: PPUSH
18662: LD_VAR 0 5
18666: PPUSH
18667: CALL 19886 0 5
18671: GO 18794
18673: LD_INT 302
18675: DOUBLE
18676: EQUAL
18677: IFTRUE 18681
18679: GO 18718
18681: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
18682: LD_VAR 0 6
18686: PPUSH
18687: LD_VAR 0 7
18691: PPUSH
18692: LD_VAR 0 8
18696: PPUSH
18697: LD_VAR 0 9
18701: PPUSH
18702: LD_VAR 0 4
18706: PPUSH
18707: LD_VAR 0 5
18711: PPUSH
18712: CALL 19977 0 6
18716: GO 18794
18718: LD_INT 303
18720: DOUBLE
18721: EQUAL
18722: IFTRUE 18726
18724: GO 18763
18726: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
18727: LD_VAR 0 6
18731: PPUSH
18732: LD_VAR 0 7
18736: PPUSH
18737: LD_VAR 0 8
18741: PPUSH
18742: LD_VAR 0 9
18746: PPUSH
18747: LD_VAR 0 4
18751: PPUSH
18752: LD_VAR 0 5
18756: PPUSH
18757: CALL 18799 0 6
18761: GO 18794
18763: LD_INT 304
18765: DOUBLE
18766: EQUAL
18767: IFTRUE 18771
18769: GO 18793
18771: POP
// hHackTeleport ( unit , x , y ) ; end ;
18772: LD_VAR 0 2
18776: PPUSH
18777: LD_VAR 0 4
18781: PPUSH
18782: LD_VAR 0 5
18786: PPUSH
18787: CALL 20570 0 3
18791: GO 18794
18793: POP
// end ;
18794: LD_VAR 0 12
18798: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
18799: LD_INT 0
18801: PPUSH
18802: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
18803: LD_VAR 0 1
18807: PUSH
18808: LD_INT 1
18810: LESS
18811: IFTRUE 18823
18813: PUSH
18814: LD_VAR 0 1
18818: PUSH
18819: LD_INT 3
18821: GREATER
18822: OR
18823: IFTRUE 18841
18825: PUSH
18826: LD_VAR 0 5
18830: PPUSH
18831: LD_VAR 0 6
18835: PPUSH
18836: CALL_OW 428
18840: OR
18841: IFFALSE 18845
// exit ;
18843: GO 19573
// uc_side := your_side ;
18845: LD_ADDR_OWVAR 20
18849: PUSH
18850: LD_OWVAR 2
18854: ST_TO_ADDR
// uc_nation := nation ;
18855: LD_ADDR_OWVAR 21
18859: PUSH
18860: LD_VAR 0 1
18864: ST_TO_ADDR
// bc_level = 1 ;
18865: LD_ADDR_OWVAR 43
18869: PUSH
18870: LD_INT 1
18872: ST_TO_ADDR
// case btype of 1 :
18873: LD_VAR 0 2
18877: PUSH
18878: LD_INT 1
18880: DOUBLE
18881: EQUAL
18882: IFTRUE 18886
18884: GO 18897
18886: POP
// bc_type := b_depot ; 2 :
18887: LD_ADDR_OWVAR 42
18891: PUSH
18892: LD_INT 0
18894: ST_TO_ADDR
18895: GO 19517
18897: LD_INT 2
18899: DOUBLE
18900: EQUAL
18901: IFTRUE 18905
18903: GO 18916
18905: POP
// bc_type := b_warehouse ; 3 :
18906: LD_ADDR_OWVAR 42
18910: PUSH
18911: LD_INT 1
18913: ST_TO_ADDR
18914: GO 19517
18916: LD_INT 3
18918: DOUBLE
18919: EQUAL
18920: IFTRUE 18924
18922: GO 18935
18924: POP
// bc_type := b_lab ; 4 .. 9 :
18925: LD_ADDR_OWVAR 42
18929: PUSH
18930: LD_INT 6
18932: ST_TO_ADDR
18933: GO 19517
18935: LD_INT 4
18937: DOUBLE
18938: GREATEREQUAL
18939: IFFALSE 18947
18941: LD_INT 9
18943: DOUBLE
18944: LESSEQUAL
18945: IFTRUE 18949
18947: GO 19009
18949: POP
// begin bc_type := b_lab_half ;
18950: LD_ADDR_OWVAR 42
18954: PUSH
18955: LD_INT 7
18957: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
18958: LD_ADDR_OWVAR 44
18962: PUSH
18963: LD_INT 10
18965: PUSH
18966: LD_INT 11
18968: PUSH
18969: LD_INT 12
18971: PUSH
18972: LD_INT 15
18974: PUSH
18975: LD_INT 14
18977: PUSH
18978: LD_INT 13
18980: PUSH
18981: EMPTY
18982: LIST
18983: LIST
18984: LIST
18985: LIST
18986: LIST
18987: LIST
18988: PUSH
18989: LD_VAR 0 2
18993: PUSH
18994: LD_INT 3
18996: MINUS
18997: ARRAY
18998: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
18999: LD_ADDR_OWVAR 45
19003: PUSH
19004: LD_INT 9
19006: ST_TO_ADDR
// end ; 10 .. 13 :
19007: GO 19517
19009: LD_INT 10
19011: DOUBLE
19012: GREATEREQUAL
19013: IFFALSE 19021
19015: LD_INT 13
19017: DOUBLE
19018: LESSEQUAL
19019: IFTRUE 19023
19021: GO 19100
19023: POP
// begin bc_type := b_lab_full ;
19024: LD_ADDR_OWVAR 42
19028: PUSH
19029: LD_INT 8
19031: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
19032: LD_ADDR_OWVAR 44
19036: PUSH
19037: LD_INT 10
19039: PUSH
19040: LD_INT 12
19042: PUSH
19043: LD_INT 14
19045: PUSH
19046: LD_INT 13
19048: PUSH
19049: EMPTY
19050: LIST
19051: LIST
19052: LIST
19053: LIST
19054: PUSH
19055: LD_VAR 0 2
19059: PUSH
19060: LD_INT 9
19062: MINUS
19063: ARRAY
19064: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
19065: LD_ADDR_OWVAR 45
19069: PUSH
19070: LD_INT 11
19072: PUSH
19073: LD_INT 15
19075: PUSH
19076: LD_INT 12
19078: PUSH
19079: LD_INT 15
19081: PUSH
19082: EMPTY
19083: LIST
19084: LIST
19085: LIST
19086: LIST
19087: PUSH
19088: LD_VAR 0 2
19092: PUSH
19093: LD_INT 9
19095: MINUS
19096: ARRAY
19097: ST_TO_ADDR
// end ; 14 :
19098: GO 19517
19100: LD_INT 14
19102: DOUBLE
19103: EQUAL
19104: IFTRUE 19108
19106: GO 19119
19108: POP
// bc_type := b_workshop ; 15 :
19109: LD_ADDR_OWVAR 42
19113: PUSH
19114: LD_INT 2
19116: ST_TO_ADDR
19117: GO 19517
19119: LD_INT 15
19121: DOUBLE
19122: EQUAL
19123: IFTRUE 19127
19125: GO 19138
19127: POP
// bc_type := b_factory ; 16 :
19128: LD_ADDR_OWVAR 42
19132: PUSH
19133: LD_INT 3
19135: ST_TO_ADDR
19136: GO 19517
19138: LD_INT 16
19140: DOUBLE
19141: EQUAL
19142: IFTRUE 19146
19144: GO 19157
19146: POP
// bc_type := b_ext_gun ; 17 :
19147: LD_ADDR_OWVAR 42
19151: PUSH
19152: LD_INT 17
19154: ST_TO_ADDR
19155: GO 19517
19157: LD_INT 17
19159: DOUBLE
19160: EQUAL
19161: IFTRUE 19165
19163: GO 19193
19165: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
19166: LD_ADDR_OWVAR 42
19170: PUSH
19171: LD_INT 19
19173: PUSH
19174: LD_INT 23
19176: PUSH
19177: LD_INT 19
19179: PUSH
19180: EMPTY
19181: LIST
19182: LIST
19183: LIST
19184: PUSH
19185: LD_VAR 0 1
19189: ARRAY
19190: ST_TO_ADDR
19191: GO 19517
19193: LD_INT 18
19195: DOUBLE
19196: EQUAL
19197: IFTRUE 19201
19199: GO 19212
19201: POP
// bc_type := b_ext_radar ; 19 :
19202: LD_ADDR_OWVAR 42
19206: PUSH
19207: LD_INT 20
19209: ST_TO_ADDR
19210: GO 19517
19212: LD_INT 19
19214: DOUBLE
19215: EQUAL
19216: IFTRUE 19220
19218: GO 19231
19220: POP
// bc_type := b_ext_radio ; 20 :
19221: LD_ADDR_OWVAR 42
19225: PUSH
19226: LD_INT 22
19228: ST_TO_ADDR
19229: GO 19517
19231: LD_INT 20
19233: DOUBLE
19234: EQUAL
19235: IFTRUE 19239
19237: GO 19250
19239: POP
// bc_type := b_ext_siberium ; 21 :
19240: LD_ADDR_OWVAR 42
19244: PUSH
19245: LD_INT 21
19247: ST_TO_ADDR
19248: GO 19517
19250: LD_INT 21
19252: DOUBLE
19253: EQUAL
19254: IFTRUE 19258
19256: GO 19269
19258: POP
// bc_type := b_ext_computer ; 22 :
19259: LD_ADDR_OWVAR 42
19263: PUSH
19264: LD_INT 24
19266: ST_TO_ADDR
19267: GO 19517
19269: LD_INT 22
19271: DOUBLE
19272: EQUAL
19273: IFTRUE 19277
19275: GO 19288
19277: POP
// bc_type := b_ext_track ; 23 :
19278: LD_ADDR_OWVAR 42
19282: PUSH
19283: LD_INT 16
19285: ST_TO_ADDR
19286: GO 19517
19288: LD_INT 23
19290: DOUBLE
19291: EQUAL
19292: IFTRUE 19296
19294: GO 19307
19296: POP
// bc_type := b_ext_laser ; 24 :
19297: LD_ADDR_OWVAR 42
19301: PUSH
19302: LD_INT 25
19304: ST_TO_ADDR
19305: GO 19517
19307: LD_INT 24
19309: DOUBLE
19310: EQUAL
19311: IFTRUE 19315
19313: GO 19326
19315: POP
// bc_type := b_control_tower ; 25 :
19316: LD_ADDR_OWVAR 42
19320: PUSH
19321: LD_INT 36
19323: ST_TO_ADDR
19324: GO 19517
19326: LD_INT 25
19328: DOUBLE
19329: EQUAL
19330: IFTRUE 19334
19332: GO 19345
19334: POP
// bc_type := b_breastwork ; 26 :
19335: LD_ADDR_OWVAR 42
19339: PUSH
19340: LD_INT 31
19342: ST_TO_ADDR
19343: GO 19517
19345: LD_INT 26
19347: DOUBLE
19348: EQUAL
19349: IFTRUE 19353
19351: GO 19364
19353: POP
// bc_type := b_bunker ; 27 :
19354: LD_ADDR_OWVAR 42
19358: PUSH
19359: LD_INT 32
19361: ST_TO_ADDR
19362: GO 19517
19364: LD_INT 27
19366: DOUBLE
19367: EQUAL
19368: IFTRUE 19372
19370: GO 19383
19372: POP
// bc_type := b_turret ; 28 :
19373: LD_ADDR_OWVAR 42
19377: PUSH
19378: LD_INT 33
19380: ST_TO_ADDR
19381: GO 19517
19383: LD_INT 28
19385: DOUBLE
19386: EQUAL
19387: IFTRUE 19391
19389: GO 19402
19391: POP
// bc_type := b_armoury ; 29 :
19392: LD_ADDR_OWVAR 42
19396: PUSH
19397: LD_INT 4
19399: ST_TO_ADDR
19400: GO 19517
19402: LD_INT 29
19404: DOUBLE
19405: EQUAL
19406: IFTRUE 19410
19408: GO 19421
19410: POP
// bc_type := b_barracks ; 30 :
19411: LD_ADDR_OWVAR 42
19415: PUSH
19416: LD_INT 5
19418: ST_TO_ADDR
19419: GO 19517
19421: LD_INT 30
19423: DOUBLE
19424: EQUAL
19425: IFTRUE 19429
19427: GO 19440
19429: POP
// bc_type := b_solar_power ; 31 :
19430: LD_ADDR_OWVAR 42
19434: PUSH
19435: LD_INT 27
19437: ST_TO_ADDR
19438: GO 19517
19440: LD_INT 31
19442: DOUBLE
19443: EQUAL
19444: IFTRUE 19448
19446: GO 19459
19448: POP
// bc_type := b_oil_power ; 32 :
19449: LD_ADDR_OWVAR 42
19453: PUSH
19454: LD_INT 26
19456: ST_TO_ADDR
19457: GO 19517
19459: LD_INT 32
19461: DOUBLE
19462: EQUAL
19463: IFTRUE 19467
19465: GO 19478
19467: POP
// bc_type := b_siberite_power ; 33 :
19468: LD_ADDR_OWVAR 42
19472: PUSH
19473: LD_INT 28
19475: ST_TO_ADDR
19476: GO 19517
19478: LD_INT 33
19480: DOUBLE
19481: EQUAL
19482: IFTRUE 19486
19484: GO 19497
19486: POP
// bc_type := b_oil_mine ; 34 :
19487: LD_ADDR_OWVAR 42
19491: PUSH
19492: LD_INT 29
19494: ST_TO_ADDR
19495: GO 19517
19497: LD_INT 34
19499: DOUBLE
19500: EQUAL
19501: IFTRUE 19505
19503: GO 19516
19505: POP
// bc_type := b_siberite_mine ; end ;
19506: LD_ADDR_OWVAR 42
19510: PUSH
19511: LD_INT 30
19513: ST_TO_ADDR
19514: GO 19517
19516: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
19517: LD_ADDR_VAR 0 8
19521: PUSH
19522: LD_VAR 0 5
19526: PPUSH
19527: LD_VAR 0 6
19531: PPUSH
19532: LD_VAR 0 3
19536: PPUSH
19537: CALL_OW 47
19541: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
19542: LD_OWVAR 42
19546: PUSH
19547: LD_INT 32
19549: PUSH
19550: LD_INT 33
19552: PUSH
19553: EMPTY
19554: LIST
19555: LIST
19556: IN
19557: IFFALSE 19573
// PlaceWeaponTurret ( b , weapon ) ;
19559: LD_VAR 0 8
19563: PPUSH
19564: LD_VAR 0 4
19568: PPUSH
19569: CALL_OW 431
// end ;
19573: LD_VAR 0 7
19577: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
19578: LD_INT 0
19580: PPUSH
19581: PPUSH
19582: PPUSH
19583: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19584: LD_ADDR_VAR 0 4
19588: PUSH
19589: LD_INT 22
19591: PUSH
19592: LD_OWVAR 2
19596: PUSH
19597: EMPTY
19598: LIST
19599: LIST
19600: PUSH
19601: LD_INT 2
19603: PUSH
19604: LD_INT 30
19606: PUSH
19607: LD_INT 0
19609: PUSH
19610: EMPTY
19611: LIST
19612: LIST
19613: PUSH
19614: LD_INT 30
19616: PUSH
19617: LD_INT 1
19619: PUSH
19620: EMPTY
19621: LIST
19622: LIST
19623: PUSH
19624: EMPTY
19625: LIST
19626: LIST
19627: LIST
19628: PUSH
19629: EMPTY
19630: LIST
19631: LIST
19632: PPUSH
19633: CALL_OW 69
19637: ST_TO_ADDR
// if not tmp then
19638: LD_VAR 0 4
19642: NOT
19643: IFFALSE 19647
// exit ;
19645: GO 19706
// for i in tmp do
19647: LD_ADDR_VAR 0 2
19651: PUSH
19652: LD_VAR 0 4
19656: PUSH
19657: FOR_IN
19658: IFFALSE 19704
// for j = 1 to 3 do
19660: LD_ADDR_VAR 0 3
19664: PUSH
19665: DOUBLE
19666: LD_INT 1
19668: DEC
19669: ST_TO_ADDR
19670: LD_INT 3
19672: PUSH
19673: FOR_TO
19674: IFFALSE 19700
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
19676: LD_VAR 0 2
19680: PPUSH
19681: CALL_OW 274
19685: PPUSH
19686: LD_VAR 0 3
19690: PPUSH
19691: LD_INT 99999
19693: PPUSH
19694: CALL_OW 277
19698: GO 19673
19700: POP
19701: POP
19702: GO 19657
19704: POP
19705: POP
// end ;
19706: LD_VAR 0 1
19710: RET
// export function hHackSetLevel10 ; var i , j ; begin
19711: LD_INT 0
19713: PPUSH
19714: PPUSH
19715: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19716: LD_ADDR_VAR 0 2
19720: PUSH
19721: LD_INT 21
19723: PUSH
19724: LD_INT 1
19726: PUSH
19727: EMPTY
19728: LIST
19729: LIST
19730: PPUSH
19731: CALL_OW 69
19735: PUSH
19736: FOR_IN
19737: IFFALSE 19789
// if IsSelected ( i ) then
19739: LD_VAR 0 2
19743: PPUSH
19744: CALL_OW 306
19748: IFFALSE 19787
// begin for j := 1 to 4 do
19750: LD_ADDR_VAR 0 3
19754: PUSH
19755: DOUBLE
19756: LD_INT 1
19758: DEC
19759: ST_TO_ADDR
19760: LD_INT 4
19762: PUSH
19763: FOR_TO
19764: IFFALSE 19785
// SetSkill ( i , j , 10 ) ;
19766: LD_VAR 0 2
19770: PPUSH
19771: LD_VAR 0 3
19775: PPUSH
19776: LD_INT 10
19778: PPUSH
19779: CALL_OW 237
19783: GO 19763
19785: POP
19786: POP
// end ;
19787: GO 19736
19789: POP
19790: POP
// end ;
19791: LD_VAR 0 1
19795: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
19796: LD_INT 0
19798: PPUSH
19799: PPUSH
19800: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
19801: LD_ADDR_VAR 0 2
19805: PUSH
19806: LD_INT 22
19808: PUSH
19809: LD_OWVAR 2
19813: PUSH
19814: EMPTY
19815: LIST
19816: LIST
19817: PUSH
19818: LD_INT 21
19820: PUSH
19821: LD_INT 1
19823: PUSH
19824: EMPTY
19825: LIST
19826: LIST
19827: PUSH
19828: EMPTY
19829: LIST
19830: LIST
19831: PPUSH
19832: CALL_OW 69
19836: PUSH
19837: FOR_IN
19838: IFFALSE 19879
// begin for j := 1 to 4 do
19840: LD_ADDR_VAR 0 3
19844: PUSH
19845: DOUBLE
19846: LD_INT 1
19848: DEC
19849: ST_TO_ADDR
19850: LD_INT 4
19852: PUSH
19853: FOR_TO
19854: IFFALSE 19875
// SetSkill ( i , j , 10 ) ;
19856: LD_VAR 0 2
19860: PPUSH
19861: LD_VAR 0 3
19865: PPUSH
19866: LD_INT 10
19868: PPUSH
19869: CALL_OW 237
19873: GO 19853
19875: POP
19876: POP
// end ;
19877: GO 19837
19879: POP
19880: POP
// end ;
19881: LD_VAR 0 1
19885: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
19886: LD_INT 0
19888: PPUSH
// uc_side := your_side ;
19889: LD_ADDR_OWVAR 20
19893: PUSH
19894: LD_OWVAR 2
19898: ST_TO_ADDR
// uc_nation := nation ;
19899: LD_ADDR_OWVAR 21
19903: PUSH
19904: LD_VAR 0 1
19908: ST_TO_ADDR
// InitHc ;
19909: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
19913: LD_INT 0
19915: PPUSH
19916: LD_VAR 0 2
19920: PPUSH
19921: LD_VAR 0 3
19925: PPUSH
19926: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
19930: LD_VAR 0 4
19934: PPUSH
19935: LD_VAR 0 5
19939: PPUSH
19940: CALL_OW 428
19944: PUSH
19945: LD_INT 0
19947: EQUAL
19948: IFFALSE 19972
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
19950: CALL_OW 44
19954: PPUSH
19955: LD_VAR 0 4
19959: PPUSH
19960: LD_VAR 0 5
19964: PPUSH
19965: LD_INT 1
19967: PPUSH
19968: CALL_OW 48
// end ;
19972: LD_VAR 0 6
19976: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
19977: LD_INT 0
19979: PPUSH
19980: PPUSH
// uc_side := your_side ;
19981: LD_ADDR_OWVAR 20
19985: PUSH
19986: LD_OWVAR 2
19990: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
19991: LD_VAR 0 1
19995: PUSH
19996: LD_INT 1
19998: PUSH
19999: LD_INT 2
20001: PUSH
20002: LD_INT 3
20004: PUSH
20005: LD_INT 4
20007: PUSH
20008: LD_INT 5
20010: PUSH
20011: EMPTY
20012: LIST
20013: LIST
20014: LIST
20015: LIST
20016: LIST
20017: IN
20018: IFFALSE 20030
// uc_nation := nation_american else
20020: LD_ADDR_OWVAR 21
20024: PUSH
20025: LD_INT 1
20027: ST_TO_ADDR
20028: GO 20073
// if chassis in [ 11 , 12 , 13 , 14 ] then
20030: LD_VAR 0 1
20034: PUSH
20035: LD_INT 11
20037: PUSH
20038: LD_INT 12
20040: PUSH
20041: LD_INT 13
20043: PUSH
20044: LD_INT 14
20046: PUSH
20047: EMPTY
20048: LIST
20049: LIST
20050: LIST
20051: LIST
20052: IN
20053: IFFALSE 20065
// uc_nation := nation_arabian else
20055: LD_ADDR_OWVAR 21
20059: PUSH
20060: LD_INT 2
20062: ST_TO_ADDR
20063: GO 20073
// uc_nation := nation_russian ;
20065: LD_ADDR_OWVAR 21
20069: PUSH
20070: LD_INT 3
20072: ST_TO_ADDR
// vc_chassis := chassis ;
20073: LD_ADDR_OWVAR 37
20077: PUSH
20078: LD_VAR 0 1
20082: ST_TO_ADDR
// vc_engine := engine ;
20083: LD_ADDR_OWVAR 39
20087: PUSH
20088: LD_VAR 0 2
20092: ST_TO_ADDR
// vc_control := control ;
20093: LD_ADDR_OWVAR 38
20097: PUSH
20098: LD_VAR 0 3
20102: ST_TO_ADDR
// vc_weapon := weapon ;
20103: LD_ADDR_OWVAR 40
20107: PUSH
20108: LD_VAR 0 4
20112: ST_TO_ADDR
// un := CreateVehicle ;
20113: LD_ADDR_VAR 0 8
20117: PUSH
20118: CALL_OW 45
20122: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
20123: LD_VAR 0 8
20127: PPUSH
20128: LD_INT 0
20130: PPUSH
20131: LD_INT 5
20133: PPUSH
20134: CALL_OW 12
20138: PPUSH
20139: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
20143: LD_VAR 0 8
20147: PPUSH
20148: LD_VAR 0 5
20152: PPUSH
20153: LD_VAR 0 6
20157: PPUSH
20158: LD_INT 1
20160: PPUSH
20161: CALL_OW 48
// end ;
20165: LD_VAR 0 7
20169: RET
// export hInvincible ; every 1 do
20170: GO 20172
20172: DISABLE
// hInvincible := [ ] ;
20173: LD_ADDR_EXP 83
20177: PUSH
20178: EMPTY
20179: ST_TO_ADDR
20180: END
// every 10 do var i ;
20181: GO 20183
20183: DISABLE
20184: LD_INT 0
20186: PPUSH
// begin enable ;
20187: ENABLE
// if not hInvincible then
20188: LD_EXP 83
20192: NOT
20193: IFFALSE 20197
// exit ;
20195: GO 20241
// for i in hInvincible do
20197: LD_ADDR_VAR 0 1
20201: PUSH
20202: LD_EXP 83
20206: PUSH
20207: FOR_IN
20208: IFFALSE 20239
// if GetLives ( i ) < 1000 then
20210: LD_VAR 0 1
20214: PPUSH
20215: CALL_OW 256
20219: PUSH
20220: LD_INT 1000
20222: LESS
20223: IFFALSE 20237
// SetLives ( i , 1000 ) ;
20225: LD_VAR 0 1
20229: PPUSH
20230: LD_INT 1000
20232: PPUSH
20233: CALL_OW 234
20237: GO 20207
20239: POP
20240: POP
// end ;
20241: PPOPN 1
20243: END
// export function hHackInvincible ; var i ; begin
20244: LD_INT 0
20246: PPUSH
20247: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
20248: LD_ADDR_VAR 0 2
20252: PUSH
20253: LD_INT 2
20255: PUSH
20256: LD_INT 21
20258: PUSH
20259: LD_INT 1
20261: PUSH
20262: EMPTY
20263: LIST
20264: LIST
20265: PUSH
20266: LD_INT 21
20268: PUSH
20269: LD_INT 2
20271: PUSH
20272: EMPTY
20273: LIST
20274: LIST
20275: PUSH
20276: EMPTY
20277: LIST
20278: LIST
20279: LIST
20280: PPUSH
20281: CALL_OW 69
20285: PUSH
20286: FOR_IN
20287: IFFALSE 20348
// if IsSelected ( i ) then
20289: LD_VAR 0 2
20293: PPUSH
20294: CALL_OW 306
20298: IFFALSE 20346
// begin if i in hInvincible then
20300: LD_VAR 0 2
20304: PUSH
20305: LD_EXP 83
20309: IN
20310: IFFALSE 20330
// hInvincible := hInvincible diff i else
20312: LD_ADDR_EXP 83
20316: PUSH
20317: LD_EXP 83
20321: PUSH
20322: LD_VAR 0 2
20326: DIFF
20327: ST_TO_ADDR
20328: GO 20346
// hInvincible := hInvincible union i ;
20330: LD_ADDR_EXP 83
20334: PUSH
20335: LD_EXP 83
20339: PUSH
20340: LD_VAR 0 2
20344: UNION
20345: ST_TO_ADDR
// end ;
20346: GO 20286
20348: POP
20349: POP
// end ;
20350: LD_VAR 0 1
20354: RET
// export function hHackInvisible ; var i , j ; begin
20355: LD_INT 0
20357: PPUSH
20358: PPUSH
20359: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20360: LD_ADDR_VAR 0 2
20364: PUSH
20365: LD_INT 21
20367: PUSH
20368: LD_INT 1
20370: PUSH
20371: EMPTY
20372: LIST
20373: LIST
20374: PPUSH
20375: CALL_OW 69
20379: PUSH
20380: FOR_IN
20381: IFFALSE 20405
// if IsSelected ( i ) then
20383: LD_VAR 0 2
20387: PPUSH
20388: CALL_OW 306
20392: IFFALSE 20403
// ComForceInvisible ( i ) ;
20394: LD_VAR 0 2
20398: PPUSH
20399: CALL_OW 496
20403: GO 20380
20405: POP
20406: POP
// end ;
20407: LD_VAR 0 1
20411: RET
// export function hHackChangeYourSide ; begin
20412: LD_INT 0
20414: PPUSH
// if your_side = 8 then
20415: LD_OWVAR 2
20419: PUSH
20420: LD_INT 8
20422: EQUAL
20423: IFFALSE 20435
// your_side := 0 else
20425: LD_ADDR_OWVAR 2
20429: PUSH
20430: LD_INT 0
20432: ST_TO_ADDR
20433: GO 20449
// your_side := your_side + 1 ;
20435: LD_ADDR_OWVAR 2
20439: PUSH
20440: LD_OWVAR 2
20444: PUSH
20445: LD_INT 1
20447: PLUS
20448: ST_TO_ADDR
// end ;
20449: LD_VAR 0 1
20453: RET
// export function hHackChangeUnitSide ; var i , j ; begin
20454: LD_INT 0
20456: PPUSH
20457: PPUSH
20458: PPUSH
// for i in all_units do
20459: LD_ADDR_VAR 0 2
20463: PUSH
20464: LD_OWVAR 3
20468: PUSH
20469: FOR_IN
20470: IFFALSE 20548
// if IsSelected ( i ) then
20472: LD_VAR 0 2
20476: PPUSH
20477: CALL_OW 306
20481: IFFALSE 20546
// begin j := GetSide ( i ) ;
20483: LD_ADDR_VAR 0 3
20487: PUSH
20488: LD_VAR 0 2
20492: PPUSH
20493: CALL_OW 255
20497: ST_TO_ADDR
// if j = 8 then
20498: LD_VAR 0 3
20502: PUSH
20503: LD_INT 8
20505: EQUAL
20506: IFFALSE 20518
// j := 0 else
20508: LD_ADDR_VAR 0 3
20512: PUSH
20513: LD_INT 0
20515: ST_TO_ADDR
20516: GO 20532
// j := j + 1 ;
20518: LD_ADDR_VAR 0 3
20522: PUSH
20523: LD_VAR 0 3
20527: PUSH
20528: LD_INT 1
20530: PLUS
20531: ST_TO_ADDR
// SetSide ( i , j ) ;
20532: LD_VAR 0 2
20536: PPUSH
20537: LD_VAR 0 3
20541: PPUSH
20542: CALL_OW 235
// end ;
20546: GO 20469
20548: POP
20549: POP
// end ;
20550: LD_VAR 0 1
20554: RET
// export function hHackFog ; begin
20555: LD_INT 0
20557: PPUSH
// FogOff ( true ) ;
20558: LD_INT 1
20560: PPUSH
20561: CALL_OW 344
// end ;
20565: LD_VAR 0 1
20569: RET
// export function hHackTeleport ( unit , x , y ) ; begin
20570: LD_INT 0
20572: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
20573: LD_VAR 0 1
20577: PPUSH
20578: LD_VAR 0 2
20582: PPUSH
20583: LD_VAR 0 3
20587: PPUSH
20588: LD_INT 1
20590: PPUSH
20591: LD_INT 1
20593: PPUSH
20594: CALL_OW 483
// CenterOnXY ( x , y ) ;
20598: LD_VAR 0 2
20602: PPUSH
20603: LD_VAR 0 3
20607: PPUSH
20608: CALL_OW 84
// end ;
20612: LD_VAR 0 4
20616: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
20617: LD_INT 0
20619: PPUSH
20620: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
20621: LD_VAR 0 1
20625: NOT
20626: IFTRUE 20645
20628: PUSH
20629: LD_VAR 0 2
20633: PPUSH
20634: LD_VAR 0 3
20638: PPUSH
20639: CALL_OW 488
20643: NOT
20644: OR
20645: IFTRUE 20680
20647: PUSH
20648: LD_VAR 0 1
20652: PPUSH
20653: CALL_OW 266
20657: PUSH
20658: LD_INT 3
20660: NONEQUAL
20661: IFFALSE 20679
20663: PUSH
20664: LD_VAR 0 1
20668: PPUSH
20669: CALL_OW 247
20673: PUSH
20674: LD_INT 1
20676: EQUAL
20677: NOT
20678: AND
20679: OR
20680: IFFALSE 20684
// exit ;
20682: GO 20966
// if GetType ( factory ) = unit_human then
20684: LD_VAR 0 1
20688: PPUSH
20689: CALL_OW 247
20693: PUSH
20694: LD_INT 1
20696: EQUAL
20697: IFFALSE 20714
// factory := IsInUnit ( factory ) ;
20699: LD_ADDR_VAR 0 1
20703: PUSH
20704: LD_VAR 0 1
20708: PPUSH
20709: CALL_OW 310
20713: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
20714: LD_VAR 0 1
20718: PPUSH
20719: CALL_OW 266
20723: PUSH
20724: LD_INT 3
20726: NONEQUAL
20727: IFFALSE 20731
// exit ;
20729: GO 20966
// for i := 1 to Count ( factoryWaypoints ) do
20731: LD_ADDR_VAR 0 5
20735: PUSH
20736: DOUBLE
20737: LD_INT 1
20739: DEC
20740: ST_TO_ADDR
20741: LD_EXP 84
20745: PPUSH
20746: CALL 30499 0 1
20750: PUSH
20751: FOR_TO
20752: IFFALSE 20914
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
20754: LD_VAR 0 2
20758: PPUSH
20759: LD_VAR 0 3
20763: PPUSH
20764: CALL_OW 428
20768: PUSH
20769: LD_EXP 84
20773: PUSH
20774: LD_VAR 0 5
20778: ARRAY
20779: PUSH
20780: LD_INT 2
20782: ARRAY
20783: EQUAL
20784: IFFALSE 20816
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
20786: LD_ADDR_EXP 84
20790: PUSH
20791: LD_EXP 84
20795: PPUSH
20796: LD_VAR 0 5
20800: PPUSH
20801: CALL_OW 3
20805: ST_TO_ADDR
// UpdateFactoryWaypoints ;
20806: CALL 20971 0 0
// exit ;
20810: POP
20811: POP
20812: GO 20966
// end else
20814: GO 20912
// if factory = factoryWaypoints [ i ] [ 2 ] then
20816: LD_VAR 0 1
20820: PUSH
20821: LD_EXP 84
20825: PUSH
20826: LD_VAR 0 5
20830: ARRAY
20831: PUSH
20832: LD_INT 2
20834: ARRAY
20835: EQUAL
20836: IFFALSE 20912
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
20838: LD_ADDR_EXP 84
20842: PUSH
20843: LD_EXP 84
20847: PPUSH
20848: LD_VAR 0 5
20852: PPUSH
20853: CALL_OW 3
20857: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
20858: LD_ADDR_EXP 84
20862: PUSH
20863: LD_EXP 84
20867: PPUSH
20868: LD_VAR 0 1
20872: PPUSH
20873: CALL_OW 255
20877: PUSH
20878: LD_VAR 0 1
20882: PUSH
20883: LD_VAR 0 2
20887: PUSH
20888: LD_VAR 0 3
20892: PUSH
20893: EMPTY
20894: LIST
20895: LIST
20896: LIST
20897: LIST
20898: PPUSH
20899: CALL 66431 0 2
20903: ST_TO_ADDR
// UpdateFactoryWaypoints ;
20904: CALL 20971 0 0
// exit ;
20908: POP
20909: POP
20910: GO 20966
// end ; end ;
20912: GO 20751
20914: POP
20915: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
20916: LD_ADDR_EXP 84
20920: PUSH
20921: LD_EXP 84
20925: PPUSH
20926: LD_VAR 0 1
20930: PPUSH
20931: CALL_OW 255
20935: PUSH
20936: LD_VAR 0 1
20940: PUSH
20941: LD_VAR 0 2
20945: PUSH
20946: LD_VAR 0 3
20950: PUSH
20951: EMPTY
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: PPUSH
20957: CALL 66431 0 2
20961: ST_TO_ADDR
// UpdateFactoryWaypoints ;
20962: CALL 20971 0 0
// end ;
20966: LD_VAR 0 4
20970: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
20971: LD_INT 0
20973: PPUSH
20974: PPUSH
20975: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
20976: LD_STRING resetFactoryWaypoint();
20978: PPUSH
20979: CALL_OW 559
// if factoryWaypoints then
20983: LD_EXP 84
20987: IFFALSE 21108
// begin list := factoryWaypoints ;
20989: LD_ADDR_VAR 0 3
20993: PUSH
20994: LD_EXP 84
20998: ST_TO_ADDR
// for i := 1 to list do
20999: LD_ADDR_VAR 0 2
21003: PUSH
21004: DOUBLE
21005: LD_INT 1
21007: DEC
21008: ST_TO_ADDR
21009: LD_VAR 0 3
21013: PUSH
21014: FOR_TO
21015: IFFALSE 21106
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
21017: LD_STRING setFactoryWaypointXY(
21019: PUSH
21020: LD_VAR 0 3
21024: PUSH
21025: LD_VAR 0 2
21029: ARRAY
21030: PUSH
21031: LD_INT 1
21033: ARRAY
21034: STR
21035: PUSH
21036: LD_STRING ,
21038: STR
21039: PUSH
21040: LD_VAR 0 3
21044: PUSH
21045: LD_VAR 0 2
21049: ARRAY
21050: PUSH
21051: LD_INT 2
21053: ARRAY
21054: STR
21055: PUSH
21056: LD_STRING ,
21058: STR
21059: PUSH
21060: LD_VAR 0 3
21064: PUSH
21065: LD_VAR 0 2
21069: ARRAY
21070: PUSH
21071: LD_INT 3
21073: ARRAY
21074: STR
21075: PUSH
21076: LD_STRING ,
21078: STR
21079: PUSH
21080: LD_VAR 0 3
21084: PUSH
21085: LD_VAR 0 2
21089: ARRAY
21090: PUSH
21091: LD_INT 4
21093: ARRAY
21094: STR
21095: PUSH
21096: LD_STRING )
21098: STR
21099: PPUSH
21100: CALL_OW 559
21104: GO 21014
21106: POP
21107: POP
// end ; end ;
21108: LD_VAR 0 1
21112: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
21113: LD_INT 0
21115: PPUSH
// if HexInfo ( x , y ) = warehouse then
21116: LD_VAR 0 2
21120: PPUSH
21121: LD_VAR 0 3
21125: PPUSH
21126: CALL_OW 428
21130: PUSH
21131: LD_VAR 0 1
21135: EQUAL
21136: IFFALSE 21163
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
21138: LD_ADDR_EXP 86
21142: PUSH
21143: LD_EXP 86
21147: PPUSH
21148: LD_VAR 0 1
21152: PPUSH
21153: LD_INT 0
21155: PPUSH
21156: CALL_OW 1
21160: ST_TO_ADDR
21161: GO 21214
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
21163: LD_ADDR_EXP 86
21167: PUSH
21168: LD_EXP 86
21172: PPUSH
21173: LD_VAR 0 1
21177: PPUSH
21178: LD_VAR 0 1
21182: PPUSH
21183: CALL_OW 255
21187: PUSH
21188: LD_VAR 0 1
21192: PUSH
21193: LD_VAR 0 2
21197: PUSH
21198: LD_VAR 0 3
21202: PUSH
21203: EMPTY
21204: LIST
21205: LIST
21206: LIST
21207: LIST
21208: PPUSH
21209: CALL_OW 1
21213: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
21214: CALL 21223 0 0
// end ;
21218: LD_VAR 0 4
21222: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
21223: LD_INT 0
21225: PPUSH
21226: PPUSH
21227: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
21228: LD_STRING resetWarehouseGatheringPoints();
21230: PPUSH
21231: CALL_OW 559
// if warehouseGatheringPoints then
21235: LD_EXP 86
21239: IFFALSE 21365
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
21241: LD_ADDR_VAR 0 3
21245: PUSH
21246: LD_EXP 86
21250: PPUSH
21251: CALL 70365 0 1
21255: ST_TO_ADDR
// for i := 1 to list do
21256: LD_ADDR_VAR 0 2
21260: PUSH
21261: DOUBLE
21262: LD_INT 1
21264: DEC
21265: ST_TO_ADDR
21266: LD_VAR 0 3
21270: PUSH
21271: FOR_TO
21272: IFFALSE 21363
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
21274: LD_STRING setWarehouseGatheringPointXY(
21276: PUSH
21277: LD_VAR 0 3
21281: PUSH
21282: LD_VAR 0 2
21286: ARRAY
21287: PUSH
21288: LD_INT 1
21290: ARRAY
21291: STR
21292: PUSH
21293: LD_STRING ,
21295: STR
21296: PUSH
21297: LD_VAR 0 3
21301: PUSH
21302: LD_VAR 0 2
21306: ARRAY
21307: PUSH
21308: LD_INT 2
21310: ARRAY
21311: STR
21312: PUSH
21313: LD_STRING ,
21315: STR
21316: PUSH
21317: LD_VAR 0 3
21321: PUSH
21322: LD_VAR 0 2
21326: ARRAY
21327: PUSH
21328: LD_INT 3
21330: ARRAY
21331: STR
21332: PUSH
21333: LD_STRING ,
21335: STR
21336: PUSH
21337: LD_VAR 0 3
21341: PUSH
21342: LD_VAR 0 2
21346: ARRAY
21347: PUSH
21348: LD_INT 4
21350: ARRAY
21351: STR
21352: PUSH
21353: LD_STRING )
21355: STR
21356: PPUSH
21357: CALL_OW 559
21361: GO 21271
21363: POP
21364: POP
// end ; end ;
21365: LD_VAR 0 1
21369: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
21370: LD_EXP 86
21374: IFFALSE 22069
21376: GO 21378
21378: DISABLE
21379: LD_INT 0
21381: PPUSH
21382: PPUSH
21383: PPUSH
21384: PPUSH
21385: PPUSH
21386: PPUSH
21387: PPUSH
21388: PPUSH
21389: PPUSH
// begin enable ;
21390: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
21391: LD_ADDR_VAR 0 3
21395: PUSH
21396: LD_EXP 86
21400: PPUSH
21401: CALL 70365 0 1
21405: ST_TO_ADDR
// if not list then
21406: LD_VAR 0 3
21410: NOT
21411: IFFALSE 21415
// exit ;
21413: GO 22069
// for i := 1 to list do
21415: LD_ADDR_VAR 0 1
21419: PUSH
21420: DOUBLE
21421: LD_INT 1
21423: DEC
21424: ST_TO_ADDR
21425: LD_VAR 0 3
21429: PUSH
21430: FOR_TO
21431: IFFALSE 22067
// begin depot := list [ i ] [ 2 ] ;
21433: LD_ADDR_VAR 0 8
21437: PUSH
21438: LD_VAR 0 3
21442: PUSH
21443: LD_VAR 0 1
21447: ARRAY
21448: PUSH
21449: LD_INT 2
21451: ARRAY
21452: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
21453: LD_ADDR_VAR 0 5
21457: PUSH
21458: LD_VAR 0 3
21462: PUSH
21463: LD_VAR 0 1
21467: ARRAY
21468: PUSH
21469: LD_INT 1
21471: ARRAY
21472: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
21473: LD_VAR 0 8
21477: PPUSH
21478: CALL_OW 301
21482: IFTRUE 21501
21484: PUSH
21485: LD_VAR 0 5
21489: PUSH
21490: LD_VAR 0 8
21494: PPUSH
21495: CALL_OW 255
21499: NONEQUAL
21500: OR
21501: IFFALSE 21530
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
21503: LD_ADDR_EXP 86
21507: PUSH
21508: LD_EXP 86
21512: PPUSH
21513: LD_VAR 0 8
21517: PPUSH
21518: LD_INT 0
21520: PPUSH
21521: CALL_OW 1
21525: ST_TO_ADDR
// exit ;
21526: POP
21527: POP
21528: GO 22069
// end ; x := list [ i ] [ 3 ] ;
21530: LD_ADDR_VAR 0 6
21534: PUSH
21535: LD_VAR 0 3
21539: PUSH
21540: LD_VAR 0 1
21544: ARRAY
21545: PUSH
21546: LD_INT 3
21548: ARRAY
21549: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
21550: LD_ADDR_VAR 0 7
21554: PUSH
21555: LD_VAR 0 3
21559: PUSH
21560: LD_VAR 0 1
21564: ARRAY
21565: PUSH
21566: LD_INT 4
21568: ARRAY
21569: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
21570: LD_ADDR_VAR 0 9
21574: PUSH
21575: LD_VAR 0 6
21579: PPUSH
21580: LD_VAR 0 7
21584: PPUSH
21585: LD_INT 16
21587: PPUSH
21588: CALL 68939 0 3
21592: ST_TO_ADDR
// if not cratesNearbyPoint then
21593: LD_VAR 0 9
21597: NOT
21598: IFFALSE 21604
// exit ;
21600: POP
21601: POP
21602: GO 22069
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
21604: LD_ADDR_VAR 0 4
21608: PUSH
21609: LD_INT 22
21611: PUSH
21612: LD_VAR 0 5
21616: PUSH
21617: EMPTY
21618: LIST
21619: LIST
21620: PUSH
21621: LD_INT 3
21623: PUSH
21624: LD_INT 60
21626: PUSH
21627: EMPTY
21628: LIST
21629: PUSH
21630: EMPTY
21631: LIST
21632: LIST
21633: PUSH
21634: LD_INT 91
21636: PUSH
21637: LD_VAR 0 8
21641: PUSH
21642: LD_INT 6
21644: PUSH
21645: EMPTY
21646: LIST
21647: LIST
21648: LIST
21649: PUSH
21650: LD_INT 2
21652: PUSH
21653: LD_INT 25
21655: PUSH
21656: LD_INT 2
21658: PUSH
21659: EMPTY
21660: LIST
21661: LIST
21662: PUSH
21663: LD_INT 25
21665: PUSH
21666: LD_INT 16
21668: PUSH
21669: EMPTY
21670: LIST
21671: LIST
21672: PUSH
21673: EMPTY
21674: LIST
21675: LIST
21676: LIST
21677: PUSH
21678: EMPTY
21679: LIST
21680: LIST
21681: LIST
21682: LIST
21683: PPUSH
21684: CALL_OW 69
21688: PUSH
21689: LD_VAR 0 8
21693: PPUSH
21694: CALL_OW 313
21698: PPUSH
21699: LD_INT 3
21701: PUSH
21702: LD_INT 60
21704: PUSH
21705: EMPTY
21706: LIST
21707: PUSH
21708: EMPTY
21709: LIST
21710: LIST
21711: PUSH
21712: LD_INT 2
21714: PUSH
21715: LD_INT 25
21717: PUSH
21718: LD_INT 2
21720: PUSH
21721: EMPTY
21722: LIST
21723: LIST
21724: PUSH
21725: LD_INT 25
21727: PUSH
21728: LD_INT 16
21730: PUSH
21731: EMPTY
21732: LIST
21733: LIST
21734: PUSH
21735: EMPTY
21736: LIST
21737: LIST
21738: LIST
21739: PUSH
21740: EMPTY
21741: LIST
21742: LIST
21743: PPUSH
21744: CALL_OW 72
21748: UNION
21749: ST_TO_ADDR
// if tmp then
21750: LD_VAR 0 4
21754: IFFALSE 21834
// begin tmp := ShrinkArray ( tmp , 3 ) ;
21756: LD_ADDR_VAR 0 4
21760: PUSH
21761: LD_VAR 0 4
21765: PPUSH
21766: LD_INT 3
21768: PPUSH
21769: CALL 66746 0 2
21773: ST_TO_ADDR
// for j in tmp do
21774: LD_ADDR_VAR 0 2
21778: PUSH
21779: LD_VAR 0 4
21783: PUSH
21784: FOR_IN
21785: IFFALSE 21828
// begin if IsInUnit ( j ) then
21787: LD_VAR 0 2
21791: PPUSH
21792: CALL_OW 310
21796: IFFALSE 21807
// ComExit ( j ) ;
21798: LD_VAR 0 2
21802: PPUSH
21803: CALL 66829 0 1
// AddComCollect ( j , x , y ) ;
21807: LD_VAR 0 2
21811: PPUSH
21812: LD_VAR 0 6
21816: PPUSH
21817: LD_VAR 0 7
21821: PPUSH
21822: CALL_OW 177
// end ;
21826: GO 21784
21828: POP
21829: POP
// exit ;
21830: POP
21831: POP
21832: GO 22069
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
21834: LD_ADDR_VAR 0 4
21838: PUSH
21839: LD_INT 22
21841: PUSH
21842: LD_VAR 0 5
21846: PUSH
21847: EMPTY
21848: LIST
21849: LIST
21850: PUSH
21851: LD_INT 91
21853: PUSH
21854: LD_VAR 0 8
21858: PUSH
21859: LD_INT 8
21861: PUSH
21862: EMPTY
21863: LIST
21864: LIST
21865: LIST
21866: PUSH
21867: LD_INT 2
21869: PUSH
21870: LD_INT 34
21872: PUSH
21873: LD_INT 12
21875: PUSH
21876: EMPTY
21877: LIST
21878: LIST
21879: PUSH
21880: LD_INT 34
21882: PUSH
21883: LD_INT 51
21885: PUSH
21886: EMPTY
21887: LIST
21888: LIST
21889: PUSH
21890: LD_INT 34
21892: PUSH
21893: LD_INT 32
21895: PUSH
21896: EMPTY
21897: LIST
21898: LIST
21899: PUSH
21900: LD_INT 34
21902: PUSH
21903: LD_INT 89
21905: PUSH
21906: EMPTY
21907: LIST
21908: LIST
21909: PUSH
21910: EMPTY
21911: LIST
21912: LIST
21913: LIST
21914: LIST
21915: LIST
21916: PUSH
21917: EMPTY
21918: LIST
21919: LIST
21920: LIST
21921: PPUSH
21922: CALL_OW 69
21926: ST_TO_ADDR
// if tmp then
21927: LD_VAR 0 4
21931: IFFALSE 22065
// begin for j in tmp do
21933: LD_ADDR_VAR 0 2
21937: PUSH
21938: LD_VAR 0 4
21942: PUSH
21943: FOR_IN
21944: IFFALSE 22063
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
21946: LD_VAR 0 2
21950: PPUSH
21951: CALL_OW 262
21955: PUSH
21956: LD_INT 3
21958: EQUAL
21959: IFTRUE 21976
21961: PUSH
21962: LD_VAR 0 2
21966: PPUSH
21967: CALL_OW 261
21971: PUSH
21972: LD_INT 20
21974: GREATER
21975: OR
21976: IFFALSE 21990
21978: PUSH
21979: LD_VAR 0 2
21983: PPUSH
21984: CALL_OW 314
21988: NOT
21989: AND
21990: IFFALSE 22020
21992: PUSH
21993: LD_VAR 0 2
21997: PPUSH
21998: CALL_OW 263
22002: PUSH
22003: LD_INT 1
22005: NONEQUAL
22006: IFTRUE 22019
22008: PUSH
22009: LD_VAR 0 2
22013: PPUSH
22014: CALL_OW 311
22018: OR
22019: AND
22020: IFFALSE 22061
// begin ComCollect ( j , x , y ) ;
22022: LD_VAR 0 2
22026: PPUSH
22027: LD_VAR 0 6
22031: PPUSH
22032: LD_VAR 0 7
22036: PPUSH
22037: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
22041: LD_VAR 0 2
22045: PPUSH
22046: LD_VAR 0 8
22050: PPUSH
22051: CALL_OW 172
// exit ;
22055: POP
22056: POP
22057: POP
22058: POP
22059: GO 22069
// end ;
22061: GO 21943
22063: POP
22064: POP
// end ; end ;
22065: GO 21430
22067: POP
22068: POP
// end ; end_of_file
22069: PPOPN 9
22071: END
// export function SOS_UnitDestroyed ( un ) ; begin
22072: LD_INT 0
22074: PPUSH
// ComRadiation ( un ) ;
22075: LD_VAR 0 1
22079: PPUSH
22080: CALL 23161 0 1
// end ;
22084: LD_VAR 0 2
22088: RET
// export function SOS_UnitKamikazed ( un ) ; begin
22089: LD_INT 0
22091: PPUSH
// ComRadiation ( un ) ;
22092: LD_VAR 0 1
22096: PPUSH
22097: CALL 23161 0 1
// end ;
22101: LD_VAR 0 2
22105: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
22106: LD_INT 0
22108: PPUSH
// end ;
22109: LD_VAR 0 4
22113: RET
// export function SOS_Command ( cmd ) ; begin
22114: LD_INT 0
22116: PPUSH
// end ;
22117: LD_VAR 0 2
22121: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
22122: LD_INT 0
22124: PPUSH
// end ;
22125: LD_VAR 0 6
22129: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
22130: LD_INT 0
22132: PPUSH
22133: PPUSH
22134: PPUSH
22135: PPUSH
// if not vehicle or not factory then
22136: LD_VAR 0 1
22140: NOT
22141: IFTRUE 22150
22143: PUSH
22144: LD_VAR 0 2
22148: NOT
22149: OR
22150: IFFALSE 22154
// exit ;
22152: GO 22736
// if not factoryWaypoints then
22154: LD_EXP 84
22158: NOT
22159: IFFALSE 22163
// exit ;
22161: GO 22736
// for i := 1 to Count ( factoryWaypoints ) do
22163: LD_ADDR_VAR 0 4
22167: PUSH
22168: DOUBLE
22169: LD_INT 1
22171: DEC
22172: ST_TO_ADDR
22173: LD_EXP 84
22177: PPUSH
22178: CALL 30499 0 1
22182: PUSH
22183: FOR_TO
22184: IFFALSE 22734
// if factoryWaypoints [ i ] [ 2 ] = factory then
22186: LD_EXP 84
22190: PUSH
22191: LD_VAR 0 4
22195: ARRAY
22196: PUSH
22197: LD_INT 2
22199: ARRAY
22200: PUSH
22201: LD_VAR 0 2
22205: EQUAL
22206: IFFALSE 22732
// begin if GetControl ( vehicle ) = control_manual then
22208: LD_VAR 0 1
22212: PPUSH
22213: CALL_OW 263
22217: PUSH
22218: LD_INT 1
22220: EQUAL
22221: IFFALSE 22585
// begin driver := IsDrivenBy ( vehicle ) ;
22223: LD_ADDR_VAR 0 5
22227: PUSH
22228: LD_VAR 0 1
22232: PPUSH
22233: CALL_OW 311
22237: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
22238: LD_VAR 0 5
22242: PUSH
22243: LD_EXP 85
22247: IN
22248: IFTRUE 22262
22250: PUSH
22251: LD_VAR 0 1
22255: PUSH
22256: LD_EXP 85
22260: IN
22261: OR
22262: IFFALSE 22268
// exit ;
22264: POP
22265: POP
22266: GO 22736
// if not HasTask ( driver ) then
22268: LD_VAR 0 5
22272: PPUSH
22273: CALL_OW 314
22277: NOT
22278: IFFALSE 22583
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
22280: LD_ADDR_EXP 85
22284: PUSH
22285: LD_EXP 85
22289: PPUSH
22290: LD_VAR 0 5
22294: PPUSH
22295: CALL 66431 0 2
22299: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
22300: LD_ADDR_EXP 85
22304: PUSH
22305: LD_EXP 85
22309: PPUSH
22310: LD_VAR 0 1
22314: PPUSH
22315: CALL 66431 0 2
22319: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
22320: LD_ADDR_VAR 0 6
22324: PUSH
22325: LD_EXP 84
22329: PUSH
22330: LD_VAR 0 4
22334: ARRAY
22335: PUSH
22336: LD_INT 3
22338: ARRAY
22339: PPUSH
22340: LD_EXP 84
22344: PUSH
22345: LD_VAR 0 4
22349: ARRAY
22350: PUSH
22351: LD_INT 4
22353: ARRAY
22354: PPUSH
22355: CALL_OW 428
22359: ST_TO_ADDR
// if hex then
22360: LD_VAR 0 6
22364: IFFALSE 22382
// ComMoveUnit ( driver , hex ) else
22366: LD_VAR 0 5
22370: PPUSH
22371: LD_VAR 0 6
22375: PPUSH
22376: CALL_OW 112
22380: GO 22466
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
22382: LD_VAR 0 1
22386: PPUSH
22387: LD_EXP 84
22391: PUSH
22392: LD_VAR 0 4
22396: ARRAY
22397: PUSH
22398: LD_INT 3
22400: ARRAY
22401: PPUSH
22402: LD_EXP 84
22406: PUSH
22407: LD_VAR 0 4
22411: ARRAY
22412: PUSH
22413: LD_INT 4
22415: ARRAY
22416: PPUSH
22417: CALL_OW 297
22421: PUSH
22422: LD_INT 0
22424: GREATER
22425: IFFALSE 22466
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
22427: LD_VAR 0 5
22431: PPUSH
22432: LD_EXP 84
22436: PUSH
22437: LD_VAR 0 4
22441: ARRAY
22442: PUSH
22443: LD_INT 3
22445: ARRAY
22446: PPUSH
22447: LD_EXP 84
22451: PUSH
22452: LD_VAR 0 4
22456: ARRAY
22457: PUSH
22458: LD_INT 4
22460: ARRAY
22461: PPUSH
22462: CALL_OW 111
// AddComExitVehicle ( driver ) ;
22466: LD_VAR 0 5
22470: PPUSH
22471: CALL_OW 181
// if Multiplayer then
22475: LD_OWVAR 4
22479: IFFALSE 22528
// begin repeat wait ( 10 ) ;
22481: LD_INT 10
22483: PPUSH
22484: CALL_OW 67
// until not IsInUnit ( driver ) ;
22488: LD_VAR 0 5
22492: PPUSH
22493: CALL_OW 310
22497: NOT
22498: IFFALSE 22481
// if not HasTask ( driver ) then
22500: LD_VAR 0 5
22504: PPUSH
22505: CALL_OW 314
22509: NOT
22510: IFFALSE 22526
// ComEnterUnit ( driver , factory ) ;
22512: LD_VAR 0 5
22516: PPUSH
22517: LD_VAR 0 2
22521: PPUSH
22522: CALL_OW 120
// end else
22526: GO 22542
// AddComEnterUnit ( driver , factory ) ;
22528: LD_VAR 0 5
22532: PPUSH
22533: LD_VAR 0 2
22537: PPUSH
22538: CALL_OW 180
// wait ( 0 0$1 ) ;
22542: LD_INT 35
22544: PPUSH
22545: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
22549: LD_ADDR_EXP 85
22553: PUSH
22554: LD_EXP 85
22558: PUSH
22559: LD_VAR 0 5
22563: DIFF
22564: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
22565: LD_ADDR_EXP 85
22569: PUSH
22570: LD_EXP 85
22574: PUSH
22575: LD_VAR 0 1
22579: DIFF
22580: ST_TO_ADDR
// break ;
22581: GO 22734
// end ; end else
22583: GO 22732
// if GetControl ( vehicle ) = control_remote then
22585: LD_VAR 0 1
22589: PPUSH
22590: CALL_OW 263
22594: PUSH
22595: LD_INT 2
22597: EQUAL
22598: IFFALSE 22684
// begin wait ( 0 0$2 ) ;
22600: LD_INT 70
22602: PPUSH
22603: CALL_OW 67
// repeat wait ( 10 ) ;
22607: LD_INT 10
22609: PPUSH
22610: CALL_OW 67
// Connect ( vehicle ) ;
22614: LD_VAR 0 1
22618: PPUSH
22619: CALL 36743 0 1
// until IsControledBy ( vehicle ) ;
22623: LD_VAR 0 1
22627: PPUSH
22628: CALL_OW 312
22632: IFFALSE 22607
// wait ( 10 ) ;
22634: LD_INT 10
22636: PPUSH
22637: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
22641: LD_VAR 0 1
22645: PPUSH
22646: LD_EXP 84
22650: PUSH
22651: LD_VAR 0 4
22655: ARRAY
22656: PUSH
22657: LD_INT 3
22659: ARRAY
22660: PPUSH
22661: LD_EXP 84
22665: PUSH
22666: LD_VAR 0 4
22670: ARRAY
22671: PUSH
22672: LD_INT 4
22674: ARRAY
22675: PPUSH
22676: CALL_OW 111
// break ;
22680: GO 22734
// end else
22682: GO 22732
// begin wait ( 0 0$3 ) ;
22684: LD_INT 105
22686: PPUSH
22687: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
22691: LD_VAR 0 1
22695: PPUSH
22696: LD_EXP 84
22700: PUSH
22701: LD_VAR 0 4
22705: ARRAY
22706: PUSH
22707: LD_INT 3
22709: ARRAY
22710: PPUSH
22711: LD_EXP 84
22715: PUSH
22716: LD_VAR 0 4
22720: ARRAY
22721: PUSH
22722: LD_INT 4
22724: ARRAY
22725: PPUSH
22726: CALL_OW 111
// break ;
22730: GO 22734
// end ; end ;
22732: GO 22183
22734: POP
22735: POP
// end ;
22736: LD_VAR 0 3
22740: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
22741: LD_INT 0
22743: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
22744: LD_VAR 0 1
22748: PUSH
22749: LD_INT 250
22751: EQUAL
22752: IFFALSE 22769
22754: PUSH
22755: LD_VAR 0 2
22759: PPUSH
22760: CALL_OW 264
22764: PUSH
22765: LD_INT 81
22767: EQUAL
22768: AND
22769: IFFALSE 22790
// MinerPlaceMine ( unit , x , y ) ;
22771: LD_VAR 0 2
22775: PPUSH
22776: LD_VAR 0 4
22780: PPUSH
22781: LD_VAR 0 5
22785: PPUSH
22786: CALL 25922 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
22790: LD_VAR 0 1
22794: PUSH
22795: LD_INT 251
22797: EQUAL
22798: IFFALSE 22815
22800: PUSH
22801: LD_VAR 0 2
22805: PPUSH
22806: CALL_OW 264
22810: PUSH
22811: LD_INT 81
22813: EQUAL
22814: AND
22815: IFFALSE 22836
// MinerDetonateMine ( unit , x , y ) ;
22817: LD_VAR 0 2
22821: PPUSH
22822: LD_VAR 0 4
22826: PPUSH
22827: LD_VAR 0 5
22831: PPUSH
22832: CALL 26201 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
22836: LD_VAR 0 1
22840: PUSH
22841: LD_INT 252
22843: EQUAL
22844: IFFALSE 22861
22846: PUSH
22847: LD_VAR 0 2
22851: PPUSH
22852: CALL_OW 264
22856: PUSH
22857: LD_INT 81
22859: EQUAL
22860: AND
22861: IFFALSE 22882
// MinerCreateMinefield ( unit , x , y ) ;
22863: LD_VAR 0 2
22867: PPUSH
22868: LD_VAR 0 4
22872: PPUSH
22873: LD_VAR 0 5
22877: PPUSH
22878: CALL 26620 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
22882: LD_VAR 0 1
22886: PUSH
22887: LD_INT 253
22889: EQUAL
22890: IFFALSE 22907
22892: PUSH
22893: LD_VAR 0 2
22897: PPUSH
22898: CALL_OW 257
22902: PUSH
22903: LD_INT 5
22905: EQUAL
22906: AND
22907: IFFALSE 22928
// ComBinocular ( unit , x , y ) ;
22909: LD_VAR 0 2
22913: PPUSH
22914: LD_VAR 0 4
22918: PPUSH
22919: LD_VAR 0 5
22923: PPUSH
22924: CALL 26995 0 3
// if selectedUnit then
22928: LD_VAR 0 3
22932: IFFALSE 22992
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
22934: LD_VAR 0 1
22938: PUSH
22939: LD_INT 254
22941: EQUAL
22942: IFFALSE 22959
22944: PUSH
22945: LD_VAR 0 2
22949: PPUSH
22950: CALL_OW 264
22954: PUSH
22955: LD_INT 99
22957: EQUAL
22958: AND
22959: IFFALSE 22976
22961: PUSH
22962: LD_VAR 0 3
22966: PPUSH
22967: CALL_OW 263
22971: PUSH
22972: LD_INT 3
22974: EQUAL
22975: AND
22976: IFFALSE 22992
// HackDestroyVehicle ( unit , selectedUnit ) ;
22978: LD_VAR 0 2
22982: PPUSH
22983: LD_VAR 0 3
22987: PPUSH
22988: CALL 25282 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
22992: LD_VAR 0 1
22996: PUSH
22997: LD_INT 255
22999: EQUAL
23000: IFFALSE 23024
23002: PUSH
23003: LD_VAR 0 2
23007: PPUSH
23008: CALL_OW 264
23012: PUSH
23013: LD_INT 14
23015: PUSH
23016: LD_INT 53
23018: PUSH
23019: EMPTY
23020: LIST
23021: LIST
23022: IN
23023: AND
23024: IFFALSE 23042
23026: PUSH
23027: LD_VAR 0 4
23031: PPUSH
23032: LD_VAR 0 5
23036: PPUSH
23037: CALL_OW 488
23041: AND
23042: IFFALSE 23066
// CutTreeXYR ( unit , x , y , 12 ) ;
23044: LD_VAR 0 2
23048: PPUSH
23049: LD_VAR 0 4
23053: PPUSH
23054: LD_VAR 0 5
23058: PPUSH
23059: LD_INT 12
23061: PPUSH
23062: CALL 23257 0 4
// if cmd = 256 then
23066: LD_VAR 0 1
23070: PUSH
23071: LD_INT 256
23073: EQUAL
23074: IFFALSE 23095
// SetFactoryWaypoint ( unit , x , y ) ;
23076: LD_VAR 0 2
23080: PPUSH
23081: LD_VAR 0 4
23085: PPUSH
23086: LD_VAR 0 5
23090: PPUSH
23091: CALL 20617 0 3
// if cmd = 257 then
23095: LD_VAR 0 1
23099: PUSH
23100: LD_INT 257
23102: EQUAL
23103: IFFALSE 23124
// SetWarehouseGatheringPoint ( unit , x , y ) ;
23105: LD_VAR 0 2
23109: PPUSH
23110: LD_VAR 0 4
23114: PPUSH
23115: LD_VAR 0 5
23119: PPUSH
23120: CALL 21113 0 3
// if cmd = 258 then
23124: LD_VAR 0 1
23128: PUSH
23129: LD_INT 258
23131: EQUAL
23132: IFFALSE 23156
// BurnTreeXYR ( unit , x , y , 8 ) ;
23134: LD_VAR 0 2
23138: PPUSH
23139: LD_VAR 0 4
23143: PPUSH
23144: LD_VAR 0 5
23148: PPUSH
23149: LD_INT 8
23151: PPUSH
23152: CALL 23657 0 4
// end ;
23156: LD_VAR 0 6
23160: RET
// export function ComRadiation ( un ) ; var eff ; begin
23161: LD_INT 0
23163: PPUSH
23164: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
23165: LD_VAR 0 1
23169: PPUSH
23170: CALL_OW 264
23174: PUSH
23175: LD_INT 91
23177: NONEQUAL
23178: IFFALSE 23182
// exit ;
23180: GO 23252
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
23182: LD_INT 68
23184: PPUSH
23185: LD_VAR 0 1
23189: PPUSH
23190: CALL_OW 255
23194: PPUSH
23195: CALL_OW 321
23199: PUSH
23200: LD_INT 2
23202: EQUAL
23203: IFFALSE 23215
// eff := 50 else
23205: LD_ADDR_VAR 0 3
23209: PUSH
23210: LD_INT 50
23212: ST_TO_ADDR
23213: GO 23223
// eff := 25 ;
23215: LD_ADDR_VAR 0 3
23219: PUSH
23220: LD_INT 25
23222: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
23223: LD_VAR 0 1
23227: PPUSH
23228: CALL_OW 250
23232: PPUSH
23233: LD_VAR 0 1
23237: PPUSH
23238: CALL_OW 251
23242: PPUSH
23243: LD_VAR 0 3
23247: PPUSH
23248: CALL_OW 495
// end ;
23252: LD_VAR 0 2
23256: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
23257: LD_INT 0
23259: PPUSH
23260: PPUSH
23261: PPUSH
23262: PPUSH
23263: PPUSH
23264: PPUSH
23265: PPUSH
23266: PPUSH
23267: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
23268: LD_VAR 0 1
23272: PPUSH
23273: CALL_OW 302
23277: NOT
23278: IFTRUE 23297
23280: PUSH
23281: LD_VAR 0 2
23285: PPUSH
23286: LD_VAR 0 3
23290: PPUSH
23291: CALL_OW 488
23295: NOT
23296: OR
23297: IFTRUE 23306
23299: PUSH
23300: LD_VAR 0 4
23304: NOT
23305: OR
23306: IFFALSE 23310
// exit ;
23308: GO 23652
// list := [ ] ;
23310: LD_ADDR_VAR 0 13
23314: PUSH
23315: EMPTY
23316: ST_TO_ADDR
// if x - r < 0 then
23317: LD_VAR 0 2
23321: PUSH
23322: LD_VAR 0 4
23326: MINUS
23327: PUSH
23328: LD_INT 0
23330: LESS
23331: IFFALSE 23343
// min_x := 0 else
23333: LD_ADDR_VAR 0 7
23337: PUSH
23338: LD_INT 0
23340: ST_TO_ADDR
23341: GO 23359
// min_x := x - r ;
23343: LD_ADDR_VAR 0 7
23347: PUSH
23348: LD_VAR 0 2
23352: PUSH
23353: LD_VAR 0 4
23357: MINUS
23358: ST_TO_ADDR
// if y - r < 0 then
23359: LD_VAR 0 3
23363: PUSH
23364: LD_VAR 0 4
23368: MINUS
23369: PUSH
23370: LD_INT 0
23372: LESS
23373: IFFALSE 23385
// min_y := 0 else
23375: LD_ADDR_VAR 0 8
23379: PUSH
23380: LD_INT 0
23382: ST_TO_ADDR
23383: GO 23401
// min_y := y - r ;
23385: LD_ADDR_VAR 0 8
23389: PUSH
23390: LD_VAR 0 3
23394: PUSH
23395: LD_VAR 0 4
23399: MINUS
23400: ST_TO_ADDR
// max_x := x + r ;
23401: LD_ADDR_VAR 0 9
23405: PUSH
23406: LD_VAR 0 2
23410: PUSH
23411: LD_VAR 0 4
23415: PLUS
23416: ST_TO_ADDR
// max_y := y + r ;
23417: LD_ADDR_VAR 0 10
23421: PUSH
23422: LD_VAR 0 3
23426: PUSH
23427: LD_VAR 0 4
23431: PLUS
23432: ST_TO_ADDR
// for _x = min_x to max_x do
23433: LD_ADDR_VAR 0 11
23437: PUSH
23438: DOUBLE
23439: LD_VAR 0 7
23443: DEC
23444: ST_TO_ADDR
23445: LD_VAR 0 9
23449: PUSH
23450: FOR_TO
23451: IFFALSE 23570
// for _y = min_y to max_y do
23453: LD_ADDR_VAR 0 12
23457: PUSH
23458: DOUBLE
23459: LD_VAR 0 8
23463: DEC
23464: ST_TO_ADDR
23465: LD_VAR 0 10
23469: PUSH
23470: FOR_TO
23471: IFFALSE 23566
// begin if not ValidHex ( _x , _y ) then
23473: LD_VAR 0 11
23477: PPUSH
23478: LD_VAR 0 12
23482: PPUSH
23483: CALL_OW 488
23487: NOT
23488: IFFALSE 23492
// continue ;
23490: GO 23470
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
23492: LD_VAR 0 11
23496: PPUSH
23497: LD_VAR 0 12
23501: PPUSH
23502: CALL_OW 351
23506: IFFALSE 23524
23508: PUSH
23509: LD_VAR 0 11
23513: PPUSH
23514: LD_VAR 0 12
23518: PPUSH
23519: CALL_OW 554
23523: AND
23524: IFFALSE 23564
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23526: LD_ADDR_VAR 0 13
23530: PUSH
23531: LD_VAR 0 13
23535: PPUSH
23536: LD_VAR 0 13
23540: PUSH
23541: LD_INT 1
23543: PLUS
23544: PPUSH
23545: LD_VAR 0 11
23549: PUSH
23550: LD_VAR 0 12
23554: PUSH
23555: EMPTY
23556: LIST
23557: LIST
23558: PPUSH
23559: CALL_OW 2
23563: ST_TO_ADDR
// end ;
23564: GO 23470
23566: POP
23567: POP
23568: GO 23450
23570: POP
23571: POP
// if not list then
23572: LD_VAR 0 13
23576: NOT
23577: IFFALSE 23581
// exit ;
23579: GO 23652
// for i in list do
23581: LD_ADDR_VAR 0 6
23585: PUSH
23586: LD_VAR 0 13
23590: PUSH
23591: FOR_IN
23592: IFFALSE 23650
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
23594: LD_VAR 0 1
23598: PPUSH
23599: LD_STRING M
23601: PUSH
23602: LD_VAR 0 6
23606: PUSH
23607: LD_INT 1
23609: ARRAY
23610: PUSH
23611: LD_VAR 0 6
23615: PUSH
23616: LD_INT 2
23618: ARRAY
23619: PUSH
23620: LD_INT 0
23622: PUSH
23623: LD_INT 0
23625: PUSH
23626: LD_INT 0
23628: PUSH
23629: LD_INT 0
23631: PUSH
23632: EMPTY
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: PUSH
23641: EMPTY
23642: LIST
23643: PPUSH
23644: CALL_OW 447
23648: GO 23591
23650: POP
23651: POP
// end ;
23652: LD_VAR 0 5
23656: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
23657: LD_INT 0
23659: PPUSH
23660: PPUSH
23661: PPUSH
23662: PPUSH
23663: PPUSH
23664: PPUSH
23665: PPUSH
23666: PPUSH
23667: PPUSH
23668: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
23669: LD_VAR 0 1
23673: PPUSH
23674: CALL_OW 302
23678: NOT
23679: IFTRUE 23698
23681: PUSH
23682: LD_VAR 0 2
23686: PPUSH
23687: LD_VAR 0 3
23691: PPUSH
23692: CALL_OW 488
23696: NOT
23697: OR
23698: IFTRUE 23707
23700: PUSH
23701: LD_VAR 0 4
23705: NOT
23706: OR
23707: IFFALSE 23711
// exit ;
23709: GO 24228
// list := [ ] ;
23711: LD_ADDR_VAR 0 13
23715: PUSH
23716: EMPTY
23717: ST_TO_ADDR
// if x - r < 0 then
23718: LD_VAR 0 2
23722: PUSH
23723: LD_VAR 0 4
23727: MINUS
23728: PUSH
23729: LD_INT 0
23731: LESS
23732: IFFALSE 23744
// min_x := 0 else
23734: LD_ADDR_VAR 0 7
23738: PUSH
23739: LD_INT 0
23741: ST_TO_ADDR
23742: GO 23760
// min_x := x - r ;
23744: LD_ADDR_VAR 0 7
23748: PUSH
23749: LD_VAR 0 2
23753: PUSH
23754: LD_VAR 0 4
23758: MINUS
23759: ST_TO_ADDR
// if y - r < 0 then
23760: LD_VAR 0 3
23764: PUSH
23765: LD_VAR 0 4
23769: MINUS
23770: PUSH
23771: LD_INT 0
23773: LESS
23774: IFFALSE 23786
// min_y := 0 else
23776: LD_ADDR_VAR 0 8
23780: PUSH
23781: LD_INT 0
23783: ST_TO_ADDR
23784: GO 23802
// min_y := y - r ;
23786: LD_ADDR_VAR 0 8
23790: PUSH
23791: LD_VAR 0 3
23795: PUSH
23796: LD_VAR 0 4
23800: MINUS
23801: ST_TO_ADDR
// max_x := x + r ;
23802: LD_ADDR_VAR 0 9
23806: PUSH
23807: LD_VAR 0 2
23811: PUSH
23812: LD_VAR 0 4
23816: PLUS
23817: ST_TO_ADDR
// max_y := y + r ;
23818: LD_ADDR_VAR 0 10
23822: PUSH
23823: LD_VAR 0 3
23827: PUSH
23828: LD_VAR 0 4
23832: PLUS
23833: ST_TO_ADDR
// for _x = min_x to max_x do
23834: LD_ADDR_VAR 0 11
23838: PUSH
23839: DOUBLE
23840: LD_VAR 0 7
23844: DEC
23845: ST_TO_ADDR
23846: LD_VAR 0 9
23850: PUSH
23851: FOR_TO
23852: IFFALSE 23971
// for _y = min_y to max_y do
23854: LD_ADDR_VAR 0 12
23858: PUSH
23859: DOUBLE
23860: LD_VAR 0 8
23864: DEC
23865: ST_TO_ADDR
23866: LD_VAR 0 10
23870: PUSH
23871: FOR_TO
23872: IFFALSE 23967
// begin if not ValidHex ( _x , _y ) then
23874: LD_VAR 0 11
23878: PPUSH
23879: LD_VAR 0 12
23883: PPUSH
23884: CALL_OW 488
23888: NOT
23889: IFFALSE 23893
// continue ;
23891: GO 23871
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
23893: LD_VAR 0 11
23897: PPUSH
23898: LD_VAR 0 12
23902: PPUSH
23903: CALL_OW 351
23907: IFFALSE 23925
23909: PUSH
23910: LD_VAR 0 11
23914: PPUSH
23915: LD_VAR 0 12
23919: PPUSH
23920: CALL_OW 554
23924: AND
23925: IFFALSE 23965
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23927: LD_ADDR_VAR 0 13
23931: PUSH
23932: LD_VAR 0 13
23936: PPUSH
23937: LD_VAR 0 13
23941: PUSH
23942: LD_INT 1
23944: PLUS
23945: PPUSH
23946: LD_VAR 0 11
23950: PUSH
23951: LD_VAR 0 12
23955: PUSH
23956: EMPTY
23957: LIST
23958: LIST
23959: PPUSH
23960: CALL_OW 2
23964: ST_TO_ADDR
// end ;
23965: GO 23871
23967: POP
23968: POP
23969: GO 23851
23971: POP
23972: POP
// if not list then
23973: LD_VAR 0 13
23977: NOT
23978: IFFALSE 23982
// exit ;
23980: GO 24228
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
23982: LD_ADDR_VAR 0 13
23986: PUSH
23987: LD_VAR 0 1
23991: PPUSH
23992: LD_VAR 0 13
23996: PPUSH
23997: LD_INT 1
23999: PPUSH
24000: LD_INT 1
24002: PPUSH
24003: CALL 33871 0 4
24007: ST_TO_ADDR
// ComStop ( flame ) ;
24008: LD_VAR 0 1
24012: PPUSH
24013: CALL_OW 141
// for i in list do
24017: LD_ADDR_VAR 0 6
24021: PUSH
24022: LD_VAR 0 13
24026: PUSH
24027: FOR_IN
24028: IFFALSE 24059
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
24030: LD_VAR 0 1
24034: PPUSH
24035: LD_VAR 0 6
24039: PUSH
24040: LD_INT 1
24042: ARRAY
24043: PPUSH
24044: LD_VAR 0 6
24048: PUSH
24049: LD_INT 2
24051: ARRAY
24052: PPUSH
24053: CALL_OW 176
24057: GO 24027
24059: POP
24060: POP
// repeat wait ( 0 0$1 ) ;
24061: LD_INT 35
24063: PPUSH
24064: CALL_OW 67
// task := GetTaskList ( flame ) ;
24068: LD_ADDR_VAR 0 14
24072: PUSH
24073: LD_VAR 0 1
24077: PPUSH
24078: CALL_OW 437
24082: ST_TO_ADDR
// if not task then
24083: LD_VAR 0 14
24087: NOT
24088: IFFALSE 24092
// exit ;
24090: GO 24228
// if task [ 1 ] [ 1 ] <> | then
24092: LD_VAR 0 14
24096: PUSH
24097: LD_INT 1
24099: ARRAY
24100: PUSH
24101: LD_INT 1
24103: ARRAY
24104: PUSH
24105: LD_STRING |
24107: NONEQUAL
24108: IFFALSE 24112
// exit ;
24110: GO 24228
// _x := task [ 1 ] [ 2 ] ;
24112: LD_ADDR_VAR 0 11
24116: PUSH
24117: LD_VAR 0 14
24121: PUSH
24122: LD_INT 1
24124: ARRAY
24125: PUSH
24126: LD_INT 2
24128: ARRAY
24129: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
24130: LD_ADDR_VAR 0 12
24134: PUSH
24135: LD_VAR 0 14
24139: PUSH
24140: LD_INT 1
24142: ARRAY
24143: PUSH
24144: LD_INT 3
24146: ARRAY
24147: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
24148: LD_VAR 0 11
24152: PPUSH
24153: LD_VAR 0 12
24157: PPUSH
24158: CALL_OW 351
24162: NOT
24163: IFTRUE 24182
24165: PUSH
24166: LD_VAR 0 11
24170: PPUSH
24171: LD_VAR 0 12
24175: PPUSH
24176: CALL_OW 554
24180: NOT
24181: OR
24182: IFFALSE 24216
// begin task := Delete ( task , 1 ) ;
24184: LD_ADDR_VAR 0 14
24188: PUSH
24189: LD_VAR 0 14
24193: PPUSH
24194: LD_INT 1
24196: PPUSH
24197: CALL_OW 3
24201: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
24202: LD_VAR 0 1
24206: PPUSH
24207: LD_VAR 0 14
24211: PPUSH
24212: CALL_OW 446
// end ; until not HasTask ( flame ) ;
24216: LD_VAR 0 1
24220: PPUSH
24221: CALL_OW 314
24225: NOT
24226: IFFALSE 24061
// end ;
24228: LD_VAR 0 5
24232: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
24233: LD_EXP 88
24237: NOT
24238: IFFALSE 24288
24240: GO 24242
24242: DISABLE
// begin initHack := true ;
24243: LD_ADDR_EXP 88
24247: PUSH
24248: LD_INT 1
24250: ST_TO_ADDR
// hackTanks := [ ] ;
24251: LD_ADDR_EXP 89
24255: PUSH
24256: EMPTY
24257: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
24258: LD_ADDR_EXP 90
24262: PUSH
24263: EMPTY
24264: ST_TO_ADDR
// hackLimit := 3 ;
24265: LD_ADDR_EXP 91
24269: PUSH
24270: LD_INT 3
24272: ST_TO_ADDR
// hackDist := 12 ;
24273: LD_ADDR_EXP 92
24277: PUSH
24278: LD_INT 12
24280: ST_TO_ADDR
// hackCounter := [ ] ;
24281: LD_ADDR_EXP 93
24285: PUSH
24286: EMPTY
24287: ST_TO_ADDR
// end ;
24288: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
24289: LD_EXP 88
24293: IFFALSE 24311
24295: PUSH
24296: LD_INT 34
24298: PUSH
24299: LD_INT 99
24301: PUSH
24302: EMPTY
24303: LIST
24304: LIST
24305: PPUSH
24306: CALL_OW 69
24310: AND
24311: IFFALSE 24564
24313: GO 24315
24315: DISABLE
24316: LD_INT 0
24318: PPUSH
24319: PPUSH
// begin enable ;
24320: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
24321: LD_ADDR_VAR 0 1
24325: PUSH
24326: LD_INT 34
24328: PUSH
24329: LD_INT 99
24331: PUSH
24332: EMPTY
24333: LIST
24334: LIST
24335: PPUSH
24336: CALL_OW 69
24340: PUSH
24341: FOR_IN
24342: IFFALSE 24562
// begin if not i in hackTanks then
24344: LD_VAR 0 1
24348: PUSH
24349: LD_EXP 89
24353: IN
24354: NOT
24355: IFFALSE 24438
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
24357: LD_ADDR_EXP 89
24361: PUSH
24362: LD_EXP 89
24366: PPUSH
24367: LD_EXP 89
24371: PUSH
24372: LD_INT 1
24374: PLUS
24375: PPUSH
24376: LD_VAR 0 1
24380: PPUSH
24381: CALL_OW 1
24385: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
24386: LD_ADDR_EXP 90
24390: PUSH
24391: LD_EXP 90
24395: PPUSH
24396: LD_EXP 90
24400: PUSH
24401: LD_INT 1
24403: PLUS
24404: PPUSH
24405: EMPTY
24406: PPUSH
24407: CALL_OW 1
24411: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
24412: LD_ADDR_EXP 93
24416: PUSH
24417: LD_EXP 93
24421: PPUSH
24422: LD_EXP 93
24426: PUSH
24427: LD_INT 1
24429: PLUS
24430: PPUSH
24431: EMPTY
24432: PPUSH
24433: CALL_OW 1
24437: ST_TO_ADDR
// end ; if not IsOk ( i ) then
24438: LD_VAR 0 1
24442: PPUSH
24443: CALL_OW 302
24447: NOT
24448: IFFALSE 24461
// begin HackUnlinkAll ( i ) ;
24450: LD_VAR 0 1
24454: PPUSH
24455: CALL 24567 0 1
// continue ;
24459: GO 24341
// end ; HackCheckCapturedStatus ( i ) ;
24461: LD_VAR 0 1
24465: PPUSH
24466: CALL 25012 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
24470: LD_ADDR_VAR 0 2
24474: PUSH
24475: LD_INT 81
24477: PUSH
24478: LD_VAR 0 1
24482: PPUSH
24483: CALL_OW 255
24487: PUSH
24488: EMPTY
24489: LIST
24490: LIST
24491: PUSH
24492: LD_INT 33
24494: PUSH
24495: LD_INT 3
24497: PUSH
24498: EMPTY
24499: LIST
24500: LIST
24501: PUSH
24502: LD_INT 91
24504: PUSH
24505: LD_VAR 0 1
24509: PUSH
24510: LD_EXP 92
24514: PUSH
24515: EMPTY
24516: LIST
24517: LIST
24518: LIST
24519: PUSH
24520: LD_INT 50
24522: PUSH
24523: EMPTY
24524: LIST
24525: PUSH
24526: EMPTY
24527: LIST
24528: LIST
24529: LIST
24530: LIST
24531: PPUSH
24532: CALL_OW 69
24536: ST_TO_ADDR
// if not tmp then
24537: LD_VAR 0 2
24541: NOT
24542: IFFALSE 24546
// continue ;
24544: GO 24341
// HackLink ( i , tmp ) ;
24546: LD_VAR 0 1
24550: PPUSH
24551: LD_VAR 0 2
24555: PPUSH
24556: CALL 24703 0 2
// end ;
24560: GO 24341
24562: POP
24563: POP
// end ;
24564: PPOPN 2
24566: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
24567: LD_INT 0
24569: PPUSH
24570: PPUSH
24571: PPUSH
// if not hack in hackTanks then
24572: LD_VAR 0 1
24576: PUSH
24577: LD_EXP 89
24581: IN
24582: NOT
24583: IFFALSE 24587
// exit ;
24585: GO 24698
// index := GetElementIndex ( hackTanks , hack ) ;
24587: LD_ADDR_VAR 0 4
24591: PUSH
24592: LD_EXP 89
24596: PPUSH
24597: LD_VAR 0 1
24601: PPUSH
24602: CALL 33166 0 2
24606: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
24607: LD_EXP 90
24611: PUSH
24612: LD_VAR 0 4
24616: ARRAY
24617: IFFALSE 24698
// begin for i in hackTanksCaptured [ index ] do
24619: LD_ADDR_VAR 0 3
24623: PUSH
24624: LD_EXP 90
24628: PUSH
24629: LD_VAR 0 4
24633: ARRAY
24634: PUSH
24635: FOR_IN
24636: IFFALSE 24662
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
24638: LD_VAR 0 3
24642: PUSH
24643: LD_INT 1
24645: ARRAY
24646: PPUSH
24647: LD_VAR 0 3
24651: PUSH
24652: LD_INT 2
24654: ARRAY
24655: PPUSH
24656: CALL_OW 235
24660: GO 24635
24662: POP
24663: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
24664: LD_ADDR_EXP 90
24668: PUSH
24669: LD_EXP 90
24673: PPUSH
24674: LD_VAR 0 4
24678: PPUSH
24679: EMPTY
24680: PPUSH
24681: CALL_OW 1
24685: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
24686: LD_VAR 0 1
24690: PPUSH
24691: LD_INT 0
24693: PPUSH
24694: CALL_OW 505
// end ; end ;
24698: LD_VAR 0 2
24702: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
24703: LD_INT 0
24705: PPUSH
24706: PPUSH
24707: PPUSH
// if not hack in hackTanks or not vehicles then
24708: LD_VAR 0 1
24712: PUSH
24713: LD_EXP 89
24717: IN
24718: NOT
24719: IFTRUE 24728
24721: PUSH
24722: LD_VAR 0 2
24726: NOT
24727: OR
24728: IFFALSE 24732
// exit ;
24730: GO 25007
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
24732: LD_ADDR_VAR 0 2
24736: PUSH
24737: LD_VAR 0 1
24741: PPUSH
24742: LD_VAR 0 2
24746: PPUSH
24747: LD_INT 1
24749: PPUSH
24750: LD_INT 1
24752: PPUSH
24753: CALL 33818 0 4
24757: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
24758: LD_ADDR_VAR 0 5
24762: PUSH
24763: LD_EXP 89
24767: PPUSH
24768: LD_VAR 0 1
24772: PPUSH
24773: CALL 33166 0 2
24777: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
24778: LD_EXP 90
24782: PUSH
24783: LD_VAR 0 5
24787: ARRAY
24788: PUSH
24789: LD_EXP 91
24793: LESS
24794: IFFALSE 24983
// begin for i := 1 to vehicles do
24796: LD_ADDR_VAR 0 4
24800: PUSH
24801: DOUBLE
24802: LD_INT 1
24804: DEC
24805: ST_TO_ADDR
24806: LD_VAR 0 2
24810: PUSH
24811: FOR_TO
24812: IFFALSE 24981
// begin if hackTanksCaptured [ index ] = hackLimit then
24814: LD_EXP 90
24818: PUSH
24819: LD_VAR 0 5
24823: ARRAY
24824: PUSH
24825: LD_EXP 91
24829: EQUAL
24830: IFFALSE 24834
// break ;
24832: GO 24981
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
24834: LD_ADDR_EXP 93
24838: PUSH
24839: LD_EXP 93
24843: PPUSH
24844: LD_VAR 0 5
24848: PPUSH
24849: LD_EXP 93
24853: PUSH
24854: LD_VAR 0 5
24858: ARRAY
24859: PUSH
24860: LD_INT 1
24862: PLUS
24863: PPUSH
24864: CALL_OW 1
24868: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
24869: LD_ADDR_EXP 90
24873: PUSH
24874: LD_EXP 90
24878: PPUSH
24879: LD_VAR 0 5
24883: PUSH
24884: LD_EXP 90
24888: PUSH
24889: LD_VAR 0 5
24893: ARRAY
24894: PUSH
24895: LD_INT 1
24897: PLUS
24898: PUSH
24899: EMPTY
24900: LIST
24901: LIST
24902: PPUSH
24903: LD_VAR 0 2
24907: PUSH
24908: LD_VAR 0 4
24912: ARRAY
24913: PUSH
24914: LD_VAR 0 2
24918: PUSH
24919: LD_VAR 0 4
24923: ARRAY
24924: PPUSH
24925: CALL_OW 255
24929: PUSH
24930: EMPTY
24931: LIST
24932: LIST
24933: PPUSH
24934: CALL 33383 0 3
24938: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
24939: LD_VAR 0 2
24943: PUSH
24944: LD_VAR 0 4
24948: ARRAY
24949: PPUSH
24950: LD_VAR 0 1
24954: PPUSH
24955: CALL_OW 255
24959: PPUSH
24960: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
24964: LD_VAR 0 2
24968: PUSH
24969: LD_VAR 0 4
24973: ARRAY
24974: PPUSH
24975: CALL_OW 141
// end ;
24979: GO 24811
24981: POP
24982: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24983: LD_VAR 0 1
24987: PPUSH
24988: LD_EXP 90
24992: PUSH
24993: LD_VAR 0 5
24997: ARRAY
24998: PUSH
24999: LD_INT 0
25001: PLUS
25002: PPUSH
25003: CALL_OW 505
// end ;
25007: LD_VAR 0 3
25011: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
25012: LD_INT 0
25014: PPUSH
25015: PPUSH
25016: PPUSH
25017: PPUSH
// if not hack in hackTanks then
25018: LD_VAR 0 1
25022: PUSH
25023: LD_EXP 89
25027: IN
25028: NOT
25029: IFFALSE 25033
// exit ;
25031: GO 25277
// index := GetElementIndex ( hackTanks , hack ) ;
25033: LD_ADDR_VAR 0 4
25037: PUSH
25038: LD_EXP 89
25042: PPUSH
25043: LD_VAR 0 1
25047: PPUSH
25048: CALL 33166 0 2
25052: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
25053: LD_ADDR_VAR 0 3
25057: PUSH
25058: DOUBLE
25059: LD_EXP 90
25063: PUSH
25064: LD_VAR 0 4
25068: ARRAY
25069: INC
25070: ST_TO_ADDR
25071: LD_INT 1
25073: PUSH
25074: FOR_DOWNTO
25075: IFFALSE 25251
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
25077: LD_ADDR_VAR 0 5
25081: PUSH
25082: LD_EXP 90
25086: PUSH
25087: LD_VAR 0 4
25091: ARRAY
25092: PUSH
25093: LD_VAR 0 3
25097: ARRAY
25098: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
25099: LD_VAR 0 5
25103: PUSH
25104: LD_INT 1
25106: ARRAY
25107: PPUSH
25108: CALL_OW 302
25112: NOT
25113: IFTRUE 25141
25115: PUSH
25116: LD_VAR 0 5
25120: PUSH
25121: LD_INT 1
25123: ARRAY
25124: PPUSH
25125: CALL_OW 255
25129: PUSH
25130: LD_VAR 0 1
25134: PPUSH
25135: CALL_OW 255
25139: NONEQUAL
25140: OR
25141: IFFALSE 25249
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
25143: LD_VAR 0 5
25147: PUSH
25148: LD_INT 1
25150: ARRAY
25151: PPUSH
25152: CALL_OW 305
25156: IFFALSE 25184
25158: PUSH
25159: LD_VAR 0 5
25163: PUSH
25164: LD_INT 1
25166: ARRAY
25167: PPUSH
25168: CALL_OW 255
25172: PUSH
25173: LD_VAR 0 1
25177: PPUSH
25178: CALL_OW 255
25182: EQUAL
25183: AND
25184: IFFALSE 25208
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
25186: LD_VAR 0 5
25190: PUSH
25191: LD_INT 1
25193: ARRAY
25194: PPUSH
25195: LD_VAR 0 5
25199: PUSH
25200: LD_INT 2
25202: ARRAY
25203: PPUSH
25204: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
25208: LD_ADDR_EXP 90
25212: PUSH
25213: LD_EXP 90
25217: PPUSH
25218: LD_VAR 0 4
25222: PPUSH
25223: LD_EXP 90
25227: PUSH
25228: LD_VAR 0 4
25232: ARRAY
25233: PPUSH
25234: LD_VAR 0 3
25238: PPUSH
25239: CALL_OW 3
25243: PPUSH
25244: CALL_OW 1
25248: ST_TO_ADDR
// end ; end ;
25249: GO 25074
25251: POP
25252: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
25253: LD_VAR 0 1
25257: PPUSH
25258: LD_EXP 90
25262: PUSH
25263: LD_VAR 0 4
25267: ARRAY
25268: PUSH
25269: LD_INT 0
25271: PLUS
25272: PPUSH
25273: CALL_OW 505
// end ;
25277: LD_VAR 0 2
25281: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
25282: LD_INT 0
25284: PPUSH
25285: PPUSH
25286: PPUSH
25287: PPUSH
// if not hack in hackTanks then
25288: LD_VAR 0 1
25292: PUSH
25293: LD_EXP 89
25297: IN
25298: NOT
25299: IFFALSE 25303
// exit ;
25301: GO 25388
// index := GetElementIndex ( hackTanks , hack ) ;
25303: LD_ADDR_VAR 0 5
25307: PUSH
25308: LD_EXP 89
25312: PPUSH
25313: LD_VAR 0 1
25317: PPUSH
25318: CALL 33166 0 2
25322: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
25323: LD_ADDR_VAR 0 4
25327: PUSH
25328: DOUBLE
25329: LD_INT 1
25331: DEC
25332: ST_TO_ADDR
25333: LD_EXP 90
25337: PUSH
25338: LD_VAR 0 5
25342: ARRAY
25343: PUSH
25344: FOR_TO
25345: IFFALSE 25386
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
25347: LD_EXP 90
25351: PUSH
25352: LD_VAR 0 5
25356: ARRAY
25357: PUSH
25358: LD_VAR 0 4
25362: ARRAY
25363: PUSH
25364: LD_INT 1
25366: ARRAY
25367: PUSH
25368: LD_VAR 0 2
25372: EQUAL
25373: IFFALSE 25384
// KillUnit ( vehicle ) ;
25375: LD_VAR 0 2
25379: PPUSH
25380: CALL_OW 66
25384: GO 25344
25386: POP
25387: POP
// end ;
25388: LD_VAR 0 3
25392: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
25393: LD_EXP 94
25397: NOT
25398: IFFALSE 25433
25400: GO 25402
25402: DISABLE
// begin initMiner := true ;
25403: LD_ADDR_EXP 94
25407: PUSH
25408: LD_INT 1
25410: ST_TO_ADDR
// minersList := [ ] ;
25411: LD_ADDR_EXP 95
25415: PUSH
25416: EMPTY
25417: ST_TO_ADDR
// minerMinesList := [ ] ;
25418: LD_ADDR_EXP 96
25422: PUSH
25423: EMPTY
25424: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
25425: LD_ADDR_EXP 97
25429: PUSH
25430: LD_INT 5
25432: ST_TO_ADDR
// end ;
25433: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
25434: LD_EXP 94
25438: IFFALSE 25456
25440: PUSH
25441: LD_INT 34
25443: PUSH
25444: LD_INT 81
25446: PUSH
25447: EMPTY
25448: LIST
25449: LIST
25450: PPUSH
25451: CALL_OW 69
25455: AND
25456: IFFALSE 25919
25458: GO 25460
25460: DISABLE
25461: LD_INT 0
25463: PPUSH
25464: PPUSH
25465: PPUSH
25466: PPUSH
// begin enable ;
25467: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
25468: LD_ADDR_VAR 0 1
25472: PUSH
25473: LD_INT 34
25475: PUSH
25476: LD_INT 81
25478: PUSH
25479: EMPTY
25480: LIST
25481: LIST
25482: PPUSH
25483: CALL_OW 69
25487: PUSH
25488: FOR_IN
25489: IFFALSE 25561
// begin if not i in minersList then
25491: LD_VAR 0 1
25495: PUSH
25496: LD_EXP 95
25500: IN
25501: NOT
25502: IFFALSE 25559
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
25504: LD_ADDR_EXP 95
25508: PUSH
25509: LD_EXP 95
25513: PPUSH
25514: LD_EXP 95
25518: PUSH
25519: LD_INT 1
25521: PLUS
25522: PPUSH
25523: LD_VAR 0 1
25527: PPUSH
25528: CALL_OW 1
25532: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
25533: LD_ADDR_EXP 96
25537: PUSH
25538: LD_EXP 96
25542: PPUSH
25543: LD_EXP 96
25547: PUSH
25548: LD_INT 1
25550: PLUS
25551: PPUSH
25552: EMPTY
25553: PPUSH
25554: CALL_OW 1
25558: ST_TO_ADDR
// end end ;
25559: GO 25488
25561: POP
25562: POP
// for i := minerMinesList downto 1 do
25563: LD_ADDR_VAR 0 1
25567: PUSH
25568: DOUBLE
25569: LD_EXP 96
25573: INC
25574: ST_TO_ADDR
25575: LD_INT 1
25577: PUSH
25578: FOR_DOWNTO
25579: IFFALSE 25917
// begin if IsLive ( minersList [ i ] ) then
25581: LD_EXP 95
25585: PUSH
25586: LD_VAR 0 1
25590: ARRAY
25591: PPUSH
25592: CALL_OW 300
25596: IFFALSE 25624
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
25598: LD_EXP 95
25602: PUSH
25603: LD_VAR 0 1
25607: ARRAY
25608: PPUSH
25609: LD_EXP 96
25613: PUSH
25614: LD_VAR 0 1
25618: ARRAY
25619: PPUSH
25620: CALL_OW 505
// if not minerMinesList [ i ] then
25624: LD_EXP 96
25628: PUSH
25629: LD_VAR 0 1
25633: ARRAY
25634: NOT
25635: IFFALSE 25639
// continue ;
25637: GO 25578
// for j := minerMinesList [ i ] downto 1 do
25639: LD_ADDR_VAR 0 2
25643: PUSH
25644: DOUBLE
25645: LD_EXP 96
25649: PUSH
25650: LD_VAR 0 1
25654: ARRAY
25655: INC
25656: ST_TO_ADDR
25657: LD_INT 1
25659: PUSH
25660: FOR_DOWNTO
25661: IFFALSE 25913
// begin side := GetSide ( minersList [ i ] ) ;
25663: LD_ADDR_VAR 0 3
25667: PUSH
25668: LD_EXP 95
25672: PUSH
25673: LD_VAR 0 1
25677: ARRAY
25678: PPUSH
25679: CALL_OW 255
25683: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
25684: LD_ADDR_VAR 0 4
25688: PUSH
25689: LD_EXP 96
25693: PUSH
25694: LD_VAR 0 1
25698: ARRAY
25699: PUSH
25700: LD_VAR 0 2
25704: ARRAY
25705: PUSH
25706: LD_INT 1
25708: ARRAY
25709: PPUSH
25710: LD_EXP 96
25714: PUSH
25715: LD_VAR 0 1
25719: ARRAY
25720: PUSH
25721: LD_VAR 0 2
25725: ARRAY
25726: PUSH
25727: LD_INT 2
25729: ARRAY
25730: PPUSH
25731: CALL_OW 428
25735: ST_TO_ADDR
// if not tmp then
25736: LD_VAR 0 4
25740: NOT
25741: IFFALSE 25745
// continue ;
25743: GO 25660
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
25745: LD_VAR 0 4
25749: PUSH
25750: LD_INT 81
25752: PUSH
25753: LD_VAR 0 3
25757: PUSH
25758: EMPTY
25759: LIST
25760: LIST
25761: PPUSH
25762: CALL_OW 69
25766: IN
25767: IFFALSE 25817
25769: PUSH
25770: LD_EXP 96
25774: PUSH
25775: LD_VAR 0 1
25779: ARRAY
25780: PUSH
25781: LD_VAR 0 2
25785: ARRAY
25786: PUSH
25787: LD_INT 1
25789: ARRAY
25790: PPUSH
25791: LD_EXP 96
25795: PUSH
25796: LD_VAR 0 1
25800: ARRAY
25801: PUSH
25802: LD_VAR 0 2
25806: ARRAY
25807: PUSH
25808: LD_INT 2
25810: ARRAY
25811: PPUSH
25812: CALL_OW 458
25816: AND
25817: IFFALSE 25911
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
25819: LD_EXP 96
25823: PUSH
25824: LD_VAR 0 1
25828: ARRAY
25829: PUSH
25830: LD_VAR 0 2
25834: ARRAY
25835: PUSH
25836: LD_INT 1
25838: ARRAY
25839: PPUSH
25840: LD_EXP 96
25844: PUSH
25845: LD_VAR 0 1
25849: ARRAY
25850: PUSH
25851: LD_VAR 0 2
25855: ARRAY
25856: PUSH
25857: LD_INT 2
25859: ARRAY
25860: PPUSH
25861: LD_VAR 0 3
25865: PPUSH
25866: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
25870: LD_ADDR_EXP 96
25874: PUSH
25875: LD_EXP 96
25879: PPUSH
25880: LD_VAR 0 1
25884: PPUSH
25885: LD_EXP 96
25889: PUSH
25890: LD_VAR 0 1
25894: ARRAY
25895: PPUSH
25896: LD_VAR 0 2
25900: PPUSH
25901: CALL_OW 3
25905: PPUSH
25906: CALL_OW 1
25910: ST_TO_ADDR
// end ; end ;
25911: GO 25660
25913: POP
25914: POP
// end ;
25915: GO 25578
25917: POP
25918: POP
// end ;
25919: PPOPN 4
25921: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
25922: LD_INT 0
25924: PPUSH
25925: PPUSH
// result := false ;
25926: LD_ADDR_VAR 0 4
25930: PUSH
25931: LD_INT 0
25933: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
25934: LD_VAR 0 1
25938: PPUSH
25939: CALL_OW 264
25943: PUSH
25944: LD_INT 81
25946: EQUAL
25947: NOT
25948: IFFALSE 25952
// exit ;
25950: GO 26196
// index := GetElementIndex ( minersList , unit ) ;
25952: LD_ADDR_VAR 0 5
25956: PUSH
25957: LD_EXP 95
25961: PPUSH
25962: LD_VAR 0 1
25966: PPUSH
25967: CALL 33166 0 2
25971: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
25972: LD_EXP 96
25976: PUSH
25977: LD_VAR 0 5
25981: ARRAY
25982: PUSH
25983: LD_EXP 97
25987: GREATEREQUAL
25988: IFFALSE 25992
// exit ;
25990: GO 26196
// ComMoveXY ( unit , x , y ) ;
25992: LD_VAR 0 1
25996: PPUSH
25997: LD_VAR 0 2
26001: PPUSH
26002: LD_VAR 0 3
26006: PPUSH
26007: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26011: LD_INT 35
26013: PPUSH
26014: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
26018: LD_VAR 0 1
26022: PPUSH
26023: LD_VAR 0 2
26027: PPUSH
26028: LD_VAR 0 3
26032: PPUSH
26033: CALL 65212 0 3
26037: NOT
26038: IFFALSE 26051
26040: PUSH
26041: LD_VAR 0 1
26045: PPUSH
26046: CALL_OW 314
26050: AND
26051: IFFALSE 26055
// exit ;
26053: GO 26196
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
26055: LD_VAR 0 2
26059: PPUSH
26060: LD_VAR 0 3
26064: PPUSH
26065: CALL_OW 428
26069: PUSH
26070: LD_VAR 0 1
26074: EQUAL
26075: IFFALSE 26089
26077: PUSH
26078: LD_VAR 0 1
26082: PPUSH
26083: CALL_OW 314
26087: NOT
26088: AND
26089: IFFALSE 26011
// PlaySoundXY ( x , y , PlantMine ) ;
26091: LD_VAR 0 2
26095: PPUSH
26096: LD_VAR 0 3
26100: PPUSH
26101: LD_STRING PlantMine
26103: PPUSH
26104: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
26108: LD_VAR 0 2
26112: PPUSH
26113: LD_VAR 0 3
26117: PPUSH
26118: LD_VAR 0 1
26122: PPUSH
26123: CALL_OW 255
26127: PPUSH
26128: LD_INT 0
26130: PPUSH
26131: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
26135: LD_ADDR_EXP 96
26139: PUSH
26140: LD_EXP 96
26144: PPUSH
26145: LD_VAR 0 5
26149: PUSH
26150: LD_EXP 96
26154: PUSH
26155: LD_VAR 0 5
26159: ARRAY
26160: PUSH
26161: LD_INT 1
26163: PLUS
26164: PUSH
26165: EMPTY
26166: LIST
26167: LIST
26168: PPUSH
26169: LD_VAR 0 2
26173: PUSH
26174: LD_VAR 0 3
26178: PUSH
26179: EMPTY
26180: LIST
26181: LIST
26182: PPUSH
26183: CALL 33383 0 3
26187: ST_TO_ADDR
// result := true ;
26188: LD_ADDR_VAR 0 4
26192: PUSH
26193: LD_INT 1
26195: ST_TO_ADDR
// end ;
26196: LD_VAR 0 4
26200: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
26201: LD_INT 0
26203: PPUSH
26204: PPUSH
26205: PPUSH
// if not unit in minersList then
26206: LD_VAR 0 1
26210: PUSH
26211: LD_EXP 95
26215: IN
26216: NOT
26217: IFFALSE 26221
// exit ;
26219: GO 26615
// index := GetElementIndex ( minersList , unit ) ;
26221: LD_ADDR_VAR 0 6
26225: PUSH
26226: LD_EXP 95
26230: PPUSH
26231: LD_VAR 0 1
26235: PPUSH
26236: CALL 33166 0 2
26240: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
26241: LD_ADDR_VAR 0 5
26245: PUSH
26246: DOUBLE
26247: LD_EXP 96
26251: PUSH
26252: LD_VAR 0 6
26256: ARRAY
26257: INC
26258: ST_TO_ADDR
26259: LD_INT 1
26261: PUSH
26262: FOR_DOWNTO
26263: IFFALSE 26426
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
26265: LD_EXP 96
26269: PUSH
26270: LD_VAR 0 6
26274: ARRAY
26275: PUSH
26276: LD_VAR 0 5
26280: ARRAY
26281: PUSH
26282: LD_INT 1
26284: ARRAY
26285: PUSH
26286: LD_VAR 0 2
26290: EQUAL
26291: IFFALSE 26321
26293: PUSH
26294: LD_EXP 96
26298: PUSH
26299: LD_VAR 0 6
26303: ARRAY
26304: PUSH
26305: LD_VAR 0 5
26309: ARRAY
26310: PUSH
26311: LD_INT 2
26313: ARRAY
26314: PUSH
26315: LD_VAR 0 3
26319: EQUAL
26320: AND
26321: IFFALSE 26424
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26323: LD_EXP 96
26327: PUSH
26328: LD_VAR 0 6
26332: ARRAY
26333: PUSH
26334: LD_VAR 0 5
26338: ARRAY
26339: PUSH
26340: LD_INT 1
26342: ARRAY
26343: PPUSH
26344: LD_EXP 96
26348: PUSH
26349: LD_VAR 0 6
26353: ARRAY
26354: PUSH
26355: LD_VAR 0 5
26359: ARRAY
26360: PUSH
26361: LD_INT 2
26363: ARRAY
26364: PPUSH
26365: LD_VAR 0 1
26369: PPUSH
26370: CALL_OW 255
26374: PPUSH
26375: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26379: LD_ADDR_EXP 96
26383: PUSH
26384: LD_EXP 96
26388: PPUSH
26389: LD_VAR 0 6
26393: PPUSH
26394: LD_EXP 96
26398: PUSH
26399: LD_VAR 0 6
26403: ARRAY
26404: PPUSH
26405: LD_VAR 0 5
26409: PPUSH
26410: CALL_OW 3
26414: PPUSH
26415: CALL_OW 1
26419: ST_TO_ADDR
// exit ;
26420: POP
26421: POP
26422: GO 26615
// end ; end ;
26424: GO 26262
26426: POP
26427: POP
// for i := minerMinesList [ index ] downto 1 do
26428: LD_ADDR_VAR 0 5
26432: PUSH
26433: DOUBLE
26434: LD_EXP 96
26438: PUSH
26439: LD_VAR 0 6
26443: ARRAY
26444: INC
26445: ST_TO_ADDR
26446: LD_INT 1
26448: PUSH
26449: FOR_DOWNTO
26450: IFFALSE 26613
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
26452: LD_EXP 96
26456: PUSH
26457: LD_VAR 0 6
26461: ARRAY
26462: PUSH
26463: LD_VAR 0 5
26467: ARRAY
26468: PUSH
26469: LD_INT 1
26471: ARRAY
26472: PPUSH
26473: LD_EXP 96
26477: PUSH
26478: LD_VAR 0 6
26482: ARRAY
26483: PUSH
26484: LD_VAR 0 5
26488: ARRAY
26489: PUSH
26490: LD_INT 2
26492: ARRAY
26493: PPUSH
26494: LD_VAR 0 2
26498: PPUSH
26499: LD_VAR 0 3
26503: PPUSH
26504: CALL_OW 298
26508: PUSH
26509: LD_INT 6
26511: LESS
26512: IFFALSE 26611
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26514: LD_EXP 96
26518: PUSH
26519: LD_VAR 0 6
26523: ARRAY
26524: PUSH
26525: LD_VAR 0 5
26529: ARRAY
26530: PUSH
26531: LD_INT 1
26533: ARRAY
26534: PPUSH
26535: LD_EXP 96
26539: PUSH
26540: LD_VAR 0 6
26544: ARRAY
26545: PUSH
26546: LD_VAR 0 5
26550: ARRAY
26551: PUSH
26552: LD_INT 2
26554: ARRAY
26555: PPUSH
26556: LD_VAR 0 1
26560: PPUSH
26561: CALL_OW 255
26565: PPUSH
26566: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26570: LD_ADDR_EXP 96
26574: PUSH
26575: LD_EXP 96
26579: PPUSH
26580: LD_VAR 0 6
26584: PPUSH
26585: LD_EXP 96
26589: PUSH
26590: LD_VAR 0 6
26594: ARRAY
26595: PPUSH
26596: LD_VAR 0 5
26600: PPUSH
26601: CALL_OW 3
26605: PPUSH
26606: CALL_OW 1
26610: ST_TO_ADDR
// end ; end ;
26611: GO 26449
26613: POP
26614: POP
// end ;
26615: LD_VAR 0 4
26619: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
26620: LD_INT 0
26622: PPUSH
26623: PPUSH
26624: PPUSH
26625: PPUSH
26626: PPUSH
26627: PPUSH
26628: PPUSH
26629: PPUSH
26630: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
26631: LD_VAR 0 1
26635: PPUSH
26636: CALL_OW 264
26640: PUSH
26641: LD_INT 81
26643: EQUAL
26644: NOT
26645: IFTRUE 26660
26647: PUSH
26648: LD_VAR 0 1
26652: PUSH
26653: LD_EXP 95
26657: IN
26658: NOT
26659: OR
26660: IFFALSE 26664
// exit ;
26662: GO 26990
// index := GetElementIndex ( minersList , unit ) ;
26664: LD_ADDR_VAR 0 6
26668: PUSH
26669: LD_EXP 95
26673: PPUSH
26674: LD_VAR 0 1
26678: PPUSH
26679: CALL 33166 0 2
26683: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
26684: LD_ADDR_VAR 0 8
26688: PUSH
26689: LD_EXP 97
26693: PUSH
26694: LD_EXP 96
26698: PUSH
26699: LD_VAR 0 6
26703: ARRAY
26704: MINUS
26705: ST_TO_ADDR
// if not minesFreeAmount then
26706: LD_VAR 0 8
26710: NOT
26711: IFFALSE 26715
// exit ;
26713: GO 26990
// tmp := [ ] ;
26715: LD_ADDR_VAR 0 7
26719: PUSH
26720: EMPTY
26721: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
26722: LD_ADDR_VAR 0 5
26726: PUSH
26727: DOUBLE
26728: LD_INT 1
26730: DEC
26731: ST_TO_ADDR
26732: LD_VAR 0 8
26736: PUSH
26737: FOR_TO
26738: IFFALSE 26937
// begin _d := rand ( 0 , 5 ) ;
26740: LD_ADDR_VAR 0 11
26744: PUSH
26745: LD_INT 0
26747: PPUSH
26748: LD_INT 5
26750: PPUSH
26751: CALL_OW 12
26755: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
26756: LD_ADDR_VAR 0 12
26760: PUSH
26761: LD_INT 2
26763: PPUSH
26764: LD_INT 6
26766: PPUSH
26767: CALL_OW 12
26771: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
26772: LD_ADDR_VAR 0 9
26776: PUSH
26777: LD_VAR 0 2
26781: PPUSH
26782: LD_VAR 0 11
26786: PPUSH
26787: LD_VAR 0 12
26791: PPUSH
26792: CALL_OW 272
26796: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
26797: LD_ADDR_VAR 0 10
26801: PUSH
26802: LD_VAR 0 3
26806: PPUSH
26807: LD_VAR 0 11
26811: PPUSH
26812: LD_VAR 0 12
26816: PPUSH
26817: CALL_OW 273
26821: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
26822: LD_VAR 0 9
26826: PPUSH
26827: LD_VAR 0 10
26831: PPUSH
26832: CALL_OW 488
26836: IFFALSE 26860
26838: PUSH
26839: LD_VAR 0 9
26843: PUSH
26844: LD_VAR 0 10
26848: PUSH
26849: EMPTY
26850: LIST
26851: LIST
26852: PUSH
26853: LD_VAR 0 7
26857: IN
26858: NOT
26859: AND
26860: IFFALSE 26879
26862: PUSH
26863: LD_VAR 0 9
26867: PPUSH
26868: LD_VAR 0 10
26872: PPUSH
26873: CALL_OW 458
26877: NOT
26878: AND
26879: IFFALSE 26921
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
26881: LD_ADDR_VAR 0 7
26885: PUSH
26886: LD_VAR 0 7
26890: PPUSH
26891: LD_VAR 0 7
26895: PUSH
26896: LD_INT 1
26898: PLUS
26899: PPUSH
26900: LD_VAR 0 9
26904: PUSH
26905: LD_VAR 0 10
26909: PUSH
26910: EMPTY
26911: LIST
26912: LIST
26913: PPUSH
26914: CALL_OW 1
26918: ST_TO_ADDR
26919: GO 26935
// i := i - 1 ;
26921: LD_ADDR_VAR 0 5
26925: PUSH
26926: LD_VAR 0 5
26930: PUSH
26931: LD_INT 1
26933: MINUS
26934: ST_TO_ADDR
// end ;
26935: GO 26737
26937: POP
26938: POP
// for i in tmp do
26939: LD_ADDR_VAR 0 5
26943: PUSH
26944: LD_VAR 0 7
26948: PUSH
26949: FOR_IN
26950: IFFALSE 26988
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
26952: LD_VAR 0 1
26956: PPUSH
26957: LD_VAR 0 5
26961: PUSH
26962: LD_INT 1
26964: ARRAY
26965: PPUSH
26966: LD_VAR 0 5
26970: PUSH
26971: LD_INT 2
26973: ARRAY
26974: PPUSH
26975: CALL 25922 0 3
26979: NOT
26980: IFFALSE 26986
// exit ;
26982: POP
26983: POP
26984: GO 26990
26986: GO 26949
26988: POP
26989: POP
// end ;
26990: LD_VAR 0 4
26994: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
26995: LD_INT 0
26997: PPUSH
26998: PPUSH
26999: PPUSH
27000: PPUSH
27001: PPUSH
27002: PPUSH
27003: PPUSH
27004: PPUSH
27005: PPUSH
// if GetClass ( unit ) <> class_sniper then
27006: LD_VAR 0 1
27010: PPUSH
27011: CALL_OW 257
27015: PUSH
27016: LD_INT 5
27018: NONEQUAL
27019: IFFALSE 27023
// exit ;
27021: GO 27493
// dist := 8 ;
27023: LD_ADDR_VAR 0 5
27027: PUSH
27028: LD_INT 8
27030: ST_TO_ADDR
// viewRange := 12 ;
27031: LD_ADDR_VAR 0 8
27035: PUSH
27036: LD_INT 12
27038: ST_TO_ADDR
// side := GetSide ( unit ) ;
27039: LD_ADDR_VAR 0 6
27043: PUSH
27044: LD_VAR 0 1
27048: PPUSH
27049: CALL_OW 255
27053: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
27054: LD_INT 61
27056: PPUSH
27057: LD_VAR 0 6
27061: PPUSH
27062: CALL_OW 321
27066: PUSH
27067: LD_INT 2
27069: EQUAL
27070: IFFALSE 27080
// viewRange := 16 ;
27072: LD_ADDR_VAR 0 8
27076: PUSH
27077: LD_INT 16
27079: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
27080: LD_VAR 0 1
27084: PPUSH
27085: LD_VAR 0 2
27089: PPUSH
27090: LD_VAR 0 3
27094: PPUSH
27095: CALL_OW 297
27099: PUSH
27100: LD_VAR 0 5
27104: GREATER
27105: IFFALSE 27184
// begin ComMoveXY ( unit , x , y ) ;
27107: LD_VAR 0 1
27111: PPUSH
27112: LD_VAR 0 2
27116: PPUSH
27117: LD_VAR 0 3
27121: PPUSH
27122: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27126: LD_INT 35
27128: PPUSH
27129: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
27133: LD_VAR 0 1
27137: PPUSH
27138: LD_VAR 0 2
27142: PPUSH
27143: LD_VAR 0 3
27147: PPUSH
27148: CALL 65212 0 3
27152: NOT
27153: IFFALSE 27157
// exit ;
27155: GO 27493
// until GetDistUnitXY ( unit , x , y ) < dist ;
27157: LD_VAR 0 1
27161: PPUSH
27162: LD_VAR 0 2
27166: PPUSH
27167: LD_VAR 0 3
27171: PPUSH
27172: CALL_OW 297
27176: PUSH
27177: LD_VAR 0 5
27181: LESS
27182: IFFALSE 27126
// end ; ComTurnXY ( unit , x , y ) ;
27184: LD_VAR 0 1
27188: PPUSH
27189: LD_VAR 0 2
27193: PPUSH
27194: LD_VAR 0 3
27198: PPUSH
27199: CALL_OW 118
// repeat if Multiplayer then
27203: LD_OWVAR 4
27207: IFFALSE 27218
// wait ( 35 ) else
27209: LD_INT 35
27211: PPUSH
27212: CALL_OW 67
27216: GO 27225
// wait ( 5 ) ;
27218: LD_INT 5
27220: PPUSH
27221: CALL_OW 67
// _d := GetDir ( unit ) ;
27225: LD_ADDR_VAR 0 11
27229: PUSH
27230: LD_VAR 0 1
27234: PPUSH
27235: CALL_OW 254
27239: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
27240: LD_ADDR_VAR 0 7
27244: PUSH
27245: LD_VAR 0 1
27249: PPUSH
27250: CALL_OW 250
27254: PPUSH
27255: LD_VAR 0 1
27259: PPUSH
27260: CALL_OW 251
27264: PPUSH
27265: LD_VAR 0 2
27269: PPUSH
27270: LD_VAR 0 3
27274: PPUSH
27275: CALL 67848 0 4
27279: ST_TO_ADDR
// until dir = _d ;
27280: LD_VAR 0 7
27284: PUSH
27285: LD_VAR 0 11
27289: EQUAL
27290: IFFALSE 27203
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
27292: LD_ADDR_VAR 0 9
27296: PUSH
27297: LD_VAR 0 1
27301: PPUSH
27302: CALL_OW 250
27306: PPUSH
27307: LD_VAR 0 7
27311: PPUSH
27312: LD_VAR 0 5
27316: PPUSH
27317: CALL_OW 272
27321: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
27322: LD_ADDR_VAR 0 10
27326: PUSH
27327: LD_VAR 0 1
27331: PPUSH
27332: CALL_OW 251
27336: PPUSH
27337: LD_VAR 0 7
27341: PPUSH
27342: LD_VAR 0 5
27346: PPUSH
27347: CALL_OW 273
27351: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27352: LD_VAR 0 9
27356: PPUSH
27357: LD_VAR 0 10
27361: PPUSH
27362: CALL_OW 488
27366: NOT
27367: IFFALSE 27371
// exit ;
27369: GO 27493
// ComAnimCustom ( unit , 1 ) ;
27371: LD_VAR 0 1
27375: PPUSH
27376: LD_INT 1
27378: PPUSH
27379: CALL_OW 592
// p := 0 ;
27383: LD_ADDR_VAR 0 12
27387: PUSH
27388: LD_INT 0
27390: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
27391: LD_VAR 0 9
27395: PPUSH
27396: LD_VAR 0 10
27400: PPUSH
27401: LD_VAR 0 6
27405: PPUSH
27406: LD_VAR 0 8
27410: PPUSH
27411: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
27415: LD_INT 35
27417: PPUSH
27418: CALL_OW 67
// p := Inc ( p ) ;
27422: LD_ADDR_VAR 0 12
27426: PUSH
27427: LD_VAR 0 12
27431: PPUSH
27432: CALL 67804 0 1
27436: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
27437: LD_VAR 0 12
27441: PUSH
27442: LD_INT 3
27444: EQUAL
27445: IFTRUE 27459
27447: PUSH
27448: LD_VAR 0 1
27452: PPUSH
27453: CALL_OW 302
27457: NOT
27458: OR
27459: IFTRUE 27472
27461: PUSH
27462: LD_VAR 0 1
27466: PPUSH
27467: CALL_OW 301
27471: OR
27472: IFFALSE 27415
// RemoveSeeing ( _x , _y , side ) ;
27474: LD_VAR 0 9
27478: PPUSH
27479: LD_VAR 0 10
27483: PPUSH
27484: LD_VAR 0 6
27488: PPUSH
27489: CALL_OW 331
// end ;
27493: LD_VAR 0 4
27497: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
27498: LD_INT 0
27500: PPUSH
27501: PPUSH
27502: PPUSH
27503: PPUSH
27504: PPUSH
27505: PPUSH
27506: PPUSH
27507: PPUSH
27508: PPUSH
27509: PPUSH
27510: PPUSH
// if not unit then
27511: LD_VAR 0 1
27515: NOT
27516: IFFALSE 27520
// exit ;
27518: GO 27791
// side := GetSide ( unit ) ;
27520: LD_ADDR_VAR 0 3
27524: PUSH
27525: LD_VAR 0 1
27529: PPUSH
27530: CALL_OW 255
27534: ST_TO_ADDR
// x := GetX ( unit ) ;
27535: LD_ADDR_VAR 0 5
27539: PUSH
27540: LD_VAR 0 1
27544: PPUSH
27545: CALL_OW 250
27549: ST_TO_ADDR
// y := GetY ( unit ) ;
27550: LD_ADDR_VAR 0 6
27554: PUSH
27555: LD_VAR 0 1
27559: PPUSH
27560: CALL_OW 251
27564: ST_TO_ADDR
// r := 8 ;
27565: LD_ADDR_VAR 0 4
27569: PUSH
27570: LD_INT 8
27572: ST_TO_ADDR
// if x - r < 0 then
27573: LD_VAR 0 5
27577: PUSH
27578: LD_VAR 0 4
27582: MINUS
27583: PUSH
27584: LD_INT 0
27586: LESS
27587: IFFALSE 27599
// min_x := 0 else
27589: LD_ADDR_VAR 0 7
27593: PUSH
27594: LD_INT 0
27596: ST_TO_ADDR
27597: GO 27615
// min_x := x - r ;
27599: LD_ADDR_VAR 0 7
27603: PUSH
27604: LD_VAR 0 5
27608: PUSH
27609: LD_VAR 0 4
27613: MINUS
27614: ST_TO_ADDR
// if y - r < 0 then
27615: LD_VAR 0 6
27619: PUSH
27620: LD_VAR 0 4
27624: MINUS
27625: PUSH
27626: LD_INT 0
27628: LESS
27629: IFFALSE 27641
// min_y := 0 else
27631: LD_ADDR_VAR 0 8
27635: PUSH
27636: LD_INT 0
27638: ST_TO_ADDR
27639: GO 27657
// min_y := y - r ;
27641: LD_ADDR_VAR 0 8
27645: PUSH
27646: LD_VAR 0 6
27650: PUSH
27651: LD_VAR 0 4
27655: MINUS
27656: ST_TO_ADDR
// max_x := x + r ;
27657: LD_ADDR_VAR 0 9
27661: PUSH
27662: LD_VAR 0 5
27666: PUSH
27667: LD_VAR 0 4
27671: PLUS
27672: ST_TO_ADDR
// max_y := y + r ;
27673: LD_ADDR_VAR 0 10
27677: PUSH
27678: LD_VAR 0 6
27682: PUSH
27683: LD_VAR 0 4
27687: PLUS
27688: ST_TO_ADDR
// for _x = min_x to max_x do
27689: LD_ADDR_VAR 0 11
27693: PUSH
27694: DOUBLE
27695: LD_VAR 0 7
27699: DEC
27700: ST_TO_ADDR
27701: LD_VAR 0 9
27705: PUSH
27706: FOR_TO
27707: IFFALSE 27789
// for _y = min_y to max_y do
27709: LD_ADDR_VAR 0 12
27713: PUSH
27714: DOUBLE
27715: LD_VAR 0 8
27719: DEC
27720: ST_TO_ADDR
27721: LD_VAR 0 10
27725: PUSH
27726: FOR_TO
27727: IFFALSE 27785
// begin if not ValidHex ( _x , _y ) then
27729: LD_VAR 0 11
27733: PPUSH
27734: LD_VAR 0 12
27738: PPUSH
27739: CALL_OW 488
27743: NOT
27744: IFFALSE 27748
// continue ;
27746: GO 27726
// if MineAtPos ( _x , _y ) then
27748: LD_VAR 0 11
27752: PPUSH
27753: LD_VAR 0 12
27757: PPUSH
27758: CALL_OW 458
27762: IFFALSE 27783
// ViewMineAtPos ( _x , _y , side ) ;
27764: LD_VAR 0 11
27768: PPUSH
27769: LD_VAR 0 12
27773: PPUSH
27774: LD_VAR 0 3
27778: PPUSH
27779: CALL_OW 457
// end ;
27783: GO 27726
27785: POP
27786: POP
27787: GO 27706
27789: POP
27790: POP
// end ;
27791: LD_VAR 0 2
27795: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer ; begin
27796: LD_INT 0
27798: PPUSH
27799: PPUSH
27800: PPUSH
27801: PPUSH
27802: PPUSH
27803: PPUSH
// if not units then
27804: LD_VAR 0 1
27808: NOT
27809: IFFALSE 27813
// exit ;
27811: GO 28243
// scaners := [ ] ;
27813: LD_ADDR_VAR 0 6
27817: PUSH
27818: EMPTY
27819: ST_TO_ADDR
// for i in units do
27820: LD_ADDR_VAR 0 3
27824: PUSH
27825: LD_VAR 0 1
27829: PUSH
27830: FOR_IN
27831: IFFALSE 27988
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
27833: LD_VAR 0 3
27837: PPUSH
27838: CALL_OW 264
27842: PUSH
27843: LD_INT 11
27845: NONEQUAL
27846: IFTRUE 27860
27848: PUSH
27849: LD_VAR 0 3
27853: PPUSH
27854: CALL_OW 302
27858: NOT
27859: OR
27860: IFTRUE 27877
27862: PUSH
27863: LD_VAR 0 3
27867: PPUSH
27868: CALL_OW 110
27872: PUSH
27873: LD_INT 502
27875: EQUAL
27876: OR
27877: IFFALSE 27881
// continue ;
27879: GO 27830
// ComStop ( i ) ;
27881: LD_VAR 0 3
27885: PPUSH
27886: CALL_OW 141
// x := GetX ( i ) ;
27890: LD_ADDR_VAR 0 4
27894: PUSH
27895: LD_VAR 0 3
27899: PPUSH
27900: CALL_OW 250
27904: ST_TO_ADDR
// y := GetY ( i ) ;
27905: LD_ADDR_VAR 0 5
27909: PUSH
27910: LD_VAR 0 3
27914: PPUSH
27915: CALL_OW 251
27919: ST_TO_ADDR
// if GetSide ( i ) = your_side then
27920: LD_VAR 0 3
27924: PPUSH
27925: CALL_OW 255
27929: PUSH
27930: LD_OWVAR 2
27934: EQUAL
27935: IFFALSE 27954
// PlaySoundXY ( x , y , mineDetector ) ;
27937: LD_VAR 0 4
27941: PPUSH
27942: LD_VAR 0 5
27946: PPUSH
27947: LD_STRING mineDetector
27949: PPUSH
27950: CALL_OW 366
// scaners := Join ( scaners , i ) ;
27954: LD_ADDR_VAR 0 6
27958: PUSH
27959: LD_VAR 0 6
27963: PPUSH
27964: LD_VAR 0 3
27968: PPUSH
27969: CALL 66431 0 2
27973: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
27974: LD_VAR 0 3
27978: PPUSH
27979: LD_INT 502
27981: PPUSH
27982: CALL_OW 109
// end ;
27986: GO 27830
27988: POP
27989: POP
// if not scaners then
27990: LD_VAR 0 6
27994: NOT
27995: IFFALSE 27999
// exit ;
27997: GO 28243
// wait ( 3 ) ;
27999: LD_INT 3
28001: PPUSH
28002: CALL_OW 67
// timer := 6 ;
28006: LD_ADDR_VAR 0 7
28010: PUSH
28011: LD_INT 6
28013: ST_TO_ADDR
// repeat for i in scaners do
28014: LD_ADDR_VAR 0 3
28018: PUSH
28019: LD_VAR 0 6
28023: PUSH
28024: FOR_IN
28025: IFFALSE 28141
// begin if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
28027: LD_VAR 0 3
28031: PPUSH
28032: CALL_OW 302
28036: NOT
28037: IFTRUE 28050
28039: PUSH
28040: LD_VAR 0 3
28044: PPUSH
28045: CALL_OW 314
28049: OR
28050: IFTRUE 28081
28052: PUSH
28053: LD_VAR 0 3
28057: PPUSH
28058: CALL_OW 263
28062: PUSH
28063: LD_INT 1
28065: EQUAL
28066: IFFALSE 28080
28068: PUSH
28069: LD_VAR 0 3
28073: PPUSH
28074: CALL_OW 311
28078: NOT
28079: AND
28080: OR
28081: IFFALSE 28125
// begin SetUnitDisplayNumber ( i , 0 ) ;
28083: LD_VAR 0 3
28087: PPUSH
28088: LD_INT 0
28090: PPUSH
28091: CALL_OW 505
// SetTag ( i , 0 ) ;
28095: LD_VAR 0 3
28099: PPUSH
28100: LD_INT 0
28102: PPUSH
28103: CALL_OW 109
// scaners := scaners diff i ;
28107: LD_ADDR_VAR 0 6
28111: PUSH
28112: LD_VAR 0 6
28116: PUSH
28117: LD_VAR 0 3
28121: DIFF
28122: ST_TO_ADDR
// continue ;
28123: GO 28024
// end ; SetUnitDisplayNumber ( i , timer ) ;
28125: LD_VAR 0 3
28129: PPUSH
28130: LD_VAR 0 7
28134: PPUSH
28135: CALL_OW 505
// end ;
28139: GO 28024
28141: POP
28142: POP
// if not scaners then
28143: LD_VAR 0 6
28147: NOT
28148: IFFALSE 28152
// exit ;
28150: GO 28243
// timer := Dec ( timer ) ;
28152: LD_ADDR_VAR 0 7
28156: PUSH
28157: LD_VAR 0 7
28161: PPUSH
28162: CALL 67826 0 1
28166: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28167: LD_INT 35
28169: PPUSH
28170: CALL_OW 67
// until timer = 0 ;
28174: LD_VAR 0 7
28178: PUSH
28179: LD_INT 0
28181: EQUAL
28182: IFFALSE 28014
// if not scaners then
28184: LD_VAR 0 6
28188: NOT
28189: IFFALSE 28193
// exit ;
28191: GO 28243
// for i in scaners do
28193: LD_ADDR_VAR 0 3
28197: PUSH
28198: LD_VAR 0 6
28202: PUSH
28203: FOR_IN
28204: IFFALSE 28241
// begin SetUnitDisplayNumber ( i , 0 ) ;
28206: LD_VAR 0 3
28210: PPUSH
28211: LD_INT 0
28213: PPUSH
28214: CALL_OW 505
// SetTag ( i , 0 ) ;
28218: LD_VAR 0 3
28222: PPUSH
28223: LD_INT 0
28225: PPUSH
28226: CALL_OW 109
// RevealDetectorMine ( i ) ;
28230: LD_VAR 0 3
28234: PPUSH
28235: CALL 27498 0 1
// end ;
28239: GO 28203
28241: POP
28242: POP
// end ;
28243: LD_VAR 0 2
28247: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
28248: LD_INT 0
28250: PPUSH
// if p1 = mine_detector_mode then
28251: LD_VAR 0 2
28255: PUSH
28256: LD_INT 103
28258: EQUAL
28259: IFFALSE 28270
// DetectMine ( units ) ;
28261: LD_VAR 0 1
28265: PPUSH
28266: CALL 27796 0 1
// end ; end_of_file
28270: LD_VAR 0 7
28274: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
28275: LD_INT 0
28277: PPUSH
28278: PPUSH
// if exist_mode then
28279: LD_VAR 0 2
28283: IFFALSE 28329
// begin unit := CreateCharacter ( prefix & ident ) ;
28285: LD_ADDR_VAR 0 5
28289: PUSH
28290: LD_VAR 0 3
28294: PUSH
28295: LD_VAR 0 1
28299: STR
28300: PPUSH
28301: CALL_OW 34
28305: ST_TO_ADDR
// if unit then
28306: LD_VAR 0 5
28310: IFFALSE 28327
// DeleteCharacters ( prefix & ident ) ;
28312: LD_VAR 0 3
28316: PUSH
28317: LD_VAR 0 1
28321: STR
28322: PPUSH
28323: CALL_OW 40
// end else
28327: GO 28344
// unit := NewCharacter ( ident ) ;
28329: LD_ADDR_VAR 0 5
28333: PUSH
28334: LD_VAR 0 1
28338: PPUSH
28339: CALL_OW 25
28343: ST_TO_ADDR
// result := unit ;
28344: LD_ADDR_VAR 0 4
28348: PUSH
28349: LD_VAR 0 5
28353: ST_TO_ADDR
// end ;
28354: LD_VAR 0 4
28358: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
28359: LD_INT 0
28361: PPUSH
28362: PPUSH
// if exist_mode then
28363: LD_VAR 0 2
28367: IFFALSE 28392
// unit := CreateCharacter ( prefix & ident ) else
28369: LD_ADDR_VAR 0 5
28373: PUSH
28374: LD_VAR 0 3
28378: PUSH
28379: LD_VAR 0 1
28383: STR
28384: PPUSH
28385: CALL_OW 34
28389: ST_TO_ADDR
28390: GO 28407
// unit := NewCharacter ( ident ) ;
28392: LD_ADDR_VAR 0 5
28396: PUSH
28397: LD_VAR 0 1
28401: PPUSH
28402: CALL_OW 25
28406: ST_TO_ADDR
// result := unit ;
28407: LD_ADDR_VAR 0 4
28411: PUSH
28412: LD_VAR 0 5
28416: ST_TO_ADDR
// end ;
28417: LD_VAR 0 4
28421: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
28422: LD_INT 0
28424: PPUSH
28425: PPUSH
// if not side or not nation then
28426: LD_VAR 0 1
28430: NOT
28431: IFTRUE 28440
28433: PUSH
28434: LD_VAR 0 2
28438: NOT
28439: OR
28440: IFFALSE 28444
// exit ;
28442: GO 29238
// case nation of nation_american :
28444: LD_VAR 0 2
28448: PUSH
28449: LD_INT 1
28451: DOUBLE
28452: EQUAL
28453: IFTRUE 28457
28455: GO 28679
28457: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
28458: LD_ADDR_VAR 0 4
28462: PUSH
28463: LD_INT 35
28465: PUSH
28466: LD_INT 45
28468: PUSH
28469: LD_INT 46
28471: PUSH
28472: LD_INT 47
28474: PUSH
28475: LD_INT 82
28477: PUSH
28478: LD_INT 83
28480: PUSH
28481: LD_INT 84
28483: PUSH
28484: LD_INT 85
28486: PUSH
28487: LD_INT 86
28489: PUSH
28490: LD_INT 1
28492: PUSH
28493: LD_INT 2
28495: PUSH
28496: LD_INT 6
28498: PUSH
28499: LD_INT 15
28501: PUSH
28502: LD_INT 16
28504: PUSH
28505: LD_INT 7
28507: PUSH
28508: LD_INT 12
28510: PUSH
28511: LD_INT 13
28513: PUSH
28514: LD_INT 10
28516: PUSH
28517: LD_INT 14
28519: PUSH
28520: LD_INT 20
28522: PUSH
28523: LD_INT 21
28525: PUSH
28526: LD_INT 22
28528: PUSH
28529: LD_INT 25
28531: PUSH
28532: LD_INT 32
28534: PUSH
28535: LD_INT 27
28537: PUSH
28538: LD_INT 36
28540: PUSH
28541: LD_INT 69
28543: PUSH
28544: LD_INT 39
28546: PUSH
28547: LD_INT 34
28549: PUSH
28550: LD_INT 40
28552: PUSH
28553: LD_INT 48
28555: PUSH
28556: LD_INT 49
28558: PUSH
28559: LD_INT 50
28561: PUSH
28562: LD_INT 51
28564: PUSH
28565: LD_INT 52
28567: PUSH
28568: LD_INT 53
28570: PUSH
28571: LD_INT 54
28573: PUSH
28574: LD_INT 55
28576: PUSH
28577: LD_INT 56
28579: PUSH
28580: LD_INT 57
28582: PUSH
28583: LD_INT 58
28585: PUSH
28586: LD_INT 59
28588: PUSH
28589: LD_INT 60
28591: PUSH
28592: LD_INT 61
28594: PUSH
28595: LD_INT 62
28597: PUSH
28598: LD_INT 80
28600: PUSH
28601: LD_INT 82
28603: PUSH
28604: LD_INT 83
28606: PUSH
28607: LD_INT 84
28609: PUSH
28610: LD_INT 85
28612: PUSH
28613: LD_INT 86
28615: PUSH
28616: LD_INT 90
28618: PUSH
28619: LD_INT 93
28621: PUSH
28622: EMPTY
28623: LIST
28624: LIST
28625: LIST
28626: LIST
28627: LIST
28628: LIST
28629: LIST
28630: LIST
28631: LIST
28632: LIST
28633: LIST
28634: LIST
28635: LIST
28636: LIST
28637: LIST
28638: LIST
28639: LIST
28640: LIST
28641: LIST
28642: LIST
28643: LIST
28644: LIST
28645: LIST
28646: LIST
28647: LIST
28648: LIST
28649: LIST
28650: LIST
28651: LIST
28652: LIST
28653: LIST
28654: LIST
28655: LIST
28656: LIST
28657: LIST
28658: LIST
28659: LIST
28660: LIST
28661: LIST
28662: LIST
28663: LIST
28664: LIST
28665: LIST
28666: LIST
28667: LIST
28668: LIST
28669: LIST
28670: LIST
28671: LIST
28672: LIST
28673: LIST
28674: LIST
28675: LIST
28676: ST_TO_ADDR
28677: GO 29160
28679: LD_INT 2
28681: DOUBLE
28682: EQUAL
28683: IFTRUE 28687
28685: GO 28921
28687: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
28688: LD_ADDR_VAR 0 4
28692: PUSH
28693: LD_INT 35
28695: PUSH
28696: LD_INT 45
28698: PUSH
28699: LD_INT 46
28701: PUSH
28702: LD_INT 47
28704: PUSH
28705: LD_INT 82
28707: PUSH
28708: LD_INT 83
28710: PUSH
28711: LD_INT 84
28713: PUSH
28714: LD_INT 85
28716: PUSH
28717: LD_INT 87
28719: PUSH
28720: LD_INT 70
28722: PUSH
28723: LD_INT 1
28725: PUSH
28726: LD_INT 11
28728: PUSH
28729: LD_INT 3
28731: PUSH
28732: LD_INT 4
28734: PUSH
28735: LD_INT 5
28737: PUSH
28738: LD_INT 6
28740: PUSH
28741: LD_INT 15
28743: PUSH
28744: LD_INT 18
28746: PUSH
28747: LD_INT 7
28749: PUSH
28750: LD_INT 17
28752: PUSH
28753: LD_INT 8
28755: PUSH
28756: LD_INT 20
28758: PUSH
28759: LD_INT 21
28761: PUSH
28762: LD_INT 22
28764: PUSH
28765: LD_INT 72
28767: PUSH
28768: LD_INT 26
28770: PUSH
28771: LD_INT 69
28773: PUSH
28774: LD_INT 39
28776: PUSH
28777: LD_INT 40
28779: PUSH
28780: LD_INT 41
28782: PUSH
28783: LD_INT 42
28785: PUSH
28786: LD_INT 43
28788: PUSH
28789: LD_INT 48
28791: PUSH
28792: LD_INT 49
28794: PUSH
28795: LD_INT 50
28797: PUSH
28798: LD_INT 51
28800: PUSH
28801: LD_INT 52
28803: PUSH
28804: LD_INT 53
28806: PUSH
28807: LD_INT 54
28809: PUSH
28810: LD_INT 55
28812: PUSH
28813: LD_INT 56
28815: PUSH
28816: LD_INT 60
28818: PUSH
28819: LD_INT 61
28821: PUSH
28822: LD_INT 62
28824: PUSH
28825: LD_INT 66
28827: PUSH
28828: LD_INT 67
28830: PUSH
28831: LD_INT 68
28833: PUSH
28834: LD_INT 81
28836: PUSH
28837: LD_INT 82
28839: PUSH
28840: LD_INT 83
28842: PUSH
28843: LD_INT 84
28845: PUSH
28846: LD_INT 85
28848: PUSH
28849: LD_INT 87
28851: PUSH
28852: LD_INT 88
28854: PUSH
28855: LD_INT 92
28857: PUSH
28858: LD_INT 94
28860: PUSH
28861: EMPTY
28862: LIST
28863: LIST
28864: LIST
28865: LIST
28866: LIST
28867: LIST
28868: LIST
28869: LIST
28870: LIST
28871: LIST
28872: LIST
28873: LIST
28874: LIST
28875: LIST
28876: LIST
28877: LIST
28878: LIST
28879: LIST
28880: LIST
28881: LIST
28882: LIST
28883: LIST
28884: LIST
28885: LIST
28886: LIST
28887: LIST
28888: LIST
28889: LIST
28890: LIST
28891: LIST
28892: LIST
28893: LIST
28894: LIST
28895: LIST
28896: LIST
28897: LIST
28898: LIST
28899: LIST
28900: LIST
28901: LIST
28902: LIST
28903: LIST
28904: LIST
28905: LIST
28906: LIST
28907: LIST
28908: LIST
28909: LIST
28910: LIST
28911: LIST
28912: LIST
28913: LIST
28914: LIST
28915: LIST
28916: LIST
28917: LIST
28918: ST_TO_ADDR
28919: GO 29160
28921: LD_INT 3
28923: DOUBLE
28924: EQUAL
28925: IFTRUE 28929
28927: GO 29159
28929: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
28930: LD_ADDR_VAR 0 4
28934: PUSH
28935: LD_INT 46
28937: PUSH
28938: LD_INT 47
28940: PUSH
28941: LD_INT 1
28943: PUSH
28944: LD_INT 2
28946: PUSH
28947: LD_INT 82
28949: PUSH
28950: LD_INT 83
28952: PUSH
28953: LD_INT 84
28955: PUSH
28956: LD_INT 85
28958: PUSH
28959: LD_INT 86
28961: PUSH
28962: LD_INT 11
28964: PUSH
28965: LD_INT 9
28967: PUSH
28968: LD_INT 20
28970: PUSH
28971: LD_INT 19
28973: PUSH
28974: LD_INT 21
28976: PUSH
28977: LD_INT 24
28979: PUSH
28980: LD_INT 22
28982: PUSH
28983: LD_INT 25
28985: PUSH
28986: LD_INT 28
28988: PUSH
28989: LD_INT 29
28991: PUSH
28992: LD_INT 30
28994: PUSH
28995: LD_INT 31
28997: PUSH
28998: LD_INT 37
29000: PUSH
29001: LD_INT 38
29003: PUSH
29004: LD_INT 32
29006: PUSH
29007: LD_INT 27
29009: PUSH
29010: LD_INT 33
29012: PUSH
29013: LD_INT 69
29015: PUSH
29016: LD_INT 39
29018: PUSH
29019: LD_INT 34
29021: PUSH
29022: LD_INT 40
29024: PUSH
29025: LD_INT 71
29027: PUSH
29028: LD_INT 23
29030: PUSH
29031: LD_INT 44
29033: PUSH
29034: LD_INT 48
29036: PUSH
29037: LD_INT 49
29039: PUSH
29040: LD_INT 50
29042: PUSH
29043: LD_INT 51
29045: PUSH
29046: LD_INT 52
29048: PUSH
29049: LD_INT 53
29051: PUSH
29052: LD_INT 54
29054: PUSH
29055: LD_INT 55
29057: PUSH
29058: LD_INT 56
29060: PUSH
29061: LD_INT 57
29063: PUSH
29064: LD_INT 58
29066: PUSH
29067: LD_INT 59
29069: PUSH
29070: LD_INT 63
29072: PUSH
29073: LD_INT 64
29075: PUSH
29076: LD_INT 65
29078: PUSH
29079: LD_INT 82
29081: PUSH
29082: LD_INT 83
29084: PUSH
29085: LD_INT 84
29087: PUSH
29088: LD_INT 85
29090: PUSH
29091: LD_INT 86
29093: PUSH
29094: LD_INT 89
29096: PUSH
29097: LD_INT 91
29099: PUSH
29100: EMPTY
29101: LIST
29102: LIST
29103: LIST
29104: LIST
29105: LIST
29106: LIST
29107: LIST
29108: LIST
29109: LIST
29110: LIST
29111: LIST
29112: LIST
29113: LIST
29114: LIST
29115: LIST
29116: LIST
29117: LIST
29118: LIST
29119: LIST
29120: LIST
29121: LIST
29122: LIST
29123: LIST
29124: LIST
29125: LIST
29126: LIST
29127: LIST
29128: LIST
29129: LIST
29130: LIST
29131: LIST
29132: LIST
29133: LIST
29134: LIST
29135: LIST
29136: LIST
29137: LIST
29138: LIST
29139: LIST
29140: LIST
29141: LIST
29142: LIST
29143: LIST
29144: LIST
29145: LIST
29146: LIST
29147: LIST
29148: LIST
29149: LIST
29150: LIST
29151: LIST
29152: LIST
29153: LIST
29154: LIST
29155: LIST
29156: ST_TO_ADDR
29157: GO 29160
29159: POP
// if state > - 1 and state < 3 then
29160: LD_VAR 0 3
29164: PUSH
29165: LD_INT 1
29167: NEG
29168: GREATER
29169: IFFALSE 29181
29171: PUSH
29172: LD_VAR 0 3
29176: PUSH
29177: LD_INT 3
29179: LESS
29180: AND
29181: IFFALSE 29238
// for i in result do
29183: LD_ADDR_VAR 0 5
29187: PUSH
29188: LD_VAR 0 4
29192: PUSH
29193: FOR_IN
29194: IFFALSE 29236
// if GetTech ( i , side ) <> state then
29196: LD_VAR 0 5
29200: PPUSH
29201: LD_VAR 0 1
29205: PPUSH
29206: CALL_OW 321
29210: PUSH
29211: LD_VAR 0 3
29215: NONEQUAL
29216: IFFALSE 29234
// result := result diff i ;
29218: LD_ADDR_VAR 0 4
29222: PUSH
29223: LD_VAR 0 4
29227: PUSH
29228: LD_VAR 0 5
29232: DIFF
29233: ST_TO_ADDR
29234: GO 29193
29236: POP
29237: POP
// end ;
29238: LD_VAR 0 4
29242: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
29243: LD_INT 0
29245: PPUSH
29246: PPUSH
29247: PPUSH
// result := true ;
29248: LD_ADDR_VAR 0 3
29252: PUSH
29253: LD_INT 1
29255: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
29256: LD_ADDR_VAR 0 5
29260: PUSH
29261: LD_VAR 0 2
29265: PPUSH
29266: CALL_OW 480
29270: ST_TO_ADDR
// if not tmp then
29271: LD_VAR 0 5
29275: NOT
29276: IFFALSE 29280
// exit ;
29278: GO 29329
// for i in tmp do
29280: LD_ADDR_VAR 0 4
29284: PUSH
29285: LD_VAR 0 5
29289: PUSH
29290: FOR_IN
29291: IFFALSE 29327
// if GetTech ( i , side ) <> state_researched then
29293: LD_VAR 0 4
29297: PPUSH
29298: LD_VAR 0 1
29302: PPUSH
29303: CALL_OW 321
29307: PUSH
29308: LD_INT 2
29310: NONEQUAL
29311: IFFALSE 29325
// begin result := false ;
29313: LD_ADDR_VAR 0 3
29317: PUSH
29318: LD_INT 0
29320: ST_TO_ADDR
// exit ;
29321: POP
29322: POP
29323: GO 29329
// end ;
29325: GO 29290
29327: POP
29328: POP
// end ;
29329: LD_VAR 0 3
29333: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
29334: LD_INT 0
29336: PPUSH
29337: PPUSH
29338: PPUSH
29339: PPUSH
29340: PPUSH
29341: PPUSH
29342: PPUSH
29343: PPUSH
29344: PPUSH
29345: PPUSH
29346: PPUSH
29347: PPUSH
29348: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
29349: LD_VAR 0 1
29353: NOT
29354: IFTRUE 29371
29356: PUSH
29357: LD_VAR 0 1
29361: PPUSH
29362: CALL_OW 257
29366: PUSH
29367: LD_INT 9
29369: NONEQUAL
29370: OR
29371: IFFALSE 29375
// exit ;
29373: GO 29954
// side := GetSide ( unit ) ;
29375: LD_ADDR_VAR 0 9
29379: PUSH
29380: LD_VAR 0 1
29384: PPUSH
29385: CALL_OW 255
29389: ST_TO_ADDR
// tech_space := tech_spacanom ;
29390: LD_ADDR_VAR 0 12
29394: PUSH
29395: LD_INT 29
29397: ST_TO_ADDR
// tech_time := tech_taurad ;
29398: LD_ADDR_VAR 0 13
29402: PUSH
29403: LD_INT 28
29405: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
29406: LD_ADDR_VAR 0 11
29410: PUSH
29411: LD_VAR 0 1
29415: PPUSH
29416: CALL_OW 310
29420: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
29421: LD_VAR 0 11
29425: PPUSH
29426: CALL_OW 247
29430: PUSH
29431: LD_INT 2
29433: EQUAL
29434: IFFALSE 29438
// exit ;
29436: GO 29954
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29438: LD_ADDR_VAR 0 8
29442: PUSH
29443: LD_INT 81
29445: PUSH
29446: LD_VAR 0 9
29450: PUSH
29451: EMPTY
29452: LIST
29453: LIST
29454: PUSH
29455: LD_INT 3
29457: PUSH
29458: LD_INT 21
29460: PUSH
29461: LD_INT 3
29463: PUSH
29464: EMPTY
29465: LIST
29466: LIST
29467: PUSH
29468: EMPTY
29469: LIST
29470: LIST
29471: PUSH
29472: EMPTY
29473: LIST
29474: LIST
29475: PPUSH
29476: CALL_OW 69
29480: ST_TO_ADDR
// if not tmp then
29481: LD_VAR 0 8
29485: NOT
29486: IFFALSE 29490
// exit ;
29488: GO 29954
// if in_unit then
29490: LD_VAR 0 11
29494: IFFALSE 29518
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
29496: LD_ADDR_VAR 0 10
29500: PUSH
29501: LD_VAR 0 8
29505: PPUSH
29506: LD_VAR 0 11
29510: PPUSH
29511: CALL_OW 74
29515: ST_TO_ADDR
29516: GO 29538
// enemy := NearestUnitToUnit ( tmp , unit ) ;
29518: LD_ADDR_VAR 0 10
29522: PUSH
29523: LD_VAR 0 8
29527: PPUSH
29528: LD_VAR 0 1
29532: PPUSH
29533: CALL_OW 74
29537: ST_TO_ADDR
// if not enemy then
29538: LD_VAR 0 10
29542: NOT
29543: IFFALSE 29547
// exit ;
29545: GO 29954
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
29547: LD_VAR 0 11
29551: IFFALSE 29573
29553: PUSH
29554: LD_VAR 0 11
29558: PPUSH
29559: LD_VAR 0 10
29563: PPUSH
29564: CALL_OW 296
29568: PUSH
29569: LD_INT 13
29571: GREATER
29572: AND
29573: IFTRUE 29595
29575: PUSH
29576: LD_VAR 0 1
29580: PPUSH
29581: LD_VAR 0 10
29585: PPUSH
29586: CALL_OW 296
29590: PUSH
29591: LD_INT 12
29593: GREATER
29594: OR
29595: IFFALSE 29599
// exit ;
29597: GO 29954
// missile := [ 1 ] ;
29599: LD_ADDR_VAR 0 14
29603: PUSH
29604: LD_INT 1
29606: PUSH
29607: EMPTY
29608: LIST
29609: ST_TO_ADDR
// if Researched ( side , tech_space ) then
29610: LD_VAR 0 9
29614: PPUSH
29615: LD_VAR 0 12
29619: PPUSH
29620: CALL_OW 325
29624: IFFALSE 29653
// missile := Replace ( missile , missile + 1 , 2 ) ;
29626: LD_ADDR_VAR 0 14
29630: PUSH
29631: LD_VAR 0 14
29635: PPUSH
29636: LD_VAR 0 14
29640: PUSH
29641: LD_INT 1
29643: PLUS
29644: PPUSH
29645: LD_INT 2
29647: PPUSH
29648: CALL_OW 1
29652: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
29653: LD_VAR 0 9
29657: PPUSH
29658: LD_VAR 0 13
29662: PPUSH
29663: CALL_OW 325
29667: IFFALSE 29691
29669: PUSH
29670: LD_VAR 0 10
29674: PPUSH
29675: CALL_OW 255
29679: PPUSH
29680: LD_VAR 0 13
29684: PPUSH
29685: CALL_OW 325
29689: NOT
29690: AND
29691: IFFALSE 29720
// missile := Replace ( missile , missile + 1 , 3 ) ;
29693: LD_ADDR_VAR 0 14
29697: PUSH
29698: LD_VAR 0 14
29702: PPUSH
29703: LD_VAR 0 14
29707: PUSH
29708: LD_INT 1
29710: PLUS
29711: PPUSH
29712: LD_INT 3
29714: PPUSH
29715: CALL_OW 1
29719: ST_TO_ADDR
// if missile < 2 then
29720: LD_VAR 0 14
29724: PUSH
29725: LD_INT 2
29727: LESS
29728: IFFALSE 29732
// exit ;
29730: GO 29954
// x := GetX ( enemy ) ;
29732: LD_ADDR_VAR 0 4
29736: PUSH
29737: LD_VAR 0 10
29741: PPUSH
29742: CALL_OW 250
29746: ST_TO_ADDR
// y := GetY ( enemy ) ;
29747: LD_ADDR_VAR 0 5
29751: PUSH
29752: LD_VAR 0 10
29756: PPUSH
29757: CALL_OW 251
29761: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
29762: LD_ADDR_VAR 0 6
29766: PUSH
29767: LD_VAR 0 4
29771: PUSH
29772: LD_INT 1
29774: NEG
29775: PPUSH
29776: LD_INT 1
29778: PPUSH
29779: CALL_OW 12
29783: PLUS
29784: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
29785: LD_ADDR_VAR 0 7
29789: PUSH
29790: LD_VAR 0 5
29794: PUSH
29795: LD_INT 1
29797: NEG
29798: PPUSH
29799: LD_INT 1
29801: PPUSH
29802: CALL_OW 12
29806: PLUS
29807: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29808: LD_VAR 0 6
29812: PPUSH
29813: LD_VAR 0 7
29817: PPUSH
29818: CALL_OW 488
29822: NOT
29823: IFFALSE 29845
// begin _x := x ;
29825: LD_ADDR_VAR 0 6
29829: PUSH
29830: LD_VAR 0 4
29834: ST_TO_ADDR
// _y := y ;
29835: LD_ADDR_VAR 0 7
29839: PUSH
29840: LD_VAR 0 5
29844: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
29845: LD_ADDR_VAR 0 3
29849: PUSH
29850: LD_INT 1
29852: PPUSH
29853: LD_VAR 0 14
29857: PPUSH
29858: CALL_OW 12
29862: ST_TO_ADDR
// case i of 1 :
29863: LD_VAR 0 3
29867: PUSH
29868: LD_INT 1
29870: DOUBLE
29871: EQUAL
29872: IFTRUE 29876
29874: GO 29893
29876: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
29877: LD_VAR 0 1
29881: PPUSH
29882: LD_VAR 0 10
29886: PPUSH
29887: CALL_OW 115
29891: GO 29954
29893: LD_INT 2
29895: DOUBLE
29896: EQUAL
29897: IFTRUE 29901
29899: GO 29923
29901: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
29902: LD_VAR 0 1
29906: PPUSH
29907: LD_VAR 0 6
29911: PPUSH
29912: LD_VAR 0 7
29916: PPUSH
29917: CALL_OW 153
29921: GO 29954
29923: LD_INT 3
29925: DOUBLE
29926: EQUAL
29927: IFTRUE 29931
29929: GO 29953
29931: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
29932: LD_VAR 0 1
29936: PPUSH
29937: LD_VAR 0 6
29941: PPUSH
29942: LD_VAR 0 7
29946: PPUSH
29947: CALL_OW 154
29951: GO 29954
29953: POP
// end ;
29954: LD_VAR 0 2
29958: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
29959: LD_INT 0
29961: PPUSH
29962: PPUSH
29963: PPUSH
29964: PPUSH
29965: PPUSH
29966: PPUSH
// if not unit or not building then
29967: LD_VAR 0 1
29971: NOT
29972: IFTRUE 29981
29974: PUSH
29975: LD_VAR 0 2
29979: NOT
29980: OR
29981: IFFALSE 29985
// exit ;
29983: GO 30143
// x := GetX ( building ) ;
29985: LD_ADDR_VAR 0 5
29989: PUSH
29990: LD_VAR 0 2
29994: PPUSH
29995: CALL_OW 250
29999: ST_TO_ADDR
// y := GetY ( building ) ;
30000: LD_ADDR_VAR 0 6
30004: PUSH
30005: LD_VAR 0 2
30009: PPUSH
30010: CALL_OW 251
30014: ST_TO_ADDR
// for i := 0 to 5 do
30015: LD_ADDR_VAR 0 4
30019: PUSH
30020: DOUBLE
30021: LD_INT 0
30023: DEC
30024: ST_TO_ADDR
30025: LD_INT 5
30027: PUSH
30028: FOR_TO
30029: IFFALSE 30141
// begin _x := ShiftX ( x , i , 3 ) ;
30031: LD_ADDR_VAR 0 7
30035: PUSH
30036: LD_VAR 0 5
30040: PPUSH
30041: LD_VAR 0 4
30045: PPUSH
30046: LD_INT 3
30048: PPUSH
30049: CALL_OW 272
30053: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
30054: LD_ADDR_VAR 0 8
30058: PUSH
30059: LD_VAR 0 6
30063: PPUSH
30064: LD_VAR 0 4
30068: PPUSH
30069: LD_INT 3
30071: PPUSH
30072: CALL_OW 273
30076: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30077: LD_VAR 0 7
30081: PPUSH
30082: LD_VAR 0 8
30086: PPUSH
30087: CALL_OW 488
30091: NOT
30092: IFFALSE 30096
// continue ;
30094: GO 30028
// if HexInfo ( _x , _y ) = 0 then
30096: LD_VAR 0 7
30100: PPUSH
30101: LD_VAR 0 8
30105: PPUSH
30106: CALL_OW 428
30110: PUSH
30111: LD_INT 0
30113: EQUAL
30114: IFFALSE 30139
// begin ComMoveXY ( unit , _x , _y ) ;
30116: LD_VAR 0 1
30120: PPUSH
30121: LD_VAR 0 7
30125: PPUSH
30126: LD_VAR 0 8
30130: PPUSH
30131: CALL_OW 111
// exit ;
30135: POP
30136: POP
30137: GO 30143
// end ; end ;
30139: GO 30028
30141: POP
30142: POP
// end ;
30143: LD_VAR 0 3
30147: RET
// export function ScanBase ( side , base_area ) ; begin
30148: LD_INT 0
30150: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
30151: LD_ADDR_VAR 0 3
30155: PUSH
30156: LD_VAR 0 2
30160: PPUSH
30161: LD_INT 81
30163: PUSH
30164: LD_VAR 0 1
30168: PUSH
30169: EMPTY
30170: LIST
30171: LIST
30172: PPUSH
30173: CALL_OW 70
30177: ST_TO_ADDR
// end ;
30178: LD_VAR 0 3
30182: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
30183: LD_INT 0
30185: PPUSH
30186: PPUSH
30187: PPUSH
30188: PPUSH
// result := false ;
30189: LD_ADDR_VAR 0 2
30193: PUSH
30194: LD_INT 0
30196: ST_TO_ADDR
// side := GetSide ( unit ) ;
30197: LD_ADDR_VAR 0 3
30201: PUSH
30202: LD_VAR 0 1
30206: PPUSH
30207: CALL_OW 255
30211: ST_TO_ADDR
// nat := GetNation ( unit ) ;
30212: LD_ADDR_VAR 0 4
30216: PUSH
30217: LD_VAR 0 1
30221: PPUSH
30222: CALL_OW 248
30226: ST_TO_ADDR
// case nat of 1 :
30227: LD_VAR 0 4
30231: PUSH
30232: LD_INT 1
30234: DOUBLE
30235: EQUAL
30236: IFTRUE 30240
30238: GO 30251
30240: POP
// tech := tech_lassight ; 2 :
30241: LD_ADDR_VAR 0 5
30245: PUSH
30246: LD_INT 12
30248: ST_TO_ADDR
30249: GO 30290
30251: LD_INT 2
30253: DOUBLE
30254: EQUAL
30255: IFTRUE 30259
30257: GO 30270
30259: POP
// tech := tech_mortar ; 3 :
30260: LD_ADDR_VAR 0 5
30264: PUSH
30265: LD_INT 41
30267: ST_TO_ADDR
30268: GO 30290
30270: LD_INT 3
30272: DOUBLE
30273: EQUAL
30274: IFTRUE 30278
30276: GO 30289
30278: POP
// tech := tech_bazooka ; end ;
30279: LD_ADDR_VAR 0 5
30283: PUSH
30284: LD_INT 44
30286: ST_TO_ADDR
30287: GO 30290
30289: POP
// if Researched ( side , tech ) then
30290: LD_VAR 0 3
30294: PPUSH
30295: LD_VAR 0 5
30299: PPUSH
30300: CALL_OW 325
30304: IFFALSE 30331
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
30306: LD_ADDR_VAR 0 2
30310: PUSH
30311: LD_INT 5
30313: PUSH
30314: LD_INT 8
30316: PUSH
30317: LD_INT 9
30319: PUSH
30320: EMPTY
30321: LIST
30322: LIST
30323: LIST
30324: PUSH
30325: LD_VAR 0 4
30329: ARRAY
30330: ST_TO_ADDR
// end ;
30331: LD_VAR 0 2
30335: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
30336: LD_INT 0
30338: PPUSH
30339: PPUSH
30340: PPUSH
// if not mines then
30341: LD_VAR 0 2
30345: NOT
30346: IFFALSE 30350
// exit ;
30348: GO 30494
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30350: LD_ADDR_VAR 0 5
30354: PUSH
30355: LD_INT 81
30357: PUSH
30358: LD_VAR 0 1
30362: PUSH
30363: EMPTY
30364: LIST
30365: LIST
30366: PUSH
30367: LD_INT 3
30369: PUSH
30370: LD_INT 21
30372: PUSH
30373: LD_INT 3
30375: PUSH
30376: EMPTY
30377: LIST
30378: LIST
30379: PUSH
30380: EMPTY
30381: LIST
30382: LIST
30383: PUSH
30384: EMPTY
30385: LIST
30386: LIST
30387: PPUSH
30388: CALL_OW 69
30392: ST_TO_ADDR
// for i in mines do
30393: LD_ADDR_VAR 0 4
30397: PUSH
30398: LD_VAR 0 2
30402: PUSH
30403: FOR_IN
30404: IFFALSE 30492
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
30406: LD_VAR 0 4
30410: PUSH
30411: LD_INT 1
30413: ARRAY
30414: PPUSH
30415: LD_VAR 0 4
30419: PUSH
30420: LD_INT 2
30422: ARRAY
30423: PPUSH
30424: CALL_OW 458
30428: NOT
30429: IFFALSE 30433
// continue ;
30431: GO 30403
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
30433: LD_VAR 0 4
30437: PUSH
30438: LD_INT 1
30440: ARRAY
30441: PPUSH
30442: LD_VAR 0 4
30446: PUSH
30447: LD_INT 2
30449: ARRAY
30450: PPUSH
30451: CALL_OW 428
30455: PUSH
30456: LD_VAR 0 5
30460: IN
30461: IFFALSE 30490
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
30463: LD_VAR 0 4
30467: PUSH
30468: LD_INT 1
30470: ARRAY
30471: PPUSH
30472: LD_VAR 0 4
30476: PUSH
30477: LD_INT 2
30479: ARRAY
30480: PPUSH
30481: LD_VAR 0 1
30485: PPUSH
30486: CALL_OW 456
// end ;
30490: GO 30403
30492: POP
30493: POP
// end ;
30494: LD_VAR 0 3
30498: RET
// export function Count ( array ) ; begin
30499: LD_INT 0
30501: PPUSH
// result := array + 0 ;
30502: LD_ADDR_VAR 0 2
30506: PUSH
30507: LD_VAR 0 1
30511: PUSH
30512: LD_INT 0
30514: PLUS
30515: ST_TO_ADDR
// end ;
30516: LD_VAR 0 2
30520: RET
// export function IsEmpty ( building ) ; begin
30521: LD_INT 0
30523: PPUSH
// if not building then
30524: LD_VAR 0 1
30528: NOT
30529: IFFALSE 30533
// exit ;
30531: GO 30576
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
30533: LD_ADDR_VAR 0 2
30537: PUSH
30538: LD_VAR 0 1
30542: PUSH
30543: LD_INT 22
30545: PUSH
30546: LD_VAR 0 1
30550: PPUSH
30551: CALL_OW 255
30555: PUSH
30556: EMPTY
30557: LIST
30558: LIST
30559: PUSH
30560: LD_INT 58
30562: PUSH
30563: EMPTY
30564: LIST
30565: PUSH
30566: EMPTY
30567: LIST
30568: LIST
30569: PPUSH
30570: CALL_OW 69
30574: IN
30575: ST_TO_ADDR
// end ;
30576: LD_VAR 0 2
30580: RET
// export function IsNotFull ( building ) ; var places ; begin
30581: LD_INT 0
30583: PPUSH
30584: PPUSH
// if not building then
30585: LD_VAR 0 1
30589: NOT
30590: IFFALSE 30594
// exit ;
30592: GO 30622
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
30594: LD_ADDR_VAR 0 2
30598: PUSH
30599: LD_VAR 0 1
30603: PPUSH
30604: LD_INT 3
30606: PUSH
30607: LD_INT 62
30609: PUSH
30610: EMPTY
30611: LIST
30612: PUSH
30613: EMPTY
30614: LIST
30615: LIST
30616: PPUSH
30617: CALL_OW 72
30621: ST_TO_ADDR
// end ;
30622: LD_VAR 0 2
30626: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
30627: LD_INT 0
30629: PPUSH
30630: PPUSH
30631: PPUSH
30632: PPUSH
// tmp := [ ] ;
30633: LD_ADDR_VAR 0 3
30637: PUSH
30638: EMPTY
30639: ST_TO_ADDR
// list := [ ] ;
30640: LD_ADDR_VAR 0 5
30644: PUSH
30645: EMPTY
30646: ST_TO_ADDR
// for i = 16 to 25 do
30647: LD_ADDR_VAR 0 4
30651: PUSH
30652: DOUBLE
30653: LD_INT 16
30655: DEC
30656: ST_TO_ADDR
30657: LD_INT 25
30659: PUSH
30660: FOR_TO
30661: IFFALSE 30734
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
30663: LD_ADDR_VAR 0 3
30667: PUSH
30668: LD_VAR 0 3
30672: PUSH
30673: LD_INT 22
30675: PUSH
30676: LD_VAR 0 1
30680: PPUSH
30681: CALL_OW 255
30685: PUSH
30686: EMPTY
30687: LIST
30688: LIST
30689: PUSH
30690: LD_INT 91
30692: PUSH
30693: LD_VAR 0 1
30697: PUSH
30698: LD_INT 6
30700: PUSH
30701: EMPTY
30702: LIST
30703: LIST
30704: LIST
30705: PUSH
30706: LD_INT 30
30708: PUSH
30709: LD_VAR 0 4
30713: PUSH
30714: EMPTY
30715: LIST
30716: LIST
30717: PUSH
30718: EMPTY
30719: LIST
30720: LIST
30721: LIST
30722: PUSH
30723: EMPTY
30724: LIST
30725: PPUSH
30726: CALL_OW 69
30730: ADD
30731: ST_TO_ADDR
30732: GO 30660
30734: POP
30735: POP
// for i = 1 to tmp do
30736: LD_ADDR_VAR 0 4
30740: PUSH
30741: DOUBLE
30742: LD_INT 1
30744: DEC
30745: ST_TO_ADDR
30746: LD_VAR 0 3
30750: PUSH
30751: FOR_TO
30752: IFFALSE 30840
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
30754: LD_ADDR_VAR 0 5
30758: PUSH
30759: LD_VAR 0 5
30763: PUSH
30764: LD_VAR 0 3
30768: PUSH
30769: LD_VAR 0 4
30773: ARRAY
30774: PPUSH
30775: CALL_OW 266
30779: PUSH
30780: LD_VAR 0 3
30784: PUSH
30785: LD_VAR 0 4
30789: ARRAY
30790: PPUSH
30791: CALL_OW 250
30795: PUSH
30796: LD_VAR 0 3
30800: PUSH
30801: LD_VAR 0 4
30805: ARRAY
30806: PPUSH
30807: CALL_OW 251
30811: PUSH
30812: LD_VAR 0 3
30816: PUSH
30817: LD_VAR 0 4
30821: ARRAY
30822: PPUSH
30823: CALL_OW 254
30827: PUSH
30828: EMPTY
30829: LIST
30830: LIST
30831: LIST
30832: LIST
30833: PUSH
30834: EMPTY
30835: LIST
30836: ADD
30837: ST_TO_ADDR
30838: GO 30751
30840: POP
30841: POP
// result := list ;
30842: LD_ADDR_VAR 0 2
30846: PUSH
30847: LD_VAR 0 5
30851: ST_TO_ADDR
// end ;
30852: LD_VAR 0 2
30856: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
30857: LD_INT 0
30859: PPUSH
30860: PPUSH
30861: PPUSH
30862: PPUSH
30863: PPUSH
30864: PPUSH
30865: PPUSH
// if not factory then
30866: LD_VAR 0 1
30870: NOT
30871: IFFALSE 30875
// exit ;
30873: GO 31478
// if control = control_apeman then
30875: LD_VAR 0 4
30879: PUSH
30880: LD_INT 5
30882: EQUAL
30883: IFFALSE 30992
// begin tmp := UnitsInside ( factory ) ;
30885: LD_ADDR_VAR 0 8
30889: PUSH
30890: LD_VAR 0 1
30894: PPUSH
30895: CALL_OW 313
30899: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
30900: LD_VAR 0 8
30904: PPUSH
30905: LD_INT 25
30907: PUSH
30908: LD_INT 12
30910: PUSH
30911: EMPTY
30912: LIST
30913: LIST
30914: PPUSH
30915: CALL_OW 72
30919: NOT
30920: IFFALSE 30930
// control := control_manual ;
30922: LD_ADDR_VAR 0 4
30926: PUSH
30927: LD_INT 1
30929: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
30930: LD_ADDR_VAR 0 8
30934: PUSH
30935: LD_VAR 0 1
30939: PPUSH
30940: CALL 30627 0 1
30944: ST_TO_ADDR
// if tmp then
30945: LD_VAR 0 8
30949: IFFALSE 30992
// begin for i in tmp do
30951: LD_ADDR_VAR 0 7
30955: PUSH
30956: LD_VAR 0 8
30960: PUSH
30961: FOR_IN
30962: IFFALSE 30990
// if i [ 1 ] = b_ext_radio then
30964: LD_VAR 0 7
30968: PUSH
30969: LD_INT 1
30971: ARRAY
30972: PUSH
30973: LD_INT 22
30975: EQUAL
30976: IFFALSE 30988
// begin control := control_remote ;
30978: LD_ADDR_VAR 0 4
30982: PUSH
30983: LD_INT 2
30985: ST_TO_ADDR
// break ;
30986: GO 30990
// end ;
30988: GO 30961
30990: POP
30991: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30992: LD_VAR 0 1
30996: PPUSH
30997: LD_VAR 0 2
31001: PPUSH
31002: LD_VAR 0 3
31006: PPUSH
31007: LD_VAR 0 4
31011: PPUSH
31012: LD_VAR 0 5
31016: PPUSH
31017: CALL_OW 448
31021: IFFALSE 31056
// begin result := [ chassis , engine , control , weapon ] ;
31023: LD_ADDR_VAR 0 6
31027: PUSH
31028: LD_VAR 0 2
31032: PUSH
31033: LD_VAR 0 3
31037: PUSH
31038: LD_VAR 0 4
31042: PUSH
31043: LD_VAR 0 5
31047: PUSH
31048: EMPTY
31049: LIST
31050: LIST
31051: LIST
31052: LIST
31053: ST_TO_ADDR
// exit ;
31054: GO 31478
// end ; _chassis := AvailableChassisList ( factory ) ;
31056: LD_ADDR_VAR 0 9
31060: PUSH
31061: LD_VAR 0 1
31065: PPUSH
31066: CALL_OW 475
31070: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
31071: LD_ADDR_VAR 0 11
31075: PUSH
31076: LD_VAR 0 1
31080: PPUSH
31081: CALL_OW 476
31085: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
31086: LD_ADDR_VAR 0 12
31090: PUSH
31091: LD_VAR 0 1
31095: PPUSH
31096: CALL_OW 477
31100: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
31101: LD_ADDR_VAR 0 10
31105: PUSH
31106: LD_VAR 0 1
31110: PPUSH
31111: CALL_OW 478
31115: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
31116: LD_VAR 0 9
31120: NOT
31121: IFTRUE 31130
31123: PUSH
31124: LD_VAR 0 11
31128: NOT
31129: OR
31130: IFTRUE 31139
31132: PUSH
31133: LD_VAR 0 12
31137: NOT
31138: OR
31139: IFTRUE 31148
31141: PUSH
31142: LD_VAR 0 10
31146: NOT
31147: OR
31148: IFFALSE 31183
// begin result := [ chassis , engine , control , weapon ] ;
31150: LD_ADDR_VAR 0 6
31154: PUSH
31155: LD_VAR 0 2
31159: PUSH
31160: LD_VAR 0 3
31164: PUSH
31165: LD_VAR 0 4
31169: PUSH
31170: LD_VAR 0 5
31174: PUSH
31175: EMPTY
31176: LIST
31177: LIST
31178: LIST
31179: LIST
31180: ST_TO_ADDR
// exit ;
31181: GO 31478
// end ; if not chassis in _chassis then
31183: LD_VAR 0 2
31187: PUSH
31188: LD_VAR 0 9
31192: IN
31193: NOT
31194: IFFALSE 31220
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
31196: LD_ADDR_VAR 0 2
31200: PUSH
31201: LD_VAR 0 9
31205: PUSH
31206: LD_INT 1
31208: PPUSH
31209: LD_VAR 0 9
31213: PPUSH
31214: CALL_OW 12
31218: ARRAY
31219: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
31220: LD_VAR 0 2
31224: PPUSH
31225: LD_VAR 0 3
31229: PPUSH
31230: CALL 31483 0 2
31234: NOT
31235: IFFALSE 31296
// repeat engine := _engine [ 1 ] ;
31237: LD_ADDR_VAR 0 3
31241: PUSH
31242: LD_VAR 0 11
31246: PUSH
31247: LD_INT 1
31249: ARRAY
31250: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
31251: LD_ADDR_VAR 0 11
31255: PUSH
31256: LD_VAR 0 11
31260: PPUSH
31261: LD_INT 1
31263: PPUSH
31264: CALL_OW 3
31268: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
31269: LD_VAR 0 2
31273: PPUSH
31274: LD_VAR 0 3
31278: PPUSH
31279: CALL 31483 0 2
31283: IFTRUE 31294
31285: PUSH
31286: LD_VAR 0 11
31290: PUSH
31291: EMPTY
31292: EQUAL
31293: OR
31294: IFFALSE 31237
// if not control in _control then
31296: LD_VAR 0 4
31300: PUSH
31301: LD_VAR 0 12
31305: IN
31306: NOT
31307: IFFALSE 31333
// control := _control [ rand ( 1 , _control ) ] ;
31309: LD_ADDR_VAR 0 4
31313: PUSH
31314: LD_VAR 0 12
31318: PUSH
31319: LD_INT 1
31321: PPUSH
31322: LD_VAR 0 12
31326: PPUSH
31327: CALL_OW 12
31331: ARRAY
31332: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
31333: LD_VAR 0 2
31337: PPUSH
31338: LD_VAR 0 5
31342: PPUSH
31343: CALL 31705 0 2
31347: NOT
31348: IFFALSE 31409
// repeat weapon := _weapon [ 1 ] ;
31350: LD_ADDR_VAR 0 5
31354: PUSH
31355: LD_VAR 0 10
31359: PUSH
31360: LD_INT 1
31362: ARRAY
31363: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
31364: LD_ADDR_VAR 0 10
31368: PUSH
31369: LD_VAR 0 10
31373: PPUSH
31374: LD_INT 1
31376: PPUSH
31377: CALL_OW 3
31381: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
31382: LD_VAR 0 2
31386: PPUSH
31387: LD_VAR 0 5
31391: PPUSH
31392: CALL 31705 0 2
31396: IFTRUE 31407
31398: PUSH
31399: LD_VAR 0 10
31403: PUSH
31404: EMPTY
31405: EQUAL
31406: OR
31407: IFFALSE 31350
// result := [ ] ;
31409: LD_ADDR_VAR 0 6
31413: PUSH
31414: EMPTY
31415: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31416: LD_VAR 0 1
31420: PPUSH
31421: LD_VAR 0 2
31425: PPUSH
31426: LD_VAR 0 3
31430: PPUSH
31431: LD_VAR 0 4
31435: PPUSH
31436: LD_VAR 0 5
31440: PPUSH
31441: CALL_OW 448
31445: IFFALSE 31478
// result := [ chassis , engine , control , weapon ] ;
31447: LD_ADDR_VAR 0 6
31451: PUSH
31452: LD_VAR 0 2
31456: PUSH
31457: LD_VAR 0 3
31461: PUSH
31462: LD_VAR 0 4
31466: PUSH
31467: LD_VAR 0 5
31471: PUSH
31472: EMPTY
31473: LIST
31474: LIST
31475: LIST
31476: LIST
31477: ST_TO_ADDR
// end ;
31478: LD_VAR 0 6
31482: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
31483: LD_INT 0
31485: PPUSH
// if not chassis or not engine then
31486: LD_VAR 0 1
31490: NOT
31491: IFTRUE 31500
31493: PUSH
31494: LD_VAR 0 2
31498: NOT
31499: OR
31500: IFFALSE 31504
// exit ;
31502: GO 31700
// case engine of engine_solar :
31504: LD_VAR 0 2
31508: PUSH
31509: LD_INT 2
31511: DOUBLE
31512: EQUAL
31513: IFTRUE 31517
31515: GO 31555
31517: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
31518: LD_ADDR_VAR 0 3
31522: PUSH
31523: LD_INT 11
31525: PUSH
31526: LD_INT 12
31528: PUSH
31529: LD_INT 13
31531: PUSH
31532: LD_INT 14
31534: PUSH
31535: LD_INT 1
31537: PUSH
31538: LD_INT 2
31540: PUSH
31541: LD_INT 3
31543: PUSH
31544: EMPTY
31545: LIST
31546: LIST
31547: LIST
31548: LIST
31549: LIST
31550: LIST
31551: LIST
31552: ST_TO_ADDR
31553: GO 31684
31555: LD_INT 1
31557: DOUBLE
31558: EQUAL
31559: IFTRUE 31563
31561: GO 31625
31563: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
31564: LD_ADDR_VAR 0 3
31568: PUSH
31569: LD_INT 11
31571: PUSH
31572: LD_INT 12
31574: PUSH
31575: LD_INT 13
31577: PUSH
31578: LD_INT 14
31580: PUSH
31581: LD_INT 1
31583: PUSH
31584: LD_INT 2
31586: PUSH
31587: LD_INT 3
31589: PUSH
31590: LD_INT 4
31592: PUSH
31593: LD_INT 5
31595: PUSH
31596: LD_INT 21
31598: PUSH
31599: LD_INT 23
31601: PUSH
31602: LD_INT 22
31604: PUSH
31605: LD_INT 24
31607: PUSH
31608: EMPTY
31609: LIST
31610: LIST
31611: LIST
31612: LIST
31613: LIST
31614: LIST
31615: LIST
31616: LIST
31617: LIST
31618: LIST
31619: LIST
31620: LIST
31621: LIST
31622: ST_TO_ADDR
31623: GO 31684
31625: LD_INT 3
31627: DOUBLE
31628: EQUAL
31629: IFTRUE 31633
31631: GO 31683
31633: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31634: LD_ADDR_VAR 0 3
31638: PUSH
31639: LD_INT 13
31641: PUSH
31642: LD_INT 14
31644: PUSH
31645: LD_INT 2
31647: PUSH
31648: LD_INT 3
31650: PUSH
31651: LD_INT 4
31653: PUSH
31654: LD_INT 5
31656: PUSH
31657: LD_INT 21
31659: PUSH
31660: LD_INT 22
31662: PUSH
31663: LD_INT 23
31665: PUSH
31666: LD_INT 24
31668: PUSH
31669: EMPTY
31670: LIST
31671: LIST
31672: LIST
31673: LIST
31674: LIST
31675: LIST
31676: LIST
31677: LIST
31678: LIST
31679: LIST
31680: ST_TO_ADDR
31681: GO 31684
31683: POP
// result := ( chassis in result ) ;
31684: LD_ADDR_VAR 0 3
31688: PUSH
31689: LD_VAR 0 1
31693: PUSH
31694: LD_VAR 0 3
31698: IN
31699: ST_TO_ADDR
// end ;
31700: LD_VAR 0 3
31704: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
31705: LD_INT 0
31707: PPUSH
// if not chassis or not weapon then
31708: LD_VAR 0 1
31712: NOT
31713: IFTRUE 31722
31715: PUSH
31716: LD_VAR 0 2
31720: NOT
31721: OR
31722: IFFALSE 31726
// exit ;
31724: GO 32786
// case weapon of us_machine_gun :
31726: LD_VAR 0 2
31730: PUSH
31731: LD_INT 2
31733: DOUBLE
31734: EQUAL
31735: IFTRUE 31739
31737: GO 31769
31739: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
31740: LD_ADDR_VAR 0 3
31744: PUSH
31745: LD_INT 1
31747: PUSH
31748: LD_INT 2
31750: PUSH
31751: LD_INT 3
31753: PUSH
31754: LD_INT 4
31756: PUSH
31757: LD_INT 5
31759: PUSH
31760: EMPTY
31761: LIST
31762: LIST
31763: LIST
31764: LIST
31765: LIST
31766: ST_TO_ADDR
31767: GO 32770
31769: LD_INT 3
31771: DOUBLE
31772: EQUAL
31773: IFTRUE 31777
31775: GO 31807
31777: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
31778: LD_ADDR_VAR 0 3
31782: PUSH
31783: LD_INT 1
31785: PUSH
31786: LD_INT 2
31788: PUSH
31789: LD_INT 3
31791: PUSH
31792: LD_INT 4
31794: PUSH
31795: LD_INT 5
31797: PUSH
31798: EMPTY
31799: LIST
31800: LIST
31801: LIST
31802: LIST
31803: LIST
31804: ST_TO_ADDR
31805: GO 32770
31807: LD_INT 11
31809: DOUBLE
31810: EQUAL
31811: IFTRUE 31815
31813: GO 31845
31815: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
31816: LD_ADDR_VAR 0 3
31820: PUSH
31821: LD_INT 1
31823: PUSH
31824: LD_INT 2
31826: PUSH
31827: LD_INT 3
31829: PUSH
31830: LD_INT 4
31832: PUSH
31833: LD_INT 5
31835: PUSH
31836: EMPTY
31837: LIST
31838: LIST
31839: LIST
31840: LIST
31841: LIST
31842: ST_TO_ADDR
31843: GO 32770
31845: LD_INT 4
31847: DOUBLE
31848: EQUAL
31849: IFTRUE 31853
31851: GO 31879
31853: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
31854: LD_ADDR_VAR 0 3
31858: PUSH
31859: LD_INT 2
31861: PUSH
31862: LD_INT 3
31864: PUSH
31865: LD_INT 4
31867: PUSH
31868: LD_INT 5
31870: PUSH
31871: EMPTY
31872: LIST
31873: LIST
31874: LIST
31875: LIST
31876: ST_TO_ADDR
31877: GO 32770
31879: LD_INT 5
31881: DOUBLE
31882: EQUAL
31883: IFTRUE 31887
31885: GO 31913
31887: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
31888: LD_ADDR_VAR 0 3
31892: PUSH
31893: LD_INT 2
31895: PUSH
31896: LD_INT 3
31898: PUSH
31899: LD_INT 4
31901: PUSH
31902: LD_INT 5
31904: PUSH
31905: EMPTY
31906: LIST
31907: LIST
31908: LIST
31909: LIST
31910: ST_TO_ADDR
31911: GO 32770
31913: LD_INT 9
31915: DOUBLE
31916: EQUAL
31917: IFTRUE 31921
31919: GO 31947
31921: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
31922: LD_ADDR_VAR 0 3
31926: PUSH
31927: LD_INT 2
31929: PUSH
31930: LD_INT 3
31932: PUSH
31933: LD_INT 4
31935: PUSH
31936: LD_INT 5
31938: PUSH
31939: EMPTY
31940: LIST
31941: LIST
31942: LIST
31943: LIST
31944: ST_TO_ADDR
31945: GO 32770
31947: LD_INT 7
31949: DOUBLE
31950: EQUAL
31951: IFTRUE 31955
31953: GO 31981
31955: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
31956: LD_ADDR_VAR 0 3
31960: PUSH
31961: LD_INT 2
31963: PUSH
31964: LD_INT 3
31966: PUSH
31967: LD_INT 4
31969: PUSH
31970: LD_INT 5
31972: PUSH
31973: EMPTY
31974: LIST
31975: LIST
31976: LIST
31977: LIST
31978: ST_TO_ADDR
31979: GO 32770
31981: LD_INT 12
31983: DOUBLE
31984: EQUAL
31985: IFTRUE 31989
31987: GO 32015
31989: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
31990: LD_ADDR_VAR 0 3
31994: PUSH
31995: LD_INT 2
31997: PUSH
31998: LD_INT 3
32000: PUSH
32001: LD_INT 4
32003: PUSH
32004: LD_INT 5
32006: PUSH
32007: EMPTY
32008: LIST
32009: LIST
32010: LIST
32011: LIST
32012: ST_TO_ADDR
32013: GO 32770
32015: LD_INT 13
32017: DOUBLE
32018: EQUAL
32019: IFTRUE 32023
32021: GO 32049
32023: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
32024: LD_ADDR_VAR 0 3
32028: PUSH
32029: LD_INT 2
32031: PUSH
32032: LD_INT 3
32034: PUSH
32035: LD_INT 4
32037: PUSH
32038: LD_INT 5
32040: PUSH
32041: EMPTY
32042: LIST
32043: LIST
32044: LIST
32045: LIST
32046: ST_TO_ADDR
32047: GO 32770
32049: LD_INT 14
32051: DOUBLE
32052: EQUAL
32053: IFTRUE 32057
32055: GO 32075
32057: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
32058: LD_ADDR_VAR 0 3
32062: PUSH
32063: LD_INT 4
32065: PUSH
32066: LD_INT 5
32068: PUSH
32069: EMPTY
32070: LIST
32071: LIST
32072: ST_TO_ADDR
32073: GO 32770
32075: LD_INT 6
32077: DOUBLE
32078: EQUAL
32079: IFTRUE 32083
32081: GO 32101
32083: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
32084: LD_ADDR_VAR 0 3
32088: PUSH
32089: LD_INT 4
32091: PUSH
32092: LD_INT 5
32094: PUSH
32095: EMPTY
32096: LIST
32097: LIST
32098: ST_TO_ADDR
32099: GO 32770
32101: LD_INT 10
32103: DOUBLE
32104: EQUAL
32105: IFTRUE 32109
32107: GO 32127
32109: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
32110: LD_ADDR_VAR 0 3
32114: PUSH
32115: LD_INT 4
32117: PUSH
32118: LD_INT 5
32120: PUSH
32121: EMPTY
32122: LIST
32123: LIST
32124: ST_TO_ADDR
32125: GO 32770
32127: LD_INT 22
32129: DOUBLE
32130: EQUAL
32131: IFTRUE 32135
32133: GO 32161
32135: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
32136: LD_ADDR_VAR 0 3
32140: PUSH
32141: LD_INT 11
32143: PUSH
32144: LD_INT 12
32146: PUSH
32147: LD_INT 13
32149: PUSH
32150: LD_INT 14
32152: PUSH
32153: EMPTY
32154: LIST
32155: LIST
32156: LIST
32157: LIST
32158: ST_TO_ADDR
32159: GO 32770
32161: LD_INT 23
32163: DOUBLE
32164: EQUAL
32165: IFTRUE 32169
32167: GO 32195
32169: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
32170: LD_ADDR_VAR 0 3
32174: PUSH
32175: LD_INT 11
32177: PUSH
32178: LD_INT 12
32180: PUSH
32181: LD_INT 13
32183: PUSH
32184: LD_INT 14
32186: PUSH
32187: EMPTY
32188: LIST
32189: LIST
32190: LIST
32191: LIST
32192: ST_TO_ADDR
32193: GO 32770
32195: LD_INT 24
32197: DOUBLE
32198: EQUAL
32199: IFTRUE 32203
32201: GO 32229
32203: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
32204: LD_ADDR_VAR 0 3
32208: PUSH
32209: LD_INT 11
32211: PUSH
32212: LD_INT 12
32214: PUSH
32215: LD_INT 13
32217: PUSH
32218: LD_INT 14
32220: PUSH
32221: EMPTY
32222: LIST
32223: LIST
32224: LIST
32225: LIST
32226: ST_TO_ADDR
32227: GO 32770
32229: LD_INT 30
32231: DOUBLE
32232: EQUAL
32233: IFTRUE 32237
32235: GO 32263
32237: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
32238: LD_ADDR_VAR 0 3
32242: PUSH
32243: LD_INT 11
32245: PUSH
32246: LD_INT 12
32248: PUSH
32249: LD_INT 13
32251: PUSH
32252: LD_INT 14
32254: PUSH
32255: EMPTY
32256: LIST
32257: LIST
32258: LIST
32259: LIST
32260: ST_TO_ADDR
32261: GO 32770
32263: LD_INT 25
32265: DOUBLE
32266: EQUAL
32267: IFTRUE 32271
32269: GO 32289
32271: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
32272: LD_ADDR_VAR 0 3
32276: PUSH
32277: LD_INT 13
32279: PUSH
32280: LD_INT 14
32282: PUSH
32283: EMPTY
32284: LIST
32285: LIST
32286: ST_TO_ADDR
32287: GO 32770
32289: LD_INT 27
32291: DOUBLE
32292: EQUAL
32293: IFTRUE 32297
32295: GO 32315
32297: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
32298: LD_ADDR_VAR 0 3
32302: PUSH
32303: LD_INT 13
32305: PUSH
32306: LD_INT 14
32308: PUSH
32309: EMPTY
32310: LIST
32311: LIST
32312: ST_TO_ADDR
32313: GO 32770
32315: LD_INT 92
32317: DOUBLE
32318: EQUAL
32319: IFTRUE 32323
32321: GO 32349
32323: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
32324: LD_ADDR_VAR 0 3
32328: PUSH
32329: LD_INT 11
32331: PUSH
32332: LD_INT 12
32334: PUSH
32335: LD_INT 13
32337: PUSH
32338: LD_INT 14
32340: PUSH
32341: EMPTY
32342: LIST
32343: LIST
32344: LIST
32345: LIST
32346: ST_TO_ADDR
32347: GO 32770
32349: LD_INT 28
32351: DOUBLE
32352: EQUAL
32353: IFTRUE 32357
32355: GO 32375
32357: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
32358: LD_ADDR_VAR 0 3
32362: PUSH
32363: LD_INT 13
32365: PUSH
32366: LD_INT 14
32368: PUSH
32369: EMPTY
32370: LIST
32371: LIST
32372: ST_TO_ADDR
32373: GO 32770
32375: LD_INT 29
32377: DOUBLE
32378: EQUAL
32379: IFTRUE 32383
32381: GO 32401
32383: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
32384: LD_ADDR_VAR 0 3
32388: PUSH
32389: LD_INT 13
32391: PUSH
32392: LD_INT 14
32394: PUSH
32395: EMPTY
32396: LIST
32397: LIST
32398: ST_TO_ADDR
32399: GO 32770
32401: LD_INT 31
32403: DOUBLE
32404: EQUAL
32405: IFTRUE 32409
32407: GO 32427
32409: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
32410: LD_ADDR_VAR 0 3
32414: PUSH
32415: LD_INT 13
32417: PUSH
32418: LD_INT 14
32420: PUSH
32421: EMPTY
32422: LIST
32423: LIST
32424: ST_TO_ADDR
32425: GO 32770
32427: LD_INT 26
32429: DOUBLE
32430: EQUAL
32431: IFTRUE 32435
32433: GO 32453
32435: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
32436: LD_ADDR_VAR 0 3
32440: PUSH
32441: LD_INT 13
32443: PUSH
32444: LD_INT 14
32446: PUSH
32447: EMPTY
32448: LIST
32449: LIST
32450: ST_TO_ADDR
32451: GO 32770
32453: LD_INT 42
32455: DOUBLE
32456: EQUAL
32457: IFTRUE 32461
32459: GO 32487
32461: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
32462: LD_ADDR_VAR 0 3
32466: PUSH
32467: LD_INT 21
32469: PUSH
32470: LD_INT 22
32472: PUSH
32473: LD_INT 23
32475: PUSH
32476: LD_INT 24
32478: PUSH
32479: EMPTY
32480: LIST
32481: LIST
32482: LIST
32483: LIST
32484: ST_TO_ADDR
32485: GO 32770
32487: LD_INT 43
32489: DOUBLE
32490: EQUAL
32491: IFTRUE 32495
32493: GO 32521
32495: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
32496: LD_ADDR_VAR 0 3
32500: PUSH
32501: LD_INT 21
32503: PUSH
32504: LD_INT 22
32506: PUSH
32507: LD_INT 23
32509: PUSH
32510: LD_INT 24
32512: PUSH
32513: EMPTY
32514: LIST
32515: LIST
32516: LIST
32517: LIST
32518: ST_TO_ADDR
32519: GO 32770
32521: LD_INT 44
32523: DOUBLE
32524: EQUAL
32525: IFTRUE 32529
32527: GO 32555
32529: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
32530: LD_ADDR_VAR 0 3
32534: PUSH
32535: LD_INT 21
32537: PUSH
32538: LD_INT 22
32540: PUSH
32541: LD_INT 23
32543: PUSH
32544: LD_INT 24
32546: PUSH
32547: EMPTY
32548: LIST
32549: LIST
32550: LIST
32551: LIST
32552: ST_TO_ADDR
32553: GO 32770
32555: LD_INT 45
32557: DOUBLE
32558: EQUAL
32559: IFTRUE 32563
32561: GO 32589
32563: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
32564: LD_ADDR_VAR 0 3
32568: PUSH
32569: LD_INT 21
32571: PUSH
32572: LD_INT 22
32574: PUSH
32575: LD_INT 23
32577: PUSH
32578: LD_INT 24
32580: PUSH
32581: EMPTY
32582: LIST
32583: LIST
32584: LIST
32585: LIST
32586: ST_TO_ADDR
32587: GO 32770
32589: LD_INT 49
32591: DOUBLE
32592: EQUAL
32593: IFTRUE 32597
32595: GO 32623
32597: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
32598: LD_ADDR_VAR 0 3
32602: PUSH
32603: LD_INT 21
32605: PUSH
32606: LD_INT 22
32608: PUSH
32609: LD_INT 23
32611: PUSH
32612: LD_INT 24
32614: PUSH
32615: EMPTY
32616: LIST
32617: LIST
32618: LIST
32619: LIST
32620: ST_TO_ADDR
32621: GO 32770
32623: LD_INT 51
32625: DOUBLE
32626: EQUAL
32627: IFTRUE 32631
32629: GO 32657
32631: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
32632: LD_ADDR_VAR 0 3
32636: PUSH
32637: LD_INT 21
32639: PUSH
32640: LD_INT 22
32642: PUSH
32643: LD_INT 23
32645: PUSH
32646: LD_INT 24
32648: PUSH
32649: EMPTY
32650: LIST
32651: LIST
32652: LIST
32653: LIST
32654: ST_TO_ADDR
32655: GO 32770
32657: LD_INT 52
32659: DOUBLE
32660: EQUAL
32661: IFTRUE 32665
32663: GO 32691
32665: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
32666: LD_ADDR_VAR 0 3
32670: PUSH
32671: LD_INT 21
32673: PUSH
32674: LD_INT 22
32676: PUSH
32677: LD_INT 23
32679: PUSH
32680: LD_INT 24
32682: PUSH
32683: EMPTY
32684: LIST
32685: LIST
32686: LIST
32687: LIST
32688: ST_TO_ADDR
32689: GO 32770
32691: LD_INT 53
32693: DOUBLE
32694: EQUAL
32695: IFTRUE 32699
32697: GO 32717
32699: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
32700: LD_ADDR_VAR 0 3
32704: PUSH
32705: LD_INT 23
32707: PUSH
32708: LD_INT 24
32710: PUSH
32711: EMPTY
32712: LIST
32713: LIST
32714: ST_TO_ADDR
32715: GO 32770
32717: LD_INT 46
32719: DOUBLE
32720: EQUAL
32721: IFTRUE 32725
32723: GO 32743
32725: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
32726: LD_ADDR_VAR 0 3
32730: PUSH
32731: LD_INT 23
32733: PUSH
32734: LD_INT 24
32736: PUSH
32737: EMPTY
32738: LIST
32739: LIST
32740: ST_TO_ADDR
32741: GO 32770
32743: LD_INT 47
32745: DOUBLE
32746: EQUAL
32747: IFTRUE 32751
32749: GO 32769
32751: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32752: LD_ADDR_VAR 0 3
32756: PUSH
32757: LD_INT 23
32759: PUSH
32760: LD_INT 24
32762: PUSH
32763: EMPTY
32764: LIST
32765: LIST
32766: ST_TO_ADDR
32767: GO 32770
32769: POP
// result := ( chassis in result ) ;
32770: LD_ADDR_VAR 0 3
32774: PUSH
32775: LD_VAR 0 1
32779: PUSH
32780: LD_VAR 0 3
32784: IN
32785: ST_TO_ADDR
// end ;
32786: LD_VAR 0 3
32790: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
32791: LD_INT 0
32793: PPUSH
32794: PPUSH
32795: PPUSH
32796: PPUSH
32797: PPUSH
32798: PPUSH
32799: PPUSH
// result := array ;
32800: LD_ADDR_VAR 0 5
32804: PUSH
32805: LD_VAR 0 1
32809: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
32810: LD_VAR 0 1
32814: NOT
32815: IFTRUE 32824
32817: PUSH
32818: LD_VAR 0 2
32822: NOT
32823: OR
32824: IFTRUE 32833
32826: PUSH
32827: LD_VAR 0 3
32831: NOT
32832: OR
32833: IFTRUE 32847
32835: PUSH
32836: LD_VAR 0 2
32840: PUSH
32841: LD_VAR 0 1
32845: GREATER
32846: OR
32847: IFTRUE 32861
32849: PUSH
32850: LD_VAR 0 3
32854: PUSH
32855: LD_VAR 0 1
32859: GREATER
32860: OR
32861: IFFALSE 32865
// exit ;
32863: GO 33161
// if direction then
32865: LD_VAR 0 4
32869: IFFALSE 32933
// begin d := 1 ;
32871: LD_ADDR_VAR 0 9
32875: PUSH
32876: LD_INT 1
32878: ST_TO_ADDR
// if i_from > i_to then
32879: LD_VAR 0 2
32883: PUSH
32884: LD_VAR 0 3
32888: GREATER
32889: IFFALSE 32915
// length := ( array - i_from ) + i_to else
32891: LD_ADDR_VAR 0 11
32895: PUSH
32896: LD_VAR 0 1
32900: PUSH
32901: LD_VAR 0 2
32905: MINUS
32906: PUSH
32907: LD_VAR 0 3
32911: PLUS
32912: ST_TO_ADDR
32913: GO 32931
// length := i_to - i_from ;
32915: LD_ADDR_VAR 0 11
32919: PUSH
32920: LD_VAR 0 3
32924: PUSH
32925: LD_VAR 0 2
32929: MINUS
32930: ST_TO_ADDR
// end else
32931: GO 32994
// begin d := - 1 ;
32933: LD_ADDR_VAR 0 9
32937: PUSH
32938: LD_INT 1
32940: NEG
32941: ST_TO_ADDR
// if i_from > i_to then
32942: LD_VAR 0 2
32946: PUSH
32947: LD_VAR 0 3
32951: GREATER
32952: IFFALSE 32972
// length := i_from - i_to else
32954: LD_ADDR_VAR 0 11
32958: PUSH
32959: LD_VAR 0 2
32963: PUSH
32964: LD_VAR 0 3
32968: MINUS
32969: ST_TO_ADDR
32970: GO 32994
// length := ( array - i_to ) + i_from ;
32972: LD_ADDR_VAR 0 11
32976: PUSH
32977: LD_VAR 0 1
32981: PUSH
32982: LD_VAR 0 3
32986: MINUS
32987: PUSH
32988: LD_VAR 0 2
32992: PLUS
32993: ST_TO_ADDR
// end ; if not length then
32994: LD_VAR 0 11
32998: NOT
32999: IFFALSE 33003
// exit ;
33001: GO 33161
// tmp := array ;
33003: LD_ADDR_VAR 0 10
33007: PUSH
33008: LD_VAR 0 1
33012: ST_TO_ADDR
// for i = 1 to length do
33013: LD_ADDR_VAR 0 6
33017: PUSH
33018: DOUBLE
33019: LD_INT 1
33021: DEC
33022: ST_TO_ADDR
33023: LD_VAR 0 11
33027: PUSH
33028: FOR_TO
33029: IFFALSE 33149
// begin for j = 1 to array do
33031: LD_ADDR_VAR 0 7
33035: PUSH
33036: DOUBLE
33037: LD_INT 1
33039: DEC
33040: ST_TO_ADDR
33041: LD_VAR 0 1
33045: PUSH
33046: FOR_TO
33047: IFFALSE 33135
// begin k := j + d ;
33049: LD_ADDR_VAR 0 8
33053: PUSH
33054: LD_VAR 0 7
33058: PUSH
33059: LD_VAR 0 9
33063: PLUS
33064: ST_TO_ADDR
// if k > array then
33065: LD_VAR 0 8
33069: PUSH
33070: LD_VAR 0 1
33074: GREATER
33075: IFFALSE 33085
// k := 1 ;
33077: LD_ADDR_VAR 0 8
33081: PUSH
33082: LD_INT 1
33084: ST_TO_ADDR
// if not k then
33085: LD_VAR 0 8
33089: NOT
33090: IFFALSE 33102
// k := array ;
33092: LD_ADDR_VAR 0 8
33096: PUSH
33097: LD_VAR 0 1
33101: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
33102: LD_ADDR_VAR 0 10
33106: PUSH
33107: LD_VAR 0 10
33111: PPUSH
33112: LD_VAR 0 8
33116: PPUSH
33117: LD_VAR 0 1
33121: PUSH
33122: LD_VAR 0 7
33126: ARRAY
33127: PPUSH
33128: CALL_OW 1
33132: ST_TO_ADDR
// end ;
33133: GO 33046
33135: POP
33136: POP
// array := tmp ;
33137: LD_ADDR_VAR 0 1
33141: PUSH
33142: LD_VAR 0 10
33146: ST_TO_ADDR
// end ;
33147: GO 33028
33149: POP
33150: POP
// result := array ;
33151: LD_ADDR_VAR 0 5
33155: PUSH
33156: LD_VAR 0 1
33160: ST_TO_ADDR
// end ;
33161: LD_VAR 0 5
33165: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
33166: LD_INT 0
33168: PPUSH
33169: PPUSH
// result := 0 ;
33170: LD_ADDR_VAR 0 3
33174: PUSH
33175: LD_INT 0
33177: ST_TO_ADDR
// if not array or not value in array then
33178: LD_VAR 0 1
33182: NOT
33183: IFTRUE 33198
33185: PUSH
33186: LD_VAR 0 2
33190: PUSH
33191: LD_VAR 0 1
33195: IN
33196: NOT
33197: OR
33198: IFFALSE 33202
// exit ;
33200: GO 33256
// for i = 1 to array do
33202: LD_ADDR_VAR 0 4
33206: PUSH
33207: DOUBLE
33208: LD_INT 1
33210: DEC
33211: ST_TO_ADDR
33212: LD_VAR 0 1
33216: PUSH
33217: FOR_TO
33218: IFFALSE 33254
// if value = array [ i ] then
33220: LD_VAR 0 2
33224: PUSH
33225: LD_VAR 0 1
33229: PUSH
33230: LD_VAR 0 4
33234: ARRAY
33235: EQUAL
33236: IFFALSE 33252
// begin result := i ;
33238: LD_ADDR_VAR 0 3
33242: PUSH
33243: LD_VAR 0 4
33247: ST_TO_ADDR
// exit ;
33248: POP
33249: POP
33250: GO 33256
// end ;
33252: GO 33217
33254: POP
33255: POP
// end ;
33256: LD_VAR 0 3
33260: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
33261: LD_INT 0
33263: PPUSH
// vc_chassis := chassis ;
33264: LD_ADDR_OWVAR 37
33268: PUSH
33269: LD_VAR 0 1
33273: ST_TO_ADDR
// vc_engine := engine ;
33274: LD_ADDR_OWVAR 39
33278: PUSH
33279: LD_VAR 0 2
33283: ST_TO_ADDR
// vc_control := control ;
33284: LD_ADDR_OWVAR 38
33288: PUSH
33289: LD_VAR 0 3
33293: ST_TO_ADDR
// vc_weapon := weapon ;
33294: LD_ADDR_OWVAR 40
33298: PUSH
33299: LD_VAR 0 4
33303: ST_TO_ADDR
// vc_fuel_battery := fuel ;
33304: LD_ADDR_OWVAR 41
33308: PUSH
33309: LD_VAR 0 5
33313: ST_TO_ADDR
// end ;
33314: LD_VAR 0 6
33318: RET
// export function WantPlant ( unit ) ; var task ; begin
33319: LD_INT 0
33321: PPUSH
33322: PPUSH
// result := false ;
33323: LD_ADDR_VAR 0 2
33327: PUSH
33328: LD_INT 0
33330: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
33331: LD_ADDR_VAR 0 3
33335: PUSH
33336: LD_VAR 0 1
33340: PPUSH
33341: CALL_OW 437
33345: ST_TO_ADDR
// if task then
33346: LD_VAR 0 3
33350: IFFALSE 33378
// if task [ 1 ] [ 1 ] = p then
33352: LD_VAR 0 3
33356: PUSH
33357: LD_INT 1
33359: ARRAY
33360: PUSH
33361: LD_INT 1
33363: ARRAY
33364: PUSH
33365: LD_STRING p
33367: EQUAL
33368: IFFALSE 33378
// result := true ;
33370: LD_ADDR_VAR 0 2
33374: PUSH
33375: LD_INT 1
33377: ST_TO_ADDR
// end ;
33378: LD_VAR 0 2
33382: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
33383: LD_INT 0
33385: PPUSH
33386: PPUSH
33387: PPUSH
33388: PPUSH
// if pos < 1 then
33389: LD_VAR 0 2
33393: PUSH
33394: LD_INT 1
33396: LESS
33397: IFFALSE 33401
// exit ;
33399: GO 33704
// if pos = 1 then
33401: LD_VAR 0 2
33405: PUSH
33406: LD_INT 1
33408: EQUAL
33409: IFFALSE 33442
// result := Replace ( arr , pos [ 1 ] , value ) else
33411: LD_ADDR_VAR 0 4
33415: PUSH
33416: LD_VAR 0 1
33420: PPUSH
33421: LD_VAR 0 2
33425: PUSH
33426: LD_INT 1
33428: ARRAY
33429: PPUSH
33430: LD_VAR 0 3
33434: PPUSH
33435: CALL_OW 1
33439: ST_TO_ADDR
33440: GO 33704
// begin tmp := arr ;
33442: LD_ADDR_VAR 0 6
33446: PUSH
33447: LD_VAR 0 1
33451: ST_TO_ADDR
// s_arr := [ tmp ] ;
33452: LD_ADDR_VAR 0 7
33456: PUSH
33457: LD_VAR 0 6
33461: PUSH
33462: EMPTY
33463: LIST
33464: ST_TO_ADDR
// for i = 1 to pos - 1 do
33465: LD_ADDR_VAR 0 5
33469: PUSH
33470: DOUBLE
33471: LD_INT 1
33473: DEC
33474: ST_TO_ADDR
33475: LD_VAR 0 2
33479: PUSH
33480: LD_INT 1
33482: MINUS
33483: PUSH
33484: FOR_TO
33485: IFFALSE 33530
// begin tmp := tmp [ pos [ i ] ] ;
33487: LD_ADDR_VAR 0 6
33491: PUSH
33492: LD_VAR 0 6
33496: PUSH
33497: LD_VAR 0 2
33501: PUSH
33502: LD_VAR 0 5
33506: ARRAY
33507: ARRAY
33508: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
33509: LD_ADDR_VAR 0 7
33513: PUSH
33514: LD_VAR 0 7
33518: PUSH
33519: LD_VAR 0 6
33523: PUSH
33524: EMPTY
33525: LIST
33526: ADD
33527: ST_TO_ADDR
// end ;
33528: GO 33484
33530: POP
33531: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
33532: LD_ADDR_VAR 0 6
33536: PUSH
33537: LD_VAR 0 6
33541: PPUSH
33542: LD_VAR 0 2
33546: PUSH
33547: LD_VAR 0 2
33551: ARRAY
33552: PPUSH
33553: LD_VAR 0 3
33557: PPUSH
33558: CALL_OW 1
33562: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
33563: LD_ADDR_VAR 0 7
33567: PUSH
33568: LD_VAR 0 7
33572: PPUSH
33573: LD_VAR 0 7
33577: PPUSH
33578: LD_VAR 0 6
33582: PPUSH
33583: CALL_OW 1
33587: ST_TO_ADDR
// for i = s_arr downto 2 do
33588: LD_ADDR_VAR 0 5
33592: PUSH
33593: DOUBLE
33594: LD_VAR 0 7
33598: INC
33599: ST_TO_ADDR
33600: LD_INT 2
33602: PUSH
33603: FOR_DOWNTO
33604: IFFALSE 33688
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
33606: LD_ADDR_VAR 0 6
33610: PUSH
33611: LD_VAR 0 7
33615: PUSH
33616: LD_VAR 0 5
33620: PUSH
33621: LD_INT 1
33623: MINUS
33624: ARRAY
33625: PPUSH
33626: LD_VAR 0 2
33630: PUSH
33631: LD_VAR 0 5
33635: PUSH
33636: LD_INT 1
33638: MINUS
33639: ARRAY
33640: PPUSH
33641: LD_VAR 0 7
33645: PUSH
33646: LD_VAR 0 5
33650: ARRAY
33651: PPUSH
33652: CALL_OW 1
33656: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
33657: LD_ADDR_VAR 0 7
33661: PUSH
33662: LD_VAR 0 7
33666: PPUSH
33667: LD_VAR 0 5
33671: PUSH
33672: LD_INT 1
33674: MINUS
33675: PPUSH
33676: LD_VAR 0 6
33680: PPUSH
33681: CALL_OW 1
33685: ST_TO_ADDR
// end ;
33686: GO 33603
33688: POP
33689: POP
// result := s_arr [ 1 ] ;
33690: LD_ADDR_VAR 0 4
33694: PUSH
33695: LD_VAR 0 7
33699: PUSH
33700: LD_INT 1
33702: ARRAY
33703: ST_TO_ADDR
// end ; end ;
33704: LD_VAR 0 4
33708: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
33709: LD_INT 0
33711: PPUSH
33712: PPUSH
// if not list then
33713: LD_VAR 0 1
33717: NOT
33718: IFFALSE 33722
// exit ;
33720: GO 33813
// i := list [ pos1 ] ;
33722: LD_ADDR_VAR 0 5
33726: PUSH
33727: LD_VAR 0 1
33731: PUSH
33732: LD_VAR 0 2
33736: ARRAY
33737: ST_TO_ADDR
// if not i then
33738: LD_VAR 0 5
33742: NOT
33743: IFFALSE 33747
// exit ;
33745: GO 33813
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
33747: LD_ADDR_VAR 0 1
33751: PUSH
33752: LD_VAR 0 1
33756: PPUSH
33757: LD_VAR 0 2
33761: PPUSH
33762: LD_VAR 0 1
33766: PUSH
33767: LD_VAR 0 3
33771: ARRAY
33772: PPUSH
33773: CALL_OW 1
33777: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
33778: LD_ADDR_VAR 0 1
33782: PUSH
33783: LD_VAR 0 1
33787: PPUSH
33788: LD_VAR 0 3
33792: PPUSH
33793: LD_VAR 0 5
33797: PPUSH
33798: CALL_OW 1
33802: ST_TO_ADDR
// result := list ;
33803: LD_ADDR_VAR 0 4
33807: PUSH
33808: LD_VAR 0 1
33812: ST_TO_ADDR
// end ;
33813: LD_VAR 0 4
33817: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
33818: LD_INT 0
33820: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
33821: LD_ADDR_VAR 0 5
33825: PUSH
33826: LD_VAR 0 1
33830: PPUSH
33831: CALL_OW 250
33835: PPUSH
33836: LD_VAR 0 1
33840: PPUSH
33841: CALL_OW 251
33845: PPUSH
33846: LD_VAR 0 2
33850: PPUSH
33851: LD_VAR 0 3
33855: PPUSH
33856: LD_VAR 0 4
33860: PPUSH
33861: CALL 34243 0 5
33865: ST_TO_ADDR
// end ;
33866: LD_VAR 0 5
33870: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
33871: LD_INT 0
33873: PPUSH
33874: PPUSH
33875: PPUSH
33876: PPUSH
// if not list or not unit then
33877: LD_VAR 0 2
33881: NOT
33882: IFTRUE 33891
33884: PUSH
33885: LD_VAR 0 1
33889: NOT
33890: OR
33891: IFFALSE 33895
// exit ;
33893: GO 34238
// result := [ ] ;
33895: LD_ADDR_VAR 0 5
33899: PUSH
33900: EMPTY
33901: ST_TO_ADDR
// for i in list do
33902: LD_ADDR_VAR 0 6
33906: PUSH
33907: LD_VAR 0 2
33911: PUSH
33912: FOR_IN
33913: IFFALSE 34131
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
33915: LD_ADDR_VAR 0 8
33919: PUSH
33920: LD_VAR 0 1
33924: PPUSH
33925: LD_VAR 0 6
33929: PUSH
33930: LD_INT 1
33932: ARRAY
33933: PPUSH
33934: LD_VAR 0 6
33938: PUSH
33939: LD_INT 2
33941: ARRAY
33942: PPUSH
33943: CALL_OW 297
33947: ST_TO_ADDR
// if not Count ( result ) then
33948: LD_VAR 0 5
33952: PPUSH
33953: CALL 30499 0 1
33957: NOT
33958: IFFALSE 33991
// begin result := Join ( result , [ i , tmp ] ) ;
33960: LD_ADDR_VAR 0 5
33964: PUSH
33965: LD_VAR 0 5
33969: PPUSH
33970: LD_VAR 0 6
33974: PUSH
33975: LD_VAR 0 8
33979: PUSH
33980: EMPTY
33981: LIST
33982: LIST
33983: PPUSH
33984: CALL 66431 0 2
33988: ST_TO_ADDR
// continue ;
33989: GO 33912
// end ; if result [ result ] [ 2 ] <= tmp then
33991: LD_VAR 0 5
33995: PUSH
33996: LD_VAR 0 5
34000: ARRAY
34001: PUSH
34002: LD_INT 2
34004: ARRAY
34005: PUSH
34006: LD_VAR 0 8
34010: LESSEQUAL
34011: IFFALSE 34044
// result := Join ( result , [ i , tmp ] ) else
34013: LD_ADDR_VAR 0 5
34017: PUSH
34018: LD_VAR 0 5
34022: PPUSH
34023: LD_VAR 0 6
34027: PUSH
34028: LD_VAR 0 8
34032: PUSH
34033: EMPTY
34034: LIST
34035: LIST
34036: PPUSH
34037: CALL 66431 0 2
34041: ST_TO_ADDR
34042: GO 34129
// begin for j := 1 to Count ( result ) do
34044: LD_ADDR_VAR 0 7
34048: PUSH
34049: DOUBLE
34050: LD_INT 1
34052: DEC
34053: ST_TO_ADDR
34054: LD_VAR 0 5
34058: PPUSH
34059: CALL 30499 0 1
34063: PUSH
34064: FOR_TO
34065: IFFALSE 34127
// begin if tmp < result [ j ] [ 2 ] then
34067: LD_VAR 0 8
34071: PUSH
34072: LD_VAR 0 5
34076: PUSH
34077: LD_VAR 0 7
34081: ARRAY
34082: PUSH
34083: LD_INT 2
34085: ARRAY
34086: LESS
34087: IFFALSE 34125
// begin result := Insert ( result , j , [ i , tmp ] ) ;
34089: LD_ADDR_VAR 0 5
34093: PUSH
34094: LD_VAR 0 5
34098: PPUSH
34099: LD_VAR 0 7
34103: PPUSH
34104: LD_VAR 0 6
34108: PUSH
34109: LD_VAR 0 8
34113: PUSH
34114: EMPTY
34115: LIST
34116: LIST
34117: PPUSH
34118: CALL_OW 2
34122: ST_TO_ADDR
// break ;
34123: GO 34127
// end ; end ;
34125: GO 34064
34127: POP
34128: POP
// end ; end ;
34129: GO 33912
34131: POP
34132: POP
// if result and not asc then
34133: LD_VAR 0 5
34137: IFFALSE 34146
34139: PUSH
34140: LD_VAR 0 3
34144: NOT
34145: AND
34146: IFFALSE 34163
// result := ReverseArray ( result ) ;
34148: LD_ADDR_VAR 0 5
34152: PUSH
34153: LD_VAR 0 5
34157: PPUSH
34158: CALL 61521 0 1
34162: ST_TO_ADDR
// tmp := [ ] ;
34163: LD_ADDR_VAR 0 8
34167: PUSH
34168: EMPTY
34169: ST_TO_ADDR
// if mode then
34170: LD_VAR 0 4
34174: IFFALSE 34238
// begin for i := 1 to result do
34176: LD_ADDR_VAR 0 6
34180: PUSH
34181: DOUBLE
34182: LD_INT 1
34184: DEC
34185: ST_TO_ADDR
34186: LD_VAR 0 5
34190: PUSH
34191: FOR_TO
34192: IFFALSE 34226
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
34194: LD_ADDR_VAR 0 8
34198: PUSH
34199: LD_VAR 0 8
34203: PPUSH
34204: LD_VAR 0 5
34208: PUSH
34209: LD_VAR 0 6
34213: ARRAY
34214: PUSH
34215: LD_INT 1
34217: ARRAY
34218: PPUSH
34219: CALL 66431 0 2
34223: ST_TO_ADDR
34224: GO 34191
34226: POP
34227: POP
// result := tmp ;
34228: LD_ADDR_VAR 0 5
34232: PUSH
34233: LD_VAR 0 8
34237: ST_TO_ADDR
// end ; end ;
34238: LD_VAR 0 5
34242: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
34243: LD_INT 0
34245: PPUSH
34246: PPUSH
34247: PPUSH
34248: PPUSH
// if not list then
34249: LD_VAR 0 3
34253: NOT
34254: IFFALSE 34258
// exit ;
34256: GO 34648
// result := [ ] ;
34258: LD_ADDR_VAR 0 6
34262: PUSH
34263: EMPTY
34264: ST_TO_ADDR
// for i in list do
34265: LD_ADDR_VAR 0 7
34269: PUSH
34270: LD_VAR 0 3
34274: PUSH
34275: FOR_IN
34276: IFFALSE 34478
// begin tmp := GetDistUnitXY ( i , x , y ) ;
34278: LD_ADDR_VAR 0 9
34282: PUSH
34283: LD_VAR 0 7
34287: PPUSH
34288: LD_VAR 0 1
34292: PPUSH
34293: LD_VAR 0 2
34297: PPUSH
34298: CALL_OW 297
34302: ST_TO_ADDR
// if not result then
34303: LD_VAR 0 6
34307: NOT
34308: IFFALSE 34334
// result := [ [ i , tmp ] ] else
34310: LD_ADDR_VAR 0 6
34314: PUSH
34315: LD_VAR 0 7
34319: PUSH
34320: LD_VAR 0 9
34324: PUSH
34325: EMPTY
34326: LIST
34327: LIST
34328: PUSH
34329: EMPTY
34330: LIST
34331: ST_TO_ADDR
34332: GO 34476
// begin if result [ result ] [ 2 ] <= tmp then
34334: LD_VAR 0 6
34338: PUSH
34339: LD_VAR 0 6
34343: ARRAY
34344: PUSH
34345: LD_INT 2
34347: ARRAY
34348: PUSH
34349: LD_VAR 0 9
34353: LESSEQUAL
34354: IFFALSE 34396
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
34356: LD_ADDR_VAR 0 6
34360: PUSH
34361: LD_VAR 0 6
34365: PPUSH
34366: LD_VAR 0 6
34370: PUSH
34371: LD_INT 1
34373: PLUS
34374: PPUSH
34375: LD_VAR 0 7
34379: PUSH
34380: LD_VAR 0 9
34384: PUSH
34385: EMPTY
34386: LIST
34387: LIST
34388: PPUSH
34389: CALL_OW 2
34393: ST_TO_ADDR
34394: GO 34476
// for j := 1 to result do
34396: LD_ADDR_VAR 0 8
34400: PUSH
34401: DOUBLE
34402: LD_INT 1
34404: DEC
34405: ST_TO_ADDR
34406: LD_VAR 0 6
34410: PUSH
34411: FOR_TO
34412: IFFALSE 34474
// begin if tmp < result [ j ] [ 2 ] then
34414: LD_VAR 0 9
34418: PUSH
34419: LD_VAR 0 6
34423: PUSH
34424: LD_VAR 0 8
34428: ARRAY
34429: PUSH
34430: LD_INT 2
34432: ARRAY
34433: LESS
34434: IFFALSE 34472
// begin result := Insert ( result , j , [ i , tmp ] ) ;
34436: LD_ADDR_VAR 0 6
34440: PUSH
34441: LD_VAR 0 6
34445: PPUSH
34446: LD_VAR 0 8
34450: PPUSH
34451: LD_VAR 0 7
34455: PUSH
34456: LD_VAR 0 9
34460: PUSH
34461: EMPTY
34462: LIST
34463: LIST
34464: PPUSH
34465: CALL_OW 2
34469: ST_TO_ADDR
// break ;
34470: GO 34474
// end ; end ;
34472: GO 34411
34474: POP
34475: POP
// end ; end ;
34476: GO 34275
34478: POP
34479: POP
// if result and not asc then
34480: LD_VAR 0 6
34484: IFFALSE 34493
34486: PUSH
34487: LD_VAR 0 4
34491: NOT
34492: AND
34493: IFFALSE 34568
// begin tmp := result ;
34495: LD_ADDR_VAR 0 9
34499: PUSH
34500: LD_VAR 0 6
34504: ST_TO_ADDR
// for i = tmp downto 1 do
34505: LD_ADDR_VAR 0 7
34509: PUSH
34510: DOUBLE
34511: LD_VAR 0 9
34515: INC
34516: ST_TO_ADDR
34517: LD_INT 1
34519: PUSH
34520: FOR_DOWNTO
34521: IFFALSE 34566
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
34523: LD_ADDR_VAR 0 6
34527: PUSH
34528: LD_VAR 0 6
34532: PPUSH
34533: LD_VAR 0 9
34537: PUSH
34538: LD_VAR 0 7
34542: MINUS
34543: PUSH
34544: LD_INT 1
34546: PLUS
34547: PPUSH
34548: LD_VAR 0 9
34552: PUSH
34553: LD_VAR 0 7
34557: ARRAY
34558: PPUSH
34559: CALL_OW 1
34563: ST_TO_ADDR
34564: GO 34520
34566: POP
34567: POP
// end ; tmp := [ ] ;
34568: LD_ADDR_VAR 0 9
34572: PUSH
34573: EMPTY
34574: ST_TO_ADDR
// if mode then
34575: LD_VAR 0 5
34579: IFFALSE 34648
// begin for i = 1 to result do
34581: LD_ADDR_VAR 0 7
34585: PUSH
34586: DOUBLE
34587: LD_INT 1
34589: DEC
34590: ST_TO_ADDR
34591: LD_VAR 0 6
34595: PUSH
34596: FOR_TO
34597: IFFALSE 34636
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
34599: LD_ADDR_VAR 0 9
34603: PUSH
34604: LD_VAR 0 9
34608: PPUSH
34609: LD_VAR 0 7
34613: PPUSH
34614: LD_VAR 0 6
34618: PUSH
34619: LD_VAR 0 7
34623: ARRAY
34624: PUSH
34625: LD_INT 1
34627: ARRAY
34628: PPUSH
34629: CALL_OW 1
34633: ST_TO_ADDR
34634: GO 34596
34636: POP
34637: POP
// result := tmp ;
34638: LD_ADDR_VAR 0 6
34642: PUSH
34643: LD_VAR 0 9
34647: ST_TO_ADDR
// end ; end ;
34648: LD_VAR 0 6
34652: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
34653: LD_INT 0
34655: PPUSH
34656: PPUSH
34657: PPUSH
34658: PPUSH
34659: PPUSH
34660: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
34661: LD_ADDR_VAR 0 5
34665: PUSH
34666: LD_INT 0
34668: PUSH
34669: LD_INT 0
34671: PUSH
34672: LD_INT 0
34674: PUSH
34675: EMPTY
34676: PUSH
34677: EMPTY
34678: LIST
34679: LIST
34680: LIST
34681: LIST
34682: ST_TO_ADDR
// if not x or not y then
34683: LD_VAR 0 2
34687: NOT
34688: IFTRUE 34697
34690: PUSH
34691: LD_VAR 0 3
34695: NOT
34696: OR
34697: IFFALSE 34701
// exit ;
34699: GO 36357
// if not range then
34701: LD_VAR 0 4
34705: NOT
34706: IFFALSE 34716
// range := 10 ;
34708: LD_ADDR_VAR 0 4
34712: PUSH
34713: LD_INT 10
34715: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34716: LD_ADDR_VAR 0 8
34720: PUSH
34721: LD_INT 81
34723: PUSH
34724: LD_VAR 0 1
34728: PUSH
34729: EMPTY
34730: LIST
34731: LIST
34732: PUSH
34733: LD_INT 92
34735: PUSH
34736: LD_VAR 0 2
34740: PUSH
34741: LD_VAR 0 3
34745: PUSH
34746: LD_VAR 0 4
34750: PUSH
34751: EMPTY
34752: LIST
34753: LIST
34754: LIST
34755: LIST
34756: PUSH
34757: LD_INT 3
34759: PUSH
34760: LD_INT 21
34762: PUSH
34763: LD_INT 3
34765: PUSH
34766: EMPTY
34767: LIST
34768: LIST
34769: PUSH
34770: EMPTY
34771: LIST
34772: LIST
34773: PUSH
34774: EMPTY
34775: LIST
34776: LIST
34777: LIST
34778: PPUSH
34779: CALL_OW 69
34783: ST_TO_ADDR
// if not tmp then
34784: LD_VAR 0 8
34788: NOT
34789: IFFALSE 34793
// exit ;
34791: GO 36357
// for i in tmp do
34793: LD_ADDR_VAR 0 6
34797: PUSH
34798: LD_VAR 0 8
34802: PUSH
34803: FOR_IN
34804: IFFALSE 36332
// begin points := [ 0 , 0 , 0 ] ;
34806: LD_ADDR_VAR 0 9
34810: PUSH
34811: LD_INT 0
34813: PUSH
34814: LD_INT 0
34816: PUSH
34817: LD_INT 0
34819: PUSH
34820: EMPTY
34821: LIST
34822: LIST
34823: LIST
34824: ST_TO_ADDR
// bpoints := 1 ;
34825: LD_ADDR_VAR 0 10
34829: PUSH
34830: LD_INT 1
34832: ST_TO_ADDR
// case GetType ( i ) of unit_human :
34833: LD_VAR 0 6
34837: PPUSH
34838: CALL_OW 247
34842: PUSH
34843: LD_INT 1
34845: DOUBLE
34846: EQUAL
34847: IFTRUE 34851
34849: GO 35433
34851: POP
// begin if GetClass ( i ) = 1 then
34852: LD_VAR 0 6
34856: PPUSH
34857: CALL_OW 257
34861: PUSH
34862: LD_INT 1
34864: EQUAL
34865: IFFALSE 34886
// points := [ 10 , 5 , 3 ] ;
34867: LD_ADDR_VAR 0 9
34871: PUSH
34872: LD_INT 10
34874: PUSH
34875: LD_INT 5
34877: PUSH
34878: LD_INT 3
34880: PUSH
34881: EMPTY
34882: LIST
34883: LIST
34884: LIST
34885: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
34886: LD_VAR 0 6
34890: PPUSH
34891: CALL_OW 257
34895: PUSH
34896: LD_INT 2
34898: PUSH
34899: LD_INT 3
34901: PUSH
34902: LD_INT 4
34904: PUSH
34905: EMPTY
34906: LIST
34907: LIST
34908: LIST
34909: IN
34910: IFFALSE 34931
// points := [ 3 , 2 , 1 ] ;
34912: LD_ADDR_VAR 0 9
34916: PUSH
34917: LD_INT 3
34919: PUSH
34920: LD_INT 2
34922: PUSH
34923: LD_INT 1
34925: PUSH
34926: EMPTY
34927: LIST
34928: LIST
34929: LIST
34930: ST_TO_ADDR
// if GetClass ( i ) = 5 then
34931: LD_VAR 0 6
34935: PPUSH
34936: CALL_OW 257
34940: PUSH
34941: LD_INT 5
34943: EQUAL
34944: IFFALSE 34965
// points := [ 130 , 5 , 2 ] ;
34946: LD_ADDR_VAR 0 9
34950: PUSH
34951: LD_INT 130
34953: PUSH
34954: LD_INT 5
34956: PUSH
34957: LD_INT 2
34959: PUSH
34960: EMPTY
34961: LIST
34962: LIST
34963: LIST
34964: ST_TO_ADDR
// if GetClass ( i ) = 8 then
34965: LD_VAR 0 6
34969: PPUSH
34970: CALL_OW 257
34974: PUSH
34975: LD_INT 8
34977: EQUAL
34978: IFFALSE 34999
// points := [ 35 , 35 , 30 ] ;
34980: LD_ADDR_VAR 0 9
34984: PUSH
34985: LD_INT 35
34987: PUSH
34988: LD_INT 35
34990: PUSH
34991: LD_INT 30
34993: PUSH
34994: EMPTY
34995: LIST
34996: LIST
34997: LIST
34998: ST_TO_ADDR
// if GetClass ( i ) = 9 then
34999: LD_VAR 0 6
35003: PPUSH
35004: CALL_OW 257
35008: PUSH
35009: LD_INT 9
35011: EQUAL
35012: IFFALSE 35033
// points := [ 20 , 55 , 40 ] ;
35014: LD_ADDR_VAR 0 9
35018: PUSH
35019: LD_INT 20
35021: PUSH
35022: LD_INT 55
35024: PUSH
35025: LD_INT 40
35027: PUSH
35028: EMPTY
35029: LIST
35030: LIST
35031: LIST
35032: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
35033: LD_VAR 0 6
35037: PPUSH
35038: CALL_OW 257
35042: PUSH
35043: LD_INT 12
35045: PUSH
35046: LD_INT 16
35048: PUSH
35049: EMPTY
35050: LIST
35051: LIST
35052: IN
35053: IFFALSE 35074
// points := [ 5 , 3 , 2 ] ;
35055: LD_ADDR_VAR 0 9
35059: PUSH
35060: LD_INT 5
35062: PUSH
35063: LD_INT 3
35065: PUSH
35066: LD_INT 2
35068: PUSH
35069: EMPTY
35070: LIST
35071: LIST
35072: LIST
35073: ST_TO_ADDR
// if GetClass ( i ) = 17 then
35074: LD_VAR 0 6
35078: PPUSH
35079: CALL_OW 257
35083: PUSH
35084: LD_INT 17
35086: EQUAL
35087: IFFALSE 35108
// points := [ 100 , 50 , 75 ] ;
35089: LD_ADDR_VAR 0 9
35093: PUSH
35094: LD_INT 100
35096: PUSH
35097: LD_INT 50
35099: PUSH
35100: LD_INT 75
35102: PUSH
35103: EMPTY
35104: LIST
35105: LIST
35106: LIST
35107: ST_TO_ADDR
// if GetClass ( i ) = 15 then
35108: LD_VAR 0 6
35112: PPUSH
35113: CALL_OW 257
35117: PUSH
35118: LD_INT 15
35120: EQUAL
35121: IFFALSE 35142
// points := [ 10 , 5 , 3 ] ;
35123: LD_ADDR_VAR 0 9
35127: PUSH
35128: LD_INT 10
35130: PUSH
35131: LD_INT 5
35133: PUSH
35134: LD_INT 3
35136: PUSH
35137: EMPTY
35138: LIST
35139: LIST
35140: LIST
35141: ST_TO_ADDR
// if GetClass ( i ) = 14 then
35142: LD_VAR 0 6
35146: PPUSH
35147: CALL_OW 257
35151: PUSH
35152: LD_INT 14
35154: EQUAL
35155: IFFALSE 35176
// points := [ 10 , 0 , 0 ] ;
35157: LD_ADDR_VAR 0 9
35161: PUSH
35162: LD_INT 10
35164: PUSH
35165: LD_INT 0
35167: PUSH
35168: LD_INT 0
35170: PUSH
35171: EMPTY
35172: LIST
35173: LIST
35174: LIST
35175: ST_TO_ADDR
// if GetClass ( i ) = 11 then
35176: LD_VAR 0 6
35180: PPUSH
35181: CALL_OW 257
35185: PUSH
35186: LD_INT 11
35188: EQUAL
35189: IFFALSE 35210
// points := [ 30 , 10 , 5 ] ;
35191: LD_ADDR_VAR 0 9
35195: PUSH
35196: LD_INT 30
35198: PUSH
35199: LD_INT 10
35201: PUSH
35202: LD_INT 5
35204: PUSH
35205: EMPTY
35206: LIST
35207: LIST
35208: LIST
35209: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
35210: LD_VAR 0 1
35214: PPUSH
35215: LD_INT 5
35217: PPUSH
35218: CALL_OW 321
35222: PUSH
35223: LD_INT 2
35225: EQUAL
35226: IFFALSE 35243
// bpoints := bpoints * 1.8 ;
35228: LD_ADDR_VAR 0 10
35232: PUSH
35233: LD_VAR 0 10
35237: PUSH
35238: LD_REAL  1.80000000000000E+0000
35241: MUL
35242: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
35243: LD_VAR 0 6
35247: PPUSH
35248: CALL_OW 257
35252: PUSH
35253: LD_INT 1
35255: PUSH
35256: LD_INT 2
35258: PUSH
35259: LD_INT 3
35261: PUSH
35262: LD_INT 4
35264: PUSH
35265: EMPTY
35266: LIST
35267: LIST
35268: LIST
35269: LIST
35270: IN
35271: IFFALSE 35291
35273: PUSH
35274: LD_VAR 0 1
35278: PPUSH
35279: LD_INT 51
35281: PPUSH
35282: CALL_OW 321
35286: PUSH
35287: LD_INT 2
35289: EQUAL
35290: AND
35291: IFFALSE 35308
// bpoints := bpoints * 1.2 ;
35293: LD_ADDR_VAR 0 10
35297: PUSH
35298: LD_VAR 0 10
35302: PUSH
35303: LD_REAL  1.20000000000000E+0000
35306: MUL
35307: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
35308: LD_VAR 0 6
35312: PPUSH
35313: CALL_OW 257
35317: PUSH
35318: LD_INT 5
35320: PUSH
35321: LD_INT 7
35323: PUSH
35324: LD_INT 9
35326: PUSH
35327: EMPTY
35328: LIST
35329: LIST
35330: LIST
35331: IN
35332: IFFALSE 35352
35334: PUSH
35335: LD_VAR 0 1
35339: PPUSH
35340: LD_INT 52
35342: PPUSH
35343: CALL_OW 321
35347: PUSH
35348: LD_INT 2
35350: EQUAL
35351: AND
35352: IFFALSE 35369
// bpoints := bpoints * 1.5 ;
35354: LD_ADDR_VAR 0 10
35358: PUSH
35359: LD_VAR 0 10
35363: PUSH
35364: LD_REAL  1.50000000000000E+0000
35367: MUL
35368: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
35369: LD_VAR 0 1
35373: PPUSH
35374: LD_INT 66
35376: PPUSH
35377: CALL_OW 321
35381: PUSH
35382: LD_INT 2
35384: EQUAL
35385: IFFALSE 35402
// bpoints := bpoints * 1.1 ;
35387: LD_ADDR_VAR 0 10
35391: PUSH
35392: LD_VAR 0 10
35396: PUSH
35397: LD_REAL  1.10000000000000E+0000
35400: MUL
35401: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
35402: LD_ADDR_VAR 0 10
35406: PUSH
35407: LD_VAR 0 10
35411: PUSH
35412: LD_VAR 0 6
35416: PPUSH
35417: LD_INT 1
35419: PPUSH
35420: CALL_OW 259
35424: PUSH
35425: LD_REAL  1.15000000000000E+0000
35428: MUL
35429: MUL
35430: ST_TO_ADDR
// end ; unit_vehicle :
35431: GO 36261
35433: LD_INT 2
35435: DOUBLE
35436: EQUAL
35437: IFTRUE 35441
35439: GO 36249
35441: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
35442: LD_VAR 0 6
35446: PPUSH
35447: CALL_OW 264
35451: PUSH
35452: LD_INT 2
35454: PUSH
35455: LD_INT 42
35457: PUSH
35458: LD_INT 24
35460: PUSH
35461: EMPTY
35462: LIST
35463: LIST
35464: LIST
35465: IN
35466: IFFALSE 35487
// points := [ 25 , 5 , 3 ] ;
35468: LD_ADDR_VAR 0 9
35472: PUSH
35473: LD_INT 25
35475: PUSH
35476: LD_INT 5
35478: PUSH
35479: LD_INT 3
35481: PUSH
35482: EMPTY
35483: LIST
35484: LIST
35485: LIST
35486: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
35487: LD_VAR 0 6
35491: PPUSH
35492: CALL_OW 264
35496: PUSH
35497: LD_INT 4
35499: PUSH
35500: LD_INT 43
35502: PUSH
35503: LD_INT 25
35505: PUSH
35506: EMPTY
35507: LIST
35508: LIST
35509: LIST
35510: IN
35511: IFFALSE 35532
// points := [ 40 , 15 , 5 ] ;
35513: LD_ADDR_VAR 0 9
35517: PUSH
35518: LD_INT 40
35520: PUSH
35521: LD_INT 15
35523: PUSH
35524: LD_INT 5
35526: PUSH
35527: EMPTY
35528: LIST
35529: LIST
35530: LIST
35531: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
35532: LD_VAR 0 6
35536: PPUSH
35537: CALL_OW 264
35541: PUSH
35542: LD_INT 3
35544: PUSH
35545: LD_INT 23
35547: PUSH
35548: EMPTY
35549: LIST
35550: LIST
35551: IN
35552: IFFALSE 35573
// points := [ 7 , 25 , 8 ] ;
35554: LD_ADDR_VAR 0 9
35558: PUSH
35559: LD_INT 7
35561: PUSH
35562: LD_INT 25
35564: PUSH
35565: LD_INT 8
35567: PUSH
35568: EMPTY
35569: LIST
35570: LIST
35571: LIST
35572: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
35573: LD_VAR 0 6
35577: PPUSH
35578: CALL_OW 264
35582: PUSH
35583: LD_INT 5
35585: PUSH
35586: LD_INT 27
35588: PUSH
35589: LD_INT 44
35591: PUSH
35592: EMPTY
35593: LIST
35594: LIST
35595: LIST
35596: IN
35597: IFFALSE 35618
// points := [ 14 , 50 , 16 ] ;
35599: LD_ADDR_VAR 0 9
35603: PUSH
35604: LD_INT 14
35606: PUSH
35607: LD_INT 50
35609: PUSH
35610: LD_INT 16
35612: PUSH
35613: EMPTY
35614: LIST
35615: LIST
35616: LIST
35617: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
35618: LD_VAR 0 6
35622: PPUSH
35623: CALL_OW 264
35627: PUSH
35628: LD_INT 6
35630: PUSH
35631: LD_INT 46
35633: PUSH
35634: EMPTY
35635: LIST
35636: LIST
35637: IN
35638: IFFALSE 35659
// points := [ 32 , 120 , 70 ] ;
35640: LD_ADDR_VAR 0 9
35644: PUSH
35645: LD_INT 32
35647: PUSH
35648: LD_INT 120
35650: PUSH
35651: LD_INT 70
35653: PUSH
35654: EMPTY
35655: LIST
35656: LIST
35657: LIST
35658: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
35659: LD_VAR 0 6
35663: PPUSH
35664: CALL_OW 264
35668: PUSH
35669: LD_INT 7
35671: PUSH
35672: LD_INT 28
35674: PUSH
35675: LD_INT 45
35677: PUSH
35678: LD_INT 92
35680: PUSH
35681: EMPTY
35682: LIST
35683: LIST
35684: LIST
35685: LIST
35686: IN
35687: IFFALSE 35708
// points := [ 35 , 20 , 45 ] ;
35689: LD_ADDR_VAR 0 9
35693: PUSH
35694: LD_INT 35
35696: PUSH
35697: LD_INT 20
35699: PUSH
35700: LD_INT 45
35702: PUSH
35703: EMPTY
35704: LIST
35705: LIST
35706: LIST
35707: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
35708: LD_VAR 0 6
35712: PPUSH
35713: CALL_OW 264
35717: PUSH
35718: LD_INT 47
35720: PUSH
35721: EMPTY
35722: LIST
35723: IN
35724: IFFALSE 35745
// points := [ 67 , 45 , 75 ] ;
35726: LD_ADDR_VAR 0 9
35730: PUSH
35731: LD_INT 67
35733: PUSH
35734: LD_INT 45
35736: PUSH
35737: LD_INT 75
35739: PUSH
35740: EMPTY
35741: LIST
35742: LIST
35743: LIST
35744: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
35745: LD_VAR 0 6
35749: PPUSH
35750: CALL_OW 264
35754: PUSH
35755: LD_INT 26
35757: PUSH
35758: EMPTY
35759: LIST
35760: IN
35761: IFFALSE 35782
// points := [ 120 , 30 , 80 ] ;
35763: LD_ADDR_VAR 0 9
35767: PUSH
35768: LD_INT 120
35770: PUSH
35771: LD_INT 30
35773: PUSH
35774: LD_INT 80
35776: PUSH
35777: EMPTY
35778: LIST
35779: LIST
35780: LIST
35781: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
35782: LD_VAR 0 6
35786: PPUSH
35787: CALL_OW 264
35791: PUSH
35792: LD_INT 22
35794: PUSH
35795: EMPTY
35796: LIST
35797: IN
35798: IFFALSE 35819
// points := [ 40 , 1 , 1 ] ;
35800: LD_ADDR_VAR 0 9
35804: PUSH
35805: LD_INT 40
35807: PUSH
35808: LD_INT 1
35810: PUSH
35811: LD_INT 1
35813: PUSH
35814: EMPTY
35815: LIST
35816: LIST
35817: LIST
35818: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
35819: LD_VAR 0 6
35823: PPUSH
35824: CALL_OW 264
35828: PUSH
35829: LD_INT 29
35831: PUSH
35832: EMPTY
35833: LIST
35834: IN
35835: IFFALSE 35856
// points := [ 70 , 200 , 400 ] ;
35837: LD_ADDR_VAR 0 9
35841: PUSH
35842: LD_INT 70
35844: PUSH
35845: LD_INT 200
35847: PUSH
35848: LD_INT 400
35850: PUSH
35851: EMPTY
35852: LIST
35853: LIST
35854: LIST
35855: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
35856: LD_VAR 0 6
35860: PPUSH
35861: CALL_OW 264
35865: PUSH
35866: LD_INT 14
35868: PUSH
35869: LD_INT 53
35871: PUSH
35872: EMPTY
35873: LIST
35874: LIST
35875: IN
35876: IFFALSE 35897
// points := [ 40 , 10 , 20 ] ;
35878: LD_ADDR_VAR 0 9
35882: PUSH
35883: LD_INT 40
35885: PUSH
35886: LD_INT 10
35888: PUSH
35889: LD_INT 20
35891: PUSH
35892: EMPTY
35893: LIST
35894: LIST
35895: LIST
35896: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
35897: LD_VAR 0 6
35901: PPUSH
35902: CALL_OW 264
35906: PUSH
35907: LD_INT 9
35909: PUSH
35910: EMPTY
35911: LIST
35912: IN
35913: IFFALSE 35934
// points := [ 5 , 70 , 20 ] ;
35915: LD_ADDR_VAR 0 9
35919: PUSH
35920: LD_INT 5
35922: PUSH
35923: LD_INT 70
35925: PUSH
35926: LD_INT 20
35928: PUSH
35929: EMPTY
35930: LIST
35931: LIST
35932: LIST
35933: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
35934: LD_VAR 0 6
35938: PPUSH
35939: CALL_OW 264
35943: PUSH
35944: LD_INT 10
35946: PUSH
35947: EMPTY
35948: LIST
35949: IN
35950: IFFALSE 35971
// points := [ 35 , 110 , 70 ] ;
35952: LD_ADDR_VAR 0 9
35956: PUSH
35957: LD_INT 35
35959: PUSH
35960: LD_INT 110
35962: PUSH
35963: LD_INT 70
35965: PUSH
35966: EMPTY
35967: LIST
35968: LIST
35969: LIST
35970: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
35971: LD_VAR 0 6
35975: PPUSH
35976: CALL_OW 265
35980: PUSH
35981: LD_INT 25
35983: EQUAL
35984: IFFALSE 36005
// points := [ 80 , 65 , 100 ] ;
35986: LD_ADDR_VAR 0 9
35990: PUSH
35991: LD_INT 80
35993: PUSH
35994: LD_INT 65
35996: PUSH
35997: LD_INT 100
35999: PUSH
36000: EMPTY
36001: LIST
36002: LIST
36003: LIST
36004: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
36005: LD_VAR 0 6
36009: PPUSH
36010: CALL_OW 263
36014: PUSH
36015: LD_INT 1
36017: EQUAL
36018: IFFALSE 36053
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
36020: LD_ADDR_VAR 0 10
36024: PUSH
36025: LD_VAR 0 10
36029: PUSH
36030: LD_VAR 0 6
36034: PPUSH
36035: CALL_OW 311
36039: PPUSH
36040: LD_INT 3
36042: PPUSH
36043: CALL_OW 259
36047: PUSH
36048: LD_INT 4
36050: MUL
36051: MUL
36052: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
36053: LD_VAR 0 6
36057: PPUSH
36058: CALL_OW 263
36062: PUSH
36063: LD_INT 2
36065: EQUAL
36066: IFFALSE 36117
// begin j := IsControledBy ( i ) ;
36068: LD_ADDR_VAR 0 7
36072: PUSH
36073: LD_VAR 0 6
36077: PPUSH
36078: CALL_OW 312
36082: ST_TO_ADDR
// if j then
36083: LD_VAR 0 7
36087: IFFALSE 36117
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
36089: LD_ADDR_VAR 0 10
36093: PUSH
36094: LD_VAR 0 10
36098: PUSH
36099: LD_VAR 0 7
36103: PPUSH
36104: LD_INT 3
36106: PPUSH
36107: CALL_OW 259
36111: PUSH
36112: LD_INT 3
36114: MUL
36115: MUL
36116: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
36117: LD_VAR 0 6
36121: PPUSH
36122: CALL_OW 264
36126: PUSH
36127: LD_INT 5
36129: PUSH
36130: LD_INT 6
36132: PUSH
36133: LD_INT 46
36135: PUSH
36136: LD_INT 44
36138: PUSH
36139: LD_INT 47
36141: PUSH
36142: LD_INT 45
36144: PUSH
36145: LD_INT 28
36147: PUSH
36148: LD_INT 7
36150: PUSH
36151: LD_INT 27
36153: PUSH
36154: LD_INT 29
36156: PUSH
36157: EMPTY
36158: LIST
36159: LIST
36160: LIST
36161: LIST
36162: LIST
36163: LIST
36164: LIST
36165: LIST
36166: LIST
36167: LIST
36168: IN
36169: IFFALSE 36189
36171: PUSH
36172: LD_VAR 0 1
36176: PPUSH
36177: LD_INT 52
36179: PPUSH
36180: CALL_OW 321
36184: PUSH
36185: LD_INT 2
36187: EQUAL
36188: AND
36189: IFFALSE 36206
// bpoints := bpoints * 1.2 ;
36191: LD_ADDR_VAR 0 10
36195: PUSH
36196: LD_VAR 0 10
36200: PUSH
36201: LD_REAL  1.20000000000000E+0000
36204: MUL
36205: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
36206: LD_VAR 0 6
36210: PPUSH
36211: CALL_OW 264
36215: PUSH
36216: LD_INT 6
36218: PUSH
36219: LD_INT 46
36221: PUSH
36222: LD_INT 47
36224: PUSH
36225: EMPTY
36226: LIST
36227: LIST
36228: LIST
36229: IN
36230: IFFALSE 36247
// bpoints := bpoints * 1.2 ;
36232: LD_ADDR_VAR 0 10
36236: PUSH
36237: LD_VAR 0 10
36241: PUSH
36242: LD_REAL  1.20000000000000E+0000
36245: MUL
36246: ST_TO_ADDR
// end ; unit_building :
36247: GO 36261
36249: LD_INT 3
36251: DOUBLE
36252: EQUAL
36253: IFTRUE 36257
36255: GO 36260
36257: POP
// ; end ;
36258: GO 36261
36260: POP
// for j = 1 to 3 do
36261: LD_ADDR_VAR 0 7
36265: PUSH
36266: DOUBLE
36267: LD_INT 1
36269: DEC
36270: ST_TO_ADDR
36271: LD_INT 3
36273: PUSH
36274: FOR_TO
36275: IFFALSE 36328
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
36277: LD_ADDR_VAR 0 5
36281: PUSH
36282: LD_VAR 0 5
36286: PPUSH
36287: LD_VAR 0 7
36291: PPUSH
36292: LD_VAR 0 5
36296: PUSH
36297: LD_VAR 0 7
36301: ARRAY
36302: PUSH
36303: LD_VAR 0 9
36307: PUSH
36308: LD_VAR 0 7
36312: ARRAY
36313: PUSH
36314: LD_VAR 0 10
36318: MUL
36319: PLUS
36320: PPUSH
36321: CALL_OW 1
36325: ST_TO_ADDR
36326: GO 36274
36328: POP
36329: POP
// end ;
36330: GO 34803
36332: POP
36333: POP
// result := Replace ( result , 4 , tmp ) ;
36334: LD_ADDR_VAR 0 5
36338: PUSH
36339: LD_VAR 0 5
36343: PPUSH
36344: LD_INT 4
36346: PPUSH
36347: LD_VAR 0 8
36351: PPUSH
36352: CALL_OW 1
36356: ST_TO_ADDR
// end ;
36357: LD_VAR 0 5
36361: RET
// export function DangerAtRange ( unit , range ) ; begin
36362: LD_INT 0
36364: PPUSH
// if not unit then
36365: LD_VAR 0 1
36369: NOT
36370: IFFALSE 36374
// exit ;
36372: GO 36419
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
36374: LD_ADDR_VAR 0 3
36378: PUSH
36379: LD_VAR 0 1
36383: PPUSH
36384: CALL_OW 255
36388: PPUSH
36389: LD_VAR 0 1
36393: PPUSH
36394: CALL_OW 250
36398: PPUSH
36399: LD_VAR 0 1
36403: PPUSH
36404: CALL_OW 251
36408: PPUSH
36409: LD_VAR 0 2
36413: PPUSH
36414: CALL 34653 0 4
36418: ST_TO_ADDR
// end ;
36419: LD_VAR 0 3
36423: RET
// export function DangerInArea ( side , area ) ; begin
36424: LD_INT 0
36426: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
36427: LD_ADDR_VAR 0 3
36431: PUSH
36432: LD_VAR 0 2
36436: PPUSH
36437: LD_INT 81
36439: PUSH
36440: LD_VAR 0 1
36444: PUSH
36445: EMPTY
36446: LIST
36447: LIST
36448: PPUSH
36449: CALL_OW 70
36453: ST_TO_ADDR
// end ;
36454: LD_VAR 0 3
36458: RET
// export function IsExtension ( b ) ; begin
36459: LD_INT 0
36461: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
36462: LD_ADDR_VAR 0 2
36466: PUSH
36467: LD_VAR 0 1
36471: PUSH
36472: LD_INT 23
36474: PUSH
36475: LD_INT 20
36477: PUSH
36478: LD_INT 22
36480: PUSH
36481: LD_INT 17
36483: PUSH
36484: LD_INT 24
36486: PUSH
36487: LD_INT 21
36489: PUSH
36490: LD_INT 19
36492: PUSH
36493: LD_INT 16
36495: PUSH
36496: LD_INT 25
36498: PUSH
36499: LD_INT 18
36501: PUSH
36502: EMPTY
36503: LIST
36504: LIST
36505: LIST
36506: LIST
36507: LIST
36508: LIST
36509: LIST
36510: LIST
36511: LIST
36512: LIST
36513: IN
36514: ST_TO_ADDR
// end ;
36515: LD_VAR 0 2
36519: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
36520: LD_INT 0
36522: PPUSH
36523: PPUSH
36524: PPUSH
// result := [ ] ;
36525: LD_ADDR_VAR 0 4
36529: PUSH
36530: EMPTY
36531: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
36532: LD_ADDR_VAR 0 5
36536: PUSH
36537: LD_VAR 0 2
36541: PPUSH
36542: LD_INT 21
36544: PUSH
36545: LD_INT 3
36547: PUSH
36548: EMPTY
36549: LIST
36550: LIST
36551: PPUSH
36552: CALL_OW 70
36556: ST_TO_ADDR
// if not tmp then
36557: LD_VAR 0 5
36561: NOT
36562: IFFALSE 36566
// exit ;
36564: GO 36630
// if checkLink then
36566: LD_VAR 0 3
36570: IFFALSE 36620
// begin for i in tmp do
36572: LD_ADDR_VAR 0 6
36576: PUSH
36577: LD_VAR 0 5
36581: PUSH
36582: FOR_IN
36583: IFFALSE 36618
// if GetBase ( i ) <> base then
36585: LD_VAR 0 6
36589: PPUSH
36590: CALL_OW 274
36594: PUSH
36595: LD_VAR 0 1
36599: NONEQUAL
36600: IFFALSE 36616
// ComLinkToBase ( base , i ) ;
36602: LD_VAR 0 1
36606: PPUSH
36607: LD_VAR 0 6
36611: PPUSH
36612: CALL_OW 169
36616: GO 36582
36618: POP
36619: POP
// end ; result := tmp ;
36620: LD_ADDR_VAR 0 4
36624: PUSH
36625: LD_VAR 0 5
36629: ST_TO_ADDR
// end ;
36630: LD_VAR 0 4
36634: RET
// export function ComComplete ( units , b ) ; var i ; begin
36635: LD_INT 0
36637: PPUSH
36638: PPUSH
// if not units then
36639: LD_VAR 0 1
36643: NOT
36644: IFFALSE 36648
// exit ;
36646: GO 36738
// for i in units do
36648: LD_ADDR_VAR 0 4
36652: PUSH
36653: LD_VAR 0 1
36657: PUSH
36658: FOR_IN
36659: IFFALSE 36736
// if BuildingStatus ( b ) = bs_build then
36661: LD_VAR 0 2
36665: PPUSH
36666: CALL_OW 461
36670: PUSH
36671: LD_INT 1
36673: EQUAL
36674: IFFALSE 36734
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
36676: LD_VAR 0 4
36680: PPUSH
36681: LD_STRING h
36683: PUSH
36684: LD_VAR 0 2
36688: PPUSH
36689: CALL_OW 250
36693: PUSH
36694: LD_VAR 0 2
36698: PPUSH
36699: CALL_OW 251
36703: PUSH
36704: LD_VAR 0 2
36708: PUSH
36709: LD_INT 0
36711: PUSH
36712: LD_INT 0
36714: PUSH
36715: LD_INT 0
36717: PUSH
36718: EMPTY
36719: LIST
36720: LIST
36721: LIST
36722: LIST
36723: LIST
36724: LIST
36725: LIST
36726: PUSH
36727: EMPTY
36728: LIST
36729: PPUSH
36730: CALL_OW 446
36734: GO 36658
36736: POP
36737: POP
// end ;
36738: LD_VAR 0 3
36742: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
36743: LD_INT 0
36745: PPUSH
36746: PPUSH
36747: PPUSH
36748: PPUSH
36749: PPUSH
36750: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
36751: LD_VAR 0 1
36755: NOT
36756: IFTRUE 36773
36758: PUSH
36759: LD_VAR 0 1
36763: PPUSH
36764: CALL_OW 263
36768: PUSH
36769: LD_INT 2
36771: NONEQUAL
36772: OR
36773: IFFALSE 36777
// exit ;
36775: GO 37093
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
36777: LD_ADDR_VAR 0 6
36781: PUSH
36782: LD_INT 22
36784: PUSH
36785: LD_VAR 0 1
36789: PPUSH
36790: CALL_OW 255
36794: PUSH
36795: EMPTY
36796: LIST
36797: LIST
36798: PUSH
36799: LD_INT 2
36801: PUSH
36802: LD_INT 30
36804: PUSH
36805: LD_INT 36
36807: PUSH
36808: EMPTY
36809: LIST
36810: LIST
36811: PUSH
36812: LD_INT 34
36814: PUSH
36815: LD_INT 31
36817: PUSH
36818: EMPTY
36819: LIST
36820: LIST
36821: PUSH
36822: EMPTY
36823: LIST
36824: LIST
36825: LIST
36826: PUSH
36827: EMPTY
36828: LIST
36829: LIST
36830: PPUSH
36831: CALL_OW 69
36835: ST_TO_ADDR
// if not tmp then
36836: LD_VAR 0 6
36840: NOT
36841: IFFALSE 36845
// exit ;
36843: GO 37093
// result := [ ] ;
36845: LD_ADDR_VAR 0 2
36849: PUSH
36850: EMPTY
36851: ST_TO_ADDR
// for i in tmp do
36852: LD_ADDR_VAR 0 3
36856: PUSH
36857: LD_VAR 0 6
36861: PUSH
36862: FOR_IN
36863: IFFALSE 36934
// begin t := UnitsInside ( i ) ;
36865: LD_ADDR_VAR 0 4
36869: PUSH
36870: LD_VAR 0 3
36874: PPUSH
36875: CALL_OW 313
36879: ST_TO_ADDR
// if t then
36880: LD_VAR 0 4
36884: IFFALSE 36932
// for j in t do
36886: LD_ADDR_VAR 0 7
36890: PUSH
36891: LD_VAR 0 4
36895: PUSH
36896: FOR_IN
36897: IFFALSE 36930
// result := Replace ( result , result + 1 , j ) ;
36899: LD_ADDR_VAR 0 2
36903: PUSH
36904: LD_VAR 0 2
36908: PPUSH
36909: LD_VAR 0 2
36913: PUSH
36914: LD_INT 1
36916: PLUS
36917: PPUSH
36918: LD_VAR 0 7
36922: PPUSH
36923: CALL_OW 1
36927: ST_TO_ADDR
36928: GO 36896
36930: POP
36931: POP
// end ;
36932: GO 36862
36934: POP
36935: POP
// if not result then
36936: LD_VAR 0 2
36940: NOT
36941: IFFALSE 36945
// exit ;
36943: GO 37093
// mech := result [ 1 ] ;
36945: LD_ADDR_VAR 0 5
36949: PUSH
36950: LD_VAR 0 2
36954: PUSH
36955: LD_INT 1
36957: ARRAY
36958: ST_TO_ADDR
// if result > 1 then
36959: LD_VAR 0 2
36963: PUSH
36964: LD_INT 1
36966: GREATER
36967: IFFALSE 37079
// begin for i = 2 to result do
36969: LD_ADDR_VAR 0 3
36973: PUSH
36974: DOUBLE
36975: LD_INT 2
36977: DEC
36978: ST_TO_ADDR
36979: LD_VAR 0 2
36983: PUSH
36984: FOR_TO
36985: IFFALSE 37077
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
36987: LD_ADDR_VAR 0 4
36991: PUSH
36992: LD_VAR 0 2
36996: PUSH
36997: LD_VAR 0 3
37001: ARRAY
37002: PPUSH
37003: LD_INT 3
37005: PPUSH
37006: CALL_OW 259
37010: PUSH
37011: LD_VAR 0 2
37015: PUSH
37016: LD_VAR 0 3
37020: ARRAY
37021: PPUSH
37022: CALL_OW 432
37026: MINUS
37027: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
37028: LD_VAR 0 4
37032: PUSH
37033: LD_VAR 0 5
37037: PPUSH
37038: LD_INT 3
37040: PPUSH
37041: CALL_OW 259
37045: PUSH
37046: LD_VAR 0 5
37050: PPUSH
37051: CALL_OW 432
37055: MINUS
37056: GREATEREQUAL
37057: IFFALSE 37075
// mech := result [ i ] ;
37059: LD_ADDR_VAR 0 5
37063: PUSH
37064: LD_VAR 0 2
37068: PUSH
37069: LD_VAR 0 3
37073: ARRAY
37074: ST_TO_ADDR
// end ;
37075: GO 36984
37077: POP
37078: POP
// end ; ComLinkTo ( vehicle , mech ) ;
37079: LD_VAR 0 1
37083: PPUSH
37084: LD_VAR 0 5
37088: PPUSH
37089: CALL_OW 135
// end ;
37093: LD_VAR 0 2
37097: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
37098: LD_INT 0
37100: PPUSH
37101: PPUSH
37102: PPUSH
37103: PPUSH
37104: PPUSH
37105: PPUSH
37106: PPUSH
37107: PPUSH
37108: PPUSH
37109: PPUSH
37110: PPUSH
37111: PPUSH
37112: PPUSH
// result := [ ] ;
37113: LD_ADDR_VAR 0 7
37117: PUSH
37118: EMPTY
37119: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
37120: LD_VAR 0 1
37124: PPUSH
37125: CALL_OW 266
37129: PUSH
37130: LD_INT 0
37132: PUSH
37133: LD_INT 1
37135: PUSH
37136: EMPTY
37137: LIST
37138: LIST
37139: IN
37140: NOT
37141: IFFALSE 37145
// exit ;
37143: GO 38785
// if name then
37145: LD_VAR 0 3
37149: IFFALSE 37165
// SetBName ( base_dep , name ) ;
37151: LD_VAR 0 1
37155: PPUSH
37156: LD_VAR 0 3
37160: PPUSH
37161: CALL_OW 500
// base := GetBase ( base_dep ) ;
37165: LD_ADDR_VAR 0 15
37169: PUSH
37170: LD_VAR 0 1
37174: PPUSH
37175: CALL_OW 274
37179: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
37180: LD_ADDR_VAR 0 16
37184: PUSH
37185: LD_VAR 0 1
37189: PPUSH
37190: CALL_OW 255
37194: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
37195: LD_ADDR_VAR 0 17
37199: PUSH
37200: LD_VAR 0 1
37204: PPUSH
37205: CALL_OW 248
37209: ST_TO_ADDR
// if sources then
37210: LD_VAR 0 5
37214: IFFALSE 37261
// for i = 1 to 3 do
37216: LD_ADDR_VAR 0 8
37220: PUSH
37221: DOUBLE
37222: LD_INT 1
37224: DEC
37225: ST_TO_ADDR
37226: LD_INT 3
37228: PUSH
37229: FOR_TO
37230: IFFALSE 37259
// AddResourceType ( base , i , sources [ i ] ) ;
37232: LD_VAR 0 15
37236: PPUSH
37237: LD_VAR 0 8
37241: PPUSH
37242: LD_VAR 0 5
37246: PUSH
37247: LD_VAR 0 8
37251: ARRAY
37252: PPUSH
37253: CALL_OW 276
37257: GO 37229
37259: POP
37260: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
37261: LD_ADDR_VAR 0 18
37265: PUSH
37266: LD_VAR 0 15
37270: PPUSH
37271: LD_VAR 0 2
37275: PPUSH
37276: LD_INT 1
37278: PPUSH
37279: CALL 36520 0 3
37283: ST_TO_ADDR
// InitHc ;
37284: CALL_OW 19
// InitUc ;
37288: CALL_OW 18
// uc_side := side ;
37292: LD_ADDR_OWVAR 20
37296: PUSH
37297: LD_VAR 0 16
37301: ST_TO_ADDR
// uc_nation := nation ;
37302: LD_ADDR_OWVAR 21
37306: PUSH
37307: LD_VAR 0 17
37311: ST_TO_ADDR
// if buildings then
37312: LD_VAR 0 18
37316: IFFALSE 38644
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
37318: LD_ADDR_VAR 0 19
37322: PUSH
37323: LD_VAR 0 18
37327: PPUSH
37328: LD_INT 2
37330: PUSH
37331: LD_INT 30
37333: PUSH
37334: LD_INT 29
37336: PUSH
37337: EMPTY
37338: LIST
37339: LIST
37340: PUSH
37341: LD_INT 30
37343: PUSH
37344: LD_INT 30
37346: PUSH
37347: EMPTY
37348: LIST
37349: LIST
37350: PUSH
37351: EMPTY
37352: LIST
37353: LIST
37354: LIST
37355: PPUSH
37356: CALL_OW 72
37360: ST_TO_ADDR
// if tmp then
37361: LD_VAR 0 19
37365: IFFALSE 37413
// for i in tmp do
37367: LD_ADDR_VAR 0 8
37371: PUSH
37372: LD_VAR 0 19
37376: PUSH
37377: FOR_IN
37378: IFFALSE 37411
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
37380: LD_VAR 0 8
37384: PPUSH
37385: CALL_OW 250
37389: PPUSH
37390: LD_VAR 0 8
37394: PPUSH
37395: CALL_OW 251
37399: PPUSH
37400: LD_VAR 0 16
37404: PPUSH
37405: CALL_OW 441
37409: GO 37377
37411: POP
37412: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
37413: LD_VAR 0 18
37417: PPUSH
37418: LD_INT 2
37420: PUSH
37421: LD_INT 30
37423: PUSH
37424: LD_INT 32
37426: PUSH
37427: EMPTY
37428: LIST
37429: LIST
37430: PUSH
37431: LD_INT 30
37433: PUSH
37434: LD_INT 33
37436: PUSH
37437: EMPTY
37438: LIST
37439: LIST
37440: PUSH
37441: EMPTY
37442: LIST
37443: LIST
37444: LIST
37445: PPUSH
37446: CALL_OW 72
37450: IFFALSE 37538
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
37452: LD_ADDR_VAR 0 8
37456: PUSH
37457: LD_VAR 0 18
37461: PPUSH
37462: LD_INT 2
37464: PUSH
37465: LD_INT 30
37467: PUSH
37468: LD_INT 32
37470: PUSH
37471: EMPTY
37472: LIST
37473: LIST
37474: PUSH
37475: LD_INT 30
37477: PUSH
37478: LD_INT 33
37480: PUSH
37481: EMPTY
37482: LIST
37483: LIST
37484: PUSH
37485: EMPTY
37486: LIST
37487: LIST
37488: LIST
37489: PPUSH
37490: CALL_OW 72
37494: PUSH
37495: FOR_IN
37496: IFFALSE 37536
// begin if not GetBWeapon ( i ) then
37498: LD_VAR 0 8
37502: PPUSH
37503: CALL_OW 269
37507: NOT
37508: IFFALSE 37534
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
37510: LD_VAR 0 8
37514: PPUSH
37515: LD_VAR 0 8
37519: PPUSH
37520: LD_VAR 0 2
37524: PPUSH
37525: CALL 38790 0 2
37529: PPUSH
37530: CALL_OW 431
// end ;
37534: GO 37495
37536: POP
37537: POP
// end ; for i = 1 to personel do
37538: LD_ADDR_VAR 0 8
37542: PUSH
37543: DOUBLE
37544: LD_INT 1
37546: DEC
37547: ST_TO_ADDR
37548: LD_VAR 0 6
37552: PUSH
37553: FOR_TO
37554: IFFALSE 38624
// begin if i > 4 then
37556: LD_VAR 0 8
37560: PUSH
37561: LD_INT 4
37563: GREATER
37564: IFFALSE 37568
// break ;
37566: GO 38624
// case i of 1 :
37568: LD_VAR 0 8
37572: PUSH
37573: LD_INT 1
37575: DOUBLE
37576: EQUAL
37577: IFTRUE 37581
37579: GO 37661
37581: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
37582: LD_ADDR_VAR 0 12
37586: PUSH
37587: LD_VAR 0 18
37591: PPUSH
37592: LD_INT 22
37594: PUSH
37595: LD_VAR 0 16
37599: PUSH
37600: EMPTY
37601: LIST
37602: LIST
37603: PUSH
37604: LD_INT 58
37606: PUSH
37607: EMPTY
37608: LIST
37609: PUSH
37610: LD_INT 2
37612: PUSH
37613: LD_INT 30
37615: PUSH
37616: LD_INT 32
37618: PUSH
37619: EMPTY
37620: LIST
37621: LIST
37622: PUSH
37623: LD_INT 30
37625: PUSH
37626: LD_INT 4
37628: PUSH
37629: EMPTY
37630: LIST
37631: LIST
37632: PUSH
37633: LD_INT 30
37635: PUSH
37636: LD_INT 5
37638: PUSH
37639: EMPTY
37640: LIST
37641: LIST
37642: PUSH
37643: EMPTY
37644: LIST
37645: LIST
37646: LIST
37647: LIST
37648: PUSH
37649: EMPTY
37650: LIST
37651: LIST
37652: LIST
37653: PPUSH
37654: CALL_OW 72
37658: ST_TO_ADDR
37659: GO 37883
37661: LD_INT 2
37663: DOUBLE
37664: EQUAL
37665: IFTRUE 37669
37667: GO 37731
37669: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
37670: LD_ADDR_VAR 0 12
37674: PUSH
37675: LD_VAR 0 18
37679: PPUSH
37680: LD_INT 22
37682: PUSH
37683: LD_VAR 0 16
37687: PUSH
37688: EMPTY
37689: LIST
37690: LIST
37691: PUSH
37692: LD_INT 2
37694: PUSH
37695: LD_INT 30
37697: PUSH
37698: LD_INT 0
37700: PUSH
37701: EMPTY
37702: LIST
37703: LIST
37704: PUSH
37705: LD_INT 30
37707: PUSH
37708: LD_INT 1
37710: PUSH
37711: EMPTY
37712: LIST
37713: LIST
37714: PUSH
37715: EMPTY
37716: LIST
37717: LIST
37718: LIST
37719: PUSH
37720: EMPTY
37721: LIST
37722: LIST
37723: PPUSH
37724: CALL_OW 72
37728: ST_TO_ADDR
37729: GO 37883
37731: LD_INT 3
37733: DOUBLE
37734: EQUAL
37735: IFTRUE 37739
37737: GO 37801
37739: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
37740: LD_ADDR_VAR 0 12
37744: PUSH
37745: LD_VAR 0 18
37749: PPUSH
37750: LD_INT 22
37752: PUSH
37753: LD_VAR 0 16
37757: PUSH
37758: EMPTY
37759: LIST
37760: LIST
37761: PUSH
37762: LD_INT 2
37764: PUSH
37765: LD_INT 30
37767: PUSH
37768: LD_INT 2
37770: PUSH
37771: EMPTY
37772: LIST
37773: LIST
37774: PUSH
37775: LD_INT 30
37777: PUSH
37778: LD_INT 3
37780: PUSH
37781: EMPTY
37782: LIST
37783: LIST
37784: PUSH
37785: EMPTY
37786: LIST
37787: LIST
37788: LIST
37789: PUSH
37790: EMPTY
37791: LIST
37792: LIST
37793: PPUSH
37794: CALL_OW 72
37798: ST_TO_ADDR
37799: GO 37883
37801: LD_INT 4
37803: DOUBLE
37804: EQUAL
37805: IFTRUE 37809
37807: GO 37882
37809: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
37810: LD_ADDR_VAR 0 12
37814: PUSH
37815: LD_VAR 0 18
37819: PPUSH
37820: LD_INT 22
37822: PUSH
37823: LD_VAR 0 16
37827: PUSH
37828: EMPTY
37829: LIST
37830: LIST
37831: PUSH
37832: LD_INT 2
37834: PUSH
37835: LD_INT 30
37837: PUSH
37838: LD_INT 6
37840: PUSH
37841: EMPTY
37842: LIST
37843: LIST
37844: PUSH
37845: LD_INT 30
37847: PUSH
37848: LD_INT 7
37850: PUSH
37851: EMPTY
37852: LIST
37853: LIST
37854: PUSH
37855: LD_INT 30
37857: PUSH
37858: LD_INT 8
37860: PUSH
37861: EMPTY
37862: LIST
37863: LIST
37864: PUSH
37865: EMPTY
37866: LIST
37867: LIST
37868: LIST
37869: LIST
37870: PUSH
37871: EMPTY
37872: LIST
37873: LIST
37874: PPUSH
37875: CALL_OW 72
37879: ST_TO_ADDR
37880: GO 37883
37882: POP
// if i = 1 then
37883: LD_VAR 0 8
37887: PUSH
37888: LD_INT 1
37890: EQUAL
37891: IFFALSE 38002
// begin tmp := [ ] ;
37893: LD_ADDR_VAR 0 19
37897: PUSH
37898: EMPTY
37899: ST_TO_ADDR
// for j in f do
37900: LD_ADDR_VAR 0 9
37904: PUSH
37905: LD_VAR 0 12
37909: PUSH
37910: FOR_IN
37911: IFFALSE 37984
// if GetBType ( j ) = b_bunker then
37913: LD_VAR 0 9
37917: PPUSH
37918: CALL_OW 266
37922: PUSH
37923: LD_INT 32
37925: EQUAL
37926: IFFALSE 37953
// tmp := Insert ( tmp , 1 , j ) else
37928: LD_ADDR_VAR 0 19
37932: PUSH
37933: LD_VAR 0 19
37937: PPUSH
37938: LD_INT 1
37940: PPUSH
37941: LD_VAR 0 9
37945: PPUSH
37946: CALL_OW 2
37950: ST_TO_ADDR
37951: GO 37982
// tmp := Insert ( tmp , tmp + 1 , j ) ;
37953: LD_ADDR_VAR 0 19
37957: PUSH
37958: LD_VAR 0 19
37962: PPUSH
37963: LD_VAR 0 19
37967: PUSH
37968: LD_INT 1
37970: PLUS
37971: PPUSH
37972: LD_VAR 0 9
37976: PPUSH
37977: CALL_OW 2
37981: ST_TO_ADDR
37982: GO 37910
37984: POP
37985: POP
// if tmp then
37986: LD_VAR 0 19
37990: IFFALSE 38002
// f := tmp ;
37992: LD_ADDR_VAR 0 12
37996: PUSH
37997: LD_VAR 0 19
38001: ST_TO_ADDR
// end ; x := personel [ i ] ;
38002: LD_ADDR_VAR 0 13
38006: PUSH
38007: LD_VAR 0 6
38011: PUSH
38012: LD_VAR 0 8
38016: ARRAY
38017: ST_TO_ADDR
// if x = - 1 then
38018: LD_VAR 0 13
38022: PUSH
38023: LD_INT 1
38025: NEG
38026: EQUAL
38027: IFFALSE 38238
// begin for j in f do
38029: LD_ADDR_VAR 0 9
38033: PUSH
38034: LD_VAR 0 12
38038: PUSH
38039: FOR_IN
38040: IFFALSE 38234
// repeat InitHc ;
38042: CALL_OW 19
// if GetBType ( j ) = b_barracks then
38046: LD_VAR 0 9
38050: PPUSH
38051: CALL_OW 266
38055: PUSH
38056: LD_INT 5
38058: EQUAL
38059: IFFALSE 38129
// begin if UnitsInside ( j ) < 3 then
38061: LD_VAR 0 9
38065: PPUSH
38066: CALL_OW 313
38070: PUSH
38071: LD_INT 3
38073: LESS
38074: IFFALSE 38110
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38076: LD_INT 0
38078: PPUSH
38079: LD_INT 5
38081: PUSH
38082: LD_INT 8
38084: PUSH
38085: LD_INT 9
38087: PUSH
38088: EMPTY
38089: LIST
38090: LIST
38091: LIST
38092: PUSH
38093: LD_VAR 0 17
38097: ARRAY
38098: PPUSH
38099: LD_VAR 0 4
38103: PPUSH
38104: CALL_OW 380
38108: GO 38127
// PrepareHuman ( false , i , skill ) ;
38110: LD_INT 0
38112: PPUSH
38113: LD_VAR 0 8
38117: PPUSH
38118: LD_VAR 0 4
38122: PPUSH
38123: CALL_OW 380
// end else
38127: GO 38146
// PrepareHuman ( false , i , skill ) ;
38129: LD_INT 0
38131: PPUSH
38132: LD_VAR 0 8
38136: PPUSH
38137: LD_VAR 0 4
38141: PPUSH
38142: CALL_OW 380
// un := CreateHuman ;
38146: LD_ADDR_VAR 0 14
38150: PUSH
38151: CALL_OW 44
38155: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38156: LD_ADDR_VAR 0 7
38160: PUSH
38161: LD_VAR 0 7
38165: PPUSH
38166: LD_INT 1
38168: PPUSH
38169: LD_VAR 0 14
38173: PPUSH
38174: CALL_OW 2
38178: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
38179: LD_VAR 0 14
38183: PPUSH
38184: LD_VAR 0 9
38188: PPUSH
38189: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
38193: LD_VAR 0 9
38197: PPUSH
38198: CALL_OW 313
38202: PUSH
38203: LD_INT 6
38205: EQUAL
38206: IFTRUE 38230
38208: PUSH
38209: LD_VAR 0 9
38213: PPUSH
38214: CALL_OW 266
38218: PUSH
38219: LD_INT 32
38221: PUSH
38222: LD_INT 31
38224: PUSH
38225: EMPTY
38226: LIST
38227: LIST
38228: IN
38229: OR
38230: IFFALSE 38042
38232: GO 38039
38234: POP
38235: POP
// end else
38236: GO 38622
// for j = 1 to x do
38238: LD_ADDR_VAR 0 9
38242: PUSH
38243: DOUBLE
38244: LD_INT 1
38246: DEC
38247: ST_TO_ADDR
38248: LD_VAR 0 13
38252: PUSH
38253: FOR_TO
38254: IFFALSE 38620
// begin InitHc ;
38256: CALL_OW 19
// if not f then
38260: LD_VAR 0 12
38264: NOT
38265: IFFALSE 38354
// begin PrepareHuman ( false , i , skill ) ;
38267: LD_INT 0
38269: PPUSH
38270: LD_VAR 0 8
38274: PPUSH
38275: LD_VAR 0 4
38279: PPUSH
38280: CALL_OW 380
// un := CreateHuman ;
38284: LD_ADDR_VAR 0 14
38288: PUSH
38289: CALL_OW 44
38293: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38294: LD_ADDR_VAR 0 7
38298: PUSH
38299: LD_VAR 0 7
38303: PPUSH
38304: LD_INT 1
38306: PPUSH
38307: LD_VAR 0 14
38311: PPUSH
38312: CALL_OW 2
38316: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38317: LD_VAR 0 14
38321: PPUSH
38322: LD_VAR 0 1
38326: PPUSH
38327: CALL_OW 250
38331: PPUSH
38332: LD_VAR 0 1
38336: PPUSH
38337: CALL_OW 251
38341: PPUSH
38342: LD_INT 10
38344: PPUSH
38345: LD_INT 0
38347: PPUSH
38348: CALL_OW 50
// continue ;
38352: GO 38253
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
38354: LD_VAR 0 12
38358: PUSH
38359: LD_INT 1
38361: ARRAY
38362: PPUSH
38363: CALL_OW 313
38367: IFFALSE 38395
38369: PUSH
38370: LD_VAR 0 12
38374: PUSH
38375: LD_INT 1
38377: ARRAY
38378: PPUSH
38379: CALL_OW 266
38383: PUSH
38384: LD_INT 32
38386: PUSH
38387: LD_INT 31
38389: PUSH
38390: EMPTY
38391: LIST
38392: LIST
38393: IN
38394: AND
38395: IFTRUE 38416
38397: PUSH
38398: LD_VAR 0 12
38402: PUSH
38403: LD_INT 1
38405: ARRAY
38406: PPUSH
38407: CALL_OW 313
38411: PUSH
38412: LD_INT 6
38414: EQUAL
38415: OR
38416: IFFALSE 38436
// f := Delete ( f , 1 ) ;
38418: LD_ADDR_VAR 0 12
38422: PUSH
38423: LD_VAR 0 12
38427: PPUSH
38428: LD_INT 1
38430: PPUSH
38431: CALL_OW 3
38435: ST_TO_ADDR
// if not f then
38436: LD_VAR 0 12
38440: NOT
38441: IFFALSE 38459
// begin x := x + 2 ;
38443: LD_ADDR_VAR 0 13
38447: PUSH
38448: LD_VAR 0 13
38452: PUSH
38453: LD_INT 2
38455: PLUS
38456: ST_TO_ADDR
// continue ;
38457: GO 38253
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
38459: LD_VAR 0 12
38463: PUSH
38464: LD_INT 1
38466: ARRAY
38467: PPUSH
38468: CALL_OW 266
38472: PUSH
38473: LD_INT 5
38475: EQUAL
38476: IFFALSE 38550
// begin if UnitsInside ( f [ 1 ] ) < 3 then
38478: LD_VAR 0 12
38482: PUSH
38483: LD_INT 1
38485: ARRAY
38486: PPUSH
38487: CALL_OW 313
38491: PUSH
38492: LD_INT 3
38494: LESS
38495: IFFALSE 38531
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38497: LD_INT 0
38499: PPUSH
38500: LD_INT 5
38502: PUSH
38503: LD_INT 8
38505: PUSH
38506: LD_INT 9
38508: PUSH
38509: EMPTY
38510: LIST
38511: LIST
38512: LIST
38513: PUSH
38514: LD_VAR 0 17
38518: ARRAY
38519: PPUSH
38520: LD_VAR 0 4
38524: PPUSH
38525: CALL_OW 380
38529: GO 38548
// PrepareHuman ( false , i , skill ) ;
38531: LD_INT 0
38533: PPUSH
38534: LD_VAR 0 8
38538: PPUSH
38539: LD_VAR 0 4
38543: PPUSH
38544: CALL_OW 380
// end else
38548: GO 38567
// PrepareHuman ( false , i , skill ) ;
38550: LD_INT 0
38552: PPUSH
38553: LD_VAR 0 8
38557: PPUSH
38558: LD_VAR 0 4
38562: PPUSH
38563: CALL_OW 380
// un := CreateHuman ;
38567: LD_ADDR_VAR 0 14
38571: PUSH
38572: CALL_OW 44
38576: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38577: LD_ADDR_VAR 0 7
38581: PUSH
38582: LD_VAR 0 7
38586: PPUSH
38587: LD_INT 1
38589: PPUSH
38590: LD_VAR 0 14
38594: PPUSH
38595: CALL_OW 2
38599: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
38600: LD_VAR 0 14
38604: PPUSH
38605: LD_VAR 0 12
38609: PUSH
38610: LD_INT 1
38612: ARRAY
38613: PPUSH
38614: CALL_OW 52
// end ;
38618: GO 38253
38620: POP
38621: POP
// end ;
38622: GO 37553
38624: POP
38625: POP
// result := result ^ buildings ;
38626: LD_ADDR_VAR 0 7
38630: PUSH
38631: LD_VAR 0 7
38635: PUSH
38636: LD_VAR 0 18
38640: ADD
38641: ST_TO_ADDR
// end else
38642: GO 38785
// begin for i = 1 to personel do
38644: LD_ADDR_VAR 0 8
38648: PUSH
38649: DOUBLE
38650: LD_INT 1
38652: DEC
38653: ST_TO_ADDR
38654: LD_VAR 0 6
38658: PUSH
38659: FOR_TO
38660: IFFALSE 38783
// begin if i > 4 then
38662: LD_VAR 0 8
38666: PUSH
38667: LD_INT 4
38669: GREATER
38670: IFFALSE 38674
// break ;
38672: GO 38783
// x := personel [ i ] ;
38674: LD_ADDR_VAR 0 13
38678: PUSH
38679: LD_VAR 0 6
38683: PUSH
38684: LD_VAR 0 8
38688: ARRAY
38689: ST_TO_ADDR
// if x = - 1 then
38690: LD_VAR 0 13
38694: PUSH
38695: LD_INT 1
38697: NEG
38698: EQUAL
38699: IFFALSE 38703
// continue ;
38701: GO 38659
// PrepareHuman ( false , i , skill ) ;
38703: LD_INT 0
38705: PPUSH
38706: LD_VAR 0 8
38710: PPUSH
38711: LD_VAR 0 4
38715: PPUSH
38716: CALL_OW 380
// un := CreateHuman ;
38720: LD_ADDR_VAR 0 14
38724: PUSH
38725: CALL_OW 44
38729: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38730: LD_VAR 0 14
38734: PPUSH
38735: LD_VAR 0 1
38739: PPUSH
38740: CALL_OW 250
38744: PPUSH
38745: LD_VAR 0 1
38749: PPUSH
38750: CALL_OW 251
38754: PPUSH
38755: LD_INT 10
38757: PPUSH
38758: LD_INT 0
38760: PPUSH
38761: CALL_OW 50
// result := result ^ un ;
38765: LD_ADDR_VAR 0 7
38769: PUSH
38770: LD_VAR 0 7
38774: PUSH
38775: LD_VAR 0 14
38779: ADD
38780: ST_TO_ADDR
// end ;
38781: GO 38659
38783: POP
38784: POP
// end ; end ;
38785: LD_VAR 0 7
38789: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
38790: LD_INT 0
38792: PPUSH
38793: PPUSH
38794: PPUSH
38795: PPUSH
38796: PPUSH
38797: PPUSH
38798: PPUSH
38799: PPUSH
38800: PPUSH
38801: PPUSH
38802: PPUSH
38803: PPUSH
38804: PPUSH
38805: PPUSH
38806: PPUSH
38807: PPUSH
// result := false ;
38808: LD_ADDR_VAR 0 3
38812: PUSH
38813: LD_INT 0
38815: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
38816: LD_VAR 0 1
38820: NOT
38821: IFTRUE 38846
38823: PUSH
38824: LD_VAR 0 1
38828: PPUSH
38829: CALL_OW 266
38833: PUSH
38834: LD_INT 32
38836: PUSH
38837: LD_INT 33
38839: PUSH
38840: EMPTY
38841: LIST
38842: LIST
38843: IN
38844: NOT
38845: OR
38846: IFFALSE 38850
// exit ;
38848: GO 39985
// nat := GetNation ( tower ) ;
38850: LD_ADDR_VAR 0 12
38854: PUSH
38855: LD_VAR 0 1
38859: PPUSH
38860: CALL_OW 248
38864: ST_TO_ADDR
// side := GetSide ( tower ) ;
38865: LD_ADDR_VAR 0 16
38869: PUSH
38870: LD_VAR 0 1
38874: PPUSH
38875: CALL_OW 255
38879: ST_TO_ADDR
// x := GetX ( tower ) ;
38880: LD_ADDR_VAR 0 10
38884: PUSH
38885: LD_VAR 0 1
38889: PPUSH
38890: CALL_OW 250
38894: ST_TO_ADDR
// y := GetY ( tower ) ;
38895: LD_ADDR_VAR 0 11
38899: PUSH
38900: LD_VAR 0 1
38904: PPUSH
38905: CALL_OW 251
38909: ST_TO_ADDR
// if not x or not y then
38910: LD_VAR 0 10
38914: NOT
38915: IFTRUE 38924
38917: PUSH
38918: LD_VAR 0 11
38922: NOT
38923: OR
38924: IFFALSE 38928
// exit ;
38926: GO 39985
// weapon := 0 ;
38928: LD_ADDR_VAR 0 18
38932: PUSH
38933: LD_INT 0
38935: ST_TO_ADDR
// fac_list := [ ] ;
38936: LD_ADDR_VAR 0 17
38940: PUSH
38941: EMPTY
38942: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
38943: LD_ADDR_VAR 0 6
38947: PUSH
38948: LD_VAR 0 1
38952: PPUSH
38953: CALL_OW 274
38957: PPUSH
38958: LD_VAR 0 2
38962: PPUSH
38963: LD_INT 0
38965: PPUSH
38966: CALL 36520 0 3
38970: PPUSH
38971: LD_INT 30
38973: PUSH
38974: LD_INT 3
38976: PUSH
38977: EMPTY
38978: LIST
38979: LIST
38980: PPUSH
38981: CALL_OW 72
38985: ST_TO_ADDR
// if not factories then
38986: LD_VAR 0 6
38990: NOT
38991: IFFALSE 38995
// exit ;
38993: GO 39985
// for i in factories do
38995: LD_ADDR_VAR 0 8
38999: PUSH
39000: LD_VAR 0 6
39004: PUSH
39005: FOR_IN
39006: IFFALSE 39031
// fac_list := fac_list union AvailableWeaponList ( i ) ;
39008: LD_ADDR_VAR 0 17
39012: PUSH
39013: LD_VAR 0 17
39017: PUSH
39018: LD_VAR 0 8
39022: PPUSH
39023: CALL_OW 478
39027: UNION
39028: ST_TO_ADDR
39029: GO 39005
39031: POP
39032: POP
// if not fac_list then
39033: LD_VAR 0 17
39037: NOT
39038: IFFALSE 39042
// exit ;
39040: GO 39985
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
39042: LD_ADDR_VAR 0 5
39046: PUSH
39047: LD_INT 4
39049: PUSH
39050: LD_INT 5
39052: PUSH
39053: LD_INT 9
39055: PUSH
39056: LD_INT 10
39058: PUSH
39059: LD_INT 6
39061: PUSH
39062: LD_INT 7
39064: PUSH
39065: LD_INT 11
39067: PUSH
39068: EMPTY
39069: LIST
39070: LIST
39071: LIST
39072: LIST
39073: LIST
39074: LIST
39075: LIST
39076: PUSH
39077: LD_INT 27
39079: PUSH
39080: LD_INT 28
39082: PUSH
39083: LD_INT 26
39085: PUSH
39086: LD_INT 30
39088: PUSH
39089: EMPTY
39090: LIST
39091: LIST
39092: LIST
39093: LIST
39094: PUSH
39095: LD_INT 43
39097: PUSH
39098: LD_INT 44
39100: PUSH
39101: LD_INT 46
39103: PUSH
39104: LD_INT 45
39106: PUSH
39107: LD_INT 47
39109: PUSH
39110: LD_INT 49
39112: PUSH
39113: EMPTY
39114: LIST
39115: LIST
39116: LIST
39117: LIST
39118: LIST
39119: LIST
39120: PUSH
39121: EMPTY
39122: LIST
39123: LIST
39124: LIST
39125: PUSH
39126: LD_VAR 0 12
39130: ARRAY
39131: ST_TO_ADDR
// list := list isect fac_list ;
39132: LD_ADDR_VAR 0 5
39136: PUSH
39137: LD_VAR 0 5
39141: PUSH
39142: LD_VAR 0 17
39146: ISECT
39147: ST_TO_ADDR
// if not list then
39148: LD_VAR 0 5
39152: NOT
39153: IFFALSE 39157
// exit ;
39155: GO 39985
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
39157: LD_VAR 0 12
39161: PUSH
39162: LD_INT 3
39164: EQUAL
39165: IFFALSE 39177
39167: PUSH
39168: LD_INT 49
39170: PUSH
39171: LD_VAR 0 5
39175: IN
39176: AND
39177: IFFALSE 39197
39179: PUSH
39180: LD_INT 31
39182: PPUSH
39183: LD_VAR 0 16
39187: PPUSH
39188: CALL_OW 321
39192: PUSH
39193: LD_INT 2
39195: EQUAL
39196: AND
39197: IFFALSE 39257
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
39199: LD_INT 22
39201: PUSH
39202: LD_VAR 0 16
39206: PUSH
39207: EMPTY
39208: LIST
39209: LIST
39210: PUSH
39211: LD_INT 35
39213: PUSH
39214: LD_INT 49
39216: PUSH
39217: EMPTY
39218: LIST
39219: LIST
39220: PUSH
39221: LD_INT 91
39223: PUSH
39224: LD_VAR 0 1
39228: PUSH
39229: LD_INT 10
39231: PUSH
39232: EMPTY
39233: LIST
39234: LIST
39235: LIST
39236: PUSH
39237: EMPTY
39238: LIST
39239: LIST
39240: LIST
39241: PPUSH
39242: CALL_OW 69
39246: NOT
39247: IFFALSE 39257
// weapon := ru_time_lapser ;
39249: LD_ADDR_VAR 0 18
39253: PUSH
39254: LD_INT 49
39256: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
39257: LD_VAR 0 12
39261: PUSH
39262: LD_INT 1
39264: PUSH
39265: LD_INT 2
39267: PUSH
39268: EMPTY
39269: LIST
39270: LIST
39271: IN
39272: IFFALSE 39296
39274: PUSH
39275: LD_INT 11
39277: PUSH
39278: LD_VAR 0 5
39282: IN
39283: IFTRUE 39295
39285: PUSH
39286: LD_INT 30
39288: PUSH
39289: LD_VAR 0 5
39293: IN
39294: OR
39295: AND
39296: IFFALSE 39316
39298: PUSH
39299: LD_INT 6
39301: PPUSH
39302: LD_VAR 0 16
39306: PPUSH
39307: CALL_OW 321
39311: PUSH
39312: LD_INT 2
39314: EQUAL
39315: AND
39316: IFFALSE 39483
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
39318: LD_INT 22
39320: PUSH
39321: LD_VAR 0 16
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: PUSH
39330: LD_INT 2
39332: PUSH
39333: LD_INT 35
39335: PUSH
39336: LD_INT 11
39338: PUSH
39339: EMPTY
39340: LIST
39341: LIST
39342: PUSH
39343: LD_INT 35
39345: PUSH
39346: LD_INT 30
39348: PUSH
39349: EMPTY
39350: LIST
39351: LIST
39352: PUSH
39353: EMPTY
39354: LIST
39355: LIST
39356: LIST
39357: PUSH
39358: LD_INT 91
39360: PUSH
39361: LD_VAR 0 1
39365: PUSH
39366: LD_INT 18
39368: PUSH
39369: EMPTY
39370: LIST
39371: LIST
39372: LIST
39373: PUSH
39374: EMPTY
39375: LIST
39376: LIST
39377: LIST
39378: PPUSH
39379: CALL_OW 69
39383: NOT
39384: IFFALSE 39460
39386: PUSH
39387: LD_INT 22
39389: PUSH
39390: LD_VAR 0 16
39394: PUSH
39395: EMPTY
39396: LIST
39397: LIST
39398: PUSH
39399: LD_INT 2
39401: PUSH
39402: LD_INT 30
39404: PUSH
39405: LD_INT 32
39407: PUSH
39408: EMPTY
39409: LIST
39410: LIST
39411: PUSH
39412: LD_INT 30
39414: PUSH
39415: LD_INT 33
39417: PUSH
39418: EMPTY
39419: LIST
39420: LIST
39421: PUSH
39422: EMPTY
39423: LIST
39424: LIST
39425: LIST
39426: PUSH
39427: LD_INT 91
39429: PUSH
39430: LD_VAR 0 1
39434: PUSH
39435: LD_INT 12
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: LIST
39442: PUSH
39443: EMPTY
39444: LIST
39445: LIST
39446: LIST
39447: PUSH
39448: EMPTY
39449: LIST
39450: PPUSH
39451: CALL_OW 69
39455: PUSH
39456: LD_INT 2
39458: GREATER
39459: AND
39460: IFFALSE 39483
// weapon := [ us_radar , ar_radar ] [ nat ] ;
39462: LD_ADDR_VAR 0 18
39466: PUSH
39467: LD_INT 11
39469: PUSH
39470: LD_INT 30
39472: PUSH
39473: EMPTY
39474: LIST
39475: LIST
39476: PUSH
39477: LD_VAR 0 12
39481: ARRAY
39482: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
39483: LD_VAR 0 18
39487: NOT
39488: IFFALSE 39508
39490: PUSH
39491: LD_INT 40
39493: PPUSH
39494: LD_VAR 0 16
39498: PPUSH
39499: CALL_OW 321
39503: PUSH
39504: LD_INT 2
39506: EQUAL
39507: AND
39508: IFFALSE 39544
39510: PUSH
39511: LD_INT 7
39513: PUSH
39514: LD_VAR 0 5
39518: IN
39519: IFTRUE 39531
39521: PUSH
39522: LD_INT 28
39524: PUSH
39525: LD_VAR 0 5
39529: IN
39530: OR
39531: IFTRUE 39543
39533: PUSH
39534: LD_INT 45
39536: PUSH
39537: LD_VAR 0 5
39541: IN
39542: OR
39543: AND
39544: IFFALSE 39798
// begin hex := GetHexInfo ( x , y ) ;
39546: LD_ADDR_VAR 0 4
39550: PUSH
39551: LD_VAR 0 10
39555: PPUSH
39556: LD_VAR 0 11
39560: PPUSH
39561: CALL_OW 546
39565: ST_TO_ADDR
// if hex [ 1 ] then
39566: LD_VAR 0 4
39570: PUSH
39571: LD_INT 1
39573: ARRAY
39574: IFFALSE 39578
// exit ;
39576: GO 39985
// height := hex [ 2 ] ;
39578: LD_ADDR_VAR 0 15
39582: PUSH
39583: LD_VAR 0 4
39587: PUSH
39588: LD_INT 2
39590: ARRAY
39591: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
39592: LD_ADDR_VAR 0 14
39596: PUSH
39597: LD_INT 0
39599: PUSH
39600: LD_INT 2
39602: PUSH
39603: LD_INT 3
39605: PUSH
39606: LD_INT 5
39608: PUSH
39609: EMPTY
39610: LIST
39611: LIST
39612: LIST
39613: LIST
39614: ST_TO_ADDR
// for i in tmp do
39615: LD_ADDR_VAR 0 8
39619: PUSH
39620: LD_VAR 0 14
39624: PUSH
39625: FOR_IN
39626: IFFALSE 39796
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
39628: LD_ADDR_VAR 0 9
39632: PUSH
39633: LD_VAR 0 10
39637: PPUSH
39638: LD_VAR 0 8
39642: PPUSH
39643: LD_INT 5
39645: PPUSH
39646: CALL_OW 272
39650: PUSH
39651: LD_VAR 0 11
39655: PPUSH
39656: LD_VAR 0 8
39660: PPUSH
39661: LD_INT 5
39663: PPUSH
39664: CALL_OW 273
39668: PUSH
39669: EMPTY
39670: LIST
39671: LIST
39672: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
39673: LD_VAR 0 9
39677: PUSH
39678: LD_INT 1
39680: ARRAY
39681: PPUSH
39682: LD_VAR 0 9
39686: PUSH
39687: LD_INT 2
39689: ARRAY
39690: PPUSH
39691: CALL_OW 488
39695: IFFALSE 39794
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
39697: LD_ADDR_VAR 0 4
39701: PUSH
39702: LD_VAR 0 9
39706: PUSH
39707: LD_INT 1
39709: ARRAY
39710: PPUSH
39711: LD_VAR 0 9
39715: PUSH
39716: LD_INT 2
39718: ARRAY
39719: PPUSH
39720: CALL_OW 546
39724: ST_TO_ADDR
// if hex [ 1 ] then
39725: LD_VAR 0 4
39729: PUSH
39730: LD_INT 1
39732: ARRAY
39733: IFFALSE 39737
// continue ;
39735: GO 39625
// h := hex [ 2 ] ;
39737: LD_ADDR_VAR 0 13
39741: PUSH
39742: LD_VAR 0 4
39746: PUSH
39747: LD_INT 2
39749: ARRAY
39750: ST_TO_ADDR
// if h + 7 < height then
39751: LD_VAR 0 13
39755: PUSH
39756: LD_INT 7
39758: PLUS
39759: PUSH
39760: LD_VAR 0 15
39764: LESS
39765: IFFALSE 39794
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
39767: LD_ADDR_VAR 0 18
39771: PUSH
39772: LD_INT 7
39774: PUSH
39775: LD_INT 28
39777: PUSH
39778: LD_INT 45
39780: PUSH
39781: EMPTY
39782: LIST
39783: LIST
39784: LIST
39785: PUSH
39786: LD_VAR 0 12
39790: ARRAY
39791: ST_TO_ADDR
// break ;
39792: GO 39796
// end ; end ; end ;
39794: GO 39625
39796: POP
39797: POP
// end ; if not weapon then
39798: LD_VAR 0 18
39802: NOT
39803: IFFALSE 39863
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
39805: LD_ADDR_VAR 0 5
39809: PUSH
39810: LD_VAR 0 5
39814: PUSH
39815: LD_INT 11
39817: PUSH
39818: LD_INT 30
39820: PUSH
39821: LD_INT 49
39823: PUSH
39824: EMPTY
39825: LIST
39826: LIST
39827: LIST
39828: DIFF
39829: ST_TO_ADDR
// if not list then
39830: LD_VAR 0 5
39834: NOT
39835: IFFALSE 39839
// exit ;
39837: GO 39985
// weapon := list [ rand ( 1 , list ) ] ;
39839: LD_ADDR_VAR 0 18
39843: PUSH
39844: LD_VAR 0 5
39848: PUSH
39849: LD_INT 1
39851: PPUSH
39852: LD_VAR 0 5
39856: PPUSH
39857: CALL_OW 12
39861: ARRAY
39862: ST_TO_ADDR
// end ; if weapon then
39863: LD_VAR 0 18
39867: IFFALSE 39985
// begin tmp := CostOfWeapon ( weapon ) ;
39869: LD_ADDR_VAR 0 14
39873: PUSH
39874: LD_VAR 0 18
39878: PPUSH
39879: CALL_OW 451
39883: ST_TO_ADDR
// j := GetBase ( tower ) ;
39884: LD_ADDR_VAR 0 9
39888: PUSH
39889: LD_VAR 0 1
39893: PPUSH
39894: CALL_OW 274
39898: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
39899: LD_VAR 0 9
39903: PPUSH
39904: LD_INT 1
39906: PPUSH
39907: CALL_OW 275
39911: PUSH
39912: LD_VAR 0 14
39916: PUSH
39917: LD_INT 1
39919: ARRAY
39920: GREATEREQUAL
39921: IFFALSE 39947
39923: PUSH
39924: LD_VAR 0 9
39928: PPUSH
39929: LD_INT 2
39931: PPUSH
39932: CALL_OW 275
39936: PUSH
39937: LD_VAR 0 14
39941: PUSH
39942: LD_INT 2
39944: ARRAY
39945: GREATEREQUAL
39946: AND
39947: IFFALSE 39973
39949: PUSH
39950: LD_VAR 0 9
39954: PPUSH
39955: LD_INT 3
39957: PPUSH
39958: CALL_OW 275
39962: PUSH
39963: LD_VAR 0 14
39967: PUSH
39968: LD_INT 3
39970: ARRAY
39971: GREATEREQUAL
39972: AND
39973: IFFALSE 39985
// result := weapon ;
39975: LD_ADDR_VAR 0 3
39979: PUSH
39980: LD_VAR 0 18
39984: ST_TO_ADDR
// end ; end ;
39985: LD_VAR 0 3
39989: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
39990: LD_INT 0
39992: PPUSH
39993: PPUSH
// result := true ;
39994: LD_ADDR_VAR 0 3
39998: PUSH
39999: LD_INT 1
40001: ST_TO_ADDR
// if array1 = array2 then
40002: LD_VAR 0 1
40006: PUSH
40007: LD_VAR 0 2
40011: EQUAL
40012: IFFALSE 40072
// begin for i = 1 to array1 do
40014: LD_ADDR_VAR 0 4
40018: PUSH
40019: DOUBLE
40020: LD_INT 1
40022: DEC
40023: ST_TO_ADDR
40024: LD_VAR 0 1
40028: PUSH
40029: FOR_TO
40030: IFFALSE 40068
// if array1 [ i ] <> array2 [ i ] then
40032: LD_VAR 0 1
40036: PUSH
40037: LD_VAR 0 4
40041: ARRAY
40042: PUSH
40043: LD_VAR 0 2
40047: PUSH
40048: LD_VAR 0 4
40052: ARRAY
40053: NONEQUAL
40054: IFFALSE 40066
// begin result := false ;
40056: LD_ADDR_VAR 0 3
40060: PUSH
40061: LD_INT 0
40063: ST_TO_ADDR
// break ;
40064: GO 40068
// end ;
40066: GO 40029
40068: POP
40069: POP
// end else
40070: GO 40080
// result := false ;
40072: LD_ADDR_VAR 0 3
40076: PUSH
40077: LD_INT 0
40079: ST_TO_ADDR
// end ;
40080: LD_VAR 0 3
40084: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
40085: LD_INT 0
40087: PPUSH
40088: PPUSH
// if not array1 or not array2 then
40089: LD_VAR 0 1
40093: NOT
40094: IFTRUE 40103
40096: PUSH
40097: LD_VAR 0 2
40101: NOT
40102: OR
40103: IFFALSE 40107
// exit ;
40105: GO 40171
// result := true ;
40107: LD_ADDR_VAR 0 3
40111: PUSH
40112: LD_INT 1
40114: ST_TO_ADDR
// for i = 1 to array1 do
40115: LD_ADDR_VAR 0 4
40119: PUSH
40120: DOUBLE
40121: LD_INT 1
40123: DEC
40124: ST_TO_ADDR
40125: LD_VAR 0 1
40129: PUSH
40130: FOR_TO
40131: IFFALSE 40169
// if array1 [ i ] <> array2 [ i ] then
40133: LD_VAR 0 1
40137: PUSH
40138: LD_VAR 0 4
40142: ARRAY
40143: PUSH
40144: LD_VAR 0 2
40148: PUSH
40149: LD_VAR 0 4
40153: ARRAY
40154: NONEQUAL
40155: IFFALSE 40167
// begin result := false ;
40157: LD_ADDR_VAR 0 3
40161: PUSH
40162: LD_INT 0
40164: ST_TO_ADDR
// break ;
40165: GO 40169
// end ;
40167: GO 40130
40169: POP
40170: POP
// end ;
40171: LD_VAR 0 3
40175: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
40176: LD_INT 0
40178: PPUSH
40179: PPUSH
40180: PPUSH
// pom := GetBase ( fac ) ;
40181: LD_ADDR_VAR 0 5
40185: PUSH
40186: LD_VAR 0 1
40190: PPUSH
40191: CALL_OW 274
40195: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
40196: LD_ADDR_VAR 0 4
40200: PUSH
40201: LD_VAR 0 2
40205: PUSH
40206: LD_INT 1
40208: ARRAY
40209: PPUSH
40210: LD_VAR 0 2
40214: PUSH
40215: LD_INT 2
40217: ARRAY
40218: PPUSH
40219: LD_VAR 0 2
40223: PUSH
40224: LD_INT 3
40226: ARRAY
40227: PPUSH
40228: LD_VAR 0 2
40232: PUSH
40233: LD_INT 4
40235: ARRAY
40236: PPUSH
40237: CALL_OW 449
40241: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40242: LD_ADDR_VAR 0 3
40246: PUSH
40247: LD_VAR 0 5
40251: PPUSH
40252: LD_INT 1
40254: PPUSH
40255: CALL_OW 275
40259: PUSH
40260: LD_VAR 0 4
40264: PUSH
40265: LD_INT 1
40267: ARRAY
40268: GREATEREQUAL
40269: IFFALSE 40295
40271: PUSH
40272: LD_VAR 0 5
40276: PPUSH
40277: LD_INT 2
40279: PPUSH
40280: CALL_OW 275
40284: PUSH
40285: LD_VAR 0 4
40289: PUSH
40290: LD_INT 2
40292: ARRAY
40293: GREATEREQUAL
40294: AND
40295: IFFALSE 40321
40297: PUSH
40298: LD_VAR 0 5
40302: PPUSH
40303: LD_INT 3
40305: PPUSH
40306: CALL_OW 275
40310: PUSH
40311: LD_VAR 0 4
40315: PUSH
40316: LD_INT 3
40318: ARRAY
40319: GREATEREQUAL
40320: AND
40321: ST_TO_ADDR
// end ;
40322: LD_VAR 0 3
40326: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
40327: LD_INT 0
40329: PPUSH
40330: PPUSH
40331: PPUSH
40332: PPUSH
// pom := GetBase ( building ) ;
40333: LD_ADDR_VAR 0 3
40337: PUSH
40338: LD_VAR 0 1
40342: PPUSH
40343: CALL_OW 274
40347: ST_TO_ADDR
// if not pom then
40348: LD_VAR 0 3
40352: NOT
40353: IFFALSE 40357
// exit ;
40355: GO 40531
// btype := GetBType ( building ) ;
40357: LD_ADDR_VAR 0 5
40361: PUSH
40362: LD_VAR 0 1
40366: PPUSH
40367: CALL_OW 266
40371: ST_TO_ADDR
// if btype = b_armoury then
40372: LD_VAR 0 5
40376: PUSH
40377: LD_INT 4
40379: EQUAL
40380: IFFALSE 40390
// btype := b_barracks ;
40382: LD_ADDR_VAR 0 5
40386: PUSH
40387: LD_INT 5
40389: ST_TO_ADDR
// if btype = b_depot then
40390: LD_VAR 0 5
40394: PUSH
40395: LD_INT 0
40397: EQUAL
40398: IFFALSE 40408
// btype := b_warehouse ;
40400: LD_ADDR_VAR 0 5
40404: PUSH
40405: LD_INT 1
40407: ST_TO_ADDR
// if btype = b_workshop then
40408: LD_VAR 0 5
40412: PUSH
40413: LD_INT 2
40415: EQUAL
40416: IFFALSE 40426
// btype := b_factory ;
40418: LD_ADDR_VAR 0 5
40422: PUSH
40423: LD_INT 3
40425: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40426: LD_ADDR_VAR 0 4
40430: PUSH
40431: LD_VAR 0 5
40435: PPUSH
40436: LD_VAR 0 1
40440: PPUSH
40441: CALL_OW 248
40445: PPUSH
40446: CALL_OW 450
40450: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40451: LD_ADDR_VAR 0 2
40455: PUSH
40456: LD_VAR 0 3
40460: PPUSH
40461: LD_INT 1
40463: PPUSH
40464: CALL_OW 275
40468: PUSH
40469: LD_VAR 0 4
40473: PUSH
40474: LD_INT 1
40476: ARRAY
40477: GREATEREQUAL
40478: IFFALSE 40504
40480: PUSH
40481: LD_VAR 0 3
40485: PPUSH
40486: LD_INT 2
40488: PPUSH
40489: CALL_OW 275
40493: PUSH
40494: LD_VAR 0 4
40498: PUSH
40499: LD_INT 2
40501: ARRAY
40502: GREATEREQUAL
40503: AND
40504: IFFALSE 40530
40506: PUSH
40507: LD_VAR 0 3
40511: PPUSH
40512: LD_INT 3
40514: PPUSH
40515: CALL_OW 275
40519: PUSH
40520: LD_VAR 0 4
40524: PUSH
40525: LD_INT 3
40527: ARRAY
40528: GREATEREQUAL
40529: AND
40530: ST_TO_ADDR
// end ;
40531: LD_VAR 0 2
40535: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
40536: LD_INT 0
40538: PPUSH
40539: PPUSH
40540: PPUSH
// pom := GetBase ( building ) ;
40541: LD_ADDR_VAR 0 4
40545: PUSH
40546: LD_VAR 0 1
40550: PPUSH
40551: CALL_OW 274
40555: ST_TO_ADDR
// if not pom then
40556: LD_VAR 0 4
40560: NOT
40561: IFFALSE 40565
// exit ;
40563: GO 40670
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40565: LD_ADDR_VAR 0 5
40569: PUSH
40570: LD_VAR 0 2
40574: PPUSH
40575: LD_VAR 0 1
40579: PPUSH
40580: CALL_OW 248
40584: PPUSH
40585: CALL_OW 450
40589: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40590: LD_ADDR_VAR 0 3
40594: PUSH
40595: LD_VAR 0 4
40599: PPUSH
40600: LD_INT 1
40602: PPUSH
40603: CALL_OW 275
40607: PUSH
40608: LD_VAR 0 5
40612: PUSH
40613: LD_INT 1
40615: ARRAY
40616: GREATEREQUAL
40617: IFFALSE 40643
40619: PUSH
40620: LD_VAR 0 4
40624: PPUSH
40625: LD_INT 2
40627: PPUSH
40628: CALL_OW 275
40632: PUSH
40633: LD_VAR 0 5
40637: PUSH
40638: LD_INT 2
40640: ARRAY
40641: GREATEREQUAL
40642: AND
40643: IFFALSE 40669
40645: PUSH
40646: LD_VAR 0 4
40650: PPUSH
40651: LD_INT 3
40653: PPUSH
40654: CALL_OW 275
40658: PUSH
40659: LD_VAR 0 5
40663: PUSH
40664: LD_INT 3
40666: ARRAY
40667: GREATEREQUAL
40668: AND
40669: ST_TO_ADDR
// end ;
40670: LD_VAR 0 3
40674: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
40675: LD_INT 0
40677: PPUSH
40678: PPUSH
40679: PPUSH
40680: PPUSH
40681: PPUSH
40682: PPUSH
40683: PPUSH
40684: PPUSH
40685: PPUSH
40686: PPUSH
40687: PPUSH
// result := false ;
40688: LD_ADDR_VAR 0 8
40692: PUSH
40693: LD_INT 0
40695: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
40696: LD_VAR 0 5
40700: NOT
40701: IFTRUE 40710
40703: PUSH
40704: LD_VAR 0 1
40708: NOT
40709: OR
40710: IFTRUE 40719
40712: PUSH
40713: LD_VAR 0 2
40717: NOT
40718: OR
40719: IFTRUE 40728
40721: PUSH
40722: LD_VAR 0 3
40726: NOT
40727: OR
40728: IFFALSE 40732
// exit ;
40730: GO 41558
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
40732: LD_ADDR_VAR 0 14
40736: PUSH
40737: LD_VAR 0 1
40741: PPUSH
40742: LD_VAR 0 2
40746: PPUSH
40747: LD_VAR 0 3
40751: PPUSH
40752: LD_VAR 0 4
40756: PPUSH
40757: LD_VAR 0 5
40761: PUSH
40762: LD_INT 1
40764: ARRAY
40765: PPUSH
40766: CALL_OW 248
40770: PPUSH
40771: LD_INT 0
40773: PPUSH
40774: CALL 42839 0 6
40778: ST_TO_ADDR
// if not hexes then
40779: LD_VAR 0 14
40783: NOT
40784: IFFALSE 40788
// exit ;
40786: GO 41558
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40788: LD_ADDR_VAR 0 17
40792: PUSH
40793: LD_VAR 0 5
40797: PPUSH
40798: LD_INT 22
40800: PUSH
40801: LD_VAR 0 13
40805: PPUSH
40806: CALL_OW 255
40810: PUSH
40811: EMPTY
40812: LIST
40813: LIST
40814: PUSH
40815: LD_INT 2
40817: PUSH
40818: LD_INT 30
40820: PUSH
40821: LD_INT 0
40823: PUSH
40824: EMPTY
40825: LIST
40826: LIST
40827: PUSH
40828: LD_INT 30
40830: PUSH
40831: LD_INT 1
40833: PUSH
40834: EMPTY
40835: LIST
40836: LIST
40837: PUSH
40838: EMPTY
40839: LIST
40840: LIST
40841: LIST
40842: PUSH
40843: EMPTY
40844: LIST
40845: LIST
40846: PPUSH
40847: CALL_OW 72
40851: ST_TO_ADDR
// for i = 1 to hexes do
40852: LD_ADDR_VAR 0 9
40856: PUSH
40857: DOUBLE
40858: LD_INT 1
40860: DEC
40861: ST_TO_ADDR
40862: LD_VAR 0 14
40866: PUSH
40867: FOR_TO
40868: IFFALSE 41556
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40870: LD_ADDR_VAR 0 13
40874: PUSH
40875: LD_VAR 0 14
40879: PUSH
40880: LD_VAR 0 9
40884: ARRAY
40885: PUSH
40886: LD_INT 1
40888: ARRAY
40889: PPUSH
40890: LD_VAR 0 14
40894: PUSH
40895: LD_VAR 0 9
40899: ARRAY
40900: PUSH
40901: LD_INT 2
40903: ARRAY
40904: PPUSH
40905: CALL_OW 428
40909: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
40910: LD_VAR 0 14
40914: PUSH
40915: LD_VAR 0 9
40919: ARRAY
40920: PUSH
40921: LD_INT 1
40923: ARRAY
40924: PPUSH
40925: LD_VAR 0 14
40929: PUSH
40930: LD_VAR 0 9
40934: ARRAY
40935: PUSH
40936: LD_INT 2
40938: ARRAY
40939: PPUSH
40940: CALL_OW 351
40944: IFTRUE 40983
40946: PUSH
40947: LD_VAR 0 14
40951: PUSH
40952: LD_VAR 0 9
40956: ARRAY
40957: PUSH
40958: LD_INT 1
40960: ARRAY
40961: PPUSH
40962: LD_VAR 0 14
40966: PUSH
40967: LD_VAR 0 9
40971: ARRAY
40972: PUSH
40973: LD_INT 2
40975: ARRAY
40976: PPUSH
40977: CALL_OW 488
40981: NOT
40982: OR
40983: IFTRUE 41000
40985: PUSH
40986: LD_VAR 0 13
40990: PPUSH
40991: CALL_OW 247
40995: PUSH
40996: LD_INT 3
40998: EQUAL
40999: OR
41000: IFFALSE 41006
// exit ;
41002: POP
41003: POP
41004: GO 41558
// if not tmp then
41006: LD_VAR 0 13
41010: NOT
41011: IFFALSE 41015
// continue ;
41013: GO 40867
// result := true ;
41015: LD_ADDR_VAR 0 8
41019: PUSH
41020: LD_INT 1
41022: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
41023: LD_VAR 0 6
41027: IFFALSE 41044
41029: PUSH
41030: LD_VAR 0 13
41034: PPUSH
41035: CALL_OW 247
41039: PUSH
41040: LD_INT 2
41042: EQUAL
41043: AND
41044: IFFALSE 41061
41046: PUSH
41047: LD_VAR 0 13
41051: PPUSH
41052: CALL_OW 263
41056: PUSH
41057: LD_INT 1
41059: EQUAL
41060: AND
41061: IFFALSE 41225
// begin if IsDrivenBy ( tmp ) then
41063: LD_VAR 0 13
41067: PPUSH
41068: CALL_OW 311
41072: IFFALSE 41076
// continue ;
41074: GO 40867
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
41076: LD_VAR 0 6
41080: PPUSH
41081: LD_INT 3
41083: PUSH
41084: LD_INT 60
41086: PUSH
41087: EMPTY
41088: LIST
41089: PUSH
41090: EMPTY
41091: LIST
41092: LIST
41093: PUSH
41094: LD_INT 3
41096: PUSH
41097: LD_INT 55
41099: PUSH
41100: EMPTY
41101: LIST
41102: PUSH
41103: EMPTY
41104: LIST
41105: LIST
41106: PUSH
41107: EMPTY
41108: LIST
41109: LIST
41110: PPUSH
41111: CALL_OW 72
41115: IFFALSE 41223
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
41117: LD_ADDR_VAR 0 18
41121: PUSH
41122: LD_VAR 0 6
41126: PPUSH
41127: LD_INT 3
41129: PUSH
41130: LD_INT 60
41132: PUSH
41133: EMPTY
41134: LIST
41135: PUSH
41136: EMPTY
41137: LIST
41138: LIST
41139: PUSH
41140: LD_INT 3
41142: PUSH
41143: LD_INT 55
41145: PUSH
41146: EMPTY
41147: LIST
41148: PUSH
41149: EMPTY
41150: LIST
41151: LIST
41152: PUSH
41153: EMPTY
41154: LIST
41155: LIST
41156: PPUSH
41157: CALL_OW 72
41161: PUSH
41162: LD_INT 1
41164: ARRAY
41165: ST_TO_ADDR
// if IsInUnit ( driver ) then
41166: LD_VAR 0 18
41170: PPUSH
41171: CALL_OW 310
41175: IFFALSE 41186
// ComExit ( driver ) ;
41177: LD_VAR 0 18
41181: PPUSH
41182: CALL 66829 0 1
// AddComEnterUnit ( driver , tmp ) ;
41186: LD_VAR 0 18
41190: PPUSH
41191: LD_VAR 0 13
41195: PPUSH
41196: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
41200: LD_VAR 0 18
41204: PPUSH
41205: LD_VAR 0 7
41209: PPUSH
41210: CALL_OW 173
// AddComExitVehicle ( driver ) ;
41214: LD_VAR 0 18
41218: PPUSH
41219: CALL_OW 181
// end ; continue ;
41223: GO 40867
// end ; if not cleaners or not tmp in cleaners then
41225: LD_VAR 0 6
41229: NOT
41230: IFTRUE 41245
41232: PUSH
41233: LD_VAR 0 13
41237: PUSH
41238: LD_VAR 0 6
41242: IN
41243: NOT
41244: OR
41245: IFFALSE 41554
// begin if dep then
41247: LD_VAR 0 17
41251: IFFALSE 41387
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
41253: LD_ADDR_VAR 0 16
41257: PUSH
41258: LD_VAR 0 17
41262: PUSH
41263: LD_INT 1
41265: ARRAY
41266: PPUSH
41267: CALL_OW 250
41271: PPUSH
41272: LD_VAR 0 17
41276: PUSH
41277: LD_INT 1
41279: ARRAY
41280: PPUSH
41281: CALL_OW 254
41285: PPUSH
41286: LD_INT 5
41288: PPUSH
41289: CALL_OW 272
41293: PUSH
41294: LD_VAR 0 17
41298: PUSH
41299: LD_INT 1
41301: ARRAY
41302: PPUSH
41303: CALL_OW 251
41307: PPUSH
41308: LD_VAR 0 17
41312: PUSH
41313: LD_INT 1
41315: ARRAY
41316: PPUSH
41317: CALL_OW 254
41321: PPUSH
41322: LD_INT 5
41324: PPUSH
41325: CALL_OW 273
41329: PUSH
41330: EMPTY
41331: LIST
41332: LIST
41333: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
41334: LD_VAR 0 16
41338: PUSH
41339: LD_INT 1
41341: ARRAY
41342: PPUSH
41343: LD_VAR 0 16
41347: PUSH
41348: LD_INT 2
41350: ARRAY
41351: PPUSH
41352: CALL_OW 488
41356: IFFALSE 41387
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
41358: LD_VAR 0 13
41362: PPUSH
41363: LD_VAR 0 16
41367: PUSH
41368: LD_INT 1
41370: ARRAY
41371: PPUSH
41372: LD_VAR 0 16
41376: PUSH
41377: LD_INT 2
41379: ARRAY
41380: PPUSH
41381: CALL_OW 111
// continue ;
41385: GO 40867
// end ; end ; r := GetDir ( tmp ) ;
41387: LD_ADDR_VAR 0 15
41391: PUSH
41392: LD_VAR 0 13
41396: PPUSH
41397: CALL_OW 254
41401: ST_TO_ADDR
// if r = 5 then
41402: LD_VAR 0 15
41406: PUSH
41407: LD_INT 5
41409: EQUAL
41410: IFFALSE 41420
// r := 0 ;
41412: LD_ADDR_VAR 0 15
41416: PUSH
41417: LD_INT 0
41419: ST_TO_ADDR
// for j = r to 5 do
41420: LD_ADDR_VAR 0 10
41424: PUSH
41425: DOUBLE
41426: LD_VAR 0 15
41430: DEC
41431: ST_TO_ADDR
41432: LD_INT 5
41434: PUSH
41435: FOR_TO
41436: IFFALSE 41552
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
41438: LD_ADDR_VAR 0 11
41442: PUSH
41443: LD_VAR 0 13
41447: PPUSH
41448: CALL_OW 250
41452: PPUSH
41453: LD_VAR 0 10
41457: PPUSH
41458: LD_INT 2
41460: PPUSH
41461: CALL_OW 272
41465: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
41466: LD_ADDR_VAR 0 12
41470: PUSH
41471: LD_VAR 0 13
41475: PPUSH
41476: CALL_OW 251
41480: PPUSH
41481: LD_VAR 0 10
41485: PPUSH
41486: LD_INT 2
41488: PPUSH
41489: CALL_OW 273
41493: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
41494: LD_VAR 0 11
41498: PPUSH
41499: LD_VAR 0 12
41503: PPUSH
41504: CALL_OW 488
41508: IFFALSE 41527
41510: PUSH
41511: LD_VAR 0 11
41515: PPUSH
41516: LD_VAR 0 12
41520: PPUSH
41521: CALL_OW 428
41525: NOT
41526: AND
41527: IFFALSE 41550
// begin ComMoveXY ( tmp , _x , _y ) ;
41529: LD_VAR 0 13
41533: PPUSH
41534: LD_VAR 0 11
41538: PPUSH
41539: LD_VAR 0 12
41543: PPUSH
41544: CALL_OW 111
// break ;
41548: GO 41552
// end ; end ;
41550: GO 41435
41552: POP
41553: POP
// end ; end ;
41554: GO 40867
41556: POP
41557: POP
// end ;
41558: LD_VAR 0 8
41562: RET
// export function BuildingTechInvented ( side , btype ) ; begin
41563: LD_INT 0
41565: PPUSH
// result := true ;
41566: LD_ADDR_VAR 0 3
41570: PUSH
41571: LD_INT 1
41573: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
41574: LD_VAR 0 2
41578: PUSH
41579: LD_INT 24
41581: DOUBLE
41582: EQUAL
41583: IFTRUE 41593
41585: LD_INT 33
41587: DOUBLE
41588: EQUAL
41589: IFTRUE 41593
41591: GO 41618
41593: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
41594: LD_ADDR_VAR 0 3
41598: PUSH
41599: LD_INT 32
41601: PPUSH
41602: LD_VAR 0 1
41606: PPUSH
41607: CALL_OW 321
41611: PUSH
41612: LD_INT 2
41614: EQUAL
41615: ST_TO_ADDR
41616: GO 41934
41618: LD_INT 20
41620: DOUBLE
41621: EQUAL
41622: IFTRUE 41626
41624: GO 41651
41626: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
41627: LD_ADDR_VAR 0 3
41631: PUSH
41632: LD_INT 6
41634: PPUSH
41635: LD_VAR 0 1
41639: PPUSH
41640: CALL_OW 321
41644: PUSH
41645: LD_INT 2
41647: EQUAL
41648: ST_TO_ADDR
41649: GO 41934
41651: LD_INT 22
41653: DOUBLE
41654: EQUAL
41655: IFTRUE 41665
41657: LD_INT 36
41659: DOUBLE
41660: EQUAL
41661: IFTRUE 41665
41663: GO 41690
41665: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
41666: LD_ADDR_VAR 0 3
41670: PUSH
41671: LD_INT 15
41673: PPUSH
41674: LD_VAR 0 1
41678: PPUSH
41679: CALL_OW 321
41683: PUSH
41684: LD_INT 2
41686: EQUAL
41687: ST_TO_ADDR
41688: GO 41934
41690: LD_INT 30
41692: DOUBLE
41693: EQUAL
41694: IFTRUE 41698
41696: GO 41723
41698: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
41699: LD_ADDR_VAR 0 3
41703: PUSH
41704: LD_INT 20
41706: PPUSH
41707: LD_VAR 0 1
41711: PPUSH
41712: CALL_OW 321
41716: PUSH
41717: LD_INT 2
41719: EQUAL
41720: ST_TO_ADDR
41721: GO 41934
41723: LD_INT 28
41725: DOUBLE
41726: EQUAL
41727: IFTRUE 41737
41729: LD_INT 21
41731: DOUBLE
41732: EQUAL
41733: IFTRUE 41737
41735: GO 41762
41737: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
41738: LD_ADDR_VAR 0 3
41742: PUSH
41743: LD_INT 21
41745: PPUSH
41746: LD_VAR 0 1
41750: PPUSH
41751: CALL_OW 321
41755: PUSH
41756: LD_INT 2
41758: EQUAL
41759: ST_TO_ADDR
41760: GO 41934
41762: LD_INT 16
41764: DOUBLE
41765: EQUAL
41766: IFTRUE 41770
41768: GO 41795
41770: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
41771: LD_ADDR_VAR 0 3
41775: PUSH
41776: LD_INT 84
41778: PPUSH
41779: LD_VAR 0 1
41783: PPUSH
41784: CALL_OW 321
41788: PUSH
41789: LD_INT 2
41791: EQUAL
41792: ST_TO_ADDR
41793: GO 41934
41795: LD_INT 19
41797: DOUBLE
41798: EQUAL
41799: IFTRUE 41809
41801: LD_INT 23
41803: DOUBLE
41804: EQUAL
41805: IFTRUE 41809
41807: GO 41834
41809: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
41810: LD_ADDR_VAR 0 3
41814: PUSH
41815: LD_INT 83
41817: PPUSH
41818: LD_VAR 0 1
41822: PPUSH
41823: CALL_OW 321
41827: PUSH
41828: LD_INT 2
41830: EQUAL
41831: ST_TO_ADDR
41832: GO 41934
41834: LD_INT 17
41836: DOUBLE
41837: EQUAL
41838: IFTRUE 41842
41840: GO 41867
41842: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
41843: LD_ADDR_VAR 0 3
41847: PUSH
41848: LD_INT 39
41850: PPUSH
41851: LD_VAR 0 1
41855: PPUSH
41856: CALL_OW 321
41860: PUSH
41861: LD_INT 2
41863: EQUAL
41864: ST_TO_ADDR
41865: GO 41934
41867: LD_INT 18
41869: DOUBLE
41870: EQUAL
41871: IFTRUE 41875
41873: GO 41900
41875: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
41876: LD_ADDR_VAR 0 3
41880: PUSH
41881: LD_INT 40
41883: PPUSH
41884: LD_VAR 0 1
41888: PPUSH
41889: CALL_OW 321
41893: PUSH
41894: LD_INT 2
41896: EQUAL
41897: ST_TO_ADDR
41898: GO 41934
41900: LD_INT 27
41902: DOUBLE
41903: EQUAL
41904: IFTRUE 41908
41906: GO 41933
41908: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
41909: LD_ADDR_VAR 0 3
41913: PUSH
41914: LD_INT 35
41916: PPUSH
41917: LD_VAR 0 1
41921: PPUSH
41922: CALL_OW 321
41926: PUSH
41927: LD_INT 2
41929: EQUAL
41930: ST_TO_ADDR
41931: GO 41934
41933: POP
// end ;
41934: LD_VAR 0 3
41938: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
41939: LD_INT 0
41941: PPUSH
41942: PPUSH
41943: PPUSH
41944: PPUSH
41945: PPUSH
41946: PPUSH
41947: PPUSH
41948: PPUSH
41949: PPUSH
41950: PPUSH
41951: PPUSH
// result := false ;
41952: LD_ADDR_VAR 0 6
41956: PUSH
41957: LD_INT 0
41959: ST_TO_ADDR
// if btype = b_depot then
41960: LD_VAR 0 2
41964: PUSH
41965: LD_INT 0
41967: EQUAL
41968: IFFALSE 41980
// begin result := true ;
41970: LD_ADDR_VAR 0 6
41974: PUSH
41975: LD_INT 1
41977: ST_TO_ADDR
// exit ;
41978: GO 42834
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
41980: LD_VAR 0 1
41984: NOT
41985: IFTRUE 42010
41987: PUSH
41988: LD_VAR 0 1
41992: PPUSH
41993: CALL_OW 266
41997: PUSH
41998: LD_INT 0
42000: PUSH
42001: LD_INT 1
42003: PUSH
42004: EMPTY
42005: LIST
42006: LIST
42007: IN
42008: NOT
42009: OR
42010: IFTRUE 42019
42012: PUSH
42013: LD_VAR 0 2
42017: NOT
42018: OR
42019: IFTRUE 42055
42021: PUSH
42022: LD_VAR 0 5
42026: PUSH
42027: LD_INT 0
42029: PUSH
42030: LD_INT 1
42032: PUSH
42033: LD_INT 2
42035: PUSH
42036: LD_INT 3
42038: PUSH
42039: LD_INT 4
42041: PUSH
42042: LD_INT 5
42044: PUSH
42045: EMPTY
42046: LIST
42047: LIST
42048: LIST
42049: LIST
42050: LIST
42051: LIST
42052: IN
42053: NOT
42054: OR
42055: IFTRUE 42074
42057: PUSH
42058: LD_VAR 0 3
42062: PPUSH
42063: LD_VAR 0 4
42067: PPUSH
42068: CALL_OW 488
42072: NOT
42073: OR
42074: IFFALSE 42078
// exit ;
42076: GO 42834
// side := GetSide ( depot ) ;
42078: LD_ADDR_VAR 0 9
42082: PUSH
42083: LD_VAR 0 1
42087: PPUSH
42088: CALL_OW 255
42092: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
42093: LD_VAR 0 9
42097: PPUSH
42098: LD_VAR 0 2
42102: PPUSH
42103: CALL 41563 0 2
42107: NOT
42108: IFFALSE 42112
// exit ;
42110: GO 42834
// pom := GetBase ( depot ) ;
42112: LD_ADDR_VAR 0 10
42116: PUSH
42117: LD_VAR 0 1
42121: PPUSH
42122: CALL_OW 274
42126: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42127: LD_ADDR_VAR 0 11
42131: PUSH
42132: LD_VAR 0 2
42136: PPUSH
42137: LD_VAR 0 1
42141: PPUSH
42142: CALL_OW 248
42146: PPUSH
42147: CALL_OW 450
42151: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
42152: LD_VAR 0 10
42156: PPUSH
42157: LD_INT 1
42159: PPUSH
42160: CALL_OW 275
42164: PUSH
42165: LD_VAR 0 11
42169: PUSH
42170: LD_INT 1
42172: ARRAY
42173: GREATEREQUAL
42174: IFFALSE 42200
42176: PUSH
42177: LD_VAR 0 10
42181: PPUSH
42182: LD_INT 2
42184: PPUSH
42185: CALL_OW 275
42189: PUSH
42190: LD_VAR 0 11
42194: PUSH
42195: LD_INT 2
42197: ARRAY
42198: GREATEREQUAL
42199: AND
42200: IFFALSE 42226
42202: PUSH
42203: LD_VAR 0 10
42207: PPUSH
42208: LD_INT 3
42210: PPUSH
42211: CALL_OW 275
42215: PUSH
42216: LD_VAR 0 11
42220: PUSH
42221: LD_INT 3
42223: ARRAY
42224: GREATEREQUAL
42225: AND
42226: NOT
42227: IFFALSE 42231
// exit ;
42229: GO 42834
// if GetBType ( depot ) = b_depot then
42231: LD_VAR 0 1
42235: PPUSH
42236: CALL_OW 266
42240: PUSH
42241: LD_INT 0
42243: EQUAL
42244: IFFALSE 42256
// dist := 28 else
42246: LD_ADDR_VAR 0 14
42250: PUSH
42251: LD_INT 28
42253: ST_TO_ADDR
42254: GO 42264
// dist := 36 ;
42256: LD_ADDR_VAR 0 14
42260: PUSH
42261: LD_INT 36
42263: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
42264: LD_VAR 0 1
42268: PPUSH
42269: LD_VAR 0 3
42273: PPUSH
42274: LD_VAR 0 4
42278: PPUSH
42279: CALL_OW 297
42283: PUSH
42284: LD_VAR 0 14
42288: GREATER
42289: IFFALSE 42293
// exit ;
42291: GO 42834
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
42293: LD_ADDR_VAR 0 12
42297: PUSH
42298: LD_VAR 0 2
42302: PPUSH
42303: LD_VAR 0 3
42307: PPUSH
42308: LD_VAR 0 4
42312: PPUSH
42313: LD_VAR 0 5
42317: PPUSH
42318: LD_VAR 0 1
42322: PPUSH
42323: CALL_OW 248
42327: PPUSH
42328: LD_INT 0
42330: PPUSH
42331: CALL 42839 0 6
42335: ST_TO_ADDR
// if not hexes then
42336: LD_VAR 0 12
42340: NOT
42341: IFFALSE 42345
// exit ;
42343: GO 42834
// hex := GetHexInfo ( x , y ) ;
42345: LD_ADDR_VAR 0 15
42349: PUSH
42350: LD_VAR 0 3
42354: PPUSH
42355: LD_VAR 0 4
42359: PPUSH
42360: CALL_OW 546
42364: ST_TO_ADDR
// if hex [ 1 ] then
42365: LD_VAR 0 15
42369: PUSH
42370: LD_INT 1
42372: ARRAY
42373: IFFALSE 42377
// exit ;
42375: GO 42834
// height := hex [ 2 ] ;
42377: LD_ADDR_VAR 0 13
42381: PUSH
42382: LD_VAR 0 15
42386: PUSH
42387: LD_INT 2
42389: ARRAY
42390: ST_TO_ADDR
// for i = 1 to hexes do
42391: LD_ADDR_VAR 0 7
42395: PUSH
42396: DOUBLE
42397: LD_INT 1
42399: DEC
42400: ST_TO_ADDR
42401: LD_VAR 0 12
42405: PUSH
42406: FOR_TO
42407: IFFALSE 42751
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
42409: LD_VAR 0 12
42413: PUSH
42414: LD_VAR 0 7
42418: ARRAY
42419: PUSH
42420: LD_INT 1
42422: ARRAY
42423: PPUSH
42424: LD_VAR 0 12
42428: PUSH
42429: LD_VAR 0 7
42433: ARRAY
42434: PUSH
42435: LD_INT 2
42437: ARRAY
42438: PPUSH
42439: CALL_OW 488
42443: NOT
42444: IFTRUE 42486
42446: PUSH
42447: LD_VAR 0 12
42451: PUSH
42452: LD_VAR 0 7
42456: ARRAY
42457: PUSH
42458: LD_INT 1
42460: ARRAY
42461: PPUSH
42462: LD_VAR 0 12
42466: PUSH
42467: LD_VAR 0 7
42471: ARRAY
42472: PUSH
42473: LD_INT 2
42475: ARRAY
42476: PPUSH
42477: CALL_OW 428
42481: PUSH
42482: LD_INT 0
42484: GREATER
42485: OR
42486: IFTRUE 42524
42488: PUSH
42489: LD_VAR 0 12
42493: PUSH
42494: LD_VAR 0 7
42498: ARRAY
42499: PUSH
42500: LD_INT 1
42502: ARRAY
42503: PPUSH
42504: LD_VAR 0 12
42508: PUSH
42509: LD_VAR 0 7
42513: ARRAY
42514: PUSH
42515: LD_INT 2
42517: ARRAY
42518: PPUSH
42519: CALL_OW 351
42523: OR
42524: IFFALSE 42530
// exit ;
42526: POP
42527: POP
42528: GO 42834
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42530: LD_ADDR_VAR 0 8
42534: PUSH
42535: LD_VAR 0 12
42539: PUSH
42540: LD_VAR 0 7
42544: ARRAY
42545: PUSH
42546: LD_INT 1
42548: ARRAY
42549: PPUSH
42550: LD_VAR 0 12
42554: PUSH
42555: LD_VAR 0 7
42559: ARRAY
42560: PUSH
42561: LD_INT 2
42563: ARRAY
42564: PPUSH
42565: CALL_OW 546
42569: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
42570: LD_VAR 0 8
42574: PUSH
42575: LD_INT 1
42577: ARRAY
42578: IFTRUE 42600
42580: PUSH
42581: LD_VAR 0 8
42585: PUSH
42586: LD_INT 2
42588: ARRAY
42589: PUSH
42590: LD_VAR 0 13
42594: PUSH
42595: LD_INT 2
42597: PLUS
42598: GREATER
42599: OR
42600: IFTRUE 42622
42602: PUSH
42603: LD_VAR 0 8
42607: PUSH
42608: LD_INT 2
42610: ARRAY
42611: PUSH
42612: LD_VAR 0 13
42616: PUSH
42617: LD_INT 2
42619: MINUS
42620: LESS
42621: OR
42622: IFTRUE 42690
42624: PUSH
42625: LD_VAR 0 8
42629: PUSH
42630: LD_INT 3
42632: ARRAY
42633: PUSH
42634: LD_INT 0
42636: PUSH
42637: LD_INT 8
42639: PUSH
42640: LD_INT 9
42642: PUSH
42643: LD_INT 10
42645: PUSH
42646: LD_INT 11
42648: PUSH
42649: LD_INT 12
42651: PUSH
42652: LD_INT 13
42654: PUSH
42655: LD_INT 16
42657: PUSH
42658: LD_INT 17
42660: PUSH
42661: LD_INT 18
42663: PUSH
42664: LD_INT 19
42666: PUSH
42667: LD_INT 20
42669: PUSH
42670: LD_INT 21
42672: PUSH
42673: EMPTY
42674: LIST
42675: LIST
42676: LIST
42677: LIST
42678: LIST
42679: LIST
42680: LIST
42681: LIST
42682: LIST
42683: LIST
42684: LIST
42685: LIST
42686: LIST
42687: IN
42688: NOT
42689: OR
42690: IFTRUE 42703
42692: PUSH
42693: LD_VAR 0 8
42697: PUSH
42698: LD_INT 5
42700: ARRAY
42701: NOT
42702: OR
42703: IFTRUE 42743
42705: PUSH
42706: LD_VAR 0 8
42710: PUSH
42711: LD_INT 6
42713: ARRAY
42714: PUSH
42715: LD_INT 1
42717: PUSH
42718: LD_INT 2
42720: PUSH
42721: LD_INT 7
42723: PUSH
42724: LD_INT 9
42726: PUSH
42727: LD_INT 10
42729: PUSH
42730: LD_INT 11
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: LIST
42737: LIST
42738: LIST
42739: LIST
42740: IN
42741: NOT
42742: OR
42743: IFFALSE 42749
// exit ;
42745: POP
42746: POP
42747: GO 42834
// end ;
42749: GO 42406
42751: POP
42752: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
42753: LD_VAR 0 9
42757: PPUSH
42758: LD_VAR 0 3
42762: PPUSH
42763: LD_VAR 0 4
42767: PPUSH
42768: LD_INT 20
42770: PPUSH
42771: CALL 34653 0 4
42775: PUSH
42776: LD_INT 4
42778: ARRAY
42779: IFFALSE 42783
// exit ;
42781: GO 42834
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
42783: LD_VAR 0 2
42787: PUSH
42788: LD_INT 29
42790: PUSH
42791: LD_INT 30
42793: PUSH
42794: EMPTY
42795: LIST
42796: LIST
42797: IN
42798: IFFALSE 42822
42800: PUSH
42801: LD_VAR 0 3
42805: PPUSH
42806: LD_VAR 0 4
42810: PPUSH
42811: LD_VAR 0 9
42815: PPUSH
42816: CALL_OW 440
42820: NOT
42821: AND
42822: IFFALSE 42826
// exit ;
42824: GO 42834
// result := true ;
42826: LD_ADDR_VAR 0 6
42830: PUSH
42831: LD_INT 1
42833: ST_TO_ADDR
// end ;
42834: LD_VAR 0 6
42838: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
42839: LD_INT 0
42841: PPUSH
42842: PPUSH
42843: PPUSH
42844: PPUSH
42845: PPUSH
42846: PPUSH
42847: PPUSH
42848: PPUSH
42849: PPUSH
42850: PPUSH
42851: PPUSH
42852: PPUSH
42853: PPUSH
42854: PPUSH
42855: PPUSH
42856: PPUSH
42857: PPUSH
42858: PPUSH
42859: PPUSH
42860: PPUSH
42861: PPUSH
42862: PPUSH
42863: PPUSH
42864: PPUSH
42865: PPUSH
42866: PPUSH
42867: PPUSH
42868: PPUSH
42869: PPUSH
42870: PPUSH
42871: PPUSH
42872: PPUSH
42873: PPUSH
42874: PPUSH
42875: PPUSH
42876: PPUSH
42877: PPUSH
42878: PPUSH
42879: PPUSH
42880: PPUSH
42881: PPUSH
42882: PPUSH
42883: PPUSH
42884: PPUSH
42885: PPUSH
42886: PPUSH
42887: PPUSH
42888: PPUSH
42889: PPUSH
42890: PPUSH
42891: PPUSH
42892: PPUSH
42893: PPUSH
42894: PPUSH
42895: PPUSH
42896: PPUSH
42897: PPUSH
42898: PPUSH
// result = [ ] ;
42899: LD_ADDR_VAR 0 7
42903: PUSH
42904: EMPTY
42905: ST_TO_ADDR
// temp_list = [ ] ;
42906: LD_ADDR_VAR 0 9
42910: PUSH
42911: EMPTY
42912: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
42913: LD_VAR 0 4
42917: PUSH
42918: LD_INT 0
42920: PUSH
42921: LD_INT 1
42923: PUSH
42924: LD_INT 2
42926: PUSH
42927: LD_INT 3
42929: PUSH
42930: LD_INT 4
42932: PUSH
42933: LD_INT 5
42935: PUSH
42936: EMPTY
42937: LIST
42938: LIST
42939: LIST
42940: LIST
42941: LIST
42942: LIST
42943: IN
42944: NOT
42945: IFTRUE 42988
42947: PUSH
42948: LD_VAR 0 1
42952: PUSH
42953: LD_INT 0
42955: PUSH
42956: LD_INT 1
42958: PUSH
42959: EMPTY
42960: LIST
42961: LIST
42962: IN
42963: IFFALSE 42987
42965: PUSH
42966: LD_VAR 0 5
42970: PUSH
42971: LD_INT 1
42973: PUSH
42974: LD_INT 2
42976: PUSH
42977: LD_INT 3
42979: PUSH
42980: EMPTY
42981: LIST
42982: LIST
42983: LIST
42984: IN
42985: NOT
42986: AND
42987: OR
42988: IFFALSE 42992
// exit ;
42990: GO 61391
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
42992: LD_VAR 0 1
42996: PUSH
42997: LD_INT 6
42999: PUSH
43000: LD_INT 7
43002: PUSH
43003: LD_INT 8
43005: PUSH
43006: LD_INT 13
43008: PUSH
43009: LD_INT 12
43011: PUSH
43012: LD_INT 15
43014: PUSH
43015: LD_INT 11
43017: PUSH
43018: LD_INT 14
43020: PUSH
43021: LD_INT 10
43023: PUSH
43024: EMPTY
43025: LIST
43026: LIST
43027: LIST
43028: LIST
43029: LIST
43030: LIST
43031: LIST
43032: LIST
43033: LIST
43034: IN
43035: IFFALSE 43045
// btype = b_lab ;
43037: LD_ADDR_VAR 0 1
43041: PUSH
43042: LD_INT 6
43044: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
43045: LD_VAR 0 6
43049: PUSH
43050: LD_INT 0
43052: PUSH
43053: LD_INT 1
43055: PUSH
43056: LD_INT 2
43058: PUSH
43059: EMPTY
43060: LIST
43061: LIST
43062: LIST
43063: IN
43064: NOT
43065: IFTRUE 43133
43067: PUSH
43068: LD_VAR 0 1
43072: PUSH
43073: LD_INT 0
43075: PUSH
43076: LD_INT 1
43078: PUSH
43079: LD_INT 2
43081: PUSH
43082: LD_INT 3
43084: PUSH
43085: LD_INT 6
43087: PUSH
43088: LD_INT 36
43090: PUSH
43091: LD_INT 4
43093: PUSH
43094: LD_INT 5
43096: PUSH
43097: LD_INT 31
43099: PUSH
43100: LD_INT 32
43102: PUSH
43103: LD_INT 33
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: LIST
43114: LIST
43115: LIST
43116: LIST
43117: LIST
43118: IN
43119: NOT
43120: IFFALSE 43132
43122: PUSH
43123: LD_VAR 0 6
43127: PUSH
43128: LD_INT 1
43130: EQUAL
43131: AND
43132: OR
43133: IFTRUE 43165
43135: PUSH
43136: LD_VAR 0 1
43140: PUSH
43141: LD_INT 2
43143: PUSH
43144: LD_INT 3
43146: PUSH
43147: EMPTY
43148: LIST
43149: LIST
43150: IN
43151: NOT
43152: IFFALSE 43164
43154: PUSH
43155: LD_VAR 0 6
43159: PUSH
43160: LD_INT 2
43162: EQUAL
43163: AND
43164: OR
43165: IFFALSE 43175
// mode = 0 ;
43167: LD_ADDR_VAR 0 6
43171: PUSH
43172: LD_INT 0
43174: ST_TO_ADDR
// case mode of 0 :
43175: LD_VAR 0 6
43179: PUSH
43180: LD_INT 0
43182: DOUBLE
43183: EQUAL
43184: IFTRUE 43188
43186: GO 54641
43188: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43189: LD_ADDR_VAR 0 11
43193: PUSH
43194: LD_INT 0
43196: PUSH
43197: LD_INT 0
43199: PUSH
43200: EMPTY
43201: LIST
43202: LIST
43203: PUSH
43204: LD_INT 0
43206: PUSH
43207: LD_INT 1
43209: NEG
43210: PUSH
43211: EMPTY
43212: LIST
43213: LIST
43214: PUSH
43215: LD_INT 1
43217: PUSH
43218: LD_INT 0
43220: PUSH
43221: EMPTY
43222: LIST
43223: LIST
43224: PUSH
43225: LD_INT 1
43227: PUSH
43228: LD_INT 1
43230: PUSH
43231: EMPTY
43232: LIST
43233: LIST
43234: PUSH
43235: LD_INT 0
43237: PUSH
43238: LD_INT 1
43240: PUSH
43241: EMPTY
43242: LIST
43243: LIST
43244: PUSH
43245: LD_INT 1
43247: NEG
43248: PUSH
43249: LD_INT 0
43251: PUSH
43252: EMPTY
43253: LIST
43254: LIST
43255: PUSH
43256: LD_INT 1
43258: NEG
43259: PUSH
43260: LD_INT 1
43262: NEG
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: LD_INT 1
43270: NEG
43271: PUSH
43272: LD_INT 2
43274: NEG
43275: PUSH
43276: EMPTY
43277: LIST
43278: LIST
43279: PUSH
43280: LD_INT 0
43282: PUSH
43283: LD_INT 2
43285: NEG
43286: PUSH
43287: EMPTY
43288: LIST
43289: LIST
43290: PUSH
43291: LD_INT 1
43293: PUSH
43294: LD_INT 1
43296: NEG
43297: PUSH
43298: EMPTY
43299: LIST
43300: LIST
43301: PUSH
43302: LD_INT 1
43304: PUSH
43305: LD_INT 2
43307: PUSH
43308: EMPTY
43309: LIST
43310: LIST
43311: PUSH
43312: LD_INT 0
43314: PUSH
43315: LD_INT 2
43317: PUSH
43318: EMPTY
43319: LIST
43320: LIST
43321: PUSH
43322: LD_INT 1
43324: NEG
43325: PUSH
43326: LD_INT 1
43328: PUSH
43329: EMPTY
43330: LIST
43331: LIST
43332: PUSH
43333: LD_INT 1
43335: PUSH
43336: LD_INT 3
43338: PUSH
43339: EMPTY
43340: LIST
43341: LIST
43342: PUSH
43343: LD_INT 0
43345: PUSH
43346: LD_INT 3
43348: PUSH
43349: EMPTY
43350: LIST
43351: LIST
43352: PUSH
43353: LD_INT 1
43355: NEG
43356: PUSH
43357: LD_INT 2
43359: PUSH
43360: EMPTY
43361: LIST
43362: LIST
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: LIST
43368: LIST
43369: LIST
43370: LIST
43371: LIST
43372: LIST
43373: LIST
43374: LIST
43375: LIST
43376: LIST
43377: LIST
43378: LIST
43379: LIST
43380: LIST
43381: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43382: LD_ADDR_VAR 0 12
43386: PUSH
43387: LD_INT 0
43389: PUSH
43390: LD_INT 0
43392: PUSH
43393: EMPTY
43394: LIST
43395: LIST
43396: PUSH
43397: LD_INT 0
43399: PUSH
43400: LD_INT 1
43402: NEG
43403: PUSH
43404: EMPTY
43405: LIST
43406: LIST
43407: PUSH
43408: LD_INT 1
43410: PUSH
43411: LD_INT 0
43413: PUSH
43414: EMPTY
43415: LIST
43416: LIST
43417: PUSH
43418: LD_INT 1
43420: PUSH
43421: LD_INT 1
43423: PUSH
43424: EMPTY
43425: LIST
43426: LIST
43427: PUSH
43428: LD_INT 0
43430: PUSH
43431: LD_INT 1
43433: PUSH
43434: EMPTY
43435: LIST
43436: LIST
43437: PUSH
43438: LD_INT 1
43440: NEG
43441: PUSH
43442: LD_INT 0
43444: PUSH
43445: EMPTY
43446: LIST
43447: LIST
43448: PUSH
43449: LD_INT 1
43451: NEG
43452: PUSH
43453: LD_INT 1
43455: NEG
43456: PUSH
43457: EMPTY
43458: LIST
43459: LIST
43460: PUSH
43461: LD_INT 1
43463: PUSH
43464: LD_INT 1
43466: NEG
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: PUSH
43472: LD_INT 2
43474: PUSH
43475: LD_INT 0
43477: PUSH
43478: EMPTY
43479: LIST
43480: LIST
43481: PUSH
43482: LD_INT 2
43484: PUSH
43485: LD_INT 1
43487: PUSH
43488: EMPTY
43489: LIST
43490: LIST
43491: PUSH
43492: LD_INT 1
43494: NEG
43495: PUSH
43496: LD_INT 1
43498: PUSH
43499: EMPTY
43500: LIST
43501: LIST
43502: PUSH
43503: LD_INT 2
43505: NEG
43506: PUSH
43507: LD_INT 0
43509: PUSH
43510: EMPTY
43511: LIST
43512: LIST
43513: PUSH
43514: LD_INT 2
43516: NEG
43517: PUSH
43518: LD_INT 1
43520: NEG
43521: PUSH
43522: EMPTY
43523: LIST
43524: LIST
43525: PUSH
43526: LD_INT 2
43528: NEG
43529: PUSH
43530: LD_INT 1
43532: PUSH
43533: EMPTY
43534: LIST
43535: LIST
43536: PUSH
43537: LD_INT 3
43539: NEG
43540: PUSH
43541: LD_INT 0
43543: PUSH
43544: EMPTY
43545: LIST
43546: LIST
43547: PUSH
43548: LD_INT 3
43550: NEG
43551: PUSH
43552: LD_INT 1
43554: NEG
43555: PUSH
43556: EMPTY
43557: LIST
43558: LIST
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: LIST
43564: LIST
43565: LIST
43566: LIST
43567: LIST
43568: LIST
43569: LIST
43570: LIST
43571: LIST
43572: LIST
43573: LIST
43574: LIST
43575: LIST
43576: LIST
43577: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43578: LD_ADDR_VAR 0 13
43582: PUSH
43583: LD_INT 0
43585: PUSH
43586: LD_INT 0
43588: PUSH
43589: EMPTY
43590: LIST
43591: LIST
43592: PUSH
43593: LD_INT 0
43595: PUSH
43596: LD_INT 1
43598: NEG
43599: PUSH
43600: EMPTY
43601: LIST
43602: LIST
43603: PUSH
43604: LD_INT 1
43606: PUSH
43607: LD_INT 0
43609: PUSH
43610: EMPTY
43611: LIST
43612: LIST
43613: PUSH
43614: LD_INT 1
43616: PUSH
43617: LD_INT 1
43619: PUSH
43620: EMPTY
43621: LIST
43622: LIST
43623: PUSH
43624: LD_INT 0
43626: PUSH
43627: LD_INT 1
43629: PUSH
43630: EMPTY
43631: LIST
43632: LIST
43633: PUSH
43634: LD_INT 1
43636: NEG
43637: PUSH
43638: LD_INT 0
43640: PUSH
43641: EMPTY
43642: LIST
43643: LIST
43644: PUSH
43645: LD_INT 1
43647: NEG
43648: PUSH
43649: LD_INT 1
43651: NEG
43652: PUSH
43653: EMPTY
43654: LIST
43655: LIST
43656: PUSH
43657: LD_INT 1
43659: NEG
43660: PUSH
43661: LD_INT 2
43663: NEG
43664: PUSH
43665: EMPTY
43666: LIST
43667: LIST
43668: PUSH
43669: LD_INT 2
43671: PUSH
43672: LD_INT 1
43674: PUSH
43675: EMPTY
43676: LIST
43677: LIST
43678: PUSH
43679: LD_INT 2
43681: PUSH
43682: LD_INT 2
43684: PUSH
43685: EMPTY
43686: LIST
43687: LIST
43688: PUSH
43689: LD_INT 1
43691: PUSH
43692: LD_INT 2
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PUSH
43699: LD_INT 2
43701: NEG
43702: PUSH
43703: LD_INT 1
43705: NEG
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: PUSH
43711: LD_INT 2
43713: NEG
43714: PUSH
43715: LD_INT 2
43717: NEG
43718: PUSH
43719: EMPTY
43720: LIST
43721: LIST
43722: PUSH
43723: LD_INT 2
43725: NEG
43726: PUSH
43727: LD_INT 3
43729: NEG
43730: PUSH
43731: EMPTY
43732: LIST
43733: LIST
43734: PUSH
43735: LD_INT 3
43737: NEG
43738: PUSH
43739: LD_INT 2
43741: NEG
43742: PUSH
43743: EMPTY
43744: LIST
43745: LIST
43746: PUSH
43747: LD_INT 3
43749: NEG
43750: PUSH
43751: LD_INT 3
43753: NEG
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: LIST
43763: LIST
43764: LIST
43765: LIST
43766: LIST
43767: LIST
43768: LIST
43769: LIST
43770: LIST
43771: LIST
43772: LIST
43773: LIST
43774: LIST
43775: LIST
43776: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43777: LD_ADDR_VAR 0 14
43781: PUSH
43782: LD_INT 0
43784: PUSH
43785: LD_INT 0
43787: PUSH
43788: EMPTY
43789: LIST
43790: LIST
43791: PUSH
43792: LD_INT 0
43794: PUSH
43795: LD_INT 1
43797: NEG
43798: PUSH
43799: EMPTY
43800: LIST
43801: LIST
43802: PUSH
43803: LD_INT 1
43805: PUSH
43806: LD_INT 0
43808: PUSH
43809: EMPTY
43810: LIST
43811: LIST
43812: PUSH
43813: LD_INT 1
43815: PUSH
43816: LD_INT 1
43818: PUSH
43819: EMPTY
43820: LIST
43821: LIST
43822: PUSH
43823: LD_INT 0
43825: PUSH
43826: LD_INT 1
43828: PUSH
43829: EMPTY
43830: LIST
43831: LIST
43832: PUSH
43833: LD_INT 1
43835: NEG
43836: PUSH
43837: LD_INT 0
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: LD_INT 1
43846: NEG
43847: PUSH
43848: LD_INT 1
43850: NEG
43851: PUSH
43852: EMPTY
43853: LIST
43854: LIST
43855: PUSH
43856: LD_INT 1
43858: NEG
43859: PUSH
43860: LD_INT 2
43862: NEG
43863: PUSH
43864: EMPTY
43865: LIST
43866: LIST
43867: PUSH
43868: LD_INT 0
43870: PUSH
43871: LD_INT 2
43873: NEG
43874: PUSH
43875: EMPTY
43876: LIST
43877: LIST
43878: PUSH
43879: LD_INT 1
43881: PUSH
43882: LD_INT 1
43884: NEG
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: PUSH
43890: LD_INT 1
43892: PUSH
43893: LD_INT 2
43895: PUSH
43896: EMPTY
43897: LIST
43898: LIST
43899: PUSH
43900: LD_INT 0
43902: PUSH
43903: LD_INT 2
43905: PUSH
43906: EMPTY
43907: LIST
43908: LIST
43909: PUSH
43910: LD_INT 1
43912: NEG
43913: PUSH
43914: LD_INT 1
43916: PUSH
43917: EMPTY
43918: LIST
43919: LIST
43920: PUSH
43921: LD_INT 1
43923: NEG
43924: PUSH
43925: LD_INT 3
43927: NEG
43928: PUSH
43929: EMPTY
43930: LIST
43931: LIST
43932: PUSH
43933: LD_INT 0
43935: PUSH
43936: LD_INT 3
43938: NEG
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: PUSH
43944: LD_INT 1
43946: PUSH
43947: LD_INT 2
43949: NEG
43950: PUSH
43951: EMPTY
43952: LIST
43953: LIST
43954: PUSH
43955: EMPTY
43956: LIST
43957: LIST
43958: LIST
43959: LIST
43960: LIST
43961: LIST
43962: LIST
43963: LIST
43964: LIST
43965: LIST
43966: LIST
43967: LIST
43968: LIST
43969: LIST
43970: LIST
43971: LIST
43972: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43973: LD_ADDR_VAR 0 15
43977: PUSH
43978: LD_INT 0
43980: PUSH
43981: LD_INT 0
43983: PUSH
43984: EMPTY
43985: LIST
43986: LIST
43987: PUSH
43988: LD_INT 0
43990: PUSH
43991: LD_INT 1
43993: NEG
43994: PUSH
43995: EMPTY
43996: LIST
43997: LIST
43998: PUSH
43999: LD_INT 1
44001: PUSH
44002: LD_INT 0
44004: PUSH
44005: EMPTY
44006: LIST
44007: LIST
44008: PUSH
44009: LD_INT 1
44011: PUSH
44012: LD_INT 1
44014: PUSH
44015: EMPTY
44016: LIST
44017: LIST
44018: PUSH
44019: LD_INT 0
44021: PUSH
44022: LD_INT 1
44024: PUSH
44025: EMPTY
44026: LIST
44027: LIST
44028: PUSH
44029: LD_INT 1
44031: NEG
44032: PUSH
44033: LD_INT 0
44035: PUSH
44036: EMPTY
44037: LIST
44038: LIST
44039: PUSH
44040: LD_INT 1
44042: NEG
44043: PUSH
44044: LD_INT 1
44046: NEG
44047: PUSH
44048: EMPTY
44049: LIST
44050: LIST
44051: PUSH
44052: LD_INT 1
44054: PUSH
44055: LD_INT 1
44057: NEG
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: PUSH
44063: LD_INT 2
44065: PUSH
44066: LD_INT 0
44068: PUSH
44069: EMPTY
44070: LIST
44071: LIST
44072: PUSH
44073: LD_INT 2
44075: PUSH
44076: LD_INT 1
44078: PUSH
44079: EMPTY
44080: LIST
44081: LIST
44082: PUSH
44083: LD_INT 1
44085: NEG
44086: PUSH
44087: LD_INT 1
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: PUSH
44094: LD_INT 2
44096: NEG
44097: PUSH
44098: LD_INT 0
44100: PUSH
44101: EMPTY
44102: LIST
44103: LIST
44104: PUSH
44105: LD_INT 2
44107: NEG
44108: PUSH
44109: LD_INT 1
44111: NEG
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: PUSH
44117: LD_INT 2
44119: PUSH
44120: LD_INT 1
44122: NEG
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: PUSH
44128: LD_INT 3
44130: PUSH
44131: LD_INT 0
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: PUSH
44138: LD_INT 3
44140: PUSH
44141: LD_INT 1
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: PUSH
44148: EMPTY
44149: LIST
44150: LIST
44151: LIST
44152: LIST
44153: LIST
44154: LIST
44155: LIST
44156: LIST
44157: LIST
44158: LIST
44159: LIST
44160: LIST
44161: LIST
44162: LIST
44163: LIST
44164: LIST
44165: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44166: LD_ADDR_VAR 0 16
44170: PUSH
44171: LD_INT 0
44173: PUSH
44174: LD_INT 0
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: PUSH
44181: LD_INT 0
44183: PUSH
44184: LD_INT 1
44186: NEG
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: PUSH
44192: LD_INT 1
44194: PUSH
44195: LD_INT 0
44197: PUSH
44198: EMPTY
44199: LIST
44200: LIST
44201: PUSH
44202: LD_INT 1
44204: PUSH
44205: LD_INT 1
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: PUSH
44212: LD_INT 0
44214: PUSH
44215: LD_INT 1
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: PUSH
44222: LD_INT 1
44224: NEG
44225: PUSH
44226: LD_INT 0
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: PUSH
44233: LD_INT 1
44235: NEG
44236: PUSH
44237: LD_INT 1
44239: NEG
44240: PUSH
44241: EMPTY
44242: LIST
44243: LIST
44244: PUSH
44245: LD_INT 1
44247: NEG
44248: PUSH
44249: LD_INT 2
44251: NEG
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: PUSH
44257: LD_INT 2
44259: PUSH
44260: LD_INT 1
44262: PUSH
44263: EMPTY
44264: LIST
44265: LIST
44266: PUSH
44267: LD_INT 2
44269: PUSH
44270: LD_INT 2
44272: PUSH
44273: EMPTY
44274: LIST
44275: LIST
44276: PUSH
44277: LD_INT 1
44279: PUSH
44280: LD_INT 2
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: PUSH
44287: LD_INT 2
44289: NEG
44290: PUSH
44291: LD_INT 1
44293: NEG
44294: PUSH
44295: EMPTY
44296: LIST
44297: LIST
44298: PUSH
44299: LD_INT 2
44301: NEG
44302: PUSH
44303: LD_INT 2
44305: NEG
44306: PUSH
44307: EMPTY
44308: LIST
44309: LIST
44310: PUSH
44311: LD_INT 3
44313: PUSH
44314: LD_INT 2
44316: PUSH
44317: EMPTY
44318: LIST
44319: LIST
44320: PUSH
44321: LD_INT 3
44323: PUSH
44324: LD_INT 3
44326: PUSH
44327: EMPTY
44328: LIST
44329: LIST
44330: PUSH
44331: LD_INT 2
44333: PUSH
44334: LD_INT 3
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: PUSH
44341: EMPTY
44342: LIST
44343: LIST
44344: LIST
44345: LIST
44346: LIST
44347: LIST
44348: LIST
44349: LIST
44350: LIST
44351: LIST
44352: LIST
44353: LIST
44354: LIST
44355: LIST
44356: LIST
44357: LIST
44358: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44359: LD_ADDR_VAR 0 17
44363: PUSH
44364: LD_INT 0
44366: PUSH
44367: LD_INT 0
44369: PUSH
44370: EMPTY
44371: LIST
44372: LIST
44373: PUSH
44374: LD_INT 0
44376: PUSH
44377: LD_INT 1
44379: NEG
44380: PUSH
44381: EMPTY
44382: LIST
44383: LIST
44384: PUSH
44385: LD_INT 1
44387: PUSH
44388: LD_INT 0
44390: PUSH
44391: EMPTY
44392: LIST
44393: LIST
44394: PUSH
44395: LD_INT 1
44397: PUSH
44398: LD_INT 1
44400: PUSH
44401: EMPTY
44402: LIST
44403: LIST
44404: PUSH
44405: LD_INT 0
44407: PUSH
44408: LD_INT 1
44410: PUSH
44411: EMPTY
44412: LIST
44413: LIST
44414: PUSH
44415: LD_INT 1
44417: NEG
44418: PUSH
44419: LD_INT 0
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: PUSH
44426: LD_INT 1
44428: NEG
44429: PUSH
44430: LD_INT 1
44432: NEG
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: PUSH
44438: LD_INT 1
44440: NEG
44441: PUSH
44442: LD_INT 2
44444: NEG
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: PUSH
44450: LD_INT 0
44452: PUSH
44453: LD_INT 2
44455: NEG
44456: PUSH
44457: EMPTY
44458: LIST
44459: LIST
44460: PUSH
44461: LD_INT 1
44463: PUSH
44464: LD_INT 1
44466: NEG
44467: PUSH
44468: EMPTY
44469: LIST
44470: LIST
44471: PUSH
44472: LD_INT 2
44474: PUSH
44475: LD_INT 0
44477: PUSH
44478: EMPTY
44479: LIST
44480: LIST
44481: PUSH
44482: LD_INT 2
44484: PUSH
44485: LD_INT 1
44487: PUSH
44488: EMPTY
44489: LIST
44490: LIST
44491: PUSH
44492: LD_INT 2
44494: PUSH
44495: LD_INT 2
44497: PUSH
44498: EMPTY
44499: LIST
44500: LIST
44501: PUSH
44502: LD_INT 1
44504: PUSH
44505: LD_INT 2
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: PUSH
44512: LD_INT 0
44514: PUSH
44515: LD_INT 2
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: PUSH
44522: LD_INT 1
44524: NEG
44525: PUSH
44526: LD_INT 1
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: PUSH
44533: LD_INT 2
44535: NEG
44536: PUSH
44537: LD_INT 0
44539: PUSH
44540: EMPTY
44541: LIST
44542: LIST
44543: PUSH
44544: LD_INT 2
44546: NEG
44547: PUSH
44548: LD_INT 1
44550: NEG
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: PUSH
44556: LD_INT 2
44558: NEG
44559: PUSH
44560: LD_INT 2
44562: NEG
44563: PUSH
44564: EMPTY
44565: LIST
44566: LIST
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: LIST
44572: LIST
44573: LIST
44574: LIST
44575: LIST
44576: LIST
44577: LIST
44578: LIST
44579: LIST
44580: LIST
44581: LIST
44582: LIST
44583: LIST
44584: LIST
44585: LIST
44586: LIST
44587: LIST
44588: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44589: LD_ADDR_VAR 0 18
44593: PUSH
44594: LD_INT 0
44596: PUSH
44597: LD_INT 0
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: PUSH
44604: LD_INT 0
44606: PUSH
44607: LD_INT 1
44609: NEG
44610: PUSH
44611: EMPTY
44612: LIST
44613: LIST
44614: PUSH
44615: LD_INT 1
44617: PUSH
44618: LD_INT 0
44620: PUSH
44621: EMPTY
44622: LIST
44623: LIST
44624: PUSH
44625: LD_INT 1
44627: PUSH
44628: LD_INT 1
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: PUSH
44635: LD_INT 0
44637: PUSH
44638: LD_INT 1
44640: PUSH
44641: EMPTY
44642: LIST
44643: LIST
44644: PUSH
44645: LD_INT 1
44647: NEG
44648: PUSH
44649: LD_INT 0
44651: PUSH
44652: EMPTY
44653: LIST
44654: LIST
44655: PUSH
44656: LD_INT 1
44658: NEG
44659: PUSH
44660: LD_INT 1
44662: NEG
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: PUSH
44668: LD_INT 1
44670: NEG
44671: PUSH
44672: LD_INT 2
44674: NEG
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: PUSH
44680: LD_INT 0
44682: PUSH
44683: LD_INT 2
44685: NEG
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: PUSH
44691: LD_INT 1
44693: PUSH
44694: LD_INT 1
44696: NEG
44697: PUSH
44698: EMPTY
44699: LIST
44700: LIST
44701: PUSH
44702: LD_INT 2
44704: PUSH
44705: LD_INT 0
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: PUSH
44712: LD_INT 2
44714: PUSH
44715: LD_INT 1
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: PUSH
44722: LD_INT 2
44724: PUSH
44725: LD_INT 2
44727: PUSH
44728: EMPTY
44729: LIST
44730: LIST
44731: PUSH
44732: LD_INT 1
44734: PUSH
44735: LD_INT 2
44737: PUSH
44738: EMPTY
44739: LIST
44740: LIST
44741: PUSH
44742: LD_INT 0
44744: PUSH
44745: LD_INT 2
44747: PUSH
44748: EMPTY
44749: LIST
44750: LIST
44751: PUSH
44752: LD_INT 1
44754: NEG
44755: PUSH
44756: LD_INT 1
44758: PUSH
44759: EMPTY
44760: LIST
44761: LIST
44762: PUSH
44763: LD_INT 2
44765: NEG
44766: PUSH
44767: LD_INT 0
44769: PUSH
44770: EMPTY
44771: LIST
44772: LIST
44773: PUSH
44774: LD_INT 2
44776: NEG
44777: PUSH
44778: LD_INT 1
44780: NEG
44781: PUSH
44782: EMPTY
44783: LIST
44784: LIST
44785: PUSH
44786: LD_INT 2
44788: NEG
44789: PUSH
44790: LD_INT 2
44792: NEG
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: PUSH
44798: EMPTY
44799: LIST
44800: LIST
44801: LIST
44802: LIST
44803: LIST
44804: LIST
44805: LIST
44806: LIST
44807: LIST
44808: LIST
44809: LIST
44810: LIST
44811: LIST
44812: LIST
44813: LIST
44814: LIST
44815: LIST
44816: LIST
44817: LIST
44818: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44819: LD_ADDR_VAR 0 19
44823: PUSH
44824: LD_INT 0
44826: PUSH
44827: LD_INT 0
44829: PUSH
44830: EMPTY
44831: LIST
44832: LIST
44833: PUSH
44834: LD_INT 0
44836: PUSH
44837: LD_INT 1
44839: NEG
44840: PUSH
44841: EMPTY
44842: LIST
44843: LIST
44844: PUSH
44845: LD_INT 1
44847: PUSH
44848: LD_INT 0
44850: PUSH
44851: EMPTY
44852: LIST
44853: LIST
44854: PUSH
44855: LD_INT 1
44857: PUSH
44858: LD_INT 1
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: PUSH
44865: LD_INT 0
44867: PUSH
44868: LD_INT 1
44870: PUSH
44871: EMPTY
44872: LIST
44873: LIST
44874: PUSH
44875: LD_INT 1
44877: NEG
44878: PUSH
44879: LD_INT 0
44881: PUSH
44882: EMPTY
44883: LIST
44884: LIST
44885: PUSH
44886: LD_INT 1
44888: NEG
44889: PUSH
44890: LD_INT 1
44892: NEG
44893: PUSH
44894: EMPTY
44895: LIST
44896: LIST
44897: PUSH
44898: LD_INT 1
44900: NEG
44901: PUSH
44902: LD_INT 2
44904: NEG
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: PUSH
44910: LD_INT 0
44912: PUSH
44913: LD_INT 2
44915: NEG
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: PUSH
44921: LD_INT 1
44923: PUSH
44924: LD_INT 1
44926: NEG
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: LD_INT 2
44934: PUSH
44935: LD_INT 0
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: PUSH
44942: LD_INT 2
44944: PUSH
44945: LD_INT 1
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PUSH
44952: LD_INT 2
44954: PUSH
44955: LD_INT 2
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: PUSH
44962: LD_INT 1
44964: PUSH
44965: LD_INT 2
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: PUSH
44972: LD_INT 0
44974: PUSH
44975: LD_INT 2
44977: PUSH
44978: EMPTY
44979: LIST
44980: LIST
44981: PUSH
44982: LD_INT 1
44984: NEG
44985: PUSH
44986: LD_INT 1
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: PUSH
44993: LD_INT 2
44995: NEG
44996: PUSH
44997: LD_INT 0
44999: PUSH
45000: EMPTY
45001: LIST
45002: LIST
45003: PUSH
45004: LD_INT 2
45006: NEG
45007: PUSH
45008: LD_INT 1
45010: NEG
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: PUSH
45016: LD_INT 2
45018: NEG
45019: PUSH
45020: LD_INT 2
45022: NEG
45023: PUSH
45024: EMPTY
45025: LIST
45026: LIST
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: LIST
45032: LIST
45033: LIST
45034: LIST
45035: LIST
45036: LIST
45037: LIST
45038: LIST
45039: LIST
45040: LIST
45041: LIST
45042: LIST
45043: LIST
45044: LIST
45045: LIST
45046: LIST
45047: LIST
45048: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45049: LD_ADDR_VAR 0 20
45053: PUSH
45054: LD_INT 0
45056: PUSH
45057: LD_INT 0
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: PUSH
45064: LD_INT 0
45066: PUSH
45067: LD_INT 1
45069: NEG
45070: PUSH
45071: EMPTY
45072: LIST
45073: LIST
45074: PUSH
45075: LD_INT 1
45077: PUSH
45078: LD_INT 0
45080: PUSH
45081: EMPTY
45082: LIST
45083: LIST
45084: PUSH
45085: LD_INT 1
45087: PUSH
45088: LD_INT 1
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: PUSH
45095: LD_INT 0
45097: PUSH
45098: LD_INT 1
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: PUSH
45105: LD_INT 1
45107: NEG
45108: PUSH
45109: LD_INT 0
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: PUSH
45116: LD_INT 1
45118: NEG
45119: PUSH
45120: LD_INT 1
45122: NEG
45123: PUSH
45124: EMPTY
45125: LIST
45126: LIST
45127: PUSH
45128: LD_INT 1
45130: NEG
45131: PUSH
45132: LD_INT 2
45134: NEG
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PUSH
45140: LD_INT 0
45142: PUSH
45143: LD_INT 2
45145: NEG
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: PUSH
45151: LD_INT 1
45153: PUSH
45154: LD_INT 1
45156: NEG
45157: PUSH
45158: EMPTY
45159: LIST
45160: LIST
45161: PUSH
45162: LD_INT 2
45164: PUSH
45165: LD_INT 0
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: PUSH
45172: LD_INT 2
45174: PUSH
45175: LD_INT 1
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: LD_INT 2
45184: PUSH
45185: LD_INT 2
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: PUSH
45192: LD_INT 1
45194: PUSH
45195: LD_INT 2
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: PUSH
45202: LD_INT 0
45204: PUSH
45205: LD_INT 2
45207: PUSH
45208: EMPTY
45209: LIST
45210: LIST
45211: PUSH
45212: LD_INT 1
45214: NEG
45215: PUSH
45216: LD_INT 1
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: PUSH
45223: LD_INT 2
45225: NEG
45226: PUSH
45227: LD_INT 0
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: PUSH
45234: LD_INT 2
45236: NEG
45237: PUSH
45238: LD_INT 1
45240: NEG
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: PUSH
45246: LD_INT 2
45248: NEG
45249: PUSH
45250: LD_INT 2
45252: NEG
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PUSH
45258: EMPTY
45259: LIST
45260: LIST
45261: LIST
45262: LIST
45263: LIST
45264: LIST
45265: LIST
45266: LIST
45267: LIST
45268: LIST
45269: LIST
45270: LIST
45271: LIST
45272: LIST
45273: LIST
45274: LIST
45275: LIST
45276: LIST
45277: LIST
45278: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45279: LD_ADDR_VAR 0 21
45283: PUSH
45284: LD_INT 0
45286: PUSH
45287: LD_INT 0
45289: PUSH
45290: EMPTY
45291: LIST
45292: LIST
45293: PUSH
45294: LD_INT 0
45296: PUSH
45297: LD_INT 1
45299: NEG
45300: PUSH
45301: EMPTY
45302: LIST
45303: LIST
45304: PUSH
45305: LD_INT 1
45307: PUSH
45308: LD_INT 0
45310: PUSH
45311: EMPTY
45312: LIST
45313: LIST
45314: PUSH
45315: LD_INT 1
45317: PUSH
45318: LD_INT 1
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: PUSH
45325: LD_INT 0
45327: PUSH
45328: LD_INT 1
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: PUSH
45335: LD_INT 1
45337: NEG
45338: PUSH
45339: LD_INT 0
45341: PUSH
45342: EMPTY
45343: LIST
45344: LIST
45345: PUSH
45346: LD_INT 1
45348: NEG
45349: PUSH
45350: LD_INT 1
45352: NEG
45353: PUSH
45354: EMPTY
45355: LIST
45356: LIST
45357: PUSH
45358: LD_INT 1
45360: NEG
45361: PUSH
45362: LD_INT 2
45364: NEG
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: PUSH
45370: LD_INT 0
45372: PUSH
45373: LD_INT 2
45375: NEG
45376: PUSH
45377: EMPTY
45378: LIST
45379: LIST
45380: PUSH
45381: LD_INT 1
45383: PUSH
45384: LD_INT 1
45386: NEG
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: PUSH
45392: LD_INT 2
45394: PUSH
45395: LD_INT 0
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: PUSH
45402: LD_INT 2
45404: PUSH
45405: LD_INT 1
45407: PUSH
45408: EMPTY
45409: LIST
45410: LIST
45411: PUSH
45412: LD_INT 2
45414: PUSH
45415: LD_INT 2
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: PUSH
45422: LD_INT 1
45424: PUSH
45425: LD_INT 2
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: PUSH
45432: LD_INT 0
45434: PUSH
45435: LD_INT 2
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: PUSH
45442: LD_INT 1
45444: NEG
45445: PUSH
45446: LD_INT 1
45448: PUSH
45449: EMPTY
45450: LIST
45451: LIST
45452: PUSH
45453: LD_INT 2
45455: NEG
45456: PUSH
45457: LD_INT 0
45459: PUSH
45460: EMPTY
45461: LIST
45462: LIST
45463: PUSH
45464: LD_INT 2
45466: NEG
45467: PUSH
45468: LD_INT 1
45470: NEG
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: PUSH
45476: LD_INT 2
45478: NEG
45479: PUSH
45480: LD_INT 2
45482: NEG
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: LIST
45492: LIST
45493: LIST
45494: LIST
45495: LIST
45496: LIST
45497: LIST
45498: LIST
45499: LIST
45500: LIST
45501: LIST
45502: LIST
45503: LIST
45504: LIST
45505: LIST
45506: LIST
45507: LIST
45508: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45509: LD_ADDR_VAR 0 22
45513: PUSH
45514: LD_INT 0
45516: PUSH
45517: LD_INT 0
45519: PUSH
45520: EMPTY
45521: LIST
45522: LIST
45523: PUSH
45524: LD_INT 0
45526: PUSH
45527: LD_INT 1
45529: NEG
45530: PUSH
45531: EMPTY
45532: LIST
45533: LIST
45534: PUSH
45535: LD_INT 1
45537: PUSH
45538: LD_INT 0
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: PUSH
45545: LD_INT 1
45547: PUSH
45548: LD_INT 1
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: PUSH
45555: LD_INT 0
45557: PUSH
45558: LD_INT 1
45560: PUSH
45561: EMPTY
45562: LIST
45563: LIST
45564: PUSH
45565: LD_INT 1
45567: NEG
45568: PUSH
45569: LD_INT 0
45571: PUSH
45572: EMPTY
45573: LIST
45574: LIST
45575: PUSH
45576: LD_INT 1
45578: NEG
45579: PUSH
45580: LD_INT 1
45582: NEG
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: PUSH
45588: LD_INT 1
45590: NEG
45591: PUSH
45592: LD_INT 2
45594: NEG
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: PUSH
45600: LD_INT 0
45602: PUSH
45603: LD_INT 2
45605: NEG
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: LD_INT 1
45613: PUSH
45614: LD_INT 1
45616: NEG
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: LD_INT 2
45624: PUSH
45625: LD_INT 0
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: LD_INT 2
45634: PUSH
45635: LD_INT 1
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: LD_INT 2
45644: PUSH
45645: LD_INT 2
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: PUSH
45652: LD_INT 1
45654: PUSH
45655: LD_INT 2
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PUSH
45662: LD_INT 0
45664: PUSH
45665: LD_INT 2
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: PUSH
45672: LD_INT 1
45674: NEG
45675: PUSH
45676: LD_INT 1
45678: PUSH
45679: EMPTY
45680: LIST
45681: LIST
45682: PUSH
45683: LD_INT 2
45685: NEG
45686: PUSH
45687: LD_INT 0
45689: PUSH
45690: EMPTY
45691: LIST
45692: LIST
45693: PUSH
45694: LD_INT 2
45696: NEG
45697: PUSH
45698: LD_INT 1
45700: NEG
45701: PUSH
45702: EMPTY
45703: LIST
45704: LIST
45705: PUSH
45706: LD_INT 2
45708: NEG
45709: PUSH
45710: LD_INT 2
45712: NEG
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: PUSH
45718: EMPTY
45719: LIST
45720: LIST
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: LIST
45729: LIST
45730: LIST
45731: LIST
45732: LIST
45733: LIST
45734: LIST
45735: LIST
45736: LIST
45737: LIST
45738: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45739: LD_ADDR_VAR 0 23
45743: PUSH
45744: LD_INT 0
45746: PUSH
45747: LD_INT 0
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: PUSH
45754: LD_INT 0
45756: PUSH
45757: LD_INT 1
45759: NEG
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: LD_INT 1
45767: PUSH
45768: LD_INT 0
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PUSH
45775: LD_INT 1
45777: PUSH
45778: LD_INT 1
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: PUSH
45785: LD_INT 0
45787: PUSH
45788: LD_INT 1
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: PUSH
45795: LD_INT 1
45797: NEG
45798: PUSH
45799: LD_INT 0
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PUSH
45806: LD_INT 1
45808: NEG
45809: PUSH
45810: LD_INT 1
45812: NEG
45813: PUSH
45814: EMPTY
45815: LIST
45816: LIST
45817: PUSH
45818: LD_INT 1
45820: NEG
45821: PUSH
45822: LD_INT 2
45824: NEG
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: LD_INT 0
45832: PUSH
45833: LD_INT 2
45835: NEG
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: PUSH
45841: LD_INT 1
45843: PUSH
45844: LD_INT 1
45846: NEG
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: LD_INT 2
45854: PUSH
45855: LD_INT 0
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: PUSH
45862: LD_INT 2
45864: PUSH
45865: LD_INT 1
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: LD_INT 2
45874: PUSH
45875: LD_INT 2
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: LD_INT 1
45884: PUSH
45885: LD_INT 2
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: PUSH
45892: LD_INT 0
45894: PUSH
45895: LD_INT 2
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: PUSH
45902: LD_INT 1
45904: NEG
45905: PUSH
45906: LD_INT 1
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: PUSH
45913: LD_INT 2
45915: NEG
45916: PUSH
45917: LD_INT 0
45919: PUSH
45920: EMPTY
45921: LIST
45922: LIST
45923: PUSH
45924: LD_INT 2
45926: NEG
45927: PUSH
45928: LD_INT 1
45930: NEG
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: LD_INT 2
45938: NEG
45939: PUSH
45940: LD_INT 2
45942: NEG
45943: PUSH
45944: EMPTY
45945: LIST
45946: LIST
45947: PUSH
45948: LD_INT 2
45950: NEG
45951: PUSH
45952: LD_INT 3
45954: NEG
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: PUSH
45960: LD_INT 1
45962: NEG
45963: PUSH
45964: LD_INT 3
45966: NEG
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: PUSH
45972: LD_INT 1
45974: PUSH
45975: LD_INT 2
45977: NEG
45978: PUSH
45979: EMPTY
45980: LIST
45981: LIST
45982: PUSH
45983: LD_INT 2
45985: PUSH
45986: LD_INT 1
45988: NEG
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: PUSH
45994: EMPTY
45995: LIST
45996: LIST
45997: LIST
45998: LIST
45999: LIST
46000: LIST
46001: LIST
46002: LIST
46003: LIST
46004: LIST
46005: LIST
46006: LIST
46007: LIST
46008: LIST
46009: LIST
46010: LIST
46011: LIST
46012: LIST
46013: LIST
46014: LIST
46015: LIST
46016: LIST
46017: LIST
46018: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
46019: LD_ADDR_VAR 0 24
46023: PUSH
46024: LD_INT 0
46026: PUSH
46027: LD_INT 0
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 0
46036: PUSH
46037: LD_INT 1
46039: NEG
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: PUSH
46045: LD_INT 1
46047: PUSH
46048: LD_INT 0
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: PUSH
46055: LD_INT 1
46057: PUSH
46058: LD_INT 1
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: PUSH
46065: LD_INT 0
46067: PUSH
46068: LD_INT 1
46070: PUSH
46071: EMPTY
46072: LIST
46073: LIST
46074: PUSH
46075: LD_INT 1
46077: NEG
46078: PUSH
46079: LD_INT 0
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 1
46088: NEG
46089: PUSH
46090: LD_INT 1
46092: NEG
46093: PUSH
46094: EMPTY
46095: LIST
46096: LIST
46097: PUSH
46098: LD_INT 1
46100: NEG
46101: PUSH
46102: LD_INT 2
46104: NEG
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: PUSH
46110: LD_INT 0
46112: PUSH
46113: LD_INT 2
46115: NEG
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: PUSH
46121: LD_INT 1
46123: PUSH
46124: LD_INT 1
46126: NEG
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: LD_INT 2
46134: PUSH
46135: LD_INT 0
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 2
46144: PUSH
46145: LD_INT 1
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: LD_INT 2
46154: PUSH
46155: LD_INT 2
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: LD_INT 1
46164: PUSH
46165: LD_INT 2
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: PUSH
46172: LD_INT 0
46174: PUSH
46175: LD_INT 2
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: LD_INT 1
46184: NEG
46185: PUSH
46186: LD_INT 1
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: PUSH
46193: LD_INT 2
46195: NEG
46196: PUSH
46197: LD_INT 0
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: PUSH
46204: LD_INT 2
46206: NEG
46207: PUSH
46208: LD_INT 1
46210: NEG
46211: PUSH
46212: EMPTY
46213: LIST
46214: LIST
46215: PUSH
46216: LD_INT 2
46218: NEG
46219: PUSH
46220: LD_INT 2
46222: NEG
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: PUSH
46228: LD_INT 1
46230: PUSH
46231: LD_INT 2
46233: NEG
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 2
46241: PUSH
46242: LD_INT 1
46244: NEG
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: PUSH
46250: LD_INT 3
46252: PUSH
46253: LD_INT 1
46255: PUSH
46256: EMPTY
46257: LIST
46258: LIST
46259: PUSH
46260: LD_INT 3
46262: PUSH
46263: LD_INT 2
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: LIST
46274: LIST
46275: LIST
46276: LIST
46277: LIST
46278: LIST
46279: LIST
46280: LIST
46281: LIST
46282: LIST
46283: LIST
46284: LIST
46285: LIST
46286: LIST
46287: LIST
46288: LIST
46289: LIST
46290: LIST
46291: LIST
46292: LIST
46293: LIST
46294: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
46295: LD_ADDR_VAR 0 25
46299: PUSH
46300: LD_INT 0
46302: PUSH
46303: LD_INT 0
46305: PUSH
46306: EMPTY
46307: LIST
46308: LIST
46309: PUSH
46310: LD_INT 0
46312: PUSH
46313: LD_INT 1
46315: NEG
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: PUSH
46321: LD_INT 1
46323: PUSH
46324: LD_INT 0
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: PUSH
46331: LD_INT 1
46333: PUSH
46334: LD_INT 1
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: PUSH
46341: LD_INT 0
46343: PUSH
46344: LD_INT 1
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PUSH
46351: LD_INT 1
46353: NEG
46354: PUSH
46355: LD_INT 0
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: PUSH
46362: LD_INT 1
46364: NEG
46365: PUSH
46366: LD_INT 1
46368: NEG
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: PUSH
46374: LD_INT 1
46376: NEG
46377: PUSH
46378: LD_INT 2
46380: NEG
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: PUSH
46386: LD_INT 0
46388: PUSH
46389: LD_INT 2
46391: NEG
46392: PUSH
46393: EMPTY
46394: LIST
46395: LIST
46396: PUSH
46397: LD_INT 1
46399: PUSH
46400: LD_INT 1
46402: NEG
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: PUSH
46408: LD_INT 2
46410: PUSH
46411: LD_INT 0
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: PUSH
46418: LD_INT 2
46420: PUSH
46421: LD_INT 1
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: PUSH
46428: LD_INT 2
46430: PUSH
46431: LD_INT 2
46433: PUSH
46434: EMPTY
46435: LIST
46436: LIST
46437: PUSH
46438: LD_INT 1
46440: PUSH
46441: LD_INT 2
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: PUSH
46448: LD_INT 0
46450: PUSH
46451: LD_INT 2
46453: PUSH
46454: EMPTY
46455: LIST
46456: LIST
46457: PUSH
46458: LD_INT 1
46460: NEG
46461: PUSH
46462: LD_INT 1
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: PUSH
46469: LD_INT 2
46471: NEG
46472: PUSH
46473: LD_INT 0
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: LD_INT 2
46482: NEG
46483: PUSH
46484: LD_INT 1
46486: NEG
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: PUSH
46492: LD_INT 2
46494: NEG
46495: PUSH
46496: LD_INT 2
46498: NEG
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 3
46506: PUSH
46507: LD_INT 1
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: PUSH
46514: LD_INT 3
46516: PUSH
46517: LD_INT 2
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: PUSH
46524: LD_INT 2
46526: PUSH
46527: LD_INT 3
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: PUSH
46534: LD_INT 1
46536: PUSH
46537: LD_INT 3
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: LIST
46548: LIST
46549: LIST
46550: LIST
46551: LIST
46552: LIST
46553: LIST
46554: LIST
46555: LIST
46556: LIST
46557: LIST
46558: LIST
46559: LIST
46560: LIST
46561: LIST
46562: LIST
46563: LIST
46564: LIST
46565: LIST
46566: LIST
46567: LIST
46568: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46569: LD_ADDR_VAR 0 26
46573: PUSH
46574: LD_INT 0
46576: PUSH
46577: LD_INT 0
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: PUSH
46584: LD_INT 0
46586: PUSH
46587: LD_INT 1
46589: NEG
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: LD_INT 1
46597: PUSH
46598: LD_INT 0
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: PUSH
46605: LD_INT 1
46607: PUSH
46608: LD_INT 1
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: PUSH
46615: LD_INT 0
46617: PUSH
46618: LD_INT 1
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: PUSH
46625: LD_INT 1
46627: NEG
46628: PUSH
46629: LD_INT 0
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: PUSH
46636: LD_INT 1
46638: NEG
46639: PUSH
46640: LD_INT 1
46642: NEG
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: PUSH
46648: LD_INT 1
46650: NEG
46651: PUSH
46652: LD_INT 2
46654: NEG
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: PUSH
46660: LD_INT 0
46662: PUSH
46663: LD_INT 2
46665: NEG
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: PUSH
46671: LD_INT 1
46673: PUSH
46674: LD_INT 1
46676: NEG
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: LD_INT 2
46684: PUSH
46685: LD_INT 0
46687: PUSH
46688: EMPTY
46689: LIST
46690: LIST
46691: PUSH
46692: LD_INT 2
46694: PUSH
46695: LD_INT 1
46697: PUSH
46698: EMPTY
46699: LIST
46700: LIST
46701: PUSH
46702: LD_INT 2
46704: PUSH
46705: LD_INT 2
46707: PUSH
46708: EMPTY
46709: LIST
46710: LIST
46711: PUSH
46712: LD_INT 1
46714: PUSH
46715: LD_INT 2
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: PUSH
46722: LD_INT 0
46724: PUSH
46725: LD_INT 2
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: PUSH
46732: LD_INT 1
46734: NEG
46735: PUSH
46736: LD_INT 1
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: PUSH
46743: LD_INT 2
46745: NEG
46746: PUSH
46747: LD_INT 0
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: LD_INT 2
46756: NEG
46757: PUSH
46758: LD_INT 1
46760: NEG
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: LD_INT 2
46768: NEG
46769: PUSH
46770: LD_INT 2
46772: NEG
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: PUSH
46778: LD_INT 2
46780: PUSH
46781: LD_INT 3
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 1
46790: PUSH
46791: LD_INT 3
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: PUSH
46798: LD_INT 1
46800: NEG
46801: PUSH
46802: LD_INT 2
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: PUSH
46809: LD_INT 2
46811: NEG
46812: PUSH
46813: LD_INT 1
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: LIST
46824: LIST
46825: LIST
46826: LIST
46827: LIST
46828: LIST
46829: LIST
46830: LIST
46831: LIST
46832: LIST
46833: LIST
46834: LIST
46835: LIST
46836: LIST
46837: LIST
46838: LIST
46839: LIST
46840: LIST
46841: LIST
46842: LIST
46843: LIST
46844: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46845: LD_ADDR_VAR 0 27
46849: PUSH
46850: LD_INT 0
46852: PUSH
46853: LD_INT 0
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 0
46862: PUSH
46863: LD_INT 1
46865: NEG
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: PUSH
46871: LD_INT 1
46873: PUSH
46874: LD_INT 0
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PUSH
46881: LD_INT 1
46883: PUSH
46884: LD_INT 1
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: PUSH
46891: LD_INT 0
46893: PUSH
46894: LD_INT 1
46896: PUSH
46897: EMPTY
46898: LIST
46899: LIST
46900: PUSH
46901: LD_INT 1
46903: NEG
46904: PUSH
46905: LD_INT 0
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: PUSH
46912: LD_INT 1
46914: NEG
46915: PUSH
46916: LD_INT 1
46918: NEG
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: PUSH
46924: LD_INT 1
46926: NEG
46927: PUSH
46928: LD_INT 2
46930: NEG
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: PUSH
46936: LD_INT 0
46938: PUSH
46939: LD_INT 2
46941: NEG
46942: PUSH
46943: EMPTY
46944: LIST
46945: LIST
46946: PUSH
46947: LD_INT 1
46949: PUSH
46950: LD_INT 1
46952: NEG
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: PUSH
46958: LD_INT 2
46960: PUSH
46961: LD_INT 0
46963: PUSH
46964: EMPTY
46965: LIST
46966: LIST
46967: PUSH
46968: LD_INT 2
46970: PUSH
46971: LD_INT 1
46973: PUSH
46974: EMPTY
46975: LIST
46976: LIST
46977: PUSH
46978: LD_INT 2
46980: PUSH
46981: LD_INT 2
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: PUSH
46988: LD_INT 1
46990: PUSH
46991: LD_INT 2
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: PUSH
46998: LD_INT 0
47000: PUSH
47001: LD_INT 2
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: PUSH
47008: LD_INT 1
47010: NEG
47011: PUSH
47012: LD_INT 1
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: PUSH
47019: LD_INT 2
47021: NEG
47022: PUSH
47023: LD_INT 0
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: PUSH
47030: LD_INT 2
47032: NEG
47033: PUSH
47034: LD_INT 1
47036: NEG
47037: PUSH
47038: EMPTY
47039: LIST
47040: LIST
47041: PUSH
47042: LD_INT 2
47044: NEG
47045: PUSH
47046: LD_INT 2
47048: NEG
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: PUSH
47054: LD_INT 1
47056: NEG
47057: PUSH
47058: LD_INT 2
47060: PUSH
47061: EMPTY
47062: LIST
47063: LIST
47064: PUSH
47065: LD_INT 2
47067: NEG
47068: PUSH
47069: LD_INT 1
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: PUSH
47076: LD_INT 3
47078: NEG
47079: PUSH
47080: LD_INT 1
47082: NEG
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: PUSH
47088: LD_INT 3
47090: NEG
47091: PUSH
47092: LD_INT 2
47094: NEG
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: LIST
47104: LIST
47105: LIST
47106: LIST
47107: LIST
47108: LIST
47109: LIST
47110: LIST
47111: LIST
47112: LIST
47113: LIST
47114: LIST
47115: LIST
47116: LIST
47117: LIST
47118: LIST
47119: LIST
47120: LIST
47121: LIST
47122: LIST
47123: LIST
47124: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47125: LD_ADDR_VAR 0 28
47129: PUSH
47130: LD_INT 0
47132: PUSH
47133: LD_INT 0
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: PUSH
47140: LD_INT 0
47142: PUSH
47143: LD_INT 1
47145: NEG
47146: PUSH
47147: EMPTY
47148: LIST
47149: LIST
47150: PUSH
47151: LD_INT 1
47153: PUSH
47154: LD_INT 0
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: PUSH
47161: LD_INT 1
47163: PUSH
47164: LD_INT 1
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: PUSH
47171: LD_INT 0
47173: PUSH
47174: LD_INT 1
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: PUSH
47181: LD_INT 1
47183: NEG
47184: PUSH
47185: LD_INT 0
47187: PUSH
47188: EMPTY
47189: LIST
47190: LIST
47191: PUSH
47192: LD_INT 1
47194: NEG
47195: PUSH
47196: LD_INT 1
47198: NEG
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: PUSH
47204: LD_INT 1
47206: NEG
47207: PUSH
47208: LD_INT 2
47210: NEG
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: LD_INT 0
47218: PUSH
47219: LD_INT 2
47221: NEG
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: PUSH
47227: LD_INT 1
47229: PUSH
47230: LD_INT 1
47232: NEG
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: PUSH
47238: LD_INT 2
47240: PUSH
47241: LD_INT 0
47243: PUSH
47244: EMPTY
47245: LIST
47246: LIST
47247: PUSH
47248: LD_INT 2
47250: PUSH
47251: LD_INT 1
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: PUSH
47258: LD_INT 2
47260: PUSH
47261: LD_INT 2
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: PUSH
47268: LD_INT 1
47270: PUSH
47271: LD_INT 2
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: LD_INT 0
47280: PUSH
47281: LD_INT 2
47283: PUSH
47284: EMPTY
47285: LIST
47286: LIST
47287: PUSH
47288: LD_INT 1
47290: NEG
47291: PUSH
47292: LD_INT 1
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PUSH
47299: LD_INT 2
47301: NEG
47302: PUSH
47303: LD_INT 0
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: PUSH
47310: LD_INT 2
47312: NEG
47313: PUSH
47314: LD_INT 1
47316: NEG
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: PUSH
47322: LD_INT 2
47324: NEG
47325: PUSH
47326: LD_INT 2
47328: NEG
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 2
47336: NEG
47337: PUSH
47338: LD_INT 3
47340: NEG
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 1
47348: NEG
47349: PUSH
47350: LD_INT 3
47352: NEG
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: PUSH
47358: LD_INT 3
47360: NEG
47361: PUSH
47362: LD_INT 1
47364: NEG
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: PUSH
47370: LD_INT 3
47372: NEG
47373: PUSH
47374: LD_INT 2
47376: NEG
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: PUSH
47382: EMPTY
47383: LIST
47384: LIST
47385: LIST
47386: LIST
47387: LIST
47388: LIST
47389: LIST
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: LIST
47396: LIST
47397: LIST
47398: LIST
47399: LIST
47400: LIST
47401: LIST
47402: LIST
47403: LIST
47404: LIST
47405: LIST
47406: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47407: LD_ADDR_VAR 0 29
47411: PUSH
47412: LD_INT 0
47414: PUSH
47415: LD_INT 0
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PUSH
47422: LD_INT 0
47424: PUSH
47425: LD_INT 1
47427: NEG
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: LD_INT 1
47435: PUSH
47436: LD_INT 0
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: PUSH
47443: LD_INT 1
47445: PUSH
47446: LD_INT 1
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: PUSH
47453: LD_INT 0
47455: PUSH
47456: LD_INT 1
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: PUSH
47463: LD_INT 1
47465: NEG
47466: PUSH
47467: LD_INT 0
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: PUSH
47474: LD_INT 1
47476: NEG
47477: PUSH
47478: LD_INT 1
47480: NEG
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: PUSH
47486: LD_INT 1
47488: NEG
47489: PUSH
47490: LD_INT 2
47492: NEG
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: PUSH
47498: LD_INT 0
47500: PUSH
47501: LD_INT 2
47503: NEG
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: LD_INT 1
47511: PUSH
47512: LD_INT 1
47514: NEG
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: PUSH
47520: LD_INT 2
47522: PUSH
47523: LD_INT 0
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: PUSH
47530: LD_INT 2
47532: PUSH
47533: LD_INT 1
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: LD_INT 1
47542: PUSH
47543: LD_INT 2
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: PUSH
47550: LD_INT 0
47552: PUSH
47553: LD_INT 2
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: PUSH
47560: LD_INT 1
47562: NEG
47563: PUSH
47564: LD_INT 1
47566: PUSH
47567: EMPTY
47568: LIST
47569: LIST
47570: PUSH
47571: LD_INT 2
47573: NEG
47574: PUSH
47575: LD_INT 1
47577: NEG
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: PUSH
47583: LD_INT 2
47585: NEG
47586: PUSH
47587: LD_INT 2
47589: NEG
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: LD_INT 2
47597: NEG
47598: PUSH
47599: LD_INT 3
47601: NEG
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: PUSH
47607: LD_INT 2
47609: PUSH
47610: LD_INT 1
47612: NEG
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: PUSH
47618: LD_INT 3
47620: PUSH
47621: LD_INT 1
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: PUSH
47628: LD_INT 1
47630: PUSH
47631: LD_INT 3
47633: PUSH
47634: EMPTY
47635: LIST
47636: LIST
47637: PUSH
47638: LD_INT 1
47640: NEG
47641: PUSH
47642: LD_INT 2
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: PUSH
47649: LD_INT 3
47651: NEG
47652: PUSH
47653: LD_INT 2
47655: NEG
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: LIST
47665: LIST
47666: LIST
47667: LIST
47668: LIST
47669: LIST
47670: LIST
47671: LIST
47672: LIST
47673: LIST
47674: LIST
47675: LIST
47676: LIST
47677: LIST
47678: LIST
47679: LIST
47680: LIST
47681: LIST
47682: LIST
47683: LIST
47684: LIST
47685: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47686: LD_ADDR_VAR 0 30
47690: PUSH
47691: LD_INT 0
47693: PUSH
47694: LD_INT 0
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: PUSH
47701: LD_INT 0
47703: PUSH
47704: LD_INT 1
47706: NEG
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PUSH
47712: LD_INT 1
47714: PUSH
47715: LD_INT 0
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: PUSH
47722: LD_INT 1
47724: PUSH
47725: LD_INT 1
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: PUSH
47732: LD_INT 0
47734: PUSH
47735: LD_INT 1
47737: PUSH
47738: EMPTY
47739: LIST
47740: LIST
47741: PUSH
47742: LD_INT 1
47744: NEG
47745: PUSH
47746: LD_INT 0
47748: PUSH
47749: EMPTY
47750: LIST
47751: LIST
47752: PUSH
47753: LD_INT 1
47755: NEG
47756: PUSH
47757: LD_INT 1
47759: NEG
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: LD_INT 1
47767: NEG
47768: PUSH
47769: LD_INT 2
47771: NEG
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: PUSH
47777: LD_INT 0
47779: PUSH
47780: LD_INT 2
47782: NEG
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: PUSH
47788: LD_INT 1
47790: PUSH
47791: LD_INT 1
47793: NEG
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: PUSH
47799: LD_INT 2
47801: PUSH
47802: LD_INT 0
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: PUSH
47809: LD_INT 2
47811: PUSH
47812: LD_INT 1
47814: PUSH
47815: EMPTY
47816: LIST
47817: LIST
47818: PUSH
47819: LD_INT 2
47821: PUSH
47822: LD_INT 2
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 1
47831: PUSH
47832: LD_INT 2
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: PUSH
47839: LD_INT 1
47841: NEG
47842: PUSH
47843: LD_INT 1
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: PUSH
47850: LD_INT 2
47852: NEG
47853: PUSH
47854: LD_INT 0
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PUSH
47861: LD_INT 2
47863: NEG
47864: PUSH
47865: LD_INT 1
47867: NEG
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: PUSH
47873: LD_INT 1
47875: NEG
47876: PUSH
47877: LD_INT 3
47879: NEG
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 1
47887: PUSH
47888: LD_INT 2
47890: NEG
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: LD_INT 3
47898: PUSH
47899: LD_INT 2
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: PUSH
47906: LD_INT 2
47908: PUSH
47909: LD_INT 3
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: PUSH
47916: LD_INT 2
47918: NEG
47919: PUSH
47920: LD_INT 1
47922: PUSH
47923: EMPTY
47924: LIST
47925: LIST
47926: PUSH
47927: LD_INT 3
47929: NEG
47930: PUSH
47931: LD_INT 1
47933: NEG
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: LIST
47943: LIST
47944: LIST
47945: LIST
47946: LIST
47947: LIST
47948: LIST
47949: LIST
47950: LIST
47951: LIST
47952: LIST
47953: LIST
47954: LIST
47955: LIST
47956: LIST
47957: LIST
47958: LIST
47959: LIST
47960: LIST
47961: LIST
47962: LIST
47963: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47964: LD_ADDR_VAR 0 31
47968: PUSH
47969: LD_INT 0
47971: PUSH
47972: LD_INT 0
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: PUSH
47979: LD_INT 0
47981: PUSH
47982: LD_INT 1
47984: NEG
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PUSH
47990: LD_INT 1
47992: PUSH
47993: LD_INT 0
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: PUSH
48000: LD_INT 1
48002: PUSH
48003: LD_INT 1
48005: PUSH
48006: EMPTY
48007: LIST
48008: LIST
48009: PUSH
48010: LD_INT 0
48012: PUSH
48013: LD_INT 1
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: PUSH
48020: LD_INT 1
48022: NEG
48023: PUSH
48024: LD_INT 0
48026: PUSH
48027: EMPTY
48028: LIST
48029: LIST
48030: PUSH
48031: LD_INT 1
48033: NEG
48034: PUSH
48035: LD_INT 1
48037: NEG
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: LD_INT 1
48045: NEG
48046: PUSH
48047: LD_INT 2
48049: NEG
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: PUSH
48055: LD_INT 1
48057: PUSH
48058: LD_INT 1
48060: NEG
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: PUSH
48066: LD_INT 2
48068: PUSH
48069: LD_INT 0
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: PUSH
48076: LD_INT 2
48078: PUSH
48079: LD_INT 1
48081: PUSH
48082: EMPTY
48083: LIST
48084: LIST
48085: PUSH
48086: LD_INT 2
48088: PUSH
48089: LD_INT 2
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: PUSH
48096: LD_INT 1
48098: PUSH
48099: LD_INT 2
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: PUSH
48106: LD_INT 0
48108: PUSH
48109: LD_INT 2
48111: PUSH
48112: EMPTY
48113: LIST
48114: LIST
48115: PUSH
48116: LD_INT 1
48118: NEG
48119: PUSH
48120: LD_INT 1
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: PUSH
48127: LD_INT 2
48129: NEG
48130: PUSH
48131: LD_INT 1
48133: NEG
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: PUSH
48139: LD_INT 2
48141: NEG
48142: PUSH
48143: LD_INT 2
48145: NEG
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: LD_INT 2
48153: NEG
48154: PUSH
48155: LD_INT 3
48157: NEG
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: PUSH
48163: LD_INT 2
48165: PUSH
48166: LD_INT 1
48168: NEG
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PUSH
48174: LD_INT 3
48176: PUSH
48177: LD_INT 1
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: PUSH
48184: LD_INT 1
48186: PUSH
48187: LD_INT 3
48189: PUSH
48190: EMPTY
48191: LIST
48192: LIST
48193: PUSH
48194: LD_INT 1
48196: NEG
48197: PUSH
48198: LD_INT 2
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: PUSH
48205: LD_INT 3
48207: NEG
48208: PUSH
48209: LD_INT 2
48211: NEG
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: LIST
48221: LIST
48222: LIST
48223: LIST
48224: LIST
48225: LIST
48226: LIST
48227: LIST
48228: LIST
48229: LIST
48230: LIST
48231: LIST
48232: LIST
48233: LIST
48234: LIST
48235: LIST
48236: LIST
48237: LIST
48238: LIST
48239: LIST
48240: LIST
48241: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48242: LD_ADDR_VAR 0 32
48246: PUSH
48247: LD_INT 0
48249: PUSH
48250: LD_INT 0
48252: PUSH
48253: EMPTY
48254: LIST
48255: LIST
48256: PUSH
48257: LD_INT 0
48259: PUSH
48260: LD_INT 1
48262: NEG
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: LD_INT 1
48270: PUSH
48271: LD_INT 0
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: LD_INT 1
48280: PUSH
48281: LD_INT 1
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: LD_INT 0
48290: PUSH
48291: LD_INT 1
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: PUSH
48298: LD_INT 1
48300: NEG
48301: PUSH
48302: LD_INT 0
48304: PUSH
48305: EMPTY
48306: LIST
48307: LIST
48308: PUSH
48309: LD_INT 1
48311: NEG
48312: PUSH
48313: LD_INT 1
48315: NEG
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: LD_INT 1
48323: NEG
48324: PUSH
48325: LD_INT 2
48327: NEG
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PUSH
48333: LD_INT 0
48335: PUSH
48336: LD_INT 2
48338: NEG
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: PUSH
48344: LD_INT 1
48346: PUSH
48347: LD_INT 1
48349: NEG
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: PUSH
48355: LD_INT 2
48357: PUSH
48358: LD_INT 1
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: PUSH
48365: LD_INT 2
48367: PUSH
48368: LD_INT 2
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PUSH
48375: LD_INT 1
48377: PUSH
48378: LD_INT 2
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: PUSH
48385: LD_INT 0
48387: PUSH
48388: LD_INT 2
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: PUSH
48395: LD_INT 1
48397: NEG
48398: PUSH
48399: LD_INT 1
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: PUSH
48406: LD_INT 2
48408: NEG
48409: PUSH
48410: LD_INT 0
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: LD_INT 2
48419: NEG
48420: PUSH
48421: LD_INT 1
48423: NEG
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: PUSH
48429: LD_INT 1
48431: NEG
48432: PUSH
48433: LD_INT 3
48435: NEG
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: PUSH
48441: LD_INT 1
48443: PUSH
48444: LD_INT 2
48446: NEG
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: PUSH
48452: LD_INT 3
48454: PUSH
48455: LD_INT 2
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: PUSH
48462: LD_INT 2
48464: PUSH
48465: LD_INT 3
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: PUSH
48472: LD_INT 2
48474: NEG
48475: PUSH
48476: LD_INT 1
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: PUSH
48483: LD_INT 3
48485: NEG
48486: PUSH
48487: LD_INT 1
48489: NEG
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: LIST
48499: LIST
48500: LIST
48501: LIST
48502: LIST
48503: LIST
48504: LIST
48505: LIST
48506: LIST
48507: LIST
48508: LIST
48509: LIST
48510: LIST
48511: LIST
48512: LIST
48513: LIST
48514: LIST
48515: LIST
48516: LIST
48517: LIST
48518: LIST
48519: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48520: LD_ADDR_VAR 0 33
48524: PUSH
48525: LD_INT 0
48527: PUSH
48528: LD_INT 0
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: PUSH
48535: LD_INT 0
48537: PUSH
48538: LD_INT 1
48540: NEG
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: PUSH
48546: LD_INT 1
48548: PUSH
48549: LD_INT 0
48551: PUSH
48552: EMPTY
48553: LIST
48554: LIST
48555: PUSH
48556: LD_INT 1
48558: PUSH
48559: LD_INT 1
48561: PUSH
48562: EMPTY
48563: LIST
48564: LIST
48565: PUSH
48566: LD_INT 0
48568: PUSH
48569: LD_INT 1
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: PUSH
48576: LD_INT 1
48578: NEG
48579: PUSH
48580: LD_INT 0
48582: PUSH
48583: EMPTY
48584: LIST
48585: LIST
48586: PUSH
48587: LD_INT 1
48589: NEG
48590: PUSH
48591: LD_INT 1
48593: NEG
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PUSH
48599: LD_INT 1
48601: NEG
48602: PUSH
48603: LD_INT 2
48605: NEG
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: PUSH
48611: LD_INT 1
48613: PUSH
48614: LD_INT 1
48616: NEG
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: PUSH
48622: LD_INT 2
48624: PUSH
48625: LD_INT 0
48627: PUSH
48628: EMPTY
48629: LIST
48630: LIST
48631: PUSH
48632: LD_INT 2
48634: PUSH
48635: LD_INT 1
48637: PUSH
48638: EMPTY
48639: LIST
48640: LIST
48641: PUSH
48642: LD_INT 1
48644: PUSH
48645: LD_INT 2
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: PUSH
48652: LD_INT 0
48654: PUSH
48655: LD_INT 2
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: LD_INT 1
48664: NEG
48665: PUSH
48666: LD_INT 1
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: PUSH
48673: LD_INT 2
48675: NEG
48676: PUSH
48677: LD_INT 0
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: PUSH
48684: LD_INT 2
48686: NEG
48687: PUSH
48688: LD_INT 1
48690: NEG
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: PUSH
48696: LD_INT 2
48698: NEG
48699: PUSH
48700: LD_INT 2
48702: NEG
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: PUSH
48708: LD_INT 2
48710: NEG
48711: PUSH
48712: LD_INT 3
48714: NEG
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: PUSH
48720: LD_INT 2
48722: PUSH
48723: LD_INT 1
48725: NEG
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: PUSH
48731: LD_INT 3
48733: PUSH
48734: LD_INT 1
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: LD_INT 1
48743: PUSH
48744: LD_INT 3
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: PUSH
48751: LD_INT 1
48753: NEG
48754: PUSH
48755: LD_INT 2
48757: PUSH
48758: EMPTY
48759: LIST
48760: LIST
48761: PUSH
48762: LD_INT 3
48764: NEG
48765: PUSH
48766: LD_INT 2
48768: NEG
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: PUSH
48774: EMPTY
48775: LIST
48776: LIST
48777: LIST
48778: LIST
48779: LIST
48780: LIST
48781: LIST
48782: LIST
48783: LIST
48784: LIST
48785: LIST
48786: LIST
48787: LIST
48788: LIST
48789: LIST
48790: LIST
48791: LIST
48792: LIST
48793: LIST
48794: LIST
48795: LIST
48796: LIST
48797: LIST
48798: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48799: LD_ADDR_VAR 0 34
48803: PUSH
48804: LD_INT 0
48806: PUSH
48807: LD_INT 0
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: LD_INT 0
48816: PUSH
48817: LD_INT 1
48819: NEG
48820: PUSH
48821: EMPTY
48822: LIST
48823: LIST
48824: PUSH
48825: LD_INT 1
48827: PUSH
48828: LD_INT 0
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: PUSH
48835: LD_INT 1
48837: PUSH
48838: LD_INT 1
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: PUSH
48845: LD_INT 0
48847: PUSH
48848: LD_INT 1
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 1
48857: NEG
48858: PUSH
48859: LD_INT 0
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: LD_INT 1
48868: NEG
48869: PUSH
48870: LD_INT 1
48872: NEG
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: PUSH
48878: LD_INT 1
48880: NEG
48881: PUSH
48882: LD_INT 2
48884: NEG
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: PUSH
48890: LD_INT 0
48892: PUSH
48893: LD_INT 2
48895: NEG
48896: PUSH
48897: EMPTY
48898: LIST
48899: LIST
48900: PUSH
48901: LD_INT 1
48903: PUSH
48904: LD_INT 1
48906: NEG
48907: PUSH
48908: EMPTY
48909: LIST
48910: LIST
48911: PUSH
48912: LD_INT 2
48914: PUSH
48915: LD_INT 1
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: PUSH
48922: LD_INT 2
48924: PUSH
48925: LD_INT 2
48927: PUSH
48928: EMPTY
48929: LIST
48930: LIST
48931: PUSH
48932: LD_INT 1
48934: PUSH
48935: LD_INT 2
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 1
48944: NEG
48945: PUSH
48946: LD_INT 1
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: PUSH
48953: LD_INT 2
48955: NEG
48956: PUSH
48957: LD_INT 0
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: PUSH
48964: LD_INT 2
48966: NEG
48967: PUSH
48968: LD_INT 1
48970: NEG
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: LD_INT 2
48978: NEG
48979: PUSH
48980: LD_INT 2
48982: NEG
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PUSH
48988: LD_INT 1
48990: NEG
48991: PUSH
48992: LD_INT 3
48994: NEG
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 1
49002: PUSH
49003: LD_INT 2
49005: NEG
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: LD_INT 3
49013: PUSH
49014: LD_INT 2
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PUSH
49021: LD_INT 2
49023: PUSH
49024: LD_INT 3
49026: PUSH
49027: EMPTY
49028: LIST
49029: LIST
49030: PUSH
49031: LD_INT 2
49033: NEG
49034: PUSH
49035: LD_INT 1
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: PUSH
49042: LD_INT 3
49044: NEG
49045: PUSH
49046: LD_INT 1
49048: NEG
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: LIST
49058: LIST
49059: LIST
49060: LIST
49061: LIST
49062: LIST
49063: LIST
49064: LIST
49065: LIST
49066: LIST
49067: LIST
49068: LIST
49069: LIST
49070: LIST
49071: LIST
49072: LIST
49073: LIST
49074: LIST
49075: LIST
49076: LIST
49077: LIST
49078: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49079: LD_ADDR_VAR 0 35
49083: PUSH
49084: LD_INT 0
49086: PUSH
49087: LD_INT 0
49089: PUSH
49090: EMPTY
49091: LIST
49092: LIST
49093: PUSH
49094: LD_INT 0
49096: PUSH
49097: LD_INT 1
49099: NEG
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: PUSH
49105: LD_INT 1
49107: PUSH
49108: LD_INT 0
49110: PUSH
49111: EMPTY
49112: LIST
49113: LIST
49114: PUSH
49115: LD_INT 1
49117: PUSH
49118: LD_INT 1
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: PUSH
49125: LD_INT 0
49127: PUSH
49128: LD_INT 1
49130: PUSH
49131: EMPTY
49132: LIST
49133: LIST
49134: PUSH
49135: LD_INT 1
49137: NEG
49138: PUSH
49139: LD_INT 0
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: PUSH
49146: LD_INT 1
49148: NEG
49149: PUSH
49150: LD_INT 1
49152: NEG
49153: PUSH
49154: EMPTY
49155: LIST
49156: LIST
49157: PUSH
49158: LD_INT 2
49160: PUSH
49161: LD_INT 1
49163: PUSH
49164: EMPTY
49165: LIST
49166: LIST
49167: PUSH
49168: LD_INT 2
49170: NEG
49171: PUSH
49172: LD_INT 1
49174: NEG
49175: PUSH
49176: EMPTY
49177: LIST
49178: LIST
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: LIST
49184: LIST
49185: LIST
49186: LIST
49187: LIST
49188: LIST
49189: LIST
49190: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49191: LD_ADDR_VAR 0 36
49195: PUSH
49196: LD_INT 0
49198: PUSH
49199: LD_INT 0
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: PUSH
49206: LD_INT 0
49208: PUSH
49209: LD_INT 1
49211: NEG
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: PUSH
49217: LD_INT 1
49219: PUSH
49220: LD_INT 0
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PUSH
49227: LD_INT 1
49229: PUSH
49230: LD_INT 1
49232: PUSH
49233: EMPTY
49234: LIST
49235: LIST
49236: PUSH
49237: LD_INT 0
49239: PUSH
49240: LD_INT 1
49242: PUSH
49243: EMPTY
49244: LIST
49245: LIST
49246: PUSH
49247: LD_INT 1
49249: NEG
49250: PUSH
49251: LD_INT 0
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: PUSH
49258: LD_INT 1
49260: NEG
49261: PUSH
49262: LD_INT 1
49264: NEG
49265: PUSH
49266: EMPTY
49267: LIST
49268: LIST
49269: PUSH
49270: LD_INT 1
49272: NEG
49273: PUSH
49274: LD_INT 2
49276: NEG
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 1
49284: PUSH
49285: LD_INT 2
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: LIST
49296: LIST
49297: LIST
49298: LIST
49299: LIST
49300: LIST
49301: LIST
49302: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49303: LD_ADDR_VAR 0 37
49307: PUSH
49308: LD_INT 0
49310: PUSH
49311: LD_INT 0
49313: PUSH
49314: EMPTY
49315: LIST
49316: LIST
49317: PUSH
49318: LD_INT 0
49320: PUSH
49321: LD_INT 1
49323: NEG
49324: PUSH
49325: EMPTY
49326: LIST
49327: LIST
49328: PUSH
49329: LD_INT 1
49331: PUSH
49332: LD_INT 0
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: LD_INT 1
49341: PUSH
49342: LD_INT 1
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: PUSH
49349: LD_INT 0
49351: PUSH
49352: LD_INT 1
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: PUSH
49359: LD_INT 1
49361: NEG
49362: PUSH
49363: LD_INT 0
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: LD_INT 1
49372: NEG
49373: PUSH
49374: LD_INT 1
49376: NEG
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: PUSH
49382: LD_INT 1
49384: PUSH
49385: LD_INT 1
49387: NEG
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: PUSH
49393: LD_INT 1
49395: NEG
49396: PUSH
49397: LD_INT 1
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: LIST
49408: LIST
49409: LIST
49410: LIST
49411: LIST
49412: LIST
49413: LIST
49414: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49415: LD_ADDR_VAR 0 38
49419: PUSH
49420: LD_INT 0
49422: PUSH
49423: LD_INT 0
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: PUSH
49430: LD_INT 0
49432: PUSH
49433: LD_INT 1
49435: NEG
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: PUSH
49441: LD_INT 1
49443: PUSH
49444: LD_INT 0
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 1
49453: PUSH
49454: LD_INT 1
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: PUSH
49461: LD_INT 0
49463: PUSH
49464: LD_INT 1
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PUSH
49471: LD_INT 1
49473: NEG
49474: PUSH
49475: LD_INT 0
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 1
49484: NEG
49485: PUSH
49486: LD_INT 1
49488: NEG
49489: PUSH
49490: EMPTY
49491: LIST
49492: LIST
49493: PUSH
49494: LD_INT 2
49496: PUSH
49497: LD_INT 1
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: PUSH
49504: LD_INT 2
49506: NEG
49507: PUSH
49508: LD_INT 1
49510: NEG
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: PUSH
49516: EMPTY
49517: LIST
49518: LIST
49519: LIST
49520: LIST
49521: LIST
49522: LIST
49523: LIST
49524: LIST
49525: LIST
49526: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49527: LD_ADDR_VAR 0 39
49531: PUSH
49532: LD_INT 0
49534: PUSH
49535: LD_INT 0
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: PUSH
49542: LD_INT 0
49544: PUSH
49545: LD_INT 1
49547: NEG
49548: PUSH
49549: EMPTY
49550: LIST
49551: LIST
49552: PUSH
49553: LD_INT 1
49555: PUSH
49556: LD_INT 0
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: PUSH
49563: LD_INT 1
49565: PUSH
49566: LD_INT 1
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: PUSH
49573: LD_INT 0
49575: PUSH
49576: LD_INT 1
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 1
49585: NEG
49586: PUSH
49587: LD_INT 0
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: LD_INT 1
49596: NEG
49597: PUSH
49598: LD_INT 1
49600: NEG
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: LD_INT 1
49608: NEG
49609: PUSH
49610: LD_INT 2
49612: NEG
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: LD_INT 1
49620: PUSH
49621: LD_INT 2
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: LIST
49632: LIST
49633: LIST
49634: LIST
49635: LIST
49636: LIST
49637: LIST
49638: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49639: LD_ADDR_VAR 0 40
49643: PUSH
49644: LD_INT 0
49646: PUSH
49647: LD_INT 0
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: PUSH
49654: LD_INT 0
49656: PUSH
49657: LD_INT 1
49659: NEG
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PUSH
49665: LD_INT 1
49667: PUSH
49668: LD_INT 0
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: PUSH
49675: LD_INT 1
49677: PUSH
49678: LD_INT 1
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: PUSH
49685: LD_INT 0
49687: PUSH
49688: LD_INT 1
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: PUSH
49695: LD_INT 1
49697: NEG
49698: PUSH
49699: LD_INT 0
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: PUSH
49706: LD_INT 1
49708: NEG
49709: PUSH
49710: LD_INT 1
49712: NEG
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 1
49720: PUSH
49721: LD_INT 1
49723: NEG
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: PUSH
49729: LD_INT 1
49731: NEG
49732: PUSH
49733: LD_INT 1
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: EMPTY
49741: LIST
49742: LIST
49743: LIST
49744: LIST
49745: LIST
49746: LIST
49747: LIST
49748: LIST
49749: LIST
49750: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49751: LD_ADDR_VAR 0 41
49755: PUSH
49756: LD_INT 0
49758: PUSH
49759: LD_INT 0
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 0
49768: PUSH
49769: LD_INT 1
49771: NEG
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: LD_INT 1
49779: PUSH
49780: LD_INT 0
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: LD_INT 1
49789: PUSH
49790: LD_INT 1
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: LD_INT 0
49799: PUSH
49800: LD_INT 1
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: LD_INT 1
49809: NEG
49810: PUSH
49811: LD_INT 0
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 1
49820: NEG
49821: PUSH
49822: LD_INT 1
49824: NEG
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: PUSH
49830: LD_INT 1
49832: NEG
49833: PUSH
49834: LD_INT 2
49836: NEG
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: LD_INT 1
49844: PUSH
49845: LD_INT 1
49847: NEG
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 2
49855: PUSH
49856: LD_INT 0
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 2
49865: PUSH
49866: LD_INT 1
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PUSH
49873: LD_INT 2
49875: PUSH
49876: LD_INT 2
49878: PUSH
49879: EMPTY
49880: LIST
49881: LIST
49882: PUSH
49883: LD_INT 1
49885: PUSH
49886: LD_INT 2
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: LD_INT 1
49895: NEG
49896: PUSH
49897: LD_INT 1
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: PUSH
49904: LD_INT 2
49906: NEG
49907: PUSH
49908: LD_INT 0
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: PUSH
49915: LD_INT 2
49917: NEG
49918: PUSH
49919: LD_INT 1
49921: NEG
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 2
49929: NEG
49930: PUSH
49931: LD_INT 2
49933: NEG
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: LD_INT 2
49941: NEG
49942: PUSH
49943: LD_INT 3
49945: NEG
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: LD_INT 2
49953: PUSH
49954: LD_INT 1
49956: NEG
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: LD_INT 3
49964: PUSH
49965: LD_INT 0
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: LD_INT 3
49974: PUSH
49975: LD_INT 1
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: PUSH
49982: LD_INT 3
49984: PUSH
49985: LD_INT 2
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: LD_INT 3
49994: PUSH
49995: LD_INT 3
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: LD_INT 2
50004: PUSH
50005: LD_INT 3
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: LD_INT 2
50014: NEG
50015: PUSH
50016: LD_INT 1
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: PUSH
50023: LD_INT 3
50025: NEG
50026: PUSH
50027: LD_INT 0
50029: PUSH
50030: EMPTY
50031: LIST
50032: LIST
50033: PUSH
50034: LD_INT 3
50036: NEG
50037: PUSH
50038: LD_INT 1
50040: NEG
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: LD_INT 3
50048: NEG
50049: PUSH
50050: LD_INT 2
50052: NEG
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: LD_INT 3
50060: NEG
50061: PUSH
50062: LD_INT 3
50064: NEG
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: LIST
50074: LIST
50075: LIST
50076: LIST
50077: LIST
50078: LIST
50079: LIST
50080: LIST
50081: LIST
50082: LIST
50083: LIST
50084: LIST
50085: LIST
50086: LIST
50087: LIST
50088: LIST
50089: LIST
50090: LIST
50091: LIST
50092: LIST
50093: LIST
50094: LIST
50095: LIST
50096: LIST
50097: LIST
50098: LIST
50099: LIST
50100: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50101: LD_ADDR_VAR 0 42
50105: PUSH
50106: LD_INT 0
50108: PUSH
50109: LD_INT 0
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: PUSH
50116: LD_INT 0
50118: PUSH
50119: LD_INT 1
50121: NEG
50122: PUSH
50123: EMPTY
50124: LIST
50125: LIST
50126: PUSH
50127: LD_INT 1
50129: PUSH
50130: LD_INT 0
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: PUSH
50137: LD_INT 1
50139: PUSH
50140: LD_INT 1
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: LD_INT 0
50149: PUSH
50150: LD_INT 1
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PUSH
50157: LD_INT 1
50159: NEG
50160: PUSH
50161: LD_INT 0
50163: PUSH
50164: EMPTY
50165: LIST
50166: LIST
50167: PUSH
50168: LD_INT 1
50170: NEG
50171: PUSH
50172: LD_INT 1
50174: NEG
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: PUSH
50180: LD_INT 1
50182: NEG
50183: PUSH
50184: LD_INT 2
50186: NEG
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: PUSH
50192: LD_INT 0
50194: PUSH
50195: LD_INT 2
50197: NEG
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: PUSH
50203: LD_INT 1
50205: PUSH
50206: LD_INT 1
50208: NEG
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: PUSH
50214: LD_INT 2
50216: PUSH
50217: LD_INT 1
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: LD_INT 2
50226: PUSH
50227: LD_INT 2
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: PUSH
50234: LD_INT 1
50236: PUSH
50237: LD_INT 2
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: PUSH
50244: LD_INT 0
50246: PUSH
50247: LD_INT 2
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: PUSH
50254: LD_INT 1
50256: NEG
50257: PUSH
50258: LD_INT 1
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: PUSH
50265: LD_INT 2
50267: NEG
50268: PUSH
50269: LD_INT 1
50271: NEG
50272: PUSH
50273: EMPTY
50274: LIST
50275: LIST
50276: PUSH
50277: LD_INT 2
50279: NEG
50280: PUSH
50281: LD_INT 2
50283: NEG
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: PUSH
50289: LD_INT 2
50291: NEG
50292: PUSH
50293: LD_INT 3
50295: NEG
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 1
50303: NEG
50304: PUSH
50305: LD_INT 3
50307: NEG
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: LD_INT 0
50315: PUSH
50316: LD_INT 3
50318: NEG
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: PUSH
50324: LD_INT 1
50326: PUSH
50327: LD_INT 2
50329: NEG
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: LD_INT 3
50337: PUSH
50338: LD_INT 2
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: PUSH
50345: LD_INT 3
50347: PUSH
50348: LD_INT 3
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: PUSH
50355: LD_INT 2
50357: PUSH
50358: LD_INT 3
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 1
50367: PUSH
50368: LD_INT 3
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: PUSH
50375: LD_INT 0
50377: PUSH
50378: LD_INT 3
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: PUSH
50385: LD_INT 1
50387: NEG
50388: PUSH
50389: LD_INT 2
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PUSH
50396: LD_INT 3
50398: NEG
50399: PUSH
50400: LD_INT 2
50402: NEG
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: LD_INT 3
50410: NEG
50411: PUSH
50412: LD_INT 3
50414: NEG
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: LIST
50424: LIST
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: LIST
50439: LIST
50440: LIST
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: LIST
50450: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50451: LD_ADDR_VAR 0 43
50455: PUSH
50456: LD_INT 0
50458: PUSH
50459: LD_INT 0
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 0
50468: PUSH
50469: LD_INT 1
50471: NEG
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: LD_INT 1
50479: PUSH
50480: LD_INT 0
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: PUSH
50487: LD_INT 1
50489: PUSH
50490: LD_INT 1
50492: PUSH
50493: EMPTY
50494: LIST
50495: LIST
50496: PUSH
50497: LD_INT 0
50499: PUSH
50500: LD_INT 1
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: PUSH
50507: LD_INT 1
50509: NEG
50510: PUSH
50511: LD_INT 0
50513: PUSH
50514: EMPTY
50515: LIST
50516: LIST
50517: PUSH
50518: LD_INT 1
50520: NEG
50521: PUSH
50522: LD_INT 1
50524: NEG
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: LD_INT 1
50532: NEG
50533: PUSH
50534: LD_INT 2
50536: NEG
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: PUSH
50542: LD_INT 0
50544: PUSH
50545: LD_INT 2
50547: NEG
50548: PUSH
50549: EMPTY
50550: LIST
50551: LIST
50552: PUSH
50553: LD_INT 1
50555: PUSH
50556: LD_INT 1
50558: NEG
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: PUSH
50564: LD_INT 2
50566: PUSH
50567: LD_INT 0
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: PUSH
50574: LD_INT 2
50576: PUSH
50577: LD_INT 1
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: PUSH
50584: LD_INT 1
50586: PUSH
50587: LD_INT 2
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: PUSH
50594: LD_INT 0
50596: PUSH
50597: LD_INT 2
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: LD_INT 1
50606: NEG
50607: PUSH
50608: LD_INT 1
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PUSH
50615: LD_INT 2
50617: NEG
50618: PUSH
50619: LD_INT 0
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: LD_INT 2
50628: NEG
50629: PUSH
50630: LD_INT 1
50632: NEG
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 1
50640: NEG
50641: PUSH
50642: LD_INT 3
50644: NEG
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 0
50652: PUSH
50653: LD_INT 3
50655: NEG
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: PUSH
50661: LD_INT 1
50663: PUSH
50664: LD_INT 2
50666: NEG
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PUSH
50672: LD_INT 2
50674: PUSH
50675: LD_INT 1
50677: NEG
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: PUSH
50683: LD_INT 3
50685: PUSH
50686: LD_INT 0
50688: PUSH
50689: EMPTY
50690: LIST
50691: LIST
50692: PUSH
50693: LD_INT 3
50695: PUSH
50696: LD_INT 1
50698: PUSH
50699: EMPTY
50700: LIST
50701: LIST
50702: PUSH
50703: LD_INT 1
50705: PUSH
50706: LD_INT 3
50708: PUSH
50709: EMPTY
50710: LIST
50711: LIST
50712: PUSH
50713: LD_INT 0
50715: PUSH
50716: LD_INT 3
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PUSH
50723: LD_INT 1
50725: NEG
50726: PUSH
50727: LD_INT 2
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: PUSH
50734: LD_INT 2
50736: NEG
50737: PUSH
50738: LD_INT 1
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: PUSH
50745: LD_INT 3
50747: NEG
50748: PUSH
50749: LD_INT 0
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: PUSH
50756: LD_INT 3
50758: NEG
50759: PUSH
50760: LD_INT 1
50762: NEG
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PUSH
50768: EMPTY
50769: LIST
50770: LIST
50771: LIST
50772: LIST
50773: LIST
50774: LIST
50775: LIST
50776: LIST
50777: LIST
50778: LIST
50779: LIST
50780: LIST
50781: LIST
50782: LIST
50783: LIST
50784: LIST
50785: LIST
50786: LIST
50787: LIST
50788: LIST
50789: LIST
50790: LIST
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: LIST
50796: LIST
50797: LIST
50798: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50799: LD_ADDR_VAR 0 44
50803: PUSH
50804: LD_INT 0
50806: PUSH
50807: LD_INT 0
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: PUSH
50814: LD_INT 0
50816: PUSH
50817: LD_INT 1
50819: NEG
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 1
50827: PUSH
50828: LD_INT 0
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: PUSH
50835: LD_INT 1
50837: PUSH
50838: LD_INT 1
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: LD_INT 0
50847: PUSH
50848: LD_INT 1
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 1
50857: NEG
50858: PUSH
50859: LD_INT 0
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: LD_INT 1
50868: NEG
50869: PUSH
50870: LD_INT 1
50872: NEG
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: LD_INT 1
50880: NEG
50881: PUSH
50882: LD_INT 2
50884: NEG
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PUSH
50890: LD_INT 1
50892: PUSH
50893: LD_INT 1
50895: NEG
50896: PUSH
50897: EMPTY
50898: LIST
50899: LIST
50900: PUSH
50901: LD_INT 2
50903: PUSH
50904: LD_INT 0
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: PUSH
50911: LD_INT 2
50913: PUSH
50914: LD_INT 1
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PUSH
50921: LD_INT 2
50923: PUSH
50924: LD_INT 2
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 1
50933: PUSH
50934: LD_INT 2
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 1
50943: NEG
50944: PUSH
50945: LD_INT 1
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: LD_INT 2
50954: NEG
50955: PUSH
50956: LD_INT 0
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: LD_INT 2
50965: NEG
50966: PUSH
50967: LD_INT 1
50969: NEG
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 2
50977: NEG
50978: PUSH
50979: LD_INT 2
50981: NEG
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: PUSH
50987: LD_INT 2
50989: NEG
50990: PUSH
50991: LD_INT 3
50993: NEG
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: PUSH
50999: LD_INT 2
51001: PUSH
51002: LD_INT 1
51004: NEG
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: PUSH
51010: LD_INT 3
51012: PUSH
51013: LD_INT 0
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: PUSH
51020: LD_INT 3
51022: PUSH
51023: LD_INT 1
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: PUSH
51030: LD_INT 3
51032: PUSH
51033: LD_INT 2
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: LD_INT 3
51042: PUSH
51043: LD_INT 3
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: LD_INT 2
51052: PUSH
51053: LD_INT 3
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 2
51062: NEG
51063: PUSH
51064: LD_INT 1
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: LD_INT 3
51073: NEG
51074: PUSH
51075: LD_INT 0
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: PUSH
51082: LD_INT 3
51084: NEG
51085: PUSH
51086: LD_INT 1
51088: NEG
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: PUSH
51094: LD_INT 3
51096: NEG
51097: PUSH
51098: LD_INT 2
51100: NEG
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: LD_INT 3
51108: NEG
51109: PUSH
51110: LD_INT 3
51112: NEG
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: LIST
51122: LIST
51123: LIST
51124: LIST
51125: LIST
51126: LIST
51127: LIST
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: LIST
51134: LIST
51135: LIST
51136: LIST
51137: LIST
51138: LIST
51139: LIST
51140: LIST
51141: LIST
51142: LIST
51143: LIST
51144: LIST
51145: LIST
51146: LIST
51147: LIST
51148: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51149: LD_ADDR_VAR 0 45
51153: PUSH
51154: LD_INT 0
51156: PUSH
51157: LD_INT 0
51159: PUSH
51160: EMPTY
51161: LIST
51162: LIST
51163: PUSH
51164: LD_INT 0
51166: PUSH
51167: LD_INT 1
51169: NEG
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: PUSH
51175: LD_INT 1
51177: PUSH
51178: LD_INT 0
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 1
51187: PUSH
51188: LD_INT 1
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: PUSH
51195: LD_INT 0
51197: PUSH
51198: LD_INT 1
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: LD_INT 1
51207: NEG
51208: PUSH
51209: LD_INT 0
51211: PUSH
51212: EMPTY
51213: LIST
51214: LIST
51215: PUSH
51216: LD_INT 1
51218: NEG
51219: PUSH
51220: LD_INT 1
51222: NEG
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: PUSH
51228: LD_INT 1
51230: NEG
51231: PUSH
51232: LD_INT 2
51234: NEG
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: PUSH
51240: LD_INT 0
51242: PUSH
51243: LD_INT 2
51245: NEG
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: PUSH
51251: LD_INT 1
51253: PUSH
51254: LD_INT 1
51256: NEG
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: PUSH
51262: LD_INT 2
51264: PUSH
51265: LD_INT 1
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: PUSH
51272: LD_INT 2
51274: PUSH
51275: LD_INT 2
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: PUSH
51282: LD_INT 1
51284: PUSH
51285: LD_INT 2
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: LD_INT 0
51294: PUSH
51295: LD_INT 2
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 1
51304: NEG
51305: PUSH
51306: LD_INT 1
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 2
51315: NEG
51316: PUSH
51317: LD_INT 1
51319: NEG
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 2
51327: NEG
51328: PUSH
51329: LD_INT 2
51331: NEG
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 2
51339: NEG
51340: PUSH
51341: LD_INT 3
51343: NEG
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: LD_INT 1
51351: NEG
51352: PUSH
51353: LD_INT 3
51355: NEG
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: PUSH
51361: LD_INT 0
51363: PUSH
51364: LD_INT 3
51366: NEG
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: PUSH
51372: LD_INT 1
51374: PUSH
51375: LD_INT 2
51377: NEG
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PUSH
51383: LD_INT 3
51385: PUSH
51386: LD_INT 2
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: PUSH
51393: LD_INT 3
51395: PUSH
51396: LD_INT 3
51398: PUSH
51399: EMPTY
51400: LIST
51401: LIST
51402: PUSH
51403: LD_INT 2
51405: PUSH
51406: LD_INT 3
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: PUSH
51413: LD_INT 1
51415: PUSH
51416: LD_INT 3
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PUSH
51423: LD_INT 0
51425: PUSH
51426: LD_INT 3
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: PUSH
51433: LD_INT 1
51435: NEG
51436: PUSH
51437: LD_INT 2
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: PUSH
51444: LD_INT 3
51446: NEG
51447: PUSH
51448: LD_INT 2
51450: NEG
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: LD_INT 3
51458: NEG
51459: PUSH
51460: LD_INT 3
51462: NEG
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: LIST
51472: LIST
51473: LIST
51474: LIST
51475: LIST
51476: LIST
51477: LIST
51478: LIST
51479: LIST
51480: LIST
51481: LIST
51482: LIST
51483: LIST
51484: LIST
51485: LIST
51486: LIST
51487: LIST
51488: LIST
51489: LIST
51490: LIST
51491: LIST
51492: LIST
51493: LIST
51494: LIST
51495: LIST
51496: LIST
51497: LIST
51498: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51499: LD_ADDR_VAR 0 46
51503: PUSH
51504: LD_INT 0
51506: PUSH
51507: LD_INT 0
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 0
51516: PUSH
51517: LD_INT 1
51519: NEG
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: PUSH
51525: LD_INT 1
51527: PUSH
51528: LD_INT 0
51530: PUSH
51531: EMPTY
51532: LIST
51533: LIST
51534: PUSH
51535: LD_INT 1
51537: PUSH
51538: LD_INT 1
51540: PUSH
51541: EMPTY
51542: LIST
51543: LIST
51544: PUSH
51545: LD_INT 0
51547: PUSH
51548: LD_INT 1
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: LD_INT 1
51557: NEG
51558: PUSH
51559: LD_INT 0
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: LD_INT 1
51568: NEG
51569: PUSH
51570: LD_INT 1
51572: NEG
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: PUSH
51578: LD_INT 1
51580: NEG
51581: PUSH
51582: LD_INT 2
51584: NEG
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: PUSH
51590: LD_INT 0
51592: PUSH
51593: LD_INT 2
51595: NEG
51596: PUSH
51597: EMPTY
51598: LIST
51599: LIST
51600: PUSH
51601: LD_INT 1
51603: PUSH
51604: LD_INT 1
51606: NEG
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PUSH
51612: LD_INT 2
51614: PUSH
51615: LD_INT 0
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: LD_INT 2
51624: PUSH
51625: LD_INT 1
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 1
51634: PUSH
51635: LD_INT 2
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: PUSH
51642: LD_INT 0
51644: PUSH
51645: LD_INT 2
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: PUSH
51652: LD_INT 1
51654: NEG
51655: PUSH
51656: LD_INT 1
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 2
51665: NEG
51666: PUSH
51667: LD_INT 0
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 2
51676: NEG
51677: PUSH
51678: LD_INT 1
51680: NEG
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PUSH
51686: LD_INT 1
51688: NEG
51689: PUSH
51690: LD_INT 3
51692: NEG
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: PUSH
51698: LD_INT 0
51700: PUSH
51701: LD_INT 3
51703: NEG
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 1
51711: PUSH
51712: LD_INT 2
51714: NEG
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: LD_INT 2
51722: PUSH
51723: LD_INT 1
51725: NEG
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: LD_INT 3
51733: PUSH
51734: LD_INT 0
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: PUSH
51741: LD_INT 3
51743: PUSH
51744: LD_INT 1
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: PUSH
51751: LD_INT 1
51753: PUSH
51754: LD_INT 3
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: LD_INT 0
51763: PUSH
51764: LD_INT 3
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 1
51773: NEG
51774: PUSH
51775: LD_INT 2
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: PUSH
51782: LD_INT 2
51784: NEG
51785: PUSH
51786: LD_INT 1
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: PUSH
51793: LD_INT 3
51795: NEG
51796: PUSH
51797: LD_INT 0
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: LD_INT 3
51806: NEG
51807: PUSH
51808: LD_INT 1
51810: NEG
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: LIST
51820: LIST
51821: LIST
51822: LIST
51823: LIST
51824: LIST
51825: LIST
51826: LIST
51827: LIST
51828: LIST
51829: LIST
51830: LIST
51831: LIST
51832: LIST
51833: LIST
51834: LIST
51835: LIST
51836: LIST
51837: LIST
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: LIST
51845: LIST
51846: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51847: LD_ADDR_VAR 0 47
51851: PUSH
51852: LD_INT 0
51854: PUSH
51855: LD_INT 0
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 0
51864: PUSH
51865: LD_INT 1
51867: NEG
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: PUSH
51873: LD_INT 1
51875: PUSH
51876: LD_INT 0
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: PUSH
51883: LD_INT 1
51885: PUSH
51886: LD_INT 1
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 0
51895: PUSH
51896: LD_INT 1
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: PUSH
51903: LD_INT 1
51905: NEG
51906: PUSH
51907: LD_INT 0
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: PUSH
51914: LD_INT 1
51916: NEG
51917: PUSH
51918: LD_INT 1
51920: NEG
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 1
51928: NEG
51929: PUSH
51930: LD_INT 2
51932: NEG
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: LD_INT 0
51940: PUSH
51941: LD_INT 2
51943: NEG
51944: PUSH
51945: EMPTY
51946: LIST
51947: LIST
51948: PUSH
51949: LD_INT 1
51951: PUSH
51952: LD_INT 1
51954: NEG
51955: PUSH
51956: EMPTY
51957: LIST
51958: LIST
51959: PUSH
51960: LD_INT 2
51962: NEG
51963: PUSH
51964: LD_INT 1
51966: NEG
51967: PUSH
51968: EMPTY
51969: LIST
51970: LIST
51971: PUSH
51972: LD_INT 2
51974: NEG
51975: PUSH
51976: LD_INT 2
51978: NEG
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: LIST
51988: LIST
51989: LIST
51990: LIST
51991: LIST
51992: LIST
51993: LIST
51994: LIST
51995: LIST
51996: LIST
51997: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51998: LD_ADDR_VAR 0 48
52002: PUSH
52003: LD_INT 0
52005: PUSH
52006: LD_INT 0
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: PUSH
52013: LD_INT 0
52015: PUSH
52016: LD_INT 1
52018: NEG
52019: PUSH
52020: EMPTY
52021: LIST
52022: LIST
52023: PUSH
52024: LD_INT 1
52026: PUSH
52027: LD_INT 0
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: PUSH
52034: LD_INT 1
52036: PUSH
52037: LD_INT 1
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: PUSH
52044: LD_INT 0
52046: PUSH
52047: LD_INT 1
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: PUSH
52054: LD_INT 1
52056: NEG
52057: PUSH
52058: LD_INT 0
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: LD_INT 1
52067: NEG
52068: PUSH
52069: LD_INT 1
52071: NEG
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PUSH
52077: LD_INT 1
52079: NEG
52080: PUSH
52081: LD_INT 2
52083: NEG
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: LD_INT 0
52091: PUSH
52092: LD_INT 2
52094: NEG
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: LD_INT 1
52102: PUSH
52103: LD_INT 1
52105: NEG
52106: PUSH
52107: EMPTY
52108: LIST
52109: LIST
52110: PUSH
52111: LD_INT 2
52113: PUSH
52114: LD_INT 0
52116: PUSH
52117: EMPTY
52118: LIST
52119: LIST
52120: PUSH
52121: LD_INT 2
52123: PUSH
52124: LD_INT 1
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: LIST
52135: LIST
52136: LIST
52137: LIST
52138: LIST
52139: LIST
52140: LIST
52141: LIST
52142: LIST
52143: LIST
52144: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52145: LD_ADDR_VAR 0 49
52149: PUSH
52150: LD_INT 0
52152: PUSH
52153: LD_INT 0
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: PUSH
52160: LD_INT 0
52162: PUSH
52163: LD_INT 1
52165: NEG
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: PUSH
52171: LD_INT 1
52173: PUSH
52174: LD_INT 0
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: PUSH
52181: LD_INT 1
52183: PUSH
52184: LD_INT 1
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: PUSH
52191: LD_INT 0
52193: PUSH
52194: LD_INT 1
52196: PUSH
52197: EMPTY
52198: LIST
52199: LIST
52200: PUSH
52201: LD_INT 1
52203: NEG
52204: PUSH
52205: LD_INT 0
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: PUSH
52212: LD_INT 1
52214: NEG
52215: PUSH
52216: LD_INT 1
52218: NEG
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: PUSH
52224: LD_INT 1
52226: PUSH
52227: LD_INT 1
52229: NEG
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: PUSH
52235: LD_INT 2
52237: PUSH
52238: LD_INT 0
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: PUSH
52245: LD_INT 2
52247: PUSH
52248: LD_INT 1
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: LD_INT 2
52257: PUSH
52258: LD_INT 2
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: LD_INT 1
52267: PUSH
52268: LD_INT 2
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: LIST
52279: LIST
52280: LIST
52281: LIST
52282: LIST
52283: LIST
52284: LIST
52285: LIST
52286: LIST
52287: LIST
52288: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52289: LD_ADDR_VAR 0 50
52293: PUSH
52294: LD_INT 0
52296: PUSH
52297: LD_INT 0
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: PUSH
52304: LD_INT 0
52306: PUSH
52307: LD_INT 1
52309: NEG
52310: PUSH
52311: EMPTY
52312: LIST
52313: LIST
52314: PUSH
52315: LD_INT 1
52317: PUSH
52318: LD_INT 0
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: PUSH
52325: LD_INT 1
52327: PUSH
52328: LD_INT 1
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: PUSH
52335: LD_INT 0
52337: PUSH
52338: LD_INT 1
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 1
52347: NEG
52348: PUSH
52349: LD_INT 0
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: LD_INT 1
52358: NEG
52359: PUSH
52360: LD_INT 1
52362: NEG
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: PUSH
52368: LD_INT 2
52370: PUSH
52371: LD_INT 1
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: PUSH
52378: LD_INT 2
52380: PUSH
52381: LD_INT 2
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: LD_INT 1
52390: PUSH
52391: LD_INT 2
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: LD_INT 0
52400: PUSH
52401: LD_INT 2
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PUSH
52408: LD_INT 1
52410: NEG
52411: PUSH
52412: LD_INT 1
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: LIST
52423: LIST
52424: LIST
52425: LIST
52426: LIST
52427: LIST
52428: LIST
52429: LIST
52430: LIST
52431: LIST
52432: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52433: LD_ADDR_VAR 0 51
52437: PUSH
52438: LD_INT 0
52440: PUSH
52441: LD_INT 0
52443: PUSH
52444: EMPTY
52445: LIST
52446: LIST
52447: PUSH
52448: LD_INT 0
52450: PUSH
52451: LD_INT 1
52453: NEG
52454: PUSH
52455: EMPTY
52456: LIST
52457: LIST
52458: PUSH
52459: LD_INT 1
52461: PUSH
52462: LD_INT 0
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: PUSH
52469: LD_INT 1
52471: PUSH
52472: LD_INT 1
52474: PUSH
52475: EMPTY
52476: LIST
52477: LIST
52478: PUSH
52479: LD_INT 0
52481: PUSH
52482: LD_INT 1
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PUSH
52489: LD_INT 1
52491: NEG
52492: PUSH
52493: LD_INT 0
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: LD_INT 1
52502: NEG
52503: PUSH
52504: LD_INT 1
52506: NEG
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: PUSH
52512: LD_INT 1
52514: PUSH
52515: LD_INT 2
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 0
52524: PUSH
52525: LD_INT 2
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: LD_INT 1
52534: NEG
52535: PUSH
52536: LD_INT 1
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PUSH
52543: LD_INT 2
52545: NEG
52546: PUSH
52547: LD_INT 0
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: LD_INT 2
52556: NEG
52557: PUSH
52558: LD_INT 1
52560: NEG
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: EMPTY
52567: LIST
52568: LIST
52569: LIST
52570: LIST
52571: LIST
52572: LIST
52573: LIST
52574: LIST
52575: LIST
52576: LIST
52577: LIST
52578: LIST
52579: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52580: LD_ADDR_VAR 0 52
52584: PUSH
52585: LD_INT 0
52587: PUSH
52588: LD_INT 0
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PUSH
52595: LD_INT 0
52597: PUSH
52598: LD_INT 1
52600: NEG
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 1
52608: PUSH
52609: LD_INT 0
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: PUSH
52616: LD_INT 1
52618: PUSH
52619: LD_INT 1
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PUSH
52626: LD_INT 0
52628: PUSH
52629: LD_INT 1
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: PUSH
52636: LD_INT 1
52638: NEG
52639: PUSH
52640: LD_INT 0
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: PUSH
52647: LD_INT 1
52649: NEG
52650: PUSH
52651: LD_INT 1
52653: NEG
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: PUSH
52659: LD_INT 1
52661: NEG
52662: PUSH
52663: LD_INT 2
52665: NEG
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: LD_INT 1
52673: NEG
52674: PUSH
52675: LD_INT 1
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: PUSH
52682: LD_INT 2
52684: NEG
52685: PUSH
52686: LD_INT 0
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: PUSH
52693: LD_INT 2
52695: NEG
52696: PUSH
52697: LD_INT 1
52699: NEG
52700: PUSH
52701: EMPTY
52702: LIST
52703: LIST
52704: PUSH
52705: LD_INT 2
52707: NEG
52708: PUSH
52709: LD_INT 2
52711: NEG
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: LIST
52721: LIST
52722: LIST
52723: LIST
52724: LIST
52725: LIST
52726: LIST
52727: LIST
52728: LIST
52729: LIST
52730: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52731: LD_ADDR_VAR 0 53
52735: PUSH
52736: LD_INT 0
52738: PUSH
52739: LD_INT 0
52741: PUSH
52742: EMPTY
52743: LIST
52744: LIST
52745: PUSH
52746: LD_INT 0
52748: PUSH
52749: LD_INT 1
52751: NEG
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: LD_INT 1
52759: PUSH
52760: LD_INT 0
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: LD_INT 1
52769: PUSH
52770: LD_INT 1
52772: PUSH
52773: EMPTY
52774: LIST
52775: LIST
52776: PUSH
52777: LD_INT 0
52779: PUSH
52780: LD_INT 1
52782: PUSH
52783: EMPTY
52784: LIST
52785: LIST
52786: PUSH
52787: LD_INT 1
52789: NEG
52790: PUSH
52791: LD_INT 0
52793: PUSH
52794: EMPTY
52795: LIST
52796: LIST
52797: PUSH
52798: LD_INT 1
52800: NEG
52801: PUSH
52802: LD_INT 1
52804: NEG
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: PUSH
52810: LD_INT 1
52812: NEG
52813: PUSH
52814: LD_INT 2
52816: NEG
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: PUSH
52822: LD_INT 0
52824: PUSH
52825: LD_INT 2
52827: NEG
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: PUSH
52833: LD_INT 1
52835: PUSH
52836: LD_INT 1
52838: NEG
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: PUSH
52844: LD_INT 2
52846: PUSH
52847: LD_INT 0
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: PUSH
52854: LD_INT 2
52856: PUSH
52857: LD_INT 1
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: PUSH
52864: LD_INT 2
52866: PUSH
52867: LD_INT 2
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: PUSH
52874: LD_INT 1
52876: PUSH
52877: LD_INT 2
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: LD_INT 0
52886: PUSH
52887: LD_INT 2
52889: PUSH
52890: EMPTY
52891: LIST
52892: LIST
52893: PUSH
52894: LD_INT 1
52896: NEG
52897: PUSH
52898: LD_INT 1
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: PUSH
52905: LD_INT 2
52907: NEG
52908: PUSH
52909: LD_INT 0
52911: PUSH
52912: EMPTY
52913: LIST
52914: LIST
52915: PUSH
52916: LD_INT 2
52918: NEG
52919: PUSH
52920: LD_INT 1
52922: NEG
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: PUSH
52928: LD_INT 2
52930: NEG
52931: PUSH
52932: LD_INT 2
52934: NEG
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: LIST
52944: LIST
52945: LIST
52946: LIST
52947: LIST
52948: LIST
52949: LIST
52950: LIST
52951: LIST
52952: LIST
52953: LIST
52954: LIST
52955: LIST
52956: LIST
52957: LIST
52958: LIST
52959: LIST
52960: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52961: LD_ADDR_VAR 0 54
52965: PUSH
52966: LD_INT 0
52968: PUSH
52969: LD_INT 0
52971: PUSH
52972: EMPTY
52973: LIST
52974: LIST
52975: PUSH
52976: LD_INT 0
52978: PUSH
52979: LD_INT 1
52981: NEG
52982: PUSH
52983: EMPTY
52984: LIST
52985: LIST
52986: PUSH
52987: LD_INT 1
52989: PUSH
52990: LD_INT 0
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: PUSH
52997: LD_INT 1
52999: PUSH
53000: LD_INT 1
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: PUSH
53007: LD_INT 0
53009: PUSH
53010: LD_INT 1
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: PUSH
53017: LD_INT 1
53019: NEG
53020: PUSH
53021: LD_INT 0
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: PUSH
53028: LD_INT 1
53030: NEG
53031: PUSH
53032: LD_INT 1
53034: NEG
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: PUSH
53040: LD_INT 1
53042: NEG
53043: PUSH
53044: LD_INT 2
53046: NEG
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 0
53054: PUSH
53055: LD_INT 2
53057: NEG
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: PUSH
53063: LD_INT 1
53065: PUSH
53066: LD_INT 1
53068: NEG
53069: PUSH
53070: EMPTY
53071: LIST
53072: LIST
53073: PUSH
53074: LD_INT 2
53076: PUSH
53077: LD_INT 0
53079: PUSH
53080: EMPTY
53081: LIST
53082: LIST
53083: PUSH
53084: LD_INT 2
53086: PUSH
53087: LD_INT 1
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: LD_INT 2
53096: PUSH
53097: LD_INT 2
53099: PUSH
53100: EMPTY
53101: LIST
53102: LIST
53103: PUSH
53104: LD_INT 1
53106: PUSH
53107: LD_INT 2
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: PUSH
53114: LD_INT 0
53116: PUSH
53117: LD_INT 2
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: PUSH
53124: LD_INT 1
53126: NEG
53127: PUSH
53128: LD_INT 1
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: PUSH
53135: LD_INT 2
53137: NEG
53138: PUSH
53139: LD_INT 0
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: PUSH
53146: LD_INT 2
53148: NEG
53149: PUSH
53150: LD_INT 1
53152: NEG
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: PUSH
53158: LD_INT 2
53160: NEG
53161: PUSH
53162: LD_INT 2
53164: NEG
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: LIST
53174: LIST
53175: LIST
53176: LIST
53177: LIST
53178: LIST
53179: LIST
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: LIST
53188: LIST
53189: LIST
53190: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53191: LD_ADDR_VAR 0 55
53195: PUSH
53196: LD_INT 0
53198: PUSH
53199: LD_INT 0
53201: PUSH
53202: EMPTY
53203: LIST
53204: LIST
53205: PUSH
53206: LD_INT 0
53208: PUSH
53209: LD_INT 1
53211: NEG
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: LD_INT 1
53219: PUSH
53220: LD_INT 0
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: PUSH
53227: LD_INT 1
53229: PUSH
53230: LD_INT 1
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: PUSH
53237: LD_INT 0
53239: PUSH
53240: LD_INT 1
53242: PUSH
53243: EMPTY
53244: LIST
53245: LIST
53246: PUSH
53247: LD_INT 1
53249: NEG
53250: PUSH
53251: LD_INT 0
53253: PUSH
53254: EMPTY
53255: LIST
53256: LIST
53257: PUSH
53258: LD_INT 1
53260: NEG
53261: PUSH
53262: LD_INT 1
53264: NEG
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: LD_INT 1
53272: NEG
53273: PUSH
53274: LD_INT 2
53276: NEG
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: LD_INT 0
53284: PUSH
53285: LD_INT 2
53287: NEG
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: PUSH
53293: LD_INT 1
53295: PUSH
53296: LD_INT 1
53298: NEG
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: PUSH
53304: LD_INT 2
53306: PUSH
53307: LD_INT 0
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: PUSH
53314: LD_INT 2
53316: PUSH
53317: LD_INT 1
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: LD_INT 2
53326: PUSH
53327: LD_INT 2
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: PUSH
53334: LD_INT 1
53336: PUSH
53337: LD_INT 2
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: PUSH
53344: LD_INT 0
53346: PUSH
53347: LD_INT 2
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: PUSH
53354: LD_INT 1
53356: NEG
53357: PUSH
53358: LD_INT 1
53360: PUSH
53361: EMPTY
53362: LIST
53363: LIST
53364: PUSH
53365: LD_INT 2
53367: NEG
53368: PUSH
53369: LD_INT 0
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: PUSH
53376: LD_INT 2
53378: NEG
53379: PUSH
53380: LD_INT 1
53382: NEG
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: PUSH
53388: LD_INT 2
53390: NEG
53391: PUSH
53392: LD_INT 2
53394: NEG
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: LIST
53404: LIST
53405: LIST
53406: LIST
53407: LIST
53408: LIST
53409: LIST
53410: LIST
53411: LIST
53412: LIST
53413: LIST
53414: LIST
53415: LIST
53416: LIST
53417: LIST
53418: LIST
53419: LIST
53420: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53421: LD_ADDR_VAR 0 56
53425: PUSH
53426: LD_INT 0
53428: PUSH
53429: LD_INT 0
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: PUSH
53436: LD_INT 0
53438: PUSH
53439: LD_INT 1
53441: NEG
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: PUSH
53447: LD_INT 1
53449: PUSH
53450: LD_INT 0
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: PUSH
53457: LD_INT 1
53459: PUSH
53460: LD_INT 1
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: PUSH
53467: LD_INT 0
53469: PUSH
53470: LD_INT 1
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: PUSH
53477: LD_INT 1
53479: NEG
53480: PUSH
53481: LD_INT 0
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: PUSH
53488: LD_INT 1
53490: NEG
53491: PUSH
53492: LD_INT 1
53494: NEG
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: PUSH
53500: LD_INT 1
53502: NEG
53503: PUSH
53504: LD_INT 2
53506: NEG
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 0
53514: PUSH
53515: LD_INT 2
53517: NEG
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: PUSH
53523: LD_INT 1
53525: PUSH
53526: LD_INT 1
53528: NEG
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: PUSH
53534: LD_INT 2
53536: PUSH
53537: LD_INT 0
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: LD_INT 2
53546: PUSH
53547: LD_INT 1
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 2
53556: PUSH
53557: LD_INT 2
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: PUSH
53564: LD_INT 1
53566: PUSH
53567: LD_INT 2
53569: PUSH
53570: EMPTY
53571: LIST
53572: LIST
53573: PUSH
53574: LD_INT 0
53576: PUSH
53577: LD_INT 2
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 1
53586: NEG
53587: PUSH
53588: LD_INT 1
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: PUSH
53595: LD_INT 2
53597: NEG
53598: PUSH
53599: LD_INT 0
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: LD_INT 2
53608: NEG
53609: PUSH
53610: LD_INT 1
53612: NEG
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: PUSH
53618: LD_INT 2
53620: NEG
53621: PUSH
53622: LD_INT 2
53624: NEG
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: LIST
53634: LIST
53635: LIST
53636: LIST
53637: LIST
53638: LIST
53639: LIST
53640: LIST
53641: LIST
53642: LIST
53643: LIST
53644: LIST
53645: LIST
53646: LIST
53647: LIST
53648: LIST
53649: LIST
53650: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53651: LD_ADDR_VAR 0 57
53655: PUSH
53656: LD_INT 0
53658: PUSH
53659: LD_INT 0
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: PUSH
53666: LD_INT 0
53668: PUSH
53669: LD_INT 1
53671: NEG
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 1
53679: PUSH
53680: LD_INT 0
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: PUSH
53687: LD_INT 1
53689: PUSH
53690: LD_INT 1
53692: PUSH
53693: EMPTY
53694: LIST
53695: LIST
53696: PUSH
53697: LD_INT 0
53699: PUSH
53700: LD_INT 1
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: PUSH
53707: LD_INT 1
53709: NEG
53710: PUSH
53711: LD_INT 0
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 1
53720: NEG
53721: PUSH
53722: LD_INT 1
53724: NEG
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: PUSH
53730: LD_INT 1
53732: NEG
53733: PUSH
53734: LD_INT 2
53736: NEG
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PUSH
53742: LD_INT 0
53744: PUSH
53745: LD_INT 2
53747: NEG
53748: PUSH
53749: EMPTY
53750: LIST
53751: LIST
53752: PUSH
53753: LD_INT 1
53755: PUSH
53756: LD_INT 1
53758: NEG
53759: PUSH
53760: EMPTY
53761: LIST
53762: LIST
53763: PUSH
53764: LD_INT 2
53766: PUSH
53767: LD_INT 0
53769: PUSH
53770: EMPTY
53771: LIST
53772: LIST
53773: PUSH
53774: LD_INT 2
53776: PUSH
53777: LD_INT 1
53779: PUSH
53780: EMPTY
53781: LIST
53782: LIST
53783: PUSH
53784: LD_INT 2
53786: PUSH
53787: LD_INT 2
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: PUSH
53794: LD_INT 1
53796: PUSH
53797: LD_INT 2
53799: PUSH
53800: EMPTY
53801: LIST
53802: LIST
53803: PUSH
53804: LD_INT 0
53806: PUSH
53807: LD_INT 2
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: LD_INT 1
53816: NEG
53817: PUSH
53818: LD_INT 1
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 2
53827: NEG
53828: PUSH
53829: LD_INT 0
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: PUSH
53836: LD_INT 2
53838: NEG
53839: PUSH
53840: LD_INT 1
53842: NEG
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: LD_INT 2
53850: NEG
53851: PUSH
53852: LD_INT 2
53854: NEG
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: LIST
53864: LIST
53865: LIST
53866: LIST
53867: LIST
53868: LIST
53869: LIST
53870: LIST
53871: LIST
53872: LIST
53873: LIST
53874: LIST
53875: LIST
53876: LIST
53877: LIST
53878: LIST
53879: LIST
53880: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53881: LD_ADDR_VAR 0 58
53885: PUSH
53886: LD_INT 0
53888: PUSH
53889: LD_INT 0
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 0
53898: PUSH
53899: LD_INT 1
53901: NEG
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: PUSH
53907: LD_INT 1
53909: PUSH
53910: LD_INT 0
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 1
53919: PUSH
53920: LD_INT 1
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: LD_INT 0
53929: PUSH
53930: LD_INT 1
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: LD_INT 1
53939: NEG
53940: PUSH
53941: LD_INT 0
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: PUSH
53948: LD_INT 1
53950: NEG
53951: PUSH
53952: LD_INT 1
53954: NEG
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 1
53962: NEG
53963: PUSH
53964: LD_INT 2
53966: NEG
53967: PUSH
53968: EMPTY
53969: LIST
53970: LIST
53971: PUSH
53972: LD_INT 0
53974: PUSH
53975: LD_INT 2
53977: NEG
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: PUSH
53983: LD_INT 1
53985: PUSH
53986: LD_INT 1
53988: NEG
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: LD_INT 2
53996: PUSH
53997: LD_INT 0
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: PUSH
54004: LD_INT 2
54006: PUSH
54007: LD_INT 1
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: LD_INT 2
54016: PUSH
54017: LD_INT 2
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: PUSH
54024: LD_INT 1
54026: PUSH
54027: LD_INT 2
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: PUSH
54034: LD_INT 0
54036: PUSH
54037: LD_INT 2
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: LD_INT 1
54046: NEG
54047: PUSH
54048: LD_INT 1
54050: PUSH
54051: EMPTY
54052: LIST
54053: LIST
54054: PUSH
54055: LD_INT 2
54057: NEG
54058: PUSH
54059: LD_INT 0
54061: PUSH
54062: EMPTY
54063: LIST
54064: LIST
54065: PUSH
54066: LD_INT 2
54068: NEG
54069: PUSH
54070: LD_INT 1
54072: NEG
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PUSH
54078: LD_INT 2
54080: NEG
54081: PUSH
54082: LD_INT 2
54084: NEG
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: LIST
54094: LIST
54095: LIST
54096: LIST
54097: LIST
54098: LIST
54099: LIST
54100: LIST
54101: LIST
54102: LIST
54103: LIST
54104: LIST
54105: LIST
54106: LIST
54107: LIST
54108: LIST
54109: LIST
54110: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54111: LD_ADDR_VAR 0 59
54115: PUSH
54116: LD_INT 0
54118: PUSH
54119: LD_INT 0
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: PUSH
54126: LD_INT 0
54128: PUSH
54129: LD_INT 1
54131: NEG
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: PUSH
54137: LD_INT 1
54139: PUSH
54140: LD_INT 0
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 1
54149: PUSH
54150: LD_INT 1
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: PUSH
54157: LD_INT 0
54159: PUSH
54160: LD_INT 1
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: PUSH
54167: LD_INT 1
54169: NEG
54170: PUSH
54171: LD_INT 0
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: LD_INT 1
54180: NEG
54181: PUSH
54182: LD_INT 1
54184: NEG
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: LIST
54194: LIST
54195: LIST
54196: LIST
54197: LIST
54198: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54199: LD_ADDR_VAR 0 60
54203: PUSH
54204: LD_INT 0
54206: PUSH
54207: LD_INT 0
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: PUSH
54214: LD_INT 0
54216: PUSH
54217: LD_INT 1
54219: NEG
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: PUSH
54225: LD_INT 1
54227: PUSH
54228: LD_INT 0
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: PUSH
54235: LD_INT 1
54237: PUSH
54238: LD_INT 1
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: LD_INT 0
54247: PUSH
54248: LD_INT 1
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 1
54257: NEG
54258: PUSH
54259: LD_INT 0
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: PUSH
54266: LD_INT 1
54268: NEG
54269: PUSH
54270: LD_INT 1
54272: NEG
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: LIST
54282: LIST
54283: LIST
54284: LIST
54285: LIST
54286: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54287: LD_ADDR_VAR 0 61
54291: PUSH
54292: LD_INT 0
54294: PUSH
54295: LD_INT 0
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: PUSH
54302: LD_INT 0
54304: PUSH
54305: LD_INT 1
54307: NEG
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: PUSH
54313: LD_INT 1
54315: PUSH
54316: LD_INT 0
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: LD_INT 1
54325: PUSH
54326: LD_INT 1
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PUSH
54333: LD_INT 0
54335: PUSH
54336: LD_INT 1
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: PUSH
54343: LD_INT 1
54345: NEG
54346: PUSH
54347: LD_INT 0
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: PUSH
54354: LD_INT 1
54356: NEG
54357: PUSH
54358: LD_INT 1
54360: NEG
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: EMPTY
54367: LIST
54368: LIST
54369: LIST
54370: LIST
54371: LIST
54372: LIST
54373: LIST
54374: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54375: LD_ADDR_VAR 0 62
54379: PUSH
54380: LD_INT 0
54382: PUSH
54383: LD_INT 0
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PUSH
54390: LD_INT 0
54392: PUSH
54393: LD_INT 1
54395: NEG
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: LD_INT 1
54403: PUSH
54404: LD_INT 0
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: PUSH
54411: LD_INT 1
54413: PUSH
54414: LD_INT 1
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: PUSH
54421: LD_INT 0
54423: PUSH
54424: LD_INT 1
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: PUSH
54431: LD_INT 1
54433: NEG
54434: PUSH
54435: LD_INT 0
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: LD_INT 1
54444: NEG
54445: PUSH
54446: LD_INT 1
54448: NEG
54449: PUSH
54450: EMPTY
54451: LIST
54452: LIST
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: LIST
54458: LIST
54459: LIST
54460: LIST
54461: LIST
54462: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54463: LD_ADDR_VAR 0 63
54467: PUSH
54468: LD_INT 0
54470: PUSH
54471: LD_INT 0
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 0
54480: PUSH
54481: LD_INT 1
54483: NEG
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 1
54491: PUSH
54492: LD_INT 0
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: LD_INT 1
54501: PUSH
54502: LD_INT 1
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: PUSH
54509: LD_INT 0
54511: PUSH
54512: LD_INT 1
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: LD_INT 1
54521: NEG
54522: PUSH
54523: LD_INT 0
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: PUSH
54530: LD_INT 1
54532: NEG
54533: PUSH
54534: LD_INT 1
54536: NEG
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: LIST
54546: LIST
54547: LIST
54548: LIST
54549: LIST
54550: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54551: LD_ADDR_VAR 0 64
54555: PUSH
54556: LD_INT 0
54558: PUSH
54559: LD_INT 0
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: PUSH
54566: LD_INT 0
54568: PUSH
54569: LD_INT 1
54571: NEG
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: PUSH
54577: LD_INT 1
54579: PUSH
54580: LD_INT 0
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: PUSH
54587: LD_INT 1
54589: PUSH
54590: LD_INT 1
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: PUSH
54597: LD_INT 0
54599: PUSH
54600: LD_INT 1
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: PUSH
54607: LD_INT 1
54609: NEG
54610: PUSH
54611: LD_INT 0
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 1
54620: NEG
54621: PUSH
54622: LD_INT 1
54624: NEG
54625: PUSH
54626: EMPTY
54627: LIST
54628: LIST
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: LIST
54634: LIST
54635: LIST
54636: LIST
54637: LIST
54638: ST_TO_ADDR
// end ; 1 :
54639: GO 60536
54641: LD_INT 1
54643: DOUBLE
54644: EQUAL
54645: IFTRUE 54649
54647: GO 57272
54649: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54650: LD_ADDR_VAR 0 11
54654: PUSH
54655: LD_INT 1
54657: NEG
54658: PUSH
54659: LD_INT 3
54661: NEG
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: PUSH
54667: LD_INT 0
54669: PUSH
54670: LD_INT 3
54672: NEG
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: PUSH
54678: LD_INT 1
54680: PUSH
54681: LD_INT 2
54683: NEG
54684: PUSH
54685: EMPTY
54686: LIST
54687: LIST
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: LIST
54693: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54694: LD_ADDR_VAR 0 12
54698: PUSH
54699: LD_INT 2
54701: PUSH
54702: LD_INT 1
54704: NEG
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: LD_INT 3
54712: PUSH
54713: LD_INT 0
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 3
54722: PUSH
54723: LD_INT 1
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: LIST
54734: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54735: LD_ADDR_VAR 0 13
54739: PUSH
54740: LD_INT 3
54742: PUSH
54743: LD_INT 2
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: LD_INT 3
54752: PUSH
54753: LD_INT 3
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: LD_INT 2
54762: PUSH
54763: LD_INT 3
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: LIST
54774: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54775: LD_ADDR_VAR 0 14
54779: PUSH
54780: LD_INT 1
54782: PUSH
54783: LD_INT 3
54785: PUSH
54786: EMPTY
54787: LIST
54788: LIST
54789: PUSH
54790: LD_INT 0
54792: PUSH
54793: LD_INT 3
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_INT 1
54802: NEG
54803: PUSH
54804: LD_INT 2
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: LIST
54815: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54816: LD_ADDR_VAR 0 15
54820: PUSH
54821: LD_INT 2
54823: NEG
54824: PUSH
54825: LD_INT 1
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: PUSH
54832: LD_INT 3
54834: NEG
54835: PUSH
54836: LD_INT 0
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: LD_INT 3
54845: NEG
54846: PUSH
54847: LD_INT 1
54849: NEG
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: LIST
54859: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54860: LD_ADDR_VAR 0 16
54864: PUSH
54865: LD_INT 2
54867: NEG
54868: PUSH
54869: LD_INT 3
54871: NEG
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: PUSH
54877: LD_INT 3
54879: NEG
54880: PUSH
54881: LD_INT 2
54883: NEG
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: LD_INT 3
54891: NEG
54892: PUSH
54893: LD_INT 3
54895: NEG
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: LIST
54905: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54906: LD_ADDR_VAR 0 17
54910: PUSH
54911: LD_INT 1
54913: NEG
54914: PUSH
54915: LD_INT 3
54917: NEG
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: PUSH
54923: LD_INT 0
54925: PUSH
54926: LD_INT 3
54928: NEG
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: LD_INT 1
54936: PUSH
54937: LD_INT 2
54939: NEG
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: LIST
54949: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54950: LD_ADDR_VAR 0 18
54954: PUSH
54955: LD_INT 2
54957: PUSH
54958: LD_INT 1
54960: NEG
54961: PUSH
54962: EMPTY
54963: LIST
54964: LIST
54965: PUSH
54966: LD_INT 3
54968: PUSH
54969: LD_INT 0
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: LD_INT 3
54978: PUSH
54979: LD_INT 1
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: LIST
54990: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54991: LD_ADDR_VAR 0 19
54995: PUSH
54996: LD_INT 3
54998: PUSH
54999: LD_INT 2
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 3
55008: PUSH
55009: LD_INT 3
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: LD_INT 2
55018: PUSH
55019: LD_INT 3
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: LIST
55030: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55031: LD_ADDR_VAR 0 20
55035: PUSH
55036: LD_INT 1
55038: PUSH
55039: LD_INT 3
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: PUSH
55046: LD_INT 0
55048: PUSH
55049: LD_INT 3
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: LD_INT 1
55058: NEG
55059: PUSH
55060: LD_INT 2
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: LIST
55071: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55072: LD_ADDR_VAR 0 21
55076: PUSH
55077: LD_INT 2
55079: NEG
55080: PUSH
55081: LD_INT 1
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: PUSH
55088: LD_INT 3
55090: NEG
55091: PUSH
55092: LD_INT 0
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: PUSH
55099: LD_INT 3
55101: NEG
55102: PUSH
55103: LD_INT 1
55105: NEG
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: LIST
55115: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55116: LD_ADDR_VAR 0 22
55120: PUSH
55121: LD_INT 2
55123: NEG
55124: PUSH
55125: LD_INT 3
55127: NEG
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: PUSH
55133: LD_INT 3
55135: NEG
55136: PUSH
55137: LD_INT 2
55139: NEG
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: PUSH
55145: LD_INT 3
55147: NEG
55148: PUSH
55149: LD_INT 3
55151: NEG
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: PUSH
55157: EMPTY
55158: LIST
55159: LIST
55160: LIST
55161: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
55162: LD_ADDR_VAR 0 23
55166: PUSH
55167: LD_INT 0
55169: PUSH
55170: LD_INT 3
55172: NEG
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: LD_INT 1
55180: NEG
55181: PUSH
55182: LD_INT 4
55184: NEG
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: PUSH
55190: LD_INT 1
55192: PUSH
55193: LD_INT 3
55195: NEG
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: LIST
55205: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
55206: LD_ADDR_VAR 0 24
55210: PUSH
55211: LD_INT 3
55213: PUSH
55214: LD_INT 0
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: PUSH
55221: LD_INT 3
55223: PUSH
55224: LD_INT 1
55226: NEG
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: LD_INT 4
55234: PUSH
55235: LD_INT 1
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: LIST
55246: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
55247: LD_ADDR_VAR 0 25
55251: PUSH
55252: LD_INT 3
55254: PUSH
55255: LD_INT 3
55257: PUSH
55258: EMPTY
55259: LIST
55260: LIST
55261: PUSH
55262: LD_INT 4
55264: PUSH
55265: LD_INT 3
55267: PUSH
55268: EMPTY
55269: LIST
55270: LIST
55271: PUSH
55272: LD_INT 3
55274: PUSH
55275: LD_INT 4
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: LIST
55286: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
55287: LD_ADDR_VAR 0 26
55291: PUSH
55292: LD_INT 0
55294: PUSH
55295: LD_INT 3
55297: PUSH
55298: EMPTY
55299: LIST
55300: LIST
55301: PUSH
55302: LD_INT 1
55304: PUSH
55305: LD_INT 4
55307: PUSH
55308: EMPTY
55309: LIST
55310: LIST
55311: PUSH
55312: LD_INT 1
55314: NEG
55315: PUSH
55316: LD_INT 3
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: LIST
55327: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
55328: LD_ADDR_VAR 0 27
55332: PUSH
55333: LD_INT 3
55335: NEG
55336: PUSH
55337: LD_INT 0
55339: PUSH
55340: EMPTY
55341: LIST
55342: LIST
55343: PUSH
55344: LD_INT 3
55346: NEG
55347: PUSH
55348: LD_INT 1
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: PUSH
55355: LD_INT 4
55357: NEG
55358: PUSH
55359: LD_INT 1
55361: NEG
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: LIST
55371: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
55372: LD_ADDR_VAR 0 28
55376: PUSH
55377: LD_INT 3
55379: NEG
55380: PUSH
55381: LD_INT 3
55383: NEG
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: LD_INT 3
55391: NEG
55392: PUSH
55393: LD_INT 4
55395: NEG
55396: PUSH
55397: EMPTY
55398: LIST
55399: LIST
55400: PUSH
55401: LD_INT 4
55403: NEG
55404: PUSH
55405: LD_INT 3
55407: NEG
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: LIST
55417: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
55418: LD_ADDR_VAR 0 29
55422: PUSH
55423: LD_INT 1
55425: NEG
55426: PUSH
55427: LD_INT 3
55429: NEG
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: PUSH
55435: LD_INT 0
55437: PUSH
55438: LD_INT 3
55440: NEG
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: PUSH
55446: LD_INT 1
55448: PUSH
55449: LD_INT 2
55451: NEG
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PUSH
55457: LD_INT 1
55459: NEG
55460: PUSH
55461: LD_INT 4
55463: NEG
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PUSH
55469: LD_INT 0
55471: PUSH
55472: LD_INT 4
55474: NEG
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: PUSH
55480: LD_INT 1
55482: PUSH
55483: LD_INT 3
55485: NEG
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 1
55493: NEG
55494: PUSH
55495: LD_INT 5
55497: NEG
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: LD_INT 0
55505: PUSH
55506: LD_INT 5
55508: NEG
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: PUSH
55514: LD_INT 1
55516: PUSH
55517: LD_INT 4
55519: NEG
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: LD_INT 1
55527: NEG
55528: PUSH
55529: LD_INT 6
55531: NEG
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: PUSH
55537: LD_INT 0
55539: PUSH
55540: LD_INT 6
55542: NEG
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: PUSH
55548: LD_INT 1
55550: PUSH
55551: LD_INT 5
55553: NEG
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: LIST
55563: LIST
55564: LIST
55565: LIST
55566: LIST
55567: LIST
55568: LIST
55569: LIST
55570: LIST
55571: LIST
55572: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
55573: LD_ADDR_VAR 0 30
55577: PUSH
55578: LD_INT 2
55580: PUSH
55581: LD_INT 1
55583: NEG
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: PUSH
55589: LD_INT 3
55591: PUSH
55592: LD_INT 0
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: LD_INT 3
55601: PUSH
55602: LD_INT 1
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 3
55611: PUSH
55612: LD_INT 1
55614: NEG
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: PUSH
55620: LD_INT 4
55622: PUSH
55623: LD_INT 0
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: PUSH
55630: LD_INT 4
55632: PUSH
55633: LD_INT 1
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: PUSH
55640: LD_INT 4
55642: PUSH
55643: LD_INT 1
55645: NEG
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: PUSH
55651: LD_INT 5
55653: PUSH
55654: LD_INT 0
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: PUSH
55661: LD_INT 5
55663: PUSH
55664: LD_INT 1
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: PUSH
55671: LD_INT 5
55673: PUSH
55674: LD_INT 1
55676: NEG
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: PUSH
55682: LD_INT 6
55684: PUSH
55685: LD_INT 0
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: PUSH
55692: LD_INT 6
55694: PUSH
55695: LD_INT 1
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PUSH
55702: EMPTY
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: LIST
55708: LIST
55709: LIST
55710: LIST
55711: LIST
55712: LIST
55713: LIST
55714: LIST
55715: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
55716: LD_ADDR_VAR 0 31
55720: PUSH
55721: LD_INT 3
55723: PUSH
55724: LD_INT 2
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: LD_INT 3
55733: PUSH
55734: LD_INT 3
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: PUSH
55741: LD_INT 2
55743: PUSH
55744: LD_INT 3
55746: PUSH
55747: EMPTY
55748: LIST
55749: LIST
55750: PUSH
55751: LD_INT 4
55753: PUSH
55754: LD_INT 3
55756: PUSH
55757: EMPTY
55758: LIST
55759: LIST
55760: PUSH
55761: LD_INT 4
55763: PUSH
55764: LD_INT 4
55766: PUSH
55767: EMPTY
55768: LIST
55769: LIST
55770: PUSH
55771: LD_INT 3
55773: PUSH
55774: LD_INT 4
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: PUSH
55781: LD_INT 5
55783: PUSH
55784: LD_INT 4
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 5
55793: PUSH
55794: LD_INT 5
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: LD_INT 4
55803: PUSH
55804: LD_INT 5
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: PUSH
55811: LD_INT 6
55813: PUSH
55814: LD_INT 5
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: LD_INT 6
55823: PUSH
55824: LD_INT 6
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: LD_INT 5
55833: PUSH
55834: LD_INT 6
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: LIST
55845: LIST
55846: LIST
55847: LIST
55848: LIST
55849: LIST
55850: LIST
55851: LIST
55852: LIST
55853: LIST
55854: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
55855: LD_ADDR_VAR 0 32
55859: PUSH
55860: LD_INT 1
55862: PUSH
55863: LD_INT 3
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: PUSH
55870: LD_INT 0
55872: PUSH
55873: LD_INT 3
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: PUSH
55880: LD_INT 1
55882: NEG
55883: PUSH
55884: LD_INT 2
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: PUSH
55891: LD_INT 1
55893: PUSH
55894: LD_INT 4
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: PUSH
55901: LD_INT 0
55903: PUSH
55904: LD_INT 4
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 1
55913: NEG
55914: PUSH
55915: LD_INT 3
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 1
55924: PUSH
55925: LD_INT 5
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: LD_INT 0
55934: PUSH
55935: LD_INT 5
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: PUSH
55942: LD_INT 1
55944: NEG
55945: PUSH
55946: LD_INT 4
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PUSH
55953: LD_INT 1
55955: PUSH
55956: LD_INT 6
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: LD_INT 0
55965: PUSH
55966: LD_INT 6
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PUSH
55973: LD_INT 1
55975: NEG
55976: PUSH
55977: LD_INT 5
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: LIST
55988: LIST
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: LIST
55997: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
55998: LD_ADDR_VAR 0 33
56002: PUSH
56003: LD_INT 2
56005: NEG
56006: PUSH
56007: LD_INT 1
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PUSH
56014: LD_INT 3
56016: NEG
56017: PUSH
56018: LD_INT 0
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: PUSH
56025: LD_INT 3
56027: NEG
56028: PUSH
56029: LD_INT 1
56031: NEG
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PUSH
56037: LD_INT 3
56039: NEG
56040: PUSH
56041: LD_INT 1
56043: PUSH
56044: EMPTY
56045: LIST
56046: LIST
56047: PUSH
56048: LD_INT 4
56050: NEG
56051: PUSH
56052: LD_INT 0
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: PUSH
56059: LD_INT 4
56061: NEG
56062: PUSH
56063: LD_INT 1
56065: NEG
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: PUSH
56071: LD_INT 4
56073: NEG
56074: PUSH
56075: LD_INT 1
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: PUSH
56082: LD_INT 5
56084: NEG
56085: PUSH
56086: LD_INT 0
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 5
56095: NEG
56096: PUSH
56097: LD_INT 1
56099: NEG
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: LD_INT 5
56107: NEG
56108: PUSH
56109: LD_INT 1
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: LD_INT 6
56118: NEG
56119: PUSH
56120: LD_INT 0
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: LD_INT 6
56129: NEG
56130: PUSH
56131: LD_INT 1
56133: NEG
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: LIST
56143: LIST
56144: LIST
56145: LIST
56146: LIST
56147: LIST
56148: LIST
56149: LIST
56150: LIST
56151: LIST
56152: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
56153: LD_ADDR_VAR 0 34
56157: PUSH
56158: LD_INT 2
56160: NEG
56161: PUSH
56162: LD_INT 3
56164: NEG
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: PUSH
56170: LD_INT 3
56172: NEG
56173: PUSH
56174: LD_INT 2
56176: NEG
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: LD_INT 3
56184: NEG
56185: PUSH
56186: LD_INT 3
56188: NEG
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: PUSH
56194: LD_INT 3
56196: NEG
56197: PUSH
56198: LD_INT 4
56200: NEG
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: PUSH
56206: LD_INT 4
56208: NEG
56209: PUSH
56210: LD_INT 3
56212: NEG
56213: PUSH
56214: EMPTY
56215: LIST
56216: LIST
56217: PUSH
56218: LD_INT 4
56220: NEG
56221: PUSH
56222: LD_INT 4
56224: NEG
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: PUSH
56230: LD_INT 4
56232: NEG
56233: PUSH
56234: LD_INT 5
56236: NEG
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 5
56244: NEG
56245: PUSH
56246: LD_INT 4
56248: NEG
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 5
56256: NEG
56257: PUSH
56258: LD_INT 5
56260: NEG
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: LD_INT 5
56268: NEG
56269: PUSH
56270: LD_INT 6
56272: NEG
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: LD_INT 6
56280: NEG
56281: PUSH
56282: LD_INT 5
56284: NEG
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: PUSH
56290: LD_INT 6
56292: NEG
56293: PUSH
56294: LD_INT 6
56296: NEG
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: EMPTY
56303: LIST
56304: LIST
56305: LIST
56306: LIST
56307: LIST
56308: LIST
56309: LIST
56310: LIST
56311: LIST
56312: LIST
56313: LIST
56314: LIST
56315: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
56316: LD_ADDR_VAR 0 41
56320: PUSH
56321: LD_INT 0
56323: PUSH
56324: LD_INT 2
56326: NEG
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: PUSH
56332: LD_INT 1
56334: NEG
56335: PUSH
56336: LD_INT 3
56338: NEG
56339: PUSH
56340: EMPTY
56341: LIST
56342: LIST
56343: PUSH
56344: LD_INT 1
56346: PUSH
56347: LD_INT 2
56349: NEG
56350: PUSH
56351: EMPTY
56352: LIST
56353: LIST
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: LIST
56359: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
56360: LD_ADDR_VAR 0 42
56364: PUSH
56365: LD_INT 2
56367: PUSH
56368: LD_INT 0
56370: PUSH
56371: EMPTY
56372: LIST
56373: LIST
56374: PUSH
56375: LD_INT 2
56377: PUSH
56378: LD_INT 1
56380: NEG
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: PUSH
56386: LD_INT 3
56388: PUSH
56389: LD_INT 1
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: LIST
56400: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
56401: LD_ADDR_VAR 0 43
56405: PUSH
56406: LD_INT 2
56408: PUSH
56409: LD_INT 2
56411: PUSH
56412: EMPTY
56413: LIST
56414: LIST
56415: PUSH
56416: LD_INT 3
56418: PUSH
56419: LD_INT 2
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: PUSH
56426: LD_INT 2
56428: PUSH
56429: LD_INT 3
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: LIST
56440: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
56441: LD_ADDR_VAR 0 44
56445: PUSH
56446: LD_INT 0
56448: PUSH
56449: LD_INT 2
56451: PUSH
56452: EMPTY
56453: LIST
56454: LIST
56455: PUSH
56456: LD_INT 1
56458: PUSH
56459: LD_INT 3
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: LD_INT 1
56468: NEG
56469: PUSH
56470: LD_INT 2
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: PUSH
56477: EMPTY
56478: LIST
56479: LIST
56480: LIST
56481: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56482: LD_ADDR_VAR 0 45
56486: PUSH
56487: LD_INT 2
56489: NEG
56490: PUSH
56491: LD_INT 0
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: PUSH
56498: LD_INT 2
56500: NEG
56501: PUSH
56502: LD_INT 1
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: PUSH
56509: LD_INT 3
56511: NEG
56512: PUSH
56513: LD_INT 1
56515: NEG
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: LIST
56525: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
56526: LD_ADDR_VAR 0 46
56530: PUSH
56531: LD_INT 2
56533: NEG
56534: PUSH
56535: LD_INT 2
56537: NEG
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PUSH
56543: LD_INT 2
56545: NEG
56546: PUSH
56547: LD_INT 3
56549: NEG
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 3
56557: NEG
56558: PUSH
56559: LD_INT 2
56561: NEG
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: LIST
56571: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
56572: LD_ADDR_VAR 0 47
56576: PUSH
56577: LD_INT 2
56579: NEG
56580: PUSH
56581: LD_INT 3
56583: NEG
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: LD_INT 1
56591: NEG
56592: PUSH
56593: LD_INT 3
56595: NEG
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56605: LD_ADDR_VAR 0 48
56609: PUSH
56610: LD_INT 1
56612: PUSH
56613: LD_INT 2
56615: NEG
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: LD_INT 2
56623: PUSH
56624: LD_INT 1
56626: NEG
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
56636: LD_ADDR_VAR 0 49
56640: PUSH
56641: LD_INT 3
56643: PUSH
56644: LD_INT 1
56646: PUSH
56647: EMPTY
56648: LIST
56649: LIST
56650: PUSH
56651: LD_INT 3
56653: PUSH
56654: LD_INT 2
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
56665: LD_ADDR_VAR 0 50
56669: PUSH
56670: LD_INT 2
56672: PUSH
56673: LD_INT 3
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: PUSH
56680: LD_INT 1
56682: PUSH
56683: LD_INT 3
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56694: LD_ADDR_VAR 0 51
56698: PUSH
56699: LD_INT 1
56701: NEG
56702: PUSH
56703: LD_INT 2
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: LD_INT 2
56712: NEG
56713: PUSH
56714: LD_INT 1
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56725: LD_ADDR_VAR 0 52
56729: PUSH
56730: LD_INT 3
56732: NEG
56733: PUSH
56734: LD_INT 1
56736: NEG
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 3
56744: NEG
56745: PUSH
56746: LD_INT 2
56748: NEG
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56758: LD_ADDR_VAR 0 53
56762: PUSH
56763: LD_INT 1
56765: NEG
56766: PUSH
56767: LD_INT 3
56769: NEG
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: PUSH
56775: LD_INT 0
56777: PUSH
56778: LD_INT 3
56780: NEG
56781: PUSH
56782: EMPTY
56783: LIST
56784: LIST
56785: PUSH
56786: LD_INT 1
56788: PUSH
56789: LD_INT 2
56791: NEG
56792: PUSH
56793: EMPTY
56794: LIST
56795: LIST
56796: PUSH
56797: EMPTY
56798: LIST
56799: LIST
56800: LIST
56801: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56802: LD_ADDR_VAR 0 54
56806: PUSH
56807: LD_INT 2
56809: PUSH
56810: LD_INT 1
56812: NEG
56813: PUSH
56814: EMPTY
56815: LIST
56816: LIST
56817: PUSH
56818: LD_INT 3
56820: PUSH
56821: LD_INT 0
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: LD_INT 3
56830: PUSH
56831: LD_INT 1
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: LIST
56842: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56843: LD_ADDR_VAR 0 55
56847: PUSH
56848: LD_INT 3
56850: PUSH
56851: LD_INT 2
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 3
56860: PUSH
56861: LD_INT 3
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: PUSH
56868: LD_INT 2
56870: PUSH
56871: LD_INT 3
56873: PUSH
56874: EMPTY
56875: LIST
56876: LIST
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: LIST
56882: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56883: LD_ADDR_VAR 0 56
56887: PUSH
56888: LD_INT 1
56890: PUSH
56891: LD_INT 3
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: PUSH
56898: LD_INT 0
56900: PUSH
56901: LD_INT 3
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: PUSH
56908: LD_INT 1
56910: NEG
56911: PUSH
56912: LD_INT 2
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: LIST
56923: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56924: LD_ADDR_VAR 0 57
56928: PUSH
56929: LD_INT 2
56931: NEG
56932: PUSH
56933: LD_INT 1
56935: PUSH
56936: EMPTY
56937: LIST
56938: LIST
56939: PUSH
56940: LD_INT 3
56942: NEG
56943: PUSH
56944: LD_INT 0
56946: PUSH
56947: EMPTY
56948: LIST
56949: LIST
56950: PUSH
56951: LD_INT 3
56953: NEG
56954: PUSH
56955: LD_INT 1
56957: NEG
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: LIST
56967: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56968: LD_ADDR_VAR 0 58
56972: PUSH
56973: LD_INT 2
56975: NEG
56976: PUSH
56977: LD_INT 3
56979: NEG
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: LD_INT 3
56987: NEG
56988: PUSH
56989: LD_INT 2
56991: NEG
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: LD_INT 3
56999: NEG
57000: PUSH
57001: LD_INT 3
57003: NEG
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: LIST
57013: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
57014: LD_ADDR_VAR 0 59
57018: PUSH
57019: LD_INT 1
57021: NEG
57022: PUSH
57023: LD_INT 2
57025: NEG
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: PUSH
57031: LD_INT 0
57033: PUSH
57034: LD_INT 2
57036: NEG
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: PUSH
57042: LD_INT 1
57044: PUSH
57045: LD_INT 1
57047: NEG
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: LIST
57057: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57058: LD_ADDR_VAR 0 60
57062: PUSH
57063: LD_INT 1
57065: PUSH
57066: LD_INT 1
57068: NEG
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: PUSH
57074: LD_INT 2
57076: PUSH
57077: LD_INT 0
57079: PUSH
57080: EMPTY
57081: LIST
57082: LIST
57083: PUSH
57084: LD_INT 2
57086: PUSH
57087: LD_INT 1
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: LIST
57098: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57099: LD_ADDR_VAR 0 61
57103: PUSH
57104: LD_INT 2
57106: PUSH
57107: LD_INT 1
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: PUSH
57114: LD_INT 2
57116: PUSH
57117: LD_INT 2
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: PUSH
57124: LD_INT 1
57126: PUSH
57127: LD_INT 2
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: LIST
57138: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57139: LD_ADDR_VAR 0 62
57143: PUSH
57144: LD_INT 1
57146: PUSH
57147: LD_INT 2
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PUSH
57154: LD_INT 0
57156: PUSH
57157: LD_INT 2
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 1
57166: NEG
57167: PUSH
57168: LD_INT 1
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: LIST
57179: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57180: LD_ADDR_VAR 0 63
57184: PUSH
57185: LD_INT 1
57187: NEG
57188: PUSH
57189: LD_INT 1
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: PUSH
57196: LD_INT 2
57198: NEG
57199: PUSH
57200: LD_INT 0
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: LD_INT 2
57209: NEG
57210: PUSH
57211: LD_INT 1
57213: NEG
57214: PUSH
57215: EMPTY
57216: LIST
57217: LIST
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: LIST
57223: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57224: LD_ADDR_VAR 0 64
57228: PUSH
57229: LD_INT 1
57231: NEG
57232: PUSH
57233: LD_INT 2
57235: NEG
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: LD_INT 2
57243: NEG
57244: PUSH
57245: LD_INT 1
57247: NEG
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: LD_INT 2
57255: NEG
57256: PUSH
57257: LD_INT 2
57259: NEG
57260: PUSH
57261: EMPTY
57262: LIST
57263: LIST
57264: PUSH
57265: EMPTY
57266: LIST
57267: LIST
57268: LIST
57269: ST_TO_ADDR
// end ; 2 :
57270: GO 60536
57272: LD_INT 2
57274: DOUBLE
57275: EQUAL
57276: IFTRUE 57280
57278: GO 60535
57280: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
57281: LD_ADDR_VAR 0 29
57285: PUSH
57286: LD_INT 4
57288: PUSH
57289: LD_INT 0
57291: PUSH
57292: EMPTY
57293: LIST
57294: LIST
57295: PUSH
57296: LD_INT 4
57298: PUSH
57299: LD_INT 1
57301: NEG
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: PUSH
57307: LD_INT 5
57309: PUSH
57310: LD_INT 0
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: PUSH
57317: LD_INT 5
57319: PUSH
57320: LD_INT 1
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: PUSH
57327: LD_INT 4
57329: PUSH
57330: LD_INT 1
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: PUSH
57337: LD_INT 3
57339: PUSH
57340: LD_INT 0
57342: PUSH
57343: EMPTY
57344: LIST
57345: LIST
57346: PUSH
57347: LD_INT 3
57349: PUSH
57350: LD_INT 1
57352: NEG
57353: PUSH
57354: EMPTY
57355: LIST
57356: LIST
57357: PUSH
57358: LD_INT 3
57360: PUSH
57361: LD_INT 2
57363: NEG
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: PUSH
57369: LD_INT 5
57371: PUSH
57372: LD_INT 2
57374: PUSH
57375: EMPTY
57376: LIST
57377: LIST
57378: PUSH
57379: LD_INT 3
57381: PUSH
57382: LD_INT 3
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: PUSH
57389: LD_INT 3
57391: PUSH
57392: LD_INT 2
57394: PUSH
57395: EMPTY
57396: LIST
57397: LIST
57398: PUSH
57399: LD_INT 4
57401: PUSH
57402: LD_INT 3
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: PUSH
57409: LD_INT 4
57411: PUSH
57412: LD_INT 4
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: PUSH
57419: LD_INT 3
57421: PUSH
57422: LD_INT 4
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: LD_INT 2
57431: PUSH
57432: LD_INT 3
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: LD_INT 2
57441: PUSH
57442: LD_INT 2
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: LD_INT 4
57451: PUSH
57452: LD_INT 2
57454: PUSH
57455: EMPTY
57456: LIST
57457: LIST
57458: PUSH
57459: LD_INT 2
57461: PUSH
57462: LD_INT 4
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: PUSH
57469: LD_INT 0
57471: PUSH
57472: LD_INT 4
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: LD_INT 0
57481: PUSH
57482: LD_INT 3
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: LD_INT 1
57491: PUSH
57492: LD_INT 4
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: PUSH
57499: LD_INT 1
57501: PUSH
57502: LD_INT 5
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 0
57511: PUSH
57512: LD_INT 5
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: PUSH
57519: LD_INT 1
57521: NEG
57522: PUSH
57523: LD_INT 4
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: PUSH
57530: LD_INT 1
57532: NEG
57533: PUSH
57534: LD_INT 3
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: PUSH
57541: LD_INT 2
57543: PUSH
57544: LD_INT 5
57546: PUSH
57547: EMPTY
57548: LIST
57549: LIST
57550: PUSH
57551: LD_INT 2
57553: NEG
57554: PUSH
57555: LD_INT 3
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PUSH
57562: LD_INT 3
57564: NEG
57565: PUSH
57566: LD_INT 0
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: LD_INT 3
57575: NEG
57576: PUSH
57577: LD_INT 1
57579: NEG
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: LD_INT 2
57587: NEG
57588: PUSH
57589: LD_INT 0
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 2
57598: NEG
57599: PUSH
57600: LD_INT 1
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: PUSH
57607: LD_INT 3
57609: NEG
57610: PUSH
57611: LD_INT 1
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: LD_INT 4
57620: NEG
57621: PUSH
57622: LD_INT 0
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: LD_INT 4
57631: NEG
57632: PUSH
57633: LD_INT 1
57635: NEG
57636: PUSH
57637: EMPTY
57638: LIST
57639: LIST
57640: PUSH
57641: LD_INT 4
57643: NEG
57644: PUSH
57645: LD_INT 2
57647: NEG
57648: PUSH
57649: EMPTY
57650: LIST
57651: LIST
57652: PUSH
57653: LD_INT 2
57655: NEG
57656: PUSH
57657: LD_INT 2
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: PUSH
57664: LD_INT 4
57666: NEG
57667: PUSH
57668: LD_INT 4
57670: NEG
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: PUSH
57676: LD_INT 4
57678: NEG
57679: PUSH
57680: LD_INT 5
57682: NEG
57683: PUSH
57684: EMPTY
57685: LIST
57686: LIST
57687: PUSH
57688: LD_INT 3
57690: NEG
57691: PUSH
57692: LD_INT 4
57694: NEG
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: PUSH
57700: LD_INT 3
57702: NEG
57703: PUSH
57704: LD_INT 3
57706: NEG
57707: PUSH
57708: EMPTY
57709: LIST
57710: LIST
57711: PUSH
57712: LD_INT 4
57714: NEG
57715: PUSH
57716: LD_INT 3
57718: NEG
57719: PUSH
57720: EMPTY
57721: LIST
57722: LIST
57723: PUSH
57724: LD_INT 5
57726: NEG
57727: PUSH
57728: LD_INT 4
57730: NEG
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: PUSH
57736: LD_INT 5
57738: NEG
57739: PUSH
57740: LD_INT 5
57742: NEG
57743: PUSH
57744: EMPTY
57745: LIST
57746: LIST
57747: PUSH
57748: LD_INT 3
57750: NEG
57751: PUSH
57752: LD_INT 5
57754: NEG
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: LD_INT 5
57762: NEG
57763: PUSH
57764: LD_INT 3
57766: NEG
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PUSH
57772: EMPTY
57773: LIST
57774: LIST
57775: LIST
57776: LIST
57777: LIST
57778: LIST
57779: LIST
57780: LIST
57781: LIST
57782: LIST
57783: LIST
57784: LIST
57785: LIST
57786: LIST
57787: LIST
57788: LIST
57789: LIST
57790: LIST
57791: LIST
57792: LIST
57793: LIST
57794: LIST
57795: LIST
57796: LIST
57797: LIST
57798: LIST
57799: LIST
57800: LIST
57801: LIST
57802: LIST
57803: LIST
57804: LIST
57805: LIST
57806: LIST
57807: LIST
57808: LIST
57809: LIST
57810: LIST
57811: LIST
57812: LIST
57813: LIST
57814: LIST
57815: LIST
57816: LIST
57817: LIST
57818: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
57819: LD_ADDR_VAR 0 30
57823: PUSH
57824: LD_INT 4
57826: PUSH
57827: LD_INT 4
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: LD_INT 4
57836: PUSH
57837: LD_INT 3
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: LD_INT 5
57846: PUSH
57847: LD_INT 4
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: LD_INT 5
57856: PUSH
57857: LD_INT 5
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: PUSH
57864: LD_INT 4
57866: PUSH
57867: LD_INT 5
57869: PUSH
57870: EMPTY
57871: LIST
57872: LIST
57873: PUSH
57874: LD_INT 3
57876: PUSH
57877: LD_INT 4
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: PUSH
57884: LD_INT 3
57886: PUSH
57887: LD_INT 3
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: PUSH
57894: LD_INT 5
57896: PUSH
57897: LD_INT 3
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: PUSH
57904: LD_INT 3
57906: PUSH
57907: LD_INT 5
57909: PUSH
57910: EMPTY
57911: LIST
57912: LIST
57913: PUSH
57914: LD_INT 0
57916: PUSH
57917: LD_INT 3
57919: PUSH
57920: EMPTY
57921: LIST
57922: LIST
57923: PUSH
57924: LD_INT 0
57926: PUSH
57927: LD_INT 2
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: PUSH
57934: LD_INT 1
57936: PUSH
57937: LD_INT 3
57939: PUSH
57940: EMPTY
57941: LIST
57942: LIST
57943: PUSH
57944: LD_INT 1
57946: PUSH
57947: LD_INT 4
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: PUSH
57954: LD_INT 0
57956: PUSH
57957: LD_INT 4
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: PUSH
57964: LD_INT 1
57966: NEG
57967: PUSH
57968: LD_INT 3
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: PUSH
57975: LD_INT 1
57977: NEG
57978: PUSH
57979: LD_INT 2
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: PUSH
57986: LD_INT 2
57988: PUSH
57989: LD_INT 4
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: PUSH
57996: LD_INT 2
57998: NEG
57999: PUSH
58000: LD_INT 2
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: PUSH
58007: LD_INT 4
58009: NEG
58010: PUSH
58011: LD_INT 0
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: PUSH
58018: LD_INT 4
58020: NEG
58021: PUSH
58022: LD_INT 1
58024: NEG
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: PUSH
58030: LD_INT 3
58032: NEG
58033: PUSH
58034: LD_INT 0
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: PUSH
58041: LD_INT 3
58043: NEG
58044: PUSH
58045: LD_INT 1
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: PUSH
58052: LD_INT 4
58054: NEG
58055: PUSH
58056: LD_INT 1
58058: PUSH
58059: EMPTY
58060: LIST
58061: LIST
58062: PUSH
58063: LD_INT 5
58065: NEG
58066: PUSH
58067: LD_INT 0
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: PUSH
58074: LD_INT 5
58076: NEG
58077: PUSH
58078: LD_INT 1
58080: NEG
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: PUSH
58086: LD_INT 5
58088: NEG
58089: PUSH
58090: LD_INT 2
58092: NEG
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: PUSH
58098: LD_INT 3
58100: NEG
58101: PUSH
58102: LD_INT 2
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: PUSH
58109: LD_INT 3
58111: NEG
58112: PUSH
58113: LD_INT 3
58115: NEG
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: PUSH
58121: LD_INT 3
58123: NEG
58124: PUSH
58125: LD_INT 4
58127: NEG
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: LD_INT 2
58135: NEG
58136: PUSH
58137: LD_INT 3
58139: NEG
58140: PUSH
58141: EMPTY
58142: LIST
58143: LIST
58144: PUSH
58145: LD_INT 2
58147: NEG
58148: PUSH
58149: LD_INT 2
58151: NEG
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: LD_INT 3
58159: NEG
58160: PUSH
58161: LD_INT 2
58163: NEG
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: LD_INT 4
58171: NEG
58172: PUSH
58173: LD_INT 3
58175: NEG
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: PUSH
58181: LD_INT 4
58183: NEG
58184: PUSH
58185: LD_INT 4
58187: NEG
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: PUSH
58193: LD_INT 2
58195: NEG
58196: PUSH
58197: LD_INT 4
58199: NEG
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: PUSH
58205: LD_INT 4
58207: NEG
58208: PUSH
58209: LD_INT 2
58211: NEG
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PUSH
58217: LD_INT 0
58219: PUSH
58220: LD_INT 4
58222: NEG
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: PUSH
58228: LD_INT 0
58230: PUSH
58231: LD_INT 5
58233: NEG
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: PUSH
58239: LD_INT 1
58241: PUSH
58242: LD_INT 4
58244: NEG
58245: PUSH
58246: EMPTY
58247: LIST
58248: LIST
58249: PUSH
58250: LD_INT 1
58252: PUSH
58253: LD_INT 3
58255: NEG
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: PUSH
58261: LD_INT 0
58263: PUSH
58264: LD_INT 3
58266: NEG
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: PUSH
58272: LD_INT 1
58274: NEG
58275: PUSH
58276: LD_INT 4
58278: NEG
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 1
58286: NEG
58287: PUSH
58288: LD_INT 5
58290: NEG
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: LD_INT 2
58298: PUSH
58299: LD_INT 3
58301: NEG
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: LD_INT 2
58309: NEG
58310: PUSH
58311: LD_INT 5
58313: NEG
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: LIST
58323: LIST
58324: LIST
58325: LIST
58326: LIST
58327: LIST
58328: LIST
58329: LIST
58330: LIST
58331: LIST
58332: LIST
58333: LIST
58334: LIST
58335: LIST
58336: LIST
58337: LIST
58338: LIST
58339: LIST
58340: LIST
58341: LIST
58342: LIST
58343: LIST
58344: LIST
58345: LIST
58346: LIST
58347: LIST
58348: LIST
58349: LIST
58350: LIST
58351: LIST
58352: LIST
58353: LIST
58354: LIST
58355: LIST
58356: LIST
58357: LIST
58358: LIST
58359: LIST
58360: LIST
58361: LIST
58362: LIST
58363: LIST
58364: LIST
58365: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
58366: LD_ADDR_VAR 0 31
58370: PUSH
58371: LD_INT 0
58373: PUSH
58374: LD_INT 4
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: PUSH
58381: LD_INT 0
58383: PUSH
58384: LD_INT 3
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: PUSH
58391: LD_INT 1
58393: PUSH
58394: LD_INT 4
58396: PUSH
58397: EMPTY
58398: LIST
58399: LIST
58400: PUSH
58401: LD_INT 1
58403: PUSH
58404: LD_INT 5
58406: PUSH
58407: EMPTY
58408: LIST
58409: LIST
58410: PUSH
58411: LD_INT 0
58413: PUSH
58414: LD_INT 5
58416: PUSH
58417: EMPTY
58418: LIST
58419: LIST
58420: PUSH
58421: LD_INT 1
58423: NEG
58424: PUSH
58425: LD_INT 4
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: PUSH
58432: LD_INT 1
58434: NEG
58435: PUSH
58436: LD_INT 3
58438: PUSH
58439: EMPTY
58440: LIST
58441: LIST
58442: PUSH
58443: LD_INT 2
58445: PUSH
58446: LD_INT 5
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: PUSH
58453: LD_INT 2
58455: NEG
58456: PUSH
58457: LD_INT 3
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: PUSH
58464: LD_INT 3
58466: NEG
58467: PUSH
58468: LD_INT 0
58470: PUSH
58471: EMPTY
58472: LIST
58473: LIST
58474: PUSH
58475: LD_INT 3
58477: NEG
58478: PUSH
58479: LD_INT 1
58481: NEG
58482: PUSH
58483: EMPTY
58484: LIST
58485: LIST
58486: PUSH
58487: LD_INT 2
58489: NEG
58490: PUSH
58491: LD_INT 0
58493: PUSH
58494: EMPTY
58495: LIST
58496: LIST
58497: PUSH
58498: LD_INT 2
58500: NEG
58501: PUSH
58502: LD_INT 1
58504: PUSH
58505: EMPTY
58506: LIST
58507: LIST
58508: PUSH
58509: LD_INT 3
58511: NEG
58512: PUSH
58513: LD_INT 1
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PUSH
58520: LD_INT 4
58522: NEG
58523: PUSH
58524: LD_INT 0
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: PUSH
58531: LD_INT 4
58533: NEG
58534: PUSH
58535: LD_INT 1
58537: NEG
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PUSH
58543: LD_INT 4
58545: NEG
58546: PUSH
58547: LD_INT 2
58549: NEG
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: PUSH
58555: LD_INT 2
58557: NEG
58558: PUSH
58559: LD_INT 2
58561: PUSH
58562: EMPTY
58563: LIST
58564: LIST
58565: PUSH
58566: LD_INT 4
58568: NEG
58569: PUSH
58570: LD_INT 4
58572: NEG
58573: PUSH
58574: EMPTY
58575: LIST
58576: LIST
58577: PUSH
58578: LD_INT 4
58580: NEG
58581: PUSH
58582: LD_INT 5
58584: NEG
58585: PUSH
58586: EMPTY
58587: LIST
58588: LIST
58589: PUSH
58590: LD_INT 3
58592: NEG
58593: PUSH
58594: LD_INT 4
58596: NEG
58597: PUSH
58598: EMPTY
58599: LIST
58600: LIST
58601: PUSH
58602: LD_INT 3
58604: NEG
58605: PUSH
58606: LD_INT 3
58608: NEG
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: PUSH
58614: LD_INT 4
58616: NEG
58617: PUSH
58618: LD_INT 3
58620: NEG
58621: PUSH
58622: EMPTY
58623: LIST
58624: LIST
58625: PUSH
58626: LD_INT 5
58628: NEG
58629: PUSH
58630: LD_INT 4
58632: NEG
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: PUSH
58638: LD_INT 5
58640: NEG
58641: PUSH
58642: LD_INT 5
58644: NEG
58645: PUSH
58646: EMPTY
58647: LIST
58648: LIST
58649: PUSH
58650: LD_INT 3
58652: NEG
58653: PUSH
58654: LD_INT 5
58656: NEG
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: PUSH
58662: LD_INT 5
58664: NEG
58665: PUSH
58666: LD_INT 3
58668: NEG
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: PUSH
58674: LD_INT 0
58676: PUSH
58677: LD_INT 3
58679: NEG
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: LD_INT 0
58687: PUSH
58688: LD_INT 4
58690: NEG
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: PUSH
58696: LD_INT 1
58698: PUSH
58699: LD_INT 3
58701: NEG
58702: PUSH
58703: EMPTY
58704: LIST
58705: LIST
58706: PUSH
58707: LD_INT 1
58709: PUSH
58710: LD_INT 2
58712: NEG
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: PUSH
58718: LD_INT 0
58720: PUSH
58721: LD_INT 2
58723: NEG
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: LD_INT 1
58731: NEG
58732: PUSH
58733: LD_INT 3
58735: NEG
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: PUSH
58741: LD_INT 1
58743: NEG
58744: PUSH
58745: LD_INT 4
58747: NEG
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: LD_INT 2
58755: PUSH
58756: LD_INT 2
58758: NEG
58759: PUSH
58760: EMPTY
58761: LIST
58762: LIST
58763: PUSH
58764: LD_INT 2
58766: NEG
58767: PUSH
58768: LD_INT 4
58770: NEG
58771: PUSH
58772: EMPTY
58773: LIST
58774: LIST
58775: PUSH
58776: LD_INT 4
58778: PUSH
58779: LD_INT 0
58781: PUSH
58782: EMPTY
58783: LIST
58784: LIST
58785: PUSH
58786: LD_INT 4
58788: PUSH
58789: LD_INT 1
58791: NEG
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: PUSH
58797: LD_INT 5
58799: PUSH
58800: LD_INT 0
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: PUSH
58807: LD_INT 5
58809: PUSH
58810: LD_INT 1
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: PUSH
58817: LD_INT 4
58819: PUSH
58820: LD_INT 1
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: PUSH
58827: LD_INT 3
58829: PUSH
58830: LD_INT 0
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PUSH
58837: LD_INT 3
58839: PUSH
58840: LD_INT 1
58842: NEG
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: PUSH
58848: LD_INT 3
58850: PUSH
58851: LD_INT 2
58853: NEG
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: PUSH
58859: LD_INT 5
58861: PUSH
58862: LD_INT 2
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: PUSH
58869: EMPTY
58870: LIST
58871: LIST
58872: LIST
58873: LIST
58874: LIST
58875: LIST
58876: LIST
58877: LIST
58878: LIST
58879: LIST
58880: LIST
58881: LIST
58882: LIST
58883: LIST
58884: LIST
58885: LIST
58886: LIST
58887: LIST
58888: LIST
58889: LIST
58890: LIST
58891: LIST
58892: LIST
58893: LIST
58894: LIST
58895: LIST
58896: LIST
58897: LIST
58898: LIST
58899: LIST
58900: LIST
58901: LIST
58902: LIST
58903: LIST
58904: LIST
58905: LIST
58906: LIST
58907: LIST
58908: LIST
58909: LIST
58910: LIST
58911: LIST
58912: LIST
58913: LIST
58914: LIST
58915: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
58916: LD_ADDR_VAR 0 32
58920: PUSH
58921: LD_INT 4
58923: NEG
58924: PUSH
58925: LD_INT 0
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PUSH
58932: LD_INT 4
58934: NEG
58935: PUSH
58936: LD_INT 1
58938: NEG
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: PUSH
58944: LD_INT 3
58946: NEG
58947: PUSH
58948: LD_INT 0
58950: PUSH
58951: EMPTY
58952: LIST
58953: LIST
58954: PUSH
58955: LD_INT 3
58957: NEG
58958: PUSH
58959: LD_INT 1
58961: PUSH
58962: EMPTY
58963: LIST
58964: LIST
58965: PUSH
58966: LD_INT 4
58968: NEG
58969: PUSH
58970: LD_INT 1
58972: PUSH
58973: EMPTY
58974: LIST
58975: LIST
58976: PUSH
58977: LD_INT 5
58979: NEG
58980: PUSH
58981: LD_INT 0
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: PUSH
58988: LD_INT 5
58990: NEG
58991: PUSH
58992: LD_INT 1
58994: NEG
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: PUSH
59000: LD_INT 5
59002: NEG
59003: PUSH
59004: LD_INT 2
59006: NEG
59007: PUSH
59008: EMPTY
59009: LIST
59010: LIST
59011: PUSH
59012: LD_INT 3
59014: NEG
59015: PUSH
59016: LD_INT 2
59018: PUSH
59019: EMPTY
59020: LIST
59021: LIST
59022: PUSH
59023: LD_INT 3
59025: NEG
59026: PUSH
59027: LD_INT 3
59029: NEG
59030: PUSH
59031: EMPTY
59032: LIST
59033: LIST
59034: PUSH
59035: LD_INT 3
59037: NEG
59038: PUSH
59039: LD_INT 4
59041: NEG
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: PUSH
59047: LD_INT 2
59049: NEG
59050: PUSH
59051: LD_INT 3
59053: NEG
59054: PUSH
59055: EMPTY
59056: LIST
59057: LIST
59058: PUSH
59059: LD_INT 2
59061: NEG
59062: PUSH
59063: LD_INT 2
59065: NEG
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: LD_INT 3
59073: NEG
59074: PUSH
59075: LD_INT 2
59077: NEG
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: LD_INT 4
59085: NEG
59086: PUSH
59087: LD_INT 3
59089: NEG
59090: PUSH
59091: EMPTY
59092: LIST
59093: LIST
59094: PUSH
59095: LD_INT 4
59097: NEG
59098: PUSH
59099: LD_INT 4
59101: NEG
59102: PUSH
59103: EMPTY
59104: LIST
59105: LIST
59106: PUSH
59107: LD_INT 2
59109: NEG
59110: PUSH
59111: LD_INT 4
59113: NEG
59114: PUSH
59115: EMPTY
59116: LIST
59117: LIST
59118: PUSH
59119: LD_INT 4
59121: NEG
59122: PUSH
59123: LD_INT 2
59125: NEG
59126: PUSH
59127: EMPTY
59128: LIST
59129: LIST
59130: PUSH
59131: LD_INT 0
59133: PUSH
59134: LD_INT 4
59136: NEG
59137: PUSH
59138: EMPTY
59139: LIST
59140: LIST
59141: PUSH
59142: LD_INT 0
59144: PUSH
59145: LD_INT 5
59147: NEG
59148: PUSH
59149: EMPTY
59150: LIST
59151: LIST
59152: PUSH
59153: LD_INT 1
59155: PUSH
59156: LD_INT 4
59158: NEG
59159: PUSH
59160: EMPTY
59161: LIST
59162: LIST
59163: PUSH
59164: LD_INT 1
59166: PUSH
59167: LD_INT 3
59169: NEG
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: PUSH
59175: LD_INT 0
59177: PUSH
59178: LD_INT 3
59180: NEG
59181: PUSH
59182: EMPTY
59183: LIST
59184: LIST
59185: PUSH
59186: LD_INT 1
59188: NEG
59189: PUSH
59190: LD_INT 4
59192: NEG
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: PUSH
59198: LD_INT 1
59200: NEG
59201: PUSH
59202: LD_INT 5
59204: NEG
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: PUSH
59210: LD_INT 2
59212: PUSH
59213: LD_INT 3
59215: NEG
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: LD_INT 2
59223: NEG
59224: PUSH
59225: LD_INT 5
59227: NEG
59228: PUSH
59229: EMPTY
59230: LIST
59231: LIST
59232: PUSH
59233: LD_INT 3
59235: PUSH
59236: LD_INT 0
59238: PUSH
59239: EMPTY
59240: LIST
59241: LIST
59242: PUSH
59243: LD_INT 3
59245: PUSH
59246: LD_INT 1
59248: NEG
59249: PUSH
59250: EMPTY
59251: LIST
59252: LIST
59253: PUSH
59254: LD_INT 4
59256: PUSH
59257: LD_INT 0
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: PUSH
59264: LD_INT 4
59266: PUSH
59267: LD_INT 1
59269: PUSH
59270: EMPTY
59271: LIST
59272: LIST
59273: PUSH
59274: LD_INT 3
59276: PUSH
59277: LD_INT 1
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: PUSH
59284: LD_INT 2
59286: PUSH
59287: LD_INT 0
59289: PUSH
59290: EMPTY
59291: LIST
59292: LIST
59293: PUSH
59294: LD_INT 2
59296: PUSH
59297: LD_INT 1
59299: NEG
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: PUSH
59305: LD_INT 2
59307: PUSH
59308: LD_INT 2
59310: NEG
59311: PUSH
59312: EMPTY
59313: LIST
59314: LIST
59315: PUSH
59316: LD_INT 4
59318: PUSH
59319: LD_INT 2
59321: PUSH
59322: EMPTY
59323: LIST
59324: LIST
59325: PUSH
59326: LD_INT 4
59328: PUSH
59329: LD_INT 4
59331: PUSH
59332: EMPTY
59333: LIST
59334: LIST
59335: PUSH
59336: LD_INT 4
59338: PUSH
59339: LD_INT 3
59341: PUSH
59342: EMPTY
59343: LIST
59344: LIST
59345: PUSH
59346: LD_INT 5
59348: PUSH
59349: LD_INT 4
59351: PUSH
59352: EMPTY
59353: LIST
59354: LIST
59355: PUSH
59356: LD_INT 5
59358: PUSH
59359: LD_INT 5
59361: PUSH
59362: EMPTY
59363: LIST
59364: LIST
59365: PUSH
59366: LD_INT 4
59368: PUSH
59369: LD_INT 5
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: PUSH
59376: LD_INT 3
59378: PUSH
59379: LD_INT 4
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: PUSH
59386: LD_INT 3
59388: PUSH
59389: LD_INT 3
59391: PUSH
59392: EMPTY
59393: LIST
59394: LIST
59395: PUSH
59396: LD_INT 5
59398: PUSH
59399: LD_INT 3
59401: PUSH
59402: EMPTY
59403: LIST
59404: LIST
59405: PUSH
59406: LD_INT 3
59408: PUSH
59409: LD_INT 5
59411: PUSH
59412: EMPTY
59413: LIST
59414: LIST
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: LIST
59420: LIST
59421: LIST
59422: LIST
59423: LIST
59424: LIST
59425: LIST
59426: LIST
59427: LIST
59428: LIST
59429: LIST
59430: LIST
59431: LIST
59432: LIST
59433: LIST
59434: LIST
59435: LIST
59436: LIST
59437: LIST
59438: LIST
59439: LIST
59440: LIST
59441: LIST
59442: LIST
59443: LIST
59444: LIST
59445: LIST
59446: LIST
59447: LIST
59448: LIST
59449: LIST
59450: LIST
59451: LIST
59452: LIST
59453: LIST
59454: LIST
59455: LIST
59456: LIST
59457: LIST
59458: LIST
59459: LIST
59460: LIST
59461: LIST
59462: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
59463: LD_ADDR_VAR 0 33
59467: PUSH
59468: LD_INT 4
59470: NEG
59471: PUSH
59472: LD_INT 4
59474: NEG
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: PUSH
59480: LD_INT 4
59482: NEG
59483: PUSH
59484: LD_INT 5
59486: NEG
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: PUSH
59492: LD_INT 3
59494: NEG
59495: PUSH
59496: LD_INT 4
59498: NEG
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: PUSH
59504: LD_INT 3
59506: NEG
59507: PUSH
59508: LD_INT 3
59510: NEG
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: LD_INT 4
59518: NEG
59519: PUSH
59520: LD_INT 3
59522: NEG
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: PUSH
59528: LD_INT 5
59530: NEG
59531: PUSH
59532: LD_INT 4
59534: NEG
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: PUSH
59540: LD_INT 5
59542: NEG
59543: PUSH
59544: LD_INT 5
59546: NEG
59547: PUSH
59548: EMPTY
59549: LIST
59550: LIST
59551: PUSH
59552: LD_INT 3
59554: NEG
59555: PUSH
59556: LD_INT 5
59558: NEG
59559: PUSH
59560: EMPTY
59561: LIST
59562: LIST
59563: PUSH
59564: LD_INT 5
59566: NEG
59567: PUSH
59568: LD_INT 3
59570: NEG
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: PUSH
59576: LD_INT 0
59578: PUSH
59579: LD_INT 3
59581: NEG
59582: PUSH
59583: EMPTY
59584: LIST
59585: LIST
59586: PUSH
59587: LD_INT 0
59589: PUSH
59590: LD_INT 4
59592: NEG
59593: PUSH
59594: EMPTY
59595: LIST
59596: LIST
59597: PUSH
59598: LD_INT 1
59600: PUSH
59601: LD_INT 3
59603: NEG
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: PUSH
59609: LD_INT 1
59611: PUSH
59612: LD_INT 2
59614: NEG
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: PUSH
59620: LD_INT 0
59622: PUSH
59623: LD_INT 2
59625: NEG
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: PUSH
59631: LD_INT 1
59633: NEG
59634: PUSH
59635: LD_INT 3
59637: NEG
59638: PUSH
59639: EMPTY
59640: LIST
59641: LIST
59642: PUSH
59643: LD_INT 1
59645: NEG
59646: PUSH
59647: LD_INT 4
59649: NEG
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: PUSH
59655: LD_INT 2
59657: PUSH
59658: LD_INT 2
59660: NEG
59661: PUSH
59662: EMPTY
59663: LIST
59664: LIST
59665: PUSH
59666: LD_INT 2
59668: NEG
59669: PUSH
59670: LD_INT 4
59672: NEG
59673: PUSH
59674: EMPTY
59675: LIST
59676: LIST
59677: PUSH
59678: LD_INT 4
59680: PUSH
59681: LD_INT 0
59683: PUSH
59684: EMPTY
59685: LIST
59686: LIST
59687: PUSH
59688: LD_INT 4
59690: PUSH
59691: LD_INT 1
59693: NEG
59694: PUSH
59695: EMPTY
59696: LIST
59697: LIST
59698: PUSH
59699: LD_INT 5
59701: PUSH
59702: LD_INT 0
59704: PUSH
59705: EMPTY
59706: LIST
59707: LIST
59708: PUSH
59709: LD_INT 5
59711: PUSH
59712: LD_INT 1
59714: PUSH
59715: EMPTY
59716: LIST
59717: LIST
59718: PUSH
59719: LD_INT 4
59721: PUSH
59722: LD_INT 1
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: PUSH
59729: LD_INT 3
59731: PUSH
59732: LD_INT 0
59734: PUSH
59735: EMPTY
59736: LIST
59737: LIST
59738: PUSH
59739: LD_INT 3
59741: PUSH
59742: LD_INT 1
59744: NEG
59745: PUSH
59746: EMPTY
59747: LIST
59748: LIST
59749: PUSH
59750: LD_INT 3
59752: PUSH
59753: LD_INT 2
59755: NEG
59756: PUSH
59757: EMPTY
59758: LIST
59759: LIST
59760: PUSH
59761: LD_INT 5
59763: PUSH
59764: LD_INT 2
59766: PUSH
59767: EMPTY
59768: LIST
59769: LIST
59770: PUSH
59771: LD_INT 3
59773: PUSH
59774: LD_INT 3
59776: PUSH
59777: EMPTY
59778: LIST
59779: LIST
59780: PUSH
59781: LD_INT 3
59783: PUSH
59784: LD_INT 2
59786: PUSH
59787: EMPTY
59788: LIST
59789: LIST
59790: PUSH
59791: LD_INT 4
59793: PUSH
59794: LD_INT 3
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: PUSH
59801: LD_INT 4
59803: PUSH
59804: LD_INT 4
59806: PUSH
59807: EMPTY
59808: LIST
59809: LIST
59810: PUSH
59811: LD_INT 3
59813: PUSH
59814: LD_INT 4
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: PUSH
59821: LD_INT 2
59823: PUSH
59824: LD_INT 3
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: PUSH
59831: LD_INT 2
59833: PUSH
59834: LD_INT 2
59836: PUSH
59837: EMPTY
59838: LIST
59839: LIST
59840: PUSH
59841: LD_INT 4
59843: PUSH
59844: LD_INT 2
59846: PUSH
59847: EMPTY
59848: LIST
59849: LIST
59850: PUSH
59851: LD_INT 2
59853: PUSH
59854: LD_INT 4
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: PUSH
59861: LD_INT 0
59863: PUSH
59864: LD_INT 4
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: PUSH
59871: LD_INT 0
59873: PUSH
59874: LD_INT 3
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: PUSH
59881: LD_INT 1
59883: PUSH
59884: LD_INT 4
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: PUSH
59891: LD_INT 1
59893: PUSH
59894: LD_INT 5
59896: PUSH
59897: EMPTY
59898: LIST
59899: LIST
59900: PUSH
59901: LD_INT 0
59903: PUSH
59904: LD_INT 5
59906: PUSH
59907: EMPTY
59908: LIST
59909: LIST
59910: PUSH
59911: LD_INT 1
59913: NEG
59914: PUSH
59915: LD_INT 4
59917: PUSH
59918: EMPTY
59919: LIST
59920: LIST
59921: PUSH
59922: LD_INT 1
59924: NEG
59925: PUSH
59926: LD_INT 3
59928: PUSH
59929: EMPTY
59930: LIST
59931: LIST
59932: PUSH
59933: LD_INT 2
59935: PUSH
59936: LD_INT 5
59938: PUSH
59939: EMPTY
59940: LIST
59941: LIST
59942: PUSH
59943: LD_INT 2
59945: NEG
59946: PUSH
59947: LD_INT 3
59949: PUSH
59950: EMPTY
59951: LIST
59952: LIST
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: LIST
59958: LIST
59959: LIST
59960: LIST
59961: LIST
59962: LIST
59963: LIST
59964: LIST
59965: LIST
59966: LIST
59967: LIST
59968: LIST
59969: LIST
59970: LIST
59971: LIST
59972: LIST
59973: LIST
59974: LIST
59975: LIST
59976: LIST
59977: LIST
59978: LIST
59979: LIST
59980: LIST
59981: LIST
59982: LIST
59983: LIST
59984: LIST
59985: LIST
59986: LIST
59987: LIST
59988: LIST
59989: LIST
59990: LIST
59991: LIST
59992: LIST
59993: LIST
59994: LIST
59995: LIST
59996: LIST
59997: LIST
59998: LIST
59999: LIST
60000: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
60001: LD_ADDR_VAR 0 34
60005: PUSH
60006: LD_INT 0
60008: PUSH
60009: LD_INT 4
60011: NEG
60012: PUSH
60013: EMPTY
60014: LIST
60015: LIST
60016: PUSH
60017: LD_INT 0
60019: PUSH
60020: LD_INT 5
60022: NEG
60023: PUSH
60024: EMPTY
60025: LIST
60026: LIST
60027: PUSH
60028: LD_INT 1
60030: PUSH
60031: LD_INT 4
60033: NEG
60034: PUSH
60035: EMPTY
60036: LIST
60037: LIST
60038: PUSH
60039: LD_INT 1
60041: PUSH
60042: LD_INT 3
60044: NEG
60045: PUSH
60046: EMPTY
60047: LIST
60048: LIST
60049: PUSH
60050: LD_INT 0
60052: PUSH
60053: LD_INT 3
60055: NEG
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: PUSH
60061: LD_INT 1
60063: NEG
60064: PUSH
60065: LD_INT 4
60067: NEG
60068: PUSH
60069: EMPTY
60070: LIST
60071: LIST
60072: PUSH
60073: LD_INT 1
60075: NEG
60076: PUSH
60077: LD_INT 5
60079: NEG
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: PUSH
60085: LD_INT 2
60087: PUSH
60088: LD_INT 3
60090: NEG
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: PUSH
60096: LD_INT 2
60098: NEG
60099: PUSH
60100: LD_INT 5
60102: NEG
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PUSH
60108: LD_INT 3
60110: PUSH
60111: LD_INT 0
60113: PUSH
60114: EMPTY
60115: LIST
60116: LIST
60117: PUSH
60118: LD_INT 3
60120: PUSH
60121: LD_INT 1
60123: NEG
60124: PUSH
60125: EMPTY
60126: LIST
60127: LIST
60128: PUSH
60129: LD_INT 4
60131: PUSH
60132: LD_INT 0
60134: PUSH
60135: EMPTY
60136: LIST
60137: LIST
60138: PUSH
60139: LD_INT 4
60141: PUSH
60142: LD_INT 1
60144: PUSH
60145: EMPTY
60146: LIST
60147: LIST
60148: PUSH
60149: LD_INT 3
60151: PUSH
60152: LD_INT 1
60154: PUSH
60155: EMPTY
60156: LIST
60157: LIST
60158: PUSH
60159: LD_INT 2
60161: PUSH
60162: LD_INT 0
60164: PUSH
60165: EMPTY
60166: LIST
60167: LIST
60168: PUSH
60169: LD_INT 2
60171: PUSH
60172: LD_INT 1
60174: NEG
60175: PUSH
60176: EMPTY
60177: LIST
60178: LIST
60179: PUSH
60180: LD_INT 2
60182: PUSH
60183: LD_INT 2
60185: NEG
60186: PUSH
60187: EMPTY
60188: LIST
60189: LIST
60190: PUSH
60191: LD_INT 4
60193: PUSH
60194: LD_INT 2
60196: PUSH
60197: EMPTY
60198: LIST
60199: LIST
60200: PUSH
60201: LD_INT 4
60203: PUSH
60204: LD_INT 4
60206: PUSH
60207: EMPTY
60208: LIST
60209: LIST
60210: PUSH
60211: LD_INT 4
60213: PUSH
60214: LD_INT 3
60216: PUSH
60217: EMPTY
60218: LIST
60219: LIST
60220: PUSH
60221: LD_INT 5
60223: PUSH
60224: LD_INT 4
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: PUSH
60231: LD_INT 5
60233: PUSH
60234: LD_INT 5
60236: PUSH
60237: EMPTY
60238: LIST
60239: LIST
60240: PUSH
60241: LD_INT 4
60243: PUSH
60244: LD_INT 5
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: PUSH
60251: LD_INT 3
60253: PUSH
60254: LD_INT 4
60256: PUSH
60257: EMPTY
60258: LIST
60259: LIST
60260: PUSH
60261: LD_INT 3
60263: PUSH
60264: LD_INT 3
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: PUSH
60271: LD_INT 5
60273: PUSH
60274: LD_INT 3
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: PUSH
60281: LD_INT 3
60283: PUSH
60284: LD_INT 5
60286: PUSH
60287: EMPTY
60288: LIST
60289: LIST
60290: PUSH
60291: LD_INT 0
60293: PUSH
60294: LD_INT 3
60296: PUSH
60297: EMPTY
60298: LIST
60299: LIST
60300: PUSH
60301: LD_INT 0
60303: PUSH
60304: LD_INT 2
60306: PUSH
60307: EMPTY
60308: LIST
60309: LIST
60310: PUSH
60311: LD_INT 1
60313: PUSH
60314: LD_INT 3
60316: PUSH
60317: EMPTY
60318: LIST
60319: LIST
60320: PUSH
60321: LD_INT 1
60323: PUSH
60324: LD_INT 4
60326: PUSH
60327: EMPTY
60328: LIST
60329: LIST
60330: PUSH
60331: LD_INT 0
60333: PUSH
60334: LD_INT 4
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: PUSH
60341: LD_INT 1
60343: NEG
60344: PUSH
60345: LD_INT 3
60347: PUSH
60348: EMPTY
60349: LIST
60350: LIST
60351: PUSH
60352: LD_INT 1
60354: NEG
60355: PUSH
60356: LD_INT 2
60358: PUSH
60359: EMPTY
60360: LIST
60361: LIST
60362: PUSH
60363: LD_INT 2
60365: PUSH
60366: LD_INT 4
60368: PUSH
60369: EMPTY
60370: LIST
60371: LIST
60372: PUSH
60373: LD_INT 2
60375: NEG
60376: PUSH
60377: LD_INT 2
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: PUSH
60384: LD_INT 4
60386: NEG
60387: PUSH
60388: LD_INT 0
60390: PUSH
60391: EMPTY
60392: LIST
60393: LIST
60394: PUSH
60395: LD_INT 4
60397: NEG
60398: PUSH
60399: LD_INT 1
60401: NEG
60402: PUSH
60403: EMPTY
60404: LIST
60405: LIST
60406: PUSH
60407: LD_INT 3
60409: NEG
60410: PUSH
60411: LD_INT 0
60413: PUSH
60414: EMPTY
60415: LIST
60416: LIST
60417: PUSH
60418: LD_INT 3
60420: NEG
60421: PUSH
60422: LD_INT 1
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: PUSH
60429: LD_INT 4
60431: NEG
60432: PUSH
60433: LD_INT 1
60435: PUSH
60436: EMPTY
60437: LIST
60438: LIST
60439: PUSH
60440: LD_INT 5
60442: NEG
60443: PUSH
60444: LD_INT 0
60446: PUSH
60447: EMPTY
60448: LIST
60449: LIST
60450: PUSH
60451: LD_INT 5
60453: NEG
60454: PUSH
60455: LD_INT 1
60457: NEG
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: PUSH
60463: LD_INT 5
60465: NEG
60466: PUSH
60467: LD_INT 2
60469: NEG
60470: PUSH
60471: EMPTY
60472: LIST
60473: LIST
60474: PUSH
60475: LD_INT 3
60477: NEG
60478: PUSH
60479: LD_INT 2
60481: PUSH
60482: EMPTY
60483: LIST
60484: LIST
60485: PUSH
60486: EMPTY
60487: LIST
60488: LIST
60489: LIST
60490: LIST
60491: LIST
60492: LIST
60493: LIST
60494: LIST
60495: LIST
60496: LIST
60497: LIST
60498: LIST
60499: LIST
60500: LIST
60501: LIST
60502: LIST
60503: LIST
60504: LIST
60505: LIST
60506: LIST
60507: LIST
60508: LIST
60509: LIST
60510: LIST
60511: LIST
60512: LIST
60513: LIST
60514: LIST
60515: LIST
60516: LIST
60517: LIST
60518: LIST
60519: LIST
60520: LIST
60521: LIST
60522: LIST
60523: LIST
60524: LIST
60525: LIST
60526: LIST
60527: LIST
60528: LIST
60529: LIST
60530: LIST
60531: LIST
60532: ST_TO_ADDR
// end ; end ;
60533: GO 60536
60535: POP
// case btype of b_depot , b_warehouse :
60536: LD_VAR 0 1
60540: PUSH
60541: LD_INT 0
60543: DOUBLE
60544: EQUAL
60545: IFTRUE 60555
60547: LD_INT 1
60549: DOUBLE
60550: EQUAL
60551: IFTRUE 60555
60553: GO 60756
60555: POP
// case nation of nation_american :
60556: LD_VAR 0 5
60560: PUSH
60561: LD_INT 1
60563: DOUBLE
60564: EQUAL
60565: IFTRUE 60569
60567: GO 60625
60569: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
60570: LD_ADDR_VAR 0 9
60574: PUSH
60575: LD_VAR 0 11
60579: PUSH
60580: LD_VAR 0 12
60584: PUSH
60585: LD_VAR 0 13
60589: PUSH
60590: LD_VAR 0 14
60594: PUSH
60595: LD_VAR 0 15
60599: PUSH
60600: LD_VAR 0 16
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: LIST
60609: LIST
60610: LIST
60611: LIST
60612: PUSH
60613: LD_VAR 0 4
60617: PUSH
60618: LD_INT 1
60620: PLUS
60621: ARRAY
60622: ST_TO_ADDR
60623: GO 60754
60625: LD_INT 2
60627: DOUBLE
60628: EQUAL
60629: IFTRUE 60633
60631: GO 60689
60633: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
60634: LD_ADDR_VAR 0 9
60638: PUSH
60639: LD_VAR 0 17
60643: PUSH
60644: LD_VAR 0 18
60648: PUSH
60649: LD_VAR 0 19
60653: PUSH
60654: LD_VAR 0 20
60658: PUSH
60659: LD_VAR 0 21
60663: PUSH
60664: LD_VAR 0 22
60668: PUSH
60669: EMPTY
60670: LIST
60671: LIST
60672: LIST
60673: LIST
60674: LIST
60675: LIST
60676: PUSH
60677: LD_VAR 0 4
60681: PUSH
60682: LD_INT 1
60684: PLUS
60685: ARRAY
60686: ST_TO_ADDR
60687: GO 60754
60689: LD_INT 3
60691: DOUBLE
60692: EQUAL
60693: IFTRUE 60697
60695: GO 60753
60697: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
60698: LD_ADDR_VAR 0 9
60702: PUSH
60703: LD_VAR 0 23
60707: PUSH
60708: LD_VAR 0 24
60712: PUSH
60713: LD_VAR 0 25
60717: PUSH
60718: LD_VAR 0 26
60722: PUSH
60723: LD_VAR 0 27
60727: PUSH
60728: LD_VAR 0 28
60732: PUSH
60733: EMPTY
60734: LIST
60735: LIST
60736: LIST
60737: LIST
60738: LIST
60739: LIST
60740: PUSH
60741: LD_VAR 0 4
60745: PUSH
60746: LD_INT 1
60748: PLUS
60749: ARRAY
60750: ST_TO_ADDR
60751: GO 60754
60753: POP
60754: GO 61309
60756: LD_INT 2
60758: DOUBLE
60759: EQUAL
60760: IFTRUE 60770
60762: LD_INT 3
60764: DOUBLE
60765: EQUAL
60766: IFTRUE 60770
60768: GO 60826
60770: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
60771: LD_ADDR_VAR 0 9
60775: PUSH
60776: LD_VAR 0 29
60780: PUSH
60781: LD_VAR 0 30
60785: PUSH
60786: LD_VAR 0 31
60790: PUSH
60791: LD_VAR 0 32
60795: PUSH
60796: LD_VAR 0 33
60800: PUSH
60801: LD_VAR 0 34
60805: PUSH
60806: EMPTY
60807: LIST
60808: LIST
60809: LIST
60810: LIST
60811: LIST
60812: LIST
60813: PUSH
60814: LD_VAR 0 4
60818: PUSH
60819: LD_INT 1
60821: PLUS
60822: ARRAY
60823: ST_TO_ADDR
60824: GO 61309
60826: LD_INT 16
60828: DOUBLE
60829: EQUAL
60830: IFTRUE 60888
60832: LD_INT 17
60834: DOUBLE
60835: EQUAL
60836: IFTRUE 60888
60838: LD_INT 18
60840: DOUBLE
60841: EQUAL
60842: IFTRUE 60888
60844: LD_INT 19
60846: DOUBLE
60847: EQUAL
60848: IFTRUE 60888
60850: LD_INT 22
60852: DOUBLE
60853: EQUAL
60854: IFTRUE 60888
60856: LD_INT 20
60858: DOUBLE
60859: EQUAL
60860: IFTRUE 60888
60862: LD_INT 21
60864: DOUBLE
60865: EQUAL
60866: IFTRUE 60888
60868: LD_INT 23
60870: DOUBLE
60871: EQUAL
60872: IFTRUE 60888
60874: LD_INT 24
60876: DOUBLE
60877: EQUAL
60878: IFTRUE 60888
60880: LD_INT 25
60882: DOUBLE
60883: EQUAL
60884: IFTRUE 60888
60886: GO 60944
60888: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
60889: LD_ADDR_VAR 0 9
60893: PUSH
60894: LD_VAR 0 35
60898: PUSH
60899: LD_VAR 0 36
60903: PUSH
60904: LD_VAR 0 37
60908: PUSH
60909: LD_VAR 0 38
60913: PUSH
60914: LD_VAR 0 39
60918: PUSH
60919: LD_VAR 0 40
60923: PUSH
60924: EMPTY
60925: LIST
60926: LIST
60927: LIST
60928: LIST
60929: LIST
60930: LIST
60931: PUSH
60932: LD_VAR 0 4
60936: PUSH
60937: LD_INT 1
60939: PLUS
60940: ARRAY
60941: ST_TO_ADDR
60942: GO 61309
60944: LD_INT 6
60946: DOUBLE
60947: EQUAL
60948: IFTRUE 61000
60950: LD_INT 7
60952: DOUBLE
60953: EQUAL
60954: IFTRUE 61000
60956: LD_INT 8
60958: DOUBLE
60959: EQUAL
60960: IFTRUE 61000
60962: LD_INT 13
60964: DOUBLE
60965: EQUAL
60966: IFTRUE 61000
60968: LD_INT 12
60970: DOUBLE
60971: EQUAL
60972: IFTRUE 61000
60974: LD_INT 15
60976: DOUBLE
60977: EQUAL
60978: IFTRUE 61000
60980: LD_INT 11
60982: DOUBLE
60983: EQUAL
60984: IFTRUE 61000
60986: LD_INT 14
60988: DOUBLE
60989: EQUAL
60990: IFTRUE 61000
60992: LD_INT 10
60994: DOUBLE
60995: EQUAL
60996: IFTRUE 61000
60998: GO 61056
61000: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
61001: LD_ADDR_VAR 0 9
61005: PUSH
61006: LD_VAR 0 41
61010: PUSH
61011: LD_VAR 0 42
61015: PUSH
61016: LD_VAR 0 43
61020: PUSH
61021: LD_VAR 0 44
61025: PUSH
61026: LD_VAR 0 45
61030: PUSH
61031: LD_VAR 0 46
61035: PUSH
61036: EMPTY
61037: LIST
61038: LIST
61039: LIST
61040: LIST
61041: LIST
61042: LIST
61043: PUSH
61044: LD_VAR 0 4
61048: PUSH
61049: LD_INT 1
61051: PLUS
61052: ARRAY
61053: ST_TO_ADDR
61054: GO 61309
61056: LD_INT 36
61058: DOUBLE
61059: EQUAL
61060: IFTRUE 61064
61062: GO 61120
61064: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
61065: LD_ADDR_VAR 0 9
61069: PUSH
61070: LD_VAR 0 47
61074: PUSH
61075: LD_VAR 0 48
61079: PUSH
61080: LD_VAR 0 49
61084: PUSH
61085: LD_VAR 0 50
61089: PUSH
61090: LD_VAR 0 51
61094: PUSH
61095: LD_VAR 0 52
61099: PUSH
61100: EMPTY
61101: LIST
61102: LIST
61103: LIST
61104: LIST
61105: LIST
61106: LIST
61107: PUSH
61108: LD_VAR 0 4
61112: PUSH
61113: LD_INT 1
61115: PLUS
61116: ARRAY
61117: ST_TO_ADDR
61118: GO 61309
61120: LD_INT 4
61122: DOUBLE
61123: EQUAL
61124: IFTRUE 61146
61126: LD_INT 5
61128: DOUBLE
61129: EQUAL
61130: IFTRUE 61146
61132: LD_INT 34
61134: DOUBLE
61135: EQUAL
61136: IFTRUE 61146
61138: LD_INT 37
61140: DOUBLE
61141: EQUAL
61142: IFTRUE 61146
61144: GO 61202
61146: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
61147: LD_ADDR_VAR 0 9
61151: PUSH
61152: LD_VAR 0 53
61156: PUSH
61157: LD_VAR 0 54
61161: PUSH
61162: LD_VAR 0 55
61166: PUSH
61167: LD_VAR 0 56
61171: PUSH
61172: LD_VAR 0 57
61176: PUSH
61177: LD_VAR 0 58
61181: PUSH
61182: EMPTY
61183: LIST
61184: LIST
61185: LIST
61186: LIST
61187: LIST
61188: LIST
61189: PUSH
61190: LD_VAR 0 4
61194: PUSH
61195: LD_INT 1
61197: PLUS
61198: ARRAY
61199: ST_TO_ADDR
61200: GO 61309
61202: LD_INT 31
61204: DOUBLE
61205: EQUAL
61206: IFTRUE 61252
61208: LD_INT 32
61210: DOUBLE
61211: EQUAL
61212: IFTRUE 61252
61214: LD_INT 33
61216: DOUBLE
61217: EQUAL
61218: IFTRUE 61252
61220: LD_INT 27
61222: DOUBLE
61223: EQUAL
61224: IFTRUE 61252
61226: LD_INT 26
61228: DOUBLE
61229: EQUAL
61230: IFTRUE 61252
61232: LD_INT 28
61234: DOUBLE
61235: EQUAL
61236: IFTRUE 61252
61238: LD_INT 29
61240: DOUBLE
61241: EQUAL
61242: IFTRUE 61252
61244: LD_INT 30
61246: DOUBLE
61247: EQUAL
61248: IFTRUE 61252
61250: GO 61308
61252: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
61253: LD_ADDR_VAR 0 9
61257: PUSH
61258: LD_VAR 0 59
61262: PUSH
61263: LD_VAR 0 60
61267: PUSH
61268: LD_VAR 0 61
61272: PUSH
61273: LD_VAR 0 62
61277: PUSH
61278: LD_VAR 0 63
61282: PUSH
61283: LD_VAR 0 64
61287: PUSH
61288: EMPTY
61289: LIST
61290: LIST
61291: LIST
61292: LIST
61293: LIST
61294: LIST
61295: PUSH
61296: LD_VAR 0 4
61300: PUSH
61301: LD_INT 1
61303: PLUS
61304: ARRAY
61305: ST_TO_ADDR
61306: GO 61309
61308: POP
// temp_list2 = [ ] ;
61309: LD_ADDR_VAR 0 10
61313: PUSH
61314: EMPTY
61315: ST_TO_ADDR
// for i in temp_list do
61316: LD_ADDR_VAR 0 8
61320: PUSH
61321: LD_VAR 0 9
61325: PUSH
61326: FOR_IN
61327: IFFALSE 61379
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
61329: LD_ADDR_VAR 0 10
61333: PUSH
61334: LD_VAR 0 10
61338: PUSH
61339: LD_VAR 0 8
61343: PUSH
61344: LD_INT 1
61346: ARRAY
61347: PUSH
61348: LD_VAR 0 2
61352: PLUS
61353: PUSH
61354: LD_VAR 0 8
61358: PUSH
61359: LD_INT 2
61361: ARRAY
61362: PUSH
61363: LD_VAR 0 3
61367: PLUS
61368: PUSH
61369: EMPTY
61370: LIST
61371: LIST
61372: PUSH
61373: EMPTY
61374: LIST
61375: ADD
61376: ST_TO_ADDR
61377: GO 61326
61379: POP
61380: POP
// result = temp_list2 ;
61381: LD_ADDR_VAR 0 7
61385: PUSH
61386: LD_VAR 0 10
61390: ST_TO_ADDR
// end ;
61391: LD_VAR 0 7
61395: RET
// export function EnemyInRange ( unit , dist ) ; begin
61396: LD_INT 0
61398: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
61399: LD_ADDR_VAR 0 3
61403: PUSH
61404: LD_VAR 0 1
61408: PPUSH
61409: CALL_OW 255
61413: PPUSH
61414: LD_VAR 0 1
61418: PPUSH
61419: CALL_OW 250
61423: PPUSH
61424: LD_VAR 0 1
61428: PPUSH
61429: CALL_OW 251
61433: PPUSH
61434: LD_VAR 0 2
61438: PPUSH
61439: CALL 34653 0 4
61443: PUSH
61444: LD_INT 4
61446: ARRAY
61447: ST_TO_ADDR
// end ;
61448: LD_VAR 0 3
61452: RET
// export function PlayerSeeMe ( unit ) ; begin
61453: LD_INT 0
61455: PPUSH
// result := See ( your_side , unit ) ;
61456: LD_ADDR_VAR 0 2
61460: PUSH
61461: LD_OWVAR 2
61465: PPUSH
61466: LD_VAR 0 1
61470: PPUSH
61471: CALL_OW 292
61475: ST_TO_ADDR
// end ;
61476: LD_VAR 0 2
61480: RET
// export function ReverseDir ( unit ) ; begin
61481: LD_INT 0
61483: PPUSH
// if not unit then
61484: LD_VAR 0 1
61488: NOT
61489: IFFALSE 61493
// exit ;
61491: GO 61516
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
61493: LD_ADDR_VAR 0 2
61497: PUSH
61498: LD_VAR 0 1
61502: PPUSH
61503: CALL_OW 254
61507: PUSH
61508: LD_INT 3
61510: PLUS
61511: PUSH
61512: LD_INT 6
61514: MOD
61515: ST_TO_ADDR
// end ;
61516: LD_VAR 0 2
61520: RET
// export function ReverseArray ( array ) ; var i ; begin
61521: LD_INT 0
61523: PPUSH
61524: PPUSH
// if not array then
61525: LD_VAR 0 1
61529: NOT
61530: IFFALSE 61534
// exit ;
61532: GO 61589
// result := [ ] ;
61534: LD_ADDR_VAR 0 2
61538: PUSH
61539: EMPTY
61540: ST_TO_ADDR
// for i := array downto 1 do
61541: LD_ADDR_VAR 0 3
61545: PUSH
61546: DOUBLE
61547: LD_VAR 0 1
61551: INC
61552: ST_TO_ADDR
61553: LD_INT 1
61555: PUSH
61556: FOR_DOWNTO
61557: IFFALSE 61587
// result := Join ( result , array [ i ] ) ;
61559: LD_ADDR_VAR 0 2
61563: PUSH
61564: LD_VAR 0 2
61568: PPUSH
61569: LD_VAR 0 1
61573: PUSH
61574: LD_VAR 0 3
61578: ARRAY
61579: PPUSH
61580: CALL 66431 0 2
61584: ST_TO_ADDR
61585: GO 61556
61587: POP
61588: POP
// end ;
61589: LD_VAR 0 2
61593: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
61594: LD_INT 0
61596: PPUSH
61597: PPUSH
61598: PPUSH
61599: PPUSH
61600: PPUSH
61601: PPUSH
// if not unit or not hexes then
61602: LD_VAR 0 1
61606: NOT
61607: IFTRUE 61616
61609: PUSH
61610: LD_VAR 0 2
61614: NOT
61615: OR
61616: IFFALSE 61620
// exit ;
61618: GO 61743
// dist := 9999 ;
61620: LD_ADDR_VAR 0 5
61624: PUSH
61625: LD_INT 9999
61627: ST_TO_ADDR
// for i = 1 to hexes do
61628: LD_ADDR_VAR 0 4
61632: PUSH
61633: DOUBLE
61634: LD_INT 1
61636: DEC
61637: ST_TO_ADDR
61638: LD_VAR 0 2
61642: PUSH
61643: FOR_TO
61644: IFFALSE 61731
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
61646: LD_ADDR_VAR 0 6
61650: PUSH
61651: LD_VAR 0 1
61655: PPUSH
61656: LD_VAR 0 2
61660: PUSH
61661: LD_VAR 0 4
61665: ARRAY
61666: PUSH
61667: LD_INT 1
61669: ARRAY
61670: PPUSH
61671: LD_VAR 0 2
61675: PUSH
61676: LD_VAR 0 4
61680: ARRAY
61681: PUSH
61682: LD_INT 2
61684: ARRAY
61685: PPUSH
61686: CALL_OW 297
61690: ST_TO_ADDR
// if tdist < dist then
61691: LD_VAR 0 6
61695: PUSH
61696: LD_VAR 0 5
61700: LESS
61701: IFFALSE 61729
// begin hex := hexes [ i ] ;
61703: LD_ADDR_VAR 0 8
61707: PUSH
61708: LD_VAR 0 2
61712: PUSH
61713: LD_VAR 0 4
61717: ARRAY
61718: ST_TO_ADDR
// dist := tdist ;
61719: LD_ADDR_VAR 0 5
61723: PUSH
61724: LD_VAR 0 6
61728: ST_TO_ADDR
// end ; end ;
61729: GO 61643
61731: POP
61732: POP
// result := hex ;
61733: LD_ADDR_VAR 0 3
61737: PUSH
61738: LD_VAR 0 8
61742: ST_TO_ADDR
// end ;
61743: LD_VAR 0 3
61747: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
61748: LD_INT 0
61750: PPUSH
61751: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
61752: LD_VAR 0 1
61756: NOT
61757: IFTRUE 61796
61759: PUSH
61760: LD_VAR 0 1
61764: PUSH
61765: LD_INT 21
61767: PUSH
61768: LD_INT 2
61770: PUSH
61771: EMPTY
61772: LIST
61773: LIST
61774: PUSH
61775: LD_INT 23
61777: PUSH
61778: LD_INT 2
61780: PUSH
61781: EMPTY
61782: LIST
61783: LIST
61784: PUSH
61785: EMPTY
61786: LIST
61787: LIST
61788: PPUSH
61789: CALL_OW 69
61793: IN
61794: NOT
61795: OR
61796: IFFALSE 61800
// exit ;
61798: GO 61847
// for i = 1 to 3 do
61800: LD_ADDR_VAR 0 3
61804: PUSH
61805: DOUBLE
61806: LD_INT 1
61808: DEC
61809: ST_TO_ADDR
61810: LD_INT 3
61812: PUSH
61813: FOR_TO
61814: IFFALSE 61845
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
61816: LD_VAR 0 1
61820: PPUSH
61821: CALL_OW 250
61825: PPUSH
61826: LD_VAR 0 1
61830: PPUSH
61831: CALL_OW 251
61835: PPUSH
61836: LD_INT 1
61838: PPUSH
61839: CALL_OW 453
61843: GO 61813
61845: POP
61846: POP
// end ;
61847: LD_VAR 0 2
61851: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
61852: LD_INT 0
61854: PPUSH
61855: PPUSH
61856: PPUSH
61857: PPUSH
61858: PPUSH
61859: PPUSH
// if not unit or not enemy_unit then
61860: LD_VAR 0 1
61864: NOT
61865: IFTRUE 61874
61867: PUSH
61868: LD_VAR 0 2
61872: NOT
61873: OR
61874: IFFALSE 61878
// exit ;
61876: GO 62349
// if GetLives ( i ) < 250 then
61878: LD_VAR 0 4
61882: PPUSH
61883: CALL_OW 256
61887: PUSH
61888: LD_INT 250
61890: LESS
61891: IFFALSE 61904
// begin ComAutodestruct ( i ) ;
61893: LD_VAR 0 4
61897: PPUSH
61898: CALL 61748 0 1
// exit ;
61902: GO 62349
// end ; x := GetX ( enemy_unit ) ;
61904: LD_ADDR_VAR 0 7
61908: PUSH
61909: LD_VAR 0 2
61913: PPUSH
61914: CALL_OW 250
61918: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
61919: LD_ADDR_VAR 0 8
61923: PUSH
61924: LD_VAR 0 2
61928: PPUSH
61929: CALL_OW 251
61933: ST_TO_ADDR
// if not x or not y then
61934: LD_VAR 0 7
61938: NOT
61939: IFTRUE 61948
61941: PUSH
61942: LD_VAR 0 8
61946: NOT
61947: OR
61948: IFFALSE 61952
// exit ;
61950: GO 62349
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
61952: LD_ADDR_VAR 0 6
61956: PUSH
61957: LD_VAR 0 7
61961: PPUSH
61962: LD_INT 0
61964: PPUSH
61965: LD_INT 4
61967: PPUSH
61968: CALL_OW 272
61972: PUSH
61973: LD_VAR 0 8
61977: PPUSH
61978: LD_INT 0
61980: PPUSH
61981: LD_INT 4
61983: PPUSH
61984: CALL_OW 273
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: PUSH
61993: LD_VAR 0 7
61997: PPUSH
61998: LD_INT 1
62000: PPUSH
62001: LD_INT 4
62003: PPUSH
62004: CALL_OW 272
62008: PUSH
62009: LD_VAR 0 8
62013: PPUSH
62014: LD_INT 1
62016: PPUSH
62017: LD_INT 4
62019: PPUSH
62020: CALL_OW 273
62024: PUSH
62025: EMPTY
62026: LIST
62027: LIST
62028: PUSH
62029: LD_VAR 0 7
62033: PPUSH
62034: LD_INT 2
62036: PPUSH
62037: LD_INT 4
62039: PPUSH
62040: CALL_OW 272
62044: PUSH
62045: LD_VAR 0 8
62049: PPUSH
62050: LD_INT 2
62052: PPUSH
62053: LD_INT 4
62055: PPUSH
62056: CALL_OW 273
62060: PUSH
62061: EMPTY
62062: LIST
62063: LIST
62064: PUSH
62065: LD_VAR 0 7
62069: PPUSH
62070: LD_INT 3
62072: PPUSH
62073: LD_INT 4
62075: PPUSH
62076: CALL_OW 272
62080: PUSH
62081: LD_VAR 0 8
62085: PPUSH
62086: LD_INT 3
62088: PPUSH
62089: LD_INT 4
62091: PPUSH
62092: CALL_OW 273
62096: PUSH
62097: EMPTY
62098: LIST
62099: LIST
62100: PUSH
62101: LD_VAR 0 7
62105: PPUSH
62106: LD_INT 4
62108: PPUSH
62109: LD_INT 4
62111: PPUSH
62112: CALL_OW 272
62116: PUSH
62117: LD_VAR 0 8
62121: PPUSH
62122: LD_INT 4
62124: PPUSH
62125: LD_INT 4
62127: PPUSH
62128: CALL_OW 273
62132: PUSH
62133: EMPTY
62134: LIST
62135: LIST
62136: PUSH
62137: LD_VAR 0 7
62141: PPUSH
62142: LD_INT 5
62144: PPUSH
62145: LD_INT 4
62147: PPUSH
62148: CALL_OW 272
62152: PUSH
62153: LD_VAR 0 8
62157: PPUSH
62158: LD_INT 5
62160: PPUSH
62161: LD_INT 4
62163: PPUSH
62164: CALL_OW 273
62168: PUSH
62169: EMPTY
62170: LIST
62171: LIST
62172: PUSH
62173: EMPTY
62174: LIST
62175: LIST
62176: LIST
62177: LIST
62178: LIST
62179: LIST
62180: ST_TO_ADDR
// for i = tmp downto 1 do
62181: LD_ADDR_VAR 0 4
62185: PUSH
62186: DOUBLE
62187: LD_VAR 0 6
62191: INC
62192: ST_TO_ADDR
62193: LD_INT 1
62195: PUSH
62196: FOR_DOWNTO
62197: IFFALSE 62300
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
62199: LD_VAR 0 6
62203: PUSH
62204: LD_VAR 0 4
62208: ARRAY
62209: PUSH
62210: LD_INT 1
62212: ARRAY
62213: PPUSH
62214: LD_VAR 0 6
62218: PUSH
62219: LD_VAR 0 4
62223: ARRAY
62224: PUSH
62225: LD_INT 2
62227: ARRAY
62228: PPUSH
62229: CALL_OW 488
62233: NOT
62234: IFTRUE 62276
62236: PUSH
62237: LD_VAR 0 6
62241: PUSH
62242: LD_VAR 0 4
62246: ARRAY
62247: PUSH
62248: LD_INT 1
62250: ARRAY
62251: PPUSH
62252: LD_VAR 0 6
62256: PUSH
62257: LD_VAR 0 4
62261: ARRAY
62262: PUSH
62263: LD_INT 2
62265: ARRAY
62266: PPUSH
62267: CALL_OW 428
62271: PUSH
62272: LD_INT 0
62274: NONEQUAL
62275: OR
62276: IFFALSE 62298
// tmp := Delete ( tmp , i ) ;
62278: LD_ADDR_VAR 0 6
62282: PUSH
62283: LD_VAR 0 6
62287: PPUSH
62288: LD_VAR 0 4
62292: PPUSH
62293: CALL_OW 3
62297: ST_TO_ADDR
62298: GO 62196
62300: POP
62301: POP
// j := GetClosestHex ( unit , tmp ) ;
62302: LD_ADDR_VAR 0 5
62306: PUSH
62307: LD_VAR 0 1
62311: PPUSH
62312: LD_VAR 0 6
62316: PPUSH
62317: CALL 61594 0 2
62321: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
62322: LD_VAR 0 1
62326: PPUSH
62327: LD_VAR 0 5
62331: PUSH
62332: LD_INT 1
62334: ARRAY
62335: PPUSH
62336: LD_VAR 0 5
62340: PUSH
62341: LD_INT 2
62343: ARRAY
62344: PPUSH
62345: CALL_OW 111
// end ;
62349: LD_VAR 0 3
62353: RET
// export function PrepareApemanSoldier ( ) ; begin
62354: LD_INT 0
62356: PPUSH
// uc_nation := 0 ;
62357: LD_ADDR_OWVAR 21
62361: PUSH
62362: LD_INT 0
62364: ST_TO_ADDR
// hc_sex := sex_male ;
62365: LD_ADDR_OWVAR 27
62369: PUSH
62370: LD_INT 1
62372: ST_TO_ADDR
// hc_name :=  ;
62373: LD_ADDR_OWVAR 26
62377: PUSH
62378: LD_STRING 
62380: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
62381: LD_ADDR_OWVAR 28
62385: PUSH
62386: LD_INT 15
62388: ST_TO_ADDR
// hc_gallery :=  ;
62389: LD_ADDR_OWVAR 33
62393: PUSH
62394: LD_STRING 
62396: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62397: LD_ADDR_OWVAR 31
62401: PUSH
62402: LD_INT 0
62404: PPUSH
62405: LD_INT 3
62407: PPUSH
62408: CALL_OW 12
62412: PUSH
62413: LD_INT 0
62415: PPUSH
62416: LD_INT 3
62418: PPUSH
62419: CALL_OW 12
62423: PUSH
62424: LD_INT 0
62426: PUSH
62427: LD_INT 0
62429: PUSH
62430: EMPTY
62431: LIST
62432: LIST
62433: LIST
62434: LIST
62435: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
62436: LD_ADDR_OWVAR 29
62440: PUSH
62441: LD_INT 12
62443: PUSH
62444: LD_INT 12
62446: PUSH
62447: EMPTY
62448: LIST
62449: LIST
62450: ST_TO_ADDR
// end ;
62451: LD_VAR 0 1
62455: RET
// export function PrepareApemanEngineer ( ) ; begin
62456: LD_INT 0
62458: PPUSH
// uc_nation := 0 ;
62459: LD_ADDR_OWVAR 21
62463: PUSH
62464: LD_INT 0
62466: ST_TO_ADDR
// hc_sex := sex_male ;
62467: LD_ADDR_OWVAR 27
62471: PUSH
62472: LD_INT 1
62474: ST_TO_ADDR
// hc_name :=  ;
62475: LD_ADDR_OWVAR 26
62479: PUSH
62480: LD_STRING 
62482: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
62483: LD_ADDR_OWVAR 28
62487: PUSH
62488: LD_INT 16
62490: ST_TO_ADDR
// hc_gallery :=  ;
62491: LD_ADDR_OWVAR 33
62495: PUSH
62496: LD_STRING 
62498: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62499: LD_ADDR_OWVAR 31
62503: PUSH
62504: LD_INT 0
62506: PPUSH
62507: LD_INT 3
62509: PPUSH
62510: CALL_OW 12
62514: PUSH
62515: LD_INT 0
62517: PPUSH
62518: LD_INT 3
62520: PPUSH
62521: CALL_OW 12
62525: PUSH
62526: LD_INT 0
62528: PUSH
62529: LD_INT 0
62531: PUSH
62532: EMPTY
62533: LIST
62534: LIST
62535: LIST
62536: LIST
62537: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
62538: LD_ADDR_OWVAR 29
62542: PUSH
62543: LD_INT 12
62545: PUSH
62546: LD_INT 12
62548: PUSH
62549: EMPTY
62550: LIST
62551: LIST
62552: ST_TO_ADDR
// end ;
62553: LD_VAR 0 1
62557: RET
// export function PrepareApeman ( agressivity ) ; begin
62558: LD_INT 0
62560: PPUSH
// uc_side := 0 ;
62561: LD_ADDR_OWVAR 20
62565: PUSH
62566: LD_INT 0
62568: ST_TO_ADDR
// uc_nation := 0 ;
62569: LD_ADDR_OWVAR 21
62573: PUSH
62574: LD_INT 0
62576: ST_TO_ADDR
// hc_sex := sex_male ;
62577: LD_ADDR_OWVAR 27
62581: PUSH
62582: LD_INT 1
62584: ST_TO_ADDR
// hc_class := class_apeman ;
62585: LD_ADDR_OWVAR 28
62589: PUSH
62590: LD_INT 12
62592: ST_TO_ADDR
// hc_gallery :=  ;
62593: LD_ADDR_OWVAR 33
62597: PUSH
62598: LD_STRING 
62600: ST_TO_ADDR
// hc_name :=  ;
62601: LD_ADDR_OWVAR 26
62605: PUSH
62606: LD_STRING 
62608: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
62609: LD_ADDR_OWVAR 29
62613: PUSH
62614: LD_INT 12
62616: PUSH
62617: LD_INT 12
62619: PUSH
62620: EMPTY
62621: LIST
62622: LIST
62623: ST_TO_ADDR
// if agressivity = 0 then
62624: LD_VAR 0 1
62628: PUSH
62629: LD_INT 0
62631: EQUAL
62632: IFFALSE 62644
// hc_agressivity := 0 else
62634: LD_ADDR_OWVAR 35
62638: PUSH
62639: LD_INT 0
62641: ST_TO_ADDR
62642: GO 62665
// hc_agressivity := rand ( - agressivity , agressivity ) ;
62644: LD_ADDR_OWVAR 35
62648: PUSH
62649: LD_VAR 0 1
62653: NEG
62654: PPUSH
62655: LD_VAR 0 1
62659: PPUSH
62660: CALL_OW 12
62664: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62665: LD_ADDR_OWVAR 31
62669: PUSH
62670: LD_INT 0
62672: PPUSH
62673: LD_INT 3
62675: PPUSH
62676: CALL_OW 12
62680: PUSH
62681: LD_INT 0
62683: PPUSH
62684: LD_INT 3
62686: PPUSH
62687: CALL_OW 12
62691: PUSH
62692: LD_INT 0
62694: PUSH
62695: LD_INT 0
62697: PUSH
62698: EMPTY
62699: LIST
62700: LIST
62701: LIST
62702: LIST
62703: ST_TO_ADDR
// end ;
62704: LD_VAR 0 2
62708: RET
// export function PrepareTiger ( agressivity ) ; begin
62709: LD_INT 0
62711: PPUSH
// uc_side := 0 ;
62712: LD_ADDR_OWVAR 20
62716: PUSH
62717: LD_INT 0
62719: ST_TO_ADDR
// uc_nation := 0 ;
62720: LD_ADDR_OWVAR 21
62724: PUSH
62725: LD_INT 0
62727: ST_TO_ADDR
// InitHc ;
62728: CALL_OW 19
// hc_class := class_tiger ;
62732: LD_ADDR_OWVAR 28
62736: PUSH
62737: LD_INT 14
62739: ST_TO_ADDR
// hc_gallery :=  ;
62740: LD_ADDR_OWVAR 33
62744: PUSH
62745: LD_STRING 
62747: ST_TO_ADDR
// hc_name :=  ;
62748: LD_ADDR_OWVAR 26
62752: PUSH
62753: LD_STRING 
62755: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
62756: LD_ADDR_OWVAR 35
62760: PUSH
62761: LD_VAR 0 1
62765: NEG
62766: PPUSH
62767: LD_VAR 0 1
62771: PPUSH
62772: CALL_OW 12
62776: ST_TO_ADDR
// end ;
62777: LD_VAR 0 2
62781: RET
// export function PrepareEnchidna ( ) ; begin
62782: LD_INT 0
62784: PPUSH
// uc_side := 0 ;
62785: LD_ADDR_OWVAR 20
62789: PUSH
62790: LD_INT 0
62792: ST_TO_ADDR
// uc_nation := 0 ;
62793: LD_ADDR_OWVAR 21
62797: PUSH
62798: LD_INT 0
62800: ST_TO_ADDR
// InitHc ;
62801: CALL_OW 19
// hc_class := class_baggie ;
62805: LD_ADDR_OWVAR 28
62809: PUSH
62810: LD_INT 13
62812: ST_TO_ADDR
// hc_gallery :=  ;
62813: LD_ADDR_OWVAR 33
62817: PUSH
62818: LD_STRING 
62820: ST_TO_ADDR
// hc_name :=  ;
62821: LD_ADDR_OWVAR 26
62825: PUSH
62826: LD_STRING 
62828: ST_TO_ADDR
// end ;
62829: LD_VAR 0 1
62833: RET
// export function PrepareFrog ( ) ; begin
62834: LD_INT 0
62836: PPUSH
// uc_side := 0 ;
62837: LD_ADDR_OWVAR 20
62841: PUSH
62842: LD_INT 0
62844: ST_TO_ADDR
// uc_nation := 0 ;
62845: LD_ADDR_OWVAR 21
62849: PUSH
62850: LD_INT 0
62852: ST_TO_ADDR
// InitHc ;
62853: CALL_OW 19
// hc_class := class_frog ;
62857: LD_ADDR_OWVAR 28
62861: PUSH
62862: LD_INT 19
62864: ST_TO_ADDR
// hc_gallery :=  ;
62865: LD_ADDR_OWVAR 33
62869: PUSH
62870: LD_STRING 
62872: ST_TO_ADDR
// hc_name :=  ;
62873: LD_ADDR_OWVAR 26
62877: PUSH
62878: LD_STRING 
62880: ST_TO_ADDR
// end ;
62881: LD_VAR 0 1
62885: RET
// export function PrepareFish ( ) ; begin
62886: LD_INT 0
62888: PPUSH
// uc_side := 0 ;
62889: LD_ADDR_OWVAR 20
62893: PUSH
62894: LD_INT 0
62896: ST_TO_ADDR
// uc_nation := 0 ;
62897: LD_ADDR_OWVAR 21
62901: PUSH
62902: LD_INT 0
62904: ST_TO_ADDR
// InitHc ;
62905: CALL_OW 19
// hc_class := class_fish ;
62909: LD_ADDR_OWVAR 28
62913: PUSH
62914: LD_INT 20
62916: ST_TO_ADDR
// hc_gallery :=  ;
62917: LD_ADDR_OWVAR 33
62921: PUSH
62922: LD_STRING 
62924: ST_TO_ADDR
// hc_name :=  ;
62925: LD_ADDR_OWVAR 26
62929: PUSH
62930: LD_STRING 
62932: ST_TO_ADDR
// end ;
62933: LD_VAR 0 1
62937: RET
// export function PrepareBird ( ) ; begin
62938: LD_INT 0
62940: PPUSH
// uc_side := 0 ;
62941: LD_ADDR_OWVAR 20
62945: PUSH
62946: LD_INT 0
62948: ST_TO_ADDR
// uc_nation := 0 ;
62949: LD_ADDR_OWVAR 21
62953: PUSH
62954: LD_INT 0
62956: ST_TO_ADDR
// InitHc ;
62957: CALL_OW 19
// hc_class := class_phororhacos ;
62961: LD_ADDR_OWVAR 28
62965: PUSH
62966: LD_INT 18
62968: ST_TO_ADDR
// hc_gallery :=  ;
62969: LD_ADDR_OWVAR 33
62973: PUSH
62974: LD_STRING 
62976: ST_TO_ADDR
// hc_name :=  ;
62977: LD_ADDR_OWVAR 26
62981: PUSH
62982: LD_STRING 
62984: ST_TO_ADDR
// end ;
62985: LD_VAR 0 1
62989: RET
// export function PrepareHorse ( ) ; begin
62990: LD_INT 0
62992: PPUSH
// uc_side := 0 ;
62993: LD_ADDR_OWVAR 20
62997: PUSH
62998: LD_INT 0
63000: ST_TO_ADDR
// uc_nation := 0 ;
63001: LD_ADDR_OWVAR 21
63005: PUSH
63006: LD_INT 0
63008: ST_TO_ADDR
// InitHc ;
63009: CALL_OW 19
// hc_class := class_horse ;
63013: LD_ADDR_OWVAR 28
63017: PUSH
63018: LD_INT 21
63020: ST_TO_ADDR
// hc_gallery :=  ;
63021: LD_ADDR_OWVAR 33
63025: PUSH
63026: LD_STRING 
63028: ST_TO_ADDR
// hc_name :=  ;
63029: LD_ADDR_OWVAR 26
63033: PUSH
63034: LD_STRING 
63036: ST_TO_ADDR
// end ;
63037: LD_VAR 0 1
63041: RET
// export function PrepareMastodont ( ) ; begin
63042: LD_INT 0
63044: PPUSH
// uc_side := 0 ;
63045: LD_ADDR_OWVAR 20
63049: PUSH
63050: LD_INT 0
63052: ST_TO_ADDR
// uc_nation := 0 ;
63053: LD_ADDR_OWVAR 21
63057: PUSH
63058: LD_INT 0
63060: ST_TO_ADDR
// vc_chassis := class_mastodont ;
63061: LD_ADDR_OWVAR 37
63065: PUSH
63066: LD_INT 31
63068: ST_TO_ADDR
// vc_control := control_rider ;
63069: LD_ADDR_OWVAR 38
63073: PUSH
63074: LD_INT 4
63076: ST_TO_ADDR
// end ;
63077: LD_VAR 0 1
63081: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
63082: LD_INT 0
63084: PPUSH
63085: PPUSH
63086: PPUSH
// uc_side = 0 ;
63087: LD_ADDR_OWVAR 20
63091: PUSH
63092: LD_INT 0
63094: ST_TO_ADDR
// uc_nation = 0 ;
63095: LD_ADDR_OWVAR 21
63099: PUSH
63100: LD_INT 0
63102: ST_TO_ADDR
// InitHc_All ( ) ;
63103: CALL_OW 584
// InitVc ;
63107: CALL_OW 20
// if mastodonts then
63111: LD_VAR 0 6
63115: IFFALSE 63182
// for i = 1 to mastodonts do
63117: LD_ADDR_VAR 0 11
63121: PUSH
63122: DOUBLE
63123: LD_INT 1
63125: DEC
63126: ST_TO_ADDR
63127: LD_VAR 0 6
63131: PUSH
63132: FOR_TO
63133: IFFALSE 63180
// begin vc_chassis := 31 ;
63135: LD_ADDR_OWVAR 37
63139: PUSH
63140: LD_INT 31
63142: ST_TO_ADDR
// vc_control := control_rider ;
63143: LD_ADDR_OWVAR 38
63147: PUSH
63148: LD_INT 4
63150: ST_TO_ADDR
// animal := CreateVehicle ;
63151: LD_ADDR_VAR 0 12
63155: PUSH
63156: CALL_OW 45
63160: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63161: LD_VAR 0 12
63165: PPUSH
63166: LD_VAR 0 8
63170: PPUSH
63171: LD_INT 0
63173: PPUSH
63174: CALL 65324 0 3
// end ;
63178: GO 63132
63180: POP
63181: POP
// if horses then
63182: LD_VAR 0 5
63186: IFFALSE 63253
// for i = 1 to horses do
63188: LD_ADDR_VAR 0 11
63192: PUSH
63193: DOUBLE
63194: LD_INT 1
63196: DEC
63197: ST_TO_ADDR
63198: LD_VAR 0 5
63202: PUSH
63203: FOR_TO
63204: IFFALSE 63251
// begin hc_class := 21 ;
63206: LD_ADDR_OWVAR 28
63210: PUSH
63211: LD_INT 21
63213: ST_TO_ADDR
// hc_gallery :=  ;
63214: LD_ADDR_OWVAR 33
63218: PUSH
63219: LD_STRING 
63221: ST_TO_ADDR
// animal := CreateHuman ;
63222: LD_ADDR_VAR 0 12
63226: PUSH
63227: CALL_OW 44
63231: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63232: LD_VAR 0 12
63236: PPUSH
63237: LD_VAR 0 8
63241: PPUSH
63242: LD_INT 0
63244: PPUSH
63245: CALL 65324 0 3
// end ;
63249: GO 63203
63251: POP
63252: POP
// if birds then
63253: LD_VAR 0 1
63257: IFFALSE 63324
// for i = 1 to birds do
63259: LD_ADDR_VAR 0 11
63263: PUSH
63264: DOUBLE
63265: LD_INT 1
63267: DEC
63268: ST_TO_ADDR
63269: LD_VAR 0 1
63273: PUSH
63274: FOR_TO
63275: IFFALSE 63322
// begin hc_class := 18 ;
63277: LD_ADDR_OWVAR 28
63281: PUSH
63282: LD_INT 18
63284: ST_TO_ADDR
// hc_gallery =  ;
63285: LD_ADDR_OWVAR 33
63289: PUSH
63290: LD_STRING 
63292: ST_TO_ADDR
// animal := CreateHuman ;
63293: LD_ADDR_VAR 0 12
63297: PUSH
63298: CALL_OW 44
63302: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63303: LD_VAR 0 12
63307: PPUSH
63308: LD_VAR 0 8
63312: PPUSH
63313: LD_INT 0
63315: PPUSH
63316: CALL 65324 0 3
// end ;
63320: GO 63274
63322: POP
63323: POP
// if tigers then
63324: LD_VAR 0 2
63328: IFFALSE 63412
// for i = 1 to tigers do
63330: LD_ADDR_VAR 0 11
63334: PUSH
63335: DOUBLE
63336: LD_INT 1
63338: DEC
63339: ST_TO_ADDR
63340: LD_VAR 0 2
63344: PUSH
63345: FOR_TO
63346: IFFALSE 63410
// begin hc_class = class_tiger ;
63348: LD_ADDR_OWVAR 28
63352: PUSH
63353: LD_INT 14
63355: ST_TO_ADDR
// hc_gallery =  ;
63356: LD_ADDR_OWVAR 33
63360: PUSH
63361: LD_STRING 
63363: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
63364: LD_ADDR_OWVAR 35
63368: PUSH
63369: LD_INT 7
63371: NEG
63372: PPUSH
63373: LD_INT 7
63375: PPUSH
63376: CALL_OW 12
63380: ST_TO_ADDR
// animal := CreateHuman ;
63381: LD_ADDR_VAR 0 12
63385: PUSH
63386: CALL_OW 44
63390: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63391: LD_VAR 0 12
63395: PPUSH
63396: LD_VAR 0 8
63400: PPUSH
63401: LD_INT 0
63403: PPUSH
63404: CALL 65324 0 3
// end ;
63408: GO 63345
63410: POP
63411: POP
// if apemans then
63412: LD_VAR 0 3
63416: IFFALSE 63539
// for i = 1 to apemans do
63418: LD_ADDR_VAR 0 11
63422: PUSH
63423: DOUBLE
63424: LD_INT 1
63426: DEC
63427: ST_TO_ADDR
63428: LD_VAR 0 3
63432: PUSH
63433: FOR_TO
63434: IFFALSE 63537
// begin hc_class = class_apeman ;
63436: LD_ADDR_OWVAR 28
63440: PUSH
63441: LD_INT 12
63443: ST_TO_ADDR
// hc_gallery =  ;
63444: LD_ADDR_OWVAR 33
63448: PUSH
63449: LD_STRING 
63451: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
63452: LD_ADDR_OWVAR 35
63456: PUSH
63457: LD_INT 2
63459: NEG
63460: PPUSH
63461: LD_INT 2
63463: PPUSH
63464: CALL_OW 12
63468: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
63469: LD_ADDR_OWVAR 31
63473: PUSH
63474: LD_INT 1
63476: PPUSH
63477: LD_INT 3
63479: PPUSH
63480: CALL_OW 12
63484: PUSH
63485: LD_INT 1
63487: PPUSH
63488: LD_INT 3
63490: PPUSH
63491: CALL_OW 12
63495: PUSH
63496: LD_INT 0
63498: PUSH
63499: LD_INT 0
63501: PUSH
63502: EMPTY
63503: LIST
63504: LIST
63505: LIST
63506: LIST
63507: ST_TO_ADDR
// animal := CreateHuman ;
63508: LD_ADDR_VAR 0 12
63512: PUSH
63513: CALL_OW 44
63517: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63518: LD_VAR 0 12
63522: PPUSH
63523: LD_VAR 0 8
63527: PPUSH
63528: LD_INT 0
63530: PPUSH
63531: CALL 65324 0 3
// end ;
63535: GO 63433
63537: POP
63538: POP
// if enchidnas then
63539: LD_VAR 0 4
63543: IFFALSE 63610
// for i = 1 to enchidnas do
63545: LD_ADDR_VAR 0 11
63549: PUSH
63550: DOUBLE
63551: LD_INT 1
63553: DEC
63554: ST_TO_ADDR
63555: LD_VAR 0 4
63559: PUSH
63560: FOR_TO
63561: IFFALSE 63608
// begin hc_class = 13 ;
63563: LD_ADDR_OWVAR 28
63567: PUSH
63568: LD_INT 13
63570: ST_TO_ADDR
// hc_gallery =  ;
63571: LD_ADDR_OWVAR 33
63575: PUSH
63576: LD_STRING 
63578: ST_TO_ADDR
// animal := CreateHuman ;
63579: LD_ADDR_VAR 0 12
63583: PUSH
63584: CALL_OW 44
63588: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63589: LD_VAR 0 12
63593: PPUSH
63594: LD_VAR 0 8
63598: PPUSH
63599: LD_INT 0
63601: PPUSH
63602: CALL 65324 0 3
// end ;
63606: GO 63560
63608: POP
63609: POP
// if fishes then
63610: LD_VAR 0 7
63614: IFFALSE 63681
// for i = 1 to fishes do
63616: LD_ADDR_VAR 0 11
63620: PUSH
63621: DOUBLE
63622: LD_INT 1
63624: DEC
63625: ST_TO_ADDR
63626: LD_VAR 0 7
63630: PUSH
63631: FOR_TO
63632: IFFALSE 63679
// begin hc_class = 20 ;
63634: LD_ADDR_OWVAR 28
63638: PUSH
63639: LD_INT 20
63641: ST_TO_ADDR
// hc_gallery =  ;
63642: LD_ADDR_OWVAR 33
63646: PUSH
63647: LD_STRING 
63649: ST_TO_ADDR
// animal := CreateHuman ;
63650: LD_ADDR_VAR 0 12
63654: PUSH
63655: CALL_OW 44
63659: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
63660: LD_VAR 0 12
63664: PPUSH
63665: LD_VAR 0 9
63669: PPUSH
63670: LD_INT 0
63672: PPUSH
63673: CALL 65324 0 3
// end ;
63677: GO 63631
63679: POP
63680: POP
// end ;
63681: LD_VAR 0 10
63685: RET
// export function WantHeal ( sci , unit ) ; begin
63686: LD_INT 0
63688: PPUSH
// if GetTaskList ( sci ) > 0 then
63689: LD_VAR 0 1
63693: PPUSH
63694: CALL_OW 437
63698: PUSH
63699: LD_INT 0
63701: GREATER
63702: IFFALSE 63774
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
63704: LD_VAR 0 1
63708: PPUSH
63709: CALL_OW 437
63713: PUSH
63714: LD_INT 1
63716: ARRAY
63717: PUSH
63718: LD_INT 1
63720: ARRAY
63721: PUSH
63722: LD_STRING l
63724: EQUAL
63725: IFFALSE 63752
63727: PUSH
63728: LD_VAR 0 1
63732: PPUSH
63733: CALL_OW 437
63737: PUSH
63738: LD_INT 1
63740: ARRAY
63741: PUSH
63742: LD_INT 4
63744: ARRAY
63745: PUSH
63746: LD_VAR 0 2
63750: EQUAL
63751: AND
63752: IFFALSE 63764
// result := true else
63754: LD_ADDR_VAR 0 3
63758: PUSH
63759: LD_INT 1
63761: ST_TO_ADDR
63762: GO 63772
// result := false ;
63764: LD_ADDR_VAR 0 3
63768: PUSH
63769: LD_INT 0
63771: ST_TO_ADDR
// end else
63772: GO 63782
// result := false ;
63774: LD_ADDR_VAR 0 3
63778: PUSH
63779: LD_INT 0
63781: ST_TO_ADDR
// end ;
63782: LD_VAR 0 3
63786: RET
// export function HealTarget ( sci ) ; begin
63787: LD_INT 0
63789: PPUSH
// if not sci then
63790: LD_VAR 0 1
63794: NOT
63795: IFFALSE 63799
// exit ;
63797: GO 63864
// result := 0 ;
63799: LD_ADDR_VAR 0 2
63803: PUSH
63804: LD_INT 0
63806: ST_TO_ADDR
// if GetTaskList ( sci ) then
63807: LD_VAR 0 1
63811: PPUSH
63812: CALL_OW 437
63816: IFFALSE 63864
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
63818: LD_VAR 0 1
63822: PPUSH
63823: CALL_OW 437
63827: PUSH
63828: LD_INT 1
63830: ARRAY
63831: PUSH
63832: LD_INT 1
63834: ARRAY
63835: PUSH
63836: LD_STRING l
63838: EQUAL
63839: IFFALSE 63864
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
63841: LD_ADDR_VAR 0 2
63845: PUSH
63846: LD_VAR 0 1
63850: PPUSH
63851: CALL_OW 437
63855: PUSH
63856: LD_INT 1
63858: ARRAY
63859: PUSH
63860: LD_INT 4
63862: ARRAY
63863: ST_TO_ADDR
// end ;
63864: LD_VAR 0 2
63868: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
63869: LD_INT 0
63871: PPUSH
63872: PPUSH
63873: PPUSH
63874: PPUSH
// if not base_units then
63875: LD_VAR 0 1
63879: NOT
63880: IFFALSE 63884
// exit ;
63882: GO 63971
// result := false ;
63884: LD_ADDR_VAR 0 2
63888: PUSH
63889: LD_INT 0
63891: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
63892: LD_ADDR_VAR 0 5
63896: PUSH
63897: LD_VAR 0 1
63901: PPUSH
63902: LD_INT 21
63904: PUSH
63905: LD_INT 3
63907: PUSH
63908: EMPTY
63909: LIST
63910: LIST
63911: PPUSH
63912: CALL_OW 72
63916: ST_TO_ADDR
// if not tmp then
63917: LD_VAR 0 5
63921: NOT
63922: IFFALSE 63926
// exit ;
63924: GO 63971
// for i in tmp do
63926: LD_ADDR_VAR 0 3
63930: PUSH
63931: LD_VAR 0 5
63935: PUSH
63936: FOR_IN
63937: IFFALSE 63969
// begin result := EnemyInRange ( i , 22 ) ;
63939: LD_ADDR_VAR 0 2
63943: PUSH
63944: LD_VAR 0 3
63948: PPUSH
63949: LD_INT 22
63951: PPUSH
63952: CALL 61396 0 2
63956: ST_TO_ADDR
// if result then
63957: LD_VAR 0 2
63961: IFFALSE 63967
// exit ;
63963: POP
63964: POP
63965: GO 63971
// end ;
63967: GO 63936
63969: POP
63970: POP
// end ;
63971: LD_VAR 0 2
63975: RET
// export function FilterByTag ( units , tag ) ; begin
63976: LD_INT 0
63978: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
63979: LD_ADDR_VAR 0 3
63983: PUSH
63984: LD_VAR 0 1
63988: PPUSH
63989: LD_INT 120
63991: PUSH
63992: LD_VAR 0 2
63996: PUSH
63997: EMPTY
63998: LIST
63999: LIST
64000: PPUSH
64001: CALL_OW 72
64005: ST_TO_ADDR
// end ;
64006: LD_VAR 0 3
64010: RET
// export function IsDriver ( un ) ; begin
64011: LD_INT 0
64013: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
64014: LD_ADDR_VAR 0 2
64018: PUSH
64019: LD_VAR 0 1
64023: PUSH
64024: LD_INT 55
64026: PUSH
64027: EMPTY
64028: LIST
64029: PPUSH
64030: CALL_OW 69
64034: IN
64035: ST_TO_ADDR
// end ;
64036: LD_VAR 0 2
64040: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
64041: LD_INT 0
64043: PPUSH
64044: PPUSH
// list := [ ] ;
64045: LD_ADDR_VAR 0 5
64049: PUSH
64050: EMPTY
64051: ST_TO_ADDR
// case d of 0 :
64052: LD_VAR 0 3
64056: PUSH
64057: LD_INT 0
64059: DOUBLE
64060: EQUAL
64061: IFTRUE 64065
64063: GO 64198
64065: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
64066: LD_ADDR_VAR 0 5
64070: PUSH
64071: LD_VAR 0 1
64075: PUSH
64076: LD_INT 4
64078: MINUS
64079: PUSH
64080: LD_VAR 0 2
64084: PUSH
64085: LD_INT 4
64087: MINUS
64088: PUSH
64089: LD_INT 2
64091: PUSH
64092: EMPTY
64093: LIST
64094: LIST
64095: LIST
64096: PUSH
64097: LD_VAR 0 1
64101: PUSH
64102: LD_INT 3
64104: MINUS
64105: PUSH
64106: LD_VAR 0 2
64110: PUSH
64111: LD_INT 1
64113: PUSH
64114: EMPTY
64115: LIST
64116: LIST
64117: LIST
64118: PUSH
64119: LD_VAR 0 1
64123: PUSH
64124: LD_INT 4
64126: PLUS
64127: PUSH
64128: LD_VAR 0 2
64132: PUSH
64133: LD_INT 4
64135: PUSH
64136: EMPTY
64137: LIST
64138: LIST
64139: LIST
64140: PUSH
64141: LD_VAR 0 1
64145: PUSH
64146: LD_INT 3
64148: PLUS
64149: PUSH
64150: LD_VAR 0 2
64154: PUSH
64155: LD_INT 3
64157: PLUS
64158: PUSH
64159: LD_INT 5
64161: PUSH
64162: EMPTY
64163: LIST
64164: LIST
64165: LIST
64166: PUSH
64167: LD_VAR 0 1
64171: PUSH
64172: LD_VAR 0 2
64176: PUSH
64177: LD_INT 4
64179: PLUS
64180: PUSH
64181: LD_INT 0
64183: PUSH
64184: EMPTY
64185: LIST
64186: LIST
64187: LIST
64188: PUSH
64189: EMPTY
64190: LIST
64191: LIST
64192: LIST
64193: LIST
64194: LIST
64195: ST_TO_ADDR
// end ; 1 :
64196: GO 64896
64198: LD_INT 1
64200: DOUBLE
64201: EQUAL
64202: IFTRUE 64206
64204: GO 64339
64206: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
64207: LD_ADDR_VAR 0 5
64211: PUSH
64212: LD_VAR 0 1
64216: PUSH
64217: LD_VAR 0 2
64221: PUSH
64222: LD_INT 4
64224: MINUS
64225: PUSH
64226: LD_INT 3
64228: PUSH
64229: EMPTY
64230: LIST
64231: LIST
64232: LIST
64233: PUSH
64234: LD_VAR 0 1
64238: PUSH
64239: LD_INT 3
64241: MINUS
64242: PUSH
64243: LD_VAR 0 2
64247: PUSH
64248: LD_INT 3
64250: MINUS
64251: PUSH
64252: LD_INT 2
64254: PUSH
64255: EMPTY
64256: LIST
64257: LIST
64258: LIST
64259: PUSH
64260: LD_VAR 0 1
64264: PUSH
64265: LD_INT 4
64267: MINUS
64268: PUSH
64269: LD_VAR 0 2
64273: PUSH
64274: LD_INT 1
64276: PUSH
64277: EMPTY
64278: LIST
64279: LIST
64280: LIST
64281: PUSH
64282: LD_VAR 0 1
64286: PUSH
64287: LD_VAR 0 2
64291: PUSH
64292: LD_INT 3
64294: PLUS
64295: PUSH
64296: LD_INT 0
64298: PUSH
64299: EMPTY
64300: LIST
64301: LIST
64302: LIST
64303: PUSH
64304: LD_VAR 0 1
64308: PUSH
64309: LD_INT 4
64311: PLUS
64312: PUSH
64313: LD_VAR 0 2
64317: PUSH
64318: LD_INT 4
64320: PLUS
64321: PUSH
64322: LD_INT 5
64324: PUSH
64325: EMPTY
64326: LIST
64327: LIST
64328: LIST
64329: PUSH
64330: EMPTY
64331: LIST
64332: LIST
64333: LIST
64334: LIST
64335: LIST
64336: ST_TO_ADDR
// end ; 2 :
64337: GO 64896
64339: LD_INT 2
64341: DOUBLE
64342: EQUAL
64343: IFTRUE 64347
64345: GO 64476
64347: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
64348: LD_ADDR_VAR 0 5
64352: PUSH
64353: LD_VAR 0 1
64357: PUSH
64358: LD_VAR 0 2
64362: PUSH
64363: LD_INT 3
64365: MINUS
64366: PUSH
64367: LD_INT 3
64369: PUSH
64370: EMPTY
64371: LIST
64372: LIST
64373: LIST
64374: PUSH
64375: LD_VAR 0 1
64379: PUSH
64380: LD_INT 4
64382: PLUS
64383: PUSH
64384: LD_VAR 0 2
64388: PUSH
64389: LD_INT 4
64391: PUSH
64392: EMPTY
64393: LIST
64394: LIST
64395: LIST
64396: PUSH
64397: LD_VAR 0 1
64401: PUSH
64402: LD_VAR 0 2
64406: PUSH
64407: LD_INT 4
64409: PLUS
64410: PUSH
64411: LD_INT 0
64413: PUSH
64414: EMPTY
64415: LIST
64416: LIST
64417: LIST
64418: PUSH
64419: LD_VAR 0 1
64423: PUSH
64424: LD_INT 3
64426: MINUS
64427: PUSH
64428: LD_VAR 0 2
64432: PUSH
64433: LD_INT 1
64435: PUSH
64436: EMPTY
64437: LIST
64438: LIST
64439: LIST
64440: PUSH
64441: LD_VAR 0 1
64445: PUSH
64446: LD_INT 4
64448: MINUS
64449: PUSH
64450: LD_VAR 0 2
64454: PUSH
64455: LD_INT 4
64457: MINUS
64458: PUSH
64459: LD_INT 2
64461: PUSH
64462: EMPTY
64463: LIST
64464: LIST
64465: LIST
64466: PUSH
64467: EMPTY
64468: LIST
64469: LIST
64470: LIST
64471: LIST
64472: LIST
64473: ST_TO_ADDR
// end ; 3 :
64474: GO 64896
64476: LD_INT 3
64478: DOUBLE
64479: EQUAL
64480: IFTRUE 64484
64482: GO 64617
64484: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
64485: LD_ADDR_VAR 0 5
64489: PUSH
64490: LD_VAR 0 1
64494: PUSH
64495: LD_INT 3
64497: PLUS
64498: PUSH
64499: LD_VAR 0 2
64503: PUSH
64504: LD_INT 4
64506: PUSH
64507: EMPTY
64508: LIST
64509: LIST
64510: LIST
64511: PUSH
64512: LD_VAR 0 1
64516: PUSH
64517: LD_INT 4
64519: PLUS
64520: PUSH
64521: LD_VAR 0 2
64525: PUSH
64526: LD_INT 4
64528: PLUS
64529: PUSH
64530: LD_INT 5
64532: PUSH
64533: EMPTY
64534: LIST
64535: LIST
64536: LIST
64537: PUSH
64538: LD_VAR 0 1
64542: PUSH
64543: LD_INT 4
64545: MINUS
64546: PUSH
64547: LD_VAR 0 2
64551: PUSH
64552: LD_INT 1
64554: PUSH
64555: EMPTY
64556: LIST
64557: LIST
64558: LIST
64559: PUSH
64560: LD_VAR 0 1
64564: PUSH
64565: LD_VAR 0 2
64569: PUSH
64570: LD_INT 4
64572: MINUS
64573: PUSH
64574: LD_INT 3
64576: PUSH
64577: EMPTY
64578: LIST
64579: LIST
64580: LIST
64581: PUSH
64582: LD_VAR 0 1
64586: PUSH
64587: LD_INT 3
64589: MINUS
64590: PUSH
64591: LD_VAR 0 2
64595: PUSH
64596: LD_INT 3
64598: MINUS
64599: PUSH
64600: LD_INT 2
64602: PUSH
64603: EMPTY
64604: LIST
64605: LIST
64606: LIST
64607: PUSH
64608: EMPTY
64609: LIST
64610: LIST
64611: LIST
64612: LIST
64613: LIST
64614: ST_TO_ADDR
// end ; 4 :
64615: GO 64896
64617: LD_INT 4
64619: DOUBLE
64620: EQUAL
64621: IFTRUE 64625
64623: GO 64758
64625: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
64626: LD_ADDR_VAR 0 5
64630: PUSH
64631: LD_VAR 0 1
64635: PUSH
64636: LD_VAR 0 2
64640: PUSH
64641: LD_INT 4
64643: PLUS
64644: PUSH
64645: LD_INT 0
64647: PUSH
64648: EMPTY
64649: LIST
64650: LIST
64651: LIST
64652: PUSH
64653: LD_VAR 0 1
64657: PUSH
64658: LD_INT 3
64660: PLUS
64661: PUSH
64662: LD_VAR 0 2
64666: PUSH
64667: LD_INT 3
64669: PLUS
64670: PUSH
64671: LD_INT 5
64673: PUSH
64674: EMPTY
64675: LIST
64676: LIST
64677: LIST
64678: PUSH
64679: LD_VAR 0 1
64683: PUSH
64684: LD_INT 4
64686: PLUS
64687: PUSH
64688: LD_VAR 0 2
64692: PUSH
64693: LD_INT 4
64695: PUSH
64696: EMPTY
64697: LIST
64698: LIST
64699: LIST
64700: PUSH
64701: LD_VAR 0 1
64705: PUSH
64706: LD_VAR 0 2
64710: PUSH
64711: LD_INT 3
64713: MINUS
64714: PUSH
64715: LD_INT 3
64717: PUSH
64718: EMPTY
64719: LIST
64720: LIST
64721: LIST
64722: PUSH
64723: LD_VAR 0 1
64727: PUSH
64728: LD_INT 4
64730: MINUS
64731: PUSH
64732: LD_VAR 0 2
64736: PUSH
64737: LD_INT 4
64739: MINUS
64740: PUSH
64741: LD_INT 2
64743: PUSH
64744: EMPTY
64745: LIST
64746: LIST
64747: LIST
64748: PUSH
64749: EMPTY
64750: LIST
64751: LIST
64752: LIST
64753: LIST
64754: LIST
64755: ST_TO_ADDR
// end ; 5 :
64756: GO 64896
64758: LD_INT 5
64760: DOUBLE
64761: EQUAL
64762: IFTRUE 64766
64764: GO 64895
64766: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
64767: LD_ADDR_VAR 0 5
64771: PUSH
64772: LD_VAR 0 1
64776: PUSH
64777: LD_INT 4
64779: MINUS
64780: PUSH
64781: LD_VAR 0 2
64785: PUSH
64786: LD_INT 1
64788: PUSH
64789: EMPTY
64790: LIST
64791: LIST
64792: LIST
64793: PUSH
64794: LD_VAR 0 1
64798: PUSH
64799: LD_VAR 0 2
64803: PUSH
64804: LD_INT 4
64806: MINUS
64807: PUSH
64808: LD_INT 3
64810: PUSH
64811: EMPTY
64812: LIST
64813: LIST
64814: LIST
64815: PUSH
64816: LD_VAR 0 1
64820: PUSH
64821: LD_INT 4
64823: PLUS
64824: PUSH
64825: LD_VAR 0 2
64829: PUSH
64830: LD_INT 4
64832: PLUS
64833: PUSH
64834: LD_INT 5
64836: PUSH
64837: EMPTY
64838: LIST
64839: LIST
64840: LIST
64841: PUSH
64842: LD_VAR 0 1
64846: PUSH
64847: LD_INT 3
64849: PLUS
64850: PUSH
64851: LD_VAR 0 2
64855: PUSH
64856: LD_INT 4
64858: PUSH
64859: EMPTY
64860: LIST
64861: LIST
64862: LIST
64863: PUSH
64864: LD_VAR 0 1
64868: PUSH
64869: LD_VAR 0 2
64873: PUSH
64874: LD_INT 3
64876: PLUS
64877: PUSH
64878: LD_INT 0
64880: PUSH
64881: EMPTY
64882: LIST
64883: LIST
64884: LIST
64885: PUSH
64886: EMPTY
64887: LIST
64888: LIST
64889: LIST
64890: LIST
64891: LIST
64892: ST_TO_ADDR
// end ; end ;
64893: GO 64896
64895: POP
// result := list ;
64896: LD_ADDR_VAR 0 4
64900: PUSH
64901: LD_VAR 0 5
64905: ST_TO_ADDR
// end ;
64906: LD_VAR 0 4
64910: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
64911: LD_INT 0
64913: PPUSH
64914: PPUSH
64915: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
64916: LD_VAR 0 1
64920: NOT
64921: IFTRUE 64949
64923: PUSH
64924: LD_VAR 0 2
64928: PUSH
64929: LD_INT 1
64931: PUSH
64932: LD_INT 2
64934: PUSH
64935: LD_INT 3
64937: PUSH
64938: LD_INT 4
64940: PUSH
64941: EMPTY
64942: LIST
64943: LIST
64944: LIST
64945: LIST
64946: IN
64947: NOT
64948: OR
64949: IFFALSE 64953
// exit ;
64951: GO 65036
// tmp := [ ] ;
64953: LD_ADDR_VAR 0 5
64957: PUSH
64958: EMPTY
64959: ST_TO_ADDR
// for i in units do
64960: LD_ADDR_VAR 0 4
64964: PUSH
64965: LD_VAR 0 1
64969: PUSH
64970: FOR_IN
64971: IFFALSE 65005
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
64973: LD_ADDR_VAR 0 5
64977: PUSH
64978: LD_VAR 0 5
64982: PPUSH
64983: LD_VAR 0 4
64987: PPUSH
64988: LD_VAR 0 2
64992: PPUSH
64993: CALL_OW 259
64997: PPUSH
64998: CALL 66431 0 2
65002: ST_TO_ADDR
65003: GO 64970
65005: POP
65006: POP
// if not tmp then
65007: LD_VAR 0 5
65011: NOT
65012: IFFALSE 65016
// exit ;
65014: GO 65036
// result := SortListByListDesc ( units , tmp ) ;
65016: LD_ADDR_VAR 0 3
65020: PUSH
65021: LD_VAR 0 1
65025: PPUSH
65026: LD_VAR 0 5
65030: PPUSH
65031: CALL_OW 77
65035: ST_TO_ADDR
// end ;
65036: LD_VAR 0 3
65040: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
65041: LD_INT 0
65043: PPUSH
65044: PPUSH
65045: PPUSH
// result := false ;
65046: LD_ADDR_VAR 0 3
65050: PUSH
65051: LD_INT 0
65053: ST_TO_ADDR
// if not building then
65054: LD_VAR 0 2
65058: NOT
65059: IFFALSE 65063
// exit ;
65061: GO 65207
// x := GetX ( building ) ;
65063: LD_ADDR_VAR 0 4
65067: PUSH
65068: LD_VAR 0 2
65072: PPUSH
65073: CALL_OW 250
65077: ST_TO_ADDR
// y := GetY ( building ) ;
65078: LD_ADDR_VAR 0 5
65082: PUSH
65083: LD_VAR 0 2
65087: PPUSH
65088: CALL_OW 251
65092: ST_TO_ADDR
// if not x or not y then
65093: LD_VAR 0 4
65097: NOT
65098: IFTRUE 65107
65100: PUSH
65101: LD_VAR 0 5
65105: NOT
65106: OR
65107: IFFALSE 65111
// exit ;
65109: GO 65207
// if GetTaskList ( unit ) then
65111: LD_VAR 0 1
65115: PPUSH
65116: CALL_OW 437
65120: IFFALSE 65207
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65122: LD_STRING e
65124: PUSH
65125: LD_VAR 0 1
65129: PPUSH
65130: CALL_OW 437
65134: PUSH
65135: LD_INT 1
65137: ARRAY
65138: PUSH
65139: LD_INT 1
65141: ARRAY
65142: EQUAL
65143: IFFALSE 65170
65145: PUSH
65146: LD_VAR 0 4
65150: PUSH
65151: LD_VAR 0 1
65155: PPUSH
65156: CALL_OW 437
65160: PUSH
65161: LD_INT 1
65163: ARRAY
65164: PUSH
65165: LD_INT 2
65167: ARRAY
65168: EQUAL
65169: AND
65170: IFFALSE 65197
65172: PUSH
65173: LD_VAR 0 5
65177: PUSH
65178: LD_VAR 0 1
65182: PPUSH
65183: CALL_OW 437
65187: PUSH
65188: LD_INT 1
65190: ARRAY
65191: PUSH
65192: LD_INT 3
65194: ARRAY
65195: EQUAL
65196: AND
65197: IFFALSE 65207
// result := true end ;
65199: LD_ADDR_VAR 0 3
65203: PUSH
65204: LD_INT 1
65206: ST_TO_ADDR
// end ;
65207: LD_VAR 0 3
65211: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
65212: LD_INT 0
65214: PPUSH
// result := false ;
65215: LD_ADDR_VAR 0 4
65219: PUSH
65220: LD_INT 0
65222: ST_TO_ADDR
// if GetTaskList ( unit ) then
65223: LD_VAR 0 1
65227: PPUSH
65228: CALL_OW 437
65232: IFFALSE 65319
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65234: LD_STRING M
65236: PUSH
65237: LD_VAR 0 1
65241: PPUSH
65242: CALL_OW 437
65246: PUSH
65247: LD_INT 1
65249: ARRAY
65250: PUSH
65251: LD_INT 1
65253: ARRAY
65254: EQUAL
65255: IFFALSE 65282
65257: PUSH
65258: LD_VAR 0 2
65262: PUSH
65263: LD_VAR 0 1
65267: PPUSH
65268: CALL_OW 437
65272: PUSH
65273: LD_INT 1
65275: ARRAY
65276: PUSH
65277: LD_INT 2
65279: ARRAY
65280: EQUAL
65281: AND
65282: IFFALSE 65309
65284: PUSH
65285: LD_VAR 0 3
65289: PUSH
65290: LD_VAR 0 1
65294: PPUSH
65295: CALL_OW 437
65299: PUSH
65300: LD_INT 1
65302: ARRAY
65303: PUSH
65304: LD_INT 3
65306: ARRAY
65307: EQUAL
65308: AND
65309: IFFALSE 65319
// result := true ;
65311: LD_ADDR_VAR 0 4
65315: PUSH
65316: LD_INT 1
65318: ST_TO_ADDR
// end ; end ;
65319: LD_VAR 0 4
65323: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
65324: LD_INT 0
65326: PPUSH
65327: PPUSH
65328: PPUSH
65329: PPUSH
// if not unit or not area then
65330: LD_VAR 0 1
65334: NOT
65335: IFTRUE 65344
65337: PUSH
65338: LD_VAR 0 2
65342: NOT
65343: OR
65344: IFFALSE 65348
// exit ;
65346: GO 65524
// tmp := AreaToList ( area , i ) ;
65348: LD_ADDR_VAR 0 6
65352: PUSH
65353: LD_VAR 0 2
65357: PPUSH
65358: LD_VAR 0 5
65362: PPUSH
65363: CALL_OW 517
65367: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
65368: LD_ADDR_VAR 0 5
65372: PUSH
65373: DOUBLE
65374: LD_INT 1
65376: DEC
65377: ST_TO_ADDR
65378: LD_VAR 0 6
65382: PUSH
65383: LD_INT 1
65385: ARRAY
65386: PUSH
65387: FOR_TO
65388: IFFALSE 65522
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
65390: LD_ADDR_VAR 0 7
65394: PUSH
65395: LD_VAR 0 6
65399: PUSH
65400: LD_INT 1
65402: ARRAY
65403: PUSH
65404: LD_VAR 0 5
65408: ARRAY
65409: PUSH
65410: LD_VAR 0 6
65414: PUSH
65415: LD_INT 2
65417: ARRAY
65418: PUSH
65419: LD_VAR 0 5
65423: ARRAY
65424: PUSH
65425: EMPTY
65426: LIST
65427: LIST
65428: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
65429: LD_INT 92
65431: PUSH
65432: LD_VAR 0 7
65436: PUSH
65437: LD_INT 1
65439: ARRAY
65440: PUSH
65441: LD_VAR 0 7
65445: PUSH
65446: LD_INT 2
65448: ARRAY
65449: PUSH
65450: LD_INT 2
65452: PUSH
65453: EMPTY
65454: LIST
65455: LIST
65456: LIST
65457: LIST
65458: PPUSH
65459: CALL_OW 69
65463: PUSH
65464: LD_INT 0
65466: EQUAL
65467: IFFALSE 65520
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
65469: LD_VAR 0 1
65473: PPUSH
65474: LD_VAR 0 7
65478: PUSH
65479: LD_INT 1
65481: ARRAY
65482: PPUSH
65483: LD_VAR 0 7
65487: PUSH
65488: LD_INT 2
65490: ARRAY
65491: PPUSH
65492: LD_VAR 0 3
65496: PPUSH
65497: CALL_OW 48
// result := IsPlaced ( unit ) ;
65501: LD_ADDR_VAR 0 4
65505: PUSH
65506: LD_VAR 0 1
65510: PPUSH
65511: CALL_OW 305
65515: ST_TO_ADDR
// exit ;
65516: POP
65517: POP
65518: GO 65524
// end ; end ;
65520: GO 65387
65522: POP
65523: POP
// end ;
65524: LD_VAR 0 4
65528: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
65529: LD_INT 0
65531: PPUSH
65532: PPUSH
65533: PPUSH
// if not side or side > 8 then
65534: LD_VAR 0 1
65538: NOT
65539: IFTRUE 65551
65541: PUSH
65542: LD_VAR 0 1
65546: PUSH
65547: LD_INT 8
65549: GREATER
65550: OR
65551: IFFALSE 65555
// exit ;
65553: GO 65742
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
65555: LD_ADDR_VAR 0 4
65559: PUSH
65560: LD_INT 22
65562: PUSH
65563: LD_VAR 0 1
65567: PUSH
65568: EMPTY
65569: LIST
65570: LIST
65571: PUSH
65572: LD_INT 21
65574: PUSH
65575: LD_INT 3
65577: PUSH
65578: EMPTY
65579: LIST
65580: LIST
65581: PUSH
65582: EMPTY
65583: LIST
65584: LIST
65585: PPUSH
65586: CALL_OW 69
65590: ST_TO_ADDR
// if not tmp then
65591: LD_VAR 0 4
65595: NOT
65596: IFFALSE 65600
// exit ;
65598: GO 65742
// enable_addtolog := true ;
65600: LD_ADDR_OWVAR 81
65604: PUSH
65605: LD_INT 1
65607: ST_TO_ADDR
// AddToLog ( [ ) ;
65608: LD_STRING [
65610: PPUSH
65611: CALL_OW 561
// for i in tmp do
65615: LD_ADDR_VAR 0 3
65619: PUSH
65620: LD_VAR 0 4
65624: PUSH
65625: FOR_IN
65626: IFFALSE 65733
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
65628: LD_STRING [
65630: PUSH
65631: LD_VAR 0 3
65635: PPUSH
65636: CALL_OW 266
65640: STR
65641: PUSH
65642: LD_STRING , 
65644: STR
65645: PUSH
65646: LD_VAR 0 3
65650: PPUSH
65651: CALL_OW 250
65655: STR
65656: PUSH
65657: LD_STRING , 
65659: STR
65660: PUSH
65661: LD_VAR 0 3
65665: PPUSH
65666: CALL_OW 251
65670: STR
65671: PUSH
65672: LD_STRING , 
65674: STR
65675: PUSH
65676: LD_VAR 0 3
65680: PPUSH
65681: CALL_OW 254
65685: STR
65686: PUSH
65687: LD_STRING , 
65689: STR
65690: PUSH
65691: LD_VAR 0 3
65695: PPUSH
65696: LD_INT 1
65698: PPUSH
65699: CALL_OW 268
65703: STR
65704: PUSH
65705: LD_STRING , 
65707: STR
65708: PUSH
65709: LD_VAR 0 3
65713: PPUSH
65714: LD_INT 2
65716: PPUSH
65717: CALL_OW 268
65721: STR
65722: PUSH
65723: LD_STRING ],
65725: STR
65726: PPUSH
65727: CALL_OW 561
// end ;
65731: GO 65625
65733: POP
65734: POP
// AddToLog ( ]; ) ;
65735: LD_STRING ];
65737: PPUSH
65738: CALL_OW 561
// end ;
65742: LD_VAR 0 2
65746: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
65747: LD_INT 0
65749: PPUSH
65750: PPUSH
65751: PPUSH
65752: PPUSH
65753: PPUSH
// if not area or not rate or not max then
65754: LD_VAR 0 1
65758: NOT
65759: IFTRUE 65768
65761: PUSH
65762: LD_VAR 0 2
65766: NOT
65767: OR
65768: IFTRUE 65777
65770: PUSH
65771: LD_VAR 0 4
65775: NOT
65776: OR
65777: IFFALSE 65781
// exit ;
65779: GO 65970
// while 1 do
65781: LD_INT 1
65783: IFFALSE 65970
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
65785: LD_ADDR_VAR 0 9
65789: PUSH
65790: LD_VAR 0 1
65794: PPUSH
65795: LD_INT 1
65797: PPUSH
65798: CALL_OW 287
65802: PUSH
65803: LD_INT 10
65805: MUL
65806: ST_TO_ADDR
// r := rate / 10 ;
65807: LD_ADDR_VAR 0 7
65811: PUSH
65812: LD_VAR 0 2
65816: PUSH
65817: LD_INT 10
65819: DIVREAL
65820: ST_TO_ADDR
// time := 1 1$00 ;
65821: LD_ADDR_VAR 0 8
65825: PUSH
65826: LD_INT 2100
65828: ST_TO_ADDR
// if amount < min then
65829: LD_VAR 0 9
65833: PUSH
65834: LD_VAR 0 3
65838: LESS
65839: IFFALSE 65857
// r := r * 2 else
65841: LD_ADDR_VAR 0 7
65845: PUSH
65846: LD_VAR 0 7
65850: PUSH
65851: LD_INT 2
65853: MUL
65854: ST_TO_ADDR
65855: GO 65883
// if amount > max then
65857: LD_VAR 0 9
65861: PUSH
65862: LD_VAR 0 4
65866: GREATER
65867: IFFALSE 65883
// r := r / 2 ;
65869: LD_ADDR_VAR 0 7
65873: PUSH
65874: LD_VAR 0 7
65878: PUSH
65879: LD_INT 2
65881: DIVREAL
65882: ST_TO_ADDR
// time := time / r ;
65883: LD_ADDR_VAR 0 8
65887: PUSH
65888: LD_VAR 0 8
65892: PUSH
65893: LD_VAR 0 7
65897: DIVREAL
65898: ST_TO_ADDR
// if time < 0 then
65899: LD_VAR 0 8
65903: PUSH
65904: LD_INT 0
65906: LESS
65907: IFFALSE 65924
// time := time * - 1 ;
65909: LD_ADDR_VAR 0 8
65913: PUSH
65914: LD_VAR 0 8
65918: PUSH
65919: LD_INT 1
65921: NEG
65922: MUL
65923: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
65924: LD_VAR 0 8
65928: PUSH
65929: LD_INT 35
65931: PPUSH
65932: LD_INT 875
65934: PPUSH
65935: CALL_OW 12
65939: PLUS
65940: PPUSH
65941: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
65945: LD_INT 1
65947: PPUSH
65948: LD_INT 5
65950: PPUSH
65951: CALL_OW 12
65955: PPUSH
65956: LD_VAR 0 1
65960: PPUSH
65961: LD_INT 1
65963: PPUSH
65964: CALL_OW 55
// end ;
65968: GO 65781
// end ;
65970: LD_VAR 0 5
65974: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
65975: LD_INT 0
65977: PPUSH
65978: PPUSH
65979: PPUSH
65980: PPUSH
65981: PPUSH
65982: PPUSH
65983: PPUSH
65984: PPUSH
// if not turrets or not factories then
65985: LD_VAR 0 1
65989: NOT
65990: IFTRUE 65999
65992: PUSH
65993: LD_VAR 0 2
65997: NOT
65998: OR
65999: IFFALSE 66003
// exit ;
66001: GO 66310
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
66003: LD_ADDR_VAR 0 10
66007: PUSH
66008: LD_INT 5
66010: PUSH
66011: LD_INT 6
66013: PUSH
66014: EMPTY
66015: LIST
66016: LIST
66017: PUSH
66018: LD_INT 2
66020: PUSH
66021: LD_INT 4
66023: PUSH
66024: EMPTY
66025: LIST
66026: LIST
66027: PUSH
66028: LD_INT 3
66030: PUSH
66031: LD_INT 5
66033: PUSH
66034: EMPTY
66035: LIST
66036: LIST
66037: PUSH
66038: EMPTY
66039: LIST
66040: LIST
66041: LIST
66042: PUSH
66043: LD_INT 24
66045: PUSH
66046: LD_INT 25
66048: PUSH
66049: EMPTY
66050: LIST
66051: LIST
66052: PUSH
66053: LD_INT 23
66055: PUSH
66056: LD_INT 27
66058: PUSH
66059: EMPTY
66060: LIST
66061: LIST
66062: PUSH
66063: EMPTY
66064: LIST
66065: LIST
66066: PUSH
66067: LD_INT 42
66069: PUSH
66070: LD_INT 43
66072: PUSH
66073: EMPTY
66074: LIST
66075: LIST
66076: PUSH
66077: LD_INT 44
66079: PUSH
66080: LD_INT 46
66082: PUSH
66083: EMPTY
66084: LIST
66085: LIST
66086: PUSH
66087: LD_INT 45
66089: PUSH
66090: LD_INT 47
66092: PUSH
66093: EMPTY
66094: LIST
66095: LIST
66096: PUSH
66097: EMPTY
66098: LIST
66099: LIST
66100: LIST
66101: PUSH
66102: EMPTY
66103: LIST
66104: LIST
66105: LIST
66106: ST_TO_ADDR
// result := [ ] ;
66107: LD_ADDR_VAR 0 3
66111: PUSH
66112: EMPTY
66113: ST_TO_ADDR
// for i in turrets do
66114: LD_ADDR_VAR 0 4
66118: PUSH
66119: LD_VAR 0 1
66123: PUSH
66124: FOR_IN
66125: IFFALSE 66308
// begin nat := GetNation ( i ) ;
66127: LD_ADDR_VAR 0 7
66131: PUSH
66132: LD_VAR 0 4
66136: PPUSH
66137: CALL_OW 248
66141: ST_TO_ADDR
// weapon := 0 ;
66142: LD_ADDR_VAR 0 8
66146: PUSH
66147: LD_INT 0
66149: ST_TO_ADDR
// if not nat then
66150: LD_VAR 0 7
66154: NOT
66155: IFFALSE 66159
// continue ;
66157: GO 66124
// for j in list [ nat ] do
66159: LD_ADDR_VAR 0 5
66163: PUSH
66164: LD_VAR 0 10
66168: PUSH
66169: LD_VAR 0 7
66173: ARRAY
66174: PUSH
66175: FOR_IN
66176: IFFALSE 66217
// if GetBWeapon ( i ) = j [ 1 ] then
66178: LD_VAR 0 4
66182: PPUSH
66183: CALL_OW 269
66187: PUSH
66188: LD_VAR 0 5
66192: PUSH
66193: LD_INT 1
66195: ARRAY
66196: EQUAL
66197: IFFALSE 66215
// begin weapon := j [ 2 ] ;
66199: LD_ADDR_VAR 0 8
66203: PUSH
66204: LD_VAR 0 5
66208: PUSH
66209: LD_INT 2
66211: ARRAY
66212: ST_TO_ADDR
// break ;
66213: GO 66217
// end ;
66215: GO 66175
66217: POP
66218: POP
// if not weapon then
66219: LD_VAR 0 8
66223: NOT
66224: IFFALSE 66228
// continue ;
66226: GO 66124
// for k in factories do
66228: LD_ADDR_VAR 0 6
66232: PUSH
66233: LD_VAR 0 2
66237: PUSH
66238: FOR_IN
66239: IFFALSE 66304
// begin weapons := AvailableWeaponList ( k ) ;
66241: LD_ADDR_VAR 0 9
66245: PUSH
66246: LD_VAR 0 6
66250: PPUSH
66251: CALL_OW 478
66255: ST_TO_ADDR
// if not weapons then
66256: LD_VAR 0 9
66260: NOT
66261: IFFALSE 66265
// continue ;
66263: GO 66238
// if weapon in weapons then
66265: LD_VAR 0 8
66269: PUSH
66270: LD_VAR 0 9
66274: IN
66275: IFFALSE 66302
// begin result := [ i , weapon ] ;
66277: LD_ADDR_VAR 0 3
66281: PUSH
66282: LD_VAR 0 4
66286: PUSH
66287: LD_VAR 0 8
66291: PUSH
66292: EMPTY
66293: LIST
66294: LIST
66295: ST_TO_ADDR
// exit ;
66296: POP
66297: POP
66298: POP
66299: POP
66300: GO 66310
// end ; end ;
66302: GO 66238
66304: POP
66305: POP
// end ;
66306: GO 66124
66308: POP
66309: POP
// end ;
66310: LD_VAR 0 3
66314: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
66315: LD_INT 0
66317: PPUSH
// if not side or side > 8 then
66318: LD_VAR 0 3
66322: NOT
66323: IFTRUE 66335
66325: PUSH
66326: LD_VAR 0 3
66330: PUSH
66331: LD_INT 8
66333: GREATER
66334: OR
66335: IFFALSE 66339
// exit ;
66337: GO 66398
// if not range then
66339: LD_VAR 0 4
66343: NOT
66344: IFFALSE 66355
// range := - 12 ;
66346: LD_ADDR_VAR 0 4
66350: PUSH
66351: LD_INT 12
66353: NEG
66354: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
66355: LD_VAR 0 1
66359: PPUSH
66360: LD_VAR 0 2
66364: PPUSH
66365: LD_VAR 0 3
66369: PPUSH
66370: LD_VAR 0 4
66374: PPUSH
66375: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
66379: LD_VAR 0 1
66383: PPUSH
66384: LD_VAR 0 2
66388: PPUSH
66389: LD_VAR 0 3
66393: PPUSH
66394: CALL_OW 331
// end ;
66398: LD_VAR 0 5
66402: RET
// export function Video ( mode ) ; begin
66403: LD_INT 0
66405: PPUSH
// ingame_video = mode ;
66406: LD_ADDR_OWVAR 52
66410: PUSH
66411: LD_VAR 0 1
66415: ST_TO_ADDR
// interface_hidden = mode ;
66416: LD_ADDR_OWVAR 54
66420: PUSH
66421: LD_VAR 0 1
66425: ST_TO_ADDR
// end ;
66426: LD_VAR 0 2
66430: RET
// export function Join ( array , element ) ; begin
66431: LD_INT 0
66433: PPUSH
// result := Replace ( array , array + 1 , element ) ;
66434: LD_ADDR_VAR 0 3
66438: PUSH
66439: LD_VAR 0 1
66443: PPUSH
66444: LD_VAR 0 1
66448: PUSH
66449: LD_INT 1
66451: PLUS
66452: PPUSH
66453: LD_VAR 0 2
66457: PPUSH
66458: CALL_OW 1
66462: ST_TO_ADDR
// end ;
66463: LD_VAR 0 3
66467: RET
// export function JoinUnion ( array , element ) ; begin
66468: LD_INT 0
66470: PPUSH
// result := array union element ;
66471: LD_ADDR_VAR 0 3
66475: PUSH
66476: LD_VAR 0 1
66480: PUSH
66481: LD_VAR 0 2
66485: UNION
66486: ST_TO_ADDR
// end ;
66487: LD_VAR 0 3
66491: RET
// export function GetBehemoths ( side ) ; begin
66492: LD_INT 0
66494: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
66495: LD_ADDR_VAR 0 2
66499: PUSH
66500: LD_INT 22
66502: PUSH
66503: LD_VAR 0 1
66507: PUSH
66508: EMPTY
66509: LIST
66510: LIST
66511: PUSH
66512: LD_INT 31
66514: PUSH
66515: LD_INT 25
66517: PUSH
66518: EMPTY
66519: LIST
66520: LIST
66521: PUSH
66522: EMPTY
66523: LIST
66524: LIST
66525: PPUSH
66526: CALL_OW 69
66530: ST_TO_ADDR
// end ;
66531: LD_VAR 0 2
66535: RET
// export function Shuffle ( array ) ; var i , index ; begin
66536: LD_INT 0
66538: PPUSH
66539: PPUSH
66540: PPUSH
// result := [ ] ;
66541: LD_ADDR_VAR 0 2
66545: PUSH
66546: EMPTY
66547: ST_TO_ADDR
// if not array then
66548: LD_VAR 0 1
66552: NOT
66553: IFFALSE 66557
// exit ;
66555: GO 66656
// Randomize ;
66557: CALL_OW 10
// for i = array downto 1 do
66561: LD_ADDR_VAR 0 3
66565: PUSH
66566: DOUBLE
66567: LD_VAR 0 1
66571: INC
66572: ST_TO_ADDR
66573: LD_INT 1
66575: PUSH
66576: FOR_DOWNTO
66577: IFFALSE 66654
// begin index := rand ( 1 , array ) ;
66579: LD_ADDR_VAR 0 4
66583: PUSH
66584: LD_INT 1
66586: PPUSH
66587: LD_VAR 0 1
66591: PPUSH
66592: CALL_OW 12
66596: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
66597: LD_ADDR_VAR 0 2
66601: PUSH
66602: LD_VAR 0 2
66606: PPUSH
66607: LD_VAR 0 2
66611: PUSH
66612: LD_INT 1
66614: PLUS
66615: PPUSH
66616: LD_VAR 0 1
66620: PUSH
66621: LD_VAR 0 4
66625: ARRAY
66626: PPUSH
66627: CALL_OW 2
66631: ST_TO_ADDR
// array := Delete ( array , index ) ;
66632: LD_ADDR_VAR 0 1
66636: PUSH
66637: LD_VAR 0 1
66641: PPUSH
66642: LD_VAR 0 4
66646: PPUSH
66647: CALL_OW 3
66651: ST_TO_ADDR
// end ;
66652: GO 66576
66654: POP
66655: POP
// end ;
66656: LD_VAR 0 2
66660: RET
// export function GetBaseMaterials ( base ) ; begin
66661: LD_INT 0
66663: PPUSH
// result := [ 0 , 0 , 0 ] ;
66664: LD_ADDR_VAR 0 2
66668: PUSH
66669: LD_INT 0
66671: PUSH
66672: LD_INT 0
66674: PUSH
66675: LD_INT 0
66677: PUSH
66678: EMPTY
66679: LIST
66680: LIST
66681: LIST
66682: ST_TO_ADDR
// if not base then
66683: LD_VAR 0 1
66687: NOT
66688: IFFALSE 66692
// exit ;
66690: GO 66741
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
66692: LD_ADDR_VAR 0 2
66696: PUSH
66697: LD_VAR 0 1
66701: PPUSH
66702: LD_INT 1
66704: PPUSH
66705: CALL_OW 275
66709: PUSH
66710: LD_VAR 0 1
66714: PPUSH
66715: LD_INT 2
66717: PPUSH
66718: CALL_OW 275
66722: PUSH
66723: LD_VAR 0 1
66727: PPUSH
66728: LD_INT 3
66730: PPUSH
66731: CALL_OW 275
66735: PUSH
66736: EMPTY
66737: LIST
66738: LIST
66739: LIST
66740: ST_TO_ADDR
// end ;
66741: LD_VAR 0 2
66745: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
66746: LD_INT 0
66748: PPUSH
66749: PPUSH
// result := array ;
66750: LD_ADDR_VAR 0 3
66754: PUSH
66755: LD_VAR 0 1
66759: ST_TO_ADDR
// if size >= result then
66760: LD_VAR 0 2
66764: PUSH
66765: LD_VAR 0 3
66769: GREATEREQUAL
66770: IFFALSE 66774
// exit ;
66772: GO 66824
// if size then
66774: LD_VAR 0 2
66778: IFFALSE 66824
// for i := array downto size do
66780: LD_ADDR_VAR 0 4
66784: PUSH
66785: DOUBLE
66786: LD_VAR 0 1
66790: INC
66791: ST_TO_ADDR
66792: LD_VAR 0 2
66796: PUSH
66797: FOR_DOWNTO
66798: IFFALSE 66822
// result := Delete ( result , result ) ;
66800: LD_ADDR_VAR 0 3
66804: PUSH
66805: LD_VAR 0 3
66809: PPUSH
66810: LD_VAR 0 3
66814: PPUSH
66815: CALL_OW 3
66819: ST_TO_ADDR
66820: GO 66797
66822: POP
66823: POP
// end ;
66824: LD_VAR 0 3
66828: RET
// export function ComExit ( unit ) ; var tmp ; begin
66829: LD_INT 0
66831: PPUSH
66832: PPUSH
// if not IsInUnit ( unit ) then
66833: LD_VAR 0 1
66837: PPUSH
66838: CALL_OW 310
66842: NOT
66843: IFFALSE 66847
// exit ;
66845: GO 66907
// tmp := IsInUnit ( unit ) ;
66847: LD_ADDR_VAR 0 3
66851: PUSH
66852: LD_VAR 0 1
66856: PPUSH
66857: CALL_OW 310
66861: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
66862: LD_VAR 0 3
66866: PPUSH
66867: CALL_OW 247
66871: PUSH
66872: LD_INT 2
66874: EQUAL
66875: IFFALSE 66888
// ComExitVehicle ( unit ) else
66877: LD_VAR 0 1
66881: PPUSH
66882: CALL_OW 121
66886: GO 66897
// ComExitBuilding ( unit ) ;
66888: LD_VAR 0 1
66892: PPUSH
66893: CALL_OW 122
// result := tmp ;
66897: LD_ADDR_VAR 0 2
66901: PUSH
66902: LD_VAR 0 3
66906: ST_TO_ADDR
// end ;
66907: LD_VAR 0 2
66911: RET
// export function ComExitAll ( units ) ; var i ; begin
66912: LD_INT 0
66914: PPUSH
66915: PPUSH
// if not units then
66916: LD_VAR 0 1
66920: NOT
66921: IFFALSE 66925
// exit ;
66923: GO 66951
// for i in units do
66925: LD_ADDR_VAR 0 3
66929: PUSH
66930: LD_VAR 0 1
66934: PUSH
66935: FOR_IN
66936: IFFALSE 66949
// ComExit ( i ) ;
66938: LD_VAR 0 3
66942: PPUSH
66943: CALL 66829 0 1
66947: GO 66935
66949: POP
66950: POP
// end ;
66951: LD_VAR 0 2
66955: RET
// export function ResetHc ; begin
66956: LD_INT 0
66958: PPUSH
// InitHc ;
66959: CALL_OW 19
// hc_importance := 0 ;
66963: LD_ADDR_OWVAR 32
66967: PUSH
66968: LD_INT 0
66970: ST_TO_ADDR
// end ;
66971: LD_VAR 0 1
66975: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
66976: LD_INT 0
66978: PPUSH
66979: PPUSH
66980: PPUSH
// _x := ( x1 + x2 ) div 2 ;
66981: LD_ADDR_VAR 0 6
66985: PUSH
66986: LD_VAR 0 1
66990: PUSH
66991: LD_VAR 0 3
66995: PLUS
66996: PUSH
66997: LD_INT 2
66999: DIV
67000: ST_TO_ADDR
// if _x < 0 then
67001: LD_VAR 0 6
67005: PUSH
67006: LD_INT 0
67008: LESS
67009: IFFALSE 67026
// _x := _x * - 1 ;
67011: LD_ADDR_VAR 0 6
67015: PUSH
67016: LD_VAR 0 6
67020: PUSH
67021: LD_INT 1
67023: NEG
67024: MUL
67025: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
67026: LD_ADDR_VAR 0 7
67030: PUSH
67031: LD_VAR 0 2
67035: PUSH
67036: LD_VAR 0 4
67040: PLUS
67041: PUSH
67042: LD_INT 2
67044: DIV
67045: ST_TO_ADDR
// if _y < 0 then
67046: LD_VAR 0 7
67050: PUSH
67051: LD_INT 0
67053: LESS
67054: IFFALSE 67071
// _y := _y * - 1 ;
67056: LD_ADDR_VAR 0 7
67060: PUSH
67061: LD_VAR 0 7
67065: PUSH
67066: LD_INT 1
67068: NEG
67069: MUL
67070: ST_TO_ADDR
// result := [ _x , _y ] ;
67071: LD_ADDR_VAR 0 5
67075: PUSH
67076: LD_VAR 0 6
67080: PUSH
67081: LD_VAR 0 7
67085: PUSH
67086: EMPTY
67087: LIST
67088: LIST
67089: ST_TO_ADDR
// end ;
67090: LD_VAR 0 5
67094: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
67095: LD_INT 0
67097: PPUSH
67098: PPUSH
67099: PPUSH
67100: PPUSH
// task := GetTaskList ( unit ) ;
67101: LD_ADDR_VAR 0 7
67105: PUSH
67106: LD_VAR 0 1
67110: PPUSH
67111: CALL_OW 437
67115: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
67116: LD_VAR 0 7
67120: NOT
67121: IFFALSE 67140
67123: PUSH
67124: LD_VAR 0 1
67128: PPUSH
67129: LD_VAR 0 2
67133: PPUSH
67134: CALL_OW 308
67138: NOT
67139: AND
67140: IFFALSE 67144
// exit ;
67142: GO 67262
// if IsInArea ( unit , area ) then
67144: LD_VAR 0 1
67148: PPUSH
67149: LD_VAR 0 2
67153: PPUSH
67154: CALL_OW 308
67158: IFFALSE 67176
// begin ComMoveToArea ( unit , goAway ) ;
67160: LD_VAR 0 1
67164: PPUSH
67165: LD_VAR 0 3
67169: PPUSH
67170: CALL_OW 113
// exit ;
67174: GO 67262
// end ; if task [ 1 ] [ 1 ] <> M then
67176: LD_VAR 0 7
67180: PUSH
67181: LD_INT 1
67183: ARRAY
67184: PUSH
67185: LD_INT 1
67187: ARRAY
67188: PUSH
67189: LD_STRING M
67191: NONEQUAL
67192: IFFALSE 67196
// exit ;
67194: GO 67262
// x := task [ 1 ] [ 2 ] ;
67196: LD_ADDR_VAR 0 5
67200: PUSH
67201: LD_VAR 0 7
67205: PUSH
67206: LD_INT 1
67208: ARRAY
67209: PUSH
67210: LD_INT 2
67212: ARRAY
67213: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
67214: LD_ADDR_VAR 0 6
67218: PUSH
67219: LD_VAR 0 7
67223: PUSH
67224: LD_INT 1
67226: ARRAY
67227: PUSH
67228: LD_INT 3
67230: ARRAY
67231: ST_TO_ADDR
// if InArea ( x , y , area ) then
67232: LD_VAR 0 5
67236: PPUSH
67237: LD_VAR 0 6
67241: PPUSH
67242: LD_VAR 0 2
67246: PPUSH
67247: CALL_OW 309
67251: IFFALSE 67262
// ComStop ( unit ) ;
67253: LD_VAR 0 1
67257: PPUSH
67258: CALL_OW 141
// end ;
67262: LD_VAR 0 4
67266: RET
// export function Abs ( value ) ; begin
67267: LD_INT 0
67269: PPUSH
// result := value ;
67270: LD_ADDR_VAR 0 2
67274: PUSH
67275: LD_VAR 0 1
67279: ST_TO_ADDR
// if value < 0 then
67280: LD_VAR 0 1
67284: PUSH
67285: LD_INT 0
67287: LESS
67288: IFFALSE 67305
// result := value * - 1 ;
67290: LD_ADDR_VAR 0 2
67294: PUSH
67295: LD_VAR 0 1
67299: PUSH
67300: LD_INT 1
67302: NEG
67303: MUL
67304: ST_TO_ADDR
// end ;
67305: LD_VAR 0 2
67309: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
67310: LD_INT 0
67312: PPUSH
67313: PPUSH
67314: PPUSH
67315: PPUSH
67316: PPUSH
67317: PPUSH
67318: PPUSH
67319: PPUSH
// if not unit or not building then
67320: LD_VAR 0 1
67324: NOT
67325: IFTRUE 67334
67327: PUSH
67328: LD_VAR 0 2
67332: NOT
67333: OR
67334: IFFALSE 67338
// exit ;
67336: GO 67566
// x := GetX ( building ) ;
67338: LD_ADDR_VAR 0 4
67342: PUSH
67343: LD_VAR 0 2
67347: PPUSH
67348: CALL_OW 250
67352: ST_TO_ADDR
// y := GetY ( building ) ;
67353: LD_ADDR_VAR 0 6
67357: PUSH
67358: LD_VAR 0 2
67362: PPUSH
67363: CALL_OW 251
67367: ST_TO_ADDR
// d := GetDir ( building ) ;
67368: LD_ADDR_VAR 0 8
67372: PUSH
67373: LD_VAR 0 2
67377: PPUSH
67378: CALL_OW 254
67382: ST_TO_ADDR
// r := 4 ;
67383: LD_ADDR_VAR 0 9
67387: PUSH
67388: LD_INT 4
67390: ST_TO_ADDR
// for i := 1 to 5 do
67391: LD_ADDR_VAR 0 10
67395: PUSH
67396: DOUBLE
67397: LD_INT 1
67399: DEC
67400: ST_TO_ADDR
67401: LD_INT 5
67403: PUSH
67404: FOR_TO
67405: IFFALSE 67564
// begin _x := ShiftX ( x , d , r + i ) ;
67407: LD_ADDR_VAR 0 5
67411: PUSH
67412: LD_VAR 0 4
67416: PPUSH
67417: LD_VAR 0 8
67421: PPUSH
67422: LD_VAR 0 9
67426: PUSH
67427: LD_VAR 0 10
67431: PLUS
67432: PPUSH
67433: CALL_OW 272
67437: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
67438: LD_ADDR_VAR 0 7
67442: PUSH
67443: LD_VAR 0 6
67447: PPUSH
67448: LD_VAR 0 8
67452: PPUSH
67453: LD_VAR 0 9
67457: PUSH
67458: LD_VAR 0 10
67462: PLUS
67463: PPUSH
67464: CALL_OW 273
67468: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
67469: LD_VAR 0 5
67473: PPUSH
67474: LD_VAR 0 7
67478: PPUSH
67479: CALL_OW 488
67483: IFFALSE 67518
67485: PUSH
67486: LD_VAR 0 5
67490: PPUSH
67491: LD_VAR 0 7
67495: PPUSH
67496: CALL_OW 428
67500: PPUSH
67501: CALL_OW 247
67505: PUSH
67506: LD_INT 3
67508: PUSH
67509: LD_INT 2
67511: PUSH
67512: EMPTY
67513: LIST
67514: LIST
67515: IN
67516: NOT
67517: AND
67518: IFFALSE 67562
// begin ComMoveXY ( unit , _x , _y ) ;
67520: LD_VAR 0 1
67524: PPUSH
67525: LD_VAR 0 5
67529: PPUSH
67530: LD_VAR 0 7
67534: PPUSH
67535: CALL_OW 111
// result := [ _x , _y ] ;
67539: LD_ADDR_VAR 0 3
67543: PUSH
67544: LD_VAR 0 5
67548: PUSH
67549: LD_VAR 0 7
67553: PUSH
67554: EMPTY
67555: LIST
67556: LIST
67557: ST_TO_ADDR
// exit ;
67558: POP
67559: POP
67560: GO 67566
// end ; end ;
67562: GO 67404
67564: POP
67565: POP
// end ;
67566: LD_VAR 0 3
67570: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
67571: LD_INT 0
67573: PPUSH
67574: PPUSH
67575: PPUSH
// result := 0 ;
67576: LD_ADDR_VAR 0 3
67580: PUSH
67581: LD_INT 0
67583: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
67584: LD_VAR 0 1
67588: PUSH
67589: LD_INT 0
67591: LESS
67592: IFTRUE 67604
67594: PUSH
67595: LD_VAR 0 1
67599: PUSH
67600: LD_INT 8
67602: GREATER
67603: OR
67604: IFTRUE 67616
67606: PUSH
67607: LD_VAR 0 2
67611: PUSH
67612: LD_INT 0
67614: LESS
67615: OR
67616: IFTRUE 67628
67618: PUSH
67619: LD_VAR 0 2
67623: PUSH
67624: LD_INT 8
67626: GREATER
67627: OR
67628: IFFALSE 67632
// exit ;
67630: GO 67707
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
67632: LD_ADDR_VAR 0 4
67636: PUSH
67637: LD_INT 22
67639: PUSH
67640: LD_VAR 0 2
67644: PUSH
67645: EMPTY
67646: LIST
67647: LIST
67648: PPUSH
67649: CALL_OW 69
67653: PUSH
67654: FOR_IN
67655: IFFALSE 67705
// begin un := UnitShoot ( i ) ;
67657: LD_ADDR_VAR 0 5
67661: PUSH
67662: LD_VAR 0 4
67666: PPUSH
67667: CALL_OW 504
67671: ST_TO_ADDR
// if GetSide ( un ) = side1 then
67672: LD_VAR 0 5
67676: PPUSH
67677: CALL_OW 255
67681: PUSH
67682: LD_VAR 0 1
67686: EQUAL
67687: IFFALSE 67703
// begin result := un ;
67689: LD_ADDR_VAR 0 3
67693: PUSH
67694: LD_VAR 0 5
67698: ST_TO_ADDR
// exit ;
67699: POP
67700: POP
67701: GO 67707
// end ; end ;
67703: GO 67654
67705: POP
67706: POP
// end ;
67707: LD_VAR 0 3
67711: RET
// export function GetCargoBay ( units ) ; begin
67712: LD_INT 0
67714: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
67715: LD_ADDR_VAR 0 2
67719: PUSH
67720: LD_VAR 0 1
67724: PPUSH
67725: LD_INT 2
67727: PUSH
67728: LD_INT 34
67730: PUSH
67731: LD_INT 12
67733: PUSH
67734: EMPTY
67735: LIST
67736: LIST
67737: PUSH
67738: LD_INT 34
67740: PUSH
67741: LD_INT 51
67743: PUSH
67744: EMPTY
67745: LIST
67746: LIST
67747: PUSH
67748: LD_INT 34
67750: PUSH
67751: LD_INT 32
67753: PUSH
67754: EMPTY
67755: LIST
67756: LIST
67757: PUSH
67758: LD_INT 34
67760: PUSH
67761: LD_INT 89
67763: PUSH
67764: EMPTY
67765: LIST
67766: LIST
67767: PUSH
67768: EMPTY
67769: LIST
67770: LIST
67771: LIST
67772: LIST
67773: LIST
67774: PPUSH
67775: CALL_OW 72
67779: ST_TO_ADDR
// end ;
67780: LD_VAR 0 2
67784: RET
// export function Negate ( value ) ; begin
67785: LD_INT 0
67787: PPUSH
// result := not value ;
67788: LD_ADDR_VAR 0 2
67792: PUSH
67793: LD_VAR 0 1
67797: NOT
67798: ST_TO_ADDR
// end ;
67799: LD_VAR 0 2
67803: RET
// export function Inc ( value ) ; begin
67804: LD_INT 0
67806: PPUSH
// result := value + 1 ;
67807: LD_ADDR_VAR 0 2
67811: PUSH
67812: LD_VAR 0 1
67816: PUSH
67817: LD_INT 1
67819: PLUS
67820: ST_TO_ADDR
// end ;
67821: LD_VAR 0 2
67825: RET
// export function Dec ( value ) ; begin
67826: LD_INT 0
67828: PPUSH
// result := value - 1 ;
67829: LD_ADDR_VAR 0 2
67833: PUSH
67834: LD_VAR 0 1
67838: PUSH
67839: LD_INT 1
67841: MINUS
67842: ST_TO_ADDR
// end ;
67843: LD_VAR 0 2
67847: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
67848: LD_INT 0
67850: PPUSH
67851: PPUSH
67852: PPUSH
67853: PPUSH
67854: PPUSH
67855: PPUSH
67856: PPUSH
67857: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
67858: LD_VAR 0 1
67862: PPUSH
67863: LD_VAR 0 2
67867: PPUSH
67868: CALL_OW 488
67872: NOT
67873: IFTRUE 67892
67875: PUSH
67876: LD_VAR 0 3
67880: PPUSH
67881: LD_VAR 0 4
67885: PPUSH
67886: CALL_OW 488
67890: NOT
67891: OR
67892: IFFALSE 67905
// begin result := - 1 ;
67894: LD_ADDR_VAR 0 5
67898: PUSH
67899: LD_INT 1
67901: NEG
67902: ST_TO_ADDR
// exit ;
67903: GO 68140
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
67905: LD_ADDR_VAR 0 12
67909: PUSH
67910: LD_VAR 0 1
67914: PPUSH
67915: LD_VAR 0 2
67919: PPUSH
67920: LD_VAR 0 3
67924: PPUSH
67925: LD_VAR 0 4
67929: PPUSH
67930: CALL 66976 0 4
67934: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
67935: LD_ADDR_VAR 0 11
67939: PUSH
67940: LD_VAR 0 1
67944: PPUSH
67945: LD_VAR 0 2
67949: PPUSH
67950: LD_VAR 0 12
67954: PUSH
67955: LD_INT 1
67957: ARRAY
67958: PPUSH
67959: LD_VAR 0 12
67963: PUSH
67964: LD_INT 2
67966: ARRAY
67967: PPUSH
67968: CALL_OW 298
67972: ST_TO_ADDR
// distance := 9999 ;
67973: LD_ADDR_VAR 0 10
67977: PUSH
67978: LD_INT 9999
67980: ST_TO_ADDR
// for i := 0 to 5 do
67981: LD_ADDR_VAR 0 6
67985: PUSH
67986: DOUBLE
67987: LD_INT 0
67989: DEC
67990: ST_TO_ADDR
67991: LD_INT 5
67993: PUSH
67994: FOR_TO
67995: IFFALSE 68138
// begin _x := ShiftX ( x1 , i , centerDist ) ;
67997: LD_ADDR_VAR 0 7
68001: PUSH
68002: LD_VAR 0 1
68006: PPUSH
68007: LD_VAR 0 6
68011: PPUSH
68012: LD_VAR 0 11
68016: PPUSH
68017: CALL_OW 272
68021: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
68022: LD_ADDR_VAR 0 8
68026: PUSH
68027: LD_VAR 0 2
68031: PPUSH
68032: LD_VAR 0 6
68036: PPUSH
68037: LD_VAR 0 11
68041: PPUSH
68042: CALL_OW 273
68046: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
68047: LD_VAR 0 7
68051: PPUSH
68052: LD_VAR 0 8
68056: PPUSH
68057: CALL_OW 488
68061: NOT
68062: IFFALSE 68066
// continue ;
68064: GO 67994
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
68066: LD_ADDR_VAR 0 9
68070: PUSH
68071: LD_VAR 0 12
68075: PUSH
68076: LD_INT 1
68078: ARRAY
68079: PPUSH
68080: LD_VAR 0 12
68084: PUSH
68085: LD_INT 2
68087: ARRAY
68088: PPUSH
68089: LD_VAR 0 7
68093: PPUSH
68094: LD_VAR 0 8
68098: PPUSH
68099: CALL_OW 298
68103: ST_TO_ADDR
// if tmp < distance then
68104: LD_VAR 0 9
68108: PUSH
68109: LD_VAR 0 10
68113: LESS
68114: IFFALSE 68136
// begin result := i ;
68116: LD_ADDR_VAR 0 5
68120: PUSH
68121: LD_VAR 0 6
68125: ST_TO_ADDR
// distance := tmp ;
68126: LD_ADDR_VAR 0 10
68130: PUSH
68131: LD_VAR 0 9
68135: ST_TO_ADDR
// end ; end ;
68136: GO 67994
68138: POP
68139: POP
// end ;
68140: LD_VAR 0 5
68144: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68145: LD_INT 0
68147: PPUSH
68148: PPUSH
// if not driver or not IsInUnit ( driver ) then
68149: LD_VAR 0 1
68153: NOT
68154: IFTRUE 68168
68156: PUSH
68157: LD_VAR 0 1
68161: PPUSH
68162: CALL_OW 310
68166: NOT
68167: OR
68168: IFFALSE 68172
// exit ;
68170: GO 68262
// vehicle := IsInUnit ( driver ) ;
68172: LD_ADDR_VAR 0 3
68176: PUSH
68177: LD_VAR 0 1
68181: PPUSH
68182: CALL_OW 310
68186: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68187: LD_VAR 0 1
68191: PPUSH
68192: LD_STRING \
68194: PUSH
68195: LD_INT 0
68197: PUSH
68198: LD_INT 0
68200: PUSH
68201: LD_INT 0
68203: PUSH
68204: LD_INT 0
68206: PUSH
68207: LD_INT 0
68209: PUSH
68210: LD_INT 0
68212: PUSH
68213: EMPTY
68214: LIST
68215: LIST
68216: LIST
68217: LIST
68218: LIST
68219: LIST
68220: LIST
68221: PUSH
68222: LD_STRING E
68224: PUSH
68225: LD_INT 0
68227: PUSH
68228: LD_INT 0
68230: PUSH
68231: LD_VAR 0 3
68235: PUSH
68236: LD_INT 0
68238: PUSH
68239: LD_INT 0
68241: PUSH
68242: LD_INT 0
68244: PUSH
68245: EMPTY
68246: LIST
68247: LIST
68248: LIST
68249: LIST
68250: LIST
68251: LIST
68252: LIST
68253: PUSH
68254: EMPTY
68255: LIST
68256: LIST
68257: PPUSH
68258: CALL_OW 446
// end ;
68262: LD_VAR 0 2
68266: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68267: LD_INT 0
68269: PPUSH
68270: PPUSH
// if not driver or not IsInUnit ( driver ) then
68271: LD_VAR 0 1
68275: NOT
68276: IFTRUE 68290
68278: PUSH
68279: LD_VAR 0 1
68283: PPUSH
68284: CALL_OW 310
68288: NOT
68289: OR
68290: IFFALSE 68294
// exit ;
68292: GO 68384
// vehicle := IsInUnit ( driver ) ;
68294: LD_ADDR_VAR 0 3
68298: PUSH
68299: LD_VAR 0 1
68303: PPUSH
68304: CALL_OW 310
68308: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68309: LD_VAR 0 1
68313: PPUSH
68314: LD_STRING \
68316: PUSH
68317: LD_INT 0
68319: PUSH
68320: LD_INT 0
68322: PUSH
68323: LD_INT 0
68325: PUSH
68326: LD_INT 0
68328: PUSH
68329: LD_INT 0
68331: PUSH
68332: LD_INT 0
68334: PUSH
68335: EMPTY
68336: LIST
68337: LIST
68338: LIST
68339: LIST
68340: LIST
68341: LIST
68342: LIST
68343: PUSH
68344: LD_STRING E
68346: PUSH
68347: LD_INT 0
68349: PUSH
68350: LD_INT 0
68352: PUSH
68353: LD_VAR 0 3
68357: PUSH
68358: LD_INT 0
68360: PUSH
68361: LD_INT 0
68363: PUSH
68364: LD_INT 0
68366: PUSH
68367: EMPTY
68368: LIST
68369: LIST
68370: LIST
68371: LIST
68372: LIST
68373: LIST
68374: LIST
68375: PUSH
68376: EMPTY
68377: LIST
68378: LIST
68379: PPUSH
68380: CALL_OW 447
// end ;
68384: LD_VAR 0 2
68388: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
68389: LD_INT 0
68391: PPUSH
68392: PPUSH
68393: PPUSH
// tmp := [ ] ;
68394: LD_ADDR_VAR 0 5
68398: PUSH
68399: EMPTY
68400: ST_TO_ADDR
// for i in units do
68401: LD_ADDR_VAR 0 4
68405: PUSH
68406: LD_VAR 0 1
68410: PUSH
68411: FOR_IN
68412: IFFALSE 68450
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
68414: LD_ADDR_VAR 0 5
68418: PUSH
68419: LD_VAR 0 5
68423: PPUSH
68424: LD_VAR 0 5
68428: PUSH
68429: LD_INT 1
68431: PLUS
68432: PPUSH
68433: LD_VAR 0 4
68437: PPUSH
68438: CALL_OW 256
68442: PPUSH
68443: CALL_OW 2
68447: ST_TO_ADDR
68448: GO 68411
68450: POP
68451: POP
// if not tmp then
68452: LD_VAR 0 5
68456: NOT
68457: IFFALSE 68461
// exit ;
68459: GO 68509
// if asc then
68461: LD_VAR 0 2
68465: IFFALSE 68489
// result := SortListByListAsc ( units , tmp ) else
68467: LD_ADDR_VAR 0 3
68471: PUSH
68472: LD_VAR 0 1
68476: PPUSH
68477: LD_VAR 0 5
68481: PPUSH
68482: CALL_OW 76
68486: ST_TO_ADDR
68487: GO 68509
// result := SortListByListDesc ( units , tmp ) ;
68489: LD_ADDR_VAR 0 3
68493: PUSH
68494: LD_VAR 0 1
68498: PPUSH
68499: LD_VAR 0 5
68503: PPUSH
68504: CALL_OW 77
68508: ST_TO_ADDR
// end ;
68509: LD_VAR 0 3
68513: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
68514: LD_INT 0
68516: PPUSH
68517: PPUSH
// task := GetTaskList ( mech ) ;
68518: LD_ADDR_VAR 0 4
68522: PUSH
68523: LD_VAR 0 1
68527: PPUSH
68528: CALL_OW 437
68532: ST_TO_ADDR
// if not task then
68533: LD_VAR 0 4
68537: NOT
68538: IFFALSE 68542
// exit ;
68540: GO 68586
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
68542: LD_ADDR_VAR 0 3
68546: PUSH
68547: LD_VAR 0 4
68551: PUSH
68552: LD_INT 1
68554: ARRAY
68555: PUSH
68556: LD_INT 1
68558: ARRAY
68559: PUSH
68560: LD_STRING r
68562: EQUAL
68563: IFFALSE 68585
68565: PUSH
68566: LD_VAR 0 4
68570: PUSH
68571: LD_INT 1
68573: ARRAY
68574: PUSH
68575: LD_INT 4
68577: ARRAY
68578: PUSH
68579: LD_VAR 0 2
68583: EQUAL
68584: AND
68585: ST_TO_ADDR
// end ;
68586: LD_VAR 0 3
68590: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
68591: LD_INT 0
68593: PPUSH
// SetDir ( unit , d ) ;
68594: LD_VAR 0 1
68598: PPUSH
68599: LD_VAR 0 4
68603: PPUSH
68604: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
68608: LD_ADDR_VAR 0 6
68612: PUSH
68613: LD_VAR 0 1
68617: PPUSH
68618: LD_VAR 0 2
68622: PPUSH
68623: LD_VAR 0 3
68627: PPUSH
68628: LD_VAR 0 5
68632: PPUSH
68633: CALL_OW 48
68637: ST_TO_ADDR
// end ;
68638: LD_VAR 0 6
68642: RET
// export function ToNaturalNumber ( number ) ; begin
68643: LD_INT 0
68645: PPUSH
// result := number div 1 ;
68646: LD_ADDR_VAR 0 2
68650: PUSH
68651: LD_VAR 0 1
68655: PUSH
68656: LD_INT 1
68658: DIV
68659: ST_TO_ADDR
// if number < 0 then
68660: LD_VAR 0 1
68664: PUSH
68665: LD_INT 0
68667: LESS
68668: IFFALSE 68678
// result := 0 ;
68670: LD_ADDR_VAR 0 2
68674: PUSH
68675: LD_INT 0
68677: ST_TO_ADDR
// end ;
68678: LD_VAR 0 2
68682: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
68683: LD_INT 0
68685: PPUSH
68686: PPUSH
68687: PPUSH
// if not buildings then
68688: LD_VAR 0 1
68692: NOT
68693: IFFALSE 68697
// exit ;
68695: GO 68812
// tmp := [ ] ;
68697: LD_ADDR_VAR 0 5
68701: PUSH
68702: EMPTY
68703: ST_TO_ADDR
// for b in buildings do
68704: LD_ADDR_VAR 0 4
68708: PUSH
68709: LD_VAR 0 1
68713: PUSH
68714: FOR_IN
68715: IFFALSE 68753
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
68717: LD_ADDR_VAR 0 5
68721: PUSH
68722: LD_VAR 0 5
68726: PPUSH
68727: LD_VAR 0 5
68731: PUSH
68732: LD_INT 1
68734: PLUS
68735: PPUSH
68736: LD_VAR 0 4
68740: PPUSH
68741: CALL_OW 266
68745: PPUSH
68746: CALL_OW 1
68750: ST_TO_ADDR
68751: GO 68714
68753: POP
68754: POP
// if not tmp then
68755: LD_VAR 0 5
68759: NOT
68760: IFFALSE 68764
// exit ;
68762: GO 68812
// if asc then
68764: LD_VAR 0 2
68768: IFFALSE 68792
// result := SortListByListAsc ( buildings , tmp ) else
68770: LD_ADDR_VAR 0 3
68774: PUSH
68775: LD_VAR 0 1
68779: PPUSH
68780: LD_VAR 0 5
68784: PPUSH
68785: CALL_OW 76
68789: ST_TO_ADDR
68790: GO 68812
// result := SortListByListDesc ( buildings , tmp ) ;
68792: LD_ADDR_VAR 0 3
68796: PUSH
68797: LD_VAR 0 1
68801: PPUSH
68802: LD_VAR 0 5
68806: PPUSH
68807: CALL_OW 77
68811: ST_TO_ADDR
// end ;
68812: LD_VAR 0 3
68816: RET
// export function SortByClass ( units , class ) ; var un ; begin
68817: LD_INT 0
68819: PPUSH
68820: PPUSH
// if not units or not class then
68821: LD_VAR 0 1
68825: NOT
68826: IFTRUE 68835
68828: PUSH
68829: LD_VAR 0 2
68833: NOT
68834: OR
68835: IFFALSE 68839
// exit ;
68837: GO 68934
// result := [ ] ;
68839: LD_ADDR_VAR 0 3
68843: PUSH
68844: EMPTY
68845: ST_TO_ADDR
// for un in units do
68846: LD_ADDR_VAR 0 4
68850: PUSH
68851: LD_VAR 0 1
68855: PUSH
68856: FOR_IN
68857: IFFALSE 68932
// if GetClass ( un ) = class then
68859: LD_VAR 0 4
68863: PPUSH
68864: CALL_OW 257
68868: PUSH
68869: LD_VAR 0 2
68873: EQUAL
68874: IFFALSE 68901
// result := Insert ( result , 1 , un ) else
68876: LD_ADDR_VAR 0 3
68880: PUSH
68881: LD_VAR 0 3
68885: PPUSH
68886: LD_INT 1
68888: PPUSH
68889: LD_VAR 0 4
68893: PPUSH
68894: CALL_OW 2
68898: ST_TO_ADDR
68899: GO 68930
// result := Replace ( result , result + 1 , un ) ;
68901: LD_ADDR_VAR 0 3
68905: PUSH
68906: LD_VAR 0 3
68910: PPUSH
68911: LD_VAR 0 3
68915: PUSH
68916: LD_INT 1
68918: PLUS
68919: PPUSH
68920: LD_VAR 0 4
68924: PPUSH
68925: CALL_OW 1
68929: ST_TO_ADDR
68930: GO 68856
68932: POP
68933: POP
// end ;
68934: LD_VAR 0 3
68938: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
68939: LD_INT 0
68941: PPUSH
68942: PPUSH
68943: PPUSH
68944: PPUSH
68945: PPUSH
68946: PPUSH
68947: PPUSH
// result := [ ] ;
68948: LD_ADDR_VAR 0 4
68952: PUSH
68953: EMPTY
68954: ST_TO_ADDR
// if x - r < 0 then
68955: LD_VAR 0 1
68959: PUSH
68960: LD_VAR 0 3
68964: MINUS
68965: PUSH
68966: LD_INT 0
68968: LESS
68969: IFFALSE 68981
// min_x := 0 else
68971: LD_ADDR_VAR 0 8
68975: PUSH
68976: LD_INT 0
68978: ST_TO_ADDR
68979: GO 68997
// min_x := x - r ;
68981: LD_ADDR_VAR 0 8
68985: PUSH
68986: LD_VAR 0 1
68990: PUSH
68991: LD_VAR 0 3
68995: MINUS
68996: ST_TO_ADDR
// if y - r < 0 then
68997: LD_VAR 0 2
69001: PUSH
69002: LD_VAR 0 3
69006: MINUS
69007: PUSH
69008: LD_INT 0
69010: LESS
69011: IFFALSE 69023
// min_y := 0 else
69013: LD_ADDR_VAR 0 7
69017: PUSH
69018: LD_INT 0
69020: ST_TO_ADDR
69021: GO 69039
// min_y := y - r ;
69023: LD_ADDR_VAR 0 7
69027: PUSH
69028: LD_VAR 0 2
69032: PUSH
69033: LD_VAR 0 3
69037: MINUS
69038: ST_TO_ADDR
// max_x := x + r ;
69039: LD_ADDR_VAR 0 9
69043: PUSH
69044: LD_VAR 0 1
69048: PUSH
69049: LD_VAR 0 3
69053: PLUS
69054: ST_TO_ADDR
// max_y := y + r ;
69055: LD_ADDR_VAR 0 10
69059: PUSH
69060: LD_VAR 0 2
69064: PUSH
69065: LD_VAR 0 3
69069: PLUS
69070: ST_TO_ADDR
// for _x = min_x to max_x do
69071: LD_ADDR_VAR 0 5
69075: PUSH
69076: DOUBLE
69077: LD_VAR 0 8
69081: DEC
69082: ST_TO_ADDR
69083: LD_VAR 0 9
69087: PUSH
69088: FOR_TO
69089: IFFALSE 69190
// for _y = min_y to max_y do
69091: LD_ADDR_VAR 0 6
69095: PUSH
69096: DOUBLE
69097: LD_VAR 0 7
69101: DEC
69102: ST_TO_ADDR
69103: LD_VAR 0 10
69107: PUSH
69108: FOR_TO
69109: IFFALSE 69186
// begin if not ValidHex ( _x , _y ) then
69111: LD_VAR 0 5
69115: PPUSH
69116: LD_VAR 0 6
69120: PPUSH
69121: CALL_OW 488
69125: NOT
69126: IFFALSE 69130
// continue ;
69128: GO 69108
// if GetResourceTypeXY ( _x , _y ) then
69130: LD_VAR 0 5
69134: PPUSH
69135: LD_VAR 0 6
69139: PPUSH
69140: CALL_OW 283
69144: IFFALSE 69184
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
69146: LD_ADDR_VAR 0 4
69150: PUSH
69151: LD_VAR 0 4
69155: PPUSH
69156: LD_VAR 0 4
69160: PUSH
69161: LD_INT 1
69163: PLUS
69164: PPUSH
69165: LD_VAR 0 5
69169: PUSH
69170: LD_VAR 0 6
69174: PUSH
69175: EMPTY
69176: LIST
69177: LIST
69178: PPUSH
69179: CALL_OW 1
69183: ST_TO_ADDR
// end ;
69184: GO 69108
69186: POP
69187: POP
69188: GO 69088
69190: POP
69191: POP
// end ;
69192: LD_VAR 0 4
69196: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
69197: LD_INT 0
69199: PPUSH
69200: PPUSH
69201: PPUSH
69202: PPUSH
69203: PPUSH
69204: PPUSH
69205: PPUSH
69206: PPUSH
// if not units then
69207: LD_VAR 0 1
69211: NOT
69212: IFFALSE 69216
// exit ;
69214: GO 69748
// result := UnitFilter ( units , [ f_ok ] ) ;
69216: LD_ADDR_VAR 0 3
69220: PUSH
69221: LD_VAR 0 1
69225: PPUSH
69226: LD_INT 50
69228: PUSH
69229: EMPTY
69230: LIST
69231: PPUSH
69232: CALL_OW 72
69236: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
69237: LD_ADDR_VAR 0 8
69241: PUSH
69242: LD_VAR 0 1
69246: PUSH
69247: LD_INT 1
69249: ARRAY
69250: PPUSH
69251: CALL_OW 255
69255: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
69256: LD_ADDR_VAR 0 10
69260: PUSH
69261: LD_INT 29
69263: PUSH
69264: LD_INT 91
69266: PUSH
69267: LD_INT 49
69269: PUSH
69270: EMPTY
69271: LIST
69272: LIST
69273: LIST
69274: ST_TO_ADDR
// if not result then
69275: LD_VAR 0 3
69279: NOT
69280: IFFALSE 69284
// exit ;
69282: GO 69748
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
69284: LD_ADDR_VAR 0 5
69288: PUSH
69289: LD_INT 81
69291: PUSH
69292: LD_VAR 0 8
69296: PUSH
69297: EMPTY
69298: LIST
69299: LIST
69300: PPUSH
69301: CALL_OW 69
69305: ST_TO_ADDR
// for i in result do
69306: LD_ADDR_VAR 0 4
69310: PUSH
69311: LD_VAR 0 3
69315: PUSH
69316: FOR_IN
69317: IFFALSE 69746
// begin tag := GetTag ( i ) + 1 ;
69319: LD_ADDR_VAR 0 9
69323: PUSH
69324: LD_VAR 0 4
69328: PPUSH
69329: CALL_OW 110
69333: PUSH
69334: LD_INT 1
69336: PLUS
69337: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
69338: LD_ADDR_VAR 0 7
69342: PUSH
69343: LD_VAR 0 4
69347: PPUSH
69348: CALL_OW 250
69352: PPUSH
69353: LD_VAR 0 4
69357: PPUSH
69358: CALL_OW 251
69362: PPUSH
69363: LD_INT 4
69365: PPUSH
69366: CALL 68939 0 3
69370: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
69371: LD_VAR 0 4
69375: PPUSH
69376: CALL_OW 247
69380: PUSH
69381: LD_INT 2
69383: EQUAL
69384: IFFALSE 69396
69386: PUSH
69387: LD_VAR 0 7
69391: PUSH
69392: LD_INT 2
69394: GREATER
69395: AND
69396: IFFALSE 69416
69398: PUSH
69399: LD_VAR 0 4
69403: PPUSH
69404: CALL_OW 264
69408: PUSH
69409: LD_VAR 0 10
69413: IN
69414: NOT
69415: AND
69416: IFFALSE 69455
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
69418: LD_VAR 0 4
69422: PPUSH
69423: LD_VAR 0 7
69427: PUSH
69428: LD_INT 1
69430: ARRAY
69431: PUSH
69432: LD_INT 1
69434: ARRAY
69435: PPUSH
69436: LD_VAR 0 7
69440: PUSH
69441: LD_INT 1
69443: ARRAY
69444: PUSH
69445: LD_INT 2
69447: ARRAY
69448: PPUSH
69449: CALL_OW 116
69453: GO 69744
// if path > tag then
69455: LD_VAR 0 2
69459: PUSH
69460: LD_VAR 0 9
69464: GREATER
69465: IFFALSE 69673
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
69467: LD_ADDR_VAR 0 6
69471: PUSH
69472: LD_VAR 0 5
69476: PPUSH
69477: LD_INT 91
69479: PUSH
69480: LD_VAR 0 4
69484: PUSH
69485: LD_INT 8
69487: PUSH
69488: EMPTY
69489: LIST
69490: LIST
69491: LIST
69492: PPUSH
69493: CALL_OW 72
69497: ST_TO_ADDR
// if nearEnemy then
69498: LD_VAR 0 6
69502: IFFALSE 69571
// begin if GetWeapon ( i ) = ru_time_lapser then
69504: LD_VAR 0 4
69508: PPUSH
69509: CALL_OW 264
69513: PUSH
69514: LD_INT 49
69516: EQUAL
69517: IFFALSE 69545
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
69519: LD_VAR 0 4
69523: PPUSH
69524: LD_VAR 0 6
69528: PPUSH
69529: LD_VAR 0 4
69533: PPUSH
69534: CALL_OW 74
69538: PPUSH
69539: CALL_OW 112
69543: GO 69569
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
69545: LD_VAR 0 4
69549: PPUSH
69550: LD_VAR 0 6
69554: PPUSH
69555: LD_VAR 0 4
69559: PPUSH
69560: CALL_OW 74
69564: PPUSH
69565: CALL 70829 0 2
// end else
69569: GO 69671
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
69571: LD_VAR 0 4
69575: PPUSH
69576: LD_VAR 0 2
69580: PUSH
69581: LD_VAR 0 9
69585: ARRAY
69586: PUSH
69587: LD_INT 1
69589: ARRAY
69590: PPUSH
69591: LD_VAR 0 2
69595: PUSH
69596: LD_VAR 0 9
69600: ARRAY
69601: PUSH
69602: LD_INT 2
69604: ARRAY
69605: PPUSH
69606: CALL_OW 297
69610: PUSH
69611: LD_INT 6
69613: GREATER
69614: IFFALSE 69657
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
69616: LD_VAR 0 4
69620: PPUSH
69621: LD_VAR 0 2
69625: PUSH
69626: LD_VAR 0 9
69630: ARRAY
69631: PUSH
69632: LD_INT 1
69634: ARRAY
69635: PPUSH
69636: LD_VAR 0 2
69640: PUSH
69641: LD_VAR 0 9
69645: ARRAY
69646: PUSH
69647: LD_INT 2
69649: ARRAY
69650: PPUSH
69651: CALL_OW 114
69655: GO 69671
// SetTag ( i , tag ) ;
69657: LD_VAR 0 4
69661: PPUSH
69662: LD_VAR 0 9
69666: PPUSH
69667: CALL_OW 109
// end else
69671: GO 69744
// if enemy then
69673: LD_VAR 0 5
69677: IFFALSE 69744
// begin if GetWeapon ( i ) = ru_time_lapser then
69679: LD_VAR 0 4
69683: PPUSH
69684: CALL_OW 264
69688: PUSH
69689: LD_INT 49
69691: EQUAL
69692: IFFALSE 69720
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
69694: LD_VAR 0 4
69698: PPUSH
69699: LD_VAR 0 5
69703: PPUSH
69704: LD_VAR 0 4
69708: PPUSH
69709: CALL_OW 74
69713: PPUSH
69714: CALL_OW 112
69718: GO 69744
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
69720: LD_VAR 0 4
69724: PPUSH
69725: LD_VAR 0 5
69729: PPUSH
69730: LD_VAR 0 4
69734: PPUSH
69735: CALL_OW 74
69739: PPUSH
69740: CALL 70829 0 2
// end ; end ;
69744: GO 69316
69746: POP
69747: POP
// end ;
69748: LD_VAR 0 3
69752: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
69753: LD_INT 0
69755: PPUSH
69756: PPUSH
69757: PPUSH
// if not unit or IsInUnit ( unit ) then
69758: LD_VAR 0 1
69762: NOT
69763: IFTRUE 69776
69765: PUSH
69766: LD_VAR 0 1
69770: PPUSH
69771: CALL_OW 310
69775: OR
69776: IFFALSE 69780
// exit ;
69778: GO 69871
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
69780: LD_ADDR_VAR 0 4
69784: PUSH
69785: LD_VAR 0 1
69789: PPUSH
69790: CALL_OW 250
69794: PPUSH
69795: LD_VAR 0 2
69799: PPUSH
69800: LD_INT 1
69802: PPUSH
69803: CALL_OW 272
69807: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
69808: LD_ADDR_VAR 0 5
69812: PUSH
69813: LD_VAR 0 1
69817: PPUSH
69818: CALL_OW 251
69822: PPUSH
69823: LD_VAR 0 2
69827: PPUSH
69828: LD_INT 1
69830: PPUSH
69831: CALL_OW 273
69835: ST_TO_ADDR
// if ValidHex ( x , y ) then
69836: LD_VAR 0 4
69840: PPUSH
69841: LD_VAR 0 5
69845: PPUSH
69846: CALL_OW 488
69850: IFFALSE 69871
// ComTurnXY ( unit , x , y ) ;
69852: LD_VAR 0 1
69856: PPUSH
69857: LD_VAR 0 4
69861: PPUSH
69862: LD_VAR 0 5
69866: PPUSH
69867: CALL_OW 118
// end ;
69871: LD_VAR 0 3
69875: RET
// export function SeeUnits ( side , units ) ; var i ; begin
69876: LD_INT 0
69878: PPUSH
69879: PPUSH
// result := false ;
69880: LD_ADDR_VAR 0 3
69884: PUSH
69885: LD_INT 0
69887: ST_TO_ADDR
// if not units then
69888: LD_VAR 0 2
69892: NOT
69893: IFFALSE 69897
// exit ;
69895: GO 69942
// for i in units do
69897: LD_ADDR_VAR 0 4
69901: PUSH
69902: LD_VAR 0 2
69906: PUSH
69907: FOR_IN
69908: IFFALSE 69940
// if See ( side , i ) then
69910: LD_VAR 0 1
69914: PPUSH
69915: LD_VAR 0 4
69919: PPUSH
69920: CALL_OW 292
69924: IFFALSE 69938
// begin result := true ;
69926: LD_ADDR_VAR 0 3
69930: PUSH
69931: LD_INT 1
69933: ST_TO_ADDR
// exit ;
69934: POP
69935: POP
69936: GO 69942
// end ;
69938: GO 69907
69940: POP
69941: POP
// end ;
69942: LD_VAR 0 3
69946: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
69947: LD_INT 0
69949: PPUSH
69950: PPUSH
69951: PPUSH
69952: PPUSH
// if not unit or not points then
69953: LD_VAR 0 1
69957: NOT
69958: IFTRUE 69967
69960: PUSH
69961: LD_VAR 0 2
69965: NOT
69966: OR
69967: IFFALSE 69971
// exit ;
69969: GO 70061
// dist := 99999 ;
69971: LD_ADDR_VAR 0 5
69975: PUSH
69976: LD_INT 99999
69978: ST_TO_ADDR
// for i in points do
69979: LD_ADDR_VAR 0 4
69983: PUSH
69984: LD_VAR 0 2
69988: PUSH
69989: FOR_IN
69990: IFFALSE 70059
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
69992: LD_ADDR_VAR 0 6
69996: PUSH
69997: LD_VAR 0 1
70001: PPUSH
70002: LD_VAR 0 4
70006: PUSH
70007: LD_INT 1
70009: ARRAY
70010: PPUSH
70011: LD_VAR 0 4
70015: PUSH
70016: LD_INT 2
70018: ARRAY
70019: PPUSH
70020: CALL_OW 297
70024: ST_TO_ADDR
// if tmpDist < dist then
70025: LD_VAR 0 6
70029: PUSH
70030: LD_VAR 0 5
70034: LESS
70035: IFFALSE 70057
// begin result := i ;
70037: LD_ADDR_VAR 0 3
70041: PUSH
70042: LD_VAR 0 4
70046: ST_TO_ADDR
// dist := tmpDist ;
70047: LD_ADDR_VAR 0 5
70051: PUSH
70052: LD_VAR 0 6
70056: ST_TO_ADDR
// end ; end ;
70057: GO 69989
70059: POP
70060: POP
// end ;
70061: LD_VAR 0 3
70065: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
70066: LD_INT 0
70068: PPUSH
// uc_side := side ;
70069: LD_ADDR_OWVAR 20
70073: PUSH
70074: LD_VAR 0 1
70078: ST_TO_ADDR
// uc_nation := 3 ;
70079: LD_ADDR_OWVAR 21
70083: PUSH
70084: LD_INT 3
70086: ST_TO_ADDR
// vc_chassis := 25 ;
70087: LD_ADDR_OWVAR 37
70091: PUSH
70092: LD_INT 25
70094: ST_TO_ADDR
// vc_engine := engine_siberite ;
70095: LD_ADDR_OWVAR 39
70099: PUSH
70100: LD_INT 3
70102: ST_TO_ADDR
// vc_control := control_computer ;
70103: LD_ADDR_OWVAR 38
70107: PUSH
70108: LD_INT 3
70110: ST_TO_ADDR
// vc_weapon := 59 ;
70111: LD_ADDR_OWVAR 40
70115: PUSH
70116: LD_INT 59
70118: ST_TO_ADDR
// result := CreateVehicle ;
70119: LD_ADDR_VAR 0 5
70123: PUSH
70124: CALL_OW 45
70128: ST_TO_ADDR
// SetDir ( result , d ) ;
70129: LD_VAR 0 5
70133: PPUSH
70134: LD_VAR 0 4
70138: PPUSH
70139: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
70143: LD_VAR 0 5
70147: PPUSH
70148: LD_VAR 0 2
70152: PPUSH
70153: LD_VAR 0 3
70157: PPUSH
70158: LD_INT 0
70160: PPUSH
70161: CALL_OW 48
// end ;
70165: LD_VAR 0 5
70169: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
70170: LD_INT 0
70172: PPUSH
70173: PPUSH
70174: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
70175: LD_ADDR_VAR 0 2
70179: PUSH
70180: LD_INT 0
70182: PUSH
70183: LD_INT 0
70185: PUSH
70186: LD_INT 0
70188: PUSH
70189: LD_INT 0
70191: PUSH
70192: EMPTY
70193: LIST
70194: LIST
70195: LIST
70196: LIST
70197: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
70198: LD_VAR 0 1
70202: NOT
70203: IFTRUE 70236
70205: PUSH
70206: LD_VAR 0 1
70210: PPUSH
70211: CALL_OW 264
70215: PUSH
70216: LD_INT 12
70218: PUSH
70219: LD_INT 51
70221: PUSH
70222: LD_INT 32
70224: PUSH
70225: LD_INT 89
70227: PUSH
70228: EMPTY
70229: LIST
70230: LIST
70231: LIST
70232: LIST
70233: IN
70234: NOT
70235: OR
70236: IFFALSE 70240
// exit ;
70238: GO 70338
// for i := 1 to 3 do
70240: LD_ADDR_VAR 0 3
70244: PUSH
70245: DOUBLE
70246: LD_INT 1
70248: DEC
70249: ST_TO_ADDR
70250: LD_INT 3
70252: PUSH
70253: FOR_TO
70254: IFFALSE 70336
// begin tmp := GetCargo ( cargo , i ) ;
70256: LD_ADDR_VAR 0 4
70260: PUSH
70261: LD_VAR 0 1
70265: PPUSH
70266: LD_VAR 0 3
70270: PPUSH
70271: CALL_OW 289
70275: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
70276: LD_ADDR_VAR 0 2
70280: PUSH
70281: LD_VAR 0 2
70285: PPUSH
70286: LD_VAR 0 3
70290: PPUSH
70291: LD_VAR 0 4
70295: PPUSH
70296: CALL_OW 1
70300: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
70301: LD_ADDR_VAR 0 2
70305: PUSH
70306: LD_VAR 0 2
70310: PPUSH
70311: LD_INT 4
70313: PPUSH
70314: LD_VAR 0 2
70318: PUSH
70319: LD_INT 4
70321: ARRAY
70322: PUSH
70323: LD_VAR 0 4
70327: PLUS
70328: PPUSH
70329: CALL_OW 1
70333: ST_TO_ADDR
// end ;
70334: GO 70253
70336: POP
70337: POP
// end ;
70338: LD_VAR 0 2
70342: RET
// export function Length ( array ) ; begin
70343: LD_INT 0
70345: PPUSH
// result := array + 0 ;
70346: LD_ADDR_VAR 0 2
70350: PUSH
70351: LD_VAR 0 1
70355: PUSH
70356: LD_INT 0
70358: PLUS
70359: ST_TO_ADDR
// end ;
70360: LD_VAR 0 2
70364: RET
// export function PrepareArray ( array ) ; begin
70365: LD_INT 0
70367: PPUSH
// result := array diff 0 ;
70368: LD_ADDR_VAR 0 2
70372: PUSH
70373: LD_VAR 0 1
70377: PUSH
70378: LD_INT 0
70380: DIFF
70381: ST_TO_ADDR
// if not result [ 1 ] then
70382: LD_VAR 0 2
70386: PUSH
70387: LD_INT 1
70389: ARRAY
70390: NOT
70391: IFFALSE 70411
// result := Delete ( result , 1 ) ;
70393: LD_ADDR_VAR 0 2
70397: PUSH
70398: LD_VAR 0 2
70402: PPUSH
70403: LD_INT 1
70405: PPUSH
70406: CALL_OW 3
70410: ST_TO_ADDR
// end ;
70411: LD_VAR 0 2
70415: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
70416: LD_INT 0
70418: PPUSH
70419: PPUSH
70420: PPUSH
70421: PPUSH
// sibRocketRange := 25 ;
70422: LD_ADDR_VAR 0 6
70426: PUSH
70427: LD_INT 25
70429: ST_TO_ADDR
// result := false ;
70430: LD_ADDR_VAR 0 4
70434: PUSH
70435: LD_INT 0
70437: ST_TO_ADDR
// for i := 0 to 5 do
70438: LD_ADDR_VAR 0 5
70442: PUSH
70443: DOUBLE
70444: LD_INT 0
70446: DEC
70447: ST_TO_ADDR
70448: LD_INT 5
70450: PUSH
70451: FOR_TO
70452: IFFALSE 70519
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
70454: LD_VAR 0 1
70458: PPUSH
70459: LD_VAR 0 5
70463: PPUSH
70464: LD_VAR 0 6
70468: PPUSH
70469: CALL_OW 272
70473: PPUSH
70474: LD_VAR 0 2
70478: PPUSH
70479: LD_VAR 0 5
70483: PPUSH
70484: LD_VAR 0 6
70488: PPUSH
70489: CALL_OW 273
70493: PPUSH
70494: LD_VAR 0 3
70498: PPUSH
70499: CALL_OW 309
70503: IFFALSE 70517
// begin result := true ;
70505: LD_ADDR_VAR 0 4
70509: PUSH
70510: LD_INT 1
70512: ST_TO_ADDR
// exit ;
70513: POP
70514: POP
70515: GO 70521
// end ;
70517: GO 70451
70519: POP
70520: POP
// end ;
70521: LD_VAR 0 4
70525: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
70526: LD_INT 0
70528: PPUSH
70529: PPUSH
70530: PPUSH
// if btype = b_depot then
70531: LD_VAR 0 2
70535: PUSH
70536: LD_INT 0
70538: EQUAL
70539: IFFALSE 70551
// begin result := true ;
70541: LD_ADDR_VAR 0 3
70545: PUSH
70546: LD_INT 1
70548: ST_TO_ADDR
// exit ;
70549: GO 70671
// end ; pom := GetBase ( depot ) ;
70551: LD_ADDR_VAR 0 4
70555: PUSH
70556: LD_VAR 0 1
70560: PPUSH
70561: CALL_OW 274
70565: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
70566: LD_ADDR_VAR 0 5
70570: PUSH
70571: LD_VAR 0 2
70575: PPUSH
70576: LD_VAR 0 1
70580: PPUSH
70581: CALL_OW 248
70585: PPUSH
70586: CALL_OW 450
70590: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
70591: LD_ADDR_VAR 0 3
70595: PUSH
70596: LD_VAR 0 4
70600: PPUSH
70601: LD_INT 1
70603: PPUSH
70604: CALL_OW 275
70608: PUSH
70609: LD_VAR 0 5
70613: PUSH
70614: LD_INT 1
70616: ARRAY
70617: GREATEREQUAL
70618: IFFALSE 70644
70620: PUSH
70621: LD_VAR 0 4
70625: PPUSH
70626: LD_INT 2
70628: PPUSH
70629: CALL_OW 275
70633: PUSH
70634: LD_VAR 0 5
70638: PUSH
70639: LD_INT 2
70641: ARRAY
70642: GREATEREQUAL
70643: AND
70644: IFFALSE 70670
70646: PUSH
70647: LD_VAR 0 4
70651: PPUSH
70652: LD_INT 3
70654: PPUSH
70655: CALL_OW 275
70659: PUSH
70660: LD_VAR 0 5
70664: PUSH
70665: LD_INT 3
70667: ARRAY
70668: GREATEREQUAL
70669: AND
70670: ST_TO_ADDR
// end ;
70671: LD_VAR 0 3
70675: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
70676: LD_INT 0
70678: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
70679: LD_VAR 0 1
70683: PPUSH
70684: LD_VAR 0 2
70688: PPUSH
70689: LD_INT 0
70691: PPUSH
70692: LD_INT 0
70694: PPUSH
70695: LD_INT 1
70697: PPUSH
70698: LD_INT 0
70700: PPUSH
70701: CALL_OW 587
// end ;
70705: LD_VAR 0 3
70709: RET
// export function CenterOnNow ( unit ) ; begin
70710: LD_INT 0
70712: PPUSH
// result := IsInUnit ( unit ) ;
70713: LD_ADDR_VAR 0 2
70717: PUSH
70718: LD_VAR 0 1
70722: PPUSH
70723: CALL_OW 310
70727: ST_TO_ADDR
// if not result then
70728: LD_VAR 0 2
70732: NOT
70733: IFFALSE 70745
// result := unit ;
70735: LD_ADDR_VAR 0 2
70739: PUSH
70740: LD_VAR 0 1
70744: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
70745: LD_VAR 0 1
70749: PPUSH
70750: CALL_OW 87
// end ;
70754: LD_VAR 0 2
70758: RET
// export function ComMoveHex ( unit , hex ) ; begin
70759: LD_INT 0
70761: PPUSH
// if not hex then
70762: LD_VAR 0 2
70766: NOT
70767: IFFALSE 70771
// exit ;
70769: GO 70824
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
70771: LD_VAR 0 2
70775: PUSH
70776: LD_INT 1
70778: ARRAY
70779: PPUSH
70780: LD_VAR 0 2
70784: PUSH
70785: LD_INT 2
70787: ARRAY
70788: PPUSH
70789: CALL_OW 428
70793: IFFALSE 70797
// exit ;
70795: GO 70824
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
70797: LD_VAR 0 1
70801: PPUSH
70802: LD_VAR 0 2
70806: PUSH
70807: LD_INT 1
70809: ARRAY
70810: PPUSH
70811: LD_VAR 0 2
70815: PUSH
70816: LD_INT 2
70818: ARRAY
70819: PPUSH
70820: CALL_OW 111
// end ;
70824: LD_VAR 0 3
70828: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
70829: LD_INT 0
70831: PPUSH
70832: PPUSH
70833: PPUSH
// if not unit or not enemy then
70834: LD_VAR 0 1
70838: NOT
70839: IFTRUE 70848
70841: PUSH
70842: LD_VAR 0 2
70846: NOT
70847: OR
70848: IFFALSE 70852
// exit ;
70850: GO 70978
// x := GetX ( enemy ) ;
70852: LD_ADDR_VAR 0 4
70856: PUSH
70857: LD_VAR 0 2
70861: PPUSH
70862: CALL_OW 250
70866: ST_TO_ADDR
// y := GetY ( enemy ) ;
70867: LD_ADDR_VAR 0 5
70871: PUSH
70872: LD_VAR 0 2
70876: PPUSH
70877: CALL_OW 251
70881: ST_TO_ADDR
// if ValidHex ( x , y ) then
70882: LD_VAR 0 4
70886: PPUSH
70887: LD_VAR 0 5
70891: PPUSH
70892: CALL_OW 488
70896: IFFALSE 70978
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
70898: LD_VAR 0 2
70902: PPUSH
70903: CALL_OW 247
70907: PUSH
70908: LD_INT 3
70910: PUSH
70911: LD_INT 2
70913: PUSH
70914: EMPTY
70915: LIST
70916: LIST
70917: IN
70918: IFTRUE 70941
70920: PUSH
70921: LD_VAR 0 1
70925: PPUSH
70926: CALL_OW 255
70930: PPUSH
70931: LD_VAR 0 2
70935: PPUSH
70936: CALL_OW 292
70940: OR
70941: IFFALSE 70959
// ComAttackUnit ( unit , enemy ) else
70943: LD_VAR 0 1
70947: PPUSH
70948: LD_VAR 0 2
70952: PPUSH
70953: CALL_OW 115
70957: GO 70978
// ComAgressiveMove ( unit , x , y ) ;
70959: LD_VAR 0 1
70963: PPUSH
70964: LD_VAR 0 4
70968: PPUSH
70969: LD_VAR 0 5
70973: PPUSH
70974: CALL_OW 114
// end ;
70978: LD_VAR 0 3
70982: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
70983: LD_INT 0
70985: PPUSH
70986: PPUSH
70987: PPUSH
// list := AreaToList ( area , 0 ) ;
70988: LD_ADDR_VAR 0 5
70992: PUSH
70993: LD_VAR 0 1
70997: PPUSH
70998: LD_INT 0
71000: PPUSH
71001: CALL_OW 517
71005: ST_TO_ADDR
// if not list then
71006: LD_VAR 0 5
71010: NOT
71011: IFFALSE 71015
// exit ;
71013: GO 71145
// if all then
71015: LD_VAR 0 2
71019: IFFALSE 71107
// begin for i := 1 to list [ 1 ] do
71021: LD_ADDR_VAR 0 4
71025: PUSH
71026: DOUBLE
71027: LD_INT 1
71029: DEC
71030: ST_TO_ADDR
71031: LD_VAR 0 5
71035: PUSH
71036: LD_INT 1
71038: ARRAY
71039: PUSH
71040: FOR_TO
71041: IFFALSE 71103
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
71043: LD_ADDR_VAR 0 3
71047: PUSH
71048: LD_VAR 0 3
71052: PPUSH
71053: LD_VAR 0 3
71057: PUSH
71058: LD_INT 1
71060: PLUS
71061: PPUSH
71062: LD_VAR 0 5
71066: PUSH
71067: LD_INT 1
71069: ARRAY
71070: PUSH
71071: LD_VAR 0 4
71075: ARRAY
71076: PUSH
71077: LD_VAR 0 5
71081: PUSH
71082: LD_INT 2
71084: ARRAY
71085: PUSH
71086: LD_VAR 0 4
71090: ARRAY
71091: PUSH
71092: EMPTY
71093: LIST
71094: LIST
71095: PPUSH
71096: CALL_OW 1
71100: ST_TO_ADDR
71101: GO 71040
71103: POP
71104: POP
// exit ;
71105: GO 71145
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
71107: LD_ADDR_VAR 0 3
71111: PUSH
71112: LD_VAR 0 5
71116: PUSH
71117: LD_INT 1
71119: ARRAY
71120: PUSH
71121: LD_INT 1
71123: ARRAY
71124: PUSH
71125: LD_VAR 0 5
71129: PUSH
71130: LD_INT 2
71132: ARRAY
71133: PUSH
71134: LD_INT 1
71136: ARRAY
71137: PUSH
71138: EMPTY
71139: LIST
71140: LIST
71141: PUSH
71142: EMPTY
71143: LIST
71144: ST_TO_ADDR
// end ;
71145: LD_VAR 0 3
71149: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
71150: LD_INT 0
71152: PPUSH
71153: PPUSH
// list := AreaToList ( area , 0 ) ;
71154: LD_ADDR_VAR 0 4
71158: PUSH
71159: LD_VAR 0 1
71163: PPUSH
71164: LD_INT 0
71166: PPUSH
71167: CALL_OW 517
71171: ST_TO_ADDR
// if not list then
71172: LD_VAR 0 4
71176: NOT
71177: IFFALSE 71181
// exit ;
71179: GO 71222
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
71181: LD_ADDR_VAR 0 3
71185: PUSH
71186: LD_VAR 0 4
71190: PUSH
71191: LD_INT 1
71193: ARRAY
71194: PUSH
71195: LD_INT 1
71197: ARRAY
71198: PUSH
71199: LD_VAR 0 4
71203: PUSH
71204: LD_INT 2
71206: ARRAY
71207: PUSH
71208: LD_INT 1
71210: ARRAY
71211: PUSH
71212: LD_VAR 0 2
71216: PUSH
71217: EMPTY
71218: LIST
71219: LIST
71220: LIST
71221: ST_TO_ADDR
// end ;
71222: LD_VAR 0 3
71226: RET
// export function First ( array ) ; begin
71227: LD_INT 0
71229: PPUSH
// if not array then
71230: LD_VAR 0 1
71234: NOT
71235: IFFALSE 71239
// exit ;
71237: GO 71253
// result := array [ 1 ] ;
71239: LD_ADDR_VAR 0 2
71243: PUSH
71244: LD_VAR 0 1
71248: PUSH
71249: LD_INT 1
71251: ARRAY
71252: ST_TO_ADDR
// end ;
71253: LD_VAR 0 2
71257: RET
// export function Last ( array ) ; begin
71258: LD_INT 0
71260: PPUSH
// if not array then
71261: LD_VAR 0 1
71265: NOT
71266: IFFALSE 71270
// exit ;
71268: GO 71286
// result := array [ array ] ;
71270: LD_ADDR_VAR 0 2
71274: PUSH
71275: LD_VAR 0 1
71279: PUSH
71280: LD_VAR 0 1
71284: ARRAY
71285: ST_TO_ADDR
// end ;
71286: LD_VAR 0 2
71290: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
71291: LD_INT 0
71293: PPUSH
71294: PPUSH
// result := [ ] ;
71295: LD_ADDR_VAR 0 5
71299: PUSH
71300: EMPTY
71301: ST_TO_ADDR
// if not array then
71302: LD_VAR 0 1
71306: NOT
71307: IFFALSE 71311
// exit ;
71309: GO 71423
// for i := 1 to array do
71311: LD_ADDR_VAR 0 6
71315: PUSH
71316: DOUBLE
71317: LD_INT 1
71319: DEC
71320: ST_TO_ADDR
71321: LD_VAR 0 1
71325: PUSH
71326: FOR_TO
71327: IFFALSE 71421
// if array [ i ] [ index ] = value then
71329: LD_VAR 0 1
71333: PUSH
71334: LD_VAR 0 6
71338: ARRAY
71339: PUSH
71340: LD_VAR 0 2
71344: ARRAY
71345: PUSH
71346: LD_VAR 0 3
71350: EQUAL
71351: IFFALSE 71419
// begin if indexColumn then
71353: LD_VAR 0 4
71357: IFFALSE 71393
// result := Join ( result , array [ i ] [ indexColumn ] ) else
71359: LD_ADDR_VAR 0 5
71363: PUSH
71364: LD_VAR 0 5
71368: PPUSH
71369: LD_VAR 0 1
71373: PUSH
71374: LD_VAR 0 6
71378: ARRAY
71379: PUSH
71380: LD_VAR 0 4
71384: ARRAY
71385: PPUSH
71386: CALL 66431 0 2
71390: ST_TO_ADDR
71391: GO 71419
// result := Join ( result , array [ i ] ) ;
71393: LD_ADDR_VAR 0 5
71397: PUSH
71398: LD_VAR 0 5
71402: PPUSH
71403: LD_VAR 0 1
71407: PUSH
71408: LD_VAR 0 6
71412: ARRAY
71413: PPUSH
71414: CALL 66431 0 2
71418: ST_TO_ADDR
// end ;
71419: GO 71326
71421: POP
71422: POP
// end ;
71423: LD_VAR 0 5
71427: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
71428: LD_INT 0
71430: PPUSH
// if not vehicles or not parkingPoint then
71431: LD_VAR 0 1
71435: NOT
71436: IFTRUE 71445
71438: PUSH
71439: LD_VAR 0 2
71443: NOT
71444: OR
71445: IFFALSE 71449
// exit ;
71447: GO 71547
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
71449: LD_ADDR_VAR 0 1
71453: PUSH
71454: LD_VAR 0 1
71458: PPUSH
71459: LD_INT 50
71461: PUSH
71462: EMPTY
71463: LIST
71464: PUSH
71465: LD_INT 3
71467: PUSH
71468: LD_INT 92
71470: PUSH
71471: LD_VAR 0 2
71475: PUSH
71476: LD_INT 1
71478: ARRAY
71479: PUSH
71480: LD_VAR 0 2
71484: PUSH
71485: LD_INT 2
71487: ARRAY
71488: PUSH
71489: LD_INT 8
71491: PUSH
71492: EMPTY
71493: LIST
71494: LIST
71495: LIST
71496: LIST
71497: PUSH
71498: EMPTY
71499: LIST
71500: LIST
71501: PUSH
71502: EMPTY
71503: LIST
71504: LIST
71505: PPUSH
71506: CALL_OW 72
71510: ST_TO_ADDR
// if not vehicles then
71511: LD_VAR 0 1
71515: NOT
71516: IFFALSE 71520
// exit ;
71518: GO 71547
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
71520: LD_VAR 0 1
71524: PPUSH
71525: LD_VAR 0 2
71529: PUSH
71530: LD_INT 1
71532: ARRAY
71533: PPUSH
71534: LD_VAR 0 2
71538: PUSH
71539: LD_INT 2
71541: ARRAY
71542: PPUSH
71543: CALL_OW 111
// end ;
71547: LD_VAR 0 3
71551: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
71552: LD_INT 0
71554: PPUSH
71555: PPUSH
71556: PPUSH
// if not side or not area then
71557: LD_VAR 0 1
71561: NOT
71562: IFTRUE 71571
71564: PUSH
71565: LD_VAR 0 2
71569: NOT
71570: OR
71571: IFFALSE 71575
// exit ;
71573: GO 71694
// tmp := AreaToList ( area , 0 ) ;
71575: LD_ADDR_VAR 0 5
71579: PUSH
71580: LD_VAR 0 2
71584: PPUSH
71585: LD_INT 0
71587: PPUSH
71588: CALL_OW 517
71592: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
71593: LD_ADDR_VAR 0 4
71597: PUSH
71598: DOUBLE
71599: LD_INT 1
71601: DEC
71602: ST_TO_ADDR
71603: LD_VAR 0 5
71607: PUSH
71608: LD_INT 1
71610: ARRAY
71611: PUSH
71612: FOR_TO
71613: IFFALSE 71692
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
71615: LD_VAR 0 5
71619: PUSH
71620: LD_INT 1
71622: ARRAY
71623: PUSH
71624: LD_VAR 0 4
71628: ARRAY
71629: PPUSH
71630: LD_VAR 0 5
71634: PUSH
71635: LD_INT 2
71637: ARRAY
71638: PUSH
71639: LD_VAR 0 4
71643: ARRAY
71644: PPUSH
71645: CALL_OW 351
71649: IFFALSE 71690
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
71651: LD_VAR 0 5
71655: PUSH
71656: LD_INT 1
71658: ARRAY
71659: PUSH
71660: LD_VAR 0 4
71664: ARRAY
71665: PPUSH
71666: LD_VAR 0 5
71670: PUSH
71671: LD_INT 2
71673: ARRAY
71674: PUSH
71675: LD_VAR 0 4
71679: ARRAY
71680: PPUSH
71681: LD_VAR 0 1
71685: PPUSH
71686: CALL_OW 244
// end ;
71690: GO 71612
71692: POP
71693: POP
// end ;
71694: LD_VAR 0 3
71698: RET
// export function UniqueArray ( array ) ; var i ; begin
71699: LD_INT 0
71701: PPUSH
71702: PPUSH
// result := [ ] ;
71703: LD_ADDR_VAR 0 2
71707: PUSH
71708: EMPTY
71709: ST_TO_ADDR
// if not array then
71710: LD_VAR 0 1
71714: NOT
71715: IFFALSE 71719
// exit ;
71717: GO 71780
// for i := 1 to array do
71719: LD_ADDR_VAR 0 3
71723: PUSH
71724: DOUBLE
71725: LD_INT 1
71727: DEC
71728: ST_TO_ADDR
71729: LD_VAR 0 1
71733: PUSH
71734: FOR_TO
71735: IFFALSE 71778
// if not array [ i ] in result then
71737: LD_VAR 0 1
71741: PUSH
71742: LD_VAR 0 3
71746: ARRAY
71747: PUSH
71748: LD_VAR 0 2
71752: IN
71753: NOT
71754: IFFALSE 71776
// result := Join ( result , i ) ;
71756: LD_ADDR_VAR 0 2
71760: PUSH
71761: LD_VAR 0 2
71765: PPUSH
71766: LD_VAR 0 3
71770: PPUSH
71771: CALL 66431 0 2
71775: ST_TO_ADDR
71776: GO 71734
71778: POP
71779: POP
// end ; end_of_file
71780: LD_VAR 0 2
71784: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
71785: LD_VAR 0 1
71789: PPUSH
71790: LD_VAR 0 2
71794: PPUSH
71795: LD_VAR 0 3
71799: PPUSH
71800: LD_VAR 0 4
71804: PPUSH
71805: LD_VAR 0 5
71809: PPUSH
71810: LD_VAR 0 6
71814: PPUSH
71815: CALL 6165 0 6
// end ;
71819: PPOPN 6
71821: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
71822: LD_INT 0
71824: PPUSH
// begin if not units then
71825: LD_VAR 0 1
71829: NOT
71830: IFFALSE 71834
// exit ;
71832: GO 71868
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
71834: LD_VAR 0 1
71838: PPUSH
71839: LD_VAR 0 2
71843: PPUSH
71844: LD_VAR 0 3
71848: PPUSH
71849: LD_VAR 0 4
71853: PPUSH
71854: LD_VAR 0 5
71858: PPUSH
71859: LD_VAR 0 6
71863: PPUSH
71864: CALL 28248 0 6
// end ;
71868: PPOPN 7
71870: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
71871: CALL 6052 0 0
// end ; end_of_file
71875: PPOPN 1
71877: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
71878: LD_VAR 0 1
71882: PUSH
71883: LD_INT 200
71885: DOUBLE
71886: GREATEREQUAL
71887: IFFALSE 71895
71889: LD_INT 299
71891: DOUBLE
71892: LESSEQUAL
71893: IFTRUE 71897
71895: GO 71929
71897: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
71898: LD_VAR 0 1
71902: PPUSH
71903: LD_VAR 0 2
71907: PPUSH
71908: LD_VAR 0 3
71912: PPUSH
71913: LD_VAR 0 4
71917: PPUSH
71918: LD_VAR 0 5
71922: PPUSH
71923: CALL 22741 0 5
71927: GO 72006
71929: LD_INT 300
71931: DOUBLE
71932: GREATEREQUAL
71933: IFFALSE 71941
71935: LD_INT 399
71937: DOUBLE
71938: LESSEQUAL
71939: IFTRUE 71943
71941: GO 72005
71943: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
71944: LD_VAR 0 1
71948: PPUSH
71949: LD_VAR 0 2
71953: PPUSH
71954: LD_VAR 0 3
71958: PPUSH
71959: LD_VAR 0 4
71963: PPUSH
71964: LD_VAR 0 5
71968: PPUSH
71969: LD_VAR 0 6
71973: PPUSH
71974: LD_VAR 0 7
71978: PPUSH
71979: LD_VAR 0 8
71983: PPUSH
71984: LD_VAR 0 9
71988: PPUSH
71989: LD_VAR 0 10
71993: PPUSH
71994: LD_VAR 0 11
71998: PPUSH
71999: CALL 18625 0 11
72003: GO 72006
72005: POP
// end ;
72006: PPOPN 11
72008: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
72009: LD_VAR 0 1
72013: PPUSH
72014: LD_VAR 0 2
72018: PPUSH
72019: LD_VAR 0 3
72023: PPUSH
72024: LD_VAR 0 4
72028: PPUSH
72029: LD_VAR 0 5
72033: PPUSH
72034: CALL 22122 0 5
// end ;
72038: PPOPN 5
72040: END
