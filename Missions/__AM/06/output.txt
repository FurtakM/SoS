// export JMM , Gladstone , Denis , Lisa , Frank , Bobby , Cyrus , Brown , Donaldson ; export others , randomsDelta ; export apemans , yourApemans ; export yourVehicles ; export DeltaDoctor ; export Harisson ; export selectedPeople ; export baseCorrect ; export cutscene ; export lab ; export resources ; export mission_prefix , mission_prefix_prev ; starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// FogOff ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 344
// baseCorrect = 0 ;
  15: LD_ADDR_EXP 18
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// cutscene = 1 ;
  23: LD_ADDR_EXP 19
  27: PUSH
  28: LD_INT 1
  30: ST_TO_ADDR
// apemans = [ ] ;
  31: LD_ADDR_EXP 12
  35: PUSH
  36: EMPTY
  37: ST_TO_ADDR
// yourApemans = [ ] ;
  38: LD_ADDR_EXP 13
  42: PUSH
  43: EMPTY
  44: ST_TO_ADDR
// yourVehicles = [ ] ;
  45: LD_ADDR_EXP 14
  49: PUSH
  50: EMPTY
  51: ST_TO_ADDR
// randomsDelta := [ ] ;
  52: LD_ADDR_EXP 11
  56: PUSH
  57: EMPTY
  58: ST_TO_ADDR
// resources = [ ] ;
  59: LD_ADDR_EXP 21
  63: PUSH
  64: EMPTY
  65: ST_TO_ADDR
// mission_prefix := 06_ ;
  66: LD_ADDR_EXP 22
  70: PUSH
  71: LD_STRING 06_
  73: ST_TO_ADDR
// mission_prefix_prev := 05_ ;
  74: LD_ADDR_EXP 23
  78: PUSH
  79: LD_STRING 05_
  81: ST_TO_ADDR
// CreateNature ;
  82: CALL 166 0 0
// PrepareDeltaBase ;
  86: CALL 2408 0 0
// LoadVehicles ;
  90: CALL 1448 0 0
// PrepareHeroes ;
  94: CALL 287 0 0
// PrepareRandoms ;
  98: CALL 1749 0 0
// lab = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
 102: LD_ADDR_EXP 20
 106: PUSH
 107: LD_INT 22
 109: PUSH
 110: LD_INT 1
 112: PUSH
 113: EMPTY
 114: LIST
 115: LIST
 116: PUSH
 117: LD_INT 2
 119: PUSH
 120: LD_INT 30
 122: PUSH
 123: LD_INT 6
 125: PUSH
 126: EMPTY
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 30
 132: PUSH
 133: LD_INT 7
 135: PUSH
 136: EMPTY
 137: LIST
 138: LIST
 139: PUSH
 140: LD_INT 30
 142: PUSH
 143: LD_INT 8
 145: PUSH
 146: EMPTY
 147: LIST
 148: LIST
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: LIST
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: PPUSH
 160: CALL_OW 69
 164: ST_TO_ADDR
// end ;
 165: END
// export function CreateNature ; var i ; begin
 166: LD_INT 0
 168: PPUSH
 169: PPUSH
// uc_side := 0 ;
 170: LD_ADDR_OWVAR 20
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// uc_nation := 0 ;
 178: LD_ADDR_OWVAR 21
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// for i = 1 to 4 do
 186: LD_ADDR_VAR 0 2
 190: PUSH
 191: DOUBLE
 192: LD_INT 1
 194: DEC
 195: ST_TO_ADDR
 196: LD_INT 4
 198: PUSH
 199: FOR_TO
 200: IFFALSE 280
// begin hc_gallery :=  ;
 202: LD_ADDR_OWVAR 33
 206: PUSH
 207: LD_STRING 
 209: ST_TO_ADDR
// hc_name :=  ;
 210: LD_ADDR_OWVAR 26
 214: PUSH
 215: LD_STRING 
 217: ST_TO_ADDR
// hc_attr := [ rand ( 10 , 11 ) , rand ( 10 , 12 ) ] ;
 218: LD_ADDR_OWVAR 29
 222: PUSH
 223: LD_INT 10
 225: PPUSH
 226: LD_INT 11
 228: PPUSH
 229: CALL_OW 12
 233: PUSH
 234: LD_INT 10
 236: PPUSH
 237: LD_INT 12
 239: PPUSH
 240: CALL_OW 12
 244: PUSH
 245: EMPTY
 246: LIST
 247: LIST
 248: ST_TO_ADDR
// hc_class := class_apeman ;
 249: LD_ADDR_OWVAR 28
 253: PUSH
 254: LD_INT 12
 256: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , 22 , 18 , 20 , false ) ;
 257: CALL_OW 44
 261: PPUSH
 262: LD_INT 22
 264: PPUSH
 265: LD_INT 18
 267: PPUSH
 268: LD_INT 20
 270: PPUSH
 271: LD_INT 0
 273: PPUSH
 274: CALL_OW 50
// end ;
 278: GO 199
 280: POP
 281: POP
// end ; end_of_file
 282: LD_VAR 0 1
 286: RET
// export function PrepareHeroes ; var i , tmp , ape , test ; begin
 287: LD_INT 0
 289: PPUSH
 290: PPUSH
 291: PPUSH
 292: PPUSH
 293: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
 294: LD_ADDR_VAR 0 3
 298: PUSH
 299: LD_INT 22
 301: PUSH
 302: LD_INT 1
 304: PUSH
 305: EMPTY
 306: LIST
 307: LIST
 308: PUSH
 309: LD_INT 21
 311: PUSH
 312: LD_INT 3
 314: PUSH
 315: EMPTY
 316: LIST
 317: LIST
 318: PUSH
 319: LD_INT 30
 321: PUSH
 322: LD_INT 0
 324: PUSH
 325: EMPTY
 326: LIST
 327: LIST
 328: PUSH
 329: EMPTY
 330: LIST
 331: LIST
 332: LIST
 333: PPUSH
 334: CALL_OW 69
 338: ST_TO_ADDR
// SetBName ( tmp [ 1 ] , delta ) ;
 339: LD_VAR 0 3
 343: PUSH
 344: LD_INT 1
 346: ARRAY
 347: PPUSH
 348: LD_STRING delta
 350: PPUSH
 351: CALL_OW 500
// uc_side = 1 ;
 355: LD_ADDR_OWVAR 20
 359: PUSH
 360: LD_INT 1
 362: ST_TO_ADDR
// uc_nation = 1 ;
 363: LD_ADDR_OWVAR 21
 367: PUSH
 368: LD_INT 1
 370: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true , mission_prefix_prev ) ;
 371: LD_ADDR_EXP 1
 375: PUSH
 376: LD_STRING JMM
 378: PPUSH
 379: LD_INT 1
 381: PPUSH
 382: LD_EXP 23
 386: PPUSH
 387: CALL 24962 0 3
 391: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ,  ) ;
 392: LD_ADDR_EXP 16
 396: PUSH
 397: LD_STRING Harisson
 399: PPUSH
 400: LD_INT 0
 402: PPUSH
 403: LD_STRING 
 405: PPUSH
 406: CALL 24962 0 3
 410: ST_TO_ADDR
// PlaceUnitXYR ( JMM , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 411: LD_EXP 1
 415: PPUSH
 416: LD_VAR 0 3
 420: PUSH
 421: LD_INT 1
 423: ARRAY
 424: PPUSH
 425: CALL_OW 250
 429: PPUSH
 430: LD_VAR 0 3
 434: PUSH
 435: LD_INT 1
 437: ARRAY
 438: PPUSH
 439: CALL_OW 251
 443: PPUSH
 444: LD_INT 5
 446: PPUSH
 447: LD_INT 0
 449: PPUSH
 450: CALL_OW 50
// SetClass ( JMM , 1 ) ;
 454: LD_EXP 1
 458: PPUSH
 459: LD_INT 1
 461: PPUSH
 462: CALL_OW 336
// Gladstone = PrepareUnit ( Gladstone , true , mission_prefix_prev ) ;
 466: LD_ADDR_EXP 2
 470: PUSH
 471: LD_STRING Gladstone
 473: PPUSH
 474: LD_INT 1
 476: PPUSH
 477: LD_EXP 23
 481: PPUSH
 482: CALL 24962 0 3
 486: ST_TO_ADDR
// PlaceUnitXYR ( Gladstone , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 487: LD_EXP 2
 491: PPUSH
 492: LD_VAR 0 3
 496: PUSH
 497: LD_INT 1
 499: ARRAY
 500: PPUSH
 501: CALL_OW 250
 505: PPUSH
 506: LD_VAR 0 3
 510: PUSH
 511: LD_INT 1
 513: ARRAY
 514: PPUSH
 515: CALL_OW 251
 519: PPUSH
 520: LD_INT 5
 522: PPUSH
 523: LD_INT 0
 525: PPUSH
 526: CALL_OW 50
// SetClass ( Gladstone , 4 ) ;
 530: LD_EXP 2
 534: PPUSH
 535: LD_INT 4
 537: PPUSH
 538: CALL_OW 336
// Denis = PrepareUnit ( Denis , true , mission_prefix_prev ) ;
 542: LD_ADDR_EXP 3
 546: PUSH
 547: LD_STRING Denis
 549: PPUSH
 550: LD_INT 1
 552: PPUSH
 553: LD_EXP 23
 557: PPUSH
 558: CALL 24962 0 3
 562: ST_TO_ADDR
// PlaceUnitXYR ( Denis , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 563: LD_EXP 3
 567: PPUSH
 568: LD_VAR 0 3
 572: PUSH
 573: LD_INT 1
 575: ARRAY
 576: PPUSH
 577: CALL_OW 250
 581: PPUSH
 582: LD_VAR 0 3
 586: PUSH
 587: LD_INT 1
 589: ARRAY
 590: PPUSH
 591: CALL_OW 251
 595: PPUSH
 596: LD_INT 5
 598: PPUSH
 599: LD_INT 0
 601: PPUSH
 602: CALL_OW 50
// SetClass ( Denis , 4 ) ;
 606: LD_EXP 3
 610: PPUSH
 611: LD_INT 4
 613: PPUSH
 614: CALL_OW 336
// if LoadVariable ( FrankInDelta , 0 ) = 1 then
 618: LD_STRING FrankInDelta
 620: PPUSH
 621: LD_INT 0
 623: PPUSH
 624: CALL_OW 30
 628: PUSH
 629: LD_INT 1
 631: EQUAL
 632: IFFALSE 710
// begin Frank = PrepareUnit ( Frank , true , mission_prefix_prev ) ;
 634: LD_ADDR_EXP 5
 638: PUSH
 639: LD_STRING Frank
 641: PPUSH
 642: LD_INT 1
 644: PPUSH
 645: LD_EXP 23
 649: PPUSH
 650: CALL 24962 0 3
 654: ST_TO_ADDR
// PlaceUnitXYR ( Frank , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 655: LD_EXP 5
 659: PPUSH
 660: LD_VAR 0 3
 664: PUSH
 665: LD_INT 1
 667: ARRAY
 668: PPUSH
 669: CALL_OW 250
 673: PPUSH
 674: LD_VAR 0 3
 678: PUSH
 679: LD_INT 1
 681: ARRAY
 682: PPUSH
 683: CALL_OW 251
 687: PPUSH
 688: LD_INT 5
 690: PPUSH
 691: LD_INT 0
 693: PPUSH
 694: CALL_OW 50
// SetClass ( Frank , 1 ) ;
 698: LD_EXP 5
 702: PPUSH
 703: LD_INT 1
 705: PPUSH
 706: CALL_OW 336
// end ; if LoadVariable ( LisaInDelta , 0 ) = 1 then
 710: LD_STRING LisaInDelta
 712: PPUSH
 713: LD_INT 0
 715: PPUSH
 716: CALL_OW 30
 720: PUSH
 721: LD_INT 1
 723: EQUAL
 724: IFFALSE 802
// begin Lisa = PrepareUnit ( Lisa , true , mission_prefix_prev ) ;
 726: LD_ADDR_EXP 4
 730: PUSH
 731: LD_STRING Lisa
 733: PPUSH
 734: LD_INT 1
 736: PPUSH
 737: LD_EXP 23
 741: PPUSH
 742: CALL 24962 0 3
 746: ST_TO_ADDR
// PlaceUnitXYR ( Lisa , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 747: LD_EXP 4
 751: PPUSH
 752: LD_VAR 0 3
 756: PUSH
 757: LD_INT 1
 759: ARRAY
 760: PPUSH
 761: CALL_OW 250
 765: PPUSH
 766: LD_VAR 0 3
 770: PUSH
 771: LD_INT 1
 773: ARRAY
 774: PPUSH
 775: CALL_OW 251
 779: PPUSH
 780: LD_INT 5
 782: PPUSH
 783: LD_INT 0
 785: PPUSH
 786: CALL_OW 50
// SetClass ( Lisa , 1 ) ;
 790: LD_EXP 4
 794: PPUSH
 795: LD_INT 1
 797: PPUSH
 798: CALL_OW 336
// end ; if LoadVariable ( BobbyInDelta , 0 ) = 1 then
 802: LD_STRING BobbyInDelta
 804: PPUSH
 805: LD_INT 0
 807: PPUSH
 808: CALL_OW 30
 812: PUSH
 813: LD_INT 1
 815: EQUAL
 816: IFFALSE 894
// begin Bobby = PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 818: LD_ADDR_EXP 6
 822: PUSH
 823: LD_STRING Bobby
 825: PPUSH
 826: LD_INT 1
 828: PPUSH
 829: LD_EXP 23
 833: PPUSH
 834: CALL 24962 0 3
 838: ST_TO_ADDR
// PlaceUnitXYR ( Bobby , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 839: LD_EXP 6
 843: PPUSH
 844: LD_VAR 0 3
 848: PUSH
 849: LD_INT 1
 851: ARRAY
 852: PPUSH
 853: CALL_OW 250
 857: PPUSH
 858: LD_VAR 0 3
 862: PUSH
 863: LD_INT 1
 865: ARRAY
 866: PPUSH
 867: CALL_OW 251
 871: PPUSH
 872: LD_INT 5
 874: PPUSH
 875: LD_INT 0
 877: PPUSH
 878: CALL_OW 50
// SetClass ( Bobby , 1 ) ;
 882: LD_EXP 6
 886: PPUSH
 887: LD_INT 1
 889: PPUSH
 890: CALL_OW 336
// end ; if LoadVariable ( CyrusInDelta , 0 ) = 1 then
 894: LD_STRING CyrusInDelta
 896: PPUSH
 897: LD_INT 0
 899: PPUSH
 900: CALL_OW 30
 904: PUSH
 905: LD_INT 1
 907: EQUAL
 908: IFFALSE 986
// begin Cyrus = PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
 910: LD_ADDR_EXP 7
 914: PUSH
 915: LD_STRING Cyrus
 917: PPUSH
 918: LD_INT 1
 920: PPUSH
 921: LD_EXP 23
 925: PPUSH
 926: CALL 24962 0 3
 930: ST_TO_ADDR
// PlaceUnitXYR ( Cyrus , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 931: LD_EXP 7
 935: PPUSH
 936: LD_VAR 0 3
 940: PUSH
 941: LD_INT 1
 943: ARRAY
 944: PPUSH
 945: CALL_OW 250
 949: PPUSH
 950: LD_VAR 0 3
 954: PUSH
 955: LD_INT 1
 957: ARRAY
 958: PPUSH
 959: CALL_OW 251
 963: PPUSH
 964: LD_INT 5
 966: PPUSH
 967: LD_INT 0
 969: PPUSH
 970: CALL_OW 50
// SetClass ( Cyrus , 1 ) ;
 974: LD_EXP 7
 978: PPUSH
 979: LD_INT 1
 981: PPUSH
 982: CALL_OW 336
// end ; if LoadVariable ( DonaldsonInDelta , 0 ) = 1 then
 986: LD_STRING DonaldsonInDelta
 988: PPUSH
 989: LD_INT 0
 991: PPUSH
 992: CALL_OW 30
 996: PUSH
 997: LD_INT 1
 999: EQUAL
1000: IFFALSE 1078
// begin Donaldson = PrepareUnit ( Donaldson , true , mission_prefix_prev ) ;
1002: LD_ADDR_EXP 9
1006: PUSH
1007: LD_STRING Donaldson
1009: PPUSH
1010: LD_INT 1
1012: PPUSH
1013: LD_EXP 23
1017: PPUSH
1018: CALL 24962 0 3
1022: ST_TO_ADDR
// PlaceUnitXYR ( Donaldson , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1023: LD_EXP 9
1027: PPUSH
1028: LD_VAR 0 3
1032: PUSH
1033: LD_INT 1
1035: ARRAY
1036: PPUSH
1037: CALL_OW 250
1041: PPUSH
1042: LD_VAR 0 3
1046: PUSH
1047: LD_INT 1
1049: ARRAY
1050: PPUSH
1051: CALL_OW 251
1055: PPUSH
1056: LD_INT 5
1058: PPUSH
1059: LD_INT 0
1061: PPUSH
1062: CALL_OW 50
// SetClass ( Donaldson , 1 ) ;
1066: LD_EXP 9
1070: PPUSH
1071: LD_INT 1
1073: PPUSH
1074: CALL_OW 336
// end ; if LoadVariable ( BrownInDelta , 0 ) = 1 then
1078: LD_STRING BrownInDelta
1080: PPUSH
1081: LD_INT 0
1083: PPUSH
1084: CALL_OW 30
1088: PUSH
1089: LD_INT 1
1091: EQUAL
1092: IFFALSE 1170
// begin Brown = PrepareUnit ( Brown , true , mission_prefix_prev ) ;
1094: LD_ADDR_EXP 8
1098: PUSH
1099: LD_STRING Brown
1101: PPUSH
1102: LD_INT 1
1104: PPUSH
1105: LD_EXP 23
1109: PPUSH
1110: CALL 24962 0 3
1114: ST_TO_ADDR
// PlaceUnitXYR ( Brown , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1115: LD_EXP 8
1119: PPUSH
1120: LD_VAR 0 3
1124: PUSH
1125: LD_INT 1
1127: ARRAY
1128: PPUSH
1129: CALL_OW 250
1133: PPUSH
1134: LD_VAR 0 3
1138: PUSH
1139: LD_INT 1
1141: ARRAY
1142: PPUSH
1143: CALL_OW 251
1147: PPUSH
1148: LD_INT 5
1150: PPUSH
1151: LD_INT 0
1153: PPUSH
1154: CALL_OW 50
// SetClass ( Brown , 2 ) ;
1158: LD_EXP 8
1162: PPUSH
1163: LD_INT 2
1165: PPUSH
1166: CALL_OW 336
// end ; others = CreateCharacterSet ( othersInDelta ) ;
1170: LD_ADDR_EXP 10
1174: PUSH
1175: LD_STRING othersInDelta
1177: PPUSH
1178: CALL_OW 31
1182: ST_TO_ADDR
// for i in others do
1183: LD_ADDR_VAR 0 2
1187: PUSH
1188: LD_EXP 10
1192: PUSH
1193: FOR_IN
1194: IFFALSE 1241
// PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1196: LD_VAR 0 2
1200: PPUSH
1201: LD_VAR 0 3
1205: PUSH
1206: LD_INT 1
1208: ARRAY
1209: PPUSH
1210: CALL_OW 250
1214: PPUSH
1215: LD_VAR 0 3
1219: PUSH
1220: LD_INT 1
1222: ARRAY
1223: PPUSH
1224: CALL_OW 251
1228: PPUSH
1229: LD_INT 35
1231: PPUSH
1232: LD_INT 0
1234: PPUSH
1235: CALL_OW 50
1239: GO 1193
1241: POP
1242: POP
// apemans = CreateCharacterSet ( apeInDelta ) ;
1243: LD_ADDR_EXP 12
1247: PUSH
1248: LD_STRING apeInDelta
1250: PPUSH
1251: CALL_OW 31
1255: ST_TO_ADDR
// uc_nation = 0 ;
1256: LD_ADDR_OWVAR 21
1260: PUSH
1261: LD_INT 0
1263: ST_TO_ADDR
// if apemans > 5 then
1264: LD_EXP 12
1268: PUSH
1269: LD_INT 5
1271: GREATER
1272: IFFALSE 1367
// begin for i := 1 to 5 do
1274: LD_ADDR_VAR 0 2
1278: PUSH
1279: DOUBLE
1280: LD_INT 1
1282: DEC
1283: ST_TO_ADDR
1284: LD_INT 5
1286: PUSH
1287: FOR_TO
1288: IFFALSE 1363
// begin PlaceUnitXYR ( apemans [ i ] , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1290: LD_EXP 12
1294: PUSH
1295: LD_VAR 0 2
1299: ARRAY
1300: PPUSH
1301: LD_VAR 0 3
1305: PUSH
1306: LD_INT 1
1308: ARRAY
1309: PPUSH
1310: CALL_OW 250
1314: PPUSH
1315: LD_VAR 0 3
1319: PUSH
1320: LD_INT 1
1322: ARRAY
1323: PPUSH
1324: CALL_OW 251
1328: PPUSH
1329: LD_INT 50
1331: PPUSH
1332: LD_INT 0
1334: PPUSH
1335: CALL_OW 50
// yourApemans = yourApemans ^ apemans [ i ] ;
1339: LD_ADDR_EXP 13
1343: PUSH
1344: LD_EXP 13
1348: PUSH
1349: LD_EXP 12
1353: PUSH
1354: LD_VAR 0 2
1358: ARRAY
1359: ADD
1360: ST_TO_ADDR
// end ;
1361: GO 1287
1363: POP
1364: POP
// end else
1365: GO 1443
// begin for i in apemans do
1367: LD_ADDR_VAR 0 2
1371: PUSH
1372: LD_EXP 12
1376: PUSH
1377: FOR_IN
1378: IFFALSE 1441
// begin PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1380: LD_VAR 0 2
1384: PPUSH
1385: LD_VAR 0 3
1389: PUSH
1390: LD_INT 1
1392: ARRAY
1393: PPUSH
1394: CALL_OW 250
1398: PPUSH
1399: LD_VAR 0 3
1403: PUSH
1404: LD_INT 1
1406: ARRAY
1407: PPUSH
1408: CALL_OW 251
1412: PPUSH
1413: LD_INT 50
1415: PPUSH
1416: LD_INT 0
1418: PPUSH
1419: CALL_OW 50
// yourApemans = yourApemans ^ i ;
1423: LD_ADDR_EXP 13
1427: PUSH
1428: LD_EXP 13
1432: PUSH
1433: LD_VAR 0 2
1437: ADD
1438: ST_TO_ADDR
// end ;
1439: GO 1377
1441: POP
1442: POP
// end ; end ;
1443: LD_VAR 0 1
1447: RET
// export function LoadVehicles ; var i , veh , tmp , vehicles ; begin
1448: LD_INT 0
1450: PPUSH
1451: PPUSH
1452: PPUSH
1453: PPUSH
1454: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1455: LD_ADDR_VAR 0 4
1459: PUSH
1460: LD_INT 22
1462: PUSH
1463: LD_INT 1
1465: PUSH
1466: EMPTY
1467: LIST
1468: LIST
1469: PUSH
1470: LD_INT 21
1472: PUSH
1473: LD_INT 3
1475: PUSH
1476: EMPTY
1477: LIST
1478: LIST
1479: PUSH
1480: LD_INT 30
1482: PUSH
1483: LD_INT 0
1485: PUSH
1486: EMPTY
1487: LIST
1488: LIST
1489: PUSH
1490: EMPTY
1491: LIST
1492: LIST
1493: LIST
1494: PPUSH
1495: CALL_OW 69
1499: ST_TO_ADDR
// uc_side = 1 ;
1500: LD_ADDR_OWVAR 20
1504: PUSH
1505: LD_INT 1
1507: ST_TO_ADDR
// vehicles = LoadVariable ( vehiclesInDelta , [ ] ) ;
1508: LD_ADDR_VAR 0 5
1512: PUSH
1513: LD_STRING vehiclesInDelta
1515: PPUSH
1516: EMPTY
1517: PPUSH
1518: CALL_OW 30
1522: ST_TO_ADDR
// for i = 1 to vehicles do
1523: LD_ADDR_VAR 0 2
1527: PUSH
1528: DOUBLE
1529: LD_INT 1
1531: DEC
1532: ST_TO_ADDR
1533: LD_VAR 0 5
1537: PUSH
1538: FOR_TO
1539: IFFALSE 1742
// begin if vehicles [ i + 4 ] = 11 or vehicles [ i ] = 3 then
1541: LD_VAR 0 5
1545: PUSH
1546: LD_VAR 0 2
1550: PUSH
1551: LD_INT 4
1553: PLUS
1554: ARRAY
1555: PUSH
1556: LD_INT 11
1558: EQUAL
1559: PUSH
1560: LD_VAR 0 5
1564: PUSH
1565: LD_VAR 0 2
1569: ARRAY
1570: PUSH
1571: LD_INT 3
1573: EQUAL
1574: OR
1575: IFFALSE 1726
// begin uc_nation = vehicles [ i ] ;
1577: LD_ADDR_OWVAR 21
1581: PUSH
1582: LD_VAR 0 5
1586: PUSH
1587: LD_VAR 0 2
1591: ARRAY
1592: ST_TO_ADDR
// vc_chassis = vehicles [ i + 1 ] ;
1593: LD_ADDR_OWVAR 37
1597: PUSH
1598: LD_VAR 0 5
1602: PUSH
1603: LD_VAR 0 2
1607: PUSH
1608: LD_INT 1
1610: PLUS
1611: ARRAY
1612: ST_TO_ADDR
// vc_engine = vehicles [ i + 2 ] ;
1613: LD_ADDR_OWVAR 39
1617: PUSH
1618: LD_VAR 0 5
1622: PUSH
1623: LD_VAR 0 2
1627: PUSH
1628: LD_INT 2
1630: PLUS
1631: ARRAY
1632: ST_TO_ADDR
// vc_control = vehicles [ i + 3 ] ;
1633: LD_ADDR_OWVAR 38
1637: PUSH
1638: LD_VAR 0 5
1642: PUSH
1643: LD_VAR 0 2
1647: PUSH
1648: LD_INT 3
1650: PLUS
1651: ARRAY
1652: ST_TO_ADDR
// vc_weapon = vehicles [ i + 4 ] ;
1653: LD_ADDR_OWVAR 40
1657: PUSH
1658: LD_VAR 0 5
1662: PUSH
1663: LD_VAR 0 2
1667: PUSH
1668: LD_INT 4
1670: PLUS
1671: ARRAY
1672: ST_TO_ADDR
// veh = CreateVehicle ;
1673: LD_ADDR_VAR 0 3
1677: PUSH
1678: CALL_OW 45
1682: ST_TO_ADDR
// PlaceUnitXYR ( veh , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 40 , false ) ;
1683: LD_VAR 0 3
1687: PPUSH
1688: LD_VAR 0 4
1692: PUSH
1693: LD_INT 1
1695: ARRAY
1696: PPUSH
1697: CALL_OW 250
1701: PPUSH
1702: LD_VAR 0 4
1706: PUSH
1707: LD_INT 1
1709: ARRAY
1710: PPUSH
1711: CALL_OW 251
1715: PPUSH
1716: LD_INT 40
1718: PPUSH
1719: LD_INT 0
1721: PPUSH
1722: CALL_OW 50
// end ; i = i + 4 ;
1726: LD_ADDR_VAR 0 2
1730: PUSH
1731: LD_VAR 0 2
1735: PUSH
1736: LD_INT 4
1738: PLUS
1739: ST_TO_ADDR
// end ;
1740: GO 1538
1742: POP
1743: POP
// end ;
1744: LD_VAR 0 1
1748: RET
// export function PrepareRandoms ; var i , un , tmp , filter ; begin
1749: LD_INT 0
1751: PPUSH
1752: PPUSH
1753: PPUSH
1754: PPUSH
1755: PPUSH
// uc_side = 1 ;
1756: LD_ADDR_OWVAR 20
1760: PUSH
1761: LD_INT 1
1763: ST_TO_ADDR
// uc_nation = 1 ;
1764: LD_ADDR_OWVAR 21
1768: PUSH
1769: LD_INT 1
1771: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1772: LD_ADDR_VAR 0 4
1776: PUSH
1777: LD_INT 22
1779: PUSH
1780: LD_INT 1
1782: PUSH
1783: EMPTY
1784: LIST
1785: LIST
1786: PUSH
1787: LD_INT 21
1789: PUSH
1790: LD_INT 3
1792: PUSH
1793: EMPTY
1794: LIST
1795: LIST
1796: PUSH
1797: LD_INT 30
1799: PUSH
1800: LD_INT 0
1802: PUSH
1803: EMPTY
1804: LIST
1805: LIST
1806: PUSH
1807: EMPTY
1808: LIST
1809: LIST
1810: LIST
1811: PPUSH
1812: CALL_OW 69
1816: ST_TO_ADDR
// if FilterAllunits ( [ [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] then
1817: LD_INT 22
1819: PUSH
1820: LD_INT 1
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: PUSH
1827: LD_INT 25
1829: PUSH
1830: LD_INT 4
1832: PUSH
1833: EMPTY
1834: LIST
1835: LIST
1836: PUSH
1837: LD_INT 26
1839: PUSH
1840: LD_INT 1
1842: PUSH
1843: EMPTY
1844: LIST
1845: LIST
1846: PUSH
1847: EMPTY
1848: LIST
1849: LIST
1850: LIST
1851: PUSH
1852: EMPTY
1853: LIST
1854: PPUSH
1855: CALL_OW 69
1859: PUSH
1860: LD_EXP 1
1864: PUSH
1865: LD_EXP 7
1869: PUSH
1870: LD_EXP 6
1874: PUSH
1875: LD_EXP 5
1879: PUSH
1880: LD_EXP 2
1884: PUSH
1885: LD_EXP 3
1889: PUSH
1890: LD_EXP 8
1894: PUSH
1895: EMPTY
1896: LIST
1897: LIST
1898: LIST
1899: LIST
1900: LIST
1901: LIST
1902: LIST
1903: DIFF
1904: IFFALSE 2005
// deltaDoctor := ( FilterAllunits ( [ [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] ) [ 1 ] else
1906: LD_ADDR_EXP 15
1910: PUSH
1911: LD_INT 22
1913: PUSH
1914: LD_INT 1
1916: PUSH
1917: EMPTY
1918: LIST
1919: LIST
1920: PUSH
1921: LD_INT 25
1923: PUSH
1924: LD_INT 4
1926: PUSH
1927: EMPTY
1928: LIST
1929: LIST
1930: PUSH
1931: LD_INT 26
1933: PUSH
1934: LD_INT 1
1936: PUSH
1937: EMPTY
1938: LIST
1939: LIST
1940: PUSH
1941: EMPTY
1942: LIST
1943: LIST
1944: LIST
1945: PUSH
1946: EMPTY
1947: LIST
1948: PPUSH
1949: CALL_OW 69
1953: PUSH
1954: LD_EXP 1
1958: PUSH
1959: LD_EXP 7
1963: PUSH
1964: LD_EXP 6
1968: PUSH
1969: LD_EXP 5
1973: PUSH
1974: LD_EXP 2
1978: PUSH
1979: LD_EXP 3
1983: PUSH
1984: LD_EXP 8
1988: PUSH
1989: EMPTY
1990: LIST
1991: LIST
1992: LIST
1993: LIST
1994: LIST
1995: LIST
1996: LIST
1997: DIFF
1998: PUSH
1999: LD_INT 1
2001: ARRAY
2002: ST_TO_ADDR
2003: GO 2152
// begin filter := FilterAllunits ( [ [ [ f_side , 1 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] ;
2005: LD_ADDR_VAR 0 5
2009: PUSH
2010: LD_INT 22
2012: PUSH
2013: LD_INT 1
2015: PUSH
2016: EMPTY
2017: LIST
2018: LIST
2019: PUSH
2020: LD_INT 26
2022: PUSH
2023: LD_INT 1
2025: PUSH
2026: EMPTY
2027: LIST
2028: LIST
2029: PUSH
2030: EMPTY
2031: LIST
2032: LIST
2033: PUSH
2034: EMPTY
2035: LIST
2036: PPUSH
2037: CALL_OW 69
2041: PUSH
2042: LD_EXP 1
2046: PUSH
2047: LD_EXP 7
2051: PUSH
2052: LD_EXP 6
2056: PUSH
2057: LD_EXP 5
2061: PUSH
2062: LD_EXP 2
2066: PUSH
2067: LD_EXP 3
2071: PUSH
2072: LD_EXP 8
2076: PUSH
2077: EMPTY
2078: LIST
2079: LIST
2080: LIST
2081: LIST
2082: LIST
2083: LIST
2084: LIST
2085: DIFF
2086: ST_TO_ADDR
// if filter then
2087: LD_VAR 0 5
2091: IFFALSE 2152
// for i in filter do
2093: LD_ADDR_VAR 0 2
2097: PUSH
2098: LD_VAR 0 5
2102: PUSH
2103: FOR_IN
2104: IFFALSE 2150
// if GetSkill ( i , 4 ) >= 4 then
2106: LD_VAR 0 2
2110: PPUSH
2111: LD_INT 4
2113: PPUSH
2114: CALL_OW 259
2118: PUSH
2119: LD_INT 4
2121: GREATEREQUAL
2122: IFFALSE 2148
// begin deltaDoctor := i ;
2124: LD_ADDR_EXP 15
2128: PUSH
2129: LD_VAR 0 2
2133: ST_TO_ADDR
// SetClass ( deltaDoctor , 4 ) ;
2134: LD_EXP 15
2138: PPUSH
2139: LD_INT 4
2141: PPUSH
2142: CALL_OW 336
// break ;
2146: GO 2150
// end ;
2148: GO 2103
2150: POP
2151: POP
// end ; for i = 1 to 7 do
2152: LD_ADDR_VAR 0 2
2156: PUSH
2157: DOUBLE
2158: LD_INT 1
2160: DEC
2161: ST_TO_ADDR
2162: LD_INT 7
2164: PUSH
2165: FOR_TO
2166: IFFALSE 2303
// begin hc_gallery =  ;
2168: LD_ADDR_OWVAR 33
2172: PUSH
2173: LD_STRING 
2175: ST_TO_ADDR
// hc_name =  ;
2176: LD_ADDR_OWVAR 26
2180: PUSH
2181: LD_STRING 
2183: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 3 , 5 ) ) ;
2184: LD_INT 0
2186: PPUSH
2187: LD_INT 1
2189: PUSH
2190: LD_INT 2
2192: PUSH
2193: LD_INT 3
2195: PUSH
2196: LD_INT 4
2198: PUSH
2199: EMPTY
2200: LIST
2201: LIST
2202: LIST
2203: LIST
2204: PUSH
2205: LD_INT 1
2207: PPUSH
2208: LD_INT 4
2210: PPUSH
2211: CALL_OW 12
2215: ARRAY
2216: PPUSH
2217: LD_INT 3
2219: PPUSH
2220: LD_INT 5
2222: PPUSH
2223: CALL_OW 12
2227: PPUSH
2228: CALL_OW 380
// un = CreateHuman ;
2232: LD_ADDR_VAR 0 3
2236: PUSH
2237: CALL_OW 44
2241: ST_TO_ADDR
// randomsDelta := randomsDelta ^ un ;
2242: LD_ADDR_EXP 11
2246: PUSH
2247: LD_EXP 11
2251: PUSH
2252: LD_VAR 0 3
2256: ADD
2257: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
2258: LD_VAR 0 3
2262: PPUSH
2263: LD_VAR 0 4
2267: PUSH
2268: LD_INT 1
2270: ARRAY
2271: PPUSH
2272: CALL_OW 250
2276: PPUSH
2277: LD_VAR 0 4
2281: PUSH
2282: LD_INT 1
2284: ARRAY
2285: PPUSH
2286: CALL_OW 251
2290: PPUSH
2291: LD_INT 15
2293: PPUSH
2294: LD_INT 0
2296: PPUSH
2297: CALL_OW 50
// end ;
2301: GO 2165
2303: POP
2304: POP
// if deltaDoctor then
2305: LD_EXP 15
2309: IFFALSE 2313
// exit ;
2311: GO 2403
// hc_gallery = Dawkins ;
2313: LD_ADDR_OWVAR 33
2317: PUSH
2318: LD_STRING Dawkins
2320: ST_TO_ADDR
// hc_face_number := 1 ;
2321: LD_ADDR_OWVAR 34
2325: PUSH
2326: LD_INT 1
2328: ST_TO_ADDR
// hc_name = Dr. Adam Charles Dawkins ;
2329: LD_ADDR_OWVAR 26
2333: PUSH
2334: LD_STRING Dr. Adam Charles Dawkins
2336: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 6 ) ;
2337: LD_INT 1
2339: PPUSH
2340: LD_INT 4
2342: PPUSH
2343: LD_INT 6
2345: PPUSH
2346: CALL_OW 380
// deltaDoctor = CreateHuman ;
2350: LD_ADDR_EXP 15
2354: PUSH
2355: CALL_OW 44
2359: ST_TO_ADDR
// PlaceUnitXYR ( deltaDoctor , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
2360: LD_EXP 15
2364: PPUSH
2365: LD_VAR 0 4
2369: PUSH
2370: LD_INT 1
2372: ARRAY
2373: PPUSH
2374: CALL_OW 250
2378: PPUSH
2379: LD_VAR 0 4
2383: PUSH
2384: LD_INT 1
2386: ARRAY
2387: PPUSH
2388: CALL_OW 251
2392: PPUSH
2393: LD_INT 5
2395: PPUSH
2396: LD_INT 0
2398: PPUSH
2399: CALL_OW 50
// end ; end_of_file
2403: LD_VAR 0 1
2407: RET
// export function PrepareDeltaBase ; var i , j , building , buildings , lab , tmp ; begin
2408: LD_INT 0
2410: PPUSH
2411: PPUSH
2412: PPUSH
2413: PPUSH
2414: PPUSH
2415: PPUSH
2416: PPUSH
// buildings = LoadVariable ( buildingsInDelta , [ ] ) ;
2417: LD_ADDR_VAR 0 5
2421: PUSH
2422: LD_STRING buildingsInDelta
2424: PPUSH
2425: EMPTY
2426: PPUSH
2427: CALL_OW 30
2431: ST_TO_ADDR
// SetResourceVisibility ( 68 , 40 , 1 ) ;
2432: LD_INT 68
2434: PPUSH
2435: LD_INT 40
2437: PPUSH
2438: LD_INT 1
2440: PPUSH
2441: CALL_OW 441
// uc_side = 1 ;
2445: LD_ADDR_OWVAR 20
2449: PUSH
2450: LD_INT 1
2452: ST_TO_ADDR
// uc_nation = 1 ;
2453: LD_ADDR_OWVAR 21
2457: PUSH
2458: LD_INT 1
2460: ST_TO_ADDR
// for i = 1 to buildings do
2461: LD_ADDR_VAR 0 2
2465: PUSH
2466: DOUBLE
2467: LD_INT 1
2469: DEC
2470: ST_TO_ADDR
2471: LD_VAR 0 5
2475: PUSH
2476: FOR_TO
2477: IFFALSE 2775
// begin bc_type = buildings [ i ] [ 1 ] ;
2479: LD_ADDR_OWVAR 42
2483: PUSH
2484: LD_VAR 0 5
2488: PUSH
2489: LD_VAR 0 2
2493: ARRAY
2494: PUSH
2495: LD_INT 1
2497: ARRAY
2498: ST_TO_ADDR
// bc_level = buildings [ i ] [ 2 ] ;
2499: LD_ADDR_OWVAR 43
2503: PUSH
2504: LD_VAR 0 5
2508: PUSH
2509: LD_VAR 0 2
2513: ARRAY
2514: PUSH
2515: LD_INT 2
2517: ARRAY
2518: ST_TO_ADDR
// if bc_type = b_lab then
2519: LD_OWVAR 42
2523: PUSH
2524: LD_INT 6
2526: EQUAL
2527: IFFALSE 2545
// begin bc_kind1 = b_lab_basic ;
2529: LD_ADDR_OWVAR 44
2533: PUSH
2534: LD_INT 9
2536: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
2537: LD_ADDR_OWVAR 45
2541: PUSH
2542: LD_INT 9
2544: ST_TO_ADDR
// end ; if bc_type = b_lab_half or bc_type = b_lab_full then
2545: LD_OWVAR 42
2549: PUSH
2550: LD_INT 7
2552: EQUAL
2553: PUSH
2554: LD_OWVAR 42
2558: PUSH
2559: LD_INT 8
2561: EQUAL
2562: OR
2563: IFFALSE 2679
// begin if buildings [ i ] [ 6 ] then
2565: LD_VAR 0 5
2569: PUSH
2570: LD_VAR 0 2
2574: ARRAY
2575: PUSH
2576: LD_INT 6
2578: ARRAY
2579: IFFALSE 2601
// bc_kind1 = buildings [ i ] [ 6 ] ;
2581: LD_ADDR_OWVAR 44
2585: PUSH
2586: LD_VAR 0 5
2590: PUSH
2591: LD_VAR 0 2
2595: ARRAY
2596: PUSH
2597: LD_INT 6
2599: ARRAY
2600: ST_TO_ADDR
// if buildings [ i ] [ 7 ] then
2601: LD_VAR 0 5
2605: PUSH
2606: LD_VAR 0 2
2610: ARRAY
2611: PUSH
2612: LD_INT 7
2614: ARRAY
2615: IFFALSE 2637
// bc_kind2 = buildings [ i ] [ 7 ] ;
2617: LD_ADDR_OWVAR 45
2621: PUSH
2622: LD_VAR 0 5
2626: PUSH
2627: LD_VAR 0 2
2631: ARRAY
2632: PUSH
2633: LD_INT 7
2635: ARRAY
2636: ST_TO_ADDR
// if not buildings [ i ] [ 6 ] and not buildings [ i ] [ 7 ] then
2637: LD_VAR 0 5
2641: PUSH
2642: LD_VAR 0 2
2646: ARRAY
2647: PUSH
2648: LD_INT 6
2650: ARRAY
2651: NOT
2652: PUSH
2653: LD_VAR 0 5
2657: PUSH
2658: LD_VAR 0 2
2662: ARRAY
2663: PUSH
2664: LD_INT 7
2666: ARRAY
2667: NOT
2668: AND
2669: IFFALSE 2679
// bc_type := b_lab ;
2671: LD_ADDR_OWVAR 42
2675: PUSH
2676: LD_INT 6
2678: ST_TO_ADDR
// end ; building = CreateAndPlaceBuildingXYD ( buildings [ i ] [ 3 ] , buildings [ i ] [ 4 ] , buildings [ i ] [ 5 ] ) ;
2679: LD_ADDR_VAR 0 4
2683: PUSH
2684: LD_VAR 0 5
2688: PUSH
2689: LD_VAR 0 2
2693: ARRAY
2694: PUSH
2695: LD_INT 3
2697: ARRAY
2698: PPUSH
2699: LD_VAR 0 5
2703: PUSH
2704: LD_VAR 0 2
2708: ARRAY
2709: PUSH
2710: LD_INT 4
2712: ARRAY
2713: PPUSH
2714: LD_VAR 0 5
2718: PUSH
2719: LD_VAR 0 2
2723: ARRAY
2724: PUSH
2725: LD_INT 5
2727: ARRAY
2728: PPUSH
2729: CALL_OW 47
2733: ST_TO_ADDR
// if GetBType ( building ) = b_bunker then
2734: LD_VAR 0 4
2738: PPUSH
2739: CALL_OW 266
2743: PUSH
2744: LD_INT 32
2746: EQUAL
2747: IFFALSE 2773
// PlaceWeaponTurret ( building , buildings [ i ] [ 8 ] ) ;
2749: LD_VAR 0 4
2753: PPUSH
2754: LD_VAR 0 5
2758: PUSH
2759: LD_VAR 0 2
2763: ARRAY
2764: PUSH
2765: LD_INT 8
2767: ARRAY
2768: PPUSH
2769: CALL_OW 431
// end ;
2773: GO 2476
2775: POP
2776: POP
// lab = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
2777: LD_ADDR_VAR 0 6
2781: PUSH
2782: LD_INT 22
2784: PUSH
2785: LD_INT 1
2787: PUSH
2788: EMPTY
2789: LIST
2790: LIST
2791: PUSH
2792: LD_INT 2
2794: PUSH
2795: LD_INT 30
2797: PUSH
2798: LD_INT 6
2800: PUSH
2801: EMPTY
2802: LIST
2803: LIST
2804: PUSH
2805: LD_INT 30
2807: PUSH
2808: LD_INT 7
2810: PUSH
2811: EMPTY
2812: LIST
2813: LIST
2814: PUSH
2815: LD_INT 30
2817: PUSH
2818: LD_INT 8
2820: PUSH
2821: EMPTY
2822: LIST
2823: LIST
2824: PUSH
2825: EMPTY
2826: LIST
2827: LIST
2828: LIST
2829: LIST
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: PPUSH
2835: CALL_OW 69
2839: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) ;
2840: LD_ADDR_VAR 0 7
2844: PUSH
2845: LD_INT 22
2847: PUSH
2848: LD_INT 1
2850: PUSH
2851: EMPTY
2852: LIST
2853: LIST
2854: PUSH
2855: LD_INT 30
2857: PUSH
2858: LD_INT 0
2860: PUSH
2861: EMPTY
2862: LIST
2863: LIST
2864: PUSH
2865: EMPTY
2866: LIST
2867: LIST
2868: PPUSH
2869: CALL_OW 69
2873: ST_TO_ADDR
// if lab > 0 and tmp > 0 then
2874: LD_VAR 0 6
2878: PUSH
2879: LD_INT 0
2881: GREATER
2882: PUSH
2883: LD_VAR 0 7
2887: PUSH
2888: LD_INT 0
2890: GREATER
2891: AND
2892: IFFALSE 2902
// baseCorrect = 1 ;
2894: LD_ADDR_EXP 18
2898: PUSH
2899: LD_INT 1
2901: ST_TO_ADDR
// if baseCorrect = 0 then
2902: LD_EXP 18
2906: PUSH
2907: LD_INT 0
2909: EQUAL
2910: IFFALSE 3283
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
2912: LD_ADDR_VAR 0 2
2916: PUSH
2917: LD_INT 22
2919: PUSH
2920: LD_INT 1
2922: PUSH
2923: EMPTY
2924: LIST
2925: LIST
2926: PUSH
2927: LD_INT 21
2929: PUSH
2930: LD_INT 3
2932: PUSH
2933: EMPTY
2934: LIST
2935: LIST
2936: PUSH
2937: EMPTY
2938: LIST
2939: LIST
2940: PPUSH
2941: CALL_OW 69
2945: PUSH
2946: FOR_IN
2947: IFFALSE 2960
// RemoveUnit ( i ) ;
2949: LD_VAR 0 2
2953: PPUSH
2954: CALL_OW 64
2958: GO 2946
2960: POP
2961: POP
// uc_nation = 1 ;
2962: LD_ADDR_OWVAR 21
2966: PUSH
2967: LD_INT 1
2969: ST_TO_ADDR
// uc_side = 1 ;
2970: LD_ADDR_OWVAR 20
2974: PUSH
2975: LD_INT 1
2977: ST_TO_ADDR
// bc_level = 5 ;
2978: LD_ADDR_OWVAR 43
2982: PUSH
2983: LD_INT 5
2985: ST_TO_ADDR
// bc_type = b_depot ;
2986: LD_ADDR_OWVAR 42
2990: PUSH
2991: LD_INT 0
2993: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 50 , 22 , 0 ) ;
2994: LD_INT 50
2996: PPUSH
2997: LD_INT 22
2999: PPUSH
3000: LD_INT 0
3002: PPUSH
3003: CALL_OW 47
// bc_type = b_bunker ;
3007: LD_ADDR_OWVAR 42
3011: PUSH
3012: LD_INT 32
3014: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( 68 , 24 , 4 ) ;
3015: LD_ADDR_VAR 0 4
3019: PUSH
3020: LD_INT 68
3022: PPUSH
3023: LD_INT 24
3025: PPUSH
3026: LD_INT 4
3028: PPUSH
3029: CALL_OW 47
3033: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ Rand ( 1 , 2 ) ] ) ;
3034: LD_VAR 0 4
3038: PPUSH
3039: LD_INT 4
3041: PUSH
3042: LD_INT 11
3044: PUSH
3045: EMPTY
3046: LIST
3047: LIST
3048: PUSH
3049: LD_INT 1
3051: PPUSH
3052: LD_INT 2
3054: PPUSH
3055: CALL_OW 12
3059: ARRAY
3060: PPUSH
3061: CALL_OW 431
// building = CreateAndPlaceBuildingXYD ( 71 , 34 , 4 ) ;
3065: LD_ADDR_VAR 0 4
3069: PUSH
3070: LD_INT 71
3072: PPUSH
3073: LD_INT 34
3075: PPUSH
3076: LD_INT 4
3078: PPUSH
3079: CALL_OW 47
3083: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ Rand ( 1 , 2 ) ] ) ;
3084: LD_VAR 0 4
3088: PPUSH
3089: LD_INT 4
3091: PUSH
3092: LD_INT 11
3094: PUSH
3095: EMPTY
3096: LIST
3097: LIST
3098: PUSH
3099: LD_INT 1
3101: PPUSH
3102: LD_INT 2
3104: PPUSH
3105: CALL_OW 12
3109: ARRAY
3110: PPUSH
3111: CALL_OW 431
// bc_type = 31 ;
3115: LD_ADDR_OWVAR 42
3119: PUSH
3120: LD_INT 31
3122: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 51 , 7 , 3 ) ;
3123: LD_INT 51
3125: PPUSH
3126: LD_INT 7
3128: PPUSH
3129: LD_INT 3
3131: PPUSH
3132: CALL_OW 47
// bc_type = b_oil_mine ;
3136: LD_ADDR_OWVAR 42
3140: PUSH
3141: LD_INT 29
3143: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 68 , 40 , 1 ) ;
3144: LD_INT 68
3146: PPUSH
3147: LD_INT 40
3149: PPUSH
3150: LD_INT 1
3152: PPUSH
3153: CALL_OW 47
// bc_type = b_workshop ;
3157: LD_ADDR_OWVAR 42
3161: PUSH
3162: LD_INT 2
3164: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 20 , 2 ) ;
3165: LD_INT 38
3167: PPUSH
3168: LD_INT 20
3170: PPUSH
3171: LD_INT 2
3173: PPUSH
3174: CALL_OW 47
// bc_type = b_armoury ;
3178: LD_ADDR_OWVAR 42
3182: PUSH
3183: LD_INT 4
3185: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 20 , 2 ) ;
3186: LD_INT 38
3188: PPUSH
3189: LD_INT 20
3191: PPUSH
3192: LD_INT 2
3194: PPUSH
3195: CALL_OW 47
// bc_type = b_solar_power ;
3199: LD_ADDR_OWVAR 42
3203: PUSH
3204: LD_INT 27
3206: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 46 , 12 , 1 ) ;
3207: LD_INT 46
3209: PPUSH
3210: LD_INT 12
3212: PPUSH
3213: LD_INT 1
3215: PPUSH
3216: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 48 , 11 , 2 ) ;
3220: LD_INT 48
3222: PPUSH
3223: LD_INT 11
3225: PPUSH
3226: LD_INT 2
3228: PPUSH
3229: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 49 , 11 , 3 ) ;
3233: LD_INT 49
3235: PPUSH
3236: LD_INT 11
3238: PPUSH
3239: LD_INT 3
3241: PPUSH
3242: CALL_OW 47
// bc_type = b_lab_half ;
3246: LD_ADDR_OWVAR 42
3250: PUSH
3251: LD_INT 7
3253: ST_TO_ADDR
// bc_kind1 = b_lab_opto ;
3254: LD_ADDR_OWVAR 44
3258: PUSH
3259: LD_INT 15
3261: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
3262: LD_ADDR_OWVAR 45
3266: PUSH
3267: LD_INT 9
3269: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 42 , 15 , 2 ) ;
3270: LD_INT 42
3272: PPUSH
3273: LD_INT 15
3275: PPUSH
3276: LD_INT 2
3278: PPUSH
3279: CALL_OW 47
// end ; end ; end_of_file
3283: LD_VAR 0 1
3287: RET
// every 1 do var i , j , tmp ;
3288: GO 3290
3290: DISABLE
3291: LD_INT 0
3293: PPUSH
3294: PPUSH
3295: PPUSH
// begin InGameOn ;
3296: CALL_OW 8
// CenterNowOnUnits ( lab [ 1 ] ) ;
3300: LD_EXP 20
3304: PUSH
3305: LD_INT 1
3307: ARRAY
3308: PPUSH
3309: CALL_OW 87
// if IsOK ( Denis ) then
3313: LD_EXP 3
3317: PPUSH
3318: CALL_OW 302
3322: IFFALSE 3350
// begin SetTech ( tech_radar , 1 , state_researched ) ;
3324: LD_INT 6
3326: PPUSH
3327: LD_INT 1
3329: PPUSH
3330: LD_INT 2
3332: PPUSH
3333: CALL_OW 322
// SetRestrict ( b_ext_radar , 1 , true ) ;
3337: LD_INT 20
3339: PPUSH
3340: LD_INT 1
3342: PPUSH
3343: LD_INT 1
3345: PPUSH
3346: CALL_OW 324
// end ; CenterNowOnUnits ( JMM ) ;
3350: LD_EXP 1
3354: PPUSH
3355: CALL_OW 87
// ComTurnUnit ( JMM , DeltaDoctor ) ;
3359: LD_EXP 1
3363: PPUSH
3364: LD_EXP 15
3368: PPUSH
3369: CALL_OW 119
// repeat wait ( 0 0$1 ) ;
3373: LD_INT 35
3375: PPUSH
3376: CALL_OW 67
// ComMoveUnit ( DeltaDoctor , JMM ) ;
3380: LD_EXP 15
3384: PPUSH
3385: LD_EXP 1
3389: PPUSH
3390: CALL_OW 112
// until GetDistUnits ( JMM , DeltaDoctor ) < 5 ;
3394: LD_EXP 1
3398: PPUSH
3399: LD_EXP 15
3403: PPUSH
3404: CALL_OW 296
3408: PUSH
3409: LD_INT 5
3411: LESS
3412: IFFALSE 3373
// ComTurnUnit ( DeltaDoctor , JMM ) ;
3414: LD_EXP 15
3418: PPUSH
3419: LD_EXP 1
3423: PPUSH
3424: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
3428: LD_EXP 1
3432: PPUSH
3433: LD_STRING D1-JMM-1
3435: PPUSH
3436: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-1 ) ;
3440: LD_EXP 15
3444: PPUSH
3445: LD_STRING D1-Sci-1
3447: PPUSH
3448: CALL_OW 88
// ComEnterUnit ( [ JMM , DeltaDoctor , Denis ] , lab [ 1 ] ) ;
3452: LD_EXP 1
3456: PUSH
3457: LD_EXP 15
3461: PUSH
3462: LD_EXP 3
3466: PUSH
3467: EMPTY
3468: LIST
3469: LIST
3470: LIST
3471: PPUSH
3472: LD_EXP 20
3476: PUSH
3477: LD_INT 1
3479: ARRAY
3480: PPUSH
3481: CALL_OW 120
// end ;
3485: PPOPN 3
3487: END
// every 0 0$2 trigger IsInUnit ( JMM ) = lab [ 1 ] and IsInUnit ( DeltaDoctor ) = lab [ 1 ] do var i , j , tmp ;
3488: LD_EXP 1
3492: PPUSH
3493: CALL_OW 310
3497: PUSH
3498: LD_EXP 20
3502: PUSH
3503: LD_INT 1
3505: ARRAY
3506: EQUAL
3507: PUSH
3508: LD_EXP 15
3512: PPUSH
3513: CALL_OW 310
3517: PUSH
3518: LD_EXP 20
3522: PUSH
3523: LD_INT 1
3525: ARRAY
3526: EQUAL
3527: AND
3528: IFFALSE 4074
3530: GO 3532
3532: DISABLE
3533: LD_INT 0
3535: PPUSH
3536: PPUSH
3537: PPUSH
// begin CenterNowOnUnits ( lab [ 1 ] ) ;
3538: LD_EXP 20
3542: PUSH
3543: LD_INT 1
3545: ARRAY
3546: PPUSH
3547: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
3551: LD_EXP 1
3555: PPUSH
3556: LD_STRING D1-JMM-2
3558: PPUSH
3559: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-2 ) ;
3563: LD_EXP 15
3567: PPUSH
3568: LD_STRING D1-Sci-2
3570: PPUSH
3571: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
3575: LD_EXP 1
3579: PPUSH
3580: LD_STRING D1-JMM-3
3582: PPUSH
3583: CALL_OW 88
// if IsOK ( Denis ) then
3587: LD_EXP 3
3591: PPUSH
3592: CALL_OW 302
3596: IFFALSE 3612
// Say ( DeltaDoctor , D1-Sci-3 ) else
3598: LD_EXP 15
3602: PPUSH
3603: LD_STRING D1-Sci-3
3605: PPUSH
3606: CALL_OW 88
3610: GO 3624
// Say ( DeltaDoctor , D1-Sci-3a ) ;
3612: LD_EXP 15
3616: PPUSH
3617: LD_STRING D1-Sci-3a
3619: PPUSH
3620: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
3624: LD_EXP 1
3628: PPUSH
3629: LD_STRING D1-JMM-4
3631: PPUSH
3632: CALL_OW 88
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
3636: LD_ADDR_VAR 0 3
3640: PUSH
3641: LD_INT 22
3643: PUSH
3644: LD_INT 1
3646: PUSH
3647: EMPTY
3648: LIST
3649: LIST
3650: PUSH
3651: LD_INT 25
3653: PUSH
3654: LD_INT 4
3656: PUSH
3657: EMPTY
3658: LIST
3659: LIST
3660: PUSH
3661: LD_INT 3
3663: PUSH
3664: LD_INT 54
3666: PUSH
3667: EMPTY
3668: LIST
3669: PUSH
3670: EMPTY
3671: LIST
3672: LIST
3673: PUSH
3674: EMPTY
3675: LIST
3676: LIST
3677: LIST
3678: PPUSH
3679: CALL_OW 69
3683: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 0 ] ) do
3684: LD_ADDR_VAR 0 1
3688: PUSH
3689: LD_INT 22
3691: PUSH
3692: LD_INT 0
3694: PUSH
3695: EMPTY
3696: LIST
3697: LIST
3698: PPUSH
3699: CALL_OW 69
3703: PUSH
3704: FOR_IN
3705: IFFALSE 3755
// for j in tmp do
3707: LD_ADDR_VAR 0 2
3711: PUSH
3712: LD_VAR 0 3
3716: PUSH
3717: FOR_IN
3718: IFFALSE 3751
// AddComTameXY ( j , GetX ( i ) , GetY ( i ) ) ;
3720: LD_VAR 0 2
3724: PPUSH
3725: LD_VAR 0 1
3729: PPUSH
3730: CALL_OW 250
3734: PPUSH
3735: LD_VAR 0 1
3739: PPUSH
3740: CALL_OW 251
3744: PPUSH
3745: CALL_OW 191
3749: GO 3717
3751: POP
3752: POP
3753: GO 3704
3755: POP
3756: POP
// Say ( DeltaDoctor , D1-Sci-4 ) ;
3757: LD_EXP 15
3761: PPUSH
3762: LD_STRING D1-Sci-4
3764: PPUSH
3765: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
3769: LD_EXP 1
3773: PPUSH
3774: LD_STRING D1-JMM-5
3776: PPUSH
3777: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-5 ) ;
3781: LD_EXP 15
3785: PPUSH
3786: LD_STRING D1-Sci-5
3788: PPUSH
3789: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
3793: LD_EXP 1
3797: PPUSH
3798: LD_STRING D1-JMM-6
3800: PPUSH
3801: CALL_OW 88
// SayRadio ( Harisson , D1-Har-6 ) ;
3805: LD_EXP 16
3809: PPUSH
3810: LD_STRING D1-Har-6
3812: PPUSH
3813: CALL_OW 94
// Say ( JMM , D1-JMM-7 ) ;
3817: LD_EXP 1
3821: PPUSH
3822: LD_STRING D1-JMM-7
3824: PPUSH
3825: CALL_OW 88
// SayRadio ( Harisson , D1-Har-7 ) ;
3829: LD_EXP 16
3833: PPUSH
3834: LD_STRING D1-Har-7
3836: PPUSH
3837: CALL_OW 94
// if IsOK ( Denis ) then
3841: LD_EXP 3
3845: PPUSH
3846: CALL_OW 302
3850: IFFALSE 3864
// Say ( JMM , D1-JMM-8 ) ;
3852: LD_EXP 1
3856: PPUSH
3857: LD_STRING D1-JMM-8
3859: PPUSH
3860: CALL_OW 88
// Say ( JMM , D1-JMM-8a ) ;
3864: LD_EXP 1
3868: PPUSH
3869: LD_STRING D1-JMM-8a
3871: PPUSH
3872: CALL_OW 88
// SayRadio ( Harisson , D1-Har-8 ) ;
3876: LD_EXP 16
3880: PPUSH
3881: LD_STRING D1-Har-8
3883: PPUSH
3884: CALL_OW 94
// Say ( JMM , D1-JMM-9 ) ;
3888: LD_EXP 1
3892: PPUSH
3893: LD_STRING D1-JMM-9
3895: PPUSH
3896: CALL_OW 88
// SayRadio ( Harisson , D1-Har-9 ) ;
3900: LD_EXP 16
3904: PPUSH
3905: LD_STRING D1-Har-9
3907: PPUSH
3908: CALL_OW 94
// Say ( JMM , D1-JMM-10 ) ;
3912: LD_EXP 1
3916: PPUSH
3917: LD_STRING D1-JMM-10
3919: PPUSH
3920: CALL_OW 88
// if IsOK ( Denis ) then
3924: LD_EXP 3
3928: PPUSH
3929: CALL_OW 302
3933: IFFALSE 3947
// Say ( JMM , D1-JMM-10a ) ;
3935: LD_EXP 1
3939: PPUSH
3940: LD_STRING D1-JMM-10a
3942: PPUSH
3943: CALL_OW 88
// SelectDeltaCharacters ;
3947: CALL 4433 0 0
// SetResourceType ( GetBase ( lab [ 1 ] ) , 1 , 150 ) ;
3951: LD_EXP 20
3955: PUSH
3956: LD_INT 1
3958: ARRAY
3959: PPUSH
3960: CALL_OW 274
3964: PPUSH
3965: LD_INT 1
3967: PPUSH
3968: LD_INT 150
3970: PPUSH
3971: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) > 0 then
3975: LD_INT 22
3977: PUSH
3978: LD_INT 1
3980: PUSH
3981: EMPTY
3982: LIST
3983: LIST
3984: PUSH
3985: LD_INT 30
3987: PUSH
3988: LD_INT 29
3990: PUSH
3991: EMPTY
3992: LIST
3993: LIST
3994: PUSH
3995: EMPTY
3996: LIST
3997: LIST
3998: PPUSH
3999: CALL_OW 69
4003: PUSH
4004: LD_INT 0
4006: GREATER
4007: IFFALSE 4033
// SetResourceType ( GetBase ( lab [ 1 ] ) , 2 , 300 ) ;
4009: LD_EXP 20
4013: PUSH
4014: LD_INT 1
4016: ARRAY
4017: PPUSH
4018: CALL_OW 274
4022: PPUSH
4023: LD_INT 2
4025: PPUSH
4026: LD_INT 300
4028: PPUSH
4029: CALL_OW 277
// InGameOff ;
4033: CALL_OW 9
// Query ( Q1 ) ;
4037: LD_STRING Q1
4039: PPUSH
4040: CALL_OW 97
// SetAreaMapShow ( ExitArea , 1 ) ;
4044: LD_INT 3
4046: PPUSH
4047: LD_INT 1
4049: PPUSH
4050: CALL_OW 424
// if IsInUnit ( JMM ) then
4054: LD_EXP 1
4058: PPUSH
4059: CALL_OW 310
4063: IFFALSE 4074
// ComExitBuilding ( JMM ) ;
4065: LD_EXP 1
4069: PPUSH
4070: CALL_OW 122
// end ;
4074: PPOPN 3
4076: END
// every 0 0$1 trigger FilterUnitsExceptArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do var i , cargoType ;
4077: LD_INT 3
4079: PPUSH
4080: LD_INT 22
4082: PUSH
4083: LD_INT 1
4085: PUSH
4086: EMPTY
4087: LIST
4088: LIST
4089: PUSH
4090: LD_INT 21
4092: PUSH
4093: LD_INT 1
4095: PUSH
4096: EMPTY
4097: LIST
4098: LIST
4099: PUSH
4100: EMPTY
4101: LIST
4102: LIST
4103: PPUSH
4104: CALL_OW 71
4108: PUSH
4109: LD_INT 0
4111: EQUAL
4112: IFFALSE 4430
4114: GO 4116
4116: DISABLE
4117: LD_INT 0
4119: PPUSH
4120: PPUSH
// begin SaveDeltaCharacters ;
4121: CALL 4787 0 0
// if FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) then
4125: LD_INT 3
4127: PPUSH
4128: LD_INT 21
4130: PUSH
4131: LD_INT 2
4133: PUSH
4134: EMPTY
4135: LIST
4136: LIST
4137: PUSH
4138: LD_INT 3
4140: PUSH
4141: LD_INT 58
4143: PUSH
4144: EMPTY
4145: LIST
4146: PUSH
4147: EMPTY
4148: LIST
4149: LIST
4150: PUSH
4151: EMPTY
4152: LIST
4153: LIST
4154: PPUSH
4155: CALL_OW 70
4159: IFFALSE 4416
// begin for i in FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) do
4161: LD_ADDR_VAR 0 1
4165: PUSH
4166: LD_INT 3
4168: PPUSH
4169: LD_INT 21
4171: PUSH
4172: LD_INT 2
4174: PUSH
4175: EMPTY
4176: LIST
4177: LIST
4178: PUSH
4179: LD_INT 3
4181: PUSH
4182: LD_INT 58
4184: PUSH
4185: EMPTY
4186: LIST
4187: PUSH
4188: EMPTY
4189: LIST
4190: LIST
4191: PUSH
4192: EMPTY
4193: LIST
4194: LIST
4195: PPUSH
4196: CALL_OW 70
4200: PUSH
4201: FOR_IN
4202: IFFALSE 4414
// begin cargoType = GetCargoType ( i ) ;
4204: LD_ADDR_VAR 0 2
4208: PUSH
4209: LD_VAR 0 1
4213: PPUSH
4214: CALL_OW 288
4218: ST_TO_ADDR
// if GetWeapon ( i ) = us_cargo_bay then
4219: LD_VAR 0 1
4223: PPUSH
4224: CALL_OW 264
4228: PUSH
4229: LD_INT 12
4231: EQUAL
4232: IFFALSE 4329
// yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , cargoType , GetCargo ( i , cargoType ) ] ] else
4234: LD_ADDR_EXP 14
4238: PUSH
4239: LD_EXP 14
4243: PUSH
4244: LD_VAR 0 1
4248: PPUSH
4249: CALL_OW 248
4253: PUSH
4254: LD_VAR 0 1
4258: PPUSH
4259: CALL_OW 265
4263: PUSH
4264: LD_VAR 0 1
4268: PPUSH
4269: CALL_OW 262
4273: PUSH
4274: LD_VAR 0 1
4278: PPUSH
4279: CALL_OW 263
4283: PUSH
4284: LD_VAR 0 1
4288: PPUSH
4289: CALL_OW 264
4293: PUSH
4294: LD_VAR 0 2
4298: PUSH
4299: LD_VAR 0 1
4303: PPUSH
4304: LD_VAR 0 2
4308: PPUSH
4309: CALL_OW 289
4313: PUSH
4314: EMPTY
4315: LIST
4316: LIST
4317: LIST
4318: LIST
4319: LIST
4320: LIST
4321: LIST
4322: PUSH
4323: EMPTY
4324: LIST
4325: ADD
4326: ST_TO_ADDR
4327: GO 4400
// yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ] ;
4329: LD_ADDR_EXP 14
4333: PUSH
4334: LD_EXP 14
4338: PUSH
4339: LD_VAR 0 1
4343: PPUSH
4344: CALL_OW 248
4348: PUSH
4349: LD_VAR 0 1
4353: PPUSH
4354: CALL_OW 265
4358: PUSH
4359: LD_VAR 0 1
4363: PPUSH
4364: CALL_OW 262
4368: PUSH
4369: LD_VAR 0 1
4373: PPUSH
4374: CALL_OW 263
4378: PUSH
4379: LD_VAR 0 1
4383: PPUSH
4384: CALL_OW 264
4388: PUSH
4389: EMPTY
4390: LIST
4391: LIST
4392: LIST
4393: LIST
4394: LIST
4395: PUSH
4396: EMPTY
4397: LIST
4398: ADD
4399: ST_TO_ADDR
// SaveVariable ( yourVehicles , 06_VehiclesIn06_1 ) ;
4400: LD_EXP 14
4404: PPUSH
4405: LD_STRING 06_VehiclesIn06_1
4407: PPUSH
4408: CALL_OW 39
// end ;
4412: GO 4201
4414: POP
4415: POP
// end ; SaveCargos ;
4416: CALL 5543 0 0
// ChangeMap ( 6 , %_cont ) ;
4420: LD_INT 6
4422: PPUSH
4423: LD_STRING %_cont
4425: PPUSH
4426: CALL_OW 340
// end ; end_of_file
4430: PPOPN 2
4432: END
// export function SelectDeltaCharacters ; var i , yourPeople ; begin
4433: LD_INT 0
4435: PPUSH
4436: PPUSH
4437: PPUSH
// selectedPeople := [ ] ;
4438: LD_ADDR_EXP 17
4442: PUSH
4443: EMPTY
4444: ST_TO_ADDR
// yourPeople = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , DeltaDoctor , Denis ] ;
4445: LD_ADDR_VAR 0 3
4449: PUSH
4450: LD_INT 22
4452: PUSH
4453: LD_INT 1
4455: PUSH
4456: EMPTY
4457: LIST
4458: LIST
4459: PUSH
4460: LD_INT 21
4462: PUSH
4463: LD_INT 1
4465: PUSH
4466: EMPTY
4467: LIST
4468: LIST
4469: PUSH
4470: LD_INT 2
4472: PUSH
4473: LD_INT 25
4475: PUSH
4476: LD_INT 1
4478: PUSH
4479: EMPTY
4480: LIST
4481: LIST
4482: PUSH
4483: LD_INT 25
4485: PUSH
4486: LD_INT 2
4488: PUSH
4489: EMPTY
4490: LIST
4491: LIST
4492: PUSH
4493: LD_INT 25
4495: PUSH
4496: LD_INT 3
4498: PUSH
4499: EMPTY
4500: LIST
4501: LIST
4502: PUSH
4503: LD_INT 25
4505: PUSH
4506: LD_INT 4
4508: PUSH
4509: EMPTY
4510: LIST
4511: LIST
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: LIST
4517: LIST
4518: LIST
4519: PUSH
4520: EMPTY
4521: LIST
4522: LIST
4523: LIST
4524: PPUSH
4525: CALL_OW 69
4529: PUSH
4530: LD_EXP 1
4534: PUSH
4535: LD_EXP 15
4539: PUSH
4540: LD_EXP 3
4544: PUSH
4545: EMPTY
4546: LIST
4547: LIST
4548: LIST
4549: DIFF
4550: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , 5 , 5 , [ sel_change_class , JMM , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ yourPeople ^ [ sel_dont_change_class , sel_not_changeable , Denis , DeltaDoctor ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
4551: LD_ADDR_EXP 17
4555: PUSH
4556: LD_STRING text
4558: PPUSH
4559: LD_INT 5
4561: PPUSH
4562: LD_INT 5
4564: PPUSH
4565: LD_INT -5
4567: PUSH
4568: LD_EXP 1
4572: PUSH
4573: LD_INT -6
4575: PUSH
4576: LD_INT -2
4578: PUSH
4579: LD_INT -3
4581: PUSH
4582: LD_INT -5
4584: PUSH
4585: EMPTY
4586: LIST
4587: LIST
4588: LIST
4589: LIST
4590: LIST
4591: LIST
4592: PUSH
4593: LD_VAR 0 3
4597: ADD
4598: PUSH
4599: LD_INT -6
4601: PUSH
4602: LD_INT -4
4604: PUSH
4605: LD_EXP 3
4609: PUSH
4610: LD_EXP 15
4614: PUSH
4615: EMPTY
4616: LIST
4617: LIST
4618: LIST
4619: LIST
4620: ADD
4621: PPUSH
4622: LD_INT 1
4624: PUSH
4625: LD_INT 3
4627: PUSH
4628: LD_INT 2
4630: PUSH
4631: LD_INT 1
4633: PUSH
4634: EMPTY
4635: LIST
4636: LIST
4637: PUSH
4638: LD_INT 4
4640: PUSH
4641: EMPTY
4642: LIST
4643: LIST
4644: LIST
4645: LIST
4646: PPUSH
4647: CALL_OW 42
4651: ST_TO_ADDR
// ComStop ( selectedPeople ) ;
4652: LD_EXP 17
4656: PPUSH
4657: CALL_OW 141
// SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 4 ) ;
4661: LD_INT 22
4663: PUSH
4664: LD_INT 1
4666: PUSH
4667: EMPTY
4668: LIST
4669: LIST
4670: PUSH
4671: LD_INT 21
4673: PUSH
4674: LD_INT 1
4676: PUSH
4677: EMPTY
4678: LIST
4679: LIST
4680: PUSH
4681: EMPTY
4682: LIST
4683: LIST
4684: PPUSH
4685: CALL_OW 69
4689: PPUSH
4690: LD_INT 4
4692: PPUSH
4693: CALL_OW 235
// for i in selectedPeople do
4697: LD_ADDR_VAR 0 2
4701: PUSH
4702: LD_EXP 17
4706: PUSH
4707: FOR_IN
4708: IFFALSE 4724
// SetSide ( i , 1 ) ;
4710: LD_VAR 0 2
4714: PPUSH
4715: LD_INT 1
4717: PPUSH
4718: CALL_OW 235
4722: GO 4707
4724: POP
4725: POP
// for i in yourApemans do
4726: LD_ADDR_VAR 0 2
4730: PUSH
4731: LD_EXP 13
4735: PUSH
4736: FOR_IN
4737: IFFALSE 4753
// SetSide ( i , 1 ) ;
4739: LD_VAR 0 2
4743: PPUSH
4744: LD_INT 1
4746: PPUSH
4747: CALL_OW 235
4751: GO 4736
4753: POP
4754: POP
// SetSide ( JMM , 1 ) ;
4755: LD_EXP 1
4759: PPUSH
4760: LD_INT 1
4762: PPUSH
4763: CALL_OW 235
// SetSkill ( yourApemans , 2 , 5 ) ;
4767: LD_EXP 13
4771: PPUSH
4772: LD_INT 2
4774: PPUSH
4775: LD_INT 5
4777: PPUSH
4778: CALL_OW 237
// end ;
4782: LD_VAR 0 1
4786: RET
// export function SaveDeltaCharacters ; begin
4787: LD_INT 0
4789: PPUSH
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
4790: LD_EXP 1
4794: PPUSH
4795: LD_EXP 22
4799: PUSH
4800: LD_STRING JMM
4802: STR
4803: PPUSH
4804: CALL_OW 38
// SaveCharacters ( DeltaDoctor , DeltaDoctor ) ;
4808: LD_EXP 15
4812: PPUSH
4813: LD_STRING DeltaDoctor
4815: PPUSH
4816: CALL_OW 38
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
4820: LD_EXP 3
4824: PPUSH
4825: LD_EXP 22
4829: PUSH
4830: LD_STRING Denis
4832: STR
4833: PPUSH
4834: CALL_OW 38
// if Lisa in selectedPeople then
4838: LD_EXP 4
4842: PUSH
4843: LD_EXP 17
4847: IN
4848: IFFALSE 4880
// begin SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
4850: LD_EXP 4
4854: PPUSH
4855: LD_EXP 22
4859: PUSH
4860: LD_STRING Lisa
4862: STR
4863: PPUSH
4864: CALL_OW 38
// SaveVariable ( 1 , LisaIn06 ) ;
4868: LD_INT 1
4870: PPUSH
4871: LD_STRING LisaIn06
4873: PPUSH
4874: CALL_OW 39
// end else
4878: GO 4901
// if IsOk ( Lisa ) then
4880: LD_EXP 4
4884: PPUSH
4885: CALL_OW 302
4889: IFFALSE 4901
// SaveVariable ( 1 , LisaStayInDelta ) ;
4891: LD_INT 1
4893: PPUSH
4894: LD_STRING LisaStayInDelta
4896: PPUSH
4897: CALL_OW 39
// if Bobby in selectedPeople then
4901: LD_EXP 6
4905: PUSH
4906: LD_EXP 17
4910: IN
4911: IFFALSE 4943
// begin SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
4913: LD_EXP 6
4917: PPUSH
4918: LD_EXP 22
4922: PUSH
4923: LD_STRING Bobby
4925: STR
4926: PPUSH
4927: CALL_OW 38
// SaveVariable ( 1 , BobbyIn06 ) ;
4931: LD_INT 1
4933: PPUSH
4934: LD_STRING BobbyIn06
4936: PPUSH
4937: CALL_OW 39
// end else
4941: GO 4964
// if IsOk ( Bobby ) then
4943: LD_EXP 6
4947: PPUSH
4948: CALL_OW 302
4952: IFFALSE 4964
// SaveVariable ( 1 , BobbyStayInDelta ) ;
4954: LD_INT 1
4956: PPUSH
4957: LD_STRING BobbyStayInDelta
4959: PPUSH
4960: CALL_OW 39
// if Cyrus in selectedPeople then
4964: LD_EXP 7
4968: PUSH
4969: LD_EXP 17
4973: IN
4974: IFFALSE 5006
// begin SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
4976: LD_EXP 7
4980: PPUSH
4981: LD_EXP 22
4985: PUSH
4986: LD_STRING Cyrus
4988: STR
4989: PPUSH
4990: CALL_OW 38
// SaveVariable ( 1 , CyrusIn06 ) ;
4994: LD_INT 1
4996: PPUSH
4997: LD_STRING CyrusIn06
4999: PPUSH
5000: CALL_OW 39
// end else
5004: GO 5027
// if IsOk ( Cyrus ) then
5006: LD_EXP 7
5010: PPUSH
5011: CALL_OW 302
5015: IFFALSE 5027
// SaveVariable ( 1 , CyrusStayInDelta ) ;
5017: LD_INT 1
5019: PPUSH
5020: LD_STRING CyrusStayInDelta
5022: PPUSH
5023: CALL_OW 39
// if Frank in selectedPeople then
5027: LD_EXP 5
5031: PUSH
5032: LD_EXP 17
5036: IN
5037: IFFALSE 5069
// begin SaveCharacters ( Frank , mission_prefix & Frank ) ;
5039: LD_EXP 5
5043: PPUSH
5044: LD_EXP 22
5048: PUSH
5049: LD_STRING Frank
5051: STR
5052: PPUSH
5053: CALL_OW 38
// SaveVariable ( 1 , FrankIn06 ) ;
5057: LD_INT 1
5059: PPUSH
5060: LD_STRING FrankIn06
5062: PPUSH
5063: CALL_OW 39
// end else
5067: GO 5090
// if IsOk ( Frank ) then
5069: LD_EXP 5
5073: PPUSH
5074: CALL_OW 302
5078: IFFALSE 5090
// SaveVariable ( 1 , FrankStayInDelta ) ;
5080: LD_INT 1
5082: PPUSH
5083: LD_STRING FrankStayInDelta
5085: PPUSH
5086: CALL_OW 39
// if Brown in selectedPeople then
5090: LD_EXP 8
5094: PUSH
5095: LD_EXP 17
5099: IN
5100: IFFALSE 5132
// begin SaveCharacters ( Brown , mission_prefix & Brown ) ;
5102: LD_EXP 8
5106: PPUSH
5107: LD_EXP 22
5111: PUSH
5112: LD_STRING Brown
5114: STR
5115: PPUSH
5116: CALL_OW 38
// SaveVariable ( 1 , BrownIn06 ) ;
5120: LD_INT 1
5122: PPUSH
5123: LD_STRING BrownIn06
5125: PPUSH
5126: CALL_OW 39
// end else
5130: GO 5153
// if IsOk ( Brown ) then
5132: LD_EXP 8
5136: PPUSH
5137: CALL_OW 302
5141: IFFALSE 5153
// SaveVariable ( 1 , BrownStayInDelta ) ;
5143: LD_INT 1
5145: PPUSH
5146: LD_STRING BrownStayInDelta
5148: PPUSH
5149: CALL_OW 39
// if Donaldson in selectedPeople then
5153: LD_EXP 9
5157: PUSH
5158: LD_EXP 17
5162: IN
5163: IFFALSE 5195
// begin SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
5165: LD_EXP 9
5169: PPUSH
5170: LD_EXP 22
5174: PUSH
5175: LD_STRING Donaldson
5177: STR
5178: PPUSH
5179: CALL_OW 38
// SaveVariable ( 1 , DonaldsonIn06 ) ;
5183: LD_INT 1
5185: PPUSH
5186: LD_STRING DonaldsonIn06
5188: PPUSH
5189: CALL_OW 39
// end else
5193: GO 5216
// if IsOk ( Donaldson ) then
5195: LD_EXP 9
5199: PPUSH
5200: CALL_OW 302
5204: IFFALSE 5216
// SaveVariable ( 1 , DonaldsonStayInDelta ) ;
5206: LD_INT 1
5208: PPUSH
5209: LD_STRING DonaldsonStayInDelta
5211: PPUSH
5212: CALL_OW 39
// if Gladstone in selectedPeople then
5216: LD_EXP 2
5220: PUSH
5221: LD_EXP 17
5225: IN
5226: IFFALSE 5258
// begin SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
5228: LD_EXP 2
5232: PPUSH
5233: LD_EXP 22
5237: PUSH
5238: LD_STRING Gladstone
5240: STR
5241: PPUSH
5242: CALL_OW 38
// SaveVariable ( 1 , GladstoneIn06 ) ;
5246: LD_INT 1
5248: PPUSH
5249: LD_STRING GladstoneIn06
5251: PPUSH
5252: CALL_OW 39
// end else
5256: GO 5279
// if IsOk ( Gladstone ) then
5258: LD_EXP 2
5262: PPUSH
5263: CALL_OW 302
5267: IFFALSE 5279
// SaveVariable ( 1 , GladstoneStayInDelta ) ;
5269: LD_INT 1
5271: PPUSH
5272: LD_STRING GladstoneStayInDelta
5274: PPUSH
5275: CALL_OW 39
// selectedPeople := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ;
5279: LD_ADDR_EXP 17
5283: PUSH
5284: LD_INT 22
5286: PUSH
5287: LD_INT 1
5289: PUSH
5290: EMPTY
5291: LIST
5292: LIST
5293: PUSH
5294: LD_INT 23
5296: PUSH
5297: LD_INT 1
5299: PUSH
5300: EMPTY
5301: LIST
5302: LIST
5303: PUSH
5304: LD_INT 21
5306: PUSH
5307: LD_INT 1
5309: PUSH
5310: EMPTY
5311: LIST
5312: LIST
5313: PUSH
5314: EMPTY
5315: LIST
5316: LIST
5317: LIST
5318: PPUSH
5319: CALL_OW 69
5323: ST_TO_ADDR
// SaveCharacters ( yourApemans , ApeIn06 ) ;
5324: LD_EXP 13
5328: PPUSH
5329: LD_STRING ApeIn06
5331: PPUSH
5332: CALL_OW 38
// SaveCharacters ( selectedPeople diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis ] , OthersIn06 ) ;
5336: LD_EXP 17
5340: PUSH
5341: LD_EXP 1
5345: PUSH
5346: LD_EXP 4
5350: PUSH
5351: LD_EXP 6
5355: PUSH
5356: LD_EXP 7
5360: PUSH
5361: LD_EXP 5
5365: PUSH
5366: LD_EXP 8
5370: PUSH
5371: LD_EXP 9
5375: PUSH
5376: LD_EXP 2
5380: PUSH
5381: LD_EXP 3
5385: PUSH
5386: EMPTY
5387: LIST
5388: LIST
5389: LIST
5390: LIST
5391: LIST
5392: LIST
5393: LIST
5394: LIST
5395: LIST
5396: DIFF
5397: PPUSH
5398: LD_STRING OthersIn06
5400: PPUSH
5401: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ DeltaDoctor , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis ] , OthersStayInDelta ) ;
5405: LD_INT 22
5407: PUSH
5408: LD_INT 4
5410: PUSH
5411: EMPTY
5412: LIST
5413: LIST
5414: PUSH
5415: LD_INT 2
5417: PUSH
5418: LD_INT 25
5420: PUSH
5421: LD_INT 1
5423: PUSH
5424: EMPTY
5425: LIST
5426: LIST
5427: PUSH
5428: LD_INT 25
5430: PUSH
5431: LD_INT 2
5433: PUSH
5434: EMPTY
5435: LIST
5436: LIST
5437: PUSH
5438: LD_INT 25
5440: PUSH
5441: LD_INT 3
5443: PUSH
5444: EMPTY
5445: LIST
5446: LIST
5447: PUSH
5448: LD_INT 25
5450: PUSH
5451: LD_INT 4
5453: PUSH
5454: EMPTY
5455: LIST
5456: LIST
5457: PUSH
5458: EMPTY
5459: LIST
5460: LIST
5461: LIST
5462: LIST
5463: LIST
5464: PUSH
5465: EMPTY
5466: LIST
5467: LIST
5468: PPUSH
5469: CALL_OW 69
5473: PUSH
5474: LD_EXP 15
5478: PUSH
5479: LD_EXP 4
5483: PUSH
5484: LD_EXP 6
5488: PUSH
5489: LD_EXP 7
5493: PUSH
5494: LD_EXP 5
5498: PUSH
5499: LD_EXP 8
5503: PUSH
5504: LD_EXP 9
5508: PUSH
5509: LD_EXP 2
5513: PUSH
5514: LD_EXP 3
5518: PUSH
5519: EMPTY
5520: LIST
5521: LIST
5522: LIST
5523: LIST
5524: LIST
5525: LIST
5526: LIST
5527: LIST
5528: LIST
5529: DIFF
5530: PPUSH
5531: LD_STRING OthersStayInDelta
5533: PPUSH
5534: CALL_OW 38
// end ;
5538: LD_VAR 0 1
5542: RET
// export function SaveCargos ; var i ; begin
5543: LD_INT 0
5545: PPUSH
5546: PPUSH
// for i in FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) do
5547: LD_ADDR_VAR 0 2
5551: PUSH
5552: LD_INT 3
5554: PPUSH
5555: LD_INT 22
5557: PUSH
5558: LD_INT 1
5560: PUSH
5561: EMPTY
5562: LIST
5563: LIST
5564: PUSH
5565: LD_INT 34
5567: PUSH
5568: LD_INT 12
5570: PUSH
5571: EMPTY
5572: LIST
5573: LIST
5574: PUSH
5575: EMPTY
5576: LIST
5577: LIST
5578: PPUSH
5579: CALL_OW 70
5583: PUSH
5584: FOR_IN
5585: IFFALSE 5613
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
5587: LD_ADDR_EXP 21
5591: PUSH
5592: LD_EXP 21
5596: PUSH
5597: LD_VAR 0 2
5601: PPUSH
5602: CALL 5632 0 1
5606: PUSH
5607: EMPTY
5608: LIST
5609: ADD
5610: ST_TO_ADDR
5611: GO 5584
5613: POP
5614: POP
// SaveVariable ( resources , 06_ResourcesInCargo06_1 ) ;
5615: LD_EXP 21
5619: PPUSH
5620: LD_STRING 06_ResourcesInCargo06_1
5622: PPUSH
5623: CALL_OW 39
// end ;
5627: LD_VAR 0 1
5631: RET
// export function GetMultiCargo ( cargo_bay ) ; begin
5632: LD_INT 0
5634: PPUSH
// result := [ GetCargo ( cargo_bay , mat_cans ) , GetCargo ( cargo_bay , mat_oil ) , GetCargo ( cargo_bay , mat_siberit ) ] ;
5635: LD_ADDR_VAR 0 2
5639: PUSH
5640: LD_VAR 0 1
5644: PPUSH
5645: LD_INT 1
5647: PPUSH
5648: CALL_OW 289
5652: PUSH
5653: LD_VAR 0 1
5657: PPUSH
5658: LD_INT 2
5660: PPUSH
5661: CALL_OW 289
5665: PUSH
5666: LD_VAR 0 1
5670: PPUSH
5671: LD_INT 3
5673: PPUSH
5674: CALL_OW 289
5678: PUSH
5679: EMPTY
5680: LIST
5681: LIST
5682: LIST
5683: ST_TO_ADDR
// end ; end_of_file
5684: LD_VAR 0 2
5688: RET
// on Command ( comandid ) do var i ;
5689: LD_INT 0
5691: PPUSH
// begin if comandid = 65 then
5692: LD_VAR 0 1
5696: PUSH
5697: LD_INT 65
5699: EQUAL
5700: IFFALSE 5741
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
5702: LD_ADDR_VAR 0 2
5706: PUSH
5707: LD_INT 22
5709: PUSH
5710: LD_INT 1
5712: PUSH
5713: EMPTY
5714: LIST
5715: LIST
5716: PUSH
5717: EMPTY
5718: LIST
5719: PPUSH
5720: CALL_OW 69
5724: PUSH
5725: FOR_IN
5726: IFFALSE 5739
// ComStop ( i ) ;
5728: LD_VAR 0 2
5732: PPUSH
5733: CALL_OW 141
5737: GO 5725
5739: POP
5740: POP
// end ;
5741: PPOPN 2
5743: END
// on ApemanTamed ( apeman , human ) do var tmp ;
5744: LD_INT 0
5746: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
5747: LD_ADDR_VAR 0 3
5751: PUSH
5752: LD_INT 22
5754: PUSH
5755: LD_INT 1
5757: PUSH
5758: EMPTY
5759: LIST
5760: LIST
5761: PUSH
5762: LD_INT 21
5764: PUSH
5765: LD_INT 3
5767: PUSH
5768: EMPTY
5769: LIST
5770: LIST
5771: PUSH
5772: LD_INT 30
5774: PUSH
5775: LD_INT 0
5777: PUSH
5778: EMPTY
5779: LIST
5780: LIST
5781: PUSH
5782: EMPTY
5783: LIST
5784: LIST
5785: LIST
5786: PPUSH
5787: CALL_OW 69
5791: ST_TO_ADDR
// ComEnterUnit ( apeman , tmp [ 1 ] ) ;
5792: LD_VAR 0 1
5796: PPUSH
5797: LD_VAR 0 3
5801: PUSH
5802: LD_INT 1
5804: ARRAY
5805: PPUSH
5806: CALL_OW 120
// SetSide ( apeman , 4 ) ;
5810: LD_VAR 0 1
5814: PPUSH
5815: LD_INT 4
5817: PPUSH
5818: CALL_OW 235
// end ; end_of_file
5822: PPOPN 3
5824: END
// every 0 0$1 do
5825: GO 5827
5827: DISABLE
// begin enable ;
5828: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
5829: LD_STRING updateTimer(
5831: PUSH
5832: LD_OWVAR 1
5836: STR
5837: PUSH
5838: LD_STRING );
5840: STR
5841: PPUSH
5842: CALL_OW 559
// end ;
5846: END
// on MapStart ( p ) do begin if streamModeActive then
5847: LD_EXP 24
5851: IFFALSE 5860
// DefineStreamItems ( true ) ;
5853: LD_INT 1
5855: PPUSH
5856: CALL 7508 0 1
// UpdateFactoryWaypoints ( ) ;
5860: CALL 21092 0 0
// end ;
5864: PPOPN 1
5866: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
5867: LD_INT 0
5869: PPUSH
// if p2 = 100 then
5870: LD_VAR 0 2
5874: PUSH
5875: LD_INT 100
5877: EQUAL
5878: IFFALSE 6881
// begin if not StreamModeActive then
5880: LD_EXP 24
5884: NOT
5885: IFFALSE 5895
// StreamModeActive := true ;
5887: LD_ADDR_EXP 24
5891: PUSH
5892: LD_INT 1
5894: ST_TO_ADDR
// if p3 = 0 then
5895: LD_VAR 0 3
5899: PUSH
5900: LD_INT 0
5902: EQUAL
5903: IFFALSE 5909
// InitStreamMode ;
5905: CALL 7044 0 0
// if p3 = 1 then
5909: LD_VAR 0 3
5913: PUSH
5914: LD_INT 1
5916: EQUAL
5917: IFFALSE 5927
// sRocket := true ;
5919: LD_ADDR_EXP 29
5923: PUSH
5924: LD_INT 1
5926: ST_TO_ADDR
// if p3 = 2 then
5927: LD_VAR 0 3
5931: PUSH
5932: LD_INT 2
5934: EQUAL
5935: IFFALSE 5945
// sSpeed := true ;
5937: LD_ADDR_EXP 28
5941: PUSH
5942: LD_INT 1
5944: ST_TO_ADDR
// if p3 = 3 then
5945: LD_VAR 0 3
5949: PUSH
5950: LD_INT 3
5952: EQUAL
5953: IFFALSE 5963
// sEngine := true ;
5955: LD_ADDR_EXP 30
5959: PUSH
5960: LD_INT 1
5962: ST_TO_ADDR
// if p3 = 4 then
5963: LD_VAR 0 3
5967: PUSH
5968: LD_INT 4
5970: EQUAL
5971: IFFALSE 5981
// sSpec := true ;
5973: LD_ADDR_EXP 27
5977: PUSH
5978: LD_INT 1
5980: ST_TO_ADDR
// if p3 = 5 then
5981: LD_VAR 0 3
5985: PUSH
5986: LD_INT 5
5988: EQUAL
5989: IFFALSE 5999
// sLevel := true ;
5991: LD_ADDR_EXP 31
5995: PUSH
5996: LD_INT 1
5998: ST_TO_ADDR
// if p3 = 6 then
5999: LD_VAR 0 3
6003: PUSH
6004: LD_INT 6
6006: EQUAL
6007: IFFALSE 6017
// sArmoury := true ;
6009: LD_ADDR_EXP 32
6013: PUSH
6014: LD_INT 1
6016: ST_TO_ADDR
// if p3 = 7 then
6017: LD_VAR 0 3
6021: PUSH
6022: LD_INT 7
6024: EQUAL
6025: IFFALSE 6035
// sRadar := true ;
6027: LD_ADDR_EXP 33
6031: PUSH
6032: LD_INT 1
6034: ST_TO_ADDR
// if p3 = 8 then
6035: LD_VAR 0 3
6039: PUSH
6040: LD_INT 8
6042: EQUAL
6043: IFFALSE 6053
// sBunker := true ;
6045: LD_ADDR_EXP 34
6049: PUSH
6050: LD_INT 1
6052: ST_TO_ADDR
// if p3 = 9 then
6053: LD_VAR 0 3
6057: PUSH
6058: LD_INT 9
6060: EQUAL
6061: IFFALSE 6071
// sHack := true ;
6063: LD_ADDR_EXP 35
6067: PUSH
6068: LD_INT 1
6070: ST_TO_ADDR
// if p3 = 10 then
6071: LD_VAR 0 3
6075: PUSH
6076: LD_INT 10
6078: EQUAL
6079: IFFALSE 6089
// sFire := true ;
6081: LD_ADDR_EXP 36
6085: PUSH
6086: LD_INT 1
6088: ST_TO_ADDR
// if p3 = 11 then
6089: LD_VAR 0 3
6093: PUSH
6094: LD_INT 11
6096: EQUAL
6097: IFFALSE 6107
// sRefresh := true ;
6099: LD_ADDR_EXP 37
6103: PUSH
6104: LD_INT 1
6106: ST_TO_ADDR
// if p3 = 12 then
6107: LD_VAR 0 3
6111: PUSH
6112: LD_INT 12
6114: EQUAL
6115: IFFALSE 6125
// sExp := true ;
6117: LD_ADDR_EXP 38
6121: PUSH
6122: LD_INT 1
6124: ST_TO_ADDR
// if p3 = 13 then
6125: LD_VAR 0 3
6129: PUSH
6130: LD_INT 13
6132: EQUAL
6133: IFFALSE 6143
// sDepot := true ;
6135: LD_ADDR_EXP 39
6139: PUSH
6140: LD_INT 1
6142: ST_TO_ADDR
// if p3 = 14 then
6143: LD_VAR 0 3
6147: PUSH
6148: LD_INT 14
6150: EQUAL
6151: IFFALSE 6161
// sFlag := true ;
6153: LD_ADDR_EXP 40
6157: PUSH
6158: LD_INT 1
6160: ST_TO_ADDR
// if p3 = 15 then
6161: LD_VAR 0 3
6165: PUSH
6166: LD_INT 15
6168: EQUAL
6169: IFFALSE 6179
// sKamikadze := true ;
6171: LD_ADDR_EXP 48
6175: PUSH
6176: LD_INT 1
6178: ST_TO_ADDR
// if p3 = 16 then
6179: LD_VAR 0 3
6183: PUSH
6184: LD_INT 16
6186: EQUAL
6187: IFFALSE 6197
// sTroll := true ;
6189: LD_ADDR_EXP 49
6193: PUSH
6194: LD_INT 1
6196: ST_TO_ADDR
// if p3 = 17 then
6197: LD_VAR 0 3
6201: PUSH
6202: LD_INT 17
6204: EQUAL
6205: IFFALSE 6215
// sSlow := true ;
6207: LD_ADDR_EXP 50
6211: PUSH
6212: LD_INT 1
6214: ST_TO_ADDR
// if p3 = 18 then
6215: LD_VAR 0 3
6219: PUSH
6220: LD_INT 18
6222: EQUAL
6223: IFFALSE 6233
// sLack := true ;
6225: LD_ADDR_EXP 51
6229: PUSH
6230: LD_INT 1
6232: ST_TO_ADDR
// if p3 = 19 then
6233: LD_VAR 0 3
6237: PUSH
6238: LD_INT 19
6240: EQUAL
6241: IFFALSE 6251
// sTank := true ;
6243: LD_ADDR_EXP 53
6247: PUSH
6248: LD_INT 1
6250: ST_TO_ADDR
// if p3 = 20 then
6251: LD_VAR 0 3
6255: PUSH
6256: LD_INT 20
6258: EQUAL
6259: IFFALSE 6269
// sRemote := true ;
6261: LD_ADDR_EXP 54
6265: PUSH
6266: LD_INT 1
6268: ST_TO_ADDR
// if p3 = 21 then
6269: LD_VAR 0 3
6273: PUSH
6274: LD_INT 21
6276: EQUAL
6277: IFFALSE 6287
// sPowell := true ;
6279: LD_ADDR_EXP 55
6283: PUSH
6284: LD_INT 1
6286: ST_TO_ADDR
// if p3 = 22 then
6287: LD_VAR 0 3
6291: PUSH
6292: LD_INT 22
6294: EQUAL
6295: IFFALSE 6305
// sTeleport := true ;
6297: LD_ADDR_EXP 58
6301: PUSH
6302: LD_INT 1
6304: ST_TO_ADDR
// if p3 = 23 then
6305: LD_VAR 0 3
6309: PUSH
6310: LD_INT 23
6312: EQUAL
6313: IFFALSE 6323
// sOilTower := true ;
6315: LD_ADDR_EXP 60
6319: PUSH
6320: LD_INT 1
6322: ST_TO_ADDR
// if p3 = 24 then
6323: LD_VAR 0 3
6327: PUSH
6328: LD_INT 24
6330: EQUAL
6331: IFFALSE 6341
// sShovel := true ;
6333: LD_ADDR_EXP 61
6337: PUSH
6338: LD_INT 1
6340: ST_TO_ADDR
// if p3 = 25 then
6341: LD_VAR 0 3
6345: PUSH
6346: LD_INT 25
6348: EQUAL
6349: IFFALSE 6359
// sSheik := true ;
6351: LD_ADDR_EXP 62
6355: PUSH
6356: LD_INT 1
6358: ST_TO_ADDR
// if p3 = 26 then
6359: LD_VAR 0 3
6363: PUSH
6364: LD_INT 26
6366: EQUAL
6367: IFFALSE 6377
// sEarthquake := true ;
6369: LD_ADDR_EXP 64
6373: PUSH
6374: LD_INT 1
6376: ST_TO_ADDR
// if p3 = 27 then
6377: LD_VAR 0 3
6381: PUSH
6382: LD_INT 27
6384: EQUAL
6385: IFFALSE 6395
// sAI := true ;
6387: LD_ADDR_EXP 65
6391: PUSH
6392: LD_INT 1
6394: ST_TO_ADDR
// if p3 = 28 then
6395: LD_VAR 0 3
6399: PUSH
6400: LD_INT 28
6402: EQUAL
6403: IFFALSE 6413
// sCargo := true ;
6405: LD_ADDR_EXP 68
6409: PUSH
6410: LD_INT 1
6412: ST_TO_ADDR
// if p3 = 29 then
6413: LD_VAR 0 3
6417: PUSH
6418: LD_INT 29
6420: EQUAL
6421: IFFALSE 6431
// sDLaser := true ;
6423: LD_ADDR_EXP 69
6427: PUSH
6428: LD_INT 1
6430: ST_TO_ADDR
// if p3 = 30 then
6431: LD_VAR 0 3
6435: PUSH
6436: LD_INT 30
6438: EQUAL
6439: IFFALSE 6449
// sExchange := true ;
6441: LD_ADDR_EXP 70
6445: PUSH
6446: LD_INT 1
6448: ST_TO_ADDR
// if p3 = 31 then
6449: LD_VAR 0 3
6453: PUSH
6454: LD_INT 31
6456: EQUAL
6457: IFFALSE 6467
// sFac := true ;
6459: LD_ADDR_EXP 71
6463: PUSH
6464: LD_INT 1
6466: ST_TO_ADDR
// if p3 = 32 then
6467: LD_VAR 0 3
6471: PUSH
6472: LD_INT 32
6474: EQUAL
6475: IFFALSE 6485
// sPower := true ;
6477: LD_ADDR_EXP 72
6481: PUSH
6482: LD_INT 1
6484: ST_TO_ADDR
// if p3 = 33 then
6485: LD_VAR 0 3
6489: PUSH
6490: LD_INT 33
6492: EQUAL
6493: IFFALSE 6503
// sRandom := true ;
6495: LD_ADDR_EXP 73
6499: PUSH
6500: LD_INT 1
6502: ST_TO_ADDR
// if p3 = 34 then
6503: LD_VAR 0 3
6507: PUSH
6508: LD_INT 34
6510: EQUAL
6511: IFFALSE 6521
// sShield := true ;
6513: LD_ADDR_EXP 74
6517: PUSH
6518: LD_INT 1
6520: ST_TO_ADDR
// if p3 = 35 then
6521: LD_VAR 0 3
6525: PUSH
6526: LD_INT 35
6528: EQUAL
6529: IFFALSE 6539
// sTime := true ;
6531: LD_ADDR_EXP 75
6535: PUSH
6536: LD_INT 1
6538: ST_TO_ADDR
// if p3 = 36 then
6539: LD_VAR 0 3
6543: PUSH
6544: LD_INT 36
6546: EQUAL
6547: IFFALSE 6557
// sTools := true ;
6549: LD_ADDR_EXP 76
6553: PUSH
6554: LD_INT 1
6556: ST_TO_ADDR
// if p3 = 101 then
6557: LD_VAR 0 3
6561: PUSH
6562: LD_INT 101
6564: EQUAL
6565: IFFALSE 6575
// sSold := true ;
6567: LD_ADDR_EXP 41
6571: PUSH
6572: LD_INT 1
6574: ST_TO_ADDR
// if p3 = 102 then
6575: LD_VAR 0 3
6579: PUSH
6580: LD_INT 102
6582: EQUAL
6583: IFFALSE 6593
// sDiff := true ;
6585: LD_ADDR_EXP 42
6589: PUSH
6590: LD_INT 1
6592: ST_TO_ADDR
// if p3 = 103 then
6593: LD_VAR 0 3
6597: PUSH
6598: LD_INT 103
6600: EQUAL
6601: IFFALSE 6611
// sFog := true ;
6603: LD_ADDR_EXP 45
6607: PUSH
6608: LD_INT 1
6610: ST_TO_ADDR
// if p3 = 104 then
6611: LD_VAR 0 3
6615: PUSH
6616: LD_INT 104
6618: EQUAL
6619: IFFALSE 6629
// sReset := true ;
6621: LD_ADDR_EXP 46
6625: PUSH
6626: LD_INT 1
6628: ST_TO_ADDR
// if p3 = 105 then
6629: LD_VAR 0 3
6633: PUSH
6634: LD_INT 105
6636: EQUAL
6637: IFFALSE 6647
// sSun := true ;
6639: LD_ADDR_EXP 47
6643: PUSH
6644: LD_INT 1
6646: ST_TO_ADDR
// if p3 = 106 then
6647: LD_VAR 0 3
6651: PUSH
6652: LD_INT 106
6654: EQUAL
6655: IFFALSE 6665
// sTiger := true ;
6657: LD_ADDR_EXP 43
6661: PUSH
6662: LD_INT 1
6664: ST_TO_ADDR
// if p3 = 107 then
6665: LD_VAR 0 3
6669: PUSH
6670: LD_INT 107
6672: EQUAL
6673: IFFALSE 6683
// sBomb := true ;
6675: LD_ADDR_EXP 44
6679: PUSH
6680: LD_INT 1
6682: ST_TO_ADDR
// if p3 = 108 then
6683: LD_VAR 0 3
6687: PUSH
6688: LD_INT 108
6690: EQUAL
6691: IFFALSE 6701
// sWound := true ;
6693: LD_ADDR_EXP 52
6697: PUSH
6698: LD_INT 1
6700: ST_TO_ADDR
// if p3 = 109 then
6701: LD_VAR 0 3
6705: PUSH
6706: LD_INT 109
6708: EQUAL
6709: IFFALSE 6719
// sBetray := true ;
6711: LD_ADDR_EXP 56
6715: PUSH
6716: LD_INT 1
6718: ST_TO_ADDR
// if p3 = 110 then
6719: LD_VAR 0 3
6723: PUSH
6724: LD_INT 110
6726: EQUAL
6727: IFFALSE 6737
// sContamin := true ;
6729: LD_ADDR_EXP 57
6733: PUSH
6734: LD_INT 1
6736: ST_TO_ADDR
// if p3 = 111 then
6737: LD_VAR 0 3
6741: PUSH
6742: LD_INT 111
6744: EQUAL
6745: IFFALSE 6755
// sOil := true ;
6747: LD_ADDR_EXP 59
6751: PUSH
6752: LD_INT 1
6754: ST_TO_ADDR
// if p3 = 112 then
6755: LD_VAR 0 3
6759: PUSH
6760: LD_INT 112
6762: EQUAL
6763: IFFALSE 6773
// sStu := true ;
6765: LD_ADDR_EXP 63
6769: PUSH
6770: LD_INT 1
6772: ST_TO_ADDR
// if p3 = 113 then
6773: LD_VAR 0 3
6777: PUSH
6778: LD_INT 113
6780: EQUAL
6781: IFFALSE 6791
// sBazooka := true ;
6783: LD_ADDR_EXP 66
6787: PUSH
6788: LD_INT 1
6790: ST_TO_ADDR
// if p3 = 114 then
6791: LD_VAR 0 3
6795: PUSH
6796: LD_INT 114
6798: EQUAL
6799: IFFALSE 6809
// sMortar := true ;
6801: LD_ADDR_EXP 67
6805: PUSH
6806: LD_INT 1
6808: ST_TO_ADDR
// if p3 = 115 then
6809: LD_VAR 0 3
6813: PUSH
6814: LD_INT 115
6816: EQUAL
6817: IFFALSE 6827
// sRanger := true ;
6819: LD_ADDR_EXP 77
6823: PUSH
6824: LD_INT 1
6826: ST_TO_ADDR
// if p3 = 116 then
6827: LD_VAR 0 3
6831: PUSH
6832: LD_INT 116
6834: EQUAL
6835: IFFALSE 6845
// sComputer := true ;
6837: LD_ADDR_EXP 78
6841: PUSH
6842: LD_INT 1
6844: ST_TO_ADDR
// if p3 = 117 then
6845: LD_VAR 0 3
6849: PUSH
6850: LD_INT 117
6852: EQUAL
6853: IFFALSE 6863
// s30 := true ;
6855: LD_ADDR_EXP 79
6859: PUSH
6860: LD_INT 1
6862: ST_TO_ADDR
// if p3 = 118 then
6863: LD_VAR 0 3
6867: PUSH
6868: LD_INT 118
6870: EQUAL
6871: IFFALSE 6881
// s60 := true ;
6873: LD_ADDR_EXP 80
6877: PUSH
6878: LD_INT 1
6880: ST_TO_ADDR
// end ; if p2 = 101 then
6881: LD_VAR 0 2
6885: PUSH
6886: LD_INT 101
6888: EQUAL
6889: IFFALSE 7017
// begin case p3 of 1 :
6891: LD_VAR 0 3
6895: PUSH
6896: LD_INT 1
6898: DOUBLE
6899: EQUAL
6900: IFTRUE 6904
6902: GO 6911
6904: POP
// hHackUnlimitedResources ; 2 :
6905: CALL 19115 0 0
6909: GO 7017
6911: LD_INT 2
6913: DOUBLE
6914: EQUAL
6915: IFTRUE 6919
6917: GO 6926
6919: POP
// hHackSetLevel10 ; 3 :
6920: CALL 19248 0 0
6924: GO 7017
6926: LD_INT 3
6928: DOUBLE
6929: EQUAL
6930: IFTRUE 6934
6932: GO 6941
6934: POP
// hHackSetLevel10YourUnits ; 4 :
6935: CALL 19333 0 0
6939: GO 7017
6941: LD_INT 4
6943: DOUBLE
6944: EQUAL
6945: IFTRUE 6949
6947: GO 6956
6949: POP
// hHackInvincible ; 5 :
6950: CALL 19781 0 0
6954: GO 7017
6956: LD_INT 5
6958: DOUBLE
6959: EQUAL
6960: IFTRUE 6964
6962: GO 6971
6964: POP
// hHackInvisible ; 6 :
6965: CALL 19892 0 0
6969: GO 7017
6971: LD_INT 6
6973: DOUBLE
6974: EQUAL
6975: IFTRUE 6979
6977: GO 6986
6979: POP
// hHackChangeYourSide ; 7 :
6980: CALL 19949 0 0
6984: GO 7017
6986: LD_INT 7
6988: DOUBLE
6989: EQUAL
6990: IFTRUE 6994
6992: GO 7001
6994: POP
// hHackChangeUnitSide ; 8 :
6995: CALL 19991 0 0
6999: GO 7017
7001: LD_INT 8
7003: DOUBLE
7004: EQUAL
7005: IFTRUE 7009
7007: GO 7016
7009: POP
// hHackFog ; end ;
7010: CALL 20092 0 0
7014: GO 7017
7016: POP
// end ; end ;
7017: LD_VAR 0 7
7021: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
7022: GO 7024
7024: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
7025: LD_STRING initStreamRollete();
7027: PPUSH
7028: CALL_OW 559
// InitStreamMode ;
7032: CALL 7044 0 0
// DefineStreamItems ( false ) ;
7036: LD_INT 0
7038: PPUSH
7039: CALL 7508 0 1
// end ;
7043: END
// function InitStreamMode ; begin
7044: LD_INT 0
7046: PPUSH
// streamModeActive := false ;
7047: LD_ADDR_EXP 24
7051: PUSH
7052: LD_INT 0
7054: ST_TO_ADDR
// normalCounter := 36 ;
7055: LD_ADDR_EXP 25
7059: PUSH
7060: LD_INT 36
7062: ST_TO_ADDR
// hardcoreCounter := 18 ;
7063: LD_ADDR_EXP 26
7067: PUSH
7068: LD_INT 18
7070: ST_TO_ADDR
// sRocket := false ;
7071: LD_ADDR_EXP 29
7075: PUSH
7076: LD_INT 0
7078: ST_TO_ADDR
// sSpeed := false ;
7079: LD_ADDR_EXP 28
7083: PUSH
7084: LD_INT 0
7086: ST_TO_ADDR
// sEngine := false ;
7087: LD_ADDR_EXP 30
7091: PUSH
7092: LD_INT 0
7094: ST_TO_ADDR
// sSpec := false ;
7095: LD_ADDR_EXP 27
7099: PUSH
7100: LD_INT 0
7102: ST_TO_ADDR
// sLevel := false ;
7103: LD_ADDR_EXP 31
7107: PUSH
7108: LD_INT 0
7110: ST_TO_ADDR
// sArmoury := false ;
7111: LD_ADDR_EXP 32
7115: PUSH
7116: LD_INT 0
7118: ST_TO_ADDR
// sRadar := false ;
7119: LD_ADDR_EXP 33
7123: PUSH
7124: LD_INT 0
7126: ST_TO_ADDR
// sBunker := false ;
7127: LD_ADDR_EXP 34
7131: PUSH
7132: LD_INT 0
7134: ST_TO_ADDR
// sHack := false ;
7135: LD_ADDR_EXP 35
7139: PUSH
7140: LD_INT 0
7142: ST_TO_ADDR
// sFire := false ;
7143: LD_ADDR_EXP 36
7147: PUSH
7148: LD_INT 0
7150: ST_TO_ADDR
// sRefresh := false ;
7151: LD_ADDR_EXP 37
7155: PUSH
7156: LD_INT 0
7158: ST_TO_ADDR
// sExp := false ;
7159: LD_ADDR_EXP 38
7163: PUSH
7164: LD_INT 0
7166: ST_TO_ADDR
// sDepot := false ;
7167: LD_ADDR_EXP 39
7171: PUSH
7172: LD_INT 0
7174: ST_TO_ADDR
// sFlag := false ;
7175: LD_ADDR_EXP 40
7179: PUSH
7180: LD_INT 0
7182: ST_TO_ADDR
// sKamikadze := false ;
7183: LD_ADDR_EXP 48
7187: PUSH
7188: LD_INT 0
7190: ST_TO_ADDR
// sTroll := false ;
7191: LD_ADDR_EXP 49
7195: PUSH
7196: LD_INT 0
7198: ST_TO_ADDR
// sSlow := false ;
7199: LD_ADDR_EXP 50
7203: PUSH
7204: LD_INT 0
7206: ST_TO_ADDR
// sLack := false ;
7207: LD_ADDR_EXP 51
7211: PUSH
7212: LD_INT 0
7214: ST_TO_ADDR
// sTank := false ;
7215: LD_ADDR_EXP 53
7219: PUSH
7220: LD_INT 0
7222: ST_TO_ADDR
// sRemote := false ;
7223: LD_ADDR_EXP 54
7227: PUSH
7228: LD_INT 0
7230: ST_TO_ADDR
// sPowell := false ;
7231: LD_ADDR_EXP 55
7235: PUSH
7236: LD_INT 0
7238: ST_TO_ADDR
// sTeleport := false ;
7239: LD_ADDR_EXP 58
7243: PUSH
7244: LD_INT 0
7246: ST_TO_ADDR
// sOilTower := false ;
7247: LD_ADDR_EXP 60
7251: PUSH
7252: LD_INT 0
7254: ST_TO_ADDR
// sShovel := false ;
7255: LD_ADDR_EXP 61
7259: PUSH
7260: LD_INT 0
7262: ST_TO_ADDR
// sSheik := false ;
7263: LD_ADDR_EXP 62
7267: PUSH
7268: LD_INT 0
7270: ST_TO_ADDR
// sEarthquake := false ;
7271: LD_ADDR_EXP 64
7275: PUSH
7276: LD_INT 0
7278: ST_TO_ADDR
// sAI := false ;
7279: LD_ADDR_EXP 65
7283: PUSH
7284: LD_INT 0
7286: ST_TO_ADDR
// sCargo := false ;
7287: LD_ADDR_EXP 68
7291: PUSH
7292: LD_INT 0
7294: ST_TO_ADDR
// sDLaser := false ;
7295: LD_ADDR_EXP 69
7299: PUSH
7300: LD_INT 0
7302: ST_TO_ADDR
// sExchange := false ;
7303: LD_ADDR_EXP 70
7307: PUSH
7308: LD_INT 0
7310: ST_TO_ADDR
// sFac := false ;
7311: LD_ADDR_EXP 71
7315: PUSH
7316: LD_INT 0
7318: ST_TO_ADDR
// sPower := false ;
7319: LD_ADDR_EXP 72
7323: PUSH
7324: LD_INT 0
7326: ST_TO_ADDR
// sRandom := false ;
7327: LD_ADDR_EXP 73
7331: PUSH
7332: LD_INT 0
7334: ST_TO_ADDR
// sShield := false ;
7335: LD_ADDR_EXP 74
7339: PUSH
7340: LD_INT 0
7342: ST_TO_ADDR
// sTime := false ;
7343: LD_ADDR_EXP 75
7347: PUSH
7348: LD_INT 0
7350: ST_TO_ADDR
// sTools := false ;
7351: LD_ADDR_EXP 76
7355: PUSH
7356: LD_INT 0
7358: ST_TO_ADDR
// sSold := false ;
7359: LD_ADDR_EXP 41
7363: PUSH
7364: LD_INT 0
7366: ST_TO_ADDR
// sDiff := false ;
7367: LD_ADDR_EXP 42
7371: PUSH
7372: LD_INT 0
7374: ST_TO_ADDR
// sFog := false ;
7375: LD_ADDR_EXP 45
7379: PUSH
7380: LD_INT 0
7382: ST_TO_ADDR
// sReset := false ;
7383: LD_ADDR_EXP 46
7387: PUSH
7388: LD_INT 0
7390: ST_TO_ADDR
// sSun := false ;
7391: LD_ADDR_EXP 47
7395: PUSH
7396: LD_INT 0
7398: ST_TO_ADDR
// sTiger := false ;
7399: LD_ADDR_EXP 43
7403: PUSH
7404: LD_INT 0
7406: ST_TO_ADDR
// sBomb := false ;
7407: LD_ADDR_EXP 44
7411: PUSH
7412: LD_INT 0
7414: ST_TO_ADDR
// sWound := false ;
7415: LD_ADDR_EXP 52
7419: PUSH
7420: LD_INT 0
7422: ST_TO_ADDR
// sBetray := false ;
7423: LD_ADDR_EXP 56
7427: PUSH
7428: LD_INT 0
7430: ST_TO_ADDR
// sContamin := false ;
7431: LD_ADDR_EXP 57
7435: PUSH
7436: LD_INT 0
7438: ST_TO_ADDR
// sOil := false ;
7439: LD_ADDR_EXP 59
7443: PUSH
7444: LD_INT 0
7446: ST_TO_ADDR
// sStu := false ;
7447: LD_ADDR_EXP 63
7451: PUSH
7452: LD_INT 0
7454: ST_TO_ADDR
// sBazooka := false ;
7455: LD_ADDR_EXP 66
7459: PUSH
7460: LD_INT 0
7462: ST_TO_ADDR
// sMortar := false ;
7463: LD_ADDR_EXP 67
7467: PUSH
7468: LD_INT 0
7470: ST_TO_ADDR
// sRanger := false ;
7471: LD_ADDR_EXP 77
7475: PUSH
7476: LD_INT 0
7478: ST_TO_ADDR
// sComputer := false ;
7479: LD_ADDR_EXP 78
7483: PUSH
7484: LD_INT 0
7486: ST_TO_ADDR
// s30 := false ;
7487: LD_ADDR_EXP 79
7491: PUSH
7492: LD_INT 0
7494: ST_TO_ADDR
// s60 := false ;
7495: LD_ADDR_EXP 80
7499: PUSH
7500: LD_INT 0
7502: ST_TO_ADDR
// end ;
7503: LD_VAR 0 1
7507: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
7508: LD_INT 0
7510: PPUSH
7511: PPUSH
7512: PPUSH
7513: PPUSH
7514: PPUSH
7515: PPUSH
7516: PPUSH
// result := [ ] ;
7517: LD_ADDR_VAR 0 2
7521: PUSH
7522: EMPTY
7523: ST_TO_ADDR
// if campaign_id = 1 then
7524: LD_OWVAR 69
7528: PUSH
7529: LD_INT 1
7531: EQUAL
7532: IFFALSE 10698
// begin case mission_number of 1 :
7534: LD_OWVAR 70
7538: PUSH
7539: LD_INT 1
7541: DOUBLE
7542: EQUAL
7543: IFTRUE 7547
7545: GO 7623
7547: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
7548: LD_ADDR_VAR 0 2
7552: PUSH
7553: LD_INT 2
7555: PUSH
7556: LD_INT 4
7558: PUSH
7559: LD_INT 11
7561: PUSH
7562: LD_INT 12
7564: PUSH
7565: LD_INT 15
7567: PUSH
7568: LD_INT 16
7570: PUSH
7571: LD_INT 22
7573: PUSH
7574: LD_INT 23
7576: PUSH
7577: LD_INT 26
7579: PUSH
7580: EMPTY
7581: LIST
7582: LIST
7583: LIST
7584: LIST
7585: LIST
7586: LIST
7587: LIST
7588: LIST
7589: LIST
7590: PUSH
7591: LD_INT 101
7593: PUSH
7594: LD_INT 102
7596: PUSH
7597: LD_INT 106
7599: PUSH
7600: LD_INT 116
7602: PUSH
7603: LD_INT 117
7605: PUSH
7606: LD_INT 118
7608: PUSH
7609: EMPTY
7610: LIST
7611: LIST
7612: LIST
7613: LIST
7614: LIST
7615: LIST
7616: PUSH
7617: EMPTY
7618: LIST
7619: LIST
7620: ST_TO_ADDR
7621: GO 10696
7623: LD_INT 2
7625: DOUBLE
7626: EQUAL
7627: IFTRUE 7631
7629: GO 7715
7631: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
7632: LD_ADDR_VAR 0 2
7636: PUSH
7637: LD_INT 2
7639: PUSH
7640: LD_INT 4
7642: PUSH
7643: LD_INT 11
7645: PUSH
7646: LD_INT 12
7648: PUSH
7649: LD_INT 15
7651: PUSH
7652: LD_INT 16
7654: PUSH
7655: LD_INT 22
7657: PUSH
7658: LD_INT 23
7660: PUSH
7661: LD_INT 26
7663: PUSH
7664: EMPTY
7665: LIST
7666: LIST
7667: LIST
7668: LIST
7669: LIST
7670: LIST
7671: LIST
7672: LIST
7673: LIST
7674: PUSH
7675: LD_INT 101
7677: PUSH
7678: LD_INT 102
7680: PUSH
7681: LD_INT 105
7683: PUSH
7684: LD_INT 106
7686: PUSH
7687: LD_INT 108
7689: PUSH
7690: LD_INT 116
7692: PUSH
7693: LD_INT 117
7695: PUSH
7696: LD_INT 118
7698: PUSH
7699: EMPTY
7700: LIST
7701: LIST
7702: LIST
7703: LIST
7704: LIST
7705: LIST
7706: LIST
7707: LIST
7708: PUSH
7709: EMPTY
7710: LIST
7711: LIST
7712: ST_TO_ADDR
7713: GO 10696
7715: LD_INT 3
7717: DOUBLE
7718: EQUAL
7719: IFTRUE 7723
7721: GO 7811
7723: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
7724: LD_ADDR_VAR 0 2
7728: PUSH
7729: LD_INT 2
7731: PUSH
7732: LD_INT 4
7734: PUSH
7735: LD_INT 5
7737: PUSH
7738: LD_INT 11
7740: PUSH
7741: LD_INT 12
7743: PUSH
7744: LD_INT 15
7746: PUSH
7747: LD_INT 16
7749: PUSH
7750: LD_INT 22
7752: PUSH
7753: LD_INT 26
7755: PUSH
7756: LD_INT 36
7758: PUSH
7759: EMPTY
7760: LIST
7761: LIST
7762: LIST
7763: LIST
7764: LIST
7765: LIST
7766: LIST
7767: LIST
7768: LIST
7769: LIST
7770: PUSH
7771: LD_INT 101
7773: PUSH
7774: LD_INT 102
7776: PUSH
7777: LD_INT 105
7779: PUSH
7780: LD_INT 106
7782: PUSH
7783: LD_INT 108
7785: PUSH
7786: LD_INT 116
7788: PUSH
7789: LD_INT 117
7791: PUSH
7792: LD_INT 118
7794: PUSH
7795: EMPTY
7796: LIST
7797: LIST
7798: LIST
7799: LIST
7800: LIST
7801: LIST
7802: LIST
7803: LIST
7804: PUSH
7805: EMPTY
7806: LIST
7807: LIST
7808: ST_TO_ADDR
7809: GO 10696
7811: LD_INT 4
7813: DOUBLE
7814: EQUAL
7815: IFTRUE 7819
7817: GO 7915
7819: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
7820: LD_ADDR_VAR 0 2
7824: PUSH
7825: LD_INT 2
7827: PUSH
7828: LD_INT 4
7830: PUSH
7831: LD_INT 5
7833: PUSH
7834: LD_INT 8
7836: PUSH
7837: LD_INT 11
7839: PUSH
7840: LD_INT 12
7842: PUSH
7843: LD_INT 15
7845: PUSH
7846: LD_INT 16
7848: PUSH
7849: LD_INT 22
7851: PUSH
7852: LD_INT 23
7854: PUSH
7855: LD_INT 26
7857: PUSH
7858: LD_INT 36
7860: PUSH
7861: EMPTY
7862: LIST
7863: LIST
7864: LIST
7865: LIST
7866: LIST
7867: LIST
7868: LIST
7869: LIST
7870: LIST
7871: LIST
7872: LIST
7873: LIST
7874: PUSH
7875: LD_INT 101
7877: PUSH
7878: LD_INT 102
7880: PUSH
7881: LD_INT 105
7883: PUSH
7884: LD_INT 106
7886: PUSH
7887: LD_INT 108
7889: PUSH
7890: LD_INT 116
7892: PUSH
7893: LD_INT 117
7895: PUSH
7896: LD_INT 118
7898: PUSH
7899: EMPTY
7900: LIST
7901: LIST
7902: LIST
7903: LIST
7904: LIST
7905: LIST
7906: LIST
7907: LIST
7908: PUSH
7909: EMPTY
7910: LIST
7911: LIST
7912: ST_TO_ADDR
7913: GO 10696
7915: LD_INT 5
7917: DOUBLE
7918: EQUAL
7919: IFTRUE 7923
7921: GO 8035
7923: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
7924: LD_ADDR_VAR 0 2
7928: PUSH
7929: LD_INT 2
7931: PUSH
7932: LD_INT 4
7934: PUSH
7935: LD_INT 5
7937: PUSH
7938: LD_INT 6
7940: PUSH
7941: LD_INT 8
7943: PUSH
7944: LD_INT 11
7946: PUSH
7947: LD_INT 12
7949: PUSH
7950: LD_INT 15
7952: PUSH
7953: LD_INT 16
7955: PUSH
7956: LD_INT 22
7958: PUSH
7959: LD_INT 23
7961: PUSH
7962: LD_INT 25
7964: PUSH
7965: LD_INT 26
7967: PUSH
7968: LD_INT 36
7970: PUSH
7971: EMPTY
7972: LIST
7973: LIST
7974: LIST
7975: LIST
7976: LIST
7977: LIST
7978: LIST
7979: LIST
7980: LIST
7981: LIST
7982: LIST
7983: LIST
7984: LIST
7985: LIST
7986: PUSH
7987: LD_INT 101
7989: PUSH
7990: LD_INT 102
7992: PUSH
7993: LD_INT 105
7995: PUSH
7996: LD_INT 106
7998: PUSH
7999: LD_INT 108
8001: PUSH
8002: LD_INT 109
8004: PUSH
8005: LD_INT 112
8007: PUSH
8008: LD_INT 116
8010: PUSH
8011: LD_INT 117
8013: PUSH
8014: LD_INT 118
8016: PUSH
8017: EMPTY
8018: LIST
8019: LIST
8020: LIST
8021: LIST
8022: LIST
8023: LIST
8024: LIST
8025: LIST
8026: LIST
8027: LIST
8028: PUSH
8029: EMPTY
8030: LIST
8031: LIST
8032: ST_TO_ADDR
8033: GO 10696
8035: LD_INT 6
8037: DOUBLE
8038: EQUAL
8039: IFTRUE 8043
8041: GO 8175
8043: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
8044: LD_ADDR_VAR 0 2
8048: PUSH
8049: LD_INT 2
8051: PUSH
8052: LD_INT 4
8054: PUSH
8055: LD_INT 5
8057: PUSH
8058: LD_INT 6
8060: PUSH
8061: LD_INT 8
8063: PUSH
8064: LD_INT 11
8066: PUSH
8067: LD_INT 12
8069: PUSH
8070: LD_INT 15
8072: PUSH
8073: LD_INT 16
8075: PUSH
8076: LD_INT 20
8078: PUSH
8079: LD_INT 21
8081: PUSH
8082: LD_INT 22
8084: PUSH
8085: LD_INT 23
8087: PUSH
8088: LD_INT 25
8090: PUSH
8091: LD_INT 26
8093: PUSH
8094: LD_INT 30
8096: PUSH
8097: LD_INT 31
8099: PUSH
8100: LD_INT 32
8102: PUSH
8103: LD_INT 36
8105: PUSH
8106: EMPTY
8107: LIST
8108: LIST
8109: LIST
8110: LIST
8111: LIST
8112: LIST
8113: LIST
8114: LIST
8115: LIST
8116: LIST
8117: LIST
8118: LIST
8119: LIST
8120: LIST
8121: LIST
8122: LIST
8123: LIST
8124: LIST
8125: LIST
8126: PUSH
8127: LD_INT 101
8129: PUSH
8130: LD_INT 102
8132: PUSH
8133: LD_INT 105
8135: PUSH
8136: LD_INT 106
8138: PUSH
8139: LD_INT 108
8141: PUSH
8142: LD_INT 109
8144: PUSH
8145: LD_INT 112
8147: PUSH
8148: LD_INT 116
8150: PUSH
8151: LD_INT 117
8153: PUSH
8154: LD_INT 118
8156: PUSH
8157: EMPTY
8158: LIST
8159: LIST
8160: LIST
8161: LIST
8162: LIST
8163: LIST
8164: LIST
8165: LIST
8166: LIST
8167: LIST
8168: PUSH
8169: EMPTY
8170: LIST
8171: LIST
8172: ST_TO_ADDR
8173: GO 10696
8175: LD_INT 7
8177: DOUBLE
8178: EQUAL
8179: IFTRUE 8183
8181: GO 8295
8183: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
8184: LD_ADDR_VAR 0 2
8188: PUSH
8189: LD_INT 2
8191: PUSH
8192: LD_INT 4
8194: PUSH
8195: LD_INT 5
8197: PUSH
8198: LD_INT 7
8200: PUSH
8201: LD_INT 11
8203: PUSH
8204: LD_INT 12
8206: PUSH
8207: LD_INT 15
8209: PUSH
8210: LD_INT 16
8212: PUSH
8213: LD_INT 20
8215: PUSH
8216: LD_INT 21
8218: PUSH
8219: LD_INT 22
8221: PUSH
8222: LD_INT 23
8224: PUSH
8225: LD_INT 25
8227: PUSH
8228: LD_INT 26
8230: PUSH
8231: EMPTY
8232: LIST
8233: LIST
8234: LIST
8235: LIST
8236: LIST
8237: LIST
8238: LIST
8239: LIST
8240: LIST
8241: LIST
8242: LIST
8243: LIST
8244: LIST
8245: LIST
8246: PUSH
8247: LD_INT 101
8249: PUSH
8250: LD_INT 102
8252: PUSH
8253: LD_INT 103
8255: PUSH
8256: LD_INT 105
8258: PUSH
8259: LD_INT 106
8261: PUSH
8262: LD_INT 108
8264: PUSH
8265: LD_INT 112
8267: PUSH
8268: LD_INT 116
8270: PUSH
8271: LD_INT 117
8273: PUSH
8274: LD_INT 118
8276: PUSH
8277: EMPTY
8278: LIST
8279: LIST
8280: LIST
8281: LIST
8282: LIST
8283: LIST
8284: LIST
8285: LIST
8286: LIST
8287: LIST
8288: PUSH
8289: EMPTY
8290: LIST
8291: LIST
8292: ST_TO_ADDR
8293: GO 10696
8295: LD_INT 8
8297: DOUBLE
8298: EQUAL
8299: IFTRUE 8303
8301: GO 8443
8303: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
8304: LD_ADDR_VAR 0 2
8308: PUSH
8309: LD_INT 2
8311: PUSH
8312: LD_INT 4
8314: PUSH
8315: LD_INT 5
8317: PUSH
8318: LD_INT 6
8320: PUSH
8321: LD_INT 7
8323: PUSH
8324: LD_INT 8
8326: PUSH
8327: LD_INT 11
8329: PUSH
8330: LD_INT 12
8332: PUSH
8333: LD_INT 15
8335: PUSH
8336: LD_INT 16
8338: PUSH
8339: LD_INT 20
8341: PUSH
8342: LD_INT 21
8344: PUSH
8345: LD_INT 22
8347: PUSH
8348: LD_INT 23
8350: PUSH
8351: LD_INT 25
8353: PUSH
8354: LD_INT 26
8356: PUSH
8357: LD_INT 30
8359: PUSH
8360: LD_INT 31
8362: PUSH
8363: LD_INT 32
8365: PUSH
8366: LD_INT 36
8368: PUSH
8369: EMPTY
8370: LIST
8371: LIST
8372: LIST
8373: LIST
8374: LIST
8375: LIST
8376: LIST
8377: LIST
8378: LIST
8379: LIST
8380: LIST
8381: LIST
8382: LIST
8383: LIST
8384: LIST
8385: LIST
8386: LIST
8387: LIST
8388: LIST
8389: LIST
8390: PUSH
8391: LD_INT 101
8393: PUSH
8394: LD_INT 102
8396: PUSH
8397: LD_INT 103
8399: PUSH
8400: LD_INT 105
8402: PUSH
8403: LD_INT 106
8405: PUSH
8406: LD_INT 108
8408: PUSH
8409: LD_INT 109
8411: PUSH
8412: LD_INT 112
8414: PUSH
8415: LD_INT 116
8417: PUSH
8418: LD_INT 117
8420: PUSH
8421: LD_INT 118
8423: PUSH
8424: EMPTY
8425: LIST
8426: LIST
8427: LIST
8428: LIST
8429: LIST
8430: LIST
8431: LIST
8432: LIST
8433: LIST
8434: LIST
8435: LIST
8436: PUSH
8437: EMPTY
8438: LIST
8439: LIST
8440: ST_TO_ADDR
8441: GO 10696
8443: LD_INT 9
8445: DOUBLE
8446: EQUAL
8447: IFTRUE 8451
8449: GO 8599
8451: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
8452: LD_ADDR_VAR 0 2
8456: PUSH
8457: LD_INT 2
8459: PUSH
8460: LD_INT 4
8462: PUSH
8463: LD_INT 5
8465: PUSH
8466: LD_INT 6
8468: PUSH
8469: LD_INT 7
8471: PUSH
8472: LD_INT 8
8474: PUSH
8475: LD_INT 11
8477: PUSH
8478: LD_INT 12
8480: PUSH
8481: LD_INT 15
8483: PUSH
8484: LD_INT 16
8486: PUSH
8487: LD_INT 20
8489: PUSH
8490: LD_INT 21
8492: PUSH
8493: LD_INT 22
8495: PUSH
8496: LD_INT 23
8498: PUSH
8499: LD_INT 25
8501: PUSH
8502: LD_INT 26
8504: PUSH
8505: LD_INT 28
8507: PUSH
8508: LD_INT 30
8510: PUSH
8511: LD_INT 31
8513: PUSH
8514: LD_INT 32
8516: PUSH
8517: LD_INT 36
8519: PUSH
8520: EMPTY
8521: LIST
8522: LIST
8523: LIST
8524: LIST
8525: LIST
8526: LIST
8527: LIST
8528: LIST
8529: LIST
8530: LIST
8531: LIST
8532: LIST
8533: LIST
8534: LIST
8535: LIST
8536: LIST
8537: LIST
8538: LIST
8539: LIST
8540: LIST
8541: LIST
8542: PUSH
8543: LD_INT 101
8545: PUSH
8546: LD_INT 102
8548: PUSH
8549: LD_INT 103
8551: PUSH
8552: LD_INT 105
8554: PUSH
8555: LD_INT 106
8557: PUSH
8558: LD_INT 108
8560: PUSH
8561: LD_INT 109
8563: PUSH
8564: LD_INT 112
8566: PUSH
8567: LD_INT 114
8569: PUSH
8570: LD_INT 116
8572: PUSH
8573: LD_INT 117
8575: PUSH
8576: LD_INT 118
8578: PUSH
8579: EMPTY
8580: LIST
8581: LIST
8582: LIST
8583: LIST
8584: LIST
8585: LIST
8586: LIST
8587: LIST
8588: LIST
8589: LIST
8590: LIST
8591: LIST
8592: PUSH
8593: EMPTY
8594: LIST
8595: LIST
8596: ST_TO_ADDR
8597: GO 10696
8599: LD_INT 10
8601: DOUBLE
8602: EQUAL
8603: IFTRUE 8607
8605: GO 8803
8607: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
8608: LD_ADDR_VAR 0 2
8612: PUSH
8613: LD_INT 2
8615: PUSH
8616: LD_INT 4
8618: PUSH
8619: LD_INT 5
8621: PUSH
8622: LD_INT 6
8624: PUSH
8625: LD_INT 7
8627: PUSH
8628: LD_INT 8
8630: PUSH
8631: LD_INT 9
8633: PUSH
8634: LD_INT 10
8636: PUSH
8637: LD_INT 11
8639: PUSH
8640: LD_INT 12
8642: PUSH
8643: LD_INT 13
8645: PUSH
8646: LD_INT 14
8648: PUSH
8649: LD_INT 15
8651: PUSH
8652: LD_INT 16
8654: PUSH
8655: LD_INT 17
8657: PUSH
8658: LD_INT 18
8660: PUSH
8661: LD_INT 19
8663: PUSH
8664: LD_INT 20
8666: PUSH
8667: LD_INT 21
8669: PUSH
8670: LD_INT 22
8672: PUSH
8673: LD_INT 23
8675: PUSH
8676: LD_INT 24
8678: PUSH
8679: LD_INT 25
8681: PUSH
8682: LD_INT 26
8684: PUSH
8685: LD_INT 28
8687: PUSH
8688: LD_INT 30
8690: PUSH
8691: LD_INT 31
8693: PUSH
8694: LD_INT 32
8696: PUSH
8697: LD_INT 36
8699: PUSH
8700: EMPTY
8701: LIST
8702: LIST
8703: LIST
8704: LIST
8705: LIST
8706: LIST
8707: LIST
8708: LIST
8709: LIST
8710: LIST
8711: LIST
8712: LIST
8713: LIST
8714: LIST
8715: LIST
8716: LIST
8717: LIST
8718: LIST
8719: LIST
8720: LIST
8721: LIST
8722: LIST
8723: LIST
8724: LIST
8725: LIST
8726: LIST
8727: LIST
8728: LIST
8729: LIST
8730: PUSH
8731: LD_INT 101
8733: PUSH
8734: LD_INT 102
8736: PUSH
8737: LD_INT 103
8739: PUSH
8740: LD_INT 104
8742: PUSH
8743: LD_INT 105
8745: PUSH
8746: LD_INT 106
8748: PUSH
8749: LD_INT 107
8751: PUSH
8752: LD_INT 108
8754: PUSH
8755: LD_INT 109
8757: PUSH
8758: LD_INT 110
8760: PUSH
8761: LD_INT 111
8763: PUSH
8764: LD_INT 112
8766: PUSH
8767: LD_INT 114
8769: PUSH
8770: LD_INT 116
8772: PUSH
8773: LD_INT 117
8775: PUSH
8776: LD_INT 118
8778: PUSH
8779: EMPTY
8780: LIST
8781: LIST
8782: LIST
8783: LIST
8784: LIST
8785: LIST
8786: LIST
8787: LIST
8788: LIST
8789: LIST
8790: LIST
8791: LIST
8792: LIST
8793: LIST
8794: LIST
8795: LIST
8796: PUSH
8797: EMPTY
8798: LIST
8799: LIST
8800: ST_TO_ADDR
8801: GO 10696
8803: LD_INT 11
8805: DOUBLE
8806: EQUAL
8807: IFTRUE 8811
8809: GO 9015
8811: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
8812: LD_ADDR_VAR 0 2
8816: PUSH
8817: LD_INT 2
8819: PUSH
8820: LD_INT 3
8822: PUSH
8823: LD_INT 4
8825: PUSH
8826: LD_INT 5
8828: PUSH
8829: LD_INT 6
8831: PUSH
8832: LD_INT 7
8834: PUSH
8835: LD_INT 8
8837: PUSH
8838: LD_INT 9
8840: PUSH
8841: LD_INT 10
8843: PUSH
8844: LD_INT 11
8846: PUSH
8847: LD_INT 12
8849: PUSH
8850: LD_INT 13
8852: PUSH
8853: LD_INT 14
8855: PUSH
8856: LD_INT 15
8858: PUSH
8859: LD_INT 16
8861: PUSH
8862: LD_INT 17
8864: PUSH
8865: LD_INT 18
8867: PUSH
8868: LD_INT 19
8870: PUSH
8871: LD_INT 20
8873: PUSH
8874: LD_INT 21
8876: PUSH
8877: LD_INT 22
8879: PUSH
8880: LD_INT 23
8882: PUSH
8883: LD_INT 24
8885: PUSH
8886: LD_INT 25
8888: PUSH
8889: LD_INT 26
8891: PUSH
8892: LD_INT 28
8894: PUSH
8895: LD_INT 30
8897: PUSH
8898: LD_INT 31
8900: PUSH
8901: LD_INT 32
8903: PUSH
8904: LD_INT 34
8906: PUSH
8907: LD_INT 36
8909: PUSH
8910: EMPTY
8911: LIST
8912: LIST
8913: LIST
8914: LIST
8915: LIST
8916: LIST
8917: LIST
8918: LIST
8919: LIST
8920: LIST
8921: LIST
8922: LIST
8923: LIST
8924: LIST
8925: LIST
8926: LIST
8927: LIST
8928: LIST
8929: LIST
8930: LIST
8931: LIST
8932: LIST
8933: LIST
8934: LIST
8935: LIST
8936: LIST
8937: LIST
8938: LIST
8939: LIST
8940: LIST
8941: LIST
8942: PUSH
8943: LD_INT 101
8945: PUSH
8946: LD_INT 102
8948: PUSH
8949: LD_INT 103
8951: PUSH
8952: LD_INT 104
8954: PUSH
8955: LD_INT 105
8957: PUSH
8958: LD_INT 106
8960: PUSH
8961: LD_INT 107
8963: PUSH
8964: LD_INT 108
8966: PUSH
8967: LD_INT 109
8969: PUSH
8970: LD_INT 110
8972: PUSH
8973: LD_INT 111
8975: PUSH
8976: LD_INT 112
8978: PUSH
8979: LD_INT 114
8981: PUSH
8982: LD_INT 116
8984: PUSH
8985: LD_INT 117
8987: PUSH
8988: LD_INT 118
8990: PUSH
8991: EMPTY
8992: LIST
8993: LIST
8994: LIST
8995: LIST
8996: LIST
8997: LIST
8998: LIST
8999: LIST
9000: LIST
9001: LIST
9002: LIST
9003: LIST
9004: LIST
9005: LIST
9006: LIST
9007: LIST
9008: PUSH
9009: EMPTY
9010: LIST
9011: LIST
9012: ST_TO_ADDR
9013: GO 10696
9015: LD_INT 12
9017: DOUBLE
9018: EQUAL
9019: IFTRUE 9023
9021: GO 9243
9023: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
9024: LD_ADDR_VAR 0 2
9028: PUSH
9029: LD_INT 1
9031: PUSH
9032: LD_INT 2
9034: PUSH
9035: LD_INT 3
9037: PUSH
9038: LD_INT 4
9040: PUSH
9041: LD_INT 5
9043: PUSH
9044: LD_INT 6
9046: PUSH
9047: LD_INT 7
9049: PUSH
9050: LD_INT 8
9052: PUSH
9053: LD_INT 9
9055: PUSH
9056: LD_INT 10
9058: PUSH
9059: LD_INT 11
9061: PUSH
9062: LD_INT 12
9064: PUSH
9065: LD_INT 13
9067: PUSH
9068: LD_INT 14
9070: PUSH
9071: LD_INT 15
9073: PUSH
9074: LD_INT 16
9076: PUSH
9077: LD_INT 17
9079: PUSH
9080: LD_INT 18
9082: PUSH
9083: LD_INT 19
9085: PUSH
9086: LD_INT 20
9088: PUSH
9089: LD_INT 21
9091: PUSH
9092: LD_INT 22
9094: PUSH
9095: LD_INT 23
9097: PUSH
9098: LD_INT 24
9100: PUSH
9101: LD_INT 25
9103: PUSH
9104: LD_INT 26
9106: PUSH
9107: LD_INT 27
9109: PUSH
9110: LD_INT 28
9112: PUSH
9113: LD_INT 30
9115: PUSH
9116: LD_INT 31
9118: PUSH
9119: LD_INT 32
9121: PUSH
9122: LD_INT 33
9124: PUSH
9125: LD_INT 34
9127: PUSH
9128: LD_INT 36
9130: PUSH
9131: EMPTY
9132: LIST
9133: LIST
9134: LIST
9135: LIST
9136: LIST
9137: LIST
9138: LIST
9139: LIST
9140: LIST
9141: LIST
9142: LIST
9143: LIST
9144: LIST
9145: LIST
9146: LIST
9147: LIST
9148: LIST
9149: LIST
9150: LIST
9151: LIST
9152: LIST
9153: LIST
9154: LIST
9155: LIST
9156: LIST
9157: LIST
9158: LIST
9159: LIST
9160: LIST
9161: LIST
9162: LIST
9163: LIST
9164: LIST
9165: LIST
9166: PUSH
9167: LD_INT 101
9169: PUSH
9170: LD_INT 102
9172: PUSH
9173: LD_INT 103
9175: PUSH
9176: LD_INT 104
9178: PUSH
9179: LD_INT 105
9181: PUSH
9182: LD_INT 106
9184: PUSH
9185: LD_INT 107
9187: PUSH
9188: LD_INT 108
9190: PUSH
9191: LD_INT 109
9193: PUSH
9194: LD_INT 110
9196: PUSH
9197: LD_INT 111
9199: PUSH
9200: LD_INT 112
9202: PUSH
9203: LD_INT 113
9205: PUSH
9206: LD_INT 114
9208: PUSH
9209: LD_INT 116
9211: PUSH
9212: LD_INT 117
9214: PUSH
9215: LD_INT 118
9217: PUSH
9218: EMPTY
9219: LIST
9220: LIST
9221: LIST
9222: LIST
9223: LIST
9224: LIST
9225: LIST
9226: LIST
9227: LIST
9228: LIST
9229: LIST
9230: LIST
9231: LIST
9232: LIST
9233: LIST
9234: LIST
9235: LIST
9236: PUSH
9237: EMPTY
9238: LIST
9239: LIST
9240: ST_TO_ADDR
9241: GO 10696
9243: LD_INT 13
9245: DOUBLE
9246: EQUAL
9247: IFTRUE 9251
9249: GO 9459
9251: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
9252: LD_ADDR_VAR 0 2
9256: PUSH
9257: LD_INT 1
9259: PUSH
9260: LD_INT 2
9262: PUSH
9263: LD_INT 3
9265: PUSH
9266: LD_INT 4
9268: PUSH
9269: LD_INT 5
9271: PUSH
9272: LD_INT 8
9274: PUSH
9275: LD_INT 9
9277: PUSH
9278: LD_INT 10
9280: PUSH
9281: LD_INT 11
9283: PUSH
9284: LD_INT 12
9286: PUSH
9287: LD_INT 14
9289: PUSH
9290: LD_INT 15
9292: PUSH
9293: LD_INT 16
9295: PUSH
9296: LD_INT 17
9298: PUSH
9299: LD_INT 18
9301: PUSH
9302: LD_INT 19
9304: PUSH
9305: LD_INT 20
9307: PUSH
9308: LD_INT 21
9310: PUSH
9311: LD_INT 22
9313: PUSH
9314: LD_INT 23
9316: PUSH
9317: LD_INT 24
9319: PUSH
9320: LD_INT 25
9322: PUSH
9323: LD_INT 26
9325: PUSH
9326: LD_INT 27
9328: PUSH
9329: LD_INT 28
9331: PUSH
9332: LD_INT 30
9334: PUSH
9335: LD_INT 31
9337: PUSH
9338: LD_INT 32
9340: PUSH
9341: LD_INT 33
9343: PUSH
9344: LD_INT 34
9346: PUSH
9347: LD_INT 36
9349: PUSH
9350: EMPTY
9351: LIST
9352: LIST
9353: LIST
9354: LIST
9355: LIST
9356: LIST
9357: LIST
9358: LIST
9359: LIST
9360: LIST
9361: LIST
9362: LIST
9363: LIST
9364: LIST
9365: LIST
9366: LIST
9367: LIST
9368: LIST
9369: LIST
9370: LIST
9371: LIST
9372: LIST
9373: LIST
9374: LIST
9375: LIST
9376: LIST
9377: LIST
9378: LIST
9379: LIST
9380: LIST
9381: LIST
9382: PUSH
9383: LD_INT 101
9385: PUSH
9386: LD_INT 102
9388: PUSH
9389: LD_INT 103
9391: PUSH
9392: LD_INT 104
9394: PUSH
9395: LD_INT 105
9397: PUSH
9398: LD_INT 106
9400: PUSH
9401: LD_INT 107
9403: PUSH
9404: LD_INT 108
9406: PUSH
9407: LD_INT 109
9409: PUSH
9410: LD_INT 110
9412: PUSH
9413: LD_INT 111
9415: PUSH
9416: LD_INT 112
9418: PUSH
9419: LD_INT 113
9421: PUSH
9422: LD_INT 114
9424: PUSH
9425: LD_INT 116
9427: PUSH
9428: LD_INT 117
9430: PUSH
9431: LD_INT 118
9433: PUSH
9434: EMPTY
9435: LIST
9436: LIST
9437: LIST
9438: LIST
9439: LIST
9440: LIST
9441: LIST
9442: LIST
9443: LIST
9444: LIST
9445: LIST
9446: LIST
9447: LIST
9448: LIST
9449: LIST
9450: LIST
9451: LIST
9452: PUSH
9453: EMPTY
9454: LIST
9455: LIST
9456: ST_TO_ADDR
9457: GO 10696
9459: LD_INT 14
9461: DOUBLE
9462: EQUAL
9463: IFTRUE 9467
9465: GO 9691
9467: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
9468: LD_ADDR_VAR 0 2
9472: PUSH
9473: LD_INT 1
9475: PUSH
9476: LD_INT 2
9478: PUSH
9479: LD_INT 3
9481: PUSH
9482: LD_INT 4
9484: PUSH
9485: LD_INT 5
9487: PUSH
9488: LD_INT 6
9490: PUSH
9491: LD_INT 7
9493: PUSH
9494: LD_INT 8
9496: PUSH
9497: LD_INT 9
9499: PUSH
9500: LD_INT 10
9502: PUSH
9503: LD_INT 11
9505: PUSH
9506: LD_INT 12
9508: PUSH
9509: LD_INT 13
9511: PUSH
9512: LD_INT 14
9514: PUSH
9515: LD_INT 15
9517: PUSH
9518: LD_INT 16
9520: PUSH
9521: LD_INT 17
9523: PUSH
9524: LD_INT 18
9526: PUSH
9527: LD_INT 19
9529: PUSH
9530: LD_INT 20
9532: PUSH
9533: LD_INT 21
9535: PUSH
9536: LD_INT 22
9538: PUSH
9539: LD_INT 23
9541: PUSH
9542: LD_INT 24
9544: PUSH
9545: LD_INT 25
9547: PUSH
9548: LD_INT 26
9550: PUSH
9551: LD_INT 27
9553: PUSH
9554: LD_INT 28
9556: PUSH
9557: LD_INT 29
9559: PUSH
9560: LD_INT 30
9562: PUSH
9563: LD_INT 31
9565: PUSH
9566: LD_INT 32
9568: PUSH
9569: LD_INT 33
9571: PUSH
9572: LD_INT 34
9574: PUSH
9575: LD_INT 36
9577: PUSH
9578: EMPTY
9579: LIST
9580: LIST
9581: LIST
9582: LIST
9583: LIST
9584: LIST
9585: LIST
9586: LIST
9587: LIST
9588: LIST
9589: LIST
9590: LIST
9591: LIST
9592: LIST
9593: LIST
9594: LIST
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: LIST
9600: LIST
9601: LIST
9602: LIST
9603: LIST
9604: LIST
9605: LIST
9606: LIST
9607: LIST
9608: LIST
9609: LIST
9610: LIST
9611: LIST
9612: LIST
9613: LIST
9614: PUSH
9615: LD_INT 101
9617: PUSH
9618: LD_INT 102
9620: PUSH
9621: LD_INT 103
9623: PUSH
9624: LD_INT 104
9626: PUSH
9627: LD_INT 105
9629: PUSH
9630: LD_INT 106
9632: PUSH
9633: LD_INT 107
9635: PUSH
9636: LD_INT 108
9638: PUSH
9639: LD_INT 109
9641: PUSH
9642: LD_INT 110
9644: PUSH
9645: LD_INT 111
9647: PUSH
9648: LD_INT 112
9650: PUSH
9651: LD_INT 113
9653: PUSH
9654: LD_INT 114
9656: PUSH
9657: LD_INT 116
9659: PUSH
9660: LD_INT 117
9662: PUSH
9663: LD_INT 118
9665: PUSH
9666: EMPTY
9667: LIST
9668: LIST
9669: LIST
9670: LIST
9671: LIST
9672: LIST
9673: LIST
9674: LIST
9675: LIST
9676: LIST
9677: LIST
9678: LIST
9679: LIST
9680: LIST
9681: LIST
9682: LIST
9683: LIST
9684: PUSH
9685: EMPTY
9686: LIST
9687: LIST
9688: ST_TO_ADDR
9689: GO 10696
9691: LD_INT 15
9693: DOUBLE
9694: EQUAL
9695: IFTRUE 9699
9697: GO 9923
9699: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
9700: LD_ADDR_VAR 0 2
9704: PUSH
9705: LD_INT 1
9707: PUSH
9708: LD_INT 2
9710: PUSH
9711: LD_INT 3
9713: PUSH
9714: LD_INT 4
9716: PUSH
9717: LD_INT 5
9719: PUSH
9720: LD_INT 6
9722: PUSH
9723: LD_INT 7
9725: PUSH
9726: LD_INT 8
9728: PUSH
9729: LD_INT 9
9731: PUSH
9732: LD_INT 10
9734: PUSH
9735: LD_INT 11
9737: PUSH
9738: LD_INT 12
9740: PUSH
9741: LD_INT 13
9743: PUSH
9744: LD_INT 14
9746: PUSH
9747: LD_INT 15
9749: PUSH
9750: LD_INT 16
9752: PUSH
9753: LD_INT 17
9755: PUSH
9756: LD_INT 18
9758: PUSH
9759: LD_INT 19
9761: PUSH
9762: LD_INT 20
9764: PUSH
9765: LD_INT 21
9767: PUSH
9768: LD_INT 22
9770: PUSH
9771: LD_INT 23
9773: PUSH
9774: LD_INT 24
9776: PUSH
9777: LD_INT 25
9779: PUSH
9780: LD_INT 26
9782: PUSH
9783: LD_INT 27
9785: PUSH
9786: LD_INT 28
9788: PUSH
9789: LD_INT 29
9791: PUSH
9792: LD_INT 30
9794: PUSH
9795: LD_INT 31
9797: PUSH
9798: LD_INT 32
9800: PUSH
9801: LD_INT 33
9803: PUSH
9804: LD_INT 34
9806: PUSH
9807: LD_INT 36
9809: PUSH
9810: EMPTY
9811: LIST
9812: LIST
9813: LIST
9814: LIST
9815: LIST
9816: LIST
9817: LIST
9818: LIST
9819: LIST
9820: LIST
9821: LIST
9822: LIST
9823: LIST
9824: LIST
9825: LIST
9826: LIST
9827: LIST
9828: LIST
9829: LIST
9830: LIST
9831: LIST
9832: LIST
9833: LIST
9834: LIST
9835: LIST
9836: LIST
9837: LIST
9838: LIST
9839: LIST
9840: LIST
9841: LIST
9842: LIST
9843: LIST
9844: LIST
9845: LIST
9846: PUSH
9847: LD_INT 101
9849: PUSH
9850: LD_INT 102
9852: PUSH
9853: LD_INT 103
9855: PUSH
9856: LD_INT 104
9858: PUSH
9859: LD_INT 105
9861: PUSH
9862: LD_INT 106
9864: PUSH
9865: LD_INT 107
9867: PUSH
9868: LD_INT 108
9870: PUSH
9871: LD_INT 109
9873: PUSH
9874: LD_INT 110
9876: PUSH
9877: LD_INT 111
9879: PUSH
9880: LD_INT 112
9882: PUSH
9883: LD_INT 113
9885: PUSH
9886: LD_INT 114
9888: PUSH
9889: LD_INT 116
9891: PUSH
9892: LD_INT 117
9894: PUSH
9895: LD_INT 118
9897: PUSH
9898: EMPTY
9899: LIST
9900: LIST
9901: LIST
9902: LIST
9903: LIST
9904: LIST
9905: LIST
9906: LIST
9907: LIST
9908: LIST
9909: LIST
9910: LIST
9911: LIST
9912: LIST
9913: LIST
9914: LIST
9915: LIST
9916: PUSH
9917: EMPTY
9918: LIST
9919: LIST
9920: ST_TO_ADDR
9921: GO 10696
9923: LD_INT 16
9925: DOUBLE
9926: EQUAL
9927: IFTRUE 9931
9929: GO 10067
9931: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
9932: LD_ADDR_VAR 0 2
9936: PUSH
9937: LD_INT 2
9939: PUSH
9940: LD_INT 4
9942: PUSH
9943: LD_INT 5
9945: PUSH
9946: LD_INT 7
9948: PUSH
9949: LD_INT 11
9951: PUSH
9952: LD_INT 12
9954: PUSH
9955: LD_INT 15
9957: PUSH
9958: LD_INT 16
9960: PUSH
9961: LD_INT 20
9963: PUSH
9964: LD_INT 21
9966: PUSH
9967: LD_INT 22
9969: PUSH
9970: LD_INT 23
9972: PUSH
9973: LD_INT 25
9975: PUSH
9976: LD_INT 26
9978: PUSH
9979: LD_INT 30
9981: PUSH
9982: LD_INT 31
9984: PUSH
9985: LD_INT 32
9987: PUSH
9988: LD_INT 33
9990: PUSH
9991: LD_INT 34
9993: PUSH
9994: EMPTY
9995: LIST
9996: LIST
9997: LIST
9998: LIST
9999: LIST
10000: LIST
10001: LIST
10002: LIST
10003: LIST
10004: LIST
10005: LIST
10006: LIST
10007: LIST
10008: LIST
10009: LIST
10010: LIST
10011: LIST
10012: LIST
10013: LIST
10014: PUSH
10015: LD_INT 101
10017: PUSH
10018: LD_INT 102
10020: PUSH
10021: LD_INT 103
10023: PUSH
10024: LD_INT 106
10026: PUSH
10027: LD_INT 108
10029: PUSH
10030: LD_INT 112
10032: PUSH
10033: LD_INT 113
10035: PUSH
10036: LD_INT 114
10038: PUSH
10039: LD_INT 116
10041: PUSH
10042: LD_INT 117
10044: PUSH
10045: LD_INT 118
10047: PUSH
10048: EMPTY
10049: LIST
10050: LIST
10051: LIST
10052: LIST
10053: LIST
10054: LIST
10055: LIST
10056: LIST
10057: LIST
10058: LIST
10059: LIST
10060: PUSH
10061: EMPTY
10062: LIST
10063: LIST
10064: ST_TO_ADDR
10065: GO 10696
10067: LD_INT 17
10069: DOUBLE
10070: EQUAL
10071: IFTRUE 10075
10073: GO 10299
10075: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
10076: LD_ADDR_VAR 0 2
10080: PUSH
10081: LD_INT 1
10083: PUSH
10084: LD_INT 2
10086: PUSH
10087: LD_INT 3
10089: PUSH
10090: LD_INT 4
10092: PUSH
10093: LD_INT 5
10095: PUSH
10096: LD_INT 6
10098: PUSH
10099: LD_INT 7
10101: PUSH
10102: LD_INT 8
10104: PUSH
10105: LD_INT 9
10107: PUSH
10108: LD_INT 10
10110: PUSH
10111: LD_INT 11
10113: PUSH
10114: LD_INT 12
10116: PUSH
10117: LD_INT 13
10119: PUSH
10120: LD_INT 14
10122: PUSH
10123: LD_INT 15
10125: PUSH
10126: LD_INT 16
10128: PUSH
10129: LD_INT 17
10131: PUSH
10132: LD_INT 18
10134: PUSH
10135: LD_INT 19
10137: PUSH
10138: LD_INT 20
10140: PUSH
10141: LD_INT 21
10143: PUSH
10144: LD_INT 22
10146: PUSH
10147: LD_INT 23
10149: PUSH
10150: LD_INT 24
10152: PUSH
10153: LD_INT 25
10155: PUSH
10156: LD_INT 26
10158: PUSH
10159: LD_INT 27
10161: PUSH
10162: LD_INT 28
10164: PUSH
10165: LD_INT 29
10167: PUSH
10168: LD_INT 30
10170: PUSH
10171: LD_INT 31
10173: PUSH
10174: LD_INT 32
10176: PUSH
10177: LD_INT 33
10179: PUSH
10180: LD_INT 34
10182: PUSH
10183: LD_INT 36
10185: PUSH
10186: EMPTY
10187: LIST
10188: LIST
10189: LIST
10190: LIST
10191: LIST
10192: LIST
10193: LIST
10194: LIST
10195: LIST
10196: LIST
10197: LIST
10198: LIST
10199: LIST
10200: LIST
10201: LIST
10202: LIST
10203: LIST
10204: LIST
10205: LIST
10206: LIST
10207: LIST
10208: LIST
10209: LIST
10210: LIST
10211: LIST
10212: LIST
10213: LIST
10214: LIST
10215: LIST
10216: LIST
10217: LIST
10218: LIST
10219: LIST
10220: LIST
10221: LIST
10222: PUSH
10223: LD_INT 101
10225: PUSH
10226: LD_INT 102
10228: PUSH
10229: LD_INT 103
10231: PUSH
10232: LD_INT 104
10234: PUSH
10235: LD_INT 105
10237: PUSH
10238: LD_INT 106
10240: PUSH
10241: LD_INT 107
10243: PUSH
10244: LD_INT 108
10246: PUSH
10247: LD_INT 109
10249: PUSH
10250: LD_INT 110
10252: PUSH
10253: LD_INT 111
10255: PUSH
10256: LD_INT 112
10258: PUSH
10259: LD_INT 113
10261: PUSH
10262: LD_INT 114
10264: PUSH
10265: LD_INT 116
10267: PUSH
10268: LD_INT 117
10270: PUSH
10271: LD_INT 118
10273: PUSH
10274: EMPTY
10275: LIST
10276: LIST
10277: LIST
10278: LIST
10279: LIST
10280: LIST
10281: LIST
10282: LIST
10283: LIST
10284: LIST
10285: LIST
10286: LIST
10287: LIST
10288: LIST
10289: LIST
10290: LIST
10291: LIST
10292: PUSH
10293: EMPTY
10294: LIST
10295: LIST
10296: ST_TO_ADDR
10297: GO 10696
10299: LD_INT 18
10301: DOUBLE
10302: EQUAL
10303: IFTRUE 10307
10305: GO 10455
10307: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
10308: LD_ADDR_VAR 0 2
10312: PUSH
10313: LD_INT 2
10315: PUSH
10316: LD_INT 4
10318: PUSH
10319: LD_INT 5
10321: PUSH
10322: LD_INT 7
10324: PUSH
10325: LD_INT 11
10327: PUSH
10328: LD_INT 12
10330: PUSH
10331: LD_INT 15
10333: PUSH
10334: LD_INT 16
10336: PUSH
10337: LD_INT 20
10339: PUSH
10340: LD_INT 21
10342: PUSH
10343: LD_INT 22
10345: PUSH
10346: LD_INT 23
10348: PUSH
10349: LD_INT 25
10351: PUSH
10352: LD_INT 26
10354: PUSH
10355: LD_INT 30
10357: PUSH
10358: LD_INT 31
10360: PUSH
10361: LD_INT 32
10363: PUSH
10364: LD_INT 33
10366: PUSH
10367: LD_INT 34
10369: PUSH
10370: LD_INT 35
10372: PUSH
10373: LD_INT 36
10375: PUSH
10376: EMPTY
10377: LIST
10378: LIST
10379: LIST
10380: LIST
10381: LIST
10382: LIST
10383: LIST
10384: LIST
10385: LIST
10386: LIST
10387: LIST
10388: LIST
10389: LIST
10390: LIST
10391: LIST
10392: LIST
10393: LIST
10394: LIST
10395: LIST
10396: LIST
10397: LIST
10398: PUSH
10399: LD_INT 101
10401: PUSH
10402: LD_INT 102
10404: PUSH
10405: LD_INT 103
10407: PUSH
10408: LD_INT 106
10410: PUSH
10411: LD_INT 108
10413: PUSH
10414: LD_INT 112
10416: PUSH
10417: LD_INT 113
10419: PUSH
10420: LD_INT 114
10422: PUSH
10423: LD_INT 115
10425: PUSH
10426: LD_INT 116
10428: PUSH
10429: LD_INT 117
10431: PUSH
10432: LD_INT 118
10434: PUSH
10435: EMPTY
10436: LIST
10437: LIST
10438: LIST
10439: LIST
10440: LIST
10441: LIST
10442: LIST
10443: LIST
10444: LIST
10445: LIST
10446: LIST
10447: LIST
10448: PUSH
10449: EMPTY
10450: LIST
10451: LIST
10452: ST_TO_ADDR
10453: GO 10696
10455: LD_INT 19
10457: DOUBLE
10458: EQUAL
10459: IFTRUE 10463
10461: GO 10695
10463: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
10464: LD_ADDR_VAR 0 2
10468: PUSH
10469: LD_INT 1
10471: PUSH
10472: LD_INT 2
10474: PUSH
10475: LD_INT 3
10477: PUSH
10478: LD_INT 4
10480: PUSH
10481: LD_INT 5
10483: PUSH
10484: LD_INT 6
10486: PUSH
10487: LD_INT 7
10489: PUSH
10490: LD_INT 8
10492: PUSH
10493: LD_INT 9
10495: PUSH
10496: LD_INT 10
10498: PUSH
10499: LD_INT 11
10501: PUSH
10502: LD_INT 12
10504: PUSH
10505: LD_INT 13
10507: PUSH
10508: LD_INT 14
10510: PUSH
10511: LD_INT 15
10513: PUSH
10514: LD_INT 16
10516: PUSH
10517: LD_INT 17
10519: PUSH
10520: LD_INT 18
10522: PUSH
10523: LD_INT 19
10525: PUSH
10526: LD_INT 20
10528: PUSH
10529: LD_INT 21
10531: PUSH
10532: LD_INT 22
10534: PUSH
10535: LD_INT 23
10537: PUSH
10538: LD_INT 24
10540: PUSH
10541: LD_INT 25
10543: PUSH
10544: LD_INT 26
10546: PUSH
10547: LD_INT 27
10549: PUSH
10550: LD_INT 28
10552: PUSH
10553: LD_INT 29
10555: PUSH
10556: LD_INT 30
10558: PUSH
10559: LD_INT 31
10561: PUSH
10562: LD_INT 32
10564: PUSH
10565: LD_INT 33
10567: PUSH
10568: LD_INT 34
10570: PUSH
10571: LD_INT 35
10573: PUSH
10574: LD_INT 36
10576: PUSH
10577: EMPTY
10578: LIST
10579: LIST
10580: LIST
10581: LIST
10582: LIST
10583: LIST
10584: LIST
10585: LIST
10586: LIST
10587: LIST
10588: LIST
10589: LIST
10590: LIST
10591: LIST
10592: LIST
10593: LIST
10594: LIST
10595: LIST
10596: LIST
10597: LIST
10598: LIST
10599: LIST
10600: LIST
10601: LIST
10602: LIST
10603: LIST
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: LIST
10609: LIST
10610: LIST
10611: LIST
10612: LIST
10613: LIST
10614: PUSH
10615: LD_INT 101
10617: PUSH
10618: LD_INT 102
10620: PUSH
10621: LD_INT 103
10623: PUSH
10624: LD_INT 104
10626: PUSH
10627: LD_INT 105
10629: PUSH
10630: LD_INT 106
10632: PUSH
10633: LD_INT 107
10635: PUSH
10636: LD_INT 108
10638: PUSH
10639: LD_INT 109
10641: PUSH
10642: LD_INT 110
10644: PUSH
10645: LD_INT 111
10647: PUSH
10648: LD_INT 112
10650: PUSH
10651: LD_INT 113
10653: PUSH
10654: LD_INT 114
10656: PUSH
10657: LD_INT 115
10659: PUSH
10660: LD_INT 116
10662: PUSH
10663: LD_INT 117
10665: PUSH
10666: LD_INT 118
10668: PUSH
10669: EMPTY
10670: LIST
10671: LIST
10672: LIST
10673: LIST
10674: LIST
10675: LIST
10676: LIST
10677: LIST
10678: LIST
10679: LIST
10680: LIST
10681: LIST
10682: LIST
10683: LIST
10684: LIST
10685: LIST
10686: LIST
10687: LIST
10688: PUSH
10689: EMPTY
10690: LIST
10691: LIST
10692: ST_TO_ADDR
10693: GO 10696
10695: POP
// end else
10696: GO 10927
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
10698: LD_ADDR_VAR 0 2
10702: PUSH
10703: LD_INT 1
10705: PUSH
10706: LD_INT 2
10708: PUSH
10709: LD_INT 3
10711: PUSH
10712: LD_INT 4
10714: PUSH
10715: LD_INT 5
10717: PUSH
10718: LD_INT 6
10720: PUSH
10721: LD_INT 7
10723: PUSH
10724: LD_INT 8
10726: PUSH
10727: LD_INT 9
10729: PUSH
10730: LD_INT 10
10732: PUSH
10733: LD_INT 11
10735: PUSH
10736: LD_INT 12
10738: PUSH
10739: LD_INT 13
10741: PUSH
10742: LD_INT 14
10744: PUSH
10745: LD_INT 15
10747: PUSH
10748: LD_INT 16
10750: PUSH
10751: LD_INT 17
10753: PUSH
10754: LD_INT 18
10756: PUSH
10757: LD_INT 19
10759: PUSH
10760: LD_INT 20
10762: PUSH
10763: LD_INT 21
10765: PUSH
10766: LD_INT 22
10768: PUSH
10769: LD_INT 23
10771: PUSH
10772: LD_INT 24
10774: PUSH
10775: LD_INT 25
10777: PUSH
10778: LD_INT 26
10780: PUSH
10781: LD_INT 27
10783: PUSH
10784: LD_INT 28
10786: PUSH
10787: LD_INT 29
10789: PUSH
10790: LD_INT 30
10792: PUSH
10793: LD_INT 31
10795: PUSH
10796: LD_INT 32
10798: PUSH
10799: LD_INT 33
10801: PUSH
10802: LD_INT 34
10804: PUSH
10805: LD_INT 35
10807: PUSH
10808: LD_INT 36
10810: PUSH
10811: EMPTY
10812: LIST
10813: LIST
10814: LIST
10815: LIST
10816: LIST
10817: LIST
10818: LIST
10819: LIST
10820: LIST
10821: LIST
10822: LIST
10823: LIST
10824: LIST
10825: LIST
10826: LIST
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: LIST
10832: LIST
10833: LIST
10834: LIST
10835: LIST
10836: LIST
10837: LIST
10838: LIST
10839: LIST
10840: LIST
10841: LIST
10842: LIST
10843: LIST
10844: LIST
10845: LIST
10846: LIST
10847: LIST
10848: PUSH
10849: LD_INT 101
10851: PUSH
10852: LD_INT 102
10854: PUSH
10855: LD_INT 103
10857: PUSH
10858: LD_INT 104
10860: PUSH
10861: LD_INT 105
10863: PUSH
10864: LD_INT 106
10866: PUSH
10867: LD_INT 107
10869: PUSH
10870: LD_INT 108
10872: PUSH
10873: LD_INT 109
10875: PUSH
10876: LD_INT 110
10878: PUSH
10879: LD_INT 111
10881: PUSH
10882: LD_INT 112
10884: PUSH
10885: LD_INT 113
10887: PUSH
10888: LD_INT 114
10890: PUSH
10891: LD_INT 115
10893: PUSH
10894: LD_INT 116
10896: PUSH
10897: LD_INT 117
10899: PUSH
10900: LD_INT 118
10902: PUSH
10903: EMPTY
10904: LIST
10905: LIST
10906: LIST
10907: LIST
10908: LIST
10909: LIST
10910: LIST
10911: LIST
10912: LIST
10913: LIST
10914: LIST
10915: LIST
10916: LIST
10917: LIST
10918: LIST
10919: LIST
10920: LIST
10921: LIST
10922: PUSH
10923: EMPTY
10924: LIST
10925: LIST
10926: ST_TO_ADDR
// if result then
10927: LD_VAR 0 2
10931: IFFALSE 11717
// begin normal :=  ;
10933: LD_ADDR_VAR 0 5
10937: PUSH
10938: LD_STRING 
10940: ST_TO_ADDR
// hardcore :=  ;
10941: LD_ADDR_VAR 0 6
10945: PUSH
10946: LD_STRING 
10948: ST_TO_ADDR
// active :=  ;
10949: LD_ADDR_VAR 0 7
10953: PUSH
10954: LD_STRING 
10956: ST_TO_ADDR
// for i = 1 to normalCounter do
10957: LD_ADDR_VAR 0 8
10961: PUSH
10962: DOUBLE
10963: LD_INT 1
10965: DEC
10966: ST_TO_ADDR
10967: LD_EXP 25
10971: PUSH
10972: FOR_TO
10973: IFFALSE 11074
// begin tmp := 0 ;
10975: LD_ADDR_VAR 0 3
10979: PUSH
10980: LD_STRING 0
10982: ST_TO_ADDR
// if result [ 1 ] then
10983: LD_VAR 0 2
10987: PUSH
10988: LD_INT 1
10990: ARRAY
10991: IFFALSE 11056
// if result [ 1 ] [ 1 ] = i then
10993: LD_VAR 0 2
10997: PUSH
10998: LD_INT 1
11000: ARRAY
11001: PUSH
11002: LD_INT 1
11004: ARRAY
11005: PUSH
11006: LD_VAR 0 8
11010: EQUAL
11011: IFFALSE 11056
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
11013: LD_ADDR_VAR 0 2
11017: PUSH
11018: LD_VAR 0 2
11022: PPUSH
11023: LD_INT 1
11025: PPUSH
11026: LD_VAR 0 2
11030: PUSH
11031: LD_INT 1
11033: ARRAY
11034: PPUSH
11035: LD_INT 1
11037: PPUSH
11038: CALL_OW 3
11042: PPUSH
11043: CALL_OW 1
11047: ST_TO_ADDR
// tmp := 1 ;
11048: LD_ADDR_VAR 0 3
11052: PUSH
11053: LD_STRING 1
11055: ST_TO_ADDR
// end ; normal := normal & tmp ;
11056: LD_ADDR_VAR 0 5
11060: PUSH
11061: LD_VAR 0 5
11065: PUSH
11066: LD_VAR 0 3
11070: STR
11071: ST_TO_ADDR
// end ;
11072: GO 10972
11074: POP
11075: POP
// for i = 1 to hardcoreCounter do
11076: LD_ADDR_VAR 0 8
11080: PUSH
11081: DOUBLE
11082: LD_INT 1
11084: DEC
11085: ST_TO_ADDR
11086: LD_EXP 26
11090: PUSH
11091: FOR_TO
11092: IFFALSE 11197
// begin tmp := 0 ;
11094: LD_ADDR_VAR 0 3
11098: PUSH
11099: LD_STRING 0
11101: ST_TO_ADDR
// if result [ 2 ] then
11102: LD_VAR 0 2
11106: PUSH
11107: LD_INT 2
11109: ARRAY
11110: IFFALSE 11179
// if result [ 2 ] [ 1 ] = 100 + i then
11112: LD_VAR 0 2
11116: PUSH
11117: LD_INT 2
11119: ARRAY
11120: PUSH
11121: LD_INT 1
11123: ARRAY
11124: PUSH
11125: LD_INT 100
11127: PUSH
11128: LD_VAR 0 8
11132: PLUS
11133: EQUAL
11134: IFFALSE 11179
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
11136: LD_ADDR_VAR 0 2
11140: PUSH
11141: LD_VAR 0 2
11145: PPUSH
11146: LD_INT 2
11148: PPUSH
11149: LD_VAR 0 2
11153: PUSH
11154: LD_INT 2
11156: ARRAY
11157: PPUSH
11158: LD_INT 1
11160: PPUSH
11161: CALL_OW 3
11165: PPUSH
11166: CALL_OW 1
11170: ST_TO_ADDR
// tmp := 1 ;
11171: LD_ADDR_VAR 0 3
11175: PUSH
11176: LD_STRING 1
11178: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
11179: LD_ADDR_VAR 0 6
11183: PUSH
11184: LD_VAR 0 6
11188: PUSH
11189: LD_VAR 0 3
11193: STR
11194: ST_TO_ADDR
// end ;
11195: GO 11091
11197: POP
11198: POP
// if isGameLoad then
11199: LD_VAR 0 1
11203: IFFALSE 11678
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
11205: LD_ADDR_VAR 0 4
11209: PUSH
11210: LD_EXP 29
11214: PUSH
11215: LD_EXP 28
11219: PUSH
11220: LD_EXP 30
11224: PUSH
11225: LD_EXP 27
11229: PUSH
11230: LD_EXP 31
11234: PUSH
11235: LD_EXP 32
11239: PUSH
11240: LD_EXP 33
11244: PUSH
11245: LD_EXP 34
11249: PUSH
11250: LD_EXP 35
11254: PUSH
11255: LD_EXP 36
11259: PUSH
11260: LD_EXP 37
11264: PUSH
11265: LD_EXP 38
11269: PUSH
11270: LD_EXP 39
11274: PUSH
11275: LD_EXP 40
11279: PUSH
11280: LD_EXP 48
11284: PUSH
11285: LD_EXP 49
11289: PUSH
11290: LD_EXP 50
11294: PUSH
11295: LD_EXP 51
11299: PUSH
11300: LD_EXP 53
11304: PUSH
11305: LD_EXP 54
11309: PUSH
11310: LD_EXP 55
11314: PUSH
11315: LD_EXP 58
11319: PUSH
11320: LD_EXP 60
11324: PUSH
11325: LD_EXP 61
11329: PUSH
11330: LD_EXP 62
11334: PUSH
11335: LD_EXP 64
11339: PUSH
11340: LD_EXP 65
11344: PUSH
11345: LD_EXP 68
11349: PUSH
11350: LD_EXP 69
11354: PUSH
11355: LD_EXP 70
11359: PUSH
11360: LD_EXP 71
11364: PUSH
11365: LD_EXP 72
11369: PUSH
11370: LD_EXP 73
11374: PUSH
11375: LD_EXP 74
11379: PUSH
11380: LD_EXP 75
11384: PUSH
11385: LD_EXP 76
11389: PUSH
11390: LD_EXP 41
11394: PUSH
11395: LD_EXP 42
11399: PUSH
11400: LD_EXP 45
11404: PUSH
11405: LD_EXP 46
11409: PUSH
11410: LD_EXP 47
11414: PUSH
11415: LD_EXP 43
11419: PUSH
11420: LD_EXP 44
11424: PUSH
11425: LD_EXP 52
11429: PUSH
11430: LD_EXP 56
11434: PUSH
11435: LD_EXP 57
11439: PUSH
11440: LD_EXP 59
11444: PUSH
11445: LD_EXP 63
11449: PUSH
11450: LD_EXP 66
11454: PUSH
11455: LD_EXP 67
11459: PUSH
11460: LD_EXP 77
11464: PUSH
11465: LD_EXP 78
11469: PUSH
11470: LD_EXP 79
11474: PUSH
11475: LD_EXP 80
11479: PUSH
11480: EMPTY
11481: LIST
11482: LIST
11483: LIST
11484: LIST
11485: LIST
11486: LIST
11487: LIST
11488: LIST
11489: LIST
11490: LIST
11491: LIST
11492: LIST
11493: LIST
11494: LIST
11495: LIST
11496: LIST
11497: LIST
11498: LIST
11499: LIST
11500: LIST
11501: LIST
11502: LIST
11503: LIST
11504: LIST
11505: LIST
11506: LIST
11507: LIST
11508: LIST
11509: LIST
11510: LIST
11511: LIST
11512: LIST
11513: LIST
11514: LIST
11515: LIST
11516: LIST
11517: LIST
11518: LIST
11519: LIST
11520: LIST
11521: LIST
11522: LIST
11523: LIST
11524: LIST
11525: LIST
11526: LIST
11527: LIST
11528: LIST
11529: LIST
11530: LIST
11531: LIST
11532: LIST
11533: LIST
11534: LIST
11535: ST_TO_ADDR
// tmp :=  ;
11536: LD_ADDR_VAR 0 3
11540: PUSH
11541: LD_STRING 
11543: ST_TO_ADDR
// for i = 1 to normalCounter do
11544: LD_ADDR_VAR 0 8
11548: PUSH
11549: DOUBLE
11550: LD_INT 1
11552: DEC
11553: ST_TO_ADDR
11554: LD_EXP 25
11558: PUSH
11559: FOR_TO
11560: IFFALSE 11596
// begin if flags [ i ] then
11562: LD_VAR 0 4
11566: PUSH
11567: LD_VAR 0 8
11571: ARRAY
11572: IFFALSE 11594
// tmp := tmp & i & ; ;
11574: LD_ADDR_VAR 0 3
11578: PUSH
11579: LD_VAR 0 3
11583: PUSH
11584: LD_VAR 0 8
11588: STR
11589: PUSH
11590: LD_STRING ;
11592: STR
11593: ST_TO_ADDR
// end ;
11594: GO 11559
11596: POP
11597: POP
// for i = 1 to hardcoreCounter do
11598: LD_ADDR_VAR 0 8
11602: PUSH
11603: DOUBLE
11604: LD_INT 1
11606: DEC
11607: ST_TO_ADDR
11608: LD_EXP 26
11612: PUSH
11613: FOR_TO
11614: IFFALSE 11660
// begin if flags [ normalCounter + i ] then
11616: LD_VAR 0 4
11620: PUSH
11621: LD_EXP 25
11625: PUSH
11626: LD_VAR 0 8
11630: PLUS
11631: ARRAY
11632: IFFALSE 11658
// tmp := tmp & ( 100 + i ) & ; ;
11634: LD_ADDR_VAR 0 3
11638: PUSH
11639: LD_VAR 0 3
11643: PUSH
11644: LD_INT 100
11646: PUSH
11647: LD_VAR 0 8
11651: PLUS
11652: STR
11653: PUSH
11654: LD_STRING ;
11656: STR
11657: ST_TO_ADDR
// end ;
11658: GO 11613
11660: POP
11661: POP
// if tmp then
11662: LD_VAR 0 3
11666: IFFALSE 11678
// active := tmp ;
11668: LD_ADDR_VAR 0 7
11672: PUSH
11673: LD_VAR 0 3
11677: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
11678: LD_STRING getStreamItemsFromMission("
11680: PUSH
11681: LD_VAR 0 5
11685: STR
11686: PUSH
11687: LD_STRING ","
11689: STR
11690: PUSH
11691: LD_VAR 0 6
11695: STR
11696: PUSH
11697: LD_STRING ","
11699: STR
11700: PUSH
11701: LD_VAR 0 7
11705: STR
11706: PUSH
11707: LD_STRING ")
11709: STR
11710: PPUSH
11711: CALL_OW 559
// end else
11715: GO 11724
// ToLua ( getStreamItemsFromMission("","","") ) ;
11717: LD_STRING getStreamItemsFromMission("","","")
11719: PPUSH
11720: CALL_OW 559
// end ;
11724: LD_VAR 0 2
11728: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
11729: LD_EXP 24
11733: PUSH
11734: LD_EXP 29
11738: AND
11739: IFFALSE 11863
11741: GO 11743
11743: DISABLE
11744: LD_INT 0
11746: PPUSH
11747: PPUSH
// begin enable ;
11748: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
11749: LD_ADDR_VAR 0 2
11753: PUSH
11754: LD_INT 22
11756: PUSH
11757: LD_OWVAR 2
11761: PUSH
11762: EMPTY
11763: LIST
11764: LIST
11765: PUSH
11766: LD_INT 2
11768: PUSH
11769: LD_INT 34
11771: PUSH
11772: LD_INT 7
11774: PUSH
11775: EMPTY
11776: LIST
11777: LIST
11778: PUSH
11779: LD_INT 34
11781: PUSH
11782: LD_INT 45
11784: PUSH
11785: EMPTY
11786: LIST
11787: LIST
11788: PUSH
11789: LD_INT 34
11791: PUSH
11792: LD_INT 28
11794: PUSH
11795: EMPTY
11796: LIST
11797: LIST
11798: PUSH
11799: LD_INT 34
11801: PUSH
11802: LD_INT 47
11804: PUSH
11805: EMPTY
11806: LIST
11807: LIST
11808: PUSH
11809: EMPTY
11810: LIST
11811: LIST
11812: LIST
11813: LIST
11814: LIST
11815: PUSH
11816: EMPTY
11817: LIST
11818: LIST
11819: PPUSH
11820: CALL_OW 69
11824: ST_TO_ADDR
// if not tmp then
11825: LD_VAR 0 2
11829: NOT
11830: IFFALSE 11834
// exit ;
11832: GO 11863
// for i in tmp do
11834: LD_ADDR_VAR 0 1
11838: PUSH
11839: LD_VAR 0 2
11843: PUSH
11844: FOR_IN
11845: IFFALSE 11861
// begin SetLives ( i , 0 ) ;
11847: LD_VAR 0 1
11851: PPUSH
11852: LD_INT 0
11854: PPUSH
11855: CALL_OW 234
// end ;
11859: GO 11844
11861: POP
11862: POP
// end ;
11863: PPOPN 2
11865: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
11866: LD_EXP 24
11870: PUSH
11871: LD_EXP 30
11875: AND
11876: IFFALSE 11960
11878: GO 11880
11880: DISABLE
11881: LD_INT 0
11883: PPUSH
11884: PPUSH
// begin enable ;
11885: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
11886: LD_ADDR_VAR 0 2
11890: PUSH
11891: LD_INT 22
11893: PUSH
11894: LD_OWVAR 2
11898: PUSH
11899: EMPTY
11900: LIST
11901: LIST
11902: PUSH
11903: LD_INT 32
11905: PUSH
11906: LD_INT 3
11908: PUSH
11909: EMPTY
11910: LIST
11911: LIST
11912: PUSH
11913: EMPTY
11914: LIST
11915: LIST
11916: PPUSH
11917: CALL_OW 69
11921: ST_TO_ADDR
// if not tmp then
11922: LD_VAR 0 2
11926: NOT
11927: IFFALSE 11931
// exit ;
11929: GO 11960
// for i in tmp do
11931: LD_ADDR_VAR 0 1
11935: PUSH
11936: LD_VAR 0 2
11940: PUSH
11941: FOR_IN
11942: IFFALSE 11958
// begin SetLives ( i , 0 ) ;
11944: LD_VAR 0 1
11948: PPUSH
11949: LD_INT 0
11951: PPUSH
11952: CALL_OW 234
// end ;
11956: GO 11941
11958: POP
11959: POP
// end ;
11960: PPOPN 2
11962: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
11963: LD_EXP 24
11967: PUSH
11968: LD_EXP 27
11972: AND
11973: IFFALSE 12066
11975: GO 11977
11977: DISABLE
11978: LD_INT 0
11980: PPUSH
// begin enable ;
11981: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
11982: LD_ADDR_VAR 0 1
11986: PUSH
11987: LD_INT 22
11989: PUSH
11990: LD_OWVAR 2
11994: PUSH
11995: EMPTY
11996: LIST
11997: LIST
11998: PUSH
11999: LD_INT 2
12001: PUSH
12002: LD_INT 25
12004: PUSH
12005: LD_INT 5
12007: PUSH
12008: EMPTY
12009: LIST
12010: LIST
12011: PUSH
12012: LD_INT 25
12014: PUSH
12015: LD_INT 9
12017: PUSH
12018: EMPTY
12019: LIST
12020: LIST
12021: PUSH
12022: LD_INT 25
12024: PUSH
12025: LD_INT 8
12027: PUSH
12028: EMPTY
12029: LIST
12030: LIST
12031: PUSH
12032: EMPTY
12033: LIST
12034: LIST
12035: LIST
12036: LIST
12037: PUSH
12038: EMPTY
12039: LIST
12040: LIST
12041: PPUSH
12042: CALL_OW 69
12046: PUSH
12047: FOR_IN
12048: IFFALSE 12064
// begin SetClass ( i , 1 ) ;
12050: LD_VAR 0 1
12054: PPUSH
12055: LD_INT 1
12057: PPUSH
12058: CALL_OW 336
// end ;
12062: GO 12047
12064: POP
12065: POP
// end ;
12066: PPOPN 1
12068: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
12069: LD_EXP 24
12073: PUSH
12074: LD_EXP 28
12078: AND
12079: PUSH
12080: LD_OWVAR 65
12084: PUSH
12085: LD_INT 7
12087: LESS
12088: AND
12089: IFFALSE 12103
12091: GO 12093
12093: DISABLE
// begin enable ;
12094: ENABLE
// game_speed := 7 ;
12095: LD_ADDR_OWVAR 65
12099: PUSH
12100: LD_INT 7
12102: ST_TO_ADDR
// end ;
12103: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
12104: LD_EXP 24
12108: PUSH
12109: LD_EXP 31
12113: AND
12114: IFFALSE 12316
12116: GO 12118
12118: DISABLE
12119: LD_INT 0
12121: PPUSH
12122: PPUSH
12123: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
12124: LD_ADDR_VAR 0 3
12128: PUSH
12129: LD_INT 81
12131: PUSH
12132: LD_OWVAR 2
12136: PUSH
12137: EMPTY
12138: LIST
12139: LIST
12140: PUSH
12141: LD_INT 21
12143: PUSH
12144: LD_INT 1
12146: PUSH
12147: EMPTY
12148: LIST
12149: LIST
12150: PUSH
12151: EMPTY
12152: LIST
12153: LIST
12154: PPUSH
12155: CALL_OW 69
12159: ST_TO_ADDR
// if not tmp then
12160: LD_VAR 0 3
12164: NOT
12165: IFFALSE 12169
// exit ;
12167: GO 12316
// if tmp > 5 then
12169: LD_VAR 0 3
12173: PUSH
12174: LD_INT 5
12176: GREATER
12177: IFFALSE 12189
// k := 5 else
12179: LD_ADDR_VAR 0 2
12183: PUSH
12184: LD_INT 5
12186: ST_TO_ADDR
12187: GO 12199
// k := tmp ;
12189: LD_ADDR_VAR 0 2
12193: PUSH
12194: LD_VAR 0 3
12198: ST_TO_ADDR
// for i := 1 to k do
12199: LD_ADDR_VAR 0 1
12203: PUSH
12204: DOUBLE
12205: LD_INT 1
12207: DEC
12208: ST_TO_ADDR
12209: LD_VAR 0 2
12213: PUSH
12214: FOR_TO
12215: IFFALSE 12314
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
12217: LD_VAR 0 3
12221: PUSH
12222: LD_VAR 0 1
12226: ARRAY
12227: PPUSH
12228: LD_VAR 0 1
12232: PUSH
12233: LD_INT 4
12235: MOD
12236: PUSH
12237: LD_INT 1
12239: PLUS
12240: PPUSH
12241: CALL_OW 259
12245: PUSH
12246: LD_INT 10
12248: LESS
12249: IFFALSE 12312
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
12251: LD_VAR 0 3
12255: PUSH
12256: LD_VAR 0 1
12260: ARRAY
12261: PPUSH
12262: LD_VAR 0 1
12266: PUSH
12267: LD_INT 4
12269: MOD
12270: PUSH
12271: LD_INT 1
12273: PLUS
12274: PPUSH
12275: LD_VAR 0 3
12279: PUSH
12280: LD_VAR 0 1
12284: ARRAY
12285: PPUSH
12286: LD_VAR 0 1
12290: PUSH
12291: LD_INT 4
12293: MOD
12294: PUSH
12295: LD_INT 1
12297: PLUS
12298: PPUSH
12299: CALL_OW 259
12303: PUSH
12304: LD_INT 1
12306: PLUS
12307: PPUSH
12308: CALL_OW 237
12312: GO 12214
12314: POP
12315: POP
// end ;
12316: PPOPN 3
12318: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
12319: LD_EXP 24
12323: PUSH
12324: LD_EXP 32
12328: AND
12329: IFFALSE 12349
12331: GO 12333
12333: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
12334: LD_INT 4
12336: PPUSH
12337: LD_OWVAR 2
12341: PPUSH
12342: LD_INT 0
12344: PPUSH
12345: CALL_OW 324
12349: END
// every 0 0$1 trigger StreamModeActive and sShovel do
12350: LD_EXP 24
12354: PUSH
12355: LD_EXP 61
12359: AND
12360: IFFALSE 12380
12362: GO 12364
12364: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
12365: LD_INT 19
12367: PPUSH
12368: LD_OWVAR 2
12372: PPUSH
12373: LD_INT 0
12375: PPUSH
12376: CALL_OW 324
12380: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
12381: LD_EXP 24
12385: PUSH
12386: LD_EXP 33
12390: AND
12391: IFFALSE 12493
12393: GO 12395
12395: DISABLE
12396: LD_INT 0
12398: PPUSH
12399: PPUSH
// begin enable ;
12400: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
12401: LD_ADDR_VAR 0 2
12405: PUSH
12406: LD_INT 22
12408: PUSH
12409: LD_OWVAR 2
12413: PUSH
12414: EMPTY
12415: LIST
12416: LIST
12417: PUSH
12418: LD_INT 2
12420: PUSH
12421: LD_INT 34
12423: PUSH
12424: LD_INT 11
12426: PUSH
12427: EMPTY
12428: LIST
12429: LIST
12430: PUSH
12431: LD_INT 34
12433: PUSH
12434: LD_INT 30
12436: PUSH
12437: EMPTY
12438: LIST
12439: LIST
12440: PUSH
12441: EMPTY
12442: LIST
12443: LIST
12444: LIST
12445: PUSH
12446: EMPTY
12447: LIST
12448: LIST
12449: PPUSH
12450: CALL_OW 69
12454: ST_TO_ADDR
// if not tmp then
12455: LD_VAR 0 2
12459: NOT
12460: IFFALSE 12464
// exit ;
12462: GO 12493
// for i in tmp do
12464: LD_ADDR_VAR 0 1
12468: PUSH
12469: LD_VAR 0 2
12473: PUSH
12474: FOR_IN
12475: IFFALSE 12491
// begin SetLives ( i , 0 ) ;
12477: LD_VAR 0 1
12481: PPUSH
12482: LD_INT 0
12484: PPUSH
12485: CALL_OW 234
// end ;
12489: GO 12474
12491: POP
12492: POP
// end ;
12493: PPOPN 2
12495: END
// every 0 0$1 trigger StreamModeActive and sBunker do
12496: LD_EXP 24
12500: PUSH
12501: LD_EXP 34
12505: AND
12506: IFFALSE 12526
12508: GO 12510
12510: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
12511: LD_INT 32
12513: PPUSH
12514: LD_OWVAR 2
12518: PPUSH
12519: LD_INT 0
12521: PPUSH
12522: CALL_OW 324
12526: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
12527: LD_EXP 24
12531: PUSH
12532: LD_EXP 35
12536: AND
12537: IFFALSE 12718
12539: GO 12541
12541: DISABLE
12542: LD_INT 0
12544: PPUSH
12545: PPUSH
12546: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
12547: LD_ADDR_VAR 0 2
12551: PUSH
12552: LD_INT 22
12554: PUSH
12555: LD_OWVAR 2
12559: PUSH
12560: EMPTY
12561: LIST
12562: LIST
12563: PUSH
12564: LD_INT 33
12566: PUSH
12567: LD_INT 3
12569: PUSH
12570: EMPTY
12571: LIST
12572: LIST
12573: PUSH
12574: EMPTY
12575: LIST
12576: LIST
12577: PPUSH
12578: CALL_OW 69
12582: ST_TO_ADDR
// if not tmp then
12583: LD_VAR 0 2
12587: NOT
12588: IFFALSE 12592
// exit ;
12590: GO 12718
// side := 0 ;
12592: LD_ADDR_VAR 0 3
12596: PUSH
12597: LD_INT 0
12599: ST_TO_ADDR
// for i := 1 to 8 do
12600: LD_ADDR_VAR 0 1
12604: PUSH
12605: DOUBLE
12606: LD_INT 1
12608: DEC
12609: ST_TO_ADDR
12610: LD_INT 8
12612: PUSH
12613: FOR_TO
12614: IFFALSE 12662
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
12616: LD_OWVAR 2
12620: PUSH
12621: LD_VAR 0 1
12625: NONEQUAL
12626: PUSH
12627: LD_OWVAR 2
12631: PPUSH
12632: LD_VAR 0 1
12636: PPUSH
12637: CALL_OW 81
12641: PUSH
12642: LD_INT 2
12644: EQUAL
12645: AND
12646: IFFALSE 12660
// begin side := i ;
12648: LD_ADDR_VAR 0 3
12652: PUSH
12653: LD_VAR 0 1
12657: ST_TO_ADDR
// break ;
12658: GO 12662
// end ;
12660: GO 12613
12662: POP
12663: POP
// if not side then
12664: LD_VAR 0 3
12668: NOT
12669: IFFALSE 12673
// exit ;
12671: GO 12718
// for i := 1 to tmp do
12673: LD_ADDR_VAR 0 1
12677: PUSH
12678: DOUBLE
12679: LD_INT 1
12681: DEC
12682: ST_TO_ADDR
12683: LD_VAR 0 2
12687: PUSH
12688: FOR_TO
12689: IFFALSE 12716
// if Prob ( 60 ) then
12691: LD_INT 60
12693: PPUSH
12694: CALL_OW 13
12698: IFFALSE 12714
// SetSide ( i , side ) ;
12700: LD_VAR 0 1
12704: PPUSH
12705: LD_VAR 0 3
12709: PPUSH
12710: CALL_OW 235
12714: GO 12688
12716: POP
12717: POP
// end ;
12718: PPOPN 3
12720: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
12721: LD_EXP 24
12725: PUSH
12726: LD_EXP 37
12730: AND
12731: IFFALSE 12850
12733: GO 12735
12735: DISABLE
12736: LD_INT 0
12738: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
12739: LD_ADDR_VAR 0 1
12743: PUSH
12744: LD_INT 22
12746: PUSH
12747: LD_OWVAR 2
12751: PUSH
12752: EMPTY
12753: LIST
12754: LIST
12755: PUSH
12756: LD_INT 21
12758: PUSH
12759: LD_INT 1
12761: PUSH
12762: EMPTY
12763: LIST
12764: LIST
12765: PUSH
12766: LD_INT 3
12768: PUSH
12769: LD_INT 23
12771: PUSH
12772: LD_INT 0
12774: PUSH
12775: EMPTY
12776: LIST
12777: LIST
12778: PUSH
12779: EMPTY
12780: LIST
12781: LIST
12782: PUSH
12783: EMPTY
12784: LIST
12785: LIST
12786: LIST
12787: PPUSH
12788: CALL_OW 69
12792: PUSH
12793: FOR_IN
12794: IFFALSE 12848
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
12796: LD_VAR 0 1
12800: PPUSH
12801: CALL_OW 257
12805: PUSH
12806: LD_INT 1
12808: PUSH
12809: LD_INT 2
12811: PUSH
12812: LD_INT 3
12814: PUSH
12815: LD_INT 4
12817: PUSH
12818: EMPTY
12819: LIST
12820: LIST
12821: LIST
12822: LIST
12823: IN
12824: IFFALSE 12846
// SetClass ( un , rand ( 1 , 4 ) ) ;
12826: LD_VAR 0 1
12830: PPUSH
12831: LD_INT 1
12833: PPUSH
12834: LD_INT 4
12836: PPUSH
12837: CALL_OW 12
12841: PPUSH
12842: CALL_OW 336
12846: GO 12793
12848: POP
12849: POP
// end ;
12850: PPOPN 1
12852: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
12853: LD_EXP 24
12857: PUSH
12858: LD_EXP 36
12862: AND
12863: IFFALSE 12942
12865: GO 12867
12867: DISABLE
12868: LD_INT 0
12870: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12871: LD_ADDR_VAR 0 1
12875: PUSH
12876: LD_INT 22
12878: PUSH
12879: LD_OWVAR 2
12883: PUSH
12884: EMPTY
12885: LIST
12886: LIST
12887: PUSH
12888: LD_INT 21
12890: PUSH
12891: LD_INT 3
12893: PUSH
12894: EMPTY
12895: LIST
12896: LIST
12897: PUSH
12898: EMPTY
12899: LIST
12900: LIST
12901: PPUSH
12902: CALL_OW 69
12906: ST_TO_ADDR
// if not tmp then
12907: LD_VAR 0 1
12911: NOT
12912: IFFALSE 12916
// exit ;
12914: GO 12942
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
12916: LD_VAR 0 1
12920: PUSH
12921: LD_INT 1
12923: PPUSH
12924: LD_VAR 0 1
12928: PPUSH
12929: CALL_OW 12
12933: ARRAY
12934: PPUSH
12935: LD_INT 100
12937: PPUSH
12938: CALL_OW 234
// end ;
12942: PPOPN 1
12944: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
12945: LD_EXP 24
12949: PUSH
12950: LD_EXP 38
12954: AND
12955: IFFALSE 13053
12957: GO 12959
12959: DISABLE
12960: LD_INT 0
12962: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12963: LD_ADDR_VAR 0 1
12967: PUSH
12968: LD_INT 22
12970: PUSH
12971: LD_OWVAR 2
12975: PUSH
12976: EMPTY
12977: LIST
12978: LIST
12979: PUSH
12980: LD_INT 21
12982: PUSH
12983: LD_INT 1
12985: PUSH
12986: EMPTY
12987: LIST
12988: LIST
12989: PUSH
12990: EMPTY
12991: LIST
12992: LIST
12993: PPUSH
12994: CALL_OW 69
12998: ST_TO_ADDR
// if not tmp then
12999: LD_VAR 0 1
13003: NOT
13004: IFFALSE 13008
// exit ;
13006: GO 13053
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
13008: LD_VAR 0 1
13012: PUSH
13013: LD_INT 1
13015: PPUSH
13016: LD_VAR 0 1
13020: PPUSH
13021: CALL_OW 12
13025: ARRAY
13026: PPUSH
13027: LD_INT 1
13029: PPUSH
13030: LD_INT 4
13032: PPUSH
13033: CALL_OW 12
13037: PPUSH
13038: LD_INT 3000
13040: PPUSH
13041: LD_INT 9000
13043: PPUSH
13044: CALL_OW 12
13048: PPUSH
13049: CALL_OW 492
// end ;
13053: PPOPN 1
13055: END
// every 0 0$1 trigger StreamModeActive and sDepot do
13056: LD_EXP 24
13060: PUSH
13061: LD_EXP 39
13065: AND
13066: IFFALSE 13086
13068: GO 13070
13070: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
13071: LD_INT 1
13073: PPUSH
13074: LD_OWVAR 2
13078: PPUSH
13079: LD_INT 0
13081: PPUSH
13082: CALL_OW 324
13086: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
13087: LD_EXP 24
13091: PUSH
13092: LD_EXP 40
13096: AND
13097: IFFALSE 13180
13099: GO 13101
13101: DISABLE
13102: LD_INT 0
13104: PPUSH
13105: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13106: LD_ADDR_VAR 0 2
13110: PUSH
13111: LD_INT 22
13113: PUSH
13114: LD_OWVAR 2
13118: PUSH
13119: EMPTY
13120: LIST
13121: LIST
13122: PUSH
13123: LD_INT 21
13125: PUSH
13126: LD_INT 3
13128: PUSH
13129: EMPTY
13130: LIST
13131: LIST
13132: PUSH
13133: EMPTY
13134: LIST
13135: LIST
13136: PPUSH
13137: CALL_OW 69
13141: ST_TO_ADDR
// if not tmp then
13142: LD_VAR 0 2
13146: NOT
13147: IFFALSE 13151
// exit ;
13149: GO 13180
// for i in tmp do
13151: LD_ADDR_VAR 0 1
13155: PUSH
13156: LD_VAR 0 2
13160: PUSH
13161: FOR_IN
13162: IFFALSE 13178
// SetBLevel ( i , 10 ) ;
13164: LD_VAR 0 1
13168: PPUSH
13169: LD_INT 10
13171: PPUSH
13172: CALL_OW 241
13176: GO 13161
13178: POP
13179: POP
// end ;
13180: PPOPN 2
13182: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
13183: LD_EXP 24
13187: PUSH
13188: LD_EXP 41
13192: AND
13193: IFFALSE 13304
13195: GO 13197
13197: DISABLE
13198: LD_INT 0
13200: PPUSH
13201: PPUSH
13202: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13203: LD_ADDR_VAR 0 3
13207: PUSH
13208: LD_INT 22
13210: PUSH
13211: LD_OWVAR 2
13215: PUSH
13216: EMPTY
13217: LIST
13218: LIST
13219: PUSH
13220: LD_INT 25
13222: PUSH
13223: LD_INT 1
13225: PUSH
13226: EMPTY
13227: LIST
13228: LIST
13229: PUSH
13230: EMPTY
13231: LIST
13232: LIST
13233: PPUSH
13234: CALL_OW 69
13238: ST_TO_ADDR
// if not tmp then
13239: LD_VAR 0 3
13243: NOT
13244: IFFALSE 13248
// exit ;
13246: GO 13304
// un := tmp [ rand ( 1 , tmp ) ] ;
13248: LD_ADDR_VAR 0 2
13252: PUSH
13253: LD_VAR 0 3
13257: PUSH
13258: LD_INT 1
13260: PPUSH
13261: LD_VAR 0 3
13265: PPUSH
13266: CALL_OW 12
13270: ARRAY
13271: ST_TO_ADDR
// if Crawls ( un ) then
13272: LD_VAR 0 2
13276: PPUSH
13277: CALL_OW 318
13281: IFFALSE 13292
// ComWalk ( un ) ;
13283: LD_VAR 0 2
13287: PPUSH
13288: CALL_OW 138
// SetClass ( un , class_sniper ) ;
13292: LD_VAR 0 2
13296: PPUSH
13297: LD_INT 5
13299: PPUSH
13300: CALL_OW 336
// end ;
13304: PPOPN 3
13306: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
13307: LD_EXP 24
13311: PUSH
13312: LD_EXP 42
13316: AND
13317: PUSH
13318: LD_OWVAR 67
13322: PUSH
13323: LD_INT 4
13325: LESS
13326: AND
13327: IFFALSE 13346
13329: GO 13331
13331: DISABLE
// begin Difficulty := Difficulty + 1 ;
13332: LD_ADDR_OWVAR 67
13336: PUSH
13337: LD_OWVAR 67
13341: PUSH
13342: LD_INT 1
13344: PLUS
13345: ST_TO_ADDR
// end ;
13346: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
13347: LD_EXP 24
13351: PUSH
13352: LD_EXP 43
13356: AND
13357: IFFALSE 13460
13359: GO 13361
13361: DISABLE
13362: LD_INT 0
13364: PPUSH
// begin for i := 1 to 5 do
13365: LD_ADDR_VAR 0 1
13369: PUSH
13370: DOUBLE
13371: LD_INT 1
13373: DEC
13374: ST_TO_ADDR
13375: LD_INT 5
13377: PUSH
13378: FOR_TO
13379: IFFALSE 13458
// begin uc_nation := nation_nature ;
13381: LD_ADDR_OWVAR 21
13385: PUSH
13386: LD_INT 0
13388: ST_TO_ADDR
// uc_side := 0 ;
13389: LD_ADDR_OWVAR 20
13393: PUSH
13394: LD_INT 0
13396: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13397: LD_ADDR_OWVAR 29
13401: PUSH
13402: LD_INT 12
13404: PUSH
13405: LD_INT 12
13407: PUSH
13408: EMPTY
13409: LIST
13410: LIST
13411: ST_TO_ADDR
// hc_agressivity := 20 ;
13412: LD_ADDR_OWVAR 35
13416: PUSH
13417: LD_INT 20
13419: ST_TO_ADDR
// hc_class := class_tiger ;
13420: LD_ADDR_OWVAR 28
13424: PUSH
13425: LD_INT 14
13427: ST_TO_ADDR
// hc_gallery :=  ;
13428: LD_ADDR_OWVAR 33
13432: PUSH
13433: LD_STRING 
13435: ST_TO_ADDR
// hc_name :=  ;
13436: LD_ADDR_OWVAR 26
13440: PUSH
13441: LD_STRING 
13443: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
13444: CALL_OW 44
13448: PPUSH
13449: LD_INT 0
13451: PPUSH
13452: CALL_OW 51
// end ;
13456: GO 13378
13458: POP
13459: POP
// end ;
13460: PPOPN 1
13462: END
// every 0 0$1 trigger StreamModeActive and sBomb do
13463: LD_EXP 24
13467: PUSH
13468: LD_EXP 44
13472: AND
13473: IFFALSE 13482
13475: GO 13477
13477: DISABLE
// StreamSibBomb ;
13478: CALL 13483 0 0
13482: END
// export function StreamSibBomb ; var i , x , y ; begin
13483: LD_INT 0
13485: PPUSH
13486: PPUSH
13487: PPUSH
13488: PPUSH
// result := false ;
13489: LD_ADDR_VAR 0 1
13493: PUSH
13494: LD_INT 0
13496: ST_TO_ADDR
// for i := 1 to 16 do
13497: LD_ADDR_VAR 0 2
13501: PUSH
13502: DOUBLE
13503: LD_INT 1
13505: DEC
13506: ST_TO_ADDR
13507: LD_INT 16
13509: PUSH
13510: FOR_TO
13511: IFFALSE 13710
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13513: LD_ADDR_VAR 0 3
13517: PUSH
13518: LD_INT 10
13520: PUSH
13521: LD_INT 20
13523: PUSH
13524: LD_INT 30
13526: PUSH
13527: LD_INT 40
13529: PUSH
13530: LD_INT 50
13532: PUSH
13533: LD_INT 60
13535: PUSH
13536: LD_INT 70
13538: PUSH
13539: LD_INT 80
13541: PUSH
13542: LD_INT 90
13544: PUSH
13545: LD_INT 100
13547: PUSH
13548: LD_INT 110
13550: PUSH
13551: LD_INT 120
13553: PUSH
13554: LD_INT 130
13556: PUSH
13557: LD_INT 140
13559: PUSH
13560: LD_INT 150
13562: PUSH
13563: EMPTY
13564: LIST
13565: LIST
13566: LIST
13567: LIST
13568: LIST
13569: LIST
13570: LIST
13571: LIST
13572: LIST
13573: LIST
13574: LIST
13575: LIST
13576: LIST
13577: LIST
13578: LIST
13579: PUSH
13580: LD_INT 1
13582: PPUSH
13583: LD_INT 15
13585: PPUSH
13586: CALL_OW 12
13590: ARRAY
13591: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13592: LD_ADDR_VAR 0 4
13596: PUSH
13597: LD_INT 10
13599: PUSH
13600: LD_INT 20
13602: PUSH
13603: LD_INT 30
13605: PUSH
13606: LD_INT 40
13608: PUSH
13609: LD_INT 50
13611: PUSH
13612: LD_INT 60
13614: PUSH
13615: LD_INT 70
13617: PUSH
13618: LD_INT 80
13620: PUSH
13621: LD_INT 90
13623: PUSH
13624: LD_INT 100
13626: PUSH
13627: LD_INT 110
13629: PUSH
13630: LD_INT 120
13632: PUSH
13633: LD_INT 130
13635: PUSH
13636: LD_INT 140
13638: PUSH
13639: LD_INT 150
13641: PUSH
13642: EMPTY
13643: LIST
13644: LIST
13645: LIST
13646: LIST
13647: LIST
13648: LIST
13649: LIST
13650: LIST
13651: LIST
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: LIST
13657: LIST
13658: PUSH
13659: LD_INT 1
13661: PPUSH
13662: LD_INT 15
13664: PPUSH
13665: CALL_OW 12
13669: ARRAY
13670: ST_TO_ADDR
// if ValidHex ( x , y ) then
13671: LD_VAR 0 3
13675: PPUSH
13676: LD_VAR 0 4
13680: PPUSH
13681: CALL_OW 488
13685: IFFALSE 13708
// begin result := [ x , y ] ;
13687: LD_ADDR_VAR 0 1
13691: PUSH
13692: LD_VAR 0 3
13696: PUSH
13697: LD_VAR 0 4
13701: PUSH
13702: EMPTY
13703: LIST
13704: LIST
13705: ST_TO_ADDR
// break ;
13706: GO 13710
// end ; end ;
13708: GO 13510
13710: POP
13711: POP
// if result then
13712: LD_VAR 0 1
13716: IFFALSE 13776
// begin ToLua ( playSibBomb() ) ;
13718: LD_STRING playSibBomb()
13720: PPUSH
13721: CALL_OW 559
// wait ( 0 0$14 ) ;
13725: LD_INT 490
13727: PPUSH
13728: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
13732: LD_VAR 0 1
13736: PUSH
13737: LD_INT 1
13739: ARRAY
13740: PPUSH
13741: LD_VAR 0 1
13745: PUSH
13746: LD_INT 2
13748: ARRAY
13749: PPUSH
13750: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
13754: LD_VAR 0 1
13758: PUSH
13759: LD_INT 1
13761: ARRAY
13762: PPUSH
13763: LD_VAR 0 1
13767: PUSH
13768: LD_INT 2
13770: ARRAY
13771: PPUSH
13772: CALL_OW 429
// end ; end ;
13776: LD_VAR 0 1
13780: RET
// every 0 0$1 trigger StreamModeActive and sReset do
13781: LD_EXP 24
13785: PUSH
13786: LD_EXP 46
13790: AND
13791: IFFALSE 13803
13793: GO 13795
13795: DISABLE
// YouLost (  ) ;
13796: LD_STRING 
13798: PPUSH
13799: CALL_OW 104
13803: END
// every 0 0$1 trigger StreamModeActive and sFog do
13804: LD_EXP 24
13808: PUSH
13809: LD_EXP 45
13813: AND
13814: IFFALSE 13828
13816: GO 13818
13818: DISABLE
// FogOff ( your_side ) ;
13819: LD_OWVAR 2
13823: PPUSH
13824: CALL_OW 344
13828: END
// every 0 0$1 trigger StreamModeActive and sSun do
13829: LD_EXP 24
13833: PUSH
13834: LD_EXP 47
13838: AND
13839: IFFALSE 13867
13841: GO 13843
13843: DISABLE
// begin solar_recharge_percent := 0 ;
13844: LD_ADDR_OWVAR 79
13848: PUSH
13849: LD_INT 0
13851: ST_TO_ADDR
// wait ( 5 5$00 ) ;
13852: LD_INT 10500
13854: PPUSH
13855: CALL_OW 67
// solar_recharge_percent := 100 ;
13859: LD_ADDR_OWVAR 79
13863: PUSH
13864: LD_INT 100
13866: ST_TO_ADDR
// end ;
13867: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
13868: LD_EXP 24
13872: PUSH
13873: LD_EXP 48
13877: AND
13878: IFFALSE 14117
13880: GO 13882
13882: DISABLE
13883: LD_INT 0
13885: PPUSH
13886: PPUSH
13887: PPUSH
// begin tmp := [ ] ;
13888: LD_ADDR_VAR 0 3
13892: PUSH
13893: EMPTY
13894: ST_TO_ADDR
// for i := 1 to 6 do
13895: LD_ADDR_VAR 0 1
13899: PUSH
13900: DOUBLE
13901: LD_INT 1
13903: DEC
13904: ST_TO_ADDR
13905: LD_INT 6
13907: PUSH
13908: FOR_TO
13909: IFFALSE 14014
// begin uc_nation := nation_nature ;
13911: LD_ADDR_OWVAR 21
13915: PUSH
13916: LD_INT 0
13918: ST_TO_ADDR
// uc_side := 0 ;
13919: LD_ADDR_OWVAR 20
13923: PUSH
13924: LD_INT 0
13926: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13927: LD_ADDR_OWVAR 29
13931: PUSH
13932: LD_INT 12
13934: PUSH
13935: LD_INT 12
13937: PUSH
13938: EMPTY
13939: LIST
13940: LIST
13941: ST_TO_ADDR
// hc_agressivity := 20 ;
13942: LD_ADDR_OWVAR 35
13946: PUSH
13947: LD_INT 20
13949: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
13950: LD_ADDR_OWVAR 28
13954: PUSH
13955: LD_INT 17
13957: ST_TO_ADDR
// hc_gallery :=  ;
13958: LD_ADDR_OWVAR 33
13962: PUSH
13963: LD_STRING 
13965: ST_TO_ADDR
// hc_name :=  ;
13966: LD_ADDR_OWVAR 26
13970: PUSH
13971: LD_STRING 
13973: ST_TO_ADDR
// un := CreateHuman ;
13974: LD_ADDR_VAR 0 2
13978: PUSH
13979: CALL_OW 44
13983: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
13984: LD_VAR 0 2
13988: PPUSH
13989: LD_INT 1
13991: PPUSH
13992: CALL_OW 51
// tmp := tmp ^ un ;
13996: LD_ADDR_VAR 0 3
14000: PUSH
14001: LD_VAR 0 3
14005: PUSH
14006: LD_VAR 0 2
14010: ADD
14011: ST_TO_ADDR
// end ;
14012: GO 13908
14014: POP
14015: POP
// repeat wait ( 0 0$1 ) ;
14016: LD_INT 35
14018: PPUSH
14019: CALL_OW 67
// for un in tmp do
14023: LD_ADDR_VAR 0 2
14027: PUSH
14028: LD_VAR 0 3
14032: PUSH
14033: FOR_IN
14034: IFFALSE 14108
// begin if IsDead ( un ) then
14036: LD_VAR 0 2
14040: PPUSH
14041: CALL_OW 301
14045: IFFALSE 14065
// begin tmp := tmp diff un ;
14047: LD_ADDR_VAR 0 3
14051: PUSH
14052: LD_VAR 0 3
14056: PUSH
14057: LD_VAR 0 2
14061: DIFF
14062: ST_TO_ADDR
// continue ;
14063: GO 14033
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
14065: LD_VAR 0 2
14069: PPUSH
14070: LD_INT 3
14072: PUSH
14073: LD_INT 22
14075: PUSH
14076: LD_INT 0
14078: PUSH
14079: EMPTY
14080: LIST
14081: LIST
14082: PUSH
14083: EMPTY
14084: LIST
14085: LIST
14086: PPUSH
14087: CALL_OW 69
14091: PPUSH
14092: LD_VAR 0 2
14096: PPUSH
14097: CALL_OW 74
14101: PPUSH
14102: CALL_OW 115
// end ;
14106: GO 14033
14108: POP
14109: POP
// until not tmp ;
14110: LD_VAR 0 3
14114: NOT
14115: IFFALSE 14016
// end ;
14117: PPOPN 3
14119: END
// every 0 0$1 trigger StreamModeActive and sTroll do
14120: LD_EXP 24
14124: PUSH
14125: LD_EXP 49
14129: AND
14130: IFFALSE 14184
14132: GO 14134
14134: DISABLE
// begin ToLua ( displayTroll(); ) ;
14135: LD_STRING displayTroll();
14137: PPUSH
14138: CALL_OW 559
// wait ( 3 3$00 ) ;
14142: LD_INT 6300
14144: PPUSH
14145: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14149: LD_STRING hideTroll();
14151: PPUSH
14152: CALL_OW 559
// wait ( 1 1$00 ) ;
14156: LD_INT 2100
14158: PPUSH
14159: CALL_OW 67
// ToLua ( displayTroll(); ) ;
14163: LD_STRING displayTroll();
14165: PPUSH
14166: CALL_OW 559
// wait ( 1 1$00 ) ;
14170: LD_INT 2100
14172: PPUSH
14173: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14177: LD_STRING hideTroll();
14179: PPUSH
14180: CALL_OW 559
// end ;
14184: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
14185: LD_EXP 24
14189: PUSH
14190: LD_EXP 50
14194: AND
14195: IFFALSE 14258
14197: GO 14199
14199: DISABLE
14200: LD_INT 0
14202: PPUSH
// begin p := 0 ;
14203: LD_ADDR_VAR 0 1
14207: PUSH
14208: LD_INT 0
14210: ST_TO_ADDR
// repeat game_speed := 1 ;
14211: LD_ADDR_OWVAR 65
14215: PUSH
14216: LD_INT 1
14218: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14219: LD_INT 35
14221: PPUSH
14222: CALL_OW 67
// p := p + 1 ;
14226: LD_ADDR_VAR 0 1
14230: PUSH
14231: LD_VAR 0 1
14235: PUSH
14236: LD_INT 1
14238: PLUS
14239: ST_TO_ADDR
// until p >= 60 ;
14240: LD_VAR 0 1
14244: PUSH
14245: LD_INT 60
14247: GREATEREQUAL
14248: IFFALSE 14211
// game_speed := 4 ;
14250: LD_ADDR_OWVAR 65
14254: PUSH
14255: LD_INT 4
14257: ST_TO_ADDR
// end ;
14258: PPOPN 1
14260: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
14261: LD_EXP 24
14265: PUSH
14266: LD_EXP 51
14270: AND
14271: IFFALSE 14417
14273: GO 14275
14275: DISABLE
14276: LD_INT 0
14278: PPUSH
14279: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14280: LD_ADDR_VAR 0 1
14284: PUSH
14285: LD_INT 22
14287: PUSH
14288: LD_OWVAR 2
14292: PUSH
14293: EMPTY
14294: LIST
14295: LIST
14296: PUSH
14297: LD_INT 2
14299: PUSH
14300: LD_INT 30
14302: PUSH
14303: LD_INT 0
14305: PUSH
14306: EMPTY
14307: LIST
14308: LIST
14309: PUSH
14310: LD_INT 30
14312: PUSH
14313: LD_INT 1
14315: PUSH
14316: EMPTY
14317: LIST
14318: LIST
14319: PUSH
14320: EMPTY
14321: LIST
14322: LIST
14323: LIST
14324: PUSH
14325: EMPTY
14326: LIST
14327: LIST
14328: PPUSH
14329: CALL_OW 69
14333: ST_TO_ADDR
// if not depot then
14334: LD_VAR 0 1
14338: NOT
14339: IFFALSE 14343
// exit ;
14341: GO 14417
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
14343: LD_ADDR_VAR 0 2
14347: PUSH
14348: LD_VAR 0 1
14352: PUSH
14353: LD_INT 1
14355: PPUSH
14356: LD_VAR 0 1
14360: PPUSH
14361: CALL_OW 12
14365: ARRAY
14366: PPUSH
14367: CALL_OW 274
14371: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
14372: LD_VAR 0 2
14376: PPUSH
14377: LD_INT 1
14379: PPUSH
14380: LD_INT 0
14382: PPUSH
14383: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
14387: LD_VAR 0 2
14391: PPUSH
14392: LD_INT 2
14394: PPUSH
14395: LD_INT 0
14397: PPUSH
14398: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
14402: LD_VAR 0 2
14406: PPUSH
14407: LD_INT 3
14409: PPUSH
14410: LD_INT 0
14412: PPUSH
14413: CALL_OW 277
// end ;
14417: PPOPN 2
14419: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
14420: LD_EXP 24
14424: PUSH
14425: LD_EXP 52
14429: AND
14430: IFFALSE 14527
14432: GO 14434
14434: DISABLE
14435: LD_INT 0
14437: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14438: LD_ADDR_VAR 0 1
14442: PUSH
14443: LD_INT 22
14445: PUSH
14446: LD_OWVAR 2
14450: PUSH
14451: EMPTY
14452: LIST
14453: LIST
14454: PUSH
14455: LD_INT 21
14457: PUSH
14458: LD_INT 1
14460: PUSH
14461: EMPTY
14462: LIST
14463: LIST
14464: PUSH
14465: LD_INT 3
14467: PUSH
14468: LD_INT 23
14470: PUSH
14471: LD_INT 0
14473: PUSH
14474: EMPTY
14475: LIST
14476: LIST
14477: PUSH
14478: EMPTY
14479: LIST
14480: LIST
14481: PUSH
14482: EMPTY
14483: LIST
14484: LIST
14485: LIST
14486: PPUSH
14487: CALL_OW 69
14491: ST_TO_ADDR
// if not tmp then
14492: LD_VAR 0 1
14496: NOT
14497: IFFALSE 14501
// exit ;
14499: GO 14527
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
14501: LD_VAR 0 1
14505: PUSH
14506: LD_INT 1
14508: PPUSH
14509: LD_VAR 0 1
14513: PPUSH
14514: CALL_OW 12
14518: ARRAY
14519: PPUSH
14520: LD_INT 200
14522: PPUSH
14523: CALL_OW 234
// end ;
14527: PPOPN 1
14529: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
14530: LD_EXP 24
14534: PUSH
14535: LD_EXP 53
14539: AND
14540: IFFALSE 14619
14542: GO 14544
14544: DISABLE
14545: LD_INT 0
14547: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
14548: LD_ADDR_VAR 0 1
14552: PUSH
14553: LD_INT 22
14555: PUSH
14556: LD_OWVAR 2
14560: PUSH
14561: EMPTY
14562: LIST
14563: LIST
14564: PUSH
14565: LD_INT 21
14567: PUSH
14568: LD_INT 2
14570: PUSH
14571: EMPTY
14572: LIST
14573: LIST
14574: PUSH
14575: EMPTY
14576: LIST
14577: LIST
14578: PPUSH
14579: CALL_OW 69
14583: ST_TO_ADDR
// if not tmp then
14584: LD_VAR 0 1
14588: NOT
14589: IFFALSE 14593
// exit ;
14591: GO 14619
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
14593: LD_VAR 0 1
14597: PUSH
14598: LD_INT 1
14600: PPUSH
14601: LD_VAR 0 1
14605: PPUSH
14606: CALL_OW 12
14610: ARRAY
14611: PPUSH
14612: LD_INT 60
14614: PPUSH
14615: CALL_OW 234
// end ;
14619: PPOPN 1
14621: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
14622: LD_EXP 24
14626: PUSH
14627: LD_EXP 54
14631: AND
14632: IFFALSE 14731
14634: GO 14636
14636: DISABLE
14637: LD_INT 0
14639: PPUSH
14640: PPUSH
// begin enable ;
14641: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
14642: LD_ADDR_VAR 0 1
14646: PUSH
14647: LD_INT 22
14649: PUSH
14650: LD_OWVAR 2
14654: PUSH
14655: EMPTY
14656: LIST
14657: LIST
14658: PUSH
14659: LD_INT 61
14661: PUSH
14662: EMPTY
14663: LIST
14664: PUSH
14665: LD_INT 33
14667: PUSH
14668: LD_INT 2
14670: PUSH
14671: EMPTY
14672: LIST
14673: LIST
14674: PUSH
14675: EMPTY
14676: LIST
14677: LIST
14678: LIST
14679: PPUSH
14680: CALL_OW 69
14684: ST_TO_ADDR
// if not tmp then
14685: LD_VAR 0 1
14689: NOT
14690: IFFALSE 14694
// exit ;
14692: GO 14731
// for i in tmp do
14694: LD_ADDR_VAR 0 2
14698: PUSH
14699: LD_VAR 0 1
14703: PUSH
14704: FOR_IN
14705: IFFALSE 14729
// if IsControledBy ( i ) then
14707: LD_VAR 0 2
14711: PPUSH
14712: CALL_OW 312
14716: IFFALSE 14727
// ComUnlink ( i ) ;
14718: LD_VAR 0 2
14722: PPUSH
14723: CALL_OW 136
14727: GO 14704
14729: POP
14730: POP
// end ;
14731: PPOPN 2
14733: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
14734: LD_EXP 24
14738: PUSH
14739: LD_EXP 55
14743: AND
14744: IFFALSE 14884
14746: GO 14748
14748: DISABLE
14749: LD_INT 0
14751: PPUSH
14752: PPUSH
// begin ToLua ( displayPowell(); ) ;
14753: LD_STRING displayPowell();
14755: PPUSH
14756: CALL_OW 559
// uc_side := 0 ;
14760: LD_ADDR_OWVAR 20
14764: PUSH
14765: LD_INT 0
14767: ST_TO_ADDR
// uc_nation := 2 ;
14768: LD_ADDR_OWVAR 21
14772: PUSH
14773: LD_INT 2
14775: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
14776: LD_ADDR_OWVAR 37
14780: PUSH
14781: LD_INT 14
14783: ST_TO_ADDR
// vc_engine := engine_siberite ;
14784: LD_ADDR_OWVAR 39
14788: PUSH
14789: LD_INT 3
14791: ST_TO_ADDR
// vc_control := control_apeman ;
14792: LD_ADDR_OWVAR 38
14796: PUSH
14797: LD_INT 5
14799: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
14800: LD_ADDR_OWVAR 40
14804: PUSH
14805: LD_INT 29
14807: ST_TO_ADDR
// un := CreateVehicle ;
14808: LD_ADDR_VAR 0 2
14812: PUSH
14813: CALL_OW 45
14817: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14818: LD_VAR 0 2
14822: PPUSH
14823: LD_INT 1
14825: PPUSH
14826: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14830: LD_INT 35
14832: PPUSH
14833: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14837: LD_VAR 0 2
14841: PPUSH
14842: LD_INT 22
14844: PUSH
14845: LD_OWVAR 2
14849: PUSH
14850: EMPTY
14851: LIST
14852: LIST
14853: PPUSH
14854: CALL_OW 69
14858: PPUSH
14859: LD_VAR 0 2
14863: PPUSH
14864: CALL_OW 74
14868: PPUSH
14869: CALL_OW 115
// until IsDead ( un ) ;
14873: LD_VAR 0 2
14877: PPUSH
14878: CALL_OW 301
14882: IFFALSE 14830
// end ;
14884: PPOPN 2
14886: END
// every 0 0$1 trigger StreamModeActive and sStu do
14887: LD_EXP 24
14891: PUSH
14892: LD_EXP 63
14896: AND
14897: IFFALSE 14913
14899: GO 14901
14901: DISABLE
// begin ToLua ( displayStucuk(); ) ;
14902: LD_STRING displayStucuk();
14904: PPUSH
14905: CALL_OW 559
// ResetFog ;
14909: CALL_OW 335
// end ;
14913: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
14914: LD_EXP 24
14918: PUSH
14919: LD_EXP 56
14923: AND
14924: IFFALSE 15065
14926: GO 14928
14928: DISABLE
14929: LD_INT 0
14931: PPUSH
14932: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14933: LD_ADDR_VAR 0 2
14937: PUSH
14938: LD_INT 22
14940: PUSH
14941: LD_OWVAR 2
14945: PUSH
14946: EMPTY
14947: LIST
14948: LIST
14949: PUSH
14950: LD_INT 21
14952: PUSH
14953: LD_INT 1
14955: PUSH
14956: EMPTY
14957: LIST
14958: LIST
14959: PUSH
14960: EMPTY
14961: LIST
14962: LIST
14963: PPUSH
14964: CALL_OW 69
14968: ST_TO_ADDR
// if not tmp then
14969: LD_VAR 0 2
14973: NOT
14974: IFFALSE 14978
// exit ;
14976: GO 15065
// un := tmp [ rand ( 1 , tmp ) ] ;
14978: LD_ADDR_VAR 0 1
14982: PUSH
14983: LD_VAR 0 2
14987: PUSH
14988: LD_INT 1
14990: PPUSH
14991: LD_VAR 0 2
14995: PPUSH
14996: CALL_OW 12
15000: ARRAY
15001: ST_TO_ADDR
// SetSide ( un , 0 ) ;
15002: LD_VAR 0 1
15006: PPUSH
15007: LD_INT 0
15009: PPUSH
15010: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
15014: LD_VAR 0 1
15018: PPUSH
15019: LD_OWVAR 3
15023: PUSH
15024: LD_VAR 0 1
15028: DIFF
15029: PPUSH
15030: LD_VAR 0 1
15034: PPUSH
15035: CALL_OW 74
15039: PPUSH
15040: CALL_OW 115
// wait ( 0 0$20 ) ;
15044: LD_INT 700
15046: PPUSH
15047: CALL_OW 67
// SetSide ( un , your_side ) ;
15051: LD_VAR 0 1
15055: PPUSH
15056: LD_OWVAR 2
15060: PPUSH
15061: CALL_OW 235
// end ;
15065: PPOPN 2
15067: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
15068: LD_EXP 24
15072: PUSH
15073: LD_EXP 57
15077: AND
15078: IFFALSE 15184
15080: GO 15082
15082: DISABLE
15083: LD_INT 0
15085: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15086: LD_ADDR_VAR 0 1
15090: PUSH
15091: LD_INT 22
15093: PUSH
15094: LD_OWVAR 2
15098: PUSH
15099: EMPTY
15100: LIST
15101: LIST
15102: PUSH
15103: LD_INT 2
15105: PUSH
15106: LD_INT 30
15108: PUSH
15109: LD_INT 0
15111: PUSH
15112: EMPTY
15113: LIST
15114: LIST
15115: PUSH
15116: LD_INT 30
15118: PUSH
15119: LD_INT 1
15121: PUSH
15122: EMPTY
15123: LIST
15124: LIST
15125: PUSH
15126: EMPTY
15127: LIST
15128: LIST
15129: LIST
15130: PUSH
15131: EMPTY
15132: LIST
15133: LIST
15134: PPUSH
15135: CALL_OW 69
15139: ST_TO_ADDR
// if not depot then
15140: LD_VAR 0 1
15144: NOT
15145: IFFALSE 15149
// exit ;
15147: GO 15184
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
15149: LD_VAR 0 1
15153: PUSH
15154: LD_INT 1
15156: ARRAY
15157: PPUSH
15158: CALL_OW 250
15162: PPUSH
15163: LD_VAR 0 1
15167: PUSH
15168: LD_INT 1
15170: ARRAY
15171: PPUSH
15172: CALL_OW 251
15176: PPUSH
15177: LD_INT 70
15179: PPUSH
15180: CALL_OW 495
// end ;
15184: PPOPN 1
15186: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
15187: LD_EXP 24
15191: PUSH
15192: LD_EXP 58
15196: AND
15197: IFFALSE 15408
15199: GO 15201
15201: DISABLE
15202: LD_INT 0
15204: PPUSH
15205: PPUSH
15206: PPUSH
15207: PPUSH
15208: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15209: LD_ADDR_VAR 0 5
15213: PUSH
15214: LD_INT 22
15216: PUSH
15217: LD_OWVAR 2
15221: PUSH
15222: EMPTY
15223: LIST
15224: LIST
15225: PUSH
15226: LD_INT 21
15228: PUSH
15229: LD_INT 1
15231: PUSH
15232: EMPTY
15233: LIST
15234: LIST
15235: PUSH
15236: EMPTY
15237: LIST
15238: LIST
15239: PPUSH
15240: CALL_OW 69
15244: ST_TO_ADDR
// if not tmp then
15245: LD_VAR 0 5
15249: NOT
15250: IFFALSE 15254
// exit ;
15252: GO 15408
// for i in tmp do
15254: LD_ADDR_VAR 0 1
15258: PUSH
15259: LD_VAR 0 5
15263: PUSH
15264: FOR_IN
15265: IFFALSE 15406
// begin d := rand ( 0 , 5 ) ;
15267: LD_ADDR_VAR 0 4
15271: PUSH
15272: LD_INT 0
15274: PPUSH
15275: LD_INT 5
15277: PPUSH
15278: CALL_OW 12
15282: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
15283: LD_ADDR_VAR 0 2
15287: PUSH
15288: LD_VAR 0 1
15292: PPUSH
15293: CALL_OW 250
15297: PPUSH
15298: LD_VAR 0 4
15302: PPUSH
15303: LD_INT 3
15305: PPUSH
15306: LD_INT 12
15308: PPUSH
15309: CALL_OW 12
15313: PPUSH
15314: CALL_OW 272
15318: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
15319: LD_ADDR_VAR 0 3
15323: PUSH
15324: LD_VAR 0 1
15328: PPUSH
15329: CALL_OW 251
15333: PPUSH
15334: LD_VAR 0 4
15338: PPUSH
15339: LD_INT 3
15341: PPUSH
15342: LD_INT 12
15344: PPUSH
15345: CALL_OW 12
15349: PPUSH
15350: CALL_OW 273
15354: ST_TO_ADDR
// if ValidHex ( x , y ) then
15355: LD_VAR 0 2
15359: PPUSH
15360: LD_VAR 0 3
15364: PPUSH
15365: CALL_OW 488
15369: IFFALSE 15404
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
15371: LD_VAR 0 1
15375: PPUSH
15376: LD_VAR 0 2
15380: PPUSH
15381: LD_VAR 0 3
15385: PPUSH
15386: LD_INT 3
15388: PPUSH
15389: LD_INT 6
15391: PPUSH
15392: CALL_OW 12
15396: PPUSH
15397: LD_INT 1
15399: PPUSH
15400: CALL_OW 483
// end ;
15404: GO 15264
15406: POP
15407: POP
// end ;
15408: PPOPN 5
15410: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
15411: LD_EXP 24
15415: PUSH
15416: LD_EXP 59
15420: AND
15421: IFFALSE 15515
15423: GO 15425
15425: DISABLE
15426: LD_INT 0
15428: PPUSH
15429: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
15430: LD_ADDR_VAR 0 2
15434: PUSH
15435: LD_INT 22
15437: PUSH
15438: LD_OWVAR 2
15442: PUSH
15443: EMPTY
15444: LIST
15445: LIST
15446: PUSH
15447: LD_INT 32
15449: PUSH
15450: LD_INT 1
15452: PUSH
15453: EMPTY
15454: LIST
15455: LIST
15456: PUSH
15457: LD_INT 21
15459: PUSH
15460: LD_INT 2
15462: PUSH
15463: EMPTY
15464: LIST
15465: LIST
15466: PUSH
15467: EMPTY
15468: LIST
15469: LIST
15470: LIST
15471: PPUSH
15472: CALL_OW 69
15476: ST_TO_ADDR
// if not tmp then
15477: LD_VAR 0 2
15481: NOT
15482: IFFALSE 15486
// exit ;
15484: GO 15515
// for i in tmp do
15486: LD_ADDR_VAR 0 1
15490: PUSH
15491: LD_VAR 0 2
15495: PUSH
15496: FOR_IN
15497: IFFALSE 15513
// SetFuel ( i , 0 ) ;
15499: LD_VAR 0 1
15503: PPUSH
15504: LD_INT 0
15506: PPUSH
15507: CALL_OW 240
15511: GO 15496
15513: POP
15514: POP
// end ;
15515: PPOPN 2
15517: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
15518: LD_EXP 24
15522: PUSH
15523: LD_EXP 60
15527: AND
15528: IFFALSE 15594
15530: GO 15532
15532: DISABLE
15533: LD_INT 0
15535: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15536: LD_ADDR_VAR 0 1
15540: PUSH
15541: LD_INT 22
15543: PUSH
15544: LD_OWVAR 2
15548: PUSH
15549: EMPTY
15550: LIST
15551: LIST
15552: PUSH
15553: LD_INT 30
15555: PUSH
15556: LD_INT 29
15558: PUSH
15559: EMPTY
15560: LIST
15561: LIST
15562: PUSH
15563: EMPTY
15564: LIST
15565: LIST
15566: PPUSH
15567: CALL_OW 69
15571: ST_TO_ADDR
// if not tmp then
15572: LD_VAR 0 1
15576: NOT
15577: IFFALSE 15581
// exit ;
15579: GO 15594
// DestroyUnit ( tmp [ 1 ] ) ;
15581: LD_VAR 0 1
15585: PUSH
15586: LD_INT 1
15588: ARRAY
15589: PPUSH
15590: CALL_OW 65
// end ;
15594: PPOPN 1
15596: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
15597: LD_EXP 24
15601: PUSH
15602: LD_EXP 62
15606: AND
15607: IFFALSE 15736
15609: GO 15611
15611: DISABLE
15612: LD_INT 0
15614: PPUSH
// begin uc_side := 0 ;
15615: LD_ADDR_OWVAR 20
15619: PUSH
15620: LD_INT 0
15622: ST_TO_ADDR
// uc_nation := nation_arabian ;
15623: LD_ADDR_OWVAR 21
15627: PUSH
15628: LD_INT 2
15630: ST_TO_ADDR
// hc_gallery :=  ;
15631: LD_ADDR_OWVAR 33
15635: PUSH
15636: LD_STRING 
15638: ST_TO_ADDR
// hc_name :=  ;
15639: LD_ADDR_OWVAR 26
15643: PUSH
15644: LD_STRING 
15646: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
15647: LD_INT 1
15649: PPUSH
15650: LD_INT 11
15652: PPUSH
15653: LD_INT 10
15655: PPUSH
15656: CALL_OW 380
// un := CreateHuman ;
15660: LD_ADDR_VAR 0 1
15664: PUSH
15665: CALL_OW 44
15669: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15670: LD_VAR 0 1
15674: PPUSH
15675: LD_INT 1
15677: PPUSH
15678: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15682: LD_INT 35
15684: PPUSH
15685: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15689: LD_VAR 0 1
15693: PPUSH
15694: LD_INT 22
15696: PUSH
15697: LD_OWVAR 2
15701: PUSH
15702: EMPTY
15703: LIST
15704: LIST
15705: PPUSH
15706: CALL_OW 69
15710: PPUSH
15711: LD_VAR 0 1
15715: PPUSH
15716: CALL_OW 74
15720: PPUSH
15721: CALL_OW 115
// until IsDead ( un ) ;
15725: LD_VAR 0 1
15729: PPUSH
15730: CALL_OW 301
15734: IFFALSE 15682
// end ;
15736: PPOPN 1
15738: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
15739: LD_EXP 24
15743: PUSH
15744: LD_EXP 64
15748: AND
15749: IFFALSE 15761
15751: GO 15753
15753: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
15754: LD_STRING earthquake(getX(game), 0, 32)
15756: PPUSH
15757: CALL_OW 559
15761: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
15762: LD_EXP 24
15766: PUSH
15767: LD_EXP 65
15771: AND
15772: IFFALSE 15863
15774: GO 15776
15776: DISABLE
15777: LD_INT 0
15779: PPUSH
// begin enable ;
15780: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
15781: LD_ADDR_VAR 0 1
15785: PUSH
15786: LD_INT 22
15788: PUSH
15789: LD_OWVAR 2
15793: PUSH
15794: EMPTY
15795: LIST
15796: LIST
15797: PUSH
15798: LD_INT 21
15800: PUSH
15801: LD_INT 2
15803: PUSH
15804: EMPTY
15805: LIST
15806: LIST
15807: PUSH
15808: LD_INT 33
15810: PUSH
15811: LD_INT 3
15813: PUSH
15814: EMPTY
15815: LIST
15816: LIST
15817: PUSH
15818: EMPTY
15819: LIST
15820: LIST
15821: LIST
15822: PPUSH
15823: CALL_OW 69
15827: ST_TO_ADDR
// if not tmp then
15828: LD_VAR 0 1
15832: NOT
15833: IFFALSE 15837
// exit ;
15835: GO 15863
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15837: LD_VAR 0 1
15841: PUSH
15842: LD_INT 1
15844: PPUSH
15845: LD_VAR 0 1
15849: PPUSH
15850: CALL_OW 12
15854: ARRAY
15855: PPUSH
15856: LD_INT 1
15858: PPUSH
15859: CALL_OW 234
// end ;
15863: PPOPN 1
15865: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
15866: LD_EXP 24
15870: PUSH
15871: LD_EXP 66
15875: AND
15876: IFFALSE 16017
15878: GO 15880
15880: DISABLE
15881: LD_INT 0
15883: PPUSH
15884: PPUSH
15885: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15886: LD_ADDR_VAR 0 3
15890: PUSH
15891: LD_INT 22
15893: PUSH
15894: LD_OWVAR 2
15898: PUSH
15899: EMPTY
15900: LIST
15901: LIST
15902: PUSH
15903: LD_INT 25
15905: PUSH
15906: LD_INT 1
15908: PUSH
15909: EMPTY
15910: LIST
15911: LIST
15912: PUSH
15913: EMPTY
15914: LIST
15915: LIST
15916: PPUSH
15917: CALL_OW 69
15921: ST_TO_ADDR
// if not tmp then
15922: LD_VAR 0 3
15926: NOT
15927: IFFALSE 15931
// exit ;
15929: GO 16017
// un := tmp [ rand ( 1 , tmp ) ] ;
15931: LD_ADDR_VAR 0 2
15935: PUSH
15936: LD_VAR 0 3
15940: PUSH
15941: LD_INT 1
15943: PPUSH
15944: LD_VAR 0 3
15948: PPUSH
15949: CALL_OW 12
15953: ARRAY
15954: ST_TO_ADDR
// if Crawls ( un ) then
15955: LD_VAR 0 2
15959: PPUSH
15960: CALL_OW 318
15964: IFFALSE 15975
// ComWalk ( un ) ;
15966: LD_VAR 0 2
15970: PPUSH
15971: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
15975: LD_VAR 0 2
15979: PPUSH
15980: LD_INT 9
15982: PPUSH
15983: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
15987: LD_INT 28
15989: PPUSH
15990: LD_OWVAR 2
15994: PPUSH
15995: LD_INT 2
15997: PPUSH
15998: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
16002: LD_INT 29
16004: PPUSH
16005: LD_OWVAR 2
16009: PPUSH
16010: LD_INT 2
16012: PPUSH
16013: CALL_OW 322
// end ;
16017: PPOPN 3
16019: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
16020: LD_EXP 24
16024: PUSH
16025: LD_EXP 67
16029: AND
16030: IFFALSE 16141
16032: GO 16034
16034: DISABLE
16035: LD_INT 0
16037: PPUSH
16038: PPUSH
16039: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16040: LD_ADDR_VAR 0 3
16044: PUSH
16045: LD_INT 22
16047: PUSH
16048: LD_OWVAR 2
16052: PUSH
16053: EMPTY
16054: LIST
16055: LIST
16056: PUSH
16057: LD_INT 25
16059: PUSH
16060: LD_INT 1
16062: PUSH
16063: EMPTY
16064: LIST
16065: LIST
16066: PUSH
16067: EMPTY
16068: LIST
16069: LIST
16070: PPUSH
16071: CALL_OW 69
16075: ST_TO_ADDR
// if not tmp then
16076: LD_VAR 0 3
16080: NOT
16081: IFFALSE 16085
// exit ;
16083: GO 16141
// un := tmp [ rand ( 1 , tmp ) ] ;
16085: LD_ADDR_VAR 0 2
16089: PUSH
16090: LD_VAR 0 3
16094: PUSH
16095: LD_INT 1
16097: PPUSH
16098: LD_VAR 0 3
16102: PPUSH
16103: CALL_OW 12
16107: ARRAY
16108: ST_TO_ADDR
// if Crawls ( un ) then
16109: LD_VAR 0 2
16113: PPUSH
16114: CALL_OW 318
16118: IFFALSE 16129
// ComWalk ( un ) ;
16120: LD_VAR 0 2
16124: PPUSH
16125: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16129: LD_VAR 0 2
16133: PPUSH
16134: LD_INT 8
16136: PPUSH
16137: CALL_OW 336
// end ;
16141: PPOPN 3
16143: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
16144: LD_EXP 24
16148: PUSH
16149: LD_EXP 68
16153: AND
16154: IFFALSE 16298
16156: GO 16158
16158: DISABLE
16159: LD_INT 0
16161: PPUSH
16162: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
16163: LD_ADDR_VAR 0 2
16167: PUSH
16168: LD_INT 22
16170: PUSH
16171: LD_OWVAR 2
16175: PUSH
16176: EMPTY
16177: LIST
16178: LIST
16179: PUSH
16180: LD_INT 21
16182: PUSH
16183: LD_INT 2
16185: PUSH
16186: EMPTY
16187: LIST
16188: LIST
16189: PUSH
16190: LD_INT 2
16192: PUSH
16193: LD_INT 34
16195: PUSH
16196: LD_INT 12
16198: PUSH
16199: EMPTY
16200: LIST
16201: LIST
16202: PUSH
16203: LD_INT 34
16205: PUSH
16206: LD_INT 51
16208: PUSH
16209: EMPTY
16210: LIST
16211: LIST
16212: PUSH
16213: LD_INT 34
16215: PUSH
16216: LD_INT 32
16218: PUSH
16219: EMPTY
16220: LIST
16221: LIST
16222: PUSH
16223: EMPTY
16224: LIST
16225: LIST
16226: LIST
16227: LIST
16228: PUSH
16229: EMPTY
16230: LIST
16231: LIST
16232: LIST
16233: PPUSH
16234: CALL_OW 69
16238: ST_TO_ADDR
// if not tmp then
16239: LD_VAR 0 2
16243: NOT
16244: IFFALSE 16248
// exit ;
16246: GO 16298
// for i in tmp do
16248: LD_ADDR_VAR 0 1
16252: PUSH
16253: LD_VAR 0 2
16257: PUSH
16258: FOR_IN
16259: IFFALSE 16296
// if GetCargo ( i , mat_artifact ) = 0 then
16261: LD_VAR 0 1
16265: PPUSH
16266: LD_INT 4
16268: PPUSH
16269: CALL_OW 289
16273: PUSH
16274: LD_INT 0
16276: EQUAL
16277: IFFALSE 16294
// SetCargo ( i , mat_siberit , 100 ) ;
16279: LD_VAR 0 1
16283: PPUSH
16284: LD_INT 3
16286: PPUSH
16287: LD_INT 100
16289: PPUSH
16290: CALL_OW 290
16294: GO 16258
16296: POP
16297: POP
// end ;
16298: PPOPN 2
16300: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
16301: LD_EXP 24
16305: PUSH
16306: LD_EXP 69
16310: AND
16311: IFFALSE 16494
16313: GO 16315
16315: DISABLE
16316: LD_INT 0
16318: PPUSH
16319: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16320: LD_ADDR_VAR 0 2
16324: PUSH
16325: LD_INT 22
16327: PUSH
16328: LD_OWVAR 2
16332: PUSH
16333: EMPTY
16334: LIST
16335: LIST
16336: PPUSH
16337: CALL_OW 69
16341: ST_TO_ADDR
// if not tmp then
16342: LD_VAR 0 2
16346: NOT
16347: IFFALSE 16351
// exit ;
16349: GO 16494
// for i := 1 to 2 do
16351: LD_ADDR_VAR 0 1
16355: PUSH
16356: DOUBLE
16357: LD_INT 1
16359: DEC
16360: ST_TO_ADDR
16361: LD_INT 2
16363: PUSH
16364: FOR_TO
16365: IFFALSE 16492
// begin uc_side := your_side ;
16367: LD_ADDR_OWVAR 20
16371: PUSH
16372: LD_OWVAR 2
16376: ST_TO_ADDR
// uc_nation := nation_american ;
16377: LD_ADDR_OWVAR 21
16381: PUSH
16382: LD_INT 1
16384: ST_TO_ADDR
// vc_chassis := us_morphling ;
16385: LD_ADDR_OWVAR 37
16389: PUSH
16390: LD_INT 5
16392: ST_TO_ADDR
// vc_engine := engine_siberite ;
16393: LD_ADDR_OWVAR 39
16397: PUSH
16398: LD_INT 3
16400: ST_TO_ADDR
// vc_control := control_computer ;
16401: LD_ADDR_OWVAR 38
16405: PUSH
16406: LD_INT 3
16408: ST_TO_ADDR
// vc_weapon := us_double_laser ;
16409: LD_ADDR_OWVAR 40
16413: PUSH
16414: LD_INT 10
16416: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
16417: LD_VAR 0 2
16421: PUSH
16422: LD_INT 1
16424: ARRAY
16425: PPUSH
16426: CALL_OW 310
16430: NOT
16431: IFFALSE 16478
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
16433: CALL_OW 45
16437: PPUSH
16438: LD_VAR 0 2
16442: PUSH
16443: LD_INT 1
16445: ARRAY
16446: PPUSH
16447: CALL_OW 250
16451: PPUSH
16452: LD_VAR 0 2
16456: PUSH
16457: LD_INT 1
16459: ARRAY
16460: PPUSH
16461: CALL_OW 251
16465: PPUSH
16466: LD_INT 12
16468: PPUSH
16469: LD_INT 1
16471: PPUSH
16472: CALL_OW 50
16476: GO 16490
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
16478: CALL_OW 45
16482: PPUSH
16483: LD_INT 1
16485: PPUSH
16486: CALL_OW 51
// end ;
16490: GO 16364
16492: POP
16493: POP
// end ;
16494: PPOPN 2
16496: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
16497: LD_EXP 24
16501: PUSH
16502: LD_EXP 70
16506: AND
16507: IFFALSE 16729
16509: GO 16511
16511: DISABLE
16512: LD_INT 0
16514: PPUSH
16515: PPUSH
16516: PPUSH
16517: PPUSH
16518: PPUSH
16519: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16520: LD_ADDR_VAR 0 6
16524: PUSH
16525: LD_INT 22
16527: PUSH
16528: LD_OWVAR 2
16532: PUSH
16533: EMPTY
16534: LIST
16535: LIST
16536: PUSH
16537: LD_INT 21
16539: PUSH
16540: LD_INT 1
16542: PUSH
16543: EMPTY
16544: LIST
16545: LIST
16546: PUSH
16547: LD_INT 3
16549: PUSH
16550: LD_INT 23
16552: PUSH
16553: LD_INT 0
16555: PUSH
16556: EMPTY
16557: LIST
16558: LIST
16559: PUSH
16560: EMPTY
16561: LIST
16562: LIST
16563: PUSH
16564: EMPTY
16565: LIST
16566: LIST
16567: LIST
16568: PPUSH
16569: CALL_OW 69
16573: ST_TO_ADDR
// if not tmp then
16574: LD_VAR 0 6
16578: NOT
16579: IFFALSE 16583
// exit ;
16581: GO 16729
// s1 := rand ( 1 , 4 ) ;
16583: LD_ADDR_VAR 0 2
16587: PUSH
16588: LD_INT 1
16590: PPUSH
16591: LD_INT 4
16593: PPUSH
16594: CALL_OW 12
16598: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
16599: LD_ADDR_VAR 0 4
16603: PUSH
16604: LD_VAR 0 6
16608: PUSH
16609: LD_INT 1
16611: ARRAY
16612: PPUSH
16613: LD_VAR 0 2
16617: PPUSH
16618: CALL_OW 259
16622: ST_TO_ADDR
// if s1 = 1 then
16623: LD_VAR 0 2
16627: PUSH
16628: LD_INT 1
16630: EQUAL
16631: IFFALSE 16651
// s2 := rand ( 2 , 4 ) else
16633: LD_ADDR_VAR 0 3
16637: PUSH
16638: LD_INT 2
16640: PPUSH
16641: LD_INT 4
16643: PPUSH
16644: CALL_OW 12
16648: ST_TO_ADDR
16649: GO 16659
// s2 := 1 ;
16651: LD_ADDR_VAR 0 3
16655: PUSH
16656: LD_INT 1
16658: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
16659: LD_ADDR_VAR 0 5
16663: PUSH
16664: LD_VAR 0 6
16668: PUSH
16669: LD_INT 1
16671: ARRAY
16672: PPUSH
16673: LD_VAR 0 3
16677: PPUSH
16678: CALL_OW 259
16682: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
16683: LD_VAR 0 6
16687: PUSH
16688: LD_INT 1
16690: ARRAY
16691: PPUSH
16692: LD_VAR 0 2
16696: PPUSH
16697: LD_VAR 0 5
16701: PPUSH
16702: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
16706: LD_VAR 0 6
16710: PUSH
16711: LD_INT 1
16713: ARRAY
16714: PPUSH
16715: LD_VAR 0 3
16719: PPUSH
16720: LD_VAR 0 4
16724: PPUSH
16725: CALL_OW 237
// end ;
16729: PPOPN 6
16731: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
16732: LD_EXP 24
16736: PUSH
16737: LD_EXP 71
16741: AND
16742: IFFALSE 16821
16744: GO 16746
16746: DISABLE
16747: LD_INT 0
16749: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
16750: LD_ADDR_VAR 0 1
16754: PUSH
16755: LD_INT 22
16757: PUSH
16758: LD_OWVAR 2
16762: PUSH
16763: EMPTY
16764: LIST
16765: LIST
16766: PUSH
16767: LD_INT 30
16769: PUSH
16770: LD_INT 3
16772: PUSH
16773: EMPTY
16774: LIST
16775: LIST
16776: PUSH
16777: EMPTY
16778: LIST
16779: LIST
16780: PPUSH
16781: CALL_OW 69
16785: ST_TO_ADDR
// if not tmp then
16786: LD_VAR 0 1
16790: NOT
16791: IFFALSE 16795
// exit ;
16793: GO 16821
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16795: LD_VAR 0 1
16799: PUSH
16800: LD_INT 1
16802: PPUSH
16803: LD_VAR 0 1
16807: PPUSH
16808: CALL_OW 12
16812: ARRAY
16813: PPUSH
16814: LD_INT 1
16816: PPUSH
16817: CALL_OW 234
// end ;
16821: PPOPN 1
16823: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
16824: LD_EXP 24
16828: PUSH
16829: LD_EXP 72
16833: AND
16834: IFFALSE 16946
16836: GO 16838
16838: DISABLE
16839: LD_INT 0
16841: PPUSH
16842: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
16843: LD_ADDR_VAR 0 2
16847: PUSH
16848: LD_INT 22
16850: PUSH
16851: LD_OWVAR 2
16855: PUSH
16856: EMPTY
16857: LIST
16858: LIST
16859: PUSH
16860: LD_INT 2
16862: PUSH
16863: LD_INT 30
16865: PUSH
16866: LD_INT 27
16868: PUSH
16869: EMPTY
16870: LIST
16871: LIST
16872: PUSH
16873: LD_INT 30
16875: PUSH
16876: LD_INT 26
16878: PUSH
16879: EMPTY
16880: LIST
16881: LIST
16882: PUSH
16883: LD_INT 30
16885: PUSH
16886: LD_INT 28
16888: PUSH
16889: EMPTY
16890: LIST
16891: LIST
16892: PUSH
16893: EMPTY
16894: LIST
16895: LIST
16896: LIST
16897: LIST
16898: PUSH
16899: EMPTY
16900: LIST
16901: LIST
16902: PPUSH
16903: CALL_OW 69
16907: ST_TO_ADDR
// if not tmp then
16908: LD_VAR 0 2
16912: NOT
16913: IFFALSE 16917
// exit ;
16915: GO 16946
// for i in tmp do
16917: LD_ADDR_VAR 0 1
16921: PUSH
16922: LD_VAR 0 2
16926: PUSH
16927: FOR_IN
16928: IFFALSE 16944
// SetLives ( i , 1 ) ;
16930: LD_VAR 0 1
16934: PPUSH
16935: LD_INT 1
16937: PPUSH
16938: CALL_OW 234
16942: GO 16927
16944: POP
16945: POP
// end ;
16946: PPOPN 2
16948: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
16949: LD_EXP 24
16953: PUSH
16954: LD_EXP 73
16958: AND
16959: IFFALSE 17246
16961: GO 16963
16963: DISABLE
16964: LD_INT 0
16966: PPUSH
16967: PPUSH
16968: PPUSH
// begin i := rand ( 1 , 7 ) ;
16969: LD_ADDR_VAR 0 1
16973: PUSH
16974: LD_INT 1
16976: PPUSH
16977: LD_INT 7
16979: PPUSH
16980: CALL_OW 12
16984: ST_TO_ADDR
// case i of 1 :
16985: LD_VAR 0 1
16989: PUSH
16990: LD_INT 1
16992: DOUBLE
16993: EQUAL
16994: IFTRUE 16998
16996: GO 17008
16998: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
16999: LD_STRING earthquake(getX(game), 0, 32)
17001: PPUSH
17002: CALL_OW 559
17006: GO 17246
17008: LD_INT 2
17010: DOUBLE
17011: EQUAL
17012: IFTRUE 17016
17014: GO 17030
17016: POP
// begin ToLua ( displayStucuk(); ) ;
17017: LD_STRING displayStucuk();
17019: PPUSH
17020: CALL_OW 559
// ResetFog ;
17024: CALL_OW 335
// end ; 3 :
17028: GO 17246
17030: LD_INT 3
17032: DOUBLE
17033: EQUAL
17034: IFTRUE 17038
17036: GO 17142
17038: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17039: LD_ADDR_VAR 0 2
17043: PUSH
17044: LD_INT 22
17046: PUSH
17047: LD_OWVAR 2
17051: PUSH
17052: EMPTY
17053: LIST
17054: LIST
17055: PUSH
17056: LD_INT 25
17058: PUSH
17059: LD_INT 1
17061: PUSH
17062: EMPTY
17063: LIST
17064: LIST
17065: PUSH
17066: EMPTY
17067: LIST
17068: LIST
17069: PPUSH
17070: CALL_OW 69
17074: ST_TO_ADDR
// if not tmp then
17075: LD_VAR 0 2
17079: NOT
17080: IFFALSE 17084
// exit ;
17082: GO 17246
// un := tmp [ rand ( 1 , tmp ) ] ;
17084: LD_ADDR_VAR 0 3
17088: PUSH
17089: LD_VAR 0 2
17093: PUSH
17094: LD_INT 1
17096: PPUSH
17097: LD_VAR 0 2
17101: PPUSH
17102: CALL_OW 12
17106: ARRAY
17107: ST_TO_ADDR
// if Crawls ( un ) then
17108: LD_VAR 0 3
17112: PPUSH
17113: CALL_OW 318
17117: IFFALSE 17128
// ComWalk ( un ) ;
17119: LD_VAR 0 3
17123: PPUSH
17124: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17128: LD_VAR 0 3
17132: PPUSH
17133: LD_INT 8
17135: PPUSH
17136: CALL_OW 336
// end ; 4 :
17140: GO 17246
17142: LD_INT 4
17144: DOUBLE
17145: EQUAL
17146: IFTRUE 17150
17148: GO 17224
17150: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17151: LD_ADDR_VAR 0 2
17155: PUSH
17156: LD_INT 22
17158: PUSH
17159: LD_OWVAR 2
17163: PUSH
17164: EMPTY
17165: LIST
17166: LIST
17167: PUSH
17168: LD_INT 30
17170: PUSH
17171: LD_INT 29
17173: PUSH
17174: EMPTY
17175: LIST
17176: LIST
17177: PUSH
17178: EMPTY
17179: LIST
17180: LIST
17181: PPUSH
17182: CALL_OW 69
17186: ST_TO_ADDR
// if not tmp then
17187: LD_VAR 0 2
17191: NOT
17192: IFFALSE 17196
// exit ;
17194: GO 17246
// CenterNowOnUnits ( tmp [ 1 ] ) ;
17196: LD_VAR 0 2
17200: PUSH
17201: LD_INT 1
17203: ARRAY
17204: PPUSH
17205: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
17209: LD_VAR 0 2
17213: PUSH
17214: LD_INT 1
17216: ARRAY
17217: PPUSH
17218: CALL_OW 65
// end ; 5 .. 7 :
17222: GO 17246
17224: LD_INT 5
17226: DOUBLE
17227: GREATEREQUAL
17228: IFFALSE 17236
17230: LD_INT 7
17232: DOUBLE
17233: LESSEQUAL
17234: IFTRUE 17238
17236: GO 17245
17238: POP
// StreamSibBomb ; end ;
17239: CALL 13483 0 0
17243: GO 17246
17245: POP
// end ;
17246: PPOPN 3
17248: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
17249: LD_EXP 24
17253: PUSH
17254: LD_EXP 74
17258: AND
17259: IFFALSE 17415
17261: GO 17263
17263: DISABLE
17264: LD_INT 0
17266: PPUSH
17267: PPUSH
17268: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
17269: LD_ADDR_VAR 0 2
17273: PUSH
17274: LD_INT 81
17276: PUSH
17277: LD_OWVAR 2
17281: PUSH
17282: EMPTY
17283: LIST
17284: LIST
17285: PUSH
17286: LD_INT 2
17288: PUSH
17289: LD_INT 21
17291: PUSH
17292: LD_INT 1
17294: PUSH
17295: EMPTY
17296: LIST
17297: LIST
17298: PUSH
17299: LD_INT 21
17301: PUSH
17302: LD_INT 2
17304: PUSH
17305: EMPTY
17306: LIST
17307: LIST
17308: PUSH
17309: EMPTY
17310: LIST
17311: LIST
17312: LIST
17313: PUSH
17314: EMPTY
17315: LIST
17316: LIST
17317: PPUSH
17318: CALL_OW 69
17322: ST_TO_ADDR
// if not tmp then
17323: LD_VAR 0 2
17327: NOT
17328: IFFALSE 17332
// exit ;
17330: GO 17415
// p := 0 ;
17332: LD_ADDR_VAR 0 3
17336: PUSH
17337: LD_INT 0
17339: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17340: LD_INT 35
17342: PPUSH
17343: CALL_OW 67
// p := p + 1 ;
17347: LD_ADDR_VAR 0 3
17351: PUSH
17352: LD_VAR 0 3
17356: PUSH
17357: LD_INT 1
17359: PLUS
17360: ST_TO_ADDR
// for i in tmp do
17361: LD_ADDR_VAR 0 1
17365: PUSH
17366: LD_VAR 0 2
17370: PUSH
17371: FOR_IN
17372: IFFALSE 17403
// if GetLives ( i ) < 1000 then
17374: LD_VAR 0 1
17378: PPUSH
17379: CALL_OW 256
17383: PUSH
17384: LD_INT 1000
17386: LESS
17387: IFFALSE 17401
// SetLives ( i , 1000 ) ;
17389: LD_VAR 0 1
17393: PPUSH
17394: LD_INT 1000
17396: PPUSH
17397: CALL_OW 234
17401: GO 17371
17403: POP
17404: POP
// until p > 20 ;
17405: LD_VAR 0 3
17409: PUSH
17410: LD_INT 20
17412: GREATER
17413: IFFALSE 17340
// end ;
17415: PPOPN 3
17417: END
// every 0 0$1 trigger StreamModeActive and sTime do
17418: LD_EXP 24
17422: PUSH
17423: LD_EXP 75
17427: AND
17428: IFFALSE 17463
17430: GO 17432
17432: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
17433: LD_INT 28
17435: PPUSH
17436: LD_OWVAR 2
17440: PPUSH
17441: LD_INT 2
17443: PPUSH
17444: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
17448: LD_INT 30
17450: PPUSH
17451: LD_OWVAR 2
17455: PPUSH
17456: LD_INT 2
17458: PPUSH
17459: CALL_OW 322
// end ;
17463: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
17464: LD_EXP 24
17468: PUSH
17469: LD_EXP 76
17473: AND
17474: IFFALSE 17595
17476: GO 17478
17478: DISABLE
17479: LD_INT 0
17481: PPUSH
17482: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17483: LD_ADDR_VAR 0 2
17487: PUSH
17488: LD_INT 22
17490: PUSH
17491: LD_OWVAR 2
17495: PUSH
17496: EMPTY
17497: LIST
17498: LIST
17499: PUSH
17500: LD_INT 21
17502: PUSH
17503: LD_INT 1
17505: PUSH
17506: EMPTY
17507: LIST
17508: LIST
17509: PUSH
17510: LD_INT 3
17512: PUSH
17513: LD_INT 23
17515: PUSH
17516: LD_INT 0
17518: PUSH
17519: EMPTY
17520: LIST
17521: LIST
17522: PUSH
17523: EMPTY
17524: LIST
17525: LIST
17526: PUSH
17527: EMPTY
17528: LIST
17529: LIST
17530: LIST
17531: PPUSH
17532: CALL_OW 69
17536: ST_TO_ADDR
// if not tmp then
17537: LD_VAR 0 2
17541: NOT
17542: IFFALSE 17546
// exit ;
17544: GO 17595
// for i in tmp do
17546: LD_ADDR_VAR 0 1
17550: PUSH
17551: LD_VAR 0 2
17555: PUSH
17556: FOR_IN
17557: IFFALSE 17593
// begin if Crawls ( i ) then
17559: LD_VAR 0 1
17563: PPUSH
17564: CALL_OW 318
17568: IFFALSE 17579
// ComWalk ( i ) ;
17570: LD_VAR 0 1
17574: PPUSH
17575: CALL_OW 138
// SetClass ( i , 2 ) ;
17579: LD_VAR 0 1
17583: PPUSH
17584: LD_INT 2
17586: PPUSH
17587: CALL_OW 336
// end ;
17591: GO 17556
17593: POP
17594: POP
// end ;
17595: PPOPN 2
17597: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
17598: LD_EXP 24
17602: PUSH
17603: LD_EXP 77
17607: AND
17608: IFFALSE 17896
17610: GO 17612
17612: DISABLE
17613: LD_INT 0
17615: PPUSH
17616: PPUSH
17617: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
17618: LD_OWVAR 2
17622: PPUSH
17623: LD_INT 9
17625: PPUSH
17626: LD_INT 1
17628: PPUSH
17629: LD_INT 1
17631: PPUSH
17632: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
17636: LD_INT 9
17638: PPUSH
17639: LD_OWVAR 2
17643: PPUSH
17644: CALL_OW 343
// uc_side := 9 ;
17648: LD_ADDR_OWVAR 20
17652: PUSH
17653: LD_INT 9
17655: ST_TO_ADDR
// uc_nation := 2 ;
17656: LD_ADDR_OWVAR 21
17660: PUSH
17661: LD_INT 2
17663: ST_TO_ADDR
// hc_name := Dark Warrior ;
17664: LD_ADDR_OWVAR 26
17668: PUSH
17669: LD_STRING Dark Warrior
17671: ST_TO_ADDR
// hc_gallery :=  ;
17672: LD_ADDR_OWVAR 33
17676: PUSH
17677: LD_STRING 
17679: ST_TO_ADDR
// hc_noskilllimit := true ;
17680: LD_ADDR_OWVAR 76
17684: PUSH
17685: LD_INT 1
17687: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
17688: LD_ADDR_OWVAR 31
17692: PUSH
17693: LD_INT 30
17695: PUSH
17696: LD_INT 30
17698: PUSH
17699: LD_INT 30
17701: PUSH
17702: LD_INT 30
17704: PUSH
17705: EMPTY
17706: LIST
17707: LIST
17708: LIST
17709: LIST
17710: ST_TO_ADDR
// un := CreateHuman ;
17711: LD_ADDR_VAR 0 3
17715: PUSH
17716: CALL_OW 44
17720: ST_TO_ADDR
// hc_noskilllimit := false ;
17721: LD_ADDR_OWVAR 76
17725: PUSH
17726: LD_INT 0
17728: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17729: LD_VAR 0 3
17733: PPUSH
17734: LD_INT 1
17736: PPUSH
17737: CALL_OW 51
// ToLua ( playRanger() ) ;
17741: LD_STRING playRanger()
17743: PPUSH
17744: CALL_OW 559
// p := 0 ;
17748: LD_ADDR_VAR 0 2
17752: PUSH
17753: LD_INT 0
17755: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17756: LD_INT 35
17758: PPUSH
17759: CALL_OW 67
// p := p + 1 ;
17763: LD_ADDR_VAR 0 2
17767: PUSH
17768: LD_VAR 0 2
17772: PUSH
17773: LD_INT 1
17775: PLUS
17776: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
17777: LD_VAR 0 3
17781: PPUSH
17782: CALL_OW 256
17786: PUSH
17787: LD_INT 1000
17789: LESS
17790: IFFALSE 17804
// SetLives ( un , 1000 ) ;
17792: LD_VAR 0 3
17796: PPUSH
17797: LD_INT 1000
17799: PPUSH
17800: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
17804: LD_VAR 0 3
17808: PPUSH
17809: LD_INT 81
17811: PUSH
17812: LD_OWVAR 2
17816: PUSH
17817: EMPTY
17818: LIST
17819: LIST
17820: PUSH
17821: LD_INT 91
17823: PUSH
17824: LD_VAR 0 3
17828: PUSH
17829: LD_INT 30
17831: PUSH
17832: EMPTY
17833: LIST
17834: LIST
17835: LIST
17836: PUSH
17837: EMPTY
17838: LIST
17839: LIST
17840: PPUSH
17841: CALL_OW 69
17845: PPUSH
17846: LD_VAR 0 3
17850: PPUSH
17851: CALL_OW 74
17855: PPUSH
17856: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
17860: LD_VAR 0 2
17864: PUSH
17865: LD_INT 80
17867: GREATER
17868: PUSH
17869: LD_VAR 0 3
17873: PPUSH
17874: CALL_OW 301
17878: OR
17879: IFFALSE 17756
// if un then
17881: LD_VAR 0 3
17885: IFFALSE 17896
// RemoveUnit ( un ) ;
17887: LD_VAR 0 3
17891: PPUSH
17892: CALL_OW 64
// end ;
17896: PPOPN 3
17898: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
17899: LD_EXP 78
17903: IFFALSE 18019
17905: GO 17907
17907: DISABLE
17908: LD_INT 0
17910: PPUSH
17911: PPUSH
17912: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17913: LD_ADDR_VAR 0 2
17917: PUSH
17918: LD_INT 81
17920: PUSH
17921: LD_OWVAR 2
17925: PUSH
17926: EMPTY
17927: LIST
17928: LIST
17929: PUSH
17930: LD_INT 21
17932: PUSH
17933: LD_INT 1
17935: PUSH
17936: EMPTY
17937: LIST
17938: LIST
17939: PUSH
17940: EMPTY
17941: LIST
17942: LIST
17943: PPUSH
17944: CALL_OW 69
17948: ST_TO_ADDR
// ToLua ( playComputer() ) ;
17949: LD_STRING playComputer()
17951: PPUSH
17952: CALL_OW 559
// if not tmp then
17956: LD_VAR 0 2
17960: NOT
17961: IFFALSE 17965
// exit ;
17963: GO 18019
// for i in tmp do
17965: LD_ADDR_VAR 0 1
17969: PUSH
17970: LD_VAR 0 2
17974: PUSH
17975: FOR_IN
17976: IFFALSE 18017
// for j := 1 to 4 do
17978: LD_ADDR_VAR 0 3
17982: PUSH
17983: DOUBLE
17984: LD_INT 1
17986: DEC
17987: ST_TO_ADDR
17988: LD_INT 4
17990: PUSH
17991: FOR_TO
17992: IFFALSE 18013
// SetSkill ( i , j , 10 ) ;
17994: LD_VAR 0 1
17998: PPUSH
17999: LD_VAR 0 3
18003: PPUSH
18004: LD_INT 10
18006: PPUSH
18007: CALL_OW 237
18011: GO 17991
18013: POP
18014: POP
18015: GO 17975
18017: POP
18018: POP
// end ;
18019: PPOPN 3
18021: END
// every 0 0$1 trigger s30 do var i , tmp ;
18022: LD_EXP 79
18026: IFFALSE 18095
18028: GO 18030
18030: DISABLE
18031: LD_INT 0
18033: PPUSH
18034: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18035: LD_ADDR_VAR 0 2
18039: PUSH
18040: LD_INT 22
18042: PUSH
18043: LD_OWVAR 2
18047: PUSH
18048: EMPTY
18049: LIST
18050: LIST
18051: PPUSH
18052: CALL_OW 69
18056: ST_TO_ADDR
// if not tmp then
18057: LD_VAR 0 2
18061: NOT
18062: IFFALSE 18066
// exit ;
18064: GO 18095
// for i in tmp do
18066: LD_ADDR_VAR 0 1
18070: PUSH
18071: LD_VAR 0 2
18075: PUSH
18076: FOR_IN
18077: IFFALSE 18093
// SetLives ( i , 300 ) ;
18079: LD_VAR 0 1
18083: PPUSH
18084: LD_INT 300
18086: PPUSH
18087: CALL_OW 234
18091: GO 18076
18093: POP
18094: POP
// end ;
18095: PPOPN 2
18097: END
// every 0 0$1 trigger s60 do var i , tmp ;
18098: LD_EXP 80
18102: IFFALSE 18171
18104: GO 18106
18106: DISABLE
18107: LD_INT 0
18109: PPUSH
18110: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18111: LD_ADDR_VAR 0 2
18115: PUSH
18116: LD_INT 22
18118: PUSH
18119: LD_OWVAR 2
18123: PUSH
18124: EMPTY
18125: LIST
18126: LIST
18127: PPUSH
18128: CALL_OW 69
18132: ST_TO_ADDR
// if not tmp then
18133: LD_VAR 0 2
18137: NOT
18138: IFFALSE 18142
// exit ;
18140: GO 18171
// for i in tmp do
18142: LD_ADDR_VAR 0 1
18146: PUSH
18147: LD_VAR 0 2
18151: PUSH
18152: FOR_IN
18153: IFFALSE 18169
// SetLives ( i , 600 ) ;
18155: LD_VAR 0 1
18159: PPUSH
18160: LD_INT 600
18162: PPUSH
18163: CALL_OW 234
18167: GO 18152
18169: POP
18170: POP
// end ;
18171: PPOPN 2
18173: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18174: LD_INT 0
18176: PPUSH
// case cmd of 301 :
18177: LD_VAR 0 1
18181: PUSH
18182: LD_INT 301
18184: DOUBLE
18185: EQUAL
18186: IFTRUE 18190
18188: GO 18222
18190: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
18191: LD_VAR 0 6
18195: PPUSH
18196: LD_VAR 0 7
18200: PPUSH
18201: LD_VAR 0 8
18205: PPUSH
18206: LD_VAR 0 4
18210: PPUSH
18211: LD_VAR 0 5
18215: PPUSH
18216: CALL 19423 0 5
18220: GO 18343
18222: LD_INT 302
18224: DOUBLE
18225: EQUAL
18226: IFTRUE 18230
18228: GO 18267
18230: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
18231: LD_VAR 0 6
18235: PPUSH
18236: LD_VAR 0 7
18240: PPUSH
18241: LD_VAR 0 8
18245: PPUSH
18246: LD_VAR 0 9
18250: PPUSH
18251: LD_VAR 0 4
18255: PPUSH
18256: LD_VAR 0 5
18260: PPUSH
18261: CALL 19514 0 6
18265: GO 18343
18267: LD_INT 303
18269: DOUBLE
18270: EQUAL
18271: IFTRUE 18275
18273: GO 18312
18275: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
18276: LD_VAR 0 6
18280: PPUSH
18281: LD_VAR 0 7
18285: PPUSH
18286: LD_VAR 0 8
18290: PPUSH
18291: LD_VAR 0 9
18295: PPUSH
18296: LD_VAR 0 4
18300: PPUSH
18301: LD_VAR 0 5
18305: PPUSH
18306: CALL 18348 0 6
18310: GO 18343
18312: LD_INT 304
18314: DOUBLE
18315: EQUAL
18316: IFTRUE 18320
18318: GO 18342
18320: POP
// hHackTeleport ( unit , x , y ) ; end ;
18321: LD_VAR 0 2
18325: PPUSH
18326: LD_VAR 0 4
18330: PPUSH
18331: LD_VAR 0 5
18335: PPUSH
18336: CALL 20107 0 3
18340: GO 18343
18342: POP
// end ;
18343: LD_VAR 0 12
18347: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
18348: LD_INT 0
18350: PPUSH
18351: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
18352: LD_VAR 0 1
18356: PUSH
18357: LD_INT 1
18359: LESS
18360: PUSH
18361: LD_VAR 0 1
18365: PUSH
18366: LD_INT 3
18368: GREATER
18369: OR
18370: PUSH
18371: LD_VAR 0 5
18375: PPUSH
18376: LD_VAR 0 6
18380: PPUSH
18381: CALL_OW 428
18385: OR
18386: IFFALSE 18390
// exit ;
18388: GO 19110
// uc_side := your_side ;
18390: LD_ADDR_OWVAR 20
18394: PUSH
18395: LD_OWVAR 2
18399: ST_TO_ADDR
// uc_nation := nation ;
18400: LD_ADDR_OWVAR 21
18404: PUSH
18405: LD_VAR 0 1
18409: ST_TO_ADDR
// bc_level = 1 ;
18410: LD_ADDR_OWVAR 43
18414: PUSH
18415: LD_INT 1
18417: ST_TO_ADDR
// case btype of 1 :
18418: LD_VAR 0 2
18422: PUSH
18423: LD_INT 1
18425: DOUBLE
18426: EQUAL
18427: IFTRUE 18431
18429: GO 18442
18431: POP
// bc_type := b_depot ; 2 :
18432: LD_ADDR_OWVAR 42
18436: PUSH
18437: LD_INT 0
18439: ST_TO_ADDR
18440: GO 19054
18442: LD_INT 2
18444: DOUBLE
18445: EQUAL
18446: IFTRUE 18450
18448: GO 18461
18450: POP
// bc_type := b_warehouse ; 3 :
18451: LD_ADDR_OWVAR 42
18455: PUSH
18456: LD_INT 1
18458: ST_TO_ADDR
18459: GO 19054
18461: LD_INT 3
18463: DOUBLE
18464: EQUAL
18465: IFTRUE 18469
18467: GO 18480
18469: POP
// bc_type := b_lab ; 4 .. 9 :
18470: LD_ADDR_OWVAR 42
18474: PUSH
18475: LD_INT 6
18477: ST_TO_ADDR
18478: GO 19054
18480: LD_INT 4
18482: DOUBLE
18483: GREATEREQUAL
18484: IFFALSE 18492
18486: LD_INT 9
18488: DOUBLE
18489: LESSEQUAL
18490: IFTRUE 18494
18492: GO 18546
18494: POP
// begin bc_type := b_lab_half ;
18495: LD_ADDR_OWVAR 42
18499: PUSH
18500: LD_INT 7
18502: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
18503: LD_ADDR_OWVAR 44
18507: PUSH
18508: LD_INT 10
18510: PUSH
18511: LD_INT 11
18513: PUSH
18514: LD_INT 12
18516: PUSH
18517: LD_INT 15
18519: PUSH
18520: LD_INT 14
18522: PUSH
18523: LD_INT 13
18525: PUSH
18526: EMPTY
18527: LIST
18528: LIST
18529: LIST
18530: LIST
18531: LIST
18532: LIST
18533: PUSH
18534: LD_VAR 0 2
18538: PUSH
18539: LD_INT 3
18541: MINUS
18542: ARRAY
18543: ST_TO_ADDR
// end ; 10 .. 13 :
18544: GO 19054
18546: LD_INT 10
18548: DOUBLE
18549: GREATEREQUAL
18550: IFFALSE 18558
18552: LD_INT 13
18554: DOUBLE
18555: LESSEQUAL
18556: IFTRUE 18560
18558: GO 18637
18560: POP
// begin bc_type := b_lab_full ;
18561: LD_ADDR_OWVAR 42
18565: PUSH
18566: LD_INT 8
18568: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
18569: LD_ADDR_OWVAR 44
18573: PUSH
18574: LD_INT 10
18576: PUSH
18577: LD_INT 12
18579: PUSH
18580: LD_INT 14
18582: PUSH
18583: LD_INT 13
18585: PUSH
18586: EMPTY
18587: LIST
18588: LIST
18589: LIST
18590: LIST
18591: PUSH
18592: LD_VAR 0 2
18596: PUSH
18597: LD_INT 9
18599: MINUS
18600: ARRAY
18601: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
18602: LD_ADDR_OWVAR 45
18606: PUSH
18607: LD_INT 11
18609: PUSH
18610: LD_INT 15
18612: PUSH
18613: LD_INT 12
18615: PUSH
18616: LD_INT 15
18618: PUSH
18619: EMPTY
18620: LIST
18621: LIST
18622: LIST
18623: LIST
18624: PUSH
18625: LD_VAR 0 2
18629: PUSH
18630: LD_INT 9
18632: MINUS
18633: ARRAY
18634: ST_TO_ADDR
// end ; 14 :
18635: GO 19054
18637: LD_INT 14
18639: DOUBLE
18640: EQUAL
18641: IFTRUE 18645
18643: GO 18656
18645: POP
// bc_type := b_workshop ; 15 :
18646: LD_ADDR_OWVAR 42
18650: PUSH
18651: LD_INT 2
18653: ST_TO_ADDR
18654: GO 19054
18656: LD_INT 15
18658: DOUBLE
18659: EQUAL
18660: IFTRUE 18664
18662: GO 18675
18664: POP
// bc_type := b_factory ; 16 :
18665: LD_ADDR_OWVAR 42
18669: PUSH
18670: LD_INT 3
18672: ST_TO_ADDR
18673: GO 19054
18675: LD_INT 16
18677: DOUBLE
18678: EQUAL
18679: IFTRUE 18683
18681: GO 18694
18683: POP
// bc_type := b_ext_gun ; 17 :
18684: LD_ADDR_OWVAR 42
18688: PUSH
18689: LD_INT 17
18691: ST_TO_ADDR
18692: GO 19054
18694: LD_INT 17
18696: DOUBLE
18697: EQUAL
18698: IFTRUE 18702
18700: GO 18730
18702: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
18703: LD_ADDR_OWVAR 42
18707: PUSH
18708: LD_INT 19
18710: PUSH
18711: LD_INT 23
18713: PUSH
18714: LD_INT 19
18716: PUSH
18717: EMPTY
18718: LIST
18719: LIST
18720: LIST
18721: PUSH
18722: LD_VAR 0 1
18726: ARRAY
18727: ST_TO_ADDR
18728: GO 19054
18730: LD_INT 18
18732: DOUBLE
18733: EQUAL
18734: IFTRUE 18738
18736: GO 18749
18738: POP
// bc_type := b_ext_radar ; 19 :
18739: LD_ADDR_OWVAR 42
18743: PUSH
18744: LD_INT 20
18746: ST_TO_ADDR
18747: GO 19054
18749: LD_INT 19
18751: DOUBLE
18752: EQUAL
18753: IFTRUE 18757
18755: GO 18768
18757: POP
// bc_type := b_ext_radio ; 20 :
18758: LD_ADDR_OWVAR 42
18762: PUSH
18763: LD_INT 22
18765: ST_TO_ADDR
18766: GO 19054
18768: LD_INT 20
18770: DOUBLE
18771: EQUAL
18772: IFTRUE 18776
18774: GO 18787
18776: POP
// bc_type := b_ext_siberium ; 21 :
18777: LD_ADDR_OWVAR 42
18781: PUSH
18782: LD_INT 21
18784: ST_TO_ADDR
18785: GO 19054
18787: LD_INT 21
18789: DOUBLE
18790: EQUAL
18791: IFTRUE 18795
18793: GO 18806
18795: POP
// bc_type := b_ext_computer ; 22 :
18796: LD_ADDR_OWVAR 42
18800: PUSH
18801: LD_INT 24
18803: ST_TO_ADDR
18804: GO 19054
18806: LD_INT 22
18808: DOUBLE
18809: EQUAL
18810: IFTRUE 18814
18812: GO 18825
18814: POP
// bc_type := b_ext_track ; 23 :
18815: LD_ADDR_OWVAR 42
18819: PUSH
18820: LD_INT 16
18822: ST_TO_ADDR
18823: GO 19054
18825: LD_INT 23
18827: DOUBLE
18828: EQUAL
18829: IFTRUE 18833
18831: GO 18844
18833: POP
// bc_type := b_ext_laser ; 24 :
18834: LD_ADDR_OWVAR 42
18838: PUSH
18839: LD_INT 25
18841: ST_TO_ADDR
18842: GO 19054
18844: LD_INT 24
18846: DOUBLE
18847: EQUAL
18848: IFTRUE 18852
18850: GO 18863
18852: POP
// bc_type := b_control_tower ; 25 :
18853: LD_ADDR_OWVAR 42
18857: PUSH
18858: LD_INT 36
18860: ST_TO_ADDR
18861: GO 19054
18863: LD_INT 25
18865: DOUBLE
18866: EQUAL
18867: IFTRUE 18871
18869: GO 18882
18871: POP
// bc_type := b_breastwork ; 26 :
18872: LD_ADDR_OWVAR 42
18876: PUSH
18877: LD_INT 31
18879: ST_TO_ADDR
18880: GO 19054
18882: LD_INT 26
18884: DOUBLE
18885: EQUAL
18886: IFTRUE 18890
18888: GO 18901
18890: POP
// bc_type := b_bunker ; 27 :
18891: LD_ADDR_OWVAR 42
18895: PUSH
18896: LD_INT 32
18898: ST_TO_ADDR
18899: GO 19054
18901: LD_INT 27
18903: DOUBLE
18904: EQUAL
18905: IFTRUE 18909
18907: GO 18920
18909: POP
// bc_type := b_turret ; 28 :
18910: LD_ADDR_OWVAR 42
18914: PUSH
18915: LD_INT 33
18917: ST_TO_ADDR
18918: GO 19054
18920: LD_INT 28
18922: DOUBLE
18923: EQUAL
18924: IFTRUE 18928
18926: GO 18939
18928: POP
// bc_type := b_armoury ; 29 :
18929: LD_ADDR_OWVAR 42
18933: PUSH
18934: LD_INT 4
18936: ST_TO_ADDR
18937: GO 19054
18939: LD_INT 29
18941: DOUBLE
18942: EQUAL
18943: IFTRUE 18947
18945: GO 18958
18947: POP
// bc_type := b_barracks ; 30 :
18948: LD_ADDR_OWVAR 42
18952: PUSH
18953: LD_INT 5
18955: ST_TO_ADDR
18956: GO 19054
18958: LD_INT 30
18960: DOUBLE
18961: EQUAL
18962: IFTRUE 18966
18964: GO 18977
18966: POP
// bc_type := b_solar_power ; 31 :
18967: LD_ADDR_OWVAR 42
18971: PUSH
18972: LD_INT 27
18974: ST_TO_ADDR
18975: GO 19054
18977: LD_INT 31
18979: DOUBLE
18980: EQUAL
18981: IFTRUE 18985
18983: GO 18996
18985: POP
// bc_type := b_oil_power ; 32 :
18986: LD_ADDR_OWVAR 42
18990: PUSH
18991: LD_INT 26
18993: ST_TO_ADDR
18994: GO 19054
18996: LD_INT 32
18998: DOUBLE
18999: EQUAL
19000: IFTRUE 19004
19002: GO 19015
19004: POP
// bc_type := b_siberite_power ; 33 :
19005: LD_ADDR_OWVAR 42
19009: PUSH
19010: LD_INT 28
19012: ST_TO_ADDR
19013: GO 19054
19015: LD_INT 33
19017: DOUBLE
19018: EQUAL
19019: IFTRUE 19023
19021: GO 19034
19023: POP
// bc_type := b_oil_mine ; 34 :
19024: LD_ADDR_OWVAR 42
19028: PUSH
19029: LD_INT 29
19031: ST_TO_ADDR
19032: GO 19054
19034: LD_INT 34
19036: DOUBLE
19037: EQUAL
19038: IFTRUE 19042
19040: GO 19053
19042: POP
// bc_type := b_siberite_mine ; end ;
19043: LD_ADDR_OWVAR 42
19047: PUSH
19048: LD_INT 30
19050: ST_TO_ADDR
19051: GO 19054
19053: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
19054: LD_ADDR_VAR 0 8
19058: PUSH
19059: LD_VAR 0 5
19063: PPUSH
19064: LD_VAR 0 6
19068: PPUSH
19069: LD_VAR 0 3
19073: PPUSH
19074: CALL_OW 47
19078: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
19079: LD_OWVAR 42
19083: PUSH
19084: LD_INT 32
19086: PUSH
19087: LD_INT 33
19089: PUSH
19090: EMPTY
19091: LIST
19092: LIST
19093: IN
19094: IFFALSE 19110
// PlaceWeaponTurret ( b , weapon ) ;
19096: LD_VAR 0 8
19100: PPUSH
19101: LD_VAR 0 4
19105: PPUSH
19106: CALL_OW 431
// end ;
19110: LD_VAR 0 7
19114: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
19115: LD_INT 0
19117: PPUSH
19118: PPUSH
19119: PPUSH
19120: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19121: LD_ADDR_VAR 0 4
19125: PUSH
19126: LD_INT 22
19128: PUSH
19129: LD_OWVAR 2
19133: PUSH
19134: EMPTY
19135: LIST
19136: LIST
19137: PUSH
19138: LD_INT 2
19140: PUSH
19141: LD_INT 30
19143: PUSH
19144: LD_INT 0
19146: PUSH
19147: EMPTY
19148: LIST
19149: LIST
19150: PUSH
19151: LD_INT 30
19153: PUSH
19154: LD_INT 1
19156: PUSH
19157: EMPTY
19158: LIST
19159: LIST
19160: PUSH
19161: EMPTY
19162: LIST
19163: LIST
19164: LIST
19165: PUSH
19166: EMPTY
19167: LIST
19168: LIST
19169: PPUSH
19170: CALL_OW 69
19174: ST_TO_ADDR
// if not tmp then
19175: LD_VAR 0 4
19179: NOT
19180: IFFALSE 19184
// exit ;
19182: GO 19243
// for i in tmp do
19184: LD_ADDR_VAR 0 2
19188: PUSH
19189: LD_VAR 0 4
19193: PUSH
19194: FOR_IN
19195: IFFALSE 19241
// for j = 1 to 3 do
19197: LD_ADDR_VAR 0 3
19201: PUSH
19202: DOUBLE
19203: LD_INT 1
19205: DEC
19206: ST_TO_ADDR
19207: LD_INT 3
19209: PUSH
19210: FOR_TO
19211: IFFALSE 19237
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
19213: LD_VAR 0 2
19217: PPUSH
19218: CALL_OW 274
19222: PPUSH
19223: LD_VAR 0 3
19227: PPUSH
19228: LD_INT 99999
19230: PPUSH
19231: CALL_OW 277
19235: GO 19210
19237: POP
19238: POP
19239: GO 19194
19241: POP
19242: POP
// end ;
19243: LD_VAR 0 1
19247: RET
// export function hHackSetLevel10 ; var i , j ; begin
19248: LD_INT 0
19250: PPUSH
19251: PPUSH
19252: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19253: LD_ADDR_VAR 0 2
19257: PUSH
19258: LD_INT 21
19260: PUSH
19261: LD_INT 1
19263: PUSH
19264: EMPTY
19265: LIST
19266: LIST
19267: PPUSH
19268: CALL_OW 69
19272: PUSH
19273: FOR_IN
19274: IFFALSE 19326
// if IsSelected ( i ) then
19276: LD_VAR 0 2
19280: PPUSH
19281: CALL_OW 306
19285: IFFALSE 19324
// begin for j := 1 to 4 do
19287: LD_ADDR_VAR 0 3
19291: PUSH
19292: DOUBLE
19293: LD_INT 1
19295: DEC
19296: ST_TO_ADDR
19297: LD_INT 4
19299: PUSH
19300: FOR_TO
19301: IFFALSE 19322
// SetSkill ( i , j , 10 ) ;
19303: LD_VAR 0 2
19307: PPUSH
19308: LD_VAR 0 3
19312: PPUSH
19313: LD_INT 10
19315: PPUSH
19316: CALL_OW 237
19320: GO 19300
19322: POP
19323: POP
// end ;
19324: GO 19273
19326: POP
19327: POP
// end ;
19328: LD_VAR 0 1
19332: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
19333: LD_INT 0
19335: PPUSH
19336: PPUSH
19337: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
19338: LD_ADDR_VAR 0 2
19342: PUSH
19343: LD_INT 22
19345: PUSH
19346: LD_OWVAR 2
19350: PUSH
19351: EMPTY
19352: LIST
19353: LIST
19354: PUSH
19355: LD_INT 21
19357: PUSH
19358: LD_INT 1
19360: PUSH
19361: EMPTY
19362: LIST
19363: LIST
19364: PUSH
19365: EMPTY
19366: LIST
19367: LIST
19368: PPUSH
19369: CALL_OW 69
19373: PUSH
19374: FOR_IN
19375: IFFALSE 19416
// begin for j := 1 to 4 do
19377: LD_ADDR_VAR 0 3
19381: PUSH
19382: DOUBLE
19383: LD_INT 1
19385: DEC
19386: ST_TO_ADDR
19387: LD_INT 4
19389: PUSH
19390: FOR_TO
19391: IFFALSE 19412
// SetSkill ( i , j , 10 ) ;
19393: LD_VAR 0 2
19397: PPUSH
19398: LD_VAR 0 3
19402: PPUSH
19403: LD_INT 10
19405: PPUSH
19406: CALL_OW 237
19410: GO 19390
19412: POP
19413: POP
// end ;
19414: GO 19374
19416: POP
19417: POP
// end ;
19418: LD_VAR 0 1
19422: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
19423: LD_INT 0
19425: PPUSH
// uc_side := your_side ;
19426: LD_ADDR_OWVAR 20
19430: PUSH
19431: LD_OWVAR 2
19435: ST_TO_ADDR
// uc_nation := nation ;
19436: LD_ADDR_OWVAR 21
19440: PUSH
19441: LD_VAR 0 1
19445: ST_TO_ADDR
// InitHc ;
19446: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
19450: LD_INT 0
19452: PPUSH
19453: LD_VAR 0 2
19457: PPUSH
19458: LD_VAR 0 3
19462: PPUSH
19463: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
19467: LD_VAR 0 4
19471: PPUSH
19472: LD_VAR 0 5
19476: PPUSH
19477: CALL_OW 428
19481: PUSH
19482: LD_INT 0
19484: EQUAL
19485: IFFALSE 19509
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
19487: CALL_OW 44
19491: PPUSH
19492: LD_VAR 0 4
19496: PPUSH
19497: LD_VAR 0 5
19501: PPUSH
19502: LD_INT 1
19504: PPUSH
19505: CALL_OW 48
// end ;
19509: LD_VAR 0 6
19513: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
19514: LD_INT 0
19516: PPUSH
19517: PPUSH
// uc_side := your_side ;
19518: LD_ADDR_OWVAR 20
19522: PUSH
19523: LD_OWVAR 2
19527: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
19528: LD_VAR 0 1
19532: PUSH
19533: LD_INT 1
19535: PUSH
19536: LD_INT 2
19538: PUSH
19539: LD_INT 3
19541: PUSH
19542: LD_INT 4
19544: PUSH
19545: LD_INT 5
19547: PUSH
19548: EMPTY
19549: LIST
19550: LIST
19551: LIST
19552: LIST
19553: LIST
19554: IN
19555: IFFALSE 19567
// uc_nation := nation_american else
19557: LD_ADDR_OWVAR 21
19561: PUSH
19562: LD_INT 1
19564: ST_TO_ADDR
19565: GO 19610
// if chassis in [ 11 , 12 , 13 , 14 ] then
19567: LD_VAR 0 1
19571: PUSH
19572: LD_INT 11
19574: PUSH
19575: LD_INT 12
19577: PUSH
19578: LD_INT 13
19580: PUSH
19581: LD_INT 14
19583: PUSH
19584: EMPTY
19585: LIST
19586: LIST
19587: LIST
19588: LIST
19589: IN
19590: IFFALSE 19602
// uc_nation := nation_arabian else
19592: LD_ADDR_OWVAR 21
19596: PUSH
19597: LD_INT 2
19599: ST_TO_ADDR
19600: GO 19610
// uc_nation := nation_russian ;
19602: LD_ADDR_OWVAR 21
19606: PUSH
19607: LD_INT 3
19609: ST_TO_ADDR
// vc_chassis := chassis ;
19610: LD_ADDR_OWVAR 37
19614: PUSH
19615: LD_VAR 0 1
19619: ST_TO_ADDR
// vc_engine := engine ;
19620: LD_ADDR_OWVAR 39
19624: PUSH
19625: LD_VAR 0 2
19629: ST_TO_ADDR
// vc_control := control ;
19630: LD_ADDR_OWVAR 38
19634: PUSH
19635: LD_VAR 0 3
19639: ST_TO_ADDR
// vc_weapon := weapon ;
19640: LD_ADDR_OWVAR 40
19644: PUSH
19645: LD_VAR 0 4
19649: ST_TO_ADDR
// un := CreateVehicle ;
19650: LD_ADDR_VAR 0 8
19654: PUSH
19655: CALL_OW 45
19659: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
19660: LD_VAR 0 8
19664: PPUSH
19665: LD_INT 0
19667: PPUSH
19668: LD_INT 5
19670: PPUSH
19671: CALL_OW 12
19675: PPUSH
19676: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
19680: LD_VAR 0 8
19684: PPUSH
19685: LD_VAR 0 5
19689: PPUSH
19690: LD_VAR 0 6
19694: PPUSH
19695: LD_INT 1
19697: PPUSH
19698: CALL_OW 48
// end ;
19702: LD_VAR 0 7
19706: RET
// export hInvincible ; every 1 do
19707: GO 19709
19709: DISABLE
// hInvincible := [ ] ;
19710: LD_ADDR_EXP 81
19714: PUSH
19715: EMPTY
19716: ST_TO_ADDR
19717: END
// every 10 do var i ;
19718: GO 19720
19720: DISABLE
19721: LD_INT 0
19723: PPUSH
// begin enable ;
19724: ENABLE
// if not hInvincible then
19725: LD_EXP 81
19729: NOT
19730: IFFALSE 19734
// exit ;
19732: GO 19778
// for i in hInvincible do
19734: LD_ADDR_VAR 0 1
19738: PUSH
19739: LD_EXP 81
19743: PUSH
19744: FOR_IN
19745: IFFALSE 19776
// if GetLives ( i ) < 1000 then
19747: LD_VAR 0 1
19751: PPUSH
19752: CALL_OW 256
19756: PUSH
19757: LD_INT 1000
19759: LESS
19760: IFFALSE 19774
// SetLives ( i , 1000 ) ;
19762: LD_VAR 0 1
19766: PPUSH
19767: LD_INT 1000
19769: PPUSH
19770: CALL_OW 234
19774: GO 19744
19776: POP
19777: POP
// end ;
19778: PPOPN 1
19780: END
// export function hHackInvincible ; var i ; begin
19781: LD_INT 0
19783: PPUSH
19784: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
19785: LD_ADDR_VAR 0 2
19789: PUSH
19790: LD_INT 2
19792: PUSH
19793: LD_INT 21
19795: PUSH
19796: LD_INT 1
19798: PUSH
19799: EMPTY
19800: LIST
19801: LIST
19802: PUSH
19803: LD_INT 21
19805: PUSH
19806: LD_INT 2
19808: PUSH
19809: EMPTY
19810: LIST
19811: LIST
19812: PUSH
19813: EMPTY
19814: LIST
19815: LIST
19816: LIST
19817: PPUSH
19818: CALL_OW 69
19822: PUSH
19823: FOR_IN
19824: IFFALSE 19885
// if IsSelected ( i ) then
19826: LD_VAR 0 2
19830: PPUSH
19831: CALL_OW 306
19835: IFFALSE 19883
// begin if i in hInvincible then
19837: LD_VAR 0 2
19841: PUSH
19842: LD_EXP 81
19846: IN
19847: IFFALSE 19867
// hInvincible := hInvincible diff i else
19849: LD_ADDR_EXP 81
19853: PUSH
19854: LD_EXP 81
19858: PUSH
19859: LD_VAR 0 2
19863: DIFF
19864: ST_TO_ADDR
19865: GO 19883
// hInvincible := hInvincible union i ;
19867: LD_ADDR_EXP 81
19871: PUSH
19872: LD_EXP 81
19876: PUSH
19877: LD_VAR 0 2
19881: UNION
19882: ST_TO_ADDR
// end ;
19883: GO 19823
19885: POP
19886: POP
// end ;
19887: LD_VAR 0 1
19891: RET
// export function hHackInvisible ; var i , j ; begin
19892: LD_INT 0
19894: PPUSH
19895: PPUSH
19896: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19897: LD_ADDR_VAR 0 2
19901: PUSH
19902: LD_INT 21
19904: PUSH
19905: LD_INT 1
19907: PUSH
19908: EMPTY
19909: LIST
19910: LIST
19911: PPUSH
19912: CALL_OW 69
19916: PUSH
19917: FOR_IN
19918: IFFALSE 19942
// if IsSelected ( i ) then
19920: LD_VAR 0 2
19924: PPUSH
19925: CALL_OW 306
19929: IFFALSE 19940
// ComForceInvisible ( i ) ;
19931: LD_VAR 0 2
19935: PPUSH
19936: CALL_OW 496
19940: GO 19917
19942: POP
19943: POP
// end ;
19944: LD_VAR 0 1
19948: RET
// export function hHackChangeYourSide ; begin
19949: LD_INT 0
19951: PPUSH
// if your_side = 8 then
19952: LD_OWVAR 2
19956: PUSH
19957: LD_INT 8
19959: EQUAL
19960: IFFALSE 19972
// your_side := 0 else
19962: LD_ADDR_OWVAR 2
19966: PUSH
19967: LD_INT 0
19969: ST_TO_ADDR
19970: GO 19986
// your_side := your_side + 1 ;
19972: LD_ADDR_OWVAR 2
19976: PUSH
19977: LD_OWVAR 2
19981: PUSH
19982: LD_INT 1
19984: PLUS
19985: ST_TO_ADDR
// end ;
19986: LD_VAR 0 1
19990: RET
// export function hHackChangeUnitSide ; var i , j ; begin
19991: LD_INT 0
19993: PPUSH
19994: PPUSH
19995: PPUSH
// for i in all_units do
19996: LD_ADDR_VAR 0 2
20000: PUSH
20001: LD_OWVAR 3
20005: PUSH
20006: FOR_IN
20007: IFFALSE 20085
// if IsSelected ( i ) then
20009: LD_VAR 0 2
20013: PPUSH
20014: CALL_OW 306
20018: IFFALSE 20083
// begin j := GetSide ( i ) ;
20020: LD_ADDR_VAR 0 3
20024: PUSH
20025: LD_VAR 0 2
20029: PPUSH
20030: CALL_OW 255
20034: ST_TO_ADDR
// if j = 8 then
20035: LD_VAR 0 3
20039: PUSH
20040: LD_INT 8
20042: EQUAL
20043: IFFALSE 20055
// j := 0 else
20045: LD_ADDR_VAR 0 3
20049: PUSH
20050: LD_INT 0
20052: ST_TO_ADDR
20053: GO 20069
// j := j + 1 ;
20055: LD_ADDR_VAR 0 3
20059: PUSH
20060: LD_VAR 0 3
20064: PUSH
20065: LD_INT 1
20067: PLUS
20068: ST_TO_ADDR
// SetSide ( i , j ) ;
20069: LD_VAR 0 2
20073: PPUSH
20074: LD_VAR 0 3
20078: PPUSH
20079: CALL_OW 235
// end ;
20083: GO 20006
20085: POP
20086: POP
// end ;
20087: LD_VAR 0 1
20091: RET
// export function hHackFog ; begin
20092: LD_INT 0
20094: PPUSH
// FogOff ( true ) ;
20095: LD_INT 1
20097: PPUSH
20098: CALL_OW 344
// end ;
20102: LD_VAR 0 1
20106: RET
// export function hHackTeleport ( unit , x , y ) ; begin
20107: LD_INT 0
20109: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
20110: LD_VAR 0 1
20114: PPUSH
20115: LD_VAR 0 2
20119: PPUSH
20120: LD_VAR 0 3
20124: PPUSH
20125: LD_INT 1
20127: PPUSH
20128: LD_INT 1
20130: PPUSH
20131: CALL_OW 483
// CenterOnXY ( x , y ) ;
20135: LD_VAR 0 2
20139: PPUSH
20140: LD_VAR 0 3
20144: PPUSH
20145: CALL_OW 84
// end ; end_of_file
20149: LD_VAR 0 4
20153: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
20154: LD_INT 0
20156: PPUSH
20157: PPUSH
20158: PPUSH
20159: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
20160: LD_VAR 0 1
20164: PPUSH
20165: CALL_OW 264
20169: PUSH
20170: LD_EXP 97
20174: EQUAL
20175: IFFALSE 20247
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
20177: LD_INT 68
20179: PPUSH
20180: LD_VAR 0 1
20184: PPUSH
20185: CALL_OW 255
20189: PPUSH
20190: CALL_OW 321
20194: PUSH
20195: LD_INT 2
20197: EQUAL
20198: IFFALSE 20210
// eff := 70 else
20200: LD_ADDR_VAR 0 4
20204: PUSH
20205: LD_INT 70
20207: ST_TO_ADDR
20208: GO 20218
// eff := 30 ;
20210: LD_ADDR_VAR 0 4
20214: PUSH
20215: LD_INT 30
20217: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
20218: LD_VAR 0 1
20222: PPUSH
20223: CALL_OW 250
20227: PPUSH
20228: LD_VAR 0 1
20232: PPUSH
20233: CALL_OW 251
20237: PPUSH
20238: LD_VAR 0 4
20242: PPUSH
20243: CALL_OW 495
// end ; end ;
20247: LD_VAR 0 2
20251: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
20252: LD_INT 0
20254: PPUSH
// end ;
20255: LD_VAR 0 4
20259: RET
// export function SOS_Command ( cmd ) ; begin
20260: LD_INT 0
20262: PPUSH
// end ;
20263: LD_VAR 0 2
20267: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
20268: LD_INT 0
20270: PPUSH
// end ;
20271: LD_VAR 0 6
20275: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
20276: LD_INT 0
20278: PPUSH
20279: PPUSH
// if not vehicle or not factory then
20280: LD_VAR 0 1
20284: NOT
20285: PUSH
20286: LD_VAR 0 2
20290: NOT
20291: OR
20292: IFFALSE 20296
// exit ;
20294: GO 20527
// if factoryWaypoints >= factory then
20296: LD_EXP 82
20300: PUSH
20301: LD_VAR 0 2
20305: GREATEREQUAL
20306: IFFALSE 20527
// if factoryWaypoints [ factory ] then
20308: LD_EXP 82
20312: PUSH
20313: LD_VAR 0 2
20317: ARRAY
20318: IFFALSE 20527
// begin if GetControl ( vehicle ) = control_manual then
20320: LD_VAR 0 1
20324: PPUSH
20325: CALL_OW 263
20329: PUSH
20330: LD_INT 1
20332: EQUAL
20333: IFFALSE 20414
// begin driver := IsDrivenBy ( vehicle ) ;
20335: LD_ADDR_VAR 0 4
20339: PUSH
20340: LD_VAR 0 1
20344: PPUSH
20345: CALL_OW 311
20349: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
20350: LD_VAR 0 4
20354: PPUSH
20355: LD_EXP 82
20359: PUSH
20360: LD_VAR 0 2
20364: ARRAY
20365: PUSH
20366: LD_INT 1
20368: ARRAY
20369: PPUSH
20370: LD_EXP 82
20374: PUSH
20375: LD_VAR 0 2
20379: ARRAY
20380: PUSH
20381: LD_INT 2
20383: ARRAY
20384: PPUSH
20385: CALL_OW 171
// AddComExitVehicle ( driver ) ;
20389: LD_VAR 0 4
20393: PPUSH
20394: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
20398: LD_VAR 0 4
20402: PPUSH
20403: LD_VAR 0 2
20407: PPUSH
20408: CALL_OW 180
// end else
20412: GO 20527
// if GetControl ( vehicle ) = control_remote then
20414: LD_VAR 0 1
20418: PPUSH
20419: CALL_OW 263
20423: PUSH
20424: LD_INT 2
20426: EQUAL
20427: IFFALSE 20488
// begin wait ( 0 0$2 ) ;
20429: LD_INT 70
20431: PPUSH
20432: CALL_OW 67
// if Connect ( vehicle ) then
20436: LD_VAR 0 1
20440: PPUSH
20441: CALL 32919 0 1
20445: IFFALSE 20486
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
20447: LD_VAR 0 1
20451: PPUSH
20452: LD_EXP 82
20456: PUSH
20457: LD_VAR 0 2
20461: ARRAY
20462: PUSH
20463: LD_INT 1
20465: ARRAY
20466: PPUSH
20467: LD_EXP 82
20471: PUSH
20472: LD_VAR 0 2
20476: ARRAY
20477: PUSH
20478: LD_INT 2
20480: ARRAY
20481: PPUSH
20482: CALL_OW 171
// end else
20486: GO 20527
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
20488: LD_VAR 0 1
20492: PPUSH
20493: LD_EXP 82
20497: PUSH
20498: LD_VAR 0 2
20502: ARRAY
20503: PUSH
20504: LD_INT 1
20506: ARRAY
20507: PPUSH
20508: LD_EXP 82
20512: PUSH
20513: LD_VAR 0 2
20517: ARRAY
20518: PUSH
20519: LD_INT 2
20521: ARRAY
20522: PPUSH
20523: CALL_OW 171
// end ; end ;
20527: LD_VAR 0 3
20531: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
20532: LD_INT 0
20534: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
20535: LD_VAR 0 1
20539: PUSH
20540: LD_INT 250
20542: EQUAL
20543: PUSH
20544: LD_VAR 0 2
20548: PPUSH
20549: CALL_OW 264
20553: PUSH
20554: LD_EXP 100
20558: EQUAL
20559: AND
20560: IFFALSE 20581
// MinerPlaceMine ( unit , x , y ) ;
20562: LD_VAR 0 2
20566: PPUSH
20567: LD_VAR 0 4
20571: PPUSH
20572: LD_VAR 0 5
20576: PPUSH
20577: CALL 23309 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
20581: LD_VAR 0 1
20585: PUSH
20586: LD_INT 251
20588: EQUAL
20589: PUSH
20590: LD_VAR 0 2
20594: PPUSH
20595: CALL_OW 264
20599: PUSH
20600: LD_EXP 100
20604: EQUAL
20605: AND
20606: IFFALSE 20627
// MinerDetonateMine ( unit , x , y ) ;
20608: LD_VAR 0 2
20612: PPUSH
20613: LD_VAR 0 4
20617: PPUSH
20618: LD_VAR 0 5
20622: PPUSH
20623: CALL 23586 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
20627: LD_VAR 0 1
20631: PUSH
20632: LD_INT 252
20634: EQUAL
20635: PUSH
20636: LD_VAR 0 2
20640: PPUSH
20641: CALL_OW 264
20645: PUSH
20646: LD_EXP 100
20650: EQUAL
20651: AND
20652: IFFALSE 20673
// MinerCreateMinefield ( unit , x , y ) ;
20654: LD_VAR 0 2
20658: PPUSH
20659: LD_VAR 0 4
20663: PPUSH
20664: LD_VAR 0 5
20668: PPUSH
20669: CALL 24003 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
20673: LD_VAR 0 1
20677: PUSH
20678: LD_INT 253
20680: EQUAL
20681: PUSH
20682: LD_VAR 0 2
20686: PPUSH
20687: CALL_OW 257
20691: PUSH
20692: LD_INT 5
20694: EQUAL
20695: AND
20696: IFFALSE 20717
// ComBinocular ( unit , x , y ) ;
20698: LD_VAR 0 2
20702: PPUSH
20703: LD_VAR 0 4
20707: PPUSH
20708: LD_VAR 0 5
20712: PPUSH
20713: CALL 24374 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
20717: LD_VAR 0 1
20721: PUSH
20722: LD_INT 254
20724: EQUAL
20725: PUSH
20726: LD_VAR 0 2
20730: PPUSH
20731: CALL_OW 264
20735: PUSH
20736: LD_EXP 95
20740: EQUAL
20741: AND
20742: PUSH
20743: LD_VAR 0 3
20747: PPUSH
20748: CALL_OW 263
20752: PUSH
20753: LD_INT 3
20755: EQUAL
20756: AND
20757: IFFALSE 20773
// HackDestroyVehicle ( unit , selectedUnit ) ;
20759: LD_VAR 0 2
20763: PPUSH
20764: LD_VAR 0 3
20768: PPUSH
20769: CALL 22669 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
20773: LD_VAR 0 1
20777: PUSH
20778: LD_INT 255
20780: EQUAL
20781: PUSH
20782: LD_VAR 0 2
20786: PPUSH
20787: CALL_OW 264
20791: PUSH
20792: LD_INT 14
20794: PUSH
20795: LD_INT 53
20797: PUSH
20798: EMPTY
20799: LIST
20800: LIST
20801: IN
20802: AND
20803: PUSH
20804: LD_VAR 0 4
20808: PPUSH
20809: LD_VAR 0 5
20813: PPUSH
20814: CALL_OW 488
20818: AND
20819: IFFALSE 20843
// CutTreeXYR ( unit , x , y , 12 ) ;
20821: LD_VAR 0 2
20825: PPUSH
20826: LD_VAR 0 4
20830: PPUSH
20831: LD_VAR 0 5
20835: PPUSH
20836: LD_INT 12
20838: PPUSH
20839: CALL 21235 0 4
// if cmd = 256 then
20843: LD_VAR 0 1
20847: PUSH
20848: LD_INT 256
20850: EQUAL
20851: IFFALSE 20872
// SetFactoryWaypoint ( unit , x , y ) ;
20853: LD_VAR 0 2
20857: PPUSH
20858: LD_VAR 0 4
20862: PPUSH
20863: LD_VAR 0 5
20867: PPUSH
20868: CALL 20877 0 3
// end ;
20872: LD_VAR 0 6
20876: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
20877: LD_INT 0
20879: PPUSH
20880: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
20881: LD_VAR 0 1
20885: NOT
20886: PUSH
20887: LD_VAR 0 2
20891: PPUSH
20892: LD_VAR 0 3
20896: PPUSH
20897: CALL_OW 488
20901: NOT
20902: OR
20903: PUSH
20904: LD_VAR 0 1
20908: PPUSH
20909: CALL_OW 266
20913: PUSH
20914: LD_INT 3
20916: NONEQUAL
20917: PUSH
20918: LD_VAR 0 1
20922: PPUSH
20923: CALL_OW 247
20927: PUSH
20928: LD_INT 1
20930: EQUAL
20931: NOT
20932: AND
20933: OR
20934: IFFALSE 20938
// exit ;
20936: GO 21087
// if GetType ( factory ) = unit_human then
20938: LD_VAR 0 1
20942: PPUSH
20943: CALL_OW 247
20947: PUSH
20948: LD_INT 1
20950: EQUAL
20951: IFFALSE 20968
// factory := IsInUnit ( factory ) ;
20953: LD_ADDR_VAR 0 1
20957: PUSH
20958: LD_VAR 0 1
20962: PPUSH
20963: CALL_OW 310
20967: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
20968: LD_VAR 0 1
20972: PPUSH
20973: CALL_OW 266
20977: PUSH
20978: LD_INT 3
20980: NONEQUAL
20981: IFFALSE 20985
// exit ;
20983: GO 21087
// if HexInfo ( x , y ) = factory then
20985: LD_VAR 0 2
20989: PPUSH
20990: LD_VAR 0 3
20994: PPUSH
20995: CALL_OW 428
20999: PUSH
21000: LD_VAR 0 1
21004: EQUAL
21005: IFFALSE 21032
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
21007: LD_ADDR_EXP 82
21011: PUSH
21012: LD_EXP 82
21016: PPUSH
21017: LD_VAR 0 1
21021: PPUSH
21022: LD_INT 0
21024: PPUSH
21025: CALL_OW 1
21029: ST_TO_ADDR
21030: GO 21083
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
21032: LD_ADDR_EXP 82
21036: PUSH
21037: LD_EXP 82
21041: PPUSH
21042: LD_VAR 0 1
21046: PPUSH
21047: LD_VAR 0 1
21051: PPUSH
21052: CALL_OW 255
21056: PUSH
21057: LD_VAR 0 1
21061: PUSH
21062: LD_VAR 0 2
21066: PUSH
21067: LD_VAR 0 3
21071: PUSH
21072: EMPTY
21073: LIST
21074: LIST
21075: LIST
21076: LIST
21077: PPUSH
21078: CALL_OW 1
21082: ST_TO_ADDR
// UpdateFactoryWaypoints ;
21083: CALL 21092 0 0
// end ;
21087: LD_VAR 0 4
21091: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
21092: LD_INT 0
21094: PPUSH
21095: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
21096: LD_STRING resetFactoryWaypoint();
21098: PPUSH
21099: CALL_OW 559
// if factoryWaypoints then
21103: LD_EXP 82
21107: IFFALSE 21230
// begin for i := 1 to factoryWaypoints do
21109: LD_ADDR_VAR 0 2
21113: PUSH
21114: DOUBLE
21115: LD_INT 1
21117: DEC
21118: ST_TO_ADDR
21119: LD_EXP 82
21123: PUSH
21124: FOR_TO
21125: IFFALSE 21228
// if factoryWaypoints [ i ] then
21127: LD_EXP 82
21131: PUSH
21132: LD_VAR 0 2
21136: ARRAY
21137: IFFALSE 21226
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
21139: LD_STRING setFactoryWaypointXY(
21141: PUSH
21142: LD_EXP 82
21146: PUSH
21147: LD_VAR 0 2
21151: ARRAY
21152: PUSH
21153: LD_INT 1
21155: ARRAY
21156: STR
21157: PUSH
21158: LD_STRING ,
21160: STR
21161: PUSH
21162: LD_EXP 82
21166: PUSH
21167: LD_VAR 0 2
21171: ARRAY
21172: PUSH
21173: LD_INT 2
21175: ARRAY
21176: STR
21177: PUSH
21178: LD_STRING ,
21180: STR
21181: PUSH
21182: LD_EXP 82
21186: PUSH
21187: LD_VAR 0 2
21191: ARRAY
21192: PUSH
21193: LD_INT 3
21195: ARRAY
21196: STR
21197: PUSH
21198: LD_STRING ,
21200: STR
21201: PUSH
21202: LD_EXP 82
21206: PUSH
21207: LD_VAR 0 2
21211: ARRAY
21212: PUSH
21213: LD_INT 4
21215: ARRAY
21216: STR
21217: PUSH
21218: LD_STRING )
21220: STR
21221: PPUSH
21222: CALL_OW 559
21226: GO 21124
21228: POP
21229: POP
// end ; end ;
21230: LD_VAR 0 1
21234: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
21235: LD_INT 0
21237: PPUSH
21238: PPUSH
21239: PPUSH
21240: PPUSH
21241: PPUSH
21242: PPUSH
21243: PPUSH
21244: PPUSH
21245: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
21246: LD_VAR 0 1
21250: NOT
21251: PUSH
21252: LD_VAR 0 2
21256: PPUSH
21257: LD_VAR 0 3
21261: PPUSH
21262: CALL_OW 488
21266: NOT
21267: OR
21268: PUSH
21269: LD_VAR 0 4
21273: NOT
21274: OR
21275: IFFALSE 21279
// exit ;
21277: GO 21619
// list := [ ] ;
21279: LD_ADDR_VAR 0 13
21283: PUSH
21284: EMPTY
21285: ST_TO_ADDR
// if x - r < 0 then
21286: LD_VAR 0 2
21290: PUSH
21291: LD_VAR 0 4
21295: MINUS
21296: PUSH
21297: LD_INT 0
21299: LESS
21300: IFFALSE 21312
// min_x := 0 else
21302: LD_ADDR_VAR 0 7
21306: PUSH
21307: LD_INT 0
21309: ST_TO_ADDR
21310: GO 21328
// min_x := x - r ;
21312: LD_ADDR_VAR 0 7
21316: PUSH
21317: LD_VAR 0 2
21321: PUSH
21322: LD_VAR 0 4
21326: MINUS
21327: ST_TO_ADDR
// if y - r < 0 then
21328: LD_VAR 0 3
21332: PUSH
21333: LD_VAR 0 4
21337: MINUS
21338: PUSH
21339: LD_INT 0
21341: LESS
21342: IFFALSE 21354
// min_y := 0 else
21344: LD_ADDR_VAR 0 8
21348: PUSH
21349: LD_INT 0
21351: ST_TO_ADDR
21352: GO 21370
// min_y := y - r ;
21354: LD_ADDR_VAR 0 8
21358: PUSH
21359: LD_VAR 0 3
21363: PUSH
21364: LD_VAR 0 4
21368: MINUS
21369: ST_TO_ADDR
// max_x := x + r ;
21370: LD_ADDR_VAR 0 9
21374: PUSH
21375: LD_VAR 0 2
21379: PUSH
21380: LD_VAR 0 4
21384: PLUS
21385: ST_TO_ADDR
// max_y := y + r ;
21386: LD_ADDR_VAR 0 10
21390: PUSH
21391: LD_VAR 0 3
21395: PUSH
21396: LD_VAR 0 4
21400: PLUS
21401: ST_TO_ADDR
// for _x = min_x to max_x do
21402: LD_ADDR_VAR 0 11
21406: PUSH
21407: DOUBLE
21408: LD_VAR 0 7
21412: DEC
21413: ST_TO_ADDR
21414: LD_VAR 0 9
21418: PUSH
21419: FOR_TO
21420: IFFALSE 21537
// for _y = min_y to max_y do
21422: LD_ADDR_VAR 0 12
21426: PUSH
21427: DOUBLE
21428: LD_VAR 0 8
21432: DEC
21433: ST_TO_ADDR
21434: LD_VAR 0 10
21438: PUSH
21439: FOR_TO
21440: IFFALSE 21533
// begin if not ValidHex ( _x , _y ) then
21442: LD_VAR 0 11
21446: PPUSH
21447: LD_VAR 0 12
21451: PPUSH
21452: CALL_OW 488
21456: NOT
21457: IFFALSE 21461
// continue ;
21459: GO 21439
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
21461: LD_VAR 0 11
21465: PPUSH
21466: LD_VAR 0 12
21470: PPUSH
21471: CALL_OW 351
21475: PUSH
21476: LD_VAR 0 11
21480: PPUSH
21481: LD_VAR 0 12
21485: PPUSH
21486: CALL_OW 554
21490: AND
21491: IFFALSE 21531
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
21493: LD_ADDR_VAR 0 13
21497: PUSH
21498: LD_VAR 0 13
21502: PPUSH
21503: LD_VAR 0 13
21507: PUSH
21508: LD_INT 1
21510: PLUS
21511: PPUSH
21512: LD_VAR 0 11
21516: PUSH
21517: LD_VAR 0 12
21521: PUSH
21522: EMPTY
21523: LIST
21524: LIST
21525: PPUSH
21526: CALL_OW 2
21530: ST_TO_ADDR
// end ;
21531: GO 21439
21533: POP
21534: POP
21535: GO 21419
21537: POP
21538: POP
// if not list then
21539: LD_VAR 0 13
21543: NOT
21544: IFFALSE 21548
// exit ;
21546: GO 21619
// for i in list do
21548: LD_ADDR_VAR 0 6
21552: PUSH
21553: LD_VAR 0 13
21557: PUSH
21558: FOR_IN
21559: IFFALSE 21617
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
21561: LD_VAR 0 1
21565: PPUSH
21566: LD_STRING M
21568: PUSH
21569: LD_VAR 0 6
21573: PUSH
21574: LD_INT 1
21576: ARRAY
21577: PUSH
21578: LD_VAR 0 6
21582: PUSH
21583: LD_INT 2
21585: ARRAY
21586: PUSH
21587: LD_INT 0
21589: PUSH
21590: LD_INT 0
21592: PUSH
21593: LD_INT 0
21595: PUSH
21596: LD_INT 0
21598: PUSH
21599: EMPTY
21600: LIST
21601: LIST
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: LIST
21607: PUSH
21608: EMPTY
21609: LIST
21610: PPUSH
21611: CALL_OW 447
21615: GO 21558
21617: POP
21618: POP
// end ;
21619: LD_VAR 0 5
21623: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
21624: LD_EXP 83
21628: NOT
21629: IFFALSE 21679
21631: GO 21633
21633: DISABLE
// begin initHack := true ;
21634: LD_ADDR_EXP 83
21638: PUSH
21639: LD_INT 1
21641: ST_TO_ADDR
// hackTanks := [ ] ;
21642: LD_ADDR_EXP 84
21646: PUSH
21647: EMPTY
21648: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
21649: LD_ADDR_EXP 85
21653: PUSH
21654: EMPTY
21655: ST_TO_ADDR
// hackLimit := 3 ;
21656: LD_ADDR_EXP 86
21660: PUSH
21661: LD_INT 3
21663: ST_TO_ADDR
// hackDist := 12 ;
21664: LD_ADDR_EXP 87
21668: PUSH
21669: LD_INT 12
21671: ST_TO_ADDR
// hackCounter := [ ] ;
21672: LD_ADDR_EXP 88
21676: PUSH
21677: EMPTY
21678: ST_TO_ADDR
// end ;
21679: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
21680: LD_EXP 83
21684: PUSH
21685: LD_INT 34
21687: PUSH
21688: LD_EXP 95
21692: PUSH
21693: EMPTY
21694: LIST
21695: LIST
21696: PPUSH
21697: CALL_OW 69
21701: AND
21702: IFFALSE 21957
21704: GO 21706
21706: DISABLE
21707: LD_INT 0
21709: PPUSH
21710: PPUSH
// begin enable ;
21711: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
21712: LD_ADDR_VAR 0 1
21716: PUSH
21717: LD_INT 34
21719: PUSH
21720: LD_EXP 95
21724: PUSH
21725: EMPTY
21726: LIST
21727: LIST
21728: PPUSH
21729: CALL_OW 69
21733: PUSH
21734: FOR_IN
21735: IFFALSE 21955
// begin if not i in hackTanks then
21737: LD_VAR 0 1
21741: PUSH
21742: LD_EXP 84
21746: IN
21747: NOT
21748: IFFALSE 21831
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
21750: LD_ADDR_EXP 84
21754: PUSH
21755: LD_EXP 84
21759: PPUSH
21760: LD_EXP 84
21764: PUSH
21765: LD_INT 1
21767: PLUS
21768: PPUSH
21769: LD_VAR 0 1
21773: PPUSH
21774: CALL_OW 1
21778: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
21779: LD_ADDR_EXP 85
21783: PUSH
21784: LD_EXP 85
21788: PPUSH
21789: LD_EXP 85
21793: PUSH
21794: LD_INT 1
21796: PLUS
21797: PPUSH
21798: EMPTY
21799: PPUSH
21800: CALL_OW 1
21804: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
21805: LD_ADDR_EXP 88
21809: PUSH
21810: LD_EXP 88
21814: PPUSH
21815: LD_EXP 88
21819: PUSH
21820: LD_INT 1
21822: PLUS
21823: PPUSH
21824: EMPTY
21825: PPUSH
21826: CALL_OW 1
21830: ST_TO_ADDR
// end ; if not IsOk ( i ) then
21831: LD_VAR 0 1
21835: PPUSH
21836: CALL_OW 302
21840: NOT
21841: IFFALSE 21854
// begin HackUnlinkAll ( i ) ;
21843: LD_VAR 0 1
21847: PPUSH
21848: CALL 21960 0 1
// continue ;
21852: GO 21734
// end ; HackCheckCapturedStatus ( i ) ;
21854: LD_VAR 0 1
21858: PPUSH
21859: CALL 22403 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
21863: LD_ADDR_VAR 0 2
21867: PUSH
21868: LD_INT 81
21870: PUSH
21871: LD_VAR 0 1
21875: PPUSH
21876: CALL_OW 255
21880: PUSH
21881: EMPTY
21882: LIST
21883: LIST
21884: PUSH
21885: LD_INT 33
21887: PUSH
21888: LD_INT 3
21890: PUSH
21891: EMPTY
21892: LIST
21893: LIST
21894: PUSH
21895: LD_INT 91
21897: PUSH
21898: LD_VAR 0 1
21902: PUSH
21903: LD_EXP 87
21907: PUSH
21908: EMPTY
21909: LIST
21910: LIST
21911: LIST
21912: PUSH
21913: LD_INT 50
21915: PUSH
21916: EMPTY
21917: LIST
21918: PUSH
21919: EMPTY
21920: LIST
21921: LIST
21922: LIST
21923: LIST
21924: PPUSH
21925: CALL_OW 69
21929: ST_TO_ADDR
// if not tmp then
21930: LD_VAR 0 2
21934: NOT
21935: IFFALSE 21939
// continue ;
21937: GO 21734
// HackLink ( i , tmp ) ;
21939: LD_VAR 0 1
21943: PPUSH
21944: LD_VAR 0 2
21948: PPUSH
21949: CALL 22096 0 2
// end ;
21953: GO 21734
21955: POP
21956: POP
// end ;
21957: PPOPN 2
21959: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
21960: LD_INT 0
21962: PPUSH
21963: PPUSH
21964: PPUSH
// if not hack in hackTanks then
21965: LD_VAR 0 1
21969: PUSH
21970: LD_EXP 84
21974: IN
21975: NOT
21976: IFFALSE 21980
// exit ;
21978: GO 22091
// index := GetElementIndex ( hackTanks , hack ) ;
21980: LD_ADDR_VAR 0 4
21984: PUSH
21985: LD_EXP 84
21989: PPUSH
21990: LD_VAR 0 1
21994: PPUSH
21995: CALL 29733 0 2
21999: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
22000: LD_EXP 85
22004: PUSH
22005: LD_VAR 0 4
22009: ARRAY
22010: IFFALSE 22091
// begin for i in hackTanksCaptured [ index ] do
22012: LD_ADDR_VAR 0 3
22016: PUSH
22017: LD_EXP 85
22021: PUSH
22022: LD_VAR 0 4
22026: ARRAY
22027: PUSH
22028: FOR_IN
22029: IFFALSE 22055
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
22031: LD_VAR 0 3
22035: PUSH
22036: LD_INT 1
22038: ARRAY
22039: PPUSH
22040: LD_VAR 0 3
22044: PUSH
22045: LD_INT 2
22047: ARRAY
22048: PPUSH
22049: CALL_OW 235
22053: GO 22028
22055: POP
22056: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
22057: LD_ADDR_EXP 85
22061: PUSH
22062: LD_EXP 85
22066: PPUSH
22067: LD_VAR 0 4
22071: PPUSH
22072: EMPTY
22073: PPUSH
22074: CALL_OW 1
22078: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
22079: LD_VAR 0 1
22083: PPUSH
22084: LD_INT 0
22086: PPUSH
22087: CALL_OW 505
// end ; end ;
22091: LD_VAR 0 2
22095: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
22096: LD_INT 0
22098: PPUSH
22099: PPUSH
22100: PPUSH
// if not hack in hackTanks or not vehicles then
22101: LD_VAR 0 1
22105: PUSH
22106: LD_EXP 84
22110: IN
22111: NOT
22112: PUSH
22113: LD_VAR 0 2
22117: NOT
22118: OR
22119: IFFALSE 22123
// exit ;
22121: GO 22398
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
22123: LD_ADDR_VAR 0 2
22127: PUSH
22128: LD_VAR 0 1
22132: PPUSH
22133: LD_VAR 0 2
22137: PPUSH
22138: LD_INT 1
22140: PPUSH
22141: LD_INT 1
22143: PPUSH
22144: CALL 30383 0 4
22148: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
22149: LD_ADDR_VAR 0 5
22153: PUSH
22154: LD_EXP 84
22158: PPUSH
22159: LD_VAR 0 1
22163: PPUSH
22164: CALL 29733 0 2
22168: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
22169: LD_EXP 85
22173: PUSH
22174: LD_VAR 0 5
22178: ARRAY
22179: PUSH
22180: LD_EXP 86
22184: LESS
22185: IFFALSE 22374
// begin for i := 1 to vehicles do
22187: LD_ADDR_VAR 0 4
22191: PUSH
22192: DOUBLE
22193: LD_INT 1
22195: DEC
22196: ST_TO_ADDR
22197: LD_VAR 0 2
22201: PUSH
22202: FOR_TO
22203: IFFALSE 22372
// begin if hackTanksCaptured [ index ] = hackLimit then
22205: LD_EXP 85
22209: PUSH
22210: LD_VAR 0 5
22214: ARRAY
22215: PUSH
22216: LD_EXP 86
22220: EQUAL
22221: IFFALSE 22225
// break ;
22223: GO 22372
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
22225: LD_ADDR_EXP 88
22229: PUSH
22230: LD_EXP 88
22234: PPUSH
22235: LD_VAR 0 5
22239: PPUSH
22240: LD_EXP 88
22244: PUSH
22245: LD_VAR 0 5
22249: ARRAY
22250: PUSH
22251: LD_INT 1
22253: PLUS
22254: PPUSH
22255: CALL_OW 1
22259: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
22260: LD_ADDR_EXP 85
22264: PUSH
22265: LD_EXP 85
22269: PPUSH
22270: LD_VAR 0 5
22274: PUSH
22275: LD_EXP 85
22279: PUSH
22280: LD_VAR 0 5
22284: ARRAY
22285: PUSH
22286: LD_INT 1
22288: PLUS
22289: PUSH
22290: EMPTY
22291: LIST
22292: LIST
22293: PPUSH
22294: LD_VAR 0 2
22298: PUSH
22299: LD_VAR 0 4
22303: ARRAY
22304: PUSH
22305: LD_VAR 0 2
22309: PUSH
22310: LD_VAR 0 4
22314: ARRAY
22315: PPUSH
22316: CALL_OW 255
22320: PUSH
22321: EMPTY
22322: LIST
22323: LIST
22324: PPUSH
22325: CALL 29948 0 3
22329: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
22330: LD_VAR 0 2
22334: PUSH
22335: LD_VAR 0 4
22339: ARRAY
22340: PPUSH
22341: LD_VAR 0 1
22345: PPUSH
22346: CALL_OW 255
22350: PPUSH
22351: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
22355: LD_VAR 0 2
22359: PUSH
22360: LD_VAR 0 4
22364: ARRAY
22365: PPUSH
22366: CALL_OW 141
// end ;
22370: GO 22202
22372: POP
22373: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22374: LD_VAR 0 1
22378: PPUSH
22379: LD_EXP 85
22383: PUSH
22384: LD_VAR 0 5
22388: ARRAY
22389: PUSH
22390: LD_INT 0
22392: PLUS
22393: PPUSH
22394: CALL_OW 505
// end ;
22398: LD_VAR 0 3
22402: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
22403: LD_INT 0
22405: PPUSH
22406: PPUSH
22407: PPUSH
22408: PPUSH
// if not hack in hackTanks then
22409: LD_VAR 0 1
22413: PUSH
22414: LD_EXP 84
22418: IN
22419: NOT
22420: IFFALSE 22424
// exit ;
22422: GO 22664
// index := GetElementIndex ( hackTanks , hack ) ;
22424: LD_ADDR_VAR 0 4
22428: PUSH
22429: LD_EXP 84
22433: PPUSH
22434: LD_VAR 0 1
22438: PPUSH
22439: CALL 29733 0 2
22443: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
22444: LD_ADDR_VAR 0 3
22448: PUSH
22449: DOUBLE
22450: LD_EXP 85
22454: PUSH
22455: LD_VAR 0 4
22459: ARRAY
22460: INC
22461: ST_TO_ADDR
22462: LD_INT 1
22464: PUSH
22465: FOR_DOWNTO
22466: IFFALSE 22638
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
22468: LD_ADDR_VAR 0 5
22472: PUSH
22473: LD_EXP 85
22477: PUSH
22478: LD_VAR 0 4
22482: ARRAY
22483: PUSH
22484: LD_VAR 0 3
22488: ARRAY
22489: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
22490: LD_VAR 0 5
22494: PUSH
22495: LD_INT 1
22497: ARRAY
22498: PPUSH
22499: CALL_OW 302
22503: NOT
22504: PUSH
22505: LD_VAR 0 5
22509: PUSH
22510: LD_INT 1
22512: ARRAY
22513: PPUSH
22514: CALL_OW 255
22518: PUSH
22519: LD_VAR 0 1
22523: PPUSH
22524: CALL_OW 255
22528: NONEQUAL
22529: OR
22530: IFFALSE 22636
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
22532: LD_VAR 0 5
22536: PUSH
22537: LD_INT 1
22539: ARRAY
22540: PPUSH
22541: CALL_OW 305
22545: PUSH
22546: LD_VAR 0 5
22550: PUSH
22551: LD_INT 1
22553: ARRAY
22554: PPUSH
22555: CALL_OW 255
22559: PUSH
22560: LD_VAR 0 1
22564: PPUSH
22565: CALL_OW 255
22569: EQUAL
22570: AND
22571: IFFALSE 22595
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
22573: LD_VAR 0 5
22577: PUSH
22578: LD_INT 1
22580: ARRAY
22581: PPUSH
22582: LD_VAR 0 5
22586: PUSH
22587: LD_INT 2
22589: ARRAY
22590: PPUSH
22591: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
22595: LD_ADDR_EXP 85
22599: PUSH
22600: LD_EXP 85
22604: PPUSH
22605: LD_VAR 0 4
22609: PPUSH
22610: LD_EXP 85
22614: PUSH
22615: LD_VAR 0 4
22619: ARRAY
22620: PPUSH
22621: LD_VAR 0 3
22625: PPUSH
22626: CALL_OW 3
22630: PPUSH
22631: CALL_OW 1
22635: ST_TO_ADDR
// end ; end ;
22636: GO 22465
22638: POP
22639: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22640: LD_VAR 0 1
22644: PPUSH
22645: LD_EXP 85
22649: PUSH
22650: LD_VAR 0 4
22654: ARRAY
22655: PUSH
22656: LD_INT 0
22658: PLUS
22659: PPUSH
22660: CALL_OW 505
// end ;
22664: LD_VAR 0 2
22668: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
22669: LD_INT 0
22671: PPUSH
22672: PPUSH
22673: PPUSH
22674: PPUSH
// if not hack in hackTanks then
22675: LD_VAR 0 1
22679: PUSH
22680: LD_EXP 84
22684: IN
22685: NOT
22686: IFFALSE 22690
// exit ;
22688: GO 22775
// index := GetElementIndex ( hackTanks , hack ) ;
22690: LD_ADDR_VAR 0 5
22694: PUSH
22695: LD_EXP 84
22699: PPUSH
22700: LD_VAR 0 1
22704: PPUSH
22705: CALL 29733 0 2
22709: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
22710: LD_ADDR_VAR 0 4
22714: PUSH
22715: DOUBLE
22716: LD_INT 1
22718: DEC
22719: ST_TO_ADDR
22720: LD_EXP 85
22724: PUSH
22725: LD_VAR 0 5
22729: ARRAY
22730: PUSH
22731: FOR_TO
22732: IFFALSE 22773
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
22734: LD_EXP 85
22738: PUSH
22739: LD_VAR 0 5
22743: ARRAY
22744: PUSH
22745: LD_VAR 0 4
22749: ARRAY
22750: PUSH
22751: LD_INT 1
22753: ARRAY
22754: PUSH
22755: LD_VAR 0 2
22759: EQUAL
22760: IFFALSE 22771
// KillUnit ( vehicle ) ;
22762: LD_VAR 0 2
22766: PPUSH
22767: CALL_OW 66
22771: GO 22731
22773: POP
22774: POP
// end ;
22775: LD_VAR 0 3
22779: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
22780: LD_EXP 89
22784: NOT
22785: IFFALSE 22820
22787: GO 22789
22789: DISABLE
// begin initMiner := true ;
22790: LD_ADDR_EXP 89
22794: PUSH
22795: LD_INT 1
22797: ST_TO_ADDR
// minersList := [ ] ;
22798: LD_ADDR_EXP 90
22802: PUSH
22803: EMPTY
22804: ST_TO_ADDR
// minerMinesList := [ ] ;
22805: LD_ADDR_EXP 91
22809: PUSH
22810: EMPTY
22811: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
22812: LD_ADDR_EXP 92
22816: PUSH
22817: LD_INT 5
22819: ST_TO_ADDR
// end ;
22820: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
22821: LD_EXP 89
22825: PUSH
22826: LD_INT 34
22828: PUSH
22829: LD_EXP 100
22833: PUSH
22834: EMPTY
22835: LIST
22836: LIST
22837: PPUSH
22838: CALL_OW 69
22842: AND
22843: IFFALSE 23306
22845: GO 22847
22847: DISABLE
22848: LD_INT 0
22850: PPUSH
22851: PPUSH
22852: PPUSH
22853: PPUSH
// begin enable ;
22854: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
22855: LD_ADDR_VAR 0 1
22859: PUSH
22860: LD_INT 34
22862: PUSH
22863: LD_EXP 100
22867: PUSH
22868: EMPTY
22869: LIST
22870: LIST
22871: PPUSH
22872: CALL_OW 69
22876: PUSH
22877: FOR_IN
22878: IFFALSE 22950
// begin if not i in minersList then
22880: LD_VAR 0 1
22884: PUSH
22885: LD_EXP 90
22889: IN
22890: NOT
22891: IFFALSE 22948
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
22893: LD_ADDR_EXP 90
22897: PUSH
22898: LD_EXP 90
22902: PPUSH
22903: LD_EXP 90
22907: PUSH
22908: LD_INT 1
22910: PLUS
22911: PPUSH
22912: LD_VAR 0 1
22916: PPUSH
22917: CALL_OW 1
22921: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
22922: LD_ADDR_EXP 91
22926: PUSH
22927: LD_EXP 91
22931: PPUSH
22932: LD_EXP 91
22936: PUSH
22937: LD_INT 1
22939: PLUS
22940: PPUSH
22941: EMPTY
22942: PPUSH
22943: CALL_OW 1
22947: ST_TO_ADDR
// end end ;
22948: GO 22877
22950: POP
22951: POP
// for i := minerMinesList downto 1 do
22952: LD_ADDR_VAR 0 1
22956: PUSH
22957: DOUBLE
22958: LD_EXP 91
22962: INC
22963: ST_TO_ADDR
22964: LD_INT 1
22966: PUSH
22967: FOR_DOWNTO
22968: IFFALSE 23304
// begin if IsLive ( minersList [ i ] ) then
22970: LD_EXP 90
22974: PUSH
22975: LD_VAR 0 1
22979: ARRAY
22980: PPUSH
22981: CALL_OW 300
22985: IFFALSE 23013
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
22987: LD_EXP 90
22991: PUSH
22992: LD_VAR 0 1
22996: ARRAY
22997: PPUSH
22998: LD_EXP 91
23002: PUSH
23003: LD_VAR 0 1
23007: ARRAY
23008: PPUSH
23009: CALL_OW 505
// if not minerMinesList [ i ] then
23013: LD_EXP 91
23017: PUSH
23018: LD_VAR 0 1
23022: ARRAY
23023: NOT
23024: IFFALSE 23028
// continue ;
23026: GO 22967
// for j := minerMinesList [ i ] downto 1 do
23028: LD_ADDR_VAR 0 2
23032: PUSH
23033: DOUBLE
23034: LD_EXP 91
23038: PUSH
23039: LD_VAR 0 1
23043: ARRAY
23044: INC
23045: ST_TO_ADDR
23046: LD_INT 1
23048: PUSH
23049: FOR_DOWNTO
23050: IFFALSE 23300
// begin side := GetSide ( minersList [ i ] ) ;
23052: LD_ADDR_VAR 0 3
23056: PUSH
23057: LD_EXP 90
23061: PUSH
23062: LD_VAR 0 1
23066: ARRAY
23067: PPUSH
23068: CALL_OW 255
23072: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
23073: LD_ADDR_VAR 0 4
23077: PUSH
23078: LD_EXP 91
23082: PUSH
23083: LD_VAR 0 1
23087: ARRAY
23088: PUSH
23089: LD_VAR 0 2
23093: ARRAY
23094: PUSH
23095: LD_INT 1
23097: ARRAY
23098: PPUSH
23099: LD_EXP 91
23103: PUSH
23104: LD_VAR 0 1
23108: ARRAY
23109: PUSH
23110: LD_VAR 0 2
23114: ARRAY
23115: PUSH
23116: LD_INT 2
23118: ARRAY
23119: PPUSH
23120: CALL_OW 428
23124: ST_TO_ADDR
// if not tmp then
23125: LD_VAR 0 4
23129: NOT
23130: IFFALSE 23134
// continue ;
23132: GO 23049
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
23134: LD_VAR 0 4
23138: PUSH
23139: LD_INT 81
23141: PUSH
23142: LD_VAR 0 3
23146: PUSH
23147: EMPTY
23148: LIST
23149: LIST
23150: PPUSH
23151: CALL_OW 69
23155: IN
23156: PUSH
23157: LD_EXP 91
23161: PUSH
23162: LD_VAR 0 1
23166: ARRAY
23167: PUSH
23168: LD_VAR 0 2
23172: ARRAY
23173: PUSH
23174: LD_INT 1
23176: ARRAY
23177: PPUSH
23178: LD_EXP 91
23182: PUSH
23183: LD_VAR 0 1
23187: ARRAY
23188: PUSH
23189: LD_VAR 0 2
23193: ARRAY
23194: PUSH
23195: LD_INT 2
23197: ARRAY
23198: PPUSH
23199: CALL_OW 458
23203: AND
23204: IFFALSE 23298
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
23206: LD_EXP 91
23210: PUSH
23211: LD_VAR 0 1
23215: ARRAY
23216: PUSH
23217: LD_VAR 0 2
23221: ARRAY
23222: PUSH
23223: LD_INT 1
23225: ARRAY
23226: PPUSH
23227: LD_EXP 91
23231: PUSH
23232: LD_VAR 0 1
23236: ARRAY
23237: PUSH
23238: LD_VAR 0 2
23242: ARRAY
23243: PUSH
23244: LD_INT 2
23246: ARRAY
23247: PPUSH
23248: LD_VAR 0 3
23252: PPUSH
23253: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
23257: LD_ADDR_EXP 91
23261: PUSH
23262: LD_EXP 91
23266: PPUSH
23267: LD_VAR 0 1
23271: PPUSH
23272: LD_EXP 91
23276: PUSH
23277: LD_VAR 0 1
23281: ARRAY
23282: PPUSH
23283: LD_VAR 0 2
23287: PPUSH
23288: CALL_OW 3
23292: PPUSH
23293: CALL_OW 1
23297: ST_TO_ADDR
// end ; end ;
23298: GO 23049
23300: POP
23301: POP
// end ;
23302: GO 22967
23304: POP
23305: POP
// end ;
23306: PPOPN 4
23308: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
23309: LD_INT 0
23311: PPUSH
23312: PPUSH
// result := false ;
23313: LD_ADDR_VAR 0 4
23317: PUSH
23318: LD_INT 0
23320: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
23321: LD_VAR 0 1
23325: PPUSH
23326: CALL_OW 264
23330: PUSH
23331: LD_EXP 100
23335: EQUAL
23336: NOT
23337: IFFALSE 23341
// exit ;
23339: GO 23581
// index := GetElementIndex ( minersList , unit ) ;
23341: LD_ADDR_VAR 0 5
23345: PUSH
23346: LD_EXP 90
23350: PPUSH
23351: LD_VAR 0 1
23355: PPUSH
23356: CALL 29733 0 2
23360: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
23361: LD_EXP 91
23365: PUSH
23366: LD_VAR 0 5
23370: ARRAY
23371: PUSH
23372: LD_EXP 92
23376: GREATEREQUAL
23377: IFFALSE 23381
// exit ;
23379: GO 23581
// ComMoveXY ( unit , x , y ) ;
23381: LD_VAR 0 1
23385: PPUSH
23386: LD_VAR 0 2
23390: PPUSH
23391: LD_VAR 0 3
23395: PPUSH
23396: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23400: LD_INT 35
23402: PPUSH
23403: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
23407: LD_VAR 0 1
23411: PPUSH
23412: LD_VAR 0 2
23416: PPUSH
23417: LD_VAR 0 3
23421: PPUSH
23422: CALL 60505 0 3
23426: NOT
23427: PUSH
23428: LD_VAR 0 1
23432: PPUSH
23433: CALL_OW 314
23437: AND
23438: IFFALSE 23442
// exit ;
23440: GO 23581
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
23442: LD_VAR 0 2
23446: PPUSH
23447: LD_VAR 0 3
23451: PPUSH
23452: CALL_OW 428
23456: PUSH
23457: LD_VAR 0 1
23461: EQUAL
23462: PUSH
23463: LD_VAR 0 1
23467: PPUSH
23468: CALL_OW 314
23472: NOT
23473: AND
23474: IFFALSE 23400
// PlaySoundXY ( x , y , PlantMine ) ;
23476: LD_VAR 0 2
23480: PPUSH
23481: LD_VAR 0 3
23485: PPUSH
23486: LD_STRING PlantMine
23488: PPUSH
23489: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
23493: LD_VAR 0 2
23497: PPUSH
23498: LD_VAR 0 3
23502: PPUSH
23503: LD_VAR 0 1
23507: PPUSH
23508: CALL_OW 255
23512: PPUSH
23513: LD_INT 0
23515: PPUSH
23516: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
23520: LD_ADDR_EXP 91
23524: PUSH
23525: LD_EXP 91
23529: PPUSH
23530: LD_VAR 0 5
23534: PUSH
23535: LD_EXP 91
23539: PUSH
23540: LD_VAR 0 5
23544: ARRAY
23545: PUSH
23546: LD_INT 1
23548: PLUS
23549: PUSH
23550: EMPTY
23551: LIST
23552: LIST
23553: PPUSH
23554: LD_VAR 0 2
23558: PUSH
23559: LD_VAR 0 3
23563: PUSH
23564: EMPTY
23565: LIST
23566: LIST
23567: PPUSH
23568: CALL 29948 0 3
23572: ST_TO_ADDR
// result := true ;
23573: LD_ADDR_VAR 0 4
23577: PUSH
23578: LD_INT 1
23580: ST_TO_ADDR
// end ;
23581: LD_VAR 0 4
23585: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
23586: LD_INT 0
23588: PPUSH
23589: PPUSH
23590: PPUSH
// if not unit in minersList then
23591: LD_VAR 0 1
23595: PUSH
23596: LD_EXP 90
23600: IN
23601: NOT
23602: IFFALSE 23606
// exit ;
23604: GO 23998
// index := GetElementIndex ( minersList , unit ) ;
23606: LD_ADDR_VAR 0 6
23610: PUSH
23611: LD_EXP 90
23615: PPUSH
23616: LD_VAR 0 1
23620: PPUSH
23621: CALL 29733 0 2
23625: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
23626: LD_ADDR_VAR 0 5
23630: PUSH
23631: DOUBLE
23632: LD_EXP 91
23636: PUSH
23637: LD_VAR 0 6
23641: ARRAY
23642: INC
23643: ST_TO_ADDR
23644: LD_INT 1
23646: PUSH
23647: FOR_DOWNTO
23648: IFFALSE 23809
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
23650: LD_EXP 91
23654: PUSH
23655: LD_VAR 0 6
23659: ARRAY
23660: PUSH
23661: LD_VAR 0 5
23665: ARRAY
23666: PUSH
23667: LD_INT 1
23669: ARRAY
23670: PUSH
23671: LD_VAR 0 2
23675: EQUAL
23676: PUSH
23677: LD_EXP 91
23681: PUSH
23682: LD_VAR 0 6
23686: ARRAY
23687: PUSH
23688: LD_VAR 0 5
23692: ARRAY
23693: PUSH
23694: LD_INT 2
23696: ARRAY
23697: PUSH
23698: LD_VAR 0 3
23702: EQUAL
23703: AND
23704: IFFALSE 23807
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
23706: LD_EXP 91
23710: PUSH
23711: LD_VAR 0 6
23715: ARRAY
23716: PUSH
23717: LD_VAR 0 5
23721: ARRAY
23722: PUSH
23723: LD_INT 1
23725: ARRAY
23726: PPUSH
23727: LD_EXP 91
23731: PUSH
23732: LD_VAR 0 6
23736: ARRAY
23737: PUSH
23738: LD_VAR 0 5
23742: ARRAY
23743: PUSH
23744: LD_INT 2
23746: ARRAY
23747: PPUSH
23748: LD_VAR 0 1
23752: PPUSH
23753: CALL_OW 255
23757: PPUSH
23758: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
23762: LD_ADDR_EXP 91
23766: PUSH
23767: LD_EXP 91
23771: PPUSH
23772: LD_VAR 0 6
23776: PPUSH
23777: LD_EXP 91
23781: PUSH
23782: LD_VAR 0 6
23786: ARRAY
23787: PPUSH
23788: LD_VAR 0 5
23792: PPUSH
23793: CALL_OW 3
23797: PPUSH
23798: CALL_OW 1
23802: ST_TO_ADDR
// exit ;
23803: POP
23804: POP
23805: GO 23998
// end ; end ;
23807: GO 23647
23809: POP
23810: POP
// for i := minerMinesList [ index ] downto 1 do
23811: LD_ADDR_VAR 0 5
23815: PUSH
23816: DOUBLE
23817: LD_EXP 91
23821: PUSH
23822: LD_VAR 0 6
23826: ARRAY
23827: INC
23828: ST_TO_ADDR
23829: LD_INT 1
23831: PUSH
23832: FOR_DOWNTO
23833: IFFALSE 23996
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
23835: LD_EXP 91
23839: PUSH
23840: LD_VAR 0 6
23844: ARRAY
23845: PUSH
23846: LD_VAR 0 5
23850: ARRAY
23851: PUSH
23852: LD_INT 1
23854: ARRAY
23855: PPUSH
23856: LD_EXP 91
23860: PUSH
23861: LD_VAR 0 6
23865: ARRAY
23866: PUSH
23867: LD_VAR 0 5
23871: ARRAY
23872: PUSH
23873: LD_INT 2
23875: ARRAY
23876: PPUSH
23877: LD_VAR 0 2
23881: PPUSH
23882: LD_VAR 0 3
23886: PPUSH
23887: CALL_OW 298
23891: PUSH
23892: LD_INT 6
23894: LESS
23895: IFFALSE 23994
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
23897: LD_EXP 91
23901: PUSH
23902: LD_VAR 0 6
23906: ARRAY
23907: PUSH
23908: LD_VAR 0 5
23912: ARRAY
23913: PUSH
23914: LD_INT 1
23916: ARRAY
23917: PPUSH
23918: LD_EXP 91
23922: PUSH
23923: LD_VAR 0 6
23927: ARRAY
23928: PUSH
23929: LD_VAR 0 5
23933: ARRAY
23934: PUSH
23935: LD_INT 2
23937: ARRAY
23938: PPUSH
23939: LD_VAR 0 1
23943: PPUSH
23944: CALL_OW 255
23948: PPUSH
23949: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
23953: LD_ADDR_EXP 91
23957: PUSH
23958: LD_EXP 91
23962: PPUSH
23963: LD_VAR 0 6
23967: PPUSH
23968: LD_EXP 91
23972: PUSH
23973: LD_VAR 0 6
23977: ARRAY
23978: PPUSH
23979: LD_VAR 0 5
23983: PPUSH
23984: CALL_OW 3
23988: PPUSH
23989: CALL_OW 1
23993: ST_TO_ADDR
// end ; end ;
23994: GO 23832
23996: POP
23997: POP
// end ;
23998: LD_VAR 0 4
24002: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
24003: LD_INT 0
24005: PPUSH
24006: PPUSH
24007: PPUSH
24008: PPUSH
24009: PPUSH
24010: PPUSH
24011: PPUSH
24012: PPUSH
24013: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
24014: LD_VAR 0 1
24018: PPUSH
24019: CALL_OW 264
24023: PUSH
24024: LD_EXP 100
24028: EQUAL
24029: NOT
24030: PUSH
24031: LD_VAR 0 1
24035: PUSH
24036: LD_EXP 90
24040: IN
24041: NOT
24042: OR
24043: IFFALSE 24047
// exit ;
24045: GO 24369
// index := GetElementIndex ( minersList , unit ) ;
24047: LD_ADDR_VAR 0 6
24051: PUSH
24052: LD_EXP 90
24056: PPUSH
24057: LD_VAR 0 1
24061: PPUSH
24062: CALL 29733 0 2
24066: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
24067: LD_ADDR_VAR 0 8
24071: PUSH
24072: LD_EXP 92
24076: PUSH
24077: LD_EXP 91
24081: PUSH
24082: LD_VAR 0 6
24086: ARRAY
24087: MINUS
24088: ST_TO_ADDR
// if not minesFreeAmount then
24089: LD_VAR 0 8
24093: NOT
24094: IFFALSE 24098
// exit ;
24096: GO 24369
// tmp := [ ] ;
24098: LD_ADDR_VAR 0 7
24102: PUSH
24103: EMPTY
24104: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
24105: LD_ADDR_VAR 0 5
24109: PUSH
24110: DOUBLE
24111: LD_INT 1
24113: DEC
24114: ST_TO_ADDR
24115: LD_VAR 0 8
24119: PUSH
24120: FOR_TO
24121: IFFALSE 24316
// begin _d := rand ( 0 , 5 ) ;
24123: LD_ADDR_VAR 0 11
24127: PUSH
24128: LD_INT 0
24130: PPUSH
24131: LD_INT 5
24133: PPUSH
24134: CALL_OW 12
24138: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
24139: LD_ADDR_VAR 0 12
24143: PUSH
24144: LD_INT 2
24146: PPUSH
24147: LD_INT 6
24149: PPUSH
24150: CALL_OW 12
24154: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
24155: LD_ADDR_VAR 0 9
24159: PUSH
24160: LD_VAR 0 2
24164: PPUSH
24165: LD_VAR 0 11
24169: PPUSH
24170: LD_VAR 0 12
24174: PPUSH
24175: CALL_OW 272
24179: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
24180: LD_ADDR_VAR 0 10
24184: PUSH
24185: LD_VAR 0 3
24189: PPUSH
24190: LD_VAR 0 11
24194: PPUSH
24195: LD_VAR 0 12
24199: PPUSH
24200: CALL_OW 273
24204: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
24205: LD_VAR 0 9
24209: PPUSH
24210: LD_VAR 0 10
24214: PPUSH
24215: CALL_OW 488
24219: PUSH
24220: LD_VAR 0 9
24224: PUSH
24225: LD_VAR 0 10
24229: PUSH
24230: EMPTY
24231: LIST
24232: LIST
24233: PUSH
24234: LD_VAR 0 7
24238: IN
24239: NOT
24240: AND
24241: PUSH
24242: LD_VAR 0 9
24246: PPUSH
24247: LD_VAR 0 10
24251: PPUSH
24252: CALL_OW 458
24256: NOT
24257: AND
24258: IFFALSE 24300
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
24260: LD_ADDR_VAR 0 7
24264: PUSH
24265: LD_VAR 0 7
24269: PPUSH
24270: LD_VAR 0 7
24274: PUSH
24275: LD_INT 1
24277: PLUS
24278: PPUSH
24279: LD_VAR 0 9
24283: PUSH
24284: LD_VAR 0 10
24288: PUSH
24289: EMPTY
24290: LIST
24291: LIST
24292: PPUSH
24293: CALL_OW 1
24297: ST_TO_ADDR
24298: GO 24314
// i := i - 1 ;
24300: LD_ADDR_VAR 0 5
24304: PUSH
24305: LD_VAR 0 5
24309: PUSH
24310: LD_INT 1
24312: MINUS
24313: ST_TO_ADDR
// end ;
24314: GO 24120
24316: POP
24317: POP
// for i in tmp do
24318: LD_ADDR_VAR 0 5
24322: PUSH
24323: LD_VAR 0 7
24327: PUSH
24328: FOR_IN
24329: IFFALSE 24367
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
24331: LD_VAR 0 1
24335: PPUSH
24336: LD_VAR 0 5
24340: PUSH
24341: LD_INT 1
24343: ARRAY
24344: PPUSH
24345: LD_VAR 0 5
24349: PUSH
24350: LD_INT 2
24352: ARRAY
24353: PPUSH
24354: CALL 23309 0 3
24358: NOT
24359: IFFALSE 24365
// exit ;
24361: POP
24362: POP
24363: GO 24369
24365: GO 24328
24367: POP
24368: POP
// end ;
24369: LD_VAR 0 4
24373: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
24374: LD_INT 0
24376: PPUSH
24377: PPUSH
24378: PPUSH
24379: PPUSH
24380: PPUSH
24381: PPUSH
24382: PPUSH
// if not GetClass ( unit ) = class_sniper then
24383: LD_VAR 0 1
24387: PPUSH
24388: CALL_OW 257
24392: PUSH
24393: LD_INT 5
24395: EQUAL
24396: NOT
24397: IFFALSE 24401
// exit ;
24399: GO 24789
// dist := 8 ;
24401: LD_ADDR_VAR 0 5
24405: PUSH
24406: LD_INT 8
24408: ST_TO_ADDR
// viewRange := 12 ;
24409: LD_ADDR_VAR 0 7
24413: PUSH
24414: LD_INT 12
24416: ST_TO_ADDR
// side := GetSide ( unit ) ;
24417: LD_ADDR_VAR 0 6
24421: PUSH
24422: LD_VAR 0 1
24426: PPUSH
24427: CALL_OW 255
24431: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
24432: LD_INT 61
24434: PPUSH
24435: LD_VAR 0 6
24439: PPUSH
24440: CALL_OW 321
24444: PUSH
24445: LD_INT 2
24447: EQUAL
24448: IFFALSE 24458
// viewRange := 16 ;
24450: LD_ADDR_VAR 0 7
24454: PUSH
24455: LD_INT 16
24457: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
24458: LD_VAR 0 1
24462: PPUSH
24463: LD_VAR 0 2
24467: PPUSH
24468: LD_VAR 0 3
24472: PPUSH
24473: CALL_OW 297
24477: PUSH
24478: LD_VAR 0 5
24482: GREATER
24483: IFFALSE 24562
// begin ComMoveXY ( unit , x , y ) ;
24485: LD_VAR 0 1
24489: PPUSH
24490: LD_VAR 0 2
24494: PPUSH
24495: LD_VAR 0 3
24499: PPUSH
24500: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24504: LD_INT 35
24506: PPUSH
24507: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
24511: LD_VAR 0 1
24515: PPUSH
24516: LD_VAR 0 2
24520: PPUSH
24521: LD_VAR 0 3
24525: PPUSH
24526: CALL 60505 0 3
24530: NOT
24531: IFFALSE 24535
// exit ;
24533: GO 24789
// until GetDistUnitXY ( unit , x , y ) < dist ;
24535: LD_VAR 0 1
24539: PPUSH
24540: LD_VAR 0 2
24544: PPUSH
24545: LD_VAR 0 3
24549: PPUSH
24550: CALL_OW 297
24554: PUSH
24555: LD_VAR 0 5
24559: LESS
24560: IFFALSE 24504
// end ; ComTurnXY ( unit , x , y ) ;
24562: LD_VAR 0 1
24566: PPUSH
24567: LD_VAR 0 2
24571: PPUSH
24572: LD_VAR 0 3
24576: PPUSH
24577: CALL_OW 118
// wait ( 5 ) ;
24581: LD_INT 5
24583: PPUSH
24584: CALL_OW 67
// _d := GetDir ( unit ) ;
24588: LD_ADDR_VAR 0 10
24592: PUSH
24593: LD_VAR 0 1
24597: PPUSH
24598: CALL_OW 254
24602: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
24603: LD_ADDR_VAR 0 8
24607: PUSH
24608: LD_VAR 0 1
24612: PPUSH
24613: CALL_OW 250
24617: PPUSH
24618: LD_VAR 0 10
24622: PPUSH
24623: LD_VAR 0 5
24627: PPUSH
24628: CALL_OW 272
24632: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
24633: LD_ADDR_VAR 0 9
24637: PUSH
24638: LD_VAR 0 1
24642: PPUSH
24643: CALL_OW 251
24647: PPUSH
24648: LD_VAR 0 10
24652: PPUSH
24653: LD_VAR 0 5
24657: PPUSH
24658: CALL_OW 273
24662: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24663: LD_VAR 0 8
24667: PPUSH
24668: LD_VAR 0 9
24672: PPUSH
24673: CALL_OW 488
24677: NOT
24678: IFFALSE 24682
// exit ;
24680: GO 24789
// ComAnimCustom ( unit , 1 ) ;
24682: LD_VAR 0 1
24686: PPUSH
24687: LD_INT 1
24689: PPUSH
24690: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
24694: LD_VAR 0 8
24698: PPUSH
24699: LD_VAR 0 9
24703: PPUSH
24704: LD_VAR 0 6
24708: PPUSH
24709: LD_VAR 0 7
24713: PPUSH
24714: CALL_OW 330
// repeat wait ( 1 ) ;
24718: LD_INT 1
24720: PPUSH
24721: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
24725: LD_VAR 0 1
24729: PPUSH
24730: CALL_OW 316
24734: PUSH
24735: LD_VAR 0 1
24739: PPUSH
24740: CALL_OW 314
24744: OR
24745: PUSH
24746: LD_VAR 0 1
24750: PPUSH
24751: CALL_OW 302
24755: NOT
24756: OR
24757: PUSH
24758: LD_VAR 0 1
24762: PPUSH
24763: CALL_OW 301
24767: OR
24768: IFFALSE 24718
// RemoveSeeing ( _x , _y , side ) ;
24770: LD_VAR 0 8
24774: PPUSH
24775: LD_VAR 0 9
24779: PPUSH
24780: LD_VAR 0 6
24784: PPUSH
24785: CALL_OW 331
// end ; end_of_file
24789: LD_VAR 0 4
24793: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
24794: LD_INT 0
24796: PPUSH
// ar_miner := 81 ;
24797: LD_ADDR_EXP 100
24801: PUSH
24802: LD_INT 81
24804: ST_TO_ADDR
// ar_crane := 88 ;
24805: LD_ADDR_EXP 99
24809: PUSH
24810: LD_INT 88
24812: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
24813: LD_ADDR_EXP 94
24817: PUSH
24818: LD_INT 89
24820: ST_TO_ADDR
// us_hack := 99 ;
24821: LD_ADDR_EXP 95
24825: PUSH
24826: LD_INT 99
24828: ST_TO_ADDR
// us_artillery := 97 ;
24829: LD_ADDR_EXP 96
24833: PUSH
24834: LD_INT 97
24836: ST_TO_ADDR
// ar_bio_bomb := 91 ;
24837: LD_ADDR_EXP 97
24841: PUSH
24842: LD_INT 91
24844: ST_TO_ADDR
// ar_mortar := 92 ;
24845: LD_ADDR_EXP 98
24849: PUSH
24850: LD_INT 92
24852: ST_TO_ADDR
// ru_radar := 98 ;
24853: LD_ADDR_EXP 93
24857: PUSH
24858: LD_INT 98
24860: ST_TO_ADDR
// tech_Artillery := 80 ;
24861: LD_ADDR_EXP 101
24865: PUSH
24866: LD_INT 80
24868: ST_TO_ADDR
// tech_RadMat := 81 ;
24869: LD_ADDR_EXP 102
24873: PUSH
24874: LD_INT 81
24876: ST_TO_ADDR
// tech_BasicTools := 82 ;
24877: LD_ADDR_EXP 103
24881: PUSH
24882: LD_INT 82
24884: ST_TO_ADDR
// tech_Cargo := 83 ;
24885: LD_ADDR_EXP 104
24889: PUSH
24890: LD_INT 83
24892: ST_TO_ADDR
// tech_Track := 84 ;
24893: LD_ADDR_EXP 105
24897: PUSH
24898: LD_INT 84
24900: ST_TO_ADDR
// tech_Crane := 85 ;
24901: LD_ADDR_EXP 106
24905: PUSH
24906: LD_INT 85
24908: ST_TO_ADDR
// tech_Bulldozer := 86 ;
24909: LD_ADDR_EXP 107
24913: PUSH
24914: LD_INT 86
24916: ST_TO_ADDR
// tech_Hovercraft := 87 ;
24917: LD_ADDR_EXP 108
24921: PUSH
24922: LD_INT 87
24924: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
24925: LD_ADDR_EXP 109
24929: PUSH
24930: LD_INT 88
24932: ST_TO_ADDR
// class_mastodont := 31 ;
24933: LD_ADDR_EXP 110
24937: PUSH
24938: LD_INT 31
24940: ST_TO_ADDR
// class_horse := 21 ;
24941: LD_ADDR_EXP 111
24945: PUSH
24946: LD_INT 21
24948: ST_TO_ADDR
// end ;
24949: LD_VAR 0 1
24953: RET
// every 1 do
24954: GO 24956
24956: DISABLE
// InitGlobalVariables ; end_of_file
24957: CALL 24794 0 0
24961: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
24962: LD_INT 0
24964: PPUSH
24965: PPUSH
// if exist_mode then
24966: LD_VAR 0 2
24970: IFFALSE 24995
// unit := CreateCharacter ( prefix & ident ) else
24972: LD_ADDR_VAR 0 5
24976: PUSH
24977: LD_VAR 0 3
24981: PUSH
24982: LD_VAR 0 1
24986: STR
24987: PPUSH
24988: CALL_OW 34
24992: ST_TO_ADDR
24993: GO 25010
// unit := NewCharacter ( ident ) ;
24995: LD_ADDR_VAR 0 5
24999: PUSH
25000: LD_VAR 0 1
25004: PPUSH
25005: CALL_OW 25
25009: ST_TO_ADDR
// result := unit ;
25010: LD_ADDR_VAR 0 4
25014: PUSH
25015: LD_VAR 0 5
25019: ST_TO_ADDR
// end ;
25020: LD_VAR 0 4
25024: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
25025: LD_INT 0
25027: PPUSH
25028: PPUSH
// if not side or not nation then
25029: LD_VAR 0 1
25033: NOT
25034: PUSH
25035: LD_VAR 0 2
25039: NOT
25040: OR
25041: IFFALSE 25045
// exit ;
25043: GO 25813
// case nation of nation_american :
25045: LD_VAR 0 2
25049: PUSH
25050: LD_INT 1
25052: DOUBLE
25053: EQUAL
25054: IFTRUE 25058
25056: GO 25272
25058: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
25059: LD_ADDR_VAR 0 4
25063: PUSH
25064: LD_INT 35
25066: PUSH
25067: LD_INT 45
25069: PUSH
25070: LD_INT 46
25072: PUSH
25073: LD_INT 47
25075: PUSH
25076: LD_INT 82
25078: PUSH
25079: LD_INT 83
25081: PUSH
25082: LD_INT 84
25084: PUSH
25085: LD_INT 85
25087: PUSH
25088: LD_INT 86
25090: PUSH
25091: LD_INT 1
25093: PUSH
25094: LD_INT 2
25096: PUSH
25097: LD_INT 6
25099: PUSH
25100: LD_INT 15
25102: PUSH
25103: LD_INT 16
25105: PUSH
25106: LD_INT 7
25108: PUSH
25109: LD_INT 12
25111: PUSH
25112: LD_INT 13
25114: PUSH
25115: LD_INT 10
25117: PUSH
25118: LD_INT 14
25120: PUSH
25121: LD_INT 20
25123: PUSH
25124: LD_INT 21
25126: PUSH
25127: LD_INT 22
25129: PUSH
25130: LD_INT 25
25132: PUSH
25133: LD_INT 32
25135: PUSH
25136: LD_INT 27
25138: PUSH
25139: LD_INT 36
25141: PUSH
25142: LD_INT 69
25144: PUSH
25145: LD_INT 39
25147: PUSH
25148: LD_INT 34
25150: PUSH
25151: LD_INT 40
25153: PUSH
25154: LD_INT 48
25156: PUSH
25157: LD_INT 49
25159: PUSH
25160: LD_INT 50
25162: PUSH
25163: LD_INT 51
25165: PUSH
25166: LD_INT 52
25168: PUSH
25169: LD_INT 53
25171: PUSH
25172: LD_INT 54
25174: PUSH
25175: LD_INT 55
25177: PUSH
25178: LD_INT 56
25180: PUSH
25181: LD_INT 57
25183: PUSH
25184: LD_INT 58
25186: PUSH
25187: LD_INT 59
25189: PUSH
25190: LD_INT 60
25192: PUSH
25193: LD_INT 61
25195: PUSH
25196: LD_INT 62
25198: PUSH
25199: LD_INT 80
25201: PUSH
25202: LD_INT 82
25204: PUSH
25205: LD_INT 83
25207: PUSH
25208: LD_INT 84
25210: PUSH
25211: LD_INT 85
25213: PUSH
25214: LD_INT 86
25216: PUSH
25217: EMPTY
25218: LIST
25219: LIST
25220: LIST
25221: LIST
25222: LIST
25223: LIST
25224: LIST
25225: LIST
25226: LIST
25227: LIST
25228: LIST
25229: LIST
25230: LIST
25231: LIST
25232: LIST
25233: LIST
25234: LIST
25235: LIST
25236: LIST
25237: LIST
25238: LIST
25239: LIST
25240: LIST
25241: LIST
25242: LIST
25243: LIST
25244: LIST
25245: LIST
25246: LIST
25247: LIST
25248: LIST
25249: LIST
25250: LIST
25251: LIST
25252: LIST
25253: LIST
25254: LIST
25255: LIST
25256: LIST
25257: LIST
25258: LIST
25259: LIST
25260: LIST
25261: LIST
25262: LIST
25263: LIST
25264: LIST
25265: LIST
25266: LIST
25267: LIST
25268: LIST
25269: ST_TO_ADDR
25270: GO 25737
25272: LD_INT 2
25274: DOUBLE
25275: EQUAL
25276: IFTRUE 25280
25278: GO 25506
25280: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
25281: LD_ADDR_VAR 0 4
25285: PUSH
25286: LD_INT 35
25288: PUSH
25289: LD_INT 45
25291: PUSH
25292: LD_INT 46
25294: PUSH
25295: LD_INT 47
25297: PUSH
25298: LD_INT 82
25300: PUSH
25301: LD_INT 83
25303: PUSH
25304: LD_INT 84
25306: PUSH
25307: LD_INT 85
25309: PUSH
25310: LD_INT 87
25312: PUSH
25313: LD_INT 70
25315: PUSH
25316: LD_INT 1
25318: PUSH
25319: LD_INT 11
25321: PUSH
25322: LD_INT 3
25324: PUSH
25325: LD_INT 4
25327: PUSH
25328: LD_INT 5
25330: PUSH
25331: LD_INT 6
25333: PUSH
25334: LD_INT 15
25336: PUSH
25337: LD_INT 18
25339: PUSH
25340: LD_INT 7
25342: PUSH
25343: LD_INT 17
25345: PUSH
25346: LD_INT 8
25348: PUSH
25349: LD_INT 20
25351: PUSH
25352: LD_INT 21
25354: PUSH
25355: LD_INT 22
25357: PUSH
25358: LD_INT 72
25360: PUSH
25361: LD_INT 26
25363: PUSH
25364: LD_INT 69
25366: PUSH
25367: LD_INT 39
25369: PUSH
25370: LD_INT 40
25372: PUSH
25373: LD_INT 41
25375: PUSH
25376: LD_INT 42
25378: PUSH
25379: LD_INT 43
25381: PUSH
25382: LD_INT 48
25384: PUSH
25385: LD_INT 49
25387: PUSH
25388: LD_INT 50
25390: PUSH
25391: LD_INT 51
25393: PUSH
25394: LD_INT 52
25396: PUSH
25397: LD_INT 53
25399: PUSH
25400: LD_INT 54
25402: PUSH
25403: LD_INT 55
25405: PUSH
25406: LD_INT 56
25408: PUSH
25409: LD_INT 60
25411: PUSH
25412: LD_INT 61
25414: PUSH
25415: LD_INT 62
25417: PUSH
25418: LD_INT 66
25420: PUSH
25421: LD_INT 67
25423: PUSH
25424: LD_INT 68
25426: PUSH
25427: LD_INT 81
25429: PUSH
25430: LD_INT 82
25432: PUSH
25433: LD_INT 83
25435: PUSH
25436: LD_INT 84
25438: PUSH
25439: LD_INT 85
25441: PUSH
25442: LD_INT 87
25444: PUSH
25445: LD_INT 88
25447: PUSH
25448: EMPTY
25449: LIST
25450: LIST
25451: LIST
25452: LIST
25453: LIST
25454: LIST
25455: LIST
25456: LIST
25457: LIST
25458: LIST
25459: LIST
25460: LIST
25461: LIST
25462: LIST
25463: LIST
25464: LIST
25465: LIST
25466: LIST
25467: LIST
25468: LIST
25469: LIST
25470: LIST
25471: LIST
25472: LIST
25473: LIST
25474: LIST
25475: LIST
25476: LIST
25477: LIST
25478: LIST
25479: LIST
25480: LIST
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: LIST
25486: LIST
25487: LIST
25488: LIST
25489: LIST
25490: LIST
25491: LIST
25492: LIST
25493: LIST
25494: LIST
25495: LIST
25496: LIST
25497: LIST
25498: LIST
25499: LIST
25500: LIST
25501: LIST
25502: LIST
25503: ST_TO_ADDR
25504: GO 25737
25506: LD_INT 3
25508: DOUBLE
25509: EQUAL
25510: IFTRUE 25514
25512: GO 25736
25514: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
25515: LD_ADDR_VAR 0 4
25519: PUSH
25520: LD_INT 46
25522: PUSH
25523: LD_INT 47
25525: PUSH
25526: LD_INT 1
25528: PUSH
25529: LD_INT 2
25531: PUSH
25532: LD_INT 82
25534: PUSH
25535: LD_INT 83
25537: PUSH
25538: LD_INT 84
25540: PUSH
25541: LD_INT 85
25543: PUSH
25544: LD_INT 86
25546: PUSH
25547: LD_INT 11
25549: PUSH
25550: LD_INT 9
25552: PUSH
25553: LD_INT 20
25555: PUSH
25556: LD_INT 19
25558: PUSH
25559: LD_INT 21
25561: PUSH
25562: LD_INT 24
25564: PUSH
25565: LD_INT 22
25567: PUSH
25568: LD_INT 25
25570: PUSH
25571: LD_INT 28
25573: PUSH
25574: LD_INT 29
25576: PUSH
25577: LD_INT 30
25579: PUSH
25580: LD_INT 31
25582: PUSH
25583: LD_INT 37
25585: PUSH
25586: LD_INT 38
25588: PUSH
25589: LD_INT 32
25591: PUSH
25592: LD_INT 27
25594: PUSH
25595: LD_INT 33
25597: PUSH
25598: LD_INT 69
25600: PUSH
25601: LD_INT 39
25603: PUSH
25604: LD_INT 34
25606: PUSH
25607: LD_INT 40
25609: PUSH
25610: LD_INT 71
25612: PUSH
25613: LD_INT 23
25615: PUSH
25616: LD_INT 44
25618: PUSH
25619: LD_INT 48
25621: PUSH
25622: LD_INT 49
25624: PUSH
25625: LD_INT 50
25627: PUSH
25628: LD_INT 51
25630: PUSH
25631: LD_INT 52
25633: PUSH
25634: LD_INT 53
25636: PUSH
25637: LD_INT 54
25639: PUSH
25640: LD_INT 55
25642: PUSH
25643: LD_INT 56
25645: PUSH
25646: LD_INT 57
25648: PUSH
25649: LD_INT 58
25651: PUSH
25652: LD_INT 59
25654: PUSH
25655: LD_INT 63
25657: PUSH
25658: LD_INT 64
25660: PUSH
25661: LD_INT 65
25663: PUSH
25664: LD_INT 82
25666: PUSH
25667: LD_INT 83
25669: PUSH
25670: LD_INT 84
25672: PUSH
25673: LD_INT 85
25675: PUSH
25676: LD_INT 86
25678: PUSH
25679: EMPTY
25680: LIST
25681: LIST
25682: LIST
25683: LIST
25684: LIST
25685: LIST
25686: LIST
25687: LIST
25688: LIST
25689: LIST
25690: LIST
25691: LIST
25692: LIST
25693: LIST
25694: LIST
25695: LIST
25696: LIST
25697: LIST
25698: LIST
25699: LIST
25700: LIST
25701: LIST
25702: LIST
25703: LIST
25704: LIST
25705: LIST
25706: LIST
25707: LIST
25708: LIST
25709: LIST
25710: LIST
25711: LIST
25712: LIST
25713: LIST
25714: LIST
25715: LIST
25716: LIST
25717: LIST
25718: LIST
25719: LIST
25720: LIST
25721: LIST
25722: LIST
25723: LIST
25724: LIST
25725: LIST
25726: LIST
25727: LIST
25728: LIST
25729: LIST
25730: LIST
25731: LIST
25732: LIST
25733: ST_TO_ADDR
25734: GO 25737
25736: POP
// if state > - 1 and state < 3 then
25737: LD_VAR 0 3
25741: PUSH
25742: LD_INT 1
25744: NEG
25745: GREATER
25746: PUSH
25747: LD_VAR 0 3
25751: PUSH
25752: LD_INT 3
25754: LESS
25755: AND
25756: IFFALSE 25813
// for i in result do
25758: LD_ADDR_VAR 0 5
25762: PUSH
25763: LD_VAR 0 4
25767: PUSH
25768: FOR_IN
25769: IFFALSE 25811
// if GetTech ( i , side ) <> state then
25771: LD_VAR 0 5
25775: PPUSH
25776: LD_VAR 0 1
25780: PPUSH
25781: CALL_OW 321
25785: PUSH
25786: LD_VAR 0 3
25790: NONEQUAL
25791: IFFALSE 25809
// result := result diff i ;
25793: LD_ADDR_VAR 0 4
25797: PUSH
25798: LD_VAR 0 4
25802: PUSH
25803: LD_VAR 0 5
25807: DIFF
25808: ST_TO_ADDR
25809: GO 25768
25811: POP
25812: POP
// end ;
25813: LD_VAR 0 4
25817: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
25818: LD_INT 0
25820: PPUSH
25821: PPUSH
25822: PPUSH
// result := true ;
25823: LD_ADDR_VAR 0 3
25827: PUSH
25828: LD_INT 1
25830: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
25831: LD_ADDR_VAR 0 5
25835: PUSH
25836: LD_VAR 0 2
25840: PPUSH
25841: CALL_OW 480
25845: ST_TO_ADDR
// if not tmp then
25846: LD_VAR 0 5
25850: NOT
25851: IFFALSE 25855
// exit ;
25853: GO 25904
// for i in tmp do
25855: LD_ADDR_VAR 0 4
25859: PUSH
25860: LD_VAR 0 5
25864: PUSH
25865: FOR_IN
25866: IFFALSE 25902
// if GetTech ( i , side ) <> state_researched then
25868: LD_VAR 0 4
25872: PPUSH
25873: LD_VAR 0 1
25877: PPUSH
25878: CALL_OW 321
25882: PUSH
25883: LD_INT 2
25885: NONEQUAL
25886: IFFALSE 25900
// begin result := false ;
25888: LD_ADDR_VAR 0 3
25892: PUSH
25893: LD_INT 0
25895: ST_TO_ADDR
// exit ;
25896: POP
25897: POP
25898: GO 25904
// end ;
25900: GO 25865
25902: POP
25903: POP
// end ;
25904: LD_VAR 0 3
25908: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
25909: LD_INT 0
25911: PPUSH
25912: PPUSH
25913: PPUSH
25914: PPUSH
25915: PPUSH
25916: PPUSH
25917: PPUSH
25918: PPUSH
25919: PPUSH
25920: PPUSH
25921: PPUSH
25922: PPUSH
25923: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
25924: LD_VAR 0 1
25928: NOT
25929: PUSH
25930: LD_VAR 0 1
25934: PPUSH
25935: CALL_OW 257
25939: PUSH
25940: LD_INT 9
25942: NONEQUAL
25943: OR
25944: IFFALSE 25948
// exit ;
25946: GO 26521
// side := GetSide ( unit ) ;
25948: LD_ADDR_VAR 0 9
25952: PUSH
25953: LD_VAR 0 1
25957: PPUSH
25958: CALL_OW 255
25962: ST_TO_ADDR
// tech_space := tech_spacanom ;
25963: LD_ADDR_VAR 0 12
25967: PUSH
25968: LD_INT 29
25970: ST_TO_ADDR
// tech_time := tech_taurad ;
25971: LD_ADDR_VAR 0 13
25975: PUSH
25976: LD_INT 28
25978: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
25979: LD_ADDR_VAR 0 11
25983: PUSH
25984: LD_VAR 0 1
25988: PPUSH
25989: CALL_OW 310
25993: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
25994: LD_VAR 0 11
25998: PPUSH
25999: CALL_OW 247
26003: PUSH
26004: LD_INT 2
26006: EQUAL
26007: IFFALSE 26011
// exit ;
26009: GO 26521
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26011: LD_ADDR_VAR 0 8
26015: PUSH
26016: LD_INT 81
26018: PUSH
26019: LD_VAR 0 9
26023: PUSH
26024: EMPTY
26025: LIST
26026: LIST
26027: PUSH
26028: LD_INT 3
26030: PUSH
26031: LD_INT 21
26033: PUSH
26034: LD_INT 3
26036: PUSH
26037: EMPTY
26038: LIST
26039: LIST
26040: PUSH
26041: EMPTY
26042: LIST
26043: LIST
26044: PUSH
26045: EMPTY
26046: LIST
26047: LIST
26048: PPUSH
26049: CALL_OW 69
26053: ST_TO_ADDR
// if not tmp then
26054: LD_VAR 0 8
26058: NOT
26059: IFFALSE 26063
// exit ;
26061: GO 26521
// if in_unit then
26063: LD_VAR 0 11
26067: IFFALSE 26091
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
26069: LD_ADDR_VAR 0 10
26073: PUSH
26074: LD_VAR 0 8
26078: PPUSH
26079: LD_VAR 0 11
26083: PPUSH
26084: CALL_OW 74
26088: ST_TO_ADDR
26089: GO 26111
// enemy := NearestUnitToUnit ( tmp , unit ) ;
26091: LD_ADDR_VAR 0 10
26095: PUSH
26096: LD_VAR 0 8
26100: PPUSH
26101: LD_VAR 0 1
26105: PPUSH
26106: CALL_OW 74
26110: ST_TO_ADDR
// if not enemy then
26111: LD_VAR 0 10
26115: NOT
26116: IFFALSE 26120
// exit ;
26118: GO 26521
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
26120: LD_VAR 0 11
26124: PUSH
26125: LD_VAR 0 11
26129: PPUSH
26130: LD_VAR 0 10
26134: PPUSH
26135: CALL_OW 296
26139: PUSH
26140: LD_INT 13
26142: GREATER
26143: AND
26144: PUSH
26145: LD_VAR 0 1
26149: PPUSH
26150: LD_VAR 0 10
26154: PPUSH
26155: CALL_OW 296
26159: PUSH
26160: LD_INT 12
26162: GREATER
26163: OR
26164: IFFALSE 26168
// exit ;
26166: GO 26521
// missile := [ 1 ] ;
26168: LD_ADDR_VAR 0 14
26172: PUSH
26173: LD_INT 1
26175: PUSH
26176: EMPTY
26177: LIST
26178: ST_TO_ADDR
// if Researched ( side , tech_space ) then
26179: LD_VAR 0 9
26183: PPUSH
26184: LD_VAR 0 12
26188: PPUSH
26189: CALL_OW 325
26193: IFFALSE 26222
// missile := Insert ( missile , missile + 1 , 2 ) ;
26195: LD_ADDR_VAR 0 14
26199: PUSH
26200: LD_VAR 0 14
26204: PPUSH
26205: LD_VAR 0 14
26209: PUSH
26210: LD_INT 1
26212: PLUS
26213: PPUSH
26214: LD_INT 2
26216: PPUSH
26217: CALL_OW 2
26221: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
26222: LD_VAR 0 9
26226: PPUSH
26227: LD_VAR 0 13
26231: PPUSH
26232: CALL_OW 325
26236: PUSH
26237: LD_VAR 0 10
26241: PPUSH
26242: CALL_OW 255
26246: PPUSH
26247: LD_VAR 0 13
26251: PPUSH
26252: CALL_OW 325
26256: NOT
26257: AND
26258: IFFALSE 26287
// missile := Insert ( missile , missile + 1 , 3 ) ;
26260: LD_ADDR_VAR 0 14
26264: PUSH
26265: LD_VAR 0 14
26269: PPUSH
26270: LD_VAR 0 14
26274: PUSH
26275: LD_INT 1
26277: PLUS
26278: PPUSH
26279: LD_INT 3
26281: PPUSH
26282: CALL_OW 2
26286: ST_TO_ADDR
// if missile < 2 then
26287: LD_VAR 0 14
26291: PUSH
26292: LD_INT 2
26294: LESS
26295: IFFALSE 26299
// exit ;
26297: GO 26521
// x := GetX ( enemy ) ;
26299: LD_ADDR_VAR 0 4
26303: PUSH
26304: LD_VAR 0 10
26308: PPUSH
26309: CALL_OW 250
26313: ST_TO_ADDR
// y := GetY ( enemy ) ;
26314: LD_ADDR_VAR 0 5
26318: PUSH
26319: LD_VAR 0 10
26323: PPUSH
26324: CALL_OW 251
26328: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
26329: LD_ADDR_VAR 0 6
26333: PUSH
26334: LD_VAR 0 4
26338: PUSH
26339: LD_INT 1
26341: NEG
26342: PPUSH
26343: LD_INT 1
26345: PPUSH
26346: CALL_OW 12
26350: PLUS
26351: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
26352: LD_ADDR_VAR 0 7
26356: PUSH
26357: LD_VAR 0 5
26361: PUSH
26362: LD_INT 1
26364: NEG
26365: PPUSH
26366: LD_INT 1
26368: PPUSH
26369: CALL_OW 12
26373: PLUS
26374: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26375: LD_VAR 0 6
26379: PPUSH
26380: LD_VAR 0 7
26384: PPUSH
26385: CALL_OW 488
26389: NOT
26390: IFFALSE 26412
// begin _x := x ;
26392: LD_ADDR_VAR 0 6
26396: PUSH
26397: LD_VAR 0 4
26401: ST_TO_ADDR
// _y := y ;
26402: LD_ADDR_VAR 0 7
26406: PUSH
26407: LD_VAR 0 5
26411: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
26412: LD_ADDR_VAR 0 3
26416: PUSH
26417: LD_INT 1
26419: PPUSH
26420: LD_VAR 0 14
26424: PPUSH
26425: CALL_OW 12
26429: ST_TO_ADDR
// case i of 1 :
26430: LD_VAR 0 3
26434: PUSH
26435: LD_INT 1
26437: DOUBLE
26438: EQUAL
26439: IFTRUE 26443
26441: GO 26460
26443: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
26444: LD_VAR 0 1
26448: PPUSH
26449: LD_VAR 0 10
26453: PPUSH
26454: CALL_OW 115
26458: GO 26521
26460: LD_INT 2
26462: DOUBLE
26463: EQUAL
26464: IFTRUE 26468
26466: GO 26490
26468: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
26469: LD_VAR 0 1
26473: PPUSH
26474: LD_VAR 0 6
26478: PPUSH
26479: LD_VAR 0 7
26483: PPUSH
26484: CALL_OW 153
26488: GO 26521
26490: LD_INT 3
26492: DOUBLE
26493: EQUAL
26494: IFTRUE 26498
26496: GO 26520
26498: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
26499: LD_VAR 0 1
26503: PPUSH
26504: LD_VAR 0 6
26508: PPUSH
26509: LD_VAR 0 7
26513: PPUSH
26514: CALL_OW 154
26518: GO 26521
26520: POP
// end ;
26521: LD_VAR 0 2
26525: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
26526: LD_INT 0
26528: PPUSH
26529: PPUSH
26530: PPUSH
26531: PPUSH
26532: PPUSH
26533: PPUSH
// if not unit or not building then
26534: LD_VAR 0 1
26538: NOT
26539: PUSH
26540: LD_VAR 0 2
26544: NOT
26545: OR
26546: IFFALSE 26550
// exit ;
26548: GO 26708
// x := GetX ( building ) ;
26550: LD_ADDR_VAR 0 5
26554: PUSH
26555: LD_VAR 0 2
26559: PPUSH
26560: CALL_OW 250
26564: ST_TO_ADDR
// y := GetY ( building ) ;
26565: LD_ADDR_VAR 0 6
26569: PUSH
26570: LD_VAR 0 2
26574: PPUSH
26575: CALL_OW 251
26579: ST_TO_ADDR
// for i = 0 to 5 do
26580: LD_ADDR_VAR 0 4
26584: PUSH
26585: DOUBLE
26586: LD_INT 0
26588: DEC
26589: ST_TO_ADDR
26590: LD_INT 5
26592: PUSH
26593: FOR_TO
26594: IFFALSE 26706
// begin _x := ShiftX ( x , i , 3 ) ;
26596: LD_ADDR_VAR 0 7
26600: PUSH
26601: LD_VAR 0 5
26605: PPUSH
26606: LD_VAR 0 4
26610: PPUSH
26611: LD_INT 3
26613: PPUSH
26614: CALL_OW 272
26618: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
26619: LD_ADDR_VAR 0 8
26623: PUSH
26624: LD_VAR 0 6
26628: PPUSH
26629: LD_VAR 0 4
26633: PPUSH
26634: LD_INT 3
26636: PPUSH
26637: CALL_OW 273
26641: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26642: LD_VAR 0 7
26646: PPUSH
26647: LD_VAR 0 8
26651: PPUSH
26652: CALL_OW 488
26656: NOT
26657: IFFALSE 26661
// continue ;
26659: GO 26593
// if HexInfo ( _x , _y ) = 0 then
26661: LD_VAR 0 7
26665: PPUSH
26666: LD_VAR 0 8
26670: PPUSH
26671: CALL_OW 428
26675: PUSH
26676: LD_INT 0
26678: EQUAL
26679: IFFALSE 26704
// begin ComMoveXY ( unit , _x , _y ) ;
26681: LD_VAR 0 1
26685: PPUSH
26686: LD_VAR 0 7
26690: PPUSH
26691: LD_VAR 0 8
26695: PPUSH
26696: CALL_OW 111
// exit ;
26700: POP
26701: POP
26702: GO 26708
// end ; end ;
26704: GO 26593
26706: POP
26707: POP
// end ;
26708: LD_VAR 0 3
26712: RET
// export function ScanBase ( side , base_area ) ; begin
26713: LD_INT 0
26715: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
26716: LD_ADDR_VAR 0 3
26720: PUSH
26721: LD_VAR 0 2
26725: PPUSH
26726: LD_INT 81
26728: PUSH
26729: LD_VAR 0 1
26733: PUSH
26734: EMPTY
26735: LIST
26736: LIST
26737: PPUSH
26738: CALL_OW 70
26742: ST_TO_ADDR
// end ;
26743: LD_VAR 0 3
26747: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
26748: LD_INT 0
26750: PPUSH
26751: PPUSH
26752: PPUSH
26753: PPUSH
// result := false ;
26754: LD_ADDR_VAR 0 2
26758: PUSH
26759: LD_INT 0
26761: ST_TO_ADDR
// side := GetSide ( unit ) ;
26762: LD_ADDR_VAR 0 3
26766: PUSH
26767: LD_VAR 0 1
26771: PPUSH
26772: CALL_OW 255
26776: ST_TO_ADDR
// nat := GetNation ( unit ) ;
26777: LD_ADDR_VAR 0 4
26781: PUSH
26782: LD_VAR 0 1
26786: PPUSH
26787: CALL_OW 248
26791: ST_TO_ADDR
// case nat of 1 :
26792: LD_VAR 0 4
26796: PUSH
26797: LD_INT 1
26799: DOUBLE
26800: EQUAL
26801: IFTRUE 26805
26803: GO 26816
26805: POP
// tech := tech_lassight ; 2 :
26806: LD_ADDR_VAR 0 5
26810: PUSH
26811: LD_INT 12
26813: ST_TO_ADDR
26814: GO 26855
26816: LD_INT 2
26818: DOUBLE
26819: EQUAL
26820: IFTRUE 26824
26822: GO 26835
26824: POP
// tech := tech_mortar ; 3 :
26825: LD_ADDR_VAR 0 5
26829: PUSH
26830: LD_INT 41
26832: ST_TO_ADDR
26833: GO 26855
26835: LD_INT 3
26837: DOUBLE
26838: EQUAL
26839: IFTRUE 26843
26841: GO 26854
26843: POP
// tech := tech_bazooka ; end ;
26844: LD_ADDR_VAR 0 5
26848: PUSH
26849: LD_INT 44
26851: ST_TO_ADDR
26852: GO 26855
26854: POP
// if Researched ( side , tech ) then
26855: LD_VAR 0 3
26859: PPUSH
26860: LD_VAR 0 5
26864: PPUSH
26865: CALL_OW 325
26869: IFFALSE 26896
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
26871: LD_ADDR_VAR 0 2
26875: PUSH
26876: LD_INT 5
26878: PUSH
26879: LD_INT 8
26881: PUSH
26882: LD_INT 9
26884: PUSH
26885: EMPTY
26886: LIST
26887: LIST
26888: LIST
26889: PUSH
26890: LD_VAR 0 4
26894: ARRAY
26895: ST_TO_ADDR
// end ;
26896: LD_VAR 0 2
26900: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
26901: LD_INT 0
26903: PPUSH
26904: PPUSH
26905: PPUSH
// if not mines then
26906: LD_VAR 0 2
26910: NOT
26911: IFFALSE 26915
// exit ;
26913: GO 27059
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26915: LD_ADDR_VAR 0 5
26919: PUSH
26920: LD_INT 81
26922: PUSH
26923: LD_VAR 0 1
26927: PUSH
26928: EMPTY
26929: LIST
26930: LIST
26931: PUSH
26932: LD_INT 3
26934: PUSH
26935: LD_INT 21
26937: PUSH
26938: LD_INT 3
26940: PUSH
26941: EMPTY
26942: LIST
26943: LIST
26944: PUSH
26945: EMPTY
26946: LIST
26947: LIST
26948: PUSH
26949: EMPTY
26950: LIST
26951: LIST
26952: PPUSH
26953: CALL_OW 69
26957: ST_TO_ADDR
// for i in mines do
26958: LD_ADDR_VAR 0 4
26962: PUSH
26963: LD_VAR 0 2
26967: PUSH
26968: FOR_IN
26969: IFFALSE 27057
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
26971: LD_VAR 0 4
26975: PUSH
26976: LD_INT 1
26978: ARRAY
26979: PPUSH
26980: LD_VAR 0 4
26984: PUSH
26985: LD_INT 2
26987: ARRAY
26988: PPUSH
26989: CALL_OW 458
26993: NOT
26994: IFFALSE 26998
// continue ;
26996: GO 26968
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
26998: LD_VAR 0 4
27002: PUSH
27003: LD_INT 1
27005: ARRAY
27006: PPUSH
27007: LD_VAR 0 4
27011: PUSH
27012: LD_INT 2
27014: ARRAY
27015: PPUSH
27016: CALL_OW 428
27020: PUSH
27021: LD_VAR 0 5
27025: IN
27026: IFFALSE 27055
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
27028: LD_VAR 0 4
27032: PUSH
27033: LD_INT 1
27035: ARRAY
27036: PPUSH
27037: LD_VAR 0 4
27041: PUSH
27042: LD_INT 2
27044: ARRAY
27045: PPUSH
27046: LD_VAR 0 1
27050: PPUSH
27051: CALL_OW 456
// end ;
27055: GO 26968
27057: POP
27058: POP
// end ;
27059: LD_VAR 0 3
27063: RET
// export function Count ( array ) ; var i ; begin
27064: LD_INT 0
27066: PPUSH
27067: PPUSH
// result := 0 ;
27068: LD_ADDR_VAR 0 2
27072: PUSH
27073: LD_INT 0
27075: ST_TO_ADDR
// for i in array do
27076: LD_ADDR_VAR 0 3
27080: PUSH
27081: LD_VAR 0 1
27085: PUSH
27086: FOR_IN
27087: IFFALSE 27111
// if i then
27089: LD_VAR 0 3
27093: IFFALSE 27109
// result := result + 1 ;
27095: LD_ADDR_VAR 0 2
27099: PUSH
27100: LD_VAR 0 2
27104: PUSH
27105: LD_INT 1
27107: PLUS
27108: ST_TO_ADDR
27109: GO 27086
27111: POP
27112: POP
// end ;
27113: LD_VAR 0 2
27117: RET
// export function IsEmpty ( building ) ; begin
27118: LD_INT 0
27120: PPUSH
// if not building then
27121: LD_VAR 0 1
27125: NOT
27126: IFFALSE 27130
// exit ;
27128: GO 27173
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
27130: LD_ADDR_VAR 0 2
27134: PUSH
27135: LD_VAR 0 1
27139: PUSH
27140: LD_INT 22
27142: PUSH
27143: LD_VAR 0 1
27147: PPUSH
27148: CALL_OW 255
27152: PUSH
27153: EMPTY
27154: LIST
27155: LIST
27156: PUSH
27157: LD_INT 58
27159: PUSH
27160: EMPTY
27161: LIST
27162: PUSH
27163: EMPTY
27164: LIST
27165: LIST
27166: PPUSH
27167: CALL_OW 69
27171: IN
27172: ST_TO_ADDR
// end ;
27173: LD_VAR 0 2
27177: RET
// export function IsNotFull ( building ) ; begin
27178: LD_INT 0
27180: PPUSH
// if not building then
27181: LD_VAR 0 1
27185: NOT
27186: IFFALSE 27190
// exit ;
27188: GO 27209
// result := UnitsInside ( building ) < 6 ;
27190: LD_ADDR_VAR 0 2
27194: PUSH
27195: LD_VAR 0 1
27199: PPUSH
27200: CALL_OW 313
27204: PUSH
27205: LD_INT 6
27207: LESS
27208: ST_TO_ADDR
// end ;
27209: LD_VAR 0 2
27213: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
27214: LD_INT 0
27216: PPUSH
27217: PPUSH
27218: PPUSH
27219: PPUSH
// tmp := [ ] ;
27220: LD_ADDR_VAR 0 3
27224: PUSH
27225: EMPTY
27226: ST_TO_ADDR
// list := [ ] ;
27227: LD_ADDR_VAR 0 5
27231: PUSH
27232: EMPTY
27233: ST_TO_ADDR
// for i = 16 to 25 do
27234: LD_ADDR_VAR 0 4
27238: PUSH
27239: DOUBLE
27240: LD_INT 16
27242: DEC
27243: ST_TO_ADDR
27244: LD_INT 25
27246: PUSH
27247: FOR_TO
27248: IFFALSE 27321
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
27250: LD_ADDR_VAR 0 3
27254: PUSH
27255: LD_VAR 0 3
27259: PUSH
27260: LD_INT 22
27262: PUSH
27263: LD_VAR 0 1
27267: PPUSH
27268: CALL_OW 255
27272: PUSH
27273: EMPTY
27274: LIST
27275: LIST
27276: PUSH
27277: LD_INT 91
27279: PUSH
27280: LD_VAR 0 1
27284: PUSH
27285: LD_INT 6
27287: PUSH
27288: EMPTY
27289: LIST
27290: LIST
27291: LIST
27292: PUSH
27293: LD_INT 30
27295: PUSH
27296: LD_VAR 0 4
27300: PUSH
27301: EMPTY
27302: LIST
27303: LIST
27304: PUSH
27305: EMPTY
27306: LIST
27307: LIST
27308: LIST
27309: PUSH
27310: EMPTY
27311: LIST
27312: PPUSH
27313: CALL_OW 69
27317: ADD
27318: ST_TO_ADDR
27319: GO 27247
27321: POP
27322: POP
// for i = 1 to tmp do
27323: LD_ADDR_VAR 0 4
27327: PUSH
27328: DOUBLE
27329: LD_INT 1
27331: DEC
27332: ST_TO_ADDR
27333: LD_VAR 0 3
27337: PUSH
27338: FOR_TO
27339: IFFALSE 27427
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
27341: LD_ADDR_VAR 0 5
27345: PUSH
27346: LD_VAR 0 5
27350: PUSH
27351: LD_VAR 0 3
27355: PUSH
27356: LD_VAR 0 4
27360: ARRAY
27361: PPUSH
27362: CALL_OW 266
27366: PUSH
27367: LD_VAR 0 3
27371: PUSH
27372: LD_VAR 0 4
27376: ARRAY
27377: PPUSH
27378: CALL_OW 250
27382: PUSH
27383: LD_VAR 0 3
27387: PUSH
27388: LD_VAR 0 4
27392: ARRAY
27393: PPUSH
27394: CALL_OW 251
27398: PUSH
27399: LD_VAR 0 3
27403: PUSH
27404: LD_VAR 0 4
27408: ARRAY
27409: PPUSH
27410: CALL_OW 254
27414: PUSH
27415: EMPTY
27416: LIST
27417: LIST
27418: LIST
27419: LIST
27420: PUSH
27421: EMPTY
27422: LIST
27423: ADD
27424: ST_TO_ADDR
27425: GO 27338
27427: POP
27428: POP
// result := list ;
27429: LD_ADDR_VAR 0 2
27433: PUSH
27434: LD_VAR 0 5
27438: ST_TO_ADDR
// end ;
27439: LD_VAR 0 2
27443: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
27444: LD_INT 0
27446: PPUSH
27447: PPUSH
27448: PPUSH
27449: PPUSH
27450: PPUSH
27451: PPUSH
27452: PPUSH
// if not factory then
27453: LD_VAR 0 1
27457: NOT
27458: IFFALSE 27462
// exit ;
27460: GO 28055
// if control = control_apeman then
27462: LD_VAR 0 4
27466: PUSH
27467: LD_INT 5
27469: EQUAL
27470: IFFALSE 27579
// begin tmp := UnitsInside ( factory ) ;
27472: LD_ADDR_VAR 0 8
27476: PUSH
27477: LD_VAR 0 1
27481: PPUSH
27482: CALL_OW 313
27486: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
27487: LD_VAR 0 8
27491: PPUSH
27492: LD_INT 25
27494: PUSH
27495: LD_INT 12
27497: PUSH
27498: EMPTY
27499: LIST
27500: LIST
27501: PPUSH
27502: CALL_OW 72
27506: NOT
27507: IFFALSE 27517
// control := control_manual ;
27509: LD_ADDR_VAR 0 4
27513: PUSH
27514: LD_INT 1
27516: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
27517: LD_ADDR_VAR 0 8
27521: PUSH
27522: LD_VAR 0 1
27526: PPUSH
27527: CALL 27214 0 1
27531: ST_TO_ADDR
// if tmp then
27532: LD_VAR 0 8
27536: IFFALSE 27579
// begin for i in tmp do
27538: LD_ADDR_VAR 0 7
27542: PUSH
27543: LD_VAR 0 8
27547: PUSH
27548: FOR_IN
27549: IFFALSE 27577
// if i [ 1 ] = b_ext_radio then
27551: LD_VAR 0 7
27555: PUSH
27556: LD_INT 1
27558: ARRAY
27559: PUSH
27560: LD_INT 22
27562: EQUAL
27563: IFFALSE 27575
// begin control := control_remote ;
27565: LD_ADDR_VAR 0 4
27569: PUSH
27570: LD_INT 2
27572: ST_TO_ADDR
// break ;
27573: GO 27577
// end ;
27575: GO 27548
27577: POP
27578: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27579: LD_VAR 0 1
27583: PPUSH
27584: LD_VAR 0 2
27588: PPUSH
27589: LD_VAR 0 3
27593: PPUSH
27594: LD_VAR 0 4
27598: PPUSH
27599: LD_VAR 0 5
27603: PPUSH
27604: CALL_OW 448
27608: IFFALSE 27643
// begin result := [ chassis , engine , control , weapon ] ;
27610: LD_ADDR_VAR 0 6
27614: PUSH
27615: LD_VAR 0 2
27619: PUSH
27620: LD_VAR 0 3
27624: PUSH
27625: LD_VAR 0 4
27629: PUSH
27630: LD_VAR 0 5
27634: PUSH
27635: EMPTY
27636: LIST
27637: LIST
27638: LIST
27639: LIST
27640: ST_TO_ADDR
// exit ;
27641: GO 28055
// end ; _chassis := AvailableChassisList ( factory ) ;
27643: LD_ADDR_VAR 0 9
27647: PUSH
27648: LD_VAR 0 1
27652: PPUSH
27653: CALL_OW 475
27657: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
27658: LD_ADDR_VAR 0 11
27662: PUSH
27663: LD_VAR 0 1
27667: PPUSH
27668: CALL_OW 476
27672: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
27673: LD_ADDR_VAR 0 12
27677: PUSH
27678: LD_VAR 0 1
27682: PPUSH
27683: CALL_OW 477
27687: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
27688: LD_ADDR_VAR 0 10
27692: PUSH
27693: LD_VAR 0 1
27697: PPUSH
27698: CALL_OW 478
27702: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
27703: LD_VAR 0 9
27707: NOT
27708: PUSH
27709: LD_VAR 0 11
27713: NOT
27714: OR
27715: PUSH
27716: LD_VAR 0 12
27720: NOT
27721: OR
27722: PUSH
27723: LD_VAR 0 10
27727: NOT
27728: OR
27729: IFFALSE 27764
// begin result := [ chassis , engine , control , weapon ] ;
27731: LD_ADDR_VAR 0 6
27735: PUSH
27736: LD_VAR 0 2
27740: PUSH
27741: LD_VAR 0 3
27745: PUSH
27746: LD_VAR 0 4
27750: PUSH
27751: LD_VAR 0 5
27755: PUSH
27756: EMPTY
27757: LIST
27758: LIST
27759: LIST
27760: LIST
27761: ST_TO_ADDR
// exit ;
27762: GO 28055
// end ; if not chassis in _chassis then
27764: LD_VAR 0 2
27768: PUSH
27769: LD_VAR 0 9
27773: IN
27774: NOT
27775: IFFALSE 27801
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
27777: LD_ADDR_VAR 0 2
27781: PUSH
27782: LD_VAR 0 9
27786: PUSH
27787: LD_INT 1
27789: PPUSH
27790: LD_VAR 0 9
27794: PPUSH
27795: CALL_OW 12
27799: ARRAY
27800: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
27801: LD_VAR 0 2
27805: PPUSH
27806: LD_VAR 0 3
27810: PPUSH
27811: CALL 28060 0 2
27815: NOT
27816: IFFALSE 27875
// repeat engine := _engine [ 1 ] ;
27818: LD_ADDR_VAR 0 3
27822: PUSH
27823: LD_VAR 0 11
27827: PUSH
27828: LD_INT 1
27830: ARRAY
27831: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
27832: LD_ADDR_VAR 0 11
27836: PUSH
27837: LD_VAR 0 11
27841: PPUSH
27842: LD_INT 1
27844: PPUSH
27845: CALL_OW 3
27849: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
27850: LD_VAR 0 2
27854: PPUSH
27855: LD_VAR 0 3
27859: PPUSH
27860: CALL 28060 0 2
27864: PUSH
27865: LD_VAR 0 11
27869: PUSH
27870: EMPTY
27871: EQUAL
27872: OR
27873: IFFALSE 27818
// if not control in _control then
27875: LD_VAR 0 4
27879: PUSH
27880: LD_VAR 0 12
27884: IN
27885: NOT
27886: IFFALSE 27912
// control := _control [ rand ( 1 , _control ) ] ;
27888: LD_ADDR_VAR 0 4
27892: PUSH
27893: LD_VAR 0 12
27897: PUSH
27898: LD_INT 1
27900: PPUSH
27901: LD_VAR 0 12
27905: PPUSH
27906: CALL_OW 12
27910: ARRAY
27911: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
27912: LD_VAR 0 2
27916: PPUSH
27917: LD_VAR 0 5
27921: PPUSH
27922: CALL 28280 0 2
27926: NOT
27927: IFFALSE 27986
// repeat weapon := _weapon [ 1 ] ;
27929: LD_ADDR_VAR 0 5
27933: PUSH
27934: LD_VAR 0 10
27938: PUSH
27939: LD_INT 1
27941: ARRAY
27942: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
27943: LD_ADDR_VAR 0 10
27947: PUSH
27948: LD_VAR 0 10
27952: PPUSH
27953: LD_INT 1
27955: PPUSH
27956: CALL_OW 3
27960: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
27961: LD_VAR 0 2
27965: PPUSH
27966: LD_VAR 0 5
27970: PPUSH
27971: CALL 28280 0 2
27975: PUSH
27976: LD_VAR 0 10
27980: PUSH
27981: EMPTY
27982: EQUAL
27983: OR
27984: IFFALSE 27929
// result := [ ] ;
27986: LD_ADDR_VAR 0 6
27990: PUSH
27991: EMPTY
27992: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27993: LD_VAR 0 1
27997: PPUSH
27998: LD_VAR 0 2
28002: PPUSH
28003: LD_VAR 0 3
28007: PPUSH
28008: LD_VAR 0 4
28012: PPUSH
28013: LD_VAR 0 5
28017: PPUSH
28018: CALL_OW 448
28022: IFFALSE 28055
// result := [ chassis , engine , control , weapon ] ;
28024: LD_ADDR_VAR 0 6
28028: PUSH
28029: LD_VAR 0 2
28033: PUSH
28034: LD_VAR 0 3
28038: PUSH
28039: LD_VAR 0 4
28043: PUSH
28044: LD_VAR 0 5
28048: PUSH
28049: EMPTY
28050: LIST
28051: LIST
28052: LIST
28053: LIST
28054: ST_TO_ADDR
// end ;
28055: LD_VAR 0 6
28059: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
28060: LD_INT 0
28062: PPUSH
// if not chassis or not engine then
28063: LD_VAR 0 1
28067: NOT
28068: PUSH
28069: LD_VAR 0 2
28073: NOT
28074: OR
28075: IFFALSE 28079
// exit ;
28077: GO 28275
// case engine of engine_solar :
28079: LD_VAR 0 2
28083: PUSH
28084: LD_INT 2
28086: DOUBLE
28087: EQUAL
28088: IFTRUE 28092
28090: GO 28130
28092: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
28093: LD_ADDR_VAR 0 3
28097: PUSH
28098: LD_INT 11
28100: PUSH
28101: LD_INT 12
28103: PUSH
28104: LD_INT 13
28106: PUSH
28107: LD_INT 14
28109: PUSH
28110: LD_INT 1
28112: PUSH
28113: LD_INT 2
28115: PUSH
28116: LD_INT 3
28118: PUSH
28119: EMPTY
28120: LIST
28121: LIST
28122: LIST
28123: LIST
28124: LIST
28125: LIST
28126: LIST
28127: ST_TO_ADDR
28128: GO 28259
28130: LD_INT 1
28132: DOUBLE
28133: EQUAL
28134: IFTRUE 28138
28136: GO 28200
28138: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
28139: LD_ADDR_VAR 0 3
28143: PUSH
28144: LD_INT 11
28146: PUSH
28147: LD_INT 12
28149: PUSH
28150: LD_INT 13
28152: PUSH
28153: LD_INT 14
28155: PUSH
28156: LD_INT 1
28158: PUSH
28159: LD_INT 2
28161: PUSH
28162: LD_INT 3
28164: PUSH
28165: LD_INT 4
28167: PUSH
28168: LD_INT 5
28170: PUSH
28171: LD_INT 21
28173: PUSH
28174: LD_INT 23
28176: PUSH
28177: LD_INT 22
28179: PUSH
28180: LD_INT 24
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: LIST
28187: LIST
28188: LIST
28189: LIST
28190: LIST
28191: LIST
28192: LIST
28193: LIST
28194: LIST
28195: LIST
28196: LIST
28197: ST_TO_ADDR
28198: GO 28259
28200: LD_INT 3
28202: DOUBLE
28203: EQUAL
28204: IFTRUE 28208
28206: GO 28258
28208: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28209: LD_ADDR_VAR 0 3
28213: PUSH
28214: LD_INT 13
28216: PUSH
28217: LD_INT 14
28219: PUSH
28220: LD_INT 2
28222: PUSH
28223: LD_INT 3
28225: PUSH
28226: LD_INT 4
28228: PUSH
28229: LD_INT 5
28231: PUSH
28232: LD_INT 21
28234: PUSH
28235: LD_INT 22
28237: PUSH
28238: LD_INT 23
28240: PUSH
28241: LD_INT 24
28243: PUSH
28244: EMPTY
28245: LIST
28246: LIST
28247: LIST
28248: LIST
28249: LIST
28250: LIST
28251: LIST
28252: LIST
28253: LIST
28254: LIST
28255: ST_TO_ADDR
28256: GO 28259
28258: POP
// result := ( chassis in result ) ;
28259: LD_ADDR_VAR 0 3
28263: PUSH
28264: LD_VAR 0 1
28268: PUSH
28269: LD_VAR 0 3
28273: IN
28274: ST_TO_ADDR
// end ;
28275: LD_VAR 0 3
28279: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
28280: LD_INT 0
28282: PPUSH
// if not chassis or not weapon then
28283: LD_VAR 0 1
28287: NOT
28288: PUSH
28289: LD_VAR 0 2
28293: NOT
28294: OR
28295: IFFALSE 28299
// exit ;
28297: GO 29361
// case weapon of us_machine_gun :
28299: LD_VAR 0 2
28303: PUSH
28304: LD_INT 2
28306: DOUBLE
28307: EQUAL
28308: IFTRUE 28312
28310: GO 28342
28312: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
28313: LD_ADDR_VAR 0 3
28317: PUSH
28318: LD_INT 1
28320: PUSH
28321: LD_INT 2
28323: PUSH
28324: LD_INT 3
28326: PUSH
28327: LD_INT 4
28329: PUSH
28330: LD_INT 5
28332: PUSH
28333: EMPTY
28334: LIST
28335: LIST
28336: LIST
28337: LIST
28338: LIST
28339: ST_TO_ADDR
28340: GO 29345
28342: LD_INT 3
28344: DOUBLE
28345: EQUAL
28346: IFTRUE 28350
28348: GO 28380
28350: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
28351: LD_ADDR_VAR 0 3
28355: PUSH
28356: LD_INT 1
28358: PUSH
28359: LD_INT 2
28361: PUSH
28362: LD_INT 3
28364: PUSH
28365: LD_INT 4
28367: PUSH
28368: LD_INT 5
28370: PUSH
28371: EMPTY
28372: LIST
28373: LIST
28374: LIST
28375: LIST
28376: LIST
28377: ST_TO_ADDR
28378: GO 29345
28380: LD_INT 11
28382: DOUBLE
28383: EQUAL
28384: IFTRUE 28388
28386: GO 28418
28388: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
28389: LD_ADDR_VAR 0 3
28393: PUSH
28394: LD_INT 1
28396: PUSH
28397: LD_INT 2
28399: PUSH
28400: LD_INT 3
28402: PUSH
28403: LD_INT 4
28405: PUSH
28406: LD_INT 5
28408: PUSH
28409: EMPTY
28410: LIST
28411: LIST
28412: LIST
28413: LIST
28414: LIST
28415: ST_TO_ADDR
28416: GO 29345
28418: LD_INT 4
28420: DOUBLE
28421: EQUAL
28422: IFTRUE 28426
28424: GO 28452
28426: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
28427: LD_ADDR_VAR 0 3
28431: PUSH
28432: LD_INT 2
28434: PUSH
28435: LD_INT 3
28437: PUSH
28438: LD_INT 4
28440: PUSH
28441: LD_INT 5
28443: PUSH
28444: EMPTY
28445: LIST
28446: LIST
28447: LIST
28448: LIST
28449: ST_TO_ADDR
28450: GO 29345
28452: LD_INT 5
28454: DOUBLE
28455: EQUAL
28456: IFTRUE 28460
28458: GO 28486
28460: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
28461: LD_ADDR_VAR 0 3
28465: PUSH
28466: LD_INT 2
28468: PUSH
28469: LD_INT 3
28471: PUSH
28472: LD_INT 4
28474: PUSH
28475: LD_INT 5
28477: PUSH
28478: EMPTY
28479: LIST
28480: LIST
28481: LIST
28482: LIST
28483: ST_TO_ADDR
28484: GO 29345
28486: LD_INT 9
28488: DOUBLE
28489: EQUAL
28490: IFTRUE 28494
28492: GO 28520
28494: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
28495: LD_ADDR_VAR 0 3
28499: PUSH
28500: LD_INT 2
28502: PUSH
28503: LD_INT 3
28505: PUSH
28506: LD_INT 4
28508: PUSH
28509: LD_INT 5
28511: PUSH
28512: EMPTY
28513: LIST
28514: LIST
28515: LIST
28516: LIST
28517: ST_TO_ADDR
28518: GO 29345
28520: LD_INT 7
28522: DOUBLE
28523: EQUAL
28524: IFTRUE 28528
28526: GO 28554
28528: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
28529: LD_ADDR_VAR 0 3
28533: PUSH
28534: LD_INT 2
28536: PUSH
28537: LD_INT 3
28539: PUSH
28540: LD_INT 4
28542: PUSH
28543: LD_INT 5
28545: PUSH
28546: EMPTY
28547: LIST
28548: LIST
28549: LIST
28550: LIST
28551: ST_TO_ADDR
28552: GO 29345
28554: LD_INT 12
28556: DOUBLE
28557: EQUAL
28558: IFTRUE 28562
28560: GO 28588
28562: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
28563: LD_ADDR_VAR 0 3
28567: PUSH
28568: LD_INT 2
28570: PUSH
28571: LD_INT 3
28573: PUSH
28574: LD_INT 4
28576: PUSH
28577: LD_INT 5
28579: PUSH
28580: EMPTY
28581: LIST
28582: LIST
28583: LIST
28584: LIST
28585: ST_TO_ADDR
28586: GO 29345
28588: LD_INT 13
28590: DOUBLE
28591: EQUAL
28592: IFTRUE 28596
28594: GO 28622
28596: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
28597: LD_ADDR_VAR 0 3
28601: PUSH
28602: LD_INT 2
28604: PUSH
28605: LD_INT 3
28607: PUSH
28608: LD_INT 4
28610: PUSH
28611: LD_INT 5
28613: PUSH
28614: EMPTY
28615: LIST
28616: LIST
28617: LIST
28618: LIST
28619: ST_TO_ADDR
28620: GO 29345
28622: LD_INT 14
28624: DOUBLE
28625: EQUAL
28626: IFTRUE 28630
28628: GO 28648
28630: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
28631: LD_ADDR_VAR 0 3
28635: PUSH
28636: LD_INT 4
28638: PUSH
28639: LD_INT 5
28641: PUSH
28642: EMPTY
28643: LIST
28644: LIST
28645: ST_TO_ADDR
28646: GO 29345
28648: LD_INT 6
28650: DOUBLE
28651: EQUAL
28652: IFTRUE 28656
28654: GO 28674
28656: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
28657: LD_ADDR_VAR 0 3
28661: PUSH
28662: LD_INT 4
28664: PUSH
28665: LD_INT 5
28667: PUSH
28668: EMPTY
28669: LIST
28670: LIST
28671: ST_TO_ADDR
28672: GO 29345
28674: LD_INT 10
28676: DOUBLE
28677: EQUAL
28678: IFTRUE 28682
28680: GO 28700
28682: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
28683: LD_ADDR_VAR 0 3
28687: PUSH
28688: LD_INT 4
28690: PUSH
28691: LD_INT 5
28693: PUSH
28694: EMPTY
28695: LIST
28696: LIST
28697: ST_TO_ADDR
28698: GO 29345
28700: LD_INT 22
28702: DOUBLE
28703: EQUAL
28704: IFTRUE 28708
28706: GO 28734
28708: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
28709: LD_ADDR_VAR 0 3
28713: PUSH
28714: LD_INT 11
28716: PUSH
28717: LD_INT 12
28719: PUSH
28720: LD_INT 13
28722: PUSH
28723: LD_INT 14
28725: PUSH
28726: EMPTY
28727: LIST
28728: LIST
28729: LIST
28730: LIST
28731: ST_TO_ADDR
28732: GO 29345
28734: LD_INT 23
28736: DOUBLE
28737: EQUAL
28738: IFTRUE 28742
28740: GO 28768
28742: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
28743: LD_ADDR_VAR 0 3
28747: PUSH
28748: LD_INT 11
28750: PUSH
28751: LD_INT 12
28753: PUSH
28754: LD_INT 13
28756: PUSH
28757: LD_INT 14
28759: PUSH
28760: EMPTY
28761: LIST
28762: LIST
28763: LIST
28764: LIST
28765: ST_TO_ADDR
28766: GO 29345
28768: LD_INT 24
28770: DOUBLE
28771: EQUAL
28772: IFTRUE 28776
28774: GO 28802
28776: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
28777: LD_ADDR_VAR 0 3
28781: PUSH
28782: LD_INT 11
28784: PUSH
28785: LD_INT 12
28787: PUSH
28788: LD_INT 13
28790: PUSH
28791: LD_INT 14
28793: PUSH
28794: EMPTY
28795: LIST
28796: LIST
28797: LIST
28798: LIST
28799: ST_TO_ADDR
28800: GO 29345
28802: LD_INT 30
28804: DOUBLE
28805: EQUAL
28806: IFTRUE 28810
28808: GO 28836
28810: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
28811: LD_ADDR_VAR 0 3
28815: PUSH
28816: LD_INT 11
28818: PUSH
28819: LD_INT 12
28821: PUSH
28822: LD_INT 13
28824: PUSH
28825: LD_INT 14
28827: PUSH
28828: EMPTY
28829: LIST
28830: LIST
28831: LIST
28832: LIST
28833: ST_TO_ADDR
28834: GO 29345
28836: LD_INT 25
28838: DOUBLE
28839: EQUAL
28840: IFTRUE 28844
28842: GO 28862
28844: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
28845: LD_ADDR_VAR 0 3
28849: PUSH
28850: LD_INT 13
28852: PUSH
28853: LD_INT 14
28855: PUSH
28856: EMPTY
28857: LIST
28858: LIST
28859: ST_TO_ADDR
28860: GO 29345
28862: LD_INT 27
28864: DOUBLE
28865: EQUAL
28866: IFTRUE 28870
28868: GO 28888
28870: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
28871: LD_ADDR_VAR 0 3
28875: PUSH
28876: LD_INT 13
28878: PUSH
28879: LD_INT 14
28881: PUSH
28882: EMPTY
28883: LIST
28884: LIST
28885: ST_TO_ADDR
28886: GO 29345
28888: LD_EXP 98
28892: DOUBLE
28893: EQUAL
28894: IFTRUE 28898
28896: GO 28924
28898: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
28899: LD_ADDR_VAR 0 3
28903: PUSH
28904: LD_INT 11
28906: PUSH
28907: LD_INT 12
28909: PUSH
28910: LD_INT 13
28912: PUSH
28913: LD_INT 14
28915: PUSH
28916: EMPTY
28917: LIST
28918: LIST
28919: LIST
28920: LIST
28921: ST_TO_ADDR
28922: GO 29345
28924: LD_INT 28
28926: DOUBLE
28927: EQUAL
28928: IFTRUE 28932
28930: GO 28950
28932: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
28933: LD_ADDR_VAR 0 3
28937: PUSH
28938: LD_INT 13
28940: PUSH
28941: LD_INT 14
28943: PUSH
28944: EMPTY
28945: LIST
28946: LIST
28947: ST_TO_ADDR
28948: GO 29345
28950: LD_INT 29
28952: DOUBLE
28953: EQUAL
28954: IFTRUE 28958
28956: GO 28976
28958: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
28959: LD_ADDR_VAR 0 3
28963: PUSH
28964: LD_INT 13
28966: PUSH
28967: LD_INT 14
28969: PUSH
28970: EMPTY
28971: LIST
28972: LIST
28973: ST_TO_ADDR
28974: GO 29345
28976: LD_INT 31
28978: DOUBLE
28979: EQUAL
28980: IFTRUE 28984
28982: GO 29002
28984: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
28985: LD_ADDR_VAR 0 3
28989: PUSH
28990: LD_INT 13
28992: PUSH
28993: LD_INT 14
28995: PUSH
28996: EMPTY
28997: LIST
28998: LIST
28999: ST_TO_ADDR
29000: GO 29345
29002: LD_INT 26
29004: DOUBLE
29005: EQUAL
29006: IFTRUE 29010
29008: GO 29028
29010: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
29011: LD_ADDR_VAR 0 3
29015: PUSH
29016: LD_INT 13
29018: PUSH
29019: LD_INT 14
29021: PUSH
29022: EMPTY
29023: LIST
29024: LIST
29025: ST_TO_ADDR
29026: GO 29345
29028: LD_INT 42
29030: DOUBLE
29031: EQUAL
29032: IFTRUE 29036
29034: GO 29062
29036: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
29037: LD_ADDR_VAR 0 3
29041: PUSH
29042: LD_INT 21
29044: PUSH
29045: LD_INT 22
29047: PUSH
29048: LD_INT 23
29050: PUSH
29051: LD_INT 24
29053: PUSH
29054: EMPTY
29055: LIST
29056: LIST
29057: LIST
29058: LIST
29059: ST_TO_ADDR
29060: GO 29345
29062: LD_INT 43
29064: DOUBLE
29065: EQUAL
29066: IFTRUE 29070
29068: GO 29096
29070: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
29071: LD_ADDR_VAR 0 3
29075: PUSH
29076: LD_INT 21
29078: PUSH
29079: LD_INT 22
29081: PUSH
29082: LD_INT 23
29084: PUSH
29085: LD_INT 24
29087: PUSH
29088: EMPTY
29089: LIST
29090: LIST
29091: LIST
29092: LIST
29093: ST_TO_ADDR
29094: GO 29345
29096: LD_INT 44
29098: DOUBLE
29099: EQUAL
29100: IFTRUE 29104
29102: GO 29130
29104: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
29105: LD_ADDR_VAR 0 3
29109: PUSH
29110: LD_INT 21
29112: PUSH
29113: LD_INT 22
29115: PUSH
29116: LD_INT 23
29118: PUSH
29119: LD_INT 24
29121: PUSH
29122: EMPTY
29123: LIST
29124: LIST
29125: LIST
29126: LIST
29127: ST_TO_ADDR
29128: GO 29345
29130: LD_INT 45
29132: DOUBLE
29133: EQUAL
29134: IFTRUE 29138
29136: GO 29164
29138: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
29139: LD_ADDR_VAR 0 3
29143: PUSH
29144: LD_INT 21
29146: PUSH
29147: LD_INT 22
29149: PUSH
29150: LD_INT 23
29152: PUSH
29153: LD_INT 24
29155: PUSH
29156: EMPTY
29157: LIST
29158: LIST
29159: LIST
29160: LIST
29161: ST_TO_ADDR
29162: GO 29345
29164: LD_INT 49
29166: DOUBLE
29167: EQUAL
29168: IFTRUE 29172
29170: GO 29198
29172: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
29173: LD_ADDR_VAR 0 3
29177: PUSH
29178: LD_INT 21
29180: PUSH
29181: LD_INT 22
29183: PUSH
29184: LD_INT 23
29186: PUSH
29187: LD_INT 24
29189: PUSH
29190: EMPTY
29191: LIST
29192: LIST
29193: LIST
29194: LIST
29195: ST_TO_ADDR
29196: GO 29345
29198: LD_INT 51
29200: DOUBLE
29201: EQUAL
29202: IFTRUE 29206
29204: GO 29232
29206: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
29207: LD_ADDR_VAR 0 3
29211: PUSH
29212: LD_INT 21
29214: PUSH
29215: LD_INT 22
29217: PUSH
29218: LD_INT 23
29220: PUSH
29221: LD_INT 24
29223: PUSH
29224: EMPTY
29225: LIST
29226: LIST
29227: LIST
29228: LIST
29229: ST_TO_ADDR
29230: GO 29345
29232: LD_INT 52
29234: DOUBLE
29235: EQUAL
29236: IFTRUE 29240
29238: GO 29266
29240: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
29241: LD_ADDR_VAR 0 3
29245: PUSH
29246: LD_INT 21
29248: PUSH
29249: LD_INT 22
29251: PUSH
29252: LD_INT 23
29254: PUSH
29255: LD_INT 24
29257: PUSH
29258: EMPTY
29259: LIST
29260: LIST
29261: LIST
29262: LIST
29263: ST_TO_ADDR
29264: GO 29345
29266: LD_INT 53
29268: DOUBLE
29269: EQUAL
29270: IFTRUE 29274
29272: GO 29292
29274: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
29275: LD_ADDR_VAR 0 3
29279: PUSH
29280: LD_INT 23
29282: PUSH
29283: LD_INT 24
29285: PUSH
29286: EMPTY
29287: LIST
29288: LIST
29289: ST_TO_ADDR
29290: GO 29345
29292: LD_INT 46
29294: DOUBLE
29295: EQUAL
29296: IFTRUE 29300
29298: GO 29318
29300: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
29301: LD_ADDR_VAR 0 3
29305: PUSH
29306: LD_INT 23
29308: PUSH
29309: LD_INT 24
29311: PUSH
29312: EMPTY
29313: LIST
29314: LIST
29315: ST_TO_ADDR
29316: GO 29345
29318: LD_INT 47
29320: DOUBLE
29321: EQUAL
29322: IFTRUE 29326
29324: GO 29344
29326: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29327: LD_ADDR_VAR 0 3
29331: PUSH
29332: LD_INT 23
29334: PUSH
29335: LD_INT 24
29337: PUSH
29338: EMPTY
29339: LIST
29340: LIST
29341: ST_TO_ADDR
29342: GO 29345
29344: POP
// result := ( chassis in result ) ;
29345: LD_ADDR_VAR 0 3
29349: PUSH
29350: LD_VAR 0 1
29354: PUSH
29355: LD_VAR 0 3
29359: IN
29360: ST_TO_ADDR
// end ;
29361: LD_VAR 0 3
29365: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
29366: LD_INT 0
29368: PPUSH
29369: PPUSH
29370: PPUSH
29371: PPUSH
29372: PPUSH
29373: PPUSH
29374: PPUSH
// result := array ;
29375: LD_ADDR_VAR 0 5
29379: PUSH
29380: LD_VAR 0 1
29384: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
29385: LD_VAR 0 1
29389: NOT
29390: PUSH
29391: LD_VAR 0 2
29395: NOT
29396: OR
29397: PUSH
29398: LD_VAR 0 3
29402: NOT
29403: OR
29404: PUSH
29405: LD_VAR 0 2
29409: PUSH
29410: LD_VAR 0 1
29414: GREATER
29415: OR
29416: PUSH
29417: LD_VAR 0 3
29421: PUSH
29422: LD_VAR 0 1
29426: GREATER
29427: OR
29428: IFFALSE 29432
// exit ;
29430: GO 29728
// if direction then
29432: LD_VAR 0 4
29436: IFFALSE 29500
// begin d := 1 ;
29438: LD_ADDR_VAR 0 9
29442: PUSH
29443: LD_INT 1
29445: ST_TO_ADDR
// if i_from > i_to then
29446: LD_VAR 0 2
29450: PUSH
29451: LD_VAR 0 3
29455: GREATER
29456: IFFALSE 29482
// length := ( array - i_from ) + i_to else
29458: LD_ADDR_VAR 0 11
29462: PUSH
29463: LD_VAR 0 1
29467: PUSH
29468: LD_VAR 0 2
29472: MINUS
29473: PUSH
29474: LD_VAR 0 3
29478: PLUS
29479: ST_TO_ADDR
29480: GO 29498
// length := i_to - i_from ;
29482: LD_ADDR_VAR 0 11
29486: PUSH
29487: LD_VAR 0 3
29491: PUSH
29492: LD_VAR 0 2
29496: MINUS
29497: ST_TO_ADDR
// end else
29498: GO 29561
// begin d := - 1 ;
29500: LD_ADDR_VAR 0 9
29504: PUSH
29505: LD_INT 1
29507: NEG
29508: ST_TO_ADDR
// if i_from > i_to then
29509: LD_VAR 0 2
29513: PUSH
29514: LD_VAR 0 3
29518: GREATER
29519: IFFALSE 29539
// length := i_from - i_to else
29521: LD_ADDR_VAR 0 11
29525: PUSH
29526: LD_VAR 0 2
29530: PUSH
29531: LD_VAR 0 3
29535: MINUS
29536: ST_TO_ADDR
29537: GO 29561
// length := ( array - i_to ) + i_from ;
29539: LD_ADDR_VAR 0 11
29543: PUSH
29544: LD_VAR 0 1
29548: PUSH
29549: LD_VAR 0 3
29553: MINUS
29554: PUSH
29555: LD_VAR 0 2
29559: PLUS
29560: ST_TO_ADDR
// end ; if not length then
29561: LD_VAR 0 11
29565: NOT
29566: IFFALSE 29570
// exit ;
29568: GO 29728
// tmp := array ;
29570: LD_ADDR_VAR 0 10
29574: PUSH
29575: LD_VAR 0 1
29579: ST_TO_ADDR
// for i = 1 to length do
29580: LD_ADDR_VAR 0 6
29584: PUSH
29585: DOUBLE
29586: LD_INT 1
29588: DEC
29589: ST_TO_ADDR
29590: LD_VAR 0 11
29594: PUSH
29595: FOR_TO
29596: IFFALSE 29716
// begin for j = 1 to array do
29598: LD_ADDR_VAR 0 7
29602: PUSH
29603: DOUBLE
29604: LD_INT 1
29606: DEC
29607: ST_TO_ADDR
29608: LD_VAR 0 1
29612: PUSH
29613: FOR_TO
29614: IFFALSE 29702
// begin k := j + d ;
29616: LD_ADDR_VAR 0 8
29620: PUSH
29621: LD_VAR 0 7
29625: PUSH
29626: LD_VAR 0 9
29630: PLUS
29631: ST_TO_ADDR
// if k > array then
29632: LD_VAR 0 8
29636: PUSH
29637: LD_VAR 0 1
29641: GREATER
29642: IFFALSE 29652
// k := 1 ;
29644: LD_ADDR_VAR 0 8
29648: PUSH
29649: LD_INT 1
29651: ST_TO_ADDR
// if not k then
29652: LD_VAR 0 8
29656: NOT
29657: IFFALSE 29669
// k := array ;
29659: LD_ADDR_VAR 0 8
29663: PUSH
29664: LD_VAR 0 1
29668: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
29669: LD_ADDR_VAR 0 10
29673: PUSH
29674: LD_VAR 0 10
29678: PPUSH
29679: LD_VAR 0 8
29683: PPUSH
29684: LD_VAR 0 1
29688: PUSH
29689: LD_VAR 0 7
29693: ARRAY
29694: PPUSH
29695: CALL_OW 1
29699: ST_TO_ADDR
// end ;
29700: GO 29613
29702: POP
29703: POP
// array := tmp ;
29704: LD_ADDR_VAR 0 1
29708: PUSH
29709: LD_VAR 0 10
29713: ST_TO_ADDR
// end ;
29714: GO 29595
29716: POP
29717: POP
// result := array ;
29718: LD_ADDR_VAR 0 5
29722: PUSH
29723: LD_VAR 0 1
29727: ST_TO_ADDR
// end ;
29728: LD_VAR 0 5
29732: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
29733: LD_INT 0
29735: PPUSH
29736: PPUSH
// result := 0 ;
29737: LD_ADDR_VAR 0 3
29741: PUSH
29742: LD_INT 0
29744: ST_TO_ADDR
// if not array or not value in array then
29745: LD_VAR 0 1
29749: NOT
29750: PUSH
29751: LD_VAR 0 2
29755: PUSH
29756: LD_VAR 0 1
29760: IN
29761: NOT
29762: OR
29763: IFFALSE 29767
// exit ;
29765: GO 29821
// for i = 1 to array do
29767: LD_ADDR_VAR 0 4
29771: PUSH
29772: DOUBLE
29773: LD_INT 1
29775: DEC
29776: ST_TO_ADDR
29777: LD_VAR 0 1
29781: PUSH
29782: FOR_TO
29783: IFFALSE 29819
// if value = array [ i ] then
29785: LD_VAR 0 2
29789: PUSH
29790: LD_VAR 0 1
29794: PUSH
29795: LD_VAR 0 4
29799: ARRAY
29800: EQUAL
29801: IFFALSE 29817
// begin result := i ;
29803: LD_ADDR_VAR 0 3
29807: PUSH
29808: LD_VAR 0 4
29812: ST_TO_ADDR
// exit ;
29813: POP
29814: POP
29815: GO 29821
// end ;
29817: GO 29782
29819: POP
29820: POP
// end ;
29821: LD_VAR 0 3
29825: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
29826: LD_INT 0
29828: PPUSH
// vc_chassis := chassis ;
29829: LD_ADDR_OWVAR 37
29833: PUSH
29834: LD_VAR 0 1
29838: ST_TO_ADDR
// vc_engine := engine ;
29839: LD_ADDR_OWVAR 39
29843: PUSH
29844: LD_VAR 0 2
29848: ST_TO_ADDR
// vc_control := control ;
29849: LD_ADDR_OWVAR 38
29853: PUSH
29854: LD_VAR 0 3
29858: ST_TO_ADDR
// vc_weapon := weapon ;
29859: LD_ADDR_OWVAR 40
29863: PUSH
29864: LD_VAR 0 4
29868: ST_TO_ADDR
// vc_fuel_battery := fuel ;
29869: LD_ADDR_OWVAR 41
29873: PUSH
29874: LD_VAR 0 5
29878: ST_TO_ADDR
// end ;
29879: LD_VAR 0 6
29883: RET
// export function WantPlant ( unit ) ; var task ; begin
29884: LD_INT 0
29886: PPUSH
29887: PPUSH
// result := false ;
29888: LD_ADDR_VAR 0 2
29892: PUSH
29893: LD_INT 0
29895: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
29896: LD_ADDR_VAR 0 3
29900: PUSH
29901: LD_VAR 0 1
29905: PPUSH
29906: CALL_OW 437
29910: ST_TO_ADDR
// if task then
29911: LD_VAR 0 3
29915: IFFALSE 29943
// if task [ 1 ] [ 1 ] = p then
29917: LD_VAR 0 3
29921: PUSH
29922: LD_INT 1
29924: ARRAY
29925: PUSH
29926: LD_INT 1
29928: ARRAY
29929: PUSH
29930: LD_STRING p
29932: EQUAL
29933: IFFALSE 29943
// result := true ;
29935: LD_ADDR_VAR 0 2
29939: PUSH
29940: LD_INT 1
29942: ST_TO_ADDR
// end ;
29943: LD_VAR 0 2
29947: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
29948: LD_INT 0
29950: PPUSH
29951: PPUSH
29952: PPUSH
29953: PPUSH
// if pos < 1 then
29954: LD_VAR 0 2
29958: PUSH
29959: LD_INT 1
29961: LESS
29962: IFFALSE 29966
// exit ;
29964: GO 30269
// if pos = 1 then
29966: LD_VAR 0 2
29970: PUSH
29971: LD_INT 1
29973: EQUAL
29974: IFFALSE 30007
// result := Replace ( arr , pos [ 1 ] , value ) else
29976: LD_ADDR_VAR 0 4
29980: PUSH
29981: LD_VAR 0 1
29985: PPUSH
29986: LD_VAR 0 2
29990: PUSH
29991: LD_INT 1
29993: ARRAY
29994: PPUSH
29995: LD_VAR 0 3
29999: PPUSH
30000: CALL_OW 1
30004: ST_TO_ADDR
30005: GO 30269
// begin tmp := arr ;
30007: LD_ADDR_VAR 0 6
30011: PUSH
30012: LD_VAR 0 1
30016: ST_TO_ADDR
// s_arr := [ tmp ] ;
30017: LD_ADDR_VAR 0 7
30021: PUSH
30022: LD_VAR 0 6
30026: PUSH
30027: EMPTY
30028: LIST
30029: ST_TO_ADDR
// for i = 1 to pos - 1 do
30030: LD_ADDR_VAR 0 5
30034: PUSH
30035: DOUBLE
30036: LD_INT 1
30038: DEC
30039: ST_TO_ADDR
30040: LD_VAR 0 2
30044: PUSH
30045: LD_INT 1
30047: MINUS
30048: PUSH
30049: FOR_TO
30050: IFFALSE 30095
// begin tmp := tmp [ pos [ i ] ] ;
30052: LD_ADDR_VAR 0 6
30056: PUSH
30057: LD_VAR 0 6
30061: PUSH
30062: LD_VAR 0 2
30066: PUSH
30067: LD_VAR 0 5
30071: ARRAY
30072: ARRAY
30073: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
30074: LD_ADDR_VAR 0 7
30078: PUSH
30079: LD_VAR 0 7
30083: PUSH
30084: LD_VAR 0 6
30088: PUSH
30089: EMPTY
30090: LIST
30091: ADD
30092: ST_TO_ADDR
// end ;
30093: GO 30049
30095: POP
30096: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
30097: LD_ADDR_VAR 0 6
30101: PUSH
30102: LD_VAR 0 6
30106: PPUSH
30107: LD_VAR 0 2
30111: PUSH
30112: LD_VAR 0 2
30116: ARRAY
30117: PPUSH
30118: LD_VAR 0 3
30122: PPUSH
30123: CALL_OW 1
30127: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
30128: LD_ADDR_VAR 0 7
30132: PUSH
30133: LD_VAR 0 7
30137: PPUSH
30138: LD_VAR 0 7
30142: PPUSH
30143: LD_VAR 0 6
30147: PPUSH
30148: CALL_OW 1
30152: ST_TO_ADDR
// for i = s_arr downto 2 do
30153: LD_ADDR_VAR 0 5
30157: PUSH
30158: DOUBLE
30159: LD_VAR 0 7
30163: INC
30164: ST_TO_ADDR
30165: LD_INT 2
30167: PUSH
30168: FOR_DOWNTO
30169: IFFALSE 30253
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
30171: LD_ADDR_VAR 0 6
30175: PUSH
30176: LD_VAR 0 7
30180: PUSH
30181: LD_VAR 0 5
30185: PUSH
30186: LD_INT 1
30188: MINUS
30189: ARRAY
30190: PPUSH
30191: LD_VAR 0 2
30195: PUSH
30196: LD_VAR 0 5
30200: PUSH
30201: LD_INT 1
30203: MINUS
30204: ARRAY
30205: PPUSH
30206: LD_VAR 0 7
30210: PUSH
30211: LD_VAR 0 5
30215: ARRAY
30216: PPUSH
30217: CALL_OW 1
30221: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
30222: LD_ADDR_VAR 0 7
30226: PUSH
30227: LD_VAR 0 7
30231: PPUSH
30232: LD_VAR 0 5
30236: PUSH
30237: LD_INT 1
30239: MINUS
30240: PPUSH
30241: LD_VAR 0 6
30245: PPUSH
30246: CALL_OW 1
30250: ST_TO_ADDR
// end ;
30251: GO 30168
30253: POP
30254: POP
// result := s_arr [ 1 ] ;
30255: LD_ADDR_VAR 0 4
30259: PUSH
30260: LD_VAR 0 7
30264: PUSH
30265: LD_INT 1
30267: ARRAY
30268: ST_TO_ADDR
// end ; end ;
30269: LD_VAR 0 4
30273: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
30274: LD_INT 0
30276: PPUSH
30277: PPUSH
// if not list then
30278: LD_VAR 0 1
30282: NOT
30283: IFFALSE 30287
// exit ;
30285: GO 30378
// i := list [ pos1 ] ;
30287: LD_ADDR_VAR 0 5
30291: PUSH
30292: LD_VAR 0 1
30296: PUSH
30297: LD_VAR 0 2
30301: ARRAY
30302: ST_TO_ADDR
// if not i then
30303: LD_VAR 0 5
30307: NOT
30308: IFFALSE 30312
// exit ;
30310: GO 30378
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
30312: LD_ADDR_VAR 0 1
30316: PUSH
30317: LD_VAR 0 1
30321: PPUSH
30322: LD_VAR 0 2
30326: PPUSH
30327: LD_VAR 0 1
30331: PUSH
30332: LD_VAR 0 3
30336: ARRAY
30337: PPUSH
30338: CALL_OW 1
30342: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
30343: LD_ADDR_VAR 0 1
30347: PUSH
30348: LD_VAR 0 1
30352: PPUSH
30353: LD_VAR 0 3
30357: PPUSH
30358: LD_VAR 0 5
30362: PPUSH
30363: CALL_OW 1
30367: ST_TO_ADDR
// result := list ;
30368: LD_ADDR_VAR 0 4
30372: PUSH
30373: LD_VAR 0 1
30377: ST_TO_ADDR
// end ;
30378: LD_VAR 0 4
30382: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
30383: LD_INT 0
30385: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
30386: LD_ADDR_VAR 0 5
30390: PUSH
30391: LD_VAR 0 1
30395: PPUSH
30396: CALL_OW 250
30400: PPUSH
30401: LD_VAR 0 1
30405: PPUSH
30406: CALL_OW 251
30410: PPUSH
30411: LD_VAR 0 2
30415: PPUSH
30416: LD_VAR 0 3
30420: PPUSH
30421: LD_VAR 0 4
30425: PPUSH
30426: CALL 30436 0 5
30430: ST_TO_ADDR
// end ;
30431: LD_VAR 0 5
30435: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
30436: LD_INT 0
30438: PPUSH
30439: PPUSH
30440: PPUSH
30441: PPUSH
// if not list then
30442: LD_VAR 0 3
30446: NOT
30447: IFFALSE 30451
// exit ;
30449: GO 30839
// result := [ ] ;
30451: LD_ADDR_VAR 0 6
30455: PUSH
30456: EMPTY
30457: ST_TO_ADDR
// for i in list do
30458: LD_ADDR_VAR 0 7
30462: PUSH
30463: LD_VAR 0 3
30467: PUSH
30468: FOR_IN
30469: IFFALSE 30671
// begin tmp := GetDistUnitXY ( i , x , y ) ;
30471: LD_ADDR_VAR 0 9
30475: PUSH
30476: LD_VAR 0 7
30480: PPUSH
30481: LD_VAR 0 1
30485: PPUSH
30486: LD_VAR 0 2
30490: PPUSH
30491: CALL_OW 297
30495: ST_TO_ADDR
// if not result then
30496: LD_VAR 0 6
30500: NOT
30501: IFFALSE 30527
// result := [ [ i , tmp ] ] else
30503: LD_ADDR_VAR 0 6
30507: PUSH
30508: LD_VAR 0 7
30512: PUSH
30513: LD_VAR 0 9
30517: PUSH
30518: EMPTY
30519: LIST
30520: LIST
30521: PUSH
30522: EMPTY
30523: LIST
30524: ST_TO_ADDR
30525: GO 30669
// begin if result [ result ] [ 2 ] < tmp then
30527: LD_VAR 0 6
30531: PUSH
30532: LD_VAR 0 6
30536: ARRAY
30537: PUSH
30538: LD_INT 2
30540: ARRAY
30541: PUSH
30542: LD_VAR 0 9
30546: LESS
30547: IFFALSE 30589
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
30549: LD_ADDR_VAR 0 6
30553: PUSH
30554: LD_VAR 0 6
30558: PPUSH
30559: LD_VAR 0 6
30563: PUSH
30564: LD_INT 1
30566: PLUS
30567: PPUSH
30568: LD_VAR 0 7
30572: PUSH
30573: LD_VAR 0 9
30577: PUSH
30578: EMPTY
30579: LIST
30580: LIST
30581: PPUSH
30582: CALL_OW 2
30586: ST_TO_ADDR
30587: GO 30669
// for j = 1 to result do
30589: LD_ADDR_VAR 0 8
30593: PUSH
30594: DOUBLE
30595: LD_INT 1
30597: DEC
30598: ST_TO_ADDR
30599: LD_VAR 0 6
30603: PUSH
30604: FOR_TO
30605: IFFALSE 30667
// begin if tmp < result [ j ] [ 2 ] then
30607: LD_VAR 0 9
30611: PUSH
30612: LD_VAR 0 6
30616: PUSH
30617: LD_VAR 0 8
30621: ARRAY
30622: PUSH
30623: LD_INT 2
30625: ARRAY
30626: LESS
30627: IFFALSE 30665
// begin result := Insert ( result , j , [ i , tmp ] ) ;
30629: LD_ADDR_VAR 0 6
30633: PUSH
30634: LD_VAR 0 6
30638: PPUSH
30639: LD_VAR 0 8
30643: PPUSH
30644: LD_VAR 0 7
30648: PUSH
30649: LD_VAR 0 9
30653: PUSH
30654: EMPTY
30655: LIST
30656: LIST
30657: PPUSH
30658: CALL_OW 2
30662: ST_TO_ADDR
// break ;
30663: GO 30667
// end ; end ;
30665: GO 30604
30667: POP
30668: POP
// end ; end ;
30669: GO 30468
30671: POP
30672: POP
// if result and not asc then
30673: LD_VAR 0 6
30677: PUSH
30678: LD_VAR 0 4
30682: NOT
30683: AND
30684: IFFALSE 30759
// begin tmp := result ;
30686: LD_ADDR_VAR 0 9
30690: PUSH
30691: LD_VAR 0 6
30695: ST_TO_ADDR
// for i = tmp downto 1 do
30696: LD_ADDR_VAR 0 7
30700: PUSH
30701: DOUBLE
30702: LD_VAR 0 9
30706: INC
30707: ST_TO_ADDR
30708: LD_INT 1
30710: PUSH
30711: FOR_DOWNTO
30712: IFFALSE 30757
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
30714: LD_ADDR_VAR 0 6
30718: PUSH
30719: LD_VAR 0 6
30723: PPUSH
30724: LD_VAR 0 9
30728: PUSH
30729: LD_VAR 0 7
30733: MINUS
30734: PUSH
30735: LD_INT 1
30737: PLUS
30738: PPUSH
30739: LD_VAR 0 9
30743: PUSH
30744: LD_VAR 0 7
30748: ARRAY
30749: PPUSH
30750: CALL_OW 1
30754: ST_TO_ADDR
30755: GO 30711
30757: POP
30758: POP
// end ; tmp := [ ] ;
30759: LD_ADDR_VAR 0 9
30763: PUSH
30764: EMPTY
30765: ST_TO_ADDR
// if mode then
30766: LD_VAR 0 5
30770: IFFALSE 30839
// begin for i = 1 to result do
30772: LD_ADDR_VAR 0 7
30776: PUSH
30777: DOUBLE
30778: LD_INT 1
30780: DEC
30781: ST_TO_ADDR
30782: LD_VAR 0 6
30786: PUSH
30787: FOR_TO
30788: IFFALSE 30827
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
30790: LD_ADDR_VAR 0 9
30794: PUSH
30795: LD_VAR 0 9
30799: PPUSH
30800: LD_VAR 0 7
30804: PPUSH
30805: LD_VAR 0 6
30809: PUSH
30810: LD_VAR 0 7
30814: ARRAY
30815: PUSH
30816: LD_INT 1
30818: ARRAY
30819: PPUSH
30820: CALL_OW 1
30824: ST_TO_ADDR
30825: GO 30787
30827: POP
30828: POP
// result := tmp ;
30829: LD_ADDR_VAR 0 6
30833: PUSH
30834: LD_VAR 0 9
30838: ST_TO_ADDR
// end ; end ;
30839: LD_VAR 0 6
30843: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
30844: LD_INT 0
30846: PPUSH
30847: PPUSH
30848: PPUSH
30849: PPUSH
30850: PPUSH
30851: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
30852: LD_ADDR_VAR 0 5
30856: PUSH
30857: LD_INT 0
30859: PUSH
30860: LD_INT 0
30862: PUSH
30863: LD_INT 0
30865: PUSH
30866: EMPTY
30867: PUSH
30868: EMPTY
30869: LIST
30870: LIST
30871: LIST
30872: LIST
30873: ST_TO_ADDR
// if not x or not y then
30874: LD_VAR 0 2
30878: NOT
30879: PUSH
30880: LD_VAR 0 3
30884: NOT
30885: OR
30886: IFFALSE 30890
// exit ;
30888: GO 32542
// if not range then
30890: LD_VAR 0 4
30894: NOT
30895: IFFALSE 30905
// range := 10 ;
30897: LD_ADDR_VAR 0 4
30901: PUSH
30902: LD_INT 10
30904: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30905: LD_ADDR_VAR 0 8
30909: PUSH
30910: LD_INT 81
30912: PUSH
30913: LD_VAR 0 1
30917: PUSH
30918: EMPTY
30919: LIST
30920: LIST
30921: PUSH
30922: LD_INT 92
30924: PUSH
30925: LD_VAR 0 2
30929: PUSH
30930: LD_VAR 0 3
30934: PUSH
30935: LD_VAR 0 4
30939: PUSH
30940: EMPTY
30941: LIST
30942: LIST
30943: LIST
30944: LIST
30945: PUSH
30946: LD_INT 3
30948: PUSH
30949: LD_INT 21
30951: PUSH
30952: LD_INT 3
30954: PUSH
30955: EMPTY
30956: LIST
30957: LIST
30958: PUSH
30959: EMPTY
30960: LIST
30961: LIST
30962: PUSH
30963: EMPTY
30964: LIST
30965: LIST
30966: LIST
30967: PPUSH
30968: CALL_OW 69
30972: ST_TO_ADDR
// if not tmp then
30973: LD_VAR 0 8
30977: NOT
30978: IFFALSE 30982
// exit ;
30980: GO 32542
// for i in tmp do
30982: LD_ADDR_VAR 0 6
30986: PUSH
30987: LD_VAR 0 8
30991: PUSH
30992: FOR_IN
30993: IFFALSE 32517
// begin points := [ 0 , 0 , 0 ] ;
30995: LD_ADDR_VAR 0 9
30999: PUSH
31000: LD_INT 0
31002: PUSH
31003: LD_INT 0
31005: PUSH
31006: LD_INT 0
31008: PUSH
31009: EMPTY
31010: LIST
31011: LIST
31012: LIST
31013: ST_TO_ADDR
// bpoints := 1 ;
31014: LD_ADDR_VAR 0 10
31018: PUSH
31019: LD_INT 1
31021: ST_TO_ADDR
// case GetType ( i ) of unit_human :
31022: LD_VAR 0 6
31026: PPUSH
31027: CALL_OW 247
31031: PUSH
31032: LD_INT 1
31034: DOUBLE
31035: EQUAL
31036: IFTRUE 31040
31038: GO 31618
31040: POP
// begin if GetClass ( i ) = 1 then
31041: LD_VAR 0 6
31045: PPUSH
31046: CALL_OW 257
31050: PUSH
31051: LD_INT 1
31053: EQUAL
31054: IFFALSE 31075
// points := [ 10 , 5 , 3 ] ;
31056: LD_ADDR_VAR 0 9
31060: PUSH
31061: LD_INT 10
31063: PUSH
31064: LD_INT 5
31066: PUSH
31067: LD_INT 3
31069: PUSH
31070: EMPTY
31071: LIST
31072: LIST
31073: LIST
31074: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
31075: LD_VAR 0 6
31079: PPUSH
31080: CALL_OW 257
31084: PUSH
31085: LD_INT 2
31087: PUSH
31088: LD_INT 3
31090: PUSH
31091: LD_INT 4
31093: PUSH
31094: EMPTY
31095: LIST
31096: LIST
31097: LIST
31098: IN
31099: IFFALSE 31120
// points := [ 3 , 2 , 1 ] ;
31101: LD_ADDR_VAR 0 9
31105: PUSH
31106: LD_INT 3
31108: PUSH
31109: LD_INT 2
31111: PUSH
31112: LD_INT 1
31114: PUSH
31115: EMPTY
31116: LIST
31117: LIST
31118: LIST
31119: ST_TO_ADDR
// if GetClass ( i ) = 5 then
31120: LD_VAR 0 6
31124: PPUSH
31125: CALL_OW 257
31129: PUSH
31130: LD_INT 5
31132: EQUAL
31133: IFFALSE 31154
// points := [ 130 , 5 , 2 ] ;
31135: LD_ADDR_VAR 0 9
31139: PUSH
31140: LD_INT 130
31142: PUSH
31143: LD_INT 5
31145: PUSH
31146: LD_INT 2
31148: PUSH
31149: EMPTY
31150: LIST
31151: LIST
31152: LIST
31153: ST_TO_ADDR
// if GetClass ( i ) = 8 then
31154: LD_VAR 0 6
31158: PPUSH
31159: CALL_OW 257
31163: PUSH
31164: LD_INT 8
31166: EQUAL
31167: IFFALSE 31188
// points := [ 35 , 35 , 30 ] ;
31169: LD_ADDR_VAR 0 9
31173: PUSH
31174: LD_INT 35
31176: PUSH
31177: LD_INT 35
31179: PUSH
31180: LD_INT 30
31182: PUSH
31183: EMPTY
31184: LIST
31185: LIST
31186: LIST
31187: ST_TO_ADDR
// if GetClass ( i ) = 9 then
31188: LD_VAR 0 6
31192: PPUSH
31193: CALL_OW 257
31197: PUSH
31198: LD_INT 9
31200: EQUAL
31201: IFFALSE 31222
// points := [ 20 , 55 , 40 ] ;
31203: LD_ADDR_VAR 0 9
31207: PUSH
31208: LD_INT 20
31210: PUSH
31211: LD_INT 55
31213: PUSH
31214: LD_INT 40
31216: PUSH
31217: EMPTY
31218: LIST
31219: LIST
31220: LIST
31221: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
31222: LD_VAR 0 6
31226: PPUSH
31227: CALL_OW 257
31231: PUSH
31232: LD_INT 12
31234: PUSH
31235: LD_INT 16
31237: PUSH
31238: EMPTY
31239: LIST
31240: LIST
31241: IN
31242: IFFALSE 31263
// points := [ 5 , 3 , 2 ] ;
31244: LD_ADDR_VAR 0 9
31248: PUSH
31249: LD_INT 5
31251: PUSH
31252: LD_INT 3
31254: PUSH
31255: LD_INT 2
31257: PUSH
31258: EMPTY
31259: LIST
31260: LIST
31261: LIST
31262: ST_TO_ADDR
// if GetClass ( i ) = 17 then
31263: LD_VAR 0 6
31267: PPUSH
31268: CALL_OW 257
31272: PUSH
31273: LD_INT 17
31275: EQUAL
31276: IFFALSE 31297
// points := [ 100 , 50 , 75 ] ;
31278: LD_ADDR_VAR 0 9
31282: PUSH
31283: LD_INT 100
31285: PUSH
31286: LD_INT 50
31288: PUSH
31289: LD_INT 75
31291: PUSH
31292: EMPTY
31293: LIST
31294: LIST
31295: LIST
31296: ST_TO_ADDR
// if GetClass ( i ) = 15 then
31297: LD_VAR 0 6
31301: PPUSH
31302: CALL_OW 257
31306: PUSH
31307: LD_INT 15
31309: EQUAL
31310: IFFALSE 31331
// points := [ 10 , 5 , 3 ] ;
31312: LD_ADDR_VAR 0 9
31316: PUSH
31317: LD_INT 10
31319: PUSH
31320: LD_INT 5
31322: PUSH
31323: LD_INT 3
31325: PUSH
31326: EMPTY
31327: LIST
31328: LIST
31329: LIST
31330: ST_TO_ADDR
// if GetClass ( i ) = 14 then
31331: LD_VAR 0 6
31335: PPUSH
31336: CALL_OW 257
31340: PUSH
31341: LD_INT 14
31343: EQUAL
31344: IFFALSE 31365
// points := [ 10 , 0 , 0 ] ;
31346: LD_ADDR_VAR 0 9
31350: PUSH
31351: LD_INT 10
31353: PUSH
31354: LD_INT 0
31356: PUSH
31357: LD_INT 0
31359: PUSH
31360: EMPTY
31361: LIST
31362: LIST
31363: LIST
31364: ST_TO_ADDR
// if GetClass ( i ) = 11 then
31365: LD_VAR 0 6
31369: PPUSH
31370: CALL_OW 257
31374: PUSH
31375: LD_INT 11
31377: EQUAL
31378: IFFALSE 31399
// points := [ 30 , 10 , 5 ] ;
31380: LD_ADDR_VAR 0 9
31384: PUSH
31385: LD_INT 30
31387: PUSH
31388: LD_INT 10
31390: PUSH
31391: LD_INT 5
31393: PUSH
31394: EMPTY
31395: LIST
31396: LIST
31397: LIST
31398: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
31399: LD_VAR 0 1
31403: PPUSH
31404: LD_INT 5
31406: PPUSH
31407: CALL_OW 321
31411: PUSH
31412: LD_INT 2
31414: EQUAL
31415: IFFALSE 31432
// bpoints := bpoints * 1.8 ;
31417: LD_ADDR_VAR 0 10
31421: PUSH
31422: LD_VAR 0 10
31426: PUSH
31427: LD_REAL  1.80000000000000E+0000
31430: MUL
31431: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
31432: LD_VAR 0 6
31436: PPUSH
31437: CALL_OW 257
31441: PUSH
31442: LD_INT 1
31444: PUSH
31445: LD_INT 2
31447: PUSH
31448: LD_INT 3
31450: PUSH
31451: LD_INT 4
31453: PUSH
31454: EMPTY
31455: LIST
31456: LIST
31457: LIST
31458: LIST
31459: IN
31460: PUSH
31461: LD_VAR 0 1
31465: PPUSH
31466: LD_INT 51
31468: PPUSH
31469: CALL_OW 321
31473: PUSH
31474: LD_INT 2
31476: EQUAL
31477: AND
31478: IFFALSE 31495
// bpoints := bpoints * 1.2 ;
31480: LD_ADDR_VAR 0 10
31484: PUSH
31485: LD_VAR 0 10
31489: PUSH
31490: LD_REAL  1.20000000000000E+0000
31493: MUL
31494: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
31495: LD_VAR 0 6
31499: PPUSH
31500: CALL_OW 257
31504: PUSH
31505: LD_INT 5
31507: PUSH
31508: LD_INT 7
31510: PUSH
31511: LD_INT 9
31513: PUSH
31514: EMPTY
31515: LIST
31516: LIST
31517: LIST
31518: IN
31519: PUSH
31520: LD_VAR 0 1
31524: PPUSH
31525: LD_INT 52
31527: PPUSH
31528: CALL_OW 321
31532: PUSH
31533: LD_INT 2
31535: EQUAL
31536: AND
31537: IFFALSE 31554
// bpoints := bpoints * 1.5 ;
31539: LD_ADDR_VAR 0 10
31543: PUSH
31544: LD_VAR 0 10
31548: PUSH
31549: LD_REAL  1.50000000000000E+0000
31552: MUL
31553: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
31554: LD_VAR 0 1
31558: PPUSH
31559: LD_INT 66
31561: PPUSH
31562: CALL_OW 321
31566: PUSH
31567: LD_INT 2
31569: EQUAL
31570: IFFALSE 31587
// bpoints := bpoints * 1.1 ;
31572: LD_ADDR_VAR 0 10
31576: PUSH
31577: LD_VAR 0 10
31581: PUSH
31582: LD_REAL  1.10000000000000E+0000
31585: MUL
31586: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
31587: LD_ADDR_VAR 0 10
31591: PUSH
31592: LD_VAR 0 10
31596: PUSH
31597: LD_VAR 0 6
31601: PPUSH
31602: LD_INT 1
31604: PPUSH
31605: CALL_OW 259
31609: PUSH
31610: LD_REAL  1.15000000000000E+0000
31613: MUL
31614: MUL
31615: ST_TO_ADDR
// end ; unit_vehicle :
31616: GO 32446
31618: LD_INT 2
31620: DOUBLE
31621: EQUAL
31622: IFTRUE 31626
31624: GO 32434
31626: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
31627: LD_VAR 0 6
31631: PPUSH
31632: CALL_OW 264
31636: PUSH
31637: LD_INT 2
31639: PUSH
31640: LD_INT 42
31642: PUSH
31643: LD_INT 24
31645: PUSH
31646: EMPTY
31647: LIST
31648: LIST
31649: LIST
31650: IN
31651: IFFALSE 31672
// points := [ 25 , 5 , 3 ] ;
31653: LD_ADDR_VAR 0 9
31657: PUSH
31658: LD_INT 25
31660: PUSH
31661: LD_INT 5
31663: PUSH
31664: LD_INT 3
31666: PUSH
31667: EMPTY
31668: LIST
31669: LIST
31670: LIST
31671: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
31672: LD_VAR 0 6
31676: PPUSH
31677: CALL_OW 264
31681: PUSH
31682: LD_INT 4
31684: PUSH
31685: LD_INT 43
31687: PUSH
31688: LD_INT 25
31690: PUSH
31691: EMPTY
31692: LIST
31693: LIST
31694: LIST
31695: IN
31696: IFFALSE 31717
// points := [ 40 , 15 , 5 ] ;
31698: LD_ADDR_VAR 0 9
31702: PUSH
31703: LD_INT 40
31705: PUSH
31706: LD_INT 15
31708: PUSH
31709: LD_INT 5
31711: PUSH
31712: EMPTY
31713: LIST
31714: LIST
31715: LIST
31716: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
31717: LD_VAR 0 6
31721: PPUSH
31722: CALL_OW 264
31726: PUSH
31727: LD_INT 3
31729: PUSH
31730: LD_INT 23
31732: PUSH
31733: EMPTY
31734: LIST
31735: LIST
31736: IN
31737: IFFALSE 31758
// points := [ 7 , 25 , 8 ] ;
31739: LD_ADDR_VAR 0 9
31743: PUSH
31744: LD_INT 7
31746: PUSH
31747: LD_INT 25
31749: PUSH
31750: LD_INT 8
31752: PUSH
31753: EMPTY
31754: LIST
31755: LIST
31756: LIST
31757: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
31758: LD_VAR 0 6
31762: PPUSH
31763: CALL_OW 264
31767: PUSH
31768: LD_INT 5
31770: PUSH
31771: LD_INT 27
31773: PUSH
31774: LD_INT 44
31776: PUSH
31777: EMPTY
31778: LIST
31779: LIST
31780: LIST
31781: IN
31782: IFFALSE 31803
// points := [ 14 , 50 , 16 ] ;
31784: LD_ADDR_VAR 0 9
31788: PUSH
31789: LD_INT 14
31791: PUSH
31792: LD_INT 50
31794: PUSH
31795: LD_INT 16
31797: PUSH
31798: EMPTY
31799: LIST
31800: LIST
31801: LIST
31802: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
31803: LD_VAR 0 6
31807: PPUSH
31808: CALL_OW 264
31812: PUSH
31813: LD_INT 6
31815: PUSH
31816: LD_INT 46
31818: PUSH
31819: EMPTY
31820: LIST
31821: LIST
31822: IN
31823: IFFALSE 31844
// points := [ 32 , 120 , 70 ] ;
31825: LD_ADDR_VAR 0 9
31829: PUSH
31830: LD_INT 32
31832: PUSH
31833: LD_INT 120
31835: PUSH
31836: LD_INT 70
31838: PUSH
31839: EMPTY
31840: LIST
31841: LIST
31842: LIST
31843: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
31844: LD_VAR 0 6
31848: PPUSH
31849: CALL_OW 264
31853: PUSH
31854: LD_INT 7
31856: PUSH
31857: LD_INT 28
31859: PUSH
31860: LD_INT 45
31862: PUSH
31863: LD_EXP 98
31867: PUSH
31868: EMPTY
31869: LIST
31870: LIST
31871: LIST
31872: LIST
31873: IN
31874: IFFALSE 31895
// points := [ 35 , 20 , 45 ] ;
31876: LD_ADDR_VAR 0 9
31880: PUSH
31881: LD_INT 35
31883: PUSH
31884: LD_INT 20
31886: PUSH
31887: LD_INT 45
31889: PUSH
31890: EMPTY
31891: LIST
31892: LIST
31893: LIST
31894: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
31895: LD_VAR 0 6
31899: PPUSH
31900: CALL_OW 264
31904: PUSH
31905: LD_INT 47
31907: PUSH
31908: EMPTY
31909: LIST
31910: IN
31911: IFFALSE 31932
// points := [ 67 , 45 , 75 ] ;
31913: LD_ADDR_VAR 0 9
31917: PUSH
31918: LD_INT 67
31920: PUSH
31921: LD_INT 45
31923: PUSH
31924: LD_INT 75
31926: PUSH
31927: EMPTY
31928: LIST
31929: LIST
31930: LIST
31931: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
31932: LD_VAR 0 6
31936: PPUSH
31937: CALL_OW 264
31941: PUSH
31942: LD_INT 26
31944: PUSH
31945: EMPTY
31946: LIST
31947: IN
31948: IFFALSE 31969
// points := [ 120 , 30 , 80 ] ;
31950: LD_ADDR_VAR 0 9
31954: PUSH
31955: LD_INT 120
31957: PUSH
31958: LD_INT 30
31960: PUSH
31961: LD_INT 80
31963: PUSH
31964: EMPTY
31965: LIST
31966: LIST
31967: LIST
31968: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
31969: LD_VAR 0 6
31973: PPUSH
31974: CALL_OW 264
31978: PUSH
31979: LD_INT 22
31981: PUSH
31982: EMPTY
31983: LIST
31984: IN
31985: IFFALSE 32006
// points := [ 40 , 1 , 1 ] ;
31987: LD_ADDR_VAR 0 9
31991: PUSH
31992: LD_INT 40
31994: PUSH
31995: LD_INT 1
31997: PUSH
31998: LD_INT 1
32000: PUSH
32001: EMPTY
32002: LIST
32003: LIST
32004: LIST
32005: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
32006: LD_VAR 0 6
32010: PPUSH
32011: CALL_OW 264
32015: PUSH
32016: LD_INT 29
32018: PUSH
32019: EMPTY
32020: LIST
32021: IN
32022: IFFALSE 32043
// points := [ 70 , 200 , 400 ] ;
32024: LD_ADDR_VAR 0 9
32028: PUSH
32029: LD_INT 70
32031: PUSH
32032: LD_INT 200
32034: PUSH
32035: LD_INT 400
32037: PUSH
32038: EMPTY
32039: LIST
32040: LIST
32041: LIST
32042: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
32043: LD_VAR 0 6
32047: PPUSH
32048: CALL_OW 264
32052: PUSH
32053: LD_INT 14
32055: PUSH
32056: LD_INT 53
32058: PUSH
32059: EMPTY
32060: LIST
32061: LIST
32062: IN
32063: IFFALSE 32084
// points := [ 40 , 10 , 20 ] ;
32065: LD_ADDR_VAR 0 9
32069: PUSH
32070: LD_INT 40
32072: PUSH
32073: LD_INT 10
32075: PUSH
32076: LD_INT 20
32078: PUSH
32079: EMPTY
32080: LIST
32081: LIST
32082: LIST
32083: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
32084: LD_VAR 0 6
32088: PPUSH
32089: CALL_OW 264
32093: PUSH
32094: LD_INT 9
32096: PUSH
32097: EMPTY
32098: LIST
32099: IN
32100: IFFALSE 32121
// points := [ 5 , 70 , 20 ] ;
32102: LD_ADDR_VAR 0 9
32106: PUSH
32107: LD_INT 5
32109: PUSH
32110: LD_INT 70
32112: PUSH
32113: LD_INT 20
32115: PUSH
32116: EMPTY
32117: LIST
32118: LIST
32119: LIST
32120: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
32121: LD_VAR 0 6
32125: PPUSH
32126: CALL_OW 264
32130: PUSH
32131: LD_INT 10
32133: PUSH
32134: EMPTY
32135: LIST
32136: IN
32137: IFFALSE 32158
// points := [ 35 , 110 , 70 ] ;
32139: LD_ADDR_VAR 0 9
32143: PUSH
32144: LD_INT 35
32146: PUSH
32147: LD_INT 110
32149: PUSH
32150: LD_INT 70
32152: PUSH
32153: EMPTY
32154: LIST
32155: LIST
32156: LIST
32157: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
32158: LD_VAR 0 6
32162: PPUSH
32163: CALL_OW 265
32167: PUSH
32168: LD_INT 25
32170: EQUAL
32171: IFFALSE 32192
// points := [ 80 , 65 , 100 ] ;
32173: LD_ADDR_VAR 0 9
32177: PUSH
32178: LD_INT 80
32180: PUSH
32181: LD_INT 65
32183: PUSH
32184: LD_INT 100
32186: PUSH
32187: EMPTY
32188: LIST
32189: LIST
32190: LIST
32191: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
32192: LD_VAR 0 6
32196: PPUSH
32197: CALL_OW 263
32201: PUSH
32202: LD_INT 1
32204: EQUAL
32205: IFFALSE 32240
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
32207: LD_ADDR_VAR 0 10
32211: PUSH
32212: LD_VAR 0 10
32216: PUSH
32217: LD_VAR 0 6
32221: PPUSH
32222: CALL_OW 311
32226: PPUSH
32227: LD_INT 3
32229: PPUSH
32230: CALL_OW 259
32234: PUSH
32235: LD_INT 4
32237: MUL
32238: MUL
32239: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
32240: LD_VAR 0 6
32244: PPUSH
32245: CALL_OW 263
32249: PUSH
32250: LD_INT 2
32252: EQUAL
32253: IFFALSE 32304
// begin j := IsControledBy ( i ) ;
32255: LD_ADDR_VAR 0 7
32259: PUSH
32260: LD_VAR 0 6
32264: PPUSH
32265: CALL_OW 312
32269: ST_TO_ADDR
// if j then
32270: LD_VAR 0 7
32274: IFFALSE 32304
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
32276: LD_ADDR_VAR 0 10
32280: PUSH
32281: LD_VAR 0 10
32285: PUSH
32286: LD_VAR 0 7
32290: PPUSH
32291: LD_INT 3
32293: PPUSH
32294: CALL_OW 259
32298: PUSH
32299: LD_INT 3
32301: MUL
32302: MUL
32303: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
32304: LD_VAR 0 6
32308: PPUSH
32309: CALL_OW 264
32313: PUSH
32314: LD_INT 5
32316: PUSH
32317: LD_INT 6
32319: PUSH
32320: LD_INT 46
32322: PUSH
32323: LD_INT 44
32325: PUSH
32326: LD_INT 47
32328: PUSH
32329: LD_INT 45
32331: PUSH
32332: LD_INT 28
32334: PUSH
32335: LD_INT 7
32337: PUSH
32338: LD_INT 27
32340: PUSH
32341: LD_INT 29
32343: PUSH
32344: EMPTY
32345: LIST
32346: LIST
32347: LIST
32348: LIST
32349: LIST
32350: LIST
32351: LIST
32352: LIST
32353: LIST
32354: LIST
32355: IN
32356: PUSH
32357: LD_VAR 0 1
32361: PPUSH
32362: LD_INT 52
32364: PPUSH
32365: CALL_OW 321
32369: PUSH
32370: LD_INT 2
32372: EQUAL
32373: AND
32374: IFFALSE 32391
// bpoints := bpoints * 1.2 ;
32376: LD_ADDR_VAR 0 10
32380: PUSH
32381: LD_VAR 0 10
32385: PUSH
32386: LD_REAL  1.20000000000000E+0000
32389: MUL
32390: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
32391: LD_VAR 0 6
32395: PPUSH
32396: CALL_OW 264
32400: PUSH
32401: LD_INT 6
32403: PUSH
32404: LD_INT 46
32406: PUSH
32407: LD_INT 47
32409: PUSH
32410: EMPTY
32411: LIST
32412: LIST
32413: LIST
32414: IN
32415: IFFALSE 32432
// bpoints := bpoints * 1.2 ;
32417: LD_ADDR_VAR 0 10
32421: PUSH
32422: LD_VAR 0 10
32426: PUSH
32427: LD_REAL  1.20000000000000E+0000
32430: MUL
32431: ST_TO_ADDR
// end ; unit_building :
32432: GO 32446
32434: LD_INT 3
32436: DOUBLE
32437: EQUAL
32438: IFTRUE 32442
32440: GO 32445
32442: POP
// ; end ;
32443: GO 32446
32445: POP
// for j = 1 to 3 do
32446: LD_ADDR_VAR 0 7
32450: PUSH
32451: DOUBLE
32452: LD_INT 1
32454: DEC
32455: ST_TO_ADDR
32456: LD_INT 3
32458: PUSH
32459: FOR_TO
32460: IFFALSE 32513
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
32462: LD_ADDR_VAR 0 5
32466: PUSH
32467: LD_VAR 0 5
32471: PPUSH
32472: LD_VAR 0 7
32476: PPUSH
32477: LD_VAR 0 5
32481: PUSH
32482: LD_VAR 0 7
32486: ARRAY
32487: PUSH
32488: LD_VAR 0 9
32492: PUSH
32493: LD_VAR 0 7
32497: ARRAY
32498: PUSH
32499: LD_VAR 0 10
32503: MUL
32504: PLUS
32505: PPUSH
32506: CALL_OW 1
32510: ST_TO_ADDR
32511: GO 32459
32513: POP
32514: POP
// end ;
32515: GO 30992
32517: POP
32518: POP
// result := Replace ( result , 4 , tmp ) ;
32519: LD_ADDR_VAR 0 5
32523: PUSH
32524: LD_VAR 0 5
32528: PPUSH
32529: LD_INT 4
32531: PPUSH
32532: LD_VAR 0 8
32536: PPUSH
32537: CALL_OW 1
32541: ST_TO_ADDR
// end ;
32542: LD_VAR 0 5
32546: RET
// export function DangerAtRange ( unit , range ) ; begin
32547: LD_INT 0
32549: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
32550: LD_ADDR_VAR 0 3
32554: PUSH
32555: LD_VAR 0 1
32559: PPUSH
32560: CALL_OW 255
32564: PPUSH
32565: LD_VAR 0 1
32569: PPUSH
32570: CALL_OW 250
32574: PPUSH
32575: LD_VAR 0 1
32579: PPUSH
32580: CALL_OW 251
32584: PPUSH
32585: LD_VAR 0 2
32589: PPUSH
32590: CALL 30844 0 4
32594: ST_TO_ADDR
// end ;
32595: LD_VAR 0 3
32599: RET
// export function DangerInArea ( side , area ) ; begin
32600: LD_INT 0
32602: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
32603: LD_ADDR_VAR 0 3
32607: PUSH
32608: LD_VAR 0 2
32612: PPUSH
32613: LD_INT 81
32615: PUSH
32616: LD_VAR 0 1
32620: PUSH
32621: EMPTY
32622: LIST
32623: LIST
32624: PPUSH
32625: CALL_OW 70
32629: ST_TO_ADDR
// end ;
32630: LD_VAR 0 3
32634: RET
// export function IsExtension ( b ) ; begin
32635: LD_INT 0
32637: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
32638: LD_ADDR_VAR 0 2
32642: PUSH
32643: LD_VAR 0 1
32647: PUSH
32648: LD_INT 23
32650: PUSH
32651: LD_INT 20
32653: PUSH
32654: LD_INT 22
32656: PUSH
32657: LD_INT 17
32659: PUSH
32660: LD_INT 24
32662: PUSH
32663: LD_INT 21
32665: PUSH
32666: LD_INT 19
32668: PUSH
32669: LD_INT 16
32671: PUSH
32672: LD_INT 25
32674: PUSH
32675: LD_INT 18
32677: PUSH
32678: EMPTY
32679: LIST
32680: LIST
32681: LIST
32682: LIST
32683: LIST
32684: LIST
32685: LIST
32686: LIST
32687: LIST
32688: LIST
32689: IN
32690: ST_TO_ADDR
// end ;
32691: LD_VAR 0 2
32695: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
32696: LD_INT 0
32698: PPUSH
32699: PPUSH
32700: PPUSH
// result := [ ] ;
32701: LD_ADDR_VAR 0 4
32705: PUSH
32706: EMPTY
32707: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
32708: LD_ADDR_VAR 0 5
32712: PUSH
32713: LD_VAR 0 2
32717: PPUSH
32718: LD_INT 21
32720: PUSH
32721: LD_INT 3
32723: PUSH
32724: EMPTY
32725: LIST
32726: LIST
32727: PPUSH
32728: CALL_OW 70
32732: ST_TO_ADDR
// if not tmp then
32733: LD_VAR 0 5
32737: NOT
32738: IFFALSE 32742
// exit ;
32740: GO 32806
// if checkLink then
32742: LD_VAR 0 3
32746: IFFALSE 32796
// begin for i in tmp do
32748: LD_ADDR_VAR 0 6
32752: PUSH
32753: LD_VAR 0 5
32757: PUSH
32758: FOR_IN
32759: IFFALSE 32794
// if GetBase ( i ) <> base then
32761: LD_VAR 0 6
32765: PPUSH
32766: CALL_OW 274
32770: PUSH
32771: LD_VAR 0 1
32775: NONEQUAL
32776: IFFALSE 32792
// ComLinkToBase ( base , i ) ;
32778: LD_VAR 0 1
32782: PPUSH
32783: LD_VAR 0 6
32787: PPUSH
32788: CALL_OW 169
32792: GO 32758
32794: POP
32795: POP
// end ; result := tmp ;
32796: LD_ADDR_VAR 0 4
32800: PUSH
32801: LD_VAR 0 5
32805: ST_TO_ADDR
// end ;
32806: LD_VAR 0 4
32810: RET
// export function ComComplete ( units , b ) ; var i ; begin
32811: LD_INT 0
32813: PPUSH
32814: PPUSH
// if not units then
32815: LD_VAR 0 1
32819: NOT
32820: IFFALSE 32824
// exit ;
32822: GO 32914
// for i in units do
32824: LD_ADDR_VAR 0 4
32828: PUSH
32829: LD_VAR 0 1
32833: PUSH
32834: FOR_IN
32835: IFFALSE 32912
// if BuildingStatus ( b ) = bs_build then
32837: LD_VAR 0 2
32841: PPUSH
32842: CALL_OW 461
32846: PUSH
32847: LD_INT 1
32849: EQUAL
32850: IFFALSE 32910
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
32852: LD_VAR 0 4
32856: PPUSH
32857: LD_STRING h
32859: PUSH
32860: LD_VAR 0 2
32864: PPUSH
32865: CALL_OW 250
32869: PUSH
32870: LD_VAR 0 2
32874: PPUSH
32875: CALL_OW 251
32879: PUSH
32880: LD_VAR 0 2
32884: PUSH
32885: LD_INT 0
32887: PUSH
32888: LD_INT 0
32890: PUSH
32891: LD_INT 0
32893: PUSH
32894: EMPTY
32895: LIST
32896: LIST
32897: LIST
32898: LIST
32899: LIST
32900: LIST
32901: LIST
32902: PUSH
32903: EMPTY
32904: LIST
32905: PPUSH
32906: CALL_OW 446
32910: GO 32834
32912: POP
32913: POP
// end ;
32914: LD_VAR 0 3
32918: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
32919: LD_INT 0
32921: PPUSH
32922: PPUSH
32923: PPUSH
32924: PPUSH
32925: PPUSH
32926: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
32927: LD_VAR 0 1
32931: NOT
32932: PUSH
32933: LD_VAR 0 1
32937: PPUSH
32938: CALL_OW 263
32942: PUSH
32943: LD_INT 2
32945: NONEQUAL
32946: OR
32947: IFFALSE 32951
// exit ;
32949: GO 33267
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
32951: LD_ADDR_VAR 0 6
32955: PUSH
32956: LD_INT 22
32958: PUSH
32959: LD_VAR 0 1
32963: PPUSH
32964: CALL_OW 255
32968: PUSH
32969: EMPTY
32970: LIST
32971: LIST
32972: PUSH
32973: LD_INT 2
32975: PUSH
32976: LD_INT 30
32978: PUSH
32979: LD_INT 36
32981: PUSH
32982: EMPTY
32983: LIST
32984: LIST
32985: PUSH
32986: LD_INT 34
32988: PUSH
32989: LD_INT 31
32991: PUSH
32992: EMPTY
32993: LIST
32994: LIST
32995: PUSH
32996: EMPTY
32997: LIST
32998: LIST
32999: LIST
33000: PUSH
33001: EMPTY
33002: LIST
33003: LIST
33004: PPUSH
33005: CALL_OW 69
33009: ST_TO_ADDR
// if not tmp then
33010: LD_VAR 0 6
33014: NOT
33015: IFFALSE 33019
// exit ;
33017: GO 33267
// result := [ ] ;
33019: LD_ADDR_VAR 0 2
33023: PUSH
33024: EMPTY
33025: ST_TO_ADDR
// for i in tmp do
33026: LD_ADDR_VAR 0 3
33030: PUSH
33031: LD_VAR 0 6
33035: PUSH
33036: FOR_IN
33037: IFFALSE 33108
// begin t := UnitsInside ( i ) ;
33039: LD_ADDR_VAR 0 4
33043: PUSH
33044: LD_VAR 0 3
33048: PPUSH
33049: CALL_OW 313
33053: ST_TO_ADDR
// if t then
33054: LD_VAR 0 4
33058: IFFALSE 33106
// for j in t do
33060: LD_ADDR_VAR 0 7
33064: PUSH
33065: LD_VAR 0 4
33069: PUSH
33070: FOR_IN
33071: IFFALSE 33104
// result := Replace ( result , result + 1 , j ) ;
33073: LD_ADDR_VAR 0 2
33077: PUSH
33078: LD_VAR 0 2
33082: PPUSH
33083: LD_VAR 0 2
33087: PUSH
33088: LD_INT 1
33090: PLUS
33091: PPUSH
33092: LD_VAR 0 7
33096: PPUSH
33097: CALL_OW 1
33101: ST_TO_ADDR
33102: GO 33070
33104: POP
33105: POP
// end ;
33106: GO 33036
33108: POP
33109: POP
// if not result then
33110: LD_VAR 0 2
33114: NOT
33115: IFFALSE 33119
// exit ;
33117: GO 33267
// mech := result [ 1 ] ;
33119: LD_ADDR_VAR 0 5
33123: PUSH
33124: LD_VAR 0 2
33128: PUSH
33129: LD_INT 1
33131: ARRAY
33132: ST_TO_ADDR
// if result > 1 then
33133: LD_VAR 0 2
33137: PUSH
33138: LD_INT 1
33140: GREATER
33141: IFFALSE 33253
// begin for i = 2 to result do
33143: LD_ADDR_VAR 0 3
33147: PUSH
33148: DOUBLE
33149: LD_INT 2
33151: DEC
33152: ST_TO_ADDR
33153: LD_VAR 0 2
33157: PUSH
33158: FOR_TO
33159: IFFALSE 33251
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
33161: LD_ADDR_VAR 0 4
33165: PUSH
33166: LD_VAR 0 2
33170: PUSH
33171: LD_VAR 0 3
33175: ARRAY
33176: PPUSH
33177: LD_INT 3
33179: PPUSH
33180: CALL_OW 259
33184: PUSH
33185: LD_VAR 0 2
33189: PUSH
33190: LD_VAR 0 3
33194: ARRAY
33195: PPUSH
33196: CALL_OW 432
33200: MINUS
33201: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
33202: LD_VAR 0 4
33206: PUSH
33207: LD_VAR 0 5
33211: PPUSH
33212: LD_INT 3
33214: PPUSH
33215: CALL_OW 259
33219: PUSH
33220: LD_VAR 0 5
33224: PPUSH
33225: CALL_OW 432
33229: MINUS
33230: GREATEREQUAL
33231: IFFALSE 33249
// mech := result [ i ] ;
33233: LD_ADDR_VAR 0 5
33237: PUSH
33238: LD_VAR 0 2
33242: PUSH
33243: LD_VAR 0 3
33247: ARRAY
33248: ST_TO_ADDR
// end ;
33249: GO 33158
33251: POP
33252: POP
// end ; ComLinkTo ( vehicle , mech ) ;
33253: LD_VAR 0 1
33257: PPUSH
33258: LD_VAR 0 5
33262: PPUSH
33263: CALL_OW 135
// end ;
33267: LD_VAR 0 2
33271: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
33272: LD_INT 0
33274: PPUSH
33275: PPUSH
33276: PPUSH
33277: PPUSH
33278: PPUSH
33279: PPUSH
33280: PPUSH
33281: PPUSH
33282: PPUSH
33283: PPUSH
33284: PPUSH
33285: PPUSH
33286: PPUSH
// result := [ ] ;
33287: LD_ADDR_VAR 0 7
33291: PUSH
33292: EMPTY
33293: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
33294: LD_VAR 0 1
33298: PPUSH
33299: CALL_OW 266
33303: PUSH
33304: LD_INT 0
33306: PUSH
33307: LD_INT 1
33309: PUSH
33310: EMPTY
33311: LIST
33312: LIST
33313: IN
33314: NOT
33315: IFFALSE 33319
// exit ;
33317: GO 34953
// if name then
33319: LD_VAR 0 3
33323: IFFALSE 33339
// SetBName ( base_dep , name ) ;
33325: LD_VAR 0 1
33329: PPUSH
33330: LD_VAR 0 3
33334: PPUSH
33335: CALL_OW 500
// base := GetBase ( base_dep ) ;
33339: LD_ADDR_VAR 0 15
33343: PUSH
33344: LD_VAR 0 1
33348: PPUSH
33349: CALL_OW 274
33353: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
33354: LD_ADDR_VAR 0 16
33358: PUSH
33359: LD_VAR 0 1
33363: PPUSH
33364: CALL_OW 255
33368: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
33369: LD_ADDR_VAR 0 17
33373: PUSH
33374: LD_VAR 0 1
33378: PPUSH
33379: CALL_OW 248
33383: ST_TO_ADDR
// if sources then
33384: LD_VAR 0 5
33388: IFFALSE 33435
// for i = 1 to 3 do
33390: LD_ADDR_VAR 0 8
33394: PUSH
33395: DOUBLE
33396: LD_INT 1
33398: DEC
33399: ST_TO_ADDR
33400: LD_INT 3
33402: PUSH
33403: FOR_TO
33404: IFFALSE 33433
// AddResourceType ( base , i , sources [ i ] ) ;
33406: LD_VAR 0 15
33410: PPUSH
33411: LD_VAR 0 8
33415: PPUSH
33416: LD_VAR 0 5
33420: PUSH
33421: LD_VAR 0 8
33425: ARRAY
33426: PPUSH
33427: CALL_OW 276
33431: GO 33403
33433: POP
33434: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
33435: LD_ADDR_VAR 0 18
33439: PUSH
33440: LD_VAR 0 15
33444: PPUSH
33445: LD_VAR 0 2
33449: PPUSH
33450: LD_INT 1
33452: PPUSH
33453: CALL 32696 0 3
33457: ST_TO_ADDR
// InitHc ;
33458: CALL_OW 19
// InitUc ;
33462: CALL_OW 18
// uc_side := side ;
33466: LD_ADDR_OWVAR 20
33470: PUSH
33471: LD_VAR 0 16
33475: ST_TO_ADDR
// uc_nation := nation ;
33476: LD_ADDR_OWVAR 21
33480: PUSH
33481: LD_VAR 0 17
33485: ST_TO_ADDR
// if buildings then
33486: LD_VAR 0 18
33490: IFFALSE 34812
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
33492: LD_ADDR_VAR 0 19
33496: PUSH
33497: LD_VAR 0 18
33501: PPUSH
33502: LD_INT 2
33504: PUSH
33505: LD_INT 30
33507: PUSH
33508: LD_INT 29
33510: PUSH
33511: EMPTY
33512: LIST
33513: LIST
33514: PUSH
33515: LD_INT 30
33517: PUSH
33518: LD_INT 30
33520: PUSH
33521: EMPTY
33522: LIST
33523: LIST
33524: PUSH
33525: EMPTY
33526: LIST
33527: LIST
33528: LIST
33529: PPUSH
33530: CALL_OW 72
33534: ST_TO_ADDR
// if tmp then
33535: LD_VAR 0 19
33539: IFFALSE 33587
// for i in tmp do
33541: LD_ADDR_VAR 0 8
33545: PUSH
33546: LD_VAR 0 19
33550: PUSH
33551: FOR_IN
33552: IFFALSE 33585
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
33554: LD_VAR 0 8
33558: PPUSH
33559: CALL_OW 250
33563: PPUSH
33564: LD_VAR 0 8
33568: PPUSH
33569: CALL_OW 251
33573: PPUSH
33574: LD_VAR 0 16
33578: PPUSH
33579: CALL_OW 441
33583: GO 33551
33585: POP
33586: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
33587: LD_VAR 0 18
33591: PPUSH
33592: LD_INT 2
33594: PUSH
33595: LD_INT 30
33597: PUSH
33598: LD_INT 32
33600: PUSH
33601: EMPTY
33602: LIST
33603: LIST
33604: PUSH
33605: LD_INT 30
33607: PUSH
33608: LD_INT 33
33610: PUSH
33611: EMPTY
33612: LIST
33613: LIST
33614: PUSH
33615: EMPTY
33616: LIST
33617: LIST
33618: LIST
33619: PPUSH
33620: CALL_OW 72
33624: IFFALSE 33712
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
33626: LD_ADDR_VAR 0 8
33630: PUSH
33631: LD_VAR 0 18
33635: PPUSH
33636: LD_INT 2
33638: PUSH
33639: LD_INT 30
33641: PUSH
33642: LD_INT 32
33644: PUSH
33645: EMPTY
33646: LIST
33647: LIST
33648: PUSH
33649: LD_INT 30
33651: PUSH
33652: LD_INT 33
33654: PUSH
33655: EMPTY
33656: LIST
33657: LIST
33658: PUSH
33659: EMPTY
33660: LIST
33661: LIST
33662: LIST
33663: PPUSH
33664: CALL_OW 72
33668: PUSH
33669: FOR_IN
33670: IFFALSE 33710
// begin if not GetBWeapon ( i ) then
33672: LD_VAR 0 8
33676: PPUSH
33677: CALL_OW 269
33681: NOT
33682: IFFALSE 33708
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
33684: LD_VAR 0 8
33688: PPUSH
33689: LD_VAR 0 8
33693: PPUSH
33694: LD_VAR 0 2
33698: PPUSH
33699: CALL 34958 0 2
33703: PPUSH
33704: CALL_OW 431
// end ;
33708: GO 33669
33710: POP
33711: POP
// end ; for i = 1 to personel do
33712: LD_ADDR_VAR 0 8
33716: PUSH
33717: DOUBLE
33718: LD_INT 1
33720: DEC
33721: ST_TO_ADDR
33722: LD_VAR 0 6
33726: PUSH
33727: FOR_TO
33728: IFFALSE 34792
// begin if i > 4 then
33730: LD_VAR 0 8
33734: PUSH
33735: LD_INT 4
33737: GREATER
33738: IFFALSE 33742
// break ;
33740: GO 34792
// case i of 1 :
33742: LD_VAR 0 8
33746: PUSH
33747: LD_INT 1
33749: DOUBLE
33750: EQUAL
33751: IFTRUE 33755
33753: GO 33835
33755: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
33756: LD_ADDR_VAR 0 12
33760: PUSH
33761: LD_VAR 0 18
33765: PPUSH
33766: LD_INT 22
33768: PUSH
33769: LD_VAR 0 16
33773: PUSH
33774: EMPTY
33775: LIST
33776: LIST
33777: PUSH
33778: LD_INT 58
33780: PUSH
33781: EMPTY
33782: LIST
33783: PUSH
33784: LD_INT 2
33786: PUSH
33787: LD_INT 30
33789: PUSH
33790: LD_INT 32
33792: PUSH
33793: EMPTY
33794: LIST
33795: LIST
33796: PUSH
33797: LD_INT 30
33799: PUSH
33800: LD_INT 4
33802: PUSH
33803: EMPTY
33804: LIST
33805: LIST
33806: PUSH
33807: LD_INT 30
33809: PUSH
33810: LD_INT 5
33812: PUSH
33813: EMPTY
33814: LIST
33815: LIST
33816: PUSH
33817: EMPTY
33818: LIST
33819: LIST
33820: LIST
33821: LIST
33822: PUSH
33823: EMPTY
33824: LIST
33825: LIST
33826: LIST
33827: PPUSH
33828: CALL_OW 72
33832: ST_TO_ADDR
33833: GO 34057
33835: LD_INT 2
33837: DOUBLE
33838: EQUAL
33839: IFTRUE 33843
33841: GO 33905
33843: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
33844: LD_ADDR_VAR 0 12
33848: PUSH
33849: LD_VAR 0 18
33853: PPUSH
33854: LD_INT 22
33856: PUSH
33857: LD_VAR 0 16
33861: PUSH
33862: EMPTY
33863: LIST
33864: LIST
33865: PUSH
33866: LD_INT 2
33868: PUSH
33869: LD_INT 30
33871: PUSH
33872: LD_INT 0
33874: PUSH
33875: EMPTY
33876: LIST
33877: LIST
33878: PUSH
33879: LD_INT 30
33881: PUSH
33882: LD_INT 1
33884: PUSH
33885: EMPTY
33886: LIST
33887: LIST
33888: PUSH
33889: EMPTY
33890: LIST
33891: LIST
33892: LIST
33893: PUSH
33894: EMPTY
33895: LIST
33896: LIST
33897: PPUSH
33898: CALL_OW 72
33902: ST_TO_ADDR
33903: GO 34057
33905: LD_INT 3
33907: DOUBLE
33908: EQUAL
33909: IFTRUE 33913
33911: GO 33975
33913: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
33914: LD_ADDR_VAR 0 12
33918: PUSH
33919: LD_VAR 0 18
33923: PPUSH
33924: LD_INT 22
33926: PUSH
33927: LD_VAR 0 16
33931: PUSH
33932: EMPTY
33933: LIST
33934: LIST
33935: PUSH
33936: LD_INT 2
33938: PUSH
33939: LD_INT 30
33941: PUSH
33942: LD_INT 2
33944: PUSH
33945: EMPTY
33946: LIST
33947: LIST
33948: PUSH
33949: LD_INT 30
33951: PUSH
33952: LD_INT 3
33954: PUSH
33955: EMPTY
33956: LIST
33957: LIST
33958: PUSH
33959: EMPTY
33960: LIST
33961: LIST
33962: LIST
33963: PUSH
33964: EMPTY
33965: LIST
33966: LIST
33967: PPUSH
33968: CALL_OW 72
33972: ST_TO_ADDR
33973: GO 34057
33975: LD_INT 4
33977: DOUBLE
33978: EQUAL
33979: IFTRUE 33983
33981: GO 34056
33983: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
33984: LD_ADDR_VAR 0 12
33988: PUSH
33989: LD_VAR 0 18
33993: PPUSH
33994: LD_INT 22
33996: PUSH
33997: LD_VAR 0 16
34001: PUSH
34002: EMPTY
34003: LIST
34004: LIST
34005: PUSH
34006: LD_INT 2
34008: PUSH
34009: LD_INT 30
34011: PUSH
34012: LD_INT 6
34014: PUSH
34015: EMPTY
34016: LIST
34017: LIST
34018: PUSH
34019: LD_INT 30
34021: PUSH
34022: LD_INT 7
34024: PUSH
34025: EMPTY
34026: LIST
34027: LIST
34028: PUSH
34029: LD_INT 30
34031: PUSH
34032: LD_INT 8
34034: PUSH
34035: EMPTY
34036: LIST
34037: LIST
34038: PUSH
34039: EMPTY
34040: LIST
34041: LIST
34042: LIST
34043: LIST
34044: PUSH
34045: EMPTY
34046: LIST
34047: LIST
34048: PPUSH
34049: CALL_OW 72
34053: ST_TO_ADDR
34054: GO 34057
34056: POP
// if i = 1 then
34057: LD_VAR 0 8
34061: PUSH
34062: LD_INT 1
34064: EQUAL
34065: IFFALSE 34176
// begin tmp := [ ] ;
34067: LD_ADDR_VAR 0 19
34071: PUSH
34072: EMPTY
34073: ST_TO_ADDR
// for j in f do
34074: LD_ADDR_VAR 0 9
34078: PUSH
34079: LD_VAR 0 12
34083: PUSH
34084: FOR_IN
34085: IFFALSE 34158
// if GetBType ( j ) = b_bunker then
34087: LD_VAR 0 9
34091: PPUSH
34092: CALL_OW 266
34096: PUSH
34097: LD_INT 32
34099: EQUAL
34100: IFFALSE 34127
// tmp := Insert ( tmp , 1 , j ) else
34102: LD_ADDR_VAR 0 19
34106: PUSH
34107: LD_VAR 0 19
34111: PPUSH
34112: LD_INT 1
34114: PPUSH
34115: LD_VAR 0 9
34119: PPUSH
34120: CALL_OW 2
34124: ST_TO_ADDR
34125: GO 34156
// tmp := Insert ( tmp , tmp + 1 , j ) ;
34127: LD_ADDR_VAR 0 19
34131: PUSH
34132: LD_VAR 0 19
34136: PPUSH
34137: LD_VAR 0 19
34141: PUSH
34142: LD_INT 1
34144: PLUS
34145: PPUSH
34146: LD_VAR 0 9
34150: PPUSH
34151: CALL_OW 2
34155: ST_TO_ADDR
34156: GO 34084
34158: POP
34159: POP
// if tmp then
34160: LD_VAR 0 19
34164: IFFALSE 34176
// f := tmp ;
34166: LD_ADDR_VAR 0 12
34170: PUSH
34171: LD_VAR 0 19
34175: ST_TO_ADDR
// end ; x := personel [ i ] ;
34176: LD_ADDR_VAR 0 13
34180: PUSH
34181: LD_VAR 0 6
34185: PUSH
34186: LD_VAR 0 8
34190: ARRAY
34191: ST_TO_ADDR
// if x = - 1 then
34192: LD_VAR 0 13
34196: PUSH
34197: LD_INT 1
34199: NEG
34200: EQUAL
34201: IFFALSE 34410
// begin for j in f do
34203: LD_ADDR_VAR 0 9
34207: PUSH
34208: LD_VAR 0 12
34212: PUSH
34213: FOR_IN
34214: IFFALSE 34406
// repeat InitHc ;
34216: CALL_OW 19
// if GetBType ( j ) = b_barracks then
34220: LD_VAR 0 9
34224: PPUSH
34225: CALL_OW 266
34229: PUSH
34230: LD_INT 5
34232: EQUAL
34233: IFFALSE 34303
// begin if UnitsInside ( j ) < 3 then
34235: LD_VAR 0 9
34239: PPUSH
34240: CALL_OW 313
34244: PUSH
34245: LD_INT 3
34247: LESS
34248: IFFALSE 34284
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34250: LD_INT 0
34252: PPUSH
34253: LD_INT 5
34255: PUSH
34256: LD_INT 8
34258: PUSH
34259: LD_INT 9
34261: PUSH
34262: EMPTY
34263: LIST
34264: LIST
34265: LIST
34266: PUSH
34267: LD_VAR 0 17
34271: ARRAY
34272: PPUSH
34273: LD_VAR 0 4
34277: PPUSH
34278: CALL_OW 380
34282: GO 34301
// PrepareHuman ( false , i , skill ) ;
34284: LD_INT 0
34286: PPUSH
34287: LD_VAR 0 8
34291: PPUSH
34292: LD_VAR 0 4
34296: PPUSH
34297: CALL_OW 380
// end else
34301: GO 34320
// PrepareHuman ( false , i , skill ) ;
34303: LD_INT 0
34305: PPUSH
34306: LD_VAR 0 8
34310: PPUSH
34311: LD_VAR 0 4
34315: PPUSH
34316: CALL_OW 380
// un := CreateHuman ;
34320: LD_ADDR_VAR 0 14
34324: PUSH
34325: CALL_OW 44
34329: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34330: LD_ADDR_VAR 0 7
34334: PUSH
34335: LD_VAR 0 7
34339: PPUSH
34340: LD_INT 1
34342: PPUSH
34343: LD_VAR 0 14
34347: PPUSH
34348: CALL_OW 2
34352: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
34353: LD_VAR 0 14
34357: PPUSH
34358: LD_VAR 0 9
34362: PPUSH
34363: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
34367: LD_VAR 0 9
34371: PPUSH
34372: CALL_OW 313
34376: PUSH
34377: LD_INT 6
34379: EQUAL
34380: PUSH
34381: LD_VAR 0 9
34385: PPUSH
34386: CALL_OW 266
34390: PUSH
34391: LD_INT 32
34393: PUSH
34394: LD_INT 31
34396: PUSH
34397: EMPTY
34398: LIST
34399: LIST
34400: IN
34401: OR
34402: IFFALSE 34216
34404: GO 34213
34406: POP
34407: POP
// end else
34408: GO 34790
// for j = 1 to x do
34410: LD_ADDR_VAR 0 9
34414: PUSH
34415: DOUBLE
34416: LD_INT 1
34418: DEC
34419: ST_TO_ADDR
34420: LD_VAR 0 13
34424: PUSH
34425: FOR_TO
34426: IFFALSE 34788
// begin InitHc ;
34428: CALL_OW 19
// if not f then
34432: LD_VAR 0 12
34436: NOT
34437: IFFALSE 34526
// begin PrepareHuman ( false , i , skill ) ;
34439: LD_INT 0
34441: PPUSH
34442: LD_VAR 0 8
34446: PPUSH
34447: LD_VAR 0 4
34451: PPUSH
34452: CALL_OW 380
// un := CreateHuman ;
34456: LD_ADDR_VAR 0 14
34460: PUSH
34461: CALL_OW 44
34465: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34466: LD_ADDR_VAR 0 7
34470: PUSH
34471: LD_VAR 0 7
34475: PPUSH
34476: LD_INT 1
34478: PPUSH
34479: LD_VAR 0 14
34483: PPUSH
34484: CALL_OW 2
34488: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34489: LD_VAR 0 14
34493: PPUSH
34494: LD_VAR 0 1
34498: PPUSH
34499: CALL_OW 250
34503: PPUSH
34504: LD_VAR 0 1
34508: PPUSH
34509: CALL_OW 251
34513: PPUSH
34514: LD_INT 10
34516: PPUSH
34517: LD_INT 0
34519: PPUSH
34520: CALL_OW 50
// continue ;
34524: GO 34425
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
34526: LD_VAR 0 12
34530: PUSH
34531: LD_INT 1
34533: ARRAY
34534: PPUSH
34535: CALL_OW 313
34539: PUSH
34540: LD_VAR 0 12
34544: PUSH
34545: LD_INT 1
34547: ARRAY
34548: PPUSH
34549: CALL_OW 266
34553: PUSH
34554: LD_INT 32
34556: PUSH
34557: LD_INT 31
34559: PUSH
34560: EMPTY
34561: LIST
34562: LIST
34563: IN
34564: AND
34565: PUSH
34566: LD_VAR 0 12
34570: PUSH
34571: LD_INT 1
34573: ARRAY
34574: PPUSH
34575: CALL_OW 313
34579: PUSH
34580: LD_INT 6
34582: EQUAL
34583: OR
34584: IFFALSE 34604
// f := Delete ( f , 1 ) ;
34586: LD_ADDR_VAR 0 12
34590: PUSH
34591: LD_VAR 0 12
34595: PPUSH
34596: LD_INT 1
34598: PPUSH
34599: CALL_OW 3
34603: ST_TO_ADDR
// if not f then
34604: LD_VAR 0 12
34608: NOT
34609: IFFALSE 34627
// begin x := x + 2 ;
34611: LD_ADDR_VAR 0 13
34615: PUSH
34616: LD_VAR 0 13
34620: PUSH
34621: LD_INT 2
34623: PLUS
34624: ST_TO_ADDR
// continue ;
34625: GO 34425
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
34627: LD_VAR 0 12
34631: PUSH
34632: LD_INT 1
34634: ARRAY
34635: PPUSH
34636: CALL_OW 266
34640: PUSH
34641: LD_INT 5
34643: EQUAL
34644: IFFALSE 34718
// begin if UnitsInside ( f [ 1 ] ) < 3 then
34646: LD_VAR 0 12
34650: PUSH
34651: LD_INT 1
34653: ARRAY
34654: PPUSH
34655: CALL_OW 313
34659: PUSH
34660: LD_INT 3
34662: LESS
34663: IFFALSE 34699
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34665: LD_INT 0
34667: PPUSH
34668: LD_INT 5
34670: PUSH
34671: LD_INT 8
34673: PUSH
34674: LD_INT 9
34676: PUSH
34677: EMPTY
34678: LIST
34679: LIST
34680: LIST
34681: PUSH
34682: LD_VAR 0 17
34686: ARRAY
34687: PPUSH
34688: LD_VAR 0 4
34692: PPUSH
34693: CALL_OW 380
34697: GO 34716
// PrepareHuman ( false , i , skill ) ;
34699: LD_INT 0
34701: PPUSH
34702: LD_VAR 0 8
34706: PPUSH
34707: LD_VAR 0 4
34711: PPUSH
34712: CALL_OW 380
// end else
34716: GO 34735
// PrepareHuman ( false , i , skill ) ;
34718: LD_INT 0
34720: PPUSH
34721: LD_VAR 0 8
34725: PPUSH
34726: LD_VAR 0 4
34730: PPUSH
34731: CALL_OW 380
// un := CreateHuman ;
34735: LD_ADDR_VAR 0 14
34739: PUSH
34740: CALL_OW 44
34744: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34745: LD_ADDR_VAR 0 7
34749: PUSH
34750: LD_VAR 0 7
34754: PPUSH
34755: LD_INT 1
34757: PPUSH
34758: LD_VAR 0 14
34762: PPUSH
34763: CALL_OW 2
34767: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
34768: LD_VAR 0 14
34772: PPUSH
34773: LD_VAR 0 12
34777: PUSH
34778: LD_INT 1
34780: ARRAY
34781: PPUSH
34782: CALL_OW 52
// end ;
34786: GO 34425
34788: POP
34789: POP
// end ;
34790: GO 33727
34792: POP
34793: POP
// result := result ^ buildings ;
34794: LD_ADDR_VAR 0 7
34798: PUSH
34799: LD_VAR 0 7
34803: PUSH
34804: LD_VAR 0 18
34808: ADD
34809: ST_TO_ADDR
// end else
34810: GO 34953
// begin for i = 1 to personel do
34812: LD_ADDR_VAR 0 8
34816: PUSH
34817: DOUBLE
34818: LD_INT 1
34820: DEC
34821: ST_TO_ADDR
34822: LD_VAR 0 6
34826: PUSH
34827: FOR_TO
34828: IFFALSE 34951
// begin if i > 4 then
34830: LD_VAR 0 8
34834: PUSH
34835: LD_INT 4
34837: GREATER
34838: IFFALSE 34842
// break ;
34840: GO 34951
// x := personel [ i ] ;
34842: LD_ADDR_VAR 0 13
34846: PUSH
34847: LD_VAR 0 6
34851: PUSH
34852: LD_VAR 0 8
34856: ARRAY
34857: ST_TO_ADDR
// if x = - 1 then
34858: LD_VAR 0 13
34862: PUSH
34863: LD_INT 1
34865: NEG
34866: EQUAL
34867: IFFALSE 34871
// continue ;
34869: GO 34827
// PrepareHuman ( false , i , skill ) ;
34871: LD_INT 0
34873: PPUSH
34874: LD_VAR 0 8
34878: PPUSH
34879: LD_VAR 0 4
34883: PPUSH
34884: CALL_OW 380
// un := CreateHuman ;
34888: LD_ADDR_VAR 0 14
34892: PUSH
34893: CALL_OW 44
34897: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34898: LD_VAR 0 14
34902: PPUSH
34903: LD_VAR 0 1
34907: PPUSH
34908: CALL_OW 250
34912: PPUSH
34913: LD_VAR 0 1
34917: PPUSH
34918: CALL_OW 251
34922: PPUSH
34923: LD_INT 10
34925: PPUSH
34926: LD_INT 0
34928: PPUSH
34929: CALL_OW 50
// result := result ^ un ;
34933: LD_ADDR_VAR 0 7
34937: PUSH
34938: LD_VAR 0 7
34942: PUSH
34943: LD_VAR 0 14
34947: ADD
34948: ST_TO_ADDR
// end ;
34949: GO 34827
34951: POP
34952: POP
// end ; end ;
34953: LD_VAR 0 7
34957: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
34958: LD_INT 0
34960: PPUSH
34961: PPUSH
34962: PPUSH
34963: PPUSH
34964: PPUSH
34965: PPUSH
34966: PPUSH
34967: PPUSH
34968: PPUSH
34969: PPUSH
34970: PPUSH
34971: PPUSH
34972: PPUSH
34973: PPUSH
34974: PPUSH
34975: PPUSH
// result := false ;
34976: LD_ADDR_VAR 0 3
34980: PUSH
34981: LD_INT 0
34983: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
34984: LD_VAR 0 1
34988: NOT
34989: PUSH
34990: LD_VAR 0 1
34994: PPUSH
34995: CALL_OW 266
34999: PUSH
35000: LD_INT 32
35002: PUSH
35003: LD_INT 33
35005: PUSH
35006: EMPTY
35007: LIST
35008: LIST
35009: IN
35010: NOT
35011: OR
35012: IFFALSE 35016
// exit ;
35014: GO 36125
// nat := GetNation ( tower ) ;
35016: LD_ADDR_VAR 0 12
35020: PUSH
35021: LD_VAR 0 1
35025: PPUSH
35026: CALL_OW 248
35030: ST_TO_ADDR
// side := GetSide ( tower ) ;
35031: LD_ADDR_VAR 0 16
35035: PUSH
35036: LD_VAR 0 1
35040: PPUSH
35041: CALL_OW 255
35045: ST_TO_ADDR
// x := GetX ( tower ) ;
35046: LD_ADDR_VAR 0 10
35050: PUSH
35051: LD_VAR 0 1
35055: PPUSH
35056: CALL_OW 250
35060: ST_TO_ADDR
// y := GetY ( tower ) ;
35061: LD_ADDR_VAR 0 11
35065: PUSH
35066: LD_VAR 0 1
35070: PPUSH
35071: CALL_OW 251
35075: ST_TO_ADDR
// if not x or not y then
35076: LD_VAR 0 10
35080: NOT
35081: PUSH
35082: LD_VAR 0 11
35086: NOT
35087: OR
35088: IFFALSE 35092
// exit ;
35090: GO 36125
// weapon := 0 ;
35092: LD_ADDR_VAR 0 18
35096: PUSH
35097: LD_INT 0
35099: ST_TO_ADDR
// fac_list := [ ] ;
35100: LD_ADDR_VAR 0 17
35104: PUSH
35105: EMPTY
35106: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
35107: LD_ADDR_VAR 0 6
35111: PUSH
35112: LD_VAR 0 1
35116: PPUSH
35117: CALL_OW 274
35121: PPUSH
35122: LD_VAR 0 2
35126: PPUSH
35127: LD_INT 0
35129: PPUSH
35130: CALL 32696 0 3
35134: PPUSH
35135: LD_INT 30
35137: PUSH
35138: LD_INT 3
35140: PUSH
35141: EMPTY
35142: LIST
35143: LIST
35144: PPUSH
35145: CALL_OW 72
35149: ST_TO_ADDR
// if not factories then
35150: LD_VAR 0 6
35154: NOT
35155: IFFALSE 35159
// exit ;
35157: GO 36125
// for i in factories do
35159: LD_ADDR_VAR 0 8
35163: PUSH
35164: LD_VAR 0 6
35168: PUSH
35169: FOR_IN
35170: IFFALSE 35195
// fac_list := fac_list union AvailableWeaponList ( i ) ;
35172: LD_ADDR_VAR 0 17
35176: PUSH
35177: LD_VAR 0 17
35181: PUSH
35182: LD_VAR 0 8
35186: PPUSH
35187: CALL_OW 478
35191: UNION
35192: ST_TO_ADDR
35193: GO 35169
35195: POP
35196: POP
// if not fac_list then
35197: LD_VAR 0 17
35201: NOT
35202: IFFALSE 35206
// exit ;
35204: GO 36125
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
35206: LD_ADDR_VAR 0 5
35210: PUSH
35211: LD_INT 4
35213: PUSH
35214: LD_INT 5
35216: PUSH
35217: LD_INT 9
35219: PUSH
35220: LD_INT 10
35222: PUSH
35223: LD_INT 6
35225: PUSH
35226: LD_INT 7
35228: PUSH
35229: LD_INT 11
35231: PUSH
35232: EMPTY
35233: LIST
35234: LIST
35235: LIST
35236: LIST
35237: LIST
35238: LIST
35239: LIST
35240: PUSH
35241: LD_INT 27
35243: PUSH
35244: LD_INT 28
35246: PUSH
35247: LD_INT 26
35249: PUSH
35250: LD_INT 30
35252: PUSH
35253: EMPTY
35254: LIST
35255: LIST
35256: LIST
35257: LIST
35258: PUSH
35259: LD_INT 43
35261: PUSH
35262: LD_INT 44
35264: PUSH
35265: LD_INT 46
35267: PUSH
35268: LD_INT 45
35270: PUSH
35271: LD_INT 47
35273: PUSH
35274: LD_INT 49
35276: PUSH
35277: EMPTY
35278: LIST
35279: LIST
35280: LIST
35281: LIST
35282: LIST
35283: LIST
35284: PUSH
35285: EMPTY
35286: LIST
35287: LIST
35288: LIST
35289: PUSH
35290: LD_VAR 0 12
35294: ARRAY
35295: ST_TO_ADDR
// list := list isect fac_list ;
35296: LD_ADDR_VAR 0 5
35300: PUSH
35301: LD_VAR 0 5
35305: PUSH
35306: LD_VAR 0 17
35310: ISECT
35311: ST_TO_ADDR
// if not list then
35312: LD_VAR 0 5
35316: NOT
35317: IFFALSE 35321
// exit ;
35319: GO 36125
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
35321: LD_VAR 0 12
35325: PUSH
35326: LD_INT 3
35328: EQUAL
35329: PUSH
35330: LD_INT 49
35332: PUSH
35333: LD_VAR 0 5
35337: IN
35338: AND
35339: PUSH
35340: LD_INT 31
35342: PPUSH
35343: LD_VAR 0 16
35347: PPUSH
35348: CALL_OW 321
35352: PUSH
35353: LD_INT 2
35355: EQUAL
35356: AND
35357: IFFALSE 35417
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
35359: LD_INT 22
35361: PUSH
35362: LD_VAR 0 16
35366: PUSH
35367: EMPTY
35368: LIST
35369: LIST
35370: PUSH
35371: LD_INT 35
35373: PUSH
35374: LD_INT 49
35376: PUSH
35377: EMPTY
35378: LIST
35379: LIST
35380: PUSH
35381: LD_INT 91
35383: PUSH
35384: LD_VAR 0 1
35388: PUSH
35389: LD_INT 10
35391: PUSH
35392: EMPTY
35393: LIST
35394: LIST
35395: LIST
35396: PUSH
35397: EMPTY
35398: LIST
35399: LIST
35400: LIST
35401: PPUSH
35402: CALL_OW 69
35406: NOT
35407: IFFALSE 35417
// weapon := ru_time_lapser ;
35409: LD_ADDR_VAR 0 18
35413: PUSH
35414: LD_INT 49
35416: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
35417: LD_VAR 0 12
35421: PUSH
35422: LD_INT 1
35424: PUSH
35425: LD_INT 2
35427: PUSH
35428: EMPTY
35429: LIST
35430: LIST
35431: IN
35432: PUSH
35433: LD_INT 11
35435: PUSH
35436: LD_VAR 0 5
35440: IN
35441: PUSH
35442: LD_INT 30
35444: PUSH
35445: LD_VAR 0 5
35449: IN
35450: OR
35451: AND
35452: PUSH
35453: LD_INT 6
35455: PPUSH
35456: LD_VAR 0 16
35460: PPUSH
35461: CALL_OW 321
35465: PUSH
35466: LD_INT 2
35468: EQUAL
35469: AND
35470: IFFALSE 35635
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
35472: LD_INT 22
35474: PUSH
35475: LD_VAR 0 16
35479: PUSH
35480: EMPTY
35481: LIST
35482: LIST
35483: PUSH
35484: LD_INT 2
35486: PUSH
35487: LD_INT 35
35489: PUSH
35490: LD_INT 11
35492: PUSH
35493: EMPTY
35494: LIST
35495: LIST
35496: PUSH
35497: LD_INT 35
35499: PUSH
35500: LD_INT 30
35502: PUSH
35503: EMPTY
35504: LIST
35505: LIST
35506: PUSH
35507: EMPTY
35508: LIST
35509: LIST
35510: LIST
35511: PUSH
35512: LD_INT 91
35514: PUSH
35515: LD_VAR 0 1
35519: PUSH
35520: LD_INT 18
35522: PUSH
35523: EMPTY
35524: LIST
35525: LIST
35526: LIST
35527: PUSH
35528: EMPTY
35529: LIST
35530: LIST
35531: LIST
35532: PPUSH
35533: CALL_OW 69
35537: NOT
35538: PUSH
35539: LD_INT 22
35541: PUSH
35542: LD_VAR 0 16
35546: PUSH
35547: EMPTY
35548: LIST
35549: LIST
35550: PUSH
35551: LD_INT 2
35553: PUSH
35554: LD_INT 30
35556: PUSH
35557: LD_INT 32
35559: PUSH
35560: EMPTY
35561: LIST
35562: LIST
35563: PUSH
35564: LD_INT 30
35566: PUSH
35567: LD_INT 33
35569: PUSH
35570: EMPTY
35571: LIST
35572: LIST
35573: PUSH
35574: EMPTY
35575: LIST
35576: LIST
35577: LIST
35578: PUSH
35579: LD_INT 91
35581: PUSH
35582: LD_VAR 0 1
35586: PUSH
35587: LD_INT 12
35589: PUSH
35590: EMPTY
35591: LIST
35592: LIST
35593: LIST
35594: PUSH
35595: EMPTY
35596: LIST
35597: LIST
35598: LIST
35599: PUSH
35600: EMPTY
35601: LIST
35602: PPUSH
35603: CALL_OW 69
35607: PUSH
35608: LD_INT 2
35610: GREATER
35611: AND
35612: IFFALSE 35635
// weapon := [ us_radar , ar_radar ] [ nat ] ;
35614: LD_ADDR_VAR 0 18
35618: PUSH
35619: LD_INT 11
35621: PUSH
35622: LD_INT 30
35624: PUSH
35625: EMPTY
35626: LIST
35627: LIST
35628: PUSH
35629: LD_VAR 0 12
35633: ARRAY
35634: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
35635: LD_VAR 0 18
35639: NOT
35640: PUSH
35641: LD_INT 40
35643: PPUSH
35644: LD_VAR 0 16
35648: PPUSH
35649: CALL_OW 321
35653: PUSH
35654: LD_INT 2
35656: EQUAL
35657: AND
35658: PUSH
35659: LD_INT 7
35661: PUSH
35662: LD_VAR 0 5
35666: IN
35667: PUSH
35668: LD_INT 28
35670: PUSH
35671: LD_VAR 0 5
35675: IN
35676: OR
35677: PUSH
35678: LD_INT 45
35680: PUSH
35681: LD_VAR 0 5
35685: IN
35686: OR
35687: AND
35688: IFFALSE 35942
// begin hex := GetHexInfo ( x , y ) ;
35690: LD_ADDR_VAR 0 4
35694: PUSH
35695: LD_VAR 0 10
35699: PPUSH
35700: LD_VAR 0 11
35704: PPUSH
35705: CALL_OW 546
35709: ST_TO_ADDR
// if hex [ 1 ] then
35710: LD_VAR 0 4
35714: PUSH
35715: LD_INT 1
35717: ARRAY
35718: IFFALSE 35722
// exit ;
35720: GO 36125
// height := hex [ 2 ] ;
35722: LD_ADDR_VAR 0 15
35726: PUSH
35727: LD_VAR 0 4
35731: PUSH
35732: LD_INT 2
35734: ARRAY
35735: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
35736: LD_ADDR_VAR 0 14
35740: PUSH
35741: LD_INT 0
35743: PUSH
35744: LD_INT 2
35746: PUSH
35747: LD_INT 3
35749: PUSH
35750: LD_INT 5
35752: PUSH
35753: EMPTY
35754: LIST
35755: LIST
35756: LIST
35757: LIST
35758: ST_TO_ADDR
// for i in tmp do
35759: LD_ADDR_VAR 0 8
35763: PUSH
35764: LD_VAR 0 14
35768: PUSH
35769: FOR_IN
35770: IFFALSE 35940
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
35772: LD_ADDR_VAR 0 9
35776: PUSH
35777: LD_VAR 0 10
35781: PPUSH
35782: LD_VAR 0 8
35786: PPUSH
35787: LD_INT 5
35789: PPUSH
35790: CALL_OW 272
35794: PUSH
35795: LD_VAR 0 11
35799: PPUSH
35800: LD_VAR 0 8
35804: PPUSH
35805: LD_INT 5
35807: PPUSH
35808: CALL_OW 273
35812: PUSH
35813: EMPTY
35814: LIST
35815: LIST
35816: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
35817: LD_VAR 0 9
35821: PUSH
35822: LD_INT 1
35824: ARRAY
35825: PPUSH
35826: LD_VAR 0 9
35830: PUSH
35831: LD_INT 2
35833: ARRAY
35834: PPUSH
35835: CALL_OW 488
35839: IFFALSE 35938
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
35841: LD_ADDR_VAR 0 4
35845: PUSH
35846: LD_VAR 0 9
35850: PUSH
35851: LD_INT 1
35853: ARRAY
35854: PPUSH
35855: LD_VAR 0 9
35859: PUSH
35860: LD_INT 2
35862: ARRAY
35863: PPUSH
35864: CALL_OW 546
35868: ST_TO_ADDR
// if hex [ 1 ] then
35869: LD_VAR 0 4
35873: PUSH
35874: LD_INT 1
35876: ARRAY
35877: IFFALSE 35881
// continue ;
35879: GO 35769
// h := hex [ 2 ] ;
35881: LD_ADDR_VAR 0 13
35885: PUSH
35886: LD_VAR 0 4
35890: PUSH
35891: LD_INT 2
35893: ARRAY
35894: ST_TO_ADDR
// if h + 7 < height then
35895: LD_VAR 0 13
35899: PUSH
35900: LD_INT 7
35902: PLUS
35903: PUSH
35904: LD_VAR 0 15
35908: LESS
35909: IFFALSE 35938
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
35911: LD_ADDR_VAR 0 18
35915: PUSH
35916: LD_INT 7
35918: PUSH
35919: LD_INT 28
35921: PUSH
35922: LD_INT 45
35924: PUSH
35925: EMPTY
35926: LIST
35927: LIST
35928: LIST
35929: PUSH
35930: LD_VAR 0 12
35934: ARRAY
35935: ST_TO_ADDR
// break ;
35936: GO 35940
// end ; end ; end ;
35938: GO 35769
35940: POP
35941: POP
// end ; if not weapon then
35942: LD_VAR 0 18
35946: NOT
35947: IFFALSE 36007
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
35949: LD_ADDR_VAR 0 5
35953: PUSH
35954: LD_VAR 0 5
35958: PUSH
35959: LD_INT 11
35961: PUSH
35962: LD_INT 30
35964: PUSH
35965: LD_INT 49
35967: PUSH
35968: EMPTY
35969: LIST
35970: LIST
35971: LIST
35972: DIFF
35973: ST_TO_ADDR
// if not list then
35974: LD_VAR 0 5
35978: NOT
35979: IFFALSE 35983
// exit ;
35981: GO 36125
// weapon := list [ rand ( 1 , list ) ] ;
35983: LD_ADDR_VAR 0 18
35987: PUSH
35988: LD_VAR 0 5
35992: PUSH
35993: LD_INT 1
35995: PPUSH
35996: LD_VAR 0 5
36000: PPUSH
36001: CALL_OW 12
36005: ARRAY
36006: ST_TO_ADDR
// end ; if weapon then
36007: LD_VAR 0 18
36011: IFFALSE 36125
// begin tmp := CostOfWeapon ( weapon ) ;
36013: LD_ADDR_VAR 0 14
36017: PUSH
36018: LD_VAR 0 18
36022: PPUSH
36023: CALL_OW 451
36027: ST_TO_ADDR
// j := GetBase ( tower ) ;
36028: LD_ADDR_VAR 0 9
36032: PUSH
36033: LD_VAR 0 1
36037: PPUSH
36038: CALL_OW 274
36042: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
36043: LD_VAR 0 9
36047: PPUSH
36048: LD_INT 1
36050: PPUSH
36051: CALL_OW 275
36055: PUSH
36056: LD_VAR 0 14
36060: PUSH
36061: LD_INT 1
36063: ARRAY
36064: GREATEREQUAL
36065: PUSH
36066: LD_VAR 0 9
36070: PPUSH
36071: LD_INT 2
36073: PPUSH
36074: CALL_OW 275
36078: PUSH
36079: LD_VAR 0 14
36083: PUSH
36084: LD_INT 2
36086: ARRAY
36087: GREATEREQUAL
36088: AND
36089: PUSH
36090: LD_VAR 0 9
36094: PPUSH
36095: LD_INT 3
36097: PPUSH
36098: CALL_OW 275
36102: PUSH
36103: LD_VAR 0 14
36107: PUSH
36108: LD_INT 3
36110: ARRAY
36111: GREATEREQUAL
36112: AND
36113: IFFALSE 36125
// result := weapon ;
36115: LD_ADDR_VAR 0 3
36119: PUSH
36120: LD_VAR 0 18
36124: ST_TO_ADDR
// end ; end ;
36125: LD_VAR 0 3
36129: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
36130: LD_INT 0
36132: PPUSH
36133: PPUSH
// result := true ;
36134: LD_ADDR_VAR 0 3
36138: PUSH
36139: LD_INT 1
36141: ST_TO_ADDR
// if array1 = array2 then
36142: LD_VAR 0 1
36146: PUSH
36147: LD_VAR 0 2
36151: EQUAL
36152: IFFALSE 36212
// begin for i = 1 to array1 do
36154: LD_ADDR_VAR 0 4
36158: PUSH
36159: DOUBLE
36160: LD_INT 1
36162: DEC
36163: ST_TO_ADDR
36164: LD_VAR 0 1
36168: PUSH
36169: FOR_TO
36170: IFFALSE 36208
// if array1 [ i ] <> array2 [ i ] then
36172: LD_VAR 0 1
36176: PUSH
36177: LD_VAR 0 4
36181: ARRAY
36182: PUSH
36183: LD_VAR 0 2
36187: PUSH
36188: LD_VAR 0 4
36192: ARRAY
36193: NONEQUAL
36194: IFFALSE 36206
// begin result := false ;
36196: LD_ADDR_VAR 0 3
36200: PUSH
36201: LD_INT 0
36203: ST_TO_ADDR
// break ;
36204: GO 36208
// end ;
36206: GO 36169
36208: POP
36209: POP
// end else
36210: GO 36220
// result := false ;
36212: LD_ADDR_VAR 0 3
36216: PUSH
36217: LD_INT 0
36219: ST_TO_ADDR
// end ;
36220: LD_VAR 0 3
36224: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
36225: LD_INT 0
36227: PPUSH
36228: PPUSH
// if not array1 or not array2 then
36229: LD_VAR 0 1
36233: NOT
36234: PUSH
36235: LD_VAR 0 2
36239: NOT
36240: OR
36241: IFFALSE 36245
// exit ;
36243: GO 36309
// result := true ;
36245: LD_ADDR_VAR 0 3
36249: PUSH
36250: LD_INT 1
36252: ST_TO_ADDR
// for i = 1 to array1 do
36253: LD_ADDR_VAR 0 4
36257: PUSH
36258: DOUBLE
36259: LD_INT 1
36261: DEC
36262: ST_TO_ADDR
36263: LD_VAR 0 1
36267: PUSH
36268: FOR_TO
36269: IFFALSE 36307
// if array1 [ i ] <> array2 [ i ] then
36271: LD_VAR 0 1
36275: PUSH
36276: LD_VAR 0 4
36280: ARRAY
36281: PUSH
36282: LD_VAR 0 2
36286: PUSH
36287: LD_VAR 0 4
36291: ARRAY
36292: NONEQUAL
36293: IFFALSE 36305
// begin result := false ;
36295: LD_ADDR_VAR 0 3
36299: PUSH
36300: LD_INT 0
36302: ST_TO_ADDR
// break ;
36303: GO 36307
// end ;
36305: GO 36268
36307: POP
36308: POP
// end ;
36309: LD_VAR 0 3
36313: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
36314: LD_INT 0
36316: PPUSH
36317: PPUSH
36318: PPUSH
// pom := GetBase ( fac ) ;
36319: LD_ADDR_VAR 0 5
36323: PUSH
36324: LD_VAR 0 1
36328: PPUSH
36329: CALL_OW 274
36333: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
36334: LD_ADDR_VAR 0 4
36338: PUSH
36339: LD_VAR 0 2
36343: PUSH
36344: LD_INT 1
36346: ARRAY
36347: PPUSH
36348: LD_VAR 0 2
36352: PUSH
36353: LD_INT 2
36355: ARRAY
36356: PPUSH
36357: LD_VAR 0 2
36361: PUSH
36362: LD_INT 3
36364: ARRAY
36365: PPUSH
36366: LD_VAR 0 2
36370: PUSH
36371: LD_INT 4
36373: ARRAY
36374: PPUSH
36375: CALL_OW 449
36379: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36380: LD_ADDR_VAR 0 3
36384: PUSH
36385: LD_VAR 0 5
36389: PPUSH
36390: LD_INT 1
36392: PPUSH
36393: CALL_OW 275
36397: PUSH
36398: LD_VAR 0 4
36402: PUSH
36403: LD_INT 1
36405: ARRAY
36406: GREATEREQUAL
36407: PUSH
36408: LD_VAR 0 5
36412: PPUSH
36413: LD_INT 2
36415: PPUSH
36416: CALL_OW 275
36420: PUSH
36421: LD_VAR 0 4
36425: PUSH
36426: LD_INT 2
36428: ARRAY
36429: GREATEREQUAL
36430: AND
36431: PUSH
36432: LD_VAR 0 5
36436: PPUSH
36437: LD_INT 3
36439: PPUSH
36440: CALL_OW 275
36444: PUSH
36445: LD_VAR 0 4
36449: PUSH
36450: LD_INT 3
36452: ARRAY
36453: GREATEREQUAL
36454: AND
36455: ST_TO_ADDR
// end ;
36456: LD_VAR 0 3
36460: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
36461: LD_INT 0
36463: PPUSH
36464: PPUSH
36465: PPUSH
36466: PPUSH
// pom := GetBase ( building ) ;
36467: LD_ADDR_VAR 0 3
36471: PUSH
36472: LD_VAR 0 1
36476: PPUSH
36477: CALL_OW 274
36481: ST_TO_ADDR
// if not pom then
36482: LD_VAR 0 3
36486: NOT
36487: IFFALSE 36491
// exit ;
36489: GO 36661
// btype := GetBType ( building ) ;
36491: LD_ADDR_VAR 0 5
36495: PUSH
36496: LD_VAR 0 1
36500: PPUSH
36501: CALL_OW 266
36505: ST_TO_ADDR
// if btype = b_armoury then
36506: LD_VAR 0 5
36510: PUSH
36511: LD_INT 4
36513: EQUAL
36514: IFFALSE 36524
// btype := b_barracks ;
36516: LD_ADDR_VAR 0 5
36520: PUSH
36521: LD_INT 5
36523: ST_TO_ADDR
// if btype = b_depot then
36524: LD_VAR 0 5
36528: PUSH
36529: LD_INT 0
36531: EQUAL
36532: IFFALSE 36542
// btype := b_warehouse ;
36534: LD_ADDR_VAR 0 5
36538: PUSH
36539: LD_INT 1
36541: ST_TO_ADDR
// if btype = b_workshop then
36542: LD_VAR 0 5
36546: PUSH
36547: LD_INT 2
36549: EQUAL
36550: IFFALSE 36560
// btype := b_factory ;
36552: LD_ADDR_VAR 0 5
36556: PUSH
36557: LD_INT 3
36559: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36560: LD_ADDR_VAR 0 4
36564: PUSH
36565: LD_VAR 0 5
36569: PPUSH
36570: LD_VAR 0 1
36574: PPUSH
36575: CALL_OW 248
36579: PPUSH
36580: CALL_OW 450
36584: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36585: LD_ADDR_VAR 0 2
36589: PUSH
36590: LD_VAR 0 3
36594: PPUSH
36595: LD_INT 1
36597: PPUSH
36598: CALL_OW 275
36602: PUSH
36603: LD_VAR 0 4
36607: PUSH
36608: LD_INT 1
36610: ARRAY
36611: GREATEREQUAL
36612: PUSH
36613: LD_VAR 0 3
36617: PPUSH
36618: LD_INT 2
36620: PPUSH
36621: CALL_OW 275
36625: PUSH
36626: LD_VAR 0 4
36630: PUSH
36631: LD_INT 2
36633: ARRAY
36634: GREATEREQUAL
36635: AND
36636: PUSH
36637: LD_VAR 0 3
36641: PPUSH
36642: LD_INT 3
36644: PPUSH
36645: CALL_OW 275
36649: PUSH
36650: LD_VAR 0 4
36654: PUSH
36655: LD_INT 3
36657: ARRAY
36658: GREATEREQUAL
36659: AND
36660: ST_TO_ADDR
// end ;
36661: LD_VAR 0 2
36665: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
36666: LD_INT 0
36668: PPUSH
36669: PPUSH
36670: PPUSH
// pom := GetBase ( building ) ;
36671: LD_ADDR_VAR 0 4
36675: PUSH
36676: LD_VAR 0 1
36680: PPUSH
36681: CALL_OW 274
36685: ST_TO_ADDR
// if not pom then
36686: LD_VAR 0 4
36690: NOT
36691: IFFALSE 36695
// exit ;
36693: GO 36796
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36695: LD_ADDR_VAR 0 5
36699: PUSH
36700: LD_VAR 0 2
36704: PPUSH
36705: LD_VAR 0 1
36709: PPUSH
36710: CALL_OW 248
36714: PPUSH
36715: CALL_OW 450
36719: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36720: LD_ADDR_VAR 0 3
36724: PUSH
36725: LD_VAR 0 4
36729: PPUSH
36730: LD_INT 1
36732: PPUSH
36733: CALL_OW 275
36737: PUSH
36738: LD_VAR 0 5
36742: PUSH
36743: LD_INT 1
36745: ARRAY
36746: GREATEREQUAL
36747: PUSH
36748: LD_VAR 0 4
36752: PPUSH
36753: LD_INT 2
36755: PPUSH
36756: CALL_OW 275
36760: PUSH
36761: LD_VAR 0 5
36765: PUSH
36766: LD_INT 2
36768: ARRAY
36769: GREATEREQUAL
36770: AND
36771: PUSH
36772: LD_VAR 0 4
36776: PPUSH
36777: LD_INT 3
36779: PPUSH
36780: CALL_OW 275
36784: PUSH
36785: LD_VAR 0 5
36789: PUSH
36790: LD_INT 3
36792: ARRAY
36793: GREATEREQUAL
36794: AND
36795: ST_TO_ADDR
// end ;
36796: LD_VAR 0 3
36800: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
36801: LD_INT 0
36803: PPUSH
36804: PPUSH
36805: PPUSH
36806: PPUSH
36807: PPUSH
36808: PPUSH
36809: PPUSH
36810: PPUSH
36811: PPUSH
36812: PPUSH
36813: PPUSH
// result := false ;
36814: LD_ADDR_VAR 0 8
36818: PUSH
36819: LD_INT 0
36821: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
36822: LD_VAR 0 5
36826: NOT
36827: PUSH
36828: LD_VAR 0 1
36832: NOT
36833: OR
36834: PUSH
36835: LD_VAR 0 2
36839: NOT
36840: OR
36841: PUSH
36842: LD_VAR 0 3
36846: NOT
36847: OR
36848: IFFALSE 36852
// exit ;
36850: GO 37666
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
36852: LD_ADDR_VAR 0 14
36856: PUSH
36857: LD_VAR 0 1
36861: PPUSH
36862: LD_VAR 0 2
36866: PPUSH
36867: LD_VAR 0 3
36871: PPUSH
36872: LD_VAR 0 4
36876: PPUSH
36877: LD_VAR 0 5
36881: PUSH
36882: LD_INT 1
36884: ARRAY
36885: PPUSH
36886: CALL_OW 248
36890: PPUSH
36891: LD_INT 0
36893: PPUSH
36894: CALL 38903 0 6
36898: ST_TO_ADDR
// if not hexes then
36899: LD_VAR 0 14
36903: NOT
36904: IFFALSE 36908
// exit ;
36906: GO 37666
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
36908: LD_ADDR_VAR 0 17
36912: PUSH
36913: LD_VAR 0 5
36917: PPUSH
36918: LD_INT 22
36920: PUSH
36921: LD_VAR 0 13
36925: PPUSH
36926: CALL_OW 255
36930: PUSH
36931: EMPTY
36932: LIST
36933: LIST
36934: PUSH
36935: LD_INT 2
36937: PUSH
36938: LD_INT 30
36940: PUSH
36941: LD_INT 0
36943: PUSH
36944: EMPTY
36945: LIST
36946: LIST
36947: PUSH
36948: LD_INT 30
36950: PUSH
36951: LD_INT 1
36953: PUSH
36954: EMPTY
36955: LIST
36956: LIST
36957: PUSH
36958: EMPTY
36959: LIST
36960: LIST
36961: LIST
36962: PUSH
36963: EMPTY
36964: LIST
36965: LIST
36966: PPUSH
36967: CALL_OW 72
36971: ST_TO_ADDR
// for i = 1 to hexes do
36972: LD_ADDR_VAR 0 9
36976: PUSH
36977: DOUBLE
36978: LD_INT 1
36980: DEC
36981: ST_TO_ADDR
36982: LD_VAR 0 14
36986: PUSH
36987: FOR_TO
36988: IFFALSE 37664
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36990: LD_ADDR_VAR 0 13
36994: PUSH
36995: LD_VAR 0 14
36999: PUSH
37000: LD_VAR 0 9
37004: ARRAY
37005: PUSH
37006: LD_INT 1
37008: ARRAY
37009: PPUSH
37010: LD_VAR 0 14
37014: PUSH
37015: LD_VAR 0 9
37019: ARRAY
37020: PUSH
37021: LD_INT 2
37023: ARRAY
37024: PPUSH
37025: CALL_OW 428
37029: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
37030: LD_VAR 0 14
37034: PUSH
37035: LD_VAR 0 9
37039: ARRAY
37040: PUSH
37041: LD_INT 1
37043: ARRAY
37044: PPUSH
37045: LD_VAR 0 14
37049: PUSH
37050: LD_VAR 0 9
37054: ARRAY
37055: PUSH
37056: LD_INT 2
37058: ARRAY
37059: PPUSH
37060: CALL_OW 351
37064: PUSH
37065: LD_VAR 0 14
37069: PUSH
37070: LD_VAR 0 9
37074: ARRAY
37075: PUSH
37076: LD_INT 1
37078: ARRAY
37079: PPUSH
37080: LD_VAR 0 14
37084: PUSH
37085: LD_VAR 0 9
37089: ARRAY
37090: PUSH
37091: LD_INT 2
37093: ARRAY
37094: PPUSH
37095: CALL_OW 488
37099: NOT
37100: OR
37101: PUSH
37102: LD_VAR 0 13
37106: PPUSH
37107: CALL_OW 247
37111: PUSH
37112: LD_INT 3
37114: EQUAL
37115: OR
37116: IFFALSE 37122
// exit ;
37118: POP
37119: POP
37120: GO 37666
// if not tmp then
37122: LD_VAR 0 13
37126: NOT
37127: IFFALSE 37131
// continue ;
37129: GO 36987
// result := true ;
37131: LD_ADDR_VAR 0 8
37135: PUSH
37136: LD_INT 1
37138: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
37139: LD_VAR 0 6
37143: PUSH
37144: LD_VAR 0 13
37148: PPUSH
37149: CALL_OW 247
37153: PUSH
37154: LD_INT 2
37156: EQUAL
37157: AND
37158: PUSH
37159: LD_VAR 0 13
37163: PPUSH
37164: CALL_OW 263
37168: PUSH
37169: LD_INT 1
37171: EQUAL
37172: AND
37173: IFFALSE 37337
// begin if IsDrivenBy ( tmp ) then
37175: LD_VAR 0 13
37179: PPUSH
37180: CALL_OW 311
37184: IFFALSE 37188
// continue ;
37186: GO 36987
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
37188: LD_VAR 0 6
37192: PPUSH
37193: LD_INT 3
37195: PUSH
37196: LD_INT 60
37198: PUSH
37199: EMPTY
37200: LIST
37201: PUSH
37202: EMPTY
37203: LIST
37204: LIST
37205: PUSH
37206: LD_INT 3
37208: PUSH
37209: LD_INT 55
37211: PUSH
37212: EMPTY
37213: LIST
37214: PUSH
37215: EMPTY
37216: LIST
37217: LIST
37218: PUSH
37219: EMPTY
37220: LIST
37221: LIST
37222: PPUSH
37223: CALL_OW 72
37227: IFFALSE 37335
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
37229: LD_ADDR_VAR 0 18
37233: PUSH
37234: LD_VAR 0 6
37238: PPUSH
37239: LD_INT 3
37241: PUSH
37242: LD_INT 60
37244: PUSH
37245: EMPTY
37246: LIST
37247: PUSH
37248: EMPTY
37249: LIST
37250: LIST
37251: PUSH
37252: LD_INT 3
37254: PUSH
37255: LD_INT 55
37257: PUSH
37258: EMPTY
37259: LIST
37260: PUSH
37261: EMPTY
37262: LIST
37263: LIST
37264: PUSH
37265: EMPTY
37266: LIST
37267: LIST
37268: PPUSH
37269: CALL_OW 72
37273: PUSH
37274: LD_INT 1
37276: ARRAY
37277: ST_TO_ADDR
// if IsInUnit ( driver ) then
37278: LD_VAR 0 18
37282: PPUSH
37283: CALL_OW 310
37287: IFFALSE 37298
// ComExit ( driver ) ;
37289: LD_VAR 0 18
37293: PPUSH
37294: CALL 62087 0 1
// AddComEnterUnit ( driver , tmp ) ;
37298: LD_VAR 0 18
37302: PPUSH
37303: LD_VAR 0 13
37307: PPUSH
37308: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
37312: LD_VAR 0 18
37316: PPUSH
37317: LD_VAR 0 7
37321: PPUSH
37322: CALL_OW 173
// AddComExitVehicle ( driver ) ;
37326: LD_VAR 0 18
37330: PPUSH
37331: CALL_OW 181
// end ; continue ;
37335: GO 36987
// end ; if not cleaners or not tmp in cleaners then
37337: LD_VAR 0 6
37341: NOT
37342: PUSH
37343: LD_VAR 0 13
37347: PUSH
37348: LD_VAR 0 6
37352: IN
37353: NOT
37354: OR
37355: IFFALSE 37662
// begin if dep then
37357: LD_VAR 0 17
37361: IFFALSE 37497
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
37363: LD_ADDR_VAR 0 16
37367: PUSH
37368: LD_VAR 0 17
37372: PUSH
37373: LD_INT 1
37375: ARRAY
37376: PPUSH
37377: CALL_OW 250
37381: PPUSH
37382: LD_VAR 0 17
37386: PUSH
37387: LD_INT 1
37389: ARRAY
37390: PPUSH
37391: CALL_OW 254
37395: PPUSH
37396: LD_INT 5
37398: PPUSH
37399: CALL_OW 272
37403: PUSH
37404: LD_VAR 0 17
37408: PUSH
37409: LD_INT 1
37411: ARRAY
37412: PPUSH
37413: CALL_OW 251
37417: PPUSH
37418: LD_VAR 0 17
37422: PUSH
37423: LD_INT 1
37425: ARRAY
37426: PPUSH
37427: CALL_OW 254
37431: PPUSH
37432: LD_INT 5
37434: PPUSH
37435: CALL_OW 273
37439: PUSH
37440: EMPTY
37441: LIST
37442: LIST
37443: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
37444: LD_VAR 0 16
37448: PUSH
37449: LD_INT 1
37451: ARRAY
37452: PPUSH
37453: LD_VAR 0 16
37457: PUSH
37458: LD_INT 2
37460: ARRAY
37461: PPUSH
37462: CALL_OW 488
37466: IFFALSE 37497
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
37468: LD_VAR 0 13
37472: PPUSH
37473: LD_VAR 0 16
37477: PUSH
37478: LD_INT 1
37480: ARRAY
37481: PPUSH
37482: LD_VAR 0 16
37486: PUSH
37487: LD_INT 2
37489: ARRAY
37490: PPUSH
37491: CALL_OW 111
// continue ;
37495: GO 36987
// end ; end ; r := GetDir ( tmp ) ;
37497: LD_ADDR_VAR 0 15
37501: PUSH
37502: LD_VAR 0 13
37506: PPUSH
37507: CALL_OW 254
37511: ST_TO_ADDR
// if r = 5 then
37512: LD_VAR 0 15
37516: PUSH
37517: LD_INT 5
37519: EQUAL
37520: IFFALSE 37530
// r := 0 ;
37522: LD_ADDR_VAR 0 15
37526: PUSH
37527: LD_INT 0
37529: ST_TO_ADDR
// for j = r to 5 do
37530: LD_ADDR_VAR 0 10
37534: PUSH
37535: DOUBLE
37536: LD_VAR 0 15
37540: DEC
37541: ST_TO_ADDR
37542: LD_INT 5
37544: PUSH
37545: FOR_TO
37546: IFFALSE 37660
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
37548: LD_ADDR_VAR 0 11
37552: PUSH
37553: LD_VAR 0 13
37557: PPUSH
37558: CALL_OW 250
37562: PPUSH
37563: LD_VAR 0 10
37567: PPUSH
37568: LD_INT 2
37570: PPUSH
37571: CALL_OW 272
37575: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
37576: LD_ADDR_VAR 0 12
37580: PUSH
37581: LD_VAR 0 13
37585: PPUSH
37586: CALL_OW 251
37590: PPUSH
37591: LD_VAR 0 10
37595: PPUSH
37596: LD_INT 2
37598: PPUSH
37599: CALL_OW 273
37603: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
37604: LD_VAR 0 11
37608: PPUSH
37609: LD_VAR 0 12
37613: PPUSH
37614: CALL_OW 488
37618: PUSH
37619: LD_VAR 0 11
37623: PPUSH
37624: LD_VAR 0 12
37628: PPUSH
37629: CALL_OW 428
37633: NOT
37634: AND
37635: IFFALSE 37658
// begin ComMoveXY ( tmp , _x , _y ) ;
37637: LD_VAR 0 13
37641: PPUSH
37642: LD_VAR 0 11
37646: PPUSH
37647: LD_VAR 0 12
37651: PPUSH
37652: CALL_OW 111
// break ;
37656: GO 37660
// end ; end ;
37658: GO 37545
37660: POP
37661: POP
// end ; end ;
37662: GO 36987
37664: POP
37665: POP
// end ;
37666: LD_VAR 0 8
37670: RET
// export function BuildingTechInvented ( side , btype ) ; begin
37671: LD_INT 0
37673: PPUSH
// result := true ;
37674: LD_ADDR_VAR 0 3
37678: PUSH
37679: LD_INT 1
37681: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
37682: LD_VAR 0 2
37686: PUSH
37687: LD_INT 24
37689: DOUBLE
37690: EQUAL
37691: IFTRUE 37701
37693: LD_INT 33
37695: DOUBLE
37696: EQUAL
37697: IFTRUE 37701
37699: GO 37726
37701: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
37702: LD_ADDR_VAR 0 3
37706: PUSH
37707: LD_INT 32
37709: PPUSH
37710: LD_VAR 0 1
37714: PPUSH
37715: CALL_OW 321
37719: PUSH
37720: LD_INT 2
37722: EQUAL
37723: ST_TO_ADDR
37724: GO 38046
37726: LD_INT 20
37728: DOUBLE
37729: EQUAL
37730: IFTRUE 37734
37732: GO 37759
37734: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
37735: LD_ADDR_VAR 0 3
37739: PUSH
37740: LD_INT 6
37742: PPUSH
37743: LD_VAR 0 1
37747: PPUSH
37748: CALL_OW 321
37752: PUSH
37753: LD_INT 2
37755: EQUAL
37756: ST_TO_ADDR
37757: GO 38046
37759: LD_INT 22
37761: DOUBLE
37762: EQUAL
37763: IFTRUE 37773
37765: LD_INT 36
37767: DOUBLE
37768: EQUAL
37769: IFTRUE 37773
37771: GO 37798
37773: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
37774: LD_ADDR_VAR 0 3
37778: PUSH
37779: LD_INT 15
37781: PPUSH
37782: LD_VAR 0 1
37786: PPUSH
37787: CALL_OW 321
37791: PUSH
37792: LD_INT 2
37794: EQUAL
37795: ST_TO_ADDR
37796: GO 38046
37798: LD_INT 30
37800: DOUBLE
37801: EQUAL
37802: IFTRUE 37806
37804: GO 37831
37806: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
37807: LD_ADDR_VAR 0 3
37811: PUSH
37812: LD_INT 20
37814: PPUSH
37815: LD_VAR 0 1
37819: PPUSH
37820: CALL_OW 321
37824: PUSH
37825: LD_INT 2
37827: EQUAL
37828: ST_TO_ADDR
37829: GO 38046
37831: LD_INT 28
37833: DOUBLE
37834: EQUAL
37835: IFTRUE 37845
37837: LD_INT 21
37839: DOUBLE
37840: EQUAL
37841: IFTRUE 37845
37843: GO 37870
37845: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
37846: LD_ADDR_VAR 0 3
37850: PUSH
37851: LD_INT 21
37853: PPUSH
37854: LD_VAR 0 1
37858: PPUSH
37859: CALL_OW 321
37863: PUSH
37864: LD_INT 2
37866: EQUAL
37867: ST_TO_ADDR
37868: GO 38046
37870: LD_INT 16
37872: DOUBLE
37873: EQUAL
37874: IFTRUE 37878
37876: GO 37905
37878: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
37879: LD_ADDR_VAR 0 3
37883: PUSH
37884: LD_EXP 105
37888: PPUSH
37889: LD_VAR 0 1
37893: PPUSH
37894: CALL_OW 321
37898: PUSH
37899: LD_INT 2
37901: EQUAL
37902: ST_TO_ADDR
37903: GO 38046
37905: LD_INT 19
37907: DOUBLE
37908: EQUAL
37909: IFTRUE 37919
37911: LD_INT 23
37913: DOUBLE
37914: EQUAL
37915: IFTRUE 37919
37917: GO 37946
37919: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
37920: LD_ADDR_VAR 0 3
37924: PUSH
37925: LD_EXP 104
37929: PPUSH
37930: LD_VAR 0 1
37934: PPUSH
37935: CALL_OW 321
37939: PUSH
37940: LD_INT 2
37942: EQUAL
37943: ST_TO_ADDR
37944: GO 38046
37946: LD_INT 17
37948: DOUBLE
37949: EQUAL
37950: IFTRUE 37954
37952: GO 37979
37954: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
37955: LD_ADDR_VAR 0 3
37959: PUSH
37960: LD_INT 39
37962: PPUSH
37963: LD_VAR 0 1
37967: PPUSH
37968: CALL_OW 321
37972: PUSH
37973: LD_INT 2
37975: EQUAL
37976: ST_TO_ADDR
37977: GO 38046
37979: LD_INT 18
37981: DOUBLE
37982: EQUAL
37983: IFTRUE 37987
37985: GO 38012
37987: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
37988: LD_ADDR_VAR 0 3
37992: PUSH
37993: LD_INT 40
37995: PPUSH
37996: LD_VAR 0 1
38000: PPUSH
38001: CALL_OW 321
38005: PUSH
38006: LD_INT 2
38008: EQUAL
38009: ST_TO_ADDR
38010: GO 38046
38012: LD_INT 27
38014: DOUBLE
38015: EQUAL
38016: IFTRUE 38020
38018: GO 38045
38020: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
38021: LD_ADDR_VAR 0 3
38025: PUSH
38026: LD_INT 35
38028: PPUSH
38029: LD_VAR 0 1
38033: PPUSH
38034: CALL_OW 321
38038: PUSH
38039: LD_INT 2
38041: EQUAL
38042: ST_TO_ADDR
38043: GO 38046
38045: POP
// end ;
38046: LD_VAR 0 3
38050: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
38051: LD_INT 0
38053: PPUSH
38054: PPUSH
38055: PPUSH
38056: PPUSH
38057: PPUSH
38058: PPUSH
38059: PPUSH
38060: PPUSH
38061: PPUSH
38062: PPUSH
38063: PPUSH
// result := false ;
38064: LD_ADDR_VAR 0 6
38068: PUSH
38069: LD_INT 0
38071: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
38072: LD_VAR 0 1
38076: NOT
38077: PUSH
38078: LD_VAR 0 1
38082: PPUSH
38083: CALL_OW 266
38087: PUSH
38088: LD_INT 0
38090: PUSH
38091: LD_INT 1
38093: PUSH
38094: EMPTY
38095: LIST
38096: LIST
38097: IN
38098: NOT
38099: OR
38100: PUSH
38101: LD_VAR 0 2
38105: NOT
38106: OR
38107: PUSH
38108: LD_VAR 0 5
38112: PUSH
38113: LD_INT 0
38115: PUSH
38116: LD_INT 1
38118: PUSH
38119: LD_INT 2
38121: PUSH
38122: LD_INT 3
38124: PUSH
38125: LD_INT 4
38127: PUSH
38128: LD_INT 5
38130: PUSH
38131: EMPTY
38132: LIST
38133: LIST
38134: LIST
38135: LIST
38136: LIST
38137: LIST
38138: IN
38139: NOT
38140: OR
38141: PUSH
38142: LD_VAR 0 3
38146: PPUSH
38147: LD_VAR 0 4
38151: PPUSH
38152: CALL_OW 488
38156: NOT
38157: OR
38158: IFFALSE 38162
// exit ;
38160: GO 38898
// side := GetSide ( depot ) ;
38162: LD_ADDR_VAR 0 9
38166: PUSH
38167: LD_VAR 0 1
38171: PPUSH
38172: CALL_OW 255
38176: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
38177: LD_VAR 0 9
38181: PPUSH
38182: LD_VAR 0 2
38186: PPUSH
38187: CALL 37671 0 2
38191: NOT
38192: IFFALSE 38196
// exit ;
38194: GO 38898
// pom := GetBase ( depot ) ;
38196: LD_ADDR_VAR 0 10
38200: PUSH
38201: LD_VAR 0 1
38205: PPUSH
38206: CALL_OW 274
38210: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
38211: LD_ADDR_VAR 0 11
38215: PUSH
38216: LD_VAR 0 2
38220: PPUSH
38221: LD_VAR 0 1
38225: PPUSH
38226: CALL_OW 248
38230: PPUSH
38231: CALL_OW 450
38235: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
38236: LD_VAR 0 10
38240: PPUSH
38241: LD_INT 1
38243: PPUSH
38244: CALL_OW 275
38248: PUSH
38249: LD_VAR 0 11
38253: PUSH
38254: LD_INT 1
38256: ARRAY
38257: GREATEREQUAL
38258: PUSH
38259: LD_VAR 0 10
38263: PPUSH
38264: LD_INT 2
38266: PPUSH
38267: CALL_OW 275
38271: PUSH
38272: LD_VAR 0 11
38276: PUSH
38277: LD_INT 2
38279: ARRAY
38280: GREATEREQUAL
38281: AND
38282: PUSH
38283: LD_VAR 0 10
38287: PPUSH
38288: LD_INT 3
38290: PPUSH
38291: CALL_OW 275
38295: PUSH
38296: LD_VAR 0 11
38300: PUSH
38301: LD_INT 3
38303: ARRAY
38304: GREATEREQUAL
38305: AND
38306: NOT
38307: IFFALSE 38311
// exit ;
38309: GO 38898
// if GetBType ( depot ) = b_depot then
38311: LD_VAR 0 1
38315: PPUSH
38316: CALL_OW 266
38320: PUSH
38321: LD_INT 0
38323: EQUAL
38324: IFFALSE 38336
// dist := 28 else
38326: LD_ADDR_VAR 0 14
38330: PUSH
38331: LD_INT 28
38333: ST_TO_ADDR
38334: GO 38344
// dist := 36 ;
38336: LD_ADDR_VAR 0 14
38340: PUSH
38341: LD_INT 36
38343: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
38344: LD_VAR 0 1
38348: PPUSH
38349: LD_VAR 0 3
38353: PPUSH
38354: LD_VAR 0 4
38358: PPUSH
38359: CALL_OW 297
38363: PUSH
38364: LD_VAR 0 14
38368: GREATER
38369: IFFALSE 38373
// exit ;
38371: GO 38898
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
38373: LD_ADDR_VAR 0 12
38377: PUSH
38378: LD_VAR 0 2
38382: PPUSH
38383: LD_VAR 0 3
38387: PPUSH
38388: LD_VAR 0 4
38392: PPUSH
38393: LD_VAR 0 5
38397: PPUSH
38398: LD_VAR 0 1
38402: PPUSH
38403: CALL_OW 248
38407: PPUSH
38408: LD_INT 0
38410: PPUSH
38411: CALL 38903 0 6
38415: ST_TO_ADDR
// if not hexes then
38416: LD_VAR 0 12
38420: NOT
38421: IFFALSE 38425
// exit ;
38423: GO 38898
// hex := GetHexInfo ( x , y ) ;
38425: LD_ADDR_VAR 0 15
38429: PUSH
38430: LD_VAR 0 3
38434: PPUSH
38435: LD_VAR 0 4
38439: PPUSH
38440: CALL_OW 546
38444: ST_TO_ADDR
// if hex [ 1 ] then
38445: LD_VAR 0 15
38449: PUSH
38450: LD_INT 1
38452: ARRAY
38453: IFFALSE 38457
// exit ;
38455: GO 38898
// height := hex [ 2 ] ;
38457: LD_ADDR_VAR 0 13
38461: PUSH
38462: LD_VAR 0 15
38466: PUSH
38467: LD_INT 2
38469: ARRAY
38470: ST_TO_ADDR
// for i = 1 to hexes do
38471: LD_ADDR_VAR 0 7
38475: PUSH
38476: DOUBLE
38477: LD_INT 1
38479: DEC
38480: ST_TO_ADDR
38481: LD_VAR 0 12
38485: PUSH
38486: FOR_TO
38487: IFFALSE 38817
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
38489: LD_VAR 0 12
38493: PUSH
38494: LD_VAR 0 7
38498: ARRAY
38499: PUSH
38500: LD_INT 1
38502: ARRAY
38503: PPUSH
38504: LD_VAR 0 12
38508: PUSH
38509: LD_VAR 0 7
38513: ARRAY
38514: PUSH
38515: LD_INT 2
38517: ARRAY
38518: PPUSH
38519: CALL_OW 488
38523: NOT
38524: PUSH
38525: LD_VAR 0 12
38529: PUSH
38530: LD_VAR 0 7
38534: ARRAY
38535: PUSH
38536: LD_INT 1
38538: ARRAY
38539: PPUSH
38540: LD_VAR 0 12
38544: PUSH
38545: LD_VAR 0 7
38549: ARRAY
38550: PUSH
38551: LD_INT 2
38553: ARRAY
38554: PPUSH
38555: CALL_OW 428
38559: PUSH
38560: LD_INT 0
38562: GREATER
38563: OR
38564: PUSH
38565: LD_VAR 0 12
38569: PUSH
38570: LD_VAR 0 7
38574: ARRAY
38575: PUSH
38576: LD_INT 1
38578: ARRAY
38579: PPUSH
38580: LD_VAR 0 12
38584: PUSH
38585: LD_VAR 0 7
38589: ARRAY
38590: PUSH
38591: LD_INT 2
38593: ARRAY
38594: PPUSH
38595: CALL_OW 351
38599: OR
38600: IFFALSE 38606
// exit ;
38602: POP
38603: POP
38604: GO 38898
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38606: LD_ADDR_VAR 0 8
38610: PUSH
38611: LD_VAR 0 12
38615: PUSH
38616: LD_VAR 0 7
38620: ARRAY
38621: PUSH
38622: LD_INT 1
38624: ARRAY
38625: PPUSH
38626: LD_VAR 0 12
38630: PUSH
38631: LD_VAR 0 7
38635: ARRAY
38636: PUSH
38637: LD_INT 2
38639: ARRAY
38640: PPUSH
38641: CALL_OW 546
38645: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
38646: LD_VAR 0 8
38650: PUSH
38651: LD_INT 1
38653: ARRAY
38654: PUSH
38655: LD_VAR 0 8
38659: PUSH
38660: LD_INT 2
38662: ARRAY
38663: PUSH
38664: LD_VAR 0 13
38668: PUSH
38669: LD_INT 2
38671: PLUS
38672: GREATER
38673: OR
38674: PUSH
38675: LD_VAR 0 8
38679: PUSH
38680: LD_INT 2
38682: ARRAY
38683: PUSH
38684: LD_VAR 0 13
38688: PUSH
38689: LD_INT 2
38691: MINUS
38692: LESS
38693: OR
38694: PUSH
38695: LD_VAR 0 8
38699: PUSH
38700: LD_INT 3
38702: ARRAY
38703: PUSH
38704: LD_INT 0
38706: PUSH
38707: LD_INT 8
38709: PUSH
38710: LD_INT 9
38712: PUSH
38713: LD_INT 10
38715: PUSH
38716: LD_INT 11
38718: PUSH
38719: LD_INT 12
38721: PUSH
38722: LD_INT 13
38724: PUSH
38725: LD_INT 16
38727: PUSH
38728: LD_INT 17
38730: PUSH
38731: LD_INT 18
38733: PUSH
38734: LD_INT 19
38736: PUSH
38737: LD_INT 20
38739: PUSH
38740: LD_INT 21
38742: PUSH
38743: EMPTY
38744: LIST
38745: LIST
38746: LIST
38747: LIST
38748: LIST
38749: LIST
38750: LIST
38751: LIST
38752: LIST
38753: LIST
38754: LIST
38755: LIST
38756: LIST
38757: IN
38758: NOT
38759: OR
38760: PUSH
38761: LD_VAR 0 8
38765: PUSH
38766: LD_INT 5
38768: ARRAY
38769: NOT
38770: OR
38771: PUSH
38772: LD_VAR 0 8
38776: PUSH
38777: LD_INT 6
38779: ARRAY
38780: PUSH
38781: LD_INT 1
38783: PUSH
38784: LD_INT 2
38786: PUSH
38787: LD_INT 7
38789: PUSH
38790: LD_INT 9
38792: PUSH
38793: LD_INT 10
38795: PUSH
38796: LD_INT 11
38798: PUSH
38799: EMPTY
38800: LIST
38801: LIST
38802: LIST
38803: LIST
38804: LIST
38805: LIST
38806: IN
38807: NOT
38808: OR
38809: IFFALSE 38815
// exit ;
38811: POP
38812: POP
38813: GO 38898
// end ;
38815: GO 38486
38817: POP
38818: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
38819: LD_VAR 0 9
38823: PPUSH
38824: LD_VAR 0 3
38828: PPUSH
38829: LD_VAR 0 4
38833: PPUSH
38834: LD_INT 20
38836: PPUSH
38837: CALL 30844 0 4
38841: PUSH
38842: LD_INT 4
38844: ARRAY
38845: IFFALSE 38849
// exit ;
38847: GO 38898
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
38849: LD_VAR 0 2
38853: PUSH
38854: LD_INT 29
38856: PUSH
38857: LD_INT 30
38859: PUSH
38860: EMPTY
38861: LIST
38862: LIST
38863: IN
38864: PUSH
38865: LD_VAR 0 3
38869: PPUSH
38870: LD_VAR 0 4
38874: PPUSH
38875: LD_VAR 0 9
38879: PPUSH
38880: CALL_OW 440
38884: NOT
38885: AND
38886: IFFALSE 38890
// exit ;
38888: GO 38898
// result := true ;
38890: LD_ADDR_VAR 0 6
38894: PUSH
38895: LD_INT 1
38897: ST_TO_ADDR
// end ;
38898: LD_VAR 0 6
38902: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
38903: LD_INT 0
38905: PPUSH
38906: PPUSH
38907: PPUSH
38908: PPUSH
38909: PPUSH
38910: PPUSH
38911: PPUSH
38912: PPUSH
38913: PPUSH
38914: PPUSH
38915: PPUSH
38916: PPUSH
38917: PPUSH
38918: PPUSH
38919: PPUSH
38920: PPUSH
38921: PPUSH
38922: PPUSH
38923: PPUSH
38924: PPUSH
38925: PPUSH
38926: PPUSH
38927: PPUSH
38928: PPUSH
38929: PPUSH
38930: PPUSH
38931: PPUSH
38932: PPUSH
38933: PPUSH
38934: PPUSH
38935: PPUSH
38936: PPUSH
38937: PPUSH
38938: PPUSH
38939: PPUSH
38940: PPUSH
38941: PPUSH
38942: PPUSH
38943: PPUSH
38944: PPUSH
38945: PPUSH
38946: PPUSH
38947: PPUSH
38948: PPUSH
38949: PPUSH
38950: PPUSH
38951: PPUSH
38952: PPUSH
38953: PPUSH
38954: PPUSH
38955: PPUSH
38956: PPUSH
38957: PPUSH
38958: PPUSH
38959: PPUSH
38960: PPUSH
38961: PPUSH
38962: PPUSH
// result = [ ] ;
38963: LD_ADDR_VAR 0 7
38967: PUSH
38968: EMPTY
38969: ST_TO_ADDR
// temp_list = [ ] ;
38970: LD_ADDR_VAR 0 9
38974: PUSH
38975: EMPTY
38976: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
38977: LD_VAR 0 4
38981: PUSH
38982: LD_INT 0
38984: PUSH
38985: LD_INT 1
38987: PUSH
38988: LD_INT 2
38990: PUSH
38991: LD_INT 3
38993: PUSH
38994: LD_INT 4
38996: PUSH
38997: LD_INT 5
38999: PUSH
39000: EMPTY
39001: LIST
39002: LIST
39003: LIST
39004: LIST
39005: LIST
39006: LIST
39007: IN
39008: NOT
39009: PUSH
39010: LD_VAR 0 1
39014: PUSH
39015: LD_INT 0
39017: PUSH
39018: LD_INT 1
39020: PUSH
39021: EMPTY
39022: LIST
39023: LIST
39024: IN
39025: PUSH
39026: LD_VAR 0 5
39030: PUSH
39031: LD_INT 1
39033: PUSH
39034: LD_INT 2
39036: PUSH
39037: LD_INT 3
39039: PUSH
39040: EMPTY
39041: LIST
39042: LIST
39043: LIST
39044: IN
39045: NOT
39046: AND
39047: OR
39048: IFFALSE 39052
// exit ;
39050: GO 57443
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
39052: LD_VAR 0 1
39056: PUSH
39057: LD_INT 6
39059: PUSH
39060: LD_INT 7
39062: PUSH
39063: LD_INT 8
39065: PUSH
39066: LD_INT 13
39068: PUSH
39069: LD_INT 12
39071: PUSH
39072: LD_INT 15
39074: PUSH
39075: LD_INT 11
39077: PUSH
39078: LD_INT 14
39080: PUSH
39081: LD_INT 10
39083: PUSH
39084: EMPTY
39085: LIST
39086: LIST
39087: LIST
39088: LIST
39089: LIST
39090: LIST
39091: LIST
39092: LIST
39093: LIST
39094: IN
39095: IFFALSE 39105
// btype = b_lab ;
39097: LD_ADDR_VAR 0 1
39101: PUSH
39102: LD_INT 6
39104: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
39105: LD_VAR 0 6
39109: PUSH
39110: LD_INT 0
39112: PUSH
39113: LD_INT 1
39115: PUSH
39116: LD_INT 2
39118: PUSH
39119: EMPTY
39120: LIST
39121: LIST
39122: LIST
39123: IN
39124: NOT
39125: PUSH
39126: LD_VAR 0 1
39130: PUSH
39131: LD_INT 0
39133: PUSH
39134: LD_INT 1
39136: PUSH
39137: LD_INT 2
39139: PUSH
39140: LD_INT 3
39142: PUSH
39143: LD_INT 6
39145: PUSH
39146: LD_INT 36
39148: PUSH
39149: LD_INT 4
39151: PUSH
39152: LD_INT 5
39154: PUSH
39155: LD_INT 31
39157: PUSH
39158: LD_INT 32
39160: PUSH
39161: LD_INT 33
39163: PUSH
39164: EMPTY
39165: LIST
39166: LIST
39167: LIST
39168: LIST
39169: LIST
39170: LIST
39171: LIST
39172: LIST
39173: LIST
39174: LIST
39175: LIST
39176: IN
39177: NOT
39178: PUSH
39179: LD_VAR 0 6
39183: PUSH
39184: LD_INT 1
39186: EQUAL
39187: AND
39188: OR
39189: PUSH
39190: LD_VAR 0 1
39194: PUSH
39195: LD_INT 2
39197: PUSH
39198: LD_INT 3
39200: PUSH
39201: EMPTY
39202: LIST
39203: LIST
39204: IN
39205: NOT
39206: PUSH
39207: LD_VAR 0 6
39211: PUSH
39212: LD_INT 2
39214: EQUAL
39215: AND
39216: OR
39217: IFFALSE 39227
// mode = 0 ;
39219: LD_ADDR_VAR 0 6
39223: PUSH
39224: LD_INT 0
39226: ST_TO_ADDR
// case mode of 0 :
39227: LD_VAR 0 6
39231: PUSH
39232: LD_INT 0
39234: DOUBLE
39235: EQUAL
39236: IFTRUE 39240
39238: GO 50693
39240: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39241: LD_ADDR_VAR 0 11
39245: PUSH
39246: LD_INT 0
39248: PUSH
39249: LD_INT 0
39251: PUSH
39252: EMPTY
39253: LIST
39254: LIST
39255: PUSH
39256: LD_INT 0
39258: PUSH
39259: LD_INT 1
39261: NEG
39262: PUSH
39263: EMPTY
39264: LIST
39265: LIST
39266: PUSH
39267: LD_INT 1
39269: PUSH
39270: LD_INT 0
39272: PUSH
39273: EMPTY
39274: LIST
39275: LIST
39276: PUSH
39277: LD_INT 1
39279: PUSH
39280: LD_INT 1
39282: PUSH
39283: EMPTY
39284: LIST
39285: LIST
39286: PUSH
39287: LD_INT 0
39289: PUSH
39290: LD_INT 1
39292: PUSH
39293: EMPTY
39294: LIST
39295: LIST
39296: PUSH
39297: LD_INT 1
39299: NEG
39300: PUSH
39301: LD_INT 0
39303: PUSH
39304: EMPTY
39305: LIST
39306: LIST
39307: PUSH
39308: LD_INT 1
39310: NEG
39311: PUSH
39312: LD_INT 1
39314: NEG
39315: PUSH
39316: EMPTY
39317: LIST
39318: LIST
39319: PUSH
39320: LD_INT 1
39322: NEG
39323: PUSH
39324: LD_INT 2
39326: NEG
39327: PUSH
39328: EMPTY
39329: LIST
39330: LIST
39331: PUSH
39332: LD_INT 0
39334: PUSH
39335: LD_INT 2
39337: NEG
39338: PUSH
39339: EMPTY
39340: LIST
39341: LIST
39342: PUSH
39343: LD_INT 1
39345: PUSH
39346: LD_INT 1
39348: NEG
39349: PUSH
39350: EMPTY
39351: LIST
39352: LIST
39353: PUSH
39354: LD_INT 1
39356: PUSH
39357: LD_INT 2
39359: PUSH
39360: EMPTY
39361: LIST
39362: LIST
39363: PUSH
39364: LD_INT 0
39366: PUSH
39367: LD_INT 2
39369: PUSH
39370: EMPTY
39371: LIST
39372: LIST
39373: PUSH
39374: LD_INT 1
39376: NEG
39377: PUSH
39378: LD_INT 1
39380: PUSH
39381: EMPTY
39382: LIST
39383: LIST
39384: PUSH
39385: LD_INT 1
39387: PUSH
39388: LD_INT 3
39390: PUSH
39391: EMPTY
39392: LIST
39393: LIST
39394: PUSH
39395: LD_INT 0
39397: PUSH
39398: LD_INT 3
39400: PUSH
39401: EMPTY
39402: LIST
39403: LIST
39404: PUSH
39405: LD_INT 1
39407: NEG
39408: PUSH
39409: LD_INT 2
39411: PUSH
39412: EMPTY
39413: LIST
39414: LIST
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: LIST
39420: LIST
39421: LIST
39422: LIST
39423: LIST
39424: LIST
39425: LIST
39426: LIST
39427: LIST
39428: LIST
39429: LIST
39430: LIST
39431: LIST
39432: LIST
39433: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39434: LD_ADDR_VAR 0 12
39438: PUSH
39439: LD_INT 0
39441: PUSH
39442: LD_INT 0
39444: PUSH
39445: EMPTY
39446: LIST
39447: LIST
39448: PUSH
39449: LD_INT 0
39451: PUSH
39452: LD_INT 1
39454: NEG
39455: PUSH
39456: EMPTY
39457: LIST
39458: LIST
39459: PUSH
39460: LD_INT 1
39462: PUSH
39463: LD_INT 0
39465: PUSH
39466: EMPTY
39467: LIST
39468: LIST
39469: PUSH
39470: LD_INT 1
39472: PUSH
39473: LD_INT 1
39475: PUSH
39476: EMPTY
39477: LIST
39478: LIST
39479: PUSH
39480: LD_INT 0
39482: PUSH
39483: LD_INT 1
39485: PUSH
39486: EMPTY
39487: LIST
39488: LIST
39489: PUSH
39490: LD_INT 1
39492: NEG
39493: PUSH
39494: LD_INT 0
39496: PUSH
39497: EMPTY
39498: LIST
39499: LIST
39500: PUSH
39501: LD_INT 1
39503: NEG
39504: PUSH
39505: LD_INT 1
39507: NEG
39508: PUSH
39509: EMPTY
39510: LIST
39511: LIST
39512: PUSH
39513: LD_INT 1
39515: PUSH
39516: LD_INT 1
39518: NEG
39519: PUSH
39520: EMPTY
39521: LIST
39522: LIST
39523: PUSH
39524: LD_INT 2
39526: PUSH
39527: LD_INT 0
39529: PUSH
39530: EMPTY
39531: LIST
39532: LIST
39533: PUSH
39534: LD_INT 2
39536: PUSH
39537: LD_INT 1
39539: PUSH
39540: EMPTY
39541: LIST
39542: LIST
39543: PUSH
39544: LD_INT 1
39546: NEG
39547: PUSH
39548: LD_INT 1
39550: PUSH
39551: EMPTY
39552: LIST
39553: LIST
39554: PUSH
39555: LD_INT 2
39557: NEG
39558: PUSH
39559: LD_INT 0
39561: PUSH
39562: EMPTY
39563: LIST
39564: LIST
39565: PUSH
39566: LD_INT 2
39568: NEG
39569: PUSH
39570: LD_INT 1
39572: NEG
39573: PUSH
39574: EMPTY
39575: LIST
39576: LIST
39577: PUSH
39578: LD_INT 2
39580: NEG
39581: PUSH
39582: LD_INT 1
39584: PUSH
39585: EMPTY
39586: LIST
39587: LIST
39588: PUSH
39589: LD_INT 3
39591: NEG
39592: PUSH
39593: LD_INT 0
39595: PUSH
39596: EMPTY
39597: LIST
39598: LIST
39599: PUSH
39600: LD_INT 3
39602: NEG
39603: PUSH
39604: LD_INT 1
39606: NEG
39607: PUSH
39608: EMPTY
39609: LIST
39610: LIST
39611: PUSH
39612: EMPTY
39613: LIST
39614: LIST
39615: LIST
39616: LIST
39617: LIST
39618: LIST
39619: LIST
39620: LIST
39621: LIST
39622: LIST
39623: LIST
39624: LIST
39625: LIST
39626: LIST
39627: LIST
39628: LIST
39629: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39630: LD_ADDR_VAR 0 13
39634: PUSH
39635: LD_INT 0
39637: PUSH
39638: LD_INT 0
39640: PUSH
39641: EMPTY
39642: LIST
39643: LIST
39644: PUSH
39645: LD_INT 0
39647: PUSH
39648: LD_INT 1
39650: NEG
39651: PUSH
39652: EMPTY
39653: LIST
39654: LIST
39655: PUSH
39656: LD_INT 1
39658: PUSH
39659: LD_INT 0
39661: PUSH
39662: EMPTY
39663: LIST
39664: LIST
39665: PUSH
39666: LD_INT 1
39668: PUSH
39669: LD_INT 1
39671: PUSH
39672: EMPTY
39673: LIST
39674: LIST
39675: PUSH
39676: LD_INT 0
39678: PUSH
39679: LD_INT 1
39681: PUSH
39682: EMPTY
39683: LIST
39684: LIST
39685: PUSH
39686: LD_INT 1
39688: NEG
39689: PUSH
39690: LD_INT 0
39692: PUSH
39693: EMPTY
39694: LIST
39695: LIST
39696: PUSH
39697: LD_INT 1
39699: NEG
39700: PUSH
39701: LD_INT 1
39703: NEG
39704: PUSH
39705: EMPTY
39706: LIST
39707: LIST
39708: PUSH
39709: LD_INT 1
39711: NEG
39712: PUSH
39713: LD_INT 2
39715: NEG
39716: PUSH
39717: EMPTY
39718: LIST
39719: LIST
39720: PUSH
39721: LD_INT 2
39723: PUSH
39724: LD_INT 1
39726: PUSH
39727: EMPTY
39728: LIST
39729: LIST
39730: PUSH
39731: LD_INT 2
39733: PUSH
39734: LD_INT 2
39736: PUSH
39737: EMPTY
39738: LIST
39739: LIST
39740: PUSH
39741: LD_INT 1
39743: PUSH
39744: LD_INT 2
39746: PUSH
39747: EMPTY
39748: LIST
39749: LIST
39750: PUSH
39751: LD_INT 2
39753: NEG
39754: PUSH
39755: LD_INT 1
39757: NEG
39758: PUSH
39759: EMPTY
39760: LIST
39761: LIST
39762: PUSH
39763: LD_INT 2
39765: NEG
39766: PUSH
39767: LD_INT 2
39769: NEG
39770: PUSH
39771: EMPTY
39772: LIST
39773: LIST
39774: PUSH
39775: LD_INT 2
39777: NEG
39778: PUSH
39779: LD_INT 3
39781: NEG
39782: PUSH
39783: EMPTY
39784: LIST
39785: LIST
39786: PUSH
39787: LD_INT 3
39789: NEG
39790: PUSH
39791: LD_INT 2
39793: NEG
39794: PUSH
39795: EMPTY
39796: LIST
39797: LIST
39798: PUSH
39799: LD_INT 3
39801: NEG
39802: PUSH
39803: LD_INT 3
39805: NEG
39806: PUSH
39807: EMPTY
39808: LIST
39809: LIST
39810: PUSH
39811: EMPTY
39812: LIST
39813: LIST
39814: LIST
39815: LIST
39816: LIST
39817: LIST
39818: LIST
39819: LIST
39820: LIST
39821: LIST
39822: LIST
39823: LIST
39824: LIST
39825: LIST
39826: LIST
39827: LIST
39828: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39829: LD_ADDR_VAR 0 14
39833: PUSH
39834: LD_INT 0
39836: PUSH
39837: LD_INT 0
39839: PUSH
39840: EMPTY
39841: LIST
39842: LIST
39843: PUSH
39844: LD_INT 0
39846: PUSH
39847: LD_INT 1
39849: NEG
39850: PUSH
39851: EMPTY
39852: LIST
39853: LIST
39854: PUSH
39855: LD_INT 1
39857: PUSH
39858: LD_INT 0
39860: PUSH
39861: EMPTY
39862: LIST
39863: LIST
39864: PUSH
39865: LD_INT 1
39867: PUSH
39868: LD_INT 1
39870: PUSH
39871: EMPTY
39872: LIST
39873: LIST
39874: PUSH
39875: LD_INT 0
39877: PUSH
39878: LD_INT 1
39880: PUSH
39881: EMPTY
39882: LIST
39883: LIST
39884: PUSH
39885: LD_INT 1
39887: NEG
39888: PUSH
39889: LD_INT 0
39891: PUSH
39892: EMPTY
39893: LIST
39894: LIST
39895: PUSH
39896: LD_INT 1
39898: NEG
39899: PUSH
39900: LD_INT 1
39902: NEG
39903: PUSH
39904: EMPTY
39905: LIST
39906: LIST
39907: PUSH
39908: LD_INT 1
39910: NEG
39911: PUSH
39912: LD_INT 2
39914: NEG
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: PUSH
39920: LD_INT 0
39922: PUSH
39923: LD_INT 2
39925: NEG
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: PUSH
39931: LD_INT 1
39933: PUSH
39934: LD_INT 1
39936: NEG
39937: PUSH
39938: EMPTY
39939: LIST
39940: LIST
39941: PUSH
39942: LD_INT 1
39944: PUSH
39945: LD_INT 2
39947: PUSH
39948: EMPTY
39949: LIST
39950: LIST
39951: PUSH
39952: LD_INT 0
39954: PUSH
39955: LD_INT 2
39957: PUSH
39958: EMPTY
39959: LIST
39960: LIST
39961: PUSH
39962: LD_INT 1
39964: NEG
39965: PUSH
39966: LD_INT 1
39968: PUSH
39969: EMPTY
39970: LIST
39971: LIST
39972: PUSH
39973: LD_INT 1
39975: NEG
39976: PUSH
39977: LD_INT 3
39979: NEG
39980: PUSH
39981: EMPTY
39982: LIST
39983: LIST
39984: PUSH
39985: LD_INT 0
39987: PUSH
39988: LD_INT 3
39990: NEG
39991: PUSH
39992: EMPTY
39993: LIST
39994: LIST
39995: PUSH
39996: LD_INT 1
39998: PUSH
39999: LD_INT 2
40001: NEG
40002: PUSH
40003: EMPTY
40004: LIST
40005: LIST
40006: PUSH
40007: EMPTY
40008: LIST
40009: LIST
40010: LIST
40011: LIST
40012: LIST
40013: LIST
40014: LIST
40015: LIST
40016: LIST
40017: LIST
40018: LIST
40019: LIST
40020: LIST
40021: LIST
40022: LIST
40023: LIST
40024: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40025: LD_ADDR_VAR 0 15
40029: PUSH
40030: LD_INT 0
40032: PUSH
40033: LD_INT 0
40035: PUSH
40036: EMPTY
40037: LIST
40038: LIST
40039: PUSH
40040: LD_INT 0
40042: PUSH
40043: LD_INT 1
40045: NEG
40046: PUSH
40047: EMPTY
40048: LIST
40049: LIST
40050: PUSH
40051: LD_INT 1
40053: PUSH
40054: LD_INT 0
40056: PUSH
40057: EMPTY
40058: LIST
40059: LIST
40060: PUSH
40061: LD_INT 1
40063: PUSH
40064: LD_INT 1
40066: PUSH
40067: EMPTY
40068: LIST
40069: LIST
40070: PUSH
40071: LD_INT 0
40073: PUSH
40074: LD_INT 1
40076: PUSH
40077: EMPTY
40078: LIST
40079: LIST
40080: PUSH
40081: LD_INT 1
40083: NEG
40084: PUSH
40085: LD_INT 0
40087: PUSH
40088: EMPTY
40089: LIST
40090: LIST
40091: PUSH
40092: LD_INT 1
40094: NEG
40095: PUSH
40096: LD_INT 1
40098: NEG
40099: PUSH
40100: EMPTY
40101: LIST
40102: LIST
40103: PUSH
40104: LD_INT 1
40106: PUSH
40107: LD_INT 1
40109: NEG
40110: PUSH
40111: EMPTY
40112: LIST
40113: LIST
40114: PUSH
40115: LD_INT 2
40117: PUSH
40118: LD_INT 0
40120: PUSH
40121: EMPTY
40122: LIST
40123: LIST
40124: PUSH
40125: LD_INT 2
40127: PUSH
40128: LD_INT 1
40130: PUSH
40131: EMPTY
40132: LIST
40133: LIST
40134: PUSH
40135: LD_INT 1
40137: NEG
40138: PUSH
40139: LD_INT 1
40141: PUSH
40142: EMPTY
40143: LIST
40144: LIST
40145: PUSH
40146: LD_INT 2
40148: NEG
40149: PUSH
40150: LD_INT 0
40152: PUSH
40153: EMPTY
40154: LIST
40155: LIST
40156: PUSH
40157: LD_INT 2
40159: NEG
40160: PUSH
40161: LD_INT 1
40163: NEG
40164: PUSH
40165: EMPTY
40166: LIST
40167: LIST
40168: PUSH
40169: LD_INT 2
40171: PUSH
40172: LD_INT 1
40174: NEG
40175: PUSH
40176: EMPTY
40177: LIST
40178: LIST
40179: PUSH
40180: LD_INT 3
40182: PUSH
40183: LD_INT 0
40185: PUSH
40186: EMPTY
40187: LIST
40188: LIST
40189: PUSH
40190: LD_INT 3
40192: PUSH
40193: LD_INT 1
40195: PUSH
40196: EMPTY
40197: LIST
40198: LIST
40199: PUSH
40200: EMPTY
40201: LIST
40202: LIST
40203: LIST
40204: LIST
40205: LIST
40206: LIST
40207: LIST
40208: LIST
40209: LIST
40210: LIST
40211: LIST
40212: LIST
40213: LIST
40214: LIST
40215: LIST
40216: LIST
40217: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40218: LD_ADDR_VAR 0 16
40222: PUSH
40223: LD_INT 0
40225: PUSH
40226: LD_INT 0
40228: PUSH
40229: EMPTY
40230: LIST
40231: LIST
40232: PUSH
40233: LD_INT 0
40235: PUSH
40236: LD_INT 1
40238: NEG
40239: PUSH
40240: EMPTY
40241: LIST
40242: LIST
40243: PUSH
40244: LD_INT 1
40246: PUSH
40247: LD_INT 0
40249: PUSH
40250: EMPTY
40251: LIST
40252: LIST
40253: PUSH
40254: LD_INT 1
40256: PUSH
40257: LD_INT 1
40259: PUSH
40260: EMPTY
40261: LIST
40262: LIST
40263: PUSH
40264: LD_INT 0
40266: PUSH
40267: LD_INT 1
40269: PUSH
40270: EMPTY
40271: LIST
40272: LIST
40273: PUSH
40274: LD_INT 1
40276: NEG
40277: PUSH
40278: LD_INT 0
40280: PUSH
40281: EMPTY
40282: LIST
40283: LIST
40284: PUSH
40285: LD_INT 1
40287: NEG
40288: PUSH
40289: LD_INT 1
40291: NEG
40292: PUSH
40293: EMPTY
40294: LIST
40295: LIST
40296: PUSH
40297: LD_INT 1
40299: NEG
40300: PUSH
40301: LD_INT 2
40303: NEG
40304: PUSH
40305: EMPTY
40306: LIST
40307: LIST
40308: PUSH
40309: LD_INT 2
40311: PUSH
40312: LD_INT 1
40314: PUSH
40315: EMPTY
40316: LIST
40317: LIST
40318: PUSH
40319: LD_INT 2
40321: PUSH
40322: LD_INT 2
40324: PUSH
40325: EMPTY
40326: LIST
40327: LIST
40328: PUSH
40329: LD_INT 1
40331: PUSH
40332: LD_INT 2
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: PUSH
40339: LD_INT 2
40341: NEG
40342: PUSH
40343: LD_INT 1
40345: NEG
40346: PUSH
40347: EMPTY
40348: LIST
40349: LIST
40350: PUSH
40351: LD_INT 2
40353: NEG
40354: PUSH
40355: LD_INT 2
40357: NEG
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: PUSH
40363: LD_INT 3
40365: PUSH
40366: LD_INT 2
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: PUSH
40373: LD_INT 3
40375: PUSH
40376: LD_INT 3
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: PUSH
40383: LD_INT 2
40385: PUSH
40386: LD_INT 3
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: PUSH
40393: EMPTY
40394: LIST
40395: LIST
40396: LIST
40397: LIST
40398: LIST
40399: LIST
40400: LIST
40401: LIST
40402: LIST
40403: LIST
40404: LIST
40405: LIST
40406: LIST
40407: LIST
40408: LIST
40409: LIST
40410: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40411: LD_ADDR_VAR 0 17
40415: PUSH
40416: LD_INT 0
40418: PUSH
40419: LD_INT 0
40421: PUSH
40422: EMPTY
40423: LIST
40424: LIST
40425: PUSH
40426: LD_INT 0
40428: PUSH
40429: LD_INT 1
40431: NEG
40432: PUSH
40433: EMPTY
40434: LIST
40435: LIST
40436: PUSH
40437: LD_INT 1
40439: PUSH
40440: LD_INT 0
40442: PUSH
40443: EMPTY
40444: LIST
40445: LIST
40446: PUSH
40447: LD_INT 1
40449: PUSH
40450: LD_INT 1
40452: PUSH
40453: EMPTY
40454: LIST
40455: LIST
40456: PUSH
40457: LD_INT 0
40459: PUSH
40460: LD_INT 1
40462: PUSH
40463: EMPTY
40464: LIST
40465: LIST
40466: PUSH
40467: LD_INT 1
40469: NEG
40470: PUSH
40471: LD_INT 0
40473: PUSH
40474: EMPTY
40475: LIST
40476: LIST
40477: PUSH
40478: LD_INT 1
40480: NEG
40481: PUSH
40482: LD_INT 1
40484: NEG
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: PUSH
40490: LD_INT 1
40492: NEG
40493: PUSH
40494: LD_INT 2
40496: NEG
40497: PUSH
40498: EMPTY
40499: LIST
40500: LIST
40501: PUSH
40502: LD_INT 0
40504: PUSH
40505: LD_INT 2
40507: NEG
40508: PUSH
40509: EMPTY
40510: LIST
40511: LIST
40512: PUSH
40513: LD_INT 1
40515: PUSH
40516: LD_INT 1
40518: NEG
40519: PUSH
40520: EMPTY
40521: LIST
40522: LIST
40523: PUSH
40524: LD_INT 2
40526: PUSH
40527: LD_INT 0
40529: PUSH
40530: EMPTY
40531: LIST
40532: LIST
40533: PUSH
40534: LD_INT 2
40536: PUSH
40537: LD_INT 1
40539: PUSH
40540: EMPTY
40541: LIST
40542: LIST
40543: PUSH
40544: LD_INT 2
40546: PUSH
40547: LD_INT 2
40549: PUSH
40550: EMPTY
40551: LIST
40552: LIST
40553: PUSH
40554: LD_INT 1
40556: PUSH
40557: LD_INT 2
40559: PUSH
40560: EMPTY
40561: LIST
40562: LIST
40563: PUSH
40564: LD_INT 0
40566: PUSH
40567: LD_INT 2
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: PUSH
40574: LD_INT 1
40576: NEG
40577: PUSH
40578: LD_INT 1
40580: PUSH
40581: EMPTY
40582: LIST
40583: LIST
40584: PUSH
40585: LD_INT 2
40587: NEG
40588: PUSH
40589: LD_INT 0
40591: PUSH
40592: EMPTY
40593: LIST
40594: LIST
40595: PUSH
40596: LD_INT 2
40598: NEG
40599: PUSH
40600: LD_INT 1
40602: NEG
40603: PUSH
40604: EMPTY
40605: LIST
40606: LIST
40607: PUSH
40608: LD_INT 2
40610: NEG
40611: PUSH
40612: LD_INT 2
40614: NEG
40615: PUSH
40616: EMPTY
40617: LIST
40618: LIST
40619: PUSH
40620: EMPTY
40621: LIST
40622: LIST
40623: LIST
40624: LIST
40625: LIST
40626: LIST
40627: LIST
40628: LIST
40629: LIST
40630: LIST
40631: LIST
40632: LIST
40633: LIST
40634: LIST
40635: LIST
40636: LIST
40637: LIST
40638: LIST
40639: LIST
40640: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40641: LD_ADDR_VAR 0 18
40645: PUSH
40646: LD_INT 0
40648: PUSH
40649: LD_INT 0
40651: PUSH
40652: EMPTY
40653: LIST
40654: LIST
40655: PUSH
40656: LD_INT 0
40658: PUSH
40659: LD_INT 1
40661: NEG
40662: PUSH
40663: EMPTY
40664: LIST
40665: LIST
40666: PUSH
40667: LD_INT 1
40669: PUSH
40670: LD_INT 0
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: PUSH
40677: LD_INT 1
40679: PUSH
40680: LD_INT 1
40682: PUSH
40683: EMPTY
40684: LIST
40685: LIST
40686: PUSH
40687: LD_INT 0
40689: PUSH
40690: LD_INT 1
40692: PUSH
40693: EMPTY
40694: LIST
40695: LIST
40696: PUSH
40697: LD_INT 1
40699: NEG
40700: PUSH
40701: LD_INT 0
40703: PUSH
40704: EMPTY
40705: LIST
40706: LIST
40707: PUSH
40708: LD_INT 1
40710: NEG
40711: PUSH
40712: LD_INT 1
40714: NEG
40715: PUSH
40716: EMPTY
40717: LIST
40718: LIST
40719: PUSH
40720: LD_INT 1
40722: NEG
40723: PUSH
40724: LD_INT 2
40726: NEG
40727: PUSH
40728: EMPTY
40729: LIST
40730: LIST
40731: PUSH
40732: LD_INT 0
40734: PUSH
40735: LD_INT 2
40737: NEG
40738: PUSH
40739: EMPTY
40740: LIST
40741: LIST
40742: PUSH
40743: LD_INT 1
40745: PUSH
40746: LD_INT 1
40748: NEG
40749: PUSH
40750: EMPTY
40751: LIST
40752: LIST
40753: PUSH
40754: LD_INT 2
40756: PUSH
40757: LD_INT 0
40759: PUSH
40760: EMPTY
40761: LIST
40762: LIST
40763: PUSH
40764: LD_INT 2
40766: PUSH
40767: LD_INT 1
40769: PUSH
40770: EMPTY
40771: LIST
40772: LIST
40773: PUSH
40774: LD_INT 2
40776: PUSH
40777: LD_INT 2
40779: PUSH
40780: EMPTY
40781: LIST
40782: LIST
40783: PUSH
40784: LD_INT 1
40786: PUSH
40787: LD_INT 2
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: PUSH
40794: LD_INT 0
40796: PUSH
40797: LD_INT 2
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: PUSH
40804: LD_INT 1
40806: NEG
40807: PUSH
40808: LD_INT 1
40810: PUSH
40811: EMPTY
40812: LIST
40813: LIST
40814: PUSH
40815: LD_INT 2
40817: NEG
40818: PUSH
40819: LD_INT 0
40821: PUSH
40822: EMPTY
40823: LIST
40824: LIST
40825: PUSH
40826: LD_INT 2
40828: NEG
40829: PUSH
40830: LD_INT 1
40832: NEG
40833: PUSH
40834: EMPTY
40835: LIST
40836: LIST
40837: PUSH
40838: LD_INT 2
40840: NEG
40841: PUSH
40842: LD_INT 2
40844: NEG
40845: PUSH
40846: EMPTY
40847: LIST
40848: LIST
40849: PUSH
40850: EMPTY
40851: LIST
40852: LIST
40853: LIST
40854: LIST
40855: LIST
40856: LIST
40857: LIST
40858: LIST
40859: LIST
40860: LIST
40861: LIST
40862: LIST
40863: LIST
40864: LIST
40865: LIST
40866: LIST
40867: LIST
40868: LIST
40869: LIST
40870: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40871: LD_ADDR_VAR 0 19
40875: PUSH
40876: LD_INT 0
40878: PUSH
40879: LD_INT 0
40881: PUSH
40882: EMPTY
40883: LIST
40884: LIST
40885: PUSH
40886: LD_INT 0
40888: PUSH
40889: LD_INT 1
40891: NEG
40892: PUSH
40893: EMPTY
40894: LIST
40895: LIST
40896: PUSH
40897: LD_INT 1
40899: PUSH
40900: LD_INT 0
40902: PUSH
40903: EMPTY
40904: LIST
40905: LIST
40906: PUSH
40907: LD_INT 1
40909: PUSH
40910: LD_INT 1
40912: PUSH
40913: EMPTY
40914: LIST
40915: LIST
40916: PUSH
40917: LD_INT 0
40919: PUSH
40920: LD_INT 1
40922: PUSH
40923: EMPTY
40924: LIST
40925: LIST
40926: PUSH
40927: LD_INT 1
40929: NEG
40930: PUSH
40931: LD_INT 0
40933: PUSH
40934: EMPTY
40935: LIST
40936: LIST
40937: PUSH
40938: LD_INT 1
40940: NEG
40941: PUSH
40942: LD_INT 1
40944: NEG
40945: PUSH
40946: EMPTY
40947: LIST
40948: LIST
40949: PUSH
40950: LD_INT 1
40952: NEG
40953: PUSH
40954: LD_INT 2
40956: NEG
40957: PUSH
40958: EMPTY
40959: LIST
40960: LIST
40961: PUSH
40962: LD_INT 0
40964: PUSH
40965: LD_INT 2
40967: NEG
40968: PUSH
40969: EMPTY
40970: LIST
40971: LIST
40972: PUSH
40973: LD_INT 1
40975: PUSH
40976: LD_INT 1
40978: NEG
40979: PUSH
40980: EMPTY
40981: LIST
40982: LIST
40983: PUSH
40984: LD_INT 2
40986: PUSH
40987: LD_INT 0
40989: PUSH
40990: EMPTY
40991: LIST
40992: LIST
40993: PUSH
40994: LD_INT 2
40996: PUSH
40997: LD_INT 1
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: PUSH
41004: LD_INT 2
41006: PUSH
41007: LD_INT 2
41009: PUSH
41010: EMPTY
41011: LIST
41012: LIST
41013: PUSH
41014: LD_INT 1
41016: PUSH
41017: LD_INT 2
41019: PUSH
41020: EMPTY
41021: LIST
41022: LIST
41023: PUSH
41024: LD_INT 0
41026: PUSH
41027: LD_INT 2
41029: PUSH
41030: EMPTY
41031: LIST
41032: LIST
41033: PUSH
41034: LD_INT 1
41036: NEG
41037: PUSH
41038: LD_INT 1
41040: PUSH
41041: EMPTY
41042: LIST
41043: LIST
41044: PUSH
41045: LD_INT 2
41047: NEG
41048: PUSH
41049: LD_INT 0
41051: PUSH
41052: EMPTY
41053: LIST
41054: LIST
41055: PUSH
41056: LD_INT 2
41058: NEG
41059: PUSH
41060: LD_INT 1
41062: NEG
41063: PUSH
41064: EMPTY
41065: LIST
41066: LIST
41067: PUSH
41068: LD_INT 2
41070: NEG
41071: PUSH
41072: LD_INT 2
41074: NEG
41075: PUSH
41076: EMPTY
41077: LIST
41078: LIST
41079: PUSH
41080: EMPTY
41081: LIST
41082: LIST
41083: LIST
41084: LIST
41085: LIST
41086: LIST
41087: LIST
41088: LIST
41089: LIST
41090: LIST
41091: LIST
41092: LIST
41093: LIST
41094: LIST
41095: LIST
41096: LIST
41097: LIST
41098: LIST
41099: LIST
41100: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41101: LD_ADDR_VAR 0 20
41105: PUSH
41106: LD_INT 0
41108: PUSH
41109: LD_INT 0
41111: PUSH
41112: EMPTY
41113: LIST
41114: LIST
41115: PUSH
41116: LD_INT 0
41118: PUSH
41119: LD_INT 1
41121: NEG
41122: PUSH
41123: EMPTY
41124: LIST
41125: LIST
41126: PUSH
41127: LD_INT 1
41129: PUSH
41130: LD_INT 0
41132: PUSH
41133: EMPTY
41134: LIST
41135: LIST
41136: PUSH
41137: LD_INT 1
41139: PUSH
41140: LD_INT 1
41142: PUSH
41143: EMPTY
41144: LIST
41145: LIST
41146: PUSH
41147: LD_INT 0
41149: PUSH
41150: LD_INT 1
41152: PUSH
41153: EMPTY
41154: LIST
41155: LIST
41156: PUSH
41157: LD_INT 1
41159: NEG
41160: PUSH
41161: LD_INT 0
41163: PUSH
41164: EMPTY
41165: LIST
41166: LIST
41167: PUSH
41168: LD_INT 1
41170: NEG
41171: PUSH
41172: LD_INT 1
41174: NEG
41175: PUSH
41176: EMPTY
41177: LIST
41178: LIST
41179: PUSH
41180: LD_INT 1
41182: NEG
41183: PUSH
41184: LD_INT 2
41186: NEG
41187: PUSH
41188: EMPTY
41189: LIST
41190: LIST
41191: PUSH
41192: LD_INT 0
41194: PUSH
41195: LD_INT 2
41197: NEG
41198: PUSH
41199: EMPTY
41200: LIST
41201: LIST
41202: PUSH
41203: LD_INT 1
41205: PUSH
41206: LD_INT 1
41208: NEG
41209: PUSH
41210: EMPTY
41211: LIST
41212: LIST
41213: PUSH
41214: LD_INT 2
41216: PUSH
41217: LD_INT 0
41219: PUSH
41220: EMPTY
41221: LIST
41222: LIST
41223: PUSH
41224: LD_INT 2
41226: PUSH
41227: LD_INT 1
41229: PUSH
41230: EMPTY
41231: LIST
41232: LIST
41233: PUSH
41234: LD_INT 2
41236: PUSH
41237: LD_INT 2
41239: PUSH
41240: EMPTY
41241: LIST
41242: LIST
41243: PUSH
41244: LD_INT 1
41246: PUSH
41247: LD_INT 2
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: PUSH
41254: LD_INT 0
41256: PUSH
41257: LD_INT 2
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: PUSH
41264: LD_INT 1
41266: NEG
41267: PUSH
41268: LD_INT 1
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: PUSH
41275: LD_INT 2
41277: NEG
41278: PUSH
41279: LD_INT 0
41281: PUSH
41282: EMPTY
41283: LIST
41284: LIST
41285: PUSH
41286: LD_INT 2
41288: NEG
41289: PUSH
41290: LD_INT 1
41292: NEG
41293: PUSH
41294: EMPTY
41295: LIST
41296: LIST
41297: PUSH
41298: LD_INT 2
41300: NEG
41301: PUSH
41302: LD_INT 2
41304: NEG
41305: PUSH
41306: EMPTY
41307: LIST
41308: LIST
41309: PUSH
41310: EMPTY
41311: LIST
41312: LIST
41313: LIST
41314: LIST
41315: LIST
41316: LIST
41317: LIST
41318: LIST
41319: LIST
41320: LIST
41321: LIST
41322: LIST
41323: LIST
41324: LIST
41325: LIST
41326: LIST
41327: LIST
41328: LIST
41329: LIST
41330: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41331: LD_ADDR_VAR 0 21
41335: PUSH
41336: LD_INT 0
41338: PUSH
41339: LD_INT 0
41341: PUSH
41342: EMPTY
41343: LIST
41344: LIST
41345: PUSH
41346: LD_INT 0
41348: PUSH
41349: LD_INT 1
41351: NEG
41352: PUSH
41353: EMPTY
41354: LIST
41355: LIST
41356: PUSH
41357: LD_INT 1
41359: PUSH
41360: LD_INT 0
41362: PUSH
41363: EMPTY
41364: LIST
41365: LIST
41366: PUSH
41367: LD_INT 1
41369: PUSH
41370: LD_INT 1
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: PUSH
41377: LD_INT 0
41379: PUSH
41380: LD_INT 1
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PUSH
41387: LD_INT 1
41389: NEG
41390: PUSH
41391: LD_INT 0
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: PUSH
41398: LD_INT 1
41400: NEG
41401: PUSH
41402: LD_INT 1
41404: NEG
41405: PUSH
41406: EMPTY
41407: LIST
41408: LIST
41409: PUSH
41410: LD_INT 1
41412: NEG
41413: PUSH
41414: LD_INT 2
41416: NEG
41417: PUSH
41418: EMPTY
41419: LIST
41420: LIST
41421: PUSH
41422: LD_INT 0
41424: PUSH
41425: LD_INT 2
41427: NEG
41428: PUSH
41429: EMPTY
41430: LIST
41431: LIST
41432: PUSH
41433: LD_INT 1
41435: PUSH
41436: LD_INT 1
41438: NEG
41439: PUSH
41440: EMPTY
41441: LIST
41442: LIST
41443: PUSH
41444: LD_INT 2
41446: PUSH
41447: LD_INT 0
41449: PUSH
41450: EMPTY
41451: LIST
41452: LIST
41453: PUSH
41454: LD_INT 2
41456: PUSH
41457: LD_INT 1
41459: PUSH
41460: EMPTY
41461: LIST
41462: LIST
41463: PUSH
41464: LD_INT 2
41466: PUSH
41467: LD_INT 2
41469: PUSH
41470: EMPTY
41471: LIST
41472: LIST
41473: PUSH
41474: LD_INT 1
41476: PUSH
41477: LD_INT 2
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: PUSH
41484: LD_INT 0
41486: PUSH
41487: LD_INT 2
41489: PUSH
41490: EMPTY
41491: LIST
41492: LIST
41493: PUSH
41494: LD_INT 1
41496: NEG
41497: PUSH
41498: LD_INT 1
41500: PUSH
41501: EMPTY
41502: LIST
41503: LIST
41504: PUSH
41505: LD_INT 2
41507: NEG
41508: PUSH
41509: LD_INT 0
41511: PUSH
41512: EMPTY
41513: LIST
41514: LIST
41515: PUSH
41516: LD_INT 2
41518: NEG
41519: PUSH
41520: LD_INT 1
41522: NEG
41523: PUSH
41524: EMPTY
41525: LIST
41526: LIST
41527: PUSH
41528: LD_INT 2
41530: NEG
41531: PUSH
41532: LD_INT 2
41534: NEG
41535: PUSH
41536: EMPTY
41537: LIST
41538: LIST
41539: PUSH
41540: EMPTY
41541: LIST
41542: LIST
41543: LIST
41544: LIST
41545: LIST
41546: LIST
41547: LIST
41548: LIST
41549: LIST
41550: LIST
41551: LIST
41552: LIST
41553: LIST
41554: LIST
41555: LIST
41556: LIST
41557: LIST
41558: LIST
41559: LIST
41560: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41561: LD_ADDR_VAR 0 22
41565: PUSH
41566: LD_INT 0
41568: PUSH
41569: LD_INT 0
41571: PUSH
41572: EMPTY
41573: LIST
41574: LIST
41575: PUSH
41576: LD_INT 0
41578: PUSH
41579: LD_INT 1
41581: NEG
41582: PUSH
41583: EMPTY
41584: LIST
41585: LIST
41586: PUSH
41587: LD_INT 1
41589: PUSH
41590: LD_INT 0
41592: PUSH
41593: EMPTY
41594: LIST
41595: LIST
41596: PUSH
41597: LD_INT 1
41599: PUSH
41600: LD_INT 1
41602: PUSH
41603: EMPTY
41604: LIST
41605: LIST
41606: PUSH
41607: LD_INT 0
41609: PUSH
41610: LD_INT 1
41612: PUSH
41613: EMPTY
41614: LIST
41615: LIST
41616: PUSH
41617: LD_INT 1
41619: NEG
41620: PUSH
41621: LD_INT 0
41623: PUSH
41624: EMPTY
41625: LIST
41626: LIST
41627: PUSH
41628: LD_INT 1
41630: NEG
41631: PUSH
41632: LD_INT 1
41634: NEG
41635: PUSH
41636: EMPTY
41637: LIST
41638: LIST
41639: PUSH
41640: LD_INT 1
41642: NEG
41643: PUSH
41644: LD_INT 2
41646: NEG
41647: PUSH
41648: EMPTY
41649: LIST
41650: LIST
41651: PUSH
41652: LD_INT 0
41654: PUSH
41655: LD_INT 2
41657: NEG
41658: PUSH
41659: EMPTY
41660: LIST
41661: LIST
41662: PUSH
41663: LD_INT 1
41665: PUSH
41666: LD_INT 1
41668: NEG
41669: PUSH
41670: EMPTY
41671: LIST
41672: LIST
41673: PUSH
41674: LD_INT 2
41676: PUSH
41677: LD_INT 0
41679: PUSH
41680: EMPTY
41681: LIST
41682: LIST
41683: PUSH
41684: LD_INT 2
41686: PUSH
41687: LD_INT 1
41689: PUSH
41690: EMPTY
41691: LIST
41692: LIST
41693: PUSH
41694: LD_INT 2
41696: PUSH
41697: LD_INT 2
41699: PUSH
41700: EMPTY
41701: LIST
41702: LIST
41703: PUSH
41704: LD_INT 1
41706: PUSH
41707: LD_INT 2
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: PUSH
41714: LD_INT 0
41716: PUSH
41717: LD_INT 2
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: LD_INT 1
41726: NEG
41727: PUSH
41728: LD_INT 1
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: PUSH
41735: LD_INT 2
41737: NEG
41738: PUSH
41739: LD_INT 0
41741: PUSH
41742: EMPTY
41743: LIST
41744: LIST
41745: PUSH
41746: LD_INT 2
41748: NEG
41749: PUSH
41750: LD_INT 1
41752: NEG
41753: PUSH
41754: EMPTY
41755: LIST
41756: LIST
41757: PUSH
41758: LD_INT 2
41760: NEG
41761: PUSH
41762: LD_INT 2
41764: NEG
41765: PUSH
41766: EMPTY
41767: LIST
41768: LIST
41769: PUSH
41770: EMPTY
41771: LIST
41772: LIST
41773: LIST
41774: LIST
41775: LIST
41776: LIST
41777: LIST
41778: LIST
41779: LIST
41780: LIST
41781: LIST
41782: LIST
41783: LIST
41784: LIST
41785: LIST
41786: LIST
41787: LIST
41788: LIST
41789: LIST
41790: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
41791: LD_ADDR_VAR 0 23
41795: PUSH
41796: LD_INT 0
41798: PUSH
41799: LD_INT 0
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: PUSH
41806: LD_INT 0
41808: PUSH
41809: LD_INT 1
41811: NEG
41812: PUSH
41813: EMPTY
41814: LIST
41815: LIST
41816: PUSH
41817: LD_INT 1
41819: PUSH
41820: LD_INT 0
41822: PUSH
41823: EMPTY
41824: LIST
41825: LIST
41826: PUSH
41827: LD_INT 1
41829: PUSH
41830: LD_INT 1
41832: PUSH
41833: EMPTY
41834: LIST
41835: LIST
41836: PUSH
41837: LD_INT 0
41839: PUSH
41840: LD_INT 1
41842: PUSH
41843: EMPTY
41844: LIST
41845: LIST
41846: PUSH
41847: LD_INT 1
41849: NEG
41850: PUSH
41851: LD_INT 0
41853: PUSH
41854: EMPTY
41855: LIST
41856: LIST
41857: PUSH
41858: LD_INT 1
41860: NEG
41861: PUSH
41862: LD_INT 1
41864: NEG
41865: PUSH
41866: EMPTY
41867: LIST
41868: LIST
41869: PUSH
41870: LD_INT 1
41872: NEG
41873: PUSH
41874: LD_INT 2
41876: NEG
41877: PUSH
41878: EMPTY
41879: LIST
41880: LIST
41881: PUSH
41882: LD_INT 0
41884: PUSH
41885: LD_INT 2
41887: NEG
41888: PUSH
41889: EMPTY
41890: LIST
41891: LIST
41892: PUSH
41893: LD_INT 1
41895: PUSH
41896: LD_INT 1
41898: NEG
41899: PUSH
41900: EMPTY
41901: LIST
41902: LIST
41903: PUSH
41904: LD_INT 2
41906: PUSH
41907: LD_INT 0
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: PUSH
41914: LD_INT 2
41916: PUSH
41917: LD_INT 1
41919: PUSH
41920: EMPTY
41921: LIST
41922: LIST
41923: PUSH
41924: LD_INT 2
41926: PUSH
41927: LD_INT 2
41929: PUSH
41930: EMPTY
41931: LIST
41932: LIST
41933: PUSH
41934: LD_INT 1
41936: PUSH
41937: LD_INT 2
41939: PUSH
41940: EMPTY
41941: LIST
41942: LIST
41943: PUSH
41944: LD_INT 0
41946: PUSH
41947: LD_INT 2
41949: PUSH
41950: EMPTY
41951: LIST
41952: LIST
41953: PUSH
41954: LD_INT 1
41956: NEG
41957: PUSH
41958: LD_INT 1
41960: PUSH
41961: EMPTY
41962: LIST
41963: LIST
41964: PUSH
41965: LD_INT 2
41967: NEG
41968: PUSH
41969: LD_INT 0
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: PUSH
41976: LD_INT 2
41978: NEG
41979: PUSH
41980: LD_INT 1
41982: NEG
41983: PUSH
41984: EMPTY
41985: LIST
41986: LIST
41987: PUSH
41988: LD_INT 2
41990: NEG
41991: PUSH
41992: LD_INT 2
41994: NEG
41995: PUSH
41996: EMPTY
41997: LIST
41998: LIST
41999: PUSH
42000: LD_INT 2
42002: NEG
42003: PUSH
42004: LD_INT 3
42006: NEG
42007: PUSH
42008: EMPTY
42009: LIST
42010: LIST
42011: PUSH
42012: LD_INT 1
42014: NEG
42015: PUSH
42016: LD_INT 3
42018: NEG
42019: PUSH
42020: EMPTY
42021: LIST
42022: LIST
42023: PUSH
42024: LD_INT 1
42026: PUSH
42027: LD_INT 2
42029: NEG
42030: PUSH
42031: EMPTY
42032: LIST
42033: LIST
42034: PUSH
42035: LD_INT 2
42037: PUSH
42038: LD_INT 1
42040: NEG
42041: PUSH
42042: EMPTY
42043: LIST
42044: LIST
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: LIST
42050: LIST
42051: LIST
42052: LIST
42053: LIST
42054: LIST
42055: LIST
42056: LIST
42057: LIST
42058: LIST
42059: LIST
42060: LIST
42061: LIST
42062: LIST
42063: LIST
42064: LIST
42065: LIST
42066: LIST
42067: LIST
42068: LIST
42069: LIST
42070: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
42071: LD_ADDR_VAR 0 24
42075: PUSH
42076: LD_INT 0
42078: PUSH
42079: LD_INT 0
42081: PUSH
42082: EMPTY
42083: LIST
42084: LIST
42085: PUSH
42086: LD_INT 0
42088: PUSH
42089: LD_INT 1
42091: NEG
42092: PUSH
42093: EMPTY
42094: LIST
42095: LIST
42096: PUSH
42097: LD_INT 1
42099: PUSH
42100: LD_INT 0
42102: PUSH
42103: EMPTY
42104: LIST
42105: LIST
42106: PUSH
42107: LD_INT 1
42109: PUSH
42110: LD_INT 1
42112: PUSH
42113: EMPTY
42114: LIST
42115: LIST
42116: PUSH
42117: LD_INT 0
42119: PUSH
42120: LD_INT 1
42122: PUSH
42123: EMPTY
42124: LIST
42125: LIST
42126: PUSH
42127: LD_INT 1
42129: NEG
42130: PUSH
42131: LD_INT 0
42133: PUSH
42134: EMPTY
42135: LIST
42136: LIST
42137: PUSH
42138: LD_INT 1
42140: NEG
42141: PUSH
42142: LD_INT 1
42144: NEG
42145: PUSH
42146: EMPTY
42147: LIST
42148: LIST
42149: PUSH
42150: LD_INT 1
42152: NEG
42153: PUSH
42154: LD_INT 2
42156: NEG
42157: PUSH
42158: EMPTY
42159: LIST
42160: LIST
42161: PUSH
42162: LD_INT 0
42164: PUSH
42165: LD_INT 2
42167: NEG
42168: PUSH
42169: EMPTY
42170: LIST
42171: LIST
42172: PUSH
42173: LD_INT 1
42175: PUSH
42176: LD_INT 1
42178: NEG
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: PUSH
42184: LD_INT 2
42186: PUSH
42187: LD_INT 0
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: PUSH
42194: LD_INT 2
42196: PUSH
42197: LD_INT 1
42199: PUSH
42200: EMPTY
42201: LIST
42202: LIST
42203: PUSH
42204: LD_INT 2
42206: PUSH
42207: LD_INT 2
42209: PUSH
42210: EMPTY
42211: LIST
42212: LIST
42213: PUSH
42214: LD_INT 1
42216: PUSH
42217: LD_INT 2
42219: PUSH
42220: EMPTY
42221: LIST
42222: LIST
42223: PUSH
42224: LD_INT 0
42226: PUSH
42227: LD_INT 2
42229: PUSH
42230: EMPTY
42231: LIST
42232: LIST
42233: PUSH
42234: LD_INT 1
42236: NEG
42237: PUSH
42238: LD_INT 1
42240: PUSH
42241: EMPTY
42242: LIST
42243: LIST
42244: PUSH
42245: LD_INT 2
42247: NEG
42248: PUSH
42249: LD_INT 0
42251: PUSH
42252: EMPTY
42253: LIST
42254: LIST
42255: PUSH
42256: LD_INT 2
42258: NEG
42259: PUSH
42260: LD_INT 1
42262: NEG
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: PUSH
42268: LD_INT 2
42270: NEG
42271: PUSH
42272: LD_INT 2
42274: NEG
42275: PUSH
42276: EMPTY
42277: LIST
42278: LIST
42279: PUSH
42280: LD_INT 1
42282: PUSH
42283: LD_INT 2
42285: NEG
42286: PUSH
42287: EMPTY
42288: LIST
42289: LIST
42290: PUSH
42291: LD_INT 2
42293: PUSH
42294: LD_INT 1
42296: NEG
42297: PUSH
42298: EMPTY
42299: LIST
42300: LIST
42301: PUSH
42302: LD_INT 3
42304: PUSH
42305: LD_INT 1
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: PUSH
42312: LD_INT 3
42314: PUSH
42315: LD_INT 2
42317: PUSH
42318: EMPTY
42319: LIST
42320: LIST
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: LIST
42326: LIST
42327: LIST
42328: LIST
42329: LIST
42330: LIST
42331: LIST
42332: LIST
42333: LIST
42334: LIST
42335: LIST
42336: LIST
42337: LIST
42338: LIST
42339: LIST
42340: LIST
42341: LIST
42342: LIST
42343: LIST
42344: LIST
42345: LIST
42346: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
42347: LD_ADDR_VAR 0 25
42351: PUSH
42352: LD_INT 0
42354: PUSH
42355: LD_INT 0
42357: PUSH
42358: EMPTY
42359: LIST
42360: LIST
42361: PUSH
42362: LD_INT 0
42364: PUSH
42365: LD_INT 1
42367: NEG
42368: PUSH
42369: EMPTY
42370: LIST
42371: LIST
42372: PUSH
42373: LD_INT 1
42375: PUSH
42376: LD_INT 0
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: PUSH
42383: LD_INT 1
42385: PUSH
42386: LD_INT 1
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: PUSH
42393: LD_INT 0
42395: PUSH
42396: LD_INT 1
42398: PUSH
42399: EMPTY
42400: LIST
42401: LIST
42402: PUSH
42403: LD_INT 1
42405: NEG
42406: PUSH
42407: LD_INT 0
42409: PUSH
42410: EMPTY
42411: LIST
42412: LIST
42413: PUSH
42414: LD_INT 1
42416: NEG
42417: PUSH
42418: LD_INT 1
42420: NEG
42421: PUSH
42422: EMPTY
42423: LIST
42424: LIST
42425: PUSH
42426: LD_INT 1
42428: NEG
42429: PUSH
42430: LD_INT 2
42432: NEG
42433: PUSH
42434: EMPTY
42435: LIST
42436: LIST
42437: PUSH
42438: LD_INT 0
42440: PUSH
42441: LD_INT 2
42443: NEG
42444: PUSH
42445: EMPTY
42446: LIST
42447: LIST
42448: PUSH
42449: LD_INT 1
42451: PUSH
42452: LD_INT 1
42454: NEG
42455: PUSH
42456: EMPTY
42457: LIST
42458: LIST
42459: PUSH
42460: LD_INT 2
42462: PUSH
42463: LD_INT 0
42465: PUSH
42466: EMPTY
42467: LIST
42468: LIST
42469: PUSH
42470: LD_INT 2
42472: PUSH
42473: LD_INT 1
42475: PUSH
42476: EMPTY
42477: LIST
42478: LIST
42479: PUSH
42480: LD_INT 2
42482: PUSH
42483: LD_INT 2
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: PUSH
42490: LD_INT 1
42492: PUSH
42493: LD_INT 2
42495: PUSH
42496: EMPTY
42497: LIST
42498: LIST
42499: PUSH
42500: LD_INT 0
42502: PUSH
42503: LD_INT 2
42505: PUSH
42506: EMPTY
42507: LIST
42508: LIST
42509: PUSH
42510: LD_INT 1
42512: NEG
42513: PUSH
42514: LD_INT 1
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: PUSH
42521: LD_INT 2
42523: NEG
42524: PUSH
42525: LD_INT 0
42527: PUSH
42528: EMPTY
42529: LIST
42530: LIST
42531: PUSH
42532: LD_INT 2
42534: NEG
42535: PUSH
42536: LD_INT 1
42538: NEG
42539: PUSH
42540: EMPTY
42541: LIST
42542: LIST
42543: PUSH
42544: LD_INT 2
42546: NEG
42547: PUSH
42548: LD_INT 2
42550: NEG
42551: PUSH
42552: EMPTY
42553: LIST
42554: LIST
42555: PUSH
42556: LD_INT 3
42558: PUSH
42559: LD_INT 1
42561: PUSH
42562: EMPTY
42563: LIST
42564: LIST
42565: PUSH
42566: LD_INT 3
42568: PUSH
42569: LD_INT 2
42571: PUSH
42572: EMPTY
42573: LIST
42574: LIST
42575: PUSH
42576: LD_INT 2
42578: PUSH
42579: LD_INT 3
42581: PUSH
42582: EMPTY
42583: LIST
42584: LIST
42585: PUSH
42586: LD_INT 1
42588: PUSH
42589: LD_INT 3
42591: PUSH
42592: EMPTY
42593: LIST
42594: LIST
42595: PUSH
42596: EMPTY
42597: LIST
42598: LIST
42599: LIST
42600: LIST
42601: LIST
42602: LIST
42603: LIST
42604: LIST
42605: LIST
42606: LIST
42607: LIST
42608: LIST
42609: LIST
42610: LIST
42611: LIST
42612: LIST
42613: LIST
42614: LIST
42615: LIST
42616: LIST
42617: LIST
42618: LIST
42619: LIST
42620: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
42621: LD_ADDR_VAR 0 26
42625: PUSH
42626: LD_INT 0
42628: PUSH
42629: LD_INT 0
42631: PUSH
42632: EMPTY
42633: LIST
42634: LIST
42635: PUSH
42636: LD_INT 0
42638: PUSH
42639: LD_INT 1
42641: NEG
42642: PUSH
42643: EMPTY
42644: LIST
42645: LIST
42646: PUSH
42647: LD_INT 1
42649: PUSH
42650: LD_INT 0
42652: PUSH
42653: EMPTY
42654: LIST
42655: LIST
42656: PUSH
42657: LD_INT 1
42659: PUSH
42660: LD_INT 1
42662: PUSH
42663: EMPTY
42664: LIST
42665: LIST
42666: PUSH
42667: LD_INT 0
42669: PUSH
42670: LD_INT 1
42672: PUSH
42673: EMPTY
42674: LIST
42675: LIST
42676: PUSH
42677: LD_INT 1
42679: NEG
42680: PUSH
42681: LD_INT 0
42683: PUSH
42684: EMPTY
42685: LIST
42686: LIST
42687: PUSH
42688: LD_INT 1
42690: NEG
42691: PUSH
42692: LD_INT 1
42694: NEG
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: PUSH
42700: LD_INT 1
42702: NEG
42703: PUSH
42704: LD_INT 2
42706: NEG
42707: PUSH
42708: EMPTY
42709: LIST
42710: LIST
42711: PUSH
42712: LD_INT 0
42714: PUSH
42715: LD_INT 2
42717: NEG
42718: PUSH
42719: EMPTY
42720: LIST
42721: LIST
42722: PUSH
42723: LD_INT 1
42725: PUSH
42726: LD_INT 1
42728: NEG
42729: PUSH
42730: EMPTY
42731: LIST
42732: LIST
42733: PUSH
42734: LD_INT 2
42736: PUSH
42737: LD_INT 0
42739: PUSH
42740: EMPTY
42741: LIST
42742: LIST
42743: PUSH
42744: LD_INT 2
42746: PUSH
42747: LD_INT 1
42749: PUSH
42750: EMPTY
42751: LIST
42752: LIST
42753: PUSH
42754: LD_INT 2
42756: PUSH
42757: LD_INT 2
42759: PUSH
42760: EMPTY
42761: LIST
42762: LIST
42763: PUSH
42764: LD_INT 1
42766: PUSH
42767: LD_INT 2
42769: PUSH
42770: EMPTY
42771: LIST
42772: LIST
42773: PUSH
42774: LD_INT 0
42776: PUSH
42777: LD_INT 2
42779: PUSH
42780: EMPTY
42781: LIST
42782: LIST
42783: PUSH
42784: LD_INT 1
42786: NEG
42787: PUSH
42788: LD_INT 1
42790: PUSH
42791: EMPTY
42792: LIST
42793: LIST
42794: PUSH
42795: LD_INT 2
42797: NEG
42798: PUSH
42799: LD_INT 0
42801: PUSH
42802: EMPTY
42803: LIST
42804: LIST
42805: PUSH
42806: LD_INT 2
42808: NEG
42809: PUSH
42810: LD_INT 1
42812: NEG
42813: PUSH
42814: EMPTY
42815: LIST
42816: LIST
42817: PUSH
42818: LD_INT 2
42820: NEG
42821: PUSH
42822: LD_INT 2
42824: NEG
42825: PUSH
42826: EMPTY
42827: LIST
42828: LIST
42829: PUSH
42830: LD_INT 2
42832: PUSH
42833: LD_INT 3
42835: PUSH
42836: EMPTY
42837: LIST
42838: LIST
42839: PUSH
42840: LD_INT 1
42842: PUSH
42843: LD_INT 3
42845: PUSH
42846: EMPTY
42847: LIST
42848: LIST
42849: PUSH
42850: LD_INT 1
42852: NEG
42853: PUSH
42854: LD_INT 2
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: PUSH
42861: LD_INT 2
42863: NEG
42864: PUSH
42865: LD_INT 1
42867: PUSH
42868: EMPTY
42869: LIST
42870: LIST
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: LIST
42876: LIST
42877: LIST
42878: LIST
42879: LIST
42880: LIST
42881: LIST
42882: LIST
42883: LIST
42884: LIST
42885: LIST
42886: LIST
42887: LIST
42888: LIST
42889: LIST
42890: LIST
42891: LIST
42892: LIST
42893: LIST
42894: LIST
42895: LIST
42896: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42897: LD_ADDR_VAR 0 27
42901: PUSH
42902: LD_INT 0
42904: PUSH
42905: LD_INT 0
42907: PUSH
42908: EMPTY
42909: LIST
42910: LIST
42911: PUSH
42912: LD_INT 0
42914: PUSH
42915: LD_INT 1
42917: NEG
42918: PUSH
42919: EMPTY
42920: LIST
42921: LIST
42922: PUSH
42923: LD_INT 1
42925: PUSH
42926: LD_INT 0
42928: PUSH
42929: EMPTY
42930: LIST
42931: LIST
42932: PUSH
42933: LD_INT 1
42935: PUSH
42936: LD_INT 1
42938: PUSH
42939: EMPTY
42940: LIST
42941: LIST
42942: PUSH
42943: LD_INT 0
42945: PUSH
42946: LD_INT 1
42948: PUSH
42949: EMPTY
42950: LIST
42951: LIST
42952: PUSH
42953: LD_INT 1
42955: NEG
42956: PUSH
42957: LD_INT 0
42959: PUSH
42960: EMPTY
42961: LIST
42962: LIST
42963: PUSH
42964: LD_INT 1
42966: NEG
42967: PUSH
42968: LD_INT 1
42970: NEG
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: PUSH
42976: LD_INT 1
42978: NEG
42979: PUSH
42980: LD_INT 2
42982: NEG
42983: PUSH
42984: EMPTY
42985: LIST
42986: LIST
42987: PUSH
42988: LD_INT 0
42990: PUSH
42991: LD_INT 2
42993: NEG
42994: PUSH
42995: EMPTY
42996: LIST
42997: LIST
42998: PUSH
42999: LD_INT 1
43001: PUSH
43002: LD_INT 1
43004: NEG
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: PUSH
43010: LD_INT 2
43012: PUSH
43013: LD_INT 0
43015: PUSH
43016: EMPTY
43017: LIST
43018: LIST
43019: PUSH
43020: LD_INT 2
43022: PUSH
43023: LD_INT 1
43025: PUSH
43026: EMPTY
43027: LIST
43028: LIST
43029: PUSH
43030: LD_INT 2
43032: PUSH
43033: LD_INT 2
43035: PUSH
43036: EMPTY
43037: LIST
43038: LIST
43039: PUSH
43040: LD_INT 1
43042: PUSH
43043: LD_INT 2
43045: PUSH
43046: EMPTY
43047: LIST
43048: LIST
43049: PUSH
43050: LD_INT 0
43052: PUSH
43053: LD_INT 2
43055: PUSH
43056: EMPTY
43057: LIST
43058: LIST
43059: PUSH
43060: LD_INT 1
43062: NEG
43063: PUSH
43064: LD_INT 1
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: PUSH
43071: LD_INT 2
43073: NEG
43074: PUSH
43075: LD_INT 0
43077: PUSH
43078: EMPTY
43079: LIST
43080: LIST
43081: PUSH
43082: LD_INT 2
43084: NEG
43085: PUSH
43086: LD_INT 1
43088: NEG
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: PUSH
43094: LD_INT 2
43096: NEG
43097: PUSH
43098: LD_INT 2
43100: NEG
43101: PUSH
43102: EMPTY
43103: LIST
43104: LIST
43105: PUSH
43106: LD_INT 1
43108: NEG
43109: PUSH
43110: LD_INT 2
43112: PUSH
43113: EMPTY
43114: LIST
43115: LIST
43116: PUSH
43117: LD_INT 2
43119: NEG
43120: PUSH
43121: LD_INT 1
43123: PUSH
43124: EMPTY
43125: LIST
43126: LIST
43127: PUSH
43128: LD_INT 3
43130: NEG
43131: PUSH
43132: LD_INT 1
43134: NEG
43135: PUSH
43136: EMPTY
43137: LIST
43138: LIST
43139: PUSH
43140: LD_INT 3
43142: NEG
43143: PUSH
43144: LD_INT 2
43146: NEG
43147: PUSH
43148: EMPTY
43149: LIST
43150: LIST
43151: PUSH
43152: EMPTY
43153: LIST
43154: LIST
43155: LIST
43156: LIST
43157: LIST
43158: LIST
43159: LIST
43160: LIST
43161: LIST
43162: LIST
43163: LIST
43164: LIST
43165: LIST
43166: LIST
43167: LIST
43168: LIST
43169: LIST
43170: LIST
43171: LIST
43172: LIST
43173: LIST
43174: LIST
43175: LIST
43176: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43177: LD_ADDR_VAR 0 28
43181: PUSH
43182: LD_INT 0
43184: PUSH
43185: LD_INT 0
43187: PUSH
43188: EMPTY
43189: LIST
43190: LIST
43191: PUSH
43192: LD_INT 0
43194: PUSH
43195: LD_INT 1
43197: NEG
43198: PUSH
43199: EMPTY
43200: LIST
43201: LIST
43202: PUSH
43203: LD_INT 1
43205: PUSH
43206: LD_INT 0
43208: PUSH
43209: EMPTY
43210: LIST
43211: LIST
43212: PUSH
43213: LD_INT 1
43215: PUSH
43216: LD_INT 1
43218: PUSH
43219: EMPTY
43220: LIST
43221: LIST
43222: PUSH
43223: LD_INT 0
43225: PUSH
43226: LD_INT 1
43228: PUSH
43229: EMPTY
43230: LIST
43231: LIST
43232: PUSH
43233: LD_INT 1
43235: NEG
43236: PUSH
43237: LD_INT 0
43239: PUSH
43240: EMPTY
43241: LIST
43242: LIST
43243: PUSH
43244: LD_INT 1
43246: NEG
43247: PUSH
43248: LD_INT 1
43250: NEG
43251: PUSH
43252: EMPTY
43253: LIST
43254: LIST
43255: PUSH
43256: LD_INT 1
43258: NEG
43259: PUSH
43260: LD_INT 2
43262: NEG
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: LD_INT 0
43270: PUSH
43271: LD_INT 2
43273: NEG
43274: PUSH
43275: EMPTY
43276: LIST
43277: LIST
43278: PUSH
43279: LD_INT 1
43281: PUSH
43282: LD_INT 1
43284: NEG
43285: PUSH
43286: EMPTY
43287: LIST
43288: LIST
43289: PUSH
43290: LD_INT 2
43292: PUSH
43293: LD_INT 0
43295: PUSH
43296: EMPTY
43297: LIST
43298: LIST
43299: PUSH
43300: LD_INT 2
43302: PUSH
43303: LD_INT 1
43305: PUSH
43306: EMPTY
43307: LIST
43308: LIST
43309: PUSH
43310: LD_INT 2
43312: PUSH
43313: LD_INT 2
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PUSH
43320: LD_INT 1
43322: PUSH
43323: LD_INT 2
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: PUSH
43330: LD_INT 0
43332: PUSH
43333: LD_INT 2
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: PUSH
43340: LD_INT 1
43342: NEG
43343: PUSH
43344: LD_INT 1
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: PUSH
43351: LD_INT 2
43353: NEG
43354: PUSH
43355: LD_INT 0
43357: PUSH
43358: EMPTY
43359: LIST
43360: LIST
43361: PUSH
43362: LD_INT 2
43364: NEG
43365: PUSH
43366: LD_INT 1
43368: NEG
43369: PUSH
43370: EMPTY
43371: LIST
43372: LIST
43373: PUSH
43374: LD_INT 2
43376: NEG
43377: PUSH
43378: LD_INT 2
43380: NEG
43381: PUSH
43382: EMPTY
43383: LIST
43384: LIST
43385: PUSH
43386: LD_INT 2
43388: NEG
43389: PUSH
43390: LD_INT 3
43392: NEG
43393: PUSH
43394: EMPTY
43395: LIST
43396: LIST
43397: PUSH
43398: LD_INT 1
43400: NEG
43401: PUSH
43402: LD_INT 3
43404: NEG
43405: PUSH
43406: EMPTY
43407: LIST
43408: LIST
43409: PUSH
43410: LD_INT 3
43412: NEG
43413: PUSH
43414: LD_INT 1
43416: NEG
43417: PUSH
43418: EMPTY
43419: LIST
43420: LIST
43421: PUSH
43422: LD_INT 3
43424: NEG
43425: PUSH
43426: LD_INT 2
43428: NEG
43429: PUSH
43430: EMPTY
43431: LIST
43432: LIST
43433: PUSH
43434: EMPTY
43435: LIST
43436: LIST
43437: LIST
43438: LIST
43439: LIST
43440: LIST
43441: LIST
43442: LIST
43443: LIST
43444: LIST
43445: LIST
43446: LIST
43447: LIST
43448: LIST
43449: LIST
43450: LIST
43451: LIST
43452: LIST
43453: LIST
43454: LIST
43455: LIST
43456: LIST
43457: LIST
43458: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43459: LD_ADDR_VAR 0 29
43463: PUSH
43464: LD_INT 0
43466: PUSH
43467: LD_INT 0
43469: PUSH
43470: EMPTY
43471: LIST
43472: LIST
43473: PUSH
43474: LD_INT 0
43476: PUSH
43477: LD_INT 1
43479: NEG
43480: PUSH
43481: EMPTY
43482: LIST
43483: LIST
43484: PUSH
43485: LD_INT 1
43487: PUSH
43488: LD_INT 0
43490: PUSH
43491: EMPTY
43492: LIST
43493: LIST
43494: PUSH
43495: LD_INT 1
43497: PUSH
43498: LD_INT 1
43500: PUSH
43501: EMPTY
43502: LIST
43503: LIST
43504: PUSH
43505: LD_INT 0
43507: PUSH
43508: LD_INT 1
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: PUSH
43515: LD_INT 1
43517: NEG
43518: PUSH
43519: LD_INT 0
43521: PUSH
43522: EMPTY
43523: LIST
43524: LIST
43525: PUSH
43526: LD_INT 1
43528: NEG
43529: PUSH
43530: LD_INT 1
43532: NEG
43533: PUSH
43534: EMPTY
43535: LIST
43536: LIST
43537: PUSH
43538: LD_INT 1
43540: NEG
43541: PUSH
43542: LD_INT 2
43544: NEG
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: PUSH
43550: LD_INT 0
43552: PUSH
43553: LD_INT 2
43555: NEG
43556: PUSH
43557: EMPTY
43558: LIST
43559: LIST
43560: PUSH
43561: LD_INT 1
43563: PUSH
43564: LD_INT 1
43566: NEG
43567: PUSH
43568: EMPTY
43569: LIST
43570: LIST
43571: PUSH
43572: LD_INT 2
43574: PUSH
43575: LD_INT 0
43577: PUSH
43578: EMPTY
43579: LIST
43580: LIST
43581: PUSH
43582: LD_INT 2
43584: PUSH
43585: LD_INT 1
43587: PUSH
43588: EMPTY
43589: LIST
43590: LIST
43591: PUSH
43592: LD_INT 1
43594: PUSH
43595: LD_INT 2
43597: PUSH
43598: EMPTY
43599: LIST
43600: LIST
43601: PUSH
43602: LD_INT 0
43604: PUSH
43605: LD_INT 2
43607: PUSH
43608: EMPTY
43609: LIST
43610: LIST
43611: PUSH
43612: LD_INT 1
43614: NEG
43615: PUSH
43616: LD_INT 1
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: PUSH
43623: LD_INT 2
43625: NEG
43626: PUSH
43627: LD_INT 1
43629: NEG
43630: PUSH
43631: EMPTY
43632: LIST
43633: LIST
43634: PUSH
43635: LD_INT 2
43637: NEG
43638: PUSH
43639: LD_INT 2
43641: NEG
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: PUSH
43647: LD_INT 2
43649: NEG
43650: PUSH
43651: LD_INT 3
43653: NEG
43654: PUSH
43655: EMPTY
43656: LIST
43657: LIST
43658: PUSH
43659: LD_INT 2
43661: PUSH
43662: LD_INT 1
43664: NEG
43665: PUSH
43666: EMPTY
43667: LIST
43668: LIST
43669: PUSH
43670: LD_INT 3
43672: PUSH
43673: LD_INT 1
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: PUSH
43680: LD_INT 1
43682: PUSH
43683: LD_INT 3
43685: PUSH
43686: EMPTY
43687: LIST
43688: LIST
43689: PUSH
43690: LD_INT 1
43692: NEG
43693: PUSH
43694: LD_INT 2
43696: PUSH
43697: EMPTY
43698: LIST
43699: LIST
43700: PUSH
43701: LD_INT 3
43703: NEG
43704: PUSH
43705: LD_INT 2
43707: NEG
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: PUSH
43713: EMPTY
43714: LIST
43715: LIST
43716: LIST
43717: LIST
43718: LIST
43719: LIST
43720: LIST
43721: LIST
43722: LIST
43723: LIST
43724: LIST
43725: LIST
43726: LIST
43727: LIST
43728: LIST
43729: LIST
43730: LIST
43731: LIST
43732: LIST
43733: LIST
43734: LIST
43735: LIST
43736: LIST
43737: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43738: LD_ADDR_VAR 0 30
43742: PUSH
43743: LD_INT 0
43745: PUSH
43746: LD_INT 0
43748: PUSH
43749: EMPTY
43750: LIST
43751: LIST
43752: PUSH
43753: LD_INT 0
43755: PUSH
43756: LD_INT 1
43758: NEG
43759: PUSH
43760: EMPTY
43761: LIST
43762: LIST
43763: PUSH
43764: LD_INT 1
43766: PUSH
43767: LD_INT 0
43769: PUSH
43770: EMPTY
43771: LIST
43772: LIST
43773: PUSH
43774: LD_INT 1
43776: PUSH
43777: LD_INT 1
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: PUSH
43784: LD_INT 0
43786: PUSH
43787: LD_INT 1
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: PUSH
43794: LD_INT 1
43796: NEG
43797: PUSH
43798: LD_INT 0
43800: PUSH
43801: EMPTY
43802: LIST
43803: LIST
43804: PUSH
43805: LD_INT 1
43807: NEG
43808: PUSH
43809: LD_INT 1
43811: NEG
43812: PUSH
43813: EMPTY
43814: LIST
43815: LIST
43816: PUSH
43817: LD_INT 1
43819: NEG
43820: PUSH
43821: LD_INT 2
43823: NEG
43824: PUSH
43825: EMPTY
43826: LIST
43827: LIST
43828: PUSH
43829: LD_INT 0
43831: PUSH
43832: LD_INT 2
43834: NEG
43835: PUSH
43836: EMPTY
43837: LIST
43838: LIST
43839: PUSH
43840: LD_INT 1
43842: PUSH
43843: LD_INT 1
43845: NEG
43846: PUSH
43847: EMPTY
43848: LIST
43849: LIST
43850: PUSH
43851: LD_INT 2
43853: PUSH
43854: LD_INT 0
43856: PUSH
43857: EMPTY
43858: LIST
43859: LIST
43860: PUSH
43861: LD_INT 2
43863: PUSH
43864: LD_INT 1
43866: PUSH
43867: EMPTY
43868: LIST
43869: LIST
43870: PUSH
43871: LD_INT 2
43873: PUSH
43874: LD_INT 2
43876: PUSH
43877: EMPTY
43878: LIST
43879: LIST
43880: PUSH
43881: LD_INT 1
43883: PUSH
43884: LD_INT 2
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: PUSH
43891: LD_INT 1
43893: NEG
43894: PUSH
43895: LD_INT 1
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: PUSH
43902: LD_INT 2
43904: NEG
43905: PUSH
43906: LD_INT 0
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: PUSH
43913: LD_INT 2
43915: NEG
43916: PUSH
43917: LD_INT 1
43919: NEG
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: PUSH
43925: LD_INT 1
43927: NEG
43928: PUSH
43929: LD_INT 3
43931: NEG
43932: PUSH
43933: EMPTY
43934: LIST
43935: LIST
43936: PUSH
43937: LD_INT 1
43939: PUSH
43940: LD_INT 2
43942: NEG
43943: PUSH
43944: EMPTY
43945: LIST
43946: LIST
43947: PUSH
43948: LD_INT 3
43950: PUSH
43951: LD_INT 2
43953: PUSH
43954: EMPTY
43955: LIST
43956: LIST
43957: PUSH
43958: LD_INT 2
43960: PUSH
43961: LD_INT 3
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: PUSH
43968: LD_INT 2
43970: NEG
43971: PUSH
43972: LD_INT 1
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 3
43981: NEG
43982: PUSH
43983: LD_INT 1
43985: NEG
43986: PUSH
43987: EMPTY
43988: LIST
43989: LIST
43990: PUSH
43991: EMPTY
43992: LIST
43993: LIST
43994: LIST
43995: LIST
43996: LIST
43997: LIST
43998: LIST
43999: LIST
44000: LIST
44001: LIST
44002: LIST
44003: LIST
44004: LIST
44005: LIST
44006: LIST
44007: LIST
44008: LIST
44009: LIST
44010: LIST
44011: LIST
44012: LIST
44013: LIST
44014: LIST
44015: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44016: LD_ADDR_VAR 0 31
44020: PUSH
44021: LD_INT 0
44023: PUSH
44024: LD_INT 0
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: PUSH
44031: LD_INT 0
44033: PUSH
44034: LD_INT 1
44036: NEG
44037: PUSH
44038: EMPTY
44039: LIST
44040: LIST
44041: PUSH
44042: LD_INT 1
44044: PUSH
44045: LD_INT 0
44047: PUSH
44048: EMPTY
44049: LIST
44050: LIST
44051: PUSH
44052: LD_INT 1
44054: PUSH
44055: LD_INT 1
44057: PUSH
44058: EMPTY
44059: LIST
44060: LIST
44061: PUSH
44062: LD_INT 0
44064: PUSH
44065: LD_INT 1
44067: PUSH
44068: EMPTY
44069: LIST
44070: LIST
44071: PUSH
44072: LD_INT 1
44074: NEG
44075: PUSH
44076: LD_INT 0
44078: PUSH
44079: EMPTY
44080: LIST
44081: LIST
44082: PUSH
44083: LD_INT 1
44085: NEG
44086: PUSH
44087: LD_INT 1
44089: NEG
44090: PUSH
44091: EMPTY
44092: LIST
44093: LIST
44094: PUSH
44095: LD_INT 1
44097: NEG
44098: PUSH
44099: LD_INT 2
44101: NEG
44102: PUSH
44103: EMPTY
44104: LIST
44105: LIST
44106: PUSH
44107: LD_INT 1
44109: PUSH
44110: LD_INT 1
44112: NEG
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: PUSH
44118: LD_INT 2
44120: PUSH
44121: LD_INT 0
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: PUSH
44128: LD_INT 2
44130: PUSH
44131: LD_INT 1
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: PUSH
44138: LD_INT 2
44140: PUSH
44141: LD_INT 2
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: PUSH
44148: LD_INT 1
44150: PUSH
44151: LD_INT 2
44153: PUSH
44154: EMPTY
44155: LIST
44156: LIST
44157: PUSH
44158: LD_INT 0
44160: PUSH
44161: LD_INT 2
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: PUSH
44168: LD_INT 1
44170: NEG
44171: PUSH
44172: LD_INT 1
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: PUSH
44179: LD_INT 2
44181: NEG
44182: PUSH
44183: LD_INT 1
44185: NEG
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: PUSH
44191: LD_INT 2
44193: NEG
44194: PUSH
44195: LD_INT 2
44197: NEG
44198: PUSH
44199: EMPTY
44200: LIST
44201: LIST
44202: PUSH
44203: LD_INT 2
44205: NEG
44206: PUSH
44207: LD_INT 3
44209: NEG
44210: PUSH
44211: EMPTY
44212: LIST
44213: LIST
44214: PUSH
44215: LD_INT 2
44217: PUSH
44218: LD_INT 1
44220: NEG
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: PUSH
44226: LD_INT 3
44228: PUSH
44229: LD_INT 1
44231: PUSH
44232: EMPTY
44233: LIST
44234: LIST
44235: PUSH
44236: LD_INT 1
44238: PUSH
44239: LD_INT 3
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: PUSH
44246: LD_INT 1
44248: NEG
44249: PUSH
44250: LD_INT 2
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: PUSH
44257: LD_INT 3
44259: NEG
44260: PUSH
44261: LD_INT 2
44263: NEG
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: PUSH
44269: EMPTY
44270: LIST
44271: LIST
44272: LIST
44273: LIST
44274: LIST
44275: LIST
44276: LIST
44277: LIST
44278: LIST
44279: LIST
44280: LIST
44281: LIST
44282: LIST
44283: LIST
44284: LIST
44285: LIST
44286: LIST
44287: LIST
44288: LIST
44289: LIST
44290: LIST
44291: LIST
44292: LIST
44293: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44294: LD_ADDR_VAR 0 32
44298: PUSH
44299: LD_INT 0
44301: PUSH
44302: LD_INT 0
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: PUSH
44309: LD_INT 0
44311: PUSH
44312: LD_INT 1
44314: NEG
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: LD_INT 1
44322: PUSH
44323: LD_INT 0
44325: PUSH
44326: EMPTY
44327: LIST
44328: LIST
44329: PUSH
44330: LD_INT 1
44332: PUSH
44333: LD_INT 1
44335: PUSH
44336: EMPTY
44337: LIST
44338: LIST
44339: PUSH
44340: LD_INT 0
44342: PUSH
44343: LD_INT 1
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: PUSH
44350: LD_INT 1
44352: NEG
44353: PUSH
44354: LD_INT 0
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: PUSH
44361: LD_INT 1
44363: NEG
44364: PUSH
44365: LD_INT 1
44367: NEG
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: PUSH
44373: LD_INT 1
44375: NEG
44376: PUSH
44377: LD_INT 2
44379: NEG
44380: PUSH
44381: EMPTY
44382: LIST
44383: LIST
44384: PUSH
44385: LD_INT 0
44387: PUSH
44388: LD_INT 2
44390: NEG
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: PUSH
44396: LD_INT 1
44398: PUSH
44399: LD_INT 1
44401: NEG
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: PUSH
44407: LD_INT 2
44409: PUSH
44410: LD_INT 1
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: PUSH
44417: LD_INT 2
44419: PUSH
44420: LD_INT 2
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: PUSH
44427: LD_INT 1
44429: PUSH
44430: LD_INT 2
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: LD_INT 0
44439: PUSH
44440: LD_INT 2
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: LD_INT 1
44449: NEG
44450: PUSH
44451: LD_INT 1
44453: PUSH
44454: EMPTY
44455: LIST
44456: LIST
44457: PUSH
44458: LD_INT 2
44460: NEG
44461: PUSH
44462: LD_INT 0
44464: PUSH
44465: EMPTY
44466: LIST
44467: LIST
44468: PUSH
44469: LD_INT 2
44471: NEG
44472: PUSH
44473: LD_INT 1
44475: NEG
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: PUSH
44481: LD_INT 1
44483: NEG
44484: PUSH
44485: LD_INT 3
44487: NEG
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: PUSH
44493: LD_INT 1
44495: PUSH
44496: LD_INT 2
44498: NEG
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: PUSH
44504: LD_INT 3
44506: PUSH
44507: LD_INT 2
44509: PUSH
44510: EMPTY
44511: LIST
44512: LIST
44513: PUSH
44514: LD_INT 2
44516: PUSH
44517: LD_INT 3
44519: PUSH
44520: EMPTY
44521: LIST
44522: LIST
44523: PUSH
44524: LD_INT 2
44526: NEG
44527: PUSH
44528: LD_INT 1
44530: PUSH
44531: EMPTY
44532: LIST
44533: LIST
44534: PUSH
44535: LD_INT 3
44537: NEG
44538: PUSH
44539: LD_INT 1
44541: NEG
44542: PUSH
44543: EMPTY
44544: LIST
44545: LIST
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: LIST
44551: LIST
44552: LIST
44553: LIST
44554: LIST
44555: LIST
44556: LIST
44557: LIST
44558: LIST
44559: LIST
44560: LIST
44561: LIST
44562: LIST
44563: LIST
44564: LIST
44565: LIST
44566: LIST
44567: LIST
44568: LIST
44569: LIST
44570: LIST
44571: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44572: LD_ADDR_VAR 0 33
44576: PUSH
44577: LD_INT 0
44579: PUSH
44580: LD_INT 0
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: PUSH
44587: LD_INT 0
44589: PUSH
44590: LD_INT 1
44592: NEG
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: PUSH
44598: LD_INT 1
44600: PUSH
44601: LD_INT 0
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: PUSH
44608: LD_INT 1
44610: PUSH
44611: LD_INT 1
44613: PUSH
44614: EMPTY
44615: LIST
44616: LIST
44617: PUSH
44618: LD_INT 0
44620: PUSH
44621: LD_INT 1
44623: PUSH
44624: EMPTY
44625: LIST
44626: LIST
44627: PUSH
44628: LD_INT 1
44630: NEG
44631: PUSH
44632: LD_INT 0
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: PUSH
44639: LD_INT 1
44641: NEG
44642: PUSH
44643: LD_INT 1
44645: NEG
44646: PUSH
44647: EMPTY
44648: LIST
44649: LIST
44650: PUSH
44651: LD_INT 1
44653: NEG
44654: PUSH
44655: LD_INT 2
44657: NEG
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: PUSH
44663: LD_INT 1
44665: PUSH
44666: LD_INT 1
44668: NEG
44669: PUSH
44670: EMPTY
44671: LIST
44672: LIST
44673: PUSH
44674: LD_INT 2
44676: PUSH
44677: LD_INT 0
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: PUSH
44684: LD_INT 2
44686: PUSH
44687: LD_INT 1
44689: PUSH
44690: EMPTY
44691: LIST
44692: LIST
44693: PUSH
44694: LD_INT 1
44696: PUSH
44697: LD_INT 2
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: PUSH
44704: LD_INT 0
44706: PUSH
44707: LD_INT 2
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: PUSH
44714: LD_INT 1
44716: NEG
44717: PUSH
44718: LD_INT 1
44720: PUSH
44721: EMPTY
44722: LIST
44723: LIST
44724: PUSH
44725: LD_INT 2
44727: NEG
44728: PUSH
44729: LD_INT 0
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: LD_INT 2
44738: NEG
44739: PUSH
44740: LD_INT 1
44742: NEG
44743: PUSH
44744: EMPTY
44745: LIST
44746: LIST
44747: PUSH
44748: LD_INT 2
44750: NEG
44751: PUSH
44752: LD_INT 2
44754: NEG
44755: PUSH
44756: EMPTY
44757: LIST
44758: LIST
44759: PUSH
44760: LD_INT 2
44762: NEG
44763: PUSH
44764: LD_INT 3
44766: NEG
44767: PUSH
44768: EMPTY
44769: LIST
44770: LIST
44771: PUSH
44772: LD_INT 2
44774: PUSH
44775: LD_INT 1
44777: NEG
44778: PUSH
44779: EMPTY
44780: LIST
44781: LIST
44782: PUSH
44783: LD_INT 3
44785: PUSH
44786: LD_INT 1
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: PUSH
44793: LD_INT 1
44795: PUSH
44796: LD_INT 3
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: PUSH
44803: LD_INT 1
44805: NEG
44806: PUSH
44807: LD_INT 2
44809: PUSH
44810: EMPTY
44811: LIST
44812: LIST
44813: PUSH
44814: LD_INT 3
44816: NEG
44817: PUSH
44818: LD_INT 2
44820: NEG
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: PUSH
44826: EMPTY
44827: LIST
44828: LIST
44829: LIST
44830: LIST
44831: LIST
44832: LIST
44833: LIST
44834: LIST
44835: LIST
44836: LIST
44837: LIST
44838: LIST
44839: LIST
44840: LIST
44841: LIST
44842: LIST
44843: LIST
44844: LIST
44845: LIST
44846: LIST
44847: LIST
44848: LIST
44849: LIST
44850: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44851: LD_ADDR_VAR 0 34
44855: PUSH
44856: LD_INT 0
44858: PUSH
44859: LD_INT 0
44861: PUSH
44862: EMPTY
44863: LIST
44864: LIST
44865: PUSH
44866: LD_INT 0
44868: PUSH
44869: LD_INT 1
44871: NEG
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: PUSH
44877: LD_INT 1
44879: PUSH
44880: LD_INT 0
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: PUSH
44887: LD_INT 1
44889: PUSH
44890: LD_INT 1
44892: PUSH
44893: EMPTY
44894: LIST
44895: LIST
44896: PUSH
44897: LD_INT 0
44899: PUSH
44900: LD_INT 1
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: PUSH
44907: LD_INT 1
44909: NEG
44910: PUSH
44911: LD_INT 0
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: PUSH
44918: LD_INT 1
44920: NEG
44921: PUSH
44922: LD_INT 1
44924: NEG
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: PUSH
44930: LD_INT 1
44932: NEG
44933: PUSH
44934: LD_INT 2
44936: NEG
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: PUSH
44942: LD_INT 0
44944: PUSH
44945: LD_INT 2
44947: NEG
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: PUSH
44953: LD_INT 1
44955: PUSH
44956: LD_INT 1
44958: NEG
44959: PUSH
44960: EMPTY
44961: LIST
44962: LIST
44963: PUSH
44964: LD_INT 2
44966: PUSH
44967: LD_INT 1
44969: PUSH
44970: EMPTY
44971: LIST
44972: LIST
44973: PUSH
44974: LD_INT 2
44976: PUSH
44977: LD_INT 2
44979: PUSH
44980: EMPTY
44981: LIST
44982: LIST
44983: PUSH
44984: LD_INT 1
44986: PUSH
44987: LD_INT 2
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: PUSH
44994: LD_INT 1
44996: NEG
44997: PUSH
44998: LD_INT 1
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: PUSH
45005: LD_INT 2
45007: NEG
45008: PUSH
45009: LD_INT 0
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: PUSH
45016: LD_INT 2
45018: NEG
45019: PUSH
45020: LD_INT 1
45022: NEG
45023: PUSH
45024: EMPTY
45025: LIST
45026: LIST
45027: PUSH
45028: LD_INT 2
45030: NEG
45031: PUSH
45032: LD_INT 2
45034: NEG
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: PUSH
45040: LD_INT 1
45042: NEG
45043: PUSH
45044: LD_INT 3
45046: NEG
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: LD_INT 1
45054: PUSH
45055: LD_INT 2
45057: NEG
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: PUSH
45063: LD_INT 3
45065: PUSH
45066: LD_INT 2
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: PUSH
45073: LD_INT 2
45075: PUSH
45076: LD_INT 3
45078: PUSH
45079: EMPTY
45080: LIST
45081: LIST
45082: PUSH
45083: LD_INT 2
45085: NEG
45086: PUSH
45087: LD_INT 1
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: PUSH
45094: LD_INT 3
45096: NEG
45097: PUSH
45098: LD_INT 1
45100: NEG
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: PUSH
45106: EMPTY
45107: LIST
45108: LIST
45109: LIST
45110: LIST
45111: LIST
45112: LIST
45113: LIST
45114: LIST
45115: LIST
45116: LIST
45117: LIST
45118: LIST
45119: LIST
45120: LIST
45121: LIST
45122: LIST
45123: LIST
45124: LIST
45125: LIST
45126: LIST
45127: LIST
45128: LIST
45129: LIST
45130: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45131: LD_ADDR_VAR 0 35
45135: PUSH
45136: LD_INT 0
45138: PUSH
45139: LD_INT 0
45141: PUSH
45142: EMPTY
45143: LIST
45144: LIST
45145: PUSH
45146: LD_INT 0
45148: PUSH
45149: LD_INT 1
45151: NEG
45152: PUSH
45153: EMPTY
45154: LIST
45155: LIST
45156: PUSH
45157: LD_INT 1
45159: PUSH
45160: LD_INT 0
45162: PUSH
45163: EMPTY
45164: LIST
45165: LIST
45166: PUSH
45167: LD_INT 1
45169: PUSH
45170: LD_INT 1
45172: PUSH
45173: EMPTY
45174: LIST
45175: LIST
45176: PUSH
45177: LD_INT 0
45179: PUSH
45180: LD_INT 1
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: PUSH
45187: LD_INT 1
45189: NEG
45190: PUSH
45191: LD_INT 0
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: PUSH
45198: LD_INT 1
45200: NEG
45201: PUSH
45202: LD_INT 1
45204: NEG
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: PUSH
45210: LD_INT 2
45212: PUSH
45213: LD_INT 1
45215: PUSH
45216: EMPTY
45217: LIST
45218: LIST
45219: PUSH
45220: LD_INT 2
45222: NEG
45223: PUSH
45224: LD_INT 1
45226: NEG
45227: PUSH
45228: EMPTY
45229: LIST
45230: LIST
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: LIST
45236: LIST
45237: LIST
45238: LIST
45239: LIST
45240: LIST
45241: LIST
45242: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45243: LD_ADDR_VAR 0 36
45247: PUSH
45248: LD_INT 0
45250: PUSH
45251: LD_INT 0
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PUSH
45258: LD_INT 0
45260: PUSH
45261: LD_INT 1
45263: NEG
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: PUSH
45269: LD_INT 1
45271: PUSH
45272: LD_INT 0
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: PUSH
45279: LD_INT 1
45281: PUSH
45282: LD_INT 1
45284: PUSH
45285: EMPTY
45286: LIST
45287: LIST
45288: PUSH
45289: LD_INT 0
45291: PUSH
45292: LD_INT 1
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: PUSH
45299: LD_INT 1
45301: NEG
45302: PUSH
45303: LD_INT 0
45305: PUSH
45306: EMPTY
45307: LIST
45308: LIST
45309: PUSH
45310: LD_INT 1
45312: NEG
45313: PUSH
45314: LD_INT 1
45316: NEG
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: PUSH
45322: LD_INT 1
45324: NEG
45325: PUSH
45326: LD_INT 2
45328: NEG
45329: PUSH
45330: EMPTY
45331: LIST
45332: LIST
45333: PUSH
45334: LD_INT 1
45336: PUSH
45337: LD_INT 2
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: LIST
45348: LIST
45349: LIST
45350: LIST
45351: LIST
45352: LIST
45353: LIST
45354: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45355: LD_ADDR_VAR 0 37
45359: PUSH
45360: LD_INT 0
45362: PUSH
45363: LD_INT 0
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: PUSH
45370: LD_INT 0
45372: PUSH
45373: LD_INT 1
45375: NEG
45376: PUSH
45377: EMPTY
45378: LIST
45379: LIST
45380: PUSH
45381: LD_INT 1
45383: PUSH
45384: LD_INT 0
45386: PUSH
45387: EMPTY
45388: LIST
45389: LIST
45390: PUSH
45391: LD_INT 1
45393: PUSH
45394: LD_INT 1
45396: PUSH
45397: EMPTY
45398: LIST
45399: LIST
45400: PUSH
45401: LD_INT 0
45403: PUSH
45404: LD_INT 1
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: PUSH
45411: LD_INT 1
45413: NEG
45414: PUSH
45415: LD_INT 0
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: PUSH
45422: LD_INT 1
45424: NEG
45425: PUSH
45426: LD_INT 1
45428: NEG
45429: PUSH
45430: EMPTY
45431: LIST
45432: LIST
45433: PUSH
45434: LD_INT 1
45436: PUSH
45437: LD_INT 1
45439: NEG
45440: PUSH
45441: EMPTY
45442: LIST
45443: LIST
45444: PUSH
45445: LD_INT 1
45447: NEG
45448: PUSH
45449: LD_INT 1
45451: PUSH
45452: EMPTY
45453: LIST
45454: LIST
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: LIST
45460: LIST
45461: LIST
45462: LIST
45463: LIST
45464: LIST
45465: LIST
45466: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45467: LD_ADDR_VAR 0 38
45471: PUSH
45472: LD_INT 0
45474: PUSH
45475: LD_INT 0
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: PUSH
45482: LD_INT 0
45484: PUSH
45485: LD_INT 1
45487: NEG
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: PUSH
45493: LD_INT 1
45495: PUSH
45496: LD_INT 0
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: PUSH
45503: LD_INT 1
45505: PUSH
45506: LD_INT 1
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: PUSH
45513: LD_INT 0
45515: PUSH
45516: LD_INT 1
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: PUSH
45523: LD_INT 1
45525: NEG
45526: PUSH
45527: LD_INT 0
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: PUSH
45534: LD_INT 1
45536: NEG
45537: PUSH
45538: LD_INT 1
45540: NEG
45541: PUSH
45542: EMPTY
45543: LIST
45544: LIST
45545: PUSH
45546: LD_INT 2
45548: PUSH
45549: LD_INT 1
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: PUSH
45556: LD_INT 2
45558: NEG
45559: PUSH
45560: LD_INT 1
45562: NEG
45563: PUSH
45564: EMPTY
45565: LIST
45566: LIST
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: LIST
45572: LIST
45573: LIST
45574: LIST
45575: LIST
45576: LIST
45577: LIST
45578: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45579: LD_ADDR_VAR 0 39
45583: PUSH
45584: LD_INT 0
45586: PUSH
45587: LD_INT 0
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: PUSH
45594: LD_INT 0
45596: PUSH
45597: LD_INT 1
45599: NEG
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: PUSH
45605: LD_INT 1
45607: PUSH
45608: LD_INT 0
45610: PUSH
45611: EMPTY
45612: LIST
45613: LIST
45614: PUSH
45615: LD_INT 1
45617: PUSH
45618: LD_INT 1
45620: PUSH
45621: EMPTY
45622: LIST
45623: LIST
45624: PUSH
45625: LD_INT 0
45627: PUSH
45628: LD_INT 1
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: PUSH
45635: LD_INT 1
45637: NEG
45638: PUSH
45639: LD_INT 0
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: LD_INT 1
45648: NEG
45649: PUSH
45650: LD_INT 1
45652: NEG
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: LD_INT 1
45660: NEG
45661: PUSH
45662: LD_INT 2
45664: NEG
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: PUSH
45670: LD_INT 1
45672: PUSH
45673: LD_INT 2
45675: PUSH
45676: EMPTY
45677: LIST
45678: LIST
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: LIST
45684: LIST
45685: LIST
45686: LIST
45687: LIST
45688: LIST
45689: LIST
45690: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45691: LD_ADDR_VAR 0 40
45695: PUSH
45696: LD_INT 0
45698: PUSH
45699: LD_INT 0
45701: PUSH
45702: EMPTY
45703: LIST
45704: LIST
45705: PUSH
45706: LD_INT 0
45708: PUSH
45709: LD_INT 1
45711: NEG
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: PUSH
45717: LD_INT 1
45719: PUSH
45720: LD_INT 0
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: LD_INT 1
45729: PUSH
45730: LD_INT 1
45732: PUSH
45733: EMPTY
45734: LIST
45735: LIST
45736: PUSH
45737: LD_INT 0
45739: PUSH
45740: LD_INT 1
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: LD_INT 1
45749: NEG
45750: PUSH
45751: LD_INT 0
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: LD_INT 1
45760: NEG
45761: PUSH
45762: LD_INT 1
45764: NEG
45765: PUSH
45766: EMPTY
45767: LIST
45768: LIST
45769: PUSH
45770: LD_INT 1
45772: PUSH
45773: LD_INT 1
45775: NEG
45776: PUSH
45777: EMPTY
45778: LIST
45779: LIST
45780: PUSH
45781: LD_INT 1
45783: NEG
45784: PUSH
45785: LD_INT 1
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: LIST
45796: LIST
45797: LIST
45798: LIST
45799: LIST
45800: LIST
45801: LIST
45802: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45803: LD_ADDR_VAR 0 41
45807: PUSH
45808: LD_INT 0
45810: PUSH
45811: LD_INT 0
45813: PUSH
45814: EMPTY
45815: LIST
45816: LIST
45817: PUSH
45818: LD_INT 0
45820: PUSH
45821: LD_INT 1
45823: NEG
45824: PUSH
45825: EMPTY
45826: LIST
45827: LIST
45828: PUSH
45829: LD_INT 1
45831: PUSH
45832: LD_INT 0
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: PUSH
45839: LD_INT 1
45841: PUSH
45842: LD_INT 1
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: PUSH
45849: LD_INT 0
45851: PUSH
45852: LD_INT 1
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: PUSH
45859: LD_INT 1
45861: NEG
45862: PUSH
45863: LD_INT 0
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: LD_INT 1
45872: NEG
45873: PUSH
45874: LD_INT 1
45876: NEG
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: LD_INT 1
45884: NEG
45885: PUSH
45886: LD_INT 2
45888: NEG
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: PUSH
45894: LD_INT 1
45896: PUSH
45897: LD_INT 1
45899: NEG
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: PUSH
45905: LD_INT 2
45907: PUSH
45908: LD_INT 0
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: LD_INT 2
45917: PUSH
45918: LD_INT 1
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: PUSH
45925: LD_INT 2
45927: PUSH
45928: LD_INT 2
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: PUSH
45935: LD_INT 1
45937: PUSH
45938: LD_INT 2
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: LD_INT 1
45947: NEG
45948: PUSH
45949: LD_INT 1
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: PUSH
45956: LD_INT 2
45958: NEG
45959: PUSH
45960: LD_INT 0
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: PUSH
45967: LD_INT 2
45969: NEG
45970: PUSH
45971: LD_INT 1
45973: NEG
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: PUSH
45979: LD_INT 2
45981: NEG
45982: PUSH
45983: LD_INT 2
45985: NEG
45986: PUSH
45987: EMPTY
45988: LIST
45989: LIST
45990: PUSH
45991: LD_INT 2
45993: NEG
45994: PUSH
45995: LD_INT 3
45997: NEG
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: LD_INT 2
46005: PUSH
46006: LD_INT 1
46008: NEG
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: PUSH
46014: LD_INT 3
46016: PUSH
46017: LD_INT 0
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: PUSH
46024: LD_INT 3
46026: PUSH
46027: LD_INT 1
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 3
46036: PUSH
46037: LD_INT 2
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 3
46046: PUSH
46047: LD_INT 3
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: PUSH
46054: LD_INT 2
46056: PUSH
46057: LD_INT 3
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: PUSH
46064: LD_INT 2
46066: NEG
46067: PUSH
46068: LD_INT 1
46070: PUSH
46071: EMPTY
46072: LIST
46073: LIST
46074: PUSH
46075: LD_INT 3
46077: NEG
46078: PUSH
46079: LD_INT 0
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 3
46088: NEG
46089: PUSH
46090: LD_INT 1
46092: NEG
46093: PUSH
46094: EMPTY
46095: LIST
46096: LIST
46097: PUSH
46098: LD_INT 3
46100: NEG
46101: PUSH
46102: LD_INT 2
46104: NEG
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: PUSH
46110: LD_INT 3
46112: NEG
46113: PUSH
46114: LD_INT 3
46116: NEG
46117: PUSH
46118: EMPTY
46119: LIST
46120: LIST
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: LIST
46126: LIST
46127: LIST
46128: LIST
46129: LIST
46130: LIST
46131: LIST
46132: LIST
46133: LIST
46134: LIST
46135: LIST
46136: LIST
46137: LIST
46138: LIST
46139: LIST
46140: LIST
46141: LIST
46142: LIST
46143: LIST
46144: LIST
46145: LIST
46146: LIST
46147: LIST
46148: LIST
46149: LIST
46150: LIST
46151: LIST
46152: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46153: LD_ADDR_VAR 0 42
46157: PUSH
46158: LD_INT 0
46160: PUSH
46161: LD_INT 0
46163: PUSH
46164: EMPTY
46165: LIST
46166: LIST
46167: PUSH
46168: LD_INT 0
46170: PUSH
46171: LD_INT 1
46173: NEG
46174: PUSH
46175: EMPTY
46176: LIST
46177: LIST
46178: PUSH
46179: LD_INT 1
46181: PUSH
46182: LD_INT 0
46184: PUSH
46185: EMPTY
46186: LIST
46187: LIST
46188: PUSH
46189: LD_INT 1
46191: PUSH
46192: LD_INT 1
46194: PUSH
46195: EMPTY
46196: LIST
46197: LIST
46198: PUSH
46199: LD_INT 0
46201: PUSH
46202: LD_INT 1
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: PUSH
46209: LD_INT 1
46211: NEG
46212: PUSH
46213: LD_INT 0
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: PUSH
46220: LD_INT 1
46222: NEG
46223: PUSH
46224: LD_INT 1
46226: NEG
46227: PUSH
46228: EMPTY
46229: LIST
46230: LIST
46231: PUSH
46232: LD_INT 1
46234: NEG
46235: PUSH
46236: LD_INT 2
46238: NEG
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: PUSH
46244: LD_INT 0
46246: PUSH
46247: LD_INT 2
46249: NEG
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: PUSH
46255: LD_INT 1
46257: PUSH
46258: LD_INT 1
46260: NEG
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: PUSH
46266: LD_INT 2
46268: PUSH
46269: LD_INT 1
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: PUSH
46276: LD_INT 2
46278: PUSH
46279: LD_INT 2
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: LD_INT 1
46288: PUSH
46289: LD_INT 2
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: PUSH
46296: LD_INT 0
46298: PUSH
46299: LD_INT 2
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 1
46308: NEG
46309: PUSH
46310: LD_INT 1
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: PUSH
46317: LD_INT 2
46319: NEG
46320: PUSH
46321: LD_INT 1
46323: NEG
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: PUSH
46329: LD_INT 2
46331: NEG
46332: PUSH
46333: LD_INT 2
46335: NEG
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: PUSH
46341: LD_INT 2
46343: NEG
46344: PUSH
46345: LD_INT 3
46347: NEG
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: PUSH
46353: LD_INT 1
46355: NEG
46356: PUSH
46357: LD_INT 3
46359: NEG
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: PUSH
46365: LD_INT 0
46367: PUSH
46368: LD_INT 3
46370: NEG
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: PUSH
46376: LD_INT 1
46378: PUSH
46379: LD_INT 2
46381: NEG
46382: PUSH
46383: EMPTY
46384: LIST
46385: LIST
46386: PUSH
46387: LD_INT 3
46389: PUSH
46390: LD_INT 2
46392: PUSH
46393: EMPTY
46394: LIST
46395: LIST
46396: PUSH
46397: LD_INT 3
46399: PUSH
46400: LD_INT 3
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: PUSH
46407: LD_INT 2
46409: PUSH
46410: LD_INT 3
46412: PUSH
46413: EMPTY
46414: LIST
46415: LIST
46416: PUSH
46417: LD_INT 1
46419: PUSH
46420: LD_INT 3
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: PUSH
46427: LD_INT 0
46429: PUSH
46430: LD_INT 3
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: LD_INT 1
46439: NEG
46440: PUSH
46441: LD_INT 2
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: PUSH
46448: LD_INT 3
46450: NEG
46451: PUSH
46452: LD_INT 2
46454: NEG
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: PUSH
46460: LD_INT 3
46462: NEG
46463: PUSH
46464: LD_INT 3
46466: NEG
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: LIST
46476: LIST
46477: LIST
46478: LIST
46479: LIST
46480: LIST
46481: LIST
46482: LIST
46483: LIST
46484: LIST
46485: LIST
46486: LIST
46487: LIST
46488: LIST
46489: LIST
46490: LIST
46491: LIST
46492: LIST
46493: LIST
46494: LIST
46495: LIST
46496: LIST
46497: LIST
46498: LIST
46499: LIST
46500: LIST
46501: LIST
46502: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46503: LD_ADDR_VAR 0 43
46507: PUSH
46508: LD_INT 0
46510: PUSH
46511: LD_INT 0
46513: PUSH
46514: EMPTY
46515: LIST
46516: LIST
46517: PUSH
46518: LD_INT 0
46520: PUSH
46521: LD_INT 1
46523: NEG
46524: PUSH
46525: EMPTY
46526: LIST
46527: LIST
46528: PUSH
46529: LD_INT 1
46531: PUSH
46532: LD_INT 0
46534: PUSH
46535: EMPTY
46536: LIST
46537: LIST
46538: PUSH
46539: LD_INT 1
46541: PUSH
46542: LD_INT 1
46544: PUSH
46545: EMPTY
46546: LIST
46547: LIST
46548: PUSH
46549: LD_INT 0
46551: PUSH
46552: LD_INT 1
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: PUSH
46559: LD_INT 1
46561: NEG
46562: PUSH
46563: LD_INT 0
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: PUSH
46570: LD_INT 1
46572: NEG
46573: PUSH
46574: LD_INT 1
46576: NEG
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: PUSH
46582: LD_INT 1
46584: NEG
46585: PUSH
46586: LD_INT 2
46588: NEG
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: PUSH
46594: LD_INT 0
46596: PUSH
46597: LD_INT 2
46599: NEG
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: PUSH
46605: LD_INT 1
46607: PUSH
46608: LD_INT 1
46610: NEG
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: PUSH
46616: LD_INT 2
46618: PUSH
46619: LD_INT 0
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: PUSH
46626: LD_INT 2
46628: PUSH
46629: LD_INT 1
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: PUSH
46636: LD_INT 1
46638: PUSH
46639: LD_INT 2
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: PUSH
46646: LD_INT 0
46648: PUSH
46649: LD_INT 2
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: PUSH
46656: LD_INT 1
46658: NEG
46659: PUSH
46660: LD_INT 1
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: PUSH
46667: LD_INT 2
46669: NEG
46670: PUSH
46671: LD_INT 0
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: LD_INT 2
46680: NEG
46681: PUSH
46682: LD_INT 1
46684: NEG
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: PUSH
46690: LD_INT 1
46692: NEG
46693: PUSH
46694: LD_INT 3
46696: NEG
46697: PUSH
46698: EMPTY
46699: LIST
46700: LIST
46701: PUSH
46702: LD_INT 0
46704: PUSH
46705: LD_INT 3
46707: NEG
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: PUSH
46713: LD_INT 1
46715: PUSH
46716: LD_INT 2
46718: NEG
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PUSH
46724: LD_INT 2
46726: PUSH
46727: LD_INT 1
46729: NEG
46730: PUSH
46731: EMPTY
46732: LIST
46733: LIST
46734: PUSH
46735: LD_INT 3
46737: PUSH
46738: LD_INT 0
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: PUSH
46745: LD_INT 3
46747: PUSH
46748: LD_INT 1
46750: PUSH
46751: EMPTY
46752: LIST
46753: LIST
46754: PUSH
46755: LD_INT 1
46757: PUSH
46758: LD_INT 3
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: PUSH
46765: LD_INT 0
46767: PUSH
46768: LD_INT 3
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: PUSH
46775: LD_INT 1
46777: NEG
46778: PUSH
46779: LD_INT 2
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 2
46788: NEG
46789: PUSH
46790: LD_INT 1
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: LD_INT 3
46799: NEG
46800: PUSH
46801: LD_INT 0
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: LD_INT 3
46810: NEG
46811: PUSH
46812: LD_INT 1
46814: NEG
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: LIST
46824: LIST
46825: LIST
46826: LIST
46827: LIST
46828: LIST
46829: LIST
46830: LIST
46831: LIST
46832: LIST
46833: LIST
46834: LIST
46835: LIST
46836: LIST
46837: LIST
46838: LIST
46839: LIST
46840: LIST
46841: LIST
46842: LIST
46843: LIST
46844: LIST
46845: LIST
46846: LIST
46847: LIST
46848: LIST
46849: LIST
46850: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46851: LD_ADDR_VAR 0 44
46855: PUSH
46856: LD_INT 0
46858: PUSH
46859: LD_INT 0
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: PUSH
46866: LD_INT 0
46868: PUSH
46869: LD_INT 1
46871: NEG
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: PUSH
46877: LD_INT 1
46879: PUSH
46880: LD_INT 0
46882: PUSH
46883: EMPTY
46884: LIST
46885: LIST
46886: PUSH
46887: LD_INT 1
46889: PUSH
46890: LD_INT 1
46892: PUSH
46893: EMPTY
46894: LIST
46895: LIST
46896: PUSH
46897: LD_INT 0
46899: PUSH
46900: LD_INT 1
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: PUSH
46907: LD_INT 1
46909: NEG
46910: PUSH
46911: LD_INT 0
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: PUSH
46918: LD_INT 1
46920: NEG
46921: PUSH
46922: LD_INT 1
46924: NEG
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: PUSH
46930: LD_INT 1
46932: NEG
46933: PUSH
46934: LD_INT 2
46936: NEG
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: LD_INT 1
46944: PUSH
46945: LD_INT 1
46947: NEG
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: PUSH
46953: LD_INT 2
46955: PUSH
46956: LD_INT 0
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: PUSH
46963: LD_INT 2
46965: PUSH
46966: LD_INT 1
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: LD_INT 2
46975: PUSH
46976: LD_INT 2
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: PUSH
46983: LD_INT 1
46985: PUSH
46986: LD_INT 2
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: LD_INT 1
46995: NEG
46996: PUSH
46997: LD_INT 1
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: PUSH
47004: LD_INT 2
47006: NEG
47007: PUSH
47008: LD_INT 0
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 2
47017: NEG
47018: PUSH
47019: LD_INT 1
47021: NEG
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PUSH
47027: LD_INT 2
47029: NEG
47030: PUSH
47031: LD_INT 2
47033: NEG
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: PUSH
47039: LD_INT 2
47041: NEG
47042: PUSH
47043: LD_INT 3
47045: NEG
47046: PUSH
47047: EMPTY
47048: LIST
47049: LIST
47050: PUSH
47051: LD_INT 2
47053: PUSH
47054: LD_INT 1
47056: NEG
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: PUSH
47062: LD_INT 3
47064: PUSH
47065: LD_INT 0
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: PUSH
47072: LD_INT 3
47074: PUSH
47075: LD_INT 1
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: PUSH
47082: LD_INT 3
47084: PUSH
47085: LD_INT 2
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: PUSH
47092: LD_INT 3
47094: PUSH
47095: LD_INT 3
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 2
47104: PUSH
47105: LD_INT 3
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: PUSH
47112: LD_INT 2
47114: NEG
47115: PUSH
47116: LD_INT 1
47118: PUSH
47119: EMPTY
47120: LIST
47121: LIST
47122: PUSH
47123: LD_INT 3
47125: NEG
47126: PUSH
47127: LD_INT 0
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 3
47136: NEG
47137: PUSH
47138: LD_INT 1
47140: NEG
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: PUSH
47146: LD_INT 3
47148: NEG
47149: PUSH
47150: LD_INT 2
47152: NEG
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: PUSH
47158: LD_INT 3
47160: NEG
47161: PUSH
47162: LD_INT 3
47164: NEG
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: LIST
47185: LIST
47186: LIST
47187: LIST
47188: LIST
47189: LIST
47190: LIST
47191: LIST
47192: LIST
47193: LIST
47194: LIST
47195: LIST
47196: LIST
47197: LIST
47198: LIST
47199: LIST
47200: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47201: LD_ADDR_VAR 0 45
47205: PUSH
47206: LD_INT 0
47208: PUSH
47209: LD_INT 0
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: LD_INT 0
47218: PUSH
47219: LD_INT 1
47221: NEG
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: PUSH
47227: LD_INT 1
47229: PUSH
47230: LD_INT 0
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: PUSH
47237: LD_INT 1
47239: PUSH
47240: LD_INT 1
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: PUSH
47247: LD_INT 0
47249: PUSH
47250: LD_INT 1
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 1
47259: NEG
47260: PUSH
47261: LD_INT 0
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: PUSH
47268: LD_INT 1
47270: NEG
47271: PUSH
47272: LD_INT 1
47274: NEG
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: PUSH
47280: LD_INT 1
47282: NEG
47283: PUSH
47284: LD_INT 2
47286: NEG
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: LD_INT 0
47294: PUSH
47295: LD_INT 2
47297: NEG
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: PUSH
47303: LD_INT 1
47305: PUSH
47306: LD_INT 1
47308: NEG
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 2
47316: PUSH
47317: LD_INT 1
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: PUSH
47324: LD_INT 2
47326: PUSH
47327: LD_INT 2
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 1
47336: PUSH
47337: LD_INT 2
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 0
47346: PUSH
47347: LD_INT 2
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 1
47356: NEG
47357: PUSH
47358: LD_INT 1
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: PUSH
47365: LD_INT 2
47367: NEG
47368: PUSH
47369: LD_INT 1
47371: NEG
47372: PUSH
47373: EMPTY
47374: LIST
47375: LIST
47376: PUSH
47377: LD_INT 2
47379: NEG
47380: PUSH
47381: LD_INT 2
47383: NEG
47384: PUSH
47385: EMPTY
47386: LIST
47387: LIST
47388: PUSH
47389: LD_INT 2
47391: NEG
47392: PUSH
47393: LD_INT 3
47395: NEG
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: PUSH
47401: LD_INT 1
47403: NEG
47404: PUSH
47405: LD_INT 3
47407: NEG
47408: PUSH
47409: EMPTY
47410: LIST
47411: LIST
47412: PUSH
47413: LD_INT 0
47415: PUSH
47416: LD_INT 3
47418: NEG
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: PUSH
47424: LD_INT 1
47426: PUSH
47427: LD_INT 2
47429: NEG
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: PUSH
47435: LD_INT 3
47437: PUSH
47438: LD_INT 2
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: PUSH
47445: LD_INT 3
47447: PUSH
47448: LD_INT 3
47450: PUSH
47451: EMPTY
47452: LIST
47453: LIST
47454: PUSH
47455: LD_INT 2
47457: PUSH
47458: LD_INT 3
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: PUSH
47465: LD_INT 1
47467: PUSH
47468: LD_INT 3
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: LD_INT 0
47477: PUSH
47478: LD_INT 3
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: PUSH
47485: LD_INT 1
47487: NEG
47488: PUSH
47489: LD_INT 2
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: LD_INT 3
47498: NEG
47499: PUSH
47500: LD_INT 2
47502: NEG
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 3
47510: NEG
47511: PUSH
47512: LD_INT 3
47514: NEG
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: LIST
47524: LIST
47525: LIST
47526: LIST
47527: LIST
47528: LIST
47529: LIST
47530: LIST
47531: LIST
47532: LIST
47533: LIST
47534: LIST
47535: LIST
47536: LIST
47537: LIST
47538: LIST
47539: LIST
47540: LIST
47541: LIST
47542: LIST
47543: LIST
47544: LIST
47545: LIST
47546: LIST
47547: LIST
47548: LIST
47549: LIST
47550: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47551: LD_ADDR_VAR 0 46
47555: PUSH
47556: LD_INT 0
47558: PUSH
47559: LD_INT 0
47561: PUSH
47562: EMPTY
47563: LIST
47564: LIST
47565: PUSH
47566: LD_INT 0
47568: PUSH
47569: LD_INT 1
47571: NEG
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: PUSH
47577: LD_INT 1
47579: PUSH
47580: LD_INT 0
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: PUSH
47587: LD_INT 1
47589: PUSH
47590: LD_INT 1
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: PUSH
47597: LD_INT 0
47599: PUSH
47600: LD_INT 1
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: PUSH
47607: LD_INT 1
47609: NEG
47610: PUSH
47611: LD_INT 0
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: PUSH
47618: LD_INT 1
47620: NEG
47621: PUSH
47622: LD_INT 1
47624: NEG
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: PUSH
47630: LD_INT 1
47632: NEG
47633: PUSH
47634: LD_INT 2
47636: NEG
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: LD_INT 0
47644: PUSH
47645: LD_INT 2
47647: NEG
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: PUSH
47653: LD_INT 1
47655: PUSH
47656: LD_INT 1
47658: NEG
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 2
47666: PUSH
47667: LD_INT 0
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: LD_INT 2
47676: PUSH
47677: LD_INT 1
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: LD_INT 1
47686: PUSH
47687: LD_INT 2
47689: PUSH
47690: EMPTY
47691: LIST
47692: LIST
47693: PUSH
47694: LD_INT 0
47696: PUSH
47697: LD_INT 2
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 1
47706: NEG
47707: PUSH
47708: LD_INT 1
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PUSH
47715: LD_INT 2
47717: NEG
47718: PUSH
47719: LD_INT 0
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: PUSH
47726: LD_INT 2
47728: NEG
47729: PUSH
47730: LD_INT 1
47732: NEG
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: LD_INT 1
47740: NEG
47741: PUSH
47742: LD_INT 3
47744: NEG
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: PUSH
47750: LD_INT 0
47752: PUSH
47753: LD_INT 3
47755: NEG
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: PUSH
47761: LD_INT 1
47763: PUSH
47764: LD_INT 2
47766: NEG
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: PUSH
47772: LD_INT 2
47774: PUSH
47775: LD_INT 1
47777: NEG
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: PUSH
47783: LD_INT 3
47785: PUSH
47786: LD_INT 0
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: PUSH
47793: LD_INT 3
47795: PUSH
47796: LD_INT 1
47798: PUSH
47799: EMPTY
47800: LIST
47801: LIST
47802: PUSH
47803: LD_INT 1
47805: PUSH
47806: LD_INT 3
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: PUSH
47813: LD_INT 0
47815: PUSH
47816: LD_INT 3
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: PUSH
47823: LD_INT 1
47825: NEG
47826: PUSH
47827: LD_INT 2
47829: PUSH
47830: EMPTY
47831: LIST
47832: LIST
47833: PUSH
47834: LD_INT 2
47836: NEG
47837: PUSH
47838: LD_INT 1
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: PUSH
47845: LD_INT 3
47847: NEG
47848: PUSH
47849: LD_INT 0
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: PUSH
47856: LD_INT 3
47858: NEG
47859: PUSH
47860: LD_INT 1
47862: NEG
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: LIST
47872: LIST
47873: LIST
47874: LIST
47875: LIST
47876: LIST
47877: LIST
47878: LIST
47879: LIST
47880: LIST
47881: LIST
47882: LIST
47883: LIST
47884: LIST
47885: LIST
47886: LIST
47887: LIST
47888: LIST
47889: LIST
47890: LIST
47891: LIST
47892: LIST
47893: LIST
47894: LIST
47895: LIST
47896: LIST
47897: LIST
47898: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47899: LD_ADDR_VAR 0 47
47903: PUSH
47904: LD_INT 0
47906: PUSH
47907: LD_INT 0
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: LD_INT 0
47916: PUSH
47917: LD_INT 1
47919: NEG
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: LD_INT 1
47927: PUSH
47928: LD_INT 0
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: PUSH
47935: LD_INT 1
47937: PUSH
47938: LD_INT 1
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: PUSH
47945: LD_INT 0
47947: PUSH
47948: LD_INT 1
47950: PUSH
47951: EMPTY
47952: LIST
47953: LIST
47954: PUSH
47955: LD_INT 1
47957: NEG
47958: PUSH
47959: LD_INT 0
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: PUSH
47966: LD_INT 1
47968: NEG
47969: PUSH
47970: LD_INT 1
47972: NEG
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: PUSH
47978: LD_INT 1
47980: NEG
47981: PUSH
47982: LD_INT 2
47984: NEG
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PUSH
47990: LD_INT 0
47992: PUSH
47993: LD_INT 2
47995: NEG
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: LD_INT 1
48003: PUSH
48004: LD_INT 1
48006: NEG
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: PUSH
48012: LD_INT 2
48014: NEG
48015: PUSH
48016: LD_INT 1
48018: NEG
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: PUSH
48024: LD_INT 2
48026: NEG
48027: PUSH
48028: LD_INT 2
48030: NEG
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: LIST
48040: LIST
48041: LIST
48042: LIST
48043: LIST
48044: LIST
48045: LIST
48046: LIST
48047: LIST
48048: LIST
48049: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48050: LD_ADDR_VAR 0 48
48054: PUSH
48055: LD_INT 0
48057: PUSH
48058: LD_INT 0
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 0
48067: PUSH
48068: LD_INT 1
48070: NEG
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: PUSH
48076: LD_INT 1
48078: PUSH
48079: LD_INT 0
48081: PUSH
48082: EMPTY
48083: LIST
48084: LIST
48085: PUSH
48086: LD_INT 1
48088: PUSH
48089: LD_INT 1
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: PUSH
48096: LD_INT 0
48098: PUSH
48099: LD_INT 1
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: PUSH
48106: LD_INT 1
48108: NEG
48109: PUSH
48110: LD_INT 0
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: PUSH
48117: LD_INT 1
48119: NEG
48120: PUSH
48121: LD_INT 1
48123: NEG
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: PUSH
48129: LD_INT 1
48131: NEG
48132: PUSH
48133: LD_INT 2
48135: NEG
48136: PUSH
48137: EMPTY
48138: LIST
48139: LIST
48140: PUSH
48141: LD_INT 0
48143: PUSH
48144: LD_INT 2
48146: NEG
48147: PUSH
48148: EMPTY
48149: LIST
48150: LIST
48151: PUSH
48152: LD_INT 1
48154: PUSH
48155: LD_INT 1
48157: NEG
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: PUSH
48163: LD_INT 2
48165: PUSH
48166: LD_INT 0
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: PUSH
48173: LD_INT 2
48175: PUSH
48176: LD_INT 1
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: LIST
48187: LIST
48188: LIST
48189: LIST
48190: LIST
48191: LIST
48192: LIST
48193: LIST
48194: LIST
48195: LIST
48196: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48197: LD_ADDR_VAR 0 49
48201: PUSH
48202: LD_INT 0
48204: PUSH
48205: LD_INT 0
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: PUSH
48212: LD_INT 0
48214: PUSH
48215: LD_INT 1
48217: NEG
48218: PUSH
48219: EMPTY
48220: LIST
48221: LIST
48222: PUSH
48223: LD_INT 1
48225: PUSH
48226: LD_INT 0
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: PUSH
48233: LD_INT 1
48235: PUSH
48236: LD_INT 1
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: PUSH
48243: LD_INT 0
48245: PUSH
48246: LD_INT 1
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: PUSH
48253: LD_INT 1
48255: NEG
48256: PUSH
48257: LD_INT 0
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: PUSH
48264: LD_INT 1
48266: NEG
48267: PUSH
48268: LD_INT 1
48270: NEG
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: LD_INT 1
48278: PUSH
48279: LD_INT 1
48281: NEG
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: PUSH
48287: LD_INT 2
48289: PUSH
48290: LD_INT 0
48292: PUSH
48293: EMPTY
48294: LIST
48295: LIST
48296: PUSH
48297: LD_INT 2
48299: PUSH
48300: LD_INT 1
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: PUSH
48307: LD_INT 2
48309: PUSH
48310: LD_INT 2
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: PUSH
48317: LD_INT 1
48319: PUSH
48320: LD_INT 2
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: LIST
48331: LIST
48332: LIST
48333: LIST
48334: LIST
48335: LIST
48336: LIST
48337: LIST
48338: LIST
48339: LIST
48340: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48341: LD_ADDR_VAR 0 50
48345: PUSH
48346: LD_INT 0
48348: PUSH
48349: LD_INT 0
48351: PUSH
48352: EMPTY
48353: LIST
48354: LIST
48355: PUSH
48356: LD_INT 0
48358: PUSH
48359: LD_INT 1
48361: NEG
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: LD_INT 1
48369: PUSH
48370: LD_INT 0
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: PUSH
48377: LD_INT 1
48379: PUSH
48380: LD_INT 1
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: PUSH
48387: LD_INT 0
48389: PUSH
48390: LD_INT 1
48392: PUSH
48393: EMPTY
48394: LIST
48395: LIST
48396: PUSH
48397: LD_INT 1
48399: NEG
48400: PUSH
48401: LD_INT 0
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: PUSH
48408: LD_INT 1
48410: NEG
48411: PUSH
48412: LD_INT 1
48414: NEG
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: PUSH
48420: LD_INT 2
48422: PUSH
48423: LD_INT 1
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: LD_INT 2
48432: PUSH
48433: LD_INT 2
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: PUSH
48440: LD_INT 1
48442: PUSH
48443: LD_INT 2
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: PUSH
48450: LD_INT 0
48452: PUSH
48453: LD_INT 2
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: PUSH
48460: LD_INT 1
48462: NEG
48463: PUSH
48464: LD_INT 1
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: LIST
48479: LIST
48480: LIST
48481: LIST
48482: LIST
48483: LIST
48484: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48485: LD_ADDR_VAR 0 51
48489: PUSH
48490: LD_INT 0
48492: PUSH
48493: LD_INT 0
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: LD_INT 0
48502: PUSH
48503: LD_INT 1
48505: NEG
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: PUSH
48511: LD_INT 1
48513: PUSH
48514: LD_INT 0
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: PUSH
48521: LD_INT 1
48523: PUSH
48524: LD_INT 1
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_INT 0
48533: PUSH
48534: LD_INT 1
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: LD_INT 1
48543: NEG
48544: PUSH
48545: LD_INT 0
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 1
48554: NEG
48555: PUSH
48556: LD_INT 1
48558: NEG
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: PUSH
48564: LD_INT 1
48566: PUSH
48567: LD_INT 2
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: PUSH
48574: LD_INT 0
48576: PUSH
48577: LD_INT 2
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: PUSH
48584: LD_INT 1
48586: NEG
48587: PUSH
48588: LD_INT 1
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: LD_INT 2
48597: NEG
48598: PUSH
48599: LD_INT 0
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: PUSH
48606: LD_INT 2
48608: NEG
48609: PUSH
48610: LD_INT 1
48612: NEG
48613: PUSH
48614: EMPTY
48615: LIST
48616: LIST
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: LIST
48622: LIST
48623: LIST
48624: LIST
48625: LIST
48626: LIST
48627: LIST
48628: LIST
48629: LIST
48630: LIST
48631: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48632: LD_ADDR_VAR 0 52
48636: PUSH
48637: LD_INT 0
48639: PUSH
48640: LD_INT 0
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 0
48649: PUSH
48650: LD_INT 1
48652: NEG
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PUSH
48658: LD_INT 1
48660: PUSH
48661: LD_INT 0
48663: PUSH
48664: EMPTY
48665: LIST
48666: LIST
48667: PUSH
48668: LD_INT 1
48670: PUSH
48671: LD_INT 1
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: PUSH
48678: LD_INT 0
48680: PUSH
48681: LD_INT 1
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: PUSH
48688: LD_INT 1
48690: NEG
48691: PUSH
48692: LD_INT 0
48694: PUSH
48695: EMPTY
48696: LIST
48697: LIST
48698: PUSH
48699: LD_INT 1
48701: NEG
48702: PUSH
48703: LD_INT 1
48705: NEG
48706: PUSH
48707: EMPTY
48708: LIST
48709: LIST
48710: PUSH
48711: LD_INT 1
48713: NEG
48714: PUSH
48715: LD_INT 2
48717: NEG
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: PUSH
48723: LD_INT 1
48725: NEG
48726: PUSH
48727: LD_INT 1
48729: PUSH
48730: EMPTY
48731: LIST
48732: LIST
48733: PUSH
48734: LD_INT 2
48736: NEG
48737: PUSH
48738: LD_INT 0
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: PUSH
48745: LD_INT 2
48747: NEG
48748: PUSH
48749: LD_INT 1
48751: NEG
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: PUSH
48757: LD_INT 2
48759: NEG
48760: PUSH
48761: LD_INT 2
48763: NEG
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: LIST
48773: LIST
48774: LIST
48775: LIST
48776: LIST
48777: LIST
48778: LIST
48779: LIST
48780: LIST
48781: LIST
48782: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48783: LD_ADDR_VAR 0 53
48787: PUSH
48788: LD_INT 0
48790: PUSH
48791: LD_INT 0
48793: PUSH
48794: EMPTY
48795: LIST
48796: LIST
48797: PUSH
48798: LD_INT 0
48800: PUSH
48801: LD_INT 1
48803: NEG
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: PUSH
48809: LD_INT 1
48811: PUSH
48812: LD_INT 0
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: LD_INT 1
48821: PUSH
48822: LD_INT 1
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: LD_INT 0
48831: PUSH
48832: LD_INT 1
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: PUSH
48839: LD_INT 1
48841: NEG
48842: PUSH
48843: LD_INT 0
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: LD_INT 1
48852: NEG
48853: PUSH
48854: LD_INT 1
48856: NEG
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: PUSH
48862: LD_INT 1
48864: NEG
48865: PUSH
48866: LD_INT 2
48868: NEG
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: PUSH
48874: LD_INT 0
48876: PUSH
48877: LD_INT 2
48879: NEG
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PUSH
48885: LD_INT 1
48887: PUSH
48888: LD_INT 1
48890: NEG
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: LD_INT 2
48898: PUSH
48899: LD_INT 0
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: LD_INT 2
48908: PUSH
48909: LD_INT 1
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: LD_INT 2
48918: PUSH
48919: LD_INT 2
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 1
48928: PUSH
48929: LD_INT 2
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 0
48938: PUSH
48939: LD_INT 2
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 1
48948: NEG
48949: PUSH
48950: LD_INT 1
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: LD_INT 2
48959: NEG
48960: PUSH
48961: LD_INT 0
48963: PUSH
48964: EMPTY
48965: LIST
48966: LIST
48967: PUSH
48968: LD_INT 2
48970: NEG
48971: PUSH
48972: LD_INT 1
48974: NEG
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: LD_INT 2
48982: NEG
48983: PUSH
48984: LD_INT 2
48986: NEG
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: LIST
48996: LIST
48997: LIST
48998: LIST
48999: LIST
49000: LIST
49001: LIST
49002: LIST
49003: LIST
49004: LIST
49005: LIST
49006: LIST
49007: LIST
49008: LIST
49009: LIST
49010: LIST
49011: LIST
49012: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49013: LD_ADDR_VAR 0 54
49017: PUSH
49018: LD_INT 0
49020: PUSH
49021: LD_INT 0
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: PUSH
49028: LD_INT 0
49030: PUSH
49031: LD_INT 1
49033: NEG
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: LD_INT 1
49041: PUSH
49042: LD_INT 0
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 1
49051: PUSH
49052: LD_INT 1
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: LD_INT 0
49061: PUSH
49062: LD_INT 1
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 1
49071: NEG
49072: PUSH
49073: LD_INT 0
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: LD_INT 1
49082: NEG
49083: PUSH
49084: LD_INT 1
49086: NEG
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 1
49094: NEG
49095: PUSH
49096: LD_INT 2
49098: NEG
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: PUSH
49104: LD_INT 0
49106: PUSH
49107: LD_INT 2
49109: NEG
49110: PUSH
49111: EMPTY
49112: LIST
49113: LIST
49114: PUSH
49115: LD_INT 1
49117: PUSH
49118: LD_INT 1
49120: NEG
49121: PUSH
49122: EMPTY
49123: LIST
49124: LIST
49125: PUSH
49126: LD_INT 2
49128: PUSH
49129: LD_INT 0
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: PUSH
49136: LD_INT 2
49138: PUSH
49139: LD_INT 1
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: PUSH
49146: LD_INT 2
49148: PUSH
49149: LD_INT 2
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: LD_INT 1
49158: PUSH
49159: LD_INT 2
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PUSH
49166: LD_INT 0
49168: PUSH
49169: LD_INT 2
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 1
49178: NEG
49179: PUSH
49180: LD_INT 1
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 2
49189: NEG
49190: PUSH
49191: LD_INT 0
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 2
49200: NEG
49201: PUSH
49202: LD_INT 1
49204: NEG
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: PUSH
49210: LD_INT 2
49212: NEG
49213: PUSH
49214: LD_INT 2
49216: NEG
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: PUSH
49222: EMPTY
49223: LIST
49224: LIST
49225: LIST
49226: LIST
49227: LIST
49228: LIST
49229: LIST
49230: LIST
49231: LIST
49232: LIST
49233: LIST
49234: LIST
49235: LIST
49236: LIST
49237: LIST
49238: LIST
49239: LIST
49240: LIST
49241: LIST
49242: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49243: LD_ADDR_VAR 0 55
49247: PUSH
49248: LD_INT 0
49250: PUSH
49251: LD_INT 0
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: PUSH
49258: LD_INT 0
49260: PUSH
49261: LD_INT 1
49263: NEG
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: PUSH
49269: LD_INT 1
49271: PUSH
49272: LD_INT 0
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: PUSH
49279: LD_INT 1
49281: PUSH
49282: LD_INT 1
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: PUSH
49289: LD_INT 0
49291: PUSH
49292: LD_INT 1
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: PUSH
49299: LD_INT 1
49301: NEG
49302: PUSH
49303: LD_INT 0
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: PUSH
49310: LD_INT 1
49312: NEG
49313: PUSH
49314: LD_INT 1
49316: NEG
49317: PUSH
49318: EMPTY
49319: LIST
49320: LIST
49321: PUSH
49322: LD_INT 1
49324: NEG
49325: PUSH
49326: LD_INT 2
49328: NEG
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: PUSH
49334: LD_INT 0
49336: PUSH
49337: LD_INT 2
49339: NEG
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: LD_INT 1
49347: PUSH
49348: LD_INT 1
49350: NEG
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: PUSH
49356: LD_INT 2
49358: PUSH
49359: LD_INT 0
49361: PUSH
49362: EMPTY
49363: LIST
49364: LIST
49365: PUSH
49366: LD_INT 2
49368: PUSH
49369: LD_INT 1
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: PUSH
49376: LD_INT 2
49378: PUSH
49379: LD_INT 2
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 1
49388: PUSH
49389: LD_INT 2
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: LD_INT 0
49398: PUSH
49399: LD_INT 2
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PUSH
49406: LD_INT 1
49408: NEG
49409: PUSH
49410: LD_INT 1
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 2
49419: NEG
49420: PUSH
49421: LD_INT 0
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: LD_INT 2
49430: NEG
49431: PUSH
49432: LD_INT 1
49434: NEG
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: LD_INT 2
49442: NEG
49443: PUSH
49444: LD_INT 2
49446: NEG
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: LIST
49456: LIST
49457: LIST
49458: LIST
49459: LIST
49460: LIST
49461: LIST
49462: LIST
49463: LIST
49464: LIST
49465: LIST
49466: LIST
49467: LIST
49468: LIST
49469: LIST
49470: LIST
49471: LIST
49472: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49473: LD_ADDR_VAR 0 56
49477: PUSH
49478: LD_INT 0
49480: PUSH
49481: LD_INT 0
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: PUSH
49488: LD_INT 0
49490: PUSH
49491: LD_INT 1
49493: NEG
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PUSH
49499: LD_INT 1
49501: PUSH
49502: LD_INT 0
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: LD_INT 1
49511: PUSH
49512: LD_INT 1
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 0
49521: PUSH
49522: LD_INT 1
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 1
49531: NEG
49532: PUSH
49533: LD_INT 0
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: PUSH
49540: LD_INT 1
49542: NEG
49543: PUSH
49544: LD_INT 1
49546: NEG
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: PUSH
49552: LD_INT 1
49554: NEG
49555: PUSH
49556: LD_INT 2
49558: NEG
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: PUSH
49564: LD_INT 0
49566: PUSH
49567: LD_INT 2
49569: NEG
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: LD_INT 1
49577: PUSH
49578: LD_INT 1
49580: NEG
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: LD_INT 2
49588: PUSH
49589: LD_INT 0
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: PUSH
49596: LD_INT 2
49598: PUSH
49599: LD_INT 1
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: LD_INT 2
49608: PUSH
49609: LD_INT 2
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: PUSH
49616: LD_INT 1
49618: PUSH
49619: LD_INT 2
49621: PUSH
49622: EMPTY
49623: LIST
49624: LIST
49625: PUSH
49626: LD_INT 0
49628: PUSH
49629: LD_INT 2
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: PUSH
49636: LD_INT 1
49638: NEG
49639: PUSH
49640: LD_INT 1
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: PUSH
49647: LD_INT 2
49649: NEG
49650: PUSH
49651: LD_INT 0
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: PUSH
49658: LD_INT 2
49660: NEG
49661: PUSH
49662: LD_INT 1
49664: NEG
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PUSH
49670: LD_INT 2
49672: NEG
49673: PUSH
49674: LD_INT 2
49676: NEG
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: PUSH
49682: EMPTY
49683: LIST
49684: LIST
49685: LIST
49686: LIST
49687: LIST
49688: LIST
49689: LIST
49690: LIST
49691: LIST
49692: LIST
49693: LIST
49694: LIST
49695: LIST
49696: LIST
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49703: LD_ADDR_VAR 0 57
49707: PUSH
49708: LD_INT 0
49710: PUSH
49711: LD_INT 0
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 0
49720: PUSH
49721: LD_INT 1
49723: NEG
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: PUSH
49729: LD_INT 1
49731: PUSH
49732: LD_INT 0
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: LD_INT 1
49741: PUSH
49742: LD_INT 1
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: LD_INT 0
49751: PUSH
49752: LD_INT 1
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: PUSH
49759: LD_INT 1
49761: NEG
49762: PUSH
49763: LD_INT 0
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: PUSH
49770: LD_INT 1
49772: NEG
49773: PUSH
49774: LD_INT 1
49776: NEG
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PUSH
49782: LD_INT 1
49784: NEG
49785: PUSH
49786: LD_INT 2
49788: NEG
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: PUSH
49794: LD_INT 0
49796: PUSH
49797: LD_INT 2
49799: NEG
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: LD_INT 1
49807: PUSH
49808: LD_INT 1
49810: NEG
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 2
49818: PUSH
49819: LD_INT 0
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: PUSH
49826: LD_INT 2
49828: PUSH
49829: LD_INT 1
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PUSH
49836: LD_INT 2
49838: PUSH
49839: LD_INT 2
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: LD_INT 1
49848: PUSH
49849: LD_INT 2
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: PUSH
49856: LD_INT 0
49858: PUSH
49859: LD_INT 2
49861: PUSH
49862: EMPTY
49863: LIST
49864: LIST
49865: PUSH
49866: LD_INT 1
49868: NEG
49869: PUSH
49870: LD_INT 1
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: PUSH
49877: LD_INT 2
49879: NEG
49880: PUSH
49881: LD_INT 0
49883: PUSH
49884: EMPTY
49885: LIST
49886: LIST
49887: PUSH
49888: LD_INT 2
49890: NEG
49891: PUSH
49892: LD_INT 1
49894: NEG
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: PUSH
49900: LD_INT 2
49902: NEG
49903: PUSH
49904: LD_INT 2
49906: NEG
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: LIST
49916: LIST
49917: LIST
49918: LIST
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: LIST
49927: LIST
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49933: LD_ADDR_VAR 0 58
49937: PUSH
49938: LD_INT 0
49940: PUSH
49941: LD_INT 0
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: LD_INT 0
49950: PUSH
49951: LD_INT 1
49953: NEG
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 1
49961: PUSH
49962: LD_INT 0
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 1
49971: PUSH
49972: LD_INT 1
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 0
49981: PUSH
49982: LD_INT 1
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 1
49991: NEG
49992: PUSH
49993: LD_INT 0
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 1
50002: NEG
50003: PUSH
50004: LD_INT 1
50006: NEG
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: LD_INT 1
50014: NEG
50015: PUSH
50016: LD_INT 2
50018: NEG
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: PUSH
50024: LD_INT 0
50026: PUSH
50027: LD_INT 2
50029: NEG
50030: PUSH
50031: EMPTY
50032: LIST
50033: LIST
50034: PUSH
50035: LD_INT 1
50037: PUSH
50038: LD_INT 1
50040: NEG
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: LD_INT 2
50048: PUSH
50049: LD_INT 0
50051: PUSH
50052: EMPTY
50053: LIST
50054: LIST
50055: PUSH
50056: LD_INT 2
50058: PUSH
50059: LD_INT 1
50061: PUSH
50062: EMPTY
50063: LIST
50064: LIST
50065: PUSH
50066: LD_INT 2
50068: PUSH
50069: LD_INT 2
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: PUSH
50076: LD_INT 1
50078: PUSH
50079: LD_INT 2
50081: PUSH
50082: EMPTY
50083: LIST
50084: LIST
50085: PUSH
50086: LD_INT 0
50088: PUSH
50089: LD_INT 2
50091: PUSH
50092: EMPTY
50093: LIST
50094: LIST
50095: PUSH
50096: LD_INT 1
50098: NEG
50099: PUSH
50100: LD_INT 1
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: PUSH
50107: LD_INT 2
50109: NEG
50110: PUSH
50111: LD_INT 0
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: LD_INT 2
50120: NEG
50121: PUSH
50122: LD_INT 1
50124: NEG
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: PUSH
50130: LD_INT 2
50132: NEG
50133: PUSH
50134: LD_INT 2
50136: NEG
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: LIST
50146: LIST
50147: LIST
50148: LIST
50149: LIST
50150: LIST
50151: LIST
50152: LIST
50153: LIST
50154: LIST
50155: LIST
50156: LIST
50157: LIST
50158: LIST
50159: LIST
50160: LIST
50161: LIST
50162: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50163: LD_ADDR_VAR 0 59
50167: PUSH
50168: LD_INT 0
50170: PUSH
50171: LD_INT 0
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: PUSH
50178: LD_INT 0
50180: PUSH
50181: LD_INT 1
50183: NEG
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: LD_INT 1
50191: PUSH
50192: LD_INT 0
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 1
50201: PUSH
50202: LD_INT 1
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: PUSH
50209: LD_INT 0
50211: PUSH
50212: LD_INT 1
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PUSH
50219: LD_INT 1
50221: NEG
50222: PUSH
50223: LD_INT 0
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: PUSH
50230: LD_INT 1
50232: NEG
50233: PUSH
50234: LD_INT 1
50236: NEG
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: LIST
50246: LIST
50247: LIST
50248: LIST
50249: LIST
50250: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50251: LD_ADDR_VAR 0 60
50255: PUSH
50256: LD_INT 0
50258: PUSH
50259: LD_INT 0
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: PUSH
50266: LD_INT 0
50268: PUSH
50269: LD_INT 1
50271: NEG
50272: PUSH
50273: EMPTY
50274: LIST
50275: LIST
50276: PUSH
50277: LD_INT 1
50279: PUSH
50280: LD_INT 0
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: PUSH
50287: LD_INT 1
50289: PUSH
50290: LD_INT 1
50292: PUSH
50293: EMPTY
50294: LIST
50295: LIST
50296: PUSH
50297: LD_INT 0
50299: PUSH
50300: LD_INT 1
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: PUSH
50307: LD_INT 1
50309: NEG
50310: PUSH
50311: LD_INT 0
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: PUSH
50318: LD_INT 1
50320: NEG
50321: PUSH
50322: LD_INT 1
50324: NEG
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: PUSH
50330: EMPTY
50331: LIST
50332: LIST
50333: LIST
50334: LIST
50335: LIST
50336: LIST
50337: LIST
50338: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50339: LD_ADDR_VAR 0 61
50343: PUSH
50344: LD_INT 0
50346: PUSH
50347: LD_INT 0
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: PUSH
50354: LD_INT 0
50356: PUSH
50357: LD_INT 1
50359: NEG
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 1
50367: PUSH
50368: LD_INT 0
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: PUSH
50375: LD_INT 1
50377: PUSH
50378: LD_INT 1
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: PUSH
50385: LD_INT 0
50387: PUSH
50388: LD_INT 1
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: LD_INT 1
50397: NEG
50398: PUSH
50399: LD_INT 0
50401: PUSH
50402: EMPTY
50403: LIST
50404: LIST
50405: PUSH
50406: LD_INT 1
50408: NEG
50409: PUSH
50410: LD_INT 1
50412: NEG
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: LIST
50422: LIST
50423: LIST
50424: LIST
50425: LIST
50426: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50427: LD_ADDR_VAR 0 62
50431: PUSH
50432: LD_INT 0
50434: PUSH
50435: LD_INT 0
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: PUSH
50442: LD_INT 0
50444: PUSH
50445: LD_INT 1
50447: NEG
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: LD_INT 1
50455: PUSH
50456: LD_INT 0
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: PUSH
50463: LD_INT 1
50465: PUSH
50466: LD_INT 1
50468: PUSH
50469: EMPTY
50470: LIST
50471: LIST
50472: PUSH
50473: LD_INT 0
50475: PUSH
50476: LD_INT 1
50478: PUSH
50479: EMPTY
50480: LIST
50481: LIST
50482: PUSH
50483: LD_INT 1
50485: NEG
50486: PUSH
50487: LD_INT 0
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: LD_INT 1
50496: NEG
50497: PUSH
50498: LD_INT 1
50500: NEG
50501: PUSH
50502: EMPTY
50503: LIST
50504: LIST
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: LIST
50510: LIST
50511: LIST
50512: LIST
50513: LIST
50514: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50515: LD_ADDR_VAR 0 63
50519: PUSH
50520: LD_INT 0
50522: PUSH
50523: LD_INT 0
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: LD_INT 0
50532: PUSH
50533: LD_INT 1
50535: NEG
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: LD_INT 1
50543: PUSH
50544: LD_INT 0
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: LD_INT 1
50553: PUSH
50554: LD_INT 1
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: LD_INT 0
50563: PUSH
50564: LD_INT 1
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 1
50573: NEG
50574: PUSH
50575: LD_INT 0
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: PUSH
50582: LD_INT 1
50584: NEG
50585: PUSH
50586: LD_INT 1
50588: NEG
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: LIST
50598: LIST
50599: LIST
50600: LIST
50601: LIST
50602: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50603: LD_ADDR_VAR 0 64
50607: PUSH
50608: LD_INT 0
50610: PUSH
50611: LD_INT 0
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: LD_INT 0
50620: PUSH
50621: LD_INT 1
50623: NEG
50624: PUSH
50625: EMPTY
50626: LIST
50627: LIST
50628: PUSH
50629: LD_INT 1
50631: PUSH
50632: LD_INT 0
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: PUSH
50639: LD_INT 1
50641: PUSH
50642: LD_INT 1
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: PUSH
50649: LD_INT 0
50651: PUSH
50652: LD_INT 1
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: PUSH
50659: LD_INT 1
50661: NEG
50662: PUSH
50663: LD_INT 0
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: PUSH
50670: LD_INT 1
50672: NEG
50673: PUSH
50674: LD_INT 1
50676: NEG
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: LIST
50686: LIST
50687: LIST
50688: LIST
50689: LIST
50690: ST_TO_ADDR
// end ; 1 :
50691: GO 56588
50693: LD_INT 1
50695: DOUBLE
50696: EQUAL
50697: IFTRUE 50701
50699: GO 53324
50701: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50702: LD_ADDR_VAR 0 11
50706: PUSH
50707: LD_INT 1
50709: NEG
50710: PUSH
50711: LD_INT 3
50713: NEG
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: LD_INT 0
50721: PUSH
50722: LD_INT 3
50724: NEG
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 1
50732: PUSH
50733: LD_INT 2
50735: NEG
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: LIST
50745: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50746: LD_ADDR_VAR 0 12
50750: PUSH
50751: LD_INT 2
50753: PUSH
50754: LD_INT 1
50756: NEG
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: PUSH
50762: LD_INT 3
50764: PUSH
50765: LD_INT 0
50767: PUSH
50768: EMPTY
50769: LIST
50770: LIST
50771: PUSH
50772: LD_INT 3
50774: PUSH
50775: LD_INT 1
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: LIST
50786: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50787: LD_ADDR_VAR 0 13
50791: PUSH
50792: LD_INT 3
50794: PUSH
50795: LD_INT 2
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: PUSH
50802: LD_INT 3
50804: PUSH
50805: LD_INT 3
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: PUSH
50812: LD_INT 2
50814: PUSH
50815: LD_INT 3
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: LIST
50826: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50827: LD_ADDR_VAR 0 14
50831: PUSH
50832: LD_INT 1
50834: PUSH
50835: LD_INT 3
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: PUSH
50842: LD_INT 0
50844: PUSH
50845: LD_INT 3
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: PUSH
50852: LD_INT 1
50854: NEG
50855: PUSH
50856: LD_INT 2
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: LIST
50867: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50868: LD_ADDR_VAR 0 15
50872: PUSH
50873: LD_INT 2
50875: NEG
50876: PUSH
50877: LD_INT 1
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: LD_INT 3
50886: NEG
50887: PUSH
50888: LD_INT 0
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: PUSH
50895: LD_INT 3
50897: NEG
50898: PUSH
50899: LD_INT 1
50901: NEG
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: LIST
50911: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50912: LD_ADDR_VAR 0 16
50916: PUSH
50917: LD_INT 2
50919: NEG
50920: PUSH
50921: LD_INT 3
50923: NEG
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: PUSH
50929: LD_INT 3
50931: NEG
50932: PUSH
50933: LD_INT 2
50935: NEG
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 3
50943: NEG
50944: PUSH
50945: LD_INT 3
50947: NEG
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: LIST
50957: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50958: LD_ADDR_VAR 0 17
50962: PUSH
50963: LD_INT 1
50965: NEG
50966: PUSH
50967: LD_INT 3
50969: NEG
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 0
50977: PUSH
50978: LD_INT 3
50980: NEG
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: PUSH
50986: LD_INT 1
50988: PUSH
50989: LD_INT 2
50991: NEG
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: PUSH
50997: EMPTY
50998: LIST
50999: LIST
51000: LIST
51001: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51002: LD_ADDR_VAR 0 18
51006: PUSH
51007: LD_INT 2
51009: PUSH
51010: LD_INT 1
51012: NEG
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PUSH
51018: LD_INT 3
51020: PUSH
51021: LD_INT 0
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: PUSH
51028: LD_INT 3
51030: PUSH
51031: LD_INT 1
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: LIST
51042: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51043: LD_ADDR_VAR 0 19
51047: PUSH
51048: LD_INT 3
51050: PUSH
51051: LD_INT 2
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: PUSH
51058: LD_INT 3
51060: PUSH
51061: LD_INT 3
51063: PUSH
51064: EMPTY
51065: LIST
51066: LIST
51067: PUSH
51068: LD_INT 2
51070: PUSH
51071: LD_INT 3
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: LIST
51082: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51083: LD_ADDR_VAR 0 20
51087: PUSH
51088: LD_INT 1
51090: PUSH
51091: LD_INT 3
51093: PUSH
51094: EMPTY
51095: LIST
51096: LIST
51097: PUSH
51098: LD_INT 0
51100: PUSH
51101: LD_INT 3
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: PUSH
51108: LD_INT 1
51110: NEG
51111: PUSH
51112: LD_INT 2
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: EMPTY
51120: LIST
51121: LIST
51122: LIST
51123: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51124: LD_ADDR_VAR 0 21
51128: PUSH
51129: LD_INT 2
51131: NEG
51132: PUSH
51133: LD_INT 1
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PUSH
51140: LD_INT 3
51142: NEG
51143: PUSH
51144: LD_INT 0
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: LD_INT 3
51153: NEG
51154: PUSH
51155: LD_INT 1
51157: NEG
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: LIST
51167: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51168: LD_ADDR_VAR 0 22
51172: PUSH
51173: LD_INT 2
51175: NEG
51176: PUSH
51177: LD_INT 3
51179: NEG
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 3
51187: NEG
51188: PUSH
51189: LD_INT 2
51191: NEG
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 3
51199: NEG
51200: PUSH
51201: LD_INT 3
51203: NEG
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: LIST
51213: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
51214: LD_ADDR_VAR 0 23
51218: PUSH
51219: LD_INT 0
51221: PUSH
51222: LD_INT 3
51224: NEG
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PUSH
51230: LD_INT 1
51232: NEG
51233: PUSH
51234: LD_INT 4
51236: NEG
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: LD_INT 1
51244: PUSH
51245: LD_INT 3
51247: NEG
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: EMPTY
51254: LIST
51255: LIST
51256: LIST
51257: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
51258: LD_ADDR_VAR 0 24
51262: PUSH
51263: LD_INT 3
51265: PUSH
51266: LD_INT 0
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 3
51275: PUSH
51276: LD_INT 1
51278: NEG
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: LD_INT 4
51286: PUSH
51287: LD_INT 1
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: LIST
51298: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
51299: LD_ADDR_VAR 0 25
51303: PUSH
51304: LD_INT 3
51306: PUSH
51307: LD_INT 3
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: LD_INT 4
51316: PUSH
51317: LD_INT 3
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: LD_INT 3
51326: PUSH
51327: LD_INT 4
51329: PUSH
51330: EMPTY
51331: LIST
51332: LIST
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: LIST
51338: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
51339: LD_ADDR_VAR 0 26
51343: PUSH
51344: LD_INT 0
51346: PUSH
51347: LD_INT 3
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: PUSH
51354: LD_INT 1
51356: PUSH
51357: LD_INT 4
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: PUSH
51364: LD_INT 1
51366: NEG
51367: PUSH
51368: LD_INT 3
51370: PUSH
51371: EMPTY
51372: LIST
51373: LIST
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: LIST
51379: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
51380: LD_ADDR_VAR 0 27
51384: PUSH
51385: LD_INT 3
51387: NEG
51388: PUSH
51389: LD_INT 0
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: PUSH
51396: LD_INT 3
51398: NEG
51399: PUSH
51400: LD_INT 1
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PUSH
51407: LD_INT 4
51409: NEG
51410: PUSH
51411: LD_INT 1
51413: NEG
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: LIST
51423: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
51424: LD_ADDR_VAR 0 28
51428: PUSH
51429: LD_INT 3
51431: NEG
51432: PUSH
51433: LD_INT 3
51435: NEG
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 3
51443: NEG
51444: PUSH
51445: LD_INT 4
51447: NEG
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 4
51455: NEG
51456: PUSH
51457: LD_INT 3
51459: NEG
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: LIST
51469: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
51470: LD_ADDR_VAR 0 29
51474: PUSH
51475: LD_INT 1
51477: NEG
51478: PUSH
51479: LD_INT 3
51481: NEG
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PUSH
51487: LD_INT 0
51489: PUSH
51490: LD_INT 3
51492: NEG
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: LD_INT 1
51500: PUSH
51501: LD_INT 2
51503: NEG
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: PUSH
51509: LD_INT 1
51511: NEG
51512: PUSH
51513: LD_INT 4
51515: NEG
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: PUSH
51521: LD_INT 0
51523: PUSH
51524: LD_INT 4
51526: NEG
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: LD_INT 1
51534: PUSH
51535: LD_INT 3
51537: NEG
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: LD_INT 1
51545: NEG
51546: PUSH
51547: LD_INT 5
51549: NEG
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: LD_INT 0
51557: PUSH
51558: LD_INT 5
51560: NEG
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: LD_INT 1
51568: PUSH
51569: LD_INT 4
51571: NEG
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: PUSH
51577: LD_INT 1
51579: NEG
51580: PUSH
51581: LD_INT 6
51583: NEG
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: LD_INT 0
51591: PUSH
51592: LD_INT 6
51594: NEG
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 1
51602: PUSH
51603: LD_INT 5
51605: NEG
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: LIST
51615: LIST
51616: LIST
51617: LIST
51618: LIST
51619: LIST
51620: LIST
51621: LIST
51622: LIST
51623: LIST
51624: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
51625: LD_ADDR_VAR 0 30
51629: PUSH
51630: LD_INT 2
51632: PUSH
51633: LD_INT 1
51635: NEG
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: PUSH
51641: LD_INT 3
51643: PUSH
51644: LD_INT 0
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: PUSH
51651: LD_INT 3
51653: PUSH
51654: LD_INT 1
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PUSH
51661: LD_INT 3
51663: PUSH
51664: LD_INT 1
51666: NEG
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: PUSH
51672: LD_INT 4
51674: PUSH
51675: LD_INT 0
51677: PUSH
51678: EMPTY
51679: LIST
51680: LIST
51681: PUSH
51682: LD_INT 4
51684: PUSH
51685: LD_INT 1
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: PUSH
51692: LD_INT 4
51694: PUSH
51695: LD_INT 1
51697: NEG
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: LD_INT 5
51705: PUSH
51706: LD_INT 0
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: PUSH
51713: LD_INT 5
51715: PUSH
51716: LD_INT 1
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 5
51725: PUSH
51726: LD_INT 1
51728: NEG
51729: PUSH
51730: EMPTY
51731: LIST
51732: LIST
51733: PUSH
51734: LD_INT 6
51736: PUSH
51737: LD_INT 0
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: PUSH
51744: LD_INT 6
51746: PUSH
51747: LD_INT 1
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: LIST
51758: LIST
51759: LIST
51760: LIST
51761: LIST
51762: LIST
51763: LIST
51764: LIST
51765: LIST
51766: LIST
51767: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
51768: LD_ADDR_VAR 0 31
51772: PUSH
51773: LD_INT 3
51775: PUSH
51776: LD_INT 2
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: PUSH
51783: LD_INT 3
51785: PUSH
51786: LD_INT 3
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: PUSH
51793: LD_INT 2
51795: PUSH
51796: LD_INT 3
51798: PUSH
51799: EMPTY
51800: LIST
51801: LIST
51802: PUSH
51803: LD_INT 4
51805: PUSH
51806: LD_INT 3
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: PUSH
51813: LD_INT 4
51815: PUSH
51816: LD_INT 4
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: PUSH
51823: LD_INT 3
51825: PUSH
51826: LD_INT 4
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: PUSH
51833: LD_INT 5
51835: PUSH
51836: LD_INT 4
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: PUSH
51843: LD_INT 5
51845: PUSH
51846: LD_INT 5
51848: PUSH
51849: EMPTY
51850: LIST
51851: LIST
51852: PUSH
51853: LD_INT 4
51855: PUSH
51856: LD_INT 5
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: PUSH
51863: LD_INT 6
51865: PUSH
51866: LD_INT 5
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: PUSH
51873: LD_INT 6
51875: PUSH
51876: LD_INT 6
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: PUSH
51883: LD_INT 5
51885: PUSH
51886: LD_INT 6
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: EMPTY
51894: LIST
51895: LIST
51896: LIST
51897: LIST
51898: LIST
51899: LIST
51900: LIST
51901: LIST
51902: LIST
51903: LIST
51904: LIST
51905: LIST
51906: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
51907: LD_ADDR_VAR 0 32
51911: PUSH
51912: LD_INT 1
51914: PUSH
51915: LD_INT 3
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PUSH
51922: LD_INT 0
51924: PUSH
51925: LD_INT 3
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: PUSH
51932: LD_INT 1
51934: NEG
51935: PUSH
51936: LD_INT 2
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: PUSH
51943: LD_INT 1
51945: PUSH
51946: LD_INT 4
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 0
51955: PUSH
51956: LD_INT 4
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: PUSH
51963: LD_INT 1
51965: NEG
51966: PUSH
51967: LD_INT 3
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: PUSH
51974: LD_INT 1
51976: PUSH
51977: LD_INT 5
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: PUSH
51984: LD_INT 0
51986: PUSH
51987: LD_INT 5
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: PUSH
51994: LD_INT 1
51996: NEG
51997: PUSH
51998: LD_INT 4
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: PUSH
52005: LD_INT 1
52007: PUSH
52008: LD_INT 6
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: PUSH
52015: LD_INT 0
52017: PUSH
52018: LD_INT 6
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 1
52027: NEG
52028: PUSH
52029: LD_INT 5
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: LIST
52040: LIST
52041: LIST
52042: LIST
52043: LIST
52044: LIST
52045: LIST
52046: LIST
52047: LIST
52048: LIST
52049: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
52050: LD_ADDR_VAR 0 33
52054: PUSH
52055: LD_INT 2
52057: NEG
52058: PUSH
52059: LD_INT 1
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 3
52068: NEG
52069: PUSH
52070: LD_INT 0
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PUSH
52077: LD_INT 3
52079: NEG
52080: PUSH
52081: LD_INT 1
52083: NEG
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: LD_INT 3
52091: NEG
52092: PUSH
52093: LD_INT 1
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: LD_INT 4
52102: NEG
52103: PUSH
52104: LD_INT 0
52106: PUSH
52107: EMPTY
52108: LIST
52109: LIST
52110: PUSH
52111: LD_INT 4
52113: NEG
52114: PUSH
52115: LD_INT 1
52117: NEG
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: PUSH
52123: LD_INT 4
52125: NEG
52126: PUSH
52127: LD_INT 1
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 5
52136: NEG
52137: PUSH
52138: LD_INT 0
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: LD_INT 5
52147: NEG
52148: PUSH
52149: LD_INT 1
52151: NEG
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: PUSH
52157: LD_INT 5
52159: NEG
52160: PUSH
52161: LD_INT 1
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: LD_INT 6
52170: NEG
52171: PUSH
52172: LD_INT 0
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: PUSH
52179: LD_INT 6
52181: NEG
52182: PUSH
52183: LD_INT 1
52185: NEG
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: LIST
52195: LIST
52196: LIST
52197: LIST
52198: LIST
52199: LIST
52200: LIST
52201: LIST
52202: LIST
52203: LIST
52204: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
52205: LD_ADDR_VAR 0 34
52209: PUSH
52210: LD_INT 2
52212: NEG
52213: PUSH
52214: LD_INT 3
52216: NEG
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 3
52224: NEG
52225: PUSH
52226: LD_INT 2
52228: NEG
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: LD_INT 3
52236: NEG
52237: PUSH
52238: LD_INT 3
52240: NEG
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: LD_INT 3
52248: NEG
52249: PUSH
52250: LD_INT 4
52252: NEG
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: LD_INT 4
52260: NEG
52261: PUSH
52262: LD_INT 3
52264: NEG
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: PUSH
52270: LD_INT 4
52272: NEG
52273: PUSH
52274: LD_INT 4
52276: NEG
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: PUSH
52282: LD_INT 4
52284: NEG
52285: PUSH
52286: LD_INT 5
52288: NEG
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: PUSH
52294: LD_INT 5
52296: NEG
52297: PUSH
52298: LD_INT 4
52300: NEG
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: PUSH
52306: LD_INT 5
52308: NEG
52309: PUSH
52310: LD_INT 5
52312: NEG
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: PUSH
52318: LD_INT 5
52320: NEG
52321: PUSH
52322: LD_INT 6
52324: NEG
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: PUSH
52330: LD_INT 6
52332: NEG
52333: PUSH
52334: LD_INT 5
52336: NEG
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: LD_INT 6
52344: NEG
52345: PUSH
52346: LD_INT 6
52348: NEG
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: PUSH
52354: EMPTY
52355: LIST
52356: LIST
52357: LIST
52358: LIST
52359: LIST
52360: LIST
52361: LIST
52362: LIST
52363: LIST
52364: LIST
52365: LIST
52366: LIST
52367: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
52368: LD_ADDR_VAR 0 41
52372: PUSH
52373: LD_INT 0
52375: PUSH
52376: LD_INT 2
52378: NEG
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: PUSH
52384: LD_INT 1
52386: NEG
52387: PUSH
52388: LD_INT 3
52390: NEG
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: PUSH
52396: LD_INT 1
52398: PUSH
52399: LD_INT 2
52401: NEG
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: LIST
52411: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
52412: LD_ADDR_VAR 0 42
52416: PUSH
52417: LD_INT 2
52419: PUSH
52420: LD_INT 0
52422: PUSH
52423: EMPTY
52424: LIST
52425: LIST
52426: PUSH
52427: LD_INT 2
52429: PUSH
52430: LD_INT 1
52432: NEG
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: PUSH
52438: LD_INT 3
52440: PUSH
52441: LD_INT 1
52443: PUSH
52444: EMPTY
52445: LIST
52446: LIST
52447: PUSH
52448: EMPTY
52449: LIST
52450: LIST
52451: LIST
52452: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
52453: LD_ADDR_VAR 0 43
52457: PUSH
52458: LD_INT 2
52460: PUSH
52461: LD_INT 2
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: PUSH
52468: LD_INT 3
52470: PUSH
52471: LD_INT 2
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 2
52480: PUSH
52481: LD_INT 3
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: LIST
52492: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
52493: LD_ADDR_VAR 0 44
52497: PUSH
52498: LD_INT 0
52500: PUSH
52501: LD_INT 2
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 1
52510: PUSH
52511: LD_INT 3
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: LD_INT 1
52520: NEG
52521: PUSH
52522: LD_INT 2
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: LIST
52533: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52534: LD_ADDR_VAR 0 45
52538: PUSH
52539: LD_INT 2
52541: NEG
52542: PUSH
52543: LD_INT 0
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: PUSH
52550: LD_INT 2
52552: NEG
52553: PUSH
52554: LD_INT 1
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: PUSH
52561: LD_INT 3
52563: NEG
52564: PUSH
52565: LD_INT 1
52567: NEG
52568: PUSH
52569: EMPTY
52570: LIST
52571: LIST
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: LIST
52577: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
52578: LD_ADDR_VAR 0 46
52582: PUSH
52583: LD_INT 2
52585: NEG
52586: PUSH
52587: LD_INT 2
52589: NEG
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PUSH
52595: LD_INT 2
52597: NEG
52598: PUSH
52599: LD_INT 3
52601: NEG
52602: PUSH
52603: EMPTY
52604: LIST
52605: LIST
52606: PUSH
52607: LD_INT 3
52609: NEG
52610: PUSH
52611: LD_INT 2
52613: NEG
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: LIST
52623: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
52624: LD_ADDR_VAR 0 47
52628: PUSH
52629: LD_INT 2
52631: NEG
52632: PUSH
52633: LD_INT 3
52635: NEG
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: LD_INT 1
52643: NEG
52644: PUSH
52645: LD_INT 3
52647: NEG
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: PUSH
52653: EMPTY
52654: LIST
52655: LIST
52656: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52657: LD_ADDR_VAR 0 48
52661: PUSH
52662: LD_INT 1
52664: PUSH
52665: LD_INT 2
52667: NEG
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: LD_INT 2
52675: PUSH
52676: LD_INT 1
52678: NEG
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
52688: LD_ADDR_VAR 0 49
52692: PUSH
52693: LD_INT 3
52695: PUSH
52696: LD_INT 1
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: LD_INT 3
52705: PUSH
52706: LD_INT 2
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
52717: LD_ADDR_VAR 0 50
52721: PUSH
52722: LD_INT 2
52724: PUSH
52725: LD_INT 3
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: LD_INT 1
52734: PUSH
52735: LD_INT 3
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: EMPTY
52743: LIST
52744: LIST
52745: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52746: LD_ADDR_VAR 0 51
52750: PUSH
52751: LD_INT 1
52753: NEG
52754: PUSH
52755: LD_INT 2
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: PUSH
52762: LD_INT 2
52764: NEG
52765: PUSH
52766: LD_INT 1
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: PUSH
52773: EMPTY
52774: LIST
52775: LIST
52776: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52777: LD_ADDR_VAR 0 52
52781: PUSH
52782: LD_INT 3
52784: NEG
52785: PUSH
52786: LD_INT 1
52788: NEG
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 3
52796: NEG
52797: PUSH
52798: LD_INT 2
52800: NEG
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52810: LD_ADDR_VAR 0 53
52814: PUSH
52815: LD_INT 1
52817: NEG
52818: PUSH
52819: LD_INT 3
52821: NEG
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: LD_INT 0
52829: PUSH
52830: LD_INT 3
52832: NEG
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: LD_INT 1
52840: PUSH
52841: LD_INT 2
52843: NEG
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: PUSH
52849: EMPTY
52850: LIST
52851: LIST
52852: LIST
52853: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52854: LD_ADDR_VAR 0 54
52858: PUSH
52859: LD_INT 2
52861: PUSH
52862: LD_INT 1
52864: NEG
52865: PUSH
52866: EMPTY
52867: LIST
52868: LIST
52869: PUSH
52870: LD_INT 3
52872: PUSH
52873: LD_INT 0
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: PUSH
52880: LD_INT 3
52882: PUSH
52883: LD_INT 1
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: PUSH
52890: EMPTY
52891: LIST
52892: LIST
52893: LIST
52894: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52895: LD_ADDR_VAR 0 55
52899: PUSH
52900: LD_INT 3
52902: PUSH
52903: LD_INT 2
52905: PUSH
52906: EMPTY
52907: LIST
52908: LIST
52909: PUSH
52910: LD_INT 3
52912: PUSH
52913: LD_INT 3
52915: PUSH
52916: EMPTY
52917: LIST
52918: LIST
52919: PUSH
52920: LD_INT 2
52922: PUSH
52923: LD_INT 3
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: LIST
52934: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52935: LD_ADDR_VAR 0 56
52939: PUSH
52940: LD_INT 1
52942: PUSH
52943: LD_INT 3
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: LD_INT 0
52952: PUSH
52953: LD_INT 3
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: PUSH
52960: LD_INT 1
52962: NEG
52963: PUSH
52964: LD_INT 2
52966: PUSH
52967: EMPTY
52968: LIST
52969: LIST
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: LIST
52975: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52976: LD_ADDR_VAR 0 57
52980: PUSH
52981: LD_INT 2
52983: NEG
52984: PUSH
52985: LD_INT 1
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: LD_INT 3
52994: NEG
52995: PUSH
52996: LD_INT 0
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: LD_INT 3
53005: NEG
53006: PUSH
53007: LD_INT 1
53009: NEG
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: LIST
53019: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53020: LD_ADDR_VAR 0 58
53024: PUSH
53025: LD_INT 2
53027: NEG
53028: PUSH
53029: LD_INT 3
53031: NEG
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: PUSH
53037: LD_INT 3
53039: NEG
53040: PUSH
53041: LD_INT 2
53043: NEG
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 3
53051: NEG
53052: PUSH
53053: LD_INT 3
53055: NEG
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: LIST
53065: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
53066: LD_ADDR_VAR 0 59
53070: PUSH
53071: LD_INT 1
53073: NEG
53074: PUSH
53075: LD_INT 2
53077: NEG
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: LD_INT 0
53085: PUSH
53086: LD_INT 2
53088: NEG
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: LD_INT 1
53096: PUSH
53097: LD_INT 1
53099: NEG
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: LIST
53109: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53110: LD_ADDR_VAR 0 60
53114: PUSH
53115: LD_INT 1
53117: PUSH
53118: LD_INT 1
53120: NEG
53121: PUSH
53122: EMPTY
53123: LIST
53124: LIST
53125: PUSH
53126: LD_INT 2
53128: PUSH
53129: LD_INT 0
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: PUSH
53136: LD_INT 2
53138: PUSH
53139: LD_INT 1
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: PUSH
53146: EMPTY
53147: LIST
53148: LIST
53149: LIST
53150: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53151: LD_ADDR_VAR 0 61
53155: PUSH
53156: LD_INT 2
53158: PUSH
53159: LD_INT 1
53161: PUSH
53162: EMPTY
53163: LIST
53164: LIST
53165: PUSH
53166: LD_INT 2
53168: PUSH
53169: LD_INT 2
53171: PUSH
53172: EMPTY
53173: LIST
53174: LIST
53175: PUSH
53176: LD_INT 1
53178: PUSH
53179: LD_INT 2
53181: PUSH
53182: EMPTY
53183: LIST
53184: LIST
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: LIST
53190: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53191: LD_ADDR_VAR 0 62
53195: PUSH
53196: LD_INT 1
53198: PUSH
53199: LD_INT 2
53201: PUSH
53202: EMPTY
53203: LIST
53204: LIST
53205: PUSH
53206: LD_INT 0
53208: PUSH
53209: LD_INT 2
53211: PUSH
53212: EMPTY
53213: LIST
53214: LIST
53215: PUSH
53216: LD_INT 1
53218: NEG
53219: PUSH
53220: LD_INT 1
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: PUSH
53227: EMPTY
53228: LIST
53229: LIST
53230: LIST
53231: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53232: LD_ADDR_VAR 0 63
53236: PUSH
53237: LD_INT 1
53239: NEG
53240: PUSH
53241: LD_INT 1
53243: PUSH
53244: EMPTY
53245: LIST
53246: LIST
53247: PUSH
53248: LD_INT 2
53250: NEG
53251: PUSH
53252: LD_INT 0
53254: PUSH
53255: EMPTY
53256: LIST
53257: LIST
53258: PUSH
53259: LD_INT 2
53261: NEG
53262: PUSH
53263: LD_INT 1
53265: NEG
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: LIST
53275: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53276: LD_ADDR_VAR 0 64
53280: PUSH
53281: LD_INT 1
53283: NEG
53284: PUSH
53285: LD_INT 2
53287: NEG
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: PUSH
53293: LD_INT 2
53295: NEG
53296: PUSH
53297: LD_INT 1
53299: NEG
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: PUSH
53305: LD_INT 2
53307: NEG
53308: PUSH
53309: LD_INT 2
53311: NEG
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: LIST
53321: ST_TO_ADDR
// end ; 2 :
53322: GO 56588
53324: LD_INT 2
53326: DOUBLE
53327: EQUAL
53328: IFTRUE 53332
53330: GO 56587
53332: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
53333: LD_ADDR_VAR 0 29
53337: PUSH
53338: LD_INT 4
53340: PUSH
53341: LD_INT 0
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 4
53350: PUSH
53351: LD_INT 1
53353: NEG
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 5
53361: PUSH
53362: LD_INT 0
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: PUSH
53369: LD_INT 5
53371: PUSH
53372: LD_INT 1
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 4
53381: PUSH
53382: LD_INT 1
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: LD_INT 3
53391: PUSH
53392: LD_INT 0
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 3
53401: PUSH
53402: LD_INT 1
53404: NEG
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: LD_INT 3
53412: PUSH
53413: LD_INT 2
53415: NEG
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: LD_INT 5
53423: PUSH
53424: LD_INT 2
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: PUSH
53431: LD_INT 3
53433: PUSH
53434: LD_INT 3
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: PUSH
53441: LD_INT 3
53443: PUSH
53444: LD_INT 2
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: PUSH
53451: LD_INT 4
53453: PUSH
53454: LD_INT 3
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: PUSH
53461: LD_INT 4
53463: PUSH
53464: LD_INT 4
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: LD_INT 3
53473: PUSH
53474: LD_INT 4
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: PUSH
53481: LD_INT 2
53483: PUSH
53484: LD_INT 3
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: LD_INT 2
53493: PUSH
53494: LD_INT 2
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: PUSH
53501: LD_INT 4
53503: PUSH
53504: LD_INT 2
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: PUSH
53511: LD_INT 2
53513: PUSH
53514: LD_INT 4
53516: PUSH
53517: EMPTY
53518: LIST
53519: LIST
53520: PUSH
53521: LD_INT 0
53523: PUSH
53524: LD_INT 4
53526: PUSH
53527: EMPTY
53528: LIST
53529: LIST
53530: PUSH
53531: LD_INT 0
53533: PUSH
53534: LD_INT 3
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: PUSH
53541: LD_INT 1
53543: PUSH
53544: LD_INT 4
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: PUSH
53551: LD_INT 1
53553: PUSH
53554: LD_INT 5
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: PUSH
53561: LD_INT 0
53563: PUSH
53564: LD_INT 5
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: PUSH
53571: LD_INT 1
53573: NEG
53574: PUSH
53575: LD_INT 4
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: LD_INT 1
53584: NEG
53585: PUSH
53586: LD_INT 3
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: PUSH
53593: LD_INT 2
53595: PUSH
53596: LD_INT 5
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: LD_INT 2
53605: NEG
53606: PUSH
53607: LD_INT 3
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: LD_INT 3
53616: NEG
53617: PUSH
53618: LD_INT 0
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: LD_INT 3
53627: NEG
53628: PUSH
53629: LD_INT 1
53631: NEG
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: LD_INT 2
53639: NEG
53640: PUSH
53641: LD_INT 0
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: PUSH
53648: LD_INT 2
53650: NEG
53651: PUSH
53652: LD_INT 1
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: LD_INT 3
53661: NEG
53662: PUSH
53663: LD_INT 1
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 4
53672: NEG
53673: PUSH
53674: LD_INT 0
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: PUSH
53681: LD_INT 4
53683: NEG
53684: PUSH
53685: LD_INT 1
53687: NEG
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: PUSH
53693: LD_INT 4
53695: NEG
53696: PUSH
53697: LD_INT 2
53699: NEG
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 2
53707: NEG
53708: PUSH
53709: LD_INT 2
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 4
53718: NEG
53719: PUSH
53720: LD_INT 4
53722: NEG
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 4
53730: NEG
53731: PUSH
53732: LD_INT 5
53734: NEG
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: LD_INT 3
53742: NEG
53743: PUSH
53744: LD_INT 4
53746: NEG
53747: PUSH
53748: EMPTY
53749: LIST
53750: LIST
53751: PUSH
53752: LD_INT 3
53754: NEG
53755: PUSH
53756: LD_INT 3
53758: NEG
53759: PUSH
53760: EMPTY
53761: LIST
53762: LIST
53763: PUSH
53764: LD_INT 4
53766: NEG
53767: PUSH
53768: LD_INT 3
53770: NEG
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: PUSH
53776: LD_INT 5
53778: NEG
53779: PUSH
53780: LD_INT 4
53782: NEG
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: PUSH
53788: LD_INT 5
53790: NEG
53791: PUSH
53792: LD_INT 5
53794: NEG
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: PUSH
53800: LD_INT 3
53802: NEG
53803: PUSH
53804: LD_INT 5
53806: NEG
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: LD_INT 5
53814: NEG
53815: PUSH
53816: LD_INT 3
53818: NEG
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: LIST
53844: LIST
53845: LIST
53846: LIST
53847: LIST
53848: LIST
53849: LIST
53850: LIST
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: LIST
53861: LIST
53862: LIST
53863: LIST
53864: LIST
53865: LIST
53866: LIST
53867: LIST
53868: LIST
53869: LIST
53870: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
53871: LD_ADDR_VAR 0 30
53875: PUSH
53876: LD_INT 4
53878: PUSH
53879: LD_INT 4
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: LD_INT 4
53888: PUSH
53889: LD_INT 3
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 5
53898: PUSH
53899: LD_INT 4
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: LD_INT 5
53908: PUSH
53909: LD_INT 5
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: LD_INT 4
53918: PUSH
53919: LD_INT 5
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: LD_INT 3
53928: PUSH
53929: LD_INT 4
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: PUSH
53936: LD_INT 3
53938: PUSH
53939: LD_INT 3
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: LD_INT 5
53948: PUSH
53949: LD_INT 3
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: PUSH
53956: LD_INT 3
53958: PUSH
53959: LD_INT 5
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: PUSH
53966: LD_INT 0
53968: PUSH
53969: LD_INT 3
53971: PUSH
53972: EMPTY
53973: LIST
53974: LIST
53975: PUSH
53976: LD_INT 0
53978: PUSH
53979: LD_INT 2
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: LD_INT 1
53988: PUSH
53989: LD_INT 3
53991: PUSH
53992: EMPTY
53993: LIST
53994: LIST
53995: PUSH
53996: LD_INT 1
53998: PUSH
53999: LD_INT 4
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: PUSH
54006: LD_INT 0
54008: PUSH
54009: LD_INT 4
54011: PUSH
54012: EMPTY
54013: LIST
54014: LIST
54015: PUSH
54016: LD_INT 1
54018: NEG
54019: PUSH
54020: LD_INT 3
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: LD_INT 1
54029: NEG
54030: PUSH
54031: LD_INT 2
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: PUSH
54038: LD_INT 2
54040: PUSH
54041: LD_INT 4
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: LD_INT 2
54050: NEG
54051: PUSH
54052: LD_INT 2
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 4
54061: NEG
54062: PUSH
54063: LD_INT 0
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: LD_INT 4
54072: NEG
54073: PUSH
54074: LD_INT 1
54076: NEG
54077: PUSH
54078: EMPTY
54079: LIST
54080: LIST
54081: PUSH
54082: LD_INT 3
54084: NEG
54085: PUSH
54086: LD_INT 0
54088: PUSH
54089: EMPTY
54090: LIST
54091: LIST
54092: PUSH
54093: LD_INT 3
54095: NEG
54096: PUSH
54097: LD_INT 1
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: PUSH
54104: LD_INT 4
54106: NEG
54107: PUSH
54108: LD_INT 1
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: PUSH
54115: LD_INT 5
54117: NEG
54118: PUSH
54119: LD_INT 0
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: PUSH
54126: LD_INT 5
54128: NEG
54129: PUSH
54130: LD_INT 1
54132: NEG
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: PUSH
54138: LD_INT 5
54140: NEG
54141: PUSH
54142: LD_INT 2
54144: NEG
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_INT 3
54152: NEG
54153: PUSH
54154: LD_INT 2
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: PUSH
54161: LD_INT 3
54163: NEG
54164: PUSH
54165: LD_INT 3
54167: NEG
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: PUSH
54173: LD_INT 3
54175: NEG
54176: PUSH
54177: LD_INT 4
54179: NEG
54180: PUSH
54181: EMPTY
54182: LIST
54183: LIST
54184: PUSH
54185: LD_INT 2
54187: NEG
54188: PUSH
54189: LD_INT 3
54191: NEG
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: PUSH
54197: LD_INT 2
54199: NEG
54200: PUSH
54201: LD_INT 2
54203: NEG
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 3
54211: NEG
54212: PUSH
54213: LD_INT 2
54215: NEG
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: LD_INT 4
54223: NEG
54224: PUSH
54225: LD_INT 3
54227: NEG
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: LD_INT 4
54235: NEG
54236: PUSH
54237: LD_INT 4
54239: NEG
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: LD_INT 2
54247: NEG
54248: PUSH
54249: LD_INT 4
54251: NEG
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: PUSH
54257: LD_INT 4
54259: NEG
54260: PUSH
54261: LD_INT 2
54263: NEG
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: LD_INT 0
54271: PUSH
54272: LD_INT 4
54274: NEG
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: LD_INT 0
54282: PUSH
54283: LD_INT 5
54285: NEG
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: PUSH
54291: LD_INT 1
54293: PUSH
54294: LD_INT 4
54296: NEG
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: PUSH
54302: LD_INT 1
54304: PUSH
54305: LD_INT 3
54307: NEG
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: PUSH
54313: LD_INT 0
54315: PUSH
54316: LD_INT 3
54318: NEG
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: PUSH
54324: LD_INT 1
54326: NEG
54327: PUSH
54328: LD_INT 4
54330: NEG
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: LD_INT 1
54338: NEG
54339: PUSH
54340: LD_INT 5
54342: NEG
54343: PUSH
54344: EMPTY
54345: LIST
54346: LIST
54347: PUSH
54348: LD_INT 2
54350: PUSH
54351: LD_INT 3
54353: NEG
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: PUSH
54359: LD_INT 2
54361: NEG
54362: PUSH
54363: LD_INT 5
54365: NEG
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: LIST
54375: LIST
54376: LIST
54377: LIST
54378: LIST
54379: LIST
54380: LIST
54381: LIST
54382: LIST
54383: LIST
54384: LIST
54385: LIST
54386: LIST
54387: LIST
54388: LIST
54389: LIST
54390: LIST
54391: LIST
54392: LIST
54393: LIST
54394: LIST
54395: LIST
54396: LIST
54397: LIST
54398: LIST
54399: LIST
54400: LIST
54401: LIST
54402: LIST
54403: LIST
54404: LIST
54405: LIST
54406: LIST
54407: LIST
54408: LIST
54409: LIST
54410: LIST
54411: LIST
54412: LIST
54413: LIST
54414: LIST
54415: LIST
54416: LIST
54417: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
54418: LD_ADDR_VAR 0 31
54422: PUSH
54423: LD_INT 0
54425: PUSH
54426: LD_INT 4
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: PUSH
54433: LD_INT 0
54435: PUSH
54436: LD_INT 3
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: PUSH
54443: LD_INT 1
54445: PUSH
54446: LD_INT 4
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 1
54455: PUSH
54456: LD_INT 5
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 0
54465: PUSH
54466: LD_INT 5
54468: PUSH
54469: EMPTY
54470: LIST
54471: LIST
54472: PUSH
54473: LD_INT 1
54475: NEG
54476: PUSH
54477: LD_INT 4
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: PUSH
54484: LD_INT 1
54486: NEG
54487: PUSH
54488: LD_INT 3
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: LD_INT 2
54497: PUSH
54498: LD_INT 5
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: PUSH
54505: LD_INT 2
54507: NEG
54508: PUSH
54509: LD_INT 3
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: PUSH
54516: LD_INT 3
54518: NEG
54519: PUSH
54520: LD_INT 0
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: PUSH
54527: LD_INT 3
54529: NEG
54530: PUSH
54531: LD_INT 1
54533: NEG
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: LD_INT 2
54541: NEG
54542: PUSH
54543: LD_INT 0
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: PUSH
54550: LD_INT 2
54552: NEG
54553: PUSH
54554: LD_INT 1
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: LD_INT 3
54563: NEG
54564: PUSH
54565: LD_INT 1
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: LD_INT 4
54574: NEG
54575: PUSH
54576: LD_INT 0
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: PUSH
54583: LD_INT 4
54585: NEG
54586: PUSH
54587: LD_INT 1
54589: NEG
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: PUSH
54595: LD_INT 4
54597: NEG
54598: PUSH
54599: LD_INT 2
54601: NEG
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: PUSH
54607: LD_INT 2
54609: NEG
54610: PUSH
54611: LD_INT 2
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 4
54620: NEG
54621: PUSH
54622: LD_INT 4
54624: NEG
54625: PUSH
54626: EMPTY
54627: LIST
54628: LIST
54629: PUSH
54630: LD_INT 4
54632: NEG
54633: PUSH
54634: LD_INT 5
54636: NEG
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: LD_INT 3
54644: NEG
54645: PUSH
54646: LD_INT 4
54648: NEG
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: PUSH
54654: LD_INT 3
54656: NEG
54657: PUSH
54658: LD_INT 3
54660: NEG
54661: PUSH
54662: EMPTY
54663: LIST
54664: LIST
54665: PUSH
54666: LD_INT 4
54668: NEG
54669: PUSH
54670: LD_INT 3
54672: NEG
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: PUSH
54678: LD_INT 5
54680: NEG
54681: PUSH
54682: LD_INT 4
54684: NEG
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: LD_INT 5
54692: NEG
54693: PUSH
54694: LD_INT 5
54696: NEG
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: PUSH
54702: LD_INT 3
54704: NEG
54705: PUSH
54706: LD_INT 5
54708: NEG
54709: PUSH
54710: EMPTY
54711: LIST
54712: LIST
54713: PUSH
54714: LD_INT 5
54716: NEG
54717: PUSH
54718: LD_INT 3
54720: NEG
54721: PUSH
54722: EMPTY
54723: LIST
54724: LIST
54725: PUSH
54726: LD_INT 0
54728: PUSH
54729: LD_INT 3
54731: NEG
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: PUSH
54737: LD_INT 0
54739: PUSH
54740: LD_INT 4
54742: NEG
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: PUSH
54748: LD_INT 1
54750: PUSH
54751: LD_INT 3
54753: NEG
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: LD_INT 1
54761: PUSH
54762: LD_INT 2
54764: NEG
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: LD_INT 0
54772: PUSH
54773: LD_INT 2
54775: NEG
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: PUSH
54781: LD_INT 1
54783: NEG
54784: PUSH
54785: LD_INT 3
54787: NEG
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: LD_INT 1
54795: NEG
54796: PUSH
54797: LD_INT 4
54799: NEG
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: LD_INT 2
54807: PUSH
54808: LD_INT 2
54810: NEG
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: PUSH
54816: LD_INT 2
54818: NEG
54819: PUSH
54820: LD_INT 4
54822: NEG
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: LD_INT 4
54830: PUSH
54831: LD_INT 0
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: PUSH
54838: LD_INT 4
54840: PUSH
54841: LD_INT 1
54843: NEG
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 5
54851: PUSH
54852: LD_INT 0
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: PUSH
54859: LD_INT 5
54861: PUSH
54862: LD_INT 1
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: PUSH
54869: LD_INT 4
54871: PUSH
54872: LD_INT 1
54874: PUSH
54875: EMPTY
54876: LIST
54877: LIST
54878: PUSH
54879: LD_INT 3
54881: PUSH
54882: LD_INT 0
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: LD_INT 3
54891: PUSH
54892: LD_INT 1
54894: NEG
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 3
54902: PUSH
54903: LD_INT 2
54905: NEG
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: LD_INT 5
54913: PUSH
54914: LD_INT 2
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: LIST
54925: LIST
54926: LIST
54927: LIST
54928: LIST
54929: LIST
54930: LIST
54931: LIST
54932: LIST
54933: LIST
54934: LIST
54935: LIST
54936: LIST
54937: LIST
54938: LIST
54939: LIST
54940: LIST
54941: LIST
54942: LIST
54943: LIST
54944: LIST
54945: LIST
54946: LIST
54947: LIST
54948: LIST
54949: LIST
54950: LIST
54951: LIST
54952: LIST
54953: LIST
54954: LIST
54955: LIST
54956: LIST
54957: LIST
54958: LIST
54959: LIST
54960: LIST
54961: LIST
54962: LIST
54963: LIST
54964: LIST
54965: LIST
54966: LIST
54967: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
54968: LD_ADDR_VAR 0 32
54972: PUSH
54973: LD_INT 4
54975: NEG
54976: PUSH
54977: LD_INT 0
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: PUSH
54984: LD_INT 4
54986: NEG
54987: PUSH
54988: LD_INT 1
54990: NEG
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: LD_INT 3
54998: NEG
54999: PUSH
55000: LD_INT 0
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: PUSH
55007: LD_INT 3
55009: NEG
55010: PUSH
55011: LD_INT 1
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: PUSH
55018: LD_INT 4
55020: NEG
55021: PUSH
55022: LD_INT 1
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: PUSH
55029: LD_INT 5
55031: NEG
55032: PUSH
55033: LD_INT 0
55035: PUSH
55036: EMPTY
55037: LIST
55038: LIST
55039: PUSH
55040: LD_INT 5
55042: NEG
55043: PUSH
55044: LD_INT 1
55046: NEG
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: PUSH
55052: LD_INT 5
55054: NEG
55055: PUSH
55056: LD_INT 2
55058: NEG
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: PUSH
55064: LD_INT 3
55066: NEG
55067: PUSH
55068: LD_INT 2
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: LD_INT 3
55077: NEG
55078: PUSH
55079: LD_INT 3
55081: NEG
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: LD_INT 3
55089: NEG
55090: PUSH
55091: LD_INT 4
55093: NEG
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: PUSH
55099: LD_INT 2
55101: NEG
55102: PUSH
55103: LD_INT 3
55105: NEG
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: PUSH
55111: LD_INT 2
55113: NEG
55114: PUSH
55115: LD_INT 2
55117: NEG
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: PUSH
55123: LD_INT 3
55125: NEG
55126: PUSH
55127: LD_INT 2
55129: NEG
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: PUSH
55135: LD_INT 4
55137: NEG
55138: PUSH
55139: LD_INT 3
55141: NEG
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: PUSH
55147: LD_INT 4
55149: NEG
55150: PUSH
55151: LD_INT 4
55153: NEG
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: PUSH
55159: LD_INT 2
55161: NEG
55162: PUSH
55163: LD_INT 4
55165: NEG
55166: PUSH
55167: EMPTY
55168: LIST
55169: LIST
55170: PUSH
55171: LD_INT 4
55173: NEG
55174: PUSH
55175: LD_INT 2
55177: NEG
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: LD_INT 0
55185: PUSH
55186: LD_INT 4
55188: NEG
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 0
55196: PUSH
55197: LD_INT 5
55199: NEG
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: LD_INT 1
55207: PUSH
55208: LD_INT 4
55210: NEG
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: LD_INT 1
55218: PUSH
55219: LD_INT 3
55221: NEG
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: PUSH
55227: LD_INT 0
55229: PUSH
55230: LD_INT 3
55232: NEG
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: PUSH
55238: LD_INT 1
55240: NEG
55241: PUSH
55242: LD_INT 4
55244: NEG
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PUSH
55250: LD_INT 1
55252: NEG
55253: PUSH
55254: LD_INT 5
55256: NEG
55257: PUSH
55258: EMPTY
55259: LIST
55260: LIST
55261: PUSH
55262: LD_INT 2
55264: PUSH
55265: LD_INT 3
55267: NEG
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: PUSH
55273: LD_INT 2
55275: NEG
55276: PUSH
55277: LD_INT 5
55279: NEG
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: PUSH
55285: LD_INT 3
55287: PUSH
55288: LD_INT 0
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: PUSH
55295: LD_INT 3
55297: PUSH
55298: LD_INT 1
55300: NEG
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PUSH
55306: LD_INT 4
55308: PUSH
55309: LD_INT 0
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: LD_INT 4
55318: PUSH
55319: LD_INT 1
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: PUSH
55326: LD_INT 3
55328: PUSH
55329: LD_INT 1
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: PUSH
55336: LD_INT 2
55338: PUSH
55339: LD_INT 0
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 2
55348: PUSH
55349: LD_INT 1
55351: NEG
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: LD_INT 2
55359: PUSH
55360: LD_INT 2
55362: NEG
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: LD_INT 4
55370: PUSH
55371: LD_INT 2
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: PUSH
55378: LD_INT 4
55380: PUSH
55381: LD_INT 4
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: LD_INT 4
55390: PUSH
55391: LD_INT 3
55393: PUSH
55394: EMPTY
55395: LIST
55396: LIST
55397: PUSH
55398: LD_INT 5
55400: PUSH
55401: LD_INT 4
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: PUSH
55408: LD_INT 5
55410: PUSH
55411: LD_INT 5
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: PUSH
55418: LD_INT 4
55420: PUSH
55421: LD_INT 5
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: LD_INT 3
55430: PUSH
55431: LD_INT 4
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: LD_INT 3
55440: PUSH
55441: LD_INT 3
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: PUSH
55448: LD_INT 5
55450: PUSH
55451: LD_INT 3
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: LD_INT 3
55460: PUSH
55461: LD_INT 5
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: EMPTY
55469: LIST
55470: LIST
55471: LIST
55472: LIST
55473: LIST
55474: LIST
55475: LIST
55476: LIST
55477: LIST
55478: LIST
55479: LIST
55480: LIST
55481: LIST
55482: LIST
55483: LIST
55484: LIST
55485: LIST
55486: LIST
55487: LIST
55488: LIST
55489: LIST
55490: LIST
55491: LIST
55492: LIST
55493: LIST
55494: LIST
55495: LIST
55496: LIST
55497: LIST
55498: LIST
55499: LIST
55500: LIST
55501: LIST
55502: LIST
55503: LIST
55504: LIST
55505: LIST
55506: LIST
55507: LIST
55508: LIST
55509: LIST
55510: LIST
55511: LIST
55512: LIST
55513: LIST
55514: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
55515: LD_ADDR_VAR 0 33
55519: PUSH
55520: LD_INT 4
55522: NEG
55523: PUSH
55524: LD_INT 4
55526: NEG
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: PUSH
55532: LD_INT 4
55534: NEG
55535: PUSH
55536: LD_INT 5
55538: NEG
55539: PUSH
55540: EMPTY
55541: LIST
55542: LIST
55543: PUSH
55544: LD_INT 3
55546: NEG
55547: PUSH
55548: LD_INT 4
55550: NEG
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: PUSH
55556: LD_INT 3
55558: NEG
55559: PUSH
55560: LD_INT 3
55562: NEG
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: PUSH
55568: LD_INT 4
55570: NEG
55571: PUSH
55572: LD_INT 3
55574: NEG
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 5
55582: NEG
55583: PUSH
55584: LD_INT 4
55586: NEG
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: LD_INT 5
55594: NEG
55595: PUSH
55596: LD_INT 5
55598: NEG
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: PUSH
55604: LD_INT 3
55606: NEG
55607: PUSH
55608: LD_INT 5
55610: NEG
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 5
55618: NEG
55619: PUSH
55620: LD_INT 3
55622: NEG
55623: PUSH
55624: EMPTY
55625: LIST
55626: LIST
55627: PUSH
55628: LD_INT 0
55630: PUSH
55631: LD_INT 3
55633: NEG
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 0
55641: PUSH
55642: LD_INT 4
55644: NEG
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: PUSH
55650: LD_INT 1
55652: PUSH
55653: LD_INT 3
55655: NEG
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: PUSH
55661: LD_INT 1
55663: PUSH
55664: LD_INT 2
55666: NEG
55667: PUSH
55668: EMPTY
55669: LIST
55670: LIST
55671: PUSH
55672: LD_INT 0
55674: PUSH
55675: LD_INT 2
55677: NEG
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: PUSH
55683: LD_INT 1
55685: NEG
55686: PUSH
55687: LD_INT 3
55689: NEG
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: PUSH
55695: LD_INT 1
55697: NEG
55698: PUSH
55699: LD_INT 4
55701: NEG
55702: PUSH
55703: EMPTY
55704: LIST
55705: LIST
55706: PUSH
55707: LD_INT 2
55709: PUSH
55710: LD_INT 2
55712: NEG
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: PUSH
55718: LD_INT 2
55720: NEG
55721: PUSH
55722: LD_INT 4
55724: NEG
55725: PUSH
55726: EMPTY
55727: LIST
55728: LIST
55729: PUSH
55730: LD_INT 4
55732: PUSH
55733: LD_INT 0
55735: PUSH
55736: EMPTY
55737: LIST
55738: LIST
55739: PUSH
55740: LD_INT 4
55742: PUSH
55743: LD_INT 1
55745: NEG
55746: PUSH
55747: EMPTY
55748: LIST
55749: LIST
55750: PUSH
55751: LD_INT 5
55753: PUSH
55754: LD_INT 0
55756: PUSH
55757: EMPTY
55758: LIST
55759: LIST
55760: PUSH
55761: LD_INT 5
55763: PUSH
55764: LD_INT 1
55766: PUSH
55767: EMPTY
55768: LIST
55769: LIST
55770: PUSH
55771: LD_INT 4
55773: PUSH
55774: LD_INT 1
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: PUSH
55781: LD_INT 3
55783: PUSH
55784: LD_INT 0
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 3
55793: PUSH
55794: LD_INT 1
55796: NEG
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PUSH
55802: LD_INT 3
55804: PUSH
55805: LD_INT 2
55807: NEG
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 5
55815: PUSH
55816: LD_INT 2
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: PUSH
55823: LD_INT 3
55825: PUSH
55826: LD_INT 3
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: PUSH
55833: LD_INT 3
55835: PUSH
55836: LD_INT 2
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: PUSH
55843: LD_INT 4
55845: PUSH
55846: LD_INT 3
55848: PUSH
55849: EMPTY
55850: LIST
55851: LIST
55852: PUSH
55853: LD_INT 4
55855: PUSH
55856: LD_INT 4
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: PUSH
55863: LD_INT 3
55865: PUSH
55866: LD_INT 4
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: PUSH
55873: LD_INT 2
55875: PUSH
55876: LD_INT 3
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: PUSH
55883: LD_INT 2
55885: PUSH
55886: LD_INT 2
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: PUSH
55893: LD_INT 4
55895: PUSH
55896: LD_INT 2
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: PUSH
55903: LD_INT 2
55905: PUSH
55906: LD_INT 4
55908: PUSH
55909: EMPTY
55910: LIST
55911: LIST
55912: PUSH
55913: LD_INT 0
55915: PUSH
55916: LD_INT 4
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: PUSH
55923: LD_INT 0
55925: PUSH
55926: LD_INT 3
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PUSH
55933: LD_INT 1
55935: PUSH
55936: LD_INT 4
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: PUSH
55943: LD_INT 1
55945: PUSH
55946: LD_INT 5
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PUSH
55953: LD_INT 0
55955: PUSH
55956: LD_INT 5
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: LD_INT 1
55965: NEG
55966: PUSH
55967: LD_INT 4
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: PUSH
55974: LD_INT 1
55976: NEG
55977: PUSH
55978: LD_INT 3
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: PUSH
55985: LD_INT 2
55987: PUSH
55988: LD_INT 5
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: LD_INT 2
55997: NEG
55998: PUSH
55999: LD_INT 3
56001: PUSH
56002: EMPTY
56003: LIST
56004: LIST
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: LIST
56010: LIST
56011: LIST
56012: LIST
56013: LIST
56014: LIST
56015: LIST
56016: LIST
56017: LIST
56018: LIST
56019: LIST
56020: LIST
56021: LIST
56022: LIST
56023: LIST
56024: LIST
56025: LIST
56026: LIST
56027: LIST
56028: LIST
56029: LIST
56030: LIST
56031: LIST
56032: LIST
56033: LIST
56034: LIST
56035: LIST
56036: LIST
56037: LIST
56038: LIST
56039: LIST
56040: LIST
56041: LIST
56042: LIST
56043: LIST
56044: LIST
56045: LIST
56046: LIST
56047: LIST
56048: LIST
56049: LIST
56050: LIST
56051: LIST
56052: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
56053: LD_ADDR_VAR 0 34
56057: PUSH
56058: LD_INT 0
56060: PUSH
56061: LD_INT 4
56063: NEG
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 0
56071: PUSH
56072: LD_INT 5
56074: NEG
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: LD_INT 1
56082: PUSH
56083: LD_INT 4
56085: NEG
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: PUSH
56091: LD_INT 1
56093: PUSH
56094: LD_INT 3
56096: NEG
56097: PUSH
56098: EMPTY
56099: LIST
56100: LIST
56101: PUSH
56102: LD_INT 0
56104: PUSH
56105: LD_INT 3
56107: NEG
56108: PUSH
56109: EMPTY
56110: LIST
56111: LIST
56112: PUSH
56113: LD_INT 1
56115: NEG
56116: PUSH
56117: LD_INT 4
56119: NEG
56120: PUSH
56121: EMPTY
56122: LIST
56123: LIST
56124: PUSH
56125: LD_INT 1
56127: NEG
56128: PUSH
56129: LD_INT 5
56131: NEG
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PUSH
56137: LD_INT 2
56139: PUSH
56140: LD_INT 3
56142: NEG
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: PUSH
56148: LD_INT 2
56150: NEG
56151: PUSH
56152: LD_INT 5
56154: NEG
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: PUSH
56160: LD_INT 3
56162: PUSH
56163: LD_INT 0
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: PUSH
56170: LD_INT 3
56172: PUSH
56173: LD_INT 1
56175: NEG
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: LD_INT 4
56183: PUSH
56184: LD_INT 0
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: LD_INT 4
56193: PUSH
56194: LD_INT 1
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PUSH
56201: LD_INT 3
56203: PUSH
56204: LD_INT 1
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: LD_INT 2
56213: PUSH
56214: LD_INT 0
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: LD_INT 2
56223: PUSH
56224: LD_INT 1
56226: NEG
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 2
56234: PUSH
56235: LD_INT 2
56237: NEG
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 4
56245: PUSH
56246: LD_INT 2
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 4
56255: PUSH
56256: LD_INT 4
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: LD_INT 4
56265: PUSH
56266: LD_INT 3
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: PUSH
56273: LD_INT 5
56275: PUSH
56276: LD_INT 4
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PUSH
56283: LD_INT 5
56285: PUSH
56286: LD_INT 5
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: LD_INT 4
56295: PUSH
56296: LD_INT 5
56298: PUSH
56299: EMPTY
56300: LIST
56301: LIST
56302: PUSH
56303: LD_INT 3
56305: PUSH
56306: LD_INT 4
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: LD_INT 3
56315: PUSH
56316: LD_INT 3
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 5
56325: PUSH
56326: LD_INT 3
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: LD_INT 3
56335: PUSH
56336: LD_INT 5
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: PUSH
56343: LD_INT 0
56345: PUSH
56346: LD_INT 3
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: LD_INT 0
56355: PUSH
56356: LD_INT 2
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: PUSH
56363: LD_INT 1
56365: PUSH
56366: LD_INT 3
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 1
56375: PUSH
56376: LD_INT 4
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 0
56385: PUSH
56386: LD_INT 4
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: LD_INT 1
56395: NEG
56396: PUSH
56397: LD_INT 3
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: LD_INT 1
56406: NEG
56407: PUSH
56408: LD_INT 2
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: PUSH
56415: LD_INT 2
56417: PUSH
56418: LD_INT 4
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: PUSH
56425: LD_INT 2
56427: NEG
56428: PUSH
56429: LD_INT 2
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: PUSH
56436: LD_INT 4
56438: NEG
56439: PUSH
56440: LD_INT 0
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: PUSH
56447: LD_INT 4
56449: NEG
56450: PUSH
56451: LD_INT 1
56453: NEG
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: LD_INT 3
56461: NEG
56462: PUSH
56463: LD_INT 0
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: LD_INT 3
56472: NEG
56473: PUSH
56474: LD_INT 1
56476: PUSH
56477: EMPTY
56478: LIST
56479: LIST
56480: PUSH
56481: LD_INT 4
56483: NEG
56484: PUSH
56485: LD_INT 1
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: PUSH
56492: LD_INT 5
56494: NEG
56495: PUSH
56496: LD_INT 0
56498: PUSH
56499: EMPTY
56500: LIST
56501: LIST
56502: PUSH
56503: LD_INT 5
56505: NEG
56506: PUSH
56507: LD_INT 1
56509: NEG
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: LD_INT 5
56517: NEG
56518: PUSH
56519: LD_INT 2
56521: NEG
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 3
56529: NEG
56530: PUSH
56531: LD_INT 2
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: LIST
56542: LIST
56543: LIST
56544: LIST
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: LIST
56550: LIST
56551: LIST
56552: LIST
56553: LIST
56554: LIST
56555: LIST
56556: LIST
56557: LIST
56558: LIST
56559: LIST
56560: LIST
56561: LIST
56562: LIST
56563: LIST
56564: LIST
56565: LIST
56566: LIST
56567: LIST
56568: LIST
56569: LIST
56570: LIST
56571: LIST
56572: LIST
56573: LIST
56574: LIST
56575: LIST
56576: LIST
56577: LIST
56578: LIST
56579: LIST
56580: LIST
56581: LIST
56582: LIST
56583: LIST
56584: ST_TO_ADDR
// end ; end ;
56585: GO 56588
56587: POP
// case btype of b_depot , b_warehouse :
56588: LD_VAR 0 1
56592: PUSH
56593: LD_INT 0
56595: DOUBLE
56596: EQUAL
56597: IFTRUE 56607
56599: LD_INT 1
56601: DOUBLE
56602: EQUAL
56603: IFTRUE 56607
56605: GO 56808
56607: POP
// case nation of nation_american :
56608: LD_VAR 0 5
56612: PUSH
56613: LD_INT 1
56615: DOUBLE
56616: EQUAL
56617: IFTRUE 56621
56619: GO 56677
56621: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
56622: LD_ADDR_VAR 0 9
56626: PUSH
56627: LD_VAR 0 11
56631: PUSH
56632: LD_VAR 0 12
56636: PUSH
56637: LD_VAR 0 13
56641: PUSH
56642: LD_VAR 0 14
56646: PUSH
56647: LD_VAR 0 15
56651: PUSH
56652: LD_VAR 0 16
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: LIST
56661: LIST
56662: LIST
56663: LIST
56664: PUSH
56665: LD_VAR 0 4
56669: PUSH
56670: LD_INT 1
56672: PLUS
56673: ARRAY
56674: ST_TO_ADDR
56675: GO 56806
56677: LD_INT 2
56679: DOUBLE
56680: EQUAL
56681: IFTRUE 56685
56683: GO 56741
56685: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
56686: LD_ADDR_VAR 0 9
56690: PUSH
56691: LD_VAR 0 17
56695: PUSH
56696: LD_VAR 0 18
56700: PUSH
56701: LD_VAR 0 19
56705: PUSH
56706: LD_VAR 0 20
56710: PUSH
56711: LD_VAR 0 21
56715: PUSH
56716: LD_VAR 0 22
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: LIST
56725: LIST
56726: LIST
56727: LIST
56728: PUSH
56729: LD_VAR 0 4
56733: PUSH
56734: LD_INT 1
56736: PLUS
56737: ARRAY
56738: ST_TO_ADDR
56739: GO 56806
56741: LD_INT 3
56743: DOUBLE
56744: EQUAL
56745: IFTRUE 56749
56747: GO 56805
56749: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
56750: LD_ADDR_VAR 0 9
56754: PUSH
56755: LD_VAR 0 23
56759: PUSH
56760: LD_VAR 0 24
56764: PUSH
56765: LD_VAR 0 25
56769: PUSH
56770: LD_VAR 0 26
56774: PUSH
56775: LD_VAR 0 27
56779: PUSH
56780: LD_VAR 0 28
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: LIST
56789: LIST
56790: LIST
56791: LIST
56792: PUSH
56793: LD_VAR 0 4
56797: PUSH
56798: LD_INT 1
56800: PLUS
56801: ARRAY
56802: ST_TO_ADDR
56803: GO 56806
56805: POP
56806: GO 57361
56808: LD_INT 2
56810: DOUBLE
56811: EQUAL
56812: IFTRUE 56822
56814: LD_INT 3
56816: DOUBLE
56817: EQUAL
56818: IFTRUE 56822
56820: GO 56878
56822: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
56823: LD_ADDR_VAR 0 9
56827: PUSH
56828: LD_VAR 0 29
56832: PUSH
56833: LD_VAR 0 30
56837: PUSH
56838: LD_VAR 0 31
56842: PUSH
56843: LD_VAR 0 32
56847: PUSH
56848: LD_VAR 0 33
56852: PUSH
56853: LD_VAR 0 34
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: LIST
56862: LIST
56863: LIST
56864: LIST
56865: PUSH
56866: LD_VAR 0 4
56870: PUSH
56871: LD_INT 1
56873: PLUS
56874: ARRAY
56875: ST_TO_ADDR
56876: GO 57361
56878: LD_INT 16
56880: DOUBLE
56881: EQUAL
56882: IFTRUE 56940
56884: LD_INT 17
56886: DOUBLE
56887: EQUAL
56888: IFTRUE 56940
56890: LD_INT 18
56892: DOUBLE
56893: EQUAL
56894: IFTRUE 56940
56896: LD_INT 19
56898: DOUBLE
56899: EQUAL
56900: IFTRUE 56940
56902: LD_INT 22
56904: DOUBLE
56905: EQUAL
56906: IFTRUE 56940
56908: LD_INT 20
56910: DOUBLE
56911: EQUAL
56912: IFTRUE 56940
56914: LD_INT 21
56916: DOUBLE
56917: EQUAL
56918: IFTRUE 56940
56920: LD_INT 23
56922: DOUBLE
56923: EQUAL
56924: IFTRUE 56940
56926: LD_INT 24
56928: DOUBLE
56929: EQUAL
56930: IFTRUE 56940
56932: LD_INT 25
56934: DOUBLE
56935: EQUAL
56936: IFTRUE 56940
56938: GO 56996
56940: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
56941: LD_ADDR_VAR 0 9
56945: PUSH
56946: LD_VAR 0 35
56950: PUSH
56951: LD_VAR 0 36
56955: PUSH
56956: LD_VAR 0 37
56960: PUSH
56961: LD_VAR 0 38
56965: PUSH
56966: LD_VAR 0 39
56970: PUSH
56971: LD_VAR 0 40
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: LIST
56980: LIST
56981: LIST
56982: LIST
56983: PUSH
56984: LD_VAR 0 4
56988: PUSH
56989: LD_INT 1
56991: PLUS
56992: ARRAY
56993: ST_TO_ADDR
56994: GO 57361
56996: LD_INT 6
56998: DOUBLE
56999: EQUAL
57000: IFTRUE 57052
57002: LD_INT 7
57004: DOUBLE
57005: EQUAL
57006: IFTRUE 57052
57008: LD_INT 8
57010: DOUBLE
57011: EQUAL
57012: IFTRUE 57052
57014: LD_INT 13
57016: DOUBLE
57017: EQUAL
57018: IFTRUE 57052
57020: LD_INT 12
57022: DOUBLE
57023: EQUAL
57024: IFTRUE 57052
57026: LD_INT 15
57028: DOUBLE
57029: EQUAL
57030: IFTRUE 57052
57032: LD_INT 11
57034: DOUBLE
57035: EQUAL
57036: IFTRUE 57052
57038: LD_INT 14
57040: DOUBLE
57041: EQUAL
57042: IFTRUE 57052
57044: LD_INT 10
57046: DOUBLE
57047: EQUAL
57048: IFTRUE 57052
57050: GO 57108
57052: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
57053: LD_ADDR_VAR 0 9
57057: PUSH
57058: LD_VAR 0 41
57062: PUSH
57063: LD_VAR 0 42
57067: PUSH
57068: LD_VAR 0 43
57072: PUSH
57073: LD_VAR 0 44
57077: PUSH
57078: LD_VAR 0 45
57082: PUSH
57083: LD_VAR 0 46
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: LIST
57092: LIST
57093: LIST
57094: LIST
57095: PUSH
57096: LD_VAR 0 4
57100: PUSH
57101: LD_INT 1
57103: PLUS
57104: ARRAY
57105: ST_TO_ADDR
57106: GO 57361
57108: LD_INT 36
57110: DOUBLE
57111: EQUAL
57112: IFTRUE 57116
57114: GO 57172
57116: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
57117: LD_ADDR_VAR 0 9
57121: PUSH
57122: LD_VAR 0 47
57126: PUSH
57127: LD_VAR 0 48
57131: PUSH
57132: LD_VAR 0 49
57136: PUSH
57137: LD_VAR 0 50
57141: PUSH
57142: LD_VAR 0 51
57146: PUSH
57147: LD_VAR 0 52
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: LIST
57156: LIST
57157: LIST
57158: LIST
57159: PUSH
57160: LD_VAR 0 4
57164: PUSH
57165: LD_INT 1
57167: PLUS
57168: ARRAY
57169: ST_TO_ADDR
57170: GO 57361
57172: LD_INT 4
57174: DOUBLE
57175: EQUAL
57176: IFTRUE 57198
57178: LD_INT 5
57180: DOUBLE
57181: EQUAL
57182: IFTRUE 57198
57184: LD_INT 34
57186: DOUBLE
57187: EQUAL
57188: IFTRUE 57198
57190: LD_INT 37
57192: DOUBLE
57193: EQUAL
57194: IFTRUE 57198
57196: GO 57254
57198: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
57199: LD_ADDR_VAR 0 9
57203: PUSH
57204: LD_VAR 0 53
57208: PUSH
57209: LD_VAR 0 54
57213: PUSH
57214: LD_VAR 0 55
57218: PUSH
57219: LD_VAR 0 56
57223: PUSH
57224: LD_VAR 0 57
57228: PUSH
57229: LD_VAR 0 58
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: LIST
57238: LIST
57239: LIST
57240: LIST
57241: PUSH
57242: LD_VAR 0 4
57246: PUSH
57247: LD_INT 1
57249: PLUS
57250: ARRAY
57251: ST_TO_ADDR
57252: GO 57361
57254: LD_INT 31
57256: DOUBLE
57257: EQUAL
57258: IFTRUE 57304
57260: LD_INT 32
57262: DOUBLE
57263: EQUAL
57264: IFTRUE 57304
57266: LD_INT 33
57268: DOUBLE
57269: EQUAL
57270: IFTRUE 57304
57272: LD_INT 27
57274: DOUBLE
57275: EQUAL
57276: IFTRUE 57304
57278: LD_INT 26
57280: DOUBLE
57281: EQUAL
57282: IFTRUE 57304
57284: LD_INT 28
57286: DOUBLE
57287: EQUAL
57288: IFTRUE 57304
57290: LD_INT 29
57292: DOUBLE
57293: EQUAL
57294: IFTRUE 57304
57296: LD_INT 30
57298: DOUBLE
57299: EQUAL
57300: IFTRUE 57304
57302: GO 57360
57304: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
57305: LD_ADDR_VAR 0 9
57309: PUSH
57310: LD_VAR 0 59
57314: PUSH
57315: LD_VAR 0 60
57319: PUSH
57320: LD_VAR 0 61
57324: PUSH
57325: LD_VAR 0 62
57329: PUSH
57330: LD_VAR 0 63
57334: PUSH
57335: LD_VAR 0 64
57339: PUSH
57340: EMPTY
57341: LIST
57342: LIST
57343: LIST
57344: LIST
57345: LIST
57346: LIST
57347: PUSH
57348: LD_VAR 0 4
57352: PUSH
57353: LD_INT 1
57355: PLUS
57356: ARRAY
57357: ST_TO_ADDR
57358: GO 57361
57360: POP
// temp_list2 = [ ] ;
57361: LD_ADDR_VAR 0 10
57365: PUSH
57366: EMPTY
57367: ST_TO_ADDR
// for i in temp_list do
57368: LD_ADDR_VAR 0 8
57372: PUSH
57373: LD_VAR 0 9
57377: PUSH
57378: FOR_IN
57379: IFFALSE 57431
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
57381: LD_ADDR_VAR 0 10
57385: PUSH
57386: LD_VAR 0 10
57390: PUSH
57391: LD_VAR 0 8
57395: PUSH
57396: LD_INT 1
57398: ARRAY
57399: PUSH
57400: LD_VAR 0 2
57404: PLUS
57405: PUSH
57406: LD_VAR 0 8
57410: PUSH
57411: LD_INT 2
57413: ARRAY
57414: PUSH
57415: LD_VAR 0 3
57419: PLUS
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: PUSH
57425: EMPTY
57426: LIST
57427: ADD
57428: ST_TO_ADDR
57429: GO 57378
57431: POP
57432: POP
// result = temp_list2 ;
57433: LD_ADDR_VAR 0 7
57437: PUSH
57438: LD_VAR 0 10
57442: ST_TO_ADDR
// end ;
57443: LD_VAR 0 7
57447: RET
// export function EnemyInRange ( unit , dist ) ; begin
57448: LD_INT 0
57450: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
57451: LD_ADDR_VAR 0 3
57455: PUSH
57456: LD_VAR 0 1
57460: PPUSH
57461: CALL_OW 255
57465: PPUSH
57466: LD_VAR 0 1
57470: PPUSH
57471: CALL_OW 250
57475: PPUSH
57476: LD_VAR 0 1
57480: PPUSH
57481: CALL_OW 251
57485: PPUSH
57486: LD_VAR 0 2
57490: PPUSH
57491: CALL 30844 0 4
57495: PUSH
57496: LD_INT 4
57498: ARRAY
57499: ST_TO_ADDR
// end ;
57500: LD_VAR 0 3
57504: RET
// export function PlayerSeeMe ( unit ) ; begin
57505: LD_INT 0
57507: PPUSH
// result := See ( your_side , unit ) ;
57508: LD_ADDR_VAR 0 2
57512: PUSH
57513: LD_OWVAR 2
57517: PPUSH
57518: LD_VAR 0 1
57522: PPUSH
57523: CALL_OW 292
57527: ST_TO_ADDR
// end ;
57528: LD_VAR 0 2
57532: RET
// export function ReverseDir ( unit ) ; begin
57533: LD_INT 0
57535: PPUSH
// if not unit then
57536: LD_VAR 0 1
57540: NOT
57541: IFFALSE 57545
// exit ;
57543: GO 57568
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
57545: LD_ADDR_VAR 0 2
57549: PUSH
57550: LD_VAR 0 1
57554: PPUSH
57555: CALL_OW 254
57559: PUSH
57560: LD_INT 3
57562: PLUS
57563: PUSH
57564: LD_INT 6
57566: MOD
57567: ST_TO_ADDR
// end ;
57568: LD_VAR 0 2
57572: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
57573: LD_INT 0
57575: PPUSH
57576: PPUSH
57577: PPUSH
57578: PPUSH
57579: PPUSH
// if not hexes then
57580: LD_VAR 0 2
57584: NOT
57585: IFFALSE 57589
// exit ;
57587: GO 57737
// dist := 9999 ;
57589: LD_ADDR_VAR 0 5
57593: PUSH
57594: LD_INT 9999
57596: ST_TO_ADDR
// for i = 1 to hexes do
57597: LD_ADDR_VAR 0 4
57601: PUSH
57602: DOUBLE
57603: LD_INT 1
57605: DEC
57606: ST_TO_ADDR
57607: LD_VAR 0 2
57611: PUSH
57612: FOR_TO
57613: IFFALSE 57725
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
57615: LD_VAR 0 1
57619: PPUSH
57620: LD_VAR 0 2
57624: PUSH
57625: LD_VAR 0 4
57629: ARRAY
57630: PUSH
57631: LD_INT 1
57633: ARRAY
57634: PPUSH
57635: LD_VAR 0 2
57639: PUSH
57640: LD_VAR 0 4
57644: ARRAY
57645: PUSH
57646: LD_INT 2
57648: ARRAY
57649: PPUSH
57650: CALL_OW 297
57654: PUSH
57655: LD_VAR 0 5
57659: LESS
57660: IFFALSE 57723
// begin hex := hexes [ i ] ;
57662: LD_ADDR_VAR 0 7
57666: PUSH
57667: LD_VAR 0 2
57671: PUSH
57672: LD_VAR 0 4
57676: ARRAY
57677: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57678: LD_ADDR_VAR 0 5
57682: PUSH
57683: LD_VAR 0 1
57687: PPUSH
57688: LD_VAR 0 2
57692: PUSH
57693: LD_VAR 0 4
57697: ARRAY
57698: PUSH
57699: LD_INT 1
57701: ARRAY
57702: PPUSH
57703: LD_VAR 0 2
57707: PUSH
57708: LD_VAR 0 4
57712: ARRAY
57713: PUSH
57714: LD_INT 2
57716: ARRAY
57717: PPUSH
57718: CALL_OW 297
57722: ST_TO_ADDR
// end ; end ;
57723: GO 57612
57725: POP
57726: POP
// result := hex ;
57727: LD_ADDR_VAR 0 3
57731: PUSH
57732: LD_VAR 0 7
57736: ST_TO_ADDR
// end ;
57737: LD_VAR 0 3
57741: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
57742: LD_INT 0
57744: PPUSH
57745: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
57746: LD_VAR 0 1
57750: NOT
57751: PUSH
57752: LD_VAR 0 1
57756: PUSH
57757: LD_INT 21
57759: PUSH
57760: LD_INT 2
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: PUSH
57767: LD_INT 23
57769: PUSH
57770: LD_INT 2
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: PPUSH
57781: CALL_OW 69
57785: IN
57786: NOT
57787: OR
57788: IFFALSE 57792
// exit ;
57790: GO 57839
// for i = 1 to 3 do
57792: LD_ADDR_VAR 0 3
57796: PUSH
57797: DOUBLE
57798: LD_INT 1
57800: DEC
57801: ST_TO_ADDR
57802: LD_INT 3
57804: PUSH
57805: FOR_TO
57806: IFFALSE 57837
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
57808: LD_VAR 0 1
57812: PPUSH
57813: CALL_OW 250
57817: PPUSH
57818: LD_VAR 0 1
57822: PPUSH
57823: CALL_OW 251
57827: PPUSH
57828: LD_INT 1
57830: PPUSH
57831: CALL_OW 453
57835: GO 57805
57837: POP
57838: POP
// end ;
57839: LD_VAR 0 2
57843: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
57844: LD_INT 0
57846: PPUSH
57847: PPUSH
57848: PPUSH
57849: PPUSH
57850: PPUSH
57851: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
57852: LD_VAR 0 1
57856: NOT
57857: PUSH
57858: LD_VAR 0 2
57862: NOT
57863: OR
57864: PUSH
57865: LD_VAR 0 1
57869: PPUSH
57870: CALL_OW 314
57874: OR
57875: IFFALSE 57879
// exit ;
57877: GO 58320
// x := GetX ( enemy_unit ) ;
57879: LD_ADDR_VAR 0 7
57883: PUSH
57884: LD_VAR 0 2
57888: PPUSH
57889: CALL_OW 250
57893: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
57894: LD_ADDR_VAR 0 8
57898: PUSH
57899: LD_VAR 0 2
57903: PPUSH
57904: CALL_OW 251
57908: ST_TO_ADDR
// if not x or not y then
57909: LD_VAR 0 7
57913: NOT
57914: PUSH
57915: LD_VAR 0 8
57919: NOT
57920: OR
57921: IFFALSE 57925
// exit ;
57923: GO 58320
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
57925: LD_ADDR_VAR 0 6
57929: PUSH
57930: LD_VAR 0 7
57934: PPUSH
57935: LD_INT 0
57937: PPUSH
57938: LD_INT 4
57940: PPUSH
57941: CALL_OW 272
57945: PUSH
57946: LD_VAR 0 8
57950: PPUSH
57951: LD_INT 0
57953: PPUSH
57954: LD_INT 4
57956: PPUSH
57957: CALL_OW 273
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: LD_VAR 0 7
57970: PPUSH
57971: LD_INT 1
57973: PPUSH
57974: LD_INT 4
57976: PPUSH
57977: CALL_OW 272
57981: PUSH
57982: LD_VAR 0 8
57986: PPUSH
57987: LD_INT 1
57989: PPUSH
57990: LD_INT 4
57992: PPUSH
57993: CALL_OW 273
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: PUSH
58002: LD_VAR 0 7
58006: PPUSH
58007: LD_INT 2
58009: PPUSH
58010: LD_INT 4
58012: PPUSH
58013: CALL_OW 272
58017: PUSH
58018: LD_VAR 0 8
58022: PPUSH
58023: LD_INT 2
58025: PPUSH
58026: LD_INT 4
58028: PPUSH
58029: CALL_OW 273
58033: PUSH
58034: EMPTY
58035: LIST
58036: LIST
58037: PUSH
58038: LD_VAR 0 7
58042: PPUSH
58043: LD_INT 3
58045: PPUSH
58046: LD_INT 4
58048: PPUSH
58049: CALL_OW 272
58053: PUSH
58054: LD_VAR 0 8
58058: PPUSH
58059: LD_INT 3
58061: PPUSH
58062: LD_INT 4
58064: PPUSH
58065: CALL_OW 273
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: PUSH
58074: LD_VAR 0 7
58078: PPUSH
58079: LD_INT 4
58081: PPUSH
58082: LD_INT 4
58084: PPUSH
58085: CALL_OW 272
58089: PUSH
58090: LD_VAR 0 8
58094: PPUSH
58095: LD_INT 4
58097: PPUSH
58098: LD_INT 4
58100: PPUSH
58101: CALL_OW 273
58105: PUSH
58106: EMPTY
58107: LIST
58108: LIST
58109: PUSH
58110: LD_VAR 0 7
58114: PPUSH
58115: LD_INT 5
58117: PPUSH
58118: LD_INT 4
58120: PPUSH
58121: CALL_OW 272
58125: PUSH
58126: LD_VAR 0 8
58130: PPUSH
58131: LD_INT 5
58133: PPUSH
58134: LD_INT 4
58136: PPUSH
58137: CALL_OW 273
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: LIST
58150: LIST
58151: LIST
58152: LIST
58153: ST_TO_ADDR
// for i = tmp downto 1 do
58154: LD_ADDR_VAR 0 4
58158: PUSH
58159: DOUBLE
58160: LD_VAR 0 6
58164: INC
58165: ST_TO_ADDR
58166: LD_INT 1
58168: PUSH
58169: FOR_DOWNTO
58170: IFFALSE 58271
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
58172: LD_VAR 0 6
58176: PUSH
58177: LD_VAR 0 4
58181: ARRAY
58182: PUSH
58183: LD_INT 1
58185: ARRAY
58186: PPUSH
58187: LD_VAR 0 6
58191: PUSH
58192: LD_VAR 0 4
58196: ARRAY
58197: PUSH
58198: LD_INT 2
58200: ARRAY
58201: PPUSH
58202: CALL_OW 488
58206: NOT
58207: PUSH
58208: LD_VAR 0 6
58212: PUSH
58213: LD_VAR 0 4
58217: ARRAY
58218: PUSH
58219: LD_INT 1
58221: ARRAY
58222: PPUSH
58223: LD_VAR 0 6
58227: PUSH
58228: LD_VAR 0 4
58232: ARRAY
58233: PUSH
58234: LD_INT 2
58236: ARRAY
58237: PPUSH
58238: CALL_OW 428
58242: PUSH
58243: LD_INT 0
58245: NONEQUAL
58246: OR
58247: IFFALSE 58269
// tmp := Delete ( tmp , i ) ;
58249: LD_ADDR_VAR 0 6
58253: PUSH
58254: LD_VAR 0 6
58258: PPUSH
58259: LD_VAR 0 4
58263: PPUSH
58264: CALL_OW 3
58268: ST_TO_ADDR
58269: GO 58169
58271: POP
58272: POP
// j := GetClosestHex ( unit , tmp ) ;
58273: LD_ADDR_VAR 0 5
58277: PUSH
58278: LD_VAR 0 1
58282: PPUSH
58283: LD_VAR 0 6
58287: PPUSH
58288: CALL 57573 0 2
58292: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
58293: LD_VAR 0 1
58297: PPUSH
58298: LD_VAR 0 5
58302: PUSH
58303: LD_INT 1
58305: ARRAY
58306: PPUSH
58307: LD_VAR 0 5
58311: PUSH
58312: LD_INT 2
58314: ARRAY
58315: PPUSH
58316: CALL_OW 111
// end ;
58320: LD_VAR 0 3
58324: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
58325: LD_INT 0
58327: PPUSH
58328: PPUSH
58329: PPUSH
// uc_side = 0 ;
58330: LD_ADDR_OWVAR 20
58334: PUSH
58335: LD_INT 0
58337: ST_TO_ADDR
// uc_nation = 0 ;
58338: LD_ADDR_OWVAR 21
58342: PUSH
58343: LD_INT 0
58345: ST_TO_ADDR
// InitHc_All ( ) ;
58346: CALL_OW 584
// InitVc ;
58350: CALL_OW 20
// if mastodonts then
58354: LD_VAR 0 6
58358: IFFALSE 58425
// for i = 1 to mastodonts do
58360: LD_ADDR_VAR 0 11
58364: PUSH
58365: DOUBLE
58366: LD_INT 1
58368: DEC
58369: ST_TO_ADDR
58370: LD_VAR 0 6
58374: PUSH
58375: FOR_TO
58376: IFFALSE 58423
// begin vc_chassis := 31 ;
58378: LD_ADDR_OWVAR 37
58382: PUSH
58383: LD_INT 31
58385: ST_TO_ADDR
// vc_control := control_rider ;
58386: LD_ADDR_OWVAR 38
58390: PUSH
58391: LD_INT 4
58393: ST_TO_ADDR
// animal := CreateVehicle ;
58394: LD_ADDR_VAR 0 12
58398: PUSH
58399: CALL_OW 45
58403: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58404: LD_VAR 0 12
58408: PPUSH
58409: LD_VAR 0 8
58413: PPUSH
58414: LD_INT 0
58416: PPUSH
58417: CALL 60613 0 3
// end ;
58421: GO 58375
58423: POP
58424: POP
// if horses then
58425: LD_VAR 0 5
58429: IFFALSE 58496
// for i = 1 to horses do
58431: LD_ADDR_VAR 0 11
58435: PUSH
58436: DOUBLE
58437: LD_INT 1
58439: DEC
58440: ST_TO_ADDR
58441: LD_VAR 0 5
58445: PUSH
58446: FOR_TO
58447: IFFALSE 58494
// begin hc_class := 21 ;
58449: LD_ADDR_OWVAR 28
58453: PUSH
58454: LD_INT 21
58456: ST_TO_ADDR
// hc_gallery :=  ;
58457: LD_ADDR_OWVAR 33
58461: PUSH
58462: LD_STRING 
58464: ST_TO_ADDR
// animal := CreateHuman ;
58465: LD_ADDR_VAR 0 12
58469: PUSH
58470: CALL_OW 44
58474: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58475: LD_VAR 0 12
58479: PPUSH
58480: LD_VAR 0 8
58484: PPUSH
58485: LD_INT 0
58487: PPUSH
58488: CALL 60613 0 3
// end ;
58492: GO 58446
58494: POP
58495: POP
// if birds then
58496: LD_VAR 0 1
58500: IFFALSE 58567
// for i = 1 to birds do
58502: LD_ADDR_VAR 0 11
58506: PUSH
58507: DOUBLE
58508: LD_INT 1
58510: DEC
58511: ST_TO_ADDR
58512: LD_VAR 0 1
58516: PUSH
58517: FOR_TO
58518: IFFALSE 58565
// begin hc_class = 18 ;
58520: LD_ADDR_OWVAR 28
58524: PUSH
58525: LD_INT 18
58527: ST_TO_ADDR
// hc_gallery =  ;
58528: LD_ADDR_OWVAR 33
58532: PUSH
58533: LD_STRING 
58535: ST_TO_ADDR
// animal := CreateHuman ;
58536: LD_ADDR_VAR 0 12
58540: PUSH
58541: CALL_OW 44
58545: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58546: LD_VAR 0 12
58550: PPUSH
58551: LD_VAR 0 8
58555: PPUSH
58556: LD_INT 0
58558: PPUSH
58559: CALL 60613 0 3
// end ;
58563: GO 58517
58565: POP
58566: POP
// if tigers then
58567: LD_VAR 0 2
58571: IFFALSE 58655
// for i = 1 to tigers do
58573: LD_ADDR_VAR 0 11
58577: PUSH
58578: DOUBLE
58579: LD_INT 1
58581: DEC
58582: ST_TO_ADDR
58583: LD_VAR 0 2
58587: PUSH
58588: FOR_TO
58589: IFFALSE 58653
// begin hc_class = class_tiger ;
58591: LD_ADDR_OWVAR 28
58595: PUSH
58596: LD_INT 14
58598: ST_TO_ADDR
// hc_gallery =  ;
58599: LD_ADDR_OWVAR 33
58603: PUSH
58604: LD_STRING 
58606: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
58607: LD_ADDR_OWVAR 35
58611: PUSH
58612: LD_INT 7
58614: NEG
58615: PPUSH
58616: LD_INT 7
58618: PPUSH
58619: CALL_OW 12
58623: ST_TO_ADDR
// animal := CreateHuman ;
58624: LD_ADDR_VAR 0 12
58628: PUSH
58629: CALL_OW 44
58633: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58634: LD_VAR 0 12
58638: PPUSH
58639: LD_VAR 0 8
58643: PPUSH
58644: LD_INT 0
58646: PPUSH
58647: CALL 60613 0 3
// end ;
58651: GO 58588
58653: POP
58654: POP
// if apemans then
58655: LD_VAR 0 3
58659: IFFALSE 58782
// for i = 1 to apemans do
58661: LD_ADDR_VAR 0 11
58665: PUSH
58666: DOUBLE
58667: LD_INT 1
58669: DEC
58670: ST_TO_ADDR
58671: LD_VAR 0 3
58675: PUSH
58676: FOR_TO
58677: IFFALSE 58780
// begin hc_class = class_apeman ;
58679: LD_ADDR_OWVAR 28
58683: PUSH
58684: LD_INT 12
58686: ST_TO_ADDR
// hc_gallery =  ;
58687: LD_ADDR_OWVAR 33
58691: PUSH
58692: LD_STRING 
58694: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
58695: LD_ADDR_OWVAR 35
58699: PUSH
58700: LD_INT 2
58702: NEG
58703: PPUSH
58704: LD_INT 2
58706: PPUSH
58707: CALL_OW 12
58711: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
58712: LD_ADDR_OWVAR 31
58716: PUSH
58717: LD_INT 1
58719: PPUSH
58720: LD_INT 3
58722: PPUSH
58723: CALL_OW 12
58727: PUSH
58728: LD_INT 1
58730: PPUSH
58731: LD_INT 3
58733: PPUSH
58734: CALL_OW 12
58738: PUSH
58739: LD_INT 0
58741: PUSH
58742: LD_INT 0
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: LIST
58749: LIST
58750: ST_TO_ADDR
// animal := CreateHuman ;
58751: LD_ADDR_VAR 0 12
58755: PUSH
58756: CALL_OW 44
58760: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58761: LD_VAR 0 12
58765: PPUSH
58766: LD_VAR 0 8
58770: PPUSH
58771: LD_INT 0
58773: PPUSH
58774: CALL 60613 0 3
// end ;
58778: GO 58676
58780: POP
58781: POP
// if enchidnas then
58782: LD_VAR 0 4
58786: IFFALSE 58853
// for i = 1 to enchidnas do
58788: LD_ADDR_VAR 0 11
58792: PUSH
58793: DOUBLE
58794: LD_INT 1
58796: DEC
58797: ST_TO_ADDR
58798: LD_VAR 0 4
58802: PUSH
58803: FOR_TO
58804: IFFALSE 58851
// begin hc_class = 13 ;
58806: LD_ADDR_OWVAR 28
58810: PUSH
58811: LD_INT 13
58813: ST_TO_ADDR
// hc_gallery =  ;
58814: LD_ADDR_OWVAR 33
58818: PUSH
58819: LD_STRING 
58821: ST_TO_ADDR
// animal := CreateHuman ;
58822: LD_ADDR_VAR 0 12
58826: PUSH
58827: CALL_OW 44
58831: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58832: LD_VAR 0 12
58836: PPUSH
58837: LD_VAR 0 8
58841: PPUSH
58842: LD_INT 0
58844: PPUSH
58845: CALL 60613 0 3
// end ;
58849: GO 58803
58851: POP
58852: POP
// if fishes then
58853: LD_VAR 0 7
58857: IFFALSE 58924
// for i = 1 to fishes do
58859: LD_ADDR_VAR 0 11
58863: PUSH
58864: DOUBLE
58865: LD_INT 1
58867: DEC
58868: ST_TO_ADDR
58869: LD_VAR 0 7
58873: PUSH
58874: FOR_TO
58875: IFFALSE 58922
// begin hc_class = 20 ;
58877: LD_ADDR_OWVAR 28
58881: PUSH
58882: LD_INT 20
58884: ST_TO_ADDR
// hc_gallery =  ;
58885: LD_ADDR_OWVAR 33
58889: PUSH
58890: LD_STRING 
58892: ST_TO_ADDR
// animal := CreateHuman ;
58893: LD_ADDR_VAR 0 12
58897: PUSH
58898: CALL_OW 44
58902: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
58903: LD_VAR 0 12
58907: PPUSH
58908: LD_VAR 0 9
58912: PPUSH
58913: LD_INT 0
58915: PPUSH
58916: CALL 60613 0 3
// end ;
58920: GO 58874
58922: POP
58923: POP
// end ;
58924: LD_VAR 0 10
58928: RET
// export function WantHeal ( sci , unit ) ; begin
58929: LD_INT 0
58931: PPUSH
// if GetTaskList ( sci ) > 0 then
58932: LD_VAR 0 1
58936: PPUSH
58937: CALL_OW 437
58941: PUSH
58942: LD_INT 0
58944: GREATER
58945: IFFALSE 59015
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
58947: LD_VAR 0 1
58951: PPUSH
58952: CALL_OW 437
58956: PUSH
58957: LD_INT 1
58959: ARRAY
58960: PUSH
58961: LD_INT 1
58963: ARRAY
58964: PUSH
58965: LD_STRING l
58967: EQUAL
58968: PUSH
58969: LD_VAR 0 1
58973: PPUSH
58974: CALL_OW 437
58978: PUSH
58979: LD_INT 1
58981: ARRAY
58982: PUSH
58983: LD_INT 4
58985: ARRAY
58986: PUSH
58987: LD_VAR 0 2
58991: EQUAL
58992: AND
58993: IFFALSE 59005
// result := true else
58995: LD_ADDR_VAR 0 3
58999: PUSH
59000: LD_INT 1
59002: ST_TO_ADDR
59003: GO 59013
// result := false ;
59005: LD_ADDR_VAR 0 3
59009: PUSH
59010: LD_INT 0
59012: ST_TO_ADDR
// end else
59013: GO 59023
// result := false ;
59015: LD_ADDR_VAR 0 3
59019: PUSH
59020: LD_INT 0
59022: ST_TO_ADDR
// end ;
59023: LD_VAR 0 3
59027: RET
// export function HealTarget ( sci ) ; begin
59028: LD_INT 0
59030: PPUSH
// if not sci then
59031: LD_VAR 0 1
59035: NOT
59036: IFFALSE 59040
// exit ;
59038: GO 59105
// result := 0 ;
59040: LD_ADDR_VAR 0 2
59044: PUSH
59045: LD_INT 0
59047: ST_TO_ADDR
// if GetTaskList ( sci ) then
59048: LD_VAR 0 1
59052: PPUSH
59053: CALL_OW 437
59057: IFFALSE 59105
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
59059: LD_VAR 0 1
59063: PPUSH
59064: CALL_OW 437
59068: PUSH
59069: LD_INT 1
59071: ARRAY
59072: PUSH
59073: LD_INT 1
59075: ARRAY
59076: PUSH
59077: LD_STRING l
59079: EQUAL
59080: IFFALSE 59105
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
59082: LD_ADDR_VAR 0 2
59086: PUSH
59087: LD_VAR 0 1
59091: PPUSH
59092: CALL_OW 437
59096: PUSH
59097: LD_INT 1
59099: ARRAY
59100: PUSH
59101: LD_INT 4
59103: ARRAY
59104: ST_TO_ADDR
// end ;
59105: LD_VAR 0 2
59109: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
59110: LD_INT 0
59112: PPUSH
59113: PPUSH
59114: PPUSH
59115: PPUSH
// if not base_units then
59116: LD_VAR 0 1
59120: NOT
59121: IFFALSE 59125
// exit ;
59123: GO 59212
// result := false ;
59125: LD_ADDR_VAR 0 2
59129: PUSH
59130: LD_INT 0
59132: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
59133: LD_ADDR_VAR 0 5
59137: PUSH
59138: LD_VAR 0 1
59142: PPUSH
59143: LD_INT 21
59145: PUSH
59146: LD_INT 3
59148: PUSH
59149: EMPTY
59150: LIST
59151: LIST
59152: PPUSH
59153: CALL_OW 72
59157: ST_TO_ADDR
// if not tmp then
59158: LD_VAR 0 5
59162: NOT
59163: IFFALSE 59167
// exit ;
59165: GO 59212
// for i in tmp do
59167: LD_ADDR_VAR 0 3
59171: PUSH
59172: LD_VAR 0 5
59176: PUSH
59177: FOR_IN
59178: IFFALSE 59210
// begin result := EnemyInRange ( i , 22 ) ;
59180: LD_ADDR_VAR 0 2
59184: PUSH
59185: LD_VAR 0 3
59189: PPUSH
59190: LD_INT 22
59192: PPUSH
59193: CALL 57448 0 2
59197: ST_TO_ADDR
// if result then
59198: LD_VAR 0 2
59202: IFFALSE 59208
// exit ;
59204: POP
59205: POP
59206: GO 59212
// end ;
59208: GO 59177
59210: POP
59211: POP
// end ;
59212: LD_VAR 0 2
59216: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
59217: LD_INT 0
59219: PPUSH
59220: PPUSH
// if not units then
59221: LD_VAR 0 1
59225: NOT
59226: IFFALSE 59230
// exit ;
59228: GO 59300
// result := [ ] ;
59230: LD_ADDR_VAR 0 3
59234: PUSH
59235: EMPTY
59236: ST_TO_ADDR
// for i in units do
59237: LD_ADDR_VAR 0 4
59241: PUSH
59242: LD_VAR 0 1
59246: PUSH
59247: FOR_IN
59248: IFFALSE 59298
// if GetTag ( i ) = tag then
59250: LD_VAR 0 4
59254: PPUSH
59255: CALL_OW 110
59259: PUSH
59260: LD_VAR 0 2
59264: EQUAL
59265: IFFALSE 59296
// result := Replace ( result , result + 1 , i ) ;
59267: LD_ADDR_VAR 0 3
59271: PUSH
59272: LD_VAR 0 3
59276: PPUSH
59277: LD_VAR 0 3
59281: PUSH
59282: LD_INT 1
59284: PLUS
59285: PPUSH
59286: LD_VAR 0 4
59290: PPUSH
59291: CALL_OW 1
59295: ST_TO_ADDR
59296: GO 59247
59298: POP
59299: POP
// end ;
59300: LD_VAR 0 3
59304: RET
// export function IsDriver ( un ) ; begin
59305: LD_INT 0
59307: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
59308: LD_ADDR_VAR 0 2
59312: PUSH
59313: LD_VAR 0 1
59317: PUSH
59318: LD_INT 55
59320: PUSH
59321: EMPTY
59322: LIST
59323: PPUSH
59324: CALL_OW 69
59328: IN
59329: ST_TO_ADDR
// end ;
59330: LD_VAR 0 2
59334: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
59335: LD_INT 0
59337: PPUSH
59338: PPUSH
// list := [ ] ;
59339: LD_ADDR_VAR 0 5
59343: PUSH
59344: EMPTY
59345: ST_TO_ADDR
// case d of 0 :
59346: LD_VAR 0 3
59350: PUSH
59351: LD_INT 0
59353: DOUBLE
59354: EQUAL
59355: IFTRUE 59359
59357: GO 59492
59359: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
59360: LD_ADDR_VAR 0 5
59364: PUSH
59365: LD_VAR 0 1
59369: PUSH
59370: LD_INT 4
59372: MINUS
59373: PUSH
59374: LD_VAR 0 2
59378: PUSH
59379: LD_INT 4
59381: MINUS
59382: PUSH
59383: LD_INT 2
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: LIST
59390: PUSH
59391: LD_VAR 0 1
59395: PUSH
59396: LD_INT 3
59398: MINUS
59399: PUSH
59400: LD_VAR 0 2
59404: PUSH
59405: LD_INT 1
59407: PUSH
59408: EMPTY
59409: LIST
59410: LIST
59411: LIST
59412: PUSH
59413: LD_VAR 0 1
59417: PUSH
59418: LD_INT 4
59420: PLUS
59421: PUSH
59422: LD_VAR 0 2
59426: PUSH
59427: LD_INT 4
59429: PUSH
59430: EMPTY
59431: LIST
59432: LIST
59433: LIST
59434: PUSH
59435: LD_VAR 0 1
59439: PUSH
59440: LD_INT 3
59442: PLUS
59443: PUSH
59444: LD_VAR 0 2
59448: PUSH
59449: LD_INT 3
59451: PLUS
59452: PUSH
59453: LD_INT 5
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: LIST
59460: PUSH
59461: LD_VAR 0 1
59465: PUSH
59466: LD_VAR 0 2
59470: PUSH
59471: LD_INT 4
59473: PLUS
59474: PUSH
59475: LD_INT 0
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: LIST
59482: PUSH
59483: EMPTY
59484: LIST
59485: LIST
59486: LIST
59487: LIST
59488: LIST
59489: ST_TO_ADDR
// end ; 1 :
59490: GO 60190
59492: LD_INT 1
59494: DOUBLE
59495: EQUAL
59496: IFTRUE 59500
59498: GO 59633
59500: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
59501: LD_ADDR_VAR 0 5
59505: PUSH
59506: LD_VAR 0 1
59510: PUSH
59511: LD_VAR 0 2
59515: PUSH
59516: LD_INT 4
59518: MINUS
59519: PUSH
59520: LD_INT 3
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: LIST
59527: PUSH
59528: LD_VAR 0 1
59532: PUSH
59533: LD_INT 3
59535: MINUS
59536: PUSH
59537: LD_VAR 0 2
59541: PUSH
59542: LD_INT 3
59544: MINUS
59545: PUSH
59546: LD_INT 2
59548: PUSH
59549: EMPTY
59550: LIST
59551: LIST
59552: LIST
59553: PUSH
59554: LD_VAR 0 1
59558: PUSH
59559: LD_INT 4
59561: MINUS
59562: PUSH
59563: LD_VAR 0 2
59567: PUSH
59568: LD_INT 1
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: LIST
59575: PUSH
59576: LD_VAR 0 1
59580: PUSH
59581: LD_VAR 0 2
59585: PUSH
59586: LD_INT 3
59588: PLUS
59589: PUSH
59590: LD_INT 0
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: LIST
59597: PUSH
59598: LD_VAR 0 1
59602: PUSH
59603: LD_INT 4
59605: PLUS
59606: PUSH
59607: LD_VAR 0 2
59611: PUSH
59612: LD_INT 4
59614: PLUS
59615: PUSH
59616: LD_INT 5
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: LIST
59623: PUSH
59624: EMPTY
59625: LIST
59626: LIST
59627: LIST
59628: LIST
59629: LIST
59630: ST_TO_ADDR
// end ; 2 :
59631: GO 60190
59633: LD_INT 2
59635: DOUBLE
59636: EQUAL
59637: IFTRUE 59641
59639: GO 59770
59641: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
59642: LD_ADDR_VAR 0 5
59646: PUSH
59647: LD_VAR 0 1
59651: PUSH
59652: LD_VAR 0 2
59656: PUSH
59657: LD_INT 3
59659: MINUS
59660: PUSH
59661: LD_INT 3
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: LIST
59668: PUSH
59669: LD_VAR 0 1
59673: PUSH
59674: LD_INT 4
59676: PLUS
59677: PUSH
59678: LD_VAR 0 2
59682: PUSH
59683: LD_INT 4
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: LIST
59690: PUSH
59691: LD_VAR 0 1
59695: PUSH
59696: LD_VAR 0 2
59700: PUSH
59701: LD_INT 4
59703: PLUS
59704: PUSH
59705: LD_INT 0
59707: PUSH
59708: EMPTY
59709: LIST
59710: LIST
59711: LIST
59712: PUSH
59713: LD_VAR 0 1
59717: PUSH
59718: LD_INT 3
59720: MINUS
59721: PUSH
59722: LD_VAR 0 2
59726: PUSH
59727: LD_INT 1
59729: PUSH
59730: EMPTY
59731: LIST
59732: LIST
59733: LIST
59734: PUSH
59735: LD_VAR 0 1
59739: PUSH
59740: LD_INT 4
59742: MINUS
59743: PUSH
59744: LD_VAR 0 2
59748: PUSH
59749: LD_INT 4
59751: MINUS
59752: PUSH
59753: LD_INT 2
59755: PUSH
59756: EMPTY
59757: LIST
59758: LIST
59759: LIST
59760: PUSH
59761: EMPTY
59762: LIST
59763: LIST
59764: LIST
59765: LIST
59766: LIST
59767: ST_TO_ADDR
// end ; 3 :
59768: GO 60190
59770: LD_INT 3
59772: DOUBLE
59773: EQUAL
59774: IFTRUE 59778
59776: GO 59911
59778: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
59779: LD_ADDR_VAR 0 5
59783: PUSH
59784: LD_VAR 0 1
59788: PUSH
59789: LD_INT 3
59791: PLUS
59792: PUSH
59793: LD_VAR 0 2
59797: PUSH
59798: LD_INT 4
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: LIST
59805: PUSH
59806: LD_VAR 0 1
59810: PUSH
59811: LD_INT 4
59813: PLUS
59814: PUSH
59815: LD_VAR 0 2
59819: PUSH
59820: LD_INT 4
59822: PLUS
59823: PUSH
59824: LD_INT 5
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: LIST
59831: PUSH
59832: LD_VAR 0 1
59836: PUSH
59837: LD_INT 4
59839: MINUS
59840: PUSH
59841: LD_VAR 0 2
59845: PUSH
59846: LD_INT 1
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: LIST
59853: PUSH
59854: LD_VAR 0 1
59858: PUSH
59859: LD_VAR 0 2
59863: PUSH
59864: LD_INT 4
59866: MINUS
59867: PUSH
59868: LD_INT 3
59870: PUSH
59871: EMPTY
59872: LIST
59873: LIST
59874: LIST
59875: PUSH
59876: LD_VAR 0 1
59880: PUSH
59881: LD_INT 3
59883: MINUS
59884: PUSH
59885: LD_VAR 0 2
59889: PUSH
59890: LD_INT 3
59892: MINUS
59893: PUSH
59894: LD_INT 2
59896: PUSH
59897: EMPTY
59898: LIST
59899: LIST
59900: LIST
59901: PUSH
59902: EMPTY
59903: LIST
59904: LIST
59905: LIST
59906: LIST
59907: LIST
59908: ST_TO_ADDR
// end ; 4 :
59909: GO 60190
59911: LD_INT 4
59913: DOUBLE
59914: EQUAL
59915: IFTRUE 59919
59917: GO 60052
59919: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
59920: LD_ADDR_VAR 0 5
59924: PUSH
59925: LD_VAR 0 1
59929: PUSH
59930: LD_VAR 0 2
59934: PUSH
59935: LD_INT 4
59937: PLUS
59938: PUSH
59939: LD_INT 0
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: LIST
59946: PUSH
59947: LD_VAR 0 1
59951: PUSH
59952: LD_INT 3
59954: PLUS
59955: PUSH
59956: LD_VAR 0 2
59960: PUSH
59961: LD_INT 3
59963: PLUS
59964: PUSH
59965: LD_INT 5
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: LIST
59972: PUSH
59973: LD_VAR 0 1
59977: PUSH
59978: LD_INT 4
59980: PLUS
59981: PUSH
59982: LD_VAR 0 2
59986: PUSH
59987: LD_INT 4
59989: PUSH
59990: EMPTY
59991: LIST
59992: LIST
59993: LIST
59994: PUSH
59995: LD_VAR 0 1
59999: PUSH
60000: LD_VAR 0 2
60004: PUSH
60005: LD_INT 3
60007: MINUS
60008: PUSH
60009: LD_INT 3
60011: PUSH
60012: EMPTY
60013: LIST
60014: LIST
60015: LIST
60016: PUSH
60017: LD_VAR 0 1
60021: PUSH
60022: LD_INT 4
60024: MINUS
60025: PUSH
60026: LD_VAR 0 2
60030: PUSH
60031: LD_INT 4
60033: MINUS
60034: PUSH
60035: LD_INT 2
60037: PUSH
60038: EMPTY
60039: LIST
60040: LIST
60041: LIST
60042: PUSH
60043: EMPTY
60044: LIST
60045: LIST
60046: LIST
60047: LIST
60048: LIST
60049: ST_TO_ADDR
// end ; 5 :
60050: GO 60190
60052: LD_INT 5
60054: DOUBLE
60055: EQUAL
60056: IFTRUE 60060
60058: GO 60189
60060: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
60061: LD_ADDR_VAR 0 5
60065: PUSH
60066: LD_VAR 0 1
60070: PUSH
60071: LD_INT 4
60073: MINUS
60074: PUSH
60075: LD_VAR 0 2
60079: PUSH
60080: LD_INT 1
60082: PUSH
60083: EMPTY
60084: LIST
60085: LIST
60086: LIST
60087: PUSH
60088: LD_VAR 0 1
60092: PUSH
60093: LD_VAR 0 2
60097: PUSH
60098: LD_INT 4
60100: MINUS
60101: PUSH
60102: LD_INT 3
60104: PUSH
60105: EMPTY
60106: LIST
60107: LIST
60108: LIST
60109: PUSH
60110: LD_VAR 0 1
60114: PUSH
60115: LD_INT 4
60117: PLUS
60118: PUSH
60119: LD_VAR 0 2
60123: PUSH
60124: LD_INT 4
60126: PLUS
60127: PUSH
60128: LD_INT 5
60130: PUSH
60131: EMPTY
60132: LIST
60133: LIST
60134: LIST
60135: PUSH
60136: LD_VAR 0 1
60140: PUSH
60141: LD_INT 3
60143: PLUS
60144: PUSH
60145: LD_VAR 0 2
60149: PUSH
60150: LD_INT 4
60152: PUSH
60153: EMPTY
60154: LIST
60155: LIST
60156: LIST
60157: PUSH
60158: LD_VAR 0 1
60162: PUSH
60163: LD_VAR 0 2
60167: PUSH
60168: LD_INT 3
60170: PLUS
60171: PUSH
60172: LD_INT 0
60174: PUSH
60175: EMPTY
60176: LIST
60177: LIST
60178: LIST
60179: PUSH
60180: EMPTY
60181: LIST
60182: LIST
60183: LIST
60184: LIST
60185: LIST
60186: ST_TO_ADDR
// end ; end ;
60187: GO 60190
60189: POP
// result := list ;
60190: LD_ADDR_VAR 0 4
60194: PUSH
60195: LD_VAR 0 5
60199: ST_TO_ADDR
// end ;
60200: LD_VAR 0 4
60204: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
60205: LD_INT 0
60207: PPUSH
60208: PPUSH
60209: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
60210: LD_VAR 0 1
60214: NOT
60215: PUSH
60216: LD_VAR 0 2
60220: PUSH
60221: LD_INT 1
60223: PUSH
60224: LD_INT 2
60226: PUSH
60227: LD_INT 3
60229: PUSH
60230: LD_INT 4
60232: PUSH
60233: EMPTY
60234: LIST
60235: LIST
60236: LIST
60237: LIST
60238: IN
60239: NOT
60240: OR
60241: IFFALSE 60245
// exit ;
60243: GO 60337
// tmp := [ ] ;
60245: LD_ADDR_VAR 0 5
60249: PUSH
60250: EMPTY
60251: ST_TO_ADDR
// for i in units do
60252: LD_ADDR_VAR 0 4
60256: PUSH
60257: LD_VAR 0 1
60261: PUSH
60262: FOR_IN
60263: IFFALSE 60306
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
60265: LD_ADDR_VAR 0 5
60269: PUSH
60270: LD_VAR 0 5
60274: PPUSH
60275: LD_VAR 0 5
60279: PUSH
60280: LD_INT 1
60282: PLUS
60283: PPUSH
60284: LD_VAR 0 4
60288: PPUSH
60289: LD_VAR 0 2
60293: PPUSH
60294: CALL_OW 259
60298: PPUSH
60299: CALL_OW 2
60303: ST_TO_ADDR
60304: GO 60262
60306: POP
60307: POP
// if not tmp then
60308: LD_VAR 0 5
60312: NOT
60313: IFFALSE 60317
// exit ;
60315: GO 60337
// result := SortListByListDesc ( units , tmp ) ;
60317: LD_ADDR_VAR 0 3
60321: PUSH
60322: LD_VAR 0 1
60326: PPUSH
60327: LD_VAR 0 5
60331: PPUSH
60332: CALL_OW 77
60336: ST_TO_ADDR
// end ;
60337: LD_VAR 0 3
60341: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
60342: LD_INT 0
60344: PPUSH
60345: PPUSH
60346: PPUSH
// result := false ;
60347: LD_ADDR_VAR 0 3
60351: PUSH
60352: LD_INT 0
60354: ST_TO_ADDR
// x := GetX ( building ) ;
60355: LD_ADDR_VAR 0 4
60359: PUSH
60360: LD_VAR 0 2
60364: PPUSH
60365: CALL_OW 250
60369: ST_TO_ADDR
// y := GetY ( building ) ;
60370: LD_ADDR_VAR 0 5
60374: PUSH
60375: LD_VAR 0 2
60379: PPUSH
60380: CALL_OW 251
60384: ST_TO_ADDR
// if not building or not x or not y then
60385: LD_VAR 0 2
60389: NOT
60390: PUSH
60391: LD_VAR 0 4
60395: NOT
60396: OR
60397: PUSH
60398: LD_VAR 0 5
60402: NOT
60403: OR
60404: IFFALSE 60408
// exit ;
60406: GO 60500
// if GetTaskList ( unit ) then
60408: LD_VAR 0 1
60412: PPUSH
60413: CALL_OW 437
60417: IFFALSE 60500
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60419: LD_STRING e
60421: PUSH
60422: LD_VAR 0 1
60426: PPUSH
60427: CALL_OW 437
60431: PUSH
60432: LD_INT 1
60434: ARRAY
60435: PUSH
60436: LD_INT 1
60438: ARRAY
60439: EQUAL
60440: PUSH
60441: LD_VAR 0 4
60445: PUSH
60446: LD_VAR 0 1
60450: PPUSH
60451: CALL_OW 437
60455: PUSH
60456: LD_INT 1
60458: ARRAY
60459: PUSH
60460: LD_INT 2
60462: ARRAY
60463: EQUAL
60464: AND
60465: PUSH
60466: LD_VAR 0 5
60470: PUSH
60471: LD_VAR 0 1
60475: PPUSH
60476: CALL_OW 437
60480: PUSH
60481: LD_INT 1
60483: ARRAY
60484: PUSH
60485: LD_INT 3
60487: ARRAY
60488: EQUAL
60489: AND
60490: IFFALSE 60500
// result := true end ;
60492: LD_ADDR_VAR 0 3
60496: PUSH
60497: LD_INT 1
60499: ST_TO_ADDR
// end ;
60500: LD_VAR 0 3
60504: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
60505: LD_INT 0
60507: PPUSH
// result := false ;
60508: LD_ADDR_VAR 0 4
60512: PUSH
60513: LD_INT 0
60515: ST_TO_ADDR
// if GetTaskList ( unit ) then
60516: LD_VAR 0 1
60520: PPUSH
60521: CALL_OW 437
60525: IFFALSE 60608
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60527: LD_STRING M
60529: PUSH
60530: LD_VAR 0 1
60534: PPUSH
60535: CALL_OW 437
60539: PUSH
60540: LD_INT 1
60542: ARRAY
60543: PUSH
60544: LD_INT 1
60546: ARRAY
60547: EQUAL
60548: PUSH
60549: LD_VAR 0 2
60553: PUSH
60554: LD_VAR 0 1
60558: PPUSH
60559: CALL_OW 437
60563: PUSH
60564: LD_INT 1
60566: ARRAY
60567: PUSH
60568: LD_INT 2
60570: ARRAY
60571: EQUAL
60572: AND
60573: PUSH
60574: LD_VAR 0 3
60578: PUSH
60579: LD_VAR 0 1
60583: PPUSH
60584: CALL_OW 437
60588: PUSH
60589: LD_INT 1
60591: ARRAY
60592: PUSH
60593: LD_INT 3
60595: ARRAY
60596: EQUAL
60597: AND
60598: IFFALSE 60608
// result := true ;
60600: LD_ADDR_VAR 0 4
60604: PUSH
60605: LD_INT 1
60607: ST_TO_ADDR
// end ; end ;
60608: LD_VAR 0 4
60612: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
60613: LD_INT 0
60615: PPUSH
60616: PPUSH
60617: PPUSH
60618: PPUSH
// if not unit or not area then
60619: LD_VAR 0 1
60623: NOT
60624: PUSH
60625: LD_VAR 0 2
60629: NOT
60630: OR
60631: IFFALSE 60635
// exit ;
60633: GO 60799
// tmp := AreaToList ( area , i ) ;
60635: LD_ADDR_VAR 0 6
60639: PUSH
60640: LD_VAR 0 2
60644: PPUSH
60645: LD_VAR 0 5
60649: PPUSH
60650: CALL_OW 517
60654: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
60655: LD_ADDR_VAR 0 5
60659: PUSH
60660: DOUBLE
60661: LD_INT 1
60663: DEC
60664: ST_TO_ADDR
60665: LD_VAR 0 6
60669: PUSH
60670: LD_INT 1
60672: ARRAY
60673: PUSH
60674: FOR_TO
60675: IFFALSE 60797
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
60677: LD_ADDR_VAR 0 7
60681: PUSH
60682: LD_VAR 0 6
60686: PUSH
60687: LD_INT 1
60689: ARRAY
60690: PUSH
60691: LD_VAR 0 5
60695: ARRAY
60696: PUSH
60697: LD_VAR 0 6
60701: PUSH
60702: LD_INT 2
60704: ARRAY
60705: PUSH
60706: LD_VAR 0 5
60710: ARRAY
60711: PUSH
60712: EMPTY
60713: LIST
60714: LIST
60715: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
60716: LD_VAR 0 7
60720: PUSH
60721: LD_INT 1
60723: ARRAY
60724: PPUSH
60725: LD_VAR 0 7
60729: PUSH
60730: LD_INT 2
60732: ARRAY
60733: PPUSH
60734: CALL_OW 428
60738: PUSH
60739: LD_INT 0
60741: EQUAL
60742: IFFALSE 60795
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
60744: LD_VAR 0 1
60748: PPUSH
60749: LD_VAR 0 7
60753: PUSH
60754: LD_INT 1
60756: ARRAY
60757: PPUSH
60758: LD_VAR 0 7
60762: PUSH
60763: LD_INT 2
60765: ARRAY
60766: PPUSH
60767: LD_VAR 0 3
60771: PPUSH
60772: CALL_OW 48
// result := IsPlaced ( unit ) ;
60776: LD_ADDR_VAR 0 4
60780: PUSH
60781: LD_VAR 0 1
60785: PPUSH
60786: CALL_OW 305
60790: ST_TO_ADDR
// exit ;
60791: POP
60792: POP
60793: GO 60799
// end ; end ;
60795: GO 60674
60797: POP
60798: POP
// end ;
60799: LD_VAR 0 4
60803: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
60804: LD_INT 0
60806: PPUSH
60807: PPUSH
60808: PPUSH
// if not side or side > 8 then
60809: LD_VAR 0 1
60813: NOT
60814: PUSH
60815: LD_VAR 0 1
60819: PUSH
60820: LD_INT 8
60822: GREATER
60823: OR
60824: IFFALSE 60828
// exit ;
60826: GO 61015
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
60828: LD_ADDR_VAR 0 4
60832: PUSH
60833: LD_INT 22
60835: PUSH
60836: LD_VAR 0 1
60840: PUSH
60841: EMPTY
60842: LIST
60843: LIST
60844: PUSH
60845: LD_INT 21
60847: PUSH
60848: LD_INT 3
60850: PUSH
60851: EMPTY
60852: LIST
60853: LIST
60854: PUSH
60855: EMPTY
60856: LIST
60857: LIST
60858: PPUSH
60859: CALL_OW 69
60863: ST_TO_ADDR
// if not tmp then
60864: LD_VAR 0 4
60868: NOT
60869: IFFALSE 60873
// exit ;
60871: GO 61015
// enable_addtolog := true ;
60873: LD_ADDR_OWVAR 81
60877: PUSH
60878: LD_INT 1
60880: ST_TO_ADDR
// AddToLog ( [ ) ;
60881: LD_STRING [
60883: PPUSH
60884: CALL_OW 561
// for i in tmp do
60888: LD_ADDR_VAR 0 3
60892: PUSH
60893: LD_VAR 0 4
60897: PUSH
60898: FOR_IN
60899: IFFALSE 61006
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
60901: LD_STRING [
60903: PUSH
60904: LD_VAR 0 3
60908: PPUSH
60909: CALL_OW 266
60913: STR
60914: PUSH
60915: LD_STRING , 
60917: STR
60918: PUSH
60919: LD_VAR 0 3
60923: PPUSH
60924: CALL_OW 250
60928: STR
60929: PUSH
60930: LD_STRING , 
60932: STR
60933: PUSH
60934: LD_VAR 0 3
60938: PPUSH
60939: CALL_OW 251
60943: STR
60944: PUSH
60945: LD_STRING , 
60947: STR
60948: PUSH
60949: LD_VAR 0 3
60953: PPUSH
60954: CALL_OW 254
60958: STR
60959: PUSH
60960: LD_STRING , 
60962: STR
60963: PUSH
60964: LD_VAR 0 3
60968: PPUSH
60969: LD_INT 1
60971: PPUSH
60972: CALL_OW 268
60976: STR
60977: PUSH
60978: LD_STRING , 
60980: STR
60981: PUSH
60982: LD_VAR 0 3
60986: PPUSH
60987: LD_INT 2
60989: PPUSH
60990: CALL_OW 268
60994: STR
60995: PUSH
60996: LD_STRING ],
60998: STR
60999: PPUSH
61000: CALL_OW 561
// end ;
61004: GO 60898
61006: POP
61007: POP
// AddToLog ( ]; ) ;
61008: LD_STRING ];
61010: PPUSH
61011: CALL_OW 561
// end ;
61015: LD_VAR 0 2
61019: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
61020: LD_INT 0
61022: PPUSH
61023: PPUSH
61024: PPUSH
61025: PPUSH
61026: PPUSH
// if not area or not rate or not max then
61027: LD_VAR 0 1
61031: NOT
61032: PUSH
61033: LD_VAR 0 2
61037: NOT
61038: OR
61039: PUSH
61040: LD_VAR 0 4
61044: NOT
61045: OR
61046: IFFALSE 61050
// exit ;
61048: GO 61242
// while 1 do
61050: LD_INT 1
61052: IFFALSE 61242
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
61054: LD_ADDR_VAR 0 9
61058: PUSH
61059: LD_VAR 0 1
61063: PPUSH
61064: LD_INT 1
61066: PPUSH
61067: CALL_OW 287
61071: PUSH
61072: LD_INT 10
61074: MUL
61075: ST_TO_ADDR
// r := rate / 10 ;
61076: LD_ADDR_VAR 0 7
61080: PUSH
61081: LD_VAR 0 2
61085: PUSH
61086: LD_INT 10
61088: DIVREAL
61089: ST_TO_ADDR
// time := 1 1$00 ;
61090: LD_ADDR_VAR 0 8
61094: PUSH
61095: LD_INT 2100
61097: ST_TO_ADDR
// if amount < min then
61098: LD_VAR 0 9
61102: PUSH
61103: LD_VAR 0 3
61107: LESS
61108: IFFALSE 61126
// r := r * 2 else
61110: LD_ADDR_VAR 0 7
61114: PUSH
61115: LD_VAR 0 7
61119: PUSH
61120: LD_INT 2
61122: MUL
61123: ST_TO_ADDR
61124: GO 61152
// if amount > max then
61126: LD_VAR 0 9
61130: PUSH
61131: LD_VAR 0 4
61135: GREATER
61136: IFFALSE 61152
// r := r / 2 ;
61138: LD_ADDR_VAR 0 7
61142: PUSH
61143: LD_VAR 0 7
61147: PUSH
61148: LD_INT 2
61150: DIVREAL
61151: ST_TO_ADDR
// time := time / r ;
61152: LD_ADDR_VAR 0 8
61156: PUSH
61157: LD_VAR 0 8
61161: PUSH
61162: LD_VAR 0 7
61166: DIVREAL
61167: ST_TO_ADDR
// if time < 0 then
61168: LD_VAR 0 8
61172: PUSH
61173: LD_INT 0
61175: LESS
61176: IFFALSE 61193
// time := time * - 1 ;
61178: LD_ADDR_VAR 0 8
61182: PUSH
61183: LD_VAR 0 8
61187: PUSH
61188: LD_INT 1
61190: NEG
61191: MUL
61192: ST_TO_ADDR
// wait ( time ) ;
61193: LD_VAR 0 8
61197: PPUSH
61198: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
61202: LD_INT 35
61204: PPUSH
61205: LD_INT 875
61207: PPUSH
61208: CALL_OW 12
61212: PPUSH
61213: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
61217: LD_INT 1
61219: PPUSH
61220: LD_INT 5
61222: PPUSH
61223: CALL_OW 12
61227: PPUSH
61228: LD_VAR 0 1
61232: PPUSH
61233: LD_INT 1
61235: PPUSH
61236: CALL_OW 55
// end ;
61240: GO 61050
// end ;
61242: LD_VAR 0 5
61246: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
61247: LD_INT 0
61249: PPUSH
61250: PPUSH
61251: PPUSH
61252: PPUSH
61253: PPUSH
61254: PPUSH
61255: PPUSH
61256: PPUSH
// if not turrets or not factories then
61257: LD_VAR 0 1
61261: NOT
61262: PUSH
61263: LD_VAR 0 2
61267: NOT
61268: OR
61269: IFFALSE 61273
// exit ;
61271: GO 61580
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
61273: LD_ADDR_VAR 0 10
61277: PUSH
61278: LD_INT 5
61280: PUSH
61281: LD_INT 6
61283: PUSH
61284: EMPTY
61285: LIST
61286: LIST
61287: PUSH
61288: LD_INT 2
61290: PUSH
61291: LD_INT 4
61293: PUSH
61294: EMPTY
61295: LIST
61296: LIST
61297: PUSH
61298: LD_INT 3
61300: PUSH
61301: LD_INT 5
61303: PUSH
61304: EMPTY
61305: LIST
61306: LIST
61307: PUSH
61308: EMPTY
61309: LIST
61310: LIST
61311: LIST
61312: PUSH
61313: LD_INT 24
61315: PUSH
61316: LD_INT 25
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: PUSH
61323: LD_INT 23
61325: PUSH
61326: LD_INT 27
61328: PUSH
61329: EMPTY
61330: LIST
61331: LIST
61332: PUSH
61333: EMPTY
61334: LIST
61335: LIST
61336: PUSH
61337: LD_INT 42
61339: PUSH
61340: LD_INT 43
61342: PUSH
61343: EMPTY
61344: LIST
61345: LIST
61346: PUSH
61347: LD_INT 44
61349: PUSH
61350: LD_INT 46
61352: PUSH
61353: EMPTY
61354: LIST
61355: LIST
61356: PUSH
61357: LD_INT 45
61359: PUSH
61360: LD_INT 47
61362: PUSH
61363: EMPTY
61364: LIST
61365: LIST
61366: PUSH
61367: EMPTY
61368: LIST
61369: LIST
61370: LIST
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: LIST
61376: ST_TO_ADDR
// result := [ ] ;
61377: LD_ADDR_VAR 0 3
61381: PUSH
61382: EMPTY
61383: ST_TO_ADDR
// for i in turrets do
61384: LD_ADDR_VAR 0 4
61388: PUSH
61389: LD_VAR 0 1
61393: PUSH
61394: FOR_IN
61395: IFFALSE 61578
// begin nat := GetNation ( i ) ;
61397: LD_ADDR_VAR 0 7
61401: PUSH
61402: LD_VAR 0 4
61406: PPUSH
61407: CALL_OW 248
61411: ST_TO_ADDR
// weapon := 0 ;
61412: LD_ADDR_VAR 0 8
61416: PUSH
61417: LD_INT 0
61419: ST_TO_ADDR
// if not nat then
61420: LD_VAR 0 7
61424: NOT
61425: IFFALSE 61429
// continue ;
61427: GO 61394
// for j in list [ nat ] do
61429: LD_ADDR_VAR 0 5
61433: PUSH
61434: LD_VAR 0 10
61438: PUSH
61439: LD_VAR 0 7
61443: ARRAY
61444: PUSH
61445: FOR_IN
61446: IFFALSE 61487
// if GetBWeapon ( i ) = j [ 1 ] then
61448: LD_VAR 0 4
61452: PPUSH
61453: CALL_OW 269
61457: PUSH
61458: LD_VAR 0 5
61462: PUSH
61463: LD_INT 1
61465: ARRAY
61466: EQUAL
61467: IFFALSE 61485
// begin weapon := j [ 2 ] ;
61469: LD_ADDR_VAR 0 8
61473: PUSH
61474: LD_VAR 0 5
61478: PUSH
61479: LD_INT 2
61481: ARRAY
61482: ST_TO_ADDR
// break ;
61483: GO 61487
// end ;
61485: GO 61445
61487: POP
61488: POP
// if not weapon then
61489: LD_VAR 0 8
61493: NOT
61494: IFFALSE 61498
// continue ;
61496: GO 61394
// for k in factories do
61498: LD_ADDR_VAR 0 6
61502: PUSH
61503: LD_VAR 0 2
61507: PUSH
61508: FOR_IN
61509: IFFALSE 61574
// begin weapons := AvailableWeaponList ( k ) ;
61511: LD_ADDR_VAR 0 9
61515: PUSH
61516: LD_VAR 0 6
61520: PPUSH
61521: CALL_OW 478
61525: ST_TO_ADDR
// if not weapons then
61526: LD_VAR 0 9
61530: NOT
61531: IFFALSE 61535
// continue ;
61533: GO 61508
// if weapon in weapons then
61535: LD_VAR 0 8
61539: PUSH
61540: LD_VAR 0 9
61544: IN
61545: IFFALSE 61572
// begin result := [ i , weapon ] ;
61547: LD_ADDR_VAR 0 3
61551: PUSH
61552: LD_VAR 0 4
61556: PUSH
61557: LD_VAR 0 8
61561: PUSH
61562: EMPTY
61563: LIST
61564: LIST
61565: ST_TO_ADDR
// exit ;
61566: POP
61567: POP
61568: POP
61569: POP
61570: GO 61580
// end ; end ;
61572: GO 61508
61574: POP
61575: POP
// end ;
61576: GO 61394
61578: POP
61579: POP
// end ;
61580: LD_VAR 0 3
61584: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
61585: LD_INT 0
61587: PPUSH
// if not side or side > 8 then
61588: LD_VAR 0 3
61592: NOT
61593: PUSH
61594: LD_VAR 0 3
61598: PUSH
61599: LD_INT 8
61601: GREATER
61602: OR
61603: IFFALSE 61607
// exit ;
61605: GO 61666
// if not range then
61607: LD_VAR 0 4
61611: NOT
61612: IFFALSE 61623
// range := - 12 ;
61614: LD_ADDR_VAR 0 4
61618: PUSH
61619: LD_INT 12
61621: NEG
61622: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
61623: LD_VAR 0 1
61627: PPUSH
61628: LD_VAR 0 2
61632: PPUSH
61633: LD_VAR 0 3
61637: PPUSH
61638: LD_VAR 0 4
61642: PPUSH
61643: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
61647: LD_VAR 0 1
61651: PPUSH
61652: LD_VAR 0 2
61656: PPUSH
61657: LD_VAR 0 3
61661: PPUSH
61662: CALL_OW 331
// end ;
61666: LD_VAR 0 5
61670: RET
// export function Video ( mode ) ; begin
61671: LD_INT 0
61673: PPUSH
// ingame_video = mode ;
61674: LD_ADDR_OWVAR 52
61678: PUSH
61679: LD_VAR 0 1
61683: ST_TO_ADDR
// interface_hidden = mode ;
61684: LD_ADDR_OWVAR 54
61688: PUSH
61689: LD_VAR 0 1
61693: ST_TO_ADDR
// end ;
61694: LD_VAR 0 2
61698: RET
// export function Join ( array , element ) ; begin
61699: LD_INT 0
61701: PPUSH
// result := Replace ( array , array + 1 , element ) ;
61702: LD_ADDR_VAR 0 3
61706: PUSH
61707: LD_VAR 0 1
61711: PPUSH
61712: LD_VAR 0 1
61716: PUSH
61717: LD_INT 1
61719: PLUS
61720: PPUSH
61721: LD_VAR 0 2
61725: PPUSH
61726: CALL_OW 1
61730: ST_TO_ADDR
// end ;
61731: LD_VAR 0 3
61735: RET
// export function JoinUnion ( array , element ) ; begin
61736: LD_INT 0
61738: PPUSH
// result := array union element ;
61739: LD_ADDR_VAR 0 3
61743: PUSH
61744: LD_VAR 0 1
61748: PUSH
61749: LD_VAR 0 2
61753: UNION
61754: ST_TO_ADDR
// end ;
61755: LD_VAR 0 3
61759: RET
// export function GetBehemoths ( side ) ; begin
61760: LD_INT 0
61762: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
61763: LD_ADDR_VAR 0 2
61767: PUSH
61768: LD_INT 22
61770: PUSH
61771: LD_VAR 0 1
61775: PUSH
61776: EMPTY
61777: LIST
61778: LIST
61779: PUSH
61780: LD_INT 31
61782: PUSH
61783: LD_INT 25
61785: PUSH
61786: EMPTY
61787: LIST
61788: LIST
61789: PUSH
61790: EMPTY
61791: LIST
61792: LIST
61793: PPUSH
61794: CALL_OW 69
61798: ST_TO_ADDR
// end ;
61799: LD_VAR 0 2
61803: RET
// export function Shuffle ( array ) ; var i , index ; begin
61804: LD_INT 0
61806: PPUSH
61807: PPUSH
61808: PPUSH
// result := [ ] ;
61809: LD_ADDR_VAR 0 2
61813: PUSH
61814: EMPTY
61815: ST_TO_ADDR
// if not array then
61816: LD_VAR 0 1
61820: NOT
61821: IFFALSE 61825
// exit ;
61823: GO 61924
// Randomize ;
61825: CALL_OW 10
// for i = array downto 1 do
61829: LD_ADDR_VAR 0 3
61833: PUSH
61834: DOUBLE
61835: LD_VAR 0 1
61839: INC
61840: ST_TO_ADDR
61841: LD_INT 1
61843: PUSH
61844: FOR_DOWNTO
61845: IFFALSE 61922
// begin index := rand ( 1 , array ) ;
61847: LD_ADDR_VAR 0 4
61851: PUSH
61852: LD_INT 1
61854: PPUSH
61855: LD_VAR 0 1
61859: PPUSH
61860: CALL_OW 12
61864: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
61865: LD_ADDR_VAR 0 2
61869: PUSH
61870: LD_VAR 0 2
61874: PPUSH
61875: LD_VAR 0 2
61879: PUSH
61880: LD_INT 1
61882: PLUS
61883: PPUSH
61884: LD_VAR 0 1
61888: PUSH
61889: LD_VAR 0 4
61893: ARRAY
61894: PPUSH
61895: CALL_OW 2
61899: ST_TO_ADDR
// array := Delete ( array , index ) ;
61900: LD_ADDR_VAR 0 1
61904: PUSH
61905: LD_VAR 0 1
61909: PPUSH
61910: LD_VAR 0 4
61914: PPUSH
61915: CALL_OW 3
61919: ST_TO_ADDR
// end ;
61920: GO 61844
61922: POP
61923: POP
// end ;
61924: LD_VAR 0 2
61928: RET
// export function GetBaseMaterials ( base ) ; begin
61929: LD_INT 0
61931: PPUSH
// result := [ 0 , 0 , 0 ] ;
61932: LD_ADDR_VAR 0 2
61936: PUSH
61937: LD_INT 0
61939: PUSH
61940: LD_INT 0
61942: PUSH
61943: LD_INT 0
61945: PUSH
61946: EMPTY
61947: LIST
61948: LIST
61949: LIST
61950: ST_TO_ADDR
// if not base then
61951: LD_VAR 0 1
61955: NOT
61956: IFFALSE 61960
// exit ;
61958: GO 62009
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
61960: LD_ADDR_VAR 0 2
61964: PUSH
61965: LD_VAR 0 1
61969: PPUSH
61970: LD_INT 1
61972: PPUSH
61973: CALL_OW 275
61977: PUSH
61978: LD_VAR 0 1
61982: PPUSH
61983: LD_INT 2
61985: PPUSH
61986: CALL_OW 275
61990: PUSH
61991: LD_VAR 0 1
61995: PPUSH
61996: LD_INT 3
61998: PPUSH
61999: CALL_OW 275
62003: PUSH
62004: EMPTY
62005: LIST
62006: LIST
62007: LIST
62008: ST_TO_ADDR
// end ;
62009: LD_VAR 0 2
62013: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
62014: LD_INT 0
62016: PPUSH
62017: PPUSH
// result := array ;
62018: LD_ADDR_VAR 0 3
62022: PUSH
62023: LD_VAR 0 1
62027: ST_TO_ADDR
// if size > 0 then
62028: LD_VAR 0 2
62032: PUSH
62033: LD_INT 0
62035: GREATER
62036: IFFALSE 62082
// for i := array downto size do
62038: LD_ADDR_VAR 0 4
62042: PUSH
62043: DOUBLE
62044: LD_VAR 0 1
62048: INC
62049: ST_TO_ADDR
62050: LD_VAR 0 2
62054: PUSH
62055: FOR_DOWNTO
62056: IFFALSE 62080
// result := Delete ( result , result ) ;
62058: LD_ADDR_VAR 0 3
62062: PUSH
62063: LD_VAR 0 3
62067: PPUSH
62068: LD_VAR 0 3
62072: PPUSH
62073: CALL_OW 3
62077: ST_TO_ADDR
62078: GO 62055
62080: POP
62081: POP
// end ;
62082: LD_VAR 0 3
62086: RET
// export function ComExit ( unit ) ; var tmp ; begin
62087: LD_INT 0
62089: PPUSH
62090: PPUSH
// if not IsInUnit ( unit ) then
62091: LD_VAR 0 1
62095: PPUSH
62096: CALL_OW 310
62100: NOT
62101: IFFALSE 62105
// exit ;
62103: GO 62165
// tmp := IsInUnit ( unit ) ;
62105: LD_ADDR_VAR 0 3
62109: PUSH
62110: LD_VAR 0 1
62114: PPUSH
62115: CALL_OW 310
62119: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
62120: LD_VAR 0 3
62124: PPUSH
62125: CALL_OW 247
62129: PUSH
62130: LD_INT 2
62132: EQUAL
62133: IFFALSE 62146
// ComExitVehicle ( unit ) else
62135: LD_VAR 0 1
62139: PPUSH
62140: CALL_OW 121
62144: GO 62155
// ComExitBuilding ( unit ) ;
62146: LD_VAR 0 1
62150: PPUSH
62151: CALL_OW 122
// result := tmp ;
62155: LD_ADDR_VAR 0 2
62159: PUSH
62160: LD_VAR 0 3
62164: ST_TO_ADDR
// end ;
62165: LD_VAR 0 2
62169: RET
// export function ComExitAll ( units ) ; var i ; begin
62170: LD_INT 0
62172: PPUSH
62173: PPUSH
// if not units then
62174: LD_VAR 0 1
62178: NOT
62179: IFFALSE 62183
// exit ;
62181: GO 62209
// for i in units do
62183: LD_ADDR_VAR 0 3
62187: PUSH
62188: LD_VAR 0 1
62192: PUSH
62193: FOR_IN
62194: IFFALSE 62207
// ComExit ( i ) ;
62196: LD_VAR 0 3
62200: PPUSH
62201: CALL 62087 0 1
62205: GO 62193
62207: POP
62208: POP
// end ;
62209: LD_VAR 0 2
62213: RET
// export function ResetHc ; begin
62214: LD_INT 0
62216: PPUSH
// InitHc ;
62217: CALL_OW 19
// hc_importance := 0 ;
62221: LD_ADDR_OWVAR 32
62225: PUSH
62226: LD_INT 0
62228: ST_TO_ADDR
// end ;
62229: LD_VAR 0 1
62233: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
62234: LD_INT 0
62236: PPUSH
62237: PPUSH
62238: PPUSH
// _x := ( x1 + x2 ) div 2 ;
62239: LD_ADDR_VAR 0 6
62243: PUSH
62244: LD_VAR 0 1
62248: PUSH
62249: LD_VAR 0 3
62253: PLUS
62254: PUSH
62255: LD_INT 2
62257: DIV
62258: ST_TO_ADDR
// if _x < 0 then
62259: LD_VAR 0 6
62263: PUSH
62264: LD_INT 0
62266: LESS
62267: IFFALSE 62284
// _x := _x * - 1 ;
62269: LD_ADDR_VAR 0 6
62273: PUSH
62274: LD_VAR 0 6
62278: PUSH
62279: LD_INT 1
62281: NEG
62282: MUL
62283: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
62284: LD_ADDR_VAR 0 7
62288: PUSH
62289: LD_VAR 0 2
62293: PUSH
62294: LD_VAR 0 4
62298: PLUS
62299: PUSH
62300: LD_INT 2
62302: DIV
62303: ST_TO_ADDR
// if _y < 0 then
62304: LD_VAR 0 7
62308: PUSH
62309: LD_INT 0
62311: LESS
62312: IFFALSE 62329
// _y := _y * - 1 ;
62314: LD_ADDR_VAR 0 7
62318: PUSH
62319: LD_VAR 0 7
62323: PUSH
62324: LD_INT 1
62326: NEG
62327: MUL
62328: ST_TO_ADDR
// result := [ _x , _y ] ;
62329: LD_ADDR_VAR 0 5
62333: PUSH
62334: LD_VAR 0 6
62338: PUSH
62339: LD_VAR 0 7
62343: PUSH
62344: EMPTY
62345: LIST
62346: LIST
62347: ST_TO_ADDR
// end ;
62348: LD_VAR 0 5
62352: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
62353: LD_INT 0
62355: PPUSH
62356: PPUSH
62357: PPUSH
62358: PPUSH
// task := GetTaskList ( unit ) ;
62359: LD_ADDR_VAR 0 7
62363: PUSH
62364: LD_VAR 0 1
62368: PPUSH
62369: CALL_OW 437
62373: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
62374: LD_VAR 0 7
62378: NOT
62379: PUSH
62380: LD_VAR 0 1
62384: PPUSH
62385: LD_VAR 0 2
62389: PPUSH
62390: CALL_OW 308
62394: NOT
62395: AND
62396: IFFALSE 62400
// exit ;
62398: GO 62518
// if IsInArea ( unit , area ) then
62400: LD_VAR 0 1
62404: PPUSH
62405: LD_VAR 0 2
62409: PPUSH
62410: CALL_OW 308
62414: IFFALSE 62432
// begin ComMoveToArea ( unit , goAway ) ;
62416: LD_VAR 0 1
62420: PPUSH
62421: LD_VAR 0 3
62425: PPUSH
62426: CALL_OW 113
// exit ;
62430: GO 62518
// end ; if task [ 1 ] [ 1 ] <> M then
62432: LD_VAR 0 7
62436: PUSH
62437: LD_INT 1
62439: ARRAY
62440: PUSH
62441: LD_INT 1
62443: ARRAY
62444: PUSH
62445: LD_STRING M
62447: NONEQUAL
62448: IFFALSE 62452
// exit ;
62450: GO 62518
// x := task [ 1 ] [ 2 ] ;
62452: LD_ADDR_VAR 0 5
62456: PUSH
62457: LD_VAR 0 7
62461: PUSH
62462: LD_INT 1
62464: ARRAY
62465: PUSH
62466: LD_INT 2
62468: ARRAY
62469: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
62470: LD_ADDR_VAR 0 6
62474: PUSH
62475: LD_VAR 0 7
62479: PUSH
62480: LD_INT 1
62482: ARRAY
62483: PUSH
62484: LD_INT 3
62486: ARRAY
62487: ST_TO_ADDR
// if InArea ( x , y , area ) then
62488: LD_VAR 0 5
62492: PPUSH
62493: LD_VAR 0 6
62497: PPUSH
62498: LD_VAR 0 2
62502: PPUSH
62503: CALL_OW 309
62507: IFFALSE 62518
// ComStop ( unit ) ;
62509: LD_VAR 0 1
62513: PPUSH
62514: CALL_OW 141
// end ;
62518: LD_VAR 0 4
62522: RET
// export function Abs ( value ) ; begin
62523: LD_INT 0
62525: PPUSH
// result := value ;
62526: LD_ADDR_VAR 0 2
62530: PUSH
62531: LD_VAR 0 1
62535: ST_TO_ADDR
// if value < 0 then
62536: LD_VAR 0 1
62540: PUSH
62541: LD_INT 0
62543: LESS
62544: IFFALSE 62561
// result := value * - 1 ;
62546: LD_ADDR_VAR 0 2
62550: PUSH
62551: LD_VAR 0 1
62555: PUSH
62556: LD_INT 1
62558: NEG
62559: MUL
62560: ST_TO_ADDR
// end ;
62561: LD_VAR 0 2
62565: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
62566: LD_INT 0
62568: PPUSH
62569: PPUSH
62570: PPUSH
62571: PPUSH
62572: PPUSH
62573: PPUSH
62574: PPUSH
62575: PPUSH
// if not unit or not building then
62576: LD_VAR 0 1
62580: NOT
62581: PUSH
62582: LD_VAR 0 2
62586: NOT
62587: OR
62588: IFFALSE 62592
// exit ;
62590: GO 62818
// x := GetX ( building ) ;
62592: LD_ADDR_VAR 0 4
62596: PUSH
62597: LD_VAR 0 2
62601: PPUSH
62602: CALL_OW 250
62606: ST_TO_ADDR
// y := GetY ( building ) ;
62607: LD_ADDR_VAR 0 6
62611: PUSH
62612: LD_VAR 0 2
62616: PPUSH
62617: CALL_OW 251
62621: ST_TO_ADDR
// d := GetDir ( building ) ;
62622: LD_ADDR_VAR 0 8
62626: PUSH
62627: LD_VAR 0 2
62631: PPUSH
62632: CALL_OW 254
62636: ST_TO_ADDR
// r := 4 ;
62637: LD_ADDR_VAR 0 9
62641: PUSH
62642: LD_INT 4
62644: ST_TO_ADDR
// for i := 1 to 5 do
62645: LD_ADDR_VAR 0 10
62649: PUSH
62650: DOUBLE
62651: LD_INT 1
62653: DEC
62654: ST_TO_ADDR
62655: LD_INT 5
62657: PUSH
62658: FOR_TO
62659: IFFALSE 62816
// begin _x := ShiftX ( x , d , r + i ) ;
62661: LD_ADDR_VAR 0 5
62665: PUSH
62666: LD_VAR 0 4
62670: PPUSH
62671: LD_VAR 0 8
62675: PPUSH
62676: LD_VAR 0 9
62680: PUSH
62681: LD_VAR 0 10
62685: PLUS
62686: PPUSH
62687: CALL_OW 272
62691: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
62692: LD_ADDR_VAR 0 7
62696: PUSH
62697: LD_VAR 0 6
62701: PPUSH
62702: LD_VAR 0 8
62706: PPUSH
62707: LD_VAR 0 9
62711: PUSH
62712: LD_VAR 0 10
62716: PLUS
62717: PPUSH
62718: CALL_OW 273
62722: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
62723: LD_VAR 0 5
62727: PPUSH
62728: LD_VAR 0 7
62732: PPUSH
62733: CALL_OW 488
62737: PUSH
62738: LD_VAR 0 5
62742: PPUSH
62743: LD_VAR 0 7
62747: PPUSH
62748: CALL_OW 428
62752: PPUSH
62753: CALL_OW 247
62757: PUSH
62758: LD_INT 3
62760: PUSH
62761: LD_INT 2
62763: PUSH
62764: EMPTY
62765: LIST
62766: LIST
62767: IN
62768: NOT
62769: AND
62770: IFFALSE 62814
// begin ComMoveXY ( unit , _x , _y ) ;
62772: LD_VAR 0 1
62776: PPUSH
62777: LD_VAR 0 5
62781: PPUSH
62782: LD_VAR 0 7
62786: PPUSH
62787: CALL_OW 111
// result := [ _x , _y ] ;
62791: LD_ADDR_VAR 0 3
62795: PUSH
62796: LD_VAR 0 5
62800: PUSH
62801: LD_VAR 0 7
62805: PUSH
62806: EMPTY
62807: LIST
62808: LIST
62809: ST_TO_ADDR
// exit ;
62810: POP
62811: POP
62812: GO 62818
// end ; end ;
62814: GO 62658
62816: POP
62817: POP
// end ;
62818: LD_VAR 0 3
62822: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
62823: LD_INT 0
62825: PPUSH
62826: PPUSH
62827: PPUSH
// result := 0 ;
62828: LD_ADDR_VAR 0 3
62832: PUSH
62833: LD_INT 0
62835: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
62836: LD_VAR 0 1
62840: PUSH
62841: LD_INT 0
62843: LESS
62844: PUSH
62845: LD_VAR 0 1
62849: PUSH
62850: LD_INT 8
62852: GREATER
62853: OR
62854: PUSH
62855: LD_VAR 0 2
62859: PUSH
62860: LD_INT 0
62862: LESS
62863: OR
62864: PUSH
62865: LD_VAR 0 2
62869: PUSH
62870: LD_INT 8
62872: GREATER
62873: OR
62874: IFFALSE 62878
// exit ;
62876: GO 62953
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
62878: LD_ADDR_VAR 0 4
62882: PUSH
62883: LD_INT 22
62885: PUSH
62886: LD_VAR 0 2
62890: PUSH
62891: EMPTY
62892: LIST
62893: LIST
62894: PPUSH
62895: CALL_OW 69
62899: PUSH
62900: FOR_IN
62901: IFFALSE 62951
// begin un := UnitShoot ( i ) ;
62903: LD_ADDR_VAR 0 5
62907: PUSH
62908: LD_VAR 0 4
62912: PPUSH
62913: CALL_OW 504
62917: ST_TO_ADDR
// if GetSide ( un ) = side1 then
62918: LD_VAR 0 5
62922: PPUSH
62923: CALL_OW 255
62927: PUSH
62928: LD_VAR 0 1
62932: EQUAL
62933: IFFALSE 62949
// begin result := un ;
62935: LD_ADDR_VAR 0 3
62939: PUSH
62940: LD_VAR 0 5
62944: ST_TO_ADDR
// exit ;
62945: POP
62946: POP
62947: GO 62953
// end ; end ;
62949: GO 62900
62951: POP
62952: POP
// end ;
62953: LD_VAR 0 3
62957: RET
// export function GetCargoBay ( units ) ; begin
62958: LD_INT 0
62960: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
62961: LD_ADDR_VAR 0 2
62965: PUSH
62966: LD_VAR 0 1
62970: PPUSH
62971: LD_INT 2
62973: PUSH
62974: LD_INT 34
62976: PUSH
62977: LD_INT 12
62979: PUSH
62980: EMPTY
62981: LIST
62982: LIST
62983: PUSH
62984: LD_INT 34
62986: PUSH
62987: LD_INT 51
62989: PUSH
62990: EMPTY
62991: LIST
62992: LIST
62993: PUSH
62994: LD_INT 34
62996: PUSH
62997: LD_INT 32
62999: PUSH
63000: EMPTY
63001: LIST
63002: LIST
63003: PUSH
63004: LD_INT 34
63006: PUSH
63007: LD_EXP 94
63011: PUSH
63012: EMPTY
63013: LIST
63014: LIST
63015: PUSH
63016: EMPTY
63017: LIST
63018: LIST
63019: LIST
63020: LIST
63021: LIST
63022: PPUSH
63023: CALL_OW 72
63027: ST_TO_ADDR
// end ;
63028: LD_VAR 0 2
63032: RET
// export function Negate ( value ) ; begin
63033: LD_INT 0
63035: PPUSH
// result := not value ;
63036: LD_ADDR_VAR 0 2
63040: PUSH
63041: LD_VAR 0 1
63045: NOT
63046: ST_TO_ADDR
// end ;
63047: LD_VAR 0 2
63051: RET
// export function Inc ( value ) ; begin
63052: LD_INT 0
63054: PPUSH
// result := value + 1 ;
63055: LD_ADDR_VAR 0 2
63059: PUSH
63060: LD_VAR 0 1
63064: PUSH
63065: LD_INT 1
63067: PLUS
63068: ST_TO_ADDR
// end ;
63069: LD_VAR 0 2
63073: RET
// export function Dec ( value ) ; begin
63074: LD_INT 0
63076: PPUSH
// result := value - 1 ;
63077: LD_ADDR_VAR 0 2
63081: PUSH
63082: LD_VAR 0 1
63086: PUSH
63087: LD_INT 1
63089: MINUS
63090: ST_TO_ADDR
// end ;
63091: LD_VAR 0 2
63095: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
63096: LD_INT 0
63098: PPUSH
63099: PPUSH
63100: PPUSH
63101: PPUSH
63102: PPUSH
63103: PPUSH
63104: PPUSH
63105: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
63106: LD_VAR 0 1
63110: PPUSH
63111: LD_VAR 0 2
63115: PPUSH
63116: CALL_OW 488
63120: NOT
63121: PUSH
63122: LD_VAR 0 3
63126: PPUSH
63127: LD_VAR 0 4
63131: PPUSH
63132: CALL_OW 488
63136: NOT
63137: OR
63138: IFFALSE 63151
// begin result := - 1 ;
63140: LD_ADDR_VAR 0 5
63144: PUSH
63145: LD_INT 1
63147: NEG
63148: ST_TO_ADDR
// exit ;
63149: GO 63386
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
63151: LD_ADDR_VAR 0 12
63155: PUSH
63156: LD_VAR 0 1
63160: PPUSH
63161: LD_VAR 0 2
63165: PPUSH
63166: LD_VAR 0 3
63170: PPUSH
63171: LD_VAR 0 4
63175: PPUSH
63176: CALL 62234 0 4
63180: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
63181: LD_ADDR_VAR 0 11
63185: PUSH
63186: LD_VAR 0 1
63190: PPUSH
63191: LD_VAR 0 2
63195: PPUSH
63196: LD_VAR 0 12
63200: PUSH
63201: LD_INT 1
63203: ARRAY
63204: PPUSH
63205: LD_VAR 0 12
63209: PUSH
63210: LD_INT 2
63212: ARRAY
63213: PPUSH
63214: CALL_OW 298
63218: ST_TO_ADDR
// distance := 9999 ;
63219: LD_ADDR_VAR 0 10
63223: PUSH
63224: LD_INT 9999
63226: ST_TO_ADDR
// for i := 0 to 5 do
63227: LD_ADDR_VAR 0 6
63231: PUSH
63232: DOUBLE
63233: LD_INT 0
63235: DEC
63236: ST_TO_ADDR
63237: LD_INT 5
63239: PUSH
63240: FOR_TO
63241: IFFALSE 63384
// begin _x := ShiftX ( x1 , i , centerDist ) ;
63243: LD_ADDR_VAR 0 7
63247: PUSH
63248: LD_VAR 0 1
63252: PPUSH
63253: LD_VAR 0 6
63257: PPUSH
63258: LD_VAR 0 11
63262: PPUSH
63263: CALL_OW 272
63267: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
63268: LD_ADDR_VAR 0 8
63272: PUSH
63273: LD_VAR 0 2
63277: PPUSH
63278: LD_VAR 0 6
63282: PPUSH
63283: LD_VAR 0 11
63287: PPUSH
63288: CALL_OW 273
63292: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
63293: LD_VAR 0 7
63297: PPUSH
63298: LD_VAR 0 8
63302: PPUSH
63303: CALL_OW 488
63307: NOT
63308: IFFALSE 63312
// continue ;
63310: GO 63240
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
63312: LD_ADDR_VAR 0 9
63316: PUSH
63317: LD_VAR 0 12
63321: PUSH
63322: LD_INT 1
63324: ARRAY
63325: PPUSH
63326: LD_VAR 0 12
63330: PUSH
63331: LD_INT 2
63333: ARRAY
63334: PPUSH
63335: LD_VAR 0 7
63339: PPUSH
63340: LD_VAR 0 8
63344: PPUSH
63345: CALL_OW 298
63349: ST_TO_ADDR
// if tmp < distance then
63350: LD_VAR 0 9
63354: PUSH
63355: LD_VAR 0 10
63359: LESS
63360: IFFALSE 63382
// begin result := i ;
63362: LD_ADDR_VAR 0 5
63366: PUSH
63367: LD_VAR 0 6
63371: ST_TO_ADDR
// distance := tmp ;
63372: LD_ADDR_VAR 0 10
63376: PUSH
63377: LD_VAR 0 9
63381: ST_TO_ADDR
// end ; end ;
63382: GO 63240
63384: POP
63385: POP
// end ;
63386: LD_VAR 0 5
63390: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
63391: LD_INT 0
63393: PPUSH
63394: PPUSH
// if not driver or not IsInUnit ( driver ) then
63395: LD_VAR 0 1
63399: NOT
63400: PUSH
63401: LD_VAR 0 1
63405: PPUSH
63406: CALL_OW 310
63410: NOT
63411: OR
63412: IFFALSE 63416
// exit ;
63414: GO 63506
// vehicle := IsInUnit ( driver ) ;
63416: LD_ADDR_VAR 0 3
63420: PUSH
63421: LD_VAR 0 1
63425: PPUSH
63426: CALL_OW 310
63430: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
63431: LD_VAR 0 1
63435: PPUSH
63436: LD_STRING \
63438: PUSH
63439: LD_INT 0
63441: PUSH
63442: LD_INT 0
63444: PUSH
63445: LD_INT 0
63447: PUSH
63448: LD_INT 0
63450: PUSH
63451: LD_INT 0
63453: PUSH
63454: LD_INT 0
63456: PUSH
63457: EMPTY
63458: LIST
63459: LIST
63460: LIST
63461: LIST
63462: LIST
63463: LIST
63464: LIST
63465: PUSH
63466: LD_STRING E
63468: PUSH
63469: LD_INT 0
63471: PUSH
63472: LD_INT 0
63474: PUSH
63475: LD_VAR 0 3
63479: PUSH
63480: LD_INT 0
63482: PUSH
63483: LD_INT 0
63485: PUSH
63486: LD_INT 0
63488: PUSH
63489: EMPTY
63490: LIST
63491: LIST
63492: LIST
63493: LIST
63494: LIST
63495: LIST
63496: LIST
63497: PUSH
63498: EMPTY
63499: LIST
63500: LIST
63501: PPUSH
63502: CALL_OW 446
// end ;
63506: LD_VAR 0 2
63510: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
63511: LD_INT 0
63513: PPUSH
63514: PPUSH
// if not driver or not IsInUnit ( driver ) then
63515: LD_VAR 0 1
63519: NOT
63520: PUSH
63521: LD_VAR 0 1
63525: PPUSH
63526: CALL_OW 310
63530: NOT
63531: OR
63532: IFFALSE 63536
// exit ;
63534: GO 63626
// vehicle := IsInUnit ( driver ) ;
63536: LD_ADDR_VAR 0 3
63540: PUSH
63541: LD_VAR 0 1
63545: PPUSH
63546: CALL_OW 310
63550: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
63551: LD_VAR 0 1
63555: PPUSH
63556: LD_STRING \
63558: PUSH
63559: LD_INT 0
63561: PUSH
63562: LD_INT 0
63564: PUSH
63565: LD_INT 0
63567: PUSH
63568: LD_INT 0
63570: PUSH
63571: LD_INT 0
63573: PUSH
63574: LD_INT 0
63576: PUSH
63577: EMPTY
63578: LIST
63579: LIST
63580: LIST
63581: LIST
63582: LIST
63583: LIST
63584: LIST
63585: PUSH
63586: LD_STRING E
63588: PUSH
63589: LD_INT 0
63591: PUSH
63592: LD_INT 0
63594: PUSH
63595: LD_VAR 0 3
63599: PUSH
63600: LD_INT 0
63602: PUSH
63603: LD_INT 0
63605: PUSH
63606: LD_INT 0
63608: PUSH
63609: EMPTY
63610: LIST
63611: LIST
63612: LIST
63613: LIST
63614: LIST
63615: LIST
63616: LIST
63617: PUSH
63618: EMPTY
63619: LIST
63620: LIST
63621: PPUSH
63622: CALL_OW 447
// end ;
63626: LD_VAR 0 2
63630: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
63631: LD_INT 0
63633: PPUSH
63634: PPUSH
63635: PPUSH
// tmp := [ ] ;
63636: LD_ADDR_VAR 0 5
63640: PUSH
63641: EMPTY
63642: ST_TO_ADDR
// for i in units do
63643: LD_ADDR_VAR 0 4
63647: PUSH
63648: LD_VAR 0 1
63652: PUSH
63653: FOR_IN
63654: IFFALSE 63692
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
63656: LD_ADDR_VAR 0 5
63660: PUSH
63661: LD_VAR 0 5
63665: PPUSH
63666: LD_VAR 0 5
63670: PUSH
63671: LD_INT 1
63673: PLUS
63674: PPUSH
63675: LD_VAR 0 4
63679: PPUSH
63680: CALL_OW 256
63684: PPUSH
63685: CALL_OW 2
63689: ST_TO_ADDR
63690: GO 63653
63692: POP
63693: POP
// if not tmp then
63694: LD_VAR 0 5
63698: NOT
63699: IFFALSE 63703
// exit ;
63701: GO 63751
// if asc then
63703: LD_VAR 0 2
63707: IFFALSE 63731
// result := SortListByListAsc ( units , tmp ) else
63709: LD_ADDR_VAR 0 3
63713: PUSH
63714: LD_VAR 0 1
63718: PPUSH
63719: LD_VAR 0 5
63723: PPUSH
63724: CALL_OW 76
63728: ST_TO_ADDR
63729: GO 63751
// result := SortListByListDesc ( units , tmp ) ;
63731: LD_ADDR_VAR 0 3
63735: PUSH
63736: LD_VAR 0 1
63740: PPUSH
63741: LD_VAR 0 5
63745: PPUSH
63746: CALL_OW 77
63750: ST_TO_ADDR
// end ;
63751: LD_VAR 0 3
63755: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
63756: LD_INT 0
63758: PPUSH
63759: PPUSH
// task := GetTaskList ( mech ) ;
63760: LD_ADDR_VAR 0 4
63764: PUSH
63765: LD_VAR 0 1
63769: PPUSH
63770: CALL_OW 437
63774: ST_TO_ADDR
// if not task then
63775: LD_VAR 0 4
63779: NOT
63780: IFFALSE 63784
// exit ;
63782: GO 63826
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
63784: LD_ADDR_VAR 0 3
63788: PUSH
63789: LD_VAR 0 4
63793: PUSH
63794: LD_INT 1
63796: ARRAY
63797: PUSH
63798: LD_INT 1
63800: ARRAY
63801: PUSH
63802: LD_STRING r
63804: EQUAL
63805: PUSH
63806: LD_VAR 0 4
63810: PUSH
63811: LD_INT 1
63813: ARRAY
63814: PUSH
63815: LD_INT 4
63817: ARRAY
63818: PUSH
63819: LD_VAR 0 2
63823: EQUAL
63824: AND
63825: ST_TO_ADDR
// end ;
63826: LD_VAR 0 3
63830: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
63831: LD_INT 0
63833: PPUSH
// SetDir ( unit , d ) ;
63834: LD_VAR 0 1
63838: PPUSH
63839: LD_VAR 0 4
63843: PPUSH
63844: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
63848: LD_VAR 0 1
63852: PPUSH
63853: LD_VAR 0 2
63857: PPUSH
63858: LD_VAR 0 3
63862: PPUSH
63863: LD_VAR 0 5
63867: PPUSH
63868: CALL_OW 48
// end ;
63872: LD_VAR 0 6
63876: RET
// export function ToNaturalNumber ( number ) ; begin
63877: LD_INT 0
63879: PPUSH
// result := number div 1 ;
63880: LD_ADDR_VAR 0 2
63884: PUSH
63885: LD_VAR 0 1
63889: PUSH
63890: LD_INT 1
63892: DIV
63893: ST_TO_ADDR
// if number < 0 then
63894: LD_VAR 0 1
63898: PUSH
63899: LD_INT 0
63901: LESS
63902: IFFALSE 63912
// result := 0 ;
63904: LD_ADDR_VAR 0 2
63908: PUSH
63909: LD_INT 0
63911: ST_TO_ADDR
// end ;
63912: LD_VAR 0 2
63916: RET
// export function SortByClass ( units , class ) ; var un ; begin
63917: LD_INT 0
63919: PPUSH
63920: PPUSH
// if not units or not class then
63921: LD_VAR 0 1
63925: NOT
63926: PUSH
63927: LD_VAR 0 2
63931: NOT
63932: OR
63933: IFFALSE 63937
// exit ;
63935: GO 64032
// result := [ ] ;
63937: LD_ADDR_VAR 0 3
63941: PUSH
63942: EMPTY
63943: ST_TO_ADDR
// for un in units do
63944: LD_ADDR_VAR 0 4
63948: PUSH
63949: LD_VAR 0 1
63953: PUSH
63954: FOR_IN
63955: IFFALSE 64030
// if GetClass ( un ) = class then
63957: LD_VAR 0 4
63961: PPUSH
63962: CALL_OW 257
63966: PUSH
63967: LD_VAR 0 2
63971: EQUAL
63972: IFFALSE 63999
// result := Insert ( result , 1 , un ) else
63974: LD_ADDR_VAR 0 3
63978: PUSH
63979: LD_VAR 0 3
63983: PPUSH
63984: LD_INT 1
63986: PPUSH
63987: LD_VAR 0 4
63991: PPUSH
63992: CALL_OW 2
63996: ST_TO_ADDR
63997: GO 64028
// result := Replace ( result , result + 1 , un ) ;
63999: LD_ADDR_VAR 0 3
64003: PUSH
64004: LD_VAR 0 3
64008: PPUSH
64009: LD_VAR 0 3
64013: PUSH
64014: LD_INT 1
64016: PLUS
64017: PPUSH
64018: LD_VAR 0 4
64022: PPUSH
64023: CALL_OW 1
64027: ST_TO_ADDR
64028: GO 63954
64030: POP
64031: POP
// end ;
64032: LD_VAR 0 3
64036: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
64037: LD_INT 0
64039: PPUSH
64040: PPUSH
64041: PPUSH
64042: PPUSH
64043: PPUSH
64044: PPUSH
64045: PPUSH
// result := [ ] ;
64046: LD_ADDR_VAR 0 4
64050: PUSH
64051: EMPTY
64052: ST_TO_ADDR
// if x - r < 0 then
64053: LD_VAR 0 1
64057: PUSH
64058: LD_VAR 0 3
64062: MINUS
64063: PUSH
64064: LD_INT 0
64066: LESS
64067: IFFALSE 64079
// min_x := 0 else
64069: LD_ADDR_VAR 0 8
64073: PUSH
64074: LD_INT 0
64076: ST_TO_ADDR
64077: GO 64095
// min_x := x - r ;
64079: LD_ADDR_VAR 0 8
64083: PUSH
64084: LD_VAR 0 1
64088: PUSH
64089: LD_VAR 0 3
64093: MINUS
64094: ST_TO_ADDR
// if y - r < 0 then
64095: LD_VAR 0 2
64099: PUSH
64100: LD_VAR 0 3
64104: MINUS
64105: PUSH
64106: LD_INT 0
64108: LESS
64109: IFFALSE 64121
// min_y := 0 else
64111: LD_ADDR_VAR 0 7
64115: PUSH
64116: LD_INT 0
64118: ST_TO_ADDR
64119: GO 64137
// min_y := y - r ;
64121: LD_ADDR_VAR 0 7
64125: PUSH
64126: LD_VAR 0 2
64130: PUSH
64131: LD_VAR 0 3
64135: MINUS
64136: ST_TO_ADDR
// max_x := x + r ;
64137: LD_ADDR_VAR 0 9
64141: PUSH
64142: LD_VAR 0 1
64146: PUSH
64147: LD_VAR 0 3
64151: PLUS
64152: ST_TO_ADDR
// max_y := y + r ;
64153: LD_ADDR_VAR 0 10
64157: PUSH
64158: LD_VAR 0 2
64162: PUSH
64163: LD_VAR 0 3
64167: PLUS
64168: ST_TO_ADDR
// for _x = min_x to max_x do
64169: LD_ADDR_VAR 0 5
64173: PUSH
64174: DOUBLE
64175: LD_VAR 0 8
64179: DEC
64180: ST_TO_ADDR
64181: LD_VAR 0 9
64185: PUSH
64186: FOR_TO
64187: IFFALSE 64288
// for _y = min_y to max_y do
64189: LD_ADDR_VAR 0 6
64193: PUSH
64194: DOUBLE
64195: LD_VAR 0 7
64199: DEC
64200: ST_TO_ADDR
64201: LD_VAR 0 10
64205: PUSH
64206: FOR_TO
64207: IFFALSE 64284
// begin if not ValidHex ( _x , _y ) then
64209: LD_VAR 0 5
64213: PPUSH
64214: LD_VAR 0 6
64218: PPUSH
64219: CALL_OW 488
64223: NOT
64224: IFFALSE 64228
// continue ;
64226: GO 64206
// if GetResourceTypeXY ( _x , _y ) then
64228: LD_VAR 0 5
64232: PPUSH
64233: LD_VAR 0 6
64237: PPUSH
64238: CALL_OW 283
64242: IFFALSE 64282
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
64244: LD_ADDR_VAR 0 4
64248: PUSH
64249: LD_VAR 0 4
64253: PPUSH
64254: LD_VAR 0 4
64258: PUSH
64259: LD_INT 1
64261: PLUS
64262: PPUSH
64263: LD_VAR 0 5
64267: PUSH
64268: LD_VAR 0 6
64272: PUSH
64273: EMPTY
64274: LIST
64275: LIST
64276: PPUSH
64277: CALL_OW 1
64281: ST_TO_ADDR
// end ;
64282: GO 64206
64284: POP
64285: POP
64286: GO 64186
64288: POP
64289: POP
// end ;
64290: LD_VAR 0 4
64294: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
64295: LD_INT 0
64297: PPUSH
64298: PPUSH
64299: PPUSH
64300: PPUSH
64301: PPUSH
64302: PPUSH
64303: PPUSH
64304: PPUSH
// if not units then
64305: LD_VAR 0 1
64309: NOT
64310: IFFALSE 64314
// exit ;
64312: GO 64739
// result := UnitFilter ( units , [ f_ok ] ) ;
64314: LD_ADDR_VAR 0 3
64318: PUSH
64319: LD_VAR 0 1
64323: PPUSH
64324: LD_INT 50
64326: PUSH
64327: EMPTY
64328: LIST
64329: PPUSH
64330: CALL_OW 72
64334: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
64335: LD_ADDR_VAR 0 8
64339: PUSH
64340: LD_VAR 0 1
64344: PUSH
64345: LD_INT 1
64347: ARRAY
64348: PPUSH
64349: CALL_OW 255
64353: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
64354: LD_ADDR_VAR 0 10
64358: PUSH
64359: LD_INT 29
64361: PUSH
64362: LD_EXP 97
64366: PUSH
64367: EMPTY
64368: LIST
64369: LIST
64370: ST_TO_ADDR
// if not result then
64371: LD_VAR 0 3
64375: NOT
64376: IFFALSE 64380
// exit ;
64378: GO 64739
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
64380: LD_ADDR_VAR 0 5
64384: PUSH
64385: LD_INT 81
64387: PUSH
64388: LD_VAR 0 8
64392: PUSH
64393: EMPTY
64394: LIST
64395: LIST
64396: PPUSH
64397: CALL_OW 69
64401: ST_TO_ADDR
// for i in result do
64402: LD_ADDR_VAR 0 4
64406: PUSH
64407: LD_VAR 0 3
64411: PUSH
64412: FOR_IN
64413: IFFALSE 64737
// begin tag := GetTag ( i ) + 1 ;
64415: LD_ADDR_VAR 0 9
64419: PUSH
64420: LD_VAR 0 4
64424: PPUSH
64425: CALL_OW 110
64429: PUSH
64430: LD_INT 1
64432: PLUS
64433: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
64434: LD_ADDR_VAR 0 7
64438: PUSH
64439: LD_VAR 0 4
64443: PPUSH
64444: CALL_OW 250
64448: PPUSH
64449: LD_VAR 0 4
64453: PPUSH
64454: CALL_OW 251
64458: PPUSH
64459: LD_INT 6
64461: PPUSH
64462: CALL 64037 0 3
64466: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
64467: LD_VAR 0 7
64471: PUSH
64472: LD_VAR 0 4
64476: PPUSH
64477: CALL_OW 264
64481: PUSH
64482: LD_VAR 0 10
64486: IN
64487: NOT
64488: AND
64489: IFFALSE 64528
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
64491: LD_VAR 0 4
64495: PPUSH
64496: LD_VAR 0 7
64500: PUSH
64501: LD_INT 1
64503: ARRAY
64504: PUSH
64505: LD_INT 1
64507: ARRAY
64508: PPUSH
64509: LD_VAR 0 7
64513: PUSH
64514: LD_INT 1
64516: ARRAY
64517: PUSH
64518: LD_INT 2
64520: ARRAY
64521: PPUSH
64522: CALL_OW 116
64526: GO 64735
// if path > tag then
64528: LD_VAR 0 2
64532: PUSH
64533: LD_VAR 0 9
64537: GREATER
64538: IFFALSE 64705
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
64540: LD_ADDR_VAR 0 6
64544: PUSH
64545: LD_VAR 0 5
64549: PPUSH
64550: LD_INT 91
64552: PUSH
64553: LD_VAR 0 4
64557: PUSH
64558: LD_INT 12
64560: PUSH
64561: EMPTY
64562: LIST
64563: LIST
64564: LIST
64565: PPUSH
64566: CALL_OW 72
64570: ST_TO_ADDR
// if nearEnemy then
64571: LD_VAR 0 6
64575: IFFALSE 64603
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
64577: LD_VAR 0 4
64581: PPUSH
64582: LD_VAR 0 6
64586: PPUSH
64587: LD_VAR 0 4
64591: PPUSH
64592: CALL_OW 74
64596: PPUSH
64597: CALL_OW 115
64601: GO 64703
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
64603: LD_VAR 0 4
64607: PPUSH
64608: LD_VAR 0 2
64612: PUSH
64613: LD_VAR 0 9
64617: ARRAY
64618: PUSH
64619: LD_INT 1
64621: ARRAY
64622: PPUSH
64623: LD_VAR 0 2
64627: PUSH
64628: LD_VAR 0 9
64632: ARRAY
64633: PUSH
64634: LD_INT 2
64636: ARRAY
64637: PPUSH
64638: CALL_OW 297
64642: PUSH
64643: LD_INT 6
64645: GREATER
64646: IFFALSE 64689
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
64648: LD_VAR 0 4
64652: PPUSH
64653: LD_VAR 0 2
64657: PUSH
64658: LD_VAR 0 9
64662: ARRAY
64663: PUSH
64664: LD_INT 1
64666: ARRAY
64667: PPUSH
64668: LD_VAR 0 2
64672: PUSH
64673: LD_VAR 0 9
64677: ARRAY
64678: PUSH
64679: LD_INT 2
64681: ARRAY
64682: PPUSH
64683: CALL_OW 114
64687: GO 64703
// SetTag ( i , tag ) ;
64689: LD_VAR 0 4
64693: PPUSH
64694: LD_VAR 0 9
64698: PPUSH
64699: CALL_OW 109
// end else
64703: GO 64735
// if enemy then
64705: LD_VAR 0 5
64709: IFFALSE 64735
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
64711: LD_VAR 0 4
64715: PPUSH
64716: LD_VAR 0 5
64720: PPUSH
64721: LD_VAR 0 4
64725: PPUSH
64726: CALL_OW 74
64730: PPUSH
64731: CALL_OW 115
// end ;
64735: GO 64412
64737: POP
64738: POP
// end ;
64739: LD_VAR 0 3
64743: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
64744: LD_INT 0
64746: PPUSH
64747: PPUSH
64748: PPUSH
// if not unit or IsInUnit ( unit ) then
64749: LD_VAR 0 1
64753: NOT
64754: PUSH
64755: LD_VAR 0 1
64759: PPUSH
64760: CALL_OW 310
64764: OR
64765: IFFALSE 64769
// exit ;
64767: GO 64860
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
64769: LD_ADDR_VAR 0 4
64773: PUSH
64774: LD_VAR 0 1
64778: PPUSH
64779: CALL_OW 250
64783: PPUSH
64784: LD_VAR 0 2
64788: PPUSH
64789: LD_INT 1
64791: PPUSH
64792: CALL_OW 272
64796: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
64797: LD_ADDR_VAR 0 5
64801: PUSH
64802: LD_VAR 0 1
64806: PPUSH
64807: CALL_OW 251
64811: PPUSH
64812: LD_VAR 0 2
64816: PPUSH
64817: LD_INT 1
64819: PPUSH
64820: CALL_OW 273
64824: ST_TO_ADDR
// if ValidHex ( x , y ) then
64825: LD_VAR 0 4
64829: PPUSH
64830: LD_VAR 0 5
64834: PPUSH
64835: CALL_OW 488
64839: IFFALSE 64860
// ComTurnXY ( unit , x , y ) ;
64841: LD_VAR 0 1
64845: PPUSH
64846: LD_VAR 0 4
64850: PPUSH
64851: LD_VAR 0 5
64855: PPUSH
64856: CALL_OW 118
// end ;
64860: LD_VAR 0 3
64864: RET
// export function SeeUnits ( side , units ) ; var i ; begin
64865: LD_INT 0
64867: PPUSH
64868: PPUSH
// result := false ;
64869: LD_ADDR_VAR 0 3
64873: PUSH
64874: LD_INT 0
64876: ST_TO_ADDR
// if not units then
64877: LD_VAR 0 2
64881: NOT
64882: IFFALSE 64886
// exit ;
64884: GO 64931
// for i in units do
64886: LD_ADDR_VAR 0 4
64890: PUSH
64891: LD_VAR 0 2
64895: PUSH
64896: FOR_IN
64897: IFFALSE 64929
// if See ( side , i ) then
64899: LD_VAR 0 1
64903: PPUSH
64904: LD_VAR 0 4
64908: PPUSH
64909: CALL_OW 292
64913: IFFALSE 64927
// begin result := true ;
64915: LD_ADDR_VAR 0 3
64919: PUSH
64920: LD_INT 1
64922: ST_TO_ADDR
// exit ;
64923: POP
64924: POP
64925: GO 64931
// end ;
64927: GO 64896
64929: POP
64930: POP
// end ;
64931: LD_VAR 0 3
64935: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
64936: LD_INT 0
64938: PPUSH
64939: PPUSH
64940: PPUSH
64941: PPUSH
// if not unit or not points then
64942: LD_VAR 0 1
64946: NOT
64947: PUSH
64948: LD_VAR 0 2
64952: NOT
64953: OR
64954: IFFALSE 64958
// exit ;
64956: GO 65048
// dist := 99999 ;
64958: LD_ADDR_VAR 0 5
64962: PUSH
64963: LD_INT 99999
64965: ST_TO_ADDR
// for i in points do
64966: LD_ADDR_VAR 0 4
64970: PUSH
64971: LD_VAR 0 2
64975: PUSH
64976: FOR_IN
64977: IFFALSE 65046
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
64979: LD_ADDR_VAR 0 6
64983: PUSH
64984: LD_VAR 0 1
64988: PPUSH
64989: LD_VAR 0 4
64993: PUSH
64994: LD_INT 1
64996: ARRAY
64997: PPUSH
64998: LD_VAR 0 4
65002: PUSH
65003: LD_INT 2
65005: ARRAY
65006: PPUSH
65007: CALL_OW 297
65011: ST_TO_ADDR
// if tmpDist < dist then
65012: LD_VAR 0 6
65016: PUSH
65017: LD_VAR 0 5
65021: LESS
65022: IFFALSE 65044
// begin result := i ;
65024: LD_ADDR_VAR 0 3
65028: PUSH
65029: LD_VAR 0 4
65033: ST_TO_ADDR
// dist := tmpDist ;
65034: LD_ADDR_VAR 0 5
65038: PUSH
65039: LD_VAR 0 6
65043: ST_TO_ADDR
// end ; end ;
65044: GO 64976
65046: POP
65047: POP
// end ; end_of_file
65048: LD_VAR 0 3
65052: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
65053: LD_VAR 0 1
65057: PPUSH
65058: LD_VAR 0 2
65062: PPUSH
65063: LD_VAR 0 3
65067: PPUSH
65068: LD_VAR 0 4
65072: PPUSH
65073: LD_VAR 0 5
65077: PPUSH
65078: LD_VAR 0 6
65082: PPUSH
65083: CALL 5867 0 6
// end ;
65087: PPOPN 6
65089: END
