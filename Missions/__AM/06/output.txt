// export JMM , Gladstone , Denis , Lisa , Frank , Bobby , Cyrus , Brown , Donaldson ; export others , randomsDelta ; export apemans , yourApemans ; export yourVehicles ; export DeltaDoctor ; export Harisson ; export baseCorrect ; export cutscene ; export lab ; export resources ; export mission_prefix , mission_prefix_prev ; starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// FogOff ( true ) ;
  15: LD_INT 1
  17: PPUSH
  18: CALL_OW 344
// baseCorrect = 0 ;
  22: LD_ADDR_EXP 17
  26: PUSH
  27: LD_INT 0
  29: ST_TO_ADDR
// cutscene = 1 ;
  30: LD_ADDR_EXP 18
  34: PUSH
  35: LD_INT 1
  37: ST_TO_ADDR
// apemans = [ ] ;
  38: LD_ADDR_EXP 12
  42: PUSH
  43: EMPTY
  44: ST_TO_ADDR
// yourApemans = [ ] ;
  45: LD_ADDR_EXP 13
  49: PUSH
  50: EMPTY
  51: ST_TO_ADDR
// yourVehicles = [ ] ;
  52: LD_ADDR_EXP 14
  56: PUSH
  57: EMPTY
  58: ST_TO_ADDR
// randomsDelta := [ ] ;
  59: LD_ADDR_EXP 11
  63: PUSH
  64: EMPTY
  65: ST_TO_ADDR
// resources = [ ] ;
  66: LD_ADDR_EXP 20
  70: PUSH
  71: EMPTY
  72: ST_TO_ADDR
// mission_prefix := 06_ ;
  73: LD_ADDR_EXP 21
  77: PUSH
  78: LD_STRING 06_
  80: ST_TO_ADDR
// mission_prefix_prev := 05_ ;
  81: LD_ADDR_EXP 22
  85: PUSH
  86: LD_STRING 05_
  88: ST_TO_ADDR
// PrepareNature ;
  89: CALL 173 0 0
// PrepareDeltaBase ;
  93: CALL 2359 0 0
// LoadVehicles ;
  97: CALL 1407 0 0
// PrepareHeroes ;
 101: CALL 294 0 0
// PrepareRandoms ;
 105: CALL 1708 0 0
// lab = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
 109: LD_ADDR_EXP 19
 113: PUSH
 114: LD_INT 22
 116: PUSH
 117: LD_INT 1
 119: PUSH
 120: EMPTY
 121: LIST
 122: LIST
 123: PUSH
 124: LD_INT 2
 126: PUSH
 127: LD_INT 30
 129: PUSH
 130: LD_INT 6
 132: PUSH
 133: EMPTY
 134: LIST
 135: LIST
 136: PUSH
 137: LD_INT 30
 139: PUSH
 140: LD_INT 7
 142: PUSH
 143: EMPTY
 144: LIST
 145: LIST
 146: PUSH
 147: LD_INT 30
 149: PUSH
 150: LD_INT 8
 152: PUSH
 153: EMPTY
 154: LIST
 155: LIST
 156: PUSH
 157: EMPTY
 158: LIST
 159: LIST
 160: LIST
 161: LIST
 162: PUSH
 163: EMPTY
 164: LIST
 165: LIST
 166: PPUSH
 167: CALL_OW 69
 171: ST_TO_ADDR
// end ;
 172: END
// export function PrepareNature ; var i ; begin
 173: LD_INT 0
 175: PPUSH
 176: PPUSH
// uc_side := 0 ;
 177: LD_ADDR_OWVAR 20
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// uc_nation := 0 ;
 185: LD_ADDR_OWVAR 21
 189: PUSH
 190: LD_INT 0
 192: ST_TO_ADDR
// for i = 1 to 4 do
 193: LD_ADDR_VAR 0 2
 197: PUSH
 198: DOUBLE
 199: LD_INT 1
 201: DEC
 202: ST_TO_ADDR
 203: LD_INT 4
 205: PUSH
 206: FOR_TO
 207: IFFALSE 287
// begin hc_gallery :=  ;
 209: LD_ADDR_OWVAR 33
 213: PUSH
 214: LD_STRING 
 216: ST_TO_ADDR
// hc_name :=  ;
 217: LD_ADDR_OWVAR 26
 221: PUSH
 222: LD_STRING 
 224: ST_TO_ADDR
// hc_attr := [ rand ( 10 , 11 ) , rand ( 10 , 12 ) ] ;
 225: LD_ADDR_OWVAR 29
 229: PUSH
 230: LD_INT 10
 232: PPUSH
 233: LD_INT 11
 235: PPUSH
 236: CALL_OW 12
 240: PUSH
 241: LD_INT 10
 243: PPUSH
 244: LD_INT 12
 246: PPUSH
 247: CALL_OW 12
 251: PUSH
 252: EMPTY
 253: LIST
 254: LIST
 255: ST_TO_ADDR
// hc_class := class_apeman ;
 256: LD_ADDR_OWVAR 28
 260: PUSH
 261: LD_INT 12
 263: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , 22 , 18 , 20 , false ) ;
 264: CALL_OW 44
 268: PPUSH
 269: LD_INT 22
 271: PPUSH
 272: LD_INT 18
 274: PPUSH
 275: LD_INT 20
 277: PPUSH
 278: LD_INT 0
 280: PPUSH
 281: CALL_OW 50
// end ;
 285: GO 206
 287: POP
 288: POP
// end ; end_of_file
 289: LD_VAR 0 1
 293: RET
// export function PrepareHeroes ; var i , tmp , ape , test ; begin
 294: LD_INT 0
 296: PPUSH
 297: PPUSH
 298: PPUSH
 299: PPUSH
 300: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
 301: LD_ADDR_VAR 0 3
 305: PUSH
 306: LD_INT 22
 308: PUSH
 309: LD_INT 1
 311: PUSH
 312: EMPTY
 313: LIST
 314: LIST
 315: PUSH
 316: LD_INT 21
 318: PUSH
 319: LD_INT 3
 321: PUSH
 322: EMPTY
 323: LIST
 324: LIST
 325: PUSH
 326: LD_INT 30
 328: PUSH
 329: LD_INT 0
 331: PUSH
 332: EMPTY
 333: LIST
 334: LIST
 335: PUSH
 336: EMPTY
 337: LIST
 338: LIST
 339: LIST
 340: PPUSH
 341: CALL_OW 69
 345: ST_TO_ADDR
// SetBName ( tmp [ 1 ] , delta ) ;
 346: LD_VAR 0 3
 350: PUSH
 351: LD_INT 1
 353: ARRAY
 354: PPUSH
 355: LD_STRING delta
 357: PPUSH
 358: CALL_OW 500
// uc_side = 1 ;
 362: LD_ADDR_OWVAR 20
 366: PUSH
 367: LD_INT 1
 369: ST_TO_ADDR
// uc_nation = 1 ;
 370: LD_ADDR_OWVAR 21
 374: PUSH
 375: LD_INT 1
 377: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 378: LD_ADDR_EXP 1
 382: PUSH
 383: LD_STRING JMM
 385: PPUSH
 386: LD_INT 1
 388: PPUSH
 389: CALL 4473 0 2
 393: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 394: LD_ADDR_EXP 16
 398: PUSH
 399: LD_STRING Harisson
 401: PPUSH
 402: LD_INT 0
 404: PPUSH
 405: CALL 4473 0 2
 409: ST_TO_ADDR
// PlaceUnitXYR ( JMM , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 410: LD_EXP 1
 414: PPUSH
 415: LD_VAR 0 3
 419: PUSH
 420: LD_INT 1
 422: ARRAY
 423: PPUSH
 424: CALL_OW 250
 428: PPUSH
 429: LD_VAR 0 3
 433: PUSH
 434: LD_INT 1
 436: ARRAY
 437: PPUSH
 438: CALL_OW 251
 442: PPUSH
 443: LD_INT 5
 445: PPUSH
 446: LD_INT 0
 448: PPUSH
 449: CALL_OW 50
// SetClass ( JMM , 1 ) ;
 453: LD_EXP 1
 457: PPUSH
 458: LD_INT 1
 460: PPUSH
 461: CALL_OW 336
// Gladstone = PrepareUnit ( Gladstone , true ) ;
 465: LD_ADDR_EXP 2
 469: PUSH
 470: LD_STRING Gladstone
 472: PPUSH
 473: LD_INT 1
 475: PPUSH
 476: CALL 4473 0 2
 480: ST_TO_ADDR
// PlaceUnitXYR ( Gladstone , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 481: LD_EXP 2
 485: PPUSH
 486: LD_VAR 0 3
 490: PUSH
 491: LD_INT 1
 493: ARRAY
 494: PPUSH
 495: CALL_OW 250
 499: PPUSH
 500: LD_VAR 0 3
 504: PUSH
 505: LD_INT 1
 507: ARRAY
 508: PPUSH
 509: CALL_OW 251
 513: PPUSH
 514: LD_INT 5
 516: PPUSH
 517: LD_INT 0
 519: PPUSH
 520: CALL_OW 50
// SetClass ( Gladstone , 4 ) ;
 524: LD_EXP 2
 528: PPUSH
 529: LD_INT 4
 531: PPUSH
 532: CALL_OW 336
// Denis = PrepareUnit ( Denis , true ) ;
 536: LD_ADDR_EXP 3
 540: PUSH
 541: LD_STRING Denis
 543: PPUSH
 544: LD_INT 1
 546: PPUSH
 547: CALL 4473 0 2
 551: ST_TO_ADDR
// PlaceUnitXYR ( Denis , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 552: LD_EXP 3
 556: PPUSH
 557: LD_VAR 0 3
 561: PUSH
 562: LD_INT 1
 564: ARRAY
 565: PPUSH
 566: CALL_OW 250
 570: PPUSH
 571: LD_VAR 0 3
 575: PUSH
 576: LD_INT 1
 578: ARRAY
 579: PPUSH
 580: CALL_OW 251
 584: PPUSH
 585: LD_INT 5
 587: PPUSH
 588: LD_INT 0
 590: PPUSH
 591: CALL_OW 50
// SetClass ( Denis , 4 ) ;
 595: LD_EXP 3
 599: PPUSH
 600: LD_INT 4
 602: PPUSH
 603: CALL_OW 336
// if LoadVariable ( FrankInDelta , 0 ) = 1 then
 607: LD_STRING FrankInDelta
 609: PPUSH
 610: LD_INT 0
 612: PPUSH
 613: CALL_OW 30
 617: PUSH
 618: LD_INT 1
 620: EQUAL
 621: IFFALSE 694
// begin Frank = PrepareUnit ( Frank , true ) ;
 623: LD_ADDR_EXP 5
 627: PUSH
 628: LD_STRING Frank
 630: PPUSH
 631: LD_INT 1
 633: PPUSH
 634: CALL 4473 0 2
 638: ST_TO_ADDR
// PlaceUnitXYR ( Frank , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 639: LD_EXP 5
 643: PPUSH
 644: LD_VAR 0 3
 648: PUSH
 649: LD_INT 1
 651: ARRAY
 652: PPUSH
 653: CALL_OW 250
 657: PPUSH
 658: LD_VAR 0 3
 662: PUSH
 663: LD_INT 1
 665: ARRAY
 666: PPUSH
 667: CALL_OW 251
 671: PPUSH
 672: LD_INT 5
 674: PPUSH
 675: LD_INT 0
 677: PPUSH
 678: CALL_OW 50
// SetClass ( Frank , 1 ) ;
 682: LD_EXP 5
 686: PPUSH
 687: LD_INT 1
 689: PPUSH
 690: CALL_OW 336
// end ; if LoadVariable ( LisaInDelta , 0 ) = 1 then
 694: LD_STRING LisaInDelta
 696: PPUSH
 697: LD_INT 0
 699: PPUSH
 700: CALL_OW 30
 704: PUSH
 705: LD_INT 1
 707: EQUAL
 708: IFFALSE 781
// begin Lisa = PrepareUnit ( Lisa , true ) ;
 710: LD_ADDR_EXP 4
 714: PUSH
 715: LD_STRING Lisa
 717: PPUSH
 718: LD_INT 1
 720: PPUSH
 721: CALL 4473 0 2
 725: ST_TO_ADDR
// PlaceUnitXYR ( Lisa , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 726: LD_EXP 4
 730: PPUSH
 731: LD_VAR 0 3
 735: PUSH
 736: LD_INT 1
 738: ARRAY
 739: PPUSH
 740: CALL_OW 250
 744: PPUSH
 745: LD_VAR 0 3
 749: PUSH
 750: LD_INT 1
 752: ARRAY
 753: PPUSH
 754: CALL_OW 251
 758: PPUSH
 759: LD_INT 5
 761: PPUSH
 762: LD_INT 0
 764: PPUSH
 765: CALL_OW 50
// SetClass ( Lisa , 1 ) ;
 769: LD_EXP 4
 773: PPUSH
 774: LD_INT 1
 776: PPUSH
 777: CALL_OW 336
// end ; if LoadVariable ( BobbyInDelta , 0 ) = 1 then
 781: LD_STRING BobbyInDelta
 783: PPUSH
 784: LD_INT 0
 786: PPUSH
 787: CALL_OW 30
 791: PUSH
 792: LD_INT 1
 794: EQUAL
 795: IFFALSE 868
// begin Bobby = PrepareUnit ( Bobby , true ) ;
 797: LD_ADDR_EXP 6
 801: PUSH
 802: LD_STRING Bobby
 804: PPUSH
 805: LD_INT 1
 807: PPUSH
 808: CALL 4473 0 2
 812: ST_TO_ADDR
// PlaceUnitXYR ( Bobby , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 813: LD_EXP 6
 817: PPUSH
 818: LD_VAR 0 3
 822: PUSH
 823: LD_INT 1
 825: ARRAY
 826: PPUSH
 827: CALL_OW 250
 831: PPUSH
 832: LD_VAR 0 3
 836: PUSH
 837: LD_INT 1
 839: ARRAY
 840: PPUSH
 841: CALL_OW 251
 845: PPUSH
 846: LD_INT 5
 848: PPUSH
 849: LD_INT 0
 851: PPUSH
 852: CALL_OW 50
// SetClass ( Bobby , 1 ) ;
 856: LD_EXP 6
 860: PPUSH
 861: LD_INT 1
 863: PPUSH
 864: CALL_OW 336
// end ; if LoadVariable ( CyrusInDelta , 0 ) = 1 then
 868: LD_STRING CyrusInDelta
 870: PPUSH
 871: LD_INT 0
 873: PPUSH
 874: CALL_OW 30
 878: PUSH
 879: LD_INT 1
 881: EQUAL
 882: IFFALSE 955
// begin Cyrus = PrepareUnit ( Cyrus , true ) ;
 884: LD_ADDR_EXP 7
 888: PUSH
 889: LD_STRING Cyrus
 891: PPUSH
 892: LD_INT 1
 894: PPUSH
 895: CALL 4473 0 2
 899: ST_TO_ADDR
// PlaceUnitXYR ( Cyrus , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 900: LD_EXP 7
 904: PPUSH
 905: LD_VAR 0 3
 909: PUSH
 910: LD_INT 1
 912: ARRAY
 913: PPUSH
 914: CALL_OW 250
 918: PPUSH
 919: LD_VAR 0 3
 923: PUSH
 924: LD_INT 1
 926: ARRAY
 927: PPUSH
 928: CALL_OW 251
 932: PPUSH
 933: LD_INT 5
 935: PPUSH
 936: LD_INT 0
 938: PPUSH
 939: CALL_OW 50
// SetClass ( Cyrus , 1 ) ;
 943: LD_EXP 7
 947: PPUSH
 948: LD_INT 1
 950: PPUSH
 951: CALL_OW 336
// end ; if LoadVariable ( DonaldsonInDelta , 0 ) = 1 then
 955: LD_STRING DonaldsonInDelta
 957: PPUSH
 958: LD_INT 0
 960: PPUSH
 961: CALL_OW 30
 965: PUSH
 966: LD_INT 1
 968: EQUAL
 969: IFFALSE 1042
// begin Donaldson = PrepareUnit ( Donaldson , true ) ;
 971: LD_ADDR_EXP 9
 975: PUSH
 976: LD_STRING Donaldson
 978: PPUSH
 979: LD_INT 1
 981: PPUSH
 982: CALL 4473 0 2
 986: ST_TO_ADDR
// PlaceUnitXYR ( Donaldson , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 987: LD_EXP 9
 991: PPUSH
 992: LD_VAR 0 3
 996: PUSH
 997: LD_INT 1
 999: ARRAY
1000: PPUSH
1001: CALL_OW 250
1005: PPUSH
1006: LD_VAR 0 3
1010: PUSH
1011: LD_INT 1
1013: ARRAY
1014: PPUSH
1015: CALL_OW 251
1019: PPUSH
1020: LD_INT 5
1022: PPUSH
1023: LD_INT 0
1025: PPUSH
1026: CALL_OW 50
// SetClass ( Donaldson , 1 ) ;
1030: LD_EXP 9
1034: PPUSH
1035: LD_INT 1
1037: PPUSH
1038: CALL_OW 336
// end ; if LoadVariable ( BrownInDelta , 0 ) = 1 then
1042: LD_STRING BrownInDelta
1044: PPUSH
1045: LD_INT 0
1047: PPUSH
1048: CALL_OW 30
1052: PUSH
1053: LD_INT 1
1055: EQUAL
1056: IFFALSE 1129
// begin Brown = PrepareUnit ( Brown , true ) ;
1058: LD_ADDR_EXP 8
1062: PUSH
1063: LD_STRING Brown
1065: PPUSH
1066: LD_INT 1
1068: PPUSH
1069: CALL 4473 0 2
1073: ST_TO_ADDR
// PlaceUnitXYR ( Brown , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1074: LD_EXP 8
1078: PPUSH
1079: LD_VAR 0 3
1083: PUSH
1084: LD_INT 1
1086: ARRAY
1087: PPUSH
1088: CALL_OW 250
1092: PPUSH
1093: LD_VAR 0 3
1097: PUSH
1098: LD_INT 1
1100: ARRAY
1101: PPUSH
1102: CALL_OW 251
1106: PPUSH
1107: LD_INT 5
1109: PPUSH
1110: LD_INT 0
1112: PPUSH
1113: CALL_OW 50
// SetClass ( Brown , 2 ) ;
1117: LD_EXP 8
1121: PPUSH
1122: LD_INT 2
1124: PPUSH
1125: CALL_OW 336
// end ; others = CreateCharacterSet ( othersInDelta ) ;
1129: LD_ADDR_EXP 10
1133: PUSH
1134: LD_STRING othersInDelta
1136: PPUSH
1137: CALL_OW 31
1141: ST_TO_ADDR
// for i in others do
1142: LD_ADDR_VAR 0 2
1146: PUSH
1147: LD_EXP 10
1151: PUSH
1152: FOR_IN
1153: IFFALSE 1200
// PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1155: LD_VAR 0 2
1159: PPUSH
1160: LD_VAR 0 3
1164: PUSH
1165: LD_INT 1
1167: ARRAY
1168: PPUSH
1169: CALL_OW 250
1173: PPUSH
1174: LD_VAR 0 3
1178: PUSH
1179: LD_INT 1
1181: ARRAY
1182: PPUSH
1183: CALL_OW 251
1187: PPUSH
1188: LD_INT 35
1190: PPUSH
1191: LD_INT 0
1193: PPUSH
1194: CALL_OW 50
1198: GO 1152
1200: POP
1201: POP
// apemans = CreateCharacterSet ( apeInDelta ) ;
1202: LD_ADDR_EXP 12
1206: PUSH
1207: LD_STRING apeInDelta
1209: PPUSH
1210: CALL_OW 31
1214: ST_TO_ADDR
// uc_nation = 0 ;
1215: LD_ADDR_OWVAR 21
1219: PUSH
1220: LD_INT 0
1222: ST_TO_ADDR
// if apemans > 5 then
1223: LD_EXP 12
1227: PUSH
1228: LD_INT 5
1230: GREATER
1231: IFFALSE 1326
// begin for i := 1 to 5 do
1233: LD_ADDR_VAR 0 2
1237: PUSH
1238: DOUBLE
1239: LD_INT 1
1241: DEC
1242: ST_TO_ADDR
1243: LD_INT 5
1245: PUSH
1246: FOR_TO
1247: IFFALSE 1322
// begin PlaceUnitXYR ( apemans [ i ] , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1249: LD_EXP 12
1253: PUSH
1254: LD_VAR 0 2
1258: ARRAY
1259: PPUSH
1260: LD_VAR 0 3
1264: PUSH
1265: LD_INT 1
1267: ARRAY
1268: PPUSH
1269: CALL_OW 250
1273: PPUSH
1274: LD_VAR 0 3
1278: PUSH
1279: LD_INT 1
1281: ARRAY
1282: PPUSH
1283: CALL_OW 251
1287: PPUSH
1288: LD_INT 50
1290: PPUSH
1291: LD_INT 0
1293: PPUSH
1294: CALL_OW 50
// yourApemans = yourApemans ^ apemans [ i ] ;
1298: LD_ADDR_EXP 13
1302: PUSH
1303: LD_EXP 13
1307: PUSH
1308: LD_EXP 12
1312: PUSH
1313: LD_VAR 0 2
1317: ARRAY
1318: ADD
1319: ST_TO_ADDR
// end ;
1320: GO 1246
1322: POP
1323: POP
// end else
1324: GO 1402
// begin for i in apemans do
1326: LD_ADDR_VAR 0 2
1330: PUSH
1331: LD_EXP 12
1335: PUSH
1336: FOR_IN
1337: IFFALSE 1400
// begin PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1339: LD_VAR 0 2
1343: PPUSH
1344: LD_VAR 0 3
1348: PUSH
1349: LD_INT 1
1351: ARRAY
1352: PPUSH
1353: CALL_OW 250
1357: PPUSH
1358: LD_VAR 0 3
1362: PUSH
1363: LD_INT 1
1365: ARRAY
1366: PPUSH
1367: CALL_OW 251
1371: PPUSH
1372: LD_INT 50
1374: PPUSH
1375: LD_INT 0
1377: PPUSH
1378: CALL_OW 50
// yourApemans = yourApemans ^ i ;
1382: LD_ADDR_EXP 13
1386: PUSH
1387: LD_EXP 13
1391: PUSH
1392: LD_VAR 0 2
1396: ADD
1397: ST_TO_ADDR
// end ;
1398: GO 1336
1400: POP
1401: POP
// end ; end ;
1402: LD_VAR 0 1
1406: RET
// export function LoadVehicles ; var i , veh , tmp , vehicles ; begin
1407: LD_INT 0
1409: PPUSH
1410: PPUSH
1411: PPUSH
1412: PPUSH
1413: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1414: LD_ADDR_VAR 0 4
1418: PUSH
1419: LD_INT 22
1421: PUSH
1422: LD_INT 1
1424: PUSH
1425: EMPTY
1426: LIST
1427: LIST
1428: PUSH
1429: LD_INT 21
1431: PUSH
1432: LD_INT 3
1434: PUSH
1435: EMPTY
1436: LIST
1437: LIST
1438: PUSH
1439: LD_INT 30
1441: PUSH
1442: LD_INT 0
1444: PUSH
1445: EMPTY
1446: LIST
1447: LIST
1448: PUSH
1449: EMPTY
1450: LIST
1451: LIST
1452: LIST
1453: PPUSH
1454: CALL_OW 69
1458: ST_TO_ADDR
// uc_side = 1 ;
1459: LD_ADDR_OWVAR 20
1463: PUSH
1464: LD_INT 1
1466: ST_TO_ADDR
// vehicles = LoadVariable ( vehiclesInDelta , [ ] ) ;
1467: LD_ADDR_VAR 0 5
1471: PUSH
1472: LD_STRING vehiclesInDelta
1474: PPUSH
1475: EMPTY
1476: PPUSH
1477: CALL_OW 30
1481: ST_TO_ADDR
// for i = 1 to vehicles do
1482: LD_ADDR_VAR 0 2
1486: PUSH
1487: DOUBLE
1488: LD_INT 1
1490: DEC
1491: ST_TO_ADDR
1492: LD_VAR 0 5
1496: PUSH
1497: FOR_TO
1498: IFFALSE 1701
// begin if vehicles [ i + 4 ] = 11 or vehicles [ i ] = 3 then
1500: LD_VAR 0 5
1504: PUSH
1505: LD_VAR 0 2
1509: PUSH
1510: LD_INT 4
1512: PLUS
1513: ARRAY
1514: PUSH
1515: LD_INT 11
1517: EQUAL
1518: PUSH
1519: LD_VAR 0 5
1523: PUSH
1524: LD_VAR 0 2
1528: ARRAY
1529: PUSH
1530: LD_INT 3
1532: EQUAL
1533: OR
1534: IFFALSE 1685
// begin uc_nation = vehicles [ i ] ;
1536: LD_ADDR_OWVAR 21
1540: PUSH
1541: LD_VAR 0 5
1545: PUSH
1546: LD_VAR 0 2
1550: ARRAY
1551: ST_TO_ADDR
// vc_chassis = vehicles [ i + 1 ] ;
1552: LD_ADDR_OWVAR 37
1556: PUSH
1557: LD_VAR 0 5
1561: PUSH
1562: LD_VAR 0 2
1566: PUSH
1567: LD_INT 1
1569: PLUS
1570: ARRAY
1571: ST_TO_ADDR
// vc_engine = vehicles [ i + 2 ] ;
1572: LD_ADDR_OWVAR 39
1576: PUSH
1577: LD_VAR 0 5
1581: PUSH
1582: LD_VAR 0 2
1586: PUSH
1587: LD_INT 2
1589: PLUS
1590: ARRAY
1591: ST_TO_ADDR
// vc_control = vehicles [ i + 3 ] ;
1592: LD_ADDR_OWVAR 38
1596: PUSH
1597: LD_VAR 0 5
1601: PUSH
1602: LD_VAR 0 2
1606: PUSH
1607: LD_INT 3
1609: PLUS
1610: ARRAY
1611: ST_TO_ADDR
// vc_weapon = vehicles [ i + 4 ] ;
1612: LD_ADDR_OWVAR 40
1616: PUSH
1617: LD_VAR 0 5
1621: PUSH
1622: LD_VAR 0 2
1626: PUSH
1627: LD_INT 4
1629: PLUS
1630: ARRAY
1631: ST_TO_ADDR
// veh = CreateVehicle ;
1632: LD_ADDR_VAR 0 3
1636: PUSH
1637: CALL_OW 45
1641: ST_TO_ADDR
// PlaceUnitXYR ( veh , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 40 , false ) ;
1642: LD_VAR 0 3
1646: PPUSH
1647: LD_VAR 0 4
1651: PUSH
1652: LD_INT 1
1654: ARRAY
1655: PPUSH
1656: CALL_OW 250
1660: PPUSH
1661: LD_VAR 0 4
1665: PUSH
1666: LD_INT 1
1668: ARRAY
1669: PPUSH
1670: CALL_OW 251
1674: PPUSH
1675: LD_INT 40
1677: PPUSH
1678: LD_INT 0
1680: PPUSH
1681: CALL_OW 50
// end ; i = i + 4 ;
1685: LD_ADDR_VAR 0 2
1689: PUSH
1690: LD_VAR 0 2
1694: PUSH
1695: LD_INT 4
1697: PLUS
1698: ST_TO_ADDR
// end ;
1699: GO 1497
1701: POP
1702: POP
// end ;
1703: LD_VAR 0 1
1707: RET
// export function PrepareRandoms ; var i , un , tmp , filter ; begin
1708: LD_INT 0
1710: PPUSH
1711: PPUSH
1712: PPUSH
1713: PPUSH
1714: PPUSH
// uc_side = 1 ;
1715: LD_ADDR_OWVAR 20
1719: PUSH
1720: LD_INT 1
1722: ST_TO_ADDR
// uc_nation = 1 ;
1723: LD_ADDR_OWVAR 21
1727: PUSH
1728: LD_INT 1
1730: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1731: LD_ADDR_VAR 0 4
1735: PUSH
1736: LD_INT 22
1738: PUSH
1739: LD_INT 1
1741: PUSH
1742: EMPTY
1743: LIST
1744: LIST
1745: PUSH
1746: LD_INT 21
1748: PUSH
1749: LD_INT 3
1751: PUSH
1752: EMPTY
1753: LIST
1754: LIST
1755: PUSH
1756: LD_INT 30
1758: PUSH
1759: LD_INT 0
1761: PUSH
1762: EMPTY
1763: LIST
1764: LIST
1765: PUSH
1766: EMPTY
1767: LIST
1768: LIST
1769: LIST
1770: PPUSH
1771: CALL_OW 69
1775: ST_TO_ADDR
// if FilterAllunits ( [ [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] then
1776: LD_INT 22
1778: PUSH
1779: LD_INT 1
1781: PUSH
1782: EMPTY
1783: LIST
1784: LIST
1785: PUSH
1786: LD_INT 25
1788: PUSH
1789: LD_INT 4
1791: PUSH
1792: EMPTY
1793: LIST
1794: LIST
1795: PUSH
1796: LD_INT 26
1798: PUSH
1799: LD_INT 1
1801: PUSH
1802: EMPTY
1803: LIST
1804: LIST
1805: PUSH
1806: EMPTY
1807: LIST
1808: LIST
1809: LIST
1810: PUSH
1811: EMPTY
1812: LIST
1813: PPUSH
1814: CALL_OW 69
1818: PUSH
1819: LD_EXP 1
1823: PUSH
1824: LD_EXP 7
1828: PUSH
1829: LD_EXP 6
1833: PUSH
1834: LD_EXP 5
1838: PUSH
1839: LD_EXP 2
1843: PUSH
1844: LD_EXP 3
1848: PUSH
1849: LD_EXP 8
1853: PUSH
1854: EMPTY
1855: LIST
1856: LIST
1857: LIST
1858: LIST
1859: LIST
1860: LIST
1861: LIST
1862: DIFF
1863: IFFALSE 1964
// deltaDoctor := ( FilterAllunits ( [ [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] ) [ 1 ] else
1865: LD_ADDR_EXP 15
1869: PUSH
1870: LD_INT 22
1872: PUSH
1873: LD_INT 1
1875: PUSH
1876: EMPTY
1877: LIST
1878: LIST
1879: PUSH
1880: LD_INT 25
1882: PUSH
1883: LD_INT 4
1885: PUSH
1886: EMPTY
1887: LIST
1888: LIST
1889: PUSH
1890: LD_INT 26
1892: PUSH
1893: LD_INT 1
1895: PUSH
1896: EMPTY
1897: LIST
1898: LIST
1899: PUSH
1900: EMPTY
1901: LIST
1902: LIST
1903: LIST
1904: PUSH
1905: EMPTY
1906: LIST
1907: PPUSH
1908: CALL_OW 69
1912: PUSH
1913: LD_EXP 1
1917: PUSH
1918: LD_EXP 7
1922: PUSH
1923: LD_EXP 6
1927: PUSH
1928: LD_EXP 5
1932: PUSH
1933: LD_EXP 2
1937: PUSH
1938: LD_EXP 3
1942: PUSH
1943: LD_EXP 8
1947: PUSH
1948: EMPTY
1949: LIST
1950: LIST
1951: LIST
1952: LIST
1953: LIST
1954: LIST
1955: LIST
1956: DIFF
1957: PUSH
1958: LD_INT 1
1960: ARRAY
1961: ST_TO_ADDR
1962: GO 2111
// begin filter := FilterAllunits ( [ [ [ f_side , 1 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] ;
1964: LD_ADDR_VAR 0 5
1968: PUSH
1969: LD_INT 22
1971: PUSH
1972: LD_INT 1
1974: PUSH
1975: EMPTY
1976: LIST
1977: LIST
1978: PUSH
1979: LD_INT 26
1981: PUSH
1982: LD_INT 1
1984: PUSH
1985: EMPTY
1986: LIST
1987: LIST
1988: PUSH
1989: EMPTY
1990: LIST
1991: LIST
1992: PUSH
1993: EMPTY
1994: LIST
1995: PPUSH
1996: CALL_OW 69
2000: PUSH
2001: LD_EXP 1
2005: PUSH
2006: LD_EXP 7
2010: PUSH
2011: LD_EXP 6
2015: PUSH
2016: LD_EXP 5
2020: PUSH
2021: LD_EXP 2
2025: PUSH
2026: LD_EXP 3
2030: PUSH
2031: LD_EXP 8
2035: PUSH
2036: EMPTY
2037: LIST
2038: LIST
2039: LIST
2040: LIST
2041: LIST
2042: LIST
2043: LIST
2044: DIFF
2045: ST_TO_ADDR
// if filter then
2046: LD_VAR 0 5
2050: IFFALSE 2111
// for i in filter do
2052: LD_ADDR_VAR 0 2
2056: PUSH
2057: LD_VAR 0 5
2061: PUSH
2062: FOR_IN
2063: IFFALSE 2109
// if GetSkill ( i , 4 ) >= 4 then
2065: LD_VAR 0 2
2069: PPUSH
2070: LD_INT 4
2072: PPUSH
2073: CALL_OW 259
2077: PUSH
2078: LD_INT 4
2080: GREATEREQUAL
2081: IFFALSE 2107
// begin deltaDoctor := i ;
2083: LD_ADDR_EXP 15
2087: PUSH
2088: LD_VAR 0 2
2092: ST_TO_ADDR
// SetClass ( deltaDoctor , 4 ) ;
2093: LD_EXP 15
2097: PPUSH
2098: LD_INT 4
2100: PPUSH
2101: CALL_OW 336
// break ;
2105: GO 2109
// end ;
2107: GO 2062
2109: POP
2110: POP
// end ; for i = 1 to 7 do
2111: LD_ADDR_VAR 0 2
2115: PUSH
2116: DOUBLE
2117: LD_INT 1
2119: DEC
2120: ST_TO_ADDR
2121: LD_INT 7
2123: PUSH
2124: FOR_TO
2125: IFFALSE 2262
// begin hc_gallery =  ;
2127: LD_ADDR_OWVAR 33
2131: PUSH
2132: LD_STRING 
2134: ST_TO_ADDR
// hc_name =  ;
2135: LD_ADDR_OWVAR 26
2139: PUSH
2140: LD_STRING 
2142: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 3 , 5 ) ) ;
2143: LD_INT 0
2145: PPUSH
2146: LD_INT 1
2148: PUSH
2149: LD_INT 2
2151: PUSH
2152: LD_INT 3
2154: PUSH
2155: LD_INT 4
2157: PUSH
2158: EMPTY
2159: LIST
2160: LIST
2161: LIST
2162: LIST
2163: PUSH
2164: LD_INT 1
2166: PPUSH
2167: LD_INT 4
2169: PPUSH
2170: CALL_OW 12
2174: ARRAY
2175: PPUSH
2176: LD_INT 3
2178: PPUSH
2179: LD_INT 5
2181: PPUSH
2182: CALL_OW 12
2186: PPUSH
2187: CALL_OW 380
// un = CreateHuman ;
2191: LD_ADDR_VAR 0 3
2195: PUSH
2196: CALL_OW 44
2200: ST_TO_ADDR
// randomsDelta := randomsDelta ^ un ;
2201: LD_ADDR_EXP 11
2205: PUSH
2206: LD_EXP 11
2210: PUSH
2211: LD_VAR 0 3
2215: ADD
2216: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
2217: LD_VAR 0 3
2221: PPUSH
2222: LD_VAR 0 4
2226: PUSH
2227: LD_INT 1
2229: ARRAY
2230: PPUSH
2231: CALL_OW 250
2235: PPUSH
2236: LD_VAR 0 4
2240: PUSH
2241: LD_INT 1
2243: ARRAY
2244: PPUSH
2245: CALL_OW 251
2249: PPUSH
2250: LD_INT 15
2252: PPUSH
2253: LD_INT 0
2255: PPUSH
2256: CALL_OW 50
// end ;
2260: GO 2124
2262: POP
2263: POP
// if deltaDoctor then
2264: LD_EXP 15
2268: IFFALSE 2272
// exit ;
2270: GO 2354
// hc_gallery =  ;
2272: LD_ADDR_OWVAR 33
2276: PUSH
2277: LD_STRING 
2279: ST_TO_ADDR
// hc_name = Dr. Adam Charles Dawkins ;
2280: LD_ADDR_OWVAR 26
2284: PUSH
2285: LD_STRING Dr. Adam Charles Dawkins
2287: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 6 ) ;
2288: LD_INT 1
2290: PPUSH
2291: LD_INT 4
2293: PPUSH
2294: LD_INT 6
2296: PPUSH
2297: CALL_OW 380
// deltaDoctor = CreateHuman ;
2301: LD_ADDR_EXP 15
2305: PUSH
2306: CALL_OW 44
2310: ST_TO_ADDR
// PlaceUnitXYR ( deltaDoctor , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
2311: LD_EXP 15
2315: PPUSH
2316: LD_VAR 0 4
2320: PUSH
2321: LD_INT 1
2323: ARRAY
2324: PPUSH
2325: CALL_OW 250
2329: PPUSH
2330: LD_VAR 0 4
2334: PUSH
2335: LD_INT 1
2337: ARRAY
2338: PPUSH
2339: CALL_OW 251
2343: PPUSH
2344: LD_INT 5
2346: PPUSH
2347: LD_INT 0
2349: PPUSH
2350: CALL_OW 50
// end ; end_of_file
2354: LD_VAR 0 1
2358: RET
// export function PrepareDeltaBase ; var i , j , building , buildings , lab , tmp ; begin
2359: LD_INT 0
2361: PPUSH
2362: PPUSH
2363: PPUSH
2364: PPUSH
2365: PPUSH
2366: PPUSH
2367: PPUSH
// buildings = LoadVariable ( buildingsInDelta , [ ] ) ;
2368: LD_ADDR_VAR 0 5
2372: PUSH
2373: LD_STRING buildingsInDelta
2375: PPUSH
2376: EMPTY
2377: PPUSH
2378: CALL_OW 30
2382: ST_TO_ADDR
// SetResourceVisibility ( 68 , 40 , 1 ) ;
2383: LD_INT 68
2385: PPUSH
2386: LD_INT 40
2388: PPUSH
2389: LD_INT 1
2391: PPUSH
2392: CALL_OW 441
// uc_side = 1 ;
2396: LD_ADDR_OWVAR 20
2400: PUSH
2401: LD_INT 1
2403: ST_TO_ADDR
// uc_nation = 1 ;
2404: LD_ADDR_OWVAR 21
2408: PUSH
2409: LD_INT 1
2411: ST_TO_ADDR
// for i = 1 to buildings do
2412: LD_ADDR_VAR 0 2
2416: PUSH
2417: DOUBLE
2418: LD_INT 1
2420: DEC
2421: ST_TO_ADDR
2422: LD_VAR 0 5
2426: PUSH
2427: FOR_TO
2428: IFFALSE 2726
// begin bc_type = buildings [ i ] [ 1 ] ;
2430: LD_ADDR_OWVAR 42
2434: PUSH
2435: LD_VAR 0 5
2439: PUSH
2440: LD_VAR 0 2
2444: ARRAY
2445: PUSH
2446: LD_INT 1
2448: ARRAY
2449: ST_TO_ADDR
// bc_level = buildings [ i ] [ 2 ] ;
2450: LD_ADDR_OWVAR 43
2454: PUSH
2455: LD_VAR 0 5
2459: PUSH
2460: LD_VAR 0 2
2464: ARRAY
2465: PUSH
2466: LD_INT 2
2468: ARRAY
2469: ST_TO_ADDR
// if bc_type = b_lab then
2470: LD_OWVAR 42
2474: PUSH
2475: LD_INT 6
2477: EQUAL
2478: IFFALSE 2496
// begin bc_kind1 = b_lab_basic ;
2480: LD_ADDR_OWVAR 44
2484: PUSH
2485: LD_INT 9
2487: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
2488: LD_ADDR_OWVAR 45
2492: PUSH
2493: LD_INT 9
2495: ST_TO_ADDR
// end ; if bc_type = b_lab_half or bc_type = b_lab_full then
2496: LD_OWVAR 42
2500: PUSH
2501: LD_INT 7
2503: EQUAL
2504: PUSH
2505: LD_OWVAR 42
2509: PUSH
2510: LD_INT 8
2512: EQUAL
2513: OR
2514: IFFALSE 2630
// begin if buildings [ i ] [ 6 ] then
2516: LD_VAR 0 5
2520: PUSH
2521: LD_VAR 0 2
2525: ARRAY
2526: PUSH
2527: LD_INT 6
2529: ARRAY
2530: IFFALSE 2552
// bc_kind1 = buildings [ i ] [ 6 ] ;
2532: LD_ADDR_OWVAR 44
2536: PUSH
2537: LD_VAR 0 5
2541: PUSH
2542: LD_VAR 0 2
2546: ARRAY
2547: PUSH
2548: LD_INT 6
2550: ARRAY
2551: ST_TO_ADDR
// if buildings [ i ] [ 7 ] then
2552: LD_VAR 0 5
2556: PUSH
2557: LD_VAR 0 2
2561: ARRAY
2562: PUSH
2563: LD_INT 7
2565: ARRAY
2566: IFFALSE 2588
// bc_kind2 = buildings [ i ] [ 7 ] ;
2568: LD_ADDR_OWVAR 45
2572: PUSH
2573: LD_VAR 0 5
2577: PUSH
2578: LD_VAR 0 2
2582: ARRAY
2583: PUSH
2584: LD_INT 7
2586: ARRAY
2587: ST_TO_ADDR
// if not buildings [ i ] [ 6 ] and not buildings [ i ] [ 7 ] then
2588: LD_VAR 0 5
2592: PUSH
2593: LD_VAR 0 2
2597: ARRAY
2598: PUSH
2599: LD_INT 6
2601: ARRAY
2602: NOT
2603: PUSH
2604: LD_VAR 0 5
2608: PUSH
2609: LD_VAR 0 2
2613: ARRAY
2614: PUSH
2615: LD_INT 7
2617: ARRAY
2618: NOT
2619: AND
2620: IFFALSE 2630
// bc_type := b_lab ;
2622: LD_ADDR_OWVAR 42
2626: PUSH
2627: LD_INT 6
2629: ST_TO_ADDR
// end ; building = CreateAndPlaceBuildingXYD ( buildings [ i ] [ 3 ] , buildings [ i ] [ 4 ] , buildings [ i ] [ 5 ] ) ;
2630: LD_ADDR_VAR 0 4
2634: PUSH
2635: LD_VAR 0 5
2639: PUSH
2640: LD_VAR 0 2
2644: ARRAY
2645: PUSH
2646: LD_INT 3
2648: ARRAY
2649: PPUSH
2650: LD_VAR 0 5
2654: PUSH
2655: LD_VAR 0 2
2659: ARRAY
2660: PUSH
2661: LD_INT 4
2663: ARRAY
2664: PPUSH
2665: LD_VAR 0 5
2669: PUSH
2670: LD_VAR 0 2
2674: ARRAY
2675: PUSH
2676: LD_INT 5
2678: ARRAY
2679: PPUSH
2680: CALL_OW 47
2684: ST_TO_ADDR
// if GetBType ( building ) = b_bunker then
2685: LD_VAR 0 4
2689: PPUSH
2690: CALL_OW 266
2694: PUSH
2695: LD_INT 32
2697: EQUAL
2698: IFFALSE 2724
// PlaceWeaponTurret ( building , buildings [ i ] [ 8 ] ) ;
2700: LD_VAR 0 4
2704: PPUSH
2705: LD_VAR 0 5
2709: PUSH
2710: LD_VAR 0 2
2714: ARRAY
2715: PUSH
2716: LD_INT 8
2718: ARRAY
2719: PPUSH
2720: CALL_OW 431
// end ;
2724: GO 2427
2726: POP
2727: POP
// lab = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
2728: LD_ADDR_VAR 0 6
2732: PUSH
2733: LD_INT 22
2735: PUSH
2736: LD_INT 1
2738: PUSH
2739: EMPTY
2740: LIST
2741: LIST
2742: PUSH
2743: LD_INT 2
2745: PUSH
2746: LD_INT 30
2748: PUSH
2749: LD_INT 6
2751: PUSH
2752: EMPTY
2753: LIST
2754: LIST
2755: PUSH
2756: LD_INT 30
2758: PUSH
2759: LD_INT 7
2761: PUSH
2762: EMPTY
2763: LIST
2764: LIST
2765: PUSH
2766: LD_INT 30
2768: PUSH
2769: LD_INT 8
2771: PUSH
2772: EMPTY
2773: LIST
2774: LIST
2775: PUSH
2776: EMPTY
2777: LIST
2778: LIST
2779: LIST
2780: LIST
2781: PUSH
2782: EMPTY
2783: LIST
2784: LIST
2785: PPUSH
2786: CALL_OW 69
2790: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) ;
2791: LD_ADDR_VAR 0 7
2795: PUSH
2796: LD_INT 22
2798: PUSH
2799: LD_INT 1
2801: PUSH
2802: EMPTY
2803: LIST
2804: LIST
2805: PUSH
2806: LD_INT 30
2808: PUSH
2809: LD_INT 0
2811: PUSH
2812: EMPTY
2813: LIST
2814: LIST
2815: PUSH
2816: EMPTY
2817: LIST
2818: LIST
2819: PPUSH
2820: CALL_OW 69
2824: ST_TO_ADDR
// if lab > 0 and tmp > 0 then
2825: LD_VAR 0 6
2829: PUSH
2830: LD_INT 0
2832: GREATER
2833: PUSH
2834: LD_VAR 0 7
2838: PUSH
2839: LD_INT 0
2841: GREATER
2842: AND
2843: IFFALSE 2853
// baseCorrect = 1 ;
2845: LD_ADDR_EXP 17
2849: PUSH
2850: LD_INT 1
2852: ST_TO_ADDR
// if baseCorrect = 0 then
2853: LD_EXP 17
2857: PUSH
2858: LD_INT 0
2860: EQUAL
2861: IFFALSE 3234
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
2863: LD_ADDR_VAR 0 2
2867: PUSH
2868: LD_INT 22
2870: PUSH
2871: LD_INT 1
2873: PUSH
2874: EMPTY
2875: LIST
2876: LIST
2877: PUSH
2878: LD_INT 21
2880: PUSH
2881: LD_INT 3
2883: PUSH
2884: EMPTY
2885: LIST
2886: LIST
2887: PUSH
2888: EMPTY
2889: LIST
2890: LIST
2891: PPUSH
2892: CALL_OW 69
2896: PUSH
2897: FOR_IN
2898: IFFALSE 2911
// RemoveUnit ( i ) ;
2900: LD_VAR 0 2
2904: PPUSH
2905: CALL_OW 64
2909: GO 2897
2911: POP
2912: POP
// uc_nation = 1 ;
2913: LD_ADDR_OWVAR 21
2917: PUSH
2918: LD_INT 1
2920: ST_TO_ADDR
// uc_side = 1 ;
2921: LD_ADDR_OWVAR 20
2925: PUSH
2926: LD_INT 1
2928: ST_TO_ADDR
// bc_level = 5 ;
2929: LD_ADDR_OWVAR 43
2933: PUSH
2934: LD_INT 5
2936: ST_TO_ADDR
// bc_type = b_depot ;
2937: LD_ADDR_OWVAR 42
2941: PUSH
2942: LD_INT 0
2944: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 50 , 22 , 0 ) ;
2945: LD_INT 50
2947: PPUSH
2948: LD_INT 22
2950: PPUSH
2951: LD_INT 0
2953: PPUSH
2954: CALL_OW 47
// bc_type = b_bunker ;
2958: LD_ADDR_OWVAR 42
2962: PUSH
2963: LD_INT 32
2965: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( 68 , 24 , 4 ) ;
2966: LD_ADDR_VAR 0 4
2970: PUSH
2971: LD_INT 68
2973: PPUSH
2974: LD_INT 24
2976: PPUSH
2977: LD_INT 4
2979: PPUSH
2980: CALL_OW 47
2984: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ Rand ( 1 , 2 ) ] ) ;
2985: LD_VAR 0 4
2989: PPUSH
2990: LD_INT 4
2992: PUSH
2993: LD_INT 11
2995: PUSH
2996: EMPTY
2997: LIST
2998: LIST
2999: PUSH
3000: LD_INT 1
3002: PPUSH
3003: LD_INT 2
3005: PPUSH
3006: CALL_OW 12
3010: ARRAY
3011: PPUSH
3012: CALL_OW 431
// building = CreateAndPlaceBuildingXYD ( 71 , 34 , 4 ) ;
3016: LD_ADDR_VAR 0 4
3020: PUSH
3021: LD_INT 71
3023: PPUSH
3024: LD_INT 34
3026: PPUSH
3027: LD_INT 4
3029: PPUSH
3030: CALL_OW 47
3034: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ Rand ( 1 , 2 ) ] ) ;
3035: LD_VAR 0 4
3039: PPUSH
3040: LD_INT 4
3042: PUSH
3043: LD_INT 11
3045: PUSH
3046: EMPTY
3047: LIST
3048: LIST
3049: PUSH
3050: LD_INT 1
3052: PPUSH
3053: LD_INT 2
3055: PPUSH
3056: CALL_OW 12
3060: ARRAY
3061: PPUSH
3062: CALL_OW 431
// bc_type = 31 ;
3066: LD_ADDR_OWVAR 42
3070: PUSH
3071: LD_INT 31
3073: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 51 , 7 , 3 ) ;
3074: LD_INT 51
3076: PPUSH
3077: LD_INT 7
3079: PPUSH
3080: LD_INT 3
3082: PPUSH
3083: CALL_OW 47
// bc_type = b_oil_mine ;
3087: LD_ADDR_OWVAR 42
3091: PUSH
3092: LD_INT 29
3094: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 68 , 40 , 1 ) ;
3095: LD_INT 68
3097: PPUSH
3098: LD_INT 40
3100: PPUSH
3101: LD_INT 1
3103: PPUSH
3104: CALL_OW 47
// bc_type = b_workshop ;
3108: LD_ADDR_OWVAR 42
3112: PUSH
3113: LD_INT 2
3115: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 20 , 2 ) ;
3116: LD_INT 38
3118: PPUSH
3119: LD_INT 20
3121: PPUSH
3122: LD_INT 2
3124: PPUSH
3125: CALL_OW 47
// bc_type = b_armoury ;
3129: LD_ADDR_OWVAR 42
3133: PUSH
3134: LD_INT 4
3136: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 20 , 2 ) ;
3137: LD_INT 38
3139: PPUSH
3140: LD_INT 20
3142: PPUSH
3143: LD_INT 2
3145: PPUSH
3146: CALL_OW 47
// bc_type = b_solar_power ;
3150: LD_ADDR_OWVAR 42
3154: PUSH
3155: LD_INT 27
3157: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 46 , 12 , 1 ) ;
3158: LD_INT 46
3160: PPUSH
3161: LD_INT 12
3163: PPUSH
3164: LD_INT 1
3166: PPUSH
3167: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 48 , 11 , 2 ) ;
3171: LD_INT 48
3173: PPUSH
3174: LD_INT 11
3176: PPUSH
3177: LD_INT 2
3179: PPUSH
3180: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 49 , 11 , 3 ) ;
3184: LD_INT 49
3186: PPUSH
3187: LD_INT 11
3189: PPUSH
3190: LD_INT 3
3192: PPUSH
3193: CALL_OW 47
// bc_type = b_lab_half ;
3197: LD_ADDR_OWVAR 42
3201: PUSH
3202: LD_INT 7
3204: ST_TO_ADDR
// bc_kind1 = b_lab_opto ;
3205: LD_ADDR_OWVAR 44
3209: PUSH
3210: LD_INT 15
3212: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
3213: LD_ADDR_OWVAR 45
3217: PUSH
3218: LD_INT 9
3220: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 42 , 15 , 2 ) ;
3221: LD_INT 42
3223: PPUSH
3224: LD_INT 15
3226: PPUSH
3227: LD_INT 2
3229: PPUSH
3230: CALL_OW 47
// end ; end ; end_of_file
3234: LD_VAR 0 1
3238: RET
// every 1 do var i , j , tmp ;
3239: GO 3241
3241: DISABLE
3242: LD_INT 0
3244: PPUSH
3245: PPUSH
3246: PPUSH
// begin InGameOn ;
3247: CALL_OW 8
// CenterNowOnUnits ( lab [ 1 ] ) ;
3251: LD_EXP 19
3255: PUSH
3256: LD_INT 1
3258: ARRAY
3259: PPUSH
3260: CALL_OW 87
// if IsOK ( Denis ) then
3264: LD_EXP 3
3268: PPUSH
3269: CALL_OW 302
3273: IFFALSE 3301
// begin SetTech ( tech_radar , 1 , state_researched ) ;
3275: LD_INT 6
3277: PPUSH
3278: LD_INT 1
3280: PPUSH
3281: LD_INT 2
3283: PPUSH
3284: CALL_OW 322
// SetRestrict ( b_ext_radar , 1 , true ) ;
3288: LD_INT 20
3290: PPUSH
3291: LD_INT 1
3293: PPUSH
3294: LD_INT 1
3296: PPUSH
3297: CALL_OW 324
// end ; CenterNowOnUnits ( JMM ) ;
3301: LD_EXP 1
3305: PPUSH
3306: CALL_OW 87
// ComTurnUnit ( JMM , DeltaDoctor ) ;
3310: LD_EXP 1
3314: PPUSH
3315: LD_EXP 15
3319: PPUSH
3320: CALL_OW 119
// repeat wait ( 0 0$1 ) ;
3324: LD_INT 35
3326: PPUSH
3327: CALL_OW 67
// ComMoveUnit ( DeltaDoctor , JMM ) ;
3331: LD_EXP 15
3335: PPUSH
3336: LD_EXP 1
3340: PPUSH
3341: CALL_OW 112
// until GetDistUnits ( JMM , DeltaDoctor ) < 5 ;
3345: LD_EXP 1
3349: PPUSH
3350: LD_EXP 15
3354: PPUSH
3355: CALL_OW 296
3359: PUSH
3360: LD_INT 5
3362: LESS
3363: IFFALSE 3324
// ComTurnUnit ( DeltaDoctor , JMM ) ;
3365: LD_EXP 15
3369: PPUSH
3370: LD_EXP 1
3374: PPUSH
3375: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
3379: LD_EXP 1
3383: PPUSH
3384: LD_STRING D1-JMM-1
3386: PPUSH
3387: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-1 ) ;
3391: LD_EXP 15
3395: PPUSH
3396: LD_STRING D1-Sci-1
3398: PPUSH
3399: CALL_OW 88
// ComEnterUnit ( [ JMM , DeltaDoctor , Denis ] , lab [ 1 ] ) ;
3403: LD_EXP 1
3407: PUSH
3408: LD_EXP 15
3412: PUSH
3413: LD_EXP 3
3417: PUSH
3418: EMPTY
3419: LIST
3420: LIST
3421: LIST
3422: PPUSH
3423: LD_EXP 19
3427: PUSH
3428: LD_INT 1
3430: ARRAY
3431: PPUSH
3432: CALL_OW 120
// end ;
3436: PPOPN 3
3438: END
// every 0 0$2 trigger IsInUnit ( JMM ) = lab [ 1 ] and IsInUnit ( DeltaDoctor ) = lab [ 1 ] do var i , j , tmp ;
3439: LD_EXP 1
3443: PPUSH
3444: CALL_OW 310
3448: PUSH
3449: LD_EXP 19
3453: PUSH
3454: LD_INT 1
3456: ARRAY
3457: EQUAL
3458: PUSH
3459: LD_EXP 15
3463: PPUSH
3464: CALL_OW 310
3468: PUSH
3469: LD_EXP 19
3473: PUSH
3474: LD_INT 1
3476: ARRAY
3477: EQUAL
3478: AND
3479: IFFALSE 4025
3481: GO 3483
3483: DISABLE
3484: LD_INT 0
3486: PPUSH
3487: PPUSH
3488: PPUSH
// begin CenterNowOnUnits ( lab [ 1 ] ) ;
3489: LD_EXP 19
3493: PUSH
3494: LD_INT 1
3496: ARRAY
3497: PPUSH
3498: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
3502: LD_EXP 1
3506: PPUSH
3507: LD_STRING D1-JMM-2
3509: PPUSH
3510: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-2 ) ;
3514: LD_EXP 15
3518: PPUSH
3519: LD_STRING D1-Sci-2
3521: PPUSH
3522: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
3526: LD_EXP 1
3530: PPUSH
3531: LD_STRING D1-JMM-3
3533: PPUSH
3534: CALL_OW 88
// if IsOK ( Denis ) then
3538: LD_EXP 3
3542: PPUSH
3543: CALL_OW 302
3547: IFFALSE 3563
// Say ( DeltaDoctor , D1-Sci-3 ) else
3549: LD_EXP 15
3553: PPUSH
3554: LD_STRING D1-Sci-3
3556: PPUSH
3557: CALL_OW 88
3561: GO 3575
// Say ( DeltaDoctor , D1-Sci-3a ) ;
3563: LD_EXP 15
3567: PPUSH
3568: LD_STRING D1-Sci-3a
3570: PPUSH
3571: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
3575: LD_EXP 1
3579: PPUSH
3580: LD_STRING D1-JMM-4
3582: PPUSH
3583: CALL_OW 88
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
3587: LD_ADDR_VAR 0 3
3591: PUSH
3592: LD_INT 22
3594: PUSH
3595: LD_INT 1
3597: PUSH
3598: EMPTY
3599: LIST
3600: LIST
3601: PUSH
3602: LD_INT 25
3604: PUSH
3605: LD_INT 4
3607: PUSH
3608: EMPTY
3609: LIST
3610: LIST
3611: PUSH
3612: LD_INT 3
3614: PUSH
3615: LD_INT 54
3617: PUSH
3618: EMPTY
3619: LIST
3620: PUSH
3621: EMPTY
3622: LIST
3623: LIST
3624: PUSH
3625: EMPTY
3626: LIST
3627: LIST
3628: LIST
3629: PPUSH
3630: CALL_OW 69
3634: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 0 ] ) do
3635: LD_ADDR_VAR 0 1
3639: PUSH
3640: LD_INT 22
3642: PUSH
3643: LD_INT 0
3645: PUSH
3646: EMPTY
3647: LIST
3648: LIST
3649: PPUSH
3650: CALL_OW 69
3654: PUSH
3655: FOR_IN
3656: IFFALSE 3706
// for j in tmp do
3658: LD_ADDR_VAR 0 2
3662: PUSH
3663: LD_VAR 0 3
3667: PUSH
3668: FOR_IN
3669: IFFALSE 3702
// AddComTameXY ( j , GetX ( i ) , GetY ( i ) ) ;
3671: LD_VAR 0 2
3675: PPUSH
3676: LD_VAR 0 1
3680: PPUSH
3681: CALL_OW 250
3685: PPUSH
3686: LD_VAR 0 1
3690: PPUSH
3691: CALL_OW 251
3695: PPUSH
3696: CALL_OW 191
3700: GO 3668
3702: POP
3703: POP
3704: GO 3655
3706: POP
3707: POP
// Say ( DeltaDoctor , D1-Sci-4 ) ;
3708: LD_EXP 15
3712: PPUSH
3713: LD_STRING D1-Sci-4
3715: PPUSH
3716: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
3720: LD_EXP 1
3724: PPUSH
3725: LD_STRING D1-JMM-5
3727: PPUSH
3728: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-5 ) ;
3732: LD_EXP 15
3736: PPUSH
3737: LD_STRING D1-Sci-5
3739: PPUSH
3740: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
3744: LD_EXP 1
3748: PPUSH
3749: LD_STRING D1-JMM-6
3751: PPUSH
3752: CALL_OW 88
// SayRadio ( Harisson , D1-Har-6 ) ;
3756: LD_EXP 16
3760: PPUSH
3761: LD_STRING D1-Har-6
3763: PPUSH
3764: CALL_OW 94
// Say ( JMM , D1-JMM-7 ) ;
3768: LD_EXP 1
3772: PPUSH
3773: LD_STRING D1-JMM-7
3775: PPUSH
3776: CALL_OW 88
// SayRadio ( Harisson , D1-Har-7 ) ;
3780: LD_EXP 16
3784: PPUSH
3785: LD_STRING D1-Har-7
3787: PPUSH
3788: CALL_OW 94
// if IsOK ( Denis ) then
3792: LD_EXP 3
3796: PPUSH
3797: CALL_OW 302
3801: IFFALSE 3815
// Say ( JMM , D1-JMM-8 ) ;
3803: LD_EXP 1
3807: PPUSH
3808: LD_STRING D1-JMM-8
3810: PPUSH
3811: CALL_OW 88
// Say ( JMM , D1-JMM-8a ) ;
3815: LD_EXP 1
3819: PPUSH
3820: LD_STRING D1-JMM-8a
3822: PPUSH
3823: CALL_OW 88
// SayRadio ( Harisson , D1-Har-8 ) ;
3827: LD_EXP 16
3831: PPUSH
3832: LD_STRING D1-Har-8
3834: PPUSH
3835: CALL_OW 94
// Say ( JMM , D1-JMM-9 ) ;
3839: LD_EXP 1
3843: PPUSH
3844: LD_STRING D1-JMM-9
3846: PPUSH
3847: CALL_OW 88
// SayRadio ( Harisson , D1-Har-9 ) ;
3851: LD_EXP 16
3855: PPUSH
3856: LD_STRING D1-Har-9
3858: PPUSH
3859: CALL_OW 94
// Say ( JMM , D1-JMM-10 ) ;
3863: LD_EXP 1
3867: PPUSH
3868: LD_STRING D1-JMM-10
3870: PPUSH
3871: CALL_OW 88
// if IsOK ( Denis ) then
3875: LD_EXP 3
3879: PPUSH
3880: CALL_OW 302
3884: IFFALSE 3898
// Say ( JMM , D1-JMM-10a ) ;
3886: LD_EXP 1
3890: PPUSH
3891: LD_STRING D1-JMM-10a
3893: PPUSH
3894: CALL_OW 88
// SelectAndSaveCharacters ;
3898: CALL 4536 0 0
// SetResourceType ( GetBase ( lab [ 1 ] ) , 1 , 250 ) ;
3902: LD_EXP 19
3906: PUSH
3907: LD_INT 1
3909: ARRAY
3910: PPUSH
3911: CALL_OW 274
3915: PPUSH
3916: LD_INT 1
3918: PPUSH
3919: LD_INT 250
3921: PPUSH
3922: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) > 0 then
3926: LD_INT 22
3928: PUSH
3929: LD_INT 1
3931: PUSH
3932: EMPTY
3933: LIST
3934: LIST
3935: PUSH
3936: LD_INT 30
3938: PUSH
3939: LD_INT 29
3941: PUSH
3942: EMPTY
3943: LIST
3944: LIST
3945: PUSH
3946: EMPTY
3947: LIST
3948: LIST
3949: PPUSH
3950: CALL_OW 69
3954: PUSH
3955: LD_INT 0
3957: GREATER
3958: IFFALSE 3984
// SetResourceType ( GetBase ( lab [ 1 ] ) , 2 , 300 ) ;
3960: LD_EXP 19
3964: PUSH
3965: LD_INT 1
3967: ARRAY
3968: PPUSH
3969: CALL_OW 274
3973: PPUSH
3974: LD_INT 2
3976: PPUSH
3977: LD_INT 300
3979: PPUSH
3980: CALL_OW 277
// InGameOff ;
3984: CALL_OW 9
// Query ( Q1 ) ;
3988: LD_STRING Q1
3990: PPUSH
3991: CALL_OW 97
// SetAreaMapShow ( ExitArea , 1 ) ;
3995: LD_INT 3
3997: PPUSH
3998: LD_INT 1
4000: PPUSH
4001: CALL_OW 424
// if IsInUnit ( JMM ) then
4005: LD_EXP 1
4009: PPUSH
4010: CALL_OW 310
4014: IFFALSE 4025
// ComExitBuilding ( JMM ) ;
4016: LD_EXP 1
4020: PPUSH
4021: CALL_OW 122
// end ;
4025: PPOPN 3
4027: END
// every 0 0$1 trigger FilterUnitsExceptArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do var i , cargoType ;
4028: LD_INT 3
4030: PPUSH
4031: LD_INT 22
4033: PUSH
4034: LD_INT 1
4036: PUSH
4037: EMPTY
4038: LIST
4039: LIST
4040: PUSH
4041: LD_INT 21
4043: PUSH
4044: LD_INT 1
4046: PUSH
4047: EMPTY
4048: LIST
4049: LIST
4050: PUSH
4051: EMPTY
4052: LIST
4053: LIST
4054: PPUSH
4055: CALL_OW 71
4059: PUSH
4060: LD_INT 0
4062: EQUAL
4063: IFFALSE 4381
4065: GO 4067
4067: DISABLE
4068: LD_INT 0
4070: PPUSH
4071: PPUSH
// begin if FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) > 0 then
4072: LD_INT 3
4074: PPUSH
4075: LD_INT 21
4077: PUSH
4078: LD_INT 2
4080: PUSH
4081: EMPTY
4082: LIST
4083: LIST
4084: PUSH
4085: LD_INT 3
4087: PUSH
4088: LD_INT 58
4090: PUSH
4091: EMPTY
4092: LIST
4093: PUSH
4094: EMPTY
4095: LIST
4096: LIST
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: PPUSH
4102: CALL_OW 70
4106: PUSH
4107: LD_INT 0
4109: GREATER
4110: IFFALSE 4367
// begin for i in FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) do
4112: LD_ADDR_VAR 0 1
4116: PUSH
4117: LD_INT 3
4119: PPUSH
4120: LD_INT 21
4122: PUSH
4123: LD_INT 2
4125: PUSH
4126: EMPTY
4127: LIST
4128: LIST
4129: PUSH
4130: LD_INT 3
4132: PUSH
4133: LD_INT 58
4135: PUSH
4136: EMPTY
4137: LIST
4138: PUSH
4139: EMPTY
4140: LIST
4141: LIST
4142: PUSH
4143: EMPTY
4144: LIST
4145: LIST
4146: PPUSH
4147: CALL_OW 70
4151: PUSH
4152: FOR_IN
4153: IFFALSE 4353
// begin cargoType = GetCargoType ( i ) ;
4155: LD_ADDR_VAR 0 2
4159: PUSH
4160: LD_VAR 0 1
4164: PPUSH
4165: CALL_OW 288
4169: ST_TO_ADDR
// if GetWeapon ( i ) = us_cargo_bay then
4170: LD_VAR 0 1
4174: PPUSH
4175: CALL_OW 264
4179: PUSH
4180: LD_INT 12
4182: EQUAL
4183: IFFALSE 4280
// begin yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , cargoType , GetCargo ( i , cargoType ) ] ] ;
4185: LD_ADDR_EXP 14
4189: PUSH
4190: LD_EXP 14
4194: PUSH
4195: LD_VAR 0 1
4199: PPUSH
4200: CALL_OW 248
4204: PUSH
4205: LD_VAR 0 1
4209: PPUSH
4210: CALL_OW 265
4214: PUSH
4215: LD_VAR 0 1
4219: PPUSH
4220: CALL_OW 262
4224: PUSH
4225: LD_VAR 0 1
4229: PPUSH
4230: CALL_OW 263
4234: PUSH
4235: LD_VAR 0 1
4239: PPUSH
4240: CALL_OW 264
4244: PUSH
4245: LD_VAR 0 2
4249: PUSH
4250: LD_VAR 0 1
4254: PPUSH
4255: LD_VAR 0 2
4259: PPUSH
4260: CALL_OW 289
4264: PUSH
4265: EMPTY
4266: LIST
4267: LIST
4268: LIST
4269: LIST
4270: LIST
4271: LIST
4272: LIST
4273: PUSH
4274: EMPTY
4275: LIST
4276: ADD
4277: ST_TO_ADDR
// end else
4278: GO 4351
// begin yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ] ;
4280: LD_ADDR_EXP 14
4284: PUSH
4285: LD_EXP 14
4289: PUSH
4290: LD_VAR 0 1
4294: PPUSH
4295: CALL_OW 248
4299: PUSH
4300: LD_VAR 0 1
4304: PPUSH
4305: CALL_OW 265
4309: PUSH
4310: LD_VAR 0 1
4314: PPUSH
4315: CALL_OW 262
4319: PUSH
4320: LD_VAR 0 1
4324: PPUSH
4325: CALL_OW 263
4329: PUSH
4330: LD_VAR 0 1
4334: PPUSH
4335: CALL_OW 264
4339: PUSH
4340: EMPTY
4341: LIST
4342: LIST
4343: LIST
4344: LIST
4345: LIST
4346: PUSH
4347: EMPTY
4348: LIST
4349: ADD
4350: ST_TO_ADDR
// end ; end ;
4351: GO 4152
4353: POP
4354: POP
// SaveVariable ( yourVehicles , 06_VehiclesIn06_1 ) ;
4355: LD_EXP 14
4359: PPUSH
4360: LD_STRING 06_VehiclesIn06_1
4362: PPUSH
4363: CALL_OW 39
// end ; SaveCargos ;
4367: CALL 4384 0 0
// ChangeMap ( 6 , %_cont ) ;
4371: LD_INT 6
4373: PPUSH
4374: LD_STRING %_cont
4376: PPUSH
4377: CALL_OW 340
// end ;
4381: PPOPN 2
4383: END
// export function SaveCargos ; var i ; begin
4384: LD_INT 0
4386: PPUSH
4387: PPUSH
// for i in FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) do
4388: LD_ADDR_VAR 0 2
4392: PUSH
4393: LD_INT 3
4395: PPUSH
4396: LD_INT 22
4398: PUSH
4399: LD_INT 1
4401: PUSH
4402: EMPTY
4403: LIST
4404: LIST
4405: PUSH
4406: LD_INT 34
4408: PUSH
4409: LD_INT 12
4411: PUSH
4412: EMPTY
4413: LIST
4414: LIST
4415: PUSH
4416: EMPTY
4417: LIST
4418: LIST
4419: PPUSH
4420: CALL_OW 70
4424: PUSH
4425: FOR_IN
4426: IFFALSE 4454
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
4428: LD_ADDR_EXP 20
4432: PUSH
4433: LD_EXP 20
4437: PUSH
4438: LD_VAR 0 2
4442: PPUSH
4443: CALL 5588 0 1
4447: PUSH
4448: EMPTY
4449: LIST
4450: ADD
4451: ST_TO_ADDR
4452: GO 4425
4454: POP
4455: POP
// SaveVariable ( resources , 06_ResourcesInCargo06_1 ) ;
4456: LD_EXP 20
4460: PPUSH
4461: LD_STRING 06_ResourcesInCargo06_1
4463: PPUSH
4464: CALL_OW 39
// end ; end_of_file
4468: LD_VAR 0 1
4472: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
4473: LD_INT 0
4475: PPUSH
4476: PPUSH
// if exist_mode then
4477: LD_VAR 0 2
4481: IFFALSE 4506
// unit := CreateCharacter ( mission_prefix_prev & ident ) else
4483: LD_ADDR_VAR 0 4
4487: PUSH
4488: LD_EXP 22
4492: PUSH
4493: LD_VAR 0 1
4497: STR
4498: PPUSH
4499: CALL_OW 34
4503: ST_TO_ADDR
4504: GO 4521
// unit := NewCharacter ( ident ) ;
4506: LD_ADDR_VAR 0 4
4510: PUSH
4511: LD_VAR 0 1
4515: PPUSH
4516: CALL_OW 25
4520: ST_TO_ADDR
// result := unit ;
4521: LD_ADDR_VAR 0 3
4525: PUSH
4526: LD_VAR 0 4
4530: ST_TO_ADDR
// end ;
4531: LD_VAR 0 3
4535: RET
// export function SelectAndSaveCharacters ; var i , yourPeople , selectedPeople , test ; begin
4536: LD_INT 0
4538: PPUSH
4539: PPUSH
4540: PPUSH
4541: PPUSH
4542: PPUSH
// yourPeople = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , DeltaDoctor , Denis ] ;
4543: LD_ADDR_VAR 0 3
4547: PUSH
4548: LD_INT 22
4550: PUSH
4551: LD_INT 1
4553: PUSH
4554: EMPTY
4555: LIST
4556: LIST
4557: PUSH
4558: LD_INT 21
4560: PUSH
4561: LD_INT 1
4563: PUSH
4564: EMPTY
4565: LIST
4566: LIST
4567: PUSH
4568: LD_INT 2
4570: PUSH
4571: LD_INT 25
4573: PUSH
4574: LD_INT 1
4576: PUSH
4577: EMPTY
4578: LIST
4579: LIST
4580: PUSH
4581: LD_INT 25
4583: PUSH
4584: LD_INT 2
4586: PUSH
4587: EMPTY
4588: LIST
4589: LIST
4590: PUSH
4591: LD_INT 25
4593: PUSH
4594: LD_INT 3
4596: PUSH
4597: EMPTY
4598: LIST
4599: LIST
4600: PUSH
4601: LD_INT 25
4603: PUSH
4604: LD_INT 4
4606: PUSH
4607: EMPTY
4608: LIST
4609: LIST
4610: PUSH
4611: EMPTY
4612: LIST
4613: LIST
4614: LIST
4615: LIST
4616: LIST
4617: PUSH
4618: EMPTY
4619: LIST
4620: LIST
4621: LIST
4622: PPUSH
4623: CALL_OW 69
4627: PUSH
4628: LD_EXP 1
4632: PUSH
4633: LD_EXP 15
4637: PUSH
4638: LD_EXP 3
4642: PUSH
4643: EMPTY
4644: LIST
4645: LIST
4646: LIST
4647: DIFF
4648: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , 5 , 5 , [ sel_change_class , JMM , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ yourPeople ^ [ sel_dont_change_class , sel_not_changeable , Denis , DeltaDoctor ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
4649: LD_ADDR_VAR 0 4
4653: PUSH
4654: LD_STRING text
4656: PPUSH
4657: LD_INT 5
4659: PPUSH
4660: LD_INT 5
4662: PPUSH
4663: LD_INT -5
4665: PUSH
4666: LD_EXP 1
4670: PUSH
4671: LD_INT -6
4673: PUSH
4674: LD_INT -2
4676: PUSH
4677: LD_INT -3
4679: PUSH
4680: LD_INT -5
4682: PUSH
4683: EMPTY
4684: LIST
4685: LIST
4686: LIST
4687: LIST
4688: LIST
4689: LIST
4690: PUSH
4691: LD_VAR 0 3
4695: ADD
4696: PUSH
4697: LD_INT -6
4699: PUSH
4700: LD_INT -4
4702: PUSH
4703: LD_EXP 3
4707: PUSH
4708: LD_EXP 15
4712: PUSH
4713: EMPTY
4714: LIST
4715: LIST
4716: LIST
4717: LIST
4718: ADD
4719: PPUSH
4720: LD_INT 1
4722: PUSH
4723: LD_INT 3
4725: PUSH
4726: LD_INT 2
4728: PUSH
4729: LD_INT 1
4731: PUSH
4732: EMPTY
4733: LIST
4734: LIST
4735: PUSH
4736: LD_INT 4
4738: PUSH
4739: EMPTY
4740: LIST
4741: LIST
4742: LIST
4743: LIST
4744: PPUSH
4745: CALL_OW 42
4749: ST_TO_ADDR
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
4750: LD_EXP 1
4754: PPUSH
4755: LD_EXP 21
4759: PUSH
4760: LD_STRING JMM
4762: STR
4763: PPUSH
4764: CALL_OW 38
// SaveCharacters ( DeltaDoctor , DeltaDoctor ) ;
4768: LD_EXP 15
4772: PPUSH
4773: LD_STRING DeltaDoctor
4775: PPUSH
4776: CALL_OW 38
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
4780: LD_EXP 3
4784: PPUSH
4785: LD_EXP 21
4789: PUSH
4790: LD_STRING Denis
4792: STR
4793: PPUSH
4794: CALL_OW 38
// if Lisa in selectedPeople then
4798: LD_EXP 4
4802: PUSH
4803: LD_VAR 0 4
4807: IN
4808: IFFALSE 4840
// begin SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
4810: LD_EXP 4
4814: PPUSH
4815: LD_EXP 21
4819: PUSH
4820: LD_STRING Lisa
4822: STR
4823: PPUSH
4824: CALL_OW 38
// SaveVariable ( 1 , LisaIn06 ) ;
4828: LD_INT 1
4830: PPUSH
4831: LD_STRING LisaIn06
4833: PPUSH
4834: CALL_OW 39
// end else
4838: GO 4861
// if IsOk ( Lisa ) then
4840: LD_EXP 4
4844: PPUSH
4845: CALL_OW 302
4849: IFFALSE 4861
// SaveVariable ( 1 , LisaStayInDelta ) ;
4851: LD_INT 1
4853: PPUSH
4854: LD_STRING LisaStayInDelta
4856: PPUSH
4857: CALL_OW 39
// if Bobby in selectedPeople then
4861: LD_EXP 6
4865: PUSH
4866: LD_VAR 0 4
4870: IN
4871: IFFALSE 4903
// begin SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
4873: LD_EXP 6
4877: PPUSH
4878: LD_EXP 21
4882: PUSH
4883: LD_STRING Bobby
4885: STR
4886: PPUSH
4887: CALL_OW 38
// SaveVariable ( 1 , BobbyIn06 ) ;
4891: LD_INT 1
4893: PPUSH
4894: LD_STRING BobbyIn06
4896: PPUSH
4897: CALL_OW 39
// end else
4901: GO 4924
// if IsOk ( Bobby ) then
4903: LD_EXP 6
4907: PPUSH
4908: CALL_OW 302
4912: IFFALSE 4924
// SaveVariable ( 1 , BobbyStayInDelta ) ;
4914: LD_INT 1
4916: PPUSH
4917: LD_STRING BobbyStayInDelta
4919: PPUSH
4920: CALL_OW 39
// if Cyrus in selectedPeople then
4924: LD_EXP 7
4928: PUSH
4929: LD_VAR 0 4
4933: IN
4934: IFFALSE 4966
// begin SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
4936: LD_EXP 7
4940: PPUSH
4941: LD_EXP 21
4945: PUSH
4946: LD_STRING Cyrus
4948: STR
4949: PPUSH
4950: CALL_OW 38
// SaveVariable ( 1 , CyrusIn06 ) ;
4954: LD_INT 1
4956: PPUSH
4957: LD_STRING CyrusIn06
4959: PPUSH
4960: CALL_OW 39
// end else
4964: GO 4987
// if IsOk ( Cyrus ) then
4966: LD_EXP 7
4970: PPUSH
4971: CALL_OW 302
4975: IFFALSE 4987
// SaveVariable ( 1 , CyrusStayInDelta ) ;
4977: LD_INT 1
4979: PPUSH
4980: LD_STRING CyrusStayInDelta
4982: PPUSH
4983: CALL_OW 39
// if Frank in selectedPeople then
4987: LD_EXP 5
4991: PUSH
4992: LD_VAR 0 4
4996: IN
4997: IFFALSE 5029
// begin SaveCharacters ( Frank , mission_prefix & Frank ) ;
4999: LD_EXP 5
5003: PPUSH
5004: LD_EXP 21
5008: PUSH
5009: LD_STRING Frank
5011: STR
5012: PPUSH
5013: CALL_OW 38
// SaveVariable ( 1 , FrankIn06 ) ;
5017: LD_INT 1
5019: PPUSH
5020: LD_STRING FrankIn06
5022: PPUSH
5023: CALL_OW 39
// end else
5027: GO 5050
// if IsOk ( Frank ) then
5029: LD_EXP 5
5033: PPUSH
5034: CALL_OW 302
5038: IFFALSE 5050
// SaveVariable ( 1 , FrankStayInDelta ) ;
5040: LD_INT 1
5042: PPUSH
5043: LD_STRING FrankStayInDelta
5045: PPUSH
5046: CALL_OW 39
// if Brown in selectedPeople then
5050: LD_EXP 8
5054: PUSH
5055: LD_VAR 0 4
5059: IN
5060: IFFALSE 5092
// begin SaveCharacters ( Brown , mission_prefix & Brown ) ;
5062: LD_EXP 8
5066: PPUSH
5067: LD_EXP 21
5071: PUSH
5072: LD_STRING Brown
5074: STR
5075: PPUSH
5076: CALL_OW 38
// SaveVariable ( 1 , BrownIn06 ) ;
5080: LD_INT 1
5082: PPUSH
5083: LD_STRING BrownIn06
5085: PPUSH
5086: CALL_OW 39
// end else
5090: GO 5113
// if IsOk ( Brown ) then
5092: LD_EXP 8
5096: PPUSH
5097: CALL_OW 302
5101: IFFALSE 5113
// SaveVariable ( 1 , BrownStayInDelta ) ;
5103: LD_INT 1
5105: PPUSH
5106: LD_STRING BrownStayInDelta
5108: PPUSH
5109: CALL_OW 39
// if Donaldson in selectedPeople then
5113: LD_EXP 9
5117: PUSH
5118: LD_VAR 0 4
5122: IN
5123: IFFALSE 5155
// begin SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
5125: LD_EXP 9
5129: PPUSH
5130: LD_EXP 21
5134: PUSH
5135: LD_STRING Donaldson
5137: STR
5138: PPUSH
5139: CALL_OW 38
// SaveVariable ( 1 , DonaldsonIn06 ) ;
5143: LD_INT 1
5145: PPUSH
5146: LD_STRING DonaldsonIn06
5148: PPUSH
5149: CALL_OW 39
// end else
5153: GO 5176
// if IsOk ( Donaldson ) then
5155: LD_EXP 9
5159: PPUSH
5160: CALL_OW 302
5164: IFFALSE 5176
// SaveVariable ( 1 , DonaldsonStayInDelta ) ;
5166: LD_INT 1
5168: PPUSH
5169: LD_STRING DonaldsonStayInDelta
5171: PPUSH
5172: CALL_OW 39
// if Gladstone in selectedPeople then
5176: LD_EXP 2
5180: PUSH
5181: LD_VAR 0 4
5185: IN
5186: IFFALSE 5218
// begin SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
5188: LD_EXP 2
5192: PPUSH
5193: LD_EXP 21
5197: PUSH
5198: LD_STRING Gladstone
5200: STR
5201: PPUSH
5202: CALL_OW 38
// SaveVariable ( 1 , GladstoneIn06 ) ;
5206: LD_INT 1
5208: PPUSH
5209: LD_STRING GladstoneIn06
5211: PPUSH
5212: CALL_OW 39
// end else
5216: GO 5239
// if IsOk ( Gladstone ) then
5218: LD_EXP 2
5222: PPUSH
5223: CALL_OW 302
5227: IFFALSE 5239
// SaveVariable ( 1 , GladstoneStayInDelta ) ;
5229: LD_INT 1
5231: PPUSH
5232: LD_STRING GladstoneStayInDelta
5234: PPUSH
5235: CALL_OW 39
// SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 4 ) ;
5239: LD_INT 22
5241: PUSH
5242: LD_INT 1
5244: PUSH
5245: EMPTY
5246: LIST
5247: LIST
5248: PUSH
5249: LD_INT 21
5251: PUSH
5252: LD_INT 1
5254: PUSH
5255: EMPTY
5256: LIST
5257: LIST
5258: PUSH
5259: EMPTY
5260: LIST
5261: LIST
5262: PPUSH
5263: CALL_OW 69
5267: PPUSH
5268: LD_INT 4
5270: PPUSH
5271: CALL_OW 235
// for i in selectedPeople do
5275: LD_ADDR_VAR 0 2
5279: PUSH
5280: LD_VAR 0 4
5284: PUSH
5285: FOR_IN
5286: IFFALSE 5302
// SetSide ( i , 1 ) ;
5288: LD_VAR 0 2
5292: PPUSH
5293: LD_INT 1
5295: PPUSH
5296: CALL_OW 235
5300: GO 5285
5302: POP
5303: POP
// for i in yourApemans do
5304: LD_ADDR_VAR 0 2
5308: PUSH
5309: LD_EXP 13
5313: PUSH
5314: FOR_IN
5315: IFFALSE 5331
// SetSide ( i , 1 ) ;
5317: LD_VAR 0 2
5321: PPUSH
5322: LD_INT 1
5324: PPUSH
5325: CALL_OW 235
5329: GO 5314
5331: POP
5332: POP
// SetSide ( JMM , 1 ) ;
5333: LD_EXP 1
5337: PPUSH
5338: LD_INT 1
5340: PPUSH
5341: CALL_OW 235
// SetSkill ( yourApemans , 2 , 5 ) ;
5345: LD_EXP 13
5349: PPUSH
5350: LD_INT 2
5352: PPUSH
5353: LD_INT 5
5355: PPUSH
5356: CALL_OW 237
// SaveCharacters ( yourApemans , ApeIn06 ) ;
5360: LD_EXP 13
5364: PPUSH
5365: LD_STRING ApeIn06
5367: PPUSH
5368: CALL_OW 38
// SaveCharacters ( selectedPeople diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis ] , OthersIn06 ) ;
5372: LD_VAR 0 4
5376: PUSH
5377: LD_EXP 1
5381: PUSH
5382: LD_EXP 4
5386: PUSH
5387: LD_EXP 6
5391: PUSH
5392: LD_EXP 7
5396: PUSH
5397: LD_EXP 5
5401: PUSH
5402: LD_EXP 8
5406: PUSH
5407: LD_EXP 9
5411: PUSH
5412: LD_EXP 2
5416: PUSH
5417: LD_EXP 3
5421: PUSH
5422: EMPTY
5423: LIST
5424: LIST
5425: LIST
5426: LIST
5427: LIST
5428: LIST
5429: LIST
5430: LIST
5431: LIST
5432: DIFF
5433: PPUSH
5434: LD_STRING OthersIn06
5436: PPUSH
5437: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ DeltaDoctor , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis ] , OthersStayInDelta ) ;
5441: LD_INT 22
5443: PUSH
5444: LD_INT 4
5446: PUSH
5447: EMPTY
5448: LIST
5449: LIST
5450: PUSH
5451: LD_INT 2
5453: PUSH
5454: LD_INT 25
5456: PUSH
5457: LD_INT 1
5459: PUSH
5460: EMPTY
5461: LIST
5462: LIST
5463: PUSH
5464: LD_INT 25
5466: PUSH
5467: LD_INT 2
5469: PUSH
5470: EMPTY
5471: LIST
5472: LIST
5473: PUSH
5474: LD_INT 25
5476: PUSH
5477: LD_INT 3
5479: PUSH
5480: EMPTY
5481: LIST
5482: LIST
5483: PUSH
5484: LD_INT 25
5486: PUSH
5487: LD_INT 4
5489: PUSH
5490: EMPTY
5491: LIST
5492: LIST
5493: PUSH
5494: EMPTY
5495: LIST
5496: LIST
5497: LIST
5498: LIST
5499: LIST
5500: PUSH
5501: EMPTY
5502: LIST
5503: LIST
5504: PPUSH
5505: CALL_OW 69
5509: PUSH
5510: LD_EXP 15
5514: PUSH
5515: LD_EXP 4
5519: PUSH
5520: LD_EXP 6
5524: PUSH
5525: LD_EXP 7
5529: PUSH
5530: LD_EXP 5
5534: PUSH
5535: LD_EXP 8
5539: PUSH
5540: LD_EXP 9
5544: PUSH
5545: LD_EXP 2
5549: PUSH
5550: LD_EXP 3
5554: PUSH
5555: EMPTY
5556: LIST
5557: LIST
5558: LIST
5559: LIST
5560: LIST
5561: LIST
5562: LIST
5563: LIST
5564: LIST
5565: DIFF
5566: PPUSH
5567: LD_STRING OthersStayInDelta
5569: PPUSH
5570: CALL_OW 38
// ComStop ( selectedPeople ) ;
5574: LD_VAR 0 4
5578: PPUSH
5579: CALL_OW 141
// end ;
5583: LD_VAR 0 1
5587: RET
// export function GetMultiCargo ( cargo_bay ) ; var i ; begin
5588: LD_INT 0
5590: PPUSH
5591: PPUSH
// result := [ GetCargo ( cargo_bay , mat_cans ) , GetCargo ( cargo_bay , mat_oil ) , GetCargo ( cargo_bay , mat_siberit ) ] ;
5592: LD_ADDR_VAR 0 2
5596: PUSH
5597: LD_VAR 0 1
5601: PPUSH
5602: LD_INT 1
5604: PPUSH
5605: CALL_OW 289
5609: PUSH
5610: LD_VAR 0 1
5614: PPUSH
5615: LD_INT 2
5617: PPUSH
5618: CALL_OW 289
5622: PUSH
5623: LD_VAR 0 1
5627: PPUSH
5628: LD_INT 3
5630: PPUSH
5631: CALL_OW 289
5635: PUSH
5636: EMPTY
5637: LIST
5638: LIST
5639: LIST
5640: ST_TO_ADDR
// end ; end_of_file
5641: LD_VAR 0 2
5645: RET
// on Command ( comandid ) do var i ;
5646: LD_INT 0
5648: PPUSH
// begin if comandid = 65 then
5649: LD_VAR 0 1
5653: PUSH
5654: LD_INT 65
5656: EQUAL
5657: IFFALSE 5698
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
5659: LD_ADDR_VAR 0 2
5663: PUSH
5664: LD_INT 22
5666: PUSH
5667: LD_INT 1
5669: PUSH
5670: EMPTY
5671: LIST
5672: LIST
5673: PUSH
5674: EMPTY
5675: LIST
5676: PPUSH
5677: CALL_OW 69
5681: PUSH
5682: FOR_IN
5683: IFFALSE 5696
// ComStop ( i ) ;
5685: LD_VAR 0 2
5689: PPUSH
5690: CALL_OW 141
5694: GO 5682
5696: POP
5697: POP
// end ;
5698: PPOPN 2
5700: END
// on ApemanTamed ( apeman , human ) do var tmp ;
5701: LD_INT 0
5703: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
5704: LD_ADDR_VAR 0 3
5708: PUSH
5709: LD_INT 22
5711: PUSH
5712: LD_INT 1
5714: PUSH
5715: EMPTY
5716: LIST
5717: LIST
5718: PUSH
5719: LD_INT 21
5721: PUSH
5722: LD_INT 3
5724: PUSH
5725: EMPTY
5726: LIST
5727: LIST
5728: PUSH
5729: LD_INT 30
5731: PUSH
5732: LD_INT 0
5734: PUSH
5735: EMPTY
5736: LIST
5737: LIST
5738: PUSH
5739: EMPTY
5740: LIST
5741: LIST
5742: LIST
5743: PPUSH
5744: CALL_OW 69
5748: ST_TO_ADDR
// ComEnterUnit ( apeman , tmp [ 1 ] ) ;
5749: LD_VAR 0 1
5753: PPUSH
5754: LD_VAR 0 3
5758: PUSH
5759: LD_INT 1
5761: ARRAY
5762: PPUSH
5763: CALL_OW 120
// SetSide ( apeman , 4 ) ;
5767: LD_VAR 0 1
5771: PPUSH
5772: LD_INT 4
5774: PPUSH
5775: CALL_OW 235
// end ;
5779: PPOPN 3
5781: END
