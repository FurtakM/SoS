// export JMM , Gladstone , Denis , Lisa , Frank , Bobby , Cyrus , Brown , Donaldson , Mike ; export others , randomsDelta ; export apemans , yourApemans ; export yourVehicles ; export DeltaDoctor ; export Harisson ; export selectedPeople ; export baseCorrect ; export cutscene ; export lab ; export resources ; export mission_prefix , mission_prefix_prev ; starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// FogOff ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 344
// baseCorrect := 0 ;
  15: LD_ADDR_EXP 19
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// cutscene := 1 ;
  23: LD_ADDR_EXP 20
  27: PUSH
  28: LD_INT 1
  30: ST_TO_ADDR
// apemans := [ ] ;
  31: LD_ADDR_EXP 13
  35: PUSH
  36: EMPTY
  37: ST_TO_ADDR
// yourApemans := [ ] ;
  38: LD_ADDR_EXP 14
  42: PUSH
  43: EMPTY
  44: ST_TO_ADDR
// yourVehicles := [ ] ;
  45: LD_ADDR_EXP 15
  49: PUSH
  50: EMPTY
  51: ST_TO_ADDR
// randomsDelta := [ ] ;
  52: LD_ADDR_EXP 12
  56: PUSH
  57: EMPTY
  58: ST_TO_ADDR
// resources := [ ] ;
  59: LD_ADDR_EXP 22
  63: PUSH
  64: EMPTY
  65: ST_TO_ADDR
// mission_prefix := 06_ ;
  66: LD_ADDR_EXP 23
  70: PUSH
  71: LD_STRING 06_
  73: ST_TO_ADDR
// mission_prefix_prev := 05_ ;
  74: LD_ADDR_EXP 24
  78: PUSH
  79: LD_STRING 05_
  81: ST_TO_ADDR
// PrepareDeltaBase ;
  82: CALL 2411 0 0
// CreateNature ;
  86: CALL 170 0 0
// LoadVehicles ;
  90: CALL 1530 0 0
// PrepareHeroes ;
  94: CALL 299 0 0
// PrepareRandoms ;
  98: CALL 1795 0 0
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
 102: LD_ADDR_EXP 21
 106: PUSH
 107: LD_INT 22
 109: PUSH
 110: LD_INT 1
 112: PUSH
 113: EMPTY
 114: LIST
 115: LIST
 116: PUSH
 117: LD_INT 2
 119: PUSH
 120: LD_INT 30
 122: PUSH
 123: LD_INT 6
 125: PUSH
 126: EMPTY
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 30
 132: PUSH
 133: LD_INT 7
 135: PUSH
 136: EMPTY
 137: LIST
 138: LIST
 139: PUSH
 140: LD_INT 30
 142: PUSH
 143: LD_INT 8
 145: PUSH
 146: EMPTY
 147: LIST
 148: LIST
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: LIST
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: PPUSH
 160: CALL_OW 69
 164: ST_TO_ADDR
// Action ;
 165: CALL 3325 0 0
// end ;
 169: END
// export function CreateNature ; var i ; begin
 170: LD_INT 0
 172: PPUSH
 173: PPUSH
// uc_side := 0 ;
 174: LD_ADDR_OWVAR 20
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// uc_nation := 0 ;
 182: LD_ADDR_OWVAR 21
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// for i = 1 to 4 do
 190: LD_ADDR_VAR 0 2
 194: PUSH
 195: DOUBLE
 196: LD_INT 1
 198: DEC
 199: ST_TO_ADDR
 200: LD_INT 4
 202: PUSH
 203: FOR_TO
 204: IFFALSE 292
// begin hc_gallery :=  ;
 206: LD_ADDR_OWVAR 33
 210: PUSH
 211: LD_STRING 
 213: ST_TO_ADDR
// hc_name :=  ;
 214: LD_ADDR_OWVAR 26
 218: PUSH
 219: LD_STRING 
 221: ST_TO_ADDR
// hc_agressivity := 0 ;
 222: LD_ADDR_OWVAR 35
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// hc_attr := [ rand ( 10 , 11 ) , rand ( 10 , 12 ) ] ;
 230: LD_ADDR_OWVAR 29
 234: PUSH
 235: LD_INT 10
 237: PPUSH
 238: LD_INT 11
 240: PPUSH
 241: CALL_OW 12
 245: PUSH
 246: LD_INT 10
 248: PPUSH
 249: LD_INT 12
 251: PPUSH
 252: CALL_OW 12
 256: PUSH
 257: EMPTY
 258: LIST
 259: LIST
 260: ST_TO_ADDR
// hc_class := class_apeman ;
 261: LD_ADDR_OWVAR 28
 265: PUSH
 266: LD_INT 12
 268: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , 22 , 18 , 20 , false ) ;
 269: CALL_OW 44
 273: PPUSH
 274: LD_INT 22
 276: PPUSH
 277: LD_INT 18
 279: PPUSH
 280: LD_INT 20
 282: PPUSH
 283: LD_INT 0
 285: PPUSH
 286: CALL_OW 50
// end ;
 290: GO 203
 292: POP
 293: POP
// end ; end_of_file
 294: LD_VAR 0 1
 298: RET
// export function PrepareHeroes ; var i , tmp , ape , test ; begin
 299: LD_INT 0
 301: PPUSH
 302: PPUSH
 303: PPUSH
 304: PPUSH
 305: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
 306: LD_ADDR_VAR 0 3
 310: PUSH
 311: LD_INT 22
 313: PUSH
 314: LD_INT 1
 316: PUSH
 317: EMPTY
 318: LIST
 319: LIST
 320: PUSH
 321: LD_INT 21
 323: PUSH
 324: LD_INT 3
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: PUSH
 331: LD_INT 30
 333: PUSH
 334: LD_INT 0
 336: PUSH
 337: EMPTY
 338: LIST
 339: LIST
 340: PUSH
 341: EMPTY
 342: LIST
 343: LIST
 344: LIST
 345: PPUSH
 346: CALL_OW 69
 350: ST_TO_ADDR
// if tmp then
 351: LD_VAR 0 3
 355: IFFALSE 373
// SetBName ( tmp [ 1 ] , delta ) ;
 357: LD_VAR 0 3
 361: PUSH
 362: LD_INT 1
 364: ARRAY
 365: PPUSH
 366: LD_STRING delta
 368: PPUSH
 369: CALL_OW 500
// uc_side := 1 ;
 373: LD_ADDR_OWVAR 20
 377: PUSH
 378: LD_INT 1
 380: ST_TO_ADDR
// uc_nation := 1 ;
 381: LD_ADDR_OWVAR 21
 385: PUSH
 386: LD_INT 1
 388: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , true , mission_prefix_prev ) ;
 389: LD_ADDR_EXP 1
 393: PUSH
 394: LD_STRING JMM
 396: PPUSH
 397: LD_INT 1
 399: PPUSH
 400: LD_EXP 24
 404: PPUSH
 405: CALL 27124 0 3
 409: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
 410: LD_ADDR_EXP 17
 414: PUSH
 415: LD_STRING Harisson
 417: PPUSH
 418: LD_INT 0
 420: PPUSH
 421: LD_STRING 
 423: PPUSH
 424: CALL 27124 0 3
 428: ST_TO_ADDR
// PlaceUnitXYR ( JMM , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 429: LD_EXP 1
 433: PPUSH
 434: LD_VAR 0 3
 438: PUSH
 439: LD_INT 1
 441: ARRAY
 442: PPUSH
 443: CALL_OW 250
 447: PPUSH
 448: LD_VAR 0 3
 452: PUSH
 453: LD_INT 1
 455: ARRAY
 456: PPUSH
 457: CALL_OW 251
 461: PPUSH
 462: LD_INT 5
 464: PPUSH
 465: LD_INT 0
 467: PPUSH
 468: CALL_OW 50
// SetClass ( JMM , 1 ) ;
 472: LD_EXP 1
 476: PPUSH
 477: LD_INT 1
 479: PPUSH
 480: CALL_OW 336
// Gladstone := PrepareUnit ( Gladstone , true , mission_prefix_prev ) ;
 484: LD_ADDR_EXP 2
 488: PUSH
 489: LD_STRING Gladstone
 491: PPUSH
 492: LD_INT 1
 494: PPUSH
 495: LD_EXP 24
 499: PPUSH
 500: CALL 27124 0 3
 504: ST_TO_ADDR
// PlaceUnitXYR ( Gladstone , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 505: LD_EXP 2
 509: PPUSH
 510: LD_VAR 0 3
 514: PUSH
 515: LD_INT 1
 517: ARRAY
 518: PPUSH
 519: CALL_OW 250
 523: PPUSH
 524: LD_VAR 0 3
 528: PUSH
 529: LD_INT 1
 531: ARRAY
 532: PPUSH
 533: CALL_OW 251
 537: PPUSH
 538: LD_INT 5
 540: PPUSH
 541: LD_INT 0
 543: PPUSH
 544: CALL_OW 50
// SetClass ( Gladstone , 4 ) ;
 548: LD_EXP 2
 552: PPUSH
 553: LD_INT 4
 555: PPUSH
 556: CALL_OW 336
// Denis := PrepareUnit ( Denis , true , mission_prefix_prev ) ;
 560: LD_ADDR_EXP 3
 564: PUSH
 565: LD_STRING Denis
 567: PPUSH
 568: LD_INT 1
 570: PPUSH
 571: LD_EXP 24
 575: PPUSH
 576: CALL 27124 0 3
 580: ST_TO_ADDR
// PlaceUnitXYR ( Denis , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 581: LD_EXP 3
 585: PPUSH
 586: LD_VAR 0 3
 590: PUSH
 591: LD_INT 1
 593: ARRAY
 594: PPUSH
 595: CALL_OW 250
 599: PPUSH
 600: LD_VAR 0 3
 604: PUSH
 605: LD_INT 1
 607: ARRAY
 608: PPUSH
 609: CALL_OW 251
 613: PPUSH
 614: LD_INT 5
 616: PPUSH
 617: LD_INT 0
 619: PPUSH
 620: CALL_OW 50
// SetClass ( Denis , 4 ) ;
 624: LD_EXP 3
 628: PPUSH
 629: LD_INT 4
 631: PPUSH
 632: CALL_OW 336
// Mike := PrepareUnit ( Mike , true , mission_prefix_prev ) ;
 636: LD_ADDR_EXP 10
 640: PUSH
 641: LD_STRING Mike
 643: PPUSH
 644: LD_INT 1
 646: PPUSH
 647: LD_EXP 24
 651: PPUSH
 652: CALL 27124 0 3
 656: ST_TO_ADDR
// PlaceUnitXYR ( Mike , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 657: LD_EXP 10
 661: PPUSH
 662: LD_VAR 0 3
 666: PUSH
 667: LD_INT 1
 669: ARRAY
 670: PPUSH
 671: CALL_OW 250
 675: PPUSH
 676: LD_VAR 0 3
 680: PUSH
 681: LD_INT 1
 683: ARRAY
 684: PPUSH
 685: CALL_OW 251
 689: PPUSH
 690: LD_INT 5
 692: PPUSH
 693: LD_INT 0
 695: PPUSH
 696: CALL_OW 50
// if LoadVariable ( FrankInDelta , 0 ) = 1 then
 700: LD_STRING FrankInDelta
 702: PPUSH
 703: LD_INT 0
 705: PPUSH
 706: CALL_OW 30
 710: PUSH
 711: LD_INT 1
 713: EQUAL
 714: IFFALSE 792
// begin Frank := PrepareUnit ( Frank , true , mission_prefix_prev ) ;
 716: LD_ADDR_EXP 5
 720: PUSH
 721: LD_STRING Frank
 723: PPUSH
 724: LD_INT 1
 726: PPUSH
 727: LD_EXP 24
 731: PPUSH
 732: CALL 27124 0 3
 736: ST_TO_ADDR
// PlaceUnitXYR ( Frank , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 737: LD_EXP 5
 741: PPUSH
 742: LD_VAR 0 3
 746: PUSH
 747: LD_INT 1
 749: ARRAY
 750: PPUSH
 751: CALL_OW 250
 755: PPUSH
 756: LD_VAR 0 3
 760: PUSH
 761: LD_INT 1
 763: ARRAY
 764: PPUSH
 765: CALL_OW 251
 769: PPUSH
 770: LD_INT 5
 772: PPUSH
 773: LD_INT 0
 775: PPUSH
 776: CALL_OW 50
// SetClass ( Frank , 1 ) ;
 780: LD_EXP 5
 784: PPUSH
 785: LD_INT 1
 787: PPUSH
 788: CALL_OW 336
// end ; if LoadVariable ( LisaInDelta , 0 ) = 1 then
 792: LD_STRING LisaInDelta
 794: PPUSH
 795: LD_INT 0
 797: PPUSH
 798: CALL_OW 30
 802: PUSH
 803: LD_INT 1
 805: EQUAL
 806: IFFALSE 884
// begin Lisa := PrepareUnit ( Lisa , true , mission_prefix_prev ) ;
 808: LD_ADDR_EXP 4
 812: PUSH
 813: LD_STRING Lisa
 815: PPUSH
 816: LD_INT 1
 818: PPUSH
 819: LD_EXP 24
 823: PPUSH
 824: CALL 27124 0 3
 828: ST_TO_ADDR
// PlaceUnitXYR ( Lisa , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 829: LD_EXP 4
 833: PPUSH
 834: LD_VAR 0 3
 838: PUSH
 839: LD_INT 1
 841: ARRAY
 842: PPUSH
 843: CALL_OW 250
 847: PPUSH
 848: LD_VAR 0 3
 852: PUSH
 853: LD_INT 1
 855: ARRAY
 856: PPUSH
 857: CALL_OW 251
 861: PPUSH
 862: LD_INT 5
 864: PPUSH
 865: LD_INT 0
 867: PPUSH
 868: CALL_OW 50
// SetClass ( Lisa , 1 ) ;
 872: LD_EXP 4
 876: PPUSH
 877: LD_INT 1
 879: PPUSH
 880: CALL_OW 336
// end ; if LoadVariable ( BobbyInDelta , 0 ) = 1 then
 884: LD_STRING BobbyInDelta
 886: PPUSH
 887: LD_INT 0
 889: PPUSH
 890: CALL_OW 30
 894: PUSH
 895: LD_INT 1
 897: EQUAL
 898: IFFALSE 976
// begin Bobby := PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 900: LD_ADDR_EXP 6
 904: PUSH
 905: LD_STRING Bobby
 907: PPUSH
 908: LD_INT 1
 910: PPUSH
 911: LD_EXP 24
 915: PPUSH
 916: CALL 27124 0 3
 920: ST_TO_ADDR
// PlaceUnitXYR ( Bobby , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 921: LD_EXP 6
 925: PPUSH
 926: LD_VAR 0 3
 930: PUSH
 931: LD_INT 1
 933: ARRAY
 934: PPUSH
 935: CALL_OW 250
 939: PPUSH
 940: LD_VAR 0 3
 944: PUSH
 945: LD_INT 1
 947: ARRAY
 948: PPUSH
 949: CALL_OW 251
 953: PPUSH
 954: LD_INT 5
 956: PPUSH
 957: LD_INT 0
 959: PPUSH
 960: CALL_OW 50
// SetClass ( Bobby , 1 ) ;
 964: LD_EXP 6
 968: PPUSH
 969: LD_INT 1
 971: PPUSH
 972: CALL_OW 336
// end ; if LoadVariable ( CyrusInDelta , 0 ) = 1 then
 976: LD_STRING CyrusInDelta
 978: PPUSH
 979: LD_INT 0
 981: PPUSH
 982: CALL_OW 30
 986: PUSH
 987: LD_INT 1
 989: EQUAL
 990: IFFALSE 1068
// begin Cyrus := PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
 992: LD_ADDR_EXP 7
 996: PUSH
 997: LD_STRING Cyrus
 999: PPUSH
1000: LD_INT 1
1002: PPUSH
1003: LD_EXP 24
1007: PPUSH
1008: CALL 27124 0 3
1012: ST_TO_ADDR
// PlaceUnitXYR ( Cyrus , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1013: LD_EXP 7
1017: PPUSH
1018: LD_VAR 0 3
1022: PUSH
1023: LD_INT 1
1025: ARRAY
1026: PPUSH
1027: CALL_OW 250
1031: PPUSH
1032: LD_VAR 0 3
1036: PUSH
1037: LD_INT 1
1039: ARRAY
1040: PPUSH
1041: CALL_OW 251
1045: PPUSH
1046: LD_INT 5
1048: PPUSH
1049: LD_INT 0
1051: PPUSH
1052: CALL_OW 50
// SetClass ( Cyrus , 1 ) ;
1056: LD_EXP 7
1060: PPUSH
1061: LD_INT 1
1063: PPUSH
1064: CALL_OW 336
// end ; if LoadVariable ( DonaldsonInDelta , 0 ) = 1 then
1068: LD_STRING DonaldsonInDelta
1070: PPUSH
1071: LD_INT 0
1073: PPUSH
1074: CALL_OW 30
1078: PUSH
1079: LD_INT 1
1081: EQUAL
1082: IFFALSE 1160
// begin Donaldson := PrepareUnit ( Donaldson , true , mission_prefix_prev ) ;
1084: LD_ADDR_EXP 9
1088: PUSH
1089: LD_STRING Donaldson
1091: PPUSH
1092: LD_INT 1
1094: PPUSH
1095: LD_EXP 24
1099: PPUSH
1100: CALL 27124 0 3
1104: ST_TO_ADDR
// PlaceUnitXYR ( Donaldson , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1105: LD_EXP 9
1109: PPUSH
1110: LD_VAR 0 3
1114: PUSH
1115: LD_INT 1
1117: ARRAY
1118: PPUSH
1119: CALL_OW 250
1123: PPUSH
1124: LD_VAR 0 3
1128: PUSH
1129: LD_INT 1
1131: ARRAY
1132: PPUSH
1133: CALL_OW 251
1137: PPUSH
1138: LD_INT 5
1140: PPUSH
1141: LD_INT 0
1143: PPUSH
1144: CALL_OW 50
// SetClass ( Donaldson , 1 ) ;
1148: LD_EXP 9
1152: PPUSH
1153: LD_INT 1
1155: PPUSH
1156: CALL_OW 336
// end ; if LoadVariable ( BrownInDelta , 0 ) = 1 then
1160: LD_STRING BrownInDelta
1162: PPUSH
1163: LD_INT 0
1165: PPUSH
1166: CALL_OW 30
1170: PUSH
1171: LD_INT 1
1173: EQUAL
1174: IFFALSE 1252
// begin Brown := PrepareUnit ( Brown , true , mission_prefix_prev ) ;
1176: LD_ADDR_EXP 8
1180: PUSH
1181: LD_STRING Brown
1183: PPUSH
1184: LD_INT 1
1186: PPUSH
1187: LD_EXP 24
1191: PPUSH
1192: CALL 27124 0 3
1196: ST_TO_ADDR
// PlaceUnitXYR ( Brown , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1197: LD_EXP 8
1201: PPUSH
1202: LD_VAR 0 3
1206: PUSH
1207: LD_INT 1
1209: ARRAY
1210: PPUSH
1211: CALL_OW 250
1215: PPUSH
1216: LD_VAR 0 3
1220: PUSH
1221: LD_INT 1
1223: ARRAY
1224: PPUSH
1225: CALL_OW 251
1229: PPUSH
1230: LD_INT 5
1232: PPUSH
1233: LD_INT 0
1235: PPUSH
1236: CALL_OW 50
// SetClass ( Brown , 2 ) ;
1240: LD_EXP 8
1244: PPUSH
1245: LD_INT 2
1247: PPUSH
1248: CALL_OW 336
// end ; others := CreateCharacterSet ( othersInDelta ) ;
1252: LD_ADDR_EXP 11
1256: PUSH
1257: LD_STRING othersInDelta
1259: PPUSH
1260: CALL_OW 31
1264: ST_TO_ADDR
// for i in others do
1265: LD_ADDR_VAR 0 2
1269: PUSH
1270: LD_EXP 11
1274: PUSH
1275: FOR_IN
1276: IFFALSE 1323
// PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1278: LD_VAR 0 2
1282: PPUSH
1283: LD_VAR 0 3
1287: PUSH
1288: LD_INT 1
1290: ARRAY
1291: PPUSH
1292: CALL_OW 250
1296: PPUSH
1297: LD_VAR 0 3
1301: PUSH
1302: LD_INT 1
1304: ARRAY
1305: PPUSH
1306: CALL_OW 251
1310: PPUSH
1311: LD_INT 35
1313: PPUSH
1314: LD_INT 0
1316: PPUSH
1317: CALL_OW 50
1321: GO 1275
1323: POP
1324: POP
// apemans := CreateCharacterSet ( apeInDelta ) ;
1325: LD_ADDR_EXP 13
1329: PUSH
1330: LD_STRING apeInDelta
1332: PPUSH
1333: CALL_OW 31
1337: ST_TO_ADDR
// uc_nation := 0 ;
1338: LD_ADDR_OWVAR 21
1342: PUSH
1343: LD_INT 0
1345: ST_TO_ADDR
// if apemans > 5 then
1346: LD_EXP 13
1350: PUSH
1351: LD_INT 5
1353: GREATER
1354: IFFALSE 1449
// begin for i := 1 to 5 do
1356: LD_ADDR_VAR 0 2
1360: PUSH
1361: DOUBLE
1362: LD_INT 1
1364: DEC
1365: ST_TO_ADDR
1366: LD_INT 5
1368: PUSH
1369: FOR_TO
1370: IFFALSE 1445
// begin PlaceUnitXYR ( apemans [ i ] , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1372: LD_EXP 13
1376: PUSH
1377: LD_VAR 0 2
1381: ARRAY
1382: PPUSH
1383: LD_VAR 0 3
1387: PUSH
1388: LD_INT 1
1390: ARRAY
1391: PPUSH
1392: CALL_OW 250
1396: PPUSH
1397: LD_VAR 0 3
1401: PUSH
1402: LD_INT 1
1404: ARRAY
1405: PPUSH
1406: CALL_OW 251
1410: PPUSH
1411: LD_INT 50
1413: PPUSH
1414: LD_INT 0
1416: PPUSH
1417: CALL_OW 50
// yourApemans := yourApemans ^ apemans [ i ] ;
1421: LD_ADDR_EXP 14
1425: PUSH
1426: LD_EXP 14
1430: PUSH
1431: LD_EXP 13
1435: PUSH
1436: LD_VAR 0 2
1440: ARRAY
1441: ADD
1442: ST_TO_ADDR
// end ;
1443: GO 1369
1445: POP
1446: POP
// end else
1447: GO 1525
// begin for i in apemans do
1449: LD_ADDR_VAR 0 2
1453: PUSH
1454: LD_EXP 13
1458: PUSH
1459: FOR_IN
1460: IFFALSE 1523
// begin PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1462: LD_VAR 0 2
1466: PPUSH
1467: LD_VAR 0 3
1471: PUSH
1472: LD_INT 1
1474: ARRAY
1475: PPUSH
1476: CALL_OW 250
1480: PPUSH
1481: LD_VAR 0 3
1485: PUSH
1486: LD_INT 1
1488: ARRAY
1489: PPUSH
1490: CALL_OW 251
1494: PPUSH
1495: LD_INT 50
1497: PPUSH
1498: LD_INT 0
1500: PPUSH
1501: CALL_OW 50
// yourApemans := yourApemans ^ i ;
1505: LD_ADDR_EXP 14
1509: PUSH
1510: LD_EXP 14
1514: PUSH
1515: LD_VAR 0 2
1519: ADD
1520: ST_TO_ADDR
// end ;
1521: GO 1459
1523: POP
1524: POP
// end ; end ;
1525: LD_VAR 0 1
1529: RET
// export function LoadVehicles ; var i , j , veh , tmp , vehicles ; begin
1530: LD_INT 0
1532: PPUSH
1533: PPUSH
1534: PPUSH
1535: PPUSH
1536: PPUSH
1537: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1538: LD_ADDR_VAR 0 5
1542: PUSH
1543: LD_INT 22
1545: PUSH
1546: LD_INT 1
1548: PUSH
1549: EMPTY
1550: LIST
1551: LIST
1552: PUSH
1553: LD_INT 21
1555: PUSH
1556: LD_INT 3
1558: PUSH
1559: EMPTY
1560: LIST
1561: LIST
1562: PUSH
1563: LD_INT 30
1565: PUSH
1566: LD_INT 0
1568: PUSH
1569: EMPTY
1570: LIST
1571: LIST
1572: PUSH
1573: EMPTY
1574: LIST
1575: LIST
1576: LIST
1577: PPUSH
1578: CALL_OW 69
1582: ST_TO_ADDR
// uc_side := 1 ;
1583: LD_ADDR_OWVAR 20
1587: PUSH
1588: LD_INT 1
1590: ST_TO_ADDR
// vehicles := LoadVariable ( vehiclesInDelta , [ ] ) ;
1591: LD_ADDR_VAR 0 6
1595: PUSH
1596: LD_STRING vehiclesInDelta
1598: PPUSH
1599: EMPTY
1600: PPUSH
1601: CALL_OW 30
1605: ST_TO_ADDR
// for i := 1 to Count ( vehicles ) div 4 do
1606: LD_ADDR_VAR 0 2
1610: PUSH
1611: DOUBLE
1612: LD_INT 1
1614: DEC
1615: ST_TO_ADDR
1616: LD_VAR 0 6
1620: PPUSH
1621: CALL 29247 0 1
1625: PUSH
1626: LD_INT 4
1628: DIV
1629: PUSH
1630: FOR_TO
1631: IFFALSE 1788
// begin uc_nation := vehicles [ 1 ] ;
1633: LD_ADDR_OWVAR 21
1637: PUSH
1638: LD_VAR 0 6
1642: PUSH
1643: LD_INT 1
1645: ARRAY
1646: ST_TO_ADDR
// vc_chassis := vehicles [ 2 ] ;
1647: LD_ADDR_OWVAR 37
1651: PUSH
1652: LD_VAR 0 6
1656: PUSH
1657: LD_INT 2
1659: ARRAY
1660: ST_TO_ADDR
// vc_engine := vehicles [ 3 ] ;
1661: LD_ADDR_OWVAR 39
1665: PUSH
1666: LD_VAR 0 6
1670: PUSH
1671: LD_INT 3
1673: ARRAY
1674: ST_TO_ADDR
// vc_control := vehicles [ 4 ] ;
1675: LD_ADDR_OWVAR 38
1679: PUSH
1680: LD_VAR 0 6
1684: PUSH
1685: LD_INT 4
1687: ARRAY
1688: ST_TO_ADDR
// vc_weapon := vehicles [ 5 ] ;
1689: LD_ADDR_OWVAR 40
1693: PUSH
1694: LD_VAR 0 6
1698: PUSH
1699: LD_INT 5
1701: ARRAY
1702: ST_TO_ADDR
// veh := CreateVehicle ;
1703: LD_ADDR_VAR 0 4
1707: PUSH
1708: CALL_OW 45
1712: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1713: LD_VAR 0 4
1717: PPUSH
1718: LD_INT 0
1720: PPUSH
1721: LD_INT 5
1723: PPUSH
1724: CALL_OW 12
1728: PPUSH
1729: CALL_OW 233
// PlaceUnitArea ( veh , parkingArea , false ) ;
1733: LD_VAR 0 4
1737: PPUSH
1738: LD_INT 4
1740: PPUSH
1741: LD_INT 0
1743: PPUSH
1744: CALL_OW 49
// for j := 1 to 5 do
1748: LD_ADDR_VAR 0 3
1752: PUSH
1753: DOUBLE
1754: LD_INT 1
1756: DEC
1757: ST_TO_ADDR
1758: LD_INT 5
1760: PUSH
1761: FOR_TO
1762: IFFALSE 1784
// vehicles := Delete ( vehicles , 1 ) ;
1764: LD_ADDR_VAR 0 6
1768: PUSH
1769: LD_VAR 0 6
1773: PPUSH
1774: LD_INT 1
1776: PPUSH
1777: CALL_OW 3
1781: ST_TO_ADDR
1782: GO 1761
1784: POP
1785: POP
// end ;
1786: GO 1630
1788: POP
1789: POP
// end ;
1790: LD_VAR 0 1
1794: RET
// export function PrepareRandoms ; var i , un , tmp , filter ; begin
1795: LD_INT 0
1797: PPUSH
1798: PPUSH
1799: PPUSH
1800: PPUSH
1801: PPUSH
// uc_side := 1 ;
1802: LD_ADDR_OWVAR 20
1806: PUSH
1807: LD_INT 1
1809: ST_TO_ADDR
// uc_nation := 1 ;
1810: LD_ADDR_OWVAR 21
1814: PUSH
1815: LD_INT 1
1817: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1818: LD_ADDR_VAR 0 4
1822: PUSH
1823: LD_INT 22
1825: PUSH
1826: LD_INT 1
1828: PUSH
1829: EMPTY
1830: LIST
1831: LIST
1832: PUSH
1833: LD_INT 21
1835: PUSH
1836: LD_INT 3
1838: PUSH
1839: EMPTY
1840: LIST
1841: LIST
1842: PUSH
1843: LD_INT 30
1845: PUSH
1846: LD_INT 0
1848: PUSH
1849: EMPTY
1850: LIST
1851: LIST
1852: PUSH
1853: EMPTY
1854: LIST
1855: LIST
1856: LIST
1857: PPUSH
1858: CALL_OW 69
1862: ST_TO_ADDR
// deltaDoctor := ( FilterAllunits ( [ [ [ f_side , 1 ] , [ f_nation , nation_american ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] ) ;
1863: LD_ADDR_EXP 16
1867: PUSH
1868: LD_INT 22
1870: PUSH
1871: LD_INT 1
1873: PUSH
1874: EMPTY
1875: LIST
1876: LIST
1877: PUSH
1878: LD_INT 23
1880: PUSH
1881: LD_INT 1
1883: PUSH
1884: EMPTY
1885: LIST
1886: LIST
1887: PUSH
1888: LD_INT 25
1890: PUSH
1891: LD_INT 4
1893: PUSH
1894: EMPTY
1895: LIST
1896: LIST
1897: PUSH
1898: LD_INT 26
1900: PUSH
1901: LD_INT 1
1903: PUSH
1904: EMPTY
1905: LIST
1906: LIST
1907: PUSH
1908: EMPTY
1909: LIST
1910: LIST
1911: LIST
1912: LIST
1913: PUSH
1914: EMPTY
1915: LIST
1916: PPUSH
1917: CALL_OW 69
1921: PUSH
1922: LD_EXP 1
1926: PUSH
1927: LD_EXP 7
1931: PUSH
1932: LD_EXP 6
1936: PUSH
1937: LD_EXP 5
1941: PUSH
1942: LD_EXP 2
1946: PUSH
1947: LD_EXP 3
1951: PUSH
1952: LD_EXP 8
1956: PUSH
1957: EMPTY
1958: LIST
1959: LIST
1960: LIST
1961: LIST
1962: LIST
1963: LIST
1964: LIST
1965: DIFF
1966: ST_TO_ADDR
// if not deltaDoctor then
1967: LD_EXP 16
1971: NOT
1972: IFFALSE 2134
// begin filter := FilterAllunits ( [ [ [ f_side , 1 ] , [ f_nation , nation_american ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] ;
1974: LD_ADDR_VAR 0 5
1978: PUSH
1979: LD_INT 22
1981: PUSH
1982: LD_INT 1
1984: PUSH
1985: EMPTY
1986: LIST
1987: LIST
1988: PUSH
1989: LD_INT 23
1991: PUSH
1992: LD_INT 1
1994: PUSH
1995: EMPTY
1996: LIST
1997: LIST
1998: PUSH
1999: LD_INT 26
2001: PUSH
2002: LD_INT 1
2004: PUSH
2005: EMPTY
2006: LIST
2007: LIST
2008: PUSH
2009: EMPTY
2010: LIST
2011: LIST
2012: LIST
2013: PUSH
2014: EMPTY
2015: LIST
2016: PPUSH
2017: CALL_OW 69
2021: PUSH
2022: LD_EXP 1
2026: PUSH
2027: LD_EXP 7
2031: PUSH
2032: LD_EXP 6
2036: PUSH
2037: LD_EXP 5
2041: PUSH
2042: LD_EXP 2
2046: PUSH
2047: LD_EXP 3
2051: PUSH
2052: LD_EXP 8
2056: PUSH
2057: EMPTY
2058: LIST
2059: LIST
2060: LIST
2061: LIST
2062: LIST
2063: LIST
2064: LIST
2065: DIFF
2066: ST_TO_ADDR
// if filter then
2067: LD_VAR 0 5
2071: IFFALSE 2132
// for i in filter do
2073: LD_ADDR_VAR 0 2
2077: PUSH
2078: LD_VAR 0 5
2082: PUSH
2083: FOR_IN
2084: IFFALSE 2130
// if GetSkill ( i , 4 ) >= 4 then
2086: LD_VAR 0 2
2090: PPUSH
2091: LD_INT 4
2093: PPUSH
2094: CALL_OW 259
2098: PUSH
2099: LD_INT 4
2101: GREATEREQUAL
2102: IFFALSE 2128
// begin deltaDoctor := i ;
2104: LD_ADDR_EXP 16
2108: PUSH
2109: LD_VAR 0 2
2113: ST_TO_ADDR
// SetClass ( deltaDoctor , 4 ) ;
2114: LD_EXP 16
2118: PPUSH
2119: LD_INT 4
2121: PPUSH
2122: CALL_OW 336
// break ;
2126: GO 2130
// end ;
2128: GO 2083
2130: POP
2131: POP
// end else
2132: GO 2148
// deltaDoctor := deltaDoctor [ 1 ] ;
2134: LD_ADDR_EXP 16
2138: PUSH
2139: LD_EXP 16
2143: PUSH
2144: LD_INT 1
2146: ARRAY
2147: ST_TO_ADDR
// for i := 1 to 7 do
2148: LD_ADDR_VAR 0 2
2152: PUSH
2153: DOUBLE
2154: LD_INT 1
2156: DEC
2157: ST_TO_ADDR
2158: LD_INT 7
2160: PUSH
2161: FOR_TO
2162: IFFALSE 2299
// begin hc_gallery :=  ;
2164: LD_ADDR_OWVAR 33
2168: PUSH
2169: LD_STRING 
2171: ST_TO_ADDR
// hc_name :=  ;
2172: LD_ADDR_OWVAR 26
2176: PUSH
2177: LD_STRING 
2179: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 3 , 5 ) ) ;
2180: LD_INT 0
2182: PPUSH
2183: LD_INT 1
2185: PUSH
2186: LD_INT 2
2188: PUSH
2189: LD_INT 3
2191: PUSH
2192: LD_INT 4
2194: PUSH
2195: EMPTY
2196: LIST
2197: LIST
2198: LIST
2199: LIST
2200: PUSH
2201: LD_INT 1
2203: PPUSH
2204: LD_INT 4
2206: PPUSH
2207: CALL_OW 12
2211: ARRAY
2212: PPUSH
2213: LD_INT 3
2215: PPUSH
2216: LD_INT 5
2218: PPUSH
2219: CALL_OW 12
2223: PPUSH
2224: CALL_OW 380
// un := CreateHuman ;
2228: LD_ADDR_VAR 0 3
2232: PUSH
2233: CALL_OW 44
2237: ST_TO_ADDR
// randomsDelta := randomsDelta ^ un ;
2238: LD_ADDR_EXP 12
2242: PUSH
2243: LD_EXP 12
2247: PUSH
2248: LD_VAR 0 3
2252: ADD
2253: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
2254: LD_VAR 0 3
2258: PPUSH
2259: LD_VAR 0 4
2263: PUSH
2264: LD_INT 1
2266: ARRAY
2267: PPUSH
2268: CALL_OW 250
2272: PPUSH
2273: LD_VAR 0 4
2277: PUSH
2278: LD_INT 1
2280: ARRAY
2281: PPUSH
2282: CALL_OW 251
2286: PPUSH
2287: LD_INT 15
2289: PPUSH
2290: LD_INT 0
2292: PPUSH
2293: CALL_OW 50
// end ;
2297: GO 2161
2299: POP
2300: POP
// if deltaDoctor then
2301: LD_EXP 16
2305: IFFALSE 2309
// exit ;
2307: GO 2406
// hc_gallery := Dawkins ;
2309: LD_ADDR_OWVAR 33
2313: PUSH
2314: LD_STRING Dawkins
2316: ST_TO_ADDR
// hc_face_number := 1 ;
2317: LD_ADDR_OWVAR 34
2321: PUSH
2322: LD_INT 1
2324: ST_TO_ADDR
// hc_name := Dr. Adam Charles Dawkins ;
2325: LD_ADDR_OWVAR 26
2329: PUSH
2330: LD_STRING Dr. Adam Charles Dawkins
2332: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 5 ) ;
2333: LD_INT 1
2335: PPUSH
2336: LD_INT 4
2338: PPUSH
2339: LD_INT 5
2341: PPUSH
2342: CALL_OW 380
// deltaDoctor := CreateHuman ;
2346: LD_ADDR_EXP 16
2350: PUSH
2351: CALL_OW 44
2355: ST_TO_ADDR
// PlaceUnitXYR ( deltaDoctor , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
2356: LD_EXP 16
2360: PPUSH
2361: LD_VAR 0 4
2365: PUSH
2366: LD_INT 1
2368: ARRAY
2369: PPUSH
2370: CALL_OW 250
2374: PPUSH
2375: LD_VAR 0 4
2379: PUSH
2380: LD_INT 1
2382: ARRAY
2383: PPUSH
2384: CALL_OW 251
2388: PPUSH
2389: LD_INT 5
2391: PPUSH
2392: LD_INT 0
2394: PPUSH
2395: CALL_OW 50
// ToLua ( enableBioCharacter(BIO_ADAM) ) ;
2399: LD_STRING enableBioCharacter(BIO_ADAM)
2401: PPUSH
2402: CALL_OW 559
// end ; end_of_file
2406: LD_VAR 0 1
2410: RET
// export function PrepareDeltaBase ; var i , j , building , buildings , lab , tmp ; begin
2411: LD_INT 0
2413: PPUSH
2414: PPUSH
2415: PPUSH
2416: PPUSH
2417: PPUSH
2418: PPUSH
2419: PPUSH
// buildings := LoadVariable ( buildingsInDelta , [ ] ) ;
2420: LD_ADDR_VAR 0 5
2424: PUSH
2425: LD_STRING buildingsInDelta
2427: PPUSH
2428: EMPTY
2429: PPUSH
2430: CALL_OW 30
2434: ST_TO_ADDR
// SetResourceVisibility ( 68 , 40 , 1 ) ;
2435: LD_INT 68
2437: PPUSH
2438: LD_INT 40
2440: PPUSH
2441: LD_INT 1
2443: PPUSH
2444: CALL_OW 441
// uc_side := 1 ;
2448: LD_ADDR_OWVAR 20
2452: PUSH
2453: LD_INT 1
2455: ST_TO_ADDR
// uc_nation := 1 ;
2456: LD_ADDR_OWVAR 21
2460: PUSH
2461: LD_INT 1
2463: ST_TO_ADDR
// for i := 1 to buildings do
2464: LD_ADDR_VAR 0 2
2468: PUSH
2469: DOUBLE
2470: LD_INT 1
2472: DEC
2473: ST_TO_ADDR
2474: LD_VAR 0 5
2478: PUSH
2479: FOR_TO
2480: IFFALSE 2781
// begin InitBc ;
2482: CALL_OW 21
// bc_type := buildings [ i ] [ 1 ] ;
2486: LD_ADDR_OWVAR 42
2490: PUSH
2491: LD_VAR 0 5
2495: PUSH
2496: LD_VAR 0 2
2500: ARRAY
2501: PUSH
2502: LD_INT 1
2504: ARRAY
2505: ST_TO_ADDR
// bc_level := buildings [ i ] [ 2 ] ;
2506: LD_ADDR_OWVAR 43
2510: PUSH
2511: LD_VAR 0 5
2515: PUSH
2516: LD_VAR 0 2
2520: ARRAY
2521: PUSH
2522: LD_INT 2
2524: ARRAY
2525: ST_TO_ADDR
// if bc_type in [ b_lab , b_lab_half , b_lab_full ] then
2526: LD_OWVAR 42
2530: PUSH
2531: LD_INT 6
2533: PUSH
2534: LD_INT 7
2536: PUSH
2537: LD_INT 8
2539: PUSH
2540: EMPTY
2541: LIST
2542: LIST
2543: LIST
2544: IN
2545: IFFALSE 2669
// begin bc_kind1 := b_lab_basic ;
2547: LD_ADDR_OWVAR 44
2551: PUSH
2552: LD_INT 9
2554: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2555: LD_ADDR_OWVAR 45
2559: PUSH
2560: LD_INT 9
2562: ST_TO_ADDR
// if buildings [ i ] [ 6 ] then
2563: LD_VAR 0 5
2567: PUSH
2568: LD_VAR 0 2
2572: ARRAY
2573: PUSH
2574: LD_INT 6
2576: ARRAY
2577: IFFALSE 2645
// begin bc_kind1 := buildings [ i ] [ 6 ] ;
2579: LD_ADDR_OWVAR 44
2583: PUSH
2584: LD_VAR 0 5
2588: PUSH
2589: LD_VAR 0 2
2593: ARRAY
2594: PUSH
2595: LD_INT 6
2597: ARRAY
2598: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2599: LD_ADDR_OWVAR 45
2603: PUSH
2604: LD_INT 9
2606: ST_TO_ADDR
// if buildings [ i ] [ 7 ] then
2607: LD_VAR 0 5
2611: PUSH
2612: LD_VAR 0 2
2616: ARRAY
2617: PUSH
2618: LD_INT 7
2620: ARRAY
2621: IFFALSE 2643
// bc_kind2 := buildings [ i ] [ 7 ] ;
2623: LD_ADDR_OWVAR 45
2627: PUSH
2628: LD_VAR 0 5
2632: PUSH
2633: LD_VAR 0 2
2637: ARRAY
2638: PUSH
2639: LD_INT 7
2641: ARRAY
2642: ST_TO_ADDR
// end else
2643: GO 2669
// begin bc_type := b_lab ;
2645: LD_ADDR_OWVAR 42
2649: PUSH
2650: LD_INT 6
2652: ST_TO_ADDR
// bc_kind1 := b_lab_basic ;
2653: LD_ADDR_OWVAR 44
2657: PUSH
2658: LD_INT 9
2660: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2661: LD_ADDR_OWVAR 45
2665: PUSH
2666: LD_INT 9
2668: ST_TO_ADDR
// end ; end ; building := CreateAndPlaceBuildingXYD ( buildings [ i ] [ 3 ] , buildings [ i ] [ 4 ] , buildings [ i ] [ 5 ] ) ;
2669: LD_ADDR_VAR 0 4
2673: PUSH
2674: LD_VAR 0 5
2678: PUSH
2679: LD_VAR 0 2
2683: ARRAY
2684: PUSH
2685: LD_INT 3
2687: ARRAY
2688: PPUSH
2689: LD_VAR 0 5
2693: PUSH
2694: LD_VAR 0 2
2698: ARRAY
2699: PUSH
2700: LD_INT 4
2702: ARRAY
2703: PPUSH
2704: LD_VAR 0 5
2708: PUSH
2709: LD_VAR 0 2
2713: ARRAY
2714: PUSH
2715: LD_INT 5
2717: ARRAY
2718: PPUSH
2719: CALL_OW 47
2723: ST_TO_ADDR
// if GetBType ( building ) = b_bunker and buildings [ i ] [ 8 ] then
2724: LD_VAR 0 4
2728: PPUSH
2729: CALL_OW 266
2733: PUSH
2734: LD_INT 32
2736: EQUAL
2737: PUSH
2738: LD_VAR 0 5
2742: PUSH
2743: LD_VAR 0 2
2747: ARRAY
2748: PUSH
2749: LD_INT 8
2751: ARRAY
2752: AND
2753: IFFALSE 2779
// PlaceWeaponTurret ( building , buildings [ i ] [ 8 ] ) ;
2755: LD_VAR 0 4
2759: PPUSH
2760: LD_VAR 0 5
2764: PUSH
2765: LD_VAR 0 2
2769: ARRAY
2770: PUSH
2771: LD_INT 8
2773: ARRAY
2774: PPUSH
2775: CALL_OW 431
// end ;
2779: GO 2479
2781: POP
2782: POP
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
2783: LD_ADDR_VAR 0 6
2787: PUSH
2788: LD_INT 22
2790: PUSH
2791: LD_INT 1
2793: PUSH
2794: EMPTY
2795: LIST
2796: LIST
2797: PUSH
2798: LD_INT 2
2800: PUSH
2801: LD_INT 30
2803: PUSH
2804: LD_INT 6
2806: PUSH
2807: EMPTY
2808: LIST
2809: LIST
2810: PUSH
2811: LD_INT 30
2813: PUSH
2814: LD_INT 7
2816: PUSH
2817: EMPTY
2818: LIST
2819: LIST
2820: PUSH
2821: LD_INT 30
2823: PUSH
2824: LD_INT 8
2826: PUSH
2827: EMPTY
2828: LIST
2829: LIST
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: LIST
2835: LIST
2836: PUSH
2837: EMPTY
2838: LIST
2839: LIST
2840: PPUSH
2841: CALL_OW 69
2845: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) ;
2846: LD_ADDR_VAR 0 7
2850: PUSH
2851: LD_INT 22
2853: PUSH
2854: LD_INT 1
2856: PUSH
2857: EMPTY
2858: LIST
2859: LIST
2860: PUSH
2861: LD_INT 30
2863: PUSH
2864: LD_INT 0
2866: PUSH
2867: EMPTY
2868: LIST
2869: LIST
2870: PUSH
2871: EMPTY
2872: LIST
2873: LIST
2874: PPUSH
2875: CALL_OW 69
2879: ST_TO_ADDR
// if lab and tmp then
2880: LD_VAR 0 6
2884: PUSH
2885: LD_VAR 0 7
2889: AND
2890: IFFALSE 2900
// baseCorrect := 1 ;
2892: LD_ADDR_EXP 19
2896: PUSH
2897: LD_INT 1
2899: ST_TO_ADDR
// if not baseCorrect then
2900: LD_EXP 19
2904: NOT
2905: IFFALSE 3320
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
2907: LD_ADDR_VAR 0 2
2911: PUSH
2912: LD_INT 22
2914: PUSH
2915: LD_INT 1
2917: PUSH
2918: EMPTY
2919: LIST
2920: LIST
2921: PUSH
2922: LD_INT 21
2924: PUSH
2925: LD_INT 3
2927: PUSH
2928: EMPTY
2929: LIST
2930: LIST
2931: PUSH
2932: EMPTY
2933: LIST
2934: LIST
2935: PPUSH
2936: CALL_OW 69
2940: PUSH
2941: FOR_IN
2942: IFFALSE 2955
// RemoveUnit ( i ) ;
2944: LD_VAR 0 2
2948: PPUSH
2949: CALL_OW 64
2953: GO 2941
2955: POP
2956: POP
// uc_nation := 1 ;
2957: LD_ADDR_OWVAR 21
2961: PUSH
2962: LD_INT 1
2964: ST_TO_ADDR
// uc_side := 1 ;
2965: LD_ADDR_OWVAR 20
2969: PUSH
2970: LD_INT 1
2972: ST_TO_ADDR
// bc_level := 5 ;
2973: LD_ADDR_OWVAR 43
2977: PUSH
2978: LD_INT 5
2980: ST_TO_ADDR
// bc_type := b_depot ;
2981: LD_ADDR_OWVAR 42
2985: PUSH
2986: LD_INT 0
2988: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 50 , 22 , 0 ) ;
2989: LD_INT 50
2991: PPUSH
2992: LD_INT 22
2994: PPUSH
2995: LD_INT 0
2997: PPUSH
2998: CALL_OW 47
// bc_type = b_bunker ;
3002: LD_ADDR_OWVAR 42
3006: PUSH
3007: LD_INT 32
3009: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( 68 , 24 , 4 ) ;
3010: LD_ADDR_VAR 0 4
3014: PUSH
3015: LD_INT 68
3017: PPUSH
3018: LD_INT 24
3020: PPUSH
3021: LD_INT 4
3023: PPUSH
3024: CALL_OW 47
3028: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ rand ( 1 , 2 ) ] ) ;
3029: LD_VAR 0 4
3033: PPUSH
3034: LD_INT 4
3036: PUSH
3037: LD_INT 11
3039: PUSH
3040: EMPTY
3041: LIST
3042: LIST
3043: PUSH
3044: LD_INT 1
3046: PPUSH
3047: LD_INT 2
3049: PPUSH
3050: CALL_OW 12
3054: ARRAY
3055: PPUSH
3056: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 71 , 34 , 4 ) ;
3060: LD_ADDR_VAR 0 4
3064: PUSH
3065: LD_INT 71
3067: PPUSH
3068: LD_INT 34
3070: PPUSH
3071: LD_INT 4
3073: PPUSH
3074: CALL_OW 47
3078: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ rand ( 1 , 2 ) ] ) ;
3079: LD_VAR 0 4
3083: PPUSH
3084: LD_INT 4
3086: PUSH
3087: LD_INT 11
3089: PUSH
3090: EMPTY
3091: LIST
3092: LIST
3093: PUSH
3094: LD_INT 1
3096: PPUSH
3097: LD_INT 2
3099: PPUSH
3100: CALL_OW 12
3104: ARRAY
3105: PPUSH
3106: CALL_OW 431
// bc_type := b_breastwork ;
3110: LD_ADDR_OWVAR 42
3114: PUSH
3115: LD_INT 31
3117: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 51 , 7 , 3 ) ;
3118: LD_INT 51
3120: PPUSH
3121: LD_INT 7
3123: PPUSH
3124: LD_INT 3
3126: PPUSH
3127: CALL_OW 47
// bc_type := b_oil_mine ;
3131: LD_ADDR_OWVAR 42
3135: PUSH
3136: LD_INT 29
3138: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 68 , 40 , 1 ) ;
3139: LD_INT 68
3141: PPUSH
3142: LD_INT 40
3144: PPUSH
3145: LD_INT 1
3147: PPUSH
3148: CALL_OW 47
// bc_type := b_factory ;
3152: LD_ADDR_OWVAR 42
3156: PUSH
3157: LD_INT 3
3159: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 20 , 2 ) ;
3160: LD_INT 38
3162: PPUSH
3163: LD_INT 20
3165: PPUSH
3166: LD_INT 2
3168: PPUSH
3169: CALL_OW 47
// bc_type := b_ext_noncombat ;
3173: LD_ADDR_OWVAR 42
3177: PUSH
3178: LD_INT 19
3180: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 24 , 2 ) ;
3181: LD_INT 38
3183: PPUSH
3184: LD_INT 24
3186: PPUSH
3187: LD_INT 2
3189: PPUSH
3190: CALL_OW 47
// bc_type := b_ext_radar ;
3194: LD_ADDR_OWVAR 42
3198: PUSH
3199: LD_INT 20
3201: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 35 , 20 , 1 ) ;
3202: LD_INT 35
3204: PPUSH
3205: LD_INT 20
3207: PPUSH
3208: LD_INT 1
3210: PPUSH
3211: CALL_OW 47
// bc_type := b_armoury ;
3215: LD_ADDR_OWVAR 42
3219: PUSH
3220: LD_INT 4
3222: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 33 , 28 , 1 ) ;
3223: LD_INT 33
3225: PPUSH
3226: LD_INT 28
3228: PPUSH
3229: LD_INT 1
3231: PPUSH
3232: CALL_OW 47
// bc_type := b_solar_power ;
3236: LD_ADDR_OWVAR 42
3240: PUSH
3241: LD_INT 27
3243: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 46 , 12 , 1 ) ;
3244: LD_INT 46
3246: PPUSH
3247: LD_INT 12
3249: PPUSH
3250: LD_INT 1
3252: PPUSH
3253: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 48 , 11 , 2 ) ;
3257: LD_INT 48
3259: PPUSH
3260: LD_INT 11
3262: PPUSH
3263: LD_INT 2
3265: PPUSH
3266: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 35 , 12 , 3 ) ;
3270: LD_INT 35
3272: PPUSH
3273: LD_INT 12
3275: PPUSH
3276: LD_INT 3
3278: PPUSH
3279: CALL_OW 47
// bc_type := b_lab_half ;
3283: LD_ADDR_OWVAR 42
3287: PUSH
3288: LD_INT 7
3290: ST_TO_ADDR
// bc_kind1 := b_lab_opto ;
3291: LD_ADDR_OWVAR 44
3295: PUSH
3296: LD_INT 15
3298: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
3299: LD_ADDR_OWVAR 45
3303: PUSH
3304: LD_INT 9
3306: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 42 , 15 , 2 ) ;
3307: LD_INT 42
3309: PPUSH
3310: LD_INT 15
3312: PPUSH
3313: LD_INT 2
3315: PPUSH
3316: CALL_OW 47
// end ; end ; end_of_file
3320: LD_VAR 0 1
3324: RET
// export function Action ; var i , j , tmp ; begin
3325: LD_INT 0
3327: PPUSH
3328: PPUSH
3329: PPUSH
3330: PPUSH
// InGameOn ;
3331: CALL_OW 8
// if lab then
3335: LD_EXP 21
3339: IFFALSE 3356
// CenterNowOnUnits ( lab [ 1 ] ) else
3341: LD_EXP 21
3345: PUSH
3346: LD_INT 1
3348: ARRAY
3349: PPUSH
3350: CALL_OW 87
3354: GO 3365
// CenterOnUnits ( JMM ) ;
3356: LD_EXP 1
3360: PPUSH
3361: CALL_OW 85
// if IsOK ( Denis ) then
3365: LD_EXP 3
3369: PPUSH
3370: CALL_OW 302
3374: IFFALSE 3402
// begin SetTech ( tech_radar , 1 , state_researched ) ;
3376: LD_INT 6
3378: PPUSH
3379: LD_INT 1
3381: PPUSH
3382: LD_INT 2
3384: PPUSH
3385: CALL_OW 322
// SetRestrict ( b_ext_radar , 1 , true ) ;
3389: LD_INT 20
3391: PPUSH
3392: LD_INT 1
3394: PPUSH
3395: LD_INT 1
3397: PPUSH
3398: CALL_OW 324
// end ; CenterNowOnUnits ( JMM ) ;
3402: LD_EXP 1
3406: PPUSH
3407: CALL_OW 87
// ComTurnUnit ( JMM , DeltaDoctor ) ;
3411: LD_EXP 1
3415: PPUSH
3416: LD_EXP 16
3420: PPUSH
3421: CALL_OW 119
// repeat wait ( 0 0$1 ) ;
3425: LD_INT 35
3427: PPUSH
3428: CALL_OW 67
// ComMoveUnit ( DeltaDoctor , JMM ) ;
3432: LD_EXP 16
3436: PPUSH
3437: LD_EXP 1
3441: PPUSH
3442: CALL_OW 112
// until GetDistUnits ( JMM , DeltaDoctor ) < 5 ;
3446: LD_EXP 1
3450: PPUSH
3451: LD_EXP 16
3455: PPUSH
3456: CALL_OW 296
3460: PUSH
3461: LD_INT 5
3463: LESS
3464: IFFALSE 3425
// ComTurnUnit ( DeltaDoctor , JMM ) ;
3466: LD_EXP 16
3470: PPUSH
3471: LD_EXP 1
3475: PPUSH
3476: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
3480: LD_EXP 1
3484: PPUSH
3485: LD_STRING D1-JMM-1
3487: PPUSH
3488: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-1 ) ;
3492: LD_EXP 16
3496: PPUSH
3497: LD_STRING D1-Sci-1
3499: PPUSH
3500: CALL_OW 88
// ComEnterUnit ( [ JMM , DeltaDoctor , Denis ] , lab [ 1 ] ) ;
3504: LD_EXP 1
3508: PUSH
3509: LD_EXP 16
3513: PUSH
3514: LD_EXP 3
3518: PUSH
3519: EMPTY
3520: LIST
3521: LIST
3522: LIST
3523: PPUSH
3524: LD_EXP 21
3528: PUSH
3529: LD_INT 1
3531: ARRAY
3532: PPUSH
3533: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
3537: LD_INT 35
3539: PPUSH
3540: CALL_OW 67
// until IsInUnit ( JMM ) and IsInUnit ( DeltaDoctor ) ;
3544: LD_EXP 1
3548: PPUSH
3549: CALL_OW 310
3553: PUSH
3554: LD_EXP 16
3558: PPUSH
3559: CALL_OW 310
3563: AND
3564: IFFALSE 3537
// CenterNowOnUnits ( lab [ 1 ] ) ;
3566: LD_EXP 21
3570: PUSH
3571: LD_INT 1
3573: ARRAY
3574: PPUSH
3575: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
3579: LD_EXP 1
3583: PPUSH
3584: LD_STRING D1-JMM-2
3586: PPUSH
3587: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-2 ) ;
3591: LD_EXP 16
3595: PPUSH
3596: LD_STRING D1-Sci-2
3598: PPUSH
3599: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
3603: LD_EXP 1
3607: PPUSH
3608: LD_STRING D1-JMM-3
3610: PPUSH
3611: CALL_OW 88
// if IsOK ( Denis ) then
3615: LD_EXP 3
3619: PPUSH
3620: CALL_OW 302
3624: IFFALSE 3640
// Say ( DeltaDoctor , D1-Sci-3 ) else
3626: LD_EXP 16
3630: PPUSH
3631: LD_STRING D1-Sci-3
3633: PPUSH
3634: CALL_OW 88
3638: GO 3652
// Say ( DeltaDoctor , D1-Sci-3a ) ;
3640: LD_EXP 16
3644: PPUSH
3645: LD_STRING D1-Sci-3a
3647: PPUSH
3648: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
3652: LD_EXP 1
3656: PPUSH
3657: LD_STRING D1-JMM-4
3659: PPUSH
3660: CALL_OW 88
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
3664: LD_ADDR_VAR 0 4
3668: PUSH
3669: LD_INT 22
3671: PUSH
3672: LD_INT 1
3674: PUSH
3675: EMPTY
3676: LIST
3677: LIST
3678: PUSH
3679: LD_INT 25
3681: PUSH
3682: LD_INT 4
3684: PUSH
3685: EMPTY
3686: LIST
3687: LIST
3688: PUSH
3689: LD_INT 3
3691: PUSH
3692: LD_INT 54
3694: PUSH
3695: EMPTY
3696: LIST
3697: PUSH
3698: EMPTY
3699: LIST
3700: LIST
3701: PUSH
3702: EMPTY
3703: LIST
3704: LIST
3705: LIST
3706: PPUSH
3707: CALL_OW 69
3711: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 0 ] ) do
3712: LD_ADDR_VAR 0 2
3716: PUSH
3717: LD_INT 22
3719: PUSH
3720: LD_INT 0
3722: PUSH
3723: EMPTY
3724: LIST
3725: LIST
3726: PPUSH
3727: CALL_OW 69
3731: PUSH
3732: FOR_IN
3733: IFFALSE 3783
// for j in tmp do
3735: LD_ADDR_VAR 0 3
3739: PUSH
3740: LD_VAR 0 4
3744: PUSH
3745: FOR_IN
3746: IFFALSE 3779
// AddComTameXY ( j , GetX ( i ) , GetY ( i ) ) ;
3748: LD_VAR 0 3
3752: PPUSH
3753: LD_VAR 0 2
3757: PPUSH
3758: CALL_OW 250
3762: PPUSH
3763: LD_VAR 0 2
3767: PPUSH
3768: CALL_OW 251
3772: PPUSH
3773: CALL_OW 191
3777: GO 3745
3779: POP
3780: POP
3781: GO 3732
3783: POP
3784: POP
// Say ( DeltaDoctor , D1-Sci-4 ) ;
3785: LD_EXP 16
3789: PPUSH
3790: LD_STRING D1-Sci-4
3792: PPUSH
3793: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
3797: LD_EXP 1
3801: PPUSH
3802: LD_STRING D1-JMM-5
3804: PPUSH
3805: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-5 ) ;
3809: LD_EXP 16
3813: PPUSH
3814: LD_STRING D1-Sci-5
3816: PPUSH
3817: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
3821: LD_EXP 1
3825: PPUSH
3826: LD_STRING D1-JMM-6
3828: PPUSH
3829: CALL_OW 88
// SayRadio ( Harisson , D1-Har-6 ) ;
3833: LD_EXP 17
3837: PPUSH
3838: LD_STRING D1-Har-6
3840: PPUSH
3841: CALL_OW 94
// Say ( JMM , D1-JMM-7 ) ;
3845: LD_EXP 1
3849: PPUSH
3850: LD_STRING D1-JMM-7
3852: PPUSH
3853: CALL_OW 88
// SayRadio ( Harisson , D1-Har-7 ) ;
3857: LD_EXP 17
3861: PPUSH
3862: LD_STRING D1-Har-7
3864: PPUSH
3865: CALL_OW 94
// if IsOK ( Denis ) then
3869: LD_EXP 3
3873: PPUSH
3874: CALL_OW 302
3878: IFFALSE 3892
// Say ( JMM , D1-JMM-8 ) ;
3880: LD_EXP 1
3884: PPUSH
3885: LD_STRING D1-JMM-8
3887: PPUSH
3888: CALL_OW 88
// Say ( JMM , D1-JMM-8a ) ;
3892: LD_EXP 1
3896: PPUSH
3897: LD_STRING D1-JMM-8a
3899: PPUSH
3900: CALL_OW 88
// SayRadio ( Harisson , D1-Har-8 ) ;
3904: LD_EXP 17
3908: PPUSH
3909: LD_STRING D1-Har-8
3911: PPUSH
3912: CALL_OW 94
// Say ( JMM , D1-JMM-9 ) ;
3916: LD_EXP 1
3920: PPUSH
3921: LD_STRING D1-JMM-9
3923: PPUSH
3924: CALL_OW 88
// SayRadio ( Harisson , D1-Har-9 ) ;
3928: LD_EXP 17
3932: PPUSH
3933: LD_STRING D1-Har-9
3935: PPUSH
3936: CALL_OW 94
// Say ( JMM , D1-JMM-10 ) ;
3940: LD_EXP 1
3944: PPUSH
3945: LD_STRING D1-JMM-10
3947: PPUSH
3948: CALL_OW 88
// if IsOK ( Denis ) then
3952: LD_EXP 3
3956: PPUSH
3957: CALL_OW 302
3961: IFFALSE 3975
// Say ( JMM , D1-JMM-10a ) ;
3963: LD_EXP 1
3967: PPUSH
3968: LD_STRING D1-JMM-10a
3970: PPUSH
3971: CALL_OW 88
// SelectDeltaCharacters ;
3975: CALL 4459 0 0
// SetResourceType ( GetBase ( lab [ 1 ] ) , 1 , 150 ) ;
3979: LD_EXP 21
3983: PUSH
3984: LD_INT 1
3986: ARRAY
3987: PPUSH
3988: CALL_OW 274
3992: PPUSH
3993: LD_INT 1
3995: PPUSH
3996: LD_INT 150
3998: PPUSH
3999: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) then
4003: LD_INT 22
4005: PUSH
4006: LD_INT 1
4008: PUSH
4009: EMPTY
4010: LIST
4011: LIST
4012: PUSH
4013: LD_INT 30
4015: PUSH
4016: LD_INT 29
4018: PUSH
4019: EMPTY
4020: LIST
4021: LIST
4022: PUSH
4023: EMPTY
4024: LIST
4025: LIST
4026: PPUSH
4027: CALL_OW 69
4031: IFFALSE 4057
// SetResourceType ( GetBase ( lab [ 1 ] ) , 2 , 300 ) ;
4033: LD_EXP 21
4037: PUSH
4038: LD_INT 1
4040: ARRAY
4041: PPUSH
4042: CALL_OW 274
4046: PPUSH
4047: LD_INT 2
4049: PPUSH
4050: LD_INT 300
4052: PPUSH
4053: CALL_OW 277
// InGameOff ;
4057: CALL_OW 9
// Query ( Q1 ) ;
4061: LD_STRING Q1
4063: PPUSH
4064: CALL_OW 97
// SetAreaMapShow ( ExitArea , 1 ) ;
4068: LD_INT 3
4070: PPUSH
4071: LD_INT 1
4073: PPUSH
4074: CALL_OW 424
// if IsInUnit ( JMM ) then
4078: LD_EXP 1
4082: PPUSH
4083: CALL_OW 310
4087: IFFALSE 4098
// ComExitBuilding ( JMM ) ;
4089: LD_EXP 1
4093: PPUSH
4094: CALL_OW 122
// end ;
4098: LD_VAR 0 1
4102: RET
// every 0 0$1 trigger FilterUnitsExceptArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do var i , cargoType ;
4103: LD_INT 3
4105: PPUSH
4106: LD_INT 22
4108: PUSH
4109: LD_INT 1
4111: PUSH
4112: EMPTY
4113: LIST
4114: LIST
4115: PUSH
4116: LD_INT 21
4118: PUSH
4119: LD_INT 1
4121: PUSH
4122: EMPTY
4123: LIST
4124: LIST
4125: PUSH
4126: EMPTY
4127: LIST
4128: LIST
4129: PPUSH
4130: CALL_OW 71
4134: PUSH
4135: LD_INT 0
4137: EQUAL
4138: IFFALSE 4456
4140: GO 4142
4142: DISABLE
4143: LD_INT 0
4145: PPUSH
4146: PPUSH
// begin SaveDeltaCharacters ;
4147: CALL 4831 0 0
// if FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) then
4151: LD_INT 3
4153: PPUSH
4154: LD_INT 21
4156: PUSH
4157: LD_INT 2
4159: PUSH
4160: EMPTY
4161: LIST
4162: LIST
4163: PUSH
4164: LD_INT 3
4166: PUSH
4167: LD_INT 58
4169: PUSH
4170: EMPTY
4171: LIST
4172: PUSH
4173: EMPTY
4174: LIST
4175: LIST
4176: PUSH
4177: EMPTY
4178: LIST
4179: LIST
4180: PPUSH
4181: CALL_OW 70
4185: IFFALSE 4442
// begin for i in FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) do
4187: LD_ADDR_VAR 0 1
4191: PUSH
4192: LD_INT 3
4194: PPUSH
4195: LD_INT 21
4197: PUSH
4198: LD_INT 2
4200: PUSH
4201: EMPTY
4202: LIST
4203: LIST
4204: PUSH
4205: LD_INT 3
4207: PUSH
4208: LD_INT 58
4210: PUSH
4211: EMPTY
4212: LIST
4213: PUSH
4214: EMPTY
4215: LIST
4216: LIST
4217: PUSH
4218: EMPTY
4219: LIST
4220: LIST
4221: PPUSH
4222: CALL_OW 70
4226: PUSH
4227: FOR_IN
4228: IFFALSE 4440
// begin cargoType := GetCargoType ( i ) ;
4230: LD_ADDR_VAR 0 2
4234: PUSH
4235: LD_VAR 0 1
4239: PPUSH
4240: CALL_OW 288
4244: ST_TO_ADDR
// if GetWeapon ( i ) = us_cargo_bay then
4245: LD_VAR 0 1
4249: PPUSH
4250: CALL_OW 264
4254: PUSH
4255: LD_INT 12
4257: EQUAL
4258: IFFALSE 4355
// yourVehicles := yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , cargoType , GetCargo ( i , cargoType ) ] ] else
4260: LD_ADDR_EXP 15
4264: PUSH
4265: LD_EXP 15
4269: PUSH
4270: LD_VAR 0 1
4274: PPUSH
4275: CALL_OW 248
4279: PUSH
4280: LD_VAR 0 1
4284: PPUSH
4285: CALL_OW 265
4289: PUSH
4290: LD_VAR 0 1
4294: PPUSH
4295: CALL_OW 262
4299: PUSH
4300: LD_VAR 0 1
4304: PPUSH
4305: CALL_OW 263
4309: PUSH
4310: LD_VAR 0 1
4314: PPUSH
4315: CALL_OW 264
4319: PUSH
4320: LD_VAR 0 2
4324: PUSH
4325: LD_VAR 0 1
4329: PPUSH
4330: LD_VAR 0 2
4334: PPUSH
4335: CALL_OW 289
4339: PUSH
4340: EMPTY
4341: LIST
4342: LIST
4343: LIST
4344: LIST
4345: LIST
4346: LIST
4347: LIST
4348: PUSH
4349: EMPTY
4350: LIST
4351: ADD
4352: ST_TO_ADDR
4353: GO 4426
// yourVehicles := yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ] ;
4355: LD_ADDR_EXP 15
4359: PUSH
4360: LD_EXP 15
4364: PUSH
4365: LD_VAR 0 1
4369: PPUSH
4370: CALL_OW 248
4374: PUSH
4375: LD_VAR 0 1
4379: PPUSH
4380: CALL_OW 265
4384: PUSH
4385: LD_VAR 0 1
4389: PPUSH
4390: CALL_OW 262
4394: PUSH
4395: LD_VAR 0 1
4399: PPUSH
4400: CALL_OW 263
4404: PUSH
4405: LD_VAR 0 1
4409: PPUSH
4410: CALL_OW 264
4414: PUSH
4415: EMPTY
4416: LIST
4417: LIST
4418: LIST
4419: LIST
4420: LIST
4421: PUSH
4422: EMPTY
4423: LIST
4424: ADD
4425: ST_TO_ADDR
// SaveVariable ( yourVehicles , 06_VehiclesIn06_1 ) ;
4426: LD_EXP 15
4430: PPUSH
4431: LD_STRING 06_VehiclesIn06_1
4433: PPUSH
4434: CALL_OW 39
// end ;
4438: GO 4227
4440: POP
4441: POP
// end ; SaveCargos ;
4442: CALL 5611 0 0
// ChangeMap ( 6 , %_cont ) ;
4446: LD_INT 6
4448: PPUSH
4449: LD_STRING %_cont
4451: PPUSH
4452: CALL_OW 340
// end ; end_of_file
4456: PPOPN 2
4458: END
// export function SelectDeltaCharacters ; var i , yourPeople ; begin
4459: LD_INT 0
4461: PPUSH
4462: PPUSH
4463: PPUSH
// selectedPeople := [ ] ;
4464: LD_ADDR_EXP 18
4468: PUSH
4469: EMPTY
4470: ST_TO_ADDR
// yourPeople := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , DeltaDoctor , Denis ] ;
4471: LD_ADDR_VAR 0 3
4475: PUSH
4476: LD_INT 22
4478: PUSH
4479: LD_INT 1
4481: PUSH
4482: EMPTY
4483: LIST
4484: LIST
4485: PUSH
4486: LD_INT 21
4488: PUSH
4489: LD_INT 1
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: PUSH
4496: LD_INT 2
4498: PUSH
4499: LD_INT 25
4501: PUSH
4502: LD_INT 1
4504: PUSH
4505: EMPTY
4506: LIST
4507: LIST
4508: PUSH
4509: LD_INT 25
4511: PUSH
4512: LD_INT 2
4514: PUSH
4515: EMPTY
4516: LIST
4517: LIST
4518: PUSH
4519: LD_INT 25
4521: PUSH
4522: LD_INT 3
4524: PUSH
4525: EMPTY
4526: LIST
4527: LIST
4528: PUSH
4529: LD_INT 25
4531: PUSH
4532: LD_INT 4
4534: PUSH
4535: EMPTY
4536: LIST
4537: LIST
4538: PUSH
4539: EMPTY
4540: LIST
4541: LIST
4542: LIST
4543: LIST
4544: LIST
4545: PUSH
4546: EMPTY
4547: LIST
4548: LIST
4549: LIST
4550: PPUSH
4551: CALL_OW 69
4555: PUSH
4556: LD_EXP 1
4560: PUSH
4561: LD_EXP 16
4565: PUSH
4566: LD_EXP 3
4570: PUSH
4571: EMPTY
4572: LIST
4573: LIST
4574: LIST
4575: DIFF
4576: ST_TO_ADDR
// selectedPeople := CharacterSelection ( text , 5 , 5 , [ sel_change_class , JMM , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ yourPeople ^ [ sel_dont_change_class , sel_not_changeable , Denis , DeltaDoctor ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
4577: LD_ADDR_EXP 18
4581: PUSH
4582: LD_STRING text
4584: PPUSH
4585: LD_INT 5
4587: PPUSH
4588: LD_INT 5
4590: PPUSH
4591: LD_INT -5
4593: PUSH
4594: LD_EXP 1
4598: PUSH
4599: LD_INT -6
4601: PUSH
4602: LD_INT -2
4604: PUSH
4605: LD_INT -3
4607: PUSH
4608: LD_INT -5
4610: PUSH
4611: EMPTY
4612: LIST
4613: LIST
4614: LIST
4615: LIST
4616: LIST
4617: LIST
4618: PUSH
4619: LD_VAR 0 3
4623: ADD
4624: PUSH
4625: LD_INT -6
4627: PUSH
4628: LD_INT -4
4630: PUSH
4631: LD_EXP 3
4635: PUSH
4636: LD_EXP 16
4640: PUSH
4641: EMPTY
4642: LIST
4643: LIST
4644: LIST
4645: LIST
4646: ADD
4647: PPUSH
4648: LD_INT 1
4650: PUSH
4651: LD_INT 3
4653: PUSH
4654: LD_INT 2
4656: PUSH
4657: LD_INT 1
4659: PUSH
4660: EMPTY
4661: LIST
4662: LIST
4663: PUSH
4664: LD_INT 4
4666: PUSH
4667: EMPTY
4668: LIST
4669: LIST
4670: LIST
4671: LIST
4672: PPUSH
4673: CALL_OW 42
4677: ST_TO_ADDR
// ComStop ( selectedPeople ) ;
4678: LD_EXP 18
4682: PPUSH
4683: CALL_OW 141
// SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 4 ) ;
4687: LD_INT 22
4689: PUSH
4690: LD_INT 1
4692: PUSH
4693: EMPTY
4694: LIST
4695: LIST
4696: PUSH
4697: LD_INT 21
4699: PUSH
4700: LD_INT 1
4702: PUSH
4703: EMPTY
4704: LIST
4705: LIST
4706: PUSH
4707: EMPTY
4708: LIST
4709: LIST
4710: PPUSH
4711: CALL_OW 69
4715: PPUSH
4716: LD_INT 4
4718: PPUSH
4719: CALL_OW 235
// for i in selectedPeople do
4723: LD_ADDR_VAR 0 2
4727: PUSH
4728: LD_EXP 18
4732: PUSH
4733: FOR_IN
4734: IFFALSE 4750
// SetSide ( i , 1 ) ;
4736: LD_VAR 0 2
4740: PPUSH
4741: LD_INT 1
4743: PPUSH
4744: CALL_OW 235
4748: GO 4733
4750: POP
4751: POP
// for i in yourApemans do
4752: LD_ADDR_VAR 0 2
4756: PUSH
4757: LD_EXP 14
4761: PUSH
4762: FOR_IN
4763: IFFALSE 4779
// SetSide ( i , 1 ) ;
4765: LD_VAR 0 2
4769: PPUSH
4770: LD_INT 1
4772: PPUSH
4773: CALL_OW 235
4777: GO 4762
4779: POP
4780: POP
// if Mike then
4781: LD_EXP 10
4785: IFFALSE 4799
// SetSide ( Mike , 1 ) ;
4787: LD_EXP 10
4791: PPUSH
4792: LD_INT 1
4794: PPUSH
4795: CALL_OW 235
// SetSide ( JMM , 1 ) ;
4799: LD_EXP 1
4803: PPUSH
4804: LD_INT 1
4806: PPUSH
4807: CALL_OW 235
// SetSkill ( yourApemans , 2 , 3 ) ;
4811: LD_EXP 14
4815: PPUSH
4816: LD_INT 2
4818: PPUSH
4819: LD_INT 3
4821: PPUSH
4822: CALL_OW 237
// end ;
4826: LD_VAR 0 1
4830: RET
// export function SaveDeltaCharacters ; begin
4831: LD_INT 0
4833: PPUSH
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
4834: LD_EXP 1
4838: PPUSH
4839: LD_EXP 23
4843: PUSH
4844: LD_STRING JMM
4846: STR
4847: PPUSH
4848: CALL_OW 38
// SaveCharacters ( DeltaDoctor , DeltaDoctor ) ;
4852: LD_EXP 16
4856: PPUSH
4857: LD_STRING DeltaDoctor
4859: PPUSH
4860: CALL_OW 38
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
4864: LD_EXP 3
4868: PPUSH
4869: LD_EXP 23
4873: PUSH
4874: LD_STRING Denis
4876: STR
4877: PPUSH
4878: CALL_OW 38
// if Lisa in selectedPeople then
4882: LD_EXP 4
4886: PUSH
4887: LD_EXP 18
4891: IN
4892: IFFALSE 4924
// begin SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
4894: LD_EXP 4
4898: PPUSH
4899: LD_EXP 23
4903: PUSH
4904: LD_STRING Lisa
4906: STR
4907: PPUSH
4908: CALL_OW 38
// SaveVariable ( 1 , LisaIn06 ) ;
4912: LD_INT 1
4914: PPUSH
4915: LD_STRING LisaIn06
4917: PPUSH
4918: CALL_OW 39
// end else
4922: GO 4945
// if IsOk ( Lisa ) then
4924: LD_EXP 4
4928: PPUSH
4929: CALL_OW 302
4933: IFFALSE 4945
// SaveVariable ( 1 , LisaStayInDelta ) ;
4935: LD_INT 1
4937: PPUSH
4938: LD_STRING LisaStayInDelta
4940: PPUSH
4941: CALL_OW 39
// if Bobby in selectedPeople then
4945: LD_EXP 6
4949: PUSH
4950: LD_EXP 18
4954: IN
4955: IFFALSE 4987
// begin SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
4957: LD_EXP 6
4961: PPUSH
4962: LD_EXP 23
4966: PUSH
4967: LD_STRING Bobby
4969: STR
4970: PPUSH
4971: CALL_OW 38
// SaveVariable ( 1 , BobbyIn06 ) ;
4975: LD_INT 1
4977: PPUSH
4978: LD_STRING BobbyIn06
4980: PPUSH
4981: CALL_OW 39
// end else
4985: GO 5008
// if IsOk ( Bobby ) then
4987: LD_EXP 6
4991: PPUSH
4992: CALL_OW 302
4996: IFFALSE 5008
// SaveVariable ( 1 , BobbyStayInDelta ) ;
4998: LD_INT 1
5000: PPUSH
5001: LD_STRING BobbyStayInDelta
5003: PPUSH
5004: CALL_OW 39
// if Cyrus in selectedPeople then
5008: LD_EXP 7
5012: PUSH
5013: LD_EXP 18
5017: IN
5018: IFFALSE 5050
// begin SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
5020: LD_EXP 7
5024: PPUSH
5025: LD_EXP 23
5029: PUSH
5030: LD_STRING Cyrus
5032: STR
5033: PPUSH
5034: CALL_OW 38
// SaveVariable ( 1 , CyrusIn06 ) ;
5038: LD_INT 1
5040: PPUSH
5041: LD_STRING CyrusIn06
5043: PPUSH
5044: CALL_OW 39
// end else
5048: GO 5071
// if IsOk ( Cyrus ) then
5050: LD_EXP 7
5054: PPUSH
5055: CALL_OW 302
5059: IFFALSE 5071
// SaveVariable ( 1 , CyrusStayInDelta ) ;
5061: LD_INT 1
5063: PPUSH
5064: LD_STRING CyrusStayInDelta
5066: PPUSH
5067: CALL_OW 39
// if Frank in selectedPeople then
5071: LD_EXP 5
5075: PUSH
5076: LD_EXP 18
5080: IN
5081: IFFALSE 5113
// begin SaveCharacters ( Frank , mission_prefix & Frank ) ;
5083: LD_EXP 5
5087: PPUSH
5088: LD_EXP 23
5092: PUSH
5093: LD_STRING Frank
5095: STR
5096: PPUSH
5097: CALL_OW 38
// SaveVariable ( 1 , FrankIn06 ) ;
5101: LD_INT 1
5103: PPUSH
5104: LD_STRING FrankIn06
5106: PPUSH
5107: CALL_OW 39
// end else
5111: GO 5134
// if IsOk ( Frank ) then
5113: LD_EXP 5
5117: PPUSH
5118: CALL_OW 302
5122: IFFALSE 5134
// SaveVariable ( 1 , FrankStayInDelta ) ;
5124: LD_INT 1
5126: PPUSH
5127: LD_STRING FrankStayInDelta
5129: PPUSH
5130: CALL_OW 39
// if Brown in selectedPeople then
5134: LD_EXP 8
5138: PUSH
5139: LD_EXP 18
5143: IN
5144: IFFALSE 5176
// begin SaveCharacters ( Brown , mission_prefix & Brown ) ;
5146: LD_EXP 8
5150: PPUSH
5151: LD_EXP 23
5155: PUSH
5156: LD_STRING Brown
5158: STR
5159: PPUSH
5160: CALL_OW 38
// SaveVariable ( 1 , BrownIn06 ) ;
5164: LD_INT 1
5166: PPUSH
5167: LD_STRING BrownIn06
5169: PPUSH
5170: CALL_OW 39
// end else
5174: GO 5197
// if IsOk ( Brown ) then
5176: LD_EXP 8
5180: PPUSH
5181: CALL_OW 302
5185: IFFALSE 5197
// SaveVariable ( 1 , BrownStayInDelta ) ;
5187: LD_INT 1
5189: PPUSH
5190: LD_STRING BrownStayInDelta
5192: PPUSH
5193: CALL_OW 39
// if Donaldson in selectedPeople then
5197: LD_EXP 9
5201: PUSH
5202: LD_EXP 18
5206: IN
5207: IFFALSE 5239
// begin SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
5209: LD_EXP 9
5213: PPUSH
5214: LD_EXP 23
5218: PUSH
5219: LD_STRING Donaldson
5221: STR
5222: PPUSH
5223: CALL_OW 38
// SaveVariable ( 1 , DonaldsonIn06 ) ;
5227: LD_INT 1
5229: PPUSH
5230: LD_STRING DonaldsonIn06
5232: PPUSH
5233: CALL_OW 39
// end else
5237: GO 5260
// if IsOk ( Donaldson ) then
5239: LD_EXP 9
5243: PPUSH
5244: CALL_OW 302
5248: IFFALSE 5260
// SaveVariable ( 1 , DonaldsonStayInDelta ) ;
5250: LD_INT 1
5252: PPUSH
5253: LD_STRING DonaldsonStayInDelta
5255: PPUSH
5256: CALL_OW 39
// if Gladstone in selectedPeople then
5260: LD_EXP 2
5264: PUSH
5265: LD_EXP 18
5269: IN
5270: IFFALSE 5302
// begin SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
5272: LD_EXP 2
5276: PPUSH
5277: LD_EXP 23
5281: PUSH
5282: LD_STRING Gladstone
5284: STR
5285: PPUSH
5286: CALL_OW 38
// SaveVariable ( 1 , GladstoneIn06 ) ;
5290: LD_INT 1
5292: PPUSH
5293: LD_STRING GladstoneIn06
5295: PPUSH
5296: CALL_OW 39
// end else
5300: GO 5323
// if IsOk ( Gladstone ) then
5302: LD_EXP 2
5306: PPUSH
5307: CALL_OW 302
5311: IFFALSE 5323
// SaveVariable ( 1 , GladstoneStayInDelta ) ;
5313: LD_INT 1
5315: PPUSH
5316: LD_STRING GladstoneStayInDelta
5318: PPUSH
5319: CALL_OW 39
// if Mike then
5323: LD_EXP 10
5327: IFFALSE 5347
// SaveCharacters ( Mike , mission_prefix & Mike ) ;
5329: LD_EXP 10
5333: PPUSH
5334: LD_EXP 23
5338: PUSH
5339: LD_STRING Mike
5341: STR
5342: PPUSH
5343: CALL_OW 38
// selectedPeople := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ;
5347: LD_ADDR_EXP 18
5351: PUSH
5352: LD_INT 22
5354: PUSH
5355: LD_INT 1
5357: PUSH
5358: EMPTY
5359: LIST
5360: LIST
5361: PUSH
5362: LD_INT 23
5364: PUSH
5365: LD_INT 1
5367: PUSH
5368: EMPTY
5369: LIST
5370: LIST
5371: PUSH
5372: LD_INT 21
5374: PUSH
5375: LD_INT 1
5377: PUSH
5378: EMPTY
5379: LIST
5380: LIST
5381: PUSH
5382: EMPTY
5383: LIST
5384: LIST
5385: LIST
5386: PPUSH
5387: CALL_OW 69
5391: ST_TO_ADDR
// SaveCharacters ( yourApemans , ApeIn06 ) ;
5392: LD_EXP 14
5396: PPUSH
5397: LD_STRING ApeIn06
5399: PPUSH
5400: CALL_OW 38
// SaveCharacters ( selectedPeople diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis ] , OthersIn06 ) ;
5404: LD_EXP 18
5408: PUSH
5409: LD_EXP 1
5413: PUSH
5414: LD_EXP 4
5418: PUSH
5419: LD_EXP 6
5423: PUSH
5424: LD_EXP 7
5428: PUSH
5429: LD_EXP 5
5433: PUSH
5434: LD_EXP 8
5438: PUSH
5439: LD_EXP 9
5443: PUSH
5444: LD_EXP 2
5448: PUSH
5449: LD_EXP 3
5453: PUSH
5454: EMPTY
5455: LIST
5456: LIST
5457: LIST
5458: LIST
5459: LIST
5460: LIST
5461: LIST
5462: LIST
5463: LIST
5464: DIFF
5465: PPUSH
5466: LD_STRING OthersIn06
5468: PPUSH
5469: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ DeltaDoctor , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis ] , OthersStayInDelta ) ;
5473: LD_INT 22
5475: PUSH
5476: LD_INT 4
5478: PUSH
5479: EMPTY
5480: LIST
5481: LIST
5482: PUSH
5483: LD_INT 2
5485: PUSH
5486: LD_INT 25
5488: PUSH
5489: LD_INT 1
5491: PUSH
5492: EMPTY
5493: LIST
5494: LIST
5495: PUSH
5496: LD_INT 25
5498: PUSH
5499: LD_INT 2
5501: PUSH
5502: EMPTY
5503: LIST
5504: LIST
5505: PUSH
5506: LD_INT 25
5508: PUSH
5509: LD_INT 3
5511: PUSH
5512: EMPTY
5513: LIST
5514: LIST
5515: PUSH
5516: LD_INT 25
5518: PUSH
5519: LD_INT 4
5521: PUSH
5522: EMPTY
5523: LIST
5524: LIST
5525: PUSH
5526: EMPTY
5527: LIST
5528: LIST
5529: LIST
5530: LIST
5531: LIST
5532: PUSH
5533: EMPTY
5534: LIST
5535: LIST
5536: PPUSH
5537: CALL_OW 69
5541: PUSH
5542: LD_EXP 16
5546: PUSH
5547: LD_EXP 4
5551: PUSH
5552: LD_EXP 6
5556: PUSH
5557: LD_EXP 7
5561: PUSH
5562: LD_EXP 5
5566: PUSH
5567: LD_EXP 8
5571: PUSH
5572: LD_EXP 9
5576: PUSH
5577: LD_EXP 2
5581: PUSH
5582: LD_EXP 3
5586: PUSH
5587: EMPTY
5588: LIST
5589: LIST
5590: LIST
5591: LIST
5592: LIST
5593: LIST
5594: LIST
5595: LIST
5596: LIST
5597: DIFF
5598: PPUSH
5599: LD_STRING OthersStayInDelta
5601: PPUSH
5602: CALL_OW 38
// end ;
5606: LD_VAR 0 1
5610: RET
// export function SaveCargos ; var i ; begin
5611: LD_INT 0
5613: PPUSH
5614: PPUSH
// for i in FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) do
5615: LD_ADDR_VAR 0 2
5619: PUSH
5620: LD_INT 3
5622: PPUSH
5623: LD_INT 22
5625: PUSH
5626: LD_INT 1
5628: PUSH
5629: EMPTY
5630: LIST
5631: LIST
5632: PUSH
5633: LD_INT 34
5635: PUSH
5636: LD_INT 12
5638: PUSH
5639: EMPTY
5640: LIST
5641: LIST
5642: PUSH
5643: EMPTY
5644: LIST
5645: LIST
5646: PPUSH
5647: CALL_OW 70
5651: PUSH
5652: FOR_IN
5653: IFFALSE 5681
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
5655: LD_ADDR_EXP 22
5659: PUSH
5660: LD_EXP 22
5664: PUSH
5665: LD_VAR 0 2
5669: PPUSH
5670: CALL 68425 0 1
5674: PUSH
5675: EMPTY
5676: LIST
5677: ADD
5678: ST_TO_ADDR
5679: GO 5652
5681: POP
5682: POP
// SaveVariable ( resources , 06_ResourcesInCargo06_1 ) ;
5683: LD_EXP 22
5687: PPUSH
5688: LD_STRING 06_ResourcesInCargo06_1
5690: PPUSH
5691: CALL_OW 39
// end ; end_of_file
5695: LD_VAR 0 1
5699: RET
// on Command ( comandid ) do var i ;
5700: LD_INT 0
5702: PPUSH
// begin if comandid = 65 then
5703: LD_VAR 0 1
5707: PUSH
5708: LD_INT 65
5710: EQUAL
5711: IFFALSE 5752
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
5713: LD_ADDR_VAR 0 2
5717: PUSH
5718: LD_INT 22
5720: PUSH
5721: LD_INT 1
5723: PUSH
5724: EMPTY
5725: LIST
5726: LIST
5727: PUSH
5728: EMPTY
5729: LIST
5730: PPUSH
5731: CALL_OW 69
5735: PUSH
5736: FOR_IN
5737: IFFALSE 5750
// ComStop ( i ) ;
5739: LD_VAR 0 2
5743: PPUSH
5744: CALL_OW 141
5748: GO 5736
5750: POP
5751: POP
// end ;
5752: PPOPN 2
5754: END
// on ApemanTamed ( apeman , human ) do var tmp ;
5755: LD_INT 0
5757: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
5758: LD_ADDR_VAR 0 3
5762: PUSH
5763: LD_INT 22
5765: PUSH
5766: LD_INT 1
5768: PUSH
5769: EMPTY
5770: LIST
5771: LIST
5772: PUSH
5773: LD_INT 21
5775: PUSH
5776: LD_INT 3
5778: PUSH
5779: EMPTY
5780: LIST
5781: LIST
5782: PUSH
5783: LD_INT 30
5785: PUSH
5786: LD_INT 0
5788: PUSH
5789: EMPTY
5790: LIST
5791: LIST
5792: PUSH
5793: EMPTY
5794: LIST
5795: LIST
5796: LIST
5797: PPUSH
5798: CALL_OW 69
5802: ST_TO_ADDR
// if not tmp then
5803: LD_VAR 0 3
5807: NOT
5808: IFFALSE 5812
// exit ;
5810: GO 5842
// ComEnterUnit ( apeman , tmp [ 1 ] ) ;
5812: LD_VAR 0 1
5816: PPUSH
5817: LD_VAR 0 3
5821: PUSH
5822: LD_INT 1
5824: ARRAY
5825: PPUSH
5826: CALL_OW 120
// SetSide ( apeman , 4 ) ;
5830: LD_VAR 0 1
5834: PPUSH
5835: LD_INT 4
5837: PPUSH
5838: CALL_OW 235
// end ;
5842: PPOPN 3
5844: END
// on UnitDestroyed ( un ) do begin if un = JMM then
5845: LD_VAR 0 1
5849: PUSH
5850: LD_EXP 1
5854: EQUAL
5855: IFFALSE 5864
// YouLost ( JMM ) ;
5857: LD_STRING JMM
5859: PPUSH
5860: CALL_OW 104
// SOS_UnitDestroyed ( un ) ;
5864: LD_VAR 0 1
5868: PPUSH
5869: CALL 21840 0 1
// end ;
5873: PPOPN 1
5875: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
5876: LD_VAR 0 1
5880: PPUSH
5881: LD_VAR 0 2
5885: PPUSH
5886: CALL 21898 0 2
// end ; end_of_file
5890: PPOPN 2
5892: END
// export globalGameSaveCounter ; every 0 0$1 do
5893: GO 5895
5895: DISABLE
// begin enable ;
5896: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
5897: LD_STRING updateTimer(
5899: PUSH
5900: LD_OWVAR 1
5904: STR
5905: PUSH
5906: LD_STRING );
5908: STR
5909: PPUSH
5910: CALL_OW 559
// end ;
5914: END
// every 0 0$1 do
5915: GO 5917
5917: DISABLE
// begin globalGameSaveCounter := 0 ;
5918: LD_ADDR_EXP 25
5922: PUSH
5923: LD_INT 0
5925: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
5926: LD_STRING setGameSaveCounter(0)
5928: PPUSH
5929: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
5933: LD_STRING initStreamRollete();
5935: PPUSH
5936: CALL_OW 559
// InitStreamMode ;
5940: CALL 7283 0 0
// DefineStreamItems ( false ) ;
5944: LD_INT 0
5946: PPUSH
5947: CALL 7747 0 1
// end ;
5951: END
// export function SOS_MapStart ( ) ; begin
5952: LD_INT 0
5954: PPUSH
// if streamModeActive then
5955: LD_EXP 26
5959: IFFALSE 5968
// DefineStreamItems ( true ) ;
5961: LD_INT 1
5963: PPUSH
5964: CALL 7747 0 1
// UpdateLuaVariables ( ) ;
5968: CALL 5985 0 0
// UpdateFactoryWaypoints ( ) ;
5972: CALL 20749 0 0
// UpdateWarehouseGatheringPoints ( ) ;
5976: CALL 21001 0 0
// end ;
5980: LD_VAR 0 1
5984: RET
// function UpdateLuaVariables ( ) ; begin
5985: LD_INT 0
5987: PPUSH
// if globalGameSaveCounter then
5988: LD_EXP 25
5992: IFFALSE 6026
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
5994: LD_ADDR_EXP 25
5998: PUSH
5999: LD_EXP 25
6003: PPUSH
6004: CALL 66217 0 1
6008: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
6009: LD_STRING setGameSaveCounter(
6011: PUSH
6012: LD_EXP 25
6016: STR
6017: PUSH
6018: LD_STRING )
6020: STR
6021: PPUSH
6022: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
6026: LD_STRING setGameDifficulty(
6028: PUSH
6029: LD_OWVAR 67
6033: STR
6034: PUSH
6035: LD_STRING )
6037: STR
6038: PPUSH
6039: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
6043: LD_STRING displayDifficulty(
6045: PUSH
6046: LD_OWVAR 67
6050: STR
6051: PUSH
6052: LD_STRING )
6054: STR
6055: PPUSH
6056: CALL_OW 559
// end ;
6060: LD_VAR 0 1
6064: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
6065: LD_INT 0
6067: PPUSH
// if p2 = stream_mode then
6068: LD_VAR 0 2
6072: PUSH
6073: LD_INT 100
6075: EQUAL
6076: IFFALSE 7079
// begin if not StreamModeActive then
6078: LD_EXP 26
6082: NOT
6083: IFFALSE 6093
// StreamModeActive := true ;
6085: LD_ADDR_EXP 26
6089: PUSH
6090: LD_INT 1
6092: ST_TO_ADDR
// if p3 = 0 then
6093: LD_VAR 0 3
6097: PUSH
6098: LD_INT 0
6100: EQUAL
6101: IFFALSE 6107
// InitStreamMode ;
6103: CALL 7283 0 0
// if p3 = 1 then
6107: LD_VAR 0 3
6111: PUSH
6112: LD_INT 1
6114: EQUAL
6115: IFFALSE 6125
// sRocket := true ;
6117: LD_ADDR_EXP 31
6121: PUSH
6122: LD_INT 1
6124: ST_TO_ADDR
// if p3 = 2 then
6125: LD_VAR 0 3
6129: PUSH
6130: LD_INT 2
6132: EQUAL
6133: IFFALSE 6143
// sSpeed := true ;
6135: LD_ADDR_EXP 30
6139: PUSH
6140: LD_INT 1
6142: ST_TO_ADDR
// if p3 = 3 then
6143: LD_VAR 0 3
6147: PUSH
6148: LD_INT 3
6150: EQUAL
6151: IFFALSE 6161
// sEngine := true ;
6153: LD_ADDR_EXP 32
6157: PUSH
6158: LD_INT 1
6160: ST_TO_ADDR
// if p3 = 4 then
6161: LD_VAR 0 3
6165: PUSH
6166: LD_INT 4
6168: EQUAL
6169: IFFALSE 6179
// sSpec := true ;
6171: LD_ADDR_EXP 29
6175: PUSH
6176: LD_INT 1
6178: ST_TO_ADDR
// if p3 = 5 then
6179: LD_VAR 0 3
6183: PUSH
6184: LD_INT 5
6186: EQUAL
6187: IFFALSE 6197
// sLevel := true ;
6189: LD_ADDR_EXP 33
6193: PUSH
6194: LD_INT 1
6196: ST_TO_ADDR
// if p3 = 6 then
6197: LD_VAR 0 3
6201: PUSH
6202: LD_INT 6
6204: EQUAL
6205: IFFALSE 6215
// sArmoury := true ;
6207: LD_ADDR_EXP 34
6211: PUSH
6212: LD_INT 1
6214: ST_TO_ADDR
// if p3 = 7 then
6215: LD_VAR 0 3
6219: PUSH
6220: LD_INT 7
6222: EQUAL
6223: IFFALSE 6233
// sRadar := true ;
6225: LD_ADDR_EXP 35
6229: PUSH
6230: LD_INT 1
6232: ST_TO_ADDR
// if p3 = 8 then
6233: LD_VAR 0 3
6237: PUSH
6238: LD_INT 8
6240: EQUAL
6241: IFFALSE 6251
// sBunker := true ;
6243: LD_ADDR_EXP 36
6247: PUSH
6248: LD_INT 1
6250: ST_TO_ADDR
// if p3 = 9 then
6251: LD_VAR 0 3
6255: PUSH
6256: LD_INT 9
6258: EQUAL
6259: IFFALSE 6269
// sHack := true ;
6261: LD_ADDR_EXP 37
6265: PUSH
6266: LD_INT 1
6268: ST_TO_ADDR
// if p3 = 10 then
6269: LD_VAR 0 3
6273: PUSH
6274: LD_INT 10
6276: EQUAL
6277: IFFALSE 6287
// sFire := true ;
6279: LD_ADDR_EXP 38
6283: PUSH
6284: LD_INT 1
6286: ST_TO_ADDR
// if p3 = 11 then
6287: LD_VAR 0 3
6291: PUSH
6292: LD_INT 11
6294: EQUAL
6295: IFFALSE 6305
// sRefresh := true ;
6297: LD_ADDR_EXP 39
6301: PUSH
6302: LD_INT 1
6304: ST_TO_ADDR
// if p3 = 12 then
6305: LD_VAR 0 3
6309: PUSH
6310: LD_INT 12
6312: EQUAL
6313: IFFALSE 6323
// sExp := true ;
6315: LD_ADDR_EXP 40
6319: PUSH
6320: LD_INT 1
6322: ST_TO_ADDR
// if p3 = 13 then
6323: LD_VAR 0 3
6327: PUSH
6328: LD_INT 13
6330: EQUAL
6331: IFFALSE 6341
// sDepot := true ;
6333: LD_ADDR_EXP 41
6337: PUSH
6338: LD_INT 1
6340: ST_TO_ADDR
// if p3 = 14 then
6341: LD_VAR 0 3
6345: PUSH
6346: LD_INT 14
6348: EQUAL
6349: IFFALSE 6359
// sFlag := true ;
6351: LD_ADDR_EXP 42
6355: PUSH
6356: LD_INT 1
6358: ST_TO_ADDR
// if p3 = 15 then
6359: LD_VAR 0 3
6363: PUSH
6364: LD_INT 15
6366: EQUAL
6367: IFFALSE 6377
// sKamikadze := true ;
6369: LD_ADDR_EXP 50
6373: PUSH
6374: LD_INT 1
6376: ST_TO_ADDR
// if p3 = 16 then
6377: LD_VAR 0 3
6381: PUSH
6382: LD_INT 16
6384: EQUAL
6385: IFFALSE 6395
// sTroll := true ;
6387: LD_ADDR_EXP 51
6391: PUSH
6392: LD_INT 1
6394: ST_TO_ADDR
// if p3 = 17 then
6395: LD_VAR 0 3
6399: PUSH
6400: LD_INT 17
6402: EQUAL
6403: IFFALSE 6413
// sSlow := true ;
6405: LD_ADDR_EXP 52
6409: PUSH
6410: LD_INT 1
6412: ST_TO_ADDR
// if p3 = 18 then
6413: LD_VAR 0 3
6417: PUSH
6418: LD_INT 18
6420: EQUAL
6421: IFFALSE 6431
// sLack := true ;
6423: LD_ADDR_EXP 53
6427: PUSH
6428: LD_INT 1
6430: ST_TO_ADDR
// if p3 = 19 then
6431: LD_VAR 0 3
6435: PUSH
6436: LD_INT 19
6438: EQUAL
6439: IFFALSE 6449
// sTank := true ;
6441: LD_ADDR_EXP 55
6445: PUSH
6446: LD_INT 1
6448: ST_TO_ADDR
// if p3 = 20 then
6449: LD_VAR 0 3
6453: PUSH
6454: LD_INT 20
6456: EQUAL
6457: IFFALSE 6467
// sRemote := true ;
6459: LD_ADDR_EXP 56
6463: PUSH
6464: LD_INT 1
6466: ST_TO_ADDR
// if p3 = 21 then
6467: LD_VAR 0 3
6471: PUSH
6472: LD_INT 21
6474: EQUAL
6475: IFFALSE 6485
// sPowell := true ;
6477: LD_ADDR_EXP 57
6481: PUSH
6482: LD_INT 1
6484: ST_TO_ADDR
// if p3 = 22 then
6485: LD_VAR 0 3
6489: PUSH
6490: LD_INT 22
6492: EQUAL
6493: IFFALSE 6503
// sTeleport := true ;
6495: LD_ADDR_EXP 60
6499: PUSH
6500: LD_INT 1
6502: ST_TO_ADDR
// if p3 = 23 then
6503: LD_VAR 0 3
6507: PUSH
6508: LD_INT 23
6510: EQUAL
6511: IFFALSE 6521
// sOilTower := true ;
6513: LD_ADDR_EXP 62
6517: PUSH
6518: LD_INT 1
6520: ST_TO_ADDR
// if p3 = 24 then
6521: LD_VAR 0 3
6525: PUSH
6526: LD_INT 24
6528: EQUAL
6529: IFFALSE 6539
// sShovel := true ;
6531: LD_ADDR_EXP 63
6535: PUSH
6536: LD_INT 1
6538: ST_TO_ADDR
// if p3 = 25 then
6539: LD_VAR 0 3
6543: PUSH
6544: LD_INT 25
6546: EQUAL
6547: IFFALSE 6557
// sSheik := true ;
6549: LD_ADDR_EXP 64
6553: PUSH
6554: LD_INT 1
6556: ST_TO_ADDR
// if p3 = 26 then
6557: LD_VAR 0 3
6561: PUSH
6562: LD_INT 26
6564: EQUAL
6565: IFFALSE 6575
// sEarthquake := true ;
6567: LD_ADDR_EXP 66
6571: PUSH
6572: LD_INT 1
6574: ST_TO_ADDR
// if p3 = 27 then
6575: LD_VAR 0 3
6579: PUSH
6580: LD_INT 27
6582: EQUAL
6583: IFFALSE 6593
// sAI := true ;
6585: LD_ADDR_EXP 67
6589: PUSH
6590: LD_INT 1
6592: ST_TO_ADDR
// if p3 = 28 then
6593: LD_VAR 0 3
6597: PUSH
6598: LD_INT 28
6600: EQUAL
6601: IFFALSE 6611
// sCargo := true ;
6603: LD_ADDR_EXP 70
6607: PUSH
6608: LD_INT 1
6610: ST_TO_ADDR
// if p3 = 29 then
6611: LD_VAR 0 3
6615: PUSH
6616: LD_INT 29
6618: EQUAL
6619: IFFALSE 6629
// sDLaser := true ;
6621: LD_ADDR_EXP 71
6625: PUSH
6626: LD_INT 1
6628: ST_TO_ADDR
// if p3 = 30 then
6629: LD_VAR 0 3
6633: PUSH
6634: LD_INT 30
6636: EQUAL
6637: IFFALSE 6647
// sExchange := true ;
6639: LD_ADDR_EXP 72
6643: PUSH
6644: LD_INT 1
6646: ST_TO_ADDR
// if p3 = 31 then
6647: LD_VAR 0 3
6651: PUSH
6652: LD_INT 31
6654: EQUAL
6655: IFFALSE 6665
// sFac := true ;
6657: LD_ADDR_EXP 73
6661: PUSH
6662: LD_INT 1
6664: ST_TO_ADDR
// if p3 = 32 then
6665: LD_VAR 0 3
6669: PUSH
6670: LD_INT 32
6672: EQUAL
6673: IFFALSE 6683
// sPower := true ;
6675: LD_ADDR_EXP 74
6679: PUSH
6680: LD_INT 1
6682: ST_TO_ADDR
// if p3 = 33 then
6683: LD_VAR 0 3
6687: PUSH
6688: LD_INT 33
6690: EQUAL
6691: IFFALSE 6701
// sRandom := true ;
6693: LD_ADDR_EXP 75
6697: PUSH
6698: LD_INT 1
6700: ST_TO_ADDR
// if p3 = 34 then
6701: LD_VAR 0 3
6705: PUSH
6706: LD_INT 34
6708: EQUAL
6709: IFFALSE 6719
// sShield := true ;
6711: LD_ADDR_EXP 76
6715: PUSH
6716: LD_INT 1
6718: ST_TO_ADDR
// if p3 = 35 then
6719: LD_VAR 0 3
6723: PUSH
6724: LD_INT 35
6726: EQUAL
6727: IFFALSE 6737
// sTime := true ;
6729: LD_ADDR_EXP 77
6733: PUSH
6734: LD_INT 1
6736: ST_TO_ADDR
// if p3 = 36 then
6737: LD_VAR 0 3
6741: PUSH
6742: LD_INT 36
6744: EQUAL
6745: IFFALSE 6755
// sTools := true ;
6747: LD_ADDR_EXP 78
6751: PUSH
6752: LD_INT 1
6754: ST_TO_ADDR
// if p3 = 101 then
6755: LD_VAR 0 3
6759: PUSH
6760: LD_INT 101
6762: EQUAL
6763: IFFALSE 6773
// sSold := true ;
6765: LD_ADDR_EXP 43
6769: PUSH
6770: LD_INT 1
6772: ST_TO_ADDR
// if p3 = 102 then
6773: LD_VAR 0 3
6777: PUSH
6778: LD_INT 102
6780: EQUAL
6781: IFFALSE 6791
// sDiff := true ;
6783: LD_ADDR_EXP 44
6787: PUSH
6788: LD_INT 1
6790: ST_TO_ADDR
// if p3 = 103 then
6791: LD_VAR 0 3
6795: PUSH
6796: LD_INT 103
6798: EQUAL
6799: IFFALSE 6809
// sFog := true ;
6801: LD_ADDR_EXP 47
6805: PUSH
6806: LD_INT 1
6808: ST_TO_ADDR
// if p3 = 104 then
6809: LD_VAR 0 3
6813: PUSH
6814: LD_INT 104
6816: EQUAL
6817: IFFALSE 6827
// sReset := true ;
6819: LD_ADDR_EXP 48
6823: PUSH
6824: LD_INT 1
6826: ST_TO_ADDR
// if p3 = 105 then
6827: LD_VAR 0 3
6831: PUSH
6832: LD_INT 105
6834: EQUAL
6835: IFFALSE 6845
// sSun := true ;
6837: LD_ADDR_EXP 49
6841: PUSH
6842: LD_INT 1
6844: ST_TO_ADDR
// if p3 = 106 then
6845: LD_VAR 0 3
6849: PUSH
6850: LD_INT 106
6852: EQUAL
6853: IFFALSE 6863
// sTiger := true ;
6855: LD_ADDR_EXP 45
6859: PUSH
6860: LD_INT 1
6862: ST_TO_ADDR
// if p3 = 107 then
6863: LD_VAR 0 3
6867: PUSH
6868: LD_INT 107
6870: EQUAL
6871: IFFALSE 6881
// sBomb := true ;
6873: LD_ADDR_EXP 46
6877: PUSH
6878: LD_INT 1
6880: ST_TO_ADDR
// if p3 = 108 then
6881: LD_VAR 0 3
6885: PUSH
6886: LD_INT 108
6888: EQUAL
6889: IFFALSE 6899
// sWound := true ;
6891: LD_ADDR_EXP 54
6895: PUSH
6896: LD_INT 1
6898: ST_TO_ADDR
// if p3 = 109 then
6899: LD_VAR 0 3
6903: PUSH
6904: LD_INT 109
6906: EQUAL
6907: IFFALSE 6917
// sBetray := true ;
6909: LD_ADDR_EXP 58
6913: PUSH
6914: LD_INT 1
6916: ST_TO_ADDR
// if p3 = 110 then
6917: LD_VAR 0 3
6921: PUSH
6922: LD_INT 110
6924: EQUAL
6925: IFFALSE 6935
// sContamin := true ;
6927: LD_ADDR_EXP 59
6931: PUSH
6932: LD_INT 1
6934: ST_TO_ADDR
// if p3 = 111 then
6935: LD_VAR 0 3
6939: PUSH
6940: LD_INT 111
6942: EQUAL
6943: IFFALSE 6953
// sOil := true ;
6945: LD_ADDR_EXP 61
6949: PUSH
6950: LD_INT 1
6952: ST_TO_ADDR
// if p3 = 112 then
6953: LD_VAR 0 3
6957: PUSH
6958: LD_INT 112
6960: EQUAL
6961: IFFALSE 6971
// sStu := true ;
6963: LD_ADDR_EXP 65
6967: PUSH
6968: LD_INT 1
6970: ST_TO_ADDR
// if p3 = 113 then
6971: LD_VAR 0 3
6975: PUSH
6976: LD_INT 113
6978: EQUAL
6979: IFFALSE 6989
// sBazooka := true ;
6981: LD_ADDR_EXP 68
6985: PUSH
6986: LD_INT 1
6988: ST_TO_ADDR
// if p3 = 114 then
6989: LD_VAR 0 3
6993: PUSH
6994: LD_INT 114
6996: EQUAL
6997: IFFALSE 7007
// sMortar := true ;
6999: LD_ADDR_EXP 69
7003: PUSH
7004: LD_INT 1
7006: ST_TO_ADDR
// if p3 = 115 then
7007: LD_VAR 0 3
7011: PUSH
7012: LD_INT 115
7014: EQUAL
7015: IFFALSE 7025
// sRanger := true ;
7017: LD_ADDR_EXP 79
7021: PUSH
7022: LD_INT 1
7024: ST_TO_ADDR
// if p3 = 116 then
7025: LD_VAR 0 3
7029: PUSH
7030: LD_INT 116
7032: EQUAL
7033: IFFALSE 7043
// sComputer := true ;
7035: LD_ADDR_EXP 80
7039: PUSH
7040: LD_INT 1
7042: ST_TO_ADDR
// if p3 = 117 then
7043: LD_VAR 0 3
7047: PUSH
7048: LD_INT 117
7050: EQUAL
7051: IFFALSE 7061
// s30 := true ;
7053: LD_ADDR_EXP 81
7057: PUSH
7058: LD_INT 1
7060: ST_TO_ADDR
// if p3 = 118 then
7061: LD_VAR 0 3
7065: PUSH
7066: LD_INT 118
7068: EQUAL
7069: IFFALSE 7079
// s60 := true ;
7071: LD_ADDR_EXP 82
7075: PUSH
7076: LD_INT 1
7078: ST_TO_ADDR
// end ; if p2 = hack_mode then
7079: LD_VAR 0 2
7083: PUSH
7084: LD_INT 101
7086: EQUAL
7087: IFFALSE 7215
// begin case p3 of 1 :
7089: LD_VAR 0 3
7093: PUSH
7094: LD_INT 1
7096: DOUBLE
7097: EQUAL
7098: IFTRUE 7102
7100: GO 7109
7102: POP
// hHackUnlimitedResources ; 2 :
7103: CALL 19362 0 0
7107: GO 7215
7109: LD_INT 2
7111: DOUBLE
7112: EQUAL
7113: IFTRUE 7117
7115: GO 7124
7117: POP
// hHackSetLevel10 ; 3 :
7118: CALL 19495 0 0
7122: GO 7215
7124: LD_INT 3
7126: DOUBLE
7127: EQUAL
7128: IFTRUE 7132
7130: GO 7139
7132: POP
// hHackSetLevel10YourUnits ; 4 :
7133: CALL 19580 0 0
7137: GO 7215
7139: LD_INT 4
7141: DOUBLE
7142: EQUAL
7143: IFTRUE 7147
7145: GO 7154
7147: POP
// hHackInvincible ; 5 :
7148: CALL 20028 0 0
7152: GO 7215
7154: LD_INT 5
7156: DOUBLE
7157: EQUAL
7158: IFTRUE 7162
7160: GO 7169
7162: POP
// hHackInvisible ; 6 :
7163: CALL 20139 0 0
7167: GO 7215
7169: LD_INT 6
7171: DOUBLE
7172: EQUAL
7173: IFTRUE 7177
7175: GO 7184
7177: POP
// hHackChangeYourSide ; 7 :
7178: CALL 20196 0 0
7182: GO 7215
7184: LD_INT 7
7186: DOUBLE
7187: EQUAL
7188: IFTRUE 7192
7190: GO 7199
7192: POP
// hHackChangeUnitSide ; 8 :
7193: CALL 20238 0 0
7197: GO 7215
7199: LD_INT 8
7201: DOUBLE
7202: EQUAL
7203: IFTRUE 7207
7205: GO 7214
7207: POP
// hHackFog ; end ;
7208: CALL 20339 0 0
7212: GO 7215
7214: POP
// end ; if p2 = game_save_mode then
7215: LD_VAR 0 2
7219: PUSH
7220: LD_INT 102
7222: EQUAL
7223: IFFALSE 7278
// begin if p3 = 1 then
7225: LD_VAR 0 3
7229: PUSH
7230: LD_INT 1
7232: EQUAL
7233: IFFALSE 7245
// globalGameSaveCounter := p4 ;
7235: LD_ADDR_EXP 25
7239: PUSH
7240: LD_VAR 0 4
7244: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
7245: LD_VAR 0 3
7249: PUSH
7250: LD_INT 2
7252: EQUAL
7253: PUSH
7254: LD_EXP 25
7258: AND
7259: IFFALSE 7278
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
7261: LD_STRING setGameSaveCounter(
7263: PUSH
7264: LD_EXP 25
7268: STR
7269: PUSH
7270: LD_STRING )
7272: STR
7273: PPUSH
7274: CALL_OW 559
// end ; end ;
7278: LD_VAR 0 7
7282: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
7283: LD_INT 0
7285: PPUSH
// streamModeActive := false ;
7286: LD_ADDR_EXP 26
7290: PUSH
7291: LD_INT 0
7293: ST_TO_ADDR
// normalCounter := 36 ;
7294: LD_ADDR_EXP 27
7298: PUSH
7299: LD_INT 36
7301: ST_TO_ADDR
// hardcoreCounter := 18 ;
7302: LD_ADDR_EXP 28
7306: PUSH
7307: LD_INT 18
7309: ST_TO_ADDR
// sRocket := false ;
7310: LD_ADDR_EXP 31
7314: PUSH
7315: LD_INT 0
7317: ST_TO_ADDR
// sSpeed := false ;
7318: LD_ADDR_EXP 30
7322: PUSH
7323: LD_INT 0
7325: ST_TO_ADDR
// sEngine := false ;
7326: LD_ADDR_EXP 32
7330: PUSH
7331: LD_INT 0
7333: ST_TO_ADDR
// sSpec := false ;
7334: LD_ADDR_EXP 29
7338: PUSH
7339: LD_INT 0
7341: ST_TO_ADDR
// sLevel := false ;
7342: LD_ADDR_EXP 33
7346: PUSH
7347: LD_INT 0
7349: ST_TO_ADDR
// sArmoury := false ;
7350: LD_ADDR_EXP 34
7354: PUSH
7355: LD_INT 0
7357: ST_TO_ADDR
// sRadar := false ;
7358: LD_ADDR_EXP 35
7362: PUSH
7363: LD_INT 0
7365: ST_TO_ADDR
// sBunker := false ;
7366: LD_ADDR_EXP 36
7370: PUSH
7371: LD_INT 0
7373: ST_TO_ADDR
// sHack := false ;
7374: LD_ADDR_EXP 37
7378: PUSH
7379: LD_INT 0
7381: ST_TO_ADDR
// sFire := false ;
7382: LD_ADDR_EXP 38
7386: PUSH
7387: LD_INT 0
7389: ST_TO_ADDR
// sRefresh := false ;
7390: LD_ADDR_EXP 39
7394: PUSH
7395: LD_INT 0
7397: ST_TO_ADDR
// sExp := false ;
7398: LD_ADDR_EXP 40
7402: PUSH
7403: LD_INT 0
7405: ST_TO_ADDR
// sDepot := false ;
7406: LD_ADDR_EXP 41
7410: PUSH
7411: LD_INT 0
7413: ST_TO_ADDR
// sFlag := false ;
7414: LD_ADDR_EXP 42
7418: PUSH
7419: LD_INT 0
7421: ST_TO_ADDR
// sKamikadze := false ;
7422: LD_ADDR_EXP 50
7426: PUSH
7427: LD_INT 0
7429: ST_TO_ADDR
// sTroll := false ;
7430: LD_ADDR_EXP 51
7434: PUSH
7435: LD_INT 0
7437: ST_TO_ADDR
// sSlow := false ;
7438: LD_ADDR_EXP 52
7442: PUSH
7443: LD_INT 0
7445: ST_TO_ADDR
// sLack := false ;
7446: LD_ADDR_EXP 53
7450: PUSH
7451: LD_INT 0
7453: ST_TO_ADDR
// sTank := false ;
7454: LD_ADDR_EXP 55
7458: PUSH
7459: LD_INT 0
7461: ST_TO_ADDR
// sRemote := false ;
7462: LD_ADDR_EXP 56
7466: PUSH
7467: LD_INT 0
7469: ST_TO_ADDR
// sPowell := false ;
7470: LD_ADDR_EXP 57
7474: PUSH
7475: LD_INT 0
7477: ST_TO_ADDR
// sTeleport := false ;
7478: LD_ADDR_EXP 60
7482: PUSH
7483: LD_INT 0
7485: ST_TO_ADDR
// sOilTower := false ;
7486: LD_ADDR_EXP 62
7490: PUSH
7491: LD_INT 0
7493: ST_TO_ADDR
// sShovel := false ;
7494: LD_ADDR_EXP 63
7498: PUSH
7499: LD_INT 0
7501: ST_TO_ADDR
// sSheik := false ;
7502: LD_ADDR_EXP 64
7506: PUSH
7507: LD_INT 0
7509: ST_TO_ADDR
// sEarthquake := false ;
7510: LD_ADDR_EXP 66
7514: PUSH
7515: LD_INT 0
7517: ST_TO_ADDR
// sAI := false ;
7518: LD_ADDR_EXP 67
7522: PUSH
7523: LD_INT 0
7525: ST_TO_ADDR
// sCargo := false ;
7526: LD_ADDR_EXP 70
7530: PUSH
7531: LD_INT 0
7533: ST_TO_ADDR
// sDLaser := false ;
7534: LD_ADDR_EXP 71
7538: PUSH
7539: LD_INT 0
7541: ST_TO_ADDR
// sExchange := false ;
7542: LD_ADDR_EXP 72
7546: PUSH
7547: LD_INT 0
7549: ST_TO_ADDR
// sFac := false ;
7550: LD_ADDR_EXP 73
7554: PUSH
7555: LD_INT 0
7557: ST_TO_ADDR
// sPower := false ;
7558: LD_ADDR_EXP 74
7562: PUSH
7563: LD_INT 0
7565: ST_TO_ADDR
// sRandom := false ;
7566: LD_ADDR_EXP 75
7570: PUSH
7571: LD_INT 0
7573: ST_TO_ADDR
// sShield := false ;
7574: LD_ADDR_EXP 76
7578: PUSH
7579: LD_INT 0
7581: ST_TO_ADDR
// sTime := false ;
7582: LD_ADDR_EXP 77
7586: PUSH
7587: LD_INT 0
7589: ST_TO_ADDR
// sTools := false ;
7590: LD_ADDR_EXP 78
7594: PUSH
7595: LD_INT 0
7597: ST_TO_ADDR
// sSold := false ;
7598: LD_ADDR_EXP 43
7602: PUSH
7603: LD_INT 0
7605: ST_TO_ADDR
// sDiff := false ;
7606: LD_ADDR_EXP 44
7610: PUSH
7611: LD_INT 0
7613: ST_TO_ADDR
// sFog := false ;
7614: LD_ADDR_EXP 47
7618: PUSH
7619: LD_INT 0
7621: ST_TO_ADDR
// sReset := false ;
7622: LD_ADDR_EXP 48
7626: PUSH
7627: LD_INT 0
7629: ST_TO_ADDR
// sSun := false ;
7630: LD_ADDR_EXP 49
7634: PUSH
7635: LD_INT 0
7637: ST_TO_ADDR
// sTiger := false ;
7638: LD_ADDR_EXP 45
7642: PUSH
7643: LD_INT 0
7645: ST_TO_ADDR
// sBomb := false ;
7646: LD_ADDR_EXP 46
7650: PUSH
7651: LD_INT 0
7653: ST_TO_ADDR
// sWound := false ;
7654: LD_ADDR_EXP 54
7658: PUSH
7659: LD_INT 0
7661: ST_TO_ADDR
// sBetray := false ;
7662: LD_ADDR_EXP 58
7666: PUSH
7667: LD_INT 0
7669: ST_TO_ADDR
// sContamin := false ;
7670: LD_ADDR_EXP 59
7674: PUSH
7675: LD_INT 0
7677: ST_TO_ADDR
// sOil := false ;
7678: LD_ADDR_EXP 61
7682: PUSH
7683: LD_INT 0
7685: ST_TO_ADDR
// sStu := false ;
7686: LD_ADDR_EXP 65
7690: PUSH
7691: LD_INT 0
7693: ST_TO_ADDR
// sBazooka := false ;
7694: LD_ADDR_EXP 68
7698: PUSH
7699: LD_INT 0
7701: ST_TO_ADDR
// sMortar := false ;
7702: LD_ADDR_EXP 69
7706: PUSH
7707: LD_INT 0
7709: ST_TO_ADDR
// sRanger := false ;
7710: LD_ADDR_EXP 79
7714: PUSH
7715: LD_INT 0
7717: ST_TO_ADDR
// sComputer := false ;
7718: LD_ADDR_EXP 80
7722: PUSH
7723: LD_INT 0
7725: ST_TO_ADDR
// s30 := false ;
7726: LD_ADDR_EXP 81
7730: PUSH
7731: LD_INT 0
7733: ST_TO_ADDR
// s60 := false ;
7734: LD_ADDR_EXP 82
7738: PUSH
7739: LD_INT 0
7741: ST_TO_ADDR
// end ;
7742: LD_VAR 0 1
7746: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
7747: LD_INT 0
7749: PPUSH
7750: PPUSH
7751: PPUSH
7752: PPUSH
7753: PPUSH
7754: PPUSH
7755: PPUSH
// result := [ ] ;
7756: LD_ADDR_VAR 0 2
7760: PUSH
7761: EMPTY
7762: ST_TO_ADDR
// if campaign_id = 1 then
7763: LD_OWVAR 69
7767: PUSH
7768: LD_INT 1
7770: EQUAL
7771: IFFALSE 10937
// begin case mission_number of 1 :
7773: LD_OWVAR 70
7777: PUSH
7778: LD_INT 1
7780: DOUBLE
7781: EQUAL
7782: IFTRUE 7786
7784: GO 7862
7786: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
7787: LD_ADDR_VAR 0 2
7791: PUSH
7792: LD_INT 2
7794: PUSH
7795: LD_INT 4
7797: PUSH
7798: LD_INT 11
7800: PUSH
7801: LD_INT 12
7803: PUSH
7804: LD_INT 15
7806: PUSH
7807: LD_INT 16
7809: PUSH
7810: LD_INT 22
7812: PUSH
7813: LD_INT 23
7815: PUSH
7816: LD_INT 26
7818: PUSH
7819: EMPTY
7820: LIST
7821: LIST
7822: LIST
7823: LIST
7824: LIST
7825: LIST
7826: LIST
7827: LIST
7828: LIST
7829: PUSH
7830: LD_INT 101
7832: PUSH
7833: LD_INT 102
7835: PUSH
7836: LD_INT 106
7838: PUSH
7839: LD_INT 116
7841: PUSH
7842: LD_INT 117
7844: PUSH
7845: LD_INT 118
7847: PUSH
7848: EMPTY
7849: LIST
7850: LIST
7851: LIST
7852: LIST
7853: LIST
7854: LIST
7855: PUSH
7856: EMPTY
7857: LIST
7858: LIST
7859: ST_TO_ADDR
7860: GO 10935
7862: LD_INT 2
7864: DOUBLE
7865: EQUAL
7866: IFTRUE 7870
7868: GO 7954
7870: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
7871: LD_ADDR_VAR 0 2
7875: PUSH
7876: LD_INT 2
7878: PUSH
7879: LD_INT 4
7881: PUSH
7882: LD_INT 11
7884: PUSH
7885: LD_INT 12
7887: PUSH
7888: LD_INT 15
7890: PUSH
7891: LD_INT 16
7893: PUSH
7894: LD_INT 22
7896: PUSH
7897: LD_INT 23
7899: PUSH
7900: LD_INT 26
7902: PUSH
7903: EMPTY
7904: LIST
7905: LIST
7906: LIST
7907: LIST
7908: LIST
7909: LIST
7910: LIST
7911: LIST
7912: LIST
7913: PUSH
7914: LD_INT 101
7916: PUSH
7917: LD_INT 102
7919: PUSH
7920: LD_INT 105
7922: PUSH
7923: LD_INT 106
7925: PUSH
7926: LD_INT 108
7928: PUSH
7929: LD_INT 116
7931: PUSH
7932: LD_INT 117
7934: PUSH
7935: LD_INT 118
7937: PUSH
7938: EMPTY
7939: LIST
7940: LIST
7941: LIST
7942: LIST
7943: LIST
7944: LIST
7945: LIST
7946: LIST
7947: PUSH
7948: EMPTY
7949: LIST
7950: LIST
7951: ST_TO_ADDR
7952: GO 10935
7954: LD_INT 3
7956: DOUBLE
7957: EQUAL
7958: IFTRUE 7962
7960: GO 8050
7962: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
7963: LD_ADDR_VAR 0 2
7967: PUSH
7968: LD_INT 2
7970: PUSH
7971: LD_INT 4
7973: PUSH
7974: LD_INT 5
7976: PUSH
7977: LD_INT 11
7979: PUSH
7980: LD_INT 12
7982: PUSH
7983: LD_INT 15
7985: PUSH
7986: LD_INT 16
7988: PUSH
7989: LD_INT 22
7991: PUSH
7992: LD_INT 26
7994: PUSH
7995: LD_INT 36
7997: PUSH
7998: EMPTY
7999: LIST
8000: LIST
8001: LIST
8002: LIST
8003: LIST
8004: LIST
8005: LIST
8006: LIST
8007: LIST
8008: LIST
8009: PUSH
8010: LD_INT 101
8012: PUSH
8013: LD_INT 102
8015: PUSH
8016: LD_INT 105
8018: PUSH
8019: LD_INT 106
8021: PUSH
8022: LD_INT 108
8024: PUSH
8025: LD_INT 116
8027: PUSH
8028: LD_INT 117
8030: PUSH
8031: LD_INT 118
8033: PUSH
8034: EMPTY
8035: LIST
8036: LIST
8037: LIST
8038: LIST
8039: LIST
8040: LIST
8041: LIST
8042: LIST
8043: PUSH
8044: EMPTY
8045: LIST
8046: LIST
8047: ST_TO_ADDR
8048: GO 10935
8050: LD_INT 4
8052: DOUBLE
8053: EQUAL
8054: IFTRUE 8058
8056: GO 8154
8058: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
8059: LD_ADDR_VAR 0 2
8063: PUSH
8064: LD_INT 2
8066: PUSH
8067: LD_INT 4
8069: PUSH
8070: LD_INT 5
8072: PUSH
8073: LD_INT 8
8075: PUSH
8076: LD_INT 11
8078: PUSH
8079: LD_INT 12
8081: PUSH
8082: LD_INT 15
8084: PUSH
8085: LD_INT 16
8087: PUSH
8088: LD_INT 22
8090: PUSH
8091: LD_INT 23
8093: PUSH
8094: LD_INT 26
8096: PUSH
8097: LD_INT 36
8099: PUSH
8100: EMPTY
8101: LIST
8102: LIST
8103: LIST
8104: LIST
8105: LIST
8106: LIST
8107: LIST
8108: LIST
8109: LIST
8110: LIST
8111: LIST
8112: LIST
8113: PUSH
8114: LD_INT 101
8116: PUSH
8117: LD_INT 102
8119: PUSH
8120: LD_INT 105
8122: PUSH
8123: LD_INT 106
8125: PUSH
8126: LD_INT 108
8128: PUSH
8129: LD_INT 116
8131: PUSH
8132: LD_INT 117
8134: PUSH
8135: LD_INT 118
8137: PUSH
8138: EMPTY
8139: LIST
8140: LIST
8141: LIST
8142: LIST
8143: LIST
8144: LIST
8145: LIST
8146: LIST
8147: PUSH
8148: EMPTY
8149: LIST
8150: LIST
8151: ST_TO_ADDR
8152: GO 10935
8154: LD_INT 5
8156: DOUBLE
8157: EQUAL
8158: IFTRUE 8162
8160: GO 8274
8162: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
8163: LD_ADDR_VAR 0 2
8167: PUSH
8168: LD_INT 2
8170: PUSH
8171: LD_INT 4
8173: PUSH
8174: LD_INT 5
8176: PUSH
8177: LD_INT 6
8179: PUSH
8180: LD_INT 8
8182: PUSH
8183: LD_INT 11
8185: PUSH
8186: LD_INT 12
8188: PUSH
8189: LD_INT 15
8191: PUSH
8192: LD_INT 16
8194: PUSH
8195: LD_INT 22
8197: PUSH
8198: LD_INT 23
8200: PUSH
8201: LD_INT 25
8203: PUSH
8204: LD_INT 26
8206: PUSH
8207: LD_INT 36
8209: PUSH
8210: EMPTY
8211: LIST
8212: LIST
8213: LIST
8214: LIST
8215: LIST
8216: LIST
8217: LIST
8218: LIST
8219: LIST
8220: LIST
8221: LIST
8222: LIST
8223: LIST
8224: LIST
8225: PUSH
8226: LD_INT 101
8228: PUSH
8229: LD_INT 102
8231: PUSH
8232: LD_INT 105
8234: PUSH
8235: LD_INT 106
8237: PUSH
8238: LD_INT 108
8240: PUSH
8241: LD_INT 109
8243: PUSH
8244: LD_INT 112
8246: PUSH
8247: LD_INT 116
8249: PUSH
8250: LD_INT 117
8252: PUSH
8253: LD_INT 118
8255: PUSH
8256: EMPTY
8257: LIST
8258: LIST
8259: LIST
8260: LIST
8261: LIST
8262: LIST
8263: LIST
8264: LIST
8265: LIST
8266: LIST
8267: PUSH
8268: EMPTY
8269: LIST
8270: LIST
8271: ST_TO_ADDR
8272: GO 10935
8274: LD_INT 6
8276: DOUBLE
8277: EQUAL
8278: IFTRUE 8282
8280: GO 8414
8282: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
8283: LD_ADDR_VAR 0 2
8287: PUSH
8288: LD_INT 2
8290: PUSH
8291: LD_INT 4
8293: PUSH
8294: LD_INT 5
8296: PUSH
8297: LD_INT 6
8299: PUSH
8300: LD_INT 8
8302: PUSH
8303: LD_INT 11
8305: PUSH
8306: LD_INT 12
8308: PUSH
8309: LD_INT 15
8311: PUSH
8312: LD_INT 16
8314: PUSH
8315: LD_INT 20
8317: PUSH
8318: LD_INT 21
8320: PUSH
8321: LD_INT 22
8323: PUSH
8324: LD_INT 23
8326: PUSH
8327: LD_INT 25
8329: PUSH
8330: LD_INT 26
8332: PUSH
8333: LD_INT 30
8335: PUSH
8336: LD_INT 31
8338: PUSH
8339: LD_INT 32
8341: PUSH
8342: LD_INT 36
8344: PUSH
8345: EMPTY
8346: LIST
8347: LIST
8348: LIST
8349: LIST
8350: LIST
8351: LIST
8352: LIST
8353: LIST
8354: LIST
8355: LIST
8356: LIST
8357: LIST
8358: LIST
8359: LIST
8360: LIST
8361: LIST
8362: LIST
8363: LIST
8364: LIST
8365: PUSH
8366: LD_INT 101
8368: PUSH
8369: LD_INT 102
8371: PUSH
8372: LD_INT 105
8374: PUSH
8375: LD_INT 106
8377: PUSH
8378: LD_INT 108
8380: PUSH
8381: LD_INT 109
8383: PUSH
8384: LD_INT 112
8386: PUSH
8387: LD_INT 116
8389: PUSH
8390: LD_INT 117
8392: PUSH
8393: LD_INT 118
8395: PUSH
8396: EMPTY
8397: LIST
8398: LIST
8399: LIST
8400: LIST
8401: LIST
8402: LIST
8403: LIST
8404: LIST
8405: LIST
8406: LIST
8407: PUSH
8408: EMPTY
8409: LIST
8410: LIST
8411: ST_TO_ADDR
8412: GO 10935
8414: LD_INT 7
8416: DOUBLE
8417: EQUAL
8418: IFTRUE 8422
8420: GO 8534
8422: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
8423: LD_ADDR_VAR 0 2
8427: PUSH
8428: LD_INT 2
8430: PUSH
8431: LD_INT 4
8433: PUSH
8434: LD_INT 5
8436: PUSH
8437: LD_INT 7
8439: PUSH
8440: LD_INT 11
8442: PUSH
8443: LD_INT 12
8445: PUSH
8446: LD_INT 15
8448: PUSH
8449: LD_INT 16
8451: PUSH
8452: LD_INT 20
8454: PUSH
8455: LD_INT 21
8457: PUSH
8458: LD_INT 22
8460: PUSH
8461: LD_INT 23
8463: PUSH
8464: LD_INT 25
8466: PUSH
8467: LD_INT 26
8469: PUSH
8470: EMPTY
8471: LIST
8472: LIST
8473: LIST
8474: LIST
8475: LIST
8476: LIST
8477: LIST
8478: LIST
8479: LIST
8480: LIST
8481: LIST
8482: LIST
8483: LIST
8484: LIST
8485: PUSH
8486: LD_INT 101
8488: PUSH
8489: LD_INT 102
8491: PUSH
8492: LD_INT 103
8494: PUSH
8495: LD_INT 105
8497: PUSH
8498: LD_INT 106
8500: PUSH
8501: LD_INT 108
8503: PUSH
8504: LD_INT 112
8506: PUSH
8507: LD_INT 116
8509: PUSH
8510: LD_INT 117
8512: PUSH
8513: LD_INT 118
8515: PUSH
8516: EMPTY
8517: LIST
8518: LIST
8519: LIST
8520: LIST
8521: LIST
8522: LIST
8523: LIST
8524: LIST
8525: LIST
8526: LIST
8527: PUSH
8528: EMPTY
8529: LIST
8530: LIST
8531: ST_TO_ADDR
8532: GO 10935
8534: LD_INT 8
8536: DOUBLE
8537: EQUAL
8538: IFTRUE 8542
8540: GO 8682
8542: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
8543: LD_ADDR_VAR 0 2
8547: PUSH
8548: LD_INT 2
8550: PUSH
8551: LD_INT 4
8553: PUSH
8554: LD_INT 5
8556: PUSH
8557: LD_INT 6
8559: PUSH
8560: LD_INT 7
8562: PUSH
8563: LD_INT 8
8565: PUSH
8566: LD_INT 11
8568: PUSH
8569: LD_INT 12
8571: PUSH
8572: LD_INT 15
8574: PUSH
8575: LD_INT 16
8577: PUSH
8578: LD_INT 20
8580: PUSH
8581: LD_INT 21
8583: PUSH
8584: LD_INT 22
8586: PUSH
8587: LD_INT 23
8589: PUSH
8590: LD_INT 25
8592: PUSH
8593: LD_INT 26
8595: PUSH
8596: LD_INT 30
8598: PUSH
8599: LD_INT 31
8601: PUSH
8602: LD_INT 32
8604: PUSH
8605: LD_INT 36
8607: PUSH
8608: EMPTY
8609: LIST
8610: LIST
8611: LIST
8612: LIST
8613: LIST
8614: LIST
8615: LIST
8616: LIST
8617: LIST
8618: LIST
8619: LIST
8620: LIST
8621: LIST
8622: LIST
8623: LIST
8624: LIST
8625: LIST
8626: LIST
8627: LIST
8628: LIST
8629: PUSH
8630: LD_INT 101
8632: PUSH
8633: LD_INT 102
8635: PUSH
8636: LD_INT 103
8638: PUSH
8639: LD_INT 105
8641: PUSH
8642: LD_INT 106
8644: PUSH
8645: LD_INT 108
8647: PUSH
8648: LD_INT 109
8650: PUSH
8651: LD_INT 112
8653: PUSH
8654: LD_INT 116
8656: PUSH
8657: LD_INT 117
8659: PUSH
8660: LD_INT 118
8662: PUSH
8663: EMPTY
8664: LIST
8665: LIST
8666: LIST
8667: LIST
8668: LIST
8669: LIST
8670: LIST
8671: LIST
8672: LIST
8673: LIST
8674: LIST
8675: PUSH
8676: EMPTY
8677: LIST
8678: LIST
8679: ST_TO_ADDR
8680: GO 10935
8682: LD_INT 9
8684: DOUBLE
8685: EQUAL
8686: IFTRUE 8690
8688: GO 8838
8690: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
8691: LD_ADDR_VAR 0 2
8695: PUSH
8696: LD_INT 2
8698: PUSH
8699: LD_INT 4
8701: PUSH
8702: LD_INT 5
8704: PUSH
8705: LD_INT 6
8707: PUSH
8708: LD_INT 7
8710: PUSH
8711: LD_INT 8
8713: PUSH
8714: LD_INT 11
8716: PUSH
8717: LD_INT 12
8719: PUSH
8720: LD_INT 15
8722: PUSH
8723: LD_INT 16
8725: PUSH
8726: LD_INT 20
8728: PUSH
8729: LD_INT 21
8731: PUSH
8732: LD_INT 22
8734: PUSH
8735: LD_INT 23
8737: PUSH
8738: LD_INT 25
8740: PUSH
8741: LD_INT 26
8743: PUSH
8744: LD_INT 28
8746: PUSH
8747: LD_INT 30
8749: PUSH
8750: LD_INT 31
8752: PUSH
8753: LD_INT 32
8755: PUSH
8756: LD_INT 36
8758: PUSH
8759: EMPTY
8760: LIST
8761: LIST
8762: LIST
8763: LIST
8764: LIST
8765: LIST
8766: LIST
8767: LIST
8768: LIST
8769: LIST
8770: LIST
8771: LIST
8772: LIST
8773: LIST
8774: LIST
8775: LIST
8776: LIST
8777: LIST
8778: LIST
8779: LIST
8780: LIST
8781: PUSH
8782: LD_INT 101
8784: PUSH
8785: LD_INT 102
8787: PUSH
8788: LD_INT 103
8790: PUSH
8791: LD_INT 105
8793: PUSH
8794: LD_INT 106
8796: PUSH
8797: LD_INT 108
8799: PUSH
8800: LD_INT 109
8802: PUSH
8803: LD_INT 112
8805: PUSH
8806: LD_INT 114
8808: PUSH
8809: LD_INT 116
8811: PUSH
8812: LD_INT 117
8814: PUSH
8815: LD_INT 118
8817: PUSH
8818: EMPTY
8819: LIST
8820: LIST
8821: LIST
8822: LIST
8823: LIST
8824: LIST
8825: LIST
8826: LIST
8827: LIST
8828: LIST
8829: LIST
8830: LIST
8831: PUSH
8832: EMPTY
8833: LIST
8834: LIST
8835: ST_TO_ADDR
8836: GO 10935
8838: LD_INT 10
8840: DOUBLE
8841: EQUAL
8842: IFTRUE 8846
8844: GO 9042
8846: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
8847: LD_ADDR_VAR 0 2
8851: PUSH
8852: LD_INT 2
8854: PUSH
8855: LD_INT 4
8857: PUSH
8858: LD_INT 5
8860: PUSH
8861: LD_INT 6
8863: PUSH
8864: LD_INT 7
8866: PUSH
8867: LD_INT 8
8869: PUSH
8870: LD_INT 9
8872: PUSH
8873: LD_INT 10
8875: PUSH
8876: LD_INT 11
8878: PUSH
8879: LD_INT 12
8881: PUSH
8882: LD_INT 13
8884: PUSH
8885: LD_INT 14
8887: PUSH
8888: LD_INT 15
8890: PUSH
8891: LD_INT 16
8893: PUSH
8894: LD_INT 17
8896: PUSH
8897: LD_INT 18
8899: PUSH
8900: LD_INT 19
8902: PUSH
8903: LD_INT 20
8905: PUSH
8906: LD_INT 21
8908: PUSH
8909: LD_INT 22
8911: PUSH
8912: LD_INT 23
8914: PUSH
8915: LD_INT 24
8917: PUSH
8918: LD_INT 25
8920: PUSH
8921: LD_INT 26
8923: PUSH
8924: LD_INT 28
8926: PUSH
8927: LD_INT 30
8929: PUSH
8930: LD_INT 31
8932: PUSH
8933: LD_INT 32
8935: PUSH
8936: LD_INT 36
8938: PUSH
8939: EMPTY
8940: LIST
8941: LIST
8942: LIST
8943: LIST
8944: LIST
8945: LIST
8946: LIST
8947: LIST
8948: LIST
8949: LIST
8950: LIST
8951: LIST
8952: LIST
8953: LIST
8954: LIST
8955: LIST
8956: LIST
8957: LIST
8958: LIST
8959: LIST
8960: LIST
8961: LIST
8962: LIST
8963: LIST
8964: LIST
8965: LIST
8966: LIST
8967: LIST
8968: LIST
8969: PUSH
8970: LD_INT 101
8972: PUSH
8973: LD_INT 102
8975: PUSH
8976: LD_INT 103
8978: PUSH
8979: LD_INT 104
8981: PUSH
8982: LD_INT 105
8984: PUSH
8985: LD_INT 106
8987: PUSH
8988: LD_INT 107
8990: PUSH
8991: LD_INT 108
8993: PUSH
8994: LD_INT 109
8996: PUSH
8997: LD_INT 110
8999: PUSH
9000: LD_INT 111
9002: PUSH
9003: LD_INT 112
9005: PUSH
9006: LD_INT 114
9008: PUSH
9009: LD_INT 116
9011: PUSH
9012: LD_INT 117
9014: PUSH
9015: LD_INT 118
9017: PUSH
9018: EMPTY
9019: LIST
9020: LIST
9021: LIST
9022: LIST
9023: LIST
9024: LIST
9025: LIST
9026: LIST
9027: LIST
9028: LIST
9029: LIST
9030: LIST
9031: LIST
9032: LIST
9033: LIST
9034: LIST
9035: PUSH
9036: EMPTY
9037: LIST
9038: LIST
9039: ST_TO_ADDR
9040: GO 10935
9042: LD_INT 11
9044: DOUBLE
9045: EQUAL
9046: IFTRUE 9050
9048: GO 9254
9050: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
9051: LD_ADDR_VAR 0 2
9055: PUSH
9056: LD_INT 2
9058: PUSH
9059: LD_INT 3
9061: PUSH
9062: LD_INT 4
9064: PUSH
9065: LD_INT 5
9067: PUSH
9068: LD_INT 6
9070: PUSH
9071: LD_INT 7
9073: PUSH
9074: LD_INT 8
9076: PUSH
9077: LD_INT 9
9079: PUSH
9080: LD_INT 10
9082: PUSH
9083: LD_INT 11
9085: PUSH
9086: LD_INT 12
9088: PUSH
9089: LD_INT 13
9091: PUSH
9092: LD_INT 14
9094: PUSH
9095: LD_INT 15
9097: PUSH
9098: LD_INT 16
9100: PUSH
9101: LD_INT 17
9103: PUSH
9104: LD_INT 18
9106: PUSH
9107: LD_INT 19
9109: PUSH
9110: LD_INT 20
9112: PUSH
9113: LD_INT 21
9115: PUSH
9116: LD_INT 22
9118: PUSH
9119: LD_INT 23
9121: PUSH
9122: LD_INT 24
9124: PUSH
9125: LD_INT 25
9127: PUSH
9128: LD_INT 26
9130: PUSH
9131: LD_INT 28
9133: PUSH
9134: LD_INT 30
9136: PUSH
9137: LD_INT 31
9139: PUSH
9140: LD_INT 32
9142: PUSH
9143: LD_INT 34
9145: PUSH
9146: LD_INT 36
9148: PUSH
9149: EMPTY
9150: LIST
9151: LIST
9152: LIST
9153: LIST
9154: LIST
9155: LIST
9156: LIST
9157: LIST
9158: LIST
9159: LIST
9160: LIST
9161: LIST
9162: LIST
9163: LIST
9164: LIST
9165: LIST
9166: LIST
9167: LIST
9168: LIST
9169: LIST
9170: LIST
9171: LIST
9172: LIST
9173: LIST
9174: LIST
9175: LIST
9176: LIST
9177: LIST
9178: LIST
9179: LIST
9180: LIST
9181: PUSH
9182: LD_INT 101
9184: PUSH
9185: LD_INT 102
9187: PUSH
9188: LD_INT 103
9190: PUSH
9191: LD_INT 104
9193: PUSH
9194: LD_INT 105
9196: PUSH
9197: LD_INT 106
9199: PUSH
9200: LD_INT 107
9202: PUSH
9203: LD_INT 108
9205: PUSH
9206: LD_INT 109
9208: PUSH
9209: LD_INT 110
9211: PUSH
9212: LD_INT 111
9214: PUSH
9215: LD_INT 112
9217: PUSH
9218: LD_INT 114
9220: PUSH
9221: LD_INT 116
9223: PUSH
9224: LD_INT 117
9226: PUSH
9227: LD_INT 118
9229: PUSH
9230: EMPTY
9231: LIST
9232: LIST
9233: LIST
9234: LIST
9235: LIST
9236: LIST
9237: LIST
9238: LIST
9239: LIST
9240: LIST
9241: LIST
9242: LIST
9243: LIST
9244: LIST
9245: LIST
9246: LIST
9247: PUSH
9248: EMPTY
9249: LIST
9250: LIST
9251: ST_TO_ADDR
9252: GO 10935
9254: LD_INT 12
9256: DOUBLE
9257: EQUAL
9258: IFTRUE 9262
9260: GO 9482
9262: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
9263: LD_ADDR_VAR 0 2
9267: PUSH
9268: LD_INT 1
9270: PUSH
9271: LD_INT 2
9273: PUSH
9274: LD_INT 3
9276: PUSH
9277: LD_INT 4
9279: PUSH
9280: LD_INT 5
9282: PUSH
9283: LD_INT 6
9285: PUSH
9286: LD_INT 7
9288: PUSH
9289: LD_INT 8
9291: PUSH
9292: LD_INT 9
9294: PUSH
9295: LD_INT 10
9297: PUSH
9298: LD_INT 11
9300: PUSH
9301: LD_INT 12
9303: PUSH
9304: LD_INT 13
9306: PUSH
9307: LD_INT 14
9309: PUSH
9310: LD_INT 15
9312: PUSH
9313: LD_INT 16
9315: PUSH
9316: LD_INT 17
9318: PUSH
9319: LD_INT 18
9321: PUSH
9322: LD_INT 19
9324: PUSH
9325: LD_INT 20
9327: PUSH
9328: LD_INT 21
9330: PUSH
9331: LD_INT 22
9333: PUSH
9334: LD_INT 23
9336: PUSH
9337: LD_INT 24
9339: PUSH
9340: LD_INT 25
9342: PUSH
9343: LD_INT 26
9345: PUSH
9346: LD_INT 27
9348: PUSH
9349: LD_INT 28
9351: PUSH
9352: LD_INT 30
9354: PUSH
9355: LD_INT 31
9357: PUSH
9358: LD_INT 32
9360: PUSH
9361: LD_INT 33
9363: PUSH
9364: LD_INT 34
9366: PUSH
9367: LD_INT 36
9369: PUSH
9370: EMPTY
9371: LIST
9372: LIST
9373: LIST
9374: LIST
9375: LIST
9376: LIST
9377: LIST
9378: LIST
9379: LIST
9380: LIST
9381: LIST
9382: LIST
9383: LIST
9384: LIST
9385: LIST
9386: LIST
9387: LIST
9388: LIST
9389: LIST
9390: LIST
9391: LIST
9392: LIST
9393: LIST
9394: LIST
9395: LIST
9396: LIST
9397: LIST
9398: LIST
9399: LIST
9400: LIST
9401: LIST
9402: LIST
9403: LIST
9404: LIST
9405: PUSH
9406: LD_INT 101
9408: PUSH
9409: LD_INT 102
9411: PUSH
9412: LD_INT 103
9414: PUSH
9415: LD_INT 104
9417: PUSH
9418: LD_INT 105
9420: PUSH
9421: LD_INT 106
9423: PUSH
9424: LD_INT 107
9426: PUSH
9427: LD_INT 108
9429: PUSH
9430: LD_INT 109
9432: PUSH
9433: LD_INT 110
9435: PUSH
9436: LD_INT 111
9438: PUSH
9439: LD_INT 112
9441: PUSH
9442: LD_INT 113
9444: PUSH
9445: LD_INT 114
9447: PUSH
9448: LD_INT 116
9450: PUSH
9451: LD_INT 117
9453: PUSH
9454: LD_INT 118
9456: PUSH
9457: EMPTY
9458: LIST
9459: LIST
9460: LIST
9461: LIST
9462: LIST
9463: LIST
9464: LIST
9465: LIST
9466: LIST
9467: LIST
9468: LIST
9469: LIST
9470: LIST
9471: LIST
9472: LIST
9473: LIST
9474: LIST
9475: PUSH
9476: EMPTY
9477: LIST
9478: LIST
9479: ST_TO_ADDR
9480: GO 10935
9482: LD_INT 13
9484: DOUBLE
9485: EQUAL
9486: IFTRUE 9490
9488: GO 9698
9490: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
9491: LD_ADDR_VAR 0 2
9495: PUSH
9496: LD_INT 1
9498: PUSH
9499: LD_INT 2
9501: PUSH
9502: LD_INT 3
9504: PUSH
9505: LD_INT 4
9507: PUSH
9508: LD_INT 5
9510: PUSH
9511: LD_INT 8
9513: PUSH
9514: LD_INT 9
9516: PUSH
9517: LD_INT 10
9519: PUSH
9520: LD_INT 11
9522: PUSH
9523: LD_INT 12
9525: PUSH
9526: LD_INT 14
9528: PUSH
9529: LD_INT 15
9531: PUSH
9532: LD_INT 16
9534: PUSH
9535: LD_INT 17
9537: PUSH
9538: LD_INT 18
9540: PUSH
9541: LD_INT 19
9543: PUSH
9544: LD_INT 20
9546: PUSH
9547: LD_INT 21
9549: PUSH
9550: LD_INT 22
9552: PUSH
9553: LD_INT 23
9555: PUSH
9556: LD_INT 24
9558: PUSH
9559: LD_INT 25
9561: PUSH
9562: LD_INT 26
9564: PUSH
9565: LD_INT 27
9567: PUSH
9568: LD_INT 28
9570: PUSH
9571: LD_INT 30
9573: PUSH
9574: LD_INT 31
9576: PUSH
9577: LD_INT 32
9579: PUSH
9580: LD_INT 33
9582: PUSH
9583: LD_INT 34
9585: PUSH
9586: LD_INT 36
9588: PUSH
9589: EMPTY
9590: LIST
9591: LIST
9592: LIST
9593: LIST
9594: LIST
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: LIST
9600: LIST
9601: LIST
9602: LIST
9603: LIST
9604: LIST
9605: LIST
9606: LIST
9607: LIST
9608: LIST
9609: LIST
9610: LIST
9611: LIST
9612: LIST
9613: LIST
9614: LIST
9615: LIST
9616: LIST
9617: LIST
9618: LIST
9619: LIST
9620: LIST
9621: PUSH
9622: LD_INT 101
9624: PUSH
9625: LD_INT 102
9627: PUSH
9628: LD_INT 103
9630: PUSH
9631: LD_INT 104
9633: PUSH
9634: LD_INT 105
9636: PUSH
9637: LD_INT 106
9639: PUSH
9640: LD_INT 107
9642: PUSH
9643: LD_INT 108
9645: PUSH
9646: LD_INT 109
9648: PUSH
9649: LD_INT 110
9651: PUSH
9652: LD_INT 111
9654: PUSH
9655: LD_INT 112
9657: PUSH
9658: LD_INT 113
9660: PUSH
9661: LD_INT 114
9663: PUSH
9664: LD_INT 116
9666: PUSH
9667: LD_INT 117
9669: PUSH
9670: LD_INT 118
9672: PUSH
9673: EMPTY
9674: LIST
9675: LIST
9676: LIST
9677: LIST
9678: LIST
9679: LIST
9680: LIST
9681: LIST
9682: LIST
9683: LIST
9684: LIST
9685: LIST
9686: LIST
9687: LIST
9688: LIST
9689: LIST
9690: LIST
9691: PUSH
9692: EMPTY
9693: LIST
9694: LIST
9695: ST_TO_ADDR
9696: GO 10935
9698: LD_INT 14
9700: DOUBLE
9701: EQUAL
9702: IFTRUE 9706
9704: GO 9930
9706: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
9707: LD_ADDR_VAR 0 2
9711: PUSH
9712: LD_INT 1
9714: PUSH
9715: LD_INT 2
9717: PUSH
9718: LD_INT 3
9720: PUSH
9721: LD_INT 4
9723: PUSH
9724: LD_INT 5
9726: PUSH
9727: LD_INT 6
9729: PUSH
9730: LD_INT 7
9732: PUSH
9733: LD_INT 8
9735: PUSH
9736: LD_INT 9
9738: PUSH
9739: LD_INT 10
9741: PUSH
9742: LD_INT 11
9744: PUSH
9745: LD_INT 12
9747: PUSH
9748: LD_INT 13
9750: PUSH
9751: LD_INT 14
9753: PUSH
9754: LD_INT 15
9756: PUSH
9757: LD_INT 16
9759: PUSH
9760: LD_INT 17
9762: PUSH
9763: LD_INT 18
9765: PUSH
9766: LD_INT 19
9768: PUSH
9769: LD_INT 20
9771: PUSH
9772: LD_INT 21
9774: PUSH
9775: LD_INT 22
9777: PUSH
9778: LD_INT 23
9780: PUSH
9781: LD_INT 24
9783: PUSH
9784: LD_INT 25
9786: PUSH
9787: LD_INT 26
9789: PUSH
9790: LD_INT 27
9792: PUSH
9793: LD_INT 28
9795: PUSH
9796: LD_INT 29
9798: PUSH
9799: LD_INT 30
9801: PUSH
9802: LD_INT 31
9804: PUSH
9805: LD_INT 32
9807: PUSH
9808: LD_INT 33
9810: PUSH
9811: LD_INT 34
9813: PUSH
9814: LD_INT 36
9816: PUSH
9817: EMPTY
9818: LIST
9819: LIST
9820: LIST
9821: LIST
9822: LIST
9823: LIST
9824: LIST
9825: LIST
9826: LIST
9827: LIST
9828: LIST
9829: LIST
9830: LIST
9831: LIST
9832: LIST
9833: LIST
9834: LIST
9835: LIST
9836: LIST
9837: LIST
9838: LIST
9839: LIST
9840: LIST
9841: LIST
9842: LIST
9843: LIST
9844: LIST
9845: LIST
9846: LIST
9847: LIST
9848: LIST
9849: LIST
9850: LIST
9851: LIST
9852: LIST
9853: PUSH
9854: LD_INT 101
9856: PUSH
9857: LD_INT 102
9859: PUSH
9860: LD_INT 103
9862: PUSH
9863: LD_INT 104
9865: PUSH
9866: LD_INT 105
9868: PUSH
9869: LD_INT 106
9871: PUSH
9872: LD_INT 107
9874: PUSH
9875: LD_INT 108
9877: PUSH
9878: LD_INT 109
9880: PUSH
9881: LD_INT 110
9883: PUSH
9884: LD_INT 111
9886: PUSH
9887: LD_INT 112
9889: PUSH
9890: LD_INT 113
9892: PUSH
9893: LD_INT 114
9895: PUSH
9896: LD_INT 116
9898: PUSH
9899: LD_INT 117
9901: PUSH
9902: LD_INT 118
9904: PUSH
9905: EMPTY
9906: LIST
9907: LIST
9908: LIST
9909: LIST
9910: LIST
9911: LIST
9912: LIST
9913: LIST
9914: LIST
9915: LIST
9916: LIST
9917: LIST
9918: LIST
9919: LIST
9920: LIST
9921: LIST
9922: LIST
9923: PUSH
9924: EMPTY
9925: LIST
9926: LIST
9927: ST_TO_ADDR
9928: GO 10935
9930: LD_INT 15
9932: DOUBLE
9933: EQUAL
9934: IFTRUE 9938
9936: GO 10162
9938: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
9939: LD_ADDR_VAR 0 2
9943: PUSH
9944: LD_INT 1
9946: PUSH
9947: LD_INT 2
9949: PUSH
9950: LD_INT 3
9952: PUSH
9953: LD_INT 4
9955: PUSH
9956: LD_INT 5
9958: PUSH
9959: LD_INT 6
9961: PUSH
9962: LD_INT 7
9964: PUSH
9965: LD_INT 8
9967: PUSH
9968: LD_INT 9
9970: PUSH
9971: LD_INT 10
9973: PUSH
9974: LD_INT 11
9976: PUSH
9977: LD_INT 12
9979: PUSH
9980: LD_INT 13
9982: PUSH
9983: LD_INT 14
9985: PUSH
9986: LD_INT 15
9988: PUSH
9989: LD_INT 16
9991: PUSH
9992: LD_INT 17
9994: PUSH
9995: LD_INT 18
9997: PUSH
9998: LD_INT 19
10000: PUSH
10001: LD_INT 20
10003: PUSH
10004: LD_INT 21
10006: PUSH
10007: LD_INT 22
10009: PUSH
10010: LD_INT 23
10012: PUSH
10013: LD_INT 24
10015: PUSH
10016: LD_INT 25
10018: PUSH
10019: LD_INT 26
10021: PUSH
10022: LD_INT 27
10024: PUSH
10025: LD_INT 28
10027: PUSH
10028: LD_INT 29
10030: PUSH
10031: LD_INT 30
10033: PUSH
10034: LD_INT 31
10036: PUSH
10037: LD_INT 32
10039: PUSH
10040: LD_INT 33
10042: PUSH
10043: LD_INT 34
10045: PUSH
10046: LD_INT 36
10048: PUSH
10049: EMPTY
10050: LIST
10051: LIST
10052: LIST
10053: LIST
10054: LIST
10055: LIST
10056: LIST
10057: LIST
10058: LIST
10059: LIST
10060: LIST
10061: LIST
10062: LIST
10063: LIST
10064: LIST
10065: LIST
10066: LIST
10067: LIST
10068: LIST
10069: LIST
10070: LIST
10071: LIST
10072: LIST
10073: LIST
10074: LIST
10075: LIST
10076: LIST
10077: LIST
10078: LIST
10079: LIST
10080: LIST
10081: LIST
10082: LIST
10083: LIST
10084: LIST
10085: PUSH
10086: LD_INT 101
10088: PUSH
10089: LD_INT 102
10091: PUSH
10092: LD_INT 103
10094: PUSH
10095: LD_INT 104
10097: PUSH
10098: LD_INT 105
10100: PUSH
10101: LD_INT 106
10103: PUSH
10104: LD_INT 107
10106: PUSH
10107: LD_INT 108
10109: PUSH
10110: LD_INT 109
10112: PUSH
10113: LD_INT 110
10115: PUSH
10116: LD_INT 111
10118: PUSH
10119: LD_INT 112
10121: PUSH
10122: LD_INT 113
10124: PUSH
10125: LD_INT 114
10127: PUSH
10128: LD_INT 116
10130: PUSH
10131: LD_INT 117
10133: PUSH
10134: LD_INT 118
10136: PUSH
10137: EMPTY
10138: LIST
10139: LIST
10140: LIST
10141: LIST
10142: LIST
10143: LIST
10144: LIST
10145: LIST
10146: LIST
10147: LIST
10148: LIST
10149: LIST
10150: LIST
10151: LIST
10152: LIST
10153: LIST
10154: LIST
10155: PUSH
10156: EMPTY
10157: LIST
10158: LIST
10159: ST_TO_ADDR
10160: GO 10935
10162: LD_INT 16
10164: DOUBLE
10165: EQUAL
10166: IFTRUE 10170
10168: GO 10306
10170: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
10171: LD_ADDR_VAR 0 2
10175: PUSH
10176: LD_INT 2
10178: PUSH
10179: LD_INT 4
10181: PUSH
10182: LD_INT 5
10184: PUSH
10185: LD_INT 7
10187: PUSH
10188: LD_INT 11
10190: PUSH
10191: LD_INT 12
10193: PUSH
10194: LD_INT 15
10196: PUSH
10197: LD_INT 16
10199: PUSH
10200: LD_INT 20
10202: PUSH
10203: LD_INT 21
10205: PUSH
10206: LD_INT 22
10208: PUSH
10209: LD_INT 23
10211: PUSH
10212: LD_INT 25
10214: PUSH
10215: LD_INT 26
10217: PUSH
10218: LD_INT 30
10220: PUSH
10221: LD_INT 31
10223: PUSH
10224: LD_INT 32
10226: PUSH
10227: LD_INT 33
10229: PUSH
10230: LD_INT 34
10232: PUSH
10233: EMPTY
10234: LIST
10235: LIST
10236: LIST
10237: LIST
10238: LIST
10239: LIST
10240: LIST
10241: LIST
10242: LIST
10243: LIST
10244: LIST
10245: LIST
10246: LIST
10247: LIST
10248: LIST
10249: LIST
10250: LIST
10251: LIST
10252: LIST
10253: PUSH
10254: LD_INT 101
10256: PUSH
10257: LD_INT 102
10259: PUSH
10260: LD_INT 103
10262: PUSH
10263: LD_INT 106
10265: PUSH
10266: LD_INT 108
10268: PUSH
10269: LD_INT 112
10271: PUSH
10272: LD_INT 113
10274: PUSH
10275: LD_INT 114
10277: PUSH
10278: LD_INT 116
10280: PUSH
10281: LD_INT 117
10283: PUSH
10284: LD_INT 118
10286: PUSH
10287: EMPTY
10288: LIST
10289: LIST
10290: LIST
10291: LIST
10292: LIST
10293: LIST
10294: LIST
10295: LIST
10296: LIST
10297: LIST
10298: LIST
10299: PUSH
10300: EMPTY
10301: LIST
10302: LIST
10303: ST_TO_ADDR
10304: GO 10935
10306: LD_INT 17
10308: DOUBLE
10309: EQUAL
10310: IFTRUE 10314
10312: GO 10538
10314: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
10315: LD_ADDR_VAR 0 2
10319: PUSH
10320: LD_INT 1
10322: PUSH
10323: LD_INT 2
10325: PUSH
10326: LD_INT 3
10328: PUSH
10329: LD_INT 4
10331: PUSH
10332: LD_INT 5
10334: PUSH
10335: LD_INT 6
10337: PUSH
10338: LD_INT 7
10340: PUSH
10341: LD_INT 8
10343: PUSH
10344: LD_INT 9
10346: PUSH
10347: LD_INT 10
10349: PUSH
10350: LD_INT 11
10352: PUSH
10353: LD_INT 12
10355: PUSH
10356: LD_INT 13
10358: PUSH
10359: LD_INT 14
10361: PUSH
10362: LD_INT 15
10364: PUSH
10365: LD_INT 16
10367: PUSH
10368: LD_INT 17
10370: PUSH
10371: LD_INT 18
10373: PUSH
10374: LD_INT 19
10376: PUSH
10377: LD_INT 20
10379: PUSH
10380: LD_INT 21
10382: PUSH
10383: LD_INT 22
10385: PUSH
10386: LD_INT 23
10388: PUSH
10389: LD_INT 24
10391: PUSH
10392: LD_INT 25
10394: PUSH
10395: LD_INT 26
10397: PUSH
10398: LD_INT 27
10400: PUSH
10401: LD_INT 28
10403: PUSH
10404: LD_INT 29
10406: PUSH
10407: LD_INT 30
10409: PUSH
10410: LD_INT 31
10412: PUSH
10413: LD_INT 32
10415: PUSH
10416: LD_INT 33
10418: PUSH
10419: LD_INT 34
10421: PUSH
10422: LD_INT 36
10424: PUSH
10425: EMPTY
10426: LIST
10427: LIST
10428: LIST
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: LIST
10434: LIST
10435: LIST
10436: LIST
10437: LIST
10438: LIST
10439: LIST
10440: LIST
10441: LIST
10442: LIST
10443: LIST
10444: LIST
10445: LIST
10446: LIST
10447: LIST
10448: LIST
10449: LIST
10450: LIST
10451: LIST
10452: LIST
10453: LIST
10454: LIST
10455: LIST
10456: LIST
10457: LIST
10458: LIST
10459: LIST
10460: LIST
10461: PUSH
10462: LD_INT 101
10464: PUSH
10465: LD_INT 102
10467: PUSH
10468: LD_INT 103
10470: PUSH
10471: LD_INT 104
10473: PUSH
10474: LD_INT 105
10476: PUSH
10477: LD_INT 106
10479: PUSH
10480: LD_INT 107
10482: PUSH
10483: LD_INT 108
10485: PUSH
10486: LD_INT 109
10488: PUSH
10489: LD_INT 110
10491: PUSH
10492: LD_INT 111
10494: PUSH
10495: LD_INT 112
10497: PUSH
10498: LD_INT 113
10500: PUSH
10501: LD_INT 114
10503: PUSH
10504: LD_INT 116
10506: PUSH
10507: LD_INT 117
10509: PUSH
10510: LD_INT 118
10512: PUSH
10513: EMPTY
10514: LIST
10515: LIST
10516: LIST
10517: LIST
10518: LIST
10519: LIST
10520: LIST
10521: LIST
10522: LIST
10523: LIST
10524: LIST
10525: LIST
10526: LIST
10527: LIST
10528: LIST
10529: LIST
10530: LIST
10531: PUSH
10532: EMPTY
10533: LIST
10534: LIST
10535: ST_TO_ADDR
10536: GO 10935
10538: LD_INT 18
10540: DOUBLE
10541: EQUAL
10542: IFTRUE 10546
10544: GO 10694
10546: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
10547: LD_ADDR_VAR 0 2
10551: PUSH
10552: LD_INT 2
10554: PUSH
10555: LD_INT 4
10557: PUSH
10558: LD_INT 5
10560: PUSH
10561: LD_INT 7
10563: PUSH
10564: LD_INT 11
10566: PUSH
10567: LD_INT 12
10569: PUSH
10570: LD_INT 15
10572: PUSH
10573: LD_INT 16
10575: PUSH
10576: LD_INT 20
10578: PUSH
10579: LD_INT 21
10581: PUSH
10582: LD_INT 22
10584: PUSH
10585: LD_INT 23
10587: PUSH
10588: LD_INT 25
10590: PUSH
10591: LD_INT 26
10593: PUSH
10594: LD_INT 30
10596: PUSH
10597: LD_INT 31
10599: PUSH
10600: LD_INT 32
10602: PUSH
10603: LD_INT 33
10605: PUSH
10606: LD_INT 34
10608: PUSH
10609: LD_INT 35
10611: PUSH
10612: LD_INT 36
10614: PUSH
10615: EMPTY
10616: LIST
10617: LIST
10618: LIST
10619: LIST
10620: LIST
10621: LIST
10622: LIST
10623: LIST
10624: LIST
10625: LIST
10626: LIST
10627: LIST
10628: LIST
10629: LIST
10630: LIST
10631: LIST
10632: LIST
10633: LIST
10634: LIST
10635: LIST
10636: LIST
10637: PUSH
10638: LD_INT 101
10640: PUSH
10641: LD_INT 102
10643: PUSH
10644: LD_INT 103
10646: PUSH
10647: LD_INT 106
10649: PUSH
10650: LD_INT 108
10652: PUSH
10653: LD_INT 112
10655: PUSH
10656: LD_INT 113
10658: PUSH
10659: LD_INT 114
10661: PUSH
10662: LD_INT 115
10664: PUSH
10665: LD_INT 116
10667: PUSH
10668: LD_INT 117
10670: PUSH
10671: LD_INT 118
10673: PUSH
10674: EMPTY
10675: LIST
10676: LIST
10677: LIST
10678: LIST
10679: LIST
10680: LIST
10681: LIST
10682: LIST
10683: LIST
10684: LIST
10685: LIST
10686: LIST
10687: PUSH
10688: EMPTY
10689: LIST
10690: LIST
10691: ST_TO_ADDR
10692: GO 10935
10694: LD_INT 19
10696: DOUBLE
10697: EQUAL
10698: IFTRUE 10702
10700: GO 10934
10702: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
10703: LD_ADDR_VAR 0 2
10707: PUSH
10708: LD_INT 1
10710: PUSH
10711: LD_INT 2
10713: PUSH
10714: LD_INT 3
10716: PUSH
10717: LD_INT 4
10719: PUSH
10720: LD_INT 5
10722: PUSH
10723: LD_INT 6
10725: PUSH
10726: LD_INT 7
10728: PUSH
10729: LD_INT 8
10731: PUSH
10732: LD_INT 9
10734: PUSH
10735: LD_INT 10
10737: PUSH
10738: LD_INT 11
10740: PUSH
10741: LD_INT 12
10743: PUSH
10744: LD_INT 13
10746: PUSH
10747: LD_INT 14
10749: PUSH
10750: LD_INT 15
10752: PUSH
10753: LD_INT 16
10755: PUSH
10756: LD_INT 17
10758: PUSH
10759: LD_INT 18
10761: PUSH
10762: LD_INT 19
10764: PUSH
10765: LD_INT 20
10767: PUSH
10768: LD_INT 21
10770: PUSH
10771: LD_INT 22
10773: PUSH
10774: LD_INT 23
10776: PUSH
10777: LD_INT 24
10779: PUSH
10780: LD_INT 25
10782: PUSH
10783: LD_INT 26
10785: PUSH
10786: LD_INT 27
10788: PUSH
10789: LD_INT 28
10791: PUSH
10792: LD_INT 29
10794: PUSH
10795: LD_INT 30
10797: PUSH
10798: LD_INT 31
10800: PUSH
10801: LD_INT 32
10803: PUSH
10804: LD_INT 33
10806: PUSH
10807: LD_INT 34
10809: PUSH
10810: LD_INT 35
10812: PUSH
10813: LD_INT 36
10815: PUSH
10816: EMPTY
10817: LIST
10818: LIST
10819: LIST
10820: LIST
10821: LIST
10822: LIST
10823: LIST
10824: LIST
10825: LIST
10826: LIST
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: LIST
10832: LIST
10833: LIST
10834: LIST
10835: LIST
10836: LIST
10837: LIST
10838: LIST
10839: LIST
10840: LIST
10841: LIST
10842: LIST
10843: LIST
10844: LIST
10845: LIST
10846: LIST
10847: LIST
10848: LIST
10849: LIST
10850: LIST
10851: LIST
10852: LIST
10853: PUSH
10854: LD_INT 101
10856: PUSH
10857: LD_INT 102
10859: PUSH
10860: LD_INT 103
10862: PUSH
10863: LD_INT 104
10865: PUSH
10866: LD_INT 105
10868: PUSH
10869: LD_INT 106
10871: PUSH
10872: LD_INT 107
10874: PUSH
10875: LD_INT 108
10877: PUSH
10878: LD_INT 109
10880: PUSH
10881: LD_INT 110
10883: PUSH
10884: LD_INT 111
10886: PUSH
10887: LD_INT 112
10889: PUSH
10890: LD_INT 113
10892: PUSH
10893: LD_INT 114
10895: PUSH
10896: LD_INT 115
10898: PUSH
10899: LD_INT 116
10901: PUSH
10902: LD_INT 117
10904: PUSH
10905: LD_INT 118
10907: PUSH
10908: EMPTY
10909: LIST
10910: LIST
10911: LIST
10912: LIST
10913: LIST
10914: LIST
10915: LIST
10916: LIST
10917: LIST
10918: LIST
10919: LIST
10920: LIST
10921: LIST
10922: LIST
10923: LIST
10924: LIST
10925: LIST
10926: LIST
10927: PUSH
10928: EMPTY
10929: LIST
10930: LIST
10931: ST_TO_ADDR
10932: GO 10935
10934: POP
// end else
10935: GO 11166
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
10937: LD_ADDR_VAR 0 2
10941: PUSH
10942: LD_INT 1
10944: PUSH
10945: LD_INT 2
10947: PUSH
10948: LD_INT 3
10950: PUSH
10951: LD_INT 4
10953: PUSH
10954: LD_INT 5
10956: PUSH
10957: LD_INT 6
10959: PUSH
10960: LD_INT 7
10962: PUSH
10963: LD_INT 8
10965: PUSH
10966: LD_INT 9
10968: PUSH
10969: LD_INT 10
10971: PUSH
10972: LD_INT 11
10974: PUSH
10975: LD_INT 12
10977: PUSH
10978: LD_INT 13
10980: PUSH
10981: LD_INT 14
10983: PUSH
10984: LD_INT 15
10986: PUSH
10987: LD_INT 16
10989: PUSH
10990: LD_INT 17
10992: PUSH
10993: LD_INT 18
10995: PUSH
10996: LD_INT 19
10998: PUSH
10999: LD_INT 20
11001: PUSH
11002: LD_INT 21
11004: PUSH
11005: LD_INT 22
11007: PUSH
11008: LD_INT 23
11010: PUSH
11011: LD_INT 24
11013: PUSH
11014: LD_INT 25
11016: PUSH
11017: LD_INT 26
11019: PUSH
11020: LD_INT 27
11022: PUSH
11023: LD_INT 28
11025: PUSH
11026: LD_INT 29
11028: PUSH
11029: LD_INT 30
11031: PUSH
11032: LD_INT 31
11034: PUSH
11035: LD_INT 32
11037: PUSH
11038: LD_INT 33
11040: PUSH
11041: LD_INT 34
11043: PUSH
11044: LD_INT 35
11046: PUSH
11047: LD_INT 36
11049: PUSH
11050: EMPTY
11051: LIST
11052: LIST
11053: LIST
11054: LIST
11055: LIST
11056: LIST
11057: LIST
11058: LIST
11059: LIST
11060: LIST
11061: LIST
11062: LIST
11063: LIST
11064: LIST
11065: LIST
11066: LIST
11067: LIST
11068: LIST
11069: LIST
11070: LIST
11071: LIST
11072: LIST
11073: LIST
11074: LIST
11075: LIST
11076: LIST
11077: LIST
11078: LIST
11079: LIST
11080: LIST
11081: LIST
11082: LIST
11083: LIST
11084: LIST
11085: LIST
11086: LIST
11087: PUSH
11088: LD_INT 101
11090: PUSH
11091: LD_INT 102
11093: PUSH
11094: LD_INT 103
11096: PUSH
11097: LD_INT 104
11099: PUSH
11100: LD_INT 105
11102: PUSH
11103: LD_INT 106
11105: PUSH
11106: LD_INT 107
11108: PUSH
11109: LD_INT 108
11111: PUSH
11112: LD_INT 109
11114: PUSH
11115: LD_INT 110
11117: PUSH
11118: LD_INT 111
11120: PUSH
11121: LD_INT 112
11123: PUSH
11124: LD_INT 113
11126: PUSH
11127: LD_INT 114
11129: PUSH
11130: LD_INT 115
11132: PUSH
11133: LD_INT 116
11135: PUSH
11136: LD_INT 117
11138: PUSH
11139: LD_INT 118
11141: PUSH
11142: EMPTY
11143: LIST
11144: LIST
11145: LIST
11146: LIST
11147: LIST
11148: LIST
11149: LIST
11150: LIST
11151: LIST
11152: LIST
11153: LIST
11154: LIST
11155: LIST
11156: LIST
11157: LIST
11158: LIST
11159: LIST
11160: LIST
11161: PUSH
11162: EMPTY
11163: LIST
11164: LIST
11165: ST_TO_ADDR
// if result then
11166: LD_VAR 0 2
11170: IFFALSE 11956
// begin normal :=  ;
11172: LD_ADDR_VAR 0 5
11176: PUSH
11177: LD_STRING 
11179: ST_TO_ADDR
// hardcore :=  ;
11180: LD_ADDR_VAR 0 6
11184: PUSH
11185: LD_STRING 
11187: ST_TO_ADDR
// active :=  ;
11188: LD_ADDR_VAR 0 7
11192: PUSH
11193: LD_STRING 
11195: ST_TO_ADDR
// for i = 1 to normalCounter do
11196: LD_ADDR_VAR 0 8
11200: PUSH
11201: DOUBLE
11202: LD_INT 1
11204: DEC
11205: ST_TO_ADDR
11206: LD_EXP 27
11210: PUSH
11211: FOR_TO
11212: IFFALSE 11313
// begin tmp := 0 ;
11214: LD_ADDR_VAR 0 3
11218: PUSH
11219: LD_STRING 0
11221: ST_TO_ADDR
// if result [ 1 ] then
11222: LD_VAR 0 2
11226: PUSH
11227: LD_INT 1
11229: ARRAY
11230: IFFALSE 11295
// if result [ 1 ] [ 1 ] = i then
11232: LD_VAR 0 2
11236: PUSH
11237: LD_INT 1
11239: ARRAY
11240: PUSH
11241: LD_INT 1
11243: ARRAY
11244: PUSH
11245: LD_VAR 0 8
11249: EQUAL
11250: IFFALSE 11295
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
11252: LD_ADDR_VAR 0 2
11256: PUSH
11257: LD_VAR 0 2
11261: PPUSH
11262: LD_INT 1
11264: PPUSH
11265: LD_VAR 0 2
11269: PUSH
11270: LD_INT 1
11272: ARRAY
11273: PPUSH
11274: LD_INT 1
11276: PPUSH
11277: CALL_OW 3
11281: PPUSH
11282: CALL_OW 1
11286: ST_TO_ADDR
// tmp := 1 ;
11287: LD_ADDR_VAR 0 3
11291: PUSH
11292: LD_STRING 1
11294: ST_TO_ADDR
// end ; normal := normal & tmp ;
11295: LD_ADDR_VAR 0 5
11299: PUSH
11300: LD_VAR 0 5
11304: PUSH
11305: LD_VAR 0 3
11309: STR
11310: ST_TO_ADDR
// end ;
11311: GO 11211
11313: POP
11314: POP
// for i = 1 to hardcoreCounter do
11315: LD_ADDR_VAR 0 8
11319: PUSH
11320: DOUBLE
11321: LD_INT 1
11323: DEC
11324: ST_TO_ADDR
11325: LD_EXP 28
11329: PUSH
11330: FOR_TO
11331: IFFALSE 11436
// begin tmp := 0 ;
11333: LD_ADDR_VAR 0 3
11337: PUSH
11338: LD_STRING 0
11340: ST_TO_ADDR
// if result [ 2 ] then
11341: LD_VAR 0 2
11345: PUSH
11346: LD_INT 2
11348: ARRAY
11349: IFFALSE 11418
// if result [ 2 ] [ 1 ] = 100 + i then
11351: LD_VAR 0 2
11355: PUSH
11356: LD_INT 2
11358: ARRAY
11359: PUSH
11360: LD_INT 1
11362: ARRAY
11363: PUSH
11364: LD_INT 100
11366: PUSH
11367: LD_VAR 0 8
11371: PLUS
11372: EQUAL
11373: IFFALSE 11418
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
11375: LD_ADDR_VAR 0 2
11379: PUSH
11380: LD_VAR 0 2
11384: PPUSH
11385: LD_INT 2
11387: PPUSH
11388: LD_VAR 0 2
11392: PUSH
11393: LD_INT 2
11395: ARRAY
11396: PPUSH
11397: LD_INT 1
11399: PPUSH
11400: CALL_OW 3
11404: PPUSH
11405: CALL_OW 1
11409: ST_TO_ADDR
// tmp := 1 ;
11410: LD_ADDR_VAR 0 3
11414: PUSH
11415: LD_STRING 1
11417: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
11418: LD_ADDR_VAR 0 6
11422: PUSH
11423: LD_VAR 0 6
11427: PUSH
11428: LD_VAR 0 3
11432: STR
11433: ST_TO_ADDR
// end ;
11434: GO 11330
11436: POP
11437: POP
// if isGameLoad then
11438: LD_VAR 0 1
11442: IFFALSE 11917
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
11444: LD_ADDR_VAR 0 4
11448: PUSH
11449: LD_EXP 31
11453: PUSH
11454: LD_EXP 30
11458: PUSH
11459: LD_EXP 32
11463: PUSH
11464: LD_EXP 29
11468: PUSH
11469: LD_EXP 33
11473: PUSH
11474: LD_EXP 34
11478: PUSH
11479: LD_EXP 35
11483: PUSH
11484: LD_EXP 36
11488: PUSH
11489: LD_EXP 37
11493: PUSH
11494: LD_EXP 38
11498: PUSH
11499: LD_EXP 39
11503: PUSH
11504: LD_EXP 40
11508: PUSH
11509: LD_EXP 41
11513: PUSH
11514: LD_EXP 42
11518: PUSH
11519: LD_EXP 50
11523: PUSH
11524: LD_EXP 51
11528: PUSH
11529: LD_EXP 52
11533: PUSH
11534: LD_EXP 53
11538: PUSH
11539: LD_EXP 55
11543: PUSH
11544: LD_EXP 56
11548: PUSH
11549: LD_EXP 57
11553: PUSH
11554: LD_EXP 60
11558: PUSH
11559: LD_EXP 62
11563: PUSH
11564: LD_EXP 63
11568: PUSH
11569: LD_EXP 64
11573: PUSH
11574: LD_EXP 66
11578: PUSH
11579: LD_EXP 67
11583: PUSH
11584: LD_EXP 70
11588: PUSH
11589: LD_EXP 71
11593: PUSH
11594: LD_EXP 72
11598: PUSH
11599: LD_EXP 73
11603: PUSH
11604: LD_EXP 74
11608: PUSH
11609: LD_EXP 75
11613: PUSH
11614: LD_EXP 76
11618: PUSH
11619: LD_EXP 77
11623: PUSH
11624: LD_EXP 78
11628: PUSH
11629: LD_EXP 43
11633: PUSH
11634: LD_EXP 44
11638: PUSH
11639: LD_EXP 47
11643: PUSH
11644: LD_EXP 48
11648: PUSH
11649: LD_EXP 49
11653: PUSH
11654: LD_EXP 45
11658: PUSH
11659: LD_EXP 46
11663: PUSH
11664: LD_EXP 54
11668: PUSH
11669: LD_EXP 58
11673: PUSH
11674: LD_EXP 59
11678: PUSH
11679: LD_EXP 61
11683: PUSH
11684: LD_EXP 65
11688: PUSH
11689: LD_EXP 68
11693: PUSH
11694: LD_EXP 69
11698: PUSH
11699: LD_EXP 79
11703: PUSH
11704: LD_EXP 80
11708: PUSH
11709: LD_EXP 81
11713: PUSH
11714: LD_EXP 82
11718: PUSH
11719: EMPTY
11720: LIST
11721: LIST
11722: LIST
11723: LIST
11724: LIST
11725: LIST
11726: LIST
11727: LIST
11728: LIST
11729: LIST
11730: LIST
11731: LIST
11732: LIST
11733: LIST
11734: LIST
11735: LIST
11736: LIST
11737: LIST
11738: LIST
11739: LIST
11740: LIST
11741: LIST
11742: LIST
11743: LIST
11744: LIST
11745: LIST
11746: LIST
11747: LIST
11748: LIST
11749: LIST
11750: LIST
11751: LIST
11752: LIST
11753: LIST
11754: LIST
11755: LIST
11756: LIST
11757: LIST
11758: LIST
11759: LIST
11760: LIST
11761: LIST
11762: LIST
11763: LIST
11764: LIST
11765: LIST
11766: LIST
11767: LIST
11768: LIST
11769: LIST
11770: LIST
11771: LIST
11772: LIST
11773: LIST
11774: ST_TO_ADDR
// tmp :=  ;
11775: LD_ADDR_VAR 0 3
11779: PUSH
11780: LD_STRING 
11782: ST_TO_ADDR
// for i = 1 to normalCounter do
11783: LD_ADDR_VAR 0 8
11787: PUSH
11788: DOUBLE
11789: LD_INT 1
11791: DEC
11792: ST_TO_ADDR
11793: LD_EXP 27
11797: PUSH
11798: FOR_TO
11799: IFFALSE 11835
// begin if flags [ i ] then
11801: LD_VAR 0 4
11805: PUSH
11806: LD_VAR 0 8
11810: ARRAY
11811: IFFALSE 11833
// tmp := tmp & i & ; ;
11813: LD_ADDR_VAR 0 3
11817: PUSH
11818: LD_VAR 0 3
11822: PUSH
11823: LD_VAR 0 8
11827: STR
11828: PUSH
11829: LD_STRING ;
11831: STR
11832: ST_TO_ADDR
// end ;
11833: GO 11798
11835: POP
11836: POP
// for i = 1 to hardcoreCounter do
11837: LD_ADDR_VAR 0 8
11841: PUSH
11842: DOUBLE
11843: LD_INT 1
11845: DEC
11846: ST_TO_ADDR
11847: LD_EXP 28
11851: PUSH
11852: FOR_TO
11853: IFFALSE 11899
// begin if flags [ normalCounter + i ] then
11855: LD_VAR 0 4
11859: PUSH
11860: LD_EXP 27
11864: PUSH
11865: LD_VAR 0 8
11869: PLUS
11870: ARRAY
11871: IFFALSE 11897
// tmp := tmp & ( 100 + i ) & ; ;
11873: LD_ADDR_VAR 0 3
11877: PUSH
11878: LD_VAR 0 3
11882: PUSH
11883: LD_INT 100
11885: PUSH
11886: LD_VAR 0 8
11890: PLUS
11891: STR
11892: PUSH
11893: LD_STRING ;
11895: STR
11896: ST_TO_ADDR
// end ;
11897: GO 11852
11899: POP
11900: POP
// if tmp then
11901: LD_VAR 0 3
11905: IFFALSE 11917
// active := tmp ;
11907: LD_ADDR_VAR 0 7
11911: PUSH
11912: LD_VAR 0 3
11916: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
11917: LD_STRING getStreamItemsFromMission("
11919: PUSH
11920: LD_VAR 0 5
11924: STR
11925: PUSH
11926: LD_STRING ","
11928: STR
11929: PUSH
11930: LD_VAR 0 6
11934: STR
11935: PUSH
11936: LD_STRING ","
11938: STR
11939: PUSH
11940: LD_VAR 0 7
11944: STR
11945: PUSH
11946: LD_STRING ")
11948: STR
11949: PPUSH
11950: CALL_OW 559
// end else
11954: GO 11963
// ToLua ( getStreamItemsFromMission("","","") ) ;
11956: LD_STRING getStreamItemsFromMission("","","")
11958: PPUSH
11959: CALL_OW 559
// end ;
11963: LD_VAR 0 2
11967: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
11968: LD_EXP 26
11972: PUSH
11973: LD_EXP 31
11977: AND
11978: IFFALSE 12102
11980: GO 11982
11982: DISABLE
11983: LD_INT 0
11985: PPUSH
11986: PPUSH
// begin enable ;
11987: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
11988: LD_ADDR_VAR 0 2
11992: PUSH
11993: LD_INT 22
11995: PUSH
11996: LD_OWVAR 2
12000: PUSH
12001: EMPTY
12002: LIST
12003: LIST
12004: PUSH
12005: LD_INT 2
12007: PUSH
12008: LD_INT 34
12010: PUSH
12011: LD_INT 7
12013: PUSH
12014: EMPTY
12015: LIST
12016: LIST
12017: PUSH
12018: LD_INT 34
12020: PUSH
12021: LD_INT 45
12023: PUSH
12024: EMPTY
12025: LIST
12026: LIST
12027: PUSH
12028: LD_INT 34
12030: PUSH
12031: LD_INT 28
12033: PUSH
12034: EMPTY
12035: LIST
12036: LIST
12037: PUSH
12038: LD_INT 34
12040: PUSH
12041: LD_INT 47
12043: PUSH
12044: EMPTY
12045: LIST
12046: LIST
12047: PUSH
12048: EMPTY
12049: LIST
12050: LIST
12051: LIST
12052: LIST
12053: LIST
12054: PUSH
12055: EMPTY
12056: LIST
12057: LIST
12058: PPUSH
12059: CALL_OW 69
12063: ST_TO_ADDR
// if not tmp then
12064: LD_VAR 0 2
12068: NOT
12069: IFFALSE 12073
// exit ;
12071: GO 12102
// for i in tmp do
12073: LD_ADDR_VAR 0 1
12077: PUSH
12078: LD_VAR 0 2
12082: PUSH
12083: FOR_IN
12084: IFFALSE 12100
// begin SetLives ( i , 0 ) ;
12086: LD_VAR 0 1
12090: PPUSH
12091: LD_INT 0
12093: PPUSH
12094: CALL_OW 234
// end ;
12098: GO 12083
12100: POP
12101: POP
// end ;
12102: PPOPN 2
12104: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
12105: LD_EXP 26
12109: PUSH
12110: LD_EXP 32
12114: AND
12115: IFFALSE 12199
12117: GO 12119
12119: DISABLE
12120: LD_INT 0
12122: PPUSH
12123: PPUSH
// begin enable ;
12124: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
12125: LD_ADDR_VAR 0 2
12129: PUSH
12130: LD_INT 22
12132: PUSH
12133: LD_OWVAR 2
12137: PUSH
12138: EMPTY
12139: LIST
12140: LIST
12141: PUSH
12142: LD_INT 32
12144: PUSH
12145: LD_INT 3
12147: PUSH
12148: EMPTY
12149: LIST
12150: LIST
12151: PUSH
12152: EMPTY
12153: LIST
12154: LIST
12155: PPUSH
12156: CALL_OW 69
12160: ST_TO_ADDR
// if not tmp then
12161: LD_VAR 0 2
12165: NOT
12166: IFFALSE 12170
// exit ;
12168: GO 12199
// for i in tmp do
12170: LD_ADDR_VAR 0 1
12174: PUSH
12175: LD_VAR 0 2
12179: PUSH
12180: FOR_IN
12181: IFFALSE 12197
// begin SetLives ( i , 0 ) ;
12183: LD_VAR 0 1
12187: PPUSH
12188: LD_INT 0
12190: PPUSH
12191: CALL_OW 234
// end ;
12195: GO 12180
12197: POP
12198: POP
// end ;
12199: PPOPN 2
12201: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
12202: LD_EXP 26
12206: PUSH
12207: LD_EXP 29
12211: AND
12212: IFFALSE 12305
12214: GO 12216
12216: DISABLE
12217: LD_INT 0
12219: PPUSH
// begin enable ;
12220: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
12221: LD_ADDR_VAR 0 1
12225: PUSH
12226: LD_INT 22
12228: PUSH
12229: LD_OWVAR 2
12233: PUSH
12234: EMPTY
12235: LIST
12236: LIST
12237: PUSH
12238: LD_INT 2
12240: PUSH
12241: LD_INT 25
12243: PUSH
12244: LD_INT 5
12246: PUSH
12247: EMPTY
12248: LIST
12249: LIST
12250: PUSH
12251: LD_INT 25
12253: PUSH
12254: LD_INT 9
12256: PUSH
12257: EMPTY
12258: LIST
12259: LIST
12260: PUSH
12261: LD_INT 25
12263: PUSH
12264: LD_INT 8
12266: PUSH
12267: EMPTY
12268: LIST
12269: LIST
12270: PUSH
12271: EMPTY
12272: LIST
12273: LIST
12274: LIST
12275: LIST
12276: PUSH
12277: EMPTY
12278: LIST
12279: LIST
12280: PPUSH
12281: CALL_OW 69
12285: PUSH
12286: FOR_IN
12287: IFFALSE 12303
// begin SetClass ( i , 1 ) ;
12289: LD_VAR 0 1
12293: PPUSH
12294: LD_INT 1
12296: PPUSH
12297: CALL_OW 336
// end ;
12301: GO 12286
12303: POP
12304: POP
// end ;
12305: PPOPN 1
12307: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
12308: LD_EXP 26
12312: PUSH
12313: LD_EXP 30
12317: AND
12318: PUSH
12319: LD_OWVAR 65
12323: PUSH
12324: LD_INT 7
12326: LESS
12327: AND
12328: IFFALSE 12342
12330: GO 12332
12332: DISABLE
// begin enable ;
12333: ENABLE
// game_speed := 7 ;
12334: LD_ADDR_OWVAR 65
12338: PUSH
12339: LD_INT 7
12341: ST_TO_ADDR
// end ;
12342: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
12343: LD_EXP 26
12347: PUSH
12348: LD_EXP 33
12352: AND
12353: IFFALSE 12555
12355: GO 12357
12357: DISABLE
12358: LD_INT 0
12360: PPUSH
12361: PPUSH
12362: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
12363: LD_ADDR_VAR 0 3
12367: PUSH
12368: LD_INT 81
12370: PUSH
12371: LD_OWVAR 2
12375: PUSH
12376: EMPTY
12377: LIST
12378: LIST
12379: PUSH
12380: LD_INT 21
12382: PUSH
12383: LD_INT 1
12385: PUSH
12386: EMPTY
12387: LIST
12388: LIST
12389: PUSH
12390: EMPTY
12391: LIST
12392: LIST
12393: PPUSH
12394: CALL_OW 69
12398: ST_TO_ADDR
// if not tmp then
12399: LD_VAR 0 3
12403: NOT
12404: IFFALSE 12408
// exit ;
12406: GO 12555
// if tmp > 5 then
12408: LD_VAR 0 3
12412: PUSH
12413: LD_INT 5
12415: GREATER
12416: IFFALSE 12428
// k := 5 else
12418: LD_ADDR_VAR 0 2
12422: PUSH
12423: LD_INT 5
12425: ST_TO_ADDR
12426: GO 12438
// k := tmp ;
12428: LD_ADDR_VAR 0 2
12432: PUSH
12433: LD_VAR 0 3
12437: ST_TO_ADDR
// for i := 1 to k do
12438: LD_ADDR_VAR 0 1
12442: PUSH
12443: DOUBLE
12444: LD_INT 1
12446: DEC
12447: ST_TO_ADDR
12448: LD_VAR 0 2
12452: PUSH
12453: FOR_TO
12454: IFFALSE 12553
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
12456: LD_VAR 0 3
12460: PUSH
12461: LD_VAR 0 1
12465: ARRAY
12466: PPUSH
12467: LD_VAR 0 1
12471: PUSH
12472: LD_INT 4
12474: MOD
12475: PUSH
12476: LD_INT 1
12478: PLUS
12479: PPUSH
12480: CALL_OW 259
12484: PUSH
12485: LD_INT 10
12487: LESS
12488: IFFALSE 12551
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
12490: LD_VAR 0 3
12494: PUSH
12495: LD_VAR 0 1
12499: ARRAY
12500: PPUSH
12501: LD_VAR 0 1
12505: PUSH
12506: LD_INT 4
12508: MOD
12509: PUSH
12510: LD_INT 1
12512: PLUS
12513: PPUSH
12514: LD_VAR 0 3
12518: PUSH
12519: LD_VAR 0 1
12523: ARRAY
12524: PPUSH
12525: LD_VAR 0 1
12529: PUSH
12530: LD_INT 4
12532: MOD
12533: PUSH
12534: LD_INT 1
12536: PLUS
12537: PPUSH
12538: CALL_OW 259
12542: PUSH
12543: LD_INT 1
12545: PLUS
12546: PPUSH
12547: CALL_OW 237
12551: GO 12453
12553: POP
12554: POP
// end ;
12555: PPOPN 3
12557: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
12558: LD_EXP 26
12562: PUSH
12563: LD_EXP 34
12567: AND
12568: IFFALSE 12588
12570: GO 12572
12572: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
12573: LD_INT 4
12575: PPUSH
12576: LD_OWVAR 2
12580: PPUSH
12581: LD_INT 0
12583: PPUSH
12584: CALL_OW 324
12588: END
// every 0 0$1 trigger StreamModeActive and sShovel do
12589: LD_EXP 26
12593: PUSH
12594: LD_EXP 63
12598: AND
12599: IFFALSE 12619
12601: GO 12603
12603: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
12604: LD_INT 19
12606: PPUSH
12607: LD_OWVAR 2
12611: PPUSH
12612: LD_INT 0
12614: PPUSH
12615: CALL_OW 324
12619: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
12620: LD_EXP 26
12624: PUSH
12625: LD_EXP 35
12629: AND
12630: IFFALSE 12732
12632: GO 12634
12634: DISABLE
12635: LD_INT 0
12637: PPUSH
12638: PPUSH
// begin enable ;
12639: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
12640: LD_ADDR_VAR 0 2
12644: PUSH
12645: LD_INT 22
12647: PUSH
12648: LD_OWVAR 2
12652: PUSH
12653: EMPTY
12654: LIST
12655: LIST
12656: PUSH
12657: LD_INT 2
12659: PUSH
12660: LD_INT 34
12662: PUSH
12663: LD_INT 11
12665: PUSH
12666: EMPTY
12667: LIST
12668: LIST
12669: PUSH
12670: LD_INT 34
12672: PUSH
12673: LD_INT 30
12675: PUSH
12676: EMPTY
12677: LIST
12678: LIST
12679: PUSH
12680: EMPTY
12681: LIST
12682: LIST
12683: LIST
12684: PUSH
12685: EMPTY
12686: LIST
12687: LIST
12688: PPUSH
12689: CALL_OW 69
12693: ST_TO_ADDR
// if not tmp then
12694: LD_VAR 0 2
12698: NOT
12699: IFFALSE 12703
// exit ;
12701: GO 12732
// for i in tmp do
12703: LD_ADDR_VAR 0 1
12707: PUSH
12708: LD_VAR 0 2
12712: PUSH
12713: FOR_IN
12714: IFFALSE 12730
// begin SetLives ( i , 0 ) ;
12716: LD_VAR 0 1
12720: PPUSH
12721: LD_INT 0
12723: PPUSH
12724: CALL_OW 234
// end ;
12728: GO 12713
12730: POP
12731: POP
// end ;
12732: PPOPN 2
12734: END
// every 0 0$1 trigger StreamModeActive and sBunker do
12735: LD_EXP 26
12739: PUSH
12740: LD_EXP 36
12744: AND
12745: IFFALSE 12765
12747: GO 12749
12749: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
12750: LD_INT 32
12752: PPUSH
12753: LD_OWVAR 2
12757: PPUSH
12758: LD_INT 0
12760: PPUSH
12761: CALL_OW 324
12765: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
12766: LD_EXP 26
12770: PUSH
12771: LD_EXP 37
12775: AND
12776: IFFALSE 12957
12778: GO 12780
12780: DISABLE
12781: LD_INT 0
12783: PPUSH
12784: PPUSH
12785: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
12786: LD_ADDR_VAR 0 2
12790: PUSH
12791: LD_INT 22
12793: PUSH
12794: LD_OWVAR 2
12798: PUSH
12799: EMPTY
12800: LIST
12801: LIST
12802: PUSH
12803: LD_INT 33
12805: PUSH
12806: LD_INT 3
12808: PUSH
12809: EMPTY
12810: LIST
12811: LIST
12812: PUSH
12813: EMPTY
12814: LIST
12815: LIST
12816: PPUSH
12817: CALL_OW 69
12821: ST_TO_ADDR
// if not tmp then
12822: LD_VAR 0 2
12826: NOT
12827: IFFALSE 12831
// exit ;
12829: GO 12957
// side := 0 ;
12831: LD_ADDR_VAR 0 3
12835: PUSH
12836: LD_INT 0
12838: ST_TO_ADDR
// for i := 1 to 8 do
12839: LD_ADDR_VAR 0 1
12843: PUSH
12844: DOUBLE
12845: LD_INT 1
12847: DEC
12848: ST_TO_ADDR
12849: LD_INT 8
12851: PUSH
12852: FOR_TO
12853: IFFALSE 12901
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
12855: LD_OWVAR 2
12859: PUSH
12860: LD_VAR 0 1
12864: NONEQUAL
12865: PUSH
12866: LD_OWVAR 2
12870: PPUSH
12871: LD_VAR 0 1
12875: PPUSH
12876: CALL_OW 81
12880: PUSH
12881: LD_INT 2
12883: EQUAL
12884: AND
12885: IFFALSE 12899
// begin side := i ;
12887: LD_ADDR_VAR 0 3
12891: PUSH
12892: LD_VAR 0 1
12896: ST_TO_ADDR
// break ;
12897: GO 12901
// end ;
12899: GO 12852
12901: POP
12902: POP
// if not side then
12903: LD_VAR 0 3
12907: NOT
12908: IFFALSE 12912
// exit ;
12910: GO 12957
// for i := 1 to tmp do
12912: LD_ADDR_VAR 0 1
12916: PUSH
12917: DOUBLE
12918: LD_INT 1
12920: DEC
12921: ST_TO_ADDR
12922: LD_VAR 0 2
12926: PUSH
12927: FOR_TO
12928: IFFALSE 12955
// if Prob ( 60 ) then
12930: LD_INT 60
12932: PPUSH
12933: CALL_OW 13
12937: IFFALSE 12953
// SetSide ( i , side ) ;
12939: LD_VAR 0 1
12943: PPUSH
12944: LD_VAR 0 3
12948: PPUSH
12949: CALL_OW 235
12953: GO 12927
12955: POP
12956: POP
// end ;
12957: PPOPN 3
12959: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
12960: LD_EXP 26
12964: PUSH
12965: LD_EXP 39
12969: AND
12970: IFFALSE 13089
12972: GO 12974
12974: DISABLE
12975: LD_INT 0
12977: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
12978: LD_ADDR_VAR 0 1
12982: PUSH
12983: LD_INT 22
12985: PUSH
12986: LD_OWVAR 2
12990: PUSH
12991: EMPTY
12992: LIST
12993: LIST
12994: PUSH
12995: LD_INT 21
12997: PUSH
12998: LD_INT 1
13000: PUSH
13001: EMPTY
13002: LIST
13003: LIST
13004: PUSH
13005: LD_INT 3
13007: PUSH
13008: LD_INT 23
13010: PUSH
13011: LD_INT 0
13013: PUSH
13014: EMPTY
13015: LIST
13016: LIST
13017: PUSH
13018: EMPTY
13019: LIST
13020: LIST
13021: PUSH
13022: EMPTY
13023: LIST
13024: LIST
13025: LIST
13026: PPUSH
13027: CALL_OW 69
13031: PUSH
13032: FOR_IN
13033: IFFALSE 13087
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
13035: LD_VAR 0 1
13039: PPUSH
13040: CALL_OW 257
13044: PUSH
13045: LD_INT 1
13047: PUSH
13048: LD_INT 2
13050: PUSH
13051: LD_INT 3
13053: PUSH
13054: LD_INT 4
13056: PUSH
13057: EMPTY
13058: LIST
13059: LIST
13060: LIST
13061: LIST
13062: IN
13063: IFFALSE 13085
// SetClass ( un , rand ( 1 , 4 ) ) ;
13065: LD_VAR 0 1
13069: PPUSH
13070: LD_INT 1
13072: PPUSH
13073: LD_INT 4
13075: PPUSH
13076: CALL_OW 12
13080: PPUSH
13081: CALL_OW 336
13085: GO 13032
13087: POP
13088: POP
// end ;
13089: PPOPN 1
13091: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
13092: LD_EXP 26
13096: PUSH
13097: LD_EXP 38
13101: AND
13102: IFFALSE 13181
13104: GO 13106
13106: DISABLE
13107: LD_INT 0
13109: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13110: LD_ADDR_VAR 0 1
13114: PUSH
13115: LD_INT 22
13117: PUSH
13118: LD_OWVAR 2
13122: PUSH
13123: EMPTY
13124: LIST
13125: LIST
13126: PUSH
13127: LD_INT 21
13129: PUSH
13130: LD_INT 3
13132: PUSH
13133: EMPTY
13134: LIST
13135: LIST
13136: PUSH
13137: EMPTY
13138: LIST
13139: LIST
13140: PPUSH
13141: CALL_OW 69
13145: ST_TO_ADDR
// if not tmp then
13146: LD_VAR 0 1
13150: NOT
13151: IFFALSE 13155
// exit ;
13153: GO 13181
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
13155: LD_VAR 0 1
13159: PUSH
13160: LD_INT 1
13162: PPUSH
13163: LD_VAR 0 1
13167: PPUSH
13168: CALL_OW 12
13172: ARRAY
13173: PPUSH
13174: LD_INT 100
13176: PPUSH
13177: CALL_OW 234
// end ;
13181: PPOPN 1
13183: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
13184: LD_EXP 26
13188: PUSH
13189: LD_EXP 40
13193: AND
13194: IFFALSE 13292
13196: GO 13198
13198: DISABLE
13199: LD_INT 0
13201: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13202: LD_ADDR_VAR 0 1
13206: PUSH
13207: LD_INT 22
13209: PUSH
13210: LD_OWVAR 2
13214: PUSH
13215: EMPTY
13216: LIST
13217: LIST
13218: PUSH
13219: LD_INT 21
13221: PUSH
13222: LD_INT 1
13224: PUSH
13225: EMPTY
13226: LIST
13227: LIST
13228: PUSH
13229: EMPTY
13230: LIST
13231: LIST
13232: PPUSH
13233: CALL_OW 69
13237: ST_TO_ADDR
// if not tmp then
13238: LD_VAR 0 1
13242: NOT
13243: IFFALSE 13247
// exit ;
13245: GO 13292
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
13247: LD_VAR 0 1
13251: PUSH
13252: LD_INT 1
13254: PPUSH
13255: LD_VAR 0 1
13259: PPUSH
13260: CALL_OW 12
13264: ARRAY
13265: PPUSH
13266: LD_INT 1
13268: PPUSH
13269: LD_INT 4
13271: PPUSH
13272: CALL_OW 12
13276: PPUSH
13277: LD_INT 3000
13279: PPUSH
13280: LD_INT 9000
13282: PPUSH
13283: CALL_OW 12
13287: PPUSH
13288: CALL_OW 492
// end ;
13292: PPOPN 1
13294: END
// every 0 0$1 trigger StreamModeActive and sDepot do
13295: LD_EXP 26
13299: PUSH
13300: LD_EXP 41
13304: AND
13305: IFFALSE 13325
13307: GO 13309
13309: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
13310: LD_INT 1
13312: PPUSH
13313: LD_OWVAR 2
13317: PPUSH
13318: LD_INT 0
13320: PPUSH
13321: CALL_OW 324
13325: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
13326: LD_EXP 26
13330: PUSH
13331: LD_EXP 42
13335: AND
13336: IFFALSE 13419
13338: GO 13340
13340: DISABLE
13341: LD_INT 0
13343: PPUSH
13344: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13345: LD_ADDR_VAR 0 2
13349: PUSH
13350: LD_INT 22
13352: PUSH
13353: LD_OWVAR 2
13357: PUSH
13358: EMPTY
13359: LIST
13360: LIST
13361: PUSH
13362: LD_INT 21
13364: PUSH
13365: LD_INT 3
13367: PUSH
13368: EMPTY
13369: LIST
13370: LIST
13371: PUSH
13372: EMPTY
13373: LIST
13374: LIST
13375: PPUSH
13376: CALL_OW 69
13380: ST_TO_ADDR
// if not tmp then
13381: LD_VAR 0 2
13385: NOT
13386: IFFALSE 13390
// exit ;
13388: GO 13419
// for i in tmp do
13390: LD_ADDR_VAR 0 1
13394: PUSH
13395: LD_VAR 0 2
13399: PUSH
13400: FOR_IN
13401: IFFALSE 13417
// SetBLevel ( i , 10 ) ;
13403: LD_VAR 0 1
13407: PPUSH
13408: LD_INT 10
13410: PPUSH
13411: CALL_OW 241
13415: GO 13400
13417: POP
13418: POP
// end ;
13419: PPOPN 2
13421: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
13422: LD_EXP 26
13426: PUSH
13427: LD_EXP 43
13431: AND
13432: IFFALSE 13543
13434: GO 13436
13436: DISABLE
13437: LD_INT 0
13439: PPUSH
13440: PPUSH
13441: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13442: LD_ADDR_VAR 0 3
13446: PUSH
13447: LD_INT 22
13449: PUSH
13450: LD_OWVAR 2
13454: PUSH
13455: EMPTY
13456: LIST
13457: LIST
13458: PUSH
13459: LD_INT 25
13461: PUSH
13462: LD_INT 1
13464: PUSH
13465: EMPTY
13466: LIST
13467: LIST
13468: PUSH
13469: EMPTY
13470: LIST
13471: LIST
13472: PPUSH
13473: CALL_OW 69
13477: ST_TO_ADDR
// if not tmp then
13478: LD_VAR 0 3
13482: NOT
13483: IFFALSE 13487
// exit ;
13485: GO 13543
// un := tmp [ rand ( 1 , tmp ) ] ;
13487: LD_ADDR_VAR 0 2
13491: PUSH
13492: LD_VAR 0 3
13496: PUSH
13497: LD_INT 1
13499: PPUSH
13500: LD_VAR 0 3
13504: PPUSH
13505: CALL_OW 12
13509: ARRAY
13510: ST_TO_ADDR
// if Crawls ( un ) then
13511: LD_VAR 0 2
13515: PPUSH
13516: CALL_OW 318
13520: IFFALSE 13531
// ComWalk ( un ) ;
13522: LD_VAR 0 2
13526: PPUSH
13527: CALL_OW 138
// SetClass ( un , class_sniper ) ;
13531: LD_VAR 0 2
13535: PPUSH
13536: LD_INT 5
13538: PPUSH
13539: CALL_OW 336
// end ;
13543: PPOPN 3
13545: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
13546: LD_EXP 26
13550: PUSH
13551: LD_EXP 44
13555: AND
13556: PUSH
13557: LD_OWVAR 67
13561: PUSH
13562: LD_INT 4
13564: LESS
13565: AND
13566: IFFALSE 13585
13568: GO 13570
13570: DISABLE
// begin Difficulty := Difficulty + 1 ;
13571: LD_ADDR_OWVAR 67
13575: PUSH
13576: LD_OWVAR 67
13580: PUSH
13581: LD_INT 1
13583: PLUS
13584: ST_TO_ADDR
// end ;
13585: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
13586: LD_EXP 26
13590: PUSH
13591: LD_EXP 45
13595: AND
13596: IFFALSE 13699
13598: GO 13600
13600: DISABLE
13601: LD_INT 0
13603: PPUSH
// begin for i := 1 to 5 do
13604: LD_ADDR_VAR 0 1
13608: PUSH
13609: DOUBLE
13610: LD_INT 1
13612: DEC
13613: ST_TO_ADDR
13614: LD_INT 5
13616: PUSH
13617: FOR_TO
13618: IFFALSE 13697
// begin uc_nation := nation_nature ;
13620: LD_ADDR_OWVAR 21
13624: PUSH
13625: LD_INT 0
13627: ST_TO_ADDR
// uc_side := 0 ;
13628: LD_ADDR_OWVAR 20
13632: PUSH
13633: LD_INT 0
13635: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13636: LD_ADDR_OWVAR 29
13640: PUSH
13641: LD_INT 12
13643: PUSH
13644: LD_INT 12
13646: PUSH
13647: EMPTY
13648: LIST
13649: LIST
13650: ST_TO_ADDR
// hc_agressivity := 20 ;
13651: LD_ADDR_OWVAR 35
13655: PUSH
13656: LD_INT 20
13658: ST_TO_ADDR
// hc_class := class_tiger ;
13659: LD_ADDR_OWVAR 28
13663: PUSH
13664: LD_INT 14
13666: ST_TO_ADDR
// hc_gallery :=  ;
13667: LD_ADDR_OWVAR 33
13671: PUSH
13672: LD_STRING 
13674: ST_TO_ADDR
// hc_name :=  ;
13675: LD_ADDR_OWVAR 26
13679: PUSH
13680: LD_STRING 
13682: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
13683: CALL_OW 44
13687: PPUSH
13688: LD_INT 0
13690: PPUSH
13691: CALL_OW 51
// end ;
13695: GO 13617
13697: POP
13698: POP
// end ;
13699: PPOPN 1
13701: END
// every 0 0$1 trigger StreamModeActive and sBomb do
13702: LD_EXP 26
13706: PUSH
13707: LD_EXP 46
13711: AND
13712: IFFALSE 13721
13714: GO 13716
13716: DISABLE
// StreamSibBomb ;
13717: CALL 13722 0 0
13721: END
// export function StreamSibBomb ; var i , x , y ; begin
13722: LD_INT 0
13724: PPUSH
13725: PPUSH
13726: PPUSH
13727: PPUSH
// result := false ;
13728: LD_ADDR_VAR 0 1
13732: PUSH
13733: LD_INT 0
13735: ST_TO_ADDR
// for i := 1 to 16 do
13736: LD_ADDR_VAR 0 2
13740: PUSH
13741: DOUBLE
13742: LD_INT 1
13744: DEC
13745: ST_TO_ADDR
13746: LD_INT 16
13748: PUSH
13749: FOR_TO
13750: IFFALSE 13949
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13752: LD_ADDR_VAR 0 3
13756: PUSH
13757: LD_INT 10
13759: PUSH
13760: LD_INT 20
13762: PUSH
13763: LD_INT 30
13765: PUSH
13766: LD_INT 40
13768: PUSH
13769: LD_INT 50
13771: PUSH
13772: LD_INT 60
13774: PUSH
13775: LD_INT 70
13777: PUSH
13778: LD_INT 80
13780: PUSH
13781: LD_INT 90
13783: PUSH
13784: LD_INT 100
13786: PUSH
13787: LD_INT 110
13789: PUSH
13790: LD_INT 120
13792: PUSH
13793: LD_INT 130
13795: PUSH
13796: LD_INT 140
13798: PUSH
13799: LD_INT 150
13801: PUSH
13802: EMPTY
13803: LIST
13804: LIST
13805: LIST
13806: LIST
13807: LIST
13808: LIST
13809: LIST
13810: LIST
13811: LIST
13812: LIST
13813: LIST
13814: LIST
13815: LIST
13816: LIST
13817: LIST
13818: PUSH
13819: LD_INT 1
13821: PPUSH
13822: LD_INT 15
13824: PPUSH
13825: CALL_OW 12
13829: ARRAY
13830: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13831: LD_ADDR_VAR 0 4
13835: PUSH
13836: LD_INT 10
13838: PUSH
13839: LD_INT 20
13841: PUSH
13842: LD_INT 30
13844: PUSH
13845: LD_INT 40
13847: PUSH
13848: LD_INT 50
13850: PUSH
13851: LD_INT 60
13853: PUSH
13854: LD_INT 70
13856: PUSH
13857: LD_INT 80
13859: PUSH
13860: LD_INT 90
13862: PUSH
13863: LD_INT 100
13865: PUSH
13866: LD_INT 110
13868: PUSH
13869: LD_INT 120
13871: PUSH
13872: LD_INT 130
13874: PUSH
13875: LD_INT 140
13877: PUSH
13878: LD_INT 150
13880: PUSH
13881: EMPTY
13882: LIST
13883: LIST
13884: LIST
13885: LIST
13886: LIST
13887: LIST
13888: LIST
13889: LIST
13890: LIST
13891: LIST
13892: LIST
13893: LIST
13894: LIST
13895: LIST
13896: LIST
13897: PUSH
13898: LD_INT 1
13900: PPUSH
13901: LD_INT 15
13903: PPUSH
13904: CALL_OW 12
13908: ARRAY
13909: ST_TO_ADDR
// if ValidHex ( x , y ) then
13910: LD_VAR 0 3
13914: PPUSH
13915: LD_VAR 0 4
13919: PPUSH
13920: CALL_OW 488
13924: IFFALSE 13947
// begin result := [ x , y ] ;
13926: LD_ADDR_VAR 0 1
13930: PUSH
13931: LD_VAR 0 3
13935: PUSH
13936: LD_VAR 0 4
13940: PUSH
13941: EMPTY
13942: LIST
13943: LIST
13944: ST_TO_ADDR
// break ;
13945: GO 13949
// end ; end ;
13947: GO 13749
13949: POP
13950: POP
// if result then
13951: LD_VAR 0 1
13955: IFFALSE 14015
// begin ToLua ( playSibBomb() ) ;
13957: LD_STRING playSibBomb()
13959: PPUSH
13960: CALL_OW 559
// wait ( 0 0$14 ) ;
13964: LD_INT 490
13966: PPUSH
13967: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
13971: LD_VAR 0 1
13975: PUSH
13976: LD_INT 1
13978: ARRAY
13979: PPUSH
13980: LD_VAR 0 1
13984: PUSH
13985: LD_INT 2
13987: ARRAY
13988: PPUSH
13989: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
13993: LD_VAR 0 1
13997: PUSH
13998: LD_INT 1
14000: ARRAY
14001: PPUSH
14002: LD_VAR 0 1
14006: PUSH
14007: LD_INT 2
14009: ARRAY
14010: PPUSH
14011: CALL_OW 429
// end ; end ;
14015: LD_VAR 0 1
14019: RET
// every 0 0$1 trigger StreamModeActive and sReset do
14020: LD_EXP 26
14024: PUSH
14025: LD_EXP 48
14029: AND
14030: IFFALSE 14042
14032: GO 14034
14034: DISABLE
// YouLost (  ) ;
14035: LD_STRING 
14037: PPUSH
14038: CALL_OW 104
14042: END
// every 0 0$1 trigger StreamModeActive and sFog do
14043: LD_EXP 26
14047: PUSH
14048: LD_EXP 47
14052: AND
14053: IFFALSE 14067
14055: GO 14057
14057: DISABLE
// FogOff ( your_side ) ;
14058: LD_OWVAR 2
14062: PPUSH
14063: CALL_OW 344
14067: END
// every 0 0$1 trigger StreamModeActive and sSun do
14068: LD_EXP 26
14072: PUSH
14073: LD_EXP 49
14077: AND
14078: IFFALSE 14106
14080: GO 14082
14082: DISABLE
// begin solar_recharge_percent := 0 ;
14083: LD_ADDR_OWVAR 79
14087: PUSH
14088: LD_INT 0
14090: ST_TO_ADDR
// wait ( 5 5$00 ) ;
14091: LD_INT 10500
14093: PPUSH
14094: CALL_OW 67
// solar_recharge_percent := 100 ;
14098: LD_ADDR_OWVAR 79
14102: PUSH
14103: LD_INT 100
14105: ST_TO_ADDR
// end ;
14106: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
14107: LD_EXP 26
14111: PUSH
14112: LD_EXP 50
14116: AND
14117: IFFALSE 14356
14119: GO 14121
14121: DISABLE
14122: LD_INT 0
14124: PPUSH
14125: PPUSH
14126: PPUSH
// begin tmp := [ ] ;
14127: LD_ADDR_VAR 0 3
14131: PUSH
14132: EMPTY
14133: ST_TO_ADDR
// for i := 1 to 6 do
14134: LD_ADDR_VAR 0 1
14138: PUSH
14139: DOUBLE
14140: LD_INT 1
14142: DEC
14143: ST_TO_ADDR
14144: LD_INT 6
14146: PUSH
14147: FOR_TO
14148: IFFALSE 14253
// begin uc_nation := nation_nature ;
14150: LD_ADDR_OWVAR 21
14154: PUSH
14155: LD_INT 0
14157: ST_TO_ADDR
// uc_side := 0 ;
14158: LD_ADDR_OWVAR 20
14162: PUSH
14163: LD_INT 0
14165: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14166: LD_ADDR_OWVAR 29
14170: PUSH
14171: LD_INT 12
14173: PUSH
14174: LD_INT 12
14176: PUSH
14177: EMPTY
14178: LIST
14179: LIST
14180: ST_TO_ADDR
// hc_agressivity := 20 ;
14181: LD_ADDR_OWVAR 35
14185: PUSH
14186: LD_INT 20
14188: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
14189: LD_ADDR_OWVAR 28
14193: PUSH
14194: LD_INT 17
14196: ST_TO_ADDR
// hc_gallery :=  ;
14197: LD_ADDR_OWVAR 33
14201: PUSH
14202: LD_STRING 
14204: ST_TO_ADDR
// hc_name :=  ;
14205: LD_ADDR_OWVAR 26
14209: PUSH
14210: LD_STRING 
14212: ST_TO_ADDR
// un := CreateHuman ;
14213: LD_ADDR_VAR 0 2
14217: PUSH
14218: CALL_OW 44
14222: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
14223: LD_VAR 0 2
14227: PPUSH
14228: LD_INT 1
14230: PPUSH
14231: CALL_OW 51
// tmp := tmp ^ un ;
14235: LD_ADDR_VAR 0 3
14239: PUSH
14240: LD_VAR 0 3
14244: PUSH
14245: LD_VAR 0 2
14249: ADD
14250: ST_TO_ADDR
// end ;
14251: GO 14147
14253: POP
14254: POP
// repeat wait ( 0 0$1 ) ;
14255: LD_INT 35
14257: PPUSH
14258: CALL_OW 67
// for un in tmp do
14262: LD_ADDR_VAR 0 2
14266: PUSH
14267: LD_VAR 0 3
14271: PUSH
14272: FOR_IN
14273: IFFALSE 14347
// begin if IsDead ( un ) then
14275: LD_VAR 0 2
14279: PPUSH
14280: CALL_OW 301
14284: IFFALSE 14304
// begin tmp := tmp diff un ;
14286: LD_ADDR_VAR 0 3
14290: PUSH
14291: LD_VAR 0 3
14295: PUSH
14296: LD_VAR 0 2
14300: DIFF
14301: ST_TO_ADDR
// continue ;
14302: GO 14272
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
14304: LD_VAR 0 2
14308: PPUSH
14309: LD_INT 3
14311: PUSH
14312: LD_INT 22
14314: PUSH
14315: LD_INT 0
14317: PUSH
14318: EMPTY
14319: LIST
14320: LIST
14321: PUSH
14322: EMPTY
14323: LIST
14324: LIST
14325: PPUSH
14326: CALL_OW 69
14330: PPUSH
14331: LD_VAR 0 2
14335: PPUSH
14336: CALL_OW 74
14340: PPUSH
14341: CALL_OW 115
// end ;
14345: GO 14272
14347: POP
14348: POP
// until not tmp ;
14349: LD_VAR 0 3
14353: NOT
14354: IFFALSE 14255
// end ;
14356: PPOPN 3
14358: END
// every 0 0$1 trigger StreamModeActive and sTroll do
14359: LD_EXP 26
14363: PUSH
14364: LD_EXP 51
14368: AND
14369: IFFALSE 14423
14371: GO 14373
14373: DISABLE
// begin ToLua ( displayTroll(); ) ;
14374: LD_STRING displayTroll();
14376: PPUSH
14377: CALL_OW 559
// wait ( 3 3$00 ) ;
14381: LD_INT 6300
14383: PPUSH
14384: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14388: LD_STRING hideTroll();
14390: PPUSH
14391: CALL_OW 559
// wait ( 1 1$00 ) ;
14395: LD_INT 2100
14397: PPUSH
14398: CALL_OW 67
// ToLua ( displayTroll(); ) ;
14402: LD_STRING displayTroll();
14404: PPUSH
14405: CALL_OW 559
// wait ( 1 1$00 ) ;
14409: LD_INT 2100
14411: PPUSH
14412: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14416: LD_STRING hideTroll();
14418: PPUSH
14419: CALL_OW 559
// end ;
14423: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
14424: LD_EXP 26
14428: PUSH
14429: LD_EXP 52
14433: AND
14434: IFFALSE 14497
14436: GO 14438
14438: DISABLE
14439: LD_INT 0
14441: PPUSH
// begin p := 0 ;
14442: LD_ADDR_VAR 0 1
14446: PUSH
14447: LD_INT 0
14449: ST_TO_ADDR
// repeat game_speed := 1 ;
14450: LD_ADDR_OWVAR 65
14454: PUSH
14455: LD_INT 1
14457: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14458: LD_INT 35
14460: PPUSH
14461: CALL_OW 67
// p := p + 1 ;
14465: LD_ADDR_VAR 0 1
14469: PUSH
14470: LD_VAR 0 1
14474: PUSH
14475: LD_INT 1
14477: PLUS
14478: ST_TO_ADDR
// until p >= 60 ;
14479: LD_VAR 0 1
14483: PUSH
14484: LD_INT 60
14486: GREATEREQUAL
14487: IFFALSE 14450
// game_speed := 4 ;
14489: LD_ADDR_OWVAR 65
14493: PUSH
14494: LD_INT 4
14496: ST_TO_ADDR
// end ;
14497: PPOPN 1
14499: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
14500: LD_EXP 26
14504: PUSH
14505: LD_EXP 53
14509: AND
14510: IFFALSE 14656
14512: GO 14514
14514: DISABLE
14515: LD_INT 0
14517: PPUSH
14518: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14519: LD_ADDR_VAR 0 1
14523: PUSH
14524: LD_INT 22
14526: PUSH
14527: LD_OWVAR 2
14531: PUSH
14532: EMPTY
14533: LIST
14534: LIST
14535: PUSH
14536: LD_INT 2
14538: PUSH
14539: LD_INT 30
14541: PUSH
14542: LD_INT 0
14544: PUSH
14545: EMPTY
14546: LIST
14547: LIST
14548: PUSH
14549: LD_INT 30
14551: PUSH
14552: LD_INT 1
14554: PUSH
14555: EMPTY
14556: LIST
14557: LIST
14558: PUSH
14559: EMPTY
14560: LIST
14561: LIST
14562: LIST
14563: PUSH
14564: EMPTY
14565: LIST
14566: LIST
14567: PPUSH
14568: CALL_OW 69
14572: ST_TO_ADDR
// if not depot then
14573: LD_VAR 0 1
14577: NOT
14578: IFFALSE 14582
// exit ;
14580: GO 14656
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
14582: LD_ADDR_VAR 0 2
14586: PUSH
14587: LD_VAR 0 1
14591: PUSH
14592: LD_INT 1
14594: PPUSH
14595: LD_VAR 0 1
14599: PPUSH
14600: CALL_OW 12
14604: ARRAY
14605: PPUSH
14606: CALL_OW 274
14610: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
14611: LD_VAR 0 2
14615: PPUSH
14616: LD_INT 1
14618: PPUSH
14619: LD_INT 0
14621: PPUSH
14622: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
14626: LD_VAR 0 2
14630: PPUSH
14631: LD_INT 2
14633: PPUSH
14634: LD_INT 0
14636: PPUSH
14637: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
14641: LD_VAR 0 2
14645: PPUSH
14646: LD_INT 3
14648: PPUSH
14649: LD_INT 0
14651: PPUSH
14652: CALL_OW 277
// end ;
14656: PPOPN 2
14658: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
14659: LD_EXP 26
14663: PUSH
14664: LD_EXP 54
14668: AND
14669: IFFALSE 14766
14671: GO 14673
14673: DISABLE
14674: LD_INT 0
14676: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14677: LD_ADDR_VAR 0 1
14681: PUSH
14682: LD_INT 22
14684: PUSH
14685: LD_OWVAR 2
14689: PUSH
14690: EMPTY
14691: LIST
14692: LIST
14693: PUSH
14694: LD_INT 21
14696: PUSH
14697: LD_INT 1
14699: PUSH
14700: EMPTY
14701: LIST
14702: LIST
14703: PUSH
14704: LD_INT 3
14706: PUSH
14707: LD_INT 23
14709: PUSH
14710: LD_INT 0
14712: PUSH
14713: EMPTY
14714: LIST
14715: LIST
14716: PUSH
14717: EMPTY
14718: LIST
14719: LIST
14720: PUSH
14721: EMPTY
14722: LIST
14723: LIST
14724: LIST
14725: PPUSH
14726: CALL_OW 69
14730: ST_TO_ADDR
// if not tmp then
14731: LD_VAR 0 1
14735: NOT
14736: IFFALSE 14740
// exit ;
14738: GO 14766
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
14740: LD_VAR 0 1
14744: PUSH
14745: LD_INT 1
14747: PPUSH
14748: LD_VAR 0 1
14752: PPUSH
14753: CALL_OW 12
14757: ARRAY
14758: PPUSH
14759: LD_INT 200
14761: PPUSH
14762: CALL_OW 234
// end ;
14766: PPOPN 1
14768: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
14769: LD_EXP 26
14773: PUSH
14774: LD_EXP 55
14778: AND
14779: IFFALSE 14858
14781: GO 14783
14783: DISABLE
14784: LD_INT 0
14786: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
14787: LD_ADDR_VAR 0 1
14791: PUSH
14792: LD_INT 22
14794: PUSH
14795: LD_OWVAR 2
14799: PUSH
14800: EMPTY
14801: LIST
14802: LIST
14803: PUSH
14804: LD_INT 21
14806: PUSH
14807: LD_INT 2
14809: PUSH
14810: EMPTY
14811: LIST
14812: LIST
14813: PUSH
14814: EMPTY
14815: LIST
14816: LIST
14817: PPUSH
14818: CALL_OW 69
14822: ST_TO_ADDR
// if not tmp then
14823: LD_VAR 0 1
14827: NOT
14828: IFFALSE 14832
// exit ;
14830: GO 14858
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
14832: LD_VAR 0 1
14836: PUSH
14837: LD_INT 1
14839: PPUSH
14840: LD_VAR 0 1
14844: PPUSH
14845: CALL_OW 12
14849: ARRAY
14850: PPUSH
14851: LD_INT 60
14853: PPUSH
14854: CALL_OW 234
// end ;
14858: PPOPN 1
14860: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
14861: LD_EXP 26
14865: PUSH
14866: LD_EXP 56
14870: AND
14871: IFFALSE 14970
14873: GO 14875
14875: DISABLE
14876: LD_INT 0
14878: PPUSH
14879: PPUSH
// begin enable ;
14880: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
14881: LD_ADDR_VAR 0 1
14885: PUSH
14886: LD_INT 22
14888: PUSH
14889: LD_OWVAR 2
14893: PUSH
14894: EMPTY
14895: LIST
14896: LIST
14897: PUSH
14898: LD_INT 61
14900: PUSH
14901: EMPTY
14902: LIST
14903: PUSH
14904: LD_INT 33
14906: PUSH
14907: LD_INT 2
14909: PUSH
14910: EMPTY
14911: LIST
14912: LIST
14913: PUSH
14914: EMPTY
14915: LIST
14916: LIST
14917: LIST
14918: PPUSH
14919: CALL_OW 69
14923: ST_TO_ADDR
// if not tmp then
14924: LD_VAR 0 1
14928: NOT
14929: IFFALSE 14933
// exit ;
14931: GO 14970
// for i in tmp do
14933: LD_ADDR_VAR 0 2
14937: PUSH
14938: LD_VAR 0 1
14942: PUSH
14943: FOR_IN
14944: IFFALSE 14968
// if IsControledBy ( i ) then
14946: LD_VAR 0 2
14950: PPUSH
14951: CALL_OW 312
14955: IFFALSE 14966
// ComUnlink ( i ) ;
14957: LD_VAR 0 2
14961: PPUSH
14962: CALL_OW 136
14966: GO 14943
14968: POP
14969: POP
// end ;
14970: PPOPN 2
14972: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
14973: LD_EXP 26
14977: PUSH
14978: LD_EXP 57
14982: AND
14983: IFFALSE 15123
14985: GO 14987
14987: DISABLE
14988: LD_INT 0
14990: PPUSH
14991: PPUSH
// begin ToLua ( displayPowell(); ) ;
14992: LD_STRING displayPowell();
14994: PPUSH
14995: CALL_OW 559
// uc_side := 0 ;
14999: LD_ADDR_OWVAR 20
15003: PUSH
15004: LD_INT 0
15006: ST_TO_ADDR
// uc_nation := 2 ;
15007: LD_ADDR_OWVAR 21
15011: PUSH
15012: LD_INT 2
15014: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
15015: LD_ADDR_OWVAR 37
15019: PUSH
15020: LD_INT 14
15022: ST_TO_ADDR
// vc_engine := engine_siberite ;
15023: LD_ADDR_OWVAR 39
15027: PUSH
15028: LD_INT 3
15030: ST_TO_ADDR
// vc_control := control_apeman ;
15031: LD_ADDR_OWVAR 38
15035: PUSH
15036: LD_INT 5
15038: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
15039: LD_ADDR_OWVAR 40
15043: PUSH
15044: LD_INT 29
15046: ST_TO_ADDR
// un := CreateVehicle ;
15047: LD_ADDR_VAR 0 2
15051: PUSH
15052: CALL_OW 45
15056: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15057: LD_VAR 0 2
15061: PPUSH
15062: LD_INT 1
15064: PPUSH
15065: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15069: LD_INT 35
15071: PPUSH
15072: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15076: LD_VAR 0 2
15080: PPUSH
15081: LD_INT 22
15083: PUSH
15084: LD_OWVAR 2
15088: PUSH
15089: EMPTY
15090: LIST
15091: LIST
15092: PPUSH
15093: CALL_OW 69
15097: PPUSH
15098: LD_VAR 0 2
15102: PPUSH
15103: CALL_OW 74
15107: PPUSH
15108: CALL_OW 115
// until IsDead ( un ) ;
15112: LD_VAR 0 2
15116: PPUSH
15117: CALL_OW 301
15121: IFFALSE 15069
// end ;
15123: PPOPN 2
15125: END
// every 0 0$1 trigger StreamModeActive and sStu do
15126: LD_EXP 26
15130: PUSH
15131: LD_EXP 65
15135: AND
15136: IFFALSE 15152
15138: GO 15140
15140: DISABLE
// begin ToLua ( displayStucuk(); ) ;
15141: LD_STRING displayStucuk();
15143: PPUSH
15144: CALL_OW 559
// ResetFog ;
15148: CALL_OW 335
// end ;
15152: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
15153: LD_EXP 26
15157: PUSH
15158: LD_EXP 58
15162: AND
15163: IFFALSE 15304
15165: GO 15167
15167: DISABLE
15168: LD_INT 0
15170: PPUSH
15171: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15172: LD_ADDR_VAR 0 2
15176: PUSH
15177: LD_INT 22
15179: PUSH
15180: LD_OWVAR 2
15184: PUSH
15185: EMPTY
15186: LIST
15187: LIST
15188: PUSH
15189: LD_INT 21
15191: PUSH
15192: LD_INT 1
15194: PUSH
15195: EMPTY
15196: LIST
15197: LIST
15198: PUSH
15199: EMPTY
15200: LIST
15201: LIST
15202: PPUSH
15203: CALL_OW 69
15207: ST_TO_ADDR
// if not tmp then
15208: LD_VAR 0 2
15212: NOT
15213: IFFALSE 15217
// exit ;
15215: GO 15304
// un := tmp [ rand ( 1 , tmp ) ] ;
15217: LD_ADDR_VAR 0 1
15221: PUSH
15222: LD_VAR 0 2
15226: PUSH
15227: LD_INT 1
15229: PPUSH
15230: LD_VAR 0 2
15234: PPUSH
15235: CALL_OW 12
15239: ARRAY
15240: ST_TO_ADDR
// SetSide ( un , 0 ) ;
15241: LD_VAR 0 1
15245: PPUSH
15246: LD_INT 0
15248: PPUSH
15249: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
15253: LD_VAR 0 1
15257: PPUSH
15258: LD_OWVAR 3
15262: PUSH
15263: LD_VAR 0 1
15267: DIFF
15268: PPUSH
15269: LD_VAR 0 1
15273: PPUSH
15274: CALL_OW 74
15278: PPUSH
15279: CALL_OW 115
// wait ( 0 0$20 ) ;
15283: LD_INT 700
15285: PPUSH
15286: CALL_OW 67
// SetSide ( un , your_side ) ;
15290: LD_VAR 0 1
15294: PPUSH
15295: LD_OWVAR 2
15299: PPUSH
15300: CALL_OW 235
// end ;
15304: PPOPN 2
15306: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
15307: LD_EXP 26
15311: PUSH
15312: LD_EXP 59
15316: AND
15317: IFFALSE 15423
15319: GO 15321
15321: DISABLE
15322: LD_INT 0
15324: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15325: LD_ADDR_VAR 0 1
15329: PUSH
15330: LD_INT 22
15332: PUSH
15333: LD_OWVAR 2
15337: PUSH
15338: EMPTY
15339: LIST
15340: LIST
15341: PUSH
15342: LD_INT 2
15344: PUSH
15345: LD_INT 30
15347: PUSH
15348: LD_INT 0
15350: PUSH
15351: EMPTY
15352: LIST
15353: LIST
15354: PUSH
15355: LD_INT 30
15357: PUSH
15358: LD_INT 1
15360: PUSH
15361: EMPTY
15362: LIST
15363: LIST
15364: PUSH
15365: EMPTY
15366: LIST
15367: LIST
15368: LIST
15369: PUSH
15370: EMPTY
15371: LIST
15372: LIST
15373: PPUSH
15374: CALL_OW 69
15378: ST_TO_ADDR
// if not depot then
15379: LD_VAR 0 1
15383: NOT
15384: IFFALSE 15388
// exit ;
15386: GO 15423
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
15388: LD_VAR 0 1
15392: PUSH
15393: LD_INT 1
15395: ARRAY
15396: PPUSH
15397: CALL_OW 250
15401: PPUSH
15402: LD_VAR 0 1
15406: PUSH
15407: LD_INT 1
15409: ARRAY
15410: PPUSH
15411: CALL_OW 251
15415: PPUSH
15416: LD_INT 70
15418: PPUSH
15419: CALL_OW 495
// end ;
15423: PPOPN 1
15425: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
15426: LD_EXP 26
15430: PUSH
15431: LD_EXP 60
15435: AND
15436: IFFALSE 15647
15438: GO 15440
15440: DISABLE
15441: LD_INT 0
15443: PPUSH
15444: PPUSH
15445: PPUSH
15446: PPUSH
15447: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15448: LD_ADDR_VAR 0 5
15452: PUSH
15453: LD_INT 22
15455: PUSH
15456: LD_OWVAR 2
15460: PUSH
15461: EMPTY
15462: LIST
15463: LIST
15464: PUSH
15465: LD_INT 21
15467: PUSH
15468: LD_INT 1
15470: PUSH
15471: EMPTY
15472: LIST
15473: LIST
15474: PUSH
15475: EMPTY
15476: LIST
15477: LIST
15478: PPUSH
15479: CALL_OW 69
15483: ST_TO_ADDR
// if not tmp then
15484: LD_VAR 0 5
15488: NOT
15489: IFFALSE 15493
// exit ;
15491: GO 15647
// for i in tmp do
15493: LD_ADDR_VAR 0 1
15497: PUSH
15498: LD_VAR 0 5
15502: PUSH
15503: FOR_IN
15504: IFFALSE 15645
// begin d := rand ( 0 , 5 ) ;
15506: LD_ADDR_VAR 0 4
15510: PUSH
15511: LD_INT 0
15513: PPUSH
15514: LD_INT 5
15516: PPUSH
15517: CALL_OW 12
15521: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
15522: LD_ADDR_VAR 0 2
15526: PUSH
15527: LD_VAR 0 1
15531: PPUSH
15532: CALL_OW 250
15536: PPUSH
15537: LD_VAR 0 4
15541: PPUSH
15542: LD_INT 3
15544: PPUSH
15545: LD_INT 12
15547: PPUSH
15548: CALL_OW 12
15552: PPUSH
15553: CALL_OW 272
15557: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
15558: LD_ADDR_VAR 0 3
15562: PUSH
15563: LD_VAR 0 1
15567: PPUSH
15568: CALL_OW 251
15572: PPUSH
15573: LD_VAR 0 4
15577: PPUSH
15578: LD_INT 3
15580: PPUSH
15581: LD_INT 12
15583: PPUSH
15584: CALL_OW 12
15588: PPUSH
15589: CALL_OW 273
15593: ST_TO_ADDR
// if ValidHex ( x , y ) then
15594: LD_VAR 0 2
15598: PPUSH
15599: LD_VAR 0 3
15603: PPUSH
15604: CALL_OW 488
15608: IFFALSE 15643
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
15610: LD_VAR 0 1
15614: PPUSH
15615: LD_VAR 0 2
15619: PPUSH
15620: LD_VAR 0 3
15624: PPUSH
15625: LD_INT 3
15627: PPUSH
15628: LD_INT 6
15630: PPUSH
15631: CALL_OW 12
15635: PPUSH
15636: LD_INT 1
15638: PPUSH
15639: CALL_OW 483
// end ;
15643: GO 15503
15645: POP
15646: POP
// end ;
15647: PPOPN 5
15649: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
15650: LD_EXP 26
15654: PUSH
15655: LD_EXP 61
15659: AND
15660: IFFALSE 15754
15662: GO 15664
15664: DISABLE
15665: LD_INT 0
15667: PPUSH
15668: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
15669: LD_ADDR_VAR 0 2
15673: PUSH
15674: LD_INT 22
15676: PUSH
15677: LD_OWVAR 2
15681: PUSH
15682: EMPTY
15683: LIST
15684: LIST
15685: PUSH
15686: LD_INT 32
15688: PUSH
15689: LD_INT 1
15691: PUSH
15692: EMPTY
15693: LIST
15694: LIST
15695: PUSH
15696: LD_INT 21
15698: PUSH
15699: LD_INT 2
15701: PUSH
15702: EMPTY
15703: LIST
15704: LIST
15705: PUSH
15706: EMPTY
15707: LIST
15708: LIST
15709: LIST
15710: PPUSH
15711: CALL_OW 69
15715: ST_TO_ADDR
// if not tmp then
15716: LD_VAR 0 2
15720: NOT
15721: IFFALSE 15725
// exit ;
15723: GO 15754
// for i in tmp do
15725: LD_ADDR_VAR 0 1
15729: PUSH
15730: LD_VAR 0 2
15734: PUSH
15735: FOR_IN
15736: IFFALSE 15752
// SetFuel ( i , 0 ) ;
15738: LD_VAR 0 1
15742: PPUSH
15743: LD_INT 0
15745: PPUSH
15746: CALL_OW 240
15750: GO 15735
15752: POP
15753: POP
// end ;
15754: PPOPN 2
15756: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
15757: LD_EXP 26
15761: PUSH
15762: LD_EXP 62
15766: AND
15767: IFFALSE 15833
15769: GO 15771
15771: DISABLE
15772: LD_INT 0
15774: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15775: LD_ADDR_VAR 0 1
15779: PUSH
15780: LD_INT 22
15782: PUSH
15783: LD_OWVAR 2
15787: PUSH
15788: EMPTY
15789: LIST
15790: LIST
15791: PUSH
15792: LD_INT 30
15794: PUSH
15795: LD_INT 29
15797: PUSH
15798: EMPTY
15799: LIST
15800: LIST
15801: PUSH
15802: EMPTY
15803: LIST
15804: LIST
15805: PPUSH
15806: CALL_OW 69
15810: ST_TO_ADDR
// if not tmp then
15811: LD_VAR 0 1
15815: NOT
15816: IFFALSE 15820
// exit ;
15818: GO 15833
// DestroyUnit ( tmp [ 1 ] ) ;
15820: LD_VAR 0 1
15824: PUSH
15825: LD_INT 1
15827: ARRAY
15828: PPUSH
15829: CALL_OW 65
// end ;
15833: PPOPN 1
15835: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
15836: LD_EXP 26
15840: PUSH
15841: LD_EXP 64
15845: AND
15846: IFFALSE 15975
15848: GO 15850
15850: DISABLE
15851: LD_INT 0
15853: PPUSH
// begin uc_side := 0 ;
15854: LD_ADDR_OWVAR 20
15858: PUSH
15859: LD_INT 0
15861: ST_TO_ADDR
// uc_nation := nation_arabian ;
15862: LD_ADDR_OWVAR 21
15866: PUSH
15867: LD_INT 2
15869: ST_TO_ADDR
// hc_gallery :=  ;
15870: LD_ADDR_OWVAR 33
15874: PUSH
15875: LD_STRING 
15877: ST_TO_ADDR
// hc_name :=  ;
15878: LD_ADDR_OWVAR 26
15882: PUSH
15883: LD_STRING 
15885: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
15886: LD_INT 1
15888: PPUSH
15889: LD_INT 11
15891: PPUSH
15892: LD_INT 10
15894: PPUSH
15895: CALL_OW 380
// un := CreateHuman ;
15899: LD_ADDR_VAR 0 1
15903: PUSH
15904: CALL_OW 44
15908: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15909: LD_VAR 0 1
15913: PPUSH
15914: LD_INT 1
15916: PPUSH
15917: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15921: LD_INT 35
15923: PPUSH
15924: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15928: LD_VAR 0 1
15932: PPUSH
15933: LD_INT 22
15935: PUSH
15936: LD_OWVAR 2
15940: PUSH
15941: EMPTY
15942: LIST
15943: LIST
15944: PPUSH
15945: CALL_OW 69
15949: PPUSH
15950: LD_VAR 0 1
15954: PPUSH
15955: CALL_OW 74
15959: PPUSH
15960: CALL_OW 115
// until IsDead ( un ) ;
15964: LD_VAR 0 1
15968: PPUSH
15969: CALL_OW 301
15973: IFFALSE 15921
// end ;
15975: PPOPN 1
15977: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
15978: LD_EXP 26
15982: PUSH
15983: LD_EXP 66
15987: AND
15988: IFFALSE 16000
15990: GO 15992
15992: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
15993: LD_STRING earthquake(getX(game), 0, 32)
15995: PPUSH
15996: CALL_OW 559
16000: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
16001: LD_EXP 26
16005: PUSH
16006: LD_EXP 67
16010: AND
16011: IFFALSE 16102
16013: GO 16015
16015: DISABLE
16016: LD_INT 0
16018: PPUSH
// begin enable ;
16019: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
16020: LD_ADDR_VAR 0 1
16024: PUSH
16025: LD_INT 22
16027: PUSH
16028: LD_OWVAR 2
16032: PUSH
16033: EMPTY
16034: LIST
16035: LIST
16036: PUSH
16037: LD_INT 21
16039: PUSH
16040: LD_INT 2
16042: PUSH
16043: EMPTY
16044: LIST
16045: LIST
16046: PUSH
16047: LD_INT 33
16049: PUSH
16050: LD_INT 3
16052: PUSH
16053: EMPTY
16054: LIST
16055: LIST
16056: PUSH
16057: EMPTY
16058: LIST
16059: LIST
16060: LIST
16061: PPUSH
16062: CALL_OW 69
16066: ST_TO_ADDR
// if not tmp then
16067: LD_VAR 0 1
16071: NOT
16072: IFFALSE 16076
// exit ;
16074: GO 16102
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16076: LD_VAR 0 1
16080: PUSH
16081: LD_INT 1
16083: PPUSH
16084: LD_VAR 0 1
16088: PPUSH
16089: CALL_OW 12
16093: ARRAY
16094: PPUSH
16095: LD_INT 1
16097: PPUSH
16098: CALL_OW 234
// end ;
16102: PPOPN 1
16104: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
16105: LD_EXP 26
16109: PUSH
16110: LD_EXP 68
16114: AND
16115: IFFALSE 16256
16117: GO 16119
16119: DISABLE
16120: LD_INT 0
16122: PPUSH
16123: PPUSH
16124: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16125: LD_ADDR_VAR 0 3
16129: PUSH
16130: LD_INT 22
16132: PUSH
16133: LD_OWVAR 2
16137: PUSH
16138: EMPTY
16139: LIST
16140: LIST
16141: PUSH
16142: LD_INT 25
16144: PUSH
16145: LD_INT 1
16147: PUSH
16148: EMPTY
16149: LIST
16150: LIST
16151: PUSH
16152: EMPTY
16153: LIST
16154: LIST
16155: PPUSH
16156: CALL_OW 69
16160: ST_TO_ADDR
// if not tmp then
16161: LD_VAR 0 3
16165: NOT
16166: IFFALSE 16170
// exit ;
16168: GO 16256
// un := tmp [ rand ( 1 , tmp ) ] ;
16170: LD_ADDR_VAR 0 2
16174: PUSH
16175: LD_VAR 0 3
16179: PUSH
16180: LD_INT 1
16182: PPUSH
16183: LD_VAR 0 3
16187: PPUSH
16188: CALL_OW 12
16192: ARRAY
16193: ST_TO_ADDR
// if Crawls ( un ) then
16194: LD_VAR 0 2
16198: PPUSH
16199: CALL_OW 318
16203: IFFALSE 16214
// ComWalk ( un ) ;
16205: LD_VAR 0 2
16209: PPUSH
16210: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
16214: LD_VAR 0 2
16218: PPUSH
16219: LD_INT 9
16221: PPUSH
16222: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
16226: LD_INT 28
16228: PPUSH
16229: LD_OWVAR 2
16233: PPUSH
16234: LD_INT 2
16236: PPUSH
16237: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
16241: LD_INT 29
16243: PPUSH
16244: LD_OWVAR 2
16248: PPUSH
16249: LD_INT 2
16251: PPUSH
16252: CALL_OW 322
// end ;
16256: PPOPN 3
16258: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
16259: LD_EXP 26
16263: PUSH
16264: LD_EXP 69
16268: AND
16269: IFFALSE 16380
16271: GO 16273
16273: DISABLE
16274: LD_INT 0
16276: PPUSH
16277: PPUSH
16278: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16279: LD_ADDR_VAR 0 3
16283: PUSH
16284: LD_INT 22
16286: PUSH
16287: LD_OWVAR 2
16291: PUSH
16292: EMPTY
16293: LIST
16294: LIST
16295: PUSH
16296: LD_INT 25
16298: PUSH
16299: LD_INT 1
16301: PUSH
16302: EMPTY
16303: LIST
16304: LIST
16305: PUSH
16306: EMPTY
16307: LIST
16308: LIST
16309: PPUSH
16310: CALL_OW 69
16314: ST_TO_ADDR
// if not tmp then
16315: LD_VAR 0 3
16319: NOT
16320: IFFALSE 16324
// exit ;
16322: GO 16380
// un := tmp [ rand ( 1 , tmp ) ] ;
16324: LD_ADDR_VAR 0 2
16328: PUSH
16329: LD_VAR 0 3
16333: PUSH
16334: LD_INT 1
16336: PPUSH
16337: LD_VAR 0 3
16341: PPUSH
16342: CALL_OW 12
16346: ARRAY
16347: ST_TO_ADDR
// if Crawls ( un ) then
16348: LD_VAR 0 2
16352: PPUSH
16353: CALL_OW 318
16357: IFFALSE 16368
// ComWalk ( un ) ;
16359: LD_VAR 0 2
16363: PPUSH
16364: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16368: LD_VAR 0 2
16372: PPUSH
16373: LD_INT 8
16375: PPUSH
16376: CALL_OW 336
// end ;
16380: PPOPN 3
16382: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
16383: LD_EXP 26
16387: PUSH
16388: LD_EXP 70
16392: AND
16393: IFFALSE 16537
16395: GO 16397
16397: DISABLE
16398: LD_INT 0
16400: PPUSH
16401: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
16402: LD_ADDR_VAR 0 2
16406: PUSH
16407: LD_INT 22
16409: PUSH
16410: LD_OWVAR 2
16414: PUSH
16415: EMPTY
16416: LIST
16417: LIST
16418: PUSH
16419: LD_INT 21
16421: PUSH
16422: LD_INT 2
16424: PUSH
16425: EMPTY
16426: LIST
16427: LIST
16428: PUSH
16429: LD_INT 2
16431: PUSH
16432: LD_INT 34
16434: PUSH
16435: LD_INT 12
16437: PUSH
16438: EMPTY
16439: LIST
16440: LIST
16441: PUSH
16442: LD_INT 34
16444: PUSH
16445: LD_INT 51
16447: PUSH
16448: EMPTY
16449: LIST
16450: LIST
16451: PUSH
16452: LD_INT 34
16454: PUSH
16455: LD_INT 32
16457: PUSH
16458: EMPTY
16459: LIST
16460: LIST
16461: PUSH
16462: EMPTY
16463: LIST
16464: LIST
16465: LIST
16466: LIST
16467: PUSH
16468: EMPTY
16469: LIST
16470: LIST
16471: LIST
16472: PPUSH
16473: CALL_OW 69
16477: ST_TO_ADDR
// if not tmp then
16478: LD_VAR 0 2
16482: NOT
16483: IFFALSE 16487
// exit ;
16485: GO 16537
// for i in tmp do
16487: LD_ADDR_VAR 0 1
16491: PUSH
16492: LD_VAR 0 2
16496: PUSH
16497: FOR_IN
16498: IFFALSE 16535
// if GetCargo ( i , mat_artifact ) = 0 then
16500: LD_VAR 0 1
16504: PPUSH
16505: LD_INT 4
16507: PPUSH
16508: CALL_OW 289
16512: PUSH
16513: LD_INT 0
16515: EQUAL
16516: IFFALSE 16533
// SetCargo ( i , mat_siberit , 100 ) ;
16518: LD_VAR 0 1
16522: PPUSH
16523: LD_INT 3
16525: PPUSH
16526: LD_INT 100
16528: PPUSH
16529: CALL_OW 290
16533: GO 16497
16535: POP
16536: POP
// end ;
16537: PPOPN 2
16539: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
16540: LD_EXP 26
16544: PUSH
16545: LD_EXP 71
16549: AND
16550: IFFALSE 16733
16552: GO 16554
16554: DISABLE
16555: LD_INT 0
16557: PPUSH
16558: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16559: LD_ADDR_VAR 0 2
16563: PUSH
16564: LD_INT 22
16566: PUSH
16567: LD_OWVAR 2
16571: PUSH
16572: EMPTY
16573: LIST
16574: LIST
16575: PPUSH
16576: CALL_OW 69
16580: ST_TO_ADDR
// if not tmp then
16581: LD_VAR 0 2
16585: NOT
16586: IFFALSE 16590
// exit ;
16588: GO 16733
// for i := 1 to 2 do
16590: LD_ADDR_VAR 0 1
16594: PUSH
16595: DOUBLE
16596: LD_INT 1
16598: DEC
16599: ST_TO_ADDR
16600: LD_INT 2
16602: PUSH
16603: FOR_TO
16604: IFFALSE 16731
// begin uc_side := your_side ;
16606: LD_ADDR_OWVAR 20
16610: PUSH
16611: LD_OWVAR 2
16615: ST_TO_ADDR
// uc_nation := nation_american ;
16616: LD_ADDR_OWVAR 21
16620: PUSH
16621: LD_INT 1
16623: ST_TO_ADDR
// vc_chassis := us_morphling ;
16624: LD_ADDR_OWVAR 37
16628: PUSH
16629: LD_INT 5
16631: ST_TO_ADDR
// vc_engine := engine_siberite ;
16632: LD_ADDR_OWVAR 39
16636: PUSH
16637: LD_INT 3
16639: ST_TO_ADDR
// vc_control := control_computer ;
16640: LD_ADDR_OWVAR 38
16644: PUSH
16645: LD_INT 3
16647: ST_TO_ADDR
// vc_weapon := us_double_laser ;
16648: LD_ADDR_OWVAR 40
16652: PUSH
16653: LD_INT 10
16655: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
16656: LD_VAR 0 2
16660: PUSH
16661: LD_INT 1
16663: ARRAY
16664: PPUSH
16665: CALL_OW 310
16669: NOT
16670: IFFALSE 16717
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
16672: CALL_OW 45
16676: PPUSH
16677: LD_VAR 0 2
16681: PUSH
16682: LD_INT 1
16684: ARRAY
16685: PPUSH
16686: CALL_OW 250
16690: PPUSH
16691: LD_VAR 0 2
16695: PUSH
16696: LD_INT 1
16698: ARRAY
16699: PPUSH
16700: CALL_OW 251
16704: PPUSH
16705: LD_INT 12
16707: PPUSH
16708: LD_INT 1
16710: PPUSH
16711: CALL_OW 50
16715: GO 16729
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
16717: CALL_OW 45
16721: PPUSH
16722: LD_INT 1
16724: PPUSH
16725: CALL_OW 51
// end ;
16729: GO 16603
16731: POP
16732: POP
// end ;
16733: PPOPN 2
16735: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
16736: LD_EXP 26
16740: PUSH
16741: LD_EXP 72
16745: AND
16746: IFFALSE 16968
16748: GO 16750
16750: DISABLE
16751: LD_INT 0
16753: PPUSH
16754: PPUSH
16755: PPUSH
16756: PPUSH
16757: PPUSH
16758: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16759: LD_ADDR_VAR 0 6
16763: PUSH
16764: LD_INT 22
16766: PUSH
16767: LD_OWVAR 2
16771: PUSH
16772: EMPTY
16773: LIST
16774: LIST
16775: PUSH
16776: LD_INT 21
16778: PUSH
16779: LD_INT 1
16781: PUSH
16782: EMPTY
16783: LIST
16784: LIST
16785: PUSH
16786: LD_INT 3
16788: PUSH
16789: LD_INT 23
16791: PUSH
16792: LD_INT 0
16794: PUSH
16795: EMPTY
16796: LIST
16797: LIST
16798: PUSH
16799: EMPTY
16800: LIST
16801: LIST
16802: PUSH
16803: EMPTY
16804: LIST
16805: LIST
16806: LIST
16807: PPUSH
16808: CALL_OW 69
16812: ST_TO_ADDR
// if not tmp then
16813: LD_VAR 0 6
16817: NOT
16818: IFFALSE 16822
// exit ;
16820: GO 16968
// s1 := rand ( 1 , 4 ) ;
16822: LD_ADDR_VAR 0 2
16826: PUSH
16827: LD_INT 1
16829: PPUSH
16830: LD_INT 4
16832: PPUSH
16833: CALL_OW 12
16837: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
16838: LD_ADDR_VAR 0 4
16842: PUSH
16843: LD_VAR 0 6
16847: PUSH
16848: LD_INT 1
16850: ARRAY
16851: PPUSH
16852: LD_VAR 0 2
16856: PPUSH
16857: CALL_OW 259
16861: ST_TO_ADDR
// if s1 = 1 then
16862: LD_VAR 0 2
16866: PUSH
16867: LD_INT 1
16869: EQUAL
16870: IFFALSE 16890
// s2 := rand ( 2 , 4 ) else
16872: LD_ADDR_VAR 0 3
16876: PUSH
16877: LD_INT 2
16879: PPUSH
16880: LD_INT 4
16882: PPUSH
16883: CALL_OW 12
16887: ST_TO_ADDR
16888: GO 16898
// s2 := 1 ;
16890: LD_ADDR_VAR 0 3
16894: PUSH
16895: LD_INT 1
16897: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
16898: LD_ADDR_VAR 0 5
16902: PUSH
16903: LD_VAR 0 6
16907: PUSH
16908: LD_INT 1
16910: ARRAY
16911: PPUSH
16912: LD_VAR 0 3
16916: PPUSH
16917: CALL_OW 259
16921: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
16922: LD_VAR 0 6
16926: PUSH
16927: LD_INT 1
16929: ARRAY
16930: PPUSH
16931: LD_VAR 0 2
16935: PPUSH
16936: LD_VAR 0 5
16940: PPUSH
16941: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
16945: LD_VAR 0 6
16949: PUSH
16950: LD_INT 1
16952: ARRAY
16953: PPUSH
16954: LD_VAR 0 3
16958: PPUSH
16959: LD_VAR 0 4
16963: PPUSH
16964: CALL_OW 237
// end ;
16968: PPOPN 6
16970: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
16971: LD_EXP 26
16975: PUSH
16976: LD_EXP 73
16980: AND
16981: IFFALSE 17060
16983: GO 16985
16985: DISABLE
16986: LD_INT 0
16988: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
16989: LD_ADDR_VAR 0 1
16993: PUSH
16994: LD_INT 22
16996: PUSH
16997: LD_OWVAR 2
17001: PUSH
17002: EMPTY
17003: LIST
17004: LIST
17005: PUSH
17006: LD_INT 30
17008: PUSH
17009: LD_INT 3
17011: PUSH
17012: EMPTY
17013: LIST
17014: LIST
17015: PUSH
17016: EMPTY
17017: LIST
17018: LIST
17019: PPUSH
17020: CALL_OW 69
17024: ST_TO_ADDR
// if not tmp then
17025: LD_VAR 0 1
17029: NOT
17030: IFFALSE 17034
// exit ;
17032: GO 17060
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17034: LD_VAR 0 1
17038: PUSH
17039: LD_INT 1
17041: PPUSH
17042: LD_VAR 0 1
17046: PPUSH
17047: CALL_OW 12
17051: ARRAY
17052: PPUSH
17053: LD_INT 1
17055: PPUSH
17056: CALL_OW 234
// end ;
17060: PPOPN 1
17062: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
17063: LD_EXP 26
17067: PUSH
17068: LD_EXP 74
17072: AND
17073: IFFALSE 17185
17075: GO 17077
17077: DISABLE
17078: LD_INT 0
17080: PPUSH
17081: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
17082: LD_ADDR_VAR 0 2
17086: PUSH
17087: LD_INT 22
17089: PUSH
17090: LD_OWVAR 2
17094: PUSH
17095: EMPTY
17096: LIST
17097: LIST
17098: PUSH
17099: LD_INT 2
17101: PUSH
17102: LD_INT 30
17104: PUSH
17105: LD_INT 27
17107: PUSH
17108: EMPTY
17109: LIST
17110: LIST
17111: PUSH
17112: LD_INT 30
17114: PUSH
17115: LD_INT 26
17117: PUSH
17118: EMPTY
17119: LIST
17120: LIST
17121: PUSH
17122: LD_INT 30
17124: PUSH
17125: LD_INT 28
17127: PUSH
17128: EMPTY
17129: LIST
17130: LIST
17131: PUSH
17132: EMPTY
17133: LIST
17134: LIST
17135: LIST
17136: LIST
17137: PUSH
17138: EMPTY
17139: LIST
17140: LIST
17141: PPUSH
17142: CALL_OW 69
17146: ST_TO_ADDR
// if not tmp then
17147: LD_VAR 0 2
17151: NOT
17152: IFFALSE 17156
// exit ;
17154: GO 17185
// for i in tmp do
17156: LD_ADDR_VAR 0 1
17160: PUSH
17161: LD_VAR 0 2
17165: PUSH
17166: FOR_IN
17167: IFFALSE 17183
// SetLives ( i , 1 ) ;
17169: LD_VAR 0 1
17173: PPUSH
17174: LD_INT 1
17176: PPUSH
17177: CALL_OW 234
17181: GO 17166
17183: POP
17184: POP
// end ;
17185: PPOPN 2
17187: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
17188: LD_EXP 26
17192: PUSH
17193: LD_EXP 75
17197: AND
17198: IFFALSE 17485
17200: GO 17202
17202: DISABLE
17203: LD_INT 0
17205: PPUSH
17206: PPUSH
17207: PPUSH
// begin i := rand ( 1 , 7 ) ;
17208: LD_ADDR_VAR 0 1
17212: PUSH
17213: LD_INT 1
17215: PPUSH
17216: LD_INT 7
17218: PPUSH
17219: CALL_OW 12
17223: ST_TO_ADDR
// case i of 1 :
17224: LD_VAR 0 1
17228: PUSH
17229: LD_INT 1
17231: DOUBLE
17232: EQUAL
17233: IFTRUE 17237
17235: GO 17247
17237: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
17238: LD_STRING earthquake(getX(game), 0, 32)
17240: PPUSH
17241: CALL_OW 559
17245: GO 17485
17247: LD_INT 2
17249: DOUBLE
17250: EQUAL
17251: IFTRUE 17255
17253: GO 17269
17255: POP
// begin ToLua ( displayStucuk(); ) ;
17256: LD_STRING displayStucuk();
17258: PPUSH
17259: CALL_OW 559
// ResetFog ;
17263: CALL_OW 335
// end ; 3 :
17267: GO 17485
17269: LD_INT 3
17271: DOUBLE
17272: EQUAL
17273: IFTRUE 17277
17275: GO 17381
17277: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17278: LD_ADDR_VAR 0 2
17282: PUSH
17283: LD_INT 22
17285: PUSH
17286: LD_OWVAR 2
17290: PUSH
17291: EMPTY
17292: LIST
17293: LIST
17294: PUSH
17295: LD_INT 25
17297: PUSH
17298: LD_INT 1
17300: PUSH
17301: EMPTY
17302: LIST
17303: LIST
17304: PUSH
17305: EMPTY
17306: LIST
17307: LIST
17308: PPUSH
17309: CALL_OW 69
17313: ST_TO_ADDR
// if not tmp then
17314: LD_VAR 0 2
17318: NOT
17319: IFFALSE 17323
// exit ;
17321: GO 17485
// un := tmp [ rand ( 1 , tmp ) ] ;
17323: LD_ADDR_VAR 0 3
17327: PUSH
17328: LD_VAR 0 2
17332: PUSH
17333: LD_INT 1
17335: PPUSH
17336: LD_VAR 0 2
17340: PPUSH
17341: CALL_OW 12
17345: ARRAY
17346: ST_TO_ADDR
// if Crawls ( un ) then
17347: LD_VAR 0 3
17351: PPUSH
17352: CALL_OW 318
17356: IFFALSE 17367
// ComWalk ( un ) ;
17358: LD_VAR 0 3
17362: PPUSH
17363: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17367: LD_VAR 0 3
17371: PPUSH
17372: LD_INT 8
17374: PPUSH
17375: CALL_OW 336
// end ; 4 :
17379: GO 17485
17381: LD_INT 4
17383: DOUBLE
17384: EQUAL
17385: IFTRUE 17389
17387: GO 17463
17389: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17390: LD_ADDR_VAR 0 2
17394: PUSH
17395: LD_INT 22
17397: PUSH
17398: LD_OWVAR 2
17402: PUSH
17403: EMPTY
17404: LIST
17405: LIST
17406: PUSH
17407: LD_INT 30
17409: PUSH
17410: LD_INT 29
17412: PUSH
17413: EMPTY
17414: LIST
17415: LIST
17416: PUSH
17417: EMPTY
17418: LIST
17419: LIST
17420: PPUSH
17421: CALL_OW 69
17425: ST_TO_ADDR
// if not tmp then
17426: LD_VAR 0 2
17430: NOT
17431: IFFALSE 17435
// exit ;
17433: GO 17485
// CenterNowOnUnits ( tmp [ 1 ] ) ;
17435: LD_VAR 0 2
17439: PUSH
17440: LD_INT 1
17442: ARRAY
17443: PPUSH
17444: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
17448: LD_VAR 0 2
17452: PUSH
17453: LD_INT 1
17455: ARRAY
17456: PPUSH
17457: CALL_OW 65
// end ; 5 .. 7 :
17461: GO 17485
17463: LD_INT 5
17465: DOUBLE
17466: GREATEREQUAL
17467: IFFALSE 17475
17469: LD_INT 7
17471: DOUBLE
17472: LESSEQUAL
17473: IFTRUE 17477
17475: GO 17484
17477: POP
// StreamSibBomb ; end ;
17478: CALL 13722 0 0
17482: GO 17485
17484: POP
// end ;
17485: PPOPN 3
17487: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
17488: LD_EXP 26
17492: PUSH
17493: LD_EXP 76
17497: AND
17498: IFFALSE 17654
17500: GO 17502
17502: DISABLE
17503: LD_INT 0
17505: PPUSH
17506: PPUSH
17507: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
17508: LD_ADDR_VAR 0 2
17512: PUSH
17513: LD_INT 81
17515: PUSH
17516: LD_OWVAR 2
17520: PUSH
17521: EMPTY
17522: LIST
17523: LIST
17524: PUSH
17525: LD_INT 2
17527: PUSH
17528: LD_INT 21
17530: PUSH
17531: LD_INT 1
17533: PUSH
17534: EMPTY
17535: LIST
17536: LIST
17537: PUSH
17538: LD_INT 21
17540: PUSH
17541: LD_INT 2
17543: PUSH
17544: EMPTY
17545: LIST
17546: LIST
17547: PUSH
17548: EMPTY
17549: LIST
17550: LIST
17551: LIST
17552: PUSH
17553: EMPTY
17554: LIST
17555: LIST
17556: PPUSH
17557: CALL_OW 69
17561: ST_TO_ADDR
// if not tmp then
17562: LD_VAR 0 2
17566: NOT
17567: IFFALSE 17571
// exit ;
17569: GO 17654
// p := 0 ;
17571: LD_ADDR_VAR 0 3
17575: PUSH
17576: LD_INT 0
17578: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17579: LD_INT 35
17581: PPUSH
17582: CALL_OW 67
// p := p + 1 ;
17586: LD_ADDR_VAR 0 3
17590: PUSH
17591: LD_VAR 0 3
17595: PUSH
17596: LD_INT 1
17598: PLUS
17599: ST_TO_ADDR
// for i in tmp do
17600: LD_ADDR_VAR 0 1
17604: PUSH
17605: LD_VAR 0 2
17609: PUSH
17610: FOR_IN
17611: IFFALSE 17642
// if GetLives ( i ) < 1000 then
17613: LD_VAR 0 1
17617: PPUSH
17618: CALL_OW 256
17622: PUSH
17623: LD_INT 1000
17625: LESS
17626: IFFALSE 17640
// SetLives ( i , 1000 ) ;
17628: LD_VAR 0 1
17632: PPUSH
17633: LD_INT 1000
17635: PPUSH
17636: CALL_OW 234
17640: GO 17610
17642: POP
17643: POP
// until p > 20 ;
17644: LD_VAR 0 3
17648: PUSH
17649: LD_INT 20
17651: GREATER
17652: IFFALSE 17579
// end ;
17654: PPOPN 3
17656: END
// every 0 0$1 trigger StreamModeActive and sTime do
17657: LD_EXP 26
17661: PUSH
17662: LD_EXP 77
17666: AND
17667: IFFALSE 17702
17669: GO 17671
17671: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
17672: LD_INT 28
17674: PPUSH
17675: LD_OWVAR 2
17679: PPUSH
17680: LD_INT 2
17682: PPUSH
17683: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
17687: LD_INT 30
17689: PPUSH
17690: LD_OWVAR 2
17694: PPUSH
17695: LD_INT 2
17697: PPUSH
17698: CALL_OW 322
// end ;
17702: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
17703: LD_EXP 26
17707: PUSH
17708: LD_EXP 78
17712: AND
17713: IFFALSE 17834
17715: GO 17717
17717: DISABLE
17718: LD_INT 0
17720: PPUSH
17721: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17722: LD_ADDR_VAR 0 2
17726: PUSH
17727: LD_INT 22
17729: PUSH
17730: LD_OWVAR 2
17734: PUSH
17735: EMPTY
17736: LIST
17737: LIST
17738: PUSH
17739: LD_INT 21
17741: PUSH
17742: LD_INT 1
17744: PUSH
17745: EMPTY
17746: LIST
17747: LIST
17748: PUSH
17749: LD_INT 3
17751: PUSH
17752: LD_INT 23
17754: PUSH
17755: LD_INT 0
17757: PUSH
17758: EMPTY
17759: LIST
17760: LIST
17761: PUSH
17762: EMPTY
17763: LIST
17764: LIST
17765: PUSH
17766: EMPTY
17767: LIST
17768: LIST
17769: LIST
17770: PPUSH
17771: CALL_OW 69
17775: ST_TO_ADDR
// if not tmp then
17776: LD_VAR 0 2
17780: NOT
17781: IFFALSE 17785
// exit ;
17783: GO 17834
// for i in tmp do
17785: LD_ADDR_VAR 0 1
17789: PUSH
17790: LD_VAR 0 2
17794: PUSH
17795: FOR_IN
17796: IFFALSE 17832
// begin if Crawls ( i ) then
17798: LD_VAR 0 1
17802: PPUSH
17803: CALL_OW 318
17807: IFFALSE 17818
// ComWalk ( i ) ;
17809: LD_VAR 0 1
17813: PPUSH
17814: CALL_OW 138
// SetClass ( i , 2 ) ;
17818: LD_VAR 0 1
17822: PPUSH
17823: LD_INT 2
17825: PPUSH
17826: CALL_OW 336
// end ;
17830: GO 17795
17832: POP
17833: POP
// end ;
17834: PPOPN 2
17836: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
17837: LD_EXP 26
17841: PUSH
17842: LD_EXP 79
17846: AND
17847: IFFALSE 18135
17849: GO 17851
17851: DISABLE
17852: LD_INT 0
17854: PPUSH
17855: PPUSH
17856: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
17857: LD_OWVAR 2
17861: PPUSH
17862: LD_INT 9
17864: PPUSH
17865: LD_INT 1
17867: PPUSH
17868: LD_INT 1
17870: PPUSH
17871: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
17875: LD_INT 9
17877: PPUSH
17878: LD_OWVAR 2
17882: PPUSH
17883: CALL_OW 343
// uc_side := 9 ;
17887: LD_ADDR_OWVAR 20
17891: PUSH
17892: LD_INT 9
17894: ST_TO_ADDR
// uc_nation := 2 ;
17895: LD_ADDR_OWVAR 21
17899: PUSH
17900: LD_INT 2
17902: ST_TO_ADDR
// hc_name := Dark Warrior ;
17903: LD_ADDR_OWVAR 26
17907: PUSH
17908: LD_STRING Dark Warrior
17910: ST_TO_ADDR
// hc_gallery :=  ;
17911: LD_ADDR_OWVAR 33
17915: PUSH
17916: LD_STRING 
17918: ST_TO_ADDR
// hc_noskilllimit := true ;
17919: LD_ADDR_OWVAR 76
17923: PUSH
17924: LD_INT 1
17926: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
17927: LD_ADDR_OWVAR 31
17931: PUSH
17932: LD_INT 30
17934: PUSH
17935: LD_INT 30
17937: PUSH
17938: LD_INT 30
17940: PUSH
17941: LD_INT 30
17943: PUSH
17944: EMPTY
17945: LIST
17946: LIST
17947: LIST
17948: LIST
17949: ST_TO_ADDR
// un := CreateHuman ;
17950: LD_ADDR_VAR 0 3
17954: PUSH
17955: CALL_OW 44
17959: ST_TO_ADDR
// hc_noskilllimit := false ;
17960: LD_ADDR_OWVAR 76
17964: PUSH
17965: LD_INT 0
17967: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17968: LD_VAR 0 3
17972: PPUSH
17973: LD_INT 1
17975: PPUSH
17976: CALL_OW 51
// ToLua ( playRanger() ) ;
17980: LD_STRING playRanger()
17982: PPUSH
17983: CALL_OW 559
// p := 0 ;
17987: LD_ADDR_VAR 0 2
17991: PUSH
17992: LD_INT 0
17994: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17995: LD_INT 35
17997: PPUSH
17998: CALL_OW 67
// p := p + 1 ;
18002: LD_ADDR_VAR 0 2
18006: PUSH
18007: LD_VAR 0 2
18011: PUSH
18012: LD_INT 1
18014: PLUS
18015: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
18016: LD_VAR 0 3
18020: PPUSH
18021: CALL_OW 256
18025: PUSH
18026: LD_INT 1000
18028: LESS
18029: IFFALSE 18043
// SetLives ( un , 1000 ) ;
18031: LD_VAR 0 3
18035: PPUSH
18036: LD_INT 1000
18038: PPUSH
18039: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
18043: LD_VAR 0 3
18047: PPUSH
18048: LD_INT 81
18050: PUSH
18051: LD_OWVAR 2
18055: PUSH
18056: EMPTY
18057: LIST
18058: LIST
18059: PUSH
18060: LD_INT 91
18062: PUSH
18063: LD_VAR 0 3
18067: PUSH
18068: LD_INT 30
18070: PUSH
18071: EMPTY
18072: LIST
18073: LIST
18074: LIST
18075: PUSH
18076: EMPTY
18077: LIST
18078: LIST
18079: PPUSH
18080: CALL_OW 69
18084: PPUSH
18085: LD_VAR 0 3
18089: PPUSH
18090: CALL_OW 74
18094: PPUSH
18095: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
18099: LD_VAR 0 2
18103: PUSH
18104: LD_INT 80
18106: GREATER
18107: PUSH
18108: LD_VAR 0 3
18112: PPUSH
18113: CALL_OW 301
18117: OR
18118: IFFALSE 17995
// if un then
18120: LD_VAR 0 3
18124: IFFALSE 18135
// RemoveUnit ( un ) ;
18126: LD_VAR 0 3
18130: PPUSH
18131: CALL_OW 64
// end ;
18135: PPOPN 3
18137: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
18138: LD_EXP 80
18142: IFFALSE 18258
18144: GO 18146
18146: DISABLE
18147: LD_INT 0
18149: PPUSH
18150: PPUSH
18151: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
18152: LD_ADDR_VAR 0 2
18156: PUSH
18157: LD_INT 81
18159: PUSH
18160: LD_OWVAR 2
18164: PUSH
18165: EMPTY
18166: LIST
18167: LIST
18168: PUSH
18169: LD_INT 21
18171: PUSH
18172: LD_INT 1
18174: PUSH
18175: EMPTY
18176: LIST
18177: LIST
18178: PUSH
18179: EMPTY
18180: LIST
18181: LIST
18182: PPUSH
18183: CALL_OW 69
18187: ST_TO_ADDR
// ToLua ( playComputer() ) ;
18188: LD_STRING playComputer()
18190: PPUSH
18191: CALL_OW 559
// if not tmp then
18195: LD_VAR 0 2
18199: NOT
18200: IFFALSE 18204
// exit ;
18202: GO 18258
// for i in tmp do
18204: LD_ADDR_VAR 0 1
18208: PUSH
18209: LD_VAR 0 2
18213: PUSH
18214: FOR_IN
18215: IFFALSE 18256
// for j := 1 to 4 do
18217: LD_ADDR_VAR 0 3
18221: PUSH
18222: DOUBLE
18223: LD_INT 1
18225: DEC
18226: ST_TO_ADDR
18227: LD_INT 4
18229: PUSH
18230: FOR_TO
18231: IFFALSE 18252
// SetSkill ( i , j , 10 ) ;
18233: LD_VAR 0 1
18237: PPUSH
18238: LD_VAR 0 3
18242: PPUSH
18243: LD_INT 10
18245: PPUSH
18246: CALL_OW 237
18250: GO 18230
18252: POP
18253: POP
18254: GO 18214
18256: POP
18257: POP
// end ;
18258: PPOPN 3
18260: END
// every 0 0$1 trigger s30 do var i , tmp ;
18261: LD_EXP 81
18265: IFFALSE 18334
18267: GO 18269
18269: DISABLE
18270: LD_INT 0
18272: PPUSH
18273: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18274: LD_ADDR_VAR 0 2
18278: PUSH
18279: LD_INT 22
18281: PUSH
18282: LD_OWVAR 2
18286: PUSH
18287: EMPTY
18288: LIST
18289: LIST
18290: PPUSH
18291: CALL_OW 69
18295: ST_TO_ADDR
// if not tmp then
18296: LD_VAR 0 2
18300: NOT
18301: IFFALSE 18305
// exit ;
18303: GO 18334
// for i in tmp do
18305: LD_ADDR_VAR 0 1
18309: PUSH
18310: LD_VAR 0 2
18314: PUSH
18315: FOR_IN
18316: IFFALSE 18332
// SetLives ( i , 300 ) ;
18318: LD_VAR 0 1
18322: PPUSH
18323: LD_INT 300
18325: PPUSH
18326: CALL_OW 234
18330: GO 18315
18332: POP
18333: POP
// end ;
18334: PPOPN 2
18336: END
// every 0 0$1 trigger s60 do var i , tmp ;
18337: LD_EXP 82
18341: IFFALSE 18410
18343: GO 18345
18345: DISABLE
18346: LD_INT 0
18348: PPUSH
18349: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18350: LD_ADDR_VAR 0 2
18354: PUSH
18355: LD_INT 22
18357: PUSH
18358: LD_OWVAR 2
18362: PUSH
18363: EMPTY
18364: LIST
18365: LIST
18366: PPUSH
18367: CALL_OW 69
18371: ST_TO_ADDR
// if not tmp then
18372: LD_VAR 0 2
18376: NOT
18377: IFFALSE 18381
// exit ;
18379: GO 18410
// for i in tmp do
18381: LD_ADDR_VAR 0 1
18385: PUSH
18386: LD_VAR 0 2
18390: PUSH
18391: FOR_IN
18392: IFFALSE 18408
// SetLives ( i , 600 ) ;
18394: LD_VAR 0 1
18398: PPUSH
18399: LD_INT 600
18401: PPUSH
18402: CALL_OW 234
18406: GO 18391
18408: POP
18409: POP
// end ;
18410: PPOPN 2
18412: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18413: LD_INT 0
18415: PPUSH
// case cmd of 301 :
18416: LD_VAR 0 1
18420: PUSH
18421: LD_INT 301
18423: DOUBLE
18424: EQUAL
18425: IFTRUE 18429
18427: GO 18461
18429: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
18430: LD_VAR 0 6
18434: PPUSH
18435: LD_VAR 0 7
18439: PPUSH
18440: LD_VAR 0 8
18444: PPUSH
18445: LD_VAR 0 4
18449: PPUSH
18450: LD_VAR 0 5
18454: PPUSH
18455: CALL 19670 0 5
18459: GO 18582
18461: LD_INT 302
18463: DOUBLE
18464: EQUAL
18465: IFTRUE 18469
18467: GO 18506
18469: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
18470: LD_VAR 0 6
18474: PPUSH
18475: LD_VAR 0 7
18479: PPUSH
18480: LD_VAR 0 8
18484: PPUSH
18485: LD_VAR 0 9
18489: PPUSH
18490: LD_VAR 0 4
18494: PPUSH
18495: LD_VAR 0 5
18499: PPUSH
18500: CALL 19761 0 6
18504: GO 18582
18506: LD_INT 303
18508: DOUBLE
18509: EQUAL
18510: IFTRUE 18514
18512: GO 18551
18514: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
18515: LD_VAR 0 6
18519: PPUSH
18520: LD_VAR 0 7
18524: PPUSH
18525: LD_VAR 0 8
18529: PPUSH
18530: LD_VAR 0 9
18534: PPUSH
18535: LD_VAR 0 4
18539: PPUSH
18540: LD_VAR 0 5
18544: PPUSH
18545: CALL 18587 0 6
18549: GO 18582
18551: LD_INT 304
18553: DOUBLE
18554: EQUAL
18555: IFTRUE 18559
18557: GO 18581
18559: POP
// hHackTeleport ( unit , x , y ) ; end ;
18560: LD_VAR 0 2
18564: PPUSH
18565: LD_VAR 0 4
18569: PPUSH
18570: LD_VAR 0 5
18574: PPUSH
18575: CALL 20354 0 3
18579: GO 18582
18581: POP
// end ;
18582: LD_VAR 0 12
18586: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
18587: LD_INT 0
18589: PPUSH
18590: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
18591: LD_VAR 0 1
18595: PUSH
18596: LD_INT 1
18598: LESS
18599: PUSH
18600: LD_VAR 0 1
18604: PUSH
18605: LD_INT 3
18607: GREATER
18608: OR
18609: PUSH
18610: LD_VAR 0 5
18614: PPUSH
18615: LD_VAR 0 6
18619: PPUSH
18620: CALL_OW 428
18624: OR
18625: IFFALSE 18629
// exit ;
18627: GO 19357
// uc_side := your_side ;
18629: LD_ADDR_OWVAR 20
18633: PUSH
18634: LD_OWVAR 2
18638: ST_TO_ADDR
// uc_nation := nation ;
18639: LD_ADDR_OWVAR 21
18643: PUSH
18644: LD_VAR 0 1
18648: ST_TO_ADDR
// bc_level = 1 ;
18649: LD_ADDR_OWVAR 43
18653: PUSH
18654: LD_INT 1
18656: ST_TO_ADDR
// case btype of 1 :
18657: LD_VAR 0 2
18661: PUSH
18662: LD_INT 1
18664: DOUBLE
18665: EQUAL
18666: IFTRUE 18670
18668: GO 18681
18670: POP
// bc_type := b_depot ; 2 :
18671: LD_ADDR_OWVAR 42
18675: PUSH
18676: LD_INT 0
18678: ST_TO_ADDR
18679: GO 19301
18681: LD_INT 2
18683: DOUBLE
18684: EQUAL
18685: IFTRUE 18689
18687: GO 18700
18689: POP
// bc_type := b_warehouse ; 3 :
18690: LD_ADDR_OWVAR 42
18694: PUSH
18695: LD_INT 1
18697: ST_TO_ADDR
18698: GO 19301
18700: LD_INT 3
18702: DOUBLE
18703: EQUAL
18704: IFTRUE 18708
18706: GO 18719
18708: POP
// bc_type := b_lab ; 4 .. 9 :
18709: LD_ADDR_OWVAR 42
18713: PUSH
18714: LD_INT 6
18716: ST_TO_ADDR
18717: GO 19301
18719: LD_INT 4
18721: DOUBLE
18722: GREATEREQUAL
18723: IFFALSE 18731
18725: LD_INT 9
18727: DOUBLE
18728: LESSEQUAL
18729: IFTRUE 18733
18731: GO 18793
18733: POP
// begin bc_type := b_lab_half ;
18734: LD_ADDR_OWVAR 42
18738: PUSH
18739: LD_INT 7
18741: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
18742: LD_ADDR_OWVAR 44
18746: PUSH
18747: LD_INT 10
18749: PUSH
18750: LD_INT 11
18752: PUSH
18753: LD_INT 12
18755: PUSH
18756: LD_INT 15
18758: PUSH
18759: LD_INT 14
18761: PUSH
18762: LD_INT 13
18764: PUSH
18765: EMPTY
18766: LIST
18767: LIST
18768: LIST
18769: LIST
18770: LIST
18771: LIST
18772: PUSH
18773: LD_VAR 0 2
18777: PUSH
18778: LD_INT 3
18780: MINUS
18781: ARRAY
18782: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
18783: LD_ADDR_OWVAR 45
18787: PUSH
18788: LD_INT 9
18790: ST_TO_ADDR
// end ; 10 .. 13 :
18791: GO 19301
18793: LD_INT 10
18795: DOUBLE
18796: GREATEREQUAL
18797: IFFALSE 18805
18799: LD_INT 13
18801: DOUBLE
18802: LESSEQUAL
18803: IFTRUE 18807
18805: GO 18884
18807: POP
// begin bc_type := b_lab_full ;
18808: LD_ADDR_OWVAR 42
18812: PUSH
18813: LD_INT 8
18815: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
18816: LD_ADDR_OWVAR 44
18820: PUSH
18821: LD_INT 10
18823: PUSH
18824: LD_INT 12
18826: PUSH
18827: LD_INT 14
18829: PUSH
18830: LD_INT 13
18832: PUSH
18833: EMPTY
18834: LIST
18835: LIST
18836: LIST
18837: LIST
18838: PUSH
18839: LD_VAR 0 2
18843: PUSH
18844: LD_INT 9
18846: MINUS
18847: ARRAY
18848: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
18849: LD_ADDR_OWVAR 45
18853: PUSH
18854: LD_INT 11
18856: PUSH
18857: LD_INT 15
18859: PUSH
18860: LD_INT 12
18862: PUSH
18863: LD_INT 15
18865: PUSH
18866: EMPTY
18867: LIST
18868: LIST
18869: LIST
18870: LIST
18871: PUSH
18872: LD_VAR 0 2
18876: PUSH
18877: LD_INT 9
18879: MINUS
18880: ARRAY
18881: ST_TO_ADDR
// end ; 14 :
18882: GO 19301
18884: LD_INT 14
18886: DOUBLE
18887: EQUAL
18888: IFTRUE 18892
18890: GO 18903
18892: POP
// bc_type := b_workshop ; 15 :
18893: LD_ADDR_OWVAR 42
18897: PUSH
18898: LD_INT 2
18900: ST_TO_ADDR
18901: GO 19301
18903: LD_INT 15
18905: DOUBLE
18906: EQUAL
18907: IFTRUE 18911
18909: GO 18922
18911: POP
// bc_type := b_factory ; 16 :
18912: LD_ADDR_OWVAR 42
18916: PUSH
18917: LD_INT 3
18919: ST_TO_ADDR
18920: GO 19301
18922: LD_INT 16
18924: DOUBLE
18925: EQUAL
18926: IFTRUE 18930
18928: GO 18941
18930: POP
// bc_type := b_ext_gun ; 17 :
18931: LD_ADDR_OWVAR 42
18935: PUSH
18936: LD_INT 17
18938: ST_TO_ADDR
18939: GO 19301
18941: LD_INT 17
18943: DOUBLE
18944: EQUAL
18945: IFTRUE 18949
18947: GO 18977
18949: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
18950: LD_ADDR_OWVAR 42
18954: PUSH
18955: LD_INT 19
18957: PUSH
18958: LD_INT 23
18960: PUSH
18961: LD_INT 19
18963: PUSH
18964: EMPTY
18965: LIST
18966: LIST
18967: LIST
18968: PUSH
18969: LD_VAR 0 1
18973: ARRAY
18974: ST_TO_ADDR
18975: GO 19301
18977: LD_INT 18
18979: DOUBLE
18980: EQUAL
18981: IFTRUE 18985
18983: GO 18996
18985: POP
// bc_type := b_ext_radar ; 19 :
18986: LD_ADDR_OWVAR 42
18990: PUSH
18991: LD_INT 20
18993: ST_TO_ADDR
18994: GO 19301
18996: LD_INT 19
18998: DOUBLE
18999: EQUAL
19000: IFTRUE 19004
19002: GO 19015
19004: POP
// bc_type := b_ext_radio ; 20 :
19005: LD_ADDR_OWVAR 42
19009: PUSH
19010: LD_INT 22
19012: ST_TO_ADDR
19013: GO 19301
19015: LD_INT 20
19017: DOUBLE
19018: EQUAL
19019: IFTRUE 19023
19021: GO 19034
19023: POP
// bc_type := b_ext_siberium ; 21 :
19024: LD_ADDR_OWVAR 42
19028: PUSH
19029: LD_INT 21
19031: ST_TO_ADDR
19032: GO 19301
19034: LD_INT 21
19036: DOUBLE
19037: EQUAL
19038: IFTRUE 19042
19040: GO 19053
19042: POP
// bc_type := b_ext_computer ; 22 :
19043: LD_ADDR_OWVAR 42
19047: PUSH
19048: LD_INT 24
19050: ST_TO_ADDR
19051: GO 19301
19053: LD_INT 22
19055: DOUBLE
19056: EQUAL
19057: IFTRUE 19061
19059: GO 19072
19061: POP
// bc_type := b_ext_track ; 23 :
19062: LD_ADDR_OWVAR 42
19066: PUSH
19067: LD_INT 16
19069: ST_TO_ADDR
19070: GO 19301
19072: LD_INT 23
19074: DOUBLE
19075: EQUAL
19076: IFTRUE 19080
19078: GO 19091
19080: POP
// bc_type := b_ext_laser ; 24 :
19081: LD_ADDR_OWVAR 42
19085: PUSH
19086: LD_INT 25
19088: ST_TO_ADDR
19089: GO 19301
19091: LD_INT 24
19093: DOUBLE
19094: EQUAL
19095: IFTRUE 19099
19097: GO 19110
19099: POP
// bc_type := b_control_tower ; 25 :
19100: LD_ADDR_OWVAR 42
19104: PUSH
19105: LD_INT 36
19107: ST_TO_ADDR
19108: GO 19301
19110: LD_INT 25
19112: DOUBLE
19113: EQUAL
19114: IFTRUE 19118
19116: GO 19129
19118: POP
// bc_type := b_breastwork ; 26 :
19119: LD_ADDR_OWVAR 42
19123: PUSH
19124: LD_INT 31
19126: ST_TO_ADDR
19127: GO 19301
19129: LD_INT 26
19131: DOUBLE
19132: EQUAL
19133: IFTRUE 19137
19135: GO 19148
19137: POP
// bc_type := b_bunker ; 27 :
19138: LD_ADDR_OWVAR 42
19142: PUSH
19143: LD_INT 32
19145: ST_TO_ADDR
19146: GO 19301
19148: LD_INT 27
19150: DOUBLE
19151: EQUAL
19152: IFTRUE 19156
19154: GO 19167
19156: POP
// bc_type := b_turret ; 28 :
19157: LD_ADDR_OWVAR 42
19161: PUSH
19162: LD_INT 33
19164: ST_TO_ADDR
19165: GO 19301
19167: LD_INT 28
19169: DOUBLE
19170: EQUAL
19171: IFTRUE 19175
19173: GO 19186
19175: POP
// bc_type := b_armoury ; 29 :
19176: LD_ADDR_OWVAR 42
19180: PUSH
19181: LD_INT 4
19183: ST_TO_ADDR
19184: GO 19301
19186: LD_INT 29
19188: DOUBLE
19189: EQUAL
19190: IFTRUE 19194
19192: GO 19205
19194: POP
// bc_type := b_barracks ; 30 :
19195: LD_ADDR_OWVAR 42
19199: PUSH
19200: LD_INT 5
19202: ST_TO_ADDR
19203: GO 19301
19205: LD_INT 30
19207: DOUBLE
19208: EQUAL
19209: IFTRUE 19213
19211: GO 19224
19213: POP
// bc_type := b_solar_power ; 31 :
19214: LD_ADDR_OWVAR 42
19218: PUSH
19219: LD_INT 27
19221: ST_TO_ADDR
19222: GO 19301
19224: LD_INT 31
19226: DOUBLE
19227: EQUAL
19228: IFTRUE 19232
19230: GO 19243
19232: POP
// bc_type := b_oil_power ; 32 :
19233: LD_ADDR_OWVAR 42
19237: PUSH
19238: LD_INT 26
19240: ST_TO_ADDR
19241: GO 19301
19243: LD_INT 32
19245: DOUBLE
19246: EQUAL
19247: IFTRUE 19251
19249: GO 19262
19251: POP
// bc_type := b_siberite_power ; 33 :
19252: LD_ADDR_OWVAR 42
19256: PUSH
19257: LD_INT 28
19259: ST_TO_ADDR
19260: GO 19301
19262: LD_INT 33
19264: DOUBLE
19265: EQUAL
19266: IFTRUE 19270
19268: GO 19281
19270: POP
// bc_type := b_oil_mine ; 34 :
19271: LD_ADDR_OWVAR 42
19275: PUSH
19276: LD_INT 29
19278: ST_TO_ADDR
19279: GO 19301
19281: LD_INT 34
19283: DOUBLE
19284: EQUAL
19285: IFTRUE 19289
19287: GO 19300
19289: POP
// bc_type := b_siberite_mine ; end ;
19290: LD_ADDR_OWVAR 42
19294: PUSH
19295: LD_INT 30
19297: ST_TO_ADDR
19298: GO 19301
19300: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
19301: LD_ADDR_VAR 0 8
19305: PUSH
19306: LD_VAR 0 5
19310: PPUSH
19311: LD_VAR 0 6
19315: PPUSH
19316: LD_VAR 0 3
19320: PPUSH
19321: CALL_OW 47
19325: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
19326: LD_OWVAR 42
19330: PUSH
19331: LD_INT 32
19333: PUSH
19334: LD_INT 33
19336: PUSH
19337: EMPTY
19338: LIST
19339: LIST
19340: IN
19341: IFFALSE 19357
// PlaceWeaponTurret ( b , weapon ) ;
19343: LD_VAR 0 8
19347: PPUSH
19348: LD_VAR 0 4
19352: PPUSH
19353: CALL_OW 431
// end ;
19357: LD_VAR 0 7
19361: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
19362: LD_INT 0
19364: PPUSH
19365: PPUSH
19366: PPUSH
19367: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19368: LD_ADDR_VAR 0 4
19372: PUSH
19373: LD_INT 22
19375: PUSH
19376: LD_OWVAR 2
19380: PUSH
19381: EMPTY
19382: LIST
19383: LIST
19384: PUSH
19385: LD_INT 2
19387: PUSH
19388: LD_INT 30
19390: PUSH
19391: LD_INT 0
19393: PUSH
19394: EMPTY
19395: LIST
19396: LIST
19397: PUSH
19398: LD_INT 30
19400: PUSH
19401: LD_INT 1
19403: PUSH
19404: EMPTY
19405: LIST
19406: LIST
19407: PUSH
19408: EMPTY
19409: LIST
19410: LIST
19411: LIST
19412: PUSH
19413: EMPTY
19414: LIST
19415: LIST
19416: PPUSH
19417: CALL_OW 69
19421: ST_TO_ADDR
// if not tmp then
19422: LD_VAR 0 4
19426: NOT
19427: IFFALSE 19431
// exit ;
19429: GO 19490
// for i in tmp do
19431: LD_ADDR_VAR 0 2
19435: PUSH
19436: LD_VAR 0 4
19440: PUSH
19441: FOR_IN
19442: IFFALSE 19488
// for j = 1 to 3 do
19444: LD_ADDR_VAR 0 3
19448: PUSH
19449: DOUBLE
19450: LD_INT 1
19452: DEC
19453: ST_TO_ADDR
19454: LD_INT 3
19456: PUSH
19457: FOR_TO
19458: IFFALSE 19484
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
19460: LD_VAR 0 2
19464: PPUSH
19465: CALL_OW 274
19469: PPUSH
19470: LD_VAR 0 3
19474: PPUSH
19475: LD_INT 99999
19477: PPUSH
19478: CALL_OW 277
19482: GO 19457
19484: POP
19485: POP
19486: GO 19441
19488: POP
19489: POP
// end ;
19490: LD_VAR 0 1
19494: RET
// export function hHackSetLevel10 ; var i , j ; begin
19495: LD_INT 0
19497: PPUSH
19498: PPUSH
19499: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19500: LD_ADDR_VAR 0 2
19504: PUSH
19505: LD_INT 21
19507: PUSH
19508: LD_INT 1
19510: PUSH
19511: EMPTY
19512: LIST
19513: LIST
19514: PPUSH
19515: CALL_OW 69
19519: PUSH
19520: FOR_IN
19521: IFFALSE 19573
// if IsSelected ( i ) then
19523: LD_VAR 0 2
19527: PPUSH
19528: CALL_OW 306
19532: IFFALSE 19571
// begin for j := 1 to 4 do
19534: LD_ADDR_VAR 0 3
19538: PUSH
19539: DOUBLE
19540: LD_INT 1
19542: DEC
19543: ST_TO_ADDR
19544: LD_INT 4
19546: PUSH
19547: FOR_TO
19548: IFFALSE 19569
// SetSkill ( i , j , 10 ) ;
19550: LD_VAR 0 2
19554: PPUSH
19555: LD_VAR 0 3
19559: PPUSH
19560: LD_INT 10
19562: PPUSH
19563: CALL_OW 237
19567: GO 19547
19569: POP
19570: POP
// end ;
19571: GO 19520
19573: POP
19574: POP
// end ;
19575: LD_VAR 0 1
19579: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
19580: LD_INT 0
19582: PPUSH
19583: PPUSH
19584: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
19585: LD_ADDR_VAR 0 2
19589: PUSH
19590: LD_INT 22
19592: PUSH
19593: LD_OWVAR 2
19597: PUSH
19598: EMPTY
19599: LIST
19600: LIST
19601: PUSH
19602: LD_INT 21
19604: PUSH
19605: LD_INT 1
19607: PUSH
19608: EMPTY
19609: LIST
19610: LIST
19611: PUSH
19612: EMPTY
19613: LIST
19614: LIST
19615: PPUSH
19616: CALL_OW 69
19620: PUSH
19621: FOR_IN
19622: IFFALSE 19663
// begin for j := 1 to 4 do
19624: LD_ADDR_VAR 0 3
19628: PUSH
19629: DOUBLE
19630: LD_INT 1
19632: DEC
19633: ST_TO_ADDR
19634: LD_INT 4
19636: PUSH
19637: FOR_TO
19638: IFFALSE 19659
// SetSkill ( i , j , 10 ) ;
19640: LD_VAR 0 2
19644: PPUSH
19645: LD_VAR 0 3
19649: PPUSH
19650: LD_INT 10
19652: PPUSH
19653: CALL_OW 237
19657: GO 19637
19659: POP
19660: POP
// end ;
19661: GO 19621
19663: POP
19664: POP
// end ;
19665: LD_VAR 0 1
19669: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
19670: LD_INT 0
19672: PPUSH
// uc_side := your_side ;
19673: LD_ADDR_OWVAR 20
19677: PUSH
19678: LD_OWVAR 2
19682: ST_TO_ADDR
// uc_nation := nation ;
19683: LD_ADDR_OWVAR 21
19687: PUSH
19688: LD_VAR 0 1
19692: ST_TO_ADDR
// InitHc ;
19693: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
19697: LD_INT 0
19699: PPUSH
19700: LD_VAR 0 2
19704: PPUSH
19705: LD_VAR 0 3
19709: PPUSH
19710: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
19714: LD_VAR 0 4
19718: PPUSH
19719: LD_VAR 0 5
19723: PPUSH
19724: CALL_OW 428
19728: PUSH
19729: LD_INT 0
19731: EQUAL
19732: IFFALSE 19756
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
19734: CALL_OW 44
19738: PPUSH
19739: LD_VAR 0 4
19743: PPUSH
19744: LD_VAR 0 5
19748: PPUSH
19749: LD_INT 1
19751: PPUSH
19752: CALL_OW 48
// end ;
19756: LD_VAR 0 6
19760: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
19761: LD_INT 0
19763: PPUSH
19764: PPUSH
// uc_side := your_side ;
19765: LD_ADDR_OWVAR 20
19769: PUSH
19770: LD_OWVAR 2
19774: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
19775: LD_VAR 0 1
19779: PUSH
19780: LD_INT 1
19782: PUSH
19783: LD_INT 2
19785: PUSH
19786: LD_INT 3
19788: PUSH
19789: LD_INT 4
19791: PUSH
19792: LD_INT 5
19794: PUSH
19795: EMPTY
19796: LIST
19797: LIST
19798: LIST
19799: LIST
19800: LIST
19801: IN
19802: IFFALSE 19814
// uc_nation := nation_american else
19804: LD_ADDR_OWVAR 21
19808: PUSH
19809: LD_INT 1
19811: ST_TO_ADDR
19812: GO 19857
// if chassis in [ 11 , 12 , 13 , 14 ] then
19814: LD_VAR 0 1
19818: PUSH
19819: LD_INT 11
19821: PUSH
19822: LD_INT 12
19824: PUSH
19825: LD_INT 13
19827: PUSH
19828: LD_INT 14
19830: PUSH
19831: EMPTY
19832: LIST
19833: LIST
19834: LIST
19835: LIST
19836: IN
19837: IFFALSE 19849
// uc_nation := nation_arabian else
19839: LD_ADDR_OWVAR 21
19843: PUSH
19844: LD_INT 2
19846: ST_TO_ADDR
19847: GO 19857
// uc_nation := nation_russian ;
19849: LD_ADDR_OWVAR 21
19853: PUSH
19854: LD_INT 3
19856: ST_TO_ADDR
// vc_chassis := chassis ;
19857: LD_ADDR_OWVAR 37
19861: PUSH
19862: LD_VAR 0 1
19866: ST_TO_ADDR
// vc_engine := engine ;
19867: LD_ADDR_OWVAR 39
19871: PUSH
19872: LD_VAR 0 2
19876: ST_TO_ADDR
// vc_control := control ;
19877: LD_ADDR_OWVAR 38
19881: PUSH
19882: LD_VAR 0 3
19886: ST_TO_ADDR
// vc_weapon := weapon ;
19887: LD_ADDR_OWVAR 40
19891: PUSH
19892: LD_VAR 0 4
19896: ST_TO_ADDR
// un := CreateVehicle ;
19897: LD_ADDR_VAR 0 8
19901: PUSH
19902: CALL_OW 45
19906: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
19907: LD_VAR 0 8
19911: PPUSH
19912: LD_INT 0
19914: PPUSH
19915: LD_INT 5
19917: PPUSH
19918: CALL_OW 12
19922: PPUSH
19923: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
19927: LD_VAR 0 8
19931: PPUSH
19932: LD_VAR 0 5
19936: PPUSH
19937: LD_VAR 0 6
19941: PPUSH
19942: LD_INT 1
19944: PPUSH
19945: CALL_OW 48
// end ;
19949: LD_VAR 0 7
19953: RET
// export hInvincible ; every 1 do
19954: GO 19956
19956: DISABLE
// hInvincible := [ ] ;
19957: LD_ADDR_EXP 83
19961: PUSH
19962: EMPTY
19963: ST_TO_ADDR
19964: END
// every 10 do var i ;
19965: GO 19967
19967: DISABLE
19968: LD_INT 0
19970: PPUSH
// begin enable ;
19971: ENABLE
// if not hInvincible then
19972: LD_EXP 83
19976: NOT
19977: IFFALSE 19981
// exit ;
19979: GO 20025
// for i in hInvincible do
19981: LD_ADDR_VAR 0 1
19985: PUSH
19986: LD_EXP 83
19990: PUSH
19991: FOR_IN
19992: IFFALSE 20023
// if GetLives ( i ) < 1000 then
19994: LD_VAR 0 1
19998: PPUSH
19999: CALL_OW 256
20003: PUSH
20004: LD_INT 1000
20006: LESS
20007: IFFALSE 20021
// SetLives ( i , 1000 ) ;
20009: LD_VAR 0 1
20013: PPUSH
20014: LD_INT 1000
20016: PPUSH
20017: CALL_OW 234
20021: GO 19991
20023: POP
20024: POP
// end ;
20025: PPOPN 1
20027: END
// export function hHackInvincible ; var i ; begin
20028: LD_INT 0
20030: PPUSH
20031: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
20032: LD_ADDR_VAR 0 2
20036: PUSH
20037: LD_INT 2
20039: PUSH
20040: LD_INT 21
20042: PUSH
20043: LD_INT 1
20045: PUSH
20046: EMPTY
20047: LIST
20048: LIST
20049: PUSH
20050: LD_INT 21
20052: PUSH
20053: LD_INT 2
20055: PUSH
20056: EMPTY
20057: LIST
20058: LIST
20059: PUSH
20060: EMPTY
20061: LIST
20062: LIST
20063: LIST
20064: PPUSH
20065: CALL_OW 69
20069: PUSH
20070: FOR_IN
20071: IFFALSE 20132
// if IsSelected ( i ) then
20073: LD_VAR 0 2
20077: PPUSH
20078: CALL_OW 306
20082: IFFALSE 20130
// begin if i in hInvincible then
20084: LD_VAR 0 2
20088: PUSH
20089: LD_EXP 83
20093: IN
20094: IFFALSE 20114
// hInvincible := hInvincible diff i else
20096: LD_ADDR_EXP 83
20100: PUSH
20101: LD_EXP 83
20105: PUSH
20106: LD_VAR 0 2
20110: DIFF
20111: ST_TO_ADDR
20112: GO 20130
// hInvincible := hInvincible union i ;
20114: LD_ADDR_EXP 83
20118: PUSH
20119: LD_EXP 83
20123: PUSH
20124: LD_VAR 0 2
20128: UNION
20129: ST_TO_ADDR
// end ;
20130: GO 20070
20132: POP
20133: POP
// end ;
20134: LD_VAR 0 1
20138: RET
// export function hHackInvisible ; var i , j ; begin
20139: LD_INT 0
20141: PPUSH
20142: PPUSH
20143: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20144: LD_ADDR_VAR 0 2
20148: PUSH
20149: LD_INT 21
20151: PUSH
20152: LD_INT 1
20154: PUSH
20155: EMPTY
20156: LIST
20157: LIST
20158: PPUSH
20159: CALL_OW 69
20163: PUSH
20164: FOR_IN
20165: IFFALSE 20189
// if IsSelected ( i ) then
20167: LD_VAR 0 2
20171: PPUSH
20172: CALL_OW 306
20176: IFFALSE 20187
// ComForceInvisible ( i ) ;
20178: LD_VAR 0 2
20182: PPUSH
20183: CALL_OW 496
20187: GO 20164
20189: POP
20190: POP
// end ;
20191: LD_VAR 0 1
20195: RET
// export function hHackChangeYourSide ; begin
20196: LD_INT 0
20198: PPUSH
// if your_side = 8 then
20199: LD_OWVAR 2
20203: PUSH
20204: LD_INT 8
20206: EQUAL
20207: IFFALSE 20219
// your_side := 0 else
20209: LD_ADDR_OWVAR 2
20213: PUSH
20214: LD_INT 0
20216: ST_TO_ADDR
20217: GO 20233
// your_side := your_side + 1 ;
20219: LD_ADDR_OWVAR 2
20223: PUSH
20224: LD_OWVAR 2
20228: PUSH
20229: LD_INT 1
20231: PLUS
20232: ST_TO_ADDR
// end ;
20233: LD_VAR 0 1
20237: RET
// export function hHackChangeUnitSide ; var i , j ; begin
20238: LD_INT 0
20240: PPUSH
20241: PPUSH
20242: PPUSH
// for i in all_units do
20243: LD_ADDR_VAR 0 2
20247: PUSH
20248: LD_OWVAR 3
20252: PUSH
20253: FOR_IN
20254: IFFALSE 20332
// if IsSelected ( i ) then
20256: LD_VAR 0 2
20260: PPUSH
20261: CALL_OW 306
20265: IFFALSE 20330
// begin j := GetSide ( i ) ;
20267: LD_ADDR_VAR 0 3
20271: PUSH
20272: LD_VAR 0 2
20276: PPUSH
20277: CALL_OW 255
20281: ST_TO_ADDR
// if j = 8 then
20282: LD_VAR 0 3
20286: PUSH
20287: LD_INT 8
20289: EQUAL
20290: IFFALSE 20302
// j := 0 else
20292: LD_ADDR_VAR 0 3
20296: PUSH
20297: LD_INT 0
20299: ST_TO_ADDR
20300: GO 20316
// j := j + 1 ;
20302: LD_ADDR_VAR 0 3
20306: PUSH
20307: LD_VAR 0 3
20311: PUSH
20312: LD_INT 1
20314: PLUS
20315: ST_TO_ADDR
// SetSide ( i , j ) ;
20316: LD_VAR 0 2
20320: PPUSH
20321: LD_VAR 0 3
20325: PPUSH
20326: CALL_OW 235
// end ;
20330: GO 20253
20332: POP
20333: POP
// end ;
20334: LD_VAR 0 1
20338: RET
// export function hHackFog ; begin
20339: LD_INT 0
20341: PPUSH
// FogOff ( true ) ;
20342: LD_INT 1
20344: PPUSH
20345: CALL_OW 344
// end ;
20349: LD_VAR 0 1
20353: RET
// export function hHackTeleport ( unit , x , y ) ; begin
20354: LD_INT 0
20356: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
20357: LD_VAR 0 1
20361: PPUSH
20362: LD_VAR 0 2
20366: PPUSH
20367: LD_VAR 0 3
20371: PPUSH
20372: LD_INT 1
20374: PPUSH
20375: LD_INT 1
20377: PPUSH
20378: CALL_OW 483
// CenterOnXY ( x , y ) ;
20382: LD_VAR 0 2
20386: PPUSH
20387: LD_VAR 0 3
20391: PPUSH
20392: CALL_OW 84
// end ;
20396: LD_VAR 0 4
20400: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
20401: LD_INT 0
20403: PPUSH
20404: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
20405: LD_VAR 0 1
20409: NOT
20410: PUSH
20411: LD_VAR 0 2
20415: PPUSH
20416: LD_VAR 0 3
20420: PPUSH
20421: CALL_OW 488
20425: NOT
20426: OR
20427: PUSH
20428: LD_VAR 0 1
20432: PPUSH
20433: CALL_OW 266
20437: PUSH
20438: LD_INT 3
20440: NONEQUAL
20441: PUSH
20442: LD_VAR 0 1
20446: PPUSH
20447: CALL_OW 247
20451: PUSH
20452: LD_INT 1
20454: EQUAL
20455: NOT
20456: AND
20457: OR
20458: IFFALSE 20462
// exit ;
20460: GO 20744
// if GetType ( factory ) = unit_human then
20462: LD_VAR 0 1
20466: PPUSH
20467: CALL_OW 247
20471: PUSH
20472: LD_INT 1
20474: EQUAL
20475: IFFALSE 20492
// factory := IsInUnit ( factory ) ;
20477: LD_ADDR_VAR 0 1
20481: PUSH
20482: LD_VAR 0 1
20486: PPUSH
20487: CALL_OW 310
20491: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
20492: LD_VAR 0 1
20496: PPUSH
20497: CALL_OW 266
20501: PUSH
20502: LD_INT 3
20504: NONEQUAL
20505: IFFALSE 20509
// exit ;
20507: GO 20744
// for i := 1 to Count ( factoryWaypoints ) do
20509: LD_ADDR_VAR 0 5
20513: PUSH
20514: DOUBLE
20515: LD_INT 1
20517: DEC
20518: ST_TO_ADDR
20519: LD_EXP 84
20523: PPUSH
20524: CALL 29247 0 1
20528: PUSH
20529: FOR_TO
20530: IFFALSE 20692
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
20532: LD_VAR 0 2
20536: PPUSH
20537: LD_VAR 0 3
20541: PPUSH
20542: CALL_OW 428
20546: PUSH
20547: LD_EXP 84
20551: PUSH
20552: LD_VAR 0 5
20556: ARRAY
20557: PUSH
20558: LD_INT 2
20560: ARRAY
20561: EQUAL
20562: IFFALSE 20594
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
20564: LD_ADDR_EXP 84
20568: PUSH
20569: LD_EXP 84
20573: PPUSH
20574: LD_VAR 0 5
20578: PPUSH
20579: CALL_OW 3
20583: ST_TO_ADDR
// UpdateFactoryWaypoints ;
20584: CALL 20749 0 0
// exit ;
20588: POP
20589: POP
20590: GO 20744
// end else
20592: GO 20690
// if factory = factoryWaypoints [ i ] [ 2 ] then
20594: LD_VAR 0 1
20598: PUSH
20599: LD_EXP 84
20603: PUSH
20604: LD_VAR 0 5
20608: ARRAY
20609: PUSH
20610: LD_INT 2
20612: ARRAY
20613: EQUAL
20614: IFFALSE 20690
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
20616: LD_ADDR_EXP 84
20620: PUSH
20621: LD_EXP 84
20625: PPUSH
20626: LD_VAR 0 5
20630: PPUSH
20631: CALL_OW 3
20635: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
20636: LD_ADDR_EXP 84
20640: PUSH
20641: LD_EXP 84
20645: PPUSH
20646: LD_VAR 0 1
20650: PPUSH
20651: CALL_OW 255
20655: PUSH
20656: LD_VAR 0 1
20660: PUSH
20661: LD_VAR 0 2
20665: PUSH
20666: LD_VAR 0 3
20670: PUSH
20671: EMPTY
20672: LIST
20673: LIST
20674: LIST
20675: LIST
20676: PPUSH
20677: CALL 64856 0 2
20681: ST_TO_ADDR
// UpdateFactoryWaypoints ;
20682: CALL 20749 0 0
// exit ;
20686: POP
20687: POP
20688: GO 20744
// end ; end ;
20690: GO 20529
20692: POP
20693: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
20694: LD_ADDR_EXP 84
20698: PUSH
20699: LD_EXP 84
20703: PPUSH
20704: LD_VAR 0 1
20708: PPUSH
20709: CALL_OW 255
20713: PUSH
20714: LD_VAR 0 1
20718: PUSH
20719: LD_VAR 0 2
20723: PUSH
20724: LD_VAR 0 3
20728: PUSH
20729: EMPTY
20730: LIST
20731: LIST
20732: LIST
20733: LIST
20734: PPUSH
20735: CALL 64856 0 2
20739: ST_TO_ADDR
// UpdateFactoryWaypoints ;
20740: CALL 20749 0 0
// end ;
20744: LD_VAR 0 4
20748: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
20749: LD_INT 0
20751: PPUSH
20752: PPUSH
20753: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
20754: LD_STRING resetFactoryWaypoint();
20756: PPUSH
20757: CALL_OW 559
// if factoryWaypoints then
20761: LD_EXP 84
20765: IFFALSE 20886
// begin list := factoryWaypoints ;
20767: LD_ADDR_VAR 0 3
20771: PUSH
20772: LD_EXP 84
20776: ST_TO_ADDR
// for i := 1 to list do
20777: LD_ADDR_VAR 0 2
20781: PUSH
20782: DOUBLE
20783: LD_INT 1
20785: DEC
20786: ST_TO_ADDR
20787: LD_VAR 0 3
20791: PUSH
20792: FOR_TO
20793: IFFALSE 20884
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
20795: LD_STRING setFactoryWaypointXY(
20797: PUSH
20798: LD_VAR 0 3
20802: PUSH
20803: LD_VAR 0 2
20807: ARRAY
20808: PUSH
20809: LD_INT 1
20811: ARRAY
20812: STR
20813: PUSH
20814: LD_STRING ,
20816: STR
20817: PUSH
20818: LD_VAR 0 3
20822: PUSH
20823: LD_VAR 0 2
20827: ARRAY
20828: PUSH
20829: LD_INT 2
20831: ARRAY
20832: STR
20833: PUSH
20834: LD_STRING ,
20836: STR
20837: PUSH
20838: LD_VAR 0 3
20842: PUSH
20843: LD_VAR 0 2
20847: ARRAY
20848: PUSH
20849: LD_INT 3
20851: ARRAY
20852: STR
20853: PUSH
20854: LD_STRING ,
20856: STR
20857: PUSH
20858: LD_VAR 0 3
20862: PUSH
20863: LD_VAR 0 2
20867: ARRAY
20868: PUSH
20869: LD_INT 4
20871: ARRAY
20872: STR
20873: PUSH
20874: LD_STRING )
20876: STR
20877: PPUSH
20878: CALL_OW 559
20882: GO 20792
20884: POP
20885: POP
// end ; end ;
20886: LD_VAR 0 1
20890: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
20891: LD_INT 0
20893: PPUSH
// if HexInfo ( x , y ) = warehouse then
20894: LD_VAR 0 2
20898: PPUSH
20899: LD_VAR 0 3
20903: PPUSH
20904: CALL_OW 428
20908: PUSH
20909: LD_VAR 0 1
20913: EQUAL
20914: IFFALSE 20941
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
20916: LD_ADDR_EXP 85
20920: PUSH
20921: LD_EXP 85
20925: PPUSH
20926: LD_VAR 0 1
20930: PPUSH
20931: LD_INT 0
20933: PPUSH
20934: CALL_OW 1
20938: ST_TO_ADDR
20939: GO 20992
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
20941: LD_ADDR_EXP 85
20945: PUSH
20946: LD_EXP 85
20950: PPUSH
20951: LD_VAR 0 1
20955: PPUSH
20956: LD_VAR 0 1
20960: PPUSH
20961: CALL_OW 255
20965: PUSH
20966: LD_VAR 0 1
20970: PUSH
20971: LD_VAR 0 2
20975: PUSH
20976: LD_VAR 0 3
20980: PUSH
20981: EMPTY
20982: LIST
20983: LIST
20984: LIST
20985: LIST
20986: PPUSH
20987: CALL_OW 1
20991: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
20992: CALL 21001 0 0
// end ;
20996: LD_VAR 0 4
21000: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
21001: LD_INT 0
21003: PPUSH
21004: PPUSH
21005: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
21006: LD_STRING resetWarehouseGatheringPoints();
21008: PPUSH
21009: CALL_OW 559
// if warehouseGatheringPoints then
21013: LD_EXP 85
21017: IFFALSE 21143
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
21019: LD_ADDR_VAR 0 3
21023: PUSH
21024: LD_EXP 85
21028: PPUSH
21029: CALL 68618 0 1
21033: ST_TO_ADDR
// for i := 1 to list do
21034: LD_ADDR_VAR 0 2
21038: PUSH
21039: DOUBLE
21040: LD_INT 1
21042: DEC
21043: ST_TO_ADDR
21044: LD_VAR 0 3
21048: PUSH
21049: FOR_TO
21050: IFFALSE 21141
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
21052: LD_STRING setWarehouseGatheringPointXY(
21054: PUSH
21055: LD_VAR 0 3
21059: PUSH
21060: LD_VAR 0 2
21064: ARRAY
21065: PUSH
21066: LD_INT 1
21068: ARRAY
21069: STR
21070: PUSH
21071: LD_STRING ,
21073: STR
21074: PUSH
21075: LD_VAR 0 3
21079: PUSH
21080: LD_VAR 0 2
21084: ARRAY
21085: PUSH
21086: LD_INT 2
21088: ARRAY
21089: STR
21090: PUSH
21091: LD_STRING ,
21093: STR
21094: PUSH
21095: LD_VAR 0 3
21099: PUSH
21100: LD_VAR 0 2
21104: ARRAY
21105: PUSH
21106: LD_INT 3
21108: ARRAY
21109: STR
21110: PUSH
21111: LD_STRING ,
21113: STR
21114: PUSH
21115: LD_VAR 0 3
21119: PUSH
21120: LD_VAR 0 2
21124: ARRAY
21125: PUSH
21126: LD_INT 4
21128: ARRAY
21129: STR
21130: PUSH
21131: LD_STRING )
21133: STR
21134: PPUSH
21135: CALL_OW 559
21139: GO 21049
21141: POP
21142: POP
// end ; end ;
21143: LD_VAR 0 1
21147: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
21148: LD_EXP 85
21152: IFFALSE 21837
21154: GO 21156
21156: DISABLE
21157: LD_INT 0
21159: PPUSH
21160: PPUSH
21161: PPUSH
21162: PPUSH
21163: PPUSH
21164: PPUSH
21165: PPUSH
21166: PPUSH
21167: PPUSH
// begin enable ;
21168: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
21169: LD_ADDR_VAR 0 3
21173: PUSH
21174: LD_EXP 85
21178: PPUSH
21179: CALL 68618 0 1
21183: ST_TO_ADDR
// if not list then
21184: LD_VAR 0 3
21188: NOT
21189: IFFALSE 21193
// exit ;
21191: GO 21837
// for i := 1 to list do
21193: LD_ADDR_VAR 0 1
21197: PUSH
21198: DOUBLE
21199: LD_INT 1
21201: DEC
21202: ST_TO_ADDR
21203: LD_VAR 0 3
21207: PUSH
21208: FOR_TO
21209: IFFALSE 21835
// begin depot := list [ i ] [ 2 ] ;
21211: LD_ADDR_VAR 0 8
21215: PUSH
21216: LD_VAR 0 3
21220: PUSH
21221: LD_VAR 0 1
21225: ARRAY
21226: PUSH
21227: LD_INT 2
21229: ARRAY
21230: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
21231: LD_ADDR_VAR 0 5
21235: PUSH
21236: LD_VAR 0 3
21240: PUSH
21241: LD_VAR 0 1
21245: ARRAY
21246: PUSH
21247: LD_INT 1
21249: ARRAY
21250: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
21251: LD_VAR 0 8
21255: PPUSH
21256: CALL_OW 301
21260: PUSH
21261: LD_VAR 0 5
21265: PUSH
21266: LD_VAR 0 8
21270: PPUSH
21271: CALL_OW 255
21275: NONEQUAL
21276: OR
21277: IFFALSE 21306
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
21279: LD_ADDR_EXP 85
21283: PUSH
21284: LD_EXP 85
21288: PPUSH
21289: LD_VAR 0 8
21293: PPUSH
21294: LD_INT 0
21296: PPUSH
21297: CALL_OW 1
21301: ST_TO_ADDR
// exit ;
21302: POP
21303: POP
21304: GO 21837
// end ; x := list [ i ] [ 3 ] ;
21306: LD_ADDR_VAR 0 6
21310: PUSH
21311: LD_VAR 0 3
21315: PUSH
21316: LD_VAR 0 1
21320: ARRAY
21321: PUSH
21322: LD_INT 3
21324: ARRAY
21325: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
21326: LD_ADDR_VAR 0 7
21330: PUSH
21331: LD_VAR 0 3
21335: PUSH
21336: LD_VAR 0 1
21340: ARRAY
21341: PUSH
21342: LD_INT 4
21344: ARRAY
21345: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
21346: LD_ADDR_VAR 0 9
21350: PUSH
21351: LD_VAR 0 6
21355: PPUSH
21356: LD_VAR 0 7
21360: PPUSH
21361: LD_INT 16
21363: PPUSH
21364: CALL 67202 0 3
21368: ST_TO_ADDR
// if not cratesNearbyPoint then
21369: LD_VAR 0 9
21373: NOT
21374: IFFALSE 21380
// exit ;
21376: POP
21377: POP
21378: GO 21837
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
21380: LD_ADDR_VAR 0 4
21384: PUSH
21385: LD_INT 22
21387: PUSH
21388: LD_VAR 0 5
21392: PUSH
21393: EMPTY
21394: LIST
21395: LIST
21396: PUSH
21397: LD_INT 3
21399: PUSH
21400: LD_INT 60
21402: PUSH
21403: EMPTY
21404: LIST
21405: PUSH
21406: EMPTY
21407: LIST
21408: LIST
21409: PUSH
21410: LD_INT 91
21412: PUSH
21413: LD_VAR 0 8
21417: PUSH
21418: LD_INT 6
21420: PUSH
21421: EMPTY
21422: LIST
21423: LIST
21424: LIST
21425: PUSH
21426: LD_INT 2
21428: PUSH
21429: LD_INT 25
21431: PUSH
21432: LD_INT 2
21434: PUSH
21435: EMPTY
21436: LIST
21437: LIST
21438: PUSH
21439: LD_INT 25
21441: PUSH
21442: LD_INT 16
21444: PUSH
21445: EMPTY
21446: LIST
21447: LIST
21448: PUSH
21449: EMPTY
21450: LIST
21451: LIST
21452: LIST
21453: PUSH
21454: EMPTY
21455: LIST
21456: LIST
21457: LIST
21458: LIST
21459: PPUSH
21460: CALL_OW 69
21464: PUSH
21465: LD_VAR 0 8
21469: PPUSH
21470: CALL_OW 313
21474: PPUSH
21475: LD_INT 3
21477: PUSH
21478: LD_INT 60
21480: PUSH
21481: EMPTY
21482: LIST
21483: PUSH
21484: EMPTY
21485: LIST
21486: LIST
21487: PUSH
21488: LD_INT 2
21490: PUSH
21491: LD_INT 25
21493: PUSH
21494: LD_INT 2
21496: PUSH
21497: EMPTY
21498: LIST
21499: LIST
21500: PUSH
21501: LD_INT 25
21503: PUSH
21504: LD_INT 16
21506: PUSH
21507: EMPTY
21508: LIST
21509: LIST
21510: PUSH
21511: EMPTY
21512: LIST
21513: LIST
21514: LIST
21515: PUSH
21516: EMPTY
21517: LIST
21518: LIST
21519: PPUSH
21520: CALL_OW 72
21524: UNION
21525: ST_TO_ADDR
// if tmp then
21526: LD_VAR 0 4
21530: IFFALSE 21610
// begin tmp := ShrinkArray ( tmp , 3 ) ;
21532: LD_ADDR_VAR 0 4
21536: PUSH
21537: LD_VAR 0 4
21541: PPUSH
21542: LD_INT 3
21544: PPUSH
21545: CALL 65171 0 2
21549: ST_TO_ADDR
// for j in tmp do
21550: LD_ADDR_VAR 0 2
21554: PUSH
21555: LD_VAR 0 4
21559: PUSH
21560: FOR_IN
21561: IFFALSE 21604
// begin if IsInUnit ( j ) then
21563: LD_VAR 0 2
21567: PPUSH
21568: CALL_OW 310
21572: IFFALSE 21583
// ComExit ( j ) ;
21574: LD_VAR 0 2
21578: PPUSH
21579: CALL 65254 0 1
// AddComCollect ( j , x , y ) ;
21583: LD_VAR 0 2
21587: PPUSH
21588: LD_VAR 0 6
21592: PPUSH
21593: LD_VAR 0 7
21597: PPUSH
21598: CALL_OW 177
// end ;
21602: GO 21560
21604: POP
21605: POP
// exit ;
21606: POP
21607: POP
21608: GO 21837
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
21610: LD_ADDR_VAR 0 4
21614: PUSH
21615: LD_INT 22
21617: PUSH
21618: LD_VAR 0 5
21622: PUSH
21623: EMPTY
21624: LIST
21625: LIST
21626: PUSH
21627: LD_INT 91
21629: PUSH
21630: LD_VAR 0 8
21634: PUSH
21635: LD_INT 8
21637: PUSH
21638: EMPTY
21639: LIST
21640: LIST
21641: LIST
21642: PUSH
21643: LD_INT 2
21645: PUSH
21646: LD_INT 34
21648: PUSH
21649: LD_INT 12
21651: PUSH
21652: EMPTY
21653: LIST
21654: LIST
21655: PUSH
21656: LD_INT 34
21658: PUSH
21659: LD_INT 51
21661: PUSH
21662: EMPTY
21663: LIST
21664: LIST
21665: PUSH
21666: LD_INT 34
21668: PUSH
21669: LD_INT 32
21671: PUSH
21672: EMPTY
21673: LIST
21674: LIST
21675: PUSH
21676: LD_INT 34
21678: PUSH
21679: LD_INT 89
21681: PUSH
21682: EMPTY
21683: LIST
21684: LIST
21685: PUSH
21686: EMPTY
21687: LIST
21688: LIST
21689: LIST
21690: LIST
21691: LIST
21692: PUSH
21693: EMPTY
21694: LIST
21695: LIST
21696: LIST
21697: PPUSH
21698: CALL_OW 69
21702: ST_TO_ADDR
// if tmp then
21703: LD_VAR 0 4
21707: IFFALSE 21833
// begin for j in tmp do
21709: LD_ADDR_VAR 0 2
21713: PUSH
21714: LD_VAR 0 4
21718: PUSH
21719: FOR_IN
21720: IFFALSE 21831
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
21722: LD_VAR 0 2
21726: PPUSH
21727: CALL_OW 262
21731: PUSH
21732: LD_INT 3
21734: EQUAL
21735: PUSH
21736: LD_VAR 0 2
21740: PPUSH
21741: CALL_OW 261
21745: PUSH
21746: LD_INT 20
21748: GREATER
21749: OR
21750: PUSH
21751: LD_VAR 0 2
21755: PPUSH
21756: CALL_OW 314
21760: NOT
21761: AND
21762: PUSH
21763: LD_VAR 0 2
21767: PPUSH
21768: CALL_OW 263
21772: PUSH
21773: LD_INT 1
21775: NONEQUAL
21776: PUSH
21777: LD_VAR 0 2
21781: PPUSH
21782: CALL_OW 311
21786: OR
21787: AND
21788: IFFALSE 21829
// begin ComCollect ( j , x , y ) ;
21790: LD_VAR 0 2
21794: PPUSH
21795: LD_VAR 0 6
21799: PPUSH
21800: LD_VAR 0 7
21804: PPUSH
21805: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
21809: LD_VAR 0 2
21813: PPUSH
21814: LD_VAR 0 8
21818: PPUSH
21819: CALL_OW 172
// exit ;
21823: POP
21824: POP
21825: POP
21826: POP
21827: GO 21837
// end ;
21829: GO 21719
21831: POP
21832: POP
// end ; end ;
21833: GO 21208
21835: POP
21836: POP
// end ; end_of_file
21837: PPOPN 9
21839: END
// export function SOS_UnitDestroyed ( un ) ; begin
21840: LD_INT 0
21842: PPUSH
// ComRadiation ( un ) ;
21843: LD_VAR 0 1
21847: PPUSH
21848: CALL 22829 0 1
// end ;
21852: LD_VAR 0 2
21856: RET
// export function SOS_UnitKamikazed ( un ) ; begin
21857: LD_INT 0
21859: PPUSH
// ComRadiation ( un ) ;
21860: LD_VAR 0 1
21864: PPUSH
21865: CALL 22829 0 1
// end ;
21869: LD_VAR 0 2
21873: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
21874: LD_INT 0
21876: PPUSH
// end ;
21877: LD_VAR 0 4
21881: RET
// export function SOS_Command ( cmd ) ; begin
21882: LD_INT 0
21884: PPUSH
// end ;
21885: LD_VAR 0 2
21889: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
21890: LD_INT 0
21892: PPUSH
// end ;
21893: LD_VAR 0 6
21897: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , tag , driver , hex ; begin
21898: LD_INT 0
21900: PPUSH
21901: PPUSH
21902: PPUSH
21903: PPUSH
21904: PPUSH
// if not vehicle or not factory then
21905: LD_VAR 0 1
21909: NOT
21910: PUSH
21911: LD_VAR 0 2
21915: NOT
21916: OR
21917: IFFALSE 21921
// exit ;
21919: GO 22420
// if not factoryWaypoints then
21921: LD_EXP 84
21925: NOT
21926: IFFALSE 21930
// exit ;
21928: GO 22420
// for i := 1 to Count ( factoryWaypoints ) do
21930: LD_ADDR_VAR 0 4
21934: PUSH
21935: DOUBLE
21936: LD_INT 1
21938: DEC
21939: ST_TO_ADDR
21940: LD_EXP 84
21944: PPUSH
21945: CALL 29247 0 1
21949: PUSH
21950: FOR_TO
21951: IFFALSE 22418
// if factoryWaypoints [ i ] [ 2 ] = factory then
21953: LD_EXP 84
21957: PUSH
21958: LD_VAR 0 4
21962: ARRAY
21963: PUSH
21964: LD_INT 2
21966: ARRAY
21967: PUSH
21968: LD_VAR 0 2
21972: EQUAL
21973: IFFALSE 22416
// begin if GetControl ( vehicle ) = control_manual then
21975: LD_VAR 0 1
21979: PPUSH
21980: CALL_OW 263
21984: PUSH
21985: LD_INT 1
21987: EQUAL
21988: IFFALSE 22299
// begin driver := IsDrivenBy ( vehicle ) ;
21990: LD_ADDR_VAR 0 6
21994: PUSH
21995: LD_VAR 0 1
21999: PPUSH
22000: CALL_OW 311
22004: ST_TO_ADDR
// tag := GetTag ( driver ) ;
22005: LD_ADDR_VAR 0 5
22009: PUSH
22010: LD_VAR 0 6
22014: PPUSH
22015: CALL_OW 110
22019: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
22020: LD_VAR 0 5
22024: PUSH
22025: LD_INT 501
22027: EQUAL
22028: PUSH
22029: LD_VAR 0 1
22033: PPUSH
22034: CALL_OW 110
22038: PUSH
22039: LD_INT 501
22041: EQUAL
22042: OR
22043: IFFALSE 22049
// exit ;
22045: POP
22046: POP
22047: GO 22420
// if not HasTask ( driver ) then
22049: LD_VAR 0 6
22053: PPUSH
22054: CALL_OW 314
22058: NOT
22059: IFFALSE 22297
// begin SetTag ( driver , tDriver ) ;
22061: LD_VAR 0 6
22065: PPUSH
22066: LD_INT 501
22068: PPUSH
22069: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
22073: LD_VAR 0 1
22077: PPUSH
22078: LD_INT 501
22080: PPUSH
22081: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
22085: LD_ADDR_VAR 0 7
22089: PUSH
22090: LD_EXP 84
22094: PUSH
22095: LD_VAR 0 4
22099: ARRAY
22100: PUSH
22101: LD_INT 3
22103: ARRAY
22104: PPUSH
22105: LD_EXP 84
22109: PUSH
22110: LD_VAR 0 4
22114: ARRAY
22115: PUSH
22116: LD_INT 4
22118: ARRAY
22119: PPUSH
22120: CALL_OW 428
22124: ST_TO_ADDR
// if hex then
22125: LD_VAR 0 7
22129: IFFALSE 22147
// ComMoveUnit ( driver , hex ) else
22131: LD_VAR 0 6
22135: PPUSH
22136: LD_VAR 0 7
22140: PPUSH
22141: CALL_OW 112
22145: GO 22186
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
22147: LD_VAR 0 6
22151: PPUSH
22152: LD_EXP 84
22156: PUSH
22157: LD_VAR 0 4
22161: ARRAY
22162: PUSH
22163: LD_INT 3
22165: ARRAY
22166: PPUSH
22167: LD_EXP 84
22171: PUSH
22172: LD_VAR 0 4
22176: ARRAY
22177: PUSH
22178: LD_INT 4
22180: ARRAY
22181: PPUSH
22182: CALL_OW 111
// AddComExitVehicle ( driver ) ;
22186: LD_VAR 0 6
22190: PPUSH
22191: CALL_OW 181
// if Multiplayer then
22195: LD_OWVAR 4
22199: IFFALSE 22248
// begin repeat wait ( 10 ) ;
22201: LD_INT 10
22203: PPUSH
22204: CALL_OW 67
// until not IsInUnit ( driver ) ;
22208: LD_VAR 0 6
22212: PPUSH
22213: CALL_OW 310
22217: NOT
22218: IFFALSE 22201
// if not HasTask ( driver ) then
22220: LD_VAR 0 6
22224: PPUSH
22225: CALL_OW 314
22229: NOT
22230: IFFALSE 22246
// ComEnterUnit ( driver , factory ) ;
22232: LD_VAR 0 6
22236: PPUSH
22237: LD_VAR 0 2
22241: PPUSH
22242: CALL_OW 120
// end else
22246: GO 22262
// AddComEnterUnit ( driver , factory ) ;
22248: LD_VAR 0 6
22252: PPUSH
22253: LD_VAR 0 2
22257: PPUSH
22258: CALL_OW 180
// wait ( 0 0$1 ) ;
22262: LD_INT 35
22264: PPUSH
22265: CALL_OW 67
// SetTag ( driver , tag ) ;
22269: LD_VAR 0 6
22273: PPUSH
22274: LD_VAR 0 5
22278: PPUSH
22279: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
22283: LD_VAR 0 1
22287: PPUSH
22288: LD_INT 0
22290: PPUSH
22291: CALL_OW 109
// break ;
22295: GO 22418
// end ; end else
22297: GO 22416
// if GetControl ( vehicle ) = control_remote then
22299: LD_VAR 0 1
22303: PPUSH
22304: CALL_OW 263
22308: PUSH
22309: LD_INT 2
22311: EQUAL
22312: IFFALSE 22375
// begin wait ( 0 0$2 ) ;
22314: LD_INT 70
22316: PPUSH
22317: CALL_OW 67
// if Connect ( vehicle ) then
22321: LD_VAR 0 1
22325: PPUSH
22326: CALL 35453 0 1
22330: IFFALSE 22371
// AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
22332: LD_VAR 0 1
22336: PPUSH
22337: LD_EXP 84
22341: PUSH
22342: LD_VAR 0 4
22346: ARRAY
22347: PUSH
22348: LD_INT 3
22350: ARRAY
22351: PPUSH
22352: LD_EXP 84
22356: PUSH
22357: LD_VAR 0 4
22361: ARRAY
22362: PUSH
22363: LD_INT 4
22365: ARRAY
22366: PPUSH
22367: CALL_OW 171
// break ;
22371: GO 22418
// end else
22373: GO 22416
// begin AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
22375: LD_VAR 0 1
22379: PPUSH
22380: LD_EXP 84
22384: PUSH
22385: LD_VAR 0 4
22389: ARRAY
22390: PUSH
22391: LD_INT 3
22393: ARRAY
22394: PPUSH
22395: LD_EXP 84
22399: PUSH
22400: LD_VAR 0 4
22404: ARRAY
22405: PUSH
22406: LD_INT 4
22408: ARRAY
22409: PPUSH
22410: CALL_OW 171
// break ;
22414: GO 22418
// end ; end ;
22416: GO 21950
22418: POP
22419: POP
// end ;
22420: LD_VAR 0 3
22424: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
22425: LD_INT 0
22427: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
22428: LD_VAR 0 1
22432: PUSH
22433: LD_INT 250
22435: EQUAL
22436: PUSH
22437: LD_VAR 0 2
22441: PPUSH
22442: CALL_OW 264
22446: PUSH
22447: LD_INT 81
22449: EQUAL
22450: AND
22451: IFFALSE 22472
// MinerPlaceMine ( unit , x , y ) ;
22453: LD_VAR 0 2
22457: PPUSH
22458: LD_VAR 0 4
22462: PPUSH
22463: LD_VAR 0 5
22467: PPUSH
22468: CALL 25564 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
22472: LD_VAR 0 1
22476: PUSH
22477: LD_INT 251
22479: EQUAL
22480: PUSH
22481: LD_VAR 0 2
22485: PPUSH
22486: CALL_OW 264
22490: PUSH
22491: LD_INT 81
22493: EQUAL
22494: AND
22495: IFFALSE 22516
// MinerDetonateMine ( unit , x , y ) ;
22497: LD_VAR 0 2
22501: PPUSH
22502: LD_VAR 0 4
22506: PPUSH
22507: LD_VAR 0 5
22511: PPUSH
22512: CALL 25839 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
22516: LD_VAR 0 1
22520: PUSH
22521: LD_INT 252
22523: EQUAL
22524: PUSH
22525: LD_VAR 0 2
22529: PPUSH
22530: CALL_OW 264
22534: PUSH
22535: LD_INT 81
22537: EQUAL
22538: AND
22539: IFFALSE 22560
// MinerCreateMinefield ( unit , x , y ) ;
22541: LD_VAR 0 2
22545: PPUSH
22546: LD_VAR 0 4
22550: PPUSH
22551: LD_VAR 0 5
22555: PPUSH
22556: CALL 26256 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
22560: LD_VAR 0 1
22564: PUSH
22565: LD_INT 253
22567: EQUAL
22568: PUSH
22569: LD_VAR 0 2
22573: PPUSH
22574: CALL_OW 257
22578: PUSH
22579: LD_INT 5
22581: EQUAL
22582: AND
22583: IFFALSE 22604
// ComBinocular ( unit , x , y ) ;
22585: LD_VAR 0 2
22589: PPUSH
22590: LD_VAR 0 4
22594: PPUSH
22595: LD_VAR 0 5
22599: PPUSH
22600: CALL 26625 0 3
// if selectedUnit then
22604: LD_VAR 0 3
22608: IFFALSE 22664
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
22610: LD_VAR 0 1
22614: PUSH
22615: LD_INT 254
22617: EQUAL
22618: PUSH
22619: LD_VAR 0 2
22623: PPUSH
22624: CALL_OW 264
22628: PUSH
22629: LD_INT 99
22631: EQUAL
22632: AND
22633: PUSH
22634: LD_VAR 0 3
22638: PPUSH
22639: CALL_OW 263
22643: PUSH
22644: LD_INT 3
22646: EQUAL
22647: AND
22648: IFFALSE 22664
// HackDestroyVehicle ( unit , selectedUnit ) ;
22650: LD_VAR 0 2
22654: PPUSH
22655: LD_VAR 0 3
22659: PPUSH
22660: CALL 24928 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
22664: LD_VAR 0 1
22668: PUSH
22669: LD_INT 255
22671: EQUAL
22672: PUSH
22673: LD_VAR 0 2
22677: PPUSH
22678: CALL_OW 264
22682: PUSH
22683: LD_INT 14
22685: PUSH
22686: LD_INT 53
22688: PUSH
22689: EMPTY
22690: LIST
22691: LIST
22692: IN
22693: AND
22694: PUSH
22695: LD_VAR 0 4
22699: PPUSH
22700: LD_VAR 0 5
22704: PPUSH
22705: CALL_OW 488
22709: AND
22710: IFFALSE 22734
// CutTreeXYR ( unit , x , y , 12 ) ;
22712: LD_VAR 0 2
22716: PPUSH
22717: LD_VAR 0 4
22721: PPUSH
22722: LD_VAR 0 5
22726: PPUSH
22727: LD_INT 12
22729: PPUSH
22730: CALL 22925 0 4
// if cmd = 256 then
22734: LD_VAR 0 1
22738: PUSH
22739: LD_INT 256
22741: EQUAL
22742: IFFALSE 22763
// SetFactoryWaypoint ( unit , x , y ) ;
22744: LD_VAR 0 2
22748: PPUSH
22749: LD_VAR 0 4
22753: PPUSH
22754: LD_VAR 0 5
22758: PPUSH
22759: CALL 20401 0 3
// if cmd = 257 then
22763: LD_VAR 0 1
22767: PUSH
22768: LD_INT 257
22770: EQUAL
22771: IFFALSE 22792
// SetWarehouseGatheringPoint ( unit , x , y ) ;
22773: LD_VAR 0 2
22777: PPUSH
22778: LD_VAR 0 4
22782: PPUSH
22783: LD_VAR 0 5
22787: PPUSH
22788: CALL 20891 0 3
// if cmd = 258 then
22792: LD_VAR 0 1
22796: PUSH
22797: LD_INT 258
22799: EQUAL
22800: IFFALSE 22824
// BurnTreeXYR ( unit , x , y , 8 ) ;
22802: LD_VAR 0 2
22806: PPUSH
22807: LD_VAR 0 4
22811: PPUSH
22812: LD_VAR 0 5
22816: PPUSH
22817: LD_INT 8
22819: PPUSH
22820: CALL 23319 0 4
// end ;
22824: LD_VAR 0 6
22828: RET
// export function ComRadiation ( un ) ; var eff ; begin
22829: LD_INT 0
22831: PPUSH
22832: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
22833: LD_VAR 0 1
22837: PPUSH
22838: CALL_OW 264
22842: PUSH
22843: LD_INT 91
22845: NONEQUAL
22846: IFFALSE 22850
// exit ;
22848: GO 22920
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
22850: LD_INT 68
22852: PPUSH
22853: LD_VAR 0 1
22857: PPUSH
22858: CALL_OW 255
22862: PPUSH
22863: CALL_OW 321
22867: PUSH
22868: LD_INT 2
22870: EQUAL
22871: IFFALSE 22883
// eff := 70 else
22873: LD_ADDR_VAR 0 3
22877: PUSH
22878: LD_INT 70
22880: ST_TO_ADDR
22881: GO 22891
// eff := 30 ;
22883: LD_ADDR_VAR 0 3
22887: PUSH
22888: LD_INT 30
22890: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
22891: LD_VAR 0 1
22895: PPUSH
22896: CALL_OW 250
22900: PPUSH
22901: LD_VAR 0 1
22905: PPUSH
22906: CALL_OW 251
22910: PPUSH
22911: LD_VAR 0 3
22915: PPUSH
22916: CALL_OW 495
// end ;
22920: LD_VAR 0 2
22924: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
22925: LD_INT 0
22927: PPUSH
22928: PPUSH
22929: PPUSH
22930: PPUSH
22931: PPUSH
22932: PPUSH
22933: PPUSH
22934: PPUSH
22935: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
22936: LD_VAR 0 1
22940: PPUSH
22941: CALL_OW 302
22945: NOT
22946: PUSH
22947: LD_VAR 0 2
22951: PPUSH
22952: LD_VAR 0 3
22956: PPUSH
22957: CALL_OW 488
22961: NOT
22962: OR
22963: PUSH
22964: LD_VAR 0 4
22968: NOT
22969: OR
22970: IFFALSE 22974
// exit ;
22972: GO 23314
// list := [ ] ;
22974: LD_ADDR_VAR 0 13
22978: PUSH
22979: EMPTY
22980: ST_TO_ADDR
// if x - r < 0 then
22981: LD_VAR 0 2
22985: PUSH
22986: LD_VAR 0 4
22990: MINUS
22991: PUSH
22992: LD_INT 0
22994: LESS
22995: IFFALSE 23007
// min_x := 0 else
22997: LD_ADDR_VAR 0 7
23001: PUSH
23002: LD_INT 0
23004: ST_TO_ADDR
23005: GO 23023
// min_x := x - r ;
23007: LD_ADDR_VAR 0 7
23011: PUSH
23012: LD_VAR 0 2
23016: PUSH
23017: LD_VAR 0 4
23021: MINUS
23022: ST_TO_ADDR
// if y - r < 0 then
23023: LD_VAR 0 3
23027: PUSH
23028: LD_VAR 0 4
23032: MINUS
23033: PUSH
23034: LD_INT 0
23036: LESS
23037: IFFALSE 23049
// min_y := 0 else
23039: LD_ADDR_VAR 0 8
23043: PUSH
23044: LD_INT 0
23046: ST_TO_ADDR
23047: GO 23065
// min_y := y - r ;
23049: LD_ADDR_VAR 0 8
23053: PUSH
23054: LD_VAR 0 3
23058: PUSH
23059: LD_VAR 0 4
23063: MINUS
23064: ST_TO_ADDR
// max_x := x + r ;
23065: LD_ADDR_VAR 0 9
23069: PUSH
23070: LD_VAR 0 2
23074: PUSH
23075: LD_VAR 0 4
23079: PLUS
23080: ST_TO_ADDR
// max_y := y + r ;
23081: LD_ADDR_VAR 0 10
23085: PUSH
23086: LD_VAR 0 3
23090: PUSH
23091: LD_VAR 0 4
23095: PLUS
23096: ST_TO_ADDR
// for _x = min_x to max_x do
23097: LD_ADDR_VAR 0 11
23101: PUSH
23102: DOUBLE
23103: LD_VAR 0 7
23107: DEC
23108: ST_TO_ADDR
23109: LD_VAR 0 9
23113: PUSH
23114: FOR_TO
23115: IFFALSE 23232
// for _y = min_y to max_y do
23117: LD_ADDR_VAR 0 12
23121: PUSH
23122: DOUBLE
23123: LD_VAR 0 8
23127: DEC
23128: ST_TO_ADDR
23129: LD_VAR 0 10
23133: PUSH
23134: FOR_TO
23135: IFFALSE 23228
// begin if not ValidHex ( _x , _y ) then
23137: LD_VAR 0 11
23141: PPUSH
23142: LD_VAR 0 12
23146: PPUSH
23147: CALL_OW 488
23151: NOT
23152: IFFALSE 23156
// continue ;
23154: GO 23134
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
23156: LD_VAR 0 11
23160: PPUSH
23161: LD_VAR 0 12
23165: PPUSH
23166: CALL_OW 351
23170: PUSH
23171: LD_VAR 0 11
23175: PPUSH
23176: LD_VAR 0 12
23180: PPUSH
23181: CALL_OW 554
23185: AND
23186: IFFALSE 23226
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23188: LD_ADDR_VAR 0 13
23192: PUSH
23193: LD_VAR 0 13
23197: PPUSH
23198: LD_VAR 0 13
23202: PUSH
23203: LD_INT 1
23205: PLUS
23206: PPUSH
23207: LD_VAR 0 11
23211: PUSH
23212: LD_VAR 0 12
23216: PUSH
23217: EMPTY
23218: LIST
23219: LIST
23220: PPUSH
23221: CALL_OW 2
23225: ST_TO_ADDR
// end ;
23226: GO 23134
23228: POP
23229: POP
23230: GO 23114
23232: POP
23233: POP
// if not list then
23234: LD_VAR 0 13
23238: NOT
23239: IFFALSE 23243
// exit ;
23241: GO 23314
// for i in list do
23243: LD_ADDR_VAR 0 6
23247: PUSH
23248: LD_VAR 0 13
23252: PUSH
23253: FOR_IN
23254: IFFALSE 23312
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
23256: LD_VAR 0 1
23260: PPUSH
23261: LD_STRING M
23263: PUSH
23264: LD_VAR 0 6
23268: PUSH
23269: LD_INT 1
23271: ARRAY
23272: PUSH
23273: LD_VAR 0 6
23277: PUSH
23278: LD_INT 2
23280: ARRAY
23281: PUSH
23282: LD_INT 0
23284: PUSH
23285: LD_INT 0
23287: PUSH
23288: LD_INT 0
23290: PUSH
23291: LD_INT 0
23293: PUSH
23294: EMPTY
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: PUSH
23303: EMPTY
23304: LIST
23305: PPUSH
23306: CALL_OW 447
23310: GO 23253
23312: POP
23313: POP
// end ;
23314: LD_VAR 0 5
23318: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
23319: LD_INT 0
23321: PPUSH
23322: PPUSH
23323: PPUSH
23324: PPUSH
23325: PPUSH
23326: PPUSH
23327: PPUSH
23328: PPUSH
23329: PPUSH
23330: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
23331: LD_VAR 0 1
23335: PPUSH
23336: CALL_OW 302
23340: NOT
23341: PUSH
23342: LD_VAR 0 2
23346: PPUSH
23347: LD_VAR 0 3
23351: PPUSH
23352: CALL_OW 488
23356: NOT
23357: OR
23358: PUSH
23359: LD_VAR 0 4
23363: NOT
23364: OR
23365: IFFALSE 23369
// exit ;
23367: GO 23882
// list := [ ] ;
23369: LD_ADDR_VAR 0 13
23373: PUSH
23374: EMPTY
23375: ST_TO_ADDR
// if x - r < 0 then
23376: LD_VAR 0 2
23380: PUSH
23381: LD_VAR 0 4
23385: MINUS
23386: PUSH
23387: LD_INT 0
23389: LESS
23390: IFFALSE 23402
// min_x := 0 else
23392: LD_ADDR_VAR 0 7
23396: PUSH
23397: LD_INT 0
23399: ST_TO_ADDR
23400: GO 23418
// min_x := x - r ;
23402: LD_ADDR_VAR 0 7
23406: PUSH
23407: LD_VAR 0 2
23411: PUSH
23412: LD_VAR 0 4
23416: MINUS
23417: ST_TO_ADDR
// if y - r < 0 then
23418: LD_VAR 0 3
23422: PUSH
23423: LD_VAR 0 4
23427: MINUS
23428: PUSH
23429: LD_INT 0
23431: LESS
23432: IFFALSE 23444
// min_y := 0 else
23434: LD_ADDR_VAR 0 8
23438: PUSH
23439: LD_INT 0
23441: ST_TO_ADDR
23442: GO 23460
// min_y := y - r ;
23444: LD_ADDR_VAR 0 8
23448: PUSH
23449: LD_VAR 0 3
23453: PUSH
23454: LD_VAR 0 4
23458: MINUS
23459: ST_TO_ADDR
// max_x := x + r ;
23460: LD_ADDR_VAR 0 9
23464: PUSH
23465: LD_VAR 0 2
23469: PUSH
23470: LD_VAR 0 4
23474: PLUS
23475: ST_TO_ADDR
// max_y := y + r ;
23476: LD_ADDR_VAR 0 10
23480: PUSH
23481: LD_VAR 0 3
23485: PUSH
23486: LD_VAR 0 4
23490: PLUS
23491: ST_TO_ADDR
// for _x = min_x to max_x do
23492: LD_ADDR_VAR 0 11
23496: PUSH
23497: DOUBLE
23498: LD_VAR 0 7
23502: DEC
23503: ST_TO_ADDR
23504: LD_VAR 0 9
23508: PUSH
23509: FOR_TO
23510: IFFALSE 23627
// for _y = min_y to max_y do
23512: LD_ADDR_VAR 0 12
23516: PUSH
23517: DOUBLE
23518: LD_VAR 0 8
23522: DEC
23523: ST_TO_ADDR
23524: LD_VAR 0 10
23528: PUSH
23529: FOR_TO
23530: IFFALSE 23623
// begin if not ValidHex ( _x , _y ) then
23532: LD_VAR 0 11
23536: PPUSH
23537: LD_VAR 0 12
23541: PPUSH
23542: CALL_OW 488
23546: NOT
23547: IFFALSE 23551
// continue ;
23549: GO 23529
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
23551: LD_VAR 0 11
23555: PPUSH
23556: LD_VAR 0 12
23560: PPUSH
23561: CALL_OW 351
23565: PUSH
23566: LD_VAR 0 11
23570: PPUSH
23571: LD_VAR 0 12
23575: PPUSH
23576: CALL_OW 554
23580: AND
23581: IFFALSE 23621
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23583: LD_ADDR_VAR 0 13
23587: PUSH
23588: LD_VAR 0 13
23592: PPUSH
23593: LD_VAR 0 13
23597: PUSH
23598: LD_INT 1
23600: PLUS
23601: PPUSH
23602: LD_VAR 0 11
23606: PUSH
23607: LD_VAR 0 12
23611: PUSH
23612: EMPTY
23613: LIST
23614: LIST
23615: PPUSH
23616: CALL_OW 2
23620: ST_TO_ADDR
// end ;
23621: GO 23529
23623: POP
23624: POP
23625: GO 23509
23627: POP
23628: POP
// if not list then
23629: LD_VAR 0 13
23633: NOT
23634: IFFALSE 23638
// exit ;
23636: GO 23882
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
23638: LD_ADDR_VAR 0 13
23642: PUSH
23643: LD_VAR 0 1
23647: PPUSH
23648: LD_VAR 0 13
23652: PPUSH
23653: LD_INT 1
23655: PPUSH
23656: LD_INT 1
23658: PPUSH
23659: CALL 32595 0 4
23663: ST_TO_ADDR
// ComStop ( flame ) ;
23664: LD_VAR 0 1
23668: PPUSH
23669: CALL_OW 141
// for i in list do
23673: LD_ADDR_VAR 0 6
23677: PUSH
23678: LD_VAR 0 13
23682: PUSH
23683: FOR_IN
23684: IFFALSE 23715
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
23686: LD_VAR 0 1
23690: PPUSH
23691: LD_VAR 0 6
23695: PUSH
23696: LD_INT 1
23698: ARRAY
23699: PPUSH
23700: LD_VAR 0 6
23704: PUSH
23705: LD_INT 2
23707: ARRAY
23708: PPUSH
23709: CALL_OW 176
23713: GO 23683
23715: POP
23716: POP
// repeat wait ( 0 0$1 ) ;
23717: LD_INT 35
23719: PPUSH
23720: CALL_OW 67
// task := GetTaskList ( flame ) ;
23724: LD_ADDR_VAR 0 14
23728: PUSH
23729: LD_VAR 0 1
23733: PPUSH
23734: CALL_OW 437
23738: ST_TO_ADDR
// if not task then
23739: LD_VAR 0 14
23743: NOT
23744: IFFALSE 23748
// exit ;
23746: GO 23882
// if task [ 1 ] [ 1 ] <> | then
23748: LD_VAR 0 14
23752: PUSH
23753: LD_INT 1
23755: ARRAY
23756: PUSH
23757: LD_INT 1
23759: ARRAY
23760: PUSH
23761: LD_STRING |
23763: NONEQUAL
23764: IFFALSE 23768
// exit ;
23766: GO 23882
// _x := task [ 1 ] [ 2 ] ;
23768: LD_ADDR_VAR 0 11
23772: PUSH
23773: LD_VAR 0 14
23777: PUSH
23778: LD_INT 1
23780: ARRAY
23781: PUSH
23782: LD_INT 2
23784: ARRAY
23785: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
23786: LD_ADDR_VAR 0 12
23790: PUSH
23791: LD_VAR 0 14
23795: PUSH
23796: LD_INT 1
23798: ARRAY
23799: PUSH
23800: LD_INT 3
23802: ARRAY
23803: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
23804: LD_VAR 0 11
23808: PPUSH
23809: LD_VAR 0 12
23813: PPUSH
23814: CALL_OW 351
23818: NOT
23819: PUSH
23820: LD_VAR 0 11
23824: PPUSH
23825: LD_VAR 0 12
23829: PPUSH
23830: CALL_OW 554
23834: NOT
23835: OR
23836: IFFALSE 23870
// begin task := Delete ( task , 1 ) ;
23838: LD_ADDR_VAR 0 14
23842: PUSH
23843: LD_VAR 0 14
23847: PPUSH
23848: LD_INT 1
23850: PPUSH
23851: CALL_OW 3
23855: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
23856: LD_VAR 0 1
23860: PPUSH
23861: LD_VAR 0 14
23865: PPUSH
23866: CALL_OW 446
// end ; until not HasTask ( flame ) ;
23870: LD_VAR 0 1
23874: PPUSH
23875: CALL_OW 314
23879: NOT
23880: IFFALSE 23717
// end ;
23882: LD_VAR 0 5
23886: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
23887: LD_EXP 87
23891: NOT
23892: IFFALSE 23942
23894: GO 23896
23896: DISABLE
// begin initHack := true ;
23897: LD_ADDR_EXP 87
23901: PUSH
23902: LD_INT 1
23904: ST_TO_ADDR
// hackTanks := [ ] ;
23905: LD_ADDR_EXP 88
23909: PUSH
23910: EMPTY
23911: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
23912: LD_ADDR_EXP 89
23916: PUSH
23917: EMPTY
23918: ST_TO_ADDR
// hackLimit := 3 ;
23919: LD_ADDR_EXP 90
23923: PUSH
23924: LD_INT 3
23926: ST_TO_ADDR
// hackDist := 12 ;
23927: LD_ADDR_EXP 91
23931: PUSH
23932: LD_INT 12
23934: ST_TO_ADDR
// hackCounter := [ ] ;
23935: LD_ADDR_EXP 92
23939: PUSH
23940: EMPTY
23941: ST_TO_ADDR
// end ;
23942: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
23943: LD_EXP 87
23947: PUSH
23948: LD_INT 34
23950: PUSH
23951: LD_INT 99
23953: PUSH
23954: EMPTY
23955: LIST
23956: LIST
23957: PPUSH
23958: CALL_OW 69
23962: AND
23963: IFFALSE 24216
23965: GO 23967
23967: DISABLE
23968: LD_INT 0
23970: PPUSH
23971: PPUSH
// begin enable ;
23972: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
23973: LD_ADDR_VAR 0 1
23977: PUSH
23978: LD_INT 34
23980: PUSH
23981: LD_INT 99
23983: PUSH
23984: EMPTY
23985: LIST
23986: LIST
23987: PPUSH
23988: CALL_OW 69
23992: PUSH
23993: FOR_IN
23994: IFFALSE 24214
// begin if not i in hackTanks then
23996: LD_VAR 0 1
24000: PUSH
24001: LD_EXP 88
24005: IN
24006: NOT
24007: IFFALSE 24090
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
24009: LD_ADDR_EXP 88
24013: PUSH
24014: LD_EXP 88
24018: PPUSH
24019: LD_EXP 88
24023: PUSH
24024: LD_INT 1
24026: PLUS
24027: PPUSH
24028: LD_VAR 0 1
24032: PPUSH
24033: CALL_OW 1
24037: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
24038: LD_ADDR_EXP 89
24042: PUSH
24043: LD_EXP 89
24047: PPUSH
24048: LD_EXP 89
24052: PUSH
24053: LD_INT 1
24055: PLUS
24056: PPUSH
24057: EMPTY
24058: PPUSH
24059: CALL_OW 1
24063: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
24064: LD_ADDR_EXP 92
24068: PUSH
24069: LD_EXP 92
24073: PPUSH
24074: LD_EXP 92
24078: PUSH
24079: LD_INT 1
24081: PLUS
24082: PPUSH
24083: EMPTY
24084: PPUSH
24085: CALL_OW 1
24089: ST_TO_ADDR
// end ; if not IsOk ( i ) then
24090: LD_VAR 0 1
24094: PPUSH
24095: CALL_OW 302
24099: NOT
24100: IFFALSE 24113
// begin HackUnlinkAll ( i ) ;
24102: LD_VAR 0 1
24106: PPUSH
24107: CALL 24219 0 1
// continue ;
24111: GO 23993
// end ; HackCheckCapturedStatus ( i ) ;
24113: LD_VAR 0 1
24117: PPUSH
24118: CALL 24662 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
24122: LD_ADDR_VAR 0 2
24126: PUSH
24127: LD_INT 81
24129: PUSH
24130: LD_VAR 0 1
24134: PPUSH
24135: CALL_OW 255
24139: PUSH
24140: EMPTY
24141: LIST
24142: LIST
24143: PUSH
24144: LD_INT 33
24146: PUSH
24147: LD_INT 3
24149: PUSH
24150: EMPTY
24151: LIST
24152: LIST
24153: PUSH
24154: LD_INT 91
24156: PUSH
24157: LD_VAR 0 1
24161: PUSH
24162: LD_EXP 91
24166: PUSH
24167: EMPTY
24168: LIST
24169: LIST
24170: LIST
24171: PUSH
24172: LD_INT 50
24174: PUSH
24175: EMPTY
24176: LIST
24177: PUSH
24178: EMPTY
24179: LIST
24180: LIST
24181: LIST
24182: LIST
24183: PPUSH
24184: CALL_OW 69
24188: ST_TO_ADDR
// if not tmp then
24189: LD_VAR 0 2
24193: NOT
24194: IFFALSE 24198
// continue ;
24196: GO 23993
// HackLink ( i , tmp ) ;
24198: LD_VAR 0 1
24202: PPUSH
24203: LD_VAR 0 2
24207: PPUSH
24208: CALL 24355 0 2
// end ;
24212: GO 23993
24214: POP
24215: POP
// end ;
24216: PPOPN 2
24218: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
24219: LD_INT 0
24221: PPUSH
24222: PPUSH
24223: PPUSH
// if not hack in hackTanks then
24224: LD_VAR 0 1
24228: PUSH
24229: LD_EXP 88
24233: IN
24234: NOT
24235: IFFALSE 24239
// exit ;
24237: GO 24350
// index := GetElementIndex ( hackTanks , hack ) ;
24239: LD_ADDR_VAR 0 4
24243: PUSH
24244: LD_EXP 88
24248: PPUSH
24249: LD_VAR 0 1
24253: PPUSH
24254: CALL 31892 0 2
24258: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
24259: LD_EXP 89
24263: PUSH
24264: LD_VAR 0 4
24268: ARRAY
24269: IFFALSE 24350
// begin for i in hackTanksCaptured [ index ] do
24271: LD_ADDR_VAR 0 3
24275: PUSH
24276: LD_EXP 89
24280: PUSH
24281: LD_VAR 0 4
24285: ARRAY
24286: PUSH
24287: FOR_IN
24288: IFFALSE 24314
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
24290: LD_VAR 0 3
24294: PUSH
24295: LD_INT 1
24297: ARRAY
24298: PPUSH
24299: LD_VAR 0 3
24303: PUSH
24304: LD_INT 2
24306: ARRAY
24307: PPUSH
24308: CALL_OW 235
24312: GO 24287
24314: POP
24315: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
24316: LD_ADDR_EXP 89
24320: PUSH
24321: LD_EXP 89
24325: PPUSH
24326: LD_VAR 0 4
24330: PPUSH
24331: EMPTY
24332: PPUSH
24333: CALL_OW 1
24337: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
24338: LD_VAR 0 1
24342: PPUSH
24343: LD_INT 0
24345: PPUSH
24346: CALL_OW 505
// end ; end ;
24350: LD_VAR 0 2
24354: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
24355: LD_INT 0
24357: PPUSH
24358: PPUSH
24359: PPUSH
// if not hack in hackTanks or not vehicles then
24360: LD_VAR 0 1
24364: PUSH
24365: LD_EXP 88
24369: IN
24370: NOT
24371: PUSH
24372: LD_VAR 0 2
24376: NOT
24377: OR
24378: IFFALSE 24382
// exit ;
24380: GO 24657
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
24382: LD_ADDR_VAR 0 2
24386: PUSH
24387: LD_VAR 0 1
24391: PPUSH
24392: LD_VAR 0 2
24396: PPUSH
24397: LD_INT 1
24399: PPUSH
24400: LD_INT 1
24402: PPUSH
24403: CALL 32542 0 4
24407: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
24408: LD_ADDR_VAR 0 5
24412: PUSH
24413: LD_EXP 88
24417: PPUSH
24418: LD_VAR 0 1
24422: PPUSH
24423: CALL 31892 0 2
24427: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
24428: LD_EXP 89
24432: PUSH
24433: LD_VAR 0 5
24437: ARRAY
24438: PUSH
24439: LD_EXP 90
24443: LESS
24444: IFFALSE 24633
// begin for i := 1 to vehicles do
24446: LD_ADDR_VAR 0 4
24450: PUSH
24451: DOUBLE
24452: LD_INT 1
24454: DEC
24455: ST_TO_ADDR
24456: LD_VAR 0 2
24460: PUSH
24461: FOR_TO
24462: IFFALSE 24631
// begin if hackTanksCaptured [ index ] = hackLimit then
24464: LD_EXP 89
24468: PUSH
24469: LD_VAR 0 5
24473: ARRAY
24474: PUSH
24475: LD_EXP 90
24479: EQUAL
24480: IFFALSE 24484
// break ;
24482: GO 24631
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
24484: LD_ADDR_EXP 92
24488: PUSH
24489: LD_EXP 92
24493: PPUSH
24494: LD_VAR 0 5
24498: PPUSH
24499: LD_EXP 92
24503: PUSH
24504: LD_VAR 0 5
24508: ARRAY
24509: PUSH
24510: LD_INT 1
24512: PLUS
24513: PPUSH
24514: CALL_OW 1
24518: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
24519: LD_ADDR_EXP 89
24523: PUSH
24524: LD_EXP 89
24528: PPUSH
24529: LD_VAR 0 5
24533: PUSH
24534: LD_EXP 89
24538: PUSH
24539: LD_VAR 0 5
24543: ARRAY
24544: PUSH
24545: LD_INT 1
24547: PLUS
24548: PUSH
24549: EMPTY
24550: LIST
24551: LIST
24552: PPUSH
24553: LD_VAR 0 2
24557: PUSH
24558: LD_VAR 0 4
24562: ARRAY
24563: PUSH
24564: LD_VAR 0 2
24568: PUSH
24569: LD_VAR 0 4
24573: ARRAY
24574: PPUSH
24575: CALL_OW 255
24579: PUSH
24580: EMPTY
24581: LIST
24582: LIST
24583: PPUSH
24584: CALL 32107 0 3
24588: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
24589: LD_VAR 0 2
24593: PUSH
24594: LD_VAR 0 4
24598: ARRAY
24599: PPUSH
24600: LD_VAR 0 1
24604: PPUSH
24605: CALL_OW 255
24609: PPUSH
24610: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
24614: LD_VAR 0 2
24618: PUSH
24619: LD_VAR 0 4
24623: ARRAY
24624: PPUSH
24625: CALL_OW 141
// end ;
24629: GO 24461
24631: POP
24632: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24633: LD_VAR 0 1
24637: PPUSH
24638: LD_EXP 89
24642: PUSH
24643: LD_VAR 0 5
24647: ARRAY
24648: PUSH
24649: LD_INT 0
24651: PLUS
24652: PPUSH
24653: CALL_OW 505
// end ;
24657: LD_VAR 0 3
24661: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
24662: LD_INT 0
24664: PPUSH
24665: PPUSH
24666: PPUSH
24667: PPUSH
// if not hack in hackTanks then
24668: LD_VAR 0 1
24672: PUSH
24673: LD_EXP 88
24677: IN
24678: NOT
24679: IFFALSE 24683
// exit ;
24681: GO 24923
// index := GetElementIndex ( hackTanks , hack ) ;
24683: LD_ADDR_VAR 0 4
24687: PUSH
24688: LD_EXP 88
24692: PPUSH
24693: LD_VAR 0 1
24697: PPUSH
24698: CALL 31892 0 2
24702: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
24703: LD_ADDR_VAR 0 3
24707: PUSH
24708: DOUBLE
24709: LD_EXP 89
24713: PUSH
24714: LD_VAR 0 4
24718: ARRAY
24719: INC
24720: ST_TO_ADDR
24721: LD_INT 1
24723: PUSH
24724: FOR_DOWNTO
24725: IFFALSE 24897
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
24727: LD_ADDR_VAR 0 5
24731: PUSH
24732: LD_EXP 89
24736: PUSH
24737: LD_VAR 0 4
24741: ARRAY
24742: PUSH
24743: LD_VAR 0 3
24747: ARRAY
24748: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
24749: LD_VAR 0 5
24753: PUSH
24754: LD_INT 1
24756: ARRAY
24757: PPUSH
24758: CALL_OW 302
24762: NOT
24763: PUSH
24764: LD_VAR 0 5
24768: PUSH
24769: LD_INT 1
24771: ARRAY
24772: PPUSH
24773: CALL_OW 255
24777: PUSH
24778: LD_VAR 0 1
24782: PPUSH
24783: CALL_OW 255
24787: NONEQUAL
24788: OR
24789: IFFALSE 24895
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
24791: LD_VAR 0 5
24795: PUSH
24796: LD_INT 1
24798: ARRAY
24799: PPUSH
24800: CALL_OW 305
24804: PUSH
24805: LD_VAR 0 5
24809: PUSH
24810: LD_INT 1
24812: ARRAY
24813: PPUSH
24814: CALL_OW 255
24818: PUSH
24819: LD_VAR 0 1
24823: PPUSH
24824: CALL_OW 255
24828: EQUAL
24829: AND
24830: IFFALSE 24854
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
24832: LD_VAR 0 5
24836: PUSH
24837: LD_INT 1
24839: ARRAY
24840: PPUSH
24841: LD_VAR 0 5
24845: PUSH
24846: LD_INT 2
24848: ARRAY
24849: PPUSH
24850: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
24854: LD_ADDR_EXP 89
24858: PUSH
24859: LD_EXP 89
24863: PPUSH
24864: LD_VAR 0 4
24868: PPUSH
24869: LD_EXP 89
24873: PUSH
24874: LD_VAR 0 4
24878: ARRAY
24879: PPUSH
24880: LD_VAR 0 3
24884: PPUSH
24885: CALL_OW 3
24889: PPUSH
24890: CALL_OW 1
24894: ST_TO_ADDR
// end ; end ;
24895: GO 24724
24897: POP
24898: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24899: LD_VAR 0 1
24903: PPUSH
24904: LD_EXP 89
24908: PUSH
24909: LD_VAR 0 4
24913: ARRAY
24914: PUSH
24915: LD_INT 0
24917: PLUS
24918: PPUSH
24919: CALL_OW 505
// end ;
24923: LD_VAR 0 2
24927: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
24928: LD_INT 0
24930: PPUSH
24931: PPUSH
24932: PPUSH
24933: PPUSH
// if not hack in hackTanks then
24934: LD_VAR 0 1
24938: PUSH
24939: LD_EXP 88
24943: IN
24944: NOT
24945: IFFALSE 24949
// exit ;
24947: GO 25034
// index := GetElementIndex ( hackTanks , hack ) ;
24949: LD_ADDR_VAR 0 5
24953: PUSH
24954: LD_EXP 88
24958: PPUSH
24959: LD_VAR 0 1
24963: PPUSH
24964: CALL 31892 0 2
24968: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
24969: LD_ADDR_VAR 0 4
24973: PUSH
24974: DOUBLE
24975: LD_INT 1
24977: DEC
24978: ST_TO_ADDR
24979: LD_EXP 89
24983: PUSH
24984: LD_VAR 0 5
24988: ARRAY
24989: PUSH
24990: FOR_TO
24991: IFFALSE 25032
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
24993: LD_EXP 89
24997: PUSH
24998: LD_VAR 0 5
25002: ARRAY
25003: PUSH
25004: LD_VAR 0 4
25008: ARRAY
25009: PUSH
25010: LD_INT 1
25012: ARRAY
25013: PUSH
25014: LD_VAR 0 2
25018: EQUAL
25019: IFFALSE 25030
// KillUnit ( vehicle ) ;
25021: LD_VAR 0 2
25025: PPUSH
25026: CALL_OW 66
25030: GO 24990
25032: POP
25033: POP
// end ;
25034: LD_VAR 0 3
25038: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
25039: LD_EXP 93
25043: NOT
25044: IFFALSE 25079
25046: GO 25048
25048: DISABLE
// begin initMiner := true ;
25049: LD_ADDR_EXP 93
25053: PUSH
25054: LD_INT 1
25056: ST_TO_ADDR
// minersList := [ ] ;
25057: LD_ADDR_EXP 94
25061: PUSH
25062: EMPTY
25063: ST_TO_ADDR
// minerMinesList := [ ] ;
25064: LD_ADDR_EXP 95
25068: PUSH
25069: EMPTY
25070: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
25071: LD_ADDR_EXP 96
25075: PUSH
25076: LD_INT 5
25078: ST_TO_ADDR
// end ;
25079: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
25080: LD_EXP 93
25084: PUSH
25085: LD_INT 34
25087: PUSH
25088: LD_INT 81
25090: PUSH
25091: EMPTY
25092: LIST
25093: LIST
25094: PPUSH
25095: CALL_OW 69
25099: AND
25100: IFFALSE 25561
25102: GO 25104
25104: DISABLE
25105: LD_INT 0
25107: PPUSH
25108: PPUSH
25109: PPUSH
25110: PPUSH
// begin enable ;
25111: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
25112: LD_ADDR_VAR 0 1
25116: PUSH
25117: LD_INT 34
25119: PUSH
25120: LD_INT 81
25122: PUSH
25123: EMPTY
25124: LIST
25125: LIST
25126: PPUSH
25127: CALL_OW 69
25131: PUSH
25132: FOR_IN
25133: IFFALSE 25205
// begin if not i in minersList then
25135: LD_VAR 0 1
25139: PUSH
25140: LD_EXP 94
25144: IN
25145: NOT
25146: IFFALSE 25203
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
25148: LD_ADDR_EXP 94
25152: PUSH
25153: LD_EXP 94
25157: PPUSH
25158: LD_EXP 94
25162: PUSH
25163: LD_INT 1
25165: PLUS
25166: PPUSH
25167: LD_VAR 0 1
25171: PPUSH
25172: CALL_OW 1
25176: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
25177: LD_ADDR_EXP 95
25181: PUSH
25182: LD_EXP 95
25186: PPUSH
25187: LD_EXP 95
25191: PUSH
25192: LD_INT 1
25194: PLUS
25195: PPUSH
25196: EMPTY
25197: PPUSH
25198: CALL_OW 1
25202: ST_TO_ADDR
// end end ;
25203: GO 25132
25205: POP
25206: POP
// for i := minerMinesList downto 1 do
25207: LD_ADDR_VAR 0 1
25211: PUSH
25212: DOUBLE
25213: LD_EXP 95
25217: INC
25218: ST_TO_ADDR
25219: LD_INT 1
25221: PUSH
25222: FOR_DOWNTO
25223: IFFALSE 25559
// begin if IsLive ( minersList [ i ] ) then
25225: LD_EXP 94
25229: PUSH
25230: LD_VAR 0 1
25234: ARRAY
25235: PPUSH
25236: CALL_OW 300
25240: IFFALSE 25268
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
25242: LD_EXP 94
25246: PUSH
25247: LD_VAR 0 1
25251: ARRAY
25252: PPUSH
25253: LD_EXP 95
25257: PUSH
25258: LD_VAR 0 1
25262: ARRAY
25263: PPUSH
25264: CALL_OW 505
// if not minerMinesList [ i ] then
25268: LD_EXP 95
25272: PUSH
25273: LD_VAR 0 1
25277: ARRAY
25278: NOT
25279: IFFALSE 25283
// continue ;
25281: GO 25222
// for j := minerMinesList [ i ] downto 1 do
25283: LD_ADDR_VAR 0 2
25287: PUSH
25288: DOUBLE
25289: LD_EXP 95
25293: PUSH
25294: LD_VAR 0 1
25298: ARRAY
25299: INC
25300: ST_TO_ADDR
25301: LD_INT 1
25303: PUSH
25304: FOR_DOWNTO
25305: IFFALSE 25555
// begin side := GetSide ( minersList [ i ] ) ;
25307: LD_ADDR_VAR 0 3
25311: PUSH
25312: LD_EXP 94
25316: PUSH
25317: LD_VAR 0 1
25321: ARRAY
25322: PPUSH
25323: CALL_OW 255
25327: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
25328: LD_ADDR_VAR 0 4
25332: PUSH
25333: LD_EXP 95
25337: PUSH
25338: LD_VAR 0 1
25342: ARRAY
25343: PUSH
25344: LD_VAR 0 2
25348: ARRAY
25349: PUSH
25350: LD_INT 1
25352: ARRAY
25353: PPUSH
25354: LD_EXP 95
25358: PUSH
25359: LD_VAR 0 1
25363: ARRAY
25364: PUSH
25365: LD_VAR 0 2
25369: ARRAY
25370: PUSH
25371: LD_INT 2
25373: ARRAY
25374: PPUSH
25375: CALL_OW 428
25379: ST_TO_ADDR
// if not tmp then
25380: LD_VAR 0 4
25384: NOT
25385: IFFALSE 25389
// continue ;
25387: GO 25304
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
25389: LD_VAR 0 4
25393: PUSH
25394: LD_INT 81
25396: PUSH
25397: LD_VAR 0 3
25401: PUSH
25402: EMPTY
25403: LIST
25404: LIST
25405: PPUSH
25406: CALL_OW 69
25410: IN
25411: PUSH
25412: LD_EXP 95
25416: PUSH
25417: LD_VAR 0 1
25421: ARRAY
25422: PUSH
25423: LD_VAR 0 2
25427: ARRAY
25428: PUSH
25429: LD_INT 1
25431: ARRAY
25432: PPUSH
25433: LD_EXP 95
25437: PUSH
25438: LD_VAR 0 1
25442: ARRAY
25443: PUSH
25444: LD_VAR 0 2
25448: ARRAY
25449: PUSH
25450: LD_INT 2
25452: ARRAY
25453: PPUSH
25454: CALL_OW 458
25458: AND
25459: IFFALSE 25553
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
25461: LD_EXP 95
25465: PUSH
25466: LD_VAR 0 1
25470: ARRAY
25471: PUSH
25472: LD_VAR 0 2
25476: ARRAY
25477: PUSH
25478: LD_INT 1
25480: ARRAY
25481: PPUSH
25482: LD_EXP 95
25486: PUSH
25487: LD_VAR 0 1
25491: ARRAY
25492: PUSH
25493: LD_VAR 0 2
25497: ARRAY
25498: PUSH
25499: LD_INT 2
25501: ARRAY
25502: PPUSH
25503: LD_VAR 0 3
25507: PPUSH
25508: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
25512: LD_ADDR_EXP 95
25516: PUSH
25517: LD_EXP 95
25521: PPUSH
25522: LD_VAR 0 1
25526: PPUSH
25527: LD_EXP 95
25531: PUSH
25532: LD_VAR 0 1
25536: ARRAY
25537: PPUSH
25538: LD_VAR 0 2
25542: PPUSH
25543: CALL_OW 3
25547: PPUSH
25548: CALL_OW 1
25552: ST_TO_ADDR
// end ; end ;
25553: GO 25304
25555: POP
25556: POP
// end ;
25557: GO 25222
25559: POP
25560: POP
// end ;
25561: PPOPN 4
25563: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
25564: LD_INT 0
25566: PPUSH
25567: PPUSH
// result := false ;
25568: LD_ADDR_VAR 0 4
25572: PUSH
25573: LD_INT 0
25575: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
25576: LD_VAR 0 1
25580: PPUSH
25581: CALL_OW 264
25585: PUSH
25586: LD_INT 81
25588: EQUAL
25589: NOT
25590: IFFALSE 25594
// exit ;
25592: GO 25834
// index := GetElementIndex ( minersList , unit ) ;
25594: LD_ADDR_VAR 0 5
25598: PUSH
25599: LD_EXP 94
25603: PPUSH
25604: LD_VAR 0 1
25608: PPUSH
25609: CALL 31892 0 2
25613: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
25614: LD_EXP 95
25618: PUSH
25619: LD_VAR 0 5
25623: ARRAY
25624: PUSH
25625: LD_EXP 96
25629: GREATEREQUAL
25630: IFFALSE 25634
// exit ;
25632: GO 25834
// ComMoveXY ( unit , x , y ) ;
25634: LD_VAR 0 1
25638: PPUSH
25639: LD_VAR 0 2
25643: PPUSH
25644: LD_VAR 0 3
25648: PPUSH
25649: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25653: LD_INT 35
25655: PPUSH
25656: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
25660: LD_VAR 0 1
25664: PPUSH
25665: LD_VAR 0 2
25669: PPUSH
25670: LD_VAR 0 3
25674: PPUSH
25675: CALL 63653 0 3
25679: NOT
25680: PUSH
25681: LD_VAR 0 1
25685: PPUSH
25686: CALL_OW 314
25690: AND
25691: IFFALSE 25695
// exit ;
25693: GO 25834
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
25695: LD_VAR 0 2
25699: PPUSH
25700: LD_VAR 0 3
25704: PPUSH
25705: CALL_OW 428
25709: PUSH
25710: LD_VAR 0 1
25714: EQUAL
25715: PUSH
25716: LD_VAR 0 1
25720: PPUSH
25721: CALL_OW 314
25725: NOT
25726: AND
25727: IFFALSE 25653
// PlaySoundXY ( x , y , PlantMine ) ;
25729: LD_VAR 0 2
25733: PPUSH
25734: LD_VAR 0 3
25738: PPUSH
25739: LD_STRING PlantMine
25741: PPUSH
25742: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
25746: LD_VAR 0 2
25750: PPUSH
25751: LD_VAR 0 3
25755: PPUSH
25756: LD_VAR 0 1
25760: PPUSH
25761: CALL_OW 255
25765: PPUSH
25766: LD_INT 0
25768: PPUSH
25769: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
25773: LD_ADDR_EXP 95
25777: PUSH
25778: LD_EXP 95
25782: PPUSH
25783: LD_VAR 0 5
25787: PUSH
25788: LD_EXP 95
25792: PUSH
25793: LD_VAR 0 5
25797: ARRAY
25798: PUSH
25799: LD_INT 1
25801: PLUS
25802: PUSH
25803: EMPTY
25804: LIST
25805: LIST
25806: PPUSH
25807: LD_VAR 0 2
25811: PUSH
25812: LD_VAR 0 3
25816: PUSH
25817: EMPTY
25818: LIST
25819: LIST
25820: PPUSH
25821: CALL 32107 0 3
25825: ST_TO_ADDR
// result := true ;
25826: LD_ADDR_VAR 0 4
25830: PUSH
25831: LD_INT 1
25833: ST_TO_ADDR
// end ;
25834: LD_VAR 0 4
25838: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
25839: LD_INT 0
25841: PPUSH
25842: PPUSH
25843: PPUSH
// if not unit in minersList then
25844: LD_VAR 0 1
25848: PUSH
25849: LD_EXP 94
25853: IN
25854: NOT
25855: IFFALSE 25859
// exit ;
25857: GO 26251
// index := GetElementIndex ( minersList , unit ) ;
25859: LD_ADDR_VAR 0 6
25863: PUSH
25864: LD_EXP 94
25868: PPUSH
25869: LD_VAR 0 1
25873: PPUSH
25874: CALL 31892 0 2
25878: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
25879: LD_ADDR_VAR 0 5
25883: PUSH
25884: DOUBLE
25885: LD_EXP 95
25889: PUSH
25890: LD_VAR 0 6
25894: ARRAY
25895: INC
25896: ST_TO_ADDR
25897: LD_INT 1
25899: PUSH
25900: FOR_DOWNTO
25901: IFFALSE 26062
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
25903: LD_EXP 95
25907: PUSH
25908: LD_VAR 0 6
25912: ARRAY
25913: PUSH
25914: LD_VAR 0 5
25918: ARRAY
25919: PUSH
25920: LD_INT 1
25922: ARRAY
25923: PUSH
25924: LD_VAR 0 2
25928: EQUAL
25929: PUSH
25930: LD_EXP 95
25934: PUSH
25935: LD_VAR 0 6
25939: ARRAY
25940: PUSH
25941: LD_VAR 0 5
25945: ARRAY
25946: PUSH
25947: LD_INT 2
25949: ARRAY
25950: PUSH
25951: LD_VAR 0 3
25955: EQUAL
25956: AND
25957: IFFALSE 26060
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25959: LD_EXP 95
25963: PUSH
25964: LD_VAR 0 6
25968: ARRAY
25969: PUSH
25970: LD_VAR 0 5
25974: ARRAY
25975: PUSH
25976: LD_INT 1
25978: ARRAY
25979: PPUSH
25980: LD_EXP 95
25984: PUSH
25985: LD_VAR 0 6
25989: ARRAY
25990: PUSH
25991: LD_VAR 0 5
25995: ARRAY
25996: PUSH
25997: LD_INT 2
25999: ARRAY
26000: PPUSH
26001: LD_VAR 0 1
26005: PPUSH
26006: CALL_OW 255
26010: PPUSH
26011: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26015: LD_ADDR_EXP 95
26019: PUSH
26020: LD_EXP 95
26024: PPUSH
26025: LD_VAR 0 6
26029: PPUSH
26030: LD_EXP 95
26034: PUSH
26035: LD_VAR 0 6
26039: ARRAY
26040: PPUSH
26041: LD_VAR 0 5
26045: PPUSH
26046: CALL_OW 3
26050: PPUSH
26051: CALL_OW 1
26055: ST_TO_ADDR
// exit ;
26056: POP
26057: POP
26058: GO 26251
// end ; end ;
26060: GO 25900
26062: POP
26063: POP
// for i := minerMinesList [ index ] downto 1 do
26064: LD_ADDR_VAR 0 5
26068: PUSH
26069: DOUBLE
26070: LD_EXP 95
26074: PUSH
26075: LD_VAR 0 6
26079: ARRAY
26080: INC
26081: ST_TO_ADDR
26082: LD_INT 1
26084: PUSH
26085: FOR_DOWNTO
26086: IFFALSE 26249
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
26088: LD_EXP 95
26092: PUSH
26093: LD_VAR 0 6
26097: ARRAY
26098: PUSH
26099: LD_VAR 0 5
26103: ARRAY
26104: PUSH
26105: LD_INT 1
26107: ARRAY
26108: PPUSH
26109: LD_EXP 95
26113: PUSH
26114: LD_VAR 0 6
26118: ARRAY
26119: PUSH
26120: LD_VAR 0 5
26124: ARRAY
26125: PUSH
26126: LD_INT 2
26128: ARRAY
26129: PPUSH
26130: LD_VAR 0 2
26134: PPUSH
26135: LD_VAR 0 3
26139: PPUSH
26140: CALL_OW 298
26144: PUSH
26145: LD_INT 6
26147: LESS
26148: IFFALSE 26247
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26150: LD_EXP 95
26154: PUSH
26155: LD_VAR 0 6
26159: ARRAY
26160: PUSH
26161: LD_VAR 0 5
26165: ARRAY
26166: PUSH
26167: LD_INT 1
26169: ARRAY
26170: PPUSH
26171: LD_EXP 95
26175: PUSH
26176: LD_VAR 0 6
26180: ARRAY
26181: PUSH
26182: LD_VAR 0 5
26186: ARRAY
26187: PUSH
26188: LD_INT 2
26190: ARRAY
26191: PPUSH
26192: LD_VAR 0 1
26196: PPUSH
26197: CALL_OW 255
26201: PPUSH
26202: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26206: LD_ADDR_EXP 95
26210: PUSH
26211: LD_EXP 95
26215: PPUSH
26216: LD_VAR 0 6
26220: PPUSH
26221: LD_EXP 95
26225: PUSH
26226: LD_VAR 0 6
26230: ARRAY
26231: PPUSH
26232: LD_VAR 0 5
26236: PPUSH
26237: CALL_OW 3
26241: PPUSH
26242: CALL_OW 1
26246: ST_TO_ADDR
// end ; end ;
26247: GO 26085
26249: POP
26250: POP
// end ;
26251: LD_VAR 0 4
26255: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
26256: LD_INT 0
26258: PPUSH
26259: PPUSH
26260: PPUSH
26261: PPUSH
26262: PPUSH
26263: PPUSH
26264: PPUSH
26265: PPUSH
26266: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
26267: LD_VAR 0 1
26271: PPUSH
26272: CALL_OW 264
26276: PUSH
26277: LD_INT 81
26279: EQUAL
26280: NOT
26281: PUSH
26282: LD_VAR 0 1
26286: PUSH
26287: LD_EXP 94
26291: IN
26292: NOT
26293: OR
26294: IFFALSE 26298
// exit ;
26296: GO 26620
// index := GetElementIndex ( minersList , unit ) ;
26298: LD_ADDR_VAR 0 6
26302: PUSH
26303: LD_EXP 94
26307: PPUSH
26308: LD_VAR 0 1
26312: PPUSH
26313: CALL 31892 0 2
26317: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
26318: LD_ADDR_VAR 0 8
26322: PUSH
26323: LD_EXP 96
26327: PUSH
26328: LD_EXP 95
26332: PUSH
26333: LD_VAR 0 6
26337: ARRAY
26338: MINUS
26339: ST_TO_ADDR
// if not minesFreeAmount then
26340: LD_VAR 0 8
26344: NOT
26345: IFFALSE 26349
// exit ;
26347: GO 26620
// tmp := [ ] ;
26349: LD_ADDR_VAR 0 7
26353: PUSH
26354: EMPTY
26355: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
26356: LD_ADDR_VAR 0 5
26360: PUSH
26361: DOUBLE
26362: LD_INT 1
26364: DEC
26365: ST_TO_ADDR
26366: LD_VAR 0 8
26370: PUSH
26371: FOR_TO
26372: IFFALSE 26567
// begin _d := rand ( 0 , 5 ) ;
26374: LD_ADDR_VAR 0 11
26378: PUSH
26379: LD_INT 0
26381: PPUSH
26382: LD_INT 5
26384: PPUSH
26385: CALL_OW 12
26389: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
26390: LD_ADDR_VAR 0 12
26394: PUSH
26395: LD_INT 2
26397: PPUSH
26398: LD_INT 6
26400: PPUSH
26401: CALL_OW 12
26405: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
26406: LD_ADDR_VAR 0 9
26410: PUSH
26411: LD_VAR 0 2
26415: PPUSH
26416: LD_VAR 0 11
26420: PPUSH
26421: LD_VAR 0 12
26425: PPUSH
26426: CALL_OW 272
26430: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
26431: LD_ADDR_VAR 0 10
26435: PUSH
26436: LD_VAR 0 3
26440: PPUSH
26441: LD_VAR 0 11
26445: PPUSH
26446: LD_VAR 0 12
26450: PPUSH
26451: CALL_OW 273
26455: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
26456: LD_VAR 0 9
26460: PPUSH
26461: LD_VAR 0 10
26465: PPUSH
26466: CALL_OW 488
26470: PUSH
26471: LD_VAR 0 9
26475: PUSH
26476: LD_VAR 0 10
26480: PUSH
26481: EMPTY
26482: LIST
26483: LIST
26484: PUSH
26485: LD_VAR 0 7
26489: IN
26490: NOT
26491: AND
26492: PUSH
26493: LD_VAR 0 9
26497: PPUSH
26498: LD_VAR 0 10
26502: PPUSH
26503: CALL_OW 458
26507: NOT
26508: AND
26509: IFFALSE 26551
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
26511: LD_ADDR_VAR 0 7
26515: PUSH
26516: LD_VAR 0 7
26520: PPUSH
26521: LD_VAR 0 7
26525: PUSH
26526: LD_INT 1
26528: PLUS
26529: PPUSH
26530: LD_VAR 0 9
26534: PUSH
26535: LD_VAR 0 10
26539: PUSH
26540: EMPTY
26541: LIST
26542: LIST
26543: PPUSH
26544: CALL_OW 1
26548: ST_TO_ADDR
26549: GO 26565
// i := i - 1 ;
26551: LD_ADDR_VAR 0 5
26555: PUSH
26556: LD_VAR 0 5
26560: PUSH
26561: LD_INT 1
26563: MINUS
26564: ST_TO_ADDR
// end ;
26565: GO 26371
26567: POP
26568: POP
// for i in tmp do
26569: LD_ADDR_VAR 0 5
26573: PUSH
26574: LD_VAR 0 7
26578: PUSH
26579: FOR_IN
26580: IFFALSE 26618
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
26582: LD_VAR 0 1
26586: PPUSH
26587: LD_VAR 0 5
26591: PUSH
26592: LD_INT 1
26594: ARRAY
26595: PPUSH
26596: LD_VAR 0 5
26600: PUSH
26601: LD_INT 2
26603: ARRAY
26604: PPUSH
26605: CALL 25564 0 3
26609: NOT
26610: IFFALSE 26616
// exit ;
26612: POP
26613: POP
26614: GO 26620
26616: GO 26579
26618: POP
26619: POP
// end ;
26620: LD_VAR 0 4
26624: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
26625: LD_INT 0
26627: PPUSH
26628: PPUSH
26629: PPUSH
26630: PPUSH
26631: PPUSH
26632: PPUSH
26633: PPUSH
26634: PPUSH
26635: PPUSH
// if GetClass ( unit ) <> class_sniper then
26636: LD_VAR 0 1
26640: PPUSH
26641: CALL_OW 257
26645: PUSH
26646: LD_INT 5
26648: NONEQUAL
26649: IFFALSE 26653
// exit ;
26651: GO 27119
// dist := 8 ;
26653: LD_ADDR_VAR 0 5
26657: PUSH
26658: LD_INT 8
26660: ST_TO_ADDR
// viewRange := 12 ;
26661: LD_ADDR_VAR 0 8
26665: PUSH
26666: LD_INT 12
26668: ST_TO_ADDR
// side := GetSide ( unit ) ;
26669: LD_ADDR_VAR 0 6
26673: PUSH
26674: LD_VAR 0 1
26678: PPUSH
26679: CALL_OW 255
26683: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
26684: LD_INT 61
26686: PPUSH
26687: LD_VAR 0 6
26691: PPUSH
26692: CALL_OW 321
26696: PUSH
26697: LD_INT 2
26699: EQUAL
26700: IFFALSE 26710
// viewRange := 16 ;
26702: LD_ADDR_VAR 0 8
26706: PUSH
26707: LD_INT 16
26709: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
26710: LD_VAR 0 1
26714: PPUSH
26715: LD_VAR 0 2
26719: PPUSH
26720: LD_VAR 0 3
26724: PPUSH
26725: CALL_OW 297
26729: PUSH
26730: LD_VAR 0 5
26734: GREATER
26735: IFFALSE 26814
// begin ComMoveXY ( unit , x , y ) ;
26737: LD_VAR 0 1
26741: PPUSH
26742: LD_VAR 0 2
26746: PPUSH
26747: LD_VAR 0 3
26751: PPUSH
26752: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26756: LD_INT 35
26758: PPUSH
26759: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
26763: LD_VAR 0 1
26767: PPUSH
26768: LD_VAR 0 2
26772: PPUSH
26773: LD_VAR 0 3
26777: PPUSH
26778: CALL 63653 0 3
26782: NOT
26783: IFFALSE 26787
// exit ;
26785: GO 27119
// until GetDistUnitXY ( unit , x , y ) < dist ;
26787: LD_VAR 0 1
26791: PPUSH
26792: LD_VAR 0 2
26796: PPUSH
26797: LD_VAR 0 3
26801: PPUSH
26802: CALL_OW 297
26806: PUSH
26807: LD_VAR 0 5
26811: LESS
26812: IFFALSE 26756
// end ; ComTurnXY ( unit , x , y ) ;
26814: LD_VAR 0 1
26818: PPUSH
26819: LD_VAR 0 2
26823: PPUSH
26824: LD_VAR 0 3
26828: PPUSH
26829: CALL_OW 118
// repeat if Multiplayer then
26833: LD_OWVAR 4
26837: IFFALSE 26848
// wait ( 35 ) else
26839: LD_INT 35
26841: PPUSH
26842: CALL_OW 67
26846: GO 26855
// wait ( 5 ) ;
26848: LD_INT 5
26850: PPUSH
26851: CALL_OW 67
// _d := GetDir ( unit ) ;
26855: LD_ADDR_VAR 0 11
26859: PUSH
26860: LD_VAR 0 1
26864: PPUSH
26865: CALL_OW 254
26869: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
26870: LD_ADDR_VAR 0 7
26874: PUSH
26875: LD_VAR 0 1
26879: PPUSH
26880: CALL_OW 250
26884: PPUSH
26885: LD_VAR 0 1
26889: PPUSH
26890: CALL_OW 251
26894: PPUSH
26895: LD_VAR 0 2
26899: PPUSH
26900: LD_VAR 0 3
26904: PPUSH
26905: CALL 66261 0 4
26909: ST_TO_ADDR
// until dir = _d ;
26910: LD_VAR 0 7
26914: PUSH
26915: LD_VAR 0 11
26919: EQUAL
26920: IFFALSE 26833
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
26922: LD_ADDR_VAR 0 9
26926: PUSH
26927: LD_VAR 0 1
26931: PPUSH
26932: CALL_OW 250
26936: PPUSH
26937: LD_VAR 0 7
26941: PPUSH
26942: LD_VAR 0 5
26946: PPUSH
26947: CALL_OW 272
26951: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
26952: LD_ADDR_VAR 0 10
26956: PUSH
26957: LD_VAR 0 1
26961: PPUSH
26962: CALL_OW 251
26966: PPUSH
26967: LD_VAR 0 7
26971: PPUSH
26972: LD_VAR 0 5
26976: PPUSH
26977: CALL_OW 273
26981: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26982: LD_VAR 0 9
26986: PPUSH
26987: LD_VAR 0 10
26991: PPUSH
26992: CALL_OW 488
26996: NOT
26997: IFFALSE 27001
// exit ;
26999: GO 27119
// ComAnimCustom ( unit , 1 ) ;
27001: LD_VAR 0 1
27005: PPUSH
27006: LD_INT 1
27008: PPUSH
27009: CALL_OW 592
// p := 0 ;
27013: LD_ADDR_VAR 0 12
27017: PUSH
27018: LD_INT 0
27020: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
27021: LD_VAR 0 9
27025: PPUSH
27026: LD_VAR 0 10
27030: PPUSH
27031: LD_VAR 0 6
27035: PPUSH
27036: LD_VAR 0 8
27040: PPUSH
27041: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
27045: LD_INT 35
27047: PPUSH
27048: CALL_OW 67
// p := Inc ( p ) ;
27052: LD_ADDR_VAR 0 12
27056: PUSH
27057: LD_VAR 0 12
27061: PPUSH
27062: CALL 66217 0 1
27066: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
27067: LD_VAR 0 12
27071: PUSH
27072: LD_INT 3
27074: EQUAL
27075: PUSH
27076: LD_VAR 0 1
27080: PPUSH
27081: CALL_OW 302
27085: NOT
27086: OR
27087: PUSH
27088: LD_VAR 0 1
27092: PPUSH
27093: CALL_OW 301
27097: OR
27098: IFFALSE 27045
// RemoveSeeing ( _x , _y , side ) ;
27100: LD_VAR 0 9
27104: PPUSH
27105: LD_VAR 0 10
27109: PPUSH
27110: LD_VAR 0 6
27114: PPUSH
27115: CALL_OW 331
// end ; end_of_file
27119: LD_VAR 0 4
27123: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
27124: LD_INT 0
27126: PPUSH
27127: PPUSH
// if exist_mode then
27128: LD_VAR 0 2
27132: IFFALSE 27178
// begin unit := CreateCharacter ( prefix & ident ) ;
27134: LD_ADDR_VAR 0 5
27138: PUSH
27139: LD_VAR 0 3
27143: PUSH
27144: LD_VAR 0 1
27148: STR
27149: PPUSH
27150: CALL_OW 34
27154: ST_TO_ADDR
// if unit then
27155: LD_VAR 0 5
27159: IFFALSE 27176
// DeleteCharacters ( prefix & ident ) ;
27161: LD_VAR 0 3
27165: PUSH
27166: LD_VAR 0 1
27170: STR
27171: PPUSH
27172: CALL_OW 40
// end else
27176: GO 27193
// unit := NewCharacter ( ident ) ;
27178: LD_ADDR_VAR 0 5
27182: PUSH
27183: LD_VAR 0 1
27187: PPUSH
27188: CALL_OW 25
27192: ST_TO_ADDR
// result := unit ;
27193: LD_ADDR_VAR 0 4
27197: PUSH
27198: LD_VAR 0 5
27202: ST_TO_ADDR
// end ;
27203: LD_VAR 0 4
27207: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
27208: LD_INT 0
27210: PPUSH
27211: PPUSH
// if not side or not nation then
27212: LD_VAR 0 1
27216: NOT
27217: PUSH
27218: LD_VAR 0 2
27222: NOT
27223: OR
27224: IFFALSE 27228
// exit ;
27226: GO 27996
// case nation of nation_american :
27228: LD_VAR 0 2
27232: PUSH
27233: LD_INT 1
27235: DOUBLE
27236: EQUAL
27237: IFTRUE 27241
27239: GO 27455
27241: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
27242: LD_ADDR_VAR 0 4
27246: PUSH
27247: LD_INT 35
27249: PUSH
27250: LD_INT 45
27252: PUSH
27253: LD_INT 46
27255: PUSH
27256: LD_INT 47
27258: PUSH
27259: LD_INT 82
27261: PUSH
27262: LD_INT 83
27264: PUSH
27265: LD_INT 84
27267: PUSH
27268: LD_INT 85
27270: PUSH
27271: LD_INT 86
27273: PUSH
27274: LD_INT 1
27276: PUSH
27277: LD_INT 2
27279: PUSH
27280: LD_INT 6
27282: PUSH
27283: LD_INT 15
27285: PUSH
27286: LD_INT 16
27288: PUSH
27289: LD_INT 7
27291: PUSH
27292: LD_INT 12
27294: PUSH
27295: LD_INT 13
27297: PUSH
27298: LD_INT 10
27300: PUSH
27301: LD_INT 14
27303: PUSH
27304: LD_INT 20
27306: PUSH
27307: LD_INT 21
27309: PUSH
27310: LD_INT 22
27312: PUSH
27313: LD_INT 25
27315: PUSH
27316: LD_INT 32
27318: PUSH
27319: LD_INT 27
27321: PUSH
27322: LD_INT 36
27324: PUSH
27325: LD_INT 69
27327: PUSH
27328: LD_INT 39
27330: PUSH
27331: LD_INT 34
27333: PUSH
27334: LD_INT 40
27336: PUSH
27337: LD_INT 48
27339: PUSH
27340: LD_INT 49
27342: PUSH
27343: LD_INT 50
27345: PUSH
27346: LD_INT 51
27348: PUSH
27349: LD_INT 52
27351: PUSH
27352: LD_INT 53
27354: PUSH
27355: LD_INT 54
27357: PUSH
27358: LD_INT 55
27360: PUSH
27361: LD_INT 56
27363: PUSH
27364: LD_INT 57
27366: PUSH
27367: LD_INT 58
27369: PUSH
27370: LD_INT 59
27372: PUSH
27373: LD_INT 60
27375: PUSH
27376: LD_INT 61
27378: PUSH
27379: LD_INT 62
27381: PUSH
27382: LD_INT 80
27384: PUSH
27385: LD_INT 82
27387: PUSH
27388: LD_INT 83
27390: PUSH
27391: LD_INT 84
27393: PUSH
27394: LD_INT 85
27396: PUSH
27397: LD_INT 86
27399: PUSH
27400: EMPTY
27401: LIST
27402: LIST
27403: LIST
27404: LIST
27405: LIST
27406: LIST
27407: LIST
27408: LIST
27409: LIST
27410: LIST
27411: LIST
27412: LIST
27413: LIST
27414: LIST
27415: LIST
27416: LIST
27417: LIST
27418: LIST
27419: LIST
27420: LIST
27421: LIST
27422: LIST
27423: LIST
27424: LIST
27425: LIST
27426: LIST
27427: LIST
27428: LIST
27429: LIST
27430: LIST
27431: LIST
27432: LIST
27433: LIST
27434: LIST
27435: LIST
27436: LIST
27437: LIST
27438: LIST
27439: LIST
27440: LIST
27441: LIST
27442: LIST
27443: LIST
27444: LIST
27445: LIST
27446: LIST
27447: LIST
27448: LIST
27449: LIST
27450: LIST
27451: LIST
27452: ST_TO_ADDR
27453: GO 27920
27455: LD_INT 2
27457: DOUBLE
27458: EQUAL
27459: IFTRUE 27463
27461: GO 27689
27463: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
27464: LD_ADDR_VAR 0 4
27468: PUSH
27469: LD_INT 35
27471: PUSH
27472: LD_INT 45
27474: PUSH
27475: LD_INT 46
27477: PUSH
27478: LD_INT 47
27480: PUSH
27481: LD_INT 82
27483: PUSH
27484: LD_INT 83
27486: PUSH
27487: LD_INT 84
27489: PUSH
27490: LD_INT 85
27492: PUSH
27493: LD_INT 87
27495: PUSH
27496: LD_INT 70
27498: PUSH
27499: LD_INT 1
27501: PUSH
27502: LD_INT 11
27504: PUSH
27505: LD_INT 3
27507: PUSH
27508: LD_INT 4
27510: PUSH
27511: LD_INT 5
27513: PUSH
27514: LD_INT 6
27516: PUSH
27517: LD_INT 15
27519: PUSH
27520: LD_INT 18
27522: PUSH
27523: LD_INT 7
27525: PUSH
27526: LD_INT 17
27528: PUSH
27529: LD_INT 8
27531: PUSH
27532: LD_INT 20
27534: PUSH
27535: LD_INT 21
27537: PUSH
27538: LD_INT 22
27540: PUSH
27541: LD_INT 72
27543: PUSH
27544: LD_INT 26
27546: PUSH
27547: LD_INT 69
27549: PUSH
27550: LD_INT 39
27552: PUSH
27553: LD_INT 40
27555: PUSH
27556: LD_INT 41
27558: PUSH
27559: LD_INT 42
27561: PUSH
27562: LD_INT 43
27564: PUSH
27565: LD_INT 48
27567: PUSH
27568: LD_INT 49
27570: PUSH
27571: LD_INT 50
27573: PUSH
27574: LD_INT 51
27576: PUSH
27577: LD_INT 52
27579: PUSH
27580: LD_INT 53
27582: PUSH
27583: LD_INT 54
27585: PUSH
27586: LD_INT 55
27588: PUSH
27589: LD_INT 56
27591: PUSH
27592: LD_INT 60
27594: PUSH
27595: LD_INT 61
27597: PUSH
27598: LD_INT 62
27600: PUSH
27601: LD_INT 66
27603: PUSH
27604: LD_INT 67
27606: PUSH
27607: LD_INT 68
27609: PUSH
27610: LD_INT 81
27612: PUSH
27613: LD_INT 82
27615: PUSH
27616: LD_INT 83
27618: PUSH
27619: LD_INT 84
27621: PUSH
27622: LD_INT 85
27624: PUSH
27625: LD_INT 87
27627: PUSH
27628: LD_INT 88
27630: PUSH
27631: EMPTY
27632: LIST
27633: LIST
27634: LIST
27635: LIST
27636: LIST
27637: LIST
27638: LIST
27639: LIST
27640: LIST
27641: LIST
27642: LIST
27643: LIST
27644: LIST
27645: LIST
27646: LIST
27647: LIST
27648: LIST
27649: LIST
27650: LIST
27651: LIST
27652: LIST
27653: LIST
27654: LIST
27655: LIST
27656: LIST
27657: LIST
27658: LIST
27659: LIST
27660: LIST
27661: LIST
27662: LIST
27663: LIST
27664: LIST
27665: LIST
27666: LIST
27667: LIST
27668: LIST
27669: LIST
27670: LIST
27671: LIST
27672: LIST
27673: LIST
27674: LIST
27675: LIST
27676: LIST
27677: LIST
27678: LIST
27679: LIST
27680: LIST
27681: LIST
27682: LIST
27683: LIST
27684: LIST
27685: LIST
27686: ST_TO_ADDR
27687: GO 27920
27689: LD_INT 3
27691: DOUBLE
27692: EQUAL
27693: IFTRUE 27697
27695: GO 27919
27697: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
27698: LD_ADDR_VAR 0 4
27702: PUSH
27703: LD_INT 46
27705: PUSH
27706: LD_INT 47
27708: PUSH
27709: LD_INT 1
27711: PUSH
27712: LD_INT 2
27714: PUSH
27715: LD_INT 82
27717: PUSH
27718: LD_INT 83
27720: PUSH
27721: LD_INT 84
27723: PUSH
27724: LD_INT 85
27726: PUSH
27727: LD_INT 86
27729: PUSH
27730: LD_INT 11
27732: PUSH
27733: LD_INT 9
27735: PUSH
27736: LD_INT 20
27738: PUSH
27739: LD_INT 19
27741: PUSH
27742: LD_INT 21
27744: PUSH
27745: LD_INT 24
27747: PUSH
27748: LD_INT 22
27750: PUSH
27751: LD_INT 25
27753: PUSH
27754: LD_INT 28
27756: PUSH
27757: LD_INT 29
27759: PUSH
27760: LD_INT 30
27762: PUSH
27763: LD_INT 31
27765: PUSH
27766: LD_INT 37
27768: PUSH
27769: LD_INT 38
27771: PUSH
27772: LD_INT 32
27774: PUSH
27775: LD_INT 27
27777: PUSH
27778: LD_INT 33
27780: PUSH
27781: LD_INT 69
27783: PUSH
27784: LD_INT 39
27786: PUSH
27787: LD_INT 34
27789: PUSH
27790: LD_INT 40
27792: PUSH
27793: LD_INT 71
27795: PUSH
27796: LD_INT 23
27798: PUSH
27799: LD_INT 44
27801: PUSH
27802: LD_INT 48
27804: PUSH
27805: LD_INT 49
27807: PUSH
27808: LD_INT 50
27810: PUSH
27811: LD_INT 51
27813: PUSH
27814: LD_INT 52
27816: PUSH
27817: LD_INT 53
27819: PUSH
27820: LD_INT 54
27822: PUSH
27823: LD_INT 55
27825: PUSH
27826: LD_INT 56
27828: PUSH
27829: LD_INT 57
27831: PUSH
27832: LD_INT 58
27834: PUSH
27835: LD_INT 59
27837: PUSH
27838: LD_INT 63
27840: PUSH
27841: LD_INT 64
27843: PUSH
27844: LD_INT 65
27846: PUSH
27847: LD_INT 82
27849: PUSH
27850: LD_INT 83
27852: PUSH
27853: LD_INT 84
27855: PUSH
27856: LD_INT 85
27858: PUSH
27859: LD_INT 86
27861: PUSH
27862: EMPTY
27863: LIST
27864: LIST
27865: LIST
27866: LIST
27867: LIST
27868: LIST
27869: LIST
27870: LIST
27871: LIST
27872: LIST
27873: LIST
27874: LIST
27875: LIST
27876: LIST
27877: LIST
27878: LIST
27879: LIST
27880: LIST
27881: LIST
27882: LIST
27883: LIST
27884: LIST
27885: LIST
27886: LIST
27887: LIST
27888: LIST
27889: LIST
27890: LIST
27891: LIST
27892: LIST
27893: LIST
27894: LIST
27895: LIST
27896: LIST
27897: LIST
27898: LIST
27899: LIST
27900: LIST
27901: LIST
27902: LIST
27903: LIST
27904: LIST
27905: LIST
27906: LIST
27907: LIST
27908: LIST
27909: LIST
27910: LIST
27911: LIST
27912: LIST
27913: LIST
27914: LIST
27915: LIST
27916: ST_TO_ADDR
27917: GO 27920
27919: POP
// if state > - 1 and state < 3 then
27920: LD_VAR 0 3
27924: PUSH
27925: LD_INT 1
27927: NEG
27928: GREATER
27929: PUSH
27930: LD_VAR 0 3
27934: PUSH
27935: LD_INT 3
27937: LESS
27938: AND
27939: IFFALSE 27996
// for i in result do
27941: LD_ADDR_VAR 0 5
27945: PUSH
27946: LD_VAR 0 4
27950: PUSH
27951: FOR_IN
27952: IFFALSE 27994
// if GetTech ( i , side ) <> state then
27954: LD_VAR 0 5
27958: PPUSH
27959: LD_VAR 0 1
27963: PPUSH
27964: CALL_OW 321
27968: PUSH
27969: LD_VAR 0 3
27973: NONEQUAL
27974: IFFALSE 27992
// result := result diff i ;
27976: LD_ADDR_VAR 0 4
27980: PUSH
27981: LD_VAR 0 4
27985: PUSH
27986: LD_VAR 0 5
27990: DIFF
27991: ST_TO_ADDR
27992: GO 27951
27994: POP
27995: POP
// end ;
27996: LD_VAR 0 4
28000: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
28001: LD_INT 0
28003: PPUSH
28004: PPUSH
28005: PPUSH
// result := true ;
28006: LD_ADDR_VAR 0 3
28010: PUSH
28011: LD_INT 1
28013: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
28014: LD_ADDR_VAR 0 5
28018: PUSH
28019: LD_VAR 0 2
28023: PPUSH
28024: CALL_OW 480
28028: ST_TO_ADDR
// if not tmp then
28029: LD_VAR 0 5
28033: NOT
28034: IFFALSE 28038
// exit ;
28036: GO 28087
// for i in tmp do
28038: LD_ADDR_VAR 0 4
28042: PUSH
28043: LD_VAR 0 5
28047: PUSH
28048: FOR_IN
28049: IFFALSE 28085
// if GetTech ( i , side ) <> state_researched then
28051: LD_VAR 0 4
28055: PPUSH
28056: LD_VAR 0 1
28060: PPUSH
28061: CALL_OW 321
28065: PUSH
28066: LD_INT 2
28068: NONEQUAL
28069: IFFALSE 28083
// begin result := false ;
28071: LD_ADDR_VAR 0 3
28075: PUSH
28076: LD_INT 0
28078: ST_TO_ADDR
// exit ;
28079: POP
28080: POP
28081: GO 28087
// end ;
28083: GO 28048
28085: POP
28086: POP
// end ;
28087: LD_VAR 0 3
28091: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
28092: LD_INT 0
28094: PPUSH
28095: PPUSH
28096: PPUSH
28097: PPUSH
28098: PPUSH
28099: PPUSH
28100: PPUSH
28101: PPUSH
28102: PPUSH
28103: PPUSH
28104: PPUSH
28105: PPUSH
28106: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
28107: LD_VAR 0 1
28111: NOT
28112: PUSH
28113: LD_VAR 0 1
28117: PPUSH
28118: CALL_OW 257
28122: PUSH
28123: LD_INT 9
28125: NONEQUAL
28126: OR
28127: IFFALSE 28131
// exit ;
28129: GO 28704
// side := GetSide ( unit ) ;
28131: LD_ADDR_VAR 0 9
28135: PUSH
28136: LD_VAR 0 1
28140: PPUSH
28141: CALL_OW 255
28145: ST_TO_ADDR
// tech_space := tech_spacanom ;
28146: LD_ADDR_VAR 0 12
28150: PUSH
28151: LD_INT 29
28153: ST_TO_ADDR
// tech_time := tech_taurad ;
28154: LD_ADDR_VAR 0 13
28158: PUSH
28159: LD_INT 28
28161: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
28162: LD_ADDR_VAR 0 11
28166: PUSH
28167: LD_VAR 0 1
28171: PPUSH
28172: CALL_OW 310
28176: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
28177: LD_VAR 0 11
28181: PPUSH
28182: CALL_OW 247
28186: PUSH
28187: LD_INT 2
28189: EQUAL
28190: IFFALSE 28194
// exit ;
28192: GO 28704
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28194: LD_ADDR_VAR 0 8
28198: PUSH
28199: LD_INT 81
28201: PUSH
28202: LD_VAR 0 9
28206: PUSH
28207: EMPTY
28208: LIST
28209: LIST
28210: PUSH
28211: LD_INT 3
28213: PUSH
28214: LD_INT 21
28216: PUSH
28217: LD_INT 3
28219: PUSH
28220: EMPTY
28221: LIST
28222: LIST
28223: PUSH
28224: EMPTY
28225: LIST
28226: LIST
28227: PUSH
28228: EMPTY
28229: LIST
28230: LIST
28231: PPUSH
28232: CALL_OW 69
28236: ST_TO_ADDR
// if not tmp then
28237: LD_VAR 0 8
28241: NOT
28242: IFFALSE 28246
// exit ;
28244: GO 28704
// if in_unit then
28246: LD_VAR 0 11
28250: IFFALSE 28274
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
28252: LD_ADDR_VAR 0 10
28256: PUSH
28257: LD_VAR 0 8
28261: PPUSH
28262: LD_VAR 0 11
28266: PPUSH
28267: CALL_OW 74
28271: ST_TO_ADDR
28272: GO 28294
// enemy := NearestUnitToUnit ( tmp , unit ) ;
28274: LD_ADDR_VAR 0 10
28278: PUSH
28279: LD_VAR 0 8
28283: PPUSH
28284: LD_VAR 0 1
28288: PPUSH
28289: CALL_OW 74
28293: ST_TO_ADDR
// if not enemy then
28294: LD_VAR 0 10
28298: NOT
28299: IFFALSE 28303
// exit ;
28301: GO 28704
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
28303: LD_VAR 0 11
28307: PUSH
28308: LD_VAR 0 11
28312: PPUSH
28313: LD_VAR 0 10
28317: PPUSH
28318: CALL_OW 296
28322: PUSH
28323: LD_INT 13
28325: GREATER
28326: AND
28327: PUSH
28328: LD_VAR 0 1
28332: PPUSH
28333: LD_VAR 0 10
28337: PPUSH
28338: CALL_OW 296
28342: PUSH
28343: LD_INT 12
28345: GREATER
28346: OR
28347: IFFALSE 28351
// exit ;
28349: GO 28704
// missile := [ 1 ] ;
28351: LD_ADDR_VAR 0 14
28355: PUSH
28356: LD_INT 1
28358: PUSH
28359: EMPTY
28360: LIST
28361: ST_TO_ADDR
// if Researched ( side , tech_space ) then
28362: LD_VAR 0 9
28366: PPUSH
28367: LD_VAR 0 12
28371: PPUSH
28372: CALL_OW 325
28376: IFFALSE 28405
// missile := Replace ( missile , missile + 1 , 2 ) ;
28378: LD_ADDR_VAR 0 14
28382: PUSH
28383: LD_VAR 0 14
28387: PPUSH
28388: LD_VAR 0 14
28392: PUSH
28393: LD_INT 1
28395: PLUS
28396: PPUSH
28397: LD_INT 2
28399: PPUSH
28400: CALL_OW 1
28404: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
28405: LD_VAR 0 9
28409: PPUSH
28410: LD_VAR 0 13
28414: PPUSH
28415: CALL_OW 325
28419: PUSH
28420: LD_VAR 0 10
28424: PPUSH
28425: CALL_OW 255
28429: PPUSH
28430: LD_VAR 0 13
28434: PPUSH
28435: CALL_OW 325
28439: NOT
28440: AND
28441: IFFALSE 28470
// missile := Replace ( missile , missile + 1 , 3 ) ;
28443: LD_ADDR_VAR 0 14
28447: PUSH
28448: LD_VAR 0 14
28452: PPUSH
28453: LD_VAR 0 14
28457: PUSH
28458: LD_INT 1
28460: PLUS
28461: PPUSH
28462: LD_INT 3
28464: PPUSH
28465: CALL_OW 1
28469: ST_TO_ADDR
// if missile < 2 then
28470: LD_VAR 0 14
28474: PUSH
28475: LD_INT 2
28477: LESS
28478: IFFALSE 28482
// exit ;
28480: GO 28704
// x := GetX ( enemy ) ;
28482: LD_ADDR_VAR 0 4
28486: PUSH
28487: LD_VAR 0 10
28491: PPUSH
28492: CALL_OW 250
28496: ST_TO_ADDR
// y := GetY ( enemy ) ;
28497: LD_ADDR_VAR 0 5
28501: PUSH
28502: LD_VAR 0 10
28506: PPUSH
28507: CALL_OW 251
28511: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
28512: LD_ADDR_VAR 0 6
28516: PUSH
28517: LD_VAR 0 4
28521: PUSH
28522: LD_INT 1
28524: NEG
28525: PPUSH
28526: LD_INT 1
28528: PPUSH
28529: CALL_OW 12
28533: PLUS
28534: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
28535: LD_ADDR_VAR 0 7
28539: PUSH
28540: LD_VAR 0 5
28544: PUSH
28545: LD_INT 1
28547: NEG
28548: PPUSH
28549: LD_INT 1
28551: PPUSH
28552: CALL_OW 12
28556: PLUS
28557: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28558: LD_VAR 0 6
28562: PPUSH
28563: LD_VAR 0 7
28567: PPUSH
28568: CALL_OW 488
28572: NOT
28573: IFFALSE 28595
// begin _x := x ;
28575: LD_ADDR_VAR 0 6
28579: PUSH
28580: LD_VAR 0 4
28584: ST_TO_ADDR
// _y := y ;
28585: LD_ADDR_VAR 0 7
28589: PUSH
28590: LD_VAR 0 5
28594: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
28595: LD_ADDR_VAR 0 3
28599: PUSH
28600: LD_INT 1
28602: PPUSH
28603: LD_VAR 0 14
28607: PPUSH
28608: CALL_OW 12
28612: ST_TO_ADDR
// case i of 1 :
28613: LD_VAR 0 3
28617: PUSH
28618: LD_INT 1
28620: DOUBLE
28621: EQUAL
28622: IFTRUE 28626
28624: GO 28643
28626: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
28627: LD_VAR 0 1
28631: PPUSH
28632: LD_VAR 0 10
28636: PPUSH
28637: CALL_OW 115
28641: GO 28704
28643: LD_INT 2
28645: DOUBLE
28646: EQUAL
28647: IFTRUE 28651
28649: GO 28673
28651: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
28652: LD_VAR 0 1
28656: PPUSH
28657: LD_VAR 0 6
28661: PPUSH
28662: LD_VAR 0 7
28666: PPUSH
28667: CALL_OW 153
28671: GO 28704
28673: LD_INT 3
28675: DOUBLE
28676: EQUAL
28677: IFTRUE 28681
28679: GO 28703
28681: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
28682: LD_VAR 0 1
28686: PPUSH
28687: LD_VAR 0 6
28691: PPUSH
28692: LD_VAR 0 7
28696: PPUSH
28697: CALL_OW 154
28701: GO 28704
28703: POP
// end ;
28704: LD_VAR 0 2
28708: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
28709: LD_INT 0
28711: PPUSH
28712: PPUSH
28713: PPUSH
28714: PPUSH
28715: PPUSH
28716: PPUSH
// if not unit or not building then
28717: LD_VAR 0 1
28721: NOT
28722: PUSH
28723: LD_VAR 0 2
28727: NOT
28728: OR
28729: IFFALSE 28733
// exit ;
28731: GO 28891
// x := GetX ( building ) ;
28733: LD_ADDR_VAR 0 5
28737: PUSH
28738: LD_VAR 0 2
28742: PPUSH
28743: CALL_OW 250
28747: ST_TO_ADDR
// y := GetY ( building ) ;
28748: LD_ADDR_VAR 0 6
28752: PUSH
28753: LD_VAR 0 2
28757: PPUSH
28758: CALL_OW 251
28762: ST_TO_ADDR
// for i = 0 to 5 do
28763: LD_ADDR_VAR 0 4
28767: PUSH
28768: DOUBLE
28769: LD_INT 0
28771: DEC
28772: ST_TO_ADDR
28773: LD_INT 5
28775: PUSH
28776: FOR_TO
28777: IFFALSE 28889
// begin _x := ShiftX ( x , i , 3 ) ;
28779: LD_ADDR_VAR 0 7
28783: PUSH
28784: LD_VAR 0 5
28788: PPUSH
28789: LD_VAR 0 4
28793: PPUSH
28794: LD_INT 3
28796: PPUSH
28797: CALL_OW 272
28801: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
28802: LD_ADDR_VAR 0 8
28806: PUSH
28807: LD_VAR 0 6
28811: PPUSH
28812: LD_VAR 0 4
28816: PPUSH
28817: LD_INT 3
28819: PPUSH
28820: CALL_OW 273
28824: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28825: LD_VAR 0 7
28829: PPUSH
28830: LD_VAR 0 8
28834: PPUSH
28835: CALL_OW 488
28839: NOT
28840: IFFALSE 28844
// continue ;
28842: GO 28776
// if HexInfo ( _x , _y ) = 0 then
28844: LD_VAR 0 7
28848: PPUSH
28849: LD_VAR 0 8
28853: PPUSH
28854: CALL_OW 428
28858: PUSH
28859: LD_INT 0
28861: EQUAL
28862: IFFALSE 28887
// begin ComMoveXY ( unit , _x , _y ) ;
28864: LD_VAR 0 1
28868: PPUSH
28869: LD_VAR 0 7
28873: PPUSH
28874: LD_VAR 0 8
28878: PPUSH
28879: CALL_OW 111
// exit ;
28883: POP
28884: POP
28885: GO 28891
// end ; end ;
28887: GO 28776
28889: POP
28890: POP
// end ;
28891: LD_VAR 0 3
28895: RET
// export function ScanBase ( side , base_area ) ; begin
28896: LD_INT 0
28898: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
28899: LD_ADDR_VAR 0 3
28903: PUSH
28904: LD_VAR 0 2
28908: PPUSH
28909: LD_INT 81
28911: PUSH
28912: LD_VAR 0 1
28916: PUSH
28917: EMPTY
28918: LIST
28919: LIST
28920: PPUSH
28921: CALL_OW 70
28925: ST_TO_ADDR
// end ;
28926: LD_VAR 0 3
28930: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
28931: LD_INT 0
28933: PPUSH
28934: PPUSH
28935: PPUSH
28936: PPUSH
// result := false ;
28937: LD_ADDR_VAR 0 2
28941: PUSH
28942: LD_INT 0
28944: ST_TO_ADDR
// side := GetSide ( unit ) ;
28945: LD_ADDR_VAR 0 3
28949: PUSH
28950: LD_VAR 0 1
28954: PPUSH
28955: CALL_OW 255
28959: ST_TO_ADDR
// nat := GetNation ( unit ) ;
28960: LD_ADDR_VAR 0 4
28964: PUSH
28965: LD_VAR 0 1
28969: PPUSH
28970: CALL_OW 248
28974: ST_TO_ADDR
// case nat of 1 :
28975: LD_VAR 0 4
28979: PUSH
28980: LD_INT 1
28982: DOUBLE
28983: EQUAL
28984: IFTRUE 28988
28986: GO 28999
28988: POP
// tech := tech_lassight ; 2 :
28989: LD_ADDR_VAR 0 5
28993: PUSH
28994: LD_INT 12
28996: ST_TO_ADDR
28997: GO 29038
28999: LD_INT 2
29001: DOUBLE
29002: EQUAL
29003: IFTRUE 29007
29005: GO 29018
29007: POP
// tech := tech_mortar ; 3 :
29008: LD_ADDR_VAR 0 5
29012: PUSH
29013: LD_INT 41
29015: ST_TO_ADDR
29016: GO 29038
29018: LD_INT 3
29020: DOUBLE
29021: EQUAL
29022: IFTRUE 29026
29024: GO 29037
29026: POP
// tech := tech_bazooka ; end ;
29027: LD_ADDR_VAR 0 5
29031: PUSH
29032: LD_INT 44
29034: ST_TO_ADDR
29035: GO 29038
29037: POP
// if Researched ( side , tech ) then
29038: LD_VAR 0 3
29042: PPUSH
29043: LD_VAR 0 5
29047: PPUSH
29048: CALL_OW 325
29052: IFFALSE 29079
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
29054: LD_ADDR_VAR 0 2
29058: PUSH
29059: LD_INT 5
29061: PUSH
29062: LD_INT 8
29064: PUSH
29065: LD_INT 9
29067: PUSH
29068: EMPTY
29069: LIST
29070: LIST
29071: LIST
29072: PUSH
29073: LD_VAR 0 4
29077: ARRAY
29078: ST_TO_ADDR
// end ;
29079: LD_VAR 0 2
29083: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
29084: LD_INT 0
29086: PPUSH
29087: PPUSH
29088: PPUSH
// if not mines then
29089: LD_VAR 0 2
29093: NOT
29094: IFFALSE 29098
// exit ;
29096: GO 29242
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29098: LD_ADDR_VAR 0 5
29102: PUSH
29103: LD_INT 81
29105: PUSH
29106: LD_VAR 0 1
29110: PUSH
29111: EMPTY
29112: LIST
29113: LIST
29114: PUSH
29115: LD_INT 3
29117: PUSH
29118: LD_INT 21
29120: PUSH
29121: LD_INT 3
29123: PUSH
29124: EMPTY
29125: LIST
29126: LIST
29127: PUSH
29128: EMPTY
29129: LIST
29130: LIST
29131: PUSH
29132: EMPTY
29133: LIST
29134: LIST
29135: PPUSH
29136: CALL_OW 69
29140: ST_TO_ADDR
// for i in mines do
29141: LD_ADDR_VAR 0 4
29145: PUSH
29146: LD_VAR 0 2
29150: PUSH
29151: FOR_IN
29152: IFFALSE 29240
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
29154: LD_VAR 0 4
29158: PUSH
29159: LD_INT 1
29161: ARRAY
29162: PPUSH
29163: LD_VAR 0 4
29167: PUSH
29168: LD_INT 2
29170: ARRAY
29171: PPUSH
29172: CALL_OW 458
29176: NOT
29177: IFFALSE 29181
// continue ;
29179: GO 29151
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
29181: LD_VAR 0 4
29185: PUSH
29186: LD_INT 1
29188: ARRAY
29189: PPUSH
29190: LD_VAR 0 4
29194: PUSH
29195: LD_INT 2
29197: ARRAY
29198: PPUSH
29199: CALL_OW 428
29203: PUSH
29204: LD_VAR 0 5
29208: IN
29209: IFFALSE 29238
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
29211: LD_VAR 0 4
29215: PUSH
29216: LD_INT 1
29218: ARRAY
29219: PPUSH
29220: LD_VAR 0 4
29224: PUSH
29225: LD_INT 2
29227: ARRAY
29228: PPUSH
29229: LD_VAR 0 1
29233: PPUSH
29234: CALL_OW 456
// end ;
29238: GO 29151
29240: POP
29241: POP
// end ;
29242: LD_VAR 0 3
29246: RET
// export function Count ( array ) ; begin
29247: LD_INT 0
29249: PPUSH
// result := array + 0 ;
29250: LD_ADDR_VAR 0 2
29254: PUSH
29255: LD_VAR 0 1
29259: PUSH
29260: LD_INT 0
29262: PLUS
29263: ST_TO_ADDR
// end ;
29264: LD_VAR 0 2
29268: RET
// export function IsEmpty ( building ) ; begin
29269: LD_INT 0
29271: PPUSH
// if not building then
29272: LD_VAR 0 1
29276: NOT
29277: IFFALSE 29281
// exit ;
29279: GO 29324
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
29281: LD_ADDR_VAR 0 2
29285: PUSH
29286: LD_VAR 0 1
29290: PUSH
29291: LD_INT 22
29293: PUSH
29294: LD_VAR 0 1
29298: PPUSH
29299: CALL_OW 255
29303: PUSH
29304: EMPTY
29305: LIST
29306: LIST
29307: PUSH
29308: LD_INT 58
29310: PUSH
29311: EMPTY
29312: LIST
29313: PUSH
29314: EMPTY
29315: LIST
29316: LIST
29317: PPUSH
29318: CALL_OW 69
29322: IN
29323: ST_TO_ADDR
// end ;
29324: LD_VAR 0 2
29328: RET
// export function IsNotFull ( building ) ; var places ; begin
29329: LD_INT 0
29331: PPUSH
29332: PPUSH
// if not building then
29333: LD_VAR 0 1
29337: NOT
29338: IFFALSE 29342
// exit ;
29340: GO 29370
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
29342: LD_ADDR_VAR 0 2
29346: PUSH
29347: LD_VAR 0 1
29351: PPUSH
29352: LD_INT 3
29354: PUSH
29355: LD_INT 62
29357: PUSH
29358: EMPTY
29359: LIST
29360: PUSH
29361: EMPTY
29362: LIST
29363: LIST
29364: PPUSH
29365: CALL_OW 72
29369: ST_TO_ADDR
// end ;
29370: LD_VAR 0 2
29374: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
29375: LD_INT 0
29377: PPUSH
29378: PPUSH
29379: PPUSH
29380: PPUSH
// tmp := [ ] ;
29381: LD_ADDR_VAR 0 3
29385: PUSH
29386: EMPTY
29387: ST_TO_ADDR
// list := [ ] ;
29388: LD_ADDR_VAR 0 5
29392: PUSH
29393: EMPTY
29394: ST_TO_ADDR
// for i = 16 to 25 do
29395: LD_ADDR_VAR 0 4
29399: PUSH
29400: DOUBLE
29401: LD_INT 16
29403: DEC
29404: ST_TO_ADDR
29405: LD_INT 25
29407: PUSH
29408: FOR_TO
29409: IFFALSE 29482
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
29411: LD_ADDR_VAR 0 3
29415: PUSH
29416: LD_VAR 0 3
29420: PUSH
29421: LD_INT 22
29423: PUSH
29424: LD_VAR 0 1
29428: PPUSH
29429: CALL_OW 255
29433: PUSH
29434: EMPTY
29435: LIST
29436: LIST
29437: PUSH
29438: LD_INT 91
29440: PUSH
29441: LD_VAR 0 1
29445: PUSH
29446: LD_INT 6
29448: PUSH
29449: EMPTY
29450: LIST
29451: LIST
29452: LIST
29453: PUSH
29454: LD_INT 30
29456: PUSH
29457: LD_VAR 0 4
29461: PUSH
29462: EMPTY
29463: LIST
29464: LIST
29465: PUSH
29466: EMPTY
29467: LIST
29468: LIST
29469: LIST
29470: PUSH
29471: EMPTY
29472: LIST
29473: PPUSH
29474: CALL_OW 69
29478: ADD
29479: ST_TO_ADDR
29480: GO 29408
29482: POP
29483: POP
// for i = 1 to tmp do
29484: LD_ADDR_VAR 0 4
29488: PUSH
29489: DOUBLE
29490: LD_INT 1
29492: DEC
29493: ST_TO_ADDR
29494: LD_VAR 0 3
29498: PUSH
29499: FOR_TO
29500: IFFALSE 29588
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
29502: LD_ADDR_VAR 0 5
29506: PUSH
29507: LD_VAR 0 5
29511: PUSH
29512: LD_VAR 0 3
29516: PUSH
29517: LD_VAR 0 4
29521: ARRAY
29522: PPUSH
29523: CALL_OW 266
29527: PUSH
29528: LD_VAR 0 3
29532: PUSH
29533: LD_VAR 0 4
29537: ARRAY
29538: PPUSH
29539: CALL_OW 250
29543: PUSH
29544: LD_VAR 0 3
29548: PUSH
29549: LD_VAR 0 4
29553: ARRAY
29554: PPUSH
29555: CALL_OW 251
29559: PUSH
29560: LD_VAR 0 3
29564: PUSH
29565: LD_VAR 0 4
29569: ARRAY
29570: PPUSH
29571: CALL_OW 254
29575: PUSH
29576: EMPTY
29577: LIST
29578: LIST
29579: LIST
29580: LIST
29581: PUSH
29582: EMPTY
29583: LIST
29584: ADD
29585: ST_TO_ADDR
29586: GO 29499
29588: POP
29589: POP
// result := list ;
29590: LD_ADDR_VAR 0 2
29594: PUSH
29595: LD_VAR 0 5
29599: ST_TO_ADDR
// end ;
29600: LD_VAR 0 2
29604: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
29605: LD_INT 0
29607: PPUSH
29608: PPUSH
29609: PPUSH
29610: PPUSH
29611: PPUSH
29612: PPUSH
29613: PPUSH
// if not factory then
29614: LD_VAR 0 1
29618: NOT
29619: IFFALSE 29623
// exit ;
29621: GO 30216
// if control = control_apeman then
29623: LD_VAR 0 4
29627: PUSH
29628: LD_INT 5
29630: EQUAL
29631: IFFALSE 29740
// begin tmp := UnitsInside ( factory ) ;
29633: LD_ADDR_VAR 0 8
29637: PUSH
29638: LD_VAR 0 1
29642: PPUSH
29643: CALL_OW 313
29647: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
29648: LD_VAR 0 8
29652: PPUSH
29653: LD_INT 25
29655: PUSH
29656: LD_INT 12
29658: PUSH
29659: EMPTY
29660: LIST
29661: LIST
29662: PPUSH
29663: CALL_OW 72
29667: NOT
29668: IFFALSE 29678
// control := control_manual ;
29670: LD_ADDR_VAR 0 4
29674: PUSH
29675: LD_INT 1
29677: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
29678: LD_ADDR_VAR 0 8
29682: PUSH
29683: LD_VAR 0 1
29687: PPUSH
29688: CALL 29375 0 1
29692: ST_TO_ADDR
// if tmp then
29693: LD_VAR 0 8
29697: IFFALSE 29740
// begin for i in tmp do
29699: LD_ADDR_VAR 0 7
29703: PUSH
29704: LD_VAR 0 8
29708: PUSH
29709: FOR_IN
29710: IFFALSE 29738
// if i [ 1 ] = b_ext_radio then
29712: LD_VAR 0 7
29716: PUSH
29717: LD_INT 1
29719: ARRAY
29720: PUSH
29721: LD_INT 22
29723: EQUAL
29724: IFFALSE 29736
// begin control := control_remote ;
29726: LD_ADDR_VAR 0 4
29730: PUSH
29731: LD_INT 2
29733: ST_TO_ADDR
// break ;
29734: GO 29738
// end ;
29736: GO 29709
29738: POP
29739: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29740: LD_VAR 0 1
29744: PPUSH
29745: LD_VAR 0 2
29749: PPUSH
29750: LD_VAR 0 3
29754: PPUSH
29755: LD_VAR 0 4
29759: PPUSH
29760: LD_VAR 0 5
29764: PPUSH
29765: CALL_OW 448
29769: IFFALSE 29804
// begin result := [ chassis , engine , control , weapon ] ;
29771: LD_ADDR_VAR 0 6
29775: PUSH
29776: LD_VAR 0 2
29780: PUSH
29781: LD_VAR 0 3
29785: PUSH
29786: LD_VAR 0 4
29790: PUSH
29791: LD_VAR 0 5
29795: PUSH
29796: EMPTY
29797: LIST
29798: LIST
29799: LIST
29800: LIST
29801: ST_TO_ADDR
// exit ;
29802: GO 30216
// end ; _chassis := AvailableChassisList ( factory ) ;
29804: LD_ADDR_VAR 0 9
29808: PUSH
29809: LD_VAR 0 1
29813: PPUSH
29814: CALL_OW 475
29818: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
29819: LD_ADDR_VAR 0 11
29823: PUSH
29824: LD_VAR 0 1
29828: PPUSH
29829: CALL_OW 476
29833: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
29834: LD_ADDR_VAR 0 12
29838: PUSH
29839: LD_VAR 0 1
29843: PPUSH
29844: CALL_OW 477
29848: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
29849: LD_ADDR_VAR 0 10
29853: PUSH
29854: LD_VAR 0 1
29858: PPUSH
29859: CALL_OW 478
29863: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
29864: LD_VAR 0 9
29868: NOT
29869: PUSH
29870: LD_VAR 0 11
29874: NOT
29875: OR
29876: PUSH
29877: LD_VAR 0 12
29881: NOT
29882: OR
29883: PUSH
29884: LD_VAR 0 10
29888: NOT
29889: OR
29890: IFFALSE 29925
// begin result := [ chassis , engine , control , weapon ] ;
29892: LD_ADDR_VAR 0 6
29896: PUSH
29897: LD_VAR 0 2
29901: PUSH
29902: LD_VAR 0 3
29906: PUSH
29907: LD_VAR 0 4
29911: PUSH
29912: LD_VAR 0 5
29916: PUSH
29917: EMPTY
29918: LIST
29919: LIST
29920: LIST
29921: LIST
29922: ST_TO_ADDR
// exit ;
29923: GO 30216
// end ; if not chassis in _chassis then
29925: LD_VAR 0 2
29929: PUSH
29930: LD_VAR 0 9
29934: IN
29935: NOT
29936: IFFALSE 29962
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
29938: LD_ADDR_VAR 0 2
29942: PUSH
29943: LD_VAR 0 9
29947: PUSH
29948: LD_INT 1
29950: PPUSH
29951: LD_VAR 0 9
29955: PPUSH
29956: CALL_OW 12
29960: ARRAY
29961: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
29962: LD_VAR 0 2
29966: PPUSH
29967: LD_VAR 0 3
29971: PPUSH
29972: CALL 30221 0 2
29976: NOT
29977: IFFALSE 30036
// repeat engine := _engine [ 1 ] ;
29979: LD_ADDR_VAR 0 3
29983: PUSH
29984: LD_VAR 0 11
29988: PUSH
29989: LD_INT 1
29991: ARRAY
29992: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
29993: LD_ADDR_VAR 0 11
29997: PUSH
29998: LD_VAR 0 11
30002: PPUSH
30003: LD_INT 1
30005: PPUSH
30006: CALL_OW 3
30010: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
30011: LD_VAR 0 2
30015: PPUSH
30016: LD_VAR 0 3
30020: PPUSH
30021: CALL 30221 0 2
30025: PUSH
30026: LD_VAR 0 11
30030: PUSH
30031: EMPTY
30032: EQUAL
30033: OR
30034: IFFALSE 29979
// if not control in _control then
30036: LD_VAR 0 4
30040: PUSH
30041: LD_VAR 0 12
30045: IN
30046: NOT
30047: IFFALSE 30073
// control := _control [ rand ( 1 , _control ) ] ;
30049: LD_ADDR_VAR 0 4
30053: PUSH
30054: LD_VAR 0 12
30058: PUSH
30059: LD_INT 1
30061: PPUSH
30062: LD_VAR 0 12
30066: PPUSH
30067: CALL_OW 12
30071: ARRAY
30072: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
30073: LD_VAR 0 2
30077: PPUSH
30078: LD_VAR 0 5
30082: PPUSH
30083: CALL 30441 0 2
30087: NOT
30088: IFFALSE 30147
// repeat weapon := _weapon [ 1 ] ;
30090: LD_ADDR_VAR 0 5
30094: PUSH
30095: LD_VAR 0 10
30099: PUSH
30100: LD_INT 1
30102: ARRAY
30103: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
30104: LD_ADDR_VAR 0 10
30108: PUSH
30109: LD_VAR 0 10
30113: PPUSH
30114: LD_INT 1
30116: PPUSH
30117: CALL_OW 3
30121: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
30122: LD_VAR 0 2
30126: PPUSH
30127: LD_VAR 0 5
30131: PPUSH
30132: CALL 30441 0 2
30136: PUSH
30137: LD_VAR 0 10
30141: PUSH
30142: EMPTY
30143: EQUAL
30144: OR
30145: IFFALSE 30090
// result := [ ] ;
30147: LD_ADDR_VAR 0 6
30151: PUSH
30152: EMPTY
30153: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30154: LD_VAR 0 1
30158: PPUSH
30159: LD_VAR 0 2
30163: PPUSH
30164: LD_VAR 0 3
30168: PPUSH
30169: LD_VAR 0 4
30173: PPUSH
30174: LD_VAR 0 5
30178: PPUSH
30179: CALL_OW 448
30183: IFFALSE 30216
// result := [ chassis , engine , control , weapon ] ;
30185: LD_ADDR_VAR 0 6
30189: PUSH
30190: LD_VAR 0 2
30194: PUSH
30195: LD_VAR 0 3
30199: PUSH
30200: LD_VAR 0 4
30204: PUSH
30205: LD_VAR 0 5
30209: PUSH
30210: EMPTY
30211: LIST
30212: LIST
30213: LIST
30214: LIST
30215: ST_TO_ADDR
// end ;
30216: LD_VAR 0 6
30220: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
30221: LD_INT 0
30223: PPUSH
// if not chassis or not engine then
30224: LD_VAR 0 1
30228: NOT
30229: PUSH
30230: LD_VAR 0 2
30234: NOT
30235: OR
30236: IFFALSE 30240
// exit ;
30238: GO 30436
// case engine of engine_solar :
30240: LD_VAR 0 2
30244: PUSH
30245: LD_INT 2
30247: DOUBLE
30248: EQUAL
30249: IFTRUE 30253
30251: GO 30291
30253: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
30254: LD_ADDR_VAR 0 3
30258: PUSH
30259: LD_INT 11
30261: PUSH
30262: LD_INT 12
30264: PUSH
30265: LD_INT 13
30267: PUSH
30268: LD_INT 14
30270: PUSH
30271: LD_INT 1
30273: PUSH
30274: LD_INT 2
30276: PUSH
30277: LD_INT 3
30279: PUSH
30280: EMPTY
30281: LIST
30282: LIST
30283: LIST
30284: LIST
30285: LIST
30286: LIST
30287: LIST
30288: ST_TO_ADDR
30289: GO 30420
30291: LD_INT 1
30293: DOUBLE
30294: EQUAL
30295: IFTRUE 30299
30297: GO 30361
30299: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
30300: LD_ADDR_VAR 0 3
30304: PUSH
30305: LD_INT 11
30307: PUSH
30308: LD_INT 12
30310: PUSH
30311: LD_INT 13
30313: PUSH
30314: LD_INT 14
30316: PUSH
30317: LD_INT 1
30319: PUSH
30320: LD_INT 2
30322: PUSH
30323: LD_INT 3
30325: PUSH
30326: LD_INT 4
30328: PUSH
30329: LD_INT 5
30331: PUSH
30332: LD_INT 21
30334: PUSH
30335: LD_INT 23
30337: PUSH
30338: LD_INT 22
30340: PUSH
30341: LD_INT 24
30343: PUSH
30344: EMPTY
30345: LIST
30346: LIST
30347: LIST
30348: LIST
30349: LIST
30350: LIST
30351: LIST
30352: LIST
30353: LIST
30354: LIST
30355: LIST
30356: LIST
30357: LIST
30358: ST_TO_ADDR
30359: GO 30420
30361: LD_INT 3
30363: DOUBLE
30364: EQUAL
30365: IFTRUE 30369
30367: GO 30419
30369: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30370: LD_ADDR_VAR 0 3
30374: PUSH
30375: LD_INT 13
30377: PUSH
30378: LD_INT 14
30380: PUSH
30381: LD_INT 2
30383: PUSH
30384: LD_INT 3
30386: PUSH
30387: LD_INT 4
30389: PUSH
30390: LD_INT 5
30392: PUSH
30393: LD_INT 21
30395: PUSH
30396: LD_INT 22
30398: PUSH
30399: LD_INT 23
30401: PUSH
30402: LD_INT 24
30404: PUSH
30405: EMPTY
30406: LIST
30407: LIST
30408: LIST
30409: LIST
30410: LIST
30411: LIST
30412: LIST
30413: LIST
30414: LIST
30415: LIST
30416: ST_TO_ADDR
30417: GO 30420
30419: POP
// result := ( chassis in result ) ;
30420: LD_ADDR_VAR 0 3
30424: PUSH
30425: LD_VAR 0 1
30429: PUSH
30430: LD_VAR 0 3
30434: IN
30435: ST_TO_ADDR
// end ;
30436: LD_VAR 0 3
30440: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
30441: LD_INT 0
30443: PPUSH
// if not chassis or not weapon then
30444: LD_VAR 0 1
30448: NOT
30449: PUSH
30450: LD_VAR 0 2
30454: NOT
30455: OR
30456: IFFALSE 30460
// exit ;
30458: GO 31520
// case weapon of us_machine_gun :
30460: LD_VAR 0 2
30464: PUSH
30465: LD_INT 2
30467: DOUBLE
30468: EQUAL
30469: IFTRUE 30473
30471: GO 30503
30473: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
30474: LD_ADDR_VAR 0 3
30478: PUSH
30479: LD_INT 1
30481: PUSH
30482: LD_INT 2
30484: PUSH
30485: LD_INT 3
30487: PUSH
30488: LD_INT 4
30490: PUSH
30491: LD_INT 5
30493: PUSH
30494: EMPTY
30495: LIST
30496: LIST
30497: LIST
30498: LIST
30499: LIST
30500: ST_TO_ADDR
30501: GO 31504
30503: LD_INT 3
30505: DOUBLE
30506: EQUAL
30507: IFTRUE 30511
30509: GO 30541
30511: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
30512: LD_ADDR_VAR 0 3
30516: PUSH
30517: LD_INT 1
30519: PUSH
30520: LD_INT 2
30522: PUSH
30523: LD_INT 3
30525: PUSH
30526: LD_INT 4
30528: PUSH
30529: LD_INT 5
30531: PUSH
30532: EMPTY
30533: LIST
30534: LIST
30535: LIST
30536: LIST
30537: LIST
30538: ST_TO_ADDR
30539: GO 31504
30541: LD_INT 11
30543: DOUBLE
30544: EQUAL
30545: IFTRUE 30549
30547: GO 30579
30549: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
30550: LD_ADDR_VAR 0 3
30554: PUSH
30555: LD_INT 1
30557: PUSH
30558: LD_INT 2
30560: PUSH
30561: LD_INT 3
30563: PUSH
30564: LD_INT 4
30566: PUSH
30567: LD_INT 5
30569: PUSH
30570: EMPTY
30571: LIST
30572: LIST
30573: LIST
30574: LIST
30575: LIST
30576: ST_TO_ADDR
30577: GO 31504
30579: LD_INT 4
30581: DOUBLE
30582: EQUAL
30583: IFTRUE 30587
30585: GO 30613
30587: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
30588: LD_ADDR_VAR 0 3
30592: PUSH
30593: LD_INT 2
30595: PUSH
30596: LD_INT 3
30598: PUSH
30599: LD_INT 4
30601: PUSH
30602: LD_INT 5
30604: PUSH
30605: EMPTY
30606: LIST
30607: LIST
30608: LIST
30609: LIST
30610: ST_TO_ADDR
30611: GO 31504
30613: LD_INT 5
30615: DOUBLE
30616: EQUAL
30617: IFTRUE 30621
30619: GO 30647
30621: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
30622: LD_ADDR_VAR 0 3
30626: PUSH
30627: LD_INT 2
30629: PUSH
30630: LD_INT 3
30632: PUSH
30633: LD_INT 4
30635: PUSH
30636: LD_INT 5
30638: PUSH
30639: EMPTY
30640: LIST
30641: LIST
30642: LIST
30643: LIST
30644: ST_TO_ADDR
30645: GO 31504
30647: LD_INT 9
30649: DOUBLE
30650: EQUAL
30651: IFTRUE 30655
30653: GO 30681
30655: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
30656: LD_ADDR_VAR 0 3
30660: PUSH
30661: LD_INT 2
30663: PUSH
30664: LD_INT 3
30666: PUSH
30667: LD_INT 4
30669: PUSH
30670: LD_INT 5
30672: PUSH
30673: EMPTY
30674: LIST
30675: LIST
30676: LIST
30677: LIST
30678: ST_TO_ADDR
30679: GO 31504
30681: LD_INT 7
30683: DOUBLE
30684: EQUAL
30685: IFTRUE 30689
30687: GO 30715
30689: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
30690: LD_ADDR_VAR 0 3
30694: PUSH
30695: LD_INT 2
30697: PUSH
30698: LD_INT 3
30700: PUSH
30701: LD_INT 4
30703: PUSH
30704: LD_INT 5
30706: PUSH
30707: EMPTY
30708: LIST
30709: LIST
30710: LIST
30711: LIST
30712: ST_TO_ADDR
30713: GO 31504
30715: LD_INT 12
30717: DOUBLE
30718: EQUAL
30719: IFTRUE 30723
30721: GO 30749
30723: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
30724: LD_ADDR_VAR 0 3
30728: PUSH
30729: LD_INT 2
30731: PUSH
30732: LD_INT 3
30734: PUSH
30735: LD_INT 4
30737: PUSH
30738: LD_INT 5
30740: PUSH
30741: EMPTY
30742: LIST
30743: LIST
30744: LIST
30745: LIST
30746: ST_TO_ADDR
30747: GO 31504
30749: LD_INT 13
30751: DOUBLE
30752: EQUAL
30753: IFTRUE 30757
30755: GO 30783
30757: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
30758: LD_ADDR_VAR 0 3
30762: PUSH
30763: LD_INT 2
30765: PUSH
30766: LD_INT 3
30768: PUSH
30769: LD_INT 4
30771: PUSH
30772: LD_INT 5
30774: PUSH
30775: EMPTY
30776: LIST
30777: LIST
30778: LIST
30779: LIST
30780: ST_TO_ADDR
30781: GO 31504
30783: LD_INT 14
30785: DOUBLE
30786: EQUAL
30787: IFTRUE 30791
30789: GO 30809
30791: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
30792: LD_ADDR_VAR 0 3
30796: PUSH
30797: LD_INT 4
30799: PUSH
30800: LD_INT 5
30802: PUSH
30803: EMPTY
30804: LIST
30805: LIST
30806: ST_TO_ADDR
30807: GO 31504
30809: LD_INT 6
30811: DOUBLE
30812: EQUAL
30813: IFTRUE 30817
30815: GO 30835
30817: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
30818: LD_ADDR_VAR 0 3
30822: PUSH
30823: LD_INT 4
30825: PUSH
30826: LD_INT 5
30828: PUSH
30829: EMPTY
30830: LIST
30831: LIST
30832: ST_TO_ADDR
30833: GO 31504
30835: LD_INT 10
30837: DOUBLE
30838: EQUAL
30839: IFTRUE 30843
30841: GO 30861
30843: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
30844: LD_ADDR_VAR 0 3
30848: PUSH
30849: LD_INT 4
30851: PUSH
30852: LD_INT 5
30854: PUSH
30855: EMPTY
30856: LIST
30857: LIST
30858: ST_TO_ADDR
30859: GO 31504
30861: LD_INT 22
30863: DOUBLE
30864: EQUAL
30865: IFTRUE 30869
30867: GO 30895
30869: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
30870: LD_ADDR_VAR 0 3
30874: PUSH
30875: LD_INT 11
30877: PUSH
30878: LD_INT 12
30880: PUSH
30881: LD_INT 13
30883: PUSH
30884: LD_INT 14
30886: PUSH
30887: EMPTY
30888: LIST
30889: LIST
30890: LIST
30891: LIST
30892: ST_TO_ADDR
30893: GO 31504
30895: LD_INT 23
30897: DOUBLE
30898: EQUAL
30899: IFTRUE 30903
30901: GO 30929
30903: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
30904: LD_ADDR_VAR 0 3
30908: PUSH
30909: LD_INT 11
30911: PUSH
30912: LD_INT 12
30914: PUSH
30915: LD_INT 13
30917: PUSH
30918: LD_INT 14
30920: PUSH
30921: EMPTY
30922: LIST
30923: LIST
30924: LIST
30925: LIST
30926: ST_TO_ADDR
30927: GO 31504
30929: LD_INT 24
30931: DOUBLE
30932: EQUAL
30933: IFTRUE 30937
30935: GO 30963
30937: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
30938: LD_ADDR_VAR 0 3
30942: PUSH
30943: LD_INT 11
30945: PUSH
30946: LD_INT 12
30948: PUSH
30949: LD_INT 13
30951: PUSH
30952: LD_INT 14
30954: PUSH
30955: EMPTY
30956: LIST
30957: LIST
30958: LIST
30959: LIST
30960: ST_TO_ADDR
30961: GO 31504
30963: LD_INT 30
30965: DOUBLE
30966: EQUAL
30967: IFTRUE 30971
30969: GO 30997
30971: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
30972: LD_ADDR_VAR 0 3
30976: PUSH
30977: LD_INT 11
30979: PUSH
30980: LD_INT 12
30982: PUSH
30983: LD_INT 13
30985: PUSH
30986: LD_INT 14
30988: PUSH
30989: EMPTY
30990: LIST
30991: LIST
30992: LIST
30993: LIST
30994: ST_TO_ADDR
30995: GO 31504
30997: LD_INT 25
30999: DOUBLE
31000: EQUAL
31001: IFTRUE 31005
31003: GO 31023
31005: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
31006: LD_ADDR_VAR 0 3
31010: PUSH
31011: LD_INT 13
31013: PUSH
31014: LD_INT 14
31016: PUSH
31017: EMPTY
31018: LIST
31019: LIST
31020: ST_TO_ADDR
31021: GO 31504
31023: LD_INT 27
31025: DOUBLE
31026: EQUAL
31027: IFTRUE 31031
31029: GO 31049
31031: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
31032: LD_ADDR_VAR 0 3
31036: PUSH
31037: LD_INT 13
31039: PUSH
31040: LD_INT 14
31042: PUSH
31043: EMPTY
31044: LIST
31045: LIST
31046: ST_TO_ADDR
31047: GO 31504
31049: LD_INT 92
31051: DOUBLE
31052: EQUAL
31053: IFTRUE 31057
31055: GO 31083
31057: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
31058: LD_ADDR_VAR 0 3
31062: PUSH
31063: LD_INT 11
31065: PUSH
31066: LD_INT 12
31068: PUSH
31069: LD_INT 13
31071: PUSH
31072: LD_INT 14
31074: PUSH
31075: EMPTY
31076: LIST
31077: LIST
31078: LIST
31079: LIST
31080: ST_TO_ADDR
31081: GO 31504
31083: LD_INT 28
31085: DOUBLE
31086: EQUAL
31087: IFTRUE 31091
31089: GO 31109
31091: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
31092: LD_ADDR_VAR 0 3
31096: PUSH
31097: LD_INT 13
31099: PUSH
31100: LD_INT 14
31102: PUSH
31103: EMPTY
31104: LIST
31105: LIST
31106: ST_TO_ADDR
31107: GO 31504
31109: LD_INT 29
31111: DOUBLE
31112: EQUAL
31113: IFTRUE 31117
31115: GO 31135
31117: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
31118: LD_ADDR_VAR 0 3
31122: PUSH
31123: LD_INT 13
31125: PUSH
31126: LD_INT 14
31128: PUSH
31129: EMPTY
31130: LIST
31131: LIST
31132: ST_TO_ADDR
31133: GO 31504
31135: LD_INT 31
31137: DOUBLE
31138: EQUAL
31139: IFTRUE 31143
31141: GO 31161
31143: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
31144: LD_ADDR_VAR 0 3
31148: PUSH
31149: LD_INT 13
31151: PUSH
31152: LD_INT 14
31154: PUSH
31155: EMPTY
31156: LIST
31157: LIST
31158: ST_TO_ADDR
31159: GO 31504
31161: LD_INT 26
31163: DOUBLE
31164: EQUAL
31165: IFTRUE 31169
31167: GO 31187
31169: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
31170: LD_ADDR_VAR 0 3
31174: PUSH
31175: LD_INT 13
31177: PUSH
31178: LD_INT 14
31180: PUSH
31181: EMPTY
31182: LIST
31183: LIST
31184: ST_TO_ADDR
31185: GO 31504
31187: LD_INT 42
31189: DOUBLE
31190: EQUAL
31191: IFTRUE 31195
31193: GO 31221
31195: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
31196: LD_ADDR_VAR 0 3
31200: PUSH
31201: LD_INT 21
31203: PUSH
31204: LD_INT 22
31206: PUSH
31207: LD_INT 23
31209: PUSH
31210: LD_INT 24
31212: PUSH
31213: EMPTY
31214: LIST
31215: LIST
31216: LIST
31217: LIST
31218: ST_TO_ADDR
31219: GO 31504
31221: LD_INT 43
31223: DOUBLE
31224: EQUAL
31225: IFTRUE 31229
31227: GO 31255
31229: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
31230: LD_ADDR_VAR 0 3
31234: PUSH
31235: LD_INT 21
31237: PUSH
31238: LD_INT 22
31240: PUSH
31241: LD_INT 23
31243: PUSH
31244: LD_INT 24
31246: PUSH
31247: EMPTY
31248: LIST
31249: LIST
31250: LIST
31251: LIST
31252: ST_TO_ADDR
31253: GO 31504
31255: LD_INT 44
31257: DOUBLE
31258: EQUAL
31259: IFTRUE 31263
31261: GO 31289
31263: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
31264: LD_ADDR_VAR 0 3
31268: PUSH
31269: LD_INT 21
31271: PUSH
31272: LD_INT 22
31274: PUSH
31275: LD_INT 23
31277: PUSH
31278: LD_INT 24
31280: PUSH
31281: EMPTY
31282: LIST
31283: LIST
31284: LIST
31285: LIST
31286: ST_TO_ADDR
31287: GO 31504
31289: LD_INT 45
31291: DOUBLE
31292: EQUAL
31293: IFTRUE 31297
31295: GO 31323
31297: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
31298: LD_ADDR_VAR 0 3
31302: PUSH
31303: LD_INT 21
31305: PUSH
31306: LD_INT 22
31308: PUSH
31309: LD_INT 23
31311: PUSH
31312: LD_INT 24
31314: PUSH
31315: EMPTY
31316: LIST
31317: LIST
31318: LIST
31319: LIST
31320: ST_TO_ADDR
31321: GO 31504
31323: LD_INT 49
31325: DOUBLE
31326: EQUAL
31327: IFTRUE 31331
31329: GO 31357
31331: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
31332: LD_ADDR_VAR 0 3
31336: PUSH
31337: LD_INT 21
31339: PUSH
31340: LD_INT 22
31342: PUSH
31343: LD_INT 23
31345: PUSH
31346: LD_INT 24
31348: PUSH
31349: EMPTY
31350: LIST
31351: LIST
31352: LIST
31353: LIST
31354: ST_TO_ADDR
31355: GO 31504
31357: LD_INT 51
31359: DOUBLE
31360: EQUAL
31361: IFTRUE 31365
31363: GO 31391
31365: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
31366: LD_ADDR_VAR 0 3
31370: PUSH
31371: LD_INT 21
31373: PUSH
31374: LD_INT 22
31376: PUSH
31377: LD_INT 23
31379: PUSH
31380: LD_INT 24
31382: PUSH
31383: EMPTY
31384: LIST
31385: LIST
31386: LIST
31387: LIST
31388: ST_TO_ADDR
31389: GO 31504
31391: LD_INT 52
31393: DOUBLE
31394: EQUAL
31395: IFTRUE 31399
31397: GO 31425
31399: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
31400: LD_ADDR_VAR 0 3
31404: PUSH
31405: LD_INT 21
31407: PUSH
31408: LD_INT 22
31410: PUSH
31411: LD_INT 23
31413: PUSH
31414: LD_INT 24
31416: PUSH
31417: EMPTY
31418: LIST
31419: LIST
31420: LIST
31421: LIST
31422: ST_TO_ADDR
31423: GO 31504
31425: LD_INT 53
31427: DOUBLE
31428: EQUAL
31429: IFTRUE 31433
31431: GO 31451
31433: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
31434: LD_ADDR_VAR 0 3
31438: PUSH
31439: LD_INT 23
31441: PUSH
31442: LD_INT 24
31444: PUSH
31445: EMPTY
31446: LIST
31447: LIST
31448: ST_TO_ADDR
31449: GO 31504
31451: LD_INT 46
31453: DOUBLE
31454: EQUAL
31455: IFTRUE 31459
31457: GO 31477
31459: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
31460: LD_ADDR_VAR 0 3
31464: PUSH
31465: LD_INT 23
31467: PUSH
31468: LD_INT 24
31470: PUSH
31471: EMPTY
31472: LIST
31473: LIST
31474: ST_TO_ADDR
31475: GO 31504
31477: LD_INT 47
31479: DOUBLE
31480: EQUAL
31481: IFTRUE 31485
31483: GO 31503
31485: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31486: LD_ADDR_VAR 0 3
31490: PUSH
31491: LD_INT 23
31493: PUSH
31494: LD_INT 24
31496: PUSH
31497: EMPTY
31498: LIST
31499: LIST
31500: ST_TO_ADDR
31501: GO 31504
31503: POP
// result := ( chassis in result ) ;
31504: LD_ADDR_VAR 0 3
31508: PUSH
31509: LD_VAR 0 1
31513: PUSH
31514: LD_VAR 0 3
31518: IN
31519: ST_TO_ADDR
// end ;
31520: LD_VAR 0 3
31524: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
31525: LD_INT 0
31527: PPUSH
31528: PPUSH
31529: PPUSH
31530: PPUSH
31531: PPUSH
31532: PPUSH
31533: PPUSH
// result := array ;
31534: LD_ADDR_VAR 0 5
31538: PUSH
31539: LD_VAR 0 1
31543: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
31544: LD_VAR 0 1
31548: NOT
31549: PUSH
31550: LD_VAR 0 2
31554: NOT
31555: OR
31556: PUSH
31557: LD_VAR 0 3
31561: NOT
31562: OR
31563: PUSH
31564: LD_VAR 0 2
31568: PUSH
31569: LD_VAR 0 1
31573: GREATER
31574: OR
31575: PUSH
31576: LD_VAR 0 3
31580: PUSH
31581: LD_VAR 0 1
31585: GREATER
31586: OR
31587: IFFALSE 31591
// exit ;
31589: GO 31887
// if direction then
31591: LD_VAR 0 4
31595: IFFALSE 31659
// begin d := 1 ;
31597: LD_ADDR_VAR 0 9
31601: PUSH
31602: LD_INT 1
31604: ST_TO_ADDR
// if i_from > i_to then
31605: LD_VAR 0 2
31609: PUSH
31610: LD_VAR 0 3
31614: GREATER
31615: IFFALSE 31641
// length := ( array - i_from ) + i_to else
31617: LD_ADDR_VAR 0 11
31621: PUSH
31622: LD_VAR 0 1
31626: PUSH
31627: LD_VAR 0 2
31631: MINUS
31632: PUSH
31633: LD_VAR 0 3
31637: PLUS
31638: ST_TO_ADDR
31639: GO 31657
// length := i_to - i_from ;
31641: LD_ADDR_VAR 0 11
31645: PUSH
31646: LD_VAR 0 3
31650: PUSH
31651: LD_VAR 0 2
31655: MINUS
31656: ST_TO_ADDR
// end else
31657: GO 31720
// begin d := - 1 ;
31659: LD_ADDR_VAR 0 9
31663: PUSH
31664: LD_INT 1
31666: NEG
31667: ST_TO_ADDR
// if i_from > i_to then
31668: LD_VAR 0 2
31672: PUSH
31673: LD_VAR 0 3
31677: GREATER
31678: IFFALSE 31698
// length := i_from - i_to else
31680: LD_ADDR_VAR 0 11
31684: PUSH
31685: LD_VAR 0 2
31689: PUSH
31690: LD_VAR 0 3
31694: MINUS
31695: ST_TO_ADDR
31696: GO 31720
// length := ( array - i_to ) + i_from ;
31698: LD_ADDR_VAR 0 11
31702: PUSH
31703: LD_VAR 0 1
31707: PUSH
31708: LD_VAR 0 3
31712: MINUS
31713: PUSH
31714: LD_VAR 0 2
31718: PLUS
31719: ST_TO_ADDR
// end ; if not length then
31720: LD_VAR 0 11
31724: NOT
31725: IFFALSE 31729
// exit ;
31727: GO 31887
// tmp := array ;
31729: LD_ADDR_VAR 0 10
31733: PUSH
31734: LD_VAR 0 1
31738: ST_TO_ADDR
// for i = 1 to length do
31739: LD_ADDR_VAR 0 6
31743: PUSH
31744: DOUBLE
31745: LD_INT 1
31747: DEC
31748: ST_TO_ADDR
31749: LD_VAR 0 11
31753: PUSH
31754: FOR_TO
31755: IFFALSE 31875
// begin for j = 1 to array do
31757: LD_ADDR_VAR 0 7
31761: PUSH
31762: DOUBLE
31763: LD_INT 1
31765: DEC
31766: ST_TO_ADDR
31767: LD_VAR 0 1
31771: PUSH
31772: FOR_TO
31773: IFFALSE 31861
// begin k := j + d ;
31775: LD_ADDR_VAR 0 8
31779: PUSH
31780: LD_VAR 0 7
31784: PUSH
31785: LD_VAR 0 9
31789: PLUS
31790: ST_TO_ADDR
// if k > array then
31791: LD_VAR 0 8
31795: PUSH
31796: LD_VAR 0 1
31800: GREATER
31801: IFFALSE 31811
// k := 1 ;
31803: LD_ADDR_VAR 0 8
31807: PUSH
31808: LD_INT 1
31810: ST_TO_ADDR
// if not k then
31811: LD_VAR 0 8
31815: NOT
31816: IFFALSE 31828
// k := array ;
31818: LD_ADDR_VAR 0 8
31822: PUSH
31823: LD_VAR 0 1
31827: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
31828: LD_ADDR_VAR 0 10
31832: PUSH
31833: LD_VAR 0 10
31837: PPUSH
31838: LD_VAR 0 8
31842: PPUSH
31843: LD_VAR 0 1
31847: PUSH
31848: LD_VAR 0 7
31852: ARRAY
31853: PPUSH
31854: CALL_OW 1
31858: ST_TO_ADDR
// end ;
31859: GO 31772
31861: POP
31862: POP
// array := tmp ;
31863: LD_ADDR_VAR 0 1
31867: PUSH
31868: LD_VAR 0 10
31872: ST_TO_ADDR
// end ;
31873: GO 31754
31875: POP
31876: POP
// result := array ;
31877: LD_ADDR_VAR 0 5
31881: PUSH
31882: LD_VAR 0 1
31886: ST_TO_ADDR
// end ;
31887: LD_VAR 0 5
31891: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
31892: LD_INT 0
31894: PPUSH
31895: PPUSH
// result := 0 ;
31896: LD_ADDR_VAR 0 3
31900: PUSH
31901: LD_INT 0
31903: ST_TO_ADDR
// if not array or not value in array then
31904: LD_VAR 0 1
31908: NOT
31909: PUSH
31910: LD_VAR 0 2
31914: PUSH
31915: LD_VAR 0 1
31919: IN
31920: NOT
31921: OR
31922: IFFALSE 31926
// exit ;
31924: GO 31980
// for i = 1 to array do
31926: LD_ADDR_VAR 0 4
31930: PUSH
31931: DOUBLE
31932: LD_INT 1
31934: DEC
31935: ST_TO_ADDR
31936: LD_VAR 0 1
31940: PUSH
31941: FOR_TO
31942: IFFALSE 31978
// if value = array [ i ] then
31944: LD_VAR 0 2
31948: PUSH
31949: LD_VAR 0 1
31953: PUSH
31954: LD_VAR 0 4
31958: ARRAY
31959: EQUAL
31960: IFFALSE 31976
// begin result := i ;
31962: LD_ADDR_VAR 0 3
31966: PUSH
31967: LD_VAR 0 4
31971: ST_TO_ADDR
// exit ;
31972: POP
31973: POP
31974: GO 31980
// end ;
31976: GO 31941
31978: POP
31979: POP
// end ;
31980: LD_VAR 0 3
31984: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
31985: LD_INT 0
31987: PPUSH
// vc_chassis := chassis ;
31988: LD_ADDR_OWVAR 37
31992: PUSH
31993: LD_VAR 0 1
31997: ST_TO_ADDR
// vc_engine := engine ;
31998: LD_ADDR_OWVAR 39
32002: PUSH
32003: LD_VAR 0 2
32007: ST_TO_ADDR
// vc_control := control ;
32008: LD_ADDR_OWVAR 38
32012: PUSH
32013: LD_VAR 0 3
32017: ST_TO_ADDR
// vc_weapon := weapon ;
32018: LD_ADDR_OWVAR 40
32022: PUSH
32023: LD_VAR 0 4
32027: ST_TO_ADDR
// vc_fuel_battery := fuel ;
32028: LD_ADDR_OWVAR 41
32032: PUSH
32033: LD_VAR 0 5
32037: ST_TO_ADDR
// end ;
32038: LD_VAR 0 6
32042: RET
// export function WantPlant ( unit ) ; var task ; begin
32043: LD_INT 0
32045: PPUSH
32046: PPUSH
// result := false ;
32047: LD_ADDR_VAR 0 2
32051: PUSH
32052: LD_INT 0
32054: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
32055: LD_ADDR_VAR 0 3
32059: PUSH
32060: LD_VAR 0 1
32064: PPUSH
32065: CALL_OW 437
32069: ST_TO_ADDR
// if task then
32070: LD_VAR 0 3
32074: IFFALSE 32102
// if task [ 1 ] [ 1 ] = p then
32076: LD_VAR 0 3
32080: PUSH
32081: LD_INT 1
32083: ARRAY
32084: PUSH
32085: LD_INT 1
32087: ARRAY
32088: PUSH
32089: LD_STRING p
32091: EQUAL
32092: IFFALSE 32102
// result := true ;
32094: LD_ADDR_VAR 0 2
32098: PUSH
32099: LD_INT 1
32101: ST_TO_ADDR
// end ;
32102: LD_VAR 0 2
32106: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
32107: LD_INT 0
32109: PPUSH
32110: PPUSH
32111: PPUSH
32112: PPUSH
// if pos < 1 then
32113: LD_VAR 0 2
32117: PUSH
32118: LD_INT 1
32120: LESS
32121: IFFALSE 32125
// exit ;
32123: GO 32428
// if pos = 1 then
32125: LD_VAR 0 2
32129: PUSH
32130: LD_INT 1
32132: EQUAL
32133: IFFALSE 32166
// result := Replace ( arr , pos [ 1 ] , value ) else
32135: LD_ADDR_VAR 0 4
32139: PUSH
32140: LD_VAR 0 1
32144: PPUSH
32145: LD_VAR 0 2
32149: PUSH
32150: LD_INT 1
32152: ARRAY
32153: PPUSH
32154: LD_VAR 0 3
32158: PPUSH
32159: CALL_OW 1
32163: ST_TO_ADDR
32164: GO 32428
// begin tmp := arr ;
32166: LD_ADDR_VAR 0 6
32170: PUSH
32171: LD_VAR 0 1
32175: ST_TO_ADDR
// s_arr := [ tmp ] ;
32176: LD_ADDR_VAR 0 7
32180: PUSH
32181: LD_VAR 0 6
32185: PUSH
32186: EMPTY
32187: LIST
32188: ST_TO_ADDR
// for i = 1 to pos - 1 do
32189: LD_ADDR_VAR 0 5
32193: PUSH
32194: DOUBLE
32195: LD_INT 1
32197: DEC
32198: ST_TO_ADDR
32199: LD_VAR 0 2
32203: PUSH
32204: LD_INT 1
32206: MINUS
32207: PUSH
32208: FOR_TO
32209: IFFALSE 32254
// begin tmp := tmp [ pos [ i ] ] ;
32211: LD_ADDR_VAR 0 6
32215: PUSH
32216: LD_VAR 0 6
32220: PUSH
32221: LD_VAR 0 2
32225: PUSH
32226: LD_VAR 0 5
32230: ARRAY
32231: ARRAY
32232: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
32233: LD_ADDR_VAR 0 7
32237: PUSH
32238: LD_VAR 0 7
32242: PUSH
32243: LD_VAR 0 6
32247: PUSH
32248: EMPTY
32249: LIST
32250: ADD
32251: ST_TO_ADDR
// end ;
32252: GO 32208
32254: POP
32255: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
32256: LD_ADDR_VAR 0 6
32260: PUSH
32261: LD_VAR 0 6
32265: PPUSH
32266: LD_VAR 0 2
32270: PUSH
32271: LD_VAR 0 2
32275: ARRAY
32276: PPUSH
32277: LD_VAR 0 3
32281: PPUSH
32282: CALL_OW 1
32286: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
32287: LD_ADDR_VAR 0 7
32291: PUSH
32292: LD_VAR 0 7
32296: PPUSH
32297: LD_VAR 0 7
32301: PPUSH
32302: LD_VAR 0 6
32306: PPUSH
32307: CALL_OW 1
32311: ST_TO_ADDR
// for i = s_arr downto 2 do
32312: LD_ADDR_VAR 0 5
32316: PUSH
32317: DOUBLE
32318: LD_VAR 0 7
32322: INC
32323: ST_TO_ADDR
32324: LD_INT 2
32326: PUSH
32327: FOR_DOWNTO
32328: IFFALSE 32412
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
32330: LD_ADDR_VAR 0 6
32334: PUSH
32335: LD_VAR 0 7
32339: PUSH
32340: LD_VAR 0 5
32344: PUSH
32345: LD_INT 1
32347: MINUS
32348: ARRAY
32349: PPUSH
32350: LD_VAR 0 2
32354: PUSH
32355: LD_VAR 0 5
32359: PUSH
32360: LD_INT 1
32362: MINUS
32363: ARRAY
32364: PPUSH
32365: LD_VAR 0 7
32369: PUSH
32370: LD_VAR 0 5
32374: ARRAY
32375: PPUSH
32376: CALL_OW 1
32380: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
32381: LD_ADDR_VAR 0 7
32385: PUSH
32386: LD_VAR 0 7
32390: PPUSH
32391: LD_VAR 0 5
32395: PUSH
32396: LD_INT 1
32398: MINUS
32399: PPUSH
32400: LD_VAR 0 6
32404: PPUSH
32405: CALL_OW 1
32409: ST_TO_ADDR
// end ;
32410: GO 32327
32412: POP
32413: POP
// result := s_arr [ 1 ] ;
32414: LD_ADDR_VAR 0 4
32418: PUSH
32419: LD_VAR 0 7
32423: PUSH
32424: LD_INT 1
32426: ARRAY
32427: ST_TO_ADDR
// end ; end ;
32428: LD_VAR 0 4
32432: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
32433: LD_INT 0
32435: PPUSH
32436: PPUSH
// if not list then
32437: LD_VAR 0 1
32441: NOT
32442: IFFALSE 32446
// exit ;
32444: GO 32537
// i := list [ pos1 ] ;
32446: LD_ADDR_VAR 0 5
32450: PUSH
32451: LD_VAR 0 1
32455: PUSH
32456: LD_VAR 0 2
32460: ARRAY
32461: ST_TO_ADDR
// if not i then
32462: LD_VAR 0 5
32466: NOT
32467: IFFALSE 32471
// exit ;
32469: GO 32537
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
32471: LD_ADDR_VAR 0 1
32475: PUSH
32476: LD_VAR 0 1
32480: PPUSH
32481: LD_VAR 0 2
32485: PPUSH
32486: LD_VAR 0 1
32490: PUSH
32491: LD_VAR 0 3
32495: ARRAY
32496: PPUSH
32497: CALL_OW 1
32501: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
32502: LD_ADDR_VAR 0 1
32506: PUSH
32507: LD_VAR 0 1
32511: PPUSH
32512: LD_VAR 0 3
32516: PPUSH
32517: LD_VAR 0 5
32521: PPUSH
32522: CALL_OW 1
32526: ST_TO_ADDR
// result := list ;
32527: LD_ADDR_VAR 0 4
32531: PUSH
32532: LD_VAR 0 1
32536: ST_TO_ADDR
// end ;
32537: LD_VAR 0 4
32541: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
32542: LD_INT 0
32544: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
32545: LD_ADDR_VAR 0 5
32549: PUSH
32550: LD_VAR 0 1
32554: PPUSH
32555: CALL_OW 250
32559: PPUSH
32560: LD_VAR 0 1
32564: PPUSH
32565: CALL_OW 251
32569: PPUSH
32570: LD_VAR 0 2
32574: PPUSH
32575: LD_VAR 0 3
32579: PPUSH
32580: LD_VAR 0 4
32584: PPUSH
32585: CALL 32963 0 5
32589: ST_TO_ADDR
// end ;
32590: LD_VAR 0 5
32594: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
32595: LD_INT 0
32597: PPUSH
32598: PPUSH
32599: PPUSH
32600: PPUSH
// if not list or not unit then
32601: LD_VAR 0 2
32605: NOT
32606: PUSH
32607: LD_VAR 0 1
32611: NOT
32612: OR
32613: IFFALSE 32617
// exit ;
32615: GO 32958
// result := [ ] ;
32617: LD_ADDR_VAR 0 5
32621: PUSH
32622: EMPTY
32623: ST_TO_ADDR
// for i in list do
32624: LD_ADDR_VAR 0 6
32628: PUSH
32629: LD_VAR 0 2
32633: PUSH
32634: FOR_IN
32635: IFFALSE 32853
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
32637: LD_ADDR_VAR 0 8
32641: PUSH
32642: LD_VAR 0 1
32646: PPUSH
32647: LD_VAR 0 6
32651: PUSH
32652: LD_INT 1
32654: ARRAY
32655: PPUSH
32656: LD_VAR 0 6
32660: PUSH
32661: LD_INT 2
32663: ARRAY
32664: PPUSH
32665: CALL_OW 297
32669: ST_TO_ADDR
// if not Count ( result ) then
32670: LD_VAR 0 5
32674: PPUSH
32675: CALL 29247 0 1
32679: NOT
32680: IFFALSE 32713
// begin result := Join ( result , [ i , tmp ] ) ;
32682: LD_ADDR_VAR 0 5
32686: PUSH
32687: LD_VAR 0 5
32691: PPUSH
32692: LD_VAR 0 6
32696: PUSH
32697: LD_VAR 0 8
32701: PUSH
32702: EMPTY
32703: LIST
32704: LIST
32705: PPUSH
32706: CALL 64856 0 2
32710: ST_TO_ADDR
// continue ;
32711: GO 32634
// end ; if result [ result ] [ 2 ] <= tmp then
32713: LD_VAR 0 5
32717: PUSH
32718: LD_VAR 0 5
32722: ARRAY
32723: PUSH
32724: LD_INT 2
32726: ARRAY
32727: PUSH
32728: LD_VAR 0 8
32732: LESSEQUAL
32733: IFFALSE 32766
// result := Join ( result , [ i , tmp ] ) else
32735: LD_ADDR_VAR 0 5
32739: PUSH
32740: LD_VAR 0 5
32744: PPUSH
32745: LD_VAR 0 6
32749: PUSH
32750: LD_VAR 0 8
32754: PUSH
32755: EMPTY
32756: LIST
32757: LIST
32758: PPUSH
32759: CALL 64856 0 2
32763: ST_TO_ADDR
32764: GO 32851
// begin for j := 1 to Count ( result ) do
32766: LD_ADDR_VAR 0 7
32770: PUSH
32771: DOUBLE
32772: LD_INT 1
32774: DEC
32775: ST_TO_ADDR
32776: LD_VAR 0 5
32780: PPUSH
32781: CALL 29247 0 1
32785: PUSH
32786: FOR_TO
32787: IFFALSE 32849
// begin if tmp < result [ j ] [ 2 ] then
32789: LD_VAR 0 8
32793: PUSH
32794: LD_VAR 0 5
32798: PUSH
32799: LD_VAR 0 7
32803: ARRAY
32804: PUSH
32805: LD_INT 2
32807: ARRAY
32808: LESS
32809: IFFALSE 32847
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32811: LD_ADDR_VAR 0 5
32815: PUSH
32816: LD_VAR 0 5
32820: PPUSH
32821: LD_VAR 0 7
32825: PPUSH
32826: LD_VAR 0 6
32830: PUSH
32831: LD_VAR 0 8
32835: PUSH
32836: EMPTY
32837: LIST
32838: LIST
32839: PPUSH
32840: CALL_OW 2
32844: ST_TO_ADDR
// break ;
32845: GO 32849
// end ; end ;
32847: GO 32786
32849: POP
32850: POP
// end ; end ;
32851: GO 32634
32853: POP
32854: POP
// if result and not asc then
32855: LD_VAR 0 5
32859: PUSH
32860: LD_VAR 0 3
32864: NOT
32865: AND
32866: IFFALSE 32883
// result := ReverseArray ( result ) ;
32868: LD_ADDR_VAR 0 5
32872: PUSH
32873: LD_VAR 0 5
32877: PPUSH
32878: CALL 60123 0 1
32882: ST_TO_ADDR
// tmp := [ ] ;
32883: LD_ADDR_VAR 0 8
32887: PUSH
32888: EMPTY
32889: ST_TO_ADDR
// if mode then
32890: LD_VAR 0 4
32894: IFFALSE 32958
// begin for i := 1 to result do
32896: LD_ADDR_VAR 0 6
32900: PUSH
32901: DOUBLE
32902: LD_INT 1
32904: DEC
32905: ST_TO_ADDR
32906: LD_VAR 0 5
32910: PUSH
32911: FOR_TO
32912: IFFALSE 32946
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
32914: LD_ADDR_VAR 0 8
32918: PUSH
32919: LD_VAR 0 8
32923: PPUSH
32924: LD_VAR 0 5
32928: PUSH
32929: LD_VAR 0 6
32933: ARRAY
32934: PUSH
32935: LD_INT 1
32937: ARRAY
32938: PPUSH
32939: CALL 64856 0 2
32943: ST_TO_ADDR
32944: GO 32911
32946: POP
32947: POP
// result := tmp ;
32948: LD_ADDR_VAR 0 5
32952: PUSH
32953: LD_VAR 0 8
32957: ST_TO_ADDR
// end ; end ;
32958: LD_VAR 0 5
32962: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
32963: LD_INT 0
32965: PPUSH
32966: PPUSH
32967: PPUSH
32968: PPUSH
// if not list then
32969: LD_VAR 0 3
32973: NOT
32974: IFFALSE 32978
// exit ;
32976: GO 33366
// result := [ ] ;
32978: LD_ADDR_VAR 0 6
32982: PUSH
32983: EMPTY
32984: ST_TO_ADDR
// for i in list do
32985: LD_ADDR_VAR 0 7
32989: PUSH
32990: LD_VAR 0 3
32994: PUSH
32995: FOR_IN
32996: IFFALSE 33198
// begin tmp := GetDistUnitXY ( i , x , y ) ;
32998: LD_ADDR_VAR 0 9
33002: PUSH
33003: LD_VAR 0 7
33007: PPUSH
33008: LD_VAR 0 1
33012: PPUSH
33013: LD_VAR 0 2
33017: PPUSH
33018: CALL_OW 297
33022: ST_TO_ADDR
// if not result then
33023: LD_VAR 0 6
33027: NOT
33028: IFFALSE 33054
// result := [ [ i , tmp ] ] else
33030: LD_ADDR_VAR 0 6
33034: PUSH
33035: LD_VAR 0 7
33039: PUSH
33040: LD_VAR 0 9
33044: PUSH
33045: EMPTY
33046: LIST
33047: LIST
33048: PUSH
33049: EMPTY
33050: LIST
33051: ST_TO_ADDR
33052: GO 33196
// begin if result [ result ] [ 2 ] <= tmp then
33054: LD_VAR 0 6
33058: PUSH
33059: LD_VAR 0 6
33063: ARRAY
33064: PUSH
33065: LD_INT 2
33067: ARRAY
33068: PUSH
33069: LD_VAR 0 9
33073: LESSEQUAL
33074: IFFALSE 33116
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
33076: LD_ADDR_VAR 0 6
33080: PUSH
33081: LD_VAR 0 6
33085: PPUSH
33086: LD_VAR 0 6
33090: PUSH
33091: LD_INT 1
33093: PLUS
33094: PPUSH
33095: LD_VAR 0 7
33099: PUSH
33100: LD_VAR 0 9
33104: PUSH
33105: EMPTY
33106: LIST
33107: LIST
33108: PPUSH
33109: CALL_OW 2
33113: ST_TO_ADDR
33114: GO 33196
// for j := 1 to result do
33116: LD_ADDR_VAR 0 8
33120: PUSH
33121: DOUBLE
33122: LD_INT 1
33124: DEC
33125: ST_TO_ADDR
33126: LD_VAR 0 6
33130: PUSH
33131: FOR_TO
33132: IFFALSE 33194
// begin if tmp < result [ j ] [ 2 ] then
33134: LD_VAR 0 9
33138: PUSH
33139: LD_VAR 0 6
33143: PUSH
33144: LD_VAR 0 8
33148: ARRAY
33149: PUSH
33150: LD_INT 2
33152: ARRAY
33153: LESS
33154: IFFALSE 33192
// begin result := Insert ( result , j , [ i , tmp ] ) ;
33156: LD_ADDR_VAR 0 6
33160: PUSH
33161: LD_VAR 0 6
33165: PPUSH
33166: LD_VAR 0 8
33170: PPUSH
33171: LD_VAR 0 7
33175: PUSH
33176: LD_VAR 0 9
33180: PUSH
33181: EMPTY
33182: LIST
33183: LIST
33184: PPUSH
33185: CALL_OW 2
33189: ST_TO_ADDR
// break ;
33190: GO 33194
// end ; end ;
33192: GO 33131
33194: POP
33195: POP
// end ; end ;
33196: GO 32995
33198: POP
33199: POP
// if result and not asc then
33200: LD_VAR 0 6
33204: PUSH
33205: LD_VAR 0 4
33209: NOT
33210: AND
33211: IFFALSE 33286
// begin tmp := result ;
33213: LD_ADDR_VAR 0 9
33217: PUSH
33218: LD_VAR 0 6
33222: ST_TO_ADDR
// for i = tmp downto 1 do
33223: LD_ADDR_VAR 0 7
33227: PUSH
33228: DOUBLE
33229: LD_VAR 0 9
33233: INC
33234: ST_TO_ADDR
33235: LD_INT 1
33237: PUSH
33238: FOR_DOWNTO
33239: IFFALSE 33284
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
33241: LD_ADDR_VAR 0 6
33245: PUSH
33246: LD_VAR 0 6
33250: PPUSH
33251: LD_VAR 0 9
33255: PUSH
33256: LD_VAR 0 7
33260: MINUS
33261: PUSH
33262: LD_INT 1
33264: PLUS
33265: PPUSH
33266: LD_VAR 0 9
33270: PUSH
33271: LD_VAR 0 7
33275: ARRAY
33276: PPUSH
33277: CALL_OW 1
33281: ST_TO_ADDR
33282: GO 33238
33284: POP
33285: POP
// end ; tmp := [ ] ;
33286: LD_ADDR_VAR 0 9
33290: PUSH
33291: EMPTY
33292: ST_TO_ADDR
// if mode then
33293: LD_VAR 0 5
33297: IFFALSE 33366
// begin for i = 1 to result do
33299: LD_ADDR_VAR 0 7
33303: PUSH
33304: DOUBLE
33305: LD_INT 1
33307: DEC
33308: ST_TO_ADDR
33309: LD_VAR 0 6
33313: PUSH
33314: FOR_TO
33315: IFFALSE 33354
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
33317: LD_ADDR_VAR 0 9
33321: PUSH
33322: LD_VAR 0 9
33326: PPUSH
33327: LD_VAR 0 7
33331: PPUSH
33332: LD_VAR 0 6
33336: PUSH
33337: LD_VAR 0 7
33341: ARRAY
33342: PUSH
33343: LD_INT 1
33345: ARRAY
33346: PPUSH
33347: CALL_OW 1
33351: ST_TO_ADDR
33352: GO 33314
33354: POP
33355: POP
// result := tmp ;
33356: LD_ADDR_VAR 0 6
33360: PUSH
33361: LD_VAR 0 9
33365: ST_TO_ADDR
// end ; end ;
33366: LD_VAR 0 6
33370: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
33371: LD_INT 0
33373: PPUSH
33374: PPUSH
33375: PPUSH
33376: PPUSH
33377: PPUSH
33378: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
33379: LD_ADDR_VAR 0 5
33383: PUSH
33384: LD_INT 0
33386: PUSH
33387: LD_INT 0
33389: PUSH
33390: LD_INT 0
33392: PUSH
33393: EMPTY
33394: PUSH
33395: EMPTY
33396: LIST
33397: LIST
33398: LIST
33399: LIST
33400: ST_TO_ADDR
// if not x or not y then
33401: LD_VAR 0 2
33405: NOT
33406: PUSH
33407: LD_VAR 0 3
33411: NOT
33412: OR
33413: IFFALSE 33417
// exit ;
33415: GO 35067
// if not range then
33417: LD_VAR 0 4
33421: NOT
33422: IFFALSE 33432
// range := 10 ;
33424: LD_ADDR_VAR 0 4
33428: PUSH
33429: LD_INT 10
33431: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33432: LD_ADDR_VAR 0 8
33436: PUSH
33437: LD_INT 81
33439: PUSH
33440: LD_VAR 0 1
33444: PUSH
33445: EMPTY
33446: LIST
33447: LIST
33448: PUSH
33449: LD_INT 92
33451: PUSH
33452: LD_VAR 0 2
33456: PUSH
33457: LD_VAR 0 3
33461: PUSH
33462: LD_VAR 0 4
33466: PUSH
33467: EMPTY
33468: LIST
33469: LIST
33470: LIST
33471: LIST
33472: PUSH
33473: LD_INT 3
33475: PUSH
33476: LD_INT 21
33478: PUSH
33479: LD_INT 3
33481: PUSH
33482: EMPTY
33483: LIST
33484: LIST
33485: PUSH
33486: EMPTY
33487: LIST
33488: LIST
33489: PUSH
33490: EMPTY
33491: LIST
33492: LIST
33493: LIST
33494: PPUSH
33495: CALL_OW 69
33499: ST_TO_ADDR
// if not tmp then
33500: LD_VAR 0 8
33504: NOT
33505: IFFALSE 33509
// exit ;
33507: GO 35067
// for i in tmp do
33509: LD_ADDR_VAR 0 6
33513: PUSH
33514: LD_VAR 0 8
33518: PUSH
33519: FOR_IN
33520: IFFALSE 35042
// begin points := [ 0 , 0 , 0 ] ;
33522: LD_ADDR_VAR 0 9
33526: PUSH
33527: LD_INT 0
33529: PUSH
33530: LD_INT 0
33532: PUSH
33533: LD_INT 0
33535: PUSH
33536: EMPTY
33537: LIST
33538: LIST
33539: LIST
33540: ST_TO_ADDR
// bpoints := 1 ;
33541: LD_ADDR_VAR 0 10
33545: PUSH
33546: LD_INT 1
33548: ST_TO_ADDR
// case GetType ( i ) of unit_human :
33549: LD_VAR 0 6
33553: PPUSH
33554: CALL_OW 247
33558: PUSH
33559: LD_INT 1
33561: DOUBLE
33562: EQUAL
33563: IFTRUE 33567
33565: GO 34145
33567: POP
// begin if GetClass ( i ) = 1 then
33568: LD_VAR 0 6
33572: PPUSH
33573: CALL_OW 257
33577: PUSH
33578: LD_INT 1
33580: EQUAL
33581: IFFALSE 33602
// points := [ 10 , 5 , 3 ] ;
33583: LD_ADDR_VAR 0 9
33587: PUSH
33588: LD_INT 10
33590: PUSH
33591: LD_INT 5
33593: PUSH
33594: LD_INT 3
33596: PUSH
33597: EMPTY
33598: LIST
33599: LIST
33600: LIST
33601: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
33602: LD_VAR 0 6
33606: PPUSH
33607: CALL_OW 257
33611: PUSH
33612: LD_INT 2
33614: PUSH
33615: LD_INT 3
33617: PUSH
33618: LD_INT 4
33620: PUSH
33621: EMPTY
33622: LIST
33623: LIST
33624: LIST
33625: IN
33626: IFFALSE 33647
// points := [ 3 , 2 , 1 ] ;
33628: LD_ADDR_VAR 0 9
33632: PUSH
33633: LD_INT 3
33635: PUSH
33636: LD_INT 2
33638: PUSH
33639: LD_INT 1
33641: PUSH
33642: EMPTY
33643: LIST
33644: LIST
33645: LIST
33646: ST_TO_ADDR
// if GetClass ( i ) = 5 then
33647: LD_VAR 0 6
33651: PPUSH
33652: CALL_OW 257
33656: PUSH
33657: LD_INT 5
33659: EQUAL
33660: IFFALSE 33681
// points := [ 130 , 5 , 2 ] ;
33662: LD_ADDR_VAR 0 9
33666: PUSH
33667: LD_INT 130
33669: PUSH
33670: LD_INT 5
33672: PUSH
33673: LD_INT 2
33675: PUSH
33676: EMPTY
33677: LIST
33678: LIST
33679: LIST
33680: ST_TO_ADDR
// if GetClass ( i ) = 8 then
33681: LD_VAR 0 6
33685: PPUSH
33686: CALL_OW 257
33690: PUSH
33691: LD_INT 8
33693: EQUAL
33694: IFFALSE 33715
// points := [ 35 , 35 , 30 ] ;
33696: LD_ADDR_VAR 0 9
33700: PUSH
33701: LD_INT 35
33703: PUSH
33704: LD_INT 35
33706: PUSH
33707: LD_INT 30
33709: PUSH
33710: EMPTY
33711: LIST
33712: LIST
33713: LIST
33714: ST_TO_ADDR
// if GetClass ( i ) = 9 then
33715: LD_VAR 0 6
33719: PPUSH
33720: CALL_OW 257
33724: PUSH
33725: LD_INT 9
33727: EQUAL
33728: IFFALSE 33749
// points := [ 20 , 55 , 40 ] ;
33730: LD_ADDR_VAR 0 9
33734: PUSH
33735: LD_INT 20
33737: PUSH
33738: LD_INT 55
33740: PUSH
33741: LD_INT 40
33743: PUSH
33744: EMPTY
33745: LIST
33746: LIST
33747: LIST
33748: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
33749: LD_VAR 0 6
33753: PPUSH
33754: CALL_OW 257
33758: PUSH
33759: LD_INT 12
33761: PUSH
33762: LD_INT 16
33764: PUSH
33765: EMPTY
33766: LIST
33767: LIST
33768: IN
33769: IFFALSE 33790
// points := [ 5 , 3 , 2 ] ;
33771: LD_ADDR_VAR 0 9
33775: PUSH
33776: LD_INT 5
33778: PUSH
33779: LD_INT 3
33781: PUSH
33782: LD_INT 2
33784: PUSH
33785: EMPTY
33786: LIST
33787: LIST
33788: LIST
33789: ST_TO_ADDR
// if GetClass ( i ) = 17 then
33790: LD_VAR 0 6
33794: PPUSH
33795: CALL_OW 257
33799: PUSH
33800: LD_INT 17
33802: EQUAL
33803: IFFALSE 33824
// points := [ 100 , 50 , 75 ] ;
33805: LD_ADDR_VAR 0 9
33809: PUSH
33810: LD_INT 100
33812: PUSH
33813: LD_INT 50
33815: PUSH
33816: LD_INT 75
33818: PUSH
33819: EMPTY
33820: LIST
33821: LIST
33822: LIST
33823: ST_TO_ADDR
// if GetClass ( i ) = 15 then
33824: LD_VAR 0 6
33828: PPUSH
33829: CALL_OW 257
33833: PUSH
33834: LD_INT 15
33836: EQUAL
33837: IFFALSE 33858
// points := [ 10 , 5 , 3 ] ;
33839: LD_ADDR_VAR 0 9
33843: PUSH
33844: LD_INT 10
33846: PUSH
33847: LD_INT 5
33849: PUSH
33850: LD_INT 3
33852: PUSH
33853: EMPTY
33854: LIST
33855: LIST
33856: LIST
33857: ST_TO_ADDR
// if GetClass ( i ) = 14 then
33858: LD_VAR 0 6
33862: PPUSH
33863: CALL_OW 257
33867: PUSH
33868: LD_INT 14
33870: EQUAL
33871: IFFALSE 33892
// points := [ 10 , 0 , 0 ] ;
33873: LD_ADDR_VAR 0 9
33877: PUSH
33878: LD_INT 10
33880: PUSH
33881: LD_INT 0
33883: PUSH
33884: LD_INT 0
33886: PUSH
33887: EMPTY
33888: LIST
33889: LIST
33890: LIST
33891: ST_TO_ADDR
// if GetClass ( i ) = 11 then
33892: LD_VAR 0 6
33896: PPUSH
33897: CALL_OW 257
33901: PUSH
33902: LD_INT 11
33904: EQUAL
33905: IFFALSE 33926
// points := [ 30 , 10 , 5 ] ;
33907: LD_ADDR_VAR 0 9
33911: PUSH
33912: LD_INT 30
33914: PUSH
33915: LD_INT 10
33917: PUSH
33918: LD_INT 5
33920: PUSH
33921: EMPTY
33922: LIST
33923: LIST
33924: LIST
33925: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
33926: LD_VAR 0 1
33930: PPUSH
33931: LD_INT 5
33933: PPUSH
33934: CALL_OW 321
33938: PUSH
33939: LD_INT 2
33941: EQUAL
33942: IFFALSE 33959
// bpoints := bpoints * 1.8 ;
33944: LD_ADDR_VAR 0 10
33948: PUSH
33949: LD_VAR 0 10
33953: PUSH
33954: LD_REAL  1.80000000000000E+0000
33957: MUL
33958: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
33959: LD_VAR 0 6
33963: PPUSH
33964: CALL_OW 257
33968: PUSH
33969: LD_INT 1
33971: PUSH
33972: LD_INT 2
33974: PUSH
33975: LD_INT 3
33977: PUSH
33978: LD_INT 4
33980: PUSH
33981: EMPTY
33982: LIST
33983: LIST
33984: LIST
33985: LIST
33986: IN
33987: PUSH
33988: LD_VAR 0 1
33992: PPUSH
33993: LD_INT 51
33995: PPUSH
33996: CALL_OW 321
34000: PUSH
34001: LD_INT 2
34003: EQUAL
34004: AND
34005: IFFALSE 34022
// bpoints := bpoints * 1.2 ;
34007: LD_ADDR_VAR 0 10
34011: PUSH
34012: LD_VAR 0 10
34016: PUSH
34017: LD_REAL  1.20000000000000E+0000
34020: MUL
34021: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
34022: LD_VAR 0 6
34026: PPUSH
34027: CALL_OW 257
34031: PUSH
34032: LD_INT 5
34034: PUSH
34035: LD_INT 7
34037: PUSH
34038: LD_INT 9
34040: PUSH
34041: EMPTY
34042: LIST
34043: LIST
34044: LIST
34045: IN
34046: PUSH
34047: LD_VAR 0 1
34051: PPUSH
34052: LD_INT 52
34054: PPUSH
34055: CALL_OW 321
34059: PUSH
34060: LD_INT 2
34062: EQUAL
34063: AND
34064: IFFALSE 34081
// bpoints := bpoints * 1.5 ;
34066: LD_ADDR_VAR 0 10
34070: PUSH
34071: LD_VAR 0 10
34075: PUSH
34076: LD_REAL  1.50000000000000E+0000
34079: MUL
34080: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
34081: LD_VAR 0 1
34085: PPUSH
34086: LD_INT 66
34088: PPUSH
34089: CALL_OW 321
34093: PUSH
34094: LD_INT 2
34096: EQUAL
34097: IFFALSE 34114
// bpoints := bpoints * 1.1 ;
34099: LD_ADDR_VAR 0 10
34103: PUSH
34104: LD_VAR 0 10
34108: PUSH
34109: LD_REAL  1.10000000000000E+0000
34112: MUL
34113: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
34114: LD_ADDR_VAR 0 10
34118: PUSH
34119: LD_VAR 0 10
34123: PUSH
34124: LD_VAR 0 6
34128: PPUSH
34129: LD_INT 1
34131: PPUSH
34132: CALL_OW 259
34136: PUSH
34137: LD_REAL  1.15000000000000E+0000
34140: MUL
34141: MUL
34142: ST_TO_ADDR
// end ; unit_vehicle :
34143: GO 34971
34145: LD_INT 2
34147: DOUBLE
34148: EQUAL
34149: IFTRUE 34153
34151: GO 34959
34153: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
34154: LD_VAR 0 6
34158: PPUSH
34159: CALL_OW 264
34163: PUSH
34164: LD_INT 2
34166: PUSH
34167: LD_INT 42
34169: PUSH
34170: LD_INT 24
34172: PUSH
34173: EMPTY
34174: LIST
34175: LIST
34176: LIST
34177: IN
34178: IFFALSE 34199
// points := [ 25 , 5 , 3 ] ;
34180: LD_ADDR_VAR 0 9
34184: PUSH
34185: LD_INT 25
34187: PUSH
34188: LD_INT 5
34190: PUSH
34191: LD_INT 3
34193: PUSH
34194: EMPTY
34195: LIST
34196: LIST
34197: LIST
34198: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
34199: LD_VAR 0 6
34203: PPUSH
34204: CALL_OW 264
34208: PUSH
34209: LD_INT 4
34211: PUSH
34212: LD_INT 43
34214: PUSH
34215: LD_INT 25
34217: PUSH
34218: EMPTY
34219: LIST
34220: LIST
34221: LIST
34222: IN
34223: IFFALSE 34244
// points := [ 40 , 15 , 5 ] ;
34225: LD_ADDR_VAR 0 9
34229: PUSH
34230: LD_INT 40
34232: PUSH
34233: LD_INT 15
34235: PUSH
34236: LD_INT 5
34238: PUSH
34239: EMPTY
34240: LIST
34241: LIST
34242: LIST
34243: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
34244: LD_VAR 0 6
34248: PPUSH
34249: CALL_OW 264
34253: PUSH
34254: LD_INT 3
34256: PUSH
34257: LD_INT 23
34259: PUSH
34260: EMPTY
34261: LIST
34262: LIST
34263: IN
34264: IFFALSE 34285
// points := [ 7 , 25 , 8 ] ;
34266: LD_ADDR_VAR 0 9
34270: PUSH
34271: LD_INT 7
34273: PUSH
34274: LD_INT 25
34276: PUSH
34277: LD_INT 8
34279: PUSH
34280: EMPTY
34281: LIST
34282: LIST
34283: LIST
34284: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
34285: LD_VAR 0 6
34289: PPUSH
34290: CALL_OW 264
34294: PUSH
34295: LD_INT 5
34297: PUSH
34298: LD_INT 27
34300: PUSH
34301: LD_INT 44
34303: PUSH
34304: EMPTY
34305: LIST
34306: LIST
34307: LIST
34308: IN
34309: IFFALSE 34330
// points := [ 14 , 50 , 16 ] ;
34311: LD_ADDR_VAR 0 9
34315: PUSH
34316: LD_INT 14
34318: PUSH
34319: LD_INT 50
34321: PUSH
34322: LD_INT 16
34324: PUSH
34325: EMPTY
34326: LIST
34327: LIST
34328: LIST
34329: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
34330: LD_VAR 0 6
34334: PPUSH
34335: CALL_OW 264
34339: PUSH
34340: LD_INT 6
34342: PUSH
34343: LD_INT 46
34345: PUSH
34346: EMPTY
34347: LIST
34348: LIST
34349: IN
34350: IFFALSE 34371
// points := [ 32 , 120 , 70 ] ;
34352: LD_ADDR_VAR 0 9
34356: PUSH
34357: LD_INT 32
34359: PUSH
34360: LD_INT 120
34362: PUSH
34363: LD_INT 70
34365: PUSH
34366: EMPTY
34367: LIST
34368: LIST
34369: LIST
34370: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
34371: LD_VAR 0 6
34375: PPUSH
34376: CALL_OW 264
34380: PUSH
34381: LD_INT 7
34383: PUSH
34384: LD_INT 28
34386: PUSH
34387: LD_INT 45
34389: PUSH
34390: LD_INT 92
34392: PUSH
34393: EMPTY
34394: LIST
34395: LIST
34396: LIST
34397: LIST
34398: IN
34399: IFFALSE 34420
// points := [ 35 , 20 , 45 ] ;
34401: LD_ADDR_VAR 0 9
34405: PUSH
34406: LD_INT 35
34408: PUSH
34409: LD_INT 20
34411: PUSH
34412: LD_INT 45
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: LIST
34419: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
34420: LD_VAR 0 6
34424: PPUSH
34425: CALL_OW 264
34429: PUSH
34430: LD_INT 47
34432: PUSH
34433: EMPTY
34434: LIST
34435: IN
34436: IFFALSE 34457
// points := [ 67 , 45 , 75 ] ;
34438: LD_ADDR_VAR 0 9
34442: PUSH
34443: LD_INT 67
34445: PUSH
34446: LD_INT 45
34448: PUSH
34449: LD_INT 75
34451: PUSH
34452: EMPTY
34453: LIST
34454: LIST
34455: LIST
34456: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
34457: LD_VAR 0 6
34461: PPUSH
34462: CALL_OW 264
34466: PUSH
34467: LD_INT 26
34469: PUSH
34470: EMPTY
34471: LIST
34472: IN
34473: IFFALSE 34494
// points := [ 120 , 30 , 80 ] ;
34475: LD_ADDR_VAR 0 9
34479: PUSH
34480: LD_INT 120
34482: PUSH
34483: LD_INT 30
34485: PUSH
34486: LD_INT 80
34488: PUSH
34489: EMPTY
34490: LIST
34491: LIST
34492: LIST
34493: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
34494: LD_VAR 0 6
34498: PPUSH
34499: CALL_OW 264
34503: PUSH
34504: LD_INT 22
34506: PUSH
34507: EMPTY
34508: LIST
34509: IN
34510: IFFALSE 34531
// points := [ 40 , 1 , 1 ] ;
34512: LD_ADDR_VAR 0 9
34516: PUSH
34517: LD_INT 40
34519: PUSH
34520: LD_INT 1
34522: PUSH
34523: LD_INT 1
34525: PUSH
34526: EMPTY
34527: LIST
34528: LIST
34529: LIST
34530: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
34531: LD_VAR 0 6
34535: PPUSH
34536: CALL_OW 264
34540: PUSH
34541: LD_INT 29
34543: PUSH
34544: EMPTY
34545: LIST
34546: IN
34547: IFFALSE 34568
// points := [ 70 , 200 , 400 ] ;
34549: LD_ADDR_VAR 0 9
34553: PUSH
34554: LD_INT 70
34556: PUSH
34557: LD_INT 200
34559: PUSH
34560: LD_INT 400
34562: PUSH
34563: EMPTY
34564: LIST
34565: LIST
34566: LIST
34567: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
34568: LD_VAR 0 6
34572: PPUSH
34573: CALL_OW 264
34577: PUSH
34578: LD_INT 14
34580: PUSH
34581: LD_INT 53
34583: PUSH
34584: EMPTY
34585: LIST
34586: LIST
34587: IN
34588: IFFALSE 34609
// points := [ 40 , 10 , 20 ] ;
34590: LD_ADDR_VAR 0 9
34594: PUSH
34595: LD_INT 40
34597: PUSH
34598: LD_INT 10
34600: PUSH
34601: LD_INT 20
34603: PUSH
34604: EMPTY
34605: LIST
34606: LIST
34607: LIST
34608: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
34609: LD_VAR 0 6
34613: PPUSH
34614: CALL_OW 264
34618: PUSH
34619: LD_INT 9
34621: PUSH
34622: EMPTY
34623: LIST
34624: IN
34625: IFFALSE 34646
// points := [ 5 , 70 , 20 ] ;
34627: LD_ADDR_VAR 0 9
34631: PUSH
34632: LD_INT 5
34634: PUSH
34635: LD_INT 70
34637: PUSH
34638: LD_INT 20
34640: PUSH
34641: EMPTY
34642: LIST
34643: LIST
34644: LIST
34645: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
34646: LD_VAR 0 6
34650: PPUSH
34651: CALL_OW 264
34655: PUSH
34656: LD_INT 10
34658: PUSH
34659: EMPTY
34660: LIST
34661: IN
34662: IFFALSE 34683
// points := [ 35 , 110 , 70 ] ;
34664: LD_ADDR_VAR 0 9
34668: PUSH
34669: LD_INT 35
34671: PUSH
34672: LD_INT 110
34674: PUSH
34675: LD_INT 70
34677: PUSH
34678: EMPTY
34679: LIST
34680: LIST
34681: LIST
34682: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
34683: LD_VAR 0 6
34687: PPUSH
34688: CALL_OW 265
34692: PUSH
34693: LD_INT 25
34695: EQUAL
34696: IFFALSE 34717
// points := [ 80 , 65 , 100 ] ;
34698: LD_ADDR_VAR 0 9
34702: PUSH
34703: LD_INT 80
34705: PUSH
34706: LD_INT 65
34708: PUSH
34709: LD_INT 100
34711: PUSH
34712: EMPTY
34713: LIST
34714: LIST
34715: LIST
34716: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
34717: LD_VAR 0 6
34721: PPUSH
34722: CALL_OW 263
34726: PUSH
34727: LD_INT 1
34729: EQUAL
34730: IFFALSE 34765
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
34732: LD_ADDR_VAR 0 10
34736: PUSH
34737: LD_VAR 0 10
34741: PUSH
34742: LD_VAR 0 6
34746: PPUSH
34747: CALL_OW 311
34751: PPUSH
34752: LD_INT 3
34754: PPUSH
34755: CALL_OW 259
34759: PUSH
34760: LD_INT 4
34762: MUL
34763: MUL
34764: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
34765: LD_VAR 0 6
34769: PPUSH
34770: CALL_OW 263
34774: PUSH
34775: LD_INT 2
34777: EQUAL
34778: IFFALSE 34829
// begin j := IsControledBy ( i ) ;
34780: LD_ADDR_VAR 0 7
34784: PUSH
34785: LD_VAR 0 6
34789: PPUSH
34790: CALL_OW 312
34794: ST_TO_ADDR
// if j then
34795: LD_VAR 0 7
34799: IFFALSE 34829
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
34801: LD_ADDR_VAR 0 10
34805: PUSH
34806: LD_VAR 0 10
34810: PUSH
34811: LD_VAR 0 7
34815: PPUSH
34816: LD_INT 3
34818: PPUSH
34819: CALL_OW 259
34823: PUSH
34824: LD_INT 3
34826: MUL
34827: MUL
34828: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
34829: LD_VAR 0 6
34833: PPUSH
34834: CALL_OW 264
34838: PUSH
34839: LD_INT 5
34841: PUSH
34842: LD_INT 6
34844: PUSH
34845: LD_INT 46
34847: PUSH
34848: LD_INT 44
34850: PUSH
34851: LD_INT 47
34853: PUSH
34854: LD_INT 45
34856: PUSH
34857: LD_INT 28
34859: PUSH
34860: LD_INT 7
34862: PUSH
34863: LD_INT 27
34865: PUSH
34866: LD_INT 29
34868: PUSH
34869: EMPTY
34870: LIST
34871: LIST
34872: LIST
34873: LIST
34874: LIST
34875: LIST
34876: LIST
34877: LIST
34878: LIST
34879: LIST
34880: IN
34881: PUSH
34882: LD_VAR 0 1
34886: PPUSH
34887: LD_INT 52
34889: PPUSH
34890: CALL_OW 321
34894: PUSH
34895: LD_INT 2
34897: EQUAL
34898: AND
34899: IFFALSE 34916
// bpoints := bpoints * 1.2 ;
34901: LD_ADDR_VAR 0 10
34905: PUSH
34906: LD_VAR 0 10
34910: PUSH
34911: LD_REAL  1.20000000000000E+0000
34914: MUL
34915: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
34916: LD_VAR 0 6
34920: PPUSH
34921: CALL_OW 264
34925: PUSH
34926: LD_INT 6
34928: PUSH
34929: LD_INT 46
34931: PUSH
34932: LD_INT 47
34934: PUSH
34935: EMPTY
34936: LIST
34937: LIST
34938: LIST
34939: IN
34940: IFFALSE 34957
// bpoints := bpoints * 1.2 ;
34942: LD_ADDR_VAR 0 10
34946: PUSH
34947: LD_VAR 0 10
34951: PUSH
34952: LD_REAL  1.20000000000000E+0000
34955: MUL
34956: ST_TO_ADDR
// end ; unit_building :
34957: GO 34971
34959: LD_INT 3
34961: DOUBLE
34962: EQUAL
34963: IFTRUE 34967
34965: GO 34970
34967: POP
// ; end ;
34968: GO 34971
34970: POP
// for j = 1 to 3 do
34971: LD_ADDR_VAR 0 7
34975: PUSH
34976: DOUBLE
34977: LD_INT 1
34979: DEC
34980: ST_TO_ADDR
34981: LD_INT 3
34983: PUSH
34984: FOR_TO
34985: IFFALSE 35038
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
34987: LD_ADDR_VAR 0 5
34991: PUSH
34992: LD_VAR 0 5
34996: PPUSH
34997: LD_VAR 0 7
35001: PPUSH
35002: LD_VAR 0 5
35006: PUSH
35007: LD_VAR 0 7
35011: ARRAY
35012: PUSH
35013: LD_VAR 0 9
35017: PUSH
35018: LD_VAR 0 7
35022: ARRAY
35023: PUSH
35024: LD_VAR 0 10
35028: MUL
35029: PLUS
35030: PPUSH
35031: CALL_OW 1
35035: ST_TO_ADDR
35036: GO 34984
35038: POP
35039: POP
// end ;
35040: GO 33519
35042: POP
35043: POP
// result := Replace ( result , 4 , tmp ) ;
35044: LD_ADDR_VAR 0 5
35048: PUSH
35049: LD_VAR 0 5
35053: PPUSH
35054: LD_INT 4
35056: PPUSH
35057: LD_VAR 0 8
35061: PPUSH
35062: CALL_OW 1
35066: ST_TO_ADDR
// end ;
35067: LD_VAR 0 5
35071: RET
// export function DangerAtRange ( unit , range ) ; begin
35072: LD_INT 0
35074: PPUSH
// if not unit then
35075: LD_VAR 0 1
35079: NOT
35080: IFFALSE 35084
// exit ;
35082: GO 35129
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
35084: LD_ADDR_VAR 0 3
35088: PUSH
35089: LD_VAR 0 1
35093: PPUSH
35094: CALL_OW 255
35098: PPUSH
35099: LD_VAR 0 1
35103: PPUSH
35104: CALL_OW 250
35108: PPUSH
35109: LD_VAR 0 1
35113: PPUSH
35114: CALL_OW 251
35118: PPUSH
35119: LD_VAR 0 2
35123: PPUSH
35124: CALL 33371 0 4
35128: ST_TO_ADDR
// end ;
35129: LD_VAR 0 3
35133: RET
// export function DangerInArea ( side , area ) ; begin
35134: LD_INT 0
35136: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
35137: LD_ADDR_VAR 0 3
35141: PUSH
35142: LD_VAR 0 2
35146: PPUSH
35147: LD_INT 81
35149: PUSH
35150: LD_VAR 0 1
35154: PUSH
35155: EMPTY
35156: LIST
35157: LIST
35158: PPUSH
35159: CALL_OW 70
35163: ST_TO_ADDR
// end ;
35164: LD_VAR 0 3
35168: RET
// export function IsExtension ( b ) ; begin
35169: LD_INT 0
35171: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
35172: LD_ADDR_VAR 0 2
35176: PUSH
35177: LD_VAR 0 1
35181: PUSH
35182: LD_INT 23
35184: PUSH
35185: LD_INT 20
35187: PUSH
35188: LD_INT 22
35190: PUSH
35191: LD_INT 17
35193: PUSH
35194: LD_INT 24
35196: PUSH
35197: LD_INT 21
35199: PUSH
35200: LD_INT 19
35202: PUSH
35203: LD_INT 16
35205: PUSH
35206: LD_INT 25
35208: PUSH
35209: LD_INT 18
35211: PUSH
35212: EMPTY
35213: LIST
35214: LIST
35215: LIST
35216: LIST
35217: LIST
35218: LIST
35219: LIST
35220: LIST
35221: LIST
35222: LIST
35223: IN
35224: ST_TO_ADDR
// end ;
35225: LD_VAR 0 2
35229: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
35230: LD_INT 0
35232: PPUSH
35233: PPUSH
35234: PPUSH
// result := [ ] ;
35235: LD_ADDR_VAR 0 4
35239: PUSH
35240: EMPTY
35241: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
35242: LD_ADDR_VAR 0 5
35246: PUSH
35247: LD_VAR 0 2
35251: PPUSH
35252: LD_INT 21
35254: PUSH
35255: LD_INT 3
35257: PUSH
35258: EMPTY
35259: LIST
35260: LIST
35261: PPUSH
35262: CALL_OW 70
35266: ST_TO_ADDR
// if not tmp then
35267: LD_VAR 0 5
35271: NOT
35272: IFFALSE 35276
// exit ;
35274: GO 35340
// if checkLink then
35276: LD_VAR 0 3
35280: IFFALSE 35330
// begin for i in tmp do
35282: LD_ADDR_VAR 0 6
35286: PUSH
35287: LD_VAR 0 5
35291: PUSH
35292: FOR_IN
35293: IFFALSE 35328
// if GetBase ( i ) <> base then
35295: LD_VAR 0 6
35299: PPUSH
35300: CALL_OW 274
35304: PUSH
35305: LD_VAR 0 1
35309: NONEQUAL
35310: IFFALSE 35326
// ComLinkToBase ( base , i ) ;
35312: LD_VAR 0 1
35316: PPUSH
35317: LD_VAR 0 6
35321: PPUSH
35322: CALL_OW 169
35326: GO 35292
35328: POP
35329: POP
// end ; result := tmp ;
35330: LD_ADDR_VAR 0 4
35334: PUSH
35335: LD_VAR 0 5
35339: ST_TO_ADDR
// end ;
35340: LD_VAR 0 4
35344: RET
// export function ComComplete ( units , b ) ; var i ; begin
35345: LD_INT 0
35347: PPUSH
35348: PPUSH
// if not units then
35349: LD_VAR 0 1
35353: NOT
35354: IFFALSE 35358
// exit ;
35356: GO 35448
// for i in units do
35358: LD_ADDR_VAR 0 4
35362: PUSH
35363: LD_VAR 0 1
35367: PUSH
35368: FOR_IN
35369: IFFALSE 35446
// if BuildingStatus ( b ) = bs_build then
35371: LD_VAR 0 2
35375: PPUSH
35376: CALL_OW 461
35380: PUSH
35381: LD_INT 1
35383: EQUAL
35384: IFFALSE 35444
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
35386: LD_VAR 0 4
35390: PPUSH
35391: LD_STRING h
35393: PUSH
35394: LD_VAR 0 2
35398: PPUSH
35399: CALL_OW 250
35403: PUSH
35404: LD_VAR 0 2
35408: PPUSH
35409: CALL_OW 251
35413: PUSH
35414: LD_VAR 0 2
35418: PUSH
35419: LD_INT 0
35421: PUSH
35422: LD_INT 0
35424: PUSH
35425: LD_INT 0
35427: PUSH
35428: EMPTY
35429: LIST
35430: LIST
35431: LIST
35432: LIST
35433: LIST
35434: LIST
35435: LIST
35436: PUSH
35437: EMPTY
35438: LIST
35439: PPUSH
35440: CALL_OW 446
35444: GO 35368
35446: POP
35447: POP
// end ;
35448: LD_VAR 0 3
35452: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
35453: LD_INT 0
35455: PPUSH
35456: PPUSH
35457: PPUSH
35458: PPUSH
35459: PPUSH
35460: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
35461: LD_VAR 0 1
35465: NOT
35466: PUSH
35467: LD_VAR 0 1
35471: PPUSH
35472: CALL_OW 263
35476: PUSH
35477: LD_INT 2
35479: NONEQUAL
35480: OR
35481: IFFALSE 35485
// exit ;
35483: GO 35801
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
35485: LD_ADDR_VAR 0 6
35489: PUSH
35490: LD_INT 22
35492: PUSH
35493: LD_VAR 0 1
35497: PPUSH
35498: CALL_OW 255
35502: PUSH
35503: EMPTY
35504: LIST
35505: LIST
35506: PUSH
35507: LD_INT 2
35509: PUSH
35510: LD_INT 30
35512: PUSH
35513: LD_INT 36
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: PUSH
35520: LD_INT 34
35522: PUSH
35523: LD_INT 31
35525: PUSH
35526: EMPTY
35527: LIST
35528: LIST
35529: PUSH
35530: EMPTY
35531: LIST
35532: LIST
35533: LIST
35534: PUSH
35535: EMPTY
35536: LIST
35537: LIST
35538: PPUSH
35539: CALL_OW 69
35543: ST_TO_ADDR
// if not tmp then
35544: LD_VAR 0 6
35548: NOT
35549: IFFALSE 35553
// exit ;
35551: GO 35801
// result := [ ] ;
35553: LD_ADDR_VAR 0 2
35557: PUSH
35558: EMPTY
35559: ST_TO_ADDR
// for i in tmp do
35560: LD_ADDR_VAR 0 3
35564: PUSH
35565: LD_VAR 0 6
35569: PUSH
35570: FOR_IN
35571: IFFALSE 35642
// begin t := UnitsInside ( i ) ;
35573: LD_ADDR_VAR 0 4
35577: PUSH
35578: LD_VAR 0 3
35582: PPUSH
35583: CALL_OW 313
35587: ST_TO_ADDR
// if t then
35588: LD_VAR 0 4
35592: IFFALSE 35640
// for j in t do
35594: LD_ADDR_VAR 0 7
35598: PUSH
35599: LD_VAR 0 4
35603: PUSH
35604: FOR_IN
35605: IFFALSE 35638
// result := Replace ( result , result + 1 , j ) ;
35607: LD_ADDR_VAR 0 2
35611: PUSH
35612: LD_VAR 0 2
35616: PPUSH
35617: LD_VAR 0 2
35621: PUSH
35622: LD_INT 1
35624: PLUS
35625: PPUSH
35626: LD_VAR 0 7
35630: PPUSH
35631: CALL_OW 1
35635: ST_TO_ADDR
35636: GO 35604
35638: POP
35639: POP
// end ;
35640: GO 35570
35642: POP
35643: POP
// if not result then
35644: LD_VAR 0 2
35648: NOT
35649: IFFALSE 35653
// exit ;
35651: GO 35801
// mech := result [ 1 ] ;
35653: LD_ADDR_VAR 0 5
35657: PUSH
35658: LD_VAR 0 2
35662: PUSH
35663: LD_INT 1
35665: ARRAY
35666: ST_TO_ADDR
// if result > 1 then
35667: LD_VAR 0 2
35671: PUSH
35672: LD_INT 1
35674: GREATER
35675: IFFALSE 35787
// begin for i = 2 to result do
35677: LD_ADDR_VAR 0 3
35681: PUSH
35682: DOUBLE
35683: LD_INT 2
35685: DEC
35686: ST_TO_ADDR
35687: LD_VAR 0 2
35691: PUSH
35692: FOR_TO
35693: IFFALSE 35785
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
35695: LD_ADDR_VAR 0 4
35699: PUSH
35700: LD_VAR 0 2
35704: PUSH
35705: LD_VAR 0 3
35709: ARRAY
35710: PPUSH
35711: LD_INT 3
35713: PPUSH
35714: CALL_OW 259
35718: PUSH
35719: LD_VAR 0 2
35723: PUSH
35724: LD_VAR 0 3
35728: ARRAY
35729: PPUSH
35730: CALL_OW 432
35734: MINUS
35735: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
35736: LD_VAR 0 4
35740: PUSH
35741: LD_VAR 0 5
35745: PPUSH
35746: LD_INT 3
35748: PPUSH
35749: CALL_OW 259
35753: PUSH
35754: LD_VAR 0 5
35758: PPUSH
35759: CALL_OW 432
35763: MINUS
35764: GREATEREQUAL
35765: IFFALSE 35783
// mech := result [ i ] ;
35767: LD_ADDR_VAR 0 5
35771: PUSH
35772: LD_VAR 0 2
35776: PUSH
35777: LD_VAR 0 3
35781: ARRAY
35782: ST_TO_ADDR
// end ;
35783: GO 35692
35785: POP
35786: POP
// end ; ComLinkTo ( vehicle , mech ) ;
35787: LD_VAR 0 1
35791: PPUSH
35792: LD_VAR 0 5
35796: PPUSH
35797: CALL_OW 135
// end ;
35801: LD_VAR 0 2
35805: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
35806: LD_INT 0
35808: PPUSH
35809: PPUSH
35810: PPUSH
35811: PPUSH
35812: PPUSH
35813: PPUSH
35814: PPUSH
35815: PPUSH
35816: PPUSH
35817: PPUSH
35818: PPUSH
35819: PPUSH
35820: PPUSH
// result := [ ] ;
35821: LD_ADDR_VAR 0 7
35825: PUSH
35826: EMPTY
35827: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
35828: LD_VAR 0 1
35832: PPUSH
35833: CALL_OW 266
35837: PUSH
35838: LD_INT 0
35840: PUSH
35841: LD_INT 1
35843: PUSH
35844: EMPTY
35845: LIST
35846: LIST
35847: IN
35848: NOT
35849: IFFALSE 35853
// exit ;
35851: GO 37487
// if name then
35853: LD_VAR 0 3
35857: IFFALSE 35873
// SetBName ( base_dep , name ) ;
35859: LD_VAR 0 1
35863: PPUSH
35864: LD_VAR 0 3
35868: PPUSH
35869: CALL_OW 500
// base := GetBase ( base_dep ) ;
35873: LD_ADDR_VAR 0 15
35877: PUSH
35878: LD_VAR 0 1
35882: PPUSH
35883: CALL_OW 274
35887: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
35888: LD_ADDR_VAR 0 16
35892: PUSH
35893: LD_VAR 0 1
35897: PPUSH
35898: CALL_OW 255
35902: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
35903: LD_ADDR_VAR 0 17
35907: PUSH
35908: LD_VAR 0 1
35912: PPUSH
35913: CALL_OW 248
35917: ST_TO_ADDR
// if sources then
35918: LD_VAR 0 5
35922: IFFALSE 35969
// for i = 1 to 3 do
35924: LD_ADDR_VAR 0 8
35928: PUSH
35929: DOUBLE
35930: LD_INT 1
35932: DEC
35933: ST_TO_ADDR
35934: LD_INT 3
35936: PUSH
35937: FOR_TO
35938: IFFALSE 35967
// AddResourceType ( base , i , sources [ i ] ) ;
35940: LD_VAR 0 15
35944: PPUSH
35945: LD_VAR 0 8
35949: PPUSH
35950: LD_VAR 0 5
35954: PUSH
35955: LD_VAR 0 8
35959: ARRAY
35960: PPUSH
35961: CALL_OW 276
35965: GO 35937
35967: POP
35968: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
35969: LD_ADDR_VAR 0 18
35973: PUSH
35974: LD_VAR 0 15
35978: PPUSH
35979: LD_VAR 0 2
35983: PPUSH
35984: LD_INT 1
35986: PPUSH
35987: CALL 35230 0 3
35991: ST_TO_ADDR
// InitHc ;
35992: CALL_OW 19
// InitUc ;
35996: CALL_OW 18
// uc_side := side ;
36000: LD_ADDR_OWVAR 20
36004: PUSH
36005: LD_VAR 0 16
36009: ST_TO_ADDR
// uc_nation := nation ;
36010: LD_ADDR_OWVAR 21
36014: PUSH
36015: LD_VAR 0 17
36019: ST_TO_ADDR
// if buildings then
36020: LD_VAR 0 18
36024: IFFALSE 37346
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
36026: LD_ADDR_VAR 0 19
36030: PUSH
36031: LD_VAR 0 18
36035: PPUSH
36036: LD_INT 2
36038: PUSH
36039: LD_INT 30
36041: PUSH
36042: LD_INT 29
36044: PUSH
36045: EMPTY
36046: LIST
36047: LIST
36048: PUSH
36049: LD_INT 30
36051: PUSH
36052: LD_INT 30
36054: PUSH
36055: EMPTY
36056: LIST
36057: LIST
36058: PUSH
36059: EMPTY
36060: LIST
36061: LIST
36062: LIST
36063: PPUSH
36064: CALL_OW 72
36068: ST_TO_ADDR
// if tmp then
36069: LD_VAR 0 19
36073: IFFALSE 36121
// for i in tmp do
36075: LD_ADDR_VAR 0 8
36079: PUSH
36080: LD_VAR 0 19
36084: PUSH
36085: FOR_IN
36086: IFFALSE 36119
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
36088: LD_VAR 0 8
36092: PPUSH
36093: CALL_OW 250
36097: PPUSH
36098: LD_VAR 0 8
36102: PPUSH
36103: CALL_OW 251
36107: PPUSH
36108: LD_VAR 0 16
36112: PPUSH
36113: CALL_OW 441
36117: GO 36085
36119: POP
36120: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
36121: LD_VAR 0 18
36125: PPUSH
36126: LD_INT 2
36128: PUSH
36129: LD_INT 30
36131: PUSH
36132: LD_INT 32
36134: PUSH
36135: EMPTY
36136: LIST
36137: LIST
36138: PUSH
36139: LD_INT 30
36141: PUSH
36142: LD_INT 33
36144: PUSH
36145: EMPTY
36146: LIST
36147: LIST
36148: PUSH
36149: EMPTY
36150: LIST
36151: LIST
36152: LIST
36153: PPUSH
36154: CALL_OW 72
36158: IFFALSE 36246
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
36160: LD_ADDR_VAR 0 8
36164: PUSH
36165: LD_VAR 0 18
36169: PPUSH
36170: LD_INT 2
36172: PUSH
36173: LD_INT 30
36175: PUSH
36176: LD_INT 32
36178: PUSH
36179: EMPTY
36180: LIST
36181: LIST
36182: PUSH
36183: LD_INT 30
36185: PUSH
36186: LD_INT 33
36188: PUSH
36189: EMPTY
36190: LIST
36191: LIST
36192: PUSH
36193: EMPTY
36194: LIST
36195: LIST
36196: LIST
36197: PPUSH
36198: CALL_OW 72
36202: PUSH
36203: FOR_IN
36204: IFFALSE 36244
// begin if not GetBWeapon ( i ) then
36206: LD_VAR 0 8
36210: PPUSH
36211: CALL_OW 269
36215: NOT
36216: IFFALSE 36242
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
36218: LD_VAR 0 8
36222: PPUSH
36223: LD_VAR 0 8
36227: PPUSH
36228: LD_VAR 0 2
36232: PPUSH
36233: CALL 37492 0 2
36237: PPUSH
36238: CALL_OW 431
// end ;
36242: GO 36203
36244: POP
36245: POP
// end ; for i = 1 to personel do
36246: LD_ADDR_VAR 0 8
36250: PUSH
36251: DOUBLE
36252: LD_INT 1
36254: DEC
36255: ST_TO_ADDR
36256: LD_VAR 0 6
36260: PUSH
36261: FOR_TO
36262: IFFALSE 37326
// begin if i > 4 then
36264: LD_VAR 0 8
36268: PUSH
36269: LD_INT 4
36271: GREATER
36272: IFFALSE 36276
// break ;
36274: GO 37326
// case i of 1 :
36276: LD_VAR 0 8
36280: PUSH
36281: LD_INT 1
36283: DOUBLE
36284: EQUAL
36285: IFTRUE 36289
36287: GO 36369
36289: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
36290: LD_ADDR_VAR 0 12
36294: PUSH
36295: LD_VAR 0 18
36299: PPUSH
36300: LD_INT 22
36302: PUSH
36303: LD_VAR 0 16
36307: PUSH
36308: EMPTY
36309: LIST
36310: LIST
36311: PUSH
36312: LD_INT 58
36314: PUSH
36315: EMPTY
36316: LIST
36317: PUSH
36318: LD_INT 2
36320: PUSH
36321: LD_INT 30
36323: PUSH
36324: LD_INT 32
36326: PUSH
36327: EMPTY
36328: LIST
36329: LIST
36330: PUSH
36331: LD_INT 30
36333: PUSH
36334: LD_INT 4
36336: PUSH
36337: EMPTY
36338: LIST
36339: LIST
36340: PUSH
36341: LD_INT 30
36343: PUSH
36344: LD_INT 5
36346: PUSH
36347: EMPTY
36348: LIST
36349: LIST
36350: PUSH
36351: EMPTY
36352: LIST
36353: LIST
36354: LIST
36355: LIST
36356: PUSH
36357: EMPTY
36358: LIST
36359: LIST
36360: LIST
36361: PPUSH
36362: CALL_OW 72
36366: ST_TO_ADDR
36367: GO 36591
36369: LD_INT 2
36371: DOUBLE
36372: EQUAL
36373: IFTRUE 36377
36375: GO 36439
36377: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
36378: LD_ADDR_VAR 0 12
36382: PUSH
36383: LD_VAR 0 18
36387: PPUSH
36388: LD_INT 22
36390: PUSH
36391: LD_VAR 0 16
36395: PUSH
36396: EMPTY
36397: LIST
36398: LIST
36399: PUSH
36400: LD_INT 2
36402: PUSH
36403: LD_INT 30
36405: PUSH
36406: LD_INT 0
36408: PUSH
36409: EMPTY
36410: LIST
36411: LIST
36412: PUSH
36413: LD_INT 30
36415: PUSH
36416: LD_INT 1
36418: PUSH
36419: EMPTY
36420: LIST
36421: LIST
36422: PUSH
36423: EMPTY
36424: LIST
36425: LIST
36426: LIST
36427: PUSH
36428: EMPTY
36429: LIST
36430: LIST
36431: PPUSH
36432: CALL_OW 72
36436: ST_TO_ADDR
36437: GO 36591
36439: LD_INT 3
36441: DOUBLE
36442: EQUAL
36443: IFTRUE 36447
36445: GO 36509
36447: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
36448: LD_ADDR_VAR 0 12
36452: PUSH
36453: LD_VAR 0 18
36457: PPUSH
36458: LD_INT 22
36460: PUSH
36461: LD_VAR 0 16
36465: PUSH
36466: EMPTY
36467: LIST
36468: LIST
36469: PUSH
36470: LD_INT 2
36472: PUSH
36473: LD_INT 30
36475: PUSH
36476: LD_INT 2
36478: PUSH
36479: EMPTY
36480: LIST
36481: LIST
36482: PUSH
36483: LD_INT 30
36485: PUSH
36486: LD_INT 3
36488: PUSH
36489: EMPTY
36490: LIST
36491: LIST
36492: PUSH
36493: EMPTY
36494: LIST
36495: LIST
36496: LIST
36497: PUSH
36498: EMPTY
36499: LIST
36500: LIST
36501: PPUSH
36502: CALL_OW 72
36506: ST_TO_ADDR
36507: GO 36591
36509: LD_INT 4
36511: DOUBLE
36512: EQUAL
36513: IFTRUE 36517
36515: GO 36590
36517: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
36518: LD_ADDR_VAR 0 12
36522: PUSH
36523: LD_VAR 0 18
36527: PPUSH
36528: LD_INT 22
36530: PUSH
36531: LD_VAR 0 16
36535: PUSH
36536: EMPTY
36537: LIST
36538: LIST
36539: PUSH
36540: LD_INT 2
36542: PUSH
36543: LD_INT 30
36545: PUSH
36546: LD_INT 6
36548: PUSH
36549: EMPTY
36550: LIST
36551: LIST
36552: PUSH
36553: LD_INT 30
36555: PUSH
36556: LD_INT 7
36558: PUSH
36559: EMPTY
36560: LIST
36561: LIST
36562: PUSH
36563: LD_INT 30
36565: PUSH
36566: LD_INT 8
36568: PUSH
36569: EMPTY
36570: LIST
36571: LIST
36572: PUSH
36573: EMPTY
36574: LIST
36575: LIST
36576: LIST
36577: LIST
36578: PUSH
36579: EMPTY
36580: LIST
36581: LIST
36582: PPUSH
36583: CALL_OW 72
36587: ST_TO_ADDR
36588: GO 36591
36590: POP
// if i = 1 then
36591: LD_VAR 0 8
36595: PUSH
36596: LD_INT 1
36598: EQUAL
36599: IFFALSE 36710
// begin tmp := [ ] ;
36601: LD_ADDR_VAR 0 19
36605: PUSH
36606: EMPTY
36607: ST_TO_ADDR
// for j in f do
36608: LD_ADDR_VAR 0 9
36612: PUSH
36613: LD_VAR 0 12
36617: PUSH
36618: FOR_IN
36619: IFFALSE 36692
// if GetBType ( j ) = b_bunker then
36621: LD_VAR 0 9
36625: PPUSH
36626: CALL_OW 266
36630: PUSH
36631: LD_INT 32
36633: EQUAL
36634: IFFALSE 36661
// tmp := Insert ( tmp , 1 , j ) else
36636: LD_ADDR_VAR 0 19
36640: PUSH
36641: LD_VAR 0 19
36645: PPUSH
36646: LD_INT 1
36648: PPUSH
36649: LD_VAR 0 9
36653: PPUSH
36654: CALL_OW 2
36658: ST_TO_ADDR
36659: GO 36690
// tmp := Insert ( tmp , tmp + 1 , j ) ;
36661: LD_ADDR_VAR 0 19
36665: PUSH
36666: LD_VAR 0 19
36670: PPUSH
36671: LD_VAR 0 19
36675: PUSH
36676: LD_INT 1
36678: PLUS
36679: PPUSH
36680: LD_VAR 0 9
36684: PPUSH
36685: CALL_OW 2
36689: ST_TO_ADDR
36690: GO 36618
36692: POP
36693: POP
// if tmp then
36694: LD_VAR 0 19
36698: IFFALSE 36710
// f := tmp ;
36700: LD_ADDR_VAR 0 12
36704: PUSH
36705: LD_VAR 0 19
36709: ST_TO_ADDR
// end ; x := personel [ i ] ;
36710: LD_ADDR_VAR 0 13
36714: PUSH
36715: LD_VAR 0 6
36719: PUSH
36720: LD_VAR 0 8
36724: ARRAY
36725: ST_TO_ADDR
// if x = - 1 then
36726: LD_VAR 0 13
36730: PUSH
36731: LD_INT 1
36733: NEG
36734: EQUAL
36735: IFFALSE 36944
// begin for j in f do
36737: LD_ADDR_VAR 0 9
36741: PUSH
36742: LD_VAR 0 12
36746: PUSH
36747: FOR_IN
36748: IFFALSE 36940
// repeat InitHc ;
36750: CALL_OW 19
// if GetBType ( j ) = b_barracks then
36754: LD_VAR 0 9
36758: PPUSH
36759: CALL_OW 266
36763: PUSH
36764: LD_INT 5
36766: EQUAL
36767: IFFALSE 36837
// begin if UnitsInside ( j ) < 3 then
36769: LD_VAR 0 9
36773: PPUSH
36774: CALL_OW 313
36778: PUSH
36779: LD_INT 3
36781: LESS
36782: IFFALSE 36818
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36784: LD_INT 0
36786: PPUSH
36787: LD_INT 5
36789: PUSH
36790: LD_INT 8
36792: PUSH
36793: LD_INT 9
36795: PUSH
36796: EMPTY
36797: LIST
36798: LIST
36799: LIST
36800: PUSH
36801: LD_VAR 0 17
36805: ARRAY
36806: PPUSH
36807: LD_VAR 0 4
36811: PPUSH
36812: CALL_OW 380
36816: GO 36835
// PrepareHuman ( false , i , skill ) ;
36818: LD_INT 0
36820: PPUSH
36821: LD_VAR 0 8
36825: PPUSH
36826: LD_VAR 0 4
36830: PPUSH
36831: CALL_OW 380
// end else
36835: GO 36854
// PrepareHuman ( false , i , skill ) ;
36837: LD_INT 0
36839: PPUSH
36840: LD_VAR 0 8
36844: PPUSH
36845: LD_VAR 0 4
36849: PPUSH
36850: CALL_OW 380
// un := CreateHuman ;
36854: LD_ADDR_VAR 0 14
36858: PUSH
36859: CALL_OW 44
36863: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36864: LD_ADDR_VAR 0 7
36868: PUSH
36869: LD_VAR 0 7
36873: PPUSH
36874: LD_INT 1
36876: PPUSH
36877: LD_VAR 0 14
36881: PPUSH
36882: CALL_OW 2
36886: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
36887: LD_VAR 0 14
36891: PPUSH
36892: LD_VAR 0 9
36896: PPUSH
36897: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
36901: LD_VAR 0 9
36905: PPUSH
36906: CALL_OW 313
36910: PUSH
36911: LD_INT 6
36913: EQUAL
36914: PUSH
36915: LD_VAR 0 9
36919: PPUSH
36920: CALL_OW 266
36924: PUSH
36925: LD_INT 32
36927: PUSH
36928: LD_INT 31
36930: PUSH
36931: EMPTY
36932: LIST
36933: LIST
36934: IN
36935: OR
36936: IFFALSE 36750
36938: GO 36747
36940: POP
36941: POP
// end else
36942: GO 37324
// for j = 1 to x do
36944: LD_ADDR_VAR 0 9
36948: PUSH
36949: DOUBLE
36950: LD_INT 1
36952: DEC
36953: ST_TO_ADDR
36954: LD_VAR 0 13
36958: PUSH
36959: FOR_TO
36960: IFFALSE 37322
// begin InitHc ;
36962: CALL_OW 19
// if not f then
36966: LD_VAR 0 12
36970: NOT
36971: IFFALSE 37060
// begin PrepareHuman ( false , i , skill ) ;
36973: LD_INT 0
36975: PPUSH
36976: LD_VAR 0 8
36980: PPUSH
36981: LD_VAR 0 4
36985: PPUSH
36986: CALL_OW 380
// un := CreateHuman ;
36990: LD_ADDR_VAR 0 14
36994: PUSH
36995: CALL_OW 44
36999: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37000: LD_ADDR_VAR 0 7
37004: PUSH
37005: LD_VAR 0 7
37009: PPUSH
37010: LD_INT 1
37012: PPUSH
37013: LD_VAR 0 14
37017: PPUSH
37018: CALL_OW 2
37022: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37023: LD_VAR 0 14
37027: PPUSH
37028: LD_VAR 0 1
37032: PPUSH
37033: CALL_OW 250
37037: PPUSH
37038: LD_VAR 0 1
37042: PPUSH
37043: CALL_OW 251
37047: PPUSH
37048: LD_INT 10
37050: PPUSH
37051: LD_INT 0
37053: PPUSH
37054: CALL_OW 50
// continue ;
37058: GO 36959
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
37060: LD_VAR 0 12
37064: PUSH
37065: LD_INT 1
37067: ARRAY
37068: PPUSH
37069: CALL_OW 313
37073: PUSH
37074: LD_VAR 0 12
37078: PUSH
37079: LD_INT 1
37081: ARRAY
37082: PPUSH
37083: CALL_OW 266
37087: PUSH
37088: LD_INT 32
37090: PUSH
37091: LD_INT 31
37093: PUSH
37094: EMPTY
37095: LIST
37096: LIST
37097: IN
37098: AND
37099: PUSH
37100: LD_VAR 0 12
37104: PUSH
37105: LD_INT 1
37107: ARRAY
37108: PPUSH
37109: CALL_OW 313
37113: PUSH
37114: LD_INT 6
37116: EQUAL
37117: OR
37118: IFFALSE 37138
// f := Delete ( f , 1 ) ;
37120: LD_ADDR_VAR 0 12
37124: PUSH
37125: LD_VAR 0 12
37129: PPUSH
37130: LD_INT 1
37132: PPUSH
37133: CALL_OW 3
37137: ST_TO_ADDR
// if not f then
37138: LD_VAR 0 12
37142: NOT
37143: IFFALSE 37161
// begin x := x + 2 ;
37145: LD_ADDR_VAR 0 13
37149: PUSH
37150: LD_VAR 0 13
37154: PUSH
37155: LD_INT 2
37157: PLUS
37158: ST_TO_ADDR
// continue ;
37159: GO 36959
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
37161: LD_VAR 0 12
37165: PUSH
37166: LD_INT 1
37168: ARRAY
37169: PPUSH
37170: CALL_OW 266
37174: PUSH
37175: LD_INT 5
37177: EQUAL
37178: IFFALSE 37252
// begin if UnitsInside ( f [ 1 ] ) < 3 then
37180: LD_VAR 0 12
37184: PUSH
37185: LD_INT 1
37187: ARRAY
37188: PPUSH
37189: CALL_OW 313
37193: PUSH
37194: LD_INT 3
37196: LESS
37197: IFFALSE 37233
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37199: LD_INT 0
37201: PPUSH
37202: LD_INT 5
37204: PUSH
37205: LD_INT 8
37207: PUSH
37208: LD_INT 9
37210: PUSH
37211: EMPTY
37212: LIST
37213: LIST
37214: LIST
37215: PUSH
37216: LD_VAR 0 17
37220: ARRAY
37221: PPUSH
37222: LD_VAR 0 4
37226: PPUSH
37227: CALL_OW 380
37231: GO 37250
// PrepareHuman ( false , i , skill ) ;
37233: LD_INT 0
37235: PPUSH
37236: LD_VAR 0 8
37240: PPUSH
37241: LD_VAR 0 4
37245: PPUSH
37246: CALL_OW 380
// end else
37250: GO 37269
// PrepareHuman ( false , i , skill ) ;
37252: LD_INT 0
37254: PPUSH
37255: LD_VAR 0 8
37259: PPUSH
37260: LD_VAR 0 4
37264: PPUSH
37265: CALL_OW 380
// un := CreateHuman ;
37269: LD_ADDR_VAR 0 14
37273: PUSH
37274: CALL_OW 44
37278: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37279: LD_ADDR_VAR 0 7
37283: PUSH
37284: LD_VAR 0 7
37288: PPUSH
37289: LD_INT 1
37291: PPUSH
37292: LD_VAR 0 14
37296: PPUSH
37297: CALL_OW 2
37301: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
37302: LD_VAR 0 14
37306: PPUSH
37307: LD_VAR 0 12
37311: PUSH
37312: LD_INT 1
37314: ARRAY
37315: PPUSH
37316: CALL_OW 52
// end ;
37320: GO 36959
37322: POP
37323: POP
// end ;
37324: GO 36261
37326: POP
37327: POP
// result := result ^ buildings ;
37328: LD_ADDR_VAR 0 7
37332: PUSH
37333: LD_VAR 0 7
37337: PUSH
37338: LD_VAR 0 18
37342: ADD
37343: ST_TO_ADDR
// end else
37344: GO 37487
// begin for i = 1 to personel do
37346: LD_ADDR_VAR 0 8
37350: PUSH
37351: DOUBLE
37352: LD_INT 1
37354: DEC
37355: ST_TO_ADDR
37356: LD_VAR 0 6
37360: PUSH
37361: FOR_TO
37362: IFFALSE 37485
// begin if i > 4 then
37364: LD_VAR 0 8
37368: PUSH
37369: LD_INT 4
37371: GREATER
37372: IFFALSE 37376
// break ;
37374: GO 37485
// x := personel [ i ] ;
37376: LD_ADDR_VAR 0 13
37380: PUSH
37381: LD_VAR 0 6
37385: PUSH
37386: LD_VAR 0 8
37390: ARRAY
37391: ST_TO_ADDR
// if x = - 1 then
37392: LD_VAR 0 13
37396: PUSH
37397: LD_INT 1
37399: NEG
37400: EQUAL
37401: IFFALSE 37405
// continue ;
37403: GO 37361
// PrepareHuman ( false , i , skill ) ;
37405: LD_INT 0
37407: PPUSH
37408: LD_VAR 0 8
37412: PPUSH
37413: LD_VAR 0 4
37417: PPUSH
37418: CALL_OW 380
// un := CreateHuman ;
37422: LD_ADDR_VAR 0 14
37426: PUSH
37427: CALL_OW 44
37431: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37432: LD_VAR 0 14
37436: PPUSH
37437: LD_VAR 0 1
37441: PPUSH
37442: CALL_OW 250
37446: PPUSH
37447: LD_VAR 0 1
37451: PPUSH
37452: CALL_OW 251
37456: PPUSH
37457: LD_INT 10
37459: PPUSH
37460: LD_INT 0
37462: PPUSH
37463: CALL_OW 50
// result := result ^ un ;
37467: LD_ADDR_VAR 0 7
37471: PUSH
37472: LD_VAR 0 7
37476: PUSH
37477: LD_VAR 0 14
37481: ADD
37482: ST_TO_ADDR
// end ;
37483: GO 37361
37485: POP
37486: POP
// end ; end ;
37487: LD_VAR 0 7
37491: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
37492: LD_INT 0
37494: PPUSH
37495: PPUSH
37496: PPUSH
37497: PPUSH
37498: PPUSH
37499: PPUSH
37500: PPUSH
37501: PPUSH
37502: PPUSH
37503: PPUSH
37504: PPUSH
37505: PPUSH
37506: PPUSH
37507: PPUSH
37508: PPUSH
37509: PPUSH
// result := false ;
37510: LD_ADDR_VAR 0 3
37514: PUSH
37515: LD_INT 0
37517: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
37518: LD_VAR 0 1
37522: NOT
37523: PUSH
37524: LD_VAR 0 1
37528: PPUSH
37529: CALL_OW 266
37533: PUSH
37534: LD_INT 32
37536: PUSH
37537: LD_INT 33
37539: PUSH
37540: EMPTY
37541: LIST
37542: LIST
37543: IN
37544: NOT
37545: OR
37546: IFFALSE 37550
// exit ;
37548: GO 38659
// nat := GetNation ( tower ) ;
37550: LD_ADDR_VAR 0 12
37554: PUSH
37555: LD_VAR 0 1
37559: PPUSH
37560: CALL_OW 248
37564: ST_TO_ADDR
// side := GetSide ( tower ) ;
37565: LD_ADDR_VAR 0 16
37569: PUSH
37570: LD_VAR 0 1
37574: PPUSH
37575: CALL_OW 255
37579: ST_TO_ADDR
// x := GetX ( tower ) ;
37580: LD_ADDR_VAR 0 10
37584: PUSH
37585: LD_VAR 0 1
37589: PPUSH
37590: CALL_OW 250
37594: ST_TO_ADDR
// y := GetY ( tower ) ;
37595: LD_ADDR_VAR 0 11
37599: PUSH
37600: LD_VAR 0 1
37604: PPUSH
37605: CALL_OW 251
37609: ST_TO_ADDR
// if not x or not y then
37610: LD_VAR 0 10
37614: NOT
37615: PUSH
37616: LD_VAR 0 11
37620: NOT
37621: OR
37622: IFFALSE 37626
// exit ;
37624: GO 38659
// weapon := 0 ;
37626: LD_ADDR_VAR 0 18
37630: PUSH
37631: LD_INT 0
37633: ST_TO_ADDR
// fac_list := [ ] ;
37634: LD_ADDR_VAR 0 17
37638: PUSH
37639: EMPTY
37640: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
37641: LD_ADDR_VAR 0 6
37645: PUSH
37646: LD_VAR 0 1
37650: PPUSH
37651: CALL_OW 274
37655: PPUSH
37656: LD_VAR 0 2
37660: PPUSH
37661: LD_INT 0
37663: PPUSH
37664: CALL 35230 0 3
37668: PPUSH
37669: LD_INT 30
37671: PUSH
37672: LD_INT 3
37674: PUSH
37675: EMPTY
37676: LIST
37677: LIST
37678: PPUSH
37679: CALL_OW 72
37683: ST_TO_ADDR
// if not factories then
37684: LD_VAR 0 6
37688: NOT
37689: IFFALSE 37693
// exit ;
37691: GO 38659
// for i in factories do
37693: LD_ADDR_VAR 0 8
37697: PUSH
37698: LD_VAR 0 6
37702: PUSH
37703: FOR_IN
37704: IFFALSE 37729
// fac_list := fac_list union AvailableWeaponList ( i ) ;
37706: LD_ADDR_VAR 0 17
37710: PUSH
37711: LD_VAR 0 17
37715: PUSH
37716: LD_VAR 0 8
37720: PPUSH
37721: CALL_OW 478
37725: UNION
37726: ST_TO_ADDR
37727: GO 37703
37729: POP
37730: POP
// if not fac_list then
37731: LD_VAR 0 17
37735: NOT
37736: IFFALSE 37740
// exit ;
37738: GO 38659
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
37740: LD_ADDR_VAR 0 5
37744: PUSH
37745: LD_INT 4
37747: PUSH
37748: LD_INT 5
37750: PUSH
37751: LD_INT 9
37753: PUSH
37754: LD_INT 10
37756: PUSH
37757: LD_INT 6
37759: PUSH
37760: LD_INT 7
37762: PUSH
37763: LD_INT 11
37765: PUSH
37766: EMPTY
37767: LIST
37768: LIST
37769: LIST
37770: LIST
37771: LIST
37772: LIST
37773: LIST
37774: PUSH
37775: LD_INT 27
37777: PUSH
37778: LD_INT 28
37780: PUSH
37781: LD_INT 26
37783: PUSH
37784: LD_INT 30
37786: PUSH
37787: EMPTY
37788: LIST
37789: LIST
37790: LIST
37791: LIST
37792: PUSH
37793: LD_INT 43
37795: PUSH
37796: LD_INT 44
37798: PUSH
37799: LD_INT 46
37801: PUSH
37802: LD_INT 45
37804: PUSH
37805: LD_INT 47
37807: PUSH
37808: LD_INT 49
37810: PUSH
37811: EMPTY
37812: LIST
37813: LIST
37814: LIST
37815: LIST
37816: LIST
37817: LIST
37818: PUSH
37819: EMPTY
37820: LIST
37821: LIST
37822: LIST
37823: PUSH
37824: LD_VAR 0 12
37828: ARRAY
37829: ST_TO_ADDR
// list := list isect fac_list ;
37830: LD_ADDR_VAR 0 5
37834: PUSH
37835: LD_VAR 0 5
37839: PUSH
37840: LD_VAR 0 17
37844: ISECT
37845: ST_TO_ADDR
// if not list then
37846: LD_VAR 0 5
37850: NOT
37851: IFFALSE 37855
// exit ;
37853: GO 38659
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
37855: LD_VAR 0 12
37859: PUSH
37860: LD_INT 3
37862: EQUAL
37863: PUSH
37864: LD_INT 49
37866: PUSH
37867: LD_VAR 0 5
37871: IN
37872: AND
37873: PUSH
37874: LD_INT 31
37876: PPUSH
37877: LD_VAR 0 16
37881: PPUSH
37882: CALL_OW 321
37886: PUSH
37887: LD_INT 2
37889: EQUAL
37890: AND
37891: IFFALSE 37951
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
37893: LD_INT 22
37895: PUSH
37896: LD_VAR 0 16
37900: PUSH
37901: EMPTY
37902: LIST
37903: LIST
37904: PUSH
37905: LD_INT 35
37907: PUSH
37908: LD_INT 49
37910: PUSH
37911: EMPTY
37912: LIST
37913: LIST
37914: PUSH
37915: LD_INT 91
37917: PUSH
37918: LD_VAR 0 1
37922: PUSH
37923: LD_INT 10
37925: PUSH
37926: EMPTY
37927: LIST
37928: LIST
37929: LIST
37930: PUSH
37931: EMPTY
37932: LIST
37933: LIST
37934: LIST
37935: PPUSH
37936: CALL_OW 69
37940: NOT
37941: IFFALSE 37951
// weapon := ru_time_lapser ;
37943: LD_ADDR_VAR 0 18
37947: PUSH
37948: LD_INT 49
37950: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
37951: LD_VAR 0 12
37955: PUSH
37956: LD_INT 1
37958: PUSH
37959: LD_INT 2
37961: PUSH
37962: EMPTY
37963: LIST
37964: LIST
37965: IN
37966: PUSH
37967: LD_INT 11
37969: PUSH
37970: LD_VAR 0 5
37974: IN
37975: PUSH
37976: LD_INT 30
37978: PUSH
37979: LD_VAR 0 5
37983: IN
37984: OR
37985: AND
37986: PUSH
37987: LD_INT 6
37989: PPUSH
37990: LD_VAR 0 16
37994: PPUSH
37995: CALL_OW 321
37999: PUSH
38000: LD_INT 2
38002: EQUAL
38003: AND
38004: IFFALSE 38169
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
38006: LD_INT 22
38008: PUSH
38009: LD_VAR 0 16
38013: PUSH
38014: EMPTY
38015: LIST
38016: LIST
38017: PUSH
38018: LD_INT 2
38020: PUSH
38021: LD_INT 35
38023: PUSH
38024: LD_INT 11
38026: PUSH
38027: EMPTY
38028: LIST
38029: LIST
38030: PUSH
38031: LD_INT 35
38033: PUSH
38034: LD_INT 30
38036: PUSH
38037: EMPTY
38038: LIST
38039: LIST
38040: PUSH
38041: EMPTY
38042: LIST
38043: LIST
38044: LIST
38045: PUSH
38046: LD_INT 91
38048: PUSH
38049: LD_VAR 0 1
38053: PUSH
38054: LD_INT 18
38056: PUSH
38057: EMPTY
38058: LIST
38059: LIST
38060: LIST
38061: PUSH
38062: EMPTY
38063: LIST
38064: LIST
38065: LIST
38066: PPUSH
38067: CALL_OW 69
38071: NOT
38072: PUSH
38073: LD_INT 22
38075: PUSH
38076: LD_VAR 0 16
38080: PUSH
38081: EMPTY
38082: LIST
38083: LIST
38084: PUSH
38085: LD_INT 2
38087: PUSH
38088: LD_INT 30
38090: PUSH
38091: LD_INT 32
38093: PUSH
38094: EMPTY
38095: LIST
38096: LIST
38097: PUSH
38098: LD_INT 30
38100: PUSH
38101: LD_INT 33
38103: PUSH
38104: EMPTY
38105: LIST
38106: LIST
38107: PUSH
38108: EMPTY
38109: LIST
38110: LIST
38111: LIST
38112: PUSH
38113: LD_INT 91
38115: PUSH
38116: LD_VAR 0 1
38120: PUSH
38121: LD_INT 12
38123: PUSH
38124: EMPTY
38125: LIST
38126: LIST
38127: LIST
38128: PUSH
38129: EMPTY
38130: LIST
38131: LIST
38132: LIST
38133: PUSH
38134: EMPTY
38135: LIST
38136: PPUSH
38137: CALL_OW 69
38141: PUSH
38142: LD_INT 2
38144: GREATER
38145: AND
38146: IFFALSE 38169
// weapon := [ us_radar , ar_radar ] [ nat ] ;
38148: LD_ADDR_VAR 0 18
38152: PUSH
38153: LD_INT 11
38155: PUSH
38156: LD_INT 30
38158: PUSH
38159: EMPTY
38160: LIST
38161: LIST
38162: PUSH
38163: LD_VAR 0 12
38167: ARRAY
38168: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
38169: LD_VAR 0 18
38173: NOT
38174: PUSH
38175: LD_INT 40
38177: PPUSH
38178: LD_VAR 0 16
38182: PPUSH
38183: CALL_OW 321
38187: PUSH
38188: LD_INT 2
38190: EQUAL
38191: AND
38192: PUSH
38193: LD_INT 7
38195: PUSH
38196: LD_VAR 0 5
38200: IN
38201: PUSH
38202: LD_INT 28
38204: PUSH
38205: LD_VAR 0 5
38209: IN
38210: OR
38211: PUSH
38212: LD_INT 45
38214: PUSH
38215: LD_VAR 0 5
38219: IN
38220: OR
38221: AND
38222: IFFALSE 38476
// begin hex := GetHexInfo ( x , y ) ;
38224: LD_ADDR_VAR 0 4
38228: PUSH
38229: LD_VAR 0 10
38233: PPUSH
38234: LD_VAR 0 11
38238: PPUSH
38239: CALL_OW 546
38243: ST_TO_ADDR
// if hex [ 1 ] then
38244: LD_VAR 0 4
38248: PUSH
38249: LD_INT 1
38251: ARRAY
38252: IFFALSE 38256
// exit ;
38254: GO 38659
// height := hex [ 2 ] ;
38256: LD_ADDR_VAR 0 15
38260: PUSH
38261: LD_VAR 0 4
38265: PUSH
38266: LD_INT 2
38268: ARRAY
38269: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
38270: LD_ADDR_VAR 0 14
38274: PUSH
38275: LD_INT 0
38277: PUSH
38278: LD_INT 2
38280: PUSH
38281: LD_INT 3
38283: PUSH
38284: LD_INT 5
38286: PUSH
38287: EMPTY
38288: LIST
38289: LIST
38290: LIST
38291: LIST
38292: ST_TO_ADDR
// for i in tmp do
38293: LD_ADDR_VAR 0 8
38297: PUSH
38298: LD_VAR 0 14
38302: PUSH
38303: FOR_IN
38304: IFFALSE 38474
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
38306: LD_ADDR_VAR 0 9
38310: PUSH
38311: LD_VAR 0 10
38315: PPUSH
38316: LD_VAR 0 8
38320: PPUSH
38321: LD_INT 5
38323: PPUSH
38324: CALL_OW 272
38328: PUSH
38329: LD_VAR 0 11
38333: PPUSH
38334: LD_VAR 0 8
38338: PPUSH
38339: LD_INT 5
38341: PPUSH
38342: CALL_OW 273
38346: PUSH
38347: EMPTY
38348: LIST
38349: LIST
38350: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
38351: LD_VAR 0 9
38355: PUSH
38356: LD_INT 1
38358: ARRAY
38359: PPUSH
38360: LD_VAR 0 9
38364: PUSH
38365: LD_INT 2
38367: ARRAY
38368: PPUSH
38369: CALL_OW 488
38373: IFFALSE 38472
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
38375: LD_ADDR_VAR 0 4
38379: PUSH
38380: LD_VAR 0 9
38384: PUSH
38385: LD_INT 1
38387: ARRAY
38388: PPUSH
38389: LD_VAR 0 9
38393: PUSH
38394: LD_INT 2
38396: ARRAY
38397: PPUSH
38398: CALL_OW 546
38402: ST_TO_ADDR
// if hex [ 1 ] then
38403: LD_VAR 0 4
38407: PUSH
38408: LD_INT 1
38410: ARRAY
38411: IFFALSE 38415
// continue ;
38413: GO 38303
// h := hex [ 2 ] ;
38415: LD_ADDR_VAR 0 13
38419: PUSH
38420: LD_VAR 0 4
38424: PUSH
38425: LD_INT 2
38427: ARRAY
38428: ST_TO_ADDR
// if h + 7 < height then
38429: LD_VAR 0 13
38433: PUSH
38434: LD_INT 7
38436: PLUS
38437: PUSH
38438: LD_VAR 0 15
38442: LESS
38443: IFFALSE 38472
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
38445: LD_ADDR_VAR 0 18
38449: PUSH
38450: LD_INT 7
38452: PUSH
38453: LD_INT 28
38455: PUSH
38456: LD_INT 45
38458: PUSH
38459: EMPTY
38460: LIST
38461: LIST
38462: LIST
38463: PUSH
38464: LD_VAR 0 12
38468: ARRAY
38469: ST_TO_ADDR
// break ;
38470: GO 38474
// end ; end ; end ;
38472: GO 38303
38474: POP
38475: POP
// end ; if not weapon then
38476: LD_VAR 0 18
38480: NOT
38481: IFFALSE 38541
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
38483: LD_ADDR_VAR 0 5
38487: PUSH
38488: LD_VAR 0 5
38492: PUSH
38493: LD_INT 11
38495: PUSH
38496: LD_INT 30
38498: PUSH
38499: LD_INT 49
38501: PUSH
38502: EMPTY
38503: LIST
38504: LIST
38505: LIST
38506: DIFF
38507: ST_TO_ADDR
// if not list then
38508: LD_VAR 0 5
38512: NOT
38513: IFFALSE 38517
// exit ;
38515: GO 38659
// weapon := list [ rand ( 1 , list ) ] ;
38517: LD_ADDR_VAR 0 18
38521: PUSH
38522: LD_VAR 0 5
38526: PUSH
38527: LD_INT 1
38529: PPUSH
38530: LD_VAR 0 5
38534: PPUSH
38535: CALL_OW 12
38539: ARRAY
38540: ST_TO_ADDR
// end ; if weapon then
38541: LD_VAR 0 18
38545: IFFALSE 38659
// begin tmp := CostOfWeapon ( weapon ) ;
38547: LD_ADDR_VAR 0 14
38551: PUSH
38552: LD_VAR 0 18
38556: PPUSH
38557: CALL_OW 451
38561: ST_TO_ADDR
// j := GetBase ( tower ) ;
38562: LD_ADDR_VAR 0 9
38566: PUSH
38567: LD_VAR 0 1
38571: PPUSH
38572: CALL_OW 274
38576: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
38577: LD_VAR 0 9
38581: PPUSH
38582: LD_INT 1
38584: PPUSH
38585: CALL_OW 275
38589: PUSH
38590: LD_VAR 0 14
38594: PUSH
38595: LD_INT 1
38597: ARRAY
38598: GREATEREQUAL
38599: PUSH
38600: LD_VAR 0 9
38604: PPUSH
38605: LD_INT 2
38607: PPUSH
38608: CALL_OW 275
38612: PUSH
38613: LD_VAR 0 14
38617: PUSH
38618: LD_INT 2
38620: ARRAY
38621: GREATEREQUAL
38622: AND
38623: PUSH
38624: LD_VAR 0 9
38628: PPUSH
38629: LD_INT 3
38631: PPUSH
38632: CALL_OW 275
38636: PUSH
38637: LD_VAR 0 14
38641: PUSH
38642: LD_INT 3
38644: ARRAY
38645: GREATEREQUAL
38646: AND
38647: IFFALSE 38659
// result := weapon ;
38649: LD_ADDR_VAR 0 3
38653: PUSH
38654: LD_VAR 0 18
38658: ST_TO_ADDR
// end ; end ;
38659: LD_VAR 0 3
38663: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
38664: LD_INT 0
38666: PPUSH
38667: PPUSH
// result := true ;
38668: LD_ADDR_VAR 0 3
38672: PUSH
38673: LD_INT 1
38675: ST_TO_ADDR
// if array1 = array2 then
38676: LD_VAR 0 1
38680: PUSH
38681: LD_VAR 0 2
38685: EQUAL
38686: IFFALSE 38746
// begin for i = 1 to array1 do
38688: LD_ADDR_VAR 0 4
38692: PUSH
38693: DOUBLE
38694: LD_INT 1
38696: DEC
38697: ST_TO_ADDR
38698: LD_VAR 0 1
38702: PUSH
38703: FOR_TO
38704: IFFALSE 38742
// if array1 [ i ] <> array2 [ i ] then
38706: LD_VAR 0 1
38710: PUSH
38711: LD_VAR 0 4
38715: ARRAY
38716: PUSH
38717: LD_VAR 0 2
38721: PUSH
38722: LD_VAR 0 4
38726: ARRAY
38727: NONEQUAL
38728: IFFALSE 38740
// begin result := false ;
38730: LD_ADDR_VAR 0 3
38734: PUSH
38735: LD_INT 0
38737: ST_TO_ADDR
// break ;
38738: GO 38742
// end ;
38740: GO 38703
38742: POP
38743: POP
// end else
38744: GO 38754
// result := false ;
38746: LD_ADDR_VAR 0 3
38750: PUSH
38751: LD_INT 0
38753: ST_TO_ADDR
// end ;
38754: LD_VAR 0 3
38758: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
38759: LD_INT 0
38761: PPUSH
38762: PPUSH
// if not array1 or not array2 then
38763: LD_VAR 0 1
38767: NOT
38768: PUSH
38769: LD_VAR 0 2
38773: NOT
38774: OR
38775: IFFALSE 38779
// exit ;
38777: GO 38843
// result := true ;
38779: LD_ADDR_VAR 0 3
38783: PUSH
38784: LD_INT 1
38786: ST_TO_ADDR
// for i = 1 to array1 do
38787: LD_ADDR_VAR 0 4
38791: PUSH
38792: DOUBLE
38793: LD_INT 1
38795: DEC
38796: ST_TO_ADDR
38797: LD_VAR 0 1
38801: PUSH
38802: FOR_TO
38803: IFFALSE 38841
// if array1 [ i ] <> array2 [ i ] then
38805: LD_VAR 0 1
38809: PUSH
38810: LD_VAR 0 4
38814: ARRAY
38815: PUSH
38816: LD_VAR 0 2
38820: PUSH
38821: LD_VAR 0 4
38825: ARRAY
38826: NONEQUAL
38827: IFFALSE 38839
// begin result := false ;
38829: LD_ADDR_VAR 0 3
38833: PUSH
38834: LD_INT 0
38836: ST_TO_ADDR
// break ;
38837: GO 38841
// end ;
38839: GO 38802
38841: POP
38842: POP
// end ;
38843: LD_VAR 0 3
38847: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
38848: LD_INT 0
38850: PPUSH
38851: PPUSH
38852: PPUSH
// pom := GetBase ( fac ) ;
38853: LD_ADDR_VAR 0 5
38857: PUSH
38858: LD_VAR 0 1
38862: PPUSH
38863: CALL_OW 274
38867: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
38868: LD_ADDR_VAR 0 4
38872: PUSH
38873: LD_VAR 0 2
38877: PUSH
38878: LD_INT 1
38880: ARRAY
38881: PPUSH
38882: LD_VAR 0 2
38886: PUSH
38887: LD_INT 2
38889: ARRAY
38890: PPUSH
38891: LD_VAR 0 2
38895: PUSH
38896: LD_INT 3
38898: ARRAY
38899: PPUSH
38900: LD_VAR 0 2
38904: PUSH
38905: LD_INT 4
38907: ARRAY
38908: PPUSH
38909: CALL_OW 449
38913: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38914: LD_ADDR_VAR 0 3
38918: PUSH
38919: LD_VAR 0 5
38923: PPUSH
38924: LD_INT 1
38926: PPUSH
38927: CALL_OW 275
38931: PUSH
38932: LD_VAR 0 4
38936: PUSH
38937: LD_INT 1
38939: ARRAY
38940: GREATEREQUAL
38941: PUSH
38942: LD_VAR 0 5
38946: PPUSH
38947: LD_INT 2
38949: PPUSH
38950: CALL_OW 275
38954: PUSH
38955: LD_VAR 0 4
38959: PUSH
38960: LD_INT 2
38962: ARRAY
38963: GREATEREQUAL
38964: AND
38965: PUSH
38966: LD_VAR 0 5
38970: PPUSH
38971: LD_INT 3
38973: PPUSH
38974: CALL_OW 275
38978: PUSH
38979: LD_VAR 0 4
38983: PUSH
38984: LD_INT 3
38986: ARRAY
38987: GREATEREQUAL
38988: AND
38989: ST_TO_ADDR
// end ;
38990: LD_VAR 0 3
38994: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
38995: LD_INT 0
38997: PPUSH
38998: PPUSH
38999: PPUSH
39000: PPUSH
// pom := GetBase ( building ) ;
39001: LD_ADDR_VAR 0 3
39005: PUSH
39006: LD_VAR 0 1
39010: PPUSH
39011: CALL_OW 274
39015: ST_TO_ADDR
// if not pom then
39016: LD_VAR 0 3
39020: NOT
39021: IFFALSE 39025
// exit ;
39023: GO 39195
// btype := GetBType ( building ) ;
39025: LD_ADDR_VAR 0 5
39029: PUSH
39030: LD_VAR 0 1
39034: PPUSH
39035: CALL_OW 266
39039: ST_TO_ADDR
// if btype = b_armoury then
39040: LD_VAR 0 5
39044: PUSH
39045: LD_INT 4
39047: EQUAL
39048: IFFALSE 39058
// btype := b_barracks ;
39050: LD_ADDR_VAR 0 5
39054: PUSH
39055: LD_INT 5
39057: ST_TO_ADDR
// if btype = b_depot then
39058: LD_VAR 0 5
39062: PUSH
39063: LD_INT 0
39065: EQUAL
39066: IFFALSE 39076
// btype := b_warehouse ;
39068: LD_ADDR_VAR 0 5
39072: PUSH
39073: LD_INT 1
39075: ST_TO_ADDR
// if btype = b_workshop then
39076: LD_VAR 0 5
39080: PUSH
39081: LD_INT 2
39083: EQUAL
39084: IFFALSE 39094
// btype := b_factory ;
39086: LD_ADDR_VAR 0 5
39090: PUSH
39091: LD_INT 3
39093: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39094: LD_ADDR_VAR 0 4
39098: PUSH
39099: LD_VAR 0 5
39103: PPUSH
39104: LD_VAR 0 1
39108: PPUSH
39109: CALL_OW 248
39113: PPUSH
39114: CALL_OW 450
39118: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39119: LD_ADDR_VAR 0 2
39123: PUSH
39124: LD_VAR 0 3
39128: PPUSH
39129: LD_INT 1
39131: PPUSH
39132: CALL_OW 275
39136: PUSH
39137: LD_VAR 0 4
39141: PUSH
39142: LD_INT 1
39144: ARRAY
39145: GREATEREQUAL
39146: PUSH
39147: LD_VAR 0 3
39151: PPUSH
39152: LD_INT 2
39154: PPUSH
39155: CALL_OW 275
39159: PUSH
39160: LD_VAR 0 4
39164: PUSH
39165: LD_INT 2
39167: ARRAY
39168: GREATEREQUAL
39169: AND
39170: PUSH
39171: LD_VAR 0 3
39175: PPUSH
39176: LD_INT 3
39178: PPUSH
39179: CALL_OW 275
39183: PUSH
39184: LD_VAR 0 4
39188: PUSH
39189: LD_INT 3
39191: ARRAY
39192: GREATEREQUAL
39193: AND
39194: ST_TO_ADDR
// end ;
39195: LD_VAR 0 2
39199: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
39200: LD_INT 0
39202: PPUSH
39203: PPUSH
39204: PPUSH
// pom := GetBase ( building ) ;
39205: LD_ADDR_VAR 0 4
39209: PUSH
39210: LD_VAR 0 1
39214: PPUSH
39215: CALL_OW 274
39219: ST_TO_ADDR
// if not pom then
39220: LD_VAR 0 4
39224: NOT
39225: IFFALSE 39229
// exit ;
39227: GO 39330
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39229: LD_ADDR_VAR 0 5
39233: PUSH
39234: LD_VAR 0 2
39238: PPUSH
39239: LD_VAR 0 1
39243: PPUSH
39244: CALL_OW 248
39248: PPUSH
39249: CALL_OW 450
39253: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39254: LD_ADDR_VAR 0 3
39258: PUSH
39259: LD_VAR 0 4
39263: PPUSH
39264: LD_INT 1
39266: PPUSH
39267: CALL_OW 275
39271: PUSH
39272: LD_VAR 0 5
39276: PUSH
39277: LD_INT 1
39279: ARRAY
39280: GREATEREQUAL
39281: PUSH
39282: LD_VAR 0 4
39286: PPUSH
39287: LD_INT 2
39289: PPUSH
39290: CALL_OW 275
39294: PUSH
39295: LD_VAR 0 5
39299: PUSH
39300: LD_INT 2
39302: ARRAY
39303: GREATEREQUAL
39304: AND
39305: PUSH
39306: LD_VAR 0 4
39310: PPUSH
39311: LD_INT 3
39313: PPUSH
39314: CALL_OW 275
39318: PUSH
39319: LD_VAR 0 5
39323: PUSH
39324: LD_INT 3
39326: ARRAY
39327: GREATEREQUAL
39328: AND
39329: ST_TO_ADDR
// end ;
39330: LD_VAR 0 3
39334: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
39335: LD_INT 0
39337: PPUSH
39338: PPUSH
39339: PPUSH
39340: PPUSH
39341: PPUSH
39342: PPUSH
39343: PPUSH
39344: PPUSH
39345: PPUSH
39346: PPUSH
39347: PPUSH
// result := false ;
39348: LD_ADDR_VAR 0 8
39352: PUSH
39353: LD_INT 0
39355: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
39356: LD_VAR 0 5
39360: NOT
39361: PUSH
39362: LD_VAR 0 1
39366: NOT
39367: OR
39368: PUSH
39369: LD_VAR 0 2
39373: NOT
39374: OR
39375: PUSH
39376: LD_VAR 0 3
39380: NOT
39381: OR
39382: IFFALSE 39386
// exit ;
39384: GO 40200
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
39386: LD_ADDR_VAR 0 14
39390: PUSH
39391: LD_VAR 0 1
39395: PPUSH
39396: LD_VAR 0 2
39400: PPUSH
39401: LD_VAR 0 3
39405: PPUSH
39406: LD_VAR 0 4
39410: PPUSH
39411: LD_VAR 0 5
39415: PUSH
39416: LD_INT 1
39418: ARRAY
39419: PPUSH
39420: CALL_OW 248
39424: PPUSH
39425: LD_INT 0
39427: PPUSH
39428: CALL 41453 0 6
39432: ST_TO_ADDR
// if not hexes then
39433: LD_VAR 0 14
39437: NOT
39438: IFFALSE 39442
// exit ;
39440: GO 40200
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
39442: LD_ADDR_VAR 0 17
39446: PUSH
39447: LD_VAR 0 5
39451: PPUSH
39452: LD_INT 22
39454: PUSH
39455: LD_VAR 0 13
39459: PPUSH
39460: CALL_OW 255
39464: PUSH
39465: EMPTY
39466: LIST
39467: LIST
39468: PUSH
39469: LD_INT 2
39471: PUSH
39472: LD_INT 30
39474: PUSH
39475: LD_INT 0
39477: PUSH
39478: EMPTY
39479: LIST
39480: LIST
39481: PUSH
39482: LD_INT 30
39484: PUSH
39485: LD_INT 1
39487: PUSH
39488: EMPTY
39489: LIST
39490: LIST
39491: PUSH
39492: EMPTY
39493: LIST
39494: LIST
39495: LIST
39496: PUSH
39497: EMPTY
39498: LIST
39499: LIST
39500: PPUSH
39501: CALL_OW 72
39505: ST_TO_ADDR
// for i = 1 to hexes do
39506: LD_ADDR_VAR 0 9
39510: PUSH
39511: DOUBLE
39512: LD_INT 1
39514: DEC
39515: ST_TO_ADDR
39516: LD_VAR 0 14
39520: PUSH
39521: FOR_TO
39522: IFFALSE 40198
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39524: LD_ADDR_VAR 0 13
39528: PUSH
39529: LD_VAR 0 14
39533: PUSH
39534: LD_VAR 0 9
39538: ARRAY
39539: PUSH
39540: LD_INT 1
39542: ARRAY
39543: PPUSH
39544: LD_VAR 0 14
39548: PUSH
39549: LD_VAR 0 9
39553: ARRAY
39554: PUSH
39555: LD_INT 2
39557: ARRAY
39558: PPUSH
39559: CALL_OW 428
39563: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
39564: LD_VAR 0 14
39568: PUSH
39569: LD_VAR 0 9
39573: ARRAY
39574: PUSH
39575: LD_INT 1
39577: ARRAY
39578: PPUSH
39579: LD_VAR 0 14
39583: PUSH
39584: LD_VAR 0 9
39588: ARRAY
39589: PUSH
39590: LD_INT 2
39592: ARRAY
39593: PPUSH
39594: CALL_OW 351
39598: PUSH
39599: LD_VAR 0 14
39603: PUSH
39604: LD_VAR 0 9
39608: ARRAY
39609: PUSH
39610: LD_INT 1
39612: ARRAY
39613: PPUSH
39614: LD_VAR 0 14
39618: PUSH
39619: LD_VAR 0 9
39623: ARRAY
39624: PUSH
39625: LD_INT 2
39627: ARRAY
39628: PPUSH
39629: CALL_OW 488
39633: NOT
39634: OR
39635: PUSH
39636: LD_VAR 0 13
39640: PPUSH
39641: CALL_OW 247
39645: PUSH
39646: LD_INT 3
39648: EQUAL
39649: OR
39650: IFFALSE 39656
// exit ;
39652: POP
39653: POP
39654: GO 40200
// if not tmp then
39656: LD_VAR 0 13
39660: NOT
39661: IFFALSE 39665
// continue ;
39663: GO 39521
// result := true ;
39665: LD_ADDR_VAR 0 8
39669: PUSH
39670: LD_INT 1
39672: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
39673: LD_VAR 0 6
39677: PUSH
39678: LD_VAR 0 13
39682: PPUSH
39683: CALL_OW 247
39687: PUSH
39688: LD_INT 2
39690: EQUAL
39691: AND
39692: PUSH
39693: LD_VAR 0 13
39697: PPUSH
39698: CALL_OW 263
39702: PUSH
39703: LD_INT 1
39705: EQUAL
39706: AND
39707: IFFALSE 39871
// begin if IsDrivenBy ( tmp ) then
39709: LD_VAR 0 13
39713: PPUSH
39714: CALL_OW 311
39718: IFFALSE 39722
// continue ;
39720: GO 39521
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
39722: LD_VAR 0 6
39726: PPUSH
39727: LD_INT 3
39729: PUSH
39730: LD_INT 60
39732: PUSH
39733: EMPTY
39734: LIST
39735: PUSH
39736: EMPTY
39737: LIST
39738: LIST
39739: PUSH
39740: LD_INT 3
39742: PUSH
39743: LD_INT 55
39745: PUSH
39746: EMPTY
39747: LIST
39748: PUSH
39749: EMPTY
39750: LIST
39751: LIST
39752: PUSH
39753: EMPTY
39754: LIST
39755: LIST
39756: PPUSH
39757: CALL_OW 72
39761: IFFALSE 39869
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
39763: LD_ADDR_VAR 0 18
39767: PUSH
39768: LD_VAR 0 6
39772: PPUSH
39773: LD_INT 3
39775: PUSH
39776: LD_INT 60
39778: PUSH
39779: EMPTY
39780: LIST
39781: PUSH
39782: EMPTY
39783: LIST
39784: LIST
39785: PUSH
39786: LD_INT 3
39788: PUSH
39789: LD_INT 55
39791: PUSH
39792: EMPTY
39793: LIST
39794: PUSH
39795: EMPTY
39796: LIST
39797: LIST
39798: PUSH
39799: EMPTY
39800: LIST
39801: LIST
39802: PPUSH
39803: CALL_OW 72
39807: PUSH
39808: LD_INT 1
39810: ARRAY
39811: ST_TO_ADDR
// if IsInUnit ( driver ) then
39812: LD_VAR 0 18
39816: PPUSH
39817: CALL_OW 310
39821: IFFALSE 39832
// ComExit ( driver ) ;
39823: LD_VAR 0 18
39827: PPUSH
39828: CALL 65254 0 1
// AddComEnterUnit ( driver , tmp ) ;
39832: LD_VAR 0 18
39836: PPUSH
39837: LD_VAR 0 13
39841: PPUSH
39842: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
39846: LD_VAR 0 18
39850: PPUSH
39851: LD_VAR 0 7
39855: PPUSH
39856: CALL_OW 173
// AddComExitVehicle ( driver ) ;
39860: LD_VAR 0 18
39864: PPUSH
39865: CALL_OW 181
// end ; continue ;
39869: GO 39521
// end ; if not cleaners or not tmp in cleaners then
39871: LD_VAR 0 6
39875: NOT
39876: PUSH
39877: LD_VAR 0 13
39881: PUSH
39882: LD_VAR 0 6
39886: IN
39887: NOT
39888: OR
39889: IFFALSE 40196
// begin if dep then
39891: LD_VAR 0 17
39895: IFFALSE 40031
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
39897: LD_ADDR_VAR 0 16
39901: PUSH
39902: LD_VAR 0 17
39906: PUSH
39907: LD_INT 1
39909: ARRAY
39910: PPUSH
39911: CALL_OW 250
39915: PPUSH
39916: LD_VAR 0 17
39920: PUSH
39921: LD_INT 1
39923: ARRAY
39924: PPUSH
39925: CALL_OW 254
39929: PPUSH
39930: LD_INT 5
39932: PPUSH
39933: CALL_OW 272
39937: PUSH
39938: LD_VAR 0 17
39942: PUSH
39943: LD_INT 1
39945: ARRAY
39946: PPUSH
39947: CALL_OW 251
39951: PPUSH
39952: LD_VAR 0 17
39956: PUSH
39957: LD_INT 1
39959: ARRAY
39960: PPUSH
39961: CALL_OW 254
39965: PPUSH
39966: LD_INT 5
39968: PPUSH
39969: CALL_OW 273
39973: PUSH
39974: EMPTY
39975: LIST
39976: LIST
39977: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
39978: LD_VAR 0 16
39982: PUSH
39983: LD_INT 1
39985: ARRAY
39986: PPUSH
39987: LD_VAR 0 16
39991: PUSH
39992: LD_INT 2
39994: ARRAY
39995: PPUSH
39996: CALL_OW 488
40000: IFFALSE 40031
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
40002: LD_VAR 0 13
40006: PPUSH
40007: LD_VAR 0 16
40011: PUSH
40012: LD_INT 1
40014: ARRAY
40015: PPUSH
40016: LD_VAR 0 16
40020: PUSH
40021: LD_INT 2
40023: ARRAY
40024: PPUSH
40025: CALL_OW 111
// continue ;
40029: GO 39521
// end ; end ; r := GetDir ( tmp ) ;
40031: LD_ADDR_VAR 0 15
40035: PUSH
40036: LD_VAR 0 13
40040: PPUSH
40041: CALL_OW 254
40045: ST_TO_ADDR
// if r = 5 then
40046: LD_VAR 0 15
40050: PUSH
40051: LD_INT 5
40053: EQUAL
40054: IFFALSE 40064
// r := 0 ;
40056: LD_ADDR_VAR 0 15
40060: PUSH
40061: LD_INT 0
40063: ST_TO_ADDR
// for j = r to 5 do
40064: LD_ADDR_VAR 0 10
40068: PUSH
40069: DOUBLE
40070: LD_VAR 0 15
40074: DEC
40075: ST_TO_ADDR
40076: LD_INT 5
40078: PUSH
40079: FOR_TO
40080: IFFALSE 40194
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
40082: LD_ADDR_VAR 0 11
40086: PUSH
40087: LD_VAR 0 13
40091: PPUSH
40092: CALL_OW 250
40096: PPUSH
40097: LD_VAR 0 10
40101: PPUSH
40102: LD_INT 2
40104: PPUSH
40105: CALL_OW 272
40109: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
40110: LD_ADDR_VAR 0 12
40114: PUSH
40115: LD_VAR 0 13
40119: PPUSH
40120: CALL_OW 251
40124: PPUSH
40125: LD_VAR 0 10
40129: PPUSH
40130: LD_INT 2
40132: PPUSH
40133: CALL_OW 273
40137: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
40138: LD_VAR 0 11
40142: PPUSH
40143: LD_VAR 0 12
40147: PPUSH
40148: CALL_OW 488
40152: PUSH
40153: LD_VAR 0 11
40157: PPUSH
40158: LD_VAR 0 12
40162: PPUSH
40163: CALL_OW 428
40167: NOT
40168: AND
40169: IFFALSE 40192
// begin ComMoveXY ( tmp , _x , _y ) ;
40171: LD_VAR 0 13
40175: PPUSH
40176: LD_VAR 0 11
40180: PPUSH
40181: LD_VAR 0 12
40185: PPUSH
40186: CALL_OW 111
// break ;
40190: GO 40194
// end ; end ;
40192: GO 40079
40194: POP
40195: POP
// end ; end ;
40196: GO 39521
40198: POP
40199: POP
// end ;
40200: LD_VAR 0 8
40204: RET
// export function BuildingTechInvented ( side , btype ) ; begin
40205: LD_INT 0
40207: PPUSH
// result := true ;
40208: LD_ADDR_VAR 0 3
40212: PUSH
40213: LD_INT 1
40215: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
40216: LD_VAR 0 2
40220: PUSH
40221: LD_INT 24
40223: DOUBLE
40224: EQUAL
40225: IFTRUE 40235
40227: LD_INT 33
40229: DOUBLE
40230: EQUAL
40231: IFTRUE 40235
40233: GO 40260
40235: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
40236: LD_ADDR_VAR 0 3
40240: PUSH
40241: LD_INT 32
40243: PPUSH
40244: LD_VAR 0 1
40248: PPUSH
40249: CALL_OW 321
40253: PUSH
40254: LD_INT 2
40256: EQUAL
40257: ST_TO_ADDR
40258: GO 40576
40260: LD_INT 20
40262: DOUBLE
40263: EQUAL
40264: IFTRUE 40268
40266: GO 40293
40268: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
40269: LD_ADDR_VAR 0 3
40273: PUSH
40274: LD_INT 6
40276: PPUSH
40277: LD_VAR 0 1
40281: PPUSH
40282: CALL_OW 321
40286: PUSH
40287: LD_INT 2
40289: EQUAL
40290: ST_TO_ADDR
40291: GO 40576
40293: LD_INT 22
40295: DOUBLE
40296: EQUAL
40297: IFTRUE 40307
40299: LD_INT 36
40301: DOUBLE
40302: EQUAL
40303: IFTRUE 40307
40305: GO 40332
40307: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
40308: LD_ADDR_VAR 0 3
40312: PUSH
40313: LD_INT 15
40315: PPUSH
40316: LD_VAR 0 1
40320: PPUSH
40321: CALL_OW 321
40325: PUSH
40326: LD_INT 2
40328: EQUAL
40329: ST_TO_ADDR
40330: GO 40576
40332: LD_INT 30
40334: DOUBLE
40335: EQUAL
40336: IFTRUE 40340
40338: GO 40365
40340: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
40341: LD_ADDR_VAR 0 3
40345: PUSH
40346: LD_INT 20
40348: PPUSH
40349: LD_VAR 0 1
40353: PPUSH
40354: CALL_OW 321
40358: PUSH
40359: LD_INT 2
40361: EQUAL
40362: ST_TO_ADDR
40363: GO 40576
40365: LD_INT 28
40367: DOUBLE
40368: EQUAL
40369: IFTRUE 40379
40371: LD_INT 21
40373: DOUBLE
40374: EQUAL
40375: IFTRUE 40379
40377: GO 40404
40379: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
40380: LD_ADDR_VAR 0 3
40384: PUSH
40385: LD_INT 21
40387: PPUSH
40388: LD_VAR 0 1
40392: PPUSH
40393: CALL_OW 321
40397: PUSH
40398: LD_INT 2
40400: EQUAL
40401: ST_TO_ADDR
40402: GO 40576
40404: LD_INT 16
40406: DOUBLE
40407: EQUAL
40408: IFTRUE 40412
40410: GO 40437
40412: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
40413: LD_ADDR_VAR 0 3
40417: PUSH
40418: LD_INT 84
40420: PPUSH
40421: LD_VAR 0 1
40425: PPUSH
40426: CALL_OW 321
40430: PUSH
40431: LD_INT 2
40433: EQUAL
40434: ST_TO_ADDR
40435: GO 40576
40437: LD_INT 19
40439: DOUBLE
40440: EQUAL
40441: IFTRUE 40451
40443: LD_INT 23
40445: DOUBLE
40446: EQUAL
40447: IFTRUE 40451
40449: GO 40476
40451: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
40452: LD_ADDR_VAR 0 3
40456: PUSH
40457: LD_INT 83
40459: PPUSH
40460: LD_VAR 0 1
40464: PPUSH
40465: CALL_OW 321
40469: PUSH
40470: LD_INT 2
40472: EQUAL
40473: ST_TO_ADDR
40474: GO 40576
40476: LD_INT 17
40478: DOUBLE
40479: EQUAL
40480: IFTRUE 40484
40482: GO 40509
40484: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
40485: LD_ADDR_VAR 0 3
40489: PUSH
40490: LD_INT 39
40492: PPUSH
40493: LD_VAR 0 1
40497: PPUSH
40498: CALL_OW 321
40502: PUSH
40503: LD_INT 2
40505: EQUAL
40506: ST_TO_ADDR
40507: GO 40576
40509: LD_INT 18
40511: DOUBLE
40512: EQUAL
40513: IFTRUE 40517
40515: GO 40542
40517: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
40518: LD_ADDR_VAR 0 3
40522: PUSH
40523: LD_INT 40
40525: PPUSH
40526: LD_VAR 0 1
40530: PPUSH
40531: CALL_OW 321
40535: PUSH
40536: LD_INT 2
40538: EQUAL
40539: ST_TO_ADDR
40540: GO 40576
40542: LD_INT 27
40544: DOUBLE
40545: EQUAL
40546: IFTRUE 40550
40548: GO 40575
40550: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
40551: LD_ADDR_VAR 0 3
40555: PUSH
40556: LD_INT 35
40558: PPUSH
40559: LD_VAR 0 1
40563: PPUSH
40564: CALL_OW 321
40568: PUSH
40569: LD_INT 2
40571: EQUAL
40572: ST_TO_ADDR
40573: GO 40576
40575: POP
// end ;
40576: LD_VAR 0 3
40580: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
40581: LD_INT 0
40583: PPUSH
40584: PPUSH
40585: PPUSH
40586: PPUSH
40587: PPUSH
40588: PPUSH
40589: PPUSH
40590: PPUSH
40591: PPUSH
40592: PPUSH
40593: PPUSH
// result := false ;
40594: LD_ADDR_VAR 0 6
40598: PUSH
40599: LD_INT 0
40601: ST_TO_ADDR
// if btype = b_depot then
40602: LD_VAR 0 2
40606: PUSH
40607: LD_INT 0
40609: EQUAL
40610: IFFALSE 40622
// begin result := true ;
40612: LD_ADDR_VAR 0 6
40616: PUSH
40617: LD_INT 1
40619: ST_TO_ADDR
// exit ;
40620: GO 41448
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
40622: LD_VAR 0 1
40626: NOT
40627: PUSH
40628: LD_VAR 0 1
40632: PPUSH
40633: CALL_OW 266
40637: PUSH
40638: LD_INT 0
40640: PUSH
40641: LD_INT 1
40643: PUSH
40644: EMPTY
40645: LIST
40646: LIST
40647: IN
40648: NOT
40649: OR
40650: PUSH
40651: LD_VAR 0 2
40655: NOT
40656: OR
40657: PUSH
40658: LD_VAR 0 5
40662: PUSH
40663: LD_INT 0
40665: PUSH
40666: LD_INT 1
40668: PUSH
40669: LD_INT 2
40671: PUSH
40672: LD_INT 3
40674: PUSH
40675: LD_INT 4
40677: PUSH
40678: LD_INT 5
40680: PUSH
40681: EMPTY
40682: LIST
40683: LIST
40684: LIST
40685: LIST
40686: LIST
40687: LIST
40688: IN
40689: NOT
40690: OR
40691: PUSH
40692: LD_VAR 0 3
40696: PPUSH
40697: LD_VAR 0 4
40701: PPUSH
40702: CALL_OW 488
40706: NOT
40707: OR
40708: IFFALSE 40712
// exit ;
40710: GO 41448
// side := GetSide ( depot ) ;
40712: LD_ADDR_VAR 0 9
40716: PUSH
40717: LD_VAR 0 1
40721: PPUSH
40722: CALL_OW 255
40726: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
40727: LD_VAR 0 9
40731: PPUSH
40732: LD_VAR 0 2
40736: PPUSH
40737: CALL 40205 0 2
40741: NOT
40742: IFFALSE 40746
// exit ;
40744: GO 41448
// pom := GetBase ( depot ) ;
40746: LD_ADDR_VAR 0 10
40750: PUSH
40751: LD_VAR 0 1
40755: PPUSH
40756: CALL_OW 274
40760: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
40761: LD_ADDR_VAR 0 11
40765: PUSH
40766: LD_VAR 0 2
40770: PPUSH
40771: LD_VAR 0 1
40775: PPUSH
40776: CALL_OW 248
40780: PPUSH
40781: CALL_OW 450
40785: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
40786: LD_VAR 0 10
40790: PPUSH
40791: LD_INT 1
40793: PPUSH
40794: CALL_OW 275
40798: PUSH
40799: LD_VAR 0 11
40803: PUSH
40804: LD_INT 1
40806: ARRAY
40807: GREATEREQUAL
40808: PUSH
40809: LD_VAR 0 10
40813: PPUSH
40814: LD_INT 2
40816: PPUSH
40817: CALL_OW 275
40821: PUSH
40822: LD_VAR 0 11
40826: PUSH
40827: LD_INT 2
40829: ARRAY
40830: GREATEREQUAL
40831: AND
40832: PUSH
40833: LD_VAR 0 10
40837: PPUSH
40838: LD_INT 3
40840: PPUSH
40841: CALL_OW 275
40845: PUSH
40846: LD_VAR 0 11
40850: PUSH
40851: LD_INT 3
40853: ARRAY
40854: GREATEREQUAL
40855: AND
40856: NOT
40857: IFFALSE 40861
// exit ;
40859: GO 41448
// if GetBType ( depot ) = b_depot then
40861: LD_VAR 0 1
40865: PPUSH
40866: CALL_OW 266
40870: PUSH
40871: LD_INT 0
40873: EQUAL
40874: IFFALSE 40886
// dist := 28 else
40876: LD_ADDR_VAR 0 14
40880: PUSH
40881: LD_INT 28
40883: ST_TO_ADDR
40884: GO 40894
// dist := 36 ;
40886: LD_ADDR_VAR 0 14
40890: PUSH
40891: LD_INT 36
40893: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
40894: LD_VAR 0 1
40898: PPUSH
40899: LD_VAR 0 3
40903: PPUSH
40904: LD_VAR 0 4
40908: PPUSH
40909: CALL_OW 297
40913: PUSH
40914: LD_VAR 0 14
40918: GREATER
40919: IFFALSE 40923
// exit ;
40921: GO 41448
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
40923: LD_ADDR_VAR 0 12
40927: PUSH
40928: LD_VAR 0 2
40932: PPUSH
40933: LD_VAR 0 3
40937: PPUSH
40938: LD_VAR 0 4
40942: PPUSH
40943: LD_VAR 0 5
40947: PPUSH
40948: LD_VAR 0 1
40952: PPUSH
40953: CALL_OW 248
40957: PPUSH
40958: LD_INT 0
40960: PPUSH
40961: CALL 41453 0 6
40965: ST_TO_ADDR
// if not hexes then
40966: LD_VAR 0 12
40970: NOT
40971: IFFALSE 40975
// exit ;
40973: GO 41448
// hex := GetHexInfo ( x , y ) ;
40975: LD_ADDR_VAR 0 15
40979: PUSH
40980: LD_VAR 0 3
40984: PPUSH
40985: LD_VAR 0 4
40989: PPUSH
40990: CALL_OW 546
40994: ST_TO_ADDR
// if hex [ 1 ] then
40995: LD_VAR 0 15
40999: PUSH
41000: LD_INT 1
41002: ARRAY
41003: IFFALSE 41007
// exit ;
41005: GO 41448
// height := hex [ 2 ] ;
41007: LD_ADDR_VAR 0 13
41011: PUSH
41012: LD_VAR 0 15
41016: PUSH
41017: LD_INT 2
41019: ARRAY
41020: ST_TO_ADDR
// for i = 1 to hexes do
41021: LD_ADDR_VAR 0 7
41025: PUSH
41026: DOUBLE
41027: LD_INT 1
41029: DEC
41030: ST_TO_ADDR
41031: LD_VAR 0 12
41035: PUSH
41036: FOR_TO
41037: IFFALSE 41367
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
41039: LD_VAR 0 12
41043: PUSH
41044: LD_VAR 0 7
41048: ARRAY
41049: PUSH
41050: LD_INT 1
41052: ARRAY
41053: PPUSH
41054: LD_VAR 0 12
41058: PUSH
41059: LD_VAR 0 7
41063: ARRAY
41064: PUSH
41065: LD_INT 2
41067: ARRAY
41068: PPUSH
41069: CALL_OW 488
41073: NOT
41074: PUSH
41075: LD_VAR 0 12
41079: PUSH
41080: LD_VAR 0 7
41084: ARRAY
41085: PUSH
41086: LD_INT 1
41088: ARRAY
41089: PPUSH
41090: LD_VAR 0 12
41094: PUSH
41095: LD_VAR 0 7
41099: ARRAY
41100: PUSH
41101: LD_INT 2
41103: ARRAY
41104: PPUSH
41105: CALL_OW 428
41109: PUSH
41110: LD_INT 0
41112: GREATER
41113: OR
41114: PUSH
41115: LD_VAR 0 12
41119: PUSH
41120: LD_VAR 0 7
41124: ARRAY
41125: PUSH
41126: LD_INT 1
41128: ARRAY
41129: PPUSH
41130: LD_VAR 0 12
41134: PUSH
41135: LD_VAR 0 7
41139: ARRAY
41140: PUSH
41141: LD_INT 2
41143: ARRAY
41144: PPUSH
41145: CALL_OW 351
41149: OR
41150: IFFALSE 41156
// exit ;
41152: POP
41153: POP
41154: GO 41448
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41156: LD_ADDR_VAR 0 8
41160: PUSH
41161: LD_VAR 0 12
41165: PUSH
41166: LD_VAR 0 7
41170: ARRAY
41171: PUSH
41172: LD_INT 1
41174: ARRAY
41175: PPUSH
41176: LD_VAR 0 12
41180: PUSH
41181: LD_VAR 0 7
41185: ARRAY
41186: PUSH
41187: LD_INT 2
41189: ARRAY
41190: PPUSH
41191: CALL_OW 546
41195: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
41196: LD_VAR 0 8
41200: PUSH
41201: LD_INT 1
41203: ARRAY
41204: PUSH
41205: LD_VAR 0 8
41209: PUSH
41210: LD_INT 2
41212: ARRAY
41213: PUSH
41214: LD_VAR 0 13
41218: PUSH
41219: LD_INT 2
41221: PLUS
41222: GREATER
41223: OR
41224: PUSH
41225: LD_VAR 0 8
41229: PUSH
41230: LD_INT 2
41232: ARRAY
41233: PUSH
41234: LD_VAR 0 13
41238: PUSH
41239: LD_INT 2
41241: MINUS
41242: LESS
41243: OR
41244: PUSH
41245: LD_VAR 0 8
41249: PUSH
41250: LD_INT 3
41252: ARRAY
41253: PUSH
41254: LD_INT 0
41256: PUSH
41257: LD_INT 8
41259: PUSH
41260: LD_INT 9
41262: PUSH
41263: LD_INT 10
41265: PUSH
41266: LD_INT 11
41268: PUSH
41269: LD_INT 12
41271: PUSH
41272: LD_INT 13
41274: PUSH
41275: LD_INT 16
41277: PUSH
41278: LD_INT 17
41280: PUSH
41281: LD_INT 18
41283: PUSH
41284: LD_INT 19
41286: PUSH
41287: LD_INT 20
41289: PUSH
41290: LD_INT 21
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: LIST
41297: LIST
41298: LIST
41299: LIST
41300: LIST
41301: LIST
41302: LIST
41303: LIST
41304: LIST
41305: LIST
41306: LIST
41307: IN
41308: NOT
41309: OR
41310: PUSH
41311: LD_VAR 0 8
41315: PUSH
41316: LD_INT 5
41318: ARRAY
41319: NOT
41320: OR
41321: PUSH
41322: LD_VAR 0 8
41326: PUSH
41327: LD_INT 6
41329: ARRAY
41330: PUSH
41331: LD_INT 1
41333: PUSH
41334: LD_INT 2
41336: PUSH
41337: LD_INT 7
41339: PUSH
41340: LD_INT 9
41342: PUSH
41343: LD_INT 10
41345: PUSH
41346: LD_INT 11
41348: PUSH
41349: EMPTY
41350: LIST
41351: LIST
41352: LIST
41353: LIST
41354: LIST
41355: LIST
41356: IN
41357: NOT
41358: OR
41359: IFFALSE 41365
// exit ;
41361: POP
41362: POP
41363: GO 41448
// end ;
41365: GO 41036
41367: POP
41368: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
41369: LD_VAR 0 9
41373: PPUSH
41374: LD_VAR 0 3
41378: PPUSH
41379: LD_VAR 0 4
41383: PPUSH
41384: LD_INT 20
41386: PPUSH
41387: CALL 33371 0 4
41391: PUSH
41392: LD_INT 4
41394: ARRAY
41395: IFFALSE 41399
// exit ;
41397: GO 41448
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
41399: LD_VAR 0 2
41403: PUSH
41404: LD_INT 29
41406: PUSH
41407: LD_INT 30
41409: PUSH
41410: EMPTY
41411: LIST
41412: LIST
41413: IN
41414: PUSH
41415: LD_VAR 0 3
41419: PPUSH
41420: LD_VAR 0 4
41424: PPUSH
41425: LD_VAR 0 9
41429: PPUSH
41430: CALL_OW 440
41434: NOT
41435: AND
41436: IFFALSE 41440
// exit ;
41438: GO 41448
// result := true ;
41440: LD_ADDR_VAR 0 6
41444: PUSH
41445: LD_INT 1
41447: ST_TO_ADDR
// end ;
41448: LD_VAR 0 6
41452: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
41453: LD_INT 0
41455: PPUSH
41456: PPUSH
41457: PPUSH
41458: PPUSH
41459: PPUSH
41460: PPUSH
41461: PPUSH
41462: PPUSH
41463: PPUSH
41464: PPUSH
41465: PPUSH
41466: PPUSH
41467: PPUSH
41468: PPUSH
41469: PPUSH
41470: PPUSH
41471: PPUSH
41472: PPUSH
41473: PPUSH
41474: PPUSH
41475: PPUSH
41476: PPUSH
41477: PPUSH
41478: PPUSH
41479: PPUSH
41480: PPUSH
41481: PPUSH
41482: PPUSH
41483: PPUSH
41484: PPUSH
41485: PPUSH
41486: PPUSH
41487: PPUSH
41488: PPUSH
41489: PPUSH
41490: PPUSH
41491: PPUSH
41492: PPUSH
41493: PPUSH
41494: PPUSH
41495: PPUSH
41496: PPUSH
41497: PPUSH
41498: PPUSH
41499: PPUSH
41500: PPUSH
41501: PPUSH
41502: PPUSH
41503: PPUSH
41504: PPUSH
41505: PPUSH
41506: PPUSH
41507: PPUSH
41508: PPUSH
41509: PPUSH
41510: PPUSH
41511: PPUSH
41512: PPUSH
// result = [ ] ;
41513: LD_ADDR_VAR 0 7
41517: PUSH
41518: EMPTY
41519: ST_TO_ADDR
// temp_list = [ ] ;
41520: LD_ADDR_VAR 0 9
41524: PUSH
41525: EMPTY
41526: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
41527: LD_VAR 0 4
41531: PUSH
41532: LD_INT 0
41534: PUSH
41535: LD_INT 1
41537: PUSH
41538: LD_INT 2
41540: PUSH
41541: LD_INT 3
41543: PUSH
41544: LD_INT 4
41546: PUSH
41547: LD_INT 5
41549: PUSH
41550: EMPTY
41551: LIST
41552: LIST
41553: LIST
41554: LIST
41555: LIST
41556: LIST
41557: IN
41558: NOT
41559: PUSH
41560: LD_VAR 0 1
41564: PUSH
41565: LD_INT 0
41567: PUSH
41568: LD_INT 1
41570: PUSH
41571: EMPTY
41572: LIST
41573: LIST
41574: IN
41575: PUSH
41576: LD_VAR 0 5
41580: PUSH
41581: LD_INT 1
41583: PUSH
41584: LD_INT 2
41586: PUSH
41587: LD_INT 3
41589: PUSH
41590: EMPTY
41591: LIST
41592: LIST
41593: LIST
41594: IN
41595: NOT
41596: AND
41597: OR
41598: IFFALSE 41602
// exit ;
41600: GO 59993
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
41602: LD_VAR 0 1
41606: PUSH
41607: LD_INT 6
41609: PUSH
41610: LD_INT 7
41612: PUSH
41613: LD_INT 8
41615: PUSH
41616: LD_INT 13
41618: PUSH
41619: LD_INT 12
41621: PUSH
41622: LD_INT 15
41624: PUSH
41625: LD_INT 11
41627: PUSH
41628: LD_INT 14
41630: PUSH
41631: LD_INT 10
41633: PUSH
41634: EMPTY
41635: LIST
41636: LIST
41637: LIST
41638: LIST
41639: LIST
41640: LIST
41641: LIST
41642: LIST
41643: LIST
41644: IN
41645: IFFALSE 41655
// btype = b_lab ;
41647: LD_ADDR_VAR 0 1
41651: PUSH
41652: LD_INT 6
41654: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
41655: LD_VAR 0 6
41659: PUSH
41660: LD_INT 0
41662: PUSH
41663: LD_INT 1
41665: PUSH
41666: LD_INT 2
41668: PUSH
41669: EMPTY
41670: LIST
41671: LIST
41672: LIST
41673: IN
41674: NOT
41675: PUSH
41676: LD_VAR 0 1
41680: PUSH
41681: LD_INT 0
41683: PUSH
41684: LD_INT 1
41686: PUSH
41687: LD_INT 2
41689: PUSH
41690: LD_INT 3
41692: PUSH
41693: LD_INT 6
41695: PUSH
41696: LD_INT 36
41698: PUSH
41699: LD_INT 4
41701: PUSH
41702: LD_INT 5
41704: PUSH
41705: LD_INT 31
41707: PUSH
41708: LD_INT 32
41710: PUSH
41711: LD_INT 33
41713: PUSH
41714: EMPTY
41715: LIST
41716: LIST
41717: LIST
41718: LIST
41719: LIST
41720: LIST
41721: LIST
41722: LIST
41723: LIST
41724: LIST
41725: LIST
41726: IN
41727: NOT
41728: PUSH
41729: LD_VAR 0 6
41733: PUSH
41734: LD_INT 1
41736: EQUAL
41737: AND
41738: OR
41739: PUSH
41740: LD_VAR 0 1
41744: PUSH
41745: LD_INT 2
41747: PUSH
41748: LD_INT 3
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: IN
41755: NOT
41756: PUSH
41757: LD_VAR 0 6
41761: PUSH
41762: LD_INT 2
41764: EQUAL
41765: AND
41766: OR
41767: IFFALSE 41777
// mode = 0 ;
41769: LD_ADDR_VAR 0 6
41773: PUSH
41774: LD_INT 0
41776: ST_TO_ADDR
// case mode of 0 :
41777: LD_VAR 0 6
41781: PUSH
41782: LD_INT 0
41784: DOUBLE
41785: EQUAL
41786: IFTRUE 41790
41788: GO 53243
41790: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41791: LD_ADDR_VAR 0 11
41795: PUSH
41796: LD_INT 0
41798: PUSH
41799: LD_INT 0
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: PUSH
41806: LD_INT 0
41808: PUSH
41809: LD_INT 1
41811: NEG
41812: PUSH
41813: EMPTY
41814: LIST
41815: LIST
41816: PUSH
41817: LD_INT 1
41819: PUSH
41820: LD_INT 0
41822: PUSH
41823: EMPTY
41824: LIST
41825: LIST
41826: PUSH
41827: LD_INT 1
41829: PUSH
41830: LD_INT 1
41832: PUSH
41833: EMPTY
41834: LIST
41835: LIST
41836: PUSH
41837: LD_INT 0
41839: PUSH
41840: LD_INT 1
41842: PUSH
41843: EMPTY
41844: LIST
41845: LIST
41846: PUSH
41847: LD_INT 1
41849: NEG
41850: PUSH
41851: LD_INT 0
41853: PUSH
41854: EMPTY
41855: LIST
41856: LIST
41857: PUSH
41858: LD_INT 1
41860: NEG
41861: PUSH
41862: LD_INT 1
41864: NEG
41865: PUSH
41866: EMPTY
41867: LIST
41868: LIST
41869: PUSH
41870: LD_INT 1
41872: NEG
41873: PUSH
41874: LD_INT 2
41876: NEG
41877: PUSH
41878: EMPTY
41879: LIST
41880: LIST
41881: PUSH
41882: LD_INT 0
41884: PUSH
41885: LD_INT 2
41887: NEG
41888: PUSH
41889: EMPTY
41890: LIST
41891: LIST
41892: PUSH
41893: LD_INT 1
41895: PUSH
41896: LD_INT 1
41898: NEG
41899: PUSH
41900: EMPTY
41901: LIST
41902: LIST
41903: PUSH
41904: LD_INT 1
41906: PUSH
41907: LD_INT 2
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: PUSH
41914: LD_INT 0
41916: PUSH
41917: LD_INT 2
41919: PUSH
41920: EMPTY
41921: LIST
41922: LIST
41923: PUSH
41924: LD_INT 1
41926: NEG
41927: PUSH
41928: LD_INT 1
41930: PUSH
41931: EMPTY
41932: LIST
41933: LIST
41934: PUSH
41935: LD_INT 1
41937: PUSH
41938: LD_INT 3
41940: PUSH
41941: EMPTY
41942: LIST
41943: LIST
41944: PUSH
41945: LD_INT 0
41947: PUSH
41948: LD_INT 3
41950: PUSH
41951: EMPTY
41952: LIST
41953: LIST
41954: PUSH
41955: LD_INT 1
41957: NEG
41958: PUSH
41959: LD_INT 2
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: PUSH
41966: EMPTY
41967: LIST
41968: LIST
41969: LIST
41970: LIST
41971: LIST
41972: LIST
41973: LIST
41974: LIST
41975: LIST
41976: LIST
41977: LIST
41978: LIST
41979: LIST
41980: LIST
41981: LIST
41982: LIST
41983: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41984: LD_ADDR_VAR 0 12
41988: PUSH
41989: LD_INT 0
41991: PUSH
41992: LD_INT 0
41994: PUSH
41995: EMPTY
41996: LIST
41997: LIST
41998: PUSH
41999: LD_INT 0
42001: PUSH
42002: LD_INT 1
42004: NEG
42005: PUSH
42006: EMPTY
42007: LIST
42008: LIST
42009: PUSH
42010: LD_INT 1
42012: PUSH
42013: LD_INT 0
42015: PUSH
42016: EMPTY
42017: LIST
42018: LIST
42019: PUSH
42020: LD_INT 1
42022: PUSH
42023: LD_INT 1
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: PUSH
42030: LD_INT 0
42032: PUSH
42033: LD_INT 1
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: PUSH
42040: LD_INT 1
42042: NEG
42043: PUSH
42044: LD_INT 0
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: PUSH
42051: LD_INT 1
42053: NEG
42054: PUSH
42055: LD_INT 1
42057: NEG
42058: PUSH
42059: EMPTY
42060: LIST
42061: LIST
42062: PUSH
42063: LD_INT 1
42065: PUSH
42066: LD_INT 1
42068: NEG
42069: PUSH
42070: EMPTY
42071: LIST
42072: LIST
42073: PUSH
42074: LD_INT 2
42076: PUSH
42077: LD_INT 0
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PUSH
42084: LD_INT 2
42086: PUSH
42087: LD_INT 1
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: PUSH
42094: LD_INT 1
42096: NEG
42097: PUSH
42098: LD_INT 1
42100: PUSH
42101: EMPTY
42102: LIST
42103: LIST
42104: PUSH
42105: LD_INT 2
42107: NEG
42108: PUSH
42109: LD_INT 0
42111: PUSH
42112: EMPTY
42113: LIST
42114: LIST
42115: PUSH
42116: LD_INT 2
42118: NEG
42119: PUSH
42120: LD_INT 1
42122: NEG
42123: PUSH
42124: EMPTY
42125: LIST
42126: LIST
42127: PUSH
42128: LD_INT 2
42130: NEG
42131: PUSH
42132: LD_INT 1
42134: PUSH
42135: EMPTY
42136: LIST
42137: LIST
42138: PUSH
42139: LD_INT 3
42141: NEG
42142: PUSH
42143: LD_INT 0
42145: PUSH
42146: EMPTY
42147: LIST
42148: LIST
42149: PUSH
42150: LD_INT 3
42152: NEG
42153: PUSH
42154: LD_INT 1
42156: NEG
42157: PUSH
42158: EMPTY
42159: LIST
42160: LIST
42161: PUSH
42162: EMPTY
42163: LIST
42164: LIST
42165: LIST
42166: LIST
42167: LIST
42168: LIST
42169: LIST
42170: LIST
42171: LIST
42172: LIST
42173: LIST
42174: LIST
42175: LIST
42176: LIST
42177: LIST
42178: LIST
42179: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42180: LD_ADDR_VAR 0 13
42184: PUSH
42185: LD_INT 0
42187: PUSH
42188: LD_INT 0
42190: PUSH
42191: EMPTY
42192: LIST
42193: LIST
42194: PUSH
42195: LD_INT 0
42197: PUSH
42198: LD_INT 1
42200: NEG
42201: PUSH
42202: EMPTY
42203: LIST
42204: LIST
42205: PUSH
42206: LD_INT 1
42208: PUSH
42209: LD_INT 0
42211: PUSH
42212: EMPTY
42213: LIST
42214: LIST
42215: PUSH
42216: LD_INT 1
42218: PUSH
42219: LD_INT 1
42221: PUSH
42222: EMPTY
42223: LIST
42224: LIST
42225: PUSH
42226: LD_INT 0
42228: PUSH
42229: LD_INT 1
42231: PUSH
42232: EMPTY
42233: LIST
42234: LIST
42235: PUSH
42236: LD_INT 1
42238: NEG
42239: PUSH
42240: LD_INT 0
42242: PUSH
42243: EMPTY
42244: LIST
42245: LIST
42246: PUSH
42247: LD_INT 1
42249: NEG
42250: PUSH
42251: LD_INT 1
42253: NEG
42254: PUSH
42255: EMPTY
42256: LIST
42257: LIST
42258: PUSH
42259: LD_INT 1
42261: NEG
42262: PUSH
42263: LD_INT 2
42265: NEG
42266: PUSH
42267: EMPTY
42268: LIST
42269: LIST
42270: PUSH
42271: LD_INT 2
42273: PUSH
42274: LD_INT 1
42276: PUSH
42277: EMPTY
42278: LIST
42279: LIST
42280: PUSH
42281: LD_INT 2
42283: PUSH
42284: LD_INT 2
42286: PUSH
42287: EMPTY
42288: LIST
42289: LIST
42290: PUSH
42291: LD_INT 1
42293: PUSH
42294: LD_INT 2
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: PUSH
42301: LD_INT 2
42303: NEG
42304: PUSH
42305: LD_INT 1
42307: NEG
42308: PUSH
42309: EMPTY
42310: LIST
42311: LIST
42312: PUSH
42313: LD_INT 2
42315: NEG
42316: PUSH
42317: LD_INT 2
42319: NEG
42320: PUSH
42321: EMPTY
42322: LIST
42323: LIST
42324: PUSH
42325: LD_INT 2
42327: NEG
42328: PUSH
42329: LD_INT 3
42331: NEG
42332: PUSH
42333: EMPTY
42334: LIST
42335: LIST
42336: PUSH
42337: LD_INT 3
42339: NEG
42340: PUSH
42341: LD_INT 2
42343: NEG
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: PUSH
42349: LD_INT 3
42351: NEG
42352: PUSH
42353: LD_INT 3
42355: NEG
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: PUSH
42361: EMPTY
42362: LIST
42363: LIST
42364: LIST
42365: LIST
42366: LIST
42367: LIST
42368: LIST
42369: LIST
42370: LIST
42371: LIST
42372: LIST
42373: LIST
42374: LIST
42375: LIST
42376: LIST
42377: LIST
42378: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42379: LD_ADDR_VAR 0 14
42383: PUSH
42384: LD_INT 0
42386: PUSH
42387: LD_INT 0
42389: PUSH
42390: EMPTY
42391: LIST
42392: LIST
42393: PUSH
42394: LD_INT 0
42396: PUSH
42397: LD_INT 1
42399: NEG
42400: PUSH
42401: EMPTY
42402: LIST
42403: LIST
42404: PUSH
42405: LD_INT 1
42407: PUSH
42408: LD_INT 0
42410: PUSH
42411: EMPTY
42412: LIST
42413: LIST
42414: PUSH
42415: LD_INT 1
42417: PUSH
42418: LD_INT 1
42420: PUSH
42421: EMPTY
42422: LIST
42423: LIST
42424: PUSH
42425: LD_INT 0
42427: PUSH
42428: LD_INT 1
42430: PUSH
42431: EMPTY
42432: LIST
42433: LIST
42434: PUSH
42435: LD_INT 1
42437: NEG
42438: PUSH
42439: LD_INT 0
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: PUSH
42446: LD_INT 1
42448: NEG
42449: PUSH
42450: LD_INT 1
42452: NEG
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: PUSH
42458: LD_INT 1
42460: NEG
42461: PUSH
42462: LD_INT 2
42464: NEG
42465: PUSH
42466: EMPTY
42467: LIST
42468: LIST
42469: PUSH
42470: LD_INT 0
42472: PUSH
42473: LD_INT 2
42475: NEG
42476: PUSH
42477: EMPTY
42478: LIST
42479: LIST
42480: PUSH
42481: LD_INT 1
42483: PUSH
42484: LD_INT 1
42486: NEG
42487: PUSH
42488: EMPTY
42489: LIST
42490: LIST
42491: PUSH
42492: LD_INT 1
42494: PUSH
42495: LD_INT 2
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: PUSH
42502: LD_INT 0
42504: PUSH
42505: LD_INT 2
42507: PUSH
42508: EMPTY
42509: LIST
42510: LIST
42511: PUSH
42512: LD_INT 1
42514: NEG
42515: PUSH
42516: LD_INT 1
42518: PUSH
42519: EMPTY
42520: LIST
42521: LIST
42522: PUSH
42523: LD_INT 1
42525: NEG
42526: PUSH
42527: LD_INT 3
42529: NEG
42530: PUSH
42531: EMPTY
42532: LIST
42533: LIST
42534: PUSH
42535: LD_INT 0
42537: PUSH
42538: LD_INT 3
42540: NEG
42541: PUSH
42542: EMPTY
42543: LIST
42544: LIST
42545: PUSH
42546: LD_INT 1
42548: PUSH
42549: LD_INT 2
42551: NEG
42552: PUSH
42553: EMPTY
42554: LIST
42555: LIST
42556: PUSH
42557: EMPTY
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: LIST
42566: LIST
42567: LIST
42568: LIST
42569: LIST
42570: LIST
42571: LIST
42572: LIST
42573: LIST
42574: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42575: LD_ADDR_VAR 0 15
42579: PUSH
42580: LD_INT 0
42582: PUSH
42583: LD_INT 0
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: PUSH
42590: LD_INT 0
42592: PUSH
42593: LD_INT 1
42595: NEG
42596: PUSH
42597: EMPTY
42598: LIST
42599: LIST
42600: PUSH
42601: LD_INT 1
42603: PUSH
42604: LD_INT 0
42606: PUSH
42607: EMPTY
42608: LIST
42609: LIST
42610: PUSH
42611: LD_INT 1
42613: PUSH
42614: LD_INT 1
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: PUSH
42621: LD_INT 0
42623: PUSH
42624: LD_INT 1
42626: PUSH
42627: EMPTY
42628: LIST
42629: LIST
42630: PUSH
42631: LD_INT 1
42633: NEG
42634: PUSH
42635: LD_INT 0
42637: PUSH
42638: EMPTY
42639: LIST
42640: LIST
42641: PUSH
42642: LD_INT 1
42644: NEG
42645: PUSH
42646: LD_INT 1
42648: NEG
42649: PUSH
42650: EMPTY
42651: LIST
42652: LIST
42653: PUSH
42654: LD_INT 1
42656: PUSH
42657: LD_INT 1
42659: NEG
42660: PUSH
42661: EMPTY
42662: LIST
42663: LIST
42664: PUSH
42665: LD_INT 2
42667: PUSH
42668: LD_INT 0
42670: PUSH
42671: EMPTY
42672: LIST
42673: LIST
42674: PUSH
42675: LD_INT 2
42677: PUSH
42678: LD_INT 1
42680: PUSH
42681: EMPTY
42682: LIST
42683: LIST
42684: PUSH
42685: LD_INT 1
42687: NEG
42688: PUSH
42689: LD_INT 1
42691: PUSH
42692: EMPTY
42693: LIST
42694: LIST
42695: PUSH
42696: LD_INT 2
42698: NEG
42699: PUSH
42700: LD_INT 0
42702: PUSH
42703: EMPTY
42704: LIST
42705: LIST
42706: PUSH
42707: LD_INT 2
42709: NEG
42710: PUSH
42711: LD_INT 1
42713: NEG
42714: PUSH
42715: EMPTY
42716: LIST
42717: LIST
42718: PUSH
42719: LD_INT 2
42721: PUSH
42722: LD_INT 1
42724: NEG
42725: PUSH
42726: EMPTY
42727: LIST
42728: LIST
42729: PUSH
42730: LD_INT 3
42732: PUSH
42733: LD_INT 0
42735: PUSH
42736: EMPTY
42737: LIST
42738: LIST
42739: PUSH
42740: LD_INT 3
42742: PUSH
42743: LD_INT 1
42745: PUSH
42746: EMPTY
42747: LIST
42748: LIST
42749: PUSH
42750: EMPTY
42751: LIST
42752: LIST
42753: LIST
42754: LIST
42755: LIST
42756: LIST
42757: LIST
42758: LIST
42759: LIST
42760: LIST
42761: LIST
42762: LIST
42763: LIST
42764: LIST
42765: LIST
42766: LIST
42767: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42768: LD_ADDR_VAR 0 16
42772: PUSH
42773: LD_INT 0
42775: PUSH
42776: LD_INT 0
42778: PUSH
42779: EMPTY
42780: LIST
42781: LIST
42782: PUSH
42783: LD_INT 0
42785: PUSH
42786: LD_INT 1
42788: NEG
42789: PUSH
42790: EMPTY
42791: LIST
42792: LIST
42793: PUSH
42794: LD_INT 1
42796: PUSH
42797: LD_INT 0
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: PUSH
42804: LD_INT 1
42806: PUSH
42807: LD_INT 1
42809: PUSH
42810: EMPTY
42811: LIST
42812: LIST
42813: PUSH
42814: LD_INT 0
42816: PUSH
42817: LD_INT 1
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: PUSH
42824: LD_INT 1
42826: NEG
42827: PUSH
42828: LD_INT 0
42830: PUSH
42831: EMPTY
42832: LIST
42833: LIST
42834: PUSH
42835: LD_INT 1
42837: NEG
42838: PUSH
42839: LD_INT 1
42841: NEG
42842: PUSH
42843: EMPTY
42844: LIST
42845: LIST
42846: PUSH
42847: LD_INT 1
42849: NEG
42850: PUSH
42851: LD_INT 2
42853: NEG
42854: PUSH
42855: EMPTY
42856: LIST
42857: LIST
42858: PUSH
42859: LD_INT 2
42861: PUSH
42862: LD_INT 1
42864: PUSH
42865: EMPTY
42866: LIST
42867: LIST
42868: PUSH
42869: LD_INT 2
42871: PUSH
42872: LD_INT 2
42874: PUSH
42875: EMPTY
42876: LIST
42877: LIST
42878: PUSH
42879: LD_INT 1
42881: PUSH
42882: LD_INT 2
42884: PUSH
42885: EMPTY
42886: LIST
42887: LIST
42888: PUSH
42889: LD_INT 2
42891: NEG
42892: PUSH
42893: LD_INT 1
42895: NEG
42896: PUSH
42897: EMPTY
42898: LIST
42899: LIST
42900: PUSH
42901: LD_INT 2
42903: NEG
42904: PUSH
42905: LD_INT 2
42907: NEG
42908: PUSH
42909: EMPTY
42910: LIST
42911: LIST
42912: PUSH
42913: LD_INT 3
42915: PUSH
42916: LD_INT 2
42918: PUSH
42919: EMPTY
42920: LIST
42921: LIST
42922: PUSH
42923: LD_INT 3
42925: PUSH
42926: LD_INT 3
42928: PUSH
42929: EMPTY
42930: LIST
42931: LIST
42932: PUSH
42933: LD_INT 2
42935: PUSH
42936: LD_INT 3
42938: PUSH
42939: EMPTY
42940: LIST
42941: LIST
42942: PUSH
42943: EMPTY
42944: LIST
42945: LIST
42946: LIST
42947: LIST
42948: LIST
42949: LIST
42950: LIST
42951: LIST
42952: LIST
42953: LIST
42954: LIST
42955: LIST
42956: LIST
42957: LIST
42958: LIST
42959: LIST
42960: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42961: LD_ADDR_VAR 0 17
42965: PUSH
42966: LD_INT 0
42968: PUSH
42969: LD_INT 0
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: PUSH
42976: LD_INT 0
42978: PUSH
42979: LD_INT 1
42981: NEG
42982: PUSH
42983: EMPTY
42984: LIST
42985: LIST
42986: PUSH
42987: LD_INT 1
42989: PUSH
42990: LD_INT 0
42992: PUSH
42993: EMPTY
42994: LIST
42995: LIST
42996: PUSH
42997: LD_INT 1
42999: PUSH
43000: LD_INT 1
43002: PUSH
43003: EMPTY
43004: LIST
43005: LIST
43006: PUSH
43007: LD_INT 0
43009: PUSH
43010: LD_INT 1
43012: PUSH
43013: EMPTY
43014: LIST
43015: LIST
43016: PUSH
43017: LD_INT 1
43019: NEG
43020: PUSH
43021: LD_INT 0
43023: PUSH
43024: EMPTY
43025: LIST
43026: LIST
43027: PUSH
43028: LD_INT 1
43030: NEG
43031: PUSH
43032: LD_INT 1
43034: NEG
43035: PUSH
43036: EMPTY
43037: LIST
43038: LIST
43039: PUSH
43040: LD_INT 1
43042: NEG
43043: PUSH
43044: LD_INT 2
43046: NEG
43047: PUSH
43048: EMPTY
43049: LIST
43050: LIST
43051: PUSH
43052: LD_INT 0
43054: PUSH
43055: LD_INT 2
43057: NEG
43058: PUSH
43059: EMPTY
43060: LIST
43061: LIST
43062: PUSH
43063: LD_INT 1
43065: PUSH
43066: LD_INT 1
43068: NEG
43069: PUSH
43070: EMPTY
43071: LIST
43072: LIST
43073: PUSH
43074: LD_INT 2
43076: PUSH
43077: LD_INT 0
43079: PUSH
43080: EMPTY
43081: LIST
43082: LIST
43083: PUSH
43084: LD_INT 2
43086: PUSH
43087: LD_INT 1
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: PUSH
43094: LD_INT 2
43096: PUSH
43097: LD_INT 2
43099: PUSH
43100: EMPTY
43101: LIST
43102: LIST
43103: PUSH
43104: LD_INT 1
43106: PUSH
43107: LD_INT 2
43109: PUSH
43110: EMPTY
43111: LIST
43112: LIST
43113: PUSH
43114: LD_INT 0
43116: PUSH
43117: LD_INT 2
43119: PUSH
43120: EMPTY
43121: LIST
43122: LIST
43123: PUSH
43124: LD_INT 1
43126: NEG
43127: PUSH
43128: LD_INT 1
43130: PUSH
43131: EMPTY
43132: LIST
43133: LIST
43134: PUSH
43135: LD_INT 2
43137: NEG
43138: PUSH
43139: LD_INT 0
43141: PUSH
43142: EMPTY
43143: LIST
43144: LIST
43145: PUSH
43146: LD_INT 2
43148: NEG
43149: PUSH
43150: LD_INT 1
43152: NEG
43153: PUSH
43154: EMPTY
43155: LIST
43156: LIST
43157: PUSH
43158: LD_INT 2
43160: NEG
43161: PUSH
43162: LD_INT 2
43164: NEG
43165: PUSH
43166: EMPTY
43167: LIST
43168: LIST
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: LIST
43174: LIST
43175: LIST
43176: LIST
43177: LIST
43178: LIST
43179: LIST
43180: LIST
43181: LIST
43182: LIST
43183: LIST
43184: LIST
43185: LIST
43186: LIST
43187: LIST
43188: LIST
43189: LIST
43190: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43191: LD_ADDR_VAR 0 18
43195: PUSH
43196: LD_INT 0
43198: PUSH
43199: LD_INT 0
43201: PUSH
43202: EMPTY
43203: LIST
43204: LIST
43205: PUSH
43206: LD_INT 0
43208: PUSH
43209: LD_INT 1
43211: NEG
43212: PUSH
43213: EMPTY
43214: LIST
43215: LIST
43216: PUSH
43217: LD_INT 1
43219: PUSH
43220: LD_INT 0
43222: PUSH
43223: EMPTY
43224: LIST
43225: LIST
43226: PUSH
43227: LD_INT 1
43229: PUSH
43230: LD_INT 1
43232: PUSH
43233: EMPTY
43234: LIST
43235: LIST
43236: PUSH
43237: LD_INT 0
43239: PUSH
43240: LD_INT 1
43242: PUSH
43243: EMPTY
43244: LIST
43245: LIST
43246: PUSH
43247: LD_INT 1
43249: NEG
43250: PUSH
43251: LD_INT 0
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: PUSH
43258: LD_INT 1
43260: NEG
43261: PUSH
43262: LD_INT 1
43264: NEG
43265: PUSH
43266: EMPTY
43267: LIST
43268: LIST
43269: PUSH
43270: LD_INT 1
43272: NEG
43273: PUSH
43274: LD_INT 2
43276: NEG
43277: PUSH
43278: EMPTY
43279: LIST
43280: LIST
43281: PUSH
43282: LD_INT 0
43284: PUSH
43285: LD_INT 2
43287: NEG
43288: PUSH
43289: EMPTY
43290: LIST
43291: LIST
43292: PUSH
43293: LD_INT 1
43295: PUSH
43296: LD_INT 1
43298: NEG
43299: PUSH
43300: EMPTY
43301: LIST
43302: LIST
43303: PUSH
43304: LD_INT 2
43306: PUSH
43307: LD_INT 0
43309: PUSH
43310: EMPTY
43311: LIST
43312: LIST
43313: PUSH
43314: LD_INT 2
43316: PUSH
43317: LD_INT 1
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: PUSH
43324: LD_INT 2
43326: PUSH
43327: LD_INT 2
43329: PUSH
43330: EMPTY
43331: LIST
43332: LIST
43333: PUSH
43334: LD_INT 1
43336: PUSH
43337: LD_INT 2
43339: PUSH
43340: EMPTY
43341: LIST
43342: LIST
43343: PUSH
43344: LD_INT 0
43346: PUSH
43347: LD_INT 2
43349: PUSH
43350: EMPTY
43351: LIST
43352: LIST
43353: PUSH
43354: LD_INT 1
43356: NEG
43357: PUSH
43358: LD_INT 1
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: PUSH
43365: LD_INT 2
43367: NEG
43368: PUSH
43369: LD_INT 0
43371: PUSH
43372: EMPTY
43373: LIST
43374: LIST
43375: PUSH
43376: LD_INT 2
43378: NEG
43379: PUSH
43380: LD_INT 1
43382: NEG
43383: PUSH
43384: EMPTY
43385: LIST
43386: LIST
43387: PUSH
43388: LD_INT 2
43390: NEG
43391: PUSH
43392: LD_INT 2
43394: NEG
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: PUSH
43400: EMPTY
43401: LIST
43402: LIST
43403: LIST
43404: LIST
43405: LIST
43406: LIST
43407: LIST
43408: LIST
43409: LIST
43410: LIST
43411: LIST
43412: LIST
43413: LIST
43414: LIST
43415: LIST
43416: LIST
43417: LIST
43418: LIST
43419: LIST
43420: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43421: LD_ADDR_VAR 0 19
43425: PUSH
43426: LD_INT 0
43428: PUSH
43429: LD_INT 0
43431: PUSH
43432: EMPTY
43433: LIST
43434: LIST
43435: PUSH
43436: LD_INT 0
43438: PUSH
43439: LD_INT 1
43441: NEG
43442: PUSH
43443: EMPTY
43444: LIST
43445: LIST
43446: PUSH
43447: LD_INT 1
43449: PUSH
43450: LD_INT 0
43452: PUSH
43453: EMPTY
43454: LIST
43455: LIST
43456: PUSH
43457: LD_INT 1
43459: PUSH
43460: LD_INT 1
43462: PUSH
43463: EMPTY
43464: LIST
43465: LIST
43466: PUSH
43467: LD_INT 0
43469: PUSH
43470: LD_INT 1
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: PUSH
43477: LD_INT 1
43479: NEG
43480: PUSH
43481: LD_INT 0
43483: PUSH
43484: EMPTY
43485: LIST
43486: LIST
43487: PUSH
43488: LD_INT 1
43490: NEG
43491: PUSH
43492: LD_INT 1
43494: NEG
43495: PUSH
43496: EMPTY
43497: LIST
43498: LIST
43499: PUSH
43500: LD_INT 1
43502: NEG
43503: PUSH
43504: LD_INT 2
43506: NEG
43507: PUSH
43508: EMPTY
43509: LIST
43510: LIST
43511: PUSH
43512: LD_INT 0
43514: PUSH
43515: LD_INT 2
43517: NEG
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: PUSH
43523: LD_INT 1
43525: PUSH
43526: LD_INT 1
43528: NEG
43529: PUSH
43530: EMPTY
43531: LIST
43532: LIST
43533: PUSH
43534: LD_INT 2
43536: PUSH
43537: LD_INT 0
43539: PUSH
43540: EMPTY
43541: LIST
43542: LIST
43543: PUSH
43544: LD_INT 2
43546: PUSH
43547: LD_INT 1
43549: PUSH
43550: EMPTY
43551: LIST
43552: LIST
43553: PUSH
43554: LD_INT 2
43556: PUSH
43557: LD_INT 2
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: PUSH
43564: LD_INT 1
43566: PUSH
43567: LD_INT 2
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: PUSH
43574: LD_INT 0
43576: PUSH
43577: LD_INT 2
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: PUSH
43584: LD_INT 1
43586: NEG
43587: PUSH
43588: LD_INT 1
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: PUSH
43595: LD_INT 2
43597: NEG
43598: PUSH
43599: LD_INT 0
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: PUSH
43606: LD_INT 2
43608: NEG
43609: PUSH
43610: LD_INT 1
43612: NEG
43613: PUSH
43614: EMPTY
43615: LIST
43616: LIST
43617: PUSH
43618: LD_INT 2
43620: NEG
43621: PUSH
43622: LD_INT 2
43624: NEG
43625: PUSH
43626: EMPTY
43627: LIST
43628: LIST
43629: PUSH
43630: EMPTY
43631: LIST
43632: LIST
43633: LIST
43634: LIST
43635: LIST
43636: LIST
43637: LIST
43638: LIST
43639: LIST
43640: LIST
43641: LIST
43642: LIST
43643: LIST
43644: LIST
43645: LIST
43646: LIST
43647: LIST
43648: LIST
43649: LIST
43650: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43651: LD_ADDR_VAR 0 20
43655: PUSH
43656: LD_INT 0
43658: PUSH
43659: LD_INT 0
43661: PUSH
43662: EMPTY
43663: LIST
43664: LIST
43665: PUSH
43666: LD_INT 0
43668: PUSH
43669: LD_INT 1
43671: NEG
43672: PUSH
43673: EMPTY
43674: LIST
43675: LIST
43676: PUSH
43677: LD_INT 1
43679: PUSH
43680: LD_INT 0
43682: PUSH
43683: EMPTY
43684: LIST
43685: LIST
43686: PUSH
43687: LD_INT 1
43689: PUSH
43690: LD_INT 1
43692: PUSH
43693: EMPTY
43694: LIST
43695: LIST
43696: PUSH
43697: LD_INT 0
43699: PUSH
43700: LD_INT 1
43702: PUSH
43703: EMPTY
43704: LIST
43705: LIST
43706: PUSH
43707: LD_INT 1
43709: NEG
43710: PUSH
43711: LD_INT 0
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: PUSH
43718: LD_INT 1
43720: NEG
43721: PUSH
43722: LD_INT 1
43724: NEG
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: PUSH
43730: LD_INT 1
43732: NEG
43733: PUSH
43734: LD_INT 2
43736: NEG
43737: PUSH
43738: EMPTY
43739: LIST
43740: LIST
43741: PUSH
43742: LD_INT 0
43744: PUSH
43745: LD_INT 2
43747: NEG
43748: PUSH
43749: EMPTY
43750: LIST
43751: LIST
43752: PUSH
43753: LD_INT 1
43755: PUSH
43756: LD_INT 1
43758: NEG
43759: PUSH
43760: EMPTY
43761: LIST
43762: LIST
43763: PUSH
43764: LD_INT 2
43766: PUSH
43767: LD_INT 0
43769: PUSH
43770: EMPTY
43771: LIST
43772: LIST
43773: PUSH
43774: LD_INT 2
43776: PUSH
43777: LD_INT 1
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: PUSH
43784: LD_INT 2
43786: PUSH
43787: LD_INT 2
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: PUSH
43794: LD_INT 1
43796: PUSH
43797: LD_INT 2
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: PUSH
43804: LD_INT 0
43806: PUSH
43807: LD_INT 2
43809: PUSH
43810: EMPTY
43811: LIST
43812: LIST
43813: PUSH
43814: LD_INT 1
43816: NEG
43817: PUSH
43818: LD_INT 1
43820: PUSH
43821: EMPTY
43822: LIST
43823: LIST
43824: PUSH
43825: LD_INT 2
43827: NEG
43828: PUSH
43829: LD_INT 0
43831: PUSH
43832: EMPTY
43833: LIST
43834: LIST
43835: PUSH
43836: LD_INT 2
43838: NEG
43839: PUSH
43840: LD_INT 1
43842: NEG
43843: PUSH
43844: EMPTY
43845: LIST
43846: LIST
43847: PUSH
43848: LD_INT 2
43850: NEG
43851: PUSH
43852: LD_INT 2
43854: NEG
43855: PUSH
43856: EMPTY
43857: LIST
43858: LIST
43859: PUSH
43860: EMPTY
43861: LIST
43862: LIST
43863: LIST
43864: LIST
43865: LIST
43866: LIST
43867: LIST
43868: LIST
43869: LIST
43870: LIST
43871: LIST
43872: LIST
43873: LIST
43874: LIST
43875: LIST
43876: LIST
43877: LIST
43878: LIST
43879: LIST
43880: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43881: LD_ADDR_VAR 0 21
43885: PUSH
43886: LD_INT 0
43888: PUSH
43889: LD_INT 0
43891: PUSH
43892: EMPTY
43893: LIST
43894: LIST
43895: PUSH
43896: LD_INT 0
43898: PUSH
43899: LD_INT 1
43901: NEG
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: PUSH
43907: LD_INT 1
43909: PUSH
43910: LD_INT 0
43912: PUSH
43913: EMPTY
43914: LIST
43915: LIST
43916: PUSH
43917: LD_INT 1
43919: PUSH
43920: LD_INT 1
43922: PUSH
43923: EMPTY
43924: LIST
43925: LIST
43926: PUSH
43927: LD_INT 0
43929: PUSH
43930: LD_INT 1
43932: PUSH
43933: EMPTY
43934: LIST
43935: LIST
43936: PUSH
43937: LD_INT 1
43939: NEG
43940: PUSH
43941: LD_INT 0
43943: PUSH
43944: EMPTY
43945: LIST
43946: LIST
43947: PUSH
43948: LD_INT 1
43950: NEG
43951: PUSH
43952: LD_INT 1
43954: NEG
43955: PUSH
43956: EMPTY
43957: LIST
43958: LIST
43959: PUSH
43960: LD_INT 1
43962: NEG
43963: PUSH
43964: LD_INT 2
43966: NEG
43967: PUSH
43968: EMPTY
43969: LIST
43970: LIST
43971: PUSH
43972: LD_INT 0
43974: PUSH
43975: LD_INT 2
43977: NEG
43978: PUSH
43979: EMPTY
43980: LIST
43981: LIST
43982: PUSH
43983: LD_INT 1
43985: PUSH
43986: LD_INT 1
43988: NEG
43989: PUSH
43990: EMPTY
43991: LIST
43992: LIST
43993: PUSH
43994: LD_INT 2
43996: PUSH
43997: LD_INT 0
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: PUSH
44004: LD_INT 2
44006: PUSH
44007: LD_INT 1
44009: PUSH
44010: EMPTY
44011: LIST
44012: LIST
44013: PUSH
44014: LD_INT 2
44016: PUSH
44017: LD_INT 2
44019: PUSH
44020: EMPTY
44021: LIST
44022: LIST
44023: PUSH
44024: LD_INT 1
44026: PUSH
44027: LD_INT 2
44029: PUSH
44030: EMPTY
44031: LIST
44032: LIST
44033: PUSH
44034: LD_INT 0
44036: PUSH
44037: LD_INT 2
44039: PUSH
44040: EMPTY
44041: LIST
44042: LIST
44043: PUSH
44044: LD_INT 1
44046: NEG
44047: PUSH
44048: LD_INT 1
44050: PUSH
44051: EMPTY
44052: LIST
44053: LIST
44054: PUSH
44055: LD_INT 2
44057: NEG
44058: PUSH
44059: LD_INT 0
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: PUSH
44066: LD_INT 2
44068: NEG
44069: PUSH
44070: LD_INT 1
44072: NEG
44073: PUSH
44074: EMPTY
44075: LIST
44076: LIST
44077: PUSH
44078: LD_INT 2
44080: NEG
44081: PUSH
44082: LD_INT 2
44084: NEG
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: LIST
44094: LIST
44095: LIST
44096: LIST
44097: LIST
44098: LIST
44099: LIST
44100: LIST
44101: LIST
44102: LIST
44103: LIST
44104: LIST
44105: LIST
44106: LIST
44107: LIST
44108: LIST
44109: LIST
44110: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44111: LD_ADDR_VAR 0 22
44115: PUSH
44116: LD_INT 0
44118: PUSH
44119: LD_INT 0
44121: PUSH
44122: EMPTY
44123: LIST
44124: LIST
44125: PUSH
44126: LD_INT 0
44128: PUSH
44129: LD_INT 1
44131: NEG
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: PUSH
44137: LD_INT 1
44139: PUSH
44140: LD_INT 0
44142: PUSH
44143: EMPTY
44144: LIST
44145: LIST
44146: PUSH
44147: LD_INT 1
44149: PUSH
44150: LD_INT 1
44152: PUSH
44153: EMPTY
44154: LIST
44155: LIST
44156: PUSH
44157: LD_INT 0
44159: PUSH
44160: LD_INT 1
44162: PUSH
44163: EMPTY
44164: LIST
44165: LIST
44166: PUSH
44167: LD_INT 1
44169: NEG
44170: PUSH
44171: LD_INT 0
44173: PUSH
44174: EMPTY
44175: LIST
44176: LIST
44177: PUSH
44178: LD_INT 1
44180: NEG
44181: PUSH
44182: LD_INT 1
44184: NEG
44185: PUSH
44186: EMPTY
44187: LIST
44188: LIST
44189: PUSH
44190: LD_INT 1
44192: NEG
44193: PUSH
44194: LD_INT 2
44196: NEG
44197: PUSH
44198: EMPTY
44199: LIST
44200: LIST
44201: PUSH
44202: LD_INT 0
44204: PUSH
44205: LD_INT 2
44207: NEG
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: PUSH
44213: LD_INT 1
44215: PUSH
44216: LD_INT 1
44218: NEG
44219: PUSH
44220: EMPTY
44221: LIST
44222: LIST
44223: PUSH
44224: LD_INT 2
44226: PUSH
44227: LD_INT 0
44229: PUSH
44230: EMPTY
44231: LIST
44232: LIST
44233: PUSH
44234: LD_INT 2
44236: PUSH
44237: LD_INT 1
44239: PUSH
44240: EMPTY
44241: LIST
44242: LIST
44243: PUSH
44244: LD_INT 2
44246: PUSH
44247: LD_INT 2
44249: PUSH
44250: EMPTY
44251: LIST
44252: LIST
44253: PUSH
44254: LD_INT 1
44256: PUSH
44257: LD_INT 2
44259: PUSH
44260: EMPTY
44261: LIST
44262: LIST
44263: PUSH
44264: LD_INT 0
44266: PUSH
44267: LD_INT 2
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: PUSH
44274: LD_INT 1
44276: NEG
44277: PUSH
44278: LD_INT 1
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: PUSH
44285: LD_INT 2
44287: NEG
44288: PUSH
44289: LD_INT 0
44291: PUSH
44292: EMPTY
44293: LIST
44294: LIST
44295: PUSH
44296: LD_INT 2
44298: NEG
44299: PUSH
44300: LD_INT 1
44302: NEG
44303: PUSH
44304: EMPTY
44305: LIST
44306: LIST
44307: PUSH
44308: LD_INT 2
44310: NEG
44311: PUSH
44312: LD_INT 2
44314: NEG
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: LIST
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: LIST
44334: LIST
44335: LIST
44336: LIST
44337: LIST
44338: LIST
44339: LIST
44340: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44341: LD_ADDR_VAR 0 23
44345: PUSH
44346: LD_INT 0
44348: PUSH
44349: LD_INT 0
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: PUSH
44356: LD_INT 0
44358: PUSH
44359: LD_INT 1
44361: NEG
44362: PUSH
44363: EMPTY
44364: LIST
44365: LIST
44366: PUSH
44367: LD_INT 1
44369: PUSH
44370: LD_INT 0
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: PUSH
44377: LD_INT 1
44379: PUSH
44380: LD_INT 1
44382: PUSH
44383: EMPTY
44384: LIST
44385: LIST
44386: PUSH
44387: LD_INT 0
44389: PUSH
44390: LD_INT 1
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: PUSH
44397: LD_INT 1
44399: NEG
44400: PUSH
44401: LD_INT 0
44403: PUSH
44404: EMPTY
44405: LIST
44406: LIST
44407: PUSH
44408: LD_INT 1
44410: NEG
44411: PUSH
44412: LD_INT 1
44414: NEG
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: PUSH
44420: LD_INT 1
44422: NEG
44423: PUSH
44424: LD_INT 2
44426: NEG
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: PUSH
44432: LD_INT 0
44434: PUSH
44435: LD_INT 2
44437: NEG
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: PUSH
44443: LD_INT 1
44445: PUSH
44446: LD_INT 1
44448: NEG
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: PUSH
44454: LD_INT 2
44456: PUSH
44457: LD_INT 0
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: PUSH
44464: LD_INT 2
44466: PUSH
44467: LD_INT 1
44469: PUSH
44470: EMPTY
44471: LIST
44472: LIST
44473: PUSH
44474: LD_INT 2
44476: PUSH
44477: LD_INT 2
44479: PUSH
44480: EMPTY
44481: LIST
44482: LIST
44483: PUSH
44484: LD_INT 1
44486: PUSH
44487: LD_INT 2
44489: PUSH
44490: EMPTY
44491: LIST
44492: LIST
44493: PUSH
44494: LD_INT 0
44496: PUSH
44497: LD_INT 2
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: PUSH
44504: LD_INT 1
44506: NEG
44507: PUSH
44508: LD_INT 1
44510: PUSH
44511: EMPTY
44512: LIST
44513: LIST
44514: PUSH
44515: LD_INT 2
44517: NEG
44518: PUSH
44519: LD_INT 0
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: PUSH
44526: LD_INT 2
44528: NEG
44529: PUSH
44530: LD_INT 1
44532: NEG
44533: PUSH
44534: EMPTY
44535: LIST
44536: LIST
44537: PUSH
44538: LD_INT 2
44540: NEG
44541: PUSH
44542: LD_INT 2
44544: NEG
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: LD_INT 2
44552: NEG
44553: PUSH
44554: LD_INT 3
44556: NEG
44557: PUSH
44558: EMPTY
44559: LIST
44560: LIST
44561: PUSH
44562: LD_INT 1
44564: NEG
44565: PUSH
44566: LD_INT 3
44568: NEG
44569: PUSH
44570: EMPTY
44571: LIST
44572: LIST
44573: PUSH
44574: LD_INT 1
44576: PUSH
44577: LD_INT 2
44579: NEG
44580: PUSH
44581: EMPTY
44582: LIST
44583: LIST
44584: PUSH
44585: LD_INT 2
44587: PUSH
44588: LD_INT 1
44590: NEG
44591: PUSH
44592: EMPTY
44593: LIST
44594: LIST
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: LIST
44600: LIST
44601: LIST
44602: LIST
44603: LIST
44604: LIST
44605: LIST
44606: LIST
44607: LIST
44608: LIST
44609: LIST
44610: LIST
44611: LIST
44612: LIST
44613: LIST
44614: LIST
44615: LIST
44616: LIST
44617: LIST
44618: LIST
44619: LIST
44620: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
44621: LD_ADDR_VAR 0 24
44625: PUSH
44626: LD_INT 0
44628: PUSH
44629: LD_INT 0
44631: PUSH
44632: EMPTY
44633: LIST
44634: LIST
44635: PUSH
44636: LD_INT 0
44638: PUSH
44639: LD_INT 1
44641: NEG
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: PUSH
44647: LD_INT 1
44649: PUSH
44650: LD_INT 0
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: PUSH
44657: LD_INT 1
44659: PUSH
44660: LD_INT 1
44662: PUSH
44663: EMPTY
44664: LIST
44665: LIST
44666: PUSH
44667: LD_INT 0
44669: PUSH
44670: LD_INT 1
44672: PUSH
44673: EMPTY
44674: LIST
44675: LIST
44676: PUSH
44677: LD_INT 1
44679: NEG
44680: PUSH
44681: LD_INT 0
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: PUSH
44688: LD_INT 1
44690: NEG
44691: PUSH
44692: LD_INT 1
44694: NEG
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: PUSH
44700: LD_INT 1
44702: NEG
44703: PUSH
44704: LD_INT 2
44706: NEG
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: PUSH
44712: LD_INT 0
44714: PUSH
44715: LD_INT 2
44717: NEG
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: PUSH
44723: LD_INT 1
44725: PUSH
44726: LD_INT 1
44728: NEG
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: PUSH
44734: LD_INT 2
44736: PUSH
44737: LD_INT 0
44739: PUSH
44740: EMPTY
44741: LIST
44742: LIST
44743: PUSH
44744: LD_INT 2
44746: PUSH
44747: LD_INT 1
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: PUSH
44754: LD_INT 2
44756: PUSH
44757: LD_INT 2
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: PUSH
44764: LD_INT 1
44766: PUSH
44767: LD_INT 2
44769: PUSH
44770: EMPTY
44771: LIST
44772: LIST
44773: PUSH
44774: LD_INT 0
44776: PUSH
44777: LD_INT 2
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: PUSH
44784: LD_INT 1
44786: NEG
44787: PUSH
44788: LD_INT 1
44790: PUSH
44791: EMPTY
44792: LIST
44793: LIST
44794: PUSH
44795: LD_INT 2
44797: NEG
44798: PUSH
44799: LD_INT 0
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: PUSH
44806: LD_INT 2
44808: NEG
44809: PUSH
44810: LD_INT 1
44812: NEG
44813: PUSH
44814: EMPTY
44815: LIST
44816: LIST
44817: PUSH
44818: LD_INT 2
44820: NEG
44821: PUSH
44822: LD_INT 2
44824: NEG
44825: PUSH
44826: EMPTY
44827: LIST
44828: LIST
44829: PUSH
44830: LD_INT 1
44832: PUSH
44833: LD_INT 2
44835: NEG
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: PUSH
44841: LD_INT 2
44843: PUSH
44844: LD_INT 1
44846: NEG
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: PUSH
44852: LD_INT 3
44854: PUSH
44855: LD_INT 1
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PUSH
44862: LD_INT 3
44864: PUSH
44865: LD_INT 2
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: PUSH
44872: EMPTY
44873: LIST
44874: LIST
44875: LIST
44876: LIST
44877: LIST
44878: LIST
44879: LIST
44880: LIST
44881: LIST
44882: LIST
44883: LIST
44884: LIST
44885: LIST
44886: LIST
44887: LIST
44888: LIST
44889: LIST
44890: LIST
44891: LIST
44892: LIST
44893: LIST
44894: LIST
44895: LIST
44896: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
44897: LD_ADDR_VAR 0 25
44901: PUSH
44902: LD_INT 0
44904: PUSH
44905: LD_INT 0
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: PUSH
44912: LD_INT 0
44914: PUSH
44915: LD_INT 1
44917: NEG
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: PUSH
44923: LD_INT 1
44925: PUSH
44926: LD_INT 0
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: PUSH
44933: LD_INT 1
44935: PUSH
44936: LD_INT 1
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 0
44945: PUSH
44946: LD_INT 1
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: PUSH
44953: LD_INT 1
44955: NEG
44956: PUSH
44957: LD_INT 0
44959: PUSH
44960: EMPTY
44961: LIST
44962: LIST
44963: PUSH
44964: LD_INT 1
44966: NEG
44967: PUSH
44968: LD_INT 1
44970: NEG
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: PUSH
44976: LD_INT 1
44978: NEG
44979: PUSH
44980: LD_INT 2
44982: NEG
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: PUSH
44988: LD_INT 0
44990: PUSH
44991: LD_INT 2
44993: NEG
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: PUSH
44999: LD_INT 1
45001: PUSH
45002: LD_INT 1
45004: NEG
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: LD_INT 2
45012: PUSH
45013: LD_INT 0
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: PUSH
45020: LD_INT 2
45022: PUSH
45023: LD_INT 1
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: PUSH
45030: LD_INT 2
45032: PUSH
45033: LD_INT 2
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: PUSH
45040: LD_INT 1
45042: PUSH
45043: LD_INT 2
45045: PUSH
45046: EMPTY
45047: LIST
45048: LIST
45049: PUSH
45050: LD_INT 0
45052: PUSH
45053: LD_INT 2
45055: PUSH
45056: EMPTY
45057: LIST
45058: LIST
45059: PUSH
45060: LD_INT 1
45062: NEG
45063: PUSH
45064: LD_INT 1
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: PUSH
45071: LD_INT 2
45073: NEG
45074: PUSH
45075: LD_INT 0
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: PUSH
45082: LD_INT 2
45084: NEG
45085: PUSH
45086: LD_INT 1
45088: NEG
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: PUSH
45094: LD_INT 2
45096: NEG
45097: PUSH
45098: LD_INT 2
45100: NEG
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: PUSH
45106: LD_INT 3
45108: PUSH
45109: LD_INT 1
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: PUSH
45116: LD_INT 3
45118: PUSH
45119: LD_INT 2
45121: PUSH
45122: EMPTY
45123: LIST
45124: LIST
45125: PUSH
45126: LD_INT 2
45128: PUSH
45129: LD_INT 3
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: PUSH
45136: LD_INT 1
45138: PUSH
45139: LD_INT 3
45141: PUSH
45142: EMPTY
45143: LIST
45144: LIST
45145: PUSH
45146: EMPTY
45147: LIST
45148: LIST
45149: LIST
45150: LIST
45151: LIST
45152: LIST
45153: LIST
45154: LIST
45155: LIST
45156: LIST
45157: LIST
45158: LIST
45159: LIST
45160: LIST
45161: LIST
45162: LIST
45163: LIST
45164: LIST
45165: LIST
45166: LIST
45167: LIST
45168: LIST
45169: LIST
45170: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45171: LD_ADDR_VAR 0 26
45175: PUSH
45176: LD_INT 0
45178: PUSH
45179: LD_INT 0
45181: PUSH
45182: EMPTY
45183: LIST
45184: LIST
45185: PUSH
45186: LD_INT 0
45188: PUSH
45189: LD_INT 1
45191: NEG
45192: PUSH
45193: EMPTY
45194: LIST
45195: LIST
45196: PUSH
45197: LD_INT 1
45199: PUSH
45200: LD_INT 0
45202: PUSH
45203: EMPTY
45204: LIST
45205: LIST
45206: PUSH
45207: LD_INT 1
45209: PUSH
45210: LD_INT 1
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: PUSH
45217: LD_INT 0
45219: PUSH
45220: LD_INT 1
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: LD_INT 1
45229: NEG
45230: PUSH
45231: LD_INT 0
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: PUSH
45238: LD_INT 1
45240: NEG
45241: PUSH
45242: LD_INT 1
45244: NEG
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: PUSH
45250: LD_INT 1
45252: NEG
45253: PUSH
45254: LD_INT 2
45256: NEG
45257: PUSH
45258: EMPTY
45259: LIST
45260: LIST
45261: PUSH
45262: LD_INT 0
45264: PUSH
45265: LD_INT 2
45267: NEG
45268: PUSH
45269: EMPTY
45270: LIST
45271: LIST
45272: PUSH
45273: LD_INT 1
45275: PUSH
45276: LD_INT 1
45278: NEG
45279: PUSH
45280: EMPTY
45281: LIST
45282: LIST
45283: PUSH
45284: LD_INT 2
45286: PUSH
45287: LD_INT 0
45289: PUSH
45290: EMPTY
45291: LIST
45292: LIST
45293: PUSH
45294: LD_INT 2
45296: PUSH
45297: LD_INT 1
45299: PUSH
45300: EMPTY
45301: LIST
45302: LIST
45303: PUSH
45304: LD_INT 2
45306: PUSH
45307: LD_INT 2
45309: PUSH
45310: EMPTY
45311: LIST
45312: LIST
45313: PUSH
45314: LD_INT 1
45316: PUSH
45317: LD_INT 2
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: PUSH
45324: LD_INT 0
45326: PUSH
45327: LD_INT 2
45329: PUSH
45330: EMPTY
45331: LIST
45332: LIST
45333: PUSH
45334: LD_INT 1
45336: NEG
45337: PUSH
45338: LD_INT 1
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: PUSH
45345: LD_INT 2
45347: NEG
45348: PUSH
45349: LD_INT 0
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: LD_INT 2
45358: NEG
45359: PUSH
45360: LD_INT 1
45362: NEG
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: PUSH
45368: LD_INT 2
45370: NEG
45371: PUSH
45372: LD_INT 2
45374: NEG
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: PUSH
45380: LD_INT 2
45382: PUSH
45383: LD_INT 3
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: PUSH
45390: LD_INT 1
45392: PUSH
45393: LD_INT 3
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: PUSH
45400: LD_INT 1
45402: NEG
45403: PUSH
45404: LD_INT 2
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: PUSH
45411: LD_INT 2
45413: NEG
45414: PUSH
45415: LD_INT 1
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: LIST
45426: LIST
45427: LIST
45428: LIST
45429: LIST
45430: LIST
45431: LIST
45432: LIST
45433: LIST
45434: LIST
45435: LIST
45436: LIST
45437: LIST
45438: LIST
45439: LIST
45440: LIST
45441: LIST
45442: LIST
45443: LIST
45444: LIST
45445: LIST
45446: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45447: LD_ADDR_VAR 0 27
45451: PUSH
45452: LD_INT 0
45454: PUSH
45455: LD_INT 0
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 0
45464: PUSH
45465: LD_INT 1
45467: NEG
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: LD_INT 1
45475: PUSH
45476: LD_INT 0
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: PUSH
45483: LD_INT 1
45485: PUSH
45486: LD_INT 1
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: PUSH
45493: LD_INT 0
45495: PUSH
45496: LD_INT 1
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: PUSH
45503: LD_INT 1
45505: NEG
45506: PUSH
45507: LD_INT 0
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: PUSH
45514: LD_INT 1
45516: NEG
45517: PUSH
45518: LD_INT 1
45520: NEG
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: PUSH
45526: LD_INT 1
45528: NEG
45529: PUSH
45530: LD_INT 2
45532: NEG
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: PUSH
45538: LD_INT 0
45540: PUSH
45541: LD_INT 2
45543: NEG
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 1
45551: PUSH
45552: LD_INT 1
45554: NEG
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: LD_INT 2
45562: PUSH
45563: LD_INT 0
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: PUSH
45570: LD_INT 2
45572: PUSH
45573: LD_INT 1
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: PUSH
45580: LD_INT 2
45582: PUSH
45583: LD_INT 2
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: LD_INT 1
45592: PUSH
45593: LD_INT 2
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: PUSH
45600: LD_INT 0
45602: PUSH
45603: LD_INT 2
45605: PUSH
45606: EMPTY
45607: LIST
45608: LIST
45609: PUSH
45610: LD_INT 1
45612: NEG
45613: PUSH
45614: LD_INT 1
45616: PUSH
45617: EMPTY
45618: LIST
45619: LIST
45620: PUSH
45621: LD_INT 2
45623: NEG
45624: PUSH
45625: LD_INT 0
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: LD_INT 2
45634: NEG
45635: PUSH
45636: LD_INT 1
45638: NEG
45639: PUSH
45640: EMPTY
45641: LIST
45642: LIST
45643: PUSH
45644: LD_INT 2
45646: NEG
45647: PUSH
45648: LD_INT 2
45650: NEG
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: PUSH
45656: LD_INT 1
45658: NEG
45659: PUSH
45660: LD_INT 2
45662: PUSH
45663: EMPTY
45664: LIST
45665: LIST
45666: PUSH
45667: LD_INT 2
45669: NEG
45670: PUSH
45671: LD_INT 1
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: PUSH
45678: LD_INT 3
45680: NEG
45681: PUSH
45682: LD_INT 1
45684: NEG
45685: PUSH
45686: EMPTY
45687: LIST
45688: LIST
45689: PUSH
45690: LD_INT 3
45692: NEG
45693: PUSH
45694: LD_INT 2
45696: NEG
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: PUSH
45702: EMPTY
45703: LIST
45704: LIST
45705: LIST
45706: LIST
45707: LIST
45708: LIST
45709: LIST
45710: LIST
45711: LIST
45712: LIST
45713: LIST
45714: LIST
45715: LIST
45716: LIST
45717: LIST
45718: LIST
45719: LIST
45720: LIST
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: LIST
45726: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45727: LD_ADDR_VAR 0 28
45731: PUSH
45732: LD_INT 0
45734: PUSH
45735: LD_INT 0
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: PUSH
45742: LD_INT 0
45744: PUSH
45745: LD_INT 1
45747: NEG
45748: PUSH
45749: EMPTY
45750: LIST
45751: LIST
45752: PUSH
45753: LD_INT 1
45755: PUSH
45756: LD_INT 0
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: PUSH
45763: LD_INT 1
45765: PUSH
45766: LD_INT 1
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: LD_INT 0
45775: PUSH
45776: LD_INT 1
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: PUSH
45783: LD_INT 1
45785: NEG
45786: PUSH
45787: LD_INT 0
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: PUSH
45794: LD_INT 1
45796: NEG
45797: PUSH
45798: LD_INT 1
45800: NEG
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PUSH
45806: LD_INT 1
45808: NEG
45809: PUSH
45810: LD_INT 2
45812: NEG
45813: PUSH
45814: EMPTY
45815: LIST
45816: LIST
45817: PUSH
45818: LD_INT 0
45820: PUSH
45821: LD_INT 2
45823: NEG
45824: PUSH
45825: EMPTY
45826: LIST
45827: LIST
45828: PUSH
45829: LD_INT 1
45831: PUSH
45832: LD_INT 1
45834: NEG
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: PUSH
45840: LD_INT 2
45842: PUSH
45843: LD_INT 0
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: PUSH
45850: LD_INT 2
45852: PUSH
45853: LD_INT 1
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 2
45862: PUSH
45863: LD_INT 2
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: LD_INT 1
45872: PUSH
45873: LD_INT 2
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: PUSH
45880: LD_INT 0
45882: PUSH
45883: LD_INT 2
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: PUSH
45890: LD_INT 1
45892: NEG
45893: PUSH
45894: LD_INT 1
45896: PUSH
45897: EMPTY
45898: LIST
45899: LIST
45900: PUSH
45901: LD_INT 2
45903: NEG
45904: PUSH
45905: LD_INT 0
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: PUSH
45912: LD_INT 2
45914: NEG
45915: PUSH
45916: LD_INT 1
45918: NEG
45919: PUSH
45920: EMPTY
45921: LIST
45922: LIST
45923: PUSH
45924: LD_INT 2
45926: NEG
45927: PUSH
45928: LD_INT 2
45930: NEG
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: LD_INT 2
45938: NEG
45939: PUSH
45940: LD_INT 3
45942: NEG
45943: PUSH
45944: EMPTY
45945: LIST
45946: LIST
45947: PUSH
45948: LD_INT 1
45950: NEG
45951: PUSH
45952: LD_INT 3
45954: NEG
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: PUSH
45960: LD_INT 3
45962: NEG
45963: PUSH
45964: LD_INT 1
45966: NEG
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: PUSH
45972: LD_INT 3
45974: NEG
45975: PUSH
45976: LD_INT 2
45978: NEG
45979: PUSH
45980: EMPTY
45981: LIST
45982: LIST
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: LIST
45988: LIST
45989: LIST
45990: LIST
45991: LIST
45992: LIST
45993: LIST
45994: LIST
45995: LIST
45996: LIST
45997: LIST
45998: LIST
45999: LIST
46000: LIST
46001: LIST
46002: LIST
46003: LIST
46004: LIST
46005: LIST
46006: LIST
46007: LIST
46008: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46009: LD_ADDR_VAR 0 29
46013: PUSH
46014: LD_INT 0
46016: PUSH
46017: LD_INT 0
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: PUSH
46024: LD_INT 0
46026: PUSH
46027: LD_INT 1
46029: NEG
46030: PUSH
46031: EMPTY
46032: LIST
46033: LIST
46034: PUSH
46035: LD_INT 1
46037: PUSH
46038: LD_INT 0
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: PUSH
46045: LD_INT 1
46047: PUSH
46048: LD_INT 1
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: PUSH
46055: LD_INT 0
46057: PUSH
46058: LD_INT 1
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: PUSH
46065: LD_INT 1
46067: NEG
46068: PUSH
46069: LD_INT 0
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: PUSH
46076: LD_INT 1
46078: NEG
46079: PUSH
46080: LD_INT 1
46082: NEG
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: PUSH
46088: LD_INT 1
46090: NEG
46091: PUSH
46092: LD_INT 2
46094: NEG
46095: PUSH
46096: EMPTY
46097: LIST
46098: LIST
46099: PUSH
46100: LD_INT 0
46102: PUSH
46103: LD_INT 2
46105: NEG
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: LD_INT 1
46113: PUSH
46114: LD_INT 1
46116: NEG
46117: PUSH
46118: EMPTY
46119: LIST
46120: LIST
46121: PUSH
46122: LD_INT 2
46124: PUSH
46125: LD_INT 0
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: LD_INT 2
46134: PUSH
46135: LD_INT 1
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 1
46144: PUSH
46145: LD_INT 2
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: LD_INT 0
46154: PUSH
46155: LD_INT 2
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: LD_INT 1
46164: NEG
46165: PUSH
46166: LD_INT 1
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: PUSH
46173: LD_INT 2
46175: NEG
46176: PUSH
46177: LD_INT 1
46179: NEG
46180: PUSH
46181: EMPTY
46182: LIST
46183: LIST
46184: PUSH
46185: LD_INT 2
46187: NEG
46188: PUSH
46189: LD_INT 2
46191: NEG
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: LD_INT 2
46199: NEG
46200: PUSH
46201: LD_INT 3
46203: NEG
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: PUSH
46209: LD_INT 2
46211: PUSH
46212: LD_INT 1
46214: NEG
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: PUSH
46220: LD_INT 3
46222: PUSH
46223: LD_INT 1
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: PUSH
46230: LD_INT 1
46232: PUSH
46233: LD_INT 3
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: PUSH
46240: LD_INT 1
46242: NEG
46243: PUSH
46244: LD_INT 2
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: PUSH
46251: LD_INT 3
46253: NEG
46254: PUSH
46255: LD_INT 2
46257: NEG
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: LIST
46267: LIST
46268: LIST
46269: LIST
46270: LIST
46271: LIST
46272: LIST
46273: LIST
46274: LIST
46275: LIST
46276: LIST
46277: LIST
46278: LIST
46279: LIST
46280: LIST
46281: LIST
46282: LIST
46283: LIST
46284: LIST
46285: LIST
46286: LIST
46287: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46288: LD_ADDR_VAR 0 30
46292: PUSH
46293: LD_INT 0
46295: PUSH
46296: LD_INT 0
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: PUSH
46303: LD_INT 0
46305: PUSH
46306: LD_INT 1
46308: NEG
46309: PUSH
46310: EMPTY
46311: LIST
46312: LIST
46313: PUSH
46314: LD_INT 1
46316: PUSH
46317: LD_INT 0
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: PUSH
46324: LD_INT 1
46326: PUSH
46327: LD_INT 1
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: PUSH
46334: LD_INT 0
46336: PUSH
46337: LD_INT 1
46339: PUSH
46340: EMPTY
46341: LIST
46342: LIST
46343: PUSH
46344: LD_INT 1
46346: NEG
46347: PUSH
46348: LD_INT 0
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: PUSH
46355: LD_INT 1
46357: NEG
46358: PUSH
46359: LD_INT 1
46361: NEG
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: PUSH
46367: LD_INT 1
46369: NEG
46370: PUSH
46371: LD_INT 2
46373: NEG
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 0
46381: PUSH
46382: LD_INT 2
46384: NEG
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: LD_INT 1
46392: PUSH
46393: LD_INT 1
46395: NEG
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: PUSH
46401: LD_INT 2
46403: PUSH
46404: LD_INT 0
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: PUSH
46411: LD_INT 2
46413: PUSH
46414: LD_INT 1
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 2
46423: PUSH
46424: LD_INT 2
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: LD_INT 1
46433: PUSH
46434: LD_INT 2
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: PUSH
46441: LD_INT 1
46443: NEG
46444: PUSH
46445: LD_INT 1
46447: PUSH
46448: EMPTY
46449: LIST
46450: LIST
46451: PUSH
46452: LD_INT 2
46454: NEG
46455: PUSH
46456: LD_INT 0
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: PUSH
46463: LD_INT 2
46465: NEG
46466: PUSH
46467: LD_INT 1
46469: NEG
46470: PUSH
46471: EMPTY
46472: LIST
46473: LIST
46474: PUSH
46475: LD_INT 1
46477: NEG
46478: PUSH
46479: LD_INT 3
46481: NEG
46482: PUSH
46483: EMPTY
46484: LIST
46485: LIST
46486: PUSH
46487: LD_INT 1
46489: PUSH
46490: LD_INT 2
46492: NEG
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: PUSH
46498: LD_INT 3
46500: PUSH
46501: LD_INT 2
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: PUSH
46508: LD_INT 2
46510: PUSH
46511: LD_INT 3
46513: PUSH
46514: EMPTY
46515: LIST
46516: LIST
46517: PUSH
46518: LD_INT 2
46520: NEG
46521: PUSH
46522: LD_INT 1
46524: PUSH
46525: EMPTY
46526: LIST
46527: LIST
46528: PUSH
46529: LD_INT 3
46531: NEG
46532: PUSH
46533: LD_INT 1
46535: NEG
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: PUSH
46541: EMPTY
46542: LIST
46543: LIST
46544: LIST
46545: LIST
46546: LIST
46547: LIST
46548: LIST
46549: LIST
46550: LIST
46551: LIST
46552: LIST
46553: LIST
46554: LIST
46555: LIST
46556: LIST
46557: LIST
46558: LIST
46559: LIST
46560: LIST
46561: LIST
46562: LIST
46563: LIST
46564: LIST
46565: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46566: LD_ADDR_VAR 0 31
46570: PUSH
46571: LD_INT 0
46573: PUSH
46574: LD_INT 0
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 0
46583: PUSH
46584: LD_INT 1
46586: NEG
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: LD_INT 1
46594: PUSH
46595: LD_INT 0
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PUSH
46602: LD_INT 1
46604: PUSH
46605: LD_INT 1
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: PUSH
46612: LD_INT 0
46614: PUSH
46615: LD_INT 1
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: LD_INT 1
46624: NEG
46625: PUSH
46626: LD_INT 0
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 1
46635: NEG
46636: PUSH
46637: LD_INT 1
46639: NEG
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: LD_INT 1
46647: NEG
46648: PUSH
46649: LD_INT 2
46651: NEG
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: PUSH
46657: LD_INT 1
46659: PUSH
46660: LD_INT 1
46662: NEG
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: LD_INT 2
46670: PUSH
46671: LD_INT 0
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: LD_INT 2
46680: PUSH
46681: LD_INT 1
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: PUSH
46688: LD_INT 2
46690: PUSH
46691: LD_INT 2
46693: PUSH
46694: EMPTY
46695: LIST
46696: LIST
46697: PUSH
46698: LD_INT 1
46700: PUSH
46701: LD_INT 2
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: PUSH
46708: LD_INT 0
46710: PUSH
46711: LD_INT 2
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: PUSH
46718: LD_INT 1
46720: NEG
46721: PUSH
46722: LD_INT 1
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: PUSH
46729: LD_INT 2
46731: NEG
46732: PUSH
46733: LD_INT 1
46735: NEG
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: LD_INT 2
46743: NEG
46744: PUSH
46745: LD_INT 2
46747: NEG
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: PUSH
46753: LD_INT 2
46755: NEG
46756: PUSH
46757: LD_INT 3
46759: NEG
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: PUSH
46765: LD_INT 2
46767: PUSH
46768: LD_INT 1
46770: NEG
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PUSH
46776: LD_INT 3
46778: PUSH
46779: LD_INT 1
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 1
46788: PUSH
46789: LD_INT 3
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: PUSH
46796: LD_INT 1
46798: NEG
46799: PUSH
46800: LD_INT 2
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: PUSH
46807: LD_INT 3
46809: NEG
46810: PUSH
46811: LD_INT 2
46813: NEG
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: LIST
46823: LIST
46824: LIST
46825: LIST
46826: LIST
46827: LIST
46828: LIST
46829: LIST
46830: LIST
46831: LIST
46832: LIST
46833: LIST
46834: LIST
46835: LIST
46836: LIST
46837: LIST
46838: LIST
46839: LIST
46840: LIST
46841: LIST
46842: LIST
46843: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46844: LD_ADDR_VAR 0 32
46848: PUSH
46849: LD_INT 0
46851: PUSH
46852: LD_INT 0
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: LD_INT 0
46861: PUSH
46862: LD_INT 1
46864: NEG
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: LD_INT 1
46872: PUSH
46873: LD_INT 0
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: LD_INT 1
46882: PUSH
46883: LD_INT 1
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: LD_INT 0
46892: PUSH
46893: LD_INT 1
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 1
46902: NEG
46903: PUSH
46904: LD_INT 0
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: PUSH
46911: LD_INT 1
46913: NEG
46914: PUSH
46915: LD_INT 1
46917: NEG
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: PUSH
46923: LD_INT 1
46925: NEG
46926: PUSH
46927: LD_INT 2
46929: NEG
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: PUSH
46935: LD_INT 0
46937: PUSH
46938: LD_INT 2
46940: NEG
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: PUSH
46946: LD_INT 1
46948: PUSH
46949: LD_INT 1
46951: NEG
46952: PUSH
46953: EMPTY
46954: LIST
46955: LIST
46956: PUSH
46957: LD_INT 2
46959: PUSH
46960: LD_INT 1
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: PUSH
46967: LD_INT 2
46969: PUSH
46970: LD_INT 2
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: PUSH
46977: LD_INT 1
46979: PUSH
46980: LD_INT 2
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: LD_INT 0
46989: PUSH
46990: LD_INT 2
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: LD_INT 1
46999: NEG
47000: PUSH
47001: LD_INT 1
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: PUSH
47008: LD_INT 2
47010: NEG
47011: PUSH
47012: LD_INT 0
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: PUSH
47019: LD_INT 2
47021: NEG
47022: PUSH
47023: LD_INT 1
47025: NEG
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: PUSH
47031: LD_INT 1
47033: NEG
47034: PUSH
47035: LD_INT 3
47037: NEG
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: LD_INT 1
47045: PUSH
47046: LD_INT 2
47048: NEG
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: PUSH
47054: LD_INT 3
47056: PUSH
47057: LD_INT 2
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: LD_INT 2
47066: PUSH
47067: LD_INT 3
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: PUSH
47074: LD_INT 2
47076: NEG
47077: PUSH
47078: LD_INT 1
47080: PUSH
47081: EMPTY
47082: LIST
47083: LIST
47084: PUSH
47085: LD_INT 3
47087: NEG
47088: PUSH
47089: LD_INT 1
47091: NEG
47092: PUSH
47093: EMPTY
47094: LIST
47095: LIST
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: LIST
47101: LIST
47102: LIST
47103: LIST
47104: LIST
47105: LIST
47106: LIST
47107: LIST
47108: LIST
47109: LIST
47110: LIST
47111: LIST
47112: LIST
47113: LIST
47114: LIST
47115: LIST
47116: LIST
47117: LIST
47118: LIST
47119: LIST
47120: LIST
47121: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47122: LD_ADDR_VAR 0 33
47126: PUSH
47127: LD_INT 0
47129: PUSH
47130: LD_INT 0
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: PUSH
47137: LD_INT 0
47139: PUSH
47140: LD_INT 1
47142: NEG
47143: PUSH
47144: EMPTY
47145: LIST
47146: LIST
47147: PUSH
47148: LD_INT 1
47150: PUSH
47151: LD_INT 0
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: PUSH
47158: LD_INT 1
47160: PUSH
47161: LD_INT 1
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: PUSH
47168: LD_INT 0
47170: PUSH
47171: LD_INT 1
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: PUSH
47178: LD_INT 1
47180: NEG
47181: PUSH
47182: LD_INT 0
47184: PUSH
47185: EMPTY
47186: LIST
47187: LIST
47188: PUSH
47189: LD_INT 1
47191: NEG
47192: PUSH
47193: LD_INT 1
47195: NEG
47196: PUSH
47197: EMPTY
47198: LIST
47199: LIST
47200: PUSH
47201: LD_INT 1
47203: NEG
47204: PUSH
47205: LD_INT 2
47207: NEG
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: PUSH
47213: LD_INT 1
47215: PUSH
47216: LD_INT 1
47218: NEG
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: PUSH
47224: LD_INT 2
47226: PUSH
47227: LD_INT 0
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 2
47236: PUSH
47237: LD_INT 1
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: LD_INT 1
47246: PUSH
47247: LD_INT 2
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 0
47256: PUSH
47257: LD_INT 2
47259: PUSH
47260: EMPTY
47261: LIST
47262: LIST
47263: PUSH
47264: LD_INT 1
47266: NEG
47267: PUSH
47268: LD_INT 1
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: PUSH
47275: LD_INT 2
47277: NEG
47278: PUSH
47279: LD_INT 0
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: LD_INT 2
47288: NEG
47289: PUSH
47290: LD_INT 1
47292: NEG
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: PUSH
47298: LD_INT 2
47300: NEG
47301: PUSH
47302: LD_INT 2
47304: NEG
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: PUSH
47310: LD_INT 2
47312: NEG
47313: PUSH
47314: LD_INT 3
47316: NEG
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: PUSH
47322: LD_INT 2
47324: PUSH
47325: LD_INT 1
47327: NEG
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 3
47335: PUSH
47336: LD_INT 1
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 1
47345: PUSH
47346: LD_INT 3
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: LD_INT 1
47355: NEG
47356: PUSH
47357: LD_INT 2
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: LD_INT 3
47366: NEG
47367: PUSH
47368: LD_INT 2
47370: NEG
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: LIST
47387: LIST
47388: LIST
47389: LIST
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: LIST
47396: LIST
47397: LIST
47398: LIST
47399: LIST
47400: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47401: LD_ADDR_VAR 0 34
47405: PUSH
47406: LD_INT 0
47408: PUSH
47409: LD_INT 0
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: LD_INT 0
47418: PUSH
47419: LD_INT 1
47421: NEG
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: PUSH
47427: LD_INT 1
47429: PUSH
47430: LD_INT 0
47432: PUSH
47433: EMPTY
47434: LIST
47435: LIST
47436: PUSH
47437: LD_INT 1
47439: PUSH
47440: LD_INT 1
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: PUSH
47447: LD_INT 0
47449: PUSH
47450: LD_INT 1
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: PUSH
47457: LD_INT 1
47459: NEG
47460: PUSH
47461: LD_INT 0
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: PUSH
47468: LD_INT 1
47470: NEG
47471: PUSH
47472: LD_INT 1
47474: NEG
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: PUSH
47480: LD_INT 1
47482: NEG
47483: PUSH
47484: LD_INT 2
47486: NEG
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: PUSH
47492: LD_INT 0
47494: PUSH
47495: LD_INT 2
47497: NEG
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: PUSH
47503: LD_INT 1
47505: PUSH
47506: LD_INT 1
47508: NEG
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: PUSH
47514: LD_INT 2
47516: PUSH
47517: LD_INT 1
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PUSH
47524: LD_INT 2
47526: PUSH
47527: LD_INT 2
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: LD_INT 1
47536: PUSH
47537: LD_INT 2
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: PUSH
47544: LD_INT 1
47546: NEG
47547: PUSH
47548: LD_INT 1
47550: PUSH
47551: EMPTY
47552: LIST
47553: LIST
47554: PUSH
47555: LD_INT 2
47557: NEG
47558: PUSH
47559: LD_INT 0
47561: PUSH
47562: EMPTY
47563: LIST
47564: LIST
47565: PUSH
47566: LD_INT 2
47568: NEG
47569: PUSH
47570: LD_INT 1
47572: NEG
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: PUSH
47578: LD_INT 2
47580: NEG
47581: PUSH
47582: LD_INT 2
47584: NEG
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: PUSH
47590: LD_INT 1
47592: NEG
47593: PUSH
47594: LD_INT 3
47596: NEG
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: LD_INT 1
47604: PUSH
47605: LD_INT 2
47607: NEG
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: PUSH
47613: LD_INT 3
47615: PUSH
47616: LD_INT 2
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: PUSH
47623: LD_INT 2
47625: PUSH
47626: LD_INT 3
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: PUSH
47633: LD_INT 2
47635: NEG
47636: PUSH
47637: LD_INT 1
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: PUSH
47644: LD_INT 3
47646: NEG
47647: PUSH
47648: LD_INT 1
47650: NEG
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: LIST
47660: LIST
47661: LIST
47662: LIST
47663: LIST
47664: LIST
47665: LIST
47666: LIST
47667: LIST
47668: LIST
47669: LIST
47670: LIST
47671: LIST
47672: LIST
47673: LIST
47674: LIST
47675: LIST
47676: LIST
47677: LIST
47678: LIST
47679: LIST
47680: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47681: LD_ADDR_VAR 0 35
47685: PUSH
47686: LD_INT 0
47688: PUSH
47689: LD_INT 0
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 0
47698: PUSH
47699: LD_INT 1
47701: NEG
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: LD_INT 1
47709: PUSH
47710: LD_INT 0
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PUSH
47717: LD_INT 1
47719: PUSH
47720: LD_INT 1
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: PUSH
47727: LD_INT 0
47729: PUSH
47730: LD_INT 1
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: PUSH
47737: LD_INT 1
47739: NEG
47740: PUSH
47741: LD_INT 0
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: LD_INT 1
47750: NEG
47751: PUSH
47752: LD_INT 1
47754: NEG
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: LD_INT 2
47762: PUSH
47763: LD_INT 1
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: PUSH
47770: LD_INT 2
47772: NEG
47773: PUSH
47774: LD_INT 1
47776: NEG
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: LIST
47786: LIST
47787: LIST
47788: LIST
47789: LIST
47790: LIST
47791: LIST
47792: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47793: LD_ADDR_VAR 0 36
47797: PUSH
47798: LD_INT 0
47800: PUSH
47801: LD_INT 0
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: LD_INT 0
47810: PUSH
47811: LD_INT 1
47813: NEG
47814: PUSH
47815: EMPTY
47816: LIST
47817: LIST
47818: PUSH
47819: LD_INT 1
47821: PUSH
47822: LD_INT 0
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 1
47831: PUSH
47832: LD_INT 1
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: PUSH
47839: LD_INT 0
47841: PUSH
47842: LD_INT 1
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: PUSH
47849: LD_INT 1
47851: NEG
47852: PUSH
47853: LD_INT 0
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: PUSH
47860: LD_INT 1
47862: NEG
47863: PUSH
47864: LD_INT 1
47866: NEG
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 1
47874: NEG
47875: PUSH
47876: LD_INT 2
47878: NEG
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: PUSH
47884: LD_INT 1
47886: PUSH
47887: LD_INT 2
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: LIST
47898: LIST
47899: LIST
47900: LIST
47901: LIST
47902: LIST
47903: LIST
47904: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47905: LD_ADDR_VAR 0 37
47909: PUSH
47910: LD_INT 0
47912: PUSH
47913: LD_INT 0
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: PUSH
47920: LD_INT 0
47922: PUSH
47923: LD_INT 1
47925: NEG
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: PUSH
47931: LD_INT 1
47933: PUSH
47934: LD_INT 0
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: PUSH
47941: LD_INT 1
47943: PUSH
47944: LD_INT 1
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 0
47953: PUSH
47954: LD_INT 1
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 1
47963: NEG
47964: PUSH
47965: LD_INT 0
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: PUSH
47972: LD_INT 1
47974: NEG
47975: PUSH
47976: LD_INT 1
47978: NEG
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: LD_INT 1
47986: PUSH
47987: LD_INT 1
47989: NEG
47990: PUSH
47991: EMPTY
47992: LIST
47993: LIST
47994: PUSH
47995: LD_INT 1
47997: NEG
47998: PUSH
47999: LD_INT 1
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: EMPTY
48007: LIST
48008: LIST
48009: LIST
48010: LIST
48011: LIST
48012: LIST
48013: LIST
48014: LIST
48015: LIST
48016: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48017: LD_ADDR_VAR 0 38
48021: PUSH
48022: LD_INT 0
48024: PUSH
48025: LD_INT 0
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: PUSH
48032: LD_INT 0
48034: PUSH
48035: LD_INT 1
48037: NEG
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: LD_INT 1
48045: PUSH
48046: LD_INT 0
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 1
48055: PUSH
48056: LD_INT 1
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: PUSH
48063: LD_INT 0
48065: PUSH
48066: LD_INT 1
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 1
48075: NEG
48076: PUSH
48077: LD_INT 0
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: PUSH
48084: LD_INT 1
48086: NEG
48087: PUSH
48088: LD_INT 1
48090: NEG
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: PUSH
48096: LD_INT 2
48098: PUSH
48099: LD_INT 1
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: PUSH
48106: LD_INT 2
48108: NEG
48109: PUSH
48110: LD_INT 1
48112: NEG
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: LIST
48122: LIST
48123: LIST
48124: LIST
48125: LIST
48126: LIST
48127: LIST
48128: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48129: LD_ADDR_VAR 0 39
48133: PUSH
48134: LD_INT 0
48136: PUSH
48137: LD_INT 0
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 0
48146: PUSH
48147: LD_INT 1
48149: NEG
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PUSH
48155: LD_INT 1
48157: PUSH
48158: LD_INT 0
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: PUSH
48165: LD_INT 1
48167: PUSH
48168: LD_INT 1
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: PUSH
48175: LD_INT 0
48177: PUSH
48178: LD_INT 1
48180: PUSH
48181: EMPTY
48182: LIST
48183: LIST
48184: PUSH
48185: LD_INT 1
48187: NEG
48188: PUSH
48189: LD_INT 0
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: PUSH
48196: LD_INT 1
48198: NEG
48199: PUSH
48200: LD_INT 1
48202: NEG
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: LD_INT 1
48210: NEG
48211: PUSH
48212: LD_INT 2
48214: NEG
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: LD_INT 1
48222: PUSH
48223: LD_INT 2
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: LIST
48234: LIST
48235: LIST
48236: LIST
48237: LIST
48238: LIST
48239: LIST
48240: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48241: LD_ADDR_VAR 0 40
48245: PUSH
48246: LD_INT 0
48248: PUSH
48249: LD_INT 0
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PUSH
48256: LD_INT 0
48258: PUSH
48259: LD_INT 1
48261: NEG
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: PUSH
48267: LD_INT 1
48269: PUSH
48270: LD_INT 0
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: PUSH
48277: LD_INT 1
48279: PUSH
48280: LD_INT 1
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: PUSH
48287: LD_INT 0
48289: PUSH
48290: LD_INT 1
48292: PUSH
48293: EMPTY
48294: LIST
48295: LIST
48296: PUSH
48297: LD_INT 1
48299: NEG
48300: PUSH
48301: LD_INT 0
48303: PUSH
48304: EMPTY
48305: LIST
48306: LIST
48307: PUSH
48308: LD_INT 1
48310: NEG
48311: PUSH
48312: LD_INT 1
48314: NEG
48315: PUSH
48316: EMPTY
48317: LIST
48318: LIST
48319: PUSH
48320: LD_INT 1
48322: PUSH
48323: LD_INT 1
48325: NEG
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: PUSH
48331: LD_INT 1
48333: NEG
48334: PUSH
48335: LD_INT 1
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: EMPTY
48343: LIST
48344: LIST
48345: LIST
48346: LIST
48347: LIST
48348: LIST
48349: LIST
48350: LIST
48351: LIST
48352: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48353: LD_ADDR_VAR 0 41
48357: PUSH
48358: LD_INT 0
48360: PUSH
48361: LD_INT 0
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: PUSH
48368: LD_INT 0
48370: PUSH
48371: LD_INT 1
48373: NEG
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: PUSH
48379: LD_INT 1
48381: PUSH
48382: LD_INT 0
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: PUSH
48389: LD_INT 1
48391: PUSH
48392: LD_INT 1
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: LD_INT 0
48401: PUSH
48402: LD_INT 1
48404: PUSH
48405: EMPTY
48406: LIST
48407: LIST
48408: PUSH
48409: LD_INT 1
48411: NEG
48412: PUSH
48413: LD_INT 0
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: PUSH
48420: LD_INT 1
48422: NEG
48423: PUSH
48424: LD_INT 1
48426: NEG
48427: PUSH
48428: EMPTY
48429: LIST
48430: LIST
48431: PUSH
48432: LD_INT 1
48434: NEG
48435: PUSH
48436: LD_INT 2
48438: NEG
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: LD_INT 1
48446: PUSH
48447: LD_INT 1
48449: NEG
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: LD_INT 2
48457: PUSH
48458: LD_INT 0
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: LD_INT 2
48467: PUSH
48468: LD_INT 1
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 2
48477: PUSH
48478: LD_INT 2
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 1
48487: PUSH
48488: LD_INT 2
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: PUSH
48495: LD_INT 1
48497: NEG
48498: PUSH
48499: LD_INT 1
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: PUSH
48506: LD_INT 2
48508: NEG
48509: PUSH
48510: LD_INT 0
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 2
48519: NEG
48520: PUSH
48521: LD_INT 1
48523: NEG
48524: PUSH
48525: EMPTY
48526: LIST
48527: LIST
48528: PUSH
48529: LD_INT 2
48531: NEG
48532: PUSH
48533: LD_INT 2
48535: NEG
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: LD_INT 2
48543: NEG
48544: PUSH
48545: LD_INT 3
48547: NEG
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_INT 2
48555: PUSH
48556: LD_INT 1
48558: NEG
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: PUSH
48564: LD_INT 3
48566: PUSH
48567: LD_INT 0
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: PUSH
48574: LD_INT 3
48576: PUSH
48577: LD_INT 1
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: PUSH
48584: LD_INT 3
48586: PUSH
48587: LD_INT 2
48589: PUSH
48590: EMPTY
48591: LIST
48592: LIST
48593: PUSH
48594: LD_INT 3
48596: PUSH
48597: LD_INT 3
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: PUSH
48604: LD_INT 2
48606: PUSH
48607: LD_INT 3
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: PUSH
48614: LD_INT 2
48616: NEG
48617: PUSH
48618: LD_INT 1
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: LD_INT 3
48627: NEG
48628: PUSH
48629: LD_INT 0
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: LD_INT 3
48638: NEG
48639: PUSH
48640: LD_INT 1
48642: NEG
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: PUSH
48648: LD_INT 3
48650: NEG
48651: PUSH
48652: LD_INT 2
48654: NEG
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: LD_INT 3
48662: NEG
48663: PUSH
48664: LD_INT 3
48666: NEG
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: PUSH
48672: EMPTY
48673: LIST
48674: LIST
48675: LIST
48676: LIST
48677: LIST
48678: LIST
48679: LIST
48680: LIST
48681: LIST
48682: LIST
48683: LIST
48684: LIST
48685: LIST
48686: LIST
48687: LIST
48688: LIST
48689: LIST
48690: LIST
48691: LIST
48692: LIST
48693: LIST
48694: LIST
48695: LIST
48696: LIST
48697: LIST
48698: LIST
48699: LIST
48700: LIST
48701: LIST
48702: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48703: LD_ADDR_VAR 0 42
48707: PUSH
48708: LD_INT 0
48710: PUSH
48711: LD_INT 0
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 0
48720: PUSH
48721: LD_INT 1
48723: NEG
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 1
48731: PUSH
48732: LD_INT 0
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: PUSH
48739: LD_INT 1
48741: PUSH
48742: LD_INT 1
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: LD_INT 0
48751: PUSH
48752: LD_INT 1
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PUSH
48759: LD_INT 1
48761: NEG
48762: PUSH
48763: LD_INT 0
48765: PUSH
48766: EMPTY
48767: LIST
48768: LIST
48769: PUSH
48770: LD_INT 1
48772: NEG
48773: PUSH
48774: LD_INT 1
48776: NEG
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: LD_INT 1
48784: NEG
48785: PUSH
48786: LD_INT 2
48788: NEG
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: PUSH
48794: LD_INT 0
48796: PUSH
48797: LD_INT 2
48799: NEG
48800: PUSH
48801: EMPTY
48802: LIST
48803: LIST
48804: PUSH
48805: LD_INT 1
48807: PUSH
48808: LD_INT 1
48810: NEG
48811: PUSH
48812: EMPTY
48813: LIST
48814: LIST
48815: PUSH
48816: LD_INT 2
48818: PUSH
48819: LD_INT 1
48821: PUSH
48822: EMPTY
48823: LIST
48824: LIST
48825: PUSH
48826: LD_INT 2
48828: PUSH
48829: LD_INT 2
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: PUSH
48836: LD_INT 1
48838: PUSH
48839: LD_INT 2
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: PUSH
48846: LD_INT 0
48848: PUSH
48849: LD_INT 2
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PUSH
48856: LD_INT 1
48858: NEG
48859: PUSH
48860: LD_INT 1
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: LD_INT 2
48869: NEG
48870: PUSH
48871: LD_INT 1
48873: NEG
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: PUSH
48879: LD_INT 2
48881: NEG
48882: PUSH
48883: LD_INT 2
48885: NEG
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: PUSH
48891: LD_INT 2
48893: NEG
48894: PUSH
48895: LD_INT 3
48897: NEG
48898: PUSH
48899: EMPTY
48900: LIST
48901: LIST
48902: PUSH
48903: LD_INT 1
48905: NEG
48906: PUSH
48907: LD_INT 3
48909: NEG
48910: PUSH
48911: EMPTY
48912: LIST
48913: LIST
48914: PUSH
48915: LD_INT 0
48917: PUSH
48918: LD_INT 3
48920: NEG
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 1
48928: PUSH
48929: LD_INT 2
48931: NEG
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: PUSH
48937: LD_INT 3
48939: PUSH
48940: LD_INT 2
48942: PUSH
48943: EMPTY
48944: LIST
48945: LIST
48946: PUSH
48947: LD_INT 3
48949: PUSH
48950: LD_INT 3
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: LD_INT 2
48959: PUSH
48960: LD_INT 3
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PUSH
48967: LD_INT 1
48969: PUSH
48970: LD_INT 3
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: LD_INT 0
48979: PUSH
48980: LD_INT 3
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: LD_INT 1
48989: NEG
48990: PUSH
48991: LD_INT 2
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: PUSH
48998: LD_INT 3
49000: NEG
49001: PUSH
49002: LD_INT 2
49004: NEG
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: PUSH
49010: LD_INT 3
49012: NEG
49013: PUSH
49014: LD_INT 3
49016: NEG
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: LIST
49026: LIST
49027: LIST
49028: LIST
49029: LIST
49030: LIST
49031: LIST
49032: LIST
49033: LIST
49034: LIST
49035: LIST
49036: LIST
49037: LIST
49038: LIST
49039: LIST
49040: LIST
49041: LIST
49042: LIST
49043: LIST
49044: LIST
49045: LIST
49046: LIST
49047: LIST
49048: LIST
49049: LIST
49050: LIST
49051: LIST
49052: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49053: LD_ADDR_VAR 0 43
49057: PUSH
49058: LD_INT 0
49060: PUSH
49061: LD_INT 0
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: LD_INT 0
49070: PUSH
49071: LD_INT 1
49073: NEG
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: LD_INT 1
49081: PUSH
49082: LD_INT 0
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: PUSH
49089: LD_INT 1
49091: PUSH
49092: LD_INT 1
49094: PUSH
49095: EMPTY
49096: LIST
49097: LIST
49098: PUSH
49099: LD_INT 0
49101: PUSH
49102: LD_INT 1
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: PUSH
49109: LD_INT 1
49111: NEG
49112: PUSH
49113: LD_INT 0
49115: PUSH
49116: EMPTY
49117: LIST
49118: LIST
49119: PUSH
49120: LD_INT 1
49122: NEG
49123: PUSH
49124: LD_INT 1
49126: NEG
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: PUSH
49132: LD_INT 1
49134: NEG
49135: PUSH
49136: LD_INT 2
49138: NEG
49139: PUSH
49140: EMPTY
49141: LIST
49142: LIST
49143: PUSH
49144: LD_INT 0
49146: PUSH
49147: LD_INT 2
49149: NEG
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: PUSH
49155: LD_INT 1
49157: PUSH
49158: LD_INT 1
49160: NEG
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PUSH
49166: LD_INT 2
49168: PUSH
49169: LD_INT 0
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 2
49178: PUSH
49179: LD_INT 1
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: LD_INT 1
49188: PUSH
49189: LD_INT 2
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: PUSH
49196: LD_INT 0
49198: PUSH
49199: LD_INT 2
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: PUSH
49206: LD_INT 1
49208: NEG
49209: PUSH
49210: LD_INT 1
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: PUSH
49217: LD_INT 2
49219: NEG
49220: PUSH
49221: LD_INT 0
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: LD_INT 2
49230: NEG
49231: PUSH
49232: LD_INT 1
49234: NEG
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: PUSH
49240: LD_INT 1
49242: NEG
49243: PUSH
49244: LD_INT 3
49246: NEG
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 0
49254: PUSH
49255: LD_INT 3
49257: NEG
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PUSH
49263: LD_INT 1
49265: PUSH
49266: LD_INT 2
49268: NEG
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: LD_INT 2
49276: PUSH
49277: LD_INT 1
49279: NEG
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: PUSH
49285: LD_INT 3
49287: PUSH
49288: LD_INT 0
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: LD_INT 3
49297: PUSH
49298: LD_INT 1
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 1
49307: PUSH
49308: LD_INT 3
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 0
49317: PUSH
49318: LD_INT 3
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: LD_INT 1
49327: NEG
49328: PUSH
49329: LD_INT 2
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PUSH
49336: LD_INT 2
49338: NEG
49339: PUSH
49340: LD_INT 1
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: LD_INT 3
49349: NEG
49350: PUSH
49351: LD_INT 0
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 3
49360: NEG
49361: PUSH
49362: LD_INT 1
49364: NEG
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: EMPTY
49371: LIST
49372: LIST
49373: LIST
49374: LIST
49375: LIST
49376: LIST
49377: LIST
49378: LIST
49379: LIST
49380: LIST
49381: LIST
49382: LIST
49383: LIST
49384: LIST
49385: LIST
49386: LIST
49387: LIST
49388: LIST
49389: LIST
49390: LIST
49391: LIST
49392: LIST
49393: LIST
49394: LIST
49395: LIST
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49401: LD_ADDR_VAR 0 44
49405: PUSH
49406: LD_INT 0
49408: PUSH
49409: LD_INT 0
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: LD_INT 0
49418: PUSH
49419: LD_INT 1
49421: NEG
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: LD_INT 1
49429: PUSH
49430: LD_INT 0
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: PUSH
49437: LD_INT 1
49439: PUSH
49440: LD_INT 1
49442: PUSH
49443: EMPTY
49444: LIST
49445: LIST
49446: PUSH
49447: LD_INT 0
49449: PUSH
49450: LD_INT 1
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: PUSH
49457: LD_INT 1
49459: NEG
49460: PUSH
49461: LD_INT 0
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_INT 1
49470: NEG
49471: PUSH
49472: LD_INT 1
49474: NEG
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: LD_INT 1
49482: NEG
49483: PUSH
49484: LD_INT 2
49486: NEG
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: LD_INT 1
49494: PUSH
49495: LD_INT 1
49497: NEG
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: PUSH
49503: LD_INT 2
49505: PUSH
49506: LD_INT 0
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: PUSH
49513: LD_INT 2
49515: PUSH
49516: LD_INT 1
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: PUSH
49523: LD_INT 2
49525: PUSH
49526: LD_INT 2
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: LD_INT 1
49535: PUSH
49536: LD_INT 2
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: PUSH
49543: LD_INT 1
49545: NEG
49546: PUSH
49547: LD_INT 1
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: PUSH
49554: LD_INT 2
49556: NEG
49557: PUSH
49558: LD_INT 0
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: PUSH
49565: LD_INT 2
49567: NEG
49568: PUSH
49569: LD_INT 1
49571: NEG
49572: PUSH
49573: EMPTY
49574: LIST
49575: LIST
49576: PUSH
49577: LD_INT 2
49579: NEG
49580: PUSH
49581: LD_INT 2
49583: NEG
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PUSH
49589: LD_INT 2
49591: NEG
49592: PUSH
49593: LD_INT 3
49595: NEG
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: PUSH
49601: LD_INT 2
49603: PUSH
49604: LD_INT 1
49606: NEG
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: PUSH
49612: LD_INT 3
49614: PUSH
49615: LD_INT 0
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: PUSH
49622: LD_INT 3
49624: PUSH
49625: LD_INT 1
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: PUSH
49632: LD_INT 3
49634: PUSH
49635: LD_INT 2
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 3
49644: PUSH
49645: LD_INT 3
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: PUSH
49652: LD_INT 2
49654: PUSH
49655: LD_INT 3
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PUSH
49662: LD_INT 2
49664: NEG
49665: PUSH
49666: LD_INT 1
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 3
49675: NEG
49676: PUSH
49677: LD_INT 0
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: PUSH
49684: LD_INT 3
49686: NEG
49687: PUSH
49688: LD_INT 1
49690: NEG
49691: PUSH
49692: EMPTY
49693: LIST
49694: LIST
49695: PUSH
49696: LD_INT 3
49698: NEG
49699: PUSH
49700: LD_INT 2
49702: NEG
49703: PUSH
49704: EMPTY
49705: LIST
49706: LIST
49707: PUSH
49708: LD_INT 3
49710: NEG
49711: PUSH
49712: LD_INT 3
49714: NEG
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: PUSH
49720: EMPTY
49721: LIST
49722: LIST
49723: LIST
49724: LIST
49725: LIST
49726: LIST
49727: LIST
49728: LIST
49729: LIST
49730: LIST
49731: LIST
49732: LIST
49733: LIST
49734: LIST
49735: LIST
49736: LIST
49737: LIST
49738: LIST
49739: LIST
49740: LIST
49741: LIST
49742: LIST
49743: LIST
49744: LIST
49745: LIST
49746: LIST
49747: LIST
49748: LIST
49749: LIST
49750: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49751: LD_ADDR_VAR 0 45
49755: PUSH
49756: LD_INT 0
49758: PUSH
49759: LD_INT 0
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 0
49768: PUSH
49769: LD_INT 1
49771: NEG
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: LD_INT 1
49779: PUSH
49780: LD_INT 0
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: LD_INT 1
49789: PUSH
49790: LD_INT 1
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: LD_INT 0
49799: PUSH
49800: LD_INT 1
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: LD_INT 1
49809: NEG
49810: PUSH
49811: LD_INT 0
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 1
49820: NEG
49821: PUSH
49822: LD_INT 1
49824: NEG
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: PUSH
49830: LD_INT 1
49832: NEG
49833: PUSH
49834: LD_INT 2
49836: NEG
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: LD_INT 0
49844: PUSH
49845: LD_INT 2
49847: NEG
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 1
49855: PUSH
49856: LD_INT 1
49858: NEG
49859: PUSH
49860: EMPTY
49861: LIST
49862: LIST
49863: PUSH
49864: LD_INT 2
49866: PUSH
49867: LD_INT 1
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: PUSH
49874: LD_INT 2
49876: PUSH
49877: LD_INT 2
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: PUSH
49884: LD_INT 1
49886: PUSH
49887: LD_INT 2
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: PUSH
49894: LD_INT 0
49896: PUSH
49897: LD_INT 2
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: PUSH
49904: LD_INT 1
49906: NEG
49907: PUSH
49908: LD_INT 1
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: PUSH
49915: LD_INT 2
49917: NEG
49918: PUSH
49919: LD_INT 1
49921: NEG
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 2
49929: NEG
49930: PUSH
49931: LD_INT 2
49933: NEG
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: LD_INT 2
49941: NEG
49942: PUSH
49943: LD_INT 3
49945: NEG
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: LD_INT 1
49953: NEG
49954: PUSH
49955: LD_INT 3
49957: NEG
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: PUSH
49963: LD_INT 0
49965: PUSH
49966: LD_INT 3
49968: NEG
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: PUSH
49974: LD_INT 1
49976: PUSH
49977: LD_INT 2
49979: NEG
49980: PUSH
49981: EMPTY
49982: LIST
49983: LIST
49984: PUSH
49985: LD_INT 3
49987: PUSH
49988: LD_INT 2
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: PUSH
49995: LD_INT 3
49997: PUSH
49998: LD_INT 3
50000: PUSH
50001: EMPTY
50002: LIST
50003: LIST
50004: PUSH
50005: LD_INT 2
50007: PUSH
50008: LD_INT 3
50010: PUSH
50011: EMPTY
50012: LIST
50013: LIST
50014: PUSH
50015: LD_INT 1
50017: PUSH
50018: LD_INT 3
50020: PUSH
50021: EMPTY
50022: LIST
50023: LIST
50024: PUSH
50025: LD_INT 0
50027: PUSH
50028: LD_INT 3
50030: PUSH
50031: EMPTY
50032: LIST
50033: LIST
50034: PUSH
50035: LD_INT 1
50037: NEG
50038: PUSH
50039: LD_INT 2
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: LD_INT 3
50048: NEG
50049: PUSH
50050: LD_INT 2
50052: NEG
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: LD_INT 3
50060: NEG
50061: PUSH
50062: LD_INT 3
50064: NEG
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: LIST
50074: LIST
50075: LIST
50076: LIST
50077: LIST
50078: LIST
50079: LIST
50080: LIST
50081: LIST
50082: LIST
50083: LIST
50084: LIST
50085: LIST
50086: LIST
50087: LIST
50088: LIST
50089: LIST
50090: LIST
50091: LIST
50092: LIST
50093: LIST
50094: LIST
50095: LIST
50096: LIST
50097: LIST
50098: LIST
50099: LIST
50100: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50101: LD_ADDR_VAR 0 46
50105: PUSH
50106: LD_INT 0
50108: PUSH
50109: LD_INT 0
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: PUSH
50116: LD_INT 0
50118: PUSH
50119: LD_INT 1
50121: NEG
50122: PUSH
50123: EMPTY
50124: LIST
50125: LIST
50126: PUSH
50127: LD_INT 1
50129: PUSH
50130: LD_INT 0
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: PUSH
50137: LD_INT 1
50139: PUSH
50140: LD_INT 1
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: LD_INT 0
50149: PUSH
50150: LD_INT 1
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PUSH
50157: LD_INT 1
50159: NEG
50160: PUSH
50161: LD_INT 0
50163: PUSH
50164: EMPTY
50165: LIST
50166: LIST
50167: PUSH
50168: LD_INT 1
50170: NEG
50171: PUSH
50172: LD_INT 1
50174: NEG
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: PUSH
50180: LD_INT 1
50182: NEG
50183: PUSH
50184: LD_INT 2
50186: NEG
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: PUSH
50192: LD_INT 0
50194: PUSH
50195: LD_INT 2
50197: NEG
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: PUSH
50203: LD_INT 1
50205: PUSH
50206: LD_INT 1
50208: NEG
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: PUSH
50214: LD_INT 2
50216: PUSH
50217: LD_INT 0
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: LD_INT 2
50226: PUSH
50227: LD_INT 1
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: PUSH
50234: LD_INT 1
50236: PUSH
50237: LD_INT 2
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: PUSH
50244: LD_INT 0
50246: PUSH
50247: LD_INT 2
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: PUSH
50254: LD_INT 1
50256: NEG
50257: PUSH
50258: LD_INT 1
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: PUSH
50265: LD_INT 2
50267: NEG
50268: PUSH
50269: LD_INT 0
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: PUSH
50276: LD_INT 2
50278: NEG
50279: PUSH
50280: LD_INT 1
50282: NEG
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: PUSH
50288: LD_INT 1
50290: NEG
50291: PUSH
50292: LD_INT 3
50294: NEG
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: LD_INT 0
50302: PUSH
50303: LD_INT 3
50305: NEG
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 1
50313: PUSH
50314: LD_INT 2
50316: NEG
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PUSH
50322: LD_INT 2
50324: PUSH
50325: LD_INT 1
50327: NEG
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: PUSH
50333: LD_INT 3
50335: PUSH
50336: LD_INT 0
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: LD_INT 3
50345: PUSH
50346: LD_INT 1
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: PUSH
50353: LD_INT 1
50355: PUSH
50356: LD_INT 3
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: PUSH
50363: LD_INT 0
50365: PUSH
50366: LD_INT 3
50368: PUSH
50369: EMPTY
50370: LIST
50371: LIST
50372: PUSH
50373: LD_INT 1
50375: NEG
50376: PUSH
50377: LD_INT 2
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PUSH
50384: LD_INT 2
50386: NEG
50387: PUSH
50388: LD_INT 1
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: LD_INT 3
50397: NEG
50398: PUSH
50399: LD_INT 0
50401: PUSH
50402: EMPTY
50403: LIST
50404: LIST
50405: PUSH
50406: LD_INT 3
50408: NEG
50409: PUSH
50410: LD_INT 1
50412: NEG
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: LIST
50422: LIST
50423: LIST
50424: LIST
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: LIST
50439: LIST
50440: LIST
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50449: LD_ADDR_VAR 0 47
50453: PUSH
50454: LD_INT 0
50456: PUSH
50457: LD_INT 0
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PUSH
50464: LD_INT 0
50466: PUSH
50467: LD_INT 1
50469: NEG
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: PUSH
50475: LD_INT 1
50477: PUSH
50478: LD_INT 0
50480: PUSH
50481: EMPTY
50482: LIST
50483: LIST
50484: PUSH
50485: LD_INT 1
50487: PUSH
50488: LD_INT 1
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: LD_INT 0
50497: PUSH
50498: LD_INT 1
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 1
50507: NEG
50508: PUSH
50509: LD_INT 0
50511: PUSH
50512: EMPTY
50513: LIST
50514: LIST
50515: PUSH
50516: LD_INT 1
50518: NEG
50519: PUSH
50520: LD_INT 1
50522: NEG
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: PUSH
50528: LD_INT 1
50530: NEG
50531: PUSH
50532: LD_INT 2
50534: NEG
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: PUSH
50540: LD_INT 0
50542: PUSH
50543: LD_INT 2
50545: NEG
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: LD_INT 1
50553: PUSH
50554: LD_INT 1
50556: NEG
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: LD_INT 2
50564: NEG
50565: PUSH
50566: LD_INT 1
50568: NEG
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: PUSH
50574: LD_INT 2
50576: NEG
50577: PUSH
50578: LD_INT 2
50580: NEG
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: PUSH
50586: EMPTY
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: LIST
50592: LIST
50593: LIST
50594: LIST
50595: LIST
50596: LIST
50597: LIST
50598: LIST
50599: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50600: LD_ADDR_VAR 0 48
50604: PUSH
50605: LD_INT 0
50607: PUSH
50608: LD_INT 0
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PUSH
50615: LD_INT 0
50617: PUSH
50618: LD_INT 1
50620: NEG
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: LD_INT 1
50628: PUSH
50629: LD_INT 0
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: LD_INT 1
50638: PUSH
50639: LD_INT 1
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: PUSH
50646: LD_INT 0
50648: PUSH
50649: LD_INT 1
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: PUSH
50656: LD_INT 1
50658: NEG
50659: PUSH
50660: LD_INT 0
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: PUSH
50667: LD_INT 1
50669: NEG
50670: PUSH
50671: LD_INT 1
50673: NEG
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: PUSH
50679: LD_INT 1
50681: NEG
50682: PUSH
50683: LD_INT 2
50685: NEG
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: LD_INT 0
50693: PUSH
50694: LD_INT 2
50696: NEG
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: PUSH
50702: LD_INT 1
50704: PUSH
50705: LD_INT 1
50707: NEG
50708: PUSH
50709: EMPTY
50710: LIST
50711: LIST
50712: PUSH
50713: LD_INT 2
50715: PUSH
50716: LD_INT 0
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PUSH
50723: LD_INT 2
50725: PUSH
50726: LD_INT 1
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: LIST
50737: LIST
50738: LIST
50739: LIST
50740: LIST
50741: LIST
50742: LIST
50743: LIST
50744: LIST
50745: LIST
50746: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50747: LD_ADDR_VAR 0 49
50751: PUSH
50752: LD_INT 0
50754: PUSH
50755: LD_INT 0
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: PUSH
50762: LD_INT 0
50764: PUSH
50765: LD_INT 1
50767: NEG
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: PUSH
50773: LD_INT 1
50775: PUSH
50776: LD_INT 0
50778: PUSH
50779: EMPTY
50780: LIST
50781: LIST
50782: PUSH
50783: LD_INT 1
50785: PUSH
50786: LD_INT 1
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: PUSH
50793: LD_INT 0
50795: PUSH
50796: LD_INT 1
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: LD_INT 1
50805: NEG
50806: PUSH
50807: LD_INT 0
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: PUSH
50814: LD_INT 1
50816: NEG
50817: PUSH
50818: LD_INT 1
50820: NEG
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: LD_INT 1
50828: PUSH
50829: LD_INT 1
50831: NEG
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: PUSH
50837: LD_INT 2
50839: PUSH
50840: LD_INT 0
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: PUSH
50847: LD_INT 2
50849: PUSH
50850: LD_INT 1
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 2
50859: PUSH
50860: LD_INT 2
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 1
50869: PUSH
50870: LD_INT 2
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50891: LD_ADDR_VAR 0 50
50895: PUSH
50896: LD_INT 0
50898: PUSH
50899: LD_INT 0
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 0
50908: PUSH
50909: LD_INT 1
50911: NEG
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: PUSH
50917: LD_INT 1
50919: PUSH
50920: LD_INT 0
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 1
50929: PUSH
50930: LD_INT 1
50932: PUSH
50933: EMPTY
50934: LIST
50935: LIST
50936: PUSH
50937: LD_INT 0
50939: PUSH
50940: LD_INT 1
50942: PUSH
50943: EMPTY
50944: LIST
50945: LIST
50946: PUSH
50947: LD_INT 1
50949: NEG
50950: PUSH
50951: LD_INT 0
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: PUSH
50958: LD_INT 1
50960: NEG
50961: PUSH
50962: LD_INT 1
50964: NEG
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: PUSH
50970: LD_INT 2
50972: PUSH
50973: LD_INT 1
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PUSH
50980: LD_INT 2
50982: PUSH
50983: LD_INT 2
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: PUSH
50990: LD_INT 1
50992: PUSH
50993: LD_INT 2
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: PUSH
51000: LD_INT 0
51002: PUSH
51003: LD_INT 2
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: PUSH
51010: LD_INT 1
51012: NEG
51013: PUSH
51014: LD_INT 1
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: LIST
51025: LIST
51026: LIST
51027: LIST
51028: LIST
51029: LIST
51030: LIST
51031: LIST
51032: LIST
51033: LIST
51034: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51035: LD_ADDR_VAR 0 51
51039: PUSH
51040: LD_INT 0
51042: PUSH
51043: LD_INT 0
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: LD_INT 0
51052: PUSH
51053: LD_INT 1
51055: NEG
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: PUSH
51061: LD_INT 1
51063: PUSH
51064: LD_INT 0
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: LD_INT 1
51073: PUSH
51074: LD_INT 1
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: LD_INT 0
51083: PUSH
51084: LD_INT 1
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: PUSH
51091: LD_INT 1
51093: NEG
51094: PUSH
51095: LD_INT 0
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 1
51104: NEG
51105: PUSH
51106: LD_INT 1
51108: NEG
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: PUSH
51114: LD_INT 1
51116: PUSH
51117: LD_INT 2
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 0
51126: PUSH
51127: LD_INT 2
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: PUSH
51134: LD_INT 1
51136: NEG
51137: PUSH
51138: LD_INT 1
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: PUSH
51145: LD_INT 2
51147: NEG
51148: PUSH
51149: LD_INT 0
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 2
51158: NEG
51159: PUSH
51160: LD_INT 1
51162: NEG
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: LIST
51172: LIST
51173: LIST
51174: LIST
51175: LIST
51176: LIST
51177: LIST
51178: LIST
51179: LIST
51180: LIST
51181: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51182: LD_ADDR_VAR 0 52
51186: PUSH
51187: LD_INT 0
51189: PUSH
51190: LD_INT 0
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 0
51199: PUSH
51200: LD_INT 1
51202: NEG
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: LD_INT 1
51210: PUSH
51211: LD_INT 0
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: PUSH
51218: LD_INT 1
51220: PUSH
51221: LD_INT 1
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: PUSH
51228: LD_INT 0
51230: PUSH
51231: LD_INT 1
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: PUSH
51238: LD_INT 1
51240: NEG
51241: PUSH
51242: LD_INT 0
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 1
51251: NEG
51252: PUSH
51253: LD_INT 1
51255: NEG
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 1
51263: NEG
51264: PUSH
51265: LD_INT 2
51267: NEG
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 1
51275: NEG
51276: PUSH
51277: LD_INT 1
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: LD_INT 2
51286: NEG
51287: PUSH
51288: LD_INT 0
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 2
51297: NEG
51298: PUSH
51299: LD_INT 1
51301: NEG
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: LD_INT 2
51309: NEG
51310: PUSH
51311: LD_INT 2
51313: NEG
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: LIST
51323: LIST
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: LIST
51329: LIST
51330: LIST
51331: LIST
51332: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51333: LD_ADDR_VAR 0 53
51337: PUSH
51338: LD_INT 0
51340: PUSH
51341: LD_INT 0
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: LD_INT 0
51350: PUSH
51351: LD_INT 1
51353: NEG
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 1
51361: PUSH
51362: LD_INT 0
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: PUSH
51369: LD_INT 1
51371: PUSH
51372: LD_INT 1
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 0
51381: PUSH
51382: LD_INT 1
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: LD_INT 1
51391: NEG
51392: PUSH
51393: LD_INT 0
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: PUSH
51400: LD_INT 1
51402: NEG
51403: PUSH
51404: LD_INT 1
51406: NEG
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 1
51414: NEG
51415: PUSH
51416: LD_INT 2
51418: NEG
51419: PUSH
51420: EMPTY
51421: LIST
51422: LIST
51423: PUSH
51424: LD_INT 0
51426: PUSH
51427: LD_INT 2
51429: NEG
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: LD_INT 1
51437: PUSH
51438: LD_INT 1
51440: NEG
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: PUSH
51446: LD_INT 2
51448: PUSH
51449: LD_INT 0
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: LD_INT 2
51458: PUSH
51459: LD_INT 1
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: LD_INT 2
51468: PUSH
51469: LD_INT 2
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 1
51478: PUSH
51479: LD_INT 2
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 0
51488: PUSH
51489: LD_INT 2
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: PUSH
51496: LD_INT 1
51498: NEG
51499: PUSH
51500: LD_INT 1
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: PUSH
51507: LD_INT 2
51509: NEG
51510: PUSH
51511: LD_INT 0
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: PUSH
51518: LD_INT 2
51520: NEG
51521: PUSH
51522: LD_INT 1
51524: NEG
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: LD_INT 2
51532: NEG
51533: PUSH
51534: LD_INT 2
51536: NEG
51537: PUSH
51538: EMPTY
51539: LIST
51540: LIST
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: LIST
51546: LIST
51547: LIST
51548: LIST
51549: LIST
51550: LIST
51551: LIST
51552: LIST
51553: LIST
51554: LIST
51555: LIST
51556: LIST
51557: LIST
51558: LIST
51559: LIST
51560: LIST
51561: LIST
51562: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51563: LD_ADDR_VAR 0 54
51567: PUSH
51568: LD_INT 0
51570: PUSH
51571: LD_INT 0
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: PUSH
51578: LD_INT 0
51580: PUSH
51581: LD_INT 1
51583: NEG
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: LD_INT 1
51591: PUSH
51592: LD_INT 0
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: PUSH
51599: LD_INT 1
51601: PUSH
51602: LD_INT 1
51604: PUSH
51605: EMPTY
51606: LIST
51607: LIST
51608: PUSH
51609: LD_INT 0
51611: PUSH
51612: LD_INT 1
51614: PUSH
51615: EMPTY
51616: LIST
51617: LIST
51618: PUSH
51619: LD_INT 1
51621: NEG
51622: PUSH
51623: LD_INT 0
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: PUSH
51630: LD_INT 1
51632: NEG
51633: PUSH
51634: LD_INT 1
51636: NEG
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: PUSH
51642: LD_INT 1
51644: NEG
51645: PUSH
51646: LD_INT 2
51648: NEG
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: PUSH
51654: LD_INT 0
51656: PUSH
51657: LD_INT 2
51659: NEG
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PUSH
51665: LD_INT 1
51667: PUSH
51668: LD_INT 1
51670: NEG
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: PUSH
51676: LD_INT 2
51678: PUSH
51679: LD_INT 0
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PUSH
51686: LD_INT 2
51688: PUSH
51689: LD_INT 1
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: LD_INT 2
51698: PUSH
51699: LD_INT 2
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: PUSH
51706: LD_INT 1
51708: PUSH
51709: LD_INT 2
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: PUSH
51716: LD_INT 0
51718: PUSH
51719: LD_INT 2
51721: PUSH
51722: EMPTY
51723: LIST
51724: LIST
51725: PUSH
51726: LD_INT 1
51728: NEG
51729: PUSH
51730: LD_INT 1
51732: PUSH
51733: EMPTY
51734: LIST
51735: LIST
51736: PUSH
51737: LD_INT 2
51739: NEG
51740: PUSH
51741: LD_INT 0
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: LD_INT 2
51750: NEG
51751: PUSH
51752: LD_INT 1
51754: NEG
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: LD_INT 2
51762: NEG
51763: PUSH
51764: LD_INT 2
51766: NEG
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: LIST
51776: LIST
51777: LIST
51778: LIST
51779: LIST
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51793: LD_ADDR_VAR 0 55
51797: PUSH
51798: LD_INT 0
51800: PUSH
51801: LD_INT 0
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PUSH
51808: LD_INT 0
51810: PUSH
51811: LD_INT 1
51813: NEG
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: LD_INT 1
51821: PUSH
51822: LD_INT 0
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: LD_INT 1
51831: PUSH
51832: LD_INT 1
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_INT 0
51841: PUSH
51842: LD_INT 1
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: PUSH
51849: LD_INT 1
51851: NEG
51852: PUSH
51853: LD_INT 0
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: LD_INT 1
51862: NEG
51863: PUSH
51864: LD_INT 1
51866: NEG
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: LD_INT 1
51874: NEG
51875: PUSH
51876: LD_INT 2
51878: NEG
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: LD_INT 0
51886: PUSH
51887: LD_INT 2
51889: NEG
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PUSH
51895: LD_INT 1
51897: PUSH
51898: LD_INT 1
51900: NEG
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 2
51908: PUSH
51909: LD_INT 0
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 2
51918: PUSH
51919: LD_INT 1
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 2
51928: PUSH
51929: LD_INT 2
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: LD_INT 1
51938: PUSH
51939: LD_INT 2
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 0
51948: PUSH
51949: LD_INT 2
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: PUSH
51956: LD_INT 1
51958: NEG
51959: PUSH
51960: LD_INT 1
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PUSH
51967: LD_INT 2
51969: NEG
51970: PUSH
51971: LD_INT 0
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: PUSH
51978: LD_INT 2
51980: NEG
51981: PUSH
51982: LD_INT 1
51984: NEG
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: PUSH
51990: LD_INT 2
51992: NEG
51993: PUSH
51994: LD_INT 2
51996: NEG
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: LIST
52006: LIST
52007: LIST
52008: LIST
52009: LIST
52010: LIST
52011: LIST
52012: LIST
52013: LIST
52014: LIST
52015: LIST
52016: LIST
52017: LIST
52018: LIST
52019: LIST
52020: LIST
52021: LIST
52022: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52023: LD_ADDR_VAR 0 56
52027: PUSH
52028: LD_INT 0
52030: PUSH
52031: LD_INT 0
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: PUSH
52038: LD_INT 0
52040: PUSH
52041: LD_INT 1
52043: NEG
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 1
52051: PUSH
52052: LD_INT 0
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: PUSH
52059: LD_INT 1
52061: PUSH
52062: LD_INT 1
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: PUSH
52069: LD_INT 0
52071: PUSH
52072: LD_INT 1
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: PUSH
52079: LD_INT 1
52081: NEG
52082: PUSH
52083: LD_INT 0
52085: PUSH
52086: EMPTY
52087: LIST
52088: LIST
52089: PUSH
52090: LD_INT 1
52092: NEG
52093: PUSH
52094: LD_INT 1
52096: NEG
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: PUSH
52102: LD_INT 1
52104: NEG
52105: PUSH
52106: LD_INT 2
52108: NEG
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: PUSH
52114: LD_INT 0
52116: PUSH
52117: LD_INT 2
52119: NEG
52120: PUSH
52121: EMPTY
52122: LIST
52123: LIST
52124: PUSH
52125: LD_INT 1
52127: PUSH
52128: LD_INT 1
52130: NEG
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: PUSH
52136: LD_INT 2
52138: PUSH
52139: LD_INT 0
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: PUSH
52146: LD_INT 2
52148: PUSH
52149: LD_INT 1
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: PUSH
52156: LD_INT 2
52158: PUSH
52159: LD_INT 2
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: PUSH
52166: LD_INT 1
52168: PUSH
52169: LD_INT 2
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: PUSH
52176: LD_INT 0
52178: PUSH
52179: LD_INT 2
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: PUSH
52186: LD_INT 1
52188: NEG
52189: PUSH
52190: LD_INT 1
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: PUSH
52197: LD_INT 2
52199: NEG
52200: PUSH
52201: LD_INT 0
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: LD_INT 2
52210: NEG
52211: PUSH
52212: LD_INT 1
52214: NEG
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: LD_INT 2
52222: NEG
52223: PUSH
52224: LD_INT 2
52226: NEG
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: LIST
52236: LIST
52237: LIST
52238: LIST
52239: LIST
52240: LIST
52241: LIST
52242: LIST
52243: LIST
52244: LIST
52245: LIST
52246: LIST
52247: LIST
52248: LIST
52249: LIST
52250: LIST
52251: LIST
52252: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52253: LD_ADDR_VAR 0 57
52257: PUSH
52258: LD_INT 0
52260: PUSH
52261: LD_INT 0
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 0
52270: PUSH
52271: LD_INT 1
52273: NEG
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 1
52281: PUSH
52282: LD_INT 0
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 1
52291: PUSH
52292: LD_INT 1
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: LD_INT 0
52301: PUSH
52302: LD_INT 1
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: PUSH
52309: LD_INT 1
52311: NEG
52312: PUSH
52313: LD_INT 0
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: PUSH
52320: LD_INT 1
52322: NEG
52323: PUSH
52324: LD_INT 1
52326: NEG
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: LD_INT 1
52334: NEG
52335: PUSH
52336: LD_INT 2
52338: NEG
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: LD_INT 0
52346: PUSH
52347: LD_INT 2
52349: NEG
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 1
52357: PUSH
52358: LD_INT 1
52360: NEG
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 2
52368: PUSH
52369: LD_INT 0
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 2
52378: PUSH
52379: LD_INT 1
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: LD_INT 2
52388: PUSH
52389: LD_INT 2
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: PUSH
52396: LD_INT 1
52398: PUSH
52399: LD_INT 2
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: PUSH
52406: LD_INT 0
52408: PUSH
52409: LD_INT 2
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: PUSH
52416: LD_INT 1
52418: NEG
52419: PUSH
52420: LD_INT 1
52422: PUSH
52423: EMPTY
52424: LIST
52425: LIST
52426: PUSH
52427: LD_INT 2
52429: NEG
52430: PUSH
52431: LD_INT 0
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: PUSH
52438: LD_INT 2
52440: NEG
52441: PUSH
52442: LD_INT 1
52444: NEG
52445: PUSH
52446: EMPTY
52447: LIST
52448: LIST
52449: PUSH
52450: LD_INT 2
52452: NEG
52453: PUSH
52454: LD_INT 2
52456: NEG
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: LIST
52466: LIST
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: LIST
52479: LIST
52480: LIST
52481: LIST
52482: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52483: LD_ADDR_VAR 0 58
52487: PUSH
52488: LD_INT 0
52490: PUSH
52491: LD_INT 0
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: PUSH
52498: LD_INT 0
52500: PUSH
52501: LD_INT 1
52503: NEG
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: PUSH
52509: LD_INT 1
52511: PUSH
52512: LD_INT 0
52514: PUSH
52515: EMPTY
52516: LIST
52517: LIST
52518: PUSH
52519: LD_INT 1
52521: PUSH
52522: LD_INT 1
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 0
52531: PUSH
52532: LD_INT 1
52534: PUSH
52535: EMPTY
52536: LIST
52537: LIST
52538: PUSH
52539: LD_INT 1
52541: NEG
52542: PUSH
52543: LD_INT 0
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: PUSH
52550: LD_INT 1
52552: NEG
52553: PUSH
52554: LD_INT 1
52556: NEG
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: PUSH
52562: LD_INT 1
52564: NEG
52565: PUSH
52566: LD_INT 2
52568: NEG
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: PUSH
52574: LD_INT 0
52576: PUSH
52577: LD_INT 2
52579: NEG
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: PUSH
52585: LD_INT 1
52587: PUSH
52588: LD_INT 1
52590: NEG
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 2
52598: PUSH
52599: LD_INT 0
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 2
52608: PUSH
52609: LD_INT 1
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: PUSH
52616: LD_INT 2
52618: PUSH
52619: LD_INT 2
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PUSH
52626: LD_INT 1
52628: PUSH
52629: LD_INT 2
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: PUSH
52636: LD_INT 0
52638: PUSH
52639: LD_INT 2
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PUSH
52646: LD_INT 1
52648: NEG
52649: PUSH
52650: LD_INT 1
52652: PUSH
52653: EMPTY
52654: LIST
52655: LIST
52656: PUSH
52657: LD_INT 2
52659: NEG
52660: PUSH
52661: LD_INT 0
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: LD_INT 2
52670: NEG
52671: PUSH
52672: LD_INT 1
52674: NEG
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PUSH
52680: LD_INT 2
52682: NEG
52683: PUSH
52684: LD_INT 2
52686: NEG
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: LIST
52696: LIST
52697: LIST
52698: LIST
52699: LIST
52700: LIST
52701: LIST
52702: LIST
52703: LIST
52704: LIST
52705: LIST
52706: LIST
52707: LIST
52708: LIST
52709: LIST
52710: LIST
52711: LIST
52712: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52713: LD_ADDR_VAR 0 59
52717: PUSH
52718: LD_INT 0
52720: PUSH
52721: LD_INT 0
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: PUSH
52728: LD_INT 0
52730: PUSH
52731: LD_INT 1
52733: NEG
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PUSH
52739: LD_INT 1
52741: PUSH
52742: LD_INT 0
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: PUSH
52749: LD_INT 1
52751: PUSH
52752: LD_INT 1
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: PUSH
52759: LD_INT 0
52761: PUSH
52762: LD_INT 1
52764: PUSH
52765: EMPTY
52766: LIST
52767: LIST
52768: PUSH
52769: LD_INT 1
52771: NEG
52772: PUSH
52773: LD_INT 0
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: PUSH
52780: LD_INT 1
52782: NEG
52783: PUSH
52784: LD_INT 1
52786: NEG
52787: PUSH
52788: EMPTY
52789: LIST
52790: LIST
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: LIST
52796: LIST
52797: LIST
52798: LIST
52799: LIST
52800: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52801: LD_ADDR_VAR 0 60
52805: PUSH
52806: LD_INT 0
52808: PUSH
52809: LD_INT 0
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 0
52818: PUSH
52819: LD_INT 1
52821: NEG
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: LD_INT 1
52829: PUSH
52830: LD_INT 0
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: PUSH
52837: LD_INT 1
52839: PUSH
52840: LD_INT 1
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: LD_INT 0
52849: PUSH
52850: LD_INT 1
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: LD_INT 1
52859: NEG
52860: PUSH
52861: LD_INT 0
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PUSH
52868: LD_INT 1
52870: NEG
52871: PUSH
52872: LD_INT 1
52874: NEG
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: LIST
52884: LIST
52885: LIST
52886: LIST
52887: LIST
52888: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52889: LD_ADDR_VAR 0 61
52893: PUSH
52894: LD_INT 0
52896: PUSH
52897: LD_INT 0
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: PUSH
52904: LD_INT 0
52906: PUSH
52907: LD_INT 1
52909: NEG
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: PUSH
52915: LD_INT 1
52917: PUSH
52918: LD_INT 0
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: PUSH
52925: LD_INT 1
52927: PUSH
52928: LD_INT 1
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: PUSH
52935: LD_INT 0
52937: PUSH
52938: LD_INT 1
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PUSH
52945: LD_INT 1
52947: NEG
52948: PUSH
52949: LD_INT 0
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: PUSH
52956: LD_INT 1
52958: NEG
52959: PUSH
52960: LD_INT 1
52962: NEG
52963: PUSH
52964: EMPTY
52965: LIST
52966: LIST
52967: PUSH
52968: EMPTY
52969: LIST
52970: LIST
52971: LIST
52972: LIST
52973: LIST
52974: LIST
52975: LIST
52976: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52977: LD_ADDR_VAR 0 62
52981: PUSH
52982: LD_INT 0
52984: PUSH
52985: LD_INT 0
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: LD_INT 0
52994: PUSH
52995: LD_INT 1
52997: NEG
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: LD_INT 1
53005: PUSH
53006: LD_INT 0
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: LD_INT 1
53015: PUSH
53016: LD_INT 1
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: PUSH
53023: LD_INT 0
53025: PUSH
53026: LD_INT 1
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: PUSH
53033: LD_INT 1
53035: NEG
53036: PUSH
53037: LD_INT 0
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: PUSH
53044: LD_INT 1
53046: NEG
53047: PUSH
53048: LD_INT 1
53050: NEG
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: LIST
53060: LIST
53061: LIST
53062: LIST
53063: LIST
53064: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53065: LD_ADDR_VAR 0 63
53069: PUSH
53070: LD_INT 0
53072: PUSH
53073: LD_INT 0
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: PUSH
53080: LD_INT 0
53082: PUSH
53083: LD_INT 1
53085: NEG
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: LD_INT 1
53093: PUSH
53094: LD_INT 0
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: PUSH
53101: LD_INT 1
53103: PUSH
53104: LD_INT 1
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: PUSH
53111: LD_INT 0
53113: PUSH
53114: LD_INT 1
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 1
53123: NEG
53124: PUSH
53125: LD_INT 0
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 1
53134: NEG
53135: PUSH
53136: LD_INT 1
53138: NEG
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: LIST
53148: LIST
53149: LIST
53150: LIST
53151: LIST
53152: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53153: LD_ADDR_VAR 0 64
53157: PUSH
53158: LD_INT 0
53160: PUSH
53161: LD_INT 0
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: LD_INT 0
53170: PUSH
53171: LD_INT 1
53173: NEG
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 1
53181: PUSH
53182: LD_INT 0
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: LD_INT 1
53191: PUSH
53192: LD_INT 1
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: LD_INT 0
53201: PUSH
53202: LD_INT 1
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PUSH
53209: LD_INT 1
53211: NEG
53212: PUSH
53213: LD_INT 0
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: PUSH
53220: LD_INT 1
53222: NEG
53223: PUSH
53224: LD_INT 1
53226: NEG
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: PUSH
53232: EMPTY
53233: LIST
53234: LIST
53235: LIST
53236: LIST
53237: LIST
53238: LIST
53239: LIST
53240: ST_TO_ADDR
// end ; 1 :
53241: GO 59138
53243: LD_INT 1
53245: DOUBLE
53246: EQUAL
53247: IFTRUE 53251
53249: GO 55874
53251: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53252: LD_ADDR_VAR 0 11
53256: PUSH
53257: LD_INT 1
53259: NEG
53260: PUSH
53261: LD_INT 3
53263: NEG
53264: PUSH
53265: EMPTY
53266: LIST
53267: LIST
53268: PUSH
53269: LD_INT 0
53271: PUSH
53272: LD_INT 3
53274: NEG
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: PUSH
53280: LD_INT 1
53282: PUSH
53283: LD_INT 2
53285: NEG
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: EMPTY
53292: LIST
53293: LIST
53294: LIST
53295: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53296: LD_ADDR_VAR 0 12
53300: PUSH
53301: LD_INT 2
53303: PUSH
53304: LD_INT 1
53306: NEG
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: PUSH
53312: LD_INT 3
53314: PUSH
53315: LD_INT 0
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: LD_INT 3
53324: PUSH
53325: LD_INT 1
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: LIST
53336: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53337: LD_ADDR_VAR 0 13
53341: PUSH
53342: LD_INT 3
53344: PUSH
53345: LD_INT 2
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: PUSH
53352: LD_INT 3
53354: PUSH
53355: LD_INT 3
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: PUSH
53362: LD_INT 2
53364: PUSH
53365: LD_INT 3
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: LIST
53376: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53377: LD_ADDR_VAR 0 14
53381: PUSH
53382: LD_INT 1
53384: PUSH
53385: LD_INT 3
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: LD_INT 0
53394: PUSH
53395: LD_INT 3
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 1
53404: NEG
53405: PUSH
53406: LD_INT 2
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: LIST
53417: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53418: LD_ADDR_VAR 0 15
53422: PUSH
53423: LD_INT 2
53425: NEG
53426: PUSH
53427: LD_INT 1
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: PUSH
53434: LD_INT 3
53436: NEG
53437: PUSH
53438: LD_INT 0
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: PUSH
53445: LD_INT 3
53447: NEG
53448: PUSH
53449: LD_INT 1
53451: NEG
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: LIST
53461: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53462: LD_ADDR_VAR 0 16
53466: PUSH
53467: LD_INT 2
53469: NEG
53470: PUSH
53471: LD_INT 3
53473: NEG
53474: PUSH
53475: EMPTY
53476: LIST
53477: LIST
53478: PUSH
53479: LD_INT 3
53481: NEG
53482: PUSH
53483: LD_INT 2
53485: NEG
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: LD_INT 3
53493: NEG
53494: PUSH
53495: LD_INT 3
53497: NEG
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: PUSH
53503: EMPTY
53504: LIST
53505: LIST
53506: LIST
53507: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53508: LD_ADDR_VAR 0 17
53512: PUSH
53513: LD_INT 1
53515: NEG
53516: PUSH
53517: LD_INT 3
53519: NEG
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: LD_INT 0
53527: PUSH
53528: LD_INT 3
53530: NEG
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: LD_INT 1
53538: PUSH
53539: LD_INT 2
53541: NEG
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: LIST
53551: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53552: LD_ADDR_VAR 0 18
53556: PUSH
53557: LD_INT 2
53559: PUSH
53560: LD_INT 1
53562: NEG
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: LD_INT 3
53570: PUSH
53571: LD_INT 0
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: LD_INT 3
53580: PUSH
53581: LD_INT 1
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: LIST
53592: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53593: LD_ADDR_VAR 0 19
53597: PUSH
53598: LD_INT 3
53600: PUSH
53601: LD_INT 2
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: PUSH
53608: LD_INT 3
53610: PUSH
53611: LD_INT 3
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: PUSH
53618: LD_INT 2
53620: PUSH
53621: LD_INT 3
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: LIST
53632: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53633: LD_ADDR_VAR 0 20
53637: PUSH
53638: LD_INT 1
53640: PUSH
53641: LD_INT 3
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: PUSH
53648: LD_INT 0
53650: PUSH
53651: LD_INT 3
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: LD_INT 1
53660: NEG
53661: PUSH
53662: LD_INT 2
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: LIST
53673: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53674: LD_ADDR_VAR 0 21
53678: PUSH
53679: LD_INT 2
53681: NEG
53682: PUSH
53683: LD_INT 1
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PUSH
53690: LD_INT 3
53692: NEG
53693: PUSH
53694: LD_INT 0
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: LD_INT 3
53703: NEG
53704: PUSH
53705: LD_INT 1
53707: NEG
53708: PUSH
53709: EMPTY
53710: LIST
53711: LIST
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: LIST
53717: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53718: LD_ADDR_VAR 0 22
53722: PUSH
53723: LD_INT 2
53725: NEG
53726: PUSH
53727: LD_INT 3
53729: NEG
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: PUSH
53735: LD_INT 3
53737: NEG
53738: PUSH
53739: LD_INT 2
53741: NEG
53742: PUSH
53743: EMPTY
53744: LIST
53745: LIST
53746: PUSH
53747: LD_INT 3
53749: NEG
53750: PUSH
53751: LD_INT 3
53753: NEG
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: EMPTY
53760: LIST
53761: LIST
53762: LIST
53763: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
53764: LD_ADDR_VAR 0 23
53768: PUSH
53769: LD_INT 0
53771: PUSH
53772: LD_INT 3
53774: NEG
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: LD_INT 1
53782: NEG
53783: PUSH
53784: LD_INT 4
53786: NEG
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: PUSH
53792: LD_INT 1
53794: PUSH
53795: LD_INT 3
53797: NEG
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: LIST
53807: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
53808: LD_ADDR_VAR 0 24
53812: PUSH
53813: LD_INT 3
53815: PUSH
53816: LD_INT 0
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: LD_INT 3
53825: PUSH
53826: LD_INT 1
53828: NEG
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: PUSH
53834: LD_INT 4
53836: PUSH
53837: LD_INT 1
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: LIST
53848: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
53849: LD_ADDR_VAR 0 25
53853: PUSH
53854: LD_INT 3
53856: PUSH
53857: LD_INT 3
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: PUSH
53864: LD_INT 4
53866: PUSH
53867: LD_INT 3
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 3
53876: PUSH
53877: LD_INT 4
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: LIST
53888: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
53889: LD_ADDR_VAR 0 26
53893: PUSH
53894: LD_INT 0
53896: PUSH
53897: LD_INT 3
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: LD_INT 1
53906: PUSH
53907: LD_INT 4
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: LD_INT 1
53916: NEG
53917: PUSH
53918: LD_INT 3
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: LIST
53929: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
53930: LD_ADDR_VAR 0 27
53934: PUSH
53935: LD_INT 3
53937: NEG
53938: PUSH
53939: LD_INT 0
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: LD_INT 3
53948: NEG
53949: PUSH
53950: LD_INT 1
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: PUSH
53957: LD_INT 4
53959: NEG
53960: PUSH
53961: LD_INT 1
53963: NEG
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: LIST
53973: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
53974: LD_ADDR_VAR 0 28
53978: PUSH
53979: LD_INT 3
53981: NEG
53982: PUSH
53983: LD_INT 3
53985: NEG
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: LD_INT 3
53993: NEG
53994: PUSH
53995: LD_INT 4
53997: NEG
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: LD_INT 4
54005: NEG
54006: PUSH
54007: LD_INT 3
54009: NEG
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: LIST
54019: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
54020: LD_ADDR_VAR 0 29
54024: PUSH
54025: LD_INT 1
54027: NEG
54028: PUSH
54029: LD_INT 3
54031: NEG
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: LD_INT 0
54039: PUSH
54040: LD_INT 3
54042: NEG
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: LD_INT 1
54050: PUSH
54051: LD_INT 2
54053: NEG
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 1
54061: NEG
54062: PUSH
54063: LD_INT 4
54065: NEG
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: LD_INT 0
54073: PUSH
54074: LD_INT 4
54076: NEG
54077: PUSH
54078: EMPTY
54079: LIST
54080: LIST
54081: PUSH
54082: LD_INT 1
54084: PUSH
54085: LD_INT 3
54087: NEG
54088: PUSH
54089: EMPTY
54090: LIST
54091: LIST
54092: PUSH
54093: LD_INT 1
54095: NEG
54096: PUSH
54097: LD_INT 5
54099: NEG
54100: PUSH
54101: EMPTY
54102: LIST
54103: LIST
54104: PUSH
54105: LD_INT 0
54107: PUSH
54108: LD_INT 5
54110: NEG
54111: PUSH
54112: EMPTY
54113: LIST
54114: LIST
54115: PUSH
54116: LD_INT 1
54118: PUSH
54119: LD_INT 4
54121: NEG
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: PUSH
54127: LD_INT 1
54129: NEG
54130: PUSH
54131: LD_INT 6
54133: NEG
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: PUSH
54139: LD_INT 0
54141: PUSH
54142: LD_INT 6
54144: NEG
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_INT 1
54152: PUSH
54153: LD_INT 5
54155: NEG
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: LIST
54165: LIST
54166: LIST
54167: LIST
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: LIST
54173: LIST
54174: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
54175: LD_ADDR_VAR 0 30
54179: PUSH
54180: LD_INT 2
54182: PUSH
54183: LD_INT 1
54185: NEG
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 3
54193: PUSH
54194: LD_INT 0
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 3
54203: PUSH
54204: LD_INT 1
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: LD_INT 3
54213: PUSH
54214: LD_INT 1
54216: NEG
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: LD_INT 4
54224: PUSH
54225: LD_INT 0
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: LD_INT 4
54234: PUSH
54235: LD_INT 1
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PUSH
54242: LD_INT 4
54244: PUSH
54245: LD_INT 1
54247: NEG
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_INT 5
54255: PUSH
54256: LD_INT 0
54258: PUSH
54259: EMPTY
54260: LIST
54261: LIST
54262: PUSH
54263: LD_INT 5
54265: PUSH
54266: LD_INT 1
54268: PUSH
54269: EMPTY
54270: LIST
54271: LIST
54272: PUSH
54273: LD_INT 5
54275: PUSH
54276: LD_INT 1
54278: NEG
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: LD_INT 6
54286: PUSH
54287: LD_INT 0
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: PUSH
54294: LD_INT 6
54296: PUSH
54297: LD_INT 1
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: LIST
54308: LIST
54309: LIST
54310: LIST
54311: LIST
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
54318: LD_ADDR_VAR 0 31
54322: PUSH
54323: LD_INT 3
54325: PUSH
54326: LD_INT 2
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PUSH
54333: LD_INT 3
54335: PUSH
54336: LD_INT 3
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: PUSH
54343: LD_INT 2
54345: PUSH
54346: LD_INT 3
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: PUSH
54353: LD_INT 4
54355: PUSH
54356: LD_INT 3
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: LD_INT 4
54365: PUSH
54366: LD_INT 4
54368: PUSH
54369: EMPTY
54370: LIST
54371: LIST
54372: PUSH
54373: LD_INT 3
54375: PUSH
54376: LD_INT 4
54378: PUSH
54379: EMPTY
54380: LIST
54381: LIST
54382: PUSH
54383: LD_INT 5
54385: PUSH
54386: LD_INT 4
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: LD_INT 5
54395: PUSH
54396: LD_INT 5
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: LD_INT 4
54405: PUSH
54406: LD_INT 5
54408: PUSH
54409: EMPTY
54410: LIST
54411: LIST
54412: PUSH
54413: LD_INT 6
54415: PUSH
54416: LD_INT 5
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: PUSH
54423: LD_INT 6
54425: PUSH
54426: LD_INT 6
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: PUSH
54433: LD_INT 5
54435: PUSH
54436: LD_INT 6
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: LIST
54447: LIST
54448: LIST
54449: LIST
54450: LIST
54451: LIST
54452: LIST
54453: LIST
54454: LIST
54455: LIST
54456: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
54457: LD_ADDR_VAR 0 32
54461: PUSH
54462: LD_INT 1
54464: PUSH
54465: LD_INT 3
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 0
54474: PUSH
54475: LD_INT 3
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: LD_INT 1
54484: NEG
54485: PUSH
54486: LD_INT 2
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 1
54495: PUSH
54496: LD_INT 4
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: LD_INT 0
54505: PUSH
54506: LD_INT 4
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 1
54515: NEG
54516: PUSH
54517: LD_INT 3
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: PUSH
54524: LD_INT 1
54526: PUSH
54527: LD_INT 5
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: LD_INT 0
54536: PUSH
54537: LD_INT 5
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PUSH
54544: LD_INT 1
54546: NEG
54547: PUSH
54548: LD_INT 4
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: PUSH
54555: LD_INT 1
54557: PUSH
54558: LD_INT 6
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: PUSH
54565: LD_INT 0
54567: PUSH
54568: LD_INT 6
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: PUSH
54575: LD_INT 1
54577: NEG
54578: PUSH
54579: LD_INT 5
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: LIST
54590: LIST
54591: LIST
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: LIST
54599: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
54600: LD_ADDR_VAR 0 33
54604: PUSH
54605: LD_INT 2
54607: NEG
54608: PUSH
54609: LD_INT 1
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: PUSH
54616: LD_INT 3
54618: NEG
54619: PUSH
54620: LD_INT 0
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: PUSH
54627: LD_INT 3
54629: NEG
54630: PUSH
54631: LD_INT 1
54633: NEG
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 3
54641: NEG
54642: PUSH
54643: LD_INT 1
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: LD_INT 4
54652: NEG
54653: PUSH
54654: LD_INT 0
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: LD_INT 4
54663: NEG
54664: PUSH
54665: LD_INT 1
54667: NEG
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: PUSH
54673: LD_INT 4
54675: NEG
54676: PUSH
54677: LD_INT 1
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: PUSH
54684: LD_INT 5
54686: NEG
54687: PUSH
54688: LD_INT 0
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: PUSH
54695: LD_INT 5
54697: NEG
54698: PUSH
54699: LD_INT 1
54701: NEG
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: LD_INT 5
54709: NEG
54710: PUSH
54711: LD_INT 1
54713: PUSH
54714: EMPTY
54715: LIST
54716: LIST
54717: PUSH
54718: LD_INT 6
54720: NEG
54721: PUSH
54722: LD_INT 0
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: PUSH
54729: LD_INT 6
54731: NEG
54732: PUSH
54733: LD_INT 1
54735: NEG
54736: PUSH
54737: EMPTY
54738: LIST
54739: LIST
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: LIST
54745: LIST
54746: LIST
54747: LIST
54748: LIST
54749: LIST
54750: LIST
54751: LIST
54752: LIST
54753: LIST
54754: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
54755: LD_ADDR_VAR 0 34
54759: PUSH
54760: LD_INT 2
54762: NEG
54763: PUSH
54764: LD_INT 3
54766: NEG
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: PUSH
54772: LD_INT 3
54774: NEG
54775: PUSH
54776: LD_INT 2
54778: NEG
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: LD_INT 3
54786: NEG
54787: PUSH
54788: LD_INT 3
54790: NEG
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: LD_INT 3
54798: NEG
54799: PUSH
54800: LD_INT 4
54802: NEG
54803: PUSH
54804: EMPTY
54805: LIST
54806: LIST
54807: PUSH
54808: LD_INT 4
54810: NEG
54811: PUSH
54812: LD_INT 3
54814: NEG
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: PUSH
54820: LD_INT 4
54822: NEG
54823: PUSH
54824: LD_INT 4
54826: NEG
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: PUSH
54832: LD_INT 4
54834: NEG
54835: PUSH
54836: LD_INT 5
54838: NEG
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: PUSH
54844: LD_INT 5
54846: NEG
54847: PUSH
54848: LD_INT 4
54850: NEG
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: LD_INT 5
54858: NEG
54859: PUSH
54860: LD_INT 5
54862: NEG
54863: PUSH
54864: EMPTY
54865: LIST
54866: LIST
54867: PUSH
54868: LD_INT 5
54870: NEG
54871: PUSH
54872: LD_INT 6
54874: NEG
54875: PUSH
54876: EMPTY
54877: LIST
54878: LIST
54879: PUSH
54880: LD_INT 6
54882: NEG
54883: PUSH
54884: LD_INT 5
54886: NEG
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: PUSH
54892: LD_INT 6
54894: NEG
54895: PUSH
54896: LD_INT 6
54898: NEG
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: LIST
54911: LIST
54912: LIST
54913: LIST
54914: LIST
54915: LIST
54916: LIST
54917: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
54918: LD_ADDR_VAR 0 41
54922: PUSH
54923: LD_INT 0
54925: PUSH
54926: LD_INT 2
54928: NEG
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: LD_INT 1
54936: NEG
54937: PUSH
54938: LD_INT 3
54940: NEG
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: PUSH
54946: LD_INT 1
54948: PUSH
54949: LD_INT 2
54951: NEG
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: LIST
54961: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
54962: LD_ADDR_VAR 0 42
54966: PUSH
54967: LD_INT 2
54969: PUSH
54970: LD_INT 0
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: PUSH
54977: LD_INT 2
54979: PUSH
54980: LD_INT 1
54982: NEG
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: LD_INT 3
54990: PUSH
54991: LD_INT 1
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: LIST
55002: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
55003: LD_ADDR_VAR 0 43
55007: PUSH
55008: LD_INT 2
55010: PUSH
55011: LD_INT 2
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: PUSH
55018: LD_INT 3
55020: PUSH
55021: LD_INT 2
55023: PUSH
55024: EMPTY
55025: LIST
55026: LIST
55027: PUSH
55028: LD_INT 2
55030: PUSH
55031: LD_INT 3
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: LIST
55042: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
55043: LD_ADDR_VAR 0 44
55047: PUSH
55048: LD_INT 0
55050: PUSH
55051: LD_INT 2
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 1
55060: PUSH
55061: LD_INT 3
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: PUSH
55068: LD_INT 1
55070: NEG
55071: PUSH
55072: LD_INT 2
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: LIST
55083: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55084: LD_ADDR_VAR 0 45
55088: PUSH
55089: LD_INT 2
55091: NEG
55092: PUSH
55093: LD_INT 0
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 2
55102: NEG
55103: PUSH
55104: LD_INT 1
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: PUSH
55111: LD_INT 3
55113: NEG
55114: PUSH
55115: LD_INT 1
55117: NEG
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: LIST
55127: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
55128: LD_ADDR_VAR 0 46
55132: PUSH
55133: LD_INT 2
55135: NEG
55136: PUSH
55137: LD_INT 2
55139: NEG
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: PUSH
55145: LD_INT 2
55147: NEG
55148: PUSH
55149: LD_INT 3
55151: NEG
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: PUSH
55157: LD_INT 3
55159: NEG
55160: PUSH
55161: LD_INT 2
55163: NEG
55164: PUSH
55165: EMPTY
55166: LIST
55167: LIST
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: LIST
55173: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
55174: LD_ADDR_VAR 0 47
55178: PUSH
55179: LD_INT 2
55181: NEG
55182: PUSH
55183: LD_INT 3
55185: NEG
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: PUSH
55191: LD_INT 1
55193: NEG
55194: PUSH
55195: LD_INT 3
55197: NEG
55198: PUSH
55199: EMPTY
55200: LIST
55201: LIST
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55207: LD_ADDR_VAR 0 48
55211: PUSH
55212: LD_INT 1
55214: PUSH
55215: LD_INT 2
55217: NEG
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: PUSH
55223: LD_INT 2
55225: PUSH
55226: LD_INT 1
55228: NEG
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
55238: LD_ADDR_VAR 0 49
55242: PUSH
55243: LD_INT 3
55245: PUSH
55246: LD_INT 1
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: PUSH
55253: LD_INT 3
55255: PUSH
55256: LD_INT 2
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
55267: LD_ADDR_VAR 0 50
55271: PUSH
55272: LD_INT 2
55274: PUSH
55275: LD_INT 3
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: LD_INT 1
55284: PUSH
55285: LD_INT 3
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55296: LD_ADDR_VAR 0 51
55300: PUSH
55301: LD_INT 1
55303: NEG
55304: PUSH
55305: LD_INT 2
55307: PUSH
55308: EMPTY
55309: LIST
55310: LIST
55311: PUSH
55312: LD_INT 2
55314: NEG
55315: PUSH
55316: LD_INT 1
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55327: LD_ADDR_VAR 0 52
55331: PUSH
55332: LD_INT 3
55334: NEG
55335: PUSH
55336: LD_INT 1
55338: NEG
55339: PUSH
55340: EMPTY
55341: LIST
55342: LIST
55343: PUSH
55344: LD_INT 3
55346: NEG
55347: PUSH
55348: LD_INT 2
55350: NEG
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55360: LD_ADDR_VAR 0 53
55364: PUSH
55365: LD_INT 1
55367: NEG
55368: PUSH
55369: LD_INT 3
55371: NEG
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: LD_INT 0
55379: PUSH
55380: LD_INT 3
55382: NEG
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: LD_INT 1
55390: PUSH
55391: LD_INT 2
55393: NEG
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: LIST
55403: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55404: LD_ADDR_VAR 0 54
55408: PUSH
55409: LD_INT 2
55411: PUSH
55412: LD_INT 1
55414: NEG
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: PUSH
55420: LD_INT 3
55422: PUSH
55423: LD_INT 0
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: PUSH
55430: LD_INT 3
55432: PUSH
55433: LD_INT 1
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: LIST
55444: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55445: LD_ADDR_VAR 0 55
55449: PUSH
55450: LD_INT 3
55452: PUSH
55453: LD_INT 2
55455: PUSH
55456: EMPTY
55457: LIST
55458: LIST
55459: PUSH
55460: LD_INT 3
55462: PUSH
55463: LD_INT 3
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: PUSH
55470: LD_INT 2
55472: PUSH
55473: LD_INT 3
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: LIST
55484: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55485: LD_ADDR_VAR 0 56
55489: PUSH
55490: LD_INT 1
55492: PUSH
55493: LD_INT 3
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 0
55502: PUSH
55503: LD_INT 3
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: PUSH
55510: LD_INT 1
55512: NEG
55513: PUSH
55514: LD_INT 2
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: LIST
55525: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55526: LD_ADDR_VAR 0 57
55530: PUSH
55531: LD_INT 2
55533: NEG
55534: PUSH
55535: LD_INT 1
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: PUSH
55542: LD_INT 3
55544: NEG
55545: PUSH
55546: LD_INT 0
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: LD_INT 3
55555: NEG
55556: PUSH
55557: LD_INT 1
55559: NEG
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: LIST
55569: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55570: LD_ADDR_VAR 0 58
55574: PUSH
55575: LD_INT 2
55577: NEG
55578: PUSH
55579: LD_INT 3
55581: NEG
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: LD_INT 3
55589: NEG
55590: PUSH
55591: LD_INT 2
55593: NEG
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: LD_INT 3
55601: NEG
55602: PUSH
55603: LD_INT 3
55605: NEG
55606: PUSH
55607: EMPTY
55608: LIST
55609: LIST
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: LIST
55615: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
55616: LD_ADDR_VAR 0 59
55620: PUSH
55621: LD_INT 1
55623: NEG
55624: PUSH
55625: LD_INT 2
55627: NEG
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: LD_INT 0
55635: PUSH
55636: LD_INT 2
55638: NEG
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 1
55646: PUSH
55647: LD_INT 1
55649: NEG
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: LIST
55659: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55660: LD_ADDR_VAR 0 60
55664: PUSH
55665: LD_INT 1
55667: PUSH
55668: LD_INT 1
55670: NEG
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PUSH
55676: LD_INT 2
55678: PUSH
55679: LD_INT 0
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_INT 2
55688: PUSH
55689: LD_INT 1
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: LIST
55700: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55701: LD_ADDR_VAR 0 61
55705: PUSH
55706: LD_INT 2
55708: PUSH
55709: LD_INT 1
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: LD_INT 2
55718: PUSH
55719: LD_INT 2
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 1
55728: PUSH
55729: LD_INT 2
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: EMPTY
55737: LIST
55738: LIST
55739: LIST
55740: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55741: LD_ADDR_VAR 0 62
55745: PUSH
55746: LD_INT 1
55748: PUSH
55749: LD_INT 2
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: PUSH
55756: LD_INT 0
55758: PUSH
55759: LD_INT 2
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: LD_INT 1
55768: NEG
55769: PUSH
55770: LD_INT 1
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: LIST
55781: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55782: LD_ADDR_VAR 0 63
55786: PUSH
55787: LD_INT 1
55789: NEG
55790: PUSH
55791: LD_INT 1
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 2
55800: NEG
55801: PUSH
55802: LD_INT 0
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: LD_INT 2
55811: NEG
55812: PUSH
55813: LD_INT 1
55815: NEG
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: LIST
55825: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55826: LD_ADDR_VAR 0 64
55830: PUSH
55831: LD_INT 1
55833: NEG
55834: PUSH
55835: LD_INT 2
55837: NEG
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: PUSH
55843: LD_INT 2
55845: NEG
55846: PUSH
55847: LD_INT 1
55849: NEG
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: LD_INT 2
55857: NEG
55858: PUSH
55859: LD_INT 2
55861: NEG
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: LIST
55871: ST_TO_ADDR
// end ; 2 :
55872: GO 59138
55874: LD_INT 2
55876: DOUBLE
55877: EQUAL
55878: IFTRUE 55882
55880: GO 59137
55882: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
55883: LD_ADDR_VAR 0 29
55887: PUSH
55888: LD_INT 4
55890: PUSH
55891: LD_INT 0
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: PUSH
55898: LD_INT 4
55900: PUSH
55901: LD_INT 1
55903: NEG
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: PUSH
55909: LD_INT 5
55911: PUSH
55912: LD_INT 0
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PUSH
55919: LD_INT 5
55921: PUSH
55922: LD_INT 1
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 4
55931: PUSH
55932: LD_INT 1
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: LD_INT 3
55941: PUSH
55942: LD_INT 0
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: PUSH
55949: LD_INT 3
55951: PUSH
55952: LD_INT 1
55954: NEG
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: LD_INT 3
55962: PUSH
55963: LD_INT 2
55965: NEG
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: LD_INT 5
55973: PUSH
55974: LD_INT 2
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 3
55983: PUSH
55984: LD_INT 3
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: PUSH
55991: LD_INT 3
55993: PUSH
55994: LD_INT 2
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: LD_INT 4
56003: PUSH
56004: LD_INT 3
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: LD_INT 4
56013: PUSH
56014: LD_INT 4
56016: PUSH
56017: EMPTY
56018: LIST
56019: LIST
56020: PUSH
56021: LD_INT 3
56023: PUSH
56024: LD_INT 4
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: PUSH
56031: LD_INT 2
56033: PUSH
56034: LD_INT 3
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 2
56043: PUSH
56044: LD_INT 2
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: LD_INT 4
56053: PUSH
56054: LD_INT 2
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: PUSH
56061: LD_INT 2
56063: PUSH
56064: LD_INT 4
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: PUSH
56071: LD_INT 0
56073: PUSH
56074: LD_INT 4
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: LD_INT 0
56083: PUSH
56084: LD_INT 3
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: PUSH
56091: LD_INT 1
56093: PUSH
56094: LD_INT 4
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 1
56103: PUSH
56104: LD_INT 5
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 0
56113: PUSH
56114: LD_INT 5
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: PUSH
56121: LD_INT 1
56123: NEG
56124: PUSH
56125: LD_INT 4
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: PUSH
56132: LD_INT 1
56134: NEG
56135: PUSH
56136: LD_INT 3
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 2
56145: PUSH
56146: LD_INT 5
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: LD_INT 2
56155: NEG
56156: PUSH
56157: LD_INT 3
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PUSH
56164: LD_INT 3
56166: NEG
56167: PUSH
56168: LD_INT 0
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: PUSH
56175: LD_INT 3
56177: NEG
56178: PUSH
56179: LD_INT 1
56181: NEG
56182: PUSH
56183: EMPTY
56184: LIST
56185: LIST
56186: PUSH
56187: LD_INT 2
56189: NEG
56190: PUSH
56191: LD_INT 0
56193: PUSH
56194: EMPTY
56195: LIST
56196: LIST
56197: PUSH
56198: LD_INT 2
56200: NEG
56201: PUSH
56202: LD_INT 1
56204: PUSH
56205: EMPTY
56206: LIST
56207: LIST
56208: PUSH
56209: LD_INT 3
56211: NEG
56212: PUSH
56213: LD_INT 1
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: LD_INT 4
56222: NEG
56223: PUSH
56224: LD_INT 0
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: LD_INT 4
56233: NEG
56234: PUSH
56235: LD_INT 1
56237: NEG
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 4
56245: NEG
56246: PUSH
56247: LD_INT 2
56249: NEG
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PUSH
56255: LD_INT 2
56257: NEG
56258: PUSH
56259: LD_INT 2
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: LD_INT 4
56268: NEG
56269: PUSH
56270: LD_INT 4
56272: NEG
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: LD_INT 4
56280: NEG
56281: PUSH
56282: LD_INT 5
56284: NEG
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: PUSH
56290: LD_INT 3
56292: NEG
56293: PUSH
56294: LD_INT 4
56296: NEG
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: LD_INT 3
56304: NEG
56305: PUSH
56306: LD_INT 3
56308: NEG
56309: PUSH
56310: EMPTY
56311: LIST
56312: LIST
56313: PUSH
56314: LD_INT 4
56316: NEG
56317: PUSH
56318: LD_INT 3
56320: NEG
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: PUSH
56326: LD_INT 5
56328: NEG
56329: PUSH
56330: LD_INT 4
56332: NEG
56333: PUSH
56334: EMPTY
56335: LIST
56336: LIST
56337: PUSH
56338: LD_INT 5
56340: NEG
56341: PUSH
56342: LD_INT 5
56344: NEG
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 3
56352: NEG
56353: PUSH
56354: LD_INT 5
56356: NEG
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 5
56364: NEG
56365: PUSH
56366: LD_INT 3
56368: NEG
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: LIST
56378: LIST
56379: LIST
56380: LIST
56381: LIST
56382: LIST
56383: LIST
56384: LIST
56385: LIST
56386: LIST
56387: LIST
56388: LIST
56389: LIST
56390: LIST
56391: LIST
56392: LIST
56393: LIST
56394: LIST
56395: LIST
56396: LIST
56397: LIST
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: LIST
56404: LIST
56405: LIST
56406: LIST
56407: LIST
56408: LIST
56409: LIST
56410: LIST
56411: LIST
56412: LIST
56413: LIST
56414: LIST
56415: LIST
56416: LIST
56417: LIST
56418: LIST
56419: LIST
56420: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
56421: LD_ADDR_VAR 0 30
56425: PUSH
56426: LD_INT 4
56428: PUSH
56429: LD_INT 4
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: PUSH
56436: LD_INT 4
56438: PUSH
56439: LD_INT 3
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: PUSH
56446: LD_INT 5
56448: PUSH
56449: LD_INT 4
56451: PUSH
56452: EMPTY
56453: LIST
56454: LIST
56455: PUSH
56456: LD_INT 5
56458: PUSH
56459: LD_INT 5
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: LD_INT 4
56468: PUSH
56469: LD_INT 5
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: LD_INT 3
56478: PUSH
56479: LD_INT 4
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PUSH
56486: LD_INT 3
56488: PUSH
56489: LD_INT 3
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: LD_INT 5
56498: PUSH
56499: LD_INT 3
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 3
56508: PUSH
56509: LD_INT 5
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: PUSH
56516: LD_INT 0
56518: PUSH
56519: LD_INT 3
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PUSH
56526: LD_INT 0
56528: PUSH
56529: LD_INT 2
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: PUSH
56536: LD_INT 1
56538: PUSH
56539: LD_INT 3
56541: PUSH
56542: EMPTY
56543: LIST
56544: LIST
56545: PUSH
56546: LD_INT 1
56548: PUSH
56549: LD_INT 4
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: PUSH
56556: LD_INT 0
56558: PUSH
56559: LD_INT 4
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: LD_INT 1
56568: NEG
56569: PUSH
56570: LD_INT 3
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: LD_INT 1
56579: NEG
56580: PUSH
56581: LD_INT 2
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: PUSH
56588: LD_INT 2
56590: PUSH
56591: LD_INT 4
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: LD_INT 2
56600: NEG
56601: PUSH
56602: LD_INT 2
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 4
56611: NEG
56612: PUSH
56613: LD_INT 0
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: LD_INT 4
56622: NEG
56623: PUSH
56624: LD_INT 1
56626: NEG
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: LD_INT 3
56634: NEG
56635: PUSH
56636: LD_INT 0
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: PUSH
56643: LD_INT 3
56645: NEG
56646: PUSH
56647: LD_INT 1
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: PUSH
56654: LD_INT 4
56656: NEG
56657: PUSH
56658: LD_INT 1
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: LD_INT 5
56667: NEG
56668: PUSH
56669: LD_INT 0
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 5
56678: NEG
56679: PUSH
56680: LD_INT 1
56682: NEG
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 5
56690: NEG
56691: PUSH
56692: LD_INT 2
56694: NEG
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: LD_INT 3
56702: NEG
56703: PUSH
56704: LD_INT 2
56706: PUSH
56707: EMPTY
56708: LIST
56709: LIST
56710: PUSH
56711: LD_INT 3
56713: NEG
56714: PUSH
56715: LD_INT 3
56717: NEG
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: LD_INT 3
56725: NEG
56726: PUSH
56727: LD_INT 4
56729: NEG
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: LD_INT 2
56737: NEG
56738: PUSH
56739: LD_INT 3
56741: NEG
56742: PUSH
56743: EMPTY
56744: LIST
56745: LIST
56746: PUSH
56747: LD_INT 2
56749: NEG
56750: PUSH
56751: LD_INT 2
56753: NEG
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: LD_INT 3
56761: NEG
56762: PUSH
56763: LD_INT 2
56765: NEG
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: PUSH
56771: LD_INT 4
56773: NEG
56774: PUSH
56775: LD_INT 3
56777: NEG
56778: PUSH
56779: EMPTY
56780: LIST
56781: LIST
56782: PUSH
56783: LD_INT 4
56785: NEG
56786: PUSH
56787: LD_INT 4
56789: NEG
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: PUSH
56795: LD_INT 2
56797: NEG
56798: PUSH
56799: LD_INT 4
56801: NEG
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: PUSH
56807: LD_INT 4
56809: NEG
56810: PUSH
56811: LD_INT 2
56813: NEG
56814: PUSH
56815: EMPTY
56816: LIST
56817: LIST
56818: PUSH
56819: LD_INT 0
56821: PUSH
56822: LD_INT 4
56824: NEG
56825: PUSH
56826: EMPTY
56827: LIST
56828: LIST
56829: PUSH
56830: LD_INT 0
56832: PUSH
56833: LD_INT 5
56835: NEG
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: PUSH
56841: LD_INT 1
56843: PUSH
56844: LD_INT 4
56846: NEG
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: PUSH
56852: LD_INT 1
56854: PUSH
56855: LD_INT 3
56857: NEG
56858: PUSH
56859: EMPTY
56860: LIST
56861: LIST
56862: PUSH
56863: LD_INT 0
56865: PUSH
56866: LD_INT 3
56868: NEG
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: PUSH
56874: LD_INT 1
56876: NEG
56877: PUSH
56878: LD_INT 4
56880: NEG
56881: PUSH
56882: EMPTY
56883: LIST
56884: LIST
56885: PUSH
56886: LD_INT 1
56888: NEG
56889: PUSH
56890: LD_INT 5
56892: NEG
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: PUSH
56898: LD_INT 2
56900: PUSH
56901: LD_INT 3
56903: NEG
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: PUSH
56909: LD_INT 2
56911: NEG
56912: PUSH
56913: LD_INT 5
56915: NEG
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: PUSH
56921: EMPTY
56922: LIST
56923: LIST
56924: LIST
56925: LIST
56926: LIST
56927: LIST
56928: LIST
56929: LIST
56930: LIST
56931: LIST
56932: LIST
56933: LIST
56934: LIST
56935: LIST
56936: LIST
56937: LIST
56938: LIST
56939: LIST
56940: LIST
56941: LIST
56942: LIST
56943: LIST
56944: LIST
56945: LIST
56946: LIST
56947: LIST
56948: LIST
56949: LIST
56950: LIST
56951: LIST
56952: LIST
56953: LIST
56954: LIST
56955: LIST
56956: LIST
56957: LIST
56958: LIST
56959: LIST
56960: LIST
56961: LIST
56962: LIST
56963: LIST
56964: LIST
56965: LIST
56966: LIST
56967: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
56968: LD_ADDR_VAR 0 31
56972: PUSH
56973: LD_INT 0
56975: PUSH
56976: LD_INT 4
56978: PUSH
56979: EMPTY
56980: LIST
56981: LIST
56982: PUSH
56983: LD_INT 0
56985: PUSH
56986: LD_INT 3
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: PUSH
56993: LD_INT 1
56995: PUSH
56996: LD_INT 4
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: PUSH
57003: LD_INT 1
57005: PUSH
57006: LD_INT 5
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: PUSH
57013: LD_INT 0
57015: PUSH
57016: LD_INT 5
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: PUSH
57023: LD_INT 1
57025: NEG
57026: PUSH
57027: LD_INT 4
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: LD_INT 1
57036: NEG
57037: PUSH
57038: LD_INT 3
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: PUSH
57045: LD_INT 2
57047: PUSH
57048: LD_INT 5
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: PUSH
57055: LD_INT 2
57057: NEG
57058: PUSH
57059: LD_INT 3
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: PUSH
57066: LD_INT 3
57068: NEG
57069: PUSH
57070: LD_INT 0
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: PUSH
57077: LD_INT 3
57079: NEG
57080: PUSH
57081: LD_INT 1
57083: NEG
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: PUSH
57089: LD_INT 2
57091: NEG
57092: PUSH
57093: LD_INT 0
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: PUSH
57100: LD_INT 2
57102: NEG
57103: PUSH
57104: LD_INT 1
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: PUSH
57111: LD_INT 3
57113: NEG
57114: PUSH
57115: LD_INT 1
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 4
57124: NEG
57125: PUSH
57126: LD_INT 0
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: PUSH
57133: LD_INT 4
57135: NEG
57136: PUSH
57137: LD_INT 1
57139: NEG
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: PUSH
57145: LD_INT 4
57147: NEG
57148: PUSH
57149: LD_INT 2
57151: NEG
57152: PUSH
57153: EMPTY
57154: LIST
57155: LIST
57156: PUSH
57157: LD_INT 2
57159: NEG
57160: PUSH
57161: LD_INT 2
57163: PUSH
57164: EMPTY
57165: LIST
57166: LIST
57167: PUSH
57168: LD_INT 4
57170: NEG
57171: PUSH
57172: LD_INT 4
57174: NEG
57175: PUSH
57176: EMPTY
57177: LIST
57178: LIST
57179: PUSH
57180: LD_INT 4
57182: NEG
57183: PUSH
57184: LD_INT 5
57186: NEG
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PUSH
57192: LD_INT 3
57194: NEG
57195: PUSH
57196: LD_INT 4
57198: NEG
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: PUSH
57204: LD_INT 3
57206: NEG
57207: PUSH
57208: LD_INT 3
57210: NEG
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: PUSH
57216: LD_INT 4
57218: NEG
57219: PUSH
57220: LD_INT 3
57222: NEG
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: LD_INT 5
57230: NEG
57231: PUSH
57232: LD_INT 4
57234: NEG
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: PUSH
57240: LD_INT 5
57242: NEG
57243: PUSH
57244: LD_INT 5
57246: NEG
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: PUSH
57252: LD_INT 3
57254: NEG
57255: PUSH
57256: LD_INT 5
57258: NEG
57259: PUSH
57260: EMPTY
57261: LIST
57262: LIST
57263: PUSH
57264: LD_INT 5
57266: NEG
57267: PUSH
57268: LD_INT 3
57270: NEG
57271: PUSH
57272: EMPTY
57273: LIST
57274: LIST
57275: PUSH
57276: LD_INT 0
57278: PUSH
57279: LD_INT 3
57281: NEG
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: PUSH
57287: LD_INT 0
57289: PUSH
57290: LD_INT 4
57292: NEG
57293: PUSH
57294: EMPTY
57295: LIST
57296: LIST
57297: PUSH
57298: LD_INT 1
57300: PUSH
57301: LD_INT 3
57303: NEG
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: PUSH
57309: LD_INT 1
57311: PUSH
57312: LD_INT 2
57314: NEG
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: PUSH
57320: LD_INT 0
57322: PUSH
57323: LD_INT 2
57325: NEG
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: PUSH
57331: LD_INT 1
57333: NEG
57334: PUSH
57335: LD_INT 3
57337: NEG
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: PUSH
57343: LD_INT 1
57345: NEG
57346: PUSH
57347: LD_INT 4
57349: NEG
57350: PUSH
57351: EMPTY
57352: LIST
57353: LIST
57354: PUSH
57355: LD_INT 2
57357: PUSH
57358: LD_INT 2
57360: NEG
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: PUSH
57366: LD_INT 2
57368: NEG
57369: PUSH
57370: LD_INT 4
57372: NEG
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: LD_INT 4
57380: PUSH
57381: LD_INT 0
57383: PUSH
57384: EMPTY
57385: LIST
57386: LIST
57387: PUSH
57388: LD_INT 4
57390: PUSH
57391: LD_INT 1
57393: NEG
57394: PUSH
57395: EMPTY
57396: LIST
57397: LIST
57398: PUSH
57399: LD_INT 5
57401: PUSH
57402: LD_INT 0
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: PUSH
57409: LD_INT 5
57411: PUSH
57412: LD_INT 1
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: PUSH
57419: LD_INT 4
57421: PUSH
57422: LD_INT 1
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: LD_INT 3
57431: PUSH
57432: LD_INT 0
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: LD_INT 3
57441: PUSH
57442: LD_INT 1
57444: NEG
57445: PUSH
57446: EMPTY
57447: LIST
57448: LIST
57449: PUSH
57450: LD_INT 3
57452: PUSH
57453: LD_INT 2
57455: NEG
57456: PUSH
57457: EMPTY
57458: LIST
57459: LIST
57460: PUSH
57461: LD_INT 5
57463: PUSH
57464: LD_INT 2
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: LIST
57475: LIST
57476: LIST
57477: LIST
57478: LIST
57479: LIST
57480: LIST
57481: LIST
57482: LIST
57483: LIST
57484: LIST
57485: LIST
57486: LIST
57487: LIST
57488: LIST
57489: LIST
57490: LIST
57491: LIST
57492: LIST
57493: LIST
57494: LIST
57495: LIST
57496: LIST
57497: LIST
57498: LIST
57499: LIST
57500: LIST
57501: LIST
57502: LIST
57503: LIST
57504: LIST
57505: LIST
57506: LIST
57507: LIST
57508: LIST
57509: LIST
57510: LIST
57511: LIST
57512: LIST
57513: LIST
57514: LIST
57515: LIST
57516: LIST
57517: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
57518: LD_ADDR_VAR 0 32
57522: PUSH
57523: LD_INT 4
57525: NEG
57526: PUSH
57527: LD_INT 0
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: PUSH
57534: LD_INT 4
57536: NEG
57537: PUSH
57538: LD_INT 1
57540: NEG
57541: PUSH
57542: EMPTY
57543: LIST
57544: LIST
57545: PUSH
57546: LD_INT 3
57548: NEG
57549: PUSH
57550: LD_INT 0
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: PUSH
57557: LD_INT 3
57559: NEG
57560: PUSH
57561: LD_INT 1
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: PUSH
57568: LD_INT 4
57570: NEG
57571: PUSH
57572: LD_INT 1
57574: PUSH
57575: EMPTY
57576: LIST
57577: LIST
57578: PUSH
57579: LD_INT 5
57581: NEG
57582: PUSH
57583: LD_INT 0
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: PUSH
57590: LD_INT 5
57592: NEG
57593: PUSH
57594: LD_INT 1
57596: NEG
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: PUSH
57602: LD_INT 5
57604: NEG
57605: PUSH
57606: LD_INT 2
57608: NEG
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: PUSH
57614: LD_INT 3
57616: NEG
57617: PUSH
57618: LD_INT 2
57620: PUSH
57621: EMPTY
57622: LIST
57623: LIST
57624: PUSH
57625: LD_INT 3
57627: NEG
57628: PUSH
57629: LD_INT 3
57631: NEG
57632: PUSH
57633: EMPTY
57634: LIST
57635: LIST
57636: PUSH
57637: LD_INT 3
57639: NEG
57640: PUSH
57641: LD_INT 4
57643: NEG
57644: PUSH
57645: EMPTY
57646: LIST
57647: LIST
57648: PUSH
57649: LD_INT 2
57651: NEG
57652: PUSH
57653: LD_INT 3
57655: NEG
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: PUSH
57661: LD_INT 2
57663: NEG
57664: PUSH
57665: LD_INT 2
57667: NEG
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: PUSH
57673: LD_INT 3
57675: NEG
57676: PUSH
57677: LD_INT 2
57679: NEG
57680: PUSH
57681: EMPTY
57682: LIST
57683: LIST
57684: PUSH
57685: LD_INT 4
57687: NEG
57688: PUSH
57689: LD_INT 3
57691: NEG
57692: PUSH
57693: EMPTY
57694: LIST
57695: LIST
57696: PUSH
57697: LD_INT 4
57699: NEG
57700: PUSH
57701: LD_INT 4
57703: NEG
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: PUSH
57709: LD_INT 2
57711: NEG
57712: PUSH
57713: LD_INT 4
57715: NEG
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: LD_INT 4
57723: NEG
57724: PUSH
57725: LD_INT 2
57727: NEG
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: PUSH
57733: LD_INT 0
57735: PUSH
57736: LD_INT 4
57738: NEG
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: PUSH
57744: LD_INT 0
57746: PUSH
57747: LD_INT 5
57749: NEG
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: PUSH
57755: LD_INT 1
57757: PUSH
57758: LD_INT 4
57760: NEG
57761: PUSH
57762: EMPTY
57763: LIST
57764: LIST
57765: PUSH
57766: LD_INT 1
57768: PUSH
57769: LD_INT 3
57771: NEG
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: PUSH
57777: LD_INT 0
57779: PUSH
57780: LD_INT 3
57782: NEG
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: PUSH
57788: LD_INT 1
57790: NEG
57791: PUSH
57792: LD_INT 4
57794: NEG
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: PUSH
57800: LD_INT 1
57802: NEG
57803: PUSH
57804: LD_INT 5
57806: NEG
57807: PUSH
57808: EMPTY
57809: LIST
57810: LIST
57811: PUSH
57812: LD_INT 2
57814: PUSH
57815: LD_INT 3
57817: NEG
57818: PUSH
57819: EMPTY
57820: LIST
57821: LIST
57822: PUSH
57823: LD_INT 2
57825: NEG
57826: PUSH
57827: LD_INT 5
57829: NEG
57830: PUSH
57831: EMPTY
57832: LIST
57833: LIST
57834: PUSH
57835: LD_INT 3
57837: PUSH
57838: LD_INT 0
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PUSH
57845: LD_INT 3
57847: PUSH
57848: LD_INT 1
57850: NEG
57851: PUSH
57852: EMPTY
57853: LIST
57854: LIST
57855: PUSH
57856: LD_INT 4
57858: PUSH
57859: LD_INT 0
57861: PUSH
57862: EMPTY
57863: LIST
57864: LIST
57865: PUSH
57866: LD_INT 4
57868: PUSH
57869: LD_INT 1
57871: PUSH
57872: EMPTY
57873: LIST
57874: LIST
57875: PUSH
57876: LD_INT 3
57878: PUSH
57879: LD_INT 1
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: PUSH
57886: LD_INT 2
57888: PUSH
57889: LD_INT 0
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: LD_INT 2
57898: PUSH
57899: LD_INT 1
57901: NEG
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: LD_INT 2
57909: PUSH
57910: LD_INT 2
57912: NEG
57913: PUSH
57914: EMPTY
57915: LIST
57916: LIST
57917: PUSH
57918: LD_INT 4
57920: PUSH
57921: LD_INT 2
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: PUSH
57928: LD_INT 4
57930: PUSH
57931: LD_INT 4
57933: PUSH
57934: EMPTY
57935: LIST
57936: LIST
57937: PUSH
57938: LD_INT 4
57940: PUSH
57941: LD_INT 3
57943: PUSH
57944: EMPTY
57945: LIST
57946: LIST
57947: PUSH
57948: LD_INT 5
57950: PUSH
57951: LD_INT 4
57953: PUSH
57954: EMPTY
57955: LIST
57956: LIST
57957: PUSH
57958: LD_INT 5
57960: PUSH
57961: LD_INT 5
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: PUSH
57968: LD_INT 4
57970: PUSH
57971: LD_INT 5
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: PUSH
57978: LD_INT 3
57980: PUSH
57981: LD_INT 4
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PUSH
57988: LD_INT 3
57990: PUSH
57991: LD_INT 3
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: PUSH
57998: LD_INT 5
58000: PUSH
58001: LD_INT 3
58003: PUSH
58004: EMPTY
58005: LIST
58006: LIST
58007: PUSH
58008: LD_INT 3
58010: PUSH
58011: LD_INT 5
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: PUSH
58018: EMPTY
58019: LIST
58020: LIST
58021: LIST
58022: LIST
58023: LIST
58024: LIST
58025: LIST
58026: LIST
58027: LIST
58028: LIST
58029: LIST
58030: LIST
58031: LIST
58032: LIST
58033: LIST
58034: LIST
58035: LIST
58036: LIST
58037: LIST
58038: LIST
58039: LIST
58040: LIST
58041: LIST
58042: LIST
58043: LIST
58044: LIST
58045: LIST
58046: LIST
58047: LIST
58048: LIST
58049: LIST
58050: LIST
58051: LIST
58052: LIST
58053: LIST
58054: LIST
58055: LIST
58056: LIST
58057: LIST
58058: LIST
58059: LIST
58060: LIST
58061: LIST
58062: LIST
58063: LIST
58064: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
58065: LD_ADDR_VAR 0 33
58069: PUSH
58070: LD_INT 4
58072: NEG
58073: PUSH
58074: LD_INT 4
58076: NEG
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: PUSH
58082: LD_INT 4
58084: NEG
58085: PUSH
58086: LD_INT 5
58088: NEG
58089: PUSH
58090: EMPTY
58091: LIST
58092: LIST
58093: PUSH
58094: LD_INT 3
58096: NEG
58097: PUSH
58098: LD_INT 4
58100: NEG
58101: PUSH
58102: EMPTY
58103: LIST
58104: LIST
58105: PUSH
58106: LD_INT 3
58108: NEG
58109: PUSH
58110: LD_INT 3
58112: NEG
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: PUSH
58118: LD_INT 4
58120: NEG
58121: PUSH
58122: LD_INT 3
58124: NEG
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: PUSH
58130: LD_INT 5
58132: NEG
58133: PUSH
58134: LD_INT 4
58136: NEG
58137: PUSH
58138: EMPTY
58139: LIST
58140: LIST
58141: PUSH
58142: LD_INT 5
58144: NEG
58145: PUSH
58146: LD_INT 5
58148: NEG
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: PUSH
58154: LD_INT 3
58156: NEG
58157: PUSH
58158: LD_INT 5
58160: NEG
58161: PUSH
58162: EMPTY
58163: LIST
58164: LIST
58165: PUSH
58166: LD_INT 5
58168: NEG
58169: PUSH
58170: LD_INT 3
58172: NEG
58173: PUSH
58174: EMPTY
58175: LIST
58176: LIST
58177: PUSH
58178: LD_INT 0
58180: PUSH
58181: LD_INT 3
58183: NEG
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: PUSH
58189: LD_INT 0
58191: PUSH
58192: LD_INT 4
58194: NEG
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: LD_INT 1
58202: PUSH
58203: LD_INT 3
58205: NEG
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: PUSH
58211: LD_INT 1
58213: PUSH
58214: LD_INT 2
58216: NEG
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: PUSH
58222: LD_INT 0
58224: PUSH
58225: LD_INT 2
58227: NEG
58228: PUSH
58229: EMPTY
58230: LIST
58231: LIST
58232: PUSH
58233: LD_INT 1
58235: NEG
58236: PUSH
58237: LD_INT 3
58239: NEG
58240: PUSH
58241: EMPTY
58242: LIST
58243: LIST
58244: PUSH
58245: LD_INT 1
58247: NEG
58248: PUSH
58249: LD_INT 4
58251: NEG
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: PUSH
58257: LD_INT 2
58259: PUSH
58260: LD_INT 2
58262: NEG
58263: PUSH
58264: EMPTY
58265: LIST
58266: LIST
58267: PUSH
58268: LD_INT 2
58270: NEG
58271: PUSH
58272: LD_INT 4
58274: NEG
58275: PUSH
58276: EMPTY
58277: LIST
58278: LIST
58279: PUSH
58280: LD_INT 4
58282: PUSH
58283: LD_INT 0
58285: PUSH
58286: EMPTY
58287: LIST
58288: LIST
58289: PUSH
58290: LD_INT 4
58292: PUSH
58293: LD_INT 1
58295: NEG
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: PUSH
58301: LD_INT 5
58303: PUSH
58304: LD_INT 0
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: PUSH
58311: LD_INT 5
58313: PUSH
58314: LD_INT 1
58316: PUSH
58317: EMPTY
58318: LIST
58319: LIST
58320: PUSH
58321: LD_INT 4
58323: PUSH
58324: LD_INT 1
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: LD_INT 3
58333: PUSH
58334: LD_INT 0
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: LD_INT 3
58343: PUSH
58344: LD_INT 1
58346: NEG
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: PUSH
58352: LD_INT 3
58354: PUSH
58355: LD_INT 2
58357: NEG
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: PUSH
58363: LD_INT 5
58365: PUSH
58366: LD_INT 2
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: PUSH
58373: LD_INT 3
58375: PUSH
58376: LD_INT 3
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: PUSH
58383: LD_INT 3
58385: PUSH
58386: LD_INT 2
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: PUSH
58393: LD_INT 4
58395: PUSH
58396: LD_INT 3
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: PUSH
58403: LD_INT 4
58405: PUSH
58406: LD_INT 4
58408: PUSH
58409: EMPTY
58410: LIST
58411: LIST
58412: PUSH
58413: LD_INT 3
58415: PUSH
58416: LD_INT 4
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: PUSH
58423: LD_INT 2
58425: PUSH
58426: LD_INT 3
58428: PUSH
58429: EMPTY
58430: LIST
58431: LIST
58432: PUSH
58433: LD_INT 2
58435: PUSH
58436: LD_INT 2
58438: PUSH
58439: EMPTY
58440: LIST
58441: LIST
58442: PUSH
58443: LD_INT 4
58445: PUSH
58446: LD_INT 2
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: PUSH
58453: LD_INT 2
58455: PUSH
58456: LD_INT 4
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: LD_INT 0
58465: PUSH
58466: LD_INT 4
58468: PUSH
58469: EMPTY
58470: LIST
58471: LIST
58472: PUSH
58473: LD_INT 0
58475: PUSH
58476: LD_INT 3
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: PUSH
58483: LD_INT 1
58485: PUSH
58486: LD_INT 4
58488: PUSH
58489: EMPTY
58490: LIST
58491: LIST
58492: PUSH
58493: LD_INT 1
58495: PUSH
58496: LD_INT 5
58498: PUSH
58499: EMPTY
58500: LIST
58501: LIST
58502: PUSH
58503: LD_INT 0
58505: PUSH
58506: LD_INT 5
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: LD_INT 1
58515: NEG
58516: PUSH
58517: LD_INT 4
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: PUSH
58524: LD_INT 1
58526: NEG
58527: PUSH
58528: LD_INT 3
58530: PUSH
58531: EMPTY
58532: LIST
58533: LIST
58534: PUSH
58535: LD_INT 2
58537: PUSH
58538: LD_INT 5
58540: PUSH
58541: EMPTY
58542: LIST
58543: LIST
58544: PUSH
58545: LD_INT 2
58547: NEG
58548: PUSH
58549: LD_INT 3
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: LIST
58560: LIST
58561: LIST
58562: LIST
58563: LIST
58564: LIST
58565: LIST
58566: LIST
58567: LIST
58568: LIST
58569: LIST
58570: LIST
58571: LIST
58572: LIST
58573: LIST
58574: LIST
58575: LIST
58576: LIST
58577: LIST
58578: LIST
58579: LIST
58580: LIST
58581: LIST
58582: LIST
58583: LIST
58584: LIST
58585: LIST
58586: LIST
58587: LIST
58588: LIST
58589: LIST
58590: LIST
58591: LIST
58592: LIST
58593: LIST
58594: LIST
58595: LIST
58596: LIST
58597: LIST
58598: LIST
58599: LIST
58600: LIST
58601: LIST
58602: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
58603: LD_ADDR_VAR 0 34
58607: PUSH
58608: LD_INT 0
58610: PUSH
58611: LD_INT 4
58613: NEG
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: PUSH
58619: LD_INT 0
58621: PUSH
58622: LD_INT 5
58624: NEG
58625: PUSH
58626: EMPTY
58627: LIST
58628: LIST
58629: PUSH
58630: LD_INT 1
58632: PUSH
58633: LD_INT 4
58635: NEG
58636: PUSH
58637: EMPTY
58638: LIST
58639: LIST
58640: PUSH
58641: LD_INT 1
58643: PUSH
58644: LD_INT 3
58646: NEG
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: PUSH
58652: LD_INT 0
58654: PUSH
58655: LD_INT 3
58657: NEG
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: PUSH
58663: LD_INT 1
58665: NEG
58666: PUSH
58667: LD_INT 4
58669: NEG
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: PUSH
58675: LD_INT 1
58677: NEG
58678: PUSH
58679: LD_INT 5
58681: NEG
58682: PUSH
58683: EMPTY
58684: LIST
58685: LIST
58686: PUSH
58687: LD_INT 2
58689: PUSH
58690: LD_INT 3
58692: NEG
58693: PUSH
58694: EMPTY
58695: LIST
58696: LIST
58697: PUSH
58698: LD_INT 2
58700: NEG
58701: PUSH
58702: LD_INT 5
58704: NEG
58705: PUSH
58706: EMPTY
58707: LIST
58708: LIST
58709: PUSH
58710: LD_INT 3
58712: PUSH
58713: LD_INT 0
58715: PUSH
58716: EMPTY
58717: LIST
58718: LIST
58719: PUSH
58720: LD_INT 3
58722: PUSH
58723: LD_INT 1
58725: NEG
58726: PUSH
58727: EMPTY
58728: LIST
58729: LIST
58730: PUSH
58731: LD_INT 4
58733: PUSH
58734: LD_INT 0
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: PUSH
58741: LD_INT 4
58743: PUSH
58744: LD_INT 1
58746: PUSH
58747: EMPTY
58748: LIST
58749: LIST
58750: PUSH
58751: LD_INT 3
58753: PUSH
58754: LD_INT 1
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: PUSH
58761: LD_INT 2
58763: PUSH
58764: LD_INT 0
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: PUSH
58771: LD_INT 2
58773: PUSH
58774: LD_INT 1
58776: NEG
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: PUSH
58782: LD_INT 2
58784: PUSH
58785: LD_INT 2
58787: NEG
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: LD_INT 4
58795: PUSH
58796: LD_INT 2
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: PUSH
58803: LD_INT 4
58805: PUSH
58806: LD_INT 4
58808: PUSH
58809: EMPTY
58810: LIST
58811: LIST
58812: PUSH
58813: LD_INT 4
58815: PUSH
58816: LD_INT 3
58818: PUSH
58819: EMPTY
58820: LIST
58821: LIST
58822: PUSH
58823: LD_INT 5
58825: PUSH
58826: LD_INT 4
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: PUSH
58833: LD_INT 5
58835: PUSH
58836: LD_INT 5
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: PUSH
58843: LD_INT 4
58845: PUSH
58846: LD_INT 5
58848: PUSH
58849: EMPTY
58850: LIST
58851: LIST
58852: PUSH
58853: LD_INT 3
58855: PUSH
58856: LD_INT 4
58858: PUSH
58859: EMPTY
58860: LIST
58861: LIST
58862: PUSH
58863: LD_INT 3
58865: PUSH
58866: LD_INT 3
58868: PUSH
58869: EMPTY
58870: LIST
58871: LIST
58872: PUSH
58873: LD_INT 5
58875: PUSH
58876: LD_INT 3
58878: PUSH
58879: EMPTY
58880: LIST
58881: LIST
58882: PUSH
58883: LD_INT 3
58885: PUSH
58886: LD_INT 5
58888: PUSH
58889: EMPTY
58890: LIST
58891: LIST
58892: PUSH
58893: LD_INT 0
58895: PUSH
58896: LD_INT 3
58898: PUSH
58899: EMPTY
58900: LIST
58901: LIST
58902: PUSH
58903: LD_INT 0
58905: PUSH
58906: LD_INT 2
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: PUSH
58913: LD_INT 1
58915: PUSH
58916: LD_INT 3
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: PUSH
58923: LD_INT 1
58925: PUSH
58926: LD_INT 4
58928: PUSH
58929: EMPTY
58930: LIST
58931: LIST
58932: PUSH
58933: LD_INT 0
58935: PUSH
58936: LD_INT 4
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: PUSH
58943: LD_INT 1
58945: NEG
58946: PUSH
58947: LD_INT 3
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: LD_INT 1
58956: NEG
58957: PUSH
58958: LD_INT 2
58960: PUSH
58961: EMPTY
58962: LIST
58963: LIST
58964: PUSH
58965: LD_INT 2
58967: PUSH
58968: LD_INT 4
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: PUSH
58975: LD_INT 2
58977: NEG
58978: PUSH
58979: LD_INT 2
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PUSH
58986: LD_INT 4
58988: NEG
58989: PUSH
58990: LD_INT 0
58992: PUSH
58993: EMPTY
58994: LIST
58995: LIST
58996: PUSH
58997: LD_INT 4
58999: NEG
59000: PUSH
59001: LD_INT 1
59003: NEG
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: PUSH
59009: LD_INT 3
59011: NEG
59012: PUSH
59013: LD_INT 0
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: PUSH
59020: LD_INT 3
59022: NEG
59023: PUSH
59024: LD_INT 1
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: LD_INT 4
59033: NEG
59034: PUSH
59035: LD_INT 1
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: PUSH
59042: LD_INT 5
59044: NEG
59045: PUSH
59046: LD_INT 0
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: PUSH
59053: LD_INT 5
59055: NEG
59056: PUSH
59057: LD_INT 1
59059: NEG
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: PUSH
59065: LD_INT 5
59067: NEG
59068: PUSH
59069: LD_INT 2
59071: NEG
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: PUSH
59077: LD_INT 3
59079: NEG
59080: PUSH
59081: LD_INT 2
59083: PUSH
59084: EMPTY
59085: LIST
59086: LIST
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: LIST
59092: LIST
59093: LIST
59094: LIST
59095: LIST
59096: LIST
59097: LIST
59098: LIST
59099: LIST
59100: LIST
59101: LIST
59102: LIST
59103: LIST
59104: LIST
59105: LIST
59106: LIST
59107: LIST
59108: LIST
59109: LIST
59110: LIST
59111: LIST
59112: LIST
59113: LIST
59114: LIST
59115: LIST
59116: LIST
59117: LIST
59118: LIST
59119: LIST
59120: LIST
59121: LIST
59122: LIST
59123: LIST
59124: LIST
59125: LIST
59126: LIST
59127: LIST
59128: LIST
59129: LIST
59130: LIST
59131: LIST
59132: LIST
59133: LIST
59134: ST_TO_ADDR
// end ; end ;
59135: GO 59138
59137: POP
// case btype of b_depot , b_warehouse :
59138: LD_VAR 0 1
59142: PUSH
59143: LD_INT 0
59145: DOUBLE
59146: EQUAL
59147: IFTRUE 59157
59149: LD_INT 1
59151: DOUBLE
59152: EQUAL
59153: IFTRUE 59157
59155: GO 59358
59157: POP
// case nation of nation_american :
59158: LD_VAR 0 5
59162: PUSH
59163: LD_INT 1
59165: DOUBLE
59166: EQUAL
59167: IFTRUE 59171
59169: GO 59227
59171: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
59172: LD_ADDR_VAR 0 9
59176: PUSH
59177: LD_VAR 0 11
59181: PUSH
59182: LD_VAR 0 12
59186: PUSH
59187: LD_VAR 0 13
59191: PUSH
59192: LD_VAR 0 14
59196: PUSH
59197: LD_VAR 0 15
59201: PUSH
59202: LD_VAR 0 16
59206: PUSH
59207: EMPTY
59208: LIST
59209: LIST
59210: LIST
59211: LIST
59212: LIST
59213: LIST
59214: PUSH
59215: LD_VAR 0 4
59219: PUSH
59220: LD_INT 1
59222: PLUS
59223: ARRAY
59224: ST_TO_ADDR
59225: GO 59356
59227: LD_INT 2
59229: DOUBLE
59230: EQUAL
59231: IFTRUE 59235
59233: GO 59291
59235: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
59236: LD_ADDR_VAR 0 9
59240: PUSH
59241: LD_VAR 0 17
59245: PUSH
59246: LD_VAR 0 18
59250: PUSH
59251: LD_VAR 0 19
59255: PUSH
59256: LD_VAR 0 20
59260: PUSH
59261: LD_VAR 0 21
59265: PUSH
59266: LD_VAR 0 22
59270: PUSH
59271: EMPTY
59272: LIST
59273: LIST
59274: LIST
59275: LIST
59276: LIST
59277: LIST
59278: PUSH
59279: LD_VAR 0 4
59283: PUSH
59284: LD_INT 1
59286: PLUS
59287: ARRAY
59288: ST_TO_ADDR
59289: GO 59356
59291: LD_INT 3
59293: DOUBLE
59294: EQUAL
59295: IFTRUE 59299
59297: GO 59355
59299: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
59300: LD_ADDR_VAR 0 9
59304: PUSH
59305: LD_VAR 0 23
59309: PUSH
59310: LD_VAR 0 24
59314: PUSH
59315: LD_VAR 0 25
59319: PUSH
59320: LD_VAR 0 26
59324: PUSH
59325: LD_VAR 0 27
59329: PUSH
59330: LD_VAR 0 28
59334: PUSH
59335: EMPTY
59336: LIST
59337: LIST
59338: LIST
59339: LIST
59340: LIST
59341: LIST
59342: PUSH
59343: LD_VAR 0 4
59347: PUSH
59348: LD_INT 1
59350: PLUS
59351: ARRAY
59352: ST_TO_ADDR
59353: GO 59356
59355: POP
59356: GO 59911
59358: LD_INT 2
59360: DOUBLE
59361: EQUAL
59362: IFTRUE 59372
59364: LD_INT 3
59366: DOUBLE
59367: EQUAL
59368: IFTRUE 59372
59370: GO 59428
59372: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
59373: LD_ADDR_VAR 0 9
59377: PUSH
59378: LD_VAR 0 29
59382: PUSH
59383: LD_VAR 0 30
59387: PUSH
59388: LD_VAR 0 31
59392: PUSH
59393: LD_VAR 0 32
59397: PUSH
59398: LD_VAR 0 33
59402: PUSH
59403: LD_VAR 0 34
59407: PUSH
59408: EMPTY
59409: LIST
59410: LIST
59411: LIST
59412: LIST
59413: LIST
59414: LIST
59415: PUSH
59416: LD_VAR 0 4
59420: PUSH
59421: LD_INT 1
59423: PLUS
59424: ARRAY
59425: ST_TO_ADDR
59426: GO 59911
59428: LD_INT 16
59430: DOUBLE
59431: EQUAL
59432: IFTRUE 59490
59434: LD_INT 17
59436: DOUBLE
59437: EQUAL
59438: IFTRUE 59490
59440: LD_INT 18
59442: DOUBLE
59443: EQUAL
59444: IFTRUE 59490
59446: LD_INT 19
59448: DOUBLE
59449: EQUAL
59450: IFTRUE 59490
59452: LD_INT 22
59454: DOUBLE
59455: EQUAL
59456: IFTRUE 59490
59458: LD_INT 20
59460: DOUBLE
59461: EQUAL
59462: IFTRUE 59490
59464: LD_INT 21
59466: DOUBLE
59467: EQUAL
59468: IFTRUE 59490
59470: LD_INT 23
59472: DOUBLE
59473: EQUAL
59474: IFTRUE 59490
59476: LD_INT 24
59478: DOUBLE
59479: EQUAL
59480: IFTRUE 59490
59482: LD_INT 25
59484: DOUBLE
59485: EQUAL
59486: IFTRUE 59490
59488: GO 59546
59490: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
59491: LD_ADDR_VAR 0 9
59495: PUSH
59496: LD_VAR 0 35
59500: PUSH
59501: LD_VAR 0 36
59505: PUSH
59506: LD_VAR 0 37
59510: PUSH
59511: LD_VAR 0 38
59515: PUSH
59516: LD_VAR 0 39
59520: PUSH
59521: LD_VAR 0 40
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: LIST
59530: LIST
59531: LIST
59532: LIST
59533: PUSH
59534: LD_VAR 0 4
59538: PUSH
59539: LD_INT 1
59541: PLUS
59542: ARRAY
59543: ST_TO_ADDR
59544: GO 59911
59546: LD_INT 6
59548: DOUBLE
59549: EQUAL
59550: IFTRUE 59602
59552: LD_INT 7
59554: DOUBLE
59555: EQUAL
59556: IFTRUE 59602
59558: LD_INT 8
59560: DOUBLE
59561: EQUAL
59562: IFTRUE 59602
59564: LD_INT 13
59566: DOUBLE
59567: EQUAL
59568: IFTRUE 59602
59570: LD_INT 12
59572: DOUBLE
59573: EQUAL
59574: IFTRUE 59602
59576: LD_INT 15
59578: DOUBLE
59579: EQUAL
59580: IFTRUE 59602
59582: LD_INT 11
59584: DOUBLE
59585: EQUAL
59586: IFTRUE 59602
59588: LD_INT 14
59590: DOUBLE
59591: EQUAL
59592: IFTRUE 59602
59594: LD_INT 10
59596: DOUBLE
59597: EQUAL
59598: IFTRUE 59602
59600: GO 59658
59602: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
59603: LD_ADDR_VAR 0 9
59607: PUSH
59608: LD_VAR 0 41
59612: PUSH
59613: LD_VAR 0 42
59617: PUSH
59618: LD_VAR 0 43
59622: PUSH
59623: LD_VAR 0 44
59627: PUSH
59628: LD_VAR 0 45
59632: PUSH
59633: LD_VAR 0 46
59637: PUSH
59638: EMPTY
59639: LIST
59640: LIST
59641: LIST
59642: LIST
59643: LIST
59644: LIST
59645: PUSH
59646: LD_VAR 0 4
59650: PUSH
59651: LD_INT 1
59653: PLUS
59654: ARRAY
59655: ST_TO_ADDR
59656: GO 59911
59658: LD_INT 36
59660: DOUBLE
59661: EQUAL
59662: IFTRUE 59666
59664: GO 59722
59666: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
59667: LD_ADDR_VAR 0 9
59671: PUSH
59672: LD_VAR 0 47
59676: PUSH
59677: LD_VAR 0 48
59681: PUSH
59682: LD_VAR 0 49
59686: PUSH
59687: LD_VAR 0 50
59691: PUSH
59692: LD_VAR 0 51
59696: PUSH
59697: LD_VAR 0 52
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: LIST
59706: LIST
59707: LIST
59708: LIST
59709: PUSH
59710: LD_VAR 0 4
59714: PUSH
59715: LD_INT 1
59717: PLUS
59718: ARRAY
59719: ST_TO_ADDR
59720: GO 59911
59722: LD_INT 4
59724: DOUBLE
59725: EQUAL
59726: IFTRUE 59748
59728: LD_INT 5
59730: DOUBLE
59731: EQUAL
59732: IFTRUE 59748
59734: LD_INT 34
59736: DOUBLE
59737: EQUAL
59738: IFTRUE 59748
59740: LD_INT 37
59742: DOUBLE
59743: EQUAL
59744: IFTRUE 59748
59746: GO 59804
59748: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
59749: LD_ADDR_VAR 0 9
59753: PUSH
59754: LD_VAR 0 53
59758: PUSH
59759: LD_VAR 0 54
59763: PUSH
59764: LD_VAR 0 55
59768: PUSH
59769: LD_VAR 0 56
59773: PUSH
59774: LD_VAR 0 57
59778: PUSH
59779: LD_VAR 0 58
59783: PUSH
59784: EMPTY
59785: LIST
59786: LIST
59787: LIST
59788: LIST
59789: LIST
59790: LIST
59791: PUSH
59792: LD_VAR 0 4
59796: PUSH
59797: LD_INT 1
59799: PLUS
59800: ARRAY
59801: ST_TO_ADDR
59802: GO 59911
59804: LD_INT 31
59806: DOUBLE
59807: EQUAL
59808: IFTRUE 59854
59810: LD_INT 32
59812: DOUBLE
59813: EQUAL
59814: IFTRUE 59854
59816: LD_INT 33
59818: DOUBLE
59819: EQUAL
59820: IFTRUE 59854
59822: LD_INT 27
59824: DOUBLE
59825: EQUAL
59826: IFTRUE 59854
59828: LD_INT 26
59830: DOUBLE
59831: EQUAL
59832: IFTRUE 59854
59834: LD_INT 28
59836: DOUBLE
59837: EQUAL
59838: IFTRUE 59854
59840: LD_INT 29
59842: DOUBLE
59843: EQUAL
59844: IFTRUE 59854
59846: LD_INT 30
59848: DOUBLE
59849: EQUAL
59850: IFTRUE 59854
59852: GO 59910
59854: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
59855: LD_ADDR_VAR 0 9
59859: PUSH
59860: LD_VAR 0 59
59864: PUSH
59865: LD_VAR 0 60
59869: PUSH
59870: LD_VAR 0 61
59874: PUSH
59875: LD_VAR 0 62
59879: PUSH
59880: LD_VAR 0 63
59884: PUSH
59885: LD_VAR 0 64
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: LIST
59894: LIST
59895: LIST
59896: LIST
59897: PUSH
59898: LD_VAR 0 4
59902: PUSH
59903: LD_INT 1
59905: PLUS
59906: ARRAY
59907: ST_TO_ADDR
59908: GO 59911
59910: POP
// temp_list2 = [ ] ;
59911: LD_ADDR_VAR 0 10
59915: PUSH
59916: EMPTY
59917: ST_TO_ADDR
// for i in temp_list do
59918: LD_ADDR_VAR 0 8
59922: PUSH
59923: LD_VAR 0 9
59927: PUSH
59928: FOR_IN
59929: IFFALSE 59981
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
59931: LD_ADDR_VAR 0 10
59935: PUSH
59936: LD_VAR 0 10
59940: PUSH
59941: LD_VAR 0 8
59945: PUSH
59946: LD_INT 1
59948: ARRAY
59949: PUSH
59950: LD_VAR 0 2
59954: PLUS
59955: PUSH
59956: LD_VAR 0 8
59960: PUSH
59961: LD_INT 2
59963: ARRAY
59964: PUSH
59965: LD_VAR 0 3
59969: PLUS
59970: PUSH
59971: EMPTY
59972: LIST
59973: LIST
59974: PUSH
59975: EMPTY
59976: LIST
59977: ADD
59978: ST_TO_ADDR
59979: GO 59928
59981: POP
59982: POP
// result = temp_list2 ;
59983: LD_ADDR_VAR 0 7
59987: PUSH
59988: LD_VAR 0 10
59992: ST_TO_ADDR
// end ;
59993: LD_VAR 0 7
59997: RET
// export function EnemyInRange ( unit , dist ) ; begin
59998: LD_INT 0
60000: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
60001: LD_ADDR_VAR 0 3
60005: PUSH
60006: LD_VAR 0 1
60010: PPUSH
60011: CALL_OW 255
60015: PPUSH
60016: LD_VAR 0 1
60020: PPUSH
60021: CALL_OW 250
60025: PPUSH
60026: LD_VAR 0 1
60030: PPUSH
60031: CALL_OW 251
60035: PPUSH
60036: LD_VAR 0 2
60040: PPUSH
60041: CALL 33371 0 4
60045: PUSH
60046: LD_INT 4
60048: ARRAY
60049: ST_TO_ADDR
// end ;
60050: LD_VAR 0 3
60054: RET
// export function PlayerSeeMe ( unit ) ; begin
60055: LD_INT 0
60057: PPUSH
// result := See ( your_side , unit ) ;
60058: LD_ADDR_VAR 0 2
60062: PUSH
60063: LD_OWVAR 2
60067: PPUSH
60068: LD_VAR 0 1
60072: PPUSH
60073: CALL_OW 292
60077: ST_TO_ADDR
// end ;
60078: LD_VAR 0 2
60082: RET
// export function ReverseDir ( unit ) ; begin
60083: LD_INT 0
60085: PPUSH
// if not unit then
60086: LD_VAR 0 1
60090: NOT
60091: IFFALSE 60095
// exit ;
60093: GO 60118
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
60095: LD_ADDR_VAR 0 2
60099: PUSH
60100: LD_VAR 0 1
60104: PPUSH
60105: CALL_OW 254
60109: PUSH
60110: LD_INT 3
60112: PLUS
60113: PUSH
60114: LD_INT 6
60116: MOD
60117: ST_TO_ADDR
// end ;
60118: LD_VAR 0 2
60122: RET
// export function ReverseArray ( array ) ; var i ; begin
60123: LD_INT 0
60125: PPUSH
60126: PPUSH
// if not array then
60127: LD_VAR 0 1
60131: NOT
60132: IFFALSE 60136
// exit ;
60134: GO 60191
// result := [ ] ;
60136: LD_ADDR_VAR 0 2
60140: PUSH
60141: EMPTY
60142: ST_TO_ADDR
// for i := array downto 1 do
60143: LD_ADDR_VAR 0 3
60147: PUSH
60148: DOUBLE
60149: LD_VAR 0 1
60153: INC
60154: ST_TO_ADDR
60155: LD_INT 1
60157: PUSH
60158: FOR_DOWNTO
60159: IFFALSE 60189
// result := Join ( result , array [ i ] ) ;
60161: LD_ADDR_VAR 0 2
60165: PUSH
60166: LD_VAR 0 2
60170: PPUSH
60171: LD_VAR 0 1
60175: PUSH
60176: LD_VAR 0 3
60180: ARRAY
60181: PPUSH
60182: CALL 64856 0 2
60186: ST_TO_ADDR
60187: GO 60158
60189: POP
60190: POP
// end ;
60191: LD_VAR 0 2
60195: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
60196: LD_INT 0
60198: PPUSH
60199: PPUSH
60200: PPUSH
60201: PPUSH
60202: PPUSH
60203: PPUSH
// if not unit or not hexes then
60204: LD_VAR 0 1
60208: NOT
60209: PUSH
60210: LD_VAR 0 2
60214: NOT
60215: OR
60216: IFFALSE 60220
// exit ;
60218: GO 60343
// dist := 9999 ;
60220: LD_ADDR_VAR 0 5
60224: PUSH
60225: LD_INT 9999
60227: ST_TO_ADDR
// for i = 1 to hexes do
60228: LD_ADDR_VAR 0 4
60232: PUSH
60233: DOUBLE
60234: LD_INT 1
60236: DEC
60237: ST_TO_ADDR
60238: LD_VAR 0 2
60242: PUSH
60243: FOR_TO
60244: IFFALSE 60331
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60246: LD_ADDR_VAR 0 6
60250: PUSH
60251: LD_VAR 0 1
60255: PPUSH
60256: LD_VAR 0 2
60260: PUSH
60261: LD_VAR 0 4
60265: ARRAY
60266: PUSH
60267: LD_INT 1
60269: ARRAY
60270: PPUSH
60271: LD_VAR 0 2
60275: PUSH
60276: LD_VAR 0 4
60280: ARRAY
60281: PUSH
60282: LD_INT 2
60284: ARRAY
60285: PPUSH
60286: CALL_OW 297
60290: ST_TO_ADDR
// if tdist < dist then
60291: LD_VAR 0 6
60295: PUSH
60296: LD_VAR 0 5
60300: LESS
60301: IFFALSE 60329
// begin hex := hexes [ i ] ;
60303: LD_ADDR_VAR 0 8
60307: PUSH
60308: LD_VAR 0 2
60312: PUSH
60313: LD_VAR 0 4
60317: ARRAY
60318: ST_TO_ADDR
// dist := tdist ;
60319: LD_ADDR_VAR 0 5
60323: PUSH
60324: LD_VAR 0 6
60328: ST_TO_ADDR
// end ; end ;
60329: GO 60243
60331: POP
60332: POP
// result := hex ;
60333: LD_ADDR_VAR 0 3
60337: PUSH
60338: LD_VAR 0 8
60342: ST_TO_ADDR
// end ;
60343: LD_VAR 0 3
60347: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
60348: LD_INT 0
60350: PPUSH
60351: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
60352: LD_VAR 0 1
60356: NOT
60357: PUSH
60358: LD_VAR 0 1
60362: PUSH
60363: LD_INT 21
60365: PUSH
60366: LD_INT 2
60368: PUSH
60369: EMPTY
60370: LIST
60371: LIST
60372: PUSH
60373: LD_INT 23
60375: PUSH
60376: LD_INT 2
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: PUSH
60383: EMPTY
60384: LIST
60385: LIST
60386: PPUSH
60387: CALL_OW 69
60391: IN
60392: NOT
60393: OR
60394: IFFALSE 60398
// exit ;
60396: GO 60445
// for i = 1 to 3 do
60398: LD_ADDR_VAR 0 3
60402: PUSH
60403: DOUBLE
60404: LD_INT 1
60406: DEC
60407: ST_TO_ADDR
60408: LD_INT 3
60410: PUSH
60411: FOR_TO
60412: IFFALSE 60443
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
60414: LD_VAR 0 1
60418: PPUSH
60419: CALL_OW 250
60423: PPUSH
60424: LD_VAR 0 1
60428: PPUSH
60429: CALL_OW 251
60433: PPUSH
60434: LD_INT 1
60436: PPUSH
60437: CALL_OW 453
60441: GO 60411
60443: POP
60444: POP
// end ;
60445: LD_VAR 0 2
60449: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
60450: LD_INT 0
60452: PPUSH
60453: PPUSH
60454: PPUSH
60455: PPUSH
60456: PPUSH
60457: PPUSH
// if not unit or not enemy_unit then
60458: LD_VAR 0 1
60462: NOT
60463: PUSH
60464: LD_VAR 0 2
60468: NOT
60469: OR
60470: IFFALSE 60474
// exit ;
60472: GO 60941
// if GetLives ( i ) < 250 then
60474: LD_VAR 0 4
60478: PPUSH
60479: CALL_OW 256
60483: PUSH
60484: LD_INT 250
60486: LESS
60487: IFFALSE 60500
// begin ComAutodestruct ( i ) ;
60489: LD_VAR 0 4
60493: PPUSH
60494: CALL 60348 0 1
// exit ;
60498: GO 60941
// end ; x := GetX ( enemy_unit ) ;
60500: LD_ADDR_VAR 0 7
60504: PUSH
60505: LD_VAR 0 2
60509: PPUSH
60510: CALL_OW 250
60514: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
60515: LD_ADDR_VAR 0 8
60519: PUSH
60520: LD_VAR 0 2
60524: PPUSH
60525: CALL_OW 251
60529: ST_TO_ADDR
// if not x or not y then
60530: LD_VAR 0 7
60534: NOT
60535: PUSH
60536: LD_VAR 0 8
60540: NOT
60541: OR
60542: IFFALSE 60546
// exit ;
60544: GO 60941
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
60546: LD_ADDR_VAR 0 6
60550: PUSH
60551: LD_VAR 0 7
60555: PPUSH
60556: LD_INT 0
60558: PPUSH
60559: LD_INT 4
60561: PPUSH
60562: CALL_OW 272
60566: PUSH
60567: LD_VAR 0 8
60571: PPUSH
60572: LD_INT 0
60574: PPUSH
60575: LD_INT 4
60577: PPUSH
60578: CALL_OW 273
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: PUSH
60587: LD_VAR 0 7
60591: PPUSH
60592: LD_INT 1
60594: PPUSH
60595: LD_INT 4
60597: PPUSH
60598: CALL_OW 272
60602: PUSH
60603: LD_VAR 0 8
60607: PPUSH
60608: LD_INT 1
60610: PPUSH
60611: LD_INT 4
60613: PPUSH
60614: CALL_OW 273
60618: PUSH
60619: EMPTY
60620: LIST
60621: LIST
60622: PUSH
60623: LD_VAR 0 7
60627: PPUSH
60628: LD_INT 2
60630: PPUSH
60631: LD_INT 4
60633: PPUSH
60634: CALL_OW 272
60638: PUSH
60639: LD_VAR 0 8
60643: PPUSH
60644: LD_INT 2
60646: PPUSH
60647: LD_INT 4
60649: PPUSH
60650: CALL_OW 273
60654: PUSH
60655: EMPTY
60656: LIST
60657: LIST
60658: PUSH
60659: LD_VAR 0 7
60663: PPUSH
60664: LD_INT 3
60666: PPUSH
60667: LD_INT 4
60669: PPUSH
60670: CALL_OW 272
60674: PUSH
60675: LD_VAR 0 8
60679: PPUSH
60680: LD_INT 3
60682: PPUSH
60683: LD_INT 4
60685: PPUSH
60686: CALL_OW 273
60690: PUSH
60691: EMPTY
60692: LIST
60693: LIST
60694: PUSH
60695: LD_VAR 0 7
60699: PPUSH
60700: LD_INT 4
60702: PPUSH
60703: LD_INT 4
60705: PPUSH
60706: CALL_OW 272
60710: PUSH
60711: LD_VAR 0 8
60715: PPUSH
60716: LD_INT 4
60718: PPUSH
60719: LD_INT 4
60721: PPUSH
60722: CALL_OW 273
60726: PUSH
60727: EMPTY
60728: LIST
60729: LIST
60730: PUSH
60731: LD_VAR 0 7
60735: PPUSH
60736: LD_INT 5
60738: PPUSH
60739: LD_INT 4
60741: PPUSH
60742: CALL_OW 272
60746: PUSH
60747: LD_VAR 0 8
60751: PPUSH
60752: LD_INT 5
60754: PPUSH
60755: LD_INT 4
60757: PPUSH
60758: CALL_OW 273
60762: PUSH
60763: EMPTY
60764: LIST
60765: LIST
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: LIST
60771: LIST
60772: LIST
60773: LIST
60774: ST_TO_ADDR
// for i = tmp downto 1 do
60775: LD_ADDR_VAR 0 4
60779: PUSH
60780: DOUBLE
60781: LD_VAR 0 6
60785: INC
60786: ST_TO_ADDR
60787: LD_INT 1
60789: PUSH
60790: FOR_DOWNTO
60791: IFFALSE 60892
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
60793: LD_VAR 0 6
60797: PUSH
60798: LD_VAR 0 4
60802: ARRAY
60803: PUSH
60804: LD_INT 1
60806: ARRAY
60807: PPUSH
60808: LD_VAR 0 6
60812: PUSH
60813: LD_VAR 0 4
60817: ARRAY
60818: PUSH
60819: LD_INT 2
60821: ARRAY
60822: PPUSH
60823: CALL_OW 488
60827: NOT
60828: PUSH
60829: LD_VAR 0 6
60833: PUSH
60834: LD_VAR 0 4
60838: ARRAY
60839: PUSH
60840: LD_INT 1
60842: ARRAY
60843: PPUSH
60844: LD_VAR 0 6
60848: PUSH
60849: LD_VAR 0 4
60853: ARRAY
60854: PUSH
60855: LD_INT 2
60857: ARRAY
60858: PPUSH
60859: CALL_OW 428
60863: PUSH
60864: LD_INT 0
60866: NONEQUAL
60867: OR
60868: IFFALSE 60890
// tmp := Delete ( tmp , i ) ;
60870: LD_ADDR_VAR 0 6
60874: PUSH
60875: LD_VAR 0 6
60879: PPUSH
60880: LD_VAR 0 4
60884: PPUSH
60885: CALL_OW 3
60889: ST_TO_ADDR
60890: GO 60790
60892: POP
60893: POP
// j := GetClosestHex ( unit , tmp ) ;
60894: LD_ADDR_VAR 0 5
60898: PUSH
60899: LD_VAR 0 1
60903: PPUSH
60904: LD_VAR 0 6
60908: PPUSH
60909: CALL 60196 0 2
60913: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
60914: LD_VAR 0 1
60918: PPUSH
60919: LD_VAR 0 5
60923: PUSH
60924: LD_INT 1
60926: ARRAY
60927: PPUSH
60928: LD_VAR 0 5
60932: PUSH
60933: LD_INT 2
60935: ARRAY
60936: PPUSH
60937: CALL_OW 111
// end ;
60941: LD_VAR 0 3
60945: RET
// export function PrepareApemanSoldier ( ) ; begin
60946: LD_INT 0
60948: PPUSH
// uc_nation := 0 ;
60949: LD_ADDR_OWVAR 21
60953: PUSH
60954: LD_INT 0
60956: ST_TO_ADDR
// hc_sex := sex_male ;
60957: LD_ADDR_OWVAR 27
60961: PUSH
60962: LD_INT 1
60964: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
60965: LD_ADDR_OWVAR 28
60969: PUSH
60970: LD_INT 15
60972: ST_TO_ADDR
// hc_gallery :=  ;
60973: LD_ADDR_OWVAR 33
60977: PUSH
60978: LD_STRING 
60980: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60981: LD_ADDR_OWVAR 31
60985: PUSH
60986: LD_INT 0
60988: PPUSH
60989: LD_INT 3
60991: PPUSH
60992: CALL_OW 12
60996: PUSH
60997: LD_INT 0
60999: PPUSH
61000: LD_INT 3
61002: PPUSH
61003: CALL_OW 12
61007: PUSH
61008: LD_INT 0
61010: PUSH
61011: LD_INT 0
61013: PUSH
61014: EMPTY
61015: LIST
61016: LIST
61017: LIST
61018: LIST
61019: ST_TO_ADDR
// end ;
61020: LD_VAR 0 1
61024: RET
// export function PrepareApemanEngineer ( ) ; begin
61025: LD_INT 0
61027: PPUSH
// uc_nation := 0 ;
61028: LD_ADDR_OWVAR 21
61032: PUSH
61033: LD_INT 0
61035: ST_TO_ADDR
// hc_sex := sex_male ;
61036: LD_ADDR_OWVAR 27
61040: PUSH
61041: LD_INT 1
61043: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
61044: LD_ADDR_OWVAR 28
61048: PUSH
61049: LD_INT 16
61051: ST_TO_ADDR
// hc_gallery :=  ;
61052: LD_ADDR_OWVAR 33
61056: PUSH
61057: LD_STRING 
61059: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61060: LD_ADDR_OWVAR 31
61064: PUSH
61065: LD_INT 0
61067: PPUSH
61068: LD_INT 3
61070: PPUSH
61071: CALL_OW 12
61075: PUSH
61076: LD_INT 0
61078: PPUSH
61079: LD_INT 3
61081: PPUSH
61082: CALL_OW 12
61086: PUSH
61087: LD_INT 0
61089: PUSH
61090: LD_INT 0
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: LIST
61097: LIST
61098: ST_TO_ADDR
// end ;
61099: LD_VAR 0 1
61103: RET
// export function PrepareApeman ( agressivity ) ; begin
61104: LD_INT 0
61106: PPUSH
// uc_side := 0 ;
61107: LD_ADDR_OWVAR 20
61111: PUSH
61112: LD_INT 0
61114: ST_TO_ADDR
// uc_nation := 0 ;
61115: LD_ADDR_OWVAR 21
61119: PUSH
61120: LD_INT 0
61122: ST_TO_ADDR
// hc_sex := sex_male ;
61123: LD_ADDR_OWVAR 27
61127: PUSH
61128: LD_INT 1
61130: ST_TO_ADDR
// hc_class := class_apeman ;
61131: LD_ADDR_OWVAR 28
61135: PUSH
61136: LD_INT 12
61138: ST_TO_ADDR
// hc_gallery :=  ;
61139: LD_ADDR_OWVAR 33
61143: PUSH
61144: LD_STRING 
61146: ST_TO_ADDR
// if agressivity = 0 then
61147: LD_VAR 0 1
61151: PUSH
61152: LD_INT 0
61154: EQUAL
61155: IFFALSE 61167
// hc_agressivity := 0 else
61157: LD_ADDR_OWVAR 35
61161: PUSH
61162: LD_INT 0
61164: ST_TO_ADDR
61165: GO 61188
// hc_agressivity := rand ( - agressivity , agressivity ) ;
61167: LD_ADDR_OWVAR 35
61171: PUSH
61172: LD_VAR 0 1
61176: NEG
61177: PPUSH
61178: LD_VAR 0 1
61182: PPUSH
61183: CALL_OW 12
61187: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61188: LD_ADDR_OWVAR 31
61192: PUSH
61193: LD_INT 0
61195: PPUSH
61196: LD_INT 3
61198: PPUSH
61199: CALL_OW 12
61203: PUSH
61204: LD_INT 0
61206: PPUSH
61207: LD_INT 3
61209: PPUSH
61210: CALL_OW 12
61214: PUSH
61215: LD_INT 0
61217: PUSH
61218: LD_INT 0
61220: PUSH
61221: EMPTY
61222: LIST
61223: LIST
61224: LIST
61225: LIST
61226: ST_TO_ADDR
// end ;
61227: LD_VAR 0 2
61231: RET
// export function PrepareTiger ( agressivity ) ; begin
61232: LD_INT 0
61234: PPUSH
// uc_side := 0 ;
61235: LD_ADDR_OWVAR 20
61239: PUSH
61240: LD_INT 0
61242: ST_TO_ADDR
// uc_nation := 0 ;
61243: LD_ADDR_OWVAR 21
61247: PUSH
61248: LD_INT 0
61250: ST_TO_ADDR
// hc_class := class_tiger ;
61251: LD_ADDR_OWVAR 28
61255: PUSH
61256: LD_INT 14
61258: ST_TO_ADDR
// hc_gallery :=  ;
61259: LD_ADDR_OWVAR 33
61263: PUSH
61264: LD_STRING 
61266: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
61267: LD_ADDR_OWVAR 35
61271: PUSH
61272: LD_VAR 0 1
61276: NEG
61277: PPUSH
61278: LD_VAR 0 1
61282: PPUSH
61283: CALL_OW 12
61287: ST_TO_ADDR
// end ;
61288: LD_VAR 0 2
61292: RET
// export function PrepareEnchidna ( ) ; begin
61293: LD_INT 0
61295: PPUSH
// uc_side := 0 ;
61296: LD_ADDR_OWVAR 20
61300: PUSH
61301: LD_INT 0
61303: ST_TO_ADDR
// uc_nation := 0 ;
61304: LD_ADDR_OWVAR 21
61308: PUSH
61309: LD_INT 0
61311: ST_TO_ADDR
// hc_class := class_baggie ;
61312: LD_ADDR_OWVAR 28
61316: PUSH
61317: LD_INT 13
61319: ST_TO_ADDR
// hc_gallery :=  ;
61320: LD_ADDR_OWVAR 33
61324: PUSH
61325: LD_STRING 
61327: ST_TO_ADDR
// end ;
61328: LD_VAR 0 1
61332: RET
// export function PrepareFrog ( ) ; begin
61333: LD_INT 0
61335: PPUSH
// uc_side := 0 ;
61336: LD_ADDR_OWVAR 20
61340: PUSH
61341: LD_INT 0
61343: ST_TO_ADDR
// uc_nation := 0 ;
61344: LD_ADDR_OWVAR 21
61348: PUSH
61349: LD_INT 0
61351: ST_TO_ADDR
// hc_class := class_frog ;
61352: LD_ADDR_OWVAR 28
61356: PUSH
61357: LD_INT 19
61359: ST_TO_ADDR
// hc_gallery :=  ;
61360: LD_ADDR_OWVAR 33
61364: PUSH
61365: LD_STRING 
61367: ST_TO_ADDR
// end ;
61368: LD_VAR 0 1
61372: RET
// export function PrepareFish ( ) ; begin
61373: LD_INT 0
61375: PPUSH
// uc_side := 0 ;
61376: LD_ADDR_OWVAR 20
61380: PUSH
61381: LD_INT 0
61383: ST_TO_ADDR
// uc_nation := 0 ;
61384: LD_ADDR_OWVAR 21
61388: PUSH
61389: LD_INT 0
61391: ST_TO_ADDR
// hc_class := class_fish ;
61392: LD_ADDR_OWVAR 28
61396: PUSH
61397: LD_INT 20
61399: ST_TO_ADDR
// hc_gallery :=  ;
61400: LD_ADDR_OWVAR 33
61404: PUSH
61405: LD_STRING 
61407: ST_TO_ADDR
// end ;
61408: LD_VAR 0 1
61412: RET
// export function PrepareBird ( ) ; begin
61413: LD_INT 0
61415: PPUSH
// uc_side := 0 ;
61416: LD_ADDR_OWVAR 20
61420: PUSH
61421: LD_INT 0
61423: ST_TO_ADDR
// uc_nation := 0 ;
61424: LD_ADDR_OWVAR 21
61428: PUSH
61429: LD_INT 0
61431: ST_TO_ADDR
// hc_class := class_phororhacos ;
61432: LD_ADDR_OWVAR 28
61436: PUSH
61437: LD_INT 18
61439: ST_TO_ADDR
// hc_gallery :=  ;
61440: LD_ADDR_OWVAR 33
61444: PUSH
61445: LD_STRING 
61447: ST_TO_ADDR
// end ;
61448: LD_VAR 0 1
61452: RET
// export function PrepareHorse ( ) ; begin
61453: LD_INT 0
61455: PPUSH
// uc_side := 0 ;
61456: LD_ADDR_OWVAR 20
61460: PUSH
61461: LD_INT 0
61463: ST_TO_ADDR
// uc_nation := 0 ;
61464: LD_ADDR_OWVAR 21
61468: PUSH
61469: LD_INT 0
61471: ST_TO_ADDR
// hc_class := class_horse ;
61472: LD_ADDR_OWVAR 28
61476: PUSH
61477: LD_INT 21
61479: ST_TO_ADDR
// hc_gallery :=  ;
61480: LD_ADDR_OWVAR 33
61484: PUSH
61485: LD_STRING 
61487: ST_TO_ADDR
// end ;
61488: LD_VAR 0 1
61492: RET
// export function PrepareMastodont ( ) ; begin
61493: LD_INT 0
61495: PPUSH
// uc_side := 0 ;
61496: LD_ADDR_OWVAR 20
61500: PUSH
61501: LD_INT 0
61503: ST_TO_ADDR
// uc_nation := 0 ;
61504: LD_ADDR_OWVAR 21
61508: PUSH
61509: LD_INT 0
61511: ST_TO_ADDR
// vc_chassis := class_mastodont ;
61512: LD_ADDR_OWVAR 37
61516: PUSH
61517: LD_INT 31
61519: ST_TO_ADDR
// vc_control := control_rider ;
61520: LD_ADDR_OWVAR 38
61524: PUSH
61525: LD_INT 4
61527: ST_TO_ADDR
// end ;
61528: LD_VAR 0 1
61532: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
61533: LD_INT 0
61535: PPUSH
61536: PPUSH
61537: PPUSH
// uc_side = 0 ;
61538: LD_ADDR_OWVAR 20
61542: PUSH
61543: LD_INT 0
61545: ST_TO_ADDR
// uc_nation = 0 ;
61546: LD_ADDR_OWVAR 21
61550: PUSH
61551: LD_INT 0
61553: ST_TO_ADDR
// InitHc_All ( ) ;
61554: CALL_OW 584
// InitVc ;
61558: CALL_OW 20
// if mastodonts then
61562: LD_VAR 0 6
61566: IFFALSE 61633
// for i = 1 to mastodonts do
61568: LD_ADDR_VAR 0 11
61572: PUSH
61573: DOUBLE
61574: LD_INT 1
61576: DEC
61577: ST_TO_ADDR
61578: LD_VAR 0 6
61582: PUSH
61583: FOR_TO
61584: IFFALSE 61631
// begin vc_chassis := 31 ;
61586: LD_ADDR_OWVAR 37
61590: PUSH
61591: LD_INT 31
61593: ST_TO_ADDR
// vc_control := control_rider ;
61594: LD_ADDR_OWVAR 38
61598: PUSH
61599: LD_INT 4
61601: ST_TO_ADDR
// animal := CreateVehicle ;
61602: LD_ADDR_VAR 0 12
61606: PUSH
61607: CALL_OW 45
61611: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61612: LD_VAR 0 12
61616: PPUSH
61617: LD_VAR 0 8
61621: PPUSH
61622: LD_INT 0
61624: PPUSH
61625: CALL 63761 0 3
// end ;
61629: GO 61583
61631: POP
61632: POP
// if horses then
61633: LD_VAR 0 5
61637: IFFALSE 61704
// for i = 1 to horses do
61639: LD_ADDR_VAR 0 11
61643: PUSH
61644: DOUBLE
61645: LD_INT 1
61647: DEC
61648: ST_TO_ADDR
61649: LD_VAR 0 5
61653: PUSH
61654: FOR_TO
61655: IFFALSE 61702
// begin hc_class := 21 ;
61657: LD_ADDR_OWVAR 28
61661: PUSH
61662: LD_INT 21
61664: ST_TO_ADDR
// hc_gallery :=  ;
61665: LD_ADDR_OWVAR 33
61669: PUSH
61670: LD_STRING 
61672: ST_TO_ADDR
// animal := CreateHuman ;
61673: LD_ADDR_VAR 0 12
61677: PUSH
61678: CALL_OW 44
61682: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61683: LD_VAR 0 12
61687: PPUSH
61688: LD_VAR 0 8
61692: PPUSH
61693: LD_INT 0
61695: PPUSH
61696: CALL 63761 0 3
// end ;
61700: GO 61654
61702: POP
61703: POP
// if birds then
61704: LD_VAR 0 1
61708: IFFALSE 61775
// for i = 1 to birds do
61710: LD_ADDR_VAR 0 11
61714: PUSH
61715: DOUBLE
61716: LD_INT 1
61718: DEC
61719: ST_TO_ADDR
61720: LD_VAR 0 1
61724: PUSH
61725: FOR_TO
61726: IFFALSE 61773
// begin hc_class := 18 ;
61728: LD_ADDR_OWVAR 28
61732: PUSH
61733: LD_INT 18
61735: ST_TO_ADDR
// hc_gallery =  ;
61736: LD_ADDR_OWVAR 33
61740: PUSH
61741: LD_STRING 
61743: ST_TO_ADDR
// animal := CreateHuman ;
61744: LD_ADDR_VAR 0 12
61748: PUSH
61749: CALL_OW 44
61753: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61754: LD_VAR 0 12
61758: PPUSH
61759: LD_VAR 0 8
61763: PPUSH
61764: LD_INT 0
61766: PPUSH
61767: CALL 63761 0 3
// end ;
61771: GO 61725
61773: POP
61774: POP
// if tigers then
61775: LD_VAR 0 2
61779: IFFALSE 61863
// for i = 1 to tigers do
61781: LD_ADDR_VAR 0 11
61785: PUSH
61786: DOUBLE
61787: LD_INT 1
61789: DEC
61790: ST_TO_ADDR
61791: LD_VAR 0 2
61795: PUSH
61796: FOR_TO
61797: IFFALSE 61861
// begin hc_class = class_tiger ;
61799: LD_ADDR_OWVAR 28
61803: PUSH
61804: LD_INT 14
61806: ST_TO_ADDR
// hc_gallery =  ;
61807: LD_ADDR_OWVAR 33
61811: PUSH
61812: LD_STRING 
61814: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
61815: LD_ADDR_OWVAR 35
61819: PUSH
61820: LD_INT 7
61822: NEG
61823: PPUSH
61824: LD_INT 7
61826: PPUSH
61827: CALL_OW 12
61831: ST_TO_ADDR
// animal := CreateHuman ;
61832: LD_ADDR_VAR 0 12
61836: PUSH
61837: CALL_OW 44
61841: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61842: LD_VAR 0 12
61846: PPUSH
61847: LD_VAR 0 8
61851: PPUSH
61852: LD_INT 0
61854: PPUSH
61855: CALL 63761 0 3
// end ;
61859: GO 61796
61861: POP
61862: POP
// if apemans then
61863: LD_VAR 0 3
61867: IFFALSE 61990
// for i = 1 to apemans do
61869: LD_ADDR_VAR 0 11
61873: PUSH
61874: DOUBLE
61875: LD_INT 1
61877: DEC
61878: ST_TO_ADDR
61879: LD_VAR 0 3
61883: PUSH
61884: FOR_TO
61885: IFFALSE 61988
// begin hc_class = class_apeman ;
61887: LD_ADDR_OWVAR 28
61891: PUSH
61892: LD_INT 12
61894: ST_TO_ADDR
// hc_gallery =  ;
61895: LD_ADDR_OWVAR 33
61899: PUSH
61900: LD_STRING 
61902: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
61903: LD_ADDR_OWVAR 35
61907: PUSH
61908: LD_INT 2
61910: NEG
61911: PPUSH
61912: LD_INT 2
61914: PPUSH
61915: CALL_OW 12
61919: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
61920: LD_ADDR_OWVAR 31
61924: PUSH
61925: LD_INT 1
61927: PPUSH
61928: LD_INT 3
61930: PPUSH
61931: CALL_OW 12
61935: PUSH
61936: LD_INT 1
61938: PPUSH
61939: LD_INT 3
61941: PPUSH
61942: CALL_OW 12
61946: PUSH
61947: LD_INT 0
61949: PUSH
61950: LD_INT 0
61952: PUSH
61953: EMPTY
61954: LIST
61955: LIST
61956: LIST
61957: LIST
61958: ST_TO_ADDR
// animal := CreateHuman ;
61959: LD_ADDR_VAR 0 12
61963: PUSH
61964: CALL_OW 44
61968: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61969: LD_VAR 0 12
61973: PPUSH
61974: LD_VAR 0 8
61978: PPUSH
61979: LD_INT 0
61981: PPUSH
61982: CALL 63761 0 3
// end ;
61986: GO 61884
61988: POP
61989: POP
// if enchidnas then
61990: LD_VAR 0 4
61994: IFFALSE 62061
// for i = 1 to enchidnas do
61996: LD_ADDR_VAR 0 11
62000: PUSH
62001: DOUBLE
62002: LD_INT 1
62004: DEC
62005: ST_TO_ADDR
62006: LD_VAR 0 4
62010: PUSH
62011: FOR_TO
62012: IFFALSE 62059
// begin hc_class = 13 ;
62014: LD_ADDR_OWVAR 28
62018: PUSH
62019: LD_INT 13
62021: ST_TO_ADDR
// hc_gallery =  ;
62022: LD_ADDR_OWVAR 33
62026: PUSH
62027: LD_STRING 
62029: ST_TO_ADDR
// animal := CreateHuman ;
62030: LD_ADDR_VAR 0 12
62034: PUSH
62035: CALL_OW 44
62039: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62040: LD_VAR 0 12
62044: PPUSH
62045: LD_VAR 0 8
62049: PPUSH
62050: LD_INT 0
62052: PPUSH
62053: CALL 63761 0 3
// end ;
62057: GO 62011
62059: POP
62060: POP
// if fishes then
62061: LD_VAR 0 7
62065: IFFALSE 62132
// for i = 1 to fishes do
62067: LD_ADDR_VAR 0 11
62071: PUSH
62072: DOUBLE
62073: LD_INT 1
62075: DEC
62076: ST_TO_ADDR
62077: LD_VAR 0 7
62081: PUSH
62082: FOR_TO
62083: IFFALSE 62130
// begin hc_class = 20 ;
62085: LD_ADDR_OWVAR 28
62089: PUSH
62090: LD_INT 20
62092: ST_TO_ADDR
// hc_gallery =  ;
62093: LD_ADDR_OWVAR 33
62097: PUSH
62098: LD_STRING 
62100: ST_TO_ADDR
// animal := CreateHuman ;
62101: LD_ADDR_VAR 0 12
62105: PUSH
62106: CALL_OW 44
62110: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
62111: LD_VAR 0 12
62115: PPUSH
62116: LD_VAR 0 9
62120: PPUSH
62121: LD_INT 0
62123: PPUSH
62124: CALL 63761 0 3
// end ;
62128: GO 62082
62130: POP
62131: POP
// end ;
62132: LD_VAR 0 10
62136: RET
// export function WantHeal ( sci , unit ) ; begin
62137: LD_INT 0
62139: PPUSH
// if GetTaskList ( sci ) > 0 then
62140: LD_VAR 0 1
62144: PPUSH
62145: CALL_OW 437
62149: PUSH
62150: LD_INT 0
62152: GREATER
62153: IFFALSE 62223
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
62155: LD_VAR 0 1
62159: PPUSH
62160: CALL_OW 437
62164: PUSH
62165: LD_INT 1
62167: ARRAY
62168: PUSH
62169: LD_INT 1
62171: ARRAY
62172: PUSH
62173: LD_STRING l
62175: EQUAL
62176: PUSH
62177: LD_VAR 0 1
62181: PPUSH
62182: CALL_OW 437
62186: PUSH
62187: LD_INT 1
62189: ARRAY
62190: PUSH
62191: LD_INT 4
62193: ARRAY
62194: PUSH
62195: LD_VAR 0 2
62199: EQUAL
62200: AND
62201: IFFALSE 62213
// result := true else
62203: LD_ADDR_VAR 0 3
62207: PUSH
62208: LD_INT 1
62210: ST_TO_ADDR
62211: GO 62221
// result := false ;
62213: LD_ADDR_VAR 0 3
62217: PUSH
62218: LD_INT 0
62220: ST_TO_ADDR
// end else
62221: GO 62231
// result := false ;
62223: LD_ADDR_VAR 0 3
62227: PUSH
62228: LD_INT 0
62230: ST_TO_ADDR
// end ;
62231: LD_VAR 0 3
62235: RET
// export function HealTarget ( sci ) ; begin
62236: LD_INT 0
62238: PPUSH
// if not sci then
62239: LD_VAR 0 1
62243: NOT
62244: IFFALSE 62248
// exit ;
62246: GO 62313
// result := 0 ;
62248: LD_ADDR_VAR 0 2
62252: PUSH
62253: LD_INT 0
62255: ST_TO_ADDR
// if GetTaskList ( sci ) then
62256: LD_VAR 0 1
62260: PPUSH
62261: CALL_OW 437
62265: IFFALSE 62313
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
62267: LD_VAR 0 1
62271: PPUSH
62272: CALL_OW 437
62276: PUSH
62277: LD_INT 1
62279: ARRAY
62280: PUSH
62281: LD_INT 1
62283: ARRAY
62284: PUSH
62285: LD_STRING l
62287: EQUAL
62288: IFFALSE 62313
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
62290: LD_ADDR_VAR 0 2
62294: PUSH
62295: LD_VAR 0 1
62299: PPUSH
62300: CALL_OW 437
62304: PUSH
62305: LD_INT 1
62307: ARRAY
62308: PUSH
62309: LD_INT 4
62311: ARRAY
62312: ST_TO_ADDR
// end ;
62313: LD_VAR 0 2
62317: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
62318: LD_INT 0
62320: PPUSH
62321: PPUSH
62322: PPUSH
62323: PPUSH
// if not base_units then
62324: LD_VAR 0 1
62328: NOT
62329: IFFALSE 62333
// exit ;
62331: GO 62420
// result := false ;
62333: LD_ADDR_VAR 0 2
62337: PUSH
62338: LD_INT 0
62340: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
62341: LD_ADDR_VAR 0 5
62345: PUSH
62346: LD_VAR 0 1
62350: PPUSH
62351: LD_INT 21
62353: PUSH
62354: LD_INT 3
62356: PUSH
62357: EMPTY
62358: LIST
62359: LIST
62360: PPUSH
62361: CALL_OW 72
62365: ST_TO_ADDR
// if not tmp then
62366: LD_VAR 0 5
62370: NOT
62371: IFFALSE 62375
// exit ;
62373: GO 62420
// for i in tmp do
62375: LD_ADDR_VAR 0 3
62379: PUSH
62380: LD_VAR 0 5
62384: PUSH
62385: FOR_IN
62386: IFFALSE 62418
// begin result := EnemyInRange ( i , 22 ) ;
62388: LD_ADDR_VAR 0 2
62392: PUSH
62393: LD_VAR 0 3
62397: PPUSH
62398: LD_INT 22
62400: PPUSH
62401: CALL 59998 0 2
62405: ST_TO_ADDR
// if result then
62406: LD_VAR 0 2
62410: IFFALSE 62416
// exit ;
62412: POP
62413: POP
62414: GO 62420
// end ;
62416: GO 62385
62418: POP
62419: POP
// end ;
62420: LD_VAR 0 2
62424: RET
// export function FilterByTag ( units , tag ) ; begin
62425: LD_INT 0
62427: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
62428: LD_ADDR_VAR 0 3
62432: PUSH
62433: LD_VAR 0 1
62437: PPUSH
62438: LD_INT 120
62440: PUSH
62441: LD_VAR 0 2
62445: PUSH
62446: EMPTY
62447: LIST
62448: LIST
62449: PPUSH
62450: CALL_OW 72
62454: ST_TO_ADDR
// end ;
62455: LD_VAR 0 3
62459: RET
// export function IsDriver ( un ) ; begin
62460: LD_INT 0
62462: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
62463: LD_ADDR_VAR 0 2
62467: PUSH
62468: LD_VAR 0 1
62472: PUSH
62473: LD_INT 55
62475: PUSH
62476: EMPTY
62477: LIST
62478: PPUSH
62479: CALL_OW 69
62483: IN
62484: ST_TO_ADDR
// end ;
62485: LD_VAR 0 2
62489: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
62490: LD_INT 0
62492: PPUSH
62493: PPUSH
// list := [ ] ;
62494: LD_ADDR_VAR 0 5
62498: PUSH
62499: EMPTY
62500: ST_TO_ADDR
// case d of 0 :
62501: LD_VAR 0 3
62505: PUSH
62506: LD_INT 0
62508: DOUBLE
62509: EQUAL
62510: IFTRUE 62514
62512: GO 62647
62514: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
62515: LD_ADDR_VAR 0 5
62519: PUSH
62520: LD_VAR 0 1
62524: PUSH
62525: LD_INT 4
62527: MINUS
62528: PUSH
62529: LD_VAR 0 2
62533: PUSH
62534: LD_INT 4
62536: MINUS
62537: PUSH
62538: LD_INT 2
62540: PUSH
62541: EMPTY
62542: LIST
62543: LIST
62544: LIST
62545: PUSH
62546: LD_VAR 0 1
62550: PUSH
62551: LD_INT 3
62553: MINUS
62554: PUSH
62555: LD_VAR 0 2
62559: PUSH
62560: LD_INT 1
62562: PUSH
62563: EMPTY
62564: LIST
62565: LIST
62566: LIST
62567: PUSH
62568: LD_VAR 0 1
62572: PUSH
62573: LD_INT 4
62575: PLUS
62576: PUSH
62577: LD_VAR 0 2
62581: PUSH
62582: LD_INT 4
62584: PUSH
62585: EMPTY
62586: LIST
62587: LIST
62588: LIST
62589: PUSH
62590: LD_VAR 0 1
62594: PUSH
62595: LD_INT 3
62597: PLUS
62598: PUSH
62599: LD_VAR 0 2
62603: PUSH
62604: LD_INT 3
62606: PLUS
62607: PUSH
62608: LD_INT 5
62610: PUSH
62611: EMPTY
62612: LIST
62613: LIST
62614: LIST
62615: PUSH
62616: LD_VAR 0 1
62620: PUSH
62621: LD_VAR 0 2
62625: PUSH
62626: LD_INT 4
62628: PLUS
62629: PUSH
62630: LD_INT 0
62632: PUSH
62633: EMPTY
62634: LIST
62635: LIST
62636: LIST
62637: PUSH
62638: EMPTY
62639: LIST
62640: LIST
62641: LIST
62642: LIST
62643: LIST
62644: ST_TO_ADDR
// end ; 1 :
62645: GO 63345
62647: LD_INT 1
62649: DOUBLE
62650: EQUAL
62651: IFTRUE 62655
62653: GO 62788
62655: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
62656: LD_ADDR_VAR 0 5
62660: PUSH
62661: LD_VAR 0 1
62665: PUSH
62666: LD_VAR 0 2
62670: PUSH
62671: LD_INT 4
62673: MINUS
62674: PUSH
62675: LD_INT 3
62677: PUSH
62678: EMPTY
62679: LIST
62680: LIST
62681: LIST
62682: PUSH
62683: LD_VAR 0 1
62687: PUSH
62688: LD_INT 3
62690: MINUS
62691: PUSH
62692: LD_VAR 0 2
62696: PUSH
62697: LD_INT 3
62699: MINUS
62700: PUSH
62701: LD_INT 2
62703: PUSH
62704: EMPTY
62705: LIST
62706: LIST
62707: LIST
62708: PUSH
62709: LD_VAR 0 1
62713: PUSH
62714: LD_INT 4
62716: MINUS
62717: PUSH
62718: LD_VAR 0 2
62722: PUSH
62723: LD_INT 1
62725: PUSH
62726: EMPTY
62727: LIST
62728: LIST
62729: LIST
62730: PUSH
62731: LD_VAR 0 1
62735: PUSH
62736: LD_VAR 0 2
62740: PUSH
62741: LD_INT 3
62743: PLUS
62744: PUSH
62745: LD_INT 0
62747: PUSH
62748: EMPTY
62749: LIST
62750: LIST
62751: LIST
62752: PUSH
62753: LD_VAR 0 1
62757: PUSH
62758: LD_INT 4
62760: PLUS
62761: PUSH
62762: LD_VAR 0 2
62766: PUSH
62767: LD_INT 4
62769: PLUS
62770: PUSH
62771: LD_INT 5
62773: PUSH
62774: EMPTY
62775: LIST
62776: LIST
62777: LIST
62778: PUSH
62779: EMPTY
62780: LIST
62781: LIST
62782: LIST
62783: LIST
62784: LIST
62785: ST_TO_ADDR
// end ; 2 :
62786: GO 63345
62788: LD_INT 2
62790: DOUBLE
62791: EQUAL
62792: IFTRUE 62796
62794: GO 62925
62796: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
62797: LD_ADDR_VAR 0 5
62801: PUSH
62802: LD_VAR 0 1
62806: PUSH
62807: LD_VAR 0 2
62811: PUSH
62812: LD_INT 3
62814: MINUS
62815: PUSH
62816: LD_INT 3
62818: PUSH
62819: EMPTY
62820: LIST
62821: LIST
62822: LIST
62823: PUSH
62824: LD_VAR 0 1
62828: PUSH
62829: LD_INT 4
62831: PLUS
62832: PUSH
62833: LD_VAR 0 2
62837: PUSH
62838: LD_INT 4
62840: PUSH
62841: EMPTY
62842: LIST
62843: LIST
62844: LIST
62845: PUSH
62846: LD_VAR 0 1
62850: PUSH
62851: LD_VAR 0 2
62855: PUSH
62856: LD_INT 4
62858: PLUS
62859: PUSH
62860: LD_INT 0
62862: PUSH
62863: EMPTY
62864: LIST
62865: LIST
62866: LIST
62867: PUSH
62868: LD_VAR 0 1
62872: PUSH
62873: LD_INT 3
62875: MINUS
62876: PUSH
62877: LD_VAR 0 2
62881: PUSH
62882: LD_INT 1
62884: PUSH
62885: EMPTY
62886: LIST
62887: LIST
62888: LIST
62889: PUSH
62890: LD_VAR 0 1
62894: PUSH
62895: LD_INT 4
62897: MINUS
62898: PUSH
62899: LD_VAR 0 2
62903: PUSH
62904: LD_INT 4
62906: MINUS
62907: PUSH
62908: LD_INT 2
62910: PUSH
62911: EMPTY
62912: LIST
62913: LIST
62914: LIST
62915: PUSH
62916: EMPTY
62917: LIST
62918: LIST
62919: LIST
62920: LIST
62921: LIST
62922: ST_TO_ADDR
// end ; 3 :
62923: GO 63345
62925: LD_INT 3
62927: DOUBLE
62928: EQUAL
62929: IFTRUE 62933
62931: GO 63066
62933: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
62934: LD_ADDR_VAR 0 5
62938: PUSH
62939: LD_VAR 0 1
62943: PUSH
62944: LD_INT 3
62946: PLUS
62947: PUSH
62948: LD_VAR 0 2
62952: PUSH
62953: LD_INT 4
62955: PUSH
62956: EMPTY
62957: LIST
62958: LIST
62959: LIST
62960: PUSH
62961: LD_VAR 0 1
62965: PUSH
62966: LD_INT 4
62968: PLUS
62969: PUSH
62970: LD_VAR 0 2
62974: PUSH
62975: LD_INT 4
62977: PLUS
62978: PUSH
62979: LD_INT 5
62981: PUSH
62982: EMPTY
62983: LIST
62984: LIST
62985: LIST
62986: PUSH
62987: LD_VAR 0 1
62991: PUSH
62992: LD_INT 4
62994: MINUS
62995: PUSH
62996: LD_VAR 0 2
63000: PUSH
63001: LD_INT 1
63003: PUSH
63004: EMPTY
63005: LIST
63006: LIST
63007: LIST
63008: PUSH
63009: LD_VAR 0 1
63013: PUSH
63014: LD_VAR 0 2
63018: PUSH
63019: LD_INT 4
63021: MINUS
63022: PUSH
63023: LD_INT 3
63025: PUSH
63026: EMPTY
63027: LIST
63028: LIST
63029: LIST
63030: PUSH
63031: LD_VAR 0 1
63035: PUSH
63036: LD_INT 3
63038: MINUS
63039: PUSH
63040: LD_VAR 0 2
63044: PUSH
63045: LD_INT 3
63047: MINUS
63048: PUSH
63049: LD_INT 2
63051: PUSH
63052: EMPTY
63053: LIST
63054: LIST
63055: LIST
63056: PUSH
63057: EMPTY
63058: LIST
63059: LIST
63060: LIST
63061: LIST
63062: LIST
63063: ST_TO_ADDR
// end ; 4 :
63064: GO 63345
63066: LD_INT 4
63068: DOUBLE
63069: EQUAL
63070: IFTRUE 63074
63072: GO 63207
63074: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
63075: LD_ADDR_VAR 0 5
63079: PUSH
63080: LD_VAR 0 1
63084: PUSH
63085: LD_VAR 0 2
63089: PUSH
63090: LD_INT 4
63092: PLUS
63093: PUSH
63094: LD_INT 0
63096: PUSH
63097: EMPTY
63098: LIST
63099: LIST
63100: LIST
63101: PUSH
63102: LD_VAR 0 1
63106: PUSH
63107: LD_INT 3
63109: PLUS
63110: PUSH
63111: LD_VAR 0 2
63115: PUSH
63116: LD_INT 3
63118: PLUS
63119: PUSH
63120: LD_INT 5
63122: PUSH
63123: EMPTY
63124: LIST
63125: LIST
63126: LIST
63127: PUSH
63128: LD_VAR 0 1
63132: PUSH
63133: LD_INT 4
63135: PLUS
63136: PUSH
63137: LD_VAR 0 2
63141: PUSH
63142: LD_INT 4
63144: PUSH
63145: EMPTY
63146: LIST
63147: LIST
63148: LIST
63149: PUSH
63150: LD_VAR 0 1
63154: PUSH
63155: LD_VAR 0 2
63159: PUSH
63160: LD_INT 3
63162: MINUS
63163: PUSH
63164: LD_INT 3
63166: PUSH
63167: EMPTY
63168: LIST
63169: LIST
63170: LIST
63171: PUSH
63172: LD_VAR 0 1
63176: PUSH
63177: LD_INT 4
63179: MINUS
63180: PUSH
63181: LD_VAR 0 2
63185: PUSH
63186: LD_INT 4
63188: MINUS
63189: PUSH
63190: LD_INT 2
63192: PUSH
63193: EMPTY
63194: LIST
63195: LIST
63196: LIST
63197: PUSH
63198: EMPTY
63199: LIST
63200: LIST
63201: LIST
63202: LIST
63203: LIST
63204: ST_TO_ADDR
// end ; 5 :
63205: GO 63345
63207: LD_INT 5
63209: DOUBLE
63210: EQUAL
63211: IFTRUE 63215
63213: GO 63344
63215: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
63216: LD_ADDR_VAR 0 5
63220: PUSH
63221: LD_VAR 0 1
63225: PUSH
63226: LD_INT 4
63228: MINUS
63229: PUSH
63230: LD_VAR 0 2
63234: PUSH
63235: LD_INT 1
63237: PUSH
63238: EMPTY
63239: LIST
63240: LIST
63241: LIST
63242: PUSH
63243: LD_VAR 0 1
63247: PUSH
63248: LD_VAR 0 2
63252: PUSH
63253: LD_INT 4
63255: MINUS
63256: PUSH
63257: LD_INT 3
63259: PUSH
63260: EMPTY
63261: LIST
63262: LIST
63263: LIST
63264: PUSH
63265: LD_VAR 0 1
63269: PUSH
63270: LD_INT 4
63272: PLUS
63273: PUSH
63274: LD_VAR 0 2
63278: PUSH
63279: LD_INT 4
63281: PLUS
63282: PUSH
63283: LD_INT 5
63285: PUSH
63286: EMPTY
63287: LIST
63288: LIST
63289: LIST
63290: PUSH
63291: LD_VAR 0 1
63295: PUSH
63296: LD_INT 3
63298: PLUS
63299: PUSH
63300: LD_VAR 0 2
63304: PUSH
63305: LD_INT 4
63307: PUSH
63308: EMPTY
63309: LIST
63310: LIST
63311: LIST
63312: PUSH
63313: LD_VAR 0 1
63317: PUSH
63318: LD_VAR 0 2
63322: PUSH
63323: LD_INT 3
63325: PLUS
63326: PUSH
63327: LD_INT 0
63329: PUSH
63330: EMPTY
63331: LIST
63332: LIST
63333: LIST
63334: PUSH
63335: EMPTY
63336: LIST
63337: LIST
63338: LIST
63339: LIST
63340: LIST
63341: ST_TO_ADDR
// end ; end ;
63342: GO 63345
63344: POP
// result := list ;
63345: LD_ADDR_VAR 0 4
63349: PUSH
63350: LD_VAR 0 5
63354: ST_TO_ADDR
// end ;
63355: LD_VAR 0 4
63359: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
63360: LD_INT 0
63362: PPUSH
63363: PPUSH
63364: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
63365: LD_VAR 0 1
63369: NOT
63370: PUSH
63371: LD_VAR 0 2
63375: PUSH
63376: LD_INT 1
63378: PUSH
63379: LD_INT 2
63381: PUSH
63382: LD_INT 3
63384: PUSH
63385: LD_INT 4
63387: PUSH
63388: EMPTY
63389: LIST
63390: LIST
63391: LIST
63392: LIST
63393: IN
63394: NOT
63395: OR
63396: IFFALSE 63400
// exit ;
63398: GO 63483
// tmp := [ ] ;
63400: LD_ADDR_VAR 0 5
63404: PUSH
63405: EMPTY
63406: ST_TO_ADDR
// for i in units do
63407: LD_ADDR_VAR 0 4
63411: PUSH
63412: LD_VAR 0 1
63416: PUSH
63417: FOR_IN
63418: IFFALSE 63452
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
63420: LD_ADDR_VAR 0 5
63424: PUSH
63425: LD_VAR 0 5
63429: PPUSH
63430: LD_VAR 0 4
63434: PPUSH
63435: LD_VAR 0 2
63439: PPUSH
63440: CALL_OW 259
63444: PPUSH
63445: CALL 64856 0 2
63449: ST_TO_ADDR
63450: GO 63417
63452: POP
63453: POP
// if not tmp then
63454: LD_VAR 0 5
63458: NOT
63459: IFFALSE 63463
// exit ;
63461: GO 63483
// result := SortListByListDesc ( units , tmp ) ;
63463: LD_ADDR_VAR 0 3
63467: PUSH
63468: LD_VAR 0 1
63472: PPUSH
63473: LD_VAR 0 5
63477: PPUSH
63478: CALL_OW 77
63482: ST_TO_ADDR
// end ;
63483: LD_VAR 0 3
63487: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
63488: LD_INT 0
63490: PPUSH
63491: PPUSH
63492: PPUSH
// result := false ;
63493: LD_ADDR_VAR 0 3
63497: PUSH
63498: LD_INT 0
63500: ST_TO_ADDR
// if not building then
63501: LD_VAR 0 2
63505: NOT
63506: IFFALSE 63510
// exit ;
63508: GO 63648
// x := GetX ( building ) ;
63510: LD_ADDR_VAR 0 4
63514: PUSH
63515: LD_VAR 0 2
63519: PPUSH
63520: CALL_OW 250
63524: ST_TO_ADDR
// y := GetY ( building ) ;
63525: LD_ADDR_VAR 0 5
63529: PUSH
63530: LD_VAR 0 2
63534: PPUSH
63535: CALL_OW 251
63539: ST_TO_ADDR
// if not x or not y then
63540: LD_VAR 0 4
63544: NOT
63545: PUSH
63546: LD_VAR 0 5
63550: NOT
63551: OR
63552: IFFALSE 63556
// exit ;
63554: GO 63648
// if GetTaskList ( unit ) then
63556: LD_VAR 0 1
63560: PPUSH
63561: CALL_OW 437
63565: IFFALSE 63648
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63567: LD_STRING e
63569: PUSH
63570: LD_VAR 0 1
63574: PPUSH
63575: CALL_OW 437
63579: PUSH
63580: LD_INT 1
63582: ARRAY
63583: PUSH
63584: LD_INT 1
63586: ARRAY
63587: EQUAL
63588: PUSH
63589: LD_VAR 0 4
63593: PUSH
63594: LD_VAR 0 1
63598: PPUSH
63599: CALL_OW 437
63603: PUSH
63604: LD_INT 1
63606: ARRAY
63607: PUSH
63608: LD_INT 2
63610: ARRAY
63611: EQUAL
63612: AND
63613: PUSH
63614: LD_VAR 0 5
63618: PUSH
63619: LD_VAR 0 1
63623: PPUSH
63624: CALL_OW 437
63628: PUSH
63629: LD_INT 1
63631: ARRAY
63632: PUSH
63633: LD_INT 3
63635: ARRAY
63636: EQUAL
63637: AND
63638: IFFALSE 63648
// result := true end ;
63640: LD_ADDR_VAR 0 3
63644: PUSH
63645: LD_INT 1
63647: ST_TO_ADDR
// end ;
63648: LD_VAR 0 3
63652: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
63653: LD_INT 0
63655: PPUSH
// result := false ;
63656: LD_ADDR_VAR 0 4
63660: PUSH
63661: LD_INT 0
63663: ST_TO_ADDR
// if GetTaskList ( unit ) then
63664: LD_VAR 0 1
63668: PPUSH
63669: CALL_OW 437
63673: IFFALSE 63756
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63675: LD_STRING M
63677: PUSH
63678: LD_VAR 0 1
63682: PPUSH
63683: CALL_OW 437
63687: PUSH
63688: LD_INT 1
63690: ARRAY
63691: PUSH
63692: LD_INT 1
63694: ARRAY
63695: EQUAL
63696: PUSH
63697: LD_VAR 0 2
63701: PUSH
63702: LD_VAR 0 1
63706: PPUSH
63707: CALL_OW 437
63711: PUSH
63712: LD_INT 1
63714: ARRAY
63715: PUSH
63716: LD_INT 2
63718: ARRAY
63719: EQUAL
63720: AND
63721: PUSH
63722: LD_VAR 0 3
63726: PUSH
63727: LD_VAR 0 1
63731: PPUSH
63732: CALL_OW 437
63736: PUSH
63737: LD_INT 1
63739: ARRAY
63740: PUSH
63741: LD_INT 3
63743: ARRAY
63744: EQUAL
63745: AND
63746: IFFALSE 63756
// result := true ;
63748: LD_ADDR_VAR 0 4
63752: PUSH
63753: LD_INT 1
63755: ST_TO_ADDR
// end ; end ;
63756: LD_VAR 0 4
63760: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
63761: LD_INT 0
63763: PPUSH
63764: PPUSH
63765: PPUSH
63766: PPUSH
// if not unit or not area then
63767: LD_VAR 0 1
63771: NOT
63772: PUSH
63773: LD_VAR 0 2
63777: NOT
63778: OR
63779: IFFALSE 63783
// exit ;
63781: GO 63959
// tmp := AreaToList ( area , i ) ;
63783: LD_ADDR_VAR 0 6
63787: PUSH
63788: LD_VAR 0 2
63792: PPUSH
63793: LD_VAR 0 5
63797: PPUSH
63798: CALL_OW 517
63802: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
63803: LD_ADDR_VAR 0 5
63807: PUSH
63808: DOUBLE
63809: LD_INT 1
63811: DEC
63812: ST_TO_ADDR
63813: LD_VAR 0 6
63817: PUSH
63818: LD_INT 1
63820: ARRAY
63821: PUSH
63822: FOR_TO
63823: IFFALSE 63957
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
63825: LD_ADDR_VAR 0 7
63829: PUSH
63830: LD_VAR 0 6
63834: PUSH
63835: LD_INT 1
63837: ARRAY
63838: PUSH
63839: LD_VAR 0 5
63843: ARRAY
63844: PUSH
63845: LD_VAR 0 6
63849: PUSH
63850: LD_INT 2
63852: ARRAY
63853: PUSH
63854: LD_VAR 0 5
63858: ARRAY
63859: PUSH
63860: EMPTY
63861: LIST
63862: LIST
63863: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
63864: LD_INT 92
63866: PUSH
63867: LD_VAR 0 7
63871: PUSH
63872: LD_INT 1
63874: ARRAY
63875: PUSH
63876: LD_VAR 0 7
63880: PUSH
63881: LD_INT 2
63883: ARRAY
63884: PUSH
63885: LD_INT 2
63887: PUSH
63888: EMPTY
63889: LIST
63890: LIST
63891: LIST
63892: LIST
63893: PPUSH
63894: CALL_OW 69
63898: PUSH
63899: LD_INT 0
63901: EQUAL
63902: IFFALSE 63955
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
63904: LD_VAR 0 1
63908: PPUSH
63909: LD_VAR 0 7
63913: PUSH
63914: LD_INT 1
63916: ARRAY
63917: PPUSH
63918: LD_VAR 0 7
63922: PUSH
63923: LD_INT 2
63925: ARRAY
63926: PPUSH
63927: LD_VAR 0 3
63931: PPUSH
63932: CALL_OW 48
// result := IsPlaced ( unit ) ;
63936: LD_ADDR_VAR 0 4
63940: PUSH
63941: LD_VAR 0 1
63945: PPUSH
63946: CALL_OW 305
63950: ST_TO_ADDR
// exit ;
63951: POP
63952: POP
63953: GO 63959
// end ; end ;
63955: GO 63822
63957: POP
63958: POP
// end ;
63959: LD_VAR 0 4
63963: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
63964: LD_INT 0
63966: PPUSH
63967: PPUSH
63968: PPUSH
// if not side or side > 8 then
63969: LD_VAR 0 1
63973: NOT
63974: PUSH
63975: LD_VAR 0 1
63979: PUSH
63980: LD_INT 8
63982: GREATER
63983: OR
63984: IFFALSE 63988
// exit ;
63986: GO 64175
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
63988: LD_ADDR_VAR 0 4
63992: PUSH
63993: LD_INT 22
63995: PUSH
63996: LD_VAR 0 1
64000: PUSH
64001: EMPTY
64002: LIST
64003: LIST
64004: PUSH
64005: LD_INT 21
64007: PUSH
64008: LD_INT 3
64010: PUSH
64011: EMPTY
64012: LIST
64013: LIST
64014: PUSH
64015: EMPTY
64016: LIST
64017: LIST
64018: PPUSH
64019: CALL_OW 69
64023: ST_TO_ADDR
// if not tmp then
64024: LD_VAR 0 4
64028: NOT
64029: IFFALSE 64033
// exit ;
64031: GO 64175
// enable_addtolog := true ;
64033: LD_ADDR_OWVAR 81
64037: PUSH
64038: LD_INT 1
64040: ST_TO_ADDR
// AddToLog ( [ ) ;
64041: LD_STRING [
64043: PPUSH
64044: CALL_OW 561
// for i in tmp do
64048: LD_ADDR_VAR 0 3
64052: PUSH
64053: LD_VAR 0 4
64057: PUSH
64058: FOR_IN
64059: IFFALSE 64166
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
64061: LD_STRING [
64063: PUSH
64064: LD_VAR 0 3
64068: PPUSH
64069: CALL_OW 266
64073: STR
64074: PUSH
64075: LD_STRING , 
64077: STR
64078: PUSH
64079: LD_VAR 0 3
64083: PPUSH
64084: CALL_OW 250
64088: STR
64089: PUSH
64090: LD_STRING , 
64092: STR
64093: PUSH
64094: LD_VAR 0 3
64098: PPUSH
64099: CALL_OW 251
64103: STR
64104: PUSH
64105: LD_STRING , 
64107: STR
64108: PUSH
64109: LD_VAR 0 3
64113: PPUSH
64114: CALL_OW 254
64118: STR
64119: PUSH
64120: LD_STRING , 
64122: STR
64123: PUSH
64124: LD_VAR 0 3
64128: PPUSH
64129: LD_INT 1
64131: PPUSH
64132: CALL_OW 268
64136: STR
64137: PUSH
64138: LD_STRING , 
64140: STR
64141: PUSH
64142: LD_VAR 0 3
64146: PPUSH
64147: LD_INT 2
64149: PPUSH
64150: CALL_OW 268
64154: STR
64155: PUSH
64156: LD_STRING ],
64158: STR
64159: PPUSH
64160: CALL_OW 561
// end ;
64164: GO 64058
64166: POP
64167: POP
// AddToLog ( ]; ) ;
64168: LD_STRING ];
64170: PPUSH
64171: CALL_OW 561
// end ;
64175: LD_VAR 0 2
64179: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
64180: LD_INT 0
64182: PPUSH
64183: PPUSH
64184: PPUSH
64185: PPUSH
64186: PPUSH
// if not area or not rate or not max then
64187: LD_VAR 0 1
64191: NOT
64192: PUSH
64193: LD_VAR 0 2
64197: NOT
64198: OR
64199: PUSH
64200: LD_VAR 0 4
64204: NOT
64205: OR
64206: IFFALSE 64210
// exit ;
64208: GO 64399
// while 1 do
64210: LD_INT 1
64212: IFFALSE 64399
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
64214: LD_ADDR_VAR 0 9
64218: PUSH
64219: LD_VAR 0 1
64223: PPUSH
64224: LD_INT 1
64226: PPUSH
64227: CALL_OW 287
64231: PUSH
64232: LD_INT 10
64234: MUL
64235: ST_TO_ADDR
// r := rate / 10 ;
64236: LD_ADDR_VAR 0 7
64240: PUSH
64241: LD_VAR 0 2
64245: PUSH
64246: LD_INT 10
64248: DIVREAL
64249: ST_TO_ADDR
// time := 1 1$00 ;
64250: LD_ADDR_VAR 0 8
64254: PUSH
64255: LD_INT 2100
64257: ST_TO_ADDR
// if amount < min then
64258: LD_VAR 0 9
64262: PUSH
64263: LD_VAR 0 3
64267: LESS
64268: IFFALSE 64286
// r := r * 2 else
64270: LD_ADDR_VAR 0 7
64274: PUSH
64275: LD_VAR 0 7
64279: PUSH
64280: LD_INT 2
64282: MUL
64283: ST_TO_ADDR
64284: GO 64312
// if amount > max then
64286: LD_VAR 0 9
64290: PUSH
64291: LD_VAR 0 4
64295: GREATER
64296: IFFALSE 64312
// r := r / 2 ;
64298: LD_ADDR_VAR 0 7
64302: PUSH
64303: LD_VAR 0 7
64307: PUSH
64308: LD_INT 2
64310: DIVREAL
64311: ST_TO_ADDR
// time := time / r ;
64312: LD_ADDR_VAR 0 8
64316: PUSH
64317: LD_VAR 0 8
64321: PUSH
64322: LD_VAR 0 7
64326: DIVREAL
64327: ST_TO_ADDR
// if time < 0 then
64328: LD_VAR 0 8
64332: PUSH
64333: LD_INT 0
64335: LESS
64336: IFFALSE 64353
// time := time * - 1 ;
64338: LD_ADDR_VAR 0 8
64342: PUSH
64343: LD_VAR 0 8
64347: PUSH
64348: LD_INT 1
64350: NEG
64351: MUL
64352: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
64353: LD_VAR 0 8
64357: PUSH
64358: LD_INT 35
64360: PPUSH
64361: LD_INT 875
64363: PPUSH
64364: CALL_OW 12
64368: PLUS
64369: PPUSH
64370: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
64374: LD_INT 1
64376: PPUSH
64377: LD_INT 5
64379: PPUSH
64380: CALL_OW 12
64384: PPUSH
64385: LD_VAR 0 1
64389: PPUSH
64390: LD_INT 1
64392: PPUSH
64393: CALL_OW 55
// end ;
64397: GO 64210
// end ;
64399: LD_VAR 0 5
64403: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
64404: LD_INT 0
64406: PPUSH
64407: PPUSH
64408: PPUSH
64409: PPUSH
64410: PPUSH
64411: PPUSH
64412: PPUSH
64413: PPUSH
// if not turrets or not factories then
64414: LD_VAR 0 1
64418: NOT
64419: PUSH
64420: LD_VAR 0 2
64424: NOT
64425: OR
64426: IFFALSE 64430
// exit ;
64428: GO 64737
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
64430: LD_ADDR_VAR 0 10
64434: PUSH
64435: LD_INT 5
64437: PUSH
64438: LD_INT 6
64440: PUSH
64441: EMPTY
64442: LIST
64443: LIST
64444: PUSH
64445: LD_INT 2
64447: PUSH
64448: LD_INT 4
64450: PUSH
64451: EMPTY
64452: LIST
64453: LIST
64454: PUSH
64455: LD_INT 3
64457: PUSH
64458: LD_INT 5
64460: PUSH
64461: EMPTY
64462: LIST
64463: LIST
64464: PUSH
64465: EMPTY
64466: LIST
64467: LIST
64468: LIST
64469: PUSH
64470: LD_INT 24
64472: PUSH
64473: LD_INT 25
64475: PUSH
64476: EMPTY
64477: LIST
64478: LIST
64479: PUSH
64480: LD_INT 23
64482: PUSH
64483: LD_INT 27
64485: PUSH
64486: EMPTY
64487: LIST
64488: LIST
64489: PUSH
64490: EMPTY
64491: LIST
64492: LIST
64493: PUSH
64494: LD_INT 42
64496: PUSH
64497: LD_INT 43
64499: PUSH
64500: EMPTY
64501: LIST
64502: LIST
64503: PUSH
64504: LD_INT 44
64506: PUSH
64507: LD_INT 46
64509: PUSH
64510: EMPTY
64511: LIST
64512: LIST
64513: PUSH
64514: LD_INT 45
64516: PUSH
64517: LD_INT 47
64519: PUSH
64520: EMPTY
64521: LIST
64522: LIST
64523: PUSH
64524: EMPTY
64525: LIST
64526: LIST
64527: LIST
64528: PUSH
64529: EMPTY
64530: LIST
64531: LIST
64532: LIST
64533: ST_TO_ADDR
// result := [ ] ;
64534: LD_ADDR_VAR 0 3
64538: PUSH
64539: EMPTY
64540: ST_TO_ADDR
// for i in turrets do
64541: LD_ADDR_VAR 0 4
64545: PUSH
64546: LD_VAR 0 1
64550: PUSH
64551: FOR_IN
64552: IFFALSE 64735
// begin nat := GetNation ( i ) ;
64554: LD_ADDR_VAR 0 7
64558: PUSH
64559: LD_VAR 0 4
64563: PPUSH
64564: CALL_OW 248
64568: ST_TO_ADDR
// weapon := 0 ;
64569: LD_ADDR_VAR 0 8
64573: PUSH
64574: LD_INT 0
64576: ST_TO_ADDR
// if not nat then
64577: LD_VAR 0 7
64581: NOT
64582: IFFALSE 64586
// continue ;
64584: GO 64551
// for j in list [ nat ] do
64586: LD_ADDR_VAR 0 5
64590: PUSH
64591: LD_VAR 0 10
64595: PUSH
64596: LD_VAR 0 7
64600: ARRAY
64601: PUSH
64602: FOR_IN
64603: IFFALSE 64644
// if GetBWeapon ( i ) = j [ 1 ] then
64605: LD_VAR 0 4
64609: PPUSH
64610: CALL_OW 269
64614: PUSH
64615: LD_VAR 0 5
64619: PUSH
64620: LD_INT 1
64622: ARRAY
64623: EQUAL
64624: IFFALSE 64642
// begin weapon := j [ 2 ] ;
64626: LD_ADDR_VAR 0 8
64630: PUSH
64631: LD_VAR 0 5
64635: PUSH
64636: LD_INT 2
64638: ARRAY
64639: ST_TO_ADDR
// break ;
64640: GO 64644
// end ;
64642: GO 64602
64644: POP
64645: POP
// if not weapon then
64646: LD_VAR 0 8
64650: NOT
64651: IFFALSE 64655
// continue ;
64653: GO 64551
// for k in factories do
64655: LD_ADDR_VAR 0 6
64659: PUSH
64660: LD_VAR 0 2
64664: PUSH
64665: FOR_IN
64666: IFFALSE 64731
// begin weapons := AvailableWeaponList ( k ) ;
64668: LD_ADDR_VAR 0 9
64672: PUSH
64673: LD_VAR 0 6
64677: PPUSH
64678: CALL_OW 478
64682: ST_TO_ADDR
// if not weapons then
64683: LD_VAR 0 9
64687: NOT
64688: IFFALSE 64692
// continue ;
64690: GO 64665
// if weapon in weapons then
64692: LD_VAR 0 8
64696: PUSH
64697: LD_VAR 0 9
64701: IN
64702: IFFALSE 64729
// begin result := [ i , weapon ] ;
64704: LD_ADDR_VAR 0 3
64708: PUSH
64709: LD_VAR 0 4
64713: PUSH
64714: LD_VAR 0 8
64718: PUSH
64719: EMPTY
64720: LIST
64721: LIST
64722: ST_TO_ADDR
// exit ;
64723: POP
64724: POP
64725: POP
64726: POP
64727: GO 64737
// end ; end ;
64729: GO 64665
64731: POP
64732: POP
// end ;
64733: GO 64551
64735: POP
64736: POP
// end ;
64737: LD_VAR 0 3
64741: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
64742: LD_INT 0
64744: PPUSH
// if not side or side > 8 then
64745: LD_VAR 0 3
64749: NOT
64750: PUSH
64751: LD_VAR 0 3
64755: PUSH
64756: LD_INT 8
64758: GREATER
64759: OR
64760: IFFALSE 64764
// exit ;
64762: GO 64823
// if not range then
64764: LD_VAR 0 4
64768: NOT
64769: IFFALSE 64780
// range := - 12 ;
64771: LD_ADDR_VAR 0 4
64775: PUSH
64776: LD_INT 12
64778: NEG
64779: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
64780: LD_VAR 0 1
64784: PPUSH
64785: LD_VAR 0 2
64789: PPUSH
64790: LD_VAR 0 3
64794: PPUSH
64795: LD_VAR 0 4
64799: PPUSH
64800: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
64804: LD_VAR 0 1
64808: PPUSH
64809: LD_VAR 0 2
64813: PPUSH
64814: LD_VAR 0 3
64818: PPUSH
64819: CALL_OW 331
// end ;
64823: LD_VAR 0 5
64827: RET
// export function Video ( mode ) ; begin
64828: LD_INT 0
64830: PPUSH
// ingame_video = mode ;
64831: LD_ADDR_OWVAR 52
64835: PUSH
64836: LD_VAR 0 1
64840: ST_TO_ADDR
// interface_hidden = mode ;
64841: LD_ADDR_OWVAR 54
64845: PUSH
64846: LD_VAR 0 1
64850: ST_TO_ADDR
// end ;
64851: LD_VAR 0 2
64855: RET
// export function Join ( array , element ) ; begin
64856: LD_INT 0
64858: PPUSH
// result := Replace ( array , array + 1 , element ) ;
64859: LD_ADDR_VAR 0 3
64863: PUSH
64864: LD_VAR 0 1
64868: PPUSH
64869: LD_VAR 0 1
64873: PUSH
64874: LD_INT 1
64876: PLUS
64877: PPUSH
64878: LD_VAR 0 2
64882: PPUSH
64883: CALL_OW 1
64887: ST_TO_ADDR
// end ;
64888: LD_VAR 0 3
64892: RET
// export function JoinUnion ( array , element ) ; begin
64893: LD_INT 0
64895: PPUSH
// result := array union element ;
64896: LD_ADDR_VAR 0 3
64900: PUSH
64901: LD_VAR 0 1
64905: PUSH
64906: LD_VAR 0 2
64910: UNION
64911: ST_TO_ADDR
// end ;
64912: LD_VAR 0 3
64916: RET
// export function GetBehemoths ( side ) ; begin
64917: LD_INT 0
64919: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
64920: LD_ADDR_VAR 0 2
64924: PUSH
64925: LD_INT 22
64927: PUSH
64928: LD_VAR 0 1
64932: PUSH
64933: EMPTY
64934: LIST
64935: LIST
64936: PUSH
64937: LD_INT 31
64939: PUSH
64940: LD_INT 25
64942: PUSH
64943: EMPTY
64944: LIST
64945: LIST
64946: PUSH
64947: EMPTY
64948: LIST
64949: LIST
64950: PPUSH
64951: CALL_OW 69
64955: ST_TO_ADDR
// end ;
64956: LD_VAR 0 2
64960: RET
// export function Shuffle ( array ) ; var i , index ; begin
64961: LD_INT 0
64963: PPUSH
64964: PPUSH
64965: PPUSH
// result := [ ] ;
64966: LD_ADDR_VAR 0 2
64970: PUSH
64971: EMPTY
64972: ST_TO_ADDR
// if not array then
64973: LD_VAR 0 1
64977: NOT
64978: IFFALSE 64982
// exit ;
64980: GO 65081
// Randomize ;
64982: CALL_OW 10
// for i = array downto 1 do
64986: LD_ADDR_VAR 0 3
64990: PUSH
64991: DOUBLE
64992: LD_VAR 0 1
64996: INC
64997: ST_TO_ADDR
64998: LD_INT 1
65000: PUSH
65001: FOR_DOWNTO
65002: IFFALSE 65079
// begin index := rand ( 1 , array ) ;
65004: LD_ADDR_VAR 0 4
65008: PUSH
65009: LD_INT 1
65011: PPUSH
65012: LD_VAR 0 1
65016: PPUSH
65017: CALL_OW 12
65021: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
65022: LD_ADDR_VAR 0 2
65026: PUSH
65027: LD_VAR 0 2
65031: PPUSH
65032: LD_VAR 0 2
65036: PUSH
65037: LD_INT 1
65039: PLUS
65040: PPUSH
65041: LD_VAR 0 1
65045: PUSH
65046: LD_VAR 0 4
65050: ARRAY
65051: PPUSH
65052: CALL_OW 2
65056: ST_TO_ADDR
// array := Delete ( array , index ) ;
65057: LD_ADDR_VAR 0 1
65061: PUSH
65062: LD_VAR 0 1
65066: PPUSH
65067: LD_VAR 0 4
65071: PPUSH
65072: CALL_OW 3
65076: ST_TO_ADDR
// end ;
65077: GO 65001
65079: POP
65080: POP
// end ;
65081: LD_VAR 0 2
65085: RET
// export function GetBaseMaterials ( base ) ; begin
65086: LD_INT 0
65088: PPUSH
// result := [ 0 , 0 , 0 ] ;
65089: LD_ADDR_VAR 0 2
65093: PUSH
65094: LD_INT 0
65096: PUSH
65097: LD_INT 0
65099: PUSH
65100: LD_INT 0
65102: PUSH
65103: EMPTY
65104: LIST
65105: LIST
65106: LIST
65107: ST_TO_ADDR
// if not base then
65108: LD_VAR 0 1
65112: NOT
65113: IFFALSE 65117
// exit ;
65115: GO 65166
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
65117: LD_ADDR_VAR 0 2
65121: PUSH
65122: LD_VAR 0 1
65126: PPUSH
65127: LD_INT 1
65129: PPUSH
65130: CALL_OW 275
65134: PUSH
65135: LD_VAR 0 1
65139: PPUSH
65140: LD_INT 2
65142: PPUSH
65143: CALL_OW 275
65147: PUSH
65148: LD_VAR 0 1
65152: PPUSH
65153: LD_INT 3
65155: PPUSH
65156: CALL_OW 275
65160: PUSH
65161: EMPTY
65162: LIST
65163: LIST
65164: LIST
65165: ST_TO_ADDR
// end ;
65166: LD_VAR 0 2
65170: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
65171: LD_INT 0
65173: PPUSH
65174: PPUSH
// result := array ;
65175: LD_ADDR_VAR 0 3
65179: PUSH
65180: LD_VAR 0 1
65184: ST_TO_ADDR
// if size >= result then
65185: LD_VAR 0 2
65189: PUSH
65190: LD_VAR 0 3
65194: GREATEREQUAL
65195: IFFALSE 65199
// exit ;
65197: GO 65249
// if size then
65199: LD_VAR 0 2
65203: IFFALSE 65249
// for i := array downto size do
65205: LD_ADDR_VAR 0 4
65209: PUSH
65210: DOUBLE
65211: LD_VAR 0 1
65215: INC
65216: ST_TO_ADDR
65217: LD_VAR 0 2
65221: PUSH
65222: FOR_DOWNTO
65223: IFFALSE 65247
// result := Delete ( result , result ) ;
65225: LD_ADDR_VAR 0 3
65229: PUSH
65230: LD_VAR 0 3
65234: PPUSH
65235: LD_VAR 0 3
65239: PPUSH
65240: CALL_OW 3
65244: ST_TO_ADDR
65245: GO 65222
65247: POP
65248: POP
// end ;
65249: LD_VAR 0 3
65253: RET
// export function ComExit ( unit ) ; var tmp ; begin
65254: LD_INT 0
65256: PPUSH
65257: PPUSH
// if not IsInUnit ( unit ) then
65258: LD_VAR 0 1
65262: PPUSH
65263: CALL_OW 310
65267: NOT
65268: IFFALSE 65272
// exit ;
65270: GO 65332
// tmp := IsInUnit ( unit ) ;
65272: LD_ADDR_VAR 0 3
65276: PUSH
65277: LD_VAR 0 1
65281: PPUSH
65282: CALL_OW 310
65286: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
65287: LD_VAR 0 3
65291: PPUSH
65292: CALL_OW 247
65296: PUSH
65297: LD_INT 2
65299: EQUAL
65300: IFFALSE 65313
// ComExitVehicle ( unit ) else
65302: LD_VAR 0 1
65306: PPUSH
65307: CALL_OW 121
65311: GO 65322
// ComExitBuilding ( unit ) ;
65313: LD_VAR 0 1
65317: PPUSH
65318: CALL_OW 122
// result := tmp ;
65322: LD_ADDR_VAR 0 2
65326: PUSH
65327: LD_VAR 0 3
65331: ST_TO_ADDR
// end ;
65332: LD_VAR 0 2
65336: RET
// export function ComExitAll ( units ) ; var i ; begin
65337: LD_INT 0
65339: PPUSH
65340: PPUSH
// if not units then
65341: LD_VAR 0 1
65345: NOT
65346: IFFALSE 65350
// exit ;
65348: GO 65376
// for i in units do
65350: LD_ADDR_VAR 0 3
65354: PUSH
65355: LD_VAR 0 1
65359: PUSH
65360: FOR_IN
65361: IFFALSE 65374
// ComExit ( i ) ;
65363: LD_VAR 0 3
65367: PPUSH
65368: CALL 65254 0 1
65372: GO 65360
65374: POP
65375: POP
// end ;
65376: LD_VAR 0 2
65380: RET
// export function ResetHc ; begin
65381: LD_INT 0
65383: PPUSH
// InitHc ;
65384: CALL_OW 19
// hc_importance := 0 ;
65388: LD_ADDR_OWVAR 32
65392: PUSH
65393: LD_INT 0
65395: ST_TO_ADDR
// end ;
65396: LD_VAR 0 1
65400: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
65401: LD_INT 0
65403: PPUSH
65404: PPUSH
65405: PPUSH
// _x := ( x1 + x2 ) div 2 ;
65406: LD_ADDR_VAR 0 6
65410: PUSH
65411: LD_VAR 0 1
65415: PUSH
65416: LD_VAR 0 3
65420: PLUS
65421: PUSH
65422: LD_INT 2
65424: DIV
65425: ST_TO_ADDR
// if _x < 0 then
65426: LD_VAR 0 6
65430: PUSH
65431: LD_INT 0
65433: LESS
65434: IFFALSE 65451
// _x := _x * - 1 ;
65436: LD_ADDR_VAR 0 6
65440: PUSH
65441: LD_VAR 0 6
65445: PUSH
65446: LD_INT 1
65448: NEG
65449: MUL
65450: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
65451: LD_ADDR_VAR 0 7
65455: PUSH
65456: LD_VAR 0 2
65460: PUSH
65461: LD_VAR 0 4
65465: PLUS
65466: PUSH
65467: LD_INT 2
65469: DIV
65470: ST_TO_ADDR
// if _y < 0 then
65471: LD_VAR 0 7
65475: PUSH
65476: LD_INT 0
65478: LESS
65479: IFFALSE 65496
// _y := _y * - 1 ;
65481: LD_ADDR_VAR 0 7
65485: PUSH
65486: LD_VAR 0 7
65490: PUSH
65491: LD_INT 1
65493: NEG
65494: MUL
65495: ST_TO_ADDR
// result := [ _x , _y ] ;
65496: LD_ADDR_VAR 0 5
65500: PUSH
65501: LD_VAR 0 6
65505: PUSH
65506: LD_VAR 0 7
65510: PUSH
65511: EMPTY
65512: LIST
65513: LIST
65514: ST_TO_ADDR
// end ;
65515: LD_VAR 0 5
65519: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
65520: LD_INT 0
65522: PPUSH
65523: PPUSH
65524: PPUSH
65525: PPUSH
// task := GetTaskList ( unit ) ;
65526: LD_ADDR_VAR 0 7
65530: PUSH
65531: LD_VAR 0 1
65535: PPUSH
65536: CALL_OW 437
65540: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
65541: LD_VAR 0 7
65545: NOT
65546: PUSH
65547: LD_VAR 0 1
65551: PPUSH
65552: LD_VAR 0 2
65556: PPUSH
65557: CALL_OW 308
65561: NOT
65562: AND
65563: IFFALSE 65567
// exit ;
65565: GO 65685
// if IsInArea ( unit , area ) then
65567: LD_VAR 0 1
65571: PPUSH
65572: LD_VAR 0 2
65576: PPUSH
65577: CALL_OW 308
65581: IFFALSE 65599
// begin ComMoveToArea ( unit , goAway ) ;
65583: LD_VAR 0 1
65587: PPUSH
65588: LD_VAR 0 3
65592: PPUSH
65593: CALL_OW 113
// exit ;
65597: GO 65685
// end ; if task [ 1 ] [ 1 ] <> M then
65599: LD_VAR 0 7
65603: PUSH
65604: LD_INT 1
65606: ARRAY
65607: PUSH
65608: LD_INT 1
65610: ARRAY
65611: PUSH
65612: LD_STRING M
65614: NONEQUAL
65615: IFFALSE 65619
// exit ;
65617: GO 65685
// x := task [ 1 ] [ 2 ] ;
65619: LD_ADDR_VAR 0 5
65623: PUSH
65624: LD_VAR 0 7
65628: PUSH
65629: LD_INT 1
65631: ARRAY
65632: PUSH
65633: LD_INT 2
65635: ARRAY
65636: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
65637: LD_ADDR_VAR 0 6
65641: PUSH
65642: LD_VAR 0 7
65646: PUSH
65647: LD_INT 1
65649: ARRAY
65650: PUSH
65651: LD_INT 3
65653: ARRAY
65654: ST_TO_ADDR
// if InArea ( x , y , area ) then
65655: LD_VAR 0 5
65659: PPUSH
65660: LD_VAR 0 6
65664: PPUSH
65665: LD_VAR 0 2
65669: PPUSH
65670: CALL_OW 309
65674: IFFALSE 65685
// ComStop ( unit ) ;
65676: LD_VAR 0 1
65680: PPUSH
65681: CALL_OW 141
// end ;
65685: LD_VAR 0 4
65689: RET
// export function Abs ( value ) ; begin
65690: LD_INT 0
65692: PPUSH
// result := value ;
65693: LD_ADDR_VAR 0 2
65697: PUSH
65698: LD_VAR 0 1
65702: ST_TO_ADDR
// if value < 0 then
65703: LD_VAR 0 1
65707: PUSH
65708: LD_INT 0
65710: LESS
65711: IFFALSE 65728
// result := value * - 1 ;
65713: LD_ADDR_VAR 0 2
65717: PUSH
65718: LD_VAR 0 1
65722: PUSH
65723: LD_INT 1
65725: NEG
65726: MUL
65727: ST_TO_ADDR
// end ;
65728: LD_VAR 0 2
65732: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
65733: LD_INT 0
65735: PPUSH
65736: PPUSH
65737: PPUSH
65738: PPUSH
65739: PPUSH
65740: PPUSH
65741: PPUSH
65742: PPUSH
// if not unit or not building then
65743: LD_VAR 0 1
65747: NOT
65748: PUSH
65749: LD_VAR 0 2
65753: NOT
65754: OR
65755: IFFALSE 65759
// exit ;
65757: GO 65985
// x := GetX ( building ) ;
65759: LD_ADDR_VAR 0 4
65763: PUSH
65764: LD_VAR 0 2
65768: PPUSH
65769: CALL_OW 250
65773: ST_TO_ADDR
// y := GetY ( building ) ;
65774: LD_ADDR_VAR 0 6
65778: PUSH
65779: LD_VAR 0 2
65783: PPUSH
65784: CALL_OW 251
65788: ST_TO_ADDR
// d := GetDir ( building ) ;
65789: LD_ADDR_VAR 0 8
65793: PUSH
65794: LD_VAR 0 2
65798: PPUSH
65799: CALL_OW 254
65803: ST_TO_ADDR
// r := 4 ;
65804: LD_ADDR_VAR 0 9
65808: PUSH
65809: LD_INT 4
65811: ST_TO_ADDR
// for i := 1 to 5 do
65812: LD_ADDR_VAR 0 10
65816: PUSH
65817: DOUBLE
65818: LD_INT 1
65820: DEC
65821: ST_TO_ADDR
65822: LD_INT 5
65824: PUSH
65825: FOR_TO
65826: IFFALSE 65983
// begin _x := ShiftX ( x , d , r + i ) ;
65828: LD_ADDR_VAR 0 5
65832: PUSH
65833: LD_VAR 0 4
65837: PPUSH
65838: LD_VAR 0 8
65842: PPUSH
65843: LD_VAR 0 9
65847: PUSH
65848: LD_VAR 0 10
65852: PLUS
65853: PPUSH
65854: CALL_OW 272
65858: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
65859: LD_ADDR_VAR 0 7
65863: PUSH
65864: LD_VAR 0 6
65868: PPUSH
65869: LD_VAR 0 8
65873: PPUSH
65874: LD_VAR 0 9
65878: PUSH
65879: LD_VAR 0 10
65883: PLUS
65884: PPUSH
65885: CALL_OW 273
65889: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
65890: LD_VAR 0 5
65894: PPUSH
65895: LD_VAR 0 7
65899: PPUSH
65900: CALL_OW 488
65904: PUSH
65905: LD_VAR 0 5
65909: PPUSH
65910: LD_VAR 0 7
65914: PPUSH
65915: CALL_OW 428
65919: PPUSH
65920: CALL_OW 247
65924: PUSH
65925: LD_INT 3
65927: PUSH
65928: LD_INT 2
65930: PUSH
65931: EMPTY
65932: LIST
65933: LIST
65934: IN
65935: NOT
65936: AND
65937: IFFALSE 65981
// begin ComMoveXY ( unit , _x , _y ) ;
65939: LD_VAR 0 1
65943: PPUSH
65944: LD_VAR 0 5
65948: PPUSH
65949: LD_VAR 0 7
65953: PPUSH
65954: CALL_OW 111
// result := [ _x , _y ] ;
65958: LD_ADDR_VAR 0 3
65962: PUSH
65963: LD_VAR 0 5
65967: PUSH
65968: LD_VAR 0 7
65972: PUSH
65973: EMPTY
65974: LIST
65975: LIST
65976: ST_TO_ADDR
// exit ;
65977: POP
65978: POP
65979: GO 65985
// end ; end ;
65981: GO 65825
65983: POP
65984: POP
// end ;
65985: LD_VAR 0 3
65989: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
65990: LD_INT 0
65992: PPUSH
65993: PPUSH
65994: PPUSH
// result := 0 ;
65995: LD_ADDR_VAR 0 3
65999: PUSH
66000: LD_INT 0
66002: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
66003: LD_VAR 0 1
66007: PUSH
66008: LD_INT 0
66010: LESS
66011: PUSH
66012: LD_VAR 0 1
66016: PUSH
66017: LD_INT 8
66019: GREATER
66020: OR
66021: PUSH
66022: LD_VAR 0 2
66026: PUSH
66027: LD_INT 0
66029: LESS
66030: OR
66031: PUSH
66032: LD_VAR 0 2
66036: PUSH
66037: LD_INT 8
66039: GREATER
66040: OR
66041: IFFALSE 66045
// exit ;
66043: GO 66120
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
66045: LD_ADDR_VAR 0 4
66049: PUSH
66050: LD_INT 22
66052: PUSH
66053: LD_VAR 0 2
66057: PUSH
66058: EMPTY
66059: LIST
66060: LIST
66061: PPUSH
66062: CALL_OW 69
66066: PUSH
66067: FOR_IN
66068: IFFALSE 66118
// begin un := UnitShoot ( i ) ;
66070: LD_ADDR_VAR 0 5
66074: PUSH
66075: LD_VAR 0 4
66079: PPUSH
66080: CALL_OW 504
66084: ST_TO_ADDR
// if GetSide ( un ) = side1 then
66085: LD_VAR 0 5
66089: PPUSH
66090: CALL_OW 255
66094: PUSH
66095: LD_VAR 0 1
66099: EQUAL
66100: IFFALSE 66116
// begin result := un ;
66102: LD_ADDR_VAR 0 3
66106: PUSH
66107: LD_VAR 0 5
66111: ST_TO_ADDR
// exit ;
66112: POP
66113: POP
66114: GO 66120
// end ; end ;
66116: GO 66067
66118: POP
66119: POP
// end ;
66120: LD_VAR 0 3
66124: RET
// export function GetCargoBay ( units ) ; begin
66125: LD_INT 0
66127: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
66128: LD_ADDR_VAR 0 2
66132: PUSH
66133: LD_VAR 0 1
66137: PPUSH
66138: LD_INT 2
66140: PUSH
66141: LD_INT 34
66143: PUSH
66144: LD_INT 12
66146: PUSH
66147: EMPTY
66148: LIST
66149: LIST
66150: PUSH
66151: LD_INT 34
66153: PUSH
66154: LD_INT 51
66156: PUSH
66157: EMPTY
66158: LIST
66159: LIST
66160: PUSH
66161: LD_INT 34
66163: PUSH
66164: LD_INT 32
66166: PUSH
66167: EMPTY
66168: LIST
66169: LIST
66170: PUSH
66171: LD_INT 34
66173: PUSH
66174: LD_INT 89
66176: PUSH
66177: EMPTY
66178: LIST
66179: LIST
66180: PUSH
66181: EMPTY
66182: LIST
66183: LIST
66184: LIST
66185: LIST
66186: LIST
66187: PPUSH
66188: CALL_OW 72
66192: ST_TO_ADDR
// end ;
66193: LD_VAR 0 2
66197: RET
// export function Negate ( value ) ; begin
66198: LD_INT 0
66200: PPUSH
// result := not value ;
66201: LD_ADDR_VAR 0 2
66205: PUSH
66206: LD_VAR 0 1
66210: NOT
66211: ST_TO_ADDR
// end ;
66212: LD_VAR 0 2
66216: RET
// export function Inc ( value ) ; begin
66217: LD_INT 0
66219: PPUSH
// result := value + 1 ;
66220: LD_ADDR_VAR 0 2
66224: PUSH
66225: LD_VAR 0 1
66229: PUSH
66230: LD_INT 1
66232: PLUS
66233: ST_TO_ADDR
// end ;
66234: LD_VAR 0 2
66238: RET
// export function Dec ( value ) ; begin
66239: LD_INT 0
66241: PPUSH
// result := value - 1 ;
66242: LD_ADDR_VAR 0 2
66246: PUSH
66247: LD_VAR 0 1
66251: PUSH
66252: LD_INT 1
66254: MINUS
66255: ST_TO_ADDR
// end ;
66256: LD_VAR 0 2
66260: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
66261: LD_INT 0
66263: PPUSH
66264: PPUSH
66265: PPUSH
66266: PPUSH
66267: PPUSH
66268: PPUSH
66269: PPUSH
66270: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
66271: LD_VAR 0 1
66275: PPUSH
66276: LD_VAR 0 2
66280: PPUSH
66281: CALL_OW 488
66285: NOT
66286: PUSH
66287: LD_VAR 0 3
66291: PPUSH
66292: LD_VAR 0 4
66296: PPUSH
66297: CALL_OW 488
66301: NOT
66302: OR
66303: IFFALSE 66316
// begin result := - 1 ;
66305: LD_ADDR_VAR 0 5
66309: PUSH
66310: LD_INT 1
66312: NEG
66313: ST_TO_ADDR
// exit ;
66314: GO 66551
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
66316: LD_ADDR_VAR 0 12
66320: PUSH
66321: LD_VAR 0 1
66325: PPUSH
66326: LD_VAR 0 2
66330: PPUSH
66331: LD_VAR 0 3
66335: PPUSH
66336: LD_VAR 0 4
66340: PPUSH
66341: CALL 65401 0 4
66345: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
66346: LD_ADDR_VAR 0 11
66350: PUSH
66351: LD_VAR 0 1
66355: PPUSH
66356: LD_VAR 0 2
66360: PPUSH
66361: LD_VAR 0 12
66365: PUSH
66366: LD_INT 1
66368: ARRAY
66369: PPUSH
66370: LD_VAR 0 12
66374: PUSH
66375: LD_INT 2
66377: ARRAY
66378: PPUSH
66379: CALL_OW 298
66383: ST_TO_ADDR
// distance := 9999 ;
66384: LD_ADDR_VAR 0 10
66388: PUSH
66389: LD_INT 9999
66391: ST_TO_ADDR
// for i := 0 to 5 do
66392: LD_ADDR_VAR 0 6
66396: PUSH
66397: DOUBLE
66398: LD_INT 0
66400: DEC
66401: ST_TO_ADDR
66402: LD_INT 5
66404: PUSH
66405: FOR_TO
66406: IFFALSE 66549
// begin _x := ShiftX ( x1 , i , centerDist ) ;
66408: LD_ADDR_VAR 0 7
66412: PUSH
66413: LD_VAR 0 1
66417: PPUSH
66418: LD_VAR 0 6
66422: PPUSH
66423: LD_VAR 0 11
66427: PPUSH
66428: CALL_OW 272
66432: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
66433: LD_ADDR_VAR 0 8
66437: PUSH
66438: LD_VAR 0 2
66442: PPUSH
66443: LD_VAR 0 6
66447: PPUSH
66448: LD_VAR 0 11
66452: PPUSH
66453: CALL_OW 273
66457: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
66458: LD_VAR 0 7
66462: PPUSH
66463: LD_VAR 0 8
66467: PPUSH
66468: CALL_OW 488
66472: NOT
66473: IFFALSE 66477
// continue ;
66475: GO 66405
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
66477: LD_ADDR_VAR 0 9
66481: PUSH
66482: LD_VAR 0 12
66486: PUSH
66487: LD_INT 1
66489: ARRAY
66490: PPUSH
66491: LD_VAR 0 12
66495: PUSH
66496: LD_INT 2
66498: ARRAY
66499: PPUSH
66500: LD_VAR 0 7
66504: PPUSH
66505: LD_VAR 0 8
66509: PPUSH
66510: CALL_OW 298
66514: ST_TO_ADDR
// if tmp < distance then
66515: LD_VAR 0 9
66519: PUSH
66520: LD_VAR 0 10
66524: LESS
66525: IFFALSE 66547
// begin result := i ;
66527: LD_ADDR_VAR 0 5
66531: PUSH
66532: LD_VAR 0 6
66536: ST_TO_ADDR
// distance := tmp ;
66537: LD_ADDR_VAR 0 10
66541: PUSH
66542: LD_VAR 0 9
66546: ST_TO_ADDR
// end ; end ;
66547: GO 66405
66549: POP
66550: POP
// end ;
66551: LD_VAR 0 5
66555: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66556: LD_INT 0
66558: PPUSH
66559: PPUSH
// if not driver or not IsInUnit ( driver ) then
66560: LD_VAR 0 1
66564: NOT
66565: PUSH
66566: LD_VAR 0 1
66570: PPUSH
66571: CALL_OW 310
66575: NOT
66576: OR
66577: IFFALSE 66581
// exit ;
66579: GO 66671
// vehicle := IsInUnit ( driver ) ;
66581: LD_ADDR_VAR 0 3
66585: PUSH
66586: LD_VAR 0 1
66590: PPUSH
66591: CALL_OW 310
66595: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66596: LD_VAR 0 1
66600: PPUSH
66601: LD_STRING \
66603: PUSH
66604: LD_INT 0
66606: PUSH
66607: LD_INT 0
66609: PUSH
66610: LD_INT 0
66612: PUSH
66613: LD_INT 0
66615: PUSH
66616: LD_INT 0
66618: PUSH
66619: LD_INT 0
66621: PUSH
66622: EMPTY
66623: LIST
66624: LIST
66625: LIST
66626: LIST
66627: LIST
66628: LIST
66629: LIST
66630: PUSH
66631: LD_STRING E
66633: PUSH
66634: LD_INT 0
66636: PUSH
66637: LD_INT 0
66639: PUSH
66640: LD_VAR 0 3
66644: PUSH
66645: LD_INT 0
66647: PUSH
66648: LD_INT 0
66650: PUSH
66651: LD_INT 0
66653: PUSH
66654: EMPTY
66655: LIST
66656: LIST
66657: LIST
66658: LIST
66659: LIST
66660: LIST
66661: LIST
66662: PUSH
66663: EMPTY
66664: LIST
66665: LIST
66666: PPUSH
66667: CALL_OW 446
// end ;
66671: LD_VAR 0 2
66675: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66676: LD_INT 0
66678: PPUSH
66679: PPUSH
// if not driver or not IsInUnit ( driver ) then
66680: LD_VAR 0 1
66684: NOT
66685: PUSH
66686: LD_VAR 0 1
66690: PPUSH
66691: CALL_OW 310
66695: NOT
66696: OR
66697: IFFALSE 66701
// exit ;
66699: GO 66791
// vehicle := IsInUnit ( driver ) ;
66701: LD_ADDR_VAR 0 3
66705: PUSH
66706: LD_VAR 0 1
66710: PPUSH
66711: CALL_OW 310
66715: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66716: LD_VAR 0 1
66720: PPUSH
66721: LD_STRING \
66723: PUSH
66724: LD_INT 0
66726: PUSH
66727: LD_INT 0
66729: PUSH
66730: LD_INT 0
66732: PUSH
66733: LD_INT 0
66735: PUSH
66736: LD_INT 0
66738: PUSH
66739: LD_INT 0
66741: PUSH
66742: EMPTY
66743: LIST
66744: LIST
66745: LIST
66746: LIST
66747: LIST
66748: LIST
66749: LIST
66750: PUSH
66751: LD_STRING E
66753: PUSH
66754: LD_INT 0
66756: PUSH
66757: LD_INT 0
66759: PUSH
66760: LD_VAR 0 3
66764: PUSH
66765: LD_INT 0
66767: PUSH
66768: LD_INT 0
66770: PUSH
66771: LD_INT 0
66773: PUSH
66774: EMPTY
66775: LIST
66776: LIST
66777: LIST
66778: LIST
66779: LIST
66780: LIST
66781: LIST
66782: PUSH
66783: EMPTY
66784: LIST
66785: LIST
66786: PPUSH
66787: CALL_OW 447
// end ;
66791: LD_VAR 0 2
66795: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
66796: LD_INT 0
66798: PPUSH
66799: PPUSH
66800: PPUSH
// tmp := [ ] ;
66801: LD_ADDR_VAR 0 5
66805: PUSH
66806: EMPTY
66807: ST_TO_ADDR
// for i in units do
66808: LD_ADDR_VAR 0 4
66812: PUSH
66813: LD_VAR 0 1
66817: PUSH
66818: FOR_IN
66819: IFFALSE 66857
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
66821: LD_ADDR_VAR 0 5
66825: PUSH
66826: LD_VAR 0 5
66830: PPUSH
66831: LD_VAR 0 5
66835: PUSH
66836: LD_INT 1
66838: PLUS
66839: PPUSH
66840: LD_VAR 0 4
66844: PPUSH
66845: CALL_OW 256
66849: PPUSH
66850: CALL_OW 2
66854: ST_TO_ADDR
66855: GO 66818
66857: POP
66858: POP
// if not tmp then
66859: LD_VAR 0 5
66863: NOT
66864: IFFALSE 66868
// exit ;
66866: GO 66916
// if asc then
66868: LD_VAR 0 2
66872: IFFALSE 66896
// result := SortListByListAsc ( units , tmp ) else
66874: LD_ADDR_VAR 0 3
66878: PUSH
66879: LD_VAR 0 1
66883: PPUSH
66884: LD_VAR 0 5
66888: PPUSH
66889: CALL_OW 76
66893: ST_TO_ADDR
66894: GO 66916
// result := SortListByListDesc ( units , tmp ) ;
66896: LD_ADDR_VAR 0 3
66900: PUSH
66901: LD_VAR 0 1
66905: PPUSH
66906: LD_VAR 0 5
66910: PPUSH
66911: CALL_OW 77
66915: ST_TO_ADDR
// end ;
66916: LD_VAR 0 3
66920: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
66921: LD_INT 0
66923: PPUSH
66924: PPUSH
// task := GetTaskList ( mech ) ;
66925: LD_ADDR_VAR 0 4
66929: PUSH
66930: LD_VAR 0 1
66934: PPUSH
66935: CALL_OW 437
66939: ST_TO_ADDR
// if not task then
66940: LD_VAR 0 4
66944: NOT
66945: IFFALSE 66949
// exit ;
66947: GO 66991
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
66949: LD_ADDR_VAR 0 3
66953: PUSH
66954: LD_VAR 0 4
66958: PUSH
66959: LD_INT 1
66961: ARRAY
66962: PUSH
66963: LD_INT 1
66965: ARRAY
66966: PUSH
66967: LD_STRING r
66969: EQUAL
66970: PUSH
66971: LD_VAR 0 4
66975: PUSH
66976: LD_INT 1
66978: ARRAY
66979: PUSH
66980: LD_INT 4
66982: ARRAY
66983: PUSH
66984: LD_VAR 0 2
66988: EQUAL
66989: AND
66990: ST_TO_ADDR
// end ;
66991: LD_VAR 0 3
66995: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
66996: LD_INT 0
66998: PPUSH
// SetDir ( unit , d ) ;
66999: LD_VAR 0 1
67003: PPUSH
67004: LD_VAR 0 4
67008: PPUSH
67009: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
67013: LD_VAR 0 1
67017: PPUSH
67018: LD_VAR 0 2
67022: PPUSH
67023: LD_VAR 0 3
67027: PPUSH
67028: LD_VAR 0 5
67032: PPUSH
67033: CALL_OW 48
// end ;
67037: LD_VAR 0 6
67041: RET
// export function ToNaturalNumber ( number ) ; begin
67042: LD_INT 0
67044: PPUSH
// result := number div 1 ;
67045: LD_ADDR_VAR 0 2
67049: PUSH
67050: LD_VAR 0 1
67054: PUSH
67055: LD_INT 1
67057: DIV
67058: ST_TO_ADDR
// if number < 0 then
67059: LD_VAR 0 1
67063: PUSH
67064: LD_INT 0
67066: LESS
67067: IFFALSE 67077
// result := 0 ;
67069: LD_ADDR_VAR 0 2
67073: PUSH
67074: LD_INT 0
67076: ST_TO_ADDR
// end ;
67077: LD_VAR 0 2
67081: RET
// export function SortByClass ( units , class ) ; var un ; begin
67082: LD_INT 0
67084: PPUSH
67085: PPUSH
// if not units or not class then
67086: LD_VAR 0 1
67090: NOT
67091: PUSH
67092: LD_VAR 0 2
67096: NOT
67097: OR
67098: IFFALSE 67102
// exit ;
67100: GO 67197
// result := [ ] ;
67102: LD_ADDR_VAR 0 3
67106: PUSH
67107: EMPTY
67108: ST_TO_ADDR
// for un in units do
67109: LD_ADDR_VAR 0 4
67113: PUSH
67114: LD_VAR 0 1
67118: PUSH
67119: FOR_IN
67120: IFFALSE 67195
// if GetClass ( un ) = class then
67122: LD_VAR 0 4
67126: PPUSH
67127: CALL_OW 257
67131: PUSH
67132: LD_VAR 0 2
67136: EQUAL
67137: IFFALSE 67164
// result := Insert ( result , 1 , un ) else
67139: LD_ADDR_VAR 0 3
67143: PUSH
67144: LD_VAR 0 3
67148: PPUSH
67149: LD_INT 1
67151: PPUSH
67152: LD_VAR 0 4
67156: PPUSH
67157: CALL_OW 2
67161: ST_TO_ADDR
67162: GO 67193
// result := Replace ( result , result + 1 , un ) ;
67164: LD_ADDR_VAR 0 3
67168: PUSH
67169: LD_VAR 0 3
67173: PPUSH
67174: LD_VAR 0 3
67178: PUSH
67179: LD_INT 1
67181: PLUS
67182: PPUSH
67183: LD_VAR 0 4
67187: PPUSH
67188: CALL_OW 1
67192: ST_TO_ADDR
67193: GO 67119
67195: POP
67196: POP
// end ;
67197: LD_VAR 0 3
67201: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
67202: LD_INT 0
67204: PPUSH
67205: PPUSH
67206: PPUSH
67207: PPUSH
67208: PPUSH
67209: PPUSH
67210: PPUSH
// result := [ ] ;
67211: LD_ADDR_VAR 0 4
67215: PUSH
67216: EMPTY
67217: ST_TO_ADDR
// if x - r < 0 then
67218: LD_VAR 0 1
67222: PUSH
67223: LD_VAR 0 3
67227: MINUS
67228: PUSH
67229: LD_INT 0
67231: LESS
67232: IFFALSE 67244
// min_x := 0 else
67234: LD_ADDR_VAR 0 8
67238: PUSH
67239: LD_INT 0
67241: ST_TO_ADDR
67242: GO 67260
// min_x := x - r ;
67244: LD_ADDR_VAR 0 8
67248: PUSH
67249: LD_VAR 0 1
67253: PUSH
67254: LD_VAR 0 3
67258: MINUS
67259: ST_TO_ADDR
// if y - r < 0 then
67260: LD_VAR 0 2
67264: PUSH
67265: LD_VAR 0 3
67269: MINUS
67270: PUSH
67271: LD_INT 0
67273: LESS
67274: IFFALSE 67286
// min_y := 0 else
67276: LD_ADDR_VAR 0 7
67280: PUSH
67281: LD_INT 0
67283: ST_TO_ADDR
67284: GO 67302
// min_y := y - r ;
67286: LD_ADDR_VAR 0 7
67290: PUSH
67291: LD_VAR 0 2
67295: PUSH
67296: LD_VAR 0 3
67300: MINUS
67301: ST_TO_ADDR
// max_x := x + r ;
67302: LD_ADDR_VAR 0 9
67306: PUSH
67307: LD_VAR 0 1
67311: PUSH
67312: LD_VAR 0 3
67316: PLUS
67317: ST_TO_ADDR
// max_y := y + r ;
67318: LD_ADDR_VAR 0 10
67322: PUSH
67323: LD_VAR 0 2
67327: PUSH
67328: LD_VAR 0 3
67332: PLUS
67333: ST_TO_ADDR
// for _x = min_x to max_x do
67334: LD_ADDR_VAR 0 5
67338: PUSH
67339: DOUBLE
67340: LD_VAR 0 8
67344: DEC
67345: ST_TO_ADDR
67346: LD_VAR 0 9
67350: PUSH
67351: FOR_TO
67352: IFFALSE 67453
// for _y = min_y to max_y do
67354: LD_ADDR_VAR 0 6
67358: PUSH
67359: DOUBLE
67360: LD_VAR 0 7
67364: DEC
67365: ST_TO_ADDR
67366: LD_VAR 0 10
67370: PUSH
67371: FOR_TO
67372: IFFALSE 67449
// begin if not ValidHex ( _x , _y ) then
67374: LD_VAR 0 5
67378: PPUSH
67379: LD_VAR 0 6
67383: PPUSH
67384: CALL_OW 488
67388: NOT
67389: IFFALSE 67393
// continue ;
67391: GO 67371
// if GetResourceTypeXY ( _x , _y ) then
67393: LD_VAR 0 5
67397: PPUSH
67398: LD_VAR 0 6
67402: PPUSH
67403: CALL_OW 283
67407: IFFALSE 67447
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
67409: LD_ADDR_VAR 0 4
67413: PUSH
67414: LD_VAR 0 4
67418: PPUSH
67419: LD_VAR 0 4
67423: PUSH
67424: LD_INT 1
67426: PLUS
67427: PPUSH
67428: LD_VAR 0 5
67432: PUSH
67433: LD_VAR 0 6
67437: PUSH
67438: EMPTY
67439: LIST
67440: LIST
67441: PPUSH
67442: CALL_OW 1
67446: ST_TO_ADDR
// end ;
67447: GO 67371
67449: POP
67450: POP
67451: GO 67351
67453: POP
67454: POP
// end ;
67455: LD_VAR 0 4
67459: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
67460: LD_INT 0
67462: PPUSH
67463: PPUSH
67464: PPUSH
67465: PPUSH
67466: PPUSH
67467: PPUSH
67468: PPUSH
67469: PPUSH
// if not units then
67470: LD_VAR 0 1
67474: NOT
67475: IFFALSE 67479
// exit ;
67477: GO 68007
// result := UnitFilter ( units , [ f_ok ] ) ;
67479: LD_ADDR_VAR 0 3
67483: PUSH
67484: LD_VAR 0 1
67488: PPUSH
67489: LD_INT 50
67491: PUSH
67492: EMPTY
67493: LIST
67494: PPUSH
67495: CALL_OW 72
67499: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
67500: LD_ADDR_VAR 0 8
67504: PUSH
67505: LD_VAR 0 1
67509: PUSH
67510: LD_INT 1
67512: ARRAY
67513: PPUSH
67514: CALL_OW 255
67518: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
67519: LD_ADDR_VAR 0 10
67523: PUSH
67524: LD_INT 29
67526: PUSH
67527: LD_INT 91
67529: PUSH
67530: LD_INT 49
67532: PUSH
67533: EMPTY
67534: LIST
67535: LIST
67536: LIST
67537: ST_TO_ADDR
// if not result then
67538: LD_VAR 0 3
67542: NOT
67543: IFFALSE 67547
// exit ;
67545: GO 68007
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
67547: LD_ADDR_VAR 0 5
67551: PUSH
67552: LD_INT 81
67554: PUSH
67555: LD_VAR 0 8
67559: PUSH
67560: EMPTY
67561: LIST
67562: LIST
67563: PPUSH
67564: CALL_OW 69
67568: ST_TO_ADDR
// for i in result do
67569: LD_ADDR_VAR 0 4
67573: PUSH
67574: LD_VAR 0 3
67578: PUSH
67579: FOR_IN
67580: IFFALSE 68005
// begin tag := GetTag ( i ) + 1 ;
67582: LD_ADDR_VAR 0 9
67586: PUSH
67587: LD_VAR 0 4
67591: PPUSH
67592: CALL_OW 110
67596: PUSH
67597: LD_INT 1
67599: PLUS
67600: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
67601: LD_ADDR_VAR 0 7
67605: PUSH
67606: LD_VAR 0 4
67610: PPUSH
67611: CALL_OW 250
67615: PPUSH
67616: LD_VAR 0 4
67620: PPUSH
67621: CALL_OW 251
67625: PPUSH
67626: LD_INT 4
67628: PPUSH
67629: CALL 67202 0 3
67633: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
67634: LD_VAR 0 4
67638: PPUSH
67639: CALL_OW 247
67643: PUSH
67644: LD_INT 2
67646: EQUAL
67647: PUSH
67648: LD_VAR 0 7
67652: PUSH
67653: LD_INT 2
67655: GREATER
67656: AND
67657: PUSH
67658: LD_VAR 0 4
67662: PPUSH
67663: CALL_OW 264
67667: PUSH
67668: LD_VAR 0 10
67672: IN
67673: NOT
67674: AND
67675: IFFALSE 67714
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
67677: LD_VAR 0 4
67681: PPUSH
67682: LD_VAR 0 7
67686: PUSH
67687: LD_INT 1
67689: ARRAY
67690: PUSH
67691: LD_INT 1
67693: ARRAY
67694: PPUSH
67695: LD_VAR 0 7
67699: PUSH
67700: LD_INT 1
67702: ARRAY
67703: PUSH
67704: LD_INT 2
67706: ARRAY
67707: PPUSH
67708: CALL_OW 116
67712: GO 68003
// if path > tag then
67714: LD_VAR 0 2
67718: PUSH
67719: LD_VAR 0 9
67723: GREATER
67724: IFFALSE 67932
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
67726: LD_ADDR_VAR 0 6
67730: PUSH
67731: LD_VAR 0 5
67735: PPUSH
67736: LD_INT 91
67738: PUSH
67739: LD_VAR 0 4
67743: PUSH
67744: LD_INT 8
67746: PUSH
67747: EMPTY
67748: LIST
67749: LIST
67750: LIST
67751: PPUSH
67752: CALL_OW 72
67756: ST_TO_ADDR
// if nearEnemy then
67757: LD_VAR 0 6
67761: IFFALSE 67830
// begin if GetWeapon ( i ) = ru_time_lapser then
67763: LD_VAR 0 4
67767: PPUSH
67768: CALL_OW 264
67772: PUSH
67773: LD_INT 49
67775: EQUAL
67776: IFFALSE 67804
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
67778: LD_VAR 0 4
67782: PPUSH
67783: LD_VAR 0 6
67787: PPUSH
67788: LD_VAR 0 4
67792: PPUSH
67793: CALL_OW 74
67797: PPUSH
67798: CALL_OW 112
67802: GO 67828
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
67804: LD_VAR 0 4
67808: PPUSH
67809: LD_VAR 0 6
67813: PPUSH
67814: LD_VAR 0 4
67818: PPUSH
67819: CALL_OW 74
67823: PPUSH
67824: CALL 69078 0 2
// end else
67828: GO 67930
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
67830: LD_VAR 0 4
67834: PPUSH
67835: LD_VAR 0 2
67839: PUSH
67840: LD_VAR 0 9
67844: ARRAY
67845: PUSH
67846: LD_INT 1
67848: ARRAY
67849: PPUSH
67850: LD_VAR 0 2
67854: PUSH
67855: LD_VAR 0 9
67859: ARRAY
67860: PUSH
67861: LD_INT 2
67863: ARRAY
67864: PPUSH
67865: CALL_OW 297
67869: PUSH
67870: LD_INT 6
67872: GREATER
67873: IFFALSE 67916
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
67875: LD_VAR 0 4
67879: PPUSH
67880: LD_VAR 0 2
67884: PUSH
67885: LD_VAR 0 9
67889: ARRAY
67890: PUSH
67891: LD_INT 1
67893: ARRAY
67894: PPUSH
67895: LD_VAR 0 2
67899: PUSH
67900: LD_VAR 0 9
67904: ARRAY
67905: PUSH
67906: LD_INT 2
67908: ARRAY
67909: PPUSH
67910: CALL_OW 114
67914: GO 67930
// SetTag ( i , tag ) ;
67916: LD_VAR 0 4
67920: PPUSH
67921: LD_VAR 0 9
67925: PPUSH
67926: CALL_OW 109
// end else
67930: GO 68003
// if enemy then
67932: LD_VAR 0 5
67936: IFFALSE 68003
// begin if GetWeapon ( i ) = ru_time_lapser then
67938: LD_VAR 0 4
67942: PPUSH
67943: CALL_OW 264
67947: PUSH
67948: LD_INT 49
67950: EQUAL
67951: IFFALSE 67979
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
67953: LD_VAR 0 4
67957: PPUSH
67958: LD_VAR 0 5
67962: PPUSH
67963: LD_VAR 0 4
67967: PPUSH
67968: CALL_OW 74
67972: PPUSH
67973: CALL_OW 112
67977: GO 68003
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
67979: LD_VAR 0 4
67983: PPUSH
67984: LD_VAR 0 5
67988: PPUSH
67989: LD_VAR 0 4
67993: PPUSH
67994: CALL_OW 74
67998: PPUSH
67999: CALL 69078 0 2
// end ; end ;
68003: GO 67579
68005: POP
68006: POP
// end ;
68007: LD_VAR 0 3
68011: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
68012: LD_INT 0
68014: PPUSH
68015: PPUSH
68016: PPUSH
// if not unit or IsInUnit ( unit ) then
68017: LD_VAR 0 1
68021: NOT
68022: PUSH
68023: LD_VAR 0 1
68027: PPUSH
68028: CALL_OW 310
68032: OR
68033: IFFALSE 68037
// exit ;
68035: GO 68128
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
68037: LD_ADDR_VAR 0 4
68041: PUSH
68042: LD_VAR 0 1
68046: PPUSH
68047: CALL_OW 250
68051: PPUSH
68052: LD_VAR 0 2
68056: PPUSH
68057: LD_INT 1
68059: PPUSH
68060: CALL_OW 272
68064: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
68065: LD_ADDR_VAR 0 5
68069: PUSH
68070: LD_VAR 0 1
68074: PPUSH
68075: CALL_OW 251
68079: PPUSH
68080: LD_VAR 0 2
68084: PPUSH
68085: LD_INT 1
68087: PPUSH
68088: CALL_OW 273
68092: ST_TO_ADDR
// if ValidHex ( x , y ) then
68093: LD_VAR 0 4
68097: PPUSH
68098: LD_VAR 0 5
68102: PPUSH
68103: CALL_OW 488
68107: IFFALSE 68128
// ComTurnXY ( unit , x , y ) ;
68109: LD_VAR 0 1
68113: PPUSH
68114: LD_VAR 0 4
68118: PPUSH
68119: LD_VAR 0 5
68123: PPUSH
68124: CALL_OW 118
// end ;
68128: LD_VAR 0 3
68132: RET
// export function SeeUnits ( side , units ) ; var i ; begin
68133: LD_INT 0
68135: PPUSH
68136: PPUSH
// result := false ;
68137: LD_ADDR_VAR 0 3
68141: PUSH
68142: LD_INT 0
68144: ST_TO_ADDR
// if not units then
68145: LD_VAR 0 2
68149: NOT
68150: IFFALSE 68154
// exit ;
68152: GO 68199
// for i in units do
68154: LD_ADDR_VAR 0 4
68158: PUSH
68159: LD_VAR 0 2
68163: PUSH
68164: FOR_IN
68165: IFFALSE 68197
// if See ( side , i ) then
68167: LD_VAR 0 1
68171: PPUSH
68172: LD_VAR 0 4
68176: PPUSH
68177: CALL_OW 292
68181: IFFALSE 68195
// begin result := true ;
68183: LD_ADDR_VAR 0 3
68187: PUSH
68188: LD_INT 1
68190: ST_TO_ADDR
// exit ;
68191: POP
68192: POP
68193: GO 68199
// end ;
68195: GO 68164
68197: POP
68198: POP
// end ;
68199: LD_VAR 0 3
68203: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
68204: LD_INT 0
68206: PPUSH
68207: PPUSH
68208: PPUSH
68209: PPUSH
// if not unit or not points then
68210: LD_VAR 0 1
68214: NOT
68215: PUSH
68216: LD_VAR 0 2
68220: NOT
68221: OR
68222: IFFALSE 68226
// exit ;
68224: GO 68316
// dist := 99999 ;
68226: LD_ADDR_VAR 0 5
68230: PUSH
68231: LD_INT 99999
68233: ST_TO_ADDR
// for i in points do
68234: LD_ADDR_VAR 0 4
68238: PUSH
68239: LD_VAR 0 2
68243: PUSH
68244: FOR_IN
68245: IFFALSE 68314
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
68247: LD_ADDR_VAR 0 6
68251: PUSH
68252: LD_VAR 0 1
68256: PPUSH
68257: LD_VAR 0 4
68261: PUSH
68262: LD_INT 1
68264: ARRAY
68265: PPUSH
68266: LD_VAR 0 4
68270: PUSH
68271: LD_INT 2
68273: ARRAY
68274: PPUSH
68275: CALL_OW 297
68279: ST_TO_ADDR
// if tmpDist < dist then
68280: LD_VAR 0 6
68284: PUSH
68285: LD_VAR 0 5
68289: LESS
68290: IFFALSE 68312
// begin result := i ;
68292: LD_ADDR_VAR 0 3
68296: PUSH
68297: LD_VAR 0 4
68301: ST_TO_ADDR
// dist := tmpDist ;
68302: LD_ADDR_VAR 0 5
68306: PUSH
68307: LD_VAR 0 6
68311: ST_TO_ADDR
// end ; end ;
68312: GO 68244
68314: POP
68315: POP
// end ;
68316: LD_VAR 0 3
68320: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
68321: LD_INT 0
68323: PPUSH
// uc_side := side ;
68324: LD_ADDR_OWVAR 20
68328: PUSH
68329: LD_VAR 0 1
68333: ST_TO_ADDR
// uc_nation := 3 ;
68334: LD_ADDR_OWVAR 21
68338: PUSH
68339: LD_INT 3
68341: ST_TO_ADDR
// vc_chassis := 25 ;
68342: LD_ADDR_OWVAR 37
68346: PUSH
68347: LD_INT 25
68349: ST_TO_ADDR
// vc_engine := engine_siberite ;
68350: LD_ADDR_OWVAR 39
68354: PUSH
68355: LD_INT 3
68357: ST_TO_ADDR
// vc_control := control_computer ;
68358: LD_ADDR_OWVAR 38
68362: PUSH
68363: LD_INT 3
68365: ST_TO_ADDR
// vc_weapon := 59 ;
68366: LD_ADDR_OWVAR 40
68370: PUSH
68371: LD_INT 59
68373: ST_TO_ADDR
// result := CreateVehicle ;
68374: LD_ADDR_VAR 0 5
68378: PUSH
68379: CALL_OW 45
68383: ST_TO_ADDR
// SetDir ( result , d ) ;
68384: LD_VAR 0 5
68388: PPUSH
68389: LD_VAR 0 4
68393: PPUSH
68394: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
68398: LD_VAR 0 5
68402: PPUSH
68403: LD_VAR 0 2
68407: PPUSH
68408: LD_VAR 0 3
68412: PPUSH
68413: LD_INT 0
68415: PPUSH
68416: CALL_OW 48
// end ;
68420: LD_VAR 0 5
68424: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
68425: LD_INT 0
68427: PPUSH
68428: PPUSH
68429: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
68430: LD_ADDR_VAR 0 2
68434: PUSH
68435: LD_INT 0
68437: PUSH
68438: LD_INT 0
68440: PUSH
68441: LD_INT 0
68443: PUSH
68444: LD_INT 0
68446: PUSH
68447: EMPTY
68448: LIST
68449: LIST
68450: LIST
68451: LIST
68452: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
68453: LD_VAR 0 1
68457: NOT
68458: PUSH
68459: LD_VAR 0 1
68463: PPUSH
68464: CALL_OW 264
68468: PUSH
68469: LD_INT 12
68471: PUSH
68472: LD_INT 51
68474: PUSH
68475: LD_INT 32
68477: PUSH
68478: LD_INT 89
68480: PUSH
68481: EMPTY
68482: LIST
68483: LIST
68484: LIST
68485: LIST
68486: IN
68487: NOT
68488: OR
68489: IFFALSE 68493
// exit ;
68491: GO 68591
// for i := 1 to 3 do
68493: LD_ADDR_VAR 0 3
68497: PUSH
68498: DOUBLE
68499: LD_INT 1
68501: DEC
68502: ST_TO_ADDR
68503: LD_INT 3
68505: PUSH
68506: FOR_TO
68507: IFFALSE 68589
// begin tmp := GetCargo ( cargo , i ) ;
68509: LD_ADDR_VAR 0 4
68513: PUSH
68514: LD_VAR 0 1
68518: PPUSH
68519: LD_VAR 0 3
68523: PPUSH
68524: CALL_OW 289
68528: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
68529: LD_ADDR_VAR 0 2
68533: PUSH
68534: LD_VAR 0 2
68538: PPUSH
68539: LD_VAR 0 3
68543: PPUSH
68544: LD_VAR 0 4
68548: PPUSH
68549: CALL_OW 1
68553: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
68554: LD_ADDR_VAR 0 2
68558: PUSH
68559: LD_VAR 0 2
68563: PPUSH
68564: LD_INT 4
68566: PPUSH
68567: LD_VAR 0 2
68571: PUSH
68572: LD_INT 4
68574: ARRAY
68575: PUSH
68576: LD_VAR 0 4
68580: PLUS
68581: PPUSH
68582: CALL_OW 1
68586: ST_TO_ADDR
// end ;
68587: GO 68506
68589: POP
68590: POP
// end ;
68591: LD_VAR 0 2
68595: RET
// export function Length ( array ) ; begin
68596: LD_INT 0
68598: PPUSH
// result := array + 0 ;
68599: LD_ADDR_VAR 0 2
68603: PUSH
68604: LD_VAR 0 1
68608: PUSH
68609: LD_INT 0
68611: PLUS
68612: ST_TO_ADDR
// end ;
68613: LD_VAR 0 2
68617: RET
// export function PrepareArray ( array ) ; begin
68618: LD_INT 0
68620: PPUSH
// result := array diff 0 ;
68621: LD_ADDR_VAR 0 2
68625: PUSH
68626: LD_VAR 0 1
68630: PUSH
68631: LD_INT 0
68633: DIFF
68634: ST_TO_ADDR
// if not result [ 1 ] then
68635: LD_VAR 0 2
68639: PUSH
68640: LD_INT 1
68642: ARRAY
68643: NOT
68644: IFFALSE 68664
// result := Delete ( result , 1 ) ;
68646: LD_ADDR_VAR 0 2
68650: PUSH
68651: LD_VAR 0 2
68655: PPUSH
68656: LD_INT 1
68658: PPUSH
68659: CALL_OW 3
68663: ST_TO_ADDR
// end ;
68664: LD_VAR 0 2
68668: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
68669: LD_INT 0
68671: PPUSH
68672: PPUSH
68673: PPUSH
68674: PPUSH
// sibRocketRange := 25 ;
68675: LD_ADDR_VAR 0 6
68679: PUSH
68680: LD_INT 25
68682: ST_TO_ADDR
// result := false ;
68683: LD_ADDR_VAR 0 4
68687: PUSH
68688: LD_INT 0
68690: ST_TO_ADDR
// for i := 0 to 5 do
68691: LD_ADDR_VAR 0 5
68695: PUSH
68696: DOUBLE
68697: LD_INT 0
68699: DEC
68700: ST_TO_ADDR
68701: LD_INT 5
68703: PUSH
68704: FOR_TO
68705: IFFALSE 68772
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
68707: LD_VAR 0 1
68711: PPUSH
68712: LD_VAR 0 5
68716: PPUSH
68717: LD_VAR 0 6
68721: PPUSH
68722: CALL_OW 272
68726: PPUSH
68727: LD_VAR 0 2
68731: PPUSH
68732: LD_VAR 0 5
68736: PPUSH
68737: LD_VAR 0 6
68741: PPUSH
68742: CALL_OW 273
68746: PPUSH
68747: LD_VAR 0 3
68751: PPUSH
68752: CALL_OW 309
68756: IFFALSE 68770
// begin result := true ;
68758: LD_ADDR_VAR 0 4
68762: PUSH
68763: LD_INT 1
68765: ST_TO_ADDR
// exit ;
68766: POP
68767: POP
68768: GO 68774
// end ;
68770: GO 68704
68772: POP
68773: POP
// end ;
68774: LD_VAR 0 4
68778: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
68779: LD_INT 0
68781: PPUSH
68782: PPUSH
68783: PPUSH
// if btype = b_depot then
68784: LD_VAR 0 2
68788: PUSH
68789: LD_INT 0
68791: EQUAL
68792: IFFALSE 68804
// begin result := true ;
68794: LD_ADDR_VAR 0 3
68798: PUSH
68799: LD_INT 1
68801: ST_TO_ADDR
// exit ;
68802: GO 68920
// end ; pom := GetBase ( depot ) ;
68804: LD_ADDR_VAR 0 4
68808: PUSH
68809: LD_VAR 0 1
68813: PPUSH
68814: CALL_OW 274
68818: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
68819: LD_ADDR_VAR 0 5
68823: PUSH
68824: LD_VAR 0 2
68828: PPUSH
68829: LD_VAR 0 1
68833: PPUSH
68834: CALL_OW 248
68838: PPUSH
68839: CALL_OW 450
68843: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
68844: LD_ADDR_VAR 0 3
68848: PUSH
68849: LD_VAR 0 4
68853: PPUSH
68854: LD_INT 1
68856: PPUSH
68857: CALL_OW 275
68861: PUSH
68862: LD_VAR 0 5
68866: PUSH
68867: LD_INT 1
68869: ARRAY
68870: GREATEREQUAL
68871: PUSH
68872: LD_VAR 0 4
68876: PPUSH
68877: LD_INT 2
68879: PPUSH
68880: CALL_OW 275
68884: PUSH
68885: LD_VAR 0 5
68889: PUSH
68890: LD_INT 2
68892: ARRAY
68893: GREATEREQUAL
68894: AND
68895: PUSH
68896: LD_VAR 0 4
68900: PPUSH
68901: LD_INT 3
68903: PPUSH
68904: CALL_OW 275
68908: PUSH
68909: LD_VAR 0 5
68913: PUSH
68914: LD_INT 3
68916: ARRAY
68917: GREATEREQUAL
68918: AND
68919: ST_TO_ADDR
// end ;
68920: LD_VAR 0 3
68924: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
68925: LD_INT 0
68927: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
68928: LD_VAR 0 1
68932: PPUSH
68933: LD_VAR 0 2
68937: PPUSH
68938: LD_INT 0
68940: PPUSH
68941: LD_INT 0
68943: PPUSH
68944: LD_INT 1
68946: PPUSH
68947: LD_INT 0
68949: PPUSH
68950: CALL_OW 587
// end ;
68954: LD_VAR 0 3
68958: RET
// export function CenterOnNow ( unit ) ; begin
68959: LD_INT 0
68961: PPUSH
// result := IsInUnit ( unit ) ;
68962: LD_ADDR_VAR 0 2
68966: PUSH
68967: LD_VAR 0 1
68971: PPUSH
68972: CALL_OW 310
68976: ST_TO_ADDR
// if not result then
68977: LD_VAR 0 2
68981: NOT
68982: IFFALSE 68994
// result := unit ;
68984: LD_ADDR_VAR 0 2
68988: PUSH
68989: LD_VAR 0 1
68993: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
68994: LD_VAR 0 1
68998: PPUSH
68999: CALL_OW 87
// end ;
69003: LD_VAR 0 2
69007: RET
// export function ComMoveHex ( unit , hex ) ; begin
69008: LD_INT 0
69010: PPUSH
// if not hex then
69011: LD_VAR 0 2
69015: NOT
69016: IFFALSE 69020
// exit ;
69018: GO 69073
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
69020: LD_VAR 0 2
69024: PUSH
69025: LD_INT 1
69027: ARRAY
69028: PPUSH
69029: LD_VAR 0 2
69033: PUSH
69034: LD_INT 2
69036: ARRAY
69037: PPUSH
69038: CALL_OW 428
69042: IFFALSE 69046
// exit ;
69044: GO 69073
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
69046: LD_VAR 0 1
69050: PPUSH
69051: LD_VAR 0 2
69055: PUSH
69056: LD_INT 1
69058: ARRAY
69059: PPUSH
69060: LD_VAR 0 2
69064: PUSH
69065: LD_INT 2
69067: ARRAY
69068: PPUSH
69069: CALL_OW 111
// end ;
69073: LD_VAR 0 3
69077: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
69078: LD_INT 0
69080: PPUSH
69081: PPUSH
69082: PPUSH
// if not unit or not enemy then
69083: LD_VAR 0 1
69087: NOT
69088: PUSH
69089: LD_VAR 0 2
69093: NOT
69094: OR
69095: IFFALSE 69099
// exit ;
69097: GO 69223
// x := GetX ( enemy ) ;
69099: LD_ADDR_VAR 0 4
69103: PUSH
69104: LD_VAR 0 2
69108: PPUSH
69109: CALL_OW 250
69113: ST_TO_ADDR
// y := GetY ( enemy ) ;
69114: LD_ADDR_VAR 0 5
69118: PUSH
69119: LD_VAR 0 2
69123: PPUSH
69124: CALL_OW 251
69128: ST_TO_ADDR
// if ValidHex ( x , y ) then
69129: LD_VAR 0 4
69133: PPUSH
69134: LD_VAR 0 5
69138: PPUSH
69139: CALL_OW 488
69143: IFFALSE 69223
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
69145: LD_VAR 0 2
69149: PPUSH
69150: CALL_OW 247
69154: PUSH
69155: LD_INT 3
69157: PUSH
69158: LD_INT 2
69160: PUSH
69161: EMPTY
69162: LIST
69163: LIST
69164: IN
69165: PUSH
69166: LD_VAR 0 1
69170: PPUSH
69171: CALL_OW 255
69175: PPUSH
69176: LD_VAR 0 2
69180: PPUSH
69181: CALL_OW 292
69185: OR
69186: IFFALSE 69204
// ComAttackUnit ( unit , enemy ) else
69188: LD_VAR 0 1
69192: PPUSH
69193: LD_VAR 0 2
69197: PPUSH
69198: CALL_OW 115
69202: GO 69223
// ComAgressiveMove ( unit , x , y ) ;
69204: LD_VAR 0 1
69208: PPUSH
69209: LD_VAR 0 4
69213: PPUSH
69214: LD_VAR 0 5
69218: PPUSH
69219: CALL_OW 114
// end ;
69223: LD_VAR 0 3
69227: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
69228: LD_INT 0
69230: PPUSH
69231: PPUSH
69232: PPUSH
// list := AreaToList ( area , 0 ) ;
69233: LD_ADDR_VAR 0 5
69237: PUSH
69238: LD_VAR 0 1
69242: PPUSH
69243: LD_INT 0
69245: PPUSH
69246: CALL_OW 517
69250: ST_TO_ADDR
// if not list then
69251: LD_VAR 0 5
69255: NOT
69256: IFFALSE 69260
// exit ;
69258: GO 69390
// if all then
69260: LD_VAR 0 2
69264: IFFALSE 69352
// begin for i := 1 to list [ 1 ] do
69266: LD_ADDR_VAR 0 4
69270: PUSH
69271: DOUBLE
69272: LD_INT 1
69274: DEC
69275: ST_TO_ADDR
69276: LD_VAR 0 5
69280: PUSH
69281: LD_INT 1
69283: ARRAY
69284: PUSH
69285: FOR_TO
69286: IFFALSE 69348
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
69288: LD_ADDR_VAR 0 3
69292: PUSH
69293: LD_VAR 0 3
69297: PPUSH
69298: LD_VAR 0 3
69302: PUSH
69303: LD_INT 1
69305: PLUS
69306: PPUSH
69307: LD_VAR 0 5
69311: PUSH
69312: LD_INT 1
69314: ARRAY
69315: PUSH
69316: LD_VAR 0 4
69320: ARRAY
69321: PUSH
69322: LD_VAR 0 5
69326: PUSH
69327: LD_INT 2
69329: ARRAY
69330: PUSH
69331: LD_VAR 0 4
69335: ARRAY
69336: PUSH
69337: EMPTY
69338: LIST
69339: LIST
69340: PPUSH
69341: CALL_OW 1
69345: ST_TO_ADDR
69346: GO 69285
69348: POP
69349: POP
// exit ;
69350: GO 69390
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
69352: LD_ADDR_VAR 0 3
69356: PUSH
69357: LD_VAR 0 5
69361: PUSH
69362: LD_INT 1
69364: ARRAY
69365: PUSH
69366: LD_INT 1
69368: ARRAY
69369: PUSH
69370: LD_VAR 0 5
69374: PUSH
69375: LD_INT 2
69377: ARRAY
69378: PUSH
69379: LD_INT 1
69381: ARRAY
69382: PUSH
69383: EMPTY
69384: LIST
69385: LIST
69386: PUSH
69387: EMPTY
69388: LIST
69389: ST_TO_ADDR
// end ;
69390: LD_VAR 0 3
69394: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
69395: LD_INT 0
69397: PPUSH
69398: PPUSH
// list := AreaToList ( area , 0 ) ;
69399: LD_ADDR_VAR 0 4
69403: PUSH
69404: LD_VAR 0 1
69408: PPUSH
69409: LD_INT 0
69411: PPUSH
69412: CALL_OW 517
69416: ST_TO_ADDR
// if not list then
69417: LD_VAR 0 4
69421: NOT
69422: IFFALSE 69426
// exit ;
69424: GO 69467
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
69426: LD_ADDR_VAR 0 3
69430: PUSH
69431: LD_VAR 0 4
69435: PUSH
69436: LD_INT 1
69438: ARRAY
69439: PUSH
69440: LD_INT 1
69442: ARRAY
69443: PUSH
69444: LD_VAR 0 4
69448: PUSH
69449: LD_INT 2
69451: ARRAY
69452: PUSH
69453: LD_INT 1
69455: ARRAY
69456: PUSH
69457: LD_VAR 0 2
69461: PUSH
69462: EMPTY
69463: LIST
69464: LIST
69465: LIST
69466: ST_TO_ADDR
// end ;
69467: LD_VAR 0 3
69471: RET
// export function First ( array ) ; begin
69472: LD_INT 0
69474: PPUSH
// if not array then
69475: LD_VAR 0 1
69479: NOT
69480: IFFALSE 69484
// exit ;
69482: GO 69498
// result := array [ 1 ] ;
69484: LD_ADDR_VAR 0 2
69488: PUSH
69489: LD_VAR 0 1
69493: PUSH
69494: LD_INT 1
69496: ARRAY
69497: ST_TO_ADDR
// end ;
69498: LD_VAR 0 2
69502: RET
// export function Last ( array ) ; begin
69503: LD_INT 0
69505: PPUSH
// if not array then
69506: LD_VAR 0 1
69510: NOT
69511: IFFALSE 69515
// exit ;
69513: GO 69531
// result := array [ array ] ;
69515: LD_ADDR_VAR 0 2
69519: PUSH
69520: LD_VAR 0 1
69524: PUSH
69525: LD_VAR 0 1
69529: ARRAY
69530: ST_TO_ADDR
// end ;
69531: LD_VAR 0 2
69535: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
69536: LD_INT 0
69538: PPUSH
69539: PPUSH
// result := [ ] ;
69540: LD_ADDR_VAR 0 5
69544: PUSH
69545: EMPTY
69546: ST_TO_ADDR
// if not array then
69547: LD_VAR 0 1
69551: NOT
69552: IFFALSE 69556
// exit ;
69554: GO 69668
// for i := 1 to array do
69556: LD_ADDR_VAR 0 6
69560: PUSH
69561: DOUBLE
69562: LD_INT 1
69564: DEC
69565: ST_TO_ADDR
69566: LD_VAR 0 1
69570: PUSH
69571: FOR_TO
69572: IFFALSE 69666
// if array [ i ] [ index ] = value then
69574: LD_VAR 0 1
69578: PUSH
69579: LD_VAR 0 6
69583: ARRAY
69584: PUSH
69585: LD_VAR 0 2
69589: ARRAY
69590: PUSH
69591: LD_VAR 0 3
69595: EQUAL
69596: IFFALSE 69664
// begin if indexColumn then
69598: LD_VAR 0 4
69602: IFFALSE 69638
// result := Join ( result , array [ i ] [ indexColumn ] ) else
69604: LD_ADDR_VAR 0 5
69608: PUSH
69609: LD_VAR 0 5
69613: PPUSH
69614: LD_VAR 0 1
69618: PUSH
69619: LD_VAR 0 6
69623: ARRAY
69624: PUSH
69625: LD_VAR 0 4
69629: ARRAY
69630: PPUSH
69631: CALL 64856 0 2
69635: ST_TO_ADDR
69636: GO 69664
// result := Join ( result , array [ i ] ) ;
69638: LD_ADDR_VAR 0 5
69642: PUSH
69643: LD_VAR 0 5
69647: PPUSH
69648: LD_VAR 0 1
69652: PUSH
69653: LD_VAR 0 6
69657: ARRAY
69658: PPUSH
69659: CALL 64856 0 2
69663: ST_TO_ADDR
// end ;
69664: GO 69571
69666: POP
69667: POP
// end ;
69668: LD_VAR 0 5
69672: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
69673: LD_INT 0
69675: PPUSH
// if not vehicles or not parkingPoint then
69676: LD_VAR 0 1
69680: NOT
69681: PUSH
69682: LD_VAR 0 2
69686: NOT
69687: OR
69688: IFFALSE 69692
// exit ;
69690: GO 69790
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
69692: LD_ADDR_VAR 0 1
69696: PUSH
69697: LD_VAR 0 1
69701: PPUSH
69702: LD_INT 50
69704: PUSH
69705: EMPTY
69706: LIST
69707: PUSH
69708: LD_INT 3
69710: PUSH
69711: LD_INT 92
69713: PUSH
69714: LD_VAR 0 2
69718: PUSH
69719: LD_INT 1
69721: ARRAY
69722: PUSH
69723: LD_VAR 0 2
69727: PUSH
69728: LD_INT 2
69730: ARRAY
69731: PUSH
69732: LD_INT 8
69734: PUSH
69735: EMPTY
69736: LIST
69737: LIST
69738: LIST
69739: LIST
69740: PUSH
69741: EMPTY
69742: LIST
69743: LIST
69744: PUSH
69745: EMPTY
69746: LIST
69747: LIST
69748: PPUSH
69749: CALL_OW 72
69753: ST_TO_ADDR
// if not vehicles then
69754: LD_VAR 0 1
69758: NOT
69759: IFFALSE 69763
// exit ;
69761: GO 69790
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
69763: LD_VAR 0 1
69767: PPUSH
69768: LD_VAR 0 2
69772: PUSH
69773: LD_INT 1
69775: ARRAY
69776: PPUSH
69777: LD_VAR 0 2
69781: PUSH
69782: LD_INT 2
69784: ARRAY
69785: PPUSH
69786: CALL_OW 111
// end ;
69790: LD_VAR 0 3
69794: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
69795: LD_INT 0
69797: PPUSH
69798: PPUSH
69799: PPUSH
// if not side or not area then
69800: LD_VAR 0 1
69804: NOT
69805: PUSH
69806: LD_VAR 0 2
69810: NOT
69811: OR
69812: IFFALSE 69816
// exit ;
69814: GO 69935
// tmp := AreaToList ( area , 0 ) ;
69816: LD_ADDR_VAR 0 5
69820: PUSH
69821: LD_VAR 0 2
69825: PPUSH
69826: LD_INT 0
69828: PPUSH
69829: CALL_OW 517
69833: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
69834: LD_ADDR_VAR 0 4
69838: PUSH
69839: DOUBLE
69840: LD_INT 1
69842: DEC
69843: ST_TO_ADDR
69844: LD_VAR 0 5
69848: PUSH
69849: LD_INT 1
69851: ARRAY
69852: PUSH
69853: FOR_TO
69854: IFFALSE 69933
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
69856: LD_VAR 0 5
69860: PUSH
69861: LD_INT 1
69863: ARRAY
69864: PUSH
69865: LD_VAR 0 4
69869: ARRAY
69870: PPUSH
69871: LD_VAR 0 5
69875: PUSH
69876: LD_INT 2
69878: ARRAY
69879: PUSH
69880: LD_VAR 0 4
69884: ARRAY
69885: PPUSH
69886: CALL_OW 351
69890: IFFALSE 69931
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
69892: LD_VAR 0 5
69896: PUSH
69897: LD_INT 1
69899: ARRAY
69900: PUSH
69901: LD_VAR 0 4
69905: ARRAY
69906: PPUSH
69907: LD_VAR 0 5
69911: PUSH
69912: LD_INT 2
69914: ARRAY
69915: PUSH
69916: LD_VAR 0 4
69920: ARRAY
69921: PPUSH
69922: LD_VAR 0 1
69926: PPUSH
69927: CALL_OW 244
// end ;
69931: GO 69853
69933: POP
69934: POP
// end ; end_of_file
69935: LD_VAR 0 3
69939: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
69940: LD_VAR 0 1
69944: PPUSH
69945: LD_VAR 0 2
69949: PPUSH
69950: LD_VAR 0 3
69954: PPUSH
69955: LD_VAR 0 4
69959: PPUSH
69960: LD_VAR 0 5
69964: PPUSH
69965: LD_VAR 0 6
69969: PPUSH
69970: CALL 6065 0 6
// end ;
69974: PPOPN 6
69976: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
69977: LD_INT 0
69979: PPUSH
// begin if not units then
69980: LD_VAR 0 1
69984: NOT
69985: IFFALSE 69989
// exit ;
69987: GO 69989
// end ;
69989: PPOPN 7
69991: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
69992: CALL 5952 0 0
// end ; end_of_file
69996: PPOPN 1
69998: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
69999: LD_VAR 0 1
70003: PUSH
70004: LD_INT 200
70006: DOUBLE
70007: GREATEREQUAL
70008: IFFALSE 70016
70010: LD_INT 299
70012: DOUBLE
70013: LESSEQUAL
70014: IFTRUE 70018
70016: GO 70050
70018: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
70019: LD_VAR 0 1
70023: PPUSH
70024: LD_VAR 0 2
70028: PPUSH
70029: LD_VAR 0 3
70033: PPUSH
70034: LD_VAR 0 4
70038: PPUSH
70039: LD_VAR 0 5
70043: PPUSH
70044: CALL 22425 0 5
70048: GO 70127
70050: LD_INT 300
70052: DOUBLE
70053: GREATEREQUAL
70054: IFFALSE 70062
70056: LD_INT 399
70058: DOUBLE
70059: LESSEQUAL
70060: IFTRUE 70064
70062: GO 70126
70064: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
70065: LD_VAR 0 1
70069: PPUSH
70070: LD_VAR 0 2
70074: PPUSH
70075: LD_VAR 0 3
70079: PPUSH
70080: LD_VAR 0 4
70084: PPUSH
70085: LD_VAR 0 5
70089: PPUSH
70090: LD_VAR 0 6
70094: PPUSH
70095: LD_VAR 0 7
70099: PPUSH
70100: LD_VAR 0 8
70104: PPUSH
70105: LD_VAR 0 9
70109: PPUSH
70110: LD_VAR 0 10
70114: PPUSH
70115: LD_VAR 0 11
70119: PPUSH
70120: CALL 18413 0 11
70124: GO 70127
70126: POP
// end ;
70127: PPOPN 11
70129: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
70130: LD_VAR 0 1
70134: PPUSH
70135: LD_VAR 0 2
70139: PPUSH
70140: LD_VAR 0 3
70144: PPUSH
70145: LD_VAR 0 4
70149: PPUSH
70150: LD_VAR 0 5
70154: PPUSH
70155: CALL 21890 0 5
// end ;
70159: PPOPN 5
70161: END
