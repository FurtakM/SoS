// export JMM , Gladstone , Denis , Lisa , Frank , Bobby , Cyrus , Brown , Donaldson ; export others , randomsDelta ; export apemans , yourApemans ; export yourVehicles ; export DeltaDoctor ; export Harisson ; export baseCorrect ; export cutscene ; export lab ; export resources ; export mission_prefix , mission_prefix_prev ; starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// FogOff ( true ) ;
  15: LD_INT 1
  17: PPUSH
  18: CALL_OW 344
// baseCorrect = 0 ;
  22: LD_ADDR_EXP 17
  26: PUSH
  27: LD_INT 0
  29: ST_TO_ADDR
// cutscene = 1 ;
  30: LD_ADDR_EXP 18
  34: PUSH
  35: LD_INT 1
  37: ST_TO_ADDR
// apemans = [ ] ;
  38: LD_ADDR_EXP 12
  42: PUSH
  43: EMPTY
  44: ST_TO_ADDR
// yourApemans = [ ] ;
  45: LD_ADDR_EXP 13
  49: PUSH
  50: EMPTY
  51: ST_TO_ADDR
// yourVehicles = [ ] ;
  52: LD_ADDR_EXP 14
  56: PUSH
  57: EMPTY
  58: ST_TO_ADDR
// randomsDelta := [ ] ;
  59: LD_ADDR_EXP 11
  63: PUSH
  64: EMPTY
  65: ST_TO_ADDR
// resources = [ ] ;
  66: LD_ADDR_EXP 20
  70: PUSH
  71: EMPTY
  72: ST_TO_ADDR
// mission_prefix := 06_ ;
  73: LD_ADDR_EXP 21
  77: PUSH
  78: LD_STRING 06_
  80: ST_TO_ADDR
// mission_prefix_prev := 05_ ;
  81: LD_ADDR_EXP 22
  85: PUSH
  86: LD_STRING 05_
  88: ST_TO_ADDR
// PrepareNature ;
  89: CALL 173 0 0
// PrepareDeltaBase ;
  93: CALL 2367 0 0
// LoadVehicles ;
  97: CALL 1407 0 0
// PrepareHeroes ;
 101: CALL 294 0 0
// PrepareRandoms ;
 105: CALL 1708 0 0
// lab = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
 109: LD_ADDR_EXP 19
 113: PUSH
 114: LD_INT 22
 116: PUSH
 117: LD_INT 1
 119: PUSH
 120: EMPTY
 121: LIST
 122: LIST
 123: PUSH
 124: LD_INT 2
 126: PUSH
 127: LD_INT 30
 129: PUSH
 130: LD_INT 6
 132: PUSH
 133: EMPTY
 134: LIST
 135: LIST
 136: PUSH
 137: LD_INT 30
 139: PUSH
 140: LD_INT 7
 142: PUSH
 143: EMPTY
 144: LIST
 145: LIST
 146: PUSH
 147: LD_INT 30
 149: PUSH
 150: LD_INT 8
 152: PUSH
 153: EMPTY
 154: LIST
 155: LIST
 156: PUSH
 157: EMPTY
 158: LIST
 159: LIST
 160: LIST
 161: LIST
 162: PUSH
 163: EMPTY
 164: LIST
 165: LIST
 166: PPUSH
 167: CALL_OW 69
 171: ST_TO_ADDR
// end ;
 172: END
// export function PrepareNature ; var i ; begin
 173: LD_INT 0
 175: PPUSH
 176: PPUSH
// uc_side := 0 ;
 177: LD_ADDR_OWVAR 20
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// uc_nation := 0 ;
 185: LD_ADDR_OWVAR 21
 189: PUSH
 190: LD_INT 0
 192: ST_TO_ADDR
// for i = 1 to 4 do
 193: LD_ADDR_VAR 0 2
 197: PUSH
 198: DOUBLE
 199: LD_INT 1
 201: DEC
 202: ST_TO_ADDR
 203: LD_INT 4
 205: PUSH
 206: FOR_TO
 207: IFFALSE 287
// begin hc_gallery :=  ;
 209: LD_ADDR_OWVAR 33
 213: PUSH
 214: LD_STRING 
 216: ST_TO_ADDR
// hc_name :=  ;
 217: LD_ADDR_OWVAR 26
 221: PUSH
 222: LD_STRING 
 224: ST_TO_ADDR
// hc_attr := [ rand ( 10 , 11 ) , rand ( 10 , 12 ) ] ;
 225: LD_ADDR_OWVAR 29
 229: PUSH
 230: LD_INT 10
 232: PPUSH
 233: LD_INT 11
 235: PPUSH
 236: CALL_OW 12
 240: PUSH
 241: LD_INT 10
 243: PPUSH
 244: LD_INT 12
 246: PPUSH
 247: CALL_OW 12
 251: PUSH
 252: EMPTY
 253: LIST
 254: LIST
 255: ST_TO_ADDR
// hc_class := class_apeman ;
 256: LD_ADDR_OWVAR 28
 260: PUSH
 261: LD_INT 12
 263: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , 22 , 18 , 20 , false ) ;
 264: CALL_OW 44
 268: PPUSH
 269: LD_INT 22
 271: PPUSH
 272: LD_INT 18
 274: PPUSH
 275: LD_INT 20
 277: PPUSH
 278: LD_INT 0
 280: PPUSH
 281: CALL_OW 50
// end ;
 285: GO 206
 287: POP
 288: POP
// end ; end_of_file
 289: LD_VAR 0 1
 293: RET
// export function PrepareHeroes ; var i , tmp , ape , test ; begin
 294: LD_INT 0
 296: PPUSH
 297: PPUSH
 298: PPUSH
 299: PPUSH
 300: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
 301: LD_ADDR_VAR 0 3
 305: PUSH
 306: LD_INT 22
 308: PUSH
 309: LD_INT 1
 311: PUSH
 312: EMPTY
 313: LIST
 314: LIST
 315: PUSH
 316: LD_INT 21
 318: PUSH
 319: LD_INT 3
 321: PUSH
 322: EMPTY
 323: LIST
 324: LIST
 325: PUSH
 326: LD_INT 30
 328: PUSH
 329: LD_INT 0
 331: PUSH
 332: EMPTY
 333: LIST
 334: LIST
 335: PUSH
 336: EMPTY
 337: LIST
 338: LIST
 339: LIST
 340: PPUSH
 341: CALL_OW 69
 345: ST_TO_ADDR
// SetBName ( tmp [ 1 ] , delta ) ;
 346: LD_VAR 0 3
 350: PUSH
 351: LD_INT 1
 353: ARRAY
 354: PPUSH
 355: LD_STRING delta
 357: PPUSH
 358: CALL_OW 500
// uc_side = 1 ;
 362: LD_ADDR_OWVAR 20
 366: PUSH
 367: LD_INT 1
 369: ST_TO_ADDR
// uc_nation = 1 ;
 370: LD_ADDR_OWVAR 21
 374: PUSH
 375: LD_INT 1
 377: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 378: LD_ADDR_EXP 1
 382: PUSH
 383: LD_STRING JMM
 385: PPUSH
 386: LD_INT 1
 388: PPUSH
 389: CALL 4481 0 2
 393: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 394: LD_ADDR_EXP 16
 398: PUSH
 399: LD_STRING Harisson
 401: PPUSH
 402: LD_INT 0
 404: PPUSH
 405: CALL 4481 0 2
 409: ST_TO_ADDR
// PlaceUnitXYR ( JMM , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 410: LD_EXP 1
 414: PPUSH
 415: LD_VAR 0 3
 419: PUSH
 420: LD_INT 1
 422: ARRAY
 423: PPUSH
 424: CALL_OW 250
 428: PPUSH
 429: LD_VAR 0 3
 433: PUSH
 434: LD_INT 1
 436: ARRAY
 437: PPUSH
 438: CALL_OW 251
 442: PPUSH
 443: LD_INT 5
 445: PPUSH
 446: LD_INT 0
 448: PPUSH
 449: CALL_OW 50
// SetClass ( JMM , 1 ) ;
 453: LD_EXP 1
 457: PPUSH
 458: LD_INT 1
 460: PPUSH
 461: CALL_OW 336
// Gladstone = PrepareUnit ( Gladstone , true ) ;
 465: LD_ADDR_EXP 2
 469: PUSH
 470: LD_STRING Gladstone
 472: PPUSH
 473: LD_INT 1
 475: PPUSH
 476: CALL 4481 0 2
 480: ST_TO_ADDR
// PlaceUnitXYR ( Gladstone , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 481: LD_EXP 2
 485: PPUSH
 486: LD_VAR 0 3
 490: PUSH
 491: LD_INT 1
 493: ARRAY
 494: PPUSH
 495: CALL_OW 250
 499: PPUSH
 500: LD_VAR 0 3
 504: PUSH
 505: LD_INT 1
 507: ARRAY
 508: PPUSH
 509: CALL_OW 251
 513: PPUSH
 514: LD_INT 5
 516: PPUSH
 517: LD_INT 0
 519: PPUSH
 520: CALL_OW 50
// SetClass ( Gladstone , 4 ) ;
 524: LD_EXP 2
 528: PPUSH
 529: LD_INT 4
 531: PPUSH
 532: CALL_OW 336
// Denis = PrepareUnit ( Denis , true ) ;
 536: LD_ADDR_EXP 3
 540: PUSH
 541: LD_STRING Denis
 543: PPUSH
 544: LD_INT 1
 546: PPUSH
 547: CALL 4481 0 2
 551: ST_TO_ADDR
// PlaceUnitXYR ( Denis , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 552: LD_EXP 3
 556: PPUSH
 557: LD_VAR 0 3
 561: PUSH
 562: LD_INT 1
 564: ARRAY
 565: PPUSH
 566: CALL_OW 250
 570: PPUSH
 571: LD_VAR 0 3
 575: PUSH
 576: LD_INT 1
 578: ARRAY
 579: PPUSH
 580: CALL_OW 251
 584: PPUSH
 585: LD_INT 5
 587: PPUSH
 588: LD_INT 0
 590: PPUSH
 591: CALL_OW 50
// SetClass ( Denis , 4 ) ;
 595: LD_EXP 3
 599: PPUSH
 600: LD_INT 4
 602: PPUSH
 603: CALL_OW 336
// if LoadVariable ( FrankInDelta , 0 ) = 1 then
 607: LD_STRING FrankInDelta
 609: PPUSH
 610: LD_INT 0
 612: PPUSH
 613: CALL_OW 30
 617: PUSH
 618: LD_INT 1
 620: EQUAL
 621: IFFALSE 694
// begin Frank = PrepareUnit ( Frank , true ) ;
 623: LD_ADDR_EXP 5
 627: PUSH
 628: LD_STRING Frank
 630: PPUSH
 631: LD_INT 1
 633: PPUSH
 634: CALL 4481 0 2
 638: ST_TO_ADDR
// PlaceUnitXYR ( Frank , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 639: LD_EXP 5
 643: PPUSH
 644: LD_VAR 0 3
 648: PUSH
 649: LD_INT 1
 651: ARRAY
 652: PPUSH
 653: CALL_OW 250
 657: PPUSH
 658: LD_VAR 0 3
 662: PUSH
 663: LD_INT 1
 665: ARRAY
 666: PPUSH
 667: CALL_OW 251
 671: PPUSH
 672: LD_INT 5
 674: PPUSH
 675: LD_INT 0
 677: PPUSH
 678: CALL_OW 50
// SetClass ( Frank , 1 ) ;
 682: LD_EXP 5
 686: PPUSH
 687: LD_INT 1
 689: PPUSH
 690: CALL_OW 336
// end ; if LoadVariable ( LisaInDelta , 0 ) = 1 then
 694: LD_STRING LisaInDelta
 696: PPUSH
 697: LD_INT 0
 699: PPUSH
 700: CALL_OW 30
 704: PUSH
 705: LD_INT 1
 707: EQUAL
 708: IFFALSE 781
// begin Lisa = PrepareUnit ( Lisa , true ) ;
 710: LD_ADDR_EXP 4
 714: PUSH
 715: LD_STRING Lisa
 717: PPUSH
 718: LD_INT 1
 720: PPUSH
 721: CALL 4481 0 2
 725: ST_TO_ADDR
// PlaceUnitXYR ( Lisa , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 726: LD_EXP 4
 730: PPUSH
 731: LD_VAR 0 3
 735: PUSH
 736: LD_INT 1
 738: ARRAY
 739: PPUSH
 740: CALL_OW 250
 744: PPUSH
 745: LD_VAR 0 3
 749: PUSH
 750: LD_INT 1
 752: ARRAY
 753: PPUSH
 754: CALL_OW 251
 758: PPUSH
 759: LD_INT 5
 761: PPUSH
 762: LD_INT 0
 764: PPUSH
 765: CALL_OW 50
// SetClass ( Lisa , 1 ) ;
 769: LD_EXP 4
 773: PPUSH
 774: LD_INT 1
 776: PPUSH
 777: CALL_OW 336
// end ; if LoadVariable ( BobbyInDelta , 0 ) = 1 then
 781: LD_STRING BobbyInDelta
 783: PPUSH
 784: LD_INT 0
 786: PPUSH
 787: CALL_OW 30
 791: PUSH
 792: LD_INT 1
 794: EQUAL
 795: IFFALSE 868
// begin Bobby = PrepareUnit ( Bobby , true ) ;
 797: LD_ADDR_EXP 6
 801: PUSH
 802: LD_STRING Bobby
 804: PPUSH
 805: LD_INT 1
 807: PPUSH
 808: CALL 4481 0 2
 812: ST_TO_ADDR
// PlaceUnitXYR ( Bobby , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 813: LD_EXP 6
 817: PPUSH
 818: LD_VAR 0 3
 822: PUSH
 823: LD_INT 1
 825: ARRAY
 826: PPUSH
 827: CALL_OW 250
 831: PPUSH
 832: LD_VAR 0 3
 836: PUSH
 837: LD_INT 1
 839: ARRAY
 840: PPUSH
 841: CALL_OW 251
 845: PPUSH
 846: LD_INT 5
 848: PPUSH
 849: LD_INT 0
 851: PPUSH
 852: CALL_OW 50
// SetClass ( Bobby , 1 ) ;
 856: LD_EXP 6
 860: PPUSH
 861: LD_INT 1
 863: PPUSH
 864: CALL_OW 336
// end ; if LoadVariable ( CyrusInDelta , 0 ) = 1 then
 868: LD_STRING CyrusInDelta
 870: PPUSH
 871: LD_INT 0
 873: PPUSH
 874: CALL_OW 30
 878: PUSH
 879: LD_INT 1
 881: EQUAL
 882: IFFALSE 955
// begin Cyrus = PrepareUnit ( Cyrus , true ) ;
 884: LD_ADDR_EXP 7
 888: PUSH
 889: LD_STRING Cyrus
 891: PPUSH
 892: LD_INT 1
 894: PPUSH
 895: CALL 4481 0 2
 899: ST_TO_ADDR
// PlaceUnitXYR ( Cyrus , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 900: LD_EXP 7
 904: PPUSH
 905: LD_VAR 0 3
 909: PUSH
 910: LD_INT 1
 912: ARRAY
 913: PPUSH
 914: CALL_OW 250
 918: PPUSH
 919: LD_VAR 0 3
 923: PUSH
 924: LD_INT 1
 926: ARRAY
 927: PPUSH
 928: CALL_OW 251
 932: PPUSH
 933: LD_INT 5
 935: PPUSH
 936: LD_INT 0
 938: PPUSH
 939: CALL_OW 50
// SetClass ( Cyrus , 1 ) ;
 943: LD_EXP 7
 947: PPUSH
 948: LD_INT 1
 950: PPUSH
 951: CALL_OW 336
// end ; if LoadVariable ( DonaldsonInDelta , 0 ) = 1 then
 955: LD_STRING DonaldsonInDelta
 957: PPUSH
 958: LD_INT 0
 960: PPUSH
 961: CALL_OW 30
 965: PUSH
 966: LD_INT 1
 968: EQUAL
 969: IFFALSE 1042
// begin Donaldson = PrepareUnit ( Donaldson , true ) ;
 971: LD_ADDR_EXP 9
 975: PUSH
 976: LD_STRING Donaldson
 978: PPUSH
 979: LD_INT 1
 981: PPUSH
 982: CALL 4481 0 2
 986: ST_TO_ADDR
// PlaceUnitXYR ( Donaldson , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 987: LD_EXP 9
 991: PPUSH
 992: LD_VAR 0 3
 996: PUSH
 997: LD_INT 1
 999: ARRAY
1000: PPUSH
1001: CALL_OW 250
1005: PPUSH
1006: LD_VAR 0 3
1010: PUSH
1011: LD_INT 1
1013: ARRAY
1014: PPUSH
1015: CALL_OW 251
1019: PPUSH
1020: LD_INT 5
1022: PPUSH
1023: LD_INT 0
1025: PPUSH
1026: CALL_OW 50
// SetClass ( Donaldson , 1 ) ;
1030: LD_EXP 9
1034: PPUSH
1035: LD_INT 1
1037: PPUSH
1038: CALL_OW 336
// end ; if LoadVariable ( BrownInDelta , 0 ) = 1 then
1042: LD_STRING BrownInDelta
1044: PPUSH
1045: LD_INT 0
1047: PPUSH
1048: CALL_OW 30
1052: PUSH
1053: LD_INT 1
1055: EQUAL
1056: IFFALSE 1129
// begin Brown = PrepareUnit ( Brown , true ) ;
1058: LD_ADDR_EXP 8
1062: PUSH
1063: LD_STRING Brown
1065: PPUSH
1066: LD_INT 1
1068: PPUSH
1069: CALL 4481 0 2
1073: ST_TO_ADDR
// PlaceUnitXYR ( Brown , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1074: LD_EXP 8
1078: PPUSH
1079: LD_VAR 0 3
1083: PUSH
1084: LD_INT 1
1086: ARRAY
1087: PPUSH
1088: CALL_OW 250
1092: PPUSH
1093: LD_VAR 0 3
1097: PUSH
1098: LD_INT 1
1100: ARRAY
1101: PPUSH
1102: CALL_OW 251
1106: PPUSH
1107: LD_INT 5
1109: PPUSH
1110: LD_INT 0
1112: PPUSH
1113: CALL_OW 50
// SetClass ( Brown , 2 ) ;
1117: LD_EXP 8
1121: PPUSH
1122: LD_INT 2
1124: PPUSH
1125: CALL_OW 336
// end ; others = CreateCharacterSet ( othersInDelta ) ;
1129: LD_ADDR_EXP 10
1133: PUSH
1134: LD_STRING othersInDelta
1136: PPUSH
1137: CALL_OW 31
1141: ST_TO_ADDR
// for i in others do
1142: LD_ADDR_VAR 0 2
1146: PUSH
1147: LD_EXP 10
1151: PUSH
1152: FOR_IN
1153: IFFALSE 1200
// PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1155: LD_VAR 0 2
1159: PPUSH
1160: LD_VAR 0 3
1164: PUSH
1165: LD_INT 1
1167: ARRAY
1168: PPUSH
1169: CALL_OW 250
1173: PPUSH
1174: LD_VAR 0 3
1178: PUSH
1179: LD_INT 1
1181: ARRAY
1182: PPUSH
1183: CALL_OW 251
1187: PPUSH
1188: LD_INT 35
1190: PPUSH
1191: LD_INT 0
1193: PPUSH
1194: CALL_OW 50
1198: GO 1152
1200: POP
1201: POP
// apemans = CreateCharacterSet ( apeInDelta ) ;
1202: LD_ADDR_EXP 12
1206: PUSH
1207: LD_STRING apeInDelta
1209: PPUSH
1210: CALL_OW 31
1214: ST_TO_ADDR
// uc_nation = 0 ;
1215: LD_ADDR_OWVAR 21
1219: PUSH
1220: LD_INT 0
1222: ST_TO_ADDR
// if apemans > 5 then
1223: LD_EXP 12
1227: PUSH
1228: LD_INT 5
1230: GREATER
1231: IFFALSE 1326
// begin for i := 1 to 5 do
1233: LD_ADDR_VAR 0 2
1237: PUSH
1238: DOUBLE
1239: LD_INT 1
1241: DEC
1242: ST_TO_ADDR
1243: LD_INT 5
1245: PUSH
1246: FOR_TO
1247: IFFALSE 1322
// begin PlaceUnitXYR ( apemans [ i ] , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1249: LD_EXP 12
1253: PUSH
1254: LD_VAR 0 2
1258: ARRAY
1259: PPUSH
1260: LD_VAR 0 3
1264: PUSH
1265: LD_INT 1
1267: ARRAY
1268: PPUSH
1269: CALL_OW 250
1273: PPUSH
1274: LD_VAR 0 3
1278: PUSH
1279: LD_INT 1
1281: ARRAY
1282: PPUSH
1283: CALL_OW 251
1287: PPUSH
1288: LD_INT 50
1290: PPUSH
1291: LD_INT 0
1293: PPUSH
1294: CALL_OW 50
// yourApemans = yourApemans ^ apemans [ i ] ;
1298: LD_ADDR_EXP 13
1302: PUSH
1303: LD_EXP 13
1307: PUSH
1308: LD_EXP 12
1312: PUSH
1313: LD_VAR 0 2
1317: ARRAY
1318: ADD
1319: ST_TO_ADDR
// end ;
1320: GO 1246
1322: POP
1323: POP
// end else
1324: GO 1402
// begin for i in apemans do
1326: LD_ADDR_VAR 0 2
1330: PUSH
1331: LD_EXP 12
1335: PUSH
1336: FOR_IN
1337: IFFALSE 1400
// begin PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1339: LD_VAR 0 2
1343: PPUSH
1344: LD_VAR 0 3
1348: PUSH
1349: LD_INT 1
1351: ARRAY
1352: PPUSH
1353: CALL_OW 250
1357: PPUSH
1358: LD_VAR 0 3
1362: PUSH
1363: LD_INT 1
1365: ARRAY
1366: PPUSH
1367: CALL_OW 251
1371: PPUSH
1372: LD_INT 50
1374: PPUSH
1375: LD_INT 0
1377: PPUSH
1378: CALL_OW 50
// yourApemans = yourApemans ^ i ;
1382: LD_ADDR_EXP 13
1386: PUSH
1387: LD_EXP 13
1391: PUSH
1392: LD_VAR 0 2
1396: ADD
1397: ST_TO_ADDR
// end ;
1398: GO 1336
1400: POP
1401: POP
// end ; end ;
1402: LD_VAR 0 1
1406: RET
// export function LoadVehicles ; var i , veh , tmp , vehicles ; begin
1407: LD_INT 0
1409: PPUSH
1410: PPUSH
1411: PPUSH
1412: PPUSH
1413: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1414: LD_ADDR_VAR 0 4
1418: PUSH
1419: LD_INT 22
1421: PUSH
1422: LD_INT 1
1424: PUSH
1425: EMPTY
1426: LIST
1427: LIST
1428: PUSH
1429: LD_INT 21
1431: PUSH
1432: LD_INT 3
1434: PUSH
1435: EMPTY
1436: LIST
1437: LIST
1438: PUSH
1439: LD_INT 30
1441: PUSH
1442: LD_INT 0
1444: PUSH
1445: EMPTY
1446: LIST
1447: LIST
1448: PUSH
1449: EMPTY
1450: LIST
1451: LIST
1452: LIST
1453: PPUSH
1454: CALL_OW 69
1458: ST_TO_ADDR
// uc_side = 1 ;
1459: LD_ADDR_OWVAR 20
1463: PUSH
1464: LD_INT 1
1466: ST_TO_ADDR
// vehicles = LoadVariable ( vehiclesInDelta , [ ] ) ;
1467: LD_ADDR_VAR 0 5
1471: PUSH
1472: LD_STRING vehiclesInDelta
1474: PPUSH
1475: EMPTY
1476: PPUSH
1477: CALL_OW 30
1481: ST_TO_ADDR
// for i = 1 to vehicles do
1482: LD_ADDR_VAR 0 2
1486: PUSH
1487: DOUBLE
1488: LD_INT 1
1490: DEC
1491: ST_TO_ADDR
1492: LD_VAR 0 5
1496: PUSH
1497: FOR_TO
1498: IFFALSE 1701
// begin if vehicles [ i + 4 ] = 11 or vehicles [ i ] = 3 then
1500: LD_VAR 0 5
1504: PUSH
1505: LD_VAR 0 2
1509: PUSH
1510: LD_INT 4
1512: PLUS
1513: ARRAY
1514: PUSH
1515: LD_INT 11
1517: EQUAL
1518: PUSH
1519: LD_VAR 0 5
1523: PUSH
1524: LD_VAR 0 2
1528: ARRAY
1529: PUSH
1530: LD_INT 3
1532: EQUAL
1533: OR
1534: IFFALSE 1685
// begin uc_nation = vehicles [ i ] ;
1536: LD_ADDR_OWVAR 21
1540: PUSH
1541: LD_VAR 0 5
1545: PUSH
1546: LD_VAR 0 2
1550: ARRAY
1551: ST_TO_ADDR
// vc_chassis = vehicles [ i + 1 ] ;
1552: LD_ADDR_OWVAR 37
1556: PUSH
1557: LD_VAR 0 5
1561: PUSH
1562: LD_VAR 0 2
1566: PUSH
1567: LD_INT 1
1569: PLUS
1570: ARRAY
1571: ST_TO_ADDR
// vc_engine = vehicles [ i + 2 ] ;
1572: LD_ADDR_OWVAR 39
1576: PUSH
1577: LD_VAR 0 5
1581: PUSH
1582: LD_VAR 0 2
1586: PUSH
1587: LD_INT 2
1589: PLUS
1590: ARRAY
1591: ST_TO_ADDR
// vc_control = vehicles [ i + 3 ] ;
1592: LD_ADDR_OWVAR 38
1596: PUSH
1597: LD_VAR 0 5
1601: PUSH
1602: LD_VAR 0 2
1606: PUSH
1607: LD_INT 3
1609: PLUS
1610: ARRAY
1611: ST_TO_ADDR
// vc_weapon = vehicles [ i + 4 ] ;
1612: LD_ADDR_OWVAR 40
1616: PUSH
1617: LD_VAR 0 5
1621: PUSH
1622: LD_VAR 0 2
1626: PUSH
1627: LD_INT 4
1629: PLUS
1630: ARRAY
1631: ST_TO_ADDR
// veh = CreateVehicle ;
1632: LD_ADDR_VAR 0 3
1636: PUSH
1637: CALL_OW 45
1641: ST_TO_ADDR
// PlaceUnitXYR ( veh , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 40 , false ) ;
1642: LD_VAR 0 3
1646: PPUSH
1647: LD_VAR 0 4
1651: PUSH
1652: LD_INT 1
1654: ARRAY
1655: PPUSH
1656: CALL_OW 250
1660: PPUSH
1661: LD_VAR 0 4
1665: PUSH
1666: LD_INT 1
1668: ARRAY
1669: PPUSH
1670: CALL_OW 251
1674: PPUSH
1675: LD_INT 40
1677: PPUSH
1678: LD_INT 0
1680: PPUSH
1681: CALL_OW 50
// end ; i = i + 4 ;
1685: LD_ADDR_VAR 0 2
1689: PUSH
1690: LD_VAR 0 2
1694: PUSH
1695: LD_INT 4
1697: PLUS
1698: ST_TO_ADDR
// end ;
1699: GO 1497
1701: POP
1702: POP
// end ;
1703: LD_VAR 0 1
1707: RET
// export function PrepareRandoms ; var i , un , tmp , filter ; begin
1708: LD_INT 0
1710: PPUSH
1711: PPUSH
1712: PPUSH
1713: PPUSH
1714: PPUSH
// uc_side = 1 ;
1715: LD_ADDR_OWVAR 20
1719: PUSH
1720: LD_INT 1
1722: ST_TO_ADDR
// uc_nation = 1 ;
1723: LD_ADDR_OWVAR 21
1727: PUSH
1728: LD_INT 1
1730: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1731: LD_ADDR_VAR 0 4
1735: PUSH
1736: LD_INT 22
1738: PUSH
1739: LD_INT 1
1741: PUSH
1742: EMPTY
1743: LIST
1744: LIST
1745: PUSH
1746: LD_INT 21
1748: PUSH
1749: LD_INT 3
1751: PUSH
1752: EMPTY
1753: LIST
1754: LIST
1755: PUSH
1756: LD_INT 30
1758: PUSH
1759: LD_INT 0
1761: PUSH
1762: EMPTY
1763: LIST
1764: LIST
1765: PUSH
1766: EMPTY
1767: LIST
1768: LIST
1769: LIST
1770: PPUSH
1771: CALL_OW 69
1775: ST_TO_ADDR
// if FilterAllunits ( [ [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] then
1776: LD_INT 22
1778: PUSH
1779: LD_INT 1
1781: PUSH
1782: EMPTY
1783: LIST
1784: LIST
1785: PUSH
1786: LD_INT 25
1788: PUSH
1789: LD_INT 4
1791: PUSH
1792: EMPTY
1793: LIST
1794: LIST
1795: PUSH
1796: LD_INT 26
1798: PUSH
1799: LD_INT 1
1801: PUSH
1802: EMPTY
1803: LIST
1804: LIST
1805: PUSH
1806: EMPTY
1807: LIST
1808: LIST
1809: LIST
1810: PUSH
1811: EMPTY
1812: LIST
1813: PPUSH
1814: CALL_OW 69
1818: PUSH
1819: LD_EXP 1
1823: PUSH
1824: LD_EXP 7
1828: PUSH
1829: LD_EXP 6
1833: PUSH
1834: LD_EXP 5
1838: PUSH
1839: LD_EXP 2
1843: PUSH
1844: LD_EXP 3
1848: PUSH
1849: LD_EXP 8
1853: PUSH
1854: EMPTY
1855: LIST
1856: LIST
1857: LIST
1858: LIST
1859: LIST
1860: LIST
1861: LIST
1862: DIFF
1863: IFFALSE 1964
// deltaDoctor := ( FilterAllunits ( [ [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] ) [ 1 ] else
1865: LD_ADDR_EXP 15
1869: PUSH
1870: LD_INT 22
1872: PUSH
1873: LD_INT 1
1875: PUSH
1876: EMPTY
1877: LIST
1878: LIST
1879: PUSH
1880: LD_INT 25
1882: PUSH
1883: LD_INT 4
1885: PUSH
1886: EMPTY
1887: LIST
1888: LIST
1889: PUSH
1890: LD_INT 26
1892: PUSH
1893: LD_INT 1
1895: PUSH
1896: EMPTY
1897: LIST
1898: LIST
1899: PUSH
1900: EMPTY
1901: LIST
1902: LIST
1903: LIST
1904: PUSH
1905: EMPTY
1906: LIST
1907: PPUSH
1908: CALL_OW 69
1912: PUSH
1913: LD_EXP 1
1917: PUSH
1918: LD_EXP 7
1922: PUSH
1923: LD_EXP 6
1927: PUSH
1928: LD_EXP 5
1932: PUSH
1933: LD_EXP 2
1937: PUSH
1938: LD_EXP 3
1942: PUSH
1943: LD_EXP 8
1947: PUSH
1948: EMPTY
1949: LIST
1950: LIST
1951: LIST
1952: LIST
1953: LIST
1954: LIST
1955: LIST
1956: DIFF
1957: PUSH
1958: LD_INT 1
1960: ARRAY
1961: ST_TO_ADDR
1962: GO 2111
// begin filter := FilterAllunits ( [ [ [ f_side , 1 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] ;
1964: LD_ADDR_VAR 0 5
1968: PUSH
1969: LD_INT 22
1971: PUSH
1972: LD_INT 1
1974: PUSH
1975: EMPTY
1976: LIST
1977: LIST
1978: PUSH
1979: LD_INT 26
1981: PUSH
1982: LD_INT 1
1984: PUSH
1985: EMPTY
1986: LIST
1987: LIST
1988: PUSH
1989: EMPTY
1990: LIST
1991: LIST
1992: PUSH
1993: EMPTY
1994: LIST
1995: PPUSH
1996: CALL_OW 69
2000: PUSH
2001: LD_EXP 1
2005: PUSH
2006: LD_EXP 7
2010: PUSH
2011: LD_EXP 6
2015: PUSH
2016: LD_EXP 5
2020: PUSH
2021: LD_EXP 2
2025: PUSH
2026: LD_EXP 3
2030: PUSH
2031: LD_EXP 8
2035: PUSH
2036: EMPTY
2037: LIST
2038: LIST
2039: LIST
2040: LIST
2041: LIST
2042: LIST
2043: LIST
2044: DIFF
2045: ST_TO_ADDR
// if filter then
2046: LD_VAR 0 5
2050: IFFALSE 2111
// for i in filter do
2052: LD_ADDR_VAR 0 2
2056: PUSH
2057: LD_VAR 0 5
2061: PUSH
2062: FOR_IN
2063: IFFALSE 2109
// if GetSkill ( i , 4 ) >= 4 then
2065: LD_VAR 0 2
2069: PPUSH
2070: LD_INT 4
2072: PPUSH
2073: CALL_OW 259
2077: PUSH
2078: LD_INT 4
2080: GREATEREQUAL
2081: IFFALSE 2107
// begin deltaDoctor := i ;
2083: LD_ADDR_EXP 15
2087: PUSH
2088: LD_VAR 0 2
2092: ST_TO_ADDR
// SetClass ( deltaDoctor , 4 ) ;
2093: LD_EXP 15
2097: PPUSH
2098: LD_INT 4
2100: PPUSH
2101: CALL_OW 336
// break ;
2105: GO 2109
// end ;
2107: GO 2062
2109: POP
2110: POP
// end ; for i = 1 to 7 do
2111: LD_ADDR_VAR 0 2
2115: PUSH
2116: DOUBLE
2117: LD_INT 1
2119: DEC
2120: ST_TO_ADDR
2121: LD_INT 7
2123: PUSH
2124: FOR_TO
2125: IFFALSE 2262
// begin hc_gallery =  ;
2127: LD_ADDR_OWVAR 33
2131: PUSH
2132: LD_STRING 
2134: ST_TO_ADDR
// hc_name =  ;
2135: LD_ADDR_OWVAR 26
2139: PUSH
2140: LD_STRING 
2142: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 3 , 5 ) ) ;
2143: LD_INT 0
2145: PPUSH
2146: LD_INT 1
2148: PUSH
2149: LD_INT 2
2151: PUSH
2152: LD_INT 3
2154: PUSH
2155: LD_INT 4
2157: PUSH
2158: EMPTY
2159: LIST
2160: LIST
2161: LIST
2162: LIST
2163: PUSH
2164: LD_INT 1
2166: PPUSH
2167: LD_INT 4
2169: PPUSH
2170: CALL_OW 12
2174: ARRAY
2175: PPUSH
2176: LD_INT 3
2178: PPUSH
2179: LD_INT 5
2181: PPUSH
2182: CALL_OW 12
2186: PPUSH
2187: CALL_OW 380
// un = CreateHuman ;
2191: LD_ADDR_VAR 0 3
2195: PUSH
2196: CALL_OW 44
2200: ST_TO_ADDR
// randomsDelta := randomsDelta ^ un ;
2201: LD_ADDR_EXP 11
2205: PUSH
2206: LD_EXP 11
2210: PUSH
2211: LD_VAR 0 3
2215: ADD
2216: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
2217: LD_VAR 0 3
2221: PPUSH
2222: LD_VAR 0 4
2226: PUSH
2227: LD_INT 1
2229: ARRAY
2230: PPUSH
2231: CALL_OW 250
2235: PPUSH
2236: LD_VAR 0 4
2240: PUSH
2241: LD_INT 1
2243: ARRAY
2244: PPUSH
2245: CALL_OW 251
2249: PPUSH
2250: LD_INT 15
2252: PPUSH
2253: LD_INT 0
2255: PPUSH
2256: CALL_OW 50
// end ;
2260: GO 2124
2262: POP
2263: POP
// if deltaDoctor then
2264: LD_EXP 15
2268: IFFALSE 2272
// exit ;
2270: GO 2362
// hc_gallery = Dawkins ;
2272: LD_ADDR_OWVAR 33
2276: PUSH
2277: LD_STRING Dawkins
2279: ST_TO_ADDR
// hc_face_number := 1 ;
2280: LD_ADDR_OWVAR 34
2284: PUSH
2285: LD_INT 1
2287: ST_TO_ADDR
// hc_name = Dr. Adam Charles Dawkins ;
2288: LD_ADDR_OWVAR 26
2292: PUSH
2293: LD_STRING Dr. Adam Charles Dawkins
2295: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 6 ) ;
2296: LD_INT 1
2298: PPUSH
2299: LD_INT 4
2301: PPUSH
2302: LD_INT 6
2304: PPUSH
2305: CALL_OW 380
// deltaDoctor = CreateHuman ;
2309: LD_ADDR_EXP 15
2313: PUSH
2314: CALL_OW 44
2318: ST_TO_ADDR
// PlaceUnitXYR ( deltaDoctor , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
2319: LD_EXP 15
2323: PPUSH
2324: LD_VAR 0 4
2328: PUSH
2329: LD_INT 1
2331: ARRAY
2332: PPUSH
2333: CALL_OW 250
2337: PPUSH
2338: LD_VAR 0 4
2342: PUSH
2343: LD_INT 1
2345: ARRAY
2346: PPUSH
2347: CALL_OW 251
2351: PPUSH
2352: LD_INT 5
2354: PPUSH
2355: LD_INT 0
2357: PPUSH
2358: CALL_OW 50
// end ; end_of_file
2362: LD_VAR 0 1
2366: RET
// export function PrepareDeltaBase ; var i , j , building , buildings , lab , tmp ; begin
2367: LD_INT 0
2369: PPUSH
2370: PPUSH
2371: PPUSH
2372: PPUSH
2373: PPUSH
2374: PPUSH
2375: PPUSH
// buildings = LoadVariable ( buildingsInDelta , [ ] ) ;
2376: LD_ADDR_VAR 0 5
2380: PUSH
2381: LD_STRING buildingsInDelta
2383: PPUSH
2384: EMPTY
2385: PPUSH
2386: CALL_OW 30
2390: ST_TO_ADDR
// SetResourceVisibility ( 68 , 40 , 1 ) ;
2391: LD_INT 68
2393: PPUSH
2394: LD_INT 40
2396: PPUSH
2397: LD_INT 1
2399: PPUSH
2400: CALL_OW 441
// uc_side = 1 ;
2404: LD_ADDR_OWVAR 20
2408: PUSH
2409: LD_INT 1
2411: ST_TO_ADDR
// uc_nation = 1 ;
2412: LD_ADDR_OWVAR 21
2416: PUSH
2417: LD_INT 1
2419: ST_TO_ADDR
// for i = 1 to buildings do
2420: LD_ADDR_VAR 0 2
2424: PUSH
2425: DOUBLE
2426: LD_INT 1
2428: DEC
2429: ST_TO_ADDR
2430: LD_VAR 0 5
2434: PUSH
2435: FOR_TO
2436: IFFALSE 2734
// begin bc_type = buildings [ i ] [ 1 ] ;
2438: LD_ADDR_OWVAR 42
2442: PUSH
2443: LD_VAR 0 5
2447: PUSH
2448: LD_VAR 0 2
2452: ARRAY
2453: PUSH
2454: LD_INT 1
2456: ARRAY
2457: ST_TO_ADDR
// bc_level = buildings [ i ] [ 2 ] ;
2458: LD_ADDR_OWVAR 43
2462: PUSH
2463: LD_VAR 0 5
2467: PUSH
2468: LD_VAR 0 2
2472: ARRAY
2473: PUSH
2474: LD_INT 2
2476: ARRAY
2477: ST_TO_ADDR
// if bc_type = b_lab then
2478: LD_OWVAR 42
2482: PUSH
2483: LD_INT 6
2485: EQUAL
2486: IFFALSE 2504
// begin bc_kind1 = b_lab_basic ;
2488: LD_ADDR_OWVAR 44
2492: PUSH
2493: LD_INT 9
2495: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
2496: LD_ADDR_OWVAR 45
2500: PUSH
2501: LD_INT 9
2503: ST_TO_ADDR
// end ; if bc_type = b_lab_half or bc_type = b_lab_full then
2504: LD_OWVAR 42
2508: PUSH
2509: LD_INT 7
2511: EQUAL
2512: PUSH
2513: LD_OWVAR 42
2517: PUSH
2518: LD_INT 8
2520: EQUAL
2521: OR
2522: IFFALSE 2638
// begin if buildings [ i ] [ 6 ] then
2524: LD_VAR 0 5
2528: PUSH
2529: LD_VAR 0 2
2533: ARRAY
2534: PUSH
2535: LD_INT 6
2537: ARRAY
2538: IFFALSE 2560
// bc_kind1 = buildings [ i ] [ 6 ] ;
2540: LD_ADDR_OWVAR 44
2544: PUSH
2545: LD_VAR 0 5
2549: PUSH
2550: LD_VAR 0 2
2554: ARRAY
2555: PUSH
2556: LD_INT 6
2558: ARRAY
2559: ST_TO_ADDR
// if buildings [ i ] [ 7 ] then
2560: LD_VAR 0 5
2564: PUSH
2565: LD_VAR 0 2
2569: ARRAY
2570: PUSH
2571: LD_INT 7
2573: ARRAY
2574: IFFALSE 2596
// bc_kind2 = buildings [ i ] [ 7 ] ;
2576: LD_ADDR_OWVAR 45
2580: PUSH
2581: LD_VAR 0 5
2585: PUSH
2586: LD_VAR 0 2
2590: ARRAY
2591: PUSH
2592: LD_INT 7
2594: ARRAY
2595: ST_TO_ADDR
// if not buildings [ i ] [ 6 ] and not buildings [ i ] [ 7 ] then
2596: LD_VAR 0 5
2600: PUSH
2601: LD_VAR 0 2
2605: ARRAY
2606: PUSH
2607: LD_INT 6
2609: ARRAY
2610: NOT
2611: PUSH
2612: LD_VAR 0 5
2616: PUSH
2617: LD_VAR 0 2
2621: ARRAY
2622: PUSH
2623: LD_INT 7
2625: ARRAY
2626: NOT
2627: AND
2628: IFFALSE 2638
// bc_type := b_lab ;
2630: LD_ADDR_OWVAR 42
2634: PUSH
2635: LD_INT 6
2637: ST_TO_ADDR
// end ; building = CreateAndPlaceBuildingXYD ( buildings [ i ] [ 3 ] , buildings [ i ] [ 4 ] , buildings [ i ] [ 5 ] ) ;
2638: LD_ADDR_VAR 0 4
2642: PUSH
2643: LD_VAR 0 5
2647: PUSH
2648: LD_VAR 0 2
2652: ARRAY
2653: PUSH
2654: LD_INT 3
2656: ARRAY
2657: PPUSH
2658: LD_VAR 0 5
2662: PUSH
2663: LD_VAR 0 2
2667: ARRAY
2668: PUSH
2669: LD_INT 4
2671: ARRAY
2672: PPUSH
2673: LD_VAR 0 5
2677: PUSH
2678: LD_VAR 0 2
2682: ARRAY
2683: PUSH
2684: LD_INT 5
2686: ARRAY
2687: PPUSH
2688: CALL_OW 47
2692: ST_TO_ADDR
// if GetBType ( building ) = b_bunker then
2693: LD_VAR 0 4
2697: PPUSH
2698: CALL_OW 266
2702: PUSH
2703: LD_INT 32
2705: EQUAL
2706: IFFALSE 2732
// PlaceWeaponTurret ( building , buildings [ i ] [ 8 ] ) ;
2708: LD_VAR 0 4
2712: PPUSH
2713: LD_VAR 0 5
2717: PUSH
2718: LD_VAR 0 2
2722: ARRAY
2723: PUSH
2724: LD_INT 8
2726: ARRAY
2727: PPUSH
2728: CALL_OW 431
// end ;
2732: GO 2435
2734: POP
2735: POP
// lab = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
2736: LD_ADDR_VAR 0 6
2740: PUSH
2741: LD_INT 22
2743: PUSH
2744: LD_INT 1
2746: PUSH
2747: EMPTY
2748: LIST
2749: LIST
2750: PUSH
2751: LD_INT 2
2753: PUSH
2754: LD_INT 30
2756: PUSH
2757: LD_INT 6
2759: PUSH
2760: EMPTY
2761: LIST
2762: LIST
2763: PUSH
2764: LD_INT 30
2766: PUSH
2767: LD_INT 7
2769: PUSH
2770: EMPTY
2771: LIST
2772: LIST
2773: PUSH
2774: LD_INT 30
2776: PUSH
2777: LD_INT 8
2779: PUSH
2780: EMPTY
2781: LIST
2782: LIST
2783: PUSH
2784: EMPTY
2785: LIST
2786: LIST
2787: LIST
2788: LIST
2789: PUSH
2790: EMPTY
2791: LIST
2792: LIST
2793: PPUSH
2794: CALL_OW 69
2798: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) ;
2799: LD_ADDR_VAR 0 7
2803: PUSH
2804: LD_INT 22
2806: PUSH
2807: LD_INT 1
2809: PUSH
2810: EMPTY
2811: LIST
2812: LIST
2813: PUSH
2814: LD_INT 30
2816: PUSH
2817: LD_INT 0
2819: PUSH
2820: EMPTY
2821: LIST
2822: LIST
2823: PUSH
2824: EMPTY
2825: LIST
2826: LIST
2827: PPUSH
2828: CALL_OW 69
2832: ST_TO_ADDR
// if lab > 0 and tmp > 0 then
2833: LD_VAR 0 6
2837: PUSH
2838: LD_INT 0
2840: GREATER
2841: PUSH
2842: LD_VAR 0 7
2846: PUSH
2847: LD_INT 0
2849: GREATER
2850: AND
2851: IFFALSE 2861
// baseCorrect = 1 ;
2853: LD_ADDR_EXP 17
2857: PUSH
2858: LD_INT 1
2860: ST_TO_ADDR
// if baseCorrect = 0 then
2861: LD_EXP 17
2865: PUSH
2866: LD_INT 0
2868: EQUAL
2869: IFFALSE 3242
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
2871: LD_ADDR_VAR 0 2
2875: PUSH
2876: LD_INT 22
2878: PUSH
2879: LD_INT 1
2881: PUSH
2882: EMPTY
2883: LIST
2884: LIST
2885: PUSH
2886: LD_INT 21
2888: PUSH
2889: LD_INT 3
2891: PUSH
2892: EMPTY
2893: LIST
2894: LIST
2895: PUSH
2896: EMPTY
2897: LIST
2898: LIST
2899: PPUSH
2900: CALL_OW 69
2904: PUSH
2905: FOR_IN
2906: IFFALSE 2919
// RemoveUnit ( i ) ;
2908: LD_VAR 0 2
2912: PPUSH
2913: CALL_OW 64
2917: GO 2905
2919: POP
2920: POP
// uc_nation = 1 ;
2921: LD_ADDR_OWVAR 21
2925: PUSH
2926: LD_INT 1
2928: ST_TO_ADDR
// uc_side = 1 ;
2929: LD_ADDR_OWVAR 20
2933: PUSH
2934: LD_INT 1
2936: ST_TO_ADDR
// bc_level = 5 ;
2937: LD_ADDR_OWVAR 43
2941: PUSH
2942: LD_INT 5
2944: ST_TO_ADDR
// bc_type = b_depot ;
2945: LD_ADDR_OWVAR 42
2949: PUSH
2950: LD_INT 0
2952: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 50 , 22 , 0 ) ;
2953: LD_INT 50
2955: PPUSH
2956: LD_INT 22
2958: PPUSH
2959: LD_INT 0
2961: PPUSH
2962: CALL_OW 47
// bc_type = b_bunker ;
2966: LD_ADDR_OWVAR 42
2970: PUSH
2971: LD_INT 32
2973: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( 68 , 24 , 4 ) ;
2974: LD_ADDR_VAR 0 4
2978: PUSH
2979: LD_INT 68
2981: PPUSH
2982: LD_INT 24
2984: PPUSH
2985: LD_INT 4
2987: PPUSH
2988: CALL_OW 47
2992: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ Rand ( 1 , 2 ) ] ) ;
2993: LD_VAR 0 4
2997: PPUSH
2998: LD_INT 4
3000: PUSH
3001: LD_INT 11
3003: PUSH
3004: EMPTY
3005: LIST
3006: LIST
3007: PUSH
3008: LD_INT 1
3010: PPUSH
3011: LD_INT 2
3013: PPUSH
3014: CALL_OW 12
3018: ARRAY
3019: PPUSH
3020: CALL_OW 431
// building = CreateAndPlaceBuildingXYD ( 71 , 34 , 4 ) ;
3024: LD_ADDR_VAR 0 4
3028: PUSH
3029: LD_INT 71
3031: PPUSH
3032: LD_INT 34
3034: PPUSH
3035: LD_INT 4
3037: PPUSH
3038: CALL_OW 47
3042: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ Rand ( 1 , 2 ) ] ) ;
3043: LD_VAR 0 4
3047: PPUSH
3048: LD_INT 4
3050: PUSH
3051: LD_INT 11
3053: PUSH
3054: EMPTY
3055: LIST
3056: LIST
3057: PUSH
3058: LD_INT 1
3060: PPUSH
3061: LD_INT 2
3063: PPUSH
3064: CALL_OW 12
3068: ARRAY
3069: PPUSH
3070: CALL_OW 431
// bc_type = 31 ;
3074: LD_ADDR_OWVAR 42
3078: PUSH
3079: LD_INT 31
3081: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 51 , 7 , 3 ) ;
3082: LD_INT 51
3084: PPUSH
3085: LD_INT 7
3087: PPUSH
3088: LD_INT 3
3090: PPUSH
3091: CALL_OW 47
// bc_type = b_oil_mine ;
3095: LD_ADDR_OWVAR 42
3099: PUSH
3100: LD_INT 29
3102: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 68 , 40 , 1 ) ;
3103: LD_INT 68
3105: PPUSH
3106: LD_INT 40
3108: PPUSH
3109: LD_INT 1
3111: PPUSH
3112: CALL_OW 47
// bc_type = b_workshop ;
3116: LD_ADDR_OWVAR 42
3120: PUSH
3121: LD_INT 2
3123: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 20 , 2 ) ;
3124: LD_INT 38
3126: PPUSH
3127: LD_INT 20
3129: PPUSH
3130: LD_INT 2
3132: PPUSH
3133: CALL_OW 47
// bc_type = b_armoury ;
3137: LD_ADDR_OWVAR 42
3141: PUSH
3142: LD_INT 4
3144: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 20 , 2 ) ;
3145: LD_INT 38
3147: PPUSH
3148: LD_INT 20
3150: PPUSH
3151: LD_INT 2
3153: PPUSH
3154: CALL_OW 47
// bc_type = b_solar_power ;
3158: LD_ADDR_OWVAR 42
3162: PUSH
3163: LD_INT 27
3165: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 46 , 12 , 1 ) ;
3166: LD_INT 46
3168: PPUSH
3169: LD_INT 12
3171: PPUSH
3172: LD_INT 1
3174: PPUSH
3175: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 48 , 11 , 2 ) ;
3179: LD_INT 48
3181: PPUSH
3182: LD_INT 11
3184: PPUSH
3185: LD_INT 2
3187: PPUSH
3188: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 49 , 11 , 3 ) ;
3192: LD_INT 49
3194: PPUSH
3195: LD_INT 11
3197: PPUSH
3198: LD_INT 3
3200: PPUSH
3201: CALL_OW 47
// bc_type = b_lab_half ;
3205: LD_ADDR_OWVAR 42
3209: PUSH
3210: LD_INT 7
3212: ST_TO_ADDR
// bc_kind1 = b_lab_opto ;
3213: LD_ADDR_OWVAR 44
3217: PUSH
3218: LD_INT 15
3220: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
3221: LD_ADDR_OWVAR 45
3225: PUSH
3226: LD_INT 9
3228: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 42 , 15 , 2 ) ;
3229: LD_INT 42
3231: PPUSH
3232: LD_INT 15
3234: PPUSH
3235: LD_INT 2
3237: PPUSH
3238: CALL_OW 47
// end ; end ; end_of_file
3242: LD_VAR 0 1
3246: RET
// every 1 do var i , j , tmp ;
3247: GO 3249
3249: DISABLE
3250: LD_INT 0
3252: PPUSH
3253: PPUSH
3254: PPUSH
// begin InGameOn ;
3255: CALL_OW 8
// CenterNowOnUnits ( lab [ 1 ] ) ;
3259: LD_EXP 19
3263: PUSH
3264: LD_INT 1
3266: ARRAY
3267: PPUSH
3268: CALL_OW 87
// if IsOK ( Denis ) then
3272: LD_EXP 3
3276: PPUSH
3277: CALL_OW 302
3281: IFFALSE 3309
// begin SetTech ( tech_radar , 1 , state_researched ) ;
3283: LD_INT 6
3285: PPUSH
3286: LD_INT 1
3288: PPUSH
3289: LD_INT 2
3291: PPUSH
3292: CALL_OW 322
// SetRestrict ( b_ext_radar , 1 , true ) ;
3296: LD_INT 20
3298: PPUSH
3299: LD_INT 1
3301: PPUSH
3302: LD_INT 1
3304: PPUSH
3305: CALL_OW 324
// end ; CenterNowOnUnits ( JMM ) ;
3309: LD_EXP 1
3313: PPUSH
3314: CALL_OW 87
// ComTurnUnit ( JMM , DeltaDoctor ) ;
3318: LD_EXP 1
3322: PPUSH
3323: LD_EXP 15
3327: PPUSH
3328: CALL_OW 119
// repeat wait ( 0 0$1 ) ;
3332: LD_INT 35
3334: PPUSH
3335: CALL_OW 67
// ComMoveUnit ( DeltaDoctor , JMM ) ;
3339: LD_EXP 15
3343: PPUSH
3344: LD_EXP 1
3348: PPUSH
3349: CALL_OW 112
// until GetDistUnits ( JMM , DeltaDoctor ) < 5 ;
3353: LD_EXP 1
3357: PPUSH
3358: LD_EXP 15
3362: PPUSH
3363: CALL_OW 296
3367: PUSH
3368: LD_INT 5
3370: LESS
3371: IFFALSE 3332
// ComTurnUnit ( DeltaDoctor , JMM ) ;
3373: LD_EXP 15
3377: PPUSH
3378: LD_EXP 1
3382: PPUSH
3383: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
3387: LD_EXP 1
3391: PPUSH
3392: LD_STRING D1-JMM-1
3394: PPUSH
3395: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-1 ) ;
3399: LD_EXP 15
3403: PPUSH
3404: LD_STRING D1-Sci-1
3406: PPUSH
3407: CALL_OW 88
// ComEnterUnit ( [ JMM , DeltaDoctor , Denis ] , lab [ 1 ] ) ;
3411: LD_EXP 1
3415: PUSH
3416: LD_EXP 15
3420: PUSH
3421: LD_EXP 3
3425: PUSH
3426: EMPTY
3427: LIST
3428: LIST
3429: LIST
3430: PPUSH
3431: LD_EXP 19
3435: PUSH
3436: LD_INT 1
3438: ARRAY
3439: PPUSH
3440: CALL_OW 120
// end ;
3444: PPOPN 3
3446: END
// every 0 0$2 trigger IsInUnit ( JMM ) = lab [ 1 ] and IsInUnit ( DeltaDoctor ) = lab [ 1 ] do var i , j , tmp ;
3447: LD_EXP 1
3451: PPUSH
3452: CALL_OW 310
3456: PUSH
3457: LD_EXP 19
3461: PUSH
3462: LD_INT 1
3464: ARRAY
3465: EQUAL
3466: PUSH
3467: LD_EXP 15
3471: PPUSH
3472: CALL_OW 310
3476: PUSH
3477: LD_EXP 19
3481: PUSH
3482: LD_INT 1
3484: ARRAY
3485: EQUAL
3486: AND
3487: IFFALSE 4033
3489: GO 3491
3491: DISABLE
3492: LD_INT 0
3494: PPUSH
3495: PPUSH
3496: PPUSH
// begin CenterNowOnUnits ( lab [ 1 ] ) ;
3497: LD_EXP 19
3501: PUSH
3502: LD_INT 1
3504: ARRAY
3505: PPUSH
3506: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
3510: LD_EXP 1
3514: PPUSH
3515: LD_STRING D1-JMM-2
3517: PPUSH
3518: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-2 ) ;
3522: LD_EXP 15
3526: PPUSH
3527: LD_STRING D1-Sci-2
3529: PPUSH
3530: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
3534: LD_EXP 1
3538: PPUSH
3539: LD_STRING D1-JMM-3
3541: PPUSH
3542: CALL_OW 88
// if IsOK ( Denis ) then
3546: LD_EXP 3
3550: PPUSH
3551: CALL_OW 302
3555: IFFALSE 3571
// Say ( DeltaDoctor , D1-Sci-3 ) else
3557: LD_EXP 15
3561: PPUSH
3562: LD_STRING D1-Sci-3
3564: PPUSH
3565: CALL_OW 88
3569: GO 3583
// Say ( DeltaDoctor , D1-Sci-3a ) ;
3571: LD_EXP 15
3575: PPUSH
3576: LD_STRING D1-Sci-3a
3578: PPUSH
3579: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
3583: LD_EXP 1
3587: PPUSH
3588: LD_STRING D1-JMM-4
3590: PPUSH
3591: CALL_OW 88
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
3595: LD_ADDR_VAR 0 3
3599: PUSH
3600: LD_INT 22
3602: PUSH
3603: LD_INT 1
3605: PUSH
3606: EMPTY
3607: LIST
3608: LIST
3609: PUSH
3610: LD_INT 25
3612: PUSH
3613: LD_INT 4
3615: PUSH
3616: EMPTY
3617: LIST
3618: LIST
3619: PUSH
3620: LD_INT 3
3622: PUSH
3623: LD_INT 54
3625: PUSH
3626: EMPTY
3627: LIST
3628: PUSH
3629: EMPTY
3630: LIST
3631: LIST
3632: PUSH
3633: EMPTY
3634: LIST
3635: LIST
3636: LIST
3637: PPUSH
3638: CALL_OW 69
3642: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 0 ] ) do
3643: LD_ADDR_VAR 0 1
3647: PUSH
3648: LD_INT 22
3650: PUSH
3651: LD_INT 0
3653: PUSH
3654: EMPTY
3655: LIST
3656: LIST
3657: PPUSH
3658: CALL_OW 69
3662: PUSH
3663: FOR_IN
3664: IFFALSE 3714
// for j in tmp do
3666: LD_ADDR_VAR 0 2
3670: PUSH
3671: LD_VAR 0 3
3675: PUSH
3676: FOR_IN
3677: IFFALSE 3710
// AddComTameXY ( j , GetX ( i ) , GetY ( i ) ) ;
3679: LD_VAR 0 2
3683: PPUSH
3684: LD_VAR 0 1
3688: PPUSH
3689: CALL_OW 250
3693: PPUSH
3694: LD_VAR 0 1
3698: PPUSH
3699: CALL_OW 251
3703: PPUSH
3704: CALL_OW 191
3708: GO 3676
3710: POP
3711: POP
3712: GO 3663
3714: POP
3715: POP
// Say ( DeltaDoctor , D1-Sci-4 ) ;
3716: LD_EXP 15
3720: PPUSH
3721: LD_STRING D1-Sci-4
3723: PPUSH
3724: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
3728: LD_EXP 1
3732: PPUSH
3733: LD_STRING D1-JMM-5
3735: PPUSH
3736: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-5 ) ;
3740: LD_EXP 15
3744: PPUSH
3745: LD_STRING D1-Sci-5
3747: PPUSH
3748: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
3752: LD_EXP 1
3756: PPUSH
3757: LD_STRING D1-JMM-6
3759: PPUSH
3760: CALL_OW 88
// SayRadio ( Harisson , D1-Har-6 ) ;
3764: LD_EXP 16
3768: PPUSH
3769: LD_STRING D1-Har-6
3771: PPUSH
3772: CALL_OW 94
// Say ( JMM , D1-JMM-7 ) ;
3776: LD_EXP 1
3780: PPUSH
3781: LD_STRING D1-JMM-7
3783: PPUSH
3784: CALL_OW 88
// SayRadio ( Harisson , D1-Har-7 ) ;
3788: LD_EXP 16
3792: PPUSH
3793: LD_STRING D1-Har-7
3795: PPUSH
3796: CALL_OW 94
// if IsOK ( Denis ) then
3800: LD_EXP 3
3804: PPUSH
3805: CALL_OW 302
3809: IFFALSE 3823
// Say ( JMM , D1-JMM-8 ) ;
3811: LD_EXP 1
3815: PPUSH
3816: LD_STRING D1-JMM-8
3818: PPUSH
3819: CALL_OW 88
// Say ( JMM , D1-JMM-8a ) ;
3823: LD_EXP 1
3827: PPUSH
3828: LD_STRING D1-JMM-8a
3830: PPUSH
3831: CALL_OW 88
// SayRadio ( Harisson , D1-Har-8 ) ;
3835: LD_EXP 16
3839: PPUSH
3840: LD_STRING D1-Har-8
3842: PPUSH
3843: CALL_OW 94
// Say ( JMM , D1-JMM-9 ) ;
3847: LD_EXP 1
3851: PPUSH
3852: LD_STRING D1-JMM-9
3854: PPUSH
3855: CALL_OW 88
// SayRadio ( Harisson , D1-Har-9 ) ;
3859: LD_EXP 16
3863: PPUSH
3864: LD_STRING D1-Har-9
3866: PPUSH
3867: CALL_OW 94
// Say ( JMM , D1-JMM-10 ) ;
3871: LD_EXP 1
3875: PPUSH
3876: LD_STRING D1-JMM-10
3878: PPUSH
3879: CALL_OW 88
// if IsOK ( Denis ) then
3883: LD_EXP 3
3887: PPUSH
3888: CALL_OW 302
3892: IFFALSE 3906
// Say ( JMM , D1-JMM-10a ) ;
3894: LD_EXP 1
3898: PPUSH
3899: LD_STRING D1-JMM-10a
3901: PPUSH
3902: CALL_OW 88
// SelectAndSaveCharacters ;
3906: CALL 4544 0 0
// SetResourceType ( GetBase ( lab [ 1 ] ) , 1 , 250 ) ;
3910: LD_EXP 19
3914: PUSH
3915: LD_INT 1
3917: ARRAY
3918: PPUSH
3919: CALL_OW 274
3923: PPUSH
3924: LD_INT 1
3926: PPUSH
3927: LD_INT 250
3929: PPUSH
3930: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) > 0 then
3934: LD_INT 22
3936: PUSH
3937: LD_INT 1
3939: PUSH
3940: EMPTY
3941: LIST
3942: LIST
3943: PUSH
3944: LD_INT 30
3946: PUSH
3947: LD_INT 29
3949: PUSH
3950: EMPTY
3951: LIST
3952: LIST
3953: PUSH
3954: EMPTY
3955: LIST
3956: LIST
3957: PPUSH
3958: CALL_OW 69
3962: PUSH
3963: LD_INT 0
3965: GREATER
3966: IFFALSE 3992
// SetResourceType ( GetBase ( lab [ 1 ] ) , 2 , 300 ) ;
3968: LD_EXP 19
3972: PUSH
3973: LD_INT 1
3975: ARRAY
3976: PPUSH
3977: CALL_OW 274
3981: PPUSH
3982: LD_INT 2
3984: PPUSH
3985: LD_INT 300
3987: PPUSH
3988: CALL_OW 277
// InGameOff ;
3992: CALL_OW 9
// Query ( Q1 ) ;
3996: LD_STRING Q1
3998: PPUSH
3999: CALL_OW 97
// SetAreaMapShow ( ExitArea , 1 ) ;
4003: LD_INT 3
4005: PPUSH
4006: LD_INT 1
4008: PPUSH
4009: CALL_OW 424
// if IsInUnit ( JMM ) then
4013: LD_EXP 1
4017: PPUSH
4018: CALL_OW 310
4022: IFFALSE 4033
// ComExitBuilding ( JMM ) ;
4024: LD_EXP 1
4028: PPUSH
4029: CALL_OW 122
// end ;
4033: PPOPN 3
4035: END
// every 0 0$1 trigger FilterUnitsExceptArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do var i , cargoType ;
4036: LD_INT 3
4038: PPUSH
4039: LD_INT 22
4041: PUSH
4042: LD_INT 1
4044: PUSH
4045: EMPTY
4046: LIST
4047: LIST
4048: PUSH
4049: LD_INT 21
4051: PUSH
4052: LD_INT 1
4054: PUSH
4055: EMPTY
4056: LIST
4057: LIST
4058: PUSH
4059: EMPTY
4060: LIST
4061: LIST
4062: PPUSH
4063: CALL_OW 71
4067: PUSH
4068: LD_INT 0
4070: EQUAL
4071: IFFALSE 4389
4073: GO 4075
4075: DISABLE
4076: LD_INT 0
4078: PPUSH
4079: PPUSH
// begin if FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) > 0 then
4080: LD_INT 3
4082: PPUSH
4083: LD_INT 21
4085: PUSH
4086: LD_INT 2
4088: PUSH
4089: EMPTY
4090: LIST
4091: LIST
4092: PUSH
4093: LD_INT 3
4095: PUSH
4096: LD_INT 58
4098: PUSH
4099: EMPTY
4100: LIST
4101: PUSH
4102: EMPTY
4103: LIST
4104: LIST
4105: PUSH
4106: EMPTY
4107: LIST
4108: LIST
4109: PPUSH
4110: CALL_OW 70
4114: PUSH
4115: LD_INT 0
4117: GREATER
4118: IFFALSE 4375
// begin for i in FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) do
4120: LD_ADDR_VAR 0 1
4124: PUSH
4125: LD_INT 3
4127: PPUSH
4128: LD_INT 21
4130: PUSH
4131: LD_INT 2
4133: PUSH
4134: EMPTY
4135: LIST
4136: LIST
4137: PUSH
4138: LD_INT 3
4140: PUSH
4141: LD_INT 58
4143: PUSH
4144: EMPTY
4145: LIST
4146: PUSH
4147: EMPTY
4148: LIST
4149: LIST
4150: PUSH
4151: EMPTY
4152: LIST
4153: LIST
4154: PPUSH
4155: CALL_OW 70
4159: PUSH
4160: FOR_IN
4161: IFFALSE 4361
// begin cargoType = GetCargoType ( i ) ;
4163: LD_ADDR_VAR 0 2
4167: PUSH
4168: LD_VAR 0 1
4172: PPUSH
4173: CALL_OW 288
4177: ST_TO_ADDR
// if GetWeapon ( i ) = us_cargo_bay then
4178: LD_VAR 0 1
4182: PPUSH
4183: CALL_OW 264
4187: PUSH
4188: LD_INT 12
4190: EQUAL
4191: IFFALSE 4288
// begin yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , cargoType , GetCargo ( i , cargoType ) ] ] ;
4193: LD_ADDR_EXP 14
4197: PUSH
4198: LD_EXP 14
4202: PUSH
4203: LD_VAR 0 1
4207: PPUSH
4208: CALL_OW 248
4212: PUSH
4213: LD_VAR 0 1
4217: PPUSH
4218: CALL_OW 265
4222: PUSH
4223: LD_VAR 0 1
4227: PPUSH
4228: CALL_OW 262
4232: PUSH
4233: LD_VAR 0 1
4237: PPUSH
4238: CALL_OW 263
4242: PUSH
4243: LD_VAR 0 1
4247: PPUSH
4248: CALL_OW 264
4252: PUSH
4253: LD_VAR 0 2
4257: PUSH
4258: LD_VAR 0 1
4262: PPUSH
4263: LD_VAR 0 2
4267: PPUSH
4268: CALL_OW 289
4272: PUSH
4273: EMPTY
4274: LIST
4275: LIST
4276: LIST
4277: LIST
4278: LIST
4279: LIST
4280: LIST
4281: PUSH
4282: EMPTY
4283: LIST
4284: ADD
4285: ST_TO_ADDR
// end else
4286: GO 4359
// begin yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ] ;
4288: LD_ADDR_EXP 14
4292: PUSH
4293: LD_EXP 14
4297: PUSH
4298: LD_VAR 0 1
4302: PPUSH
4303: CALL_OW 248
4307: PUSH
4308: LD_VAR 0 1
4312: PPUSH
4313: CALL_OW 265
4317: PUSH
4318: LD_VAR 0 1
4322: PPUSH
4323: CALL_OW 262
4327: PUSH
4328: LD_VAR 0 1
4332: PPUSH
4333: CALL_OW 263
4337: PUSH
4338: LD_VAR 0 1
4342: PPUSH
4343: CALL_OW 264
4347: PUSH
4348: EMPTY
4349: LIST
4350: LIST
4351: LIST
4352: LIST
4353: LIST
4354: PUSH
4355: EMPTY
4356: LIST
4357: ADD
4358: ST_TO_ADDR
// end ; end ;
4359: GO 4160
4361: POP
4362: POP
// SaveVariable ( yourVehicles , 06_VehiclesIn06_1 ) ;
4363: LD_EXP 14
4367: PPUSH
4368: LD_STRING 06_VehiclesIn06_1
4370: PPUSH
4371: CALL_OW 39
// end ; SaveCargos ;
4375: CALL 4392 0 0
// ChangeMap ( 6 , %_cont ) ;
4379: LD_INT 6
4381: PPUSH
4382: LD_STRING %_cont
4384: PPUSH
4385: CALL_OW 340
// end ;
4389: PPOPN 2
4391: END
// export function SaveCargos ; var i ; begin
4392: LD_INT 0
4394: PPUSH
4395: PPUSH
// for i in FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) do
4396: LD_ADDR_VAR 0 2
4400: PUSH
4401: LD_INT 3
4403: PPUSH
4404: LD_INT 22
4406: PUSH
4407: LD_INT 1
4409: PUSH
4410: EMPTY
4411: LIST
4412: LIST
4413: PUSH
4414: LD_INT 34
4416: PUSH
4417: LD_INT 12
4419: PUSH
4420: EMPTY
4421: LIST
4422: LIST
4423: PUSH
4424: EMPTY
4425: LIST
4426: LIST
4427: PPUSH
4428: CALL_OW 70
4432: PUSH
4433: FOR_IN
4434: IFFALSE 4462
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
4436: LD_ADDR_EXP 20
4440: PUSH
4441: LD_EXP 20
4445: PUSH
4446: LD_VAR 0 2
4450: PPUSH
4451: CALL 5596 0 1
4455: PUSH
4456: EMPTY
4457: LIST
4458: ADD
4459: ST_TO_ADDR
4460: GO 4433
4462: POP
4463: POP
// SaveVariable ( resources , 06_ResourcesInCargo06_1 ) ;
4464: LD_EXP 20
4468: PPUSH
4469: LD_STRING 06_ResourcesInCargo06_1
4471: PPUSH
4472: CALL_OW 39
// end ; end_of_file
4476: LD_VAR 0 1
4480: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
4481: LD_INT 0
4483: PPUSH
4484: PPUSH
// if exist_mode then
4485: LD_VAR 0 2
4489: IFFALSE 4514
// unit := CreateCharacter ( mission_prefix_prev & ident ) else
4491: LD_ADDR_VAR 0 4
4495: PUSH
4496: LD_EXP 22
4500: PUSH
4501: LD_VAR 0 1
4505: STR
4506: PPUSH
4507: CALL_OW 34
4511: ST_TO_ADDR
4512: GO 4529
// unit := NewCharacter ( ident ) ;
4514: LD_ADDR_VAR 0 4
4518: PUSH
4519: LD_VAR 0 1
4523: PPUSH
4524: CALL_OW 25
4528: ST_TO_ADDR
// result := unit ;
4529: LD_ADDR_VAR 0 3
4533: PUSH
4534: LD_VAR 0 4
4538: ST_TO_ADDR
// end ;
4539: LD_VAR 0 3
4543: RET
// export function SelectAndSaveCharacters ; var i , yourPeople , selectedPeople , test ; begin
4544: LD_INT 0
4546: PPUSH
4547: PPUSH
4548: PPUSH
4549: PPUSH
4550: PPUSH
// yourPeople = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , DeltaDoctor , Denis ] ;
4551: LD_ADDR_VAR 0 3
4555: PUSH
4556: LD_INT 22
4558: PUSH
4559: LD_INT 1
4561: PUSH
4562: EMPTY
4563: LIST
4564: LIST
4565: PUSH
4566: LD_INT 21
4568: PUSH
4569: LD_INT 1
4571: PUSH
4572: EMPTY
4573: LIST
4574: LIST
4575: PUSH
4576: LD_INT 2
4578: PUSH
4579: LD_INT 25
4581: PUSH
4582: LD_INT 1
4584: PUSH
4585: EMPTY
4586: LIST
4587: LIST
4588: PUSH
4589: LD_INT 25
4591: PUSH
4592: LD_INT 2
4594: PUSH
4595: EMPTY
4596: LIST
4597: LIST
4598: PUSH
4599: LD_INT 25
4601: PUSH
4602: LD_INT 3
4604: PUSH
4605: EMPTY
4606: LIST
4607: LIST
4608: PUSH
4609: LD_INT 25
4611: PUSH
4612: LD_INT 4
4614: PUSH
4615: EMPTY
4616: LIST
4617: LIST
4618: PUSH
4619: EMPTY
4620: LIST
4621: LIST
4622: LIST
4623: LIST
4624: LIST
4625: PUSH
4626: EMPTY
4627: LIST
4628: LIST
4629: LIST
4630: PPUSH
4631: CALL_OW 69
4635: PUSH
4636: LD_EXP 1
4640: PUSH
4641: LD_EXP 15
4645: PUSH
4646: LD_EXP 3
4650: PUSH
4651: EMPTY
4652: LIST
4653: LIST
4654: LIST
4655: DIFF
4656: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , 5 , 5 , [ sel_change_class , JMM , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ yourPeople ^ [ sel_dont_change_class , sel_not_changeable , Denis , DeltaDoctor ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
4657: LD_ADDR_VAR 0 4
4661: PUSH
4662: LD_STRING text
4664: PPUSH
4665: LD_INT 5
4667: PPUSH
4668: LD_INT 5
4670: PPUSH
4671: LD_INT -5
4673: PUSH
4674: LD_EXP 1
4678: PUSH
4679: LD_INT -6
4681: PUSH
4682: LD_INT -2
4684: PUSH
4685: LD_INT -3
4687: PUSH
4688: LD_INT -5
4690: PUSH
4691: EMPTY
4692: LIST
4693: LIST
4694: LIST
4695: LIST
4696: LIST
4697: LIST
4698: PUSH
4699: LD_VAR 0 3
4703: ADD
4704: PUSH
4705: LD_INT -6
4707: PUSH
4708: LD_INT -4
4710: PUSH
4711: LD_EXP 3
4715: PUSH
4716: LD_EXP 15
4720: PUSH
4721: EMPTY
4722: LIST
4723: LIST
4724: LIST
4725: LIST
4726: ADD
4727: PPUSH
4728: LD_INT 1
4730: PUSH
4731: LD_INT 3
4733: PUSH
4734: LD_INT 2
4736: PUSH
4737: LD_INT 1
4739: PUSH
4740: EMPTY
4741: LIST
4742: LIST
4743: PUSH
4744: LD_INT 4
4746: PUSH
4747: EMPTY
4748: LIST
4749: LIST
4750: LIST
4751: LIST
4752: PPUSH
4753: CALL_OW 42
4757: ST_TO_ADDR
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
4758: LD_EXP 1
4762: PPUSH
4763: LD_EXP 21
4767: PUSH
4768: LD_STRING JMM
4770: STR
4771: PPUSH
4772: CALL_OW 38
// SaveCharacters ( DeltaDoctor , DeltaDoctor ) ;
4776: LD_EXP 15
4780: PPUSH
4781: LD_STRING DeltaDoctor
4783: PPUSH
4784: CALL_OW 38
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
4788: LD_EXP 3
4792: PPUSH
4793: LD_EXP 21
4797: PUSH
4798: LD_STRING Denis
4800: STR
4801: PPUSH
4802: CALL_OW 38
// if Lisa in selectedPeople then
4806: LD_EXP 4
4810: PUSH
4811: LD_VAR 0 4
4815: IN
4816: IFFALSE 4848
// begin SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
4818: LD_EXP 4
4822: PPUSH
4823: LD_EXP 21
4827: PUSH
4828: LD_STRING Lisa
4830: STR
4831: PPUSH
4832: CALL_OW 38
// SaveVariable ( 1 , LisaIn06 ) ;
4836: LD_INT 1
4838: PPUSH
4839: LD_STRING LisaIn06
4841: PPUSH
4842: CALL_OW 39
// end else
4846: GO 4869
// if IsOk ( Lisa ) then
4848: LD_EXP 4
4852: PPUSH
4853: CALL_OW 302
4857: IFFALSE 4869
// SaveVariable ( 1 , LisaStayInDelta ) ;
4859: LD_INT 1
4861: PPUSH
4862: LD_STRING LisaStayInDelta
4864: PPUSH
4865: CALL_OW 39
// if Bobby in selectedPeople then
4869: LD_EXP 6
4873: PUSH
4874: LD_VAR 0 4
4878: IN
4879: IFFALSE 4911
// begin SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
4881: LD_EXP 6
4885: PPUSH
4886: LD_EXP 21
4890: PUSH
4891: LD_STRING Bobby
4893: STR
4894: PPUSH
4895: CALL_OW 38
// SaveVariable ( 1 , BobbyIn06 ) ;
4899: LD_INT 1
4901: PPUSH
4902: LD_STRING BobbyIn06
4904: PPUSH
4905: CALL_OW 39
// end else
4909: GO 4932
// if IsOk ( Bobby ) then
4911: LD_EXP 6
4915: PPUSH
4916: CALL_OW 302
4920: IFFALSE 4932
// SaveVariable ( 1 , BobbyStayInDelta ) ;
4922: LD_INT 1
4924: PPUSH
4925: LD_STRING BobbyStayInDelta
4927: PPUSH
4928: CALL_OW 39
// if Cyrus in selectedPeople then
4932: LD_EXP 7
4936: PUSH
4937: LD_VAR 0 4
4941: IN
4942: IFFALSE 4974
// begin SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
4944: LD_EXP 7
4948: PPUSH
4949: LD_EXP 21
4953: PUSH
4954: LD_STRING Cyrus
4956: STR
4957: PPUSH
4958: CALL_OW 38
// SaveVariable ( 1 , CyrusIn06 ) ;
4962: LD_INT 1
4964: PPUSH
4965: LD_STRING CyrusIn06
4967: PPUSH
4968: CALL_OW 39
// end else
4972: GO 4995
// if IsOk ( Cyrus ) then
4974: LD_EXP 7
4978: PPUSH
4979: CALL_OW 302
4983: IFFALSE 4995
// SaveVariable ( 1 , CyrusStayInDelta ) ;
4985: LD_INT 1
4987: PPUSH
4988: LD_STRING CyrusStayInDelta
4990: PPUSH
4991: CALL_OW 39
// if Frank in selectedPeople then
4995: LD_EXP 5
4999: PUSH
5000: LD_VAR 0 4
5004: IN
5005: IFFALSE 5037
// begin SaveCharacters ( Frank , mission_prefix & Frank ) ;
5007: LD_EXP 5
5011: PPUSH
5012: LD_EXP 21
5016: PUSH
5017: LD_STRING Frank
5019: STR
5020: PPUSH
5021: CALL_OW 38
// SaveVariable ( 1 , FrankIn06 ) ;
5025: LD_INT 1
5027: PPUSH
5028: LD_STRING FrankIn06
5030: PPUSH
5031: CALL_OW 39
// end else
5035: GO 5058
// if IsOk ( Frank ) then
5037: LD_EXP 5
5041: PPUSH
5042: CALL_OW 302
5046: IFFALSE 5058
// SaveVariable ( 1 , FrankStayInDelta ) ;
5048: LD_INT 1
5050: PPUSH
5051: LD_STRING FrankStayInDelta
5053: PPUSH
5054: CALL_OW 39
// if Brown in selectedPeople then
5058: LD_EXP 8
5062: PUSH
5063: LD_VAR 0 4
5067: IN
5068: IFFALSE 5100
// begin SaveCharacters ( Brown , mission_prefix & Brown ) ;
5070: LD_EXP 8
5074: PPUSH
5075: LD_EXP 21
5079: PUSH
5080: LD_STRING Brown
5082: STR
5083: PPUSH
5084: CALL_OW 38
// SaveVariable ( 1 , BrownIn06 ) ;
5088: LD_INT 1
5090: PPUSH
5091: LD_STRING BrownIn06
5093: PPUSH
5094: CALL_OW 39
// end else
5098: GO 5121
// if IsOk ( Brown ) then
5100: LD_EXP 8
5104: PPUSH
5105: CALL_OW 302
5109: IFFALSE 5121
// SaveVariable ( 1 , BrownStayInDelta ) ;
5111: LD_INT 1
5113: PPUSH
5114: LD_STRING BrownStayInDelta
5116: PPUSH
5117: CALL_OW 39
// if Donaldson in selectedPeople then
5121: LD_EXP 9
5125: PUSH
5126: LD_VAR 0 4
5130: IN
5131: IFFALSE 5163
// begin SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
5133: LD_EXP 9
5137: PPUSH
5138: LD_EXP 21
5142: PUSH
5143: LD_STRING Donaldson
5145: STR
5146: PPUSH
5147: CALL_OW 38
// SaveVariable ( 1 , DonaldsonIn06 ) ;
5151: LD_INT 1
5153: PPUSH
5154: LD_STRING DonaldsonIn06
5156: PPUSH
5157: CALL_OW 39
// end else
5161: GO 5184
// if IsOk ( Donaldson ) then
5163: LD_EXP 9
5167: PPUSH
5168: CALL_OW 302
5172: IFFALSE 5184
// SaveVariable ( 1 , DonaldsonStayInDelta ) ;
5174: LD_INT 1
5176: PPUSH
5177: LD_STRING DonaldsonStayInDelta
5179: PPUSH
5180: CALL_OW 39
// if Gladstone in selectedPeople then
5184: LD_EXP 2
5188: PUSH
5189: LD_VAR 0 4
5193: IN
5194: IFFALSE 5226
// begin SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
5196: LD_EXP 2
5200: PPUSH
5201: LD_EXP 21
5205: PUSH
5206: LD_STRING Gladstone
5208: STR
5209: PPUSH
5210: CALL_OW 38
// SaveVariable ( 1 , GladstoneIn06 ) ;
5214: LD_INT 1
5216: PPUSH
5217: LD_STRING GladstoneIn06
5219: PPUSH
5220: CALL_OW 39
// end else
5224: GO 5247
// if IsOk ( Gladstone ) then
5226: LD_EXP 2
5230: PPUSH
5231: CALL_OW 302
5235: IFFALSE 5247
// SaveVariable ( 1 , GladstoneStayInDelta ) ;
5237: LD_INT 1
5239: PPUSH
5240: LD_STRING GladstoneStayInDelta
5242: PPUSH
5243: CALL_OW 39
// SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 4 ) ;
5247: LD_INT 22
5249: PUSH
5250: LD_INT 1
5252: PUSH
5253: EMPTY
5254: LIST
5255: LIST
5256: PUSH
5257: LD_INT 21
5259: PUSH
5260: LD_INT 1
5262: PUSH
5263: EMPTY
5264: LIST
5265: LIST
5266: PUSH
5267: EMPTY
5268: LIST
5269: LIST
5270: PPUSH
5271: CALL_OW 69
5275: PPUSH
5276: LD_INT 4
5278: PPUSH
5279: CALL_OW 235
// for i in selectedPeople do
5283: LD_ADDR_VAR 0 2
5287: PUSH
5288: LD_VAR 0 4
5292: PUSH
5293: FOR_IN
5294: IFFALSE 5310
// SetSide ( i , 1 ) ;
5296: LD_VAR 0 2
5300: PPUSH
5301: LD_INT 1
5303: PPUSH
5304: CALL_OW 235
5308: GO 5293
5310: POP
5311: POP
// for i in yourApemans do
5312: LD_ADDR_VAR 0 2
5316: PUSH
5317: LD_EXP 13
5321: PUSH
5322: FOR_IN
5323: IFFALSE 5339
// SetSide ( i , 1 ) ;
5325: LD_VAR 0 2
5329: PPUSH
5330: LD_INT 1
5332: PPUSH
5333: CALL_OW 235
5337: GO 5322
5339: POP
5340: POP
// SetSide ( JMM , 1 ) ;
5341: LD_EXP 1
5345: PPUSH
5346: LD_INT 1
5348: PPUSH
5349: CALL_OW 235
// SetSkill ( yourApemans , 2 , 5 ) ;
5353: LD_EXP 13
5357: PPUSH
5358: LD_INT 2
5360: PPUSH
5361: LD_INT 5
5363: PPUSH
5364: CALL_OW 237
// SaveCharacters ( yourApemans , ApeIn06 ) ;
5368: LD_EXP 13
5372: PPUSH
5373: LD_STRING ApeIn06
5375: PPUSH
5376: CALL_OW 38
// SaveCharacters ( selectedPeople diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis ] , OthersIn06 ) ;
5380: LD_VAR 0 4
5384: PUSH
5385: LD_EXP 1
5389: PUSH
5390: LD_EXP 4
5394: PUSH
5395: LD_EXP 6
5399: PUSH
5400: LD_EXP 7
5404: PUSH
5405: LD_EXP 5
5409: PUSH
5410: LD_EXP 8
5414: PUSH
5415: LD_EXP 9
5419: PUSH
5420: LD_EXP 2
5424: PUSH
5425: LD_EXP 3
5429: PUSH
5430: EMPTY
5431: LIST
5432: LIST
5433: LIST
5434: LIST
5435: LIST
5436: LIST
5437: LIST
5438: LIST
5439: LIST
5440: DIFF
5441: PPUSH
5442: LD_STRING OthersIn06
5444: PPUSH
5445: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ DeltaDoctor , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis ] , OthersStayInDelta ) ;
5449: LD_INT 22
5451: PUSH
5452: LD_INT 4
5454: PUSH
5455: EMPTY
5456: LIST
5457: LIST
5458: PUSH
5459: LD_INT 2
5461: PUSH
5462: LD_INT 25
5464: PUSH
5465: LD_INT 1
5467: PUSH
5468: EMPTY
5469: LIST
5470: LIST
5471: PUSH
5472: LD_INT 25
5474: PUSH
5475: LD_INT 2
5477: PUSH
5478: EMPTY
5479: LIST
5480: LIST
5481: PUSH
5482: LD_INT 25
5484: PUSH
5485: LD_INT 3
5487: PUSH
5488: EMPTY
5489: LIST
5490: LIST
5491: PUSH
5492: LD_INT 25
5494: PUSH
5495: LD_INT 4
5497: PUSH
5498: EMPTY
5499: LIST
5500: LIST
5501: PUSH
5502: EMPTY
5503: LIST
5504: LIST
5505: LIST
5506: LIST
5507: LIST
5508: PUSH
5509: EMPTY
5510: LIST
5511: LIST
5512: PPUSH
5513: CALL_OW 69
5517: PUSH
5518: LD_EXP 15
5522: PUSH
5523: LD_EXP 4
5527: PUSH
5528: LD_EXP 6
5532: PUSH
5533: LD_EXP 7
5537: PUSH
5538: LD_EXP 5
5542: PUSH
5543: LD_EXP 8
5547: PUSH
5548: LD_EXP 9
5552: PUSH
5553: LD_EXP 2
5557: PUSH
5558: LD_EXP 3
5562: PUSH
5563: EMPTY
5564: LIST
5565: LIST
5566: LIST
5567: LIST
5568: LIST
5569: LIST
5570: LIST
5571: LIST
5572: LIST
5573: DIFF
5574: PPUSH
5575: LD_STRING OthersStayInDelta
5577: PPUSH
5578: CALL_OW 38
// ComStop ( selectedPeople ) ;
5582: LD_VAR 0 4
5586: PPUSH
5587: CALL_OW 141
// end ;
5591: LD_VAR 0 1
5595: RET
// export function GetMultiCargo ( cargo_bay ) ; var i ; begin
5596: LD_INT 0
5598: PPUSH
5599: PPUSH
// result := [ GetCargo ( cargo_bay , mat_cans ) , GetCargo ( cargo_bay , mat_oil ) , GetCargo ( cargo_bay , mat_siberit ) ] ;
5600: LD_ADDR_VAR 0 2
5604: PUSH
5605: LD_VAR 0 1
5609: PPUSH
5610: LD_INT 1
5612: PPUSH
5613: CALL_OW 289
5617: PUSH
5618: LD_VAR 0 1
5622: PPUSH
5623: LD_INT 2
5625: PPUSH
5626: CALL_OW 289
5630: PUSH
5631: LD_VAR 0 1
5635: PPUSH
5636: LD_INT 3
5638: PPUSH
5639: CALL_OW 289
5643: PUSH
5644: EMPTY
5645: LIST
5646: LIST
5647: LIST
5648: ST_TO_ADDR
// end ; end_of_file
5649: LD_VAR 0 2
5653: RET
// on Command ( comandid ) do var i ;
5654: LD_INT 0
5656: PPUSH
// begin if comandid = 65 then
5657: LD_VAR 0 1
5661: PUSH
5662: LD_INT 65
5664: EQUAL
5665: IFFALSE 5706
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
5667: LD_ADDR_VAR 0 2
5671: PUSH
5672: LD_INT 22
5674: PUSH
5675: LD_INT 1
5677: PUSH
5678: EMPTY
5679: LIST
5680: LIST
5681: PUSH
5682: EMPTY
5683: LIST
5684: PPUSH
5685: CALL_OW 69
5689: PUSH
5690: FOR_IN
5691: IFFALSE 5704
// ComStop ( i ) ;
5693: LD_VAR 0 2
5697: PPUSH
5698: CALL_OW 141
5702: GO 5690
5704: POP
5705: POP
// end ;
5706: PPOPN 2
5708: END
// on ApemanTamed ( apeman , human ) do var tmp ;
5709: LD_INT 0
5711: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
5712: LD_ADDR_VAR 0 3
5716: PUSH
5717: LD_INT 22
5719: PUSH
5720: LD_INT 1
5722: PUSH
5723: EMPTY
5724: LIST
5725: LIST
5726: PUSH
5727: LD_INT 21
5729: PUSH
5730: LD_INT 3
5732: PUSH
5733: EMPTY
5734: LIST
5735: LIST
5736: PUSH
5737: LD_INT 30
5739: PUSH
5740: LD_INT 0
5742: PUSH
5743: EMPTY
5744: LIST
5745: LIST
5746: PUSH
5747: EMPTY
5748: LIST
5749: LIST
5750: LIST
5751: PPUSH
5752: CALL_OW 69
5756: ST_TO_ADDR
// ComEnterUnit ( apeman , tmp [ 1 ] ) ;
5757: LD_VAR 0 1
5761: PPUSH
5762: LD_VAR 0 3
5766: PUSH
5767: LD_INT 1
5769: ARRAY
5770: PPUSH
5771: CALL_OW 120
// SetSide ( apeman , 4 ) ;
5775: LD_VAR 0 1
5779: PPUSH
5780: LD_INT 4
5782: PPUSH
5783: CALL_OW 235
// end ;
5787: PPOPN 3
5789: END
