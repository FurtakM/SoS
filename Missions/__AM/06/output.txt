// export JMM , Gladstone , Denis , Lisa , Frank , Bobby , Cyrus , Brown , Donaldson ; export others , randomsDelta ; export apemans , yourApemans ; export yourVehicles ; export DeltaDoctor ; export Harisson ; export selectedPeople ; export baseCorrect ; export cutscene ; export lab ; export resources ; export mission_prefix , mission_prefix_prev ; starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// FogOff ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 344
// baseCorrect := 0 ;
  15: LD_ADDR_EXP 18
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// cutscene := 1 ;
  23: LD_ADDR_EXP 19
  27: PUSH
  28: LD_INT 1
  30: ST_TO_ADDR
// apemans := [ ] ;
  31: LD_ADDR_EXP 12
  35: PUSH
  36: EMPTY
  37: ST_TO_ADDR
// yourApemans := [ ] ;
  38: LD_ADDR_EXP 13
  42: PUSH
  43: EMPTY
  44: ST_TO_ADDR
// yourVehicles := [ ] ;
  45: LD_ADDR_EXP 14
  49: PUSH
  50: EMPTY
  51: ST_TO_ADDR
// randomsDelta := [ ] ;
  52: LD_ADDR_EXP 11
  56: PUSH
  57: EMPTY
  58: ST_TO_ADDR
// resources := [ ] ;
  59: LD_ADDR_EXP 21
  63: PUSH
  64: EMPTY
  65: ST_TO_ADDR
// mission_prefix := 06_ ;
  66: LD_ADDR_EXP 22
  70: PUSH
  71: LD_STRING 06_
  73: ST_TO_ADDR
// mission_prefix_prev := 05_ ;
  74: LD_ADDR_EXP 23
  78: PUSH
  79: LD_STRING 05_
  81: ST_TO_ADDR
// CreateNature ;
  82: CALL 170 0 0
// PrepareDeltaBase ;
  86: CALL 2346 0 0
// LoadVehicles ;
  90: CALL 1458 0 0
// PrepareHeroes ;
  94: CALL 291 0 0
// PrepareRandoms ;
  98: CALL 1759 0 0
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
 102: LD_ADDR_EXP 20
 106: PUSH
 107: LD_INT 22
 109: PUSH
 110: LD_INT 1
 112: PUSH
 113: EMPTY
 114: LIST
 115: LIST
 116: PUSH
 117: LD_INT 2
 119: PUSH
 120: LD_INT 30
 122: PUSH
 123: LD_INT 6
 125: PUSH
 126: EMPTY
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 30
 132: PUSH
 133: LD_INT 7
 135: PUSH
 136: EMPTY
 137: LIST
 138: LIST
 139: PUSH
 140: LD_INT 30
 142: PUSH
 143: LD_INT 8
 145: PUSH
 146: EMPTY
 147: LIST
 148: LIST
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: LIST
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: PPUSH
 160: CALL_OW 69
 164: ST_TO_ADDR
// Action ;
 165: CALL 3228 0 0
// end ;
 169: END
// export function CreateNature ; var i ; begin
 170: LD_INT 0
 172: PPUSH
 173: PPUSH
// uc_side := 0 ;
 174: LD_ADDR_OWVAR 20
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// uc_nation := 0 ;
 182: LD_ADDR_OWVAR 21
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// for i = 1 to 4 do
 190: LD_ADDR_VAR 0 2
 194: PUSH
 195: DOUBLE
 196: LD_INT 1
 198: DEC
 199: ST_TO_ADDR
 200: LD_INT 4
 202: PUSH
 203: FOR_TO
 204: IFFALSE 284
// begin hc_gallery :=  ;
 206: LD_ADDR_OWVAR 33
 210: PUSH
 211: LD_STRING 
 213: ST_TO_ADDR
// hc_name :=  ;
 214: LD_ADDR_OWVAR 26
 218: PUSH
 219: LD_STRING 
 221: ST_TO_ADDR
// hc_attr := [ rand ( 10 , 11 ) , rand ( 10 , 12 ) ] ;
 222: LD_ADDR_OWVAR 29
 226: PUSH
 227: LD_INT 10
 229: PPUSH
 230: LD_INT 11
 232: PPUSH
 233: CALL_OW 12
 237: PUSH
 238: LD_INT 10
 240: PPUSH
 241: LD_INT 12
 243: PPUSH
 244: CALL_OW 12
 248: PUSH
 249: EMPTY
 250: LIST
 251: LIST
 252: ST_TO_ADDR
// hc_class := class_apeman ;
 253: LD_ADDR_OWVAR 28
 257: PUSH
 258: LD_INT 12
 260: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , 22 , 18 , 20 , false ) ;
 261: CALL_OW 44
 265: PPUSH
 266: LD_INT 22
 268: PPUSH
 269: LD_INT 18
 271: PPUSH
 272: LD_INT 20
 274: PPUSH
 275: LD_INT 0
 277: PPUSH
 278: CALL_OW 50
// end ;
 282: GO 203
 284: POP
 285: POP
// end ; end_of_file
 286: LD_VAR 0 1
 290: RET
// export function PrepareHeroes ; var i , tmp , ape , test ; begin
 291: LD_INT 0
 293: PPUSH
 294: PPUSH
 295: PPUSH
 296: PPUSH
 297: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
 298: LD_ADDR_VAR 0 3
 302: PUSH
 303: LD_INT 22
 305: PUSH
 306: LD_INT 1
 308: PUSH
 309: EMPTY
 310: LIST
 311: LIST
 312: PUSH
 313: LD_INT 21
 315: PUSH
 316: LD_INT 3
 318: PUSH
 319: EMPTY
 320: LIST
 321: LIST
 322: PUSH
 323: LD_INT 30
 325: PUSH
 326: LD_INT 0
 328: PUSH
 329: EMPTY
 330: LIST
 331: LIST
 332: PUSH
 333: EMPTY
 334: LIST
 335: LIST
 336: LIST
 337: PPUSH
 338: CALL_OW 69
 342: ST_TO_ADDR
// if tmp then
 343: LD_VAR 0 3
 347: IFFALSE 365
// SetBName ( tmp [ 1 ] , delta ) ;
 349: LD_VAR 0 3
 353: PUSH
 354: LD_INT 1
 356: ARRAY
 357: PPUSH
 358: LD_STRING delta
 360: PPUSH
 361: CALL_OW 500
// uc_side := 1 ;
 365: LD_ADDR_OWVAR 20
 369: PUSH
 370: LD_INT 1
 372: ST_TO_ADDR
// uc_nation := 1 ;
 373: LD_ADDR_OWVAR 21
 377: PUSH
 378: LD_INT 1
 380: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , true , mission_prefix_prev ) ;
 381: LD_ADDR_EXP 1
 385: PUSH
 386: LD_STRING JMM
 388: PPUSH
 389: LD_INT 1
 391: PPUSH
 392: LD_EXP 23
 396: PPUSH
 397: CALL 24904 0 3
 401: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
 402: LD_ADDR_EXP 16
 406: PUSH
 407: LD_STRING Harisson
 409: PPUSH
 410: LD_INT 0
 412: PPUSH
 413: LD_STRING 
 415: PPUSH
 416: CALL 24904 0 3
 420: ST_TO_ADDR
// PlaceUnitXYR ( JMM , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 421: LD_EXP 1
 425: PPUSH
 426: LD_VAR 0 3
 430: PUSH
 431: LD_INT 1
 433: ARRAY
 434: PPUSH
 435: CALL_OW 250
 439: PPUSH
 440: LD_VAR 0 3
 444: PUSH
 445: LD_INT 1
 447: ARRAY
 448: PPUSH
 449: CALL_OW 251
 453: PPUSH
 454: LD_INT 5
 456: PPUSH
 457: LD_INT 0
 459: PPUSH
 460: CALL_OW 50
// SetClass ( JMM , 1 ) ;
 464: LD_EXP 1
 468: PPUSH
 469: LD_INT 1
 471: PPUSH
 472: CALL_OW 336
// Gladstone := PrepareUnit ( Gladstone , true , mission_prefix_prev ) ;
 476: LD_ADDR_EXP 2
 480: PUSH
 481: LD_STRING Gladstone
 483: PPUSH
 484: LD_INT 1
 486: PPUSH
 487: LD_EXP 23
 491: PPUSH
 492: CALL 24904 0 3
 496: ST_TO_ADDR
// PlaceUnitXYR ( Gladstone , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 497: LD_EXP 2
 501: PPUSH
 502: LD_VAR 0 3
 506: PUSH
 507: LD_INT 1
 509: ARRAY
 510: PPUSH
 511: CALL_OW 250
 515: PPUSH
 516: LD_VAR 0 3
 520: PUSH
 521: LD_INT 1
 523: ARRAY
 524: PPUSH
 525: CALL_OW 251
 529: PPUSH
 530: LD_INT 5
 532: PPUSH
 533: LD_INT 0
 535: PPUSH
 536: CALL_OW 50
// SetClass ( Gladstone , 4 ) ;
 540: LD_EXP 2
 544: PPUSH
 545: LD_INT 4
 547: PPUSH
 548: CALL_OW 336
// Denis := PrepareUnit ( Denis , true , mission_prefix_prev ) ;
 552: LD_ADDR_EXP 3
 556: PUSH
 557: LD_STRING Denis
 559: PPUSH
 560: LD_INT 1
 562: PPUSH
 563: LD_EXP 23
 567: PPUSH
 568: CALL 24904 0 3
 572: ST_TO_ADDR
// PlaceUnitXYR ( Denis , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 573: LD_EXP 3
 577: PPUSH
 578: LD_VAR 0 3
 582: PUSH
 583: LD_INT 1
 585: ARRAY
 586: PPUSH
 587: CALL_OW 250
 591: PPUSH
 592: LD_VAR 0 3
 596: PUSH
 597: LD_INT 1
 599: ARRAY
 600: PPUSH
 601: CALL_OW 251
 605: PPUSH
 606: LD_INT 5
 608: PPUSH
 609: LD_INT 0
 611: PPUSH
 612: CALL_OW 50
// SetClass ( Denis , 4 ) ;
 616: LD_EXP 3
 620: PPUSH
 621: LD_INT 4
 623: PPUSH
 624: CALL_OW 336
// if LoadVariable ( FrankInDelta , 0 ) = 1 then
 628: LD_STRING FrankInDelta
 630: PPUSH
 631: LD_INT 0
 633: PPUSH
 634: CALL_OW 30
 638: PUSH
 639: LD_INT 1
 641: EQUAL
 642: IFFALSE 720
// begin Frank := PrepareUnit ( Frank , true , mission_prefix_prev ) ;
 644: LD_ADDR_EXP 5
 648: PUSH
 649: LD_STRING Frank
 651: PPUSH
 652: LD_INT 1
 654: PPUSH
 655: LD_EXP 23
 659: PPUSH
 660: CALL 24904 0 3
 664: ST_TO_ADDR
// PlaceUnitXYR ( Frank , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 665: LD_EXP 5
 669: PPUSH
 670: LD_VAR 0 3
 674: PUSH
 675: LD_INT 1
 677: ARRAY
 678: PPUSH
 679: CALL_OW 250
 683: PPUSH
 684: LD_VAR 0 3
 688: PUSH
 689: LD_INT 1
 691: ARRAY
 692: PPUSH
 693: CALL_OW 251
 697: PPUSH
 698: LD_INT 5
 700: PPUSH
 701: LD_INT 0
 703: PPUSH
 704: CALL_OW 50
// SetClass ( Frank , 1 ) ;
 708: LD_EXP 5
 712: PPUSH
 713: LD_INT 1
 715: PPUSH
 716: CALL_OW 336
// end ; if LoadVariable ( LisaInDelta , 0 ) = 1 then
 720: LD_STRING LisaInDelta
 722: PPUSH
 723: LD_INT 0
 725: PPUSH
 726: CALL_OW 30
 730: PUSH
 731: LD_INT 1
 733: EQUAL
 734: IFFALSE 812
// begin Lisa := PrepareUnit ( Lisa , true , mission_prefix_prev ) ;
 736: LD_ADDR_EXP 4
 740: PUSH
 741: LD_STRING Lisa
 743: PPUSH
 744: LD_INT 1
 746: PPUSH
 747: LD_EXP 23
 751: PPUSH
 752: CALL 24904 0 3
 756: ST_TO_ADDR
// PlaceUnitXYR ( Lisa , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 757: LD_EXP 4
 761: PPUSH
 762: LD_VAR 0 3
 766: PUSH
 767: LD_INT 1
 769: ARRAY
 770: PPUSH
 771: CALL_OW 250
 775: PPUSH
 776: LD_VAR 0 3
 780: PUSH
 781: LD_INT 1
 783: ARRAY
 784: PPUSH
 785: CALL_OW 251
 789: PPUSH
 790: LD_INT 5
 792: PPUSH
 793: LD_INT 0
 795: PPUSH
 796: CALL_OW 50
// SetClass ( Lisa , 1 ) ;
 800: LD_EXP 4
 804: PPUSH
 805: LD_INT 1
 807: PPUSH
 808: CALL_OW 336
// end ; if LoadVariable ( BobbyInDelta , 0 ) = 1 then
 812: LD_STRING BobbyInDelta
 814: PPUSH
 815: LD_INT 0
 817: PPUSH
 818: CALL_OW 30
 822: PUSH
 823: LD_INT 1
 825: EQUAL
 826: IFFALSE 904
// begin Bobby := PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 828: LD_ADDR_EXP 6
 832: PUSH
 833: LD_STRING Bobby
 835: PPUSH
 836: LD_INT 1
 838: PPUSH
 839: LD_EXP 23
 843: PPUSH
 844: CALL 24904 0 3
 848: ST_TO_ADDR
// PlaceUnitXYR ( Bobby , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 849: LD_EXP 6
 853: PPUSH
 854: LD_VAR 0 3
 858: PUSH
 859: LD_INT 1
 861: ARRAY
 862: PPUSH
 863: CALL_OW 250
 867: PPUSH
 868: LD_VAR 0 3
 872: PUSH
 873: LD_INT 1
 875: ARRAY
 876: PPUSH
 877: CALL_OW 251
 881: PPUSH
 882: LD_INT 5
 884: PPUSH
 885: LD_INT 0
 887: PPUSH
 888: CALL_OW 50
// SetClass ( Bobby , 1 ) ;
 892: LD_EXP 6
 896: PPUSH
 897: LD_INT 1
 899: PPUSH
 900: CALL_OW 336
// end ; if LoadVariable ( CyrusInDelta , 0 ) = 1 then
 904: LD_STRING CyrusInDelta
 906: PPUSH
 907: LD_INT 0
 909: PPUSH
 910: CALL_OW 30
 914: PUSH
 915: LD_INT 1
 917: EQUAL
 918: IFFALSE 996
// begin Cyrus := PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
 920: LD_ADDR_EXP 7
 924: PUSH
 925: LD_STRING Cyrus
 927: PPUSH
 928: LD_INT 1
 930: PPUSH
 931: LD_EXP 23
 935: PPUSH
 936: CALL 24904 0 3
 940: ST_TO_ADDR
// PlaceUnitXYR ( Cyrus , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 941: LD_EXP 7
 945: PPUSH
 946: LD_VAR 0 3
 950: PUSH
 951: LD_INT 1
 953: ARRAY
 954: PPUSH
 955: CALL_OW 250
 959: PPUSH
 960: LD_VAR 0 3
 964: PUSH
 965: LD_INT 1
 967: ARRAY
 968: PPUSH
 969: CALL_OW 251
 973: PPUSH
 974: LD_INT 5
 976: PPUSH
 977: LD_INT 0
 979: PPUSH
 980: CALL_OW 50
// SetClass ( Cyrus , 1 ) ;
 984: LD_EXP 7
 988: PPUSH
 989: LD_INT 1
 991: PPUSH
 992: CALL_OW 336
// end ; if LoadVariable ( DonaldsonInDelta , 0 ) = 1 then
 996: LD_STRING DonaldsonInDelta
 998: PPUSH
 999: LD_INT 0
1001: PPUSH
1002: CALL_OW 30
1006: PUSH
1007: LD_INT 1
1009: EQUAL
1010: IFFALSE 1088
// begin Donaldson := PrepareUnit ( Donaldson , true , mission_prefix_prev ) ;
1012: LD_ADDR_EXP 9
1016: PUSH
1017: LD_STRING Donaldson
1019: PPUSH
1020: LD_INT 1
1022: PPUSH
1023: LD_EXP 23
1027: PPUSH
1028: CALL 24904 0 3
1032: ST_TO_ADDR
// PlaceUnitXYR ( Donaldson , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1033: LD_EXP 9
1037: PPUSH
1038: LD_VAR 0 3
1042: PUSH
1043: LD_INT 1
1045: ARRAY
1046: PPUSH
1047: CALL_OW 250
1051: PPUSH
1052: LD_VAR 0 3
1056: PUSH
1057: LD_INT 1
1059: ARRAY
1060: PPUSH
1061: CALL_OW 251
1065: PPUSH
1066: LD_INT 5
1068: PPUSH
1069: LD_INT 0
1071: PPUSH
1072: CALL_OW 50
// SetClass ( Donaldson , 1 ) ;
1076: LD_EXP 9
1080: PPUSH
1081: LD_INT 1
1083: PPUSH
1084: CALL_OW 336
// end ; if LoadVariable ( BrownInDelta , 0 ) = 1 then
1088: LD_STRING BrownInDelta
1090: PPUSH
1091: LD_INT 0
1093: PPUSH
1094: CALL_OW 30
1098: PUSH
1099: LD_INT 1
1101: EQUAL
1102: IFFALSE 1180
// begin Brown := PrepareUnit ( Brown , true , mission_prefix_prev ) ;
1104: LD_ADDR_EXP 8
1108: PUSH
1109: LD_STRING Brown
1111: PPUSH
1112: LD_INT 1
1114: PPUSH
1115: LD_EXP 23
1119: PPUSH
1120: CALL 24904 0 3
1124: ST_TO_ADDR
// PlaceUnitXYR ( Brown , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1125: LD_EXP 8
1129: PPUSH
1130: LD_VAR 0 3
1134: PUSH
1135: LD_INT 1
1137: ARRAY
1138: PPUSH
1139: CALL_OW 250
1143: PPUSH
1144: LD_VAR 0 3
1148: PUSH
1149: LD_INT 1
1151: ARRAY
1152: PPUSH
1153: CALL_OW 251
1157: PPUSH
1158: LD_INT 5
1160: PPUSH
1161: LD_INT 0
1163: PPUSH
1164: CALL_OW 50
// SetClass ( Brown , 2 ) ;
1168: LD_EXP 8
1172: PPUSH
1173: LD_INT 2
1175: PPUSH
1176: CALL_OW 336
// end ; others := CreateCharacterSet ( othersInDelta ) ;
1180: LD_ADDR_EXP 10
1184: PUSH
1185: LD_STRING othersInDelta
1187: PPUSH
1188: CALL_OW 31
1192: ST_TO_ADDR
// for i in others do
1193: LD_ADDR_VAR 0 2
1197: PUSH
1198: LD_EXP 10
1202: PUSH
1203: FOR_IN
1204: IFFALSE 1251
// PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1206: LD_VAR 0 2
1210: PPUSH
1211: LD_VAR 0 3
1215: PUSH
1216: LD_INT 1
1218: ARRAY
1219: PPUSH
1220: CALL_OW 250
1224: PPUSH
1225: LD_VAR 0 3
1229: PUSH
1230: LD_INT 1
1232: ARRAY
1233: PPUSH
1234: CALL_OW 251
1238: PPUSH
1239: LD_INT 35
1241: PPUSH
1242: LD_INT 0
1244: PPUSH
1245: CALL_OW 50
1249: GO 1203
1251: POP
1252: POP
// apemans := CreateCharacterSet ( apeInDelta ) ;
1253: LD_ADDR_EXP 12
1257: PUSH
1258: LD_STRING apeInDelta
1260: PPUSH
1261: CALL_OW 31
1265: ST_TO_ADDR
// uc_nation := 0 ;
1266: LD_ADDR_OWVAR 21
1270: PUSH
1271: LD_INT 0
1273: ST_TO_ADDR
// if apemans > 5 then
1274: LD_EXP 12
1278: PUSH
1279: LD_INT 5
1281: GREATER
1282: IFFALSE 1377
// begin for i := 1 to 5 do
1284: LD_ADDR_VAR 0 2
1288: PUSH
1289: DOUBLE
1290: LD_INT 1
1292: DEC
1293: ST_TO_ADDR
1294: LD_INT 5
1296: PUSH
1297: FOR_TO
1298: IFFALSE 1373
// begin PlaceUnitXYR ( apemans [ i ] , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1300: LD_EXP 12
1304: PUSH
1305: LD_VAR 0 2
1309: ARRAY
1310: PPUSH
1311: LD_VAR 0 3
1315: PUSH
1316: LD_INT 1
1318: ARRAY
1319: PPUSH
1320: CALL_OW 250
1324: PPUSH
1325: LD_VAR 0 3
1329: PUSH
1330: LD_INT 1
1332: ARRAY
1333: PPUSH
1334: CALL_OW 251
1338: PPUSH
1339: LD_INT 50
1341: PPUSH
1342: LD_INT 0
1344: PPUSH
1345: CALL_OW 50
// yourApemans := yourApemans ^ apemans [ i ] ;
1349: LD_ADDR_EXP 13
1353: PUSH
1354: LD_EXP 13
1358: PUSH
1359: LD_EXP 12
1363: PUSH
1364: LD_VAR 0 2
1368: ARRAY
1369: ADD
1370: ST_TO_ADDR
// end ;
1371: GO 1297
1373: POP
1374: POP
// end else
1375: GO 1453
// begin for i in apemans do
1377: LD_ADDR_VAR 0 2
1381: PUSH
1382: LD_EXP 12
1386: PUSH
1387: FOR_IN
1388: IFFALSE 1451
// begin PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1390: LD_VAR 0 2
1394: PPUSH
1395: LD_VAR 0 3
1399: PUSH
1400: LD_INT 1
1402: ARRAY
1403: PPUSH
1404: CALL_OW 250
1408: PPUSH
1409: LD_VAR 0 3
1413: PUSH
1414: LD_INT 1
1416: ARRAY
1417: PPUSH
1418: CALL_OW 251
1422: PPUSH
1423: LD_INT 50
1425: PPUSH
1426: LD_INT 0
1428: PPUSH
1429: CALL_OW 50
// yourApemans := yourApemans ^ i ;
1433: LD_ADDR_EXP 13
1437: PUSH
1438: LD_EXP 13
1442: PUSH
1443: LD_VAR 0 2
1447: ADD
1448: ST_TO_ADDR
// end ;
1449: GO 1387
1451: POP
1452: POP
// end ; end ;
1453: LD_VAR 0 1
1457: RET
// export function LoadVehicles ; var i , veh , tmp , vehicles ; begin
1458: LD_INT 0
1460: PPUSH
1461: PPUSH
1462: PPUSH
1463: PPUSH
1464: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1465: LD_ADDR_VAR 0 4
1469: PUSH
1470: LD_INT 22
1472: PUSH
1473: LD_INT 1
1475: PUSH
1476: EMPTY
1477: LIST
1478: LIST
1479: PUSH
1480: LD_INT 21
1482: PUSH
1483: LD_INT 3
1485: PUSH
1486: EMPTY
1487: LIST
1488: LIST
1489: PUSH
1490: LD_INT 30
1492: PUSH
1493: LD_INT 0
1495: PUSH
1496: EMPTY
1497: LIST
1498: LIST
1499: PUSH
1500: EMPTY
1501: LIST
1502: LIST
1503: LIST
1504: PPUSH
1505: CALL_OW 69
1509: ST_TO_ADDR
// uc_side = 1 ;
1510: LD_ADDR_OWVAR 20
1514: PUSH
1515: LD_INT 1
1517: ST_TO_ADDR
// vehicles := LoadVariable ( vehiclesInDelta , [ ] ) ;
1518: LD_ADDR_VAR 0 5
1522: PUSH
1523: LD_STRING vehiclesInDelta
1525: PPUSH
1526: EMPTY
1527: PPUSH
1528: CALL_OW 30
1532: ST_TO_ADDR
// for i = 1 to vehicles do
1533: LD_ADDR_VAR 0 2
1537: PUSH
1538: DOUBLE
1539: LD_INT 1
1541: DEC
1542: ST_TO_ADDR
1543: LD_VAR 0 5
1547: PUSH
1548: FOR_TO
1549: IFFALSE 1752
// begin if vehicles [ i + 4 ] = 11 or vehicles [ i ] = 3 then
1551: LD_VAR 0 5
1555: PUSH
1556: LD_VAR 0 2
1560: PUSH
1561: LD_INT 4
1563: PLUS
1564: ARRAY
1565: PUSH
1566: LD_INT 11
1568: EQUAL
1569: PUSH
1570: LD_VAR 0 5
1574: PUSH
1575: LD_VAR 0 2
1579: ARRAY
1580: PUSH
1581: LD_INT 3
1583: EQUAL
1584: OR
1585: IFFALSE 1736
// begin uc_nation := vehicles [ i ] ;
1587: LD_ADDR_OWVAR 21
1591: PUSH
1592: LD_VAR 0 5
1596: PUSH
1597: LD_VAR 0 2
1601: ARRAY
1602: ST_TO_ADDR
// vc_chassis := vehicles [ i + 1 ] ;
1603: LD_ADDR_OWVAR 37
1607: PUSH
1608: LD_VAR 0 5
1612: PUSH
1613: LD_VAR 0 2
1617: PUSH
1618: LD_INT 1
1620: PLUS
1621: ARRAY
1622: ST_TO_ADDR
// vc_engine := vehicles [ i + 2 ] ;
1623: LD_ADDR_OWVAR 39
1627: PUSH
1628: LD_VAR 0 5
1632: PUSH
1633: LD_VAR 0 2
1637: PUSH
1638: LD_INT 2
1640: PLUS
1641: ARRAY
1642: ST_TO_ADDR
// vc_control := vehicles [ i + 3 ] ;
1643: LD_ADDR_OWVAR 38
1647: PUSH
1648: LD_VAR 0 5
1652: PUSH
1653: LD_VAR 0 2
1657: PUSH
1658: LD_INT 3
1660: PLUS
1661: ARRAY
1662: ST_TO_ADDR
// vc_weapon := vehicles [ i + 4 ] ;
1663: LD_ADDR_OWVAR 40
1667: PUSH
1668: LD_VAR 0 5
1672: PUSH
1673: LD_VAR 0 2
1677: PUSH
1678: LD_INT 4
1680: PLUS
1681: ARRAY
1682: ST_TO_ADDR
// veh = CreateVehicle ;
1683: LD_ADDR_VAR 0 3
1687: PUSH
1688: CALL_OW 45
1692: ST_TO_ADDR
// PlaceUnitXYR ( veh , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 40 , false ) ;
1693: LD_VAR 0 3
1697: PPUSH
1698: LD_VAR 0 4
1702: PUSH
1703: LD_INT 1
1705: ARRAY
1706: PPUSH
1707: CALL_OW 250
1711: PPUSH
1712: LD_VAR 0 4
1716: PUSH
1717: LD_INT 1
1719: ARRAY
1720: PPUSH
1721: CALL_OW 251
1725: PPUSH
1726: LD_INT 40
1728: PPUSH
1729: LD_INT 0
1731: PPUSH
1732: CALL_OW 50
// end ; i := i + 4 ;
1736: LD_ADDR_VAR 0 2
1740: PUSH
1741: LD_VAR 0 2
1745: PUSH
1746: LD_INT 4
1748: PLUS
1749: ST_TO_ADDR
// end ;
1750: GO 1548
1752: POP
1753: POP
// end ;
1754: LD_VAR 0 1
1758: RET
// export function PrepareRandoms ; var i , un , tmp , filter ; begin
1759: LD_INT 0
1761: PPUSH
1762: PPUSH
1763: PPUSH
1764: PPUSH
1765: PPUSH
// uc_side := 1 ;
1766: LD_ADDR_OWVAR 20
1770: PUSH
1771: LD_INT 1
1773: ST_TO_ADDR
// uc_nation := 1 ;
1774: LD_ADDR_OWVAR 21
1778: PUSH
1779: LD_INT 1
1781: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1782: LD_ADDR_VAR 0 4
1786: PUSH
1787: LD_INT 22
1789: PUSH
1790: LD_INT 1
1792: PUSH
1793: EMPTY
1794: LIST
1795: LIST
1796: PUSH
1797: LD_INT 21
1799: PUSH
1800: LD_INT 3
1802: PUSH
1803: EMPTY
1804: LIST
1805: LIST
1806: PUSH
1807: LD_INT 30
1809: PUSH
1810: LD_INT 0
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: PUSH
1817: EMPTY
1818: LIST
1819: LIST
1820: LIST
1821: PPUSH
1822: CALL_OW 69
1826: ST_TO_ADDR
// deltaDoctor := ( FilterAllunits ( [ [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] ) ;
1827: LD_ADDR_EXP 15
1831: PUSH
1832: LD_INT 22
1834: PUSH
1835: LD_INT 1
1837: PUSH
1838: EMPTY
1839: LIST
1840: LIST
1841: PUSH
1842: LD_INT 25
1844: PUSH
1845: LD_INT 4
1847: PUSH
1848: EMPTY
1849: LIST
1850: LIST
1851: PUSH
1852: LD_INT 26
1854: PUSH
1855: LD_INT 1
1857: PUSH
1858: EMPTY
1859: LIST
1860: LIST
1861: PUSH
1862: EMPTY
1863: LIST
1864: LIST
1865: LIST
1866: PUSH
1867: EMPTY
1868: LIST
1869: PPUSH
1870: CALL_OW 69
1874: PUSH
1875: LD_EXP 1
1879: PUSH
1880: LD_EXP 7
1884: PUSH
1885: LD_EXP 6
1889: PUSH
1890: LD_EXP 5
1894: PUSH
1895: LD_EXP 2
1899: PUSH
1900: LD_EXP 3
1904: PUSH
1905: LD_EXP 8
1909: PUSH
1910: EMPTY
1911: LIST
1912: LIST
1913: LIST
1914: LIST
1915: LIST
1916: LIST
1917: LIST
1918: DIFF
1919: ST_TO_ADDR
// if not deltaDoctor then
1920: LD_EXP 15
1924: NOT
1925: IFFALSE 2076
// begin filter := FilterAllunits ( [ [ [ f_side , 1 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] ;
1927: LD_ADDR_VAR 0 5
1931: PUSH
1932: LD_INT 22
1934: PUSH
1935: LD_INT 1
1937: PUSH
1938: EMPTY
1939: LIST
1940: LIST
1941: PUSH
1942: LD_INT 26
1944: PUSH
1945: LD_INT 1
1947: PUSH
1948: EMPTY
1949: LIST
1950: LIST
1951: PUSH
1952: EMPTY
1953: LIST
1954: LIST
1955: PUSH
1956: EMPTY
1957: LIST
1958: PPUSH
1959: CALL_OW 69
1963: PUSH
1964: LD_EXP 1
1968: PUSH
1969: LD_EXP 7
1973: PUSH
1974: LD_EXP 6
1978: PUSH
1979: LD_EXP 5
1983: PUSH
1984: LD_EXP 2
1988: PUSH
1989: LD_EXP 3
1993: PUSH
1994: LD_EXP 8
1998: PUSH
1999: EMPTY
2000: LIST
2001: LIST
2002: LIST
2003: LIST
2004: LIST
2005: LIST
2006: LIST
2007: DIFF
2008: ST_TO_ADDR
// if filter then
2009: LD_VAR 0 5
2013: IFFALSE 2074
// for i in filter do
2015: LD_ADDR_VAR 0 2
2019: PUSH
2020: LD_VAR 0 5
2024: PUSH
2025: FOR_IN
2026: IFFALSE 2072
// if GetSkill ( i , 4 ) >= 4 then
2028: LD_VAR 0 2
2032: PPUSH
2033: LD_INT 4
2035: PPUSH
2036: CALL_OW 259
2040: PUSH
2041: LD_INT 4
2043: GREATEREQUAL
2044: IFFALSE 2070
// begin deltaDoctor := i ;
2046: LD_ADDR_EXP 15
2050: PUSH
2051: LD_VAR 0 2
2055: ST_TO_ADDR
// SetClass ( deltaDoctor , 4 ) ;
2056: LD_EXP 15
2060: PPUSH
2061: LD_INT 4
2063: PPUSH
2064: CALL_OW 336
// break ;
2068: GO 2072
// end ;
2070: GO 2025
2072: POP
2073: POP
// end else
2074: GO 2090
// deltaDoctor := deltaDoctor [ 1 ] ;
2076: LD_ADDR_EXP 15
2080: PUSH
2081: LD_EXP 15
2085: PUSH
2086: LD_INT 1
2088: ARRAY
2089: ST_TO_ADDR
// for i := 1 to 7 do
2090: LD_ADDR_VAR 0 2
2094: PUSH
2095: DOUBLE
2096: LD_INT 1
2098: DEC
2099: ST_TO_ADDR
2100: LD_INT 7
2102: PUSH
2103: FOR_TO
2104: IFFALSE 2241
// begin hc_gallery :=  ;
2106: LD_ADDR_OWVAR 33
2110: PUSH
2111: LD_STRING 
2113: ST_TO_ADDR
// hc_name :=  ;
2114: LD_ADDR_OWVAR 26
2118: PUSH
2119: LD_STRING 
2121: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 3 , 5 ) ) ;
2122: LD_INT 0
2124: PPUSH
2125: LD_INT 1
2127: PUSH
2128: LD_INT 2
2130: PUSH
2131: LD_INT 3
2133: PUSH
2134: LD_INT 4
2136: PUSH
2137: EMPTY
2138: LIST
2139: LIST
2140: LIST
2141: LIST
2142: PUSH
2143: LD_INT 1
2145: PPUSH
2146: LD_INT 4
2148: PPUSH
2149: CALL_OW 12
2153: ARRAY
2154: PPUSH
2155: LD_INT 3
2157: PPUSH
2158: LD_INT 5
2160: PPUSH
2161: CALL_OW 12
2165: PPUSH
2166: CALL_OW 380
// un := CreateHuman ;
2170: LD_ADDR_VAR 0 3
2174: PUSH
2175: CALL_OW 44
2179: ST_TO_ADDR
// randomsDelta := randomsDelta ^ un ;
2180: LD_ADDR_EXP 11
2184: PUSH
2185: LD_EXP 11
2189: PUSH
2190: LD_VAR 0 3
2194: ADD
2195: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
2196: LD_VAR 0 3
2200: PPUSH
2201: LD_VAR 0 4
2205: PUSH
2206: LD_INT 1
2208: ARRAY
2209: PPUSH
2210: CALL_OW 250
2214: PPUSH
2215: LD_VAR 0 4
2219: PUSH
2220: LD_INT 1
2222: ARRAY
2223: PPUSH
2224: CALL_OW 251
2228: PPUSH
2229: LD_INT 15
2231: PPUSH
2232: LD_INT 0
2234: PPUSH
2235: CALL_OW 50
// end ;
2239: GO 2103
2241: POP
2242: POP
// if deltaDoctor then
2243: LD_EXP 15
2247: IFFALSE 2251
// exit ;
2249: GO 2341
// hc_gallery := Dawkins ;
2251: LD_ADDR_OWVAR 33
2255: PUSH
2256: LD_STRING Dawkins
2258: ST_TO_ADDR
// hc_face_number := 1 ;
2259: LD_ADDR_OWVAR 34
2263: PUSH
2264: LD_INT 1
2266: ST_TO_ADDR
// hc_name := Dr. Adam Charles Dawkins ;
2267: LD_ADDR_OWVAR 26
2271: PUSH
2272: LD_STRING Dr. Adam Charles Dawkins
2274: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 5 ) ;
2275: LD_INT 1
2277: PPUSH
2278: LD_INT 4
2280: PPUSH
2281: LD_INT 5
2283: PPUSH
2284: CALL_OW 380
// deltaDoctor := CreateHuman ;
2288: LD_ADDR_EXP 15
2292: PUSH
2293: CALL_OW 44
2297: ST_TO_ADDR
// PlaceUnitXYR ( deltaDoctor , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
2298: LD_EXP 15
2302: PPUSH
2303: LD_VAR 0 4
2307: PUSH
2308: LD_INT 1
2310: ARRAY
2311: PPUSH
2312: CALL_OW 250
2316: PPUSH
2317: LD_VAR 0 4
2321: PUSH
2322: LD_INT 1
2324: ARRAY
2325: PPUSH
2326: CALL_OW 251
2330: PPUSH
2331: LD_INT 5
2333: PPUSH
2334: LD_INT 0
2336: PPUSH
2337: CALL_OW 50
// end ; end_of_file
2341: LD_VAR 0 1
2345: RET
// export function PrepareDeltaBase ; var i , j , building , buildings , lab , tmp ; begin
2346: LD_INT 0
2348: PPUSH
2349: PPUSH
2350: PPUSH
2351: PPUSH
2352: PPUSH
2353: PPUSH
2354: PPUSH
// buildings := LoadVariable ( buildingsInDelta , [ ] ) ;
2355: LD_ADDR_VAR 0 5
2359: PUSH
2360: LD_STRING buildingsInDelta
2362: PPUSH
2363: EMPTY
2364: PPUSH
2365: CALL_OW 30
2369: ST_TO_ADDR
// SetResourceVisibility ( 68 , 40 , 1 ) ;
2370: LD_INT 68
2372: PPUSH
2373: LD_INT 40
2375: PPUSH
2376: LD_INT 1
2378: PPUSH
2379: CALL_OW 441
// uc_side := 1 ;
2383: LD_ADDR_OWVAR 20
2387: PUSH
2388: LD_INT 1
2390: ST_TO_ADDR
// uc_nation := 1 ;
2391: LD_ADDR_OWVAR 21
2395: PUSH
2396: LD_INT 1
2398: ST_TO_ADDR
// for i := 1 to buildings do
2399: LD_ADDR_VAR 0 2
2403: PUSH
2404: DOUBLE
2405: LD_INT 1
2407: DEC
2408: ST_TO_ADDR
2409: LD_VAR 0 5
2413: PUSH
2414: FOR_TO
2415: IFFALSE 2723
// begin bc_type := buildings [ i ] [ 1 ] ;
2417: LD_ADDR_OWVAR 42
2421: PUSH
2422: LD_VAR 0 5
2426: PUSH
2427: LD_VAR 0 2
2431: ARRAY
2432: PUSH
2433: LD_INT 1
2435: ARRAY
2436: ST_TO_ADDR
// bc_level := buildings [ i ] [ 2 ] ;
2437: LD_ADDR_OWVAR 43
2441: PUSH
2442: LD_VAR 0 5
2446: PUSH
2447: LD_VAR 0 2
2451: ARRAY
2452: PUSH
2453: LD_INT 2
2455: ARRAY
2456: ST_TO_ADDR
// if bc_type = b_lab then
2457: LD_OWVAR 42
2461: PUSH
2462: LD_INT 6
2464: EQUAL
2465: IFFALSE 2483
// begin bc_kind1 := b_lab_basic ;
2467: LD_ADDR_OWVAR 44
2471: PUSH
2472: LD_INT 9
2474: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2475: LD_ADDR_OWVAR 45
2479: PUSH
2480: LD_INT 9
2482: ST_TO_ADDR
// end ; if bc_type = b_lab_half or bc_type = b_lab_full then
2483: LD_OWVAR 42
2487: PUSH
2488: LD_INT 7
2490: EQUAL
2491: PUSH
2492: LD_OWVAR 42
2496: PUSH
2497: LD_INT 8
2499: EQUAL
2500: OR
2501: IFFALSE 2611
// begin if buildings [ i ] [ 6 ] then
2503: LD_VAR 0 5
2507: PUSH
2508: LD_VAR 0 2
2512: ARRAY
2513: PUSH
2514: LD_INT 6
2516: ARRAY
2517: IFFALSE 2587
// begin bc_kind1 := buildings [ i ] [ 6 ] ;
2519: LD_ADDR_OWVAR 44
2523: PUSH
2524: LD_VAR 0 5
2528: PUSH
2529: LD_VAR 0 2
2533: ARRAY
2534: PUSH
2535: LD_INT 6
2537: ARRAY
2538: ST_TO_ADDR
// if buildings [ i ] [ 7 ] then
2539: LD_VAR 0 5
2543: PUSH
2544: LD_VAR 0 2
2548: ARRAY
2549: PUSH
2550: LD_INT 7
2552: ARRAY
2553: IFFALSE 2577
// bc_kind1 := buildings [ i ] [ 7 ] else
2555: LD_ADDR_OWVAR 44
2559: PUSH
2560: LD_VAR 0 5
2564: PUSH
2565: LD_VAR 0 2
2569: ARRAY
2570: PUSH
2571: LD_INT 7
2573: ARRAY
2574: ST_TO_ADDR
2575: GO 2585
// bc_kind2 := b_lab_basic ;
2577: LD_ADDR_OWVAR 45
2581: PUSH
2582: LD_INT 9
2584: ST_TO_ADDR
// end else
2585: GO 2611
// begin bc_type := b_lab ;
2587: LD_ADDR_OWVAR 42
2591: PUSH
2592: LD_INT 6
2594: ST_TO_ADDR
// bc_kind1 := b_lab_basic ;
2595: LD_ADDR_OWVAR 44
2599: PUSH
2600: LD_INT 9
2602: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2603: LD_ADDR_OWVAR 45
2607: PUSH
2608: LD_INT 9
2610: ST_TO_ADDR
// end ; end ; building := CreateAndPlaceBuildingXYD ( buildings [ i ] [ 3 ] , buildings [ i ] [ 4 ] , buildings [ i ] [ 5 ] ) ;
2611: LD_ADDR_VAR 0 4
2615: PUSH
2616: LD_VAR 0 5
2620: PUSH
2621: LD_VAR 0 2
2625: ARRAY
2626: PUSH
2627: LD_INT 3
2629: ARRAY
2630: PPUSH
2631: LD_VAR 0 5
2635: PUSH
2636: LD_VAR 0 2
2640: ARRAY
2641: PUSH
2642: LD_INT 4
2644: ARRAY
2645: PPUSH
2646: LD_VAR 0 5
2650: PUSH
2651: LD_VAR 0 2
2655: ARRAY
2656: PUSH
2657: LD_INT 5
2659: ARRAY
2660: PPUSH
2661: CALL_OW 47
2665: ST_TO_ADDR
// if GetBType ( building ) = b_bunker and buildings [ i ] [ 8 ] then
2666: LD_VAR 0 4
2670: PPUSH
2671: CALL_OW 266
2675: PUSH
2676: LD_INT 32
2678: EQUAL
2679: PUSH
2680: LD_VAR 0 5
2684: PUSH
2685: LD_VAR 0 2
2689: ARRAY
2690: PUSH
2691: LD_INT 8
2693: ARRAY
2694: AND
2695: IFFALSE 2721
// PlaceWeaponTurret ( building , buildings [ i ] [ 8 ] ) ;
2697: LD_VAR 0 4
2701: PPUSH
2702: LD_VAR 0 5
2706: PUSH
2707: LD_VAR 0 2
2711: ARRAY
2712: PUSH
2713: LD_INT 8
2715: ARRAY
2716: PPUSH
2717: CALL_OW 431
// end ;
2721: GO 2414
2723: POP
2724: POP
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
2725: LD_ADDR_VAR 0 6
2729: PUSH
2730: LD_INT 22
2732: PUSH
2733: LD_INT 1
2735: PUSH
2736: EMPTY
2737: LIST
2738: LIST
2739: PUSH
2740: LD_INT 2
2742: PUSH
2743: LD_INT 30
2745: PUSH
2746: LD_INT 6
2748: PUSH
2749: EMPTY
2750: LIST
2751: LIST
2752: PUSH
2753: LD_INT 30
2755: PUSH
2756: LD_INT 7
2758: PUSH
2759: EMPTY
2760: LIST
2761: LIST
2762: PUSH
2763: LD_INT 30
2765: PUSH
2766: LD_INT 8
2768: PUSH
2769: EMPTY
2770: LIST
2771: LIST
2772: PUSH
2773: EMPTY
2774: LIST
2775: LIST
2776: LIST
2777: LIST
2778: PUSH
2779: EMPTY
2780: LIST
2781: LIST
2782: PPUSH
2783: CALL_OW 69
2787: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) ;
2788: LD_ADDR_VAR 0 7
2792: PUSH
2793: LD_INT 22
2795: PUSH
2796: LD_INT 1
2798: PUSH
2799: EMPTY
2800: LIST
2801: LIST
2802: PUSH
2803: LD_INT 30
2805: PUSH
2806: LD_INT 0
2808: PUSH
2809: EMPTY
2810: LIST
2811: LIST
2812: PUSH
2813: EMPTY
2814: LIST
2815: LIST
2816: PPUSH
2817: CALL_OW 69
2821: ST_TO_ADDR
// if lab and tmp then
2822: LD_VAR 0 6
2826: PUSH
2827: LD_VAR 0 7
2831: AND
2832: IFFALSE 2842
// baseCorrect := 1 ;
2834: LD_ADDR_EXP 18
2838: PUSH
2839: LD_INT 1
2841: ST_TO_ADDR
// if baseCorrect = 0 then
2842: LD_EXP 18
2846: PUSH
2847: LD_INT 0
2849: EQUAL
2850: IFFALSE 3223
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
2852: LD_ADDR_VAR 0 2
2856: PUSH
2857: LD_INT 22
2859: PUSH
2860: LD_INT 1
2862: PUSH
2863: EMPTY
2864: LIST
2865: LIST
2866: PUSH
2867: LD_INT 21
2869: PUSH
2870: LD_INT 3
2872: PUSH
2873: EMPTY
2874: LIST
2875: LIST
2876: PUSH
2877: EMPTY
2878: LIST
2879: LIST
2880: PPUSH
2881: CALL_OW 69
2885: PUSH
2886: FOR_IN
2887: IFFALSE 2900
// RemoveUnit ( i ) ;
2889: LD_VAR 0 2
2893: PPUSH
2894: CALL_OW 64
2898: GO 2886
2900: POP
2901: POP
// uc_nation := 1 ;
2902: LD_ADDR_OWVAR 21
2906: PUSH
2907: LD_INT 1
2909: ST_TO_ADDR
// uc_side := 1 ;
2910: LD_ADDR_OWVAR 20
2914: PUSH
2915: LD_INT 1
2917: ST_TO_ADDR
// bc_level := 5 ;
2918: LD_ADDR_OWVAR 43
2922: PUSH
2923: LD_INT 5
2925: ST_TO_ADDR
// bc_type := b_depot ;
2926: LD_ADDR_OWVAR 42
2930: PUSH
2931: LD_INT 0
2933: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 50 , 22 , 0 ) ;
2934: LD_INT 50
2936: PPUSH
2937: LD_INT 22
2939: PPUSH
2940: LD_INT 0
2942: PPUSH
2943: CALL_OW 47
// bc_type = b_bunker ;
2947: LD_ADDR_OWVAR 42
2951: PUSH
2952: LD_INT 32
2954: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( 68 , 24 , 4 ) ;
2955: LD_ADDR_VAR 0 4
2959: PUSH
2960: LD_INT 68
2962: PPUSH
2963: LD_INT 24
2965: PPUSH
2966: LD_INT 4
2968: PPUSH
2969: CALL_OW 47
2973: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ rand ( 1 , 2 ) ] ) ;
2974: LD_VAR 0 4
2978: PPUSH
2979: LD_INT 4
2981: PUSH
2982: LD_INT 11
2984: PUSH
2985: EMPTY
2986: LIST
2987: LIST
2988: PUSH
2989: LD_INT 1
2991: PPUSH
2992: LD_INT 2
2994: PPUSH
2995: CALL_OW 12
2999: ARRAY
3000: PPUSH
3001: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 71 , 34 , 4 ) ;
3005: LD_ADDR_VAR 0 4
3009: PUSH
3010: LD_INT 71
3012: PPUSH
3013: LD_INT 34
3015: PPUSH
3016: LD_INT 4
3018: PPUSH
3019: CALL_OW 47
3023: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ rand ( 1 , 2 ) ] ) ;
3024: LD_VAR 0 4
3028: PPUSH
3029: LD_INT 4
3031: PUSH
3032: LD_INT 11
3034: PUSH
3035: EMPTY
3036: LIST
3037: LIST
3038: PUSH
3039: LD_INT 1
3041: PPUSH
3042: LD_INT 2
3044: PPUSH
3045: CALL_OW 12
3049: ARRAY
3050: PPUSH
3051: CALL_OW 431
// bc_type := b_breastwork ;
3055: LD_ADDR_OWVAR 42
3059: PUSH
3060: LD_INT 31
3062: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 51 , 7 , 3 ) ;
3063: LD_INT 51
3065: PPUSH
3066: LD_INT 7
3068: PPUSH
3069: LD_INT 3
3071: PPUSH
3072: CALL_OW 47
// bc_type := b_oil_mine ;
3076: LD_ADDR_OWVAR 42
3080: PUSH
3081: LD_INT 29
3083: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 68 , 40 , 1 ) ;
3084: LD_INT 68
3086: PPUSH
3087: LD_INT 40
3089: PPUSH
3090: LD_INT 1
3092: PPUSH
3093: CALL_OW 47
// bc_type := b_workshop ;
3097: LD_ADDR_OWVAR 42
3101: PUSH
3102: LD_INT 2
3104: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 20 , 2 ) ;
3105: LD_INT 38
3107: PPUSH
3108: LD_INT 20
3110: PPUSH
3111: LD_INT 2
3113: PPUSH
3114: CALL_OW 47
// bc_type := b_armoury ;
3118: LD_ADDR_OWVAR 42
3122: PUSH
3123: LD_INT 4
3125: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 20 , 2 ) ;
3126: LD_INT 38
3128: PPUSH
3129: LD_INT 20
3131: PPUSH
3132: LD_INT 2
3134: PPUSH
3135: CALL_OW 47
// bc_type := b_solar_power ;
3139: LD_ADDR_OWVAR 42
3143: PUSH
3144: LD_INT 27
3146: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 46 , 12 , 1 ) ;
3147: LD_INT 46
3149: PPUSH
3150: LD_INT 12
3152: PPUSH
3153: LD_INT 1
3155: PPUSH
3156: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 48 , 11 , 2 ) ;
3160: LD_INT 48
3162: PPUSH
3163: LD_INT 11
3165: PPUSH
3166: LD_INT 2
3168: PPUSH
3169: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 49 , 11 , 3 ) ;
3173: LD_INT 49
3175: PPUSH
3176: LD_INT 11
3178: PPUSH
3179: LD_INT 3
3181: PPUSH
3182: CALL_OW 47
// bc_type := b_lab_half ;
3186: LD_ADDR_OWVAR 42
3190: PUSH
3191: LD_INT 7
3193: ST_TO_ADDR
// bc_kind1 := b_lab_opto ;
3194: LD_ADDR_OWVAR 44
3198: PUSH
3199: LD_INT 15
3201: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
3202: LD_ADDR_OWVAR 45
3206: PUSH
3207: LD_INT 9
3209: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 42 , 15 , 2 ) ;
3210: LD_INT 42
3212: PPUSH
3213: LD_INT 15
3215: PPUSH
3216: LD_INT 2
3218: PPUSH
3219: CALL_OW 47
// end ; end ; end_of_file
3223: LD_VAR 0 1
3227: RET
// export function Action ; var i , j , tmp ; begin
3228: LD_INT 0
3230: PPUSH
3231: PPUSH
3232: PPUSH
3233: PPUSH
// InGameOn ;
3234: CALL_OW 8
// if lab then
3238: LD_EXP 20
3242: IFFALSE 3259
// CenterNowOnUnits ( lab [ 1 ] ) else
3244: LD_EXP 20
3248: PUSH
3249: LD_INT 1
3251: ARRAY
3252: PPUSH
3253: CALL_OW 87
3257: GO 3268
// CenterOnUnits ( JMM ) ;
3259: LD_EXP 1
3263: PPUSH
3264: CALL_OW 85
// if IsOK ( Denis ) then
3268: LD_EXP 3
3272: PPUSH
3273: CALL_OW 302
3277: IFFALSE 3305
// begin SetTech ( tech_radar , 1 , state_researched ) ;
3279: LD_INT 6
3281: PPUSH
3282: LD_INT 1
3284: PPUSH
3285: LD_INT 2
3287: PPUSH
3288: CALL_OW 322
// SetRestrict ( b_ext_radar , 1 , true ) ;
3292: LD_INT 20
3294: PPUSH
3295: LD_INT 1
3297: PPUSH
3298: LD_INT 1
3300: PPUSH
3301: CALL_OW 324
// end ; CenterNowOnUnits ( JMM ) ;
3305: LD_EXP 1
3309: PPUSH
3310: CALL_OW 87
// ComTurnUnit ( JMM , DeltaDoctor ) ;
3314: LD_EXP 1
3318: PPUSH
3319: LD_EXP 15
3323: PPUSH
3324: CALL_OW 119
// repeat wait ( 0 0$1 ) ;
3328: LD_INT 35
3330: PPUSH
3331: CALL_OW 67
// ComMoveUnit ( DeltaDoctor , JMM ) ;
3335: LD_EXP 15
3339: PPUSH
3340: LD_EXP 1
3344: PPUSH
3345: CALL_OW 112
// until GetDistUnits ( JMM , DeltaDoctor ) < 5 ;
3349: LD_EXP 1
3353: PPUSH
3354: LD_EXP 15
3358: PPUSH
3359: CALL_OW 296
3363: PUSH
3364: LD_INT 5
3366: LESS
3367: IFFALSE 3328
// ComTurnUnit ( DeltaDoctor , JMM ) ;
3369: LD_EXP 15
3373: PPUSH
3374: LD_EXP 1
3378: PPUSH
3379: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
3383: LD_EXP 1
3387: PPUSH
3388: LD_STRING D1-JMM-1
3390: PPUSH
3391: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-1 ) ;
3395: LD_EXP 15
3399: PPUSH
3400: LD_STRING D1-Sci-1
3402: PPUSH
3403: CALL_OW 88
// ComEnterUnit ( [ JMM , DeltaDoctor , Denis ] , lab [ 1 ] ) ;
3407: LD_EXP 1
3411: PUSH
3412: LD_EXP 15
3416: PUSH
3417: LD_EXP 3
3421: PUSH
3422: EMPTY
3423: LIST
3424: LIST
3425: LIST
3426: PPUSH
3427: LD_EXP 20
3431: PUSH
3432: LD_INT 1
3434: ARRAY
3435: PPUSH
3436: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
3440: LD_INT 35
3442: PPUSH
3443: CALL_OW 67
// until IsInUnit ( JMM ) and IsInUnit ( DeltaDoctor ) ;
3447: LD_EXP 1
3451: PPUSH
3452: CALL_OW 310
3456: PUSH
3457: LD_EXP 15
3461: PPUSH
3462: CALL_OW 310
3466: AND
3467: IFFALSE 3440
// CenterNowOnUnits ( lab [ 1 ] ) ;
3469: LD_EXP 20
3473: PUSH
3474: LD_INT 1
3476: ARRAY
3477: PPUSH
3478: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
3482: LD_EXP 1
3486: PPUSH
3487: LD_STRING D1-JMM-2
3489: PPUSH
3490: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-2 ) ;
3494: LD_EXP 15
3498: PPUSH
3499: LD_STRING D1-Sci-2
3501: PPUSH
3502: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
3506: LD_EXP 1
3510: PPUSH
3511: LD_STRING D1-JMM-3
3513: PPUSH
3514: CALL_OW 88
// if IsOK ( Denis ) then
3518: LD_EXP 3
3522: PPUSH
3523: CALL_OW 302
3527: IFFALSE 3543
// Say ( DeltaDoctor , D1-Sci-3 ) else
3529: LD_EXP 15
3533: PPUSH
3534: LD_STRING D1-Sci-3
3536: PPUSH
3537: CALL_OW 88
3541: GO 3555
// Say ( DeltaDoctor , D1-Sci-3a ) ;
3543: LD_EXP 15
3547: PPUSH
3548: LD_STRING D1-Sci-3a
3550: PPUSH
3551: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
3555: LD_EXP 1
3559: PPUSH
3560: LD_STRING D1-JMM-4
3562: PPUSH
3563: CALL_OW 88
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
3567: LD_ADDR_VAR 0 4
3571: PUSH
3572: LD_INT 22
3574: PUSH
3575: LD_INT 1
3577: PUSH
3578: EMPTY
3579: LIST
3580: LIST
3581: PUSH
3582: LD_INT 25
3584: PUSH
3585: LD_INT 4
3587: PUSH
3588: EMPTY
3589: LIST
3590: LIST
3591: PUSH
3592: LD_INT 3
3594: PUSH
3595: LD_INT 54
3597: PUSH
3598: EMPTY
3599: LIST
3600: PUSH
3601: EMPTY
3602: LIST
3603: LIST
3604: PUSH
3605: EMPTY
3606: LIST
3607: LIST
3608: LIST
3609: PPUSH
3610: CALL_OW 69
3614: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 0 ] ) do
3615: LD_ADDR_VAR 0 2
3619: PUSH
3620: LD_INT 22
3622: PUSH
3623: LD_INT 0
3625: PUSH
3626: EMPTY
3627: LIST
3628: LIST
3629: PPUSH
3630: CALL_OW 69
3634: PUSH
3635: FOR_IN
3636: IFFALSE 3686
// for j in tmp do
3638: LD_ADDR_VAR 0 3
3642: PUSH
3643: LD_VAR 0 4
3647: PUSH
3648: FOR_IN
3649: IFFALSE 3682
// AddComTameXY ( j , GetX ( i ) , GetY ( i ) ) ;
3651: LD_VAR 0 3
3655: PPUSH
3656: LD_VAR 0 2
3660: PPUSH
3661: CALL_OW 250
3665: PPUSH
3666: LD_VAR 0 2
3670: PPUSH
3671: CALL_OW 251
3675: PPUSH
3676: CALL_OW 191
3680: GO 3648
3682: POP
3683: POP
3684: GO 3635
3686: POP
3687: POP
// Say ( DeltaDoctor , D1-Sci-4 ) ;
3688: LD_EXP 15
3692: PPUSH
3693: LD_STRING D1-Sci-4
3695: PPUSH
3696: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
3700: LD_EXP 1
3704: PPUSH
3705: LD_STRING D1-JMM-5
3707: PPUSH
3708: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-5 ) ;
3712: LD_EXP 15
3716: PPUSH
3717: LD_STRING D1-Sci-5
3719: PPUSH
3720: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
3724: LD_EXP 1
3728: PPUSH
3729: LD_STRING D1-JMM-6
3731: PPUSH
3732: CALL_OW 88
// SayRadio ( Harisson , D1-Har-6 ) ;
3736: LD_EXP 16
3740: PPUSH
3741: LD_STRING D1-Har-6
3743: PPUSH
3744: CALL_OW 94
// Say ( JMM , D1-JMM-7 ) ;
3748: LD_EXP 1
3752: PPUSH
3753: LD_STRING D1-JMM-7
3755: PPUSH
3756: CALL_OW 88
// SayRadio ( Harisson , D1-Har-7 ) ;
3760: LD_EXP 16
3764: PPUSH
3765: LD_STRING D1-Har-7
3767: PPUSH
3768: CALL_OW 94
// if IsOK ( Denis ) then
3772: LD_EXP 3
3776: PPUSH
3777: CALL_OW 302
3781: IFFALSE 3795
// Say ( JMM , D1-JMM-8 ) ;
3783: LD_EXP 1
3787: PPUSH
3788: LD_STRING D1-JMM-8
3790: PPUSH
3791: CALL_OW 88
// Say ( JMM , D1-JMM-8a ) ;
3795: LD_EXP 1
3799: PPUSH
3800: LD_STRING D1-JMM-8a
3802: PPUSH
3803: CALL_OW 88
// SayRadio ( Harisson , D1-Har-8 ) ;
3807: LD_EXP 16
3811: PPUSH
3812: LD_STRING D1-Har-8
3814: PPUSH
3815: CALL_OW 94
// Say ( JMM , D1-JMM-9 ) ;
3819: LD_EXP 1
3823: PPUSH
3824: LD_STRING D1-JMM-9
3826: PPUSH
3827: CALL_OW 88
// SayRadio ( Harisson , D1-Har-9 ) ;
3831: LD_EXP 16
3835: PPUSH
3836: LD_STRING D1-Har-9
3838: PPUSH
3839: CALL_OW 94
// Say ( JMM , D1-JMM-10 ) ;
3843: LD_EXP 1
3847: PPUSH
3848: LD_STRING D1-JMM-10
3850: PPUSH
3851: CALL_OW 88
// if IsOK ( Denis ) then
3855: LD_EXP 3
3859: PPUSH
3860: CALL_OW 302
3864: IFFALSE 3878
// Say ( JMM , D1-JMM-10a ) ;
3866: LD_EXP 1
3870: PPUSH
3871: LD_STRING D1-JMM-10a
3873: PPUSH
3874: CALL_OW 88
// SelectDeltaCharacters ;
3878: CALL 4362 0 0
// SetResourceType ( GetBase ( lab [ 1 ] ) , 1 , 150 ) ;
3882: LD_EXP 20
3886: PUSH
3887: LD_INT 1
3889: ARRAY
3890: PPUSH
3891: CALL_OW 274
3895: PPUSH
3896: LD_INT 1
3898: PPUSH
3899: LD_INT 150
3901: PPUSH
3902: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) then
3906: LD_INT 22
3908: PUSH
3909: LD_INT 1
3911: PUSH
3912: EMPTY
3913: LIST
3914: LIST
3915: PUSH
3916: LD_INT 30
3918: PUSH
3919: LD_INT 29
3921: PUSH
3922: EMPTY
3923: LIST
3924: LIST
3925: PUSH
3926: EMPTY
3927: LIST
3928: LIST
3929: PPUSH
3930: CALL_OW 69
3934: IFFALSE 3960
// SetResourceType ( GetBase ( lab [ 1 ] ) , 2 , 300 ) ;
3936: LD_EXP 20
3940: PUSH
3941: LD_INT 1
3943: ARRAY
3944: PPUSH
3945: CALL_OW 274
3949: PPUSH
3950: LD_INT 2
3952: PPUSH
3953: LD_INT 300
3955: PPUSH
3956: CALL_OW 277
// InGameOff ;
3960: CALL_OW 9
// Query ( Q1 ) ;
3964: LD_STRING Q1
3966: PPUSH
3967: CALL_OW 97
// SetAreaMapShow ( ExitArea , 1 ) ;
3971: LD_INT 3
3973: PPUSH
3974: LD_INT 1
3976: PPUSH
3977: CALL_OW 424
// if IsInUnit ( JMM ) then
3981: LD_EXP 1
3985: PPUSH
3986: CALL_OW 310
3990: IFFALSE 4001
// ComExitBuilding ( JMM ) ;
3992: LD_EXP 1
3996: PPUSH
3997: CALL_OW 122
// end ;
4001: LD_VAR 0 1
4005: RET
// every 0 0$1 trigger FilterUnitsExceptArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do var i , cargoType ;
4006: LD_INT 3
4008: PPUSH
4009: LD_INT 22
4011: PUSH
4012: LD_INT 1
4014: PUSH
4015: EMPTY
4016: LIST
4017: LIST
4018: PUSH
4019: LD_INT 21
4021: PUSH
4022: LD_INT 1
4024: PUSH
4025: EMPTY
4026: LIST
4027: LIST
4028: PUSH
4029: EMPTY
4030: LIST
4031: LIST
4032: PPUSH
4033: CALL_OW 71
4037: PUSH
4038: LD_INT 0
4040: EQUAL
4041: IFFALSE 4359
4043: GO 4045
4045: DISABLE
4046: LD_INT 0
4048: PPUSH
4049: PPUSH
// begin SaveDeltaCharacters ;
4050: CALL 4716 0 0
// if FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) then
4054: LD_INT 3
4056: PPUSH
4057: LD_INT 21
4059: PUSH
4060: LD_INT 2
4062: PUSH
4063: EMPTY
4064: LIST
4065: LIST
4066: PUSH
4067: LD_INT 3
4069: PUSH
4070: LD_INT 58
4072: PUSH
4073: EMPTY
4074: LIST
4075: PUSH
4076: EMPTY
4077: LIST
4078: LIST
4079: PUSH
4080: EMPTY
4081: LIST
4082: LIST
4083: PPUSH
4084: CALL_OW 70
4088: IFFALSE 4345
// begin for i in FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) do
4090: LD_ADDR_VAR 0 1
4094: PUSH
4095: LD_INT 3
4097: PPUSH
4098: LD_INT 21
4100: PUSH
4101: LD_INT 2
4103: PUSH
4104: EMPTY
4105: LIST
4106: LIST
4107: PUSH
4108: LD_INT 3
4110: PUSH
4111: LD_INT 58
4113: PUSH
4114: EMPTY
4115: LIST
4116: PUSH
4117: EMPTY
4118: LIST
4119: LIST
4120: PUSH
4121: EMPTY
4122: LIST
4123: LIST
4124: PPUSH
4125: CALL_OW 70
4129: PUSH
4130: FOR_IN
4131: IFFALSE 4343
// begin cargoType := GetCargoType ( i ) ;
4133: LD_ADDR_VAR 0 2
4137: PUSH
4138: LD_VAR 0 1
4142: PPUSH
4143: CALL_OW 288
4147: ST_TO_ADDR
// if GetWeapon ( i ) = us_cargo_bay then
4148: LD_VAR 0 1
4152: PPUSH
4153: CALL_OW 264
4157: PUSH
4158: LD_INT 12
4160: EQUAL
4161: IFFALSE 4258
// yourVehicles := yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , cargoType , GetCargo ( i , cargoType ) ] ] else
4163: LD_ADDR_EXP 14
4167: PUSH
4168: LD_EXP 14
4172: PUSH
4173: LD_VAR 0 1
4177: PPUSH
4178: CALL_OW 248
4182: PUSH
4183: LD_VAR 0 1
4187: PPUSH
4188: CALL_OW 265
4192: PUSH
4193: LD_VAR 0 1
4197: PPUSH
4198: CALL_OW 262
4202: PUSH
4203: LD_VAR 0 1
4207: PPUSH
4208: CALL_OW 263
4212: PUSH
4213: LD_VAR 0 1
4217: PPUSH
4218: CALL_OW 264
4222: PUSH
4223: LD_VAR 0 2
4227: PUSH
4228: LD_VAR 0 1
4232: PPUSH
4233: LD_VAR 0 2
4237: PPUSH
4238: CALL_OW 289
4242: PUSH
4243: EMPTY
4244: LIST
4245: LIST
4246: LIST
4247: LIST
4248: LIST
4249: LIST
4250: LIST
4251: PUSH
4252: EMPTY
4253: LIST
4254: ADD
4255: ST_TO_ADDR
4256: GO 4329
// yourVehicles := yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ] ;
4258: LD_ADDR_EXP 14
4262: PUSH
4263: LD_EXP 14
4267: PUSH
4268: LD_VAR 0 1
4272: PPUSH
4273: CALL_OW 248
4277: PUSH
4278: LD_VAR 0 1
4282: PPUSH
4283: CALL_OW 265
4287: PUSH
4288: LD_VAR 0 1
4292: PPUSH
4293: CALL_OW 262
4297: PUSH
4298: LD_VAR 0 1
4302: PPUSH
4303: CALL_OW 263
4307: PUSH
4308: LD_VAR 0 1
4312: PPUSH
4313: CALL_OW 264
4317: PUSH
4318: EMPTY
4319: LIST
4320: LIST
4321: LIST
4322: LIST
4323: LIST
4324: PUSH
4325: EMPTY
4326: LIST
4327: ADD
4328: ST_TO_ADDR
// SaveVariable ( yourVehicles , 06_VehiclesIn06_1 ) ;
4329: LD_EXP 14
4333: PPUSH
4334: LD_STRING 06_VehiclesIn06_1
4336: PPUSH
4337: CALL_OW 39
// end ;
4341: GO 4130
4343: POP
4344: POP
// end ; SaveCargos ;
4345: CALL 5472 0 0
// ChangeMap ( 6 , %_cont ) ;
4349: LD_INT 6
4351: PPUSH
4352: LD_STRING %_cont
4354: PPUSH
4355: CALL_OW 340
// end ; end_of_file
4359: PPOPN 2
4361: END
// export function SelectDeltaCharacters ; var i , yourPeople ; begin
4362: LD_INT 0
4364: PPUSH
4365: PPUSH
4366: PPUSH
// selectedPeople := [ ] ;
4367: LD_ADDR_EXP 17
4371: PUSH
4372: EMPTY
4373: ST_TO_ADDR
// yourPeople := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , DeltaDoctor , Denis ] ;
4374: LD_ADDR_VAR 0 3
4378: PUSH
4379: LD_INT 22
4381: PUSH
4382: LD_INT 1
4384: PUSH
4385: EMPTY
4386: LIST
4387: LIST
4388: PUSH
4389: LD_INT 21
4391: PUSH
4392: LD_INT 1
4394: PUSH
4395: EMPTY
4396: LIST
4397: LIST
4398: PUSH
4399: LD_INT 2
4401: PUSH
4402: LD_INT 25
4404: PUSH
4405: LD_INT 1
4407: PUSH
4408: EMPTY
4409: LIST
4410: LIST
4411: PUSH
4412: LD_INT 25
4414: PUSH
4415: LD_INT 2
4417: PUSH
4418: EMPTY
4419: LIST
4420: LIST
4421: PUSH
4422: LD_INT 25
4424: PUSH
4425: LD_INT 3
4427: PUSH
4428: EMPTY
4429: LIST
4430: LIST
4431: PUSH
4432: LD_INT 25
4434: PUSH
4435: LD_INT 4
4437: PUSH
4438: EMPTY
4439: LIST
4440: LIST
4441: PUSH
4442: EMPTY
4443: LIST
4444: LIST
4445: LIST
4446: LIST
4447: LIST
4448: PUSH
4449: EMPTY
4450: LIST
4451: LIST
4452: LIST
4453: PPUSH
4454: CALL_OW 69
4458: PUSH
4459: LD_EXP 1
4463: PUSH
4464: LD_EXP 15
4468: PUSH
4469: LD_EXP 3
4473: PUSH
4474: EMPTY
4475: LIST
4476: LIST
4477: LIST
4478: DIFF
4479: ST_TO_ADDR
// selectedPeople := CharacterSelection ( text , 5 , 5 , [ sel_change_class , JMM , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ yourPeople ^ [ sel_dont_change_class , sel_not_changeable , Denis , DeltaDoctor ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
4480: LD_ADDR_EXP 17
4484: PUSH
4485: LD_STRING text
4487: PPUSH
4488: LD_INT 5
4490: PPUSH
4491: LD_INT 5
4493: PPUSH
4494: LD_INT -5
4496: PUSH
4497: LD_EXP 1
4501: PUSH
4502: LD_INT -6
4504: PUSH
4505: LD_INT -2
4507: PUSH
4508: LD_INT -3
4510: PUSH
4511: LD_INT -5
4513: PUSH
4514: EMPTY
4515: LIST
4516: LIST
4517: LIST
4518: LIST
4519: LIST
4520: LIST
4521: PUSH
4522: LD_VAR 0 3
4526: ADD
4527: PUSH
4528: LD_INT -6
4530: PUSH
4531: LD_INT -4
4533: PUSH
4534: LD_EXP 3
4538: PUSH
4539: LD_EXP 15
4543: PUSH
4544: EMPTY
4545: LIST
4546: LIST
4547: LIST
4548: LIST
4549: ADD
4550: PPUSH
4551: LD_INT 1
4553: PUSH
4554: LD_INT 3
4556: PUSH
4557: LD_INT 2
4559: PUSH
4560: LD_INT 1
4562: PUSH
4563: EMPTY
4564: LIST
4565: LIST
4566: PUSH
4567: LD_INT 4
4569: PUSH
4570: EMPTY
4571: LIST
4572: LIST
4573: LIST
4574: LIST
4575: PPUSH
4576: CALL_OW 42
4580: ST_TO_ADDR
// ComStop ( selectedPeople ) ;
4581: LD_EXP 17
4585: PPUSH
4586: CALL_OW 141
// SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 4 ) ;
4590: LD_INT 22
4592: PUSH
4593: LD_INT 1
4595: PUSH
4596: EMPTY
4597: LIST
4598: LIST
4599: PUSH
4600: LD_INT 21
4602: PUSH
4603: LD_INT 1
4605: PUSH
4606: EMPTY
4607: LIST
4608: LIST
4609: PUSH
4610: EMPTY
4611: LIST
4612: LIST
4613: PPUSH
4614: CALL_OW 69
4618: PPUSH
4619: LD_INT 4
4621: PPUSH
4622: CALL_OW 235
// for i in selectedPeople do
4626: LD_ADDR_VAR 0 2
4630: PUSH
4631: LD_EXP 17
4635: PUSH
4636: FOR_IN
4637: IFFALSE 4653
// SetSide ( i , 1 ) ;
4639: LD_VAR 0 2
4643: PPUSH
4644: LD_INT 1
4646: PPUSH
4647: CALL_OW 235
4651: GO 4636
4653: POP
4654: POP
// for i in yourApemans do
4655: LD_ADDR_VAR 0 2
4659: PUSH
4660: LD_EXP 13
4664: PUSH
4665: FOR_IN
4666: IFFALSE 4682
// SetSide ( i , 1 ) ;
4668: LD_VAR 0 2
4672: PPUSH
4673: LD_INT 1
4675: PPUSH
4676: CALL_OW 235
4680: GO 4665
4682: POP
4683: POP
// SetSide ( JMM , 1 ) ;
4684: LD_EXP 1
4688: PPUSH
4689: LD_INT 1
4691: PPUSH
4692: CALL_OW 235
// SetSkill ( yourApemans , 2 , 5 ) ;
4696: LD_EXP 13
4700: PPUSH
4701: LD_INT 2
4703: PPUSH
4704: LD_INT 5
4706: PPUSH
4707: CALL_OW 237
// end ;
4711: LD_VAR 0 1
4715: RET
// export function SaveDeltaCharacters ; begin
4716: LD_INT 0
4718: PPUSH
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
4719: LD_EXP 1
4723: PPUSH
4724: LD_EXP 22
4728: PUSH
4729: LD_STRING JMM
4731: STR
4732: PPUSH
4733: CALL_OW 38
// SaveCharacters ( DeltaDoctor , DeltaDoctor ) ;
4737: LD_EXP 15
4741: PPUSH
4742: LD_STRING DeltaDoctor
4744: PPUSH
4745: CALL_OW 38
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
4749: LD_EXP 3
4753: PPUSH
4754: LD_EXP 22
4758: PUSH
4759: LD_STRING Denis
4761: STR
4762: PPUSH
4763: CALL_OW 38
// if Lisa in selectedPeople then
4767: LD_EXP 4
4771: PUSH
4772: LD_EXP 17
4776: IN
4777: IFFALSE 4809
// begin SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
4779: LD_EXP 4
4783: PPUSH
4784: LD_EXP 22
4788: PUSH
4789: LD_STRING Lisa
4791: STR
4792: PPUSH
4793: CALL_OW 38
// SaveVariable ( 1 , LisaIn06 ) ;
4797: LD_INT 1
4799: PPUSH
4800: LD_STRING LisaIn06
4802: PPUSH
4803: CALL_OW 39
// end else
4807: GO 4830
// if IsOk ( Lisa ) then
4809: LD_EXP 4
4813: PPUSH
4814: CALL_OW 302
4818: IFFALSE 4830
// SaveVariable ( 1 , LisaStayInDelta ) ;
4820: LD_INT 1
4822: PPUSH
4823: LD_STRING LisaStayInDelta
4825: PPUSH
4826: CALL_OW 39
// if Bobby in selectedPeople then
4830: LD_EXP 6
4834: PUSH
4835: LD_EXP 17
4839: IN
4840: IFFALSE 4872
// begin SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
4842: LD_EXP 6
4846: PPUSH
4847: LD_EXP 22
4851: PUSH
4852: LD_STRING Bobby
4854: STR
4855: PPUSH
4856: CALL_OW 38
// SaveVariable ( 1 , BobbyIn06 ) ;
4860: LD_INT 1
4862: PPUSH
4863: LD_STRING BobbyIn06
4865: PPUSH
4866: CALL_OW 39
// end else
4870: GO 4893
// if IsOk ( Bobby ) then
4872: LD_EXP 6
4876: PPUSH
4877: CALL_OW 302
4881: IFFALSE 4893
// SaveVariable ( 1 , BobbyStayInDelta ) ;
4883: LD_INT 1
4885: PPUSH
4886: LD_STRING BobbyStayInDelta
4888: PPUSH
4889: CALL_OW 39
// if Cyrus in selectedPeople then
4893: LD_EXP 7
4897: PUSH
4898: LD_EXP 17
4902: IN
4903: IFFALSE 4935
// begin SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
4905: LD_EXP 7
4909: PPUSH
4910: LD_EXP 22
4914: PUSH
4915: LD_STRING Cyrus
4917: STR
4918: PPUSH
4919: CALL_OW 38
// SaveVariable ( 1 , CyrusIn06 ) ;
4923: LD_INT 1
4925: PPUSH
4926: LD_STRING CyrusIn06
4928: PPUSH
4929: CALL_OW 39
// end else
4933: GO 4956
// if IsOk ( Cyrus ) then
4935: LD_EXP 7
4939: PPUSH
4940: CALL_OW 302
4944: IFFALSE 4956
// SaveVariable ( 1 , CyrusStayInDelta ) ;
4946: LD_INT 1
4948: PPUSH
4949: LD_STRING CyrusStayInDelta
4951: PPUSH
4952: CALL_OW 39
// if Frank in selectedPeople then
4956: LD_EXP 5
4960: PUSH
4961: LD_EXP 17
4965: IN
4966: IFFALSE 4998
// begin SaveCharacters ( Frank , mission_prefix & Frank ) ;
4968: LD_EXP 5
4972: PPUSH
4973: LD_EXP 22
4977: PUSH
4978: LD_STRING Frank
4980: STR
4981: PPUSH
4982: CALL_OW 38
// SaveVariable ( 1 , FrankIn06 ) ;
4986: LD_INT 1
4988: PPUSH
4989: LD_STRING FrankIn06
4991: PPUSH
4992: CALL_OW 39
// end else
4996: GO 5019
// if IsOk ( Frank ) then
4998: LD_EXP 5
5002: PPUSH
5003: CALL_OW 302
5007: IFFALSE 5019
// SaveVariable ( 1 , FrankStayInDelta ) ;
5009: LD_INT 1
5011: PPUSH
5012: LD_STRING FrankStayInDelta
5014: PPUSH
5015: CALL_OW 39
// if Brown in selectedPeople then
5019: LD_EXP 8
5023: PUSH
5024: LD_EXP 17
5028: IN
5029: IFFALSE 5061
// begin SaveCharacters ( Brown , mission_prefix & Brown ) ;
5031: LD_EXP 8
5035: PPUSH
5036: LD_EXP 22
5040: PUSH
5041: LD_STRING Brown
5043: STR
5044: PPUSH
5045: CALL_OW 38
// SaveVariable ( 1 , BrownIn06 ) ;
5049: LD_INT 1
5051: PPUSH
5052: LD_STRING BrownIn06
5054: PPUSH
5055: CALL_OW 39
// end else
5059: GO 5082
// if IsOk ( Brown ) then
5061: LD_EXP 8
5065: PPUSH
5066: CALL_OW 302
5070: IFFALSE 5082
// SaveVariable ( 1 , BrownStayInDelta ) ;
5072: LD_INT 1
5074: PPUSH
5075: LD_STRING BrownStayInDelta
5077: PPUSH
5078: CALL_OW 39
// if Donaldson in selectedPeople then
5082: LD_EXP 9
5086: PUSH
5087: LD_EXP 17
5091: IN
5092: IFFALSE 5124
// begin SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
5094: LD_EXP 9
5098: PPUSH
5099: LD_EXP 22
5103: PUSH
5104: LD_STRING Donaldson
5106: STR
5107: PPUSH
5108: CALL_OW 38
// SaveVariable ( 1 , DonaldsonIn06 ) ;
5112: LD_INT 1
5114: PPUSH
5115: LD_STRING DonaldsonIn06
5117: PPUSH
5118: CALL_OW 39
// end else
5122: GO 5145
// if IsOk ( Donaldson ) then
5124: LD_EXP 9
5128: PPUSH
5129: CALL_OW 302
5133: IFFALSE 5145
// SaveVariable ( 1 , DonaldsonStayInDelta ) ;
5135: LD_INT 1
5137: PPUSH
5138: LD_STRING DonaldsonStayInDelta
5140: PPUSH
5141: CALL_OW 39
// if Gladstone in selectedPeople then
5145: LD_EXP 2
5149: PUSH
5150: LD_EXP 17
5154: IN
5155: IFFALSE 5187
// begin SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
5157: LD_EXP 2
5161: PPUSH
5162: LD_EXP 22
5166: PUSH
5167: LD_STRING Gladstone
5169: STR
5170: PPUSH
5171: CALL_OW 38
// SaveVariable ( 1 , GladstoneIn06 ) ;
5175: LD_INT 1
5177: PPUSH
5178: LD_STRING GladstoneIn06
5180: PPUSH
5181: CALL_OW 39
// end else
5185: GO 5208
// if IsOk ( Gladstone ) then
5187: LD_EXP 2
5191: PPUSH
5192: CALL_OW 302
5196: IFFALSE 5208
// SaveVariable ( 1 , GladstoneStayInDelta ) ;
5198: LD_INT 1
5200: PPUSH
5201: LD_STRING GladstoneStayInDelta
5203: PPUSH
5204: CALL_OW 39
// selectedPeople := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ;
5208: LD_ADDR_EXP 17
5212: PUSH
5213: LD_INT 22
5215: PUSH
5216: LD_INT 1
5218: PUSH
5219: EMPTY
5220: LIST
5221: LIST
5222: PUSH
5223: LD_INT 23
5225: PUSH
5226: LD_INT 1
5228: PUSH
5229: EMPTY
5230: LIST
5231: LIST
5232: PUSH
5233: LD_INT 21
5235: PUSH
5236: LD_INT 1
5238: PUSH
5239: EMPTY
5240: LIST
5241: LIST
5242: PUSH
5243: EMPTY
5244: LIST
5245: LIST
5246: LIST
5247: PPUSH
5248: CALL_OW 69
5252: ST_TO_ADDR
// SaveCharacters ( yourApemans , ApeIn06 ) ;
5253: LD_EXP 13
5257: PPUSH
5258: LD_STRING ApeIn06
5260: PPUSH
5261: CALL_OW 38
// SaveCharacters ( selectedPeople diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis ] , OthersIn06 ) ;
5265: LD_EXP 17
5269: PUSH
5270: LD_EXP 1
5274: PUSH
5275: LD_EXP 4
5279: PUSH
5280: LD_EXP 6
5284: PUSH
5285: LD_EXP 7
5289: PUSH
5290: LD_EXP 5
5294: PUSH
5295: LD_EXP 8
5299: PUSH
5300: LD_EXP 9
5304: PUSH
5305: LD_EXP 2
5309: PUSH
5310: LD_EXP 3
5314: PUSH
5315: EMPTY
5316: LIST
5317: LIST
5318: LIST
5319: LIST
5320: LIST
5321: LIST
5322: LIST
5323: LIST
5324: LIST
5325: DIFF
5326: PPUSH
5327: LD_STRING OthersIn06
5329: PPUSH
5330: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ DeltaDoctor , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis ] , OthersStayInDelta ) ;
5334: LD_INT 22
5336: PUSH
5337: LD_INT 4
5339: PUSH
5340: EMPTY
5341: LIST
5342: LIST
5343: PUSH
5344: LD_INT 2
5346: PUSH
5347: LD_INT 25
5349: PUSH
5350: LD_INT 1
5352: PUSH
5353: EMPTY
5354: LIST
5355: LIST
5356: PUSH
5357: LD_INT 25
5359: PUSH
5360: LD_INT 2
5362: PUSH
5363: EMPTY
5364: LIST
5365: LIST
5366: PUSH
5367: LD_INT 25
5369: PUSH
5370: LD_INT 3
5372: PUSH
5373: EMPTY
5374: LIST
5375: LIST
5376: PUSH
5377: LD_INT 25
5379: PUSH
5380: LD_INT 4
5382: PUSH
5383: EMPTY
5384: LIST
5385: LIST
5386: PUSH
5387: EMPTY
5388: LIST
5389: LIST
5390: LIST
5391: LIST
5392: LIST
5393: PUSH
5394: EMPTY
5395: LIST
5396: LIST
5397: PPUSH
5398: CALL_OW 69
5402: PUSH
5403: LD_EXP 15
5407: PUSH
5408: LD_EXP 4
5412: PUSH
5413: LD_EXP 6
5417: PUSH
5418: LD_EXP 7
5422: PUSH
5423: LD_EXP 5
5427: PUSH
5428: LD_EXP 8
5432: PUSH
5433: LD_EXP 9
5437: PUSH
5438: LD_EXP 2
5442: PUSH
5443: LD_EXP 3
5447: PUSH
5448: EMPTY
5449: LIST
5450: LIST
5451: LIST
5452: LIST
5453: LIST
5454: LIST
5455: LIST
5456: LIST
5457: LIST
5458: DIFF
5459: PPUSH
5460: LD_STRING OthersStayInDelta
5462: PPUSH
5463: CALL_OW 38
// end ;
5467: LD_VAR 0 1
5471: RET
// export function SaveCargos ; var i ; begin
5472: LD_INT 0
5474: PPUSH
5475: PPUSH
// for i in FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) do
5476: LD_ADDR_VAR 0 2
5480: PUSH
5481: LD_INT 3
5483: PPUSH
5484: LD_INT 22
5486: PUSH
5487: LD_INT 1
5489: PUSH
5490: EMPTY
5491: LIST
5492: LIST
5493: PUSH
5494: LD_INT 34
5496: PUSH
5497: LD_INT 12
5499: PUSH
5500: EMPTY
5501: LIST
5502: LIST
5503: PUSH
5504: EMPTY
5505: LIST
5506: LIST
5507: PPUSH
5508: CALL_OW 70
5512: PUSH
5513: FOR_IN
5514: IFFALSE 5542
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
5516: LD_ADDR_EXP 21
5520: PUSH
5521: LD_EXP 21
5525: PUSH
5526: LD_VAR 0 2
5530: PPUSH
5531: CALL 65297 0 1
5535: PUSH
5536: EMPTY
5537: LIST
5538: ADD
5539: ST_TO_ADDR
5540: GO 5513
5542: POP
5543: POP
// SaveVariable ( resources , 06_ResourcesInCargo06_1 ) ;
5544: LD_EXP 21
5548: PPUSH
5549: LD_STRING 06_ResourcesInCargo06_1
5551: PPUSH
5552: CALL_OW 39
// end ; end_of_file
5556: LD_VAR 0 1
5560: RET
// on Command ( comandid ) do var i ;
5561: LD_INT 0
5563: PPUSH
// begin if comandid = 65 then
5564: LD_VAR 0 1
5568: PUSH
5569: LD_INT 65
5571: EQUAL
5572: IFFALSE 5613
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
5574: LD_ADDR_VAR 0 2
5578: PUSH
5579: LD_INT 22
5581: PUSH
5582: LD_INT 1
5584: PUSH
5585: EMPTY
5586: LIST
5587: LIST
5588: PUSH
5589: EMPTY
5590: LIST
5591: PPUSH
5592: CALL_OW 69
5596: PUSH
5597: FOR_IN
5598: IFFALSE 5611
// ComStop ( i ) ;
5600: LD_VAR 0 2
5604: PPUSH
5605: CALL_OW 141
5609: GO 5597
5611: POP
5612: POP
// end ;
5613: PPOPN 2
5615: END
// on ApemanTamed ( apeman , human ) do var tmp ;
5616: LD_INT 0
5618: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
5619: LD_ADDR_VAR 0 3
5623: PUSH
5624: LD_INT 22
5626: PUSH
5627: LD_INT 1
5629: PUSH
5630: EMPTY
5631: LIST
5632: LIST
5633: PUSH
5634: LD_INT 21
5636: PUSH
5637: LD_INT 3
5639: PUSH
5640: EMPTY
5641: LIST
5642: LIST
5643: PUSH
5644: LD_INT 30
5646: PUSH
5647: LD_INT 0
5649: PUSH
5650: EMPTY
5651: LIST
5652: LIST
5653: PUSH
5654: EMPTY
5655: LIST
5656: LIST
5657: LIST
5658: PPUSH
5659: CALL_OW 69
5663: ST_TO_ADDR
// if not tmp then
5664: LD_VAR 0 3
5668: NOT
5669: IFFALSE 5673
// exit ;
5671: GO 5703
// ComEnterUnit ( apeman , tmp [ 1 ] ) ;
5673: LD_VAR 0 1
5677: PPUSH
5678: LD_VAR 0 3
5682: PUSH
5683: LD_INT 1
5685: ARRAY
5686: PPUSH
5687: CALL_OW 120
// SetSide ( apeman , 4 ) ;
5691: LD_VAR 0 1
5695: PPUSH
5696: LD_INT 4
5698: PPUSH
5699: CALL_OW 235
// end ;
5703: PPOPN 3
5705: END
// on UnitDestroyed ( un ) do begin if un = JMM then
5706: LD_VAR 0 1
5710: PUSH
5711: LD_EXP 1
5715: EQUAL
5716: IFFALSE 5725
// YouLost ( JMM ) ;
5718: LD_STRING JMM
5720: PPUSH
5721: CALL_OW 104
// SOS_UnitDestroyed ( un ) ;
5725: LD_VAR 0 1
5729: PPUSH
5730: CALL 20088 0 1
// end ;
5734: PPOPN 1
5736: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
5737: LD_VAR 0 1
5741: PPUSH
5742: LD_VAR 0 2
5746: PPUSH
5747: CALL 20210 0 2
// end ; end_of_file
5751: PPOPN 2
5753: END
// every 0 0$1 do
5754: GO 5756
5756: DISABLE
// begin enable ;
5757: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
5758: LD_STRING updateTimer(
5760: PUSH
5761: LD_OWVAR 1
5765: STR
5766: PUSH
5767: LD_STRING );
5769: STR
5770: PPUSH
5771: CALL_OW 559
// end ;
5775: END
// export function SOS_MapStart ( ) ; begin
5776: LD_INT 0
5778: PPUSH
// if streamModeActive then
5779: LD_EXP 24
5783: IFFALSE 5792
// DefineStreamItems ( true ) ;
5785: LD_INT 1
5787: PPUSH
5788: CALL 7442 0 1
// UpdateFactoryWaypoints ( ) ;
5792: CALL 21026 0 0
// end ;
5796: LD_VAR 0 1
5800: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
5801: LD_INT 0
5803: PPUSH
// if p2 = 100 then
5804: LD_VAR 0 2
5808: PUSH
5809: LD_INT 100
5811: EQUAL
5812: IFFALSE 6815
// begin if not StreamModeActive then
5814: LD_EXP 24
5818: NOT
5819: IFFALSE 5829
// StreamModeActive := true ;
5821: LD_ADDR_EXP 24
5825: PUSH
5826: LD_INT 1
5828: ST_TO_ADDR
// if p3 = 0 then
5829: LD_VAR 0 3
5833: PUSH
5834: LD_INT 0
5836: EQUAL
5837: IFFALSE 5843
// InitStreamMode ;
5839: CALL 6978 0 0
// if p3 = 1 then
5843: LD_VAR 0 3
5847: PUSH
5848: LD_INT 1
5850: EQUAL
5851: IFFALSE 5861
// sRocket := true ;
5853: LD_ADDR_EXP 29
5857: PUSH
5858: LD_INT 1
5860: ST_TO_ADDR
// if p3 = 2 then
5861: LD_VAR 0 3
5865: PUSH
5866: LD_INT 2
5868: EQUAL
5869: IFFALSE 5879
// sSpeed := true ;
5871: LD_ADDR_EXP 28
5875: PUSH
5876: LD_INT 1
5878: ST_TO_ADDR
// if p3 = 3 then
5879: LD_VAR 0 3
5883: PUSH
5884: LD_INT 3
5886: EQUAL
5887: IFFALSE 5897
// sEngine := true ;
5889: LD_ADDR_EXP 30
5893: PUSH
5894: LD_INT 1
5896: ST_TO_ADDR
// if p3 = 4 then
5897: LD_VAR 0 3
5901: PUSH
5902: LD_INT 4
5904: EQUAL
5905: IFFALSE 5915
// sSpec := true ;
5907: LD_ADDR_EXP 27
5911: PUSH
5912: LD_INT 1
5914: ST_TO_ADDR
// if p3 = 5 then
5915: LD_VAR 0 3
5919: PUSH
5920: LD_INT 5
5922: EQUAL
5923: IFFALSE 5933
// sLevel := true ;
5925: LD_ADDR_EXP 31
5929: PUSH
5930: LD_INT 1
5932: ST_TO_ADDR
// if p3 = 6 then
5933: LD_VAR 0 3
5937: PUSH
5938: LD_INT 6
5940: EQUAL
5941: IFFALSE 5951
// sArmoury := true ;
5943: LD_ADDR_EXP 32
5947: PUSH
5948: LD_INT 1
5950: ST_TO_ADDR
// if p3 = 7 then
5951: LD_VAR 0 3
5955: PUSH
5956: LD_INT 7
5958: EQUAL
5959: IFFALSE 5969
// sRadar := true ;
5961: LD_ADDR_EXP 33
5965: PUSH
5966: LD_INT 1
5968: ST_TO_ADDR
// if p3 = 8 then
5969: LD_VAR 0 3
5973: PUSH
5974: LD_INT 8
5976: EQUAL
5977: IFFALSE 5987
// sBunker := true ;
5979: LD_ADDR_EXP 34
5983: PUSH
5984: LD_INT 1
5986: ST_TO_ADDR
// if p3 = 9 then
5987: LD_VAR 0 3
5991: PUSH
5992: LD_INT 9
5994: EQUAL
5995: IFFALSE 6005
// sHack := true ;
5997: LD_ADDR_EXP 35
6001: PUSH
6002: LD_INT 1
6004: ST_TO_ADDR
// if p3 = 10 then
6005: LD_VAR 0 3
6009: PUSH
6010: LD_INT 10
6012: EQUAL
6013: IFFALSE 6023
// sFire := true ;
6015: LD_ADDR_EXP 36
6019: PUSH
6020: LD_INT 1
6022: ST_TO_ADDR
// if p3 = 11 then
6023: LD_VAR 0 3
6027: PUSH
6028: LD_INT 11
6030: EQUAL
6031: IFFALSE 6041
// sRefresh := true ;
6033: LD_ADDR_EXP 37
6037: PUSH
6038: LD_INT 1
6040: ST_TO_ADDR
// if p3 = 12 then
6041: LD_VAR 0 3
6045: PUSH
6046: LD_INT 12
6048: EQUAL
6049: IFFALSE 6059
// sExp := true ;
6051: LD_ADDR_EXP 38
6055: PUSH
6056: LD_INT 1
6058: ST_TO_ADDR
// if p3 = 13 then
6059: LD_VAR 0 3
6063: PUSH
6064: LD_INT 13
6066: EQUAL
6067: IFFALSE 6077
// sDepot := true ;
6069: LD_ADDR_EXP 39
6073: PUSH
6074: LD_INT 1
6076: ST_TO_ADDR
// if p3 = 14 then
6077: LD_VAR 0 3
6081: PUSH
6082: LD_INT 14
6084: EQUAL
6085: IFFALSE 6095
// sFlag := true ;
6087: LD_ADDR_EXP 40
6091: PUSH
6092: LD_INT 1
6094: ST_TO_ADDR
// if p3 = 15 then
6095: LD_VAR 0 3
6099: PUSH
6100: LD_INT 15
6102: EQUAL
6103: IFFALSE 6113
// sKamikadze := true ;
6105: LD_ADDR_EXP 48
6109: PUSH
6110: LD_INT 1
6112: ST_TO_ADDR
// if p3 = 16 then
6113: LD_VAR 0 3
6117: PUSH
6118: LD_INT 16
6120: EQUAL
6121: IFFALSE 6131
// sTroll := true ;
6123: LD_ADDR_EXP 49
6127: PUSH
6128: LD_INT 1
6130: ST_TO_ADDR
// if p3 = 17 then
6131: LD_VAR 0 3
6135: PUSH
6136: LD_INT 17
6138: EQUAL
6139: IFFALSE 6149
// sSlow := true ;
6141: LD_ADDR_EXP 50
6145: PUSH
6146: LD_INT 1
6148: ST_TO_ADDR
// if p3 = 18 then
6149: LD_VAR 0 3
6153: PUSH
6154: LD_INT 18
6156: EQUAL
6157: IFFALSE 6167
// sLack := true ;
6159: LD_ADDR_EXP 51
6163: PUSH
6164: LD_INT 1
6166: ST_TO_ADDR
// if p3 = 19 then
6167: LD_VAR 0 3
6171: PUSH
6172: LD_INT 19
6174: EQUAL
6175: IFFALSE 6185
// sTank := true ;
6177: LD_ADDR_EXP 53
6181: PUSH
6182: LD_INT 1
6184: ST_TO_ADDR
// if p3 = 20 then
6185: LD_VAR 0 3
6189: PUSH
6190: LD_INT 20
6192: EQUAL
6193: IFFALSE 6203
// sRemote := true ;
6195: LD_ADDR_EXP 54
6199: PUSH
6200: LD_INT 1
6202: ST_TO_ADDR
// if p3 = 21 then
6203: LD_VAR 0 3
6207: PUSH
6208: LD_INT 21
6210: EQUAL
6211: IFFALSE 6221
// sPowell := true ;
6213: LD_ADDR_EXP 55
6217: PUSH
6218: LD_INT 1
6220: ST_TO_ADDR
// if p3 = 22 then
6221: LD_VAR 0 3
6225: PUSH
6226: LD_INT 22
6228: EQUAL
6229: IFFALSE 6239
// sTeleport := true ;
6231: LD_ADDR_EXP 58
6235: PUSH
6236: LD_INT 1
6238: ST_TO_ADDR
// if p3 = 23 then
6239: LD_VAR 0 3
6243: PUSH
6244: LD_INT 23
6246: EQUAL
6247: IFFALSE 6257
// sOilTower := true ;
6249: LD_ADDR_EXP 60
6253: PUSH
6254: LD_INT 1
6256: ST_TO_ADDR
// if p3 = 24 then
6257: LD_VAR 0 3
6261: PUSH
6262: LD_INT 24
6264: EQUAL
6265: IFFALSE 6275
// sShovel := true ;
6267: LD_ADDR_EXP 61
6271: PUSH
6272: LD_INT 1
6274: ST_TO_ADDR
// if p3 = 25 then
6275: LD_VAR 0 3
6279: PUSH
6280: LD_INT 25
6282: EQUAL
6283: IFFALSE 6293
// sSheik := true ;
6285: LD_ADDR_EXP 62
6289: PUSH
6290: LD_INT 1
6292: ST_TO_ADDR
// if p3 = 26 then
6293: LD_VAR 0 3
6297: PUSH
6298: LD_INT 26
6300: EQUAL
6301: IFFALSE 6311
// sEarthquake := true ;
6303: LD_ADDR_EXP 64
6307: PUSH
6308: LD_INT 1
6310: ST_TO_ADDR
// if p3 = 27 then
6311: LD_VAR 0 3
6315: PUSH
6316: LD_INT 27
6318: EQUAL
6319: IFFALSE 6329
// sAI := true ;
6321: LD_ADDR_EXP 65
6325: PUSH
6326: LD_INT 1
6328: ST_TO_ADDR
// if p3 = 28 then
6329: LD_VAR 0 3
6333: PUSH
6334: LD_INT 28
6336: EQUAL
6337: IFFALSE 6347
// sCargo := true ;
6339: LD_ADDR_EXP 68
6343: PUSH
6344: LD_INT 1
6346: ST_TO_ADDR
// if p3 = 29 then
6347: LD_VAR 0 3
6351: PUSH
6352: LD_INT 29
6354: EQUAL
6355: IFFALSE 6365
// sDLaser := true ;
6357: LD_ADDR_EXP 69
6361: PUSH
6362: LD_INT 1
6364: ST_TO_ADDR
// if p3 = 30 then
6365: LD_VAR 0 3
6369: PUSH
6370: LD_INT 30
6372: EQUAL
6373: IFFALSE 6383
// sExchange := true ;
6375: LD_ADDR_EXP 70
6379: PUSH
6380: LD_INT 1
6382: ST_TO_ADDR
// if p3 = 31 then
6383: LD_VAR 0 3
6387: PUSH
6388: LD_INT 31
6390: EQUAL
6391: IFFALSE 6401
// sFac := true ;
6393: LD_ADDR_EXP 71
6397: PUSH
6398: LD_INT 1
6400: ST_TO_ADDR
// if p3 = 32 then
6401: LD_VAR 0 3
6405: PUSH
6406: LD_INT 32
6408: EQUAL
6409: IFFALSE 6419
// sPower := true ;
6411: LD_ADDR_EXP 72
6415: PUSH
6416: LD_INT 1
6418: ST_TO_ADDR
// if p3 = 33 then
6419: LD_VAR 0 3
6423: PUSH
6424: LD_INT 33
6426: EQUAL
6427: IFFALSE 6437
// sRandom := true ;
6429: LD_ADDR_EXP 73
6433: PUSH
6434: LD_INT 1
6436: ST_TO_ADDR
// if p3 = 34 then
6437: LD_VAR 0 3
6441: PUSH
6442: LD_INT 34
6444: EQUAL
6445: IFFALSE 6455
// sShield := true ;
6447: LD_ADDR_EXP 74
6451: PUSH
6452: LD_INT 1
6454: ST_TO_ADDR
// if p3 = 35 then
6455: LD_VAR 0 3
6459: PUSH
6460: LD_INT 35
6462: EQUAL
6463: IFFALSE 6473
// sTime := true ;
6465: LD_ADDR_EXP 75
6469: PUSH
6470: LD_INT 1
6472: ST_TO_ADDR
// if p3 = 36 then
6473: LD_VAR 0 3
6477: PUSH
6478: LD_INT 36
6480: EQUAL
6481: IFFALSE 6491
// sTools := true ;
6483: LD_ADDR_EXP 76
6487: PUSH
6488: LD_INT 1
6490: ST_TO_ADDR
// if p3 = 101 then
6491: LD_VAR 0 3
6495: PUSH
6496: LD_INT 101
6498: EQUAL
6499: IFFALSE 6509
// sSold := true ;
6501: LD_ADDR_EXP 41
6505: PUSH
6506: LD_INT 1
6508: ST_TO_ADDR
// if p3 = 102 then
6509: LD_VAR 0 3
6513: PUSH
6514: LD_INT 102
6516: EQUAL
6517: IFFALSE 6527
// sDiff := true ;
6519: LD_ADDR_EXP 42
6523: PUSH
6524: LD_INT 1
6526: ST_TO_ADDR
// if p3 = 103 then
6527: LD_VAR 0 3
6531: PUSH
6532: LD_INT 103
6534: EQUAL
6535: IFFALSE 6545
// sFog := true ;
6537: LD_ADDR_EXP 45
6541: PUSH
6542: LD_INT 1
6544: ST_TO_ADDR
// if p3 = 104 then
6545: LD_VAR 0 3
6549: PUSH
6550: LD_INT 104
6552: EQUAL
6553: IFFALSE 6563
// sReset := true ;
6555: LD_ADDR_EXP 46
6559: PUSH
6560: LD_INT 1
6562: ST_TO_ADDR
// if p3 = 105 then
6563: LD_VAR 0 3
6567: PUSH
6568: LD_INT 105
6570: EQUAL
6571: IFFALSE 6581
// sSun := true ;
6573: LD_ADDR_EXP 47
6577: PUSH
6578: LD_INT 1
6580: ST_TO_ADDR
// if p3 = 106 then
6581: LD_VAR 0 3
6585: PUSH
6586: LD_INT 106
6588: EQUAL
6589: IFFALSE 6599
// sTiger := true ;
6591: LD_ADDR_EXP 43
6595: PUSH
6596: LD_INT 1
6598: ST_TO_ADDR
// if p3 = 107 then
6599: LD_VAR 0 3
6603: PUSH
6604: LD_INT 107
6606: EQUAL
6607: IFFALSE 6617
// sBomb := true ;
6609: LD_ADDR_EXP 44
6613: PUSH
6614: LD_INT 1
6616: ST_TO_ADDR
// if p3 = 108 then
6617: LD_VAR 0 3
6621: PUSH
6622: LD_INT 108
6624: EQUAL
6625: IFFALSE 6635
// sWound := true ;
6627: LD_ADDR_EXP 52
6631: PUSH
6632: LD_INT 1
6634: ST_TO_ADDR
// if p3 = 109 then
6635: LD_VAR 0 3
6639: PUSH
6640: LD_INT 109
6642: EQUAL
6643: IFFALSE 6653
// sBetray := true ;
6645: LD_ADDR_EXP 56
6649: PUSH
6650: LD_INT 1
6652: ST_TO_ADDR
// if p3 = 110 then
6653: LD_VAR 0 3
6657: PUSH
6658: LD_INT 110
6660: EQUAL
6661: IFFALSE 6671
// sContamin := true ;
6663: LD_ADDR_EXP 57
6667: PUSH
6668: LD_INT 1
6670: ST_TO_ADDR
// if p3 = 111 then
6671: LD_VAR 0 3
6675: PUSH
6676: LD_INT 111
6678: EQUAL
6679: IFFALSE 6689
// sOil := true ;
6681: LD_ADDR_EXP 59
6685: PUSH
6686: LD_INT 1
6688: ST_TO_ADDR
// if p3 = 112 then
6689: LD_VAR 0 3
6693: PUSH
6694: LD_INT 112
6696: EQUAL
6697: IFFALSE 6707
// sStu := true ;
6699: LD_ADDR_EXP 63
6703: PUSH
6704: LD_INT 1
6706: ST_TO_ADDR
// if p3 = 113 then
6707: LD_VAR 0 3
6711: PUSH
6712: LD_INT 113
6714: EQUAL
6715: IFFALSE 6725
// sBazooka := true ;
6717: LD_ADDR_EXP 66
6721: PUSH
6722: LD_INT 1
6724: ST_TO_ADDR
// if p3 = 114 then
6725: LD_VAR 0 3
6729: PUSH
6730: LD_INT 114
6732: EQUAL
6733: IFFALSE 6743
// sMortar := true ;
6735: LD_ADDR_EXP 67
6739: PUSH
6740: LD_INT 1
6742: ST_TO_ADDR
// if p3 = 115 then
6743: LD_VAR 0 3
6747: PUSH
6748: LD_INT 115
6750: EQUAL
6751: IFFALSE 6761
// sRanger := true ;
6753: LD_ADDR_EXP 77
6757: PUSH
6758: LD_INT 1
6760: ST_TO_ADDR
// if p3 = 116 then
6761: LD_VAR 0 3
6765: PUSH
6766: LD_INT 116
6768: EQUAL
6769: IFFALSE 6779
// sComputer := true ;
6771: LD_ADDR_EXP 78
6775: PUSH
6776: LD_INT 1
6778: ST_TO_ADDR
// if p3 = 117 then
6779: LD_VAR 0 3
6783: PUSH
6784: LD_INT 117
6786: EQUAL
6787: IFFALSE 6797
// s30 := true ;
6789: LD_ADDR_EXP 79
6793: PUSH
6794: LD_INT 1
6796: ST_TO_ADDR
// if p3 = 118 then
6797: LD_VAR 0 3
6801: PUSH
6802: LD_INT 118
6804: EQUAL
6805: IFFALSE 6815
// s60 := true ;
6807: LD_ADDR_EXP 80
6811: PUSH
6812: LD_INT 1
6814: ST_TO_ADDR
// end ; if p2 = 101 then
6815: LD_VAR 0 2
6819: PUSH
6820: LD_INT 101
6822: EQUAL
6823: IFFALSE 6951
// begin case p3 of 1 :
6825: LD_VAR 0 3
6829: PUSH
6830: LD_INT 1
6832: DOUBLE
6833: EQUAL
6834: IFTRUE 6838
6836: GO 6845
6838: POP
// hHackUnlimitedResources ; 2 :
6839: CALL 19049 0 0
6843: GO 6951
6845: LD_INT 2
6847: DOUBLE
6848: EQUAL
6849: IFTRUE 6853
6851: GO 6860
6853: POP
// hHackSetLevel10 ; 3 :
6854: CALL 19182 0 0
6858: GO 6951
6860: LD_INT 3
6862: DOUBLE
6863: EQUAL
6864: IFTRUE 6868
6866: GO 6875
6868: POP
// hHackSetLevel10YourUnits ; 4 :
6869: CALL 19267 0 0
6873: GO 6951
6875: LD_INT 4
6877: DOUBLE
6878: EQUAL
6879: IFTRUE 6883
6881: GO 6890
6883: POP
// hHackInvincible ; 5 :
6884: CALL 19715 0 0
6888: GO 6951
6890: LD_INT 5
6892: DOUBLE
6893: EQUAL
6894: IFTRUE 6898
6896: GO 6905
6898: POP
// hHackInvisible ; 6 :
6899: CALL 19826 0 0
6903: GO 6951
6905: LD_INT 6
6907: DOUBLE
6908: EQUAL
6909: IFTRUE 6913
6911: GO 6920
6913: POP
// hHackChangeYourSide ; 7 :
6914: CALL 19883 0 0
6918: GO 6951
6920: LD_INT 7
6922: DOUBLE
6923: EQUAL
6924: IFTRUE 6928
6926: GO 6935
6928: POP
// hHackChangeUnitSide ; 8 :
6929: CALL 19925 0 0
6933: GO 6951
6935: LD_INT 8
6937: DOUBLE
6938: EQUAL
6939: IFTRUE 6943
6941: GO 6950
6943: POP
// hHackFog ; end ;
6944: CALL 20026 0 0
6948: GO 6951
6950: POP
// end ; end ;
6951: LD_VAR 0 7
6955: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
6956: GO 6958
6958: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
6959: LD_STRING initStreamRollete();
6961: PPUSH
6962: CALL_OW 559
// InitStreamMode ;
6966: CALL 6978 0 0
// DefineStreamItems ( false ) ;
6970: LD_INT 0
6972: PPUSH
6973: CALL 7442 0 1
// end ;
6977: END
// function InitStreamMode ; begin
6978: LD_INT 0
6980: PPUSH
// streamModeActive := false ;
6981: LD_ADDR_EXP 24
6985: PUSH
6986: LD_INT 0
6988: ST_TO_ADDR
// normalCounter := 36 ;
6989: LD_ADDR_EXP 25
6993: PUSH
6994: LD_INT 36
6996: ST_TO_ADDR
// hardcoreCounter := 18 ;
6997: LD_ADDR_EXP 26
7001: PUSH
7002: LD_INT 18
7004: ST_TO_ADDR
// sRocket := false ;
7005: LD_ADDR_EXP 29
7009: PUSH
7010: LD_INT 0
7012: ST_TO_ADDR
// sSpeed := false ;
7013: LD_ADDR_EXP 28
7017: PUSH
7018: LD_INT 0
7020: ST_TO_ADDR
// sEngine := false ;
7021: LD_ADDR_EXP 30
7025: PUSH
7026: LD_INT 0
7028: ST_TO_ADDR
// sSpec := false ;
7029: LD_ADDR_EXP 27
7033: PUSH
7034: LD_INT 0
7036: ST_TO_ADDR
// sLevel := false ;
7037: LD_ADDR_EXP 31
7041: PUSH
7042: LD_INT 0
7044: ST_TO_ADDR
// sArmoury := false ;
7045: LD_ADDR_EXP 32
7049: PUSH
7050: LD_INT 0
7052: ST_TO_ADDR
// sRadar := false ;
7053: LD_ADDR_EXP 33
7057: PUSH
7058: LD_INT 0
7060: ST_TO_ADDR
// sBunker := false ;
7061: LD_ADDR_EXP 34
7065: PUSH
7066: LD_INT 0
7068: ST_TO_ADDR
// sHack := false ;
7069: LD_ADDR_EXP 35
7073: PUSH
7074: LD_INT 0
7076: ST_TO_ADDR
// sFire := false ;
7077: LD_ADDR_EXP 36
7081: PUSH
7082: LD_INT 0
7084: ST_TO_ADDR
// sRefresh := false ;
7085: LD_ADDR_EXP 37
7089: PUSH
7090: LD_INT 0
7092: ST_TO_ADDR
// sExp := false ;
7093: LD_ADDR_EXP 38
7097: PUSH
7098: LD_INT 0
7100: ST_TO_ADDR
// sDepot := false ;
7101: LD_ADDR_EXP 39
7105: PUSH
7106: LD_INT 0
7108: ST_TO_ADDR
// sFlag := false ;
7109: LD_ADDR_EXP 40
7113: PUSH
7114: LD_INT 0
7116: ST_TO_ADDR
// sKamikadze := false ;
7117: LD_ADDR_EXP 48
7121: PUSH
7122: LD_INT 0
7124: ST_TO_ADDR
// sTroll := false ;
7125: LD_ADDR_EXP 49
7129: PUSH
7130: LD_INT 0
7132: ST_TO_ADDR
// sSlow := false ;
7133: LD_ADDR_EXP 50
7137: PUSH
7138: LD_INT 0
7140: ST_TO_ADDR
// sLack := false ;
7141: LD_ADDR_EXP 51
7145: PUSH
7146: LD_INT 0
7148: ST_TO_ADDR
// sTank := false ;
7149: LD_ADDR_EXP 53
7153: PUSH
7154: LD_INT 0
7156: ST_TO_ADDR
// sRemote := false ;
7157: LD_ADDR_EXP 54
7161: PUSH
7162: LD_INT 0
7164: ST_TO_ADDR
// sPowell := false ;
7165: LD_ADDR_EXP 55
7169: PUSH
7170: LD_INT 0
7172: ST_TO_ADDR
// sTeleport := false ;
7173: LD_ADDR_EXP 58
7177: PUSH
7178: LD_INT 0
7180: ST_TO_ADDR
// sOilTower := false ;
7181: LD_ADDR_EXP 60
7185: PUSH
7186: LD_INT 0
7188: ST_TO_ADDR
// sShovel := false ;
7189: LD_ADDR_EXP 61
7193: PUSH
7194: LD_INT 0
7196: ST_TO_ADDR
// sSheik := false ;
7197: LD_ADDR_EXP 62
7201: PUSH
7202: LD_INT 0
7204: ST_TO_ADDR
// sEarthquake := false ;
7205: LD_ADDR_EXP 64
7209: PUSH
7210: LD_INT 0
7212: ST_TO_ADDR
// sAI := false ;
7213: LD_ADDR_EXP 65
7217: PUSH
7218: LD_INT 0
7220: ST_TO_ADDR
// sCargo := false ;
7221: LD_ADDR_EXP 68
7225: PUSH
7226: LD_INT 0
7228: ST_TO_ADDR
// sDLaser := false ;
7229: LD_ADDR_EXP 69
7233: PUSH
7234: LD_INT 0
7236: ST_TO_ADDR
// sExchange := false ;
7237: LD_ADDR_EXP 70
7241: PUSH
7242: LD_INT 0
7244: ST_TO_ADDR
// sFac := false ;
7245: LD_ADDR_EXP 71
7249: PUSH
7250: LD_INT 0
7252: ST_TO_ADDR
// sPower := false ;
7253: LD_ADDR_EXP 72
7257: PUSH
7258: LD_INT 0
7260: ST_TO_ADDR
// sRandom := false ;
7261: LD_ADDR_EXP 73
7265: PUSH
7266: LD_INT 0
7268: ST_TO_ADDR
// sShield := false ;
7269: LD_ADDR_EXP 74
7273: PUSH
7274: LD_INT 0
7276: ST_TO_ADDR
// sTime := false ;
7277: LD_ADDR_EXP 75
7281: PUSH
7282: LD_INT 0
7284: ST_TO_ADDR
// sTools := false ;
7285: LD_ADDR_EXP 76
7289: PUSH
7290: LD_INT 0
7292: ST_TO_ADDR
// sSold := false ;
7293: LD_ADDR_EXP 41
7297: PUSH
7298: LD_INT 0
7300: ST_TO_ADDR
// sDiff := false ;
7301: LD_ADDR_EXP 42
7305: PUSH
7306: LD_INT 0
7308: ST_TO_ADDR
// sFog := false ;
7309: LD_ADDR_EXP 45
7313: PUSH
7314: LD_INT 0
7316: ST_TO_ADDR
// sReset := false ;
7317: LD_ADDR_EXP 46
7321: PUSH
7322: LD_INT 0
7324: ST_TO_ADDR
// sSun := false ;
7325: LD_ADDR_EXP 47
7329: PUSH
7330: LD_INT 0
7332: ST_TO_ADDR
// sTiger := false ;
7333: LD_ADDR_EXP 43
7337: PUSH
7338: LD_INT 0
7340: ST_TO_ADDR
// sBomb := false ;
7341: LD_ADDR_EXP 44
7345: PUSH
7346: LD_INT 0
7348: ST_TO_ADDR
// sWound := false ;
7349: LD_ADDR_EXP 52
7353: PUSH
7354: LD_INT 0
7356: ST_TO_ADDR
// sBetray := false ;
7357: LD_ADDR_EXP 56
7361: PUSH
7362: LD_INT 0
7364: ST_TO_ADDR
// sContamin := false ;
7365: LD_ADDR_EXP 57
7369: PUSH
7370: LD_INT 0
7372: ST_TO_ADDR
// sOil := false ;
7373: LD_ADDR_EXP 59
7377: PUSH
7378: LD_INT 0
7380: ST_TO_ADDR
// sStu := false ;
7381: LD_ADDR_EXP 63
7385: PUSH
7386: LD_INT 0
7388: ST_TO_ADDR
// sBazooka := false ;
7389: LD_ADDR_EXP 66
7393: PUSH
7394: LD_INT 0
7396: ST_TO_ADDR
// sMortar := false ;
7397: LD_ADDR_EXP 67
7401: PUSH
7402: LD_INT 0
7404: ST_TO_ADDR
// sRanger := false ;
7405: LD_ADDR_EXP 77
7409: PUSH
7410: LD_INT 0
7412: ST_TO_ADDR
// sComputer := false ;
7413: LD_ADDR_EXP 78
7417: PUSH
7418: LD_INT 0
7420: ST_TO_ADDR
// s30 := false ;
7421: LD_ADDR_EXP 79
7425: PUSH
7426: LD_INT 0
7428: ST_TO_ADDR
// s60 := false ;
7429: LD_ADDR_EXP 80
7433: PUSH
7434: LD_INT 0
7436: ST_TO_ADDR
// end ;
7437: LD_VAR 0 1
7441: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
7442: LD_INT 0
7444: PPUSH
7445: PPUSH
7446: PPUSH
7447: PPUSH
7448: PPUSH
7449: PPUSH
7450: PPUSH
// result := [ ] ;
7451: LD_ADDR_VAR 0 2
7455: PUSH
7456: EMPTY
7457: ST_TO_ADDR
// if campaign_id = 1 then
7458: LD_OWVAR 69
7462: PUSH
7463: LD_INT 1
7465: EQUAL
7466: IFFALSE 10632
// begin case mission_number of 1 :
7468: LD_OWVAR 70
7472: PUSH
7473: LD_INT 1
7475: DOUBLE
7476: EQUAL
7477: IFTRUE 7481
7479: GO 7557
7481: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
7482: LD_ADDR_VAR 0 2
7486: PUSH
7487: LD_INT 2
7489: PUSH
7490: LD_INT 4
7492: PUSH
7493: LD_INT 11
7495: PUSH
7496: LD_INT 12
7498: PUSH
7499: LD_INT 15
7501: PUSH
7502: LD_INT 16
7504: PUSH
7505: LD_INT 22
7507: PUSH
7508: LD_INT 23
7510: PUSH
7511: LD_INT 26
7513: PUSH
7514: EMPTY
7515: LIST
7516: LIST
7517: LIST
7518: LIST
7519: LIST
7520: LIST
7521: LIST
7522: LIST
7523: LIST
7524: PUSH
7525: LD_INT 101
7527: PUSH
7528: LD_INT 102
7530: PUSH
7531: LD_INT 106
7533: PUSH
7534: LD_INT 116
7536: PUSH
7537: LD_INT 117
7539: PUSH
7540: LD_INT 118
7542: PUSH
7543: EMPTY
7544: LIST
7545: LIST
7546: LIST
7547: LIST
7548: LIST
7549: LIST
7550: PUSH
7551: EMPTY
7552: LIST
7553: LIST
7554: ST_TO_ADDR
7555: GO 10630
7557: LD_INT 2
7559: DOUBLE
7560: EQUAL
7561: IFTRUE 7565
7563: GO 7649
7565: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
7566: LD_ADDR_VAR 0 2
7570: PUSH
7571: LD_INT 2
7573: PUSH
7574: LD_INT 4
7576: PUSH
7577: LD_INT 11
7579: PUSH
7580: LD_INT 12
7582: PUSH
7583: LD_INT 15
7585: PUSH
7586: LD_INT 16
7588: PUSH
7589: LD_INT 22
7591: PUSH
7592: LD_INT 23
7594: PUSH
7595: LD_INT 26
7597: PUSH
7598: EMPTY
7599: LIST
7600: LIST
7601: LIST
7602: LIST
7603: LIST
7604: LIST
7605: LIST
7606: LIST
7607: LIST
7608: PUSH
7609: LD_INT 101
7611: PUSH
7612: LD_INT 102
7614: PUSH
7615: LD_INT 105
7617: PUSH
7618: LD_INT 106
7620: PUSH
7621: LD_INT 108
7623: PUSH
7624: LD_INT 116
7626: PUSH
7627: LD_INT 117
7629: PUSH
7630: LD_INT 118
7632: PUSH
7633: EMPTY
7634: LIST
7635: LIST
7636: LIST
7637: LIST
7638: LIST
7639: LIST
7640: LIST
7641: LIST
7642: PUSH
7643: EMPTY
7644: LIST
7645: LIST
7646: ST_TO_ADDR
7647: GO 10630
7649: LD_INT 3
7651: DOUBLE
7652: EQUAL
7653: IFTRUE 7657
7655: GO 7745
7657: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
7658: LD_ADDR_VAR 0 2
7662: PUSH
7663: LD_INT 2
7665: PUSH
7666: LD_INT 4
7668: PUSH
7669: LD_INT 5
7671: PUSH
7672: LD_INT 11
7674: PUSH
7675: LD_INT 12
7677: PUSH
7678: LD_INT 15
7680: PUSH
7681: LD_INT 16
7683: PUSH
7684: LD_INT 22
7686: PUSH
7687: LD_INT 26
7689: PUSH
7690: LD_INT 36
7692: PUSH
7693: EMPTY
7694: LIST
7695: LIST
7696: LIST
7697: LIST
7698: LIST
7699: LIST
7700: LIST
7701: LIST
7702: LIST
7703: LIST
7704: PUSH
7705: LD_INT 101
7707: PUSH
7708: LD_INT 102
7710: PUSH
7711: LD_INT 105
7713: PUSH
7714: LD_INT 106
7716: PUSH
7717: LD_INT 108
7719: PUSH
7720: LD_INT 116
7722: PUSH
7723: LD_INT 117
7725: PUSH
7726: LD_INT 118
7728: PUSH
7729: EMPTY
7730: LIST
7731: LIST
7732: LIST
7733: LIST
7734: LIST
7735: LIST
7736: LIST
7737: LIST
7738: PUSH
7739: EMPTY
7740: LIST
7741: LIST
7742: ST_TO_ADDR
7743: GO 10630
7745: LD_INT 4
7747: DOUBLE
7748: EQUAL
7749: IFTRUE 7753
7751: GO 7849
7753: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
7754: LD_ADDR_VAR 0 2
7758: PUSH
7759: LD_INT 2
7761: PUSH
7762: LD_INT 4
7764: PUSH
7765: LD_INT 5
7767: PUSH
7768: LD_INT 8
7770: PUSH
7771: LD_INT 11
7773: PUSH
7774: LD_INT 12
7776: PUSH
7777: LD_INT 15
7779: PUSH
7780: LD_INT 16
7782: PUSH
7783: LD_INT 22
7785: PUSH
7786: LD_INT 23
7788: PUSH
7789: LD_INT 26
7791: PUSH
7792: LD_INT 36
7794: PUSH
7795: EMPTY
7796: LIST
7797: LIST
7798: LIST
7799: LIST
7800: LIST
7801: LIST
7802: LIST
7803: LIST
7804: LIST
7805: LIST
7806: LIST
7807: LIST
7808: PUSH
7809: LD_INT 101
7811: PUSH
7812: LD_INT 102
7814: PUSH
7815: LD_INT 105
7817: PUSH
7818: LD_INT 106
7820: PUSH
7821: LD_INT 108
7823: PUSH
7824: LD_INT 116
7826: PUSH
7827: LD_INT 117
7829: PUSH
7830: LD_INT 118
7832: PUSH
7833: EMPTY
7834: LIST
7835: LIST
7836: LIST
7837: LIST
7838: LIST
7839: LIST
7840: LIST
7841: LIST
7842: PUSH
7843: EMPTY
7844: LIST
7845: LIST
7846: ST_TO_ADDR
7847: GO 10630
7849: LD_INT 5
7851: DOUBLE
7852: EQUAL
7853: IFTRUE 7857
7855: GO 7969
7857: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
7858: LD_ADDR_VAR 0 2
7862: PUSH
7863: LD_INT 2
7865: PUSH
7866: LD_INT 4
7868: PUSH
7869: LD_INT 5
7871: PUSH
7872: LD_INT 6
7874: PUSH
7875: LD_INT 8
7877: PUSH
7878: LD_INT 11
7880: PUSH
7881: LD_INT 12
7883: PUSH
7884: LD_INT 15
7886: PUSH
7887: LD_INT 16
7889: PUSH
7890: LD_INT 22
7892: PUSH
7893: LD_INT 23
7895: PUSH
7896: LD_INT 25
7898: PUSH
7899: LD_INT 26
7901: PUSH
7902: LD_INT 36
7904: PUSH
7905: EMPTY
7906: LIST
7907: LIST
7908: LIST
7909: LIST
7910: LIST
7911: LIST
7912: LIST
7913: LIST
7914: LIST
7915: LIST
7916: LIST
7917: LIST
7918: LIST
7919: LIST
7920: PUSH
7921: LD_INT 101
7923: PUSH
7924: LD_INT 102
7926: PUSH
7927: LD_INT 105
7929: PUSH
7930: LD_INT 106
7932: PUSH
7933: LD_INT 108
7935: PUSH
7936: LD_INT 109
7938: PUSH
7939: LD_INT 112
7941: PUSH
7942: LD_INT 116
7944: PUSH
7945: LD_INT 117
7947: PUSH
7948: LD_INT 118
7950: PUSH
7951: EMPTY
7952: LIST
7953: LIST
7954: LIST
7955: LIST
7956: LIST
7957: LIST
7958: LIST
7959: LIST
7960: LIST
7961: LIST
7962: PUSH
7963: EMPTY
7964: LIST
7965: LIST
7966: ST_TO_ADDR
7967: GO 10630
7969: LD_INT 6
7971: DOUBLE
7972: EQUAL
7973: IFTRUE 7977
7975: GO 8109
7977: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
7978: LD_ADDR_VAR 0 2
7982: PUSH
7983: LD_INT 2
7985: PUSH
7986: LD_INT 4
7988: PUSH
7989: LD_INT 5
7991: PUSH
7992: LD_INT 6
7994: PUSH
7995: LD_INT 8
7997: PUSH
7998: LD_INT 11
8000: PUSH
8001: LD_INT 12
8003: PUSH
8004: LD_INT 15
8006: PUSH
8007: LD_INT 16
8009: PUSH
8010: LD_INT 20
8012: PUSH
8013: LD_INT 21
8015: PUSH
8016: LD_INT 22
8018: PUSH
8019: LD_INT 23
8021: PUSH
8022: LD_INT 25
8024: PUSH
8025: LD_INT 26
8027: PUSH
8028: LD_INT 30
8030: PUSH
8031: LD_INT 31
8033: PUSH
8034: LD_INT 32
8036: PUSH
8037: LD_INT 36
8039: PUSH
8040: EMPTY
8041: LIST
8042: LIST
8043: LIST
8044: LIST
8045: LIST
8046: LIST
8047: LIST
8048: LIST
8049: LIST
8050: LIST
8051: LIST
8052: LIST
8053: LIST
8054: LIST
8055: LIST
8056: LIST
8057: LIST
8058: LIST
8059: LIST
8060: PUSH
8061: LD_INT 101
8063: PUSH
8064: LD_INT 102
8066: PUSH
8067: LD_INT 105
8069: PUSH
8070: LD_INT 106
8072: PUSH
8073: LD_INT 108
8075: PUSH
8076: LD_INT 109
8078: PUSH
8079: LD_INT 112
8081: PUSH
8082: LD_INT 116
8084: PUSH
8085: LD_INT 117
8087: PUSH
8088: LD_INT 118
8090: PUSH
8091: EMPTY
8092: LIST
8093: LIST
8094: LIST
8095: LIST
8096: LIST
8097: LIST
8098: LIST
8099: LIST
8100: LIST
8101: LIST
8102: PUSH
8103: EMPTY
8104: LIST
8105: LIST
8106: ST_TO_ADDR
8107: GO 10630
8109: LD_INT 7
8111: DOUBLE
8112: EQUAL
8113: IFTRUE 8117
8115: GO 8229
8117: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
8118: LD_ADDR_VAR 0 2
8122: PUSH
8123: LD_INT 2
8125: PUSH
8126: LD_INT 4
8128: PUSH
8129: LD_INT 5
8131: PUSH
8132: LD_INT 7
8134: PUSH
8135: LD_INT 11
8137: PUSH
8138: LD_INT 12
8140: PUSH
8141: LD_INT 15
8143: PUSH
8144: LD_INT 16
8146: PUSH
8147: LD_INT 20
8149: PUSH
8150: LD_INT 21
8152: PUSH
8153: LD_INT 22
8155: PUSH
8156: LD_INT 23
8158: PUSH
8159: LD_INT 25
8161: PUSH
8162: LD_INT 26
8164: PUSH
8165: EMPTY
8166: LIST
8167: LIST
8168: LIST
8169: LIST
8170: LIST
8171: LIST
8172: LIST
8173: LIST
8174: LIST
8175: LIST
8176: LIST
8177: LIST
8178: LIST
8179: LIST
8180: PUSH
8181: LD_INT 101
8183: PUSH
8184: LD_INT 102
8186: PUSH
8187: LD_INT 103
8189: PUSH
8190: LD_INT 105
8192: PUSH
8193: LD_INT 106
8195: PUSH
8196: LD_INT 108
8198: PUSH
8199: LD_INT 112
8201: PUSH
8202: LD_INT 116
8204: PUSH
8205: LD_INT 117
8207: PUSH
8208: LD_INT 118
8210: PUSH
8211: EMPTY
8212: LIST
8213: LIST
8214: LIST
8215: LIST
8216: LIST
8217: LIST
8218: LIST
8219: LIST
8220: LIST
8221: LIST
8222: PUSH
8223: EMPTY
8224: LIST
8225: LIST
8226: ST_TO_ADDR
8227: GO 10630
8229: LD_INT 8
8231: DOUBLE
8232: EQUAL
8233: IFTRUE 8237
8235: GO 8377
8237: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
8238: LD_ADDR_VAR 0 2
8242: PUSH
8243: LD_INT 2
8245: PUSH
8246: LD_INT 4
8248: PUSH
8249: LD_INT 5
8251: PUSH
8252: LD_INT 6
8254: PUSH
8255: LD_INT 7
8257: PUSH
8258: LD_INT 8
8260: PUSH
8261: LD_INT 11
8263: PUSH
8264: LD_INT 12
8266: PUSH
8267: LD_INT 15
8269: PUSH
8270: LD_INT 16
8272: PUSH
8273: LD_INT 20
8275: PUSH
8276: LD_INT 21
8278: PUSH
8279: LD_INT 22
8281: PUSH
8282: LD_INT 23
8284: PUSH
8285: LD_INT 25
8287: PUSH
8288: LD_INT 26
8290: PUSH
8291: LD_INT 30
8293: PUSH
8294: LD_INT 31
8296: PUSH
8297: LD_INT 32
8299: PUSH
8300: LD_INT 36
8302: PUSH
8303: EMPTY
8304: LIST
8305: LIST
8306: LIST
8307: LIST
8308: LIST
8309: LIST
8310: LIST
8311: LIST
8312: LIST
8313: LIST
8314: LIST
8315: LIST
8316: LIST
8317: LIST
8318: LIST
8319: LIST
8320: LIST
8321: LIST
8322: LIST
8323: LIST
8324: PUSH
8325: LD_INT 101
8327: PUSH
8328: LD_INT 102
8330: PUSH
8331: LD_INT 103
8333: PUSH
8334: LD_INT 105
8336: PUSH
8337: LD_INT 106
8339: PUSH
8340: LD_INT 108
8342: PUSH
8343: LD_INT 109
8345: PUSH
8346: LD_INT 112
8348: PUSH
8349: LD_INT 116
8351: PUSH
8352: LD_INT 117
8354: PUSH
8355: LD_INT 118
8357: PUSH
8358: EMPTY
8359: LIST
8360: LIST
8361: LIST
8362: LIST
8363: LIST
8364: LIST
8365: LIST
8366: LIST
8367: LIST
8368: LIST
8369: LIST
8370: PUSH
8371: EMPTY
8372: LIST
8373: LIST
8374: ST_TO_ADDR
8375: GO 10630
8377: LD_INT 9
8379: DOUBLE
8380: EQUAL
8381: IFTRUE 8385
8383: GO 8533
8385: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
8386: LD_ADDR_VAR 0 2
8390: PUSH
8391: LD_INT 2
8393: PUSH
8394: LD_INT 4
8396: PUSH
8397: LD_INT 5
8399: PUSH
8400: LD_INT 6
8402: PUSH
8403: LD_INT 7
8405: PUSH
8406: LD_INT 8
8408: PUSH
8409: LD_INT 11
8411: PUSH
8412: LD_INT 12
8414: PUSH
8415: LD_INT 15
8417: PUSH
8418: LD_INT 16
8420: PUSH
8421: LD_INT 20
8423: PUSH
8424: LD_INT 21
8426: PUSH
8427: LD_INT 22
8429: PUSH
8430: LD_INT 23
8432: PUSH
8433: LD_INT 25
8435: PUSH
8436: LD_INT 26
8438: PUSH
8439: LD_INT 28
8441: PUSH
8442: LD_INT 30
8444: PUSH
8445: LD_INT 31
8447: PUSH
8448: LD_INT 32
8450: PUSH
8451: LD_INT 36
8453: PUSH
8454: EMPTY
8455: LIST
8456: LIST
8457: LIST
8458: LIST
8459: LIST
8460: LIST
8461: LIST
8462: LIST
8463: LIST
8464: LIST
8465: LIST
8466: LIST
8467: LIST
8468: LIST
8469: LIST
8470: LIST
8471: LIST
8472: LIST
8473: LIST
8474: LIST
8475: LIST
8476: PUSH
8477: LD_INT 101
8479: PUSH
8480: LD_INT 102
8482: PUSH
8483: LD_INT 103
8485: PUSH
8486: LD_INT 105
8488: PUSH
8489: LD_INT 106
8491: PUSH
8492: LD_INT 108
8494: PUSH
8495: LD_INT 109
8497: PUSH
8498: LD_INT 112
8500: PUSH
8501: LD_INT 114
8503: PUSH
8504: LD_INT 116
8506: PUSH
8507: LD_INT 117
8509: PUSH
8510: LD_INT 118
8512: PUSH
8513: EMPTY
8514: LIST
8515: LIST
8516: LIST
8517: LIST
8518: LIST
8519: LIST
8520: LIST
8521: LIST
8522: LIST
8523: LIST
8524: LIST
8525: LIST
8526: PUSH
8527: EMPTY
8528: LIST
8529: LIST
8530: ST_TO_ADDR
8531: GO 10630
8533: LD_INT 10
8535: DOUBLE
8536: EQUAL
8537: IFTRUE 8541
8539: GO 8737
8541: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
8542: LD_ADDR_VAR 0 2
8546: PUSH
8547: LD_INT 2
8549: PUSH
8550: LD_INT 4
8552: PUSH
8553: LD_INT 5
8555: PUSH
8556: LD_INT 6
8558: PUSH
8559: LD_INT 7
8561: PUSH
8562: LD_INT 8
8564: PUSH
8565: LD_INT 9
8567: PUSH
8568: LD_INT 10
8570: PUSH
8571: LD_INT 11
8573: PUSH
8574: LD_INT 12
8576: PUSH
8577: LD_INT 13
8579: PUSH
8580: LD_INT 14
8582: PUSH
8583: LD_INT 15
8585: PUSH
8586: LD_INT 16
8588: PUSH
8589: LD_INT 17
8591: PUSH
8592: LD_INT 18
8594: PUSH
8595: LD_INT 19
8597: PUSH
8598: LD_INT 20
8600: PUSH
8601: LD_INT 21
8603: PUSH
8604: LD_INT 22
8606: PUSH
8607: LD_INT 23
8609: PUSH
8610: LD_INT 24
8612: PUSH
8613: LD_INT 25
8615: PUSH
8616: LD_INT 26
8618: PUSH
8619: LD_INT 28
8621: PUSH
8622: LD_INT 30
8624: PUSH
8625: LD_INT 31
8627: PUSH
8628: LD_INT 32
8630: PUSH
8631: LD_INT 36
8633: PUSH
8634: EMPTY
8635: LIST
8636: LIST
8637: LIST
8638: LIST
8639: LIST
8640: LIST
8641: LIST
8642: LIST
8643: LIST
8644: LIST
8645: LIST
8646: LIST
8647: LIST
8648: LIST
8649: LIST
8650: LIST
8651: LIST
8652: LIST
8653: LIST
8654: LIST
8655: LIST
8656: LIST
8657: LIST
8658: LIST
8659: LIST
8660: LIST
8661: LIST
8662: LIST
8663: LIST
8664: PUSH
8665: LD_INT 101
8667: PUSH
8668: LD_INT 102
8670: PUSH
8671: LD_INT 103
8673: PUSH
8674: LD_INT 104
8676: PUSH
8677: LD_INT 105
8679: PUSH
8680: LD_INT 106
8682: PUSH
8683: LD_INT 107
8685: PUSH
8686: LD_INT 108
8688: PUSH
8689: LD_INT 109
8691: PUSH
8692: LD_INT 110
8694: PUSH
8695: LD_INT 111
8697: PUSH
8698: LD_INT 112
8700: PUSH
8701: LD_INT 114
8703: PUSH
8704: LD_INT 116
8706: PUSH
8707: LD_INT 117
8709: PUSH
8710: LD_INT 118
8712: PUSH
8713: EMPTY
8714: LIST
8715: LIST
8716: LIST
8717: LIST
8718: LIST
8719: LIST
8720: LIST
8721: LIST
8722: LIST
8723: LIST
8724: LIST
8725: LIST
8726: LIST
8727: LIST
8728: LIST
8729: LIST
8730: PUSH
8731: EMPTY
8732: LIST
8733: LIST
8734: ST_TO_ADDR
8735: GO 10630
8737: LD_INT 11
8739: DOUBLE
8740: EQUAL
8741: IFTRUE 8745
8743: GO 8949
8745: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
8746: LD_ADDR_VAR 0 2
8750: PUSH
8751: LD_INT 2
8753: PUSH
8754: LD_INT 3
8756: PUSH
8757: LD_INT 4
8759: PUSH
8760: LD_INT 5
8762: PUSH
8763: LD_INT 6
8765: PUSH
8766: LD_INT 7
8768: PUSH
8769: LD_INT 8
8771: PUSH
8772: LD_INT 9
8774: PUSH
8775: LD_INT 10
8777: PUSH
8778: LD_INT 11
8780: PUSH
8781: LD_INT 12
8783: PUSH
8784: LD_INT 13
8786: PUSH
8787: LD_INT 14
8789: PUSH
8790: LD_INT 15
8792: PUSH
8793: LD_INT 16
8795: PUSH
8796: LD_INT 17
8798: PUSH
8799: LD_INT 18
8801: PUSH
8802: LD_INT 19
8804: PUSH
8805: LD_INT 20
8807: PUSH
8808: LD_INT 21
8810: PUSH
8811: LD_INT 22
8813: PUSH
8814: LD_INT 23
8816: PUSH
8817: LD_INT 24
8819: PUSH
8820: LD_INT 25
8822: PUSH
8823: LD_INT 26
8825: PUSH
8826: LD_INT 28
8828: PUSH
8829: LD_INT 30
8831: PUSH
8832: LD_INT 31
8834: PUSH
8835: LD_INT 32
8837: PUSH
8838: LD_INT 34
8840: PUSH
8841: LD_INT 36
8843: PUSH
8844: EMPTY
8845: LIST
8846: LIST
8847: LIST
8848: LIST
8849: LIST
8850: LIST
8851: LIST
8852: LIST
8853: LIST
8854: LIST
8855: LIST
8856: LIST
8857: LIST
8858: LIST
8859: LIST
8860: LIST
8861: LIST
8862: LIST
8863: LIST
8864: LIST
8865: LIST
8866: LIST
8867: LIST
8868: LIST
8869: LIST
8870: LIST
8871: LIST
8872: LIST
8873: LIST
8874: LIST
8875: LIST
8876: PUSH
8877: LD_INT 101
8879: PUSH
8880: LD_INT 102
8882: PUSH
8883: LD_INT 103
8885: PUSH
8886: LD_INT 104
8888: PUSH
8889: LD_INT 105
8891: PUSH
8892: LD_INT 106
8894: PUSH
8895: LD_INT 107
8897: PUSH
8898: LD_INT 108
8900: PUSH
8901: LD_INT 109
8903: PUSH
8904: LD_INT 110
8906: PUSH
8907: LD_INT 111
8909: PUSH
8910: LD_INT 112
8912: PUSH
8913: LD_INT 114
8915: PUSH
8916: LD_INT 116
8918: PUSH
8919: LD_INT 117
8921: PUSH
8922: LD_INT 118
8924: PUSH
8925: EMPTY
8926: LIST
8927: LIST
8928: LIST
8929: LIST
8930: LIST
8931: LIST
8932: LIST
8933: LIST
8934: LIST
8935: LIST
8936: LIST
8937: LIST
8938: LIST
8939: LIST
8940: LIST
8941: LIST
8942: PUSH
8943: EMPTY
8944: LIST
8945: LIST
8946: ST_TO_ADDR
8947: GO 10630
8949: LD_INT 12
8951: DOUBLE
8952: EQUAL
8953: IFTRUE 8957
8955: GO 9177
8957: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
8958: LD_ADDR_VAR 0 2
8962: PUSH
8963: LD_INT 1
8965: PUSH
8966: LD_INT 2
8968: PUSH
8969: LD_INT 3
8971: PUSH
8972: LD_INT 4
8974: PUSH
8975: LD_INT 5
8977: PUSH
8978: LD_INT 6
8980: PUSH
8981: LD_INT 7
8983: PUSH
8984: LD_INT 8
8986: PUSH
8987: LD_INT 9
8989: PUSH
8990: LD_INT 10
8992: PUSH
8993: LD_INT 11
8995: PUSH
8996: LD_INT 12
8998: PUSH
8999: LD_INT 13
9001: PUSH
9002: LD_INT 14
9004: PUSH
9005: LD_INT 15
9007: PUSH
9008: LD_INT 16
9010: PUSH
9011: LD_INT 17
9013: PUSH
9014: LD_INT 18
9016: PUSH
9017: LD_INT 19
9019: PUSH
9020: LD_INT 20
9022: PUSH
9023: LD_INT 21
9025: PUSH
9026: LD_INT 22
9028: PUSH
9029: LD_INT 23
9031: PUSH
9032: LD_INT 24
9034: PUSH
9035: LD_INT 25
9037: PUSH
9038: LD_INT 26
9040: PUSH
9041: LD_INT 27
9043: PUSH
9044: LD_INT 28
9046: PUSH
9047: LD_INT 30
9049: PUSH
9050: LD_INT 31
9052: PUSH
9053: LD_INT 32
9055: PUSH
9056: LD_INT 33
9058: PUSH
9059: LD_INT 34
9061: PUSH
9062: LD_INT 36
9064: PUSH
9065: EMPTY
9066: LIST
9067: LIST
9068: LIST
9069: LIST
9070: LIST
9071: LIST
9072: LIST
9073: LIST
9074: LIST
9075: LIST
9076: LIST
9077: LIST
9078: LIST
9079: LIST
9080: LIST
9081: LIST
9082: LIST
9083: LIST
9084: LIST
9085: LIST
9086: LIST
9087: LIST
9088: LIST
9089: LIST
9090: LIST
9091: LIST
9092: LIST
9093: LIST
9094: LIST
9095: LIST
9096: LIST
9097: LIST
9098: LIST
9099: LIST
9100: PUSH
9101: LD_INT 101
9103: PUSH
9104: LD_INT 102
9106: PUSH
9107: LD_INT 103
9109: PUSH
9110: LD_INT 104
9112: PUSH
9113: LD_INT 105
9115: PUSH
9116: LD_INT 106
9118: PUSH
9119: LD_INT 107
9121: PUSH
9122: LD_INT 108
9124: PUSH
9125: LD_INT 109
9127: PUSH
9128: LD_INT 110
9130: PUSH
9131: LD_INT 111
9133: PUSH
9134: LD_INT 112
9136: PUSH
9137: LD_INT 113
9139: PUSH
9140: LD_INT 114
9142: PUSH
9143: LD_INT 116
9145: PUSH
9146: LD_INT 117
9148: PUSH
9149: LD_INT 118
9151: PUSH
9152: EMPTY
9153: LIST
9154: LIST
9155: LIST
9156: LIST
9157: LIST
9158: LIST
9159: LIST
9160: LIST
9161: LIST
9162: LIST
9163: LIST
9164: LIST
9165: LIST
9166: LIST
9167: LIST
9168: LIST
9169: LIST
9170: PUSH
9171: EMPTY
9172: LIST
9173: LIST
9174: ST_TO_ADDR
9175: GO 10630
9177: LD_INT 13
9179: DOUBLE
9180: EQUAL
9181: IFTRUE 9185
9183: GO 9393
9185: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
9186: LD_ADDR_VAR 0 2
9190: PUSH
9191: LD_INT 1
9193: PUSH
9194: LD_INT 2
9196: PUSH
9197: LD_INT 3
9199: PUSH
9200: LD_INT 4
9202: PUSH
9203: LD_INT 5
9205: PUSH
9206: LD_INT 8
9208: PUSH
9209: LD_INT 9
9211: PUSH
9212: LD_INT 10
9214: PUSH
9215: LD_INT 11
9217: PUSH
9218: LD_INT 12
9220: PUSH
9221: LD_INT 14
9223: PUSH
9224: LD_INT 15
9226: PUSH
9227: LD_INT 16
9229: PUSH
9230: LD_INT 17
9232: PUSH
9233: LD_INT 18
9235: PUSH
9236: LD_INT 19
9238: PUSH
9239: LD_INT 20
9241: PUSH
9242: LD_INT 21
9244: PUSH
9245: LD_INT 22
9247: PUSH
9248: LD_INT 23
9250: PUSH
9251: LD_INT 24
9253: PUSH
9254: LD_INT 25
9256: PUSH
9257: LD_INT 26
9259: PUSH
9260: LD_INT 27
9262: PUSH
9263: LD_INT 28
9265: PUSH
9266: LD_INT 30
9268: PUSH
9269: LD_INT 31
9271: PUSH
9272: LD_INT 32
9274: PUSH
9275: LD_INT 33
9277: PUSH
9278: LD_INT 34
9280: PUSH
9281: LD_INT 36
9283: PUSH
9284: EMPTY
9285: LIST
9286: LIST
9287: LIST
9288: LIST
9289: LIST
9290: LIST
9291: LIST
9292: LIST
9293: LIST
9294: LIST
9295: LIST
9296: LIST
9297: LIST
9298: LIST
9299: LIST
9300: LIST
9301: LIST
9302: LIST
9303: LIST
9304: LIST
9305: LIST
9306: LIST
9307: LIST
9308: LIST
9309: LIST
9310: LIST
9311: LIST
9312: LIST
9313: LIST
9314: LIST
9315: LIST
9316: PUSH
9317: LD_INT 101
9319: PUSH
9320: LD_INT 102
9322: PUSH
9323: LD_INT 103
9325: PUSH
9326: LD_INT 104
9328: PUSH
9329: LD_INT 105
9331: PUSH
9332: LD_INT 106
9334: PUSH
9335: LD_INT 107
9337: PUSH
9338: LD_INT 108
9340: PUSH
9341: LD_INT 109
9343: PUSH
9344: LD_INT 110
9346: PUSH
9347: LD_INT 111
9349: PUSH
9350: LD_INT 112
9352: PUSH
9353: LD_INT 113
9355: PUSH
9356: LD_INT 114
9358: PUSH
9359: LD_INT 116
9361: PUSH
9362: LD_INT 117
9364: PUSH
9365: LD_INT 118
9367: PUSH
9368: EMPTY
9369: LIST
9370: LIST
9371: LIST
9372: LIST
9373: LIST
9374: LIST
9375: LIST
9376: LIST
9377: LIST
9378: LIST
9379: LIST
9380: LIST
9381: LIST
9382: LIST
9383: LIST
9384: LIST
9385: LIST
9386: PUSH
9387: EMPTY
9388: LIST
9389: LIST
9390: ST_TO_ADDR
9391: GO 10630
9393: LD_INT 14
9395: DOUBLE
9396: EQUAL
9397: IFTRUE 9401
9399: GO 9625
9401: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
9402: LD_ADDR_VAR 0 2
9406: PUSH
9407: LD_INT 1
9409: PUSH
9410: LD_INT 2
9412: PUSH
9413: LD_INT 3
9415: PUSH
9416: LD_INT 4
9418: PUSH
9419: LD_INT 5
9421: PUSH
9422: LD_INT 6
9424: PUSH
9425: LD_INT 7
9427: PUSH
9428: LD_INT 8
9430: PUSH
9431: LD_INT 9
9433: PUSH
9434: LD_INT 10
9436: PUSH
9437: LD_INT 11
9439: PUSH
9440: LD_INT 12
9442: PUSH
9443: LD_INT 13
9445: PUSH
9446: LD_INT 14
9448: PUSH
9449: LD_INT 15
9451: PUSH
9452: LD_INT 16
9454: PUSH
9455: LD_INT 17
9457: PUSH
9458: LD_INT 18
9460: PUSH
9461: LD_INT 19
9463: PUSH
9464: LD_INT 20
9466: PUSH
9467: LD_INT 21
9469: PUSH
9470: LD_INT 22
9472: PUSH
9473: LD_INT 23
9475: PUSH
9476: LD_INT 24
9478: PUSH
9479: LD_INT 25
9481: PUSH
9482: LD_INT 26
9484: PUSH
9485: LD_INT 27
9487: PUSH
9488: LD_INT 28
9490: PUSH
9491: LD_INT 29
9493: PUSH
9494: LD_INT 30
9496: PUSH
9497: LD_INT 31
9499: PUSH
9500: LD_INT 32
9502: PUSH
9503: LD_INT 33
9505: PUSH
9506: LD_INT 34
9508: PUSH
9509: LD_INT 36
9511: PUSH
9512: EMPTY
9513: LIST
9514: LIST
9515: LIST
9516: LIST
9517: LIST
9518: LIST
9519: LIST
9520: LIST
9521: LIST
9522: LIST
9523: LIST
9524: LIST
9525: LIST
9526: LIST
9527: LIST
9528: LIST
9529: LIST
9530: LIST
9531: LIST
9532: LIST
9533: LIST
9534: LIST
9535: LIST
9536: LIST
9537: LIST
9538: LIST
9539: LIST
9540: LIST
9541: LIST
9542: LIST
9543: LIST
9544: LIST
9545: LIST
9546: LIST
9547: LIST
9548: PUSH
9549: LD_INT 101
9551: PUSH
9552: LD_INT 102
9554: PUSH
9555: LD_INT 103
9557: PUSH
9558: LD_INT 104
9560: PUSH
9561: LD_INT 105
9563: PUSH
9564: LD_INT 106
9566: PUSH
9567: LD_INT 107
9569: PUSH
9570: LD_INT 108
9572: PUSH
9573: LD_INT 109
9575: PUSH
9576: LD_INT 110
9578: PUSH
9579: LD_INT 111
9581: PUSH
9582: LD_INT 112
9584: PUSH
9585: LD_INT 113
9587: PUSH
9588: LD_INT 114
9590: PUSH
9591: LD_INT 116
9593: PUSH
9594: LD_INT 117
9596: PUSH
9597: LD_INT 118
9599: PUSH
9600: EMPTY
9601: LIST
9602: LIST
9603: LIST
9604: LIST
9605: LIST
9606: LIST
9607: LIST
9608: LIST
9609: LIST
9610: LIST
9611: LIST
9612: LIST
9613: LIST
9614: LIST
9615: LIST
9616: LIST
9617: LIST
9618: PUSH
9619: EMPTY
9620: LIST
9621: LIST
9622: ST_TO_ADDR
9623: GO 10630
9625: LD_INT 15
9627: DOUBLE
9628: EQUAL
9629: IFTRUE 9633
9631: GO 9857
9633: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
9634: LD_ADDR_VAR 0 2
9638: PUSH
9639: LD_INT 1
9641: PUSH
9642: LD_INT 2
9644: PUSH
9645: LD_INT 3
9647: PUSH
9648: LD_INT 4
9650: PUSH
9651: LD_INT 5
9653: PUSH
9654: LD_INT 6
9656: PUSH
9657: LD_INT 7
9659: PUSH
9660: LD_INT 8
9662: PUSH
9663: LD_INT 9
9665: PUSH
9666: LD_INT 10
9668: PUSH
9669: LD_INT 11
9671: PUSH
9672: LD_INT 12
9674: PUSH
9675: LD_INT 13
9677: PUSH
9678: LD_INT 14
9680: PUSH
9681: LD_INT 15
9683: PUSH
9684: LD_INT 16
9686: PUSH
9687: LD_INT 17
9689: PUSH
9690: LD_INT 18
9692: PUSH
9693: LD_INT 19
9695: PUSH
9696: LD_INT 20
9698: PUSH
9699: LD_INT 21
9701: PUSH
9702: LD_INT 22
9704: PUSH
9705: LD_INT 23
9707: PUSH
9708: LD_INT 24
9710: PUSH
9711: LD_INT 25
9713: PUSH
9714: LD_INT 26
9716: PUSH
9717: LD_INT 27
9719: PUSH
9720: LD_INT 28
9722: PUSH
9723: LD_INT 29
9725: PUSH
9726: LD_INT 30
9728: PUSH
9729: LD_INT 31
9731: PUSH
9732: LD_INT 32
9734: PUSH
9735: LD_INT 33
9737: PUSH
9738: LD_INT 34
9740: PUSH
9741: LD_INT 36
9743: PUSH
9744: EMPTY
9745: LIST
9746: LIST
9747: LIST
9748: LIST
9749: LIST
9750: LIST
9751: LIST
9752: LIST
9753: LIST
9754: LIST
9755: LIST
9756: LIST
9757: LIST
9758: LIST
9759: LIST
9760: LIST
9761: LIST
9762: LIST
9763: LIST
9764: LIST
9765: LIST
9766: LIST
9767: LIST
9768: LIST
9769: LIST
9770: LIST
9771: LIST
9772: LIST
9773: LIST
9774: LIST
9775: LIST
9776: LIST
9777: LIST
9778: LIST
9779: LIST
9780: PUSH
9781: LD_INT 101
9783: PUSH
9784: LD_INT 102
9786: PUSH
9787: LD_INT 103
9789: PUSH
9790: LD_INT 104
9792: PUSH
9793: LD_INT 105
9795: PUSH
9796: LD_INT 106
9798: PUSH
9799: LD_INT 107
9801: PUSH
9802: LD_INT 108
9804: PUSH
9805: LD_INT 109
9807: PUSH
9808: LD_INT 110
9810: PUSH
9811: LD_INT 111
9813: PUSH
9814: LD_INT 112
9816: PUSH
9817: LD_INT 113
9819: PUSH
9820: LD_INT 114
9822: PUSH
9823: LD_INT 116
9825: PUSH
9826: LD_INT 117
9828: PUSH
9829: LD_INT 118
9831: PUSH
9832: EMPTY
9833: LIST
9834: LIST
9835: LIST
9836: LIST
9837: LIST
9838: LIST
9839: LIST
9840: LIST
9841: LIST
9842: LIST
9843: LIST
9844: LIST
9845: LIST
9846: LIST
9847: LIST
9848: LIST
9849: LIST
9850: PUSH
9851: EMPTY
9852: LIST
9853: LIST
9854: ST_TO_ADDR
9855: GO 10630
9857: LD_INT 16
9859: DOUBLE
9860: EQUAL
9861: IFTRUE 9865
9863: GO 10001
9865: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
9866: LD_ADDR_VAR 0 2
9870: PUSH
9871: LD_INT 2
9873: PUSH
9874: LD_INT 4
9876: PUSH
9877: LD_INT 5
9879: PUSH
9880: LD_INT 7
9882: PUSH
9883: LD_INT 11
9885: PUSH
9886: LD_INT 12
9888: PUSH
9889: LD_INT 15
9891: PUSH
9892: LD_INT 16
9894: PUSH
9895: LD_INT 20
9897: PUSH
9898: LD_INT 21
9900: PUSH
9901: LD_INT 22
9903: PUSH
9904: LD_INT 23
9906: PUSH
9907: LD_INT 25
9909: PUSH
9910: LD_INT 26
9912: PUSH
9913: LD_INT 30
9915: PUSH
9916: LD_INT 31
9918: PUSH
9919: LD_INT 32
9921: PUSH
9922: LD_INT 33
9924: PUSH
9925: LD_INT 34
9927: PUSH
9928: EMPTY
9929: LIST
9930: LIST
9931: LIST
9932: LIST
9933: LIST
9934: LIST
9935: LIST
9936: LIST
9937: LIST
9938: LIST
9939: LIST
9940: LIST
9941: LIST
9942: LIST
9943: LIST
9944: LIST
9945: LIST
9946: LIST
9947: LIST
9948: PUSH
9949: LD_INT 101
9951: PUSH
9952: LD_INT 102
9954: PUSH
9955: LD_INT 103
9957: PUSH
9958: LD_INT 106
9960: PUSH
9961: LD_INT 108
9963: PUSH
9964: LD_INT 112
9966: PUSH
9967: LD_INT 113
9969: PUSH
9970: LD_INT 114
9972: PUSH
9973: LD_INT 116
9975: PUSH
9976: LD_INT 117
9978: PUSH
9979: LD_INT 118
9981: PUSH
9982: EMPTY
9983: LIST
9984: LIST
9985: LIST
9986: LIST
9987: LIST
9988: LIST
9989: LIST
9990: LIST
9991: LIST
9992: LIST
9993: LIST
9994: PUSH
9995: EMPTY
9996: LIST
9997: LIST
9998: ST_TO_ADDR
9999: GO 10630
10001: LD_INT 17
10003: DOUBLE
10004: EQUAL
10005: IFTRUE 10009
10007: GO 10233
10009: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
10010: LD_ADDR_VAR 0 2
10014: PUSH
10015: LD_INT 1
10017: PUSH
10018: LD_INT 2
10020: PUSH
10021: LD_INT 3
10023: PUSH
10024: LD_INT 4
10026: PUSH
10027: LD_INT 5
10029: PUSH
10030: LD_INT 6
10032: PUSH
10033: LD_INT 7
10035: PUSH
10036: LD_INT 8
10038: PUSH
10039: LD_INT 9
10041: PUSH
10042: LD_INT 10
10044: PUSH
10045: LD_INT 11
10047: PUSH
10048: LD_INT 12
10050: PUSH
10051: LD_INT 13
10053: PUSH
10054: LD_INT 14
10056: PUSH
10057: LD_INT 15
10059: PUSH
10060: LD_INT 16
10062: PUSH
10063: LD_INT 17
10065: PUSH
10066: LD_INT 18
10068: PUSH
10069: LD_INT 19
10071: PUSH
10072: LD_INT 20
10074: PUSH
10075: LD_INT 21
10077: PUSH
10078: LD_INT 22
10080: PUSH
10081: LD_INT 23
10083: PUSH
10084: LD_INT 24
10086: PUSH
10087: LD_INT 25
10089: PUSH
10090: LD_INT 26
10092: PUSH
10093: LD_INT 27
10095: PUSH
10096: LD_INT 28
10098: PUSH
10099: LD_INT 29
10101: PUSH
10102: LD_INT 30
10104: PUSH
10105: LD_INT 31
10107: PUSH
10108: LD_INT 32
10110: PUSH
10111: LD_INT 33
10113: PUSH
10114: LD_INT 34
10116: PUSH
10117: LD_INT 36
10119: PUSH
10120: EMPTY
10121: LIST
10122: LIST
10123: LIST
10124: LIST
10125: LIST
10126: LIST
10127: LIST
10128: LIST
10129: LIST
10130: LIST
10131: LIST
10132: LIST
10133: LIST
10134: LIST
10135: LIST
10136: LIST
10137: LIST
10138: LIST
10139: LIST
10140: LIST
10141: LIST
10142: LIST
10143: LIST
10144: LIST
10145: LIST
10146: LIST
10147: LIST
10148: LIST
10149: LIST
10150: LIST
10151: LIST
10152: LIST
10153: LIST
10154: LIST
10155: LIST
10156: PUSH
10157: LD_INT 101
10159: PUSH
10160: LD_INT 102
10162: PUSH
10163: LD_INT 103
10165: PUSH
10166: LD_INT 104
10168: PUSH
10169: LD_INT 105
10171: PUSH
10172: LD_INT 106
10174: PUSH
10175: LD_INT 107
10177: PUSH
10178: LD_INT 108
10180: PUSH
10181: LD_INT 109
10183: PUSH
10184: LD_INT 110
10186: PUSH
10187: LD_INT 111
10189: PUSH
10190: LD_INT 112
10192: PUSH
10193: LD_INT 113
10195: PUSH
10196: LD_INT 114
10198: PUSH
10199: LD_INT 116
10201: PUSH
10202: LD_INT 117
10204: PUSH
10205: LD_INT 118
10207: PUSH
10208: EMPTY
10209: LIST
10210: LIST
10211: LIST
10212: LIST
10213: LIST
10214: LIST
10215: LIST
10216: LIST
10217: LIST
10218: LIST
10219: LIST
10220: LIST
10221: LIST
10222: LIST
10223: LIST
10224: LIST
10225: LIST
10226: PUSH
10227: EMPTY
10228: LIST
10229: LIST
10230: ST_TO_ADDR
10231: GO 10630
10233: LD_INT 18
10235: DOUBLE
10236: EQUAL
10237: IFTRUE 10241
10239: GO 10389
10241: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
10242: LD_ADDR_VAR 0 2
10246: PUSH
10247: LD_INT 2
10249: PUSH
10250: LD_INT 4
10252: PUSH
10253: LD_INT 5
10255: PUSH
10256: LD_INT 7
10258: PUSH
10259: LD_INT 11
10261: PUSH
10262: LD_INT 12
10264: PUSH
10265: LD_INT 15
10267: PUSH
10268: LD_INT 16
10270: PUSH
10271: LD_INT 20
10273: PUSH
10274: LD_INT 21
10276: PUSH
10277: LD_INT 22
10279: PUSH
10280: LD_INT 23
10282: PUSH
10283: LD_INT 25
10285: PUSH
10286: LD_INT 26
10288: PUSH
10289: LD_INT 30
10291: PUSH
10292: LD_INT 31
10294: PUSH
10295: LD_INT 32
10297: PUSH
10298: LD_INT 33
10300: PUSH
10301: LD_INT 34
10303: PUSH
10304: LD_INT 35
10306: PUSH
10307: LD_INT 36
10309: PUSH
10310: EMPTY
10311: LIST
10312: LIST
10313: LIST
10314: LIST
10315: LIST
10316: LIST
10317: LIST
10318: LIST
10319: LIST
10320: LIST
10321: LIST
10322: LIST
10323: LIST
10324: LIST
10325: LIST
10326: LIST
10327: LIST
10328: LIST
10329: LIST
10330: LIST
10331: LIST
10332: PUSH
10333: LD_INT 101
10335: PUSH
10336: LD_INT 102
10338: PUSH
10339: LD_INT 103
10341: PUSH
10342: LD_INT 106
10344: PUSH
10345: LD_INT 108
10347: PUSH
10348: LD_INT 112
10350: PUSH
10351: LD_INT 113
10353: PUSH
10354: LD_INT 114
10356: PUSH
10357: LD_INT 115
10359: PUSH
10360: LD_INT 116
10362: PUSH
10363: LD_INT 117
10365: PUSH
10366: LD_INT 118
10368: PUSH
10369: EMPTY
10370: LIST
10371: LIST
10372: LIST
10373: LIST
10374: LIST
10375: LIST
10376: LIST
10377: LIST
10378: LIST
10379: LIST
10380: LIST
10381: LIST
10382: PUSH
10383: EMPTY
10384: LIST
10385: LIST
10386: ST_TO_ADDR
10387: GO 10630
10389: LD_INT 19
10391: DOUBLE
10392: EQUAL
10393: IFTRUE 10397
10395: GO 10629
10397: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
10398: LD_ADDR_VAR 0 2
10402: PUSH
10403: LD_INT 1
10405: PUSH
10406: LD_INT 2
10408: PUSH
10409: LD_INT 3
10411: PUSH
10412: LD_INT 4
10414: PUSH
10415: LD_INT 5
10417: PUSH
10418: LD_INT 6
10420: PUSH
10421: LD_INT 7
10423: PUSH
10424: LD_INT 8
10426: PUSH
10427: LD_INT 9
10429: PUSH
10430: LD_INT 10
10432: PUSH
10433: LD_INT 11
10435: PUSH
10436: LD_INT 12
10438: PUSH
10439: LD_INT 13
10441: PUSH
10442: LD_INT 14
10444: PUSH
10445: LD_INT 15
10447: PUSH
10448: LD_INT 16
10450: PUSH
10451: LD_INT 17
10453: PUSH
10454: LD_INT 18
10456: PUSH
10457: LD_INT 19
10459: PUSH
10460: LD_INT 20
10462: PUSH
10463: LD_INT 21
10465: PUSH
10466: LD_INT 22
10468: PUSH
10469: LD_INT 23
10471: PUSH
10472: LD_INT 24
10474: PUSH
10475: LD_INT 25
10477: PUSH
10478: LD_INT 26
10480: PUSH
10481: LD_INT 27
10483: PUSH
10484: LD_INT 28
10486: PUSH
10487: LD_INT 29
10489: PUSH
10490: LD_INT 30
10492: PUSH
10493: LD_INT 31
10495: PUSH
10496: LD_INT 32
10498: PUSH
10499: LD_INT 33
10501: PUSH
10502: LD_INT 34
10504: PUSH
10505: LD_INT 35
10507: PUSH
10508: LD_INT 36
10510: PUSH
10511: EMPTY
10512: LIST
10513: LIST
10514: LIST
10515: LIST
10516: LIST
10517: LIST
10518: LIST
10519: LIST
10520: LIST
10521: LIST
10522: LIST
10523: LIST
10524: LIST
10525: LIST
10526: LIST
10527: LIST
10528: LIST
10529: LIST
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: LIST
10535: LIST
10536: LIST
10537: LIST
10538: LIST
10539: LIST
10540: LIST
10541: LIST
10542: LIST
10543: LIST
10544: LIST
10545: LIST
10546: LIST
10547: LIST
10548: PUSH
10549: LD_INT 101
10551: PUSH
10552: LD_INT 102
10554: PUSH
10555: LD_INT 103
10557: PUSH
10558: LD_INT 104
10560: PUSH
10561: LD_INT 105
10563: PUSH
10564: LD_INT 106
10566: PUSH
10567: LD_INT 107
10569: PUSH
10570: LD_INT 108
10572: PUSH
10573: LD_INT 109
10575: PUSH
10576: LD_INT 110
10578: PUSH
10579: LD_INT 111
10581: PUSH
10582: LD_INT 112
10584: PUSH
10585: LD_INT 113
10587: PUSH
10588: LD_INT 114
10590: PUSH
10591: LD_INT 115
10593: PUSH
10594: LD_INT 116
10596: PUSH
10597: LD_INT 117
10599: PUSH
10600: LD_INT 118
10602: PUSH
10603: EMPTY
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: LIST
10609: LIST
10610: LIST
10611: LIST
10612: LIST
10613: LIST
10614: LIST
10615: LIST
10616: LIST
10617: LIST
10618: LIST
10619: LIST
10620: LIST
10621: LIST
10622: PUSH
10623: EMPTY
10624: LIST
10625: LIST
10626: ST_TO_ADDR
10627: GO 10630
10629: POP
// end else
10630: GO 10861
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
10632: LD_ADDR_VAR 0 2
10636: PUSH
10637: LD_INT 1
10639: PUSH
10640: LD_INT 2
10642: PUSH
10643: LD_INT 3
10645: PUSH
10646: LD_INT 4
10648: PUSH
10649: LD_INT 5
10651: PUSH
10652: LD_INT 6
10654: PUSH
10655: LD_INT 7
10657: PUSH
10658: LD_INT 8
10660: PUSH
10661: LD_INT 9
10663: PUSH
10664: LD_INT 10
10666: PUSH
10667: LD_INT 11
10669: PUSH
10670: LD_INT 12
10672: PUSH
10673: LD_INT 13
10675: PUSH
10676: LD_INT 14
10678: PUSH
10679: LD_INT 15
10681: PUSH
10682: LD_INT 16
10684: PUSH
10685: LD_INT 17
10687: PUSH
10688: LD_INT 18
10690: PUSH
10691: LD_INT 19
10693: PUSH
10694: LD_INT 20
10696: PUSH
10697: LD_INT 21
10699: PUSH
10700: LD_INT 22
10702: PUSH
10703: LD_INT 23
10705: PUSH
10706: LD_INT 24
10708: PUSH
10709: LD_INT 25
10711: PUSH
10712: LD_INT 26
10714: PUSH
10715: LD_INT 27
10717: PUSH
10718: LD_INT 28
10720: PUSH
10721: LD_INT 29
10723: PUSH
10724: LD_INT 30
10726: PUSH
10727: LD_INT 31
10729: PUSH
10730: LD_INT 32
10732: PUSH
10733: LD_INT 33
10735: PUSH
10736: LD_INT 34
10738: PUSH
10739: LD_INT 35
10741: PUSH
10742: LD_INT 36
10744: PUSH
10745: EMPTY
10746: LIST
10747: LIST
10748: LIST
10749: LIST
10750: LIST
10751: LIST
10752: LIST
10753: LIST
10754: LIST
10755: LIST
10756: LIST
10757: LIST
10758: LIST
10759: LIST
10760: LIST
10761: LIST
10762: LIST
10763: LIST
10764: LIST
10765: LIST
10766: LIST
10767: LIST
10768: LIST
10769: LIST
10770: LIST
10771: LIST
10772: LIST
10773: LIST
10774: LIST
10775: LIST
10776: LIST
10777: LIST
10778: LIST
10779: LIST
10780: LIST
10781: LIST
10782: PUSH
10783: LD_INT 101
10785: PUSH
10786: LD_INT 102
10788: PUSH
10789: LD_INT 103
10791: PUSH
10792: LD_INT 104
10794: PUSH
10795: LD_INT 105
10797: PUSH
10798: LD_INT 106
10800: PUSH
10801: LD_INT 107
10803: PUSH
10804: LD_INT 108
10806: PUSH
10807: LD_INT 109
10809: PUSH
10810: LD_INT 110
10812: PUSH
10813: LD_INT 111
10815: PUSH
10816: LD_INT 112
10818: PUSH
10819: LD_INT 113
10821: PUSH
10822: LD_INT 114
10824: PUSH
10825: LD_INT 115
10827: PUSH
10828: LD_INT 116
10830: PUSH
10831: LD_INT 117
10833: PUSH
10834: LD_INT 118
10836: PUSH
10837: EMPTY
10838: LIST
10839: LIST
10840: LIST
10841: LIST
10842: LIST
10843: LIST
10844: LIST
10845: LIST
10846: LIST
10847: LIST
10848: LIST
10849: LIST
10850: LIST
10851: LIST
10852: LIST
10853: LIST
10854: LIST
10855: LIST
10856: PUSH
10857: EMPTY
10858: LIST
10859: LIST
10860: ST_TO_ADDR
// if result then
10861: LD_VAR 0 2
10865: IFFALSE 11651
// begin normal :=  ;
10867: LD_ADDR_VAR 0 5
10871: PUSH
10872: LD_STRING 
10874: ST_TO_ADDR
// hardcore :=  ;
10875: LD_ADDR_VAR 0 6
10879: PUSH
10880: LD_STRING 
10882: ST_TO_ADDR
// active :=  ;
10883: LD_ADDR_VAR 0 7
10887: PUSH
10888: LD_STRING 
10890: ST_TO_ADDR
// for i = 1 to normalCounter do
10891: LD_ADDR_VAR 0 8
10895: PUSH
10896: DOUBLE
10897: LD_INT 1
10899: DEC
10900: ST_TO_ADDR
10901: LD_EXP 25
10905: PUSH
10906: FOR_TO
10907: IFFALSE 11008
// begin tmp := 0 ;
10909: LD_ADDR_VAR 0 3
10913: PUSH
10914: LD_STRING 0
10916: ST_TO_ADDR
// if result [ 1 ] then
10917: LD_VAR 0 2
10921: PUSH
10922: LD_INT 1
10924: ARRAY
10925: IFFALSE 10990
// if result [ 1 ] [ 1 ] = i then
10927: LD_VAR 0 2
10931: PUSH
10932: LD_INT 1
10934: ARRAY
10935: PUSH
10936: LD_INT 1
10938: ARRAY
10939: PUSH
10940: LD_VAR 0 8
10944: EQUAL
10945: IFFALSE 10990
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
10947: LD_ADDR_VAR 0 2
10951: PUSH
10952: LD_VAR 0 2
10956: PPUSH
10957: LD_INT 1
10959: PPUSH
10960: LD_VAR 0 2
10964: PUSH
10965: LD_INT 1
10967: ARRAY
10968: PPUSH
10969: LD_INT 1
10971: PPUSH
10972: CALL_OW 3
10976: PPUSH
10977: CALL_OW 1
10981: ST_TO_ADDR
// tmp := 1 ;
10982: LD_ADDR_VAR 0 3
10986: PUSH
10987: LD_STRING 1
10989: ST_TO_ADDR
// end ; normal := normal & tmp ;
10990: LD_ADDR_VAR 0 5
10994: PUSH
10995: LD_VAR 0 5
10999: PUSH
11000: LD_VAR 0 3
11004: STR
11005: ST_TO_ADDR
// end ;
11006: GO 10906
11008: POP
11009: POP
// for i = 1 to hardcoreCounter do
11010: LD_ADDR_VAR 0 8
11014: PUSH
11015: DOUBLE
11016: LD_INT 1
11018: DEC
11019: ST_TO_ADDR
11020: LD_EXP 26
11024: PUSH
11025: FOR_TO
11026: IFFALSE 11131
// begin tmp := 0 ;
11028: LD_ADDR_VAR 0 3
11032: PUSH
11033: LD_STRING 0
11035: ST_TO_ADDR
// if result [ 2 ] then
11036: LD_VAR 0 2
11040: PUSH
11041: LD_INT 2
11043: ARRAY
11044: IFFALSE 11113
// if result [ 2 ] [ 1 ] = 100 + i then
11046: LD_VAR 0 2
11050: PUSH
11051: LD_INT 2
11053: ARRAY
11054: PUSH
11055: LD_INT 1
11057: ARRAY
11058: PUSH
11059: LD_INT 100
11061: PUSH
11062: LD_VAR 0 8
11066: PLUS
11067: EQUAL
11068: IFFALSE 11113
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
11070: LD_ADDR_VAR 0 2
11074: PUSH
11075: LD_VAR 0 2
11079: PPUSH
11080: LD_INT 2
11082: PPUSH
11083: LD_VAR 0 2
11087: PUSH
11088: LD_INT 2
11090: ARRAY
11091: PPUSH
11092: LD_INT 1
11094: PPUSH
11095: CALL_OW 3
11099: PPUSH
11100: CALL_OW 1
11104: ST_TO_ADDR
// tmp := 1 ;
11105: LD_ADDR_VAR 0 3
11109: PUSH
11110: LD_STRING 1
11112: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
11113: LD_ADDR_VAR 0 6
11117: PUSH
11118: LD_VAR 0 6
11122: PUSH
11123: LD_VAR 0 3
11127: STR
11128: ST_TO_ADDR
// end ;
11129: GO 11025
11131: POP
11132: POP
// if isGameLoad then
11133: LD_VAR 0 1
11137: IFFALSE 11612
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
11139: LD_ADDR_VAR 0 4
11143: PUSH
11144: LD_EXP 29
11148: PUSH
11149: LD_EXP 28
11153: PUSH
11154: LD_EXP 30
11158: PUSH
11159: LD_EXP 27
11163: PUSH
11164: LD_EXP 31
11168: PUSH
11169: LD_EXP 32
11173: PUSH
11174: LD_EXP 33
11178: PUSH
11179: LD_EXP 34
11183: PUSH
11184: LD_EXP 35
11188: PUSH
11189: LD_EXP 36
11193: PUSH
11194: LD_EXP 37
11198: PUSH
11199: LD_EXP 38
11203: PUSH
11204: LD_EXP 39
11208: PUSH
11209: LD_EXP 40
11213: PUSH
11214: LD_EXP 48
11218: PUSH
11219: LD_EXP 49
11223: PUSH
11224: LD_EXP 50
11228: PUSH
11229: LD_EXP 51
11233: PUSH
11234: LD_EXP 53
11238: PUSH
11239: LD_EXP 54
11243: PUSH
11244: LD_EXP 55
11248: PUSH
11249: LD_EXP 58
11253: PUSH
11254: LD_EXP 60
11258: PUSH
11259: LD_EXP 61
11263: PUSH
11264: LD_EXP 62
11268: PUSH
11269: LD_EXP 64
11273: PUSH
11274: LD_EXP 65
11278: PUSH
11279: LD_EXP 68
11283: PUSH
11284: LD_EXP 69
11288: PUSH
11289: LD_EXP 70
11293: PUSH
11294: LD_EXP 71
11298: PUSH
11299: LD_EXP 72
11303: PUSH
11304: LD_EXP 73
11308: PUSH
11309: LD_EXP 74
11313: PUSH
11314: LD_EXP 75
11318: PUSH
11319: LD_EXP 76
11323: PUSH
11324: LD_EXP 41
11328: PUSH
11329: LD_EXP 42
11333: PUSH
11334: LD_EXP 45
11338: PUSH
11339: LD_EXP 46
11343: PUSH
11344: LD_EXP 47
11348: PUSH
11349: LD_EXP 43
11353: PUSH
11354: LD_EXP 44
11358: PUSH
11359: LD_EXP 52
11363: PUSH
11364: LD_EXP 56
11368: PUSH
11369: LD_EXP 57
11373: PUSH
11374: LD_EXP 59
11378: PUSH
11379: LD_EXP 63
11383: PUSH
11384: LD_EXP 66
11388: PUSH
11389: LD_EXP 67
11393: PUSH
11394: LD_EXP 77
11398: PUSH
11399: LD_EXP 78
11403: PUSH
11404: LD_EXP 79
11408: PUSH
11409: LD_EXP 80
11413: PUSH
11414: EMPTY
11415: LIST
11416: LIST
11417: LIST
11418: LIST
11419: LIST
11420: LIST
11421: LIST
11422: LIST
11423: LIST
11424: LIST
11425: LIST
11426: LIST
11427: LIST
11428: LIST
11429: LIST
11430: LIST
11431: LIST
11432: LIST
11433: LIST
11434: LIST
11435: LIST
11436: LIST
11437: LIST
11438: LIST
11439: LIST
11440: LIST
11441: LIST
11442: LIST
11443: LIST
11444: LIST
11445: LIST
11446: LIST
11447: LIST
11448: LIST
11449: LIST
11450: LIST
11451: LIST
11452: LIST
11453: LIST
11454: LIST
11455: LIST
11456: LIST
11457: LIST
11458: LIST
11459: LIST
11460: LIST
11461: LIST
11462: LIST
11463: LIST
11464: LIST
11465: LIST
11466: LIST
11467: LIST
11468: LIST
11469: ST_TO_ADDR
// tmp :=  ;
11470: LD_ADDR_VAR 0 3
11474: PUSH
11475: LD_STRING 
11477: ST_TO_ADDR
// for i = 1 to normalCounter do
11478: LD_ADDR_VAR 0 8
11482: PUSH
11483: DOUBLE
11484: LD_INT 1
11486: DEC
11487: ST_TO_ADDR
11488: LD_EXP 25
11492: PUSH
11493: FOR_TO
11494: IFFALSE 11530
// begin if flags [ i ] then
11496: LD_VAR 0 4
11500: PUSH
11501: LD_VAR 0 8
11505: ARRAY
11506: IFFALSE 11528
// tmp := tmp & i & ; ;
11508: LD_ADDR_VAR 0 3
11512: PUSH
11513: LD_VAR 0 3
11517: PUSH
11518: LD_VAR 0 8
11522: STR
11523: PUSH
11524: LD_STRING ;
11526: STR
11527: ST_TO_ADDR
// end ;
11528: GO 11493
11530: POP
11531: POP
// for i = 1 to hardcoreCounter do
11532: LD_ADDR_VAR 0 8
11536: PUSH
11537: DOUBLE
11538: LD_INT 1
11540: DEC
11541: ST_TO_ADDR
11542: LD_EXP 26
11546: PUSH
11547: FOR_TO
11548: IFFALSE 11594
// begin if flags [ normalCounter + i ] then
11550: LD_VAR 0 4
11554: PUSH
11555: LD_EXP 25
11559: PUSH
11560: LD_VAR 0 8
11564: PLUS
11565: ARRAY
11566: IFFALSE 11592
// tmp := tmp & ( 100 + i ) & ; ;
11568: LD_ADDR_VAR 0 3
11572: PUSH
11573: LD_VAR 0 3
11577: PUSH
11578: LD_INT 100
11580: PUSH
11581: LD_VAR 0 8
11585: PLUS
11586: STR
11587: PUSH
11588: LD_STRING ;
11590: STR
11591: ST_TO_ADDR
// end ;
11592: GO 11547
11594: POP
11595: POP
// if tmp then
11596: LD_VAR 0 3
11600: IFFALSE 11612
// active := tmp ;
11602: LD_ADDR_VAR 0 7
11606: PUSH
11607: LD_VAR 0 3
11611: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
11612: LD_STRING getStreamItemsFromMission("
11614: PUSH
11615: LD_VAR 0 5
11619: STR
11620: PUSH
11621: LD_STRING ","
11623: STR
11624: PUSH
11625: LD_VAR 0 6
11629: STR
11630: PUSH
11631: LD_STRING ","
11633: STR
11634: PUSH
11635: LD_VAR 0 7
11639: STR
11640: PUSH
11641: LD_STRING ")
11643: STR
11644: PPUSH
11645: CALL_OW 559
// end else
11649: GO 11658
// ToLua ( getStreamItemsFromMission("","","") ) ;
11651: LD_STRING getStreamItemsFromMission("","","")
11653: PPUSH
11654: CALL_OW 559
// end ;
11658: LD_VAR 0 2
11662: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
11663: LD_EXP 24
11667: PUSH
11668: LD_EXP 29
11672: AND
11673: IFFALSE 11797
11675: GO 11677
11677: DISABLE
11678: LD_INT 0
11680: PPUSH
11681: PPUSH
// begin enable ;
11682: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
11683: LD_ADDR_VAR 0 2
11687: PUSH
11688: LD_INT 22
11690: PUSH
11691: LD_OWVAR 2
11695: PUSH
11696: EMPTY
11697: LIST
11698: LIST
11699: PUSH
11700: LD_INT 2
11702: PUSH
11703: LD_INT 34
11705: PUSH
11706: LD_INT 7
11708: PUSH
11709: EMPTY
11710: LIST
11711: LIST
11712: PUSH
11713: LD_INT 34
11715: PUSH
11716: LD_INT 45
11718: PUSH
11719: EMPTY
11720: LIST
11721: LIST
11722: PUSH
11723: LD_INT 34
11725: PUSH
11726: LD_INT 28
11728: PUSH
11729: EMPTY
11730: LIST
11731: LIST
11732: PUSH
11733: LD_INT 34
11735: PUSH
11736: LD_INT 47
11738: PUSH
11739: EMPTY
11740: LIST
11741: LIST
11742: PUSH
11743: EMPTY
11744: LIST
11745: LIST
11746: LIST
11747: LIST
11748: LIST
11749: PUSH
11750: EMPTY
11751: LIST
11752: LIST
11753: PPUSH
11754: CALL_OW 69
11758: ST_TO_ADDR
// if not tmp then
11759: LD_VAR 0 2
11763: NOT
11764: IFFALSE 11768
// exit ;
11766: GO 11797
// for i in tmp do
11768: LD_ADDR_VAR 0 1
11772: PUSH
11773: LD_VAR 0 2
11777: PUSH
11778: FOR_IN
11779: IFFALSE 11795
// begin SetLives ( i , 0 ) ;
11781: LD_VAR 0 1
11785: PPUSH
11786: LD_INT 0
11788: PPUSH
11789: CALL_OW 234
// end ;
11793: GO 11778
11795: POP
11796: POP
// end ;
11797: PPOPN 2
11799: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
11800: LD_EXP 24
11804: PUSH
11805: LD_EXP 30
11809: AND
11810: IFFALSE 11894
11812: GO 11814
11814: DISABLE
11815: LD_INT 0
11817: PPUSH
11818: PPUSH
// begin enable ;
11819: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
11820: LD_ADDR_VAR 0 2
11824: PUSH
11825: LD_INT 22
11827: PUSH
11828: LD_OWVAR 2
11832: PUSH
11833: EMPTY
11834: LIST
11835: LIST
11836: PUSH
11837: LD_INT 32
11839: PUSH
11840: LD_INT 3
11842: PUSH
11843: EMPTY
11844: LIST
11845: LIST
11846: PUSH
11847: EMPTY
11848: LIST
11849: LIST
11850: PPUSH
11851: CALL_OW 69
11855: ST_TO_ADDR
// if not tmp then
11856: LD_VAR 0 2
11860: NOT
11861: IFFALSE 11865
// exit ;
11863: GO 11894
// for i in tmp do
11865: LD_ADDR_VAR 0 1
11869: PUSH
11870: LD_VAR 0 2
11874: PUSH
11875: FOR_IN
11876: IFFALSE 11892
// begin SetLives ( i , 0 ) ;
11878: LD_VAR 0 1
11882: PPUSH
11883: LD_INT 0
11885: PPUSH
11886: CALL_OW 234
// end ;
11890: GO 11875
11892: POP
11893: POP
// end ;
11894: PPOPN 2
11896: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
11897: LD_EXP 24
11901: PUSH
11902: LD_EXP 27
11906: AND
11907: IFFALSE 12000
11909: GO 11911
11911: DISABLE
11912: LD_INT 0
11914: PPUSH
// begin enable ;
11915: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
11916: LD_ADDR_VAR 0 1
11920: PUSH
11921: LD_INT 22
11923: PUSH
11924: LD_OWVAR 2
11928: PUSH
11929: EMPTY
11930: LIST
11931: LIST
11932: PUSH
11933: LD_INT 2
11935: PUSH
11936: LD_INT 25
11938: PUSH
11939: LD_INT 5
11941: PUSH
11942: EMPTY
11943: LIST
11944: LIST
11945: PUSH
11946: LD_INT 25
11948: PUSH
11949: LD_INT 9
11951: PUSH
11952: EMPTY
11953: LIST
11954: LIST
11955: PUSH
11956: LD_INT 25
11958: PUSH
11959: LD_INT 8
11961: PUSH
11962: EMPTY
11963: LIST
11964: LIST
11965: PUSH
11966: EMPTY
11967: LIST
11968: LIST
11969: LIST
11970: LIST
11971: PUSH
11972: EMPTY
11973: LIST
11974: LIST
11975: PPUSH
11976: CALL_OW 69
11980: PUSH
11981: FOR_IN
11982: IFFALSE 11998
// begin SetClass ( i , 1 ) ;
11984: LD_VAR 0 1
11988: PPUSH
11989: LD_INT 1
11991: PPUSH
11992: CALL_OW 336
// end ;
11996: GO 11981
11998: POP
11999: POP
// end ;
12000: PPOPN 1
12002: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
12003: LD_EXP 24
12007: PUSH
12008: LD_EXP 28
12012: AND
12013: PUSH
12014: LD_OWVAR 65
12018: PUSH
12019: LD_INT 7
12021: LESS
12022: AND
12023: IFFALSE 12037
12025: GO 12027
12027: DISABLE
// begin enable ;
12028: ENABLE
// game_speed := 7 ;
12029: LD_ADDR_OWVAR 65
12033: PUSH
12034: LD_INT 7
12036: ST_TO_ADDR
// end ;
12037: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
12038: LD_EXP 24
12042: PUSH
12043: LD_EXP 31
12047: AND
12048: IFFALSE 12250
12050: GO 12052
12052: DISABLE
12053: LD_INT 0
12055: PPUSH
12056: PPUSH
12057: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
12058: LD_ADDR_VAR 0 3
12062: PUSH
12063: LD_INT 81
12065: PUSH
12066: LD_OWVAR 2
12070: PUSH
12071: EMPTY
12072: LIST
12073: LIST
12074: PUSH
12075: LD_INT 21
12077: PUSH
12078: LD_INT 1
12080: PUSH
12081: EMPTY
12082: LIST
12083: LIST
12084: PUSH
12085: EMPTY
12086: LIST
12087: LIST
12088: PPUSH
12089: CALL_OW 69
12093: ST_TO_ADDR
// if not tmp then
12094: LD_VAR 0 3
12098: NOT
12099: IFFALSE 12103
// exit ;
12101: GO 12250
// if tmp > 5 then
12103: LD_VAR 0 3
12107: PUSH
12108: LD_INT 5
12110: GREATER
12111: IFFALSE 12123
// k := 5 else
12113: LD_ADDR_VAR 0 2
12117: PUSH
12118: LD_INT 5
12120: ST_TO_ADDR
12121: GO 12133
// k := tmp ;
12123: LD_ADDR_VAR 0 2
12127: PUSH
12128: LD_VAR 0 3
12132: ST_TO_ADDR
// for i := 1 to k do
12133: LD_ADDR_VAR 0 1
12137: PUSH
12138: DOUBLE
12139: LD_INT 1
12141: DEC
12142: ST_TO_ADDR
12143: LD_VAR 0 2
12147: PUSH
12148: FOR_TO
12149: IFFALSE 12248
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
12151: LD_VAR 0 3
12155: PUSH
12156: LD_VAR 0 1
12160: ARRAY
12161: PPUSH
12162: LD_VAR 0 1
12166: PUSH
12167: LD_INT 4
12169: MOD
12170: PUSH
12171: LD_INT 1
12173: PLUS
12174: PPUSH
12175: CALL_OW 259
12179: PUSH
12180: LD_INT 10
12182: LESS
12183: IFFALSE 12246
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
12185: LD_VAR 0 3
12189: PUSH
12190: LD_VAR 0 1
12194: ARRAY
12195: PPUSH
12196: LD_VAR 0 1
12200: PUSH
12201: LD_INT 4
12203: MOD
12204: PUSH
12205: LD_INT 1
12207: PLUS
12208: PPUSH
12209: LD_VAR 0 3
12213: PUSH
12214: LD_VAR 0 1
12218: ARRAY
12219: PPUSH
12220: LD_VAR 0 1
12224: PUSH
12225: LD_INT 4
12227: MOD
12228: PUSH
12229: LD_INT 1
12231: PLUS
12232: PPUSH
12233: CALL_OW 259
12237: PUSH
12238: LD_INT 1
12240: PLUS
12241: PPUSH
12242: CALL_OW 237
12246: GO 12148
12248: POP
12249: POP
// end ;
12250: PPOPN 3
12252: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
12253: LD_EXP 24
12257: PUSH
12258: LD_EXP 32
12262: AND
12263: IFFALSE 12283
12265: GO 12267
12267: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
12268: LD_INT 4
12270: PPUSH
12271: LD_OWVAR 2
12275: PPUSH
12276: LD_INT 0
12278: PPUSH
12279: CALL_OW 324
12283: END
// every 0 0$1 trigger StreamModeActive and sShovel do
12284: LD_EXP 24
12288: PUSH
12289: LD_EXP 61
12293: AND
12294: IFFALSE 12314
12296: GO 12298
12298: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
12299: LD_INT 19
12301: PPUSH
12302: LD_OWVAR 2
12306: PPUSH
12307: LD_INT 0
12309: PPUSH
12310: CALL_OW 324
12314: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
12315: LD_EXP 24
12319: PUSH
12320: LD_EXP 33
12324: AND
12325: IFFALSE 12427
12327: GO 12329
12329: DISABLE
12330: LD_INT 0
12332: PPUSH
12333: PPUSH
// begin enable ;
12334: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
12335: LD_ADDR_VAR 0 2
12339: PUSH
12340: LD_INT 22
12342: PUSH
12343: LD_OWVAR 2
12347: PUSH
12348: EMPTY
12349: LIST
12350: LIST
12351: PUSH
12352: LD_INT 2
12354: PUSH
12355: LD_INT 34
12357: PUSH
12358: LD_INT 11
12360: PUSH
12361: EMPTY
12362: LIST
12363: LIST
12364: PUSH
12365: LD_INT 34
12367: PUSH
12368: LD_INT 30
12370: PUSH
12371: EMPTY
12372: LIST
12373: LIST
12374: PUSH
12375: EMPTY
12376: LIST
12377: LIST
12378: LIST
12379: PUSH
12380: EMPTY
12381: LIST
12382: LIST
12383: PPUSH
12384: CALL_OW 69
12388: ST_TO_ADDR
// if not tmp then
12389: LD_VAR 0 2
12393: NOT
12394: IFFALSE 12398
// exit ;
12396: GO 12427
// for i in tmp do
12398: LD_ADDR_VAR 0 1
12402: PUSH
12403: LD_VAR 0 2
12407: PUSH
12408: FOR_IN
12409: IFFALSE 12425
// begin SetLives ( i , 0 ) ;
12411: LD_VAR 0 1
12415: PPUSH
12416: LD_INT 0
12418: PPUSH
12419: CALL_OW 234
// end ;
12423: GO 12408
12425: POP
12426: POP
// end ;
12427: PPOPN 2
12429: END
// every 0 0$1 trigger StreamModeActive and sBunker do
12430: LD_EXP 24
12434: PUSH
12435: LD_EXP 34
12439: AND
12440: IFFALSE 12460
12442: GO 12444
12444: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
12445: LD_INT 32
12447: PPUSH
12448: LD_OWVAR 2
12452: PPUSH
12453: LD_INT 0
12455: PPUSH
12456: CALL_OW 324
12460: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
12461: LD_EXP 24
12465: PUSH
12466: LD_EXP 35
12470: AND
12471: IFFALSE 12652
12473: GO 12475
12475: DISABLE
12476: LD_INT 0
12478: PPUSH
12479: PPUSH
12480: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
12481: LD_ADDR_VAR 0 2
12485: PUSH
12486: LD_INT 22
12488: PUSH
12489: LD_OWVAR 2
12493: PUSH
12494: EMPTY
12495: LIST
12496: LIST
12497: PUSH
12498: LD_INT 33
12500: PUSH
12501: LD_INT 3
12503: PUSH
12504: EMPTY
12505: LIST
12506: LIST
12507: PUSH
12508: EMPTY
12509: LIST
12510: LIST
12511: PPUSH
12512: CALL_OW 69
12516: ST_TO_ADDR
// if not tmp then
12517: LD_VAR 0 2
12521: NOT
12522: IFFALSE 12526
// exit ;
12524: GO 12652
// side := 0 ;
12526: LD_ADDR_VAR 0 3
12530: PUSH
12531: LD_INT 0
12533: ST_TO_ADDR
// for i := 1 to 8 do
12534: LD_ADDR_VAR 0 1
12538: PUSH
12539: DOUBLE
12540: LD_INT 1
12542: DEC
12543: ST_TO_ADDR
12544: LD_INT 8
12546: PUSH
12547: FOR_TO
12548: IFFALSE 12596
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
12550: LD_OWVAR 2
12554: PUSH
12555: LD_VAR 0 1
12559: NONEQUAL
12560: PUSH
12561: LD_OWVAR 2
12565: PPUSH
12566: LD_VAR 0 1
12570: PPUSH
12571: CALL_OW 81
12575: PUSH
12576: LD_INT 2
12578: EQUAL
12579: AND
12580: IFFALSE 12594
// begin side := i ;
12582: LD_ADDR_VAR 0 3
12586: PUSH
12587: LD_VAR 0 1
12591: ST_TO_ADDR
// break ;
12592: GO 12596
// end ;
12594: GO 12547
12596: POP
12597: POP
// if not side then
12598: LD_VAR 0 3
12602: NOT
12603: IFFALSE 12607
// exit ;
12605: GO 12652
// for i := 1 to tmp do
12607: LD_ADDR_VAR 0 1
12611: PUSH
12612: DOUBLE
12613: LD_INT 1
12615: DEC
12616: ST_TO_ADDR
12617: LD_VAR 0 2
12621: PUSH
12622: FOR_TO
12623: IFFALSE 12650
// if Prob ( 60 ) then
12625: LD_INT 60
12627: PPUSH
12628: CALL_OW 13
12632: IFFALSE 12648
// SetSide ( i , side ) ;
12634: LD_VAR 0 1
12638: PPUSH
12639: LD_VAR 0 3
12643: PPUSH
12644: CALL_OW 235
12648: GO 12622
12650: POP
12651: POP
// end ;
12652: PPOPN 3
12654: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
12655: LD_EXP 24
12659: PUSH
12660: LD_EXP 37
12664: AND
12665: IFFALSE 12784
12667: GO 12669
12669: DISABLE
12670: LD_INT 0
12672: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
12673: LD_ADDR_VAR 0 1
12677: PUSH
12678: LD_INT 22
12680: PUSH
12681: LD_OWVAR 2
12685: PUSH
12686: EMPTY
12687: LIST
12688: LIST
12689: PUSH
12690: LD_INT 21
12692: PUSH
12693: LD_INT 1
12695: PUSH
12696: EMPTY
12697: LIST
12698: LIST
12699: PUSH
12700: LD_INT 3
12702: PUSH
12703: LD_INT 23
12705: PUSH
12706: LD_INT 0
12708: PUSH
12709: EMPTY
12710: LIST
12711: LIST
12712: PUSH
12713: EMPTY
12714: LIST
12715: LIST
12716: PUSH
12717: EMPTY
12718: LIST
12719: LIST
12720: LIST
12721: PPUSH
12722: CALL_OW 69
12726: PUSH
12727: FOR_IN
12728: IFFALSE 12782
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
12730: LD_VAR 0 1
12734: PPUSH
12735: CALL_OW 257
12739: PUSH
12740: LD_INT 1
12742: PUSH
12743: LD_INT 2
12745: PUSH
12746: LD_INT 3
12748: PUSH
12749: LD_INT 4
12751: PUSH
12752: EMPTY
12753: LIST
12754: LIST
12755: LIST
12756: LIST
12757: IN
12758: IFFALSE 12780
// SetClass ( un , rand ( 1 , 4 ) ) ;
12760: LD_VAR 0 1
12764: PPUSH
12765: LD_INT 1
12767: PPUSH
12768: LD_INT 4
12770: PPUSH
12771: CALL_OW 12
12775: PPUSH
12776: CALL_OW 336
12780: GO 12727
12782: POP
12783: POP
// end ;
12784: PPOPN 1
12786: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
12787: LD_EXP 24
12791: PUSH
12792: LD_EXP 36
12796: AND
12797: IFFALSE 12876
12799: GO 12801
12801: DISABLE
12802: LD_INT 0
12804: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12805: LD_ADDR_VAR 0 1
12809: PUSH
12810: LD_INT 22
12812: PUSH
12813: LD_OWVAR 2
12817: PUSH
12818: EMPTY
12819: LIST
12820: LIST
12821: PUSH
12822: LD_INT 21
12824: PUSH
12825: LD_INT 3
12827: PUSH
12828: EMPTY
12829: LIST
12830: LIST
12831: PUSH
12832: EMPTY
12833: LIST
12834: LIST
12835: PPUSH
12836: CALL_OW 69
12840: ST_TO_ADDR
// if not tmp then
12841: LD_VAR 0 1
12845: NOT
12846: IFFALSE 12850
// exit ;
12848: GO 12876
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
12850: LD_VAR 0 1
12854: PUSH
12855: LD_INT 1
12857: PPUSH
12858: LD_VAR 0 1
12862: PPUSH
12863: CALL_OW 12
12867: ARRAY
12868: PPUSH
12869: LD_INT 100
12871: PPUSH
12872: CALL_OW 234
// end ;
12876: PPOPN 1
12878: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
12879: LD_EXP 24
12883: PUSH
12884: LD_EXP 38
12888: AND
12889: IFFALSE 12987
12891: GO 12893
12893: DISABLE
12894: LD_INT 0
12896: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12897: LD_ADDR_VAR 0 1
12901: PUSH
12902: LD_INT 22
12904: PUSH
12905: LD_OWVAR 2
12909: PUSH
12910: EMPTY
12911: LIST
12912: LIST
12913: PUSH
12914: LD_INT 21
12916: PUSH
12917: LD_INT 1
12919: PUSH
12920: EMPTY
12921: LIST
12922: LIST
12923: PUSH
12924: EMPTY
12925: LIST
12926: LIST
12927: PPUSH
12928: CALL_OW 69
12932: ST_TO_ADDR
// if not tmp then
12933: LD_VAR 0 1
12937: NOT
12938: IFFALSE 12942
// exit ;
12940: GO 12987
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
12942: LD_VAR 0 1
12946: PUSH
12947: LD_INT 1
12949: PPUSH
12950: LD_VAR 0 1
12954: PPUSH
12955: CALL_OW 12
12959: ARRAY
12960: PPUSH
12961: LD_INT 1
12963: PPUSH
12964: LD_INT 4
12966: PPUSH
12967: CALL_OW 12
12971: PPUSH
12972: LD_INT 3000
12974: PPUSH
12975: LD_INT 9000
12977: PPUSH
12978: CALL_OW 12
12982: PPUSH
12983: CALL_OW 492
// end ;
12987: PPOPN 1
12989: END
// every 0 0$1 trigger StreamModeActive and sDepot do
12990: LD_EXP 24
12994: PUSH
12995: LD_EXP 39
12999: AND
13000: IFFALSE 13020
13002: GO 13004
13004: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
13005: LD_INT 1
13007: PPUSH
13008: LD_OWVAR 2
13012: PPUSH
13013: LD_INT 0
13015: PPUSH
13016: CALL_OW 324
13020: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
13021: LD_EXP 24
13025: PUSH
13026: LD_EXP 40
13030: AND
13031: IFFALSE 13114
13033: GO 13035
13035: DISABLE
13036: LD_INT 0
13038: PPUSH
13039: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13040: LD_ADDR_VAR 0 2
13044: PUSH
13045: LD_INT 22
13047: PUSH
13048: LD_OWVAR 2
13052: PUSH
13053: EMPTY
13054: LIST
13055: LIST
13056: PUSH
13057: LD_INT 21
13059: PUSH
13060: LD_INT 3
13062: PUSH
13063: EMPTY
13064: LIST
13065: LIST
13066: PUSH
13067: EMPTY
13068: LIST
13069: LIST
13070: PPUSH
13071: CALL_OW 69
13075: ST_TO_ADDR
// if not tmp then
13076: LD_VAR 0 2
13080: NOT
13081: IFFALSE 13085
// exit ;
13083: GO 13114
// for i in tmp do
13085: LD_ADDR_VAR 0 1
13089: PUSH
13090: LD_VAR 0 2
13094: PUSH
13095: FOR_IN
13096: IFFALSE 13112
// SetBLevel ( i , 10 ) ;
13098: LD_VAR 0 1
13102: PPUSH
13103: LD_INT 10
13105: PPUSH
13106: CALL_OW 241
13110: GO 13095
13112: POP
13113: POP
// end ;
13114: PPOPN 2
13116: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
13117: LD_EXP 24
13121: PUSH
13122: LD_EXP 41
13126: AND
13127: IFFALSE 13238
13129: GO 13131
13131: DISABLE
13132: LD_INT 0
13134: PPUSH
13135: PPUSH
13136: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13137: LD_ADDR_VAR 0 3
13141: PUSH
13142: LD_INT 22
13144: PUSH
13145: LD_OWVAR 2
13149: PUSH
13150: EMPTY
13151: LIST
13152: LIST
13153: PUSH
13154: LD_INT 25
13156: PUSH
13157: LD_INT 1
13159: PUSH
13160: EMPTY
13161: LIST
13162: LIST
13163: PUSH
13164: EMPTY
13165: LIST
13166: LIST
13167: PPUSH
13168: CALL_OW 69
13172: ST_TO_ADDR
// if not tmp then
13173: LD_VAR 0 3
13177: NOT
13178: IFFALSE 13182
// exit ;
13180: GO 13238
// un := tmp [ rand ( 1 , tmp ) ] ;
13182: LD_ADDR_VAR 0 2
13186: PUSH
13187: LD_VAR 0 3
13191: PUSH
13192: LD_INT 1
13194: PPUSH
13195: LD_VAR 0 3
13199: PPUSH
13200: CALL_OW 12
13204: ARRAY
13205: ST_TO_ADDR
// if Crawls ( un ) then
13206: LD_VAR 0 2
13210: PPUSH
13211: CALL_OW 318
13215: IFFALSE 13226
// ComWalk ( un ) ;
13217: LD_VAR 0 2
13221: PPUSH
13222: CALL_OW 138
// SetClass ( un , class_sniper ) ;
13226: LD_VAR 0 2
13230: PPUSH
13231: LD_INT 5
13233: PPUSH
13234: CALL_OW 336
// end ;
13238: PPOPN 3
13240: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
13241: LD_EXP 24
13245: PUSH
13246: LD_EXP 42
13250: AND
13251: PUSH
13252: LD_OWVAR 67
13256: PUSH
13257: LD_INT 4
13259: LESS
13260: AND
13261: IFFALSE 13280
13263: GO 13265
13265: DISABLE
// begin Difficulty := Difficulty + 1 ;
13266: LD_ADDR_OWVAR 67
13270: PUSH
13271: LD_OWVAR 67
13275: PUSH
13276: LD_INT 1
13278: PLUS
13279: ST_TO_ADDR
// end ;
13280: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
13281: LD_EXP 24
13285: PUSH
13286: LD_EXP 43
13290: AND
13291: IFFALSE 13394
13293: GO 13295
13295: DISABLE
13296: LD_INT 0
13298: PPUSH
// begin for i := 1 to 5 do
13299: LD_ADDR_VAR 0 1
13303: PUSH
13304: DOUBLE
13305: LD_INT 1
13307: DEC
13308: ST_TO_ADDR
13309: LD_INT 5
13311: PUSH
13312: FOR_TO
13313: IFFALSE 13392
// begin uc_nation := nation_nature ;
13315: LD_ADDR_OWVAR 21
13319: PUSH
13320: LD_INT 0
13322: ST_TO_ADDR
// uc_side := 0 ;
13323: LD_ADDR_OWVAR 20
13327: PUSH
13328: LD_INT 0
13330: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13331: LD_ADDR_OWVAR 29
13335: PUSH
13336: LD_INT 12
13338: PUSH
13339: LD_INT 12
13341: PUSH
13342: EMPTY
13343: LIST
13344: LIST
13345: ST_TO_ADDR
// hc_agressivity := 20 ;
13346: LD_ADDR_OWVAR 35
13350: PUSH
13351: LD_INT 20
13353: ST_TO_ADDR
// hc_class := class_tiger ;
13354: LD_ADDR_OWVAR 28
13358: PUSH
13359: LD_INT 14
13361: ST_TO_ADDR
// hc_gallery :=  ;
13362: LD_ADDR_OWVAR 33
13366: PUSH
13367: LD_STRING 
13369: ST_TO_ADDR
// hc_name :=  ;
13370: LD_ADDR_OWVAR 26
13374: PUSH
13375: LD_STRING 
13377: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
13378: CALL_OW 44
13382: PPUSH
13383: LD_INT 0
13385: PPUSH
13386: CALL_OW 51
// end ;
13390: GO 13312
13392: POP
13393: POP
// end ;
13394: PPOPN 1
13396: END
// every 0 0$1 trigger StreamModeActive and sBomb do
13397: LD_EXP 24
13401: PUSH
13402: LD_EXP 44
13406: AND
13407: IFFALSE 13416
13409: GO 13411
13411: DISABLE
// StreamSibBomb ;
13412: CALL 13417 0 0
13416: END
// export function StreamSibBomb ; var i , x , y ; begin
13417: LD_INT 0
13419: PPUSH
13420: PPUSH
13421: PPUSH
13422: PPUSH
// result := false ;
13423: LD_ADDR_VAR 0 1
13427: PUSH
13428: LD_INT 0
13430: ST_TO_ADDR
// for i := 1 to 16 do
13431: LD_ADDR_VAR 0 2
13435: PUSH
13436: DOUBLE
13437: LD_INT 1
13439: DEC
13440: ST_TO_ADDR
13441: LD_INT 16
13443: PUSH
13444: FOR_TO
13445: IFFALSE 13644
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13447: LD_ADDR_VAR 0 3
13451: PUSH
13452: LD_INT 10
13454: PUSH
13455: LD_INT 20
13457: PUSH
13458: LD_INT 30
13460: PUSH
13461: LD_INT 40
13463: PUSH
13464: LD_INT 50
13466: PUSH
13467: LD_INT 60
13469: PUSH
13470: LD_INT 70
13472: PUSH
13473: LD_INT 80
13475: PUSH
13476: LD_INT 90
13478: PUSH
13479: LD_INT 100
13481: PUSH
13482: LD_INT 110
13484: PUSH
13485: LD_INT 120
13487: PUSH
13488: LD_INT 130
13490: PUSH
13491: LD_INT 140
13493: PUSH
13494: LD_INT 150
13496: PUSH
13497: EMPTY
13498: LIST
13499: LIST
13500: LIST
13501: LIST
13502: LIST
13503: LIST
13504: LIST
13505: LIST
13506: LIST
13507: LIST
13508: LIST
13509: LIST
13510: LIST
13511: LIST
13512: LIST
13513: PUSH
13514: LD_INT 1
13516: PPUSH
13517: LD_INT 15
13519: PPUSH
13520: CALL_OW 12
13524: ARRAY
13525: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13526: LD_ADDR_VAR 0 4
13530: PUSH
13531: LD_INT 10
13533: PUSH
13534: LD_INT 20
13536: PUSH
13537: LD_INT 30
13539: PUSH
13540: LD_INT 40
13542: PUSH
13543: LD_INT 50
13545: PUSH
13546: LD_INT 60
13548: PUSH
13549: LD_INT 70
13551: PUSH
13552: LD_INT 80
13554: PUSH
13555: LD_INT 90
13557: PUSH
13558: LD_INT 100
13560: PUSH
13561: LD_INT 110
13563: PUSH
13564: LD_INT 120
13566: PUSH
13567: LD_INT 130
13569: PUSH
13570: LD_INT 140
13572: PUSH
13573: LD_INT 150
13575: PUSH
13576: EMPTY
13577: LIST
13578: LIST
13579: LIST
13580: LIST
13581: LIST
13582: LIST
13583: LIST
13584: LIST
13585: LIST
13586: LIST
13587: LIST
13588: LIST
13589: LIST
13590: LIST
13591: LIST
13592: PUSH
13593: LD_INT 1
13595: PPUSH
13596: LD_INT 15
13598: PPUSH
13599: CALL_OW 12
13603: ARRAY
13604: ST_TO_ADDR
// if ValidHex ( x , y ) then
13605: LD_VAR 0 3
13609: PPUSH
13610: LD_VAR 0 4
13614: PPUSH
13615: CALL_OW 488
13619: IFFALSE 13642
// begin result := [ x , y ] ;
13621: LD_ADDR_VAR 0 1
13625: PUSH
13626: LD_VAR 0 3
13630: PUSH
13631: LD_VAR 0 4
13635: PUSH
13636: EMPTY
13637: LIST
13638: LIST
13639: ST_TO_ADDR
// break ;
13640: GO 13644
// end ; end ;
13642: GO 13444
13644: POP
13645: POP
// if result then
13646: LD_VAR 0 1
13650: IFFALSE 13710
// begin ToLua ( playSibBomb() ) ;
13652: LD_STRING playSibBomb()
13654: PPUSH
13655: CALL_OW 559
// wait ( 0 0$14 ) ;
13659: LD_INT 490
13661: PPUSH
13662: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
13666: LD_VAR 0 1
13670: PUSH
13671: LD_INT 1
13673: ARRAY
13674: PPUSH
13675: LD_VAR 0 1
13679: PUSH
13680: LD_INT 2
13682: ARRAY
13683: PPUSH
13684: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
13688: LD_VAR 0 1
13692: PUSH
13693: LD_INT 1
13695: ARRAY
13696: PPUSH
13697: LD_VAR 0 1
13701: PUSH
13702: LD_INT 2
13704: ARRAY
13705: PPUSH
13706: CALL_OW 429
// end ; end ;
13710: LD_VAR 0 1
13714: RET
// every 0 0$1 trigger StreamModeActive and sReset do
13715: LD_EXP 24
13719: PUSH
13720: LD_EXP 46
13724: AND
13725: IFFALSE 13737
13727: GO 13729
13729: DISABLE
// YouLost (  ) ;
13730: LD_STRING 
13732: PPUSH
13733: CALL_OW 104
13737: END
// every 0 0$1 trigger StreamModeActive and sFog do
13738: LD_EXP 24
13742: PUSH
13743: LD_EXP 45
13747: AND
13748: IFFALSE 13762
13750: GO 13752
13752: DISABLE
// FogOff ( your_side ) ;
13753: LD_OWVAR 2
13757: PPUSH
13758: CALL_OW 344
13762: END
// every 0 0$1 trigger StreamModeActive and sSun do
13763: LD_EXP 24
13767: PUSH
13768: LD_EXP 47
13772: AND
13773: IFFALSE 13801
13775: GO 13777
13777: DISABLE
// begin solar_recharge_percent := 0 ;
13778: LD_ADDR_OWVAR 79
13782: PUSH
13783: LD_INT 0
13785: ST_TO_ADDR
// wait ( 5 5$00 ) ;
13786: LD_INT 10500
13788: PPUSH
13789: CALL_OW 67
// solar_recharge_percent := 100 ;
13793: LD_ADDR_OWVAR 79
13797: PUSH
13798: LD_INT 100
13800: ST_TO_ADDR
// end ;
13801: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
13802: LD_EXP 24
13806: PUSH
13807: LD_EXP 48
13811: AND
13812: IFFALSE 14051
13814: GO 13816
13816: DISABLE
13817: LD_INT 0
13819: PPUSH
13820: PPUSH
13821: PPUSH
// begin tmp := [ ] ;
13822: LD_ADDR_VAR 0 3
13826: PUSH
13827: EMPTY
13828: ST_TO_ADDR
// for i := 1 to 6 do
13829: LD_ADDR_VAR 0 1
13833: PUSH
13834: DOUBLE
13835: LD_INT 1
13837: DEC
13838: ST_TO_ADDR
13839: LD_INT 6
13841: PUSH
13842: FOR_TO
13843: IFFALSE 13948
// begin uc_nation := nation_nature ;
13845: LD_ADDR_OWVAR 21
13849: PUSH
13850: LD_INT 0
13852: ST_TO_ADDR
// uc_side := 0 ;
13853: LD_ADDR_OWVAR 20
13857: PUSH
13858: LD_INT 0
13860: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13861: LD_ADDR_OWVAR 29
13865: PUSH
13866: LD_INT 12
13868: PUSH
13869: LD_INT 12
13871: PUSH
13872: EMPTY
13873: LIST
13874: LIST
13875: ST_TO_ADDR
// hc_agressivity := 20 ;
13876: LD_ADDR_OWVAR 35
13880: PUSH
13881: LD_INT 20
13883: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
13884: LD_ADDR_OWVAR 28
13888: PUSH
13889: LD_INT 17
13891: ST_TO_ADDR
// hc_gallery :=  ;
13892: LD_ADDR_OWVAR 33
13896: PUSH
13897: LD_STRING 
13899: ST_TO_ADDR
// hc_name :=  ;
13900: LD_ADDR_OWVAR 26
13904: PUSH
13905: LD_STRING 
13907: ST_TO_ADDR
// un := CreateHuman ;
13908: LD_ADDR_VAR 0 2
13912: PUSH
13913: CALL_OW 44
13917: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
13918: LD_VAR 0 2
13922: PPUSH
13923: LD_INT 1
13925: PPUSH
13926: CALL_OW 51
// tmp := tmp ^ un ;
13930: LD_ADDR_VAR 0 3
13934: PUSH
13935: LD_VAR 0 3
13939: PUSH
13940: LD_VAR 0 2
13944: ADD
13945: ST_TO_ADDR
// end ;
13946: GO 13842
13948: POP
13949: POP
// repeat wait ( 0 0$1 ) ;
13950: LD_INT 35
13952: PPUSH
13953: CALL_OW 67
// for un in tmp do
13957: LD_ADDR_VAR 0 2
13961: PUSH
13962: LD_VAR 0 3
13966: PUSH
13967: FOR_IN
13968: IFFALSE 14042
// begin if IsDead ( un ) then
13970: LD_VAR 0 2
13974: PPUSH
13975: CALL_OW 301
13979: IFFALSE 13999
// begin tmp := tmp diff un ;
13981: LD_ADDR_VAR 0 3
13985: PUSH
13986: LD_VAR 0 3
13990: PUSH
13991: LD_VAR 0 2
13995: DIFF
13996: ST_TO_ADDR
// continue ;
13997: GO 13967
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
13999: LD_VAR 0 2
14003: PPUSH
14004: LD_INT 3
14006: PUSH
14007: LD_INT 22
14009: PUSH
14010: LD_INT 0
14012: PUSH
14013: EMPTY
14014: LIST
14015: LIST
14016: PUSH
14017: EMPTY
14018: LIST
14019: LIST
14020: PPUSH
14021: CALL_OW 69
14025: PPUSH
14026: LD_VAR 0 2
14030: PPUSH
14031: CALL_OW 74
14035: PPUSH
14036: CALL_OW 115
// end ;
14040: GO 13967
14042: POP
14043: POP
// until not tmp ;
14044: LD_VAR 0 3
14048: NOT
14049: IFFALSE 13950
// end ;
14051: PPOPN 3
14053: END
// every 0 0$1 trigger StreamModeActive and sTroll do
14054: LD_EXP 24
14058: PUSH
14059: LD_EXP 49
14063: AND
14064: IFFALSE 14118
14066: GO 14068
14068: DISABLE
// begin ToLua ( displayTroll(); ) ;
14069: LD_STRING displayTroll();
14071: PPUSH
14072: CALL_OW 559
// wait ( 3 3$00 ) ;
14076: LD_INT 6300
14078: PPUSH
14079: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14083: LD_STRING hideTroll();
14085: PPUSH
14086: CALL_OW 559
// wait ( 1 1$00 ) ;
14090: LD_INT 2100
14092: PPUSH
14093: CALL_OW 67
// ToLua ( displayTroll(); ) ;
14097: LD_STRING displayTroll();
14099: PPUSH
14100: CALL_OW 559
// wait ( 1 1$00 ) ;
14104: LD_INT 2100
14106: PPUSH
14107: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14111: LD_STRING hideTroll();
14113: PPUSH
14114: CALL_OW 559
// end ;
14118: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
14119: LD_EXP 24
14123: PUSH
14124: LD_EXP 50
14128: AND
14129: IFFALSE 14192
14131: GO 14133
14133: DISABLE
14134: LD_INT 0
14136: PPUSH
// begin p := 0 ;
14137: LD_ADDR_VAR 0 1
14141: PUSH
14142: LD_INT 0
14144: ST_TO_ADDR
// repeat game_speed := 1 ;
14145: LD_ADDR_OWVAR 65
14149: PUSH
14150: LD_INT 1
14152: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14153: LD_INT 35
14155: PPUSH
14156: CALL_OW 67
// p := p + 1 ;
14160: LD_ADDR_VAR 0 1
14164: PUSH
14165: LD_VAR 0 1
14169: PUSH
14170: LD_INT 1
14172: PLUS
14173: ST_TO_ADDR
// until p >= 60 ;
14174: LD_VAR 0 1
14178: PUSH
14179: LD_INT 60
14181: GREATEREQUAL
14182: IFFALSE 14145
// game_speed := 4 ;
14184: LD_ADDR_OWVAR 65
14188: PUSH
14189: LD_INT 4
14191: ST_TO_ADDR
// end ;
14192: PPOPN 1
14194: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
14195: LD_EXP 24
14199: PUSH
14200: LD_EXP 51
14204: AND
14205: IFFALSE 14351
14207: GO 14209
14209: DISABLE
14210: LD_INT 0
14212: PPUSH
14213: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14214: LD_ADDR_VAR 0 1
14218: PUSH
14219: LD_INT 22
14221: PUSH
14222: LD_OWVAR 2
14226: PUSH
14227: EMPTY
14228: LIST
14229: LIST
14230: PUSH
14231: LD_INT 2
14233: PUSH
14234: LD_INT 30
14236: PUSH
14237: LD_INT 0
14239: PUSH
14240: EMPTY
14241: LIST
14242: LIST
14243: PUSH
14244: LD_INT 30
14246: PUSH
14247: LD_INT 1
14249: PUSH
14250: EMPTY
14251: LIST
14252: LIST
14253: PUSH
14254: EMPTY
14255: LIST
14256: LIST
14257: LIST
14258: PUSH
14259: EMPTY
14260: LIST
14261: LIST
14262: PPUSH
14263: CALL_OW 69
14267: ST_TO_ADDR
// if not depot then
14268: LD_VAR 0 1
14272: NOT
14273: IFFALSE 14277
// exit ;
14275: GO 14351
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
14277: LD_ADDR_VAR 0 2
14281: PUSH
14282: LD_VAR 0 1
14286: PUSH
14287: LD_INT 1
14289: PPUSH
14290: LD_VAR 0 1
14294: PPUSH
14295: CALL_OW 12
14299: ARRAY
14300: PPUSH
14301: CALL_OW 274
14305: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
14306: LD_VAR 0 2
14310: PPUSH
14311: LD_INT 1
14313: PPUSH
14314: LD_INT 0
14316: PPUSH
14317: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
14321: LD_VAR 0 2
14325: PPUSH
14326: LD_INT 2
14328: PPUSH
14329: LD_INT 0
14331: PPUSH
14332: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
14336: LD_VAR 0 2
14340: PPUSH
14341: LD_INT 3
14343: PPUSH
14344: LD_INT 0
14346: PPUSH
14347: CALL_OW 277
// end ;
14351: PPOPN 2
14353: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
14354: LD_EXP 24
14358: PUSH
14359: LD_EXP 52
14363: AND
14364: IFFALSE 14461
14366: GO 14368
14368: DISABLE
14369: LD_INT 0
14371: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14372: LD_ADDR_VAR 0 1
14376: PUSH
14377: LD_INT 22
14379: PUSH
14380: LD_OWVAR 2
14384: PUSH
14385: EMPTY
14386: LIST
14387: LIST
14388: PUSH
14389: LD_INT 21
14391: PUSH
14392: LD_INT 1
14394: PUSH
14395: EMPTY
14396: LIST
14397: LIST
14398: PUSH
14399: LD_INT 3
14401: PUSH
14402: LD_INT 23
14404: PUSH
14405: LD_INT 0
14407: PUSH
14408: EMPTY
14409: LIST
14410: LIST
14411: PUSH
14412: EMPTY
14413: LIST
14414: LIST
14415: PUSH
14416: EMPTY
14417: LIST
14418: LIST
14419: LIST
14420: PPUSH
14421: CALL_OW 69
14425: ST_TO_ADDR
// if not tmp then
14426: LD_VAR 0 1
14430: NOT
14431: IFFALSE 14435
// exit ;
14433: GO 14461
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
14435: LD_VAR 0 1
14439: PUSH
14440: LD_INT 1
14442: PPUSH
14443: LD_VAR 0 1
14447: PPUSH
14448: CALL_OW 12
14452: ARRAY
14453: PPUSH
14454: LD_INT 200
14456: PPUSH
14457: CALL_OW 234
// end ;
14461: PPOPN 1
14463: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
14464: LD_EXP 24
14468: PUSH
14469: LD_EXP 53
14473: AND
14474: IFFALSE 14553
14476: GO 14478
14478: DISABLE
14479: LD_INT 0
14481: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
14482: LD_ADDR_VAR 0 1
14486: PUSH
14487: LD_INT 22
14489: PUSH
14490: LD_OWVAR 2
14494: PUSH
14495: EMPTY
14496: LIST
14497: LIST
14498: PUSH
14499: LD_INT 21
14501: PUSH
14502: LD_INT 2
14504: PUSH
14505: EMPTY
14506: LIST
14507: LIST
14508: PUSH
14509: EMPTY
14510: LIST
14511: LIST
14512: PPUSH
14513: CALL_OW 69
14517: ST_TO_ADDR
// if not tmp then
14518: LD_VAR 0 1
14522: NOT
14523: IFFALSE 14527
// exit ;
14525: GO 14553
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
14527: LD_VAR 0 1
14531: PUSH
14532: LD_INT 1
14534: PPUSH
14535: LD_VAR 0 1
14539: PPUSH
14540: CALL_OW 12
14544: ARRAY
14545: PPUSH
14546: LD_INT 60
14548: PPUSH
14549: CALL_OW 234
// end ;
14553: PPOPN 1
14555: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
14556: LD_EXP 24
14560: PUSH
14561: LD_EXP 54
14565: AND
14566: IFFALSE 14665
14568: GO 14570
14570: DISABLE
14571: LD_INT 0
14573: PPUSH
14574: PPUSH
// begin enable ;
14575: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
14576: LD_ADDR_VAR 0 1
14580: PUSH
14581: LD_INT 22
14583: PUSH
14584: LD_OWVAR 2
14588: PUSH
14589: EMPTY
14590: LIST
14591: LIST
14592: PUSH
14593: LD_INT 61
14595: PUSH
14596: EMPTY
14597: LIST
14598: PUSH
14599: LD_INT 33
14601: PUSH
14602: LD_INT 2
14604: PUSH
14605: EMPTY
14606: LIST
14607: LIST
14608: PUSH
14609: EMPTY
14610: LIST
14611: LIST
14612: LIST
14613: PPUSH
14614: CALL_OW 69
14618: ST_TO_ADDR
// if not tmp then
14619: LD_VAR 0 1
14623: NOT
14624: IFFALSE 14628
// exit ;
14626: GO 14665
// for i in tmp do
14628: LD_ADDR_VAR 0 2
14632: PUSH
14633: LD_VAR 0 1
14637: PUSH
14638: FOR_IN
14639: IFFALSE 14663
// if IsControledBy ( i ) then
14641: LD_VAR 0 2
14645: PPUSH
14646: CALL_OW 312
14650: IFFALSE 14661
// ComUnlink ( i ) ;
14652: LD_VAR 0 2
14656: PPUSH
14657: CALL_OW 136
14661: GO 14638
14663: POP
14664: POP
// end ;
14665: PPOPN 2
14667: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
14668: LD_EXP 24
14672: PUSH
14673: LD_EXP 55
14677: AND
14678: IFFALSE 14818
14680: GO 14682
14682: DISABLE
14683: LD_INT 0
14685: PPUSH
14686: PPUSH
// begin ToLua ( displayPowell(); ) ;
14687: LD_STRING displayPowell();
14689: PPUSH
14690: CALL_OW 559
// uc_side := 0 ;
14694: LD_ADDR_OWVAR 20
14698: PUSH
14699: LD_INT 0
14701: ST_TO_ADDR
// uc_nation := 2 ;
14702: LD_ADDR_OWVAR 21
14706: PUSH
14707: LD_INT 2
14709: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
14710: LD_ADDR_OWVAR 37
14714: PUSH
14715: LD_INT 14
14717: ST_TO_ADDR
// vc_engine := engine_siberite ;
14718: LD_ADDR_OWVAR 39
14722: PUSH
14723: LD_INT 3
14725: ST_TO_ADDR
// vc_control := control_apeman ;
14726: LD_ADDR_OWVAR 38
14730: PUSH
14731: LD_INT 5
14733: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
14734: LD_ADDR_OWVAR 40
14738: PUSH
14739: LD_INT 29
14741: ST_TO_ADDR
// un := CreateVehicle ;
14742: LD_ADDR_VAR 0 2
14746: PUSH
14747: CALL_OW 45
14751: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14752: LD_VAR 0 2
14756: PPUSH
14757: LD_INT 1
14759: PPUSH
14760: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14764: LD_INT 35
14766: PPUSH
14767: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14771: LD_VAR 0 2
14775: PPUSH
14776: LD_INT 22
14778: PUSH
14779: LD_OWVAR 2
14783: PUSH
14784: EMPTY
14785: LIST
14786: LIST
14787: PPUSH
14788: CALL_OW 69
14792: PPUSH
14793: LD_VAR 0 2
14797: PPUSH
14798: CALL_OW 74
14802: PPUSH
14803: CALL_OW 115
// until IsDead ( un ) ;
14807: LD_VAR 0 2
14811: PPUSH
14812: CALL_OW 301
14816: IFFALSE 14764
// end ;
14818: PPOPN 2
14820: END
// every 0 0$1 trigger StreamModeActive and sStu do
14821: LD_EXP 24
14825: PUSH
14826: LD_EXP 63
14830: AND
14831: IFFALSE 14847
14833: GO 14835
14835: DISABLE
// begin ToLua ( displayStucuk(); ) ;
14836: LD_STRING displayStucuk();
14838: PPUSH
14839: CALL_OW 559
// ResetFog ;
14843: CALL_OW 335
// end ;
14847: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
14848: LD_EXP 24
14852: PUSH
14853: LD_EXP 56
14857: AND
14858: IFFALSE 14999
14860: GO 14862
14862: DISABLE
14863: LD_INT 0
14865: PPUSH
14866: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14867: LD_ADDR_VAR 0 2
14871: PUSH
14872: LD_INT 22
14874: PUSH
14875: LD_OWVAR 2
14879: PUSH
14880: EMPTY
14881: LIST
14882: LIST
14883: PUSH
14884: LD_INT 21
14886: PUSH
14887: LD_INT 1
14889: PUSH
14890: EMPTY
14891: LIST
14892: LIST
14893: PUSH
14894: EMPTY
14895: LIST
14896: LIST
14897: PPUSH
14898: CALL_OW 69
14902: ST_TO_ADDR
// if not tmp then
14903: LD_VAR 0 2
14907: NOT
14908: IFFALSE 14912
// exit ;
14910: GO 14999
// un := tmp [ rand ( 1 , tmp ) ] ;
14912: LD_ADDR_VAR 0 1
14916: PUSH
14917: LD_VAR 0 2
14921: PUSH
14922: LD_INT 1
14924: PPUSH
14925: LD_VAR 0 2
14929: PPUSH
14930: CALL_OW 12
14934: ARRAY
14935: ST_TO_ADDR
// SetSide ( un , 0 ) ;
14936: LD_VAR 0 1
14940: PPUSH
14941: LD_INT 0
14943: PPUSH
14944: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
14948: LD_VAR 0 1
14952: PPUSH
14953: LD_OWVAR 3
14957: PUSH
14958: LD_VAR 0 1
14962: DIFF
14963: PPUSH
14964: LD_VAR 0 1
14968: PPUSH
14969: CALL_OW 74
14973: PPUSH
14974: CALL_OW 115
// wait ( 0 0$20 ) ;
14978: LD_INT 700
14980: PPUSH
14981: CALL_OW 67
// SetSide ( un , your_side ) ;
14985: LD_VAR 0 1
14989: PPUSH
14990: LD_OWVAR 2
14994: PPUSH
14995: CALL_OW 235
// end ;
14999: PPOPN 2
15001: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
15002: LD_EXP 24
15006: PUSH
15007: LD_EXP 57
15011: AND
15012: IFFALSE 15118
15014: GO 15016
15016: DISABLE
15017: LD_INT 0
15019: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15020: LD_ADDR_VAR 0 1
15024: PUSH
15025: LD_INT 22
15027: PUSH
15028: LD_OWVAR 2
15032: PUSH
15033: EMPTY
15034: LIST
15035: LIST
15036: PUSH
15037: LD_INT 2
15039: PUSH
15040: LD_INT 30
15042: PUSH
15043: LD_INT 0
15045: PUSH
15046: EMPTY
15047: LIST
15048: LIST
15049: PUSH
15050: LD_INT 30
15052: PUSH
15053: LD_INT 1
15055: PUSH
15056: EMPTY
15057: LIST
15058: LIST
15059: PUSH
15060: EMPTY
15061: LIST
15062: LIST
15063: LIST
15064: PUSH
15065: EMPTY
15066: LIST
15067: LIST
15068: PPUSH
15069: CALL_OW 69
15073: ST_TO_ADDR
// if not depot then
15074: LD_VAR 0 1
15078: NOT
15079: IFFALSE 15083
// exit ;
15081: GO 15118
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
15083: LD_VAR 0 1
15087: PUSH
15088: LD_INT 1
15090: ARRAY
15091: PPUSH
15092: CALL_OW 250
15096: PPUSH
15097: LD_VAR 0 1
15101: PUSH
15102: LD_INT 1
15104: ARRAY
15105: PPUSH
15106: CALL_OW 251
15110: PPUSH
15111: LD_INT 70
15113: PPUSH
15114: CALL_OW 495
// end ;
15118: PPOPN 1
15120: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
15121: LD_EXP 24
15125: PUSH
15126: LD_EXP 58
15130: AND
15131: IFFALSE 15342
15133: GO 15135
15135: DISABLE
15136: LD_INT 0
15138: PPUSH
15139: PPUSH
15140: PPUSH
15141: PPUSH
15142: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15143: LD_ADDR_VAR 0 5
15147: PUSH
15148: LD_INT 22
15150: PUSH
15151: LD_OWVAR 2
15155: PUSH
15156: EMPTY
15157: LIST
15158: LIST
15159: PUSH
15160: LD_INT 21
15162: PUSH
15163: LD_INT 1
15165: PUSH
15166: EMPTY
15167: LIST
15168: LIST
15169: PUSH
15170: EMPTY
15171: LIST
15172: LIST
15173: PPUSH
15174: CALL_OW 69
15178: ST_TO_ADDR
// if not tmp then
15179: LD_VAR 0 5
15183: NOT
15184: IFFALSE 15188
// exit ;
15186: GO 15342
// for i in tmp do
15188: LD_ADDR_VAR 0 1
15192: PUSH
15193: LD_VAR 0 5
15197: PUSH
15198: FOR_IN
15199: IFFALSE 15340
// begin d := rand ( 0 , 5 ) ;
15201: LD_ADDR_VAR 0 4
15205: PUSH
15206: LD_INT 0
15208: PPUSH
15209: LD_INT 5
15211: PPUSH
15212: CALL_OW 12
15216: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
15217: LD_ADDR_VAR 0 2
15221: PUSH
15222: LD_VAR 0 1
15226: PPUSH
15227: CALL_OW 250
15231: PPUSH
15232: LD_VAR 0 4
15236: PPUSH
15237: LD_INT 3
15239: PPUSH
15240: LD_INT 12
15242: PPUSH
15243: CALL_OW 12
15247: PPUSH
15248: CALL_OW 272
15252: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
15253: LD_ADDR_VAR 0 3
15257: PUSH
15258: LD_VAR 0 1
15262: PPUSH
15263: CALL_OW 251
15267: PPUSH
15268: LD_VAR 0 4
15272: PPUSH
15273: LD_INT 3
15275: PPUSH
15276: LD_INT 12
15278: PPUSH
15279: CALL_OW 12
15283: PPUSH
15284: CALL_OW 273
15288: ST_TO_ADDR
// if ValidHex ( x , y ) then
15289: LD_VAR 0 2
15293: PPUSH
15294: LD_VAR 0 3
15298: PPUSH
15299: CALL_OW 488
15303: IFFALSE 15338
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
15305: LD_VAR 0 1
15309: PPUSH
15310: LD_VAR 0 2
15314: PPUSH
15315: LD_VAR 0 3
15319: PPUSH
15320: LD_INT 3
15322: PPUSH
15323: LD_INT 6
15325: PPUSH
15326: CALL_OW 12
15330: PPUSH
15331: LD_INT 1
15333: PPUSH
15334: CALL_OW 483
// end ;
15338: GO 15198
15340: POP
15341: POP
// end ;
15342: PPOPN 5
15344: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
15345: LD_EXP 24
15349: PUSH
15350: LD_EXP 59
15354: AND
15355: IFFALSE 15449
15357: GO 15359
15359: DISABLE
15360: LD_INT 0
15362: PPUSH
15363: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
15364: LD_ADDR_VAR 0 2
15368: PUSH
15369: LD_INT 22
15371: PUSH
15372: LD_OWVAR 2
15376: PUSH
15377: EMPTY
15378: LIST
15379: LIST
15380: PUSH
15381: LD_INT 32
15383: PUSH
15384: LD_INT 1
15386: PUSH
15387: EMPTY
15388: LIST
15389: LIST
15390: PUSH
15391: LD_INT 21
15393: PUSH
15394: LD_INT 2
15396: PUSH
15397: EMPTY
15398: LIST
15399: LIST
15400: PUSH
15401: EMPTY
15402: LIST
15403: LIST
15404: LIST
15405: PPUSH
15406: CALL_OW 69
15410: ST_TO_ADDR
// if not tmp then
15411: LD_VAR 0 2
15415: NOT
15416: IFFALSE 15420
// exit ;
15418: GO 15449
// for i in tmp do
15420: LD_ADDR_VAR 0 1
15424: PUSH
15425: LD_VAR 0 2
15429: PUSH
15430: FOR_IN
15431: IFFALSE 15447
// SetFuel ( i , 0 ) ;
15433: LD_VAR 0 1
15437: PPUSH
15438: LD_INT 0
15440: PPUSH
15441: CALL_OW 240
15445: GO 15430
15447: POP
15448: POP
// end ;
15449: PPOPN 2
15451: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
15452: LD_EXP 24
15456: PUSH
15457: LD_EXP 60
15461: AND
15462: IFFALSE 15528
15464: GO 15466
15466: DISABLE
15467: LD_INT 0
15469: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15470: LD_ADDR_VAR 0 1
15474: PUSH
15475: LD_INT 22
15477: PUSH
15478: LD_OWVAR 2
15482: PUSH
15483: EMPTY
15484: LIST
15485: LIST
15486: PUSH
15487: LD_INT 30
15489: PUSH
15490: LD_INT 29
15492: PUSH
15493: EMPTY
15494: LIST
15495: LIST
15496: PUSH
15497: EMPTY
15498: LIST
15499: LIST
15500: PPUSH
15501: CALL_OW 69
15505: ST_TO_ADDR
// if not tmp then
15506: LD_VAR 0 1
15510: NOT
15511: IFFALSE 15515
// exit ;
15513: GO 15528
// DestroyUnit ( tmp [ 1 ] ) ;
15515: LD_VAR 0 1
15519: PUSH
15520: LD_INT 1
15522: ARRAY
15523: PPUSH
15524: CALL_OW 65
// end ;
15528: PPOPN 1
15530: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
15531: LD_EXP 24
15535: PUSH
15536: LD_EXP 62
15540: AND
15541: IFFALSE 15670
15543: GO 15545
15545: DISABLE
15546: LD_INT 0
15548: PPUSH
// begin uc_side := 0 ;
15549: LD_ADDR_OWVAR 20
15553: PUSH
15554: LD_INT 0
15556: ST_TO_ADDR
// uc_nation := nation_arabian ;
15557: LD_ADDR_OWVAR 21
15561: PUSH
15562: LD_INT 2
15564: ST_TO_ADDR
// hc_gallery :=  ;
15565: LD_ADDR_OWVAR 33
15569: PUSH
15570: LD_STRING 
15572: ST_TO_ADDR
// hc_name :=  ;
15573: LD_ADDR_OWVAR 26
15577: PUSH
15578: LD_STRING 
15580: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
15581: LD_INT 1
15583: PPUSH
15584: LD_INT 11
15586: PPUSH
15587: LD_INT 10
15589: PPUSH
15590: CALL_OW 380
// un := CreateHuman ;
15594: LD_ADDR_VAR 0 1
15598: PUSH
15599: CALL_OW 44
15603: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15604: LD_VAR 0 1
15608: PPUSH
15609: LD_INT 1
15611: PPUSH
15612: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15616: LD_INT 35
15618: PPUSH
15619: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15623: LD_VAR 0 1
15627: PPUSH
15628: LD_INT 22
15630: PUSH
15631: LD_OWVAR 2
15635: PUSH
15636: EMPTY
15637: LIST
15638: LIST
15639: PPUSH
15640: CALL_OW 69
15644: PPUSH
15645: LD_VAR 0 1
15649: PPUSH
15650: CALL_OW 74
15654: PPUSH
15655: CALL_OW 115
// until IsDead ( un ) ;
15659: LD_VAR 0 1
15663: PPUSH
15664: CALL_OW 301
15668: IFFALSE 15616
// end ;
15670: PPOPN 1
15672: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
15673: LD_EXP 24
15677: PUSH
15678: LD_EXP 64
15682: AND
15683: IFFALSE 15695
15685: GO 15687
15687: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
15688: LD_STRING earthquake(getX(game), 0, 32)
15690: PPUSH
15691: CALL_OW 559
15695: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
15696: LD_EXP 24
15700: PUSH
15701: LD_EXP 65
15705: AND
15706: IFFALSE 15797
15708: GO 15710
15710: DISABLE
15711: LD_INT 0
15713: PPUSH
// begin enable ;
15714: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
15715: LD_ADDR_VAR 0 1
15719: PUSH
15720: LD_INT 22
15722: PUSH
15723: LD_OWVAR 2
15727: PUSH
15728: EMPTY
15729: LIST
15730: LIST
15731: PUSH
15732: LD_INT 21
15734: PUSH
15735: LD_INT 2
15737: PUSH
15738: EMPTY
15739: LIST
15740: LIST
15741: PUSH
15742: LD_INT 33
15744: PUSH
15745: LD_INT 3
15747: PUSH
15748: EMPTY
15749: LIST
15750: LIST
15751: PUSH
15752: EMPTY
15753: LIST
15754: LIST
15755: LIST
15756: PPUSH
15757: CALL_OW 69
15761: ST_TO_ADDR
// if not tmp then
15762: LD_VAR 0 1
15766: NOT
15767: IFFALSE 15771
// exit ;
15769: GO 15797
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15771: LD_VAR 0 1
15775: PUSH
15776: LD_INT 1
15778: PPUSH
15779: LD_VAR 0 1
15783: PPUSH
15784: CALL_OW 12
15788: ARRAY
15789: PPUSH
15790: LD_INT 1
15792: PPUSH
15793: CALL_OW 234
// end ;
15797: PPOPN 1
15799: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
15800: LD_EXP 24
15804: PUSH
15805: LD_EXP 66
15809: AND
15810: IFFALSE 15951
15812: GO 15814
15814: DISABLE
15815: LD_INT 0
15817: PPUSH
15818: PPUSH
15819: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15820: LD_ADDR_VAR 0 3
15824: PUSH
15825: LD_INT 22
15827: PUSH
15828: LD_OWVAR 2
15832: PUSH
15833: EMPTY
15834: LIST
15835: LIST
15836: PUSH
15837: LD_INT 25
15839: PUSH
15840: LD_INT 1
15842: PUSH
15843: EMPTY
15844: LIST
15845: LIST
15846: PUSH
15847: EMPTY
15848: LIST
15849: LIST
15850: PPUSH
15851: CALL_OW 69
15855: ST_TO_ADDR
// if not tmp then
15856: LD_VAR 0 3
15860: NOT
15861: IFFALSE 15865
// exit ;
15863: GO 15951
// un := tmp [ rand ( 1 , tmp ) ] ;
15865: LD_ADDR_VAR 0 2
15869: PUSH
15870: LD_VAR 0 3
15874: PUSH
15875: LD_INT 1
15877: PPUSH
15878: LD_VAR 0 3
15882: PPUSH
15883: CALL_OW 12
15887: ARRAY
15888: ST_TO_ADDR
// if Crawls ( un ) then
15889: LD_VAR 0 2
15893: PPUSH
15894: CALL_OW 318
15898: IFFALSE 15909
// ComWalk ( un ) ;
15900: LD_VAR 0 2
15904: PPUSH
15905: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
15909: LD_VAR 0 2
15913: PPUSH
15914: LD_INT 9
15916: PPUSH
15917: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
15921: LD_INT 28
15923: PPUSH
15924: LD_OWVAR 2
15928: PPUSH
15929: LD_INT 2
15931: PPUSH
15932: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
15936: LD_INT 29
15938: PPUSH
15939: LD_OWVAR 2
15943: PPUSH
15944: LD_INT 2
15946: PPUSH
15947: CALL_OW 322
// end ;
15951: PPOPN 3
15953: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
15954: LD_EXP 24
15958: PUSH
15959: LD_EXP 67
15963: AND
15964: IFFALSE 16075
15966: GO 15968
15968: DISABLE
15969: LD_INT 0
15971: PPUSH
15972: PPUSH
15973: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15974: LD_ADDR_VAR 0 3
15978: PUSH
15979: LD_INT 22
15981: PUSH
15982: LD_OWVAR 2
15986: PUSH
15987: EMPTY
15988: LIST
15989: LIST
15990: PUSH
15991: LD_INT 25
15993: PUSH
15994: LD_INT 1
15996: PUSH
15997: EMPTY
15998: LIST
15999: LIST
16000: PUSH
16001: EMPTY
16002: LIST
16003: LIST
16004: PPUSH
16005: CALL_OW 69
16009: ST_TO_ADDR
// if not tmp then
16010: LD_VAR 0 3
16014: NOT
16015: IFFALSE 16019
// exit ;
16017: GO 16075
// un := tmp [ rand ( 1 , tmp ) ] ;
16019: LD_ADDR_VAR 0 2
16023: PUSH
16024: LD_VAR 0 3
16028: PUSH
16029: LD_INT 1
16031: PPUSH
16032: LD_VAR 0 3
16036: PPUSH
16037: CALL_OW 12
16041: ARRAY
16042: ST_TO_ADDR
// if Crawls ( un ) then
16043: LD_VAR 0 2
16047: PPUSH
16048: CALL_OW 318
16052: IFFALSE 16063
// ComWalk ( un ) ;
16054: LD_VAR 0 2
16058: PPUSH
16059: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16063: LD_VAR 0 2
16067: PPUSH
16068: LD_INT 8
16070: PPUSH
16071: CALL_OW 336
// end ;
16075: PPOPN 3
16077: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
16078: LD_EXP 24
16082: PUSH
16083: LD_EXP 68
16087: AND
16088: IFFALSE 16232
16090: GO 16092
16092: DISABLE
16093: LD_INT 0
16095: PPUSH
16096: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
16097: LD_ADDR_VAR 0 2
16101: PUSH
16102: LD_INT 22
16104: PUSH
16105: LD_OWVAR 2
16109: PUSH
16110: EMPTY
16111: LIST
16112: LIST
16113: PUSH
16114: LD_INT 21
16116: PUSH
16117: LD_INT 2
16119: PUSH
16120: EMPTY
16121: LIST
16122: LIST
16123: PUSH
16124: LD_INT 2
16126: PUSH
16127: LD_INT 34
16129: PUSH
16130: LD_INT 12
16132: PUSH
16133: EMPTY
16134: LIST
16135: LIST
16136: PUSH
16137: LD_INT 34
16139: PUSH
16140: LD_INT 51
16142: PUSH
16143: EMPTY
16144: LIST
16145: LIST
16146: PUSH
16147: LD_INT 34
16149: PUSH
16150: LD_INT 32
16152: PUSH
16153: EMPTY
16154: LIST
16155: LIST
16156: PUSH
16157: EMPTY
16158: LIST
16159: LIST
16160: LIST
16161: LIST
16162: PUSH
16163: EMPTY
16164: LIST
16165: LIST
16166: LIST
16167: PPUSH
16168: CALL_OW 69
16172: ST_TO_ADDR
// if not tmp then
16173: LD_VAR 0 2
16177: NOT
16178: IFFALSE 16182
// exit ;
16180: GO 16232
// for i in tmp do
16182: LD_ADDR_VAR 0 1
16186: PUSH
16187: LD_VAR 0 2
16191: PUSH
16192: FOR_IN
16193: IFFALSE 16230
// if GetCargo ( i , mat_artifact ) = 0 then
16195: LD_VAR 0 1
16199: PPUSH
16200: LD_INT 4
16202: PPUSH
16203: CALL_OW 289
16207: PUSH
16208: LD_INT 0
16210: EQUAL
16211: IFFALSE 16228
// SetCargo ( i , mat_siberit , 100 ) ;
16213: LD_VAR 0 1
16217: PPUSH
16218: LD_INT 3
16220: PPUSH
16221: LD_INT 100
16223: PPUSH
16224: CALL_OW 290
16228: GO 16192
16230: POP
16231: POP
// end ;
16232: PPOPN 2
16234: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
16235: LD_EXP 24
16239: PUSH
16240: LD_EXP 69
16244: AND
16245: IFFALSE 16428
16247: GO 16249
16249: DISABLE
16250: LD_INT 0
16252: PPUSH
16253: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16254: LD_ADDR_VAR 0 2
16258: PUSH
16259: LD_INT 22
16261: PUSH
16262: LD_OWVAR 2
16266: PUSH
16267: EMPTY
16268: LIST
16269: LIST
16270: PPUSH
16271: CALL_OW 69
16275: ST_TO_ADDR
// if not tmp then
16276: LD_VAR 0 2
16280: NOT
16281: IFFALSE 16285
// exit ;
16283: GO 16428
// for i := 1 to 2 do
16285: LD_ADDR_VAR 0 1
16289: PUSH
16290: DOUBLE
16291: LD_INT 1
16293: DEC
16294: ST_TO_ADDR
16295: LD_INT 2
16297: PUSH
16298: FOR_TO
16299: IFFALSE 16426
// begin uc_side := your_side ;
16301: LD_ADDR_OWVAR 20
16305: PUSH
16306: LD_OWVAR 2
16310: ST_TO_ADDR
// uc_nation := nation_american ;
16311: LD_ADDR_OWVAR 21
16315: PUSH
16316: LD_INT 1
16318: ST_TO_ADDR
// vc_chassis := us_morphling ;
16319: LD_ADDR_OWVAR 37
16323: PUSH
16324: LD_INT 5
16326: ST_TO_ADDR
// vc_engine := engine_siberite ;
16327: LD_ADDR_OWVAR 39
16331: PUSH
16332: LD_INT 3
16334: ST_TO_ADDR
// vc_control := control_computer ;
16335: LD_ADDR_OWVAR 38
16339: PUSH
16340: LD_INT 3
16342: ST_TO_ADDR
// vc_weapon := us_double_laser ;
16343: LD_ADDR_OWVAR 40
16347: PUSH
16348: LD_INT 10
16350: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
16351: LD_VAR 0 2
16355: PUSH
16356: LD_INT 1
16358: ARRAY
16359: PPUSH
16360: CALL_OW 310
16364: NOT
16365: IFFALSE 16412
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
16367: CALL_OW 45
16371: PPUSH
16372: LD_VAR 0 2
16376: PUSH
16377: LD_INT 1
16379: ARRAY
16380: PPUSH
16381: CALL_OW 250
16385: PPUSH
16386: LD_VAR 0 2
16390: PUSH
16391: LD_INT 1
16393: ARRAY
16394: PPUSH
16395: CALL_OW 251
16399: PPUSH
16400: LD_INT 12
16402: PPUSH
16403: LD_INT 1
16405: PPUSH
16406: CALL_OW 50
16410: GO 16424
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
16412: CALL_OW 45
16416: PPUSH
16417: LD_INT 1
16419: PPUSH
16420: CALL_OW 51
// end ;
16424: GO 16298
16426: POP
16427: POP
// end ;
16428: PPOPN 2
16430: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
16431: LD_EXP 24
16435: PUSH
16436: LD_EXP 70
16440: AND
16441: IFFALSE 16663
16443: GO 16445
16445: DISABLE
16446: LD_INT 0
16448: PPUSH
16449: PPUSH
16450: PPUSH
16451: PPUSH
16452: PPUSH
16453: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16454: LD_ADDR_VAR 0 6
16458: PUSH
16459: LD_INT 22
16461: PUSH
16462: LD_OWVAR 2
16466: PUSH
16467: EMPTY
16468: LIST
16469: LIST
16470: PUSH
16471: LD_INT 21
16473: PUSH
16474: LD_INT 1
16476: PUSH
16477: EMPTY
16478: LIST
16479: LIST
16480: PUSH
16481: LD_INT 3
16483: PUSH
16484: LD_INT 23
16486: PUSH
16487: LD_INT 0
16489: PUSH
16490: EMPTY
16491: LIST
16492: LIST
16493: PUSH
16494: EMPTY
16495: LIST
16496: LIST
16497: PUSH
16498: EMPTY
16499: LIST
16500: LIST
16501: LIST
16502: PPUSH
16503: CALL_OW 69
16507: ST_TO_ADDR
// if not tmp then
16508: LD_VAR 0 6
16512: NOT
16513: IFFALSE 16517
// exit ;
16515: GO 16663
// s1 := rand ( 1 , 4 ) ;
16517: LD_ADDR_VAR 0 2
16521: PUSH
16522: LD_INT 1
16524: PPUSH
16525: LD_INT 4
16527: PPUSH
16528: CALL_OW 12
16532: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
16533: LD_ADDR_VAR 0 4
16537: PUSH
16538: LD_VAR 0 6
16542: PUSH
16543: LD_INT 1
16545: ARRAY
16546: PPUSH
16547: LD_VAR 0 2
16551: PPUSH
16552: CALL_OW 259
16556: ST_TO_ADDR
// if s1 = 1 then
16557: LD_VAR 0 2
16561: PUSH
16562: LD_INT 1
16564: EQUAL
16565: IFFALSE 16585
// s2 := rand ( 2 , 4 ) else
16567: LD_ADDR_VAR 0 3
16571: PUSH
16572: LD_INT 2
16574: PPUSH
16575: LD_INT 4
16577: PPUSH
16578: CALL_OW 12
16582: ST_TO_ADDR
16583: GO 16593
// s2 := 1 ;
16585: LD_ADDR_VAR 0 3
16589: PUSH
16590: LD_INT 1
16592: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
16593: LD_ADDR_VAR 0 5
16597: PUSH
16598: LD_VAR 0 6
16602: PUSH
16603: LD_INT 1
16605: ARRAY
16606: PPUSH
16607: LD_VAR 0 3
16611: PPUSH
16612: CALL_OW 259
16616: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
16617: LD_VAR 0 6
16621: PUSH
16622: LD_INT 1
16624: ARRAY
16625: PPUSH
16626: LD_VAR 0 2
16630: PPUSH
16631: LD_VAR 0 5
16635: PPUSH
16636: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
16640: LD_VAR 0 6
16644: PUSH
16645: LD_INT 1
16647: ARRAY
16648: PPUSH
16649: LD_VAR 0 3
16653: PPUSH
16654: LD_VAR 0 4
16658: PPUSH
16659: CALL_OW 237
// end ;
16663: PPOPN 6
16665: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
16666: LD_EXP 24
16670: PUSH
16671: LD_EXP 71
16675: AND
16676: IFFALSE 16755
16678: GO 16680
16680: DISABLE
16681: LD_INT 0
16683: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
16684: LD_ADDR_VAR 0 1
16688: PUSH
16689: LD_INT 22
16691: PUSH
16692: LD_OWVAR 2
16696: PUSH
16697: EMPTY
16698: LIST
16699: LIST
16700: PUSH
16701: LD_INT 30
16703: PUSH
16704: LD_INT 3
16706: PUSH
16707: EMPTY
16708: LIST
16709: LIST
16710: PUSH
16711: EMPTY
16712: LIST
16713: LIST
16714: PPUSH
16715: CALL_OW 69
16719: ST_TO_ADDR
// if not tmp then
16720: LD_VAR 0 1
16724: NOT
16725: IFFALSE 16729
// exit ;
16727: GO 16755
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16729: LD_VAR 0 1
16733: PUSH
16734: LD_INT 1
16736: PPUSH
16737: LD_VAR 0 1
16741: PPUSH
16742: CALL_OW 12
16746: ARRAY
16747: PPUSH
16748: LD_INT 1
16750: PPUSH
16751: CALL_OW 234
// end ;
16755: PPOPN 1
16757: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
16758: LD_EXP 24
16762: PUSH
16763: LD_EXP 72
16767: AND
16768: IFFALSE 16880
16770: GO 16772
16772: DISABLE
16773: LD_INT 0
16775: PPUSH
16776: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
16777: LD_ADDR_VAR 0 2
16781: PUSH
16782: LD_INT 22
16784: PUSH
16785: LD_OWVAR 2
16789: PUSH
16790: EMPTY
16791: LIST
16792: LIST
16793: PUSH
16794: LD_INT 2
16796: PUSH
16797: LD_INT 30
16799: PUSH
16800: LD_INT 27
16802: PUSH
16803: EMPTY
16804: LIST
16805: LIST
16806: PUSH
16807: LD_INT 30
16809: PUSH
16810: LD_INT 26
16812: PUSH
16813: EMPTY
16814: LIST
16815: LIST
16816: PUSH
16817: LD_INT 30
16819: PUSH
16820: LD_INT 28
16822: PUSH
16823: EMPTY
16824: LIST
16825: LIST
16826: PUSH
16827: EMPTY
16828: LIST
16829: LIST
16830: LIST
16831: LIST
16832: PUSH
16833: EMPTY
16834: LIST
16835: LIST
16836: PPUSH
16837: CALL_OW 69
16841: ST_TO_ADDR
// if not tmp then
16842: LD_VAR 0 2
16846: NOT
16847: IFFALSE 16851
// exit ;
16849: GO 16880
// for i in tmp do
16851: LD_ADDR_VAR 0 1
16855: PUSH
16856: LD_VAR 0 2
16860: PUSH
16861: FOR_IN
16862: IFFALSE 16878
// SetLives ( i , 1 ) ;
16864: LD_VAR 0 1
16868: PPUSH
16869: LD_INT 1
16871: PPUSH
16872: CALL_OW 234
16876: GO 16861
16878: POP
16879: POP
// end ;
16880: PPOPN 2
16882: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
16883: LD_EXP 24
16887: PUSH
16888: LD_EXP 73
16892: AND
16893: IFFALSE 17180
16895: GO 16897
16897: DISABLE
16898: LD_INT 0
16900: PPUSH
16901: PPUSH
16902: PPUSH
// begin i := rand ( 1 , 7 ) ;
16903: LD_ADDR_VAR 0 1
16907: PUSH
16908: LD_INT 1
16910: PPUSH
16911: LD_INT 7
16913: PPUSH
16914: CALL_OW 12
16918: ST_TO_ADDR
// case i of 1 :
16919: LD_VAR 0 1
16923: PUSH
16924: LD_INT 1
16926: DOUBLE
16927: EQUAL
16928: IFTRUE 16932
16930: GO 16942
16932: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
16933: LD_STRING earthquake(getX(game), 0, 32)
16935: PPUSH
16936: CALL_OW 559
16940: GO 17180
16942: LD_INT 2
16944: DOUBLE
16945: EQUAL
16946: IFTRUE 16950
16948: GO 16964
16950: POP
// begin ToLua ( displayStucuk(); ) ;
16951: LD_STRING displayStucuk();
16953: PPUSH
16954: CALL_OW 559
// ResetFog ;
16958: CALL_OW 335
// end ; 3 :
16962: GO 17180
16964: LD_INT 3
16966: DOUBLE
16967: EQUAL
16968: IFTRUE 16972
16970: GO 17076
16972: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16973: LD_ADDR_VAR 0 2
16977: PUSH
16978: LD_INT 22
16980: PUSH
16981: LD_OWVAR 2
16985: PUSH
16986: EMPTY
16987: LIST
16988: LIST
16989: PUSH
16990: LD_INT 25
16992: PUSH
16993: LD_INT 1
16995: PUSH
16996: EMPTY
16997: LIST
16998: LIST
16999: PUSH
17000: EMPTY
17001: LIST
17002: LIST
17003: PPUSH
17004: CALL_OW 69
17008: ST_TO_ADDR
// if not tmp then
17009: LD_VAR 0 2
17013: NOT
17014: IFFALSE 17018
// exit ;
17016: GO 17180
// un := tmp [ rand ( 1 , tmp ) ] ;
17018: LD_ADDR_VAR 0 3
17022: PUSH
17023: LD_VAR 0 2
17027: PUSH
17028: LD_INT 1
17030: PPUSH
17031: LD_VAR 0 2
17035: PPUSH
17036: CALL_OW 12
17040: ARRAY
17041: ST_TO_ADDR
// if Crawls ( un ) then
17042: LD_VAR 0 3
17046: PPUSH
17047: CALL_OW 318
17051: IFFALSE 17062
// ComWalk ( un ) ;
17053: LD_VAR 0 3
17057: PPUSH
17058: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17062: LD_VAR 0 3
17066: PPUSH
17067: LD_INT 8
17069: PPUSH
17070: CALL_OW 336
// end ; 4 :
17074: GO 17180
17076: LD_INT 4
17078: DOUBLE
17079: EQUAL
17080: IFTRUE 17084
17082: GO 17158
17084: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17085: LD_ADDR_VAR 0 2
17089: PUSH
17090: LD_INT 22
17092: PUSH
17093: LD_OWVAR 2
17097: PUSH
17098: EMPTY
17099: LIST
17100: LIST
17101: PUSH
17102: LD_INT 30
17104: PUSH
17105: LD_INT 29
17107: PUSH
17108: EMPTY
17109: LIST
17110: LIST
17111: PUSH
17112: EMPTY
17113: LIST
17114: LIST
17115: PPUSH
17116: CALL_OW 69
17120: ST_TO_ADDR
// if not tmp then
17121: LD_VAR 0 2
17125: NOT
17126: IFFALSE 17130
// exit ;
17128: GO 17180
// CenterNowOnUnits ( tmp [ 1 ] ) ;
17130: LD_VAR 0 2
17134: PUSH
17135: LD_INT 1
17137: ARRAY
17138: PPUSH
17139: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
17143: LD_VAR 0 2
17147: PUSH
17148: LD_INT 1
17150: ARRAY
17151: PPUSH
17152: CALL_OW 65
// end ; 5 .. 7 :
17156: GO 17180
17158: LD_INT 5
17160: DOUBLE
17161: GREATEREQUAL
17162: IFFALSE 17170
17164: LD_INT 7
17166: DOUBLE
17167: LESSEQUAL
17168: IFTRUE 17172
17170: GO 17179
17172: POP
// StreamSibBomb ; end ;
17173: CALL 13417 0 0
17177: GO 17180
17179: POP
// end ;
17180: PPOPN 3
17182: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
17183: LD_EXP 24
17187: PUSH
17188: LD_EXP 74
17192: AND
17193: IFFALSE 17349
17195: GO 17197
17197: DISABLE
17198: LD_INT 0
17200: PPUSH
17201: PPUSH
17202: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
17203: LD_ADDR_VAR 0 2
17207: PUSH
17208: LD_INT 81
17210: PUSH
17211: LD_OWVAR 2
17215: PUSH
17216: EMPTY
17217: LIST
17218: LIST
17219: PUSH
17220: LD_INT 2
17222: PUSH
17223: LD_INT 21
17225: PUSH
17226: LD_INT 1
17228: PUSH
17229: EMPTY
17230: LIST
17231: LIST
17232: PUSH
17233: LD_INT 21
17235: PUSH
17236: LD_INT 2
17238: PUSH
17239: EMPTY
17240: LIST
17241: LIST
17242: PUSH
17243: EMPTY
17244: LIST
17245: LIST
17246: LIST
17247: PUSH
17248: EMPTY
17249: LIST
17250: LIST
17251: PPUSH
17252: CALL_OW 69
17256: ST_TO_ADDR
// if not tmp then
17257: LD_VAR 0 2
17261: NOT
17262: IFFALSE 17266
// exit ;
17264: GO 17349
// p := 0 ;
17266: LD_ADDR_VAR 0 3
17270: PUSH
17271: LD_INT 0
17273: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17274: LD_INT 35
17276: PPUSH
17277: CALL_OW 67
// p := p + 1 ;
17281: LD_ADDR_VAR 0 3
17285: PUSH
17286: LD_VAR 0 3
17290: PUSH
17291: LD_INT 1
17293: PLUS
17294: ST_TO_ADDR
// for i in tmp do
17295: LD_ADDR_VAR 0 1
17299: PUSH
17300: LD_VAR 0 2
17304: PUSH
17305: FOR_IN
17306: IFFALSE 17337
// if GetLives ( i ) < 1000 then
17308: LD_VAR 0 1
17312: PPUSH
17313: CALL_OW 256
17317: PUSH
17318: LD_INT 1000
17320: LESS
17321: IFFALSE 17335
// SetLives ( i , 1000 ) ;
17323: LD_VAR 0 1
17327: PPUSH
17328: LD_INT 1000
17330: PPUSH
17331: CALL_OW 234
17335: GO 17305
17337: POP
17338: POP
// until p > 20 ;
17339: LD_VAR 0 3
17343: PUSH
17344: LD_INT 20
17346: GREATER
17347: IFFALSE 17274
// end ;
17349: PPOPN 3
17351: END
// every 0 0$1 trigger StreamModeActive and sTime do
17352: LD_EXP 24
17356: PUSH
17357: LD_EXP 75
17361: AND
17362: IFFALSE 17397
17364: GO 17366
17366: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
17367: LD_INT 28
17369: PPUSH
17370: LD_OWVAR 2
17374: PPUSH
17375: LD_INT 2
17377: PPUSH
17378: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
17382: LD_INT 30
17384: PPUSH
17385: LD_OWVAR 2
17389: PPUSH
17390: LD_INT 2
17392: PPUSH
17393: CALL_OW 322
// end ;
17397: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
17398: LD_EXP 24
17402: PUSH
17403: LD_EXP 76
17407: AND
17408: IFFALSE 17529
17410: GO 17412
17412: DISABLE
17413: LD_INT 0
17415: PPUSH
17416: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17417: LD_ADDR_VAR 0 2
17421: PUSH
17422: LD_INT 22
17424: PUSH
17425: LD_OWVAR 2
17429: PUSH
17430: EMPTY
17431: LIST
17432: LIST
17433: PUSH
17434: LD_INT 21
17436: PUSH
17437: LD_INT 1
17439: PUSH
17440: EMPTY
17441: LIST
17442: LIST
17443: PUSH
17444: LD_INT 3
17446: PUSH
17447: LD_INT 23
17449: PUSH
17450: LD_INT 0
17452: PUSH
17453: EMPTY
17454: LIST
17455: LIST
17456: PUSH
17457: EMPTY
17458: LIST
17459: LIST
17460: PUSH
17461: EMPTY
17462: LIST
17463: LIST
17464: LIST
17465: PPUSH
17466: CALL_OW 69
17470: ST_TO_ADDR
// if not tmp then
17471: LD_VAR 0 2
17475: NOT
17476: IFFALSE 17480
// exit ;
17478: GO 17529
// for i in tmp do
17480: LD_ADDR_VAR 0 1
17484: PUSH
17485: LD_VAR 0 2
17489: PUSH
17490: FOR_IN
17491: IFFALSE 17527
// begin if Crawls ( i ) then
17493: LD_VAR 0 1
17497: PPUSH
17498: CALL_OW 318
17502: IFFALSE 17513
// ComWalk ( i ) ;
17504: LD_VAR 0 1
17508: PPUSH
17509: CALL_OW 138
// SetClass ( i , 2 ) ;
17513: LD_VAR 0 1
17517: PPUSH
17518: LD_INT 2
17520: PPUSH
17521: CALL_OW 336
// end ;
17525: GO 17490
17527: POP
17528: POP
// end ;
17529: PPOPN 2
17531: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
17532: LD_EXP 24
17536: PUSH
17537: LD_EXP 77
17541: AND
17542: IFFALSE 17830
17544: GO 17546
17546: DISABLE
17547: LD_INT 0
17549: PPUSH
17550: PPUSH
17551: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
17552: LD_OWVAR 2
17556: PPUSH
17557: LD_INT 9
17559: PPUSH
17560: LD_INT 1
17562: PPUSH
17563: LD_INT 1
17565: PPUSH
17566: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
17570: LD_INT 9
17572: PPUSH
17573: LD_OWVAR 2
17577: PPUSH
17578: CALL_OW 343
// uc_side := 9 ;
17582: LD_ADDR_OWVAR 20
17586: PUSH
17587: LD_INT 9
17589: ST_TO_ADDR
// uc_nation := 2 ;
17590: LD_ADDR_OWVAR 21
17594: PUSH
17595: LD_INT 2
17597: ST_TO_ADDR
// hc_name := Dark Warrior ;
17598: LD_ADDR_OWVAR 26
17602: PUSH
17603: LD_STRING Dark Warrior
17605: ST_TO_ADDR
// hc_gallery :=  ;
17606: LD_ADDR_OWVAR 33
17610: PUSH
17611: LD_STRING 
17613: ST_TO_ADDR
// hc_noskilllimit := true ;
17614: LD_ADDR_OWVAR 76
17618: PUSH
17619: LD_INT 1
17621: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
17622: LD_ADDR_OWVAR 31
17626: PUSH
17627: LD_INT 30
17629: PUSH
17630: LD_INT 30
17632: PUSH
17633: LD_INT 30
17635: PUSH
17636: LD_INT 30
17638: PUSH
17639: EMPTY
17640: LIST
17641: LIST
17642: LIST
17643: LIST
17644: ST_TO_ADDR
// un := CreateHuman ;
17645: LD_ADDR_VAR 0 3
17649: PUSH
17650: CALL_OW 44
17654: ST_TO_ADDR
// hc_noskilllimit := false ;
17655: LD_ADDR_OWVAR 76
17659: PUSH
17660: LD_INT 0
17662: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17663: LD_VAR 0 3
17667: PPUSH
17668: LD_INT 1
17670: PPUSH
17671: CALL_OW 51
// ToLua ( playRanger() ) ;
17675: LD_STRING playRanger()
17677: PPUSH
17678: CALL_OW 559
// p := 0 ;
17682: LD_ADDR_VAR 0 2
17686: PUSH
17687: LD_INT 0
17689: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17690: LD_INT 35
17692: PPUSH
17693: CALL_OW 67
// p := p + 1 ;
17697: LD_ADDR_VAR 0 2
17701: PUSH
17702: LD_VAR 0 2
17706: PUSH
17707: LD_INT 1
17709: PLUS
17710: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
17711: LD_VAR 0 3
17715: PPUSH
17716: CALL_OW 256
17720: PUSH
17721: LD_INT 1000
17723: LESS
17724: IFFALSE 17738
// SetLives ( un , 1000 ) ;
17726: LD_VAR 0 3
17730: PPUSH
17731: LD_INT 1000
17733: PPUSH
17734: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
17738: LD_VAR 0 3
17742: PPUSH
17743: LD_INT 81
17745: PUSH
17746: LD_OWVAR 2
17750: PUSH
17751: EMPTY
17752: LIST
17753: LIST
17754: PUSH
17755: LD_INT 91
17757: PUSH
17758: LD_VAR 0 3
17762: PUSH
17763: LD_INT 30
17765: PUSH
17766: EMPTY
17767: LIST
17768: LIST
17769: LIST
17770: PUSH
17771: EMPTY
17772: LIST
17773: LIST
17774: PPUSH
17775: CALL_OW 69
17779: PPUSH
17780: LD_VAR 0 3
17784: PPUSH
17785: CALL_OW 74
17789: PPUSH
17790: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
17794: LD_VAR 0 2
17798: PUSH
17799: LD_INT 80
17801: GREATER
17802: PUSH
17803: LD_VAR 0 3
17807: PPUSH
17808: CALL_OW 301
17812: OR
17813: IFFALSE 17690
// if un then
17815: LD_VAR 0 3
17819: IFFALSE 17830
// RemoveUnit ( un ) ;
17821: LD_VAR 0 3
17825: PPUSH
17826: CALL_OW 64
// end ;
17830: PPOPN 3
17832: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
17833: LD_EXP 78
17837: IFFALSE 17953
17839: GO 17841
17841: DISABLE
17842: LD_INT 0
17844: PPUSH
17845: PPUSH
17846: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17847: LD_ADDR_VAR 0 2
17851: PUSH
17852: LD_INT 81
17854: PUSH
17855: LD_OWVAR 2
17859: PUSH
17860: EMPTY
17861: LIST
17862: LIST
17863: PUSH
17864: LD_INT 21
17866: PUSH
17867: LD_INT 1
17869: PUSH
17870: EMPTY
17871: LIST
17872: LIST
17873: PUSH
17874: EMPTY
17875: LIST
17876: LIST
17877: PPUSH
17878: CALL_OW 69
17882: ST_TO_ADDR
// ToLua ( playComputer() ) ;
17883: LD_STRING playComputer()
17885: PPUSH
17886: CALL_OW 559
// if not tmp then
17890: LD_VAR 0 2
17894: NOT
17895: IFFALSE 17899
// exit ;
17897: GO 17953
// for i in tmp do
17899: LD_ADDR_VAR 0 1
17903: PUSH
17904: LD_VAR 0 2
17908: PUSH
17909: FOR_IN
17910: IFFALSE 17951
// for j := 1 to 4 do
17912: LD_ADDR_VAR 0 3
17916: PUSH
17917: DOUBLE
17918: LD_INT 1
17920: DEC
17921: ST_TO_ADDR
17922: LD_INT 4
17924: PUSH
17925: FOR_TO
17926: IFFALSE 17947
// SetSkill ( i , j , 10 ) ;
17928: LD_VAR 0 1
17932: PPUSH
17933: LD_VAR 0 3
17937: PPUSH
17938: LD_INT 10
17940: PPUSH
17941: CALL_OW 237
17945: GO 17925
17947: POP
17948: POP
17949: GO 17909
17951: POP
17952: POP
// end ;
17953: PPOPN 3
17955: END
// every 0 0$1 trigger s30 do var i , tmp ;
17956: LD_EXP 79
17960: IFFALSE 18029
17962: GO 17964
17964: DISABLE
17965: LD_INT 0
17967: PPUSH
17968: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17969: LD_ADDR_VAR 0 2
17973: PUSH
17974: LD_INT 22
17976: PUSH
17977: LD_OWVAR 2
17981: PUSH
17982: EMPTY
17983: LIST
17984: LIST
17985: PPUSH
17986: CALL_OW 69
17990: ST_TO_ADDR
// if not tmp then
17991: LD_VAR 0 2
17995: NOT
17996: IFFALSE 18000
// exit ;
17998: GO 18029
// for i in tmp do
18000: LD_ADDR_VAR 0 1
18004: PUSH
18005: LD_VAR 0 2
18009: PUSH
18010: FOR_IN
18011: IFFALSE 18027
// SetLives ( i , 300 ) ;
18013: LD_VAR 0 1
18017: PPUSH
18018: LD_INT 300
18020: PPUSH
18021: CALL_OW 234
18025: GO 18010
18027: POP
18028: POP
// end ;
18029: PPOPN 2
18031: END
// every 0 0$1 trigger s60 do var i , tmp ;
18032: LD_EXP 80
18036: IFFALSE 18105
18038: GO 18040
18040: DISABLE
18041: LD_INT 0
18043: PPUSH
18044: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18045: LD_ADDR_VAR 0 2
18049: PUSH
18050: LD_INT 22
18052: PUSH
18053: LD_OWVAR 2
18057: PUSH
18058: EMPTY
18059: LIST
18060: LIST
18061: PPUSH
18062: CALL_OW 69
18066: ST_TO_ADDR
// if not tmp then
18067: LD_VAR 0 2
18071: NOT
18072: IFFALSE 18076
// exit ;
18074: GO 18105
// for i in tmp do
18076: LD_ADDR_VAR 0 1
18080: PUSH
18081: LD_VAR 0 2
18085: PUSH
18086: FOR_IN
18087: IFFALSE 18103
// SetLives ( i , 600 ) ;
18089: LD_VAR 0 1
18093: PPUSH
18094: LD_INT 600
18096: PPUSH
18097: CALL_OW 234
18101: GO 18086
18103: POP
18104: POP
// end ;
18105: PPOPN 2
18107: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18108: LD_INT 0
18110: PPUSH
// case cmd of 301 :
18111: LD_VAR 0 1
18115: PUSH
18116: LD_INT 301
18118: DOUBLE
18119: EQUAL
18120: IFTRUE 18124
18122: GO 18156
18124: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
18125: LD_VAR 0 6
18129: PPUSH
18130: LD_VAR 0 7
18134: PPUSH
18135: LD_VAR 0 8
18139: PPUSH
18140: LD_VAR 0 4
18144: PPUSH
18145: LD_VAR 0 5
18149: PPUSH
18150: CALL 19357 0 5
18154: GO 18277
18156: LD_INT 302
18158: DOUBLE
18159: EQUAL
18160: IFTRUE 18164
18162: GO 18201
18164: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
18165: LD_VAR 0 6
18169: PPUSH
18170: LD_VAR 0 7
18174: PPUSH
18175: LD_VAR 0 8
18179: PPUSH
18180: LD_VAR 0 9
18184: PPUSH
18185: LD_VAR 0 4
18189: PPUSH
18190: LD_VAR 0 5
18194: PPUSH
18195: CALL 19448 0 6
18199: GO 18277
18201: LD_INT 303
18203: DOUBLE
18204: EQUAL
18205: IFTRUE 18209
18207: GO 18246
18209: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
18210: LD_VAR 0 6
18214: PPUSH
18215: LD_VAR 0 7
18219: PPUSH
18220: LD_VAR 0 8
18224: PPUSH
18225: LD_VAR 0 9
18229: PPUSH
18230: LD_VAR 0 4
18234: PPUSH
18235: LD_VAR 0 5
18239: PPUSH
18240: CALL 18282 0 6
18244: GO 18277
18246: LD_INT 304
18248: DOUBLE
18249: EQUAL
18250: IFTRUE 18254
18252: GO 18276
18254: POP
// hHackTeleport ( unit , x , y ) ; end ;
18255: LD_VAR 0 2
18259: PPUSH
18260: LD_VAR 0 4
18264: PPUSH
18265: LD_VAR 0 5
18269: PPUSH
18270: CALL 20041 0 3
18274: GO 18277
18276: POP
// end ;
18277: LD_VAR 0 12
18281: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
18282: LD_INT 0
18284: PPUSH
18285: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
18286: LD_VAR 0 1
18290: PUSH
18291: LD_INT 1
18293: LESS
18294: PUSH
18295: LD_VAR 0 1
18299: PUSH
18300: LD_INT 3
18302: GREATER
18303: OR
18304: PUSH
18305: LD_VAR 0 5
18309: PPUSH
18310: LD_VAR 0 6
18314: PPUSH
18315: CALL_OW 428
18319: OR
18320: IFFALSE 18324
// exit ;
18322: GO 19044
// uc_side := your_side ;
18324: LD_ADDR_OWVAR 20
18328: PUSH
18329: LD_OWVAR 2
18333: ST_TO_ADDR
// uc_nation := nation ;
18334: LD_ADDR_OWVAR 21
18338: PUSH
18339: LD_VAR 0 1
18343: ST_TO_ADDR
// bc_level = 1 ;
18344: LD_ADDR_OWVAR 43
18348: PUSH
18349: LD_INT 1
18351: ST_TO_ADDR
// case btype of 1 :
18352: LD_VAR 0 2
18356: PUSH
18357: LD_INT 1
18359: DOUBLE
18360: EQUAL
18361: IFTRUE 18365
18363: GO 18376
18365: POP
// bc_type := b_depot ; 2 :
18366: LD_ADDR_OWVAR 42
18370: PUSH
18371: LD_INT 0
18373: ST_TO_ADDR
18374: GO 18988
18376: LD_INT 2
18378: DOUBLE
18379: EQUAL
18380: IFTRUE 18384
18382: GO 18395
18384: POP
// bc_type := b_warehouse ; 3 :
18385: LD_ADDR_OWVAR 42
18389: PUSH
18390: LD_INT 1
18392: ST_TO_ADDR
18393: GO 18988
18395: LD_INT 3
18397: DOUBLE
18398: EQUAL
18399: IFTRUE 18403
18401: GO 18414
18403: POP
// bc_type := b_lab ; 4 .. 9 :
18404: LD_ADDR_OWVAR 42
18408: PUSH
18409: LD_INT 6
18411: ST_TO_ADDR
18412: GO 18988
18414: LD_INT 4
18416: DOUBLE
18417: GREATEREQUAL
18418: IFFALSE 18426
18420: LD_INT 9
18422: DOUBLE
18423: LESSEQUAL
18424: IFTRUE 18428
18426: GO 18480
18428: POP
// begin bc_type := b_lab_half ;
18429: LD_ADDR_OWVAR 42
18433: PUSH
18434: LD_INT 7
18436: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
18437: LD_ADDR_OWVAR 44
18441: PUSH
18442: LD_INT 10
18444: PUSH
18445: LD_INT 11
18447: PUSH
18448: LD_INT 12
18450: PUSH
18451: LD_INT 15
18453: PUSH
18454: LD_INT 14
18456: PUSH
18457: LD_INT 13
18459: PUSH
18460: EMPTY
18461: LIST
18462: LIST
18463: LIST
18464: LIST
18465: LIST
18466: LIST
18467: PUSH
18468: LD_VAR 0 2
18472: PUSH
18473: LD_INT 3
18475: MINUS
18476: ARRAY
18477: ST_TO_ADDR
// end ; 10 .. 13 :
18478: GO 18988
18480: LD_INT 10
18482: DOUBLE
18483: GREATEREQUAL
18484: IFFALSE 18492
18486: LD_INT 13
18488: DOUBLE
18489: LESSEQUAL
18490: IFTRUE 18494
18492: GO 18571
18494: POP
// begin bc_type := b_lab_full ;
18495: LD_ADDR_OWVAR 42
18499: PUSH
18500: LD_INT 8
18502: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
18503: LD_ADDR_OWVAR 44
18507: PUSH
18508: LD_INT 10
18510: PUSH
18511: LD_INT 12
18513: PUSH
18514: LD_INT 14
18516: PUSH
18517: LD_INT 13
18519: PUSH
18520: EMPTY
18521: LIST
18522: LIST
18523: LIST
18524: LIST
18525: PUSH
18526: LD_VAR 0 2
18530: PUSH
18531: LD_INT 9
18533: MINUS
18534: ARRAY
18535: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
18536: LD_ADDR_OWVAR 45
18540: PUSH
18541: LD_INT 11
18543: PUSH
18544: LD_INT 15
18546: PUSH
18547: LD_INT 12
18549: PUSH
18550: LD_INT 15
18552: PUSH
18553: EMPTY
18554: LIST
18555: LIST
18556: LIST
18557: LIST
18558: PUSH
18559: LD_VAR 0 2
18563: PUSH
18564: LD_INT 9
18566: MINUS
18567: ARRAY
18568: ST_TO_ADDR
// end ; 14 :
18569: GO 18988
18571: LD_INT 14
18573: DOUBLE
18574: EQUAL
18575: IFTRUE 18579
18577: GO 18590
18579: POP
// bc_type := b_workshop ; 15 :
18580: LD_ADDR_OWVAR 42
18584: PUSH
18585: LD_INT 2
18587: ST_TO_ADDR
18588: GO 18988
18590: LD_INT 15
18592: DOUBLE
18593: EQUAL
18594: IFTRUE 18598
18596: GO 18609
18598: POP
// bc_type := b_factory ; 16 :
18599: LD_ADDR_OWVAR 42
18603: PUSH
18604: LD_INT 3
18606: ST_TO_ADDR
18607: GO 18988
18609: LD_INT 16
18611: DOUBLE
18612: EQUAL
18613: IFTRUE 18617
18615: GO 18628
18617: POP
// bc_type := b_ext_gun ; 17 :
18618: LD_ADDR_OWVAR 42
18622: PUSH
18623: LD_INT 17
18625: ST_TO_ADDR
18626: GO 18988
18628: LD_INT 17
18630: DOUBLE
18631: EQUAL
18632: IFTRUE 18636
18634: GO 18664
18636: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
18637: LD_ADDR_OWVAR 42
18641: PUSH
18642: LD_INT 19
18644: PUSH
18645: LD_INT 23
18647: PUSH
18648: LD_INT 19
18650: PUSH
18651: EMPTY
18652: LIST
18653: LIST
18654: LIST
18655: PUSH
18656: LD_VAR 0 1
18660: ARRAY
18661: ST_TO_ADDR
18662: GO 18988
18664: LD_INT 18
18666: DOUBLE
18667: EQUAL
18668: IFTRUE 18672
18670: GO 18683
18672: POP
// bc_type := b_ext_radar ; 19 :
18673: LD_ADDR_OWVAR 42
18677: PUSH
18678: LD_INT 20
18680: ST_TO_ADDR
18681: GO 18988
18683: LD_INT 19
18685: DOUBLE
18686: EQUAL
18687: IFTRUE 18691
18689: GO 18702
18691: POP
// bc_type := b_ext_radio ; 20 :
18692: LD_ADDR_OWVAR 42
18696: PUSH
18697: LD_INT 22
18699: ST_TO_ADDR
18700: GO 18988
18702: LD_INT 20
18704: DOUBLE
18705: EQUAL
18706: IFTRUE 18710
18708: GO 18721
18710: POP
// bc_type := b_ext_siberium ; 21 :
18711: LD_ADDR_OWVAR 42
18715: PUSH
18716: LD_INT 21
18718: ST_TO_ADDR
18719: GO 18988
18721: LD_INT 21
18723: DOUBLE
18724: EQUAL
18725: IFTRUE 18729
18727: GO 18740
18729: POP
// bc_type := b_ext_computer ; 22 :
18730: LD_ADDR_OWVAR 42
18734: PUSH
18735: LD_INT 24
18737: ST_TO_ADDR
18738: GO 18988
18740: LD_INT 22
18742: DOUBLE
18743: EQUAL
18744: IFTRUE 18748
18746: GO 18759
18748: POP
// bc_type := b_ext_track ; 23 :
18749: LD_ADDR_OWVAR 42
18753: PUSH
18754: LD_INT 16
18756: ST_TO_ADDR
18757: GO 18988
18759: LD_INT 23
18761: DOUBLE
18762: EQUAL
18763: IFTRUE 18767
18765: GO 18778
18767: POP
// bc_type := b_ext_laser ; 24 :
18768: LD_ADDR_OWVAR 42
18772: PUSH
18773: LD_INT 25
18775: ST_TO_ADDR
18776: GO 18988
18778: LD_INT 24
18780: DOUBLE
18781: EQUAL
18782: IFTRUE 18786
18784: GO 18797
18786: POP
// bc_type := b_control_tower ; 25 :
18787: LD_ADDR_OWVAR 42
18791: PUSH
18792: LD_INT 36
18794: ST_TO_ADDR
18795: GO 18988
18797: LD_INT 25
18799: DOUBLE
18800: EQUAL
18801: IFTRUE 18805
18803: GO 18816
18805: POP
// bc_type := b_breastwork ; 26 :
18806: LD_ADDR_OWVAR 42
18810: PUSH
18811: LD_INT 31
18813: ST_TO_ADDR
18814: GO 18988
18816: LD_INT 26
18818: DOUBLE
18819: EQUAL
18820: IFTRUE 18824
18822: GO 18835
18824: POP
// bc_type := b_bunker ; 27 :
18825: LD_ADDR_OWVAR 42
18829: PUSH
18830: LD_INT 32
18832: ST_TO_ADDR
18833: GO 18988
18835: LD_INT 27
18837: DOUBLE
18838: EQUAL
18839: IFTRUE 18843
18841: GO 18854
18843: POP
// bc_type := b_turret ; 28 :
18844: LD_ADDR_OWVAR 42
18848: PUSH
18849: LD_INT 33
18851: ST_TO_ADDR
18852: GO 18988
18854: LD_INT 28
18856: DOUBLE
18857: EQUAL
18858: IFTRUE 18862
18860: GO 18873
18862: POP
// bc_type := b_armoury ; 29 :
18863: LD_ADDR_OWVAR 42
18867: PUSH
18868: LD_INT 4
18870: ST_TO_ADDR
18871: GO 18988
18873: LD_INT 29
18875: DOUBLE
18876: EQUAL
18877: IFTRUE 18881
18879: GO 18892
18881: POP
// bc_type := b_barracks ; 30 :
18882: LD_ADDR_OWVAR 42
18886: PUSH
18887: LD_INT 5
18889: ST_TO_ADDR
18890: GO 18988
18892: LD_INT 30
18894: DOUBLE
18895: EQUAL
18896: IFTRUE 18900
18898: GO 18911
18900: POP
// bc_type := b_solar_power ; 31 :
18901: LD_ADDR_OWVAR 42
18905: PUSH
18906: LD_INT 27
18908: ST_TO_ADDR
18909: GO 18988
18911: LD_INT 31
18913: DOUBLE
18914: EQUAL
18915: IFTRUE 18919
18917: GO 18930
18919: POP
// bc_type := b_oil_power ; 32 :
18920: LD_ADDR_OWVAR 42
18924: PUSH
18925: LD_INT 26
18927: ST_TO_ADDR
18928: GO 18988
18930: LD_INT 32
18932: DOUBLE
18933: EQUAL
18934: IFTRUE 18938
18936: GO 18949
18938: POP
// bc_type := b_siberite_power ; 33 :
18939: LD_ADDR_OWVAR 42
18943: PUSH
18944: LD_INT 28
18946: ST_TO_ADDR
18947: GO 18988
18949: LD_INT 33
18951: DOUBLE
18952: EQUAL
18953: IFTRUE 18957
18955: GO 18968
18957: POP
// bc_type := b_oil_mine ; 34 :
18958: LD_ADDR_OWVAR 42
18962: PUSH
18963: LD_INT 29
18965: ST_TO_ADDR
18966: GO 18988
18968: LD_INT 34
18970: DOUBLE
18971: EQUAL
18972: IFTRUE 18976
18974: GO 18987
18976: POP
// bc_type := b_siberite_mine ; end ;
18977: LD_ADDR_OWVAR 42
18981: PUSH
18982: LD_INT 30
18984: ST_TO_ADDR
18985: GO 18988
18987: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
18988: LD_ADDR_VAR 0 8
18992: PUSH
18993: LD_VAR 0 5
18997: PPUSH
18998: LD_VAR 0 6
19002: PPUSH
19003: LD_VAR 0 3
19007: PPUSH
19008: CALL_OW 47
19012: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
19013: LD_OWVAR 42
19017: PUSH
19018: LD_INT 32
19020: PUSH
19021: LD_INT 33
19023: PUSH
19024: EMPTY
19025: LIST
19026: LIST
19027: IN
19028: IFFALSE 19044
// PlaceWeaponTurret ( b , weapon ) ;
19030: LD_VAR 0 8
19034: PPUSH
19035: LD_VAR 0 4
19039: PPUSH
19040: CALL_OW 431
// end ;
19044: LD_VAR 0 7
19048: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
19049: LD_INT 0
19051: PPUSH
19052: PPUSH
19053: PPUSH
19054: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19055: LD_ADDR_VAR 0 4
19059: PUSH
19060: LD_INT 22
19062: PUSH
19063: LD_OWVAR 2
19067: PUSH
19068: EMPTY
19069: LIST
19070: LIST
19071: PUSH
19072: LD_INT 2
19074: PUSH
19075: LD_INT 30
19077: PUSH
19078: LD_INT 0
19080: PUSH
19081: EMPTY
19082: LIST
19083: LIST
19084: PUSH
19085: LD_INT 30
19087: PUSH
19088: LD_INT 1
19090: PUSH
19091: EMPTY
19092: LIST
19093: LIST
19094: PUSH
19095: EMPTY
19096: LIST
19097: LIST
19098: LIST
19099: PUSH
19100: EMPTY
19101: LIST
19102: LIST
19103: PPUSH
19104: CALL_OW 69
19108: ST_TO_ADDR
// if not tmp then
19109: LD_VAR 0 4
19113: NOT
19114: IFFALSE 19118
// exit ;
19116: GO 19177
// for i in tmp do
19118: LD_ADDR_VAR 0 2
19122: PUSH
19123: LD_VAR 0 4
19127: PUSH
19128: FOR_IN
19129: IFFALSE 19175
// for j = 1 to 3 do
19131: LD_ADDR_VAR 0 3
19135: PUSH
19136: DOUBLE
19137: LD_INT 1
19139: DEC
19140: ST_TO_ADDR
19141: LD_INT 3
19143: PUSH
19144: FOR_TO
19145: IFFALSE 19171
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
19147: LD_VAR 0 2
19151: PPUSH
19152: CALL_OW 274
19156: PPUSH
19157: LD_VAR 0 3
19161: PPUSH
19162: LD_INT 99999
19164: PPUSH
19165: CALL_OW 277
19169: GO 19144
19171: POP
19172: POP
19173: GO 19128
19175: POP
19176: POP
// end ;
19177: LD_VAR 0 1
19181: RET
// export function hHackSetLevel10 ; var i , j ; begin
19182: LD_INT 0
19184: PPUSH
19185: PPUSH
19186: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19187: LD_ADDR_VAR 0 2
19191: PUSH
19192: LD_INT 21
19194: PUSH
19195: LD_INT 1
19197: PUSH
19198: EMPTY
19199: LIST
19200: LIST
19201: PPUSH
19202: CALL_OW 69
19206: PUSH
19207: FOR_IN
19208: IFFALSE 19260
// if IsSelected ( i ) then
19210: LD_VAR 0 2
19214: PPUSH
19215: CALL_OW 306
19219: IFFALSE 19258
// begin for j := 1 to 4 do
19221: LD_ADDR_VAR 0 3
19225: PUSH
19226: DOUBLE
19227: LD_INT 1
19229: DEC
19230: ST_TO_ADDR
19231: LD_INT 4
19233: PUSH
19234: FOR_TO
19235: IFFALSE 19256
// SetSkill ( i , j , 10 ) ;
19237: LD_VAR 0 2
19241: PPUSH
19242: LD_VAR 0 3
19246: PPUSH
19247: LD_INT 10
19249: PPUSH
19250: CALL_OW 237
19254: GO 19234
19256: POP
19257: POP
// end ;
19258: GO 19207
19260: POP
19261: POP
// end ;
19262: LD_VAR 0 1
19266: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
19267: LD_INT 0
19269: PPUSH
19270: PPUSH
19271: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
19272: LD_ADDR_VAR 0 2
19276: PUSH
19277: LD_INT 22
19279: PUSH
19280: LD_OWVAR 2
19284: PUSH
19285: EMPTY
19286: LIST
19287: LIST
19288: PUSH
19289: LD_INT 21
19291: PUSH
19292: LD_INT 1
19294: PUSH
19295: EMPTY
19296: LIST
19297: LIST
19298: PUSH
19299: EMPTY
19300: LIST
19301: LIST
19302: PPUSH
19303: CALL_OW 69
19307: PUSH
19308: FOR_IN
19309: IFFALSE 19350
// begin for j := 1 to 4 do
19311: LD_ADDR_VAR 0 3
19315: PUSH
19316: DOUBLE
19317: LD_INT 1
19319: DEC
19320: ST_TO_ADDR
19321: LD_INT 4
19323: PUSH
19324: FOR_TO
19325: IFFALSE 19346
// SetSkill ( i , j , 10 ) ;
19327: LD_VAR 0 2
19331: PPUSH
19332: LD_VAR 0 3
19336: PPUSH
19337: LD_INT 10
19339: PPUSH
19340: CALL_OW 237
19344: GO 19324
19346: POP
19347: POP
// end ;
19348: GO 19308
19350: POP
19351: POP
// end ;
19352: LD_VAR 0 1
19356: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
19357: LD_INT 0
19359: PPUSH
// uc_side := your_side ;
19360: LD_ADDR_OWVAR 20
19364: PUSH
19365: LD_OWVAR 2
19369: ST_TO_ADDR
// uc_nation := nation ;
19370: LD_ADDR_OWVAR 21
19374: PUSH
19375: LD_VAR 0 1
19379: ST_TO_ADDR
// InitHc ;
19380: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
19384: LD_INT 0
19386: PPUSH
19387: LD_VAR 0 2
19391: PPUSH
19392: LD_VAR 0 3
19396: PPUSH
19397: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
19401: LD_VAR 0 4
19405: PPUSH
19406: LD_VAR 0 5
19410: PPUSH
19411: CALL_OW 428
19415: PUSH
19416: LD_INT 0
19418: EQUAL
19419: IFFALSE 19443
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
19421: CALL_OW 44
19425: PPUSH
19426: LD_VAR 0 4
19430: PPUSH
19431: LD_VAR 0 5
19435: PPUSH
19436: LD_INT 1
19438: PPUSH
19439: CALL_OW 48
// end ;
19443: LD_VAR 0 6
19447: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
19448: LD_INT 0
19450: PPUSH
19451: PPUSH
// uc_side := your_side ;
19452: LD_ADDR_OWVAR 20
19456: PUSH
19457: LD_OWVAR 2
19461: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
19462: LD_VAR 0 1
19466: PUSH
19467: LD_INT 1
19469: PUSH
19470: LD_INT 2
19472: PUSH
19473: LD_INT 3
19475: PUSH
19476: LD_INT 4
19478: PUSH
19479: LD_INT 5
19481: PUSH
19482: EMPTY
19483: LIST
19484: LIST
19485: LIST
19486: LIST
19487: LIST
19488: IN
19489: IFFALSE 19501
// uc_nation := nation_american else
19491: LD_ADDR_OWVAR 21
19495: PUSH
19496: LD_INT 1
19498: ST_TO_ADDR
19499: GO 19544
// if chassis in [ 11 , 12 , 13 , 14 ] then
19501: LD_VAR 0 1
19505: PUSH
19506: LD_INT 11
19508: PUSH
19509: LD_INT 12
19511: PUSH
19512: LD_INT 13
19514: PUSH
19515: LD_INT 14
19517: PUSH
19518: EMPTY
19519: LIST
19520: LIST
19521: LIST
19522: LIST
19523: IN
19524: IFFALSE 19536
// uc_nation := nation_arabian else
19526: LD_ADDR_OWVAR 21
19530: PUSH
19531: LD_INT 2
19533: ST_TO_ADDR
19534: GO 19544
// uc_nation := nation_russian ;
19536: LD_ADDR_OWVAR 21
19540: PUSH
19541: LD_INT 3
19543: ST_TO_ADDR
// vc_chassis := chassis ;
19544: LD_ADDR_OWVAR 37
19548: PUSH
19549: LD_VAR 0 1
19553: ST_TO_ADDR
// vc_engine := engine ;
19554: LD_ADDR_OWVAR 39
19558: PUSH
19559: LD_VAR 0 2
19563: ST_TO_ADDR
// vc_control := control ;
19564: LD_ADDR_OWVAR 38
19568: PUSH
19569: LD_VAR 0 3
19573: ST_TO_ADDR
// vc_weapon := weapon ;
19574: LD_ADDR_OWVAR 40
19578: PUSH
19579: LD_VAR 0 4
19583: ST_TO_ADDR
// un := CreateVehicle ;
19584: LD_ADDR_VAR 0 8
19588: PUSH
19589: CALL_OW 45
19593: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
19594: LD_VAR 0 8
19598: PPUSH
19599: LD_INT 0
19601: PPUSH
19602: LD_INT 5
19604: PPUSH
19605: CALL_OW 12
19609: PPUSH
19610: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
19614: LD_VAR 0 8
19618: PPUSH
19619: LD_VAR 0 5
19623: PPUSH
19624: LD_VAR 0 6
19628: PPUSH
19629: LD_INT 1
19631: PPUSH
19632: CALL_OW 48
// end ;
19636: LD_VAR 0 7
19640: RET
// export hInvincible ; every 1 do
19641: GO 19643
19643: DISABLE
// hInvincible := [ ] ;
19644: LD_ADDR_EXP 81
19648: PUSH
19649: EMPTY
19650: ST_TO_ADDR
19651: END
// every 10 do var i ;
19652: GO 19654
19654: DISABLE
19655: LD_INT 0
19657: PPUSH
// begin enable ;
19658: ENABLE
// if not hInvincible then
19659: LD_EXP 81
19663: NOT
19664: IFFALSE 19668
// exit ;
19666: GO 19712
// for i in hInvincible do
19668: LD_ADDR_VAR 0 1
19672: PUSH
19673: LD_EXP 81
19677: PUSH
19678: FOR_IN
19679: IFFALSE 19710
// if GetLives ( i ) < 1000 then
19681: LD_VAR 0 1
19685: PPUSH
19686: CALL_OW 256
19690: PUSH
19691: LD_INT 1000
19693: LESS
19694: IFFALSE 19708
// SetLives ( i , 1000 ) ;
19696: LD_VAR 0 1
19700: PPUSH
19701: LD_INT 1000
19703: PPUSH
19704: CALL_OW 234
19708: GO 19678
19710: POP
19711: POP
// end ;
19712: PPOPN 1
19714: END
// export function hHackInvincible ; var i ; begin
19715: LD_INT 0
19717: PPUSH
19718: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
19719: LD_ADDR_VAR 0 2
19723: PUSH
19724: LD_INT 2
19726: PUSH
19727: LD_INT 21
19729: PUSH
19730: LD_INT 1
19732: PUSH
19733: EMPTY
19734: LIST
19735: LIST
19736: PUSH
19737: LD_INT 21
19739: PUSH
19740: LD_INT 2
19742: PUSH
19743: EMPTY
19744: LIST
19745: LIST
19746: PUSH
19747: EMPTY
19748: LIST
19749: LIST
19750: LIST
19751: PPUSH
19752: CALL_OW 69
19756: PUSH
19757: FOR_IN
19758: IFFALSE 19819
// if IsSelected ( i ) then
19760: LD_VAR 0 2
19764: PPUSH
19765: CALL_OW 306
19769: IFFALSE 19817
// begin if i in hInvincible then
19771: LD_VAR 0 2
19775: PUSH
19776: LD_EXP 81
19780: IN
19781: IFFALSE 19801
// hInvincible := hInvincible diff i else
19783: LD_ADDR_EXP 81
19787: PUSH
19788: LD_EXP 81
19792: PUSH
19793: LD_VAR 0 2
19797: DIFF
19798: ST_TO_ADDR
19799: GO 19817
// hInvincible := hInvincible union i ;
19801: LD_ADDR_EXP 81
19805: PUSH
19806: LD_EXP 81
19810: PUSH
19811: LD_VAR 0 2
19815: UNION
19816: ST_TO_ADDR
// end ;
19817: GO 19757
19819: POP
19820: POP
// end ;
19821: LD_VAR 0 1
19825: RET
// export function hHackInvisible ; var i , j ; begin
19826: LD_INT 0
19828: PPUSH
19829: PPUSH
19830: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19831: LD_ADDR_VAR 0 2
19835: PUSH
19836: LD_INT 21
19838: PUSH
19839: LD_INT 1
19841: PUSH
19842: EMPTY
19843: LIST
19844: LIST
19845: PPUSH
19846: CALL_OW 69
19850: PUSH
19851: FOR_IN
19852: IFFALSE 19876
// if IsSelected ( i ) then
19854: LD_VAR 0 2
19858: PPUSH
19859: CALL_OW 306
19863: IFFALSE 19874
// ComForceInvisible ( i ) ;
19865: LD_VAR 0 2
19869: PPUSH
19870: CALL_OW 496
19874: GO 19851
19876: POP
19877: POP
// end ;
19878: LD_VAR 0 1
19882: RET
// export function hHackChangeYourSide ; begin
19883: LD_INT 0
19885: PPUSH
// if your_side = 8 then
19886: LD_OWVAR 2
19890: PUSH
19891: LD_INT 8
19893: EQUAL
19894: IFFALSE 19906
// your_side := 0 else
19896: LD_ADDR_OWVAR 2
19900: PUSH
19901: LD_INT 0
19903: ST_TO_ADDR
19904: GO 19920
// your_side := your_side + 1 ;
19906: LD_ADDR_OWVAR 2
19910: PUSH
19911: LD_OWVAR 2
19915: PUSH
19916: LD_INT 1
19918: PLUS
19919: ST_TO_ADDR
// end ;
19920: LD_VAR 0 1
19924: RET
// export function hHackChangeUnitSide ; var i , j ; begin
19925: LD_INT 0
19927: PPUSH
19928: PPUSH
19929: PPUSH
// for i in all_units do
19930: LD_ADDR_VAR 0 2
19934: PUSH
19935: LD_OWVAR 3
19939: PUSH
19940: FOR_IN
19941: IFFALSE 20019
// if IsSelected ( i ) then
19943: LD_VAR 0 2
19947: PPUSH
19948: CALL_OW 306
19952: IFFALSE 20017
// begin j := GetSide ( i ) ;
19954: LD_ADDR_VAR 0 3
19958: PUSH
19959: LD_VAR 0 2
19963: PPUSH
19964: CALL_OW 255
19968: ST_TO_ADDR
// if j = 8 then
19969: LD_VAR 0 3
19973: PUSH
19974: LD_INT 8
19976: EQUAL
19977: IFFALSE 19989
// j := 0 else
19979: LD_ADDR_VAR 0 3
19983: PUSH
19984: LD_INT 0
19986: ST_TO_ADDR
19987: GO 20003
// j := j + 1 ;
19989: LD_ADDR_VAR 0 3
19993: PUSH
19994: LD_VAR 0 3
19998: PUSH
19999: LD_INT 1
20001: PLUS
20002: ST_TO_ADDR
// SetSide ( i , j ) ;
20003: LD_VAR 0 2
20007: PPUSH
20008: LD_VAR 0 3
20012: PPUSH
20013: CALL_OW 235
// end ;
20017: GO 19940
20019: POP
20020: POP
// end ;
20021: LD_VAR 0 1
20025: RET
// export function hHackFog ; begin
20026: LD_INT 0
20028: PPUSH
// FogOff ( true ) ;
20029: LD_INT 1
20031: PPUSH
20032: CALL_OW 344
// end ;
20036: LD_VAR 0 1
20040: RET
// export function hHackTeleport ( unit , x , y ) ; begin
20041: LD_INT 0
20043: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
20044: LD_VAR 0 1
20048: PPUSH
20049: LD_VAR 0 2
20053: PPUSH
20054: LD_VAR 0 3
20058: PPUSH
20059: LD_INT 1
20061: PPUSH
20062: LD_INT 1
20064: PPUSH
20065: CALL_OW 483
// CenterOnXY ( x , y ) ;
20069: LD_VAR 0 2
20073: PPUSH
20074: LD_VAR 0 3
20078: PPUSH
20079: CALL_OW 84
// end ; end_of_file
20083: LD_VAR 0 4
20087: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
20088: LD_INT 0
20090: PPUSH
20091: PPUSH
20092: PPUSH
20093: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
20094: LD_VAR 0 1
20098: PPUSH
20099: CALL_OW 264
20103: PUSH
20104: LD_EXP 97
20108: EQUAL
20109: IFFALSE 20181
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
20111: LD_INT 68
20113: PPUSH
20114: LD_VAR 0 1
20118: PPUSH
20119: CALL_OW 255
20123: PPUSH
20124: CALL_OW 321
20128: PUSH
20129: LD_INT 2
20131: EQUAL
20132: IFFALSE 20144
// eff := 70 else
20134: LD_ADDR_VAR 0 4
20138: PUSH
20139: LD_INT 70
20141: ST_TO_ADDR
20142: GO 20152
// eff := 30 ;
20144: LD_ADDR_VAR 0 4
20148: PUSH
20149: LD_INT 30
20151: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
20152: LD_VAR 0 1
20156: PPUSH
20157: CALL_OW 250
20161: PPUSH
20162: LD_VAR 0 1
20166: PPUSH
20167: CALL_OW 251
20171: PPUSH
20172: LD_VAR 0 4
20176: PPUSH
20177: CALL_OW 495
// end ; end ;
20181: LD_VAR 0 2
20185: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
20186: LD_INT 0
20188: PPUSH
// end ;
20189: LD_VAR 0 4
20193: RET
// export function SOS_Command ( cmd ) ; begin
20194: LD_INT 0
20196: PPUSH
// end ;
20197: LD_VAR 0 2
20201: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
20202: LD_INT 0
20204: PPUSH
// end ;
20205: LD_VAR 0 6
20209: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
20210: LD_INT 0
20212: PPUSH
20213: PPUSH
// if not vehicle or not factory then
20214: LD_VAR 0 1
20218: NOT
20219: PUSH
20220: LD_VAR 0 2
20224: NOT
20225: OR
20226: IFFALSE 20230
// exit ;
20228: GO 20461
// if factoryWaypoints >= factory then
20230: LD_EXP 82
20234: PUSH
20235: LD_VAR 0 2
20239: GREATEREQUAL
20240: IFFALSE 20461
// if factoryWaypoints [ factory ] then
20242: LD_EXP 82
20246: PUSH
20247: LD_VAR 0 2
20251: ARRAY
20252: IFFALSE 20461
// begin if GetControl ( vehicle ) = control_manual then
20254: LD_VAR 0 1
20258: PPUSH
20259: CALL_OW 263
20263: PUSH
20264: LD_INT 1
20266: EQUAL
20267: IFFALSE 20348
// begin driver := IsDrivenBy ( vehicle ) ;
20269: LD_ADDR_VAR 0 4
20273: PUSH
20274: LD_VAR 0 1
20278: PPUSH
20279: CALL_OW 311
20283: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20284: LD_VAR 0 4
20288: PPUSH
20289: LD_EXP 82
20293: PUSH
20294: LD_VAR 0 2
20298: ARRAY
20299: PUSH
20300: LD_INT 3
20302: ARRAY
20303: PPUSH
20304: LD_EXP 82
20308: PUSH
20309: LD_VAR 0 2
20313: ARRAY
20314: PUSH
20315: LD_INT 4
20317: ARRAY
20318: PPUSH
20319: CALL_OW 171
// AddComExitVehicle ( driver ) ;
20323: LD_VAR 0 4
20327: PPUSH
20328: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
20332: LD_VAR 0 4
20336: PPUSH
20337: LD_VAR 0 2
20341: PPUSH
20342: CALL_OW 180
// end else
20346: GO 20461
// if GetControl ( vehicle ) = control_remote then
20348: LD_VAR 0 1
20352: PPUSH
20353: CALL_OW 263
20357: PUSH
20358: LD_INT 2
20360: EQUAL
20361: IFFALSE 20422
// begin wait ( 0 0$2 ) ;
20363: LD_INT 70
20365: PPUSH
20366: CALL_OW 67
// if Connect ( vehicle ) then
20370: LD_VAR 0 1
20374: PPUSH
20375: CALL 33014 0 1
20379: IFFALSE 20420
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20381: LD_VAR 0 1
20385: PPUSH
20386: LD_EXP 82
20390: PUSH
20391: LD_VAR 0 2
20395: ARRAY
20396: PUSH
20397: LD_INT 3
20399: ARRAY
20400: PPUSH
20401: LD_EXP 82
20405: PUSH
20406: LD_VAR 0 2
20410: ARRAY
20411: PUSH
20412: LD_INT 4
20414: ARRAY
20415: PPUSH
20416: CALL_OW 171
// end else
20420: GO 20461
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20422: LD_VAR 0 1
20426: PPUSH
20427: LD_EXP 82
20431: PUSH
20432: LD_VAR 0 2
20436: ARRAY
20437: PUSH
20438: LD_INT 3
20440: ARRAY
20441: PPUSH
20442: LD_EXP 82
20446: PUSH
20447: LD_VAR 0 2
20451: ARRAY
20452: PUSH
20453: LD_INT 4
20455: ARRAY
20456: PPUSH
20457: CALL_OW 171
// end ; end ;
20461: LD_VAR 0 3
20465: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
20466: LD_INT 0
20468: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
20469: LD_VAR 0 1
20473: PUSH
20474: LD_INT 250
20476: EQUAL
20477: PUSH
20478: LD_VAR 0 2
20482: PPUSH
20483: CALL_OW 264
20487: PUSH
20488: LD_EXP 100
20492: EQUAL
20493: AND
20494: IFFALSE 20515
// MinerPlaceMine ( unit , x , y ) ;
20496: LD_VAR 0 2
20500: PPUSH
20501: LD_VAR 0 4
20505: PPUSH
20506: LD_VAR 0 5
20510: PPUSH
20511: CALL 23243 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
20515: LD_VAR 0 1
20519: PUSH
20520: LD_INT 251
20522: EQUAL
20523: PUSH
20524: LD_VAR 0 2
20528: PPUSH
20529: CALL_OW 264
20533: PUSH
20534: LD_EXP 100
20538: EQUAL
20539: AND
20540: IFFALSE 20561
// MinerDetonateMine ( unit , x , y ) ;
20542: LD_VAR 0 2
20546: PPUSH
20547: LD_VAR 0 4
20551: PPUSH
20552: LD_VAR 0 5
20556: PPUSH
20557: CALL 23520 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
20561: LD_VAR 0 1
20565: PUSH
20566: LD_INT 252
20568: EQUAL
20569: PUSH
20570: LD_VAR 0 2
20574: PPUSH
20575: CALL_OW 264
20579: PUSH
20580: LD_EXP 100
20584: EQUAL
20585: AND
20586: IFFALSE 20607
// MinerCreateMinefield ( unit , x , y ) ;
20588: LD_VAR 0 2
20592: PPUSH
20593: LD_VAR 0 4
20597: PPUSH
20598: LD_VAR 0 5
20602: PPUSH
20603: CALL 23937 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
20607: LD_VAR 0 1
20611: PUSH
20612: LD_INT 253
20614: EQUAL
20615: PUSH
20616: LD_VAR 0 2
20620: PPUSH
20621: CALL_OW 257
20625: PUSH
20626: LD_INT 5
20628: EQUAL
20629: AND
20630: IFFALSE 20651
// ComBinocular ( unit , x , y ) ;
20632: LD_VAR 0 2
20636: PPUSH
20637: LD_VAR 0 4
20641: PPUSH
20642: LD_VAR 0 5
20646: PPUSH
20647: CALL 24308 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
20651: LD_VAR 0 1
20655: PUSH
20656: LD_INT 254
20658: EQUAL
20659: PUSH
20660: LD_VAR 0 2
20664: PPUSH
20665: CALL_OW 264
20669: PUSH
20670: LD_EXP 95
20674: EQUAL
20675: AND
20676: PUSH
20677: LD_VAR 0 3
20681: PPUSH
20682: CALL_OW 263
20686: PUSH
20687: LD_INT 3
20689: EQUAL
20690: AND
20691: IFFALSE 20707
// HackDestroyVehicle ( unit , selectedUnit ) ;
20693: LD_VAR 0 2
20697: PPUSH
20698: LD_VAR 0 3
20702: PPUSH
20703: CALL 22603 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
20707: LD_VAR 0 1
20711: PUSH
20712: LD_INT 255
20714: EQUAL
20715: PUSH
20716: LD_VAR 0 2
20720: PPUSH
20721: CALL_OW 264
20725: PUSH
20726: LD_INT 14
20728: PUSH
20729: LD_INT 53
20731: PUSH
20732: EMPTY
20733: LIST
20734: LIST
20735: IN
20736: AND
20737: PUSH
20738: LD_VAR 0 4
20742: PPUSH
20743: LD_VAR 0 5
20747: PPUSH
20748: CALL_OW 488
20752: AND
20753: IFFALSE 20777
// CutTreeXYR ( unit , x , y , 12 ) ;
20755: LD_VAR 0 2
20759: PPUSH
20760: LD_VAR 0 4
20764: PPUSH
20765: LD_VAR 0 5
20769: PPUSH
20770: LD_INT 12
20772: PPUSH
20773: CALL 21169 0 4
// if cmd = 256 then
20777: LD_VAR 0 1
20781: PUSH
20782: LD_INT 256
20784: EQUAL
20785: IFFALSE 20806
// SetFactoryWaypoint ( unit , x , y ) ;
20787: LD_VAR 0 2
20791: PPUSH
20792: LD_VAR 0 4
20796: PPUSH
20797: LD_VAR 0 5
20801: PPUSH
20802: CALL 20811 0 3
// end ;
20806: LD_VAR 0 6
20810: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
20811: LD_INT 0
20813: PPUSH
20814: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
20815: LD_VAR 0 1
20819: NOT
20820: PUSH
20821: LD_VAR 0 2
20825: PPUSH
20826: LD_VAR 0 3
20830: PPUSH
20831: CALL_OW 488
20835: NOT
20836: OR
20837: PUSH
20838: LD_VAR 0 1
20842: PPUSH
20843: CALL_OW 266
20847: PUSH
20848: LD_INT 3
20850: NONEQUAL
20851: PUSH
20852: LD_VAR 0 1
20856: PPUSH
20857: CALL_OW 247
20861: PUSH
20862: LD_INT 1
20864: EQUAL
20865: NOT
20866: AND
20867: OR
20868: IFFALSE 20872
// exit ;
20870: GO 21021
// if GetType ( factory ) = unit_human then
20872: LD_VAR 0 1
20876: PPUSH
20877: CALL_OW 247
20881: PUSH
20882: LD_INT 1
20884: EQUAL
20885: IFFALSE 20902
// factory := IsInUnit ( factory ) ;
20887: LD_ADDR_VAR 0 1
20891: PUSH
20892: LD_VAR 0 1
20896: PPUSH
20897: CALL_OW 310
20901: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
20902: LD_VAR 0 1
20906: PPUSH
20907: CALL_OW 266
20911: PUSH
20912: LD_INT 3
20914: NONEQUAL
20915: IFFALSE 20919
// exit ;
20917: GO 21021
// if HexInfo ( x , y ) = factory then
20919: LD_VAR 0 2
20923: PPUSH
20924: LD_VAR 0 3
20928: PPUSH
20929: CALL_OW 428
20933: PUSH
20934: LD_VAR 0 1
20938: EQUAL
20939: IFFALSE 20966
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
20941: LD_ADDR_EXP 82
20945: PUSH
20946: LD_EXP 82
20950: PPUSH
20951: LD_VAR 0 1
20955: PPUSH
20956: LD_INT 0
20958: PPUSH
20959: CALL_OW 1
20963: ST_TO_ADDR
20964: GO 21017
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
20966: LD_ADDR_EXP 82
20970: PUSH
20971: LD_EXP 82
20975: PPUSH
20976: LD_VAR 0 1
20980: PPUSH
20981: LD_VAR 0 1
20985: PPUSH
20986: CALL_OW 255
20990: PUSH
20991: LD_VAR 0 1
20995: PUSH
20996: LD_VAR 0 2
21000: PUSH
21001: LD_VAR 0 3
21005: PUSH
21006: EMPTY
21007: LIST
21008: LIST
21009: LIST
21010: LIST
21011: PPUSH
21012: CALL_OW 1
21016: ST_TO_ADDR
// UpdateFactoryWaypoints ;
21017: CALL 21026 0 0
// end ;
21021: LD_VAR 0 4
21025: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
21026: LD_INT 0
21028: PPUSH
21029: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
21030: LD_STRING resetFactoryWaypoint();
21032: PPUSH
21033: CALL_OW 559
// if factoryWaypoints then
21037: LD_EXP 82
21041: IFFALSE 21164
// begin for i := 1 to factoryWaypoints do
21043: LD_ADDR_VAR 0 2
21047: PUSH
21048: DOUBLE
21049: LD_INT 1
21051: DEC
21052: ST_TO_ADDR
21053: LD_EXP 82
21057: PUSH
21058: FOR_TO
21059: IFFALSE 21162
// if factoryWaypoints [ i ] then
21061: LD_EXP 82
21065: PUSH
21066: LD_VAR 0 2
21070: ARRAY
21071: IFFALSE 21160
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
21073: LD_STRING setFactoryWaypointXY(
21075: PUSH
21076: LD_EXP 82
21080: PUSH
21081: LD_VAR 0 2
21085: ARRAY
21086: PUSH
21087: LD_INT 1
21089: ARRAY
21090: STR
21091: PUSH
21092: LD_STRING ,
21094: STR
21095: PUSH
21096: LD_EXP 82
21100: PUSH
21101: LD_VAR 0 2
21105: ARRAY
21106: PUSH
21107: LD_INT 2
21109: ARRAY
21110: STR
21111: PUSH
21112: LD_STRING ,
21114: STR
21115: PUSH
21116: LD_EXP 82
21120: PUSH
21121: LD_VAR 0 2
21125: ARRAY
21126: PUSH
21127: LD_INT 3
21129: ARRAY
21130: STR
21131: PUSH
21132: LD_STRING ,
21134: STR
21135: PUSH
21136: LD_EXP 82
21140: PUSH
21141: LD_VAR 0 2
21145: ARRAY
21146: PUSH
21147: LD_INT 4
21149: ARRAY
21150: STR
21151: PUSH
21152: LD_STRING )
21154: STR
21155: PPUSH
21156: CALL_OW 559
21160: GO 21058
21162: POP
21163: POP
// end ; end ;
21164: LD_VAR 0 1
21168: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
21169: LD_INT 0
21171: PPUSH
21172: PPUSH
21173: PPUSH
21174: PPUSH
21175: PPUSH
21176: PPUSH
21177: PPUSH
21178: PPUSH
21179: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
21180: LD_VAR 0 1
21184: NOT
21185: PUSH
21186: LD_VAR 0 2
21190: PPUSH
21191: LD_VAR 0 3
21195: PPUSH
21196: CALL_OW 488
21200: NOT
21201: OR
21202: PUSH
21203: LD_VAR 0 4
21207: NOT
21208: OR
21209: IFFALSE 21213
// exit ;
21211: GO 21553
// list := [ ] ;
21213: LD_ADDR_VAR 0 13
21217: PUSH
21218: EMPTY
21219: ST_TO_ADDR
// if x - r < 0 then
21220: LD_VAR 0 2
21224: PUSH
21225: LD_VAR 0 4
21229: MINUS
21230: PUSH
21231: LD_INT 0
21233: LESS
21234: IFFALSE 21246
// min_x := 0 else
21236: LD_ADDR_VAR 0 7
21240: PUSH
21241: LD_INT 0
21243: ST_TO_ADDR
21244: GO 21262
// min_x := x - r ;
21246: LD_ADDR_VAR 0 7
21250: PUSH
21251: LD_VAR 0 2
21255: PUSH
21256: LD_VAR 0 4
21260: MINUS
21261: ST_TO_ADDR
// if y - r < 0 then
21262: LD_VAR 0 3
21266: PUSH
21267: LD_VAR 0 4
21271: MINUS
21272: PUSH
21273: LD_INT 0
21275: LESS
21276: IFFALSE 21288
// min_y := 0 else
21278: LD_ADDR_VAR 0 8
21282: PUSH
21283: LD_INT 0
21285: ST_TO_ADDR
21286: GO 21304
// min_y := y - r ;
21288: LD_ADDR_VAR 0 8
21292: PUSH
21293: LD_VAR 0 3
21297: PUSH
21298: LD_VAR 0 4
21302: MINUS
21303: ST_TO_ADDR
// max_x := x + r ;
21304: LD_ADDR_VAR 0 9
21308: PUSH
21309: LD_VAR 0 2
21313: PUSH
21314: LD_VAR 0 4
21318: PLUS
21319: ST_TO_ADDR
// max_y := y + r ;
21320: LD_ADDR_VAR 0 10
21324: PUSH
21325: LD_VAR 0 3
21329: PUSH
21330: LD_VAR 0 4
21334: PLUS
21335: ST_TO_ADDR
// for _x = min_x to max_x do
21336: LD_ADDR_VAR 0 11
21340: PUSH
21341: DOUBLE
21342: LD_VAR 0 7
21346: DEC
21347: ST_TO_ADDR
21348: LD_VAR 0 9
21352: PUSH
21353: FOR_TO
21354: IFFALSE 21471
// for _y = min_y to max_y do
21356: LD_ADDR_VAR 0 12
21360: PUSH
21361: DOUBLE
21362: LD_VAR 0 8
21366: DEC
21367: ST_TO_ADDR
21368: LD_VAR 0 10
21372: PUSH
21373: FOR_TO
21374: IFFALSE 21467
// begin if not ValidHex ( _x , _y ) then
21376: LD_VAR 0 11
21380: PPUSH
21381: LD_VAR 0 12
21385: PPUSH
21386: CALL_OW 488
21390: NOT
21391: IFFALSE 21395
// continue ;
21393: GO 21373
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
21395: LD_VAR 0 11
21399: PPUSH
21400: LD_VAR 0 12
21404: PPUSH
21405: CALL_OW 351
21409: PUSH
21410: LD_VAR 0 11
21414: PPUSH
21415: LD_VAR 0 12
21419: PPUSH
21420: CALL_OW 554
21424: AND
21425: IFFALSE 21465
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
21427: LD_ADDR_VAR 0 13
21431: PUSH
21432: LD_VAR 0 13
21436: PPUSH
21437: LD_VAR 0 13
21441: PUSH
21442: LD_INT 1
21444: PLUS
21445: PPUSH
21446: LD_VAR 0 11
21450: PUSH
21451: LD_VAR 0 12
21455: PUSH
21456: EMPTY
21457: LIST
21458: LIST
21459: PPUSH
21460: CALL_OW 2
21464: ST_TO_ADDR
// end ;
21465: GO 21373
21467: POP
21468: POP
21469: GO 21353
21471: POP
21472: POP
// if not list then
21473: LD_VAR 0 13
21477: NOT
21478: IFFALSE 21482
// exit ;
21480: GO 21553
// for i in list do
21482: LD_ADDR_VAR 0 6
21486: PUSH
21487: LD_VAR 0 13
21491: PUSH
21492: FOR_IN
21493: IFFALSE 21551
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
21495: LD_VAR 0 1
21499: PPUSH
21500: LD_STRING M
21502: PUSH
21503: LD_VAR 0 6
21507: PUSH
21508: LD_INT 1
21510: ARRAY
21511: PUSH
21512: LD_VAR 0 6
21516: PUSH
21517: LD_INT 2
21519: ARRAY
21520: PUSH
21521: LD_INT 0
21523: PUSH
21524: LD_INT 0
21526: PUSH
21527: LD_INT 0
21529: PUSH
21530: LD_INT 0
21532: PUSH
21533: EMPTY
21534: LIST
21535: LIST
21536: LIST
21537: LIST
21538: LIST
21539: LIST
21540: LIST
21541: PUSH
21542: EMPTY
21543: LIST
21544: PPUSH
21545: CALL_OW 447
21549: GO 21492
21551: POP
21552: POP
// end ;
21553: LD_VAR 0 5
21557: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
21558: LD_EXP 83
21562: NOT
21563: IFFALSE 21613
21565: GO 21567
21567: DISABLE
// begin initHack := true ;
21568: LD_ADDR_EXP 83
21572: PUSH
21573: LD_INT 1
21575: ST_TO_ADDR
// hackTanks := [ ] ;
21576: LD_ADDR_EXP 84
21580: PUSH
21581: EMPTY
21582: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
21583: LD_ADDR_EXP 85
21587: PUSH
21588: EMPTY
21589: ST_TO_ADDR
// hackLimit := 3 ;
21590: LD_ADDR_EXP 86
21594: PUSH
21595: LD_INT 3
21597: ST_TO_ADDR
// hackDist := 12 ;
21598: LD_ADDR_EXP 87
21602: PUSH
21603: LD_INT 12
21605: ST_TO_ADDR
// hackCounter := [ ] ;
21606: LD_ADDR_EXP 88
21610: PUSH
21611: EMPTY
21612: ST_TO_ADDR
// end ;
21613: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
21614: LD_EXP 83
21618: PUSH
21619: LD_INT 34
21621: PUSH
21622: LD_EXP 95
21626: PUSH
21627: EMPTY
21628: LIST
21629: LIST
21630: PPUSH
21631: CALL_OW 69
21635: AND
21636: IFFALSE 21891
21638: GO 21640
21640: DISABLE
21641: LD_INT 0
21643: PPUSH
21644: PPUSH
// begin enable ;
21645: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
21646: LD_ADDR_VAR 0 1
21650: PUSH
21651: LD_INT 34
21653: PUSH
21654: LD_EXP 95
21658: PUSH
21659: EMPTY
21660: LIST
21661: LIST
21662: PPUSH
21663: CALL_OW 69
21667: PUSH
21668: FOR_IN
21669: IFFALSE 21889
// begin if not i in hackTanks then
21671: LD_VAR 0 1
21675: PUSH
21676: LD_EXP 84
21680: IN
21681: NOT
21682: IFFALSE 21765
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
21684: LD_ADDR_EXP 84
21688: PUSH
21689: LD_EXP 84
21693: PPUSH
21694: LD_EXP 84
21698: PUSH
21699: LD_INT 1
21701: PLUS
21702: PPUSH
21703: LD_VAR 0 1
21707: PPUSH
21708: CALL_OW 1
21712: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
21713: LD_ADDR_EXP 85
21717: PUSH
21718: LD_EXP 85
21722: PPUSH
21723: LD_EXP 85
21727: PUSH
21728: LD_INT 1
21730: PLUS
21731: PPUSH
21732: EMPTY
21733: PPUSH
21734: CALL_OW 1
21738: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
21739: LD_ADDR_EXP 88
21743: PUSH
21744: LD_EXP 88
21748: PPUSH
21749: LD_EXP 88
21753: PUSH
21754: LD_INT 1
21756: PLUS
21757: PPUSH
21758: EMPTY
21759: PPUSH
21760: CALL_OW 1
21764: ST_TO_ADDR
// end ; if not IsOk ( i ) then
21765: LD_VAR 0 1
21769: PPUSH
21770: CALL_OW 302
21774: NOT
21775: IFFALSE 21788
// begin HackUnlinkAll ( i ) ;
21777: LD_VAR 0 1
21781: PPUSH
21782: CALL 21894 0 1
// continue ;
21786: GO 21668
// end ; HackCheckCapturedStatus ( i ) ;
21788: LD_VAR 0 1
21792: PPUSH
21793: CALL 22337 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
21797: LD_ADDR_VAR 0 2
21801: PUSH
21802: LD_INT 81
21804: PUSH
21805: LD_VAR 0 1
21809: PPUSH
21810: CALL_OW 255
21814: PUSH
21815: EMPTY
21816: LIST
21817: LIST
21818: PUSH
21819: LD_INT 33
21821: PUSH
21822: LD_INT 3
21824: PUSH
21825: EMPTY
21826: LIST
21827: LIST
21828: PUSH
21829: LD_INT 91
21831: PUSH
21832: LD_VAR 0 1
21836: PUSH
21837: LD_EXP 87
21841: PUSH
21842: EMPTY
21843: LIST
21844: LIST
21845: LIST
21846: PUSH
21847: LD_INT 50
21849: PUSH
21850: EMPTY
21851: LIST
21852: PUSH
21853: EMPTY
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: PPUSH
21859: CALL_OW 69
21863: ST_TO_ADDR
// if not tmp then
21864: LD_VAR 0 2
21868: NOT
21869: IFFALSE 21873
// continue ;
21871: GO 21668
// HackLink ( i , tmp ) ;
21873: LD_VAR 0 1
21877: PPUSH
21878: LD_VAR 0 2
21882: PPUSH
21883: CALL 22030 0 2
// end ;
21887: GO 21668
21889: POP
21890: POP
// end ;
21891: PPOPN 2
21893: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
21894: LD_INT 0
21896: PPUSH
21897: PPUSH
21898: PPUSH
// if not hack in hackTanks then
21899: LD_VAR 0 1
21903: PUSH
21904: LD_EXP 84
21908: IN
21909: NOT
21910: IFFALSE 21914
// exit ;
21912: GO 22025
// index := GetElementIndex ( hackTanks , hack ) ;
21914: LD_ADDR_VAR 0 4
21918: PUSH
21919: LD_EXP 84
21923: PPUSH
21924: LD_VAR 0 1
21928: PPUSH
21929: CALL 29828 0 2
21933: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
21934: LD_EXP 85
21938: PUSH
21939: LD_VAR 0 4
21943: ARRAY
21944: IFFALSE 22025
// begin for i in hackTanksCaptured [ index ] do
21946: LD_ADDR_VAR 0 3
21950: PUSH
21951: LD_EXP 85
21955: PUSH
21956: LD_VAR 0 4
21960: ARRAY
21961: PUSH
21962: FOR_IN
21963: IFFALSE 21989
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
21965: LD_VAR 0 3
21969: PUSH
21970: LD_INT 1
21972: ARRAY
21973: PPUSH
21974: LD_VAR 0 3
21978: PUSH
21979: LD_INT 2
21981: ARRAY
21982: PPUSH
21983: CALL_OW 235
21987: GO 21962
21989: POP
21990: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
21991: LD_ADDR_EXP 85
21995: PUSH
21996: LD_EXP 85
22000: PPUSH
22001: LD_VAR 0 4
22005: PPUSH
22006: EMPTY
22007: PPUSH
22008: CALL_OW 1
22012: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
22013: LD_VAR 0 1
22017: PPUSH
22018: LD_INT 0
22020: PPUSH
22021: CALL_OW 505
// end ; end ;
22025: LD_VAR 0 2
22029: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
22030: LD_INT 0
22032: PPUSH
22033: PPUSH
22034: PPUSH
// if not hack in hackTanks or not vehicles then
22035: LD_VAR 0 1
22039: PUSH
22040: LD_EXP 84
22044: IN
22045: NOT
22046: PUSH
22047: LD_VAR 0 2
22051: NOT
22052: OR
22053: IFFALSE 22057
// exit ;
22055: GO 22332
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
22057: LD_ADDR_VAR 0 2
22061: PUSH
22062: LD_VAR 0 1
22066: PPUSH
22067: LD_VAR 0 2
22071: PPUSH
22072: LD_INT 1
22074: PPUSH
22075: LD_INT 1
22077: PPUSH
22078: CALL 30478 0 4
22082: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
22083: LD_ADDR_VAR 0 5
22087: PUSH
22088: LD_EXP 84
22092: PPUSH
22093: LD_VAR 0 1
22097: PPUSH
22098: CALL 29828 0 2
22102: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
22103: LD_EXP 85
22107: PUSH
22108: LD_VAR 0 5
22112: ARRAY
22113: PUSH
22114: LD_EXP 86
22118: LESS
22119: IFFALSE 22308
// begin for i := 1 to vehicles do
22121: LD_ADDR_VAR 0 4
22125: PUSH
22126: DOUBLE
22127: LD_INT 1
22129: DEC
22130: ST_TO_ADDR
22131: LD_VAR 0 2
22135: PUSH
22136: FOR_TO
22137: IFFALSE 22306
// begin if hackTanksCaptured [ index ] = hackLimit then
22139: LD_EXP 85
22143: PUSH
22144: LD_VAR 0 5
22148: ARRAY
22149: PUSH
22150: LD_EXP 86
22154: EQUAL
22155: IFFALSE 22159
// break ;
22157: GO 22306
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
22159: LD_ADDR_EXP 88
22163: PUSH
22164: LD_EXP 88
22168: PPUSH
22169: LD_VAR 0 5
22173: PPUSH
22174: LD_EXP 88
22178: PUSH
22179: LD_VAR 0 5
22183: ARRAY
22184: PUSH
22185: LD_INT 1
22187: PLUS
22188: PPUSH
22189: CALL_OW 1
22193: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
22194: LD_ADDR_EXP 85
22198: PUSH
22199: LD_EXP 85
22203: PPUSH
22204: LD_VAR 0 5
22208: PUSH
22209: LD_EXP 85
22213: PUSH
22214: LD_VAR 0 5
22218: ARRAY
22219: PUSH
22220: LD_INT 1
22222: PLUS
22223: PUSH
22224: EMPTY
22225: LIST
22226: LIST
22227: PPUSH
22228: LD_VAR 0 2
22232: PUSH
22233: LD_VAR 0 4
22237: ARRAY
22238: PUSH
22239: LD_VAR 0 2
22243: PUSH
22244: LD_VAR 0 4
22248: ARRAY
22249: PPUSH
22250: CALL_OW 255
22254: PUSH
22255: EMPTY
22256: LIST
22257: LIST
22258: PPUSH
22259: CALL 30043 0 3
22263: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
22264: LD_VAR 0 2
22268: PUSH
22269: LD_VAR 0 4
22273: ARRAY
22274: PPUSH
22275: LD_VAR 0 1
22279: PPUSH
22280: CALL_OW 255
22284: PPUSH
22285: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
22289: LD_VAR 0 2
22293: PUSH
22294: LD_VAR 0 4
22298: ARRAY
22299: PPUSH
22300: CALL_OW 141
// end ;
22304: GO 22136
22306: POP
22307: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22308: LD_VAR 0 1
22312: PPUSH
22313: LD_EXP 85
22317: PUSH
22318: LD_VAR 0 5
22322: ARRAY
22323: PUSH
22324: LD_INT 0
22326: PLUS
22327: PPUSH
22328: CALL_OW 505
// end ;
22332: LD_VAR 0 3
22336: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
22337: LD_INT 0
22339: PPUSH
22340: PPUSH
22341: PPUSH
22342: PPUSH
// if not hack in hackTanks then
22343: LD_VAR 0 1
22347: PUSH
22348: LD_EXP 84
22352: IN
22353: NOT
22354: IFFALSE 22358
// exit ;
22356: GO 22598
// index := GetElementIndex ( hackTanks , hack ) ;
22358: LD_ADDR_VAR 0 4
22362: PUSH
22363: LD_EXP 84
22367: PPUSH
22368: LD_VAR 0 1
22372: PPUSH
22373: CALL 29828 0 2
22377: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
22378: LD_ADDR_VAR 0 3
22382: PUSH
22383: DOUBLE
22384: LD_EXP 85
22388: PUSH
22389: LD_VAR 0 4
22393: ARRAY
22394: INC
22395: ST_TO_ADDR
22396: LD_INT 1
22398: PUSH
22399: FOR_DOWNTO
22400: IFFALSE 22572
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
22402: LD_ADDR_VAR 0 5
22406: PUSH
22407: LD_EXP 85
22411: PUSH
22412: LD_VAR 0 4
22416: ARRAY
22417: PUSH
22418: LD_VAR 0 3
22422: ARRAY
22423: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
22424: LD_VAR 0 5
22428: PUSH
22429: LD_INT 1
22431: ARRAY
22432: PPUSH
22433: CALL_OW 302
22437: NOT
22438: PUSH
22439: LD_VAR 0 5
22443: PUSH
22444: LD_INT 1
22446: ARRAY
22447: PPUSH
22448: CALL_OW 255
22452: PUSH
22453: LD_VAR 0 1
22457: PPUSH
22458: CALL_OW 255
22462: NONEQUAL
22463: OR
22464: IFFALSE 22570
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
22466: LD_VAR 0 5
22470: PUSH
22471: LD_INT 1
22473: ARRAY
22474: PPUSH
22475: CALL_OW 305
22479: PUSH
22480: LD_VAR 0 5
22484: PUSH
22485: LD_INT 1
22487: ARRAY
22488: PPUSH
22489: CALL_OW 255
22493: PUSH
22494: LD_VAR 0 1
22498: PPUSH
22499: CALL_OW 255
22503: EQUAL
22504: AND
22505: IFFALSE 22529
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
22507: LD_VAR 0 5
22511: PUSH
22512: LD_INT 1
22514: ARRAY
22515: PPUSH
22516: LD_VAR 0 5
22520: PUSH
22521: LD_INT 2
22523: ARRAY
22524: PPUSH
22525: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
22529: LD_ADDR_EXP 85
22533: PUSH
22534: LD_EXP 85
22538: PPUSH
22539: LD_VAR 0 4
22543: PPUSH
22544: LD_EXP 85
22548: PUSH
22549: LD_VAR 0 4
22553: ARRAY
22554: PPUSH
22555: LD_VAR 0 3
22559: PPUSH
22560: CALL_OW 3
22564: PPUSH
22565: CALL_OW 1
22569: ST_TO_ADDR
// end ; end ;
22570: GO 22399
22572: POP
22573: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22574: LD_VAR 0 1
22578: PPUSH
22579: LD_EXP 85
22583: PUSH
22584: LD_VAR 0 4
22588: ARRAY
22589: PUSH
22590: LD_INT 0
22592: PLUS
22593: PPUSH
22594: CALL_OW 505
// end ;
22598: LD_VAR 0 2
22602: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
22603: LD_INT 0
22605: PPUSH
22606: PPUSH
22607: PPUSH
22608: PPUSH
// if not hack in hackTanks then
22609: LD_VAR 0 1
22613: PUSH
22614: LD_EXP 84
22618: IN
22619: NOT
22620: IFFALSE 22624
// exit ;
22622: GO 22709
// index := GetElementIndex ( hackTanks , hack ) ;
22624: LD_ADDR_VAR 0 5
22628: PUSH
22629: LD_EXP 84
22633: PPUSH
22634: LD_VAR 0 1
22638: PPUSH
22639: CALL 29828 0 2
22643: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
22644: LD_ADDR_VAR 0 4
22648: PUSH
22649: DOUBLE
22650: LD_INT 1
22652: DEC
22653: ST_TO_ADDR
22654: LD_EXP 85
22658: PUSH
22659: LD_VAR 0 5
22663: ARRAY
22664: PUSH
22665: FOR_TO
22666: IFFALSE 22707
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
22668: LD_EXP 85
22672: PUSH
22673: LD_VAR 0 5
22677: ARRAY
22678: PUSH
22679: LD_VAR 0 4
22683: ARRAY
22684: PUSH
22685: LD_INT 1
22687: ARRAY
22688: PUSH
22689: LD_VAR 0 2
22693: EQUAL
22694: IFFALSE 22705
// KillUnit ( vehicle ) ;
22696: LD_VAR 0 2
22700: PPUSH
22701: CALL_OW 66
22705: GO 22665
22707: POP
22708: POP
// end ;
22709: LD_VAR 0 3
22713: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
22714: LD_EXP 89
22718: NOT
22719: IFFALSE 22754
22721: GO 22723
22723: DISABLE
// begin initMiner := true ;
22724: LD_ADDR_EXP 89
22728: PUSH
22729: LD_INT 1
22731: ST_TO_ADDR
// minersList := [ ] ;
22732: LD_ADDR_EXP 90
22736: PUSH
22737: EMPTY
22738: ST_TO_ADDR
// minerMinesList := [ ] ;
22739: LD_ADDR_EXP 91
22743: PUSH
22744: EMPTY
22745: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
22746: LD_ADDR_EXP 92
22750: PUSH
22751: LD_INT 5
22753: ST_TO_ADDR
// end ;
22754: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
22755: LD_EXP 89
22759: PUSH
22760: LD_INT 34
22762: PUSH
22763: LD_EXP 100
22767: PUSH
22768: EMPTY
22769: LIST
22770: LIST
22771: PPUSH
22772: CALL_OW 69
22776: AND
22777: IFFALSE 23240
22779: GO 22781
22781: DISABLE
22782: LD_INT 0
22784: PPUSH
22785: PPUSH
22786: PPUSH
22787: PPUSH
// begin enable ;
22788: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
22789: LD_ADDR_VAR 0 1
22793: PUSH
22794: LD_INT 34
22796: PUSH
22797: LD_EXP 100
22801: PUSH
22802: EMPTY
22803: LIST
22804: LIST
22805: PPUSH
22806: CALL_OW 69
22810: PUSH
22811: FOR_IN
22812: IFFALSE 22884
// begin if not i in minersList then
22814: LD_VAR 0 1
22818: PUSH
22819: LD_EXP 90
22823: IN
22824: NOT
22825: IFFALSE 22882
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
22827: LD_ADDR_EXP 90
22831: PUSH
22832: LD_EXP 90
22836: PPUSH
22837: LD_EXP 90
22841: PUSH
22842: LD_INT 1
22844: PLUS
22845: PPUSH
22846: LD_VAR 0 1
22850: PPUSH
22851: CALL_OW 1
22855: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
22856: LD_ADDR_EXP 91
22860: PUSH
22861: LD_EXP 91
22865: PPUSH
22866: LD_EXP 91
22870: PUSH
22871: LD_INT 1
22873: PLUS
22874: PPUSH
22875: EMPTY
22876: PPUSH
22877: CALL_OW 1
22881: ST_TO_ADDR
// end end ;
22882: GO 22811
22884: POP
22885: POP
// for i := minerMinesList downto 1 do
22886: LD_ADDR_VAR 0 1
22890: PUSH
22891: DOUBLE
22892: LD_EXP 91
22896: INC
22897: ST_TO_ADDR
22898: LD_INT 1
22900: PUSH
22901: FOR_DOWNTO
22902: IFFALSE 23238
// begin if IsLive ( minersList [ i ] ) then
22904: LD_EXP 90
22908: PUSH
22909: LD_VAR 0 1
22913: ARRAY
22914: PPUSH
22915: CALL_OW 300
22919: IFFALSE 22947
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
22921: LD_EXP 90
22925: PUSH
22926: LD_VAR 0 1
22930: ARRAY
22931: PPUSH
22932: LD_EXP 91
22936: PUSH
22937: LD_VAR 0 1
22941: ARRAY
22942: PPUSH
22943: CALL_OW 505
// if not minerMinesList [ i ] then
22947: LD_EXP 91
22951: PUSH
22952: LD_VAR 0 1
22956: ARRAY
22957: NOT
22958: IFFALSE 22962
// continue ;
22960: GO 22901
// for j := minerMinesList [ i ] downto 1 do
22962: LD_ADDR_VAR 0 2
22966: PUSH
22967: DOUBLE
22968: LD_EXP 91
22972: PUSH
22973: LD_VAR 0 1
22977: ARRAY
22978: INC
22979: ST_TO_ADDR
22980: LD_INT 1
22982: PUSH
22983: FOR_DOWNTO
22984: IFFALSE 23234
// begin side := GetSide ( minersList [ i ] ) ;
22986: LD_ADDR_VAR 0 3
22990: PUSH
22991: LD_EXP 90
22995: PUSH
22996: LD_VAR 0 1
23000: ARRAY
23001: PPUSH
23002: CALL_OW 255
23006: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
23007: LD_ADDR_VAR 0 4
23011: PUSH
23012: LD_EXP 91
23016: PUSH
23017: LD_VAR 0 1
23021: ARRAY
23022: PUSH
23023: LD_VAR 0 2
23027: ARRAY
23028: PUSH
23029: LD_INT 1
23031: ARRAY
23032: PPUSH
23033: LD_EXP 91
23037: PUSH
23038: LD_VAR 0 1
23042: ARRAY
23043: PUSH
23044: LD_VAR 0 2
23048: ARRAY
23049: PUSH
23050: LD_INT 2
23052: ARRAY
23053: PPUSH
23054: CALL_OW 428
23058: ST_TO_ADDR
// if not tmp then
23059: LD_VAR 0 4
23063: NOT
23064: IFFALSE 23068
// continue ;
23066: GO 22983
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
23068: LD_VAR 0 4
23072: PUSH
23073: LD_INT 81
23075: PUSH
23076: LD_VAR 0 3
23080: PUSH
23081: EMPTY
23082: LIST
23083: LIST
23084: PPUSH
23085: CALL_OW 69
23089: IN
23090: PUSH
23091: LD_EXP 91
23095: PUSH
23096: LD_VAR 0 1
23100: ARRAY
23101: PUSH
23102: LD_VAR 0 2
23106: ARRAY
23107: PUSH
23108: LD_INT 1
23110: ARRAY
23111: PPUSH
23112: LD_EXP 91
23116: PUSH
23117: LD_VAR 0 1
23121: ARRAY
23122: PUSH
23123: LD_VAR 0 2
23127: ARRAY
23128: PUSH
23129: LD_INT 2
23131: ARRAY
23132: PPUSH
23133: CALL_OW 458
23137: AND
23138: IFFALSE 23232
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
23140: LD_EXP 91
23144: PUSH
23145: LD_VAR 0 1
23149: ARRAY
23150: PUSH
23151: LD_VAR 0 2
23155: ARRAY
23156: PUSH
23157: LD_INT 1
23159: ARRAY
23160: PPUSH
23161: LD_EXP 91
23165: PUSH
23166: LD_VAR 0 1
23170: ARRAY
23171: PUSH
23172: LD_VAR 0 2
23176: ARRAY
23177: PUSH
23178: LD_INT 2
23180: ARRAY
23181: PPUSH
23182: LD_VAR 0 3
23186: PPUSH
23187: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
23191: LD_ADDR_EXP 91
23195: PUSH
23196: LD_EXP 91
23200: PPUSH
23201: LD_VAR 0 1
23205: PPUSH
23206: LD_EXP 91
23210: PUSH
23211: LD_VAR 0 1
23215: ARRAY
23216: PPUSH
23217: LD_VAR 0 2
23221: PPUSH
23222: CALL_OW 3
23226: PPUSH
23227: CALL_OW 1
23231: ST_TO_ADDR
// end ; end ;
23232: GO 22983
23234: POP
23235: POP
// end ;
23236: GO 22901
23238: POP
23239: POP
// end ;
23240: PPOPN 4
23242: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
23243: LD_INT 0
23245: PPUSH
23246: PPUSH
// result := false ;
23247: LD_ADDR_VAR 0 4
23251: PUSH
23252: LD_INT 0
23254: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
23255: LD_VAR 0 1
23259: PPUSH
23260: CALL_OW 264
23264: PUSH
23265: LD_EXP 100
23269: EQUAL
23270: NOT
23271: IFFALSE 23275
// exit ;
23273: GO 23515
// index := GetElementIndex ( minersList , unit ) ;
23275: LD_ADDR_VAR 0 5
23279: PUSH
23280: LD_EXP 90
23284: PPUSH
23285: LD_VAR 0 1
23289: PPUSH
23290: CALL 29828 0 2
23294: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
23295: LD_EXP 91
23299: PUSH
23300: LD_VAR 0 5
23304: ARRAY
23305: PUSH
23306: LD_EXP 92
23310: GREATEREQUAL
23311: IFFALSE 23315
// exit ;
23313: GO 23515
// ComMoveXY ( unit , x , y ) ;
23315: LD_VAR 0 1
23319: PPUSH
23320: LD_VAR 0 2
23324: PPUSH
23325: LD_VAR 0 3
23329: PPUSH
23330: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23334: LD_INT 35
23336: PPUSH
23337: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
23341: LD_VAR 0 1
23345: PPUSH
23346: LD_VAR 0 2
23350: PPUSH
23351: LD_VAR 0 3
23355: PPUSH
23356: CALL 60547 0 3
23360: NOT
23361: PUSH
23362: LD_VAR 0 1
23366: PPUSH
23367: CALL_OW 314
23371: AND
23372: IFFALSE 23376
// exit ;
23374: GO 23515
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
23376: LD_VAR 0 2
23380: PPUSH
23381: LD_VAR 0 3
23385: PPUSH
23386: CALL_OW 428
23390: PUSH
23391: LD_VAR 0 1
23395: EQUAL
23396: PUSH
23397: LD_VAR 0 1
23401: PPUSH
23402: CALL_OW 314
23406: NOT
23407: AND
23408: IFFALSE 23334
// PlaySoundXY ( x , y , PlantMine ) ;
23410: LD_VAR 0 2
23414: PPUSH
23415: LD_VAR 0 3
23419: PPUSH
23420: LD_STRING PlantMine
23422: PPUSH
23423: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
23427: LD_VAR 0 2
23431: PPUSH
23432: LD_VAR 0 3
23436: PPUSH
23437: LD_VAR 0 1
23441: PPUSH
23442: CALL_OW 255
23446: PPUSH
23447: LD_INT 0
23449: PPUSH
23450: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
23454: LD_ADDR_EXP 91
23458: PUSH
23459: LD_EXP 91
23463: PPUSH
23464: LD_VAR 0 5
23468: PUSH
23469: LD_EXP 91
23473: PUSH
23474: LD_VAR 0 5
23478: ARRAY
23479: PUSH
23480: LD_INT 1
23482: PLUS
23483: PUSH
23484: EMPTY
23485: LIST
23486: LIST
23487: PPUSH
23488: LD_VAR 0 2
23492: PUSH
23493: LD_VAR 0 3
23497: PUSH
23498: EMPTY
23499: LIST
23500: LIST
23501: PPUSH
23502: CALL 30043 0 3
23506: ST_TO_ADDR
// result := true ;
23507: LD_ADDR_VAR 0 4
23511: PUSH
23512: LD_INT 1
23514: ST_TO_ADDR
// end ;
23515: LD_VAR 0 4
23519: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
23520: LD_INT 0
23522: PPUSH
23523: PPUSH
23524: PPUSH
// if not unit in minersList then
23525: LD_VAR 0 1
23529: PUSH
23530: LD_EXP 90
23534: IN
23535: NOT
23536: IFFALSE 23540
// exit ;
23538: GO 23932
// index := GetElementIndex ( minersList , unit ) ;
23540: LD_ADDR_VAR 0 6
23544: PUSH
23545: LD_EXP 90
23549: PPUSH
23550: LD_VAR 0 1
23554: PPUSH
23555: CALL 29828 0 2
23559: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
23560: LD_ADDR_VAR 0 5
23564: PUSH
23565: DOUBLE
23566: LD_EXP 91
23570: PUSH
23571: LD_VAR 0 6
23575: ARRAY
23576: INC
23577: ST_TO_ADDR
23578: LD_INT 1
23580: PUSH
23581: FOR_DOWNTO
23582: IFFALSE 23743
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
23584: LD_EXP 91
23588: PUSH
23589: LD_VAR 0 6
23593: ARRAY
23594: PUSH
23595: LD_VAR 0 5
23599: ARRAY
23600: PUSH
23601: LD_INT 1
23603: ARRAY
23604: PUSH
23605: LD_VAR 0 2
23609: EQUAL
23610: PUSH
23611: LD_EXP 91
23615: PUSH
23616: LD_VAR 0 6
23620: ARRAY
23621: PUSH
23622: LD_VAR 0 5
23626: ARRAY
23627: PUSH
23628: LD_INT 2
23630: ARRAY
23631: PUSH
23632: LD_VAR 0 3
23636: EQUAL
23637: AND
23638: IFFALSE 23741
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
23640: LD_EXP 91
23644: PUSH
23645: LD_VAR 0 6
23649: ARRAY
23650: PUSH
23651: LD_VAR 0 5
23655: ARRAY
23656: PUSH
23657: LD_INT 1
23659: ARRAY
23660: PPUSH
23661: LD_EXP 91
23665: PUSH
23666: LD_VAR 0 6
23670: ARRAY
23671: PUSH
23672: LD_VAR 0 5
23676: ARRAY
23677: PUSH
23678: LD_INT 2
23680: ARRAY
23681: PPUSH
23682: LD_VAR 0 1
23686: PPUSH
23687: CALL_OW 255
23691: PPUSH
23692: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
23696: LD_ADDR_EXP 91
23700: PUSH
23701: LD_EXP 91
23705: PPUSH
23706: LD_VAR 0 6
23710: PPUSH
23711: LD_EXP 91
23715: PUSH
23716: LD_VAR 0 6
23720: ARRAY
23721: PPUSH
23722: LD_VAR 0 5
23726: PPUSH
23727: CALL_OW 3
23731: PPUSH
23732: CALL_OW 1
23736: ST_TO_ADDR
// exit ;
23737: POP
23738: POP
23739: GO 23932
// end ; end ;
23741: GO 23581
23743: POP
23744: POP
// for i := minerMinesList [ index ] downto 1 do
23745: LD_ADDR_VAR 0 5
23749: PUSH
23750: DOUBLE
23751: LD_EXP 91
23755: PUSH
23756: LD_VAR 0 6
23760: ARRAY
23761: INC
23762: ST_TO_ADDR
23763: LD_INT 1
23765: PUSH
23766: FOR_DOWNTO
23767: IFFALSE 23930
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
23769: LD_EXP 91
23773: PUSH
23774: LD_VAR 0 6
23778: ARRAY
23779: PUSH
23780: LD_VAR 0 5
23784: ARRAY
23785: PUSH
23786: LD_INT 1
23788: ARRAY
23789: PPUSH
23790: LD_EXP 91
23794: PUSH
23795: LD_VAR 0 6
23799: ARRAY
23800: PUSH
23801: LD_VAR 0 5
23805: ARRAY
23806: PUSH
23807: LD_INT 2
23809: ARRAY
23810: PPUSH
23811: LD_VAR 0 2
23815: PPUSH
23816: LD_VAR 0 3
23820: PPUSH
23821: CALL_OW 298
23825: PUSH
23826: LD_INT 6
23828: LESS
23829: IFFALSE 23928
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
23831: LD_EXP 91
23835: PUSH
23836: LD_VAR 0 6
23840: ARRAY
23841: PUSH
23842: LD_VAR 0 5
23846: ARRAY
23847: PUSH
23848: LD_INT 1
23850: ARRAY
23851: PPUSH
23852: LD_EXP 91
23856: PUSH
23857: LD_VAR 0 6
23861: ARRAY
23862: PUSH
23863: LD_VAR 0 5
23867: ARRAY
23868: PUSH
23869: LD_INT 2
23871: ARRAY
23872: PPUSH
23873: LD_VAR 0 1
23877: PPUSH
23878: CALL_OW 255
23882: PPUSH
23883: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
23887: LD_ADDR_EXP 91
23891: PUSH
23892: LD_EXP 91
23896: PPUSH
23897: LD_VAR 0 6
23901: PPUSH
23902: LD_EXP 91
23906: PUSH
23907: LD_VAR 0 6
23911: ARRAY
23912: PPUSH
23913: LD_VAR 0 5
23917: PPUSH
23918: CALL_OW 3
23922: PPUSH
23923: CALL_OW 1
23927: ST_TO_ADDR
// end ; end ;
23928: GO 23766
23930: POP
23931: POP
// end ;
23932: LD_VAR 0 4
23936: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
23937: LD_INT 0
23939: PPUSH
23940: PPUSH
23941: PPUSH
23942: PPUSH
23943: PPUSH
23944: PPUSH
23945: PPUSH
23946: PPUSH
23947: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
23948: LD_VAR 0 1
23952: PPUSH
23953: CALL_OW 264
23957: PUSH
23958: LD_EXP 100
23962: EQUAL
23963: NOT
23964: PUSH
23965: LD_VAR 0 1
23969: PUSH
23970: LD_EXP 90
23974: IN
23975: NOT
23976: OR
23977: IFFALSE 23981
// exit ;
23979: GO 24303
// index := GetElementIndex ( minersList , unit ) ;
23981: LD_ADDR_VAR 0 6
23985: PUSH
23986: LD_EXP 90
23990: PPUSH
23991: LD_VAR 0 1
23995: PPUSH
23996: CALL 29828 0 2
24000: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
24001: LD_ADDR_VAR 0 8
24005: PUSH
24006: LD_EXP 92
24010: PUSH
24011: LD_EXP 91
24015: PUSH
24016: LD_VAR 0 6
24020: ARRAY
24021: MINUS
24022: ST_TO_ADDR
// if not minesFreeAmount then
24023: LD_VAR 0 8
24027: NOT
24028: IFFALSE 24032
// exit ;
24030: GO 24303
// tmp := [ ] ;
24032: LD_ADDR_VAR 0 7
24036: PUSH
24037: EMPTY
24038: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
24039: LD_ADDR_VAR 0 5
24043: PUSH
24044: DOUBLE
24045: LD_INT 1
24047: DEC
24048: ST_TO_ADDR
24049: LD_VAR 0 8
24053: PUSH
24054: FOR_TO
24055: IFFALSE 24250
// begin _d := rand ( 0 , 5 ) ;
24057: LD_ADDR_VAR 0 11
24061: PUSH
24062: LD_INT 0
24064: PPUSH
24065: LD_INT 5
24067: PPUSH
24068: CALL_OW 12
24072: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
24073: LD_ADDR_VAR 0 12
24077: PUSH
24078: LD_INT 2
24080: PPUSH
24081: LD_INT 6
24083: PPUSH
24084: CALL_OW 12
24088: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
24089: LD_ADDR_VAR 0 9
24093: PUSH
24094: LD_VAR 0 2
24098: PPUSH
24099: LD_VAR 0 11
24103: PPUSH
24104: LD_VAR 0 12
24108: PPUSH
24109: CALL_OW 272
24113: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
24114: LD_ADDR_VAR 0 10
24118: PUSH
24119: LD_VAR 0 3
24123: PPUSH
24124: LD_VAR 0 11
24128: PPUSH
24129: LD_VAR 0 12
24133: PPUSH
24134: CALL_OW 273
24138: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
24139: LD_VAR 0 9
24143: PPUSH
24144: LD_VAR 0 10
24148: PPUSH
24149: CALL_OW 488
24153: PUSH
24154: LD_VAR 0 9
24158: PUSH
24159: LD_VAR 0 10
24163: PUSH
24164: EMPTY
24165: LIST
24166: LIST
24167: PUSH
24168: LD_VAR 0 7
24172: IN
24173: NOT
24174: AND
24175: PUSH
24176: LD_VAR 0 9
24180: PPUSH
24181: LD_VAR 0 10
24185: PPUSH
24186: CALL_OW 458
24190: NOT
24191: AND
24192: IFFALSE 24234
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
24194: LD_ADDR_VAR 0 7
24198: PUSH
24199: LD_VAR 0 7
24203: PPUSH
24204: LD_VAR 0 7
24208: PUSH
24209: LD_INT 1
24211: PLUS
24212: PPUSH
24213: LD_VAR 0 9
24217: PUSH
24218: LD_VAR 0 10
24222: PUSH
24223: EMPTY
24224: LIST
24225: LIST
24226: PPUSH
24227: CALL_OW 1
24231: ST_TO_ADDR
24232: GO 24248
// i := i - 1 ;
24234: LD_ADDR_VAR 0 5
24238: PUSH
24239: LD_VAR 0 5
24243: PUSH
24244: LD_INT 1
24246: MINUS
24247: ST_TO_ADDR
// end ;
24248: GO 24054
24250: POP
24251: POP
// for i in tmp do
24252: LD_ADDR_VAR 0 5
24256: PUSH
24257: LD_VAR 0 7
24261: PUSH
24262: FOR_IN
24263: IFFALSE 24301
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
24265: LD_VAR 0 1
24269: PPUSH
24270: LD_VAR 0 5
24274: PUSH
24275: LD_INT 1
24277: ARRAY
24278: PPUSH
24279: LD_VAR 0 5
24283: PUSH
24284: LD_INT 2
24286: ARRAY
24287: PPUSH
24288: CALL 23243 0 3
24292: NOT
24293: IFFALSE 24299
// exit ;
24295: POP
24296: POP
24297: GO 24303
24299: GO 24262
24301: POP
24302: POP
// end ;
24303: LD_VAR 0 4
24307: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
24308: LD_INT 0
24310: PPUSH
24311: PPUSH
24312: PPUSH
24313: PPUSH
24314: PPUSH
24315: PPUSH
24316: PPUSH
// if not GetClass ( unit ) = class_sniper then
24317: LD_VAR 0 1
24321: PPUSH
24322: CALL_OW 257
24326: PUSH
24327: LD_INT 5
24329: EQUAL
24330: NOT
24331: IFFALSE 24335
// exit ;
24333: GO 24723
// dist := 8 ;
24335: LD_ADDR_VAR 0 5
24339: PUSH
24340: LD_INT 8
24342: ST_TO_ADDR
// viewRange := 12 ;
24343: LD_ADDR_VAR 0 7
24347: PUSH
24348: LD_INT 12
24350: ST_TO_ADDR
// side := GetSide ( unit ) ;
24351: LD_ADDR_VAR 0 6
24355: PUSH
24356: LD_VAR 0 1
24360: PPUSH
24361: CALL_OW 255
24365: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
24366: LD_INT 61
24368: PPUSH
24369: LD_VAR 0 6
24373: PPUSH
24374: CALL_OW 321
24378: PUSH
24379: LD_INT 2
24381: EQUAL
24382: IFFALSE 24392
// viewRange := 16 ;
24384: LD_ADDR_VAR 0 7
24388: PUSH
24389: LD_INT 16
24391: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
24392: LD_VAR 0 1
24396: PPUSH
24397: LD_VAR 0 2
24401: PPUSH
24402: LD_VAR 0 3
24406: PPUSH
24407: CALL_OW 297
24411: PUSH
24412: LD_VAR 0 5
24416: GREATER
24417: IFFALSE 24496
// begin ComMoveXY ( unit , x , y ) ;
24419: LD_VAR 0 1
24423: PPUSH
24424: LD_VAR 0 2
24428: PPUSH
24429: LD_VAR 0 3
24433: PPUSH
24434: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24438: LD_INT 35
24440: PPUSH
24441: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
24445: LD_VAR 0 1
24449: PPUSH
24450: LD_VAR 0 2
24454: PPUSH
24455: LD_VAR 0 3
24459: PPUSH
24460: CALL 60547 0 3
24464: NOT
24465: IFFALSE 24469
// exit ;
24467: GO 24723
// until GetDistUnitXY ( unit , x , y ) < dist ;
24469: LD_VAR 0 1
24473: PPUSH
24474: LD_VAR 0 2
24478: PPUSH
24479: LD_VAR 0 3
24483: PPUSH
24484: CALL_OW 297
24488: PUSH
24489: LD_VAR 0 5
24493: LESS
24494: IFFALSE 24438
// end ; ComTurnXY ( unit , x , y ) ;
24496: LD_VAR 0 1
24500: PPUSH
24501: LD_VAR 0 2
24505: PPUSH
24506: LD_VAR 0 3
24510: PPUSH
24511: CALL_OW 118
// wait ( 5 ) ;
24515: LD_INT 5
24517: PPUSH
24518: CALL_OW 67
// _d := GetDir ( unit ) ;
24522: LD_ADDR_VAR 0 10
24526: PUSH
24527: LD_VAR 0 1
24531: PPUSH
24532: CALL_OW 254
24536: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
24537: LD_ADDR_VAR 0 8
24541: PUSH
24542: LD_VAR 0 1
24546: PPUSH
24547: CALL_OW 250
24551: PPUSH
24552: LD_VAR 0 10
24556: PPUSH
24557: LD_VAR 0 5
24561: PPUSH
24562: CALL_OW 272
24566: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
24567: LD_ADDR_VAR 0 9
24571: PUSH
24572: LD_VAR 0 1
24576: PPUSH
24577: CALL_OW 251
24581: PPUSH
24582: LD_VAR 0 10
24586: PPUSH
24587: LD_VAR 0 5
24591: PPUSH
24592: CALL_OW 273
24596: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24597: LD_VAR 0 8
24601: PPUSH
24602: LD_VAR 0 9
24606: PPUSH
24607: CALL_OW 488
24611: NOT
24612: IFFALSE 24616
// exit ;
24614: GO 24723
// ComAnimCustom ( unit , 1 ) ;
24616: LD_VAR 0 1
24620: PPUSH
24621: LD_INT 1
24623: PPUSH
24624: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
24628: LD_VAR 0 8
24632: PPUSH
24633: LD_VAR 0 9
24637: PPUSH
24638: LD_VAR 0 6
24642: PPUSH
24643: LD_VAR 0 7
24647: PPUSH
24648: CALL_OW 330
// repeat wait ( 1 ) ;
24652: LD_INT 1
24654: PPUSH
24655: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
24659: LD_VAR 0 1
24663: PPUSH
24664: CALL_OW 316
24668: PUSH
24669: LD_VAR 0 1
24673: PPUSH
24674: CALL_OW 314
24678: OR
24679: PUSH
24680: LD_VAR 0 1
24684: PPUSH
24685: CALL_OW 302
24689: NOT
24690: OR
24691: PUSH
24692: LD_VAR 0 1
24696: PPUSH
24697: CALL_OW 301
24701: OR
24702: IFFALSE 24652
// RemoveSeeing ( _x , _y , side ) ;
24704: LD_VAR 0 8
24708: PPUSH
24709: LD_VAR 0 9
24713: PPUSH
24714: LD_VAR 0 6
24718: PPUSH
24719: CALL_OW 331
// end ; end_of_file
24723: LD_VAR 0 4
24727: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
24728: LD_INT 0
24730: PPUSH
// ar_miner := 81 ;
24731: LD_ADDR_EXP 100
24735: PUSH
24736: LD_INT 81
24738: ST_TO_ADDR
// ar_crane := 88 ;
24739: LD_ADDR_EXP 99
24743: PUSH
24744: LD_INT 88
24746: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
24747: LD_ADDR_EXP 94
24751: PUSH
24752: LD_INT 89
24754: ST_TO_ADDR
// us_hack := 99 ;
24755: LD_ADDR_EXP 95
24759: PUSH
24760: LD_INT 99
24762: ST_TO_ADDR
// us_artillery := 97 ;
24763: LD_ADDR_EXP 96
24767: PUSH
24768: LD_INT 97
24770: ST_TO_ADDR
// ar_bio_bomb := 91 ;
24771: LD_ADDR_EXP 97
24775: PUSH
24776: LD_INT 91
24778: ST_TO_ADDR
// ar_mortar := 92 ;
24779: LD_ADDR_EXP 98
24783: PUSH
24784: LD_INT 92
24786: ST_TO_ADDR
// ru_flamethrower := 93 ;
24787: LD_ADDR_EXP 101
24791: PUSH
24792: LD_INT 93
24794: ST_TO_ADDR
// ru_radar := 98 ;
24795: LD_ADDR_EXP 93
24799: PUSH
24800: LD_INT 98
24802: ST_TO_ADDR
// tech_Artillery := 80 ;
24803: LD_ADDR_EXP 102
24807: PUSH
24808: LD_INT 80
24810: ST_TO_ADDR
// tech_RadMat := 81 ;
24811: LD_ADDR_EXP 103
24815: PUSH
24816: LD_INT 81
24818: ST_TO_ADDR
// tech_BasicTools := 82 ;
24819: LD_ADDR_EXP 104
24823: PUSH
24824: LD_INT 82
24826: ST_TO_ADDR
// tech_Cargo := 83 ;
24827: LD_ADDR_EXP 105
24831: PUSH
24832: LD_INT 83
24834: ST_TO_ADDR
// tech_Track := 84 ;
24835: LD_ADDR_EXP 106
24839: PUSH
24840: LD_INT 84
24842: ST_TO_ADDR
// tech_Crane := 85 ;
24843: LD_ADDR_EXP 107
24847: PUSH
24848: LD_INT 85
24850: ST_TO_ADDR
// tech_Bulldozer := 86 ;
24851: LD_ADDR_EXP 108
24855: PUSH
24856: LD_INT 86
24858: ST_TO_ADDR
// tech_Hovercraft := 87 ;
24859: LD_ADDR_EXP 109
24863: PUSH
24864: LD_INT 87
24866: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
24867: LD_ADDR_EXP 110
24871: PUSH
24872: LD_INT 88
24874: ST_TO_ADDR
// class_mastodont := 31 ;
24875: LD_ADDR_EXP 111
24879: PUSH
24880: LD_INT 31
24882: ST_TO_ADDR
// class_horse := 21 ;
24883: LD_ADDR_EXP 112
24887: PUSH
24888: LD_INT 21
24890: ST_TO_ADDR
// end ;
24891: LD_VAR 0 1
24895: RET
// every 1 do
24896: GO 24898
24898: DISABLE
// InitGlobalVariables ; end_of_file
24899: CALL 24728 0 0
24903: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
24904: LD_INT 0
24906: PPUSH
24907: PPUSH
// if exist_mode then
24908: LD_VAR 0 2
24912: IFFALSE 24937
// unit := CreateCharacter ( prefix & ident ) else
24914: LD_ADDR_VAR 0 5
24918: PUSH
24919: LD_VAR 0 3
24923: PUSH
24924: LD_VAR 0 1
24928: STR
24929: PPUSH
24930: CALL_OW 34
24934: ST_TO_ADDR
24935: GO 24952
// unit := NewCharacter ( ident ) ;
24937: LD_ADDR_VAR 0 5
24941: PUSH
24942: LD_VAR 0 1
24946: PPUSH
24947: CALL_OW 25
24951: ST_TO_ADDR
// result := unit ;
24952: LD_ADDR_VAR 0 4
24956: PUSH
24957: LD_VAR 0 5
24961: ST_TO_ADDR
// end ;
24962: LD_VAR 0 4
24966: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
24967: LD_INT 0
24969: PPUSH
24970: PPUSH
// if not side or not nation then
24971: LD_VAR 0 1
24975: NOT
24976: PUSH
24977: LD_VAR 0 2
24981: NOT
24982: OR
24983: IFFALSE 24987
// exit ;
24985: GO 25755
// case nation of nation_american :
24987: LD_VAR 0 2
24991: PUSH
24992: LD_INT 1
24994: DOUBLE
24995: EQUAL
24996: IFTRUE 25000
24998: GO 25214
25000: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
25001: LD_ADDR_VAR 0 4
25005: PUSH
25006: LD_INT 35
25008: PUSH
25009: LD_INT 45
25011: PUSH
25012: LD_INT 46
25014: PUSH
25015: LD_INT 47
25017: PUSH
25018: LD_INT 82
25020: PUSH
25021: LD_INT 83
25023: PUSH
25024: LD_INT 84
25026: PUSH
25027: LD_INT 85
25029: PUSH
25030: LD_INT 86
25032: PUSH
25033: LD_INT 1
25035: PUSH
25036: LD_INT 2
25038: PUSH
25039: LD_INT 6
25041: PUSH
25042: LD_INT 15
25044: PUSH
25045: LD_INT 16
25047: PUSH
25048: LD_INT 7
25050: PUSH
25051: LD_INT 12
25053: PUSH
25054: LD_INT 13
25056: PUSH
25057: LD_INT 10
25059: PUSH
25060: LD_INT 14
25062: PUSH
25063: LD_INT 20
25065: PUSH
25066: LD_INT 21
25068: PUSH
25069: LD_INT 22
25071: PUSH
25072: LD_INT 25
25074: PUSH
25075: LD_INT 32
25077: PUSH
25078: LD_INT 27
25080: PUSH
25081: LD_INT 36
25083: PUSH
25084: LD_INT 69
25086: PUSH
25087: LD_INT 39
25089: PUSH
25090: LD_INT 34
25092: PUSH
25093: LD_INT 40
25095: PUSH
25096: LD_INT 48
25098: PUSH
25099: LD_INT 49
25101: PUSH
25102: LD_INT 50
25104: PUSH
25105: LD_INT 51
25107: PUSH
25108: LD_INT 52
25110: PUSH
25111: LD_INT 53
25113: PUSH
25114: LD_INT 54
25116: PUSH
25117: LD_INT 55
25119: PUSH
25120: LD_INT 56
25122: PUSH
25123: LD_INT 57
25125: PUSH
25126: LD_INT 58
25128: PUSH
25129: LD_INT 59
25131: PUSH
25132: LD_INT 60
25134: PUSH
25135: LD_INT 61
25137: PUSH
25138: LD_INT 62
25140: PUSH
25141: LD_INT 80
25143: PUSH
25144: LD_INT 82
25146: PUSH
25147: LD_INT 83
25149: PUSH
25150: LD_INT 84
25152: PUSH
25153: LD_INT 85
25155: PUSH
25156: LD_INT 86
25158: PUSH
25159: EMPTY
25160: LIST
25161: LIST
25162: LIST
25163: LIST
25164: LIST
25165: LIST
25166: LIST
25167: LIST
25168: LIST
25169: LIST
25170: LIST
25171: LIST
25172: LIST
25173: LIST
25174: LIST
25175: LIST
25176: LIST
25177: LIST
25178: LIST
25179: LIST
25180: LIST
25181: LIST
25182: LIST
25183: LIST
25184: LIST
25185: LIST
25186: LIST
25187: LIST
25188: LIST
25189: LIST
25190: LIST
25191: LIST
25192: LIST
25193: LIST
25194: LIST
25195: LIST
25196: LIST
25197: LIST
25198: LIST
25199: LIST
25200: LIST
25201: LIST
25202: LIST
25203: LIST
25204: LIST
25205: LIST
25206: LIST
25207: LIST
25208: LIST
25209: LIST
25210: LIST
25211: ST_TO_ADDR
25212: GO 25679
25214: LD_INT 2
25216: DOUBLE
25217: EQUAL
25218: IFTRUE 25222
25220: GO 25448
25222: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
25223: LD_ADDR_VAR 0 4
25227: PUSH
25228: LD_INT 35
25230: PUSH
25231: LD_INT 45
25233: PUSH
25234: LD_INT 46
25236: PUSH
25237: LD_INT 47
25239: PUSH
25240: LD_INT 82
25242: PUSH
25243: LD_INT 83
25245: PUSH
25246: LD_INT 84
25248: PUSH
25249: LD_INT 85
25251: PUSH
25252: LD_INT 87
25254: PUSH
25255: LD_INT 70
25257: PUSH
25258: LD_INT 1
25260: PUSH
25261: LD_INT 11
25263: PUSH
25264: LD_INT 3
25266: PUSH
25267: LD_INT 4
25269: PUSH
25270: LD_INT 5
25272: PUSH
25273: LD_INT 6
25275: PUSH
25276: LD_INT 15
25278: PUSH
25279: LD_INT 18
25281: PUSH
25282: LD_INT 7
25284: PUSH
25285: LD_INT 17
25287: PUSH
25288: LD_INT 8
25290: PUSH
25291: LD_INT 20
25293: PUSH
25294: LD_INT 21
25296: PUSH
25297: LD_INT 22
25299: PUSH
25300: LD_INT 72
25302: PUSH
25303: LD_INT 26
25305: PUSH
25306: LD_INT 69
25308: PUSH
25309: LD_INT 39
25311: PUSH
25312: LD_INT 40
25314: PUSH
25315: LD_INT 41
25317: PUSH
25318: LD_INT 42
25320: PUSH
25321: LD_INT 43
25323: PUSH
25324: LD_INT 48
25326: PUSH
25327: LD_INT 49
25329: PUSH
25330: LD_INT 50
25332: PUSH
25333: LD_INT 51
25335: PUSH
25336: LD_INT 52
25338: PUSH
25339: LD_INT 53
25341: PUSH
25342: LD_INT 54
25344: PUSH
25345: LD_INT 55
25347: PUSH
25348: LD_INT 56
25350: PUSH
25351: LD_INT 60
25353: PUSH
25354: LD_INT 61
25356: PUSH
25357: LD_INT 62
25359: PUSH
25360: LD_INT 66
25362: PUSH
25363: LD_INT 67
25365: PUSH
25366: LD_INT 68
25368: PUSH
25369: LD_INT 81
25371: PUSH
25372: LD_INT 82
25374: PUSH
25375: LD_INT 83
25377: PUSH
25378: LD_INT 84
25380: PUSH
25381: LD_INT 85
25383: PUSH
25384: LD_INT 87
25386: PUSH
25387: LD_INT 88
25389: PUSH
25390: EMPTY
25391: LIST
25392: LIST
25393: LIST
25394: LIST
25395: LIST
25396: LIST
25397: LIST
25398: LIST
25399: LIST
25400: LIST
25401: LIST
25402: LIST
25403: LIST
25404: LIST
25405: LIST
25406: LIST
25407: LIST
25408: LIST
25409: LIST
25410: LIST
25411: LIST
25412: LIST
25413: LIST
25414: LIST
25415: LIST
25416: LIST
25417: LIST
25418: LIST
25419: LIST
25420: LIST
25421: LIST
25422: LIST
25423: LIST
25424: LIST
25425: LIST
25426: LIST
25427: LIST
25428: LIST
25429: LIST
25430: LIST
25431: LIST
25432: LIST
25433: LIST
25434: LIST
25435: LIST
25436: LIST
25437: LIST
25438: LIST
25439: LIST
25440: LIST
25441: LIST
25442: LIST
25443: LIST
25444: LIST
25445: ST_TO_ADDR
25446: GO 25679
25448: LD_INT 3
25450: DOUBLE
25451: EQUAL
25452: IFTRUE 25456
25454: GO 25678
25456: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
25457: LD_ADDR_VAR 0 4
25461: PUSH
25462: LD_INT 46
25464: PUSH
25465: LD_INT 47
25467: PUSH
25468: LD_INT 1
25470: PUSH
25471: LD_INT 2
25473: PUSH
25474: LD_INT 82
25476: PUSH
25477: LD_INT 83
25479: PUSH
25480: LD_INT 84
25482: PUSH
25483: LD_INT 85
25485: PUSH
25486: LD_INT 86
25488: PUSH
25489: LD_INT 11
25491: PUSH
25492: LD_INT 9
25494: PUSH
25495: LD_INT 20
25497: PUSH
25498: LD_INT 19
25500: PUSH
25501: LD_INT 21
25503: PUSH
25504: LD_INT 24
25506: PUSH
25507: LD_INT 22
25509: PUSH
25510: LD_INT 25
25512: PUSH
25513: LD_INT 28
25515: PUSH
25516: LD_INT 29
25518: PUSH
25519: LD_INT 30
25521: PUSH
25522: LD_INT 31
25524: PUSH
25525: LD_INT 37
25527: PUSH
25528: LD_INT 38
25530: PUSH
25531: LD_INT 32
25533: PUSH
25534: LD_INT 27
25536: PUSH
25537: LD_INT 33
25539: PUSH
25540: LD_INT 69
25542: PUSH
25543: LD_INT 39
25545: PUSH
25546: LD_INT 34
25548: PUSH
25549: LD_INT 40
25551: PUSH
25552: LD_INT 71
25554: PUSH
25555: LD_INT 23
25557: PUSH
25558: LD_INT 44
25560: PUSH
25561: LD_INT 48
25563: PUSH
25564: LD_INT 49
25566: PUSH
25567: LD_INT 50
25569: PUSH
25570: LD_INT 51
25572: PUSH
25573: LD_INT 52
25575: PUSH
25576: LD_INT 53
25578: PUSH
25579: LD_INT 54
25581: PUSH
25582: LD_INT 55
25584: PUSH
25585: LD_INT 56
25587: PUSH
25588: LD_INT 57
25590: PUSH
25591: LD_INT 58
25593: PUSH
25594: LD_INT 59
25596: PUSH
25597: LD_INT 63
25599: PUSH
25600: LD_INT 64
25602: PUSH
25603: LD_INT 65
25605: PUSH
25606: LD_INT 82
25608: PUSH
25609: LD_INT 83
25611: PUSH
25612: LD_INT 84
25614: PUSH
25615: LD_INT 85
25617: PUSH
25618: LD_INT 86
25620: PUSH
25621: EMPTY
25622: LIST
25623: LIST
25624: LIST
25625: LIST
25626: LIST
25627: LIST
25628: LIST
25629: LIST
25630: LIST
25631: LIST
25632: LIST
25633: LIST
25634: LIST
25635: LIST
25636: LIST
25637: LIST
25638: LIST
25639: LIST
25640: LIST
25641: LIST
25642: LIST
25643: LIST
25644: LIST
25645: LIST
25646: LIST
25647: LIST
25648: LIST
25649: LIST
25650: LIST
25651: LIST
25652: LIST
25653: LIST
25654: LIST
25655: LIST
25656: LIST
25657: LIST
25658: LIST
25659: LIST
25660: LIST
25661: LIST
25662: LIST
25663: LIST
25664: LIST
25665: LIST
25666: LIST
25667: LIST
25668: LIST
25669: LIST
25670: LIST
25671: LIST
25672: LIST
25673: LIST
25674: LIST
25675: ST_TO_ADDR
25676: GO 25679
25678: POP
// if state > - 1 and state < 3 then
25679: LD_VAR 0 3
25683: PUSH
25684: LD_INT 1
25686: NEG
25687: GREATER
25688: PUSH
25689: LD_VAR 0 3
25693: PUSH
25694: LD_INT 3
25696: LESS
25697: AND
25698: IFFALSE 25755
// for i in result do
25700: LD_ADDR_VAR 0 5
25704: PUSH
25705: LD_VAR 0 4
25709: PUSH
25710: FOR_IN
25711: IFFALSE 25753
// if GetTech ( i , side ) <> state then
25713: LD_VAR 0 5
25717: PPUSH
25718: LD_VAR 0 1
25722: PPUSH
25723: CALL_OW 321
25727: PUSH
25728: LD_VAR 0 3
25732: NONEQUAL
25733: IFFALSE 25751
// result := result diff i ;
25735: LD_ADDR_VAR 0 4
25739: PUSH
25740: LD_VAR 0 4
25744: PUSH
25745: LD_VAR 0 5
25749: DIFF
25750: ST_TO_ADDR
25751: GO 25710
25753: POP
25754: POP
// end ;
25755: LD_VAR 0 4
25759: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
25760: LD_INT 0
25762: PPUSH
25763: PPUSH
25764: PPUSH
// result := true ;
25765: LD_ADDR_VAR 0 3
25769: PUSH
25770: LD_INT 1
25772: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
25773: LD_ADDR_VAR 0 5
25777: PUSH
25778: LD_VAR 0 2
25782: PPUSH
25783: CALL_OW 480
25787: ST_TO_ADDR
// if not tmp then
25788: LD_VAR 0 5
25792: NOT
25793: IFFALSE 25797
// exit ;
25795: GO 25846
// for i in tmp do
25797: LD_ADDR_VAR 0 4
25801: PUSH
25802: LD_VAR 0 5
25806: PUSH
25807: FOR_IN
25808: IFFALSE 25844
// if GetTech ( i , side ) <> state_researched then
25810: LD_VAR 0 4
25814: PPUSH
25815: LD_VAR 0 1
25819: PPUSH
25820: CALL_OW 321
25824: PUSH
25825: LD_INT 2
25827: NONEQUAL
25828: IFFALSE 25842
// begin result := false ;
25830: LD_ADDR_VAR 0 3
25834: PUSH
25835: LD_INT 0
25837: ST_TO_ADDR
// exit ;
25838: POP
25839: POP
25840: GO 25846
// end ;
25842: GO 25807
25844: POP
25845: POP
// end ;
25846: LD_VAR 0 3
25850: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
25851: LD_INT 0
25853: PPUSH
25854: PPUSH
25855: PPUSH
25856: PPUSH
25857: PPUSH
25858: PPUSH
25859: PPUSH
25860: PPUSH
25861: PPUSH
25862: PPUSH
25863: PPUSH
25864: PPUSH
25865: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
25866: LD_VAR 0 1
25870: NOT
25871: PUSH
25872: LD_VAR 0 1
25876: PPUSH
25877: CALL_OW 257
25881: PUSH
25882: LD_INT 9
25884: NONEQUAL
25885: OR
25886: IFFALSE 25890
// exit ;
25888: GO 26463
// side := GetSide ( unit ) ;
25890: LD_ADDR_VAR 0 9
25894: PUSH
25895: LD_VAR 0 1
25899: PPUSH
25900: CALL_OW 255
25904: ST_TO_ADDR
// tech_space := tech_spacanom ;
25905: LD_ADDR_VAR 0 12
25909: PUSH
25910: LD_INT 29
25912: ST_TO_ADDR
// tech_time := tech_taurad ;
25913: LD_ADDR_VAR 0 13
25917: PUSH
25918: LD_INT 28
25920: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
25921: LD_ADDR_VAR 0 11
25925: PUSH
25926: LD_VAR 0 1
25930: PPUSH
25931: CALL_OW 310
25935: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
25936: LD_VAR 0 11
25940: PPUSH
25941: CALL_OW 247
25945: PUSH
25946: LD_INT 2
25948: EQUAL
25949: IFFALSE 25953
// exit ;
25951: GO 26463
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25953: LD_ADDR_VAR 0 8
25957: PUSH
25958: LD_INT 81
25960: PUSH
25961: LD_VAR 0 9
25965: PUSH
25966: EMPTY
25967: LIST
25968: LIST
25969: PUSH
25970: LD_INT 3
25972: PUSH
25973: LD_INT 21
25975: PUSH
25976: LD_INT 3
25978: PUSH
25979: EMPTY
25980: LIST
25981: LIST
25982: PUSH
25983: EMPTY
25984: LIST
25985: LIST
25986: PUSH
25987: EMPTY
25988: LIST
25989: LIST
25990: PPUSH
25991: CALL_OW 69
25995: ST_TO_ADDR
// if not tmp then
25996: LD_VAR 0 8
26000: NOT
26001: IFFALSE 26005
// exit ;
26003: GO 26463
// if in_unit then
26005: LD_VAR 0 11
26009: IFFALSE 26033
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
26011: LD_ADDR_VAR 0 10
26015: PUSH
26016: LD_VAR 0 8
26020: PPUSH
26021: LD_VAR 0 11
26025: PPUSH
26026: CALL_OW 74
26030: ST_TO_ADDR
26031: GO 26053
// enemy := NearestUnitToUnit ( tmp , unit ) ;
26033: LD_ADDR_VAR 0 10
26037: PUSH
26038: LD_VAR 0 8
26042: PPUSH
26043: LD_VAR 0 1
26047: PPUSH
26048: CALL_OW 74
26052: ST_TO_ADDR
// if not enemy then
26053: LD_VAR 0 10
26057: NOT
26058: IFFALSE 26062
// exit ;
26060: GO 26463
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
26062: LD_VAR 0 11
26066: PUSH
26067: LD_VAR 0 11
26071: PPUSH
26072: LD_VAR 0 10
26076: PPUSH
26077: CALL_OW 296
26081: PUSH
26082: LD_INT 13
26084: GREATER
26085: AND
26086: PUSH
26087: LD_VAR 0 1
26091: PPUSH
26092: LD_VAR 0 10
26096: PPUSH
26097: CALL_OW 296
26101: PUSH
26102: LD_INT 12
26104: GREATER
26105: OR
26106: IFFALSE 26110
// exit ;
26108: GO 26463
// missile := [ 1 ] ;
26110: LD_ADDR_VAR 0 14
26114: PUSH
26115: LD_INT 1
26117: PUSH
26118: EMPTY
26119: LIST
26120: ST_TO_ADDR
// if Researched ( side , tech_space ) then
26121: LD_VAR 0 9
26125: PPUSH
26126: LD_VAR 0 12
26130: PPUSH
26131: CALL_OW 325
26135: IFFALSE 26164
// missile := Replace ( missile , missile + 1 , 2 ) ;
26137: LD_ADDR_VAR 0 14
26141: PUSH
26142: LD_VAR 0 14
26146: PPUSH
26147: LD_VAR 0 14
26151: PUSH
26152: LD_INT 1
26154: PLUS
26155: PPUSH
26156: LD_INT 2
26158: PPUSH
26159: CALL_OW 1
26163: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
26164: LD_VAR 0 9
26168: PPUSH
26169: LD_VAR 0 13
26173: PPUSH
26174: CALL_OW 325
26178: PUSH
26179: LD_VAR 0 10
26183: PPUSH
26184: CALL_OW 255
26188: PPUSH
26189: LD_VAR 0 13
26193: PPUSH
26194: CALL_OW 325
26198: NOT
26199: AND
26200: IFFALSE 26229
// missile := Replace ( missile , missile + 1 , 3 ) ;
26202: LD_ADDR_VAR 0 14
26206: PUSH
26207: LD_VAR 0 14
26211: PPUSH
26212: LD_VAR 0 14
26216: PUSH
26217: LD_INT 1
26219: PLUS
26220: PPUSH
26221: LD_INT 3
26223: PPUSH
26224: CALL_OW 1
26228: ST_TO_ADDR
// if missile < 2 then
26229: LD_VAR 0 14
26233: PUSH
26234: LD_INT 2
26236: LESS
26237: IFFALSE 26241
// exit ;
26239: GO 26463
// x := GetX ( enemy ) ;
26241: LD_ADDR_VAR 0 4
26245: PUSH
26246: LD_VAR 0 10
26250: PPUSH
26251: CALL_OW 250
26255: ST_TO_ADDR
// y := GetY ( enemy ) ;
26256: LD_ADDR_VAR 0 5
26260: PUSH
26261: LD_VAR 0 10
26265: PPUSH
26266: CALL_OW 251
26270: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
26271: LD_ADDR_VAR 0 6
26275: PUSH
26276: LD_VAR 0 4
26280: PUSH
26281: LD_INT 1
26283: NEG
26284: PPUSH
26285: LD_INT 1
26287: PPUSH
26288: CALL_OW 12
26292: PLUS
26293: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
26294: LD_ADDR_VAR 0 7
26298: PUSH
26299: LD_VAR 0 5
26303: PUSH
26304: LD_INT 1
26306: NEG
26307: PPUSH
26308: LD_INT 1
26310: PPUSH
26311: CALL_OW 12
26315: PLUS
26316: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26317: LD_VAR 0 6
26321: PPUSH
26322: LD_VAR 0 7
26326: PPUSH
26327: CALL_OW 488
26331: NOT
26332: IFFALSE 26354
// begin _x := x ;
26334: LD_ADDR_VAR 0 6
26338: PUSH
26339: LD_VAR 0 4
26343: ST_TO_ADDR
// _y := y ;
26344: LD_ADDR_VAR 0 7
26348: PUSH
26349: LD_VAR 0 5
26353: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
26354: LD_ADDR_VAR 0 3
26358: PUSH
26359: LD_INT 1
26361: PPUSH
26362: LD_VAR 0 14
26366: PPUSH
26367: CALL_OW 12
26371: ST_TO_ADDR
// case i of 1 :
26372: LD_VAR 0 3
26376: PUSH
26377: LD_INT 1
26379: DOUBLE
26380: EQUAL
26381: IFTRUE 26385
26383: GO 26402
26385: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
26386: LD_VAR 0 1
26390: PPUSH
26391: LD_VAR 0 10
26395: PPUSH
26396: CALL_OW 115
26400: GO 26463
26402: LD_INT 2
26404: DOUBLE
26405: EQUAL
26406: IFTRUE 26410
26408: GO 26432
26410: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
26411: LD_VAR 0 1
26415: PPUSH
26416: LD_VAR 0 6
26420: PPUSH
26421: LD_VAR 0 7
26425: PPUSH
26426: CALL_OW 153
26430: GO 26463
26432: LD_INT 3
26434: DOUBLE
26435: EQUAL
26436: IFTRUE 26440
26438: GO 26462
26440: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
26441: LD_VAR 0 1
26445: PPUSH
26446: LD_VAR 0 6
26450: PPUSH
26451: LD_VAR 0 7
26455: PPUSH
26456: CALL_OW 154
26460: GO 26463
26462: POP
// end ;
26463: LD_VAR 0 2
26467: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
26468: LD_INT 0
26470: PPUSH
26471: PPUSH
26472: PPUSH
26473: PPUSH
26474: PPUSH
26475: PPUSH
// if not unit or not building then
26476: LD_VAR 0 1
26480: NOT
26481: PUSH
26482: LD_VAR 0 2
26486: NOT
26487: OR
26488: IFFALSE 26492
// exit ;
26490: GO 26650
// x := GetX ( building ) ;
26492: LD_ADDR_VAR 0 5
26496: PUSH
26497: LD_VAR 0 2
26501: PPUSH
26502: CALL_OW 250
26506: ST_TO_ADDR
// y := GetY ( building ) ;
26507: LD_ADDR_VAR 0 6
26511: PUSH
26512: LD_VAR 0 2
26516: PPUSH
26517: CALL_OW 251
26521: ST_TO_ADDR
// for i = 0 to 5 do
26522: LD_ADDR_VAR 0 4
26526: PUSH
26527: DOUBLE
26528: LD_INT 0
26530: DEC
26531: ST_TO_ADDR
26532: LD_INT 5
26534: PUSH
26535: FOR_TO
26536: IFFALSE 26648
// begin _x := ShiftX ( x , i , 3 ) ;
26538: LD_ADDR_VAR 0 7
26542: PUSH
26543: LD_VAR 0 5
26547: PPUSH
26548: LD_VAR 0 4
26552: PPUSH
26553: LD_INT 3
26555: PPUSH
26556: CALL_OW 272
26560: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
26561: LD_ADDR_VAR 0 8
26565: PUSH
26566: LD_VAR 0 6
26570: PPUSH
26571: LD_VAR 0 4
26575: PPUSH
26576: LD_INT 3
26578: PPUSH
26579: CALL_OW 273
26583: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26584: LD_VAR 0 7
26588: PPUSH
26589: LD_VAR 0 8
26593: PPUSH
26594: CALL_OW 488
26598: NOT
26599: IFFALSE 26603
// continue ;
26601: GO 26535
// if HexInfo ( _x , _y ) = 0 then
26603: LD_VAR 0 7
26607: PPUSH
26608: LD_VAR 0 8
26612: PPUSH
26613: CALL_OW 428
26617: PUSH
26618: LD_INT 0
26620: EQUAL
26621: IFFALSE 26646
// begin ComMoveXY ( unit , _x , _y ) ;
26623: LD_VAR 0 1
26627: PPUSH
26628: LD_VAR 0 7
26632: PPUSH
26633: LD_VAR 0 8
26637: PPUSH
26638: CALL_OW 111
// exit ;
26642: POP
26643: POP
26644: GO 26650
// end ; end ;
26646: GO 26535
26648: POP
26649: POP
// end ;
26650: LD_VAR 0 3
26654: RET
// export function ScanBase ( side , base_area ) ; begin
26655: LD_INT 0
26657: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
26658: LD_ADDR_VAR 0 3
26662: PUSH
26663: LD_VAR 0 2
26667: PPUSH
26668: LD_INT 81
26670: PUSH
26671: LD_VAR 0 1
26675: PUSH
26676: EMPTY
26677: LIST
26678: LIST
26679: PPUSH
26680: CALL_OW 70
26684: ST_TO_ADDR
// end ;
26685: LD_VAR 0 3
26689: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
26690: LD_INT 0
26692: PPUSH
26693: PPUSH
26694: PPUSH
26695: PPUSH
// result := false ;
26696: LD_ADDR_VAR 0 2
26700: PUSH
26701: LD_INT 0
26703: ST_TO_ADDR
// side := GetSide ( unit ) ;
26704: LD_ADDR_VAR 0 3
26708: PUSH
26709: LD_VAR 0 1
26713: PPUSH
26714: CALL_OW 255
26718: ST_TO_ADDR
// nat := GetNation ( unit ) ;
26719: LD_ADDR_VAR 0 4
26723: PUSH
26724: LD_VAR 0 1
26728: PPUSH
26729: CALL_OW 248
26733: ST_TO_ADDR
// case nat of 1 :
26734: LD_VAR 0 4
26738: PUSH
26739: LD_INT 1
26741: DOUBLE
26742: EQUAL
26743: IFTRUE 26747
26745: GO 26758
26747: POP
// tech := tech_lassight ; 2 :
26748: LD_ADDR_VAR 0 5
26752: PUSH
26753: LD_INT 12
26755: ST_TO_ADDR
26756: GO 26797
26758: LD_INT 2
26760: DOUBLE
26761: EQUAL
26762: IFTRUE 26766
26764: GO 26777
26766: POP
// tech := tech_mortar ; 3 :
26767: LD_ADDR_VAR 0 5
26771: PUSH
26772: LD_INT 41
26774: ST_TO_ADDR
26775: GO 26797
26777: LD_INT 3
26779: DOUBLE
26780: EQUAL
26781: IFTRUE 26785
26783: GO 26796
26785: POP
// tech := tech_bazooka ; end ;
26786: LD_ADDR_VAR 0 5
26790: PUSH
26791: LD_INT 44
26793: ST_TO_ADDR
26794: GO 26797
26796: POP
// if Researched ( side , tech ) then
26797: LD_VAR 0 3
26801: PPUSH
26802: LD_VAR 0 5
26806: PPUSH
26807: CALL_OW 325
26811: IFFALSE 26838
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
26813: LD_ADDR_VAR 0 2
26817: PUSH
26818: LD_INT 5
26820: PUSH
26821: LD_INT 8
26823: PUSH
26824: LD_INT 9
26826: PUSH
26827: EMPTY
26828: LIST
26829: LIST
26830: LIST
26831: PUSH
26832: LD_VAR 0 4
26836: ARRAY
26837: ST_TO_ADDR
// end ;
26838: LD_VAR 0 2
26842: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
26843: LD_INT 0
26845: PPUSH
26846: PPUSH
26847: PPUSH
// if not mines then
26848: LD_VAR 0 2
26852: NOT
26853: IFFALSE 26857
// exit ;
26855: GO 27001
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26857: LD_ADDR_VAR 0 5
26861: PUSH
26862: LD_INT 81
26864: PUSH
26865: LD_VAR 0 1
26869: PUSH
26870: EMPTY
26871: LIST
26872: LIST
26873: PUSH
26874: LD_INT 3
26876: PUSH
26877: LD_INT 21
26879: PUSH
26880: LD_INT 3
26882: PUSH
26883: EMPTY
26884: LIST
26885: LIST
26886: PUSH
26887: EMPTY
26888: LIST
26889: LIST
26890: PUSH
26891: EMPTY
26892: LIST
26893: LIST
26894: PPUSH
26895: CALL_OW 69
26899: ST_TO_ADDR
// for i in mines do
26900: LD_ADDR_VAR 0 4
26904: PUSH
26905: LD_VAR 0 2
26909: PUSH
26910: FOR_IN
26911: IFFALSE 26999
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
26913: LD_VAR 0 4
26917: PUSH
26918: LD_INT 1
26920: ARRAY
26921: PPUSH
26922: LD_VAR 0 4
26926: PUSH
26927: LD_INT 2
26929: ARRAY
26930: PPUSH
26931: CALL_OW 458
26935: NOT
26936: IFFALSE 26940
// continue ;
26938: GO 26910
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
26940: LD_VAR 0 4
26944: PUSH
26945: LD_INT 1
26947: ARRAY
26948: PPUSH
26949: LD_VAR 0 4
26953: PUSH
26954: LD_INT 2
26956: ARRAY
26957: PPUSH
26958: CALL_OW 428
26962: PUSH
26963: LD_VAR 0 5
26967: IN
26968: IFFALSE 26997
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
26970: LD_VAR 0 4
26974: PUSH
26975: LD_INT 1
26977: ARRAY
26978: PPUSH
26979: LD_VAR 0 4
26983: PUSH
26984: LD_INT 2
26986: ARRAY
26987: PPUSH
26988: LD_VAR 0 1
26992: PPUSH
26993: CALL_OW 456
// end ;
26997: GO 26910
26999: POP
27000: POP
// end ;
27001: LD_VAR 0 3
27005: RET
// export function Count ( array ) ; var i ; begin
27006: LD_INT 0
27008: PPUSH
27009: PPUSH
// result := 0 ;
27010: LD_ADDR_VAR 0 2
27014: PUSH
27015: LD_INT 0
27017: ST_TO_ADDR
// for i in array do
27018: LD_ADDR_VAR 0 3
27022: PUSH
27023: LD_VAR 0 1
27027: PUSH
27028: FOR_IN
27029: IFFALSE 27053
// if i then
27031: LD_VAR 0 3
27035: IFFALSE 27051
// result := result + 1 ;
27037: LD_ADDR_VAR 0 2
27041: PUSH
27042: LD_VAR 0 2
27046: PUSH
27047: LD_INT 1
27049: PLUS
27050: ST_TO_ADDR
27051: GO 27028
27053: POP
27054: POP
// end ;
27055: LD_VAR 0 2
27059: RET
// export function IsEmpty ( building ) ; begin
27060: LD_INT 0
27062: PPUSH
// if not building then
27063: LD_VAR 0 1
27067: NOT
27068: IFFALSE 27072
// exit ;
27070: GO 27115
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
27072: LD_ADDR_VAR 0 2
27076: PUSH
27077: LD_VAR 0 1
27081: PUSH
27082: LD_INT 22
27084: PUSH
27085: LD_VAR 0 1
27089: PPUSH
27090: CALL_OW 255
27094: PUSH
27095: EMPTY
27096: LIST
27097: LIST
27098: PUSH
27099: LD_INT 58
27101: PUSH
27102: EMPTY
27103: LIST
27104: PUSH
27105: EMPTY
27106: LIST
27107: LIST
27108: PPUSH
27109: CALL_OW 69
27113: IN
27114: ST_TO_ADDR
// end ;
27115: LD_VAR 0 2
27119: RET
// export function IsNotFull ( building ) ; var places ; begin
27120: LD_INT 0
27122: PPUSH
27123: PPUSH
// if not building then
27124: LD_VAR 0 1
27128: NOT
27129: IFFALSE 27133
// exit ;
27131: GO 27304
// result := false ;
27133: LD_ADDR_VAR 0 2
27137: PUSH
27138: LD_INT 0
27140: ST_TO_ADDR
// places := 0 ;
27141: LD_ADDR_VAR 0 3
27145: PUSH
27146: LD_INT 0
27148: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
27149: LD_VAR 0 1
27153: PPUSH
27154: CALL_OW 266
27158: PUSH
27159: LD_INT 0
27161: DOUBLE
27162: EQUAL
27163: IFTRUE 27221
27165: LD_INT 1
27167: DOUBLE
27168: EQUAL
27169: IFTRUE 27221
27171: LD_INT 6
27173: DOUBLE
27174: EQUAL
27175: IFTRUE 27221
27177: LD_INT 7
27179: DOUBLE
27180: EQUAL
27181: IFTRUE 27221
27183: LD_INT 8
27185: DOUBLE
27186: EQUAL
27187: IFTRUE 27221
27189: LD_INT 4
27191: DOUBLE
27192: EQUAL
27193: IFTRUE 27221
27195: LD_INT 5
27197: DOUBLE
27198: EQUAL
27199: IFTRUE 27221
27201: LD_INT 2
27203: DOUBLE
27204: EQUAL
27205: IFTRUE 27221
27207: LD_INT 3
27209: DOUBLE
27210: EQUAL
27211: IFTRUE 27221
27213: LD_INT 35
27215: DOUBLE
27216: EQUAL
27217: IFTRUE 27221
27219: GO 27232
27221: POP
// places := 6 ; b_bunker , b_breastwork :
27222: LD_ADDR_VAR 0 3
27226: PUSH
27227: LD_INT 6
27229: ST_TO_ADDR
27230: GO 27277
27232: LD_INT 32
27234: DOUBLE
27235: EQUAL
27236: IFTRUE 27246
27238: LD_INT 31
27240: DOUBLE
27241: EQUAL
27242: IFTRUE 27246
27244: GO 27257
27246: POP
// places := 1 ; b_control_tower :
27247: LD_ADDR_VAR 0 3
27251: PUSH
27252: LD_INT 1
27254: ST_TO_ADDR
27255: GO 27277
27257: LD_INT 36
27259: DOUBLE
27260: EQUAL
27261: IFTRUE 27265
27263: GO 27276
27265: POP
// places := 3 ; end ;
27266: LD_ADDR_VAR 0 3
27270: PUSH
27271: LD_INT 3
27273: ST_TO_ADDR
27274: GO 27277
27276: POP
// if places then
27277: LD_VAR 0 3
27281: IFFALSE 27304
// result := UnitsInside ( building ) < places ;
27283: LD_ADDR_VAR 0 2
27287: PUSH
27288: LD_VAR 0 1
27292: PPUSH
27293: CALL_OW 313
27297: PUSH
27298: LD_VAR 0 3
27302: LESS
27303: ST_TO_ADDR
// end ;
27304: LD_VAR 0 2
27308: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
27309: LD_INT 0
27311: PPUSH
27312: PPUSH
27313: PPUSH
27314: PPUSH
// tmp := [ ] ;
27315: LD_ADDR_VAR 0 3
27319: PUSH
27320: EMPTY
27321: ST_TO_ADDR
// list := [ ] ;
27322: LD_ADDR_VAR 0 5
27326: PUSH
27327: EMPTY
27328: ST_TO_ADDR
// for i = 16 to 25 do
27329: LD_ADDR_VAR 0 4
27333: PUSH
27334: DOUBLE
27335: LD_INT 16
27337: DEC
27338: ST_TO_ADDR
27339: LD_INT 25
27341: PUSH
27342: FOR_TO
27343: IFFALSE 27416
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
27345: LD_ADDR_VAR 0 3
27349: PUSH
27350: LD_VAR 0 3
27354: PUSH
27355: LD_INT 22
27357: PUSH
27358: LD_VAR 0 1
27362: PPUSH
27363: CALL_OW 255
27367: PUSH
27368: EMPTY
27369: LIST
27370: LIST
27371: PUSH
27372: LD_INT 91
27374: PUSH
27375: LD_VAR 0 1
27379: PUSH
27380: LD_INT 6
27382: PUSH
27383: EMPTY
27384: LIST
27385: LIST
27386: LIST
27387: PUSH
27388: LD_INT 30
27390: PUSH
27391: LD_VAR 0 4
27395: PUSH
27396: EMPTY
27397: LIST
27398: LIST
27399: PUSH
27400: EMPTY
27401: LIST
27402: LIST
27403: LIST
27404: PUSH
27405: EMPTY
27406: LIST
27407: PPUSH
27408: CALL_OW 69
27412: ADD
27413: ST_TO_ADDR
27414: GO 27342
27416: POP
27417: POP
// for i = 1 to tmp do
27418: LD_ADDR_VAR 0 4
27422: PUSH
27423: DOUBLE
27424: LD_INT 1
27426: DEC
27427: ST_TO_ADDR
27428: LD_VAR 0 3
27432: PUSH
27433: FOR_TO
27434: IFFALSE 27522
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
27436: LD_ADDR_VAR 0 5
27440: PUSH
27441: LD_VAR 0 5
27445: PUSH
27446: LD_VAR 0 3
27450: PUSH
27451: LD_VAR 0 4
27455: ARRAY
27456: PPUSH
27457: CALL_OW 266
27461: PUSH
27462: LD_VAR 0 3
27466: PUSH
27467: LD_VAR 0 4
27471: ARRAY
27472: PPUSH
27473: CALL_OW 250
27477: PUSH
27478: LD_VAR 0 3
27482: PUSH
27483: LD_VAR 0 4
27487: ARRAY
27488: PPUSH
27489: CALL_OW 251
27493: PUSH
27494: LD_VAR 0 3
27498: PUSH
27499: LD_VAR 0 4
27503: ARRAY
27504: PPUSH
27505: CALL_OW 254
27509: PUSH
27510: EMPTY
27511: LIST
27512: LIST
27513: LIST
27514: LIST
27515: PUSH
27516: EMPTY
27517: LIST
27518: ADD
27519: ST_TO_ADDR
27520: GO 27433
27522: POP
27523: POP
// result := list ;
27524: LD_ADDR_VAR 0 2
27528: PUSH
27529: LD_VAR 0 5
27533: ST_TO_ADDR
// end ;
27534: LD_VAR 0 2
27538: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
27539: LD_INT 0
27541: PPUSH
27542: PPUSH
27543: PPUSH
27544: PPUSH
27545: PPUSH
27546: PPUSH
27547: PPUSH
// if not factory then
27548: LD_VAR 0 1
27552: NOT
27553: IFFALSE 27557
// exit ;
27555: GO 28150
// if control = control_apeman then
27557: LD_VAR 0 4
27561: PUSH
27562: LD_INT 5
27564: EQUAL
27565: IFFALSE 27674
// begin tmp := UnitsInside ( factory ) ;
27567: LD_ADDR_VAR 0 8
27571: PUSH
27572: LD_VAR 0 1
27576: PPUSH
27577: CALL_OW 313
27581: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
27582: LD_VAR 0 8
27586: PPUSH
27587: LD_INT 25
27589: PUSH
27590: LD_INT 12
27592: PUSH
27593: EMPTY
27594: LIST
27595: LIST
27596: PPUSH
27597: CALL_OW 72
27601: NOT
27602: IFFALSE 27612
// control := control_manual ;
27604: LD_ADDR_VAR 0 4
27608: PUSH
27609: LD_INT 1
27611: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
27612: LD_ADDR_VAR 0 8
27616: PUSH
27617: LD_VAR 0 1
27621: PPUSH
27622: CALL 27309 0 1
27626: ST_TO_ADDR
// if tmp then
27627: LD_VAR 0 8
27631: IFFALSE 27674
// begin for i in tmp do
27633: LD_ADDR_VAR 0 7
27637: PUSH
27638: LD_VAR 0 8
27642: PUSH
27643: FOR_IN
27644: IFFALSE 27672
// if i [ 1 ] = b_ext_radio then
27646: LD_VAR 0 7
27650: PUSH
27651: LD_INT 1
27653: ARRAY
27654: PUSH
27655: LD_INT 22
27657: EQUAL
27658: IFFALSE 27670
// begin control := control_remote ;
27660: LD_ADDR_VAR 0 4
27664: PUSH
27665: LD_INT 2
27667: ST_TO_ADDR
// break ;
27668: GO 27672
// end ;
27670: GO 27643
27672: POP
27673: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27674: LD_VAR 0 1
27678: PPUSH
27679: LD_VAR 0 2
27683: PPUSH
27684: LD_VAR 0 3
27688: PPUSH
27689: LD_VAR 0 4
27693: PPUSH
27694: LD_VAR 0 5
27698: PPUSH
27699: CALL_OW 448
27703: IFFALSE 27738
// begin result := [ chassis , engine , control , weapon ] ;
27705: LD_ADDR_VAR 0 6
27709: PUSH
27710: LD_VAR 0 2
27714: PUSH
27715: LD_VAR 0 3
27719: PUSH
27720: LD_VAR 0 4
27724: PUSH
27725: LD_VAR 0 5
27729: PUSH
27730: EMPTY
27731: LIST
27732: LIST
27733: LIST
27734: LIST
27735: ST_TO_ADDR
// exit ;
27736: GO 28150
// end ; _chassis := AvailableChassisList ( factory ) ;
27738: LD_ADDR_VAR 0 9
27742: PUSH
27743: LD_VAR 0 1
27747: PPUSH
27748: CALL_OW 475
27752: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
27753: LD_ADDR_VAR 0 11
27757: PUSH
27758: LD_VAR 0 1
27762: PPUSH
27763: CALL_OW 476
27767: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
27768: LD_ADDR_VAR 0 12
27772: PUSH
27773: LD_VAR 0 1
27777: PPUSH
27778: CALL_OW 477
27782: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
27783: LD_ADDR_VAR 0 10
27787: PUSH
27788: LD_VAR 0 1
27792: PPUSH
27793: CALL_OW 478
27797: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
27798: LD_VAR 0 9
27802: NOT
27803: PUSH
27804: LD_VAR 0 11
27808: NOT
27809: OR
27810: PUSH
27811: LD_VAR 0 12
27815: NOT
27816: OR
27817: PUSH
27818: LD_VAR 0 10
27822: NOT
27823: OR
27824: IFFALSE 27859
// begin result := [ chassis , engine , control , weapon ] ;
27826: LD_ADDR_VAR 0 6
27830: PUSH
27831: LD_VAR 0 2
27835: PUSH
27836: LD_VAR 0 3
27840: PUSH
27841: LD_VAR 0 4
27845: PUSH
27846: LD_VAR 0 5
27850: PUSH
27851: EMPTY
27852: LIST
27853: LIST
27854: LIST
27855: LIST
27856: ST_TO_ADDR
// exit ;
27857: GO 28150
// end ; if not chassis in _chassis then
27859: LD_VAR 0 2
27863: PUSH
27864: LD_VAR 0 9
27868: IN
27869: NOT
27870: IFFALSE 27896
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
27872: LD_ADDR_VAR 0 2
27876: PUSH
27877: LD_VAR 0 9
27881: PUSH
27882: LD_INT 1
27884: PPUSH
27885: LD_VAR 0 9
27889: PPUSH
27890: CALL_OW 12
27894: ARRAY
27895: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
27896: LD_VAR 0 2
27900: PPUSH
27901: LD_VAR 0 3
27905: PPUSH
27906: CALL 28155 0 2
27910: NOT
27911: IFFALSE 27970
// repeat engine := _engine [ 1 ] ;
27913: LD_ADDR_VAR 0 3
27917: PUSH
27918: LD_VAR 0 11
27922: PUSH
27923: LD_INT 1
27925: ARRAY
27926: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
27927: LD_ADDR_VAR 0 11
27931: PUSH
27932: LD_VAR 0 11
27936: PPUSH
27937: LD_INT 1
27939: PPUSH
27940: CALL_OW 3
27944: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
27945: LD_VAR 0 2
27949: PPUSH
27950: LD_VAR 0 3
27954: PPUSH
27955: CALL 28155 0 2
27959: PUSH
27960: LD_VAR 0 11
27964: PUSH
27965: EMPTY
27966: EQUAL
27967: OR
27968: IFFALSE 27913
// if not control in _control then
27970: LD_VAR 0 4
27974: PUSH
27975: LD_VAR 0 12
27979: IN
27980: NOT
27981: IFFALSE 28007
// control := _control [ rand ( 1 , _control ) ] ;
27983: LD_ADDR_VAR 0 4
27987: PUSH
27988: LD_VAR 0 12
27992: PUSH
27993: LD_INT 1
27995: PPUSH
27996: LD_VAR 0 12
28000: PPUSH
28001: CALL_OW 12
28005: ARRAY
28006: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
28007: LD_VAR 0 2
28011: PPUSH
28012: LD_VAR 0 5
28016: PPUSH
28017: CALL 28375 0 2
28021: NOT
28022: IFFALSE 28081
// repeat weapon := _weapon [ 1 ] ;
28024: LD_ADDR_VAR 0 5
28028: PUSH
28029: LD_VAR 0 10
28033: PUSH
28034: LD_INT 1
28036: ARRAY
28037: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
28038: LD_ADDR_VAR 0 10
28042: PUSH
28043: LD_VAR 0 10
28047: PPUSH
28048: LD_INT 1
28050: PPUSH
28051: CALL_OW 3
28055: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
28056: LD_VAR 0 2
28060: PPUSH
28061: LD_VAR 0 5
28065: PPUSH
28066: CALL 28375 0 2
28070: PUSH
28071: LD_VAR 0 10
28075: PUSH
28076: EMPTY
28077: EQUAL
28078: OR
28079: IFFALSE 28024
// result := [ ] ;
28081: LD_ADDR_VAR 0 6
28085: PUSH
28086: EMPTY
28087: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28088: LD_VAR 0 1
28092: PPUSH
28093: LD_VAR 0 2
28097: PPUSH
28098: LD_VAR 0 3
28102: PPUSH
28103: LD_VAR 0 4
28107: PPUSH
28108: LD_VAR 0 5
28112: PPUSH
28113: CALL_OW 448
28117: IFFALSE 28150
// result := [ chassis , engine , control , weapon ] ;
28119: LD_ADDR_VAR 0 6
28123: PUSH
28124: LD_VAR 0 2
28128: PUSH
28129: LD_VAR 0 3
28133: PUSH
28134: LD_VAR 0 4
28138: PUSH
28139: LD_VAR 0 5
28143: PUSH
28144: EMPTY
28145: LIST
28146: LIST
28147: LIST
28148: LIST
28149: ST_TO_ADDR
// end ;
28150: LD_VAR 0 6
28154: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
28155: LD_INT 0
28157: PPUSH
// if not chassis or not engine then
28158: LD_VAR 0 1
28162: NOT
28163: PUSH
28164: LD_VAR 0 2
28168: NOT
28169: OR
28170: IFFALSE 28174
// exit ;
28172: GO 28370
// case engine of engine_solar :
28174: LD_VAR 0 2
28178: PUSH
28179: LD_INT 2
28181: DOUBLE
28182: EQUAL
28183: IFTRUE 28187
28185: GO 28225
28187: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
28188: LD_ADDR_VAR 0 3
28192: PUSH
28193: LD_INT 11
28195: PUSH
28196: LD_INT 12
28198: PUSH
28199: LD_INT 13
28201: PUSH
28202: LD_INT 14
28204: PUSH
28205: LD_INT 1
28207: PUSH
28208: LD_INT 2
28210: PUSH
28211: LD_INT 3
28213: PUSH
28214: EMPTY
28215: LIST
28216: LIST
28217: LIST
28218: LIST
28219: LIST
28220: LIST
28221: LIST
28222: ST_TO_ADDR
28223: GO 28354
28225: LD_INT 1
28227: DOUBLE
28228: EQUAL
28229: IFTRUE 28233
28231: GO 28295
28233: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
28234: LD_ADDR_VAR 0 3
28238: PUSH
28239: LD_INT 11
28241: PUSH
28242: LD_INT 12
28244: PUSH
28245: LD_INT 13
28247: PUSH
28248: LD_INT 14
28250: PUSH
28251: LD_INT 1
28253: PUSH
28254: LD_INT 2
28256: PUSH
28257: LD_INT 3
28259: PUSH
28260: LD_INT 4
28262: PUSH
28263: LD_INT 5
28265: PUSH
28266: LD_INT 21
28268: PUSH
28269: LD_INT 23
28271: PUSH
28272: LD_INT 22
28274: PUSH
28275: LD_INT 24
28277: PUSH
28278: EMPTY
28279: LIST
28280: LIST
28281: LIST
28282: LIST
28283: LIST
28284: LIST
28285: LIST
28286: LIST
28287: LIST
28288: LIST
28289: LIST
28290: LIST
28291: LIST
28292: ST_TO_ADDR
28293: GO 28354
28295: LD_INT 3
28297: DOUBLE
28298: EQUAL
28299: IFTRUE 28303
28301: GO 28353
28303: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28304: LD_ADDR_VAR 0 3
28308: PUSH
28309: LD_INT 13
28311: PUSH
28312: LD_INT 14
28314: PUSH
28315: LD_INT 2
28317: PUSH
28318: LD_INT 3
28320: PUSH
28321: LD_INT 4
28323: PUSH
28324: LD_INT 5
28326: PUSH
28327: LD_INT 21
28329: PUSH
28330: LD_INT 22
28332: PUSH
28333: LD_INT 23
28335: PUSH
28336: LD_INT 24
28338: PUSH
28339: EMPTY
28340: LIST
28341: LIST
28342: LIST
28343: LIST
28344: LIST
28345: LIST
28346: LIST
28347: LIST
28348: LIST
28349: LIST
28350: ST_TO_ADDR
28351: GO 28354
28353: POP
// result := ( chassis in result ) ;
28354: LD_ADDR_VAR 0 3
28358: PUSH
28359: LD_VAR 0 1
28363: PUSH
28364: LD_VAR 0 3
28368: IN
28369: ST_TO_ADDR
// end ;
28370: LD_VAR 0 3
28374: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
28375: LD_INT 0
28377: PPUSH
// if not chassis or not weapon then
28378: LD_VAR 0 1
28382: NOT
28383: PUSH
28384: LD_VAR 0 2
28388: NOT
28389: OR
28390: IFFALSE 28394
// exit ;
28392: GO 29456
// case weapon of us_machine_gun :
28394: LD_VAR 0 2
28398: PUSH
28399: LD_INT 2
28401: DOUBLE
28402: EQUAL
28403: IFTRUE 28407
28405: GO 28437
28407: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
28408: LD_ADDR_VAR 0 3
28412: PUSH
28413: LD_INT 1
28415: PUSH
28416: LD_INT 2
28418: PUSH
28419: LD_INT 3
28421: PUSH
28422: LD_INT 4
28424: PUSH
28425: LD_INT 5
28427: PUSH
28428: EMPTY
28429: LIST
28430: LIST
28431: LIST
28432: LIST
28433: LIST
28434: ST_TO_ADDR
28435: GO 29440
28437: LD_INT 3
28439: DOUBLE
28440: EQUAL
28441: IFTRUE 28445
28443: GO 28475
28445: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
28446: LD_ADDR_VAR 0 3
28450: PUSH
28451: LD_INT 1
28453: PUSH
28454: LD_INT 2
28456: PUSH
28457: LD_INT 3
28459: PUSH
28460: LD_INT 4
28462: PUSH
28463: LD_INT 5
28465: PUSH
28466: EMPTY
28467: LIST
28468: LIST
28469: LIST
28470: LIST
28471: LIST
28472: ST_TO_ADDR
28473: GO 29440
28475: LD_INT 11
28477: DOUBLE
28478: EQUAL
28479: IFTRUE 28483
28481: GO 28513
28483: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
28484: LD_ADDR_VAR 0 3
28488: PUSH
28489: LD_INT 1
28491: PUSH
28492: LD_INT 2
28494: PUSH
28495: LD_INT 3
28497: PUSH
28498: LD_INT 4
28500: PUSH
28501: LD_INT 5
28503: PUSH
28504: EMPTY
28505: LIST
28506: LIST
28507: LIST
28508: LIST
28509: LIST
28510: ST_TO_ADDR
28511: GO 29440
28513: LD_INT 4
28515: DOUBLE
28516: EQUAL
28517: IFTRUE 28521
28519: GO 28547
28521: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
28522: LD_ADDR_VAR 0 3
28526: PUSH
28527: LD_INT 2
28529: PUSH
28530: LD_INT 3
28532: PUSH
28533: LD_INT 4
28535: PUSH
28536: LD_INT 5
28538: PUSH
28539: EMPTY
28540: LIST
28541: LIST
28542: LIST
28543: LIST
28544: ST_TO_ADDR
28545: GO 29440
28547: LD_INT 5
28549: DOUBLE
28550: EQUAL
28551: IFTRUE 28555
28553: GO 28581
28555: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
28556: LD_ADDR_VAR 0 3
28560: PUSH
28561: LD_INT 2
28563: PUSH
28564: LD_INT 3
28566: PUSH
28567: LD_INT 4
28569: PUSH
28570: LD_INT 5
28572: PUSH
28573: EMPTY
28574: LIST
28575: LIST
28576: LIST
28577: LIST
28578: ST_TO_ADDR
28579: GO 29440
28581: LD_INT 9
28583: DOUBLE
28584: EQUAL
28585: IFTRUE 28589
28587: GO 28615
28589: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
28590: LD_ADDR_VAR 0 3
28594: PUSH
28595: LD_INT 2
28597: PUSH
28598: LD_INT 3
28600: PUSH
28601: LD_INT 4
28603: PUSH
28604: LD_INT 5
28606: PUSH
28607: EMPTY
28608: LIST
28609: LIST
28610: LIST
28611: LIST
28612: ST_TO_ADDR
28613: GO 29440
28615: LD_INT 7
28617: DOUBLE
28618: EQUAL
28619: IFTRUE 28623
28621: GO 28649
28623: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
28624: LD_ADDR_VAR 0 3
28628: PUSH
28629: LD_INT 2
28631: PUSH
28632: LD_INT 3
28634: PUSH
28635: LD_INT 4
28637: PUSH
28638: LD_INT 5
28640: PUSH
28641: EMPTY
28642: LIST
28643: LIST
28644: LIST
28645: LIST
28646: ST_TO_ADDR
28647: GO 29440
28649: LD_INT 12
28651: DOUBLE
28652: EQUAL
28653: IFTRUE 28657
28655: GO 28683
28657: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
28658: LD_ADDR_VAR 0 3
28662: PUSH
28663: LD_INT 2
28665: PUSH
28666: LD_INT 3
28668: PUSH
28669: LD_INT 4
28671: PUSH
28672: LD_INT 5
28674: PUSH
28675: EMPTY
28676: LIST
28677: LIST
28678: LIST
28679: LIST
28680: ST_TO_ADDR
28681: GO 29440
28683: LD_INT 13
28685: DOUBLE
28686: EQUAL
28687: IFTRUE 28691
28689: GO 28717
28691: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
28692: LD_ADDR_VAR 0 3
28696: PUSH
28697: LD_INT 2
28699: PUSH
28700: LD_INT 3
28702: PUSH
28703: LD_INT 4
28705: PUSH
28706: LD_INT 5
28708: PUSH
28709: EMPTY
28710: LIST
28711: LIST
28712: LIST
28713: LIST
28714: ST_TO_ADDR
28715: GO 29440
28717: LD_INT 14
28719: DOUBLE
28720: EQUAL
28721: IFTRUE 28725
28723: GO 28743
28725: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
28726: LD_ADDR_VAR 0 3
28730: PUSH
28731: LD_INT 4
28733: PUSH
28734: LD_INT 5
28736: PUSH
28737: EMPTY
28738: LIST
28739: LIST
28740: ST_TO_ADDR
28741: GO 29440
28743: LD_INT 6
28745: DOUBLE
28746: EQUAL
28747: IFTRUE 28751
28749: GO 28769
28751: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
28752: LD_ADDR_VAR 0 3
28756: PUSH
28757: LD_INT 4
28759: PUSH
28760: LD_INT 5
28762: PUSH
28763: EMPTY
28764: LIST
28765: LIST
28766: ST_TO_ADDR
28767: GO 29440
28769: LD_INT 10
28771: DOUBLE
28772: EQUAL
28773: IFTRUE 28777
28775: GO 28795
28777: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
28778: LD_ADDR_VAR 0 3
28782: PUSH
28783: LD_INT 4
28785: PUSH
28786: LD_INT 5
28788: PUSH
28789: EMPTY
28790: LIST
28791: LIST
28792: ST_TO_ADDR
28793: GO 29440
28795: LD_INT 22
28797: DOUBLE
28798: EQUAL
28799: IFTRUE 28803
28801: GO 28829
28803: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
28804: LD_ADDR_VAR 0 3
28808: PUSH
28809: LD_INT 11
28811: PUSH
28812: LD_INT 12
28814: PUSH
28815: LD_INT 13
28817: PUSH
28818: LD_INT 14
28820: PUSH
28821: EMPTY
28822: LIST
28823: LIST
28824: LIST
28825: LIST
28826: ST_TO_ADDR
28827: GO 29440
28829: LD_INT 23
28831: DOUBLE
28832: EQUAL
28833: IFTRUE 28837
28835: GO 28863
28837: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
28838: LD_ADDR_VAR 0 3
28842: PUSH
28843: LD_INT 11
28845: PUSH
28846: LD_INT 12
28848: PUSH
28849: LD_INT 13
28851: PUSH
28852: LD_INT 14
28854: PUSH
28855: EMPTY
28856: LIST
28857: LIST
28858: LIST
28859: LIST
28860: ST_TO_ADDR
28861: GO 29440
28863: LD_INT 24
28865: DOUBLE
28866: EQUAL
28867: IFTRUE 28871
28869: GO 28897
28871: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
28872: LD_ADDR_VAR 0 3
28876: PUSH
28877: LD_INT 11
28879: PUSH
28880: LD_INT 12
28882: PUSH
28883: LD_INT 13
28885: PUSH
28886: LD_INT 14
28888: PUSH
28889: EMPTY
28890: LIST
28891: LIST
28892: LIST
28893: LIST
28894: ST_TO_ADDR
28895: GO 29440
28897: LD_INT 30
28899: DOUBLE
28900: EQUAL
28901: IFTRUE 28905
28903: GO 28931
28905: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
28906: LD_ADDR_VAR 0 3
28910: PUSH
28911: LD_INT 11
28913: PUSH
28914: LD_INT 12
28916: PUSH
28917: LD_INT 13
28919: PUSH
28920: LD_INT 14
28922: PUSH
28923: EMPTY
28924: LIST
28925: LIST
28926: LIST
28927: LIST
28928: ST_TO_ADDR
28929: GO 29440
28931: LD_INT 25
28933: DOUBLE
28934: EQUAL
28935: IFTRUE 28939
28937: GO 28957
28939: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
28940: LD_ADDR_VAR 0 3
28944: PUSH
28945: LD_INT 13
28947: PUSH
28948: LD_INT 14
28950: PUSH
28951: EMPTY
28952: LIST
28953: LIST
28954: ST_TO_ADDR
28955: GO 29440
28957: LD_INT 27
28959: DOUBLE
28960: EQUAL
28961: IFTRUE 28965
28963: GO 28983
28965: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
28966: LD_ADDR_VAR 0 3
28970: PUSH
28971: LD_INT 13
28973: PUSH
28974: LD_INT 14
28976: PUSH
28977: EMPTY
28978: LIST
28979: LIST
28980: ST_TO_ADDR
28981: GO 29440
28983: LD_EXP 98
28987: DOUBLE
28988: EQUAL
28989: IFTRUE 28993
28991: GO 29019
28993: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
28994: LD_ADDR_VAR 0 3
28998: PUSH
28999: LD_INT 11
29001: PUSH
29002: LD_INT 12
29004: PUSH
29005: LD_INT 13
29007: PUSH
29008: LD_INT 14
29010: PUSH
29011: EMPTY
29012: LIST
29013: LIST
29014: LIST
29015: LIST
29016: ST_TO_ADDR
29017: GO 29440
29019: LD_INT 28
29021: DOUBLE
29022: EQUAL
29023: IFTRUE 29027
29025: GO 29045
29027: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
29028: LD_ADDR_VAR 0 3
29032: PUSH
29033: LD_INT 13
29035: PUSH
29036: LD_INT 14
29038: PUSH
29039: EMPTY
29040: LIST
29041: LIST
29042: ST_TO_ADDR
29043: GO 29440
29045: LD_INT 29
29047: DOUBLE
29048: EQUAL
29049: IFTRUE 29053
29051: GO 29071
29053: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
29054: LD_ADDR_VAR 0 3
29058: PUSH
29059: LD_INT 13
29061: PUSH
29062: LD_INT 14
29064: PUSH
29065: EMPTY
29066: LIST
29067: LIST
29068: ST_TO_ADDR
29069: GO 29440
29071: LD_INT 31
29073: DOUBLE
29074: EQUAL
29075: IFTRUE 29079
29077: GO 29097
29079: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
29080: LD_ADDR_VAR 0 3
29084: PUSH
29085: LD_INT 13
29087: PUSH
29088: LD_INT 14
29090: PUSH
29091: EMPTY
29092: LIST
29093: LIST
29094: ST_TO_ADDR
29095: GO 29440
29097: LD_INT 26
29099: DOUBLE
29100: EQUAL
29101: IFTRUE 29105
29103: GO 29123
29105: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
29106: LD_ADDR_VAR 0 3
29110: PUSH
29111: LD_INT 13
29113: PUSH
29114: LD_INT 14
29116: PUSH
29117: EMPTY
29118: LIST
29119: LIST
29120: ST_TO_ADDR
29121: GO 29440
29123: LD_INT 42
29125: DOUBLE
29126: EQUAL
29127: IFTRUE 29131
29129: GO 29157
29131: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
29132: LD_ADDR_VAR 0 3
29136: PUSH
29137: LD_INT 21
29139: PUSH
29140: LD_INT 22
29142: PUSH
29143: LD_INT 23
29145: PUSH
29146: LD_INT 24
29148: PUSH
29149: EMPTY
29150: LIST
29151: LIST
29152: LIST
29153: LIST
29154: ST_TO_ADDR
29155: GO 29440
29157: LD_INT 43
29159: DOUBLE
29160: EQUAL
29161: IFTRUE 29165
29163: GO 29191
29165: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
29166: LD_ADDR_VAR 0 3
29170: PUSH
29171: LD_INT 21
29173: PUSH
29174: LD_INT 22
29176: PUSH
29177: LD_INT 23
29179: PUSH
29180: LD_INT 24
29182: PUSH
29183: EMPTY
29184: LIST
29185: LIST
29186: LIST
29187: LIST
29188: ST_TO_ADDR
29189: GO 29440
29191: LD_INT 44
29193: DOUBLE
29194: EQUAL
29195: IFTRUE 29199
29197: GO 29225
29199: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
29200: LD_ADDR_VAR 0 3
29204: PUSH
29205: LD_INT 21
29207: PUSH
29208: LD_INT 22
29210: PUSH
29211: LD_INT 23
29213: PUSH
29214: LD_INT 24
29216: PUSH
29217: EMPTY
29218: LIST
29219: LIST
29220: LIST
29221: LIST
29222: ST_TO_ADDR
29223: GO 29440
29225: LD_INT 45
29227: DOUBLE
29228: EQUAL
29229: IFTRUE 29233
29231: GO 29259
29233: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
29234: LD_ADDR_VAR 0 3
29238: PUSH
29239: LD_INT 21
29241: PUSH
29242: LD_INT 22
29244: PUSH
29245: LD_INT 23
29247: PUSH
29248: LD_INT 24
29250: PUSH
29251: EMPTY
29252: LIST
29253: LIST
29254: LIST
29255: LIST
29256: ST_TO_ADDR
29257: GO 29440
29259: LD_INT 49
29261: DOUBLE
29262: EQUAL
29263: IFTRUE 29267
29265: GO 29293
29267: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
29268: LD_ADDR_VAR 0 3
29272: PUSH
29273: LD_INT 21
29275: PUSH
29276: LD_INT 22
29278: PUSH
29279: LD_INT 23
29281: PUSH
29282: LD_INT 24
29284: PUSH
29285: EMPTY
29286: LIST
29287: LIST
29288: LIST
29289: LIST
29290: ST_TO_ADDR
29291: GO 29440
29293: LD_INT 51
29295: DOUBLE
29296: EQUAL
29297: IFTRUE 29301
29299: GO 29327
29301: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
29302: LD_ADDR_VAR 0 3
29306: PUSH
29307: LD_INT 21
29309: PUSH
29310: LD_INT 22
29312: PUSH
29313: LD_INT 23
29315: PUSH
29316: LD_INT 24
29318: PUSH
29319: EMPTY
29320: LIST
29321: LIST
29322: LIST
29323: LIST
29324: ST_TO_ADDR
29325: GO 29440
29327: LD_INT 52
29329: DOUBLE
29330: EQUAL
29331: IFTRUE 29335
29333: GO 29361
29335: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
29336: LD_ADDR_VAR 0 3
29340: PUSH
29341: LD_INT 21
29343: PUSH
29344: LD_INT 22
29346: PUSH
29347: LD_INT 23
29349: PUSH
29350: LD_INT 24
29352: PUSH
29353: EMPTY
29354: LIST
29355: LIST
29356: LIST
29357: LIST
29358: ST_TO_ADDR
29359: GO 29440
29361: LD_INT 53
29363: DOUBLE
29364: EQUAL
29365: IFTRUE 29369
29367: GO 29387
29369: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
29370: LD_ADDR_VAR 0 3
29374: PUSH
29375: LD_INT 23
29377: PUSH
29378: LD_INT 24
29380: PUSH
29381: EMPTY
29382: LIST
29383: LIST
29384: ST_TO_ADDR
29385: GO 29440
29387: LD_INT 46
29389: DOUBLE
29390: EQUAL
29391: IFTRUE 29395
29393: GO 29413
29395: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
29396: LD_ADDR_VAR 0 3
29400: PUSH
29401: LD_INT 23
29403: PUSH
29404: LD_INT 24
29406: PUSH
29407: EMPTY
29408: LIST
29409: LIST
29410: ST_TO_ADDR
29411: GO 29440
29413: LD_INT 47
29415: DOUBLE
29416: EQUAL
29417: IFTRUE 29421
29419: GO 29439
29421: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29422: LD_ADDR_VAR 0 3
29426: PUSH
29427: LD_INT 23
29429: PUSH
29430: LD_INT 24
29432: PUSH
29433: EMPTY
29434: LIST
29435: LIST
29436: ST_TO_ADDR
29437: GO 29440
29439: POP
// result := ( chassis in result ) ;
29440: LD_ADDR_VAR 0 3
29444: PUSH
29445: LD_VAR 0 1
29449: PUSH
29450: LD_VAR 0 3
29454: IN
29455: ST_TO_ADDR
// end ;
29456: LD_VAR 0 3
29460: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
29461: LD_INT 0
29463: PPUSH
29464: PPUSH
29465: PPUSH
29466: PPUSH
29467: PPUSH
29468: PPUSH
29469: PPUSH
// result := array ;
29470: LD_ADDR_VAR 0 5
29474: PUSH
29475: LD_VAR 0 1
29479: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
29480: LD_VAR 0 1
29484: NOT
29485: PUSH
29486: LD_VAR 0 2
29490: NOT
29491: OR
29492: PUSH
29493: LD_VAR 0 3
29497: NOT
29498: OR
29499: PUSH
29500: LD_VAR 0 2
29504: PUSH
29505: LD_VAR 0 1
29509: GREATER
29510: OR
29511: PUSH
29512: LD_VAR 0 3
29516: PUSH
29517: LD_VAR 0 1
29521: GREATER
29522: OR
29523: IFFALSE 29527
// exit ;
29525: GO 29823
// if direction then
29527: LD_VAR 0 4
29531: IFFALSE 29595
// begin d := 1 ;
29533: LD_ADDR_VAR 0 9
29537: PUSH
29538: LD_INT 1
29540: ST_TO_ADDR
// if i_from > i_to then
29541: LD_VAR 0 2
29545: PUSH
29546: LD_VAR 0 3
29550: GREATER
29551: IFFALSE 29577
// length := ( array - i_from ) + i_to else
29553: LD_ADDR_VAR 0 11
29557: PUSH
29558: LD_VAR 0 1
29562: PUSH
29563: LD_VAR 0 2
29567: MINUS
29568: PUSH
29569: LD_VAR 0 3
29573: PLUS
29574: ST_TO_ADDR
29575: GO 29593
// length := i_to - i_from ;
29577: LD_ADDR_VAR 0 11
29581: PUSH
29582: LD_VAR 0 3
29586: PUSH
29587: LD_VAR 0 2
29591: MINUS
29592: ST_TO_ADDR
// end else
29593: GO 29656
// begin d := - 1 ;
29595: LD_ADDR_VAR 0 9
29599: PUSH
29600: LD_INT 1
29602: NEG
29603: ST_TO_ADDR
// if i_from > i_to then
29604: LD_VAR 0 2
29608: PUSH
29609: LD_VAR 0 3
29613: GREATER
29614: IFFALSE 29634
// length := i_from - i_to else
29616: LD_ADDR_VAR 0 11
29620: PUSH
29621: LD_VAR 0 2
29625: PUSH
29626: LD_VAR 0 3
29630: MINUS
29631: ST_TO_ADDR
29632: GO 29656
// length := ( array - i_to ) + i_from ;
29634: LD_ADDR_VAR 0 11
29638: PUSH
29639: LD_VAR 0 1
29643: PUSH
29644: LD_VAR 0 3
29648: MINUS
29649: PUSH
29650: LD_VAR 0 2
29654: PLUS
29655: ST_TO_ADDR
// end ; if not length then
29656: LD_VAR 0 11
29660: NOT
29661: IFFALSE 29665
// exit ;
29663: GO 29823
// tmp := array ;
29665: LD_ADDR_VAR 0 10
29669: PUSH
29670: LD_VAR 0 1
29674: ST_TO_ADDR
// for i = 1 to length do
29675: LD_ADDR_VAR 0 6
29679: PUSH
29680: DOUBLE
29681: LD_INT 1
29683: DEC
29684: ST_TO_ADDR
29685: LD_VAR 0 11
29689: PUSH
29690: FOR_TO
29691: IFFALSE 29811
// begin for j = 1 to array do
29693: LD_ADDR_VAR 0 7
29697: PUSH
29698: DOUBLE
29699: LD_INT 1
29701: DEC
29702: ST_TO_ADDR
29703: LD_VAR 0 1
29707: PUSH
29708: FOR_TO
29709: IFFALSE 29797
// begin k := j + d ;
29711: LD_ADDR_VAR 0 8
29715: PUSH
29716: LD_VAR 0 7
29720: PUSH
29721: LD_VAR 0 9
29725: PLUS
29726: ST_TO_ADDR
// if k > array then
29727: LD_VAR 0 8
29731: PUSH
29732: LD_VAR 0 1
29736: GREATER
29737: IFFALSE 29747
// k := 1 ;
29739: LD_ADDR_VAR 0 8
29743: PUSH
29744: LD_INT 1
29746: ST_TO_ADDR
// if not k then
29747: LD_VAR 0 8
29751: NOT
29752: IFFALSE 29764
// k := array ;
29754: LD_ADDR_VAR 0 8
29758: PUSH
29759: LD_VAR 0 1
29763: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
29764: LD_ADDR_VAR 0 10
29768: PUSH
29769: LD_VAR 0 10
29773: PPUSH
29774: LD_VAR 0 8
29778: PPUSH
29779: LD_VAR 0 1
29783: PUSH
29784: LD_VAR 0 7
29788: ARRAY
29789: PPUSH
29790: CALL_OW 1
29794: ST_TO_ADDR
// end ;
29795: GO 29708
29797: POP
29798: POP
// array := tmp ;
29799: LD_ADDR_VAR 0 1
29803: PUSH
29804: LD_VAR 0 10
29808: ST_TO_ADDR
// end ;
29809: GO 29690
29811: POP
29812: POP
// result := array ;
29813: LD_ADDR_VAR 0 5
29817: PUSH
29818: LD_VAR 0 1
29822: ST_TO_ADDR
// end ;
29823: LD_VAR 0 5
29827: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
29828: LD_INT 0
29830: PPUSH
29831: PPUSH
// result := 0 ;
29832: LD_ADDR_VAR 0 3
29836: PUSH
29837: LD_INT 0
29839: ST_TO_ADDR
// if not array or not value in array then
29840: LD_VAR 0 1
29844: NOT
29845: PUSH
29846: LD_VAR 0 2
29850: PUSH
29851: LD_VAR 0 1
29855: IN
29856: NOT
29857: OR
29858: IFFALSE 29862
// exit ;
29860: GO 29916
// for i = 1 to array do
29862: LD_ADDR_VAR 0 4
29866: PUSH
29867: DOUBLE
29868: LD_INT 1
29870: DEC
29871: ST_TO_ADDR
29872: LD_VAR 0 1
29876: PUSH
29877: FOR_TO
29878: IFFALSE 29914
// if value = array [ i ] then
29880: LD_VAR 0 2
29884: PUSH
29885: LD_VAR 0 1
29889: PUSH
29890: LD_VAR 0 4
29894: ARRAY
29895: EQUAL
29896: IFFALSE 29912
// begin result := i ;
29898: LD_ADDR_VAR 0 3
29902: PUSH
29903: LD_VAR 0 4
29907: ST_TO_ADDR
// exit ;
29908: POP
29909: POP
29910: GO 29916
// end ;
29912: GO 29877
29914: POP
29915: POP
// end ;
29916: LD_VAR 0 3
29920: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
29921: LD_INT 0
29923: PPUSH
// vc_chassis := chassis ;
29924: LD_ADDR_OWVAR 37
29928: PUSH
29929: LD_VAR 0 1
29933: ST_TO_ADDR
// vc_engine := engine ;
29934: LD_ADDR_OWVAR 39
29938: PUSH
29939: LD_VAR 0 2
29943: ST_TO_ADDR
// vc_control := control ;
29944: LD_ADDR_OWVAR 38
29948: PUSH
29949: LD_VAR 0 3
29953: ST_TO_ADDR
// vc_weapon := weapon ;
29954: LD_ADDR_OWVAR 40
29958: PUSH
29959: LD_VAR 0 4
29963: ST_TO_ADDR
// vc_fuel_battery := fuel ;
29964: LD_ADDR_OWVAR 41
29968: PUSH
29969: LD_VAR 0 5
29973: ST_TO_ADDR
// end ;
29974: LD_VAR 0 6
29978: RET
// export function WantPlant ( unit ) ; var task ; begin
29979: LD_INT 0
29981: PPUSH
29982: PPUSH
// result := false ;
29983: LD_ADDR_VAR 0 2
29987: PUSH
29988: LD_INT 0
29990: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
29991: LD_ADDR_VAR 0 3
29995: PUSH
29996: LD_VAR 0 1
30000: PPUSH
30001: CALL_OW 437
30005: ST_TO_ADDR
// if task then
30006: LD_VAR 0 3
30010: IFFALSE 30038
// if task [ 1 ] [ 1 ] = p then
30012: LD_VAR 0 3
30016: PUSH
30017: LD_INT 1
30019: ARRAY
30020: PUSH
30021: LD_INT 1
30023: ARRAY
30024: PUSH
30025: LD_STRING p
30027: EQUAL
30028: IFFALSE 30038
// result := true ;
30030: LD_ADDR_VAR 0 2
30034: PUSH
30035: LD_INT 1
30037: ST_TO_ADDR
// end ;
30038: LD_VAR 0 2
30042: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
30043: LD_INT 0
30045: PPUSH
30046: PPUSH
30047: PPUSH
30048: PPUSH
// if pos < 1 then
30049: LD_VAR 0 2
30053: PUSH
30054: LD_INT 1
30056: LESS
30057: IFFALSE 30061
// exit ;
30059: GO 30364
// if pos = 1 then
30061: LD_VAR 0 2
30065: PUSH
30066: LD_INT 1
30068: EQUAL
30069: IFFALSE 30102
// result := Replace ( arr , pos [ 1 ] , value ) else
30071: LD_ADDR_VAR 0 4
30075: PUSH
30076: LD_VAR 0 1
30080: PPUSH
30081: LD_VAR 0 2
30085: PUSH
30086: LD_INT 1
30088: ARRAY
30089: PPUSH
30090: LD_VAR 0 3
30094: PPUSH
30095: CALL_OW 1
30099: ST_TO_ADDR
30100: GO 30364
// begin tmp := arr ;
30102: LD_ADDR_VAR 0 6
30106: PUSH
30107: LD_VAR 0 1
30111: ST_TO_ADDR
// s_arr := [ tmp ] ;
30112: LD_ADDR_VAR 0 7
30116: PUSH
30117: LD_VAR 0 6
30121: PUSH
30122: EMPTY
30123: LIST
30124: ST_TO_ADDR
// for i = 1 to pos - 1 do
30125: LD_ADDR_VAR 0 5
30129: PUSH
30130: DOUBLE
30131: LD_INT 1
30133: DEC
30134: ST_TO_ADDR
30135: LD_VAR 0 2
30139: PUSH
30140: LD_INT 1
30142: MINUS
30143: PUSH
30144: FOR_TO
30145: IFFALSE 30190
// begin tmp := tmp [ pos [ i ] ] ;
30147: LD_ADDR_VAR 0 6
30151: PUSH
30152: LD_VAR 0 6
30156: PUSH
30157: LD_VAR 0 2
30161: PUSH
30162: LD_VAR 0 5
30166: ARRAY
30167: ARRAY
30168: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
30169: LD_ADDR_VAR 0 7
30173: PUSH
30174: LD_VAR 0 7
30178: PUSH
30179: LD_VAR 0 6
30183: PUSH
30184: EMPTY
30185: LIST
30186: ADD
30187: ST_TO_ADDR
// end ;
30188: GO 30144
30190: POP
30191: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
30192: LD_ADDR_VAR 0 6
30196: PUSH
30197: LD_VAR 0 6
30201: PPUSH
30202: LD_VAR 0 2
30206: PUSH
30207: LD_VAR 0 2
30211: ARRAY
30212: PPUSH
30213: LD_VAR 0 3
30217: PPUSH
30218: CALL_OW 1
30222: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
30223: LD_ADDR_VAR 0 7
30227: PUSH
30228: LD_VAR 0 7
30232: PPUSH
30233: LD_VAR 0 7
30237: PPUSH
30238: LD_VAR 0 6
30242: PPUSH
30243: CALL_OW 1
30247: ST_TO_ADDR
// for i = s_arr downto 2 do
30248: LD_ADDR_VAR 0 5
30252: PUSH
30253: DOUBLE
30254: LD_VAR 0 7
30258: INC
30259: ST_TO_ADDR
30260: LD_INT 2
30262: PUSH
30263: FOR_DOWNTO
30264: IFFALSE 30348
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
30266: LD_ADDR_VAR 0 6
30270: PUSH
30271: LD_VAR 0 7
30275: PUSH
30276: LD_VAR 0 5
30280: PUSH
30281: LD_INT 1
30283: MINUS
30284: ARRAY
30285: PPUSH
30286: LD_VAR 0 2
30290: PUSH
30291: LD_VAR 0 5
30295: PUSH
30296: LD_INT 1
30298: MINUS
30299: ARRAY
30300: PPUSH
30301: LD_VAR 0 7
30305: PUSH
30306: LD_VAR 0 5
30310: ARRAY
30311: PPUSH
30312: CALL_OW 1
30316: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
30317: LD_ADDR_VAR 0 7
30321: PUSH
30322: LD_VAR 0 7
30326: PPUSH
30327: LD_VAR 0 5
30331: PUSH
30332: LD_INT 1
30334: MINUS
30335: PPUSH
30336: LD_VAR 0 6
30340: PPUSH
30341: CALL_OW 1
30345: ST_TO_ADDR
// end ;
30346: GO 30263
30348: POP
30349: POP
// result := s_arr [ 1 ] ;
30350: LD_ADDR_VAR 0 4
30354: PUSH
30355: LD_VAR 0 7
30359: PUSH
30360: LD_INT 1
30362: ARRAY
30363: ST_TO_ADDR
// end ; end ;
30364: LD_VAR 0 4
30368: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
30369: LD_INT 0
30371: PPUSH
30372: PPUSH
// if not list then
30373: LD_VAR 0 1
30377: NOT
30378: IFFALSE 30382
// exit ;
30380: GO 30473
// i := list [ pos1 ] ;
30382: LD_ADDR_VAR 0 5
30386: PUSH
30387: LD_VAR 0 1
30391: PUSH
30392: LD_VAR 0 2
30396: ARRAY
30397: ST_TO_ADDR
// if not i then
30398: LD_VAR 0 5
30402: NOT
30403: IFFALSE 30407
// exit ;
30405: GO 30473
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
30407: LD_ADDR_VAR 0 1
30411: PUSH
30412: LD_VAR 0 1
30416: PPUSH
30417: LD_VAR 0 2
30421: PPUSH
30422: LD_VAR 0 1
30426: PUSH
30427: LD_VAR 0 3
30431: ARRAY
30432: PPUSH
30433: CALL_OW 1
30437: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
30438: LD_ADDR_VAR 0 1
30442: PUSH
30443: LD_VAR 0 1
30447: PPUSH
30448: LD_VAR 0 3
30452: PPUSH
30453: LD_VAR 0 5
30457: PPUSH
30458: CALL_OW 1
30462: ST_TO_ADDR
// result := list ;
30463: LD_ADDR_VAR 0 4
30467: PUSH
30468: LD_VAR 0 1
30472: ST_TO_ADDR
// end ;
30473: LD_VAR 0 4
30477: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
30478: LD_INT 0
30480: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
30481: LD_ADDR_VAR 0 5
30485: PUSH
30486: LD_VAR 0 1
30490: PPUSH
30491: CALL_OW 250
30495: PPUSH
30496: LD_VAR 0 1
30500: PPUSH
30501: CALL_OW 251
30505: PPUSH
30506: LD_VAR 0 2
30510: PPUSH
30511: LD_VAR 0 3
30515: PPUSH
30516: LD_VAR 0 4
30520: PPUSH
30521: CALL 30531 0 5
30525: ST_TO_ADDR
// end ;
30526: LD_VAR 0 5
30530: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
30531: LD_INT 0
30533: PPUSH
30534: PPUSH
30535: PPUSH
30536: PPUSH
// if not list then
30537: LD_VAR 0 3
30541: NOT
30542: IFFALSE 30546
// exit ;
30544: GO 30934
// result := [ ] ;
30546: LD_ADDR_VAR 0 6
30550: PUSH
30551: EMPTY
30552: ST_TO_ADDR
// for i in list do
30553: LD_ADDR_VAR 0 7
30557: PUSH
30558: LD_VAR 0 3
30562: PUSH
30563: FOR_IN
30564: IFFALSE 30766
// begin tmp := GetDistUnitXY ( i , x , y ) ;
30566: LD_ADDR_VAR 0 9
30570: PUSH
30571: LD_VAR 0 7
30575: PPUSH
30576: LD_VAR 0 1
30580: PPUSH
30581: LD_VAR 0 2
30585: PPUSH
30586: CALL_OW 297
30590: ST_TO_ADDR
// if not result then
30591: LD_VAR 0 6
30595: NOT
30596: IFFALSE 30622
// result := [ [ i , tmp ] ] else
30598: LD_ADDR_VAR 0 6
30602: PUSH
30603: LD_VAR 0 7
30607: PUSH
30608: LD_VAR 0 9
30612: PUSH
30613: EMPTY
30614: LIST
30615: LIST
30616: PUSH
30617: EMPTY
30618: LIST
30619: ST_TO_ADDR
30620: GO 30764
// begin if result [ result ] [ 2 ] < tmp then
30622: LD_VAR 0 6
30626: PUSH
30627: LD_VAR 0 6
30631: ARRAY
30632: PUSH
30633: LD_INT 2
30635: ARRAY
30636: PUSH
30637: LD_VAR 0 9
30641: LESS
30642: IFFALSE 30684
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
30644: LD_ADDR_VAR 0 6
30648: PUSH
30649: LD_VAR 0 6
30653: PPUSH
30654: LD_VAR 0 6
30658: PUSH
30659: LD_INT 1
30661: PLUS
30662: PPUSH
30663: LD_VAR 0 7
30667: PUSH
30668: LD_VAR 0 9
30672: PUSH
30673: EMPTY
30674: LIST
30675: LIST
30676: PPUSH
30677: CALL_OW 2
30681: ST_TO_ADDR
30682: GO 30764
// for j = 1 to result do
30684: LD_ADDR_VAR 0 8
30688: PUSH
30689: DOUBLE
30690: LD_INT 1
30692: DEC
30693: ST_TO_ADDR
30694: LD_VAR 0 6
30698: PUSH
30699: FOR_TO
30700: IFFALSE 30762
// begin if tmp < result [ j ] [ 2 ] then
30702: LD_VAR 0 9
30706: PUSH
30707: LD_VAR 0 6
30711: PUSH
30712: LD_VAR 0 8
30716: ARRAY
30717: PUSH
30718: LD_INT 2
30720: ARRAY
30721: LESS
30722: IFFALSE 30760
// begin result := Insert ( result , j , [ i , tmp ] ) ;
30724: LD_ADDR_VAR 0 6
30728: PUSH
30729: LD_VAR 0 6
30733: PPUSH
30734: LD_VAR 0 8
30738: PPUSH
30739: LD_VAR 0 7
30743: PUSH
30744: LD_VAR 0 9
30748: PUSH
30749: EMPTY
30750: LIST
30751: LIST
30752: PPUSH
30753: CALL_OW 2
30757: ST_TO_ADDR
// break ;
30758: GO 30762
// end ; end ;
30760: GO 30699
30762: POP
30763: POP
// end ; end ;
30764: GO 30563
30766: POP
30767: POP
// if result and not asc then
30768: LD_VAR 0 6
30772: PUSH
30773: LD_VAR 0 4
30777: NOT
30778: AND
30779: IFFALSE 30854
// begin tmp := result ;
30781: LD_ADDR_VAR 0 9
30785: PUSH
30786: LD_VAR 0 6
30790: ST_TO_ADDR
// for i = tmp downto 1 do
30791: LD_ADDR_VAR 0 7
30795: PUSH
30796: DOUBLE
30797: LD_VAR 0 9
30801: INC
30802: ST_TO_ADDR
30803: LD_INT 1
30805: PUSH
30806: FOR_DOWNTO
30807: IFFALSE 30852
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
30809: LD_ADDR_VAR 0 6
30813: PUSH
30814: LD_VAR 0 6
30818: PPUSH
30819: LD_VAR 0 9
30823: PUSH
30824: LD_VAR 0 7
30828: MINUS
30829: PUSH
30830: LD_INT 1
30832: PLUS
30833: PPUSH
30834: LD_VAR 0 9
30838: PUSH
30839: LD_VAR 0 7
30843: ARRAY
30844: PPUSH
30845: CALL_OW 1
30849: ST_TO_ADDR
30850: GO 30806
30852: POP
30853: POP
// end ; tmp := [ ] ;
30854: LD_ADDR_VAR 0 9
30858: PUSH
30859: EMPTY
30860: ST_TO_ADDR
// if mode then
30861: LD_VAR 0 5
30865: IFFALSE 30934
// begin for i = 1 to result do
30867: LD_ADDR_VAR 0 7
30871: PUSH
30872: DOUBLE
30873: LD_INT 1
30875: DEC
30876: ST_TO_ADDR
30877: LD_VAR 0 6
30881: PUSH
30882: FOR_TO
30883: IFFALSE 30922
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
30885: LD_ADDR_VAR 0 9
30889: PUSH
30890: LD_VAR 0 9
30894: PPUSH
30895: LD_VAR 0 7
30899: PPUSH
30900: LD_VAR 0 6
30904: PUSH
30905: LD_VAR 0 7
30909: ARRAY
30910: PUSH
30911: LD_INT 1
30913: ARRAY
30914: PPUSH
30915: CALL_OW 1
30919: ST_TO_ADDR
30920: GO 30882
30922: POP
30923: POP
// result := tmp ;
30924: LD_ADDR_VAR 0 6
30928: PUSH
30929: LD_VAR 0 9
30933: ST_TO_ADDR
// end ; end ;
30934: LD_VAR 0 6
30938: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
30939: LD_INT 0
30941: PPUSH
30942: PPUSH
30943: PPUSH
30944: PPUSH
30945: PPUSH
30946: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
30947: LD_ADDR_VAR 0 5
30951: PUSH
30952: LD_INT 0
30954: PUSH
30955: LD_INT 0
30957: PUSH
30958: LD_INT 0
30960: PUSH
30961: EMPTY
30962: PUSH
30963: EMPTY
30964: LIST
30965: LIST
30966: LIST
30967: LIST
30968: ST_TO_ADDR
// if not x or not y then
30969: LD_VAR 0 2
30973: NOT
30974: PUSH
30975: LD_VAR 0 3
30979: NOT
30980: OR
30981: IFFALSE 30985
// exit ;
30983: GO 32637
// if not range then
30985: LD_VAR 0 4
30989: NOT
30990: IFFALSE 31000
// range := 10 ;
30992: LD_ADDR_VAR 0 4
30996: PUSH
30997: LD_INT 10
30999: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31000: LD_ADDR_VAR 0 8
31004: PUSH
31005: LD_INT 81
31007: PUSH
31008: LD_VAR 0 1
31012: PUSH
31013: EMPTY
31014: LIST
31015: LIST
31016: PUSH
31017: LD_INT 92
31019: PUSH
31020: LD_VAR 0 2
31024: PUSH
31025: LD_VAR 0 3
31029: PUSH
31030: LD_VAR 0 4
31034: PUSH
31035: EMPTY
31036: LIST
31037: LIST
31038: LIST
31039: LIST
31040: PUSH
31041: LD_INT 3
31043: PUSH
31044: LD_INT 21
31046: PUSH
31047: LD_INT 3
31049: PUSH
31050: EMPTY
31051: LIST
31052: LIST
31053: PUSH
31054: EMPTY
31055: LIST
31056: LIST
31057: PUSH
31058: EMPTY
31059: LIST
31060: LIST
31061: LIST
31062: PPUSH
31063: CALL_OW 69
31067: ST_TO_ADDR
// if not tmp then
31068: LD_VAR 0 8
31072: NOT
31073: IFFALSE 31077
// exit ;
31075: GO 32637
// for i in tmp do
31077: LD_ADDR_VAR 0 6
31081: PUSH
31082: LD_VAR 0 8
31086: PUSH
31087: FOR_IN
31088: IFFALSE 32612
// begin points := [ 0 , 0 , 0 ] ;
31090: LD_ADDR_VAR 0 9
31094: PUSH
31095: LD_INT 0
31097: PUSH
31098: LD_INT 0
31100: PUSH
31101: LD_INT 0
31103: PUSH
31104: EMPTY
31105: LIST
31106: LIST
31107: LIST
31108: ST_TO_ADDR
// bpoints := 1 ;
31109: LD_ADDR_VAR 0 10
31113: PUSH
31114: LD_INT 1
31116: ST_TO_ADDR
// case GetType ( i ) of unit_human :
31117: LD_VAR 0 6
31121: PPUSH
31122: CALL_OW 247
31126: PUSH
31127: LD_INT 1
31129: DOUBLE
31130: EQUAL
31131: IFTRUE 31135
31133: GO 31713
31135: POP
// begin if GetClass ( i ) = 1 then
31136: LD_VAR 0 6
31140: PPUSH
31141: CALL_OW 257
31145: PUSH
31146: LD_INT 1
31148: EQUAL
31149: IFFALSE 31170
// points := [ 10 , 5 , 3 ] ;
31151: LD_ADDR_VAR 0 9
31155: PUSH
31156: LD_INT 10
31158: PUSH
31159: LD_INT 5
31161: PUSH
31162: LD_INT 3
31164: PUSH
31165: EMPTY
31166: LIST
31167: LIST
31168: LIST
31169: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
31170: LD_VAR 0 6
31174: PPUSH
31175: CALL_OW 257
31179: PUSH
31180: LD_INT 2
31182: PUSH
31183: LD_INT 3
31185: PUSH
31186: LD_INT 4
31188: PUSH
31189: EMPTY
31190: LIST
31191: LIST
31192: LIST
31193: IN
31194: IFFALSE 31215
// points := [ 3 , 2 , 1 ] ;
31196: LD_ADDR_VAR 0 9
31200: PUSH
31201: LD_INT 3
31203: PUSH
31204: LD_INT 2
31206: PUSH
31207: LD_INT 1
31209: PUSH
31210: EMPTY
31211: LIST
31212: LIST
31213: LIST
31214: ST_TO_ADDR
// if GetClass ( i ) = 5 then
31215: LD_VAR 0 6
31219: PPUSH
31220: CALL_OW 257
31224: PUSH
31225: LD_INT 5
31227: EQUAL
31228: IFFALSE 31249
// points := [ 130 , 5 , 2 ] ;
31230: LD_ADDR_VAR 0 9
31234: PUSH
31235: LD_INT 130
31237: PUSH
31238: LD_INT 5
31240: PUSH
31241: LD_INT 2
31243: PUSH
31244: EMPTY
31245: LIST
31246: LIST
31247: LIST
31248: ST_TO_ADDR
// if GetClass ( i ) = 8 then
31249: LD_VAR 0 6
31253: PPUSH
31254: CALL_OW 257
31258: PUSH
31259: LD_INT 8
31261: EQUAL
31262: IFFALSE 31283
// points := [ 35 , 35 , 30 ] ;
31264: LD_ADDR_VAR 0 9
31268: PUSH
31269: LD_INT 35
31271: PUSH
31272: LD_INT 35
31274: PUSH
31275: LD_INT 30
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: LIST
31282: ST_TO_ADDR
// if GetClass ( i ) = 9 then
31283: LD_VAR 0 6
31287: PPUSH
31288: CALL_OW 257
31292: PUSH
31293: LD_INT 9
31295: EQUAL
31296: IFFALSE 31317
// points := [ 20 , 55 , 40 ] ;
31298: LD_ADDR_VAR 0 9
31302: PUSH
31303: LD_INT 20
31305: PUSH
31306: LD_INT 55
31308: PUSH
31309: LD_INT 40
31311: PUSH
31312: EMPTY
31313: LIST
31314: LIST
31315: LIST
31316: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
31317: LD_VAR 0 6
31321: PPUSH
31322: CALL_OW 257
31326: PUSH
31327: LD_INT 12
31329: PUSH
31330: LD_INT 16
31332: PUSH
31333: EMPTY
31334: LIST
31335: LIST
31336: IN
31337: IFFALSE 31358
// points := [ 5 , 3 , 2 ] ;
31339: LD_ADDR_VAR 0 9
31343: PUSH
31344: LD_INT 5
31346: PUSH
31347: LD_INT 3
31349: PUSH
31350: LD_INT 2
31352: PUSH
31353: EMPTY
31354: LIST
31355: LIST
31356: LIST
31357: ST_TO_ADDR
// if GetClass ( i ) = 17 then
31358: LD_VAR 0 6
31362: PPUSH
31363: CALL_OW 257
31367: PUSH
31368: LD_INT 17
31370: EQUAL
31371: IFFALSE 31392
// points := [ 100 , 50 , 75 ] ;
31373: LD_ADDR_VAR 0 9
31377: PUSH
31378: LD_INT 100
31380: PUSH
31381: LD_INT 50
31383: PUSH
31384: LD_INT 75
31386: PUSH
31387: EMPTY
31388: LIST
31389: LIST
31390: LIST
31391: ST_TO_ADDR
// if GetClass ( i ) = 15 then
31392: LD_VAR 0 6
31396: PPUSH
31397: CALL_OW 257
31401: PUSH
31402: LD_INT 15
31404: EQUAL
31405: IFFALSE 31426
// points := [ 10 , 5 , 3 ] ;
31407: LD_ADDR_VAR 0 9
31411: PUSH
31412: LD_INT 10
31414: PUSH
31415: LD_INT 5
31417: PUSH
31418: LD_INT 3
31420: PUSH
31421: EMPTY
31422: LIST
31423: LIST
31424: LIST
31425: ST_TO_ADDR
// if GetClass ( i ) = 14 then
31426: LD_VAR 0 6
31430: PPUSH
31431: CALL_OW 257
31435: PUSH
31436: LD_INT 14
31438: EQUAL
31439: IFFALSE 31460
// points := [ 10 , 0 , 0 ] ;
31441: LD_ADDR_VAR 0 9
31445: PUSH
31446: LD_INT 10
31448: PUSH
31449: LD_INT 0
31451: PUSH
31452: LD_INT 0
31454: PUSH
31455: EMPTY
31456: LIST
31457: LIST
31458: LIST
31459: ST_TO_ADDR
// if GetClass ( i ) = 11 then
31460: LD_VAR 0 6
31464: PPUSH
31465: CALL_OW 257
31469: PUSH
31470: LD_INT 11
31472: EQUAL
31473: IFFALSE 31494
// points := [ 30 , 10 , 5 ] ;
31475: LD_ADDR_VAR 0 9
31479: PUSH
31480: LD_INT 30
31482: PUSH
31483: LD_INT 10
31485: PUSH
31486: LD_INT 5
31488: PUSH
31489: EMPTY
31490: LIST
31491: LIST
31492: LIST
31493: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
31494: LD_VAR 0 1
31498: PPUSH
31499: LD_INT 5
31501: PPUSH
31502: CALL_OW 321
31506: PUSH
31507: LD_INT 2
31509: EQUAL
31510: IFFALSE 31527
// bpoints := bpoints * 1.8 ;
31512: LD_ADDR_VAR 0 10
31516: PUSH
31517: LD_VAR 0 10
31521: PUSH
31522: LD_REAL  1.80000000000000E+0000
31525: MUL
31526: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
31527: LD_VAR 0 6
31531: PPUSH
31532: CALL_OW 257
31536: PUSH
31537: LD_INT 1
31539: PUSH
31540: LD_INT 2
31542: PUSH
31543: LD_INT 3
31545: PUSH
31546: LD_INT 4
31548: PUSH
31549: EMPTY
31550: LIST
31551: LIST
31552: LIST
31553: LIST
31554: IN
31555: PUSH
31556: LD_VAR 0 1
31560: PPUSH
31561: LD_INT 51
31563: PPUSH
31564: CALL_OW 321
31568: PUSH
31569: LD_INT 2
31571: EQUAL
31572: AND
31573: IFFALSE 31590
// bpoints := bpoints * 1.2 ;
31575: LD_ADDR_VAR 0 10
31579: PUSH
31580: LD_VAR 0 10
31584: PUSH
31585: LD_REAL  1.20000000000000E+0000
31588: MUL
31589: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
31590: LD_VAR 0 6
31594: PPUSH
31595: CALL_OW 257
31599: PUSH
31600: LD_INT 5
31602: PUSH
31603: LD_INT 7
31605: PUSH
31606: LD_INT 9
31608: PUSH
31609: EMPTY
31610: LIST
31611: LIST
31612: LIST
31613: IN
31614: PUSH
31615: LD_VAR 0 1
31619: PPUSH
31620: LD_INT 52
31622: PPUSH
31623: CALL_OW 321
31627: PUSH
31628: LD_INT 2
31630: EQUAL
31631: AND
31632: IFFALSE 31649
// bpoints := bpoints * 1.5 ;
31634: LD_ADDR_VAR 0 10
31638: PUSH
31639: LD_VAR 0 10
31643: PUSH
31644: LD_REAL  1.50000000000000E+0000
31647: MUL
31648: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
31649: LD_VAR 0 1
31653: PPUSH
31654: LD_INT 66
31656: PPUSH
31657: CALL_OW 321
31661: PUSH
31662: LD_INT 2
31664: EQUAL
31665: IFFALSE 31682
// bpoints := bpoints * 1.1 ;
31667: LD_ADDR_VAR 0 10
31671: PUSH
31672: LD_VAR 0 10
31676: PUSH
31677: LD_REAL  1.10000000000000E+0000
31680: MUL
31681: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
31682: LD_ADDR_VAR 0 10
31686: PUSH
31687: LD_VAR 0 10
31691: PUSH
31692: LD_VAR 0 6
31696: PPUSH
31697: LD_INT 1
31699: PPUSH
31700: CALL_OW 259
31704: PUSH
31705: LD_REAL  1.15000000000000E+0000
31708: MUL
31709: MUL
31710: ST_TO_ADDR
// end ; unit_vehicle :
31711: GO 32541
31713: LD_INT 2
31715: DOUBLE
31716: EQUAL
31717: IFTRUE 31721
31719: GO 32529
31721: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
31722: LD_VAR 0 6
31726: PPUSH
31727: CALL_OW 264
31731: PUSH
31732: LD_INT 2
31734: PUSH
31735: LD_INT 42
31737: PUSH
31738: LD_INT 24
31740: PUSH
31741: EMPTY
31742: LIST
31743: LIST
31744: LIST
31745: IN
31746: IFFALSE 31767
// points := [ 25 , 5 , 3 ] ;
31748: LD_ADDR_VAR 0 9
31752: PUSH
31753: LD_INT 25
31755: PUSH
31756: LD_INT 5
31758: PUSH
31759: LD_INT 3
31761: PUSH
31762: EMPTY
31763: LIST
31764: LIST
31765: LIST
31766: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
31767: LD_VAR 0 6
31771: PPUSH
31772: CALL_OW 264
31776: PUSH
31777: LD_INT 4
31779: PUSH
31780: LD_INT 43
31782: PUSH
31783: LD_INT 25
31785: PUSH
31786: EMPTY
31787: LIST
31788: LIST
31789: LIST
31790: IN
31791: IFFALSE 31812
// points := [ 40 , 15 , 5 ] ;
31793: LD_ADDR_VAR 0 9
31797: PUSH
31798: LD_INT 40
31800: PUSH
31801: LD_INT 15
31803: PUSH
31804: LD_INT 5
31806: PUSH
31807: EMPTY
31808: LIST
31809: LIST
31810: LIST
31811: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
31812: LD_VAR 0 6
31816: PPUSH
31817: CALL_OW 264
31821: PUSH
31822: LD_INT 3
31824: PUSH
31825: LD_INT 23
31827: PUSH
31828: EMPTY
31829: LIST
31830: LIST
31831: IN
31832: IFFALSE 31853
// points := [ 7 , 25 , 8 ] ;
31834: LD_ADDR_VAR 0 9
31838: PUSH
31839: LD_INT 7
31841: PUSH
31842: LD_INT 25
31844: PUSH
31845: LD_INT 8
31847: PUSH
31848: EMPTY
31849: LIST
31850: LIST
31851: LIST
31852: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
31853: LD_VAR 0 6
31857: PPUSH
31858: CALL_OW 264
31862: PUSH
31863: LD_INT 5
31865: PUSH
31866: LD_INT 27
31868: PUSH
31869: LD_INT 44
31871: PUSH
31872: EMPTY
31873: LIST
31874: LIST
31875: LIST
31876: IN
31877: IFFALSE 31898
// points := [ 14 , 50 , 16 ] ;
31879: LD_ADDR_VAR 0 9
31883: PUSH
31884: LD_INT 14
31886: PUSH
31887: LD_INT 50
31889: PUSH
31890: LD_INT 16
31892: PUSH
31893: EMPTY
31894: LIST
31895: LIST
31896: LIST
31897: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
31898: LD_VAR 0 6
31902: PPUSH
31903: CALL_OW 264
31907: PUSH
31908: LD_INT 6
31910: PUSH
31911: LD_INT 46
31913: PUSH
31914: EMPTY
31915: LIST
31916: LIST
31917: IN
31918: IFFALSE 31939
// points := [ 32 , 120 , 70 ] ;
31920: LD_ADDR_VAR 0 9
31924: PUSH
31925: LD_INT 32
31927: PUSH
31928: LD_INT 120
31930: PUSH
31931: LD_INT 70
31933: PUSH
31934: EMPTY
31935: LIST
31936: LIST
31937: LIST
31938: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
31939: LD_VAR 0 6
31943: PPUSH
31944: CALL_OW 264
31948: PUSH
31949: LD_INT 7
31951: PUSH
31952: LD_INT 28
31954: PUSH
31955: LD_INT 45
31957: PUSH
31958: LD_EXP 98
31962: PUSH
31963: EMPTY
31964: LIST
31965: LIST
31966: LIST
31967: LIST
31968: IN
31969: IFFALSE 31990
// points := [ 35 , 20 , 45 ] ;
31971: LD_ADDR_VAR 0 9
31975: PUSH
31976: LD_INT 35
31978: PUSH
31979: LD_INT 20
31981: PUSH
31982: LD_INT 45
31984: PUSH
31985: EMPTY
31986: LIST
31987: LIST
31988: LIST
31989: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
31990: LD_VAR 0 6
31994: PPUSH
31995: CALL_OW 264
31999: PUSH
32000: LD_INT 47
32002: PUSH
32003: EMPTY
32004: LIST
32005: IN
32006: IFFALSE 32027
// points := [ 67 , 45 , 75 ] ;
32008: LD_ADDR_VAR 0 9
32012: PUSH
32013: LD_INT 67
32015: PUSH
32016: LD_INT 45
32018: PUSH
32019: LD_INT 75
32021: PUSH
32022: EMPTY
32023: LIST
32024: LIST
32025: LIST
32026: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
32027: LD_VAR 0 6
32031: PPUSH
32032: CALL_OW 264
32036: PUSH
32037: LD_INT 26
32039: PUSH
32040: EMPTY
32041: LIST
32042: IN
32043: IFFALSE 32064
// points := [ 120 , 30 , 80 ] ;
32045: LD_ADDR_VAR 0 9
32049: PUSH
32050: LD_INT 120
32052: PUSH
32053: LD_INT 30
32055: PUSH
32056: LD_INT 80
32058: PUSH
32059: EMPTY
32060: LIST
32061: LIST
32062: LIST
32063: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
32064: LD_VAR 0 6
32068: PPUSH
32069: CALL_OW 264
32073: PUSH
32074: LD_INT 22
32076: PUSH
32077: EMPTY
32078: LIST
32079: IN
32080: IFFALSE 32101
// points := [ 40 , 1 , 1 ] ;
32082: LD_ADDR_VAR 0 9
32086: PUSH
32087: LD_INT 40
32089: PUSH
32090: LD_INT 1
32092: PUSH
32093: LD_INT 1
32095: PUSH
32096: EMPTY
32097: LIST
32098: LIST
32099: LIST
32100: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
32101: LD_VAR 0 6
32105: PPUSH
32106: CALL_OW 264
32110: PUSH
32111: LD_INT 29
32113: PUSH
32114: EMPTY
32115: LIST
32116: IN
32117: IFFALSE 32138
// points := [ 70 , 200 , 400 ] ;
32119: LD_ADDR_VAR 0 9
32123: PUSH
32124: LD_INT 70
32126: PUSH
32127: LD_INT 200
32129: PUSH
32130: LD_INT 400
32132: PUSH
32133: EMPTY
32134: LIST
32135: LIST
32136: LIST
32137: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
32138: LD_VAR 0 6
32142: PPUSH
32143: CALL_OW 264
32147: PUSH
32148: LD_INT 14
32150: PUSH
32151: LD_INT 53
32153: PUSH
32154: EMPTY
32155: LIST
32156: LIST
32157: IN
32158: IFFALSE 32179
// points := [ 40 , 10 , 20 ] ;
32160: LD_ADDR_VAR 0 9
32164: PUSH
32165: LD_INT 40
32167: PUSH
32168: LD_INT 10
32170: PUSH
32171: LD_INT 20
32173: PUSH
32174: EMPTY
32175: LIST
32176: LIST
32177: LIST
32178: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
32179: LD_VAR 0 6
32183: PPUSH
32184: CALL_OW 264
32188: PUSH
32189: LD_INT 9
32191: PUSH
32192: EMPTY
32193: LIST
32194: IN
32195: IFFALSE 32216
// points := [ 5 , 70 , 20 ] ;
32197: LD_ADDR_VAR 0 9
32201: PUSH
32202: LD_INT 5
32204: PUSH
32205: LD_INT 70
32207: PUSH
32208: LD_INT 20
32210: PUSH
32211: EMPTY
32212: LIST
32213: LIST
32214: LIST
32215: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
32216: LD_VAR 0 6
32220: PPUSH
32221: CALL_OW 264
32225: PUSH
32226: LD_INT 10
32228: PUSH
32229: EMPTY
32230: LIST
32231: IN
32232: IFFALSE 32253
// points := [ 35 , 110 , 70 ] ;
32234: LD_ADDR_VAR 0 9
32238: PUSH
32239: LD_INT 35
32241: PUSH
32242: LD_INT 110
32244: PUSH
32245: LD_INT 70
32247: PUSH
32248: EMPTY
32249: LIST
32250: LIST
32251: LIST
32252: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
32253: LD_VAR 0 6
32257: PPUSH
32258: CALL_OW 265
32262: PUSH
32263: LD_INT 25
32265: EQUAL
32266: IFFALSE 32287
// points := [ 80 , 65 , 100 ] ;
32268: LD_ADDR_VAR 0 9
32272: PUSH
32273: LD_INT 80
32275: PUSH
32276: LD_INT 65
32278: PUSH
32279: LD_INT 100
32281: PUSH
32282: EMPTY
32283: LIST
32284: LIST
32285: LIST
32286: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
32287: LD_VAR 0 6
32291: PPUSH
32292: CALL_OW 263
32296: PUSH
32297: LD_INT 1
32299: EQUAL
32300: IFFALSE 32335
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
32302: LD_ADDR_VAR 0 10
32306: PUSH
32307: LD_VAR 0 10
32311: PUSH
32312: LD_VAR 0 6
32316: PPUSH
32317: CALL_OW 311
32321: PPUSH
32322: LD_INT 3
32324: PPUSH
32325: CALL_OW 259
32329: PUSH
32330: LD_INT 4
32332: MUL
32333: MUL
32334: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
32335: LD_VAR 0 6
32339: PPUSH
32340: CALL_OW 263
32344: PUSH
32345: LD_INT 2
32347: EQUAL
32348: IFFALSE 32399
// begin j := IsControledBy ( i ) ;
32350: LD_ADDR_VAR 0 7
32354: PUSH
32355: LD_VAR 0 6
32359: PPUSH
32360: CALL_OW 312
32364: ST_TO_ADDR
// if j then
32365: LD_VAR 0 7
32369: IFFALSE 32399
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
32371: LD_ADDR_VAR 0 10
32375: PUSH
32376: LD_VAR 0 10
32380: PUSH
32381: LD_VAR 0 7
32385: PPUSH
32386: LD_INT 3
32388: PPUSH
32389: CALL_OW 259
32393: PUSH
32394: LD_INT 3
32396: MUL
32397: MUL
32398: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
32399: LD_VAR 0 6
32403: PPUSH
32404: CALL_OW 264
32408: PUSH
32409: LD_INT 5
32411: PUSH
32412: LD_INT 6
32414: PUSH
32415: LD_INT 46
32417: PUSH
32418: LD_INT 44
32420: PUSH
32421: LD_INT 47
32423: PUSH
32424: LD_INT 45
32426: PUSH
32427: LD_INT 28
32429: PUSH
32430: LD_INT 7
32432: PUSH
32433: LD_INT 27
32435: PUSH
32436: LD_INT 29
32438: PUSH
32439: EMPTY
32440: LIST
32441: LIST
32442: LIST
32443: LIST
32444: LIST
32445: LIST
32446: LIST
32447: LIST
32448: LIST
32449: LIST
32450: IN
32451: PUSH
32452: LD_VAR 0 1
32456: PPUSH
32457: LD_INT 52
32459: PPUSH
32460: CALL_OW 321
32464: PUSH
32465: LD_INT 2
32467: EQUAL
32468: AND
32469: IFFALSE 32486
// bpoints := bpoints * 1.2 ;
32471: LD_ADDR_VAR 0 10
32475: PUSH
32476: LD_VAR 0 10
32480: PUSH
32481: LD_REAL  1.20000000000000E+0000
32484: MUL
32485: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
32486: LD_VAR 0 6
32490: PPUSH
32491: CALL_OW 264
32495: PUSH
32496: LD_INT 6
32498: PUSH
32499: LD_INT 46
32501: PUSH
32502: LD_INT 47
32504: PUSH
32505: EMPTY
32506: LIST
32507: LIST
32508: LIST
32509: IN
32510: IFFALSE 32527
// bpoints := bpoints * 1.2 ;
32512: LD_ADDR_VAR 0 10
32516: PUSH
32517: LD_VAR 0 10
32521: PUSH
32522: LD_REAL  1.20000000000000E+0000
32525: MUL
32526: ST_TO_ADDR
// end ; unit_building :
32527: GO 32541
32529: LD_INT 3
32531: DOUBLE
32532: EQUAL
32533: IFTRUE 32537
32535: GO 32540
32537: POP
// ; end ;
32538: GO 32541
32540: POP
// for j = 1 to 3 do
32541: LD_ADDR_VAR 0 7
32545: PUSH
32546: DOUBLE
32547: LD_INT 1
32549: DEC
32550: ST_TO_ADDR
32551: LD_INT 3
32553: PUSH
32554: FOR_TO
32555: IFFALSE 32608
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
32557: LD_ADDR_VAR 0 5
32561: PUSH
32562: LD_VAR 0 5
32566: PPUSH
32567: LD_VAR 0 7
32571: PPUSH
32572: LD_VAR 0 5
32576: PUSH
32577: LD_VAR 0 7
32581: ARRAY
32582: PUSH
32583: LD_VAR 0 9
32587: PUSH
32588: LD_VAR 0 7
32592: ARRAY
32593: PUSH
32594: LD_VAR 0 10
32598: MUL
32599: PLUS
32600: PPUSH
32601: CALL_OW 1
32605: ST_TO_ADDR
32606: GO 32554
32608: POP
32609: POP
// end ;
32610: GO 31087
32612: POP
32613: POP
// result := Replace ( result , 4 , tmp ) ;
32614: LD_ADDR_VAR 0 5
32618: PUSH
32619: LD_VAR 0 5
32623: PPUSH
32624: LD_INT 4
32626: PPUSH
32627: LD_VAR 0 8
32631: PPUSH
32632: CALL_OW 1
32636: ST_TO_ADDR
// end ;
32637: LD_VAR 0 5
32641: RET
// export function DangerAtRange ( unit , range ) ; begin
32642: LD_INT 0
32644: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
32645: LD_ADDR_VAR 0 3
32649: PUSH
32650: LD_VAR 0 1
32654: PPUSH
32655: CALL_OW 255
32659: PPUSH
32660: LD_VAR 0 1
32664: PPUSH
32665: CALL_OW 250
32669: PPUSH
32670: LD_VAR 0 1
32674: PPUSH
32675: CALL_OW 251
32679: PPUSH
32680: LD_VAR 0 2
32684: PPUSH
32685: CALL 30939 0 4
32689: ST_TO_ADDR
// end ;
32690: LD_VAR 0 3
32694: RET
// export function DangerInArea ( side , area ) ; begin
32695: LD_INT 0
32697: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
32698: LD_ADDR_VAR 0 3
32702: PUSH
32703: LD_VAR 0 2
32707: PPUSH
32708: LD_INT 81
32710: PUSH
32711: LD_VAR 0 1
32715: PUSH
32716: EMPTY
32717: LIST
32718: LIST
32719: PPUSH
32720: CALL_OW 70
32724: ST_TO_ADDR
// end ;
32725: LD_VAR 0 3
32729: RET
// export function IsExtension ( b ) ; begin
32730: LD_INT 0
32732: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
32733: LD_ADDR_VAR 0 2
32737: PUSH
32738: LD_VAR 0 1
32742: PUSH
32743: LD_INT 23
32745: PUSH
32746: LD_INT 20
32748: PUSH
32749: LD_INT 22
32751: PUSH
32752: LD_INT 17
32754: PUSH
32755: LD_INT 24
32757: PUSH
32758: LD_INT 21
32760: PUSH
32761: LD_INT 19
32763: PUSH
32764: LD_INT 16
32766: PUSH
32767: LD_INT 25
32769: PUSH
32770: LD_INT 18
32772: PUSH
32773: EMPTY
32774: LIST
32775: LIST
32776: LIST
32777: LIST
32778: LIST
32779: LIST
32780: LIST
32781: LIST
32782: LIST
32783: LIST
32784: IN
32785: ST_TO_ADDR
// end ;
32786: LD_VAR 0 2
32790: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
32791: LD_INT 0
32793: PPUSH
32794: PPUSH
32795: PPUSH
// result := [ ] ;
32796: LD_ADDR_VAR 0 4
32800: PUSH
32801: EMPTY
32802: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
32803: LD_ADDR_VAR 0 5
32807: PUSH
32808: LD_VAR 0 2
32812: PPUSH
32813: LD_INT 21
32815: PUSH
32816: LD_INT 3
32818: PUSH
32819: EMPTY
32820: LIST
32821: LIST
32822: PPUSH
32823: CALL_OW 70
32827: ST_TO_ADDR
// if not tmp then
32828: LD_VAR 0 5
32832: NOT
32833: IFFALSE 32837
// exit ;
32835: GO 32901
// if checkLink then
32837: LD_VAR 0 3
32841: IFFALSE 32891
// begin for i in tmp do
32843: LD_ADDR_VAR 0 6
32847: PUSH
32848: LD_VAR 0 5
32852: PUSH
32853: FOR_IN
32854: IFFALSE 32889
// if GetBase ( i ) <> base then
32856: LD_VAR 0 6
32860: PPUSH
32861: CALL_OW 274
32865: PUSH
32866: LD_VAR 0 1
32870: NONEQUAL
32871: IFFALSE 32887
// ComLinkToBase ( base , i ) ;
32873: LD_VAR 0 1
32877: PPUSH
32878: LD_VAR 0 6
32882: PPUSH
32883: CALL_OW 169
32887: GO 32853
32889: POP
32890: POP
// end ; result := tmp ;
32891: LD_ADDR_VAR 0 4
32895: PUSH
32896: LD_VAR 0 5
32900: ST_TO_ADDR
// end ;
32901: LD_VAR 0 4
32905: RET
// export function ComComplete ( units , b ) ; var i ; begin
32906: LD_INT 0
32908: PPUSH
32909: PPUSH
// if not units then
32910: LD_VAR 0 1
32914: NOT
32915: IFFALSE 32919
// exit ;
32917: GO 33009
// for i in units do
32919: LD_ADDR_VAR 0 4
32923: PUSH
32924: LD_VAR 0 1
32928: PUSH
32929: FOR_IN
32930: IFFALSE 33007
// if BuildingStatus ( b ) = bs_build then
32932: LD_VAR 0 2
32936: PPUSH
32937: CALL_OW 461
32941: PUSH
32942: LD_INT 1
32944: EQUAL
32945: IFFALSE 33005
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
32947: LD_VAR 0 4
32951: PPUSH
32952: LD_STRING h
32954: PUSH
32955: LD_VAR 0 2
32959: PPUSH
32960: CALL_OW 250
32964: PUSH
32965: LD_VAR 0 2
32969: PPUSH
32970: CALL_OW 251
32974: PUSH
32975: LD_VAR 0 2
32979: PUSH
32980: LD_INT 0
32982: PUSH
32983: LD_INT 0
32985: PUSH
32986: LD_INT 0
32988: PUSH
32989: EMPTY
32990: LIST
32991: LIST
32992: LIST
32993: LIST
32994: LIST
32995: LIST
32996: LIST
32997: PUSH
32998: EMPTY
32999: LIST
33000: PPUSH
33001: CALL_OW 446
33005: GO 32929
33007: POP
33008: POP
// end ;
33009: LD_VAR 0 3
33013: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
33014: LD_INT 0
33016: PPUSH
33017: PPUSH
33018: PPUSH
33019: PPUSH
33020: PPUSH
33021: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
33022: LD_VAR 0 1
33026: NOT
33027: PUSH
33028: LD_VAR 0 1
33032: PPUSH
33033: CALL_OW 263
33037: PUSH
33038: LD_INT 2
33040: NONEQUAL
33041: OR
33042: IFFALSE 33046
// exit ;
33044: GO 33362
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
33046: LD_ADDR_VAR 0 6
33050: PUSH
33051: LD_INT 22
33053: PUSH
33054: LD_VAR 0 1
33058: PPUSH
33059: CALL_OW 255
33063: PUSH
33064: EMPTY
33065: LIST
33066: LIST
33067: PUSH
33068: LD_INT 2
33070: PUSH
33071: LD_INT 30
33073: PUSH
33074: LD_INT 36
33076: PUSH
33077: EMPTY
33078: LIST
33079: LIST
33080: PUSH
33081: LD_INT 34
33083: PUSH
33084: LD_INT 31
33086: PUSH
33087: EMPTY
33088: LIST
33089: LIST
33090: PUSH
33091: EMPTY
33092: LIST
33093: LIST
33094: LIST
33095: PUSH
33096: EMPTY
33097: LIST
33098: LIST
33099: PPUSH
33100: CALL_OW 69
33104: ST_TO_ADDR
// if not tmp then
33105: LD_VAR 0 6
33109: NOT
33110: IFFALSE 33114
// exit ;
33112: GO 33362
// result := [ ] ;
33114: LD_ADDR_VAR 0 2
33118: PUSH
33119: EMPTY
33120: ST_TO_ADDR
// for i in tmp do
33121: LD_ADDR_VAR 0 3
33125: PUSH
33126: LD_VAR 0 6
33130: PUSH
33131: FOR_IN
33132: IFFALSE 33203
// begin t := UnitsInside ( i ) ;
33134: LD_ADDR_VAR 0 4
33138: PUSH
33139: LD_VAR 0 3
33143: PPUSH
33144: CALL_OW 313
33148: ST_TO_ADDR
// if t then
33149: LD_VAR 0 4
33153: IFFALSE 33201
// for j in t do
33155: LD_ADDR_VAR 0 7
33159: PUSH
33160: LD_VAR 0 4
33164: PUSH
33165: FOR_IN
33166: IFFALSE 33199
// result := Replace ( result , result + 1 , j ) ;
33168: LD_ADDR_VAR 0 2
33172: PUSH
33173: LD_VAR 0 2
33177: PPUSH
33178: LD_VAR 0 2
33182: PUSH
33183: LD_INT 1
33185: PLUS
33186: PPUSH
33187: LD_VAR 0 7
33191: PPUSH
33192: CALL_OW 1
33196: ST_TO_ADDR
33197: GO 33165
33199: POP
33200: POP
// end ;
33201: GO 33131
33203: POP
33204: POP
// if not result then
33205: LD_VAR 0 2
33209: NOT
33210: IFFALSE 33214
// exit ;
33212: GO 33362
// mech := result [ 1 ] ;
33214: LD_ADDR_VAR 0 5
33218: PUSH
33219: LD_VAR 0 2
33223: PUSH
33224: LD_INT 1
33226: ARRAY
33227: ST_TO_ADDR
// if result > 1 then
33228: LD_VAR 0 2
33232: PUSH
33233: LD_INT 1
33235: GREATER
33236: IFFALSE 33348
// begin for i = 2 to result do
33238: LD_ADDR_VAR 0 3
33242: PUSH
33243: DOUBLE
33244: LD_INT 2
33246: DEC
33247: ST_TO_ADDR
33248: LD_VAR 0 2
33252: PUSH
33253: FOR_TO
33254: IFFALSE 33346
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
33256: LD_ADDR_VAR 0 4
33260: PUSH
33261: LD_VAR 0 2
33265: PUSH
33266: LD_VAR 0 3
33270: ARRAY
33271: PPUSH
33272: LD_INT 3
33274: PPUSH
33275: CALL_OW 259
33279: PUSH
33280: LD_VAR 0 2
33284: PUSH
33285: LD_VAR 0 3
33289: ARRAY
33290: PPUSH
33291: CALL_OW 432
33295: MINUS
33296: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
33297: LD_VAR 0 4
33301: PUSH
33302: LD_VAR 0 5
33306: PPUSH
33307: LD_INT 3
33309: PPUSH
33310: CALL_OW 259
33314: PUSH
33315: LD_VAR 0 5
33319: PPUSH
33320: CALL_OW 432
33324: MINUS
33325: GREATEREQUAL
33326: IFFALSE 33344
// mech := result [ i ] ;
33328: LD_ADDR_VAR 0 5
33332: PUSH
33333: LD_VAR 0 2
33337: PUSH
33338: LD_VAR 0 3
33342: ARRAY
33343: ST_TO_ADDR
// end ;
33344: GO 33253
33346: POP
33347: POP
// end ; ComLinkTo ( vehicle , mech ) ;
33348: LD_VAR 0 1
33352: PPUSH
33353: LD_VAR 0 5
33357: PPUSH
33358: CALL_OW 135
// end ;
33362: LD_VAR 0 2
33366: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
33367: LD_INT 0
33369: PPUSH
33370: PPUSH
33371: PPUSH
33372: PPUSH
33373: PPUSH
33374: PPUSH
33375: PPUSH
33376: PPUSH
33377: PPUSH
33378: PPUSH
33379: PPUSH
33380: PPUSH
33381: PPUSH
// result := [ ] ;
33382: LD_ADDR_VAR 0 7
33386: PUSH
33387: EMPTY
33388: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
33389: LD_VAR 0 1
33393: PPUSH
33394: CALL_OW 266
33398: PUSH
33399: LD_INT 0
33401: PUSH
33402: LD_INT 1
33404: PUSH
33405: EMPTY
33406: LIST
33407: LIST
33408: IN
33409: NOT
33410: IFFALSE 33414
// exit ;
33412: GO 35048
// if name then
33414: LD_VAR 0 3
33418: IFFALSE 33434
// SetBName ( base_dep , name ) ;
33420: LD_VAR 0 1
33424: PPUSH
33425: LD_VAR 0 3
33429: PPUSH
33430: CALL_OW 500
// base := GetBase ( base_dep ) ;
33434: LD_ADDR_VAR 0 15
33438: PUSH
33439: LD_VAR 0 1
33443: PPUSH
33444: CALL_OW 274
33448: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
33449: LD_ADDR_VAR 0 16
33453: PUSH
33454: LD_VAR 0 1
33458: PPUSH
33459: CALL_OW 255
33463: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
33464: LD_ADDR_VAR 0 17
33468: PUSH
33469: LD_VAR 0 1
33473: PPUSH
33474: CALL_OW 248
33478: ST_TO_ADDR
// if sources then
33479: LD_VAR 0 5
33483: IFFALSE 33530
// for i = 1 to 3 do
33485: LD_ADDR_VAR 0 8
33489: PUSH
33490: DOUBLE
33491: LD_INT 1
33493: DEC
33494: ST_TO_ADDR
33495: LD_INT 3
33497: PUSH
33498: FOR_TO
33499: IFFALSE 33528
// AddResourceType ( base , i , sources [ i ] ) ;
33501: LD_VAR 0 15
33505: PPUSH
33506: LD_VAR 0 8
33510: PPUSH
33511: LD_VAR 0 5
33515: PUSH
33516: LD_VAR 0 8
33520: ARRAY
33521: PPUSH
33522: CALL_OW 276
33526: GO 33498
33528: POP
33529: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
33530: LD_ADDR_VAR 0 18
33534: PUSH
33535: LD_VAR 0 15
33539: PPUSH
33540: LD_VAR 0 2
33544: PPUSH
33545: LD_INT 1
33547: PPUSH
33548: CALL 32791 0 3
33552: ST_TO_ADDR
// InitHc ;
33553: CALL_OW 19
// InitUc ;
33557: CALL_OW 18
// uc_side := side ;
33561: LD_ADDR_OWVAR 20
33565: PUSH
33566: LD_VAR 0 16
33570: ST_TO_ADDR
// uc_nation := nation ;
33571: LD_ADDR_OWVAR 21
33575: PUSH
33576: LD_VAR 0 17
33580: ST_TO_ADDR
// if buildings then
33581: LD_VAR 0 18
33585: IFFALSE 34907
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
33587: LD_ADDR_VAR 0 19
33591: PUSH
33592: LD_VAR 0 18
33596: PPUSH
33597: LD_INT 2
33599: PUSH
33600: LD_INT 30
33602: PUSH
33603: LD_INT 29
33605: PUSH
33606: EMPTY
33607: LIST
33608: LIST
33609: PUSH
33610: LD_INT 30
33612: PUSH
33613: LD_INT 30
33615: PUSH
33616: EMPTY
33617: LIST
33618: LIST
33619: PUSH
33620: EMPTY
33621: LIST
33622: LIST
33623: LIST
33624: PPUSH
33625: CALL_OW 72
33629: ST_TO_ADDR
// if tmp then
33630: LD_VAR 0 19
33634: IFFALSE 33682
// for i in tmp do
33636: LD_ADDR_VAR 0 8
33640: PUSH
33641: LD_VAR 0 19
33645: PUSH
33646: FOR_IN
33647: IFFALSE 33680
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
33649: LD_VAR 0 8
33653: PPUSH
33654: CALL_OW 250
33658: PPUSH
33659: LD_VAR 0 8
33663: PPUSH
33664: CALL_OW 251
33668: PPUSH
33669: LD_VAR 0 16
33673: PPUSH
33674: CALL_OW 441
33678: GO 33646
33680: POP
33681: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
33682: LD_VAR 0 18
33686: PPUSH
33687: LD_INT 2
33689: PUSH
33690: LD_INT 30
33692: PUSH
33693: LD_INT 32
33695: PUSH
33696: EMPTY
33697: LIST
33698: LIST
33699: PUSH
33700: LD_INT 30
33702: PUSH
33703: LD_INT 33
33705: PUSH
33706: EMPTY
33707: LIST
33708: LIST
33709: PUSH
33710: EMPTY
33711: LIST
33712: LIST
33713: LIST
33714: PPUSH
33715: CALL_OW 72
33719: IFFALSE 33807
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
33721: LD_ADDR_VAR 0 8
33725: PUSH
33726: LD_VAR 0 18
33730: PPUSH
33731: LD_INT 2
33733: PUSH
33734: LD_INT 30
33736: PUSH
33737: LD_INT 32
33739: PUSH
33740: EMPTY
33741: LIST
33742: LIST
33743: PUSH
33744: LD_INT 30
33746: PUSH
33747: LD_INT 33
33749: PUSH
33750: EMPTY
33751: LIST
33752: LIST
33753: PUSH
33754: EMPTY
33755: LIST
33756: LIST
33757: LIST
33758: PPUSH
33759: CALL_OW 72
33763: PUSH
33764: FOR_IN
33765: IFFALSE 33805
// begin if not GetBWeapon ( i ) then
33767: LD_VAR 0 8
33771: PPUSH
33772: CALL_OW 269
33776: NOT
33777: IFFALSE 33803
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
33779: LD_VAR 0 8
33783: PPUSH
33784: LD_VAR 0 8
33788: PPUSH
33789: LD_VAR 0 2
33793: PPUSH
33794: CALL 35053 0 2
33798: PPUSH
33799: CALL_OW 431
// end ;
33803: GO 33764
33805: POP
33806: POP
// end ; for i = 1 to personel do
33807: LD_ADDR_VAR 0 8
33811: PUSH
33812: DOUBLE
33813: LD_INT 1
33815: DEC
33816: ST_TO_ADDR
33817: LD_VAR 0 6
33821: PUSH
33822: FOR_TO
33823: IFFALSE 34887
// begin if i > 4 then
33825: LD_VAR 0 8
33829: PUSH
33830: LD_INT 4
33832: GREATER
33833: IFFALSE 33837
// break ;
33835: GO 34887
// case i of 1 :
33837: LD_VAR 0 8
33841: PUSH
33842: LD_INT 1
33844: DOUBLE
33845: EQUAL
33846: IFTRUE 33850
33848: GO 33930
33850: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
33851: LD_ADDR_VAR 0 12
33855: PUSH
33856: LD_VAR 0 18
33860: PPUSH
33861: LD_INT 22
33863: PUSH
33864: LD_VAR 0 16
33868: PUSH
33869: EMPTY
33870: LIST
33871: LIST
33872: PUSH
33873: LD_INT 58
33875: PUSH
33876: EMPTY
33877: LIST
33878: PUSH
33879: LD_INT 2
33881: PUSH
33882: LD_INT 30
33884: PUSH
33885: LD_INT 32
33887: PUSH
33888: EMPTY
33889: LIST
33890: LIST
33891: PUSH
33892: LD_INT 30
33894: PUSH
33895: LD_INT 4
33897: PUSH
33898: EMPTY
33899: LIST
33900: LIST
33901: PUSH
33902: LD_INT 30
33904: PUSH
33905: LD_INT 5
33907: PUSH
33908: EMPTY
33909: LIST
33910: LIST
33911: PUSH
33912: EMPTY
33913: LIST
33914: LIST
33915: LIST
33916: LIST
33917: PUSH
33918: EMPTY
33919: LIST
33920: LIST
33921: LIST
33922: PPUSH
33923: CALL_OW 72
33927: ST_TO_ADDR
33928: GO 34152
33930: LD_INT 2
33932: DOUBLE
33933: EQUAL
33934: IFTRUE 33938
33936: GO 34000
33938: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
33939: LD_ADDR_VAR 0 12
33943: PUSH
33944: LD_VAR 0 18
33948: PPUSH
33949: LD_INT 22
33951: PUSH
33952: LD_VAR 0 16
33956: PUSH
33957: EMPTY
33958: LIST
33959: LIST
33960: PUSH
33961: LD_INT 2
33963: PUSH
33964: LD_INT 30
33966: PUSH
33967: LD_INT 0
33969: PUSH
33970: EMPTY
33971: LIST
33972: LIST
33973: PUSH
33974: LD_INT 30
33976: PUSH
33977: LD_INT 1
33979: PUSH
33980: EMPTY
33981: LIST
33982: LIST
33983: PUSH
33984: EMPTY
33985: LIST
33986: LIST
33987: LIST
33988: PUSH
33989: EMPTY
33990: LIST
33991: LIST
33992: PPUSH
33993: CALL_OW 72
33997: ST_TO_ADDR
33998: GO 34152
34000: LD_INT 3
34002: DOUBLE
34003: EQUAL
34004: IFTRUE 34008
34006: GO 34070
34008: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
34009: LD_ADDR_VAR 0 12
34013: PUSH
34014: LD_VAR 0 18
34018: PPUSH
34019: LD_INT 22
34021: PUSH
34022: LD_VAR 0 16
34026: PUSH
34027: EMPTY
34028: LIST
34029: LIST
34030: PUSH
34031: LD_INT 2
34033: PUSH
34034: LD_INT 30
34036: PUSH
34037: LD_INT 2
34039: PUSH
34040: EMPTY
34041: LIST
34042: LIST
34043: PUSH
34044: LD_INT 30
34046: PUSH
34047: LD_INT 3
34049: PUSH
34050: EMPTY
34051: LIST
34052: LIST
34053: PUSH
34054: EMPTY
34055: LIST
34056: LIST
34057: LIST
34058: PUSH
34059: EMPTY
34060: LIST
34061: LIST
34062: PPUSH
34063: CALL_OW 72
34067: ST_TO_ADDR
34068: GO 34152
34070: LD_INT 4
34072: DOUBLE
34073: EQUAL
34074: IFTRUE 34078
34076: GO 34151
34078: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
34079: LD_ADDR_VAR 0 12
34083: PUSH
34084: LD_VAR 0 18
34088: PPUSH
34089: LD_INT 22
34091: PUSH
34092: LD_VAR 0 16
34096: PUSH
34097: EMPTY
34098: LIST
34099: LIST
34100: PUSH
34101: LD_INT 2
34103: PUSH
34104: LD_INT 30
34106: PUSH
34107: LD_INT 6
34109: PUSH
34110: EMPTY
34111: LIST
34112: LIST
34113: PUSH
34114: LD_INT 30
34116: PUSH
34117: LD_INT 7
34119: PUSH
34120: EMPTY
34121: LIST
34122: LIST
34123: PUSH
34124: LD_INT 30
34126: PUSH
34127: LD_INT 8
34129: PUSH
34130: EMPTY
34131: LIST
34132: LIST
34133: PUSH
34134: EMPTY
34135: LIST
34136: LIST
34137: LIST
34138: LIST
34139: PUSH
34140: EMPTY
34141: LIST
34142: LIST
34143: PPUSH
34144: CALL_OW 72
34148: ST_TO_ADDR
34149: GO 34152
34151: POP
// if i = 1 then
34152: LD_VAR 0 8
34156: PUSH
34157: LD_INT 1
34159: EQUAL
34160: IFFALSE 34271
// begin tmp := [ ] ;
34162: LD_ADDR_VAR 0 19
34166: PUSH
34167: EMPTY
34168: ST_TO_ADDR
// for j in f do
34169: LD_ADDR_VAR 0 9
34173: PUSH
34174: LD_VAR 0 12
34178: PUSH
34179: FOR_IN
34180: IFFALSE 34253
// if GetBType ( j ) = b_bunker then
34182: LD_VAR 0 9
34186: PPUSH
34187: CALL_OW 266
34191: PUSH
34192: LD_INT 32
34194: EQUAL
34195: IFFALSE 34222
// tmp := Insert ( tmp , 1 , j ) else
34197: LD_ADDR_VAR 0 19
34201: PUSH
34202: LD_VAR 0 19
34206: PPUSH
34207: LD_INT 1
34209: PPUSH
34210: LD_VAR 0 9
34214: PPUSH
34215: CALL_OW 2
34219: ST_TO_ADDR
34220: GO 34251
// tmp := Insert ( tmp , tmp + 1 , j ) ;
34222: LD_ADDR_VAR 0 19
34226: PUSH
34227: LD_VAR 0 19
34231: PPUSH
34232: LD_VAR 0 19
34236: PUSH
34237: LD_INT 1
34239: PLUS
34240: PPUSH
34241: LD_VAR 0 9
34245: PPUSH
34246: CALL_OW 2
34250: ST_TO_ADDR
34251: GO 34179
34253: POP
34254: POP
// if tmp then
34255: LD_VAR 0 19
34259: IFFALSE 34271
// f := tmp ;
34261: LD_ADDR_VAR 0 12
34265: PUSH
34266: LD_VAR 0 19
34270: ST_TO_ADDR
// end ; x := personel [ i ] ;
34271: LD_ADDR_VAR 0 13
34275: PUSH
34276: LD_VAR 0 6
34280: PUSH
34281: LD_VAR 0 8
34285: ARRAY
34286: ST_TO_ADDR
// if x = - 1 then
34287: LD_VAR 0 13
34291: PUSH
34292: LD_INT 1
34294: NEG
34295: EQUAL
34296: IFFALSE 34505
// begin for j in f do
34298: LD_ADDR_VAR 0 9
34302: PUSH
34303: LD_VAR 0 12
34307: PUSH
34308: FOR_IN
34309: IFFALSE 34501
// repeat InitHc ;
34311: CALL_OW 19
// if GetBType ( j ) = b_barracks then
34315: LD_VAR 0 9
34319: PPUSH
34320: CALL_OW 266
34324: PUSH
34325: LD_INT 5
34327: EQUAL
34328: IFFALSE 34398
// begin if UnitsInside ( j ) < 3 then
34330: LD_VAR 0 9
34334: PPUSH
34335: CALL_OW 313
34339: PUSH
34340: LD_INT 3
34342: LESS
34343: IFFALSE 34379
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34345: LD_INT 0
34347: PPUSH
34348: LD_INT 5
34350: PUSH
34351: LD_INT 8
34353: PUSH
34354: LD_INT 9
34356: PUSH
34357: EMPTY
34358: LIST
34359: LIST
34360: LIST
34361: PUSH
34362: LD_VAR 0 17
34366: ARRAY
34367: PPUSH
34368: LD_VAR 0 4
34372: PPUSH
34373: CALL_OW 380
34377: GO 34396
// PrepareHuman ( false , i , skill ) ;
34379: LD_INT 0
34381: PPUSH
34382: LD_VAR 0 8
34386: PPUSH
34387: LD_VAR 0 4
34391: PPUSH
34392: CALL_OW 380
// end else
34396: GO 34415
// PrepareHuman ( false , i , skill ) ;
34398: LD_INT 0
34400: PPUSH
34401: LD_VAR 0 8
34405: PPUSH
34406: LD_VAR 0 4
34410: PPUSH
34411: CALL_OW 380
// un := CreateHuman ;
34415: LD_ADDR_VAR 0 14
34419: PUSH
34420: CALL_OW 44
34424: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34425: LD_ADDR_VAR 0 7
34429: PUSH
34430: LD_VAR 0 7
34434: PPUSH
34435: LD_INT 1
34437: PPUSH
34438: LD_VAR 0 14
34442: PPUSH
34443: CALL_OW 2
34447: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
34448: LD_VAR 0 14
34452: PPUSH
34453: LD_VAR 0 9
34457: PPUSH
34458: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
34462: LD_VAR 0 9
34466: PPUSH
34467: CALL_OW 313
34471: PUSH
34472: LD_INT 6
34474: EQUAL
34475: PUSH
34476: LD_VAR 0 9
34480: PPUSH
34481: CALL_OW 266
34485: PUSH
34486: LD_INT 32
34488: PUSH
34489: LD_INT 31
34491: PUSH
34492: EMPTY
34493: LIST
34494: LIST
34495: IN
34496: OR
34497: IFFALSE 34311
34499: GO 34308
34501: POP
34502: POP
// end else
34503: GO 34885
// for j = 1 to x do
34505: LD_ADDR_VAR 0 9
34509: PUSH
34510: DOUBLE
34511: LD_INT 1
34513: DEC
34514: ST_TO_ADDR
34515: LD_VAR 0 13
34519: PUSH
34520: FOR_TO
34521: IFFALSE 34883
// begin InitHc ;
34523: CALL_OW 19
// if not f then
34527: LD_VAR 0 12
34531: NOT
34532: IFFALSE 34621
// begin PrepareHuman ( false , i , skill ) ;
34534: LD_INT 0
34536: PPUSH
34537: LD_VAR 0 8
34541: PPUSH
34542: LD_VAR 0 4
34546: PPUSH
34547: CALL_OW 380
// un := CreateHuman ;
34551: LD_ADDR_VAR 0 14
34555: PUSH
34556: CALL_OW 44
34560: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34561: LD_ADDR_VAR 0 7
34565: PUSH
34566: LD_VAR 0 7
34570: PPUSH
34571: LD_INT 1
34573: PPUSH
34574: LD_VAR 0 14
34578: PPUSH
34579: CALL_OW 2
34583: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34584: LD_VAR 0 14
34588: PPUSH
34589: LD_VAR 0 1
34593: PPUSH
34594: CALL_OW 250
34598: PPUSH
34599: LD_VAR 0 1
34603: PPUSH
34604: CALL_OW 251
34608: PPUSH
34609: LD_INT 10
34611: PPUSH
34612: LD_INT 0
34614: PPUSH
34615: CALL_OW 50
// continue ;
34619: GO 34520
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
34621: LD_VAR 0 12
34625: PUSH
34626: LD_INT 1
34628: ARRAY
34629: PPUSH
34630: CALL_OW 313
34634: PUSH
34635: LD_VAR 0 12
34639: PUSH
34640: LD_INT 1
34642: ARRAY
34643: PPUSH
34644: CALL_OW 266
34648: PUSH
34649: LD_INT 32
34651: PUSH
34652: LD_INT 31
34654: PUSH
34655: EMPTY
34656: LIST
34657: LIST
34658: IN
34659: AND
34660: PUSH
34661: LD_VAR 0 12
34665: PUSH
34666: LD_INT 1
34668: ARRAY
34669: PPUSH
34670: CALL_OW 313
34674: PUSH
34675: LD_INT 6
34677: EQUAL
34678: OR
34679: IFFALSE 34699
// f := Delete ( f , 1 ) ;
34681: LD_ADDR_VAR 0 12
34685: PUSH
34686: LD_VAR 0 12
34690: PPUSH
34691: LD_INT 1
34693: PPUSH
34694: CALL_OW 3
34698: ST_TO_ADDR
// if not f then
34699: LD_VAR 0 12
34703: NOT
34704: IFFALSE 34722
// begin x := x + 2 ;
34706: LD_ADDR_VAR 0 13
34710: PUSH
34711: LD_VAR 0 13
34715: PUSH
34716: LD_INT 2
34718: PLUS
34719: ST_TO_ADDR
// continue ;
34720: GO 34520
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
34722: LD_VAR 0 12
34726: PUSH
34727: LD_INT 1
34729: ARRAY
34730: PPUSH
34731: CALL_OW 266
34735: PUSH
34736: LD_INT 5
34738: EQUAL
34739: IFFALSE 34813
// begin if UnitsInside ( f [ 1 ] ) < 3 then
34741: LD_VAR 0 12
34745: PUSH
34746: LD_INT 1
34748: ARRAY
34749: PPUSH
34750: CALL_OW 313
34754: PUSH
34755: LD_INT 3
34757: LESS
34758: IFFALSE 34794
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34760: LD_INT 0
34762: PPUSH
34763: LD_INT 5
34765: PUSH
34766: LD_INT 8
34768: PUSH
34769: LD_INT 9
34771: PUSH
34772: EMPTY
34773: LIST
34774: LIST
34775: LIST
34776: PUSH
34777: LD_VAR 0 17
34781: ARRAY
34782: PPUSH
34783: LD_VAR 0 4
34787: PPUSH
34788: CALL_OW 380
34792: GO 34811
// PrepareHuman ( false , i , skill ) ;
34794: LD_INT 0
34796: PPUSH
34797: LD_VAR 0 8
34801: PPUSH
34802: LD_VAR 0 4
34806: PPUSH
34807: CALL_OW 380
// end else
34811: GO 34830
// PrepareHuman ( false , i , skill ) ;
34813: LD_INT 0
34815: PPUSH
34816: LD_VAR 0 8
34820: PPUSH
34821: LD_VAR 0 4
34825: PPUSH
34826: CALL_OW 380
// un := CreateHuman ;
34830: LD_ADDR_VAR 0 14
34834: PUSH
34835: CALL_OW 44
34839: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34840: LD_ADDR_VAR 0 7
34844: PUSH
34845: LD_VAR 0 7
34849: PPUSH
34850: LD_INT 1
34852: PPUSH
34853: LD_VAR 0 14
34857: PPUSH
34858: CALL_OW 2
34862: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
34863: LD_VAR 0 14
34867: PPUSH
34868: LD_VAR 0 12
34872: PUSH
34873: LD_INT 1
34875: ARRAY
34876: PPUSH
34877: CALL_OW 52
// end ;
34881: GO 34520
34883: POP
34884: POP
// end ;
34885: GO 33822
34887: POP
34888: POP
// result := result ^ buildings ;
34889: LD_ADDR_VAR 0 7
34893: PUSH
34894: LD_VAR 0 7
34898: PUSH
34899: LD_VAR 0 18
34903: ADD
34904: ST_TO_ADDR
// end else
34905: GO 35048
// begin for i = 1 to personel do
34907: LD_ADDR_VAR 0 8
34911: PUSH
34912: DOUBLE
34913: LD_INT 1
34915: DEC
34916: ST_TO_ADDR
34917: LD_VAR 0 6
34921: PUSH
34922: FOR_TO
34923: IFFALSE 35046
// begin if i > 4 then
34925: LD_VAR 0 8
34929: PUSH
34930: LD_INT 4
34932: GREATER
34933: IFFALSE 34937
// break ;
34935: GO 35046
// x := personel [ i ] ;
34937: LD_ADDR_VAR 0 13
34941: PUSH
34942: LD_VAR 0 6
34946: PUSH
34947: LD_VAR 0 8
34951: ARRAY
34952: ST_TO_ADDR
// if x = - 1 then
34953: LD_VAR 0 13
34957: PUSH
34958: LD_INT 1
34960: NEG
34961: EQUAL
34962: IFFALSE 34966
// continue ;
34964: GO 34922
// PrepareHuman ( false , i , skill ) ;
34966: LD_INT 0
34968: PPUSH
34969: LD_VAR 0 8
34973: PPUSH
34974: LD_VAR 0 4
34978: PPUSH
34979: CALL_OW 380
// un := CreateHuman ;
34983: LD_ADDR_VAR 0 14
34987: PUSH
34988: CALL_OW 44
34992: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34993: LD_VAR 0 14
34997: PPUSH
34998: LD_VAR 0 1
35002: PPUSH
35003: CALL_OW 250
35007: PPUSH
35008: LD_VAR 0 1
35012: PPUSH
35013: CALL_OW 251
35017: PPUSH
35018: LD_INT 10
35020: PPUSH
35021: LD_INT 0
35023: PPUSH
35024: CALL_OW 50
// result := result ^ un ;
35028: LD_ADDR_VAR 0 7
35032: PUSH
35033: LD_VAR 0 7
35037: PUSH
35038: LD_VAR 0 14
35042: ADD
35043: ST_TO_ADDR
// end ;
35044: GO 34922
35046: POP
35047: POP
// end ; end ;
35048: LD_VAR 0 7
35052: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
35053: LD_INT 0
35055: PPUSH
35056: PPUSH
35057: PPUSH
35058: PPUSH
35059: PPUSH
35060: PPUSH
35061: PPUSH
35062: PPUSH
35063: PPUSH
35064: PPUSH
35065: PPUSH
35066: PPUSH
35067: PPUSH
35068: PPUSH
35069: PPUSH
35070: PPUSH
// result := false ;
35071: LD_ADDR_VAR 0 3
35075: PUSH
35076: LD_INT 0
35078: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
35079: LD_VAR 0 1
35083: NOT
35084: PUSH
35085: LD_VAR 0 1
35089: PPUSH
35090: CALL_OW 266
35094: PUSH
35095: LD_INT 32
35097: PUSH
35098: LD_INT 33
35100: PUSH
35101: EMPTY
35102: LIST
35103: LIST
35104: IN
35105: NOT
35106: OR
35107: IFFALSE 35111
// exit ;
35109: GO 36220
// nat := GetNation ( tower ) ;
35111: LD_ADDR_VAR 0 12
35115: PUSH
35116: LD_VAR 0 1
35120: PPUSH
35121: CALL_OW 248
35125: ST_TO_ADDR
// side := GetSide ( tower ) ;
35126: LD_ADDR_VAR 0 16
35130: PUSH
35131: LD_VAR 0 1
35135: PPUSH
35136: CALL_OW 255
35140: ST_TO_ADDR
// x := GetX ( tower ) ;
35141: LD_ADDR_VAR 0 10
35145: PUSH
35146: LD_VAR 0 1
35150: PPUSH
35151: CALL_OW 250
35155: ST_TO_ADDR
// y := GetY ( tower ) ;
35156: LD_ADDR_VAR 0 11
35160: PUSH
35161: LD_VAR 0 1
35165: PPUSH
35166: CALL_OW 251
35170: ST_TO_ADDR
// if not x or not y then
35171: LD_VAR 0 10
35175: NOT
35176: PUSH
35177: LD_VAR 0 11
35181: NOT
35182: OR
35183: IFFALSE 35187
// exit ;
35185: GO 36220
// weapon := 0 ;
35187: LD_ADDR_VAR 0 18
35191: PUSH
35192: LD_INT 0
35194: ST_TO_ADDR
// fac_list := [ ] ;
35195: LD_ADDR_VAR 0 17
35199: PUSH
35200: EMPTY
35201: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
35202: LD_ADDR_VAR 0 6
35206: PUSH
35207: LD_VAR 0 1
35211: PPUSH
35212: CALL_OW 274
35216: PPUSH
35217: LD_VAR 0 2
35221: PPUSH
35222: LD_INT 0
35224: PPUSH
35225: CALL 32791 0 3
35229: PPUSH
35230: LD_INT 30
35232: PUSH
35233: LD_INT 3
35235: PUSH
35236: EMPTY
35237: LIST
35238: LIST
35239: PPUSH
35240: CALL_OW 72
35244: ST_TO_ADDR
// if not factories then
35245: LD_VAR 0 6
35249: NOT
35250: IFFALSE 35254
// exit ;
35252: GO 36220
// for i in factories do
35254: LD_ADDR_VAR 0 8
35258: PUSH
35259: LD_VAR 0 6
35263: PUSH
35264: FOR_IN
35265: IFFALSE 35290
// fac_list := fac_list union AvailableWeaponList ( i ) ;
35267: LD_ADDR_VAR 0 17
35271: PUSH
35272: LD_VAR 0 17
35276: PUSH
35277: LD_VAR 0 8
35281: PPUSH
35282: CALL_OW 478
35286: UNION
35287: ST_TO_ADDR
35288: GO 35264
35290: POP
35291: POP
// if not fac_list then
35292: LD_VAR 0 17
35296: NOT
35297: IFFALSE 35301
// exit ;
35299: GO 36220
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
35301: LD_ADDR_VAR 0 5
35305: PUSH
35306: LD_INT 4
35308: PUSH
35309: LD_INT 5
35311: PUSH
35312: LD_INT 9
35314: PUSH
35315: LD_INT 10
35317: PUSH
35318: LD_INT 6
35320: PUSH
35321: LD_INT 7
35323: PUSH
35324: LD_INT 11
35326: PUSH
35327: EMPTY
35328: LIST
35329: LIST
35330: LIST
35331: LIST
35332: LIST
35333: LIST
35334: LIST
35335: PUSH
35336: LD_INT 27
35338: PUSH
35339: LD_INT 28
35341: PUSH
35342: LD_INT 26
35344: PUSH
35345: LD_INT 30
35347: PUSH
35348: EMPTY
35349: LIST
35350: LIST
35351: LIST
35352: LIST
35353: PUSH
35354: LD_INT 43
35356: PUSH
35357: LD_INT 44
35359: PUSH
35360: LD_INT 46
35362: PUSH
35363: LD_INT 45
35365: PUSH
35366: LD_INT 47
35368: PUSH
35369: LD_INT 49
35371: PUSH
35372: EMPTY
35373: LIST
35374: LIST
35375: LIST
35376: LIST
35377: LIST
35378: LIST
35379: PUSH
35380: EMPTY
35381: LIST
35382: LIST
35383: LIST
35384: PUSH
35385: LD_VAR 0 12
35389: ARRAY
35390: ST_TO_ADDR
// list := list isect fac_list ;
35391: LD_ADDR_VAR 0 5
35395: PUSH
35396: LD_VAR 0 5
35400: PUSH
35401: LD_VAR 0 17
35405: ISECT
35406: ST_TO_ADDR
// if not list then
35407: LD_VAR 0 5
35411: NOT
35412: IFFALSE 35416
// exit ;
35414: GO 36220
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
35416: LD_VAR 0 12
35420: PUSH
35421: LD_INT 3
35423: EQUAL
35424: PUSH
35425: LD_INT 49
35427: PUSH
35428: LD_VAR 0 5
35432: IN
35433: AND
35434: PUSH
35435: LD_INT 31
35437: PPUSH
35438: LD_VAR 0 16
35442: PPUSH
35443: CALL_OW 321
35447: PUSH
35448: LD_INT 2
35450: EQUAL
35451: AND
35452: IFFALSE 35512
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
35454: LD_INT 22
35456: PUSH
35457: LD_VAR 0 16
35461: PUSH
35462: EMPTY
35463: LIST
35464: LIST
35465: PUSH
35466: LD_INT 35
35468: PUSH
35469: LD_INT 49
35471: PUSH
35472: EMPTY
35473: LIST
35474: LIST
35475: PUSH
35476: LD_INT 91
35478: PUSH
35479: LD_VAR 0 1
35483: PUSH
35484: LD_INT 10
35486: PUSH
35487: EMPTY
35488: LIST
35489: LIST
35490: LIST
35491: PUSH
35492: EMPTY
35493: LIST
35494: LIST
35495: LIST
35496: PPUSH
35497: CALL_OW 69
35501: NOT
35502: IFFALSE 35512
// weapon := ru_time_lapser ;
35504: LD_ADDR_VAR 0 18
35508: PUSH
35509: LD_INT 49
35511: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
35512: LD_VAR 0 12
35516: PUSH
35517: LD_INT 1
35519: PUSH
35520: LD_INT 2
35522: PUSH
35523: EMPTY
35524: LIST
35525: LIST
35526: IN
35527: PUSH
35528: LD_INT 11
35530: PUSH
35531: LD_VAR 0 5
35535: IN
35536: PUSH
35537: LD_INT 30
35539: PUSH
35540: LD_VAR 0 5
35544: IN
35545: OR
35546: AND
35547: PUSH
35548: LD_INT 6
35550: PPUSH
35551: LD_VAR 0 16
35555: PPUSH
35556: CALL_OW 321
35560: PUSH
35561: LD_INT 2
35563: EQUAL
35564: AND
35565: IFFALSE 35730
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
35567: LD_INT 22
35569: PUSH
35570: LD_VAR 0 16
35574: PUSH
35575: EMPTY
35576: LIST
35577: LIST
35578: PUSH
35579: LD_INT 2
35581: PUSH
35582: LD_INT 35
35584: PUSH
35585: LD_INT 11
35587: PUSH
35588: EMPTY
35589: LIST
35590: LIST
35591: PUSH
35592: LD_INT 35
35594: PUSH
35595: LD_INT 30
35597: PUSH
35598: EMPTY
35599: LIST
35600: LIST
35601: PUSH
35602: EMPTY
35603: LIST
35604: LIST
35605: LIST
35606: PUSH
35607: LD_INT 91
35609: PUSH
35610: LD_VAR 0 1
35614: PUSH
35615: LD_INT 18
35617: PUSH
35618: EMPTY
35619: LIST
35620: LIST
35621: LIST
35622: PUSH
35623: EMPTY
35624: LIST
35625: LIST
35626: LIST
35627: PPUSH
35628: CALL_OW 69
35632: NOT
35633: PUSH
35634: LD_INT 22
35636: PUSH
35637: LD_VAR 0 16
35641: PUSH
35642: EMPTY
35643: LIST
35644: LIST
35645: PUSH
35646: LD_INT 2
35648: PUSH
35649: LD_INT 30
35651: PUSH
35652: LD_INT 32
35654: PUSH
35655: EMPTY
35656: LIST
35657: LIST
35658: PUSH
35659: LD_INT 30
35661: PUSH
35662: LD_INT 33
35664: PUSH
35665: EMPTY
35666: LIST
35667: LIST
35668: PUSH
35669: EMPTY
35670: LIST
35671: LIST
35672: LIST
35673: PUSH
35674: LD_INT 91
35676: PUSH
35677: LD_VAR 0 1
35681: PUSH
35682: LD_INT 12
35684: PUSH
35685: EMPTY
35686: LIST
35687: LIST
35688: LIST
35689: PUSH
35690: EMPTY
35691: LIST
35692: LIST
35693: LIST
35694: PUSH
35695: EMPTY
35696: LIST
35697: PPUSH
35698: CALL_OW 69
35702: PUSH
35703: LD_INT 2
35705: GREATER
35706: AND
35707: IFFALSE 35730
// weapon := [ us_radar , ar_radar ] [ nat ] ;
35709: LD_ADDR_VAR 0 18
35713: PUSH
35714: LD_INT 11
35716: PUSH
35717: LD_INT 30
35719: PUSH
35720: EMPTY
35721: LIST
35722: LIST
35723: PUSH
35724: LD_VAR 0 12
35728: ARRAY
35729: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
35730: LD_VAR 0 18
35734: NOT
35735: PUSH
35736: LD_INT 40
35738: PPUSH
35739: LD_VAR 0 16
35743: PPUSH
35744: CALL_OW 321
35748: PUSH
35749: LD_INT 2
35751: EQUAL
35752: AND
35753: PUSH
35754: LD_INT 7
35756: PUSH
35757: LD_VAR 0 5
35761: IN
35762: PUSH
35763: LD_INT 28
35765: PUSH
35766: LD_VAR 0 5
35770: IN
35771: OR
35772: PUSH
35773: LD_INT 45
35775: PUSH
35776: LD_VAR 0 5
35780: IN
35781: OR
35782: AND
35783: IFFALSE 36037
// begin hex := GetHexInfo ( x , y ) ;
35785: LD_ADDR_VAR 0 4
35789: PUSH
35790: LD_VAR 0 10
35794: PPUSH
35795: LD_VAR 0 11
35799: PPUSH
35800: CALL_OW 546
35804: ST_TO_ADDR
// if hex [ 1 ] then
35805: LD_VAR 0 4
35809: PUSH
35810: LD_INT 1
35812: ARRAY
35813: IFFALSE 35817
// exit ;
35815: GO 36220
// height := hex [ 2 ] ;
35817: LD_ADDR_VAR 0 15
35821: PUSH
35822: LD_VAR 0 4
35826: PUSH
35827: LD_INT 2
35829: ARRAY
35830: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
35831: LD_ADDR_VAR 0 14
35835: PUSH
35836: LD_INT 0
35838: PUSH
35839: LD_INT 2
35841: PUSH
35842: LD_INT 3
35844: PUSH
35845: LD_INT 5
35847: PUSH
35848: EMPTY
35849: LIST
35850: LIST
35851: LIST
35852: LIST
35853: ST_TO_ADDR
// for i in tmp do
35854: LD_ADDR_VAR 0 8
35858: PUSH
35859: LD_VAR 0 14
35863: PUSH
35864: FOR_IN
35865: IFFALSE 36035
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
35867: LD_ADDR_VAR 0 9
35871: PUSH
35872: LD_VAR 0 10
35876: PPUSH
35877: LD_VAR 0 8
35881: PPUSH
35882: LD_INT 5
35884: PPUSH
35885: CALL_OW 272
35889: PUSH
35890: LD_VAR 0 11
35894: PPUSH
35895: LD_VAR 0 8
35899: PPUSH
35900: LD_INT 5
35902: PPUSH
35903: CALL_OW 273
35907: PUSH
35908: EMPTY
35909: LIST
35910: LIST
35911: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
35912: LD_VAR 0 9
35916: PUSH
35917: LD_INT 1
35919: ARRAY
35920: PPUSH
35921: LD_VAR 0 9
35925: PUSH
35926: LD_INT 2
35928: ARRAY
35929: PPUSH
35930: CALL_OW 488
35934: IFFALSE 36033
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
35936: LD_ADDR_VAR 0 4
35940: PUSH
35941: LD_VAR 0 9
35945: PUSH
35946: LD_INT 1
35948: ARRAY
35949: PPUSH
35950: LD_VAR 0 9
35954: PUSH
35955: LD_INT 2
35957: ARRAY
35958: PPUSH
35959: CALL_OW 546
35963: ST_TO_ADDR
// if hex [ 1 ] then
35964: LD_VAR 0 4
35968: PUSH
35969: LD_INT 1
35971: ARRAY
35972: IFFALSE 35976
// continue ;
35974: GO 35864
// h := hex [ 2 ] ;
35976: LD_ADDR_VAR 0 13
35980: PUSH
35981: LD_VAR 0 4
35985: PUSH
35986: LD_INT 2
35988: ARRAY
35989: ST_TO_ADDR
// if h + 7 < height then
35990: LD_VAR 0 13
35994: PUSH
35995: LD_INT 7
35997: PLUS
35998: PUSH
35999: LD_VAR 0 15
36003: LESS
36004: IFFALSE 36033
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
36006: LD_ADDR_VAR 0 18
36010: PUSH
36011: LD_INT 7
36013: PUSH
36014: LD_INT 28
36016: PUSH
36017: LD_INT 45
36019: PUSH
36020: EMPTY
36021: LIST
36022: LIST
36023: LIST
36024: PUSH
36025: LD_VAR 0 12
36029: ARRAY
36030: ST_TO_ADDR
// break ;
36031: GO 36035
// end ; end ; end ;
36033: GO 35864
36035: POP
36036: POP
// end ; if not weapon then
36037: LD_VAR 0 18
36041: NOT
36042: IFFALSE 36102
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
36044: LD_ADDR_VAR 0 5
36048: PUSH
36049: LD_VAR 0 5
36053: PUSH
36054: LD_INT 11
36056: PUSH
36057: LD_INT 30
36059: PUSH
36060: LD_INT 49
36062: PUSH
36063: EMPTY
36064: LIST
36065: LIST
36066: LIST
36067: DIFF
36068: ST_TO_ADDR
// if not list then
36069: LD_VAR 0 5
36073: NOT
36074: IFFALSE 36078
// exit ;
36076: GO 36220
// weapon := list [ rand ( 1 , list ) ] ;
36078: LD_ADDR_VAR 0 18
36082: PUSH
36083: LD_VAR 0 5
36087: PUSH
36088: LD_INT 1
36090: PPUSH
36091: LD_VAR 0 5
36095: PPUSH
36096: CALL_OW 12
36100: ARRAY
36101: ST_TO_ADDR
// end ; if weapon then
36102: LD_VAR 0 18
36106: IFFALSE 36220
// begin tmp := CostOfWeapon ( weapon ) ;
36108: LD_ADDR_VAR 0 14
36112: PUSH
36113: LD_VAR 0 18
36117: PPUSH
36118: CALL_OW 451
36122: ST_TO_ADDR
// j := GetBase ( tower ) ;
36123: LD_ADDR_VAR 0 9
36127: PUSH
36128: LD_VAR 0 1
36132: PPUSH
36133: CALL_OW 274
36137: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
36138: LD_VAR 0 9
36142: PPUSH
36143: LD_INT 1
36145: PPUSH
36146: CALL_OW 275
36150: PUSH
36151: LD_VAR 0 14
36155: PUSH
36156: LD_INT 1
36158: ARRAY
36159: GREATEREQUAL
36160: PUSH
36161: LD_VAR 0 9
36165: PPUSH
36166: LD_INT 2
36168: PPUSH
36169: CALL_OW 275
36173: PUSH
36174: LD_VAR 0 14
36178: PUSH
36179: LD_INT 2
36181: ARRAY
36182: GREATEREQUAL
36183: AND
36184: PUSH
36185: LD_VAR 0 9
36189: PPUSH
36190: LD_INT 3
36192: PPUSH
36193: CALL_OW 275
36197: PUSH
36198: LD_VAR 0 14
36202: PUSH
36203: LD_INT 3
36205: ARRAY
36206: GREATEREQUAL
36207: AND
36208: IFFALSE 36220
// result := weapon ;
36210: LD_ADDR_VAR 0 3
36214: PUSH
36215: LD_VAR 0 18
36219: ST_TO_ADDR
// end ; end ;
36220: LD_VAR 0 3
36224: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
36225: LD_INT 0
36227: PPUSH
36228: PPUSH
// result := true ;
36229: LD_ADDR_VAR 0 3
36233: PUSH
36234: LD_INT 1
36236: ST_TO_ADDR
// if array1 = array2 then
36237: LD_VAR 0 1
36241: PUSH
36242: LD_VAR 0 2
36246: EQUAL
36247: IFFALSE 36307
// begin for i = 1 to array1 do
36249: LD_ADDR_VAR 0 4
36253: PUSH
36254: DOUBLE
36255: LD_INT 1
36257: DEC
36258: ST_TO_ADDR
36259: LD_VAR 0 1
36263: PUSH
36264: FOR_TO
36265: IFFALSE 36303
// if array1 [ i ] <> array2 [ i ] then
36267: LD_VAR 0 1
36271: PUSH
36272: LD_VAR 0 4
36276: ARRAY
36277: PUSH
36278: LD_VAR 0 2
36282: PUSH
36283: LD_VAR 0 4
36287: ARRAY
36288: NONEQUAL
36289: IFFALSE 36301
// begin result := false ;
36291: LD_ADDR_VAR 0 3
36295: PUSH
36296: LD_INT 0
36298: ST_TO_ADDR
// break ;
36299: GO 36303
// end ;
36301: GO 36264
36303: POP
36304: POP
// end else
36305: GO 36315
// result := false ;
36307: LD_ADDR_VAR 0 3
36311: PUSH
36312: LD_INT 0
36314: ST_TO_ADDR
// end ;
36315: LD_VAR 0 3
36319: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
36320: LD_INT 0
36322: PPUSH
36323: PPUSH
// if not array1 or not array2 then
36324: LD_VAR 0 1
36328: NOT
36329: PUSH
36330: LD_VAR 0 2
36334: NOT
36335: OR
36336: IFFALSE 36340
// exit ;
36338: GO 36404
// result := true ;
36340: LD_ADDR_VAR 0 3
36344: PUSH
36345: LD_INT 1
36347: ST_TO_ADDR
// for i = 1 to array1 do
36348: LD_ADDR_VAR 0 4
36352: PUSH
36353: DOUBLE
36354: LD_INT 1
36356: DEC
36357: ST_TO_ADDR
36358: LD_VAR 0 1
36362: PUSH
36363: FOR_TO
36364: IFFALSE 36402
// if array1 [ i ] <> array2 [ i ] then
36366: LD_VAR 0 1
36370: PUSH
36371: LD_VAR 0 4
36375: ARRAY
36376: PUSH
36377: LD_VAR 0 2
36381: PUSH
36382: LD_VAR 0 4
36386: ARRAY
36387: NONEQUAL
36388: IFFALSE 36400
// begin result := false ;
36390: LD_ADDR_VAR 0 3
36394: PUSH
36395: LD_INT 0
36397: ST_TO_ADDR
// break ;
36398: GO 36402
// end ;
36400: GO 36363
36402: POP
36403: POP
// end ;
36404: LD_VAR 0 3
36408: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
36409: LD_INT 0
36411: PPUSH
36412: PPUSH
36413: PPUSH
// pom := GetBase ( fac ) ;
36414: LD_ADDR_VAR 0 5
36418: PUSH
36419: LD_VAR 0 1
36423: PPUSH
36424: CALL_OW 274
36428: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
36429: LD_ADDR_VAR 0 4
36433: PUSH
36434: LD_VAR 0 2
36438: PUSH
36439: LD_INT 1
36441: ARRAY
36442: PPUSH
36443: LD_VAR 0 2
36447: PUSH
36448: LD_INT 2
36450: ARRAY
36451: PPUSH
36452: LD_VAR 0 2
36456: PUSH
36457: LD_INT 3
36459: ARRAY
36460: PPUSH
36461: LD_VAR 0 2
36465: PUSH
36466: LD_INT 4
36468: ARRAY
36469: PPUSH
36470: CALL_OW 449
36474: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36475: LD_ADDR_VAR 0 3
36479: PUSH
36480: LD_VAR 0 5
36484: PPUSH
36485: LD_INT 1
36487: PPUSH
36488: CALL_OW 275
36492: PUSH
36493: LD_VAR 0 4
36497: PUSH
36498: LD_INT 1
36500: ARRAY
36501: GREATEREQUAL
36502: PUSH
36503: LD_VAR 0 5
36507: PPUSH
36508: LD_INT 2
36510: PPUSH
36511: CALL_OW 275
36515: PUSH
36516: LD_VAR 0 4
36520: PUSH
36521: LD_INT 2
36523: ARRAY
36524: GREATEREQUAL
36525: AND
36526: PUSH
36527: LD_VAR 0 5
36531: PPUSH
36532: LD_INT 3
36534: PPUSH
36535: CALL_OW 275
36539: PUSH
36540: LD_VAR 0 4
36544: PUSH
36545: LD_INT 3
36547: ARRAY
36548: GREATEREQUAL
36549: AND
36550: ST_TO_ADDR
// end ;
36551: LD_VAR 0 3
36555: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
36556: LD_INT 0
36558: PPUSH
36559: PPUSH
36560: PPUSH
36561: PPUSH
// pom := GetBase ( building ) ;
36562: LD_ADDR_VAR 0 3
36566: PUSH
36567: LD_VAR 0 1
36571: PPUSH
36572: CALL_OW 274
36576: ST_TO_ADDR
// if not pom then
36577: LD_VAR 0 3
36581: NOT
36582: IFFALSE 36586
// exit ;
36584: GO 36756
// btype := GetBType ( building ) ;
36586: LD_ADDR_VAR 0 5
36590: PUSH
36591: LD_VAR 0 1
36595: PPUSH
36596: CALL_OW 266
36600: ST_TO_ADDR
// if btype = b_armoury then
36601: LD_VAR 0 5
36605: PUSH
36606: LD_INT 4
36608: EQUAL
36609: IFFALSE 36619
// btype := b_barracks ;
36611: LD_ADDR_VAR 0 5
36615: PUSH
36616: LD_INT 5
36618: ST_TO_ADDR
// if btype = b_depot then
36619: LD_VAR 0 5
36623: PUSH
36624: LD_INT 0
36626: EQUAL
36627: IFFALSE 36637
// btype := b_warehouse ;
36629: LD_ADDR_VAR 0 5
36633: PUSH
36634: LD_INT 1
36636: ST_TO_ADDR
// if btype = b_workshop then
36637: LD_VAR 0 5
36641: PUSH
36642: LD_INT 2
36644: EQUAL
36645: IFFALSE 36655
// btype := b_factory ;
36647: LD_ADDR_VAR 0 5
36651: PUSH
36652: LD_INT 3
36654: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36655: LD_ADDR_VAR 0 4
36659: PUSH
36660: LD_VAR 0 5
36664: PPUSH
36665: LD_VAR 0 1
36669: PPUSH
36670: CALL_OW 248
36674: PPUSH
36675: CALL_OW 450
36679: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36680: LD_ADDR_VAR 0 2
36684: PUSH
36685: LD_VAR 0 3
36689: PPUSH
36690: LD_INT 1
36692: PPUSH
36693: CALL_OW 275
36697: PUSH
36698: LD_VAR 0 4
36702: PUSH
36703: LD_INT 1
36705: ARRAY
36706: GREATEREQUAL
36707: PUSH
36708: LD_VAR 0 3
36712: PPUSH
36713: LD_INT 2
36715: PPUSH
36716: CALL_OW 275
36720: PUSH
36721: LD_VAR 0 4
36725: PUSH
36726: LD_INT 2
36728: ARRAY
36729: GREATEREQUAL
36730: AND
36731: PUSH
36732: LD_VAR 0 3
36736: PPUSH
36737: LD_INT 3
36739: PPUSH
36740: CALL_OW 275
36744: PUSH
36745: LD_VAR 0 4
36749: PUSH
36750: LD_INT 3
36752: ARRAY
36753: GREATEREQUAL
36754: AND
36755: ST_TO_ADDR
// end ;
36756: LD_VAR 0 2
36760: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
36761: LD_INT 0
36763: PPUSH
36764: PPUSH
36765: PPUSH
// pom := GetBase ( building ) ;
36766: LD_ADDR_VAR 0 4
36770: PUSH
36771: LD_VAR 0 1
36775: PPUSH
36776: CALL_OW 274
36780: ST_TO_ADDR
// if not pom then
36781: LD_VAR 0 4
36785: NOT
36786: IFFALSE 36790
// exit ;
36788: GO 36891
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36790: LD_ADDR_VAR 0 5
36794: PUSH
36795: LD_VAR 0 2
36799: PPUSH
36800: LD_VAR 0 1
36804: PPUSH
36805: CALL_OW 248
36809: PPUSH
36810: CALL_OW 450
36814: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36815: LD_ADDR_VAR 0 3
36819: PUSH
36820: LD_VAR 0 4
36824: PPUSH
36825: LD_INT 1
36827: PPUSH
36828: CALL_OW 275
36832: PUSH
36833: LD_VAR 0 5
36837: PUSH
36838: LD_INT 1
36840: ARRAY
36841: GREATEREQUAL
36842: PUSH
36843: LD_VAR 0 4
36847: PPUSH
36848: LD_INT 2
36850: PPUSH
36851: CALL_OW 275
36855: PUSH
36856: LD_VAR 0 5
36860: PUSH
36861: LD_INT 2
36863: ARRAY
36864: GREATEREQUAL
36865: AND
36866: PUSH
36867: LD_VAR 0 4
36871: PPUSH
36872: LD_INT 3
36874: PPUSH
36875: CALL_OW 275
36879: PUSH
36880: LD_VAR 0 5
36884: PUSH
36885: LD_INT 3
36887: ARRAY
36888: GREATEREQUAL
36889: AND
36890: ST_TO_ADDR
// end ;
36891: LD_VAR 0 3
36895: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
36896: LD_INT 0
36898: PPUSH
36899: PPUSH
36900: PPUSH
36901: PPUSH
36902: PPUSH
36903: PPUSH
36904: PPUSH
36905: PPUSH
36906: PPUSH
36907: PPUSH
36908: PPUSH
// result := false ;
36909: LD_ADDR_VAR 0 8
36913: PUSH
36914: LD_INT 0
36916: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
36917: LD_VAR 0 5
36921: NOT
36922: PUSH
36923: LD_VAR 0 1
36927: NOT
36928: OR
36929: PUSH
36930: LD_VAR 0 2
36934: NOT
36935: OR
36936: PUSH
36937: LD_VAR 0 3
36941: NOT
36942: OR
36943: IFFALSE 36947
// exit ;
36945: GO 37761
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
36947: LD_ADDR_VAR 0 14
36951: PUSH
36952: LD_VAR 0 1
36956: PPUSH
36957: LD_VAR 0 2
36961: PPUSH
36962: LD_VAR 0 3
36966: PPUSH
36967: LD_VAR 0 4
36971: PPUSH
36972: LD_VAR 0 5
36976: PUSH
36977: LD_INT 1
36979: ARRAY
36980: PPUSH
36981: CALL_OW 248
36985: PPUSH
36986: LD_INT 0
36988: PPUSH
36989: CALL 38998 0 6
36993: ST_TO_ADDR
// if not hexes then
36994: LD_VAR 0 14
36998: NOT
36999: IFFALSE 37003
// exit ;
37001: GO 37761
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
37003: LD_ADDR_VAR 0 17
37007: PUSH
37008: LD_VAR 0 5
37012: PPUSH
37013: LD_INT 22
37015: PUSH
37016: LD_VAR 0 13
37020: PPUSH
37021: CALL_OW 255
37025: PUSH
37026: EMPTY
37027: LIST
37028: LIST
37029: PUSH
37030: LD_INT 2
37032: PUSH
37033: LD_INT 30
37035: PUSH
37036: LD_INT 0
37038: PUSH
37039: EMPTY
37040: LIST
37041: LIST
37042: PUSH
37043: LD_INT 30
37045: PUSH
37046: LD_INT 1
37048: PUSH
37049: EMPTY
37050: LIST
37051: LIST
37052: PUSH
37053: EMPTY
37054: LIST
37055: LIST
37056: LIST
37057: PUSH
37058: EMPTY
37059: LIST
37060: LIST
37061: PPUSH
37062: CALL_OW 72
37066: ST_TO_ADDR
// for i = 1 to hexes do
37067: LD_ADDR_VAR 0 9
37071: PUSH
37072: DOUBLE
37073: LD_INT 1
37075: DEC
37076: ST_TO_ADDR
37077: LD_VAR 0 14
37081: PUSH
37082: FOR_TO
37083: IFFALSE 37759
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37085: LD_ADDR_VAR 0 13
37089: PUSH
37090: LD_VAR 0 14
37094: PUSH
37095: LD_VAR 0 9
37099: ARRAY
37100: PUSH
37101: LD_INT 1
37103: ARRAY
37104: PPUSH
37105: LD_VAR 0 14
37109: PUSH
37110: LD_VAR 0 9
37114: ARRAY
37115: PUSH
37116: LD_INT 2
37118: ARRAY
37119: PPUSH
37120: CALL_OW 428
37124: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
37125: LD_VAR 0 14
37129: PUSH
37130: LD_VAR 0 9
37134: ARRAY
37135: PUSH
37136: LD_INT 1
37138: ARRAY
37139: PPUSH
37140: LD_VAR 0 14
37144: PUSH
37145: LD_VAR 0 9
37149: ARRAY
37150: PUSH
37151: LD_INT 2
37153: ARRAY
37154: PPUSH
37155: CALL_OW 351
37159: PUSH
37160: LD_VAR 0 14
37164: PUSH
37165: LD_VAR 0 9
37169: ARRAY
37170: PUSH
37171: LD_INT 1
37173: ARRAY
37174: PPUSH
37175: LD_VAR 0 14
37179: PUSH
37180: LD_VAR 0 9
37184: ARRAY
37185: PUSH
37186: LD_INT 2
37188: ARRAY
37189: PPUSH
37190: CALL_OW 488
37194: NOT
37195: OR
37196: PUSH
37197: LD_VAR 0 13
37201: PPUSH
37202: CALL_OW 247
37206: PUSH
37207: LD_INT 3
37209: EQUAL
37210: OR
37211: IFFALSE 37217
// exit ;
37213: POP
37214: POP
37215: GO 37761
// if not tmp then
37217: LD_VAR 0 13
37221: NOT
37222: IFFALSE 37226
// continue ;
37224: GO 37082
// result := true ;
37226: LD_ADDR_VAR 0 8
37230: PUSH
37231: LD_INT 1
37233: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
37234: LD_VAR 0 6
37238: PUSH
37239: LD_VAR 0 13
37243: PPUSH
37244: CALL_OW 247
37248: PUSH
37249: LD_INT 2
37251: EQUAL
37252: AND
37253: PUSH
37254: LD_VAR 0 13
37258: PPUSH
37259: CALL_OW 263
37263: PUSH
37264: LD_INT 1
37266: EQUAL
37267: AND
37268: IFFALSE 37432
// begin if IsDrivenBy ( tmp ) then
37270: LD_VAR 0 13
37274: PPUSH
37275: CALL_OW 311
37279: IFFALSE 37283
// continue ;
37281: GO 37082
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
37283: LD_VAR 0 6
37287: PPUSH
37288: LD_INT 3
37290: PUSH
37291: LD_INT 60
37293: PUSH
37294: EMPTY
37295: LIST
37296: PUSH
37297: EMPTY
37298: LIST
37299: LIST
37300: PUSH
37301: LD_INT 3
37303: PUSH
37304: LD_INT 55
37306: PUSH
37307: EMPTY
37308: LIST
37309: PUSH
37310: EMPTY
37311: LIST
37312: LIST
37313: PUSH
37314: EMPTY
37315: LIST
37316: LIST
37317: PPUSH
37318: CALL_OW 72
37322: IFFALSE 37430
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
37324: LD_ADDR_VAR 0 18
37328: PUSH
37329: LD_VAR 0 6
37333: PPUSH
37334: LD_INT 3
37336: PUSH
37337: LD_INT 60
37339: PUSH
37340: EMPTY
37341: LIST
37342: PUSH
37343: EMPTY
37344: LIST
37345: LIST
37346: PUSH
37347: LD_INT 3
37349: PUSH
37350: LD_INT 55
37352: PUSH
37353: EMPTY
37354: LIST
37355: PUSH
37356: EMPTY
37357: LIST
37358: LIST
37359: PUSH
37360: EMPTY
37361: LIST
37362: LIST
37363: PPUSH
37364: CALL_OW 72
37368: PUSH
37369: LD_INT 1
37371: ARRAY
37372: ST_TO_ADDR
// if IsInUnit ( driver ) then
37373: LD_VAR 0 18
37377: PPUSH
37378: CALL_OW 310
37382: IFFALSE 37393
// ComExit ( driver ) ;
37384: LD_VAR 0 18
37388: PPUSH
37389: CALL 62126 0 1
// AddComEnterUnit ( driver , tmp ) ;
37393: LD_VAR 0 18
37397: PPUSH
37398: LD_VAR 0 13
37402: PPUSH
37403: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
37407: LD_VAR 0 18
37411: PPUSH
37412: LD_VAR 0 7
37416: PPUSH
37417: CALL_OW 173
// AddComExitVehicle ( driver ) ;
37421: LD_VAR 0 18
37425: PPUSH
37426: CALL_OW 181
// end ; continue ;
37430: GO 37082
// end ; if not cleaners or not tmp in cleaners then
37432: LD_VAR 0 6
37436: NOT
37437: PUSH
37438: LD_VAR 0 13
37442: PUSH
37443: LD_VAR 0 6
37447: IN
37448: NOT
37449: OR
37450: IFFALSE 37757
// begin if dep then
37452: LD_VAR 0 17
37456: IFFALSE 37592
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
37458: LD_ADDR_VAR 0 16
37462: PUSH
37463: LD_VAR 0 17
37467: PUSH
37468: LD_INT 1
37470: ARRAY
37471: PPUSH
37472: CALL_OW 250
37476: PPUSH
37477: LD_VAR 0 17
37481: PUSH
37482: LD_INT 1
37484: ARRAY
37485: PPUSH
37486: CALL_OW 254
37490: PPUSH
37491: LD_INT 5
37493: PPUSH
37494: CALL_OW 272
37498: PUSH
37499: LD_VAR 0 17
37503: PUSH
37504: LD_INT 1
37506: ARRAY
37507: PPUSH
37508: CALL_OW 251
37512: PPUSH
37513: LD_VAR 0 17
37517: PUSH
37518: LD_INT 1
37520: ARRAY
37521: PPUSH
37522: CALL_OW 254
37526: PPUSH
37527: LD_INT 5
37529: PPUSH
37530: CALL_OW 273
37534: PUSH
37535: EMPTY
37536: LIST
37537: LIST
37538: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
37539: LD_VAR 0 16
37543: PUSH
37544: LD_INT 1
37546: ARRAY
37547: PPUSH
37548: LD_VAR 0 16
37552: PUSH
37553: LD_INT 2
37555: ARRAY
37556: PPUSH
37557: CALL_OW 488
37561: IFFALSE 37592
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
37563: LD_VAR 0 13
37567: PPUSH
37568: LD_VAR 0 16
37572: PUSH
37573: LD_INT 1
37575: ARRAY
37576: PPUSH
37577: LD_VAR 0 16
37581: PUSH
37582: LD_INT 2
37584: ARRAY
37585: PPUSH
37586: CALL_OW 111
// continue ;
37590: GO 37082
// end ; end ; r := GetDir ( tmp ) ;
37592: LD_ADDR_VAR 0 15
37596: PUSH
37597: LD_VAR 0 13
37601: PPUSH
37602: CALL_OW 254
37606: ST_TO_ADDR
// if r = 5 then
37607: LD_VAR 0 15
37611: PUSH
37612: LD_INT 5
37614: EQUAL
37615: IFFALSE 37625
// r := 0 ;
37617: LD_ADDR_VAR 0 15
37621: PUSH
37622: LD_INT 0
37624: ST_TO_ADDR
// for j = r to 5 do
37625: LD_ADDR_VAR 0 10
37629: PUSH
37630: DOUBLE
37631: LD_VAR 0 15
37635: DEC
37636: ST_TO_ADDR
37637: LD_INT 5
37639: PUSH
37640: FOR_TO
37641: IFFALSE 37755
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
37643: LD_ADDR_VAR 0 11
37647: PUSH
37648: LD_VAR 0 13
37652: PPUSH
37653: CALL_OW 250
37657: PPUSH
37658: LD_VAR 0 10
37662: PPUSH
37663: LD_INT 2
37665: PPUSH
37666: CALL_OW 272
37670: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
37671: LD_ADDR_VAR 0 12
37675: PUSH
37676: LD_VAR 0 13
37680: PPUSH
37681: CALL_OW 251
37685: PPUSH
37686: LD_VAR 0 10
37690: PPUSH
37691: LD_INT 2
37693: PPUSH
37694: CALL_OW 273
37698: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
37699: LD_VAR 0 11
37703: PPUSH
37704: LD_VAR 0 12
37708: PPUSH
37709: CALL_OW 488
37713: PUSH
37714: LD_VAR 0 11
37718: PPUSH
37719: LD_VAR 0 12
37723: PPUSH
37724: CALL_OW 428
37728: NOT
37729: AND
37730: IFFALSE 37753
// begin ComMoveXY ( tmp , _x , _y ) ;
37732: LD_VAR 0 13
37736: PPUSH
37737: LD_VAR 0 11
37741: PPUSH
37742: LD_VAR 0 12
37746: PPUSH
37747: CALL_OW 111
// break ;
37751: GO 37755
// end ; end ;
37753: GO 37640
37755: POP
37756: POP
// end ; end ;
37757: GO 37082
37759: POP
37760: POP
// end ;
37761: LD_VAR 0 8
37765: RET
// export function BuildingTechInvented ( side , btype ) ; begin
37766: LD_INT 0
37768: PPUSH
// result := true ;
37769: LD_ADDR_VAR 0 3
37773: PUSH
37774: LD_INT 1
37776: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
37777: LD_VAR 0 2
37781: PUSH
37782: LD_INT 24
37784: DOUBLE
37785: EQUAL
37786: IFTRUE 37796
37788: LD_INT 33
37790: DOUBLE
37791: EQUAL
37792: IFTRUE 37796
37794: GO 37821
37796: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
37797: LD_ADDR_VAR 0 3
37801: PUSH
37802: LD_INT 32
37804: PPUSH
37805: LD_VAR 0 1
37809: PPUSH
37810: CALL_OW 321
37814: PUSH
37815: LD_INT 2
37817: EQUAL
37818: ST_TO_ADDR
37819: GO 38141
37821: LD_INT 20
37823: DOUBLE
37824: EQUAL
37825: IFTRUE 37829
37827: GO 37854
37829: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
37830: LD_ADDR_VAR 0 3
37834: PUSH
37835: LD_INT 6
37837: PPUSH
37838: LD_VAR 0 1
37842: PPUSH
37843: CALL_OW 321
37847: PUSH
37848: LD_INT 2
37850: EQUAL
37851: ST_TO_ADDR
37852: GO 38141
37854: LD_INT 22
37856: DOUBLE
37857: EQUAL
37858: IFTRUE 37868
37860: LD_INT 36
37862: DOUBLE
37863: EQUAL
37864: IFTRUE 37868
37866: GO 37893
37868: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
37869: LD_ADDR_VAR 0 3
37873: PUSH
37874: LD_INT 15
37876: PPUSH
37877: LD_VAR 0 1
37881: PPUSH
37882: CALL_OW 321
37886: PUSH
37887: LD_INT 2
37889: EQUAL
37890: ST_TO_ADDR
37891: GO 38141
37893: LD_INT 30
37895: DOUBLE
37896: EQUAL
37897: IFTRUE 37901
37899: GO 37926
37901: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
37902: LD_ADDR_VAR 0 3
37906: PUSH
37907: LD_INT 20
37909: PPUSH
37910: LD_VAR 0 1
37914: PPUSH
37915: CALL_OW 321
37919: PUSH
37920: LD_INT 2
37922: EQUAL
37923: ST_TO_ADDR
37924: GO 38141
37926: LD_INT 28
37928: DOUBLE
37929: EQUAL
37930: IFTRUE 37940
37932: LD_INT 21
37934: DOUBLE
37935: EQUAL
37936: IFTRUE 37940
37938: GO 37965
37940: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
37941: LD_ADDR_VAR 0 3
37945: PUSH
37946: LD_INT 21
37948: PPUSH
37949: LD_VAR 0 1
37953: PPUSH
37954: CALL_OW 321
37958: PUSH
37959: LD_INT 2
37961: EQUAL
37962: ST_TO_ADDR
37963: GO 38141
37965: LD_INT 16
37967: DOUBLE
37968: EQUAL
37969: IFTRUE 37973
37971: GO 38000
37973: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
37974: LD_ADDR_VAR 0 3
37978: PUSH
37979: LD_EXP 106
37983: PPUSH
37984: LD_VAR 0 1
37988: PPUSH
37989: CALL_OW 321
37993: PUSH
37994: LD_INT 2
37996: EQUAL
37997: ST_TO_ADDR
37998: GO 38141
38000: LD_INT 19
38002: DOUBLE
38003: EQUAL
38004: IFTRUE 38014
38006: LD_INT 23
38008: DOUBLE
38009: EQUAL
38010: IFTRUE 38014
38012: GO 38041
38014: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
38015: LD_ADDR_VAR 0 3
38019: PUSH
38020: LD_EXP 105
38024: PPUSH
38025: LD_VAR 0 1
38029: PPUSH
38030: CALL_OW 321
38034: PUSH
38035: LD_INT 2
38037: EQUAL
38038: ST_TO_ADDR
38039: GO 38141
38041: LD_INT 17
38043: DOUBLE
38044: EQUAL
38045: IFTRUE 38049
38047: GO 38074
38049: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
38050: LD_ADDR_VAR 0 3
38054: PUSH
38055: LD_INT 39
38057: PPUSH
38058: LD_VAR 0 1
38062: PPUSH
38063: CALL_OW 321
38067: PUSH
38068: LD_INT 2
38070: EQUAL
38071: ST_TO_ADDR
38072: GO 38141
38074: LD_INT 18
38076: DOUBLE
38077: EQUAL
38078: IFTRUE 38082
38080: GO 38107
38082: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
38083: LD_ADDR_VAR 0 3
38087: PUSH
38088: LD_INT 40
38090: PPUSH
38091: LD_VAR 0 1
38095: PPUSH
38096: CALL_OW 321
38100: PUSH
38101: LD_INT 2
38103: EQUAL
38104: ST_TO_ADDR
38105: GO 38141
38107: LD_INT 27
38109: DOUBLE
38110: EQUAL
38111: IFTRUE 38115
38113: GO 38140
38115: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
38116: LD_ADDR_VAR 0 3
38120: PUSH
38121: LD_INT 35
38123: PPUSH
38124: LD_VAR 0 1
38128: PPUSH
38129: CALL_OW 321
38133: PUSH
38134: LD_INT 2
38136: EQUAL
38137: ST_TO_ADDR
38138: GO 38141
38140: POP
// end ;
38141: LD_VAR 0 3
38145: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
38146: LD_INT 0
38148: PPUSH
38149: PPUSH
38150: PPUSH
38151: PPUSH
38152: PPUSH
38153: PPUSH
38154: PPUSH
38155: PPUSH
38156: PPUSH
38157: PPUSH
38158: PPUSH
// result := false ;
38159: LD_ADDR_VAR 0 6
38163: PUSH
38164: LD_INT 0
38166: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
38167: LD_VAR 0 1
38171: NOT
38172: PUSH
38173: LD_VAR 0 1
38177: PPUSH
38178: CALL_OW 266
38182: PUSH
38183: LD_INT 0
38185: PUSH
38186: LD_INT 1
38188: PUSH
38189: EMPTY
38190: LIST
38191: LIST
38192: IN
38193: NOT
38194: OR
38195: PUSH
38196: LD_VAR 0 2
38200: NOT
38201: OR
38202: PUSH
38203: LD_VAR 0 5
38207: PUSH
38208: LD_INT 0
38210: PUSH
38211: LD_INT 1
38213: PUSH
38214: LD_INT 2
38216: PUSH
38217: LD_INT 3
38219: PUSH
38220: LD_INT 4
38222: PUSH
38223: LD_INT 5
38225: PUSH
38226: EMPTY
38227: LIST
38228: LIST
38229: LIST
38230: LIST
38231: LIST
38232: LIST
38233: IN
38234: NOT
38235: OR
38236: PUSH
38237: LD_VAR 0 3
38241: PPUSH
38242: LD_VAR 0 4
38246: PPUSH
38247: CALL_OW 488
38251: NOT
38252: OR
38253: IFFALSE 38257
// exit ;
38255: GO 38993
// side := GetSide ( depot ) ;
38257: LD_ADDR_VAR 0 9
38261: PUSH
38262: LD_VAR 0 1
38266: PPUSH
38267: CALL_OW 255
38271: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
38272: LD_VAR 0 9
38276: PPUSH
38277: LD_VAR 0 2
38281: PPUSH
38282: CALL 37766 0 2
38286: NOT
38287: IFFALSE 38291
// exit ;
38289: GO 38993
// pom := GetBase ( depot ) ;
38291: LD_ADDR_VAR 0 10
38295: PUSH
38296: LD_VAR 0 1
38300: PPUSH
38301: CALL_OW 274
38305: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
38306: LD_ADDR_VAR 0 11
38310: PUSH
38311: LD_VAR 0 2
38315: PPUSH
38316: LD_VAR 0 1
38320: PPUSH
38321: CALL_OW 248
38325: PPUSH
38326: CALL_OW 450
38330: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
38331: LD_VAR 0 10
38335: PPUSH
38336: LD_INT 1
38338: PPUSH
38339: CALL_OW 275
38343: PUSH
38344: LD_VAR 0 11
38348: PUSH
38349: LD_INT 1
38351: ARRAY
38352: GREATEREQUAL
38353: PUSH
38354: LD_VAR 0 10
38358: PPUSH
38359: LD_INT 2
38361: PPUSH
38362: CALL_OW 275
38366: PUSH
38367: LD_VAR 0 11
38371: PUSH
38372: LD_INT 2
38374: ARRAY
38375: GREATEREQUAL
38376: AND
38377: PUSH
38378: LD_VAR 0 10
38382: PPUSH
38383: LD_INT 3
38385: PPUSH
38386: CALL_OW 275
38390: PUSH
38391: LD_VAR 0 11
38395: PUSH
38396: LD_INT 3
38398: ARRAY
38399: GREATEREQUAL
38400: AND
38401: NOT
38402: IFFALSE 38406
// exit ;
38404: GO 38993
// if GetBType ( depot ) = b_depot then
38406: LD_VAR 0 1
38410: PPUSH
38411: CALL_OW 266
38415: PUSH
38416: LD_INT 0
38418: EQUAL
38419: IFFALSE 38431
// dist := 28 else
38421: LD_ADDR_VAR 0 14
38425: PUSH
38426: LD_INT 28
38428: ST_TO_ADDR
38429: GO 38439
// dist := 36 ;
38431: LD_ADDR_VAR 0 14
38435: PUSH
38436: LD_INT 36
38438: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
38439: LD_VAR 0 1
38443: PPUSH
38444: LD_VAR 0 3
38448: PPUSH
38449: LD_VAR 0 4
38453: PPUSH
38454: CALL_OW 297
38458: PUSH
38459: LD_VAR 0 14
38463: GREATER
38464: IFFALSE 38468
// exit ;
38466: GO 38993
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
38468: LD_ADDR_VAR 0 12
38472: PUSH
38473: LD_VAR 0 2
38477: PPUSH
38478: LD_VAR 0 3
38482: PPUSH
38483: LD_VAR 0 4
38487: PPUSH
38488: LD_VAR 0 5
38492: PPUSH
38493: LD_VAR 0 1
38497: PPUSH
38498: CALL_OW 248
38502: PPUSH
38503: LD_INT 0
38505: PPUSH
38506: CALL 38998 0 6
38510: ST_TO_ADDR
// if not hexes then
38511: LD_VAR 0 12
38515: NOT
38516: IFFALSE 38520
// exit ;
38518: GO 38993
// hex := GetHexInfo ( x , y ) ;
38520: LD_ADDR_VAR 0 15
38524: PUSH
38525: LD_VAR 0 3
38529: PPUSH
38530: LD_VAR 0 4
38534: PPUSH
38535: CALL_OW 546
38539: ST_TO_ADDR
// if hex [ 1 ] then
38540: LD_VAR 0 15
38544: PUSH
38545: LD_INT 1
38547: ARRAY
38548: IFFALSE 38552
// exit ;
38550: GO 38993
// height := hex [ 2 ] ;
38552: LD_ADDR_VAR 0 13
38556: PUSH
38557: LD_VAR 0 15
38561: PUSH
38562: LD_INT 2
38564: ARRAY
38565: ST_TO_ADDR
// for i = 1 to hexes do
38566: LD_ADDR_VAR 0 7
38570: PUSH
38571: DOUBLE
38572: LD_INT 1
38574: DEC
38575: ST_TO_ADDR
38576: LD_VAR 0 12
38580: PUSH
38581: FOR_TO
38582: IFFALSE 38912
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
38584: LD_VAR 0 12
38588: PUSH
38589: LD_VAR 0 7
38593: ARRAY
38594: PUSH
38595: LD_INT 1
38597: ARRAY
38598: PPUSH
38599: LD_VAR 0 12
38603: PUSH
38604: LD_VAR 0 7
38608: ARRAY
38609: PUSH
38610: LD_INT 2
38612: ARRAY
38613: PPUSH
38614: CALL_OW 488
38618: NOT
38619: PUSH
38620: LD_VAR 0 12
38624: PUSH
38625: LD_VAR 0 7
38629: ARRAY
38630: PUSH
38631: LD_INT 1
38633: ARRAY
38634: PPUSH
38635: LD_VAR 0 12
38639: PUSH
38640: LD_VAR 0 7
38644: ARRAY
38645: PUSH
38646: LD_INT 2
38648: ARRAY
38649: PPUSH
38650: CALL_OW 428
38654: PUSH
38655: LD_INT 0
38657: GREATER
38658: OR
38659: PUSH
38660: LD_VAR 0 12
38664: PUSH
38665: LD_VAR 0 7
38669: ARRAY
38670: PUSH
38671: LD_INT 1
38673: ARRAY
38674: PPUSH
38675: LD_VAR 0 12
38679: PUSH
38680: LD_VAR 0 7
38684: ARRAY
38685: PUSH
38686: LD_INT 2
38688: ARRAY
38689: PPUSH
38690: CALL_OW 351
38694: OR
38695: IFFALSE 38701
// exit ;
38697: POP
38698: POP
38699: GO 38993
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38701: LD_ADDR_VAR 0 8
38705: PUSH
38706: LD_VAR 0 12
38710: PUSH
38711: LD_VAR 0 7
38715: ARRAY
38716: PUSH
38717: LD_INT 1
38719: ARRAY
38720: PPUSH
38721: LD_VAR 0 12
38725: PUSH
38726: LD_VAR 0 7
38730: ARRAY
38731: PUSH
38732: LD_INT 2
38734: ARRAY
38735: PPUSH
38736: CALL_OW 546
38740: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
38741: LD_VAR 0 8
38745: PUSH
38746: LD_INT 1
38748: ARRAY
38749: PUSH
38750: LD_VAR 0 8
38754: PUSH
38755: LD_INT 2
38757: ARRAY
38758: PUSH
38759: LD_VAR 0 13
38763: PUSH
38764: LD_INT 2
38766: PLUS
38767: GREATER
38768: OR
38769: PUSH
38770: LD_VAR 0 8
38774: PUSH
38775: LD_INT 2
38777: ARRAY
38778: PUSH
38779: LD_VAR 0 13
38783: PUSH
38784: LD_INT 2
38786: MINUS
38787: LESS
38788: OR
38789: PUSH
38790: LD_VAR 0 8
38794: PUSH
38795: LD_INT 3
38797: ARRAY
38798: PUSH
38799: LD_INT 0
38801: PUSH
38802: LD_INT 8
38804: PUSH
38805: LD_INT 9
38807: PUSH
38808: LD_INT 10
38810: PUSH
38811: LD_INT 11
38813: PUSH
38814: LD_INT 12
38816: PUSH
38817: LD_INT 13
38819: PUSH
38820: LD_INT 16
38822: PUSH
38823: LD_INT 17
38825: PUSH
38826: LD_INT 18
38828: PUSH
38829: LD_INT 19
38831: PUSH
38832: LD_INT 20
38834: PUSH
38835: LD_INT 21
38837: PUSH
38838: EMPTY
38839: LIST
38840: LIST
38841: LIST
38842: LIST
38843: LIST
38844: LIST
38845: LIST
38846: LIST
38847: LIST
38848: LIST
38849: LIST
38850: LIST
38851: LIST
38852: IN
38853: NOT
38854: OR
38855: PUSH
38856: LD_VAR 0 8
38860: PUSH
38861: LD_INT 5
38863: ARRAY
38864: NOT
38865: OR
38866: PUSH
38867: LD_VAR 0 8
38871: PUSH
38872: LD_INT 6
38874: ARRAY
38875: PUSH
38876: LD_INT 1
38878: PUSH
38879: LD_INT 2
38881: PUSH
38882: LD_INT 7
38884: PUSH
38885: LD_INT 9
38887: PUSH
38888: LD_INT 10
38890: PUSH
38891: LD_INT 11
38893: PUSH
38894: EMPTY
38895: LIST
38896: LIST
38897: LIST
38898: LIST
38899: LIST
38900: LIST
38901: IN
38902: NOT
38903: OR
38904: IFFALSE 38910
// exit ;
38906: POP
38907: POP
38908: GO 38993
// end ;
38910: GO 38581
38912: POP
38913: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
38914: LD_VAR 0 9
38918: PPUSH
38919: LD_VAR 0 3
38923: PPUSH
38924: LD_VAR 0 4
38928: PPUSH
38929: LD_INT 20
38931: PPUSH
38932: CALL 30939 0 4
38936: PUSH
38937: LD_INT 4
38939: ARRAY
38940: IFFALSE 38944
// exit ;
38942: GO 38993
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
38944: LD_VAR 0 2
38948: PUSH
38949: LD_INT 29
38951: PUSH
38952: LD_INT 30
38954: PUSH
38955: EMPTY
38956: LIST
38957: LIST
38958: IN
38959: PUSH
38960: LD_VAR 0 3
38964: PPUSH
38965: LD_VAR 0 4
38969: PPUSH
38970: LD_VAR 0 9
38974: PPUSH
38975: CALL_OW 440
38979: NOT
38980: AND
38981: IFFALSE 38985
// exit ;
38983: GO 38993
// result := true ;
38985: LD_ADDR_VAR 0 6
38989: PUSH
38990: LD_INT 1
38992: ST_TO_ADDR
// end ;
38993: LD_VAR 0 6
38997: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
38998: LD_INT 0
39000: PPUSH
39001: PPUSH
39002: PPUSH
39003: PPUSH
39004: PPUSH
39005: PPUSH
39006: PPUSH
39007: PPUSH
39008: PPUSH
39009: PPUSH
39010: PPUSH
39011: PPUSH
39012: PPUSH
39013: PPUSH
39014: PPUSH
39015: PPUSH
39016: PPUSH
39017: PPUSH
39018: PPUSH
39019: PPUSH
39020: PPUSH
39021: PPUSH
39022: PPUSH
39023: PPUSH
39024: PPUSH
39025: PPUSH
39026: PPUSH
39027: PPUSH
39028: PPUSH
39029: PPUSH
39030: PPUSH
39031: PPUSH
39032: PPUSH
39033: PPUSH
39034: PPUSH
39035: PPUSH
39036: PPUSH
39037: PPUSH
39038: PPUSH
39039: PPUSH
39040: PPUSH
39041: PPUSH
39042: PPUSH
39043: PPUSH
39044: PPUSH
39045: PPUSH
39046: PPUSH
39047: PPUSH
39048: PPUSH
39049: PPUSH
39050: PPUSH
39051: PPUSH
39052: PPUSH
39053: PPUSH
39054: PPUSH
39055: PPUSH
39056: PPUSH
39057: PPUSH
// result = [ ] ;
39058: LD_ADDR_VAR 0 7
39062: PUSH
39063: EMPTY
39064: ST_TO_ADDR
// temp_list = [ ] ;
39065: LD_ADDR_VAR 0 9
39069: PUSH
39070: EMPTY
39071: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
39072: LD_VAR 0 4
39076: PUSH
39077: LD_INT 0
39079: PUSH
39080: LD_INT 1
39082: PUSH
39083: LD_INT 2
39085: PUSH
39086: LD_INT 3
39088: PUSH
39089: LD_INT 4
39091: PUSH
39092: LD_INT 5
39094: PUSH
39095: EMPTY
39096: LIST
39097: LIST
39098: LIST
39099: LIST
39100: LIST
39101: LIST
39102: IN
39103: NOT
39104: PUSH
39105: LD_VAR 0 1
39109: PUSH
39110: LD_INT 0
39112: PUSH
39113: LD_INT 1
39115: PUSH
39116: EMPTY
39117: LIST
39118: LIST
39119: IN
39120: PUSH
39121: LD_VAR 0 5
39125: PUSH
39126: LD_INT 1
39128: PUSH
39129: LD_INT 2
39131: PUSH
39132: LD_INT 3
39134: PUSH
39135: EMPTY
39136: LIST
39137: LIST
39138: LIST
39139: IN
39140: NOT
39141: AND
39142: OR
39143: IFFALSE 39147
// exit ;
39145: GO 57538
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
39147: LD_VAR 0 1
39151: PUSH
39152: LD_INT 6
39154: PUSH
39155: LD_INT 7
39157: PUSH
39158: LD_INT 8
39160: PUSH
39161: LD_INT 13
39163: PUSH
39164: LD_INT 12
39166: PUSH
39167: LD_INT 15
39169: PUSH
39170: LD_INT 11
39172: PUSH
39173: LD_INT 14
39175: PUSH
39176: LD_INT 10
39178: PUSH
39179: EMPTY
39180: LIST
39181: LIST
39182: LIST
39183: LIST
39184: LIST
39185: LIST
39186: LIST
39187: LIST
39188: LIST
39189: IN
39190: IFFALSE 39200
// btype = b_lab ;
39192: LD_ADDR_VAR 0 1
39196: PUSH
39197: LD_INT 6
39199: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
39200: LD_VAR 0 6
39204: PUSH
39205: LD_INT 0
39207: PUSH
39208: LD_INT 1
39210: PUSH
39211: LD_INT 2
39213: PUSH
39214: EMPTY
39215: LIST
39216: LIST
39217: LIST
39218: IN
39219: NOT
39220: PUSH
39221: LD_VAR 0 1
39225: PUSH
39226: LD_INT 0
39228: PUSH
39229: LD_INT 1
39231: PUSH
39232: LD_INT 2
39234: PUSH
39235: LD_INT 3
39237: PUSH
39238: LD_INT 6
39240: PUSH
39241: LD_INT 36
39243: PUSH
39244: LD_INT 4
39246: PUSH
39247: LD_INT 5
39249: PUSH
39250: LD_INT 31
39252: PUSH
39253: LD_INT 32
39255: PUSH
39256: LD_INT 33
39258: PUSH
39259: EMPTY
39260: LIST
39261: LIST
39262: LIST
39263: LIST
39264: LIST
39265: LIST
39266: LIST
39267: LIST
39268: LIST
39269: LIST
39270: LIST
39271: IN
39272: NOT
39273: PUSH
39274: LD_VAR 0 6
39278: PUSH
39279: LD_INT 1
39281: EQUAL
39282: AND
39283: OR
39284: PUSH
39285: LD_VAR 0 1
39289: PUSH
39290: LD_INT 2
39292: PUSH
39293: LD_INT 3
39295: PUSH
39296: EMPTY
39297: LIST
39298: LIST
39299: IN
39300: NOT
39301: PUSH
39302: LD_VAR 0 6
39306: PUSH
39307: LD_INT 2
39309: EQUAL
39310: AND
39311: OR
39312: IFFALSE 39322
// mode = 0 ;
39314: LD_ADDR_VAR 0 6
39318: PUSH
39319: LD_INT 0
39321: ST_TO_ADDR
// case mode of 0 :
39322: LD_VAR 0 6
39326: PUSH
39327: LD_INT 0
39329: DOUBLE
39330: EQUAL
39331: IFTRUE 39335
39333: GO 50788
39335: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39336: LD_ADDR_VAR 0 11
39340: PUSH
39341: LD_INT 0
39343: PUSH
39344: LD_INT 0
39346: PUSH
39347: EMPTY
39348: LIST
39349: LIST
39350: PUSH
39351: LD_INT 0
39353: PUSH
39354: LD_INT 1
39356: NEG
39357: PUSH
39358: EMPTY
39359: LIST
39360: LIST
39361: PUSH
39362: LD_INT 1
39364: PUSH
39365: LD_INT 0
39367: PUSH
39368: EMPTY
39369: LIST
39370: LIST
39371: PUSH
39372: LD_INT 1
39374: PUSH
39375: LD_INT 1
39377: PUSH
39378: EMPTY
39379: LIST
39380: LIST
39381: PUSH
39382: LD_INT 0
39384: PUSH
39385: LD_INT 1
39387: PUSH
39388: EMPTY
39389: LIST
39390: LIST
39391: PUSH
39392: LD_INT 1
39394: NEG
39395: PUSH
39396: LD_INT 0
39398: PUSH
39399: EMPTY
39400: LIST
39401: LIST
39402: PUSH
39403: LD_INT 1
39405: NEG
39406: PUSH
39407: LD_INT 1
39409: NEG
39410: PUSH
39411: EMPTY
39412: LIST
39413: LIST
39414: PUSH
39415: LD_INT 1
39417: NEG
39418: PUSH
39419: LD_INT 2
39421: NEG
39422: PUSH
39423: EMPTY
39424: LIST
39425: LIST
39426: PUSH
39427: LD_INT 0
39429: PUSH
39430: LD_INT 2
39432: NEG
39433: PUSH
39434: EMPTY
39435: LIST
39436: LIST
39437: PUSH
39438: LD_INT 1
39440: PUSH
39441: LD_INT 1
39443: NEG
39444: PUSH
39445: EMPTY
39446: LIST
39447: LIST
39448: PUSH
39449: LD_INT 1
39451: PUSH
39452: LD_INT 2
39454: PUSH
39455: EMPTY
39456: LIST
39457: LIST
39458: PUSH
39459: LD_INT 0
39461: PUSH
39462: LD_INT 2
39464: PUSH
39465: EMPTY
39466: LIST
39467: LIST
39468: PUSH
39469: LD_INT 1
39471: NEG
39472: PUSH
39473: LD_INT 1
39475: PUSH
39476: EMPTY
39477: LIST
39478: LIST
39479: PUSH
39480: LD_INT 1
39482: PUSH
39483: LD_INT 3
39485: PUSH
39486: EMPTY
39487: LIST
39488: LIST
39489: PUSH
39490: LD_INT 0
39492: PUSH
39493: LD_INT 3
39495: PUSH
39496: EMPTY
39497: LIST
39498: LIST
39499: PUSH
39500: LD_INT 1
39502: NEG
39503: PUSH
39504: LD_INT 2
39506: PUSH
39507: EMPTY
39508: LIST
39509: LIST
39510: PUSH
39511: EMPTY
39512: LIST
39513: LIST
39514: LIST
39515: LIST
39516: LIST
39517: LIST
39518: LIST
39519: LIST
39520: LIST
39521: LIST
39522: LIST
39523: LIST
39524: LIST
39525: LIST
39526: LIST
39527: LIST
39528: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39529: LD_ADDR_VAR 0 12
39533: PUSH
39534: LD_INT 0
39536: PUSH
39537: LD_INT 0
39539: PUSH
39540: EMPTY
39541: LIST
39542: LIST
39543: PUSH
39544: LD_INT 0
39546: PUSH
39547: LD_INT 1
39549: NEG
39550: PUSH
39551: EMPTY
39552: LIST
39553: LIST
39554: PUSH
39555: LD_INT 1
39557: PUSH
39558: LD_INT 0
39560: PUSH
39561: EMPTY
39562: LIST
39563: LIST
39564: PUSH
39565: LD_INT 1
39567: PUSH
39568: LD_INT 1
39570: PUSH
39571: EMPTY
39572: LIST
39573: LIST
39574: PUSH
39575: LD_INT 0
39577: PUSH
39578: LD_INT 1
39580: PUSH
39581: EMPTY
39582: LIST
39583: LIST
39584: PUSH
39585: LD_INT 1
39587: NEG
39588: PUSH
39589: LD_INT 0
39591: PUSH
39592: EMPTY
39593: LIST
39594: LIST
39595: PUSH
39596: LD_INT 1
39598: NEG
39599: PUSH
39600: LD_INT 1
39602: NEG
39603: PUSH
39604: EMPTY
39605: LIST
39606: LIST
39607: PUSH
39608: LD_INT 1
39610: PUSH
39611: LD_INT 1
39613: NEG
39614: PUSH
39615: EMPTY
39616: LIST
39617: LIST
39618: PUSH
39619: LD_INT 2
39621: PUSH
39622: LD_INT 0
39624: PUSH
39625: EMPTY
39626: LIST
39627: LIST
39628: PUSH
39629: LD_INT 2
39631: PUSH
39632: LD_INT 1
39634: PUSH
39635: EMPTY
39636: LIST
39637: LIST
39638: PUSH
39639: LD_INT 1
39641: NEG
39642: PUSH
39643: LD_INT 1
39645: PUSH
39646: EMPTY
39647: LIST
39648: LIST
39649: PUSH
39650: LD_INT 2
39652: NEG
39653: PUSH
39654: LD_INT 0
39656: PUSH
39657: EMPTY
39658: LIST
39659: LIST
39660: PUSH
39661: LD_INT 2
39663: NEG
39664: PUSH
39665: LD_INT 1
39667: NEG
39668: PUSH
39669: EMPTY
39670: LIST
39671: LIST
39672: PUSH
39673: LD_INT 2
39675: NEG
39676: PUSH
39677: LD_INT 1
39679: PUSH
39680: EMPTY
39681: LIST
39682: LIST
39683: PUSH
39684: LD_INT 3
39686: NEG
39687: PUSH
39688: LD_INT 0
39690: PUSH
39691: EMPTY
39692: LIST
39693: LIST
39694: PUSH
39695: LD_INT 3
39697: NEG
39698: PUSH
39699: LD_INT 1
39701: NEG
39702: PUSH
39703: EMPTY
39704: LIST
39705: LIST
39706: PUSH
39707: EMPTY
39708: LIST
39709: LIST
39710: LIST
39711: LIST
39712: LIST
39713: LIST
39714: LIST
39715: LIST
39716: LIST
39717: LIST
39718: LIST
39719: LIST
39720: LIST
39721: LIST
39722: LIST
39723: LIST
39724: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39725: LD_ADDR_VAR 0 13
39729: PUSH
39730: LD_INT 0
39732: PUSH
39733: LD_INT 0
39735: PUSH
39736: EMPTY
39737: LIST
39738: LIST
39739: PUSH
39740: LD_INT 0
39742: PUSH
39743: LD_INT 1
39745: NEG
39746: PUSH
39747: EMPTY
39748: LIST
39749: LIST
39750: PUSH
39751: LD_INT 1
39753: PUSH
39754: LD_INT 0
39756: PUSH
39757: EMPTY
39758: LIST
39759: LIST
39760: PUSH
39761: LD_INT 1
39763: PUSH
39764: LD_INT 1
39766: PUSH
39767: EMPTY
39768: LIST
39769: LIST
39770: PUSH
39771: LD_INT 0
39773: PUSH
39774: LD_INT 1
39776: PUSH
39777: EMPTY
39778: LIST
39779: LIST
39780: PUSH
39781: LD_INT 1
39783: NEG
39784: PUSH
39785: LD_INT 0
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: PUSH
39792: LD_INT 1
39794: NEG
39795: PUSH
39796: LD_INT 1
39798: NEG
39799: PUSH
39800: EMPTY
39801: LIST
39802: LIST
39803: PUSH
39804: LD_INT 1
39806: NEG
39807: PUSH
39808: LD_INT 2
39810: NEG
39811: PUSH
39812: EMPTY
39813: LIST
39814: LIST
39815: PUSH
39816: LD_INT 2
39818: PUSH
39819: LD_INT 1
39821: PUSH
39822: EMPTY
39823: LIST
39824: LIST
39825: PUSH
39826: LD_INT 2
39828: PUSH
39829: LD_INT 2
39831: PUSH
39832: EMPTY
39833: LIST
39834: LIST
39835: PUSH
39836: LD_INT 1
39838: PUSH
39839: LD_INT 2
39841: PUSH
39842: EMPTY
39843: LIST
39844: LIST
39845: PUSH
39846: LD_INT 2
39848: NEG
39849: PUSH
39850: LD_INT 1
39852: NEG
39853: PUSH
39854: EMPTY
39855: LIST
39856: LIST
39857: PUSH
39858: LD_INT 2
39860: NEG
39861: PUSH
39862: LD_INT 2
39864: NEG
39865: PUSH
39866: EMPTY
39867: LIST
39868: LIST
39869: PUSH
39870: LD_INT 2
39872: NEG
39873: PUSH
39874: LD_INT 3
39876: NEG
39877: PUSH
39878: EMPTY
39879: LIST
39880: LIST
39881: PUSH
39882: LD_INT 3
39884: NEG
39885: PUSH
39886: LD_INT 2
39888: NEG
39889: PUSH
39890: EMPTY
39891: LIST
39892: LIST
39893: PUSH
39894: LD_INT 3
39896: NEG
39897: PUSH
39898: LD_INT 3
39900: NEG
39901: PUSH
39902: EMPTY
39903: LIST
39904: LIST
39905: PUSH
39906: EMPTY
39907: LIST
39908: LIST
39909: LIST
39910: LIST
39911: LIST
39912: LIST
39913: LIST
39914: LIST
39915: LIST
39916: LIST
39917: LIST
39918: LIST
39919: LIST
39920: LIST
39921: LIST
39922: LIST
39923: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39924: LD_ADDR_VAR 0 14
39928: PUSH
39929: LD_INT 0
39931: PUSH
39932: LD_INT 0
39934: PUSH
39935: EMPTY
39936: LIST
39937: LIST
39938: PUSH
39939: LD_INT 0
39941: PUSH
39942: LD_INT 1
39944: NEG
39945: PUSH
39946: EMPTY
39947: LIST
39948: LIST
39949: PUSH
39950: LD_INT 1
39952: PUSH
39953: LD_INT 0
39955: PUSH
39956: EMPTY
39957: LIST
39958: LIST
39959: PUSH
39960: LD_INT 1
39962: PUSH
39963: LD_INT 1
39965: PUSH
39966: EMPTY
39967: LIST
39968: LIST
39969: PUSH
39970: LD_INT 0
39972: PUSH
39973: LD_INT 1
39975: PUSH
39976: EMPTY
39977: LIST
39978: LIST
39979: PUSH
39980: LD_INT 1
39982: NEG
39983: PUSH
39984: LD_INT 0
39986: PUSH
39987: EMPTY
39988: LIST
39989: LIST
39990: PUSH
39991: LD_INT 1
39993: NEG
39994: PUSH
39995: LD_INT 1
39997: NEG
39998: PUSH
39999: EMPTY
40000: LIST
40001: LIST
40002: PUSH
40003: LD_INT 1
40005: NEG
40006: PUSH
40007: LD_INT 2
40009: NEG
40010: PUSH
40011: EMPTY
40012: LIST
40013: LIST
40014: PUSH
40015: LD_INT 0
40017: PUSH
40018: LD_INT 2
40020: NEG
40021: PUSH
40022: EMPTY
40023: LIST
40024: LIST
40025: PUSH
40026: LD_INT 1
40028: PUSH
40029: LD_INT 1
40031: NEG
40032: PUSH
40033: EMPTY
40034: LIST
40035: LIST
40036: PUSH
40037: LD_INT 1
40039: PUSH
40040: LD_INT 2
40042: PUSH
40043: EMPTY
40044: LIST
40045: LIST
40046: PUSH
40047: LD_INT 0
40049: PUSH
40050: LD_INT 2
40052: PUSH
40053: EMPTY
40054: LIST
40055: LIST
40056: PUSH
40057: LD_INT 1
40059: NEG
40060: PUSH
40061: LD_INT 1
40063: PUSH
40064: EMPTY
40065: LIST
40066: LIST
40067: PUSH
40068: LD_INT 1
40070: NEG
40071: PUSH
40072: LD_INT 3
40074: NEG
40075: PUSH
40076: EMPTY
40077: LIST
40078: LIST
40079: PUSH
40080: LD_INT 0
40082: PUSH
40083: LD_INT 3
40085: NEG
40086: PUSH
40087: EMPTY
40088: LIST
40089: LIST
40090: PUSH
40091: LD_INT 1
40093: PUSH
40094: LD_INT 2
40096: NEG
40097: PUSH
40098: EMPTY
40099: LIST
40100: LIST
40101: PUSH
40102: EMPTY
40103: LIST
40104: LIST
40105: LIST
40106: LIST
40107: LIST
40108: LIST
40109: LIST
40110: LIST
40111: LIST
40112: LIST
40113: LIST
40114: LIST
40115: LIST
40116: LIST
40117: LIST
40118: LIST
40119: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40120: LD_ADDR_VAR 0 15
40124: PUSH
40125: LD_INT 0
40127: PUSH
40128: LD_INT 0
40130: PUSH
40131: EMPTY
40132: LIST
40133: LIST
40134: PUSH
40135: LD_INT 0
40137: PUSH
40138: LD_INT 1
40140: NEG
40141: PUSH
40142: EMPTY
40143: LIST
40144: LIST
40145: PUSH
40146: LD_INT 1
40148: PUSH
40149: LD_INT 0
40151: PUSH
40152: EMPTY
40153: LIST
40154: LIST
40155: PUSH
40156: LD_INT 1
40158: PUSH
40159: LD_INT 1
40161: PUSH
40162: EMPTY
40163: LIST
40164: LIST
40165: PUSH
40166: LD_INT 0
40168: PUSH
40169: LD_INT 1
40171: PUSH
40172: EMPTY
40173: LIST
40174: LIST
40175: PUSH
40176: LD_INT 1
40178: NEG
40179: PUSH
40180: LD_INT 0
40182: PUSH
40183: EMPTY
40184: LIST
40185: LIST
40186: PUSH
40187: LD_INT 1
40189: NEG
40190: PUSH
40191: LD_INT 1
40193: NEG
40194: PUSH
40195: EMPTY
40196: LIST
40197: LIST
40198: PUSH
40199: LD_INT 1
40201: PUSH
40202: LD_INT 1
40204: NEG
40205: PUSH
40206: EMPTY
40207: LIST
40208: LIST
40209: PUSH
40210: LD_INT 2
40212: PUSH
40213: LD_INT 0
40215: PUSH
40216: EMPTY
40217: LIST
40218: LIST
40219: PUSH
40220: LD_INT 2
40222: PUSH
40223: LD_INT 1
40225: PUSH
40226: EMPTY
40227: LIST
40228: LIST
40229: PUSH
40230: LD_INT 1
40232: NEG
40233: PUSH
40234: LD_INT 1
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: PUSH
40241: LD_INT 2
40243: NEG
40244: PUSH
40245: LD_INT 0
40247: PUSH
40248: EMPTY
40249: LIST
40250: LIST
40251: PUSH
40252: LD_INT 2
40254: NEG
40255: PUSH
40256: LD_INT 1
40258: NEG
40259: PUSH
40260: EMPTY
40261: LIST
40262: LIST
40263: PUSH
40264: LD_INT 2
40266: PUSH
40267: LD_INT 1
40269: NEG
40270: PUSH
40271: EMPTY
40272: LIST
40273: LIST
40274: PUSH
40275: LD_INT 3
40277: PUSH
40278: LD_INT 0
40280: PUSH
40281: EMPTY
40282: LIST
40283: LIST
40284: PUSH
40285: LD_INT 3
40287: PUSH
40288: LD_INT 1
40290: PUSH
40291: EMPTY
40292: LIST
40293: LIST
40294: PUSH
40295: EMPTY
40296: LIST
40297: LIST
40298: LIST
40299: LIST
40300: LIST
40301: LIST
40302: LIST
40303: LIST
40304: LIST
40305: LIST
40306: LIST
40307: LIST
40308: LIST
40309: LIST
40310: LIST
40311: LIST
40312: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40313: LD_ADDR_VAR 0 16
40317: PUSH
40318: LD_INT 0
40320: PUSH
40321: LD_INT 0
40323: PUSH
40324: EMPTY
40325: LIST
40326: LIST
40327: PUSH
40328: LD_INT 0
40330: PUSH
40331: LD_INT 1
40333: NEG
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: PUSH
40339: LD_INT 1
40341: PUSH
40342: LD_INT 0
40344: PUSH
40345: EMPTY
40346: LIST
40347: LIST
40348: PUSH
40349: LD_INT 1
40351: PUSH
40352: LD_INT 1
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: PUSH
40359: LD_INT 0
40361: PUSH
40362: LD_INT 1
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: PUSH
40369: LD_INT 1
40371: NEG
40372: PUSH
40373: LD_INT 0
40375: PUSH
40376: EMPTY
40377: LIST
40378: LIST
40379: PUSH
40380: LD_INT 1
40382: NEG
40383: PUSH
40384: LD_INT 1
40386: NEG
40387: PUSH
40388: EMPTY
40389: LIST
40390: LIST
40391: PUSH
40392: LD_INT 1
40394: NEG
40395: PUSH
40396: LD_INT 2
40398: NEG
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: PUSH
40404: LD_INT 2
40406: PUSH
40407: LD_INT 1
40409: PUSH
40410: EMPTY
40411: LIST
40412: LIST
40413: PUSH
40414: LD_INT 2
40416: PUSH
40417: LD_INT 2
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: PUSH
40424: LD_INT 1
40426: PUSH
40427: LD_INT 2
40429: PUSH
40430: EMPTY
40431: LIST
40432: LIST
40433: PUSH
40434: LD_INT 2
40436: NEG
40437: PUSH
40438: LD_INT 1
40440: NEG
40441: PUSH
40442: EMPTY
40443: LIST
40444: LIST
40445: PUSH
40446: LD_INT 2
40448: NEG
40449: PUSH
40450: LD_INT 2
40452: NEG
40453: PUSH
40454: EMPTY
40455: LIST
40456: LIST
40457: PUSH
40458: LD_INT 3
40460: PUSH
40461: LD_INT 2
40463: PUSH
40464: EMPTY
40465: LIST
40466: LIST
40467: PUSH
40468: LD_INT 3
40470: PUSH
40471: LD_INT 3
40473: PUSH
40474: EMPTY
40475: LIST
40476: LIST
40477: PUSH
40478: LD_INT 2
40480: PUSH
40481: LD_INT 3
40483: PUSH
40484: EMPTY
40485: LIST
40486: LIST
40487: PUSH
40488: EMPTY
40489: LIST
40490: LIST
40491: LIST
40492: LIST
40493: LIST
40494: LIST
40495: LIST
40496: LIST
40497: LIST
40498: LIST
40499: LIST
40500: LIST
40501: LIST
40502: LIST
40503: LIST
40504: LIST
40505: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40506: LD_ADDR_VAR 0 17
40510: PUSH
40511: LD_INT 0
40513: PUSH
40514: LD_INT 0
40516: PUSH
40517: EMPTY
40518: LIST
40519: LIST
40520: PUSH
40521: LD_INT 0
40523: PUSH
40524: LD_INT 1
40526: NEG
40527: PUSH
40528: EMPTY
40529: LIST
40530: LIST
40531: PUSH
40532: LD_INT 1
40534: PUSH
40535: LD_INT 0
40537: PUSH
40538: EMPTY
40539: LIST
40540: LIST
40541: PUSH
40542: LD_INT 1
40544: PUSH
40545: LD_INT 1
40547: PUSH
40548: EMPTY
40549: LIST
40550: LIST
40551: PUSH
40552: LD_INT 0
40554: PUSH
40555: LD_INT 1
40557: PUSH
40558: EMPTY
40559: LIST
40560: LIST
40561: PUSH
40562: LD_INT 1
40564: NEG
40565: PUSH
40566: LD_INT 0
40568: PUSH
40569: EMPTY
40570: LIST
40571: LIST
40572: PUSH
40573: LD_INT 1
40575: NEG
40576: PUSH
40577: LD_INT 1
40579: NEG
40580: PUSH
40581: EMPTY
40582: LIST
40583: LIST
40584: PUSH
40585: LD_INT 1
40587: NEG
40588: PUSH
40589: LD_INT 2
40591: NEG
40592: PUSH
40593: EMPTY
40594: LIST
40595: LIST
40596: PUSH
40597: LD_INT 0
40599: PUSH
40600: LD_INT 2
40602: NEG
40603: PUSH
40604: EMPTY
40605: LIST
40606: LIST
40607: PUSH
40608: LD_INT 1
40610: PUSH
40611: LD_INT 1
40613: NEG
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: PUSH
40619: LD_INT 2
40621: PUSH
40622: LD_INT 0
40624: PUSH
40625: EMPTY
40626: LIST
40627: LIST
40628: PUSH
40629: LD_INT 2
40631: PUSH
40632: LD_INT 1
40634: PUSH
40635: EMPTY
40636: LIST
40637: LIST
40638: PUSH
40639: LD_INT 2
40641: PUSH
40642: LD_INT 2
40644: PUSH
40645: EMPTY
40646: LIST
40647: LIST
40648: PUSH
40649: LD_INT 1
40651: PUSH
40652: LD_INT 2
40654: PUSH
40655: EMPTY
40656: LIST
40657: LIST
40658: PUSH
40659: LD_INT 0
40661: PUSH
40662: LD_INT 2
40664: PUSH
40665: EMPTY
40666: LIST
40667: LIST
40668: PUSH
40669: LD_INT 1
40671: NEG
40672: PUSH
40673: LD_INT 1
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: PUSH
40680: LD_INT 2
40682: NEG
40683: PUSH
40684: LD_INT 0
40686: PUSH
40687: EMPTY
40688: LIST
40689: LIST
40690: PUSH
40691: LD_INT 2
40693: NEG
40694: PUSH
40695: LD_INT 1
40697: NEG
40698: PUSH
40699: EMPTY
40700: LIST
40701: LIST
40702: PUSH
40703: LD_INT 2
40705: NEG
40706: PUSH
40707: LD_INT 2
40709: NEG
40710: PUSH
40711: EMPTY
40712: LIST
40713: LIST
40714: PUSH
40715: EMPTY
40716: LIST
40717: LIST
40718: LIST
40719: LIST
40720: LIST
40721: LIST
40722: LIST
40723: LIST
40724: LIST
40725: LIST
40726: LIST
40727: LIST
40728: LIST
40729: LIST
40730: LIST
40731: LIST
40732: LIST
40733: LIST
40734: LIST
40735: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40736: LD_ADDR_VAR 0 18
40740: PUSH
40741: LD_INT 0
40743: PUSH
40744: LD_INT 0
40746: PUSH
40747: EMPTY
40748: LIST
40749: LIST
40750: PUSH
40751: LD_INT 0
40753: PUSH
40754: LD_INT 1
40756: NEG
40757: PUSH
40758: EMPTY
40759: LIST
40760: LIST
40761: PUSH
40762: LD_INT 1
40764: PUSH
40765: LD_INT 0
40767: PUSH
40768: EMPTY
40769: LIST
40770: LIST
40771: PUSH
40772: LD_INT 1
40774: PUSH
40775: LD_INT 1
40777: PUSH
40778: EMPTY
40779: LIST
40780: LIST
40781: PUSH
40782: LD_INT 0
40784: PUSH
40785: LD_INT 1
40787: PUSH
40788: EMPTY
40789: LIST
40790: LIST
40791: PUSH
40792: LD_INT 1
40794: NEG
40795: PUSH
40796: LD_INT 0
40798: PUSH
40799: EMPTY
40800: LIST
40801: LIST
40802: PUSH
40803: LD_INT 1
40805: NEG
40806: PUSH
40807: LD_INT 1
40809: NEG
40810: PUSH
40811: EMPTY
40812: LIST
40813: LIST
40814: PUSH
40815: LD_INT 1
40817: NEG
40818: PUSH
40819: LD_INT 2
40821: NEG
40822: PUSH
40823: EMPTY
40824: LIST
40825: LIST
40826: PUSH
40827: LD_INT 0
40829: PUSH
40830: LD_INT 2
40832: NEG
40833: PUSH
40834: EMPTY
40835: LIST
40836: LIST
40837: PUSH
40838: LD_INT 1
40840: PUSH
40841: LD_INT 1
40843: NEG
40844: PUSH
40845: EMPTY
40846: LIST
40847: LIST
40848: PUSH
40849: LD_INT 2
40851: PUSH
40852: LD_INT 0
40854: PUSH
40855: EMPTY
40856: LIST
40857: LIST
40858: PUSH
40859: LD_INT 2
40861: PUSH
40862: LD_INT 1
40864: PUSH
40865: EMPTY
40866: LIST
40867: LIST
40868: PUSH
40869: LD_INT 2
40871: PUSH
40872: LD_INT 2
40874: PUSH
40875: EMPTY
40876: LIST
40877: LIST
40878: PUSH
40879: LD_INT 1
40881: PUSH
40882: LD_INT 2
40884: PUSH
40885: EMPTY
40886: LIST
40887: LIST
40888: PUSH
40889: LD_INT 0
40891: PUSH
40892: LD_INT 2
40894: PUSH
40895: EMPTY
40896: LIST
40897: LIST
40898: PUSH
40899: LD_INT 1
40901: NEG
40902: PUSH
40903: LD_INT 1
40905: PUSH
40906: EMPTY
40907: LIST
40908: LIST
40909: PUSH
40910: LD_INT 2
40912: NEG
40913: PUSH
40914: LD_INT 0
40916: PUSH
40917: EMPTY
40918: LIST
40919: LIST
40920: PUSH
40921: LD_INT 2
40923: NEG
40924: PUSH
40925: LD_INT 1
40927: NEG
40928: PUSH
40929: EMPTY
40930: LIST
40931: LIST
40932: PUSH
40933: LD_INT 2
40935: NEG
40936: PUSH
40937: LD_INT 2
40939: NEG
40940: PUSH
40941: EMPTY
40942: LIST
40943: LIST
40944: PUSH
40945: EMPTY
40946: LIST
40947: LIST
40948: LIST
40949: LIST
40950: LIST
40951: LIST
40952: LIST
40953: LIST
40954: LIST
40955: LIST
40956: LIST
40957: LIST
40958: LIST
40959: LIST
40960: LIST
40961: LIST
40962: LIST
40963: LIST
40964: LIST
40965: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40966: LD_ADDR_VAR 0 19
40970: PUSH
40971: LD_INT 0
40973: PUSH
40974: LD_INT 0
40976: PUSH
40977: EMPTY
40978: LIST
40979: LIST
40980: PUSH
40981: LD_INT 0
40983: PUSH
40984: LD_INT 1
40986: NEG
40987: PUSH
40988: EMPTY
40989: LIST
40990: LIST
40991: PUSH
40992: LD_INT 1
40994: PUSH
40995: LD_INT 0
40997: PUSH
40998: EMPTY
40999: LIST
41000: LIST
41001: PUSH
41002: LD_INT 1
41004: PUSH
41005: LD_INT 1
41007: PUSH
41008: EMPTY
41009: LIST
41010: LIST
41011: PUSH
41012: LD_INT 0
41014: PUSH
41015: LD_INT 1
41017: PUSH
41018: EMPTY
41019: LIST
41020: LIST
41021: PUSH
41022: LD_INT 1
41024: NEG
41025: PUSH
41026: LD_INT 0
41028: PUSH
41029: EMPTY
41030: LIST
41031: LIST
41032: PUSH
41033: LD_INT 1
41035: NEG
41036: PUSH
41037: LD_INT 1
41039: NEG
41040: PUSH
41041: EMPTY
41042: LIST
41043: LIST
41044: PUSH
41045: LD_INT 1
41047: NEG
41048: PUSH
41049: LD_INT 2
41051: NEG
41052: PUSH
41053: EMPTY
41054: LIST
41055: LIST
41056: PUSH
41057: LD_INT 0
41059: PUSH
41060: LD_INT 2
41062: NEG
41063: PUSH
41064: EMPTY
41065: LIST
41066: LIST
41067: PUSH
41068: LD_INT 1
41070: PUSH
41071: LD_INT 1
41073: NEG
41074: PUSH
41075: EMPTY
41076: LIST
41077: LIST
41078: PUSH
41079: LD_INT 2
41081: PUSH
41082: LD_INT 0
41084: PUSH
41085: EMPTY
41086: LIST
41087: LIST
41088: PUSH
41089: LD_INT 2
41091: PUSH
41092: LD_INT 1
41094: PUSH
41095: EMPTY
41096: LIST
41097: LIST
41098: PUSH
41099: LD_INT 2
41101: PUSH
41102: LD_INT 2
41104: PUSH
41105: EMPTY
41106: LIST
41107: LIST
41108: PUSH
41109: LD_INT 1
41111: PUSH
41112: LD_INT 2
41114: PUSH
41115: EMPTY
41116: LIST
41117: LIST
41118: PUSH
41119: LD_INT 0
41121: PUSH
41122: LD_INT 2
41124: PUSH
41125: EMPTY
41126: LIST
41127: LIST
41128: PUSH
41129: LD_INT 1
41131: NEG
41132: PUSH
41133: LD_INT 1
41135: PUSH
41136: EMPTY
41137: LIST
41138: LIST
41139: PUSH
41140: LD_INT 2
41142: NEG
41143: PUSH
41144: LD_INT 0
41146: PUSH
41147: EMPTY
41148: LIST
41149: LIST
41150: PUSH
41151: LD_INT 2
41153: NEG
41154: PUSH
41155: LD_INT 1
41157: NEG
41158: PUSH
41159: EMPTY
41160: LIST
41161: LIST
41162: PUSH
41163: LD_INT 2
41165: NEG
41166: PUSH
41167: LD_INT 2
41169: NEG
41170: PUSH
41171: EMPTY
41172: LIST
41173: LIST
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: LIST
41179: LIST
41180: LIST
41181: LIST
41182: LIST
41183: LIST
41184: LIST
41185: LIST
41186: LIST
41187: LIST
41188: LIST
41189: LIST
41190: LIST
41191: LIST
41192: LIST
41193: LIST
41194: LIST
41195: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41196: LD_ADDR_VAR 0 20
41200: PUSH
41201: LD_INT 0
41203: PUSH
41204: LD_INT 0
41206: PUSH
41207: EMPTY
41208: LIST
41209: LIST
41210: PUSH
41211: LD_INT 0
41213: PUSH
41214: LD_INT 1
41216: NEG
41217: PUSH
41218: EMPTY
41219: LIST
41220: LIST
41221: PUSH
41222: LD_INT 1
41224: PUSH
41225: LD_INT 0
41227: PUSH
41228: EMPTY
41229: LIST
41230: LIST
41231: PUSH
41232: LD_INT 1
41234: PUSH
41235: LD_INT 1
41237: PUSH
41238: EMPTY
41239: LIST
41240: LIST
41241: PUSH
41242: LD_INT 0
41244: PUSH
41245: LD_INT 1
41247: PUSH
41248: EMPTY
41249: LIST
41250: LIST
41251: PUSH
41252: LD_INT 1
41254: NEG
41255: PUSH
41256: LD_INT 0
41258: PUSH
41259: EMPTY
41260: LIST
41261: LIST
41262: PUSH
41263: LD_INT 1
41265: NEG
41266: PUSH
41267: LD_INT 1
41269: NEG
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: PUSH
41275: LD_INT 1
41277: NEG
41278: PUSH
41279: LD_INT 2
41281: NEG
41282: PUSH
41283: EMPTY
41284: LIST
41285: LIST
41286: PUSH
41287: LD_INT 0
41289: PUSH
41290: LD_INT 2
41292: NEG
41293: PUSH
41294: EMPTY
41295: LIST
41296: LIST
41297: PUSH
41298: LD_INT 1
41300: PUSH
41301: LD_INT 1
41303: NEG
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: PUSH
41309: LD_INT 2
41311: PUSH
41312: LD_INT 0
41314: PUSH
41315: EMPTY
41316: LIST
41317: LIST
41318: PUSH
41319: LD_INT 2
41321: PUSH
41322: LD_INT 1
41324: PUSH
41325: EMPTY
41326: LIST
41327: LIST
41328: PUSH
41329: LD_INT 2
41331: PUSH
41332: LD_INT 2
41334: PUSH
41335: EMPTY
41336: LIST
41337: LIST
41338: PUSH
41339: LD_INT 1
41341: PUSH
41342: LD_INT 2
41344: PUSH
41345: EMPTY
41346: LIST
41347: LIST
41348: PUSH
41349: LD_INT 0
41351: PUSH
41352: LD_INT 2
41354: PUSH
41355: EMPTY
41356: LIST
41357: LIST
41358: PUSH
41359: LD_INT 1
41361: NEG
41362: PUSH
41363: LD_INT 1
41365: PUSH
41366: EMPTY
41367: LIST
41368: LIST
41369: PUSH
41370: LD_INT 2
41372: NEG
41373: PUSH
41374: LD_INT 0
41376: PUSH
41377: EMPTY
41378: LIST
41379: LIST
41380: PUSH
41381: LD_INT 2
41383: NEG
41384: PUSH
41385: LD_INT 1
41387: NEG
41388: PUSH
41389: EMPTY
41390: LIST
41391: LIST
41392: PUSH
41393: LD_INT 2
41395: NEG
41396: PUSH
41397: LD_INT 2
41399: NEG
41400: PUSH
41401: EMPTY
41402: LIST
41403: LIST
41404: PUSH
41405: EMPTY
41406: LIST
41407: LIST
41408: LIST
41409: LIST
41410: LIST
41411: LIST
41412: LIST
41413: LIST
41414: LIST
41415: LIST
41416: LIST
41417: LIST
41418: LIST
41419: LIST
41420: LIST
41421: LIST
41422: LIST
41423: LIST
41424: LIST
41425: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41426: LD_ADDR_VAR 0 21
41430: PUSH
41431: LD_INT 0
41433: PUSH
41434: LD_INT 0
41436: PUSH
41437: EMPTY
41438: LIST
41439: LIST
41440: PUSH
41441: LD_INT 0
41443: PUSH
41444: LD_INT 1
41446: NEG
41447: PUSH
41448: EMPTY
41449: LIST
41450: LIST
41451: PUSH
41452: LD_INT 1
41454: PUSH
41455: LD_INT 0
41457: PUSH
41458: EMPTY
41459: LIST
41460: LIST
41461: PUSH
41462: LD_INT 1
41464: PUSH
41465: LD_INT 1
41467: PUSH
41468: EMPTY
41469: LIST
41470: LIST
41471: PUSH
41472: LD_INT 0
41474: PUSH
41475: LD_INT 1
41477: PUSH
41478: EMPTY
41479: LIST
41480: LIST
41481: PUSH
41482: LD_INT 1
41484: NEG
41485: PUSH
41486: LD_INT 0
41488: PUSH
41489: EMPTY
41490: LIST
41491: LIST
41492: PUSH
41493: LD_INT 1
41495: NEG
41496: PUSH
41497: LD_INT 1
41499: NEG
41500: PUSH
41501: EMPTY
41502: LIST
41503: LIST
41504: PUSH
41505: LD_INT 1
41507: NEG
41508: PUSH
41509: LD_INT 2
41511: NEG
41512: PUSH
41513: EMPTY
41514: LIST
41515: LIST
41516: PUSH
41517: LD_INT 0
41519: PUSH
41520: LD_INT 2
41522: NEG
41523: PUSH
41524: EMPTY
41525: LIST
41526: LIST
41527: PUSH
41528: LD_INT 1
41530: PUSH
41531: LD_INT 1
41533: NEG
41534: PUSH
41535: EMPTY
41536: LIST
41537: LIST
41538: PUSH
41539: LD_INT 2
41541: PUSH
41542: LD_INT 0
41544: PUSH
41545: EMPTY
41546: LIST
41547: LIST
41548: PUSH
41549: LD_INT 2
41551: PUSH
41552: LD_INT 1
41554: PUSH
41555: EMPTY
41556: LIST
41557: LIST
41558: PUSH
41559: LD_INT 2
41561: PUSH
41562: LD_INT 2
41564: PUSH
41565: EMPTY
41566: LIST
41567: LIST
41568: PUSH
41569: LD_INT 1
41571: PUSH
41572: LD_INT 2
41574: PUSH
41575: EMPTY
41576: LIST
41577: LIST
41578: PUSH
41579: LD_INT 0
41581: PUSH
41582: LD_INT 2
41584: PUSH
41585: EMPTY
41586: LIST
41587: LIST
41588: PUSH
41589: LD_INT 1
41591: NEG
41592: PUSH
41593: LD_INT 1
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: PUSH
41600: LD_INT 2
41602: NEG
41603: PUSH
41604: LD_INT 0
41606: PUSH
41607: EMPTY
41608: LIST
41609: LIST
41610: PUSH
41611: LD_INT 2
41613: NEG
41614: PUSH
41615: LD_INT 1
41617: NEG
41618: PUSH
41619: EMPTY
41620: LIST
41621: LIST
41622: PUSH
41623: LD_INT 2
41625: NEG
41626: PUSH
41627: LD_INT 2
41629: NEG
41630: PUSH
41631: EMPTY
41632: LIST
41633: LIST
41634: PUSH
41635: EMPTY
41636: LIST
41637: LIST
41638: LIST
41639: LIST
41640: LIST
41641: LIST
41642: LIST
41643: LIST
41644: LIST
41645: LIST
41646: LIST
41647: LIST
41648: LIST
41649: LIST
41650: LIST
41651: LIST
41652: LIST
41653: LIST
41654: LIST
41655: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41656: LD_ADDR_VAR 0 22
41660: PUSH
41661: LD_INT 0
41663: PUSH
41664: LD_INT 0
41666: PUSH
41667: EMPTY
41668: LIST
41669: LIST
41670: PUSH
41671: LD_INT 0
41673: PUSH
41674: LD_INT 1
41676: NEG
41677: PUSH
41678: EMPTY
41679: LIST
41680: LIST
41681: PUSH
41682: LD_INT 1
41684: PUSH
41685: LD_INT 0
41687: PUSH
41688: EMPTY
41689: LIST
41690: LIST
41691: PUSH
41692: LD_INT 1
41694: PUSH
41695: LD_INT 1
41697: PUSH
41698: EMPTY
41699: LIST
41700: LIST
41701: PUSH
41702: LD_INT 0
41704: PUSH
41705: LD_INT 1
41707: PUSH
41708: EMPTY
41709: LIST
41710: LIST
41711: PUSH
41712: LD_INT 1
41714: NEG
41715: PUSH
41716: LD_INT 0
41718: PUSH
41719: EMPTY
41720: LIST
41721: LIST
41722: PUSH
41723: LD_INT 1
41725: NEG
41726: PUSH
41727: LD_INT 1
41729: NEG
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: PUSH
41735: LD_INT 1
41737: NEG
41738: PUSH
41739: LD_INT 2
41741: NEG
41742: PUSH
41743: EMPTY
41744: LIST
41745: LIST
41746: PUSH
41747: LD_INT 0
41749: PUSH
41750: LD_INT 2
41752: NEG
41753: PUSH
41754: EMPTY
41755: LIST
41756: LIST
41757: PUSH
41758: LD_INT 1
41760: PUSH
41761: LD_INT 1
41763: NEG
41764: PUSH
41765: EMPTY
41766: LIST
41767: LIST
41768: PUSH
41769: LD_INT 2
41771: PUSH
41772: LD_INT 0
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: PUSH
41779: LD_INT 2
41781: PUSH
41782: LD_INT 1
41784: PUSH
41785: EMPTY
41786: LIST
41787: LIST
41788: PUSH
41789: LD_INT 2
41791: PUSH
41792: LD_INT 2
41794: PUSH
41795: EMPTY
41796: LIST
41797: LIST
41798: PUSH
41799: LD_INT 1
41801: PUSH
41802: LD_INT 2
41804: PUSH
41805: EMPTY
41806: LIST
41807: LIST
41808: PUSH
41809: LD_INT 0
41811: PUSH
41812: LD_INT 2
41814: PUSH
41815: EMPTY
41816: LIST
41817: LIST
41818: PUSH
41819: LD_INT 1
41821: NEG
41822: PUSH
41823: LD_INT 1
41825: PUSH
41826: EMPTY
41827: LIST
41828: LIST
41829: PUSH
41830: LD_INT 2
41832: NEG
41833: PUSH
41834: LD_INT 0
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: PUSH
41841: LD_INT 2
41843: NEG
41844: PUSH
41845: LD_INT 1
41847: NEG
41848: PUSH
41849: EMPTY
41850: LIST
41851: LIST
41852: PUSH
41853: LD_INT 2
41855: NEG
41856: PUSH
41857: LD_INT 2
41859: NEG
41860: PUSH
41861: EMPTY
41862: LIST
41863: LIST
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: LIST
41869: LIST
41870: LIST
41871: LIST
41872: LIST
41873: LIST
41874: LIST
41875: LIST
41876: LIST
41877: LIST
41878: LIST
41879: LIST
41880: LIST
41881: LIST
41882: LIST
41883: LIST
41884: LIST
41885: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
41886: LD_ADDR_VAR 0 23
41890: PUSH
41891: LD_INT 0
41893: PUSH
41894: LD_INT 0
41896: PUSH
41897: EMPTY
41898: LIST
41899: LIST
41900: PUSH
41901: LD_INT 0
41903: PUSH
41904: LD_INT 1
41906: NEG
41907: PUSH
41908: EMPTY
41909: LIST
41910: LIST
41911: PUSH
41912: LD_INT 1
41914: PUSH
41915: LD_INT 0
41917: PUSH
41918: EMPTY
41919: LIST
41920: LIST
41921: PUSH
41922: LD_INT 1
41924: PUSH
41925: LD_INT 1
41927: PUSH
41928: EMPTY
41929: LIST
41930: LIST
41931: PUSH
41932: LD_INT 0
41934: PUSH
41935: LD_INT 1
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: LD_INT 1
41944: NEG
41945: PUSH
41946: LD_INT 0
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: PUSH
41953: LD_INT 1
41955: NEG
41956: PUSH
41957: LD_INT 1
41959: NEG
41960: PUSH
41961: EMPTY
41962: LIST
41963: LIST
41964: PUSH
41965: LD_INT 1
41967: NEG
41968: PUSH
41969: LD_INT 2
41971: NEG
41972: PUSH
41973: EMPTY
41974: LIST
41975: LIST
41976: PUSH
41977: LD_INT 0
41979: PUSH
41980: LD_INT 2
41982: NEG
41983: PUSH
41984: EMPTY
41985: LIST
41986: LIST
41987: PUSH
41988: LD_INT 1
41990: PUSH
41991: LD_INT 1
41993: NEG
41994: PUSH
41995: EMPTY
41996: LIST
41997: LIST
41998: PUSH
41999: LD_INT 2
42001: PUSH
42002: LD_INT 0
42004: PUSH
42005: EMPTY
42006: LIST
42007: LIST
42008: PUSH
42009: LD_INT 2
42011: PUSH
42012: LD_INT 1
42014: PUSH
42015: EMPTY
42016: LIST
42017: LIST
42018: PUSH
42019: LD_INT 2
42021: PUSH
42022: LD_INT 2
42024: PUSH
42025: EMPTY
42026: LIST
42027: LIST
42028: PUSH
42029: LD_INT 1
42031: PUSH
42032: LD_INT 2
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: PUSH
42039: LD_INT 0
42041: PUSH
42042: LD_INT 2
42044: PUSH
42045: EMPTY
42046: LIST
42047: LIST
42048: PUSH
42049: LD_INT 1
42051: NEG
42052: PUSH
42053: LD_INT 1
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: PUSH
42060: LD_INT 2
42062: NEG
42063: PUSH
42064: LD_INT 0
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: PUSH
42071: LD_INT 2
42073: NEG
42074: PUSH
42075: LD_INT 1
42077: NEG
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: PUSH
42083: LD_INT 2
42085: NEG
42086: PUSH
42087: LD_INT 2
42089: NEG
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: PUSH
42095: LD_INT 2
42097: NEG
42098: PUSH
42099: LD_INT 3
42101: NEG
42102: PUSH
42103: EMPTY
42104: LIST
42105: LIST
42106: PUSH
42107: LD_INT 1
42109: NEG
42110: PUSH
42111: LD_INT 3
42113: NEG
42114: PUSH
42115: EMPTY
42116: LIST
42117: LIST
42118: PUSH
42119: LD_INT 1
42121: PUSH
42122: LD_INT 2
42124: NEG
42125: PUSH
42126: EMPTY
42127: LIST
42128: LIST
42129: PUSH
42130: LD_INT 2
42132: PUSH
42133: LD_INT 1
42135: NEG
42136: PUSH
42137: EMPTY
42138: LIST
42139: LIST
42140: PUSH
42141: EMPTY
42142: LIST
42143: LIST
42144: LIST
42145: LIST
42146: LIST
42147: LIST
42148: LIST
42149: LIST
42150: LIST
42151: LIST
42152: LIST
42153: LIST
42154: LIST
42155: LIST
42156: LIST
42157: LIST
42158: LIST
42159: LIST
42160: LIST
42161: LIST
42162: LIST
42163: LIST
42164: LIST
42165: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
42166: LD_ADDR_VAR 0 24
42170: PUSH
42171: LD_INT 0
42173: PUSH
42174: LD_INT 0
42176: PUSH
42177: EMPTY
42178: LIST
42179: LIST
42180: PUSH
42181: LD_INT 0
42183: PUSH
42184: LD_INT 1
42186: NEG
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: PUSH
42192: LD_INT 1
42194: PUSH
42195: LD_INT 0
42197: PUSH
42198: EMPTY
42199: LIST
42200: LIST
42201: PUSH
42202: LD_INT 1
42204: PUSH
42205: LD_INT 1
42207: PUSH
42208: EMPTY
42209: LIST
42210: LIST
42211: PUSH
42212: LD_INT 0
42214: PUSH
42215: LD_INT 1
42217: PUSH
42218: EMPTY
42219: LIST
42220: LIST
42221: PUSH
42222: LD_INT 1
42224: NEG
42225: PUSH
42226: LD_INT 0
42228: PUSH
42229: EMPTY
42230: LIST
42231: LIST
42232: PUSH
42233: LD_INT 1
42235: NEG
42236: PUSH
42237: LD_INT 1
42239: NEG
42240: PUSH
42241: EMPTY
42242: LIST
42243: LIST
42244: PUSH
42245: LD_INT 1
42247: NEG
42248: PUSH
42249: LD_INT 2
42251: NEG
42252: PUSH
42253: EMPTY
42254: LIST
42255: LIST
42256: PUSH
42257: LD_INT 0
42259: PUSH
42260: LD_INT 2
42262: NEG
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: PUSH
42268: LD_INT 1
42270: PUSH
42271: LD_INT 1
42273: NEG
42274: PUSH
42275: EMPTY
42276: LIST
42277: LIST
42278: PUSH
42279: LD_INT 2
42281: PUSH
42282: LD_INT 0
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: PUSH
42289: LD_INT 2
42291: PUSH
42292: LD_INT 1
42294: PUSH
42295: EMPTY
42296: LIST
42297: LIST
42298: PUSH
42299: LD_INT 2
42301: PUSH
42302: LD_INT 2
42304: PUSH
42305: EMPTY
42306: LIST
42307: LIST
42308: PUSH
42309: LD_INT 1
42311: PUSH
42312: LD_INT 2
42314: PUSH
42315: EMPTY
42316: LIST
42317: LIST
42318: PUSH
42319: LD_INT 0
42321: PUSH
42322: LD_INT 2
42324: PUSH
42325: EMPTY
42326: LIST
42327: LIST
42328: PUSH
42329: LD_INT 1
42331: NEG
42332: PUSH
42333: LD_INT 1
42335: PUSH
42336: EMPTY
42337: LIST
42338: LIST
42339: PUSH
42340: LD_INT 2
42342: NEG
42343: PUSH
42344: LD_INT 0
42346: PUSH
42347: EMPTY
42348: LIST
42349: LIST
42350: PUSH
42351: LD_INT 2
42353: NEG
42354: PUSH
42355: LD_INT 1
42357: NEG
42358: PUSH
42359: EMPTY
42360: LIST
42361: LIST
42362: PUSH
42363: LD_INT 2
42365: NEG
42366: PUSH
42367: LD_INT 2
42369: NEG
42370: PUSH
42371: EMPTY
42372: LIST
42373: LIST
42374: PUSH
42375: LD_INT 1
42377: PUSH
42378: LD_INT 2
42380: NEG
42381: PUSH
42382: EMPTY
42383: LIST
42384: LIST
42385: PUSH
42386: LD_INT 2
42388: PUSH
42389: LD_INT 1
42391: NEG
42392: PUSH
42393: EMPTY
42394: LIST
42395: LIST
42396: PUSH
42397: LD_INT 3
42399: PUSH
42400: LD_INT 1
42402: PUSH
42403: EMPTY
42404: LIST
42405: LIST
42406: PUSH
42407: LD_INT 3
42409: PUSH
42410: LD_INT 2
42412: PUSH
42413: EMPTY
42414: LIST
42415: LIST
42416: PUSH
42417: EMPTY
42418: LIST
42419: LIST
42420: LIST
42421: LIST
42422: LIST
42423: LIST
42424: LIST
42425: LIST
42426: LIST
42427: LIST
42428: LIST
42429: LIST
42430: LIST
42431: LIST
42432: LIST
42433: LIST
42434: LIST
42435: LIST
42436: LIST
42437: LIST
42438: LIST
42439: LIST
42440: LIST
42441: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
42442: LD_ADDR_VAR 0 25
42446: PUSH
42447: LD_INT 0
42449: PUSH
42450: LD_INT 0
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: PUSH
42457: LD_INT 0
42459: PUSH
42460: LD_INT 1
42462: NEG
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: PUSH
42468: LD_INT 1
42470: PUSH
42471: LD_INT 0
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: PUSH
42478: LD_INT 1
42480: PUSH
42481: LD_INT 1
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: PUSH
42488: LD_INT 0
42490: PUSH
42491: LD_INT 1
42493: PUSH
42494: EMPTY
42495: LIST
42496: LIST
42497: PUSH
42498: LD_INT 1
42500: NEG
42501: PUSH
42502: LD_INT 0
42504: PUSH
42505: EMPTY
42506: LIST
42507: LIST
42508: PUSH
42509: LD_INT 1
42511: NEG
42512: PUSH
42513: LD_INT 1
42515: NEG
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: PUSH
42521: LD_INT 1
42523: NEG
42524: PUSH
42525: LD_INT 2
42527: NEG
42528: PUSH
42529: EMPTY
42530: LIST
42531: LIST
42532: PUSH
42533: LD_INT 0
42535: PUSH
42536: LD_INT 2
42538: NEG
42539: PUSH
42540: EMPTY
42541: LIST
42542: LIST
42543: PUSH
42544: LD_INT 1
42546: PUSH
42547: LD_INT 1
42549: NEG
42550: PUSH
42551: EMPTY
42552: LIST
42553: LIST
42554: PUSH
42555: LD_INT 2
42557: PUSH
42558: LD_INT 0
42560: PUSH
42561: EMPTY
42562: LIST
42563: LIST
42564: PUSH
42565: LD_INT 2
42567: PUSH
42568: LD_INT 1
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: PUSH
42575: LD_INT 2
42577: PUSH
42578: LD_INT 2
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: PUSH
42585: LD_INT 1
42587: PUSH
42588: LD_INT 2
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: PUSH
42595: LD_INT 0
42597: PUSH
42598: LD_INT 2
42600: PUSH
42601: EMPTY
42602: LIST
42603: LIST
42604: PUSH
42605: LD_INT 1
42607: NEG
42608: PUSH
42609: LD_INT 1
42611: PUSH
42612: EMPTY
42613: LIST
42614: LIST
42615: PUSH
42616: LD_INT 2
42618: NEG
42619: PUSH
42620: LD_INT 0
42622: PUSH
42623: EMPTY
42624: LIST
42625: LIST
42626: PUSH
42627: LD_INT 2
42629: NEG
42630: PUSH
42631: LD_INT 1
42633: NEG
42634: PUSH
42635: EMPTY
42636: LIST
42637: LIST
42638: PUSH
42639: LD_INT 2
42641: NEG
42642: PUSH
42643: LD_INT 2
42645: NEG
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: PUSH
42651: LD_INT 3
42653: PUSH
42654: LD_INT 1
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: PUSH
42661: LD_INT 3
42663: PUSH
42664: LD_INT 2
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: PUSH
42671: LD_INT 2
42673: PUSH
42674: LD_INT 3
42676: PUSH
42677: EMPTY
42678: LIST
42679: LIST
42680: PUSH
42681: LD_INT 1
42683: PUSH
42684: LD_INT 3
42686: PUSH
42687: EMPTY
42688: LIST
42689: LIST
42690: PUSH
42691: EMPTY
42692: LIST
42693: LIST
42694: LIST
42695: LIST
42696: LIST
42697: LIST
42698: LIST
42699: LIST
42700: LIST
42701: LIST
42702: LIST
42703: LIST
42704: LIST
42705: LIST
42706: LIST
42707: LIST
42708: LIST
42709: LIST
42710: LIST
42711: LIST
42712: LIST
42713: LIST
42714: LIST
42715: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
42716: LD_ADDR_VAR 0 26
42720: PUSH
42721: LD_INT 0
42723: PUSH
42724: LD_INT 0
42726: PUSH
42727: EMPTY
42728: LIST
42729: LIST
42730: PUSH
42731: LD_INT 0
42733: PUSH
42734: LD_INT 1
42736: NEG
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: PUSH
42742: LD_INT 1
42744: PUSH
42745: LD_INT 0
42747: PUSH
42748: EMPTY
42749: LIST
42750: LIST
42751: PUSH
42752: LD_INT 1
42754: PUSH
42755: LD_INT 1
42757: PUSH
42758: EMPTY
42759: LIST
42760: LIST
42761: PUSH
42762: LD_INT 0
42764: PUSH
42765: LD_INT 1
42767: PUSH
42768: EMPTY
42769: LIST
42770: LIST
42771: PUSH
42772: LD_INT 1
42774: NEG
42775: PUSH
42776: LD_INT 0
42778: PUSH
42779: EMPTY
42780: LIST
42781: LIST
42782: PUSH
42783: LD_INT 1
42785: NEG
42786: PUSH
42787: LD_INT 1
42789: NEG
42790: PUSH
42791: EMPTY
42792: LIST
42793: LIST
42794: PUSH
42795: LD_INT 1
42797: NEG
42798: PUSH
42799: LD_INT 2
42801: NEG
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: PUSH
42807: LD_INT 0
42809: PUSH
42810: LD_INT 2
42812: NEG
42813: PUSH
42814: EMPTY
42815: LIST
42816: LIST
42817: PUSH
42818: LD_INT 1
42820: PUSH
42821: LD_INT 1
42823: NEG
42824: PUSH
42825: EMPTY
42826: LIST
42827: LIST
42828: PUSH
42829: LD_INT 2
42831: PUSH
42832: LD_INT 0
42834: PUSH
42835: EMPTY
42836: LIST
42837: LIST
42838: PUSH
42839: LD_INT 2
42841: PUSH
42842: LD_INT 1
42844: PUSH
42845: EMPTY
42846: LIST
42847: LIST
42848: PUSH
42849: LD_INT 2
42851: PUSH
42852: LD_INT 2
42854: PUSH
42855: EMPTY
42856: LIST
42857: LIST
42858: PUSH
42859: LD_INT 1
42861: PUSH
42862: LD_INT 2
42864: PUSH
42865: EMPTY
42866: LIST
42867: LIST
42868: PUSH
42869: LD_INT 0
42871: PUSH
42872: LD_INT 2
42874: PUSH
42875: EMPTY
42876: LIST
42877: LIST
42878: PUSH
42879: LD_INT 1
42881: NEG
42882: PUSH
42883: LD_INT 1
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: PUSH
42890: LD_INT 2
42892: NEG
42893: PUSH
42894: LD_INT 0
42896: PUSH
42897: EMPTY
42898: LIST
42899: LIST
42900: PUSH
42901: LD_INT 2
42903: NEG
42904: PUSH
42905: LD_INT 1
42907: NEG
42908: PUSH
42909: EMPTY
42910: LIST
42911: LIST
42912: PUSH
42913: LD_INT 2
42915: NEG
42916: PUSH
42917: LD_INT 2
42919: NEG
42920: PUSH
42921: EMPTY
42922: LIST
42923: LIST
42924: PUSH
42925: LD_INT 2
42927: PUSH
42928: LD_INT 3
42930: PUSH
42931: EMPTY
42932: LIST
42933: LIST
42934: PUSH
42935: LD_INT 1
42937: PUSH
42938: LD_INT 3
42940: PUSH
42941: EMPTY
42942: LIST
42943: LIST
42944: PUSH
42945: LD_INT 1
42947: NEG
42948: PUSH
42949: LD_INT 2
42951: PUSH
42952: EMPTY
42953: LIST
42954: LIST
42955: PUSH
42956: LD_INT 2
42958: NEG
42959: PUSH
42960: LD_INT 1
42962: PUSH
42963: EMPTY
42964: LIST
42965: LIST
42966: PUSH
42967: EMPTY
42968: LIST
42969: LIST
42970: LIST
42971: LIST
42972: LIST
42973: LIST
42974: LIST
42975: LIST
42976: LIST
42977: LIST
42978: LIST
42979: LIST
42980: LIST
42981: LIST
42982: LIST
42983: LIST
42984: LIST
42985: LIST
42986: LIST
42987: LIST
42988: LIST
42989: LIST
42990: LIST
42991: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42992: LD_ADDR_VAR 0 27
42996: PUSH
42997: LD_INT 0
42999: PUSH
43000: LD_INT 0
43002: PUSH
43003: EMPTY
43004: LIST
43005: LIST
43006: PUSH
43007: LD_INT 0
43009: PUSH
43010: LD_INT 1
43012: NEG
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: PUSH
43018: LD_INT 1
43020: PUSH
43021: LD_INT 0
43023: PUSH
43024: EMPTY
43025: LIST
43026: LIST
43027: PUSH
43028: LD_INT 1
43030: PUSH
43031: LD_INT 1
43033: PUSH
43034: EMPTY
43035: LIST
43036: LIST
43037: PUSH
43038: LD_INT 0
43040: PUSH
43041: LD_INT 1
43043: PUSH
43044: EMPTY
43045: LIST
43046: LIST
43047: PUSH
43048: LD_INT 1
43050: NEG
43051: PUSH
43052: LD_INT 0
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: PUSH
43059: LD_INT 1
43061: NEG
43062: PUSH
43063: LD_INT 1
43065: NEG
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: PUSH
43071: LD_INT 1
43073: NEG
43074: PUSH
43075: LD_INT 2
43077: NEG
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: PUSH
43083: LD_INT 0
43085: PUSH
43086: LD_INT 2
43088: NEG
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: PUSH
43094: LD_INT 1
43096: PUSH
43097: LD_INT 1
43099: NEG
43100: PUSH
43101: EMPTY
43102: LIST
43103: LIST
43104: PUSH
43105: LD_INT 2
43107: PUSH
43108: LD_INT 0
43110: PUSH
43111: EMPTY
43112: LIST
43113: LIST
43114: PUSH
43115: LD_INT 2
43117: PUSH
43118: LD_INT 1
43120: PUSH
43121: EMPTY
43122: LIST
43123: LIST
43124: PUSH
43125: LD_INT 2
43127: PUSH
43128: LD_INT 2
43130: PUSH
43131: EMPTY
43132: LIST
43133: LIST
43134: PUSH
43135: LD_INT 1
43137: PUSH
43138: LD_INT 2
43140: PUSH
43141: EMPTY
43142: LIST
43143: LIST
43144: PUSH
43145: LD_INT 0
43147: PUSH
43148: LD_INT 2
43150: PUSH
43151: EMPTY
43152: LIST
43153: LIST
43154: PUSH
43155: LD_INT 1
43157: NEG
43158: PUSH
43159: LD_INT 1
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: PUSH
43166: LD_INT 2
43168: NEG
43169: PUSH
43170: LD_INT 0
43172: PUSH
43173: EMPTY
43174: LIST
43175: LIST
43176: PUSH
43177: LD_INT 2
43179: NEG
43180: PUSH
43181: LD_INT 1
43183: NEG
43184: PUSH
43185: EMPTY
43186: LIST
43187: LIST
43188: PUSH
43189: LD_INT 2
43191: NEG
43192: PUSH
43193: LD_INT 2
43195: NEG
43196: PUSH
43197: EMPTY
43198: LIST
43199: LIST
43200: PUSH
43201: LD_INT 1
43203: NEG
43204: PUSH
43205: LD_INT 2
43207: PUSH
43208: EMPTY
43209: LIST
43210: LIST
43211: PUSH
43212: LD_INT 2
43214: NEG
43215: PUSH
43216: LD_INT 1
43218: PUSH
43219: EMPTY
43220: LIST
43221: LIST
43222: PUSH
43223: LD_INT 3
43225: NEG
43226: PUSH
43227: LD_INT 1
43229: NEG
43230: PUSH
43231: EMPTY
43232: LIST
43233: LIST
43234: PUSH
43235: LD_INT 3
43237: NEG
43238: PUSH
43239: LD_INT 2
43241: NEG
43242: PUSH
43243: EMPTY
43244: LIST
43245: LIST
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: LIST
43251: LIST
43252: LIST
43253: LIST
43254: LIST
43255: LIST
43256: LIST
43257: LIST
43258: LIST
43259: LIST
43260: LIST
43261: LIST
43262: LIST
43263: LIST
43264: LIST
43265: LIST
43266: LIST
43267: LIST
43268: LIST
43269: LIST
43270: LIST
43271: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43272: LD_ADDR_VAR 0 28
43276: PUSH
43277: LD_INT 0
43279: PUSH
43280: LD_INT 0
43282: PUSH
43283: EMPTY
43284: LIST
43285: LIST
43286: PUSH
43287: LD_INT 0
43289: PUSH
43290: LD_INT 1
43292: NEG
43293: PUSH
43294: EMPTY
43295: LIST
43296: LIST
43297: PUSH
43298: LD_INT 1
43300: PUSH
43301: LD_INT 0
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: PUSH
43308: LD_INT 1
43310: PUSH
43311: LD_INT 1
43313: PUSH
43314: EMPTY
43315: LIST
43316: LIST
43317: PUSH
43318: LD_INT 0
43320: PUSH
43321: LD_INT 1
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: PUSH
43328: LD_INT 1
43330: NEG
43331: PUSH
43332: LD_INT 0
43334: PUSH
43335: EMPTY
43336: LIST
43337: LIST
43338: PUSH
43339: LD_INT 1
43341: NEG
43342: PUSH
43343: LD_INT 1
43345: NEG
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: PUSH
43351: LD_INT 1
43353: NEG
43354: PUSH
43355: LD_INT 2
43357: NEG
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: PUSH
43363: LD_INT 0
43365: PUSH
43366: LD_INT 2
43368: NEG
43369: PUSH
43370: EMPTY
43371: LIST
43372: LIST
43373: PUSH
43374: LD_INT 1
43376: PUSH
43377: LD_INT 1
43379: NEG
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: PUSH
43385: LD_INT 2
43387: PUSH
43388: LD_INT 0
43390: PUSH
43391: EMPTY
43392: LIST
43393: LIST
43394: PUSH
43395: LD_INT 2
43397: PUSH
43398: LD_INT 1
43400: PUSH
43401: EMPTY
43402: LIST
43403: LIST
43404: PUSH
43405: LD_INT 2
43407: PUSH
43408: LD_INT 2
43410: PUSH
43411: EMPTY
43412: LIST
43413: LIST
43414: PUSH
43415: LD_INT 1
43417: PUSH
43418: LD_INT 2
43420: PUSH
43421: EMPTY
43422: LIST
43423: LIST
43424: PUSH
43425: LD_INT 0
43427: PUSH
43428: LD_INT 2
43430: PUSH
43431: EMPTY
43432: LIST
43433: LIST
43434: PUSH
43435: LD_INT 1
43437: NEG
43438: PUSH
43439: LD_INT 1
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: PUSH
43446: LD_INT 2
43448: NEG
43449: PUSH
43450: LD_INT 0
43452: PUSH
43453: EMPTY
43454: LIST
43455: LIST
43456: PUSH
43457: LD_INT 2
43459: NEG
43460: PUSH
43461: LD_INT 1
43463: NEG
43464: PUSH
43465: EMPTY
43466: LIST
43467: LIST
43468: PUSH
43469: LD_INT 2
43471: NEG
43472: PUSH
43473: LD_INT 2
43475: NEG
43476: PUSH
43477: EMPTY
43478: LIST
43479: LIST
43480: PUSH
43481: LD_INT 2
43483: NEG
43484: PUSH
43485: LD_INT 3
43487: NEG
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: PUSH
43493: LD_INT 1
43495: NEG
43496: PUSH
43497: LD_INT 3
43499: NEG
43500: PUSH
43501: EMPTY
43502: LIST
43503: LIST
43504: PUSH
43505: LD_INT 3
43507: NEG
43508: PUSH
43509: LD_INT 1
43511: NEG
43512: PUSH
43513: EMPTY
43514: LIST
43515: LIST
43516: PUSH
43517: LD_INT 3
43519: NEG
43520: PUSH
43521: LD_INT 2
43523: NEG
43524: PUSH
43525: EMPTY
43526: LIST
43527: LIST
43528: PUSH
43529: EMPTY
43530: LIST
43531: LIST
43532: LIST
43533: LIST
43534: LIST
43535: LIST
43536: LIST
43537: LIST
43538: LIST
43539: LIST
43540: LIST
43541: LIST
43542: LIST
43543: LIST
43544: LIST
43545: LIST
43546: LIST
43547: LIST
43548: LIST
43549: LIST
43550: LIST
43551: LIST
43552: LIST
43553: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43554: LD_ADDR_VAR 0 29
43558: PUSH
43559: LD_INT 0
43561: PUSH
43562: LD_INT 0
43564: PUSH
43565: EMPTY
43566: LIST
43567: LIST
43568: PUSH
43569: LD_INT 0
43571: PUSH
43572: LD_INT 1
43574: NEG
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: PUSH
43580: LD_INT 1
43582: PUSH
43583: LD_INT 0
43585: PUSH
43586: EMPTY
43587: LIST
43588: LIST
43589: PUSH
43590: LD_INT 1
43592: PUSH
43593: LD_INT 1
43595: PUSH
43596: EMPTY
43597: LIST
43598: LIST
43599: PUSH
43600: LD_INT 0
43602: PUSH
43603: LD_INT 1
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: PUSH
43610: LD_INT 1
43612: NEG
43613: PUSH
43614: LD_INT 0
43616: PUSH
43617: EMPTY
43618: LIST
43619: LIST
43620: PUSH
43621: LD_INT 1
43623: NEG
43624: PUSH
43625: LD_INT 1
43627: NEG
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: PUSH
43633: LD_INT 1
43635: NEG
43636: PUSH
43637: LD_INT 2
43639: NEG
43640: PUSH
43641: EMPTY
43642: LIST
43643: LIST
43644: PUSH
43645: LD_INT 0
43647: PUSH
43648: LD_INT 2
43650: NEG
43651: PUSH
43652: EMPTY
43653: LIST
43654: LIST
43655: PUSH
43656: LD_INT 1
43658: PUSH
43659: LD_INT 1
43661: NEG
43662: PUSH
43663: EMPTY
43664: LIST
43665: LIST
43666: PUSH
43667: LD_INT 2
43669: PUSH
43670: LD_INT 0
43672: PUSH
43673: EMPTY
43674: LIST
43675: LIST
43676: PUSH
43677: LD_INT 2
43679: PUSH
43680: LD_INT 1
43682: PUSH
43683: EMPTY
43684: LIST
43685: LIST
43686: PUSH
43687: LD_INT 1
43689: PUSH
43690: LD_INT 2
43692: PUSH
43693: EMPTY
43694: LIST
43695: LIST
43696: PUSH
43697: LD_INT 0
43699: PUSH
43700: LD_INT 2
43702: PUSH
43703: EMPTY
43704: LIST
43705: LIST
43706: PUSH
43707: LD_INT 1
43709: NEG
43710: PUSH
43711: LD_INT 1
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: PUSH
43718: LD_INT 2
43720: NEG
43721: PUSH
43722: LD_INT 1
43724: NEG
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: PUSH
43730: LD_INT 2
43732: NEG
43733: PUSH
43734: LD_INT 2
43736: NEG
43737: PUSH
43738: EMPTY
43739: LIST
43740: LIST
43741: PUSH
43742: LD_INT 2
43744: NEG
43745: PUSH
43746: LD_INT 3
43748: NEG
43749: PUSH
43750: EMPTY
43751: LIST
43752: LIST
43753: PUSH
43754: LD_INT 2
43756: PUSH
43757: LD_INT 1
43759: NEG
43760: PUSH
43761: EMPTY
43762: LIST
43763: LIST
43764: PUSH
43765: LD_INT 3
43767: PUSH
43768: LD_INT 1
43770: PUSH
43771: EMPTY
43772: LIST
43773: LIST
43774: PUSH
43775: LD_INT 1
43777: PUSH
43778: LD_INT 3
43780: PUSH
43781: EMPTY
43782: LIST
43783: LIST
43784: PUSH
43785: LD_INT 1
43787: NEG
43788: PUSH
43789: LD_INT 2
43791: PUSH
43792: EMPTY
43793: LIST
43794: LIST
43795: PUSH
43796: LD_INT 3
43798: NEG
43799: PUSH
43800: LD_INT 2
43802: NEG
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: PUSH
43808: EMPTY
43809: LIST
43810: LIST
43811: LIST
43812: LIST
43813: LIST
43814: LIST
43815: LIST
43816: LIST
43817: LIST
43818: LIST
43819: LIST
43820: LIST
43821: LIST
43822: LIST
43823: LIST
43824: LIST
43825: LIST
43826: LIST
43827: LIST
43828: LIST
43829: LIST
43830: LIST
43831: LIST
43832: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43833: LD_ADDR_VAR 0 30
43837: PUSH
43838: LD_INT 0
43840: PUSH
43841: LD_INT 0
43843: PUSH
43844: EMPTY
43845: LIST
43846: LIST
43847: PUSH
43848: LD_INT 0
43850: PUSH
43851: LD_INT 1
43853: NEG
43854: PUSH
43855: EMPTY
43856: LIST
43857: LIST
43858: PUSH
43859: LD_INT 1
43861: PUSH
43862: LD_INT 0
43864: PUSH
43865: EMPTY
43866: LIST
43867: LIST
43868: PUSH
43869: LD_INT 1
43871: PUSH
43872: LD_INT 1
43874: PUSH
43875: EMPTY
43876: LIST
43877: LIST
43878: PUSH
43879: LD_INT 0
43881: PUSH
43882: LD_INT 1
43884: PUSH
43885: EMPTY
43886: LIST
43887: LIST
43888: PUSH
43889: LD_INT 1
43891: NEG
43892: PUSH
43893: LD_INT 0
43895: PUSH
43896: EMPTY
43897: LIST
43898: LIST
43899: PUSH
43900: LD_INT 1
43902: NEG
43903: PUSH
43904: LD_INT 1
43906: NEG
43907: PUSH
43908: EMPTY
43909: LIST
43910: LIST
43911: PUSH
43912: LD_INT 1
43914: NEG
43915: PUSH
43916: LD_INT 2
43918: NEG
43919: PUSH
43920: EMPTY
43921: LIST
43922: LIST
43923: PUSH
43924: LD_INT 0
43926: PUSH
43927: LD_INT 2
43929: NEG
43930: PUSH
43931: EMPTY
43932: LIST
43933: LIST
43934: PUSH
43935: LD_INT 1
43937: PUSH
43938: LD_INT 1
43940: NEG
43941: PUSH
43942: EMPTY
43943: LIST
43944: LIST
43945: PUSH
43946: LD_INT 2
43948: PUSH
43949: LD_INT 0
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: PUSH
43956: LD_INT 2
43958: PUSH
43959: LD_INT 1
43961: PUSH
43962: EMPTY
43963: LIST
43964: LIST
43965: PUSH
43966: LD_INT 2
43968: PUSH
43969: LD_INT 2
43971: PUSH
43972: EMPTY
43973: LIST
43974: LIST
43975: PUSH
43976: LD_INT 1
43978: PUSH
43979: LD_INT 2
43981: PUSH
43982: EMPTY
43983: LIST
43984: LIST
43985: PUSH
43986: LD_INT 1
43988: NEG
43989: PUSH
43990: LD_INT 1
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: PUSH
43997: LD_INT 2
43999: NEG
44000: PUSH
44001: LD_INT 0
44003: PUSH
44004: EMPTY
44005: LIST
44006: LIST
44007: PUSH
44008: LD_INT 2
44010: NEG
44011: PUSH
44012: LD_INT 1
44014: NEG
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: PUSH
44020: LD_INT 1
44022: NEG
44023: PUSH
44024: LD_INT 3
44026: NEG
44027: PUSH
44028: EMPTY
44029: LIST
44030: LIST
44031: PUSH
44032: LD_INT 1
44034: PUSH
44035: LD_INT 2
44037: NEG
44038: PUSH
44039: EMPTY
44040: LIST
44041: LIST
44042: PUSH
44043: LD_INT 3
44045: PUSH
44046: LD_INT 2
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: LD_INT 2
44055: PUSH
44056: LD_INT 3
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: PUSH
44063: LD_INT 2
44065: NEG
44066: PUSH
44067: LD_INT 1
44069: PUSH
44070: EMPTY
44071: LIST
44072: LIST
44073: PUSH
44074: LD_INT 3
44076: NEG
44077: PUSH
44078: LD_INT 1
44080: NEG
44081: PUSH
44082: EMPTY
44083: LIST
44084: LIST
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: LIST
44090: LIST
44091: LIST
44092: LIST
44093: LIST
44094: LIST
44095: LIST
44096: LIST
44097: LIST
44098: LIST
44099: LIST
44100: LIST
44101: LIST
44102: LIST
44103: LIST
44104: LIST
44105: LIST
44106: LIST
44107: LIST
44108: LIST
44109: LIST
44110: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44111: LD_ADDR_VAR 0 31
44115: PUSH
44116: LD_INT 0
44118: PUSH
44119: LD_INT 0
44121: PUSH
44122: EMPTY
44123: LIST
44124: LIST
44125: PUSH
44126: LD_INT 0
44128: PUSH
44129: LD_INT 1
44131: NEG
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: PUSH
44137: LD_INT 1
44139: PUSH
44140: LD_INT 0
44142: PUSH
44143: EMPTY
44144: LIST
44145: LIST
44146: PUSH
44147: LD_INT 1
44149: PUSH
44150: LD_INT 1
44152: PUSH
44153: EMPTY
44154: LIST
44155: LIST
44156: PUSH
44157: LD_INT 0
44159: PUSH
44160: LD_INT 1
44162: PUSH
44163: EMPTY
44164: LIST
44165: LIST
44166: PUSH
44167: LD_INT 1
44169: NEG
44170: PUSH
44171: LD_INT 0
44173: PUSH
44174: EMPTY
44175: LIST
44176: LIST
44177: PUSH
44178: LD_INT 1
44180: NEG
44181: PUSH
44182: LD_INT 1
44184: NEG
44185: PUSH
44186: EMPTY
44187: LIST
44188: LIST
44189: PUSH
44190: LD_INT 1
44192: NEG
44193: PUSH
44194: LD_INT 2
44196: NEG
44197: PUSH
44198: EMPTY
44199: LIST
44200: LIST
44201: PUSH
44202: LD_INT 1
44204: PUSH
44205: LD_INT 1
44207: NEG
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: PUSH
44213: LD_INT 2
44215: PUSH
44216: LD_INT 0
44218: PUSH
44219: EMPTY
44220: LIST
44221: LIST
44222: PUSH
44223: LD_INT 2
44225: PUSH
44226: LD_INT 1
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: PUSH
44233: LD_INT 2
44235: PUSH
44236: LD_INT 2
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: PUSH
44243: LD_INT 1
44245: PUSH
44246: LD_INT 2
44248: PUSH
44249: EMPTY
44250: LIST
44251: LIST
44252: PUSH
44253: LD_INT 0
44255: PUSH
44256: LD_INT 2
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: PUSH
44263: LD_INT 1
44265: NEG
44266: PUSH
44267: LD_INT 1
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: PUSH
44274: LD_INT 2
44276: NEG
44277: PUSH
44278: LD_INT 1
44280: NEG
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: PUSH
44286: LD_INT 2
44288: NEG
44289: PUSH
44290: LD_INT 2
44292: NEG
44293: PUSH
44294: EMPTY
44295: LIST
44296: LIST
44297: PUSH
44298: LD_INT 2
44300: NEG
44301: PUSH
44302: LD_INT 3
44304: NEG
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: PUSH
44310: LD_INT 2
44312: PUSH
44313: LD_INT 1
44315: NEG
44316: PUSH
44317: EMPTY
44318: LIST
44319: LIST
44320: PUSH
44321: LD_INT 3
44323: PUSH
44324: LD_INT 1
44326: PUSH
44327: EMPTY
44328: LIST
44329: LIST
44330: PUSH
44331: LD_INT 1
44333: PUSH
44334: LD_INT 3
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: PUSH
44341: LD_INT 1
44343: NEG
44344: PUSH
44345: LD_INT 2
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: PUSH
44352: LD_INT 3
44354: NEG
44355: PUSH
44356: LD_INT 2
44358: NEG
44359: PUSH
44360: EMPTY
44361: LIST
44362: LIST
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: LIST
44368: LIST
44369: LIST
44370: LIST
44371: LIST
44372: LIST
44373: LIST
44374: LIST
44375: LIST
44376: LIST
44377: LIST
44378: LIST
44379: LIST
44380: LIST
44381: LIST
44382: LIST
44383: LIST
44384: LIST
44385: LIST
44386: LIST
44387: LIST
44388: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44389: LD_ADDR_VAR 0 32
44393: PUSH
44394: LD_INT 0
44396: PUSH
44397: LD_INT 0
44399: PUSH
44400: EMPTY
44401: LIST
44402: LIST
44403: PUSH
44404: LD_INT 0
44406: PUSH
44407: LD_INT 1
44409: NEG
44410: PUSH
44411: EMPTY
44412: LIST
44413: LIST
44414: PUSH
44415: LD_INT 1
44417: PUSH
44418: LD_INT 0
44420: PUSH
44421: EMPTY
44422: LIST
44423: LIST
44424: PUSH
44425: LD_INT 1
44427: PUSH
44428: LD_INT 1
44430: PUSH
44431: EMPTY
44432: LIST
44433: LIST
44434: PUSH
44435: LD_INT 0
44437: PUSH
44438: LD_INT 1
44440: PUSH
44441: EMPTY
44442: LIST
44443: LIST
44444: PUSH
44445: LD_INT 1
44447: NEG
44448: PUSH
44449: LD_INT 0
44451: PUSH
44452: EMPTY
44453: LIST
44454: LIST
44455: PUSH
44456: LD_INT 1
44458: NEG
44459: PUSH
44460: LD_INT 1
44462: NEG
44463: PUSH
44464: EMPTY
44465: LIST
44466: LIST
44467: PUSH
44468: LD_INT 1
44470: NEG
44471: PUSH
44472: LD_INT 2
44474: NEG
44475: PUSH
44476: EMPTY
44477: LIST
44478: LIST
44479: PUSH
44480: LD_INT 0
44482: PUSH
44483: LD_INT 2
44485: NEG
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: PUSH
44491: LD_INT 1
44493: PUSH
44494: LD_INT 1
44496: NEG
44497: PUSH
44498: EMPTY
44499: LIST
44500: LIST
44501: PUSH
44502: LD_INT 2
44504: PUSH
44505: LD_INT 1
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: PUSH
44512: LD_INT 2
44514: PUSH
44515: LD_INT 2
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: PUSH
44522: LD_INT 1
44524: PUSH
44525: LD_INT 2
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: PUSH
44532: LD_INT 0
44534: PUSH
44535: LD_INT 2
44537: PUSH
44538: EMPTY
44539: LIST
44540: LIST
44541: PUSH
44542: LD_INT 1
44544: NEG
44545: PUSH
44546: LD_INT 1
44548: PUSH
44549: EMPTY
44550: LIST
44551: LIST
44552: PUSH
44553: LD_INT 2
44555: NEG
44556: PUSH
44557: LD_INT 0
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: PUSH
44564: LD_INT 2
44566: NEG
44567: PUSH
44568: LD_INT 1
44570: NEG
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: LD_INT 1
44578: NEG
44579: PUSH
44580: LD_INT 3
44582: NEG
44583: PUSH
44584: EMPTY
44585: LIST
44586: LIST
44587: PUSH
44588: LD_INT 1
44590: PUSH
44591: LD_INT 2
44593: NEG
44594: PUSH
44595: EMPTY
44596: LIST
44597: LIST
44598: PUSH
44599: LD_INT 3
44601: PUSH
44602: LD_INT 2
44604: PUSH
44605: EMPTY
44606: LIST
44607: LIST
44608: PUSH
44609: LD_INT 2
44611: PUSH
44612: LD_INT 3
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: PUSH
44619: LD_INT 2
44621: NEG
44622: PUSH
44623: LD_INT 1
44625: PUSH
44626: EMPTY
44627: LIST
44628: LIST
44629: PUSH
44630: LD_INT 3
44632: NEG
44633: PUSH
44634: LD_INT 1
44636: NEG
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: PUSH
44642: EMPTY
44643: LIST
44644: LIST
44645: LIST
44646: LIST
44647: LIST
44648: LIST
44649: LIST
44650: LIST
44651: LIST
44652: LIST
44653: LIST
44654: LIST
44655: LIST
44656: LIST
44657: LIST
44658: LIST
44659: LIST
44660: LIST
44661: LIST
44662: LIST
44663: LIST
44664: LIST
44665: LIST
44666: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44667: LD_ADDR_VAR 0 33
44671: PUSH
44672: LD_INT 0
44674: PUSH
44675: LD_INT 0
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: PUSH
44682: LD_INT 0
44684: PUSH
44685: LD_INT 1
44687: NEG
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: PUSH
44693: LD_INT 1
44695: PUSH
44696: LD_INT 0
44698: PUSH
44699: EMPTY
44700: LIST
44701: LIST
44702: PUSH
44703: LD_INT 1
44705: PUSH
44706: LD_INT 1
44708: PUSH
44709: EMPTY
44710: LIST
44711: LIST
44712: PUSH
44713: LD_INT 0
44715: PUSH
44716: LD_INT 1
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: PUSH
44723: LD_INT 1
44725: NEG
44726: PUSH
44727: LD_INT 0
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: PUSH
44734: LD_INT 1
44736: NEG
44737: PUSH
44738: LD_INT 1
44740: NEG
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: LD_INT 1
44748: NEG
44749: PUSH
44750: LD_INT 2
44752: NEG
44753: PUSH
44754: EMPTY
44755: LIST
44756: LIST
44757: PUSH
44758: LD_INT 1
44760: PUSH
44761: LD_INT 1
44763: NEG
44764: PUSH
44765: EMPTY
44766: LIST
44767: LIST
44768: PUSH
44769: LD_INT 2
44771: PUSH
44772: LD_INT 0
44774: PUSH
44775: EMPTY
44776: LIST
44777: LIST
44778: PUSH
44779: LD_INT 2
44781: PUSH
44782: LD_INT 1
44784: PUSH
44785: EMPTY
44786: LIST
44787: LIST
44788: PUSH
44789: LD_INT 1
44791: PUSH
44792: LD_INT 2
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: PUSH
44799: LD_INT 0
44801: PUSH
44802: LD_INT 2
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: PUSH
44809: LD_INT 1
44811: NEG
44812: PUSH
44813: LD_INT 1
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: PUSH
44820: LD_INT 2
44822: NEG
44823: PUSH
44824: LD_INT 0
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: PUSH
44831: LD_INT 2
44833: NEG
44834: PUSH
44835: LD_INT 1
44837: NEG
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: LD_INT 2
44845: NEG
44846: PUSH
44847: LD_INT 2
44849: NEG
44850: PUSH
44851: EMPTY
44852: LIST
44853: LIST
44854: PUSH
44855: LD_INT 2
44857: NEG
44858: PUSH
44859: LD_INT 3
44861: NEG
44862: PUSH
44863: EMPTY
44864: LIST
44865: LIST
44866: PUSH
44867: LD_INT 2
44869: PUSH
44870: LD_INT 1
44872: NEG
44873: PUSH
44874: EMPTY
44875: LIST
44876: LIST
44877: PUSH
44878: LD_INT 3
44880: PUSH
44881: LD_INT 1
44883: PUSH
44884: EMPTY
44885: LIST
44886: LIST
44887: PUSH
44888: LD_INT 1
44890: PUSH
44891: LD_INT 3
44893: PUSH
44894: EMPTY
44895: LIST
44896: LIST
44897: PUSH
44898: LD_INT 1
44900: NEG
44901: PUSH
44902: LD_INT 2
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: PUSH
44909: LD_INT 3
44911: NEG
44912: PUSH
44913: LD_INT 2
44915: NEG
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: PUSH
44921: EMPTY
44922: LIST
44923: LIST
44924: LIST
44925: LIST
44926: LIST
44927: LIST
44928: LIST
44929: LIST
44930: LIST
44931: LIST
44932: LIST
44933: LIST
44934: LIST
44935: LIST
44936: LIST
44937: LIST
44938: LIST
44939: LIST
44940: LIST
44941: LIST
44942: LIST
44943: LIST
44944: LIST
44945: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44946: LD_ADDR_VAR 0 34
44950: PUSH
44951: LD_INT 0
44953: PUSH
44954: LD_INT 0
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: PUSH
44961: LD_INT 0
44963: PUSH
44964: LD_INT 1
44966: NEG
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: PUSH
44972: LD_INT 1
44974: PUSH
44975: LD_INT 0
44977: PUSH
44978: EMPTY
44979: LIST
44980: LIST
44981: PUSH
44982: LD_INT 1
44984: PUSH
44985: LD_INT 1
44987: PUSH
44988: EMPTY
44989: LIST
44990: LIST
44991: PUSH
44992: LD_INT 0
44994: PUSH
44995: LD_INT 1
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PUSH
45002: LD_INT 1
45004: NEG
45005: PUSH
45006: LD_INT 0
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: PUSH
45013: LD_INT 1
45015: NEG
45016: PUSH
45017: LD_INT 1
45019: NEG
45020: PUSH
45021: EMPTY
45022: LIST
45023: LIST
45024: PUSH
45025: LD_INT 1
45027: NEG
45028: PUSH
45029: LD_INT 2
45031: NEG
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: PUSH
45037: LD_INT 0
45039: PUSH
45040: LD_INT 2
45042: NEG
45043: PUSH
45044: EMPTY
45045: LIST
45046: LIST
45047: PUSH
45048: LD_INT 1
45050: PUSH
45051: LD_INT 1
45053: NEG
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: PUSH
45059: LD_INT 2
45061: PUSH
45062: LD_INT 1
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: PUSH
45069: LD_INT 2
45071: PUSH
45072: LD_INT 2
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: PUSH
45079: LD_INT 1
45081: PUSH
45082: LD_INT 2
45084: PUSH
45085: EMPTY
45086: LIST
45087: LIST
45088: PUSH
45089: LD_INT 1
45091: NEG
45092: PUSH
45093: LD_INT 1
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: PUSH
45100: LD_INT 2
45102: NEG
45103: PUSH
45104: LD_INT 0
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: PUSH
45111: LD_INT 2
45113: NEG
45114: PUSH
45115: LD_INT 1
45117: NEG
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: PUSH
45123: LD_INT 2
45125: NEG
45126: PUSH
45127: LD_INT 2
45129: NEG
45130: PUSH
45131: EMPTY
45132: LIST
45133: LIST
45134: PUSH
45135: LD_INT 1
45137: NEG
45138: PUSH
45139: LD_INT 3
45141: NEG
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: PUSH
45147: LD_INT 1
45149: PUSH
45150: LD_INT 2
45152: NEG
45153: PUSH
45154: EMPTY
45155: LIST
45156: LIST
45157: PUSH
45158: LD_INT 3
45160: PUSH
45161: LD_INT 2
45163: PUSH
45164: EMPTY
45165: LIST
45166: LIST
45167: PUSH
45168: LD_INT 2
45170: PUSH
45171: LD_INT 3
45173: PUSH
45174: EMPTY
45175: LIST
45176: LIST
45177: PUSH
45178: LD_INT 2
45180: NEG
45181: PUSH
45182: LD_INT 1
45184: PUSH
45185: EMPTY
45186: LIST
45187: LIST
45188: PUSH
45189: LD_INT 3
45191: NEG
45192: PUSH
45193: LD_INT 1
45195: NEG
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: PUSH
45201: EMPTY
45202: LIST
45203: LIST
45204: LIST
45205: LIST
45206: LIST
45207: LIST
45208: LIST
45209: LIST
45210: LIST
45211: LIST
45212: LIST
45213: LIST
45214: LIST
45215: LIST
45216: LIST
45217: LIST
45218: LIST
45219: LIST
45220: LIST
45221: LIST
45222: LIST
45223: LIST
45224: LIST
45225: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45226: LD_ADDR_VAR 0 35
45230: PUSH
45231: LD_INT 0
45233: PUSH
45234: LD_INT 0
45236: PUSH
45237: EMPTY
45238: LIST
45239: LIST
45240: PUSH
45241: LD_INT 0
45243: PUSH
45244: LD_INT 1
45246: NEG
45247: PUSH
45248: EMPTY
45249: LIST
45250: LIST
45251: PUSH
45252: LD_INT 1
45254: PUSH
45255: LD_INT 0
45257: PUSH
45258: EMPTY
45259: LIST
45260: LIST
45261: PUSH
45262: LD_INT 1
45264: PUSH
45265: LD_INT 1
45267: PUSH
45268: EMPTY
45269: LIST
45270: LIST
45271: PUSH
45272: LD_INT 0
45274: PUSH
45275: LD_INT 1
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: PUSH
45282: LD_INT 1
45284: NEG
45285: PUSH
45286: LD_INT 0
45288: PUSH
45289: EMPTY
45290: LIST
45291: LIST
45292: PUSH
45293: LD_INT 1
45295: NEG
45296: PUSH
45297: LD_INT 1
45299: NEG
45300: PUSH
45301: EMPTY
45302: LIST
45303: LIST
45304: PUSH
45305: LD_INT 2
45307: PUSH
45308: LD_INT 1
45310: PUSH
45311: EMPTY
45312: LIST
45313: LIST
45314: PUSH
45315: LD_INT 2
45317: NEG
45318: PUSH
45319: LD_INT 1
45321: NEG
45322: PUSH
45323: EMPTY
45324: LIST
45325: LIST
45326: PUSH
45327: EMPTY
45328: LIST
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: LIST
45337: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45338: LD_ADDR_VAR 0 36
45342: PUSH
45343: LD_INT 0
45345: PUSH
45346: LD_INT 0
45348: PUSH
45349: EMPTY
45350: LIST
45351: LIST
45352: PUSH
45353: LD_INT 0
45355: PUSH
45356: LD_INT 1
45358: NEG
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: PUSH
45364: LD_INT 1
45366: PUSH
45367: LD_INT 0
45369: PUSH
45370: EMPTY
45371: LIST
45372: LIST
45373: PUSH
45374: LD_INT 1
45376: PUSH
45377: LD_INT 1
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: PUSH
45384: LD_INT 0
45386: PUSH
45387: LD_INT 1
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: PUSH
45394: LD_INT 1
45396: NEG
45397: PUSH
45398: LD_INT 0
45400: PUSH
45401: EMPTY
45402: LIST
45403: LIST
45404: PUSH
45405: LD_INT 1
45407: NEG
45408: PUSH
45409: LD_INT 1
45411: NEG
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: PUSH
45417: LD_INT 1
45419: NEG
45420: PUSH
45421: LD_INT 2
45423: NEG
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: PUSH
45429: LD_INT 1
45431: PUSH
45432: LD_INT 2
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: PUSH
45439: EMPTY
45440: LIST
45441: LIST
45442: LIST
45443: LIST
45444: LIST
45445: LIST
45446: LIST
45447: LIST
45448: LIST
45449: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45450: LD_ADDR_VAR 0 37
45454: PUSH
45455: LD_INT 0
45457: PUSH
45458: LD_INT 0
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: LD_INT 0
45467: PUSH
45468: LD_INT 1
45470: NEG
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: PUSH
45476: LD_INT 1
45478: PUSH
45479: LD_INT 0
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: PUSH
45486: LD_INT 1
45488: PUSH
45489: LD_INT 1
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: PUSH
45496: LD_INT 0
45498: PUSH
45499: LD_INT 1
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: PUSH
45506: LD_INT 1
45508: NEG
45509: PUSH
45510: LD_INT 0
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PUSH
45517: LD_INT 1
45519: NEG
45520: PUSH
45521: LD_INT 1
45523: NEG
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: PUSH
45529: LD_INT 1
45531: PUSH
45532: LD_INT 1
45534: NEG
45535: PUSH
45536: EMPTY
45537: LIST
45538: LIST
45539: PUSH
45540: LD_INT 1
45542: NEG
45543: PUSH
45544: LD_INT 1
45546: PUSH
45547: EMPTY
45548: LIST
45549: LIST
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: LIST
45555: LIST
45556: LIST
45557: LIST
45558: LIST
45559: LIST
45560: LIST
45561: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45562: LD_ADDR_VAR 0 38
45566: PUSH
45567: LD_INT 0
45569: PUSH
45570: LD_INT 0
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: PUSH
45577: LD_INT 0
45579: PUSH
45580: LD_INT 1
45582: NEG
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: PUSH
45588: LD_INT 1
45590: PUSH
45591: LD_INT 0
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: PUSH
45598: LD_INT 1
45600: PUSH
45601: LD_INT 1
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: PUSH
45608: LD_INT 0
45610: PUSH
45611: LD_INT 1
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: PUSH
45618: LD_INT 1
45620: NEG
45621: PUSH
45622: LD_INT 0
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: PUSH
45629: LD_INT 1
45631: NEG
45632: PUSH
45633: LD_INT 1
45635: NEG
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: PUSH
45641: LD_INT 2
45643: PUSH
45644: LD_INT 1
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: PUSH
45651: LD_INT 2
45653: NEG
45654: PUSH
45655: LD_INT 1
45657: NEG
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: PUSH
45663: EMPTY
45664: LIST
45665: LIST
45666: LIST
45667: LIST
45668: LIST
45669: LIST
45670: LIST
45671: LIST
45672: LIST
45673: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45674: LD_ADDR_VAR 0 39
45678: PUSH
45679: LD_INT 0
45681: PUSH
45682: LD_INT 0
45684: PUSH
45685: EMPTY
45686: LIST
45687: LIST
45688: PUSH
45689: LD_INT 0
45691: PUSH
45692: LD_INT 1
45694: NEG
45695: PUSH
45696: EMPTY
45697: LIST
45698: LIST
45699: PUSH
45700: LD_INT 1
45702: PUSH
45703: LD_INT 0
45705: PUSH
45706: EMPTY
45707: LIST
45708: LIST
45709: PUSH
45710: LD_INT 1
45712: PUSH
45713: LD_INT 1
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: PUSH
45720: LD_INT 0
45722: PUSH
45723: LD_INT 1
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: PUSH
45730: LD_INT 1
45732: NEG
45733: PUSH
45734: LD_INT 0
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: PUSH
45741: LD_INT 1
45743: NEG
45744: PUSH
45745: LD_INT 1
45747: NEG
45748: PUSH
45749: EMPTY
45750: LIST
45751: LIST
45752: PUSH
45753: LD_INT 1
45755: NEG
45756: PUSH
45757: LD_INT 2
45759: NEG
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: LD_INT 1
45767: PUSH
45768: LD_INT 2
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: LIST
45779: LIST
45780: LIST
45781: LIST
45782: LIST
45783: LIST
45784: LIST
45785: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45786: LD_ADDR_VAR 0 40
45790: PUSH
45791: LD_INT 0
45793: PUSH
45794: LD_INT 0
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: PUSH
45801: LD_INT 0
45803: PUSH
45804: LD_INT 1
45806: NEG
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: PUSH
45812: LD_INT 1
45814: PUSH
45815: LD_INT 0
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: PUSH
45822: LD_INT 1
45824: PUSH
45825: LD_INT 1
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: PUSH
45832: LD_INT 0
45834: PUSH
45835: LD_INT 1
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: PUSH
45842: LD_INT 1
45844: NEG
45845: PUSH
45846: LD_INT 0
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: PUSH
45853: LD_INT 1
45855: NEG
45856: PUSH
45857: LD_INT 1
45859: NEG
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: PUSH
45865: LD_INT 1
45867: PUSH
45868: LD_INT 1
45870: NEG
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: PUSH
45876: LD_INT 1
45878: NEG
45879: PUSH
45880: LD_INT 1
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: LIST
45893: LIST
45894: LIST
45895: LIST
45896: LIST
45897: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45898: LD_ADDR_VAR 0 41
45902: PUSH
45903: LD_INT 0
45905: PUSH
45906: LD_INT 0
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: PUSH
45913: LD_INT 0
45915: PUSH
45916: LD_INT 1
45918: NEG
45919: PUSH
45920: EMPTY
45921: LIST
45922: LIST
45923: PUSH
45924: LD_INT 1
45926: PUSH
45927: LD_INT 0
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: PUSH
45934: LD_INT 1
45936: PUSH
45937: LD_INT 1
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: PUSH
45944: LD_INT 0
45946: PUSH
45947: LD_INT 1
45949: PUSH
45950: EMPTY
45951: LIST
45952: LIST
45953: PUSH
45954: LD_INT 1
45956: NEG
45957: PUSH
45958: LD_INT 0
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: PUSH
45965: LD_INT 1
45967: NEG
45968: PUSH
45969: LD_INT 1
45971: NEG
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: PUSH
45977: LD_INT 1
45979: NEG
45980: PUSH
45981: LD_INT 2
45983: NEG
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: LD_INT 1
45991: PUSH
45992: LD_INT 1
45994: NEG
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: PUSH
46000: LD_INT 2
46002: PUSH
46003: LD_INT 0
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: PUSH
46010: LD_INT 2
46012: PUSH
46013: LD_INT 1
46015: PUSH
46016: EMPTY
46017: LIST
46018: LIST
46019: PUSH
46020: LD_INT 2
46022: PUSH
46023: LD_INT 2
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: PUSH
46030: LD_INT 1
46032: PUSH
46033: LD_INT 2
46035: PUSH
46036: EMPTY
46037: LIST
46038: LIST
46039: PUSH
46040: LD_INT 1
46042: NEG
46043: PUSH
46044: LD_INT 1
46046: PUSH
46047: EMPTY
46048: LIST
46049: LIST
46050: PUSH
46051: LD_INT 2
46053: NEG
46054: PUSH
46055: LD_INT 0
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: LD_INT 2
46064: NEG
46065: PUSH
46066: LD_INT 1
46068: NEG
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: LD_INT 2
46076: NEG
46077: PUSH
46078: LD_INT 2
46080: NEG
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 2
46088: NEG
46089: PUSH
46090: LD_INT 3
46092: NEG
46093: PUSH
46094: EMPTY
46095: LIST
46096: LIST
46097: PUSH
46098: LD_INT 2
46100: PUSH
46101: LD_INT 1
46103: NEG
46104: PUSH
46105: EMPTY
46106: LIST
46107: LIST
46108: PUSH
46109: LD_INT 3
46111: PUSH
46112: LD_INT 0
46114: PUSH
46115: EMPTY
46116: LIST
46117: LIST
46118: PUSH
46119: LD_INT 3
46121: PUSH
46122: LD_INT 1
46124: PUSH
46125: EMPTY
46126: LIST
46127: LIST
46128: PUSH
46129: LD_INT 3
46131: PUSH
46132: LD_INT 2
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: PUSH
46139: LD_INT 3
46141: PUSH
46142: LD_INT 3
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: PUSH
46149: LD_INT 2
46151: PUSH
46152: LD_INT 3
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: PUSH
46159: LD_INT 2
46161: NEG
46162: PUSH
46163: LD_INT 1
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: PUSH
46170: LD_INT 3
46172: NEG
46173: PUSH
46174: LD_INT 0
46176: PUSH
46177: EMPTY
46178: LIST
46179: LIST
46180: PUSH
46181: LD_INT 3
46183: NEG
46184: PUSH
46185: LD_INT 1
46187: NEG
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: PUSH
46193: LD_INT 3
46195: NEG
46196: PUSH
46197: LD_INT 2
46199: NEG
46200: PUSH
46201: EMPTY
46202: LIST
46203: LIST
46204: PUSH
46205: LD_INT 3
46207: NEG
46208: PUSH
46209: LD_INT 3
46211: NEG
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: PUSH
46217: EMPTY
46218: LIST
46219: LIST
46220: LIST
46221: LIST
46222: LIST
46223: LIST
46224: LIST
46225: LIST
46226: LIST
46227: LIST
46228: LIST
46229: LIST
46230: LIST
46231: LIST
46232: LIST
46233: LIST
46234: LIST
46235: LIST
46236: LIST
46237: LIST
46238: LIST
46239: LIST
46240: LIST
46241: LIST
46242: LIST
46243: LIST
46244: LIST
46245: LIST
46246: LIST
46247: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46248: LD_ADDR_VAR 0 42
46252: PUSH
46253: LD_INT 0
46255: PUSH
46256: LD_INT 0
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: PUSH
46263: LD_INT 0
46265: PUSH
46266: LD_INT 1
46268: NEG
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: LD_INT 1
46276: PUSH
46277: LD_INT 0
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: PUSH
46284: LD_INT 1
46286: PUSH
46287: LD_INT 1
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: PUSH
46294: LD_INT 0
46296: PUSH
46297: LD_INT 1
46299: PUSH
46300: EMPTY
46301: LIST
46302: LIST
46303: PUSH
46304: LD_INT 1
46306: NEG
46307: PUSH
46308: LD_INT 0
46310: PUSH
46311: EMPTY
46312: LIST
46313: LIST
46314: PUSH
46315: LD_INT 1
46317: NEG
46318: PUSH
46319: LD_INT 1
46321: NEG
46322: PUSH
46323: EMPTY
46324: LIST
46325: LIST
46326: PUSH
46327: LD_INT 1
46329: NEG
46330: PUSH
46331: LD_INT 2
46333: NEG
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: PUSH
46339: LD_INT 0
46341: PUSH
46342: LD_INT 2
46344: NEG
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: PUSH
46350: LD_INT 1
46352: PUSH
46353: LD_INT 1
46355: NEG
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: PUSH
46361: LD_INT 2
46363: PUSH
46364: LD_INT 1
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: PUSH
46371: LD_INT 2
46373: PUSH
46374: LD_INT 2
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: LD_INT 1
46383: PUSH
46384: LD_INT 2
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: LD_INT 0
46393: PUSH
46394: LD_INT 2
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: PUSH
46401: LD_INT 1
46403: NEG
46404: PUSH
46405: LD_INT 1
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: PUSH
46412: LD_INT 2
46414: NEG
46415: PUSH
46416: LD_INT 1
46418: NEG
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: LD_INT 2
46426: NEG
46427: PUSH
46428: LD_INT 2
46430: NEG
46431: PUSH
46432: EMPTY
46433: LIST
46434: LIST
46435: PUSH
46436: LD_INT 2
46438: NEG
46439: PUSH
46440: LD_INT 3
46442: NEG
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: PUSH
46448: LD_INT 1
46450: NEG
46451: PUSH
46452: LD_INT 3
46454: NEG
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: PUSH
46460: LD_INT 0
46462: PUSH
46463: LD_INT 3
46465: NEG
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: PUSH
46471: LD_INT 1
46473: PUSH
46474: LD_INT 2
46476: NEG
46477: PUSH
46478: EMPTY
46479: LIST
46480: LIST
46481: PUSH
46482: LD_INT 3
46484: PUSH
46485: LD_INT 2
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: PUSH
46492: LD_INT 3
46494: PUSH
46495: LD_INT 3
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: PUSH
46502: LD_INT 2
46504: PUSH
46505: LD_INT 3
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: PUSH
46512: LD_INT 1
46514: PUSH
46515: LD_INT 3
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 0
46524: PUSH
46525: LD_INT 3
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 1
46534: NEG
46535: PUSH
46536: LD_INT 2
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 3
46545: NEG
46546: PUSH
46547: LD_INT 2
46549: NEG
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: PUSH
46555: LD_INT 3
46557: NEG
46558: PUSH
46559: LD_INT 3
46561: NEG
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: LIST
46571: LIST
46572: LIST
46573: LIST
46574: LIST
46575: LIST
46576: LIST
46577: LIST
46578: LIST
46579: LIST
46580: LIST
46581: LIST
46582: LIST
46583: LIST
46584: LIST
46585: LIST
46586: LIST
46587: LIST
46588: LIST
46589: LIST
46590: LIST
46591: LIST
46592: LIST
46593: LIST
46594: LIST
46595: LIST
46596: LIST
46597: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46598: LD_ADDR_VAR 0 43
46602: PUSH
46603: LD_INT 0
46605: PUSH
46606: LD_INT 0
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: LD_INT 0
46615: PUSH
46616: LD_INT 1
46618: NEG
46619: PUSH
46620: EMPTY
46621: LIST
46622: LIST
46623: PUSH
46624: LD_INT 1
46626: PUSH
46627: LD_INT 0
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: LD_INT 1
46636: PUSH
46637: LD_INT 1
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: PUSH
46644: LD_INT 0
46646: PUSH
46647: LD_INT 1
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 1
46656: NEG
46657: PUSH
46658: LD_INT 0
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: PUSH
46665: LD_INT 1
46667: NEG
46668: PUSH
46669: LD_INT 1
46671: NEG
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: LD_INT 1
46679: NEG
46680: PUSH
46681: LD_INT 2
46683: NEG
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: PUSH
46689: LD_INT 0
46691: PUSH
46692: LD_INT 2
46694: NEG
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: PUSH
46700: LD_INT 1
46702: PUSH
46703: LD_INT 1
46705: NEG
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: LD_INT 2
46713: PUSH
46714: LD_INT 0
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: PUSH
46721: LD_INT 2
46723: PUSH
46724: LD_INT 1
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: PUSH
46731: LD_INT 1
46733: PUSH
46734: LD_INT 2
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: LD_INT 0
46743: PUSH
46744: LD_INT 2
46746: PUSH
46747: EMPTY
46748: LIST
46749: LIST
46750: PUSH
46751: LD_INT 1
46753: NEG
46754: PUSH
46755: LD_INT 1
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: PUSH
46762: LD_INT 2
46764: NEG
46765: PUSH
46766: LD_INT 0
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: PUSH
46773: LD_INT 2
46775: NEG
46776: PUSH
46777: LD_INT 1
46779: NEG
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: PUSH
46785: LD_INT 1
46787: NEG
46788: PUSH
46789: LD_INT 3
46791: NEG
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: LD_INT 0
46799: PUSH
46800: LD_INT 3
46802: NEG
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: LD_INT 1
46810: PUSH
46811: LD_INT 2
46813: NEG
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: LD_INT 2
46821: PUSH
46822: LD_INT 1
46824: NEG
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: LD_INT 3
46832: PUSH
46833: LD_INT 0
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: PUSH
46840: LD_INT 3
46842: PUSH
46843: LD_INT 1
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PUSH
46850: LD_INT 1
46852: PUSH
46853: LD_INT 3
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 0
46862: PUSH
46863: LD_INT 3
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: LD_INT 1
46872: NEG
46873: PUSH
46874: LD_INT 2
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PUSH
46881: LD_INT 2
46883: NEG
46884: PUSH
46885: LD_INT 1
46887: PUSH
46888: EMPTY
46889: LIST
46890: LIST
46891: PUSH
46892: LD_INT 3
46894: NEG
46895: PUSH
46896: LD_INT 0
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: PUSH
46903: LD_INT 3
46905: NEG
46906: PUSH
46907: LD_INT 1
46909: NEG
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: LIST
46919: LIST
46920: LIST
46921: LIST
46922: LIST
46923: LIST
46924: LIST
46925: LIST
46926: LIST
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: LIST
46937: LIST
46938: LIST
46939: LIST
46940: LIST
46941: LIST
46942: LIST
46943: LIST
46944: LIST
46945: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46946: LD_ADDR_VAR 0 44
46950: PUSH
46951: LD_INT 0
46953: PUSH
46954: LD_INT 0
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 0
46963: PUSH
46964: LD_INT 1
46966: NEG
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: PUSH
46972: LD_INT 1
46974: PUSH
46975: LD_INT 0
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: LD_INT 1
46984: PUSH
46985: LD_INT 1
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: PUSH
46992: LD_INT 0
46994: PUSH
46995: LD_INT 1
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: LD_INT 1
47004: NEG
47005: PUSH
47006: LD_INT 0
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: PUSH
47013: LD_INT 1
47015: NEG
47016: PUSH
47017: LD_INT 1
47019: NEG
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PUSH
47025: LD_INT 1
47027: NEG
47028: PUSH
47029: LD_INT 2
47031: NEG
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: PUSH
47037: LD_INT 1
47039: PUSH
47040: LD_INT 1
47042: NEG
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: PUSH
47048: LD_INT 2
47050: PUSH
47051: LD_INT 0
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 2
47060: PUSH
47061: LD_INT 1
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PUSH
47068: LD_INT 2
47070: PUSH
47071: LD_INT 2
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: LD_INT 1
47080: PUSH
47081: LD_INT 2
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: PUSH
47088: LD_INT 1
47090: NEG
47091: PUSH
47092: LD_INT 1
47094: PUSH
47095: EMPTY
47096: LIST
47097: LIST
47098: PUSH
47099: LD_INT 2
47101: NEG
47102: PUSH
47103: LD_INT 0
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: LD_INT 2
47112: NEG
47113: PUSH
47114: LD_INT 1
47116: NEG
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 2
47124: NEG
47125: PUSH
47126: LD_INT 2
47128: NEG
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 2
47136: NEG
47137: PUSH
47138: LD_INT 3
47140: NEG
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: PUSH
47146: LD_INT 2
47148: PUSH
47149: LD_INT 1
47151: NEG
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: LD_INT 3
47159: PUSH
47160: LD_INT 0
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: PUSH
47167: LD_INT 3
47169: PUSH
47170: LD_INT 1
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: PUSH
47177: LD_INT 3
47179: PUSH
47180: LD_INT 2
47182: PUSH
47183: EMPTY
47184: LIST
47185: LIST
47186: PUSH
47187: LD_INT 3
47189: PUSH
47190: LD_INT 3
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 2
47199: PUSH
47200: LD_INT 3
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: PUSH
47207: LD_INT 2
47209: NEG
47210: PUSH
47211: LD_INT 1
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: LD_INT 3
47220: NEG
47221: PUSH
47222: LD_INT 0
47224: PUSH
47225: EMPTY
47226: LIST
47227: LIST
47228: PUSH
47229: LD_INT 3
47231: NEG
47232: PUSH
47233: LD_INT 1
47235: NEG
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: LD_INT 3
47243: NEG
47244: PUSH
47245: LD_INT 2
47247: NEG
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: PUSH
47253: LD_INT 3
47255: NEG
47256: PUSH
47257: LD_INT 3
47259: NEG
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: EMPTY
47266: LIST
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: LIST
47282: LIST
47283: LIST
47284: LIST
47285: LIST
47286: LIST
47287: LIST
47288: LIST
47289: LIST
47290: LIST
47291: LIST
47292: LIST
47293: LIST
47294: LIST
47295: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47296: LD_ADDR_VAR 0 45
47300: PUSH
47301: LD_INT 0
47303: PUSH
47304: LD_INT 0
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: PUSH
47311: LD_INT 0
47313: PUSH
47314: LD_INT 1
47316: NEG
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: PUSH
47322: LD_INT 1
47324: PUSH
47325: LD_INT 0
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: PUSH
47332: LD_INT 1
47334: PUSH
47335: LD_INT 1
47337: PUSH
47338: EMPTY
47339: LIST
47340: LIST
47341: PUSH
47342: LD_INT 0
47344: PUSH
47345: LD_INT 1
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: PUSH
47352: LD_INT 1
47354: NEG
47355: PUSH
47356: LD_INT 0
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 1
47365: NEG
47366: PUSH
47367: LD_INT 1
47369: NEG
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: PUSH
47375: LD_INT 1
47377: NEG
47378: PUSH
47379: LD_INT 2
47381: NEG
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: PUSH
47387: LD_INT 0
47389: PUSH
47390: LD_INT 2
47392: NEG
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: PUSH
47398: LD_INT 1
47400: PUSH
47401: LD_INT 1
47403: NEG
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: PUSH
47409: LD_INT 2
47411: PUSH
47412: LD_INT 1
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: PUSH
47419: LD_INT 2
47421: PUSH
47422: LD_INT 2
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: PUSH
47429: LD_INT 1
47431: PUSH
47432: LD_INT 2
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: PUSH
47439: LD_INT 0
47441: PUSH
47442: LD_INT 2
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: PUSH
47449: LD_INT 1
47451: NEG
47452: PUSH
47453: LD_INT 1
47455: PUSH
47456: EMPTY
47457: LIST
47458: LIST
47459: PUSH
47460: LD_INT 2
47462: NEG
47463: PUSH
47464: LD_INT 1
47466: NEG
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PUSH
47472: LD_INT 2
47474: NEG
47475: PUSH
47476: LD_INT 2
47478: NEG
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: PUSH
47484: LD_INT 2
47486: NEG
47487: PUSH
47488: LD_INT 3
47490: NEG
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: LD_INT 1
47498: NEG
47499: PUSH
47500: LD_INT 3
47502: NEG
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 0
47510: PUSH
47511: LD_INT 3
47513: NEG
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: LD_INT 1
47521: PUSH
47522: LD_INT 2
47524: NEG
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: PUSH
47530: LD_INT 3
47532: PUSH
47533: LD_INT 2
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: LD_INT 3
47542: PUSH
47543: LD_INT 3
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: PUSH
47550: LD_INT 2
47552: PUSH
47553: LD_INT 3
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: PUSH
47560: LD_INT 1
47562: PUSH
47563: LD_INT 3
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 0
47572: PUSH
47573: LD_INT 3
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: PUSH
47580: LD_INT 1
47582: NEG
47583: PUSH
47584: LD_INT 2
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: PUSH
47591: LD_INT 3
47593: NEG
47594: PUSH
47595: LD_INT 2
47597: NEG
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: PUSH
47603: LD_INT 3
47605: NEG
47606: PUSH
47607: LD_INT 3
47609: NEG
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: LIST
47633: LIST
47634: LIST
47635: LIST
47636: LIST
47637: LIST
47638: LIST
47639: LIST
47640: LIST
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47646: LD_ADDR_VAR 0 46
47650: PUSH
47651: LD_INT 0
47653: PUSH
47654: LD_INT 0
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 0
47663: PUSH
47664: LD_INT 1
47666: NEG
47667: PUSH
47668: EMPTY
47669: LIST
47670: LIST
47671: PUSH
47672: LD_INT 1
47674: PUSH
47675: LD_INT 0
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: PUSH
47682: LD_INT 1
47684: PUSH
47685: LD_INT 1
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: PUSH
47692: LD_INT 0
47694: PUSH
47695: LD_INT 1
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: PUSH
47702: LD_INT 1
47704: NEG
47705: PUSH
47706: LD_INT 0
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: PUSH
47713: LD_INT 1
47715: NEG
47716: PUSH
47717: LD_INT 1
47719: NEG
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: LD_INT 1
47727: NEG
47728: PUSH
47729: LD_INT 2
47731: NEG
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: PUSH
47737: LD_INT 0
47739: PUSH
47740: LD_INT 2
47742: NEG
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: LD_INT 1
47750: PUSH
47751: LD_INT 1
47753: NEG
47754: PUSH
47755: EMPTY
47756: LIST
47757: LIST
47758: PUSH
47759: LD_INT 2
47761: PUSH
47762: LD_INT 0
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: PUSH
47769: LD_INT 2
47771: PUSH
47772: LD_INT 1
47774: PUSH
47775: EMPTY
47776: LIST
47777: LIST
47778: PUSH
47779: LD_INT 1
47781: PUSH
47782: LD_INT 2
47784: PUSH
47785: EMPTY
47786: LIST
47787: LIST
47788: PUSH
47789: LD_INT 0
47791: PUSH
47792: LD_INT 2
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: PUSH
47799: LD_INT 1
47801: NEG
47802: PUSH
47803: LD_INT 1
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: PUSH
47810: LD_INT 2
47812: NEG
47813: PUSH
47814: LD_INT 0
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: PUSH
47821: LD_INT 2
47823: NEG
47824: PUSH
47825: LD_INT 1
47827: NEG
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: LD_INT 1
47835: NEG
47836: PUSH
47837: LD_INT 3
47839: NEG
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: PUSH
47845: LD_INT 0
47847: PUSH
47848: LD_INT 3
47850: NEG
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: PUSH
47856: LD_INT 1
47858: PUSH
47859: LD_INT 2
47861: NEG
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: PUSH
47867: LD_INT 2
47869: PUSH
47870: LD_INT 1
47872: NEG
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: PUSH
47878: LD_INT 3
47880: PUSH
47881: LD_INT 0
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PUSH
47888: LD_INT 3
47890: PUSH
47891: LD_INT 1
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: LD_INT 1
47900: PUSH
47901: LD_INT 3
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: LD_INT 0
47910: PUSH
47911: LD_INT 3
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: LD_INT 1
47920: NEG
47921: PUSH
47922: LD_INT 2
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: LD_INT 2
47931: NEG
47932: PUSH
47933: LD_INT 1
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PUSH
47940: LD_INT 3
47942: NEG
47943: PUSH
47944: LD_INT 0
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 3
47953: NEG
47954: PUSH
47955: LD_INT 1
47957: NEG
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: LIST
47967: LIST
47968: LIST
47969: LIST
47970: LIST
47971: LIST
47972: LIST
47973: LIST
47974: LIST
47975: LIST
47976: LIST
47977: LIST
47978: LIST
47979: LIST
47980: LIST
47981: LIST
47982: LIST
47983: LIST
47984: LIST
47985: LIST
47986: LIST
47987: LIST
47988: LIST
47989: LIST
47990: LIST
47991: LIST
47992: LIST
47993: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47994: LD_ADDR_VAR 0 47
47998: PUSH
47999: LD_INT 0
48001: PUSH
48002: LD_INT 0
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: LD_INT 0
48011: PUSH
48012: LD_INT 1
48014: NEG
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: PUSH
48020: LD_INT 1
48022: PUSH
48023: LD_INT 0
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: LD_INT 1
48032: PUSH
48033: LD_INT 1
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: PUSH
48040: LD_INT 0
48042: PUSH
48043: LD_INT 1
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 1
48052: NEG
48053: PUSH
48054: LD_INT 0
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PUSH
48061: LD_INT 1
48063: NEG
48064: PUSH
48065: LD_INT 1
48067: NEG
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 1
48075: NEG
48076: PUSH
48077: LD_INT 2
48079: NEG
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: LD_INT 0
48087: PUSH
48088: LD_INT 2
48090: NEG
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: PUSH
48096: LD_INT 1
48098: PUSH
48099: LD_INT 1
48101: NEG
48102: PUSH
48103: EMPTY
48104: LIST
48105: LIST
48106: PUSH
48107: LD_INT 2
48109: NEG
48110: PUSH
48111: LD_INT 1
48113: NEG
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: PUSH
48119: LD_INT 2
48121: NEG
48122: PUSH
48123: LD_INT 2
48125: NEG
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: PUSH
48131: EMPTY
48132: LIST
48133: LIST
48134: LIST
48135: LIST
48136: LIST
48137: LIST
48138: LIST
48139: LIST
48140: LIST
48141: LIST
48142: LIST
48143: LIST
48144: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48145: LD_ADDR_VAR 0 48
48149: PUSH
48150: LD_INT 0
48152: PUSH
48153: LD_INT 0
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 0
48162: PUSH
48163: LD_INT 1
48165: NEG
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: PUSH
48171: LD_INT 1
48173: PUSH
48174: LD_INT 0
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: PUSH
48181: LD_INT 1
48183: PUSH
48184: LD_INT 1
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: PUSH
48191: LD_INT 0
48193: PUSH
48194: LD_INT 1
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: PUSH
48201: LD_INT 1
48203: NEG
48204: PUSH
48205: LD_INT 0
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: PUSH
48212: LD_INT 1
48214: NEG
48215: PUSH
48216: LD_INT 1
48218: NEG
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: PUSH
48224: LD_INT 1
48226: NEG
48227: PUSH
48228: LD_INT 2
48230: NEG
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: PUSH
48236: LD_INT 0
48238: PUSH
48239: LD_INT 2
48241: NEG
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PUSH
48247: LD_INT 1
48249: PUSH
48250: LD_INT 1
48252: NEG
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: LD_INT 2
48260: PUSH
48261: LD_INT 0
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: LD_INT 2
48270: PUSH
48271: LD_INT 1
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: LIST
48282: LIST
48283: LIST
48284: LIST
48285: LIST
48286: LIST
48287: LIST
48288: LIST
48289: LIST
48290: LIST
48291: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48292: LD_ADDR_VAR 0 49
48296: PUSH
48297: LD_INT 0
48299: PUSH
48300: LD_INT 0
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: PUSH
48307: LD_INT 0
48309: PUSH
48310: LD_INT 1
48312: NEG
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: PUSH
48318: LD_INT 1
48320: PUSH
48321: LD_INT 0
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: PUSH
48328: LD_INT 1
48330: PUSH
48331: LD_INT 1
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: PUSH
48338: LD_INT 0
48340: PUSH
48341: LD_INT 1
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: LD_INT 1
48350: NEG
48351: PUSH
48352: LD_INT 0
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: PUSH
48359: LD_INT 1
48361: NEG
48362: PUSH
48363: LD_INT 1
48365: NEG
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: LD_INT 1
48373: PUSH
48374: LD_INT 1
48376: NEG
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: PUSH
48382: LD_INT 2
48384: PUSH
48385: LD_INT 0
48387: PUSH
48388: EMPTY
48389: LIST
48390: LIST
48391: PUSH
48392: LD_INT 2
48394: PUSH
48395: LD_INT 1
48397: PUSH
48398: EMPTY
48399: LIST
48400: LIST
48401: PUSH
48402: LD_INT 2
48404: PUSH
48405: LD_INT 2
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: PUSH
48412: LD_INT 1
48414: PUSH
48415: LD_INT 2
48417: PUSH
48418: EMPTY
48419: LIST
48420: LIST
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: LIST
48426: LIST
48427: LIST
48428: LIST
48429: LIST
48430: LIST
48431: LIST
48432: LIST
48433: LIST
48434: LIST
48435: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48436: LD_ADDR_VAR 0 50
48440: PUSH
48441: LD_INT 0
48443: PUSH
48444: LD_INT 0
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: LD_INT 0
48453: PUSH
48454: LD_INT 1
48456: NEG
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: PUSH
48462: LD_INT 1
48464: PUSH
48465: LD_INT 0
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: PUSH
48472: LD_INT 1
48474: PUSH
48475: LD_INT 1
48477: PUSH
48478: EMPTY
48479: LIST
48480: LIST
48481: PUSH
48482: LD_INT 0
48484: PUSH
48485: LD_INT 1
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: PUSH
48492: LD_INT 1
48494: NEG
48495: PUSH
48496: LD_INT 0
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: PUSH
48503: LD_INT 1
48505: NEG
48506: PUSH
48507: LD_INT 1
48509: NEG
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: PUSH
48515: LD_INT 2
48517: PUSH
48518: LD_INT 1
48520: PUSH
48521: EMPTY
48522: LIST
48523: LIST
48524: PUSH
48525: LD_INT 2
48527: PUSH
48528: LD_INT 2
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: PUSH
48535: LD_INT 1
48537: PUSH
48538: LD_INT 2
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: PUSH
48545: LD_INT 0
48547: PUSH
48548: LD_INT 2
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: PUSH
48555: LD_INT 1
48557: NEG
48558: PUSH
48559: LD_INT 1
48561: PUSH
48562: EMPTY
48563: LIST
48564: LIST
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: LIST
48570: LIST
48571: LIST
48572: LIST
48573: LIST
48574: LIST
48575: LIST
48576: LIST
48577: LIST
48578: LIST
48579: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48580: LD_ADDR_VAR 0 51
48584: PUSH
48585: LD_INT 0
48587: PUSH
48588: LD_INT 0
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: LD_INT 0
48597: PUSH
48598: LD_INT 1
48600: NEG
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: PUSH
48606: LD_INT 1
48608: PUSH
48609: LD_INT 0
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: LD_INT 1
48618: PUSH
48619: LD_INT 1
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: PUSH
48626: LD_INT 0
48628: PUSH
48629: LD_INT 1
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: LD_INT 1
48638: NEG
48639: PUSH
48640: LD_INT 0
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 1
48649: NEG
48650: PUSH
48651: LD_INT 1
48653: NEG
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: LD_INT 1
48661: PUSH
48662: LD_INT 2
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: LD_INT 0
48671: PUSH
48672: LD_INT 2
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: PUSH
48679: LD_INT 1
48681: NEG
48682: PUSH
48683: LD_INT 1
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: PUSH
48690: LD_INT 2
48692: NEG
48693: PUSH
48694: LD_INT 0
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: PUSH
48701: LD_INT 2
48703: NEG
48704: PUSH
48705: LD_INT 1
48707: NEG
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: LIST
48717: LIST
48718: LIST
48719: LIST
48720: LIST
48721: LIST
48722: LIST
48723: LIST
48724: LIST
48725: LIST
48726: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48727: LD_ADDR_VAR 0 52
48731: PUSH
48732: LD_INT 0
48734: PUSH
48735: LD_INT 0
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 0
48744: PUSH
48745: LD_INT 1
48747: NEG
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: LD_INT 1
48755: PUSH
48756: LD_INT 0
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 1
48765: PUSH
48766: LD_INT 1
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: LD_INT 0
48775: PUSH
48776: LD_INT 1
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: PUSH
48783: LD_INT 1
48785: NEG
48786: PUSH
48787: LD_INT 0
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: PUSH
48794: LD_INT 1
48796: NEG
48797: PUSH
48798: LD_INT 1
48800: NEG
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: PUSH
48806: LD_INT 1
48808: NEG
48809: PUSH
48810: LD_INT 2
48812: NEG
48813: PUSH
48814: EMPTY
48815: LIST
48816: LIST
48817: PUSH
48818: LD_INT 1
48820: NEG
48821: PUSH
48822: LD_INT 1
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: LD_INT 2
48831: NEG
48832: PUSH
48833: LD_INT 0
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: LD_INT 2
48842: NEG
48843: PUSH
48844: LD_INT 1
48846: NEG
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: PUSH
48852: LD_INT 2
48854: NEG
48855: PUSH
48856: LD_INT 2
48858: NEG
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: EMPTY
48865: LIST
48866: LIST
48867: LIST
48868: LIST
48869: LIST
48870: LIST
48871: LIST
48872: LIST
48873: LIST
48874: LIST
48875: LIST
48876: LIST
48877: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48878: LD_ADDR_VAR 0 53
48882: PUSH
48883: LD_INT 0
48885: PUSH
48886: LD_INT 0
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: PUSH
48893: LD_INT 0
48895: PUSH
48896: LD_INT 1
48898: NEG
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: PUSH
48904: LD_INT 1
48906: PUSH
48907: LD_INT 0
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: PUSH
48914: LD_INT 1
48916: PUSH
48917: LD_INT 1
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: PUSH
48924: LD_INT 0
48926: PUSH
48927: LD_INT 1
48929: PUSH
48930: EMPTY
48931: LIST
48932: LIST
48933: PUSH
48934: LD_INT 1
48936: NEG
48937: PUSH
48938: LD_INT 0
48940: PUSH
48941: EMPTY
48942: LIST
48943: LIST
48944: PUSH
48945: LD_INT 1
48947: NEG
48948: PUSH
48949: LD_INT 1
48951: NEG
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: LD_INT 1
48959: NEG
48960: PUSH
48961: LD_INT 2
48963: NEG
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: LD_INT 0
48971: PUSH
48972: LD_INT 2
48974: NEG
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: LD_INT 1
48982: PUSH
48983: LD_INT 1
48985: NEG
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: PUSH
48991: LD_INT 2
48993: PUSH
48994: LD_INT 0
48996: PUSH
48997: EMPTY
48998: LIST
48999: LIST
49000: PUSH
49001: LD_INT 2
49003: PUSH
49004: LD_INT 1
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: LD_INT 2
49013: PUSH
49014: LD_INT 2
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PUSH
49021: LD_INT 1
49023: PUSH
49024: LD_INT 2
49026: PUSH
49027: EMPTY
49028: LIST
49029: LIST
49030: PUSH
49031: LD_INT 0
49033: PUSH
49034: LD_INT 2
49036: PUSH
49037: EMPTY
49038: LIST
49039: LIST
49040: PUSH
49041: LD_INT 1
49043: NEG
49044: PUSH
49045: LD_INT 1
49047: PUSH
49048: EMPTY
49049: LIST
49050: LIST
49051: PUSH
49052: LD_INT 2
49054: NEG
49055: PUSH
49056: LD_INT 0
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: LD_INT 2
49065: NEG
49066: PUSH
49067: LD_INT 1
49069: NEG
49070: PUSH
49071: EMPTY
49072: LIST
49073: LIST
49074: PUSH
49075: LD_INT 2
49077: NEG
49078: PUSH
49079: LD_INT 2
49081: NEG
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: LIST
49091: LIST
49092: LIST
49093: LIST
49094: LIST
49095: LIST
49096: LIST
49097: LIST
49098: LIST
49099: LIST
49100: LIST
49101: LIST
49102: LIST
49103: LIST
49104: LIST
49105: LIST
49106: LIST
49107: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49108: LD_ADDR_VAR 0 54
49112: PUSH
49113: LD_INT 0
49115: PUSH
49116: LD_INT 0
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 0
49125: PUSH
49126: LD_INT 1
49128: NEG
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: LD_INT 1
49136: PUSH
49137: LD_INT 0
49139: PUSH
49140: EMPTY
49141: LIST
49142: LIST
49143: PUSH
49144: LD_INT 1
49146: PUSH
49147: LD_INT 1
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: PUSH
49154: LD_INT 0
49156: PUSH
49157: LD_INT 1
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: PUSH
49164: LD_INT 1
49166: NEG
49167: PUSH
49168: LD_INT 0
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: PUSH
49175: LD_INT 1
49177: NEG
49178: PUSH
49179: LD_INT 1
49181: NEG
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 1
49189: NEG
49190: PUSH
49191: LD_INT 2
49193: NEG
49194: PUSH
49195: EMPTY
49196: LIST
49197: LIST
49198: PUSH
49199: LD_INT 0
49201: PUSH
49202: LD_INT 2
49204: NEG
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: PUSH
49210: LD_INT 1
49212: PUSH
49213: LD_INT 1
49215: NEG
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: PUSH
49221: LD_INT 2
49223: PUSH
49224: LD_INT 0
49226: PUSH
49227: EMPTY
49228: LIST
49229: LIST
49230: PUSH
49231: LD_INT 2
49233: PUSH
49234: LD_INT 1
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 2
49243: PUSH
49244: LD_INT 2
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: PUSH
49251: LD_INT 1
49253: PUSH
49254: LD_INT 2
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: LD_INT 0
49263: PUSH
49264: LD_INT 2
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: PUSH
49271: LD_INT 1
49273: NEG
49274: PUSH
49275: LD_INT 1
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 2
49284: NEG
49285: PUSH
49286: LD_INT 0
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 2
49295: NEG
49296: PUSH
49297: LD_INT 1
49299: NEG
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 2
49307: NEG
49308: PUSH
49309: LD_INT 2
49311: NEG
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: LIST
49321: LIST
49322: LIST
49323: LIST
49324: LIST
49325: LIST
49326: LIST
49327: LIST
49328: LIST
49329: LIST
49330: LIST
49331: LIST
49332: LIST
49333: LIST
49334: LIST
49335: LIST
49336: LIST
49337: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49338: LD_ADDR_VAR 0 55
49342: PUSH
49343: LD_INT 0
49345: PUSH
49346: LD_INT 0
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: PUSH
49353: LD_INT 0
49355: PUSH
49356: LD_INT 1
49358: NEG
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: PUSH
49364: LD_INT 1
49366: PUSH
49367: LD_INT 0
49369: PUSH
49370: EMPTY
49371: LIST
49372: LIST
49373: PUSH
49374: LD_INT 1
49376: PUSH
49377: LD_INT 1
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: PUSH
49384: LD_INT 0
49386: PUSH
49387: LD_INT 1
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: PUSH
49394: LD_INT 1
49396: NEG
49397: PUSH
49398: LD_INT 0
49400: PUSH
49401: EMPTY
49402: LIST
49403: LIST
49404: PUSH
49405: LD_INT 1
49407: NEG
49408: PUSH
49409: LD_INT 1
49411: NEG
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 1
49419: NEG
49420: PUSH
49421: LD_INT 2
49423: NEG
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: LD_INT 0
49431: PUSH
49432: LD_INT 2
49434: NEG
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: LD_INT 1
49442: PUSH
49443: LD_INT 1
49445: NEG
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 2
49453: PUSH
49454: LD_INT 0
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: PUSH
49461: LD_INT 2
49463: PUSH
49464: LD_INT 1
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PUSH
49471: LD_INT 2
49473: PUSH
49474: LD_INT 2
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PUSH
49481: LD_INT 1
49483: PUSH
49484: LD_INT 2
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_INT 0
49493: PUSH
49494: LD_INT 2
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: PUSH
49501: LD_INT 1
49503: NEG
49504: PUSH
49505: LD_INT 1
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: PUSH
49512: LD_INT 2
49514: NEG
49515: PUSH
49516: LD_INT 0
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: PUSH
49523: LD_INT 2
49525: NEG
49526: PUSH
49527: LD_INT 1
49529: NEG
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: PUSH
49535: LD_INT 2
49537: NEG
49538: PUSH
49539: LD_INT 2
49541: NEG
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: LIST
49551: LIST
49552: LIST
49553: LIST
49554: LIST
49555: LIST
49556: LIST
49557: LIST
49558: LIST
49559: LIST
49560: LIST
49561: LIST
49562: LIST
49563: LIST
49564: LIST
49565: LIST
49566: LIST
49567: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49568: LD_ADDR_VAR 0 56
49572: PUSH
49573: LD_INT 0
49575: PUSH
49576: LD_INT 0
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 0
49585: PUSH
49586: LD_INT 1
49588: NEG
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: LD_INT 1
49596: PUSH
49597: LD_INT 0
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: PUSH
49604: LD_INT 1
49606: PUSH
49607: LD_INT 1
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: PUSH
49614: LD_INT 0
49616: PUSH
49617: LD_INT 1
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: PUSH
49624: LD_INT 1
49626: NEG
49627: PUSH
49628: LD_INT 0
49630: PUSH
49631: EMPTY
49632: LIST
49633: LIST
49634: PUSH
49635: LD_INT 1
49637: NEG
49638: PUSH
49639: LD_INT 1
49641: NEG
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: PUSH
49647: LD_INT 1
49649: NEG
49650: PUSH
49651: LD_INT 2
49653: NEG
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: PUSH
49659: LD_INT 0
49661: PUSH
49662: LD_INT 2
49664: NEG
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PUSH
49670: LD_INT 1
49672: PUSH
49673: LD_INT 1
49675: NEG
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: PUSH
49681: LD_INT 2
49683: PUSH
49684: LD_INT 0
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: LD_INT 2
49693: PUSH
49694: LD_INT 1
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: PUSH
49701: LD_INT 2
49703: PUSH
49704: LD_INT 2
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: PUSH
49711: LD_INT 1
49713: PUSH
49714: LD_INT 2
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: PUSH
49721: LD_INT 0
49723: PUSH
49724: LD_INT 2
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: LD_INT 1
49733: NEG
49734: PUSH
49735: LD_INT 1
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: LD_INT 2
49744: NEG
49745: PUSH
49746: LD_INT 0
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: LD_INT 2
49755: NEG
49756: PUSH
49757: LD_INT 1
49759: NEG
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: PUSH
49765: LD_INT 2
49767: NEG
49768: PUSH
49769: LD_INT 2
49771: NEG
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: LIST
49781: LIST
49782: LIST
49783: LIST
49784: LIST
49785: LIST
49786: LIST
49787: LIST
49788: LIST
49789: LIST
49790: LIST
49791: LIST
49792: LIST
49793: LIST
49794: LIST
49795: LIST
49796: LIST
49797: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49798: LD_ADDR_VAR 0 57
49802: PUSH
49803: LD_INT 0
49805: PUSH
49806: LD_INT 0
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: PUSH
49813: LD_INT 0
49815: PUSH
49816: LD_INT 1
49818: NEG
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: PUSH
49824: LD_INT 1
49826: PUSH
49827: LD_INT 0
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: PUSH
49834: LD_INT 1
49836: PUSH
49837: LD_INT 1
49839: PUSH
49840: EMPTY
49841: LIST
49842: LIST
49843: PUSH
49844: LD_INT 0
49846: PUSH
49847: LD_INT 1
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: PUSH
49854: LD_INT 1
49856: NEG
49857: PUSH
49858: LD_INT 0
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: PUSH
49865: LD_INT 1
49867: NEG
49868: PUSH
49869: LD_INT 1
49871: NEG
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: PUSH
49877: LD_INT 1
49879: NEG
49880: PUSH
49881: LD_INT 2
49883: NEG
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: LD_INT 0
49891: PUSH
49892: LD_INT 2
49894: NEG
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: PUSH
49900: LD_INT 1
49902: PUSH
49903: LD_INT 1
49905: NEG
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: LD_INT 2
49913: PUSH
49914: LD_INT 0
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: LD_INT 2
49923: PUSH
49924: LD_INT 1
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: LD_INT 2
49933: PUSH
49934: LD_INT 2
49936: PUSH
49937: EMPTY
49938: LIST
49939: LIST
49940: PUSH
49941: LD_INT 1
49943: PUSH
49944: LD_INT 2
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: LD_INT 0
49953: PUSH
49954: LD_INT 2
49956: PUSH
49957: EMPTY
49958: LIST
49959: LIST
49960: PUSH
49961: LD_INT 1
49963: NEG
49964: PUSH
49965: LD_INT 1
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: LD_INT 2
49974: NEG
49975: PUSH
49976: LD_INT 0
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: PUSH
49983: LD_INT 2
49985: NEG
49986: PUSH
49987: LD_INT 1
49989: NEG
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: PUSH
49995: LD_INT 2
49997: NEG
49998: PUSH
49999: LD_INT 2
50001: NEG
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: LIST
50011: LIST
50012: LIST
50013: LIST
50014: LIST
50015: LIST
50016: LIST
50017: LIST
50018: LIST
50019: LIST
50020: LIST
50021: LIST
50022: LIST
50023: LIST
50024: LIST
50025: LIST
50026: LIST
50027: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50028: LD_ADDR_VAR 0 58
50032: PUSH
50033: LD_INT 0
50035: PUSH
50036: LD_INT 0
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: LD_INT 0
50045: PUSH
50046: LD_INT 1
50048: NEG
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: LD_INT 1
50056: PUSH
50057: LD_INT 0
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: PUSH
50064: LD_INT 1
50066: PUSH
50067: LD_INT 1
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: PUSH
50074: LD_INT 0
50076: PUSH
50077: LD_INT 1
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: PUSH
50084: LD_INT 1
50086: NEG
50087: PUSH
50088: LD_INT 0
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: LD_INT 1
50097: NEG
50098: PUSH
50099: LD_INT 1
50101: NEG
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: PUSH
50107: LD_INT 1
50109: NEG
50110: PUSH
50111: LD_INT 2
50113: NEG
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: LD_INT 0
50121: PUSH
50122: LD_INT 2
50124: NEG
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: PUSH
50130: LD_INT 1
50132: PUSH
50133: LD_INT 1
50135: NEG
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: PUSH
50141: LD_INT 2
50143: PUSH
50144: LD_INT 0
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 2
50153: PUSH
50154: LD_INT 1
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: LD_INT 2
50163: PUSH
50164: LD_INT 2
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: PUSH
50171: LD_INT 1
50173: PUSH
50174: LD_INT 2
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: PUSH
50181: LD_INT 0
50183: PUSH
50184: LD_INT 2
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: PUSH
50191: LD_INT 1
50193: NEG
50194: PUSH
50195: LD_INT 1
50197: PUSH
50198: EMPTY
50199: LIST
50200: LIST
50201: PUSH
50202: LD_INT 2
50204: NEG
50205: PUSH
50206: LD_INT 0
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: PUSH
50213: LD_INT 2
50215: NEG
50216: PUSH
50217: LD_INT 1
50219: NEG
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: PUSH
50225: LD_INT 2
50227: NEG
50228: PUSH
50229: LD_INT 2
50231: NEG
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: LIST
50241: LIST
50242: LIST
50243: LIST
50244: LIST
50245: LIST
50246: LIST
50247: LIST
50248: LIST
50249: LIST
50250: LIST
50251: LIST
50252: LIST
50253: LIST
50254: LIST
50255: LIST
50256: LIST
50257: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50258: LD_ADDR_VAR 0 59
50262: PUSH
50263: LD_INT 0
50265: PUSH
50266: LD_INT 0
50268: PUSH
50269: EMPTY
50270: LIST
50271: LIST
50272: PUSH
50273: LD_INT 0
50275: PUSH
50276: LD_INT 1
50278: NEG
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: PUSH
50284: LD_INT 1
50286: PUSH
50287: LD_INT 0
50289: PUSH
50290: EMPTY
50291: LIST
50292: LIST
50293: PUSH
50294: LD_INT 1
50296: PUSH
50297: LD_INT 1
50299: PUSH
50300: EMPTY
50301: LIST
50302: LIST
50303: PUSH
50304: LD_INT 0
50306: PUSH
50307: LD_INT 1
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: PUSH
50314: LD_INT 1
50316: NEG
50317: PUSH
50318: LD_INT 0
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: LD_INT 1
50327: NEG
50328: PUSH
50329: LD_INT 1
50331: NEG
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: LIST
50341: LIST
50342: LIST
50343: LIST
50344: LIST
50345: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50346: LD_ADDR_VAR 0 60
50350: PUSH
50351: LD_INT 0
50353: PUSH
50354: LD_INT 0
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PUSH
50361: LD_INT 0
50363: PUSH
50364: LD_INT 1
50366: NEG
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: PUSH
50372: LD_INT 1
50374: PUSH
50375: LD_INT 0
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: PUSH
50382: LD_INT 1
50384: PUSH
50385: LD_INT 1
50387: PUSH
50388: EMPTY
50389: LIST
50390: LIST
50391: PUSH
50392: LD_INT 0
50394: PUSH
50395: LD_INT 1
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: PUSH
50402: LD_INT 1
50404: NEG
50405: PUSH
50406: LD_INT 0
50408: PUSH
50409: EMPTY
50410: LIST
50411: LIST
50412: PUSH
50413: LD_INT 1
50415: NEG
50416: PUSH
50417: LD_INT 1
50419: NEG
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50434: LD_ADDR_VAR 0 61
50438: PUSH
50439: LD_INT 0
50441: PUSH
50442: LD_INT 0
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: PUSH
50449: LD_INT 0
50451: PUSH
50452: LD_INT 1
50454: NEG
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PUSH
50460: LD_INT 1
50462: PUSH
50463: LD_INT 0
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: PUSH
50470: LD_INT 1
50472: PUSH
50473: LD_INT 1
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: PUSH
50480: LD_INT 0
50482: PUSH
50483: LD_INT 1
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: LD_INT 1
50492: NEG
50493: PUSH
50494: LD_INT 0
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 1
50503: NEG
50504: PUSH
50505: LD_INT 1
50507: NEG
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: LIST
50521: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50522: LD_ADDR_VAR 0 62
50526: PUSH
50527: LD_INT 0
50529: PUSH
50530: LD_INT 0
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: PUSH
50537: LD_INT 0
50539: PUSH
50540: LD_INT 1
50542: NEG
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: PUSH
50548: LD_INT 1
50550: PUSH
50551: LD_INT 0
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: PUSH
50558: LD_INT 1
50560: PUSH
50561: LD_INT 1
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PUSH
50568: LD_INT 0
50570: PUSH
50571: LD_INT 1
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: LD_INT 1
50580: NEG
50581: PUSH
50582: LD_INT 0
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: LD_INT 1
50591: NEG
50592: PUSH
50593: LD_INT 1
50595: NEG
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: LIST
50605: LIST
50606: LIST
50607: LIST
50608: LIST
50609: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50610: LD_ADDR_VAR 0 63
50614: PUSH
50615: LD_INT 0
50617: PUSH
50618: LD_INT 0
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PUSH
50625: LD_INT 0
50627: PUSH
50628: LD_INT 1
50630: NEG
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: LD_INT 1
50638: PUSH
50639: LD_INT 0
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: PUSH
50646: LD_INT 1
50648: PUSH
50649: LD_INT 1
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: PUSH
50656: LD_INT 0
50658: PUSH
50659: LD_INT 1
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: LD_INT 1
50668: NEG
50669: PUSH
50670: LD_INT 0
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: LD_INT 1
50679: NEG
50680: PUSH
50681: LD_INT 1
50683: NEG
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: PUSH
50689: EMPTY
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50698: LD_ADDR_VAR 0 64
50702: PUSH
50703: LD_INT 0
50705: PUSH
50706: LD_INT 0
50708: PUSH
50709: EMPTY
50710: LIST
50711: LIST
50712: PUSH
50713: LD_INT 0
50715: PUSH
50716: LD_INT 1
50718: NEG
50719: PUSH
50720: EMPTY
50721: LIST
50722: LIST
50723: PUSH
50724: LD_INT 1
50726: PUSH
50727: LD_INT 0
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: PUSH
50734: LD_INT 1
50736: PUSH
50737: LD_INT 1
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: PUSH
50744: LD_INT 0
50746: PUSH
50747: LD_INT 1
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: PUSH
50754: LD_INT 1
50756: NEG
50757: PUSH
50758: LD_INT 0
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 1
50767: NEG
50768: PUSH
50769: LD_INT 1
50771: NEG
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: LIST
50781: LIST
50782: LIST
50783: LIST
50784: LIST
50785: ST_TO_ADDR
// end ; 1 :
50786: GO 56683
50788: LD_INT 1
50790: DOUBLE
50791: EQUAL
50792: IFTRUE 50796
50794: GO 53419
50796: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50797: LD_ADDR_VAR 0 11
50801: PUSH
50802: LD_INT 1
50804: NEG
50805: PUSH
50806: LD_INT 3
50808: NEG
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: PUSH
50814: LD_INT 0
50816: PUSH
50817: LD_INT 3
50819: NEG
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 1
50827: PUSH
50828: LD_INT 2
50830: NEG
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: LIST
50840: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50841: LD_ADDR_VAR 0 12
50845: PUSH
50846: LD_INT 2
50848: PUSH
50849: LD_INT 1
50851: NEG
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 3
50859: PUSH
50860: LD_INT 0
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 3
50869: PUSH
50870: LD_INT 1
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: LIST
50881: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50882: LD_ADDR_VAR 0 13
50886: PUSH
50887: LD_INT 3
50889: PUSH
50890: LD_INT 2
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: PUSH
50897: LD_INT 3
50899: PUSH
50900: LD_INT 3
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: PUSH
50907: LD_INT 2
50909: PUSH
50910: LD_INT 3
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: LIST
50921: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50922: LD_ADDR_VAR 0 14
50926: PUSH
50927: LD_INT 1
50929: PUSH
50930: LD_INT 3
50932: PUSH
50933: EMPTY
50934: LIST
50935: LIST
50936: PUSH
50937: LD_INT 0
50939: PUSH
50940: LD_INT 3
50942: PUSH
50943: EMPTY
50944: LIST
50945: LIST
50946: PUSH
50947: LD_INT 1
50949: NEG
50950: PUSH
50951: LD_INT 2
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: LIST
50962: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50963: LD_ADDR_VAR 0 15
50967: PUSH
50968: LD_INT 2
50970: NEG
50971: PUSH
50972: LD_INT 1
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: LD_INT 3
50981: NEG
50982: PUSH
50983: LD_INT 0
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: PUSH
50990: LD_INT 3
50992: NEG
50993: PUSH
50994: LD_INT 1
50996: NEG
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: LIST
51006: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51007: LD_ADDR_VAR 0 16
51011: PUSH
51012: LD_INT 2
51014: NEG
51015: PUSH
51016: LD_INT 3
51018: NEG
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: PUSH
51024: LD_INT 3
51026: NEG
51027: PUSH
51028: LD_INT 2
51030: NEG
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PUSH
51036: LD_INT 3
51038: NEG
51039: PUSH
51040: LD_INT 3
51042: NEG
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: LIST
51052: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51053: LD_ADDR_VAR 0 17
51057: PUSH
51058: LD_INT 1
51060: NEG
51061: PUSH
51062: LD_INT 3
51064: NEG
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: LD_INT 0
51072: PUSH
51073: LD_INT 3
51075: NEG
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: LD_INT 1
51083: PUSH
51084: LD_INT 2
51086: NEG
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: LIST
51096: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51097: LD_ADDR_VAR 0 18
51101: PUSH
51102: LD_INT 2
51104: PUSH
51105: LD_INT 1
51107: NEG
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: LD_INT 3
51115: PUSH
51116: LD_INT 0
51118: PUSH
51119: EMPTY
51120: LIST
51121: LIST
51122: PUSH
51123: LD_INT 3
51125: PUSH
51126: LD_INT 1
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: LIST
51137: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51138: LD_ADDR_VAR 0 19
51142: PUSH
51143: LD_INT 3
51145: PUSH
51146: LD_INT 2
51148: PUSH
51149: EMPTY
51150: LIST
51151: LIST
51152: PUSH
51153: LD_INT 3
51155: PUSH
51156: LD_INT 3
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 2
51165: PUSH
51166: LD_INT 3
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: LIST
51177: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51178: LD_ADDR_VAR 0 20
51182: PUSH
51183: LD_INT 1
51185: PUSH
51186: LD_INT 3
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 0
51195: PUSH
51196: LD_INT 3
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: LD_INT 1
51205: NEG
51206: PUSH
51207: LD_INT 2
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: LIST
51218: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51219: LD_ADDR_VAR 0 21
51223: PUSH
51224: LD_INT 2
51226: NEG
51227: PUSH
51228: LD_INT 1
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: LD_INT 3
51237: NEG
51238: PUSH
51239: LD_INT 0
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: LD_INT 3
51248: NEG
51249: PUSH
51250: LD_INT 1
51252: NEG
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: LIST
51262: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51263: LD_ADDR_VAR 0 22
51267: PUSH
51268: LD_INT 2
51270: NEG
51271: PUSH
51272: LD_INT 3
51274: NEG
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: LD_INT 3
51282: NEG
51283: PUSH
51284: LD_INT 2
51286: NEG
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: LD_INT 3
51294: NEG
51295: PUSH
51296: LD_INT 3
51298: NEG
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: PUSH
51304: EMPTY
51305: LIST
51306: LIST
51307: LIST
51308: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
51309: LD_ADDR_VAR 0 23
51313: PUSH
51314: LD_INT 0
51316: PUSH
51317: LD_INT 3
51319: NEG
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 1
51327: NEG
51328: PUSH
51329: LD_INT 4
51331: NEG
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 1
51339: PUSH
51340: LD_INT 3
51342: NEG
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: LIST
51352: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
51353: LD_ADDR_VAR 0 24
51357: PUSH
51358: LD_INT 3
51360: PUSH
51361: LD_INT 0
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: PUSH
51368: LD_INT 3
51370: PUSH
51371: LD_INT 1
51373: NEG
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 4
51381: PUSH
51382: LD_INT 1
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: LIST
51393: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
51394: LD_ADDR_VAR 0 25
51398: PUSH
51399: LD_INT 3
51401: PUSH
51402: LD_INT 3
51404: PUSH
51405: EMPTY
51406: LIST
51407: LIST
51408: PUSH
51409: LD_INT 4
51411: PUSH
51412: LD_INT 3
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: LD_INT 3
51421: PUSH
51422: LD_INT 4
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: LIST
51433: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
51434: LD_ADDR_VAR 0 26
51438: PUSH
51439: LD_INT 0
51441: PUSH
51442: LD_INT 3
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: PUSH
51449: LD_INT 1
51451: PUSH
51452: LD_INT 4
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: PUSH
51459: LD_INT 1
51461: NEG
51462: PUSH
51463: LD_INT 3
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: LIST
51474: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
51475: LD_ADDR_VAR 0 27
51479: PUSH
51480: LD_INT 3
51482: NEG
51483: PUSH
51484: LD_INT 0
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: PUSH
51491: LD_INT 3
51493: NEG
51494: PUSH
51495: LD_INT 1
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: PUSH
51502: LD_INT 4
51504: NEG
51505: PUSH
51506: LD_INT 1
51508: NEG
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: LIST
51518: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
51519: LD_ADDR_VAR 0 28
51523: PUSH
51524: LD_INT 3
51526: NEG
51527: PUSH
51528: LD_INT 3
51530: NEG
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: LD_INT 3
51538: NEG
51539: PUSH
51540: LD_INT 4
51542: NEG
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: PUSH
51548: LD_INT 4
51550: NEG
51551: PUSH
51552: LD_INT 3
51554: NEG
51555: PUSH
51556: EMPTY
51557: LIST
51558: LIST
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: LIST
51564: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
51565: LD_ADDR_VAR 0 29
51569: PUSH
51570: LD_INT 1
51572: NEG
51573: PUSH
51574: LD_INT 3
51576: NEG
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 0
51584: PUSH
51585: LD_INT 3
51587: NEG
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 1
51595: PUSH
51596: LD_INT 2
51598: NEG
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: LD_INT 1
51606: NEG
51607: PUSH
51608: LD_INT 4
51610: NEG
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: LD_INT 0
51618: PUSH
51619: LD_INT 4
51621: NEG
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: PUSH
51627: LD_INT 1
51629: PUSH
51630: LD_INT 3
51632: NEG
51633: PUSH
51634: EMPTY
51635: LIST
51636: LIST
51637: PUSH
51638: LD_INT 1
51640: NEG
51641: PUSH
51642: LD_INT 5
51644: NEG
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: LD_INT 0
51652: PUSH
51653: LD_INT 5
51655: NEG
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PUSH
51661: LD_INT 1
51663: PUSH
51664: LD_INT 4
51666: NEG
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: PUSH
51672: LD_INT 1
51674: NEG
51675: PUSH
51676: LD_INT 6
51678: NEG
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 0
51686: PUSH
51687: LD_INT 6
51689: NEG
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PUSH
51695: LD_INT 1
51697: PUSH
51698: LD_INT 5
51700: NEG
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: PUSH
51706: EMPTY
51707: LIST
51708: LIST
51709: LIST
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: LIST
51715: LIST
51716: LIST
51717: LIST
51718: LIST
51719: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
51720: LD_ADDR_VAR 0 30
51724: PUSH
51725: LD_INT 2
51727: PUSH
51728: LD_INT 1
51730: NEG
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: PUSH
51736: LD_INT 3
51738: PUSH
51739: LD_INT 0
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: PUSH
51746: LD_INT 3
51748: PUSH
51749: LD_INT 1
51751: PUSH
51752: EMPTY
51753: LIST
51754: LIST
51755: PUSH
51756: LD_INT 3
51758: PUSH
51759: LD_INT 1
51761: NEG
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: PUSH
51767: LD_INT 4
51769: PUSH
51770: LD_INT 0
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: LD_INT 4
51779: PUSH
51780: LD_INT 1
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: LD_INT 4
51789: PUSH
51790: LD_INT 1
51792: NEG
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: PUSH
51798: LD_INT 5
51800: PUSH
51801: LD_INT 0
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PUSH
51808: LD_INT 5
51810: PUSH
51811: LD_INT 1
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: PUSH
51818: LD_INT 5
51820: PUSH
51821: LD_INT 1
51823: NEG
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: LD_INT 6
51831: PUSH
51832: LD_INT 0
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_INT 6
51841: PUSH
51842: LD_INT 1
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: PUSH
51849: EMPTY
51850: LIST
51851: LIST
51852: LIST
51853: LIST
51854: LIST
51855: LIST
51856: LIST
51857: LIST
51858: LIST
51859: LIST
51860: LIST
51861: LIST
51862: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
51863: LD_ADDR_VAR 0 31
51867: PUSH
51868: LD_INT 3
51870: PUSH
51871: LD_INT 2
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: PUSH
51878: LD_INT 3
51880: PUSH
51881: LD_INT 3
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: PUSH
51888: LD_INT 2
51890: PUSH
51891: LD_INT 3
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PUSH
51898: LD_INT 4
51900: PUSH
51901: LD_INT 3
51903: PUSH
51904: EMPTY
51905: LIST
51906: LIST
51907: PUSH
51908: LD_INT 4
51910: PUSH
51911: LD_INT 4
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: PUSH
51918: LD_INT 3
51920: PUSH
51921: LD_INT 4
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: PUSH
51928: LD_INT 5
51930: PUSH
51931: LD_INT 4
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: LD_INT 5
51940: PUSH
51941: LD_INT 5
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: PUSH
51948: LD_INT 4
51950: PUSH
51951: LD_INT 5
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: LD_INT 6
51960: PUSH
51961: LD_INT 5
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 6
51970: PUSH
51971: LD_INT 6
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: PUSH
51978: LD_INT 5
51980: PUSH
51981: LD_INT 6
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: LIST
51992: LIST
51993: LIST
51994: LIST
51995: LIST
51996: LIST
51997: LIST
51998: LIST
51999: LIST
52000: LIST
52001: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
52002: LD_ADDR_VAR 0 32
52006: PUSH
52007: LD_INT 1
52009: PUSH
52010: LD_INT 3
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: PUSH
52017: LD_INT 0
52019: PUSH
52020: LD_INT 3
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: PUSH
52027: LD_INT 1
52029: NEG
52030: PUSH
52031: LD_INT 2
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: PUSH
52038: LD_INT 1
52040: PUSH
52041: LD_INT 4
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: PUSH
52048: LD_INT 0
52050: PUSH
52051: LD_INT 4
52053: PUSH
52054: EMPTY
52055: LIST
52056: LIST
52057: PUSH
52058: LD_INT 1
52060: NEG
52061: PUSH
52062: LD_INT 3
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: PUSH
52069: LD_INT 1
52071: PUSH
52072: LD_INT 5
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: PUSH
52079: LD_INT 0
52081: PUSH
52082: LD_INT 5
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: LD_INT 1
52091: NEG
52092: PUSH
52093: LD_INT 4
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: LD_INT 1
52102: PUSH
52103: LD_INT 6
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: LD_INT 0
52112: PUSH
52113: LD_INT 6
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: LD_INT 1
52122: NEG
52123: PUSH
52124: LD_INT 5
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: LIST
52135: LIST
52136: LIST
52137: LIST
52138: LIST
52139: LIST
52140: LIST
52141: LIST
52142: LIST
52143: LIST
52144: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
52145: LD_ADDR_VAR 0 33
52149: PUSH
52150: LD_INT 2
52152: NEG
52153: PUSH
52154: LD_INT 1
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: PUSH
52161: LD_INT 3
52163: NEG
52164: PUSH
52165: LD_INT 0
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_INT 3
52174: NEG
52175: PUSH
52176: LD_INT 1
52178: NEG
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: PUSH
52184: LD_INT 3
52186: NEG
52187: PUSH
52188: LD_INT 1
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: LD_INT 4
52197: NEG
52198: PUSH
52199: LD_INT 0
52201: PUSH
52202: EMPTY
52203: LIST
52204: LIST
52205: PUSH
52206: LD_INT 4
52208: NEG
52209: PUSH
52210: LD_INT 1
52212: NEG
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: PUSH
52218: LD_INT 4
52220: NEG
52221: PUSH
52222: LD_INT 1
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: LD_INT 5
52231: NEG
52232: PUSH
52233: LD_INT 0
52235: PUSH
52236: EMPTY
52237: LIST
52238: LIST
52239: PUSH
52240: LD_INT 5
52242: NEG
52243: PUSH
52244: LD_INT 1
52246: NEG
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: PUSH
52252: LD_INT 5
52254: NEG
52255: PUSH
52256: LD_INT 1
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: PUSH
52263: LD_INT 6
52265: NEG
52266: PUSH
52267: LD_INT 0
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: PUSH
52274: LD_INT 6
52276: NEG
52277: PUSH
52278: LD_INT 1
52280: NEG
52281: PUSH
52282: EMPTY
52283: LIST
52284: LIST
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: LIST
52290: LIST
52291: LIST
52292: LIST
52293: LIST
52294: LIST
52295: LIST
52296: LIST
52297: LIST
52298: LIST
52299: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
52300: LD_ADDR_VAR 0 34
52304: PUSH
52305: LD_INT 2
52307: NEG
52308: PUSH
52309: LD_INT 3
52311: NEG
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: PUSH
52317: LD_INT 3
52319: NEG
52320: PUSH
52321: LD_INT 2
52323: NEG
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: PUSH
52329: LD_INT 3
52331: NEG
52332: PUSH
52333: LD_INT 3
52335: NEG
52336: PUSH
52337: EMPTY
52338: LIST
52339: LIST
52340: PUSH
52341: LD_INT 3
52343: NEG
52344: PUSH
52345: LD_INT 4
52347: NEG
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: PUSH
52353: LD_INT 4
52355: NEG
52356: PUSH
52357: LD_INT 3
52359: NEG
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: PUSH
52365: LD_INT 4
52367: NEG
52368: PUSH
52369: LD_INT 4
52371: NEG
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: PUSH
52377: LD_INT 4
52379: NEG
52380: PUSH
52381: LD_INT 5
52383: NEG
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PUSH
52389: LD_INT 5
52391: NEG
52392: PUSH
52393: LD_INT 4
52395: NEG
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: LD_INT 5
52403: NEG
52404: PUSH
52405: LD_INT 5
52407: NEG
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: LD_INT 5
52415: NEG
52416: PUSH
52417: LD_INT 6
52419: NEG
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: PUSH
52425: LD_INT 6
52427: NEG
52428: PUSH
52429: LD_INT 5
52431: NEG
52432: PUSH
52433: EMPTY
52434: LIST
52435: LIST
52436: PUSH
52437: LD_INT 6
52439: NEG
52440: PUSH
52441: LD_INT 6
52443: NEG
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: LIST
52453: LIST
52454: LIST
52455: LIST
52456: LIST
52457: LIST
52458: LIST
52459: LIST
52460: LIST
52461: LIST
52462: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
52463: LD_ADDR_VAR 0 41
52467: PUSH
52468: LD_INT 0
52470: PUSH
52471: LD_INT 2
52473: NEG
52474: PUSH
52475: EMPTY
52476: LIST
52477: LIST
52478: PUSH
52479: LD_INT 1
52481: NEG
52482: PUSH
52483: LD_INT 3
52485: NEG
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: PUSH
52491: LD_INT 1
52493: PUSH
52494: LD_INT 2
52496: NEG
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: LIST
52506: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
52507: LD_ADDR_VAR 0 42
52511: PUSH
52512: LD_INT 2
52514: PUSH
52515: LD_INT 0
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 2
52524: PUSH
52525: LD_INT 1
52527: NEG
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: PUSH
52533: LD_INT 3
52535: PUSH
52536: LD_INT 1
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: LIST
52547: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
52548: LD_ADDR_VAR 0 43
52552: PUSH
52553: LD_INT 2
52555: PUSH
52556: LD_INT 2
52558: PUSH
52559: EMPTY
52560: LIST
52561: LIST
52562: PUSH
52563: LD_INT 3
52565: PUSH
52566: LD_INT 2
52568: PUSH
52569: EMPTY
52570: LIST
52571: LIST
52572: PUSH
52573: LD_INT 2
52575: PUSH
52576: LD_INT 3
52578: PUSH
52579: EMPTY
52580: LIST
52581: LIST
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: LIST
52587: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
52588: LD_ADDR_VAR 0 44
52592: PUSH
52593: LD_INT 0
52595: PUSH
52596: LD_INT 2
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 1
52605: PUSH
52606: LD_INT 3
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: LD_INT 1
52615: NEG
52616: PUSH
52617: LD_INT 2
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: LIST
52628: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52629: LD_ADDR_VAR 0 45
52633: PUSH
52634: LD_INT 2
52636: NEG
52637: PUSH
52638: LD_INT 0
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: PUSH
52645: LD_INT 2
52647: NEG
52648: PUSH
52649: LD_INT 1
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: PUSH
52656: LD_INT 3
52658: NEG
52659: PUSH
52660: LD_INT 1
52662: NEG
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: LIST
52672: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
52673: LD_ADDR_VAR 0 46
52677: PUSH
52678: LD_INT 2
52680: NEG
52681: PUSH
52682: LD_INT 2
52684: NEG
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: PUSH
52690: LD_INT 2
52692: NEG
52693: PUSH
52694: LD_INT 3
52696: NEG
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: LD_INT 3
52704: NEG
52705: PUSH
52706: LD_INT 2
52708: NEG
52709: PUSH
52710: EMPTY
52711: LIST
52712: LIST
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: LIST
52718: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
52719: LD_ADDR_VAR 0 47
52723: PUSH
52724: LD_INT 2
52726: NEG
52727: PUSH
52728: LD_INT 3
52730: NEG
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: PUSH
52736: LD_INT 1
52738: NEG
52739: PUSH
52740: LD_INT 3
52742: NEG
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52752: LD_ADDR_VAR 0 48
52756: PUSH
52757: LD_INT 1
52759: PUSH
52760: LD_INT 2
52762: NEG
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: PUSH
52768: LD_INT 2
52770: PUSH
52771: LD_INT 1
52773: NEG
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
52783: LD_ADDR_VAR 0 49
52787: PUSH
52788: LD_INT 3
52790: PUSH
52791: LD_INT 1
52793: PUSH
52794: EMPTY
52795: LIST
52796: LIST
52797: PUSH
52798: LD_INT 3
52800: PUSH
52801: LD_INT 2
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: PUSH
52808: EMPTY
52809: LIST
52810: LIST
52811: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
52812: LD_ADDR_VAR 0 50
52816: PUSH
52817: LD_INT 2
52819: PUSH
52820: LD_INT 3
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: LD_INT 1
52829: PUSH
52830: LD_INT 3
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52841: LD_ADDR_VAR 0 51
52845: PUSH
52846: LD_INT 1
52848: NEG
52849: PUSH
52850: LD_INT 2
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: LD_INT 2
52859: NEG
52860: PUSH
52861: LD_INT 1
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52872: LD_ADDR_VAR 0 52
52876: PUSH
52877: LD_INT 3
52879: NEG
52880: PUSH
52881: LD_INT 1
52883: NEG
52884: PUSH
52885: EMPTY
52886: LIST
52887: LIST
52888: PUSH
52889: LD_INT 3
52891: NEG
52892: PUSH
52893: LD_INT 2
52895: NEG
52896: PUSH
52897: EMPTY
52898: LIST
52899: LIST
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52905: LD_ADDR_VAR 0 53
52909: PUSH
52910: LD_INT 1
52912: NEG
52913: PUSH
52914: LD_INT 3
52916: NEG
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: PUSH
52922: LD_INT 0
52924: PUSH
52925: LD_INT 3
52927: NEG
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: LD_INT 1
52935: PUSH
52936: LD_INT 2
52938: NEG
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: LIST
52948: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52949: LD_ADDR_VAR 0 54
52953: PUSH
52954: LD_INT 2
52956: PUSH
52957: LD_INT 1
52959: NEG
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: LD_INT 3
52967: PUSH
52968: LD_INT 0
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: PUSH
52975: LD_INT 3
52977: PUSH
52978: LD_INT 1
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: LIST
52989: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52990: LD_ADDR_VAR 0 55
52994: PUSH
52995: LD_INT 3
52997: PUSH
52998: LD_INT 2
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: PUSH
53005: LD_INT 3
53007: PUSH
53008: LD_INT 3
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: LD_INT 2
53017: PUSH
53018: LD_INT 3
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: LIST
53029: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53030: LD_ADDR_VAR 0 56
53034: PUSH
53035: LD_INT 1
53037: PUSH
53038: LD_INT 3
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: LD_INT 0
53047: PUSH
53048: LD_INT 3
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: PUSH
53055: LD_INT 1
53057: NEG
53058: PUSH
53059: LD_INT 2
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: LIST
53070: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53071: LD_ADDR_VAR 0 57
53075: PUSH
53076: LD_INT 2
53078: NEG
53079: PUSH
53080: LD_INT 1
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: PUSH
53087: LD_INT 3
53089: NEG
53090: PUSH
53091: LD_INT 0
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: PUSH
53098: LD_INT 3
53100: NEG
53101: PUSH
53102: LD_INT 1
53104: NEG
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: LIST
53114: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53115: LD_ADDR_VAR 0 58
53119: PUSH
53120: LD_INT 2
53122: NEG
53123: PUSH
53124: LD_INT 3
53126: NEG
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 3
53134: NEG
53135: PUSH
53136: LD_INT 2
53138: NEG
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: LD_INT 3
53146: NEG
53147: PUSH
53148: LD_INT 3
53150: NEG
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: EMPTY
53157: LIST
53158: LIST
53159: LIST
53160: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
53161: LD_ADDR_VAR 0 59
53165: PUSH
53166: LD_INT 1
53168: NEG
53169: PUSH
53170: LD_INT 2
53172: NEG
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: LD_INT 0
53180: PUSH
53181: LD_INT 2
53183: NEG
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: LD_INT 1
53191: PUSH
53192: LD_INT 1
53194: NEG
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: LIST
53204: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53205: LD_ADDR_VAR 0 60
53209: PUSH
53210: LD_INT 1
53212: PUSH
53213: LD_INT 1
53215: NEG
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 2
53223: PUSH
53224: LD_INT 0
53226: PUSH
53227: EMPTY
53228: LIST
53229: LIST
53230: PUSH
53231: LD_INT 2
53233: PUSH
53234: LD_INT 1
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: LIST
53245: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53246: LD_ADDR_VAR 0 61
53250: PUSH
53251: LD_INT 2
53253: PUSH
53254: LD_INT 1
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: PUSH
53261: LD_INT 2
53263: PUSH
53264: LD_INT 2
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PUSH
53271: LD_INT 1
53273: PUSH
53274: LD_INT 2
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: LIST
53285: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53286: LD_ADDR_VAR 0 62
53290: PUSH
53291: LD_INT 1
53293: PUSH
53294: LD_INT 2
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: LD_INT 0
53303: PUSH
53304: LD_INT 2
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: PUSH
53311: LD_INT 1
53313: NEG
53314: PUSH
53315: LD_INT 1
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: LIST
53326: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53327: LD_ADDR_VAR 0 63
53331: PUSH
53332: LD_INT 1
53334: NEG
53335: PUSH
53336: LD_INT 1
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 2
53345: NEG
53346: PUSH
53347: LD_INT 0
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: PUSH
53354: LD_INT 2
53356: NEG
53357: PUSH
53358: LD_INT 1
53360: NEG
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: LIST
53370: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53371: LD_ADDR_VAR 0 64
53375: PUSH
53376: LD_INT 1
53378: NEG
53379: PUSH
53380: LD_INT 2
53382: NEG
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: PUSH
53388: LD_INT 2
53390: NEG
53391: PUSH
53392: LD_INT 1
53394: NEG
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: PUSH
53400: LD_INT 2
53402: NEG
53403: PUSH
53404: LD_INT 2
53406: NEG
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: LIST
53416: ST_TO_ADDR
// end ; 2 :
53417: GO 56683
53419: LD_INT 2
53421: DOUBLE
53422: EQUAL
53423: IFTRUE 53427
53425: GO 56682
53427: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
53428: LD_ADDR_VAR 0 29
53432: PUSH
53433: LD_INT 4
53435: PUSH
53436: LD_INT 0
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: PUSH
53443: LD_INT 4
53445: PUSH
53446: LD_INT 1
53448: NEG
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: PUSH
53454: LD_INT 5
53456: PUSH
53457: LD_INT 0
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: LD_INT 5
53466: PUSH
53467: LD_INT 1
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: LD_INT 4
53476: PUSH
53477: LD_INT 1
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: PUSH
53484: LD_INT 3
53486: PUSH
53487: LD_INT 0
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: LD_INT 3
53496: PUSH
53497: LD_INT 1
53499: NEG
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: LD_INT 3
53507: PUSH
53508: LD_INT 2
53510: NEG
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 5
53518: PUSH
53519: LD_INT 2
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 3
53528: PUSH
53529: LD_INT 3
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: LD_INT 3
53538: PUSH
53539: LD_INT 2
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: PUSH
53546: LD_INT 4
53548: PUSH
53549: LD_INT 3
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: PUSH
53556: LD_INT 4
53558: PUSH
53559: LD_INT 4
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PUSH
53566: LD_INT 3
53568: PUSH
53569: LD_INT 4
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: PUSH
53576: LD_INT 2
53578: PUSH
53579: LD_INT 3
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: LD_INT 2
53588: PUSH
53589: LD_INT 2
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: PUSH
53596: LD_INT 4
53598: PUSH
53599: LD_INT 2
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: LD_INT 2
53608: PUSH
53609: LD_INT 4
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: PUSH
53616: LD_INT 0
53618: PUSH
53619: LD_INT 4
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: PUSH
53626: LD_INT 0
53628: PUSH
53629: LD_INT 3
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: LD_INT 1
53638: PUSH
53639: LD_INT 4
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: PUSH
53646: LD_INT 1
53648: PUSH
53649: LD_INT 5
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: LD_INT 0
53658: PUSH
53659: LD_INT 5
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: PUSH
53666: LD_INT 1
53668: NEG
53669: PUSH
53670: LD_INT 4
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 1
53679: NEG
53680: PUSH
53681: LD_INT 3
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 2
53690: PUSH
53691: LD_INT 5
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 2
53700: NEG
53701: PUSH
53702: LD_INT 3
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: PUSH
53709: LD_INT 3
53711: NEG
53712: PUSH
53713: LD_INT 0
53715: PUSH
53716: EMPTY
53717: LIST
53718: LIST
53719: PUSH
53720: LD_INT 3
53722: NEG
53723: PUSH
53724: LD_INT 1
53726: NEG
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: LD_INT 2
53734: NEG
53735: PUSH
53736: LD_INT 0
53738: PUSH
53739: EMPTY
53740: LIST
53741: LIST
53742: PUSH
53743: LD_INT 2
53745: NEG
53746: PUSH
53747: LD_INT 1
53749: PUSH
53750: EMPTY
53751: LIST
53752: LIST
53753: PUSH
53754: LD_INT 3
53756: NEG
53757: PUSH
53758: LD_INT 1
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: LD_INT 4
53767: NEG
53768: PUSH
53769: LD_INT 0
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: PUSH
53776: LD_INT 4
53778: NEG
53779: PUSH
53780: LD_INT 1
53782: NEG
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: PUSH
53788: LD_INT 4
53790: NEG
53791: PUSH
53792: LD_INT 2
53794: NEG
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: PUSH
53800: LD_INT 2
53802: NEG
53803: PUSH
53804: LD_INT 2
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: PUSH
53811: LD_INT 4
53813: NEG
53814: PUSH
53815: LD_INT 4
53817: NEG
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: LD_INT 4
53825: NEG
53826: PUSH
53827: LD_INT 5
53829: NEG
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PUSH
53835: LD_INT 3
53837: NEG
53838: PUSH
53839: LD_INT 4
53841: NEG
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 3
53849: NEG
53850: PUSH
53851: LD_INT 3
53853: NEG
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: PUSH
53859: LD_INT 4
53861: NEG
53862: PUSH
53863: LD_INT 3
53865: NEG
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: PUSH
53871: LD_INT 5
53873: NEG
53874: PUSH
53875: LD_INT 4
53877: NEG
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: PUSH
53883: LD_INT 5
53885: NEG
53886: PUSH
53887: LD_INT 5
53889: NEG
53890: PUSH
53891: EMPTY
53892: LIST
53893: LIST
53894: PUSH
53895: LD_INT 3
53897: NEG
53898: PUSH
53899: LD_INT 5
53901: NEG
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: PUSH
53907: LD_INT 5
53909: NEG
53910: PUSH
53911: LD_INT 3
53913: NEG
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: PUSH
53919: EMPTY
53920: LIST
53921: LIST
53922: LIST
53923: LIST
53924: LIST
53925: LIST
53926: LIST
53927: LIST
53928: LIST
53929: LIST
53930: LIST
53931: LIST
53932: LIST
53933: LIST
53934: LIST
53935: LIST
53936: LIST
53937: LIST
53938: LIST
53939: LIST
53940: LIST
53941: LIST
53942: LIST
53943: LIST
53944: LIST
53945: LIST
53946: LIST
53947: LIST
53948: LIST
53949: LIST
53950: LIST
53951: LIST
53952: LIST
53953: LIST
53954: LIST
53955: LIST
53956: LIST
53957: LIST
53958: LIST
53959: LIST
53960: LIST
53961: LIST
53962: LIST
53963: LIST
53964: LIST
53965: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
53966: LD_ADDR_VAR 0 30
53970: PUSH
53971: LD_INT 4
53973: PUSH
53974: LD_INT 4
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: PUSH
53981: LD_INT 4
53983: PUSH
53984: LD_INT 3
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: LD_INT 5
53993: PUSH
53994: LD_INT 4
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: PUSH
54001: LD_INT 5
54003: PUSH
54004: LD_INT 5
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: PUSH
54011: LD_INT 4
54013: PUSH
54014: LD_INT 5
54016: PUSH
54017: EMPTY
54018: LIST
54019: LIST
54020: PUSH
54021: LD_INT 3
54023: PUSH
54024: LD_INT 4
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: PUSH
54031: LD_INT 3
54033: PUSH
54034: LD_INT 3
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PUSH
54041: LD_INT 5
54043: PUSH
54044: LD_INT 3
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 3
54053: PUSH
54054: LD_INT 5
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: PUSH
54061: LD_INT 0
54063: PUSH
54064: LD_INT 3
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: LD_INT 0
54073: PUSH
54074: LD_INT 2
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: PUSH
54081: LD_INT 1
54083: PUSH
54084: LD_INT 3
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: LD_INT 1
54093: PUSH
54094: LD_INT 4
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: PUSH
54101: LD_INT 0
54103: PUSH
54104: LD_INT 4
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PUSH
54111: LD_INT 1
54113: NEG
54114: PUSH
54115: LD_INT 3
54117: PUSH
54118: EMPTY
54119: LIST
54120: LIST
54121: PUSH
54122: LD_INT 1
54124: NEG
54125: PUSH
54126: LD_INT 2
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: LD_INT 2
54135: PUSH
54136: LD_INT 4
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: PUSH
54143: LD_INT 2
54145: NEG
54146: PUSH
54147: LD_INT 2
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: PUSH
54154: LD_INT 4
54156: NEG
54157: PUSH
54158: LD_INT 0
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: LD_INT 4
54167: NEG
54168: PUSH
54169: LD_INT 1
54171: NEG
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: PUSH
54177: LD_INT 3
54179: NEG
54180: PUSH
54181: LD_INT 0
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: PUSH
54188: LD_INT 3
54190: NEG
54191: PUSH
54192: LD_INT 1
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: LD_INT 4
54201: NEG
54202: PUSH
54203: LD_INT 1
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: PUSH
54210: LD_INT 5
54212: NEG
54213: PUSH
54214: LD_INT 0
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: LD_INT 5
54223: NEG
54224: PUSH
54225: LD_INT 1
54227: NEG
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: LD_INT 5
54235: NEG
54236: PUSH
54237: LD_INT 2
54239: NEG
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: LD_INT 3
54247: NEG
54248: PUSH
54249: LD_INT 2
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: PUSH
54256: LD_INT 3
54258: NEG
54259: PUSH
54260: LD_INT 3
54262: NEG
54263: PUSH
54264: EMPTY
54265: LIST
54266: LIST
54267: PUSH
54268: LD_INT 3
54270: NEG
54271: PUSH
54272: LD_INT 4
54274: NEG
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: LD_INT 2
54282: NEG
54283: PUSH
54284: LD_INT 3
54286: NEG
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: PUSH
54292: LD_INT 2
54294: NEG
54295: PUSH
54296: LD_INT 2
54298: NEG
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PUSH
54304: LD_INT 3
54306: NEG
54307: PUSH
54308: LD_INT 2
54310: NEG
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 4
54318: NEG
54319: PUSH
54320: LD_INT 3
54322: NEG
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: LD_INT 4
54330: NEG
54331: PUSH
54332: LD_INT 4
54334: NEG
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PUSH
54340: LD_INT 2
54342: NEG
54343: PUSH
54344: LD_INT 4
54346: NEG
54347: PUSH
54348: EMPTY
54349: LIST
54350: LIST
54351: PUSH
54352: LD_INT 4
54354: NEG
54355: PUSH
54356: LD_INT 2
54358: NEG
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: PUSH
54364: LD_INT 0
54366: PUSH
54367: LD_INT 4
54369: NEG
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 0
54377: PUSH
54378: LD_INT 5
54380: NEG
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: PUSH
54386: LD_INT 1
54388: PUSH
54389: LD_INT 4
54391: NEG
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: LD_INT 1
54399: PUSH
54400: LD_INT 3
54402: NEG
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: PUSH
54408: LD_INT 0
54410: PUSH
54411: LD_INT 3
54413: NEG
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: PUSH
54419: LD_INT 1
54421: NEG
54422: PUSH
54423: LD_INT 4
54425: NEG
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: PUSH
54431: LD_INT 1
54433: NEG
54434: PUSH
54435: LD_INT 5
54437: NEG
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: PUSH
54443: LD_INT 2
54445: PUSH
54446: LD_INT 3
54448: NEG
54449: PUSH
54450: EMPTY
54451: LIST
54452: LIST
54453: PUSH
54454: LD_INT 2
54456: NEG
54457: PUSH
54458: LD_INT 5
54460: NEG
54461: PUSH
54462: EMPTY
54463: LIST
54464: LIST
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: LIST
54470: LIST
54471: LIST
54472: LIST
54473: LIST
54474: LIST
54475: LIST
54476: LIST
54477: LIST
54478: LIST
54479: LIST
54480: LIST
54481: LIST
54482: LIST
54483: LIST
54484: LIST
54485: LIST
54486: LIST
54487: LIST
54488: LIST
54489: LIST
54490: LIST
54491: LIST
54492: LIST
54493: LIST
54494: LIST
54495: LIST
54496: LIST
54497: LIST
54498: LIST
54499: LIST
54500: LIST
54501: LIST
54502: LIST
54503: LIST
54504: LIST
54505: LIST
54506: LIST
54507: LIST
54508: LIST
54509: LIST
54510: LIST
54511: LIST
54512: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
54513: LD_ADDR_VAR 0 31
54517: PUSH
54518: LD_INT 0
54520: PUSH
54521: LD_INT 4
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: PUSH
54528: LD_INT 0
54530: PUSH
54531: LD_INT 3
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: PUSH
54538: LD_INT 1
54540: PUSH
54541: LD_INT 4
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: PUSH
54548: LD_INT 1
54550: PUSH
54551: LD_INT 5
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: PUSH
54558: LD_INT 0
54560: PUSH
54561: LD_INT 5
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: PUSH
54568: LD_INT 1
54570: NEG
54571: PUSH
54572: LD_INT 4
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: LD_INT 1
54581: NEG
54582: PUSH
54583: LD_INT 3
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 2
54592: PUSH
54593: LD_INT 5
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: PUSH
54600: LD_INT 2
54602: NEG
54603: PUSH
54604: LD_INT 3
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: LD_INT 3
54613: NEG
54614: PUSH
54615: LD_INT 0
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PUSH
54622: LD_INT 3
54624: NEG
54625: PUSH
54626: LD_INT 1
54628: NEG
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: PUSH
54634: LD_INT 2
54636: NEG
54637: PUSH
54638: LD_INT 0
54640: PUSH
54641: EMPTY
54642: LIST
54643: LIST
54644: PUSH
54645: LD_INT 2
54647: NEG
54648: PUSH
54649: LD_INT 1
54651: PUSH
54652: EMPTY
54653: LIST
54654: LIST
54655: PUSH
54656: LD_INT 3
54658: NEG
54659: PUSH
54660: LD_INT 1
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: PUSH
54667: LD_INT 4
54669: NEG
54670: PUSH
54671: LD_INT 0
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: PUSH
54678: LD_INT 4
54680: NEG
54681: PUSH
54682: LD_INT 1
54684: NEG
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: LD_INT 4
54692: NEG
54693: PUSH
54694: LD_INT 2
54696: NEG
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: PUSH
54702: LD_INT 2
54704: NEG
54705: PUSH
54706: LD_INT 2
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: LD_INT 4
54715: NEG
54716: PUSH
54717: LD_INT 4
54719: NEG
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: PUSH
54725: LD_INT 4
54727: NEG
54728: PUSH
54729: LD_INT 5
54731: NEG
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: PUSH
54737: LD_INT 3
54739: NEG
54740: PUSH
54741: LD_INT 4
54743: NEG
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: LD_INT 3
54751: NEG
54752: PUSH
54753: LD_INT 3
54755: NEG
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: PUSH
54761: LD_INT 4
54763: NEG
54764: PUSH
54765: LD_INT 3
54767: NEG
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PUSH
54773: LD_INT 5
54775: NEG
54776: PUSH
54777: LD_INT 4
54779: NEG
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: LD_INT 5
54787: NEG
54788: PUSH
54789: LD_INT 5
54791: NEG
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: PUSH
54797: LD_INT 3
54799: NEG
54800: PUSH
54801: LD_INT 5
54803: NEG
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: LD_INT 5
54811: NEG
54812: PUSH
54813: LD_INT 3
54815: NEG
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: LD_INT 0
54823: PUSH
54824: LD_INT 3
54826: NEG
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: PUSH
54832: LD_INT 0
54834: PUSH
54835: LD_INT 4
54837: NEG
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: LD_INT 1
54845: PUSH
54846: LD_INT 3
54848: NEG
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: PUSH
54854: LD_INT 1
54856: PUSH
54857: LD_INT 2
54859: NEG
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: PUSH
54865: LD_INT 0
54867: PUSH
54868: LD_INT 2
54870: NEG
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PUSH
54876: LD_INT 1
54878: NEG
54879: PUSH
54880: LD_INT 3
54882: NEG
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: PUSH
54888: LD_INT 1
54890: NEG
54891: PUSH
54892: LD_INT 4
54894: NEG
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 2
54902: PUSH
54903: LD_INT 2
54905: NEG
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: LD_INT 2
54913: NEG
54914: PUSH
54915: LD_INT 4
54917: NEG
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: PUSH
54923: LD_INT 4
54925: PUSH
54926: LD_INT 0
54928: PUSH
54929: EMPTY
54930: LIST
54931: LIST
54932: PUSH
54933: LD_INT 4
54935: PUSH
54936: LD_INT 1
54938: NEG
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 5
54946: PUSH
54947: LD_INT 0
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: LD_INT 5
54956: PUSH
54957: LD_INT 1
54959: PUSH
54960: EMPTY
54961: LIST
54962: LIST
54963: PUSH
54964: LD_INT 4
54966: PUSH
54967: LD_INT 1
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: PUSH
54974: LD_INT 3
54976: PUSH
54977: LD_INT 0
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: PUSH
54984: LD_INT 3
54986: PUSH
54987: LD_INT 1
54989: NEG
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: PUSH
54995: LD_INT 3
54997: PUSH
54998: LD_INT 2
55000: NEG
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 5
55008: PUSH
55009: LD_INT 2
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: LIST
55020: LIST
55021: LIST
55022: LIST
55023: LIST
55024: LIST
55025: LIST
55026: LIST
55027: LIST
55028: LIST
55029: LIST
55030: LIST
55031: LIST
55032: LIST
55033: LIST
55034: LIST
55035: LIST
55036: LIST
55037: LIST
55038: LIST
55039: LIST
55040: LIST
55041: LIST
55042: LIST
55043: LIST
55044: LIST
55045: LIST
55046: LIST
55047: LIST
55048: LIST
55049: LIST
55050: LIST
55051: LIST
55052: LIST
55053: LIST
55054: LIST
55055: LIST
55056: LIST
55057: LIST
55058: LIST
55059: LIST
55060: LIST
55061: LIST
55062: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
55063: LD_ADDR_VAR 0 32
55067: PUSH
55068: LD_INT 4
55070: NEG
55071: PUSH
55072: LD_INT 0
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: PUSH
55079: LD_INT 4
55081: NEG
55082: PUSH
55083: LD_INT 1
55085: NEG
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: LD_INT 3
55093: NEG
55094: PUSH
55095: LD_INT 0
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: PUSH
55102: LD_INT 3
55104: NEG
55105: PUSH
55106: LD_INT 1
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 4
55115: NEG
55116: PUSH
55117: LD_INT 1
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: LD_INT 5
55126: NEG
55127: PUSH
55128: LD_INT 0
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: PUSH
55135: LD_INT 5
55137: NEG
55138: PUSH
55139: LD_INT 1
55141: NEG
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: PUSH
55147: LD_INT 5
55149: NEG
55150: PUSH
55151: LD_INT 2
55153: NEG
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: PUSH
55159: LD_INT 3
55161: NEG
55162: PUSH
55163: LD_INT 2
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: LD_INT 3
55172: NEG
55173: PUSH
55174: LD_INT 3
55176: NEG
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PUSH
55182: LD_INT 3
55184: NEG
55185: PUSH
55186: LD_INT 4
55188: NEG
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 2
55196: NEG
55197: PUSH
55198: LD_INT 3
55200: NEG
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: LD_INT 2
55208: NEG
55209: PUSH
55210: LD_INT 2
55212: NEG
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: PUSH
55218: LD_INT 3
55220: NEG
55221: PUSH
55222: LD_INT 2
55224: NEG
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: LD_INT 4
55232: NEG
55233: PUSH
55234: LD_INT 3
55236: NEG
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: PUSH
55242: LD_INT 4
55244: NEG
55245: PUSH
55246: LD_INT 4
55248: NEG
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: PUSH
55254: LD_INT 2
55256: NEG
55257: PUSH
55258: LD_INT 4
55260: NEG
55261: PUSH
55262: EMPTY
55263: LIST
55264: LIST
55265: PUSH
55266: LD_INT 4
55268: NEG
55269: PUSH
55270: LD_INT 2
55272: NEG
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: PUSH
55278: LD_INT 0
55280: PUSH
55281: LD_INT 4
55283: NEG
55284: PUSH
55285: EMPTY
55286: LIST
55287: LIST
55288: PUSH
55289: LD_INT 0
55291: PUSH
55292: LD_INT 5
55294: NEG
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: PUSH
55300: LD_INT 1
55302: PUSH
55303: LD_INT 4
55305: NEG
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: LD_INT 1
55313: PUSH
55314: LD_INT 3
55316: NEG
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: PUSH
55322: LD_INT 0
55324: PUSH
55325: LD_INT 3
55327: NEG
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: PUSH
55333: LD_INT 1
55335: NEG
55336: PUSH
55337: LD_INT 4
55339: NEG
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: LD_INT 1
55347: NEG
55348: PUSH
55349: LD_INT 5
55351: NEG
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: LD_INT 2
55359: PUSH
55360: LD_INT 3
55362: NEG
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: LD_INT 2
55370: NEG
55371: PUSH
55372: LD_INT 5
55374: NEG
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PUSH
55380: LD_INT 3
55382: PUSH
55383: LD_INT 0
55385: PUSH
55386: EMPTY
55387: LIST
55388: LIST
55389: PUSH
55390: LD_INT 3
55392: PUSH
55393: LD_INT 1
55395: NEG
55396: PUSH
55397: EMPTY
55398: LIST
55399: LIST
55400: PUSH
55401: LD_INT 4
55403: PUSH
55404: LD_INT 0
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: PUSH
55411: LD_INT 4
55413: PUSH
55414: LD_INT 1
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PUSH
55421: LD_INT 3
55423: PUSH
55424: LD_INT 1
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: PUSH
55431: LD_INT 2
55433: PUSH
55434: LD_INT 0
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: LD_INT 2
55443: PUSH
55444: LD_INT 1
55446: NEG
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 2
55454: PUSH
55455: LD_INT 2
55457: NEG
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: PUSH
55463: LD_INT 4
55465: PUSH
55466: LD_INT 2
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: PUSH
55473: LD_INT 4
55475: PUSH
55476: LD_INT 4
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: PUSH
55483: LD_INT 4
55485: PUSH
55486: LD_INT 3
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: PUSH
55493: LD_INT 5
55495: PUSH
55496: LD_INT 4
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: LD_INT 5
55505: PUSH
55506: LD_INT 5
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: LD_INT 4
55515: PUSH
55516: LD_INT 5
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: PUSH
55523: LD_INT 3
55525: PUSH
55526: LD_INT 4
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: LD_INT 3
55535: PUSH
55536: LD_INT 3
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: PUSH
55543: LD_INT 5
55545: PUSH
55546: LD_INT 3
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: LD_INT 3
55555: PUSH
55556: LD_INT 5
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: LIST
55567: LIST
55568: LIST
55569: LIST
55570: LIST
55571: LIST
55572: LIST
55573: LIST
55574: LIST
55575: LIST
55576: LIST
55577: LIST
55578: LIST
55579: LIST
55580: LIST
55581: LIST
55582: LIST
55583: LIST
55584: LIST
55585: LIST
55586: LIST
55587: LIST
55588: LIST
55589: LIST
55590: LIST
55591: LIST
55592: LIST
55593: LIST
55594: LIST
55595: LIST
55596: LIST
55597: LIST
55598: LIST
55599: LIST
55600: LIST
55601: LIST
55602: LIST
55603: LIST
55604: LIST
55605: LIST
55606: LIST
55607: LIST
55608: LIST
55609: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
55610: LD_ADDR_VAR 0 33
55614: PUSH
55615: LD_INT 4
55617: NEG
55618: PUSH
55619: LD_INT 4
55621: NEG
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 4
55629: NEG
55630: PUSH
55631: LD_INT 5
55633: NEG
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 3
55641: NEG
55642: PUSH
55643: LD_INT 4
55645: NEG
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: PUSH
55651: LD_INT 3
55653: NEG
55654: PUSH
55655: LD_INT 3
55657: NEG
55658: PUSH
55659: EMPTY
55660: LIST
55661: LIST
55662: PUSH
55663: LD_INT 4
55665: NEG
55666: PUSH
55667: LD_INT 3
55669: NEG
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: LD_INT 5
55677: NEG
55678: PUSH
55679: LD_INT 4
55681: NEG
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: LD_INT 5
55689: NEG
55690: PUSH
55691: LD_INT 5
55693: NEG
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 3
55701: NEG
55702: PUSH
55703: LD_INT 5
55705: NEG
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: PUSH
55711: LD_INT 5
55713: NEG
55714: PUSH
55715: LD_INT 3
55717: NEG
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: LD_INT 0
55725: PUSH
55726: LD_INT 3
55728: NEG
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 0
55736: PUSH
55737: LD_INT 4
55739: NEG
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: LD_INT 1
55747: PUSH
55748: LD_INT 3
55750: NEG
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: PUSH
55756: LD_INT 1
55758: PUSH
55759: LD_INT 2
55761: NEG
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: PUSH
55767: LD_INT 0
55769: PUSH
55770: LD_INT 2
55772: NEG
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: LD_INT 1
55780: NEG
55781: PUSH
55782: LD_INT 3
55784: NEG
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: PUSH
55790: LD_INT 1
55792: NEG
55793: PUSH
55794: LD_INT 4
55796: NEG
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PUSH
55802: LD_INT 2
55804: PUSH
55805: LD_INT 2
55807: NEG
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 2
55815: NEG
55816: PUSH
55817: LD_INT 4
55819: NEG
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: LD_INT 4
55827: PUSH
55828: LD_INT 0
55830: PUSH
55831: EMPTY
55832: LIST
55833: LIST
55834: PUSH
55835: LD_INT 4
55837: PUSH
55838: LD_INT 1
55840: NEG
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: LD_INT 5
55848: PUSH
55849: LD_INT 0
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: PUSH
55856: LD_INT 5
55858: PUSH
55859: LD_INT 1
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: LD_INT 4
55868: PUSH
55869: LD_INT 1
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: LD_INT 3
55878: PUSH
55879: LD_INT 0
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: LD_INT 3
55888: PUSH
55889: LD_INT 1
55891: NEG
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 3
55899: PUSH
55900: LD_INT 2
55902: NEG
55903: PUSH
55904: EMPTY
55905: LIST
55906: LIST
55907: PUSH
55908: LD_INT 5
55910: PUSH
55911: LD_INT 2
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: PUSH
55918: LD_INT 3
55920: PUSH
55921: LD_INT 3
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: LD_INT 3
55930: PUSH
55931: LD_INT 2
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: PUSH
55938: LD_INT 4
55940: PUSH
55941: LD_INT 3
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: PUSH
55948: LD_INT 4
55950: PUSH
55951: LD_INT 4
55953: PUSH
55954: EMPTY
55955: LIST
55956: LIST
55957: PUSH
55958: LD_INT 3
55960: PUSH
55961: LD_INT 4
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PUSH
55968: LD_INT 2
55970: PUSH
55971: LD_INT 3
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: PUSH
55978: LD_INT 2
55980: PUSH
55981: LD_INT 2
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: PUSH
55988: LD_INT 4
55990: PUSH
55991: LD_INT 2
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: PUSH
55998: LD_INT 2
56000: PUSH
56001: LD_INT 4
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: PUSH
56008: LD_INT 0
56010: PUSH
56011: LD_INT 4
56013: PUSH
56014: EMPTY
56015: LIST
56016: LIST
56017: PUSH
56018: LD_INT 0
56020: PUSH
56021: LD_INT 3
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: LD_INT 1
56030: PUSH
56031: LD_INT 4
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: LD_INT 1
56040: PUSH
56041: LD_INT 5
56043: PUSH
56044: EMPTY
56045: LIST
56046: LIST
56047: PUSH
56048: LD_INT 0
56050: PUSH
56051: LD_INT 5
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: LD_INT 1
56060: NEG
56061: PUSH
56062: LD_INT 4
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 1
56071: NEG
56072: PUSH
56073: LD_INT 3
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: LD_INT 2
56082: PUSH
56083: LD_INT 5
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: LD_INT 2
56092: NEG
56093: PUSH
56094: LD_INT 3
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: LIST
56105: LIST
56106: LIST
56107: LIST
56108: LIST
56109: LIST
56110: LIST
56111: LIST
56112: LIST
56113: LIST
56114: LIST
56115: LIST
56116: LIST
56117: LIST
56118: LIST
56119: LIST
56120: LIST
56121: LIST
56122: LIST
56123: LIST
56124: LIST
56125: LIST
56126: LIST
56127: LIST
56128: LIST
56129: LIST
56130: LIST
56131: LIST
56132: LIST
56133: LIST
56134: LIST
56135: LIST
56136: LIST
56137: LIST
56138: LIST
56139: LIST
56140: LIST
56141: LIST
56142: LIST
56143: LIST
56144: LIST
56145: LIST
56146: LIST
56147: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
56148: LD_ADDR_VAR 0 34
56152: PUSH
56153: LD_INT 0
56155: PUSH
56156: LD_INT 4
56158: NEG
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PUSH
56164: LD_INT 0
56166: PUSH
56167: LD_INT 5
56169: NEG
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: PUSH
56175: LD_INT 1
56177: PUSH
56178: LD_INT 4
56180: NEG
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: PUSH
56186: LD_INT 1
56188: PUSH
56189: LD_INT 3
56191: NEG
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: LD_INT 0
56199: PUSH
56200: LD_INT 3
56202: NEG
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: LD_INT 1
56210: NEG
56211: PUSH
56212: LD_INT 4
56214: NEG
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: LD_INT 1
56222: NEG
56223: PUSH
56224: LD_INT 5
56226: NEG
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 2
56234: PUSH
56235: LD_INT 3
56237: NEG
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 2
56245: NEG
56246: PUSH
56247: LD_INT 5
56249: NEG
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PUSH
56255: LD_INT 3
56257: PUSH
56258: LD_INT 0
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: LD_INT 3
56267: PUSH
56268: LD_INT 1
56270: NEG
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: LD_INT 4
56278: PUSH
56279: LD_INT 0
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: PUSH
56286: LD_INT 4
56288: PUSH
56289: LD_INT 1
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: PUSH
56296: LD_INT 3
56298: PUSH
56299: LD_INT 1
56301: PUSH
56302: EMPTY
56303: LIST
56304: LIST
56305: PUSH
56306: LD_INT 2
56308: PUSH
56309: LD_INT 0
56311: PUSH
56312: EMPTY
56313: LIST
56314: LIST
56315: PUSH
56316: LD_INT 2
56318: PUSH
56319: LD_INT 1
56321: NEG
56322: PUSH
56323: EMPTY
56324: LIST
56325: LIST
56326: PUSH
56327: LD_INT 2
56329: PUSH
56330: LD_INT 2
56332: NEG
56333: PUSH
56334: EMPTY
56335: LIST
56336: LIST
56337: PUSH
56338: LD_INT 4
56340: PUSH
56341: LD_INT 2
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: PUSH
56348: LD_INT 4
56350: PUSH
56351: LD_INT 4
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: PUSH
56358: LD_INT 4
56360: PUSH
56361: LD_INT 3
56363: PUSH
56364: EMPTY
56365: LIST
56366: LIST
56367: PUSH
56368: LD_INT 5
56370: PUSH
56371: LD_INT 4
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: PUSH
56378: LD_INT 5
56380: PUSH
56381: LD_INT 5
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: PUSH
56388: LD_INT 4
56390: PUSH
56391: LD_INT 5
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: PUSH
56398: LD_INT 3
56400: PUSH
56401: LD_INT 4
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: PUSH
56408: LD_INT 3
56410: PUSH
56411: LD_INT 3
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: PUSH
56418: LD_INT 5
56420: PUSH
56421: LD_INT 3
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: PUSH
56428: LD_INT 3
56430: PUSH
56431: LD_INT 5
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: LD_INT 0
56440: PUSH
56441: LD_INT 3
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: PUSH
56448: LD_INT 0
56450: PUSH
56451: LD_INT 2
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: PUSH
56458: LD_INT 1
56460: PUSH
56461: LD_INT 3
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: PUSH
56468: LD_INT 1
56470: PUSH
56471: LD_INT 4
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: PUSH
56478: LD_INT 0
56480: PUSH
56481: LD_INT 4
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: LD_INT 1
56490: NEG
56491: PUSH
56492: LD_INT 3
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: PUSH
56499: LD_INT 1
56501: NEG
56502: PUSH
56503: LD_INT 2
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: PUSH
56510: LD_INT 2
56512: PUSH
56513: LD_INT 4
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: PUSH
56520: LD_INT 2
56522: NEG
56523: PUSH
56524: LD_INT 2
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PUSH
56531: LD_INT 4
56533: NEG
56534: PUSH
56535: LD_INT 0
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: LD_INT 4
56544: NEG
56545: PUSH
56546: LD_INT 1
56548: NEG
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PUSH
56554: LD_INT 3
56556: NEG
56557: PUSH
56558: LD_INT 0
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 3
56567: NEG
56568: PUSH
56569: LD_INT 1
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: LD_INT 4
56578: NEG
56579: PUSH
56580: LD_INT 1
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: LD_INT 5
56589: NEG
56590: PUSH
56591: LD_INT 0
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: LD_INT 5
56600: NEG
56601: PUSH
56602: LD_INT 1
56604: NEG
56605: PUSH
56606: EMPTY
56607: LIST
56608: LIST
56609: PUSH
56610: LD_INT 5
56612: NEG
56613: PUSH
56614: LD_INT 2
56616: NEG
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PUSH
56622: LD_INT 3
56624: NEG
56625: PUSH
56626: LD_INT 2
56628: PUSH
56629: EMPTY
56630: LIST
56631: LIST
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: LIST
56637: LIST
56638: LIST
56639: LIST
56640: LIST
56641: LIST
56642: LIST
56643: LIST
56644: LIST
56645: LIST
56646: LIST
56647: LIST
56648: LIST
56649: LIST
56650: LIST
56651: LIST
56652: LIST
56653: LIST
56654: LIST
56655: LIST
56656: LIST
56657: LIST
56658: LIST
56659: LIST
56660: LIST
56661: LIST
56662: LIST
56663: LIST
56664: LIST
56665: LIST
56666: LIST
56667: LIST
56668: LIST
56669: LIST
56670: LIST
56671: LIST
56672: LIST
56673: LIST
56674: LIST
56675: LIST
56676: LIST
56677: LIST
56678: LIST
56679: ST_TO_ADDR
// end ; end ;
56680: GO 56683
56682: POP
// case btype of b_depot , b_warehouse :
56683: LD_VAR 0 1
56687: PUSH
56688: LD_INT 0
56690: DOUBLE
56691: EQUAL
56692: IFTRUE 56702
56694: LD_INT 1
56696: DOUBLE
56697: EQUAL
56698: IFTRUE 56702
56700: GO 56903
56702: POP
// case nation of nation_american :
56703: LD_VAR 0 5
56707: PUSH
56708: LD_INT 1
56710: DOUBLE
56711: EQUAL
56712: IFTRUE 56716
56714: GO 56772
56716: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
56717: LD_ADDR_VAR 0 9
56721: PUSH
56722: LD_VAR 0 11
56726: PUSH
56727: LD_VAR 0 12
56731: PUSH
56732: LD_VAR 0 13
56736: PUSH
56737: LD_VAR 0 14
56741: PUSH
56742: LD_VAR 0 15
56746: PUSH
56747: LD_VAR 0 16
56751: PUSH
56752: EMPTY
56753: LIST
56754: LIST
56755: LIST
56756: LIST
56757: LIST
56758: LIST
56759: PUSH
56760: LD_VAR 0 4
56764: PUSH
56765: LD_INT 1
56767: PLUS
56768: ARRAY
56769: ST_TO_ADDR
56770: GO 56901
56772: LD_INT 2
56774: DOUBLE
56775: EQUAL
56776: IFTRUE 56780
56778: GO 56836
56780: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
56781: LD_ADDR_VAR 0 9
56785: PUSH
56786: LD_VAR 0 17
56790: PUSH
56791: LD_VAR 0 18
56795: PUSH
56796: LD_VAR 0 19
56800: PUSH
56801: LD_VAR 0 20
56805: PUSH
56806: LD_VAR 0 21
56810: PUSH
56811: LD_VAR 0 22
56815: PUSH
56816: EMPTY
56817: LIST
56818: LIST
56819: LIST
56820: LIST
56821: LIST
56822: LIST
56823: PUSH
56824: LD_VAR 0 4
56828: PUSH
56829: LD_INT 1
56831: PLUS
56832: ARRAY
56833: ST_TO_ADDR
56834: GO 56901
56836: LD_INT 3
56838: DOUBLE
56839: EQUAL
56840: IFTRUE 56844
56842: GO 56900
56844: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
56845: LD_ADDR_VAR 0 9
56849: PUSH
56850: LD_VAR 0 23
56854: PUSH
56855: LD_VAR 0 24
56859: PUSH
56860: LD_VAR 0 25
56864: PUSH
56865: LD_VAR 0 26
56869: PUSH
56870: LD_VAR 0 27
56874: PUSH
56875: LD_VAR 0 28
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: LIST
56884: LIST
56885: LIST
56886: LIST
56887: PUSH
56888: LD_VAR 0 4
56892: PUSH
56893: LD_INT 1
56895: PLUS
56896: ARRAY
56897: ST_TO_ADDR
56898: GO 56901
56900: POP
56901: GO 57456
56903: LD_INT 2
56905: DOUBLE
56906: EQUAL
56907: IFTRUE 56917
56909: LD_INT 3
56911: DOUBLE
56912: EQUAL
56913: IFTRUE 56917
56915: GO 56973
56917: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
56918: LD_ADDR_VAR 0 9
56922: PUSH
56923: LD_VAR 0 29
56927: PUSH
56928: LD_VAR 0 30
56932: PUSH
56933: LD_VAR 0 31
56937: PUSH
56938: LD_VAR 0 32
56942: PUSH
56943: LD_VAR 0 33
56947: PUSH
56948: LD_VAR 0 34
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: LIST
56957: LIST
56958: LIST
56959: LIST
56960: PUSH
56961: LD_VAR 0 4
56965: PUSH
56966: LD_INT 1
56968: PLUS
56969: ARRAY
56970: ST_TO_ADDR
56971: GO 57456
56973: LD_INT 16
56975: DOUBLE
56976: EQUAL
56977: IFTRUE 57035
56979: LD_INT 17
56981: DOUBLE
56982: EQUAL
56983: IFTRUE 57035
56985: LD_INT 18
56987: DOUBLE
56988: EQUAL
56989: IFTRUE 57035
56991: LD_INT 19
56993: DOUBLE
56994: EQUAL
56995: IFTRUE 57035
56997: LD_INT 22
56999: DOUBLE
57000: EQUAL
57001: IFTRUE 57035
57003: LD_INT 20
57005: DOUBLE
57006: EQUAL
57007: IFTRUE 57035
57009: LD_INT 21
57011: DOUBLE
57012: EQUAL
57013: IFTRUE 57035
57015: LD_INT 23
57017: DOUBLE
57018: EQUAL
57019: IFTRUE 57035
57021: LD_INT 24
57023: DOUBLE
57024: EQUAL
57025: IFTRUE 57035
57027: LD_INT 25
57029: DOUBLE
57030: EQUAL
57031: IFTRUE 57035
57033: GO 57091
57035: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
57036: LD_ADDR_VAR 0 9
57040: PUSH
57041: LD_VAR 0 35
57045: PUSH
57046: LD_VAR 0 36
57050: PUSH
57051: LD_VAR 0 37
57055: PUSH
57056: LD_VAR 0 38
57060: PUSH
57061: LD_VAR 0 39
57065: PUSH
57066: LD_VAR 0 40
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: LIST
57075: LIST
57076: LIST
57077: LIST
57078: PUSH
57079: LD_VAR 0 4
57083: PUSH
57084: LD_INT 1
57086: PLUS
57087: ARRAY
57088: ST_TO_ADDR
57089: GO 57456
57091: LD_INT 6
57093: DOUBLE
57094: EQUAL
57095: IFTRUE 57147
57097: LD_INT 7
57099: DOUBLE
57100: EQUAL
57101: IFTRUE 57147
57103: LD_INT 8
57105: DOUBLE
57106: EQUAL
57107: IFTRUE 57147
57109: LD_INT 13
57111: DOUBLE
57112: EQUAL
57113: IFTRUE 57147
57115: LD_INT 12
57117: DOUBLE
57118: EQUAL
57119: IFTRUE 57147
57121: LD_INT 15
57123: DOUBLE
57124: EQUAL
57125: IFTRUE 57147
57127: LD_INT 11
57129: DOUBLE
57130: EQUAL
57131: IFTRUE 57147
57133: LD_INT 14
57135: DOUBLE
57136: EQUAL
57137: IFTRUE 57147
57139: LD_INT 10
57141: DOUBLE
57142: EQUAL
57143: IFTRUE 57147
57145: GO 57203
57147: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
57148: LD_ADDR_VAR 0 9
57152: PUSH
57153: LD_VAR 0 41
57157: PUSH
57158: LD_VAR 0 42
57162: PUSH
57163: LD_VAR 0 43
57167: PUSH
57168: LD_VAR 0 44
57172: PUSH
57173: LD_VAR 0 45
57177: PUSH
57178: LD_VAR 0 46
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: LIST
57187: LIST
57188: LIST
57189: LIST
57190: PUSH
57191: LD_VAR 0 4
57195: PUSH
57196: LD_INT 1
57198: PLUS
57199: ARRAY
57200: ST_TO_ADDR
57201: GO 57456
57203: LD_INT 36
57205: DOUBLE
57206: EQUAL
57207: IFTRUE 57211
57209: GO 57267
57211: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
57212: LD_ADDR_VAR 0 9
57216: PUSH
57217: LD_VAR 0 47
57221: PUSH
57222: LD_VAR 0 48
57226: PUSH
57227: LD_VAR 0 49
57231: PUSH
57232: LD_VAR 0 50
57236: PUSH
57237: LD_VAR 0 51
57241: PUSH
57242: LD_VAR 0 52
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: LIST
57251: LIST
57252: LIST
57253: LIST
57254: PUSH
57255: LD_VAR 0 4
57259: PUSH
57260: LD_INT 1
57262: PLUS
57263: ARRAY
57264: ST_TO_ADDR
57265: GO 57456
57267: LD_INT 4
57269: DOUBLE
57270: EQUAL
57271: IFTRUE 57293
57273: LD_INT 5
57275: DOUBLE
57276: EQUAL
57277: IFTRUE 57293
57279: LD_INT 34
57281: DOUBLE
57282: EQUAL
57283: IFTRUE 57293
57285: LD_INT 37
57287: DOUBLE
57288: EQUAL
57289: IFTRUE 57293
57291: GO 57349
57293: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
57294: LD_ADDR_VAR 0 9
57298: PUSH
57299: LD_VAR 0 53
57303: PUSH
57304: LD_VAR 0 54
57308: PUSH
57309: LD_VAR 0 55
57313: PUSH
57314: LD_VAR 0 56
57318: PUSH
57319: LD_VAR 0 57
57323: PUSH
57324: LD_VAR 0 58
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: LIST
57333: LIST
57334: LIST
57335: LIST
57336: PUSH
57337: LD_VAR 0 4
57341: PUSH
57342: LD_INT 1
57344: PLUS
57345: ARRAY
57346: ST_TO_ADDR
57347: GO 57456
57349: LD_INT 31
57351: DOUBLE
57352: EQUAL
57353: IFTRUE 57399
57355: LD_INT 32
57357: DOUBLE
57358: EQUAL
57359: IFTRUE 57399
57361: LD_INT 33
57363: DOUBLE
57364: EQUAL
57365: IFTRUE 57399
57367: LD_INT 27
57369: DOUBLE
57370: EQUAL
57371: IFTRUE 57399
57373: LD_INT 26
57375: DOUBLE
57376: EQUAL
57377: IFTRUE 57399
57379: LD_INT 28
57381: DOUBLE
57382: EQUAL
57383: IFTRUE 57399
57385: LD_INT 29
57387: DOUBLE
57388: EQUAL
57389: IFTRUE 57399
57391: LD_INT 30
57393: DOUBLE
57394: EQUAL
57395: IFTRUE 57399
57397: GO 57455
57399: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
57400: LD_ADDR_VAR 0 9
57404: PUSH
57405: LD_VAR 0 59
57409: PUSH
57410: LD_VAR 0 60
57414: PUSH
57415: LD_VAR 0 61
57419: PUSH
57420: LD_VAR 0 62
57424: PUSH
57425: LD_VAR 0 63
57429: PUSH
57430: LD_VAR 0 64
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: LIST
57439: LIST
57440: LIST
57441: LIST
57442: PUSH
57443: LD_VAR 0 4
57447: PUSH
57448: LD_INT 1
57450: PLUS
57451: ARRAY
57452: ST_TO_ADDR
57453: GO 57456
57455: POP
// temp_list2 = [ ] ;
57456: LD_ADDR_VAR 0 10
57460: PUSH
57461: EMPTY
57462: ST_TO_ADDR
// for i in temp_list do
57463: LD_ADDR_VAR 0 8
57467: PUSH
57468: LD_VAR 0 9
57472: PUSH
57473: FOR_IN
57474: IFFALSE 57526
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
57476: LD_ADDR_VAR 0 10
57480: PUSH
57481: LD_VAR 0 10
57485: PUSH
57486: LD_VAR 0 8
57490: PUSH
57491: LD_INT 1
57493: ARRAY
57494: PUSH
57495: LD_VAR 0 2
57499: PLUS
57500: PUSH
57501: LD_VAR 0 8
57505: PUSH
57506: LD_INT 2
57508: ARRAY
57509: PUSH
57510: LD_VAR 0 3
57514: PLUS
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: EMPTY
57521: LIST
57522: ADD
57523: ST_TO_ADDR
57524: GO 57473
57526: POP
57527: POP
// result = temp_list2 ;
57528: LD_ADDR_VAR 0 7
57532: PUSH
57533: LD_VAR 0 10
57537: ST_TO_ADDR
// end ;
57538: LD_VAR 0 7
57542: RET
// export function EnemyInRange ( unit , dist ) ; begin
57543: LD_INT 0
57545: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
57546: LD_ADDR_VAR 0 3
57550: PUSH
57551: LD_VAR 0 1
57555: PPUSH
57556: CALL_OW 255
57560: PPUSH
57561: LD_VAR 0 1
57565: PPUSH
57566: CALL_OW 250
57570: PPUSH
57571: LD_VAR 0 1
57575: PPUSH
57576: CALL_OW 251
57580: PPUSH
57581: LD_VAR 0 2
57585: PPUSH
57586: CALL 30939 0 4
57590: PUSH
57591: LD_INT 4
57593: ARRAY
57594: ST_TO_ADDR
// end ;
57595: LD_VAR 0 3
57599: RET
// export function PlayerSeeMe ( unit ) ; begin
57600: LD_INT 0
57602: PPUSH
// result := See ( your_side , unit ) ;
57603: LD_ADDR_VAR 0 2
57607: PUSH
57608: LD_OWVAR 2
57612: PPUSH
57613: LD_VAR 0 1
57617: PPUSH
57618: CALL_OW 292
57622: ST_TO_ADDR
// end ;
57623: LD_VAR 0 2
57627: RET
// export function ReverseDir ( unit ) ; begin
57628: LD_INT 0
57630: PPUSH
// if not unit then
57631: LD_VAR 0 1
57635: NOT
57636: IFFALSE 57640
// exit ;
57638: GO 57663
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
57640: LD_ADDR_VAR 0 2
57644: PUSH
57645: LD_VAR 0 1
57649: PPUSH
57650: CALL_OW 254
57654: PUSH
57655: LD_INT 3
57657: PLUS
57658: PUSH
57659: LD_INT 6
57661: MOD
57662: ST_TO_ADDR
// end ;
57663: LD_VAR 0 2
57667: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
57668: LD_INT 0
57670: PPUSH
57671: PPUSH
57672: PPUSH
57673: PPUSH
57674: PPUSH
// if not hexes then
57675: LD_VAR 0 2
57679: NOT
57680: IFFALSE 57684
// exit ;
57682: GO 57832
// dist := 9999 ;
57684: LD_ADDR_VAR 0 5
57688: PUSH
57689: LD_INT 9999
57691: ST_TO_ADDR
// for i = 1 to hexes do
57692: LD_ADDR_VAR 0 4
57696: PUSH
57697: DOUBLE
57698: LD_INT 1
57700: DEC
57701: ST_TO_ADDR
57702: LD_VAR 0 2
57706: PUSH
57707: FOR_TO
57708: IFFALSE 57820
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
57710: LD_VAR 0 1
57714: PPUSH
57715: LD_VAR 0 2
57719: PUSH
57720: LD_VAR 0 4
57724: ARRAY
57725: PUSH
57726: LD_INT 1
57728: ARRAY
57729: PPUSH
57730: LD_VAR 0 2
57734: PUSH
57735: LD_VAR 0 4
57739: ARRAY
57740: PUSH
57741: LD_INT 2
57743: ARRAY
57744: PPUSH
57745: CALL_OW 297
57749: PUSH
57750: LD_VAR 0 5
57754: LESS
57755: IFFALSE 57818
// begin hex := hexes [ i ] ;
57757: LD_ADDR_VAR 0 7
57761: PUSH
57762: LD_VAR 0 2
57766: PUSH
57767: LD_VAR 0 4
57771: ARRAY
57772: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57773: LD_ADDR_VAR 0 5
57777: PUSH
57778: LD_VAR 0 1
57782: PPUSH
57783: LD_VAR 0 2
57787: PUSH
57788: LD_VAR 0 4
57792: ARRAY
57793: PUSH
57794: LD_INT 1
57796: ARRAY
57797: PPUSH
57798: LD_VAR 0 2
57802: PUSH
57803: LD_VAR 0 4
57807: ARRAY
57808: PUSH
57809: LD_INT 2
57811: ARRAY
57812: PPUSH
57813: CALL_OW 297
57817: ST_TO_ADDR
// end ; end ;
57818: GO 57707
57820: POP
57821: POP
// result := hex ;
57822: LD_ADDR_VAR 0 3
57826: PUSH
57827: LD_VAR 0 7
57831: ST_TO_ADDR
// end ;
57832: LD_VAR 0 3
57836: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
57837: LD_INT 0
57839: PPUSH
57840: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
57841: LD_VAR 0 1
57845: NOT
57846: PUSH
57847: LD_VAR 0 1
57851: PUSH
57852: LD_INT 21
57854: PUSH
57855: LD_INT 2
57857: PUSH
57858: EMPTY
57859: LIST
57860: LIST
57861: PUSH
57862: LD_INT 23
57864: PUSH
57865: LD_INT 2
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: PUSH
57872: EMPTY
57873: LIST
57874: LIST
57875: PPUSH
57876: CALL_OW 69
57880: IN
57881: NOT
57882: OR
57883: IFFALSE 57887
// exit ;
57885: GO 57934
// for i = 1 to 3 do
57887: LD_ADDR_VAR 0 3
57891: PUSH
57892: DOUBLE
57893: LD_INT 1
57895: DEC
57896: ST_TO_ADDR
57897: LD_INT 3
57899: PUSH
57900: FOR_TO
57901: IFFALSE 57932
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
57903: LD_VAR 0 1
57907: PPUSH
57908: CALL_OW 250
57912: PPUSH
57913: LD_VAR 0 1
57917: PPUSH
57918: CALL_OW 251
57922: PPUSH
57923: LD_INT 1
57925: PPUSH
57926: CALL_OW 453
57930: GO 57900
57932: POP
57933: POP
// end ;
57934: LD_VAR 0 2
57938: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
57939: LD_INT 0
57941: PPUSH
57942: PPUSH
57943: PPUSH
57944: PPUSH
57945: PPUSH
57946: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
57947: LD_VAR 0 1
57951: NOT
57952: PUSH
57953: LD_VAR 0 2
57957: NOT
57958: OR
57959: PUSH
57960: LD_VAR 0 1
57964: PPUSH
57965: CALL_OW 314
57969: OR
57970: IFFALSE 57974
// exit ;
57972: GO 58415
// x := GetX ( enemy_unit ) ;
57974: LD_ADDR_VAR 0 7
57978: PUSH
57979: LD_VAR 0 2
57983: PPUSH
57984: CALL_OW 250
57988: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
57989: LD_ADDR_VAR 0 8
57993: PUSH
57994: LD_VAR 0 2
57998: PPUSH
57999: CALL_OW 251
58003: ST_TO_ADDR
// if not x or not y then
58004: LD_VAR 0 7
58008: NOT
58009: PUSH
58010: LD_VAR 0 8
58014: NOT
58015: OR
58016: IFFALSE 58020
// exit ;
58018: GO 58415
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
58020: LD_ADDR_VAR 0 6
58024: PUSH
58025: LD_VAR 0 7
58029: PPUSH
58030: LD_INT 0
58032: PPUSH
58033: LD_INT 4
58035: PPUSH
58036: CALL_OW 272
58040: PUSH
58041: LD_VAR 0 8
58045: PPUSH
58046: LD_INT 0
58048: PPUSH
58049: LD_INT 4
58051: PPUSH
58052: CALL_OW 273
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_VAR 0 7
58065: PPUSH
58066: LD_INT 1
58068: PPUSH
58069: LD_INT 4
58071: PPUSH
58072: CALL_OW 272
58076: PUSH
58077: LD_VAR 0 8
58081: PPUSH
58082: LD_INT 1
58084: PPUSH
58085: LD_INT 4
58087: PPUSH
58088: CALL_OW 273
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: LD_VAR 0 7
58101: PPUSH
58102: LD_INT 2
58104: PPUSH
58105: LD_INT 4
58107: PPUSH
58108: CALL_OW 272
58112: PUSH
58113: LD_VAR 0 8
58117: PPUSH
58118: LD_INT 2
58120: PPUSH
58121: LD_INT 4
58123: PPUSH
58124: CALL_OW 273
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: LD_VAR 0 7
58137: PPUSH
58138: LD_INT 3
58140: PPUSH
58141: LD_INT 4
58143: PPUSH
58144: CALL_OW 272
58148: PUSH
58149: LD_VAR 0 8
58153: PPUSH
58154: LD_INT 3
58156: PPUSH
58157: LD_INT 4
58159: PPUSH
58160: CALL_OW 273
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: LD_VAR 0 7
58173: PPUSH
58174: LD_INT 4
58176: PPUSH
58177: LD_INT 4
58179: PPUSH
58180: CALL_OW 272
58184: PUSH
58185: LD_VAR 0 8
58189: PPUSH
58190: LD_INT 4
58192: PPUSH
58193: LD_INT 4
58195: PPUSH
58196: CALL_OW 273
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: PUSH
58205: LD_VAR 0 7
58209: PPUSH
58210: LD_INT 5
58212: PPUSH
58213: LD_INT 4
58215: PPUSH
58216: CALL_OW 272
58220: PUSH
58221: LD_VAR 0 8
58225: PPUSH
58226: LD_INT 5
58228: PPUSH
58229: LD_INT 4
58231: PPUSH
58232: CALL_OW 273
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: PUSH
58241: EMPTY
58242: LIST
58243: LIST
58244: LIST
58245: LIST
58246: LIST
58247: LIST
58248: ST_TO_ADDR
// for i = tmp downto 1 do
58249: LD_ADDR_VAR 0 4
58253: PUSH
58254: DOUBLE
58255: LD_VAR 0 6
58259: INC
58260: ST_TO_ADDR
58261: LD_INT 1
58263: PUSH
58264: FOR_DOWNTO
58265: IFFALSE 58366
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
58267: LD_VAR 0 6
58271: PUSH
58272: LD_VAR 0 4
58276: ARRAY
58277: PUSH
58278: LD_INT 1
58280: ARRAY
58281: PPUSH
58282: LD_VAR 0 6
58286: PUSH
58287: LD_VAR 0 4
58291: ARRAY
58292: PUSH
58293: LD_INT 2
58295: ARRAY
58296: PPUSH
58297: CALL_OW 488
58301: NOT
58302: PUSH
58303: LD_VAR 0 6
58307: PUSH
58308: LD_VAR 0 4
58312: ARRAY
58313: PUSH
58314: LD_INT 1
58316: ARRAY
58317: PPUSH
58318: LD_VAR 0 6
58322: PUSH
58323: LD_VAR 0 4
58327: ARRAY
58328: PUSH
58329: LD_INT 2
58331: ARRAY
58332: PPUSH
58333: CALL_OW 428
58337: PUSH
58338: LD_INT 0
58340: NONEQUAL
58341: OR
58342: IFFALSE 58364
// tmp := Delete ( tmp , i ) ;
58344: LD_ADDR_VAR 0 6
58348: PUSH
58349: LD_VAR 0 6
58353: PPUSH
58354: LD_VAR 0 4
58358: PPUSH
58359: CALL_OW 3
58363: ST_TO_ADDR
58364: GO 58264
58366: POP
58367: POP
// j := GetClosestHex ( unit , tmp ) ;
58368: LD_ADDR_VAR 0 5
58372: PUSH
58373: LD_VAR 0 1
58377: PPUSH
58378: LD_VAR 0 6
58382: PPUSH
58383: CALL 57668 0 2
58387: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
58388: LD_VAR 0 1
58392: PPUSH
58393: LD_VAR 0 5
58397: PUSH
58398: LD_INT 1
58400: ARRAY
58401: PPUSH
58402: LD_VAR 0 5
58406: PUSH
58407: LD_INT 2
58409: ARRAY
58410: PPUSH
58411: CALL_OW 111
// end ;
58415: LD_VAR 0 3
58419: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
58420: LD_INT 0
58422: PPUSH
58423: PPUSH
58424: PPUSH
// uc_side = 0 ;
58425: LD_ADDR_OWVAR 20
58429: PUSH
58430: LD_INT 0
58432: ST_TO_ADDR
// uc_nation = 0 ;
58433: LD_ADDR_OWVAR 21
58437: PUSH
58438: LD_INT 0
58440: ST_TO_ADDR
// InitHc_All ( ) ;
58441: CALL_OW 584
// InitVc ;
58445: CALL_OW 20
// if mastodonts then
58449: LD_VAR 0 6
58453: IFFALSE 58520
// for i = 1 to mastodonts do
58455: LD_ADDR_VAR 0 11
58459: PUSH
58460: DOUBLE
58461: LD_INT 1
58463: DEC
58464: ST_TO_ADDR
58465: LD_VAR 0 6
58469: PUSH
58470: FOR_TO
58471: IFFALSE 58518
// begin vc_chassis := 31 ;
58473: LD_ADDR_OWVAR 37
58477: PUSH
58478: LD_INT 31
58480: ST_TO_ADDR
// vc_control := control_rider ;
58481: LD_ADDR_OWVAR 38
58485: PUSH
58486: LD_INT 4
58488: ST_TO_ADDR
// animal := CreateVehicle ;
58489: LD_ADDR_VAR 0 12
58493: PUSH
58494: CALL_OW 45
58498: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58499: LD_VAR 0 12
58503: PPUSH
58504: LD_VAR 0 8
58508: PPUSH
58509: LD_INT 0
58511: PPUSH
58512: CALL 60655 0 3
// end ;
58516: GO 58470
58518: POP
58519: POP
// if horses then
58520: LD_VAR 0 5
58524: IFFALSE 58591
// for i = 1 to horses do
58526: LD_ADDR_VAR 0 11
58530: PUSH
58531: DOUBLE
58532: LD_INT 1
58534: DEC
58535: ST_TO_ADDR
58536: LD_VAR 0 5
58540: PUSH
58541: FOR_TO
58542: IFFALSE 58589
// begin hc_class := 21 ;
58544: LD_ADDR_OWVAR 28
58548: PUSH
58549: LD_INT 21
58551: ST_TO_ADDR
// hc_gallery :=  ;
58552: LD_ADDR_OWVAR 33
58556: PUSH
58557: LD_STRING 
58559: ST_TO_ADDR
// animal := CreateHuman ;
58560: LD_ADDR_VAR 0 12
58564: PUSH
58565: CALL_OW 44
58569: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58570: LD_VAR 0 12
58574: PPUSH
58575: LD_VAR 0 8
58579: PPUSH
58580: LD_INT 0
58582: PPUSH
58583: CALL 60655 0 3
// end ;
58587: GO 58541
58589: POP
58590: POP
// if birds then
58591: LD_VAR 0 1
58595: IFFALSE 58662
// for i = 1 to birds do
58597: LD_ADDR_VAR 0 11
58601: PUSH
58602: DOUBLE
58603: LD_INT 1
58605: DEC
58606: ST_TO_ADDR
58607: LD_VAR 0 1
58611: PUSH
58612: FOR_TO
58613: IFFALSE 58660
// begin hc_class = 18 ;
58615: LD_ADDR_OWVAR 28
58619: PUSH
58620: LD_INT 18
58622: ST_TO_ADDR
// hc_gallery =  ;
58623: LD_ADDR_OWVAR 33
58627: PUSH
58628: LD_STRING 
58630: ST_TO_ADDR
// animal := CreateHuman ;
58631: LD_ADDR_VAR 0 12
58635: PUSH
58636: CALL_OW 44
58640: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58641: LD_VAR 0 12
58645: PPUSH
58646: LD_VAR 0 8
58650: PPUSH
58651: LD_INT 0
58653: PPUSH
58654: CALL 60655 0 3
// end ;
58658: GO 58612
58660: POP
58661: POP
// if tigers then
58662: LD_VAR 0 2
58666: IFFALSE 58750
// for i = 1 to tigers do
58668: LD_ADDR_VAR 0 11
58672: PUSH
58673: DOUBLE
58674: LD_INT 1
58676: DEC
58677: ST_TO_ADDR
58678: LD_VAR 0 2
58682: PUSH
58683: FOR_TO
58684: IFFALSE 58748
// begin hc_class = class_tiger ;
58686: LD_ADDR_OWVAR 28
58690: PUSH
58691: LD_INT 14
58693: ST_TO_ADDR
// hc_gallery =  ;
58694: LD_ADDR_OWVAR 33
58698: PUSH
58699: LD_STRING 
58701: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
58702: LD_ADDR_OWVAR 35
58706: PUSH
58707: LD_INT 7
58709: NEG
58710: PPUSH
58711: LD_INT 7
58713: PPUSH
58714: CALL_OW 12
58718: ST_TO_ADDR
// animal := CreateHuman ;
58719: LD_ADDR_VAR 0 12
58723: PUSH
58724: CALL_OW 44
58728: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58729: LD_VAR 0 12
58733: PPUSH
58734: LD_VAR 0 8
58738: PPUSH
58739: LD_INT 0
58741: PPUSH
58742: CALL 60655 0 3
// end ;
58746: GO 58683
58748: POP
58749: POP
// if apemans then
58750: LD_VAR 0 3
58754: IFFALSE 58877
// for i = 1 to apemans do
58756: LD_ADDR_VAR 0 11
58760: PUSH
58761: DOUBLE
58762: LD_INT 1
58764: DEC
58765: ST_TO_ADDR
58766: LD_VAR 0 3
58770: PUSH
58771: FOR_TO
58772: IFFALSE 58875
// begin hc_class = class_apeman ;
58774: LD_ADDR_OWVAR 28
58778: PUSH
58779: LD_INT 12
58781: ST_TO_ADDR
// hc_gallery =  ;
58782: LD_ADDR_OWVAR 33
58786: PUSH
58787: LD_STRING 
58789: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
58790: LD_ADDR_OWVAR 35
58794: PUSH
58795: LD_INT 2
58797: NEG
58798: PPUSH
58799: LD_INT 2
58801: PPUSH
58802: CALL_OW 12
58806: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
58807: LD_ADDR_OWVAR 31
58811: PUSH
58812: LD_INT 1
58814: PPUSH
58815: LD_INT 3
58817: PPUSH
58818: CALL_OW 12
58822: PUSH
58823: LD_INT 1
58825: PPUSH
58826: LD_INT 3
58828: PPUSH
58829: CALL_OW 12
58833: PUSH
58834: LD_INT 0
58836: PUSH
58837: LD_INT 0
58839: PUSH
58840: EMPTY
58841: LIST
58842: LIST
58843: LIST
58844: LIST
58845: ST_TO_ADDR
// animal := CreateHuman ;
58846: LD_ADDR_VAR 0 12
58850: PUSH
58851: CALL_OW 44
58855: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58856: LD_VAR 0 12
58860: PPUSH
58861: LD_VAR 0 8
58865: PPUSH
58866: LD_INT 0
58868: PPUSH
58869: CALL 60655 0 3
// end ;
58873: GO 58771
58875: POP
58876: POP
// if enchidnas then
58877: LD_VAR 0 4
58881: IFFALSE 58948
// for i = 1 to enchidnas do
58883: LD_ADDR_VAR 0 11
58887: PUSH
58888: DOUBLE
58889: LD_INT 1
58891: DEC
58892: ST_TO_ADDR
58893: LD_VAR 0 4
58897: PUSH
58898: FOR_TO
58899: IFFALSE 58946
// begin hc_class = 13 ;
58901: LD_ADDR_OWVAR 28
58905: PUSH
58906: LD_INT 13
58908: ST_TO_ADDR
// hc_gallery =  ;
58909: LD_ADDR_OWVAR 33
58913: PUSH
58914: LD_STRING 
58916: ST_TO_ADDR
// animal := CreateHuman ;
58917: LD_ADDR_VAR 0 12
58921: PUSH
58922: CALL_OW 44
58926: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58927: LD_VAR 0 12
58931: PPUSH
58932: LD_VAR 0 8
58936: PPUSH
58937: LD_INT 0
58939: PPUSH
58940: CALL 60655 0 3
// end ;
58944: GO 58898
58946: POP
58947: POP
// if fishes then
58948: LD_VAR 0 7
58952: IFFALSE 59019
// for i = 1 to fishes do
58954: LD_ADDR_VAR 0 11
58958: PUSH
58959: DOUBLE
58960: LD_INT 1
58962: DEC
58963: ST_TO_ADDR
58964: LD_VAR 0 7
58968: PUSH
58969: FOR_TO
58970: IFFALSE 59017
// begin hc_class = 20 ;
58972: LD_ADDR_OWVAR 28
58976: PUSH
58977: LD_INT 20
58979: ST_TO_ADDR
// hc_gallery =  ;
58980: LD_ADDR_OWVAR 33
58984: PUSH
58985: LD_STRING 
58987: ST_TO_ADDR
// animal := CreateHuman ;
58988: LD_ADDR_VAR 0 12
58992: PUSH
58993: CALL_OW 44
58997: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
58998: LD_VAR 0 12
59002: PPUSH
59003: LD_VAR 0 9
59007: PPUSH
59008: LD_INT 0
59010: PPUSH
59011: CALL 60655 0 3
// end ;
59015: GO 58969
59017: POP
59018: POP
// end ;
59019: LD_VAR 0 10
59023: RET
// export function WantHeal ( sci , unit ) ; begin
59024: LD_INT 0
59026: PPUSH
// if GetTaskList ( sci ) > 0 then
59027: LD_VAR 0 1
59031: PPUSH
59032: CALL_OW 437
59036: PUSH
59037: LD_INT 0
59039: GREATER
59040: IFFALSE 59110
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
59042: LD_VAR 0 1
59046: PPUSH
59047: CALL_OW 437
59051: PUSH
59052: LD_INT 1
59054: ARRAY
59055: PUSH
59056: LD_INT 1
59058: ARRAY
59059: PUSH
59060: LD_STRING l
59062: EQUAL
59063: PUSH
59064: LD_VAR 0 1
59068: PPUSH
59069: CALL_OW 437
59073: PUSH
59074: LD_INT 1
59076: ARRAY
59077: PUSH
59078: LD_INT 4
59080: ARRAY
59081: PUSH
59082: LD_VAR 0 2
59086: EQUAL
59087: AND
59088: IFFALSE 59100
// result := true else
59090: LD_ADDR_VAR 0 3
59094: PUSH
59095: LD_INT 1
59097: ST_TO_ADDR
59098: GO 59108
// result := false ;
59100: LD_ADDR_VAR 0 3
59104: PUSH
59105: LD_INT 0
59107: ST_TO_ADDR
// end else
59108: GO 59118
// result := false ;
59110: LD_ADDR_VAR 0 3
59114: PUSH
59115: LD_INT 0
59117: ST_TO_ADDR
// end ;
59118: LD_VAR 0 3
59122: RET
// export function HealTarget ( sci ) ; begin
59123: LD_INT 0
59125: PPUSH
// if not sci then
59126: LD_VAR 0 1
59130: NOT
59131: IFFALSE 59135
// exit ;
59133: GO 59200
// result := 0 ;
59135: LD_ADDR_VAR 0 2
59139: PUSH
59140: LD_INT 0
59142: ST_TO_ADDR
// if GetTaskList ( sci ) then
59143: LD_VAR 0 1
59147: PPUSH
59148: CALL_OW 437
59152: IFFALSE 59200
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
59154: LD_VAR 0 1
59158: PPUSH
59159: CALL_OW 437
59163: PUSH
59164: LD_INT 1
59166: ARRAY
59167: PUSH
59168: LD_INT 1
59170: ARRAY
59171: PUSH
59172: LD_STRING l
59174: EQUAL
59175: IFFALSE 59200
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
59177: LD_ADDR_VAR 0 2
59181: PUSH
59182: LD_VAR 0 1
59186: PPUSH
59187: CALL_OW 437
59191: PUSH
59192: LD_INT 1
59194: ARRAY
59195: PUSH
59196: LD_INT 4
59198: ARRAY
59199: ST_TO_ADDR
// end ;
59200: LD_VAR 0 2
59204: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
59205: LD_INT 0
59207: PPUSH
59208: PPUSH
59209: PPUSH
59210: PPUSH
// if not base_units then
59211: LD_VAR 0 1
59215: NOT
59216: IFFALSE 59220
// exit ;
59218: GO 59307
// result := false ;
59220: LD_ADDR_VAR 0 2
59224: PUSH
59225: LD_INT 0
59227: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
59228: LD_ADDR_VAR 0 5
59232: PUSH
59233: LD_VAR 0 1
59237: PPUSH
59238: LD_INT 21
59240: PUSH
59241: LD_INT 3
59243: PUSH
59244: EMPTY
59245: LIST
59246: LIST
59247: PPUSH
59248: CALL_OW 72
59252: ST_TO_ADDR
// if not tmp then
59253: LD_VAR 0 5
59257: NOT
59258: IFFALSE 59262
// exit ;
59260: GO 59307
// for i in tmp do
59262: LD_ADDR_VAR 0 3
59266: PUSH
59267: LD_VAR 0 5
59271: PUSH
59272: FOR_IN
59273: IFFALSE 59305
// begin result := EnemyInRange ( i , 22 ) ;
59275: LD_ADDR_VAR 0 2
59279: PUSH
59280: LD_VAR 0 3
59284: PPUSH
59285: LD_INT 22
59287: PPUSH
59288: CALL 57543 0 2
59292: ST_TO_ADDR
// if result then
59293: LD_VAR 0 2
59297: IFFALSE 59303
// exit ;
59299: POP
59300: POP
59301: GO 59307
// end ;
59303: GO 59272
59305: POP
59306: POP
// end ;
59307: LD_VAR 0 2
59311: RET
// export function FilterByTag ( units , tag ) ; begin
59312: LD_INT 0
59314: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
59315: LD_ADDR_VAR 0 3
59319: PUSH
59320: LD_VAR 0 1
59324: PPUSH
59325: LD_INT 120
59327: PUSH
59328: LD_VAR 0 2
59332: PUSH
59333: EMPTY
59334: LIST
59335: LIST
59336: PPUSH
59337: CALL_OW 72
59341: ST_TO_ADDR
// end ;
59342: LD_VAR 0 3
59346: RET
// export function IsDriver ( un ) ; begin
59347: LD_INT 0
59349: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
59350: LD_ADDR_VAR 0 2
59354: PUSH
59355: LD_VAR 0 1
59359: PUSH
59360: LD_INT 55
59362: PUSH
59363: EMPTY
59364: LIST
59365: PPUSH
59366: CALL_OW 69
59370: IN
59371: ST_TO_ADDR
// end ;
59372: LD_VAR 0 2
59376: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
59377: LD_INT 0
59379: PPUSH
59380: PPUSH
// list := [ ] ;
59381: LD_ADDR_VAR 0 5
59385: PUSH
59386: EMPTY
59387: ST_TO_ADDR
// case d of 0 :
59388: LD_VAR 0 3
59392: PUSH
59393: LD_INT 0
59395: DOUBLE
59396: EQUAL
59397: IFTRUE 59401
59399: GO 59534
59401: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
59402: LD_ADDR_VAR 0 5
59406: PUSH
59407: LD_VAR 0 1
59411: PUSH
59412: LD_INT 4
59414: MINUS
59415: PUSH
59416: LD_VAR 0 2
59420: PUSH
59421: LD_INT 4
59423: MINUS
59424: PUSH
59425: LD_INT 2
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: LIST
59432: PUSH
59433: LD_VAR 0 1
59437: PUSH
59438: LD_INT 3
59440: MINUS
59441: PUSH
59442: LD_VAR 0 2
59446: PUSH
59447: LD_INT 1
59449: PUSH
59450: EMPTY
59451: LIST
59452: LIST
59453: LIST
59454: PUSH
59455: LD_VAR 0 1
59459: PUSH
59460: LD_INT 4
59462: PLUS
59463: PUSH
59464: LD_VAR 0 2
59468: PUSH
59469: LD_INT 4
59471: PUSH
59472: EMPTY
59473: LIST
59474: LIST
59475: LIST
59476: PUSH
59477: LD_VAR 0 1
59481: PUSH
59482: LD_INT 3
59484: PLUS
59485: PUSH
59486: LD_VAR 0 2
59490: PUSH
59491: LD_INT 3
59493: PLUS
59494: PUSH
59495: LD_INT 5
59497: PUSH
59498: EMPTY
59499: LIST
59500: LIST
59501: LIST
59502: PUSH
59503: LD_VAR 0 1
59507: PUSH
59508: LD_VAR 0 2
59512: PUSH
59513: LD_INT 4
59515: PLUS
59516: PUSH
59517: LD_INT 0
59519: PUSH
59520: EMPTY
59521: LIST
59522: LIST
59523: LIST
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: LIST
59529: LIST
59530: LIST
59531: ST_TO_ADDR
// end ; 1 :
59532: GO 60232
59534: LD_INT 1
59536: DOUBLE
59537: EQUAL
59538: IFTRUE 59542
59540: GO 59675
59542: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
59543: LD_ADDR_VAR 0 5
59547: PUSH
59548: LD_VAR 0 1
59552: PUSH
59553: LD_VAR 0 2
59557: PUSH
59558: LD_INT 4
59560: MINUS
59561: PUSH
59562: LD_INT 3
59564: PUSH
59565: EMPTY
59566: LIST
59567: LIST
59568: LIST
59569: PUSH
59570: LD_VAR 0 1
59574: PUSH
59575: LD_INT 3
59577: MINUS
59578: PUSH
59579: LD_VAR 0 2
59583: PUSH
59584: LD_INT 3
59586: MINUS
59587: PUSH
59588: LD_INT 2
59590: PUSH
59591: EMPTY
59592: LIST
59593: LIST
59594: LIST
59595: PUSH
59596: LD_VAR 0 1
59600: PUSH
59601: LD_INT 4
59603: MINUS
59604: PUSH
59605: LD_VAR 0 2
59609: PUSH
59610: LD_INT 1
59612: PUSH
59613: EMPTY
59614: LIST
59615: LIST
59616: LIST
59617: PUSH
59618: LD_VAR 0 1
59622: PUSH
59623: LD_VAR 0 2
59627: PUSH
59628: LD_INT 3
59630: PLUS
59631: PUSH
59632: LD_INT 0
59634: PUSH
59635: EMPTY
59636: LIST
59637: LIST
59638: LIST
59639: PUSH
59640: LD_VAR 0 1
59644: PUSH
59645: LD_INT 4
59647: PLUS
59648: PUSH
59649: LD_VAR 0 2
59653: PUSH
59654: LD_INT 4
59656: PLUS
59657: PUSH
59658: LD_INT 5
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: LIST
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: LIST
59670: LIST
59671: LIST
59672: ST_TO_ADDR
// end ; 2 :
59673: GO 60232
59675: LD_INT 2
59677: DOUBLE
59678: EQUAL
59679: IFTRUE 59683
59681: GO 59812
59683: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
59684: LD_ADDR_VAR 0 5
59688: PUSH
59689: LD_VAR 0 1
59693: PUSH
59694: LD_VAR 0 2
59698: PUSH
59699: LD_INT 3
59701: MINUS
59702: PUSH
59703: LD_INT 3
59705: PUSH
59706: EMPTY
59707: LIST
59708: LIST
59709: LIST
59710: PUSH
59711: LD_VAR 0 1
59715: PUSH
59716: LD_INT 4
59718: PLUS
59719: PUSH
59720: LD_VAR 0 2
59724: PUSH
59725: LD_INT 4
59727: PUSH
59728: EMPTY
59729: LIST
59730: LIST
59731: LIST
59732: PUSH
59733: LD_VAR 0 1
59737: PUSH
59738: LD_VAR 0 2
59742: PUSH
59743: LD_INT 4
59745: PLUS
59746: PUSH
59747: LD_INT 0
59749: PUSH
59750: EMPTY
59751: LIST
59752: LIST
59753: LIST
59754: PUSH
59755: LD_VAR 0 1
59759: PUSH
59760: LD_INT 3
59762: MINUS
59763: PUSH
59764: LD_VAR 0 2
59768: PUSH
59769: LD_INT 1
59771: PUSH
59772: EMPTY
59773: LIST
59774: LIST
59775: LIST
59776: PUSH
59777: LD_VAR 0 1
59781: PUSH
59782: LD_INT 4
59784: MINUS
59785: PUSH
59786: LD_VAR 0 2
59790: PUSH
59791: LD_INT 4
59793: MINUS
59794: PUSH
59795: LD_INT 2
59797: PUSH
59798: EMPTY
59799: LIST
59800: LIST
59801: LIST
59802: PUSH
59803: EMPTY
59804: LIST
59805: LIST
59806: LIST
59807: LIST
59808: LIST
59809: ST_TO_ADDR
// end ; 3 :
59810: GO 60232
59812: LD_INT 3
59814: DOUBLE
59815: EQUAL
59816: IFTRUE 59820
59818: GO 59953
59820: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
59821: LD_ADDR_VAR 0 5
59825: PUSH
59826: LD_VAR 0 1
59830: PUSH
59831: LD_INT 3
59833: PLUS
59834: PUSH
59835: LD_VAR 0 2
59839: PUSH
59840: LD_INT 4
59842: PUSH
59843: EMPTY
59844: LIST
59845: LIST
59846: LIST
59847: PUSH
59848: LD_VAR 0 1
59852: PUSH
59853: LD_INT 4
59855: PLUS
59856: PUSH
59857: LD_VAR 0 2
59861: PUSH
59862: LD_INT 4
59864: PLUS
59865: PUSH
59866: LD_INT 5
59868: PUSH
59869: EMPTY
59870: LIST
59871: LIST
59872: LIST
59873: PUSH
59874: LD_VAR 0 1
59878: PUSH
59879: LD_INT 4
59881: MINUS
59882: PUSH
59883: LD_VAR 0 2
59887: PUSH
59888: LD_INT 1
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: LIST
59895: PUSH
59896: LD_VAR 0 1
59900: PUSH
59901: LD_VAR 0 2
59905: PUSH
59906: LD_INT 4
59908: MINUS
59909: PUSH
59910: LD_INT 3
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: LIST
59917: PUSH
59918: LD_VAR 0 1
59922: PUSH
59923: LD_INT 3
59925: MINUS
59926: PUSH
59927: LD_VAR 0 2
59931: PUSH
59932: LD_INT 3
59934: MINUS
59935: PUSH
59936: LD_INT 2
59938: PUSH
59939: EMPTY
59940: LIST
59941: LIST
59942: LIST
59943: PUSH
59944: EMPTY
59945: LIST
59946: LIST
59947: LIST
59948: LIST
59949: LIST
59950: ST_TO_ADDR
// end ; 4 :
59951: GO 60232
59953: LD_INT 4
59955: DOUBLE
59956: EQUAL
59957: IFTRUE 59961
59959: GO 60094
59961: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
59962: LD_ADDR_VAR 0 5
59966: PUSH
59967: LD_VAR 0 1
59971: PUSH
59972: LD_VAR 0 2
59976: PUSH
59977: LD_INT 4
59979: PLUS
59980: PUSH
59981: LD_INT 0
59983: PUSH
59984: EMPTY
59985: LIST
59986: LIST
59987: LIST
59988: PUSH
59989: LD_VAR 0 1
59993: PUSH
59994: LD_INT 3
59996: PLUS
59997: PUSH
59998: LD_VAR 0 2
60002: PUSH
60003: LD_INT 3
60005: PLUS
60006: PUSH
60007: LD_INT 5
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: LIST
60014: PUSH
60015: LD_VAR 0 1
60019: PUSH
60020: LD_INT 4
60022: PLUS
60023: PUSH
60024: LD_VAR 0 2
60028: PUSH
60029: LD_INT 4
60031: PUSH
60032: EMPTY
60033: LIST
60034: LIST
60035: LIST
60036: PUSH
60037: LD_VAR 0 1
60041: PUSH
60042: LD_VAR 0 2
60046: PUSH
60047: LD_INT 3
60049: MINUS
60050: PUSH
60051: LD_INT 3
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: LIST
60058: PUSH
60059: LD_VAR 0 1
60063: PUSH
60064: LD_INT 4
60066: MINUS
60067: PUSH
60068: LD_VAR 0 2
60072: PUSH
60073: LD_INT 4
60075: MINUS
60076: PUSH
60077: LD_INT 2
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: LIST
60084: PUSH
60085: EMPTY
60086: LIST
60087: LIST
60088: LIST
60089: LIST
60090: LIST
60091: ST_TO_ADDR
// end ; 5 :
60092: GO 60232
60094: LD_INT 5
60096: DOUBLE
60097: EQUAL
60098: IFTRUE 60102
60100: GO 60231
60102: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
60103: LD_ADDR_VAR 0 5
60107: PUSH
60108: LD_VAR 0 1
60112: PUSH
60113: LD_INT 4
60115: MINUS
60116: PUSH
60117: LD_VAR 0 2
60121: PUSH
60122: LD_INT 1
60124: PUSH
60125: EMPTY
60126: LIST
60127: LIST
60128: LIST
60129: PUSH
60130: LD_VAR 0 1
60134: PUSH
60135: LD_VAR 0 2
60139: PUSH
60140: LD_INT 4
60142: MINUS
60143: PUSH
60144: LD_INT 3
60146: PUSH
60147: EMPTY
60148: LIST
60149: LIST
60150: LIST
60151: PUSH
60152: LD_VAR 0 1
60156: PUSH
60157: LD_INT 4
60159: PLUS
60160: PUSH
60161: LD_VAR 0 2
60165: PUSH
60166: LD_INT 4
60168: PLUS
60169: PUSH
60170: LD_INT 5
60172: PUSH
60173: EMPTY
60174: LIST
60175: LIST
60176: LIST
60177: PUSH
60178: LD_VAR 0 1
60182: PUSH
60183: LD_INT 3
60185: PLUS
60186: PUSH
60187: LD_VAR 0 2
60191: PUSH
60192: LD_INT 4
60194: PUSH
60195: EMPTY
60196: LIST
60197: LIST
60198: LIST
60199: PUSH
60200: LD_VAR 0 1
60204: PUSH
60205: LD_VAR 0 2
60209: PUSH
60210: LD_INT 3
60212: PLUS
60213: PUSH
60214: LD_INT 0
60216: PUSH
60217: EMPTY
60218: LIST
60219: LIST
60220: LIST
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: LIST
60226: LIST
60227: LIST
60228: ST_TO_ADDR
// end ; end ;
60229: GO 60232
60231: POP
// result := list ;
60232: LD_ADDR_VAR 0 4
60236: PUSH
60237: LD_VAR 0 5
60241: ST_TO_ADDR
// end ;
60242: LD_VAR 0 4
60246: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
60247: LD_INT 0
60249: PPUSH
60250: PPUSH
60251: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
60252: LD_VAR 0 1
60256: NOT
60257: PUSH
60258: LD_VAR 0 2
60262: PUSH
60263: LD_INT 1
60265: PUSH
60266: LD_INT 2
60268: PUSH
60269: LD_INT 3
60271: PUSH
60272: LD_INT 4
60274: PUSH
60275: EMPTY
60276: LIST
60277: LIST
60278: LIST
60279: LIST
60280: IN
60281: NOT
60282: OR
60283: IFFALSE 60287
// exit ;
60285: GO 60379
// tmp := [ ] ;
60287: LD_ADDR_VAR 0 5
60291: PUSH
60292: EMPTY
60293: ST_TO_ADDR
// for i in units do
60294: LD_ADDR_VAR 0 4
60298: PUSH
60299: LD_VAR 0 1
60303: PUSH
60304: FOR_IN
60305: IFFALSE 60348
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
60307: LD_ADDR_VAR 0 5
60311: PUSH
60312: LD_VAR 0 5
60316: PPUSH
60317: LD_VAR 0 5
60321: PUSH
60322: LD_INT 1
60324: PLUS
60325: PPUSH
60326: LD_VAR 0 4
60330: PPUSH
60331: LD_VAR 0 2
60335: PPUSH
60336: CALL_OW 259
60340: PPUSH
60341: CALL_OW 2
60345: ST_TO_ADDR
60346: GO 60304
60348: POP
60349: POP
// if not tmp then
60350: LD_VAR 0 5
60354: NOT
60355: IFFALSE 60359
// exit ;
60357: GO 60379
// result := SortListByListDesc ( units , tmp ) ;
60359: LD_ADDR_VAR 0 3
60363: PUSH
60364: LD_VAR 0 1
60368: PPUSH
60369: LD_VAR 0 5
60373: PPUSH
60374: CALL_OW 77
60378: ST_TO_ADDR
// end ;
60379: LD_VAR 0 3
60383: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
60384: LD_INT 0
60386: PPUSH
60387: PPUSH
60388: PPUSH
// result := false ;
60389: LD_ADDR_VAR 0 3
60393: PUSH
60394: LD_INT 0
60396: ST_TO_ADDR
// x := GetX ( building ) ;
60397: LD_ADDR_VAR 0 4
60401: PUSH
60402: LD_VAR 0 2
60406: PPUSH
60407: CALL_OW 250
60411: ST_TO_ADDR
// y := GetY ( building ) ;
60412: LD_ADDR_VAR 0 5
60416: PUSH
60417: LD_VAR 0 2
60421: PPUSH
60422: CALL_OW 251
60426: ST_TO_ADDR
// if not building or not x or not y then
60427: LD_VAR 0 2
60431: NOT
60432: PUSH
60433: LD_VAR 0 4
60437: NOT
60438: OR
60439: PUSH
60440: LD_VAR 0 5
60444: NOT
60445: OR
60446: IFFALSE 60450
// exit ;
60448: GO 60542
// if GetTaskList ( unit ) then
60450: LD_VAR 0 1
60454: PPUSH
60455: CALL_OW 437
60459: IFFALSE 60542
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60461: LD_STRING e
60463: PUSH
60464: LD_VAR 0 1
60468: PPUSH
60469: CALL_OW 437
60473: PUSH
60474: LD_INT 1
60476: ARRAY
60477: PUSH
60478: LD_INT 1
60480: ARRAY
60481: EQUAL
60482: PUSH
60483: LD_VAR 0 4
60487: PUSH
60488: LD_VAR 0 1
60492: PPUSH
60493: CALL_OW 437
60497: PUSH
60498: LD_INT 1
60500: ARRAY
60501: PUSH
60502: LD_INT 2
60504: ARRAY
60505: EQUAL
60506: AND
60507: PUSH
60508: LD_VAR 0 5
60512: PUSH
60513: LD_VAR 0 1
60517: PPUSH
60518: CALL_OW 437
60522: PUSH
60523: LD_INT 1
60525: ARRAY
60526: PUSH
60527: LD_INT 3
60529: ARRAY
60530: EQUAL
60531: AND
60532: IFFALSE 60542
// result := true end ;
60534: LD_ADDR_VAR 0 3
60538: PUSH
60539: LD_INT 1
60541: ST_TO_ADDR
// end ;
60542: LD_VAR 0 3
60546: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
60547: LD_INT 0
60549: PPUSH
// result := false ;
60550: LD_ADDR_VAR 0 4
60554: PUSH
60555: LD_INT 0
60557: ST_TO_ADDR
// if GetTaskList ( unit ) then
60558: LD_VAR 0 1
60562: PPUSH
60563: CALL_OW 437
60567: IFFALSE 60650
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60569: LD_STRING M
60571: PUSH
60572: LD_VAR 0 1
60576: PPUSH
60577: CALL_OW 437
60581: PUSH
60582: LD_INT 1
60584: ARRAY
60585: PUSH
60586: LD_INT 1
60588: ARRAY
60589: EQUAL
60590: PUSH
60591: LD_VAR 0 2
60595: PUSH
60596: LD_VAR 0 1
60600: PPUSH
60601: CALL_OW 437
60605: PUSH
60606: LD_INT 1
60608: ARRAY
60609: PUSH
60610: LD_INT 2
60612: ARRAY
60613: EQUAL
60614: AND
60615: PUSH
60616: LD_VAR 0 3
60620: PUSH
60621: LD_VAR 0 1
60625: PPUSH
60626: CALL_OW 437
60630: PUSH
60631: LD_INT 1
60633: ARRAY
60634: PUSH
60635: LD_INT 3
60637: ARRAY
60638: EQUAL
60639: AND
60640: IFFALSE 60650
// result := true ;
60642: LD_ADDR_VAR 0 4
60646: PUSH
60647: LD_INT 1
60649: ST_TO_ADDR
// end ; end ;
60650: LD_VAR 0 4
60654: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
60655: LD_INT 0
60657: PPUSH
60658: PPUSH
60659: PPUSH
60660: PPUSH
// if not unit or not area then
60661: LD_VAR 0 1
60665: NOT
60666: PUSH
60667: LD_VAR 0 2
60671: NOT
60672: OR
60673: IFFALSE 60677
// exit ;
60675: GO 60841
// tmp := AreaToList ( area , i ) ;
60677: LD_ADDR_VAR 0 6
60681: PUSH
60682: LD_VAR 0 2
60686: PPUSH
60687: LD_VAR 0 5
60691: PPUSH
60692: CALL_OW 517
60696: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
60697: LD_ADDR_VAR 0 5
60701: PUSH
60702: DOUBLE
60703: LD_INT 1
60705: DEC
60706: ST_TO_ADDR
60707: LD_VAR 0 6
60711: PUSH
60712: LD_INT 1
60714: ARRAY
60715: PUSH
60716: FOR_TO
60717: IFFALSE 60839
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
60719: LD_ADDR_VAR 0 7
60723: PUSH
60724: LD_VAR 0 6
60728: PUSH
60729: LD_INT 1
60731: ARRAY
60732: PUSH
60733: LD_VAR 0 5
60737: ARRAY
60738: PUSH
60739: LD_VAR 0 6
60743: PUSH
60744: LD_INT 2
60746: ARRAY
60747: PUSH
60748: LD_VAR 0 5
60752: ARRAY
60753: PUSH
60754: EMPTY
60755: LIST
60756: LIST
60757: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
60758: LD_VAR 0 7
60762: PUSH
60763: LD_INT 1
60765: ARRAY
60766: PPUSH
60767: LD_VAR 0 7
60771: PUSH
60772: LD_INT 2
60774: ARRAY
60775: PPUSH
60776: CALL_OW 428
60780: PUSH
60781: LD_INT 0
60783: EQUAL
60784: IFFALSE 60837
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
60786: LD_VAR 0 1
60790: PPUSH
60791: LD_VAR 0 7
60795: PUSH
60796: LD_INT 1
60798: ARRAY
60799: PPUSH
60800: LD_VAR 0 7
60804: PUSH
60805: LD_INT 2
60807: ARRAY
60808: PPUSH
60809: LD_VAR 0 3
60813: PPUSH
60814: CALL_OW 48
// result := IsPlaced ( unit ) ;
60818: LD_ADDR_VAR 0 4
60822: PUSH
60823: LD_VAR 0 1
60827: PPUSH
60828: CALL_OW 305
60832: ST_TO_ADDR
// exit ;
60833: POP
60834: POP
60835: GO 60841
// end ; end ;
60837: GO 60716
60839: POP
60840: POP
// end ;
60841: LD_VAR 0 4
60845: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
60846: LD_INT 0
60848: PPUSH
60849: PPUSH
60850: PPUSH
// if not side or side > 8 then
60851: LD_VAR 0 1
60855: NOT
60856: PUSH
60857: LD_VAR 0 1
60861: PUSH
60862: LD_INT 8
60864: GREATER
60865: OR
60866: IFFALSE 60870
// exit ;
60868: GO 61057
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
60870: LD_ADDR_VAR 0 4
60874: PUSH
60875: LD_INT 22
60877: PUSH
60878: LD_VAR 0 1
60882: PUSH
60883: EMPTY
60884: LIST
60885: LIST
60886: PUSH
60887: LD_INT 21
60889: PUSH
60890: LD_INT 3
60892: PUSH
60893: EMPTY
60894: LIST
60895: LIST
60896: PUSH
60897: EMPTY
60898: LIST
60899: LIST
60900: PPUSH
60901: CALL_OW 69
60905: ST_TO_ADDR
// if not tmp then
60906: LD_VAR 0 4
60910: NOT
60911: IFFALSE 60915
// exit ;
60913: GO 61057
// enable_addtolog := true ;
60915: LD_ADDR_OWVAR 81
60919: PUSH
60920: LD_INT 1
60922: ST_TO_ADDR
// AddToLog ( [ ) ;
60923: LD_STRING [
60925: PPUSH
60926: CALL_OW 561
// for i in tmp do
60930: LD_ADDR_VAR 0 3
60934: PUSH
60935: LD_VAR 0 4
60939: PUSH
60940: FOR_IN
60941: IFFALSE 61048
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
60943: LD_STRING [
60945: PUSH
60946: LD_VAR 0 3
60950: PPUSH
60951: CALL_OW 266
60955: STR
60956: PUSH
60957: LD_STRING , 
60959: STR
60960: PUSH
60961: LD_VAR 0 3
60965: PPUSH
60966: CALL_OW 250
60970: STR
60971: PUSH
60972: LD_STRING , 
60974: STR
60975: PUSH
60976: LD_VAR 0 3
60980: PPUSH
60981: CALL_OW 251
60985: STR
60986: PUSH
60987: LD_STRING , 
60989: STR
60990: PUSH
60991: LD_VAR 0 3
60995: PPUSH
60996: CALL_OW 254
61000: STR
61001: PUSH
61002: LD_STRING , 
61004: STR
61005: PUSH
61006: LD_VAR 0 3
61010: PPUSH
61011: LD_INT 1
61013: PPUSH
61014: CALL_OW 268
61018: STR
61019: PUSH
61020: LD_STRING , 
61022: STR
61023: PUSH
61024: LD_VAR 0 3
61028: PPUSH
61029: LD_INT 2
61031: PPUSH
61032: CALL_OW 268
61036: STR
61037: PUSH
61038: LD_STRING ],
61040: STR
61041: PPUSH
61042: CALL_OW 561
// end ;
61046: GO 60940
61048: POP
61049: POP
// AddToLog ( ]; ) ;
61050: LD_STRING ];
61052: PPUSH
61053: CALL_OW 561
// end ;
61057: LD_VAR 0 2
61061: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
61062: LD_INT 0
61064: PPUSH
61065: PPUSH
61066: PPUSH
61067: PPUSH
61068: PPUSH
// if not area or not rate or not max then
61069: LD_VAR 0 1
61073: NOT
61074: PUSH
61075: LD_VAR 0 2
61079: NOT
61080: OR
61081: PUSH
61082: LD_VAR 0 4
61086: NOT
61087: OR
61088: IFFALSE 61092
// exit ;
61090: GO 61281
// while 1 do
61092: LD_INT 1
61094: IFFALSE 61281
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
61096: LD_ADDR_VAR 0 9
61100: PUSH
61101: LD_VAR 0 1
61105: PPUSH
61106: LD_INT 1
61108: PPUSH
61109: CALL_OW 287
61113: PUSH
61114: LD_INT 10
61116: MUL
61117: ST_TO_ADDR
// r := rate / 10 ;
61118: LD_ADDR_VAR 0 7
61122: PUSH
61123: LD_VAR 0 2
61127: PUSH
61128: LD_INT 10
61130: DIVREAL
61131: ST_TO_ADDR
// time := 1 1$00 ;
61132: LD_ADDR_VAR 0 8
61136: PUSH
61137: LD_INT 2100
61139: ST_TO_ADDR
// if amount < min then
61140: LD_VAR 0 9
61144: PUSH
61145: LD_VAR 0 3
61149: LESS
61150: IFFALSE 61168
// r := r * 2 else
61152: LD_ADDR_VAR 0 7
61156: PUSH
61157: LD_VAR 0 7
61161: PUSH
61162: LD_INT 2
61164: MUL
61165: ST_TO_ADDR
61166: GO 61194
// if amount > max then
61168: LD_VAR 0 9
61172: PUSH
61173: LD_VAR 0 4
61177: GREATER
61178: IFFALSE 61194
// r := r / 2 ;
61180: LD_ADDR_VAR 0 7
61184: PUSH
61185: LD_VAR 0 7
61189: PUSH
61190: LD_INT 2
61192: DIVREAL
61193: ST_TO_ADDR
// time := time / r ;
61194: LD_ADDR_VAR 0 8
61198: PUSH
61199: LD_VAR 0 8
61203: PUSH
61204: LD_VAR 0 7
61208: DIVREAL
61209: ST_TO_ADDR
// if time < 0 then
61210: LD_VAR 0 8
61214: PUSH
61215: LD_INT 0
61217: LESS
61218: IFFALSE 61235
// time := time * - 1 ;
61220: LD_ADDR_VAR 0 8
61224: PUSH
61225: LD_VAR 0 8
61229: PUSH
61230: LD_INT 1
61232: NEG
61233: MUL
61234: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
61235: LD_VAR 0 8
61239: PUSH
61240: LD_INT 35
61242: PPUSH
61243: LD_INT 875
61245: PPUSH
61246: CALL_OW 12
61250: PLUS
61251: PPUSH
61252: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
61256: LD_INT 1
61258: PPUSH
61259: LD_INT 5
61261: PPUSH
61262: CALL_OW 12
61266: PPUSH
61267: LD_VAR 0 1
61271: PPUSH
61272: LD_INT 1
61274: PPUSH
61275: CALL_OW 55
// end ;
61279: GO 61092
// end ;
61281: LD_VAR 0 5
61285: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
61286: LD_INT 0
61288: PPUSH
61289: PPUSH
61290: PPUSH
61291: PPUSH
61292: PPUSH
61293: PPUSH
61294: PPUSH
61295: PPUSH
// if not turrets or not factories then
61296: LD_VAR 0 1
61300: NOT
61301: PUSH
61302: LD_VAR 0 2
61306: NOT
61307: OR
61308: IFFALSE 61312
// exit ;
61310: GO 61619
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
61312: LD_ADDR_VAR 0 10
61316: PUSH
61317: LD_INT 5
61319: PUSH
61320: LD_INT 6
61322: PUSH
61323: EMPTY
61324: LIST
61325: LIST
61326: PUSH
61327: LD_INT 2
61329: PUSH
61330: LD_INT 4
61332: PUSH
61333: EMPTY
61334: LIST
61335: LIST
61336: PUSH
61337: LD_INT 3
61339: PUSH
61340: LD_INT 5
61342: PUSH
61343: EMPTY
61344: LIST
61345: LIST
61346: PUSH
61347: EMPTY
61348: LIST
61349: LIST
61350: LIST
61351: PUSH
61352: LD_INT 24
61354: PUSH
61355: LD_INT 25
61357: PUSH
61358: EMPTY
61359: LIST
61360: LIST
61361: PUSH
61362: LD_INT 23
61364: PUSH
61365: LD_INT 27
61367: PUSH
61368: EMPTY
61369: LIST
61370: LIST
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: PUSH
61376: LD_INT 42
61378: PUSH
61379: LD_INT 43
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: PUSH
61386: LD_INT 44
61388: PUSH
61389: LD_INT 46
61391: PUSH
61392: EMPTY
61393: LIST
61394: LIST
61395: PUSH
61396: LD_INT 45
61398: PUSH
61399: LD_INT 47
61401: PUSH
61402: EMPTY
61403: LIST
61404: LIST
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: LIST
61410: PUSH
61411: EMPTY
61412: LIST
61413: LIST
61414: LIST
61415: ST_TO_ADDR
// result := [ ] ;
61416: LD_ADDR_VAR 0 3
61420: PUSH
61421: EMPTY
61422: ST_TO_ADDR
// for i in turrets do
61423: LD_ADDR_VAR 0 4
61427: PUSH
61428: LD_VAR 0 1
61432: PUSH
61433: FOR_IN
61434: IFFALSE 61617
// begin nat := GetNation ( i ) ;
61436: LD_ADDR_VAR 0 7
61440: PUSH
61441: LD_VAR 0 4
61445: PPUSH
61446: CALL_OW 248
61450: ST_TO_ADDR
// weapon := 0 ;
61451: LD_ADDR_VAR 0 8
61455: PUSH
61456: LD_INT 0
61458: ST_TO_ADDR
// if not nat then
61459: LD_VAR 0 7
61463: NOT
61464: IFFALSE 61468
// continue ;
61466: GO 61433
// for j in list [ nat ] do
61468: LD_ADDR_VAR 0 5
61472: PUSH
61473: LD_VAR 0 10
61477: PUSH
61478: LD_VAR 0 7
61482: ARRAY
61483: PUSH
61484: FOR_IN
61485: IFFALSE 61526
// if GetBWeapon ( i ) = j [ 1 ] then
61487: LD_VAR 0 4
61491: PPUSH
61492: CALL_OW 269
61496: PUSH
61497: LD_VAR 0 5
61501: PUSH
61502: LD_INT 1
61504: ARRAY
61505: EQUAL
61506: IFFALSE 61524
// begin weapon := j [ 2 ] ;
61508: LD_ADDR_VAR 0 8
61512: PUSH
61513: LD_VAR 0 5
61517: PUSH
61518: LD_INT 2
61520: ARRAY
61521: ST_TO_ADDR
// break ;
61522: GO 61526
// end ;
61524: GO 61484
61526: POP
61527: POP
// if not weapon then
61528: LD_VAR 0 8
61532: NOT
61533: IFFALSE 61537
// continue ;
61535: GO 61433
// for k in factories do
61537: LD_ADDR_VAR 0 6
61541: PUSH
61542: LD_VAR 0 2
61546: PUSH
61547: FOR_IN
61548: IFFALSE 61613
// begin weapons := AvailableWeaponList ( k ) ;
61550: LD_ADDR_VAR 0 9
61554: PUSH
61555: LD_VAR 0 6
61559: PPUSH
61560: CALL_OW 478
61564: ST_TO_ADDR
// if not weapons then
61565: LD_VAR 0 9
61569: NOT
61570: IFFALSE 61574
// continue ;
61572: GO 61547
// if weapon in weapons then
61574: LD_VAR 0 8
61578: PUSH
61579: LD_VAR 0 9
61583: IN
61584: IFFALSE 61611
// begin result := [ i , weapon ] ;
61586: LD_ADDR_VAR 0 3
61590: PUSH
61591: LD_VAR 0 4
61595: PUSH
61596: LD_VAR 0 8
61600: PUSH
61601: EMPTY
61602: LIST
61603: LIST
61604: ST_TO_ADDR
// exit ;
61605: POP
61606: POP
61607: POP
61608: POP
61609: GO 61619
// end ; end ;
61611: GO 61547
61613: POP
61614: POP
// end ;
61615: GO 61433
61617: POP
61618: POP
// end ;
61619: LD_VAR 0 3
61623: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
61624: LD_INT 0
61626: PPUSH
// if not side or side > 8 then
61627: LD_VAR 0 3
61631: NOT
61632: PUSH
61633: LD_VAR 0 3
61637: PUSH
61638: LD_INT 8
61640: GREATER
61641: OR
61642: IFFALSE 61646
// exit ;
61644: GO 61705
// if not range then
61646: LD_VAR 0 4
61650: NOT
61651: IFFALSE 61662
// range := - 12 ;
61653: LD_ADDR_VAR 0 4
61657: PUSH
61658: LD_INT 12
61660: NEG
61661: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
61662: LD_VAR 0 1
61666: PPUSH
61667: LD_VAR 0 2
61671: PPUSH
61672: LD_VAR 0 3
61676: PPUSH
61677: LD_VAR 0 4
61681: PPUSH
61682: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
61686: LD_VAR 0 1
61690: PPUSH
61691: LD_VAR 0 2
61695: PPUSH
61696: LD_VAR 0 3
61700: PPUSH
61701: CALL_OW 331
// end ;
61705: LD_VAR 0 5
61709: RET
// export function Video ( mode ) ; begin
61710: LD_INT 0
61712: PPUSH
// ingame_video = mode ;
61713: LD_ADDR_OWVAR 52
61717: PUSH
61718: LD_VAR 0 1
61722: ST_TO_ADDR
// interface_hidden = mode ;
61723: LD_ADDR_OWVAR 54
61727: PUSH
61728: LD_VAR 0 1
61732: ST_TO_ADDR
// end ;
61733: LD_VAR 0 2
61737: RET
// export function Join ( array , element ) ; begin
61738: LD_INT 0
61740: PPUSH
// result := Replace ( array , array + 1 , element ) ;
61741: LD_ADDR_VAR 0 3
61745: PUSH
61746: LD_VAR 0 1
61750: PPUSH
61751: LD_VAR 0 1
61755: PUSH
61756: LD_INT 1
61758: PLUS
61759: PPUSH
61760: LD_VAR 0 2
61764: PPUSH
61765: CALL_OW 1
61769: ST_TO_ADDR
// end ;
61770: LD_VAR 0 3
61774: RET
// export function JoinUnion ( array , element ) ; begin
61775: LD_INT 0
61777: PPUSH
// result := array union element ;
61778: LD_ADDR_VAR 0 3
61782: PUSH
61783: LD_VAR 0 1
61787: PUSH
61788: LD_VAR 0 2
61792: UNION
61793: ST_TO_ADDR
// end ;
61794: LD_VAR 0 3
61798: RET
// export function GetBehemoths ( side ) ; begin
61799: LD_INT 0
61801: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
61802: LD_ADDR_VAR 0 2
61806: PUSH
61807: LD_INT 22
61809: PUSH
61810: LD_VAR 0 1
61814: PUSH
61815: EMPTY
61816: LIST
61817: LIST
61818: PUSH
61819: LD_INT 31
61821: PUSH
61822: LD_INT 25
61824: PUSH
61825: EMPTY
61826: LIST
61827: LIST
61828: PUSH
61829: EMPTY
61830: LIST
61831: LIST
61832: PPUSH
61833: CALL_OW 69
61837: ST_TO_ADDR
// end ;
61838: LD_VAR 0 2
61842: RET
// export function Shuffle ( array ) ; var i , index ; begin
61843: LD_INT 0
61845: PPUSH
61846: PPUSH
61847: PPUSH
// result := [ ] ;
61848: LD_ADDR_VAR 0 2
61852: PUSH
61853: EMPTY
61854: ST_TO_ADDR
// if not array then
61855: LD_VAR 0 1
61859: NOT
61860: IFFALSE 61864
// exit ;
61862: GO 61963
// Randomize ;
61864: CALL_OW 10
// for i = array downto 1 do
61868: LD_ADDR_VAR 0 3
61872: PUSH
61873: DOUBLE
61874: LD_VAR 0 1
61878: INC
61879: ST_TO_ADDR
61880: LD_INT 1
61882: PUSH
61883: FOR_DOWNTO
61884: IFFALSE 61961
// begin index := rand ( 1 , array ) ;
61886: LD_ADDR_VAR 0 4
61890: PUSH
61891: LD_INT 1
61893: PPUSH
61894: LD_VAR 0 1
61898: PPUSH
61899: CALL_OW 12
61903: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
61904: LD_ADDR_VAR 0 2
61908: PUSH
61909: LD_VAR 0 2
61913: PPUSH
61914: LD_VAR 0 2
61918: PUSH
61919: LD_INT 1
61921: PLUS
61922: PPUSH
61923: LD_VAR 0 1
61927: PUSH
61928: LD_VAR 0 4
61932: ARRAY
61933: PPUSH
61934: CALL_OW 2
61938: ST_TO_ADDR
// array := Delete ( array , index ) ;
61939: LD_ADDR_VAR 0 1
61943: PUSH
61944: LD_VAR 0 1
61948: PPUSH
61949: LD_VAR 0 4
61953: PPUSH
61954: CALL_OW 3
61958: ST_TO_ADDR
// end ;
61959: GO 61883
61961: POP
61962: POP
// end ;
61963: LD_VAR 0 2
61967: RET
// export function GetBaseMaterials ( base ) ; begin
61968: LD_INT 0
61970: PPUSH
// result := [ 0 , 0 , 0 ] ;
61971: LD_ADDR_VAR 0 2
61975: PUSH
61976: LD_INT 0
61978: PUSH
61979: LD_INT 0
61981: PUSH
61982: LD_INT 0
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: LIST
61989: ST_TO_ADDR
// if not base then
61990: LD_VAR 0 1
61994: NOT
61995: IFFALSE 61999
// exit ;
61997: GO 62048
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
61999: LD_ADDR_VAR 0 2
62003: PUSH
62004: LD_VAR 0 1
62008: PPUSH
62009: LD_INT 1
62011: PPUSH
62012: CALL_OW 275
62016: PUSH
62017: LD_VAR 0 1
62021: PPUSH
62022: LD_INT 2
62024: PPUSH
62025: CALL_OW 275
62029: PUSH
62030: LD_VAR 0 1
62034: PPUSH
62035: LD_INT 3
62037: PPUSH
62038: CALL_OW 275
62042: PUSH
62043: EMPTY
62044: LIST
62045: LIST
62046: LIST
62047: ST_TO_ADDR
// end ;
62048: LD_VAR 0 2
62052: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
62053: LD_INT 0
62055: PPUSH
62056: PPUSH
// result := array ;
62057: LD_ADDR_VAR 0 3
62061: PUSH
62062: LD_VAR 0 1
62066: ST_TO_ADDR
// if size > 0 then
62067: LD_VAR 0 2
62071: PUSH
62072: LD_INT 0
62074: GREATER
62075: IFFALSE 62121
// for i := array downto size do
62077: LD_ADDR_VAR 0 4
62081: PUSH
62082: DOUBLE
62083: LD_VAR 0 1
62087: INC
62088: ST_TO_ADDR
62089: LD_VAR 0 2
62093: PUSH
62094: FOR_DOWNTO
62095: IFFALSE 62119
// result := Delete ( result , result ) ;
62097: LD_ADDR_VAR 0 3
62101: PUSH
62102: LD_VAR 0 3
62106: PPUSH
62107: LD_VAR 0 3
62111: PPUSH
62112: CALL_OW 3
62116: ST_TO_ADDR
62117: GO 62094
62119: POP
62120: POP
// end ;
62121: LD_VAR 0 3
62125: RET
// export function ComExit ( unit ) ; var tmp ; begin
62126: LD_INT 0
62128: PPUSH
62129: PPUSH
// if not IsInUnit ( unit ) then
62130: LD_VAR 0 1
62134: PPUSH
62135: CALL_OW 310
62139: NOT
62140: IFFALSE 62144
// exit ;
62142: GO 62204
// tmp := IsInUnit ( unit ) ;
62144: LD_ADDR_VAR 0 3
62148: PUSH
62149: LD_VAR 0 1
62153: PPUSH
62154: CALL_OW 310
62158: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
62159: LD_VAR 0 3
62163: PPUSH
62164: CALL_OW 247
62168: PUSH
62169: LD_INT 2
62171: EQUAL
62172: IFFALSE 62185
// ComExitVehicle ( unit ) else
62174: LD_VAR 0 1
62178: PPUSH
62179: CALL_OW 121
62183: GO 62194
// ComExitBuilding ( unit ) ;
62185: LD_VAR 0 1
62189: PPUSH
62190: CALL_OW 122
// result := tmp ;
62194: LD_ADDR_VAR 0 2
62198: PUSH
62199: LD_VAR 0 3
62203: ST_TO_ADDR
// end ;
62204: LD_VAR 0 2
62208: RET
// export function ComExitAll ( units ) ; var i ; begin
62209: LD_INT 0
62211: PPUSH
62212: PPUSH
// if not units then
62213: LD_VAR 0 1
62217: NOT
62218: IFFALSE 62222
// exit ;
62220: GO 62248
// for i in units do
62222: LD_ADDR_VAR 0 3
62226: PUSH
62227: LD_VAR 0 1
62231: PUSH
62232: FOR_IN
62233: IFFALSE 62246
// ComExit ( i ) ;
62235: LD_VAR 0 3
62239: PPUSH
62240: CALL 62126 0 1
62244: GO 62232
62246: POP
62247: POP
// end ;
62248: LD_VAR 0 2
62252: RET
// export function ResetHc ; begin
62253: LD_INT 0
62255: PPUSH
// InitHc ;
62256: CALL_OW 19
// hc_importance := 0 ;
62260: LD_ADDR_OWVAR 32
62264: PUSH
62265: LD_INT 0
62267: ST_TO_ADDR
// end ;
62268: LD_VAR 0 1
62272: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
62273: LD_INT 0
62275: PPUSH
62276: PPUSH
62277: PPUSH
// _x := ( x1 + x2 ) div 2 ;
62278: LD_ADDR_VAR 0 6
62282: PUSH
62283: LD_VAR 0 1
62287: PUSH
62288: LD_VAR 0 3
62292: PLUS
62293: PUSH
62294: LD_INT 2
62296: DIV
62297: ST_TO_ADDR
// if _x < 0 then
62298: LD_VAR 0 6
62302: PUSH
62303: LD_INT 0
62305: LESS
62306: IFFALSE 62323
// _x := _x * - 1 ;
62308: LD_ADDR_VAR 0 6
62312: PUSH
62313: LD_VAR 0 6
62317: PUSH
62318: LD_INT 1
62320: NEG
62321: MUL
62322: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
62323: LD_ADDR_VAR 0 7
62327: PUSH
62328: LD_VAR 0 2
62332: PUSH
62333: LD_VAR 0 4
62337: PLUS
62338: PUSH
62339: LD_INT 2
62341: DIV
62342: ST_TO_ADDR
// if _y < 0 then
62343: LD_VAR 0 7
62347: PUSH
62348: LD_INT 0
62350: LESS
62351: IFFALSE 62368
// _y := _y * - 1 ;
62353: LD_ADDR_VAR 0 7
62357: PUSH
62358: LD_VAR 0 7
62362: PUSH
62363: LD_INT 1
62365: NEG
62366: MUL
62367: ST_TO_ADDR
// result := [ _x , _y ] ;
62368: LD_ADDR_VAR 0 5
62372: PUSH
62373: LD_VAR 0 6
62377: PUSH
62378: LD_VAR 0 7
62382: PUSH
62383: EMPTY
62384: LIST
62385: LIST
62386: ST_TO_ADDR
// end ;
62387: LD_VAR 0 5
62391: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
62392: LD_INT 0
62394: PPUSH
62395: PPUSH
62396: PPUSH
62397: PPUSH
// task := GetTaskList ( unit ) ;
62398: LD_ADDR_VAR 0 7
62402: PUSH
62403: LD_VAR 0 1
62407: PPUSH
62408: CALL_OW 437
62412: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
62413: LD_VAR 0 7
62417: NOT
62418: PUSH
62419: LD_VAR 0 1
62423: PPUSH
62424: LD_VAR 0 2
62428: PPUSH
62429: CALL_OW 308
62433: NOT
62434: AND
62435: IFFALSE 62439
// exit ;
62437: GO 62557
// if IsInArea ( unit , area ) then
62439: LD_VAR 0 1
62443: PPUSH
62444: LD_VAR 0 2
62448: PPUSH
62449: CALL_OW 308
62453: IFFALSE 62471
// begin ComMoveToArea ( unit , goAway ) ;
62455: LD_VAR 0 1
62459: PPUSH
62460: LD_VAR 0 3
62464: PPUSH
62465: CALL_OW 113
// exit ;
62469: GO 62557
// end ; if task [ 1 ] [ 1 ] <> M then
62471: LD_VAR 0 7
62475: PUSH
62476: LD_INT 1
62478: ARRAY
62479: PUSH
62480: LD_INT 1
62482: ARRAY
62483: PUSH
62484: LD_STRING M
62486: NONEQUAL
62487: IFFALSE 62491
// exit ;
62489: GO 62557
// x := task [ 1 ] [ 2 ] ;
62491: LD_ADDR_VAR 0 5
62495: PUSH
62496: LD_VAR 0 7
62500: PUSH
62501: LD_INT 1
62503: ARRAY
62504: PUSH
62505: LD_INT 2
62507: ARRAY
62508: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
62509: LD_ADDR_VAR 0 6
62513: PUSH
62514: LD_VAR 0 7
62518: PUSH
62519: LD_INT 1
62521: ARRAY
62522: PUSH
62523: LD_INT 3
62525: ARRAY
62526: ST_TO_ADDR
// if InArea ( x , y , area ) then
62527: LD_VAR 0 5
62531: PPUSH
62532: LD_VAR 0 6
62536: PPUSH
62537: LD_VAR 0 2
62541: PPUSH
62542: CALL_OW 309
62546: IFFALSE 62557
// ComStop ( unit ) ;
62548: LD_VAR 0 1
62552: PPUSH
62553: CALL_OW 141
// end ;
62557: LD_VAR 0 4
62561: RET
// export function Abs ( value ) ; begin
62562: LD_INT 0
62564: PPUSH
// result := value ;
62565: LD_ADDR_VAR 0 2
62569: PUSH
62570: LD_VAR 0 1
62574: ST_TO_ADDR
// if value < 0 then
62575: LD_VAR 0 1
62579: PUSH
62580: LD_INT 0
62582: LESS
62583: IFFALSE 62600
// result := value * - 1 ;
62585: LD_ADDR_VAR 0 2
62589: PUSH
62590: LD_VAR 0 1
62594: PUSH
62595: LD_INT 1
62597: NEG
62598: MUL
62599: ST_TO_ADDR
// end ;
62600: LD_VAR 0 2
62604: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
62605: LD_INT 0
62607: PPUSH
62608: PPUSH
62609: PPUSH
62610: PPUSH
62611: PPUSH
62612: PPUSH
62613: PPUSH
62614: PPUSH
// if not unit or not building then
62615: LD_VAR 0 1
62619: NOT
62620: PUSH
62621: LD_VAR 0 2
62625: NOT
62626: OR
62627: IFFALSE 62631
// exit ;
62629: GO 62857
// x := GetX ( building ) ;
62631: LD_ADDR_VAR 0 4
62635: PUSH
62636: LD_VAR 0 2
62640: PPUSH
62641: CALL_OW 250
62645: ST_TO_ADDR
// y := GetY ( building ) ;
62646: LD_ADDR_VAR 0 6
62650: PUSH
62651: LD_VAR 0 2
62655: PPUSH
62656: CALL_OW 251
62660: ST_TO_ADDR
// d := GetDir ( building ) ;
62661: LD_ADDR_VAR 0 8
62665: PUSH
62666: LD_VAR 0 2
62670: PPUSH
62671: CALL_OW 254
62675: ST_TO_ADDR
// r := 4 ;
62676: LD_ADDR_VAR 0 9
62680: PUSH
62681: LD_INT 4
62683: ST_TO_ADDR
// for i := 1 to 5 do
62684: LD_ADDR_VAR 0 10
62688: PUSH
62689: DOUBLE
62690: LD_INT 1
62692: DEC
62693: ST_TO_ADDR
62694: LD_INT 5
62696: PUSH
62697: FOR_TO
62698: IFFALSE 62855
// begin _x := ShiftX ( x , d , r + i ) ;
62700: LD_ADDR_VAR 0 5
62704: PUSH
62705: LD_VAR 0 4
62709: PPUSH
62710: LD_VAR 0 8
62714: PPUSH
62715: LD_VAR 0 9
62719: PUSH
62720: LD_VAR 0 10
62724: PLUS
62725: PPUSH
62726: CALL_OW 272
62730: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
62731: LD_ADDR_VAR 0 7
62735: PUSH
62736: LD_VAR 0 6
62740: PPUSH
62741: LD_VAR 0 8
62745: PPUSH
62746: LD_VAR 0 9
62750: PUSH
62751: LD_VAR 0 10
62755: PLUS
62756: PPUSH
62757: CALL_OW 273
62761: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
62762: LD_VAR 0 5
62766: PPUSH
62767: LD_VAR 0 7
62771: PPUSH
62772: CALL_OW 488
62776: PUSH
62777: LD_VAR 0 5
62781: PPUSH
62782: LD_VAR 0 7
62786: PPUSH
62787: CALL_OW 428
62791: PPUSH
62792: CALL_OW 247
62796: PUSH
62797: LD_INT 3
62799: PUSH
62800: LD_INT 2
62802: PUSH
62803: EMPTY
62804: LIST
62805: LIST
62806: IN
62807: NOT
62808: AND
62809: IFFALSE 62853
// begin ComMoveXY ( unit , _x , _y ) ;
62811: LD_VAR 0 1
62815: PPUSH
62816: LD_VAR 0 5
62820: PPUSH
62821: LD_VAR 0 7
62825: PPUSH
62826: CALL_OW 111
// result := [ _x , _y ] ;
62830: LD_ADDR_VAR 0 3
62834: PUSH
62835: LD_VAR 0 5
62839: PUSH
62840: LD_VAR 0 7
62844: PUSH
62845: EMPTY
62846: LIST
62847: LIST
62848: ST_TO_ADDR
// exit ;
62849: POP
62850: POP
62851: GO 62857
// end ; end ;
62853: GO 62697
62855: POP
62856: POP
// end ;
62857: LD_VAR 0 3
62861: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
62862: LD_INT 0
62864: PPUSH
62865: PPUSH
62866: PPUSH
// result := 0 ;
62867: LD_ADDR_VAR 0 3
62871: PUSH
62872: LD_INT 0
62874: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
62875: LD_VAR 0 1
62879: PUSH
62880: LD_INT 0
62882: LESS
62883: PUSH
62884: LD_VAR 0 1
62888: PUSH
62889: LD_INT 8
62891: GREATER
62892: OR
62893: PUSH
62894: LD_VAR 0 2
62898: PUSH
62899: LD_INT 0
62901: LESS
62902: OR
62903: PUSH
62904: LD_VAR 0 2
62908: PUSH
62909: LD_INT 8
62911: GREATER
62912: OR
62913: IFFALSE 62917
// exit ;
62915: GO 62992
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
62917: LD_ADDR_VAR 0 4
62921: PUSH
62922: LD_INT 22
62924: PUSH
62925: LD_VAR 0 2
62929: PUSH
62930: EMPTY
62931: LIST
62932: LIST
62933: PPUSH
62934: CALL_OW 69
62938: PUSH
62939: FOR_IN
62940: IFFALSE 62990
// begin un := UnitShoot ( i ) ;
62942: LD_ADDR_VAR 0 5
62946: PUSH
62947: LD_VAR 0 4
62951: PPUSH
62952: CALL_OW 504
62956: ST_TO_ADDR
// if GetSide ( un ) = side1 then
62957: LD_VAR 0 5
62961: PPUSH
62962: CALL_OW 255
62966: PUSH
62967: LD_VAR 0 1
62971: EQUAL
62972: IFFALSE 62988
// begin result := un ;
62974: LD_ADDR_VAR 0 3
62978: PUSH
62979: LD_VAR 0 5
62983: ST_TO_ADDR
// exit ;
62984: POP
62985: POP
62986: GO 62992
// end ; end ;
62988: GO 62939
62990: POP
62991: POP
// end ;
62992: LD_VAR 0 3
62996: RET
// export function GetCargoBay ( units ) ; begin
62997: LD_INT 0
62999: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
63000: LD_ADDR_VAR 0 2
63004: PUSH
63005: LD_VAR 0 1
63009: PPUSH
63010: LD_INT 2
63012: PUSH
63013: LD_INT 34
63015: PUSH
63016: LD_INT 12
63018: PUSH
63019: EMPTY
63020: LIST
63021: LIST
63022: PUSH
63023: LD_INT 34
63025: PUSH
63026: LD_INT 51
63028: PUSH
63029: EMPTY
63030: LIST
63031: LIST
63032: PUSH
63033: LD_INT 34
63035: PUSH
63036: LD_INT 32
63038: PUSH
63039: EMPTY
63040: LIST
63041: LIST
63042: PUSH
63043: LD_INT 34
63045: PUSH
63046: LD_EXP 94
63050: PUSH
63051: EMPTY
63052: LIST
63053: LIST
63054: PUSH
63055: EMPTY
63056: LIST
63057: LIST
63058: LIST
63059: LIST
63060: LIST
63061: PPUSH
63062: CALL_OW 72
63066: ST_TO_ADDR
// end ;
63067: LD_VAR 0 2
63071: RET
// export function Negate ( value ) ; begin
63072: LD_INT 0
63074: PPUSH
// result := not value ;
63075: LD_ADDR_VAR 0 2
63079: PUSH
63080: LD_VAR 0 1
63084: NOT
63085: ST_TO_ADDR
// end ;
63086: LD_VAR 0 2
63090: RET
// export function Inc ( value ) ; begin
63091: LD_INT 0
63093: PPUSH
// result := value + 1 ;
63094: LD_ADDR_VAR 0 2
63098: PUSH
63099: LD_VAR 0 1
63103: PUSH
63104: LD_INT 1
63106: PLUS
63107: ST_TO_ADDR
// end ;
63108: LD_VAR 0 2
63112: RET
// export function Dec ( value ) ; begin
63113: LD_INT 0
63115: PPUSH
// result := value - 1 ;
63116: LD_ADDR_VAR 0 2
63120: PUSH
63121: LD_VAR 0 1
63125: PUSH
63126: LD_INT 1
63128: MINUS
63129: ST_TO_ADDR
// end ;
63130: LD_VAR 0 2
63134: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
63135: LD_INT 0
63137: PPUSH
63138: PPUSH
63139: PPUSH
63140: PPUSH
63141: PPUSH
63142: PPUSH
63143: PPUSH
63144: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
63145: LD_VAR 0 1
63149: PPUSH
63150: LD_VAR 0 2
63154: PPUSH
63155: CALL_OW 488
63159: NOT
63160: PUSH
63161: LD_VAR 0 3
63165: PPUSH
63166: LD_VAR 0 4
63170: PPUSH
63171: CALL_OW 488
63175: NOT
63176: OR
63177: IFFALSE 63190
// begin result := - 1 ;
63179: LD_ADDR_VAR 0 5
63183: PUSH
63184: LD_INT 1
63186: NEG
63187: ST_TO_ADDR
// exit ;
63188: GO 63425
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
63190: LD_ADDR_VAR 0 12
63194: PUSH
63195: LD_VAR 0 1
63199: PPUSH
63200: LD_VAR 0 2
63204: PPUSH
63205: LD_VAR 0 3
63209: PPUSH
63210: LD_VAR 0 4
63214: PPUSH
63215: CALL 62273 0 4
63219: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
63220: LD_ADDR_VAR 0 11
63224: PUSH
63225: LD_VAR 0 1
63229: PPUSH
63230: LD_VAR 0 2
63234: PPUSH
63235: LD_VAR 0 12
63239: PUSH
63240: LD_INT 1
63242: ARRAY
63243: PPUSH
63244: LD_VAR 0 12
63248: PUSH
63249: LD_INT 2
63251: ARRAY
63252: PPUSH
63253: CALL_OW 298
63257: ST_TO_ADDR
// distance := 9999 ;
63258: LD_ADDR_VAR 0 10
63262: PUSH
63263: LD_INT 9999
63265: ST_TO_ADDR
// for i := 0 to 5 do
63266: LD_ADDR_VAR 0 6
63270: PUSH
63271: DOUBLE
63272: LD_INT 0
63274: DEC
63275: ST_TO_ADDR
63276: LD_INT 5
63278: PUSH
63279: FOR_TO
63280: IFFALSE 63423
// begin _x := ShiftX ( x1 , i , centerDist ) ;
63282: LD_ADDR_VAR 0 7
63286: PUSH
63287: LD_VAR 0 1
63291: PPUSH
63292: LD_VAR 0 6
63296: PPUSH
63297: LD_VAR 0 11
63301: PPUSH
63302: CALL_OW 272
63306: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
63307: LD_ADDR_VAR 0 8
63311: PUSH
63312: LD_VAR 0 2
63316: PPUSH
63317: LD_VAR 0 6
63321: PPUSH
63322: LD_VAR 0 11
63326: PPUSH
63327: CALL_OW 273
63331: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
63332: LD_VAR 0 7
63336: PPUSH
63337: LD_VAR 0 8
63341: PPUSH
63342: CALL_OW 488
63346: NOT
63347: IFFALSE 63351
// continue ;
63349: GO 63279
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
63351: LD_ADDR_VAR 0 9
63355: PUSH
63356: LD_VAR 0 12
63360: PUSH
63361: LD_INT 1
63363: ARRAY
63364: PPUSH
63365: LD_VAR 0 12
63369: PUSH
63370: LD_INT 2
63372: ARRAY
63373: PPUSH
63374: LD_VAR 0 7
63378: PPUSH
63379: LD_VAR 0 8
63383: PPUSH
63384: CALL_OW 298
63388: ST_TO_ADDR
// if tmp < distance then
63389: LD_VAR 0 9
63393: PUSH
63394: LD_VAR 0 10
63398: LESS
63399: IFFALSE 63421
// begin result := i ;
63401: LD_ADDR_VAR 0 5
63405: PUSH
63406: LD_VAR 0 6
63410: ST_TO_ADDR
// distance := tmp ;
63411: LD_ADDR_VAR 0 10
63415: PUSH
63416: LD_VAR 0 9
63420: ST_TO_ADDR
// end ; end ;
63421: GO 63279
63423: POP
63424: POP
// end ;
63425: LD_VAR 0 5
63429: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
63430: LD_INT 0
63432: PPUSH
63433: PPUSH
// if not driver or not IsInUnit ( driver ) then
63434: LD_VAR 0 1
63438: NOT
63439: PUSH
63440: LD_VAR 0 1
63444: PPUSH
63445: CALL_OW 310
63449: NOT
63450: OR
63451: IFFALSE 63455
// exit ;
63453: GO 63545
// vehicle := IsInUnit ( driver ) ;
63455: LD_ADDR_VAR 0 3
63459: PUSH
63460: LD_VAR 0 1
63464: PPUSH
63465: CALL_OW 310
63469: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
63470: LD_VAR 0 1
63474: PPUSH
63475: LD_STRING \
63477: PUSH
63478: LD_INT 0
63480: PUSH
63481: LD_INT 0
63483: PUSH
63484: LD_INT 0
63486: PUSH
63487: LD_INT 0
63489: PUSH
63490: LD_INT 0
63492: PUSH
63493: LD_INT 0
63495: PUSH
63496: EMPTY
63497: LIST
63498: LIST
63499: LIST
63500: LIST
63501: LIST
63502: LIST
63503: LIST
63504: PUSH
63505: LD_STRING E
63507: PUSH
63508: LD_INT 0
63510: PUSH
63511: LD_INT 0
63513: PUSH
63514: LD_VAR 0 3
63518: PUSH
63519: LD_INT 0
63521: PUSH
63522: LD_INT 0
63524: PUSH
63525: LD_INT 0
63527: PUSH
63528: EMPTY
63529: LIST
63530: LIST
63531: LIST
63532: LIST
63533: LIST
63534: LIST
63535: LIST
63536: PUSH
63537: EMPTY
63538: LIST
63539: LIST
63540: PPUSH
63541: CALL_OW 446
// end ;
63545: LD_VAR 0 2
63549: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
63550: LD_INT 0
63552: PPUSH
63553: PPUSH
// if not driver or not IsInUnit ( driver ) then
63554: LD_VAR 0 1
63558: NOT
63559: PUSH
63560: LD_VAR 0 1
63564: PPUSH
63565: CALL_OW 310
63569: NOT
63570: OR
63571: IFFALSE 63575
// exit ;
63573: GO 63665
// vehicle := IsInUnit ( driver ) ;
63575: LD_ADDR_VAR 0 3
63579: PUSH
63580: LD_VAR 0 1
63584: PPUSH
63585: CALL_OW 310
63589: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
63590: LD_VAR 0 1
63594: PPUSH
63595: LD_STRING \
63597: PUSH
63598: LD_INT 0
63600: PUSH
63601: LD_INT 0
63603: PUSH
63604: LD_INT 0
63606: PUSH
63607: LD_INT 0
63609: PUSH
63610: LD_INT 0
63612: PUSH
63613: LD_INT 0
63615: PUSH
63616: EMPTY
63617: LIST
63618: LIST
63619: LIST
63620: LIST
63621: LIST
63622: LIST
63623: LIST
63624: PUSH
63625: LD_STRING E
63627: PUSH
63628: LD_INT 0
63630: PUSH
63631: LD_INT 0
63633: PUSH
63634: LD_VAR 0 3
63638: PUSH
63639: LD_INT 0
63641: PUSH
63642: LD_INT 0
63644: PUSH
63645: LD_INT 0
63647: PUSH
63648: EMPTY
63649: LIST
63650: LIST
63651: LIST
63652: LIST
63653: LIST
63654: LIST
63655: LIST
63656: PUSH
63657: EMPTY
63658: LIST
63659: LIST
63660: PPUSH
63661: CALL_OW 447
// end ;
63665: LD_VAR 0 2
63669: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
63670: LD_INT 0
63672: PPUSH
63673: PPUSH
63674: PPUSH
// tmp := [ ] ;
63675: LD_ADDR_VAR 0 5
63679: PUSH
63680: EMPTY
63681: ST_TO_ADDR
// for i in units do
63682: LD_ADDR_VAR 0 4
63686: PUSH
63687: LD_VAR 0 1
63691: PUSH
63692: FOR_IN
63693: IFFALSE 63731
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
63695: LD_ADDR_VAR 0 5
63699: PUSH
63700: LD_VAR 0 5
63704: PPUSH
63705: LD_VAR 0 5
63709: PUSH
63710: LD_INT 1
63712: PLUS
63713: PPUSH
63714: LD_VAR 0 4
63718: PPUSH
63719: CALL_OW 256
63723: PPUSH
63724: CALL_OW 2
63728: ST_TO_ADDR
63729: GO 63692
63731: POP
63732: POP
// if not tmp then
63733: LD_VAR 0 5
63737: NOT
63738: IFFALSE 63742
// exit ;
63740: GO 63790
// if asc then
63742: LD_VAR 0 2
63746: IFFALSE 63770
// result := SortListByListAsc ( units , tmp ) else
63748: LD_ADDR_VAR 0 3
63752: PUSH
63753: LD_VAR 0 1
63757: PPUSH
63758: LD_VAR 0 5
63762: PPUSH
63763: CALL_OW 76
63767: ST_TO_ADDR
63768: GO 63790
// result := SortListByListDesc ( units , tmp ) ;
63770: LD_ADDR_VAR 0 3
63774: PUSH
63775: LD_VAR 0 1
63779: PPUSH
63780: LD_VAR 0 5
63784: PPUSH
63785: CALL_OW 77
63789: ST_TO_ADDR
// end ;
63790: LD_VAR 0 3
63794: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
63795: LD_INT 0
63797: PPUSH
63798: PPUSH
// task := GetTaskList ( mech ) ;
63799: LD_ADDR_VAR 0 4
63803: PUSH
63804: LD_VAR 0 1
63808: PPUSH
63809: CALL_OW 437
63813: ST_TO_ADDR
// if not task then
63814: LD_VAR 0 4
63818: NOT
63819: IFFALSE 63823
// exit ;
63821: GO 63865
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
63823: LD_ADDR_VAR 0 3
63827: PUSH
63828: LD_VAR 0 4
63832: PUSH
63833: LD_INT 1
63835: ARRAY
63836: PUSH
63837: LD_INT 1
63839: ARRAY
63840: PUSH
63841: LD_STRING r
63843: EQUAL
63844: PUSH
63845: LD_VAR 0 4
63849: PUSH
63850: LD_INT 1
63852: ARRAY
63853: PUSH
63854: LD_INT 4
63856: ARRAY
63857: PUSH
63858: LD_VAR 0 2
63862: EQUAL
63863: AND
63864: ST_TO_ADDR
// end ;
63865: LD_VAR 0 3
63869: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
63870: LD_INT 0
63872: PPUSH
// SetDir ( unit , d ) ;
63873: LD_VAR 0 1
63877: PPUSH
63878: LD_VAR 0 4
63882: PPUSH
63883: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
63887: LD_VAR 0 1
63891: PPUSH
63892: LD_VAR 0 2
63896: PPUSH
63897: LD_VAR 0 3
63901: PPUSH
63902: LD_VAR 0 5
63906: PPUSH
63907: CALL_OW 48
// end ;
63911: LD_VAR 0 6
63915: RET
// export function ToNaturalNumber ( number ) ; begin
63916: LD_INT 0
63918: PPUSH
// result := number div 1 ;
63919: LD_ADDR_VAR 0 2
63923: PUSH
63924: LD_VAR 0 1
63928: PUSH
63929: LD_INT 1
63931: DIV
63932: ST_TO_ADDR
// if number < 0 then
63933: LD_VAR 0 1
63937: PUSH
63938: LD_INT 0
63940: LESS
63941: IFFALSE 63951
// result := 0 ;
63943: LD_ADDR_VAR 0 2
63947: PUSH
63948: LD_INT 0
63950: ST_TO_ADDR
// end ;
63951: LD_VAR 0 2
63955: RET
// export function SortByClass ( units , class ) ; var un ; begin
63956: LD_INT 0
63958: PPUSH
63959: PPUSH
// if not units or not class then
63960: LD_VAR 0 1
63964: NOT
63965: PUSH
63966: LD_VAR 0 2
63970: NOT
63971: OR
63972: IFFALSE 63976
// exit ;
63974: GO 64071
// result := [ ] ;
63976: LD_ADDR_VAR 0 3
63980: PUSH
63981: EMPTY
63982: ST_TO_ADDR
// for un in units do
63983: LD_ADDR_VAR 0 4
63987: PUSH
63988: LD_VAR 0 1
63992: PUSH
63993: FOR_IN
63994: IFFALSE 64069
// if GetClass ( un ) = class then
63996: LD_VAR 0 4
64000: PPUSH
64001: CALL_OW 257
64005: PUSH
64006: LD_VAR 0 2
64010: EQUAL
64011: IFFALSE 64038
// result := Insert ( result , 1 , un ) else
64013: LD_ADDR_VAR 0 3
64017: PUSH
64018: LD_VAR 0 3
64022: PPUSH
64023: LD_INT 1
64025: PPUSH
64026: LD_VAR 0 4
64030: PPUSH
64031: CALL_OW 2
64035: ST_TO_ADDR
64036: GO 64067
// result := Replace ( result , result + 1 , un ) ;
64038: LD_ADDR_VAR 0 3
64042: PUSH
64043: LD_VAR 0 3
64047: PPUSH
64048: LD_VAR 0 3
64052: PUSH
64053: LD_INT 1
64055: PLUS
64056: PPUSH
64057: LD_VAR 0 4
64061: PPUSH
64062: CALL_OW 1
64066: ST_TO_ADDR
64067: GO 63993
64069: POP
64070: POP
// end ;
64071: LD_VAR 0 3
64075: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
64076: LD_INT 0
64078: PPUSH
64079: PPUSH
64080: PPUSH
64081: PPUSH
64082: PPUSH
64083: PPUSH
64084: PPUSH
// result := [ ] ;
64085: LD_ADDR_VAR 0 4
64089: PUSH
64090: EMPTY
64091: ST_TO_ADDR
// if x - r < 0 then
64092: LD_VAR 0 1
64096: PUSH
64097: LD_VAR 0 3
64101: MINUS
64102: PUSH
64103: LD_INT 0
64105: LESS
64106: IFFALSE 64118
// min_x := 0 else
64108: LD_ADDR_VAR 0 8
64112: PUSH
64113: LD_INT 0
64115: ST_TO_ADDR
64116: GO 64134
// min_x := x - r ;
64118: LD_ADDR_VAR 0 8
64122: PUSH
64123: LD_VAR 0 1
64127: PUSH
64128: LD_VAR 0 3
64132: MINUS
64133: ST_TO_ADDR
// if y - r < 0 then
64134: LD_VAR 0 2
64138: PUSH
64139: LD_VAR 0 3
64143: MINUS
64144: PUSH
64145: LD_INT 0
64147: LESS
64148: IFFALSE 64160
// min_y := 0 else
64150: LD_ADDR_VAR 0 7
64154: PUSH
64155: LD_INT 0
64157: ST_TO_ADDR
64158: GO 64176
// min_y := y - r ;
64160: LD_ADDR_VAR 0 7
64164: PUSH
64165: LD_VAR 0 2
64169: PUSH
64170: LD_VAR 0 3
64174: MINUS
64175: ST_TO_ADDR
// max_x := x + r ;
64176: LD_ADDR_VAR 0 9
64180: PUSH
64181: LD_VAR 0 1
64185: PUSH
64186: LD_VAR 0 3
64190: PLUS
64191: ST_TO_ADDR
// max_y := y + r ;
64192: LD_ADDR_VAR 0 10
64196: PUSH
64197: LD_VAR 0 2
64201: PUSH
64202: LD_VAR 0 3
64206: PLUS
64207: ST_TO_ADDR
// for _x = min_x to max_x do
64208: LD_ADDR_VAR 0 5
64212: PUSH
64213: DOUBLE
64214: LD_VAR 0 8
64218: DEC
64219: ST_TO_ADDR
64220: LD_VAR 0 9
64224: PUSH
64225: FOR_TO
64226: IFFALSE 64327
// for _y = min_y to max_y do
64228: LD_ADDR_VAR 0 6
64232: PUSH
64233: DOUBLE
64234: LD_VAR 0 7
64238: DEC
64239: ST_TO_ADDR
64240: LD_VAR 0 10
64244: PUSH
64245: FOR_TO
64246: IFFALSE 64323
// begin if not ValidHex ( _x , _y ) then
64248: LD_VAR 0 5
64252: PPUSH
64253: LD_VAR 0 6
64257: PPUSH
64258: CALL_OW 488
64262: NOT
64263: IFFALSE 64267
// continue ;
64265: GO 64245
// if GetResourceTypeXY ( _x , _y ) then
64267: LD_VAR 0 5
64271: PPUSH
64272: LD_VAR 0 6
64276: PPUSH
64277: CALL_OW 283
64281: IFFALSE 64321
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
64283: LD_ADDR_VAR 0 4
64287: PUSH
64288: LD_VAR 0 4
64292: PPUSH
64293: LD_VAR 0 4
64297: PUSH
64298: LD_INT 1
64300: PLUS
64301: PPUSH
64302: LD_VAR 0 5
64306: PUSH
64307: LD_VAR 0 6
64311: PUSH
64312: EMPTY
64313: LIST
64314: LIST
64315: PPUSH
64316: CALL_OW 1
64320: ST_TO_ADDR
// end ;
64321: GO 64245
64323: POP
64324: POP
64325: GO 64225
64327: POP
64328: POP
// end ;
64329: LD_VAR 0 4
64333: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
64334: LD_INT 0
64336: PPUSH
64337: PPUSH
64338: PPUSH
64339: PPUSH
64340: PPUSH
64341: PPUSH
64342: PPUSH
64343: PPUSH
// if not units then
64344: LD_VAR 0 1
64348: NOT
64349: IFFALSE 64353
// exit ;
64351: GO 64879
// result := UnitFilter ( units , [ f_ok ] ) ;
64353: LD_ADDR_VAR 0 3
64357: PUSH
64358: LD_VAR 0 1
64362: PPUSH
64363: LD_INT 50
64365: PUSH
64366: EMPTY
64367: LIST
64368: PPUSH
64369: CALL_OW 72
64373: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
64374: LD_ADDR_VAR 0 8
64378: PUSH
64379: LD_VAR 0 1
64383: PUSH
64384: LD_INT 1
64386: ARRAY
64387: PPUSH
64388: CALL_OW 255
64392: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
64393: LD_ADDR_VAR 0 10
64397: PUSH
64398: LD_INT 29
64400: PUSH
64401: LD_EXP 97
64405: PUSH
64406: LD_INT 49
64408: PUSH
64409: EMPTY
64410: LIST
64411: LIST
64412: LIST
64413: ST_TO_ADDR
// if not result then
64414: LD_VAR 0 3
64418: NOT
64419: IFFALSE 64423
// exit ;
64421: GO 64879
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
64423: LD_ADDR_VAR 0 5
64427: PUSH
64428: LD_INT 81
64430: PUSH
64431: LD_VAR 0 8
64435: PUSH
64436: EMPTY
64437: LIST
64438: LIST
64439: PPUSH
64440: CALL_OW 69
64444: ST_TO_ADDR
// for i in result do
64445: LD_ADDR_VAR 0 4
64449: PUSH
64450: LD_VAR 0 3
64454: PUSH
64455: FOR_IN
64456: IFFALSE 64877
// begin tag := GetTag ( i ) + 1 ;
64458: LD_ADDR_VAR 0 9
64462: PUSH
64463: LD_VAR 0 4
64467: PPUSH
64468: CALL_OW 110
64472: PUSH
64473: LD_INT 1
64475: PLUS
64476: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
64477: LD_ADDR_VAR 0 7
64481: PUSH
64482: LD_VAR 0 4
64486: PPUSH
64487: CALL_OW 250
64491: PPUSH
64492: LD_VAR 0 4
64496: PPUSH
64497: CALL_OW 251
64501: PPUSH
64502: LD_INT 6
64504: PPUSH
64505: CALL 64076 0 3
64509: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
64510: LD_VAR 0 4
64514: PPUSH
64515: CALL_OW 247
64519: PUSH
64520: LD_INT 2
64522: EQUAL
64523: PUSH
64524: LD_VAR 0 7
64528: AND
64529: PUSH
64530: LD_VAR 0 4
64534: PPUSH
64535: CALL_OW 264
64539: PUSH
64540: LD_VAR 0 10
64544: IN
64545: NOT
64546: AND
64547: IFFALSE 64586
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
64549: LD_VAR 0 4
64553: PPUSH
64554: LD_VAR 0 7
64558: PUSH
64559: LD_INT 1
64561: ARRAY
64562: PUSH
64563: LD_INT 1
64565: ARRAY
64566: PPUSH
64567: LD_VAR 0 7
64571: PUSH
64572: LD_INT 1
64574: ARRAY
64575: PUSH
64576: LD_INT 2
64578: ARRAY
64579: PPUSH
64580: CALL_OW 116
64584: GO 64875
// if path > tag then
64586: LD_VAR 0 2
64590: PUSH
64591: LD_VAR 0 9
64595: GREATER
64596: IFFALSE 64804
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
64598: LD_ADDR_VAR 0 6
64602: PUSH
64603: LD_VAR 0 5
64607: PPUSH
64608: LD_INT 91
64610: PUSH
64611: LD_VAR 0 4
64615: PUSH
64616: LD_INT 8
64618: PUSH
64619: EMPTY
64620: LIST
64621: LIST
64622: LIST
64623: PPUSH
64624: CALL_OW 72
64628: ST_TO_ADDR
// if nearEnemy then
64629: LD_VAR 0 6
64633: IFFALSE 64702
// begin if GetWeapon ( i ) = ru_time_lapser then
64635: LD_VAR 0 4
64639: PPUSH
64640: CALL_OW 264
64644: PUSH
64645: LD_INT 49
64647: EQUAL
64648: IFFALSE 64676
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
64650: LD_VAR 0 4
64654: PPUSH
64655: LD_VAR 0 6
64659: PPUSH
64660: LD_VAR 0 4
64664: PPUSH
64665: CALL_OW 74
64669: PPUSH
64670: CALL_OW 112
64674: GO 64700
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
64676: LD_VAR 0 4
64680: PPUSH
64681: LD_VAR 0 6
64685: PPUSH
64686: LD_VAR 0 4
64690: PPUSH
64691: CALL_OW 74
64695: PPUSH
64696: CALL_OW 115
// end else
64700: GO 64802
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
64702: LD_VAR 0 4
64706: PPUSH
64707: LD_VAR 0 2
64711: PUSH
64712: LD_VAR 0 9
64716: ARRAY
64717: PUSH
64718: LD_INT 1
64720: ARRAY
64721: PPUSH
64722: LD_VAR 0 2
64726: PUSH
64727: LD_VAR 0 9
64731: ARRAY
64732: PUSH
64733: LD_INT 2
64735: ARRAY
64736: PPUSH
64737: CALL_OW 297
64741: PUSH
64742: LD_INT 6
64744: GREATER
64745: IFFALSE 64788
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
64747: LD_VAR 0 4
64751: PPUSH
64752: LD_VAR 0 2
64756: PUSH
64757: LD_VAR 0 9
64761: ARRAY
64762: PUSH
64763: LD_INT 1
64765: ARRAY
64766: PPUSH
64767: LD_VAR 0 2
64771: PUSH
64772: LD_VAR 0 9
64776: ARRAY
64777: PUSH
64778: LD_INT 2
64780: ARRAY
64781: PPUSH
64782: CALL_OW 114
64786: GO 64802
// SetTag ( i , tag ) ;
64788: LD_VAR 0 4
64792: PPUSH
64793: LD_VAR 0 9
64797: PPUSH
64798: CALL_OW 109
// end else
64802: GO 64875
// if enemy then
64804: LD_VAR 0 5
64808: IFFALSE 64875
// begin if GetWeapon ( i ) = ru_time_lapser then
64810: LD_VAR 0 4
64814: PPUSH
64815: CALL_OW 264
64819: PUSH
64820: LD_INT 49
64822: EQUAL
64823: IFFALSE 64851
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
64825: LD_VAR 0 4
64829: PPUSH
64830: LD_VAR 0 5
64834: PPUSH
64835: LD_VAR 0 4
64839: PPUSH
64840: CALL_OW 74
64844: PPUSH
64845: CALL_OW 112
64849: GO 64875
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
64851: LD_VAR 0 4
64855: PPUSH
64856: LD_VAR 0 5
64860: PPUSH
64861: LD_VAR 0 4
64865: PPUSH
64866: CALL_OW 74
64870: PPUSH
64871: CALL_OW 115
// end ; end ;
64875: GO 64455
64877: POP
64878: POP
// end ;
64879: LD_VAR 0 3
64883: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
64884: LD_INT 0
64886: PPUSH
64887: PPUSH
64888: PPUSH
// if not unit or IsInUnit ( unit ) then
64889: LD_VAR 0 1
64893: NOT
64894: PUSH
64895: LD_VAR 0 1
64899: PPUSH
64900: CALL_OW 310
64904: OR
64905: IFFALSE 64909
// exit ;
64907: GO 65000
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
64909: LD_ADDR_VAR 0 4
64913: PUSH
64914: LD_VAR 0 1
64918: PPUSH
64919: CALL_OW 250
64923: PPUSH
64924: LD_VAR 0 2
64928: PPUSH
64929: LD_INT 1
64931: PPUSH
64932: CALL_OW 272
64936: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
64937: LD_ADDR_VAR 0 5
64941: PUSH
64942: LD_VAR 0 1
64946: PPUSH
64947: CALL_OW 251
64951: PPUSH
64952: LD_VAR 0 2
64956: PPUSH
64957: LD_INT 1
64959: PPUSH
64960: CALL_OW 273
64964: ST_TO_ADDR
// if ValidHex ( x , y ) then
64965: LD_VAR 0 4
64969: PPUSH
64970: LD_VAR 0 5
64974: PPUSH
64975: CALL_OW 488
64979: IFFALSE 65000
// ComTurnXY ( unit , x , y ) ;
64981: LD_VAR 0 1
64985: PPUSH
64986: LD_VAR 0 4
64990: PPUSH
64991: LD_VAR 0 5
64995: PPUSH
64996: CALL_OW 118
// end ;
65000: LD_VAR 0 3
65004: RET
// export function SeeUnits ( side , units ) ; var i ; begin
65005: LD_INT 0
65007: PPUSH
65008: PPUSH
// result := false ;
65009: LD_ADDR_VAR 0 3
65013: PUSH
65014: LD_INT 0
65016: ST_TO_ADDR
// if not units then
65017: LD_VAR 0 2
65021: NOT
65022: IFFALSE 65026
// exit ;
65024: GO 65071
// for i in units do
65026: LD_ADDR_VAR 0 4
65030: PUSH
65031: LD_VAR 0 2
65035: PUSH
65036: FOR_IN
65037: IFFALSE 65069
// if See ( side , i ) then
65039: LD_VAR 0 1
65043: PPUSH
65044: LD_VAR 0 4
65048: PPUSH
65049: CALL_OW 292
65053: IFFALSE 65067
// begin result := true ;
65055: LD_ADDR_VAR 0 3
65059: PUSH
65060: LD_INT 1
65062: ST_TO_ADDR
// exit ;
65063: POP
65064: POP
65065: GO 65071
// end ;
65067: GO 65036
65069: POP
65070: POP
// end ;
65071: LD_VAR 0 3
65075: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
65076: LD_INT 0
65078: PPUSH
65079: PPUSH
65080: PPUSH
65081: PPUSH
// if not unit or not points then
65082: LD_VAR 0 1
65086: NOT
65087: PUSH
65088: LD_VAR 0 2
65092: NOT
65093: OR
65094: IFFALSE 65098
// exit ;
65096: GO 65188
// dist := 99999 ;
65098: LD_ADDR_VAR 0 5
65102: PUSH
65103: LD_INT 99999
65105: ST_TO_ADDR
// for i in points do
65106: LD_ADDR_VAR 0 4
65110: PUSH
65111: LD_VAR 0 2
65115: PUSH
65116: FOR_IN
65117: IFFALSE 65186
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
65119: LD_ADDR_VAR 0 6
65123: PUSH
65124: LD_VAR 0 1
65128: PPUSH
65129: LD_VAR 0 4
65133: PUSH
65134: LD_INT 1
65136: ARRAY
65137: PPUSH
65138: LD_VAR 0 4
65142: PUSH
65143: LD_INT 2
65145: ARRAY
65146: PPUSH
65147: CALL_OW 297
65151: ST_TO_ADDR
// if tmpDist < dist then
65152: LD_VAR 0 6
65156: PUSH
65157: LD_VAR 0 5
65161: LESS
65162: IFFALSE 65184
// begin result := i ;
65164: LD_ADDR_VAR 0 3
65168: PUSH
65169: LD_VAR 0 4
65173: ST_TO_ADDR
// dist := tmpDist ;
65174: LD_ADDR_VAR 0 5
65178: PUSH
65179: LD_VAR 0 6
65183: ST_TO_ADDR
// end ; end ;
65184: GO 65116
65186: POP
65187: POP
// end ;
65188: LD_VAR 0 3
65192: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
65193: LD_INT 0
65195: PPUSH
// uc_side := side ;
65196: LD_ADDR_OWVAR 20
65200: PUSH
65201: LD_VAR 0 1
65205: ST_TO_ADDR
// uc_nation := 3 ;
65206: LD_ADDR_OWVAR 21
65210: PUSH
65211: LD_INT 3
65213: ST_TO_ADDR
// vc_chassis := 25 ;
65214: LD_ADDR_OWVAR 37
65218: PUSH
65219: LD_INT 25
65221: ST_TO_ADDR
// vc_engine := engine_siberite ;
65222: LD_ADDR_OWVAR 39
65226: PUSH
65227: LD_INT 3
65229: ST_TO_ADDR
// vc_control := control_computer ;
65230: LD_ADDR_OWVAR 38
65234: PUSH
65235: LD_INT 3
65237: ST_TO_ADDR
// vc_weapon := 59 ;
65238: LD_ADDR_OWVAR 40
65242: PUSH
65243: LD_INT 59
65245: ST_TO_ADDR
// result := CreateVehicle ;
65246: LD_ADDR_VAR 0 5
65250: PUSH
65251: CALL_OW 45
65255: ST_TO_ADDR
// SetDir ( result , d ) ;
65256: LD_VAR 0 5
65260: PPUSH
65261: LD_VAR 0 4
65265: PPUSH
65266: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
65270: LD_VAR 0 5
65274: PPUSH
65275: LD_VAR 0 2
65279: PPUSH
65280: LD_VAR 0 3
65284: PPUSH
65285: LD_INT 0
65287: PPUSH
65288: CALL_OW 48
// end ;
65292: LD_VAR 0 5
65296: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
65297: LD_INT 0
65299: PPUSH
65300: PPUSH
65301: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
65302: LD_ADDR_VAR 0 2
65306: PUSH
65307: LD_INT 0
65309: PUSH
65310: LD_INT 0
65312: PUSH
65313: LD_INT 0
65315: PUSH
65316: LD_INT 0
65318: PUSH
65319: EMPTY
65320: LIST
65321: LIST
65322: LIST
65323: LIST
65324: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
65325: LD_VAR 0 1
65329: NOT
65330: PUSH
65331: LD_VAR 0 1
65335: PPUSH
65336: CALL_OW 264
65340: PUSH
65341: LD_INT 12
65343: PUSH
65344: LD_INT 51
65346: PUSH
65347: LD_INT 32
65349: PUSH
65350: LD_EXP 94
65354: PUSH
65355: EMPTY
65356: LIST
65357: LIST
65358: LIST
65359: LIST
65360: IN
65361: NOT
65362: OR
65363: IFFALSE 65367
// exit ;
65365: GO 65465
// for i := 1 to 3 do
65367: LD_ADDR_VAR 0 3
65371: PUSH
65372: DOUBLE
65373: LD_INT 1
65375: DEC
65376: ST_TO_ADDR
65377: LD_INT 3
65379: PUSH
65380: FOR_TO
65381: IFFALSE 65463
// begin tmp := GetCargo ( cargo , i ) ;
65383: LD_ADDR_VAR 0 4
65387: PUSH
65388: LD_VAR 0 1
65392: PPUSH
65393: LD_VAR 0 3
65397: PPUSH
65398: CALL_OW 289
65402: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
65403: LD_ADDR_VAR 0 2
65407: PUSH
65408: LD_VAR 0 2
65412: PPUSH
65413: LD_VAR 0 3
65417: PPUSH
65418: LD_VAR 0 4
65422: PPUSH
65423: CALL_OW 1
65427: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
65428: LD_ADDR_VAR 0 2
65432: PUSH
65433: LD_VAR 0 2
65437: PPUSH
65438: LD_INT 4
65440: PPUSH
65441: LD_VAR 0 2
65445: PUSH
65446: LD_INT 4
65448: ARRAY
65449: PUSH
65450: LD_VAR 0 4
65454: PLUS
65455: PPUSH
65456: CALL_OW 1
65460: ST_TO_ADDR
// end ;
65461: GO 65380
65463: POP
65464: POP
// end ;
65465: LD_VAR 0 2
65469: RET
// export function Length ( array ) ; begin
65470: LD_INT 0
65472: PPUSH
// result := array + 0 ;
65473: LD_ADDR_VAR 0 2
65477: PUSH
65478: LD_VAR 0 1
65482: PUSH
65483: LD_INT 0
65485: PLUS
65486: ST_TO_ADDR
// end ; end_of_file
65487: LD_VAR 0 2
65491: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
65492: LD_VAR 0 1
65496: PPUSH
65497: LD_VAR 0 2
65501: PPUSH
65502: LD_VAR 0 3
65506: PPUSH
65507: LD_VAR 0 4
65511: PPUSH
65512: LD_VAR 0 5
65516: PPUSH
65517: LD_VAR 0 6
65521: PPUSH
65522: CALL 5801 0 6
// end ;
65526: PPOPN 6
65528: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
65529: LD_INT 0
65531: PPUSH
// begin if not units then
65532: LD_VAR 0 1
65536: NOT
65537: IFFALSE 65541
// exit ;
65539: GO 65629
// if p1 = 1 then
65541: LD_VAR 0 2
65545: PUSH
65546: LD_INT 1
65548: EQUAL
65549: IFFALSE 65629
// begin if p2 = 1 then
65551: LD_VAR 0 3
65555: PUSH
65556: LD_INT 1
65558: EQUAL
65559: IFFALSE 65590
// begin for i in units do
65561: LD_ADDR_VAR 0 7
65565: PUSH
65566: LD_VAR 0 1
65570: PUSH
65571: FOR_IN
65572: IFFALSE 65588
// begin SetUnitAttackType ( i , 3 ) ;
65574: LD_VAR 0 7
65578: PPUSH
65579: LD_INT 3
65581: PPUSH
65582: CALL_OW 603
// end ;
65586: GO 65571
65588: POP
65589: POP
// end ; if p2 = 2 then
65590: LD_VAR 0 3
65594: PUSH
65595: LD_INT 2
65597: EQUAL
65598: IFFALSE 65629
// begin for i in units do
65600: LD_ADDR_VAR 0 7
65604: PUSH
65605: LD_VAR 0 1
65609: PUSH
65610: FOR_IN
65611: IFFALSE 65627
// begin SetUnitAttackType ( i , 1 ) ;
65613: LD_VAR 0 7
65617: PPUSH
65618: LD_INT 1
65620: PPUSH
65621: CALL_OW 603
// end ;
65625: GO 65610
65627: POP
65628: POP
// end ; end ; end ;
65629: PPOPN 7
65631: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
65632: CALL 5776 0 0
// end ; end_of_file
65636: PPOPN 1
65638: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
65639: LD_VAR 0 1
65643: PUSH
65644: LD_INT 200
65646: DOUBLE
65647: GREATEREQUAL
65648: IFFALSE 65656
65650: LD_INT 299
65652: DOUBLE
65653: LESSEQUAL
65654: IFTRUE 65658
65656: GO 65690
65658: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
65659: LD_VAR 0 1
65663: PPUSH
65664: LD_VAR 0 2
65668: PPUSH
65669: LD_VAR 0 3
65673: PPUSH
65674: LD_VAR 0 4
65678: PPUSH
65679: LD_VAR 0 5
65683: PPUSH
65684: CALL 20466 0 5
65688: GO 65767
65690: LD_INT 300
65692: DOUBLE
65693: GREATEREQUAL
65694: IFFALSE 65702
65696: LD_INT 399
65698: DOUBLE
65699: LESSEQUAL
65700: IFTRUE 65704
65702: GO 65766
65704: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
65705: LD_VAR 0 1
65709: PPUSH
65710: LD_VAR 0 2
65714: PPUSH
65715: LD_VAR 0 3
65719: PPUSH
65720: LD_VAR 0 4
65724: PPUSH
65725: LD_VAR 0 5
65729: PPUSH
65730: LD_VAR 0 6
65734: PPUSH
65735: LD_VAR 0 7
65739: PPUSH
65740: LD_VAR 0 8
65744: PPUSH
65745: LD_VAR 0 9
65749: PPUSH
65750: LD_VAR 0 10
65754: PPUSH
65755: LD_VAR 0 11
65759: PPUSH
65760: CALL 18108 0 11
65764: GO 65767
65766: POP
// end ;
65767: PPOPN 11
65769: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
65770: LD_VAR 0 1
65774: PPUSH
65775: LD_VAR 0 2
65779: PPUSH
65780: LD_VAR 0 3
65784: PPUSH
65785: LD_VAR 0 4
65789: PPUSH
65790: LD_VAR 0 5
65794: PPUSH
65795: CALL 20202 0 5
// end ;
65799: PPOPN 5
65801: END
